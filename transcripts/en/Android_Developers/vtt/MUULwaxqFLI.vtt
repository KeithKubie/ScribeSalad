WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.345
[MUSIC PLAYING]

00:00:06.100 --> 00:00:07.920
CHRIS ORYSCHAK:
Everyone, good morning.

00:00:07.920 --> 00:00:09.370
Thanks for being here.

00:00:09.370 --> 00:00:13.120
I'm Chris, and I'm a PM at
Fabric, and now Firebase.

00:00:13.120 --> 00:00:14.860
And I'm also a co-founder.

00:00:14.860 --> 00:00:18.520
I was a co-founder
of a mobile start-up.

00:00:18.520 --> 00:00:20.510
So I know firsthand
from experience,

00:00:20.510 --> 00:00:22.560
and from talking to
customers like you,

00:00:22.560 --> 00:00:25.480
just how hard it is
to get more users.

00:00:25.480 --> 00:00:27.910
Building a really good growth
funnel is insanely hard.

00:00:27.910 --> 00:00:28.920
It's always changing.

00:00:28.920 --> 00:00:30.450
It's super complex.

00:00:30.450 --> 00:00:32.525
And so, as a PM over
last couple years,

00:00:32.525 --> 00:00:33.900
I've been focused
on this problem

00:00:33.900 --> 00:00:35.820
of growth for mobile apps.

00:00:35.820 --> 00:00:39.544
And especially focused on the
identity portion of growth.

00:00:39.544 --> 00:00:41.210
And a lot of people
don't think identity

00:00:41.210 --> 00:00:43.970
is a really important part
of growth and growth hacking

00:00:43.970 --> 00:00:44.946
and whatever.

00:00:44.946 --> 00:00:46.070
But actually, it really is.

00:00:46.070 --> 00:00:48.900
Because you can have an
amazing onboarding funnel,

00:00:48.900 --> 00:00:51.630
but if people can't, or
won't, log in to your app,

00:00:51.630 --> 00:00:53.100
then you don't get a user.

00:00:53.100 --> 00:00:54.620
You don't have growth.

00:00:54.620 --> 00:00:56.720
And so it's super important.

00:00:56.720 --> 00:00:59.710
And we've especially seen
a lot of great success

00:00:59.710 --> 00:01:03.830
with using phone numbers as a
effective identity for growth.

00:01:03.830 --> 00:01:06.380
So, why phone numbers?

00:01:06.380 --> 00:01:08.960
One, they have a lot
of great benefits.

00:01:08.960 --> 00:01:10.040
One, they're global.

00:01:10.040 --> 00:01:13.320
Every single person in the
world who has a smartphone

00:01:13.320 --> 00:01:15.820
has a phone number that
they have memorized.

00:01:15.820 --> 00:01:17.965
And, actually, in a lot
of emerging markets,

00:01:17.965 --> 00:01:20.090
we've learned that people
prefer to use their phone

00:01:20.090 --> 00:01:22.720
numbers as their identity
instead of an email address

00:01:22.720 --> 00:01:24.990
or another form
of identification.

00:01:24.990 --> 00:01:28.920
And second, phone numbers
are higher quality.

00:01:28.920 --> 00:01:30.820
They give you higher
quality users.

00:01:30.820 --> 00:01:33.220
Because they're more
expensive to mass produce,

00:01:33.220 --> 00:01:35.760
they're naturally resistant to
the kinds of abuse and fraud

00:01:35.760 --> 00:01:39.450
you might see more often in
other types of identification.

00:01:39.450 --> 00:01:41.000
And also, I think
most importantly

00:01:41.000 --> 00:01:43.840
for this discussion,
is they enable really

00:01:43.840 --> 00:01:47.370
low-friction sign-in
for apps and websites.

00:01:47.370 --> 00:01:51.430
And again, like I said, sign-in
is such an important part

00:01:51.430 --> 00:01:52.830
of your growth funnel.

00:01:52.830 --> 00:01:55.540
Over 90% of people who have
issues logging in to an app

00:01:55.540 --> 00:01:56.650
are going to leave.

00:01:56.650 --> 00:01:59.540
And so I think it's
a scary number,

00:01:59.540 --> 00:02:02.060
but I think it's a great
opportunity that if you really

00:02:02.060 --> 00:02:04.010
focus on identity
as part of growth,

00:02:04.010 --> 00:02:07.360
you can have really
awesome benefits.

00:02:07.360 --> 00:02:10.900
And so, if identity is
so important to growth,

00:02:10.900 --> 00:02:12.830
then why is login
so hard to use?

00:02:12.830 --> 00:02:15.770
And I think, as app
developers, as web developers,

00:02:15.770 --> 00:02:17.270
we created the login screens.

00:02:17.270 --> 00:02:22.030
And so why are we making
these screens so hard to use?

00:02:22.030 --> 00:02:26.300
And over the years, I've
noticed there's really two big,

00:02:26.300 --> 00:02:32.920
I think, two big areas of why
login is so high friction.

00:02:32.920 --> 00:02:35.807
One big one is in a
problem of optimization.

00:02:35.807 --> 00:02:37.890
We're trying to do so much
in a little screen that

00:02:37.890 --> 00:02:39.520
should be simple.

00:02:39.520 --> 00:02:41.240
Instead-- in addition
to just trying

00:02:41.240 --> 00:02:43.250
to log somebody in,
or sign them up,

00:02:43.250 --> 00:02:45.320
we're also trying to get
a way to contact them

00:02:45.320 --> 00:02:47.240
by getting their email address.

00:02:47.240 --> 00:02:49.610
We're also trying to enforce
some level of security,

00:02:49.610 --> 00:02:52.710
usually with some sort of
password credential criteria.

00:02:52.710 --> 00:02:54.720
And we know as
developers that passwords

00:02:54.720 --> 00:02:57.870
don't increase security as much
as they increase frustration

00:02:57.870 --> 00:02:59.450
and friction.

00:02:59.450 --> 00:03:00.710
One big reason.

00:03:00.710 --> 00:03:03.390
Another big reason why
login is so high friction,

00:03:03.390 --> 00:03:05.900
is on the opposite
side of the spectrum.

00:03:05.900 --> 00:03:08.350
And I'm definitely
guilty of this myself--

00:03:08.350 --> 00:03:11.400
is we're so focused on
the core value of the app

00:03:11.400 --> 00:03:13.480
that we're creating
that we don't really

00:03:13.480 --> 00:03:14.950
spend a lot of time on login.

00:03:14.950 --> 00:03:17.190
It's just something
that we threw together

00:03:17.190 --> 00:03:18.520
before we shipped.

00:03:18.520 --> 00:03:21.160
But the big disconnect there
is that the first screen

00:03:21.160 --> 00:03:23.700
our customers see is
a login screen, often.

00:03:23.700 --> 00:03:25.750
And so, the last screen
you thought about

00:03:25.750 --> 00:03:27.190
is the first screen
your customers

00:03:27.190 --> 00:03:28.398
are going to be experiencing.

00:03:28.398 --> 00:03:29.420
So huge disconnects.

00:03:29.420 --> 00:03:31.175
And those are two big
reasons why there's

00:03:31.175 --> 00:03:32.300
a lot of friction in login.

00:03:36.230 --> 00:03:39.340
And as developers, we
know that login is harder

00:03:39.340 --> 00:03:41.600
than it needs to be.

00:03:41.600 --> 00:03:44.960
Most developers are not happy
with their sign-in experience.

00:03:44.960 --> 00:03:47.190
But I know it's rational
that we'd rather

00:03:47.190 --> 00:03:49.580
focus on the core value of
our apps, our core ideas

00:03:49.580 --> 00:03:51.190
that we want to get
out to the world.

00:03:51.190 --> 00:03:53.710
And dealing with login is hard.

00:03:53.710 --> 00:03:54.890
There's UX implications.

00:03:54.890 --> 00:03:56.540
There's security implications.

00:03:56.540 --> 00:03:58.287
And it's just not something--

00:03:58.287 --> 00:04:00.120
people using our app
is more important to us

00:04:00.120 --> 00:04:03.430
than people logging into it, at
least when we're building apps.

00:04:03.430 --> 00:04:05.990
And so with all that in
mind, a couple years ago

00:04:05.990 --> 00:04:08.750
our team wanted to experiment
taking phone numbers,

00:04:08.750 --> 00:04:12.210
and wrapping them into a really
simple log-in experience.

00:04:12.210 --> 00:04:13.350
And it looked like this.

00:04:13.350 --> 00:04:15.349
Instead of entering your
email address and phone

00:04:15.349 --> 00:04:18.019
number, or email
address and password,

00:04:18.019 --> 00:04:20.620
you get your phone
number, and in return, you

00:04:20.620 --> 00:04:22.650
get a six-digit code.

00:04:22.650 --> 00:04:27.800
You push that code in
and you're logged in.

00:04:27.800 --> 00:04:31.520
Really simple, secure
log-in with no password.

00:04:31.520 --> 00:04:33.630
We took that experience
and dropped it

00:04:33.630 --> 00:04:37.200
into a really simple to
use SDK called Digits.

00:04:37.200 --> 00:04:41.270
Digits was something that people
from any technical background

00:04:41.270 --> 00:04:44.820
could dump into their apps or
websites in a few more moments

00:04:44.820 --> 00:04:46.900
than it takes to
actually log into Digits.

00:04:46.900 --> 00:04:47.730
And we let it go.

00:04:47.730 --> 00:04:51.710
And how it went, was,
I think, pretty well.

00:04:51.710 --> 00:04:54.130
Since launching, almost
150 million people

00:04:54.130 --> 00:04:57.319
have logged in with Digits
all around the world.

00:04:57.319 --> 00:04:59.610
That's been a really fun
ride, and we've learned a lot.

00:04:59.610 --> 00:05:01.520
But I think what
I've really enjoyed

00:05:01.520 --> 00:05:04.952
the most is talking to
developers like you,

00:05:04.952 --> 00:05:06.660
and hearing your
stories about the things

00:05:06.660 --> 00:05:10.330
that you care about when it
comes to growth and identity

00:05:10.330 --> 00:05:13.870
in an authentication.

00:05:13.870 --> 00:05:18.010
And, obviously, performance
is a huge factor to that.

00:05:18.010 --> 00:05:22.120
Our good friends at DoubleT
replaced email login

00:05:22.120 --> 00:05:22.824
with phone.

00:05:22.824 --> 00:05:24.490
That's one of the
options for their app.

00:05:24.490 --> 00:05:27.850
And they saw a 45% increase
in sign-in in rates.

00:05:27.850 --> 00:05:31.030
Imagine your own growth funnel,
and making one small change

00:05:31.030 --> 00:05:34.344
that can give you 45% more
users everyday into your app.

00:05:34.344 --> 00:05:36.260
I think that that's cool
for a couple reasons.

00:05:36.260 --> 00:05:38.660
One, it shows that phone
is a legitimate way

00:05:38.660 --> 00:05:39.890
to log people in.

00:05:39.890 --> 00:05:42.680
And second, it shows
that, back like I said,

00:05:42.680 --> 00:05:45.950
any changes you can make to the
identity portion of your growth

00:05:45.950 --> 00:05:49.240
funnel might have huge
impacts for your entire growth

00:05:49.240 --> 00:05:52.110
all the way through.

00:05:52.110 --> 00:05:55.210
Or Musical.ly, who is improving
the quality of their accounts

00:05:55.210 --> 00:05:58.320
by enforcing Digits
on phone verification.

00:05:58.320 --> 00:06:00.930
So what they're doing is
they're reducing fraud

00:06:00.930 --> 00:06:02.677
on their in-app economy,
which I think is

00:06:02.677 --> 00:06:03.885
a really smart use of Digits.

00:06:06.490 --> 00:06:08.010
Again on trust,
Periscope, they're

00:06:08.010 --> 00:06:10.280
early partners of Digits,
and they're still using us.

00:06:10.280 --> 00:06:13.770
And by letting us handle their
onboarding flow for them,

00:06:13.770 --> 00:06:15.740
they're able to focus
on the core value, which

00:06:15.740 --> 00:06:20.030
is delivering a live video to
people anywhere in the world.

00:06:20.030 --> 00:06:23.040
Or Dubsmash, who,
again, they relied on us

00:06:23.040 --> 00:06:27.970
to handle almost two
million people per month

00:06:27.970 --> 00:06:29.650
through Dubsmash,
so that they can

00:06:29.650 --> 00:06:33.860
focus on the core value of
what they offer to customers.

00:06:33.860 --> 00:06:36.720
And so, these kind of topics
have come up over and over

00:06:36.720 --> 00:06:37.550
again--

00:06:37.550 --> 00:06:40.127
trust, performance,
and reliability.

00:06:40.127 --> 00:06:42.210
And performance has always
been the biggest thing,

00:06:42.210 --> 00:06:44.930
because, frankly, you
hired us to do a job.

00:06:44.930 --> 00:06:46.550
The job is to give
you more users.

00:06:46.550 --> 00:06:48.430
And we wanted to
give you more users.

00:06:48.430 --> 00:06:51.670
And so, earlier this year
when we joined Google,

00:06:51.670 --> 00:06:53.590
we saw this really
amazing opportunity

00:06:53.590 --> 00:06:57.310
to take all the
iteration and UX research

00:06:57.310 --> 00:07:00.280
that you put into Digits'
kit, and combine it

00:07:00.280 --> 00:07:01.870
with a really
unique capabilities

00:07:01.870 --> 00:07:03.300
that Google has to offer.

00:07:03.300 --> 00:07:05.985
And so we put our heads
down, and a couple days ago,

00:07:05.985 --> 00:07:07.610
you saw some really
cool announcements.

00:07:07.610 --> 00:07:10.720
And I think that
what we came up with

00:07:10.720 --> 00:07:13.470
are some really awesome next
evolutions in phone auth

00:07:13.470 --> 00:07:16.580
performance,
together in Firebase.

00:07:16.580 --> 00:07:19.680
And so to share how you can
take advantage of that today,

00:07:19.680 --> 00:07:22.510
we're going to be
talking about two topics.

00:07:22.510 --> 00:07:25.610
One, for those of you who are
already managing your own SMS

00:07:25.610 --> 00:07:27.640
backend, you know
how hard it can

00:07:27.640 --> 00:07:29.590
be to actually get a
well-formatted phone

00:07:29.590 --> 00:07:30.747
number from a customer.

00:07:30.747 --> 00:07:32.580
And so, you'll see some
really cool new APIs

00:07:32.580 --> 00:07:34.960
that we're going to
be discussing first.

00:07:34.960 --> 00:07:37.690
And second, I'm really excited
to be sharing Firebase, more

00:07:37.690 --> 00:07:40.360
details on Firebase phone
authentication, which

00:07:40.360 --> 00:07:41.920
has been a really
tight collaboration

00:07:41.920 --> 00:07:43.990
between the Digits
engineering team

00:07:43.990 --> 00:07:47.560
and Firebase to create a brand-m
new service that, I think,

00:07:47.560 --> 00:07:50.640
is philosophically
and effectively

00:07:50.640 --> 00:07:52.330
the next logical
evolution of what

00:07:52.330 --> 00:07:54.330
we want to do with Digits
in terms of phone auth

00:07:54.330 --> 00:07:55.060
performance.

00:07:55.060 --> 00:07:56.310
It's a really amazing system.

00:07:56.310 --> 00:07:59.235
And also has a really
easy to use migration path

00:07:59.235 --> 00:08:00.660
for Digits customers.

00:08:00.660 --> 00:08:03.706
And so, I would encourage
any Digits customer

00:08:03.706 --> 00:08:04.580
to take a look at it.

00:08:04.580 --> 00:08:06.510
Because I think
it's really badass.

00:08:06.510 --> 00:08:09.840
And so, to get us kicked
off, please welcome Vikas

00:08:09.840 --> 00:08:11.810
on stage, who's going to
be talking about phone

00:08:11.810 --> 00:08:14.972
selector and SMS retriever.

00:08:14.972 --> 00:08:17.100
[APPLAUSE]

00:08:20.860 --> 00:08:23.980
VIKAS GUPTA: Thanks,
Chris, and hello, everyone.

00:08:23.980 --> 00:08:26.610
My name is Vikas, and I work
in the Android auth team

00:08:26.610 --> 00:08:27.850
at Google.

00:08:27.850 --> 00:08:30.490
I'm going to talk about how
we enable you to support phone

00:08:30.490 --> 00:08:32.429
numbers for
authentication, if you

00:08:32.429 --> 00:08:35.000
have an existing backend
infrastructure that you are

00:08:35.000 --> 00:08:37.390
already using for verifying
the phone numbers,

00:08:37.390 --> 00:08:40.400
such as for sending
SMSs to your users.

00:08:40.400 --> 00:08:42.830
You may have your own
SMS infrastructure,

00:08:42.830 --> 00:08:44.450
or you might be
using a third party

00:08:44.450 --> 00:08:46.780
service such as [INAUDIBLE].

00:08:46.780 --> 00:08:50.430
So, as Chris mentioned,
using phone numbers

00:08:50.430 --> 00:08:52.820
for authentication
is great, as it

00:08:52.820 --> 00:08:55.770
offers several benefits over
traditional authentication

00:08:55.770 --> 00:08:57.230
methods.

00:08:57.230 --> 00:09:00.640
But still, signing in a
user with phone numbers

00:09:00.640 --> 00:09:05.590
is still problematic for some
users and for app developers.

00:09:05.590 --> 00:09:07.910
Let's see what a sign-in
experience with phone numbers

00:09:07.910 --> 00:09:09.950
looks like today.

00:09:09.950 --> 00:09:11.790
It involves two steps.

00:09:11.790 --> 00:09:14.460
First, getting the phone
number of the device.

00:09:14.460 --> 00:09:17.380
And second, verifying
the phone number.

00:09:17.380 --> 00:09:20.510
Most apps perform verification
by sending an SMS to the user's

00:09:20.510 --> 00:09:22.490
device with a
one-time verification

00:09:22.490 --> 00:09:24.825
code that the application
that verifies.

00:09:24.825 --> 00:09:27.870
So the app has to get the
phone number of the device,

00:09:27.870 --> 00:09:31.430
and then read the verification
code from the SMS.

00:09:31.430 --> 00:09:34.320
So how do the apps
get these two things?

00:09:34.320 --> 00:09:36.500
Most of the apps employ--

00:09:36.500 --> 00:09:39.430
basically-- ask the users
to enter these values.

00:09:39.430 --> 00:09:44.010
But that's not a great
solution, for many reasons.

00:09:44.010 --> 00:09:49.770
First, manually inputting
the phone number is painful.

00:09:49.770 --> 00:09:51.630
It adds a lot of
friction for the users

00:09:51.630 --> 00:09:54.540
to provide phone
numbers to your app.

00:09:54.540 --> 00:09:56.620
It's also error-prone.

00:09:56.620 --> 00:09:59.760
It's important to note that
every failed verification,

00:09:59.760 --> 00:10:01.650
because of a typo
in the phone number,

00:10:01.650 --> 00:10:04.430
adds cost to the developers,
because they end up

00:10:04.430 --> 00:10:07.550
sending an SMS to the
wrong phone number.

00:10:07.550 --> 00:10:10.110
Let's say the user
provides the phone number

00:10:10.110 --> 00:10:12.842
and you send the
SMS to the phone.

00:10:12.842 --> 00:10:15.050
The next step for you is to
get the verification code

00:10:15.050 --> 00:10:16.340
from the SMS.

00:10:16.340 --> 00:10:19.260
Again, asking the user to
provide you the verification

00:10:19.260 --> 00:10:22.000
code is painful for the users.

00:10:22.000 --> 00:10:25.930
It requires the users to leave
your app, go to the SMS app,

00:10:25.930 --> 00:10:27.220
copy your--

00:10:27.220 --> 00:10:30.190
copy or remember the
verification code from there,

00:10:30.190 --> 00:10:32.930
come back to your app,
and then provide it there.

00:10:32.930 --> 00:10:35.020
It's a lot of work
for the users.

00:10:35.020 --> 00:10:37.830
Many users find it
confusing, and it's not

00:10:37.830 --> 00:10:40.040
a great experience.

00:10:40.040 --> 00:10:42.830
So, many app developers have
recognized these problems

00:10:42.830 --> 00:10:44.670
with the manual imports.

00:10:44.670 --> 00:10:46.230
And what they've
started to do is,

00:10:46.230 --> 00:10:48.920
they are now reading the
verification code and the phone

00:10:48.920 --> 00:10:50.920
number automatically.

00:10:50.920 --> 00:10:54.210
But this approach
has its own problems.

00:10:54.210 --> 00:10:56.545
Let's see.

00:10:56.545 --> 00:10:58.670
Getting the verification--
getting the phone number

00:10:58.670 --> 00:11:02.220
from the device and the
verification code from the SMS

00:11:02.220 --> 00:11:05.520
automatically requires
your apps to get permission

00:11:05.520 --> 00:11:07.200
from the users.

00:11:07.200 --> 00:11:09.470
And this looks
something like this.

00:11:09.470 --> 00:11:11.620
These permissions
allow the apps to get

00:11:11.620 --> 00:11:13.440
the access to all
the phone calls,

00:11:13.440 --> 00:11:16.440
and all the SMS
messages of the user.

00:11:16.440 --> 00:11:19.440
Users are left confused as
to why our app needs access

00:11:19.440 --> 00:11:23.820
to all these phone
calls and SMS messages.

00:11:23.820 --> 00:11:26.760
So this leads to a low--

00:11:26.760 --> 00:11:30.220
a low adoption rate, and
a poor user experience.

00:11:30.220 --> 00:11:32.120
And from privacy
perspective, it's

00:11:32.120 --> 00:11:35.550
not a great solution
for your apps.

00:11:35.550 --> 00:11:38.970
The Google Play services
SDK, we are offering you

00:11:38.970 --> 00:11:41.000
best of both the words.

00:11:41.000 --> 00:11:44.280
We enable you to read the phone
number and the verification

00:11:44.280 --> 00:11:47.690
code from the SMS
automatically without requiring

00:11:47.690 --> 00:11:50.510
these extra permissions.

00:11:50.510 --> 00:11:54.550
For reading the phone number,
we have the phone selector API.

00:11:54.550 --> 00:11:56.460
And for verifying
the phone number,

00:11:56.460 --> 00:11:59.200
we have the SMS retriever API.

00:11:59.200 --> 00:12:02.550
Since these APIs are part of
the Google Play services SDK,

00:12:02.550 --> 00:12:04.140
they're also compatible
with the older

00:12:04.140 --> 00:12:06.730
versions of Android platform.

00:12:06.730 --> 00:12:10.910
Let's take a look at the
phone selector API first.

00:12:10.910 --> 00:12:14.100
The phone selector API
provides the phone number

00:12:14.100 --> 00:12:17.290
to your app with a much
better user experience,

00:12:17.290 --> 00:12:19.910
and no extra permissions.

00:12:19.910 --> 00:12:23.260
Using this API, you can
launch our dialogue,

00:12:23.260 --> 00:12:26.770
which shows the phone numbers
on the device to the user.

00:12:26.770 --> 00:12:29.050
When the user selects
the phone number

00:12:29.050 --> 00:12:32.690
that they want to use to
sign in into your app,

00:12:32.690 --> 00:12:34.620
that phone number is
provided to your app

00:12:34.620 --> 00:12:39.490
immediately, without requiring
any extra permissions.

00:12:39.490 --> 00:12:42.850
You can check out
the usage of this API

00:12:42.850 --> 00:12:46.970
in the apps like Mynthra,
Lyft, and Flipkart.

00:12:46.970 --> 00:12:51.630
Let's see how you can
use this API in your app.

00:12:51.630 --> 00:12:53.924
First you create a
hint request object,

00:12:53.924 --> 00:12:55.340
and st the phone
number identifier

00:12:55.340 --> 00:12:57.340
supported field to true.

00:12:57.340 --> 00:12:59.300
And then, you get
a pending intent

00:12:59.300 --> 00:13:03.180
from that hint request for the
phone number selector dialogue.

00:13:03.180 --> 00:13:05.240
Once the user selects
the phone number,

00:13:05.240 --> 00:13:07.260
that phone number is
returned to your app

00:13:07.260 --> 00:13:10.145
in the on activity
result. It's that simple.

00:13:13.060 --> 00:13:15.840
Once you have the phone
number, the next step for you

00:13:15.840 --> 00:13:19.610
is to get the verification code
to verify the phone number.

00:13:19.610 --> 00:13:23.000
In order to help you with that,
we have the SMS retriever API.

00:13:23.000 --> 00:13:26.710
So let's take a look at that.

00:13:26.710 --> 00:13:31.190
SMS retriever API provides you
the message content to your app

00:13:31.190 --> 00:13:35.030
without requiring any
extra permissions.

00:13:35.030 --> 00:13:38.830
And the key part is that it
provides you only the message

00:13:38.830 --> 00:13:41.560
targeted the your app.

00:13:41.560 --> 00:13:43.090
All you have to do is--

00:13:43.090 --> 00:13:46.350
you have in your SMS message,
in addition to the verification

00:13:46.350 --> 00:13:50.040
code, you have to include
an app-specific hash.

00:13:50.040 --> 00:13:53.050
This app-specific
hash is a static hash

00:13:53.050 --> 00:13:55.980
that you can just include
in the SMS template

00:13:55.980 --> 00:13:59.580
without requiring
many code changes.

00:13:59.580 --> 00:14:03.700
Let's see how you can use SMS
retriever API in your app.

00:14:03.700 --> 00:14:05.710
When you want to
verify the user's phone

00:14:05.710 --> 00:14:10.640
number on the device, you
start the SMS retriever.

00:14:10.640 --> 00:14:14.010
This makes it wait for
one matching SMS, which

00:14:14.010 --> 00:14:18.000
includes the app-specific hash.

00:14:18.000 --> 00:14:20.210
After starting
the SMS retriever,

00:14:20.210 --> 00:14:22.800
you can just send the SMS
with the verification code

00:14:22.800 --> 00:14:25.160
and the app-specific
hash to the phone

00:14:25.160 --> 00:14:28.850
using any backend
infrastructure of yours.

00:14:28.850 --> 00:14:31.425
Once the SMS with
the app-specific hash

00:14:31.425 --> 00:14:34.170
is received on the
device, it is provided

00:14:34.170 --> 00:14:37.300
to your app via a broadcast.

00:14:37.300 --> 00:14:40.630
In your broadcast receiver,
you can get the message content

00:14:40.630 --> 00:14:42.360
from the extras.

00:14:42.360 --> 00:14:44.030
Once you have the
message content,

00:14:44.030 --> 00:14:46.180
you can extract the
verification code,

00:14:46.180 --> 00:14:49.690
and verify the code just
like you would normally do.

00:14:53.390 --> 00:14:55.650
The SMS retriever
API, you can use it

00:14:55.650 --> 00:14:57.650
for not just signing
in the users,

00:14:57.650 --> 00:15:01.450
but also for the alt-use
cases, such as for payments.

00:15:01.450 --> 00:15:04.350
The SMS retriever API will
be available in Google Play

00:15:04.350 --> 00:15:06.015
services.

00:15:06.015 --> 00:15:07.640
It will be available
in the Google Play

00:15:07.640 --> 00:15:10.000
services in the coming weeks.

00:15:10.000 --> 00:15:15.280
But our early partners who have
tried this API have loved it.

00:15:15.280 --> 00:15:19.350
Here are some testimonials
from some of our partners.

00:15:19.350 --> 00:15:22.000
Many of our
partners, like Authy,

00:15:22.000 --> 00:15:25.060
they love the fact that it works
with-- that these APIs work

00:15:25.060 --> 00:15:28.530
with their existing
infrastructure.

00:15:28.530 --> 00:15:31.080
We have carefully
designed our APIs

00:15:31.080 --> 00:15:33.870
so that they are very easy to
integrate with your existing

00:15:33.870 --> 00:15:35.350
flows.

00:15:35.350 --> 00:15:38.910
Mynthra, for example, was
able to successfully integrate

00:15:38.910 --> 00:15:42.100
the SMS retriever API in
their existing sign-in flows

00:15:42.100 --> 00:15:45.850
in just three days
with one engineer.

00:15:45.850 --> 00:15:48.190
Here are other testimonials.

00:15:48.190 --> 00:15:50.290
Many of our apps have
been able to get rid

00:15:50.290 --> 00:15:53.230
of the scary permissions and
streamline the phone number

00:15:53.230 --> 00:15:57.730
verification flows
because of our APIs.

00:15:57.730 --> 00:16:00.640
Kaskus Chat actually found out
that their conversion rates

00:16:00.640 --> 00:16:03.680
increased after they integrated
their flows with our APIs.

00:16:07.230 --> 00:16:11.870
So, I just talked about how
with phone selector API and SMS

00:16:11.870 --> 00:16:15.620
retriever API, we enable you
to simplify the phone auth

00:16:15.620 --> 00:16:18.240
process if you already have
a backend infrastructure

00:16:18.240 --> 00:16:19.690
in place.

00:16:19.690 --> 00:16:22.500
Next, we are going to talk
about the Firebase phone

00:16:22.500 --> 00:16:26.040
auth, which helps you get
started with the phone auth.

00:16:26.040 --> 00:16:28.940
And if you're looking for
an end-to-end solution,

00:16:28.940 --> 00:16:30.860
this is how it will help you.

00:16:30.860 --> 00:16:32.780
So with that,
please welcome Dev,

00:16:32.780 --> 00:16:35.400
who is going to talk more
about the Firebase phone auth.

00:16:35.400 --> 00:16:36.327
Thank you.

00:16:36.327 --> 00:16:38.315
[APPLAUSE]

00:16:41.317 --> 00:16:42.650
DEVVRET RISHI: Thank you, Vikas.

00:16:42.650 --> 00:16:44.190
And hello, everybody.

00:16:44.190 --> 00:16:46.380
My name is Dev Rishi, and
I'm the product manager

00:16:46.380 --> 00:16:48.780
for Firebase authentication.

00:16:48.780 --> 00:16:50.470
You heard about some
really cool things

00:16:50.470 --> 00:16:53.130
that phone number authentication
can do for your application.

00:16:53.130 --> 00:16:56.700
And today, I'm really excited
to talk to you about how

00:16:56.700 --> 00:17:00.000
Firebase phone auth can
make it possible to build

00:17:00.000 --> 00:17:04.660
all of these really great flows
end to end, and very easily.

00:17:07.430 --> 00:17:09.349
So before we start,
I feel like I have

00:17:09.349 --> 00:17:11.710
to acknowledge that as soon--

00:17:11.710 --> 00:17:14.329
since we've launched,
phone number authentication

00:17:14.329 --> 00:17:19.170
has been one of our top
feature requests constantly.

00:17:19.170 --> 00:17:21.339
To all the developers
that tweeted,

00:17:21.339 --> 00:17:23.940
posted on Stack Overflow,
or filed a feature request,

00:17:23.940 --> 00:17:25.617
I just want to say
that we've heard you.

00:17:25.617 --> 00:17:27.450
And we're really excited
to be able to bring

00:17:27.450 --> 00:17:30.020
this functionality
to Firebase now.

00:17:30.020 --> 00:17:32.350
And it's no surprise
that so many people

00:17:32.350 --> 00:17:34.130
have been asking for this.

00:17:34.130 --> 00:17:36.520
Today's apps need to
be able to support

00:17:36.520 --> 00:17:40.025
high-quality, low-friction
users from all over the world,

00:17:40.025 --> 00:17:42.330
and engage with
them in new ways.

00:17:42.330 --> 00:17:46.026
And that makes phone number
auth really valuable.

00:17:46.026 --> 00:17:49.440
But truth is, for a lot of the
apps that actually don't have

00:17:49.440 --> 00:17:51.380
phone number
authentication today,

00:17:51.380 --> 00:17:54.950
building it in the first
place can be a real struggle.

00:17:54.950 --> 00:17:58.470
Chris talked about a lot of the
pains that users go through.

00:17:58.470 --> 00:18:01.770
It's also really painful
for a lot of developers.

00:18:01.770 --> 00:18:04.870
First thing you'll need to do is
integrate with an SMS provider,

00:18:04.870 --> 00:18:08.411
and get coverage with
carriers to send SMS.

00:18:08.411 --> 00:18:10.660
And then, you're going to
want to expand your offering

00:18:10.660 --> 00:18:13.430
globally to support all the
different areas that your users

00:18:13.430 --> 00:18:16.430
might come from, making sure
you've perfectly localized

00:18:16.430 --> 00:18:18.180
along the way.

00:18:18.180 --> 00:18:22.900
After all of that, you need to
build secure authentication.

00:18:22.900 --> 00:18:26.410
That means generating a one-time
code, verifying it from a user,

00:18:26.410 --> 00:18:28.520
minting cryptographically
signed tokens,

00:18:28.520 --> 00:18:32.847
persisting sessions, writing
your anti-abuse logic.

00:18:32.847 --> 00:18:34.430
I don't know about
you, but that's not

00:18:34.430 --> 00:18:36.179
exactly what I was
looking forward to when

00:18:36.179 --> 00:18:39.160
I started to write an app.

00:18:39.160 --> 00:18:41.820
That's why I'm really
excited to tell you

00:18:41.820 --> 00:18:47.680
that this week Firebase launched
its phone authentication APIs.

00:18:47.680 --> 00:18:50.050
The first thing
that we allow is we

00:18:50.050 --> 00:18:52.890
enable basic sign-in
and sign-up flows.

00:18:52.890 --> 00:18:55.420
Similar to what Chris talked
about earlier with Digits

00:18:55.420 --> 00:18:57.740
on all the platforms
that we support--

00:18:57.740 --> 00:19:00.270
iOS, Android, and web.

00:19:00.270 --> 00:19:04.210
And, on Android, we actually
allow for a few and built--in

00:19:04.210 --> 00:19:06.420
enhancements.

00:19:06.420 --> 00:19:09.620
Vikas told you a little
bit about the SMS retriever

00:19:09.620 --> 00:19:13.690
API, which actually increases
overall conversions from users

00:19:13.690 --> 00:19:15.770
so they don't have to end
up going to the SMS app

00:19:15.770 --> 00:19:16.549
and parsing it.

00:19:16.549 --> 00:19:18.090
And I'm excited to
announce that this

00:19:18.090 --> 00:19:21.820
is going to come built
in to our Android APIs.

00:19:21.820 --> 00:19:24.680
Finally, we have a
really new cool piece

00:19:24.680 --> 00:19:27.840
of functionality called instant
verification on Android.

00:19:27.840 --> 00:19:31.740
And I can't wait to tell
you a bit more about that.

00:19:31.740 --> 00:19:33.980
The iOS and web
APIs are actually

00:19:33.980 --> 00:19:36.100
available for you to
start trying today.

00:19:36.100 --> 00:19:38.289
And the Android APIs will
be coming in a few weeks.

00:19:38.289 --> 00:19:40.080
But in the meantime,
let's go ahead and see

00:19:40.080 --> 00:19:44.840
what these APIs are capable of.

00:19:44.840 --> 00:19:48.370
First thing that we want to make
sure we enable your app to do

00:19:48.370 --> 00:19:52.240
is allow you to sign in
and sign up your users.

00:19:52.240 --> 00:19:53.870
So for example, if
you're on an iPhone,

00:19:53.870 --> 00:19:56.060
the flow might look
a lot like this.

00:19:56.060 --> 00:19:57.810
Perhaps you're one of
the many modern apps

00:19:57.810 --> 00:20:00.220
that integrates email
authentication, as well as

00:20:00.220 --> 00:20:02.420
different identity providers.

00:20:02.420 --> 00:20:04.970
And in this case, you decide
to go ahead and sign in

00:20:04.970 --> 00:20:07.190
with phone number.

00:20:07.190 --> 00:20:10.740
All a user would need to do
is enter their phone number,

00:20:10.740 --> 00:20:13.410
and you can go ahead
and pass it over to us.

00:20:13.410 --> 00:20:16.690
We'll validate the phone number,
handle any normalization logic

00:20:16.690 --> 00:20:18.570
that needs to
happen, see if this

00:20:18.570 --> 00:20:22.850
is a new user, or a returning
one, and we'll go ahead

00:20:22.850 --> 00:20:27.490
and generate a one-time code
associated with this request.

00:20:27.490 --> 00:20:30.830
From there, we'll handle
sending this one-time code

00:20:30.830 --> 00:20:33.440
through an SMS to your end
user, so you don't worry

00:20:33.440 --> 00:20:35.150
about any of those pieces.

00:20:35.150 --> 00:20:39.380
New user will simply pass back
the code into your application,

00:20:39.380 --> 00:20:42.100
and which you would just
pass right back on to us,

00:20:42.100 --> 00:20:43.480
and we will verify it.

00:20:43.480 --> 00:20:46.610
We'll handle any of the complex
logic, and deduplication,

00:20:46.610 --> 00:20:49.160
if you sent multiple
SMS by mistake,

00:20:49.160 --> 00:20:51.900
or any of the other edge
cases that might arise.

00:20:51.900 --> 00:20:54.320
And the user will go ahead
and enter their code.

00:20:54.320 --> 00:20:55.776
We'll validate it.

00:20:55.776 --> 00:20:57.650
And we'll go ahead and
mint cryptographically

00:20:57.650 --> 00:21:00.640
signed tokens, persist sessions,
the whole authentication nine

00:21:00.640 --> 00:21:02.560
yards, and you
won't have to worry

00:21:02.560 --> 00:21:05.140
about how any of it, because
all you'll have to worry about

00:21:05.140 --> 00:21:07.400
is how to best and
warmly welcome your users

00:21:07.400 --> 00:21:09.850
into your application.

00:21:09.850 --> 00:21:11.640
So that's kind of
what the actual APIs

00:21:11.640 --> 00:21:14.730
look like for signing in
and signing up users on all

00:21:14.730 --> 00:21:16.310
the platforms that we support--

00:21:16.310 --> 00:21:17.980
iOS, Android, and web.

00:21:17.980 --> 00:21:20.710
And I'm really excited to talk
about some of the enhancements

00:21:20.710 --> 00:21:23.450
that we're able to
make on Android.

00:21:23.450 --> 00:21:25.370
The first one is
auto retrieval, which

00:21:25.370 --> 00:21:28.800
works very similarly to what
Vikas discussed earlier.

00:21:28.800 --> 00:21:31.990
And comes built in, the
user phone auth APIs.

00:21:31.990 --> 00:21:34.420
For auto retrieval, if the
user goes ahead and click

00:21:34.420 --> 00:21:36.610
sign with phone number.

00:21:36.610 --> 00:21:38.940
This time, they can actually
select their phone number,

00:21:38.940 --> 00:21:41.420
if you integrate
with hint selector.

00:21:41.420 --> 00:21:44.540
It'll be auto-populated
into the application.

00:21:44.540 --> 00:21:46.720
We'll validate it once more.

00:21:46.720 --> 00:21:48.220
We'll set-- we'll
generate the code.

00:21:48.220 --> 00:21:51.830
But this time, when we actually
send the code in the SMS,

00:21:51.830 --> 00:21:54.870
we'll be able to pick it
up from the background.

00:21:54.870 --> 00:21:58.440
We'll auto-retrieve it directly,
parse it out, and populate it

00:21:58.440 --> 00:21:59.760
into the application.

00:21:59.760 --> 00:22:01.750
And the best part
of all of this,

00:22:01.750 --> 00:22:04.770
is your user never actually
had to leave your application,

00:22:04.770 --> 00:22:07.860
go to an SMS tab, wait for
it, and then copy and paste

00:22:07.860 --> 00:22:09.590
the code into your UI.

00:22:09.590 --> 00:22:11.850
They stayed in your
application the entire time.

00:22:11.850 --> 00:22:15.770
And it's a really seamless
experience for them overall.

00:22:15.770 --> 00:22:19.570
That's all that you
ever have to do.

00:22:19.570 --> 00:22:22.450
The last piece of
infrastructure that I'm really

00:22:22.450 --> 00:22:24.310
excited to talk
to you about today

00:22:24.310 --> 00:22:26.190
is a new feature on
Android that we're

00:22:26.190 --> 00:22:29.000
calling instant verification.

00:22:29.000 --> 00:22:32.670
Instant verification works
exactly like it sounds like.

00:22:32.670 --> 00:22:36.970
It allows us to verify the phone
number without sending an SMS.

00:22:36.970 --> 00:22:40.010
And to the user, it
appears instantly.

00:22:40.010 --> 00:22:41.935
Let's take a quick
look at how it works.

00:22:41.935 --> 00:22:45.030
In this case, user might
see this screen again,

00:22:45.030 --> 00:22:47.220
where they get to select
a phone number, directly,

00:22:47.220 --> 00:22:49.890
that we read off their device.

00:22:49.890 --> 00:22:52.030
This time, when they
enter their phone number,

00:22:52.030 --> 00:22:55.700
and you call their APIs, we're
going to do a first check.

00:22:55.700 --> 00:22:58.990
That check will go ahead and see
if we have verified this phone

00:22:58.990 --> 00:23:01.140
number on the device recently.

00:23:01.140 --> 00:23:03.740
If we have, we can
actually instantly

00:23:03.740 --> 00:23:05.480
verify the phone
number the next time

00:23:05.480 --> 00:23:09.664
around without needing to
send any additional SMS.

00:23:09.664 --> 00:23:11.330
We think that this
means there's no wait

00:23:11.330 --> 00:23:16.040
time, no SMS, or anything
else, just pure simplicity.

00:23:16.040 --> 00:23:17.720
I'm really excited
about the potential

00:23:17.720 --> 00:23:21.290
this has to significantly
improve user experience,

00:23:21.290 --> 00:23:23.740
and greatly simplify the
lives of our developers.

00:23:27.400 --> 00:23:29.665
I think one of my favorite
things about Firebase phone

00:23:29.665 --> 00:23:33.440
auth is that all this
powerful functionality is also

00:23:33.440 --> 00:23:35.500
really easy to use.

00:23:35.500 --> 00:23:37.310
There is just essentially
just two steps

00:23:37.310 --> 00:23:40.050
to go ahead and get started.

00:23:40.050 --> 00:23:42.810
The first thing you need to
do is just enable phone auth

00:23:42.810 --> 00:23:45.930
within your project in
the Firebase console.

00:23:45.930 --> 00:23:49.990
This is, quite literally,
clicking on the phone selector,

00:23:49.990 --> 00:23:52.750
and enabling phone auth
with a simple flag flip.

00:23:52.750 --> 00:23:55.830
It doesn't actually get
much easier than that.

00:23:55.830 --> 00:23:57.830
The second thing
you need to do is

00:23:57.830 --> 00:24:00.330
just integrate with
our SDKs in our APIs

00:24:00.330 --> 00:24:03.790
in order to be able to
use this functionality.

00:24:03.790 --> 00:24:07.260
Now, our headless APIs
don't enforce any UI,

00:24:07.260 --> 00:24:09.840
so they give you
programmatic access

00:24:09.840 --> 00:24:13.280
to our underlying infrastructure
that you can use in any way

00:24:13.280 --> 00:24:14.450
that you choose.

00:24:14.450 --> 00:24:16.640
And it's really easy to use.

00:24:16.640 --> 00:24:20.610
On Android, in order to get
all the awesome functionality

00:24:20.610 --> 00:24:24.060
that I talked about, the actual
ability to generate and send

00:24:24.060 --> 00:24:27.750
codes, the auto-retrieval,
even instant verification,

00:24:27.750 --> 00:24:31.110
comes down to just
one single API call,

00:24:31.110 --> 00:24:34.320
and the implementation of the
callbacks that you care about.

00:24:34.320 --> 00:24:38.030
So in this case, all you do
is call verify phone number

00:24:38.030 --> 00:24:40.860
with a phone number
that you pass in,

00:24:40.860 --> 00:24:42.510
and implement a few callbacks.

00:24:42.510 --> 00:24:45.060
For example, on
verification completed,

00:24:45.060 --> 00:24:47.710
where you can decide whatever
it is you like to do,

00:24:47.710 --> 00:24:51.210
once we've either auto-retrieved
the SMS, instantly verified

00:24:51.210 --> 00:24:53.640
the phone number, or
whenever the user just

00:24:53.640 --> 00:24:54.750
decided to be signed in.

00:24:57.850 --> 00:25:00.610
I think all of
this functionality

00:25:00.610 --> 00:25:01.740
is really powerful.

00:25:01.740 --> 00:25:05.390
These APIs are very simple
to use, and give you

00:25:05.390 --> 00:25:07.640
programmatic access
to some of our most

00:25:07.640 --> 00:25:09.960
incredible infrastructure
here at Google.

00:25:09.960 --> 00:25:12.490
But I think it's really
worth asking, what about UI?

00:25:15.000 --> 00:25:18.250
Building authentication
UI can be pretty complex.

00:25:18.250 --> 00:25:20.500
You need to handle all
sorts of edge cases

00:25:20.500 --> 00:25:21.990
across all the
different platforms

00:25:21.990 --> 00:25:23.735
your application might support.

00:25:23.735 --> 00:25:26.120
And even after you
do all of that,

00:25:26.120 --> 00:25:28.910
you want to make sure that
your log-in UI is actually

00:25:28.910 --> 00:25:30.240
high performance.

00:25:30.240 --> 00:25:32.725
And that will give you
good conversion rates.

00:25:32.725 --> 00:25:34.630
As Chris talked
about earlier, this

00:25:34.630 --> 00:25:37.810
isn't really what a lot of you
want to spend your time doing.

00:25:37.810 --> 00:25:40.490
The first screen
that your users see

00:25:40.490 --> 00:25:42.870
is often the last screen
that you think about.

00:25:42.870 --> 00:25:47.100
And building out all this
UI can honestly be painful.

00:25:47.100 --> 00:25:48.800
Trust us, we know.

00:25:48.800 --> 00:25:50.690
Because we've actually done it.

00:25:50.690 --> 00:25:53.470
We wrote out all the code
for the different phone

00:25:53.470 --> 00:25:55.990
authentication flows that
we've talked about just

00:25:55.990 --> 00:25:59.400
for the UI components on
Android, iOS, and web.

00:25:59.400 --> 00:26:01.640
And just to write the
phone authentication flows

00:26:01.640 --> 00:26:04.950
across the three platforms,
it can be several thousands

00:26:04.950 --> 00:26:05.740
of lines of code.

00:26:09.090 --> 00:26:12.440
Now if you decide to go the way
of a lot of modern applications

00:26:12.440 --> 00:26:15.240
and integrate different identity
providers, such as Google,

00:26:15.240 --> 00:26:18.080
Facebook, email, et
cetera, then this

00:26:18.080 --> 00:26:20.400
is just going to
get more complex.

00:26:20.400 --> 00:26:22.820
And if you actually
end up wanting

00:26:22.820 --> 00:26:24.730
to integrate all these
different sign-in

00:26:24.730 --> 00:26:27.520
providers into your
application, well,

00:26:27.520 --> 00:26:29.560
doing identity and user
sign-up is probably

00:26:29.560 --> 00:26:31.990
going to become
your full-time job.

00:26:31.990 --> 00:26:34.710
That's why I'm really
excited to announce

00:26:34.710 --> 00:26:38.950
that Firebase phone auth is
now also part of Firebase UI.

00:26:38.950 --> 00:26:42.570
And Firebase UI is an open
source repository on GitHub

00:26:42.570 --> 00:26:46.340
that we maintain that gives you
the best practices in sign-in

00:26:46.340 --> 00:26:48.620
and sign-up that
Google has studied

00:26:48.620 --> 00:26:51.860
over a long history of
doing identity work directly

00:26:51.860 --> 00:26:54.520
and out of the box
for your applications.

00:26:54.520 --> 00:26:57.040
This is really bringing
years and years of knowledge

00:26:57.040 --> 00:26:58.710
from Google's
understanding of how

00:26:58.710 --> 00:27:01.990
to maximize conversion rates
directly into your application.

00:27:01.990 --> 00:27:05.420
It's really simple to
integrate into your app.

00:27:05.420 --> 00:27:07.150
And it gives you the
best practice flows

00:27:07.150 --> 00:27:09.240
for all the different platforms.

00:27:09.240 --> 00:27:12.310
Best of all, Firebase UI
is completely open source,

00:27:12.310 --> 00:27:14.230
and fully customizable.

00:27:14.230 --> 00:27:16.510
So soon as you integrate
it into your application,

00:27:16.510 --> 00:27:18.280
you can go ahead and
tweak and tailor it

00:27:18.280 --> 00:27:19.880
directly into the
needs of your app,

00:27:19.880 --> 00:27:23.350
however you decide
you'd like to.

00:27:23.350 --> 00:27:26.440
But you don't just have
to take my word for it

00:27:26.440 --> 00:27:28.540
on how easy Firebase
UI is to use,

00:27:28.540 --> 00:27:31.190
and how easy these
APIs are to integrate.

00:27:31.190 --> 00:27:32.270
I can actually show you.

00:27:35.230 --> 00:27:39.120
So I call this part of my talk
"what could possibly go wrong?"

00:27:39.120 --> 00:27:41.474
Because it is not
only a live demo

00:27:41.474 --> 00:27:43.140
that I'd like to do
in order to show you

00:27:43.140 --> 00:27:44.660
the cool functionality
and how easy

00:27:44.660 --> 00:27:47.360
it is to build
into applications,

00:27:47.360 --> 00:27:49.620
but before this
week, I've actually

00:27:49.620 --> 00:27:54.090
never touched a line of
Android code before in my life.

00:27:54.090 --> 00:27:56.140
Luckily, building
phone authentication

00:27:56.140 --> 00:27:57.430
is actually really easy.

00:27:57.430 --> 00:27:58.846
And I'm going to
be able to do it,

00:27:58.846 --> 00:28:03.270
I hope, in just a couple of
minutes into my application.

00:28:03.270 --> 00:28:05.220
So before this demo,
the only thing I've done

00:28:05.220 --> 00:28:06.520
is actually create a project.

00:28:06.520 --> 00:28:08.750
And you can tell, there is
not a lot going on here.

00:28:08.750 --> 00:28:12.210
Not sure I could actually
do that much more.

00:28:12.210 --> 00:28:15.419
All I've done so far is
just get the dependencies.

00:28:15.419 --> 00:28:17.585
As you know, the public
versions of the Android APIs

00:28:17.585 --> 00:28:20.330
will be coming out
in a few weeks.

00:28:20.330 --> 00:28:22.730
From here, I can actually
build phone authentication

00:28:22.730 --> 00:28:27.320
into my application in
just three simple steps.

00:28:27.320 --> 00:28:30.870
The first step is I'm going to
link Firebase to my application

00:28:30.870 --> 00:28:35.080
through this super easy
use Android Studio plugin.

00:28:35.080 --> 00:28:38.110
I'll go ahead and go to
authentication, click Email

00:28:38.110 --> 00:28:41.630
Password, and, as you can see,
I've set up my dependencies.

00:28:41.630 --> 00:28:44.109
And I'll just hit
Connect to Firebase.

00:28:44.109 --> 00:28:45.900
This is going to open
up a dialogue that'll

00:28:45.900 --> 00:28:48.190
allow me either create
a new Firebase project,

00:28:48.190 --> 00:28:49.415
or link to an existing one.

00:28:49.415 --> 00:28:50.790
This case, I'm
just going to link

00:28:50.790 --> 00:28:52.248
to easy auth, which
is the Firebase

00:28:52.248 --> 00:28:54.280
project that I'd set up.

00:28:54.280 --> 00:28:57.300
Now that I've connected
to it, I'm going to--

00:28:57.300 --> 00:28:58.700
that was step one.

00:28:58.700 --> 00:29:01.830
Connecting this through the
through the Android Studio

00:29:01.830 --> 00:29:04.020
plugin was all I needed
to do for step one.

00:29:04.020 --> 00:29:06.330
And step two is even easier.

00:29:06.330 --> 00:29:09.560
I'm just going to go over
to the Firebase console,

00:29:09.560 --> 00:29:13.930
go to the authentication
tab, go to sign-in methods.

00:29:13.930 --> 00:29:16.380
And here, we can see all the
different sign-in methods

00:29:16.380 --> 00:29:18.880
that Firebase authentication
currently supports.

00:29:18.880 --> 00:29:20.630
I've already configured
a few in the past,

00:29:20.630 --> 00:29:22.005
like email, Google,
and Facebook.

00:29:22.005 --> 00:29:24.760
And I'm just going
to enable phone.

00:29:24.760 --> 00:29:26.360
This part is, quite
literally, just

00:29:26.360 --> 00:29:29.160
that flag flip I
showed you earlier,

00:29:29.160 --> 00:29:32.230
and we're done with step two.

00:29:32.230 --> 00:29:34.090
Now if you'll believe
me, step three

00:29:34.090 --> 00:29:36.350
is just as easy as the
last two, even though it's

00:29:36.350 --> 00:29:38.530
the step where we write code.

00:29:38.530 --> 00:29:42.520
All I'm going to do is go to the
open source Firebase UI GitHub

00:29:42.520 --> 00:29:47.830
repository, scroll through the
read me, ignore most of it,

00:29:47.830 --> 00:29:50.350
and go to this one
section that I care about,

00:29:50.350 --> 00:29:51.850
where I'll be able
to copy and paste

00:29:51.850 --> 00:29:54.450
the code directly
into my application

00:29:54.450 --> 00:29:58.344
to get my phone auth
UI built. Now this

00:29:58.344 --> 00:30:00.760
allows me to support a lot of
different sign-in providers,

00:30:00.760 --> 00:30:02.560
like the ones you saw before.

00:30:02.560 --> 00:30:04.530
And in this demo,
instead of Twitter,

00:30:04.530 --> 00:30:08.270
I'm going to decide to
support phone verification.

00:30:08.270 --> 00:30:09.080
That was it.

00:30:09.080 --> 00:30:10.730
That's all I had to do.

00:30:10.730 --> 00:30:13.080
Luckily, because, again,
I don't actually--

00:30:13.080 --> 00:30:15.374
I'm not actually an
Android developer,

00:30:15.374 --> 00:30:17.290
once I go ahead and
compile this application--

00:30:17.290 --> 00:30:20.150
if I could switch
to my phone, please.

00:30:20.150 --> 00:30:21.820
Thank you.

00:30:21.820 --> 00:30:24.400
I will be able to show you
exactly all the different flows

00:30:24.400 --> 00:30:26.640
that we integrate
with, end to end.

00:30:26.640 --> 00:30:29.330
So now, I have multiple
different log-in methods

00:30:29.330 --> 00:30:32.315
enabled on my demo
app very easily.

00:30:32.315 --> 00:30:34.420
And I can show you
exactly how the phone

00:30:34.420 --> 00:30:36.640
auth flows work in real life.

00:30:36.640 --> 00:30:39.115
Fingers crossed I have
carrier coverage here.

00:30:39.115 --> 00:30:41.240
First thing you'll notice
is Firebase UI integrates

00:30:41.240 --> 00:30:42.450
with hint selector directly.

00:30:42.450 --> 00:30:44.408
So I didn't write any
additional code for this.

00:30:44.408 --> 00:30:46.960
But it's able to pick up my
phone number from the device,

00:30:46.960 --> 00:30:50.130
and I can just simply enter
it directly to the app.

00:30:50.130 --> 00:30:52.020
Now when I hit
verify phone number,

00:30:52.020 --> 00:30:55.660
it'll go ahead and send me
a code which will directly

00:30:55.660 --> 00:30:56.630
get right off the SMS--

00:30:56.630 --> 00:30:58.380
and I don't know if
you actually caught it

00:30:58.380 --> 00:30:59.990
because it was so fast.

00:30:59.990 --> 00:31:01.550
But the number was--

00:31:01.550 --> 00:31:02.220
[APPLAUSE]

00:31:02.220 --> 00:31:05.340
Thank you very much.

00:31:05.340 --> 00:31:07.870
The code was sent to my
device immediately written

00:31:07.870 --> 00:31:08.530
from the SIM.

00:31:08.530 --> 00:31:09.985
But from the end
user perspective,

00:31:09.985 --> 00:31:11.880
it was the easiest
thing I've done all day.

00:31:11.880 --> 00:31:13.990
And all I did was really
tap my phone number,

00:31:13.990 --> 00:31:16.280
and everything else
was taken for me.

00:31:16.280 --> 00:31:17.580
The SMS was delivered.

00:31:17.580 --> 00:31:18.230
It was parsed.

00:31:18.230 --> 00:31:19.240
It was taken.

00:31:19.240 --> 00:31:21.680
I never left the app.

00:31:21.680 --> 00:31:24.880
Now let's imagine that I'm
coming back to the application,

00:31:24.880 --> 00:31:28.012
maybe after a week or
two, and I'd signed out.

00:31:28.012 --> 00:31:29.470
This time I'm going
to try and demo

00:31:29.470 --> 00:31:31.520
a really cool piece
of functionality

00:31:31.520 --> 00:31:32.750
that I'd mentioned earlier--

00:31:32.750 --> 00:31:34.620
instant verification.

00:31:34.620 --> 00:31:37.350
This time around, when
I go to the application,

00:31:37.350 --> 00:31:39.380
let's sign in with a
phone number again.

00:31:39.380 --> 00:31:41.420
It'll pull up the phone
number for my device

00:31:41.420 --> 00:31:42.900
just like last time.

00:31:42.900 --> 00:31:44.280
And I hope what's
going to happen

00:31:44.280 --> 00:31:47.810
is I'm just going to
do single tap log-in.

00:31:47.810 --> 00:31:49.810
Where I go ahead and
select my phone number,

00:31:49.810 --> 00:31:52.740
it sees that I'd already
been verified in the past,

00:31:52.740 --> 00:31:54.260
and that was it.

00:31:54.260 --> 00:31:56.810
No SMS was sent, nothing else.

00:31:56.810 --> 00:31:59.460
Can we see an instant
replay, maybe?

00:31:59.460 --> 00:32:00.870
Because that was so quick.

00:32:00.870 --> 00:32:02.100
There was no SMS sent.

00:32:02.100 --> 00:32:04.451
There was no need for a
user to wait for anything.

00:32:04.451 --> 00:32:06.200
But instead, we were
able to just validate

00:32:06.200 --> 00:32:08.420
that we verified it, and
logged them in directly

00:32:08.420 --> 00:32:09.940
into the application.

00:32:09.940 --> 00:32:12.710
So I'm really excited about this
functionality, the potential

00:32:12.710 --> 00:32:14.840
it as for where we
can go in the future.

00:32:14.840 --> 00:32:16.852
And I can't wait to
see how you integrate

00:32:16.852 --> 00:32:17.810
into your applications.

00:32:17.810 --> 00:32:19.460
Can we go back to the slides?

00:32:19.460 --> 00:32:21.532
Thank you.

00:32:21.532 --> 00:32:22.231
[APPLAUSE]

00:32:22.231 --> 00:32:22.730
Thank you.

00:32:27.330 --> 00:32:29.370
So I think one of the
things you just saw

00:32:29.370 --> 00:32:31.482
is how easy it was to
build Firebase phone

00:32:31.482 --> 00:32:33.070
authentication from scratch.

00:32:33.070 --> 00:32:36.130
And I think one other thing
that we've thought about a lot,

00:32:36.130 --> 00:32:37.750
as we've actually
developed this,

00:32:37.750 --> 00:32:40.380
is how do we make sure we have
the best possible experience

00:32:40.380 --> 00:32:42.115
for Digits developers?

00:32:42.115 --> 00:32:44.720
As Chris mentioned earlier,
building Firebase phone

00:32:44.720 --> 00:32:47.150
authentication was a
really close collaboration

00:32:47.150 --> 00:32:49.312
between the Firebase auth
and the Digits teams.

00:32:49.312 --> 00:32:50.770
And we want to make
sure that we're

00:32:50.770 --> 00:32:53.665
able to warmly welcomed Digits
into the Firebase family.

00:32:53.665 --> 00:32:56.290
That's why I'm happy to announce
that we've started to roll out

00:32:56.290 --> 00:32:58.620
migration pathways
for Digits developers,

00:32:58.620 --> 00:33:01.580
where they'll be able to
link their Fabric accounts

00:33:01.580 --> 00:33:03.190
with Firebase projects.

00:33:03.190 --> 00:33:06.080
And we'll handle the user
importation and all other tasks

00:33:06.080 --> 00:33:08.390
required in order for
them to get set up

00:33:08.390 --> 00:33:09.870
for their first time.

00:33:09.870 --> 00:33:13.210
From there, they can go ahead
and use the migration guides

00:33:13.210 --> 00:33:14.710
that'll be published
soon in order

00:33:14.710 --> 00:33:18.620
to integrate the new Firebase
SDKs into the application.

00:33:18.620 --> 00:33:20.440
And that's all they
should have to do.

00:33:20.440 --> 00:33:23.089
There won't be any additional
friction for your users

00:33:23.089 --> 00:33:25.130
who won't have to necessarily
reauthenticate back

00:33:25.130 --> 00:33:26.490
into your application.

00:33:26.490 --> 00:33:28.580
And I hope all of you
stay tuned on the Fabric

00:33:28.580 --> 00:33:32.100
site for the coming details.

00:33:32.100 --> 00:33:35.040
I'm really excited that we've
launched phone authentication,

00:33:35.040 --> 00:33:38.290
because I think now Firebase
is an even more comprehensive

00:33:38.290 --> 00:33:40.810
authentication solution.

00:33:40.810 --> 00:33:43.550
Now we support all the
different major sign-in methods

00:33:43.550 --> 00:33:45.600
your application
might want to support,

00:33:45.600 --> 00:33:48.230
like email authentication,
phone numbers, and some

00:33:48.230 --> 00:33:52.080
of the top identity providers,
like Facebook, Google, Twitter,

00:33:52.080 --> 00:33:53.030
and GitHub.

00:33:53.030 --> 00:33:55.990
We also give you easy
user management UI

00:33:55.990 --> 00:33:57.810
from the console,
as well as SDKs

00:33:57.810 --> 00:34:00.351
in order to do all the different
tasks that you might want to

00:34:00.351 --> 00:34:00.990
on behalf.

00:34:00.990 --> 00:34:03.200
You can bring your own custom
authentication solution

00:34:03.200 --> 00:34:05.399
to Firebase if you've
already have one.

00:34:05.399 --> 00:34:06.940
And I think, best
of all, we give you

00:34:06.940 --> 00:34:10.550
drop-in and fully
customizable open source UI

00:34:10.550 --> 00:34:12.690
that reflects Google's
best practices.

00:34:12.690 --> 00:34:14.330
So you never have
to worry about how

00:34:14.330 --> 00:34:16.977
to best write the conversion
flows for your application.

00:34:16.977 --> 00:34:19.310
You never have to worry about
all the thousands of lines

00:34:19.310 --> 00:34:22.329
of code that it might take.

00:34:22.329 --> 00:34:24.370
I think one of things
that's great about Firebase

00:34:24.370 --> 00:34:26.370
authentication is that
most of the services

00:34:26.370 --> 00:34:28.600
are completely free to use.

00:34:28.600 --> 00:34:31.044
And I'm really excited to
say that with phone auth,

00:34:31.044 --> 00:34:32.460
we've spent a lot
of time thinking

00:34:32.460 --> 00:34:35.126
about how do we come up with the
most friendly pricing structure

00:34:35.126 --> 00:34:37.400
for the developers as possible.

00:34:37.400 --> 00:34:39.630
We have a really
generous free tier,

00:34:39.630 --> 00:34:43.060
where I think for up to 10,000
verifications per month,

00:34:43.060 --> 00:34:46.110
we're actually going to be able
to give all the verifications

00:34:46.110 --> 00:34:48.630
under the threshold for free.

00:34:48.630 --> 00:34:51.010
This will cover the vast
majority of applications.

00:34:51.010 --> 00:34:53.480
And I think it's more
than 90% of Digits apps

00:34:53.480 --> 00:34:55.820
developers will be able to
use the service completely

00:34:55.820 --> 00:34:57.780
for free.

00:34:57.780 --> 00:35:00.392
If you do you grow
wildly successful,

00:35:00.392 --> 00:35:02.350
we want to make sure that
our service continues

00:35:02.350 --> 00:35:05.076
to grow sustainably
and scalably with you.

00:35:05.076 --> 00:35:06.450
We also want to
make sure that we

00:35:06.450 --> 00:35:09.196
give you really simple and
easy to understand pricing.

00:35:09.196 --> 00:35:10.570
So we're only
going to charge you

00:35:10.570 --> 00:35:12.200
based on what you
care about, which

00:35:12.200 --> 00:35:14.184
is the actual
verification of the user.

00:35:14.184 --> 00:35:16.350
And we're going to make the
pricing structure really

00:35:16.350 --> 00:35:17.540
simple.

00:35:17.540 --> 00:35:20.152
Just $0.01 for verification
in US, Canada, and India,

00:35:20.152 --> 00:35:21.610
and $0.06 in the
rest of the world,

00:35:21.610 --> 00:35:23.160
for any of the
verifications that

00:35:23.160 --> 00:35:27.710
go above and beyond the
10,000 verifications a month.

00:35:27.710 --> 00:35:29.966
I can't wait to see
what you all build

00:35:29.966 --> 00:35:31.090
when this is in your hands.

00:35:33.910 --> 00:35:37.120
So, to recap kind of on
what we've talked today,

00:35:37.120 --> 00:35:39.300
we really talked about
two sets of optimizations

00:35:39.300 --> 00:35:42.050
I think Google is enabling for
all the different applications

00:35:42.050 --> 00:35:44.330
out there that care
about phone numbers.

00:35:44.330 --> 00:35:47.430
If you have your own phone
auth infrastructure already,

00:35:47.430 --> 00:35:51.570
there's phone hint selector
and SMS auto-retrieval in order

00:35:51.570 --> 00:35:54.790
to really optimize those
flows, and make your end user

00:35:54.790 --> 00:35:57.319
experiences much better.

00:35:57.319 --> 00:35:59.110
If you want to build
a phone authentication

00:35:59.110 --> 00:36:02.720
solution from scratch,
Firebase phone authentication

00:36:02.720 --> 00:36:04.430
will give you the
entire process,

00:36:04.430 --> 00:36:07.210
end to end, with some of
our built-in enhancements

00:36:07.210 --> 00:36:08.380
very easily.

00:36:08.380 --> 00:36:10.300
And I think is a
really compelling way

00:36:10.300 --> 00:36:12.170
to start getting
into this space,

00:36:12.170 --> 00:36:14.570
and being able to integrate
this powerful technology

00:36:14.570 --> 00:36:16.218
into your applications.

00:36:18.510 --> 00:36:21.550
Like I said before, the iOS
and web APIs for Firebase phone

00:36:21.550 --> 00:36:22.880
auth are out now.

00:36:22.880 --> 00:36:24.500
And the Android
APIs for everything

00:36:24.500 --> 00:36:26.591
will be coming out
in the coming weeks.

00:36:26.591 --> 00:36:28.340
But in the meantime,
I do hope that you'll

00:36:28.340 --> 00:36:30.680
go ahead and check
out our documentation,

00:36:30.680 --> 00:36:32.230
try us out today.

00:36:32.230 --> 00:36:34.430
And if you have any
questions whatsoever,

00:36:34.430 --> 00:36:37.400
all of our contact information
is listed out on the screen.

00:36:37.400 --> 00:36:39.260
And we'll be hanging
out outside these tents

00:36:39.260 --> 00:36:41.093
and in the Firebase
sandbox for a little bit

00:36:41.093 --> 00:36:42.610
afterwards as well.

00:36:42.610 --> 00:36:45.690
I really cannot wait to see
what you build with this new

00:36:45.690 --> 00:36:46.710
technology.

00:36:46.710 --> 00:36:49.010
I'm really excited
to help and continue

00:36:49.010 --> 00:36:50.570
to support our developers.

00:36:50.570 --> 00:36:51.960
Thank you very much.

00:36:51.960 --> 00:36:53.160
[APPLAUSE]

00:36:55.260 --> 00:36:58.310
[MUSIC PLAYING]

