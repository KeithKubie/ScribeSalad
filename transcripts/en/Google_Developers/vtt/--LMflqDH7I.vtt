WEBVTT
Kind: captions
Language: en

00:24:14.383 --> 00:24:16.383
...

00:24:42.633 --> 00:24:44.633
  ...

00:24:59.055 --> 00:24:59.616
    May 18, FB14, Firebase 
Overview,

00:24:59.617 --> 00:25:01.617
  2 p.m. PST.

00:26:42.789 --> 00:26:45.147
  PST....
    ...

00:29:48.305 --> 00:29:49.241
    May 18, FB14, Firebase 
Overview,

00:29:49.242 --> 00:29:51.242
  2 p.m. PST.

00:51:10.422 --> 00:51:12.422
     PST....

01:02:25.049 --> 01:02:29.942
 have to do is copy and paste 
these two lines of code in bold 

01:02:29.943 --> 01:02:35.360
to get the basic integration 
started.  You import and just 

01:02:35.361 --> 01:02:42.549
configure it.  And boom, you're 
done.

01:02:42.635 --> 01:02:50.696
[ Applause ]
So let's switch back to the 

01:02:50.697 --> 01:02:54.422
slide.  And so, the two steps 
that you just saw were very 

01:02:54.423 --> 01:02:58.446
quick way to get started with 
the basic integration and that 

01:02:58.447 --> 01:03:06.079
basic integration gets you -- 
that basic integration gets you 

01:03:06.080 --> 01:03:10.025
Firebase Analytics.  Firebase 
Analytics is a brand new product

01:03:10.511 --> 01:03:14.861
 built from ground up from our 
experience in running Google 

01:03:14.862 --> 01:03:17.814
Analytics.  Except it is 
designed specifically for unique

01:03:18.075 --> 01:03:23.719
 needs of mobile apps.  Instead 
of focusing on sessions and 

01:03:23.720 --> 01:03:27.149
pages, it is eventcentric and 
usercentric.  And being the 

01:03:27.150 --> 01:03:31.912
heart of the Firebase product 
suite it connects across all 

01:03:31.913 --> 01:03:36.914
Firebase features.  And most 
importantly, it is free and 

01:03:36.915 --> 01:03:40.709
unlimited.  Let's switch back to
 the demo and I'll show you what

01:03:40.900 --> 01:03:45.227
 this is like.

01:03:52.477 --> 01:03:56.407
  I'm going to show you a 
production called Bingo Blast.  

01:03:56.408 --> 01:04:00.238
Bingo Blast you can imagine is a
 bingo game available on Android

01:04:00.239 --> 01:04:04.343
 and iOS so now we are back to 
the console and you see these 

01:04:04.344 --> 01:04:07.543
apps I have.  I have my 
production app on Android and 

01:04:07.544 --> 01:04:11.465
production app in iOS and 
Analytics populated.  Let me 

01:04:11.466 --> 01:04:18.392
drill into Firebase Analytics 
for this iOS app.  So the main 

01:04:18.393 --> 01:04:22.424
view for Firebase Analytics is 
this dashboard that gives you an

01:04:22.632 --> 01:04:26.388
 overview of all the key metrics
 for your app.  It shows you the

01:04:26.611 --> 01:04:31.511
 number of active users across 
from monthly, weekly, daily.  It

01:04:31.663 --> 01:04:35.575
 shows you the revenue that you 
get from in-app purchases.  It 

01:04:35.576 --> 01:04:39.431
shows you where your users are 
coming from across different 

01:04:39.432 --> 01:04:42.323
marketing channels.  It shows 
them how often they are coming 

01:04:42.324 --> 01:04:48.929
back to your app.  It shows you 
how -- how much time users are 

01:04:48.930 --> 01:04:52.015
spending in your app, the in-app
 purchase activities they are 

01:04:52.016 --> 01:04:55.631
making and that this 
distribution of your app 

01:04:55.632 --> 01:04:59.594
versions across different 
devices.  But here is the cool 

01:04:59.595 --> 01:05:04.395
part.  We also layer on top 
unique Google insights that give

01:05:04.659 --> 01:05:08.096
 you the breakdown of the 
countries of where the abuser 

01:05:08.097 --> 01:05:13.023
base is and also demographics 
and their interests -- the user 

01:05:13.024 --> 01:05:15.880
base -- you get all this from 
the two lines of code that I 

01:05:15.881 --> 01:05:21.023
have just shown you.  Now if you
 want to drill in and get deeper

01:05:21.557 --> 01:05:26.421
 insights, you can log analytic 
events to get fine grain events 

01:05:26.422 --> 01:05:29.210
that are happening inside your 
app to get a deep understanding 

01:05:29.211 --> 01:05:32.555
of how users are behaving.  For 
example, in the case of the 

01:05:32.556 --> 01:05:36.506
bingo game, you can highlight or
 measure things like how often 

01:05:36.507 --> 01:05:39.869
users highlighted an app.  Or 
how often they have made a 

01:05:39.870 --> 01:05:45.416
mistake.  You can drill in and 
see these events happening as 

01:05:45.417 --> 01:05:47.417
they -- for different

01:05:49.802 --> 01:05:55.804
 users.  Another key concept is 
audiences T let's you group your

01:05:56.112 --> 01:06:02.242
 users based on their behavior 
and user attributes.  Here we 

01:06:02.243 --> 01:06:05.256
have predefined your userbais 
and specific audience for those 

01:06:05.257 --> 01:06:10.219
who have made in-app purchase.  
Let me show you how to create a 

01:06:10.220 --> 01:06:18.015
new audience.  I just click new 
audience and now just type in a 

01:06:18.016 --> 01:06:20.016
name.

01:06:22.141 --> 01:06:29.177
  So how many of my users are 
Canadian purchases?  So I can go

01:06:29.178 --> 01:06:37.855
 into properties and there it 
is.  And, they have taken an 

01:06:37.856 --> 01:06:44.426
event in-app purchase.  Boom, 
there you have it.  Now I 

01:06:44.427 --> 01:06:48.537
created an audience and whenever
 I have Canadian users making 

01:06:48.538 --> 01:06:51.572
in-app purchases, they will be 
ground in this audience.  The 

01:06:51.573 --> 01:06:55.554
two key things to know about 
audiences, first it lets you 

01:06:55.555 --> 01:06:59.437
drill in to filter your 
dashboards and data to get 

01:06:59.438 --> 01:07:02.221
deeper insights.  Here is the 
overview of my entire app.  

01:07:02.222 --> 01:07:06.896
Let's say I want to zoom in on 
just the purchasers.  The graph 

01:07:06.897 --> 01:07:10.270
looks very different now.  Now I
 can really drill in to see how 

01:07:10.271 --> 01:07:14.215
my paying users are behaving and
 another aspect of audiences is 

01:07:14.216 --> 01:07:17.919
that it is integrated across 
other Firebase features so you 

01:07:17.920 --> 01:07:21.730
can take targeted actions.  For 
example, being able to send 

01:07:21.731 --> 01:07:26.277
targeted Notifications on 
experiments to specific Groups 

01:07:26.278 --> 01:07:28.278
which we'll show you in a little
 bit.

01:07:28.330 --> 01:07:32.057
So I talked about ways that you 
can see how users are behaving 

01:07:32.058 --> 01:07:37.046
in their app.  Let's switch to 
the attribution tab N this view,

01:07:37.347 --> 01:07:40.239
 it lets you see where your 
users are coming from.  Not only

01:07:40.476 --> 01:07:43.717
 just where users are coming 
from, but we also provide the 

01:07:43.718 --> 01:07:47.868
next level of insights on what 
actions they are taking and you 

01:07:47.869 --> 01:07:52.855
can go back and attribute the 
actions to the source that they 

01:07:52.856 --> 01:07:56.259
came from.  For example, in the 
case of in-app purchase, you can

01:07:56.751 --> 01:08:02.055
 set up your different marketing
 channels that you may be 

01:08:02.056 --> 01:08:05.085
advertising across different ad 
networks and see which of those 

01:08:05.086 --> 01:08:09.790
Drive the most in-app purchase. 
 So that way you can tell not 

01:08:09.791 --> 01:08:13.133
only which channel drives the 
highest volume of users but 

01:08:13.134 --> 01:08:16.672
which of those drives the most 
valuable users.

01:08:17.099 --> 01:08:20.742
Another insight that Analytics 
use is the concept of funnels.  

01:08:20.743 --> 01:08:26.150
So going back to the bingo game,
 you can see how many users are 

01:08:26.151 --> 01:08:30.457
able to make it through the 
tutorial, as an example.  We 

01:08:30.458 --> 01:08:34.077
also have another view, the 
notion of cohorts or user 

01:08:34.078 --> 01:08:38.162
retention that shows you how 
often users are coming back.  So

01:08:38.356 --> 01:08:41.985
 after the first time users 
launched my app on Day 2, Day 3,

01:08:42.152 --> 01:08:45.862
 how often are they coming back?
  And we also show you a cohort 

01:08:45.863 --> 01:08:50.180
view for week after week.  There
 is a lot to go through 

01:08:50.181 --> 01:08:52.974
Analytics and what I have just 
shown you was just the overview.

01:08:53.059 --> 01:08:57.255
  We will have a second session 
after this here in the same room

01:08:57.450 --> 01:09:00.211
 to talk more about specifics on
 Analytics and share the best 

01:09:00.212 --> 01:09:03.164
practices with you.  So if 
you're interested, be sure to 

01:09:03.165 --> 01:09:09.424
stay around.
Let's switch back to the Slides.

01:09:13.224 --> 01:09:16.912
&gt;&gt; JAMES: We just seen a 
fantastic overview of just how 

01:09:16.913 --> 01:09:21.291
powerful Firebase Analytics is. 
 Now let's jump into the 

01:09:21.292 --> 01:09:24.672
products to help you develop 
your app.  We'll start with our 

01:09:24.673 --> 01:09:29.700
backend services and first 
authentication.  So most apps 

01:09:29.701 --> 01:09:34.253
want to know who a user is so 
they can provide them a more 

01:09:34.254 --> 01:09:37.716
personalized experience and this
 is exactly what Firebase 

01:09:37.717 --> 01:09:41.993
authentication does.  It helps 
you with identity and user 

01:09:41.994 --> 01:09:45.580
management.  We support e-mail 
and password log in, social log 

01:09:45.581 --> 01:09:50.821
in through Facebook, Twitter, 
GitHub and Google.  And another 

01:09:50.822 --> 01:09:54.693
-- and we also integrate with 
the your existing system if you 

01:09:54.694 --> 01:09:57.663
want extra flexibility.  There 
are two core things to note 

01:09:57.664 --> 01:10:02.839
today.  First, is authentication
 now runs on the same technology

01:10:03.097 --> 01:10:06.812
 that powers Google's own 
authentication systems.  And 

01:10:06.813 --> 01:10:12.952
second, we have a brand new 
out-of-the-box UI library.  It 

01:10:12.953 --> 01:10:16.301
helps you implement your log in 
flows using best practices and 

01:10:16.302 --> 01:10:19.311
stops you from having to 
reinvent the wheel so you can 

01:10:19.312 --> 01:10:23.964
get up and running quickly and 
it's open source and on GitHub.

01:10:26.728 --> 01:10:29.400
Authentication integrates with 
other Firebase features T will 

01:10:29.401 --> 01:10:33.374
let you grant users access to 
the realtime database on a 

01:10:33.375 --> 01:10:36.560
per-user basis.  Speaking of 
which, let's move over to the 

01:10:36.561 --> 01:10:41.089
realtime database.
It's probably a feature if you 

01:10:41.090 --> 01:10:44.649
used Firebase before, you're 
most familiar with.  It's a 

01:10:44.650 --> 01:10:48.801
cloud-hosted, no-sequel, Jason 
database.  Whenever you write 

01:10:48.802 --> 01:10:54.288
data into the database, it 
stores and sinkinize itself out 

01:10:54.289 --> 01:11:00.023
to multiple clients to every 
client who cares, in 

01:11:00.024 --> 01:11:04.143
milliseconds.  Now this realtime
 functionality is perfect for 

01:11:04.144 --> 01:11:07.917
building rich, collaborative 
applications.  And your users 

01:11:07.918 --> 01:11:13.139
are used to these and we let you
 deliver.  Nowhere should people

01:11:13.613 --> 01:11:18.015
 see the phrase, pull to 
refresh, ever again.

01:11:18.294 --> 01:11:23.510
Next the realtime database also 
has a core function where it 

01:11:23.511 --> 01:11:27.156
stores data in memory or on disk
 on the device.  And this means 

01:11:27.157 --> 01:11:31.142
when you're going through a 
tunnel or you lose Internet 

01:11:31.143 --> 01:11:35.281
connectivity, your app stays 
responsive.  When you come back 

01:11:35.282 --> 01:11:37.995
online, everything synchronizes 
back up to state.

01:11:38.314 --> 01:11:42.215
The next feature I want to talk 
about is Firebase Hosting.  So 

01:11:42.216 --> 01:11:45.547
if you're building a web or 
mobile web application, you 

01:11:45.548 --> 01:11:51.418
should use Firebase hosting to 
hosted your HTML, CSX, Java 

01:11:51.419 --> 01:11:56.510
script and images.  It's backed 
by a CDN for global low latency 

01:11:56.511 --> 01:12:01.200
and we give you an SSL 
certificate so it is secure by 

01:12:01.201 --> 01:12:04.315
default.  We are announcing the 
price of bringing your own 

01:12:04.316 --> 01:12:08.412
custom domain to Firebase 
hosting is now completely free.

01:12:08.749 --> 01:12:10.749
[ Applause ]

01:12:20.226 --> 01:12:23.837
So you might want to store more 
types of data that just 

01:12:23.838 --> 01:12:29.035
structured on your database or 
static assets for Hosting.  One 

01:12:29.036 --> 01:12:32.335
of our biggest features is the 
ability to store files, like 

01:12:32.336 --> 01:12:37.675
user profile pictures, videos 
and audio files and we heard 

01:12:37.676 --> 01:12:42.106
you.  So today, we are 
announcing Firebase Storage.  

01:12:42.107 --> 01:12:46.955
It's easy file Storage.  It 
handles poor Internet connect 

01:12:46.956 --> 01:12:50.848
activity and backed by an 
accessible from Google Cloud 

01:12:50.849 --> 01:12:57.028
Storage.  So that means you get 
the full power of GCS like 

01:12:57.029 --> 01:13:00.336
global cashing and it's 
accessible using the global 

01:13:00.337 --> 01:13:03.216
cloud storm APIs so you could 
integrate it if you had existing

01:13:03.905 --> 01:13:06.109
 infrastructure.  Let's switch 
to the demo and we'll see this 

01:13:06.110 --> 01:13:14.273
in action.
So, what I'm going to do here is

01:13:14.481 --> 01:13:20.767
 request audience participation.
  So I have an app built 5A 

01:13:20.768 --> 01:13:25.134
Storage into it.  And I'm going 
ask you all to throw up your 

01:13:25.135 --> 01:13:31.405
hands and make some noise while 
you're at it.  So now we'll go 

01:13:31.406 --> 01:13:38.902
to the 5A storm console, refresh
 this tab, and we'll bring up 

01:13:38.903 --> 01:13:43.656
the latest picture.  We'll open 
up in my browser.  And there you

01:13:44.875 --> 01:13:46.875
 all are.
[ Applause ]

01:13:50.873 --> 01:13:54.913
Pretty cool, right?  So the next
 feature I want to talk about is

01:13:56.374 --> 01:14:00.710
 Firebase Remote Config.  So 
Remote Config gives you key 

01:14:00.711 --> 01:14:04.593
value pairs inside the Firebase 
console and when you update 

01:14:04.594 --> 01:14:07.434
them, they push down to your 
application without you having 

01:14:07.435 --> 01:14:11.924
to publish a new version to the 
store.  You can use this for 

01:14:11.925 --> 01:14:15.483
pretty cool things like putting 
dates behind your features and 

01:14:15.484 --> 01:14:19.390
rolling them up slowly to user 
base.  You can use it to 

01:14:19.391 --> 01:14:23.512
optimize your checkout flow or 
onboarding flow.  Or you can 

01:14:23.513 --> 01:14:26.692
target different types of 
behaviors at different users.

01:14:26.752 --> 01:14:32.664
So, let's take a look.  Using 
the Bingo Blast as an example, I

01:14:32.855 --> 01:14:36.070
 have instrumented here the 
number of seconds you get to 

01:14:36.071 --> 01:14:42.372
complete each bingo level.  And 
we saw earlier Francis had 

01:14:42.373 --> 01:14:45.823
Canadian purchases and it turns 
out we know from Firebase 

01:14:45.824 --> 01:14:49.476
Analytics that people who pay 
for our app in Canada are just 

01:14:49.477 --> 01:14:52.156
way too good at bingo and we 
want to make it more difficult 

01:14:52.157 --> 01:14:55.347
for them.  So what we are going 
to do is go over to conditions. 

01:14:55.348 --> 01:14:58.687
 You can see I have got 
conditions so I can target 

01:14:58.688 --> 01:15:03.884
things with my iOS and Android 
users or random 10% of my user 

01:15:03.885 --> 01:15:06.506
base and I'm going to create a 
brand new condition.

01:15:06.911 --> 01:15:15.501
I'm going to call it Canadian 
purchasers.  And here you can 

01:15:15.502 --> 01:15:18.101
see the different types of 
conditions I can target so 

01:15:18.102 --> 01:15:21.333
things like device language, 
device country app version.  So 

01:15:21.334 --> 01:15:25.865
I want to say user audience to 
connect with Firebase audiences 

01:15:25.866 --> 01:15:29.451
in Analytics and I'm going to 
choose the iOS version that 

01:15:29.452 --> 01:15:33.821
Francis is working on.  And I 
have Canadian purchases.  I 

01:15:33.822 --> 01:15:38.919
create a condition.  Boom.  I go
 back over to my parameters and 

01:15:38.920 --> 01:15:42.057
select level 3 and I'm going to 
Selectica nade an purchases and 

01:15:42.058 --> 01:15:48.276
instead of giving them 40 
seconds, we'll give them 50.  I 

01:15:48.277 --> 01:15:51.875
publish changes and now everyone
 who is a paying user in Canada,

01:15:52.280 --> 01:15:57.626
 my bingo game is now harder for
 them.  So that is Remote 

01:15:57.627 --> 01:16:02.981
Config.
We'll go back to the deck.  So 

01:16:02.982 --> 01:16:06.235
we seen how Firebase can help 
you with your backend services. 

01:16:06.330 --> 01:16:09.557
 Now let's take a look at how we
 can help you ship a higher 

01:16:09.558 --> 01:16:14.050
quality application.  We are 
doing this in two ways.  The 

01:16:14.051 --> 01:16:17.039
first of which you were 
introduced to last year at 

01:16:17.040 --> 01:16:21.794
Google I/O as cloud Test Lab.  
Now we are bringing it into 

01:16:21.795 --> 01:16:26.914
Firebase and rebranding as 
Firebase Test Lab for Android.

01:16:26.997 --> 01:16:32.588
Test Lab lets you test on the 
most popular devices before you 

01:16:32.589 --> 01:16:36.156
push your app to production.  It
 gives you reports and screen 

01:16:36.157 --> 01:16:43.387
shots and it will let you run a 
custom set of instrumentitation 

01:16:43.388 --> 01:16:47.219
50's we'll give you robo tests 
by default.  You're not going to

01:16:48.029 --> 01:16:51.821
 catch everything in the lab.  
So that is why we have built 

01:16:51.822 --> 01:16:55.482
Firebase Crash reporting so you 
can get Crashes come in from the

01:16:55.999 --> 01:17:00.442
 field.  We'll prioritize by the
 Crashes frequency and impact.  

01:17:00.443 --> 01:17:03.306
We'll let you drill down the 
version of your application and 

01:17:03.307 --> 01:17:07.585
the OS and also integrate it 
with Firebase Analytics.  So 

01:17:07.586 --> 01:17:11.314
we'll go back to the demo and 
show you these.

01:17:11.735 --> 01:17:15.597
So I'm going to start with Test 
Lab.  The first thing I need to 

01:17:15.598 --> 01:17:22.790
do is click run a test.  Here, I
 have the option to import 

01:17:22.791 --> 01:17:25.548
instrumentation tests if I have 
already written them but I 

01:17:25.549 --> 01:17:28.690
haven't.  So I'm going to click,
 run a robo test and I'm going 

01:17:28.691 --> 01:17:32.843
to up load an APK.  So we are 
going to wait just a few seconds

01:17:33.047 --> 01:17:43.002
 for this to up load.  And we'll
 try that one more time.

01:17:43.483 --> 01:17:48.282
  And the demo Gods are against 
us.  So after I have up loaded 

01:17:48.283 --> 01:17:51.606
this, what it will let me do is 
pick the devices I want to run 

01:17:51.607 --> 01:17:55.523
on and the Android OS versions. 
 Once I have done that, it will 

01:17:55.524 --> 01:17:59.357
spit out a set of results and I 
can go into them here.  So here 

01:17:59.358 --> 01:18:03.533
is one I made earlier.  So we 
can see all the devices.  So I'm

01:18:03.534 --> 01:18:11.393
 running this on motoX galaxy 
S6.  By clicking into one, I get

01:18:11.958 --> 01:18:13.958
 these

01:18:15.942 --> 01:18:20.142
 four tabs along the top.  One 
of the most interesting ones is 

01:18:15.942 --> 01:18:18.692
activity map.  So this is going 
to give me a holistic view of 

01:18:18.693 --> 01:18:23.104
how Test Lab is seeing my app on
 this screen, on this device, 

01:18:23.105 --> 01:18:24.970
and how it is spiderring through
 it.

01:18:24.971 --> 01:18:28.952
So I can get things like screen 
shots to double check that it's 

01:18:28.953 --> 01:18:31.688
appearing okay on this device 
and I can get a video of Test 

01:18:31.689 --> 01:18:35.557
Lab walking through the 
application.  I can see logs and

01:18:36.354 --> 01:18:41.638
 filter by errors, warnings, and
 info.  So that is Test Lab.

01:18:42.117 --> 01:18:45.629
Jumping over to Crash reporting,
 let's look at some actual data 

01:18:45.630 --> 01:18:51.139
from Bingo Blast.  So I can see 
in the last 30 days on this top 

01:18:51.140 --> 01:18:55.578
card, I have seen 9,300 
individual Crashes.  They have 

01:18:55.579 --> 01:19:00.865
been clustered into 119 types of
 Crashes and they have affected 

01:19:00.866 --> 01:19:08.263
in purple, 2,600 users.  In this
 second card, they have been 

01:19:08.264 --> 01:19:12.616
prioritized for me.  So I can 
say that this has affected 1,200

01:19:13.282 --> 01:19:18.792
 users and has occurred 5,300 
times.  I can click into this to

01:19:19.066 --> 01:19:22.687
 get details.  In this top card 
I will get aggregated details 

01:19:22.688 --> 01:19:25.876
about the type of iOS version it
 is affecting and the devices it

01:19:26.138 --> 01:19:29.096
 is affecting.  And then I can 
go down here and cycle through 

01:19:29.097 --> 01:19:33.306
each instance and view the 
stats.

01:19:33.307 --> 01:19:39.547
So now we'll go back to the deck
.  So that was Test Lab and 

01:19:39.548 --> 01:19:44.327
Crash reporting.  And they help 
you ship higher quality 

01:19:44.328 --> 01:19:47.722
applications.  Finally, I want 
to talk about some of the 

01:19:47.723 --> 01:19:52.722
integrations that we have done 
with Firebase and other Google 

01:19:52.723 --> 01:19:56.914
services.  First, we have 
integrated Firebase with Google 

01:19:56.915 --> 01:20:01.425
Play.  Things like in-app 
purchases flow directly through 

01:20:01.426 --> 01:20:06.220
Firebase Analytics and 
application not responding or 

01:20:06.221 --> 01:20:08.844
ANRs flow through to Firebase 
Crash reporting.  Secondly, 

01:20:08.845 --> 01:20:14.828
Google Cloud.  We have connected
 Firebase with Google Cloud.  So

01:20:14.829 --> 01:20:21.753
 you can easily attach Google 
Cloud resources to your Firebase

01:20:21.754 --> 01:20:26.380
 application easily.  So this 
let's us do things like access 

01:20:26.381 --> 01:20:30.719
Google Cloud Storage from 
Firebase and from Google Cloud. 

01:20:30.720 --> 01:20:34.688
 And you can expect much more of
 this in the future.  We are 

01:20:34.689 --> 01:20:38.848
working closely with the Google 
Cloud functions team to help you

01:20:39.030 --> 01:20:43.362
 bring light weight computers to
 Firebase.  That's how Firebase 

01:20:43.363 --> 01:20:46.457
can help you develop an 
application.  I'll turn it to 

01:20:46.458 --> 01:20:49.535
France toys talk about how to 
grow a business with Firebase.

01:20:49.612 --> 01:20:54.106
&gt;&gt; FRANCIS: So James just talked
 about how to use Firebase to 

01:20:54.107 --> 01:20:56.107
develop an app more easily and 
tools to help you build a higher

01:20:56.807 --> 01:20:58.688
 quality app.  Now I'm going to 
talk about how you can use some 

01:20:58.689 --> 01:21:02.123
of the Firebase features to grow
 a business.  We are going to 

01:21:02.124 --> 01:21:06.329
talk over ways that you can use 
Firebase to acquire more users 

01:21:06.330 --> 01:21:09.831
and engage more users and also 
to earn more easily.  Let's 

01:21:09.832 --> 01:21:15.553
start with user acquisitions.  
Now we know that users often 

01:21:15.554 --> 01:21:17.167
discover apps through 
word-of-mouth.  And I'm sure 

01:21:17.168 --> 01:21:21.005
many of you have got an e-mail 
from a friend that shared an app

01:21:21.006 --> 01:21:24.039
 with you.  But oftentimes when 
you click on that link, you end 

01:21:24.040 --> 01:21:27.914
up in a static page like this.  
It doesn't even know what type 

01:21:27.915 --> 01:21:31.957
of phone you're on.  And 
developers built this because 

01:21:31.958 --> 01:21:38.918
the work actually to turn a web 
link into the specific state in 

01:21:38.919 --> 01:21:41.216
your native app is a lot of 
work, especially when you have 

01:21:41.217 --> 01:21:44.889
to do this across two different 
platforms.  So let's assume the 

01:21:44.890 --> 01:21:49.516
user is able to go in and choose
 the right download and able to 

01:21:49.517 --> 01:21:53.414
download your app and starts it.
  Now, she would come into this 

01:21:53.415 --> 01:21:57.107
generic screen.  Not really the 
bingo game she was invited to.  

01:21:57.108 --> 01:21:59.294
And that isn't a great 
experience either.  So 

01:21:59.295 --> 01:22:03.470
all-in-all, this is really high 
friction not only for users to 

01:22:03.471 --> 01:22:07.102
share but also for you to 
promote your app through other 

01:22:07.103 --> 01:22:11.919
web channels like using E-mail, 
SMS or posting on a tweet.  

01:22:11.920 --> 01:22:15.494
Imagine wouldn't it be nice if 
there was a much easier way to 

01:22:15.495 --> 01:22:18.722
share a link, that link could be
 dynamic and figure out the type

01:22:19.165 --> 01:22:23.902
 of phone that user is on 
whether or not the app is 

01:22:23.903 --> 01:22:27.011
installed, and if not take them 
to the right store and when the 

01:22:27.012 --> 01:22:29.596
user installs it and starts it 
for the first time, it will take

01:22:29.882 --> 01:22:33.033
 them to the right content of 
the app but not only that, it 

01:22:33.034 --> 01:22:36.801
will take them to the specific 
state that the link was meant 

01:22:36.802 --> 01:22:41.124
for them.  The user was invited 
to bingo game challenge and now 

01:22:41.125 --> 01:22:46.107
they are brought right into it 
with these three clicks.  To 

01:22:46.108 --> 01:22:49.856
help you solve that problem, 
Firebase Dynamic Links is what 

01:22:49.857 --> 01:22:55.042
does that for you.
Dynamic Links provide single URL

01:22:55.364 --> 01:23:01.355
 to configure users on the fly. 
 That one URL also works across 

01:23:01.356 --> 01:23:08.152
different platforms and the 
states can be preserved even 

01:23:08.153 --> 01:23:11.067
through software and we provide 
analytic Sites as well as.  

01:23:11.068 --> 01:23:15.327
Let's switch to the demo and 
show you how dynamic set up 

01:23:15.328 --> 01:23:18.028
works.  Here I'm back to 
Firebase console on the left.  I

01:23:18.479 --> 01:23:24.395
 can access my Dynamic Links.  
And top right I can create a new

01:23:24.689 --> 01:23:28.576
 link.  It's really simple.  So 
let's say I have a fall promo.  

01:23:28.577 --> 01:23:36.096
I can type in the URL right 
here.

01:23:39.672 --> 01:23:42.832
  And now I can select a 
specific app I want to send them

01:23:42.833 --> 01:23:47.315
 to.  So I have a production app
 and a test app.  I can select 

01:23:47.316 --> 01:23:51.489
the right app and likewise, on 
iOS, now there are other 

01:23:51.490 --> 01:23:54.844
advanced options as well but to 
get the basic link created it's 

01:23:54.845 --> 01:23:58.350
that simple.  Just create now a 
short link that is automatically

01:23:58.941 --> 01:24:02.940
 generated for you and you can 
use that link and the right 

01:24:02.941 --> 01:24:05.570
behavior will happen just as I 
had shown you earlier.

01:24:05.832 --> 01:24:08.333
Here are some other examples of 
links that I have created and 

01:24:08.334 --> 01:24:14.729
now you can go in and see how 
many clicks these individuals 

01:24:14.730 --> 01:24:17.331
clinks have driven through.  So 
use that one link and use it 

01:24:17.332 --> 01:24:19.611
across different campaigns or 
choose to create different links

01:24:19.762 --> 01:24:23.598
 and be able to see which of 
these links are performing best.

01:24:23.662 --> 01:24:30.810
  Let's switch back over to the 
Slides.  So on the topic of 

01:24:30.811 --> 01:24:33.594
sharing with Dynamic Links, 
another great way to help you do

01:24:33.945 --> 01:24:38.401
 that is with Firebase Invites. 
 Firebase Invites provide a drop

01:24:38.550 --> 01:24:45.174
 in widget to help you create a 
sharing for users through SMS 

01:24:45.175 --> 01:24:50.547
and e-mail.  But not only that, 
Google will also suggest choose 

01:24:50.548 --> 01:24:54.428
to sender, the recipients they 
should send to.  And all of this

01:24:54.667 --> 01:24:58.502
 is built on Dynamic Links so 
the same behavior happens T 

01:24:58.503 --> 01:25:01.799
works across platforms when the 
user clicks on the link, the 

01:25:01.800 --> 01:25:06.204
states will be preserved.
Here is an example of what 

01:25:06.205 --> 01:25:10.217
dynamic -- Firebase Invites look
 like.  Over on the left, is 

01:25:10.218 --> 01:25:12.973
your app where let's say you're 
running a promotional campaign 

01:25:12.974 --> 01:25:19.374
where the sender and receiver 
gets 15% off.  So the sender 

01:25:19.375 --> 01:25:23.584
clicks end and now the middle 
screen is the Firebase Invites 

01:25:23.585 --> 01:25:28.233
widget.  Cust nice to match the 
look and feel of your app and 

01:25:28.234 --> 01:25:32.096
notice the recipients.  It's not
 just an alphabetically sorted 

01:25:32.097 --> 01:25:35.837
list.  It's a list on who is 
most likely to be interested in 

01:25:35.838 --> 01:25:39.764
this app.  And on the right is 
the recipient who is using a 

01:25:39.765 --> 01:25:42.714
different device again because 
this is built on Dynamic Links, 

01:25:42.715 --> 01:25:45.465
it works across platform and 
when you click on it, it will 

01:25:45.466 --> 01:25:49.188
take them to the right spot in 
the app.

01:25:49.554 --> 01:25:53.891
So I just talked about two ways 
you can Drive organic growth 

01:25:53.892 --> 01:25:57.364
with Dynamic Links and invites. 
 Now to feel your growth engine,

01:25:57.534 --> 01:26:01.408
 a great way to do that is 
tapping into the reach of Google

01:26:01.729 --> 01:26:06.644
 through AdWords.  Since last 
year, we introduced a new 

01:26:06.645 --> 01:26:11.547
feature called Universal App 
Campaigns.  It's a easy way for 

01:26:11.548 --> 01:26:16.489
you to Drive installs through 
the reach of Google across the 

01:26:16.490 --> 01:26:19.151
different properties.  For 
example, Google Search, Google 

01:26:19.152 --> 01:26:23.272
Play, YouTube or the display 
network.  You can reach over a 

01:26:23.273 --> 01:26:27.229
billion users.  All you have to 
do is set a specific budget and 

01:26:27.230 --> 01:26:30.515
Google will automatically figure
 out the best channel to help 

01:26:30.516 --> 01:26:34.827
you find the most valuable 
users.  And we have seen 

01:26:34.828 --> 01:26:39.267
incredible traction over the 
last year.  To date, we have 

01:26:39.268 --> 01:26:43.856
driven over two billion app 
installs from our ads.

01:26:43.857 --> 01:26:48.186
We have offered this on Android 
and now we are expanding this to

01:26:48.910 --> 01:26:52.790
 iOS as well.  And here is the 
cool part.  AdWords is 

01:26:52.791 --> 01:26:55.493
integrated with Firebase.  So 
what that means is, you can take

01:26:55.698 --> 01:27:00.225
 your audiences from your 
Firebase Analytics and use that 

01:27:00.226 --> 01:27:04.620
for remarketing and AdWords.  So
 I can go back and send a 

01:27:04.621 --> 01:27:08.245
specific promo to my Canadian 
purchasers through AdWords.  

01:27:08.246 --> 01:27:12.235
Another aspect of this 
integration it lets you impouter

01:27:12.236 --> 01:27:15.749
 your events from Analytics into
 AdWords as a way to track 

01:27:15.750 --> 01:27:19.102
conversions.  Not only does it 
help you measure results, but it

01:27:19.353 --> 01:27:23.845
 is also helps to inform AdWords
 to help optimize your campaign 

01:27:23.846 --> 01:27:28.721
for those actions.  So let's say
 if this action I want is not 

01:27:28.722 --> 01:27:32.539
just a Drive install but I want 
users to come in and make in-app

01:27:32.741 --> 01:27:35.893
 purchase.  I can send those 
events to AdWords and AdWords 

01:27:35.894 --> 01:27:37.894
will automatically optimize for 
that.

01:27:37.905 --> 01:27:43.154
So this is a really cool way to 
fuel your growth.  So I just 

01:27:43.155 --> 01:27:47.442
walked over some features to 
talk about acquiring users.  

01:27:47.443 --> 01:27:50.188
Let's switch gears to talk about
 how you can re-engage users to 

01:27:50.189 --> 01:27:53.310
extend the lifetime value of 
these users.  One of these cool 

01:27:53.311 --> 01:27:57.239
ways of doing that is with App 
Indexing.  App Indexing is a 

01:27:57.240 --> 01:28:01.332
great way to get your app 
content exposed through Google 

01:28:01.333 --> 01:28:04.139
Search.  Now some of you may 
have heard of App Indexing 

01:28:04.140 --> 01:28:07.598
before.  This is the same App 
Indexing and now it is 

01:28:07.599 --> 01:28:11.513
integrated into Firebase to make
 your integration even easier.  

01:28:11.514 --> 01:28:16.725
You can use the same SD.  And 
now get your app -- SDK -- 

01:28:16.726 --> 01:28:20.170
indexed through Google Search.  
One thing to note is through App

01:28:20.171 --> 01:28:23.731
 Indexing, Google Search uses 
that as one of the signals for 

01:28:23.732 --> 01:28:27.035
its ranking.  When you index 
your app, it's a little bit way 

01:28:27.036 --> 01:28:32.189
to further increase your 
exposure through Google Search.

01:28:32.836 --> 01:28:37.725
Another great way to Drive 
re-engagement is through 

01:28:37.726 --> 01:28:40.519
Notifications              
Notifications.  Maniful you are 

01:28:40.520 --> 01:28:43.420
familiar with Google Cloud 
messaging.  It's the most 

01:28:43.421 --> 01:28:48.366
popular messaging service that 
is used by over one million 

01:28:48.367 --> 01:28:52.561
apps.  And since over the past 
year, we have worked really hard

01:28:52.808 --> 01:28:56.761
 to improve the developer 
experience.  We have also 

01:28:56.762 --> 01:29:02.091
expanded it across platforms so 
not only is it targeting for 

01:29:02.092 --> 01:29:05.824
Android developers and also 
works on iOS, Chrome and web 

01:29:05.825 --> 01:29:12.326
push W also integrated that with
 Firebase as well.  Do those 

01:29:12.327 --> 01:29:17.156
three principals sound familiar 
to you?  To reflect our 

01:29:17.157 --> 01:29:20.891
commitment to continue to make 
this better, we are now calling 

01:29:20.892 --> 01:29:25.540
this Firebase Cloud Messaging.
Additionally, we are also 

01:29:25.541 --> 01:29:29.820
building a new feature called, 
Firebase notification.  Firebase

01:29:31.025 --> 01:29:33.811
 notification is a new UI 
accessible through the console 

01:29:33.812 --> 01:29:40.577
that is built on top of Cloud 
Messaging.  This UI lets you 

01:29:40.578 --> 01:29:43.690
compose a notification without 
writing a single line of code.  

01:29:43.691 --> 01:29:46.959
And since it is integrated and 
part of Firebase, you can take 

01:29:46.960 --> 01:29:51.330
the same Analytics audience and 
use that to target your 

01:29:51.331 --> 01:29:53.425
Notifications.  And since it is 
also connected with Analytics, 

01:29:53.426 --> 01:29:56.624
you can also measure the 
conversion events.  Let's switch

01:29:56.902 --> 01:30:01.775
 over to the demo and I'll show 
what you this looks like.  So 

01:30:01.776 --> 01:30:07.415
here on the left I can access 
notification view.  Creating a 

01:30:07.416 --> 01:30:12.535
notification is really simple.  
Click new message.  So let's say

01:30:14.447 --> 01:30:17.900
 5 dollar promo.  Now, I can 
even schedule that to be sent at

01:30:18.051 --> 01:30:22.342
 a later time.
It's a long weekend in Canada 

01:30:22.343 --> 01:30:28.091
next week.  I will send that 
promo at that time, and I select

01:30:28.171 --> 01:30:32.601
 my app and now watch this.  I 
can specify the specific 

01:30:32.602 --> 01:30:38.810
audience that I want to target 
to my Canadian purchasers.  But 

01:30:38.811 --> 01:30:41.152
there is more.  I don't want to 
send notification to get them to

01:30:41.619 --> 01:30:44.938
 open the app.  What I really 
want is to make sure that they 

01:30:44.939 --> 01:30:49.426
are taking actions inside the 
app they wanted to take.  For 

01:30:49.427 --> 01:30:53.142
example, if I want them to 
continue on and make more in-app

01:30:54.111 --> 01:30:56.300
 purchases.  I can set that as 
conversion event and the if I 

01:30:56.301 --> 01:31:00.468
want to, I can specify other 
advance options like passing in 

01:31:00.469 --> 01:31:04.442
my own custom key value pair to 
specify a state when they open 

01:31:04.443 --> 01:31:11.713
the notification.  So I click 
schedule, confirm and here now I

01:31:11.916 --> 01:31:16.516
 have the schedule.  It's going 
to go out on may 23rd.  Let's 

01:31:16.517 --> 01:31:20.037
switch to the Slides.  We are 
going to travel in time to the

01:31:24.047 --> 01:31:28.132
 future.  May 23rd Notifications
 will go out to thousands of my 

01:31:28.133 --> 01:31:31.143
users and now on the bottom 
right there, you can see the 

01:31:31.144 --> 01:31:35.226
conversion funnel, the number of
 Notifications that were sent, 

01:31:35.227 --> 01:31:38.607
the number that were opened and 
the number that converted.  The 

01:31:38.608 --> 01:31:43.960
number of users who have taken 
to in-app purchase action I 

01:31:43.961 --> 01:31:48.030
wanted them to.  So in addition 
to using fire basis to help you 

01:31:48.031 --> 01:31:52.376
grow your audience, you can also
 use it to help you monetize 

01:31:52.377 --> 01:31:57.983
more easily.  One of the most 
popular ways of monetizing a 

01:31:57.984 --> 01:32:01.408
mobile app is through display 
adds and AdMob helps you do 

01:32:01.409 --> 01:32:06.008
that.  AdMob helps you engage 
formats from video, or native 

01:32:06.009 --> 01:32:09.647
that can match the look and feel
 of your app.  To date, there 

01:32:09.648 --> 01:32:15.671
are over one million developers 
that are using AdMob.  AdMob is 

01:32:15.672 --> 01:32:19.923
also integrated with Firebase.  
That means you can use the same 

01:32:19.924 --> 01:32:24.347
SDK to use AdMob with your app 
but not only that, you can also 

01:32:24.348 --> 01:32:29.565
use AdMob with other Firebase 
products, such as Remote Config,

01:32:29.697 --> 01:32:34.089
 so you can now used that to 
say, run experiments to figure 

01:32:34.090 --> 01:32:39.435
out which formats is best or you
 can try to experiment with the 

01:32:39.436 --> 01:32:43.524
different positions of your app,
 or if you want to supplement 

01:32:43.525 --> 01:32:47.566
your income in the case of Bingo
 Blast, I can now show ads only 

01:32:47.567 --> 01:32:53.772
tow those users that are not 
making in-app purchases.  So we 

01:32:53.773 --> 01:32:56.509
just talked about ways on how to
 use Firebase to help you 

01:32:56.510 --> 01:32:58.991
develop, grow and earn.  Let's 
switch over to hear from some of

01:32:59.172 --> 01:33:02.803
 the partners who we have been 
working with and share their 

01:33:02.804 --> 01:33:08.442
experience about Firebase.
  &gt;&gt; JAMES: We want to show you 

01:33:08.443 --> 01:33:16.800
two videos.  First, is from NPR.
  So national public radio.  A 

01:33:16.801 --> 01:33:20.189
well renowned broadcaster here 
in the U.S. and then moving 

01:33:20.190 --> 01:33:24.251
towards a broadcast model and 
trying to understand how they 

01:33:24.252 --> 01:33:29.613
can best engage their mobile 
users and the second is called 

01:33:29.614 --> 01:33:35.054
IS.  A high-tech start up based 
in New York City developed an 

01:33:35.055 --> 01:33:36.994
innovation location-based 
application.  Let's take a look 

01:33:36.995 --> 01:33:39.638
at what they have done with 
Firebase.

01:33:39.724 --> 01:33:45.601
[ Music Playing ]
  &gt;&gt; We are remanaging what a 

01:33:45.602 --> 01:33:47.876
listening experience could be 
outside of the radio.

01:33:47.877 --> 01:33:52.031
&gt;&gt; It's the radio but better.  
It has all of the great stuff 

01:33:52.032 --> 01:33:55.825
that we have spent 40 years 
perfecting.

01:33:55.826 --> 01:33:59.189
&gt;&gt; We see the opportunity of 
reaching a more diverse audience

01:33:59.399 --> 01:34:01.724
 that have a device in their 
pocket at all times.

01:34:01.725 --> 01:34:05.819
&gt;&gt; My name is Mike and I'm the 
lead mobile developer for NPR 

01:34:05.820 --> 01:34:10.304
digital media.  The.
&gt;&gt; Nye maim is Nick and I'm the 

01:34:10.305 --> 01:34:13.006
innovation accountant.
&gt;&gt; I'm senior Product Manager 

01:34:13.007 --> 01:34:16.276
for NPR1.
&gt;&gt; Some of the biggest 

01:34:16.277 --> 01:34:20.055
challenges in any mobile app are
 that first impression when the 

01:34:20.056 --> 01:34:22.613
user first installs the app you 
have a limited amount of time to

01:34:22.846 --> 01:34:26.648
 convince them to keep the app 
and to get engaged in the 

01:34:26.649 --> 01:34:28.448
experience.
&gt;&gt; Trying to figure out how to 

01:34:28.449 --> 01:34:32.425
get users into the content as 
quickly as possible was the real

01:34:32.897 --> 01:34:38.697
 focus of integrating Firebase 
and Dynamic Links.  Using 

01:34:38.698 --> 01:34:40.973
Dynamic Links we were able to 
shorten the number of 

01:34:40.974 --> 01:34:44.783
interactions it takes for a user
 installing the app to get from 

01:34:44.784 --> 01:34:49.082
the promoted content to the 
content, from 20 to 3.  So, that

01:34:49.214 --> 01:34:51.792
 use ser able to get into the 
content.

01:34:51.793 --> 01:34:55.636
&gt;&gt; We are I driving more and 
more listening per user every 

01:34:55.637 --> 01:34:59.560
week.  It's astounding.  
Creating play list of content 

01:34:59.561 --> 01:35:03.525
that are configured by the 
podcastero a station or by us 

01:35:03.526 --> 01:35:07.129
internally and with Firebase we 
have that at our hands.

01:35:07.130 --> 01:35:11.520
&gt;&gt; Having the Analytics product 
interact with things like 

01:35:11.521 --> 01:35:13.993
Dynamic Links, Remote 
Configation, Cloud Messaging, it

01:35:14.307 --> 01:35:17.991
 adds a real multiplier affect.
&gt;&gt; And the integration with the 

01:35:17.992 --> 01:35:20.746
broader Firebase suite, I don't 
have to go outside the platform 

01:35:20.747 --> 01:35:23.869
to figure out what is working.  
So it's not just about shipping 

01:35:23.870 --> 01:35:29.223
the product faster.  It's about 
analyzing the results faster.  

01:35:29.224 --> 01:35:32.712
And the integration with all the
 other Firebase products, we are

01:35:33.040 --> 01:35:35.201
 excited about all the things we
 can learn from it.

01:35:35.277 --> 01:35:38.161
[ Music Playing ]
  [ Applause ]

01:35:45.017 --> 01:35:50.871
  &gt;&gt; So we will go quickly into 
the next video, which is IZ.

01:35:50.872 --> 01:35:55.345
&gt;&gt; We started IZ on the living 
room couch and we start today 

01:35:55.346 --> 01:35:58.877
because of the problem we had 
which was asking the same 

01:35:58.878 --> 01:36:01.617
questions of our closest 
friends, where are you and what 

01:36:01.618 --> 01:36:05.532
are you doing?  We were baffled 
by the fact that there wasn't a 

01:36:05.533 --> 01:36:08.508
solution that solved this 
problem and we felt like we 

01:36:08.509 --> 01:36:12.461
could build one that was better.
&gt;&gt; The value that IZ drives for 

01:36:12.462 --> 01:36:15.258
all users is knowing which of 
your friends are nearby.  So if 

01:36:15.259 --> 01:36:19.493
you look around where we are 
right now, an a reason a how 

01:36:19.494 --> 01:36:21.494
many times have people gone to a
 basketball game, hockey game or

01:36:21.727 --> 01:36:25.111
 concert and found out the next 
day they had friends at the same

01:36:25.885 --> 01:36:28.229
 event?  Think about those 
moments that are missed because 

01:36:28.230 --> 01:36:30.823
they didn't know they had 
friends there.  So what we are 

01:36:30.824 --> 01:36:35.265
solving is letting people know 
who is nearby and making those 

01:36:35.266 --> 01:36:37.783
moments matter.
&gt;&gt; My name is diesel and rhyme 

01:36:37.784 --> 01:36:44.356
the founder and CEO of IZ.
&gt;&gt; I'm Co-Founder of IZ.

01:36:44.357 --> 01:36:46.357
&gt;&gt; Weis felt no reason

01:36:49.401 --> 01:36:54.198
 users -- no reason for text 
messaging should be different 

01:36:54.199 --> 01:37:00.037
from this and Firebase let us 
solve that.  Firebase allowed us

01:37:00.988 --> 01:37:05.605
 to have a unique user 
experience and cut down on 

01:37:05.606 --> 01:37:07.397
developing time.
&gt;&gt; The most valuable asset you 

01:37:07.398 --> 01:37:11.027
have is your team and time.  And
 what Firebase allowed us to do 

01:37:11.028 --> 01:37:15.311
is save 50% in terms of time by 
moving that much quicker with 

01:37:15.312 --> 01:37:18.053
the product.  It is a game 
changer.

01:37:18.054 --> 01:37:21.382
&gt;&gt; We are using eight features 
from Firebase right now.  They 

01:37:21.383 --> 01:37:26.410
are Analytics, Remote Config, 
Dynamic Links, realtime databais

01:37:26.566 --> 01:37:29.073
 and more.  Traditional they 
would be eight different places 

01:37:29.074 --> 01:37:32.206
and now we go to one place with 
the Firebase console.

01:37:32.207 --> 01:37:35.549
&gt;&gt; We are eager to launch this 
product in a big way.  We are 

01:37:35.550 --> 01:37:37.801
seeing how people are using the 
product and how they are 

01:37:37.802 --> 01:37:40.538
inviting more are and more 
friends that were concerned.  We

01:37:40.751 --> 01:37:44.011
 are growing very, very quickly.
  So, we sleep a lot easier at 

01:37:44.012 --> 01:37:46.168
night knowing that we got 
Firebase.

01:37:46.169 --> 01:37:50.601
That is there to build that 
infrastructure.

01:37:50.602 --> 01:37:54.322
&gt;&gt; If you're a developer, use 
it.  We love it.  And it has 

01:37:54.323 --> 01:37:56.528
enabled us to focus on 
developing the user experience 

01:37:56.529 --> 01:37:59.056
and not worry about the things 
in the background that shouldn't

01:37:59.834 --> 01:38:02.478
 be there.
&gt;&gt; We are super excited to be 

01:38:02.479 --> 01:38:05.482
part of Google I/O today and 
making available everybody here 

01:38:05.483 --> 01:38:09.728
at the event, has access to IZ. 
 So, invite your friends and see

01:38:09.889 --> 01:38:13.207
 what is going on at the event. 
 In addition for everybody that 

01:38:13.208 --> 01:38:17.811
is of waking at home, they can 
also sign up for the app at IZ

01:38:23.492 --> 01:38:29.909
 app.com /I/O.
[ Applause ]

01:38:30.236 --> 01:38:33.663
&gt;&gt; Jim's James it's fantastic to
 see these two great -- JAMES: 

01:38:33.664 --> 01:38:36.975
Using Firebase and NP thromgive 
their mobile users a better 

01:38:36.976 --> 01:38:39.334
experience and understand what 
is going on in their application

01:38:39.621 --> 01:38:43.287
 and IZ, the other end of the 
life cycle just getting started 

01:38:43.288 --> 01:38:46.680
and using the full power of the 
Firebase platform to build and 

01:38:46.681 --> 01:38:55.445
grow their application.  IZ we 
chose because you today will be 

01:38:55.446 --> 01:38:58.281
wandering around shoreline.  You
 should download it and you can 

01:38:58.282 --> 01:39:04.134
see where your friends are 
throughout the arena.

01:39:05.936 --> 01:39:09.765
  &gt;&gt; France France recap, we 
just walked you through the 

01:39:09.766 --> 01:39:13.647
product suites of Firebase -- 
FRANCIS: -- they can help you 

01:39:13.648 --> 01:39:16.192
quickly build an app easily 
without managing your own 

01:39:16.193 --> 01:39:18.433
backend infrastructure.  We also
 provide a set of tools that 

01:39:18.434 --> 01:39:25.850
help you build higher quality 
apps.  We help you acquire more 

01:39:25.851 --> 01:39:29.711
users and reach them and will 
also earn more easily and tie it

01:39:30.147 --> 01:39:35.313
 all together to give insights 
and help you develop, grow and 

01:39:35.314 --> 01:39:37.566
earn.  Now remember when I 
started this, I showed you 

01:39:37.567 --> 01:39:41.208
getting started with Firebase 
only required copiy and pasting 

01:39:41.209 --> 01:39:46.233
two lines of code.  You can do 
this right after this by going 

01:39:46.234 --> 01:39:49.791
to Firebase.google.com and if 
you want to learn more about 

01:39:49.792 --> 01:39:53.695
each one of the features we just
 talked about, we have specific 

01:39:53.696 --> 01:39:57.503
sessions on each one of these 
features.  So be sure to look at

01:39:58.177 --> 01:40:01.359
 the schedule since we just 
unveiled Firebase today, the 

01:40:01.360 --> 01:40:03.994
schedule has just been 
published.  Be sure to check 

01:40:03.995 --> 01:40:08.309
them out.  If you have questions
 along the way in looking to 

01:40:08.310 --> 01:40:11.454
integrate Firebase, you can come
 to one of our office hours at 

01:40:11.455 --> 01:40:15.774
3:00 today or at 6:00 with many 
members from the Firebase team 

01:40:15.775 --> 01:40:19.909
here and our goal is to help you
 integrate Firebase before you 

01:40:19.910 --> 01:40:23.773
leave Google I/O.  Thank you 
very much for coming out.

01:40:23.774 --> 01:40:26.886
&gt;&gt; JAMES: We are also here in 
the yellow T-shirts.  So you 

01:40:26.887 --> 01:40:29.898
have the office hours but also 
grab the Firebase team and we 

01:40:29.899 --> 01:40:35.161
are giving this to you early so 
we are early in our life cycle 

01:40:35.162 --> 01:40:39.061
and we want your feedback.  So 
please provide it to us and help

01:40:39.268 --> 01:40:44.200
 us to work to make the platform
 even better.  Thank you for 

01:40:44.201 --> 01:40:46.201
coming out.
[ Applause ]

01:49:04.414 --> 01:49:12.248
         May 18, Use Analytics 
to Build Extraordinary Apps,  3 

01:49:12.249 --> 01:49:14.249
p.m.

01:50:23.962 --> 01:50:27.421
Ladies and gentlemen, you're 
staying for the next session, 

01:50:27.422 --> 01:50:32.815
please find your seats.  If you 
are not staying for the next 

01:50:32.816 --> 01:50:37.647
session, please exit the tent 
and find your next session.  We 

01:50:37.648 --> 01:50:43.658
would love you to stay but you 
need to find a seat.

01:57:07.254 --> 01:57:11.905
  &gt;&gt; All right!
How is everybody doing?  Are we 

01:57:11.906 --> 01:57:13.429
still piling into the room, it 
looks like?  Nice!

01:57:13.430 --> 01:57:17.987
All right, so I'm Russ Ketchum. 
 I lead product management for 

01:57:17.988 --> 01:57:21.530
Google Analytics for apps and 
now for Firebase Analytics.  So 

01:57:21.531 --> 01:57:25.302
I'm going to be on stage in a 
few minutes by some of my team, 

01:57:25.303 --> 01:57:29.719
by Steve and Fontaine, and 
before we get to that, I want to

01:57:30.196 --> 01:57:34.251
 take a minute and have 
everybody think about 

01:57:34.252 --> 01:57:39.075
experiences that they had with 
apps on an every day basis.  So,

01:57:39.325 --> 01:57:43.988
 we have all had those magical 
experiences where you download 

01:57:43.989 --> 01:57:46.614
an app and almost from the 
minute you do, you open it up 

01:57:46.615 --> 01:57:50.544
and you're in love.  It 
immediately starts adding value 

01:57:50.545 --> 01:57:53.882
to your life.  The user 
experience is beautiful.  You 

01:57:53.883 --> 01:57:57.938
may even go on to make it a 
permanent fixture on your home 

01:57:57.939 --> 01:58:01.545
screen and before long, you 
can't imagine your life without 

01:58:01.546 --> 01:58:07.067
it.  So, for me, Uber is an app 
like that.  So I am based in 

01:58:07.068 --> 01:58:09.667
Southern California.  Here I am 
in the Bay Area.  I don't have a

01:58:09.811 --> 01:58:16.706
 car or rental car or worrying 
about cabs.  Uber.  When I'm at 

01:58:16.707 --> 01:58:19.932
home, WAYZ an app like that for 
me.  There is another experience

01:58:20.051 --> 01:58:24.241
 we had with apps, the ones when
 you install them, you almost 

01:58:24.242 --> 01:58:29.290
immediately regret doing T the 
user experience suction if you 

01:58:29.291 --> 01:58:33.820
can ever see the user experience
 because the app keeps Crashing 

01:58:33.821 --> 01:58:36.324
and then it has Notifications 
you never asked for that serve 

01:58:36.325 --> 01:58:40.608
no purpose and without fail, 
right when you're more 

01:58:40.609 --> 01:58:43.966
frustrated than you can be, it 
has the audacity to prompt you 

01:58:43.967 --> 01:58:49.658
for review.  So as developers, 
none of us want that app to be 

01:58:49.659 --> 01:58:53.751
our app.  Especially when we 
know how extraordinary apps can 

01:58:53.752 --> 01:58:59.132
be.  But of course, you all know
 this better than anyone else.  

01:58:59.133 --> 01:59:02.689
Because typically your app is 
your business and every 

01:59:02.690 --> 01:59:07.006
interaction with your users 
matters.  Now as developers, 

01:59:07.007 --> 01:59:10.131
there is something else that you
 know about apps.  And that is 

01:59:10.132 --> 01:59:14.634
that building an app is really, 
really hard.  I mean, think 

01:59:14.635 --> 01:59:18.040
about it.  There is so much 
going on, so much you have to 

01:59:18.041 --> 01:59:22.615
get right, and you build the app
 but how are you going to make 

01:59:22.616 --> 01:59:26.976
it successful and how do you 
measure success and understand 

01:59:26.977 --> 01:59:28.977
the things that make an app 
successful and not?

01:59:29.380 --> 01:59:34.537
So, a big challenge there is 
that apps are generating just a 

01:59:34.538 --> 01:59:38.797
mind-boggling amount of data.  
So people take their phones out 

01:59:38.798 --> 01:59:42.805
of their pockets and check them 
more than 150 times a day.  I'm 

01:59:42.806 --> 01:59:45.640
standing on stage at I-O and I 
have already pulled my phone out

01:59:46.252 --> 01:59:49.769
 twice.  And that level of 
interaction just generates a 

01:59:49.770 --> 01:59:53.601
mind-boggling amount of data.  
And very few tools are even 

01:59:53.602 --> 01:59:56.752
capable of capturing that amount
 of data, especially if you're 

01:59:56.753 --> 02:00:01.467
not one of the big developers.
Let's assume for a minute that 

02:00:01.468 --> 02:00:04.446
you could collect all that data.
  How would you go about 

02:00:04.447 --> 02:00:07.803
detecting the underlying factors
 that are driving your success 

02:00:07.804 --> 02:00:12.016
and failure?  What causes your 
revenue to increase one day and 

02:00:12.017 --> 02:00:15.981
fall another day?  What users 
are most valuable to you and 

02:00:15.982 --> 02:00:19.827
where are they coming from?  
What are the experiences in the 

02:00:19.828 --> 02:00:23.302
app that they are throughly 
enjoying?  You need a set of 

02:00:23.303 --> 02:00:29.427
powerful analysis tools that 
work fast and are easy to use.  

02:00:29.428 --> 02:00:33.829
And you also need to be able to 
very quickly put that data to 

02:00:33.830 --> 02:00:37.097
work for you.  It's not good 
enough to simply look at your 

02:00:37.098 --> 02:00:41.270
reporting.  You need to put that
 data into action.  And so, 

02:00:41.271 --> 02:00:44.549
without having to deal with all 
of the complications of bundling

02:00:44.852 --> 02:00:46.852
 and multiple

02:00:48.459 --> 02:00:52.317
 SDKs that make your app bloated
 and results in a Frankenstein 

02:00:52.318 --> 02:00:54.318
monster

02:00:55.437 --> 02:00:59.237
 with all these pieces never 
designed to work together.  

02:00:55.437 --> 02:00:58.621
Fortunately this is something 
that Google can help with.  

02:00:58.622 --> 02:01:00.622
Let's talk about the new 
Firebase.

02:01:00.686 --> 02:01:04.126
We just heard a lot about it if 
you heard pieces of the Keynote 

02:01:04.127 --> 02:01:06.875
or in the session before this, 
but we want to look at it from 

02:01:06.876 --> 02:01:12.463
the perspective of Analytics.  
What we used Firebase for 

02:01:12.464 --> 02:01:15.738
internally at Google was a 
unifying force to bring all of 

02:01:15.739 --> 02:01:19.005
our app developer efforts 
together.  And the result is now

02:01:19.313 --> 02:01:23.118
 this single suite of tightly 
integrated products all designed

02:01:23.438 --> 02:01:28.892
 to help users or help 
developers rather, build their 

02:01:28.893 --> 02:01:32.563
apps, grow their engagement or 
user base, and ultimately to 

02:01:32.564 --> 02:01:38.212
earn more money.  And while we 
talk about these as stages or 

02:01:38.213 --> 02:01:42.140
steps like in a journey, I think
 a better way to look at them is

02:01:42.430 --> 02:01:48.182
 like this.  So you can manage 
thin as a virtuous cycle where 

02:01:48.183 --> 02:01:51.358
each step is feeding back on 
itself and reinforcing the 

02:01:51.359 --> 02:01:55.244
learnings from one stage to 
benefit the other, all to build 

02:01:55.245 --> 02:01:58.053
a better app.
And so that is exactly what we 

02:01:58.054 --> 02:02:01.402
are doing with Firebase.  We are
 making it easy for you to tap 

02:02:01.403 --> 02:02:05.748
in to that virtuous cycle and 
succeed with your app.  So we 

02:02:05.749 --> 02:02:09.934
heard Francis and James a few 
minutes ago talk about how 

02:02:09.935 --> 02:02:15.617
Firebase is this tightly- 
integrate set of tools.  We have

02:02:15.766 --> 02:02:18.067
 other session that is go into 
all the different features 

02:02:18.068 --> 02:02:21.091
throughout the week and over at 
the Firebase sand box.  But at 

02:02:21.092 --> 02:02:26.570
the core of Firebase, is 
Firebase Analytics.  And now 

02:02:26.571 --> 02:02:28.722
this is an entirely new offering
 focused specifically on the 

02:02:28.723 --> 02:02:33.849
needs of mobile apps but it 
benefits from our decade-long 

02:02:33.850 --> 02:02:37.881
experience running Google 
Analytics, which is the most 

02:02:37.882 --> 02:02:40.898
popular Analytics service in the
 world.  So we think given these

02:02:41.402 --> 02:02:44.627
 learnings, that Firebase 
Analytics is going to be really 

02:02:44.628 --> 02:02:47.412
exciting for developers and here
 is why.

02:02:48.329 --> 02:02:53.614
So first, Firebase Analytics is 
completely free and completely 

02:02:53.615 --> 02:02:55.813
unlimited.  Even for --
[ Applause ]

02:02:56.083 --> 02:02:59.124
Completely free and completely 
unlimited!

02:02:59.125 --> 02:03:00.579
[ Applause ]
Exactly!

02:03:00.580 --> 02:03:04.804
This is true even for largest of
 apps.  So now all developers 

02:03:04.805 --> 02:03:09.113
can understand all of their data
 and without compromise.  It is 

02:03:09.114 --> 02:03:11.782
free.  There aren't hit limits. 
 There is not sampling.  There 

02:03:11.783 --> 02:03:16.068
is no quotas.  There is no 
nothing.  Free and unlimited.  

02:03:16.069 --> 02:03:19.336
Next, it works automatically 
right out-of-the-box.  So what 

02:03:19.337 --> 02:03:21.992
this means is when a developer 
gets started with Firebase and 

02:03:21.993 --> 02:03:26.383
they add it to their app, for 
any reason, even the most basic 

02:03:26.384 --> 02:03:29.741
implementation, they are already
 set up with Firebase analytics 

02:03:29.742 --> 02:03:32.086
and it's already measuring 
things for them automatically.  

02:03:32.087 --> 02:03:35.239
Now the automated measurement 
features are just the starting 

02:03:35.240 --> 02:03:37.737
point and Steve will come up 
here in just a minute and show 

02:03:37.738 --> 02:03:43.005
us how easy it is to take that 
further.  Firebase Analytics is 

02:03:43.006 --> 02:03:46.833
also seamlessly integrated 
within Firebase and across many 

02:03:46.834 --> 02:03:49.199
other Google products.
And this is going to provide you

02:03:49.511 --> 02:03:54.691
 as a developer with a single 
source of truth as you take 

02:03:54.692 --> 02:03:59.183
action across all of Google and 
Fontaine will come up here in a 

02:03:59.184 --> 02:04:01.577
minute to to show us what that 
looks like.  The thing I really,

02:04:02.133 --> 02:04:05.588
 really want to stress is that 
Firebase Analytics is cross 

02:04:05.589 --> 02:04:10.146
platform.  It works just as well
 and is just as easy to use on 

02:04:10.147 --> 02:04:13.550
iOS as it is on Android.
And so with that, let's go ahead

02:04:13.704 --> 02:04:16.961
 and get our hands dirty and 
write some code.  Actually I'm 

02:04:16.962 --> 02:04:20.704
not going to get my hands dirty.
  Steve is going to get his 

02:04:20.705 --> 02:04:24.205
hands dirty and I will hand it 
over and he will show you how 

02:04:24.206 --> 02:04:29.930
easy it is to use Firebase 
Analytics as you're building 

02:04:29.931 --> 02:04:30.974
graph.  Steve?
&gt;&gt;      

02:04:30.975 --> 02:04:33.401
[ Applause ]
&gt;&gt; STEVE: Thank you.  Thank you 

02:04:33.402 --> 02:04:39.425
very much.  I'm Steve Ganem and 
I'm a Project Manager on 

02:04:39.426 --> 02:04:41.227
Firebase Analytics and I'm going
 to walk you through a real 

02:04:41.228 --> 02:04:44.785
example of how to use Firebase 
Analytics as you develop your 

02:04:44.786 --> 02:04:48.062
app and there will be a little 
bit of live coding there as 

02:04:48.063 --> 02:04:51.160
well.  And but just before we do
 that, I'm going to take a step 

02:04:51.161 --> 02:04:55.731
back and see how you get started
 with Firebase in your app.

02:04:55.732 --> 02:05:01.219
We get started with Firebase 
very easy as 1, 2, 3.  You take 

02:05:01.220 --> 02:05:04.376
your app, you add the SDK to it 
and add a config file and you're

02:05:04.535 --> 02:05:09.208
 up and running.  More 
specifically, you register your 

02:05:09.209 --> 02:05:12.286
app on the Firebase console, you
 download the SDK for your 

02:05:12.287 --> 02:05:15.393
target platform and then 
download a configgation file 

02:05:15.394 --> 02:05:19.268
that has your unique app ID in 
it and drop those into your 

02:05:19.269 --> 02:05:23.304
project and build.  All that 
remains at that point is to 

02:05:23.305 --> 02:05:28.616
initialize the SDK which is code
 list on Android and two lines 

02:05:28.617 --> 02:05:33.061
of code on iOS.  And this is a 
one-time set up to do for any 

02:05:33.062 --> 02:05:36.738
and all Firebase features and so
 the beauty is, regardless of 

02:05:36.739 --> 02:05:39.900
what feature attracted you to 
Firebase in the first place, if 

02:05:39.901 --> 02:05:45.806
you come this far, you're 
already live with Analytics in 

02:05:45.807 --> 02:05:46.054
your app.
Now, what does it mean to be 

02:05:46.055 --> 02:05:51.523
live with Analytics?  Well, 
Firebase Analytics works 

02:05:51.524 --> 02:05:54.526
out-of-the-box.  So just by 
initializing the SDK over a 

02:05:54.527 --> 02:05:58.086
dozen events are captured 
automatically for you.  These 

02:05:58.087 --> 02:06:02.091
are events are critical related 
to in-app purchases, user 

02:06:02.092 --> 02:06:04.536
engagement, your push 
notification campaigns and more.

02:06:04.650 --> 02:06:08.009
  This is all done for you.  
Now, of course you still need 

02:06:08.010 --> 02:06:12.035
the ability to log custom events
 and there is an API for you to 

02:06:12.036 --> 02:06:15.248
do that.  But what if you aren't
 sure what you should be 

02:06:15.249 --> 02:06:18.352
logging?  Maybe you're new to 
Analytics or want to make sure 

02:06:18.353 --> 02:06:21.671
you're practicing using best 
practices with Firebase 

02:06:21.672 --> 02:06:24.331
Analytics?  That's what our API 
documentation and our help 

02:06:24.332 --> 02:06:29.719
center can help you get started.
  In our help center, you'll 

02:06:29.720 --> 02:06:31.926
find documentation on a list of 
suggested events for various 

02:06:31.927 --> 02:06:34.744
types of apps so that you can 
map your experience and your 

02:06:34.745 --> 02:06:38.532
features to these events and log
 them.  There is examples and 

02:06:38.533 --> 02:06:42.733
suggestioned events for things 
like retall apps, travel apps 

02:06:42.734 --> 02:06:46.191
and of course games.  So, what 
is it like to log one of the 

02:06:46.192 --> 02:06:49.147
events and how much work is 
that?  That's what I'm going to 

02:06:49.148 --> 02:06:54.059
show you in just a minute.  And 
we'll do so in the context of a 

02:06:54.060 --> 02:06:57.439
real app.
Transworld endless skater is an 

02:06:57.440 --> 02:07:01.576
app that is live right now in 
the App Store and on Google 

02:07:01.577 --> 02:07:05.679
Play.  It is a skateboarding 
take on the endless runner genre

02:07:05.833 --> 02:07:08.931
 where the player's goal is to 
land as many tricks and combos 

02:07:08.932 --> 02:07:11.987
as possible to keep their run 
going as long as possible and 

02:07:11.988 --> 02:07:15.216
the developer's goal to to keep 
the lights on as long as 

02:07:15.217 --> 02:07:18.248
possible and they do that by 
monetizing with in-app purchases

02:07:18.438 --> 02:07:21.911
 driven by a virtual economy 
which is a very common pattern 

02:07:21.912 --> 02:07:24.505
in video games.
And so thinking back to the list

02:07:24.722 --> 02:07:28.519
 of suggested events I showed 
you on a previous slide, these 

02:07:28.520 --> 02:07:30.902
spend virtual currency event 
will be important because we 

02:07:30.903 --> 02:07:34.291
want to measure the Trends and 
popularity of our various 

02:07:34.292 --> 02:07:37.247
virtual goods.  So let's take a 
look at what it is like to log 

02:07:37.248 --> 02:07:42.541
that event.
Switch to the demo, please.  So 

02:07:42.542 --> 02:07:46.636
here we are in X code.  A 
function that is called when an 

02:07:46.637 --> 02:07:51.382
item is purposed from the shop. 
 So first thing I'm going to do 

02:07:51.383 --> 02:07:57.416
is get Analytics instance and 
call log it in with name API.  

02:07:57.417 --> 02:08:01.115
And I'm going to log the spend 
virtual currency event.  So just

02:08:01.371 --> 02:08:05.820
 having done that, I'm flagging 
every time a user actually 

02:08:05.821 --> 02:08:08.589
purchases something.  But that's
 good and that has some value to

02:08:09.340 --> 02:08:12.353
 it.  We want to add context 
with parameters that help us 

02:08:12.354 --> 02:08:15.338
understand what is being 
purchased and what the price 

02:08:15.339 --> 02:08:19.773
was.
So not only does Firebase 

02:08:19.774 --> 02:08:23.959
suggest program -- events for 
you to log, but it also 

02:08:23.960 --> 02:08:26.042
prescribes certain parameters 
for events to help you get the 

02:08:26.043 --> 02:08:29.747
most out of your reporting.  For
 this spend virtual currency 

02:08:29.748 --> 02:08:33.197
event we see item name, virtual 
currency name and will value, 

02:08:33.198 --> 02:08:37.498
are prescribed.  So we'll add 
those as well to the event.

02:08:54.197 --> 02:08:58.191
And there it is.  With one line 
of code, we are now tracking our

02:08:58.990 --> 02:09:05.243
 virtual currency spend in the 
app.  And now you can log up to 

02:09:05.244 --> 02:09:09.312
500 distinct events in your app 
and unlimited volume as Russ 

02:09:09.313 --> 02:09:12.771
mentioned.  And even though I 
only logged three parameters, 

02:09:12.772 --> 02:09:17.004
you supply up to 25 different 
parameters so you get a sense of

02:09:17.122 --> 02:09:20.010
 the detect to which you can 
measure your application.  But, 

02:09:20.011 --> 02:09:22.904
what if you didn't have time to 
do that?  What if you only he 10

02:09:23.039 --> 02:09:26.145
 minutes and you asked your 
develop tore check out this 

02:09:26.146 --> 02:09:28.918
Firebase Analytics things?  How 
much value would you get from 

02:09:28.919 --> 02:09:32.324
logging one event?  Let's follow
 this through a bit.  We made 

02:09:32.325 --> 02:09:37.028
this change to the code.  We 
make a new build.  You are 65 

02:09:37.029 --> 02:09:41.496
send it to test flight.  You -- 
you archive it -- they tell you 

02:09:41.497 --> 02:09:44.396
everything is looking good.  
Submit it to Apple and breeze 

02:09:44.397 --> 02:09:47.259
through because you know what 
you're doing and then you 

02:09:47.260 --> 02:09:51.316
release it to the public

02:09:54.466 --> 02:09:58.373
.
And now let's see what the 

02:09:58.374 --> 02:10:06.675
reporting looks like.  So here I
 am in the skater project in 

02:10:06.676 --> 02:10:10.446
Firebase.  The changes we made 
are the iOS version so I select 

02:10:10.447 --> 02:10:14.645
that here.  This takes me to the
 Analytics dash board.  This is 

02:10:14.646 --> 02:10:19.067
a beautiful list of Schwartz 
graph that is have all sorts of 

02:10:19.068 --> 02:10:23.583
value -- charts and graphs.  And
 everything on here is actually 

02:10:23.584 --> 02:10:27.596
captured for you just by 
innickizing the SDK.  This whole

02:10:27.993 --> 02:10:32.068
 dashboard lights up when it is 
inserted into the app and 

02:10:32.069 --> 02:10:34.543
initialized.  So let's go 
through each one of these cards 

02:10:34.544 --> 02:10:37.754
so you can understand what is 
here in depth.  First of all, 

02:10:37.755 --> 02:10:41.562
I'm looking at the last 30 days 
here.  So all of the date that 

02:10:41.563 --> 02:10:45.490
I'm seeing is daily from the 
last 30 days and compared 

02:10:45.491 --> 02:10:49.023
against the previous 30 day 
period.  So dotted lines 

02:10:49.024 --> 02:10:51.990
represent the previous 30 days 
as well as the percentage 

02:10:51.991 --> 02:10:55.958
changes here.  This first card 
is the active user's report 

02:10:55.959 --> 02:10:59.474
breaks down monthly, weekly and 
daily active users compared to 

02:10:59.475 --> 02:11:03.334
the previous period.  The one to
 the right is average revenue.  

02:11:03.335 --> 02:11:06.773
So it breaks it down on average 
revenue per user and per paying 

02:11:06.774 --> 02:11:11.410
user.  The revenue in Firebase 
Analytics is the sum of your 

02:11:11.411 --> 02:11:14.013
in-app purchase revenue captured
 automatically and your 

02:11:14.014 --> 02:11:18.502
eCommerce revenue.
Next we see first open 

02:11:18.503 --> 02:11:20.544
attribution.
This say report on the influx of

02:11:20.792 --> 02:11:23.834
 new users from various 
campaigns that you're running.  

02:11:23.835 --> 02:11:26.350
So you get a sense of which 
campaigns are effective in 

02:11:26.351 --> 02:11:30.060
driving use tours your app but 
also looking at the lifetime 

02:11:30.061 --> 02:11:33.944
value column here, which ones 
are most effective at driving 

02:11:33.945 --> 02:11:36.825
valuable users so you can double
 down on those.

02:11:37.104 --> 02:11:40.806
Over here on the left is the 
retention cohorts chart.  This 

02:11:40.807 --> 02:11:44.675
helps you understand that for 
given set of users that started 

02:11:44.676 --> 02:11:46.856
using your app around the same 
time, what was their pattern and

02:11:47.374 --> 02:11:50.908
 regularity of comingba tock 
your app.  How well did you 

02:11:50.909 --> 02:11:53.883
retain them?  This here, user 
engagement is particularly 

02:11:53.884 --> 02:11:57.899
important for mobile apps.  User
 engagement is the amount of 

02:11:57.900 --> 02:12:00.094
time your app spends in focus on
 the foreground or device.  That

02:12:00.215 --> 02:12:04.318
 is what we care about as 
developers.  How much mind share

02:12:04.462 --> 02:12:11.224
 do I have.  How many eyeballs 
do I own?  So you see that value

02:12:11.679 --> 02:12:15.296
 plotted over 30 days.  As you 
actioner acquire more users or 

02:12:15.297 --> 02:12:18.412
improving making optimizations 
on your reason tegs, you should 

02:12:18.413 --> 02:12:22.768
see this moving up to the right 
-- retention.  The next metric 

02:12:22.769 --> 02:12:27.705
is daily engagement per user.  
Take that daily engagement

02:12:31.334 --> 02:12:31.637
 metric and divide by the number
 of users so you measure the 

02:12:31.638 --> 02:12:34.844
impact of your engagement 
optimizations.  So if you're 

02:12:34.845 --> 02:12:38.006
trying to make your app more 
engaging, have users spend more 

02:12:38.007 --> 02:12:42.099
time in it, you come here to 
verify the changes you're making

02:12:42.100 --> 02:12:45.965
 have the impact you expected.  
Or if you have a utility app 

02:12:45.966 --> 02:12:48.856
meant to get users in and out 
very quickly, you will see your 

02:12:48.857 --> 02:12:53.812
daily user engagement go down.
So we see the in-app purchases 

02:12:53.813 --> 02:12:57.933
card which is pretty self 
exexplanatoriy and shows you 

02:12:57.934 --> 02:13:01.458
which are popular.  And then 
these app version card right 

02:13:01.459 --> 02:13:03.145
here.
This is particularly important 

02:13:03.146 --> 02:13:06.656
because in our scenario, we just
 launched a new version of the 

02:13:06.657 --> 02:13:11.610
app.  We want to measure how 
quickly that is being adopted by

02:13:13.287 --> 02:13:17.779
 users.  It could be it has 100%
 adoption and that's great but 

02:13:17.780 --> 02:13:21.515
some users stick around to the 
old version.  That's important 

02:13:21.516 --> 02:13:26.030
to know because you just made 
changes to your scalp your game 

02:13:26.031 --> 02:13:28.577
player experience and if a lot 
of users aren't adopting the new

02:13:28.770 --> 02:13:33.297
 version that data won't reflect
 that.  Next we have the device 

02:13:33.298 --> 02:13:38.909
model and OS version, pretty 
self explanatory.  If you 

02:13:38.910 --> 02:13:42.385
optimized for phone and you have
 a lot of tablet users, you can 

02:13:42.386 --> 02:13:44.741
verify assumptions and making 
sure you're putting in the 

02:13:44.742 --> 02:13:48.672
effort necessary to deliver the 
best experience to your users.

02:13:48.776 --> 02:13:54.489
The last three are locations, 
demographic and interests.  

02:13:54.490 --> 02:13:58.116
These are -- I mentioned before 
that all of this is populated 

02:13:58.117 --> 02:14:01.987
automatically by initializing 
the SDK.  And all of these three

02:14:02.088 --> 02:14:05.058
 cards they tell you more about 
who is using your app.  Not so 

02:14:05.059 --> 02:14:08.262
much about what is going on in 
the app but it is incredibly 

02:14:08.263 --> 02:14:12.474
insightful on what is more.
This is Google's data being 

02:14:12.475 --> 02:14:15.075
injected into your reporting and
 adding value to your reporting.

02:14:15.174 --> 02:14:21.448
  I find that interesting, this 
tells you more about what other 

02:14:21.449 --> 02:14:24.204
things your users are into.  And
 these insights are great 

02:14:24.205 --> 02:14:27.110
because as you're producing more
 content in your app or running 

02:14:27.111 --> 02:14:29.820
campaigns to try to attract more
 users like that, now you have 

02:14:29.821 --> 02:14:33.102
an insight into what else they 
are into.

02:14:33.356 --> 02:14:36.580
So I have covered a lot here and
 there a lot of detail.  You 

02:14:36.581 --> 02:14:39.584
don't need to memorize it all.  
If you memorize one thing, 

02:14:39.585 --> 02:14:42.092
remember that there is this 
question mark up here in the 

02:14:42.093 --> 02:14:45.490
upper right corner if you click 
on that, on any report 

02:14:45.491 --> 02:14:49.833
throughout Firebase Analytics, 
it brings up in-product help.  

02:14:49.834 --> 02:14:51.834
So here on the dashboard there 
are

02:14:54.557 --> 02:14:58.690
 two videos that can give you 
background on Firebase Analytics

02:14:54.557 --> 02:14:56.856
 and there is also information 
about the reports and the 

02:14:56.857 --> 02:15:00.291
controls including links to our 
help center which is rich with 

02:15:00.292 --> 02:15:06.302
information about the product.
So the dashboard as insightful 

02:15:06.303 --> 02:15:10.348
as it is, as automatic as it is,
 it doesn't tell you much about 

02:15:10.349 --> 02:15:13.117
how users are using specific 
features within your app, which 

02:15:13.118 --> 02:15:15.911
is what we are out to measure 
here.  To do that, you need to 

02:15:15.912 --> 02:15:20.355
log events.  So let's head over 
to the events tab.

02:15:20.851 --> 02:15:25.727
The events tab list every event 
that was logged by the SDK, both

02:15:26.393 --> 02:15:30.729
 automatic and the ones you 
logged manually.  For every one 

02:15:30.730 --> 02:15:34.901
a report will be generated to 
dig into it more deeply.  In-app

02:15:35.262 --> 02:15:37.250
 puncheses is one logged 
automatically.  This is what you

02:15:37.251 --> 02:15:40.107
 can expect from automatic 
events.  You'll see a report 

02:15:40.108 --> 02:15:44.133
over the last 30 days of the 
event count so that is the 

02:15:44.134 --> 02:15:47.892
frequency the event occurred.  
Number of users who purposed 

02:15:47.893 --> 02:15:51.871
in-app purchases and the count 
per user and the value.

02:15:52.149 --> 02:15:55.374
Now value in the context of 
in-app purchase is pretty 

02:15:55.375 --> 02:15:57.638
obvious.  That is revenue.  I 
want to spend a minute on this 

02:15:57.639 --> 02:16:01.797
because it is one of the most 
valuable but subtle features of 

02:16:01.798 --> 02:16:05.168
Analytics.  Value is a context 
sensitive parameter.  The so as 

02:16:05.169 --> 02:16:08.520
I mentioned in the context of 
in-app purchases it is revenue. 

02:16:08.624 --> 02:16:11.992
 But if you have a travel app 
and you log a flight event, it 

02:16:11.993 --> 02:16:15.212
could be that your value is 
distance.  So that the 

02:16:15.213 --> 02:16:17.435
accumulative value is the total 
distance traveled by your users.

02:16:17.542 --> 02:16:21.478
  Or perhaps you have a music 
streaming app and you have an 

02:16:21.479 --> 02:16:24.758
event that is listened to track 
and then value could be 

02:16:24.759 --> 02:16:27.192
listening time so that the 
accumulative value is the total 

02:16:27.193 --> 02:16:30.273
amount of time listened to in 
your app.  So whatever makes 

02:16:30.274 --> 02:16:33.711
sense for your events, I really 
encourage you to use that value 

02:16:33.712 --> 02:16:38.741
to track those things.
We also show event locations, 

02:16:38.742 --> 02:16:41.303
demographics and event per 
session for every event report 

02:16:41.304 --> 02:16:45.705
as well.  So you get a since of 
who is logging those events.  

02:16:45.706 --> 02:16:49.011
Finally we'll get around to 
looking at our spend virtual 

02:16:49.012 --> 02:16:52.433
currency report, the one we log 
with one line of code.  Now 

02:16:52.434 --> 02:16:55.268
you're getting a since of all 
the value to get by initializing

02:16:55.269 --> 02:16:58.762
 the SDK and logging.  In 
addition to the standard metrics

02:16:58.912 --> 02:17:02.109
 we saw around event and user 
count, you'll see a report on 

02:17:02.110 --> 02:17:04.900
virtual goods.  This is what we 
are after and just by logging 

02:17:04.901 --> 02:17:10.673
that one events, we get this 
table rich with date at about 

02:17:10.674 --> 02:17:13.814
what items are the most popular 
and how many times that you were

02:17:13.815 --> 02:17:18.967
 purchased and it is broken down
 by currency type.  This uses 

02:17:18.968 --> 02:17:23.003
two types of currency, CRD which
 are earned and bucks which are

02:17:26.265 --> 02:17:29.998
 purchased.  It's important to 
understand what is being 

02:17:26.265 --> 02:17:28.906
purchased and what is being 
purchased with each type of 

02:17:28.907 --> 02:17:30.907
currency in order to fully 
understand our economy.

02:17:30.938 --> 02:17:37.038
So you can apply either bucks or
 CRED as a filter to your report

02:17:37.149 --> 02:17:41.356
 to the get a sense of what they
 are purchasings and now we are 

02:17:41.357 --> 02:17:43.935
getting somewhere because now we
 see what content is popular, 

02:17:43.936 --> 02:17:48.194
that gives us a sense as we 
continue to develop and 

02:17:48.195 --> 02:17:51.611
toiterate what new content we 
should be making, maybe we 

02:17:51.612 --> 02:17:54.098
should be exposing or promoting 
some of the conthat he went is 

02:17:54.099 --> 02:17:58.796
less popular that we expected to
 be more popular and so forth.

02:17:58.915 --> 02:18:03.596
Also in actuality, it's not 
one-size-fits-all.  Some users 

02:18:03.597 --> 02:18:06.324
graphitate towards certain types
 of content and others towards 

02:18:06.325 --> 02:18:09.508
other types.  So it's important 
you drill deeper to get business

02:18:09.786 --> 02:18:12.520
 insights here.  That is what 
the filter up here allows to you

02:18:13.473 --> 02:18:18.979
 do.  This global filter control
 is on all reports in Firebase 

02:18:18.980 --> 02:18:22.388
analytics and allows to you 
drill in and I filter by 

02:18:22.389 --> 02:18:25.438
different user properties and

02:18:28.613 --> 02:18:30.102
 audiences.  User properties are
 captured for you automatically 

02:18:30.103 --> 02:18:34.448
such as age, gender, device 
model, app version, and more.  

02:18:34.449 --> 02:18:37.437
In addition to ones that you can
 log yourself.  So if I want to 

02:18:37.438 --> 02:18:40.835
see what 18-24-year-olds are 
buying in my app, I can apply 

02:18:40.836 --> 02:18:46.938
that filter.  Compare it to the 
25-34-year-olds.  So, it's 

02:18:46.939 --> 02:18:50.733
really quick.  It updates fast 
so you can go deep and drill and

02:18:51.093 --> 02:18:55.669
 have hypotheses and try to 
discover new things about your 

02:18:55.670 --> 02:19:00.387
usage.
So, let's switch back to the 

02:19:00.388 --> 02:19:07.480
Slides now.  Now as valuable as 
all of this reporting is, some 

02:19:07.481 --> 02:19:12.472
of you might have custom needs 
that can't be served by 

02:19:12.473 --> 02:19:15.567
standardized reporting and every
 Firebase app can be linked to 

02:19:15.568 --> 02:19:19.014
big query which is Google's data
 Analytics data warehouse in the

02:19:19.245 --> 02:19:22.314
 cloud.  So you can perform 
custom analysis on it or join it

02:19:22.462 --> 02:19:25.795
 with external data or export to
 the to some external endpoint 

02:19:25.796 --> 02:19:28.342
of yours to do what you need 
with it.  So that flexibility 

02:19:28.343 --> 02:19:31.234
and power is there for you as 
well.

02:19:31.648 --> 02:19:34.703
So, I feel like we barely 
scratched the surface.  We 

02:19:34.704 --> 02:19:39.071
looked at two of the 7 tabs but 
Fontaine is here to tell you 

02:19:39.072 --> 02:19:43.874
more about how you can grow your
 app using Firebase Analytics.  

02:19:43.875 --> 02:19:45.875
Thank you.
[ Applause ]

02:19:49.901 --> 02:19:57.140
  &gt;&gt; FONTAINE: Thank you, Steve.
  So, while it is critical your 

02:19:57.141 --> 02:19:59.073
core app experience as a 
developer, once you have a 

02:19:59.074 --> 02:20:03.194
strong foundation, it's worse 
thinking about -- it's worth 

02:20:03.195 --> 02:20:05.508
thinking about driving 
engagement with the users.  And 

02:20:05.509 --> 02:20:10.388
that is why we built Firebase 
Analytics to be a growth engine 

02:20:10.389 --> 02:20:15.230
for your app.  Whether you you 
consider yourself a developer or

02:20:16.053 --> 02:20:17.898
 a marketer.
So we are creating opportunities

02:20:17.899 --> 02:20:23.670
 for you to boost engagement and
 grow usage with your apps.  

02:20:23.671 --> 02:20:28.123
Let's pick up a France world 
endless skater where Steve left 

02:20:28.124 --> 02:20:30.935
off and for the purpose of this 
presentation, you can go ahead 

02:20:30.936 --> 02:20:35.111
and think of Steve as the 
developer and me as the 

02:20:35.112 --> 02:20:37.163
marketer.
And while it is perfectly 

02:20:37.164 --> 02:20:40.613
reasonable for Steve as a 
developer to focus on growth for

02:20:41.587 --> 02:20:44.338
 his app, Firebase Analytics 
also works well for 

02:20:44.339 --> 02:20:47.046
organizations where there is a 
little bit more delineation 

02:20:47.047 --> 02:20:50.676
between roles.
So, Steve talked to us about how

02:20:51.349 --> 02:20:55.222
 developers can measure events. 
 But there is one type of event 

02:20:55.223 --> 02:20:58.443
that he conveniently didn't 
mention.  And those are 

02:20:58.444 --> 02:21:01.661
conversion events.  Or just 
conversions.

02:21:02.024 --> 02:21:05.287
Think of conversions as the key 
business drivers that you're 

02:21:05.288 --> 02:21:10.031
really trying to optimize your 
business around.  Optimize your 

02:21:10.032 --> 02:21:14.841
app around.  So, first opens.  
You can think of these like 

02:21:14.842 --> 02:21:18.630
installs.  Or in-app purchases. 
 These are obviously conversions

02:21:18.784 --> 02:21:21.090
 so we'll automatically enable 
those for you.

02:21:23.014 --> 02:21:25.748
But, different businesses have 
different types of conversions. 

02:21:25.867 --> 02:21:30.196
 And so you can come into 
Firebase Analytics and mark any 

02:21:30.197 --> 02:21:35.192
of your custom events to be 
conversions in our UI.  You can 

02:21:35.193 --> 02:21:39.041
do this without writing any new 
code just by coming over into 

02:21:39.042 --> 02:21:42.887
the events tab and on the far 
right column a section that says

02:21:43.244 --> 02:21:45.244
 enable conversion and you

02:21:47.932 --> 02:21:50.592
 can toggle it on for any event.
  Now, marking an event as a 

02:21:50.593 --> 02:21:53.189
conversion, this unlocks a 
couple of features for that 

02:21:53.190 --> 02:21:57.864
particular event.  For example, 
attribution.  So you can start 

02:21:57.865 --> 02:22:01.025
to understand which of your 
channels are driving the most of

02:22:01.224 --> 02:22:04.046
 those events for your 
conversions.

02:22:06.607 --> 02:22:10.434
So, Steve instrumented spend 
virtual currency a couple of 

02:22:10.435 --> 02:22:14.079
minutes ago.  I know that is a 
business driver so I'm going to 

02:22:14.080 --> 02:22:18.254
go ahead and market a conversion
 in the UI.

02:22:18.592 --> 02:22:22.746
And when I mark it as a 
conversion, it gets added to the

02:22:22.747 --> 02:22:24.747
 attribution section

02:22:28.709 --> 02:22:32.309
 of Firebase Analytics.
This is another tab that Steve 

02:22:28.709 --> 02:22:30.033
didn't get to cover.  
Attribution is really what I 

02:22:30.034 --> 02:22:32.279
consider to be the home base for
 the marketers that are going to

02:22:32.390 --> 02:22:36.235
 be using Firebase Analytics.  
Now, on Friday, we are going to 

02:22:36.236 --> 02:22:40.188
be diving a lot deeper into the 
atbution tab to understand how 

02:22:40.189 --> 02:22:45.405
you can do cross channel 
attribution.  So I'm not going 

02:22:45.406 --> 02:22:47.550
to go too deep on it now.  The 
one thing I want to highlight is

02:22:47.954 --> 02:22:52.337
 our lifetime value reporting.  
So our lifetime value reporting 

02:22:52.338 --> 02:22:57.195
or LTV reporting this is the 
type of thing we are trying to 

02:22:57.196 --> 02:23:01.244
optimized for with convergence. 
 So I want to highlight this and

02:23:01.245 --> 02:23:05.898
 it is available on our 
dashboard and available here in 

02:23:05.899 --> 02:23:09.497
the attribution section.  So, 
let's talk about how we can 

02:23:09.498 --> 02:23:13.300
actually Drive conversions.  
Rather than focus on how we can 

02:23:13.301 --> 02:23:17.457
do that with Google's ad 
products which we can do, I want

02:23:17.567 --> 02:23:22.906
 to talk about how to re-engage 
our existing users by pairing 

02:23:22.907 --> 02:23:28.696
Firebase Analytics with 
Notifications.

02:23:28.697 --> 02:23:33.096
So Firebase Analytics and 
Notifications.  Notifications 

02:23:33.097 --> 02:23:37.912
are really powerful way of 
bringing your users back into 

02:23:37.913 --> 02:23:41.902
the app to Drive a particular 
type of engagement.  This is 

02:23:41.903 --> 02:23:46.283
certainly true with transworld 
endless skater.

02:23:46.902 --> 02:23:51.146
Firebase makes it incredibly 
easy to send Notifications on 

02:23:51.147 --> 02:23:56.407
both Android and iOS.  And like 
Firebase Analytics, it is 

02:23:56.408 --> 02:24:00.776
completely free and unlimited.  
And while Steve didn't show this

02:24:03.749 --> 02:24:05.573
 earlier, it only took him a 
couple of lines of code and a 

02:24:05.574 --> 02:24:08.326
couple of minutes to actually 
instrument Firebase 

02:24:08.327 --> 02:24:12.590
Notifications in his app.  And 
just like that, we are ready to 

02:24:12.591 --> 02:24:16.286
send Notifications.  But let's 
pause for a minute and think 

02:24:16.287 --> 02:24:20.410
about what that actually means 
in this context.  With Firebase 

02:24:20.411 --> 02:24:24.560
we make it really easy for you 
to engage in a conversation 

02:24:24.561 --> 02:24:30.978
directly with your users.  
That's really powerful.  But, 

02:24:30.979 --> 02:24:35.736
insert obligatoriy comic book 
reference here, with great power

02:24:35.924 --> 02:24:39.601
 comes great responsibility.  
So, we all know examples of apps

02:24:39.755 --> 02:24:44.488
 who have really just gone off 
the rails when it comes to push 

02:24:44.489 --> 02:24:47.471
Notifications.
Maybe they are sending them way 

02:24:47.472 --> 02:24:52.472
too frequently and it starts to 
feel spammy or I can think of 

02:24:52.473 --> 02:24:55.495
countless apps that just send a 
one-size-fits-all notification 

02:24:55.496 --> 02:25:00.702
that really doesn't apply to me 
personally.  So when you're a 

02:25:00.703 --> 02:25:04.579
developer, and you're using 
Notifications, it's important 

02:25:04.580 --> 02:25:09.437
that you strike the right 
balance between relevance and 

02:25:09.438 --> 02:25:13.059
frequency.  And this is exactly 
what you can do with Firebase 

02:25:13.060 --> 02:25:19.175
Analytics and Notifications 
together.  Let's look at how to 

02:25:19.176 --> 02:25:23.776
do that in the context of 
transworld endless skater.  So 

02:25:23.777 --> 02:25:27.037
first, we are going to want to 
use those audiences that Steve 

02:25:27.038 --> 02:25:31.052
highlighted to actually craft a 
group of our users.  So we can 

02:25:31.053 --> 02:25:34.119
define certain criteria and 
we'll be walking through this on

02:25:34.235 --> 02:25:38.992
 a demo in a minute.  The second
 is then going over to 

02:25:38.993 --> 02:25:42.050
Notifications where we can craft
 the content of the message, 

02:25:42.051 --> 02:25:45.120
figure out who we are targeting 
and what the copy will be and 

02:25:45.121 --> 02:25:48.286
how often we are going to be 
sending the message.

02:25:48.737 --> 02:25:53.588
And then together, this allows 
you to tailor your messages 

02:25:53.589 --> 02:26:02.940
towards each of those Groups.
So, back to transworld endless 

02:26:02.941 --> 02:26:07.099
skater.  Steve had instrumented 
that spend virtual currency 

02:26:07.100 --> 02:26:10.967
event earlier.  And the great 
thing about it accident we are 

02:26:10.968 --> 02:26:16.948
not just capturing the fact that
 the event happened, we are 

02:26:16.949 --> 02:26:18.949
capturing metadata as well so

02:26:21.007 --> 02:26:23.007
 I can see what spending

02:26:28.921 --> 02:26:33.121
 their virtual currency on.  It 
is important because I want to 

02:26:28.921 --> 02:26:31.153
send a push notification to 
users who would actually be 

02:26:31.154 --> 02:26:34.923
inclined or interested in the 
content of this message and 

02:26:34.924 --> 02:26:38.647
specifically, I'm interested in 
adding a new level.  One of the 

02:26:38.648 --> 02:26:44.135
things that you can spend your 
virtual occurrenceo in the game 

02:26:44.136 --> 02:26:49.199
transworld endless skater is to 
unlock new levels.  So when I'm 

02:26:49.200 --> 02:26:52.632
sending my push notification, I 
want to make sure it's targeted 

02:26:52.633 --> 02:26:55.630
at the right group.  My new 
level will be called rooftops 

02:26:55.631 --> 02:26:58.284
and I'll be sending a 
notification to a very specific 

02:26:58.285 --> 02:27:02.175
set of users to actually cover 
this.  So, I'm going to go ahead

02:27:02.413 --> 02:27:05.855
 and dive in at this point.

02:27:10.824 --> 02:27:13.901
Here we are on the event 
section.  Now I'm going to move 

02:27:13.902 --> 02:27:15.902
over to the

02:27:19.026 --> 02:27:22.098
 audiences section.  So now here
 I'm on the audience section.  

02:27:22.099 --> 02:27:26.736
You can think of audiences like 
the way to slice and dice users 

02:27:26.737 --> 02:27:30.108
to get certain segments of users
 you want to focus on or 

02:27:30.109 --> 02:27:33.382
analyze.  There is a couple of 
different ways to use audiences.

02:27:33.482 --> 02:27:38.580
  One is to do reporting.  So, I
 can see here a list of all the 

02:27:38.581 --> 02:27:41.227
audience that is I have been 
creating over the last few weeks

02:27:41.492 --> 02:27:45.003
 and if I wanted to do reporting
 and understand how they are 

02:27:45.004 --> 02:27:48.907
behaving, I can click on them to
 see a report.  So here I'm 

02:27:48.908 --> 02:27:54.189
going to click on males 25-34.  
And I can immediately see a 

02:27:54.190 --> 02:27:59.895
report on them.  How many users 
are in that report, what is 

02:27:59.896 --> 02:28:02.234
their demographics?  Here I can 
see

02:28:06.540 --> 02:28:10.406
 their interests like Steve 
highlighted earlier.  So this 

02:28:06.540 --> 02:28:09.158
particular segment of user is 
interested in online video and 

02:28:09.159 --> 02:28:11.654
online games, which is 
reasonable considering this 

02:28:11.655 --> 02:28:16.977
particular filter I added.  And 
another way to use audiences is 

02:28:16.978 --> 02:28:22.044
to actually just apply it as a 
filter.  Steve highlighted this 

02:28:22.045 --> 02:28:26.019
earlier but can be used across 
the Firebase Analytics product. 

02:28:26.134 --> 02:28:28.951
 And then the final way that I 
want to highlight that you can 

02:28:28.952 --> 02:28:33.997
use audiences for is for highly 
contextural targeting 

02:28:33.998 --> 02:28:37.251
information.  You can target 
users across other Firebase 

02:28:37.252 --> 02:28:40.792
products but you can also target
 users across other Google 

02:28:40.793 --> 02:28:43.907
products.  So we are really 
trying to bring all of these 

02:28:43.908 --> 02:28:46.315
products together with a single 
language in fair base

02:28:50.202 --> 02:28:57.708
 audiences.  So, coming back, I 
said I wanted to add a new level

02:28:58.273 --> 02:29:02.293
 and sent push notification to 
the users to encourage them to 

02:29:02.294 --> 02:29:07.757
spend their virtual occurrence 
tow unlock this level.  So, I 

02:29:07.758 --> 02:29:11.527
need to be thoughtful about who 
my audience is going to be.  So,

02:29:12.316 --> 02:29:16.268
 if I think back, what is a 
reasonable behavior that might 

02:29:16.269 --> 02:29:18.779
in Kate that users could be 
interested in unlocking levels 

02:29:18.780 --> 02:29:23.433
in the future?  This isn't a 
trick question.  It is pretty 

02:29:23.434 --> 02:29:27.058
obvious under our nose.  If 
users spent to unlock levels in 

02:29:27.059 --> 02:29:29.891
the past, it is probably pretty 
reasonable they would be willing

02:29:30.077 --> 02:29:32.976
 to do that again.  So that is 
going to be my target audience 

02:29:32.977 --> 02:29:37.264
that I'm going to create right 
now.  So if I come over into new

02:29:39.376 --> 02:29:41.290
 audience, pops up audience 
builder where I can construct 

02:29:41.291 --> 02:29:46.865
the conditions of my audience.  
Now my audience name, I'm going 

02:29:46.866 --> 02:29:52.842
to say users who purchase level 
and then my audience 

02:29:52.843 --> 02:29:57.514
descriptions all say spent 
virtual currency on a level.  

02:29:57.515 --> 02:30:01.258
Now, I'm actually going to 
select the specific criteria for

02:30:03.181 --> 02:30:05.770
 this.  Coming into the 
selector, I can select either an

02:30:06.182 --> 02:30:10.025
 event or user property.  You 
seen a bunch of user properties 

02:30:10.026 --> 02:30:13.372
earlier and for my event we 
agreed I'm going to select spend

02:30:13.678 --> 02:30:18.219
 virtual currency.  And then, I 
don't want to just target 

02:30:18.220 --> 02:30:21.467
anybody who is ever spent 
virtual currency.  I really want

02:30:21.586 --> 02:30:24.495
 to hone it down on that 
specific set of users that spent

02:30:24.973 --> 02:30:28.094
 virtual currency to unlock a 
level.  And this is again where 

02:30:28.095 --> 02:30:32.001
those parameters come in right? 
 Steve had added those three 

02:30:32.002 --> 02:30:37.740
extra calls, those three extra 
parameters in the actual event 

02:30:37.741 --> 02:30:41.395
logging and when I add a 
parameter, you can see here are 

02:30:41.396 --> 02:30:45.541
those three parameter names we 
saw Steve instrument earlier.  

02:30:45.542 --> 02:30:49.968
I'm going select item name and 
my operator, I'm going to leave 

02:30:49.969 --> 02:30:54.398
as, contains.  And I'll go ahead
 and say level.  So I'm saying 

02:30:54.399 --> 02:30:59.302
narrowing it down to anyone who 
has spent on an item name that 

02:30:59.303 --> 02:31:02.214
contains level.
So at this intpo, I can hit 

02:31:02.215 --> 02:31:05.418
create.  I created this audience
 earlier.  So I'm going to go 

02:31:05.419 --> 02:31:10.986
ahead and use the audience I 
created earlier this week.  So, 

02:31:10.987 --> 02:31:12.987
purchased level two.  I'm 
highlighting it right now.  This

02:31:13.054 --> 02:31:17.607
 is the audience I'm targeting. 
 So creating my audience that 

02:31:17.608 --> 02:31:21.740
was the first stage.  The next 
stage is actually going into 

02:31:21.741 --> 02:31:27.285
create the notification.  So, 
coming into Notifications, 

02:31:27.286 --> 02:31:36.611
create a new message, and let's 
see, get ready for some fun.  

02:31:36.612 --> 02:31:43.792
Unlock level 3 now.
Message label, I'll call it 

02:31:43.793 --> 02:31:46.153
rooftops, since rooftops is the 
name of this level.  And then in

02:31:46.288 --> 02:31:50.844
 terms of a delivery date, I'm 
launching this level tomorrow 

02:31:50.845 --> 02:31:55.474
evening so I'm going to send 
this push notification Friday.  

02:31:55.475 --> 02:32:00.748
So I'm scheduling it.  I can go 
ahead and select Friday the 20th

02:32:00.977 --> 02:32:04.346
 and noon seems like a 
reasonable time.  It might be 

02:32:04.347 --> 02:32:10.270
their lunch hour and will be 
willing to play games and I want

02:32:10.484 --> 02:32:15.529
 to leave it on recipient time 
zones.  Now I get to the 

02:32:15.530 --> 02:32:19.867
targeting.  I want this to be on
 my iOS app and I'll add one 

02:32:19.868 --> 02:32:23.472
more criteria.  Here I'm 
selecting audience.  I can see 

02:32:23.473 --> 02:32:27.400
this list of audiences that we 
just saw over in Analytics 

02:32:27.401 --> 02:32:31.894
because they are the same.  So, 
of all these audiences, let's 

02:32:31.895 --> 02:32:35.567
see, purchase level two at the 
bottom here.  I can see this 

02:32:35.568 --> 02:32:40.226
particular audience has between 
1-10,000 users.  That seems 

02:32:40.227 --> 02:32:44.889
right.  And I can go ahead and 
add that target.  Great.  A 

02:32:44.890 --> 02:32:47.432
couple other things.  Let's see,
 conversion events.  We talked 

02:32:47.433 --> 02:32:49.433
about this

02:32:51.247 --> 02:32:55.236
 earlier.  This particular wing 
set allowing me to construct a 

02:32:55.237 --> 02:32:58.418
funnel in the different stages 
of notification process.  So the

02:32:58.712 --> 02:33:01.086
 first part is the whether or 
not the Notifications were sent 

02:33:01.087 --> 02:33:04.913
and how many were opened and 
then I get to define what that 

02:33:04.914 --> 02:33:07.770
final action is that the 
conversion should be.  So, we 

02:33:07.771 --> 02:33:10.507
have already been talking about 
this but of course it will be 

02:33:10.508 --> 02:33:13.107
spend virtual currency since 
that is the specific action I'm 

02:33:13.108 --> 02:33:18.240
trying to Drive.
Excuse me then, I don't have any

02:33:19.728 --> 02:33:25.848
 advanced options -- and then --
 save this as a draft and let's 

02:33:25.849 --> 02:33:28.368
see, all right, I'm going to go 
ahead and schedule a message.  

02:33:28.369 --> 02:33:32.732
So I can see here it's going to 
get sent on Friday.  It's 

02:33:32.733 --> 02:33:40.475
targeting that user segment.  So
 scheduling.  Great.  So, 

02:33:40.476 --> 02:33:43.209
message goes out.  How do I know
 if anyone actually got the 

02:33:43.210 --> 02:33:46.710
message?  Well, Analytics 
naturally can help here as well.

02:33:46.822 --> 02:33:53.230
  So if I come back into my 
event section, see all my 

02:33:53.231 --> 02:33:58.511
events, I can see here a couple 
of events, notification open.  

02:33:58.512 --> 02:34:01.357
Those are among the automatic 
events that Steve highlighted 

02:34:01.358 --> 02:34:03.908
earlier.  I'm going to click 
into notification open.  So this

02:34:04.050 --> 02:34:08.547
 is where I can see exactly how 
many users actually opened my 

02:34:08.548 --> 02:34:12.613
Notifications.  You can see I 
sent a notification last week.  

02:34:12.614 --> 02:34:16.869
You can see the spike here as 
well as the residual opens that 

02:34:16.870 --> 02:34:19.580
happened after that.  So now I'm
 looking at this

02:34:22.730 --> 02:34:23.739
 particular event.  What is 
interesting is over here, I can 

02:34:23.740 --> 02:34:27.576
see the relative campaign 
side-by-side one another.  So if

02:34:28.101 --> 02:34:34.341
 I want to click on rooftops 
upsell, the message I sent, it 

02:34:34.342 --> 02:34:38.445
immediately applies this chip at
 the top and now all of my 

02:34:38.446 --> 02:34:41.388
dashboard is being narrowed in 
and filtered down to this 

02:34:41.389 --> 02:34:45.168
specific group of users.  So 
it's cool to be able to say all 

02:34:45.169 --> 02:34:48.283
right, let me see for this 
particular event, for this 

02:34:48.284 --> 02:34:52.222
particular notification, how 
effective was it at driving 

02:34:52.223 --> 02:34:57.030
engagement in my app?  So, so 
far I have been talking a lot 

02:34:57.031 --> 02:35:00.039
about notification analytics and
 how they can be used together. 

02:35:00.205 --> 02:35:03.246
 A lot of cool places you can go
 where that.  This is really 

02:35:03.247 --> 02:35:06.020
just the beginning.  But I'm 
going to step back for a minute 

02:35:06.021 --> 02:35:09.770
and talk about a couple other 
ways you can use the other 

02:35:09.771 --> 02:35:16.305
Firebase growth tools for your 
app.  So, let's move back to the

02:35:18.403 --> 02:35:22.636
 deck.  Sky scanner, a leading 
global travel

02:35:25.739 --> 02:35:27.320
 search business with over 50 
million monthly users, put 

02:35:27.321 --> 02:35:31.487
Firebase in their app.  And 
within their app, you can do 

02:35:31.488 --> 02:35:34.882
things like book travel, compare
 prices for things like flights 

02:35:34.883 --> 02:35:40.950
or hotels or car rentals.  And 
they decided to use Firebase 

02:35:40.951 --> 02:35:45.982
Invites to augment their growth 
strategy.  They did this again 

02:35:45.983 --> 02:35:50.266
in a couple of different steps. 
 The first was naturally 

02:35:50.267 --> 02:35:54.840
identifying their most valuable 
users with Firebase audiences.  

02:35:54.841 --> 02:35:59.358
For them, that was the users who
 actually made a booking through

02:35:59.468 --> 02:36:02.502
 the app before.
The second step was realizing 

02:36:02.503 --> 02:36:06.713
that those users were their 
target group to actually target 

02:36:06.714 --> 02:36:12.034
the Firebase Invites with.  And 
then finally, they used Firebase

02:36:12.442 --> 02:36:16.663
 Invites to allow those users to
 share the app with their 

02:36:16.664 --> 02:36:22.586
frequently contacted folks using
 SMS or e-mail.

02:36:23.122 --> 02:36:26.978
So they did this in a couple of 
different ways.  First of all, 

02:36:26.979 --> 02:36:31.425
they asked their users to rate 
the app and if the user rate 

02:36:31.426 --> 02:36:34.970
today highly, they gave them the
 opportunity to share the app 

02:36:34.971 --> 02:36:39.937
via Firebase Invites.  The 
recipients of these invites 

02:36:39.938 --> 02:36:43.685
didn't just receive a link to 
the app, but when they actually 

02:36:43.686 --> 02:36:47.771
went on to download it and then 
later open it, they arrived at a

02:36:48.224 --> 02:36:51.687
 specific screen in the app.  
They were Deeplinked in after 

02:36:51.688 --> 02:36:57.146
install.  So it was really able 
to close the loop with the full 

02:36:57.147 --> 02:37:01.191
invitation experience.
And so, users could seamlessly 

02:37:01.192 --> 02:37:06.221
share the app with their friends
 and their most frequently 

02:37:06.222 --> 02:37:12.154
contacted peers.  And within 
just two weeks, sky scanner saw 

02:37:12.155 --> 02:37:14.315
hundreds of personalized 
invites.  And we already see 

02:37:14.316 --> 02:37:19.134
them getting results.  They are 
seeing strong adoption of the 

02:37:19.135 --> 02:37:23.095
app from the users who are 
coming from this channel 

02:37:23.096 --> 02:37:26.333
specifically.  So, enough about 
growth.  I'm going to hand it 

02:37:26.334 --> 02:37:29.691
back to Russ to talk about how 
to actually make money with 

02:37:29.692 --> 02:37:31.692
Firebase.
[ Applause ]

02:37:34.794 --> 02:37:38.750
  &gt;&gt; RUSS: Thank you Fontaine.  
And Thank you, Steve for showing

02:37:38.857 --> 02:37:42.909
 us so much of what you can do 
with Firebase and Firebase 

02:37:42.910 --> 02:37:45.385
Analytics.  So I know I speak 
for the three of us when I say 

02:37:45.386 --> 02:37:48.590
one of the things that was the 
most fun about building Firebase

02:37:48.752 --> 02:37:52.097
 was with collaborating with so 
many expert teams across Google,

02:37:52.263 --> 02:37:56.323
 all focused on the needs of app
 developers.  But when it comes 

02:37:56.324 --> 02:38:00.703
to making money with apps, at 
Google, the team that you talk 

02:38:00.704 --> 02:38:05.344
to is AdMob.  So AdMob is 
synonymous with in-app 

02:38:05.345 --> 02:38:12.222
advertising and for good reason.
  Because in-app ads are the 

02:38:12.223 --> 02:38:15.262
Number 1 montization mechanism 
for apps.  AdMob has over a 

02:38:15.263 --> 02:38:19.704
million apps monetizing with 
AdMob today.  It's pretty 

02:38:19.705 --> 02:38:22.294
impressive.
But if you spend time with the 

02:38:22.295 --> 02:38:25.058
AdMob team and if you talk to 
experienced publishers, what you

02:38:25.523 --> 02:38:31.155
 learn is that one-size-fits-all
 monnization is a thing of the 

02:38:31.156 --> 02:38:33.591
past.  Different types of users 
monetize differently which means

02:38:33.696 --> 02:38:37.452
 the more you understand about 
users and users behavior, the 

02:38:37.453 --> 02:38:41.185
smarter you can be about making 
money with your app.  And by 

02:38:41.186 --> 02:38:45.570
linking your Firebase app to 
AdMob, you're paving the way to 

02:38:45.571 --> 02:38:49.315
using both products together to 
maximize your earning potential.

02:38:49.415 --> 02:38:54.043
  So we are going to return to 
scape for just one more minute 

02:38:54.044 --> 02:38:58.345
and what we seen is that Steve 
showed us that skate monetizing 

02:38:58.346 --> 02:39:01.165
using in-app puncheses but a lot
 of industry data that says that

02:39:02.211 --> 02:39:06.809
 only between one-5% of users 
actually ever make an in-app 

02:39:06.810 --> 02:39:09.921
purchase.
That means that 95% of these 

02:39:09.922 --> 02:39:14.335
users are going unmonetized.  If
 this holds true for skated, 

02:39:14.336 --> 02:39:16.378
that could mean there is a 
massive opportunity just waiting

02:39:16.598 --> 02:39:19.922
 for them.
Fortunately, since skate uses 

02:39:19.923 --> 02:39:22.623
Firebase Analytics, we don't 
have to rely on a rule of thumb.

02:39:22.743 --> 02:39:27.875
  We can just look's data.  And 
so here I'm back on the Firebase

02:39:28.368 --> 02:39:32.308
 Analytics dashboard and I 
highlighted the monthly active 

02:39:32.309 --> 02:39:38.728
users and what I can do is 
basically apply a filter here.  

02:39:38.729 --> 02:39:41.687
So, Steve showed that in-app 
purchase is one of those events 

02:39:41.688 --> 02:39:46.105
that is logged automatically on 
both iOS and Android.  Fontaine 

02:39:46.106 --> 02:39:49.805
showed how easy it is to use 
events to build an audience but 

02:39:49.806 --> 02:39:53.955
since purposers are so important
 to so many developers -- 

02:39:53.956 --> 02:39:57.651
purchasers -- Firebase creates a
 purchaser's audience for you.  

02:39:57.652 --> 02:40:03.297
When I apply that as a filter, 
sure enough, the number of 

02:40:03.298 --> 02:40:05.602
purchasers actually goes way 
down.  And that means that there

02:40:05.713 --> 02:40:12.023
 is a massive opportunity to 
money ties.  So Firebase can 

02:40:12.024 --> 02:40:16.905
help us introduce a targeted 
monnization experience using 

02:40:16.906 --> 02:40:20.080
Remote Config and tap that 
opportunity space.  Particularly

02:40:20.196 --> 02:40:24.103
 when you bring Firebase 
Analytics and Firebase Remote 

02:40:24.104 --> 02:40:30.296
Config together.  Just a quick 
example.  So, we saw that skate 

02:40:30.297 --> 02:40:35.214
uses in-app purchases and now we
 can use a Remote Config to 

02:40:35.215 --> 02:40:39.236
control and set aside users to 
make sure that purchasers never 

02:40:39.237 --> 02:40:44.574
see ads.  Next, Steve was called
 to developer earlier and I'll 

02:40:44.575 --> 02:40:50.677
stick with it.  Steve could ad 
mob to the add by using Google 

02:40:50.678 --> 02:40:56.208
Mobile Ads SDK.  And he built an
 add placement, say a banner.  

02:40:56.209 --> 02:41:01.100
If he wanted to, he could log 
another custom event, maybe add 

02:41:01.101 --> 02:41:04.451
clicks and this then wire up 
that add experience to be 

02:41:04.452 --> 02:41:08.410
controlled with a Remote Config.
  So coming back, he has already

02:41:09.366 --> 02:41:14.531
 set it up so his spenders will 
never see ads, now Steve just 

02:41:14.532 --> 02:41:16.383
needs to wire up the other 
configgation.  Target the group 

02:41:16.384 --> 02:41:19.113
of users that aren't his 
purchasers and now they are 

02:41:19.114 --> 02:41:21.942
experiencing ads.  And if that 
feels a little aggressive, maybe

02:41:21.943 --> 02:41:26.641
 you don't want to turn ads on 
all at once, control that by 

02:41:26.642 --> 02:41:31.918
adding a percentage.  Just like 
that, we have multiple targeted 

02:41:31.919 --> 02:41:34.954
monat thization experiences 
happening at the same time in 

02:41:34.955 --> 02:41:38.180
skate.  We hope you're excited. 
 So Firebase Analytics is a 

02:41:38.181 --> 02:41:41.186
really, really exciting thing 
for us.  We think it will be 

02:41:41.187 --> 02:41:44.453
very powerful for developers.  I
 know we have covered a ton of 

02:41:44.454 --> 02:41:47.610
ground and we are just about out
 of time so we want to live you 

02:41:47.611 --> 02:41:49.973
with a couple of points in 
summary.

02:41:51.088 --> 02:41:56.839
Firebase analyt 6 free and 
unlimited on iOS and Android.  

02:41:56.840 --> 02:42:01.358
It works out of the bock with 
automatic measurement.  It 

02:42:01.359 --> 02:42:07.481
seamlessly integrated across 
Google.  All to help you 

02:42:07.482 --> 02:42:09.069
develop, grow and earn.  So, a 
couple of housekeeping items.  

02:42:09.070 --> 02:42:13.974
We have got the sand box, office
 hours, we have another Firebase

02:42:14.947 --> 02:42:19.205
 Analytics session that Fontaine
 mentioned on growth scheduled 

02:42:19.206 --> 02:42:21.919
for Friday.  And if you're 
looking for specific next steps,

02:42:22.182 --> 02:42:24.987
 we would love for you to sign 
up for Firebase right now and 

02:42:24.988 --> 02:42:28.389
start using Firebase Analytics. 
 There is a lot of great help 

02:42:28.390 --> 02:42:31.177
center content and we are ready 
to help you in the sandboxes.  

02:42:31.178 --> 02:42:34.882
On behalf of Steve and Fontaine,
 thank you for coming out and 

02:42:34.883 --> 02:42:37.224
enjoy the rest of I/O!
[ Applause ]

03:22:45.239 --> 03:22:46.643
 use er    
user.  The system basically 

03:22:46.644 --> 03:22:51.037
listens to people and it can to 
the app developer, it 

03:22:51.038 --> 03:22:52.721
can listen to the use er on what

03:22:52.722 --> 03:22:58.821
to do.  The problem with find 
right is if we allow both the 

03:22:58.822 --> 03:23:03.691
use er and the X developer to 
say, 

03:23:03.692 --> 03:23:07.533
go into multi-window imposed, 
the experience becomes confusing

03:23:10.150 --> 03:23:13.167
use er doesn't know what 
multi-window mode is.  So for 

03:23:13.589 --> 03:23:20.983
now, we are going with entry 
mode to window mode is an use 

03:23:22.464 --> 03:23:24.464
er-     
user-initiate ed action.  Most 

03:23:24.741 --> 03:23:26.649
of 
the feedback we've been getting 

03:23:26.650 --> 03:23:32.002
so far is that, yes, this is a 
user initiate ed action.  You 

03:23:32.003 --> 03:23:34.038
put 
it into that, they don't know 

03:23:34.249 --> 03:23:37.172
what it is, they're going to get

03:23:37.173 --> 03:23:38.130
confused.
   &gt;&gt; Thank you.

03:23:38.131 --> 03:23:42.567
   &gt;&gt; All right, so my question 
is more like a testing side.  So

03:23:44.351 --> 03:23:47.466
have the top activity that's 
live and the bottom one, but say

03:23:50.981 --> 03:23:54.066
is going to respond correctly, 
you go to the unpause ed one but

03:23:56.803 --> 03:23:58.098
doesn't have the concept anymore

03:23:58.099 --> 03:23:59.521
because it's wrapped around your

03:23:59.522 --> 03:24:03.736
main activity when you put the 
other activity into multi-user 

03:24:03.844 --> 03:24:06.890
mode as well.
   &gt;&gt; WALE OGUNWALE: Okay.  So 

03:24:06.891 --> 03:24:11.944
if I understand your use case 
correctly, you have two 

03:24:11.945 --> 03:24:15.078
activity        
activities running in the same 

03:24:11.945 --> 03:24:14.655
process and you're testing the 
one above and your test is 

03:24:14.656 --> 03:24:18.420
written in such a way where it 
needs to continuously get focus,

03:24:23.344 --> 03:24:24.305
one below.
   &gt;&gt; Yes.

03:24:24.306 --> 03:24:27.410
   &gt;&gt; WALE OGUNWALE: So I guess 
my question first is how is 

03:24:27.411 --> 03:24:31.343
focus switched?
   &gt;&gt; Say you're simulate ing 

03:24:31.676 --> 03:24:33.970
the 
use er, they tap that one to 

03:24:33.971 --> 03:24:36.924
make 
sure it's working, then you want

03:24:37.105 --> 03:24:42.670
  to the other and make 
sure your app is working, but if

03:24:44.405 --> 03:24:47.409
actual test will die.
   &gt;&gt; WALE OGUNWALE: I don't see

03:24:50.046 --> 03:24:55.223
would your test die?
   &gt;&gt; Because it uses the 

03:24:55.224 --> 03:25:00.894
activity complex saying, oh,  
longer using the app.

03:25:04.422 --> 03:25:04.487
&gt;&gt; WALE OGUNWALE: What 
testing are you using?

03:25:04.488 --> 03:25:06.488
   &gt;&gt; 

03:25:08.492 --> 03:25:11.526
Because if you swap --
   &gt;&gt; WALE OGUNWALE: I'm not 

03:25:11.527 --> 03:25:16.143
sure what's going on.  We do 
have office hours after this.  

03:25:16.144 --> 03:25:19.478
It's either something where the 
testing infrastructure, or I'd 

03:25:19.479 --> 03:25:27.086
like to understand how your test
 structure ed a little better.  

03:25:27.087 --> 03:25:29.087
I guess --
   &gt;&gt; 

03:25:32.348 --> 03:25:34.748
I'm just worried.  I 
haven't tested.

03:25:32.348 --> 03:25:34.481
   &gt;&gt; WALE OGUNWALE: I would say

03:25:32.348 --> 03:25:36.604
go test it but I've tested tons 
of it and I know it works.  But 

03:25:36.605 --> 03:25:38.327
if you do find something, please

03:25:38.328 --> 03:25:41.370
filing that to us.  We have you 
covered.

03:25:41.371 --> 03:25:43.297
   &gt;&gt; Thanks.
   &gt;&gt; WALE OGUNWALE: M-hmm.

03:25:43.298 --> 03:25:45.298
   &gt;&gt; I got here a little late 
but I don't know if you address

03:25:50.747 --> 03:25:52.650
two instances 
of the same activity, one in 

03:25:52.651 --> 03:25:58.200
each of the two screens, so I 
could have two YouTube apps 

03:25:58.201 --> 03:26:00.537
running at the same time and 
watch two videos, for example.

03:26:00.538 --> 03:26:03.251
   &gt;&gt; WALE OGUNWALE: So I think 
you have two questions in there.

03:26:05.903 --> 03:26:09.553
not misunderstanding, is if    
if you 

03:26:09.554 --> 03:26:13.737
can initiate multi-window mode 
with two activity ies without 

03:26:13.738 --> 03:26:15.382
initiate ing that, yes, that was

03:26:15.383 --> 03:26:18.904
covered earlier and the answer 
is no.  Mainly for use er 

03:26:18.905 --> 03:26:22.088
experience, we don't want the 
use er to be in a mode that they

03:26:25.269 --> 03:26:27.054
It's something we're starting in

03:26:27.055 --> 03:26:28.281
the ecosystem and as we start it

03:26:28.282 --> 03:26:31.697
and the ecosystem becomes 
mature      

03:26:31.698 --> 03:26:33.289
mature, we'll see how it will go

03:26:33.290 --> 03:26:36.590
go, but right now the app and 
multi-window mode is conflicting

03:26:37.480 --> 03:26:38.629
     Your second question is can

03:26:38.630 --> 03:26:42.300
you have the same activity 
instance in both windows.  

03:26:42.301 --> 03:26:46.586
Answered that one earlier, the  
yes.  You can have 

03:26:47.051 --> 03:26:49.776
multi-window activity ies, 
instead one being in the 

03:26:49.966 --> 03:26:54.153
background 
you just have both of them 

03:26:54.154 --> 03:26:56.849
visible at the same time as long
 your app is appropriate in 

03:26:56.850 --> 03:26:58.255
that mode.
   &gt;&gt; Thank you.

03:26:58.256 --> 03:27:02.371
   &gt;&gt; What if we have a window 
such as the  right here?

03:27:02.372 --> 03:27:05.455
   &gt;&gt; WALE OGUNWALE: I'm sorry.
   &gt;&gt; What if we have an 

03:27:05.456 --> 03:27:08.734
external monitor for secondary 
read?

03:27:08.735 --> 03:27:12.802
   &gt;&gt; WALE OGUNWALE: External 
monitor?  So, currently the 

03:27:12.803 --> 03:27:14.803
support 

03:27:17.573 --> 03:27:21.531
we have for secondary 
displays, right, is not 

03:27:22.188 --> 03:27:23.585
changing        
changing.  One example would be 

03:27:23.586 --> 03:27:27.548
presentation mode.  Right?  You 
can still only have one activity

03:27:37.155 --> 03:27:38.814
 your 
presentation is in secondary 

03:27:38.815 --> 03:27:44.145
activity, on the second window 
display you're only going to see

03:27:45.559 --> 03:27:47.398
Which makes sense, it's the same

03:27:47.399 --> 03:27:50.504
way if you're on your desktop 
and presenting            

03:27:50.505 --> 03:27:52.660
presenting some apps you 
don't want everybody seeing your

03:27:55.105 --> 03:27:57.989
screen casting, which is 
everybody see my desktop, you 

03:27:57.990 --> 03:28:01.925
see everything, right?  On top 
of that, we've not added any 

03:28:01.926 --> 03:28:05.010
additional functionality.  We 
just make sure we did not break 

03:28:05.360 --> 03:28:07.360
existing ones.

03:28:14.626 --> 03:28:19.052
   &gt;&gt; Hey, how's it going?  Good

03:28:19.053 --> 03:28:20.289
Good.
   &gt;&gt; I have questions.

03:28:20.290 --> 03:28:24.030
   &gt;&gt; WALE OGUNWALE: You have   
Like for office hour    

03:28:24.031 --> 03:28:25.570
hour?  Yeah, we have office hou
r    

03:28:25.571 --> 03:28:29.165
hour.  By the way, me and my 
team are going to be at the  

03:28:29.166 --> 03:28:32.701
today at 5:00 and 
tomorrow at 11 and Friday at 11,

03:28:40.696 --> 03:28:44.556
any additional questions you 
might have.  Yeah. especially 

03:28:44.899 --> 03:28:51.252
around Emojis and.  (laughter)  
 If there are no 

03:28:51.253 --> 03:28:53.285
additional questions, I guess we

03:28:53.286 --> 03:28:59.049
can wrap it up.  Thank you for 
coming and enjoy the rest of I/O

03:29:00.348 --> 03:29:04.598
     (Presentation ended at 6:32

03:29:04.599 --> 03:29:08.152
6:32 p.m. CST)

03:29:08.240 --> 03:29:10.373
This text is being provided in a

03:29:08.240 --> 03:29:12.173
realtime format. Communication 
Access Realtime Translation 

03:29:08.240 --> 03:29:11.973
(CART) is provided in order to 
facilitate communication 

03:29:08.240 --> 03:29:12.373
accessibility and may not be a 
totally verbatim record of the 

03:29:08.240 --> 03:29:09.573
proceedings.
********

03:35:34.795 --> 03:35:44.390
Android Battery and Memory 
Optimizations

03:35:48.418 --> 03:35:53.601
     May 18, 2016
     7:00 p.m. CST

03:35:53.680 --> 03:35:57.146
          Caption First, Inc.
          P.O. Box 3066

03:35:53.680 --> 03:35:53.816
          Monument, CO 80132
          1 877 825 5234

03:35:53.817 --> 03:35:55.817
          +001 719 481 9835
          www.captionfirst.com

03:54:52.615 --> 03:54:55.281
********
This text is being provided in a

03:54:52.615 --> 03:54:56.548
Access Realtime Translation 
(CART) is provided in order to 

03:54:52.615 --> 03:54:56.348
facilitate communication 
accessibility and may not be a 

03:54:52.615 --> 03:54:55.481
totally verbatim record of the 
proceedings.

03:54:52.615 --> 03:54:53.615
********

03:57:08.614 --> 03:57:11.230
   &gt;&gt; Can you guys hear me fine?

03:57:11.231 --> 03:57:15.555
Oh, the lights are bright.  All 
right.  Welcome, and thank you 

03:57:15.929 --> 03:57:18.048
for coming.

03:57:21.060 --> 03:57:25.074
  And, first of all, 
I want to thank every one of you

03:57:28.070 --> 03:57:32.449
really hot.  So thank you for 
that.  My name is Ashish Sharma 

03:57:32.450 --> 03:57:38.740
and I'm the tech lead of the 
Volta team inside Android, and 

03:57:38.741 --> 03:57:43.294
we focus on making the battery 
life of Android devices great.  

03:57:43.295 --> 03:57:45.616
And I'm joined with my colleague

03:57:45.617 --> 03:57:49.573
Meg.      
Meghan., everyone        

03:57:49.574 --> 03:57:58.506
everyone.  My name is Meghan 
Desai and I'm a team leader.

03:57:58.507 --> 03:58:02.470
   &gt;&gt; ASHISH SHARMA: Today we're

03:58:02.471 --> 03:58:08.934
going to talk about two issues 
on a device that when running  

03:58:08.935 --> 03:58:11.962
significantly impact the 
way use ers use their phone, 

03:58:11.963 --> 03:58:14.158
battery and memory.  We're going

03:58:14.159 --> 03:58:18.509
to take away the pain from 
diagnose ing battery problems 

03:58:18.664 --> 03:58:23.220
because we know it's a national 
problem.  Extended battery life 

03:58:23.221 --> 03:58:26.252
is one of the top requested 
features on mobile devices 

03:58:26.744 --> 03:58:28.656
today     
today.  The phones in our 

03:58:28.657 --> 03:58:29.787
pocket      
pockets are more powerful and 

03:58:29.788 --> 03:58:35.859
more capable than any time .
     And there are hundreds and 

03:58:35.860 --> 03:58:39.974
thousands of applications that 
keep us informed and entertained

03:58:43.334 --> 03:58:47.878
  it's a phone who's doesn't die
 the a the 

03:58:47.879 --> 03:58:52.681
end of the day.  Now how many 
here in the audience are worry

03:58:53.013 --> 03:58:55.013
 ied 
that their phones will not last 

03:58:55.306 --> 03:58:57.822
the end of the day?  All 
right.  Almost everyone.

03:58:58.264 --> 03:59:02.897
     And to speak for the same 
fact, we've seen that there are 

03:59:04.413 --> 03:59:09.968
 not more of battery 
apps that claim to help extend 

03:59:09.969 --> 03:59:15.628
battery mobile devices some with
  as 100 million downloads 

03:59:15.629 --> 03:59:19.871
or more, so it's clearly a that 
our use ers care 

03:59:19.872 --> 03:59:25.045
about and we here at the Volta 
team at Android are very 

03:59:25.046 --> 03:59:26.562
passionate about making it 
possible.

03:59:26.563 --> 03:59:29.400
     So let's look at, where 
does the power in our mobile 

03:59:29.401 --> 03:59:33.910
phones go.  It turns out when a 
screen is on it dominates the 

03:59:33.911 --> 03:59:37.221
power consumption on your phone 
more than anything else.  When 

03:59:37.222 --> 03:59:42.431
you have your screen on playing 
a game or watching a video or 

03:59:42.627 --> 03:59:47.463
maybe searching the internet and

03:59:47.464 --> 03:59:52.309
the screen turns out to be a 
very expense ive component on 

03:59:52.310 --> 03:59:54.445
the 
device with much more power than

03:59:55.916 --> 03:59:59.893
But our phones also spend a lot 
of times in our pocket when our 

03:59:59.977 --> 04:00:01.896
screen is off, like right now, I

04:00:01.897 --> 04:00:04.336
hope it's. when is screen is off

04:00:04.533 --> 04:00:08.861
and the use er is not actively 
engage ed in using the device, 

04:00:09.598 --> 04:00:12.803
the 
power consumption now starts 

04:00:13.105 --> 04:00:16.251
getting taken by the CPU and the

04:00:16.252 --> 04:00:20.645
network radios.  So there might 
be a background job or sync 

04:00:20.646 --> 04:00:23.927
trying to access the internet to
 data in the background 

04:00:24.996 --> 04:00:31.282
costs power.  So when it comes 
to optimize ing for power when 

04:00:31.283 --> 04:00:33.998
the 
screen is off, we want you to 

04:00:33.999 --> 04:00:36.400
think about three main design 
principles.

04:00:36.401 --> 04:00:42.748
     Reduce, defer, and coalesce

04:00:43.431 --> 04:00:45.805
any and all background activity 
that you can.  Now, what do I 

04:00:45.806 --> 04:00:48.670
mean by this?  Reducing the 
background activity for an app 

04:00:48.890 --> 04:00:52.032
when the use er is not actively 
engage ed or is not actively 

04:00:52.033 --> 04:00:55.652
using device is something that 
only application developers, 

04:00:55.653 --> 04:01:00.663
that only you can do.  You know 
the logic of your applications  

04:01:00.979 --> 04:01:03.418
you know the constraint 
that you're operating in, and 

04:01:03.419 --> 04:01:06.741
you also know what your use ers 
want from the application.  But 

04:01:06.742 --> 04:01:09.757
it's really, really important 
that we try to stay away from 

04:01:09.827 --> 04:01:13.990
that urge, from that temptation 
to push data on to our devices 

04:01:14.903 --> 04:01:18.093
and keep them fresh even when 
the use er is not actively using

04:01:23.467 --> 04:01:25.661
thought battery life was 
important and our use ers are 

04:01:25.662 --> 04:01:27.653
just 
like us so we really want you to

04:01:29.217 --> 04:01:30.443
background activity that's 
possible that you can help.

04:01:30.444 --> 04:01:35.877
     For activity that you 
cannot completely eliminate and 

04:01:35.878 --> 04:01:39.745
there's gown be some cases like 
that, we want you to really  

04:01:39.746 --> 04:01:43.034
about deferring it  time the 
device is on 

04:01:43.035 --> 04:01:44.130
charge er because the moment the

04:01:44.131 --> 04:01:48.395
device is plugged in, any 
activity you do essentially 

04:01:48.396 --> 04:01:50.068
becomes free and the use er does

04:01:50.069 --> 04:01:53.442
not incur any battery cost for 
it.  And finally, we realize and

04:01:54.967 --> 04:01:59.031
be cases where you cannot get 
rid of them completely, can you 

04:01:59.420 --> 04:02:02.543
not defer them until the device 
gets on the charge ers, so for 

04:02:02.788 --> 04:02:04.633
those we want you to start using

04:02:04.634 --> 04:02:10.305
the job schedule er API because 
that is an API that lets Android

04:02:14.752 --> 04:02:17.988
background activity not just 
from your applications but from 

04:02:18.203 --> 04:02:20.524
other application as well in 
order to make the most of the CP

04:02:22.697 --> 04:02:23.935
traffic.
     Now, this is really 

04:02:23.936 --> 04:02:27.252
important.  I want to spend a 
minute here.  Every time your 

04:02:27.344 --> 04:02:33.715
device wakes up from suspend or 
it activates the mobile radio to

04:02:36.183 --> 04:02:39.286
it for a very small amount of  a
 fixed cost that 

04:02:39.287 --> 04:02:42.700
needs to get incurred.  Your 
device goes into this high power

04:02:42.701 --> 04:02:46.549
 and there's going to be a 
fixed overhead every time you 

04:02:46.550 --> 04:02:50.315
wake up the device.  So there's 
an access cost.  The more 

04:02:50.316 --> 04:02:52.751
applications can batch together 
any of their background activity

04:02:56.301 --> 04:02:58.120
efficient the system becomes and

04:02:58.121 --> 04:03:00.855
power on the device can be 
really, really reduced.

04:03:00.856 --> 04:03:02.564
     Now, there are some feature

04:03:02.565 --> 04:03:04.565
features in the platform, in the

04:03:04.765 --> 04:03:07.410
Android operating system that 
automatically help you do a lot 

04:03:08.365 --> 04:03:12.854
 defer and coalesce in 
your applications.

04:03:12.855 --> 04:03:14.261
   &gt;&gt; MEGHAN DESAI: That's right

04:03:14.262 --> 04:03:17.860
Ashish.  Let's start by 
reviewing a couple of the 

04:03:17.861 --> 04:03:21.618
feature questions launched with 
Dose and standby.  Let's say you

04:03:24.275 --> 04:03:28.257
 and you 
wake up in the morning and your 

04:03:28.350 --> 04:03:32.827
phone is dead.  You're going to 
have a bad day.  But what doze 

04:03:32.828 --> 04:03:36.637
tries to do is use a lost that 
activity that Ashish was talking

04:03:39.308 --> 04:03:42.313
the morning, and these 
activity        

04:03:42.314 --> 04:03:44.988
activities are on, it's not your
 battery.  So let's 

04:03:44.989 --> 04:03:49.208
take a look at how doze works.  
Let's say at some point, you put

04:03:51.122 --> 04:03:54.026
stationary.  It's sitting on 
your entitle stand.  It's not 

04:03:54.630 --> 04:03:58.419
battery, not plugged it and the 
screen is off.  The way we tell 

04:03:59.315 --> 04:04:02.997
 is we use a 
significant motion detector, so 

04:04:02.998 --> 04:04:07.616
that's required for Doze.
     At some point, we realize 

04:04:07.617 --> 04:04:11.320
the device has been still for 
some time.  At that point, we do

04:04:15.560 --> 04:04:20.337
sure the device is not in a 
steadily moving vehicle.  So we 

04:04:20.338 --> 04:04:23.160
use a GPS earth.  At that point,

04:04:27.018 --> 04:04:29.408
 use L network 
access, and there are no more 

04:04:29.409 --> 04:04:32.978
WiFi scans an their jobs or sync

04:04:32.979 --> 04:04:35.837
syncs and alarms get deferred 
until the next maintenance 

04:04:35.838 --> 04:04:39.136
window.  So maintenance window 
is where all that background 

04:04:39.427 --> 04:04:45.163
activity gets coalescet to.  
This is where all the activity 

04:04:45.279 --> 04:04:49.677
is put for a brief time.  So 
what we're really trying to do 

04:04:50.073 --> 04:04:51.897
is balance battery life with the

04:04:51.898 --> 04:04:53.009
expectation of content freshness

04:04:53.010 --> 04:04:54.910
that use ers have on their 
devices       

04:04:54.911 --> 04:04:57.981
devices.  Now the device 
continues to be stationary on 

04:04:57.982 --> 04:04:59.238
battery ies with the screen off,

04:04:59.239 --> 04:05:03.220
then we see this repeated 
pattern where the Doze windows 

04:05:06.745 --> 04:05:10.707
growing exponentially.  So 
that's D

04:05:16.285 --> 04:05:18.285
oze in the Marshmellow

04:05:26.577 --> 04:05:31.443
release.  To optimize that, we 
used app standby.  Apps that are

04:05:33.986 --> 04:05:38.224
get considered to be on app 
standby.  So some kind of tit or

04:05:39.570 --> 04:05:44.449
notification on the lock screen 
that you've seniority 

04:05:44.450 --> 04:05:47.567
application is specifically 
launched by the use er.  If this

04:05:52.947 --> 04:05:54.666
network access and it's jobs are

04:05:54.667 --> 04:05:56.155
deferred to when you plug in the

04:05:56.156 --> 04:05:58.890
device.  But once you plug in 
the device, if the application 

04:05:59.303 --> 04:06:04.032
is still not used, then it will 
still be considered standby and 

04:06:04.033 --> 04:06:08.157
the next time you unplug the 
device, it's jobs will again be 

04:06:08.158 --> 04:06:11.061
on stand be.
   &gt;&gt; ASHISH SHARMA: Hang on, so

04:06:12.825 --> 04:06:16.895
instant message ing app and I 
don't receive a message for a 

04:06:16.896 --> 04:06:19.837
long time then it goes on app 
standby then I might miss the 

04:06:19.838 --> 04:06:24.463
video calls.  Because it's on 
standby?

04:06:24.464 --> 04:06:26.296
   &gt;&gt; MEGHAN DESAI: No, for that

04:06:26.297 --> 04:06:30.140
your messages are going to get  
 So for that use case, 

04:06:30.141 --> 04:06:32.752
we launched          launched 
Google message ing 

04:06:32.753 --> 04:06:34.945
which now is Firebase message
 ing 

04:06:34.946 --> 04:06:37.368
if you saw the message today.

04:06:46.510 --> 04:06:51.240
active to the message and put up

04:06:51.241 --> 04:06:53.968
whatever notification it needs 
to to the ice er whether it's 

04:06:54.551 --> 04:06:57.073
instant message ing or whatever 
it's called.  Normally, it gets 

04:06:57.074 --> 04:07:01.425
batched to the maintenance 
window so for device that's 

04:07:01.426 --> 04:07:04.468
don't have Google Play services,

04:07:04.469 --> 04:07:07.796
this is where Cloud message ing 
lives, for devices that don't 

04:07:08.318 --> 04:07:15.145
have Google Play services, we 
actually shift Doze and App 

04:07:15.146 --> 04:07:20.420
Standby, to work with our eco   
ecosystems to identify an 

04:07:20.421 --> 04:07:23.141
alternate Cloud-based push 
message ing service.  So we 

04:07:23.442 --> 04:07:25.974
don't 
have them enabled unless they 

04:07:25.975 --> 04:07:33.177
have Googling play services or 
some alternate push-based 

04:07:33.178 --> 04:07:33.989
services.
   &gt;&gt; ASHISH SHARMA: So that 

04:07:33.990 --> 04:07:35.990
takes care of my message ing, 
but 

04:07:35.991 --> 04:07:38.832
what about the other use case?  
I often listen to my music on my

04:07:40.943 --> 04:07:44.764
home.  Does that mean when the 
device goes in Doze my music 

04:07:45.687 --> 04:07:47.502
stops playing?
   &gt;&gt; MEGHAN DESAI: No, no.  We 

04:07:47.503 --> 04:07:51.870
got you covered there as well.  
We're going to make sure your 

04:07:52.402 --> 04:07:57.573
keeps playing.  For that 
case, we actually disable Doze 

04:07:57.574 --> 04:08:01.643
and App Standby.  This is a 
service that has to have a 

04:08:03.861 --> 04:08:04.977
persistent notification and such

04:08:04.978 --> 04:08:13.767
a service will be exempt from  
App Standby.  Even 

04:08:13.768 --> 04:08:15.758
though -- I also said that 
alarm     

04:08:15.759 --> 04:08:19.089
alarms get deferred.  There are 
some use cases where alarms are 

04:08:19.090 --> 04:08:23.234
important, part of what the 
application needs to do for a 

04:08:24.601 --> 04:08:27.890
use er so for those we launched 
new APIs that will trigger in a 

04:08:28.454 --> 04:08:32.617
limiting way for Doze.  And 
finally for use cases that 

04:08:32.618 --> 04:08:38.622
cannot be accomplished by Doze 
and App Standby, we have a white

04:08:40.934 --> 04:08:43.131
applications              
applications to that will cause 

04:08:43.228 --> 04:08:47.321
the applications to be exempt 
from Doze.  This is only for 

04:08:47.322 --> 04:08:51.612
specific, narrow use cases that 
you can read about on our device

04:08:55.030 --> 04:08:58.664
before your application gets 
published. of 

04:08:58.665 --> 04:09:04.648
this makes a lot of sense, Doze 
 when my device 

04:09:04.649 --> 04:09:07.135
is not being used or when I'm 
using my application.  How did 

04:09:07.136 --> 04:09:12.042
we do?  Do we have any numbers?
   &gt;&gt; MEGHAN DESAI: I think we 

04:09:12.043 --> 04:09:14.953
do have numbers.
   &gt;&gt; ASHISH SHARMA: Great last 

04:09:14.954 --> 04:09:23.400
year when we announced 
Marshmellow, we saw that Doze 

04:09:24.404 --> 04:09:31.877
App Standby can increase the 
life to almost double  also saw 

04:09:32.366 --> 04:09:35.396
30 percent 
increase based on Google 

04:09:35.397 --> 04:09:41.076
applications that we have, so 
clearly Doze and App Standby are

04:09:43.521 --> 04:09:47.195
principles seem to work.  But 
I'm still thinking about one 

04:09:47.196 --> 04:09:50.503
thing.  These cases make sense 
when I'm not using my device but

04:09:52.759 --> 04:09:56.889
around with my device like I am 
today and am actively using all 

04:09:56.890 --> 04:09:59.415
of our devices on the         
       devices on my phone?

04:09:59.416 --> 04:10:00.122
   &gt;&gt; MEGHAN DESAI: That's 
right     

04:10:00.123 --> 04:10:02.336
right, Ashish.  Most of the time

04:10:02.337 --> 04:10:05.484
our phones are not stationary.  
We have them in our hands or 

04:10:05.485 --> 04:10:10.538
pockets and are moving about the
   We wanted to bring the 

04:10:10.539 --> 04:10:15.160
battery system of Doze to the 
average user as well and that's 

04:10:15.161 --> 04:10:18.197
why we're extending Doze in the 
Android region.  Let's think 

04:10:18.438 --> 04:10:19.746
about how that's going to work. 

04:10:19.747 --> 04:10:21.969
Again, think about these bars as

04:10:21.970 --> 04:10:25.474
activity, at somebody point you 
turn the screen off and it's not

04:10:26.521 --> 04:10:29.707
that, this time on the order of 
minutes, shortly after that, the

04:10:32.870 --> 04:10:36.673
And now this is a lighter, gent 

04:10:36.674 --> 04:10:37.932
gentle er doze than what you saw

04:10:37.933 --> 04:10:45.797
with Marshmallow, only going to 
restrict some and any other job 

04:10:45.920 --> 04:10:50.109
will get referred to the next 
window.  And Doze 

04:10:50.110 --> 04:10:53.134
repeated cycle will ensue after 
that so long as the screen 

04:10:53.135 --> 04:10:55.925
continues to be off and again, 
the idea is that we're balance 

04:10:56.058 --> 04:10:59.776
ing 
battery life with freshness of 

04:10:59.777 --> 04:11:03.006
content.  In the maintenance 
windows, these restrictions are 

04:11:03.539 --> 04:11:09.629
lifted to allow any activity 
window to continue.

04:11:09.630 --> 04:11:11.373
     So let's quickly review the

04:11:11.374 --> 04:11:13.374
Doze that we talked 

04:11:19.448 --> 04:11:21.448
about in 

04:11:26.211 --> 04:11:28.816
Marshmellow.  Let's take a look 
what happens, as you would  

04:11:29.428 --> 04:11:33.683
screen is off but the 
amount of time hasn't pacessed 

04:11:33.684 --> 04:11:39.549
yet for Doze to trigger.  At 
this point, the extended or 

04:11:39.550 --> 04:11:42.020
lighter version of Doze will 
kick in and you'll see that same

04:11:44.348 --> 04:11:47.854
maintenance window and at some 
point, the device will realize, 

04:11:48.071 --> 04:11:50.853
okay, the device has been 
stationary for the amount of 

04:11:50.986 --> 04:11:54.478
time required for Doze to kick 
in and at that point just like 

04:11:54.479 --> 04:11:57.359
it does in Marshmallow, the full

04:11:57.360 --> 04:12:01.026
set of Doze restrictions will 
kick in.  Their alarms will get 

04:12:01.487 --> 04:12:06.669
deferred and there will be no 
more GPS or WiFi scans because 

04:12:06.887 --> 04:12:10.307
the device has been stationary.
     So we're very excited about

04:12:15.646 --> 04:12:20.206
will a of  -- all of you is if 
you've already enabled your 

04:12:20.207 --> 04:12:25.037
applications for Doze and 
battery life, you don't need to 

04:12:25.038 --> 04:12:29.464
do much more.  Fore ground 
services continue to be exempt 

04:12:29.465 --> 04:12:34.544
from Doze and App Standby so we 
make sure that Ashish's music 

04:12:34.545 --> 04:12:36.545
keeps playing., so we've been 
talking 

04:12:36.776 --> 04:12:39.775
a lot about background services 
an their impact on battery life.

04:12:42.236 --> 04:12:43.399
little bit and talk about 
background services and their 

04:12:43.400 --> 04:12:47.684
impact on memory.  So, let's say

04:12:47.685 --> 04:12:48.992
you're trying to do something on

04:12:48.993 --> 04:12:52.112
your phone and it's just really 
slow and sluggish.  So you're 

04:12:52.320 --> 04:12:56.050
trying to take a picture of the 
camera and you just miss that 

04:12:56.760 --> 04:12:58.074
moment because your phone was to

04:12:58.075 --> 04:13:01.569
e too slow.  And you know what 
I'm talking about.  Background 

04:13:01.570 --> 04:13:03.019
services have an impact when the

04:13:03.020 --> 04:13:08.285
screen is on as well.  That's 
what we're going to focus on 

04:13:08.286 --> 04:13:11.603
next.  At any given time, 
there's lots of stuff happening 

04:13:11.787 --> 04:13:16.613
in the background services.  
When a device enters a low-    

04:13:16.614 --> 04:13:20.382
low-memory situation or if it 
just happens to be a low     

04:13:20.383 --> 04:13:22.384
low-memory 
device, what happens is there's 

04:13:22.496 --> 04:13:25.512
not enough memory to run all 
that stuff in the background 

04:13:25.513 --> 04:13:28.776
while you're trying to use that 
device at the top.  At that 

04:13:28.777 --> 04:13:34.819
point, Android is too busy 
trying to swap in and out of 

04:13:34.820 --> 04:13:37.597
memory to let them do what they 
need do in the background which 

04:13:37.598 --> 04:13:39.794
apply ies pressure on what 
you're 

04:13:39.795 --> 04:13:42.633
trying to do and the net result 
is that you get this frustrating

04:13:48.008 --> 04:13:50.065
Background work is pretty 
important.  Let's figure out why

04:13:58.650 --> 04:14:04.329
sent out on the device whenever 
something happens and the 

04:14:04.330 --> 04:14:07.643
implicit gets sent out to 
anything that's happening versus

04:14:10.377 --> 04:14:13.200
sent out to a certain type of 
application.  What makes this 

04:14:13.535 --> 04:14:16.791
particularly bad is there a 
often these broadcasts are 

04:14:16.792 --> 04:14:19.610
listened to.  The refers for 
these are declare ed in a 

04:14:19.611 --> 04:14:20.737
specific 
way in the application file.  

04:14:20.738 --> 04:14:23.431
What that means is that the 
application doesn't actually 

04:14:23.432 --> 04:14:29.281
have to be running for it to 
receive this broad cast and get 

04:14:29.488 --> 04:14:32.009
it.  This would cause 
applications that are not even 

04:14:33.223 --> 04:14:37.791
running to be woken up, brought 
into memory, and while tried e  

04:14:38.381 --> 04:14:40.498
       Android 
is doing that, the application 

04:14:40.711 --> 04:14:43.950
that you're actually trying to 
use is slow.

04:14:43.951 --> 04:14:46.823
     A quick example of this is 
a broadcast called connectivity 

04:14:46.824 --> 04:14:50.964
change.  This is a broadcast 
that gets sent quite frequently 

04:14:50.965 --> 04:14:57.024
on your device, any time you 
switch from WiFi to cell or any 

04:14:57.025 --> 04:15:01.159
time your internet activity 
changes, this gets sent out.  In

04:15:03.287 --> 04:15:06.927
the 
receive ers in a manifest file. 

04:15:11.672 --> 04:15:14.279
perform in the background and 
you get a frustrating experience

04:15:15.697 --> 04:15:18.324
     This is the problem we're 
trying to solve.  What do we do?

04:15:21.771 --> 04:15:23.975
.  It's not  because

04:15:26.999 --> 04:15:29.665
 background 
activity is actually pretty 

04:15:26.999 --> 04:15:31.639
important.  So what we're 
envisioning here is that hangs 

04:15:31.640 --> 04:15:36.038
perform any background activity 
using explicitly jobs and sort 

04:15:36.039 --> 04:15:44.219
of reduce their reliance on 
background server eers and 

04:15:44.220 --> 04:15:48.278
statically declare implicit 
broadcast.  Applications static 

04:15:50.128 --> 04:15:52.194
refers would no longer get woken

04:15:52.195 --> 04:15:56.876
up.  One-time declare ed refers 
would continue to work.  

04:15:56.877 --> 04:16:00.744
Explicit broadcast refers would 
continue to work statically or 

04:16:01.489 --> 04:16:06.056
at one time but the statically 
declare ed implicit broadcast 

04:16:06.057 --> 04:16:09.394
refers would be the ones affect 

04:16:09.395 --> 04:16:15.079
affected.  Secondly, we assume 
that it's no longer necessary 

04:16:15.508 --> 04:16:18.373
for background services         
 services.  Fore 

04:16:18.374 --> 04:16:22.618
ground services will still 
continue to work, so Ashish, 

04:16:23.015 --> 04:16:24.620
your music will still continue 
to work.

04:16:24.621 --> 04:16:25.640
   &gt;&gt; ASHISH SHARMA: Well, thank

04:16:25.641 --> 04:16:30.056
you for that.  All this sounds 
pretty scary.  These are pretty 

04:16:30.057 --> 04:16:33.436
big changes.  Are they coming N?
  Do we need to change 

04:16:33.935 --> 04:16:38.632
recall of our apps for N which 
is coming soon? not or N but you

04:16:38.941 --> 04:16:42.577
 United to 
-- you need to change your apps 

04:16:43.048 --> 04:16:48.994
soon.  Today we're just giving 
you a preview of what's coming. 

04:16:51.239 --> 04:16:54.781
going and we're planning to 
launch these when we think 

04:16:54.782 --> 04:16:57.907
they're going to be ready in 
some future release and we'll 

04:16:58.506 --> 04:17:00.237
target the apps in that release.

04:17:00.238 --> 04:17:01.775
In the N-release we want to give

04:17:01.776 --> 04:17:04.354
you the tools to start testing 
your applications and giving 

04:17:04.578 --> 04:17:06.390
this feedback as you think about

04:17:06.391 --> 04:17:09.348
changing your applications to 
use job schedule er where you c

04:17:09.626 --> 04:17:12.506
an.  
We're also remove ing a few 

04:17:12.720 --> 04:17:14.455
broad     
broadcasts that we think are 

04:17:14.456 --> 04:17:17.810
particularly harmful in the 
system today and I'll talk about

04:17:22.237 --> 04:17:24.776
have some commands you can view,

04:17:24.777 --> 04:17:27.313
and start reviewing the 
applications, how your 

04:17:27.314 --> 04:17:30.061
applications behave under these 
conditions and send us the 

04:17:30.062 --> 04:17:36.019
feedback.  Let's us know what 
implicit broadcast that you're 

04:17:36.020 --> 04:17:38.703
currently dependent on, what 
kind of background services you 

04:17:39.237 --> 04:17:42.236
have that you can't move over.  
Okay, Ashish, I think your 

04:17:42.237 --> 04:17:46.187
specific question was what's 
actually going to be changing in

04:17:47.162 --> 04:17:49.988
little bit about that.
     First, I already talked 

04:17:50.963 --> 04:17:54.909
about connectivity change as  
particularly harmful         

04:17:54.910 --> 04:17:58.770
harmful 
broadcast, so we're getting rid 

04:17:58.771 --> 04:18:02.872
of that one.  This means if you 
have declare ed a refer       

04:18:03.064 --> 04:18:07.036
receive er for 
this broadcast, that will no 

04:18:07.337 --> 04:18:09.977
longer work.  If you've 
declare ed 

04:18:09.978 --> 04:18:13.698
run time, that will continue to 
work.  For other applications, 

04:18:13.699 --> 04:18:15.952
we want you to use job schedule 
er         

04:18:15.953 --> 04:18:18.957
scheduler, and job schedule er 
already has network semantics.  

04:18:18.958 --> 04:18:21.703
The other two are new picture 
and new video.

04:18:21.704 --> 04:18:23.632
     These are two more implicit

04:18:23.633 --> 04:18:28.596
broadcasts that are sent right 
when the use er takes a picture 

04:18:28.597 --> 04:18:30.597
and they're sent by the camming 
raw and that's sort of the worst

04:18:30.674 --> 04:18:37.632
 en you want a lot of 
stuff to be happening because 

04:18:37.968 --> 04:18:42.980
you want to be focusing on 
taking the picture.  So starting

04:18:44.746 --> 04:18:49.441
just those targeting N, all 
applications.  These broadcasts 

04:18:49.746 --> 04:18:53.033
are pretty important because 
they unleash some pretty cool 

04:18:53.243 --> 04:19:00.058
uses.  One is unload           
-- uploading a photo.  

04:19:00.059 --> 04:19:06.260
Maybe that can wait.  We're 
actually triggering on content 

04:19:06.261 --> 04:19:07.954
provider changes.  The media has

04:19:07.955 --> 04:19:11.389
a content, that could be the 
trigger there to upload that 

04:19:12.335 --> 04:19:15.983
photo.  The cool thing about 
that is now because you're using

04:19:17.964 --> 04:19:22.206
optimize when that should take 
place.  Doesn't have to happen 

04:19:22.911 --> 04:19:26.190
immediately when you're taking 
the picture, it can find the 

04:19:26.191 --> 04:19:31.611
optimum time to do it.  S I've 
been talking about job schedule 

04:19:32.427 --> 04:19:33.916
er         
scheduler, but just a show of 

04:19:33.917 --> 04:19:36.659
hands, how many of you have 
actually heard of job schedule 

04:19:36.939 --> 04:19:41.676
er?, 
that's a good number but I also 

04:19:41.677 --> 04:19:45.299
see a lot of hands not up so 
maybe it's an important time for

04:19:45.300 --> 04:19:50.054
 to review what this really job 
schedule er API is, 

04:19:50.055 --> 04:19:52.469
so let's do a quick review so 
that everyone here is on the 

04:19:52.470 --> 04:19:57.042
same page.  The job schedule er 
API, think of it like a wrapper 

04:19:57.237 --> 04:19:58.720
around any background activity. 

04:19:58.721 --> 04:20:03.814
So any background sync, any 
background activity that you 

04:20:03.815 --> 04:20:05.486
have, job schedule er is the way

04:20:05.487 --> 04:20:08.370
to think about schedule ing 
those.  

04:20:08.371 --> 04:20:12.649
And this is slightly a paradigm 
shift.  What you're doing is 

04:20:12.650 --> 04:20:15.421
letting Android know that I have

04:20:15.422 --> 04:20:18.510
ask tasks that need to be done 
and you specify certain triggers

04:20:23.433 --> 04:20:26.070
something you try and take care 
of yourself.  So let's take a 

04:20:26.186 --> 04:20:29.615
couple of examples.  These  when
 you request 

04:20:29.616 --> 04:20:32.600
Android to schedule your job 
could be based on a certain time

04:20:33.607 --> 04:20:36.729
     So say you have a job 
that's important, not exactly 

04:20:36.730 --> 04:20:40.347
urgent, it doesn't need to 
happen right away.  You can tell

04:20:41.661 --> 04:20:45.600
time within the next one hour.  
And what Android would do is 

04:20:45.601 --> 04:20:47.294
once many applications are using

04:20:47.295 --> 04:20:51.681
the job schedule er API, it now 
has this context about all the 

04:20:52.107 --> 04:20:54.107
background activity from the 
different apps that needs to 

04:20:54.535 --> 04:20:58.999
happen and it's going do a good 
schedule ing your job at 

04:20:59.000 --> 04:21:04.051
just the right time so that the 
efficiency of the CPU and 

04:21:04.052 --> 04:21:07.797
networking radios can be 
maximize ed.  Now what you can 

04:21:07.798 --> 04:21:11.440
also do is specify triggers 
based on network connectivity or

04:21:16.998 --> 04:21:18.943
a whole bunch of photos or video

04:21:18.944 --> 04:21:21.526
videos that you might have on 
your phone.  Now, it's a really 

04:21:21.527 --> 04:21:25.635
good idea for such an app to 
schedule or to specify a trigger

04:21:35.253 --> 04:21:38.037
typically has more bandwidth and

04:21:38.038 --> 04:21:39.528
it's less expense ive in terms 
of 

04:21:39.529 --> 04:21:43.316
money and it costs less power 
than the radio, so that can be a

04:21:46.428 --> 04:21:48.631
Then finally the thing which is 
my favorite which comes back it 

04:21:48.632 --> 04:21:52.293
to the whole deferring the 
device is on charge er, you can 

04:21:52.796 --> 04:21:56.631
specify that control, too.  You 
can tell, here's a job that I 

04:21:56.754 --> 04:21:57.943
want to get done, and trigger it

04:21:57.944 --> 04:22:02.592
when the device is charge ing.  
But not just that.

04:22:02.593 --> 04:22:07.293
     Because, every time you 
plug in the device may not be 

04:22:07.511 --> 04:22:12.032
the best time for all of the 
background jobs to start firing 

04:22:12.033 --> 04:22:17.686
up.  Say, for example, I saw 
some power outlets outside.  

04:22:17.687 --> 04:22:19.525
You've been here since this 
morning.  Your phone is running 

04:22:19.526 --> 04:22:24.894
low.  And you find that power 
device and you plug in your 

04:22:24.895 --> 04:22:28.149
device to get maybe five to ten 
minutes of charge.  And right 

04:22:28.150 --> 04:22:36.159
then if all those apps fire up, 
that's going to be a not so 

04:22:36.160 --> 04:22:39.801
pleasant experience for you 
because your device will be slow

04:22:43.263 --> 04:22:44.843
charge so what you can do is say

04:22:44.844 --> 04:22:50.725
the device is charge ing and 
should not be being used.  

04:22:50.726 --> 04:22:53.565
Android is relatively smart so 
it will wait a while, make sure 

04:22:53.566 --> 04:22:56.952
it's a good time to schedule 
awful those background jobs and 

04:22:56.953 --> 04:23:01.258
trigger your job right then.
     So we've seen that the job 

04:23:01.368 --> 04:23:06.888
schedule er API is relating 
important and it will help you 

04:23:07.023 --> 04:23:12.715
optimize, defer, and coalesce 
your activity not just in 

04:23:13.359 --> 04:23:15.043
activity or battery 
but also in interprets of memory

04:23:17.412 --> 04:23:19.247
example of how the job 
schedule er 

04:23:19.248 --> 04:23:22.600
works and how easy it is in a 
few lines of code to get your 

04:23:22.601 --> 04:23:25.070
job done.  I'm showing you a job

04:23:25.071 --> 04:23:30.429
object, let's create an object 
using builder.  We can specify a

04:23:32.274 --> 04:23:38.114
network type unmetered.  Now, 
what that typically translates 

04:23:38.115 --> 04:23:41.310
to is a network that doesn't 
cost money and most WiFi 

04:23:41.581 --> 04:23:43.999
network       
networks fall into that so in a 

04:23:44.000 --> 04:23:47.995
way, for sure specifying the 
WiFi activity here.  So, let's 

04:23:48.105 --> 04:23:53.199
say I want my job or my app to 
sync up every 24 hours.  It 

04:23:53.200 --> 04:23:57.395
doesn't have to be by the hour, 
1e    

04:23:57.396 --> 04:24:01.616
but once every day is fine for 
me.  So what I'm going to do is 

04:24:02.235 --> 04:24:05.935
 frequency of 24 hours and 
here comes the favorite part, 

04:24:06.240 --> 04:24:10.716
you do this when the device is 
on charge er.  So you specify 

04:24:10.717 --> 04:24:13.047
the 
charge ing length and those four

04:24:15.360 --> 04:24:19.983
and it's done.  Now Meghan also 
talked about something very 

04:24:19.984 --> 04:24:22.388
interesting, an extension of the

04:24:22.389 --> 04:24:25.359
job and that is to take into 
account the memory conditions or

04:24:27.109 --> 04:24:29.442
device so now job schedule er 
also 

04:24:29.443 --> 04:24:31.487
does activity ies based on 
content       

04:24:31.488 --> 04:24:33.802
contents on your device.  So the

04:24:33.803 --> 04:24:36.229
example that Meghan gave was it 
you're trying to take a picture 

04:24:36.632 --> 04:24:41.573
or a selfie of your kid and at 
that moment you just want to 

04:24:41.574 --> 04:24:46.339
trigger another shot and if your

04:24:46.340 --> 04:24:51.047
phone gets slow that might not 
be a good time to start upload

04:24:52.619 --> 04:24:57.837
     So you can tell job 
schedule er that you're wanting 

04:24:57.838 --> 04:25:00.272
this when the picture is taken 
but there's a little bit more 

04:25:00.273 --> 04:25:04.062
room, it doesn't have to start 
with right when the picture is 

04:25:04.259 --> 04:25:06.350
taken.  And the job schedule er 
is 

04:25:06.351 --> 04:25:10.684
pretty smart, to prioritize all 
the applications that is in the 

04:25:10.889 --> 04:25:18.701
fore ground or running fore    
foreground services to calculate

04:25:21.042 --> 04:25:24.308
app, that app should get 
priority or all the other jobs 

04:25:24.991 --> 04:25:28.233
that might be non-critical.  And

04:25:28.234 --> 04:25:30.234
finally, job is

04:25:32.097 --> 04:25:36.639
 based on RAM 
available, so depending on the 

04:25:36.640 --> 04:25:37.610
R 
RAM available, or if the memory 

04:25:37.611 --> 04:25:41.544
conditions are not ideal or if 
you're running low on emergency 

04:25:41.944 --> 04:25:45.755
room, then only a few jobs or 
the top priority jobs will get 

04:25:46.343 --> 04:25:47.297
schedule ed first before all the

04:25:47.298 --> 04:25:52.859
other ones get precedence.  So 
these changes are interesting.  

04:25:53.063 --> 04:25:56.796
Let's take a look at a quick 
code sample of how you introduce

04:26:00.037 --> 04:26:06.170
update.  You get a service, you 
create a builder object, and you

04:26:08.841 --> 04:26:11.957
last example where we had 
specify ied constraints on the 

04:26:12.056 --> 04:26:19.164
network type, what we adhere is 
a trigger content and you can 

04:26:19.165 --> 04:26:20.865
schedule your job and that's it.

04:26:20.866 --> 04:26:24.290
You're done.  So, this is all 

04:26:34.707 --> 04:26:39.914
good.
     Job schedule er was  lollip

04:26:40.168 --> 04:26:42.888
op, we also 
have on a device that is running

04:26:46.601 --> 04:26:49.085
and that is GCS network managers

04:26:49.086 --> 04:26:52.727
managers.  This slide doesn't 
say GCS network managers.

04:26:52.728 --> 04:26:53.530
   &gt;&gt; MEGHAN DESAI: Yeah, that's

04:26:53.531 --> 04:26:56.221
right.  It's actually a Firebase

04:26:56.565 --> 04:27:01.799
job dispatcher.  So today, as of
 the Firebase launch, launching 

04:27:01.800 --> 04:27:05.633
Firebase job 
dispatcher.  The cool thing 

04:27:05.634 --> 04:27:07.850
about Firebase job dispatcher is

04:27:07.851 --> 04:27:13.720
that it's an open source that 
essentially is providing the 

04:27:14.015 --> 04:27:16.992
same services that job schedule
 er 

04:27:16.993 --> 04:27:20.114
was but in a background 
compatible way.  It's available 

04:27:20.115 --> 04:27:22.115
not only on 

04:27:26.237 --> 04:27:31.802
Android but soon on 
iOS.  On Android it will use job

04:27:35.862 --> 04:27:40.661
will use job dispatcher.  So 
let's take a look at a quick 

04:27:40.877 --> 04:27:43.788
example.  This is an example of 
create ing a simplification job 

04:27:44.603 --> 04:27:48.235
service that encapsule ates a 
code 

04:27:48.236 --> 04:27:53.572
that whatever your job needs to 
do, in the background you put in

04:27:57.115 --> 04:28:01.409
builder from the dispatcher, 
give it the service that's 

04:28:02.167 --> 04:28:05.565
around all the activity        
activity.  In this case, I'm 

04:28:05.844 --> 04:28:09.371
just giving the constraint that 
I want it to happen on an un  

04:28:09.372 --> 04:28:12.762
unmetered network.  That's it.  
Schedule ed.

04:28:12.763 --> 04:28:15.255
     So pretty simple.  Very 
easy to use to run a background 

04:28:15.672 --> 04:28:19.276
  So we've been talking 
a lot about different platform 

04:28:19.277 --> 04:28:24.961
features, a lot of APIs.  These 
sounds like they're going to 

04:28:24.962 --> 04:28:27.952
have a huge impact but how can 
we be sure?

04:28:27.953 --> 04:28:29.744
   &gt;&gt; ASHISH SHARMA: That's 
right.  It's not an easy problem

04:28:30.654 --> 04:28:33.949
suffered with for a while, and  
how do you relating 

04:28:33.950 --> 04:28:39.966
make sure that your app is 
behave ing the way that you 

04:28:41.079 --> 04:28:41.960
intend 
it to be when it comes to these 

04:28:41.961 --> 04:28:46.456
battery applications or worse, 
if your app is draining 

04:28:46.457 --> 04:28:48.756
more battery than you think it 
should, how do you diagnose that

04:28:52.106 --> 04:28:55.442
poll?  How many of you have 
tried diagnose ing battery 

04:28:55.443 --> 04:28:57.171
problems on your applications
              applications?  

04:28:57.172 --> 04:28:59.555
Okay.  Some.
     Now, for the others who did

04:29:01.809 --> 04:29:03.626
because you found it too hard to

04:29:03.627 --> 04:29:07.501
diagnose battery problems.  
Because I've been in that same  

04:29:07.502 --> 04:29:12.210
 Well, you can be honest.  
But, so, diagnose ing of battery

04:29:14.936 --> 04:29:18.558
Good thing we have a tool.  And 
 logs on the device 

04:29:18.559 --> 04:29:22.024
that can help us do that in an 
easier fashion and not have to 

04:29:22.962 --> 04:29:26.458
struggle through ology of the 
pain.  Let's look at some of the

04:29:29.065 --> 04:29:33.519
present on the device.  Now, 
Android, data structure and 

04:29:33.520 --> 04:29:36.304
memory in all devices.  And this

04:29:36.305 --> 04:29:40.969
log is called battery stats.
     Now, what battery stats is,

04:29:49.243 --> 04:29:51.884
device is on battery.  So, since

04:29:52.506 --> 04:29:57.350
it's incrementing              
incrementing and these counts go

04:29:57.351 --> 04:30:00.972
 on, they 
need to stop at some point.  And

04:30:02.907 --> 04:30:04.412
device and it's done charge ing.

04:30:04.413 --> 04:30:09.368
So let's say you plugged in your

04:30:09.369 --> 04:30:14.100
device, unplug it at ten in the 
morning, if you take your bug 

04:30:14.221 --> 04:30:16.332
device now then it would contain

04:30:16.333 --> 04:30:21.958
the whole ten huers of bug 
report and stats on battery life

04:30:25.011 --> 04:30:30.025
relevant so things like, how 
long across all applications or 

04:30:30.339 --> 04:30:32.964
how much data was transferred 
over the data network or the 

04:30:32.965 --> 04:30:38.809
WiFi network.  And what you can 
see here is there's also a stat 

04:30:39.006 --> 04:30:42.102
lock time which tells you 
exactly when the stats       

04:30:42.103 --> 04:30:44.871
stats were 
reset.  This tells you exactly 

04:30:44.872 --> 04:30:47.004
what happened on your device 
that may have cause ed the 

04:30:47.005 --> 04:30:49.229
battery 
to drain faster than what you 

04:30:49.230 --> 04:30:51.230
would expect.
     The other type of log that 

04:30:51.425 --> 04:30:54.858
is present on the device is 
something that we call battery 

04:30:54.859 --> 04:30:56.277
history.  And what this is is an

04:30:56.278 --> 04:31:00.753
event log of all of the state 
transitions for components on 

04:31:00.754 --> 04:31:04.546
your device or for actions like 
schedule ing a wake lock or an 

04:31:04.547 --> 04:31:06.441
application schedule ing a job 
or 

04:31:06.442 --> 04:31:08.656
the device going into suspended,

04:31:08.657 --> 04:31:12.676
coming out of suspend, or maybe 
it's the network radio that got 

04:31:12.988 --> 04:31:16.698
turned on.  So there's a lot of 
information here and this would 

04:31:17.312 --> 04:31:26.713
contain an event log of a 
millisecond level granulari

04:31:27.541 --> 04:31:30.563
ty.
   &gt;&gt; MEGHAN DESAI: Wait, 

04:31:30.564 --> 04:31:32.608
millisecond granularity.  You're

04:31:32.686 --> 04:31:35.573
telling me I have to look at   
It's going to be hundreds 

04:31:35.574 --> 04:31:37.932
of lines?
   &gt;&gt; ASHISH SHARMA: Well, it's 

04:31:37.933 --> 04:31:39.258
very obvious.  You can just make

04:31:39.259 --> 04:31:41.259
out the problem.
   &gt;&gt; MEGHAN DESAI: Oh, can I?  

04:31:42.295 --> 04:31:44.464
Can you guys?
   &gt;&gt; ASHISH SHARMA: No, I'm 

04:31:44.961 --> 04:31:47.923
just kidding.  We have a tool 
can help you make sense of 

04:31:47.924 --> 04:31:50.453
this called battery historian.  
Many of you might be aware of 

04:31:50.454 --> 04:31:54.658
this.  What this would do is 
take all of the logs that      t

04:31:54.983 --> 04:31:56.981
hat I 
mentioned that were present in 

04:31:56.982 --> 04:31:58.533
the bug report and help you look

04:31:58.534 --> 04:32:02.029
at them in a very interactive UI

04:32:02.030 --> 04:32:04.051
that would make clear what the 
problem is on the device.

04:32:04.052 --> 04:32:06.414
   &gt;&gt; MEGHAN DESAI: That's   I 
like this.  I 

04:32:06.415 --> 04:32:08.056
like this a lot.  Where do I see

04:32:08.057 --> 04:32:12.532
this?  Is this on my device and 
settings somewhere?

04:32:12.533 --> 04:32:14.893
   &gt;&gt; ASHISH SHARMA: No, I know 
you have a very cool and power

04:32:16.967 --> 04:32:19.478
hundreds of 
thousands of transitions on your

04:32:23.854 --> 04:32:28.686
when you're trying to diagnose 
battery problems with your app. 

04:32:31.096 --> 04:32:35.163
available on Git Hub ready for 
you to download, and you can 

04:32:35.164 --> 04:32:38.793
look at the source code, modify 
it any way you want.  What you 

04:32:38.794 --> 04:32:42.403
do is install it on your 
computer.  Now you have your 

04:32:42.404 --> 04:32:44.062
development device, for the 
stat    

04:32:44.063 --> 04:32:46.329
stats to be reset because you 
want to have a good starting 

04:32:46.638 --> 04:32:48.611
point, you can either charge the

04:32:48.612 --> 04:32:50.937
device up    up to 100 percent 
when 

04:32:50.938 --> 04:32:55.091
the straits would get reset or 
there is an AV command to 

04:32:55.092 --> 04:32:59.789
actually manually restart the 
stats so you have a good 

04:32:59.790 --> 04:33:03.034
initiation point.  You can run 
your experiment, which might 

04:33:03.035 --> 04:33:06.164
last a couple of minutes or 
hours, and then at the end you 

04:33:06.165 --> 04:33:09.065
take a bug report.  Then you up 

04:33:09.066 --> 04:33:12.809
upload your bug report on your 
computer and you have the 

04:33:12.810 --> 04:33:15.062
battery Histor I can't 
think                      

04:33:16.536 --> 04:33:18.947
historian tool to go 
back to this.  So now that 

04:33:18.948 --> 04:33:23.307
you're clear on how the work 
flee works for battery 

04:33:24.427 --> 04:33:25.521
historian         
historian, I'd like you to come 

04:33:25.522 --> 04:33:27.471
with me on a slight tour of what

04:33:27.472 --> 04:33:31.362
are the features of this tool.
     Let's zoom into one of 

04:33:31.363 --> 04:33:36.505
these rows or a few of these   
What you're seeing is the ine, 

04:33:36.506 --> 04:33:40.019
which is CPU running 
and what this indicates is 

04:33:40.020 --> 04:33:42.652
whether your device was in 
suspend or was it out of suspend

04:33:47.218 --> 04:33:49.434
and doing things.  Similarly you

04:33:49.435 --> 04:33:52.763
can see things like when was a 
use er lock held or when the 

04:33:53.065 --> 04:33:56.711
screen was on and information 
about any jobs or syncs will 

04:33:56.712 --> 04:33:58.712
also appear that.  And in this 
U 

04:33:59.237 --> 04:34:03.904
UI you can zoom into every 
little -- even when you see, no 

04:34:03.905 --> 04:34:07.509
matter how long and if you take 
your curse or over that, it will

04:34:09.510 --> 04:34:10.758
for example, we're at this point

04:34:10.759 --> 04:34:13.348
in the UI, we have zoomed in and

04:34:13.349 --> 04:34:16.713
it tells me exactly what the 
current time was at this 

04:34:16.714 --> 04:34:18.557
instance and the red highlighted

04:34:18.558 --> 04:34:24.665
portion now shows you the 
battery level drop from 73 to 72

04:34:26.123 --> 04:34:33.504
device to discharge from 73 to 
72 giving you an indication of 

04:34:33.505 --> 04:34:36.427
what the average discharge rate 
was at that time and you can see

04:34:36.723 --> 04:34:40.018
 of the events lining up 
nicely so you can actually 

04:34:40.019 --> 04:34:43.899
figuring outs when your device 
was discharge ed, what were the 

04:34:44.065 --> 04:34:47.478
events happening on the device.
     Let me take you through an 

04:34:47.479 --> 04:34:50.713
example.  Say you have 
modify ied app to start using 

04:34:50.714 --> 04:34:54.674
job er now, how do you figure 
when your jobs are getting 

04:34:54.675 --> 04:34:57.721
schedule ed?  So in the job 
schedule er row, you go on any 

04:34:58.341 --> 04:35:00.629
one 
of those events and if you're in

04:35:02.466 --> 04:35:05.895
clappings a bunch of these 
little jobs that didn't last as 

04:35:06.096 --> 04:35:09.027
long but it will give you 
information about how many jobs 

04:35:09.028 --> 04:35:12.561
were run in that particular 
small box and for how long each 

04:35:12.562 --> 04:35:17.016
of those jobs were run, and you 
can zoom in, if you like.

04:35:17.017 --> 04:35:21.146
     It's a very active and fun 
tool.  I have a lot of fun with 

04:35:21.147 --> 04:35:23.462
it and diagnose ing 
all the battery problems.  What 

04:35:23.463 --> 04:35:27.587
I want you to do is look at an  
those in action.  So 

04:35:27.588 --> 04:35:32.219
we've been talking about the 
Doze mode in Marshmallow that 

04:35:32.220 --> 04:35:36.181
was introduced and the lighter 
version of Doze that was 

04:35:36.182 --> 04:35:41.827
introduced in the N-release, so 
what I'm showing you here is a 

04:35:41.828 --> 04:35:48.385
bug report that I uploaded to 
the battery historian tool.  The

04:35:50.933 --> 04:35:57.083
that's not exactly Horizontal, 
that's your battery life.  In 

04:35:57.084 --> 04:36:00.595
this case, I manually reset the 
stats so it starts somewhere 

04:36:00.596 --> 04:36:06.686
around 50 percent.  And then 
what you can see is let's zoom 

04:36:07.582 --> 04:36:11.635
into this little area.  When 
your screen was on, you can see 

04:36:11.636 --> 04:36:15.707
that the frequency of your jobs 
and syncs was fairly high.  All 

04:36:16.003 --> 04:36:19.518
the jobs and syncs were getting 
schedule ed fairly periodically.

04:36:20.140 --> 04:36:23.621
     But then after the scene 
has been turned off for a while,

04:36:26.588 --> 04:36:29.625
that's the lighter 
version of Doze kicking in so 

04:36:29.708 --> 04:36:32.850
some applications would lose 
network access and you start to 

04:36:32.851 --> 04:36:37.654
see that now your jobs and your 
syncs are beginning to get less 

04:36:37.655 --> 04:36:41.013
and less frequent and getting 
batched together.  Further out, 

04:36:41.014 --> 04:36:44.219
after the device has had its 
screen off for a while, and it 

04:36:44.220 --> 04:36:46.870
has been stationary, you see the

04:36:46.871 --> 04:36:49.583
device entering this deeper Doze

04:36:49.584 --> 04:36:53.715
mode which is shown in the blue 
row there.  And when that 

04:36:53.716 --> 04:36:57.349
happens we know that the device 
is not being touched bit user, 

04:36:57.350 --> 04:36:59.141
is not being used, and that's an

04:36:59.142 --> 04:37:00.869
opportunity for the job 
schedule        

04:37:00.870 --> 04:37:04.062
scheduler API to start running 
and batching a lot of the 

04:37:04.063 --> 04:37:05.886
activity ies together.  So you 
see 

04:37:05.887 --> 04:37:11.163
under the blue bars the job 
schedule er is fairly infrequent

04:37:12.964 --> 04:37:17.429
the maintenance windows.
     Now, what's really 

04:37:17.430 --> 04:37:19.746
interesting is, and this slide 
will help give you a perspective

04:37:20.061 --> 04:37:24.061
  uses the most power on phones.
  Initially, when 

04:37:24.062 --> 04:37:28.496
the screen was on, my battery 
level was discharge ing

04:37:29.068 --> 04:37:29.581
             discharge ing 
really 

04:37:29.582 --> 04:37:34.423
fast, so you see this license 
that's my battery going from 50 

04:37:34.424 --> 04:37:39.759
to 30 fairly quickly and after 
the screen is turned off and  

04:37:39.760 --> 04:37:44.907
kicked in, that's when 
you see that my battery is not 

04:37:45.023 --> 04:37:50.504
going very fast and might have 
even -- then as soon as the 

04:37:50.505 --> 04:37:55.443
screen is turned back on we see 
that the device exited the Doze 

04:37:55.638 --> 04:37:58.864
mode and you go back to that 
steep discharge of what I'm 

04:37:58.865 --> 04:38:04.118
playing a game or watching a 
video.

04:38:04.119 --> 04:38:06.721
   &gt;&gt; MEGHAN DESAI: That's 
pretty cool.  So all that stuff 

04:38:06.722 --> 04:38:11.276
we were talking about with coale

04:38:11.277 --> 04:38:15.335
coalescing actually works.
   &gt;&gt; ASHISH SHARMA: That's 

04:38:15.336 --> 04:38:16.333
living proof.
   &gt;&gt; MEGHAN DESAI: That's 

04:38:16.334 --> 04:38:18.650
pretty cool.
   &gt;&gt; ASHISH SHARMA: So, once 

04:38:18.651 --> 04:38:22.280
you have uploaded a bug report 
it will now show you all of the 

04:38:23.034 --> 04:38:25.513
that was collected 
on this device.  So which jobs 

04:38:25.514 --> 04:38:27.404
were run, for how long they were

04:38:27.405 --> 04:38:31.082
run, which applications acquire 
ed 

04:38:31.083 --> 04:38:34.578
locks and for how long.  And 
there's a whole bunch of 

04:38:34.579 --> 04:38:38.169
information here suchs       
suchs       suchs as the 

04:38:38.170 --> 04:38:40.301
mobile activity, which 
application used the most number

04:38:44.101 --> 04:38:47.169
get a good overview in a very 
quick fashion on what exactly 

04:38:47.444 --> 04:38:49.572
happened with your device.
   &gt;&gt; MEGHAN DESAI: So hold on. 

04:38:51.919 --> 04:38:53.062
cool but I thought you said that

04:38:53.063 --> 04:38:54.408
this was going to help me figure

04:38:54.409 --> 04:38:56.696
out issues with my application.
   &gt;&gt; ASHISH SHARMA: Yes.

04:38:56.697 --> 04:38:59.566
   &gt;&gt; MEGHAN DESAI: Can I do 
that with this?

04:38:59.567 --> 04:39:03.119
   &gt;&gt; ASHISH SHARMA: Yes, Meghan

04:39:03.120 --> 04:39:07.302
that leads me to my very next 
slide which is, you can actually

04:39:09.275 --> 04:39:13.137
your app and the moment you do 
that, this takes you to this app

04:39:15.330 --> 04:39:16.653
of the same information just for

04:39:16.654 --> 04:39:20.133
your app.  So you can look at 
all the jobs that got fired, 

04:39:20.374 --> 04:39:26.435
whatever processes you were 
running, how much WiFi data, 

04:39:26.436 --> 04:39:28.574
sense ors, all of this stuff 
just 

04:39:28.575 --> 04:39:30.576
for your app.  And the very cool

04:39:30.577 --> 04:39:31.544
thing I don't have in the slides

04:39:31.545 --> 04:39:33.909
is once you pick your 
application, if you go back and 

04:39:33.910 --> 04:39:39.830
look at the UI in timeline of 
events, you will see in the job 

04:39:40.048 --> 04:39:41.702
schedule er row for the sync row

04:39:41.703 --> 04:39:44.639
on the the jobs and syncs for 
your applications will appear 

04:39:44.852 --> 04:39:49.190
and all else will disappear, so 
that can relating give you -- 

04:39:49.626 --> 04:39:54.806
relating give               
really give you visibility into 

04:39:54.807 --> 04:39:58.116
how your application was 
schedule ing these apps.  So we 

04:39:58.117 --> 04:40:03.062
found this to be very helpful 
but there is one case that has 

04:40:03.063 --> 04:40:05.312
been especially painful for me, 
and that is when you are 

04:40:05.866 --> 04:40:07.581
develop       
developing your app or say you 

04:40:07.582 --> 04:40:12.683
made a change in your app and 
suddenly your device is 

04:40:12.684 --> 04:40:14.444
discharge ing fast.  Now, I 
write 

04:40:14.445 --> 04:40:18.416
perfect code.  I never make 
mistakes.  But then my device is

04:40:21.247 --> 04:40:24.239
this situation more than I'd 
like to admit.

04:40:24.240 --> 04:40:27.308
     I'm sure a lot of us have 
been in this situation for one 

04:40:27.309 --> 04:40:34.233
or the other time and for a that
 we have is an AB comparison 

04:40:34.234 --> 04:40:39.036
mode.  What you can do is employ

04:40:39.037 --> 04:40:42.261
two bug reports and if you have 
a different case, what the tool 

04:40:42.388 --> 04:40:46.087
will do is highlight all the 
differences that it sees between

04:40:46.088 --> 04:40:50.081
 two bug reports.  Say, for 
example, it's compare ing file 

04:40:50.289 --> 04:40:51.938
one 
versus file two and it's telling

04:40:57.624 --> 04:41:00.923
used  than the other.  
And let's say the screen was 

04:41:00.924 --> 04:41:05.469
less than 2.5 times and a whole 
lot of other good stuff.  I 

04:41:05.470 --> 04:41:09.749
haven't shown you all of the 
details but if you upload bug 

04:41:11.462 --> 04:41:16.090
reports, it will automatically 
normalize those bug reports.  It

04:41:18.119 --> 04:41:20.997
which can give you a very good 
starting point as to what 

04:41:20.998 --> 04:41:24.182
actually changed on the device, 
whether it was really my app or 

04:41:24.183 --> 04:41:27.423
some other apps that are doing 
something that may have 

04:41:27.424 --> 04:41:30.972
accounted for this difference.
     So, that's an interesting 

04:41:30.973 --> 04:41:35.501
mode and to wrap up, I'd like 
you to look at one last feature 

04:41:35.502 --> 04:41:41.831
on this tool, which is my 
personal favorite.  And this is 

04:41:41.832 --> 04:41:44.194
for the true geeks out there so 
if you have a phone and if you 

04:41:44.751 --> 04:41:46.480
are able to modify your phone to

04:41:46.481 --> 04:41:54.468
connect it to a power monitor 
and say you were recording the 

04:41:54.582 --> 04:41:56.312
instantaneous current values    
    values 

04:41:56.313 --> 04:41:59.201
when the device was actually 
running, what you can do is up  

04:41:59.202 --> 04:42:05.481
upload a bug report and record 
these battery ies to the the 

04:42:05.482 --> 04:42:08.898
battery historian and it will 
show you 

04:42:12.223 --> 04:42:13.615
what your instantaneous 
draw was and what the device was

04:42:22.425 --> 04:42:28.393
running, your draw was close to 
800 million ampules but when the

04:42:30.247 --> 04:42:32.919
hard    
hardly anything.  You can't even

04:42:39.158 --> 04:42:40.788
power discharge ed from your 
phone 

04:42:40.789 --> 04:42:41.993
when you're actively doing 
stuff     

04:42:41.994 --> 04:42:46.872
stuff.  And when you do this, 
when you use the job schedule er

04:42:48.596 --> 04:42:50.620
a lot of activity, it's not hard

04:42:50.621 --> 04:42:53.475
to see that your phone will now 
last much longer and really take

04:42:55.419 --> 04:42:56.939
device that doesn't last as 
long    

04:42:56.940 --> 04:43:00.981
long.
   &gt;&gt; MEGHAN DESAI: That's 

04:43:01.280 --> 04:43:05.588
relating cool, Ashish.  I'd love
  amp meter on what's 

04:43:05.589 --> 04:43:10.561
happening on my phone.
   &gt;&gt; ASHISH SHARMA: Yeah, there

04:43:12.117 --> 04:43:15.113
   &gt;&gt; MEGHAN DESAI: So what's 
next?  Well you saw how these go

04:43:20.801 --> 04:43:22.213
the 
battery and memory.  What we 

04:43:22.214 --> 04:43:27.195
want you to do is reduce, what 
you can't reduce, defer when the

04:43:29.758 --> 04:43:32.080
you 
can't defer, at least help us co

04:43:36.582 --> 04:43:42.194
use job dispatcher and job 
schedule er instead of using 

04:43:42.492 --> 04:43:46.027
background apps.  Check out 
battery historian, as Ashish 

04:43:46.028 --> 04:43:48.784
mentioned.  We also want you to 
start remove ing          

04:43:49.003 --> 04:43:50.490
remove ing your dependence y ies

04:43:50.491 --> 04:43:51.929
in your applications on static

04:43:51.930 --> 04:43:53.569
statically declare ed background

04:43:53.570 --> 04:43:57.120
receive ers as well as any 
background services and send us 

04:43:57.121 --> 04:44:01.131
some feedback on when you're 
unable to do that using job 

04:44:01.132 --> 04:44:06.399
schedule er or job dispatcher.  
We'd love to hear from you.  We 

04:44:06.400 --> 04:44:07.989
want to get together.  With that

04:44:07.990 --> 04:44:09.207
that, if you have any questions,

04:44:09.208 --> 04:44:18.995
you can join us at office hours 
in stage nine at 6:00 as well as

04:44:21.828 --> 04:44:26.899
     (Presentation ended 

04:44:30.082 --> 04:44:31.557
at 7:48      
7:48 p.m. CST)

04:45:56.667 --> 04:45:58.667
 auto for 

04:46:30.150 --> 04:46:34.371
Everyone
     May 18, 2016

04:46:34.372 --> 04:46:38.562
     8:00 p.m. CST

04:46:38.563 --> 04:46:38.957
     Services Provided By:
          Caption First, Inc.

04:46:38.958 --> 04:46:42.358
          P.O. Box 3066
          Monument, CO 80132

04:46:38.958 --> 04:46:42.358
          1 877 825 5234
          +001 719 481 9835

04:46:38.958 --> 04:46:40.958
          www.captionfirst.com

04:58:42.967 --> 04:58:49.307
   &gt;&gt; Hi, everybody.  My name is
  and I'm an engineering 

04:58:49.308 --> 04:58:50.558
manager on the Android Auto team

04:58:50.559 --> 04:58:53.836
team.  So it's great to see so 
many people here.  I hope nobody

04:58:56.881 --> 04:59:00.687
we're going to talk about a few 
things in today's session.  

04:59:00.688 --> 04:59:04.121
First I'm going to spend a few 
minutes talking about where we 

04:59:04.122 --> 04:59:06.878
are today then a few of my 
colleagues are going to come up 

04:59:07.258 --> 04:59:10.673
and do some demos, bullet 
majority of this session is 

04:59:10.674 --> 04:59:13.218
going to be a deep five into how

04:59:13.219 --> 04:59:19.914
to bring your applications into 
Android Auto.  In 2013, we 

04:59:19.915 --> 04:59:23.956
launched Android Auto so create 
services in the car.  In the two

04:59:30.339 --> 04:59:32.518
now have 30 
manufacturers, and by the end of

04:59:34.750 --> 04:59:39.075
double this number to 200 
support every car manufacturer.

04:59:39.485 --> 04:59:43.589
     I want to take a minute to 
say thank you to all the 

04:59:43.590 --> 04:59:46.070
develop       
developers to supported Android 

04:59:46.071 --> 04:59:51.436
Auto.  We've also recently 
launched Android Auto in 19 new 

04:59:52.310 --> 04:59:56.029
ies including Brazil, 
Russia, and India, which 

04:59:56.372 --> 04:59:57.497
brings      
bringses us to 30 country ies 

04:59:57.498 --> 04:59:59.498
and 
more on the way.  We've gotten a

05:00:02.261 --> 05:00:07.610
use ers and I'm pleased to say 
that the three most requested 

05:00:07.611 --> 05:00:12.526
features is coming soon.  The 
first is okay Google.  Employed 

05:00:12.527 --> 05:00:16.978
already has a rich voice 
database but being able to 

05:00:16.979 --> 05:00:20.652
command voice in the car is a 
natural.  So we're bring okay 

05:00:20.841 --> 05:00:28.620
Google.  The second is Ways.  
I'm very excited about this.  

05:00:29.742 --> 05:00:34.961
Ways has a big community, and 
Waysers have been very vocal 

05:00:35.143 --> 05:00:38.064
about Android Auto support so 
we've been working with Ways to 

05:00:38.174 --> 05:00:42.319
make that happen.  I think 
they've done an awesome job and 

05:00:42.320 --> 05:00:45.454
you can actually see a demo in 
the box that way.

05:00:45.455 --> 05:00:49.979
     The third is wireless.  We 
think Android Auto is a great 

05:00:49.980 --> 05:00:52.901
experience but wouldn't it be 
earn e even better if you could 

05:00:53.227 --> 05:00:56.366
use it without even having to 
take your phone out of your 

05:00:56.367 --> 05:00:58.367
pocket?  So the good news is 
we're working with manufacturers

05:01:01.406 --> 05:01:05.220
      wireless their WiFi.  So 
these are 

05:01:05.221 --> 05:01:08.358
improvements.  There are many 
more we're working on but we 

05:01:08.476 --> 05:01:09.672
can't ignore that there are over

05:01:09.673 --> 05:01:13.933
a billion drivers who don't yet 
have Android Auto.  We know many

05:01:15.575 --> 05:01:19.819
in their car doc for turn by 
turn navigation.  We think we 

05:01:21.111 --> 05:01:25.273
can make this safer by letting 
people use Android Auto on their

05:01:27.488 --> 05:01:30.474
coming soon, Android Auto will 
give access to the same features

05:01:32.711 --> 05:01:34.367
an interface that's designed for

05:01:34.368 --> 05:01:37.406
driving.  Paco will be up on 
stage to tell us more about it 

05:01:37.934 --> 05:01:40.360
in a few minutes.
     (applause)

05:01:43.330 --> 05:01:46.643
in our sandbox and I recommend 
checking that out as well.  This

05:01:51.283 --> 05:01:52.611
number of new use ers and that's
 a 

05:01:52.612 --> 05:01:54.901
great thing for developers, too.

05:01:54.902 --> 05:01:58.757
So we're excited about bring 
Android Auto to new use ers but 

05:01:58.758 --> 05:02:02.914
what about the future?  We're 
seeing fully digital instrument 

05:02:03.666 --> 05:02:06.973
clusters and cellular  but we 
need a 

05:02:06.974 --> 05:02:09.563
platform and more importantly, 
we need an ecosystem.  In fact, 

05:02:10.301 --> 05:02:12.317
s have 
recognized this and are already 

05:02:12.529 --> 05:02:13.620
choose ing Android Auto for 
their 

05:02:13.621 --> 05:02:17.880
IVI operating system, but they 
have to do a lost work to adapt 

05:02:18.595 --> 05:02:22.009
it to an in-cabin experience so 
we're putting

05:02:32.995 --> 05:02:35.322
 automotive support       
support, it supports everything 

05:02:36.239 --> 05:02:40.602
that makes Android great like 
multiuser and multitasking, and 

05:02:40.859 --> 05:02:44.770
it will be a full support 
release.  In fact, in the 

05:02:44.771 --> 05:02:45.701
N-release coming   ing this year
, 

05:02:45.702 --> 05:02:47.702
we'll include many of these 
features already iment we're 

05:02:47.725 --> 05:02:51.341
really excited to work with our 
car manufacturers, and in our 

05:02:51.862 --> 05:02:55.200
sandbox we have a concept car 
that we built showing off this 

05:02:55.201 --> 05:02:57.356
technology.  That's one I 
recommend you check out, 

05:02:57.357 --> 05:02:59.114
although there's a bit of a line

05:02:59.115 --> 05:03:00.673
right now.  But most importantly

05:03:00.674 --> 05:03:05.031
importantly, we're working to 
ensure that apps built for 

05:03:05.032 --> 05:03:07.411
Android Auto work seemlessly  
    lessly on 

05:03:07.412 --> 05:03:15.631
our built in info tainmenst 
systems so there's a lost work 

05:03:16.225 --> 05:03:18.874
on that.  Let me introduce Paco 
to show you some of the things 

05:03:19.004 --> 05:03:21.541
I've talked about.
   &gt;&gt; PACO GALANES: Thank you, 

05:03:21.542 --> 05:03:25.928
Yes. good to see so many of you 
here today.  Good that it's 

05:03:25.929 --> 05:03:26.812
air-conditioned in herement it's

05:03:26.813 --> 05:03:33.686
pretty hot out.  I'm Paco 
Galanes, and as Jeff mentioned 

05:03:33.687 --> 05:03:40.674
before, we are expanding the 
auto platform to create new 

05:03:40.675 --> 05:03:42.682
experiences for existing drivers

05:03:42.683 --> 05:03:45.828
by bringing the 

05:03:52.563 --> 05:03:54.434
experience like 
are we have shown you in the car

05:03:58.330 --> 05:04:01.053
expanding Android natively into 
the car and that's the concept 

05:04:01.219 --> 05:04:03.252
car Jeff already announced.  I'm

05:04:03.253 --> 05:04:07.612
going to give you a demo of how 
this call works together and 

05:04:08.619 --> 05:04:14.237
show some of the features that 
Jeff announced.  All right.

05:04:14.238 --> 05:04:19.158
     So we have Vincent here and

05:04:19.472 --> 05:04:22.267
he is showing the desktop, this 
is a tool that all developers 

05:04:22.268 --> 05:04:28.876
have available and it emulates 
how the screen works once you 

05:04:28.989 --> 05:04:32.207
plug your phone in.  All right. 

05:04:32.208 --> 05:04:36.801
So once you plug in, you launch 
into the home screen and that 

05:04:36.802 --> 05:04:39.173
gives you access to tasks that 
you may perform to get started

05:04:39.742 --> 05:04:42.415
         started.  
We have suggested destinations. 

05:04:44.008 --> 05:04:45.319
location.  Your time of day.  So

05:04:45.320 --> 05:04:47.739
we can tell you, you may want to

05:04:47.740 --> 05:04:50.802
start navigate ing to work 
today.

05:04:56.670 --> 05:04:59.980
the same Googling smarts that we

05:04:59.981 --> 05:05:01.479
use throughout all the platform.

05:05:01.480 --> 05:05:04.404
For those of you not familiar 
with the platform already, let 

05:05:04.405 --> 05:05:06.941
do a quick walk through.
     So the activity at the 

05:05:06.942 --> 05:05:09.579
bottom of the screen gives you 
access to common applications 

05:05:09.580 --> 05:05:16.918
that you'll be using while   We 
have media.  Of 

05:05:16.919 --> 05:05:22.193
course, you have access to your 
dialer and your common contacts

05:05:26.095 --> 05:05:30.483
.  
That was an app.  Contacts.  

05:05:31.106 --> 05:05:38.975
Dialer.  There it is.  And, of 
course, you have also access to 

05:05:39.254 --> 05:05:44.190
Navigation and Maps.  All right.

05:05:44.191 --> 05:05:51.317
Perfect.  Let's go back to the 
Home.  Notice that the whole 

05:05:51.515 --> 05:05:55.448
screen is a lot bigger than any 
other application that runs on 

05:05:55.881 --> 05:05:57.856
your screen, and this is because

05:05:57.857 --> 05:06:06.863
it's designed for driving.
     You need to tap that screen

05:06:10.807 --> 05:06:15.565
 right.  Let's go 
into Navigation now

05:06:24.553 --> 05:06:26.553
.  Of course 
we have integrated

05:06:29.018 --> 05:06:31.118
 Google Maps 
with all the Navigation you're 

05:06:32.020 --> 05:06:36.403
familiar with, but we're also  
popular Navigation 

05:06:36.404 --> 05:06:38.652
app, as you're all aware.  Let's

05:06:38.653 --> 05:06:43.877
switch to it.  There it is.  All

05:06:43.878 --> 05:06:45.646
right.  Vincent is going to pick

05:06:45.647 --> 05:06:52.032
directions.  We're going to the 
beach later today, so he's 

05:06:52.033 --> 05:06:55.271
getting a head start.  He has 
the directions right there in 

05:06:55.272 --> 05:06:57.670
his favorites, and off he goes. 

05:06:57.671 --> 05:07:01.130
Great.
     As with Googling 

05:07:01.131 --> 05:07:05.988
Maps               mol     
Google Maps, the 

05:07:05.989 --> 05:07:07.801
same apply ies here.  We display

05:07:07.802 --> 05:07:12.917
this in the interface but you 
also recognize some of the Ways 

05:07:15.020 --> 05:07:15.946
specific features in the screen 
reporting an incident right 

05:07:15.947 --> 05:07:19.836
there.  Great.  We've also 
integrated message ing, by the 

05:07:20.263 --> 05:07:22.620
way   
way.  Though it's mostly a voice

05:07:24.918 --> 05:07:30.065
speaking of voice, of course, 
we've enabled most of the common

05:07:36.396 --> 05:07:39.061
Android Auto via voice.
     All right.  Let me show you

05:07:39.259 --> 05:07:41.259
  ing actually 

05:07:45.840 --> 05:07:47.840
works in 
the platform.  I'm going to text

05:07:51.340 --> 05:07:58.384
him later.  Of course, he gets a

05:07:58.385 --> 05:07:59.810
quick notification.  Message ing

05:07:59.811 --> 05:08:02.337
is a notification driven 
application.  In the alert, we 

05:08:02.338 --> 05:08:07.116
show you enough information to 
know if you really need to take 

05:08:07.117 --> 05:08:10.334
it or not.  But it goes away and
 always available through 

05:08:10.335 --> 05:08:13.624
the Home screen.  You can decide

05:08:13.625 --> 05:08:16.261
to listen to the message when 
it's safe to do so.  All right.

05:08:16.689 --> 05:08:21.292
   &gt;&gt; Here's the message.  
Finishing my presentation  

05:08:21.905 --> 05:08:28.995
            presentation at 
Google I/O let me know when you 

05:08:29.506 --> 05:08:33.267
get there.
   &gt;&gt; PACO GALANES: Now, he 

05:08:33.268 --> 05:08:35.268
could use voice to send you a 
message or we always give you 

05:08:38.146 --> 05:08:42.560
a customize able message 
that you can just pretap, I'm 

05:08:42.772 --> 05:08:47.888
driving, do not disturb me.  
Note that this works on my    

05:08:47.889 --> 05:08:50.426
many, we 
have many applications already

05:08:55.504 --> 05:09:01.973
your favorite application is 
already in the app.  If you 

05:09:01.974 --> 05:09:04.016
haven't integrated it yet, we'll

05:09:04.017 --> 05:09:10.652
show you how to.  Thank you, 
Vincent.  Let's switch to the 

05:09:11.579 --> 05:09:14.386
video below and let's see what 
Victor has for us there.

05:09:14.387 --> 05:09:18.602
     All right, so that is a 
testing harness for the concept 

05:09:18.603 --> 05:09:25.020
car that we have out there in 
the sandbox . the Mazerati.  

05:09:25.229 --> 05:09:29.691
Come see it later if you have a 
chance.  The concept car has a 

05:09:29.692 --> 05:09:35.520
screen powered by Android.  The 
cluster right above the steering

05:09:38.898 --> 05:09:40.436
 of course.  And the 
bigger infotainment system to 

05:09:40.437 --> 05:09:44.574
the right.  

05:09:50.717 --> 05:09:52.405
Very good.  Because 
of the larger screen that we 

05:09:52.406 --> 05:09:56.509
have available here in the 
infotainment screen, we can make

05:10:03.240 --> 05:10:08.077
of Android to display more than 
the same time    

05:10:08.078 --> 05:10:11.327
time.  You'll notice at the 
bottom we have the climate 

05:10:11.328 --> 05:10:13.838
controlling application.  It 
gets hotter today, so let's cool

05:10:19.404 --> 05:10:24.544
application.  Right now, Maps.  
It's already going to meet us 

05:10:24.882 --> 05:10:29.411
later.  And at the top, we have 
a permanent screen where we can 

05:10:29.412 --> 05:10:32.930
show you all the running 
applications and the running 

05:10:33.121 --> 05:10:35.482
activity ies and we can also, of

05:10:35.483 --> 05:10:37.483
course, show you some 

05:10:40.236 --> 05:10:42.236
content 
coming 

05:10:52.683 --> 05:10:55.281
from Google now or other 
applications.

05:10:55.282 --> 05:10:58.962
     Let's look at some of the 
clusters.  Shows you something 

05:10:58.963 --> 05:11:00.963
new

05:11:08.377 --> 05:11:11.864
 there, which is next from 
Google Maps.  That area can also

05:11:17.701 --> 05:11:20.667
big screen, please.  All right. 

05:11:20.668 --> 05:11:23.408
Now here we see how Victor 
switched to the media player as 

05:11:23.409 --> 05:11:27.575
the main application.  And 
notice that, I don't know if you

05:11:34.510 --> 05:11:36.707
there.  Perfect.  

05:11:45.223 --> 05:11:47.095
Thank you.
     For the Navigation, he has 

05:11:47.096 --> 05:11:49.265
access to all the media 
applications that are out there.

05:11:51.788 --> 05:11:57.820
pick one.  Great media      .  
Media 

05:11:57.821 --> 05:12:00.295
applications have two screens.  
We saw the first one with the 

05:12:00.296 --> 05:12:04.073
playback controls.  Those 
playback controls are standard. 

05:12:09.536 --> 05:12:11.139
course 
we have a second screen which is

05:12:13.378 --> 05:12:16.975
for browse ing          
browse ing content where 

05:12:16.976 --> 05:12:18.976
applications show 

05:12:21.341 --> 05:12:22.295
what's 
available for these that you 

05:12:22.296 --> 05:12:24.147
pick.  We recommend that we keep

05:12:24.148 --> 05:12:26.370
the hierarchy ies kind of 
shallow 

05:12:26.371 --> 05:12:29.388
and that we true I to surface on

05:12:29.389 --> 05:12:32.979
top -- try to surface on top 
personalize ed content.  

05:12:32.980 --> 05:12:36.084
Frequents         
Frequents, favorites, et cetera,

05:12:38.299 --> 05:12:43.573
right.  Hope you can hear that.
   &gt;&gt; This can help anyone can  

05:12:43.907 --> 05:12:46.052
at just about --
   &gt;&gt; PACO GALANES: I thought he

05:12:50.389 --> 05:12:52.241
he's in the park yesterday.  All

05:12:52.242 --> 05:12:56.981
right, Victor will talk to you 
later about how to integrate 

05:12:57.124 --> 05:13:00.291
app   
apps      app   

05:13:00.292 --> 05:13:04.621
apps      app   
apps into the platform if you 

05:13:04.910 --> 05:13:09.840
haven't done so already.  Thank 
you, Victor.  Let's move to the 

05:13:09.841 --> 05:13:11.382
phone here.  Great.  Let me show

05:13:11.383 --> 05:13:15.880
you how the third Android 
surface will work.  No new car 

05:13:16.392 --> 05:13:21.464
needed.  All have I to do is 
bring up the Android Auto 

05:13:21.465 --> 05:13:23.683
application from the icon and 
here I am in 

05:13:26.997 --> 05:13:30.970
the Android Auto 
home screen adapted to my phone.

05:13:33.099 --> 05:13:35.864
to you already.
     I can also send Android 

05:13:35.865 --> 05:13:38.161
Auto to auto launch, when I turn

05:13:38.162 --> 05:13:40.162
it on, for 

05:13:42.400 --> 05:13:45.232
instance.  From the screen I 
have access to the 

05:13:45.233 --> 05:13:49.572
same destinations.  We talked 
about before, is Android Auto 

05:13:50.382 --> 05:13:55.233
the same platform.  I also have 
ongoing activity ies like media 

05:13:55.234 --> 05:13:58.857
and it can show me missed 
messages or missed calls that I 

05:13:58.858 --> 05:14:01.654
may want to 

05:14:14.046 --> 05:14:16.219
return.
     From the media car, I can 

05:14:16.434 --> 05:14:19.056
always go to the media 
application, again.  I have 

05:14:19.057 --> 05:14:23.873
access to all the applications 
running on my phone.  Books and 

05:14:23.874 --> 05:14:29.050
broadcasts -- podcasts          
podcasts          podcasts      

05:14:29.837 --> 05:14:33.191
    podcasts, several 
music apps.  Let me pick one.  

05:14:33.626 --> 05:14:35.170
And when we launch the music a
pp   

05:14:35.171 --> 05:14:37.222
app, I can start playing where I

05:14:37.223 --> 05:14:41.878
left off.  (Music Playing) many 
but I also have access to the 

05:14:41.879 --> 05:14:44.294
full menu, just one swipe away. 

05:14:44.295 --> 05:14:49.219
By the way, the customize able 
controllings              

05:14:49.220 --> 05:14:54.217
controlling                 
 ize able      ize           

05:14:54.218 --> 05:14:56.218
customize

05:15:00.592 --> 05:15:02.909
 able      ize able 
controls are also here.  Another

05:15:06.431 --> 05:15:08.042
Vincent is going to show me that

05:15:08.043 --> 05:15:16.261
he's already in Santa Cruz 
waiting for 

05:15:24.928 --> 05:15:27.143
me.  It's taking him 
a little long to get there today

05:15:28.944 --> 05:15:31.745
the message.  Notice that the 
applications in the phone 

05:15:31.746 --> 05:15:34.316
screen      
screens are a little larger than

05:15:36.092 --> 05:15:39.929
adapted for a 
smaller screen size so I it tap 

05:15:40.453 --> 05:15:43.846
them while I'm driving.  As you 
saw before, I don't have to tap 

05:15:44.173 --> 05:15:47.279
that notification to listen to 
it.  It's always in my home 

05:15:47.280 --> 05:15:51.272
screen.
   &gt;&gt; Here's the message.  Hey, 

05:15:51.273 --> 05:15:53.685
I'm here now.  You can press the

05:15:53.686 --> 05:15:57.883
voice button and say, reply.
   &gt;&gt; PACO GALANES: Of course.  

05:15:57.884 --> 05:16:00.678
I could try to reply with voice,

05:16:00.679 --> 05:16:04.026
but as always, the auto reply  
there and I can just 

05:16:04.027 --> 05:16:05.952
tell him, hey, I'm driving right

05:16:05.953 --> 05:16:09.509
now.  I'll catch you later.  The

05:16:09.510 --> 05:16:12.629
last thing I wanted to show you 
is how the power of voice 

05:16:12.630 --> 05:16:17.729
integration works with Android 
Auto.  I don't know if this is 

05:16:17.730 --> 05:16:21.716
work in this environment.  You 
guys are kind of quiet, so I'm 

05:16:21.897 --> 05:16:29.348
going to try.  Let me see.
     Navigate to santa Cruz.

05:16:29.349 --> 05:16:33.894
   &gt;&gt; Sand      santa Cruz, USA?
  All 

05:16:33.895 --> 05:16:38.842
right.  You should reach your 
destination by 7:30 p.m.

05:16:38.843 --> 05:16:41.478
   &gt;&gt; PACO GALANES: All right, 
so I'm navigate ing, and of 

05:16:41.479 --> 05:16:43.208
course 
the next turn is always 

05:16:43.209 --> 05:16:46.513
available from the home screen  
miss a turn no matter 

05:16:46.514 --> 05:16:52.487
what I'm doing.
   &gt;&gt; Turn right on to Bill 

05:16:52.488 --> 05:16:54.609
Grand parkway.
   &gt;&gt; PACO GALANES: Let me stop 

05:16:54.946 --> 05:16:58.342
this for a second.  All right.  
So I hope that this quick demo 

05:16:58.646 --> 05:17:02.894
gave you an idea of how the 
platform works together.  Next 

05:17:02.895 --> 05:17:05.779
thing that we're going to

05:17:08.888 --> 05:17:11.787
 do is, 
let's go back to the slides.  

05:17:12.088 --> 05:17:13.698
Perfect.  We're going to go into

05:17:13.699 --> 05:17:18.457
more detail about how you 
integrate your apps into the 

05:17:18.458 --> 05:17:20.986
Android Auto platform.  We're 
going to talk about message ing 

05:17:20.987 --> 05:17:25.031
and we're going to talk about 
media and remember that if you 

05:17:25.032 --> 05:17:29.196
already integrated your app, it 
will run seamlessly on both 

05:17:29.197 --> 05:17:36.151
phone and car screens.  We use 
the same interface across all 

05:17:36.152 --> 05:17:40.268
three surfaces.  If you haven't 
integrated yet, stay around and 

05:17:40.979 --> 05:17:46.000
Victor is going to tell us how 
to integrate with media.

05:17:46.001 --> 05:17:48.053
   &gt;&gt; VICTOR CHAN: Thanks, Paco
   (Applause)

05:17:51.700 --> 05:17:58.349
   &gt;&gt; VICTOR CHAN: Hi.  I'm 
Victor.  I'm the software 

05:17:58.350 --> 05:18:02.497
engineering on the Android Auto 
team and I'm here to talk about 

05:18:02.498 --> 05:18:05.694
media apps.  There are a couple 
things I want to focus on 

05:18:05.695 --> 05:18:07.937
today.  First of all, we'll look

05:18:07.938 --> 05:18:11.636
at how to make your media app 
compatible with Android Auto 

05:18:11.956 --> 05:18:15.296
then I'll also provide tips to 
help you provide a great media 

05:18:15.481 --> 05:18:18.515
experience inside the vehicle.
     So, as you saw earlier in 

05:18:18.516 --> 05:18:20.841
the demo, media content can show

05:18:20.842 --> 05:18:25.790
up in many different forms in 
various Android devices.  On the

05:18:25.791 --> 05:18:32.349
 here, we have our media 
fashion eight which is a -- 

05:18:32.350 --> 05:18:34.742
facet which is a template for 
the UI experience where the use

05:18:35.204 --> 05:18:38.027
 er 
can provide feedback.  On the 

05:18:38.028 --> 05:18:43.786
other hand, media content can 
appear more passively such as a 

05:18:43.787 --> 05:18:49.049
card inside our overview stream 
or as a notification inside our 

05:18:49.229 --> 05:18:53.065
overview cluster.  I just want 
to point out again, across all 

05:18:53.280 --> 05:18:57.096
these different surfaces, 
whether a phone or car screen, a

05:19:00.802 --> 05:19:03.923
implement the just once and when

05:19:03.924 --> 05:19:08.903
that's done, Android will do all

05:19:08.904 --> 05:19:11.612
the heavy lifting to ensure a 
safe and pleasant experience.

05:19:12.052 --> 05:19:15.412
     All right, let's dive into 
  First of all, we need to 

05:19:15.413 --> 05:19:19.635
do the set-up because we want 
Android Auto to be able to find 

05:19:19.846 --> 05:19:28.672
your app, so here I point to app
 scripter.  And inside 

05:19:28.673 --> 05:19:34.988
the auto app descriptor, this 
lets us know that your app can 

05:19:35.266 --> 05:19:38.948
provide media content for auto 
devices.  Once we can find you, 

05:19:39.235 --> 05:19:44.651
you'll need to implement a 
service.  In this case, the 

05:19:44.652 --> 05:19:46.924
media browse er surface.  Does 
two 

05:19:46.925 --> 05:19:48.457
things, first of all of provides

05:19:48.458 --> 05:19:52.093
a content hierarchy which is 
what we use to create a content 

05:19:52.699 --> 05:19:53.692
browse er that the use er can 
then 

05:19:53.693 --> 05:20:02.576
use to explore media types at 
the same time, the media browse 

05:20:02.663 --> 05:20:04.504
er 
should provide a content session

05:20:04.505 --> 05:20:09.457
 what we use to provide 
playback in your app.  So here's

05:20:12.190 --> 05:20:14.899
.  
As you can see, we're extending 

05:20:15.653 --> 05:20:20.358
media browse er service compat 
which is available in 22 and 

05:20:20.670 --> 05:20:27.495
high E and of course this will 
help your app run on older 

05:20:27.496 --> 05:20:29.809
devices.
     There are two that we need 

05:20:29.810 --> 05:20:32.854
to implement inside the services

05:20:32.855 --> 05:20:38.662
services.  The first is the 
browse er root of your content 

05:20:38.663 --> 05:20:40.663
tree.  This root itself is not a

05:20:40.837 --> 05:20:44.071
media item, however we use this 
root to retrieve a list of media

05:20:46.336 --> 05:20:50.509
items which are then used to 
populate the top level of our 

05:20:50.510 --> 05:20:56.509
content menu.  Also note that 
root tents may be passed on to 

05:20:56.839 --> 05:21:03.929
you, this could be things like 
suggestions and hints that 

05:21:03.930 --> 05:21:06.224
Android Auto wants to give to 
you in terms of what content you

05:21:08.305 --> 05:21:09.530
respect these when you're expose

05:21:09.531 --> 05:21:13.303
exposing your content.  The 
second method you need to over 

05:21:24.201 --> 05:21:29.594
invoke ed and you will be passed
 a 

05:21:29.595 --> 05:21:33.119
parent ID and we expect you to 
return a list of its children.

05:21:33.120 --> 05:21:35.933
     Let's take a look at this 
on load children method.  First 

05:21:35.934 --> 05:21:39.610
of all, I want to say, if you 
returning media items, try 

05:21:39.611 --> 05:21:43.989
to do so from a cache and the 
reason is, you can imagine a 

05:21:43.990 --> 05:21:47.011
user is driving down the 
highway       

05:21:47.012 --> 05:21:50.646
highway.  They're looking for 
some songs and they're going and

05:21:52.999 --> 05:21:58.289
list and now suddenly your app 
needs to go to a network to 

05:21:58.290 --> 05:22:02.118
download these different songs 
and if the cell service isn't 

05:22:02.265 --> 05:22:03.563
gracious the use er is looking 
at 

05:22:03.564 --> 05:22:05.394
screen and their eyes are not on

05:22:05.395 --> 05:22:09.046
the road so not only is this a 
bad experience, it's also not 

05:22:09.256 --> 05:22:14.974
safe.  So we really recommend 
you to cache your media items so

05:22:17.421 --> 05:22:20.161
called, you're able to return 
the items immediately from 

05:22:20.162 --> 05:22:23.483
memory.
     Now, if you have to, set up

05:22:27.580 --> 05:22:29.535
back through the results object.

05:22:29.536 --> 05:22:31.938
So while we're on the subject of

05:22:31.939 --> 05:22:33.994
content hierarchy ies, let's 
take 

05:22:34.416 --> 05:22:37.693
a look at some of the common  
mistakes that people 

05:22:37.694 --> 05:22:40.309
tend to make.  So in this 
example here, we have a media 

05:22:40.310 --> 05:22:45.849
app that can play radio and a 
separates it down into local 

05:22:46.663 --> 05:22:49.363
radio and further breaks it down

05:22:49.364 --> 05:22:54.856
into different genres like jazz 
or pop or other types of music.

05:22:54.857 --> 05:22:56.649
     In this case, the use er 
has 

05:22:56.650 --> 05:23:00.145
to click at least three times 
before the use er can get to the

05:23:02.229 --> 05:23:04.847
nesting is actually not very 
good because you can imagine 

05:23:05.302 --> 05:23:09.543
again, the user is on the road 
and tapping the screen at least 

05:23:10.074 --> 05:23:12.390
three times before they can do 
anything.  In this case, you 

05:23:12.501 --> 05:23:15.101
should really try to focus 
engage ing content higher up

05:23:18.226 --> 05:23:20.626
 in 
the tree so that it's available 

05:23:18.226 --> 05:23:20.041
to the use er right away.  The 
next thing is, we've heard a lot

05:23:23.218 --> 05:23:24.690
that 
they want to be able to get to 

05:23:24.691 --> 05:23:26.859
all of their media content while

05:23:26.860 --> 05:23:29.816
they're inside the car so we're 
working on ways for use ers to 

05:23:29.817 --> 05:23:34.709
browse through large amounts of 
media content of course in a 

05:23:34.769 --> 05:23:37.822
safe manner.  So what does this 
mean for the active offers?

05:23:37.823 --> 05:23:40.595
     What this mensas should not

05:23:43.710 --> 05:23:48.551
, you should not trun    
truncate your content   In this 

05:23:48.552 --> 05:23:50.956
case, 
there's just two stations 

05:23:50.957 --> 05:23:56.391
because everything else got cut 
off so let's try not to do that.

05:23:56.392 --> 05:23:58.104
     So the last thing I want to

05:23:58.105 --> 05:23:59.846
talk about, content browse ing, 
is 

05:23:59.847 --> 05:24:03.886
if your data is dynamic.  So, 
for example, you're a media app 

05:24:04.547 --> 05:24:08.364
s a play list based 
on where the use er is or the 

05:24:08.591 --> 05:24:12.062
traffic conditions, then when 
that content changes you need to

05:24:12.360 --> 05:24:17.798
 us because we can update 
the content browser through the 

05:24:18.009 --> 05:24:22.930
use er and you would do this  
change call.    Now that we've 

05:24:23.557 --> 05:24:28.274
talked about media browse ing, 
let's take a look at media 

05:24:28.275 --> 05:24:31.497
session.  So the media session 
serves two purposes.  First, it 

05:24:32.244 --> 05:24:38.016
lets you send updates to us 
about playback stakes or meta

05:24:40.906 --> 05:24:46.302
us to remote control playback 
inside your media app.  So here 

05:24:46.303 --> 05:24:49.226
we have our media browse er 
service again.  This time, let's

05:24:51.334 --> 05:24:55.364
method.  Inside of on create, we

05:24:55.365 --> 05:25:02.440
sub stantiate -- sub     
substantiate a 

05:25:02.441 --> 05:25:04.165
media browse er service.  This 
is 

05:25:04.166 --> 05:25:06.640
important because when Android 
Auto connects through your media

05:25:10.150 --> 05:25:15.575
reTrevors the session token and 
creates a media playback which 

05:25:15.576 --> 05:25:20.866
is then used to handle playback 
and receive updates.

05:25:20.867 --> 05:25:23.932
     Also there is the media 
session playback which you will 

05:25:24.347 --> 05:25:26.839
implement to handle playback 
events from Android Auto.  We'll

05:25:29.187 --> 05:25:32.512
the next slide.  And finally, 
remember, when everything is 

05:25:32.513 --> 05:25:36.771
done, release the immediate Yay 
session                       

05:25:36.772 --> 05:25:39.273
media session.  
This frees up any system 

05:25:39.274 --> 05:25:42.113
resources and tells Android Auto

05:25:42.114 --> 05:25:46.850
that you're done playing so we 
can clean up any left over UI 

05:25:47.279 --> 05:25:49.279
elements.
     So here's an example of our

05:25:57.488 --> 05:26:00.147
to handle various 
playback events.  You override 

05:26:00.354 --> 05:26:03.445
them as you need, so, for 
example, if your app is a stream

05:26:05.858 --> 05:26:10.623
you don't need the on script to 
next button because that doesn't

05:26:13.520 --> 05:26:18.021
that as an implementation.  So, 
in case of a playback or on 

05:26:18.022 --> 05:26:20.022
resume, you should check

05:26:22.774 --> 05:26:23.591
 if your 
media session is active.  If 

05:26:23.592 --> 05:26:29.119
it's not, set it to active and 
that shows Android Auto that you

05:26:35.021 --> 05:26:40.589
method is the media ID.  This 
method is invoke ed when a use 

05:26:40.740 --> 05:26:42.740
er go  
goes through the content, clicks

05:26:44.279 --> 05:26:46.160
This method will be invoke ed 
and 

05:26:46.161 --> 05:26:49.017
this media ID will be patched in

05:26:49.018 --> 05:26:53.846
in.  This media ID is the same 
you have passed to us, so you 

05:26:53.847 --> 05:27:01.042
can imagine the media ID should 
be unique and it should be 

05:27:01.043 --> 05:27:03.919
persistent so you can find the 
right ID when the use er kicks 

05:27:04.237 --> 05:27:04.943
on 
it.

05:27:04.944 --> 05:27:06.446
     A note about voice support.

05:27:06.447 --> 05:27:10.195
So if you want your app to 
command through voice, 

05:27:10.196 --> 05:27:13.096
like play jazz on my media app. 

05:27:13.097 --> 05:27:19.358
You'll first need to specify an 
intent filter inside your 

05:27:19.674 --> 05:27:22.007
manifest filter.  This basically

05:27:22.008 --> 05:27:26.663
tells us that you are able to 
handle playback from surge.  So 

05:27:26.664 --> 05:27:30.672
when the use er uses this 
command, 

05:27:30.673 --> 05:27:34.959
the on play from surge will be 
invoke ed.  This the execute a 

05:27:35.275 --> 05:27:38.215
query, so if the query is empty,

05:27:38.216 --> 05:27:41.007
you should first try to play 
something back.  Because this 

05:27:41.554 --> 05:27:43.956
tells the use er that your app 
is 

05:27:43.957 --> 05:27:49.102
response ive and that their 
action 

05:27:49.103 --> 05:27:54.461
has taken place.  If the query 
is valid, we'll pass the 

05:27:54.462 --> 05:27:58.478
information such as artist oral 
bum name.  And 

05:28:01.668 --> 05:28:05.502
finally, if you 
can't find the song, just tell 

05:28:05.503 --> 05:28:09.609
the use er that your app is 
response ive.

05:28:09.610 --> 05:28:11.027
     No further questions let's 
look at some of the updates that

05:28:11.028 --> 05:28:15.041
  can send over to 
Android Auto.  First of all, 

05:28:15.161 --> 05:28:22.034
there's the metadata, that 
contains things like album art. 

05:28:24.768 --> 05:28:34.556
the album art can show up as a 
background image of maybe a 

05:28:34.797 --> 05:28:36.797
15-   
15-inch screen.  In this case, 

05:28:37.072 --> 05:28:38.188
resolution is really important. 

05:28:38.189 --> 05:28:45.240
You can send that to us in two 
ways, a URI.  I recommend a URI 

05:28:45.347 --> 05:28:48.779
because it scales down the bit m

05:28:48.780 --> 05:28:52.081
map to 23 by 23 so if you want a

05:28:52.082 --> 05:28:56.475
high resolution image, the URI 
is the way to go.  So the other 

05:28:56.794 --> 05:28:59.949
stake that you can send us is 
the playback stake.

05:28:59.950 --> 05:29:04.463
     This tells us things like, 
if your app is playing, if it  a

05:29:04.772 --> 05:29:08.225
nd actions that it can   If it 
can skip forward, 

05:29:08.226 --> 05:29:12.245
if it's stopped, and also tells 
us the playback position.  How 

05:29:12.246 --> 05:29:14.583
far along in the song you're 
currently playing.  A couple of 

05:29:14.755 --> 05:29:19.488
tips here.  Don't send us a 
playback stay change every  

05:29:19.699 --> 05:29:21.371
thing that is 
changing is the playback 

05:29:21.372 --> 05:29:24.123
position because we don't use 
this value to update the 

05:29:24.124 --> 05:29:28.673
progress bar instead of our 
media app.  In fact, you're just

05:29:30.865 --> 05:29:34.492
ignore ing these updates.
     On a similar note, if your 

05:29:35.061 --> 05:29:38.120
s actually stopped, don't 
send playback notes unless 

05:29:38.121 --> 05:29:41.453
they're actually changing 
because again, you're just 

05:29:41.454 --> 05:29:45.062
ignore ing them and you're 
taming 

05:29:45.063 --> 05:29:48.443
the system -- taxing the system.

05:29:48.444 --> 05:29:53.242
Finally, I want to talk about 
the buffer.  You should send us 

05:29:53.243 --> 05:29:56.747
a state right away because then 
we can tell the use er that the 

05:29:56.748 --> 05:30:00.473
track is being downloaded 
because if you don't do that, 

05:30:00.474 --> 05:30:04.496
your UI will seem somewhat un  
unresponse ive.  And with that, 

05:30:04.624 --> 05:30:08.156
I 
will hand it over to Vincent for

05:30:08.690 --> 05:30:13.805
  ations.
   &gt;&gt; VINCENT MO: Thanks, Victor

05:30:14.023 --> 05:30:20.675
   (Applause)
   hi, everyone.  My name is 

05:30:20.676 --> 05:30:23.973
Vincent and I'm a manager on the

05:30:23.974 --> 05:30:28.449
Android Auto team.  So with the 
Android Auto, we want use ers to

05:30:30.893 --> 05:30:33.897
accustomed to in the car.  
It's also important that the use

05:30:37.362 --> 05:30:39.052
optimize ed           
optimize ed.  To be honest, this

05:30:42.082 --> 05:30:44.766
Auto has undergone extensive ive

05:30:44.767 --> 05:30:49.804
study ies         
study ies, driver distraction 

05:30:50.397 --> 05:30:52.525
study ies         
study ies where glance time, 

05:30:52.820 --> 05:30:56.934
cognitive load, and performance 
are all factored in.  As you can

05:30:59.972 --> 05:31:03.826
-- this isn't something that we 
think every media app can get 

05:31:04.011 --> 05:31:08.979
right.  In the end, we thought 
it was best for the developers 

05:31:08.980 --> 05:31:12.913
to have an so developers can 
folk s us on making your app 

05:31:13.236 --> 05:31:17.752
great knowing Android Auto will 
provide a safe and pleasant 

05:31:17.753 --> 05:31:21.874
experience.  In this case, I'll 
guide you through how you can 

05:31:22.589 --> 05:31:27.544
easily customer          customi
ze your app.

05:31:27.545 --> 05:31:34.157
     These controls are Android 
Auto and laid  out differently d

05:31:34.348 --> 05:31:36.216
epending  and 
conditions that Android Auto is 

05:31:36.217 --> 05:31:38.476
running in.  For example, I look

05:31:38.477 --> 05:31:44.032
different on the phone screen 
than audio control cards on the 

05:31:44.333 --> 05:31:47.498
car screen and also looks 
different in night mode and day 

05:31:47.615 --> 05:31:50.804
mode.  Again, this isn't 
something that your app will 

05:31:51.004 --> 05:31:53.225
need to be concerned about since

05:31:53.226 --> 05:31:57.475
Android Auto will handle this 
behind the scenes.  How do you 

05:31:57.476 --> 05:32:01.432
get your app to exercise the 
appropriate controls for your 

05:32:01.433 --> 05:32:04.476
sneap in the media session 
playback state, remember that 

05:32:04.763 --> 05:32:08.162
your app is actually already 
update ing the playback state 

05:32:08.163 --> 05:32:10.412
for 
the media session.  Set the 

05:32:10.413 --> 05:32:14.475
supported actions via the set 
actions method in the playback 

05:32:14.678 --> 05:32:19.616
state builder.  The playback 
state compact class if you look 

05:32:19.828 --> 05:32:24.170
into it has a define ed set of 
media action constants like play

05:32:26.307 --> 05:32:31.917
skip previous.  Let's look at 
the action skip to next content 

05:32:32.043 --> 05:32:36.680
as an example.  Because it's 
listed as a supported action, 

05:32:37.001 --> 05:32:40.825
Android Auto will surface the 
button in the controls          

05:32:40.826 --> 05:32:44.619
controls panel.
     When the use er interacts 

05:32:44.620 --> 05:32:47.380
with this button, the media call

05:32:47.381 --> 05:32:52.413
back on skip to next API will 
get invoke ed.  A few things to 

05:32:52.628 --> 05:32:54.504
keep in mind, remember to always

05:32:54.505 --> 05:32:57.956
keep the actions up-to-date 
based on the appropriate 

05:32:57.957 --> 05:32:59.754
playback that the use er might 
be 

05:32:59.755 --> 05:33:01.871
in.  For example, if the use er 
is 

05:33:01.872 --> 05:33:06.731
at the beginning of the play 
list, it might be a good idea to

05:33:09.175 --> 05:33:10.478
We also recommend that the use
 er 

05:33:10.479 --> 05:33:16.057
reports all bugs so that the app

05:33:16.058 --> 05:33:18.606
doesn't lose any functionality. 

05:33:19.036 --> 05:33:22.963
Now what if your media app 
supports something that isn't in

05:33:26.291 --> 05:33:29.270
thumbs up.
     An action stream is very 

05:33:29.271 --> 05:33:35.449
specific to your app and as you 
need for each custom action an 

05:33:35.450 --> 05:33:39.877
action label text, this may be 
accessibility.  A drawable 

05:33:39.878 --> 05:33:43.219
reflex, this is shown in the 
playback control.  Remember to 

05:33:43.431 --> 05:33:47.811
include transparency in it and 
we also recommend using SPG so 

05:33:47.812 --> 05:33:52.800
we can properly display it, and 
lastly there is also an extras 

05:33:53.811 --> 05:33:56.419
bundle that is optional.
     So when the use er 

05:33:56.820 --> 05:34:00.795
interacts 
with the playback control, the 

05:34:00.796 --> 05:34:06.923
on session action of your media 
gets invoke ed.  This is  can 

05:34:08.078 --> 05:34:10.615
handle the actual 
like action.  We also know 

05:34:10.616 --> 05:34:11.940
product branding is important to

05:34:11.941 --> 05:34:14.266
you and we want your apps brand

05:34:14.267 --> 05:34:16.427
branding to show through well in

05:34:16.428 --> 05:34:21.747
Android Auto, is if your app 
already uses the material color 

05:34:21.969 --> 05:34:25.292
extreme, Android Auto will show 
these colors in the appropriate 

05:34:26.408 --> 05:34:30.251
places throughout our UI you can

05:34:30.252 --> 05:34:33.978
also define an Android Auto 
specific theme in your media app

05:34:43.885 --> 05:34:47.578
when the next track is being 
played, a notification with the 

05:34:47.579 --> 05:34:54.814
track name will be shown so be 
sure to specify an icon in your 

05:34:55.338 --> 05:34:57.795
manifest so that your app's icon

05:34:57.796 --> 05:35:03.103
is displayed.  So that's.  With 
a few simple steps you can 

05:35:03.104 --> 05:35:05.914
customize your media app

05:35:09.917 --> 05:35:13.495
 to an 
interface that works across 

05:35:13.496 --> 05:35:15.578
Android Auto.
     Next I want to talk about 

05:35:15.579 --> 05:35:17.060
message ing.  We know that 
staying 

05:35:17.061 --> 05:35:21.718
in touch with people that we 
care about like friends and  

05:35:21.719 --> 05:35:25.226
very important to all us 
regardless of whether 

05:35:25.227 --> 05:35:27.838
we're in the car or not.  It's 
important that use ers can 

05:35:28.395 --> 05:35:31.116
access 
this with minimum extractions 

05:35:31.791 --> 05:35:35.171
            distractions 
they can access on the road.  We

05:35:37.581 --> 05:35:39.581
app 
should be burdened with having 

05:35:39.612 --> 05:35:42.047
to deal with this so with 
message ing weaver taken a 

05:35:42.382 --> 05:35:44.959
similar 
approach.  We have an API to 

05:35:45.216 --> 05:35:46.555
extract out these things so that

05:35:46.556 --> 05:35:49.959
you don't have to worry about 
and focus on getting the message

05:35:51.079 --> 05:35:53.734
This is just      just a recap 
of how 

05:35:53.735 --> 05:35:57.272
message ing works as Paco demoed

05:35:57.273 --> 05:36:01.283
earlier.  It's pretty straight 
forward.  We have a notification

05:36:04.230 --> 05:36:07.130
then there's a message ing card 
that remains in the overview 

05:36:07.131 --> 05:36:09.626
screen.  The API is quite 
simple      

05:36:09.627 --> 05:36:12.226
simple, actually built on top of

05:36:12.227 --> 05:36:15.460
Android notifications, which is 
something I'm sure your app is 

05:36:15.649 --> 05:36:18.697
already using.  So when an 
income ing message arrives, your

05:36:23.180 --> 05:36:24.532
will 
notify Android of the 

05:36:24.533 --> 05:36:28.056
notification.  Now, if your 
notification is extended with 

05:36:28.057 --> 05:36:32.764
car extender, Android Auto will 
be able to receive the 

05:36:32.765 --> 05:36:36.475
notification and display the 
notification to the user.

05:36:36.476 --> 05:36:41.762
     When the use er issues a 
read 

05:36:41.763 --> 05:36:49.234
command via voice, a red pending
  get sent back to your 

05:36:49.235 --> 05:36:52.023
app.  Similarly, when the use er

05:36:52.024 --> 05:36:54.619
reply ies to the conversation, a

05:36:54.620 --> 05:36:58.819
reply pending intent gets sent 
back.  You get Android Auto to 

05:36:58.820 --> 05:37:02.000
recognize your app for message
 ing         

05:37:02.001 --> 05:37:03.488
messaging, make sure you include

05:37:03.489 --> 05:37:07.372
the notification usage in your 
Android manifest.  Okay, so 

05:37:07.373 --> 05:37:09.583
let's dive into the part of 
extending your notification with

05:37:13.888 --> 05:37:16.812
The interesting part had a we 
care about -- that we care about

05:37:22.090 --> 05:37:23.667
     One tip that I want to pass

05:37:23.668 --> 05:37:31.769
on is, if your app is actually 
checking to see if Android Auto 

05:37:31.770 --> 05:37:34.512
is present before extending the 
notification, we recommend not 

05:37:34.513 --> 05:37:40.460
checking for the existence of 
the Android Auto package since 

05:37:40.947 --> 05:37:44.085
that's not very reliable.  
Instead, you can use the UI mode

05:37:46.411 --> 05:37:53.491
is rub     running in car mode.
     So let's look at the unread

05:37:55.088 --> 05:37:59.512
would be useful to 
define some definitions.  So a 

05:37:59.729 --> 05:38:05.320
ledge is essentially just a 
short length of of text that 

05:38:05.524 --> 05:38:06.437
Android Auto will readout to the

05:38:06.438 --> 05:38:10.577
use er.  It's best to not make 
these messages too long.  A 

05:38:10.578 --> 05:38:13.887
conversation is a collection of 
ed together in    in 

05:38:13.888 --> 05:38:17.304
some way.  Typically, messages 
between user and another person 

05:38:17.305 --> 05:38:23.286
would be a conversation.
     So, with that, and  e

05:38:23.483 --> 05:38:26.479
ssentially just 
a set of unread messages for a 

05:38:26.590 --> 05:38:29.902
particular conversation.  So, 
what goes inside this unread 

05:38:30.095 --> 05:38:32.766
conversation?  You can pass any 
conversation name.  This is the 

05:38:32.987 --> 05:38:38.769
text that gets appeared, that 
gets presented to the use er 

05:38:38.770 --> 05:38:41.326
when 
Android Auto presents an unread 

05:38:41.878 --> 05:38:44.127
message.  Obviously, you pass in

05:38:44.128 --> 05:38:46.946
the actual messages.  There 
might be more than one, and in 

05:38:46.947 --> 05:38:49.760
this case, when you set the time

05:38:49.761 --> 05:38:53.689
stamp for these messages, 
include the time stamp for the 

05:38:53.690 --> 05:38:56.625
most recent message.  

05:39:00.972 --> 05:39:03.451
There are 
two rue     remaining ones.  The

05:39:03.452 --> 05:39:05.979
 read 
pending intent and the reply 

05:39:06.300 --> 05:39:09.072
action that we'll dive into in 
the next slides.

05:39:09.449 --> 05:39:12.585
     Also, there's a emergency 
nly has an -- message that 

05:39:12.586 --> 05:39:19.521
only has an image, we recommend 
 usable all text so user doesn't

05:39:19.522 --> 05:39:21.966
 experience 
a broken experience when using 

05:39:22.127 --> 05:39:25.387
back the message.  Also, please 
do think about how this works 

05:39:25.388 --> 05:39:30.190
for group chats.  We recommend 
actually just testing out the 

05:39:30.548 --> 05:39:32.363
flow and seeing if when the user

05:39:32.364 --> 05:39:37.723
is reading back the message, if 
it's a good user 

05:39:43.741 --> 05:39:45.741
experience.  
Next 

05:39:57.724 --> 05:39:59.724
slide.

05:40:05.451 --> 05:40:10.410
Next -- okay.  All right.  
Okay.  So, the read pending  

05:40:10.411 --> 05:40:16.090
again, is pending intent Android
 Auto sends back to 

05:40:16.091 --> 05:40:17.860
your message ing app when the 
use er 

05:40:17.861 --> 05:40:21.733
has invoke ed a read action.  
It's 

05:40:21.734 --> 05:40:24.070
create ing the read pending 
intent 

05:40:24.071 --> 05:40:27.543
is pretty simple.  You create 
the internet that you want 

05:40:27.544 --> 05:40:31.244
Android Auto to send back when 
the user has completed a read 

05:40:31.539 --> 05:40:35.191
message.  The primary things to 
highlight is, you just want to 

05:40:35.773 --> 05:40:41.141
set the action string that is to
 this read action.  

05:40:41.142 --> 05:40:44.669
Be sure to set the component, 
because we want this intent to 

05:40:44.670 --> 05:40:50.089
be complicity            
schist        explicit.  This 

05:40:50.090 --> 05:40:52.438
way, it's 
guarantee ed your app will get 

05:40:52.962 --> 05:40:54.148
the 
pending intent.

05:40:54.149 --> 05:40:57.615
     And then lastly, put the 
conversation ID as an extra and 

05:40:57.616 --> 05:41:01.054
the intents that you can later 
check.  And once you have that, 

05:41:01.401 --> 05:41:07.477
then you can just wrap it in a 
pending intent.  So, receiving 

05:41:07.478 --> 05:41:11.004
this pending -- this read 
pending intent is pretty simple.

05:41:19.474 --> 05:41:22.346
against the read message action 
string that we define ed earlier

05:41:24.731 --> 05:41:27.244
pending intent is sent back to 
your app, the appropriate 

05:41:27.245 --> 05:41:29.985
receive er -- the appropriate 
broadcast receive er is 

05:41:30.492 --> 05:41:33.988
invoke ed.  
And in the on receive call back,

05:41:35.906 --> 05:41:42.060
the intent, and handle the read 
message and event.

05:41:42.061 --> 05:41:47.036
     So, the last part is the 
reply action.  I'll kind of just

05:41:47.234 --> 05:41:51.634
 over this.  Again, this 
is since when there is a reply 

05:41:51.833 --> 05:41:55.596
event, similar to the read 
pending intent, you create an 

05:41:55.597 --> 05:41:58.918
intent with the appropriate 
action string that is specific 

05:41:58.919 --> 05:42:00.445
for the reply message.  And then

05:42:00.446 --> 05:42:03.159
you can wrap the intent with the

05:42:03.160 --> 05:42:08.381
pending intent.  The remote 
input object is just passed 

05:42:08.382 --> 05:42:11.920
along with the pending intent 
that gets sent back to your app 

05:42:12.096 --> 05:42:18.073
which will store the actual 
string, making up of the useer's

05:42:20.209 --> 05:42:24.330
the broadcast receive er that 
you've registered will get the 

05:42:24.617 --> 05:42:28.630
on receive call back, and then 
you can extract the ID and then 

05:42:28.941 --> 05:42:34.201
the message reply.  One tip is, 
when you get this, just don't 

05:42:34.202 --> 05:42:37.627
assume that the use er has read 
any unread messages since the 

05:42:37.628 --> 05:42:42.454
use er can actually send reply
 ies 

05:42:42.455 --> 05:42:46.146
out of band.
     And then, like media, you 

05:42:46.147 --> 05:42:51.235
can also customize the look and 
feel in this notification, the 

05:42:52.125 --> 05:42:56.496
extender object.  Again, 
that was a simple way of making 

05:42:56.497 --> 05:43:00.458
your message ing apps support 
Android Auto and next, I'm going

05:43:02.345 --> 05:43:05.407
   &gt;&gt; PACO GALANES: Hi.  Thank 
you, Vincent

05:43:05.408 --> 05:43:09.840
   (Applause)
     Just wanted to conclude, 

05:43:09.841 --> 05:43:15.489
summarize in what I believe are 
the main three takeaways of the 

05:43:15.490 --> 05:43:19.947
presentation.  The first one is 
that Android is showing great 

05:43:20.260 --> 05:43:24.472
momentum in the number of cars 
that are supporting Android 

05:43:24.473 --> 05:43:25.604
Auto    
Auto.  The number of 

05:43:25.605 --> 05:43:26.417
application           
applications that are already 

05:43:26.418 --> 05:43:29.042
running on the platform and also

05:43:29.043 --> 05:43:32.059
the number of country ies where 
it's already available.  The 

05:43:32.060 --> 05:43:33.767
second one is that we're 
expand      

05:43:33.768 --> 05:43:37.649
expanding our regional platform 
to give your applications 

05:43:37.650 --> 05:43:40.537
significantly more reach by 
enable ing Android Auto on your 

05:43:40.870 --> 05:43:45.575
phone screen and four, bringing 
the power of Android natively 

05:43:45.695 --> 05:43:49.780
into the car.  The last point, 
still, the same interfaces will 

05:43:49.781 --> 05:43:52.051
work across all three surfaces. 

05:43:52.052 --> 05:43:55.696
Your application will run the 
framework that is being tested 

05:43:57.323 --> 05:44:01.778
for this driver distraction.  
Including voice integration to 

05:44:02.299 --> 05:44:03.888
power the most common tasks that

05:44:03.889 --> 05:44:07.290
you can perform. next steps, if 
you're 

05:44:07.291 --> 05:44:12.427
ready to start implementing, to 
start integrating with the 

05:44:12.428 --> 05:44:16.528
platform, all the technical 
details that we talked about 

05:44:16.529 --> 05:44:20.297
today are available on these 
links.  Please join the 

05:44:20.298 --> 05:44:27.043
development -- the developer 
group, Android Auto dev and if 

05:44:27.044 --> 05:44:29.270
you remember any link out     
out of 

05:44:29.271 --> 05:44:33.859
this talk, developerandroid.com/

05:44:33.860 --> 05:44:36.262
developerandroid.com/auto.  In 
the mean time, if you have 

05:44:36.263 --> 05:44:38.970
questions, come talk to us.  The

05:44:38.971 --> 05:44:42.549
sandbox is right behind the big 
tent here and check out the cars

05:44:45.056 --> 05:44:49.591
the concept car and all of the 
other ones.  We also have phones

05:44:51.707 --> 05:44:53.558
works.
     If you have time and want 

05:44:53.559 --> 05:44:58.227
to give code ing a try, we also 
have an Android Auto specific 

05:44:58.448 --> 05:44:59.963
code lab in the code lab section

05:44:59.964 --> 05:45:03.798
section.  If you want to hear 
from us in the future, sign up 

05:45:05.485 --> 05:45:08.530
for news at Android.com/auto.  I

05:45:08.531 --> 05:45:10.561
don't think we have time for QA,

05:45:10.562 --> 05:45:14.739
but again, come talk to us.  
We're in the sandbox.  And I 

05:45:14.740 --> 05:45:18.944
don't want to really take any 
more time of yours.  Please, 

05:45:19.249 --> 05:45:25.034
it's been a long day.  Go enjoy 
the concert.  Go relax.  And 

05:45:25.035 --> 05:45:31.752
thank you very much(Presentation
 ended at 8:49      

