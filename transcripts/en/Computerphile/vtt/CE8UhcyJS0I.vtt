WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:06.359
The video that I want to do today is a
direct follow-up of the one I did a few

00:00:06.359 --> 00:00:12.150
weeks ago whichh Sean so what misguidedly
entitled "The Most Difficult Program to

00:00:12.150 --> 00:00:17.310
Compute?". It was, of course,
all about the Ackermann function. Today I

00:00:17.310 --> 00:00:22.590
want to show to you the Busy Beaver
problem - or the Busy Beaver game, and it

00:00:22.590 --> 00:00:27.900
is far worse than Ackerman [in its behaviour].
It was invented by a gentleman called Tibor

00:00:27.900 --> 00:00:36.540
Rado, in 1962. What he, in his later years,
took on, was to teach beginners about

00:00:36.540 --> 00:00:43.890
Turing machines. Now many of you on the
Sean and Brady wish list of topics to be

00:00:43.890 --> 00:00:46.440
covered said: "I want to know about Turing
Machines - I want to know about

00:00:46.440 --> 00:00:54.360
Undecidability". So, this is a lovely way
to pull it all in because this thing,

00:00:54.360 --> 00:00:59.670
this program, that behaves even worse
than Ackermann, depends, and is utterly

00:00:59.670 --> 00:01:05.309
related to, the idea of a Turing machine.
For those of you want just a bit more

00:01:05.309 --> 00:01:11.549
detail about what's going on at the
Turing Machine level and exactly how

00:01:11.549 --> 00:01:16.080
Tibor Rado developed a particular form of
Turing machine suitable for this game,

00:01:16.080 --> 00:01:21.270
then I'm going to refer you to this short 
introductory movie [Computerphile: Turing Machine Primer]
So, let's look

00:01:21.270 --> 00:01:25.080
at the particular formulation of a
Turing Machine that Tibor Rado

00:01:25.080 --> 00:01:31.770
formulated as a game, which you can play
with your computer program and in fact

00:01:31.770 --> 00:01:36.869
there's Web pages devoted to this. You can
join in on the Busy Beaver community and

00:01:36.869 --> 00:01:42.270
see if you can find a Beaver that's even
busier than the ones currently known.

00:01:42.270 --> 00:01:47.460
But be warned. As you want to go up and up and up 
in size of this problem it [the computation load] goes

00:01:47.460 --> 00:01:55.380
up worse than super exponentially! This
is the single state Turing machine for

00:01:55.380 --> 00:01:59.880
the [easiest] Busy Beaver problem. What the heck 
is this Busy Beaver problem? Busy Beaver

00:01:59.880 --> 00:02:07.829
asks what is the maximum number of 1s
that get printed on your tape, for your

00:02:07.829 --> 00:02:13.650
given Turing Machine, when it halts? 
Now, I've got to add that

00:02:13.650 --> 00:02:18.540
to the end because, as you'll discover,
there are some - there are lots! - of rogue

00:02:18.540 --> 00:02:23.790
Turing Machines which will go berserk,
either printing endless 1s or even

00:02:23.790 --> 00:02:27.960
overwriting them with endless 0s, and
going either to the right, or to the left.

00:02:27.960 --> 00:02:32.670
So - these well-behaved ones - we want them
to halt and stop and just leave

00:02:32.670 --> 00:02:36.870
a big, big tape with lots of 1s and 0s on
it. And it's called Busy Beaver because

00:02:36.870 --> 00:02:41.400
this program is just going bananas,
walking up and down the tape, writing

00:02:41.400 --> 00:02:46.709
1s and 0s, seemingly arbitrarily, but
in accordance with the program

00:02:46.709 --> 00:02:50.580
instructions on the cards. And you're
just saying: "How many 1s do I end up

00:02:50.580 --> 00:02:55.500
with?".  What's the best or worst I can do?
Well, I think this will become a bit more

00:02:55.500 --> 00:03:01.980
alive to you, now, if we take a real,
actual example of a single-card Turing

00:03:01.980 --> 00:03:05.880
Machine for Busy Beaver. So we stick our
read/write head in the middle of this

00:03:05.880 --> 00:03:14.850
tape to start off with. There it is. And
this is card 1. It is the only card

00:03:14.850 --> 00:03:20.220
available to us because this is a one-card 
Turing Machine. [The] rule is, your start

00:03:20.220 --> 00:03:24.630
card is always card 1. The first
thing you say is: "read a symbol". So you

00:03:24.630 --> 00:03:29.010
read a zero. OK? What does the
instruction card tell me to do? It says:

00:03:29.010 --> 00:03:35.790
"overwrite it with a 1" Here's the overwritten 1.
0, remember, means "move to the left" that

00:03:35.790 --> 00:03:45.480
makes 0. So you move the head to here: 1.
That means "go back to instruction card 1".

00:03:45.480 --> 00:03:52.830
I'm already in instruction 1, so what I
do is go back in there, like that, but now,

00:03:52.830 --> 00:03:57.510
again, you say: "Read what's under the head".
- well the heads moved to here - but you're

00:03:57.510 --> 00:04:05.370
under another 0 now. So you say OK,
overwrite that 0 with a 1, shift to the

00:04:05.370 --> 00:04:09.000
left because that's what the 0 means.
Oh blimey! move the head here. Go

00:04:09.000 --> 00:04:13.049
back to state 1 - [but] we're already in 
state 1, go back and do it again. You can see,

00:04:13.049 --> 00:04:16.079
straight away what's going to happen
here: I'm going to whizz off to the left

00:04:16.079 --> 00:04:22.780
writing 1s and it will never, never
stop. So here's the first example then

00:04:22.780 --> 00:04:27.280
of what I referred to in the previous
video. I told you there were things

00:04:27.280 --> 00:04:31.750
called recursively enumerable programs
that sometimes stop and sometimes just

00:04:31.750 --> 00:04:35.860
whizzed into loops and went on for ever.
Well, it's a nice simple example of it

00:04:35.860 --> 00:04:39.640
given that, right at the start, you
probably don't know whether your given

00:04:39.640 --> 00:04:42.790
program is going to whizz left or
right, or whether it's just going to mess

00:04:42.790 --> 00:04:46.870
about in the middle. Start it in the
middle. Give it enough space to go left

00:04:46.870 --> 00:04:49.870
enough space to go right. But the
rules say, in principle, if it needs

00:04:49.870 --> 00:04:57.370
infinite tape give it enough. Now a lot
of the art of this kind of programming

00:04:57.370 --> 00:05:02.110
is to say: "Ah! but is it looping"? It's
pointless giving it infinite tape if

00:05:02.110 --> 00:05:04.990
it's just going to loop and loop and
loop, and not do any different thing,

00:05:04.990 --> 00:05:11.230
forever. And yeah, very very clearly this
one's looping. So, we've done a one-card

00:05:11.230 --> 00:05:18.340
Turing Machine, Busy Beaver attempt, here
and [have] just seen how easy it is to get into

00:05:18.340 --> 00:05:22.930
a loop and spin off doing zillions of
1s that will never end. And you might

00:05:22.930 --> 00:05:26.800
say: "Oh! that's the idea then is it? A sort
of infinite Busy Beaver: it just spews

00:05:26.800 --> 00:05:29.590
out 1s for ever?"
And, unfortunately, the rules of the games they

00:05:29.590 --> 00:05:34.150
say: "No, that doesn't count it's got to halt!"
There's got to be a finite number of

00:05:34.150 --> 00:05:38.770
1s that you can count. 1s that just
go on forever don't count. So, you need to

00:05:38.770 --> 00:05:45.040
get into a 'halt' state, somehow or
another, and have a finite number of 1s to

00:05:45.040 --> 00:05:50.620
count up. So, let's do one that is still a
single-card candidate for a Busy Beaver

00:05:50.620 --> 00:05:55.870
Turing Machine, but one that doesn't loop
indefinitely. This time I'm going to make

00:05:55.870 --> 00:06:04.960
it be 0 - if I read a zero then my
actions are 1 1 0. Actually some of you

00:06:04.960 --> 00:06:10.240
will have spotted already that in a one-card 
set up like this, given that you

00:06:10.240 --> 00:06:14.380
move the head off to the left or the
right, all you ever encounter is zeros,

00:06:14.380 --> 00:06:19.390
you are not going to get into a stage of
ever reading a 1 because you've 

00:06:19.390 --> 00:06:23.770
only got one instruction. And you either
keep re-obeying it, as we saw last time

00:06:23.770 --> 00:06:28.210
when you loop back into itself, or it's a
one-off thing and it does one thing and

00:06:28.210 --> 00:06:33.290
stops. And in this particular case, well,
I'll put 1 1 0 here

00:06:33.290 --> 00:06:37.580
for the 1 case. We won't need that
because - look what happens - if I've read a

00:06:37.580 --> 00:06:43.280
0, which I have there, what do I then
do? The answer is I overwrite it with a

00:06:43.280 --> 00:06:49.400
1; the next 1 to the right of that, in
the instruction layout, says shift right.

00:06:49.400 --> 00:06:53.570
Remember a 0 at that position is
shift left; this 1 is shift right. So I

00:06:53.570 --> 00:07:02.450
shift the read/write head to the right.
but then C0 is the Halt state. Wow! Bound

00:07:02.450 --> 00:07:08.030
to win an award! It reads a zero it
over-writes it with a 1; it shifts one

00:07:08.030 --> 00:07:12.080
place to the right and then stops.
Wonderful extremes isn't it? It either

00:07:12.080 --> 00:07:16.580
whizzes off and never stops writing
1s or else it does precisely one 1 and

00:07:16.580 --> 00:07:20.870
then stops, and says 'done it'! Let's just
do a bit of mental arithmetic here, it's

00:07:20.870 --> 00:07:25.040
not too difficult, in this case. You've
got 0 or a 1 as the things you might be

00:07:25.040 --> 00:07:30.320
reading, but here you've got a triple of
binary digits: it's either 0 or !

00:07:30.320 --> 00:07:34.640
that you read; it's either 0 or 1 that
you shift -  left or right. And it's

00:07:34.640 --> 00:07:39.680
either the Halt state or back into 1,
which is where you go. Right? So, Sean your

00:07:39.680 --> 00:07:46.820
starter for ten: two to the power 3 is 8.
You've got that in the zero case, and in

00:07:46.820 --> 00:07:51.080
general you've also got to say: "Well, I've
got 8 possibilities for the 1 case". So

00:07:51.080 --> 00:08:00.380
8 times 8 is 64. There are 64 one card [Busy Beaver]
Turing Machines but there's only about 4

00:08:00.380 --> 00:08:05.690
possible behaviours; you either zoom off to the
left, printing and overwriting the cells

00:08:05.690 --> 00:08:11.900
with either 1s or 0s. Or you
can write a 1; shift to the left and stop;

00:08:11.900 --> 00:08:17.240
1, shift to the right and stop or
overwrite a 0 with a 0, shift to

00:08:17.240 --> 00:08:21.800
the left and stop, or shift to the right
and stop. Not exactly thrilling! But since

00:08:21.800 --> 00:08:26.330
the aim of the Busy Beaver game is how many 1s

00:08:26.330 --> 00:08:31.730
can you write, regardless of which of the
64 cards you choose - and you must try them

00:08:31.730 --> 00:08:36.349
all out - the answer is you never get
better than one. You write one 1. Rado

00:08:36.349 --> 00:08:41.690
in his paper, calls this e score Sigma (Greek
Sigma). The score for a one-card busy

00:08:41.690 --> 00:08:45.110
beaver the best you can do is 1.
Remember these Turing Machines are just

00:08:45.110 --> 00:08:49.700
made up of sets of cards, in order. that's all.

00:08:49.700 --> 00:08:56.150
So, for the order 2 - you're going to have a
c1 and a c2. If you're having a c2

00:08:56.150 --> 00:09:03.290
possibility - a two-card thing - then that
final column could be 0 to Halt it;

00:09:03.290 --> 00:09:07.940
1 to go back into yourself or 2 to
go to the other card.

00:09:07.940 --> 00:09:12.620
So, you've got three possibilities in
that final column now. So, it's not like 2

00:09:12.620 --> 00:09:18.260
times 2 times 2. It's 2 times 2 times 3
Anyway, you work it all out for the two-

00:09:18.260 --> 00:09:31.670
card case, would you believe there are
20,736 Turing Machines ...
&gt;&gt; Sean: How many?
&gt;&gt; DFB:  20,736

00:09:31.670 --> 00:09:35.630
This number - which is just: "How many
Turing Machines have you got to look at"?

00:09:35.630 --> 00:09:40.610
to see which behaves the best in
printing out lots of 1s. This only goes

00:09:40.610 --> 00:09:45.770
up exponentially - this number - this isn't
bad. But each one of those machines can

00:09:45.770 --> 00:09:52.010
behave worse than super-exponentially. So
Rado's number for how many Turing machines -

00:09:52.010 --> 00:09:55.610
you can seat in his paper. I'll leave you
to work out for yourself why this is

00:09:55.610 --> 00:10:02.510
true the number of Turing Machines, let's
call it N(n) n is [4 x (n + 1)] ^ 2n

00:10:02.510 --> 00:10:09.950
Let's see if that works. Iif I put in 1 here for n

00:10:09.950 --> 00:10:18.430
Right? 1 plus 1 is 2. Two 4s are 8. 8 to the power
of 2 x 1.  2 x 1 is 2. 8 squared is 64.

00:10:18.430 --> 00:10:25.550
Right? What about if I put in n is 2. 2
plus 1 is 3. 3 x 4 is 12.  12 to the

00:10:25.550 --> 00:10:31.640
power of 4, 12 to the power of 4 is 20,736

00:10:31.640 --> 00:10:37.070
So your first job is to enumerate all
those Turing Machines just get all those

00:10:37.070 --> 00:10:44.060
possible two-card combinations that make
20,736 different possibilities and

00:10:44.060 --> 00:10:48.350
you can start to weed out the rubbish
straight away. You can clearly say, first

00:10:48.350 --> 00:10:55.040
of all, if your chosen machine doesn't
have a Halt state somewhere in it then

00:10:55.040 --> 00:10:58.580
it's never ever going to stop and it
can't be a contender.

00:10:58.580 --> 00:11:02.630
So you can rule out all the ones that
don't have a zero somewhere in a

00:11:02.630 --> 00:11:05.779
right-hand column. You can soon get rid
of those - cut it down a little bit.

00:11:05.779 --> 00:11:10.160
But then you have to start running the
Turing Machines to see - like I've done

00:11:10.160 --> 00:11:15.440
here - do they halt? If they halt, how many
1s have they written by the time

00:11:15.440 --> 00:11:20.089
they've halted? It tends to be the case
that all the 1s that get written

00:11:20.089 --> 00:11:24.140
are pretty well bunched together, but the
rules of the game say that's not

00:11:24.140 --> 00:11:28.310
absolutely essential - just start at the
far left with the earliest 1, read

00:11:28.310 --> 00:11:31.579
across to the right and count up the
number of ones you've got. And that's your

00:11:31.579 --> 00:11:36.890
score. But it must halt. It mustn't be in
part of a "I'm going on for ever", sort of loop.

00:11:36.890 --> 00:11:43.670
There are some candidates for best
Busy Beaver of the two-card Turing

00:11:43.670 --> 00:11:51.200
Machines what's the maximum number of
ones that they can print out?  4.

00:11:51.200 --> 00:11:56.240
Not very good. What's all the fuss about?
When you get on to three-card

00:11:56.240 --> 00:12:05.620
Turing Machines, how many of these are
there on your shortlist?   16,777,216

00:12:05.620 --> 00:12:10.339
three-card Turing Machines. What's the
best score you can get off a three card

00:12:10.339 --> 00:12:16.459
machine? Still only 6. Doesn't look very
ominous or dreadful at this stage.

00:12:16.459 --> 00:12:21.350
Four-card ones? How many of those are there?
Now I've gone up to about four-card ones

00:12:21.350 --> 00:12:26.779
in the program I'll give you. The answer.
It's 25.6 trillion

00:12:26.779 --> 00:12:31.820
possible Turing Machines, all of which
have to be run and their behaviour

00:12:31.820 --> 00:12:36.279
investigated. or they have to be
eliminate. These are four-card machines.

00:12:36.279 --> 00:12:43.100
What's the best score you can get off
those thirteen - and this goes worse than

00:12:43.100 --> 00:12:49.520
Ackermann - yeah this is the false dawn. It
just goes berserk now. When you come on

00:12:49.520 --> 00:12:56.120
to five-card Busy Beavers which is where
this huge research still going on, the

00:12:56.120 --> 00:13:01.490
best score, so far, for a five-card Turing
Machine I have not worked out how many

00:13:01.490 --> 00:13:06.170
of those are are it's going to be huge,
all of which have to be investigated. The

00:13:06.170 --> 00:13:11.220
best score, for a five card so far, is 4098.

00:13:11.220 --> 00:13:17.879
It's coming up to 25 years ago that that 
number was discovered. 

00:13:17.879 --> 00:13:24.300
4098 is the best yet, So, I hear you say, what
are they messing about at? They've had 25 years

00:13:24.300 --> 00:13:28.110
and all right there's a few trillion,
quadrillion?, Turing Machines to be

00:13:28.110 --> 00:13:33.569
investigated but all the obvious rubbish
would have been weeded out by now? I may

00:13:33.569 --> 00:13:39.660
say that the German researchers who
discovered this number did have access

00:13:39.660 --> 00:13:44.370
to a supercomputer - it does help!
What's gone wrong? Why isn't there a

00:13:44.370 --> 00:13:47.819
better result and if you look on the
Wikipedia page for this you'll find the

00:13:47.819 --> 00:13:55.560
answer. The answer is that there are
40 candidates, still running, which might

00:13:55.560 --> 00:14:01.709
produce an even better answer than 4098.
And you say: "But surely the darn things

00:14:01.709 --> 00:14:05.759
are either discernibly looping or else
they've stopped"? No - it's really horrible.

00:14:05.759 --> 00:14:10.050
This is the nasty part of it you can get
Turing Machines where you can't tell

00:14:10.050 --> 00:14:14.160
whether they're looping or not. They
consume a lot of tape and then they come

00:14:14.160 --> 00:14:19.620
back and they overwrite bits of the tape
and y' know ... And you think: "Have I seen

00:14:19.620 --> 00:14:24.480
that pattern before?" In the case that I
did for the 1-state Turing Machine we're

00:14:24.480 --> 00:14:29.040
just going:  1 1 1 1 1 1 over and over. It takes no
genius to say "Iit's looping and it's

00:14:29.040 --> 00:14:33.980
doing nothing but reproducing 1s". But you
can imagine that as the numbers go up

00:14:33.980 --> 00:14:40.800
you could get very, very long cyclic
periodicity, with a periodicity of 20

00:14:40.800 --> 00:14:46.620
million (say) or something like this. Tibor
Rado and his student were the people who

00:14:46.620 --> 00:14:52.110
worked out that for a four-card machine
13 was the best result you could get. But

00:14:52.110 --> 00:14:58.079
in getting that result they still had to
look at a handful of rogue machines where they

00:14:58.079 --> 00:15:00.959
weren't sure whether they stopped or not.
Some of them they could prove

00:15:00.959 --> 00:15:06.629
programmatically were definitely looping.
Others they could use human inference to

00:15:06.629 --> 00:15:09.209
argue: "Yes, that is looping, I can show you why?"

00:15:09.209 --> 00:15:15.360
So, yeah, 13 is definitely correct [for the 4-card case]
But for the five-card case, who knows?

00:15:15.360 --> 00:15:20.430
Join the Busy Beaver club. Get your own
supercomputer! Do the work!

00:15:20.430 --> 00:15:25.610
And somebody out there has gone on to
order six. And it is reckoned that the

00:15:25.610 --> 00:15:35.060
minimum possible score for an order six
Busy Beaver will be of the order 10 ^ 10,500

00:15:35.060 --> 00:15:39.690
Now that's getting very close in size to

00:15:39.690 --> 00:15:46.080
ackermann(4, 2). Y'know it to two to the  
sixty-something thousand. Nobody knows what the

00:15:46.080 --> 00:15:50.790
right score is. So can you see that's
already, by order five or six, you're

00:15:50.790 --> 00:15:56.220
getting into Ackermann-size numbers. And
one of the things shown on the Wikipedia

00:15:56.220 --> 00:16:04.010
page, which will delight you, is that for
all sufficient n - and this n is not very big -

00:16:04.010 --> 00:16:09.870
Busy Beaver numbers will always outrank
Ackermann numbers. And the reason for that

00:16:09.870 --> 00:16:14.790
is that, again in the literature which
you can look up for yourself, the reason

00:16:14.790 --> 00:16:21.750
is that the Busy Beaver can be shown to
grow faster than any computable function.

00:16:21.750 --> 00:16:25.830
It doesn't matter what you put in there
but, if it's a computable function that

00:16:25.830 --> 00:16:31.260
has an answer, Busy Beaver can be shown
to grow faster than that in the long run.

00:16:31.260 --> 00:16:36.810
It may not do so for small n,   but
eventually it'll overtake it and go

00:16:36.810 --> 00:16:41.400
completely mad. So, yes, the answer to the
horrible question is: "Are you telling me

00:16:41.400 --> 00:16:45.780
this thing gives you even bigger numbers than
Ackermann does? Yes, it does. Yes it gets 

00:16:45.780 --> 00:16:51.120
effortlessly bigger.
Some people say; " I don't believe all the

00:16:51.120 --> 00:16:55.260
stuff about 'recursively enumerable' -
sometimes it can, y' know, sometimes this

00:16:55.260 --> 00:16:59.130
machine can stop and give you an answer
and sometimes it just whizzes around

00:16:59.130 --> 00:17:04.880
forever. Well here you've got it in front
of you. And it really is not

00:17:04.880 --> 00:17:12.089
terrifically useful. Except it's here as
a teaching example of saying "It may seem

00:17:12.089 --> 00:17:16.589
pointless but this is the worst can
happen with a computer program". You set,

00:17:16.589 --> 00:17:21.990
on the face of it, what seems to be a
perfectly straightforward thing: "Run this

00:17:21.990 --> 00:17:26.100
Turing Machine, hope it halts and then
tell me how many 1s it prints out.

00:17:26.100 --> 00:17:32.550
But behind that is a huge amount of
illustration of theory. You think:

00:17:32.550 --> 00:17:36.480
that's going to be no worse than super
exponential even when it explodes and

00:17:36.480 --> 00:17:43.860
takes off". But  this one rockets up far faster
than Ackermann and very often you will

00:17:43.860 --> 00:17:49.110
say: "If problems are badly behaved they
are either super-exponential or they may

00:17:49.110 --> 00:17:53.880
be even worse - they may actually be
undecidable". And this is what you are

00:17:53.880 --> 00:17:57.410
saying in this thing here ...

