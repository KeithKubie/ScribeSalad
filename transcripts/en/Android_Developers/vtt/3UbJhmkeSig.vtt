WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.592
[TYPING SOUND]

00:00:05.592 --> 00:00:06.070
Hi.

00:00:06.070 --> 00:00:09.310
I'm Chet Haase, an engineer on
the Android team at Google.

00:00:09.310 --> 00:00:12.010
I work on graphics and
animations, and today, I want

00:00:12.010 --> 00:00:14.590
to talk about the new animation
system that came on

00:00:14.590 --> 00:00:16.300
in the 3.0 release.

00:00:16.300 --> 00:00:19.790
Specifically, I want to talk
about ObjectAnimator and its

00:00:19.790 --> 00:00:23.380
ability to animate
view properties.

00:00:23.380 --> 00:00:26.940
So, let's take a look at a demo,
which looks remarkably

00:00:26.940 --> 00:00:29.720
similar to a demo we saw in a
previous episode where we were

00:00:29.720 --> 00:00:31.320
talking about View Animations.

00:00:31.320 --> 00:00:34.310
So the point of today's demo is
to show basically how to do

00:00:34.310 --> 00:00:37.760
similar kinds of things with
the new animation system as

00:00:37.760 --> 00:00:39.730
you could do with the old
animation system.

00:00:39.730 --> 00:00:42.400
So we have some very boring
buttons on the screen with

00:00:42.400 --> 00:00:44.880
names of animations that are
going to run on the buttons as

00:00:44.880 --> 00:00:45.440
we click on them.

00:00:45.440 --> 00:00:46.960
So we have an Alpha Animation
that fades the

00:00:46.960 --> 00:00:48.000
button in and out.

00:00:48.000 --> 00:00:49.470
Translate moves the
button around.

00:00:49.470 --> 00:00:51.520
Rotate spins it around.

00:00:51.520 --> 00:00:55.110
Scale, and then Set runs the
animations in sequence.

00:00:55.110 --> 00:00:57.450
Now, one thing to note about
this demo versus the View

00:00:57.450 --> 00:01:02.220
Animation demo is that you can
use the choreography class

00:01:02.220 --> 00:01:05.170
called Animator Set to actually
run different

00:01:05.170 --> 00:01:06.530
animations on different
objects.

00:01:06.530 --> 00:01:09.900
It's easier to choreograph more
complex animations where

00:01:09.900 --> 00:01:12.670
this animator set is actually
running animations on several

00:01:12.670 --> 00:01:15.300
different objects, not just on
the same button down there.

00:01:15.300 --> 00:01:16.860
Regardless, they're kind
of ugly animations.

00:01:16.860 --> 00:01:18.290
This is not what you'd want
in your application.

00:01:18.290 --> 00:01:21.370
This is a little bit more
about the technique of

00:01:21.370 --> 00:01:23.920
creating and running
these animations.

00:01:23.920 --> 00:01:26.950
Also, just as in the previous
demo where we saw View

00:01:26.950 --> 00:01:30.620
Animations created from
resources, you can also create

00:01:30.620 --> 00:01:34.390
Object Animator animations
from resources as well.

00:01:34.390 --> 00:01:37.370
So we check the little box, and
we can load and run the

00:01:37.370 --> 00:01:38.670
animations that are
then created

00:01:38.670 --> 00:01:41.260
from resources instead.

00:01:41.260 --> 00:01:44.310
On this one, the animation
resource is actually running

00:01:44.310 --> 00:01:46.470
on the same button, so we get
that really egregious effect

00:01:46.470 --> 00:01:48.650
of running as animations
in sequence

00:01:48.650 --> 00:01:51.200
on that single button.

00:01:51.200 --> 00:01:52.580
Demo, not terribly
interesting.

00:01:52.580 --> 00:01:54.170
Code, a little more
interesting.

00:01:54.170 --> 00:01:55.230
So, let's take a look
at the code.

00:01:55.230 --> 00:01:57.370
So we have this class called
Property Animations.

00:01:57.370 --> 00:01:59.860
We have the check box that
controls whether we're going

00:01:59.860 --> 00:02:02.410
to be loading from resources
or loading from code.

00:02:02.410 --> 00:02:06.540
We have the buttons that
we create here.

00:02:06.540 --> 00:02:08.870
We're loading from the resource,
the layout resource,

00:02:08.870 --> 00:02:10.100
and then we have the
animations that we

00:02:10.100 --> 00:02:11.250
create on the fly.

00:02:11.250 --> 00:02:13.930
So this is sort of the general
way of how you create object

00:02:13.930 --> 00:02:17.910
animators to animate specific
properties on views.

00:02:17.910 --> 00:02:19.780
Let me bring this code a little
bit more in line so you

00:02:19.780 --> 00:02:21.250
can actually see it
on the screen.

00:02:21.250 --> 00:02:23.170
So we have an alpha animation.

00:02:23.170 --> 00:02:25.640
This is created by saying,
OK, I want a

00:02:25.640 --> 00:02:26.730
floating point animation.

00:02:26.730 --> 00:02:29.340
There are all these factory
methods on Object Animator as

00:02:29.340 --> 00:02:32.400
well as Value Animator to create
and then return one of

00:02:32.400 --> 00:02:33.460
these animator objects.

00:02:33.460 --> 00:02:36.580
So we're going to say object
animator dot of float, and the

00:02:36.580 --> 00:02:40.240
target of the animation is going
to be the Alpha button

00:02:40.240 --> 00:02:43.910
that we found by ID above, and
we're going to animate the

00:02:43.910 --> 00:02:45.950
property view dot alpha.

00:02:45.950 --> 00:02:47.950
Now, there's different
ways to do this.

00:02:47.950 --> 00:02:52.870
The original way in 3.0 was to
actually use a string where

00:02:52.870 --> 00:02:55.610
you use a word that is then
associated with setters and

00:02:55.610 --> 00:02:57.360
getters on the target object.

00:02:57.360 --> 00:03:00.370
So in this case, we could use
the string "alpha," and then

00:03:00.370 --> 00:03:03.060
it's going to use reflection
or JNI to go in and look at

00:03:03.060 --> 00:03:05.370
that target object you provided
and say, is there a

00:03:05.370 --> 00:03:08.060
set alpha that I can call
during the animation?

00:03:08.060 --> 00:03:13.610
And optionally, it may also look
for a get alpha to derive

00:03:13.610 --> 00:03:16.100
the original value that
it starts from.

00:03:16.100 --> 00:03:20.260
But in I think it was 3.1 or
3.2, we released a new

00:03:20.260 --> 00:03:23.460
property mechanism which are
these static objects on the

00:03:23.460 --> 00:03:26.410
view class itself, and they're
slightly more efficient.

00:03:26.410 --> 00:03:29.310
So instead of using reflection
or JNI to get to the setters

00:03:29.310 --> 00:03:31.900
and getters, we can simply call
directly into a setter

00:03:31.900 --> 00:03:34.200
and getter directly in
the property object.

00:03:34.200 --> 00:03:35.380
So, slightly more efficient.

00:03:35.380 --> 00:03:38.140
I tend to prefer that when I'm
animating view properties.

00:03:38.140 --> 00:03:41.750
So we said, OK, I want to
animate the Alpha button.

00:03:41.750 --> 00:03:44.770
I want to animate the alpha
property on that button, and I

00:03:44.770 --> 00:03:46.380
want to animate it to
a value of zero.

00:03:46.380 --> 00:03:48.710
Note I didn't tell it what
value to start from.

00:03:48.710 --> 00:03:51.700
It's going to assume that it
starts from whatever value it

00:03:51.700 --> 00:03:52.330
has right now.

00:03:52.330 --> 00:03:54.370
So it's going to go ahead and
call the property object and

00:03:54.370 --> 00:03:56.290
say, what value do
you have now?

00:03:56.290 --> 00:03:57.810
Now, animate it to zero.

00:03:57.810 --> 00:03:59.220
It has a default duration.

00:03:59.220 --> 00:04:01.480
Unlike the old animations, which
didn't have a default

00:04:01.480 --> 00:04:04.990
duration, the new Object
Animator animations have a

00:04:04.990 --> 00:04:07.500
default duration of three
milliseconds, so we don't need

00:04:07.500 --> 00:04:08.760
to set that duration.

00:04:08.760 --> 00:04:11.300
We're going to set a repeat
count of one, which means

00:04:11.300 --> 00:04:14.280
we're going to run once and then
repeat once after that,

00:04:14.280 --> 00:04:16.790
and a repeat mode or reverse, so
it's going to fade out and

00:04:16.790 --> 00:04:17.870
then back in.

00:04:17.870 --> 00:04:18.850
Translate animation--

00:04:18.850 --> 00:04:20.029
similarly, we're going
to create an

00:04:20.029 --> 00:04:21.760
Object Animator of float.

00:04:21.760 --> 00:04:24.100
We're going to target the
Translate button, and we're

00:04:24.100 --> 00:04:27.650
going to target the View
Translation X Property and

00:04:27.650 --> 00:04:28.690
give it a value of 800.

00:04:28.690 --> 00:04:30.710
So this means it's going to
start from wherever it happens

00:04:30.710 --> 00:04:32.780
to be right now, which I
happen to know is zero,

00:04:32.780 --> 00:04:35.960
because I wrote the app, and
it's going to animate to a

00:04:35.960 --> 00:04:37.370
value of 800.

00:04:37.370 --> 00:04:40.785
Repeat count of one, a repeat
motor reverse, which means

00:04:40.785 --> 00:04:42.650
it's going to animate over the
right, and then slide back

00:04:42.650 --> 00:04:44.320
over to the left.

00:04:44.320 --> 00:04:45.220
Rotate animation.

00:04:45.220 --> 00:04:46.610
You're probably getting
the pattern by now.

00:04:46.610 --> 00:04:49.630
We say object animator dot of
float of the target that we

00:04:49.630 --> 00:04:51.880
want to animate and the property
on that target we

00:04:51.880 --> 00:04:52.510
want to animate.

00:04:52.510 --> 00:04:54.710
We're going to animate from
its current value, which

00:04:54.710 --> 00:04:56.890
happens to be zero,
to a value of 360.

00:04:56.890 --> 00:04:59.530
So it's simply going to
spin a full loop.

00:04:59.530 --> 00:05:01.720
And by default, it's going to
rotate around its center, and

00:05:01.720 --> 00:05:03.850
you can set the pivot point
for scale in rotation

00:05:03.850 --> 00:05:05.370
animations.

00:05:05.370 --> 00:05:06.400
Repeat count of one.

00:05:06.400 --> 00:05:08.390
Repeat mode reverse, so it's
going to spin, and then it's

00:05:08.390 --> 00:05:09.660
going to spin back.

00:05:09.660 --> 00:05:12.120
And then we have a slightly more
complex one for scaling,

00:05:12.120 --> 00:05:14.060
because we're going to animate
two properties at the same

00:05:14.060 --> 00:05:17.080
time, the scale x as well as
the scale y, so we use this

00:05:17.080 --> 00:05:18.860
other the class called Property
Values Holder, and

00:05:18.860 --> 00:05:21.960
say, I'm going to want a
property values holder of

00:05:21.960 --> 00:05:24.740
float, and we're going
to target these

00:05:24.740 --> 00:05:26.490
properties on the object.

00:05:26.490 --> 00:05:28.470
And we're going to scale up from
whatever it happens to

00:05:28.470 --> 00:05:31.770
be, starts with the default
value of 1 up to a value of 2.

00:05:31.770 --> 00:05:33.630
Then we create a scale
animation, and instead of

00:05:33.630 --> 00:05:36.830
being of float, we're going to
say of property values holder.

00:05:36.830 --> 00:05:38.340
That's the target object.

00:05:38.340 --> 00:05:40.840
These are the property value
holder objects that we're

00:05:40.840 --> 00:05:44.520
going to use, and again, we're
going to repeat and reverse.

00:05:44.520 --> 00:05:46.330
Finally, the set animation.

00:05:46.330 --> 00:05:50.820
This uses the animator set class
which provides an easy

00:05:50.820 --> 00:05:53.610
way for you to have more
interesting choreography of

00:05:53.610 --> 00:05:55.050
multiple animations.

00:05:55.050 --> 00:05:57.480
They can be staggered in time,
or run together, run

00:05:57.480 --> 00:05:58.850
sequentially.

00:05:58.850 --> 00:06:00.300
Lots of different ways
to use this.

00:06:00.300 --> 00:06:02.210
One of the things you'll note
is that there's this fluent

00:06:02.210 --> 00:06:05.190
API where you can say, I want
to play the translation

00:06:05.190 --> 00:06:08.180
animation, and I want to play
that after the alpha animation

00:06:08.180 --> 00:06:09.950
but before the rotation
animation.

00:06:09.950 --> 00:06:12.730
Sort of build up these complex
chains, and then

00:06:12.730 --> 00:06:13.650
you start the animation.

00:06:13.650 --> 00:06:16.250
It figures out the tree, the
graph, of how these things

00:06:16.250 --> 00:06:19.270
interrelate, and then it
executes all of them in the

00:06:19.270 --> 00:06:20.830
order that you specified.

00:06:20.830 --> 00:06:22.950
Then we call the setup animation
which says, OK,

00:06:22.950 --> 00:06:25.370
here's the objects that
we created above, and

00:06:25.370 --> 00:06:28.010
alternately, here's the resource
IDs if you want to

00:06:28.010 --> 00:06:30.290
run it from the resource
instead.

00:06:30.290 --> 00:06:32.350
So we go into that method where
we set up and run the

00:06:32.350 --> 00:06:35.080
animation, and if the check box
is checked, then we need

00:06:35.080 --> 00:06:37.090
to load the resource first.

00:06:37.090 --> 00:06:38.560
And this is something
to be aware of.

00:06:38.560 --> 00:06:41.060
If you are going to use animator
resources, they don't

00:06:41.060 --> 00:06:44.410
have a concept of instances in
the resources, so after you

00:06:44.410 --> 00:06:46.970
load the resource and you have
your animator object, then you

00:06:46.970 --> 00:06:49.320
need to set a target on it so
that it knows what target

00:06:49.320 --> 00:06:51.300
you're actually trying
to animate.

00:06:51.300 --> 00:06:52.360
So we're going to set
the target, then

00:06:52.360 --> 00:06:53.630
we start the animation.

00:06:53.630 --> 00:06:58.190
Alternatively, if we're not
launching from the resource,

00:06:58.190 --> 00:07:00.530
if we're not creating from the
resource, if we're instead

00:07:00.530 --> 00:07:04.150
creating from the codes that we
had above for creating the

00:07:04.150 --> 00:07:06.490
animations, then we simply
call start on that.

00:07:06.490 --> 00:07:09.050
Let's take a look at some of
the resources for how we

00:07:09.050 --> 00:07:09.760
create these things.

00:07:09.760 --> 00:07:13.720
We have an object animator tag,
and we pass in property

00:07:13.720 --> 00:07:16.230
names which should make sense.

00:07:16.230 --> 00:07:17.800
They were sort of created
that way.

00:07:17.800 --> 00:07:18.820
So we have a property name.

00:07:18.820 --> 00:07:19.850
We're going to animate alpha.

00:07:19.850 --> 00:07:21.770
We're going to repeat it
once and reverse it.

00:07:21.770 --> 00:07:25.760
Duration of 300 milliseconds,
and a value to zero.

00:07:25.760 --> 00:07:28.350
So it's simply going to fade
out, and then since it's

00:07:28.350 --> 00:07:30.220
reversing, it's going
to fade back in.

00:07:30.220 --> 00:07:34.010
We have a move animation,
again, similar to

00:07:34.010 --> 00:07:35.740
what we saw in code.

00:07:35.740 --> 00:07:37.620
Scale animation.

00:07:37.620 --> 00:07:39.870
This one is the one that
actually has two properties

00:07:39.870 --> 00:07:42.020
that are being animated
in parallel.

00:07:42.020 --> 00:07:44.030
Instead of using property values
holder, I happen to be

00:07:44.030 --> 00:07:47.580
using an animator set here where
we create two object

00:07:47.580 --> 00:07:49.760
animators on the different
scale x and scale y

00:07:49.760 --> 00:07:51.360
properties.

00:07:51.360 --> 00:07:53.780
Spin is going to do a
rotation animation.

00:07:53.780 --> 00:07:58.020
And then finally, this combo
file is an animator set which

00:07:58.020 --> 00:08:02.190
is going to run all of these
sequentially, and it's going

00:08:02.190 --> 00:08:04.830
to run it all on the same
target object there.

00:08:04.830 --> 00:08:06.760
So this is the new Property
Animation system.

00:08:06.760 --> 00:08:11.350
So if you're running code from
3.0 onwards, it's a more

00:08:11.350 --> 00:08:13.760
robust animation system where
you can target these view

00:08:13.760 --> 00:08:17.140
properties as well as any
arbitrary target and arbitrary

00:08:17.140 --> 00:08:20.350
property, and we'll see some
of that in future episodes.

00:08:20.350 --> 00:08:21.600
Thanks.

