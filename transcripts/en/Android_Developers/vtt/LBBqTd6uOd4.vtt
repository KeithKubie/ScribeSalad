WEBVTT
Kind: captions
Language: en

00:00:00.362 --> 00:00:02.070
DAN GALPIN: In the
early days of Android,

00:00:02.070 --> 00:00:06.030
we made the first SDK available
as a preview to developers.

00:00:06.030 --> 00:00:08.730
The vibrant developer
ecosystem and open platform

00:00:08.730 --> 00:00:10.980
have been important keys
to our success, which

00:00:10.980 --> 00:00:13.650
is why I'm excited that we're
once again giving developers

00:00:13.650 --> 00:00:17.040
a very early preview of some of
what's in store in the upcoming

00:00:17.040 --> 00:00:18.140
version of Android--

00:00:18.140 --> 00:00:21.720
Android P. Your early feedback
is crucial to our efforts

00:00:21.720 --> 00:00:24.300
to push the boundaries
of mobile development.

00:00:24.300 --> 00:00:26.370
In Android P,
JobScheduler has been

00:00:26.370 --> 00:00:29.250
improved to let it better
handle network-related jobs.

00:00:29.250 --> 00:00:31.380
Jobs can now declare
their estimated data size,

00:00:31.380 --> 00:00:34.681
signal prefetching and specify
detailed network requirements.

00:00:34.681 --> 00:00:36.930
For example, when a network
is reported by the carrier

00:00:36.930 --> 00:00:39.870
as being congested, JobScheduler
might defer large network

00:00:39.870 --> 00:00:42.420
requests while it can take
advantage of surplus meter

00:00:42.420 --> 00:00:45.212
capacity to run a prefetch
job that returns content that

00:00:45.212 --> 00:00:46.920
will substantially
improve the app's user

00:00:46.920 --> 00:00:50.710
experience, such as
prefetching top headlines.

00:00:50.710 --> 00:00:53.500
Android P brings performance
and efficiency improvements

00:00:53.500 --> 00:00:55.570
to ART, Android's runtime.

00:00:55.570 --> 00:00:58.030
We've expanded ART's use
of execution profiles

00:00:58.030 --> 00:01:00.310
to optimize apps and reduce
the in-memory footprint

00:01:00.310 --> 00:01:01.970
of compiled app code.

00:01:01.970 --> 00:01:04.660
ART now uses profile information
for on-device rewriting

00:01:04.660 --> 00:01:07.090
of DEX files with
reductions of up to 11%

00:01:07.090 --> 00:01:09.100
across a range of popular apps.

00:01:09.100 --> 00:01:11.680
These correlate closely with
reductions in system DEX memory

00:01:11.680 --> 00:01:14.550
usage and faster startup times.

00:01:14.550 --> 00:01:17.980
Kotlin is seeing massive growth
in the developer community.

00:01:17.980 --> 00:01:20.880
We have heard so much
Kotlin love from developers,

00:01:20.880 --> 00:01:23.460
and we are deepening
our Kotlin investments.

00:01:23.460 --> 00:01:26.160
In P, you'll see the first
results of our platform work

00:01:26.160 --> 00:01:28.320
with new optimizations in ART.

00:01:28.320 --> 00:01:31.020
Apps written with Kotlin
will run faster on P

00:01:31.020 --> 00:01:32.990
than on previous
versions of Android.

00:01:32.990 --> 00:01:35.280
We're continuing to work
with JetBrains to optimize

00:01:35.280 --> 00:01:36.520
the Kotlin compiler.

00:01:36.520 --> 00:01:39.150
And we are also improving
our brand new D8 dexer

00:01:39.150 --> 00:01:40.860
to make sure generated
code from Kotlin

00:01:40.860 --> 00:01:42.730
can run as fast as possible.

00:01:42.730 --> 00:01:45.870
Also, make sure to check out
our ongoing preview of Android

00:01:45.870 --> 00:01:48.480
KTX, which is a set
of extensions designed

00:01:48.480 --> 00:01:50.700
to make Android Kotlin
development even more

00:01:50.700 --> 00:01:52.880
concise and pleasant.

00:01:52.880 --> 00:01:55.340
Android introduces an
easier way to decode images

00:01:55.340 --> 00:01:58.700
to either Bitmaps or Drawables
with ImageDecoder, which

00:01:58.700 --> 00:02:00.800
replaces BitmapFactory.

00:02:00.800 --> 00:02:03.200
ImageDecoder lets you
create a Bitmap or Drawable

00:02:03.200 --> 00:02:05.660
from a ByteBuffer, file, or URI.

00:02:05.660 --> 00:02:08.630
It offers several advantages
over BitmapFactory including

00:02:08.630 --> 00:02:11.270
support for exact scaling,
single-step decoding

00:02:11.270 --> 00:02:14.540
to hardware memory, support
for post-processing and decode,

00:02:14.540 --> 00:02:16.790
and decoding of animated images.

00:02:16.790 --> 00:02:18.972
ImageDecoder allows you
to supply a callback that

00:02:18.972 --> 00:02:20.930
is called after the header
is decoded where you

00:02:20.930 --> 00:02:22.940
can alter the output
rather than having

00:02:22.940 --> 00:02:25.220
to decode the header twice.

00:02:25.220 --> 00:02:28.290
Decode Drawable allows you
to create Drawables directly.

00:02:28.290 --> 00:02:31.240
If the encoded image is
an animated GIF or WebP,

00:02:31.240 --> 00:02:33.920
the Drawable will be an instance
of the new animated image

00:02:33.920 --> 00:02:35.830
Drawable.

00:02:35.830 --> 00:02:38.630
To help deliver the highest
quality viewing experience,

00:02:38.630 --> 00:02:41.450
Android P adds built-in
support for HDR VP9 Profile

00:02:41.450 --> 00:02:45.040
2 enabling the delivery
of HDR-enabled movies.

00:02:45.040 --> 00:02:47.500
We also added support for
substantially improved image

00:02:47.500 --> 00:02:50.990
compression with HEVC
compressed HEIF images,

00:02:50.990 --> 00:02:53.710
which means smaller downloads
and less on-device storage.

00:02:53.710 --> 00:02:56.230
And we're in the process of
enhancing and refactoring

00:02:56.230 --> 00:02:59.260
the media APIs, so stay tuned.

00:02:59.260 --> 00:03:01.480
You can access
streams simultaneously

00:03:01.480 --> 00:03:03.190
from devices that
have logical cameras

00:03:03.190 --> 00:03:05.530
consisting of multiple
physical devices,

00:03:05.530 --> 00:03:07.720
such as dual front
or dual rear cameras,

00:03:07.720 --> 00:03:10.120
enabling new app possibilities.

00:03:10.120 --> 00:03:12.790
Other improvements in camera
include new session parameters

00:03:12.790 --> 00:03:14.680
to reduce delays
during initial capture

00:03:14.680 --> 00:03:17.530
and surface sharing, reducing
the need for camera clients

00:03:17.530 --> 00:03:20.110
to stop and start
camera streaming.

00:03:20.110 --> 00:03:23.050
We've also added APIs for
display-based flash support

00:03:23.050 --> 00:03:25.180
and access to OIS
timestamps to allow

00:03:25.180 --> 00:03:27.160
apps to perform
image stabilization

00:03:27.160 --> 00:03:30.260
or use this data
for special effects.

00:03:30.260 --> 00:03:35.270
Android P adds an API for the
IEEE 802.11 MC Wi-Fi protocol,

00:03:35.270 --> 00:03:38.330
also known as Wi-Fi
Round Trip Time RTT,

00:03:38.330 --> 00:03:40.580
to let you take advantage
of indoor positioning

00:03:40.580 --> 00:03:41.780
in your apps.

00:03:41.780 --> 00:03:43.850
Android P devices
with hardware support

00:03:43.850 --> 00:03:45.770
can use RTT to
measure the distance

00:03:45.770 --> 00:03:50.000
to a nearby Wi-Fi access point
that supports the protocol.

00:03:50.000 --> 00:03:53.270
The device doesn't need to
connect to the AP to use RTT.

00:03:53.270 --> 00:03:55.880
And to maintain
privacy, only the phone

00:03:55.880 --> 00:03:57.800
is able to determine
the distance.

00:03:57.800 --> 00:04:01.010
By measuring distances to
three or more access points,

00:04:01.010 --> 00:04:02.570
apps can calculate
their position

00:04:02.570 --> 00:04:06.090
with an accuracy
of 1 to 2 meters.

00:04:06.090 --> 00:04:09.060
Android P adds an implementation
of the GlobalPlatform Open

00:04:09.060 --> 00:04:10.950
Mobile API to Android.

00:04:10.950 --> 00:04:12.900
On supported
devices, apps can use

00:04:12.900 --> 00:04:16.529
OMAPI to access NFC secure
elements on Android devices

00:04:16.529 --> 00:04:20.510
to enable smart card payments
and other secure services.

00:04:20.510 --> 00:04:23.540
The Neural Networks API was
introduced in Android 8.1

00:04:23.540 --> 00:04:25.970
to provide support for
accelerated on-device machine

00:04:25.970 --> 00:04:26.960
learning.

00:04:26.960 --> 00:04:29.930
In Android P, we're expanding
and improving the API,

00:04:29.930 --> 00:04:31.850
adding support for nine new Ops.

00:04:31.850 --> 00:04:35.030
On Pixel 2, the DP1 build
includes an accelerated

00:04:35.030 --> 00:04:37.900
driver for quantized models.

00:04:37.900 --> 00:04:40.030
Android P is part of our
longer-term initiative

00:04:40.030 --> 00:04:42.640
to modernize the foundations
of the platform and the apps

00:04:42.640 --> 00:04:43.667
that run on it.

00:04:43.667 --> 00:04:45.250
We announced recently
that Google Play

00:04:45.250 --> 00:04:47.590
will require all app
updates to at least target

00:04:47.590 --> 00:04:50.620
Android Oreo by November
2018 and require

00:04:50.620 --> 00:04:54.750
apps with an NDK library to
provide 64-bit support in 2019.

00:04:54.750 --> 00:04:56.680
In line with these
changes, Android P

00:04:56.680 --> 00:04:58.411
will warn users
with a dialog when

00:04:58.411 --> 00:05:00.910
they install an app that targets
an Android platform earlier

00:05:00.910 --> 00:05:03.190
than Android 4.2,
and future versions

00:05:03.190 --> 00:05:06.220
will continue to
increment that limit.

00:05:06.220 --> 00:05:07.810
Every Android
developer should start

00:05:07.810 --> 00:05:11.154
planning to migrate to
target at least API 26 now.

00:05:11.154 --> 00:05:12.820
And we've built a
checklist of resources

00:05:12.820 --> 00:05:15.160
to help and support this effort.

00:05:15.160 --> 00:05:18.490
We're always looking for ways to
improve the user and developer

00:05:18.490 --> 00:05:19.600
experience.

00:05:19.600 --> 00:05:21.610
In this spirit, we're
working to ensure

00:05:21.610 --> 00:05:24.490
that apps don't use
non-SDK interfaces,

00:05:24.490 --> 00:05:28.030
since doing so risks crashes
for users and emergency rollouts

00:05:28.030 --> 00:05:29.270
for developers.

00:05:29.270 --> 00:05:31.720
In Android N, we restricted
the set of symbols

00:05:31.720 --> 00:05:33.520
that NDK code could use.

00:05:33.520 --> 00:05:36.430
And with Android P, we're
further increasing stability

00:05:36.430 --> 00:05:39.550
by expanding these restrictions
to cover the SDK interfaces as

00:05:39.550 --> 00:05:40.420
well.

00:05:40.420 --> 00:05:42.190
In the preview,
you'll see a warning

00:05:42.190 --> 00:05:46.000
when you use a non-SDK interface
that we plan to restrict.

00:05:46.000 --> 00:05:48.970
If you feel that you'll
need the SDK API expanded

00:05:48.970 --> 00:05:51.760
to stop using non-SDK
[? 1s, ?] please let

00:05:51.760 --> 00:05:55.600
us know as soon as you
can via our bug tracker.

00:05:55.600 --> 00:05:58.120
In Android P, we're
providing a standard system

00:05:58.120 --> 00:06:00.250
dialog to prompt the user
to touch the fingerprint

00:06:00.250 --> 00:06:03.220
sensor managing text and
placement as appropriate

00:06:03.220 --> 00:06:04.440
for the device.

00:06:04.440 --> 00:06:06.760
Apps can trigger the system
FingerprintDialog using

00:06:06.760 --> 00:06:08.800
a new FingerprintDialog API.

00:06:08.800 --> 00:06:11.110
We recommend switching to
the new system dialog as soon

00:06:11.110 --> 00:06:13.750
as possible, as the
previous API may not

00:06:13.750 --> 00:06:16.360
be compatible with new devices.

00:06:16.360 --> 00:06:19.150
As part of a larger effort to
move all network traffic away

00:06:19.150 --> 00:06:22.450
from clear text,
unencrypted HTTP to TLS,

00:06:22.450 --> 00:06:24.730
we're also changing the
defaults for network security

00:06:24.730 --> 00:06:27.820
configuration to block
all clear text traffic.

00:06:27.820 --> 00:06:30.460
On Android P and higher,
apps with a network security

00:06:30.460 --> 00:06:33.190
configuration must make
connections over TLS

00:06:33.190 --> 00:06:35.440
unless they explicitly
opt into clear text

00:06:35.440 --> 00:06:37.600
for specific domains.

00:06:37.600 --> 00:06:40.420
To better ensure user
privacy, Android P

00:06:40.420 --> 00:06:43.030
restricts all access to
microphones, cameras,

00:06:43.030 --> 00:06:45.100
and sensors from idle apps.

00:06:45.100 --> 00:06:47.530
When an app is idle, the
mic will report empty audio,

00:06:47.530 --> 00:06:49.504
and the sensors will
stop reporting events,

00:06:49.504 --> 00:06:50.920
while cameras used
by the app will

00:06:50.920 --> 00:06:52.750
be disconnected
and generate errors

00:06:52.750 --> 00:06:55.020
if the app tries to use them.

00:06:55.020 --> 00:06:58.190
Android P gives the user control
over access to the Build.SERIAL

00:06:58.190 --> 00:07:00.350
identifier by putting it
under the read phone state

00:07:00.350 --> 00:07:01.490
permission.

00:07:01.490 --> 00:07:03.410
Direct access to this
identifier has been

00:07:03.410 --> 00:07:06.520
deprecated since Android 8.0.

00:07:06.520 --> 00:07:10.180
Android P adds platform support
for edge-to-edge displays

00:07:10.180 --> 00:07:11.410
with cutouts.

00:07:11.410 --> 00:07:14.550
The status bar will adapt
its height automatically.

00:07:14.550 --> 00:07:16.540
Apps with critical
immersive content

00:07:16.540 --> 00:07:18.910
can use a new platform
API and window insets

00:07:18.910 --> 00:07:20.560
to get the cutout
bounds and a new API

00:07:20.560 --> 00:07:22.060
in the Window
Manager LayoutParams

00:07:22.060 --> 00:07:25.330
to request layout
in the cutout area.

00:07:25.330 --> 00:07:27.470
The updated MessagingStyle
notification

00:07:27.470 --> 00:07:29.870
makes it easier to display
notifications involving

00:07:29.870 --> 00:07:31.640
people or groups of people.

00:07:31.640 --> 00:07:34.360
It provides a standardized way
to handle images and handle

00:07:34.360 --> 00:07:36.750
suggested replies.

00:07:36.750 --> 00:07:40.260
Give your users a seamless
transition to Android P.

00:07:40.260 --> 00:07:42.750
Just download a device
or emulator system image,

00:07:42.750 --> 00:07:44.460
install your app, and test.

00:07:44.460 --> 00:07:46.860
The Android P Developer
Preview includes an updated SDK

00:07:46.860 --> 00:07:49.110
with system images for testing
on the official Android

00:07:49.110 --> 00:07:52.650
Emulator and on Pixel,
Pixel XL, Pixel 2, and Pixel

00:07:52.650 --> 00:07:54.330
2 XL devices.

00:07:54.330 --> 00:07:56.610
Speaking of the Emulator,
it's a great place

00:07:56.610 --> 00:07:58.680
to test or develop
on Android P. It's

00:07:58.680 --> 00:08:00.840
incredibly fast and
convenient to use,

00:08:00.840 --> 00:08:02.970
and you can even model
long screens and screens

00:08:02.970 --> 00:08:05.790
with a display cutout
for cameras and sensors.

00:08:05.790 --> 00:08:08.850
After you've tested, handle
any P behavior changes,

00:08:08.850 --> 00:08:11.400
make any necessary updates,
and publish to Google Play

00:08:11.400 --> 00:08:13.740
without changing
the platform target.

00:08:13.740 --> 00:08:15.840
Then, change your
app's targeting to P,

00:08:15.840 --> 00:08:18.420
and run it with the full
Android P experience.

00:08:18.420 --> 00:08:20.700
Explore the many new
features and APIs

00:08:20.700 --> 00:08:22.764
you can take advantage
of in your app.

00:08:22.764 --> 00:08:24.180
Take a look at the
API Diff Report

00:08:24.180 --> 00:08:27.030
along with the Android
P API reference.

00:08:27.030 --> 00:08:28.950
You can start building
with P by downloading

00:08:28.950 --> 00:08:31.710
the Developer Preview SDK in
tools in the Android Studio.

00:08:31.710 --> 00:08:34.620
We're also releasing an alpha
version of the 28.0.0 Support

00:08:34.620 --> 00:08:36.059
Library for you to try.

00:08:36.059 --> 00:08:38.970
Check out the release
notes for complete details.

00:08:38.970 --> 00:08:40.830
We plan to update the
preview system images

00:08:40.830 --> 00:08:42.187
and SDK regularly.

00:08:42.187 --> 00:08:43.770
This initial release
is for developers

00:08:43.770 --> 00:08:46.770
only and not intended for
daily or consumer use.

00:08:46.770 --> 00:08:50.160
So we're making it available by
manual download in Flash only.

00:08:50.160 --> 00:08:52.040
As we get closer
to a final product,

00:08:52.040 --> 00:08:53.970
we invite consumers
to try it out as well,

00:08:53.970 --> 00:08:56.053
and we'll open up enrollments
through Android Beta

00:08:56.053 --> 00:08:57.100
at that time.

00:08:57.100 --> 00:08:58.470
Stay tuned for details.

00:08:58.470 --> 00:09:01.260
But for now, please note that
Android Beta is not currently

00:09:01.260 --> 00:09:03.240
available for Android P.

00:09:03.240 --> 00:09:05.640
As always, your
feedback is critical.

00:09:05.640 --> 00:09:07.590
So please let us
know what you think.

00:09:07.590 --> 00:09:09.870
The sooner we hear from you,
the more of your feedback

00:09:09.870 --> 00:09:10.920
we can integrate.

00:09:10.920 --> 00:09:12.720
Look in the video
description for details

00:09:12.720 --> 00:09:14.020
on how to report issues.

00:09:14.020 --> 00:09:15.300
And stay tuned.

00:09:15.300 --> 00:09:17.550
This is just our first
preview, after all.

00:09:17.550 --> 00:09:19.890
The Android P story
is just beginning.

00:09:19.890 --> 00:09:23.240
[MUSIC PLAYING]

