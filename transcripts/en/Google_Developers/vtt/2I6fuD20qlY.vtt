WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.380
If you've ever spent days
chasing a bug in your code

00:00:03.380 --> 00:00:05.490
or released an app to the
store only to find out

00:00:05.490 --> 00:00:08.080
it has performance problems,
you will appreciate

00:00:08.080 --> 00:00:09.740
the new debugging
and testing features

00:00:09.740 --> 00:00:12.140
we've added in recent
versions of Android Studio.

00:00:12.140 --> 00:00:13.440
Let's take a look.

00:00:13.440 --> 00:00:15.810
Up first, joining
the memory monitor

00:00:15.810 --> 00:00:18.660
that was available on
Android Studio for some time

00:00:18.660 --> 00:00:20.590
is the new CPU monitor.

00:00:20.590 --> 00:00:23.590
These tools give you an
overview of how running your app

00:00:23.590 --> 00:00:25.990
is affecting the device so
you can spot performance

00:00:25.990 --> 00:00:27.340
problems early.

00:00:27.340 --> 00:00:29.550
If you need to get more
detailed information,

00:00:29.550 --> 00:00:31.900
you can now start Tracking
Object allocations,

00:00:31.900 --> 00:00:34.390
initiate a memory dump
for later analysis,

00:00:34.390 --> 00:00:38.480
and even start tracing method
calls straight from the IDE.

00:00:38.480 --> 00:00:40.130
There's also a new
performance captures

00:00:40.130 --> 00:00:44.170
pane for quick access to any
reports that you've created.

00:00:44.170 --> 00:00:46.960
They can be useful when you're
trying to find memory leaks

00:00:46.960 --> 00:00:51.000
or identify performance
critical sections of your app.

00:00:51.000 --> 00:00:53.910
But you know what's even better
for figuring out where a memory

00:00:53.910 --> 00:00:56.810
leak comes from, knowing
which pieces of code

00:00:56.810 --> 00:00:59.350
hold references to your
objects, preventing them

00:00:59.350 --> 00:01:01.310
from being garbage collected.

00:01:01.310 --> 00:01:03.350
You can see that
information instantly

00:01:03.350 --> 00:01:05.550
during a life debugging session.

00:01:05.550 --> 00:01:08.070
First, start your app
using the debug button

00:01:08.070 --> 00:01:09.820
or attach to a writing process.

00:01:09.820 --> 00:01:12.490
After a successful
connection, the IDE

00:01:12.490 --> 00:01:16.260
will pause execution on any
break points that you specify.

00:01:16.260 --> 00:01:19.330
Your can now select the Show
referring objects command

00:01:19.330 --> 00:01:22.840
on any of the current variables
to get the info you need.

00:01:22.840 --> 00:01:24.920
And speaking of
step-by-step debugging,

00:01:24.920 --> 00:01:27.800
have you ever had to use it
with some third-party library

00:01:27.800 --> 00:01:30.670
where the source code was
missing from your project?

00:01:30.670 --> 00:01:33.990
Android Studio has you covered
with a brand new built-in Java

00:01:33.990 --> 00:01:35.280
decompiler.

00:01:35.280 --> 00:01:37.300
From now on, whenever
you need to check

00:01:37.300 --> 00:01:39.440
the internals of a class
when all you have is

00:01:39.440 --> 00:01:43.140
a JAR file is just one
click away in the editor.

00:01:43.140 --> 00:01:44.720
And you can even
set break points

00:01:44.720 --> 00:01:48.260
and do step-by-step debugging
inside compiled code.

00:01:48.260 --> 00:01:49.930
How cool is that?

00:01:49.930 --> 00:01:52.780
One of the other nifty features
that come with Android Studio

00:01:52.780 --> 00:01:56.610
1.2 is the inlining of
values for local variables

00:01:56.610 --> 00:01:59.280
right there in the Code
Editor when debugging.

00:01:59.280 --> 00:02:02.300
So you don't have to look for
them in the variables pane.

00:02:02.300 --> 00:02:05.740
Also, notice that when you mouse
over an operator expression,

00:02:05.740 --> 00:02:08.400
you can now see the
resulting value in a pop-up

00:02:08.400 --> 00:02:10.270
just like when you
mouse over variables

00:02:10.270 --> 00:02:13.160
to inspect them in more detail.

00:02:13.160 --> 00:02:15.230
But you know what the
worst thing about debugging

00:02:15.230 --> 00:02:17.900
is, it's the debugging itself.

00:02:17.900 --> 00:02:20.930
That's why you should be testing
your apps in the first place.

00:02:20.930 --> 00:02:24.100
And with recent enhancements in
our Gradle plug-in and Android

00:02:24.100 --> 00:02:28.710
Studio, there's now new ways to
write and run automated tests.

00:02:28.710 --> 00:02:30.620
Whether you're doing
test-driven development

00:02:30.620 --> 00:02:33.010
or just want to test
your code quickly,

00:02:33.010 --> 00:02:34.850
one of the main pain
points was having

00:02:34.850 --> 00:02:36.520
to deploy test to the device.

00:02:36.520 --> 00:02:38.730
And we all know that takes time.

00:02:38.730 --> 00:02:41.380
Starting from
Android Studio 1.1,

00:02:41.380 --> 00:02:43.860
there is support for running
unit tests on your development

00:02:43.860 --> 00:02:46.780
machine using the local JVM.

00:02:46.780 --> 00:02:49.570
To use this feature,
first put your JUnit tests

00:02:49.570 --> 00:02:52.590
in the test folder on
your Android module.

00:02:52.590 --> 00:02:54.260
Gradle will create
a special version

00:02:54.260 --> 00:02:58.070
of Android JAR in the class
path when you run the test task.

00:02:58.070 --> 00:03:01.450
Be aware that this JAR doesn't
actually contain working code,

00:03:01.450 --> 00:03:03.810
so you can't use any
framework classes.

00:03:03.810 --> 00:03:05.935
You should use one of the
popular mocking libraries

00:03:05.935 --> 00:03:10.360
like MOckito to mock the Android
dependencies that you need.

00:03:10.360 --> 00:03:12.450
For tests that need
to run on the device

00:03:12.450 --> 00:03:14.700
where the full
framework is required,

00:03:14.700 --> 00:03:17.480
you can use the Android
test source set.

00:03:17.480 --> 00:03:19.810
These tests will be
deployed alongside your app

00:03:19.810 --> 00:03:22.680
and run on the target
device or emulator.

00:03:22.680 --> 00:03:25.660
While not technically part
of Android Studio or Gradle,

00:03:25.660 --> 00:03:27.740
we have recently
released a library

00:03:27.740 --> 00:03:30.520
that contains many classes
that can help you with writing

00:03:30.520 --> 00:03:32.100
and running your tests.

00:03:32.100 --> 00:03:34.740
It's called the Android
Testing Support Library.

00:03:34.740 --> 00:03:38.030
And it's available through the
Android Support Repository.

00:03:38.030 --> 00:03:41.180
It gives you the most up-to-date
testing frameworks and APIs

00:03:41.180 --> 00:03:44.600
made by Google, including an
Android Test Runner with JUnit

00:03:44.600 --> 00:03:46.540
for support, the
Espresso library

00:03:46.540 --> 00:03:50.550
for functional UI testing,
the UIAutomator, and more.

00:03:50.550 --> 00:03:53.090
To find out how to set up
your project for running tests

00:03:53.090 --> 00:03:55.320
using the Android
Testing Support Library,

00:03:55.320 --> 00:03:59.090
follow these links and check out
our documentation and samples.

00:03:59.090 --> 00:04:02.030
If you have any questions or
suggestions regarding debugging

00:04:02.030 --> 00:04:05.010
apps using Android Studio,
you can join the discussion

00:04:05.010 --> 00:04:06.800
in our Google+ community.

00:04:06.800 --> 00:04:07.622
See ya.

00:04:07.622 --> 00:04:09.324
[MUSIC PLAYING]

