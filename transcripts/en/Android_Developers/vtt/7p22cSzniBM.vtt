WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.245
[ROCKET BLAST]

00:00:03.245 --> 00:00:04.620
LYLA FUJIWARA:
Android Jetpack is

00:00:04.620 --> 00:00:07.740
a set of libraries and guidance
for modern Android development.

00:00:07.740 --> 00:00:10.410
Now, there are four categories
that make up Jetpack.

00:00:10.410 --> 00:00:13.080
This video is all
about architecture.

00:00:13.080 --> 00:00:15.910
Here are the architecture
component libraries.

00:00:15.910 --> 00:00:18.250
These libraries work
great on their own,

00:00:18.250 --> 00:00:20.370
but they're also built
with each other in mind

00:00:20.370 --> 00:00:22.650
and can fit together
like puzzle pieces.

00:00:22.650 --> 00:00:24.390
The documentation
contains a guide

00:00:24.390 --> 00:00:27.120
to app architecture, which
shows one way that these puzzle

00:00:27.120 --> 00:00:30.532
pieces can combine to create a
testable and maintainable app.

00:00:30.532 --> 00:00:32.490
This architecture revolves
around the following

00:00:32.490 --> 00:00:33.540
principles--

00:00:33.540 --> 00:00:36.120
the separation of
concerns, loose coupling,

00:00:36.120 --> 00:00:39.100
the observer pattern,
and inversion of control.

00:00:39.100 --> 00:00:39.600
OK.

00:00:39.600 --> 00:00:41.910
Let's go ahead and
start at the bottom.

00:00:41.910 --> 00:00:44.790
Room is a SQLite
object mapping library.

00:00:44.790 --> 00:00:47.310
It gives us annotations to
generate boilerplate code

00:00:47.310 --> 00:00:48.240
for you.

00:00:48.240 --> 00:00:51.450
You declare your SQLite
tables using entity objects.

00:00:51.450 --> 00:00:54.900
Entity objects are just simple
objects with a few annotations.

00:00:54.900 --> 00:00:57.990
For example, I can take this
class representing a user,

00:00:57.990 --> 00:01:00.510
and after I add a
few annotations,

00:01:00.510 --> 00:01:03.990
it becomes a representation
for this SQLite table schema.

00:01:03.990 --> 00:01:06.930
When defining the operations
you perform on your database,

00:01:06.930 --> 00:01:09.540
you essentially write
annotated SQL statements.

00:01:09.540 --> 00:01:11.760
This is where Room's
object-mapping capabilities

00:01:11.760 --> 00:01:12.720
come in.

00:01:12.720 --> 00:01:14.550
You can put entity
objects directly

00:01:14.550 --> 00:01:18.210
into your Room database, or have
your database return entities.

00:01:18.210 --> 00:01:20.610
No conversion or
intermediates are needed.

00:01:20.610 --> 00:01:23.170
Compile time checking
is also included.

00:01:23.170 --> 00:01:25.090
So if you mess up
your SQLite queries,

00:01:25.090 --> 00:01:27.330
Room lets you know right away.

00:01:27.330 --> 00:01:29.790
Room also supports
observable queries--

00:01:29.790 --> 00:01:32.615
including RXJava flowables;
lists, optionals,

00:01:32.615 --> 00:01:37.360
and Guava classes; migration
between schemas; and testing.

00:01:37.360 --> 00:01:39.570
Another fundamental
part of any data layer

00:01:39.570 --> 00:01:41.570
is threading and
background work.

00:01:41.570 --> 00:01:44.460
To make sense of background work
in modern Android development,

00:01:44.460 --> 00:01:47.100
we've created the guide to
background processing, which

00:01:47.100 --> 00:01:49.390
includes this handy table.

00:01:49.390 --> 00:01:52.770
You'll notice that there is this
new library here, WorkManager.

00:01:52.770 --> 00:01:56.430
The WorkManager library provides
a unified API for deferrable,

00:01:56.430 --> 00:01:58.770
one-off, or recurring
background tasks

00:01:58.770 --> 00:02:00.990
that need guaranteed execution.

00:02:00.990 --> 00:02:03.990
The background tasks are
work request objects.

00:02:03.990 --> 00:02:07.320
With WorkManager, you can build
a complex processing and upload

00:02:07.320 --> 00:02:11.009
flow like this using
chains of work requests.

00:02:11.009 --> 00:02:12.630
As part of the
chain, you can define

00:02:12.630 --> 00:02:16.200
the output of one work request
as the input of another work

00:02:16.200 --> 00:02:17.250
request.

00:02:17.250 --> 00:02:19.080
You can also set
conditions on when

00:02:19.080 --> 00:02:21.180
the work request should run.

00:02:21.180 --> 00:02:23.940
WorkManager then performs the
work requests in the order

00:02:23.940 --> 00:02:25.740
that you specified
while also taking

00:02:25.740 --> 00:02:29.100
care of compatibility issues
and best practices for battery

00:02:29.100 --> 00:02:30.300
and system health.

00:02:30.300 --> 00:02:32.820
As part of guaranteed
execution, WorkManager

00:02:32.820 --> 00:02:35.910
handles continuing your
work across device restarts

00:02:35.910 --> 00:02:38.340
and if your process
is force stopped.

00:02:38.340 --> 00:02:41.490
Finally, WorkManager can return
the state of the work request

00:02:41.490 --> 00:02:44.321
so that you can represent
this state in your UI.

00:02:44.321 --> 00:02:44.820
OK.

00:02:44.820 --> 00:02:47.850
Let's go ahead and take a look
at the Lifecycle libraries.

00:02:47.850 --> 00:02:50.370
The classes in this library
help with Android Lifecycle

00:02:50.370 --> 00:02:53.100
management, specifically
with avoiding memory leaks

00:02:53.100 --> 00:02:55.080
when updating your app's UI.

00:02:55.080 --> 00:02:56.740
Here is one example.

00:02:56.740 --> 00:02:59.250
Have you ever rotated a
device and had the app crash

00:02:59.250 --> 00:03:00.650
or lose data?

00:03:00.650 --> 00:03:03.450
Well, adding a ViewModel
can help fix this.

00:03:03.450 --> 00:03:05.790
Unlike activity objects,
a ViewModel object

00:03:05.790 --> 00:03:08.490
isn't destroyed when the
device configuration changes,

00:03:08.490 --> 00:03:10.590
such as when the
screen is rotated.

00:03:10.590 --> 00:03:13.770
This property of ViewModel
makes it a good, stable place

00:03:13.770 --> 00:03:15.990
to put all of your UI data.

00:03:15.990 --> 00:03:18.810
The ViewModel usually contains
another Lifecycle object,

00:03:18.810 --> 00:03:19.890
LiveData.

00:03:19.890 --> 00:03:23.040
LiveData is built for easy
communication between the UI

00:03:23.040 --> 00:03:25.740
and deeper layers of
your app's architecture.

00:03:25.740 --> 00:03:27.730
LiveData is an
observable data holder

00:03:27.730 --> 00:03:30.150
for data that is meant
to be shown on screen.

00:03:30.150 --> 00:03:31.980
Basically, it'll wrap
around an object,

00:03:31.980 --> 00:03:34.230
like this user object
over here, and allow

00:03:34.230 --> 00:03:37.110
the UI to automatically update
whenever properties of the user

00:03:37.110 --> 00:03:38.580
object change.

00:03:38.580 --> 00:03:40.980
LiveData is also
Lifecycle aware.

00:03:40.980 --> 00:03:42.960
This means a
LiveData object only

00:03:42.960 --> 00:03:45.490
tells the UI to update
if the UI's Lifecycle

00:03:45.490 --> 00:03:47.670
state is in the correct state.

00:03:47.670 --> 00:03:50.550
For example, if your
activity is not on screen,

00:03:50.550 --> 00:03:53.130
then the LiveData will
not trigger updates.

00:03:53.130 --> 00:03:55.051
Also, if the activity
gets destroyed,

00:03:55.051 --> 00:03:57.300
then this observation
connection is cleaned up for you

00:03:57.300 --> 00:03:58.840
automatically.

00:03:58.840 --> 00:04:00.810
So as your data
changes, you never

00:04:00.810 --> 00:04:03.120
accidentally trigger
an activity or fragment

00:04:03.120 --> 00:04:06.270
that is offscreen or
destroyed to redraw itself.

00:04:06.270 --> 00:04:09.250
The Lifecycle libraries include
other powerful features.

00:04:09.250 --> 00:04:12.420
For example, LiveData
supports transformations.

00:04:12.420 --> 00:04:15.450
As mentioned before, Room
can return LiveData objects,

00:04:15.450 --> 00:04:18.640
which allows your UI to observe
objects in the database.

00:04:18.640 --> 00:04:22.470
ViewModels and LiveData also
now support data binding.

00:04:22.470 --> 00:04:24.920
You can bind these classes to
an element in your app's XML

00:04:24.920 --> 00:04:26.520
layout definition.

00:04:26.520 --> 00:04:29.870
That lets you get rid of all
of this boilerplate code.

00:04:29.870 --> 00:04:32.790
The Lifecycle's library also
contains classes and interfaces

00:04:32.790 --> 00:04:36.180
for querying and observing
UI Lifecycle states.

00:04:36.180 --> 00:04:38.160
The Paging Library
integrates directly

00:04:38.160 --> 00:04:39.890
with Room and LiveData.

00:04:39.890 --> 00:04:42.390
Now, there's a common situation
where you have a lot of data

00:04:42.390 --> 00:04:45.660
that you want to load in
small, manageable chunks.

00:04:45.660 --> 00:04:48.660
The Paging Library is built
exactly for this use case,

00:04:48.660 --> 00:04:52.342
and it avoids tricky SQLite
cursor performance issues.

00:04:52.342 --> 00:04:55.004
The library offers the
following features.

00:04:55.004 --> 00:04:56.670
It allows you to
define the data sources

00:04:56.670 --> 00:04:58.919
that you're going to use,
be it data from the network,

00:04:58.919 --> 00:05:01.930
a database, or another
data source of your choice.

00:05:01.930 --> 00:05:04.850
It works out of the box
with Room and RecyclerView.

00:05:04.850 --> 00:05:07.050
It supports lists of
any size, including

00:05:07.050 --> 00:05:09.330
lists of infinite length.

00:05:09.330 --> 00:05:13.320
It leverages LiveData to update
your UI as more data is loaded,

00:05:13.320 --> 00:05:15.780
and it has support for RxJava.

00:05:15.780 --> 00:05:18.170
Finally, there's the
Navigation Library.

00:05:18.170 --> 00:05:19.950
The Navigation
Library and Tooling

00:05:19.950 --> 00:05:23.370
simplify implementation of
complex, but common navigation

00:05:23.370 --> 00:05:26.220
requirements and help you
visualize your app's navigation

00:05:26.220 --> 00:05:27.390
graph.

00:05:27.390 --> 00:05:30.760
Now, for trivial apps,
navigation might seem simple,

00:05:30.760 --> 00:05:33.240
but when you add things
like fragment transactions,

00:05:33.240 --> 00:05:35.940
the need to implement
proper back and up behavior,

00:05:35.940 --> 00:05:38.490
support deep linking,
add a bottom bar,

00:05:38.490 --> 00:05:40.620
and include animations
between screens,

00:05:40.620 --> 00:05:42.840
let's just say that things
get a little bit messy.

00:05:42.840 --> 00:05:45.646
The Navigation Library
simplifies all of this.

00:05:45.646 --> 00:05:47.520
Now, the basic building
blocks for navigation

00:05:47.520 --> 00:05:49.380
are called destinations.

00:05:49.380 --> 00:05:52.386
Destinations are specific
screens you can go to.

00:05:52.386 --> 00:05:54.960
There's out-of-the-box support
for fragments and activities

00:05:54.960 --> 00:05:57.900
as destinations, but you
can also make your own.

00:05:57.900 --> 00:05:59.790
The new guide to
navigation encourages

00:05:59.790 --> 00:06:02.850
you to have activities as
entry points for your app.

00:06:02.850 --> 00:06:04.620
They also contain
global navigation,

00:06:04.620 --> 00:06:06.480
such as the spot of nav.

00:06:06.480 --> 00:06:07.950
Now, in comparison,
fragments will

00:06:07.950 --> 00:06:11.040
be the actual
destination-specific layouts.

00:06:11.040 --> 00:06:14.070
This UI structure allows you
to share an activity ViewModel

00:06:14.070 --> 00:06:17.640
between all of the fragments
associated with that activity.

00:06:17.640 --> 00:06:19.920
As the user navigates
from fragment to fragment,

00:06:19.920 --> 00:06:22.740
you don't need to
serialize that shared data.

00:06:22.740 --> 00:06:25.470
The new navigation
editor in Android Studio

00:06:25.470 --> 00:06:28.590
enables you to quickly specify
destinations and visualize

00:06:28.590 --> 00:06:30.720
your app's navigation
architecture.

00:06:30.720 --> 00:06:33.240
The connections here show
the possible navigation paths

00:06:33.240 --> 00:06:35.130
between each destination.

00:06:35.130 --> 00:06:38.730
This generates XML, which
you can edit by hand.

00:06:38.730 --> 00:06:40.710
The library uses this
new navigation graph

00:06:40.710 --> 00:06:43.290
resource and a new
nav control object

00:06:43.290 --> 00:06:45.614
to move your user
through your app.

00:06:45.614 --> 00:06:47.280
Now, this is just
scratching the surface

00:06:47.280 --> 00:06:49.650
of the proverbial iceberg
that is the architecture

00:06:49.650 --> 00:06:51.450
components in Jetpack.

00:06:51.450 --> 00:06:54.030
Hopefully, some or maybe
all of these libraries

00:06:54.030 --> 00:06:55.330
piqued your interest.

00:06:55.330 --> 00:06:57.240
To learn more, we've
got DevBytes for all

00:06:57.240 --> 00:06:58.840
of the stable components.

00:06:58.840 --> 00:07:01.710
We also have Codelabs for each
component, and, of course,

00:07:01.710 --> 00:07:03.690
thorough documentation.

00:07:03.690 --> 00:07:05.940
Now, if you find yourself
left with questions,

00:07:05.940 --> 00:07:09.120
we've also got StackOverflow
tags and an issue tracker.

00:07:09.120 --> 00:07:11.227
Or you know, you can
yell at me on Twitter.

00:07:11.227 --> 00:07:12.810
Actually, don't yell
at me on Twitter.

00:07:12.810 --> 00:07:13.470
Happy coding.

00:07:13.470 --> 00:07:15.620
[ROCKET BLAST]

