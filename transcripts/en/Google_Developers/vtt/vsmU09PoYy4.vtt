WEBVTT
Kind: captions
Language: en

00:00:01.080 --> 00:00:03.540
Testing sites for
the multi-device web

00:00:03.540 --> 00:00:05.540
requires a different
set of tools

00:00:05.540 --> 00:00:07.870
than desktop web development.

00:00:07.870 --> 00:00:08.630
Hi.

00:00:08.630 --> 00:00:11.530
I'm Pete, a developer
advocate at Google.

00:00:11.530 --> 00:00:13.290
I'm going to show
you my workflow

00:00:13.290 --> 00:00:15.110
and how you can
use it to make sure

00:00:15.110 --> 00:00:20.470
that your sites look
amazing on any device.

00:00:20.470 --> 00:00:24.130
I always start on my desktop
with my browser window

00:00:24.130 --> 00:00:27.500
sized to about 400
pixels to mimic

00:00:27.500 --> 00:00:30.250
the narrow viewport of a phone.

00:00:30.250 --> 00:00:34.230
It also makes it really easy for
me to resize the browser window

00:00:34.230 --> 00:00:37.110
to see how things will look
across different viewport

00:00:37.110 --> 00:00:38.710
sizes.

00:00:38.710 --> 00:00:41.930
Once I've got the basics
down, including my layouts,

00:00:41.930 --> 00:00:44.500
my primary break
points, and so forth, I

00:00:44.500 --> 00:00:48.390
open up Chrome's built-in
emulation tools and the iOS

00:00:48.390 --> 00:00:49.780
simulator.

00:00:49.780 --> 00:00:52.820
Emulators and simulators
are great tools.

00:00:52.820 --> 00:00:55.490
While they're not
always 100% accurate,

00:00:55.490 --> 00:00:59.130
they'll almost always
get the job done.

00:00:59.130 --> 00:01:02.330
Chrome's emulation tools allow
you to emulate everything

00:01:02.330 --> 00:01:05.050
from screen size, to
device pixel ratio,

00:01:05.050 --> 00:01:07.320
to touch, even a
few of the hardware

00:01:07.320 --> 00:01:11.430
inputs like geolocation
and the accelerometer.

00:01:11.430 --> 00:01:13.540
Starting the emulator is easy.

00:01:13.540 --> 00:01:15.820
Simply open up the
dev tools and hit

00:01:15.820 --> 00:01:18.100
Escape to show the
console drawer.

00:01:18.100 --> 00:01:21.050
Then select the emulation panel.

00:01:21.050 --> 00:01:23.970
From there, pick the device
that you want to emulate,

00:01:23.970 --> 00:01:26.250
and hit the Emulate button.

00:01:26.250 --> 00:01:29.430
Chrome does the
rest automatically.

00:01:29.430 --> 00:01:30.910
Now here's a quick tip.

00:01:30.910 --> 00:01:34.210
Because mobile devices
are usually in portrait,

00:01:34.210 --> 00:01:38.230
dock the dev tools to the
side instead of the bottom

00:01:38.230 --> 00:01:41.680
to better use of the space
that you've got on screen.

00:01:41.680 --> 00:01:45.630
For iOS testing, I usually
start with the iOS simulator,

00:01:45.630 --> 00:01:49.680
which can be downloaded from
Apple's iOS developer center.

00:01:49.680 --> 00:01:51.800
It gives me a good idea
of how my pages are

00:01:51.800 --> 00:01:54.790
going to look and behave.

00:01:54.790 --> 00:01:58.340
Using Chrome's emulation
features and the iOS simulator,

00:01:58.340 --> 00:02:02.390
I'm usually able to find and
fix about 80% of the issues

00:02:02.390 --> 00:02:04.450
that I come across.

00:02:04.450 --> 00:02:07.170
For the other 20%,
I almost always

00:02:07.170 --> 00:02:09.840
have to switch to a real device.

00:02:09.840 --> 00:02:14.080
Remote debugging allows me to
inspect, debug, and analyze

00:02:14.080 --> 00:02:17.540
the on-device experience
with the full suite of tools

00:02:17.540 --> 00:02:21.850
that I'm used to, but
on my desktop computer.

00:02:21.850 --> 00:02:25.580
To use remote debugging in
Safari, go to Safari's settings

00:02:25.580 --> 00:02:30.010
and check the Show Develop
menu in menu bar check box.

00:02:30.010 --> 00:02:31.900
Say that 10 times fast.

00:02:31.900 --> 00:02:36.090
Next, connect your iOS
device to your Mac via USB,

00:02:36.090 --> 00:02:38.610
and then on the iOS
device, open the page

00:02:38.610 --> 00:02:41.560
that you want to
debug in Safari.

00:02:41.560 --> 00:02:44.000
Now on your desktop,
find the device

00:02:44.000 --> 00:02:47.180
in Safari's Develop menu,
and choose the browser page

00:02:47.180 --> 00:02:48.950
that you want to debug.

00:02:48.950 --> 00:02:52.890
At this point, Safari's Web
Inspector is ready to go.

00:02:52.890 --> 00:02:54.870
Sweet.

00:02:54.870 --> 00:02:58.110
The initial setup for Chrome
is a little bit more involved,

00:02:58.110 --> 00:03:01.220
and it requires that you
enable the USB debugging

00:03:01.220 --> 00:03:03.940
in the developer options panel.

00:03:03.940 --> 00:03:06.350
If you don't see the
developer options panel,

00:03:06.350 --> 00:03:09.570
try going to Settings, then
About Phone, and hit the

00:03:09.570 --> 00:03:12.270
build number seven times.

00:03:12.270 --> 00:03:16.360
Yeah, seriously, seven times.

00:03:16.360 --> 00:03:20.090
Thankfully you only need
to do that once per device.

00:03:20.090 --> 00:03:21.630
If you're running
Windows, you'll

00:03:21.630 --> 00:03:25.940
probably also need to install
the device drivers as well.

00:03:25.940 --> 00:03:28.560
Once you've done that, the
process is much easier.

00:03:28.560 --> 00:03:31.440
Connect the device to
your computer via USB,

00:03:31.440 --> 00:03:33.920
and open the page that
you want to debug.

00:03:33.920 --> 00:03:39.930
Then on your desktop,
open chrome://inspect.

00:03:39.930 --> 00:03:42.860
You should now see all the
tabs open on your device

00:03:42.860 --> 00:03:44.540
in your desktop browser.

00:03:44.540 --> 00:03:49.490
If you don't, make sure that the
Discover USB Devices is checked

00:03:49.490 --> 00:03:52.650
and that there aren't any
pop-ups on the device asking

00:03:52.650 --> 00:03:54.510
for permission.

00:03:54.510 --> 00:03:57.950
You can even access files served
locally from your computer

00:03:57.950 --> 00:04:02.270
or from a private network
with port forwarding.

00:04:02.270 --> 00:04:06.560
Chrome remote debugging
also supports screencasting.

00:04:06.560 --> 00:04:09.740
Click the screencast icon in
the upper right-hand corner

00:04:09.740 --> 00:04:12.940
and Chrome brings the
experience of your device

00:04:12.940 --> 00:04:15.140
into your dev tools
window, allowing

00:04:15.140 --> 00:04:18.570
you to keep your attention on
one screen instead of having

00:04:18.570 --> 00:04:21.630
to switch back and forth,
and back and forth,

00:04:21.630 --> 00:04:25.940
and back and forth between
the device and dev tools.

00:04:25.940 --> 00:04:28.910
Now keep in mind,
screencasting captures

00:04:28.910 --> 00:04:31.660
screenshots and sends
them to your desktop.

00:04:31.660 --> 00:04:35.640
So there is a small
cost overhead involved.

00:04:35.640 --> 00:04:37.620
Remote debugging is
amazing if you've

00:04:37.620 --> 00:04:40.570
got the devices you need,
but what if you get a bug

00:04:40.570 --> 00:04:43.120
report for a device
that you don't have

00:04:43.120 --> 00:04:45.650
or that isn't available
where you live?

00:04:45.650 --> 00:04:50.120
Or better yet, you want to
automate some of your tests.

00:04:50.120 --> 00:04:53.710
For that, I use one of the
remote testing services

00:04:53.710 --> 00:04:57.740
like BrowserStack, Sauce
Labs, or DeviceAnywhere.

00:04:57.740 --> 00:05:00.930
These remote testing services
offer cloud-based access

00:05:00.930 --> 00:05:05.250
to real and emulated
browsers and devices.

00:05:05.250 --> 00:05:07.920
Through these services I
can interact with the device

00:05:07.920 --> 00:05:10.330
as if it were right
there in front of me.

00:05:10.330 --> 00:05:12.660
My interactions are
carried through directly

00:05:12.660 --> 00:05:15.330
to the device or emulator.

00:05:15.330 --> 00:05:17.930
Some of these services
even offer APIs

00:05:17.930 --> 00:05:20.140
that I can use for
automated testing.

00:05:20.140 --> 00:05:23.760
For example, unit tests,
end-to-end tests, or screenshot

00:05:23.760 --> 00:05:27.280
capturing for visual
regression tests.

00:05:27.280 --> 00:05:29.450
Now that's my
web-development workflow.

00:05:29.450 --> 00:05:31.510
I start by using
my desktop browser

00:05:31.510 --> 00:05:33.370
for my initial iteration.

00:05:33.370 --> 00:05:36.020
Next I move to
emulators and simulators

00:05:36.020 --> 00:05:38.150
for the bulk of my work.

00:05:38.150 --> 00:05:41.660
I pull out real devices for
polishing in verification.

00:05:41.660 --> 00:05:43.590
And when I don't have
the device I need,

00:05:43.590 --> 00:05:48.170
I try and find it on one of
the remote testing services.

00:05:48.170 --> 00:05:49.810
Then I'm ready to ship.

00:05:49.810 --> 00:05:51.810
[? Whoohoo. ?]

00:05:51.810 --> 00:05:54.270
If you're not making
sure that your site works

00:05:54.270 --> 00:05:57.090
for the multi-device
web, why not?

00:05:57.090 --> 00:05:59.320
I've just shown
you three easy ways

00:05:59.320 --> 00:06:02.450
that you can get started today.

00:06:02.450 --> 00:06:04.250
Thanks for watching.

