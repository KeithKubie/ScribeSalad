WEBVTT
Kind: captions
Language: en

00:00:02.930 --> 00:00:05.430
CHET HAASE: Hello, and
welcome to Material Science,

00:00:05.430 --> 00:00:09.150
or what you might also
call-- no, no, no, no, no.

00:00:09.150 --> 00:00:11.570
Let's do that again.

00:00:11.570 --> 00:00:13.570
Material Design for
Android Developers.

00:00:13.570 --> 00:00:16.200
The point of this
session is to try

00:00:16.200 --> 00:00:18.220
to get into some of
the technical details

00:00:18.220 --> 00:00:19.730
and the overview
of what it actually

00:00:19.730 --> 00:00:21.480
looks like from an
engineer's perspective.

00:00:21.480 --> 00:00:23.895
There's a lot of design
sessions this week,

00:00:23.895 --> 00:00:25.770
including one right
before this session where

00:00:25.770 --> 00:00:28.200
they talk about some of the
ideas behind material design.

00:00:28.200 --> 00:00:30.130
What we wanted to do
is talk about what

00:00:30.130 --> 00:00:32.700
that means in terms of the
actual APIs we're exposing

00:00:32.700 --> 00:00:35.890
or where you hook into this
stuff as an Android developer

00:00:35.890 --> 00:00:39.120
to create material
design applications.

00:00:39.120 --> 00:00:41.430
There's a hashtag, if you
like to do that thing.

00:00:41.430 --> 00:00:42.660
There's a feedback URL.

00:00:42.660 --> 00:00:45.200
If you have absolutely
stunning and glowing comments

00:00:45.200 --> 00:00:48.540
about the session, please
feel free to go there.

00:00:48.540 --> 00:00:50.680
If you want to know
what we look like,

00:00:50.680 --> 00:00:53.200
you could actually just
look up at the stage,

00:00:53.200 --> 00:00:56.604
or there's pictures
of us I am Chet Haase.

00:00:56.604 --> 00:00:58.020
ADAM POWELL: And
I am Adam Powell.

00:00:58.020 --> 00:01:01.380
CHET HAASE: And we are both on
the Android UI Toolkit Team.

00:01:01.380 --> 00:01:04.954
This is the team that basically
handles the UI Toolkit widgets,

00:01:04.954 --> 00:01:07.370
down through the graphics that
render them with animations

00:01:07.370 --> 00:01:09.510
that move them around
and spitting at the GPU

00:01:09.510 --> 00:01:12.380
commands to actually hardware
accelerate all this stuff

00:01:12.380 --> 00:01:14.450
and get onto the screen
as fast as possible.

00:01:14.450 --> 00:01:16.595
That's what the team
does, which means

00:01:16.595 --> 00:01:18.970
that all the stuff that we
need to implement for material

00:01:18.970 --> 00:01:20.970
design also needs
to run really fast,

00:01:20.970 --> 00:01:23.220
because the same team is
handling the functionality as

00:01:23.220 --> 00:01:26.200
well as the performance aspects,
which is an interesting trade

00:01:26.200 --> 00:01:26.944
off.

00:01:26.944 --> 00:01:28.360
ADAM POWELL: So
the first question

00:01:28.360 --> 00:01:30.040
that you might be
asking is, why?

00:01:30.040 --> 00:01:32.690
So we've already seen
the keynote videos.

00:01:32.690 --> 00:01:34.260
We see a lot of flashy effects.

00:01:34.260 --> 00:01:35.620
We see high-minded design.

00:01:35.620 --> 00:01:37.580
We see performance challenges.

00:01:37.580 --> 00:01:41.210
And we see a way to
really bloat our UIs.

00:01:41.210 --> 00:01:43.630
So we don't actually
want to take

00:01:43.630 --> 00:01:45.039
that negative view of this.

00:01:45.039 --> 00:01:46.830
We want to make sure
that this is something

00:01:46.830 --> 00:01:50.740
that really matters
to our users.

00:01:50.740 --> 00:01:55.260
And if there's one big takeaway
from all of the material design

00:01:55.260 --> 00:01:58.600
material that you're going to
see over the rest of the day

00:01:58.600 --> 00:02:00.879
and for probably
until the L release

00:02:00.879 --> 00:02:02.920
here as everyone starts
getting their apps ready,

00:02:02.920 --> 00:02:04.940
is that motion matters.

00:02:04.940 --> 00:02:07.940
Movement can teach a user
what something can do

00:02:07.940 --> 00:02:09.350
and where it came from.

00:02:09.350 --> 00:02:11.660
If you've ever seen
in a UI something

00:02:11.660 --> 00:02:13.510
just pop out of
nowhere, something

00:02:13.510 --> 00:02:15.460
disappears from out
from under your finger.

00:02:15.460 --> 00:02:17.450
That's a really
frustrating experience.

00:02:17.450 --> 00:02:21.410
So by using motion, we can
go ahead and teach users

00:02:21.410 --> 00:02:23.710
how the system
behaves and what they

00:02:23.710 --> 00:02:27.370
can expect from that system.

00:02:27.370 --> 00:02:28.910
So this is cues.

00:02:28.910 --> 00:02:31.360
We can give cues about what
can be touched and moved

00:02:31.360 --> 00:02:33.340
by making things
that look tangible.

00:02:33.340 --> 00:02:36.120
This is one of the things
that cards really give us.

00:02:36.120 --> 00:02:38.060
And these sorts
of virtual objects

00:02:38.060 --> 00:02:41.270
that can morph and move around
in ways that don't quite

00:02:41.270 --> 00:02:44.940
simulate real world objects, can
still hint at that tangibility.

00:02:44.940 --> 00:02:46.900
These are your cards,
paper, and ink.

00:02:46.900 --> 00:02:50.760
All these things that you've
seen in the video so far.

00:02:50.760 --> 00:02:54.940
So the takeaway really is
motion plus tangibility equals

00:02:54.940 --> 00:02:56.860
a more understandable
UI for your users.

00:02:58.872 --> 00:03:00.330
CHET HAASE: So I
wanted to give you

00:03:00.330 --> 00:03:03.660
a brief mental model of what
this release and this process

00:03:03.660 --> 00:03:08.250
of actually implementing
material design was to me.

00:03:08.250 --> 00:03:10.787
Actually, making this
work within our team,

00:03:10.787 --> 00:03:12.370
getting the stuff,
the pixels actually

00:03:12.370 --> 00:03:14.810
showing up on the screen
that represents the design.

00:03:14.810 --> 00:03:17.080
The process is basically
taking the ideas

00:03:17.080 --> 00:03:20.840
that UX has-- that the
design team has-- where

00:03:20.840 --> 00:03:23.120
they're these grand ideas
and there's paradigms,

00:03:23.120 --> 00:03:24.940
and there's systems,
and there's languages,

00:03:24.940 --> 00:03:28.965
and there's all this nice
stuff that they come up with,

00:03:28.965 --> 00:03:31.340
and then actually translate
it into the technical details

00:03:31.340 --> 00:03:33.040
of the functionality
that engineers actually

00:03:33.040 --> 00:03:35.456
need to write applications
that are going to deliver that.

00:03:35.456 --> 00:03:39.900
So the way I picture it-- so
we had this huge design team

00:03:39.900 --> 00:03:41.550
so we have access
to great artists

00:03:41.550 --> 00:03:45.360
and we could ask them to come
up with art that represents this

00:03:45.360 --> 00:03:49.000
or I could actually
just draw it myself.

00:03:49.000 --> 00:03:52.970
This obviously is an artist
waving his hands furiously

00:03:52.970 --> 00:03:55.550
and coming up with beautiful
rainbows and wonderful things.

00:03:55.550 --> 00:03:57.383
You can tell it's an
artist, because there's

00:03:57.383 --> 00:04:01.630
a beret involved either
that or their French.

00:04:01.630 --> 00:04:05.941
So we take the design ideas--
they're floating up in the air

00:04:05.941 --> 00:04:08.065
and incredibly vague when
engineers get in the room

00:04:08.065 --> 00:04:09.950
and get really puzzled
look on their face,

00:04:09.950 --> 00:04:11.780
wondering what
all this stuff is.

00:04:11.780 --> 00:04:15.550
When they say language in
the context of application

00:04:15.550 --> 00:04:16.880
it doesn't make sense.

00:04:16.880 --> 00:04:17.380
So then--

00:04:17.380 --> 00:04:18.610
ADAM POWELL: It
means Java, right?

00:04:18.610 --> 00:04:19.568
CHET HAASE: I think so.

00:04:19.568 --> 00:04:21.790
I think it means the Java
programming language.

00:04:21.790 --> 00:04:24.750
We'll talk to the US team
after this and nail that down.

00:04:24.750 --> 00:04:28.470
But the idea really is to
take the concrete elements

00:04:28.470 --> 00:04:30.320
and figure out
what they actually

00:04:30.320 --> 00:04:33.040
mean by all the hand waving when
they're talking about floating

00:04:33.040 --> 00:04:36.020
action buttons, when they're
talking about ink and paper

00:04:36.020 --> 00:04:39.780
and actually translating it
into the particular elements

00:04:39.780 --> 00:04:42.600
that we need in the platform
to give you those capabilities.

00:04:42.600 --> 00:04:44.550
The way I think
of it is-- I think

00:04:44.550 --> 00:04:48.320
it's like the Nyquist Sampling
Theorem says that there's

00:04:48.320 --> 00:04:51.360
a frequency at which you
can sample a curve such

00:04:51.360 --> 00:04:54.500
that you can then reconstruct
the original curve.

00:04:54.500 --> 00:04:56.920
And I won't get into
technical details

00:04:56.920 --> 00:04:58.640
because I don't understand them.

00:04:58.640 --> 00:05:00.660
But it's the same idea here.

00:05:00.660 --> 00:05:03.777
If UX is creating this
beautiful, spatial curve

00:05:03.777 --> 00:05:06.360
of the design language and the
pattern they're coming up with.

00:05:06.360 --> 00:05:07.560
And what you want
to do is implement

00:05:07.560 --> 00:05:09.350
enough functionality
that they actually

00:05:09.350 --> 00:05:12.867
get what they wanted even though
they had a hard time describing

00:05:12.867 --> 00:05:14.950
it in terms of the crisp
elements that you needed.

00:05:14.950 --> 00:05:17.110
So what we did on
the toolkit team

00:05:17.110 --> 00:05:19.660
was to translate that into the
features and the functionality

00:05:19.660 --> 00:05:22.421
that we needed to expose
those capabilities.

00:05:22.421 --> 00:05:23.920
And this boiled
down to the features

00:05:23.920 --> 00:05:25.490
that we're going to talk
about in the next few minutes.

00:05:25.490 --> 00:05:27.760
We have the ability to
do real time shadows.

00:05:27.760 --> 00:05:30.540
We have activity transitions
with shared hero elements.

00:05:30.540 --> 00:05:31.730
We have circular reveals.

00:05:31.730 --> 00:05:33.400
We saw some of that
in the design talks

00:05:33.400 --> 00:05:34.816
as the floating
action buttons are

00:05:34.816 --> 00:05:37.330
revealing into larger
morphed content.

00:05:37.330 --> 00:05:42.530
We have RecyclerView widgets
for more animated and rich list

00:05:42.530 --> 00:05:45.110
capabilities, touch
feedback so the user has

00:05:45.110 --> 00:05:47.580
constant feedback about
what's going on in the UI

00:05:47.580 --> 00:05:49.151
as they're interacting with it.

00:05:49.151 --> 00:05:51.650
And then obviously we're working
on performance all the time

00:05:51.650 --> 00:05:54.060
as well.

00:05:54.060 --> 00:05:55.910
ADAM POWELL: So
from all of this,

00:05:55.910 --> 00:05:59.990
how do you actually
write a material app?

00:05:59.990 --> 00:06:01.612
Well, the first
step is something

00:06:01.612 --> 00:06:03.820
that you're probably already
familiar with in writing

00:06:03.820 --> 00:06:06.660
Android apps is your
theme for your activities.

00:06:06.660 --> 00:06:09.490
So theme.material
is the first step.

00:06:09.490 --> 00:06:10.074
Choose this.

00:06:10.074 --> 00:06:11.490
Inherit from it,
if you've already

00:06:11.490 --> 00:06:14.330
got a custom theme that you're
using other elements in.

00:06:14.330 --> 00:06:16.300
And just take a look.

00:06:16.300 --> 00:06:19.780
How does your app look with
this simple switch flip?

00:06:19.780 --> 00:06:22.940
And you're going to need to
make some spots fixes to that.

00:06:22.940 --> 00:06:26.590
Pretty much every major app
that's nontrivial at this point

00:06:26.590 --> 00:06:29.370
has done a lot of work
to try to match either

00:06:29.370 --> 00:06:31.740
a hollow theme or
a very custom theme

00:06:31.740 --> 00:06:34.684
that's been implemented
in the past.

00:06:34.684 --> 00:06:36.100
And you're going
to need to update

00:06:36.100 --> 00:06:39.515
those individual
elements as you go.

00:06:39.515 --> 00:06:41.640
So you'll want to go ahead
and implement the design

00:06:41.640 --> 00:06:42.140
guidelines.

00:06:42.140 --> 00:06:44.080
So this is going to
be new ways of dealing

00:06:44.080 --> 00:06:47.290
with layouts and colors, new
metrics, new measurements,

00:06:47.290 --> 00:06:49.710
and use of the grid.

00:06:49.710 --> 00:06:52.420
From there, it's really mostly
standard Android programming.

00:06:52.420 --> 00:06:53.470
You're going to be
using a lot of the tools

00:06:53.470 --> 00:06:55.340
that you're already
familiar with there.

00:06:55.340 --> 00:06:56.910
We've got some new
API is to assist

00:06:56.910 --> 00:06:59.470
with motion and alignment of
certain elements on screen

00:06:59.470 --> 00:07:01.687
that you traditionally
haven't had a lot of control

00:07:01.687 --> 00:07:03.270
over in the past,
such as where things

00:07:03.270 --> 00:07:06.800
are positioned in
the action bar.

00:07:06.800 --> 00:07:09.459
And then, of course, you can use
the support library as needed.

00:07:09.459 --> 00:07:11.250
Most of you are familiar
with this already.

00:07:11.250 --> 00:07:14.340
We've got things like
DrawerLayouts, ViewPager,

00:07:14.340 --> 00:07:16.660
all these widgets
that's developers

00:07:16.660 --> 00:07:17.970
know and love at this point.

00:07:17.970 --> 00:07:18.910
We're adding in some more.

00:07:18.910 --> 00:07:20.110
We've got RecyclerView,
which we're

00:07:20.110 --> 00:07:22.230
going to talk a little
bit more about shortly,

00:07:22.230 --> 00:07:24.310
and card view, which
basically wraps up

00:07:24.310 --> 00:07:26.886
a few of these pieces of
new functionality in L,

00:07:26.886 --> 00:07:29.010
and gives you a nice fall
back for a particular use

00:07:29.010 --> 00:07:30.565
case on older platform versions.

00:07:33.980 --> 00:07:35.820
So then, as needed,
you can go ahead

00:07:35.820 --> 00:07:40.420
and use some of the exclusive
L APIs for newer platform

00:07:40.420 --> 00:07:41.570
versions as well.

00:07:41.570 --> 00:07:44.050
This is stuff like
newer graphics APIs

00:07:44.050 --> 00:07:47.240
around shadows and clipping,
setting elevation on your views

00:07:47.240 --> 00:07:49.810
so that they can
pop out into space.

00:07:49.810 --> 00:07:51.990
We've got the touch
feedback ink ripples

00:07:51.990 --> 00:07:54.830
that you've seen in some
of the videos so far.

00:07:54.830 --> 00:07:56.660
We've got icons and
other drawables.

00:07:56.660 --> 00:07:58.040
You can animate state changes.

00:07:58.040 --> 00:08:00.990
If you're already used to
pressed states and focus

00:08:00.990 --> 00:08:02.760
states, so and so forth.

00:08:02.760 --> 00:08:04.720
You can define
animated transitions

00:08:04.720 --> 00:08:07.030
between those states now.

00:08:07.030 --> 00:08:10.080
And as for general animations,
we've got view reveals.

00:08:10.080 --> 00:08:12.590
We have new ways of dealing
with animation curves,

00:08:12.590 --> 00:08:17.030
and of course, the activity
transitions that you've seen.

00:08:17.030 --> 00:08:19.145
So at this point, most
of you are asking,

00:08:19.145 --> 00:08:20.440
what about compatibility?

00:08:20.440 --> 00:08:23.430
Because no one has the
luxury of targeting only

00:08:23.430 --> 00:08:24.430
L and above right now.

00:08:24.430 --> 00:08:26.096
If you want to have
some users when this

00:08:26.096 --> 00:08:28.380
thing ships.

00:08:28.380 --> 00:08:32.049
So for apps on
previous releases,

00:08:32.049 --> 00:08:33.350
use the app compat themes.

00:08:33.350 --> 00:08:35.080
You may already be
familiar with these

00:08:35.080 --> 00:08:37.700
from using the compatibility
action bar in the support

00:08:37.700 --> 00:08:38.237
library.

00:08:38.237 --> 00:08:40.070
We're going to be
expanding this out to also

00:08:40.070 --> 00:08:43.487
cover the material design
components in L. You can,

00:08:43.487 --> 00:08:45.320
of course, still use
the new support library

00:08:45.320 --> 00:08:48.570
widgets regardless, like
RecyclerView, CardView,

00:08:48.570 --> 00:08:52.217
and the others that
you know and love.

00:08:52.217 --> 00:08:54.550
CHET HAASE: So now let's talk
about some of the new APIs

00:08:54.550 --> 00:08:56.849
and functionality that we
exposed in the UI toolkit.

00:08:56.849 --> 00:08:59.140
One of the important points
that Adam was talking about

00:08:59.140 --> 00:09:03.482
is you can get a lot of
functionality of the design

00:09:03.482 --> 00:09:05.940
that you're trying to achieve
just through standard Android

00:09:05.940 --> 00:09:08.750
programming by which we mean
the APIs that you're already

00:09:08.750 --> 00:09:10.640
using-- standard
layout and measurement

00:09:10.640 --> 00:09:12.260
stuff, standard drawing stuff.

00:09:12.260 --> 00:09:14.020
We did add new APIs.

00:09:14.020 --> 00:09:16.870
Most of the reason they're is
actually for our internal use.

00:09:16.870 --> 00:09:19.060
So we have the ability
to pop a view up,

00:09:19.060 --> 00:09:21.920
to give it elevation above
the view hierarchy plane.

00:09:21.920 --> 00:09:23.980
But we use this for some
of the standard widgets.

00:09:23.980 --> 00:09:27.050
You don't necessarily need to
use these for your application.

00:09:27.050 --> 00:09:30.900
But they are there for
your use if you want them.

00:09:30.900 --> 00:09:32.960
So one of those
areas is actually

00:09:32.960 --> 00:09:35.400
widgets, which this
is not new L APIs.

00:09:35.400 --> 00:09:36.950
It's in fact even
better than that.

00:09:36.950 --> 00:09:38.319
It's new support web APIs.

00:09:38.319 --> 00:09:39.110
ADAM POWELL: Right.

00:09:39.110 --> 00:09:43.330
So again you have access to
this from everything from API 7

00:09:43.330 --> 00:09:46.330
and above we have
both RecyclerView

00:09:46.330 --> 00:09:48.910
and CardView available
for you to take

00:09:48.910 --> 00:09:51.380
a look at early in the preview.

00:09:51.380 --> 00:09:53.000
So what is RecyclerView?

00:09:53.000 --> 00:09:55.510
You've heard a lot
about this now.

00:09:55.510 --> 00:09:57.790
It's a base class for
new adapter-backed views.

00:09:57.790 --> 00:10:01.225
Basically, anyone who's
tried to do anything remotely

00:10:01.225 --> 00:10:03.600
interesting or complicated
with a list view at this point

00:10:03.600 --> 00:10:07.100
has banged their head
against a lot of walls,

00:10:07.100 --> 00:10:08.900
hanging beams, sharp
objects, whatever

00:10:08.900 --> 00:10:11.340
you might want to use as
your metaphor for that.

00:10:11.340 --> 00:10:14.130
And basically,
list view is set up

00:10:14.130 --> 00:10:16.030
to take complete
and total control

00:10:16.030 --> 00:10:19.990
over the layout of items,
pretty much any time it wants.

00:10:19.990 --> 00:10:22.660
So you look at it funny
and everything relays out.

00:10:22.660 --> 00:10:24.660
All your animations are lost.

00:10:24.660 --> 00:10:27.250
Views that were halfway
through an animation

00:10:27.250 --> 00:10:30.280
are now halfway off screen,
bound to some other data item.

00:10:30.280 --> 00:10:33.110
And it's really frustrating
as a developer to try and use

00:10:33.110 --> 00:10:36.120
that to get any sort of
really rich experience.

00:10:36.120 --> 00:10:38.740
It's really outgrown
its complexity budget

00:10:38.740 --> 00:10:40.440
in a lot of ways.

00:10:40.440 --> 00:10:43.429
So RecyclerView is meant
to have more flexible views

00:10:43.429 --> 00:10:45.720
into these large data sets
that you would traditionally

00:10:45.720 --> 00:10:47.260
use a ListView for.

00:10:47.260 --> 00:10:49.240
We've already built
in functionality

00:10:49.240 --> 00:10:53.830
to allow an adapter to tell the
widget a bit more about what's

00:10:53.830 --> 00:10:56.980
going on with the data set when
items are specifically added

00:10:56.980 --> 00:10:58.654
or removed or when
ranges of items

00:10:58.654 --> 00:11:00.070
are specifically
added or removed.

00:11:00.070 --> 00:11:02.889
Rather than just saying,
hey, my data set changed.

00:11:02.889 --> 00:11:03.680
Well, what changed?

00:11:03.680 --> 00:11:04.340
I don't know.

00:11:04.340 --> 00:11:05.840
You figure it out.

00:11:05.840 --> 00:11:08.860
So in this way, we're
able to give you

00:11:08.860 --> 00:11:12.390
a few more things automatically,
such as animations when items

00:11:12.390 --> 00:11:15.260
are added or removed
from the set.

00:11:15.260 --> 00:11:18.010
CHET HAASE: If I could avoid
creating one more tutorial

00:11:18.010 --> 00:11:21.960
on how to animate something
in an adapter view,

00:11:21.960 --> 00:11:22.900
I will be happy.

00:11:29.700 --> 00:11:31.750
ADAM POWELL: So
that's the idea here.

00:11:31.750 --> 00:11:34.280
So we also allow you
to do custom layouts

00:11:34.280 --> 00:11:36.330
in this framework.

00:11:36.330 --> 00:11:37.570
Many of you have said, OK.

00:11:37.570 --> 00:11:39.372
Well, ListView is
great, but what

00:11:39.372 --> 00:11:40.830
if I wanted to
scroll horizontally?

00:11:40.830 --> 00:11:42.280
What if I want the
dividers to behave

00:11:42.280 --> 00:11:43.370
just a little bit different?

00:11:43.370 --> 00:11:45.703
What if I want a staggered
grid that doesn't necessarily

00:11:45.703 --> 00:11:50.530
line up along particular lines?

00:11:50.530 --> 00:11:51.830
So we offer that.

00:11:51.830 --> 00:11:53.620
We offer multi-directional
scrolling.

00:11:53.620 --> 00:11:56.820
Basically, you as the developer
can plug-in your own layout

00:11:56.820 --> 00:12:01.730
manager to define how
item views get laid out.

00:12:01.730 --> 00:12:04.740
This speaks to the general
theme of RecyclerView, which is,

00:12:04.740 --> 00:12:07.170
to make it extensible in all
the ways that ListView really

00:12:07.170 --> 00:12:10.100
wasn't.

00:12:10.100 --> 00:12:11.150
We also have CardView.

00:12:11.150 --> 00:12:13.750
Now, CardView takes a little
bit of a different approach

00:12:13.750 --> 00:12:14.810
from RecyclerView.

00:12:14.810 --> 00:12:18.362
RecyclerView is meant to be
a very generalized component

00:12:18.362 --> 00:12:19.820
that you can go
ahead and build on.

00:12:19.820 --> 00:12:21.528
Whereas CardView is
meant to be something

00:12:21.528 --> 00:12:24.090
that solves a very
particular use case in a way

00:12:24.090 --> 00:12:27.990
that is compatible, and gives
you a best effort approximation

00:12:27.990 --> 00:12:32.240
of the design intent on
different platforms versions.

00:12:32.240 --> 00:12:35.250
So in this case, we'll give
you a standard consistent look.

00:12:35.250 --> 00:12:40.140
You get the real soft shadows
and customized rounded view

00:12:40.140 --> 00:12:42.806
clipping for your rounded
corners and such on L,

00:12:42.806 --> 00:12:46.120
and we'll go ahead and give
you a best effort fake version

00:12:46.120 --> 00:12:49.630
and shape background pre L. But
as you can see from the slides

00:12:49.630 --> 00:12:52.230
up here, these actually
look pretty similar in terms

00:12:52.230 --> 00:12:55.390
of giving you the general
intent of the design.

00:12:55.390 --> 00:12:57.140
So this type of tools
is the sort of thing

00:12:57.140 --> 00:12:59.850
that we want to provide more
of, to allow you to express

00:12:59.850 --> 00:13:02.925
material design on
older platform versions.

00:13:02.925 --> 00:13:05.050
CHET HAASE: So now let's
talk about the other side,

00:13:05.050 --> 00:13:07.480
the APIs and
functionality that's

00:13:07.480 --> 00:13:08.781
actually in the L platform.

00:13:08.781 --> 00:13:10.530
The previous stuff was
in support library.

00:13:10.530 --> 00:13:12.071
Feel free to use it
wherever it makes

00:13:12.071 --> 00:13:13.310
sense for your application.

00:13:13.310 --> 00:13:15.290
If you're targeting
certain functionality

00:13:15.290 --> 00:13:17.350
for your application,
specifically at L,

00:13:17.350 --> 00:13:19.850
then you have access to the
new API that we introduced.

00:13:19.850 --> 00:13:22.420
First of all, let's
talk about shadows.

00:13:22.420 --> 00:13:26.300
So here is an early
video that the UX group

00:13:26.300 --> 00:13:29.010
did as they were exploring
the space of what they wanted

00:13:29.010 --> 00:13:30.730
the shadows to actually be like.

00:13:30.730 --> 00:13:32.210
So we can watch this.

00:13:32.210 --> 00:13:35.174
Let's see if it runs.

00:13:35.174 --> 00:13:36.340
So we have the light source.

00:13:36.340 --> 00:13:37.790
Notice it's an
area light source.

00:13:37.790 --> 00:13:39.930
We have an orthographic
projection for the camera,

00:13:39.930 --> 00:13:41.330
looking straight down.

00:13:41.330 --> 00:13:43.510
And then we have cards
doing complicated things,

00:13:43.510 --> 00:13:46.870
casting these nice,
real-time dynamic shadows.

00:13:46.870 --> 00:13:48.380
And all the
engineers responsible

00:13:48.380 --> 00:13:51.660
for implementing something like
this in 60 frames a second just

00:13:51.660 --> 00:13:55.424
had a heart attack

00:13:55.424 --> 00:13:56.840
ADAM POWELL: Or
sometimes laughed.

00:13:59.660 --> 00:14:03.250
CHET HAASE: So here's
my favorite video mock

00:14:03.250 --> 00:14:06.450
that came out of the design
team during the entire release.

00:14:06.450 --> 00:14:08.330
A couple of the
engineers, they were

00:14:08.330 --> 00:14:10.730
working on early prototypes
of the shadow stuff,

00:14:10.730 --> 00:14:12.280
went over to talk
to the design team.

00:14:12.280 --> 00:14:15.190
And as they were talking to
them about the requirement

00:14:15.190 --> 00:14:16.770
for having this
area light source--

00:14:16.770 --> 00:14:18.910
and maybe it should be rounded,
maybe it should be rectangular.

00:14:18.910 --> 00:14:20.360
We definitely want
rounded corners

00:14:20.360 --> 00:14:22.230
and soft shadows
and all this stuff.

00:14:22.230 --> 00:14:25.300
Obviously, it has to perform
at the 60 frames a second rate.

00:14:25.300 --> 00:14:28.820
In the background was a
high-end workstation running

00:14:28.820 --> 00:14:33.980
high-end animation software
rendering this-- one

00:14:33.980 --> 00:14:39.790
single frame in 30 seconds and
they wanted 60 frames a second

00:14:39.790 --> 00:14:40.470
on a phone.

00:14:43.870 --> 00:14:46.230
It's just so painful.

00:14:46.230 --> 00:14:48.680
You can even tell where
the shadows are there,

00:14:48.680 --> 00:14:51.250
and it's still taken this
long to render the thing.

00:14:51.250 --> 00:14:53.910
And we're wondering how to
actually do that in real time.

00:14:53.910 --> 00:14:56.990
And then I guess we figured out.

00:14:56.990 --> 00:14:59.900
So the idea behind
shadows is to allow

00:14:59.900 --> 00:15:03.760
you to elevate your views, to
post those views above the view

00:15:03.760 --> 00:15:04.560
hierarchy plane.

00:15:04.560 --> 00:15:09.610
So you can think of everything
prior to L living in a volume,

00:15:09.610 --> 00:15:12.910
if you will, except everything
was at z equals zero.

00:15:12.910 --> 00:15:14.730
Everything is in
that same plane.

00:15:14.730 --> 00:15:17.470
It's basically the
flat land of Android.

00:15:17.470 --> 00:15:19.810
Well, in the L
release, we allow you

00:15:19.810 --> 00:15:22.590
to then boost some of
those views at your option

00:15:22.590 --> 00:15:24.630
with an elevation
or a translation z

00:15:24.630 --> 00:15:26.680
value or a z value to
basically give them

00:15:26.680 --> 00:15:30.270
a z value that puts them
above the plane of everyone

00:15:30.270 --> 00:15:31.910
else in that flat land.

00:15:31.910 --> 00:15:34.296
And that allows them to
then automatically cast

00:15:34.296 --> 00:15:35.920
the shadow from the
aerial light source

00:15:35.920 --> 00:15:39.050
that we have positioned
locally above that world.

00:15:39.050 --> 00:15:41.662
One other advantage
of doing it this way,

00:15:41.662 --> 00:15:43.370
instead of just trying
to figure out, OK.

00:15:43.370 --> 00:15:45.970
Well, how can we quickly
draw this shadow image

00:15:45.970 --> 00:15:48.380
behind this thing and make it
look approximately correct?

00:15:48.380 --> 00:15:52.020
One advantage of doing it
correctly in the view volume

00:15:52.020 --> 00:15:55.310
approach is that views can also
draw outside of their container

00:15:55.310 --> 00:15:55.949
bounds.

00:15:55.949 --> 00:15:57.990
I don't know if you've
ever tried to draw a view,

00:15:57.990 --> 00:16:00.950
like cast a shadow
or scale the view up,

00:16:00.950 --> 00:16:03.510
and all of a sudden it
scales or it casts outside

00:16:03.510 --> 00:16:07.032
of its containment hierarchy,
then it gets clipped.

00:16:07.032 --> 00:16:09.240
And then you have to play
around with this API called

00:16:09.240 --> 00:16:10.670
setClipChildren(false).

00:16:10.670 --> 00:16:13.800
And things kind of go not
the way you expected them to,

00:16:13.800 --> 00:16:15.082
and it's all a horrible hack.

00:16:15.082 --> 00:16:16.790
So instead of doing
hacks, we're actually

00:16:16.790 --> 00:16:18.040
doing it physically correctly.

00:16:18.040 --> 00:16:19.607
We're creating this 3D volume.

00:16:19.607 --> 00:16:21.190
You can boost views
up there, and they

00:16:21.190 --> 00:16:23.660
can draw wherever they
want to in that volume.

00:16:23.660 --> 00:16:25.530
And their correct ordered in z.

00:16:25.530 --> 00:16:27.310
They draw in the correct order.

00:16:27.310 --> 00:16:29.520
And the shadows draw in the
correct order below them

00:16:29.520 --> 00:16:31.145
on top of the view
hierarchy itself.

00:16:31.145 --> 00:16:33.020
ADAM POWELL: In addition
to that, many of you

00:16:33.020 --> 00:16:35.380
have probably run into
cases where you really

00:16:35.380 --> 00:16:37.480
do want to have a proper
z order for your views

00:16:37.480 --> 00:16:38.840
when you start stacking them.

00:16:38.840 --> 00:16:41.740
In the past, you've had to
override the child ordering

00:16:41.740 --> 00:16:43.740
parameters for drawing.

00:16:43.740 --> 00:16:46.760
In the past, you may
have also just abused

00:16:46.760 --> 00:16:49.070
the general child ordering
within a view group

00:16:49.070 --> 00:16:50.740
in order to achieve
the desired effect,

00:16:50.740 --> 00:16:54.324
and this gives you a very easy
way to skip all of that hassle.

00:16:54.324 --> 00:16:55.740
CHET HAASE: So we
can look at some

00:16:55.740 --> 00:16:57.530
of the APIs involved
with doing this.

00:16:57.530 --> 00:16:59.600
There is basically the
elevation property.

00:16:59.600 --> 00:17:01.460
This is where that thing lives.

00:17:01.460 --> 00:17:04.029
You can think of this as
its permanent z location.

00:17:04.029 --> 00:17:05.695
And we have a couple
of other properties

00:17:05.695 --> 00:17:09.651
that are similar to the
translation x and translation y

00:17:09.651 --> 00:17:10.150
properties.

00:17:10.150 --> 00:17:13.210
Though, these are more
for use in animation,

00:17:13.210 --> 00:17:14.940
transient post
layout state where

00:17:14.940 --> 00:17:18.391
you're animating to and
from different z values.

00:17:18.391 --> 00:17:20.890
So for instance, if you have a
view that you want to pop up,

00:17:20.890 --> 00:17:23.960
you want that shadow to enlarge
when it's in a press state,

00:17:23.960 --> 00:17:26.950
then you would animate the
translation z property,

00:17:26.950 --> 00:17:30.150
whether or not it had a
positive elevation value.

00:17:30.150 --> 00:17:31.680
There's also other
APIs we're not

00:17:31.680 --> 00:17:33.270
showing on the slide
about clipping.

00:17:33.270 --> 00:17:35.799
So you can set the shape
of the shadow itself.

00:17:35.799 --> 00:17:37.590
So you can think of
floating action buttons

00:17:37.590 --> 00:17:39.440
as being this circular shape.

00:17:39.440 --> 00:17:41.200
Well, they want to
cast a circular shadow.

00:17:41.200 --> 00:17:43.590
Otherwise, the
illusion breaks down.

00:17:43.590 --> 00:17:46.760
So there are APIs to allow
you to set the shape that it

00:17:46.760 --> 00:17:47.780
casts the shadow from.

00:17:47.780 --> 00:17:51.960
There are also APIs to
allow you to set an outline

00:17:51.960 --> 00:17:53.580
that it's actually clipped to.

00:17:53.580 --> 00:17:56.230
Some of this necessarily,
given the constraints

00:17:56.230 --> 00:17:58.570
that we're operating
under, are very limited.

00:17:58.570 --> 00:18:02.530
You can't clip to arbitrary path
shapes, so some of the details

00:18:02.530 --> 00:18:03.830
are in the SDK Docs.

00:18:03.830 --> 00:18:07.850
And also the APIs around
clipping and specifically

00:18:07.850 --> 00:18:10.675
are probably apt to change as
we go toward the full release,

00:18:10.675 --> 00:18:12.550
but you can see where
we're at in the preview

00:18:12.550 --> 00:18:15.060
release in the meantime.

00:18:15.060 --> 00:18:19.830
Let's run a demo, so we can
see how this thing works.

00:18:19.830 --> 00:18:24.270
So if we can switch to
the demo-- here we go.

00:18:24.270 --> 00:18:27.350
You can see, next to
my very red finger,

00:18:27.350 --> 00:18:29.910
I can drag this card around.

00:18:29.910 --> 00:18:33.004
And I can actually enable tilt.

00:18:33.004 --> 00:18:34.670
You can get a subtle
tilt on this thing.

00:18:34.670 --> 00:18:36.794
I think there's even a
little bit of shading, which

00:18:36.794 --> 00:18:39.870
is probably way too subtle
for these projectors.

00:18:39.870 --> 00:18:49.230
So you can see this in fact
is not an artist's rendering.

00:18:49.230 --> 00:18:50.890
And it's not taking
30 seconds a frame.

00:18:50.890 --> 00:18:53.960
So we got 60 frames a second
on-- this is a Nexus 5.

00:18:53.960 --> 00:18:55.460
Actually a lot of
the early work was

00:18:55.460 --> 00:18:57.950
done on older and
slower devices.

00:18:57.950 --> 00:19:01.380
I think the original Nexus 7 was
used as a prototype device just

00:19:01.380 --> 00:19:03.160
to make sure that
things were actually

00:19:03.160 --> 00:19:04.250
going to be fast enough.

00:19:04.250 --> 00:19:05.970
And again, this is
an area light source

00:19:05.970 --> 00:19:08.178
for any of the graphics
geeks in the room, area light

00:19:08.178 --> 00:19:09.570
source local.

00:19:09.570 --> 00:19:11.320
There's a lot of
assumptions you can make,

00:19:11.320 --> 00:19:13.080
if it was a point source
and it was infinite.

00:19:13.080 --> 00:19:14.913
And we're not making
those assumptions here.

00:19:14.913 --> 00:19:17.380
We're actually creating
these meshes in real time

00:19:17.380 --> 00:19:19.470
to cast shadows with
soft boundaries,

00:19:19.470 --> 00:19:21.850
because that's the
effect that they wanted.

00:19:21.850 --> 00:19:23.520
So works reasonably well.

00:19:23.520 --> 00:19:25.500
There's another one
I was going to show.

00:19:25.500 --> 00:19:27.650
Let see, Shadow Card Stack.

00:19:27.650 --> 00:19:30.020
So you can see these
stacking elements

00:19:30.020 --> 00:19:32.460
as they're popped up
to different z values.

00:19:32.460 --> 00:19:34.640
And they cast larger
or smaller shadows

00:19:34.640 --> 00:19:38.045
just as you would expect in
this physically correct volume.

00:19:38.045 --> 00:19:39.920
ADAM POWELL: And this
demo really illustrates

00:19:39.920 --> 00:19:41.110
some of the other
facts that you may

00:19:41.110 --> 00:19:42.680
have seen during
the keynote demo

00:19:42.680 --> 00:19:45.290
as well, which is you
can have elements that

00:19:45.290 --> 00:19:47.680
are part of the
same merged plane,

00:19:47.680 --> 00:19:50.310
split and take on more of a
three dimensional character

00:19:50.310 --> 00:19:52.020
as you interact with them.

00:19:52.020 --> 00:19:54.020
CHET HAASE: If we can
switch back to the slides.

00:19:58.430 --> 00:19:58.980
There it is.

00:20:02.730 --> 00:20:03.230
Yeah.

00:20:03.230 --> 00:20:04.563
Let's talk about touch feedback.

00:20:04.563 --> 00:20:05.070
Sure.

00:20:05.070 --> 00:20:06.290
Let's talk about ripples.

00:20:06.290 --> 00:20:08.020
So one of the things
that we wanted

00:20:08.020 --> 00:20:10.305
to do in the UI in
general-- actually,

00:20:10.305 --> 00:20:12.430
we were thinking about it
in the engineering space,

00:20:12.430 --> 00:20:16.530
before we were faced with
the overall design language

00:20:16.530 --> 00:20:19.020
changes for material
design-- is the ability

00:20:19.020 --> 00:20:21.130
to tell the user more
of what's going on

00:20:21.130 --> 00:20:22.390
with their UI interactions.

00:20:22.390 --> 00:20:24.056
In particular, when
they press a button,

00:20:24.056 --> 00:20:27.274
there is that immediate atomic
interaction where the button is

00:20:27.274 --> 00:20:29.440
in a pressed state, so they
get pressed state color.

00:20:29.440 --> 00:20:30.070
That's nice.

00:20:30.070 --> 00:20:31.528
But wouldn't it be
nice if we could

00:20:31.528 --> 00:20:33.980
animate some of those changes
so they get information

00:20:33.980 --> 00:20:37.910
about the changing states, sort
of a time-based change in state

00:20:37.910 --> 00:20:40.961
as well as more information
about where that state actually

00:20:40.961 --> 00:20:41.460
changed?

00:20:41.460 --> 00:20:42.890
So ripples do that.

00:20:42.890 --> 00:20:45.990
The touch feedback interaction
on the standard widgets

00:20:45.990 --> 00:20:49.160
and on your custom widgets,
if you choose to enable it,

00:20:49.160 --> 00:20:52.210
gives you feedback
about a pressed state

00:20:52.210 --> 00:20:54.100
happening or other
states happening,

00:20:54.100 --> 00:20:55.800
so the ripple will
sort of emanate.

00:20:55.800 --> 00:20:58.420
Not only that, but it
will emanate optionally

00:20:58.420 --> 00:21:00.439
from the point of contact.

00:21:00.439 --> 00:21:01.980
So you can get a
ripple that actually

00:21:01.980 --> 00:21:03.521
starts from where
the finger pressed.

00:21:03.521 --> 00:21:06.190
So much more
interaction information

00:21:06.190 --> 00:21:08.470
for the user to actually
understand what's going on.

00:21:08.470 --> 00:21:10.920
ADAM POWELL: And again,
just to speak again

00:21:10.920 --> 00:21:12.920
to the principle of motion
and how that's really

00:21:12.920 --> 00:21:14.860
sort of helping
understand the UI

00:21:14.860 --> 00:21:17.160
this eliminates a lot
of the really disruptive

00:21:17.160 --> 00:21:18.870
flashing that you
see in UIs today

00:21:18.870 --> 00:21:21.980
where you get the entire wrecked
of the touch area lighting

00:21:21.980 --> 00:21:24.540
up very harshly as soon
as you touch the slightest

00:21:24.540 --> 00:21:25.300
corner of it.

00:21:25.300 --> 00:21:28.694
This softens that out a
little bit for your users.

00:21:28.694 --> 00:21:30.110
CHET HAASE: So
there's a new class

00:21:30.110 --> 00:21:31.880
called RippleDrawable
that enables this.

00:21:31.880 --> 00:21:33.940
And this basically
wraps the content

00:21:33.940 --> 00:21:38.152
that you want to display and
then reveals that content

00:21:38.152 --> 00:21:39.610
over time with the
ripple, and then

00:21:39.610 --> 00:21:41.110
you optionally have
a color that you

00:21:41.110 --> 00:21:45.730
can set as well to change
the properties of the ripple.

00:21:45.730 --> 00:21:47.740
This comes
automatically built in

00:21:47.740 --> 00:21:49.930
into a lot of the standard
widgets like buttons

00:21:49.930 --> 00:21:53.880
you'll see this in the
applications that are enabled

00:21:53.880 --> 00:21:57.570
with material design already,
or you can use RippleDrawable

00:21:57.570 --> 00:22:00.410
directly, either from code
you can instantiate it,

00:22:00.410 --> 00:22:04.440
or you can do this in XML
resources, or an easy way to do

00:22:04.440 --> 00:22:07.600
is you can set the foreground
or background of something

00:22:07.600 --> 00:22:09.170
to be a selectable
item background,

00:22:09.170 --> 00:22:11.621
and that will automatically
ripple that selection

00:22:11.621 --> 00:22:12.120
interaction.

00:22:14.700 --> 00:22:16.390
So we had some changes in icons.

00:22:16.390 --> 00:22:17.842
We had some new stuff added.

00:22:17.842 --> 00:22:19.050
There were a couple of these.

00:22:19.050 --> 00:22:21.510
One was state
animation drawable,

00:22:21.510 --> 00:22:25.750
which is the ability to actually
animate through different PNGs.

00:22:25.750 --> 00:22:27.730
You can think of this
as key frame animation

00:22:27.730 --> 00:22:30.150
where we're just flipping
through different images

00:22:30.150 --> 00:22:30.750
along the way.

00:22:30.750 --> 00:22:33.140
The check box and the
radio button, I think,

00:22:33.140 --> 00:22:35.030
in the L preview
release represent this.

00:22:35.030 --> 00:22:37.380
So if you've seen any of
the demos of that so far.

00:22:37.380 --> 00:22:39.510
If you want to actually
flash the system image,

00:22:39.510 --> 00:22:41.980
you'll see those widgets
interacting through this.

00:22:41.980 --> 00:22:45.880
It's basically a way for us
to animate from state to state

00:22:45.880 --> 00:22:48.980
through the series of
images along the way.

00:22:48.980 --> 00:22:51.400
And the other one was
stateless animator.

00:22:51.400 --> 00:22:54.140
The ability to say, OK,
when this widget goes

00:22:54.140 --> 00:22:56.190
from this state to
that state, here's

00:22:56.190 --> 00:22:58.310
this arbitrary animation
that I want to run.

00:22:58.310 --> 00:23:02.890
In general, you would give
it object animator animations

00:23:02.890 --> 00:23:05.190
as you see here, we're
stacking up three of them

00:23:05.190 --> 00:23:06.150
in an animator set.

00:23:06.150 --> 00:23:07.700
We're saying, OK,
I want to animate

00:23:07.700 --> 00:23:09.780
the following
properties on my object

00:23:09.780 --> 00:23:11.820
when I go from the
pressed to the unpressed

00:23:11.820 --> 00:23:17.170
state, and back and forth and
to different state combinations.

00:23:17.170 --> 00:23:20.070
So a much more flexible
way of saying, here's

00:23:20.070 --> 00:23:22.430
the behavior that I want
this widget to go through

00:23:22.430 --> 00:23:23.889
as it goes from
state a to state b.

00:23:23.889 --> 00:23:25.263
ADAM POWELL: So
what's an example

00:23:25.263 --> 00:23:26.780
of where someone might use that?

00:23:26.780 --> 00:23:28.696
CHET HAASE: For instance,
popping a button up.

00:23:28.696 --> 00:23:32.084
If you want to have a press
state for when you click

00:23:32.084 --> 00:23:34.250
on the button-- that sounded
like a canned question.

00:23:34.250 --> 00:23:34.749
It wasn't.

00:23:34.749 --> 00:23:36.210
I wasn't expecting
you to ask that.

00:23:36.210 --> 00:23:39.010
Like why are you making
me think up here?

00:23:39.010 --> 00:23:43.130
So if you want a button to set
its elevation property when

00:23:43.130 --> 00:23:44.690
someone presses on
it, then you can

00:23:44.690 --> 00:23:46.280
set an animation to do that.

00:23:46.280 --> 00:23:48.007
So when it gets into
the press state.

00:23:48.007 --> 00:23:49.590
It says, I'm going
to the press state.

00:23:49.590 --> 00:23:51.173
Here's an animation
that I need to run

00:23:51.173 --> 00:23:53.960
and then you would animate
the translation z property

00:23:53.960 --> 00:23:56.390
from say zero to 20.

00:23:56.390 --> 00:23:58.580
And then when it goes
back to its base state,

00:23:58.580 --> 00:24:00.430
you would animate
from 20 back to zero.

00:24:03.080 --> 00:24:03.590
Animation.

00:24:03.590 --> 00:24:04.990
Let's talk about animation.

00:24:04.990 --> 00:24:08.020
So there were various
things introduced

00:24:08.020 --> 00:24:10.150
in the preview
release, which you'll

00:24:10.150 --> 00:24:12.660
see in completely
different areas.

00:24:12.660 --> 00:24:14.637
And we'll sort of build
up to the largest one.

00:24:14.637 --> 00:24:17.220
The reveal animation we've seen
in some of the floating action

00:24:17.220 --> 00:24:19.530
button demos in the
previous talk for instance,

00:24:19.530 --> 00:24:22.584
as well as other interactions
that are up to you

00:24:22.584 --> 00:24:24.000
in your application
is the ability

00:24:24.000 --> 00:24:26.750
to define an
expanding shape that

00:24:26.750 --> 00:24:28.550
reveals the content
underneath it,

00:24:28.550 --> 00:24:31.200
like a circular reveal,
or you can combine

00:24:31.200 --> 00:24:34.020
this circular, this animated
circular shape with a more

00:24:34.020 --> 00:24:36.740
complex shape of
your view to get sort

00:24:36.740 --> 00:24:38.930
of a rounded wrecked
effect or whatever.

00:24:38.930 --> 00:24:41.000
Basically, you say
create this animation

00:24:41.000 --> 00:24:42.314
that is a circular reveal.

00:24:42.314 --> 00:24:44.230
It's going to be centered
here, and the radius

00:24:44.230 --> 00:24:47.050
is going to animate from
this value to that value.

00:24:47.050 --> 00:24:49.420
And then you start the
animation and you go.

00:24:49.420 --> 00:24:51.365
So very simple way to
create an animator.

00:24:51.365 --> 00:24:52.740
It's kind of an
opaque interface.

00:24:52.740 --> 00:24:54.400
There's not a lot of
flexibility there.

00:24:54.400 --> 00:24:56.650
Again, given the constraints
that we're under actually

00:24:56.650 --> 00:24:59.580
make these things performance
on the types of hardware

00:24:59.580 --> 00:25:00.910
that we have.

00:25:00.910 --> 00:25:04.890
We limit these capabilities
to the specific use cases

00:25:04.890 --> 00:25:06.580
that we find are important.

00:25:06.580 --> 00:25:09.850
So you can do what
you need to, but it's

00:25:09.850 --> 00:25:14.869
going to be limited to this
set of capabilities for now.

00:25:14.869 --> 00:25:16.410
The important thing
to realize though

00:25:16.410 --> 00:25:18.752
is that some of these
things can be expensive.

00:25:18.752 --> 00:25:20.460
So one of the things
that we wanted to do

00:25:20.460 --> 00:25:23.430
is not make it super easy
for you to just create

00:25:23.430 --> 00:25:24.915
this arbitrary
clip on your shape

00:25:24.915 --> 00:25:26.790
and leave it there all
the time, because that

00:25:26.790 --> 00:25:27.830
is incredibly expensive.

00:25:27.830 --> 00:25:30.340
The way that we implement
this stuff through the GPU

00:25:30.340 --> 00:25:31.167
is not trivial.

00:25:31.167 --> 00:25:33.000
So we're going to run
an animation over time

00:25:33.000 --> 00:25:34.958
and then it's going to
be done, and we can just

00:25:34.958 --> 00:25:37.580
be back to rectangular views,
because frankly that's easier.

00:25:37.580 --> 00:25:38.690
So it is expensive.

00:25:38.690 --> 00:25:41.540
We expect you to use these
in very transient situations

00:25:41.540 --> 00:25:43.540
where you're just
animating a thing,

00:25:43.540 --> 00:25:45.770
and then you back
out of the animation.

00:25:45.770 --> 00:25:49.940
You can get a similar
effect on previous releases.

00:25:49.940 --> 00:25:54.945
If you've used the
search on the Nexus 5--

00:25:54.945 --> 00:25:56.320
and the KitKat
release did this--

00:25:56.320 --> 00:25:58.490
they had a circular
reveal to show

00:25:58.490 --> 00:26:00.490
some of the search results.

00:26:00.490 --> 00:26:02.170
There are ways to
do this already.

00:26:02.170 --> 00:26:04.060
Again, there are
performance issues there,

00:26:04.060 --> 00:26:06.059
and you need to figure
out whether that actually

00:26:06.059 --> 00:26:09.480
works for your application
and your situation.

00:26:09.480 --> 00:26:11.740
But you can already do
it with drawing shapes

00:26:11.740 --> 00:26:14.450
with bitmap shaders.

00:26:14.450 --> 00:26:15.670
Animation curves.

00:26:15.670 --> 00:26:18.270
So one of the things
that the designers

00:26:18.270 --> 00:26:20.560
as well as the engineers
wanted in this release

00:26:20.560 --> 00:26:23.990
was the ability to have more
arbitrary time interpolation.

00:26:23.990 --> 00:26:25.330
So we already have the ability.

00:26:25.330 --> 00:26:27.770
In fact, the default
behavior of all animations

00:26:27.770 --> 00:26:29.020
is ease in ease out.

00:26:29.020 --> 00:26:31.112
So we have a subtle
acceleration.

00:26:31.112 --> 00:26:32.820
And then a subtle
deceleration out of it.

00:26:32.820 --> 00:26:36.802
And you can tweak how
magnified those effects are.

00:26:36.802 --> 00:26:39.260
And there's other things you
can accelerate all the way in.

00:26:39.260 --> 00:26:41.170
You can decelerate
all the way out.

00:26:41.170 --> 00:26:43.523
But once you get past
those, that's it.

00:26:43.523 --> 00:26:45.270
And designers
really like to think

00:26:45.270 --> 00:26:48.600
of things in terms
of curves instead,

00:26:48.600 --> 00:26:52.070
quadratic and cubic bezier
curves and the ability

00:26:52.070 --> 00:26:54.140
to tweak the parameters
to get exactly

00:26:54.140 --> 00:26:56.060
the kind of timely
behavior they need.

00:26:56.060 --> 00:26:58.310
So that's what we
implemented in the platform.

00:26:58.310 --> 00:27:01.370
And in particular, there's
three animation timing curves

00:27:01.370 --> 00:27:04.230
that they recommend as
part of material design.

00:27:04.230 --> 00:27:05.620
And you can see these here.

00:27:05.620 --> 00:27:10.430
They define these with
particular curve parameters.

00:27:10.430 --> 00:27:12.340
I put the file names
down at the bottom.

00:27:12.340 --> 00:27:14.090
So these are resources
that you can simply

00:27:14.090 --> 00:27:17.630
refer to as interpolators
in your animations,

00:27:17.630 --> 00:27:21.180
or you can actually set
the parameters arbitrarily.

00:27:21.180 --> 00:27:22.270
So you can see that here.

00:27:22.270 --> 00:27:24.970
There's an XML resource that
you can define to do this

00:27:24.970 --> 00:27:26.810
or you can access
the code directly.

00:27:26.810 --> 00:27:29.540
You're basically working
with a unit square.

00:27:29.540 --> 00:27:32.699
This is sort of a traditional
animation and graphics way

00:27:32.699 --> 00:27:33.490
of defining things.

00:27:33.490 --> 00:27:35.531
You have a unit square
from zero zero to one one.

00:27:35.531 --> 00:27:37.740
You can think of the
control points being

00:27:37.740 --> 00:27:39.782
at two corners of that square.

00:27:39.782 --> 00:27:41.240
Those are the anchor
points, sorry.

00:27:41.240 --> 00:27:43.260
And then you define
where the control points

00:27:43.260 --> 00:27:45.609
are to vary that
curve along the way.

00:27:45.609 --> 00:27:47.650
In fact, you can have a
much more arbitrary path.

00:27:47.650 --> 00:27:49.934
Because we're actually doing
a full on path in there.

00:27:49.934 --> 00:27:51.350
It's not even just
a single curve.

00:27:51.350 --> 00:27:53.290
You can define a complex path.

00:27:53.290 --> 00:27:56.830
I don't know why you
would, but you can.

00:27:56.830 --> 00:27:59.940
We also have the ability
to curb motion now.

00:27:59.940 --> 00:28:01.504
You can already do this.

00:28:01.504 --> 00:28:03.920
I wrote a blog post, I don't
know, two or three years ago,

00:28:03.920 --> 00:28:06.960
talking about how you can use
type evaluators to move things

00:28:06.960 --> 00:28:09.490
along in a spatial curve.

00:28:09.490 --> 00:28:12.672
It was not easy, which is why
I wrote a blog post around it

00:28:12.672 --> 00:28:13.380
and explained it.

00:28:13.380 --> 00:28:15.470
And you can certainly
still use that approach.

00:28:15.470 --> 00:28:17.280
But we also wanted to
enable an easier way

00:28:17.280 --> 00:28:18.840
to do this through the API.

00:28:18.840 --> 00:28:19.820
And now you can.

00:28:19.820 --> 00:28:22.130
There are new constructors
in Object Animator that

00:28:22.130 --> 00:28:25.160
will allow you to specify
the path that you want

00:28:25.160 --> 00:28:29.730
an object to follow as it moves
along animating both x and y as

00:28:29.730 --> 00:28:31.410
part of the same animation.

00:28:31.410 --> 00:28:34.934
So there's a path animations
demo in API demos.

00:28:34.934 --> 00:28:36.850
If you check out the
SDK, check out that demo.

00:28:36.850 --> 00:28:41.120
And it'll show you different
variations on that theme.

00:28:41.120 --> 00:28:42.130
Activity transition.

00:28:42.130 --> 00:28:43.630
So this was a fairly
big effort that

00:28:43.630 --> 00:28:47.650
built on the transitions API
that was introducing KitKat.

00:28:47.650 --> 00:28:51.570
The idea behind transitions
is to make animations

00:28:51.570 --> 00:28:53.280
much more easy and automatic.

00:28:53.280 --> 00:28:55.030
They're still customizable.

00:28:55.030 --> 00:28:59.144
But the big idea is I'd like to
know what state my UI was in.

00:28:59.144 --> 00:29:01.310
And then I want to know
what state it's going to be.

00:29:01.310 --> 00:29:03.740
And I want you to animate
everything in there, instead

00:29:03.740 --> 00:29:05.950
of me creating custom
animations for everything.

00:29:05.950 --> 00:29:09.220
So you snapshot where things
are at, and then you run layout.

00:29:09.220 --> 00:29:10.890
And right before
it draws things,

00:29:10.890 --> 00:29:12.726
you figure out where
things are going to be.

00:29:12.726 --> 00:29:14.100
And then you roll
everything back

00:29:14.100 --> 00:29:15.950
and you animate those
changes instead.

00:29:15.950 --> 00:29:17.660
That's the way
transitions works.

00:29:17.660 --> 00:29:20.570
And that's the API that
came out in KitKat.

00:29:20.570 --> 00:29:24.310
And this is the way that
activity transitions now

00:29:24.310 --> 00:29:25.010
work as well.

00:29:25.010 --> 00:29:27.030
It builds on that
same model, but allows

00:29:27.030 --> 00:29:29.640
you to have that same
way of specifying

00:29:29.640 --> 00:29:32.060
animations between activities.

00:29:32.060 --> 00:29:34.160
And not only that, not
only does it figure out

00:29:34.160 --> 00:29:37.129
how to animate these things out
from the launch, the launching

00:29:37.129 --> 00:29:38.920
activity, and how do
they animate the items

00:29:38.920 --> 00:29:41.340
in on the launched
activity, but you can also

00:29:41.340 --> 00:29:45.320
specify a set of
shared QUrl elements

00:29:45.320 --> 00:29:47.890
that are then basically
thrown over the wire.

00:29:47.890 --> 00:29:50.930
And said, OK, this
image was here.

00:29:50.930 --> 00:29:52.450
And now it's going to be there.

00:29:52.450 --> 00:29:54.158
And it's going to be
this different size,

00:29:54.158 --> 00:29:56.010
and animate that
change automatically.

00:29:56.010 --> 00:29:59.590
So we came up with a protocol
for defining, OK, here's

00:29:59.590 --> 00:30:01.430
the name that we're
defining for this thing.

00:30:01.430 --> 00:30:02.930
then the activity
on the other side,

00:30:02.930 --> 00:30:04.500
if it knows what
that name is Ken

00:30:04.500 --> 00:30:07.210
make some assumptions about
that being the same element then

00:30:07.210 --> 00:30:09.940
that element is shared across
and animated automatically

00:30:09.940 --> 00:30:11.310
through activity transitions.

00:30:11.310 --> 00:30:13.060
ADAM POWELL: So the summary
for that is essentially

00:30:13.060 --> 00:30:14.990
that this now gives you
a way of establishing

00:30:14.990 --> 00:30:17.060
a protocol between
different activities

00:30:17.060 --> 00:30:19.750
that may or may not be part
of the same application

00:30:19.750 --> 00:30:23.280
to share a particular
element in a transition

00:30:23.280 --> 00:30:25.000
from one to the other.

00:30:25.000 --> 00:30:27.130
CHET HAASE: So
you can already do

00:30:27.130 --> 00:30:30.510
this in your own
application, like if you

00:30:30.510 --> 00:30:33.200
have a sub-activity--
say a details

00:30:33.200 --> 00:30:35.650
view for some thumbnails.

00:30:35.650 --> 00:30:37.870
There is a already
technique for doing this.

00:30:37.870 --> 00:30:40.540
What we're doing is
making that less of a hack

00:30:40.540 --> 00:30:42.320
and more codified
in the framework

00:30:42.320 --> 00:30:44.350
APIs to allow you
to do that more

00:30:44.350 --> 00:30:46.066
easily inside your application.

00:30:46.066 --> 00:30:47.690
Not only that, but
through the protocol

00:30:47.690 --> 00:30:51.067
we've established with the names
of the shared hero elements,

00:30:51.067 --> 00:30:52.900
you could actually do
that across processes.

00:30:52.900 --> 00:30:55.320
You could end up launching
somebody else's activity.

00:30:55.320 --> 00:30:57.950
And if they know what to do
with that shared hero element,

00:30:57.950 --> 00:31:01.376
then they can take part in that
activity transition animation.

00:31:01.376 --> 00:31:03.500
If you want know how to do
it on previous releases,

00:31:03.500 --> 00:31:05.124
if you're trying to
do this everywhere,

00:31:05.124 --> 00:31:08.257
there's a dev bite on it called
customer activity animations.

00:31:08.257 --> 00:31:10.090
And you can think about
the technique that's

00:31:10.090 --> 00:31:13.540
used there as basically being
baked more into the framework

00:31:13.540 --> 00:31:15.989
as a first class citizen
of how to do it for real.

00:31:15.989 --> 00:31:16.780
ADAM POWELL: Right.

00:31:16.780 --> 00:31:18.760
And this will take care of a
lot of the really tricky bits

00:31:18.760 --> 00:31:20.571
around the activity
life cycle itself.

00:31:20.571 --> 00:31:22.320
If your activity gets
restarted, make sure

00:31:22.320 --> 00:31:24.470
that you're not replaying
another intro transition

00:31:24.470 --> 00:31:27.096
animation that you don't want to
see again, so on and so forth.

00:31:27.096 --> 00:31:28.720
CHET HAASE: So here's
some of the code.

00:31:28.720 --> 00:31:30.940
There's actually a lot more
APIs than code involved,

00:31:30.940 --> 00:31:32.850
especially when you
start customizing things.

00:31:32.850 --> 00:31:34.350
But just to give
you an introduction

00:31:34.350 --> 00:31:36.660
to how you enable these
things and how you actually

00:31:36.660 --> 00:31:39.670
start these
animations-- so you can

00:31:39.670 --> 00:31:41.470
put this item in
your theme, you can

00:31:41.470 --> 00:31:44.740
define a style that says I want
to enable these window content

00:31:44.740 --> 00:31:48.320
transitions or you can do
it in code-- very similar.

00:31:48.320 --> 00:31:52.154
And then you can either just
use the default animations which

00:31:52.154 --> 00:31:54.320
you're going to cross fade
between activities-- just

00:31:54.320 --> 00:31:56.710
a simple fade out
fade in, or you

00:31:56.710 --> 00:31:59.540
can set custom transitions,
either ones that you define,

00:31:59.540 --> 00:32:01.450
or ones that the
platform gives you,

00:32:01.450 --> 00:32:03.550
like I want an explode
transition which

00:32:03.550 --> 00:32:06.850
shoves everything out off the
top and the bottom of the sides

00:32:06.850 --> 00:32:08.350
of the screen.

00:32:08.350 --> 00:32:12.720
And so you can set these
customs for the exiting activity

00:32:12.720 --> 00:32:14.300
as well as the
entering activity.

00:32:14.300 --> 00:32:16.930
And then finally you can
define what the shared element

00:32:16.930 --> 00:32:19.460
set is that you're
passing over the wire,

00:32:19.460 --> 00:32:22.410
give it names, pass it
over, and then define

00:32:22.410 --> 00:32:27.220
what the transition animation is
that happens on those elements

00:32:27.220 --> 00:32:29.590
as well.

00:32:29.590 --> 00:32:31.247
We have a demo in a minute.

00:32:31.247 --> 00:32:33.830
Finally, I want to mention that
there are new transitions that

00:32:33.830 --> 00:32:35.380
were written as
part of this work.

00:32:35.380 --> 00:32:37.690
These are available for
transitions in general.

00:32:37.690 --> 00:32:39.420
There's the ability
to move image.

00:32:39.420 --> 00:32:42.060
It's a lot more flexible.

00:32:42.060 --> 00:32:44.120
Image view can be
a little bit cranky

00:32:44.120 --> 00:32:46.510
when you're trying to
resize it along the way

00:32:46.510 --> 00:32:49.550
and this has some capabilities
to allow you to do things

00:32:49.550 --> 00:32:52.790
in ways that you probably want
to, if you're scaling or moving

00:32:52.790 --> 00:32:55.630
images around on the screen
as part of these transitions.

00:32:55.630 --> 00:32:58.471
Sliding effect is to slide
things in and out to the right

00:32:58.471 --> 00:32:58.970
and left.

00:32:58.970 --> 00:33:02.840
Exploding is exploding the items
out with this staggered delay

00:33:02.840 --> 00:33:06.010
so you get a nice effective
things gradually moving off

00:33:06.010 --> 00:33:08.650
the screen and a couple
other transitions as well.

00:33:08.650 --> 00:33:10.400
But let's take a
look at a quick demo.

00:33:10.400 --> 00:33:15.370
If we can switch
to the demo device.

00:33:15.370 --> 00:33:16.085
Back out of here.

00:33:19.320 --> 00:33:22.970
So this is an API demos.

00:33:22.970 --> 00:33:27.630
This is just a simple demo
that shows some of the how-tos.

00:33:27.630 --> 00:33:29.620
So the items that I'm
clicking on, obviously

00:33:29.620 --> 00:33:32.230
are the thumbnail images
that the end up launching

00:33:32.230 --> 00:33:33.840
this other activity
you're going into.

00:33:33.840 --> 00:33:36.250
They share that as
the shared elements.

00:33:36.250 --> 00:33:39.030
You can see the other
images animating out,

00:33:39.030 --> 00:33:42.110
and then the list items,
the text animating in

00:33:42.110 --> 00:33:44.490
on the other activity.

00:33:44.490 --> 00:33:51.157
And then this is
a demo there was

00:33:51.157 --> 00:33:52.490
written as part of another talk.

00:33:52.490 --> 00:33:54.420
At 2 o'clock will go
into more of the details

00:33:54.420 --> 00:33:56.700
and some of these
graphics goodies.

00:33:56.700 --> 00:33:59.730
And again, you can see
as we press on this thing

00:33:59.730 --> 00:34:01.472
that it launches
this other activity.

00:34:01.472 --> 00:34:02.930
And we go into the
second activity,

00:34:02.930 --> 00:34:05.862
sharing the thumbnail, sharing
that bitmap images the data

00:34:05.862 --> 00:34:08.070
that's being passed over
for the shared hero element.

00:34:08.070 --> 00:34:09.350
If we go back to the slides.

00:34:17.639 --> 00:34:18.610
Take it away.

00:34:18.610 --> 00:34:20.320
Take it away.

00:34:20.320 --> 00:34:22.610
ADAM POWELL: So the
takeaway for this talk

00:34:22.610 --> 00:34:24.630
is that we're going
to provide you

00:34:24.630 --> 00:34:27.319
with the material
look and feel for all

00:34:27.319 --> 00:34:28.860
the basic parts of
the framework, all

00:34:28.860 --> 00:34:31.909
the buttons and check
boxes, and everything else.

00:34:31.909 --> 00:34:34.170
We'll give you the
ability to theme these.

00:34:34.170 --> 00:34:37.120
So you can go ahead and apply
your branding colors to these

00:34:37.120 --> 00:34:39.790
without having to auto
generate a lot of extra assets

00:34:39.790 --> 00:34:40.789
within your application.

00:34:43.670 --> 00:34:45.590
But that's really not enough.

00:34:45.590 --> 00:34:49.489
What you really need to do is
to work with your designers,

00:34:49.489 --> 00:34:51.650
work with the
design guide itself.

00:34:51.650 --> 00:34:53.892
And you're still
going to be writing

00:34:53.892 --> 00:34:55.600
a lot of custom code
in your application.

00:34:55.600 --> 00:34:57.930
Because the parts that make
your application really

00:34:57.930 --> 00:35:01.036
stand out and be different are
the parts that we can't write

00:35:01.036 --> 00:35:03.410
for you or else they're going
to be the exact same things

00:35:03.410 --> 00:35:04.904
that every other
application does.

00:35:04.904 --> 00:35:06.570
What we want to do
is make sure that you

00:35:06.570 --> 00:35:08.320
have the tools
available in order

00:35:08.320 --> 00:35:10.980
to make those really unique
experiences for your users.

00:35:13.770 --> 00:35:14.820
CHET HAASE: Resources.

00:35:14.820 --> 00:35:17.120
So there's few resources
that are worth mentioning.

00:35:17.120 --> 00:35:18.910
You've probably seen
this one already.

00:35:18.910 --> 00:35:21.190
There is a design spec.

00:35:21.190 --> 00:35:22.610
Is it there?

00:35:22.610 --> 00:35:25.650
There's a link off the
d.android.com to a bunch

00:35:25.650 --> 00:35:27.130
of this information.

00:35:27.130 --> 00:35:31.180
And you certainly want to check
out the preview site itself.

00:35:31.180 --> 00:35:32.160
Get the SDK.

00:35:32.160 --> 00:35:32.987
Build against it.

00:35:32.987 --> 00:35:35.070
Get the system images
flashed onto to your device.

00:35:35.070 --> 00:35:36.322
Play around with it.

00:35:36.322 --> 00:35:38.530
I would also suggest if
you're interested, especially

00:35:38.530 --> 00:35:40.988
in the graphics and animation
part of what we talked about,

00:35:40.988 --> 00:35:44.590
you can come to a talk at 2:00
PM that coincidentally has me

00:35:44.590 --> 00:35:47.160
on stage again with [INAUDIBLE].

00:35:47.160 --> 00:35:49.912
And we'll go into all are more
technical details about how

00:35:49.912 --> 00:35:51.620
some of this stuff
works and how it might

00:35:51.620 --> 00:35:55.480
be used to create these
kinds of applications.

00:35:55.480 --> 00:35:59.150
And finally, oh there's
a feedback URL again.

00:35:59.150 --> 00:36:02.540
And we actually have
some time for questions.

00:36:02.540 --> 00:36:04.170
So there are a couple of mics.

00:36:04.170 --> 00:36:06.580
Find a mic out there and
fire your questions at us.

00:36:06.580 --> 00:36:07.840
ADAM POWELL: Come on up.

00:36:07.840 --> 00:36:09.360
Yes.

00:36:09.360 --> 00:36:11.050
AUDIENCE: So quick question.

00:36:11.050 --> 00:36:13.870
I want to know how
we're going to be

00:36:13.870 --> 00:36:16.690
able to access this in
previous versions of Android.

00:36:16.690 --> 00:36:18.190
I know I can look
that up obviously.

00:36:18.190 --> 00:36:19.970
But I want to know
how much of this

00:36:19.970 --> 00:36:21.500
is supported in the
Support Library,

00:36:21.500 --> 00:36:23.330
and which version of
the Support Library.

00:36:23.330 --> 00:36:25.830
ADAM POWELL: So there's a new
version of the Support Library

00:36:25.830 --> 00:36:27.310
out with the Preview
SDK right now

00:36:27.310 --> 00:36:29.300
that's going to make
some of this available.

00:36:29.300 --> 00:36:32.300
But really the preview
SDK is more about

00:36:32.300 --> 00:36:35.477
showing you some of the new
APIs in their natural habitat.

00:36:35.477 --> 00:36:37.060
And for a lot of
other reasons, you're

00:36:37.060 --> 00:36:39.070
probably not going to want to
let some of the apps linked

00:36:39.070 --> 00:36:41.056
against the preview
SDK out into the wild,

00:36:41.056 --> 00:36:42.680
just because it's
going to be involving

00:36:42.680 --> 00:36:44.470
a lot of other pre-release API.

00:36:44.470 --> 00:36:47.000
That being said, once
the final SDK version

00:36:47.000 --> 00:36:50.240
is available you'll see that the
app compact library and others

00:36:50.240 --> 00:36:53.920
will have some of the back ports
of some of the visual styling

00:36:53.920 --> 00:36:55.110
that's available.

00:36:55.110 --> 00:36:57.290
And we're going to
continue offering things

00:36:57.290 --> 00:37:01.480
along the lines of CardView
to do very specific use cases,

00:37:01.480 --> 00:37:03.150
and then things
like RecyclerView

00:37:03.150 --> 00:37:06.030
that will allow you to bring
that kind of motion everywhere.

00:37:06.030 --> 00:37:07.780
Now things like the
activity transitions

00:37:07.780 --> 00:37:09.869
that Chet spent some
time talking about,

00:37:09.869 --> 00:37:11.910
that you're probably not
going to have available.

00:37:11.910 --> 00:37:13.480
So we're probably going
to just go ahead and have

00:37:13.480 --> 00:37:16.500
some simple fall backs that you
probably already know and love

00:37:16.500 --> 00:37:17.730
there.

00:37:17.730 --> 00:37:19.920
CHET HAASE: It's also
important to note

00:37:19.920 --> 00:37:21.370
as it came up
earlier in the talk

00:37:21.370 --> 00:37:23.210
that a lot of what
we're talking about

00:37:23.210 --> 00:37:26.090
is an approach to design
that you can then implement

00:37:26.090 --> 00:37:28.820
using standard
Android programming.

00:37:28.820 --> 00:37:30.400
Some the new animation
capabilities,

00:37:30.400 --> 00:37:33.209
if they're not part of the
APIs on the earlier platforms,

00:37:33.209 --> 00:37:34.000
you can't use them.

00:37:34.000 --> 00:37:35.458
But there are other
ways to achieve

00:37:35.458 --> 00:37:37.850
those kinds of
effects in many cases.

00:37:37.850 --> 00:37:41.780
And some of the measurement, the
layout, the colors, that stuff,

00:37:41.780 --> 00:37:44.630
you can get stuff to
look very similar.

00:37:44.630 --> 00:37:47.360
It's just going to be a little
different approach for some

00:37:47.360 --> 00:37:49.540
of the new animation
capabilities in particular.

00:37:49.540 --> 00:37:51.010
ADAM POWELL: That's right.

00:37:51.010 --> 00:37:54.037
The microphone in the back.

00:37:54.037 --> 00:37:55.120
AUDIENCE: Can you hear me?

00:37:55.120 --> 00:37:55.480
CHET HAASE: Yes.

00:37:55.480 --> 00:37:56.188
ADAM POWELL: Yes.

00:37:56.188 --> 00:37:56.960
AUDIENCE: Good.

00:37:56.960 --> 00:38:00.610
So in the keynote and in some
demos that I've been seeing,

00:38:00.610 --> 00:38:04.520
I've noticed that there's been
a movement to circular image

00:38:04.520 --> 00:38:05.460
views.

00:38:05.460 --> 00:38:10.572
Is that going to be available
widget for us to use?

00:38:10.572 --> 00:38:11.280
ADAM POWELL: Yes.

00:38:11.280 --> 00:38:13.488
I don't remember if we made
it just a simple drawable

00:38:13.488 --> 00:38:16.270
or an actual view, but we've
got a component in the Support

00:38:16.270 --> 00:38:18.240
Library that we'll
go ahead and apply

00:38:18.240 --> 00:38:21.300
that circular clip
to your images.

00:38:21.300 --> 00:38:22.830
CHET HAASE: There's
a rounded bitmap

00:38:22.830 --> 00:38:24.220
drawable in the Support Library.

00:38:24.220 --> 00:38:24.505
ADAM POWELL: Yeah,
I think that was it.

00:38:24.505 --> 00:38:26.504
CHET HAASE: Is that what
you were talking about?

00:38:26.504 --> 00:38:27.460
Yeah.

00:38:27.460 --> 00:38:28.410
It's fairly simple.

00:38:28.410 --> 00:38:32.050
We did not create a floating
action button or a fab widget,

00:38:32.050 --> 00:38:34.330
because it's pretty darn simple.

00:38:34.330 --> 00:38:36.000
It's basically an
image view where

00:38:36.000 --> 00:38:39.602
the thing that your drawing
is a circular image.

00:38:39.602 --> 00:38:40.560
Fairly straightforward.

00:38:40.560 --> 00:38:41.768
You set an elevation on that.

00:38:41.768 --> 00:38:45.270
You tell us what the outline
is and we do the right thing

00:38:45.270 --> 00:38:46.200
with it.

00:38:46.200 --> 00:38:48.390
It's similar for
CardView actually.

00:38:48.390 --> 00:38:50.900
I want to mention this.

00:38:50.900 --> 00:38:53.114
It's very easy to actually
get a CardView effect.

00:38:53.114 --> 00:38:55.280
In fact, the demo that we're
going to show in a talk

00:38:55.280 --> 00:38:58.817
later today, I just implemented
using a standard view

00:38:58.817 --> 00:39:00.650
that I clicked and I
shadowed appropriately.

00:39:00.650 --> 00:39:02.040
It was straightforward.

00:39:02.040 --> 00:39:04.880
The advantage of us baking
it in into a specific widget

00:39:04.880 --> 00:39:08.420
is, at least we have standard
padding and layout, and also

00:39:08.420 --> 00:39:10.930
the ability to have
that similar look

00:39:10.930 --> 00:39:12.330
and feel on earlier releases.

00:39:12.330 --> 00:39:15.490
So that seemed worth creating
a widget for, the fab,

00:39:15.490 --> 00:39:17.030
not so much.

00:39:17.030 --> 00:39:17.790
AUDIENCE: Thanks.

00:39:17.790 --> 00:39:18.562
CHET HAASE: Yep.

00:39:18.562 --> 00:39:20.770
AUDIENCE: So the activity
transactions and everything

00:39:20.770 --> 00:39:24.460
are really nice and definitely
solve a common pain point.

00:39:24.460 --> 00:39:27.470
What I wanted to know is if
there's a need support for that

00:39:27.470 --> 00:39:30.550
for fragment
transactions and things

00:39:30.550 --> 00:39:32.002
going across
fragment boundaries?

00:39:32.002 --> 00:39:32.710
ADAM POWELL: Yes.

00:39:32.710 --> 00:39:34.670
I don't believe it made it
into the Preview as of yet.

00:39:34.670 --> 00:39:34.960
CHET HAASE: Yes.

00:39:34.960 --> 00:39:35.550
Not yet.

00:39:35.550 --> 00:39:36.105
But yes.

00:39:36.105 --> 00:39:38.630
As soon as we solved the
really hard problem which

00:39:38.630 --> 00:39:41.100
was activity transitions,
the next step

00:39:41.100 --> 00:39:42.510
was fragment transitions.

00:39:42.510 --> 00:39:44.130
So I would look for that.

00:39:44.130 --> 00:39:45.000
AUDIENCE: Thank you.

00:39:45.000 --> 00:39:46.740
CHET HAASE: Yup.

00:39:46.740 --> 00:39:48.004
ADAM POWELL: In the back.

00:39:48.004 --> 00:39:49.420
AUDIENCE: He had
the same question

00:39:49.420 --> 00:39:52.540
I did for activity tran--
but we can see expect

00:39:52.540 --> 00:39:55.959
to see that in another
preview release maybe?

00:39:55.959 --> 00:39:57.750
CHET HAASE: I don't
know what the timing is

00:39:57.750 --> 00:39:59.290
of other bits coming out.

00:39:59.290 --> 00:40:01.697
I would just say expect
to see that in L.

00:40:01.697 --> 00:40:03.155
AUDIENCE: But you're
working on it?

00:40:03.155 --> 00:40:03.821
CHET HAASE: Yes.

00:40:03.821 --> 00:40:05.380
ADAM POWELL: Mm-hmm.

00:40:05.380 --> 00:40:08.060
AUDIENCE: So now that we're
having these elevation

00:40:08.060 --> 00:40:11.010
transitions for objects,
implies manipulability

00:40:11.010 --> 00:40:12.430
of things on the screen.

00:40:12.430 --> 00:40:14.700
Are there any improvements
to drag and drop

00:40:14.700 --> 00:40:16.346
coming into L as well?

00:40:16.346 --> 00:40:17.970
ADAM POWELL: What
kind of drag and drop

00:40:17.970 --> 00:40:19.345
are you looking
for specifically?

00:40:19.345 --> 00:40:21.404
AUDIENCE: Reordering
collections arbitrarily.

00:40:21.404 --> 00:40:22.320
ADAM POWELL: Oh I see.

00:40:22.320 --> 00:40:23.680
AUDIENCE: Nice event interface.

00:40:23.680 --> 00:40:24.070
ADAM POWELL: Yeah.

00:40:24.070 --> 00:40:26.460
So one of the things that
RecyclerView let's you do

00:40:26.460 --> 00:40:32.367
is it lets you apply some item
touch listeners that basically

00:40:32.367 --> 00:40:34.700
it lets you handle touch at
the level of the collection,

00:40:34.700 --> 00:40:36.740
rather than the level
of specific items views.

00:40:36.740 --> 00:40:38.870
So you don't have to perform
a lot of the translation back

00:40:38.870 --> 00:40:40.328
up to the parent
and then back down

00:40:40.328 --> 00:40:42.831
to specific points
in space for that.

00:40:42.831 --> 00:40:44.330
So hopefully that'll
be much easier.

00:40:44.330 --> 00:40:44.520
AUDIENCE: Yeah.

00:40:44.520 --> 00:40:46.061
That's exactly what
I was hoping for.

00:40:46.061 --> 00:40:47.030
Thanks.

00:40:47.030 --> 00:40:48.030
CHET HAASE: In the back.

00:40:48.030 --> 00:40:48.725
ADAM POWELL: In the back.

00:40:48.725 --> 00:40:50.470
AUDIENCE: Does it
makes sense or is it

00:40:50.470 --> 00:40:53.510
even possible in existing
code to change ListViews

00:40:53.510 --> 00:40:55.329
to RecyclerViews?

00:40:55.329 --> 00:40:57.120
ADAM POWELL: So they're
largely compatible.

00:40:57.120 --> 00:41:02.080
There's just two
key differences.

00:41:02.080 --> 00:41:04.890
First is that if you are used
to cursor adapter and the way

00:41:04.890 --> 00:41:07.380
that it splits out create
and bind view into two

00:41:07.380 --> 00:41:09.460
different steps,
this is the default

00:41:09.460 --> 00:41:10.770
state of being in RecyclerView.

00:41:10.770 --> 00:41:13.080
So as long as you can
split out those components

00:41:13.080 --> 00:41:15.760
of your GetView from your
ListView adapters right now,

00:41:15.760 --> 00:41:17.370
then that's one
easy thing to do.

00:41:17.370 --> 00:41:20.140
The next piece is, like
I mentioned before,

00:41:20.140 --> 00:41:23.750
being able to supply
richer notifications

00:41:23.750 --> 00:41:25.690
about the nature of
a data set change.

00:41:25.690 --> 00:41:27.740
So without getting
those sorts of signals,

00:41:27.740 --> 00:41:29.350
rather than just a
very coarse grained

00:41:29.350 --> 00:41:31.190
notify data set change
call, then we're

00:41:31.190 --> 00:41:33.731
not going to be able to do quite
as much with the animations.

00:41:33.731 --> 00:41:35.420
AUDIENCE: Is that the
only benefit then?

00:41:35.420 --> 00:41:35.920
Is the--

00:41:35.920 --> 00:41:36.711
ADAM POWELL: Which?

00:41:36.711 --> 00:41:37.715
The animations?

00:41:37.715 --> 00:41:40.602
AUDIENCE: The richer
notifications.

00:41:40.602 --> 00:41:41.560
CHET HAASE: It's newer.

00:41:41.560 --> 00:41:42.892
It's cooler.

00:41:42.892 --> 00:41:44.600
ADAM POWELL: It should
be obvious, right?

00:41:44.600 --> 00:41:46.300
I guess I don't quite
understand the question.

00:41:46.300 --> 00:41:48.600
So from some of the stuff
that we talked about before,

00:41:48.600 --> 00:41:53.040
we've got-- do you mean benefits
of switching over the adapters

00:41:53.040 --> 00:41:56.580
or switching from like a
ListView to a RecyclerView

00:41:56.580 --> 00:41:58.310
for what's essentially
the same UI?

00:41:58.310 --> 00:41:58.910
AUDIENCE: Yes.

00:41:58.910 --> 00:41:59.480
ADAM POWELL: OK.

00:41:59.480 --> 00:41:59.980
Yeah.

00:41:59.980 --> 00:42:02.580
If ListView is still meeting
your needs, then by all means

00:42:02.580 --> 00:42:04.580
don't do any more work
than you already have to.

00:42:04.580 --> 00:42:07.300
This is mostly to address
the needs of any UIs

00:42:07.300 --> 00:42:10.535
where you really want to
be able to do much more

00:42:10.535 --> 00:42:12.160
intricate motion and
intricate touching

00:42:12.160 --> 00:42:14.760
or action with your items or if
you want to do custom layouts.

00:42:14.760 --> 00:42:15.020
AUDIENCE: OK.

00:42:15.020 --> 00:42:15.520
Thanks.

00:42:18.049 --> 00:42:20.340
AUDIENCE: What do you guys
think about the relationship

00:42:20.340 --> 00:42:27.330
between these new
styles and basically

00:42:27.330 --> 00:42:29.780
how it relates to overdraw
and battling overdraw?

00:42:29.780 --> 00:42:34.179
Because from my point of view,
it seems not overdraw friendly.

00:42:34.179 --> 00:42:36.470
ADAM POWELL: Do you want to
talk about some of the work

00:42:36.470 --> 00:42:39.150
that we were doing with some of
the drawing command reordering.

00:42:39.150 --> 00:42:40.941
Because I think that
some of that comes in.

00:42:40.941 --> 00:42:41.910
CHET HAASE: Yeah.

00:42:41.910 --> 00:42:43.990
We wear many hats
in the Toolkit team.

00:42:43.990 --> 00:42:46.750
And one of them is
all about performance.

00:42:46.750 --> 00:42:50.790
So there was a lot of work
done in previous releases

00:42:50.790 --> 00:42:54.410
about optimizing display
lists and eliminating overdraw

00:42:54.410 --> 00:42:57.490
as much as we can automatically
actually in the framework.

00:42:57.490 --> 00:43:01.550
So it used to be the
case that if you had,

00:43:01.550 --> 00:43:03.050
let's say a view
that was completely

00:43:03.050 --> 00:43:05.290
obscured by another view
that was larger than it

00:43:05.290 --> 00:43:08.337
and completely opaque, we're
going overdraw that thing.

00:43:08.337 --> 00:43:09.920
Because we don't
know what's going on.

00:43:09.920 --> 00:43:12.180
If you want to draw that,
OK, we'll draw it for you.

00:43:12.180 --> 00:43:13.790
And all of sudden
you have 2x overdraw

00:43:13.790 --> 00:43:15.477
without doing anything.

00:43:15.477 --> 00:43:17.060
So now we can actually
eliminate that,

00:43:17.060 --> 00:43:19.380
because we do some post
processing on the display list,

00:43:19.380 --> 00:43:21.920
so we don't draw the thing
as completely obscured.

00:43:21.920 --> 00:43:23.760
So there's a lot of
intelligence going

00:43:23.760 --> 00:43:26.060
into this playlist
optimizations already

00:43:26.060 --> 00:43:27.920
to avoid some of
those situations.

00:43:27.920 --> 00:43:30.700
I would agree that more
animations and more rich

00:43:30.700 --> 00:43:32.625
graphics on the
screen probably means

00:43:32.625 --> 00:43:34.500
that you need to be
aware of what's going on.

00:43:34.500 --> 00:43:37.230
If you're having fading
in translucent effects

00:43:37.230 --> 00:43:39.060
all over the screen
all the time,

00:43:39.060 --> 00:43:41.090
then yes, we will be
drawing more pixels

00:43:41.090 --> 00:43:43.010
than if you didn't do that.

00:43:43.010 --> 00:43:46.520
But it's kind of a standard
Android programming technique,

00:43:46.520 --> 00:43:48.280
like be aware of
what's going on screen.

00:43:48.280 --> 00:43:51.890
Use the tools that are there,
like the overdraw detector

00:43:51.890 --> 00:43:54.920
to actually show what's
going on at the pixel level

00:43:54.920 --> 00:43:57.550
and make sure that you're not
tripping over those hazards.

00:43:57.550 --> 00:43:59.675
ADAM POWELL: In practice,
we've seen a lot of teams

00:43:59.675 --> 00:44:01.670
start building their
material UI so far.

00:44:01.670 --> 00:44:03.770
And by and large, their
overdraw situation

00:44:03.770 --> 00:44:07.650
hasn't changed a whole lot
from their previous designs.

00:44:07.650 --> 00:44:09.530
Again as soon as you
start introducing

00:44:09.530 --> 00:44:11.700
fully opaque background,
sliding over other things.

00:44:11.700 --> 00:44:13.420
If you start doing
a lot of stacking,

00:44:13.420 --> 00:44:15.176
then yes, there's
cases where you're

00:44:15.176 --> 00:44:17.800
going to want to start thinking
about the overdraw a little bit

00:44:17.800 --> 00:44:19.330
more and what you can
to avoid the clipping.

00:44:19.330 --> 00:44:21.288
We're definitely trying
to do as much as we can

00:44:21.288 --> 00:44:23.149
in the framework to
do that automatically.

00:44:23.149 --> 00:44:24.690
AUDIENCE: I guess
from my perspective

00:44:24.690 --> 00:44:28.600
it's more of the design
principles everything

00:44:28.600 --> 00:44:30.240
feels like it's stacked.

00:44:30.240 --> 00:44:33.080
And in order to
accomplish that, you're

00:44:33.080 --> 00:44:34.940
going to have to stack
things some times.

00:44:34.940 --> 00:44:37.170
And is there a good
way to get around that?

00:44:39.760 --> 00:44:41.910
CHET HAASE: Stacking is
more of a transient state.

00:44:41.910 --> 00:44:44.710
I haven't seen a lot of UIs
where the things are full-time

00:44:44.710 --> 00:44:46.130
stacked on top of one another.

00:44:46.130 --> 00:44:46.603
ADAM POWELL: Well,
there are some

00:44:46.603 --> 00:44:48.470
of the things in
the Google Now cards

00:44:48.470 --> 00:44:51.011
that will stack on top of one
another and so on and so forth.

00:44:51.011 --> 00:44:53.400
But even some of those,
what they've started to do

00:44:53.400 --> 00:44:55.450
is you'll notice that
some of the cards

00:44:55.450 --> 00:44:57.370
start merging together
into a single card.

00:44:57.370 --> 00:44:58.600
If it's part of a
collection, it then

00:44:58.600 --> 00:45:00.140
breaks out in some
of the detail views.

00:45:00.140 --> 00:45:02.639
And I think that some of that
was shown in some of the demos

00:45:02.639 --> 00:45:03.320
as well.

00:45:03.320 --> 00:45:03.950
AUDIENCE: Thank you.

00:45:03.950 --> 00:45:05.920
CHET HAASE: And it looks
like we have two seconds left

00:45:05.920 --> 00:45:08.170
for questions, which means
that we're all out of time.

00:45:08.170 --> 00:45:09.050
Thank you very much.

00:45:09.050 --> 00:45:10.925
ADAM POWELL: We'll be
over here if you wanted

00:45:10.925 --> 00:45:12.970
to ask some other
questions afterwards.

