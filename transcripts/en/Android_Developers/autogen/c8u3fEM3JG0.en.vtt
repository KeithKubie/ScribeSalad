WEBVTT
Kind: captions
Language: en

00:00:02.110 --> 00:00:05.256
 When it comes to performance, there are some things you can control, 

00:00:05.256 --> 00:00:08.495
 There are other things you just have to be aware of and circumvent. 

00:00:08.495 --> 00:00:09.863
 My name is Colt McCannless. 

00:00:09.863 --> 00:00:12.741
 CPU redundancy is one of those hard facts 

00:00:12.741 --> 00:00:13.966
 For mobile phone development 

00:00:13.966 --> 00:00:17.464
 Which you can not control, but can have a big impact on your application. 

00:00:17.580 --> 00:00:19.774
 Atri, in order to keep the battery, 

00:00:19.774 --> 00:00:24.120
 Android devices can reduce the amount of power in the CPU. 

00:00:24.121 --> 00:00:27.413
 This means that the processor will consume less power to execute the code, 

00:00:27.452 --> 00:00:30.374
 With the side effect of the CPU slowdown in the process. 

00:00:30.419 --> 00:00:33.199
 Basically, the code will take longer to work. 

00:00:33.310 --> 00:00:35.640
 This is a very normal event. 

00:00:35.640 --> 00:00:39.600
 The Android device constantly tries to reduce the incoming power supply of the CPU 

00:00:39.600 --> 00:00:41.720
 To provide as much energy as possible. 

00:00:41.720 --> 00:00:45.680
 The interactive CPU organizer used by Android 

00:00:45.681 --> 00:00:48.423
 The workload is constantly checked on the CPU to determine 

00:00:48.423 --> 00:00:51.221
 The possibility of reducing the frequency or if it needs to raise its value. 

00:00:51.270 --> 00:00:55.500
 The implications of such things are a little strange to you as a developer. 

00:00:55.500 --> 00:00:57.750
 First, when the frequency value is reduced, 

00:00:57.750 --> 00:01:00.480
 You'll notice that normal operations take longer to complete. 

00:01:00.480 --> 00:01:02.328
 So do not be surprised if suddenly, 

00:01:02.329 --> 00:01:05.360
 The time frame increases have begun to exceed 16 milliseconds. 

00:01:05.360 --> 00:01:10.120
 Second, frequency changes take about 20 milliseconds to occur, 

00:01:10.120 --> 00:01:13.110
 Which means that if you are going out of low frequency mode, 

00:01:13.110 --> 00:01:15.522
 The first submission window may be slower 

00:01:15.554 --> 00:01:18.710
 Given the fact that the CPU has not been able to increase yet. 

00:01:18.710 --> 00:01:21.928
 In general, you have to remember that this works deliberately. 

00:01:21.967 --> 00:01:24.910
 The battery is the most important thing in mobile phone development. 

00:01:24.910 --> 00:01:27.777
 For the Android system, it does a really good job 

00:01:27.778 --> 00:01:31.367
 From balancing processing speed versus battery consumption for you, 

00:01:31.382 --> 00:01:33.204
 So you do not have to worry about it. 

00:01:33.204 --> 00:01:35.206
 In fact, there is a whole range of things 

00:01:35.206 --> 00:01:38.232
 By Android to avoid this problem when the performance is very important, 

00:01:38.232 --> 00:01:41.203
 Such as increasing frequency quickly once the user touches the screen. 

00:01:41.203 --> 00:01:44.830
 But other times, such as if you use a service or respond to an event, 

00:01:44.862 --> 00:01:47.428
 You can see these issues express themselves. 

00:01:47.431 --> 00:01:51.051
 Just keep in mind that if you start to notice a rise in frame rate 

00:01:51.060 --> 00:01:53.910
 Or that orders take too long without a reason, 

00:01:53.910 --> 00:01:57.053
 The use of measuring frequency can be the culprit. 

00:01:57.070 --> 00:02:01.917
 To confirm this, you can run the Systrace feature, enabling the CPU frequency tag. 

00:02:01.975 --> 00:02:06.760
 You will notice a nice band at the top that separates current frequency values, 

00:02:06.760 --> 00:02:10.045
 So you can see the overall effect on your performance. 

00:02:10.281 --> 00:02:13.408
 Performance is built around understanding what hardware devices are doing 

00:02:13.417 --> 00:02:15.490
 And how your code should react accordingly. 

00:02:15.500 --> 00:02:18.090
 In this case, you can not do much. 

00:02:18.090 --> 00:02:21.976
 But in all other cases, there are a lot of things you can work on. 

00:02:21.977 --> 00:02:25.240
 So be sure to check out the rest of Android's performance patterns 

00:02:25.240 --> 00:02:29.713
 And do not forget to join the Google+ community for other great tips and tricks. 

00:02:30.050 --> 00:02:33.939
 So stay calm, type your code, and always remember, performance is important. 

