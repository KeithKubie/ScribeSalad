WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
There's our whole row, and while I'm at it I might as well define a hand.

00:00:04.000 --> 00:00:11.000
Now my next target, the next bird to cross off the list is to define a function row&lt;u&gt;plays,&lt;/u&gt;

00:00:11.000 --> 00:00:16.000
which takes a hand and a row in this format and return a set of legal plays from the row.

00:00:16.000 --> 00:00:21.000
Now, rather than just return legal words, I'm using this notion of a play,

00:00:21.000 --> 00:00:27.000
where a play is a pair of location within the row and the word that we want to play.

00:00:27.000 --> 00:00:32.000
You can imagine it's going to take the same general approach that we've used before,

00:00:32.000 --> 00:00:36.000
start with an empty set, do something to it, and then return the results that we built up.

00:00:36.000 --> 00:00:41.000
What is it that we want to do? We want to consider each possible allowable prefix,

00:00:41.000 --> 00:00:44.000
and to that we want to add all the suffixes, keeping the words.

00:00:44.000 --> 00:00:48.000
Now, prefixes of what? That's the first thing to figure out.

00:00:48.000 --> 00:00:52.000
What I'm going to do is enumerate the row--enumerate actually just the good bits.

00:00:52.000 --> 00:00:59.000
The row from the first position to the last position, and that tells me I don't want the borders.

00:00:59.000 --> 00:01:01.000
I don't want to consider playing on the borders.

00:01:01.000 --> 00:01:05.000
I just want to consider playing on the interior of the row.

00:01:05.000 --> 00:01:07.000
Enumerate that starting from position number 1.

00:01:07.000 --> 00:01:09.000
One would be where the A is.

00:01:09.000 --> 00:01:14.000
Now I have an index--a number 1, 2, 3--and I have the square, which is going to be a,

00:01:14.000 --> 00:01:17.000
and then an anchor and then an anchor and so on.

00:01:17.000 --> 00:01:19.000
Where do I want to consider my rows?

00:01:19.000 --> 00:01:23.000
We're going to anchor them on an anchor so I can ask a square an instance of an anchor.

00:01:23.000 --> 00:01:26.000
If it is an anchor, then there's two possibilities.

00:01:26.000 --> 00:01:29.000
If it's an anchor like this, there's only one allowable prefix.

00:01:29.000 --> 00:01:34.000
The prefix which is the letters that are already there just to the left of the anchor.

00:01:34.000 --> 00:01:39.000
We want to just consider that one prefix and then add all the suffixes.

00:01:39.000 --> 00:01:42.000
If it's an anchor like this one, then there can be many prefixes.

00:01:42.000 --> 00:01:47.000
We want all possible prefixes that fit into these spots here,

00:01:47.000 --> 00:01:51.000
consider each one of those, and for each one of those consider adding on the suffixes.

00:01:51.000 --> 00:01:54.000
What I'm going to do is define a function, legal &lt;u&gt;prefix,&lt;/u&gt;

00:01:54.000 --> 00:02:00.000
which gives me a description of the legal prefix that can occur at position i within a row.

00:02:00.000 --> 00:02:02.000
There are two possibilities.

00:02:02.000 --> 00:02:07.000
I could combine the possibilities into one, but I'm going to have a tuple of two values returned.

00:02:07.000 --> 00:02:12.000
I'm going to have legal&lt;u&gt;prefix return the actual prefix as a string&lt;/u&gt;

00:02:12.000 --> 00:02:17.000
if there is one, like in this case, and return the maximum size otherwise.

00:02:17.000 --> 00:02:23.000
For this anchor here, this would be legal&lt;u&gt;prefix of one, two, three, four, five, six--&lt;/u&gt;

00:02:23.000 --> 00:02:27.000
that's for legal&lt;u&gt;prefix when i = 6.&lt;/u&gt;

00:02:27.000 --> 00:02:30.000
The result would be that there are now characters to the left.

00:02:30.000 --> 00:02:34.000
It'll be the empty string for the first element of the tuples.

00:02:34.000 --> 00:02:38.000
The maximum size of the prefix that I'm going to allow is two characters.

00:02:38.000 --> 00:02:43.000
Now, if I asked here--that's index number one, two, three, four, five, six, seven, eight, nine--

00:02:43.000 --> 00:02:49.000
when i = 9, the result would be that the prefix is BE,

00:02:49.000 --> 00:02:55.000
and the maximum size is the same as the minimum size. It's the exact size of 2.

00:02:55.000 --> 00:03:01.000
I define legal&lt;u&gt;prefix in order to tell me what to do next based on the two types of anchors.&lt;/u&gt;

00:03:01.000 --> 00:03:03.000
Now, I can go back to row plays.

00:03:03.000 --> 00:03:08.000
I can call legal&lt;u&gt;prefix, get my results, and say if there is a prefix,&lt;/u&gt;

00:03:08.000 --> 00:03:11.000
then I want to add to the letters already on the board.

00:03:11.000 --> 00:03:16.000
Otherwise, I have an empty space to the left, and I want to go through all possible prefixes.

00:03:16.000 --> 00:03:19.000
Here's what we do if there is a prefix already there.

00:03:19.000 --> 00:03:22.000
Now we can calculate the start of our position.

00:03:22.000 --> 00:03:27.000
Remember a row play is going to return the starting location of the word.

00:03:27.000 --> 00:03:33.000
We can figure that out. It's the i position of the anchor minus the length of the prefix.

00:03:33.000 --> 00:03:35.000
In fact, let me go and change this comment here.

00:03:35.000 --> 00:03:37.000
I is not very descriptive.

00:03:37.000 --> 00:03:39.000
Let's just call that start.

00:03:39.000 --> 00:03:41.000
Now we know what the starting location is for the word.

00:03:41.000 --> 00:03:43.000
When we find any words we can return that.

00:03:43.000 --> 00:03:47.000
Then we go ahead and add suffixes.

00:03:47.000 --> 00:03:50.000
With the suffixes, some of the letters are going to come out of the hand.

00:03:50.000 --> 00:03:54.000
We're adding suffixes to the prefix that's already there on the board.

00:03:54.000 --> 00:03:57.000
Starting in the start location, going through the row,

00:03:57.000 --> 00:04:00.000
accumulating the results into the result set,

00:04:00.000 --> 00:04:02.000
and then I needed this one more argument.

00:04:02.000 --> 00:04:04.000
I actually made a mistake and left this out the first time, and it didn't work.

00:04:04.000 --> 00:04:06.000
We'll see in a bit what that's there for.

00:04:06.000 --> 00:04:09.000
Now if we have empty space to the left of the anchor,

00:04:09.000 --> 00:04:12.000
now we've got to go through all the possible prefixes,

00:04:12.000 --> 00:04:14.000
but we already wrote that function--find&lt;u&gt;prefixes. That's good.&lt;/u&gt;

00:04:14.000 --> 00:04:17.000
Looks like we're converging. We're not writing that much new stuff.

00:04:17.000 --> 00:04:22.000
Now, out of all the possible prefixes for the hand, we only want to look at the ones

00:04:22.000 --> 00:04:25.000
that are less than or equal to the maximum size.

00:04:25.000 --> 00:04:27.000
If the prefix is too big, it won't fit into the empty spot.

00:04:27.000 --> 00:04:30.000
It will run into another word, and we don't want to allow that.

00:04:30.000 --> 00:04:32.000
We can calculate the start position again.

00:04:32.000 --> 00:04:36.000
Then we do the same thing. We add suffixes. What do we add them to?

00:04:36.000 --> 00:04:39.000
We'll the prefix that we just found from the hand.

00:04:39.000 --> 00:04:43.000
Since the prefix came from the hand, the remaining letters left in the hand

00:04:43.000 --> 00:04:45.000
we have to subtract out those prefix letters.

00:04:45.000 --> 00:04:49.000
Here we didn't have to subtract them out, because they prefix letters were already on the board.

00:04:49.000 --> 00:04:53.000
We're adding to the prefix from the start, from the row, results are accumulated,

00:04:53.000 --> 00:04:55.000
and we have this anchored equals false again.

00:04:55.000 --> 00:05:00.000
We're almost there. Just two things left to do--add&lt;u&gt;suffixes and legal&lt;u&gt;prefix.&lt;/u&gt;&lt;/u&gt;

00:05:00.000 --> 00:05:04.000
Add&lt;u&gt;suffixes we had before, but it's going to be a little bit more complicated now,&lt;/u&gt;

00:05:04.000 --> 00:05:06.000
because we're dealing with the anchors.

00:05:06.000 --> 99:59:59.000
Legal&lt;u&gt;prefix is just a matter of looking to the left and see how much space is there.&lt;/u&gt;

