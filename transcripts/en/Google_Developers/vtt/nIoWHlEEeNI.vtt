WEBVTT
Kind: captions
Language: en

00:00:03.290 --> 00:00:03.780
SEAN ASKAY: Hi there.

00:00:03.780 --> 00:00:04.830
Thanks for coming out.

00:00:04.830 --> 00:00:07.320
My name is Sean Askay, and I'm
a developer advocate here at

00:00:07.320 --> 00:00:10.280
Google, as well as the
tech-lead for KML.

00:00:10.280 --> 00:00:12.240
I'm here with Mano Marks
today, who's

00:00:12.240 --> 00:00:13.820
also a developer advocate.

00:00:13.820 --> 00:00:15.740
And we're going to be
talking about KML--

00:00:15.740 --> 00:00:18.460
high-performance KML, and
some other cool things.

00:00:18.460 --> 00:00:22.260
So on the screen, this is an
embedded Google Earth plugin,

00:00:22.260 --> 00:00:26.850
and this is actually a KML Tour
that I'm using to animate

00:00:26.850 --> 00:00:27.420
some polygons.

00:00:27.420 --> 00:00:29.120
We'll talk more about
that in a second.

00:00:32.460 --> 00:00:34.280
So a quick overview of what
we're going to talking about.

00:00:34.280 --> 00:00:37.770
I'll give a very brief intro
to what KML is, then I'll

00:00:37.770 --> 00:00:41.220
start talking about data
visualization using KML.

00:00:41.220 --> 00:00:43.730
And then Mano will take over
and talk about developer

00:00:43.730 --> 00:00:46.210
environments for
KML authoring.

00:00:46.210 --> 00:00:49.670
And then KML rendering and maps
API and using KML with

00:00:49.670 --> 00:00:51.900
Fusion Tables.

00:00:51.900 --> 00:00:53.970
So a really brief
intro to KML.

00:00:53.970 --> 00:00:56.980
Keyhole Markup Language was
developed at Keyhole before

00:00:56.980 --> 00:00:58.585
the company was acquired
by Google.

00:00:58.585 --> 00:01:02.730
It's basically a data language
that represents spacial data

00:01:02.730 --> 00:01:04.019
and styling.

00:01:04.019 --> 00:01:08.900
Kind of loosely like HTML
and CSS is to the web.

00:01:08.900 --> 00:01:12.030
KMLs can be static files that
you can serve off of your

00:01:12.030 --> 00:01:14.065
server or run locally
on your machine.

00:01:14.065 --> 00:01:17.180
It can also be generated
dynamically via web services

00:01:17.180 --> 00:01:20.640
and served to Google
Earth and Maps.

00:01:20.640 --> 00:01:25.190
Google gave KML to the Open
Geospacial Consortium in 2008.

00:01:25.190 --> 00:01:28.520
It's now an open standard used
by Google's Geo Tools and a

00:01:28.520 --> 00:01:31.180
bunch of other third-party
tools as well.

00:01:31.180 --> 00:01:33.860
And at last count, there's well
over a billion KML files

00:01:33.860 --> 00:01:35.490
out there on the internet.

00:01:35.490 --> 00:01:38.110
They're not all necessarily
interesting.

00:01:38.110 --> 00:01:41.070
Unfortunately, most of the ones
out there look like this.

00:01:41.070 --> 00:01:42.860
Basically, this is my house.

00:01:42.860 --> 00:01:47.290
So here's the KML for a very
simple placemark, rocket ship,

00:01:47.290 --> 00:01:49.110
description "goodbye world"
and some coordinates.

00:01:49.110 --> 00:01:52.250
And this is what it looks
like in Google Earth.

00:01:52.250 --> 00:01:54.860
I want to talk about a lot more
exciting things than just

00:01:54.860 --> 00:01:59.310
point placemarks, specifically
data visualization.

00:01:59.310 --> 00:02:02.020
I'm going to speak to
thematic mapping--

00:02:02.020 --> 00:02:06.090
how to take data and visualize
it on the globe.

00:02:06.090 --> 00:02:08.970
And then also talk about things
like GPS data and

00:02:08.970 --> 00:02:12.510
tracking objects through
time and space.

00:02:12.510 --> 00:02:15.100
So in a little more detail,
I'll be talking about 3D

00:02:15.100 --> 00:02:19.350
extruded polygons, using a new
KML tag called altitude

00:02:19.350 --> 00:02:22.160
offset, which makes it a lot
easier to create these

00:02:22.160 --> 00:02:24.410
three-dimensional polygons.

00:02:24.410 --> 00:02:27.780
Then we'll talk about animating
those polygons with

00:02:27.780 --> 00:02:29.920
Google Earth Tours.

00:02:29.920 --> 00:02:33.690
And then I'll switch to the
objects in motion GPS stuff,

00:02:33.690 --> 00:02:39.520
and talk a little bit about gx
tracks and then finally talk

00:02:39.520 --> 00:02:44.140
about bringing in a real-time
data feed to update GPS tracks

00:02:44.140 --> 00:02:46.480
on a client.

00:02:46.480 --> 00:02:49.840
The basic things here are
interesting new ways of

00:02:49.840 --> 00:02:52.850
visualizing data, and then how
to keep it updated and fresh,

00:02:52.850 --> 00:02:55.390
and then how to animate it.

00:02:55.390 --> 00:02:58.030
So thematic mapping is basically
taking information

00:02:58.030 --> 00:03:01.770
with a geographic context, like
Census population data or

00:03:01.770 --> 00:03:05.240
demographics, and then
visualizing it on a map.

00:03:05.240 --> 00:03:07.310
So here we have two examples.

00:03:07.310 --> 00:03:12.680
One is showing some 3D spheres
using 3D sketchup models that

00:03:12.680 --> 00:03:15.880
are scaled in proportion to some
data value, and the other

00:03:15.880 --> 00:03:19.250
one here are these 3D extruded
polygons, which I'll be

00:03:19.250 --> 00:03:22.240
talking about first.

00:03:22.240 --> 00:03:25.450
So basically before we
introduced the gx altitude

00:03:25.450 --> 00:03:28.980
offset tag, you had to specify
an altitude for every single

00:03:28.980 --> 00:03:32.090
for vertex in the polygon, which
is kind of redundant.

00:03:32.090 --> 00:03:35.950
It wastes a lot of space and
makes it very difficult to do

00:03:35.950 --> 00:03:38.360
animations and updates
on those features.

00:03:38.360 --> 00:03:42.050
Now with the altitude offset
tag, altitude is globally set

00:03:42.050 --> 00:03:44.920
for the entire feature.

00:03:44.920 --> 00:03:47.680
So here's a little code to show
you what a placemark with

00:03:47.680 --> 00:03:49.140
a polygon looks like.

00:03:49.140 --> 00:03:52.230
This is way we used to do it,
where you had the altitude

00:03:52.230 --> 00:03:55.220
values after the longitude
and latitude for

00:03:55.220 --> 00:03:56.470
every single vertex.

00:03:58.820 --> 00:04:02.200
Now we basically can specify,
like I said, altitude offset

00:04:02.200 --> 00:04:05.390
at a global level, and that
cascades down to all of the

00:04:05.390 --> 00:04:07.990
placemarks underneath.

00:04:07.990 --> 00:04:10.775
So I'm going to give you a
little demo of what you can do

00:04:10.775 --> 00:04:13.050
with these types
of animations.

00:04:13.050 --> 00:04:16.360
And the question here is what
can you do with Google Earth?

00:04:16.360 --> 00:04:19.510
I basically spent the weekend
digging through Census

00:04:19.510 --> 00:04:24.640
records, American Community
Survey records, state and

00:04:24.640 --> 00:04:28.180
county polygon maps, and then
used Fusion Tables, Google

00:04:28.180 --> 00:04:32.010
Refine, Google Charts
API, Python, using a

00:04:32.010 --> 00:04:33.630
library called pyKML.

00:04:33.630 --> 00:04:35.850
And a weekend I would rather
spend outside to

00:04:35.850 --> 00:04:37.240
do some cool stuff.

00:04:37.240 --> 00:04:39.840
So we're going to essentially
show you some live demos that

00:04:39.840 --> 00:04:43.290
look a little bit like this.

00:04:43.290 --> 00:04:44.430
So here's Google Earth.

00:04:44.430 --> 00:04:48.870
I'm going to load the
KML that I made.

00:04:48.870 --> 00:04:49.755
It's enormous.

00:04:49.755 --> 00:04:52.075
It's about 40 megabytes
uncompressed, because there's

00:04:52.075 --> 00:04:54.190
so much data.

00:04:54.190 --> 00:04:55.460
This is pretty simple.

00:04:55.460 --> 00:04:56.420
Mouse over.

00:04:56.420 --> 00:04:59.560
You can see polygons
for each state.

00:04:59.560 --> 00:05:04.290
As you zoom in, we fade to
county borders, so I can mouse

00:05:04.290 --> 00:05:06.080
over and get each of
the county names.

00:05:06.080 --> 00:05:08.870
Zoom in further and then those
will fade out and I'm left

00:05:08.870 --> 00:05:11.730
with these white lines
undermarking the

00:05:11.730 --> 00:05:15.670
edges of the counties.

00:05:15.670 --> 00:05:18.860
So this isn't all that
interesting by itself, but I

00:05:18.860 --> 00:05:22.890
can use a Google Earth Tour to
do some animations with it.

00:05:22.890 --> 00:05:25.110
A Google Earth Tour is basically
a set of camera

00:05:25.110 --> 00:05:29.030
flight pads and animations
that alter the content.

00:05:29.030 --> 00:05:30.860
So I'm going to start
off one of these.

00:05:30.860 --> 00:05:35.130
The first data set we're going
to look at are the percentage

00:05:35.130 --> 00:05:38.880
of kids in each state that are
lacking health care, health

00:05:38.880 --> 00:05:42.220
insurance, from 1987 to 2009.

00:05:42.220 --> 00:05:44.330
And as you can see, these
are all moving around.

00:05:44.330 --> 00:05:46.480
I can pause the tour.

00:05:46.480 --> 00:05:49.260
When I mouse over it, I now have
the name of the state,

00:05:49.260 --> 00:05:51.760
and it's a little hard to read,
but the percentage of

00:05:51.760 --> 00:05:53.890
kids in that state for
that year that

00:05:53.890 --> 00:05:55.350
don't have health insurance.

00:05:55.350 --> 00:05:58.010
I can click on it, and then
using the Charts API, I'm

00:05:58.010 --> 00:05:59.410
rendering this out over time.

00:05:59.410 --> 00:06:04.160
So here we're looking at 2003
and the value is 19.4.

00:06:04.160 --> 00:06:09.090
I can hit play and we'll
continue with the tour.

00:06:09.090 --> 00:06:12.310
I can pause it, I can play with
the time slider, drag it

00:06:12.310 --> 00:06:18.220
back and forth to any particular
date and then zoom

00:06:18.220 --> 00:06:19.760
around and check things out.

00:06:19.760 --> 00:06:22.900
And I'll note that Massachusetts
is the best

00:06:22.900 --> 00:06:27.540
state in the nation for health
care for kids, so go

00:06:27.540 --> 00:06:29.300
Massachusetts.

00:06:29.300 --> 00:06:31.080
It'd be interesting to do a
mash-up with the red and blue

00:06:31.080 --> 00:06:32.410
states on this as well,
I kind of wonder

00:06:32.410 --> 00:06:33.890
if you'd see anything.

00:06:33.890 --> 00:06:36.170
So that's this tour.

00:06:36.170 --> 00:06:37.550
Let's take a look
at another one.

00:06:37.550 --> 00:06:41.340
We're going to look at
percentage of houses that are

00:06:41.340 --> 00:06:44.110
lacking complete indoor
plumbing.

00:06:44.110 --> 00:06:47.060
Going back to the 1940s, a lot
of people in the states didn't

00:06:47.060 --> 00:06:48.150
have indoor plumbing.

00:06:48.150 --> 00:06:51.570
Here, Texas has 62%
of the households

00:06:51.570 --> 00:06:52.970
without household plumbing.

00:06:52.970 --> 00:06:54.380
I hit play.

00:06:54.380 --> 00:06:57.010
And then each year, as you might
imagine, that drops.

00:06:57.010 --> 00:06:58.940
Alaska popped up in the
background because we didn't

00:06:58.940 --> 00:07:02.020
have data for Alaska in 1940.

00:07:02.020 --> 00:07:04.300
And then we finish in 1990,
where almost the entire

00:07:04.300 --> 00:07:09.380
country now has indoor
plumbing.

00:07:09.380 --> 00:07:11.290
And then there's the graph.

00:07:11.290 --> 00:07:14.880
One last data set I'll show is
looking at population data on

00:07:14.880 --> 00:07:16.220
a county level.

00:07:16.220 --> 00:07:19.280
So I'm going to zoom in to
California and I'm going to

00:07:19.280 --> 00:07:20.640
hit play on that.

00:07:20.640 --> 00:07:21.780
This is the biggest tour.

00:07:21.780 --> 00:07:24.560
There's a lot of polygons, so
my little laptop has trouble

00:07:24.560 --> 00:07:25.960
with this sometimes.

00:07:25.960 --> 00:07:29.990
I also decided to take out the
smooth transitions with the

00:07:29.990 --> 00:07:32.090
extruded polygons and just
snap them to different

00:07:32.090 --> 00:07:35.450
altitudes, which helps improve
in performance.

00:07:35.450 --> 00:07:39.480
So again, surprise, surprise,
Los Angeles is growing like

00:07:39.480 --> 00:07:41.930
crazy, and you can also
see the Bay Area

00:07:41.930 --> 00:07:43.450
picking up here as well.

00:07:43.450 --> 00:07:46.220
I can zoom out, I can
pick one, check out

00:07:46.220 --> 00:07:48.270
the data for it.

00:07:48.270 --> 00:07:49.430
There's LA.

00:07:49.430 --> 00:07:52.330
Or fly anywhere else in
the country and check

00:07:52.330 --> 00:07:55.470
out the data there.

00:07:55.470 --> 00:07:55.935
Whoops.

00:07:55.935 --> 00:07:58.100
Let's go to Chicago.

00:07:58.100 --> 00:08:00.020
So one of the interesting things
I noticed about this

00:08:00.020 --> 00:08:03.980
data set with Chicago
was maybe suburban

00:08:03.980 --> 00:08:05.260
sprawl popping up.

00:08:05.260 --> 00:08:08.270
So I'm going to restart
this animation.

00:08:08.270 --> 00:08:10.820
This is Cook County, I believe,
which is where

00:08:10.820 --> 00:08:12.560
Chicago is.

00:08:12.560 --> 00:08:14.730
And this will come online.

00:08:14.730 --> 00:08:18.240
So as you imagine, Chicago, a
big city, lots of people.

00:08:18.240 --> 00:08:21.230
It keeps going up and
up and up and up.

00:08:21.230 --> 00:08:24.200
But I think in the '60s and
'70s it actually starts to

00:08:24.200 --> 00:08:25.190
drop a little bit.

00:08:25.190 --> 00:08:28.710
And you'll notice that as it's
dropping, these other counties

00:08:28.710 --> 00:08:30.410
around it are starting
to pick up.

00:08:30.410 --> 00:08:32.840
So I'm not an expert in the
region, but this might be an

00:08:32.840 --> 00:08:35.590
example of suburban sprawl.

00:08:35.590 --> 00:08:37.720
So maybe you can see with a data
set like this when you're

00:08:37.720 --> 00:08:41.390
viewing it in three-dimensional
space.

00:08:41.390 --> 00:08:45.870
So let's turn this off and head
back to talk about how

00:08:45.870 --> 00:08:47.460
this is done.

00:08:47.460 --> 00:08:51.200
So we basically want to animate
a polygon in the

00:08:51.200 --> 00:08:53.910
context of a tour using the
animate update tag.

00:08:53.910 --> 00:08:55.830
So here's a very simple
placemark.

00:08:55.830 --> 00:08:57.920
We specify a polygon.

00:08:57.920 --> 00:09:00.190
There's that altitude offset
and a bunch of coordinates

00:09:00.190 --> 00:09:03.040
which I'm not showing you.

00:09:03.040 --> 00:09:06.700
And elsewhere in the same file
I have a KML Tour, which

00:09:06.700 --> 00:09:09.880
defines these animations and
these camera motions.

00:09:09.880 --> 00:09:12.260
And here you can see, over the
course of three seconds, we're

00:09:12.260 --> 00:09:14.730
going to change that
altitude--

00:09:14.730 --> 00:09:15.630
well, to 1,000.

00:09:15.630 --> 00:09:16.860
That should be 100.

00:09:16.860 --> 00:09:20.220
So what you'll see in
the next slide is--

00:09:20.220 --> 00:09:22.530
that was actually supposed
to be 10,000--

00:09:22.530 --> 00:09:26.670
that the polygon now
gets raised higher.

00:09:26.670 --> 00:09:29.800
We add an extra zero here,
and off we go.

00:09:29.800 --> 00:09:33.600
So this is basically how you
would do an animated update to

00:09:33.600 --> 00:09:37.080
extrude that polygon to
a different altitude.

00:09:37.080 --> 00:09:39.490
You can do more than just
extruding polygons and making

00:09:39.490 --> 00:09:40.000
them taller.

00:09:40.000 --> 00:09:43.500
You can actually interplay
between any values in KML.

00:09:43.500 --> 00:09:44.750
So let's check out
another demo.

00:09:49.160 --> 00:09:50.900
So this is just kind
of a visual--

00:09:50.900 --> 00:09:52.720
no particular data
attached to it.

00:09:52.720 --> 00:09:53.970
But it's kind of cool-looking.

00:09:56.780 --> 00:09:59.510
We're going to fly in, and
here we have these circle

00:09:59.510 --> 00:10:02.170
polygons that are expanding
in time.

00:10:02.170 --> 00:10:05.530
So the original polygon is a
small circle, and then I'm

00:10:05.530 --> 00:10:08.080
saying over three seconds,
changed to these coordinates,

00:10:08.080 --> 00:10:12.770
which are a bigger set of
coordinates, a bigger ring.

00:10:12.770 --> 00:10:13.810
So that's going to basically
make these

00:10:13.810 --> 00:10:15.960
animate and expand out.

00:10:15.960 --> 00:10:18.030
And again, this time, you notice
the camera was moving

00:10:18.030 --> 00:10:20.420
with the tour because I
have recorded a flight

00:10:20.420 --> 00:10:21.670
path with it as well.

00:10:24.090 --> 00:10:25.980
All right?

00:10:25.980 --> 00:10:28.250
Another way of doing somatic
maps-- and I'm going to rush

00:10:28.250 --> 00:10:29.330
through this a little
bit so we can

00:10:29.330 --> 00:10:30.810
get to the GPS session--

00:10:30.810 --> 00:10:33.560
is to use 3D sketchup
models instead.

00:10:33.560 --> 00:10:34.370
So here's sketchup.

00:10:34.370 --> 00:10:36.920
We've got a model
of a cell phone.

00:10:36.920 --> 00:10:39.960
This screenshot comes from
thematicmapping.org, an

00:10:39.960 --> 00:10:40.650
awesome website.

00:10:40.650 --> 00:10:43.760
They have an API for creating
thematic maps, although the

00:10:43.760 --> 00:10:46.130
animations aren't done
quite the same way

00:10:46.130 --> 00:10:48.160
as I'm showing here.

00:10:48.160 --> 00:10:49.660
Basically you have
a placemark.

00:10:49.660 --> 00:10:55.340
You specify the location, the
scale, and the model file.

00:10:55.340 --> 00:10:56.880
Just like with the
previous example,

00:10:56.880 --> 00:10:59.200
here's my original model.

00:10:59.200 --> 00:11:02.620
I can bring in that KML Tour,
and I can say, hey, scale, I

00:11:02.620 --> 00:11:03.740
want to extrude you.

00:11:03.740 --> 00:11:06.860
I want to make you bigger
in the y-dimension

00:11:06.860 --> 00:11:08.580
by a factor of 10.

00:11:08.580 --> 00:11:12.430
So our new cell phone
gets a lot bigger.

00:11:12.430 --> 00:11:17.100
The value here changes to
1,000, and off we go.

00:11:17.100 --> 00:11:20.000
So the next thing I'm going to
talk about is GPS-type data

00:11:20.000 --> 00:11:23.560
and what you can do with
that in Google Earth.

00:11:23.560 --> 00:11:25.390
So let's do a couple quick demos
to show you what that

00:11:25.390 --> 00:11:26.250
looks like.

00:11:26.250 --> 00:11:28.620
I'm going to load some data.

00:11:28.620 --> 00:11:31.700
So the entire Geo Team at Google
took an off-site field

00:11:31.700 --> 00:11:33.330
trip not too long ago.

00:11:33.330 --> 00:11:35.580
We all went to Lake Tahoe
and we all went skiing.

00:11:35.580 --> 00:11:38.650
And we had a bunch of people
run around with GPS units,

00:11:38.650 --> 00:11:40.300
which was pretty cool.

00:11:40.300 --> 00:11:43.860
Which means that I can drag the
time slider, and you can

00:11:43.860 --> 00:11:48.880
see all kinds of Googlers
running around the slopes,

00:11:48.880 --> 00:11:51.620
skiing, snowboarding,
et cetera.

00:11:51.620 --> 00:11:54.380
In addition to manipulating the
time slider manually, I

00:11:54.380 --> 00:11:56.430
have a tour that will
do it for me.

00:11:56.430 --> 00:12:01.270
And it'll do a camera path and
it'll do a nice advancement of

00:12:01.270 --> 00:12:04.780
the times slider so we can
get a visualization here.

00:12:04.780 --> 00:12:07.370
So this is me on
a dogsled ride.

00:12:07.370 --> 00:12:11.940
So I'll fast-forward through a
bit of this and then you can

00:12:11.940 --> 00:12:14.830
watch everybody going
up the ski slopes

00:12:14.830 --> 00:12:18.260
and then skiing down.

00:12:18.260 --> 00:12:25.530
One other example of this is
taking a 3D model and actually

00:12:25.530 --> 00:12:29.410
showing that in the context
of a GPS track.

00:12:29.410 --> 00:12:32.380
So a couple of years back, I
made a tour for the Apollo 11

00:12:32.380 --> 00:12:34.230
landing on the moon.

00:12:34.230 --> 00:12:36.670
And now is when I regret--

00:12:36.670 --> 00:12:37.000
OK.

00:12:37.000 --> 00:12:37.720
The internet is fine.

00:12:37.720 --> 00:12:40.570
I was worried there
for a second.

00:12:40.570 --> 00:12:43.890
I created a tour that basically
shows the path of

00:12:43.890 --> 00:12:48.210
the Apollo 11 lander coming
in to land on the moon.

00:12:48.210 --> 00:12:51.877
Let's turn off some other layers
here, keep the imagery,

00:12:51.877 --> 00:12:53.070
keep the terrain.

00:12:53.070 --> 00:12:58.150
So back then, we didn't have
this GX GPS track feature.

00:12:58.150 --> 00:13:00.790
So I basically had to create
animated updates to move that

00:13:00.790 --> 00:13:03.680
model segment-by-segment
along the path.

00:13:03.680 --> 00:13:06.100
Now, fortunately, I don't
have to do that.

00:13:06.100 --> 00:13:08.480
I can actually just drag the
time slider if we know when

00:13:08.480 --> 00:13:10.280
and where that model was.

00:13:10.280 --> 00:13:13.310
We'll zoom out a little bit,
like that, and you

00:13:13.310 --> 00:13:14.030
can bring it in.

00:13:14.030 --> 00:13:17.950
So I can make a tour animating
the lander a lot easier now

00:13:17.950 --> 00:13:20.766
just using this GX
track feature.

00:13:20.766 --> 00:13:25.020
So let's talk about
how that's done.

00:13:25.020 --> 00:13:27.440
The way this used to be done is
people would basically take

00:13:27.440 --> 00:13:29.670
a bunch of placemarks or a bunch
of lines, they put a

00:13:29.670 --> 00:13:32.450
time stamp or a time span
feature on it, and you would

00:13:32.450 --> 00:13:33.270
play with the time slider.

00:13:33.270 --> 00:13:36.180
And you're essentially
duplicating this same object

00:13:36.180 --> 00:13:39.620
over and over and over and
over again to animate it.

00:13:39.620 --> 00:13:42.070
Now we have a single placemark,
a single feature

00:13:42.070 --> 00:13:43.980
through time and space.

00:13:43.980 --> 00:13:46.530
It's the GX tag we'll
show in a second.

00:13:46.530 --> 00:13:50.070
This currently only works
in Google Earth 5.2.

00:13:50.070 --> 00:13:51.910
So you're not going to be able
to do this in Google Maps--

00:13:51.910 --> 00:13:56.320
obviously, you can't do 3D stuff
or tours in Maps either.

00:13:56.320 --> 00:13:59.765
As I said, you can use 2D models
or 3D models, and as

00:13:59.765 --> 00:14:02.700
I'll talk about in a second,
you can add extended data,

00:14:02.700 --> 00:14:06.070
additional attribute data,
correlated to the time and the

00:14:06.070 --> 00:14:07.730
path of the object.

00:14:07.730 --> 00:14:09.670
Like if you're riding a bike,
heartbeat, or if you're

00:14:09.670 --> 00:14:12.390
driving car, RPMs.

00:14:12.390 --> 00:14:15.525
So basically the way this looks
in the KML-- it's a set

00:14:15.525 --> 00:14:16.690
of parallel arrays.

00:14:16.690 --> 00:14:19.080
You've got a bunch of when
statements that define time

00:14:19.080 --> 00:14:21.650
stamps for each segment
along the path.

00:14:21.650 --> 00:14:23.620
You've got coordinates
that say where you

00:14:23.620 --> 00:14:24.940
were at that time.

00:14:24.940 --> 00:14:27.590
And if you're using a 3D
model, you specify the

00:14:27.590 --> 00:14:29.710
different rotations
of that model, the

00:14:29.710 --> 00:14:32.420
orientation of that model.

00:14:32.420 --> 00:14:34.540
This can be a little hard to
author because it's a parallel

00:14:34.540 --> 00:14:36.590
array, and if you're writing
code, it'd be nice to kind of

00:14:36.590 --> 00:14:38.580
iterate through each different
time step.

00:14:38.580 --> 00:14:41.340
So as long as you don't tell
the Schema Monster, you can

00:14:41.340 --> 00:14:44.490
basically interleave these.

00:14:44.490 --> 00:14:47.310
As one schema validates, but
Google Earth will read it just

00:14:47.310 --> 00:14:49.680
fine, and if you save it back
out, it will put everything in

00:14:49.680 --> 00:14:52.340
its proper order.

00:14:52.340 --> 00:14:54.290
So let's take a look
at a little bit of

00:14:54.290 --> 00:14:56.720
demo, another demo.

00:14:56.720 --> 00:15:00.040
Looking at a bike track of a
coworker who took heartbeat

00:15:00.040 --> 00:15:02.310
data along the way.

00:15:02.310 --> 00:15:04.020
So we're going to switch
back to Google Earth.

00:15:10.320 --> 00:15:13.090
Go, internet.

00:15:13.090 --> 00:15:13.690
All right.

00:15:13.690 --> 00:15:16.526
And then I'm going to
load the bike track.

00:15:16.526 --> 00:15:18.970
We're going to fly down here.

00:15:18.970 --> 00:15:20.590
So Peter's in the
room, actually.

00:15:20.590 --> 00:15:21.910
This is his track.

00:15:21.910 --> 00:15:25.460
And you'll see that I can click
anywhere along the track

00:15:25.460 --> 00:15:28.440
and get his heart rate at
that particular point.

00:15:28.440 --> 00:15:32.000
I can also right click
on the track and

00:15:32.000 --> 00:15:33.840
show elevation profile.

00:15:33.840 --> 00:15:37.410
This will basically show a
graph of his speed, the

00:15:37.410 --> 00:15:41.980
altitude at the time, and his
heart rate, in this case, as

00:15:41.980 --> 00:15:42.950
an additional data set.

00:15:42.950 --> 00:15:47.960
So here is his heart rate during
the course of the trip.

00:15:47.960 --> 00:15:51.400
So let's look at how
you do that in KML.

00:15:51.400 --> 00:15:52.940
So again, this part
is the same.

00:15:52.940 --> 00:15:55.860
A bunch of when and cord
statements defining when and

00:15:55.860 --> 00:15:58.680
where the person was,
or the object was.

00:15:58.680 --> 00:16:02.580
Then you're using the extended
data tag and you're specifying

00:16:02.580 --> 00:16:06.150
a simple array called heart
rate, and another parallel

00:16:06.150 --> 00:16:08.840
array that goes and correlates
with each of these.

00:16:08.840 --> 00:16:11.860
So this is what allows you to
basically take any variable

00:16:11.860 --> 00:16:17.250
you want and sync it up
with the GPS track.

00:16:17.250 --> 00:16:19.280
So that's kind of cool,
but I want to show

00:16:19.280 --> 00:16:20.210
something even cooler.

00:16:20.210 --> 00:16:23.720
Which is what if you wanted to
stream in real-time data?

00:16:23.720 --> 00:16:27.150
Have a data feed come in and
basically push the locations

00:16:27.150 --> 00:16:29.300
of an object to the client.

00:16:29.300 --> 00:16:32.790
So let's take a look at that.

00:16:32.790 --> 00:16:38.730
So I was in Kenya some time
back and I had the luck of

00:16:38.730 --> 00:16:42.560
going in a Cessna with an old,
salty pilot, who took us on

00:16:42.560 --> 00:16:46.590
this kind of crazy tour
around Mount Kenya,

00:16:46.590 --> 00:16:48.460
which is north of Nairobi.

00:16:48.460 --> 00:16:53.010
So what's happening here is I'm
fetching each segment of

00:16:53.010 --> 00:16:56.900
this track a piece at a time.

00:16:56.900 --> 00:16:59.960
So the initial file only had the
initial little piece that

00:16:59.960 --> 00:17:03.390
you saw, and each additional
network fetch that I make, I

00:17:03.390 --> 00:17:06.760
am grabbing additional data,
injecting it into the track.

00:17:06.760 --> 00:17:09.530
So doing something like this,
you could basically pull in

00:17:09.530 --> 00:17:12.829
real-time feeds of Google
latitude data.

00:17:12.829 --> 00:17:15.359
If you have any other devices
that are streaming a location,

00:17:15.359 --> 00:17:18.140
you could visualize it like
this, a segment at a time, and

00:17:18.140 --> 00:17:20.789
push out the real-time
locations, and the track in

00:17:20.789 --> 00:17:23.880
between now and the
last update.

00:17:23.880 --> 00:17:26.924
So we're going to land here in
a second, and then I'll show

00:17:26.924 --> 00:17:28.174
you guys how this is
done in the KML.

00:17:32.630 --> 00:17:34.680
So conceptually what's happening
here is we have two

00:17:34.680 --> 00:17:35.430
network links.

00:17:35.430 --> 00:17:39.140
A network link is a KML feature
that basically fetches

00:17:39.140 --> 00:17:41.300
from a URL to KML.

00:17:41.300 --> 00:17:44.450
So the first network link
fetches an initial file that

00:17:44.450 --> 00:17:47.820
just contains maybe the first
little segment, maybe up to

00:17:47.820 --> 00:17:49.810
the current location
of the object.

00:17:49.810 --> 00:17:52.590
Then there's a second network
link that hits the server and

00:17:52.590 --> 00:17:54.960
says, well, give me any updates
that have happened

00:17:54.960 --> 00:17:56.670
since I last checked
in with you.

00:17:56.670 --> 00:17:58.340
So here you've got Google
Earth, here's

00:17:58.340 --> 00:17:59.700
your initial request--

00:17:59.700 --> 00:18:01.960
this can either be static files,
which is what I showed

00:18:01.960 --> 00:18:04.730
you a second ago, or it could
be a live web service.

00:18:04.730 --> 00:18:07.170
And then the update's going to
come through that second

00:18:07.170 --> 00:18:10.860
connection to your
web service.

00:18:10.860 --> 00:18:15.320
So here is kind of a zoom of
that left panel that I was

00:18:15.320 --> 00:18:15.950
showing you a second ago.

00:18:15.950 --> 00:18:18.160
Here's the network link
to the original file.

00:18:18.160 --> 00:18:21.800
That fetched the initial track
and then I have underneath it

00:18:21.800 --> 00:18:25.970
a second network link that
fetches the updates.

00:18:25.970 --> 00:18:28.110
So this is how it would look.

00:18:28.110 --> 00:18:29.190
This is how you'd make it.

00:18:29.190 --> 00:18:30.640
Here's your placemark.

00:18:30.640 --> 00:18:33.440
And instead of using a regular
track, I'm going to use a

00:18:33.440 --> 00:18:34.510
multitrack.

00:18:34.510 --> 00:18:37.050
Since GPS data tends
to be segmented--

00:18:37.050 --> 00:18:38.920
you turn your GPS on or off--

00:18:38.920 --> 00:18:41.030
and you want to maybe visualize
your entire trip,

00:18:41.030 --> 00:18:44.070
you can actually combine
multiple tracks into a single

00:18:44.070 --> 00:18:45.500
placemark feature.

00:18:45.500 --> 00:18:48.460
So I've got a single multitrack
here, with the

00:18:48.460 --> 00:18:52.090
first segment of
data, Sean T1.

00:18:52.090 --> 00:18:56.380
And I should mention that we
grabbed that from maybe

00:18:56.380 --> 00:19:00.860
GPS.py, which is our initial
file fetcher,

00:19:00.860 --> 00:19:02.370
first network link.

00:19:02.370 --> 00:19:07.800
Then I hit web slash feed.py,
which gives the updates.

00:19:07.800 --> 00:19:09.180
And that's what this
looks like.

00:19:09.180 --> 00:19:11.300
This is using what's called
a network link control.

00:19:11.300 --> 00:19:13.050
It's another feature of KML.

00:19:13.050 --> 00:19:16.510
It basically says, hey,
update this item.

00:19:16.510 --> 00:19:18.160
It's a little similar to
the animated update

00:19:18.160 --> 00:19:19.140
you guys saw before.

00:19:19.140 --> 00:19:22.360
This is actually a precursor
to Tours.

00:19:22.360 --> 00:19:25.310
This was just basically created
to basically stream

00:19:25.310 --> 00:19:27.170
content to a client and
then change it on

00:19:27.170 --> 00:19:28.410
the fly like this.

00:19:28.410 --> 00:19:31.080
The other thing that we do
here is we send with this

00:19:31.080 --> 00:19:35.130
second file a cookie, which is
appended onto the end of the

00:19:35.130 --> 00:19:37.610
URL, which says, hey, this is
the last time I got data.

00:19:37.610 --> 00:19:39.690
I've been giving you data
up to this point.

00:19:39.690 --> 00:19:41.810
And you'll see how that's
used in a second.

00:19:41.810 --> 00:19:44.150
So what's going to happen is
this track is going to get

00:19:44.150 --> 00:19:49.450
bumped up over here, so now we
have track number two, we can

00:19:49.450 --> 00:19:52.550
see our track was updated.

00:19:52.550 --> 00:20:00.760
That last parameter was appended
to the feed URL such

00:20:00.760 --> 00:20:04.040
that the next time you fetch,
your server can say, hey, OK,

00:20:04.040 --> 00:20:07.190
I know that he had everything
up through this date, so now

00:20:07.190 --> 00:20:08.910
I'm going to update him with
everything through this date

00:20:08.910 --> 00:20:11.290
and give him a new track
that contains all

00:20:11.290 --> 00:20:14.070
that additional data.

00:20:14.070 --> 00:20:16.290
So anyway, in summary, here's
what we talked about.

00:20:16.290 --> 00:20:18.500
A little bit about thematic
mapping and using these 3D

00:20:18.500 --> 00:20:21.940
extruded polygons with the
altitude offset tag, which

00:20:21.940 --> 00:20:25.470
makes it a lot easier to author
the content, and also

00:20:25.470 --> 00:20:28.170
allows us to make these time
animations using Google Earth

00:20:28.170 --> 00:20:31.610
Tours using the animated
update tag.

00:20:31.610 --> 00:20:34.390
And then I just finished the
section on objects in motion--

00:20:34.390 --> 00:20:38.570
looking at GS track as a feature
to look in GPS data,

00:20:38.570 --> 00:20:41.880
and then how to use the updates
tag with the network

00:20:41.880 --> 00:20:46.170
link control to basically push
new data into that track.

00:20:46.170 --> 00:20:49.700
So I just launched a new blog
today at unchartable.com, and

00:20:49.700 --> 00:20:52.550
I'm going to start talking about
KML techniques like this

00:20:52.550 --> 00:20:53.100
in the future.

00:20:53.100 --> 00:20:54.790
And with that, I'm going to
hand it over to Mano.

00:21:01.140 --> 00:21:03.070
MANO MARKS: Thanks, Sean.

00:21:03.070 --> 00:21:03.500
Hi.

00:21:03.500 --> 00:21:04.030
Am I on?

00:21:04.030 --> 00:21:04.810
I'm on.

00:21:04.810 --> 00:21:06.500
OK.

00:21:06.500 --> 00:21:07.000
Hey.

00:21:07.000 --> 00:21:09.035
Last session of the day,
pretty exciting.

00:21:09.035 --> 00:21:10.740
I hope you all are having
a great day today.

00:21:14.040 --> 00:21:15.740
Sean dared me to
make this joke.

00:21:15.740 --> 00:21:18.620
The Android people are giving
out tablets and the Geo people

00:21:18.620 --> 00:21:20.360
are giving out free maps.

00:21:20.360 --> 00:21:21.950
So.

00:21:21.950 --> 00:21:22.555
Yeah.

00:21:22.555 --> 00:21:23.040
All right.

00:21:23.040 --> 00:21:26.330
Some of you laughed
at any rate.

00:21:26.330 --> 00:21:28.960
OK, so Sean and I are developer
advocates, which

00:21:28.960 --> 00:21:30.430
means this is our job, right?

00:21:30.430 --> 00:21:33.850
A big part of our job is to go
out and talk to developers

00:21:33.850 --> 00:21:39.130
about actually doing code and
the process of doing that.

00:21:39.130 --> 00:21:42.880
And we find that a lot of
developers ask us specific

00:21:42.880 --> 00:21:45.640
questions about developer
environments.

00:21:45.640 --> 00:21:49.300
Like what are the kinds of
things that you use to

00:21:49.300 --> 00:21:50.760
actually do your coding?

00:21:50.760 --> 00:21:55.650
So I'm going to toss a whole
bunch of ideas and things that

00:21:55.650 --> 00:22:01.410
Sean and I do at you, but
mostly, again, as all coding

00:22:01.410 --> 00:22:04.460
is, it's really going to be
questions of personal

00:22:04.460 --> 00:22:05.670
preference.

00:22:05.670 --> 00:22:09.730
There is no right single
development environment for

00:22:09.730 --> 00:22:12.240
creating KML.

00:22:12.240 --> 00:22:15.340
So the things that I'm going
to talk about briefly are

00:22:15.340 --> 00:22:18.100
editors, validators, particular
programming

00:22:18.100 --> 00:22:21.540
languages, and also mention
some open-source libraries

00:22:21.540 --> 00:22:25.150
that might be really
useful for you.

00:22:25.150 --> 00:22:28.130
So particularly for the
programming editor, this is

00:22:28.130 --> 00:22:31.480
something of a personal
choice.

00:22:31.480 --> 00:22:33.830
Generally, your options are
some sort of integrated

00:22:33.830 --> 00:22:36.930
development environment or
just basic text editors.

00:22:36.930 --> 00:22:40.470
And I'm particularly fond of
vi, and of course Sean is

00:22:40.470 --> 00:22:42.360
particularly fond of Emacs.

00:22:42.360 --> 00:22:47.050
So we have the classic, older
hacker kind of conflict, even

00:22:47.050 --> 00:22:49.600
though he's a lot younger
than I am.

00:22:49.600 --> 00:22:52.650
And some different ideas of
the different things.

00:22:52.650 --> 00:22:55.917
They one place that we come
together is on Notepad++, it's

00:22:55.917 --> 00:22:59.700
a nice Windows environment.

00:22:59.700 --> 00:23:03.000
We've got some nice scripts
dialing and

00:23:03.000 --> 00:23:04.660
some basic text editing.

00:23:04.660 --> 00:23:08.410
And if somebody could turn off
their phone ringer, thank you.

00:23:08.410 --> 00:23:11.650
And then, of course, some people
do prefer Eclipse or

00:23:11.650 --> 00:23:15.670
Visual Studios, which has some
integrated XML editing

00:23:15.670 --> 00:23:16.920
environments.

00:23:19.700 --> 00:23:23.310
Personally, I just go with the
classic VI because it's pretty

00:23:23.310 --> 00:23:24.560
much everywhere.

00:23:27.920 --> 00:23:29.710
Sorry, that's a little dig.

00:23:29.710 --> 00:23:32.040
Anyway so XML validators.

00:23:32.040 --> 00:23:35.140
So XML is a document
format, right?

00:23:35.140 --> 00:23:40.460
And the scale of things that
we're talking about here,

00:23:40.460 --> 00:23:43.400
you're not really hand-editing
KML anymore, right?

00:23:43.400 --> 00:23:46.610
High-performance KML, you're
generating this KML

00:23:46.610 --> 00:23:50.850
programmatically But there are
times when you want to check

00:23:50.850 --> 00:23:52.840
whether it's a valid output and
you want to actually do

00:23:52.840 --> 00:23:53.880
that by hand.

00:23:53.880 --> 00:23:59.790
And I'm particularly fond of
Oxygen, which is a nice

00:23:59.790 --> 00:24:04.470
cross-platform Java-based
validator.

00:24:04.470 --> 00:24:08.570
XMLSpy is something a lot
of people are fond of.

00:24:08.570 --> 00:24:12.840
jEdit is something that Sean
is fond of, and of course,

00:24:12.840 --> 00:24:15.150
it's actually, I
believe, free.

00:24:15.150 --> 00:24:19.120
And Notepad++ has some basic
validation stuff built in.

00:24:19.120 --> 00:24:22.720
But, of course, you can also
directly validate using a

00:24:22.720 --> 00:24:27.840
number of different libraries,
the classic being libXML.

00:24:27.840 --> 00:24:30.640
And then a bunch of
language-specific ones.

00:24:30.640 --> 00:24:33.190
And then there's some
KML-specific specific

00:24:33.190 --> 00:24:39.690
libraries that helpful. pyKML,
as Sean mentioned, and LibKML.

00:24:42.290 --> 00:24:45.120
And then for programming
languages, I think Sean and I

00:24:45.120 --> 00:24:52.060
are both most fond of Python as
a language for doing this

00:24:52.060 --> 00:24:52.840
kind of coding.

00:24:52.840 --> 00:24:55.990
Easy to get started
on your scripting.

00:24:55.990 --> 00:25:03.750
And it's got support for
libraries like LibKML, pyKML,

00:25:03.750 --> 00:25:07.040
GDAL, OGR, those
sort of things.

00:25:07.040 --> 00:25:12.670
And a couple things that
you need to take into

00:25:12.670 --> 00:25:14.510
consideration when you're
thinking about what

00:25:14.510 --> 00:25:17.380
programming languages that
you're working on, is think

00:25:17.380 --> 00:25:19.510
about what your production
environment's going to

00:25:19.510 --> 00:25:20.620
actually look like.

00:25:20.620 --> 00:25:23.420
So many of you are going to be
very comfortable on your

00:25:23.420 --> 00:25:28.000
laptop or in your desktop doing
some coding in whatever

00:25:28.000 --> 00:25:29.550
scripting language you
want to be doing.

00:25:29.550 --> 00:25:31.290
You've got your Rubys on
Rails environment,

00:25:31.290 --> 00:25:32.130
or blah, blah, blah.

00:25:32.130 --> 00:25:36.270
Whatever your particular kind of
thing that you've got, but

00:25:36.270 --> 00:25:38.540
you have to think about how
that's going to translate into

00:25:38.540 --> 00:25:41.460
a hosted environment, how it's
going to translate it if

00:25:41.460 --> 00:25:44.350
you're going to be pushing
that out somebody.

00:25:44.350 --> 00:25:46.970
So it's often good to sort
of start from that

00:25:46.970 --> 00:25:48.510
as a starting location.

00:25:48.510 --> 00:25:51.760
Things to think about that might
not occur to you right

00:25:51.760 --> 00:25:54.470
away are things like Google
App Management doesn't

00:25:54.470 --> 00:25:59.580
currently allow you to support
C++ libraries, anything but

00:25:59.580 --> 00:26:02.050
pure Python or Java.

00:26:02.050 --> 00:26:05.200
So those are the kind of
decisions you're going to need

00:26:05.200 --> 00:26:08.580
to look at before you actually
get started when you're

00:26:08.580 --> 00:26:12.290
creating a large-scale
application.

00:26:12.290 --> 00:26:16.160
And if you're, for instance,
say, pulling from a database

00:26:16.160 --> 00:26:20.000
certain programming languages
has had better integration

00:26:20.000 --> 00:26:24.180
with different databases, so
the classics being PHP and

00:26:24.180 --> 00:26:27.250
MySQL are pretty
closely linked.

00:26:27.250 --> 00:26:30.880
There's tons of code that help
you pull that data out there.

00:26:30.880 --> 00:26:33.630
And if you're doing something
like interacting with the data

00:26:33.630 --> 00:26:37.100
API, like Fusion Tables, what
are the client libraries that

00:26:37.100 --> 00:26:39.170
you'll need?

00:26:39.170 --> 00:26:39.720
OK.

00:26:39.720 --> 00:26:43.410
And just to give a quick
call-out out to pyKML.

00:26:43.410 --> 00:26:46.260
You may be familiar with LibKML,
which was actually

00:26:46.260 --> 00:26:50.200
produced by Google engineers and
is used in some production

00:26:50.200 --> 00:26:52.460
environments within Google.

00:26:52.460 --> 00:26:56.120
pyKML is a bit lighter-weight.

00:26:56.120 --> 00:27:01.760
It supports primarily the core
elements of KML and it's

00:27:01.760 --> 00:27:05.900
written in Python, so it's got
a very Pythonic interface.

00:27:05.900 --> 00:27:09.580
So I just wanted to show you
this as an example here.

00:27:09.580 --> 00:27:14.140
This is a pretty simple way of
creating KML documents, which

00:27:14.140 --> 00:27:19.310
is one of those core container
elements for KML, adding in

00:27:19.310 --> 00:27:24.590
Atom and putting in the links
that you're preserving,

00:27:24.590 --> 00:27:27.770
attribution, and then creating
a placemark.

00:27:27.770 --> 00:27:32.730
You may recognize 0, 0 as Null
Island in the old Myst game.

00:27:32.730 --> 00:27:36.060
It's also where a lot of KML
with poorly-configured

00:27:36.060 --> 00:27:38.410
latitude and longitude ends
up automatically--

00:27:38.410 --> 00:27:41.810
this spot off the west
coast of Africa.

00:27:41.810 --> 00:27:44.210
So if you're always wondering
why there's this big cluster

00:27:44.210 --> 00:27:45.000
of things--

00:27:45.000 --> 00:27:47.240
it like, anything that Google
Earth doesn't actually know

00:27:47.240 --> 00:27:49.430
how to place, it's going to
either place it there or

00:27:49.430 --> 00:27:50.970
entirely off-screen.

00:27:50.970 --> 00:27:55.900
So I like to use that
in my examples.

00:27:55.900 --> 00:27:56.590
OK.

00:27:56.590 --> 00:28:02.080
So that's just a simple
pyKML example.

00:28:02.080 --> 00:28:05.210
So I want to switch gears here
and talk about the Maps API

00:28:05.210 --> 00:28:08.960
because Maps actually
deals with KML in a

00:28:08.960 --> 00:28:10.320
very different way.

00:28:10.320 --> 00:28:12.600
I'm going to start with
showing you some

00:28:12.600 --> 00:28:14.060
capabilities here.

00:28:14.060 --> 00:28:23.810
So this is a USGS KML file
overlaid onto a Google Maps

00:28:23.810 --> 00:28:24.900
API application.

00:28:24.900 --> 00:28:28.810
And you'll see that the
earthquakes are styled

00:28:28.810 --> 00:28:30.670
different colors based
on their intensity.

00:28:30.670 --> 00:28:40.390
And I can click here and you'll
see to the right here,

00:28:40.390 --> 00:28:49.160
I've got the actual data there
from the placemark that I

00:28:49.160 --> 00:28:50.340
clicked on.

00:28:50.340 --> 00:28:56.250
Now, you may notice that it's
not actually pulling it into

00:28:56.250 --> 00:28:59.320
an info window, and that's
because I've done some code to

00:28:59.320 --> 00:29:01.870
prevent it from doing that.

00:29:01.870 --> 00:29:04.030
So I just wanted to show you
this to demonstrate that you

00:29:04.030 --> 00:29:07.820
can do something a bit
interesting, which is you can

00:29:07.820 --> 00:29:11.370
actually load it in as a
clickable raster overlay.

00:29:11.370 --> 00:29:15.290
So how many of you were in the
Fusion Tables talk earlier?

00:29:15.290 --> 00:29:15.820
OK.

00:29:15.820 --> 00:29:16.280
All of you.

00:29:16.280 --> 00:29:16.620
Awesome.

00:29:16.620 --> 00:29:19.330
This is like the Geo diehards
here, right?

00:29:19.330 --> 00:29:20.780
OK.

00:29:20.780 --> 00:29:25.760
So in that talk, James McGill
described how Fusion Tables

00:29:25.760 --> 00:29:30.630
will render all your placemarks
into basically 40

00:29:30.630 --> 00:29:33.580
tiles and place them
onto a map.

00:29:33.580 --> 00:29:38.760
Well, KML goes through a
very similar renderer.

00:29:38.760 --> 00:29:42.290
Basically these are all rendered
as a clickable raster

00:29:42.290 --> 00:29:44.320
overlay to increase
performance.

00:29:44.320 --> 00:29:48.780
So you can put in quite a bit
more placemarks in KML than

00:29:48.780 --> 00:29:52.520
you can if you were loading
this up using--

00:29:52.520 --> 00:29:54.450
you were creating a Javascript
objects.

00:29:54.450 --> 00:29:59.170
And it's created using this
clickable raster overlay.

00:29:59.170 --> 00:30:03.800
But once you click on it, you
actually actively get data out

00:30:03.800 --> 00:30:06.540
of it that can be captured and
then manipulated and used.

00:30:11.200 --> 00:30:11.830
OK.

00:30:11.830 --> 00:30:17.010
So people often ask me about
this process and how it works.

00:30:17.010 --> 00:30:21.780
You basically create this KML
layer object, and I'm going to

00:30:21.780 --> 00:30:25.850
show you the actual code for
this in a minute, but this is

00:30:25.850 --> 00:30:27.320
the particular process.

00:30:27.320 --> 00:30:30.130
Place the KML file
on a server.

00:30:30.130 --> 00:30:33.000
You create this KML layer
object in your Maps API

00:30:33.000 --> 00:30:39.090
application, and then the Maps
API let's Google servers know

00:30:39.090 --> 00:30:40.270
where that is.

00:30:40.270 --> 00:30:44.120
Google servers go out, fetch
the KML file, and render it

00:30:44.120 --> 00:30:47.130
into this right-clickable raster
overlay, which they

00:30:47.130 --> 00:30:50.550
pass back to your Maps
API application.

00:30:50.550 --> 00:30:52.810
So this is why--

00:30:52.810 --> 00:30:56.260
and the question people always
ask me is, why can't I put

00:30:56.260 --> 00:30:58.590
this KML file on my computer?

00:30:58.590 --> 00:31:05.680
Or why can't I put a password
into this to prevent other

00:31:05.680 --> 00:31:07.140
people from getting
access to it?

00:31:07.140 --> 00:31:10.210
It's because you can't pass
that password onto Google

00:31:10.210 --> 00:31:12.150
server to let it know.

00:31:12.150 --> 00:31:15.060
It has to actually go out, fetch
the KML, render it, and

00:31:15.060 --> 00:31:16.490
then pass it back.

00:31:16.490 --> 00:31:21.560
So any KML object used in the
Maps API must be rendered onto

00:31:21.560 --> 00:31:22.810
a public server.

00:31:26.520 --> 00:31:28.480
OK.

00:31:28.480 --> 00:31:32.190
I want to go back to the
limitations in a second, but I

00:31:32.190 --> 00:31:34.530
wanted to show you the actual
code, since I actually

00:31:34.530 --> 00:31:35.310
talked about it.

00:31:35.310 --> 00:31:36.160
It's very simple.

00:31:36.160 --> 00:31:39.020
Here you've got this
KML layer you just

00:31:39.020 --> 00:31:40.730
created, pass it the URL.

00:31:40.730 --> 00:31:45.690
Here, I'm passing options to
it and here I have the

00:31:45.690 --> 00:31:50.890
suppressed info window, it's
true, and I set it to the map.

00:31:50.890 --> 00:31:56.290
And this should actually have
my options in there.

00:31:56.290 --> 00:31:58.290
It looks like that
got left out.

00:31:58.290 --> 00:32:03.130
And then here, I'm adding an
event listener to the KML

00:32:03.130 --> 00:32:07.360
layer on the click that
take the texts

00:32:07.360 --> 00:32:10.135
from the KML feature.

00:32:10.135 --> 00:32:15.680
So when I click on it, it is
able to capture that future

00:32:15.680 --> 00:32:19.890
data, get the description, and
then it shoves it into a DIV.

00:32:19.890 --> 00:32:22.660
So that's just a very simple
explanation of what was

00:32:22.660 --> 00:32:26.520
happening before and why it
wasn't showing up as an info

00:32:26.520 --> 00:32:28.240
window, it's showing
up in the side.

00:32:28.240 --> 00:32:33.560
So let me talk about some
the limitations here for

00:32:33.560 --> 00:32:34.980
using the Maps API.

00:32:34.980 --> 00:32:41.620
So as Sean mentioned, we don't
support full KML in

00:32:41.620 --> 00:32:42.760
the Google Maps API.

00:32:42.760 --> 00:32:46.860
And the reason for this kind
of two-fold, here.

00:32:46.860 --> 00:32:49.470
One is, it's 2D environment,
right?

00:32:49.470 --> 00:32:53.050
You don't have a way of
representing a 3D model, you

00:32:53.050 --> 00:32:53.690
don't have a way of

00:32:53.690 --> 00:32:56.220
representing elevation directly--

00:32:56.220 --> 00:32:59.130
there's a lot of different
things that you don't have.

00:32:59.130 --> 00:33:02.270
And the other is that this
process of having the server

00:33:02.270 --> 00:33:05.940
load the file and then send it
back to the browser means that

00:33:05.940 --> 00:33:09.925
you've got lots of interaction
between servers and clients

00:33:09.925 --> 00:33:11.100
and stuff going on.

00:33:11.100 --> 00:33:14.080
So there's very big performance
considerations.

00:33:14.080 --> 00:33:19.110
So we have a relatively small
file size for geographic data.

00:33:19.110 --> 00:33:22.630
That 10 megabytes, maximum.

00:33:22.630 --> 00:33:27.120
And a limitation in
the particular KML

00:33:27.120 --> 00:33:29.060
that's actually supported.

00:33:29.060 --> 00:33:35.360
And in this case, it's primarily
the geometry data.

00:33:35.360 --> 00:33:39.230
We don't support very many
of the extensions

00:33:39.230 --> 00:33:40.500
that Google has added.

00:33:40.500 --> 00:33:44.210
So the GX tours, and the tracks,
and all those things

00:33:44.210 --> 00:33:48.170
that Sean was really excited
about because they're

00:33:48.170 --> 00:33:52.590
incredibly powerful
visualization tools, we don't

00:33:52.590 --> 00:33:56.860
support those in Maps just
because of these limitations.

00:33:56.860 --> 00:33:59.790
And also for security reasons
and because we're passing this

00:33:59.790 --> 00:34:02.430
off to a Javascript application
that may be

00:34:02.430 --> 00:34:05.890
sitting on a different server--
so you noticed that

00:34:05.890 --> 00:34:09.040
file that I actually loaded,
the USGS file, was actually

00:34:09.040 --> 00:34:13.489
loaded directly from
the USGS.com.

00:34:13.489 --> 00:34:17.340
So since it's being loaded from
a different site, we have

00:34:17.340 --> 00:34:20.659
to actually be careful about
cross-site scripting and all

00:34:20.659 --> 00:34:21.540
that sort of thing.

00:34:21.540 --> 00:34:27.520
So it'll scrape out Javascript
and Flash that's in the

00:34:27.520 --> 00:34:28.850
description balloons.

00:34:28.850 --> 00:34:32.370
So these are some of the kind of
considerations that you'll

00:34:32.370 --> 00:34:35.920
need to think about when you're
creating KML for the

00:34:35.920 --> 00:34:36.920
Google Maps API.

00:34:36.920 --> 00:34:38.710
And of course, it has
to be on a public

00:34:38.710 --> 00:34:41.300
server with no password.

00:34:41.300 --> 00:34:44.429
By the way, that scraping out
the Javascript and Flash, you

00:34:44.429 --> 00:34:49.070
can put that back in by
capturing the click events and

00:34:49.070 --> 00:34:52.409
creating a new info window,
if you want.

00:34:52.409 --> 00:34:53.659
OK.

00:34:55.600 --> 00:34:58.520
So those are the major things
I wanted to talk about

00:34:58.520 --> 00:35:01.060
for the Maps API.

00:35:01.060 --> 00:35:05.880
So things to be thinking about
in these considerations is--

00:35:05.880 --> 00:35:09.650
the primary thing is, think
about producing separate KML

00:35:09.650 --> 00:35:16.990
that's optimized for Maps when
you are producing KML.

00:35:16.990 --> 00:35:20.730
You have a set of data that's
highly optimized for Earth and

00:35:20.730 --> 00:35:23.140
a set of data that's highly
optimized for Maps.

00:35:23.140 --> 00:35:25.790
And you can do this dynamically,
depending on the

00:35:25.790 --> 00:35:27.330
client that's querying it.

00:35:27.330 --> 00:35:30.620
You can spend parameters to
your network links or to

00:35:30.620 --> 00:35:36.370
whatever that are loading the
data to change them if it's a

00:35:36.370 --> 00:35:42.090
Maps API application.

00:35:42.090 --> 00:35:42.410
OK.

00:35:42.410 --> 00:35:46.440
So most of you were in the
Fusion Tables talk, so I'm not

00:35:46.440 --> 00:35:52.640
going to actually go as deep
into this as I was going to

00:35:52.640 --> 00:35:55.520
because it doesn't seem like
it would help to repeat it.

00:35:55.520 --> 00:35:59.540
But I just want to talk about
some basic things that you can

00:35:59.540 --> 00:36:01.620
do with Fusion Tables.

00:36:01.620 --> 00:36:03.580
So that these are captured.

00:36:03.580 --> 00:36:06.540
And anybody who's watching the
video, take a look at the

00:36:06.540 --> 00:36:10.420
Fusion Tables talk, as well.

00:36:10.420 --> 00:36:15.080
So this is a simple Maps API app
that I wrote with a very

00:36:15.080 --> 00:36:17.130
simple Fusion Table.

00:36:17.130 --> 00:36:19.280
I was a historian in
a former life.

00:36:19.280 --> 00:36:22.300
And the idea here is that the
boundaries of Poland have

00:36:22.300 --> 00:36:28.050
changed pretty dramatically over
the years, and so I just

00:36:28.050 --> 00:36:34.520
wrote one that captured that and
rendered these on a map.

00:36:34.520 --> 00:36:38.020
So you'll see here in 1492,
these where the

00:36:38.020 --> 00:36:39.270
boundaries of Poland.

00:36:39.270 --> 00:36:44.110
In 1650, that was where the
boundaries of Poland--

00:36:44.110 --> 00:36:49.720
In 1815, it actually goes
away when Prussia and

00:36:49.720 --> 00:36:51.940
Russia split Poland.

00:36:51.940 --> 00:36:56.255
And I believe Austria actually
took a piece of it.

00:36:56.255 --> 00:37:00.290
And in 1920 these are
the boundaries.

00:37:00.290 --> 00:37:04.820
And 1945, you see they're the
current boundaries there.

00:37:04.820 --> 00:37:10.550
So the things to note about this
is this is all done with

00:37:10.550 --> 00:37:14.640
KML that is loaded into
Fusion Tables.

00:37:14.640 --> 00:37:19.050
And what Fusion Tables does, as
you know from the previous

00:37:19.050 --> 00:37:24.200
talk, you load up tabular data
and it pushes it into Fusion

00:37:24.200 --> 00:37:31.210
Tables, and then you just
click on visualize map

00:37:31.210 --> 00:37:34.000
and you get a map.

00:37:34.000 --> 00:37:40.010
So the point here, though,
is Fusion Tables

00:37:40.010 --> 00:37:42.220
supports KML in here.

00:37:42.220 --> 00:37:44.480
So when you're creating KML
and you're uploading it to

00:37:44.480 --> 00:37:48.130
Fusion Tables, things to be
aware of, that it's a smaller

00:37:48.130 --> 00:37:50.680
subset of KML than even
the Maps API supports.

00:37:50.680 --> 00:37:53.650
It's basically just
the geometries.

00:37:53.650 --> 00:37:59.080
So what it does is it takes the
KML file and it strips out

00:37:59.080 --> 00:38:03.530
all of the styling that you've
done in your KML.

00:38:03.530 --> 00:38:06.420
So any styling that you're
producing, you don't bother

00:38:06.420 --> 00:38:08.060
with it to create it.

00:38:08.060 --> 00:38:11.640
And it just strips out the
geometries and then it takes a

00:38:11.640 --> 00:38:14.240
look at the extended
data elements.

00:38:14.240 --> 00:38:17.880
Extended data is where you can
create basically name-value

00:38:17.880 --> 00:38:23.985
pairs of data for your
KML features.

00:38:23.985 --> 00:38:29.430
So it then takes those extended
data and turns that

00:38:29.430 --> 00:38:30.690
into columns.

00:38:30.690 --> 00:38:35.920
So things that you had in the
description and the name I

00:38:35.920 --> 00:38:37.470
think are also transferred,
and then

00:38:37.470 --> 00:38:41.770
nothing else comes along.

00:38:41.770 --> 00:38:43.720
So that includes things
like time stamp

00:38:43.720 --> 00:38:44.970
and time span elements.

00:38:48.250 --> 00:38:50.560
OK.

00:38:50.560 --> 00:38:54.260
So the integration with the
Maps API, as you will know

00:38:54.260 --> 00:38:59.230
from the previous session, is
essentially one line of code.

00:38:59.230 --> 00:39:04.910
You can do additional things,
as we've announced today, in

00:39:04.910 --> 00:39:08.510
styling these layers as
they come through.

00:39:08.510 --> 00:39:12.300
And this is, again, just a
summary of some of the things

00:39:12.300 --> 00:39:13.880
to do with our KML support.

00:39:13.880 --> 00:39:17.630
Again, itr renders this
clickable raster, much like

00:39:17.630 --> 00:39:23.810
the KML layer does, and you
can upload files up to 100

00:39:23.810 --> 00:39:28.290
megabytes in a single file
into Fusion Tables--

00:39:28.290 --> 00:39:31.110
although a single table can
actually be much larger.

00:39:31.110 --> 00:39:36.880
You can programmatically add
data to files to get it up to

00:39:36.880 --> 00:39:39.030
250 megabytes.

00:39:39.030 --> 00:39:44.220
That's for a single
Gmail account.

00:39:44.220 --> 00:39:46.820
So this is your basic code
sample for integrating with

00:39:46.820 --> 00:39:48.470
the Maps API.

00:39:48.470 --> 00:39:52.810
Here we've got a Fusion Table
layers, object, you pass in a

00:39:52.810 --> 00:39:58.090
table ID, and then you can
optionally add in a query.

00:39:58.090 --> 00:40:00.830
And this is from this Poland
demo that I just showed you.

00:40:00.830 --> 00:40:04.430
Select geometry from table ID
where year equals year, and

00:40:04.430 --> 00:40:05.680
set the Layer 2 amount.

00:40:07.830 --> 00:40:12.830
OK, so that's all we have
on that right now.

00:40:12.830 --> 00:40:17.630
We are happy that you all are
here and we'd really like to

00:40:17.630 --> 00:40:19.530
take some questions.

00:40:19.530 --> 00:40:21.960
We would ask that if you have a
question that you come up to

00:40:21.960 --> 00:40:26.402
one of the mics so that the
questions can be recorded.

00:40:26.402 --> 00:40:29.180
SEAN ASKAY: And a couple
other things as well.

00:40:29.180 --> 00:40:30.850
MANO MARKS: I guess
we can both be on.

00:40:30.850 --> 00:40:31.915
SEAN ASKAY: Apologies to Mano.

00:40:31.915 --> 00:40:33.510
I screwed up you sample.

00:40:33.510 --> 00:40:35.600
I was converting all our slides
to HTML5 this morning

00:40:35.600 --> 00:40:36.120
and I got a bad copy-paste.

00:40:36.120 --> 00:40:37.570
MANO MARKS: No worries.

00:40:37.570 --> 00:40:39.470
SEAN ASKAY: If you guys have
feedback about this talk, we'd

00:40:39.470 --> 00:40:41.370
love to hear it at
SpeakerMeter.

00:40:41.370 --> 00:40:42.960
The URL's down there.

00:40:42.960 --> 00:40:44.520
Tell us how bad or
well we did.

00:40:44.520 --> 00:40:46.962
And questions?

00:40:46.962 --> 00:40:49.920
AUDIENCE: Our organization's
running Esri, and they have a

00:40:49.920 --> 00:40:51.550
lot of jurisdictional data.

00:40:51.550 --> 00:40:54.410
It's highly accurate, it's
very up to date.

00:40:54.410 --> 00:40:58.510
When I get a supervisorial
district KML file that they're

00:40:58.510 --> 00:41:01.980
going to generate off a
shapefile, it's huge.

00:41:01.980 --> 00:41:04.760
Do you have any way of
simplifying it to make it a

00:41:04.760 --> 00:41:06.170
smaller KML?

00:41:06.170 --> 00:41:08.810
Shrink it a bit?

00:41:08.810 --> 00:41:09.080
MANO MARKS: Yeah.

00:41:09.080 --> 00:41:09.700
So there's a number of
techniques that you can use.

00:41:09.700 --> 00:41:10.051
AUDIENCE: A mechanism?

00:41:10.051 --> 00:41:11.750
Yeah.

00:41:11.750 --> 00:41:14.250
MANO MARKS: The classic one
to use is regenation.

00:41:14.250 --> 00:41:21.170
Regenation basically breaks down
your file into simpler--

00:41:21.170 --> 00:41:23.170
say you're dealing
with polygons.

00:41:23.170 --> 00:41:27.290
It'd be a simpler polygon when
viewed from a distance, and

00:41:27.290 --> 00:41:31.000
more complex polygons
for portions of your

00:41:31.000 --> 00:41:34.270
data at lower points.

00:41:34.270 --> 00:41:36.940
SEAN ASKAY: You might look at
Fusion Tables, if you didn't

00:41:36.940 --> 00:41:37.720
already attend that talk.

00:41:37.720 --> 00:41:41.030
If you do convert your shapefile
to KML, you can put

00:41:41.030 --> 00:41:43.840
up to a million characters in
each cell in Fusion Tables.

00:41:43.840 --> 00:41:45.560
So as long as one polygon
doesn't have more than a

00:41:45.560 --> 00:41:49.160
million characters for the
geometry, toss them in Fusion

00:41:49.160 --> 00:41:51.330
Tables, and we actually do quite
well with really large

00:41:51.330 --> 00:41:53.730
geometries, really
fine detail.

00:41:53.730 --> 00:41:55.340
The other thing is, do you
really need all that

00:41:55.340 --> 00:41:56.620
detail in the KML?

00:41:56.620 --> 00:41:56.880
AUDIENCE: Probably not.

00:41:56.880 --> 00:41:59.310
SEAN ASKAY: In which case, I
would recommend using Esri

00:41:59.310 --> 00:42:00.560
software that you
have already.

00:42:00.560 --> 00:42:04.350
There are polygon simplification
tools in ArcGIS

00:42:04.350 --> 00:42:06.750
that will simplify those
polygons down and make them a

00:42:06.750 --> 00:42:09.000
lot easier to manage and deal
with in Google Earth.

00:42:09.000 --> 00:42:09.870
AUDIENCE: Thank you.

00:42:09.870 --> 00:42:13.810
MANO MARKS: So one additional
point on that is actually Josh

00:42:13.810 --> 00:42:13.930
[? Litmey, ?]

00:42:13.930 --> 00:42:16.490
who's in the audience, wrote
an application called Shape

00:42:16.490 --> 00:42:19.980
Escape, which allows you to
upload a shapefile directly to

00:42:19.980 --> 00:42:20.670
Fusion Tables.

00:42:20.670 --> 00:42:25.090
It decomposes it, puts all the
features, and posts them using

00:42:25.090 --> 00:42:30.360
the Fusion Tables API into
Fusion Tables, and it will

00:42:30.360 --> 00:42:33.520
simplify any KML that's
too complex.

00:42:33.520 --> 00:42:37.440
It'll simplify polygons that
have too many vertices.

00:42:37.440 --> 00:42:38.160
SEAN ASKAY: Next question.

00:42:38.160 --> 00:42:40.010
AUDIENCE: Yeah.

00:42:40.010 --> 00:42:42.510
A client asked me this question,
and I hope I gave

00:42:42.510 --> 00:42:44.070
them the right answer.

00:42:44.070 --> 00:42:49.820
If you go ahead and load KML
into Google Maps like that,

00:42:49.820 --> 00:42:53.410
that URL I pass you, does that
end up in the Google search

00:42:53.410 --> 00:42:54.070
engine anywhere?

00:42:54.070 --> 00:42:57.780
In other words, could that data
then be found elsewhere?

00:42:57.780 --> 00:42:58.210
MANO MARKS: So I don't--

00:42:58.210 --> 00:42:59.290
SEAN ASKAY: Are you going
to repeat the question?

00:42:59.290 --> 00:43:03.210
MANO MARKS: So the question is
if you create a KML layer

00:43:03.210 --> 00:43:06.710
using a Maps API application,
does that URL then

00:43:06.710 --> 00:43:08.110
get passed on to--

00:43:08.110 --> 00:43:09.280
AUDIENCE: Elsewhere
in Google, yeah.

00:43:09.280 --> 00:43:13.220
MANO MARKS: --To our web search
to or Map search to

00:43:13.220 --> 00:43:15.990
allow it to be found
in some other spot?

00:43:15.990 --> 00:43:16.550
No.

00:43:16.550 --> 00:43:16.740
SEAN ASKAY: Yeah.

00:43:16.740 --> 00:43:18.400
Not that I'm aware of.

00:43:18.400 --> 00:43:19.315
I'd be shocked if it did.

00:43:19.315 --> 00:43:19.940
So.

00:43:19.940 --> 00:43:21.300
AUDIENCE: That's what
I told him.

00:43:21.300 --> 00:43:23.090
That's the best we're
going to do is--

00:43:23.090 --> 00:43:23.430
we'd all be surprised.

00:43:23.430 --> 00:43:23.940
MANO MARKS: Does he
want it to be?

00:43:23.940 --> 00:43:24.680
Was it [INTERPOSING VOICES]?

00:43:24.680 --> 00:43:25.260
AUDIENCE: No, no, no.

00:43:25.260 --> 00:43:25.960
That's the point.

00:43:25.960 --> 00:43:29.170
You can't put in a password, but
I told him nobody's ever

00:43:29.170 --> 00:43:30.440
going to find it.

00:43:30.440 --> 00:43:30.680
MANO MARKS: Yeah.

00:43:30.680 --> 00:43:35.530
The other thing you might do if
you're really worried about

00:43:35.530 --> 00:43:38.690
it is put in site map that
specifies don't call the

00:43:38.690 --> 00:43:42.500
particular directory that
KML comes from.

00:43:42.500 --> 00:43:44.180
SEAN ASKAY: I guess it all
depends on how you're passing

00:43:44.180 --> 00:43:45.150
the URL on, as well.

00:43:45.150 --> 00:43:48.150
Because if you're doing that
client-side on Javascript,

00:43:48.150 --> 00:43:50.510
someone could look at your
page, like you say, and

00:43:50.510 --> 00:43:51.690
actually fish for the URLs.

00:43:51.690 --> 00:43:53.850
But if it's server-side or
something, or if you're

00:43:53.850 --> 00:43:57.010
obscuring the way that URLs
pass, you'll be fine.

00:43:57.010 --> 00:44:01.050
MANO MARKS: If you're really
concerned, you use Maps API

00:44:01.050 --> 00:44:04.670
Premiere upload it to Fusion
Tables, and use the private

00:44:04.670 --> 00:44:09.500
Fusion Table option for Premiere
that allow you to

00:44:09.500 --> 00:44:12.870
keep your table private, but
still share it with the rest

00:44:12.870 --> 00:44:13.280
of the world.

00:44:13.280 --> 00:44:14.940
AUDIENCE: OK.

00:44:14.940 --> 00:44:16.190
Thanks.

00:44:17.750 --> 00:44:19.080
AUDIENCE: I had two questions.

00:44:19.080 --> 00:44:23.000
First, when the last I looked,
I could not find a reasonable

00:44:23.000 --> 00:44:26.080
pure Java API for writing KML.

00:44:26.080 --> 00:44:30.600
I saw a number of JNI APIs but
those are harder to deploy and

00:44:30.600 --> 00:44:31.330
harder to work with.

00:44:31.330 --> 00:44:32.860
Oh, you're on Linux,
I'm on Windows.

00:44:32.860 --> 00:44:33.920
Blah, blah, blah.

00:44:33.920 --> 00:44:38.650
Is there a good pure Java
way to make KML?

00:44:38.650 --> 00:44:39.410
MANO MARKS: Not to
my knowledge.

00:44:39.410 --> 00:44:41.450
SEAN ASKAY: I'm not a
Java guy, so not to

00:44:41.450 --> 00:44:42.500
my knowledge, no.

00:44:42.500 --> 00:44:43.460
Unfortunately.

00:44:43.460 --> 00:44:47.990
MANO MARKS: You might be able
to do something with--

00:44:47.990 --> 00:44:51.440
essentially, KML
is XML, right?

00:44:51.440 --> 00:44:55.040
So using the built-in libraries
to do it, you could

00:44:55.040 --> 00:44:55.860
actually just
[INTERPOSING VOICES].

00:44:55.860 --> 00:44:57.310
AUDIENCE: I could write a Java
[INTERPOSING VOICES]

00:44:57.310 --> 00:44:57.540
in KML.

00:44:57.540 --> 00:44:58.030
MANO MARKS: Exactly.

00:44:58.030 --> 00:45:01.470
And then you could post it to
Google Code Hosting, so that

00:45:01.470 --> 00:45:02.160
everybody could use it.

00:45:02.160 --> 00:45:03.440
AUDIENCE: But how would
I get paid to do that?

00:45:03.440 --> 00:45:04.590
MANO MARKS: And I think there's
a couple of people

00:45:04.590 --> 00:45:05.740
waving their hands who
have some ideas--

00:45:05.740 --> 00:45:07.640
AUDIENCE: Oh, you'll
pay me to do that.

00:45:07.640 --> 00:45:08.530
MANO MARKS: --About that.

00:45:08.530 --> 00:45:09.810
So.

00:45:09.810 --> 00:45:11.870
And if they could come up--

00:45:11.870 --> 00:45:12.190
yeah.

00:45:12.190 --> 00:45:16.910
It shouldn't be that hard, but
at least one person may be

00:45:16.910 --> 00:45:19.220
coming up to the mic to
announce one later.

00:45:19.220 --> 00:45:20.520
So [INTERPOSING VOICES].

00:45:20.520 --> 00:45:22.380
SEAN ASKAY: To repeat that
question, it was is there a

00:45:22.380 --> 00:45:24.250
pure Javascript library
for creating KML.

00:45:24.250 --> 00:45:24.720
MANO MARKS: Not Javascript.

00:45:24.720 --> 00:45:26.190
SEAN ASKAY: Java.

00:45:26.190 --> 00:45:29.930
LibKML, C++, but you could
probably do SWIG bindings to

00:45:29.930 --> 00:45:31.850
Java, but that's not
made of Java.

00:45:31.850 --> 00:45:35.940
MANO MARKS: And it it poses
cross-platform problems

00:45:35.940 --> 00:45:38.890
because the SWIG bindings for
Windows don't work very well--

00:45:38.890 --> 00:45:40.540
SEAN ASKAY: At least when Py
came out, that I was showing

00:45:40.540 --> 00:45:44.210
earlier with Python, that's just
an extension of LibXML,

00:45:44.210 --> 00:45:46.240
C++ as well, so.

00:45:46.240 --> 00:45:47.260
Nevermind.

00:45:47.260 --> 00:45:49.810
MANO MARKS: A pure Java solution
might be really

00:45:49.810 --> 00:45:52.610
useful, for instance, in a Java
version of app engine.

00:45:52.610 --> 00:45:56.350
AUDIENCE: My other question is
when I'm doing development on

00:45:56.350 --> 00:46:00.500
my personal box behind a
firewall, is there a DEV mode

00:46:00.500 --> 00:46:01.000
or something?

00:46:01.000 --> 00:46:03.280
Where I could say, I've
got some KML.

00:46:03.280 --> 00:46:04.920
I just want to post it
to a place and then

00:46:04.920 --> 00:46:07.130
bring it right back.

00:46:07.130 --> 00:46:09.970
Where I don't have to set up a
Sandbox and publish it on a

00:46:09.970 --> 00:46:11.170
Sandbox with an URL.

00:46:11.170 --> 00:46:14.490
I have the KML in memory
in Javascript.

00:46:14.490 --> 00:46:16.330
Could somebody do something
with it?

00:46:16.330 --> 00:46:18.650
MANO MARKS: You mean
for Maps API?

00:46:18.650 --> 00:46:19.760
AUDIENCE: Yes, for Maps API.

00:46:19.760 --> 00:46:24.080
MANO MARKS: So the question is
is there a way to load KML

00:46:24.080 --> 00:46:29.430
into a development environment
on your personal laptop or

00:46:29.430 --> 00:46:33.180
desktop or whatever without
having to post it to an

00:46:33.180 --> 00:46:35.670
environment so that the Google
servers come and get it?

00:46:35.670 --> 00:46:36.590
No.

00:46:36.590 --> 00:46:37.515
AUDIENCE: Too bad.

00:46:37.515 --> 00:46:38.120
MANO MARKS: No, there's not.

00:46:38.120 --> 00:46:40.372
SEAN ASKAY: Google has to come
and get it, so if you can't

00:46:40.372 --> 00:46:41.730
hit a server on your laptop--

00:46:41.730 --> 00:46:43.175
MANO MARKS: That was the
point of the diagram

00:46:43.175 --> 00:46:43.430
[INTERPOSING VOICES]--

00:46:43.430 --> 00:46:44.630
AUDIENCE: DEV would even--

00:46:44.630 --> 00:46:46.220
I would even send it to--

00:46:46.220 --> 00:46:48.280
the Maps tiles don't load
if I'm not online.

00:46:48.280 --> 00:46:49.230
I can be online.

00:46:49.230 --> 00:46:52.690
What I want to do is be able to
post it to Google directly

00:46:52.690 --> 00:46:55.170
and then have Google just send
it right back to me as tiles,

00:46:55.170 --> 00:46:57.130
rather than putting it up in a
place and then waiting for you

00:46:57.130 --> 00:46:57.785
to come get it.

00:46:57.785 --> 00:46:58.810
That's harder for my firewall.

00:46:58.810 --> 00:47:01.230
MANO MARKS: If you want do that,
you could use something

00:47:01.230 --> 00:47:07.200
like Google Storage for
Developers or Google Code

00:47:07.200 --> 00:47:12.800
Hosting to upload it there and
then grab the files off of

00:47:12.800 --> 00:47:14.860
that using the KML layer.

00:47:14.860 --> 00:47:15.060
AUDIENCE: Thank you.

00:47:15.060 --> 00:47:15.930
MANO MARKS: So certainly
you could do that.

00:47:15.930 --> 00:47:16.990
AUDIENCE: Puncha a hole
in the router.

00:47:16.990 --> 00:47:17.240
MANO MARKS: I'm sorry?

00:47:17.240 --> 00:47:18.481
AUDIENCE: Punch a hole in your
router so it can see

00:47:18.481 --> 00:47:18.730
[INAUDIBLE].

00:47:18.730 --> 00:47:19.900
AUDIENCE: Yes, punching a hole
in my router is what I don't

00:47:19.900 --> 00:47:21.660
want to do.

00:47:21.660 --> 00:47:22.410
MANO MARKS: Yeah.

00:47:22.410 --> 00:47:24.920
I never recommend punching in a
hole in your router so that

00:47:24.920 --> 00:47:27.010
Google servers can come
in and and look at it.

00:47:27.010 --> 00:47:28.260
Yes.

00:47:33.760 --> 00:47:34.980
AUDIENCE: Well I was just
going to say that I've

00:47:34.980 --> 00:47:38.010
marshaled from a future
collection in Geo Tools into

00:47:38.010 --> 00:47:39.950
and out of a KML.

00:47:39.950 --> 00:47:43.000
So I think that's
possible still.

00:47:43.000 --> 00:47:49.810
My question was about an element
in KML that would

00:47:49.810 --> 00:47:53.270
allow me to take a georeferenced
image that I

00:47:53.270 --> 00:47:55.210
already have, like say
a historical map.

00:47:55.210 --> 00:47:59.690
I know the bounding box for it,
and just bring it up in

00:47:59.690 --> 00:48:00.410
Google Earth.

00:48:00.410 --> 00:48:01.565
Is that possible?

00:48:01.565 --> 00:48:04.040
MANO MARKS: Mmm hmm.

00:48:04.040 --> 00:48:05.480
SEAN ASKAY: There are a couple
different ways of doing it.

00:48:05.480 --> 00:48:07.980
If you have a georeference
file, like a GeoTIFF.

00:48:07.980 --> 00:48:09.980
If you have Google Earth Pro
or Google Earth Enterprise,

00:48:09.980 --> 00:48:11.570
that'll directly import.

00:48:11.570 --> 00:48:14.520
It'll convert it to a jpeg and
then display it for you.

00:48:14.520 --> 00:48:16.480
There are also some regenatioN
options with that, if you have

00:48:16.480 --> 00:48:18.240
really high resolution
rasters.

00:48:18.240 --> 00:48:19.820
But there are a lot of
free tools, as well.

00:48:19.820 --> 00:48:23.650
Goodle, or gDial, depending on
how we'd say it, is another

00:48:23.650 --> 00:48:25.930
open-source library that will
tile stuff for you.

00:48:25.930 --> 00:48:29.020
There's a tool called
gDial to Tiles.

00:48:29.020 --> 00:48:30.450
It's Python-based and
it will convert it.

00:48:30.450 --> 00:48:31.550
There's also MapTiler.

00:48:31.550 --> 00:48:35.580
If you go to Maptiler.org, it's
a desktop app that will

00:48:35.580 --> 00:48:40.210
take georeferenced images
and generate KML for it.

00:48:40.210 --> 00:48:41.690
But not natively in KML.

00:48:41.690 --> 00:48:45.090
There's no way to say, here's
my random raster proprietary

00:48:45.090 --> 00:48:47.020
format, bring it in.

00:48:47.020 --> 00:48:48.220
You actually have to
do a conversion

00:48:48.220 --> 00:48:50.080
process to native KML.

00:48:50.080 --> 00:48:50.970
AUDIENCE: To native KML.

00:48:50.970 --> 00:48:54.110
But it will reference an image
file, like a gif or something,

00:48:54.110 --> 00:48:55.360
and then there will
be bounding box

00:48:55.360 --> 00:48:56.350
coordinates on it?

00:48:56.350 --> 00:48:56.590
SEAN ASKAY: Yep.

00:48:56.590 --> 00:48:56.980
Absolutely.

00:48:56.980 --> 00:48:59.230
MANO MARKS: If you know the
bounding box and it's not a

00:48:59.230 --> 00:49:04.720
super large file, you can just
load it using a ground overlay

00:49:04.720 --> 00:49:07.740
element so that the core element
is ground overlay.

00:49:07.740 --> 00:49:09.860
That's the thing that
you're looking for.

00:49:09.860 --> 00:49:11.250
Large files, you
need to do some

00:49:11.250 --> 00:49:12.610
regionation and tiling for.

00:49:12.610 --> 00:49:13.465
SEAN ASKAY: You can talk
to us after and we can

00:49:13.465 --> 00:49:13.520
[INTERPOSING VOICES].

00:49:13.520 --> 00:49:15.280
MANO MARKS: And there's
an article on the KML

00:49:15.280 --> 00:49:16.190
documentation [INAUDIBLE].

00:49:16.190 --> 00:49:16.900
AUDIENCE: OK, cool.

00:49:16.900 --> 00:49:18.380
Thanks.

00:49:18.380 --> 00:49:20.850
AUDIENCE: I was just going to
answer the earlier question.

00:49:20.850 --> 00:49:26.940
There is an API called Java API
for KML, or JAK, J-A-K.

00:49:26.940 --> 00:49:29.820
And it's hosted on
Google Code.

00:49:29.820 --> 00:49:32.280
It's kind of an early version,
but I've been using it for

00:49:32.280 --> 00:49:33.550
about a year.

00:49:33.550 --> 00:49:36.070
It has a few quarks but
it does the job.

00:49:36.070 --> 00:49:36.890
MANO MARKS: That's great.

00:49:36.890 --> 00:49:40.420
Java API for KML or JAK--

00:49:40.420 --> 00:49:41.490
SEAN ASKAY: Hosted
on Google Code.

00:49:41.490 --> 00:49:43.060
MANO MARKS: --And hosted
on Google Code.

00:49:43.060 --> 00:49:47.130
By the way, Sean and I go
to a lot of scientific

00:49:47.130 --> 00:49:48.060
conferences as well.

00:49:48.060 --> 00:49:53.400
There is a Fortran library
for creating KML.

00:49:53.400 --> 00:49:56.040
Whatever language you're going
to ask about, there probably

00:49:56.040 --> 00:49:57.990
will be something out there.

00:49:57.990 --> 00:50:02.830
I'm not advocating Fortran as
a solution, but they say

00:50:02.830 --> 00:50:05.290
there's lots of math libraries
out there for it.

00:50:05.290 --> 00:50:05.920
Yes.

00:50:05.920 --> 00:50:12.180
AUDIENCE: For the offset of
polygons, now it's altogether.

00:50:12.180 --> 00:50:17.570
Can we go back to have the
regular one with points on

00:50:17.570 --> 00:50:19.490
demand when we need it?

00:50:19.490 --> 00:50:22.300
If we have slopes
on the polygons?

00:50:22.300 --> 00:50:24.870
Different nodes have different
elevations?

00:50:24.870 --> 00:50:25.280
SEAN ASKAY: Sure.

00:50:25.280 --> 00:50:28.150
So if you put different
elevations at each individual

00:50:28.150 --> 00:50:31.210
coordinate, the altitude offset
would just kind of

00:50:31.210 --> 00:50:32.400
overwrite those.

00:50:32.400 --> 00:50:33.850
It doesn't physically overwrite
them, it just

00:50:33.850 --> 00:50:34.990
ignores them.

00:50:34.990 --> 00:50:37.930
So if you were to just remove
that altitude offset, then all

00:50:37.930 --> 00:50:39.570
that altitude data would
still be preserved in

00:50:39.570 --> 00:50:40.545
the original polygon.

00:50:40.545 --> 00:50:40.900
So.

00:50:40.900 --> 00:50:43.000
MANO MARKS: Doesn't the altitude
or offset simply add

00:50:43.000 --> 00:50:45.350
the altitude to each
of the vertices?

00:50:45.350 --> 00:50:45.640
SEAN ASKAY: No.

00:50:45.640 --> 00:50:46.960
I thought it--

00:50:46.960 --> 00:50:47.860
well.

00:50:47.860 --> 00:50:49.860
I think it just overides
it, but--

00:50:49.860 --> 00:50:49.950
MANO MARKS: Hmm.

00:50:49.950 --> 00:50:51.650
There seems to be some--

00:50:51.650 --> 00:50:52.890
SEAN ASKAY: I can find
out for you.

00:50:52.890 --> 00:50:53.390
AUDIENCE: OK.

00:50:53.390 --> 00:50:57.380
So another one is if I have
a [UNINTELLIGIBLE]

00:50:57.380 --> 00:51:02.138
shapefile with z elevation
for each node.

00:51:02.138 --> 00:51:07.000
So is there a way to bring those
automatically with what

00:51:07.000 --> 00:51:09.950
the elevation-- what the z value
for each one of them?

00:51:09.950 --> 00:51:11.650
Is there something out
there that export

00:51:11.650 --> 00:51:12.590
[INTERPOSING VOICES]?

00:51:12.590 --> 00:51:18.130
MANO MARKS: If you convert a
shapefile directly to KML

00:51:18.130 --> 00:51:20.650
using, as Sean says,
Goodle, as I say [?

00:51:20.650 --> 00:51:24.190
G-D-A-L and as other people
say gDial, there's an

00:51:24.190 --> 00:51:27.860
open-source set of libraries
that you can use, just a

00:51:27.860 --> 00:51:32.090
command line, to do the
conversion, or you can do it

00:51:32.090 --> 00:51:34.530
in Google Earth Pro.

00:51:34.530 --> 00:51:35.740
So, yes.

00:51:35.740 --> 00:51:36.750
And that will bring along
[INTERPOSING VOICES].

00:51:36.750 --> 00:51:39.350
AUDIENCE: So Google Earth Pro,
when you import with it, it

00:51:39.350 --> 00:51:41.312
brings in also the elevation
value, right?

00:51:41.312 --> 00:51:42.614
For each node?

00:51:42.614 --> 00:51:43.050
MANO MARKS: Yes.

00:51:43.050 --> 00:51:43.970
SEAN ASKAY: It should, yeah.

00:51:43.970 --> 00:51:46.680
And the question was, just to
repeat, if you have z data

00:51:46.680 --> 00:51:49.130
values in your shapefile,
altitude values,

00:51:49.130 --> 00:51:50.330
will those be converted?

00:51:50.330 --> 00:51:54.490
And yeah, there are also
extensions for ArcGIS, like

00:51:54.490 --> 00:51:56.210
Arc2Earth, that will
do export and they

00:51:56.210 --> 00:51:57.540
may preserve z values.

00:51:57.540 --> 00:51:59.800
So I look at some of those
converters as options.

00:51:59.800 --> 00:52:01.550
MANO MARKS: And if you're
interested in that, Josh

00:52:01.550 --> 00:52:01.840
[? Lidney ?]

00:52:01.840 --> 00:52:04.980
and I are giving a talk tomorrow
afternoon on GIS in

00:52:04.980 --> 00:52:07.000
Google Earth and Maps.

00:52:07.000 --> 00:52:08.700
That's another talk.

00:52:08.700 --> 00:52:11.440
And also the folks
from Arc2Earth

00:52:11.440 --> 00:52:14.330
here in the Geo Sandbox.

00:52:14.330 --> 00:52:15.460
So, yes?

00:52:15.460 --> 00:52:18.210
AUDIENCE: Are there tools or
APIs essentially for creating

00:52:18.210 --> 00:52:19.690
vector tiles?

00:52:22.250 --> 00:52:24.650
I don't know if Google Maps for
web is using this, I know

00:52:24.650 --> 00:52:28.660
that Google Maps for mobile
has started to use vector

00:52:28.660 --> 00:52:30.480
tiles to save on bandwidth.

00:52:30.480 --> 00:52:30.630
[INTERPOSING VOICES]

00:52:30.630 --> 00:52:32.290
MANO MARKS: You mean to
create your own--

00:52:32.290 --> 00:52:33.820
AUDIENCE: --tools that will
take KML and put it into

00:52:33.820 --> 00:52:34.730
smaller [INTERPOSING VOICES].

00:52:34.730 --> 00:52:37.770
MANO MARKS: To create your own
tiles as opposed to using our

00:52:37.770 --> 00:52:40.130
KML layer or the Fusion
Table layer?

00:52:40.130 --> 00:52:42.990
AUDIENCE: Well some vector tiles
as opposed to using the

00:52:42.990 --> 00:52:44.470
image tiles.

00:52:44.470 --> 00:52:45.070
MANO MARKS: Oh, I see.

00:52:45.070 --> 00:52:47.940
So the question is are
there tools for

00:52:47.940 --> 00:52:51.410
creating vector tiles?

00:52:51.410 --> 00:52:54.670
Vector tiles, essentially for
KML, that's regionation.

00:52:54.670 --> 00:52:56.240
That's actually a concept
that's been

00:52:56.240 --> 00:52:57.260
around for a while.

00:52:57.260 --> 00:53:01.100
But there's been a lot of people
experimenting with

00:53:01.100 --> 00:53:04.310
passing vectors in the
same kind of--

00:53:04.310 --> 00:53:07.850
the concept was the same, that
you're packaging it into these

00:53:07.850 --> 00:53:13.920
tiles to a maps application
or to Google Earth.

00:53:13.920 --> 00:53:17.930
I don't actually know of
anything specifically in that

00:53:17.930 --> 00:53:20.400
area that's very good.

00:53:20.400 --> 00:53:21.590
Do you know of anything?

00:53:21.590 --> 00:53:23.310
SEAN ASKAY: Not so much
for Google products.

00:53:23.310 --> 00:53:25.250
There's some open-source mapping
tools that kind of

00:53:25.250 --> 00:53:28.460
have this concept of
tiled vector data.

00:53:28.460 --> 00:53:30.850
And I want to say one of the
ArcGIS extensions, maybe it

00:53:30.850 --> 00:53:33.230
was Arc2Earth, might do that.

00:53:33.230 --> 00:53:36.900
One of the trick you run into is
if you're tiling a polygon,

00:53:36.900 --> 00:53:38.000
you chop it up.

00:53:38.000 --> 00:53:39.480
You tile it up.

00:53:39.480 --> 00:53:43.000
And if you want like a border
along that polygon, now the

00:53:43.000 --> 00:53:46.130
original polygon that's been
chopped has lines through the

00:53:46.130 --> 00:53:47.230
cuts, right?

00:53:47.230 --> 00:53:49.190
So at the moment, Google
Earth doesn't really

00:53:49.190 --> 00:53:50.710
handle that very well.

00:53:50.710 --> 00:53:53.300
It's something we'd be
interested in looking at.

00:53:53.300 --> 00:53:54.020
But, yeah.

00:53:54.020 --> 00:53:57.270
So I can look online, but
offhand, I can't think of

00:53:57.270 --> 00:53:59.280
anything that works really
well for KML.

00:53:59.280 --> 00:54:01.780
There's definitely a need for
that kind of functionality,

00:54:01.780 --> 00:54:04.420
that kind of tool.

00:54:04.420 --> 00:54:04.850
All right.

00:54:04.850 --> 00:54:07.480
Any other questions?

00:54:07.480 --> 00:54:09.160
Three minutes to spare.

00:54:09.160 --> 00:54:10.150
Cool.

00:54:10.150 --> 00:54:10.760
Thank you, guys.

00:54:10.760 --> 00:54:13.270
Come up afterwards if you
have any questions.

