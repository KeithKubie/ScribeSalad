WEBVTT
Kind: captions
Language: en

00:00:00.250 --> 00:00:04.810
So the answer is no, that even with any

00:00:04.810 --> 00:00:07.860
of these restrictions, we still don't have a good

00:00:07.860 --> 00:00:11.400
definition. So, let's consider all the restrictions. So, the

00:00:11.400 --> 00:00:14.170
first one was, if everyone is friends with Alice. So

00:00:14.170 --> 00:00:15.810
that would only work if they don't have any

00:00:15.810 --> 00:00:18.870
other friends. Let's say this is Alice. We've got

00:00:18.870 --> 00:00:22.860
Bob and Charlie. They're both friends with Alice. But

00:00:22.860 --> 00:00:25.320
Bob is also friends with Charlie and Charlie is friends

00:00:25.320 --> 00:00:29.590
with Bob. That means that to figure out the popularity of

00:00:29.590 --> 00:00:32.830
Bob we need to know the popularity of Charlie. To figure

00:00:32.830 --> 00:00:35.000
out the popularity of Charlie we need to know the popularity

00:00:35.000 --> 00:00:37.870
of Alice as well as the popularity of Bob. So we're never

00:00:37.870 --> 00:00:40.390
going to get to a solution. We are going to keep

00:00:40.390 --> 00:00:44.200
bouncing back and forth between Bob and Charlie doing this. The

00:00:44.200 --> 00:00:46.810
second choice only if no one is friends with Alice. Well,

00:00:46.810 --> 00:00:50.850
if no one was friends with Alice, that would remove these links.

00:00:50.850 --> 00:00:53.730
It doesn't solve our problem. We're still not going to be able

00:00:53.730 --> 00:00:57.340
to give a popularity score for Bob and Charlie. The third choice

00:00:57.340 --> 00:01:00.370
only if there is a friendship path from everyone in the graph

00:01:00.370 --> 00:01:04.635
that eventually reaches Alice. So adding this link would provide that property,

00:01:04.635 --> 00:01:07.490
but it still doesn't solve our problem. It doesn't give us a

00:01:07.490 --> 00:01:09.930
way to figure out the popularity of Charlie, because to know that,

00:01:09.930 --> 00:01:12.250
we need to know the popularity of Bob, which we need to

00:01:12.250 --> 00:01:15.200
know the popularity of Charlie for. We still end up in this cycle.

00:01:16.420 --> 00:01:18.950
The final choice seems, possibly more promising. It says

00:01:18.950 --> 00:01:21.250
there are no cycles in the graph, so if

00:01:21.250 --> 00:01:24.590
we want to remove this cycle. We could do

00:01:24.590 --> 00:01:28.680
this. In this case, we'd be okay, right? We could

00:01:28.680 --> 00:01:31.050
figure out the popularity of Bob, by figuring out

00:01:31.050 --> 00:01:34.200
the popularity of Charlie, which depends on the popularity

00:01:34.200 --> 00:01:38.060
of Alice. Where we're not okay, is if Bob

00:01:38.060 --> 00:01:41.390
has another friend. Let's say Bob is friends with Diana.

00:01:41.390 --> 00:01:43.540
Well then, to figure out the popularity of Diana,

00:01:43.540 --> 00:01:46.990
we need to know the popularity of Bob. Where

00:01:46.990 --> 00:01:50.000
it breaks down is, suppose we also have Diana

00:01:50.000 --> 00:01:53.030
and Edgar, and Diana's friends with Edgar. To figure out

00:01:53.030 --> 00:01:57.328
the popularity score of Diana, we need to know the popularity score

00:01:57.328 --> 00:01:59.180
of Edgar. We don't have a cycle, but we don't have an answer

00:01:59.180 --> 00:02:02.305
either. To figure out the popularity of Edgar,. We are going to go through

00:02:02.305 --> 00:02:05.980
Edgar's friends, and the way the Python code is written. This could actually

00:02:05.980 --> 00:02:10.550
work, right? Because if we define popularity when you have no friends.

00:02:10.550 --> 00:02:12.960
Well, if the friends of p is empty, when we go through this

00:02:12.960 --> 00:02:16.510
loop, the score is going to be 0. So, if you answered there are

00:02:16.510 --> 00:02:21.330
no cycles. That's at least worth credit for this, that could be correct.

00:02:21.330 --> 00:02:24.650
In terms of the mathematical definition, it doesn't make very good

00:02:24.650 --> 00:02:26.950
sense. We still needed a way to know the popularity of

00:02:26.950 --> 00:02:30.050
Edgar. We've sort of defined things in this case to say,

00:02:30.050 --> 00:02:32.900
if you have no friends, your popularity score is zero. And

00:02:32.900 --> 00:02:36.480
the Python code will work for that. But it's not a

00:02:36.480 --> 00:02:41.080
good way to define popularity. So its very arbitrary to say

00:02:41.080 --> 00:02:44.270
we're going to make Alice the one whose popularity score is predefined

00:02:44.270 --> 00:02:46.580
as one. There is nothing Alice could do to make herself

00:02:46.580 --> 00:02:48.280
more popular. That's not very fair to

00:02:48.280 --> 00:02:50.550
Alice and it doesn't give us meaningful scores.

