WEBVTT
Kind: captions
Language: en

00:00:00.540 --> 00:00:04.749
 
[Music]

00:00:04.749 --> 00:00:04.759
 
 

00:00:04.759 --> 00:00:07.220
 
in the previous videos we've seen how

00:00:07.220 --> 00:00:07.230
in the previous videos we've seen how
 

00:00:07.230 --> 00:00:09.110
in the previous videos we've seen how
the oboe library makes it easy to play

00:00:09.110 --> 00:00:09.120
the oboe library makes it easy to play
 

00:00:09.120 --> 00:00:11.270
the oboe library makes it easy to play
low latency audio but what if you need

00:00:11.270 --> 00:00:11.280
low latency audio but what if you need
 

00:00:11.280 --> 00:00:13.850
low latency audio but what if you need
to record audio in this video I'll show

00:00:13.850 --> 00:00:13.860
to record audio in this video I'll show
 

00:00:13.860 --> 00:00:15.860
to record audio in this video I'll show
you how to setup low latency streams for

00:00:15.860 --> 00:00:15.870
you how to setup low latency streams for
 

00:00:15.870 --> 00:00:18.560
you how to setup low latency streams for
recording recording audio is done in

00:00:18.560 --> 00:00:18.570
recording recording audio is done in
 

00:00:18.570 --> 00:00:21.260
recording recording audio is done in
much the same way as playing audio the

00:00:21.260 --> 00:00:21.270
much the same way as playing audio the
 

00:00:21.270 --> 00:00:23.269
much the same way as playing audio the
main difference is that our audio stream

00:00:23.269 --> 00:00:23.279
main difference is that our audio stream
 

00:00:23.279 --> 00:00:26.330
main difference is that our audio stream
moves data from an audio device for

00:00:26.330 --> 00:00:26.340
moves data from an audio device for
 

00:00:26.340 --> 00:00:28.429
moves data from an audio device for
example the built-in microphone rather

00:00:28.429 --> 00:00:28.439
example the built-in microphone rather
 

00:00:28.439 --> 00:00:30.950
example the built-in microphone rather
than sending data to it before creating

00:00:30.950 --> 00:00:30.960
than sending data to it before creating
 

00:00:30.960 --> 00:00:32.810
than sending data to it before creating
an input audio stream you'll need to

00:00:32.810 --> 00:00:32.820
an input audio stream you'll need to
 

00:00:32.820 --> 00:00:34.700
an input audio stream you'll need to
make sure that your app has acquired the

00:00:34.700 --> 00:00:34.710
make sure that your app has acquired the
 

00:00:34.710 --> 00:00:38.240
make sure that your app has acquired the
record audio permission to create the

00:00:38.240 --> 00:00:38.250
record audio permission to create the
 

00:00:38.250 --> 00:00:39.889
record audio permission to create the
input audio stream we use an audio

00:00:39.889 --> 00:00:39.899
input audio stream we use an audio
 

00:00:39.899 --> 00:00:42.799
input audio stream we use an audio
stream builder settings stream direction

00:00:42.799 --> 00:00:42.809
stream builder settings stream direction
 

00:00:42.809 --> 00:00:44.959
stream builder settings stream direction
to input and the performance mode to low

00:00:44.959 --> 00:00:44.969
to input and the performance mode to low
 

00:00:44.969 --> 00:00:47.750
to input and the performance mode to low
latency now we can open the stream by

00:00:47.750 --> 00:00:47.760
latency now we can open the stream by
 

00:00:47.760 --> 00:00:49.400
latency now we can open the stream by
passing a reference to an audio stream

00:00:49.400 --> 00:00:49.410
passing a reference to an audio stream
 

00:00:49.410 --> 00:00:52.459
passing a reference to an audio stream
pointer after checking that it opened

00:00:52.459 --> 00:00:52.469
pointer after checking that it opened
 

00:00:52.469 --> 00:00:54.110
pointer after checking that it opened
successfully you can start the stream

00:00:54.110 --> 00:00:54.120
successfully you can start the stream
 

00:00:54.120 --> 00:00:56.569
successfully you can start the stream
data from the default recording device

00:00:56.569 --> 00:00:56.579
data from the default recording device
 

00:00:56.579 --> 00:01:01.310
data from the default recording device
will start moving into the stream there

00:01:01.310 --> 00:01:01.320
will start moving into the stream there
 

00:01:01.320 --> 00:01:02.840
will start moving into the stream there
are two ways we can read this data

00:01:02.840 --> 00:01:02.850
are two ways we can read this data
 

00:01:02.850 --> 00:01:05.840
are two ways we can read this data
either directly or using a callback it's

00:01:05.840 --> 00:01:05.850
either directly or using a callback it's
 

00:01:05.850 --> 00:01:07.550
either directly or using a callback it's
possible to obtain the lowest latency

00:01:07.550 --> 00:01:07.560
possible to obtain the lowest latency
 

00:01:07.560 --> 00:01:09.980
possible to obtain the lowest latency
using both approaches I'll demonstrate

00:01:09.980 --> 00:01:09.990
using both approaches I'll demonstrate
 

00:01:09.990 --> 00:01:11.660
using both approaches I'll demonstrate
how to read directly from the stream

00:01:11.660 --> 00:01:11.670
how to read directly from the stream
 

00:01:11.670 --> 00:01:13.520
how to read directly from the stream
since the callback method was covered in

00:01:13.520 --> 00:01:13.530
since the callback method was covered in
 

00:01:13.530 --> 00:01:16.580
since the callback method was covered in
the previous video the method we need is

00:01:16.580 --> 00:01:16.590
the previous video the method we need is
 

00:01:16.590 --> 00:01:19.100
the previous video the method we need is
unsurprisingly called read it takes

00:01:19.100 --> 00:01:19.110
unsurprisingly called read it takes
 

00:01:19.110 --> 00:01:22.219
unsurprisingly called read it takes
three parameters buffer is an array into

00:01:22.219 --> 00:01:22.229
three parameters buffer is an array into
 

00:01:22.229 --> 00:01:24.950
three parameters buffer is an array into
which the audio data will be read num

00:01:24.950 --> 00:01:24.960
which the audio data will be read num
 

00:01:24.960 --> 00:01:27.140
which the audio data will be read num
frames is the number of audio frames to

00:01:27.140 --> 00:01:27.150
frames is the number of audio frames to
 

00:01:27.150 --> 00:01:29.600
frames is the number of audio frames to
read and timeout nanoseconds is the

00:01:29.600 --> 00:01:29.610
read and timeout nanoseconds is the
 

00:01:29.610 --> 00:01:31.460
read and timeout nanoseconds is the
maximum number of nanoseconds which the

00:01:31.460 --> 00:01:31.470
maximum number of nanoseconds which the
 

00:01:31.470 --> 00:01:34.520
maximum number of nanoseconds which the
method will block for if you specify 0

00:01:34.520 --> 00:01:34.530
method will block for if you specify 0
 

00:01:34.530 --> 00:01:36.440
method will block for if you specify 0
here the method will return immediately

00:01:36.440 --> 00:01:36.450
here the method will return immediately
 

00:01:36.450 --> 00:01:39.020
here the method will return immediately
copying only the data that was currently

00:01:39.020 --> 00:01:39.030
copying only the data that was currently
 

00:01:39.030 --> 00:01:41.390
copying only the data that was currently
available in the streams buffer this is

00:01:41.390 --> 00:01:41.400
available in the streams buffer this is
 

00:01:41.400 --> 00:01:42.980
available in the streams buffer this is
useful if you don't want to block the

00:01:42.980 --> 00:01:42.990
useful if you don't want to block the
 

00:01:42.990 --> 00:01:46.340
useful if you don't want to block the
current thread so let's say we wanted to

00:01:46.340 --> 00:01:46.350
current thread so let's say we wanted to
 

00:01:46.350 --> 00:01:48.679
current thread so let's say we wanted to
read 2 milliseconds of audio data from a

00:01:48.679 --> 00:01:48.689
read 2 milliseconds of audio data from a
 

00:01:48.689 --> 00:01:52.280
read 2 milliseconds of audio data from a
16-bit mono audio stream we can do this

00:01:52.280 --> 00:01:52.290
16-bit mono audio stream we can do this
 

00:01:52.290 --> 00:01:55.490
16-bit mono audio stream we can do this
using a blocking read start by creating

00:01:55.490 --> 00:01:55.500
using a blocking read start by creating
 

00:01:55.500 --> 00:01:57.350
using a blocking read start by creating
an array to store the frames of audio

00:01:57.350 --> 00:01:57.360
an array to store the frames of audio
 

00:01:57.360 --> 00:02:00.289
an array to store the frames of audio
the amount of data we need to store will

00:02:00.289 --> 00:02:00.299
the amount of data we need to store will
 

00:02:00.299 --> 00:02:02.630
the amount of data we need to store will
depend on the stream sample rate the

00:02:02.630 --> 00:02:02.640
depend on the stream sample rate the
 

00:02:02.640 --> 00:02:04.700
depend on the stream sample rate the
timeout should be longer than the amount

00:02:04.700 --> 00:02:04.710
timeout should be longer than the amount
 

00:02:04.710 --> 00:02:07.340
timeout should be longer than the amount
of audio we want to read in this case

00:02:07.340 --> 00:02:07.350
of audio we want to read in this case
 

00:02:07.350 --> 00:02:09.589
of audio we want to read in this case
we'll use 3 milliseconds and convert it

00:02:09.589 --> 00:02:09.599
we'll use 3 milliseconds and convert it
 

00:02:09.599 --> 00:02:10.690
we'll use 3 milliseconds and convert it
to nanoseconds

00:02:10.690 --> 00:02:10.700
to nanoseconds
 

00:02:10.700 --> 00:02:13.370
to nanoseconds
incidentally ogo provides a number of

00:02:13.370 --> 00:02:13.380
incidentally ogo provides a number of
 

00:02:13.380 --> 00:02:15.140
incidentally ogo provides a number of
for constants for working with different

00:02:15.140 --> 00:02:15.150
for constants for working with different
 

00:02:15.150 --> 00:02:18.050
for constants for working with different
time units before we can read from our

00:02:18.050 --> 00:02:18.060
time units before we can read from our
 

00:02:18.060 --> 00:02:19.970
time units before we can read from our
stream we need to clear out any stale

00:02:19.970 --> 00:02:19.980
stream we need to clear out any stale
 

00:02:19.980 --> 00:02:21.500
stream we need to clear out any stale
data which might already be in the

00:02:21.500 --> 00:02:21.510
data which might already be in the
 

00:02:21.510 --> 00:02:24.170
data which might already be in the
streams buffer to do this we just

00:02:24.170 --> 00:02:24.180
streams buffer to do this we just
 

00:02:24.180 --> 00:02:26.180
streams buffer to do this we just
perform non-blocking reads of the whole

00:02:26.180 --> 00:02:26.190
perform non-blocking reads of the whole
 

00:02:26.190 --> 00:02:29.060
perform non-blocking reads of the whole
buffer until it's empty now when we've

00:02:29.060 --> 00:02:29.070
buffer until it's empty now when we've
 

00:02:29.070 --> 00:02:30.530
buffer until it's empty now when we've
read from the stream we know we're

00:02:30.530 --> 00:02:30.540
read from the stream we know we're
 

00:02:30.540 --> 00:02:32.830
read from the stream we know we're
reading the most current audio data

00:02:32.830 --> 00:02:32.840
reading the most current audio data
 

00:02:32.840 --> 00:02:35.480
reading the most current audio data
after Reed is completed we need to check

00:02:35.480 --> 00:02:35.490
after Reed is completed we need to check
 

00:02:35.490 --> 00:02:38.420
after Reed is completed we need to check
the result if it was okay then result

00:02:38.420 --> 00:02:38.430
the result if it was okay then result
 

00:02:38.430 --> 00:02:40.040
the result if it was okay then result
that value will contain the number of

00:02:40.040 --> 00:02:40.050
that value will contain the number of
 

00:02:40.050 --> 00:02:42.010
that value will contain the number of
frames which were copied into our buffer

00:02:42.010 --> 00:02:42.020
frames which were copied into our buffer
 

00:02:42.020 --> 00:02:44.930
frames which were copied into our buffer
to read more data surround this block in

00:02:44.930 --> 00:02:44.940
to read more data surround this block in
 

00:02:44.940 --> 00:02:47.510
to read more data surround this block in
a while loop this approach allows us to

00:02:47.510 --> 00:02:47.520
a while loop this approach allows us to
 

00:02:47.520 --> 00:02:49.430
a while loop this approach allows us to
process small buffers of up-to-date

00:02:49.430 --> 00:02:49.440
process small buffers of up-to-date
 

00:02:49.440 --> 00:02:51.710
process small buffers of up-to-date
audio data for processing and moving

00:02:51.710 --> 00:02:51.720
audio data for processing and moving
 

00:02:51.720 --> 00:02:54.500
audio data for processing and moving
elsewhere after we're done we must close

00:02:54.500 --> 00:02:54.510
elsewhere after we're done we must close
 

00:02:54.510 --> 00:02:56.120
elsewhere after we're done we must close
the stream and after a stream has been

00:02:56.120 --> 00:02:56.130
the stream and after a stream has been
 

00:02:56.130 --> 00:02:59.390
the stream and after a stream has been
closed it can no longer be accessed this

00:02:59.390 --> 00:02:59.400
closed it can no longer be accessed this
 

00:02:59.400 --> 00:03:01.520
closed it can no longer be accessed this
is a very simple example of how to

00:03:01.520 --> 00:03:01.530
is a very simple example of how to
 

00:03:01.530 --> 00:03:04.730
is a very simple example of how to
record audio for more complex examples

00:03:04.730 --> 00:03:04.740
record audio for more complex examples
 

00:03:04.740 --> 00:03:06.620
record audio for more complex examples
including how to implement synchronous

00:03:06.620 --> 00:03:06.630
including how to implement synchronous
 

00:03:06.630 --> 00:03:08.450
including how to implement synchronous
recording and playback check out the

00:03:08.450 --> 00:03:08.460
recording and playback check out the
 

00:03:08.460 --> 00:03:11.210
recording and playback check out the
live effects sample on get up you can

00:03:11.210 --> 00:03:11.220
live effects sample on get up you can
 

00:03:11.220 --> 00:03:12.920
live effects sample on get up you can
also check out the other videos in this

00:03:12.920 --> 00:03:12.930
also check out the other videos in this
 

00:03:12.930 --> 00:03:15.080
also check out the other videos in this
series the first video is an

00:03:15.080 --> 00:03:15.090
series the first video is an
 

00:03:15.090 --> 00:03:16.970
series the first video is an
introduction to oboe shows by low

00:03:16.970 --> 00:03:16.980
introduction to oboe shows by low
 

00:03:16.980 --> 00:03:19.100
introduction to oboe shows by low
latency audio is important and the

00:03:19.100 --> 00:03:19.110
latency audio is important and the
 

00:03:19.110 --> 00:03:21.110
latency audio is important and the
second video shows you how to create low

00:03:21.110 --> 00:03:21.120
second video shows you how to create low
 

00:03:21.120 --> 00:03:23.210
second video shows you how to create low
latency audio streams for playing sound

00:03:23.210 --> 00:03:23.220
latency audio streams for playing sound
 

00:03:23.220 --> 00:03:25.250
latency audio streams for playing sound
that's all for now if you have any

00:03:25.250 --> 00:03:25.260
that's all for now if you have any
 

00:03:25.260 --> 00:03:27.410
that's all for now if you have any
questions issues or feature requests

00:03:27.410 --> 00:03:27.420
questions issues or feature requests
 

00:03:27.420 --> 00:03:29.720
questions issues or feature requests
please post them in the issue section of

00:03:29.720 --> 00:03:29.730
please post them in the issue section of
 

00:03:29.730 --> 00:03:32.000
please post them in the issue section of
the oboe github site we'd really love to

00:03:32.000 --> 00:03:32.010
the oboe github site we'd really love to
 

00:03:32.010 --> 00:03:34.310
the oboe github site we'd really love to
hear from you good luck and go make some

00:03:34.310 --> 00:03:34.320
hear from you good luck and go make some
 

00:03:34.320 --> 00:03:37.560
hear from you good luck and go make some
noise

00:03:37.560 --> 00:03:37.570
 
 

00:03:37.570 --> 00:03:39.830
 
[Music]

00:03:39.830 --> 00:03:39.840
[Music]
 

00:03:39.840 --> 00:03:41.900
[Music]
you

