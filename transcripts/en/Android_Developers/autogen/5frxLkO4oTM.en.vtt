WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.405
 <i>Android patterns for performance</i> 

00:00:02.405 --> 00:00:04.811
 External libraries may provide important time savings. 

00:00:04.811 --> 00:00:06.685
 It allows us to do great things about our application 

00:00:06.685 --> 00:00:08.890
 Without having to write any posts by ourselves, 

00:00:09.180 --> 00:00:10.490
 This is a very big benefit. 

00:00:10.790 --> 00:00:13.870
 But the useless thing is to inflate the code. 

00:00:14.134 --> 00:00:15.180
 I'm David East. 

00:00:15.180 --> 00:00:17.133
 You can easily get everything you need from a library 

00:00:17.133 --> 00:00:18.700
 Without inflating the code. 

00:00:18.880 --> 00:00:20.260
 But to go back a step back. 

00:00:20.260 --> 00:00:22.580
 If you're creating an easy-to-use, high-performance mobile app 

00:00:22.580 --> 00:00:24.772
 With a small team and perhaps a small budget, 

00:00:24.772 --> 00:00:27.590
 You may be using a lot of external Android libraries 

00:00:27.590 --> 00:00:29.110
 To help you with the difficult things. 

00:00:29.810 --> 00:00:30.980
 This is fine. 

00:00:30.980 --> 00:00:32.700
 It is actually a good idea. 

00:00:32.700 --> 00:00:34.450
 Many libraries have undergone several tests 

00:00:34.450 --> 00:00:36.305
 And proved its ability to handle production pressure. 

00:00:36.575 --> 00:00:37.751
 But the problem is 

00:00:37.751 --> 00:00:39.750
 You may have to import the entire library 

00:00:39.750 --> 00:00:41.420
 When you plan to use only a subset. 

00:00:41.880 --> 00:00:43.940
 The result is called "code inflation". 

00:00:44.220 --> 00:00:47.560
 Additional code paths are converted to push-ups with APK, 

00:00:47.980 --> 00:00:49.946
 The code inflates is a serious issue. 

00:00:49.946 --> 00:00:52.870
 At its simplest level, increase the size of your compiled code. 

00:00:53.360 --> 00:00:55.550
 This amplifies the APK package that the user should download. 

00:00:56.100 --> 00:00:59.840
 The most disturbing thing is the alarming 65k limit. 

00:01:00.170 --> 00:01:02.460
 Android time assigns a digital ID 

00:01:02.460 --> 00:01:03.480
 For each method. 

00:01:03.480 --> 00:01:05.710
 This ID is 16 bits. 

00:01:05.950 --> 00:01:08.340
 So if you have more than 2 to 16 methods in your app, 

00:01:08.810 --> 00:01:10.010
 It will not be aggregated. 

00:01:10.010 --> 00:01:12.690
 The only way to avoid this is to solve the new MultiDex. 

00:01:13.140 --> 00:01:15.600
 You do not need that, believe me. 

00:01:15.960 --> 00:01:18.830
 They are as fun as going to a dentist. 

00:01:19.430 --> 00:01:21.880
 Fortunately, there is a tool among the Android Toolkit 

00:01:21.880 --> 00:01:23.970
 It is great at locating unused code 

00:01:23.970 --> 00:01:25.500
 And removed from the release. 

00:01:26.010 --> 00:01:27.190
 Proguard is a tool 

00:01:27.190 --> 00:01:31.450
 Reduce, improve, and hide your code instructions by removing unused parts. 

00:01:31.950 --> 00:01:33.899
 It also renames categories, fields, and styles 

00:01:33.899 --> 00:01:35.360
 With uncommon names 

00:01:35.360 --> 00:01:37.210
 To reverse the code reverse geometrically. 

00:01:37.600 --> 00:01:39.230
 But let's take this in another video. 

00:01:39.820 --> 00:01:41.920
 Proguard is a very wonderful tool. 

00:01:42.260 --> 00:01:44.267
 Take a look at the Google I / O 2015 app. 

00:01:44.547 --> 00:01:46.380
 It is a great application with lots of functions 

00:01:46.380 --> 00:01:48.050
 Which use multiple shared libraries. 

00:01:48.330 --> 00:01:51.110
 When you create a version without shrinking Proguard for the code, 

00:01:51.110 --> 00:01:53.720
 It will produce about 8.4 megabytes of code. 

00:01:53.720 --> 00:01:55.537
 But with Proguard, only 4.1 results. 

00:01:56.117 --> 00:01:59.600
 This is very cool because of how easy it is to set up and shrink this code. 

00:02:00.160 --> 00:02:01.690
 To run the ProGuard shrink code 

00:02:01.690 --> 00:02:04.864
 All you have to do is set Minify Enabled to "True" in the Gradle settings. 

00:02:05.274 --> 00:02:06.440
 Then, when you create your app, 

00:02:06.440 --> 00:02:08.330
 All unused code will be removed for you. 

00:02:09.440 --> 00:02:11.100
 But Proguard is not perfect. 

00:02:11.700 --> 00:02:14.470
 Despite its remarkable performance in detecting most uses, 

00:02:14.890 --> 00:02:17.520
 Its performance is not as good as screening other cases, 

00:02:17.520 --> 00:02:19.192
 Such as the code used for reflection. 

00:02:19.192 --> 00:02:21.120
 This may lead to false positive results; 

00:02:21.400 --> 00:02:23.450
 Some code is removed and some are left, 

00:02:24.280 --> 00:02:26.330
 Which means that you will have to adjust Proguard settings 

00:02:26.330 --> 00:02:28.220
 Based on listed libraries. 

00:02:28.660 --> 00:02:30.460
 Some may require special rules 

00:02:30.460 --> 00:02:32.150
 To ensure things work properly. 

00:02:32.560 --> 00:02:36.050
 So plan for your future well and look at the documents. 

00:02:36.610 --> 00:02:38.980
 Go to developer.android.com 

00:02:38.980 --> 00:02:40.620
 Read ProGuard Official Documents. 

00:02:40.900 --> 00:02:42.270
 Without joking, go and read all that. 

00:02:42.540 --> 00:02:44.290
 I think it is suitable for reading before bedtime. 

00:02:44.760 --> 00:02:47.430
 When you finish reading all the documents or taking a nap, 

00:02:47.430 --> 00:02:50.370
 Count and watch other Android Performance Patterns videos. 

00:02:50.700 --> 00:02:52.770
 Do not miss joining the Google+ community 

00:02:52.770 --> 00:02:55.460
 Share your tips on Proguard with other developers. 

00:02:55.940 --> 00:02:58.380
 Consider small things but do not panic. 

00:02:58.380 --> 00:03:00.390
 Always remember that performance is important. 

