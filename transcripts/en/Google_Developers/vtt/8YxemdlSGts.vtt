WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.864
[MUSIC PLAYING]

00:00:09.190 --> 00:00:10.080
BEN WEISS: Hi.

00:00:10.080 --> 00:00:10.910
My name is Ben.

00:00:10.910 --> 00:00:14.305
[APPLAUSE]

00:00:15.280 --> 00:00:17.540
And today I'm here
to talk to you

00:00:17.540 --> 00:00:21.650
about modularization of your
app and Android Instant Apps.

00:00:21.650 --> 00:00:25.340
I work in London on the
Android Developer Relations

00:00:25.340 --> 00:00:27.650
team as an engineer, and
I spend a fair amount

00:00:27.650 --> 00:00:29.540
of my time working
with the Instant Apps

00:00:29.540 --> 00:00:31.520
team and the early
access partners,

00:00:31.520 --> 00:00:33.690
as well as on samples.

00:00:33.690 --> 00:00:38.150
So at Google I/O 2016, we
introduced Android Instant

00:00:38.150 --> 00:00:41.570
Apps, and we then closely worked
with a set of early access

00:00:41.570 --> 00:00:45.020
partners and made the SDK
generally available this year

00:00:45.020 --> 00:00:46.370
at Google I/O.

00:00:46.370 --> 00:00:49.710
So everyone now can
build an Instant App.

00:00:49.710 --> 00:00:52.620
Android Instant Apps follows
three main principles.

00:00:52.620 --> 00:00:56.300
That's discoverability,
performance, as well as

00:00:56.300 --> 00:00:57.770
security and privacy.

00:00:57.770 --> 00:01:01.070
Today I'm going to take you
through these key principles,

00:01:01.070 --> 00:01:05.010
and let's get started.

00:01:05.010 --> 00:01:08.810
First off, discoverability--
discovering an app sometimes

00:01:08.810 --> 00:01:10.820
can take a little bit of time.

00:01:10.820 --> 00:01:12.290
What happens every
now and then is

00:01:12.290 --> 00:01:13.920
you find an app
either by browsing

00:01:13.920 --> 00:01:16.640
in the Play Store, or
somebody recommends it,

00:01:16.640 --> 00:01:21.440
or you literally just search for
apps and specifically find it,

00:01:21.440 --> 00:01:29.100
either with the Pixel
Launcher or in another way.

00:01:29.100 --> 00:01:31.860
Well, that's cool, but
then you install it,

00:01:31.860 --> 00:01:33.540
and sometimes you
forget about it.

00:01:33.540 --> 00:01:35.550
And through one or
the other mechanism,

00:01:35.550 --> 00:01:40.250
you rediscover the app,
and then you use it.

00:01:40.250 --> 00:01:42.520
That's the trodden
path that developers

00:01:42.520 --> 00:01:46.150
have to deal with so
far, and users actively

00:01:46.150 --> 00:01:47.501
have this as well.

00:01:47.501 --> 00:01:48.250
It's really great.

00:01:48.250 --> 00:01:51.100
It works well, but we
can do a little bit

00:01:51.100 --> 00:01:52.620
better than that as well.

00:01:52.620 --> 00:01:55.880
So what happens is
there is basically

00:01:55.880 --> 00:01:58.820
a funnel from the
user finds the app.

00:01:58.820 --> 00:02:00.620
Then they actually read
through everything,

00:02:00.620 --> 00:02:02.870
and they decide to
install the app.

00:02:02.870 --> 00:02:05.220
And in the end, they use
the app in a longer time.

00:02:05.220 --> 00:02:07.760
So you've got a proper
retention rate on that.

00:02:07.760 --> 00:02:09.650
Well, like I said,
there is quite a lot

00:02:09.650 --> 00:02:11.990
of friction in
that, and we figured

00:02:11.990 --> 00:02:14.240
there has to be a better
way to deal with this.

00:02:14.240 --> 00:02:17.240
And we wanted to reduce this.

00:02:17.240 --> 00:02:22.370
So let's take a look at the
process with Instant Apps.

00:02:22.370 --> 00:02:25.610
Say Joy sends me a
link to BuzzFeed.

00:02:25.610 --> 00:02:28.670
I'm like, oh, cool, I wanted
to see something about cooking.

00:02:28.670 --> 00:02:30.530
And I click the link.

00:02:30.530 --> 00:02:33.220
What then happens is
the app, part of the app

00:02:33.220 --> 00:02:37.550
gets downloaded instantly, and
I have the native app experience

00:02:37.550 --> 00:02:39.170
on my device.

00:02:39.170 --> 00:02:41.130
No friction whatsoever.

00:02:41.130 --> 00:02:43.280
I don't have to install the app.

00:02:43.280 --> 00:02:46.460
It's done automatically
with the magic that the Play

00:02:46.460 --> 00:02:49.520
Services provide, as well as
the magic that's happening

00:02:49.520 --> 00:02:51.210
on your device with that.

00:02:51.210 --> 00:02:52.220
Simple.

00:02:52.220 --> 00:02:57.550
So we launched with 50
early access partners

00:02:57.550 --> 00:03:01.220
from across a multitude of
industries, and like I said,

00:03:01.220 --> 00:03:04.840
this SDK is now generally
available to every developer.

00:03:04.840 --> 00:03:11.760
And the amount of devices that
are enabled for Android Instant

00:03:11.760 --> 00:03:16.550
Apps recently has passed
half a billion devices.

00:03:16.550 --> 00:03:20.690
That is quite a lot, and
it's still working upwards

00:03:20.690 --> 00:03:23.120
trajectory, so it's going to
be even more in the future.

00:03:25.660 --> 00:03:27.507
Well, that's all cool
and stuff, but how

00:03:27.507 --> 00:03:29.340
does it work from a
developer's perspective?

00:03:29.340 --> 00:03:32.140
Because I take that many of you
in here are Android developers

00:03:32.140 --> 00:03:33.737
and want to know
how you do that.

00:03:33.737 --> 00:03:35.820
So let's take a look at
the high level developer's

00:03:35.820 --> 00:03:39.150
overview of how this works.

00:03:39.150 --> 00:03:41.550
Basically, your app is
just a monolithic thing.

00:03:41.550 --> 00:03:43.841
That's the one thing that
gets installed on the device.

00:03:43.841 --> 00:03:46.560
That's the one thing you
actually have to care about.

00:03:46.560 --> 00:03:49.010
That was the old world, and
that's the installable app

00:03:49.010 --> 00:03:49.510
world.

00:03:49.510 --> 00:03:50.870
That's fine.

00:03:50.870 --> 00:03:52.510
But let's take a
closer look at that.

00:03:52.510 --> 00:03:54.680
Basically, your app consists
of multiple features,

00:03:54.680 --> 00:03:58.254
and those features sometimes
have commonalities.

00:03:58.254 --> 00:03:59.920
And you can take all
those commonalities

00:03:59.920 --> 00:04:02.230
and refactor them
in multiple modules.

00:04:02.230 --> 00:04:05.160
Say you've got the Feature
A, you've got a Feature B.

00:04:05.160 --> 00:04:08.290
And those commonalities, you
put them in a base feature

00:04:08.290 --> 00:04:10.210
that those other
features rely on.

00:04:13.460 --> 00:04:16.040
Still, the build output
for your installable app

00:04:16.040 --> 00:04:19.160
will be one APK with all
those features combined,

00:04:19.160 --> 00:04:22.000
and that's the same thing that
will happen on the device.

00:04:22.000 --> 00:04:25.410
So you have this one APK that
gets installed on the device.

00:04:25.410 --> 00:04:28.410
Within the Instant App
world, what will happen,

00:04:28.410 --> 00:04:31.020
instead of getting
an APK, you get

00:04:31.020 --> 00:04:33.360
a zip file with a
multitude of APKs

00:04:33.360 --> 00:04:36.060
in there, which then can be
uploaded to the Play Store.

00:04:36.060 --> 00:04:38.400
And the Play Store
decides, depending

00:04:38.400 --> 00:04:42.570
on the length of user
clicks, which part of that

00:04:42.570 --> 00:04:49.020
will be installed on the
device, while not hogging

00:04:49.020 --> 00:04:51.370
too much of the bandwidth
that is available,

00:04:51.370 --> 00:04:54.040
as well as space on the device.

00:04:54.040 --> 00:04:58.030
So let's see how this
works on a device.

00:04:58.030 --> 00:04:59.920
When you click on
Feature A, what happens

00:04:59.920 --> 00:05:01.700
is the base module
gets installed,

00:05:01.700 --> 00:05:05.440
as well as the Feature A. When
a user, on the other hand,

00:05:05.440 --> 00:05:09.070
clicks through the sideways
on Feature B, what happens is

00:05:09.070 --> 00:05:11.050
only Feature B gets installed.

00:05:11.050 --> 00:05:13.210
But if the user clicks
first on Feature A,

00:05:13.210 --> 00:05:16.780
then works his way through to
the next feature, both of those

00:05:16.780 --> 00:05:19.810
can be installed, so everything,
every part of your app

00:05:19.810 --> 00:05:21.850
can be installed on the
device at the same time.

00:05:21.850 --> 00:05:24.100
So the users won't really
notice the difference, other

00:05:24.100 --> 00:05:27.520
than they don't have to
download the app manually and go

00:05:27.520 --> 00:05:31.220
through the whole search
and discovery process.

00:05:31.220 --> 00:05:34.120
So to recap that, you've got
a more fine-grained control

00:05:34.120 --> 00:05:37.360
over features with
cleaner edges.

00:05:37.360 --> 00:05:39.700
And with that
process, you also can

00:05:39.700 --> 00:05:43.420
decrease the size of your
app, which is good for users

00:05:43.420 --> 00:05:44.650
as well.

00:05:44.650 --> 00:05:46.300
And with the new
Gradle plugins, you

00:05:46.300 --> 00:05:48.540
improve your build
times, as well as,

00:05:48.540 --> 00:05:51.580
as a side effect, you improve
the testability of your app

00:05:51.580 --> 00:05:54.610
and can improve the architecture
with that as well, which

00:05:54.610 --> 00:05:57.415
will increase your
velocity during development

00:05:57.415 --> 00:05:58.540
in the middle and long run.

00:06:01.420 --> 00:06:04.350
In the end, it doesn't
really matter what you have.

00:06:04.350 --> 00:06:09.120
It's one app, be it before it's
an installed app, as an Instant

00:06:09.120 --> 00:06:11.100
App, or afterwards.

00:06:11.100 --> 00:06:13.080
So you can essentially
run the same code,

00:06:13.080 --> 00:06:14.760
and don't have to
rewrite everything.

00:06:14.760 --> 00:06:16.650
There is some refactoring
involved, though,

00:06:16.650 --> 00:06:19.110
but I'll come to that
a little bit later.

00:06:21.770 --> 00:06:23.740
Let's take a look
at the requirements

00:06:23.740 --> 00:06:26.320
and the specifications for
Instant Apps on your device

00:06:26.320 --> 00:06:29.300
as well as on a couple of
tools that we can use on that.

00:06:29.300 --> 00:06:33.460
So it's available to devices
running Lollipop and above,

00:06:33.460 --> 00:06:35.250
which is already a lot.

00:06:35.250 --> 00:06:38.730
And with Android Studio
3.0, we introduced a set

00:06:38.730 --> 00:06:41.940
of tools and plug-ins
that developers

00:06:41.940 --> 00:06:45.480
can use to make Android
Instant Apps work for them.

00:06:45.480 --> 00:06:48.024
There is the Instant Apps
SDK that you can download.

00:06:48.024 --> 00:06:49.440
Also, there is new
Gradle plug-ins

00:06:49.440 --> 00:06:51.630
for feature modules,
which I just mentioned,

00:06:51.630 --> 00:06:54.120
as well as for the
Instant App module, which

00:06:54.120 --> 00:06:58.357
we will take a look under
those a little bit later.

00:06:58.357 --> 00:06:59.940
Also, there's the
App Links Assistant,

00:06:59.940 --> 00:07:03.000
which allows you to output
a file that can easily

00:07:03.000 --> 00:07:05.940
upload to your server
to make the matching

00:07:05.940 --> 00:07:11.070
possible between the
local app and your domain.

00:07:11.070 --> 00:07:13.350
Also, the emulator supports
Android Instant Apps.

00:07:13.350 --> 00:07:15.960
All you have to do is set
up a test account on that,

00:07:15.960 --> 00:07:17.940
and you can easily
work with Instant Apps

00:07:17.940 --> 00:07:22.490
without having to have a
device that is enabled with it.

00:07:22.490 --> 00:07:24.800
Also, there's a refactoring
tool, which allows you

00:07:24.800 --> 00:07:27.690
to, for example,
take one activity,

00:07:27.690 --> 00:07:30.290
click on the refactoring
action, and instead

00:07:30.290 --> 00:07:33.650
of having to go through this
refactoring step by step

00:07:33.650 --> 00:07:35.210
manually, you can
just say, I want

00:07:35.210 --> 00:07:37.244
to refactor this into
a module, and that

00:07:37.244 --> 00:07:39.410
with all the code that's
associated with it, as well

00:07:39.410 --> 00:07:42.380
as the resources, can be
put into a separate module.

00:07:42.380 --> 00:07:45.980
And then you can start working
with the couple of things

00:07:45.980 --> 00:07:48.880
that you have to do to make your
app accessible as an Instant

00:07:48.880 --> 00:07:49.380
App.

00:07:52.020 --> 00:07:53.700
So yeah, what do
we actually have

00:07:53.700 --> 00:07:59.720
to do to get there, to
make my app instant?

00:07:59.720 --> 00:08:02.360
So like I said, there might
be some refactoring involved,

00:08:02.360 --> 00:08:03.860
if you already have
an existing app,

00:08:03.860 --> 00:08:06.615
depending on the
structure of your app.

00:08:06.615 --> 00:08:08.240
Let's take a look at
a couple of things

00:08:08.240 --> 00:08:11.960
that you definitely will have
to do without going in too deep

00:08:11.960 --> 00:08:14.480
into depth of the
refactoring of the app.

00:08:14.480 --> 00:08:15.980
One of the things
that you have--

00:08:15.980 --> 00:08:17.699
every app has is a
settings.gradle file,

00:08:17.699 --> 00:08:18.740
if you build with Gradle.

00:08:18.740 --> 00:08:21.230
Otherwise, there is
currently no support

00:08:21.230 --> 00:08:24.440
on other built systems for that.

00:08:24.440 --> 00:08:27.260
But for the settings.gradle
file, all you have to do

00:08:27.260 --> 00:08:30.530
is delete your currently
existing app module,

00:08:30.530 --> 00:08:32.900
and then replace that
with base modules that you

00:08:32.900 --> 00:08:37.190
have refactored as well
as the feature modules,

00:08:37.190 --> 00:08:41.960
and have one new module that's
the installed app, which

00:08:41.960 --> 00:08:45.680
basically correlates to
your existing app module

00:08:45.680 --> 00:08:50.540
that you had before, and add a
new module for the Instant App.

00:08:50.540 --> 00:08:55.160
The only two relevant
modules for the device output

00:08:55.160 --> 00:08:57.909
are the installed and
the Instant App module.

00:08:57.909 --> 00:08:59.700
But let's take a look
through step by step.

00:08:59.700 --> 00:09:02.960
First off, the base module.

00:09:02.960 --> 00:09:05.690
In order to make sure that the
base module works as intended,

00:09:05.690 --> 00:09:07.642
you have to mark it
as a base feature.

00:09:07.642 --> 00:09:10.100
That's the only thing you have
to do specifically for that.

00:09:10.100 --> 00:09:13.880
Also, apply the
feature plug-in to have

00:09:13.880 --> 00:09:18.810
it either output an APK, if you
work in the Instant App world,

00:09:18.810 --> 00:09:23.210
or a library, if you work
in the installed app world.

00:09:23.210 --> 00:09:26.830
For the other features that are
depending on the Instant App

00:09:26.830 --> 00:09:30.390
module, what you will have
to do is you just say,

00:09:30.390 --> 00:09:32.650
this feature is implementing
the base feature.

00:09:32.650 --> 00:09:34.650
Also, you can have
your dependencies scope

00:09:34.650 --> 00:09:36.590
directly to the features
that are using them.

00:09:36.590 --> 00:09:38.920
And I highly recommend
scoping them as narrowly

00:09:38.920 --> 00:09:41.800
as you possibly can
in order to avoid

00:09:41.800 --> 00:09:49.500
having a massively bloated
base module in there.

00:09:49.500 --> 00:09:51.060
On the installed
app, what do you

00:09:51.060 --> 00:09:53.515
have to do is you still
have the application plug-in

00:09:53.515 --> 00:09:54.390
that you already had.

00:09:54.390 --> 00:09:55.920
And then, within
your dependencies,

00:09:55.920 --> 00:10:00.030
you have the dependencies
on those feature modules

00:10:00.030 --> 00:10:01.770
that you had before.

00:10:01.770 --> 00:10:03.510
Very similar for
the Instant App,

00:10:03.510 --> 00:10:06.450
you just apply a
different plug-in.

00:10:06.450 --> 00:10:08.400
And that defines
which output you

00:10:08.400 --> 00:10:10.500
will get-- either one
single APK or a zip

00:10:10.500 --> 00:10:11.940
file with a multitude of APKs.

00:10:20.440 --> 00:10:22.000
Also, in your
manifest, there has

00:10:22.000 --> 00:10:24.050
to be some changes
that you have to make.

00:10:24.050 --> 00:10:27.250
So if you're wondering,
is my app actually

00:10:27.250 --> 00:10:30.970
a good use case for
Instant App, well, yes.

00:10:30.970 --> 00:10:34.240
And you can think
about it if your app

00:10:34.240 --> 00:10:37.390
is addressable via URL.

00:10:37.390 --> 00:10:40.090
Then this is the use case
for an Instant App as well.

00:10:43.840 --> 00:10:47.380
In order to make that all
happen and to make it work,

00:10:47.380 --> 00:10:50.920
you have to have
an activity that

00:10:50.920 --> 00:10:54.100
has the Android Auto-Verify
set to true in order

00:10:54.100 --> 00:10:58.900
to have the app links available,
and you have to set the Action

00:10:58.900 --> 00:11:01.450
View and category of
browsable, and your default

00:11:01.450 --> 00:11:04.330
activity that you already
have has to have the default

00:11:04.330 --> 00:11:06.830
category as well.

00:11:06.830 --> 00:11:10.027
Then you associate your
URL to your activity.

00:11:10.027 --> 00:11:12.110
And for your default
activity, what you have to do

00:11:12.110 --> 00:11:15.620
is give it some metadata
to have a default

00:11:15.620 --> 00:11:18.770
URL that it can fall back
to if none of the other ones

00:11:18.770 --> 00:11:19.855
is applicable.

00:11:22.470 --> 00:11:25.200
Also, one of the cool things
that we introduced with Oreo

00:11:25.200 --> 00:11:26.521
is a new sandbox version.

00:11:26.521 --> 00:11:28.770
With that sandbox, we tightened
security and make sure

00:11:28.770 --> 00:11:32.880
that we can migrate user
data from the Instant App

00:11:32.880 --> 00:11:33.990
to the installed app.

00:11:33.990 --> 00:11:36.920
More on that later.

00:11:36.920 --> 00:11:40.140
The next principle of Android
Instant App is performance.

00:11:40.140 --> 00:11:43.410
So what does that
mean for a developer?

00:11:43.410 --> 00:11:45.570
So the main question
is, how do I

00:11:45.570 --> 00:11:50.790
get from having this
click to getting output

00:11:50.790 --> 00:11:53.970
and getting the app
installed instantly?

00:11:53.970 --> 00:11:56.130
What does that take?

00:11:56.130 --> 00:11:58.890
One of the things that's
basically-- that's

00:11:58.890 --> 00:12:01.520
how you have to constrain
your app in size.

00:12:01.520 --> 00:12:03.360
You have to make it as
small as you possibly

00:12:03.360 --> 00:12:06.120
can in order to transfer
it as quickly as possible

00:12:06.120 --> 00:12:08.240
over the wire.

00:12:08.240 --> 00:12:11.684
So that's kind of
scary, because we

00:12:11.684 --> 00:12:13.600
are factoring everything
and making everything

00:12:13.600 --> 00:12:14.530
as small as possible.

00:12:14.530 --> 00:12:15.800
It takes a lot of time.

00:12:15.800 --> 00:12:17.300
There's a couple
of things involved.

00:12:17.300 --> 00:12:19.330
But actually, it's
not that hard.

00:12:19.330 --> 00:12:22.840
And while you're developing,
there's no size constraint.

00:12:22.840 --> 00:12:27.400
So you can easily
just work with it

00:12:27.400 --> 00:12:31.120
from just having those
changes in the Gradle files

00:12:31.120 --> 00:12:34.830
without having to limit
yourself and without having

00:12:34.830 --> 00:12:37.132
to send your app on a diet.

00:12:37.132 --> 00:12:39.340
That's really cool for the
first refactoring efforts,

00:12:39.340 --> 00:12:41.830
and it's also really, really
helpful for the pitches

00:12:41.830 --> 00:12:44.530
to the team and for your product
owners and product managers

00:12:44.530 --> 00:12:46.580
to actually show them,
hey, this would happen

00:12:46.580 --> 00:12:47.830
if our app was an Instant App.

00:12:47.830 --> 00:12:50.160
You can show this to
them on their device

00:12:50.160 --> 00:12:52.980
and take it from there.

00:12:52.980 --> 00:12:54.970
When you've taken the
next steps towards that

00:12:54.970 --> 00:12:57.220
is when you upload
your app to the Play

00:12:57.220 --> 00:12:59.740
Store for the first time
to a development track,

00:12:59.740 --> 00:13:02.860
there's a download bundle size
limit of 10 megabytes, which

00:13:02.860 --> 00:13:05.530
is still quite generous, because
that's not your whole app,

00:13:05.530 --> 00:13:07.810
but just the download bundle.

00:13:07.810 --> 00:13:12.457
When you move onto alpha beta
production, what then happens

00:13:12.457 --> 00:13:14.290
is you will be constrained
to four megabytes

00:13:14.290 --> 00:13:16.450
per downloadable bundle.

00:13:16.450 --> 00:13:20.140
So that's 1,024 to power
of 2 times the megabytes

00:13:20.140 --> 00:13:23.920
that you have, but what's
with the bundle size?

00:13:23.920 --> 00:13:26.680
Bundle size basically
means if your base bundle

00:13:26.680 --> 00:13:28.390
is quite large--

00:13:28.390 --> 00:13:32.860
say three megabytes-- you could
have features on top of that,

00:13:32.860 --> 00:13:35.270
which each are one megabyte.

00:13:35.270 --> 00:13:37.910
That, effectively, gives
you six megabytes on device.

00:13:40.560 --> 00:13:42.870
But if you split those
two features that

00:13:42.870 --> 00:13:45.480
were combined into two
different features,

00:13:45.480 --> 00:13:47.490
you would gain another megabyte.

00:13:47.490 --> 00:13:50.610
Similar, if you can
slim down your base APK,

00:13:50.610 --> 00:13:53.670
your base feature module,
all your other modules

00:13:53.670 --> 00:13:55.479
can grow in size as well.

00:13:55.479 --> 00:13:58.020
I don't recommend just growing
it for the sake of growing it,

00:13:58.020 --> 00:14:02.340
but you have ways to actually
play around with that limit

00:14:02.340 --> 00:14:05.390
a little bit more effectively.

00:14:05.390 --> 00:14:09.570
So just to recap, stay
under four megabytes.

00:14:09.570 --> 00:14:11.532
Yes, under.

00:14:11.532 --> 00:14:12.990
The lower you can
go, the better it

00:14:12.990 --> 00:14:16.730
is, because it improves
your user's experience

00:14:16.730 --> 00:14:20.038
from getting from the click
to the installed application.

00:14:22.602 --> 00:14:24.310
So let's take a look
at a couple of tools

00:14:24.310 --> 00:14:28.420
that we offer to make this
easier for you as developers.

00:14:28.420 --> 00:14:30.160
One of them is the APK Analyzer.

00:14:30.160 --> 00:14:32.740
Some of you might be
already familiar with it,

00:14:32.740 --> 00:14:35.560
especially if you just watched
the session earlier today

00:14:35.560 --> 00:14:37.960
here at Google Developer Days.

00:14:37.960 --> 00:14:40.840
This gives you good insights of
where your kilobytes are spent

00:14:40.840 --> 00:14:43.940
and works with installable apps
as well as with Instant Apps.

00:14:43.940 --> 00:14:48.864
So we just dropped the
Instant App zip in there,

00:14:48.864 --> 00:14:51.280
and you can see which of your
modules takes the most size,

00:14:51.280 --> 00:14:53.613
and you can have all the
insights that you want to have.

00:14:53.613 --> 00:14:55.470
That's really great.

00:14:55.470 --> 00:14:57.900
Also, in order to make
sure that you divide

00:14:57.900 --> 00:15:01.770
your app into modules
easier and to have

00:15:01.770 --> 00:15:06.150
the output properly modularized,
there's configuration splits.

00:15:06.150 --> 00:15:10.440
Well, that works with either
screen density or the processor

00:15:10.440 --> 00:15:12.899
architecture type if
you have native code,

00:15:12.899 --> 00:15:14.190
as well as the user's language.

00:15:16.900 --> 00:15:20.350
The cool thing about
that is that you

00:15:20.350 --> 00:15:23.110
don't ship all the resources
and all the drawables

00:15:23.110 --> 00:15:26.650
and everything to the
user, but the experience

00:15:26.650 --> 00:15:29.600
is tailored to
the user's device.

00:15:29.600 --> 00:15:33.100
So an HDPI device
with English language

00:15:33.100 --> 00:15:38.780
would only get HDPI resources
and the English language.

00:15:38.780 --> 00:15:41.810
Same accounts for
processor architecture.

00:15:41.810 --> 00:15:43.315
So how do you enable that?

00:15:43.315 --> 00:15:44.320
That's straightforward.

00:15:44.320 --> 00:15:47.320
Within your built
Gradle file, it's

00:15:47.320 --> 00:15:53.230
able to generate pure splits,
then set the density to true.

00:15:53.230 --> 00:15:54.520
That should be enabled.

00:15:54.520 --> 00:15:56.561
Depending on whether you
have native code or not,

00:15:56.561 --> 00:15:58.940
the API part is
essential as well,

00:15:58.940 --> 00:16:01.150
and you can split
all the languages

00:16:01.150 --> 00:16:04.160
into your different feature,
into the different modules

00:16:04.160 --> 00:16:04.660
as well.

00:16:04.660 --> 00:16:08.560
What will happen is
that all of those splits

00:16:08.560 --> 00:16:14.530
are being generated, and they
will reside in their own APKs.

00:16:14.530 --> 00:16:17.140
And the Play Store decides
this will be shipped,

00:16:17.140 --> 00:16:18.970
and the other ones--

00:16:18.970 --> 00:16:21.370
well, just don't take
up space over the wire

00:16:21.370 --> 00:16:23.440
or on the user's device.

00:16:26.732 --> 00:16:29.190
Also, the further you reduce
your APK size, what you can do

00:16:29.190 --> 00:16:32.880
is use code minification,
resource shrinking, Proguard,

00:16:32.880 --> 00:16:36.680
or other things that we
talked about at Google I/O

00:16:36.680 --> 00:16:40.050
or at other conferences
already like using WebP.

00:16:40.050 --> 00:16:41.970
Make sure that your
images aren't too big.

00:16:41.970 --> 00:16:45.630
Make sure that you remove
all the unused resources.

00:16:45.630 --> 00:16:51.310
But that has been covered in a
wide variety of words already.

00:16:51.310 --> 00:16:53.934
So how does it work?

00:16:53.934 --> 00:16:55.600
Again, just for your
release build type,

00:16:55.600 --> 00:16:57.308
because in development,
it doesn't really

00:16:57.308 --> 00:17:00.250
matter that much, you can minify
it, can shrink your resources,

00:17:00.250 --> 00:17:04.720
or can use your Proguard
files for the modules

00:17:04.720 --> 00:17:05.770
that you're working with.

00:17:05.770 --> 00:17:08.980
Be aware that you
have to have the API

00:17:08.980 --> 00:17:14.074
surfaces of your feature
modules excluded from Proguard

00:17:14.074 --> 00:17:15.490
so that they don't
get obfuscated,

00:17:15.490 --> 00:17:17.380
because otherwise, the
modules can't really

00:17:17.380 --> 00:17:20.890
communicate with one another.

00:17:20.890 --> 00:17:22.710
Also, one of the
things is that you

00:17:22.710 --> 00:17:26.160
don't have to have everything
as an Instant App immediately,

00:17:26.160 --> 00:17:28.800
if you consider working
with Instant Apps.

00:17:28.800 --> 00:17:31.920
There may be features that are
more suitable within your app

00:17:31.920 --> 00:17:33.720
to become an Instant
App than others.

00:17:33.720 --> 00:17:35.790
And your users will
encounter that boundary

00:17:35.790 --> 00:17:37.530
in that case, which
basically means

00:17:37.530 --> 00:17:40.282
that you have to have an
installer for it at some point.

00:17:40.282 --> 00:17:42.240
These are two examples
where you can have them.

00:17:42.240 --> 00:17:43.690
There's different ways as well.

00:17:43.690 --> 00:17:46.050
You can also have a model
dialog to show them,

00:17:46.050 --> 00:17:47.290
this is where you want to go.

00:17:47.290 --> 00:17:48.900
This is now the
place where you have

00:17:48.900 --> 00:17:52.170
to install the full application
in order to continue

00:17:52.170 --> 00:17:56.520
with the app's experience.

00:17:56.520 --> 00:17:57.809
There is an API for that.

00:17:57.809 --> 00:17:59.600
Basically, you check
whether you're running

00:17:59.600 --> 00:18:00.809
in it in Instant App context.

00:18:00.809 --> 00:18:02.683
And if you run it in
the Instant App context,

00:18:02.683 --> 00:18:04.160
you show the install
prompt, which

00:18:04.160 --> 00:18:06.576
gives you the install prompt
from the Play Store directly.

00:18:08.854 --> 00:18:10.520
Let's take a look at
the next principle.

00:18:10.520 --> 00:18:14.680
That's privacy and security.

00:18:14.680 --> 00:18:17.230
One thing is the identity
of the user should

00:18:17.230 --> 00:18:20.230
be easy for a user to log in.

00:18:20.230 --> 00:18:24.370
So don't have them fumble
around with sign-up dialogs,

00:18:24.370 --> 00:18:27.040
with long forms that they
actually have to sign in with,

00:18:27.040 --> 00:18:30.190
and if they are new users, or
have them answer their password

00:18:30.190 --> 00:18:31.240
and username.

00:18:31.240 --> 00:18:34.030
If they're existing users, you
can use the Smart Lock APIs

00:18:34.030 --> 00:18:38.127
for that to make sure that this
is as quick as possible and as

00:18:38.127 --> 00:18:39.460
easy as possible for your users.

00:18:42.000 --> 00:18:43.774
Also, for payments,
for in-app payments,

00:18:43.774 --> 00:18:45.815
we already have the in-app
billing API available.

00:18:45.815 --> 00:18:49.140
So you can use that for
digital goods, so everything

00:18:49.140 --> 00:18:51.374
that you have within the
application or subscriptions

00:18:51.374 --> 00:18:52.290
or anything like that.

00:18:52.290 --> 00:18:53.490
It works with that.

00:18:53.490 --> 00:18:56.670
But also, if you want to
ship something to the user

00:18:56.670 --> 00:18:58.380
and have physical
goods available,

00:18:58.380 --> 00:19:01.680
or you want to bring
the user somewhere,

00:19:01.680 --> 00:19:03.270
then you use the
Google Payments API,

00:19:03.270 --> 00:19:06.240
which uses the cards stored
in the Google user's account.

00:19:09.200 --> 00:19:10.880
When it comes to
permissions, we make

00:19:10.880 --> 00:19:13.490
sure that this is secure
for the users as well.

00:19:13.490 --> 00:19:16.006
We reduced the amount
of available permissions

00:19:16.006 --> 00:19:17.630
for Android Instant
Apps and the amount

00:19:17.630 --> 00:19:20.580
of requestable permissions
depending on the API level.

00:19:20.580 --> 00:19:23.300
So some of them are
available down to Lollipop,

00:19:23.300 --> 00:19:25.550
and some of them are available
only from Android Oreo

00:19:25.550 --> 00:19:26.250
and above.

00:19:26.250 --> 00:19:28.520
So your Instant App could
run in a foreground service,

00:19:28.520 --> 00:19:34.150
so this would be helpful for
media playing applications.

00:19:34.150 --> 00:19:35.810
And it can read phone
numbers, which is

00:19:35.810 --> 00:19:37.370
a subset of Read Phone State.

00:19:41.190 --> 00:19:43.320
Well, be aware, with
background services,

00:19:43.320 --> 00:19:46.827
they might be killed at
the system's convenience

00:19:46.827 --> 00:19:48.910
when the user does not
really use the app anymore.

00:19:48.910 --> 00:19:52.740
So as soon as the user decides
to switch to another app,

00:19:52.740 --> 00:19:55.550
it can get and will
get evicted faster than

00:19:55.550 --> 00:19:57.340
usually with installed apps.

00:20:00.630 --> 00:20:02.170
When it comes to
local storage, you

00:20:02.170 --> 00:20:03.870
want to probably
store data locally,

00:20:03.870 --> 00:20:07.396
because you need to make sure
that you access all that.

00:20:07.396 --> 00:20:09.270
And sometimes the user
comes back to the app,

00:20:09.270 --> 00:20:13.060
and it's important to
actually have that available.

00:20:13.060 --> 00:20:15.780
So we made it available to
the local private storage.

00:20:15.780 --> 00:20:17.200
Also, there's a cache directory.

00:20:17.200 --> 00:20:19.200
There is a cookie API
available, and you

00:20:19.200 --> 00:20:22.050
can use the shared preferences,
as well as your database that's

00:20:22.050 --> 00:20:26.330
already existing and
internal content providers.

00:20:26.330 --> 00:20:28.250
But you don't get access
to external storage

00:20:28.250 --> 00:20:30.410
or your exported
content providers.

00:20:30.410 --> 00:20:34.460
That is, again, to make
sure that the users are

00:20:34.460 --> 00:20:36.241
in a secure environment.

00:20:39.010 --> 00:20:42.400
When it comes to migrating
user data from the Instant App

00:20:42.400 --> 00:20:45.730
to the installed app, there,
we provided an API for that

00:20:45.730 --> 00:20:52.120
as well, which relies on you
declaring the target sandbox

00:20:52.120 --> 00:20:55.790
version 2 in your
installed application.

00:20:55.790 --> 00:20:57.110
And how does it work?

00:20:57.110 --> 00:21:00.150
That's the cookie API.

00:21:00.150 --> 00:21:04.990
It's available to both
Instant App and installed app.

00:21:04.990 --> 00:21:07.980
It allows you to store
and retrieve user data

00:21:07.980 --> 00:21:11.250
when you migrate or as a
replacement for other ways

00:21:11.250 --> 00:21:15.432
to store user data
that you already used.

00:21:15.432 --> 00:21:16.140
How does it work?

00:21:16.140 --> 00:21:18.530
It's, again, a
straightforward API.

00:21:18.530 --> 00:21:21.860
You check whether the cookie
that you want to store

00:21:21.860 --> 00:21:26.600
is small enough to
fit the cookie jar.

00:21:26.600 --> 00:21:28.850
And then you update
your Instant App cookie.

00:21:28.850 --> 00:21:32.290
The Instant App
cookie is a binary,

00:21:32.290 --> 00:21:35.929
and it's available through both
the Package Manager as well

00:21:35.929 --> 00:21:37.220
as the Support Package Manager.

00:21:39.760 --> 00:21:41.440
On the other hand,
all you have to do

00:21:41.440 --> 00:21:43.120
is get from the Package Manager.

00:21:43.120 --> 00:21:46.600
Get back the internet
cookie, and then convert it

00:21:46.600 --> 00:21:48.130
to the data that you already--

00:21:48.130 --> 00:21:51.680
the data type that
you can work with.

00:21:51.680 --> 00:21:53.960
And when you're done, you
can clean up after yourself

00:21:53.960 --> 00:21:55.334
and clear the
Instant App cookie.

00:21:58.880 --> 00:22:02.420
That is all I have to say on the
part of Instant App for today,

00:22:02.420 --> 00:22:04.490
but there's a couple
of things that I

00:22:04.490 --> 00:22:07.770
want you to keep in
mind when it comes to--

00:22:07.770 --> 00:22:10.570
that I want you to keep in mind
when it comes to looking out

00:22:10.570 --> 00:22:11.299
for Instant Apps.

00:22:11.299 --> 00:22:13.340
One of the things is that
you probably want to go

00:22:13.340 --> 00:22:17.300
to the g.co/InstantApps
or developer.androi

00:22:17.300 --> 00:22:18.380
d.com/InstantApps.

00:22:18.380 --> 00:22:21.950
Also, if you have questions,
post them on Stack Overflow,

00:22:21.950 --> 00:22:24.770
and if you see that there
are samples missing,

00:22:24.770 --> 00:22:27.810
or if you want to contribute
to samples for Android Instant

00:22:27.810 --> 00:22:32.450
Apps, please file an
issue on Google Samples.

00:22:32.450 --> 00:22:34.450
And there's also a couple
of other presentations

00:22:34.450 --> 00:22:36.969
that are definitely highly
recommendable for Android

00:22:36.969 --> 00:22:37.510
Instant Apps.

00:22:37.510 --> 00:22:40.330
One of them is the Introduction
to Instant Apps, which

00:22:40.330 --> 00:22:43.450
gives you more of a high level
overview of what they actually

00:22:43.450 --> 00:22:44.770
are than this presentation.

00:22:44.770 --> 00:22:46.510
Also, Building an
Android Instant App,

00:22:46.510 --> 00:22:49.090
which takes you through
the modularization

00:22:49.090 --> 00:22:52.720
process more hands-on than
this presentation as well.

00:22:52.720 --> 00:22:55.270
Also, adding to that
is the Best Practices--

00:22:55.270 --> 00:22:58.120
Slim Down Your App Size
session, which is really great

00:22:58.120 --> 00:23:00.610
to get a great overview
of all the tools

00:23:00.610 --> 00:23:02.671
that we've made
available for making sure

00:23:02.671 --> 00:23:04.420
that your app size is
as small as possible

00:23:04.420 --> 00:23:10.950
without sacrificing any
of your user's experience.

00:23:10.950 --> 00:23:11.940
Thank you very much.

00:23:11.940 --> 00:23:13.010
That's all for me.

00:23:13.010 --> 00:23:15.410
[APPLAUSE]

00:23:15.410 --> 00:23:19.060
[MUSIC PLAYING]

