WEBVTT
Kind: captions
Language: en

00:00:01.446 --> 00:00:04.338
[MUSIC PLAYING]

00:00:06.702 --> 00:00:07.660
ANDREW: Hey, everybody.

00:00:07.660 --> 00:00:11.020
Welcome back to The Boring Show.

00:00:11.020 --> 00:00:11.950
MATT: Hi, everyone.

00:00:11.950 --> 00:00:13.990
I am not Filip.

00:00:13.990 --> 00:00:14.950
ANDREW: So I'm Andrew.

00:00:14.950 --> 00:00:18.300
Again, this is Matt this time.

00:00:18.300 --> 00:00:20.539
So we're changing up the
cast a little bit here.

00:00:20.539 --> 00:00:22.330
If you haven't seen
The Boring Show before,

00:00:22.330 --> 00:00:25.030
this is about an hour long
show, where two Flutter

00:00:25.030 --> 00:00:27.400
engineers just work
on an app, covering

00:00:27.400 --> 00:00:32.229
some interesting things, make
mistakes, look things up,

00:00:32.229 --> 00:00:34.330
and occasionally
interact with comments

00:00:34.330 --> 00:00:36.340
that you guys leave on
our previous episodes

00:00:36.340 --> 00:00:37.207
and via Twitter.

00:00:37.207 --> 00:00:39.040
So we're going to have
some of that as well.

00:00:39.040 --> 00:00:39.520
MATT: So that's great.

00:00:39.520 --> 00:00:40.730
So I get to make mistakes.

00:00:40.730 --> 00:00:41.230
ANDREW: Yes.

00:00:41.230 --> 00:00:41.920
MATT: OK, perfect.

00:00:41.920 --> 00:00:43.240
Well, we'll see plenty of that.

00:00:43.240 --> 00:00:44.200
Good.

00:00:44.200 --> 00:00:46.270
ANDREW: Yeah, excellent.

00:00:46.270 --> 00:00:51.010
So when last we left our app,
which is a Hacker News reader,

00:00:51.010 --> 00:00:54.340
we had just gotten built_value
into the application.

00:00:54.340 --> 00:00:57.400
And we had basically
gotten an article object

00:00:57.400 --> 00:01:00.250
that was being generated
correctly with source gen

00:01:00.250 --> 00:01:01.870
and built_value.

00:01:01.870 --> 00:01:04.250
But it only had one
property, which was ID.

00:01:04.250 --> 00:01:07.750
And if we look at
the Hacker News

00:01:07.750 --> 00:01:11.000
API, which is what we want to
deserialize with this object,

00:01:11.000 --> 00:01:13.640
there's a lot more
than ID in there.

00:01:13.640 --> 00:01:16.100
So we have all these
fields that we're

00:01:16.100 --> 00:01:20.620
going to need to be able to
automatically pull in from JSON

00:01:20.620 --> 00:01:23.240
and populate one of these
article objects with.

00:01:23.240 --> 00:01:24.880
So the first thing
I'm going to do here

00:01:24.880 --> 00:01:27.340
is try and finish up
the built_value portion

00:01:27.340 --> 00:01:28.870
that we started
last time by adding

00:01:28.870 --> 00:01:30.260
the rest of these fields.

00:01:30.260 --> 00:01:32.910
MATT: Cool, so we're going
to build value for this.

00:01:32.910 --> 00:01:33.410
ANDREW: Yes.

00:01:33.410 --> 00:01:34.150
MATT: OK, that's--

00:01:34.150 --> 00:01:36.150
ANDREW: Unless we run
into a snag, in which case

00:01:36.150 --> 00:01:39.357
we can backtrack and use JSON
serializable or something else.

00:01:39.357 --> 00:01:40.440
MATT: We'll do it by hand.

00:01:40.440 --> 00:01:41.000
ANDREW: Yeah.

00:01:41.000 --> 00:01:41.500
MATT: OK.

00:01:41.500 --> 00:01:44.130
ANDREW: It's only one
little object, so who knows.

00:01:44.130 --> 00:01:47.080
So I'm going to go and grab
all of these properties

00:01:47.080 --> 00:01:49.660
through the magic of
cutting and pasting.

00:01:49.660 --> 00:01:52.630
And this is our old article.

00:01:52.630 --> 00:01:57.130
This is going to break many
things, because we already

00:01:57.130 --> 00:02:00.840
had that out.

00:02:00.840 --> 00:02:02.540
We had made a
second file for it,

00:02:02.540 --> 00:02:08.020
so I need to get all those extra
properties into this article

00:02:08.020 --> 00:02:10.710
class, so that when
built value runs,

00:02:10.710 --> 00:02:14.620
it'll do all of the
serialization stuff for it.

00:02:14.620 --> 00:02:19.116
So let me go ahead
and paste here.

00:02:19.116 --> 00:02:24.595
And this is going to
take me just a second.

00:02:24.595 --> 00:02:26.980
Have you used built_value
yet in anything?

00:02:26.980 --> 00:02:29.480
MATT: I've used built_value
a couple of times.

00:02:29.480 --> 00:02:36.550
built_value is great for when
your incoming JSON roughly

00:02:36.550 --> 00:02:41.407
matches the structure of
your class pretty well.

00:02:41.407 --> 00:02:42.490
ANDREW: Yeah, that's true.

00:02:42.490 --> 00:02:45.800
If you need to sort of
massage stuff, sure.

00:02:45.800 --> 00:02:48.620
MATT: You talk
about built_values,

00:02:48.620 --> 00:02:50.330
immutability stuff last week.

00:02:50.330 --> 00:02:51.400
ANDREW: We touched on it.

00:02:51.400 --> 00:02:53.862
I think that'll-- we haven't
done an app state management

00:02:53.862 --> 00:02:56.070
episode yet, which is
something we do need to get to.

00:02:56.070 --> 00:02:57.250
We saw that in the comments.

00:02:57.250 --> 00:03:00.290
People are curious about it.

00:03:00.290 --> 00:03:02.530
And so, I think that'll
be more of an issue

00:03:02.530 --> 00:03:05.329
once we get into
that, because people

00:03:05.329 --> 00:03:07.870
have very strong opinions about
whether your app model should

00:03:07.870 --> 00:03:11.290
be immutable, you know, and
whether you're creating a new--

00:03:11.290 --> 00:03:13.060
that's how redux works, right?

00:03:13.060 --> 00:03:15.250
Your app state doesn't change.

00:03:15.250 --> 00:03:17.500
The actual object
doesn't change.

00:03:17.500 --> 00:03:18.280
MATT: That's true.

00:03:18.280 --> 00:03:20.740
But by default,
with built_value,

00:03:20.740 --> 00:03:23.110
all the values that you
create through built_value

00:03:23.110 --> 00:03:25.060
are going to be
immutable by default.

00:03:25.060 --> 00:03:29.800
So every time you want
to permutate on an object

00:03:29.800 --> 00:03:32.302
or you want to change
the values internally,

00:03:32.302 --> 00:03:33.760
what it actually
will do is it will

00:03:33.760 --> 00:03:35.494
generate a new one for you.

00:03:35.494 --> 00:03:36.910
One of the benefits
of built_value

00:03:36.910 --> 00:03:40.180
is that if you build
multiple objects

00:03:40.180 --> 00:03:44.440
with the same internal
state, it will not

00:03:44.440 --> 00:03:47.424
generate multiple objects
like when you reference one.

00:03:47.424 --> 00:03:48.340
And it will give you--

00:03:48.340 --> 00:03:49.930
ANDREW: Interesting.

00:03:49.930 --> 00:03:53.290
MATT: --things like object
equality and whatnot

00:03:53.290 --> 00:03:54.760
pretty much out of the box.

00:03:54.760 --> 00:03:58.420
So there's a bunch
of useful attributes

00:03:58.420 --> 00:04:00.190
of using built_value
you get just

00:04:00.190 --> 00:04:03.547
above and beyond the additional
serialization piece too.

00:04:03.547 --> 00:04:06.130
ANDREW: Which is good, because
if you just want serialization,

00:04:06.130 --> 00:04:08.240
JSON serializable
does a pretty--

00:04:08.240 --> 00:04:08.740
MATT: Yeah.

00:04:08.740 --> 00:04:11.560
ANDREW: --crackerjack job at it.

00:04:11.560 --> 00:04:14.412
MATT: Yeah, for small things
built_value might be overkill.

00:04:14.412 --> 00:04:16.120
But if you've got a
large app, and you're

00:04:16.120 --> 00:04:20.740
going to be generating a ton
of objects, some of which

00:04:20.740 --> 00:04:24.430
may be represented
to be the same,

00:04:24.430 --> 00:04:28.838
then built_value might
get you some neat service.

00:04:28.838 --> 00:04:29.997
ANDREW: Good.

00:04:29.997 --> 00:04:31.830
I'm kind of guessing
on some of these types.

00:04:31.830 --> 00:04:32.746
I've got to be honest.

00:04:32.746 --> 00:04:34.312
MATT: There's a lot of--

00:04:34.312 --> 00:04:35.460
that's a lot of parameters.

00:04:35.460 --> 00:04:36.084
ANDREW: Mm-hmm.

00:04:36.084 --> 00:04:38.430
Well, you know these
are your fields.

00:04:38.430 --> 00:04:40.400
Everything's an item, so
it has to be able to--

00:04:42.906 --> 00:04:46.157
oh, time to use a
built collection.

00:04:46.157 --> 00:04:48.740
MATT: We're going to have to do
some additional work for built

00:04:48.740 --> 00:04:49.600
collection.

00:04:49.600 --> 00:04:54.650
ANDREW: [LAUGHS] So this would
be a built list, integers,

00:04:54.650 --> 00:04:57.327
which I need to go up here.

00:04:57.327 --> 00:04:59.660
And I think we touched a
little bit about this last time

00:04:59.660 --> 00:05:00.620
as well.

00:05:00.620 --> 00:05:03.110
built_value is for
single objects.

00:05:03.110 --> 00:05:09.140
It does have a related package
called built collection, which

00:05:09.140 --> 00:05:10.680
I hope we have in our package.

00:05:10.680 --> 00:05:11.790
Yeah, we do.

00:05:11.790 --> 00:05:15.380
So that's already
been imported using--

00:05:15.380 --> 00:05:17.210
that's not how you spell that.

00:05:17.210 --> 00:05:19.730
So we've already got that
if I pull up the pub spec.

00:05:19.730 --> 00:05:21.320
I think we pulled that in.

00:05:21.320 --> 00:05:25.320
Yeah, so we already we're
pulling that one in last time.

00:05:25.320 --> 00:05:28.130
Let me just make this bigger,
so that normal human beings

00:05:28.130 --> 00:05:30.350
can read it.

00:05:30.350 --> 00:05:32.570
So we've already got
that package imported.

00:05:32.570 --> 00:05:35.660
Right now, I'm just
adding it to this file

00:05:35.660 --> 00:05:37.280
and importing it here.

00:05:37.280 --> 00:05:41.000
So arrays, of course,
are by nature immutable.

00:05:41.000 --> 00:05:43.790
So if you just have
a getter for a list,

00:05:43.790 --> 00:05:47.360
you could still
conceivably mutate the list

00:05:47.360 --> 00:05:49.250
unless you have an
immutable list object.

00:05:49.250 --> 00:05:49.750
MATT: True.

00:05:49.750 --> 00:05:51.590
And built lists are
immutable list objects--

00:05:51.590 --> 00:05:52.173
ANDREW: Right.

00:05:52.173 --> 00:05:53.880
MATT: --I believe.

00:05:53.880 --> 00:05:58.100
ANDREW: And so, that, I
believe, also needs to be a get.

00:05:58.100 --> 00:05:58.600
All right.

00:05:58.600 --> 00:05:59.675
MATT: So many getters.

00:05:59.675 --> 00:06:01.886
ANDREW: I know.

00:06:01.886 --> 00:06:04.010
MATT: Nice thing is is
built_value will just create

00:06:04.010 --> 00:06:05.410
the constructors for you.

00:06:05.410 --> 00:06:07.170
ANDREW: It's really
driving home the point

00:06:07.170 --> 00:06:12.320
of me not wanting to write that
deserialization method myself.

00:06:12.320 --> 00:06:12.830
Parts?

00:06:12.830 --> 00:06:15.011
What the heck is parts?

00:06:15.011 --> 00:06:19.930
A list of related poll
options in display order.

00:06:19.930 --> 00:06:21.820
I'm going to go
ahead and call that.

00:06:21.820 --> 00:06:23.740
A built list of IDs basically.

00:06:23.740 --> 00:06:26.117
I hope that's the case.

00:06:26.117 --> 00:06:28.700
The fun part is since you'll be
coding the live network calls,

00:06:28.700 --> 00:06:29.574
I get to do all this.

00:06:29.574 --> 00:06:32.280
And then if it's wrong, it'll
blow up when you try to use it

00:06:32.280 --> 00:06:34.937
and I'm sitting over
there, which will be great.

00:06:34.937 --> 00:06:37.020
MATT: I'm really glad I
joined in in this episode.

00:06:37.020 --> 00:06:39.090
ANDREW: [LAUGHS] And--

00:06:39.090 --> 00:06:40.340
MATT: When's Phil coming back?

00:06:40.340 --> 00:06:43.070
ANDREW: Yeah, he's coming back.

00:06:43.070 --> 00:06:45.590
He's hiding in the
back somewhere.

00:06:45.590 --> 00:06:49.014
Descendants is an
integer, I think.

00:06:49.014 --> 00:06:49.869
Yeah.

00:06:49.869 --> 00:06:50.910
This kind of bums me out.

00:06:50.910 --> 00:06:53.420
They have all these
examples of the field,

00:06:53.420 --> 00:06:56.180
but they don't have one that's
every single field, you know?

00:06:56.180 --> 00:06:59.060
Like, there's descendents--
OK, that's an int.

00:06:59.060 --> 00:07:01.044
MATT: Well, worst
case scenario, we can

00:07:01.044 --> 00:07:02.210
leave a couple of these out.

00:07:02.210 --> 00:07:02.690
ANDREW: Yeah.

00:07:02.690 --> 00:07:04.910
Lord knows we've never made
a mistake during an episode

00:07:04.910 --> 00:07:05.625
of The Boring Show.

00:07:05.625 --> 00:07:06.560
MATT: Well, that's
what I was told.

00:07:06.560 --> 00:07:07.070
ANDREW: Yeah.

00:07:07.070 --> 00:07:07.270
MATT: Sorry.

00:07:07.270 --> 00:07:08.811
You know, I meant
I watched them all.

00:07:08.811 --> 00:07:12.920
ANDREW: [LAUGHS] OK, so
those are all my fields.

00:07:12.920 --> 00:07:18.182
I should be able to save this
and get an error for something.

00:07:18.182 --> 00:07:19.944
Oh, because I just
broke the part file.

00:07:19.944 --> 00:07:22.110
MATT: Yeah, you're going
to have to regenerate that.

00:07:22.110 --> 00:07:26.900
ANDREW: So let me
go, and where am I?

00:07:26.900 --> 00:07:29.150
Let's do-- can I do
this from memory?

00:07:33.540 --> 00:07:36.270
MATT: Huh.

00:07:36.270 --> 00:07:37.520
ANDREW: I think that's it.

00:07:37.520 --> 00:07:39.908
MATT: Isn't it pub
run builder build?

00:07:39.908 --> 00:07:41.540
ANDREW: Ah.

00:07:41.540 --> 00:07:44.250
I don't get why
they build, dang it.

00:07:44.250 --> 00:07:47.010
It is a build task, isn't it?

00:07:47.010 --> 00:07:48.540
I was so ready to
flex after that.

00:07:48.540 --> 00:07:49.440
No.

00:07:49.440 --> 00:07:51.231
MATT: I think the other
one might be build.

00:07:55.895 --> 00:07:56.437
There you go.

00:07:56.437 --> 00:07:57.978
One of these
permutations will work--

00:07:57.978 --> 00:07:58.590
ANDREW: Yeah.

00:07:58.590 --> 00:08:00.077
MATT: --at some point.

00:08:00.077 --> 00:08:00.910
ANDREW: There we go.

00:08:00.910 --> 00:08:01.810
MATT: There you go.

00:08:01.810 --> 00:08:03.351
ANDREW: Assuming
this actually works.

00:08:03.351 --> 00:08:04.800
MATT: Yeah, that's true.

00:08:04.800 --> 00:08:07.170
ANDREW: So now we're
regenerating that part file.

00:08:07.170 --> 00:08:07.740
MATT: Mm-hmm.

00:08:07.740 --> 00:08:10.290
ANDREW: This is the
generated source

00:08:10.290 --> 00:08:13.607
to match the properties that
you just saw me drop in.

00:08:13.607 --> 00:08:14.940
That's the magic of built_value.

00:08:14.940 --> 00:08:18.815
Let's go back here, and I've got
all kinds of little properties

00:08:18.815 --> 00:08:21.480
in here.

00:08:21.480 --> 00:08:23.340
And I bet you if I
scroll down, there's

00:08:23.340 --> 00:08:28.560
my constructor, all kinds
of stuff in here, equality.

00:08:28.560 --> 00:08:31.189
I would love to know how this
hash code function works.

00:08:31.189 --> 00:08:34.450
[LAUGHS] There's the to string.

00:08:34.450 --> 00:08:35.280
Cool.

00:08:35.280 --> 00:08:38.830
So built_value has just
updated some stuff for me.

00:08:38.830 --> 00:08:44.740
So let's try running
one of these as a test

00:08:44.740 --> 00:08:46.285
and see how that works.

00:08:46.285 --> 00:08:47.027
Let me go ahead--

00:08:47.027 --> 00:08:47.860
I have this running.

00:08:47.860 --> 00:08:49.550
Let me go ahead and stop it.

00:08:49.550 --> 00:08:52.060
And I'm going to pop
out to Hacker News

00:08:52.060 --> 00:08:54.126
and just try and grab
one of these random--

00:08:54.126 --> 00:08:56.360
MATT: Oh.

00:08:56.360 --> 00:08:58.940
You've got your serializers
put into your built_value?

00:08:58.940 --> 00:09:00.447
ANDREW: It should be.

00:09:00.447 --> 00:09:01.530
Well, that's a good point.

00:09:05.470 --> 00:09:06.820
Do I need a serializers file?

00:09:06.820 --> 00:09:08.170
MATT: Yes.

00:09:08.170 --> 00:09:08.933
ANDREW: OK.

00:09:08.933 --> 00:09:09.820
MATT: And you--

00:09:09.820 --> 00:09:10.750
ANDREW: Let's go
look at the example.

00:09:10.750 --> 00:09:11.291
MATT: Mm-hmm.

00:09:20.010 --> 00:09:23.280
There is a really good
series of articles in Medium

00:09:23.280 --> 00:09:25.560
on built_value and serializing.

00:09:25.560 --> 00:09:27.904
ANDREW: Is perhaps this
what you referring to?

00:09:27.904 --> 00:09:29.070
This is the one that David--

00:09:29.070 --> 00:09:32.140
MATT: Which-- yup,
they're the ones.

00:09:32.140 --> 00:09:34.939
I highly recommend you read
all of those multiple times,

00:09:34.939 --> 00:09:36.980
because I did in order to
understand built_value.

00:09:36.980 --> 00:09:41.310
ANDREW: Yeah, and you can get
to them right from the GitHub

00:09:41.310 --> 00:09:42.480
repo, I believe.

00:09:42.480 --> 00:09:43.938
MATT: Oh, they
linked them through.

00:09:43.938 --> 00:09:47.420
ANDREW: I believe he
actually links them right in.

00:09:47.420 --> 00:09:49.180
I want to-- oh, no.

00:09:49.180 --> 00:09:51.920
They're on the pub.

00:09:51.920 --> 00:09:53.829
They're in his pub entry then.

00:09:53.829 --> 00:09:55.745
So you can definitely
find-- oh, no, articles.

00:09:55.745 --> 00:09:57.780
There they are.

00:09:57.780 --> 00:10:00.830
Yeah, totally worth
reading if you're

00:10:00.830 --> 00:10:03.320
going to do any kind
of serious passing

00:10:03.320 --> 00:10:04.592
data on the wire with JSON.

00:10:04.592 --> 00:10:06.800
MATT: The other thing that
I found super helpful here

00:10:06.800 --> 00:10:10.400
is just that the built_value
has the examples folder.

00:10:10.400 --> 00:10:13.740
And if you check out both
serializers and values,

00:10:13.740 --> 00:10:16.080
there's a bunch of
very simple examples.

00:10:16.080 --> 00:10:19.160
Well, ranging from
simple to mind blowing,

00:10:19.160 --> 00:10:22.592
but that's what got me started
when I was first playing around

00:10:22.592 --> 00:10:23.300
with built_value.

00:10:23.300 --> 00:10:25.790
ANDREW: All right, I'm going
to drop another file in here

00:10:25.790 --> 00:10:30.020
that I'm going to call
serializers, which I can never

00:10:30.020 --> 00:10:31.870
spell on the first try.

00:10:31.870 --> 00:10:34.840
And I'll add that later.

00:10:34.840 --> 00:10:37.220
So I'm going to drop in.

00:10:37.220 --> 00:10:41.542
This is his example, which I'm
about to trim the heck down,

00:10:41.542 --> 00:10:43.000
because I don't
have these classes.

00:10:43.000 --> 00:10:44.698
MATT: Yeah, you're just
going to need the one, right?

00:10:44.698 --> 00:10:45.239
ANDREW: Yeah.

00:10:54.470 --> 00:10:56.110
And this will be coming out of--

00:10:59.770 --> 00:11:00.270
what is it?

00:11:00.270 --> 00:11:00.930
JSON parse?

00:11:00.930 --> 00:11:02.554
We're going to have
to restructure some

00:11:02.554 --> 00:11:04.480
of this code in a bit as well.

00:11:07.432 --> 00:11:10.384
There we go.

00:11:10.384 --> 00:11:13.336
I'll be closing that.

00:11:13.336 --> 00:11:15.120
Let me save that.

00:11:15.120 --> 00:11:17.242
And I also need the JSON plugin.

00:11:17.242 --> 00:11:19.200
Here, we were talking
about this the other day.

00:11:19.200 --> 00:11:19.924
MATT: Yeah.

00:11:19.924 --> 00:11:21.840
So one of the things
that happens when you use

00:11:21.840 --> 00:11:24.506
the out-of-the-box serializer is
that it's going to serialize it

00:11:24.506 --> 00:11:29.470
in a weird list-like format
where each tuple in the list

00:11:29.470 --> 00:11:32.350
or each two pieces are going
to be a name and a value.

00:11:32.350 --> 00:11:34.670
So it's not going to
really look like JSON.

00:11:34.670 --> 00:11:37.890
Fortunately, there's a JSON
plugin, which basically makes

00:11:37.890 --> 00:11:42.750
it format nicely, where you have
the JSON name-value structure

00:11:42.750 --> 00:11:45.450
by default. And so,
highly recommended

00:11:45.450 --> 00:11:50.220
unless you're doing some very
bespoke managing of your data

00:11:50.220 --> 00:11:52.050
to use the JSON plugin.

00:11:52.050 --> 00:11:52.647
ANDREW: Yeah.

00:11:52.647 --> 00:11:54.480
The format that they
use by default, it does

00:11:54.480 --> 00:11:55.260
have advantages.

00:11:55.260 --> 00:11:57.480
Like, you can not have--

00:11:57.480 --> 00:11:59.350
put some type
information on the wire,

00:11:59.350 --> 00:12:01.410
I think, in a way that--
you know, normally,

00:12:01.410 --> 00:12:03.990
if you're doing
JSON, you sort of

00:12:03.990 --> 00:12:05.910
have to have agreement
of what things look

00:12:05.910 --> 00:12:08.060
like completely on both ends.

00:12:08.060 --> 00:12:09.562
And that's how it works.

00:12:09.562 --> 00:12:11.520
All right, what did I
just copy out here again?

00:12:11.520 --> 00:12:12.149
There we go.

00:12:12.149 --> 00:12:13.690
MATT: Oh, you need
to plug-- you need

00:12:13.690 --> 00:12:16.392
to add the plugin to your
serializer creator, I think.

00:12:16.392 --> 00:12:17.350
ANDREW: Oh my goodness.

00:12:17.350 --> 00:12:21.980
OK, file serializers.to_builder.

00:12:21.980 --> 00:12:26.050
MATT: Yeah, I think it's the
.add_plugin that you can latch

00:12:26.050 --> 00:12:27.270
on to your builder.

00:12:32.872 --> 00:12:33.705
ANDREW: There we go.

00:12:33.705 --> 00:12:35.190
That's what I'm looking for.

00:12:40.635 --> 00:12:41.640
MATT: There you go.

00:12:41.640 --> 00:12:42.438
That should do it.

00:12:42.438 --> 00:12:43.294
ANDREW: OK.

00:12:43.294 --> 00:12:46.240
And so, that's--

00:12:46.240 --> 00:12:48.010
OK, so I've got
another part file here.

00:12:48.010 --> 00:12:49.780
The serializers file
has its own part file

00:12:49.780 --> 00:12:52.190
just like the article one did.

00:12:52.190 --> 00:12:55.120
So let's go back
to the terminal.

00:12:55.120 --> 00:12:56.740
I don't have to guess
for this anymore

00:12:56.740 --> 00:12:58.198
since it's the most
recent command.

00:12:58.198 --> 00:13:00.280
It's very easy to write.

00:13:00.280 --> 00:13:01.232
There we go.

00:13:01.232 --> 00:13:03.190
So this should generate
that part file for us--

00:13:03.190 --> 00:13:03.850
MATT: And there will now be--

00:13:03.850 --> 00:13:04.720
ANDREW: --if I
come back in here.

00:13:04.720 --> 00:13:06.190
MATT: --much
generated source code.

00:13:06.190 --> 00:13:06.690
Wow.

00:13:06.690 --> 00:13:07.360
ANDREW: There we go.

00:13:07.360 --> 00:13:09.026
MATT: Very little
generated source code.

00:13:09.026 --> 00:13:11.290
ANDREW: Yeah, that's very small.

00:13:11.290 --> 00:13:15.848
And I'm guessing I need
to pull this package.

00:13:15.848 --> 00:13:16.348
MATT: Yeah.

00:13:20.380 --> 00:13:21.650
ANDREW: Sorry.

00:13:21.650 --> 00:13:23.316
There we go.

00:13:23.316 --> 00:13:24.641
MATT: That's the one.

00:13:24.641 --> 00:13:26.390
ANDREW: All my little
red lines went away.

00:13:26.390 --> 00:13:26.910
MATT: There you go.

00:13:26.910 --> 00:13:27.810
ANDREW: That's awesome.

00:13:27.810 --> 00:13:29.185
MATT: Oh, look,
you're using new.

00:13:29.185 --> 00:13:30.760
How very Dart man of you.

00:13:30.760 --> 00:13:32.290
ANDREW: [LAUGHS] There you go.

00:13:35.172 --> 00:13:36.880
It's my own fault for
cutting and pasting

00:13:36.880 --> 00:13:39.340
code that's more
than two months old.

00:13:39.340 --> 00:13:41.305
OK, so let's pop back here.

00:13:41.305 --> 00:13:43.400
And I've got that, so
I've got the serializers.

00:13:43.400 --> 00:13:46.240
I'm not using dark
convert just now.

00:13:46.240 --> 00:13:50.110
I do need to include the
file that I just made.

00:13:50.110 --> 00:13:51.230
MATT: Mm-hmm.

00:13:51.230 --> 00:13:52.938
ANDREW: And I'm trying
to get it to where

00:13:52.938 --> 00:13:55.750
I can use this in
a test just to make

00:13:55.750 --> 00:13:58.240
sure it works,
because that's what we

00:13:58.240 --> 00:14:00.620
were doing in our last episode.

00:14:00.620 --> 00:14:02.690
So let's go back
to parse article.

00:14:02.690 --> 00:14:04.900
MATT: So there's a lot
that's involved here

00:14:04.900 --> 00:14:08.440
in terms of creating
serializers and part files

00:14:08.440 --> 00:14:09.830
and everything else.

00:14:09.830 --> 00:14:11.080
But ultimately, when you
look at the amount of code

00:14:11.080 --> 00:14:13.000
that you're writing for what
you're going to get out of it,

00:14:13.000 --> 00:14:15.041
I'm assuming this is going
to be worth it, right?

00:14:18.152 --> 00:14:19.610
ANDREW: OK, abstract
class article.

00:14:26.414 --> 00:14:29.100
I'd have forgotten how to
deserialize with built_value.

00:14:29.100 --> 00:14:29.840
One second.

00:14:29.840 --> 00:14:31.940
MATT: There was a
serializer.deserialize.

00:14:31.940 --> 00:14:32.690
ANDREW: That's it.

00:14:32.690 --> 00:14:34.110
And you give it the right--

00:14:34.110 --> 00:14:35.540
MATT: [INAUDIBLE] serializer

00:14:35.540 --> 00:14:40.800
ANDREW: That's it so I should
have serializers.deserialize

00:14:40.800 --> 00:14:41.826
with--

00:14:41.826 --> 00:14:42.740
MATT: Yup.

00:14:42.740 --> 00:14:44.880
ANDREW: --article.serializer.

00:14:44.880 --> 00:14:49.320
And I just realized I'm missing
a line from my article class

00:14:49.320 --> 00:14:50.860
that I should not be.

00:14:50.860 --> 00:14:54.660
So one of the things
I need to do is--

00:14:54.660 --> 00:14:56.160
MATT: You need to
pop a serializer--

00:14:56.160 --> 00:14:57.410
ANDREW: Yeah, this.

00:14:57.410 --> 00:14:58.840
MATT: Yeah, there you go.

00:14:58.840 --> 00:15:01.500
ANDREW: So each class reports
that type of serializer

00:15:01.500 --> 00:15:04.770
to use to deserialize
it with built_value.

00:15:04.770 --> 00:15:06.872
And so, I need to add.

00:15:06.872 --> 00:15:09.840
And David Morgan
once reviewed my code

00:15:09.840 --> 00:15:11.920
and told me to
put it at the top.

00:15:11.920 --> 00:15:12.420
MATT: Oh.

00:15:12.420 --> 00:15:14.070
ANDREW: So I have it
on good authority.

00:15:14.070 --> 00:15:16.980
MATT: So the creator
of built_value--

00:15:16.980 --> 00:15:18.640
ANDREW: Told me where
to put certain--

00:15:18.640 --> 00:15:19.300
MATT: Your serializer.

00:15:19.300 --> 00:15:19.841
ANDREW: Yeah.

00:15:19.841 --> 00:15:23.000
MATT: How rude.

00:15:23.000 --> 00:15:25.210
ANDREW: There we go.

00:15:25.210 --> 00:15:29.940
And why don't I find you or you?

00:15:29.940 --> 00:15:32.798
Is this capitalized?

00:15:32.798 --> 00:15:34.726
No.

00:15:34.726 --> 00:15:36.290
MATT: Do they have
to be generated?

00:15:36.290 --> 00:15:37.700
ANDREW: Oh, I may need
to generate it again.

00:15:37.700 --> 00:15:37.900
You're right.

00:15:37.900 --> 00:15:38.540
MATT: Yeah.

00:15:38.540 --> 00:15:39.998
This is the thing
with built_value.

00:15:39.998 --> 00:15:42.560
You get a lot of red lines
until you run the generator.

00:15:42.560 --> 00:15:45.511
ANDREW: That's why it can be
a good idea to run the launch.

00:15:45.511 --> 00:15:46.010
MATT: Yeah.

00:15:46.010 --> 00:15:47.330
ANDREW: Which I'm not doing
here just because I want

00:15:47.330 --> 00:15:48.750
to show each time it's running.

00:15:48.750 --> 00:15:50.690
But I think we covered
that last time.

00:15:50.690 --> 00:15:51.680
You could run it
with a parameter

00:15:51.680 --> 00:15:53.304
to get it to just
watch the file system

00:15:53.304 --> 00:15:55.942
and then kick off a rebuild.

00:15:55.942 --> 00:15:56.900
MATT: Just be careful--

00:15:56.900 --> 00:15:57.110
ANDREW: Oh.

00:15:57.110 --> 00:15:57.470
MATT: --your hot rebuild--

00:15:57.470 --> 00:15:58.420
ANDREW: We messed up.

00:15:58.420 --> 00:16:00.697
MATT: --when that-- oh,
w hat happened there?

00:16:00.697 --> 00:16:02.188
ANDREW: Yup, declare.

00:16:07.170 --> 00:16:09.200
OK, so this is
the-- see, it just

00:16:09.200 --> 00:16:11.390
gave me the right
statement to use.

00:16:11.390 --> 00:16:14.450
Such nice people.

00:16:14.450 --> 00:16:16.949
It's, like, hey, you're
parsing your code,

00:16:16.949 --> 00:16:17.990
and we noticed it sucked.

00:16:17.990 --> 00:16:20.480
[LAUGHS] Let's try that again.

00:16:30.520 --> 00:16:31.020
Oh.

00:16:31.020 --> 00:16:31.770
MATT: There we go.

00:16:31.770 --> 00:16:33.540
ANDREW: Ah, I love
mature libraries.

00:16:33.540 --> 00:16:36.230
OK, that still needs a
parentheses on the end,

00:16:36.230 --> 00:16:38.209
I think.

00:16:38.209 --> 00:16:39.500
And I'm missing something here.

00:16:39.500 --> 00:16:40.600
MATT: You need to import
the serializer class.

00:16:40.600 --> 00:16:42.266
ANDREW: Yeah, that's
what I'm wondering.

00:16:42.266 --> 00:16:44.230
MATT: Yeah.

00:16:44.230 --> 00:16:46.117
ANDREW: It must be a--

00:16:46.117 --> 00:16:47.400
there we go.

00:16:47.400 --> 00:16:48.210
Cool.

00:16:48.210 --> 00:16:49.775
MATT: Sweet.

00:16:49.775 --> 00:16:50.900
ANDREW: One step at a time.

00:16:50.900 --> 00:16:57.490
OK, now I think I can
do serializer here.

00:16:57.490 --> 00:17:01.100
I'm going to give it the
object to be serialized,

00:17:01.100 --> 00:17:03.170
which, in this case,
would be the parsed JSON.

00:17:03.170 --> 00:17:03.711
MATT: Mm-hmm.

00:17:03.711 --> 00:17:08.327
ANDREW: So just like before, we
were parsing the JSON into a--

00:17:08.327 --> 00:17:10.910
it comes out as a dynamic, but
it would either be a list under

00:17:10.910 --> 00:17:13.520
the hood of IDs-- that was one
of the examples we were doing--

00:17:13.520 --> 00:17:18.440
or it would be a map
of key-value pairs.

00:17:18.440 --> 00:17:22.790
And that internal
format of the map

00:17:22.790 --> 00:17:24.950
is the same thing that
build-value will take.

00:17:24.950 --> 00:17:27.230
I'm not giving it
the raw string.

00:17:27.230 --> 00:17:31.540
And hopefully, this
will work, I think.

00:17:31.540 --> 00:17:36.820
[INAUDIBLE] Why
aren't you working--

00:17:36.820 --> 00:17:38.030
MATT: Oh, you got built list.

00:17:38.030 --> 00:17:40.363
Yeah, that's probably going
to confuse matters slightly.

00:17:43.130 --> 00:17:44.080
ANDREW: Do I need--

00:17:47.489 --> 00:17:48.426
doing something wrong.

00:17:48.426 --> 00:17:50.300
MATT: Let me see if I
can find something out.

00:17:50.300 --> 00:17:51.549
ANDREW: Let me put-- maybe I--

00:17:51.549 --> 00:17:54.720
if I import built
collection up here?

00:18:12.360 --> 00:18:14.405
MATT: There we go.

00:18:14.405 --> 00:18:16.780
ANDREW: I think that will get
picked up in the part file.

00:18:16.780 --> 00:18:17.695
Cool, OK.

00:18:17.695 --> 00:18:19.070
So I was just
missing that import

00:18:19.070 --> 00:18:21.600
for built collection,
which was confusing

00:18:21.600 --> 00:18:24.070
the poor little serializer,
because, of course,

00:18:24.070 --> 00:18:26.990
it has to deserialize
a built collection.

00:18:26.990 --> 00:18:29.690
So let's go ahead
and run this test now

00:18:29.690 --> 00:18:33.700
that I think I've got all
the statically grabbable

00:18:33.700 --> 00:18:34.360
errors here.

00:18:34.360 --> 00:18:35.352
There we go.

00:18:35.352 --> 00:18:36.310
Is that going to break?

00:18:36.310 --> 00:18:37.180
There we are.

00:18:37.180 --> 00:18:39.010
Do a reformat.

00:18:39.010 --> 00:18:44.157
Let's run-- can I
run you as a test?

00:18:53.031 --> 00:18:54.910
Oh, this isn't my
test file, is it?

00:18:54.910 --> 00:18:57.276
That's why I can't run it.

00:18:57.276 --> 00:18:58.400
MATT: Oh, you've got your--

00:18:58.400 --> 00:18:59.566
ANDREW: That's my JSON file.

00:18:59.566 --> 00:19:01.422
MATT: Oh, that's a
neat way of doing it.

00:19:01.422 --> 00:19:01.922
ANDREW: OK.

00:19:08.614 --> 00:19:09.345
OK.

00:19:09.345 --> 00:19:10.720
MATT: So you have
that in a test.

00:19:10.720 --> 00:19:11.940
You've got your JSON string.

00:19:11.940 --> 00:19:13.606
And then you're just
calling the parser.

00:19:13.606 --> 00:19:16.984
ANDREW: Yup, and this was--

00:19:16.984 --> 00:19:18.900
I'm trying to remember
if this is the real one

00:19:18.900 --> 00:19:21.716
or if this is the hacked up one
we were working with earlier.

00:19:21.716 --> 00:19:22.813
Let's wing it.

00:19:22.813 --> 00:19:26.130
MATT: Let's just cut and paste
it up into a multi-line string.

00:19:26.130 --> 00:19:27.420
Might make it easier to read.

00:19:32.280 --> 00:19:37.270
ANDREW: [INAUDIBLE] Oh,
deserialization error, OK.

00:19:37.270 --> 00:19:38.470
MATT: Yeah, it's not happy.

00:19:38.470 --> 00:19:40.096
ANDREW: Internal
link to hash map.

00:19:47.570 --> 00:19:51.250
OK, and I'm going to
stop this and back out.

00:19:51.250 --> 00:19:53.420
I'm also going to
make this bigger.

00:19:53.420 --> 00:19:57.249
Let me go make--
let me go get a--

00:19:57.249 --> 00:19:58.915
MATT: I can't remember
with built_value.

00:19:58.915 --> 00:20:01.110
Are all of those
parameters required?

00:20:01.110 --> 00:20:02.980
Or do you mark them
as required or--

00:20:02.980 --> 00:20:03.940
ANDREW: Oh, that's a good point.

00:20:03.940 --> 00:20:05.523
MATT: Some of them
might not be there.

00:20:05.523 --> 00:20:08.850
ANDREW: I think technically
all of these are nullable.

00:20:08.850 --> 00:20:13.810
Let me go back then and start
putting some nullable on these.

00:20:21.720 --> 00:20:23.490
And that, of course,
has its own--

00:20:23.490 --> 00:20:26.110
is that kind of meta?

00:20:26.110 --> 00:20:28.804
Where do you get them?

00:20:28.804 --> 00:20:29.786
MATT: Let me see.

00:20:33.862 --> 00:20:35.570
ANDREW: And it can't
come out of Flutter.

00:20:35.570 --> 00:20:36.778
It's got to come out of Dart.

00:20:41.796 --> 00:20:43.170
MATT: Is it part
of meta package?

00:20:52.651 --> 00:20:53.649
ANDREW: Annotations.

00:21:06.630 --> 00:21:09.160
Can we go steal from
the example again?

00:21:16.010 --> 00:21:17.480
Meta, so it is pulling in meta.

00:21:32.856 --> 00:21:34.344
MATT: It still
doesn't like that.

00:21:37.109 --> 00:21:38.400
ANDREW: Because it's lowercase.

00:21:38.400 --> 00:21:39.377
There we go.

00:21:39.377 --> 00:21:39.960
MATT: Perfect.

00:21:39.960 --> 00:21:41.209
ANDREW: I think that'll do it.

00:21:41.209 --> 00:21:43.872
Let me go real quick,
do source gen again

00:21:43.872 --> 00:21:45.080
to make sure this is working.

00:21:49.190 --> 00:21:51.167
So the built list will
be nullable by default,

00:21:51.167 --> 00:21:52.250
because it's a collection.

00:21:52.250 --> 00:21:53.400
MATT: Mm-hmm.

00:21:53.400 --> 00:21:58.231
ANDREW: But the primitives do
need to actually update, OK.

00:22:07.069 --> 00:22:14.010
OK, let me go back, start
closing some things.

00:22:14.010 --> 00:22:19.760
And actually, type
should always be there.

00:22:19.760 --> 00:22:21.952
By, I think, should
always be there as well.

00:22:21.952 --> 00:22:22.452
Time.

00:22:31.020 --> 00:22:34.426
I don't think poll
options get scores.

00:22:34.426 --> 00:22:38.520
Descendants can be null, OK.

00:22:38.520 --> 00:22:39.410
Let's try this.

00:22:46.760 --> 00:22:49.208
MATT: I can see now why you
want to do the watch file.

00:22:51.247 --> 00:22:53.080
ANDREW: I do like knowing
that it's running.

00:22:53.080 --> 00:22:56.470
I made a little button for it
in Intellij to actually do that.

00:22:56.470 --> 00:22:58.690
MATT: Oh, that's cool.

00:22:58.690 --> 00:23:00.660
ANDREW: OK, let's go
back down to JSON test,

00:23:00.660 --> 00:23:03.390
and let's run this one.

00:23:03.390 --> 00:23:06.802
It'll probably still fail.

00:23:06.802 --> 00:23:08.010
MATT: Oh, ye of little faith.

00:23:10.641 --> 00:23:11.391
ANDREW: All right.

00:23:19.602 --> 00:23:21.210
MATT: Internal
linked-- what is it?

00:23:21.210 --> 00:23:22.565
ANDREW: Internal linked hashmap.

00:23:27.215 --> 00:23:29.825
MATT: Do you have the
hash map inside your JSON,

00:23:29.825 --> 00:23:30.850
or do you have a map?

00:23:33.772 --> 00:23:35.824
ANDREW: I shouldn't
have any of this, but--

00:23:35.824 --> 00:23:36.324
MATT: Yeah.

00:23:44.100 --> 00:23:47.888
ANDREW: Well,
let's break it out.

00:23:47.888 --> 00:23:48.388
Dynamic.

00:23:54.340 --> 00:23:59.437
Oh, I'm not parsing
the JSON string.

00:23:59.437 --> 00:24:01.520
MATT: You're parsing a
regular string, aren't you?

00:24:01.520 --> 00:24:02.220
ANDREW: I'm just
throwing a string at it.

00:24:02.220 --> 00:24:03.344
MATT: You forgot the JSON--

00:24:03.344 --> 00:24:05.480
yeah, you should be
encoding your JSON.

00:24:05.480 --> 00:24:07.523
ANDREW: Point for me, all right.

00:24:07.523 --> 00:24:08.231
I have to write--

00:24:08.231 --> 00:24:09.800
MATT: You could've
discovered this 45 minutes--

00:24:09.800 --> 00:24:10.200
ANDREW: I know.

00:24:10.200 --> 00:24:10.783
MATT: --later.

00:24:10.783 --> 00:24:12.830
That would've been riveting
watching on YouTube.

00:24:12.830 --> 00:24:14.180
ANDREW: Just got done
talking about how you

00:24:14.180 --> 00:24:15.471
need to parse the string first.

00:24:15.471 --> 00:24:17.082
OK, so dynamic--

00:24:17.082 --> 00:24:17.582
[LAUGHS]

00:24:17.582 --> 00:24:19.000
MATT: Yeah, that's--

00:24:19.000 --> 00:24:22.306
ANDREW: --equals--
so we've got--

00:24:22.306 --> 00:24:23.930
are we doing it in here?

00:24:23.930 --> 00:24:28.760
Is that where-- oh wait,
we are decoding it in here.

00:24:28.760 --> 00:24:29.937
MATT: Partial article?

00:24:29.937 --> 00:24:30.770
ANDREW: OK, hold on.

00:24:33.330 --> 00:24:37.670
A week between filmings and
I forget my entire life.

00:24:37.670 --> 00:24:38.170
OK.

00:24:44.249 --> 00:24:45.540
OK, got a break point in there.

00:24:45.540 --> 00:24:47.900
Let's rerun this
with debug on and see

00:24:47.900 --> 00:24:49.151
where I've gone horribly awry.

00:24:49.151 --> 00:24:51.275
MATT: You know, one of the
other things we could do

00:24:51.275 --> 00:24:52.970
is comment out a
bunch of those fields

00:24:52.970 --> 00:24:55.190
and just make sure it's
working on a few of them,

00:24:55.190 --> 00:25:00.296
because it'll ignore the rest
of them in the JSON object.

00:25:00.296 --> 00:25:01.650
ANDREW: OK, there we go.

00:25:01.650 --> 00:25:02.825
So let's step over that.

00:25:05.680 --> 00:25:07.360
So what is actually
in this data?

00:25:07.360 --> 00:25:09.390
Just a little bit
of [INAUDIBLE]..

00:25:09.390 --> 00:25:13.230
MATT: Now it's going to--

00:25:13.230 --> 00:25:16.770
it's a map of a whole bunch
of strings to other things.

00:25:19.400 --> 00:25:21.580
ANDREW: So by is
a string, right?

00:25:21.580 --> 00:25:23.186
MATT: Kits is a group of a list.

00:25:23.186 --> 00:25:24.310
ANDREW: Which it should be.

00:25:24.310 --> 00:25:25.518
That's one of my collections.

00:25:25.518 --> 00:25:26.590
MATT: Yeah.

00:25:26.590 --> 00:25:28.237
ANDREW: Descendants is an int.

00:25:28.237 --> 00:25:29.570
All right, there's ID as an int.

00:25:29.570 --> 00:25:33.282
Where's descendants?

00:25:33.282 --> 00:25:36.260
Yeah, descendants is an int.

00:25:36.260 --> 00:25:38.070
Score is an int.

00:25:38.070 --> 00:25:40.860
Time is an int, which I assume
can hold a value that big.

00:25:40.860 --> 00:25:41.620
MATT: Mm-hmm.

00:25:41.620 --> 00:25:42.870
ANDREW: Title is a string.

00:25:42.870 --> 00:25:45.070
Type is also a string, even
though it should really

00:25:45.070 --> 00:25:48.150
be an enum, but that's
something to fix later.

00:25:48.150 --> 00:25:49.160
And nullable is a--

00:25:49.160 --> 00:25:50.820
and a nullable
string for the URL.

00:25:53.720 --> 00:26:00.817
MATT: I'm wondering if it's the
built collection, whether we

00:26:00.817 --> 00:26:03.150
have to do something funky
to make sure that that works.

00:26:10.100 --> 00:26:14.180
ANDREW: Oh, I'm using
the wrong serializer.

00:26:14.180 --> 00:26:16.790
That is the standard
list-based serializer, I think.

00:26:16.790 --> 00:26:18.470
And this one is the
one with the plugin.

00:26:22.224 --> 00:26:24.140
MATT: Oh, you're calling
the wrong serializer.

00:26:24.140 --> 00:26:25.450
You're trying to serialize--

00:26:25.450 --> 00:26:26.800
ANDREW: Using the normal format.

00:26:26.800 --> 00:26:29.160
MATT: Yeah.

00:26:29.160 --> 00:26:30.449
ANDREW: OK.

00:26:30.449 --> 00:26:32.615
MATT: So rule of thumb is
don't have two serializers

00:26:32.615 --> 00:26:33.790
in your serializer--

00:26:33.790 --> 00:26:35.590
ANDREW: Which I will
fix in two shakes

00:26:35.590 --> 00:26:37.510
as soon as I verify this works.

00:26:37.510 --> 00:26:41.550
All right, stop, save.

00:26:41.550 --> 00:26:45.422
Let us rerun our tests, OK?

00:26:45.422 --> 00:26:47.380
MATT: I like the way that
you have deliberately

00:26:47.380 --> 00:26:50.780
made all of these
new mistakes with

00:26:50.780 --> 00:26:52.480
built list just to
show everybody what--

00:26:52.480 --> 00:26:54.454
ANDREW: It's a kindness, yeah.

00:26:54.454 --> 00:26:55.870
Just like how I
deliberately don't

00:26:55.870 --> 00:26:59.080
prepare for these episodes just
to show everybody everything,

00:26:59.080 --> 00:26:59.970
you know?

00:26:59.970 --> 00:27:03.730
That's kind of my method.

00:27:03.730 --> 00:27:06.250
All right, let's
step over that one.

00:27:06.250 --> 00:27:08.560
Can we step over this one?

00:27:08.560 --> 00:27:11.237
We can.

00:27:11.237 --> 00:27:12.070
MATT: Did that work?

00:27:12.070 --> 00:27:12.910
ANDREW: I think it worked.

00:27:12.910 --> 00:27:13.690
We got a built
list, information--

00:27:13.690 --> 00:27:14.420
MATT: Oh, you've
got a built list.

00:27:14.420 --> 00:27:17.060
ANDREW: My key promoter, which
is normally a handy plugin

00:27:17.060 --> 00:27:18.250
that I've been running.

00:27:18.250 --> 00:27:22.400
OK, so let's take a second,
see what we've got here.

00:27:22.400 --> 00:27:27.280
So we now have an
article class that

00:27:27.280 --> 00:27:32.060
is implementing built_values
interfaces correctly.

00:27:32.060 --> 00:27:35.409
We have a source
gen'd version of it.

00:27:35.409 --> 00:27:35.950
Look at that.

00:27:35.950 --> 00:27:37.491
Nullable was in
there the whole time.

00:27:37.491 --> 00:27:40.420
It wasn't even in a package.

00:27:40.420 --> 00:27:42.850
So we have an immutable
article object now

00:27:42.850 --> 00:27:46.300
that we can populate from
parse to JSON that we

00:27:46.300 --> 00:27:47.960
can get from the network.

00:27:47.960 --> 00:27:51.260
And so, I think--

00:27:51.260 --> 00:27:54.520
do you want to take a
break here and swap?

00:27:54.520 --> 00:27:56.364
And then you can
kind of take this.

00:27:56.364 --> 00:27:58.030
And we're going to
tear out some things.

00:27:58.030 --> 00:28:00.080
There were some mocks
that got us to--

00:28:00.080 --> 00:28:01.320
MATT: OK.

00:28:01.320 --> 00:28:03.880
ANDREW: That's not
even running anymore.

00:28:03.880 --> 00:28:08.769
The version of this that we had
going from the first episode,

00:28:08.769 --> 00:28:10.060
there were some mocks involved.

00:28:10.060 --> 00:28:11.809
And so, those would
need to be ripped out,

00:28:11.809 --> 00:28:15.100
and this real article
put it in there.

00:28:15.100 --> 00:28:16.956
MATT: But you don't have any--

00:28:16.956 --> 00:28:18.580
you have no networking
code yet, right?

00:28:18.580 --> 00:28:19.996
ANDREW: No networking
code at all.

00:28:19.996 --> 00:28:21.905
MATT: So do we want
to build some tests

00:28:21.905 --> 00:28:23.030
around the networking code?

00:28:23.030 --> 00:28:24.820
I know they're not really tests
that you would want to run,

00:28:24.820 --> 00:28:25.870
because they require a network.

00:28:25.870 --> 00:28:27.465
But at least they
would get us going.

00:28:27.465 --> 00:28:28.840
Or do we want to
dive straight in

00:28:28.840 --> 00:28:32.740
and jump straight into
the networking side?

00:28:32.740 --> 00:28:35.410
ANDREW: That's a good question.

00:28:35.410 --> 00:28:38.680
I think it would be good to
just show at least one call--

00:28:38.680 --> 00:28:39.310
MATT: Yeah.

00:28:39.310 --> 00:28:40.620
ANDREW: --to go get some JSON.

00:28:40.620 --> 00:28:42.430
And we could still do
that in a test, too.

00:28:42.430 --> 00:28:44.971
MATT: Yes, why don't we start
with a test that actually pulls

00:28:44.971 --> 00:28:47.980
the JSON back from Hacker News?

00:28:47.980 --> 00:28:49.855
And then we can see
it populating here.

00:28:49.855 --> 00:28:51.730
And at least then we
know things are working.

00:28:51.730 --> 00:28:54.277
ANDREW: Yes.

00:28:54.277 --> 00:28:56.110
MATT: Is it going to
return a single article

00:28:56.110 --> 00:28:56.860
or multiple articles?

00:28:56.860 --> 00:28:58.510
ANDREW: So that's
the fun of the API.

00:28:58.510 --> 00:29:04.970
It returns a list of IDs.

00:29:04.970 --> 00:29:06.280
So this will be kind of fun.

00:29:06.280 --> 00:29:08.480
It returns a list of IDs
that you can get the top--

00:29:08.480 --> 00:29:08.980
MATT: Oh.

00:29:08.980 --> 00:29:10.660
ANDREW: --500.

00:29:10.660 --> 00:29:14.055
And then you need to,
one after another--

00:29:14.055 --> 00:29:15.680
MATT: Wait, I have
to make individual--

00:29:15.680 --> 00:29:15.940
ANDREW: --by ID.

00:29:15.940 --> 00:29:16.600
MATT: --network call by ID?

00:29:16.600 --> 00:29:17.860
ANDREW: Individual
network calls.

00:29:17.860 --> 00:29:18.470
MATT: Seriously?

00:29:18.470 --> 00:29:18.970
ANDREW: Yeah.

00:29:18.970 --> 00:29:20.350
We'll probably be talking
about local storage

00:29:20.350 --> 00:29:21.790
and caching in our next episode.

00:29:21.790 --> 00:29:22.420
MATT: Yeah.

00:29:22.420 --> 00:29:23.860
We'll be talking about
not flooding the network.

00:29:23.860 --> 00:29:24.516
ANDREW: Yeah.

00:29:24.516 --> 00:29:26.140
MATT: OK, well, that
makes life easier.

00:29:26.140 --> 00:29:28.000
ANDREW: Mm-hmm.

00:29:28.000 --> 00:29:29.859
OK, so--

00:29:29.859 --> 00:29:32.400
MATT: We're not going to do a
built value for a list of ints?

00:29:32.400 --> 00:29:33.310
ANDREW: No, no, I don't think--

00:29:33.310 --> 00:29:34.210
MATT: No, that would be nuts.

00:29:34.210 --> 00:29:35.770
ANDREW: That would just
be a built collection--

00:29:35.770 --> 00:29:36.180
MATT: Yeah.

00:29:36.180 --> 00:29:36.320
ANDREW: --anyway.

00:29:36.320 --> 00:29:37.528
MATT: That would be overkill.

00:29:37.528 --> 00:29:41.440
But for something with
a dozen parameters,

00:29:41.440 --> 00:29:44.090
including internal lists of
maps and everything else,

00:29:44.090 --> 00:29:48.420
built_value, once you remember
to call the right serializer,

00:29:48.420 --> 00:29:49.139
is the way to go.

00:29:49.139 --> 00:29:49.680
ANDREW: Yeah.

00:29:49.680 --> 00:29:50.140
MATT: Yeah.

00:29:50.140 --> 00:29:51.973
ANDREW: OK, so we're
going to switch places.

00:29:51.973 --> 00:29:54.390
[SNAPS FINGERS] This
is where we switch.

00:29:54.390 --> 00:29:56.317
MATT: All right,
that's where we switch.

00:29:56.317 --> 00:29:58.650
See, if Filip was here, that
would've been super smooth.

00:29:58.650 --> 00:29:59.750
But Filip isn't here.

00:29:59.750 --> 00:30:01.300
ANDREW: You really didn't
watch the second episode

00:30:01.300 --> 00:30:01.980
all the way through, did you?

00:30:01.980 --> 00:30:03.900
[LAUGHS] I think I
almost kicked over--

00:30:03.900 --> 00:30:05.200
MATT: I was coding
while I was watching it.

00:30:05.200 --> 00:30:05.560
At least, you know--

00:30:05.560 --> 00:30:06.250
ANDREW: All right, you're busy.

00:30:06.250 --> 00:30:06.750
MATT: Yeah.

00:30:06.750 --> 00:30:07.665
ANDREW: All right.

00:30:07.665 --> 00:30:08.290
And we're back.

00:30:08.290 --> 00:30:08.919
MATT: Ha-ha.

00:30:08.919 --> 00:30:11.210
ANDREW: Can you hand me that
sheet of paper down there?

00:30:11.210 --> 00:30:12.375
The one with writing on it?

00:30:12.375 --> 00:30:13.960
Because I want to
talk about some stuff.

00:30:13.960 --> 00:30:15.120
MATT: Is there a cheat sheet?

00:30:15.120 --> 00:30:16.411
ANDREW: There is a cheat sheet.

00:30:16.411 --> 00:30:17.830
MATT: Oh OK, good.

00:30:17.830 --> 00:30:22.400
ANDREW: Much like we crib code
from other people's examples.

00:30:22.400 --> 00:30:23.860
There we go.

00:30:23.860 --> 00:30:25.810
Yeah, so I thought this
also be a good time--

00:30:25.810 --> 00:30:27.490
we talked in our last
episode about how

00:30:27.490 --> 00:30:30.820
we're going to respond to
questions that people posted,

00:30:30.820 --> 00:30:33.940
which is great if I can keep
myself from answering them

00:30:33.940 --> 00:30:36.280
too quickly in the
YouTube comments,

00:30:36.280 --> 00:30:37.590
which is-- it's my instinct.

00:30:37.590 --> 00:30:38.620
I see somebody ask a question.

00:30:38.620 --> 00:30:39.800
It's, like, oh, I
can help with that.

00:30:39.800 --> 00:30:42.730
And I'll type out an answer, and
it makes it slightly less fun

00:30:42.730 --> 00:30:45.145
to answer them here, a
little bit less dramatic.

00:30:45.145 --> 00:30:46.520
MATT: We're going
to be dramatic?

00:30:46.520 --> 00:30:46.820
ANDREW: Yeah.

00:30:46.820 --> 00:30:47.440
MATT: Excellent.

00:30:47.440 --> 00:30:48.560
ANDREW: But there are some--

00:30:48.560 --> 00:30:50.768
I actually learned something
from one of the comments

00:30:50.768 --> 00:30:52.474
that somebody put down.

00:30:52.474 --> 00:30:53.890
And hopefully, the
graphics people

00:30:53.890 --> 00:30:56.830
can put it right about
here in a second.

00:30:56.830 --> 00:30:59.402
We talked about why there
is no reflection in Flutter.

00:30:59.402 --> 00:31:00.610
MATT: There is no reflection.

00:31:00.610 --> 00:31:02.609
There is reflection in
Dart, but not in Flutter.

00:31:02.609 --> 00:31:05.290
ANDREW: And I kind of butchered
the explanation for why.

00:31:05.290 --> 00:31:08.380
And the-- it does
relate to the fact

00:31:08.380 --> 00:31:11.170
that the Dart is, ahead of
time, compiled to native code.

00:31:11.170 --> 00:31:13.300
But the detail
that I left out is

00:31:13.300 --> 00:31:15.580
that Dart takes advantage
of trees shaking.

00:31:15.580 --> 00:31:16.450
So it can use--

00:31:16.450 --> 00:31:16.950
MATT: Oh.

00:31:16.950 --> 00:31:19.035
ANDREW: --you know,
delightful static language.

00:31:19.035 --> 00:31:22.000
It's strongly typed,
statically dispatched, I think.

00:31:22.000 --> 00:31:23.552
And so, we can go
through and see

00:31:23.552 --> 00:31:25.010
which methods you're
actually going

00:31:25.010 --> 00:31:26.502
to use out of your codebase.

00:31:26.502 --> 00:31:28.460
So if you pull in a
package, you know, you only

00:31:28.460 --> 00:31:30.680
use two methods out of
it, it can go in there

00:31:30.680 --> 00:31:33.320
and just toss out all the
code that you're never

00:31:33.320 --> 00:31:37.190
going to call, which is great
until you try to use reflection

00:31:37.190 --> 00:31:39.200
to dynamically call one
of those methods that's

00:31:39.200 --> 00:31:41.190
now no longer in your app.

00:31:41.190 --> 00:31:45.046
So that is the reason
that reflection is out

00:31:45.046 --> 00:31:45.670
for the moment.

00:31:45.670 --> 00:31:48.890
There is talk about bringing
in some annotation-based stuff

00:31:48.890 --> 00:31:51.871
to tag things and say hey, I
might call this with reflection

00:31:51.871 --> 00:31:52.370
later.

00:31:52.370 --> 00:31:55.190
Don't take it out when
you do the tree shaking.

00:31:55.190 --> 00:31:58.896
But as of right
now, no reflection.

00:31:58.896 --> 00:32:00.020
So thanks for that comment.

00:32:00.020 --> 00:32:03.770
I actually, you know, got to dig
in and learn something from it.

00:32:03.770 --> 00:32:05.052
What else did we have?

00:32:05.052 --> 00:32:06.010
We also had something--

00:32:06.010 --> 00:32:07.885
I don't think this is
going to come up today,

00:32:07.885 --> 00:32:09.950
but somebody mentioned
HTTP overrides in Dart.

00:32:09.950 --> 00:32:11.100
Have you ever used those?

00:32:11.100 --> 00:32:13.160
MATT: I have never used
HTTP overrides in Dart.

00:32:13.160 --> 00:32:16.880
ANDREW: It's a way to short
circuit the HTTP client library

00:32:16.880 --> 00:32:18.710
and say, run this
code as if this

00:32:18.710 --> 00:32:23.900
object I'm going to give
you is the HTTP client.

00:32:23.900 --> 00:32:25.700
MATT: It's like marking
out the HTTP piece?

00:32:25.700 --> 00:32:26.339
ANDREW: Mm-hmm.

00:32:26.339 --> 00:32:28.130
MATT: So you can just
provide JSON directly

00:32:28.130 --> 00:32:30.500
from, I don't know, shared
preferences or something?

00:32:30.500 --> 00:32:31.945
ANDREW: Whatever you
want to do, mm-hmm.

00:32:31.945 --> 00:32:32.430
MATT: Oh, that's cool.

00:32:32.430 --> 00:32:33.890
ANDREW: So for
testing, you know,

00:32:33.890 --> 00:32:37.170
it's how you would build a
little convenient fake HTTP

00:32:37.170 --> 00:32:37.930
client.

00:32:37.930 --> 00:32:42.404
MATT: Is that with the Dart
HTTP or the HTTP package?

00:32:42.404 --> 00:32:44.570
ANDREW: That's a good-- we
could probably look it up

00:32:44.570 --> 00:32:45.000
real quick if you want want.

00:32:45.000 --> 00:32:45.580
MATT: We should
probably look it up.

00:32:45.580 --> 00:32:45.770
ANDREW: Yeah.

00:32:45.770 --> 00:32:47.311
MATT: Where's your--
oh, there we go.

00:32:47.311 --> 00:32:49.142
ANDREW: Mm-hmm.

00:32:49.142 --> 00:32:54.112
MATT: Dart HTTP override.

00:32:54.112 --> 00:32:55.603
ANDREW: There you go.

00:32:55.603 --> 00:32:56.969
MATT: It looks--

00:32:56.969 --> 00:32:58.760
ANDREW: I think if you
look in HTTP client,

00:32:58.760 --> 00:33:01.280
you'll see it on the left.

00:33:01.280 --> 00:33:03.860
So if you-- or am I
used to the Flutter one,

00:33:03.860 --> 00:33:05.890
where we get all
the rest of them?

00:33:05.890 --> 00:33:06.816
Not on there?

00:33:06.816 --> 00:33:09.137
MATT: Not that I could see, no.

00:33:09.137 --> 00:33:10.220
ANDREW: OK, it does exist.

00:33:10.220 --> 00:33:13.499
It's not like the
Snuffleupagus, I swear.

00:33:13.499 --> 00:33:14.540
It's definitely in there.

00:33:17.480 --> 00:33:18.010
Cool, OK.

00:33:18.010 --> 00:33:18.510
So--

00:33:18.510 --> 00:33:19.310
MATT: Right.

00:33:19.310 --> 00:33:22.200
ANDREW: Let's get
back to some things.

00:33:22.200 --> 00:33:24.030
MATT: Great, IntelliJ.

00:33:24.030 --> 00:33:25.310
I use Visual Studio Code, so--

00:33:25.310 --> 00:33:25.560
ANDREW: Yeah, I know.

00:33:25.560 --> 00:33:26.160
MATT: --this is going to be fun.

00:33:26.160 --> 00:33:27.590
ANDREW: Filip uses
Android Studio.

00:33:27.590 --> 00:33:30.800
MATT: So we're going to have
some interesting coding, OK.

00:33:30.800 --> 00:33:31.830
So how does this work?

00:33:31.830 --> 00:33:37.640
We have this, and you have
your tests in json_test.dart.

00:33:37.640 --> 00:33:38.540
ANDREW: Mm-hmm.

00:33:38.540 --> 00:33:41.690
MATT: So conceivably, I can
create a new test, right?

00:33:41.690 --> 00:33:42.840
ANDREW: Mm-hmm.

00:33:42.840 --> 00:33:50.900
MATT: That is going to do
something like parses item.json

00:33:50.900 --> 00:33:54.200
over a network.

00:33:54.200 --> 00:33:55.856
And so, right, what
are we going to do?

00:33:55.856 --> 00:33:57.730
We're going to not want
to have this anymore.

00:33:57.730 --> 00:33:58.750
So we can--

00:33:58.750 --> 00:34:02.066
ANDREW: Yeah, we're going
to go get the real business.

00:34:02.066 --> 00:34:04.460
MATT: And we are going to have--

00:34:04.460 --> 00:34:06.420
so you use const.

00:34:06.420 --> 00:34:09.539
I typically use things
like final for mine,

00:34:09.539 --> 00:34:10.580
which I prefer much less.

00:34:10.580 --> 00:34:11.870
If I'm going to
have a URL in here--

00:34:11.870 --> 00:34:12.889
ANDREW: I think
Filip wrote that one.

00:34:12.889 --> 00:34:13.860
[LAUGHS]

00:34:13.860 --> 00:34:15.670
MATT: OK, all right.

00:34:15.670 --> 00:34:18.260
We're going to use final.

00:34:18.260 --> 00:34:19.984
ANDREW: Actually,
real quick, I ran

00:34:19.984 --> 00:34:22.400
into an interesting discussion
with some of the tools team

00:34:22.400 --> 00:34:24.608
when we were talking to them
this past week about how

00:34:24.608 --> 00:34:26.690
constants-- if you
change a constant,

00:34:26.690 --> 00:34:29.900
they said that will get
reloaded for a hot reload,

00:34:29.900 --> 00:34:31.707
but a final will not.

00:34:31.707 --> 00:34:33.290
MATT: Oh, it'll
rebuild the constants?

00:34:33.290 --> 00:34:35.135
ANDREW: Because that's--
so it's a stateful--

00:34:35.135 --> 00:34:35.420
MATT: Oh.

00:34:35.420 --> 00:34:36.794
ANDREW: --hot
reload, so it wants

00:34:36.794 --> 00:34:39.330
to keep track of the
state of your object.

00:34:39.330 --> 00:34:41.659
And so, that includes
any final variables

00:34:41.659 --> 00:34:43.520
that you've set at that point.

00:34:43.520 --> 00:34:46.969
But constants aren't
considered part of that state.

00:34:46.969 --> 00:34:51.380
And so, apparently, if you
set a const on a variable,

00:34:51.380 --> 00:34:52.547
hot reload will update that.

00:34:52.547 --> 00:34:53.963
If you're setting
const somewhere,

00:34:53.963 --> 00:34:55.690
and you want to see
the effect of them,

00:34:55.690 --> 00:34:57.820
it will update that
for a hot reload.

00:34:57.820 --> 00:35:00.377
But a final, it'll be
like, oh, that's app state.

00:35:00.377 --> 00:35:01.460
I'm stateful, so I'm not--

00:35:01.460 --> 00:35:01.580
MATT: Interesting.

00:35:01.580 --> 00:35:03.230
ANDREW: --going
to overwrite that.

00:35:03.230 --> 00:35:04.130
MATT: I'm going to
have to try that out.

00:35:04.130 --> 00:35:05.540
ANDREW: Probably doesn't
matter for a test,

00:35:05.540 --> 00:35:07.914
but it's an interesting bit
of trivia that I came across,

00:35:07.914 --> 00:35:10.370
and I wanted to share it, too.

00:35:10.370 --> 00:35:12.950
MATT: OK, so where's my
Hacker News API docs?

00:35:12.950 --> 00:35:14.540
ANDREW: That would be--

00:35:14.540 --> 00:35:16.362
we had them just a second ago.

00:35:16.362 --> 00:35:18.320
I think maybe you overwrote
them with that one.

00:35:18.320 --> 00:35:19.676
MATT: Hacker News--

00:35:19.676 --> 00:35:20.991
ANDREW: Yeah.

00:35:20.991 --> 00:35:21.490
MATT: --API.

00:35:21.490 --> 00:35:22.220
There we go.

00:35:22.220 --> 00:35:24.219
ANDREW: I think this it's
just an open endpoint.

00:35:26.320 --> 00:35:29.390
MATT: OK, so let's have a
look and see how this works.

00:35:29.390 --> 00:35:32.770
So we have--

00:35:32.770 --> 00:35:34.030
OK, so there's a prefix.

00:35:34.030 --> 00:35:35.380
So let's just get that in.

00:35:35.380 --> 00:35:38.152
SO URL prefix.

00:35:41.560 --> 00:35:44.550
And I'm not going
to be super clever

00:35:44.550 --> 00:35:46.617
and build these with
nice URL builders.

00:35:46.617 --> 00:35:48.450
I'm just going to go
straight for the string

00:35:48.450 --> 00:35:50.550
and be done with it
for the beginning.

00:35:50.550 --> 00:35:55.020
So you said that there
is a way of getting IDs.

00:35:55.020 --> 00:35:58.000
ANDREW: Mm-hmm, so it's--

00:35:58.000 --> 00:35:58.970
MATT: Where is this?

00:35:58.970 --> 00:35:59.756
Is it this?

00:35:59.756 --> 00:36:00.270
ANDREW: Down a little bit more.

00:36:00.270 --> 00:36:01.140
No, top.

00:36:01.140 --> 00:36:01.680
There it is.

00:36:01.680 --> 00:36:02.596
MATT: Top stories, OK.

00:36:02.596 --> 00:36:05.394
So we are going to start
by getting top stories.

00:36:05.394 --> 00:36:07.560
No, we're going to get best
stories, because they're

00:36:07.560 --> 00:36:10.350
better than the top stories,
because they're the best.

00:36:10.350 --> 00:36:10.850
All right.

00:36:10.850 --> 00:36:12.990
ANDREW: I don't know if best
is best all time or what.

00:36:12.990 --> 00:36:13.300
MATT: Bestest--

00:36:13.300 --> 00:36:13.680
ANDREW: I think--

00:36:13.680 --> 00:36:14.610
MATT: --stories ever.

00:36:14.610 --> 00:36:16.830
ANDREW: --there might be a
.json on the end of that.

00:36:16.830 --> 00:36:17.840
I don't know.

00:36:17.840 --> 00:36:19.565
MATT: You know what we can do?

00:36:19.565 --> 00:36:20.190
We can--

00:36:20.190 --> 00:36:21.530
ANDREW: Now, we can always test.

00:36:21.530 --> 00:36:22.320
MATT: Nice URLs.

00:36:26.720 --> 00:36:27.892
I cannot create a new tab.

00:36:27.892 --> 00:36:29.600
I can cut and paste
like a normal person.

00:36:33.980 --> 00:36:35.284
Oh.

00:36:35.284 --> 00:36:38.152
ANDREW: [LAUGHS]

00:36:38.152 --> 00:36:39.360
MATT: I have broken Firebase.

00:36:39.360 --> 00:36:40.000
ANDREW: No.

00:36:40.000 --> 00:36:41.130
MATT: OK, let's
try it with .json.

00:36:41.130 --> 00:36:41.830
ANDREW: There we go.

00:36:41.830 --> 00:36:43.825
MATT: I think this is-- because
this is using the Firebase--

00:36:43.825 --> 00:36:44.110
ANDREW: API.

00:36:44.110 --> 00:36:45.100
MATT: --standard database.

00:36:45.100 --> 00:36:45.440
OK, there we go.

00:36:45.440 --> 00:36:46.273
ANDREW: There we go.

00:36:46.273 --> 00:36:47.650
MATT: OK.

00:36:47.650 --> 00:36:49.930
I didn't break
Firebase, awesome.

00:36:49.930 --> 00:36:52.860
So we need
besteststoriesever.json, chase

00:36:52.860 --> 00:36:54.760
and that's great.

00:36:54.760 --> 00:36:57.310
OK, so what are we
going to do next?

00:36:57.310 --> 00:37:00.730
So we're going to
have call HTTP.

00:37:00.730 --> 00:37:05.270
So Dart has a
built-in HTTP library.

00:37:05.270 --> 00:37:05.870
ANDREW: Mm-hm.

00:37:05.870 --> 00:37:06.590
MATT: It's fine.

00:37:06.590 --> 00:37:08.360
It's really good.

00:37:08.360 --> 00:37:11.720
But people have
improved on it and have

00:37:11.720 --> 00:37:14.540
created a HTTP
package, which, if we

00:37:14.540 --> 00:37:21.670
go take a look at the
Dart pub packages,

00:37:21.670 --> 00:37:24.880
we shall see that usually
it's up near the top.

00:37:24.880 --> 00:37:27.125
ANDREW: Yeah, one would imagine.

00:37:27.125 --> 00:37:30.210
MATT: It's probably one of the
D package you will almost always

00:37:30.210 --> 00:37:32.790
include in, which gives
you really nice things

00:37:32.790 --> 00:37:35.200
like basically giving you
gets and posts really,

00:37:35.200 --> 00:37:38.970
really, really easily and
returning things as a future

00:37:38.970 --> 00:37:40.290
as HTTP does.

00:37:40.290 --> 00:37:43.140
This also is super useful
if you want to stream data

00:37:43.140 --> 00:37:44.430
into your apps.

00:37:44.430 --> 00:37:47.400
So if you actually want
to get a stream of bytes

00:37:47.400 --> 00:37:51.690
and do some funky real-time
parsing as the stream of bytes

00:37:51.690 --> 00:37:53.582
comes in, this also
can support that.

00:37:53.582 --> 00:37:55.290
I'm not going to get
into that, because I

00:37:55.290 --> 00:37:56.580
don't remember how it works.

00:37:56.580 --> 00:37:59.034
But trust me, it
is there somewhere.

00:37:59.034 --> 00:38:00.700
So we're going to do
a couple of things.

00:38:00.700 --> 00:38:03.990
One is, I think, weirdly--

00:38:03.990 --> 00:38:08.422
even though it's not
in our pub spec--

00:38:08.422 --> 00:38:10.130
ANDREW: Are you thinking
it might be on--

00:38:10.130 --> 00:38:11.930
MATT: --it does--

00:38:11.930 --> 00:38:13.360
ANDREW: What just happened?

00:38:13.360 --> 00:38:13.980
MATT: --actually
exist, because--

00:38:13.980 --> 00:38:15.688
ANDREW: Does something
else depend on it?

00:38:15.688 --> 00:38:16.770
MATT: Flutter does.

00:38:16.770 --> 00:38:17.690
So it's in there with Flutter--

00:38:17.690 --> 00:38:17.970
ANDREW: Interesting.

00:38:17.970 --> 00:38:19.102
MATT: --which is nice.

00:38:19.102 --> 00:38:20.560
Don't depend on
versions that are--

00:38:20.560 --> 00:38:21.101
ANDREW: Yeah.

00:38:21.101 --> 00:38:24.890
MATT: --in Flutter, because
as much as version dependency,

00:38:24.890 --> 00:38:25.530
et cetera--

00:38:25.530 --> 00:38:27.870
ANDREW: Yeah, as much fun
as implicit unversioned

00:38:27.870 --> 00:38:29.966
dependencies we
should probably have--

00:38:29.966 --> 00:38:31.590
MATT: I pretty much
remember that these

00:38:31.590 --> 00:38:32.500
are very low numbers.

00:38:32.500 --> 00:38:35.640
But trust me, this is
not super alpha software.

00:38:35.640 --> 00:38:39.459
This is actually-- this is
actually used by everyone,

00:38:39.459 --> 00:38:41.250
and most of those people
run the Dart team.

00:38:41.250 --> 00:38:43.010
You'll recognize
those email addresses.

00:38:43.010 --> 00:38:43.590
ANDREW: Oh yeah, there's Kevin.

00:38:43.590 --> 00:38:44.730
MATT: Yeah, and--

00:38:44.730 --> 00:38:46.563
ANDREW: He's found
errors in my code before.

00:38:46.563 --> 00:38:48.006
He's a nice guy.

00:38:48.006 --> 00:38:49.467
MATT: Your code's perfect.

00:38:49.467 --> 00:38:51.300
ANDREW: [LAUGHS] Because
it's been reviewed.

00:38:51.300 --> 00:38:51.810
MATT: Save.

00:38:51.810 --> 00:38:53.760
And does this automatically--

00:38:53.760 --> 00:38:54.790
ANDREW: No, you've got
to do a packages get.

00:38:54.790 --> 00:38:55.280
MATT: Use get?

00:38:55.280 --> 00:38:55.780
OK.

00:38:55.780 --> 00:38:57.280
Visual Studio Code does--

00:38:57.280 --> 00:38:58.710
OK.

00:38:58.710 --> 00:39:00.120
No ID was here.

00:39:00.120 --> 00:39:01.578
That's fine.

00:39:01.578 --> 00:39:02.495
[INAUDIBLE] things.

00:39:02.495 --> 00:39:03.620
ANDREW: Did you do the get?

00:39:11.310 --> 00:39:12.060
MATT: There we go.

00:39:12.060 --> 00:39:14.416
ANDREW: That also works.

00:39:14.416 --> 00:39:15.110
MATT: Yay, OK.

00:39:15.110 --> 00:39:17.022
ANDREW: When in doubt,
the command line tools

00:39:17.022 --> 00:39:17.730
are always there.

00:39:17.730 --> 00:39:18.900
MATT: Yes.

00:39:18.900 --> 00:39:19.840
So we have our URL.

00:39:19.840 --> 00:39:20.760
ANDREW: Mm-hmm.

00:39:20.760 --> 00:39:24.960
MATT: And we are now
going to fetch our things.

00:39:24.960 --> 00:39:27.150
So I think we can
just do http.get.

00:39:27.150 --> 00:39:28.650
ANDREW: Mm-hmm.

00:39:28.650 --> 00:39:32.170
MATT: This is going to take
our URL out This is nice.

00:39:32.170 --> 00:39:36.330
This is going to
return us a future.

00:39:36.330 --> 00:39:43.590
So I could do final
response equals a weight.

00:39:43.590 --> 00:39:44.240
That's fine.

00:39:44.240 --> 00:39:44.930
And then I can make this--

00:39:44.930 --> 00:39:46.721
ANDREW: Do we have to
tag that as a async--

00:39:46.721 --> 00:39:51.710
MATT: Async, which is probably
a better way of doing it.

00:39:51.710 --> 00:39:55.026
Actually, with HTTP, using
.then leads to nice structures.

00:39:55.026 --> 00:39:57.150
But because we're going to
do an expect at the end,

00:39:57.150 --> 00:39:58.108
it's going to lead to--

00:39:58.108 --> 00:39:59.462
ANDREW: Yeah.

00:39:59.462 --> 00:40:00.920
MATT: --anonymous
function madness,

00:40:00.920 --> 00:40:01.920
so let's do it this way.

00:40:01.920 --> 00:40:02.890
ANDREW: Mm-hmm.

00:40:02.890 --> 00:40:05.749
MATT: So I'm just going to use
my res there, which is fine.

00:40:05.749 --> 00:40:06.540
So what do we have?

00:40:06.540 --> 00:40:17.190
OK, so probably I want to check
if res.statusCode is usually

00:40:17.190 --> 00:40:18.590
do not equal to 200.

00:40:18.590 --> 00:40:20.477
Then we're going to do
some error checking.

00:40:20.477 --> 00:40:21.060
You know what?

00:40:21.060 --> 00:40:22.740
This is just us doing a test.

00:40:22.740 --> 00:40:23.310
ANDREW: Yeah.

00:40:23.310 --> 00:40:26.400
MATT: So I'm just going to
keep this nice and simple

00:40:26.400 --> 00:40:28.539
and not handle any errors.

00:40:28.539 --> 00:40:30.080
And so, what's this
going to give us.

00:40:30.080 --> 00:40:32.440
This is going to
give us res.body.

00:40:32.440 --> 00:40:33.730
This is JSON.

00:40:33.730 --> 00:40:34.980
ANDREW: It should be just--

00:40:34.980 --> 00:40:37.220
do we have to decode that
or anything like that?

00:40:37.220 --> 00:40:40.680
MATT: We're going to
have to encode it,

00:40:40.680 --> 00:40:43.110
because this is a string.

00:40:43.110 --> 00:40:44.550
I don't think it--

00:40:44.550 --> 00:40:46.927
ANDREW: We don't get
UTF-8 for free, right?

00:40:46.927 --> 00:40:48.510
Is there something
we have to do to go

00:40:48.510 --> 00:40:50.717
from a byte stream to
an actual string or--

00:40:50.717 --> 00:40:52.300
MATT: I think this
will give us UTF-8.

00:40:52.300 --> 00:40:52.980
ANDREW: Oh, wow.

00:40:52.980 --> 00:40:56.040
MATT: In a stream situation,
you have to decode the bytes.

00:40:56.040 --> 00:40:56.700
ANDREW: OK.

00:40:56.700 --> 00:40:58.034
MATT: When you get the body, I--

00:40:58.034 --> 00:40:59.533
we're going to find
out in a second.

00:40:59.533 --> 00:41:00.270
ANDREW: Yeah.

00:41:00.270 --> 00:41:04.755
MATT: So we're going to say
this is res.body so-- in final.

00:41:04.755 --> 00:41:08.260
JSON string equals res.body.

00:41:08.260 --> 00:41:10.040
And that's going
to be json.encode--

00:41:12.209 --> 00:41:14.250
ANDREW: Wait, I think
parse article's doing that.

00:41:14.250 --> 00:41:15.791
If we go back and
look at it, I think

00:41:15.791 --> 00:41:18.570
this is where I ran into
trouble half an hour ago.

00:41:18.570 --> 00:41:20.172
Command, click
will do it for you.

00:41:26.568 --> 00:41:28.930
MATT: Am I doing
something wrong?

00:41:28.930 --> 00:41:29.430
ANDREW: No.

00:41:29.430 --> 00:41:32.437
MATT: Oh, it's because my
code base is all broken.

00:41:32.437 --> 00:41:32.936
ANDREW: OK.

00:41:36.198 --> 00:41:36.850
Yay.

00:41:36.850 --> 00:41:37.600
MATT: OK, perfect.

00:41:37.600 --> 00:41:38.620
ANDREW: So I think it's
doing the decode, yeah.

00:41:38.620 --> 00:41:38.940
MATT: It's just a random string.

00:41:38.940 --> 00:41:40.756
ANDREW: I just ran into
an issue last time.

00:41:40.756 --> 00:41:43.050
MATT: OK, let's-- we
don't need to do that,

00:41:43.050 --> 00:41:45.755
so we just need to do res.body.

00:41:45.755 --> 00:41:46.380
ANDREW: Mm-hmm.

00:41:51.080 --> 00:41:52.470
MATT: OK, so how do I run this--

00:41:52.470 --> 00:41:52.860
ANDREW: Wait a second.

00:41:52.860 --> 00:41:53.510
MATT: Oh, wait.

00:41:53.510 --> 00:41:54.180
Look at that.

00:41:54.180 --> 00:41:56.770
ANDREW: [LAUGHS]
So we'd forgotten

00:41:56.770 --> 00:41:58.770
that we're getting the
best stories list and not

00:41:58.770 --> 00:42:00.900
the articles.

00:42:00.900 --> 00:42:02.441
You're parsing an
article with a--

00:42:02.441 --> 00:42:02.940
MATT: OK.

00:42:02.940 --> 00:42:03.970
ANDREW: --list of items.

00:42:03.970 --> 00:42:06.010
MATT: So my-- yes, we
now have a list of IDs.

00:42:06.010 --> 00:42:08.577
So we're going to do some
manual JSON deconstruction.

00:42:08.577 --> 00:42:09.410
ANDREW: There we go.

00:42:09.410 --> 00:42:10.868
MATT: So we are
going to do final--

00:42:14.574 --> 00:42:21.290
we're going to ID
list JSON equals--

00:42:21.290 --> 00:42:23.090
my naming is terrible.

00:42:23.090 --> 00:42:23.967
json.decode.

00:42:30.050 --> 00:42:35.260
And we are going to
decode my res.body.

00:42:35.260 --> 00:42:39.390
ANDREW: I may have pulled
dart:convert out of the imports

00:42:39.390 --> 00:42:42.378
above.

00:42:42.378 --> 00:42:43.380
MATT: Beg your pardon?

00:42:43.380 --> 00:42:44.280
ANDREW: I may have--

00:42:44.280 --> 00:42:47.111
I don't think I have
dart:convert in this file.

00:42:47.111 --> 00:42:47.610
MATT: OK.

00:42:47.610 --> 00:42:48.780
ANDREW: [INAUDIBLE]

00:42:48.780 --> 00:42:53.710
MATT: Import dart:convert
gives me my JSON.

00:42:53.710 --> 00:42:57.270
OK, so at this
point, json.decode,

00:42:57.270 --> 00:42:59.131
it's going to give us a dynamic.

00:42:59.131 --> 00:43:01.380
But it's going to be an
iterable, because it's a list,

00:43:01.380 --> 00:43:01.860
I think.

00:43:01.860 --> 00:43:02.310
ANDREW: Mm-hmm.

00:43:02.310 --> 00:43:03.434
MATT: So we should be fine.

00:43:03.434 --> 00:43:06.090
I could do something a
little more clever like this.

00:43:11.630 --> 00:43:14.180
Not too sure if we
need to do that here.

00:43:14.180 --> 00:43:16.730
ANDREW: So that would get
you a list of dynamic, right?

00:43:16.730 --> 00:43:18.340
MATT: I think that would convert
that dynamic into a list.

00:43:18.340 --> 00:43:19.090
But it would be--

00:43:19.090 --> 00:43:20.890
ANDREW: But then it
would be a generic type

00:43:20.890 --> 00:43:21.530
that would be list--

00:43:21.530 --> 00:43:21.680
MATT: Of dynamic.

00:43:21.680 --> 00:43:22.721
ANDREW: --of dynamic, OK.

00:43:22.721 --> 00:43:24.935
MATT: So let's not do
anything too clever, because--

00:43:24.935 --> 00:43:25.930
ANDREW: Works for me.

00:43:25.930 --> 00:43:28.230
MATT: I know what happens
when we do clever things.

00:43:28.230 --> 00:43:29.390
Don't work.

00:43:29.390 --> 00:43:36.880
And so, we're going to
do ID list JSON dot--

00:43:39.820 --> 00:43:42.770
we're probably-- you know, let's
just see if this is working.

00:43:42.770 --> 00:43:44.430
So let's do if--

00:43:50.412 --> 00:43:51.370
this is no longer JSON.

00:43:51.370 --> 00:43:52.923
It's just ID list.

00:43:52.923 --> 00:44:00.920
ID list.length is--
no, because we have

00:44:00.920 --> 00:44:05.471
lots of things like isnotempty.

00:44:05.471 --> 00:44:07.470
ANDREW: Oh yeah, there's
isempty and isnotempty.

00:44:07.470 --> 00:44:09.250
MATT: Yeah, it's really handy.

00:44:09.250 --> 00:44:11.149
Then what we can do is we can--

00:44:11.149 --> 00:44:13.190
oh, we're going have to
do a second network call.

00:44:13.190 --> 00:44:15.240
Oh, this is going to
get complicated, OK.

00:44:15.240 --> 00:44:16.370
So this is good.

00:44:16.370 --> 00:44:19.140
OK, bear with me.

00:44:19.140 --> 00:44:29.670
We're going to know have a
final story URL, of course.

00:44:29.670 --> 00:44:31.920
Are you a double quotes
or single quotes person?

00:44:31.920 --> 00:44:34.140
ANDREW: I'm single
now that I use Dart.

00:44:34.140 --> 00:44:34.880
MATT: Yeah.

00:44:34.880 --> 00:44:35.650
I used to do a lot of Python.

00:44:35.650 --> 00:44:37.066
I'm a single quotes
person myself.

00:44:37.066 --> 00:44:38.360
ANDREW: Mm-hmm.

00:44:38.360 --> 00:44:41.210
MATT: And this is going to be--

00:44:41.210 --> 00:44:51.756
let's take a look at the
network call, which is here.

00:44:51.756 --> 00:44:53.292
Oh, OK.

00:44:53.292 --> 00:44:54.250
So this should be nice.

00:44:54.250 --> 00:44:55.375
We don't need pretty printing.

00:44:55.375 --> 00:44:55.916
ANDREW: Yeah.

00:44:55.916 --> 00:44:58.000
MATT: We don't need any
of that sort of nonsense.

00:44:58.000 --> 00:45:01.320
What we need is vo/item/id.json.

00:45:01.320 --> 00:45:04.650
So it's v0/item.

00:45:04.650 --> 00:45:11.110
And it's going to
be something.json.

00:45:11.110 --> 00:45:13.630
ANDREW: String
interpolation for the win.

00:45:13.630 --> 00:45:17.605
MATT: And we're going to really
make this super ugly by doing

00:45:17.605 --> 00:45:20.312
idList.first.

00:45:20.312 --> 00:45:21.020
Do you like that?

00:45:21.020 --> 00:45:21.790
ANDREW: There you go.

00:45:21.790 --> 00:45:23.050
MATT: Is my code
super readable now?

00:45:23.050 --> 00:45:23.591
ANDREW: Yeah.

00:45:23.591 --> 00:45:24.900
MATT: Yeah.

00:45:24.900 --> 00:45:26.330
OK, so what do we have now?

00:45:26.330 --> 00:45:31.900
So we have this, so
now we can do final--

00:45:31.900 --> 00:45:33.640
what are we going to call this?

00:45:33.640 --> 00:45:36.355
We're going to
call this storyRes

00:45:36.355 --> 00:45:43.780
equals http.get, storyUrl.

00:45:43.780 --> 00:45:44.460
That's lovely.

00:45:44.460 --> 00:45:45.085
ANDREW: Mm-hmm.

00:45:45.085 --> 00:45:47.220
MATT: Going to have
to do this too.

00:45:47.220 --> 00:45:48.970
And then what we're
going to have is we're

00:45:48.970 --> 00:45:52.120
going to hopefully have our--

00:45:55.976 --> 00:45:59.390
you know, just in case.

00:45:59.390 --> 00:46:01.260
This is going to--

00:46:01.260 --> 00:46:02.260
ANDREW: Pop up in there.

00:46:02.260 --> 00:46:04.360
MATT: --live here.

00:46:04.360 --> 00:46:05.780
And then this is
going to be res--

00:46:05.780 --> 00:46:06.280
no, no.

00:46:06.280 --> 00:46:07.363
It's going to be storyRes.

00:46:10.770 --> 00:46:15.390
So that's going to make two
network calls come back.

00:46:15.390 --> 00:46:17.692
We're going to expect
this, and we're-- well,

00:46:17.692 --> 00:46:19.150
that's probably
going be wrong now.

00:46:19.150 --> 00:46:21.300
ANDREW: No, you
can put, you know,

00:46:21.300 --> 00:46:25.509
ID is not equal to zero
or something like that.

00:46:25.509 --> 00:46:27.300
MATT: Well, we can run
this with breakpoint

00:46:27.300 --> 00:46:28.110
and see if it works, right?

00:46:28.110 --> 00:46:28.770
ANDREW: Yeah.

00:46:28.770 --> 00:46:28.980
MATT: OK.

00:46:28.980 --> 00:46:30.771
ANDREW: Yeah, in the
real world, of course,

00:46:30.771 --> 00:46:32.280
you'd want to use
an HTTP override

00:46:32.280 --> 00:46:35.680
or some other mechanism
to test everything, but--

00:46:35.680 --> 00:46:36.180
MATT: Yeah.

00:46:36.180 --> 00:46:37.320
ANDREW: --the actual networking.

00:46:37.320 --> 00:46:39.600
MATT: Yes, do not actually
put your actual networking

00:46:39.600 --> 00:46:40.990
in your actual unit tests.

00:46:40.990 --> 00:46:41.531
ANDREW: Yeah.

00:46:41.531 --> 00:46:42.365
MATT: Well, you can.

00:46:42.365 --> 00:46:44.281
ANDREW: Yeah, have a
separate integration test

00:46:44.281 --> 00:46:46.590
file or something like that
that you don't mind waiting

00:46:46.590 --> 00:46:49.090
45 seconds for it to complete.

00:46:49.090 --> 00:46:49.774
And so--

00:46:49.774 --> 00:46:51.690
MATT: Sometimes these
tests when you do async,

00:46:51.690 --> 00:46:53.416
you can actually--

00:46:53.416 --> 00:46:56.342
handy tip-- where is it?

00:46:56.342 --> 00:46:57.050
Where's my async?

00:46:57.050 --> 00:46:57.730
Is this in need of async?

00:46:57.730 --> 00:46:58.230
ANDREW: Yup.

00:46:58.230 --> 00:46:59.310
MATT: Yes.

00:46:59.310 --> 00:47:03.279
You have additional-- how do
I show the parameters of this?

00:47:03.279 --> 00:47:04.195
ANDREW: Oh, Command-P.

00:47:04.195 --> 00:47:07.860
MATT: Command-P. Command-P.

00:47:07.860 --> 00:47:10.170
ANDREW: If you're-- you're
outside the method now.

00:47:10.170 --> 00:47:12.610
So if you went back to in
between the brace and the--

00:47:12.610 --> 00:47:13.110
MATT: There?

00:47:13.110 --> 00:47:14.080
ANDREW: Yeah, I
think that'll work.

00:47:14.080 --> 00:47:15.004
Try again.

00:47:15.004 --> 00:47:18.090
MATT: Ah, there is a timeout,
and that is very handy when

00:47:18.090 --> 00:47:21.119
you're doing, you know, not
networking, but if you're--

00:47:21.119 --> 00:47:21.660
ANDREW: Yeah.

00:47:21.660 --> 00:47:23.310
MATT: --listening
for streams or you're

00:47:23.310 --> 00:47:25.380
doing whatnot,
that will save you

00:47:25.380 --> 00:47:27.915
some madness if things
accidentally run

00:47:27.915 --> 00:47:29.440
in an infinite loop or whatnot.

00:47:29.440 --> 00:47:32.593
So timeouts are handy when
you're doing async stuff.

00:47:32.593 --> 00:47:34.800
Handy tip, which I
learned the hard way.

00:47:34.800 --> 00:47:36.390
Right, how do I run this?

00:47:36.390 --> 00:47:39.367
ANDREW: So we would want
to go from main.dart here.

00:47:39.367 --> 00:47:41.700
We want to pull that down and
go back to the test files.

00:47:41.700 --> 00:47:43.130
MATT: So I got my break point.

00:47:43.130 --> 00:47:43.880
Got my main.dart--

00:47:43.880 --> 00:47:44.760
ANDREW: No, sorry.

00:47:44.760 --> 00:47:47.218
Up here, where you're pulling
down the wrong configuration.

00:47:47.218 --> 00:47:49.010
So go to parses item.json.

00:47:49.010 --> 00:47:50.850
MATT: You added this
as your configuration?

00:47:50.850 --> 00:47:52.532
ANDREW: I think Filip
did a while back.

00:47:52.532 --> 00:47:54.240
MATT: We're blaming
Filip for everything.

00:47:54.240 --> 00:47:56.250
ANDREW: We-- yeah, he
gets a lot done, you know?

00:47:56.250 --> 00:47:57.229
MATT: He does.

00:47:57.229 --> 00:47:59.770
ANDREW: And then you can go here
and click that and do debug.

00:48:03.060 --> 00:48:04.480
There we go.

00:48:04.480 --> 00:48:06.010
MATT: All right,
let's see what--

00:48:06.010 --> 00:48:06.940
oh.

00:48:06.940 --> 00:48:08.580
Oh, Flutter instance
already running.

00:48:08.580 --> 00:48:10.390
ANDREW: Yeah, well stop it
and kill it, I guess, yeah.

00:48:10.390 --> 00:48:11.452
MATT: There we go.

00:48:11.452 --> 00:48:12.370
Are you dead?

00:48:12.370 --> 00:48:14.285
ANDREW: [INAUDIBLE]

00:48:14.285 --> 00:48:15.410
MATT: I will do that again.

00:48:15.410 --> 00:48:16.800
So we go here, we go debug.

00:48:21.331 --> 00:48:24.500
Now we're running
a Flutter instance.

00:48:24.500 --> 00:48:25.220
Hang on a second.

00:48:25.220 --> 00:48:25.690
Hang on.

00:48:25.690 --> 00:48:26.398
Maybe I hit stop.

00:48:30.282 --> 00:48:34.040
Oh, I'm going to try that again.

00:48:34.040 --> 00:48:34.540
Yay.

00:48:34.540 --> 00:48:36.770
ANDREW: There we go.

00:48:36.770 --> 00:48:39.645
MATT: My terrible
IntelliJ skills.

00:48:39.645 --> 00:48:40.780
IntelliJ is awesome.

00:48:40.780 --> 00:48:42.610
It's been too long
since I used it.

00:48:42.610 --> 00:48:44.720
ANDREW: Oh, oh.

00:48:44.720 --> 00:48:45.740
Things are happening.

00:48:45.740 --> 00:48:46.240
So we--

00:48:46.240 --> 00:48:47.240
MATT: Oh, so we've got--

00:48:47.240 --> 00:48:50.735
OK, so if we look here, we've
got res-- we got ID list.

00:48:50.735 --> 00:48:51.470
Oh, look at that.

00:48:51.470 --> 00:48:51.740
So ID list is working--

00:48:51.740 --> 00:48:52.670
ANDREW: Lots of IDs.

00:48:52.670 --> 00:48:56.660
MATT: --we've got lots
of IDs, much IDs, so IDs.

00:48:56.660 --> 00:48:59.735
Our story URL is pulling
out the first one.

00:48:59.735 --> 00:49:00.470
Awesome.

00:49:00.470 --> 00:49:02.360
We have storyRes.

00:49:02.360 --> 00:49:05.725
And where our--
we get our bytes--

00:49:05.725 --> 00:49:09.860
ANDREW: That's our bytes, which
I don't want to look at and--

00:49:09.860 --> 00:49:11.407
you could step into this.

00:49:11.407 --> 00:49:11.990
MATT: Oh, yes.

00:49:11.990 --> 00:49:13.575
ANDREW: So that would be--

00:49:13.575 --> 00:49:14.292
MATT: This one?

00:49:14.292 --> 00:49:15.000
ANDREW: That one.

00:49:18.087 --> 00:49:20.354
MATT: Story-- oh,
where am I now?

00:49:20.354 --> 00:49:21.210
Oh, wow.

00:49:21.210 --> 00:49:22.400
ANDREW: Yeah, it did that.

00:49:22.400 --> 00:49:24.920
MATT: [INAUDIBLE] that one.

00:49:24.920 --> 00:49:26.200
Did I get somewhere new?

00:49:26.200 --> 00:49:27.290
ANDREW: You're back
where you were.

00:49:27.290 --> 00:49:27.570
MATT: Oh.

00:49:27.570 --> 00:49:30.270
ANDREW: You can try stepping in
again, and maybe that'll be--

00:49:30.270 --> 00:49:31.064
there we go.

00:49:31.064 --> 00:49:32.730
Now, you can do step
over, which is just

00:49:32.730 --> 00:49:33.765
to the left of where you were.

00:49:33.765 --> 00:49:34.290
MATT: This one?

00:49:34.290 --> 00:49:34.860
ANDREW: Yeah, one
of these days I'll

00:49:34.860 --> 00:49:36.220
memorize these key commands.

00:49:36.220 --> 00:49:36.730
MATT: Well, you have.

00:49:36.730 --> 00:49:37.520
I'm the one who's asking.

00:49:37.520 --> 00:49:39.010
ANDREW: Yeah, I memorize
what the buttons look like.

00:49:39.010 --> 00:49:39.360
That's about--

00:49:39.360 --> 00:49:40.193
MATT: Oh, check it--

00:49:40.193 --> 00:49:42.162
ANDREW: --as elite.

00:49:42.162 --> 00:49:46.142
MATT: And got to
step down again.

00:49:46.142 --> 00:49:47.100
So what do we have now?

00:49:47.100 --> 00:49:49.016
ANDREW: So parse a string.

00:49:49.016 --> 00:49:51.130
MATT: But check out our--

00:49:51.130 --> 00:49:52.260
reduce the string.

00:49:52.260 --> 00:49:53.850
We've got kids, we've
got descendants.

00:49:53.850 --> 00:49:55.430
ANDREW: So it hasn't actually
made the article yet.

00:49:55.430 --> 00:49:56.670
That'll be the next call.

00:49:56.670 --> 00:49:57.628
MATT: Oh, look at that.

00:49:57.628 --> 00:49:59.830
Why nobody ever wins
the car at the mall.

00:49:59.830 --> 00:50:00.750
ANDREW: Oh, I read
that this morning.

00:50:00.750 --> 00:50:02.249
MATT: That's the
bestest story ever.

00:50:02.249 --> 00:50:03.000
ANDREW: Mm-hmm.

00:50:03.000 --> 00:50:04.250
It's-- no one wins the car.

00:50:04.250 --> 00:50:05.117
It's true.

00:50:05.117 --> 00:50:05.950
It's a good article.

00:50:05.950 --> 00:50:07.770
MATT: That's actually--
that was almost

00:50:07.770 --> 00:50:09.647
if we'd planned to
pull that article out.

00:50:09.647 --> 00:50:11.730
It could've been something
entirely inappropriate.

00:50:11.730 --> 00:50:13.260
ANDREW: Yeah.

00:50:13.260 --> 00:50:14.310
MATT: But we got lucky.

00:50:14.310 --> 00:50:15.635
OK, so I can just--

00:50:15.635 --> 00:50:17.010
ANDREW: Wait, one
more step over.

00:50:17.010 --> 00:50:17.650
We've got to make the article.

00:50:17.650 --> 00:50:18.510
MATT: One more step over?

00:50:18.510 --> 00:50:19.560
ANDREW: All right,
article parts.

00:50:19.560 --> 00:50:20.360
MATT: Oh, genius.

00:50:20.360 --> 00:50:20.901
ANDREW: Boom.

00:50:20.901 --> 00:50:21.820
MATT: Look at that.

00:50:21.820 --> 00:50:25.830
It's like-- so in the
space of-- let's have

00:50:25.830 --> 00:50:30.030
a look, a few lines
of code, most of them

00:50:30.030 --> 00:50:34.080
me, you know, checking to see if
things are pulled down, right?

00:50:34.080 --> 00:50:38.340
Making a call in Dart,
in Flutter, is like that.

00:50:38.340 --> 00:50:39.810
The nice, thing, though, is--

00:50:39.810 --> 00:50:41.982
I mean, coming obviously
from Android development

00:50:41.982 --> 00:50:43.440
and whatnot, where
you have to wrap

00:50:43.440 --> 00:50:45.210
these things in an
async task and run them

00:50:45.210 --> 00:50:47.760
in a separate thread or
whatnot, because Dart

00:50:47.760 --> 00:50:50.220
is asynchronous by
default, you can just

00:50:50.220 --> 00:50:55.440
do http.get, await or
[INAUDIBLE] and pull it down.

00:50:55.440 --> 00:50:57.510
JSON decoding for
simple structures,

00:50:57.510 --> 00:51:00.820
we had a list of ints
that work quite nicely.

00:51:00.820 --> 00:51:03.480
We I didn't didn't even have
to cast that to anything else.

00:51:03.480 --> 00:51:05.860
It knew that it was in a
dribble, and it pulled it out.

00:51:05.860 --> 00:51:07.110
And they were ints.

00:51:07.110 --> 00:51:09.568
Actually, well, it doesn't know
if it's an int or a string,

00:51:09.568 --> 00:51:13.470
because I just used it here.

00:51:13.470 --> 00:51:16.290
And then we pulled
the story URL.

00:51:16.290 --> 00:51:18.394
And through the magic of--

00:51:18.394 --> 00:51:22.480
where's your article parser?

00:51:22.480 --> 00:51:24.719
ANDREW: It's in
JSON parsing, which

00:51:24.719 --> 00:51:26.260
is what lets you
know it really needs

00:51:26.260 --> 00:51:27.385
to be moved somewhere else.

00:51:27.385 --> 00:51:29.475
MATT: Yeah.

00:51:29.475 --> 00:51:31.840
No, where is your-- is this it?

00:51:31.840 --> 00:51:32.340
Yeah.

00:51:32.340 --> 00:51:35.520
And through basically the
magic of built_value--

00:51:35.520 --> 00:51:38.310
we did have to do some
boilerplate to define it.

00:51:38.310 --> 00:51:40.140
But there is no JSON
parsing in sight

00:51:40.140 --> 00:51:42.070
here, because it
was over-generated.

00:51:42.070 --> 00:51:45.910
And so, once you get past the
defining this and defining

00:51:45.910 --> 00:51:50.682
your serializer, which
was literally this,

00:51:50.682 --> 00:51:51.390
things were good.

00:51:51.390 --> 00:51:56.490
So we have your article
objects, or class.

00:51:56.490 --> 00:52:00.207
We have your parsing
handling really nicely.

00:52:00.207 --> 00:52:01.290
And we now have a network.

00:52:01.290 --> 00:52:03.960
ANDREW: Mm-hmm.

00:52:03.960 --> 00:52:06.600
MATT: I mean, Filip would have
got this done in 10 minutes.

00:52:06.600 --> 00:52:08.560
We've been at this for a while.

00:52:08.560 --> 00:52:09.330
ANDREW: Yeah.

00:52:09.330 --> 00:52:11.550
Actually, let's ask our
off-camera producer.

00:52:11.550 --> 00:52:13.060
How long have we
been filming now?

00:52:13.060 --> 00:52:13.690
SPEAKER 3: 42 minutes.

00:52:13.690 --> 00:52:14.520
ANDREW: 42 minutes?

00:52:14.520 --> 00:52:15.797
OK, so we've got some time.

00:52:15.797 --> 00:52:17.380
Do you want to switch
back real quick?

00:52:17.380 --> 00:52:17.870
MATT: Yup, let's--

00:52:17.870 --> 00:52:18.370
ANDREW: OK.

00:52:18.370 --> 00:52:20.885
MATT: --do magic 3D cut
thing and switch back.

00:52:20.885 --> 00:52:21.426
ANDREW: Here.

00:52:21.426 --> 00:52:22.840
MATT: Oh, could
fall off the chair.

00:52:22.840 --> 00:52:23.160
ANDREW: I know.

00:52:23.160 --> 00:52:23.951
They go up so high.

00:52:23.951 --> 00:52:26.227
It's like wearing a bustle
in the 19th century.

00:52:26.227 --> 00:52:27.810
MATT: Do you have
experience for that?

00:52:27.810 --> 00:52:28.230
ANDREW: No.

00:52:28.230 --> 00:52:28.600
MATT: OK.

00:52:28.600 --> 00:52:30.690
ANDREW: It's what I imagine
it-- you never imagine

00:52:30.690 --> 00:52:31.856
what a bustle would be like?

00:52:31.856 --> 00:52:33.720
SPEAKER 3: One
second [INAUDIBLE]..

00:52:33.720 --> 00:52:36.180
ANDREW: That's fine.

00:52:36.180 --> 00:52:38.422
All right.

00:52:38.422 --> 00:52:41.796
There we go.

00:52:41.796 --> 00:52:42.420
And we're back.

00:52:42.420 --> 00:52:42.920
MATT: Oops.

00:52:42.920 --> 00:52:44.085
ANDREW: [LAUGHS]

00:52:44.085 --> 00:52:44.960
MATT: Now we're back.

00:52:44.960 --> 00:52:47.440
ANDREW: Yeah, so let me--

00:52:47.440 --> 00:52:49.440
so one thing I
wanted to mention,

00:52:49.440 --> 00:52:55.350
and this is a bit of
shameless self-promotion

00:52:55.350 --> 00:53:00.210
here, the Flutter
team, we put together

00:53:00.210 --> 00:53:02.246
a new repo for some samples.

00:53:02.246 --> 00:53:03.614
MATT: Oh.

00:53:03.614 --> 00:53:05.280
ANDREW: And it's not
accepted right now,

00:53:05.280 --> 00:53:07.500
because they don't have push
or writing requests yet.

00:53:07.500 --> 00:53:10.470
I got to talk to Ian about it,
but I do have a pull request.

00:53:10.470 --> 00:53:12.840
We have a JSON example
that has gone through.

00:53:12.840 --> 00:53:16.850
It's actually what David
Morgan and Kevin Moore--

00:53:16.850 --> 00:53:17.850
MATT: Oh, that's using--

00:53:17.850 --> 00:53:19.030
ANDREW: --reviewed.

00:53:19.030 --> 00:53:24.270
MATT: --their JSON
serializer builder plugin.

00:53:24.270 --> 00:53:26.490
Not plugin, package.

00:53:26.490 --> 00:53:32.460
ANDREW: It's deserializing
the same set of strings using

00:53:32.460 --> 00:53:33.670
three different approaches.

00:53:33.670 --> 00:53:36.180
So a roll-your-own
dart:convert approach,

00:53:36.180 --> 00:53:39.320
a JSON-serializable approach.

00:53:39.320 --> 00:53:41.940
That's a library for
JSON serialization.

00:53:41.940 --> 00:53:43.510
And then also built_value.

00:53:43.510 --> 00:53:44.630
MATT: Oh, cool.

00:53:44.630 --> 00:53:49.230
ANDREW: And so, that will be in
the Flutter/samples GitHub repo

00:53:49.230 --> 00:53:51.420
hopefully by the time
this episode makes it

00:53:51.420 --> 00:53:53.719
into post-production
and gets released.

00:53:53.719 --> 00:53:55.260
MATT: How do you
have nine stars when

00:53:55.260 --> 00:53:56.760
there's nothing in the repo?

00:53:56.760 --> 00:53:57.900
ANDREW: People like me.

00:53:57.900 --> 00:53:58.200
MATT: OK, true.

00:53:58.200 --> 00:53:59.400
ANDREW: I'm naturally charming.

00:53:59.400 --> 00:53:59.970
MATT: Just--

00:53:59.970 --> 00:54:00.740
ANDREW: And-- no.

00:54:00.740 --> 00:54:01.500
[LAUGHS]

00:54:01.500 --> 00:54:03.320
MATT: Your code is so
awesome that it's--

00:54:03.320 --> 00:54:03.590
ANDREW: No, I think--

00:54:03.590 --> 00:54:04.760
MATT: In anticipation
they're starring your repo.

00:54:04.760 --> 00:54:05.100
ANDREW: No--

00:54:05.100 --> 00:54:05.470
MATT: I like that.

00:54:05.470 --> 00:54:05.520
That's good.

00:54:05.520 --> 00:54:06.900
ANDREW: -- I don't think people
even knew it was my repo,

00:54:06.900 --> 00:54:07.290
because it's--

00:54:07.290 --> 00:54:08.290
I mean, it's really not.

00:54:08.290 --> 00:54:10.056
It belongs to Flutter
team, who made it.

00:54:10.056 --> 00:54:11.972
And, you know, I'm sure
people saw it and were

00:54:11.972 --> 00:54:16.320
like, OK, they'll eventually
put something in there.

00:54:16.320 --> 00:54:19.027
And we will be putting
things in there.

00:54:19.027 --> 00:54:21.110
So, this will be one of
the examples that goes in.

00:54:21.110 --> 00:54:23.485
And the idea is that you can
look at three different ways

00:54:23.485 --> 00:54:25.750
to serialize JSON and see
which one is right for you.

00:54:25.750 --> 00:54:28.880
So I wanted to mention that.

00:54:28.880 --> 00:54:32.220
And also, I think-- because
we're a little over 40 minutes

00:54:32.220 --> 00:54:37.380
or so at this point, and to
keep going right now, what

00:54:37.380 --> 00:54:38.130
do we need to do?

00:54:38.130 --> 00:54:40.230
So we've got a model.

00:54:40.230 --> 00:54:42.120
MATT: Mm-hmm, so
we've got the model.

00:54:42.120 --> 00:54:45.210
We've got the back
end pulling it down.

00:54:45.210 --> 00:54:51.570
So how hard would it be to wire
in the rather naive networking

00:54:51.570 --> 00:54:57.969
code that I've written and get
that displaying an article in--

00:54:57.969 --> 00:54:59.010
ANDREW: In an actual app.

00:54:59.010 --> 00:55:00.300
MATT: --the Flutter app.

00:55:00.300 --> 00:55:02.400
ANDREW: So let's
go look at the--

00:55:02.400 --> 00:55:04.950
MATT: I mean, we could just say
for any article you click on,

00:55:04.950 --> 00:55:07.241
it shows the article that
gets pulled over the network.

00:55:07.241 --> 00:55:08.205
But--

00:55:08.205 --> 00:55:09.600
ANDREW: Mm-hmm.

00:55:09.600 --> 00:55:11.792
So we've got-- let's see.

00:55:11.792 --> 00:55:13.000
MATT: Look at all these news.

00:55:13.000 --> 00:55:15.930
ANDREW: Yeah, I know.

00:55:15.930 --> 00:55:17.120
MATT: It's the new police.

00:55:17.120 --> 00:55:18.995
ANDREW: Yeah, because
the very first episode,

00:55:18.995 --> 00:55:21.510
I think we recorded way
before it was released.

00:55:21.510 --> 00:55:22.550
Not the case anymore.

00:55:22.550 --> 00:55:25.620
We now have a lead
time of about a week.

00:55:25.620 --> 00:55:27.330
So yeah, let's get
rid of all these news,

00:55:27.330 --> 00:55:31.105
actually, all of that,
through the magic of--

00:55:31.105 --> 00:55:32.050
does VS Code do this?

00:55:32.050 --> 00:55:33.780
Just out of curiosity.

00:55:33.780 --> 00:55:34.590
MATT: It might do--

00:55:34.590 --> 00:55:35.631
ANDREW: I assume it does.

00:55:35.631 --> 00:55:37.920
MATT: --but my VS Code-fu
is clearly not as strong

00:55:37.920 --> 00:55:39.534
as your IntelliJ-fu, so--

00:55:39.534 --> 00:55:41.450
ANDREW: Let's see if
I've actually broken it--

00:55:41.450 --> 00:55:42.866
MATT: --I would
doff my hat to you

00:55:42.866 --> 00:55:44.134
if I wasn't wearing a beanie.

00:55:44.134 --> 00:55:46.050
ANDREW: All right, let's
go back to main.dart.

00:55:46.050 --> 00:55:48.900
Let's get out of
testing right now.

00:55:48.900 --> 00:55:52.827
So this is the UI layer
that Filip worked up

00:55:52.827 --> 00:55:53.910
in the very first episode.

00:55:53.910 --> 00:55:57.350
Let me make this a little
bit more readable here.

00:55:57.350 --> 00:55:58.105
Hide this.

00:56:00.370 --> 00:56:00.870
MATT: Nice.

00:56:00.870 --> 00:56:03.330
ANDREW: A little bit
too big in that area.

00:56:03.330 --> 00:56:06.210
Yeah, so we have a basic app.

00:56:06.210 --> 00:56:10.230
And he is pulling things
out of this, which is just

00:56:10.230 --> 00:56:13.570
a hard-coded list of articles.

00:56:13.570 --> 00:56:14.280
So--

00:56:14.280 --> 00:56:17.050
MATT: But where is it showing--
is there an article page?

00:56:17.050 --> 00:56:18.720
ANDREW: There is
build item, which

00:56:18.720 --> 00:56:20.636
is going-- it's using a
list builder, I think?

00:56:20.636 --> 00:56:21.695
Yeah, a list view.

00:56:21.695 --> 00:56:25.040
And the children
are a map of-- he's

00:56:25.040 --> 00:56:28.130
just mapping the list of
articles to a list of widgets,

00:56:28.130 --> 00:56:28.845
basically.

00:56:28.845 --> 00:56:29.380
And it's [INAUDIBLE]--

00:56:29.380 --> 00:56:31.680
MATT: So in an ideal world,
what we probably want to do

00:56:31.680 --> 00:56:33.013
is we want to pull the articles.

00:56:33.013 --> 00:56:34.884
We want to cache them
somehow, so we're not

00:56:34.884 --> 00:56:35.800
hammering the network.

00:56:35.800 --> 00:56:36.475
ANDREW: Mm-hmm.

00:56:36.475 --> 00:56:37.350
MATT: And then that--

00:56:37.350 --> 00:56:39.060
ANDREW: That gets into a
heavyweight article about app

00:56:39.060 --> 00:56:40.530
state management, though.

00:56:40.530 --> 00:56:42.090
MATT: Yeah, maybe not now.

00:56:42.090 --> 00:56:44.654
Maybe we could just pull
the article, and just--

00:56:44.654 --> 00:56:47.070
we could generate a list from
it and show the same article

00:56:47.070 --> 00:56:47.820
multiple times.

00:56:47.820 --> 00:56:49.812
ANDREW: Mm-hmm.

00:56:49.812 --> 00:56:56.010
MATT: Or when we get down to
showing the article itself,

00:56:56.010 --> 00:56:58.470
we could just
override the article

00:56:58.470 --> 00:57:04.650
with a piece of networking-fu
to inject the new article.

00:57:04.650 --> 00:57:08.618
ANDREW: Mm-hmm, so let's--

00:57:08.618 --> 00:57:11.100
OK.

00:57:11.100 --> 00:57:14.040
So we're definitely not going
to want that anymore, articles.

00:57:14.040 --> 00:57:15.282
So let me-- I'm going to--

00:57:15.282 --> 00:57:16.740
MATT: You're probably
going to want

00:57:16.740 --> 00:57:21.750
to have two functions, one which
is get ID list and get article.

00:57:21.750 --> 00:57:25.250
So we can break
those out of the test

00:57:25.250 --> 00:57:29.970
and pop them into
the utils function

00:57:29.970 --> 00:57:33.246
or whatnot, whatever-- whichever
way you want to structure it.

00:57:33.246 --> 00:57:36.240
ANDREW: Yeah, OK, I'm going
to pull all this code out

00:57:36.240 --> 00:57:37.980
and put it into article.

00:57:37.980 --> 00:57:40.572
And that will be our new model.

00:57:40.572 --> 00:57:42.530
So I've commented out--
for those of you who've

00:57:42.530 --> 00:57:44.470
been with us through
all three episodes,

00:57:44.470 --> 00:57:49.810
I'm commenting out
the original one.

00:57:49.810 --> 00:57:54.834
And then I'm going to
call this article.g.dart.

00:57:54.834 --> 00:57:55.334
And--

00:57:58.240 --> 00:58:01.243
MATT: You're going to have to do
your serializer magic as well.

00:58:01.243 --> 00:58:04.696
ANDREW: I'm going to
comment that one out

00:58:04.696 --> 00:58:07.480
and this one, because
we're not going

00:58:07.480 --> 00:58:09.150
to be using that one anymore.

00:58:09.150 --> 00:58:11.290
So I will need to--

00:58:11.290 --> 00:58:14.650
I guess serializers needs
to move, doesn't it?

00:58:14.650 --> 00:58:17.484
Let's put that up here.

00:58:17.484 --> 00:58:20.010
MATT: And you'll probably need
to-- do you need to import

00:58:20.010 --> 00:58:21.006
the--

00:58:21.006 --> 00:58:23.496
yeah.

00:58:23.496 --> 00:58:24.492
ANDREW: There we go.

00:58:24.492 --> 00:58:24.992
MATT: Nice.

00:58:24.992 --> 00:58:27.033
ANDREW: So we're just
doing a little shuffle now,

00:58:27.033 --> 00:58:28.000
and I just broke main.

00:58:28.000 --> 00:58:29.740
[LAUGHTER]

00:58:29.740 --> 00:58:31.690
Because comments count
never existed really

00:58:31.690 --> 00:58:32.530
in the first place.

00:58:32.530 --> 00:58:35.800
That was a made-up
field that we made.

00:58:35.800 --> 00:58:39.400
And we'll comment
this out as well.

00:58:39.400 --> 00:58:47.810
Write an IOU to this
whole section of code.

00:58:47.810 --> 00:58:50.270
And also, our tests are
broken, so that's fun.

00:58:50.270 --> 00:58:52.820
Let's comment those out as well.

00:58:52.820 --> 00:58:54.790
MATT: Common practice
when your tests break--

00:58:54.790 --> 00:58:55.310
ANDREW: Comment them out.

00:58:55.310 --> 00:58:55.800
MATT: --comment them out.

00:58:55.800 --> 00:58:56.930
ANDREW: Yeah, that works.

00:58:56.930 --> 00:59:00.200
And then I think we can rerun
built, rerun source gen,

00:59:00.200 --> 00:59:02.330
and we'll get article.g.dart.

00:59:02.330 --> 00:59:03.120
MATT: Yeah, and--

00:59:03.120 --> 00:59:04.953
ANDREW: So we'll get
the same article class.

00:59:04.953 --> 00:59:09.426
MATT: Your serializer will
rebuild to point to the right.

00:59:09.426 --> 00:59:10.800
ANDREW: Or it
could just blow up.

00:59:10.800 --> 00:59:11.710
That's also a possibility.

00:59:11.710 --> 00:59:12.704
MATT: I'm sure it'll be perfect.

00:59:12.704 --> 00:59:13.245
ANDREW: Yeah.

00:59:13.245 --> 00:59:18.995
[LAUGHS]

00:59:18.995 --> 00:59:20.120
MATT: That's a new warning.

00:59:20.120 --> 00:59:21.960
ANDREW: I see that
Dart UI warning a lot.

00:59:21.960 --> 00:59:23.750
I think that's come
up in other episodes.

00:59:23.750 --> 00:59:26.840
MATT: Yeah, I think
that's because it's

00:59:26.840 --> 00:59:28.610
a holdover from
what they're doing

00:59:28.610 --> 00:59:29.840
on the web side of things.

00:59:29.840 --> 00:59:31.310
But you can ignore that one.

00:59:31.310 --> 00:59:34.160
It has no bearing on what
it produces ultimately.

00:59:34.160 --> 00:59:34.730
ANDREW: Yeah.

00:59:34.730 --> 00:59:36.830
Although, if you are a Dart
coder for the web, built-value

00:59:36.830 --> 00:59:37.496
works just fine.

00:59:37.496 --> 00:59:38.186
MATT: Yup.

00:59:38.186 --> 00:59:39.227
ANDREW: It works on both.

00:59:39.227 --> 00:59:42.402
MATT: This is one of those
works across all platforms.

00:59:42.402 --> 00:59:43.186
So--

00:59:43.186 --> 00:59:44.810
ANDREW: OK, so now
we've got an article

00:59:44.810 --> 00:59:47.690
that's is serializable, right?

00:59:47.690 --> 00:59:51.140
So we could now
go back into main

00:59:51.140 --> 00:59:52.880
and say let's use that somehow.

00:59:55.470 --> 00:59:56.280
So we could--

00:59:56.280 --> 00:59:56.960
MATT: OK.

00:59:56.960 --> 00:59:57.960
ANDREW: What if I just--

00:59:57.960 --> 01:00:00.994
what if I faked a list
of IDs, say 10 IDs,

01:00:00.994 --> 01:00:02.660
and I just put them
in an array up here,

01:00:02.660 --> 01:00:05.420
and then we set up
something that would--

01:00:05.420 --> 01:00:07.100
MATT: Well, why don't you--

01:00:07.100 --> 01:00:07.730
didn't we--

01:00:07.730 --> 01:00:09.105
ANDREW: --can
fetch them somehow.

01:00:09.105 --> 01:00:14.360
MATT: Can you go back
into your console panel,

01:00:14.360 --> 01:00:17.570
because you could just steal all
the IDs from that if it has--

01:00:17.570 --> 01:00:20.270
ANDREW: Oh, I was actually
going to go back to your call.

01:00:20.270 --> 01:00:21.885
MATT: Oh, we could just get
it from the other web call.

01:00:21.885 --> 01:00:22.426
ANDREW: Yeah.

01:00:22.426 --> 01:00:24.260
MATT: That would
have been simple.

01:00:24.260 --> 01:00:25.557
I think it's the next one over.

01:00:25.557 --> 01:00:27.020
ANDREW: OK.

01:00:27.020 --> 01:00:27.990
No-- oh, there we go.

01:00:27.990 --> 01:00:28.375
MATT: There you go.

01:00:28.375 --> 01:00:30.166
ANDREW: So let me just
steal some of these.

01:00:32.720 --> 01:00:35.620
That looks like about 10, right?

01:00:35.620 --> 01:00:37.015
And we'll go back.

01:00:37.015 --> 01:00:38.810
And I'm just going
to drop these.

01:00:38.810 --> 01:00:40.560
Let's change this to
an int for right now.

01:00:40.560 --> 01:00:41.200
MATT: Mm-hmm.

01:00:41.200 --> 01:00:42.283
ANDREW: We'll call it IDs.

01:00:44.774 --> 01:00:46.162
MATT: Nice.

01:00:46.162 --> 01:00:47.610
ANDREW: Let me get rid of that.

01:00:47.610 --> 01:00:49.681
And this is going to--

01:00:49.681 --> 01:00:50.430
MATT: Auto-format.

01:00:50.430 --> 01:00:52.060
ANDREW: Junk.

01:00:52.060 --> 01:00:53.640
MATT: Dart format is great.

01:00:53.640 --> 01:00:55.300
ANDREW: So now I got some IDs.

01:00:55.300 --> 01:00:56.227
It would be--

01:00:56.227 --> 01:00:58.560
MATT: Oh, you're going to do
some clever mapping things,

01:00:58.560 --> 01:00:59.100
aren't you?

01:00:59.100 --> 01:01:00.016
ANDREW: I'm going to--

01:01:00.016 --> 01:01:03.660
I'm wondering if I can map the
IDs to future builders that

01:01:03.660 --> 01:01:07.740
will kick off the request
and then parse the result.

01:01:07.740 --> 01:01:09.720
MATT: So we're going
to create a function

01:01:09.720 --> 01:01:15.300
to do the HTTP networking stuff
and return a future article.

01:01:15.300 --> 01:01:16.140
ANDREW: Mm-hmm.

01:01:16.140 --> 01:01:18.780
I'm also going to pull out the
refresh indicator for right

01:01:18.780 --> 01:01:20.610
now.

01:01:20.610 --> 01:01:21.870
Forgive me, Filip.

01:01:21.870 --> 01:01:23.150
There it goes, OK.

01:01:23.150 --> 01:01:24.150
MATT: Wait, I can hear--

01:01:24.150 --> 01:01:24.540
ANDREW: Yes.

01:01:24.540 --> 01:01:25.410
MATT: --the sounds
of screaming--

01:01:25.410 --> 01:01:26.100
ANDREW: Somewhere 12,000--

01:01:26.100 --> 01:01:26.520
MATT: --in the distance.

01:01:26.520 --> 01:01:27.840
ANDREW: --miles away.

01:01:27.840 --> 01:01:32.050
Filip-- OK.

01:01:32.050 --> 01:01:35.548
OK, so now I've got that.

01:01:35.548 --> 01:01:38.500
I've got one too many
of those, I think.

01:01:38.500 --> 01:01:39.380
There we go.

01:01:39.380 --> 01:01:42.289
So now I want to map the IDs.

01:01:42.289 --> 01:01:44.580
This is going to be some
serious functional programming

01:01:44.580 --> 01:01:46.455
here, probably more than
I can really handle.

01:01:48.870 --> 01:01:52.780
MATT: Oh, this is going to
return a list of futures.

01:01:52.780 --> 01:01:56.660
But that's kind of OK, I think.

01:01:56.660 --> 01:01:58.607
I think you can
probably handle this.

01:01:58.607 --> 01:02:00.690
ANDREW: Let's just make
sure I'm doing this right.

01:02:13.160 --> 01:02:15.424
Always good to have the
right of our parentheses, OK.

01:02:15.424 --> 01:02:17.090
MATT: So that should
work now and just--

01:02:17.090 --> 01:02:17.780
ANDREW: Yeah, this
is going to produce

01:02:17.780 --> 01:02:19.030
a bunch of ugly text widgets--

01:02:19.030 --> 01:02:19.530
MATT: Yeah.

01:02:19.530 --> 01:02:20.390
ANDREW: --I think.

01:02:20.390 --> 01:02:23.185
So let's go ahead and through
the magic of hot reload,

01:02:23.185 --> 01:02:23.810
there they are.

01:02:23.810 --> 01:02:24.950
MATT: Oh, look at
that, it's still--

01:02:24.950 --> 01:02:26.158
it's running this whole time.

01:02:26.158 --> 01:02:27.140
ANDREW: Yeah.

01:02:27.140 --> 01:02:31.335
MATT: I didn't actually
kill it when I hit stop, OK.

01:02:31.335 --> 01:02:33.710
So the problem here is just
that we're going to map this,

01:02:33.710 --> 01:02:37.240
but it's going to map to a--

01:02:37.240 --> 01:02:41.360
it's going to map to
a bunch of futures.

01:02:41.360 --> 01:02:44.960
There is a way of saying
don't return the map

01:02:44.960 --> 01:02:48.370
iterable until all the
futures are futured up.

01:02:48.370 --> 01:02:50.120
I just wish I could
remember how to do it.

01:02:50.120 --> 01:02:50.930
ANDREW: Well, I was
wondering if we could do it

01:02:50.930 --> 01:02:53.600
with FutureBuilder, because with
FutureBuilder, we could just

01:02:53.600 --> 01:02:56.730
make the request to give it the
future that comes off of that.

01:02:56.730 --> 01:02:57.980
MATT: Well, if we passed the--

01:02:57.980 --> 01:03:05.780
so if we-- yeah, we
could do, actually.

01:03:05.780 --> 01:03:09.210
So if we-- oh.

01:03:09.210 --> 01:03:10.092
This is it.

01:03:10.092 --> 01:03:10.800
This is hardcore.

01:03:10.800 --> 01:03:12.549
ANDREW: We're going
to do a widget, right?

01:03:17.532 --> 01:03:19.746
MATT: So FutureBuilder is
going to return a widget.

01:03:19.746 --> 01:03:22.245
You're going to have to give
it a future, oh, and a builder.

01:03:22.245 --> 01:03:24.494
ANDREW: This would be a
widget builder, which is what?

01:03:24.494 --> 01:03:25.330
Just build context?

01:03:25.330 --> 01:03:27.210
MATT: It'd be build context.

01:03:27.210 --> 01:03:31.114
And it would be async
task of type widget.

01:03:31.114 --> 01:03:33.280
ANDREW: Let's just look at
FutureBuilder real quick.

01:03:35.611 --> 01:03:38.110
Again, one of the best parts
about Flutter, all open source.

01:03:38.110 --> 01:03:39.386
You can always go
look at the docs.

01:03:39.386 --> 01:03:39.752
[LAUGHS]

01:03:39.752 --> 01:03:40.330
MATT: Yeah.

01:03:40.330 --> 01:03:41.430
Although-- yup.

01:03:41.430 --> 01:03:45.660
ANDREW: So it takes a future,
an initial data, and a builder.

01:03:45.660 --> 01:03:48.595
And the builder is--

01:03:48.595 --> 01:03:49.220
MATT: Builder--

01:03:49.220 --> 01:03:51.221
ANDREW: --async widget builder--

01:03:51.221 --> 01:03:51.720
MATT: Yeah.

01:03:51.720 --> 01:03:57.000
ANDREW: --typed, which is
build context and a snapshot.

01:03:57.000 --> 01:03:58.272
MATT: Of a certain type.

01:03:58.272 --> 01:04:00.480
ANDREW: OK, this is getting
slightly more complicated

01:04:00.480 --> 01:04:01.250
than I hoped it would be.

01:04:01.250 --> 01:04:01.830
But let's see what I can do.

01:04:01.830 --> 01:04:02.871
MATT: No way, we're good.

01:04:02.871 --> 01:04:04.415
ANDREW: All right,
so this would be--

01:04:04.415 --> 01:04:05.290
MATT: This would be--

01:04:05.290 --> 01:04:06.498
ANDREW: --this build context.

01:04:06.498 --> 01:04:08.190
MATT: --build context.

01:04:08.190 --> 01:04:08.995
ANDREW: And then a

01:04:08.995 --> 01:04:09.870
MATT: Async snapshot.

01:04:09.870 --> 01:04:11.310
ANDREW: --article.

01:04:11.310 --> 01:04:13.770
Async snapshot of
an article, right?

01:04:13.770 --> 01:04:16.420
MATT: An async-- well, you're
returning ultimately a widget,

01:04:16.420 --> 01:04:16.919
right?

01:04:26.998 --> 01:04:28.497
ANDREW: Let's just
say null for now.

01:04:31.407 --> 01:04:32.490
Why are you yelling at me?

01:04:32.490 --> 01:04:34.159
What have I forgotten?

01:04:34.159 --> 01:04:36.200
MATT: Because you've got
Widget in FutureBuilder.

01:04:36.200 --> 01:04:37.930
It has to be the same type.

01:04:37.930 --> 01:04:40.460
ANDREW: Oh, of course.

01:04:40.460 --> 01:04:42.632
There we go.

01:04:42.632 --> 01:04:44.215
And that's going to
be a big function.

01:04:44.215 --> 01:04:46.464
So let me just go ahead and
make it what we're at now.

01:04:48.970 --> 01:04:51.550
So we are-- and then we
need a future, right?

01:04:51.550 --> 01:04:52.758
MATT: Yeah, we need a future.

01:04:52.758 --> 01:04:55.510
ANDREW: Future is--

01:04:55.510 --> 01:04:58.340
MATT: You know, we
could just do HTTP--

01:04:58.340 --> 01:05:00.097
oh no.

01:05:00.097 --> 01:05:01.930
ANDREW: Because we need
to parse some stuff.

01:05:01.930 --> 01:05:03.804
MATT: Because we'll need
to parse some stuff,

01:05:03.804 --> 01:05:06.247
so we might want to have--
why don't we have a function--

01:05:06.247 --> 01:05:08.830
why don't we create a function
that returns a future, and then

01:05:08.830 --> 01:05:10.117
just pop the--

01:05:10.117 --> 01:05:11.450
ANDREW: So it would take an ID--

01:05:11.450 --> 01:05:12.158
MATT: [INAUDIBLE]

01:05:12.158 --> 01:05:14.526
ANDREW: --it would return
to a future article.

01:05:14.526 --> 01:05:15.550
Does that makes sense?

01:05:15.550 --> 01:05:16.831
MATT: Yup.

01:05:16.831 --> 01:05:22.050
ANDREW: So future
article, get article.

01:05:22.050 --> 01:05:25.100
And that will take an ID.

01:05:25.100 --> 01:05:28.240
And so I would-- let
me go look at the test

01:05:28.240 --> 01:05:30.626
that we just wrote to do this.

01:05:30.626 --> 01:05:32.970
There we go.

01:05:32.970 --> 01:05:34.535
MATT: So you only need the--

01:05:34.535 --> 01:05:35.850
you don't need the first half.

01:05:35.850 --> 01:05:38.447
You only need the bit with
the pulls from the ID.

01:05:38.447 --> 01:05:39.280
ANDREW: Right there.

01:05:39.280 --> 01:05:40.071
MATT: There you go.

01:05:40.071 --> 01:05:42.580
ANDREW: Cool.

01:05:42.580 --> 01:05:44.872
I'm going to go back
into main, boop.

01:05:48.169 --> 01:05:50.530
OK.

01:05:50.530 --> 01:05:52.490
MATT: Well, it's all good.

01:05:52.490 --> 01:05:53.240
You have to make--

01:05:53.240 --> 01:05:55.870
ANDREW: And that
becomes ID, which

01:05:55.870 --> 01:05:58.514
means we don't need the
brackets, which is fun, right?

01:05:58.514 --> 01:05:59.362
MATT: Yeah.

01:05:59.362 --> 01:06:01.756
And you'll need to
make that async.

01:06:01.756 --> 01:06:03.950
ANDREW: Async.

01:06:03.950 --> 01:06:04.910
MATT: And--

01:06:04.910 --> 01:06:06.749
ANDREW: And we need
to import HTTP.

01:06:06.749 --> 01:06:07.290
MATT: Mm-hmm.

01:06:12.190 --> 01:06:15.535
And then it's usually
HTTP as HTTP--

01:06:15.535 --> 01:06:16.410
ANDREW: That's right.

01:06:16.410 --> 01:06:17.780
MATT: --so you don't
have weird GET--

01:06:17.780 --> 01:06:18.170
ANDREW: Instead of polluting--

01:06:18.170 --> 01:06:19.400
MATT: --methods
all over the place.

01:06:19.400 --> 01:06:20.660
ANDREW: It's the
global get method.

01:06:20.660 --> 01:06:20.960
MATT: That's good.

01:06:20.960 --> 01:06:21.820
ANDREW: It's fine.

01:06:21.820 --> 01:06:24.340
A story URL if a story--

01:06:24.340 --> 01:06:26.040
oh.

01:06:26.040 --> 01:06:28.342
I think that was wrong
on the original test.

01:06:28.342 --> 01:06:30.300
MATT: Oh, it's like you
said my code was wrong.

01:06:30.300 --> 01:06:31.250
ANDREW: Still worked.

01:06:31.250 --> 01:06:36.170
storyRed is definitely not this
little Freudian slip there.

01:06:36.170 --> 01:06:37.110
OK.

01:06:37.110 --> 01:06:39.551
MATT: And you want to
return the parsed article.

01:06:43.940 --> 01:06:45.650
OK.

01:06:45.650 --> 01:06:48.870
ANDREW: That seems
suspiciously easy, OK.

01:06:48.870 --> 01:06:54.415
So that would be getArticle
for i, like that.

01:06:54.415 --> 01:06:56.640
MATT: Mm-hmm.

01:06:56.640 --> 01:06:58.360
ANDREW: And so, here
we might have data.

01:06:58.360 --> 01:06:59.770
We might not, right?

01:06:59.770 --> 01:07:01.436
MATT: So this is
basically-- the builder

01:07:01.436 --> 01:07:03.633
has to return the widget tree.

01:07:03.633 --> 01:07:04.540
ANDREW: OK.

01:07:04.540 --> 01:07:08.210
MATT: So you probably want
to return build item article.

01:07:08.210 --> 01:07:11.230
ANDREW: Let's just two texts
for right now until we get--

01:07:11.230 --> 01:07:13.772
know that we're--

01:07:13.772 --> 01:07:14.980
MATT: I believe in your code.

01:07:14.980 --> 01:07:15.370
ANDREW: Yeah.

01:07:15.370 --> 01:07:16.605
MATT: I believe in your code.

01:07:16.605 --> 01:07:16.990
OK, let's just do that.

01:07:16.990 --> 01:07:18.010
ANDREW: I don't.

01:07:18.010 --> 01:07:20.950
But we've got to check to see
if the snapshot has data, right?

01:07:20.950 --> 01:07:21.490
MATT: Yes.

01:07:21.490 --> 01:07:21.730
ANDREW: OK.

01:07:21.730 --> 01:07:23.290
MATT: So one of the things when
you're using FutureBuilder is--

01:07:23.290 --> 01:07:25.664
ANDREW: I'm going to change
that to snapshot, by the way.

01:07:25.664 --> 01:07:28.930
MATT: FutureBuilder has a--

01:07:28.930 --> 01:07:31.090
snapshot has connection.

01:07:34.786 --> 01:07:36.535
Oh, that's an interesting
way of doing it.

01:07:36.535 --> 01:07:38.105
ANDREW: Oh, is
this not how you--

01:07:38.105 --> 01:07:39.740
MATT: I do it differently.

01:07:39.740 --> 01:07:41.320
ANDREW: How do you
do it, actually?

01:07:41.320 --> 01:07:44.050
MATT: So if you do if
snapshot.connectionState--

01:07:46.900 --> 01:07:48.190
ANDREW: connectionState.

01:07:48.190 --> 01:07:50.470
MATT: --equals equals
ConnectionState--

01:07:50.470 --> 01:07:52.180
ANDREW: Some enum value.

01:07:52.180 --> 01:07:54.036
MATT: Yeah, dot done.

01:07:54.036 --> 01:07:55.660
There's a whole bunch
of them in there,

01:07:55.660 --> 01:07:57.287
but done means the
future is finished.

01:07:57.287 --> 01:07:58.120
ANDREW: Interesting.

01:07:58.120 --> 01:08:00.580
MATT: And then
for anything else,

01:08:00.580 --> 01:08:03.460
I usually then just show a
circle progress indicator

01:08:03.460 --> 01:08:04.840
to show that you're waiting.

01:08:04.840 --> 01:08:06.640
And by the magic
of Flutter, it just

01:08:06.640 --> 01:08:08.500
will show the circle
progress indicator

01:08:08.500 --> 01:08:10.710
until the future's
complete, and then boom.

01:08:10.710 --> 01:08:12.380
ANDREW: And then the
future updates, OK.

01:08:12.380 --> 01:08:14.338
MATT: You don't like
circle progress indicator?

01:08:14.338 --> 01:08:15.190
ANDREW: I like text.

01:08:15.190 --> 01:08:20.899
It's like the console debugging
of the Flutter widget land.

01:08:20.899 --> 01:08:21.939
MATT: Alert.

01:08:21.939 --> 01:08:23.300
Let's just use alerts.

01:08:23.300 --> 01:08:26.488
ANDREW: [LAUGHS]
Alert [INAUDIBLE]..

01:08:26.488 --> 01:08:28.029
MATT: If there's
not an alert widget,

01:08:28.029 --> 01:08:30.069
I'm going to write an
alert widget just for you.

01:08:30.069 --> 01:08:32.527
ANDREW: You should have seen
me when I was doing C++ stuff,

01:08:32.527 --> 01:08:35.580
I would be-- like 20 printf's
was my debugging method,

01:08:35.580 --> 01:08:37.238
because it's all--

01:08:37.238 --> 01:08:38.529
MATT: Join us as we reminisce--

01:08:38.529 --> 01:08:38.830
ANDREW: Yeah.

01:08:38.830 --> 01:08:40.649
MATT: --down memory lane and
how we use print statements

01:08:40.649 --> 01:08:41.170
to debug our code.

01:08:41.170 --> 01:08:42.770
ANDREW: Join us next
week on code done badly--

01:08:42.770 --> 01:08:43.260
MATT: Flutter--

01:08:43.260 --> 01:08:44.176
ANDREW: --in the past.

01:08:44.176 --> 01:08:48.100
MATT: --the advanced way of
writing mobile apps via text.

01:08:48.100 --> 01:08:51.670
ANDREW: [LAUGHS] All
right, Text, article, dot--

01:08:51.670 --> 01:08:52.958
MATT: Name?

01:08:52.958 --> 01:08:54.342
Title?

01:08:54.342 --> 01:08:55.800
ANDREW: Oh, wait
snapshot article--

01:08:55.800 --> 01:09:01.723
MATT: Oh yes, it's going to
be snapshot.data, dot title?

01:09:01.723 --> 01:09:02.699
Name?

01:09:02.699 --> 01:09:04.115
It should pick up the type.

01:09:04.115 --> 01:09:04.740
ANDREW: Oh, oh.

01:09:04.740 --> 01:09:04.990
MATT: Oh, there you go.

01:09:04.990 --> 01:09:05.200
ANDREW: That's right.

01:09:05.200 --> 01:09:05.991
MATT: There you go.

01:09:05.991 --> 01:09:07.229
ANDREW: Let's do title.

01:09:10.010 --> 01:09:14.140
and I should probably
put returns on this.

01:09:14.140 --> 01:09:14.640
MATT: Yes.

01:09:14.640 --> 01:09:16.609
ANDREW: Because it's good to
have functions return things

01:09:16.609 --> 01:09:17.775
when they have return types.

01:09:22.000 --> 01:09:23.569
I almost don't want to do this.

01:09:23.569 --> 01:09:26.259
MATT: I-- yeah, I'm curious.

01:09:26.259 --> 01:09:29.180
[GASPS] Did that just work?

01:09:29.180 --> 01:09:29.930
ANDREW: Holy crap.

01:09:29.930 --> 01:09:31.660
MATT: Oh no-- oh, there we go.

01:09:31.660 --> 01:09:32.700
That did work.

01:09:32.700 --> 01:09:35.246
I hope they're all OK.

01:09:35.246 --> 01:09:36.870
ANDREW: Let me pull
up padding on here.

01:09:36.870 --> 01:09:39.330
Now that it works, let's
add a little padding, yeah.

01:09:39.330 --> 01:09:41.913
MATT: Can you put in my circle
progress indicator now, please?

01:09:41.913 --> 01:09:43.667
ANDREW: OK, so it's a widget.

01:09:43.667 --> 01:09:45.250
Again, it's something
I've never used.

01:09:45.250 --> 01:09:46.020
So circle--

01:09:46.020 --> 01:09:47.300
MATT: Circular.

01:09:47.300 --> 01:09:49.010
ANDREW: Circular.

01:09:49.010 --> 01:09:50.010
MATT: ProgressIndicator.

01:09:50.010 --> 01:09:52.170
ANDREW: You'll find
my IQ is normal.

01:09:52.170 --> 01:09:53.140
MATT: And that's it.

01:09:53.140 --> 01:09:53.850
ANDREW: Oh, just like that?

01:09:53.850 --> 01:09:54.690
MATT: And let's see.

01:09:54.690 --> 01:09:56.640
Watch.

01:09:56.640 --> 01:09:57.280
Oh.

01:09:57.280 --> 01:09:59.520
Now, the problem there is
that because we're doing it

01:09:59.520 --> 01:10:02.944
inside the map, it's going to do
one for each, which, you know,

01:10:02.944 --> 01:10:04.860
we can fix, but you'll
probably need to center

01:10:04.860 --> 01:10:05.880
that, because
otherwise it's going

01:10:05.880 --> 01:10:07.160
to take up the full thing.

01:10:07.160 --> 01:10:08.501
That's why they all look weird.

01:10:08.501 --> 01:10:09.000
ANDREW: OK.

01:10:09.000 --> 01:10:10.625
MATT: So if you wrap
that in a circle--

01:10:10.625 --> 01:10:12.347
ANDREW: Wrap with widget.

01:10:12.347 --> 01:10:13.680
MATT: Center, I beg your pardon.

01:10:13.680 --> 01:10:15.230
ANDREW: Oh wait, center
has its own thing.

01:10:15.230 --> 01:10:15.573
MATT: Yup.

01:10:15.573 --> 01:10:16.260
ANDREW: There we go.

01:10:16.260 --> 01:10:18.030
MATT: So let's see if
that does something.

01:10:18.030 --> 01:10:19.360
There you go, OK.

01:10:19.360 --> 01:10:22.508
ANDREW: I can't
believe that worked.

01:10:22.508 --> 01:10:24.400
MATT: Complete faith.

01:10:24.400 --> 01:10:24.900
So you--

01:10:24.900 --> 01:10:26.085
ANDREW: Now we can
use build item.

01:10:26.085 --> 01:10:26.584
MATT: Yeah.

01:10:26.584 --> 01:10:29.910
ANDREW: So OK-- so
what did we have to--

01:10:29.910 --> 01:10:30.520
comments.

01:10:30.520 --> 01:10:32.779
We still have a comment
count, because that's--

01:10:32.779 --> 01:10:34.570
I think we covered this
in another episode.

01:10:34.570 --> 01:10:38.040
It's actually hard to calculate.

01:10:38.040 --> 01:10:40.780
But we could do type.

01:10:40.780 --> 01:10:43.210
MATT: This is a row,
and you're going to--

01:10:43.210 --> 01:10:44.836
OK, sure.

01:10:44.836 --> 01:10:48.480
And you've got an icon
button for launching the URL.

01:10:48.480 --> 01:10:49.630
That's cool.

01:10:49.630 --> 01:10:52.380
ANDREW: OK, so we'll
do the article type.

01:10:52.380 --> 01:10:58.010
And then, well, we were
doing a fake URL before.

01:10:58.010 --> 01:11:03.649
So let me go ahead and
get a real article.

01:11:08.025 --> 01:11:10.010
OK, my least favorite
bug currently

01:11:10.010 --> 01:11:13.520
in the IntelliJ plugin, which
is fixed in the new release,

01:11:13.520 --> 01:11:14.020
by the way.

01:11:14.020 --> 01:11:14.330
MATT: Oh.

01:11:14.330 --> 01:11:16.000
ANDREW: By the time
this makes YouTube,

01:11:16.000 --> 01:11:17.590
that might already be fixed.

01:11:17.590 --> 01:11:21.524
There's a weird thing when you
do tab, it replaces too much.

01:11:21.524 --> 01:11:23.440
MATT: Might want to be
careful, because you've

01:11:23.440 --> 01:11:24.700
got the URL in two places.

01:11:24.700 --> 01:11:26.590
You've got fakeUrl
and article.url.

01:11:26.590 --> 01:11:29.250
ANDREW: Yeah, I'm going to
get rid of fakeUrl and just--

01:11:29.250 --> 01:11:31.240
MATT: Yeah, we don't
like no fake URLs.

01:11:31.240 --> 01:11:32.590
ANDREW: There we go.

01:11:32.590 --> 01:11:37.180
All right, and then
this would become

01:11:37.180 --> 01:11:41.051
build item snapshot.data.

01:11:49.209 --> 01:11:49.709
Oh.

01:11:49.709 --> 01:11:51.290
[CLAPS]

01:11:51.290 --> 01:11:53.010
MATT: Data not equal to null.

01:11:53.010 --> 01:11:54.010
ANDREW: Is that in text?

01:11:54.010 --> 01:11:54.676
I often do this.

01:11:54.676 --> 01:11:57.942
OK, so texting is getting--

01:11:57.942 --> 01:11:58.442
oh, OK.

01:11:58.442 --> 01:12:01.140
MATT: That's article.text.

01:12:01.140 --> 01:12:04.626
It's article.title?

01:12:04.626 --> 01:12:08.955
ANDREW: Title should
be article dot--

01:12:08.955 --> 01:12:12.220
oh, because some of
these might not be--

01:12:12.220 --> 01:12:13.770
interesting.

01:12:13.770 --> 01:12:18.580
OK, so I'll just do this
for now thanks to the magic

01:12:18.580 --> 01:12:20.169
of the coalesce operator.

01:12:24.300 --> 01:12:27.064
MATT: But isn't it
article.title or article.text?

01:12:27.064 --> 01:12:28.480
ANDREW: I think
it's [INAUDIBLE],,

01:12:28.480 --> 01:12:29.935
so I could check our--

01:12:33.255 --> 01:12:34.630
MATT: Oh, we had
text, which is--

01:12:34.630 --> 01:12:35.770
ANDREW: Oh, no,
no, you're right.

01:12:35.770 --> 01:12:37.220
MATT: --which is the comment or
story, and title is the thing.

01:12:37.220 --> 01:12:38.080
So I think they all had titles--

01:12:38.080 --> 01:12:38.230
ANDREW: Yeah.

01:12:38.230 --> 01:12:39.250
MATT: --because you were
displaying them earlier.

01:12:39.250 --> 01:12:39.610
ANDREW: You're right.

01:12:39.610 --> 01:12:40.870
It should be title anyway.

01:12:40.870 --> 01:12:43.090
So I'll leave the
null coalesce in there

01:12:43.090 --> 01:12:44.341
and just switch that to title.

01:12:44.341 --> 01:12:45.756
MATT: And your
key, you might want

01:12:45.756 --> 01:12:47.790
to change just in case
your keys get messed up.

01:12:47.790 --> 01:12:49.373
ANDREW: Oh yeah, I'm
sure that's not--

01:12:49.373 --> 01:12:51.569
MATT: That's a thing,
what happens with lists.

01:12:51.569 --> 01:12:52.110
ANDREW: Yeah.

01:12:55.930 --> 01:12:56.430
Oh.

01:12:56.430 --> 01:12:57.560
MATT: Oh, is that going to work?

01:12:57.560 --> 01:12:58.540
Is that going to click through?

01:12:58.540 --> 01:12:59.480
And are we going to
be able to read why

01:12:59.480 --> 01:13:01.058
nobody buys things in the mall?

01:13:05.818 --> 01:13:07.260
ANDREW: Is it loading?

01:13:07.260 --> 01:13:08.582
MATT: I think it's loading.

01:13:08.582 --> 01:13:11.890
It's loading something.

01:13:11.890 --> 01:13:14.680
ANDREW: Did we use some
weird proxy setting on it?

01:13:14.680 --> 01:13:16.210
Some weird proxy
on the simulator?

01:13:16.210 --> 01:13:17.910
MATT: Can you build
things from the emulator?

01:13:17.910 --> 01:13:18.995
ANDREW: I should be able to.

01:13:18.995 --> 01:13:19.670
MATT: Well, try another one.

01:13:19.670 --> 01:13:21.330
ANDREW: I mean, I'm
loading things from this.

01:13:21.330 --> 01:13:23.100
MATT: It might just
be-- might be the--

01:13:23.100 --> 01:13:26.217
might be the site URL.

01:13:26.217 --> 01:13:27.050
That's The Guardian.

01:13:27.050 --> 01:13:28.160
Surely, The Guardian works.

01:13:28.160 --> 01:13:28.993
ANDREW: There we go.

01:13:28.993 --> 01:13:29.500
MATT: Yay.

01:13:29.500 --> 01:13:31.170
ANDREW: And less plastic trash.

01:13:31.170 --> 01:13:31.990
That's nice.

01:13:31.990 --> 01:13:34.625
MATT: Your app's done.

01:13:34.625 --> 01:13:35.500
ANDREW: Holy crap.

01:13:35.500 --> 01:13:36.280
MATT: You're finished.

01:13:36.280 --> 01:13:37.105
ANDREW: Yeah, we're done.

01:13:37.105 --> 01:13:37.360
MATT: Yeah.

01:13:37.360 --> 01:13:38.110
ANDREW: End of series.

01:13:38.110 --> 01:13:38.470
MATT: Yeah.

01:13:38.470 --> 01:13:38.980
ANDREW: Yeah.

01:13:38.980 --> 01:13:39.610
MATT: Thanks for joining.

01:13:39.610 --> 01:13:39.880
ANDREW: All right.

01:13:39.880 --> 01:13:40.840
MATT: Hey, Filip,
we're really sorry--

01:13:40.840 --> 01:13:41.070
ANDREW: Yeah.

01:13:41.070 --> 01:13:42.390
MATT: --but you missed
the end of the show.

01:13:42.390 --> 01:13:43.431
ANDREW: We solved it all.

01:13:43.431 --> 01:13:44.170
MATT: Yeah.

01:13:44.170 --> 01:13:45.670
ANDREW: All right.

01:13:45.670 --> 01:13:48.070
This seems like a natural
stopping point then

01:13:48.070 --> 01:13:48.970
for this episode.

01:13:48.970 --> 01:13:51.511
MATT: I think we're going to--
we've chanced our luck enough.

01:13:51.511 --> 01:13:57.490
ANDREW: Yeah, so
things to reiterate, do

01:13:57.490 --> 01:14:01.360
please post comments and
questions on the video.

01:14:01.360 --> 01:14:04.750
You can also do
#BoringShow on Twitter.

01:14:04.750 --> 01:14:07.187
There are a few from
there that we saw as well

01:14:07.187 --> 01:14:08.020
and tried to answer.

01:14:10.830 --> 01:14:11.830
And we will be back.

01:14:11.830 --> 01:14:13.630
I think I might not be
in the next episode.

01:14:13.630 --> 01:14:15.934
Maybe it'll be
you and Filip or--

01:14:15.934 --> 01:14:16.600
MATT: One of us.

01:14:16.600 --> 01:14:18.550
ANDREW: --you and whoever
we can drag down in here

01:14:18.550 --> 01:14:19.810
into the studio or something.

01:14:19.810 --> 01:14:20.890
MATT: So one of
us doesn't exist.

01:14:20.890 --> 01:14:21.431
ANDREW: Yeah.

01:14:21.431 --> 01:14:21.957
MATT: Yeah.

01:14:21.957 --> 01:14:23.540
At any point, one
of us doesn't exist.

01:14:23.540 --> 01:14:24.325
ANDREW: Never see
the same one again.

01:14:24.325 --> 01:14:24.824
That's nice.

01:14:24.824 --> 01:14:27.730
MATT: So there will
be a surprise lineup--

01:14:27.730 --> 01:14:28.520
ANDREW: Yeah.

01:14:28.520 --> 01:14:29.750
MATT: --in the next show.

01:14:29.750 --> 01:14:34.570
ANDREW: And yeah,
give us some ideas

01:14:34.570 --> 01:14:36.640
about how you would like
state management done,

01:14:36.640 --> 01:14:38.140
if you have a particular
approach to it

01:14:38.140 --> 01:14:38.590
that you'd like to.

01:14:38.590 --> 01:14:39.190
MATT: Oh, wait.

01:14:39.190 --> 01:14:40.430
I have to turn up for
the state management one?

01:14:40.430 --> 01:14:41.230
ANDREW: Yeah, it's all you.

01:14:41.230 --> 01:14:41.620
MATT: Oh, great.

01:14:41.620 --> 01:14:42.953
ANDREW: You gave the talk at IO.

01:14:42.953 --> 01:14:44.362
You'll be fine.

01:14:44.362 --> 01:14:45.820
Because there's a
bunch of options,

01:14:45.820 --> 01:14:48.350
and it seems like we don't have
to do that in the next video,

01:14:48.350 --> 01:14:49.630
but we might want
to touch on it now

01:14:49.630 --> 01:14:51.755
that we've gotten some of
these basics figured out.

01:14:51.755 --> 01:14:52.330
So--

01:14:52.330 --> 01:14:53.413
MATT: We're getting close.

01:14:53.413 --> 01:14:55.872
ANDREW: You know, blocks,
redux scoped model,

01:14:55.872 --> 01:14:58.330
It might be good to just roll
our own inherited widget just

01:14:58.330 --> 01:14:58.930
to see it.

01:14:58.930 --> 01:15:01.150
MATT: Yeah, or even just
set state in places, but--

01:15:01.150 --> 01:15:02.770
ANDREW: Yeah, or just, you
know, stateful widgets.

01:15:02.770 --> 01:15:03.820
They work pretty good.

01:15:03.820 --> 01:15:04.540
MATT: Mm-hmm.

01:15:04.540 --> 01:15:06.040
ANDREW: But yeah,
I think that's it.

01:15:06.040 --> 01:15:06.775
MATT: Perfect.

01:15:06.775 --> 01:15:08.350
ANDREW: Yeah, thanks
for sticking with us.

01:15:08.350 --> 01:15:09.183
MATT: See you later.

01:15:09.183 --> 01:15:10.310
ANDREW: See you next time.

01:15:10.310 --> 01:15:14.860
[MUSIC PLAYING]

