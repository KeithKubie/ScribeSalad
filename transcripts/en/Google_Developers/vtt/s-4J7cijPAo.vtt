WEBVTT
Kind: captions
Language: en

00:00:01.050 --> 00:00:03.869
Imagine as soon as you sit down
in front of your TV at home,

00:00:03.869 --> 00:00:05.410
your phone instantly
shows you what's

00:00:05.410 --> 00:00:06.790
on your favorite channels.

00:00:06.790 --> 00:00:09.060
Or as you walk up to
your daily bus stop,

00:00:09.060 --> 00:00:11.840
your phone tells you that your
bus is delayed 20 minutes,

00:00:11.840 --> 00:00:13.830
but you can take
the express instead.

00:00:13.830 --> 00:00:15.700
Or perhaps you have
hearing difficulties

00:00:15.700 --> 00:00:18.355
and need specific accessibility
assistance at your bank,

00:00:18.355 --> 00:00:20.230
but instead of having
to spend the first five

00:00:20.230 --> 00:00:22.660
minutes explaining this to
the employees, as usual,

00:00:22.660 --> 00:00:25.850
they're already aware of
it and ready to serve you.

00:00:25.850 --> 00:00:27.750
As a developer,
the key thing here

00:00:27.750 --> 00:00:30.000
is having more
context so that you

00:00:30.000 --> 00:00:31.765
can provide a better
user experience

00:00:31.765 --> 00:00:35.270
and in fewer, or
no steps, at all.

00:00:35.270 --> 00:00:37.880
Hello, I'm Timothy
Jordan, and this

00:00:37.880 --> 00:00:40.550
is Developing with Beacons.

00:00:40.550 --> 00:00:43.900
A common beacon that you'll
recognize is a lighthouse.

00:00:43.900 --> 00:00:45.435
This simple but
important technology

00:00:45.435 --> 00:00:48.120
has helped ships navigate
safely through busy shipping

00:00:48.120 --> 00:00:51.800
lanes and dangerous coastlines
for hundreds of years.

00:00:51.800 --> 00:00:54.810
Today's technology provides
us with a new type of beacon

00:00:54.810 --> 00:00:57.020
whose underlying
concept is the same,

00:00:57.020 --> 00:01:00.000
but otherwise looks
a lot different.

00:01:00.000 --> 00:01:02.040
For one thing, instead
of a large tower

00:01:02.040 --> 00:01:03.760
with a gigantic
spinning light, they

00:01:03.760 --> 00:01:08.960
look like this or this
and this or even this.

00:01:08.960 --> 00:01:11.730
And they can last for
years on the same battery.

00:01:11.730 --> 00:01:14.300
But, more importantly, when
you use Google together

00:01:14.300 --> 00:01:17.610
with your beacons, you get
an open and flexible beacon

00:01:17.610 --> 00:01:21.010
standard called
Eddystone as well as APIs

00:01:21.010 --> 00:01:24.910
that allow you to register,
manage, and detect beacons.

00:01:24.910 --> 00:01:29.020
Let's take a look at how all
these components work together.

00:01:29.020 --> 00:01:30.960
Say you've got a great
idea for using beacons

00:01:30.960 --> 00:01:32.630
to improve user's lives.

00:01:32.630 --> 00:01:35.520
A service that helps
commuters with public transit.

00:01:35.520 --> 00:01:38.400
It's an app that detects
bus stops and train stations

00:01:38.400 --> 00:01:40.450
and provides up-to-date
information concerning

00:01:40.450 --> 00:01:43.080
their favorite routes
at those stops.

00:01:43.080 --> 00:01:44.520
You'll first need some beacons.

00:01:44.520 --> 00:01:46.560
One for every stop and station.

00:01:46.560 --> 00:01:49.030
Several beacon types will
work, but we recommend one the

00:01:49.030 --> 00:01:52.500
supports Eddystone, which is
a new open format for beacons

00:01:52.500 --> 00:01:54.000
that anyone can use.

00:01:54.000 --> 00:01:56.860
It offers a common
format to build upon

00:01:56.860 --> 00:01:59.320
and a means of extending
it to include new features

00:01:59.320 --> 00:02:00.490
and use cases.

00:02:00.490 --> 00:02:04.680
And it does all of this in the
open on GitHub under the Apache

00:02:04.680 --> 00:02:06.560
2.0 license.

00:02:06.560 --> 00:02:09.310
Now these beacons
work with both Android

00:02:09.310 --> 00:02:13.304
and are already available
from six manufacturers today.

00:02:13.304 --> 00:02:14.970
Once you get your
hands on a beacon that

00:02:14.970 --> 00:02:17.760
supports the Eddystone standard,
you'll need to provision it

00:02:17.760 --> 00:02:19.860
and then, depending
on your use case,

00:02:19.860 --> 00:02:21.860
you'll want to register
it with a cloud service

00:02:21.860 --> 00:02:23.640
and attach data.

00:02:23.640 --> 00:02:24.940
Provisioning is simple.

00:02:24.940 --> 00:02:27.600
It just means specifying
the basic beacon settings

00:02:27.600 --> 00:02:31.320
such as the Eddystone frame
type, the transmit power

00:02:31.320 --> 00:02:33.040
and the broadcast rate.

00:02:33.040 --> 00:02:35.330
Your beacon manufacturer
should have instructions

00:02:35.330 --> 00:02:37.570
about this process and
they're likely to have

00:02:37.570 --> 00:02:40.690
either an app or APIs
available for this step.

00:02:40.690 --> 00:02:43.800
Now some beacons even come
pre-configured for you.

00:02:43.800 --> 00:02:46.750
Once provisioned, your beacon
can start broadcasting itself

00:02:46.750 --> 00:02:47.890
to the world.

00:02:47.890 --> 00:02:50.410
If you're employing a physical
web beacon with the Eddystone

00:02:50.410 --> 00:02:54.340
URL frame type, you set the
URL in this provisioning step,

00:02:54.340 --> 00:02:55.730
and you're done.

00:02:55.730 --> 00:02:57.270
For all other
frame types, you'll

00:02:57.270 --> 00:03:00.420
want to register the beacon
and perhaps attach some data.

00:03:00.420 --> 00:03:04.280
Registering happens with
the Proximity Beacon API

00:03:04.280 --> 00:03:08.060
by providing basic information
such as the beacon advertise

00:03:08.060 --> 00:03:11.560
identifier, status, whether
it stays in place, like a bus

00:03:11.560 --> 00:03:14.930
stop, or moves around like
an actual bus, a place ID,

00:03:14.930 --> 00:03:17.520
a lat-long, and a
few other fields.

00:03:17.520 --> 00:03:20.170
This step also enables
various Google integrations

00:03:20.170 --> 00:03:22.780
like the places API and
the nearby API, which

00:03:22.780 --> 00:03:25.440
we'll talk about in a moment.

00:03:25.440 --> 00:03:27.810
Finally, you can use
the Proximity Beacon API

00:03:27.810 --> 00:03:29.620
to add some attachment data.

00:03:29.620 --> 00:03:32.570
This is where things really
start to get powerful.

00:03:32.570 --> 00:03:35.420
You can add attachments that
will have a namespace, which

00:03:35.420 --> 00:03:38.690
corresponds to your project
ID in the developer console,

00:03:38.690 --> 00:03:41.340
a type, which is a string
that specifies what kind

00:03:41.340 --> 00:03:44.190
of attachment this is, and
is unique in the namespace,

00:03:44.190 --> 00:03:46.120
and 1K of data.

00:03:46.120 --> 00:03:47.940
You'll notice by
the sample data,

00:03:47.940 --> 00:03:50.380
that it's enough for some
strings or even some JSON,

00:03:50.380 --> 00:03:54.240
but you wouldn't want to
start encoding JPEGs in here.

00:03:54.240 --> 00:03:56.930
One last thing on the
Proximity Beacon API,

00:03:56.930 --> 00:04:00.170
you can also use it to
manage your beacons at scale

00:04:00.170 --> 00:04:02.590
by detecting lost
beacons or low battery

00:04:02.590 --> 00:04:05.200
and performing
activation, deactivation,

00:04:05.200 --> 00:04:06.970
and decommissioning.

00:04:06.970 --> 00:04:09.570
Watch for these APIs to
mature with your feedback

00:04:09.570 --> 00:04:11.890
over the coming
weeks and months.

00:04:11.890 --> 00:04:12.425
OK.

00:04:12.425 --> 00:04:13.800
Now you've got a
beacon that just

00:04:13.800 --> 00:04:16.880
sits around broadcasting its
ID to anyone who will listen.

00:04:16.880 --> 00:04:20.000
Well, truth be told, it's going
to keep broadcasting its ID

00:04:20.000 --> 00:04:21.769
whether anyone is
listening or not,

00:04:21.769 --> 00:04:25.480
and I can't decide if this is
incredibly noble or perhaps

00:04:25.480 --> 00:04:26.270
sad.

00:04:26.270 --> 00:04:28.420
But let's just
call it dedicated.

00:04:28.420 --> 00:04:31.620
Next, we'll need to set up our
app to listen for our beacons.

00:04:31.620 --> 00:04:34.240
We could write our own service
to scan for the beacons using

00:04:34.240 --> 00:04:37.130
Bluetooth LE and then look them
up with the Proximity Beacon

00:04:37.130 --> 00:04:40.980
API, or we could let the
nearby Messages API do

00:04:40.980 --> 00:04:43.190
all the heavy lifting for us.

00:04:43.190 --> 00:04:44.980
I'd recommend the latter.

00:04:44.980 --> 00:04:47.990
First, you'll subscribe to
Messages from the nearby API.

00:04:47.990 --> 00:04:51.300
Included in this subscription
is our Transit Project Namespace

00:04:51.300 --> 00:04:54.260
since we're only interested
in those beacons.

00:04:54.260 --> 00:04:56.920
Nearby then keeps an eye
out for these beacons.

00:04:56.920 --> 00:05:00.030
When one is sited, it grabs the
beacon's information, including

00:05:00.030 --> 00:05:02.460
attachments, turns
them into messages,

00:05:02.460 --> 00:05:04.680
and passes them
over to your app.

00:05:04.680 --> 00:05:05.710
Now that's it.

00:05:05.710 --> 00:05:07.860
We've now got working
beacons and an app

00:05:07.860 --> 00:05:11.990
that uses them to make the
awesome happen for our users.

00:05:11.990 --> 00:05:13.940
Beacons are all
about adding context

00:05:13.940 --> 00:05:16.070
to the world, whether
at a specific place

00:05:16.070 --> 00:05:18.210
like your favorite
store or moving around

00:05:18.210 --> 00:05:19.600
like a food truck.

00:05:19.600 --> 00:05:21.935
With this context, you
can provide an experience

00:05:21.935 --> 00:05:25.290
for your user that requires
fewer steps while being

00:05:25.290 --> 00:05:27.690
richer and more accurate.

00:05:27.690 --> 00:05:29.610
We have excellent
videos and documentation

00:05:29.610 --> 00:05:33.000
on all the different aspects
of these platforms and format.

00:05:33.000 --> 00:05:35.270
Check them out for more
details on each and to get

00:05:35.270 --> 00:05:39.060
started adding context
to all the things.

00:05:39.060 --> 00:05:40.685
Thank you

00:05:40.685 --> 00:05:44.040
[MUSIC PLAYING]

