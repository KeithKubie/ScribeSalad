WEBVTT
Kind: captions
Language: en

00:00:05.534 --> 00:00:07.067
McQuade: Thanks, everyone,
for coming.

00:00:07.067 --> 00:00:08.734
How was your
first day at I/O?

00:00:08.734 --> 00:00:10.167
[cheers and applause]

00:00:10.167 --> 00:00:11.667
Awesome.

00:00:11.667 --> 00:00:12.901
We've got one more talk
for you.

00:00:12.901 --> 00:00:15.634
I'm Bryan McQuade.
Song: I'm Libo Song.

00:00:15.634 --> 00:00:17.400
McQuade: And we'll be talking
about using Page Speed

00:00:17.400 --> 00:00:20.868
to optimize your Website
for mobile.

00:00:20.868 --> 00:00:24.767
So, feedback link, hashtags.

00:00:24.767 --> 00:00:26.400
So, we'll start
with a little background

00:00:26.400 --> 00:00:27.567
on Page Speed itself

00:00:27.567 --> 00:00:29.734
before we dive
into mobile specifics.

00:00:29.734 --> 00:00:31.100
How many people here
are familiar with

00:00:31.100 --> 00:00:33.567
or have used Page Speed?

00:00:33.567 --> 00:00:35.267
Great.
Good to see.

00:00:35.267 --> 00:00:37.167
So, for those of you who aren't
familiar with our tool,

00:00:37.167 --> 00:00:39.968
Page Speed is a tool
that performs analysis

00:00:39.968 --> 00:00:43.133
on a Web page, so you run
Page Speed on a Web page.

00:00:43.133 --> 00:00:45.434
It analyzes the content
that you serve.

00:00:45.434 --> 00:00:47.434
So your HTML, your CSS,
your JavaScript,

00:00:47.434 --> 00:00:50.467
your images, et cetera, analyzes
that, you know, the thing sent--

00:00:50.467 --> 00:00:54.234
the headers,
HTTP response headers content

00:00:54.234 --> 00:00:56.234
and comes back and generates
specific suggestions

00:00:56.234 --> 00:00:58.801
to make your page load faster
without changing the way

00:00:58.801 --> 00:01:02.133
that that page appears
in the user's browser.

00:01:02.133 --> 00:01:04.767
And so, we're available today
via browser add-ons

00:01:04.767 --> 00:01:08.834
for Firefox and Chrome,
via Page Speed online

00:01:08.834 --> 00:01:11.267
and Google labs,
pagespeed.googlelabs.com,

00:01:11.267 --> 00:01:13.567
which we launched
about a month ago,

00:01:13.567 --> 00:01:14.968
the Page Speed online API,

00:01:14.968 --> 00:01:18.234
which allows you to get
sort of the raw data,

00:01:18.234 --> 00:01:20.734
the raw Page Speed results data
and process that as you wish,

00:01:20.734 --> 00:01:23.400
which we launched
actually yesterday at boot camp,

00:01:23.400 --> 00:01:27.467
and then via some third-party
integrations with Web page test

00:01:27.467 --> 00:01:29.634
in the Gomez recorder,
which Amir Rozenberg,

00:01:29.634 --> 00:01:30.767
who is here today,

00:01:30.767 --> 00:01:33.000
will talk to us about
in a few minutes.

00:01:33.000 --> 00:01:37.234
And then yesterday in the
Word Plus plugin W3 Total Cache.

00:01:37.234 --> 00:01:39.501
So, W3 Total Cache now uses
the Page Speed online API

00:01:39.501 --> 00:01:41.434
to provide
Page Speed suggestions

00:01:41.434 --> 00:01:43.467
right in the Word Press
dashboard.

00:01:43.467 --> 00:01:45.067
And so, if you're not
familiar with Page Speed,

00:01:45.067 --> 00:01:47.701
this is the UI,
the Page Speed UI here.

00:01:47.701 --> 00:01:50.100
And what you get--this is
one of our browser add-ons.

00:01:50.100 --> 00:01:51.934
What you get when you run
Page Speed on a Web page

00:01:51.934 --> 00:01:55.167
is you get
this sort of summary,

00:01:55.167 --> 00:01:57.434
which starts with a Page Speed
score at the top,

00:01:57.434 --> 00:01:59.167
91 out of 100 in this case.

00:01:59.167 --> 00:02:01.400
And what the score
indicates is essentially

00:02:01.400 --> 00:02:04.801
how much room there is
for optimization opportunity

00:02:04.801 --> 00:02:05.801
on your page.

00:02:05.801 --> 00:02:07.200
So, a really high score
indicates

00:02:07.200 --> 00:02:08.934
that there's very little
that Page Speed has to suggest

00:02:08.934 --> 00:02:10.167
to make your page faster.

00:02:10.167 --> 00:02:11.934
In other words, you're
doing a really good job,

00:02:11.934 --> 00:02:14.534
and your page is really as fast
as we know how to make it.

00:02:14.534 --> 00:02:16.801
Whereas a low score indicates
that there's lots of

00:02:16.801 --> 00:02:19.167
optimization opportunity
on your page.

00:02:19.167 --> 00:02:21.267
There's lots of room
to make the page faster.

00:02:21.267 --> 00:02:22.968
So, in this case,
91 out of 100 indicates

00:02:22.968 --> 00:02:25.067
that this particular page,

00:02:25.067 --> 00:02:27.901
which I believe is
the Page Speed page itself,

00:02:27.901 --> 00:02:30.367
is doing reasonably well--

00:02:30.367 --> 00:02:31.834
a green checkmark.

00:02:31.834 --> 00:02:34.868
And so, underneath that,
we list the specific suggestions

00:02:34.868 --> 00:02:37.767
ordered in importance
for that page,

00:02:37.767 --> 00:02:40.200
starting with we see
leverage browser caching,

00:02:40.200 --> 00:02:41.400
defer parsing
of JavaScript.

00:02:41.400 --> 00:02:44.234
Each of these
is a Page Speed suggestion.

00:02:44.234 --> 00:02:45.734
The first one is yellow.

00:02:45.734 --> 00:02:47.234
So it's a sort of
a medium priority.

00:02:47.234 --> 00:02:48.534
There's also
a red category.

00:02:48.534 --> 00:02:49.801
In this case,
there are no red,

00:02:49.801 --> 00:02:52.167
sort of high-priority
suggestions.

00:02:52.167 --> 00:02:54.734
And so, you may look at this
and say, "Well, okay,

00:02:54.734 --> 00:02:55.801
"you know,
Page Speed says

00:02:55.801 --> 00:02:57.033
"I should leverage
browser caching,

00:02:57.033 --> 00:02:58.667
"or I should defer
parsing of JavaScript.

00:02:58.667 --> 00:02:59.868
"But what does that mean?

00:02:59.868 --> 00:03:01.767
What specifically
are you telling me to do?"

00:03:01.767 --> 00:03:05.167
And so, you can click
on any one of these headings

00:03:05.167 --> 00:03:06.434
and expand it.
So, in this case,

00:03:06.434 --> 00:03:08.133
we would expand
"Specify a cache validator,"

00:03:08.133 --> 00:03:10.200
one of the Page Speed
suggestions.

00:03:10.200 --> 00:03:11.868
And you can see
the specific suggestions

00:03:11.868 --> 00:03:14.701
associated
with that Page Speed rule.

00:03:14.701 --> 00:03:16.934
So, for this site,
these specific resources,

00:03:16.934 --> 00:03:19.033
we believe,
are missing a validator,

00:03:19.033 --> 00:03:20.601
and we sort of explain up top

00:03:20.601 --> 00:03:22.534
with a little bit of text
that by adding a validator,

00:03:22.534 --> 00:03:26.834
you can reduce the overhead
of content refreshes

00:03:26.834 --> 00:03:28.601
from the server.

00:03:28.601 --> 00:03:30.100
If you're still sort of
wondering,

00:03:30.100 --> 00:03:31.234
"Well, what does that mean?"

00:03:31.234 --> 00:03:32.667
You know, "Why should
I implement this?

00:03:32.667 --> 00:03:34.834
Or what specifically
do I need to do?"

00:03:34.834 --> 00:03:36.601
You can actually click
on any one of these headings,

00:03:36.601 --> 00:03:38.901
and you'll be taken to our
documentation on the Web,

00:03:38.901 --> 00:03:41.667
which goes into specific details
for each of these rules,

00:03:41.667 --> 00:03:43.767
and we'll tell you, you know,
why you should implement this

00:03:43.767 --> 00:03:46.033
and how you can do that.

00:03:46.033 --> 00:03:48.734
And so, that's Page Speed.

00:03:48.734 --> 00:03:50.601
And now we'll look
at the agenda.

00:03:50.601 --> 00:03:52.834
So, we'll be covering
four topics today,

00:03:52.834 --> 00:03:54.868
four sort of topic areas.

00:03:54.868 --> 00:03:56.934
First,
a Web performance overview,

00:03:56.934 --> 00:03:58.133
and then we'll look
at key differences

00:03:58.133 --> 00:04:00.267
in performance for mobile

00:04:00.267 --> 00:04:02.801
and then based on that
information that we've covered,

00:04:02.801 --> 00:04:05.534
we'll look at new Page Speed
rules targeted for mobile.

00:04:05.534 --> 00:04:07.901
And finally, we'll do a brief
survey of tools available

00:04:07.901 --> 00:04:11.133
for mobile Web performance
analysis.

00:04:11.133 --> 00:04:15.734
So, first, we'll do
a Web performance overview.

00:04:15.734 --> 00:04:17.367
And so, before we dive
into sort of

00:04:17.367 --> 00:04:18.968
the technical aspects
of Web performance,

00:04:18.968 --> 00:04:20.434
we wanted to spend
a little bit of time

00:04:20.434 --> 00:04:23.634
talking about why it's important
to optimize your site,

00:04:23.634 --> 00:04:25.634
why it's important
to make your site fast.

00:04:25.634 --> 00:04:27.067
And so, we've got sort of
three statistics here,

00:04:27.067 --> 00:04:30.701
two of these we actually showed
last year in our talk at I/O,

00:04:30.701 --> 00:04:33.901
and one that's sort of new
and specific to mobile.

00:04:33.901 --> 00:04:37.634
So, first, Google did
an experiment

00:04:37.634 --> 00:04:39.300
a couple of years ago,
several years ago,

00:04:39.300 --> 00:04:40.868
where they added latency,

00:04:40.868 --> 00:04:43.701
400 milliseconds of latency
to search results pages.

00:04:43.701 --> 00:04:46.234
And we observed that as
a result of adding that latency,

00:04:46.234 --> 00:04:47.734
there was a .6%--

00:04:47.734 --> 00:04:50.734
statistically significant
.6% search decrease

00:04:50.734 --> 00:04:53.267
in search interactions
as a result of that latency.

00:04:53.267 --> 00:04:56.234
And so, what we saw is that
by making the page slower,

00:04:56.234 --> 00:04:58.834
people used it less,
and, conversely, you know,

00:04:58.834 --> 00:05:01.667
making the page faster,
people would use Search more.

00:05:01.667 --> 00:05:04.934
And so, there was a--
you know, so that really drove

00:05:04.934 --> 00:05:07.000
the point home internally
that it was really important

00:05:07.000 --> 00:05:10.601
that we make our product
as fast as possible.

00:05:10.601 --> 00:05:13.067
And so, secondly, a statistic
that came out

00:05:13.067 --> 00:05:15.767
of the Velocity Conference
in 2009,

00:05:15.767 --> 00:05:18.000
Shopzilla did
a complete site redesign

00:05:18.000 --> 00:05:19.801
where they were focused
on performance

00:05:19.801 --> 00:05:21.334
and they were able
to actually make their page

00:05:21.334 --> 00:05:24.434
five seconds faster
as a result of that redesign.

00:05:24.434 --> 00:05:28.033
And what they saw is that
not only was their site faster,

00:05:28.033 --> 00:05:30.601
but they saw
a 12% increase in revenue

00:05:30.601 --> 00:05:33.767
and on top of that a 50%
decrease in hardware costs.

00:05:33.767 --> 00:05:36.701
And so, in this case, they saw,
you know, a faster site

00:05:36.701 --> 00:05:38.734
led to increased revenue

00:05:38.734 --> 00:05:41.467
and actually decreased costs
as well.

00:05:41.467 --> 00:05:42.834
And so, finally,

00:05:42.834 --> 00:05:45.133
a third statistic that we wanted
to share this year

00:05:45.133 --> 00:05:49.267
that came
from some internal work,

00:05:49.267 --> 00:05:51.701
when the Google Maps team
added one of the best practices

00:05:51.701 --> 00:05:53.868
that we'll talk about
on a future slide,

00:05:53.868 --> 00:05:57.367
targeting mobile, using
an HTML5 application cache,

00:05:57.367 --> 00:05:59.400
they saw that their average
page-load time

00:05:59.400 --> 00:06:01.467
for the Google Maps products
for mobile devices

00:06:01.467 --> 00:06:03.133
went down by three seconds.

00:06:03.133 --> 00:06:05.267
So, implementing
that one suggestion

00:06:05.267 --> 00:06:07.667
had a three-second--
an impact of three seconds

00:06:07.667 --> 00:06:10.067
on their load time,
their average load time.

00:06:10.067 --> 00:06:12.467
And so, we're starting to see
lots more interesting statistics

00:06:12.467 --> 00:06:13.901
come in internally,

00:06:13.901 --> 00:06:16.667
and we're excited
to continue to share those,

00:06:16.667 --> 00:06:19.400
but what we're seeing
is that consistently,

00:06:19.400 --> 00:06:23.167
where performance optimizations
make sense on desktop,

00:06:23.167 --> 00:06:25.400
they make even more sense
in the mobile space.

00:06:25.400 --> 00:06:26.767
So, for instance,
a three-second overview

00:06:26.767 --> 00:06:31.567
from one optimization is a
really substantial improvement.

00:06:31.567 --> 00:06:34.100
So, let's go ahead and look
at the life of a Web page load.

00:06:34.100 --> 00:06:35.400
We sort of have
three components here.

00:06:35.400 --> 00:06:38.234
We have the server,
network, and client.

00:06:38.234 --> 00:06:39.734
And, of course,
the first thing that happens

00:06:39.734 --> 00:06:41.067
is the client says--

00:06:41.067 --> 00:06:43.467
you know, they want to fetch
some Web page.

00:06:43.467 --> 00:06:45.734
A request is sent
to the server.

00:06:45.734 --> 00:06:47.267
And the server spends
some amount of time

00:06:47.267 --> 00:06:49.734
processing that request
and generating the response.

00:06:49.734 --> 00:06:51.434
And so, typically,
we're looking at, you know,

00:06:51.434 --> 00:06:53.567
a 100 millisecond, maybe
a couple hundred milliseconds

00:06:53.567 --> 00:06:55.167
to generate that response.

00:06:55.167 --> 00:06:57.901
And if you're familiar
with Steve Souders' work,

00:06:57.901 --> 00:07:02.133
you'll know that, in fact,
that's a minority

00:07:02.133 --> 00:07:03.734
of the overall
page load time.

00:07:03.734 --> 00:07:05.534
In the life cycle
of a page load--

00:07:05.534 --> 00:07:07.767
Steve talks about this
in his talks and in his books--

00:07:07.767 --> 00:07:09.100
in the life cycle
of a page load,

00:07:09.100 --> 00:07:11.400
that time spent generating
the results on the server

00:07:11.400 --> 00:07:15.934
is actually a very small part
of the overall page load time.

00:07:15.934 --> 00:07:18.300
The rest of the time
is spent on the network,

00:07:18.300 --> 00:07:21.334
you know, namely due to
bandwidth and round-trip.

00:07:21.334 --> 00:07:23.367
So, you know, if you've got
a lot of content on your page,

00:07:23.367 --> 00:07:25.067
you may be bandwidth limited.

00:07:25.067 --> 00:07:26.701
If you've got lots of resources
on your page,

00:07:26.701 --> 00:07:29.567
you're gonna be issuing
lots of requests

00:07:29.567 --> 00:07:31.868
and round-trip is gonna
be a dominator.

00:07:31.868 --> 00:07:34.634
And then once that content
arrives back at the browser,

00:07:34.634 --> 00:07:36.901
we're looking
at things like parse time,

00:07:36.901 --> 00:07:38.400
sub-resource fetches,

00:07:38.400 --> 00:07:41.467
layout and rendering,
which is clipped unfortunately,

00:07:41.467 --> 00:07:45.334
and JavaScript parse and
execution time in the browser.

00:07:45.334 --> 00:07:49.000
All contribute to the sort of
time it takes to load a page.

00:07:50.801 --> 00:07:52.334
Yeah.

00:07:52.334 --> 00:07:54.367
So, let's look at this
sort of from a different view.

00:07:54.367 --> 00:07:55.868
We've got three columns here.

00:07:55.868 --> 00:07:57.067
We've got a client column,

00:07:57.067 --> 00:07:58.467
activity that's initiated
by the client,

00:07:58.467 --> 00:08:01.300
server column, activity
initiated by the server,

00:08:01.300 --> 00:08:03.734
and then a third column,
the render state

00:08:03.734 --> 00:08:05.100
at that point in time.

00:08:05.100 --> 00:08:07.067
So, essentially, what does
the screen look like

00:08:07.067 --> 00:08:09.000
for the user
at that point in time?

00:08:09.000 --> 00:08:10.534
And so, what we can see here
is that the first thing

00:08:10.534 --> 00:08:12.467
the client has to do
in Desktop

00:08:12.467 --> 00:08:16.801
is issue a DNS lookup
which takes a round-trip.

00:08:16.801 --> 00:08:18.567
And essentially,
what's happening here is,

00:08:18.567 --> 00:08:20.033
you know, the user types in
foo.com.

00:08:20.033 --> 00:08:21.367
Browser says,
"Okay, I need to find

00:08:21.367 --> 00:08:22.667
the IP address for foo.com."

00:08:22.667 --> 00:08:24.234
They send that
to the DNS server.

00:08:24.234 --> 00:08:26.434
The result comes back,
then they can proceed.

00:08:26.434 --> 00:08:28.400
And the browser performs
a TCP connection

00:08:28.400 --> 00:08:30.868
to the IP address that came back
in the DNS lookup.

00:08:30.868 --> 00:08:35.000
And so, each of these steps here
is a round-trip to a server.

00:08:35.000 --> 00:08:37.200
And in Desktop,
that's typically on the order

00:08:37.200 --> 00:08:39.200
of, you know, 40 milliseconds
to 100 milliseconds.

00:08:39.200 --> 00:08:41.067
And the worst cases,
it can be a second,

00:08:41.067 --> 00:08:42.200
but typically, you know,

00:08:42.200 --> 00:08:44.067
between, I'd say,
40 and 100 millis.

00:08:44.067 --> 00:08:45.467
And, so, then we begin
a third round-trip

00:08:45.467 --> 00:08:49.701
to actually send
the request to the server.

00:08:49.701 --> 00:08:51.367
The server begins
processing that request

00:08:51.367 --> 00:08:54.234
and begins returning data,
and finally at this point,

00:08:54.234 --> 00:08:56.000
after these three round-trips
have elapsed,

00:08:56.000 --> 00:08:59.200
we start to see content
render on the page.

00:08:59.200 --> 00:09:00.901
And so, at this point,
parse and layout

00:09:00.901 --> 00:09:02.434
starts to take place.

00:09:02.434 --> 00:09:04.267
The browser
discovers sub-resources,

00:09:04.267 --> 00:09:06.467
and the HTML content starts
to issue requests for those.

00:09:06.467 --> 00:09:09.701
We can see images
in the results page.

00:09:09.701 --> 00:09:11.434
And then those results
start to come back.

00:09:11.434 --> 00:09:13.334
More content is rendered.

00:09:13.334 --> 00:09:17.567
And eventually,
the page finishes loading.

00:09:17.567 --> 00:09:18.834
That's sort of the life cycle,

00:09:18.834 --> 00:09:20.400
you know,
in this sort of client server

00:09:20.400 --> 00:09:22.234
and then what does it actually
look like for the client?

00:09:22.234 --> 00:09:23.734
And so, we can see here
that actually, you know,

00:09:23.734 --> 00:09:25.767
in the sort of typical
cold case, you know,

00:09:25.767 --> 00:09:28.267
the browser has to issue
a DNS lookup, TCP connection,

00:09:28.267 --> 00:09:29.801
and send the HTTP request--

00:09:29.801 --> 00:09:31.267
three round-trips
all before any content

00:09:31.267 --> 00:09:32.801
is rendered on the screen.

00:09:32.801 --> 00:09:37.267
And so, in a minute, we'll look
at how that differs on mobile.

00:09:37.267 --> 00:09:42.300
Song: Next, we'll talk about
the key difference on mobile.

00:09:42.300 --> 00:09:44.467
There are two types
of differences.

00:09:44.467 --> 00:09:46.400
One is the network.

00:09:46.400 --> 00:09:48.300
We all know our mobile,

00:09:48.300 --> 00:09:50.367
the round-trip trip time
is longer,

00:09:50.367 --> 00:09:53.701
and we have a lower bandwidth,

00:09:53.701 --> 00:09:56.234
and also the devices
is different.

00:09:56.234 --> 00:09:58.801
The mobile devices
have less CPU power

00:09:58.801 --> 00:10:00.601
and less memory

00:10:00.601 --> 00:10:04.334
and that there is
another unique difference.

00:10:04.334 --> 00:10:07.067
It's the interaction model,
is quite different.

00:10:07.067 --> 00:10:11.868
The mobile phones or tablet
use touch screen

00:10:11.868 --> 00:10:16.334
and laptop or desktop
use mouse or track pad.

00:10:16.334 --> 00:10:20.634
We will talk about this
in detail later.

00:10:20.634 --> 00:10:21.901
McQuade: And so, first--

00:10:21.901 --> 00:10:23.567
so a minute ago,
we looked at the diagram

00:10:23.567 --> 00:10:26.901
with a Chrome
desktop browser Web server.

00:10:26.901 --> 00:10:29.634
So, now let's look at, you know,
the differences in mobile.

00:10:29.634 --> 00:10:31.901
So Libo talked about
some of those differences.

00:10:31.901 --> 00:10:34.067
And so, one of the biggest
differences is that

00:10:34.067 --> 00:10:37.033
the device itself is not
connected all the time.

00:10:37.033 --> 00:10:38.801
It's not connected
to a Wi-Fi network.

00:10:38.801 --> 00:10:41.734
It's not connected to a--
you know, a hardwire

00:10:41.734 --> 00:10:43.133
like a desktop might be.

00:10:43.133 --> 00:10:46.367
And so, when it wants
to talk on the network,

00:10:46.367 --> 00:10:48.234
it has to establish
a connection.

00:10:48.234 --> 00:10:50.234
And so, as a result--we'll talk
about that in more detail

00:10:50.234 --> 00:10:52.334
what that means
for mobile performance.

00:10:52.334 --> 00:10:55.100
But we see differences in
bandwidth and round-trip time

00:10:55.100 --> 00:10:57.434
as a result of, you know,
being on a, you know,

00:10:57.434 --> 00:10:59.634
talking over
to a cell tower.

00:10:59.634 --> 00:11:01.334
And then because the devices
are less powerful,

00:11:01.334 --> 00:11:03.334
as Libo mentioned, because
they're relatively less powerful

00:11:03.334 --> 00:11:05.767
than, you know,
desktops or laptops,

00:11:05.767 --> 00:11:09.167
we see increased parse time
and increased JavaScript time.

00:11:09.167 --> 00:11:13.200
JavaScript parse and execution
times in the mobile space.

00:11:13.200 --> 00:11:15.033
And so, we'll talk
about each of the categories

00:11:15.033 --> 00:11:17.667
that, you know, Libo mentioned
on the previous slide,

00:11:17.667 --> 00:11:19.667
the first of which
is round-trip times.

00:11:19.667 --> 00:11:21.667
And so, the most important
thing here

00:11:21.667 --> 00:11:24.534
is that initial mobile
channel establishment time

00:11:24.534 --> 00:11:28.234
can be substantially higher
than a typical round-trip time

00:11:28.234 --> 00:11:29.701
that we're used to
on the network.

00:11:29.701 --> 00:11:32.067
So if the device--so if you
pick up your mobile device

00:11:32.067 --> 00:11:35.033
and you type in, example.com,
and the device has been inactive

00:11:35.033 --> 00:11:36.534
on the network
for about 10 seconds,

00:11:36.534 --> 00:11:40.000
at least on 3G networks, we've
seen that the time it takes

00:11:40.000 --> 00:11:41.601
to establish a channel
with a mobile tower

00:11:41.601 --> 00:11:43.634
is on the order
of about two to three seconds.

00:11:43.634 --> 00:11:46.334
And so, before the device can
even issue that DNS request

00:11:46.334 --> 00:11:49.300
to sort of say, what is
the IP address for foo.com

00:11:49.300 --> 00:11:51.501
or whatever site the user
is navigating to,

00:11:51.501 --> 00:11:53.534
you're looking at a two-
to three-second delay,

00:11:53.534 --> 00:11:55.267
you know, while the device
establishes a channel

00:11:55.267 --> 00:11:56.801
with the tower.

00:11:56.801 --> 00:11:59.501
Now, once that's done,
what we've observed on 3G

00:11:59.501 --> 00:12:02.567
is that the sort of active
channel round-trip times

00:12:02.567 --> 00:12:03.801
are substantially lower.

00:12:03.801 --> 00:12:05.234
So, you know,
on the order of between--

00:12:05.234 --> 00:12:09.267
as low as 40 milliseconds
up to 100 milliseconds.

00:12:09.267 --> 00:12:11.634
And so,
while in the desktop space,

00:12:11.634 --> 00:12:12.901
when we talk
about round-trip times,

00:12:12.901 --> 00:12:14.400
we're used to thinking
about sort of

00:12:14.400 --> 00:12:16.167
a unimodal distribution
around a single average

00:12:16.167 --> 00:12:17.300
round-trip time,

00:12:17.300 --> 00:12:19.834
what we see is
that in the mobile space,

00:12:19.834 --> 00:12:23.868
for a single client,
there's actually multiple modes.

00:12:23.868 --> 00:12:26.067
Multiple modes on the
distribution of round-trips.

00:12:26.067 --> 00:12:28.400
That one mode associated
with the channel establishment

00:12:28.400 --> 00:12:32.000
up around two to three seconds
and then a second mode

00:12:32.000 --> 00:12:33.467
for active channel
round-trip times

00:12:33.467 --> 00:12:36.434
in the 40-to-100-millisecond
range.

00:12:36.434 --> 00:12:37.901
And so, we'll talk
in a future slide

00:12:37.901 --> 00:12:39.534
about what this means
for performance

00:12:39.534 --> 00:12:41.501
and sort of how you can build
your sites such that

00:12:41.501 --> 00:12:44.901
it's not sluggish in the face
of, you know, these channel--

00:12:44.901 --> 00:12:46.534
high channel
establishment times.

00:12:46.534 --> 00:12:48.801
But before we do that,
I'll just mention

00:12:48.801 --> 00:12:51.200
4G may have different
characteristics.

00:12:51.200 --> 00:12:52.634
And initial studies
we've done

00:12:52.634 --> 00:12:54.834
look like that the channel
establishment time

00:12:54.834 --> 00:12:56.767
is substantially lower in 4G.

00:12:56.767 --> 00:12:58.234
It's too early to say
for sure.

00:12:58.234 --> 00:13:00.300
But, you know,
we'll be keeping an eye on that,

00:13:00.300 --> 00:13:01.968
and you should as well.

00:13:01.968 --> 00:13:04.968
As 4G rolls out, things
may improve substantially.

00:13:04.968 --> 00:13:07.534
But for 3G, anyway, the times
are on the order

00:13:07.534 --> 00:13:12.067
of two to three seconds, which
is just a huge latency hit.

00:13:12.067 --> 00:13:17.234
Song: The mobile network
has evolved so much recently,

00:13:17.234 --> 00:13:20.567
from the 1X, 2G, 3G,

00:13:20.567 --> 00:13:22.000
but compared to
the world network,

00:13:22.000 --> 00:13:26.667
it's still
very low bandwidth.

00:13:26.667 --> 00:13:33.200
A typical 3G network now
has only about 800 Kbits

00:13:33.200 --> 00:13:35.100
per second
download bandwidth

00:13:35.100 --> 00:13:41.834
and about 400 Kbits per second
upload bandwidth.

00:13:41.834 --> 00:13:46.534
On the world network,
the bandwidth is much higher.

00:13:46.534 --> 00:13:51.467
We have seen studies showing
two megabits per second

00:13:51.467 --> 00:13:53.467
for the cable network.

00:13:53.467 --> 00:13:55.868
At my home, I have--
the Internet provider

00:13:55.868 --> 00:13:59.033
has 25 megabits per second
for download.

00:13:59.033 --> 00:14:02.767
So, the comparison
is obvious.

00:14:02.767 --> 00:14:06.501
3G network has a much lower
bandwidth.

00:14:09.267 --> 00:14:13.367
The CPU power
is also obvious.

00:14:13.367 --> 00:14:17.100
There's no doubt that
mobile devices still have

00:14:17.100 --> 00:14:19.267
a low CPU power.

00:14:19.267 --> 00:14:26.067
Here, we show a table
that shows my MacBook Pro

00:14:26.067 --> 00:14:31.067
running the JavaScript
benchmark, SunSpider.

00:14:31.067 --> 00:14:35.100
It has 427 millisecond.

00:14:35.100 --> 00:14:39.968
The Nexus IS,
it's the new Google phone,

00:14:39.968 --> 00:14:45.467
it has more than
5,000 millisecond.

00:14:45.467 --> 00:14:52.901
The Samsung Captivate
has older Android OS.

00:14:52.901 --> 00:14:55.868
It has more than
12,000 millisecond.

00:14:55.868 --> 00:14:59.067
You can see clearly the desktop

00:14:59.067 --> 00:15:01.534
is still 10 times faster
than mobile.

00:15:01.534 --> 00:15:07.000
And so, in that case,
the JavaScript need more time

00:15:07.000 --> 00:15:12.100
to be parsed, to be executed
on your mobile phone or tablet.

00:15:12.100 --> 00:15:16.801
And also, it need more time
to render the layout.

00:15:16.801 --> 00:15:19.934
Because the phones
have less memory,

00:15:19.934 --> 00:15:24.567
it may need more frequent
garbage collection.

00:15:24.567 --> 00:15:27.501
And so, it's extra.

00:15:30.701 --> 00:15:34.400
The other unique difference
is the interaction model.

00:15:34.400 --> 00:15:37.601
Desktop and the laptops
use mouse or track pad.

00:15:37.601 --> 00:15:39.634
It's the same as mouse.

00:15:39.634 --> 00:15:43.567
But on your mobile phones
or tablet,

00:15:43.567 --> 00:15:46.300
use the touch screen.

00:15:46.300 --> 00:15:50.400
So, the mobile browser
won't fire the click event

00:15:50.400 --> 00:15:56.000
until 300
to 500 milliseconds delay.

00:15:56.000 --> 00:15:59.033
At that time, the browser
or device decide

00:15:59.033 --> 00:16:01.467
that this is just one click,
not double click,

00:16:01.467 --> 00:16:05.167
not pinch,
not other interactions.

00:16:08.968 --> 00:16:10.901
McQuade: And so,
now based on the differences

00:16:10.901 --> 00:16:13.467
that we've covered,
let's look at that same view,

00:16:13.467 --> 00:16:16.133
that same three-column view
for mobile.

00:16:16.133 --> 00:16:19.968
And so, as we talked about, the
most sort of significant change

00:16:19.968 --> 00:16:22.667
here is that initial mobile
channel establishment

00:16:22.667 --> 00:16:24.501
that the device
now has to perform

00:16:24.501 --> 00:16:26.501
when it wants to issue
a request.

00:16:26.501 --> 00:16:28.000
And so, you know,
that's actually issued

00:16:28.000 --> 00:16:30.367
to the cell tower, which
is sort of a fourth component

00:16:30.367 --> 00:16:33.000
in this graphic.

00:16:33.000 --> 00:16:34.634
And so, I should mention, too,

00:16:34.634 --> 00:16:36.667
that that this is not to scale
in terms of, you know,

00:16:36.667 --> 00:16:37.934
amount of time,
as we talked about.

00:16:37.934 --> 00:16:39.334
We're looking
at two to three-second

00:16:39.334 --> 00:16:41.167
mobile channel establishment,
and, you know,

00:16:41.167 --> 00:16:43.968
40 to 100 to maybe several
hundred millisecond DNS lookup.

00:16:43.968 --> 00:16:45.534
So that channel establishment
actually should be

00:16:45.534 --> 00:16:47.801
substantially taller,
but we're space limited

00:16:47.801 --> 00:16:50.534
And so, it's not as big
as it should be.

00:16:50.534 --> 00:16:53.300
So once we establish a channel,
things start to look

00:16:53.300 --> 00:16:56.501
much more like Desktop, so we
see that DNS lookup round-trip,

00:16:56.501 --> 00:17:00.567
TCP connection,
HTTP request to the server,

00:17:00.567 --> 00:17:01.734
Content starts to come back.

00:17:01.734 --> 00:17:03.133
And here, now we've got
a mobile view,

00:17:03.133 --> 00:17:05.367
and it starts to render
very similarly to the desktop

00:17:05.367 --> 00:17:06.467
at this point.

00:17:06.467 --> 00:17:08.467
The device issues
its sub requests.

00:17:08.467 --> 00:17:10.701
That content
starts to come back,

00:17:10.701 --> 00:17:13.367
then the page view
completes rendering.

00:17:13.367 --> 00:17:15.367
And so, we see here, too, that,
that parse and layout step

00:17:15.367 --> 00:17:17.334
tends to take longer
on the mobile device

00:17:17.334 --> 00:17:21.934
because the device
is just less powerful.

00:17:21.934 --> 00:17:25.968
And so, in this case,
the Google search for mobile

00:17:25.968 --> 00:17:28.000
is actually substantially
simpler in terms

00:17:28.000 --> 00:17:30.667
of the number of DOM nodes
and the amount of JavaScript

00:17:30.667 --> 00:17:32.434
as compared to
the desktop version.

00:17:32.434 --> 00:17:34.100
So, even though
the device is slower,

00:17:34.100 --> 00:17:36.434
we see that it still
renders very quickly.

00:17:36.434 --> 00:17:37.901
And so, it's important
to keep in mind

00:17:37.901 --> 00:17:39.567
that if you're taking
a desktop app

00:17:39.567 --> 00:17:41.901
and you're just gonna port it
over to the mobile space,

00:17:41.901 --> 00:17:43.667
you should expect
that that same desktop app

00:17:43.667 --> 00:17:46.200
is going to be on the order
of about 10 times slower

00:17:46.200 --> 00:17:47.667
when you port it over
to mobile.

00:17:47.667 --> 00:17:49.367
So, it's important to be
thoughtful about, you know,

00:17:49.367 --> 00:17:51.934
"Do I really need all this
JavaScript in the mobile space?"

00:17:51.934 --> 00:17:54.734
You know, essentially, you know,
prioritize the content

00:17:54.734 --> 00:17:56.901
that's most important in mobile

00:17:56.901 --> 00:17:59.300
and especially because the
screen real estate is less, too.

00:17:59.300 --> 00:18:02.734
You know, certainly,
there's likely a lot of content

00:18:02.734 --> 00:18:05.200
that you can exclude
from that initial page view

00:18:05.200 --> 00:18:09.133
in order to make
that initial page view faster.

00:18:09.133 --> 00:18:12.634
Okay. So, we covered the key
differences for mobile.

00:18:12.634 --> 00:18:15.400
And now we'll take some time
to look at Page Speed rules

00:18:15.400 --> 00:18:17.434
that we've derived
from these key differences.

00:18:17.434 --> 00:18:19.267
So, we'll look at Page Speed
rules that we've added

00:18:19.267 --> 00:18:21.801
to Page Speed that you can see
on Page Speed online

00:18:21.801 --> 00:18:25.767
and our other tools
that will suggest

00:18:25.767 --> 00:18:30.400
essentially fixes that address
these differences in mobile.

00:18:30.400 --> 00:18:32.667
And so, there are five rules
that we've added.

00:18:32.667 --> 00:18:34.234
And we'll go through
each of these.

00:18:34.234 --> 00:18:36.534
Use an application cache,
defer parsing of JavaScript,

00:18:36.534 --> 00:18:39.167
make landing page redirects
cacheable,

00:18:39.167 --> 00:18:42.267
prefer touch events,
and enable Keep-Alive.

00:18:42.267 --> 00:18:44.000
And these are--some of these
we've added already.

00:18:44.000 --> 00:18:45.467
Some of them are under
active development.

00:18:45.467 --> 00:18:47.167
You could expect to see them
added to Page Speed

00:18:47.167 --> 00:18:48.567
in the coming weeks
and months.

00:18:48.567 --> 00:18:50.300
And we'll also be adding
additional rules going forward

00:18:50.300 --> 00:18:52.033
that aren't listed here

00:18:52.033 --> 00:18:55.968
as we learn about new
mobile best practices.

00:18:55.968 --> 00:18:59.200
So, first,
use an application cache.

00:18:59.200 --> 00:19:03.434
So, the idea here--so, this is
actually the exact suggestion

00:19:03.434 --> 00:19:05.267
that Gmail mobile team--

00:19:05.267 --> 00:19:07.801
the mobile version of Gmail
implemented,

00:19:07.801 --> 00:19:10.033
and they saw
about a three-second reduction

00:19:10.033 --> 00:19:12.701
in page load times
for that application.

00:19:12.701 --> 00:19:16.033
And so, interestingly,
that matches--that correlates

00:19:16.033 --> 00:19:18.801
with that initial channel
establishment time

00:19:18.801 --> 00:19:22.300
that we talked about earlier,
2.5 to 3 seconds.

00:19:22.300 --> 00:19:24.634
It's not clear that they're
the same for that for a reason,

00:19:24.634 --> 00:19:28.300
but it's interesting to note
that essentially

00:19:28.300 --> 00:19:30.501
what the benefit of using
the application cache

00:19:30.501 --> 00:19:32.400
is that you're able to avoid

00:19:32.400 --> 00:19:35.601
that initial, very expensive
round-trip to the server

00:19:35.601 --> 00:19:38.734
because the content is cached
locally on the device.

00:19:38.734 --> 00:19:41.434
And so, that as soon as a user
types in maps.google.com,

00:19:41.434 --> 00:19:43.467
or whatever site
they may type in,

00:19:43.467 --> 00:19:45.634
that content starts to load
before it has to--

00:19:45.634 --> 00:19:47.534
before the request has to even
be sent on the network.

00:19:47.534 --> 00:19:49.601
So, the frame of the page,
for instance,

00:19:49.601 --> 00:19:51.834
the content that's static
can display immediately

00:19:51.834 --> 00:19:53.734
and really let the user
know that, you know,

00:19:53.734 --> 00:19:55.767
this page is starting
to load quickly.

00:19:55.767 --> 00:19:57.734
You know, it's there
and the idea is that the user

00:19:57.734 --> 00:20:00.400
doesn't get sort of frustrated
or discouraged and leave.

00:20:00.400 --> 00:20:01.834
They say, "Okay, great.
Some content is loading."

00:20:01.834 --> 00:20:04.801
And then as the network
becomes available,

00:20:04.801 --> 00:20:06.634
as the mobile channel
is established,

00:20:06.634 --> 00:20:08.834
the device is able to start
sending requests to fill in

00:20:08.834 --> 00:20:11.767
sort of the dynamic parts
of the page, you know,

00:20:11.767 --> 00:20:13.901
at a later time.

00:20:13.901 --> 00:20:17.167
And so, using a manifest
is an HTML5 feature,

00:20:17.167 --> 00:20:22.534
HTML5 application cache,
is a pretty simple thing to do.

00:20:22.534 --> 00:20:25.567
You just add a manifest
attribute to your HTML tag

00:20:25.567 --> 00:20:27.200
in your HTML document.

00:20:27.200 --> 00:20:29.234
That refers to a file,
in this case, you know,

00:20:29.234 --> 00:20:31.167
"my manifest"
on the Web server.

00:20:31.167 --> 00:20:33.033
And that page, which we'll
actually see an example

00:20:33.033 --> 00:20:36.667
of this content in a minute
in one of our demos,

00:20:36.667 --> 00:20:39.601
but that piece of content
is just a list of resources

00:20:39.601 --> 00:20:40.968
that are used by the app.

00:20:40.968 --> 00:20:43.968
And so, it starts with
CACHE MANIFEST, all in caps,

00:20:43.968 --> 00:20:46.501
and then each line after that
is just a list of the resources

00:20:46.501 --> 00:20:50.801
that are used--
needed by that application.

00:20:50.801 --> 00:20:52.634
And another nice benefit
of using app cache,

00:20:52.634 --> 00:20:54.400
and actually the primary reason
app cache was added

00:20:54.400 --> 00:20:56.367
was for offline capability
on the Web.

00:20:56.367 --> 00:20:58.734
But it does have
that nice added benefit

00:20:58.734 --> 00:21:00.067
that even when you're online,

00:21:00.067 --> 00:21:02.167
the content starts to render
and display immediately.

00:21:02.167 --> 00:21:03.567
And that's actually
the reason

00:21:03.567 --> 00:21:05.100
that we like
the application cache.

00:21:05.100 --> 00:21:08.667
It actually has a substantial
performance benefit in mobile.

00:21:10.968 --> 00:21:14.000
Song: The next rule we propose
is to defer parsing

00:21:14.000 --> 00:21:21.267
of JavaScript, at desktop
of low CPU power, low memory.

00:21:21.267 --> 00:21:25.300
So, and there was--
parsing of JavaScript

00:21:25.300 --> 00:21:30.133
will put upfront time
for your page to be loaded.

00:21:30.133 --> 00:21:36.133
If your JavaScript don't need
to be executed right up front,

00:21:36.133 --> 00:21:39.968
you can defer parsing them
or even defer load them.

00:21:39.968 --> 00:21:43.868
Here in this table,
I did some experiment

00:21:43.868 --> 00:21:49.067
to run four popular
JavaScripts libraries,

00:21:49.067 --> 00:21:54.834
and measured how long it takes
for iPhone 4 to parse them.

00:21:54.834 --> 00:21:56.400
We get the result.

00:21:56.400 --> 00:22:01.734
It's almost
one millisecond per kilobyte.

00:22:01.734 --> 00:22:04.868
So if we can defer
parsing of them,

00:22:04.868 --> 00:22:09.234
your page will be showed up
quickly.

00:22:09.234 --> 00:22:13.033
And there are several ways
that you can defer parsing.

00:22:13.033 --> 00:22:15.334
One is if you can
defer load them,

00:22:15.334 --> 00:22:17.734
then defer loading
the JavaScript,

00:22:17.734 --> 00:22:19.934
that's the best way.

00:22:19.934 --> 00:22:22.834
If you can't, you can put
your JavaScript

00:22:22.834 --> 00:22:27.467
in literal string
or in the comment.

00:22:27.467 --> 00:22:30.267
In that case,
the JavaScript engine

00:22:30.267 --> 00:22:32.267
will parse them very quickly.

00:22:32.267 --> 00:22:35.767
That's also at Google,

00:22:35.767 --> 00:22:39.234
the Maps team or the Gmail team
are using those techniques.

00:22:39.234 --> 00:22:41.067
McQuade: There's actually
a nice blog post

00:22:41.067 --> 00:22:43.033
a couple of years ago
the mobile Gmail team wrote

00:22:43.033 --> 00:22:45.968
that goes into some more detail
about how they accomplished this

00:22:45.968 --> 00:22:47.734
that you can take a look
at on the Web if you search for,

00:22:47.734 --> 00:22:54.267
you know, mobile Gmail
performance, I believe, blog.

00:22:54.267 --> 00:22:56.100
Using your favorite
search engine,

00:22:56.100 --> 00:23:00.767
you should find that blog post,
and they'll go into more detail.

00:23:00.767 --> 00:23:05.868
Song: The other rule we propose
to make your landing page

00:23:05.868 --> 00:23:08.501
redirect cacheable.

00:23:08.501 --> 00:23:15.000
We know that each redirect
involves at least a reconnection

00:23:15.000 --> 00:23:17.968
at a request
to round-trip times.

00:23:17.968 --> 00:23:23.133
If the host is not resolved,
you have another DNS lookup.

00:23:23.133 --> 00:23:27.968
So, there's multiple round-trip
times involved in each redirect.

00:23:27.968 --> 00:23:34.200
For example, if example.com
redirects to www.example.com

00:23:34.200 --> 00:23:37.434
which redirects
to m.example.com,

00:23:37.434 --> 00:23:40.434
and then redirects it
to the final landing page,

00:23:40.434 --> 00:23:48.300
www.example.com/m,
there are three redirections.

00:23:48.300 --> 00:23:51.868
We have seen this parsing
in the real world.

00:23:51.868 --> 00:23:57.467
It may not be the real
example.com.

00:23:57.467 --> 00:24:02.534
So, to solve this problem,
if you make your--

00:24:02.534 --> 00:24:05.100
each of those three directions
cacheable

00:24:05.100 --> 00:24:10.501
so that when the browser
looks up the first URL,

00:24:10.501 --> 00:24:14.868
it will just use the cache,
and you'll see--

00:24:14.868 --> 00:24:17.067
you'll find all that
in page directly.

00:24:17.067 --> 00:24:20.000
This won't save much
for the first visit,

00:24:20.000 --> 00:24:25.834
but for the repeated visits,
you will see the improvements.

00:24:30.033 --> 00:24:36.434
The first rule we propose
is to prefer touch events.

00:24:36.434 --> 00:24:40.100
As I have said before,

00:24:40.100 --> 00:24:44.267
this is a very unique rule
for mobile only.

00:24:44.267 --> 00:24:46.667
The other rules
we have proposed,

00:24:46.667 --> 00:24:51.767
they work--also work
on desktop, laptops,

00:24:51.767 --> 00:24:55.801
but those are more important
on mobile

00:24:55.801 --> 00:24:58.901
because of the network,
the CPU.

00:24:58.901 --> 00:25:05.667
But this interaction mode rule
is quite unique here

00:25:05.667 --> 00:25:11.501
because the phone
has this onclick event.

00:25:11.501 --> 00:25:14.934
If your event handler
listens to onclick handler,

00:25:14.934 --> 00:25:19.601
you won't get the event
until the browser wait

00:25:19.601 --> 00:25:23.834
300 to 500 milliseconds.

00:25:25.601 --> 00:25:32.634
Here I can show a short video
that demos the click.

00:25:32.634 --> 00:25:37.000
You can also go to the URL
I put there.

00:25:37.000 --> 00:25:40.400
Look at--
show the demo yourself.

00:25:40.400 --> 00:25:41.734
McQuade: So, if you have
a mobile device,

00:25:41.734 --> 00:25:43.167
you can actually
try this out.

00:25:43.167 --> 00:25:44.567
It really shows the difference
in sort of response time.

00:25:44.567 --> 00:25:45.968
Song: Yeah.
That won't work on the desktop

00:25:45.968 --> 00:25:49.534
since the desktop
has no touch event.

00:25:49.534 --> 00:25:51.234
McQuade: We'll show the video,
but it's most compelling

00:25:51.234 --> 00:25:52.767
if you just try it yourself.

00:25:52.767 --> 00:25:55.033
You'll really see
the difference in response time.

00:25:55.033 --> 00:25:57.467
Song: On this screen,
we have two buttons.

00:25:57.467 --> 00:26:01.167
One is slow button.
The other is fast button.

00:26:01.167 --> 00:26:03.501
On the right
is the slow button.

00:26:03.501 --> 00:26:06.701
If you click, you can see
there is some change

00:26:06.701 --> 00:26:09.567
in the text area,
but it won't--

00:26:09.567 --> 00:26:11.968
doesn't show the change
right away.

00:26:11.968 --> 00:26:17.267
But on the left, you can see
it's more responsive.

00:26:17.267 --> 00:26:21.801
And also on the slow button,
if you click too quickly,

00:26:21.801 --> 00:26:24.067
the browser don't know
what you are doing.

00:26:24.067 --> 00:26:28.200
So it just wait until you end
so it will sync up,

00:26:28.200 --> 00:26:30.667
finish this click.

00:26:34.467 --> 00:26:37.834
The last rule we propose--
to enable Keep-Alive

00:26:37.834 --> 00:26:39.834
for your server.

00:26:41.968 --> 00:26:49.734
Each connection need--
there are many resources

00:26:49.734 --> 00:26:51.400
in each of the Web pages.

00:26:51.400 --> 00:26:55.133
Each resource
needs a request.

00:26:55.133 --> 00:27:00.067
For each request,
you have to connect the server

00:27:00.067 --> 00:27:04.033
and send the request,
then receive the response.

00:27:04.033 --> 00:27:08.834
If the connection can be reused,
you will save the time

00:27:08.834 --> 00:27:11.634
to reconnect
to the server.

00:27:11.634 --> 00:27:17.868
Here in this chart,
I show connection wheel.

00:27:17.868 --> 00:27:23.167
That's each row in this chart
is a connection.

00:27:23.167 --> 00:27:27.300
There are one request
on each of the row.

00:27:27.300 --> 00:27:30.767
The brown bar
shows the connection time.

00:27:30.767 --> 00:27:33.334
Green shows
the sending requests

00:27:33.334 --> 00:27:35.367
and awaiting the response.

00:27:35.367 --> 00:27:40.300
And the blue bar shows
the receiving time.

00:27:40.300 --> 00:27:43.267
We can see that every request

00:27:43.267 --> 00:27:47.434
there is a connection cost
up front.

00:27:47.434 --> 00:27:52.968
If you have enabled your server
to use Keep-Alive--

00:27:52.968 --> 00:27:55.133
I will show
the next chart.

00:27:55.133 --> 00:28:00.234
It's the same 16 resources
and the same 6 connections.

00:28:00.234 --> 00:28:06.667
We have done this test
using webpagetest.org,

00:28:06.667 --> 00:28:08.434
which uses IE 8.

00:28:08.434 --> 00:28:12.067
It has a maximum
of eight connections per host.

00:28:12.067 --> 00:28:16.133
So, all those results
are on the same host.

00:28:16.133 --> 00:28:19.234
Here on the right chart,

00:28:19.234 --> 00:28:22.567
when the server
has enabled Keep-Alive,

00:28:22.567 --> 00:28:26.534
we can see on each row--
on the first row,

00:28:26.534 --> 00:28:30.734
there are four resources
and only one connection cost.

00:28:30.734 --> 00:28:33.701
The second row,
we have only two resources,

00:28:33.701 --> 00:28:36.901
because one of the resources
took longer.

00:28:36.901 --> 00:28:41.334
But overall,
we saved connection cost.

00:28:43.667 --> 00:28:45.234
McQuade: And so,
we'll finish by giving a--

00:28:45.234 --> 00:28:48.934
doing a survey of tools
available to analyze

00:28:48.934 --> 00:28:50.567
mobile Web performance.

00:28:50.567 --> 00:28:53.734
So before we do that,
or as a first tool

00:28:53.734 --> 00:28:56.434
that we'll talk about,
we'll have Amir Rozenberg

00:28:56.434 --> 00:28:59.200
from Compuware come up
and talk about their use

00:28:59.200 --> 00:29:02.467
of Page Speed
in the Gomez Recorder,

00:29:02.467 --> 00:29:04.300
and in Gomez mobile products.

00:29:04.300 --> 00:29:07.234
So, welcome,
Amir Rozenberg.

00:29:07.234 --> 00:29:11.734
[applause]

00:29:11.734 --> 00:29:14.434
Rozenberg: Thanks, Bryan
and Libo, this was great.

00:29:14.434 --> 00:29:16.367
Hi, everyone.
My name is Amir,

00:29:16.367 --> 00:29:18.200
from Compuware Gomez APM.

00:29:18.200 --> 00:29:20.667
I'll do the mandatory one slide
about who we are

00:29:20.667 --> 00:29:21.834
and what we do.

00:29:21.834 --> 00:29:23.067
And so, we are

00:29:23.067 --> 00:29:25.901
in the application
performance management business.

00:29:25.901 --> 00:29:28.067
If you have a Website,
a mobile Website,

00:29:28.067 --> 00:29:31.467
a native application,
or an SMS application,

00:29:31.467 --> 00:29:34.868
and you really care about it,
whether it makes money for you,

00:29:34.868 --> 00:29:37.734
or it's a brand play
or whatever it is,

00:29:37.734 --> 00:29:39.234
we're in the business
of telling you

00:29:39.234 --> 00:29:40.901
whether the application
is up,

00:29:40.901 --> 00:29:44.300
is it performing
in the eyes of your end user

00:29:44.300 --> 00:29:47.567
wherever they may be,
and if it doesn't perform

00:29:47.567 --> 00:29:50.501
for whatever reason,
our job is to quickly tell you

00:29:50.501 --> 00:29:53.567
or give you enough information
to go and fix the issue

00:29:53.567 --> 00:29:57.501
that causes the performance
to be degraded

00:29:57.501 --> 00:30:00.267
in the view of the end user.

00:30:00.267 --> 00:30:01.567
And so, that's who we are,

00:30:01.567 --> 00:30:04.434
and I am
the mobile product manager

00:30:04.434 --> 00:30:07.067
in the Compuware Gomez APM.

00:30:07.067 --> 00:30:09.968
And what I wanted to do today
is just to give you

00:30:09.968 --> 00:30:12.033
a couple of things that
we're seeing in the marketplace

00:30:12.033 --> 00:30:14.801
and what we're doing
with mobile Page Speed.

00:30:14.801 --> 00:30:18.534
And so, you know, mobile
is a terrific opportunity.

00:30:18.534 --> 00:30:21.400
You have an opportunity
to get closer to your end users

00:30:21.400 --> 00:30:22.601
and learn more about them

00:30:22.601 --> 00:30:24.400
and give them
really unique experiences,

00:30:24.400 --> 00:30:27.434
but what we're seeing
is that mobile users

00:30:27.434 --> 00:30:29.000
really don't have
a lot of patience

00:30:29.000 --> 00:30:32.467
with applications
that don't really perform well

00:30:32.467 --> 00:30:34.601
or have all kinds
of latency issues.

00:30:34.601 --> 00:30:36.801
And so, a lot of users,
and, you know,

00:30:36.801 --> 00:30:39.801
check it out with yourselves,
you know,

00:30:39.801 --> 00:30:43.834
expect mobile experiences
to perform even better

00:30:43.834 --> 00:30:45.767
than desktop experiences,

00:30:45.767 --> 00:30:48.234
and you can think
about navigation applications

00:30:48.234 --> 00:30:50.234
or health care applications.

00:30:50.234 --> 00:30:53.234
If a physician
gives a prescription

00:30:53.234 --> 00:30:55.200
over the weekend
and so forth,

00:30:55.200 --> 00:30:58.968
They need access to information
rather quickly,

00:30:58.968 --> 00:31:01.701
and they need the experience
to perform really well.

00:31:01.701 --> 00:31:03.868
And so, what we're seeing
is that, like I said,

00:31:03.868 --> 00:31:08.400
a lot of people expect the
experience to perform as well,

00:31:08.400 --> 00:31:09.834
if not better.

00:31:09.834 --> 00:31:13.133
And a lot of people are actually
unhappy with the experiences,

00:31:13.133 --> 00:31:16.067
and when they are, they're
unlikely to come back to it.

00:31:16.067 --> 00:31:19.033
In fact, nowadays,
when, you know,

00:31:19.033 --> 00:31:23.968
it's not so much anymore
about the carrier and so forth,

00:31:23.968 --> 00:31:27.667
many of them actually will move
to your competition, right?

00:31:27.667 --> 00:31:30.234
So there are many
applications out there.

00:31:30.234 --> 00:31:33.000
They'll just choose
another alternative.

00:31:33.000 --> 00:31:34.467
And so, one thing
that we've done here

00:31:34.467 --> 00:31:37.200
is we actually measured
the abandonment rate

00:31:37.200 --> 00:31:39.701
by page load time,
and the really interesting thing

00:31:39.701 --> 00:31:42.434
that correlates well with
what Bryan mentioned earlier

00:31:42.434 --> 00:31:47.033
is those two seconds as the page
loads for the first time.

00:31:47.033 --> 00:31:49.701
And so, what we're seeing
is that in mobile,

00:31:49.701 --> 00:31:51.868
users are actually
a little bit more tolerant

00:31:51.868 --> 00:31:53.234
of the experience

00:31:53.234 --> 00:31:56.300
and wouldn't abandon it
right there and then.

00:31:56.300 --> 00:31:58.267
And what we're hoping to see
is that indeed,

00:31:58.267 --> 00:32:02.067
the 4G deployment of networks
would actually reduce that

00:32:02.067 --> 00:32:04.234
and would give us
some more breathing room.

00:32:04.234 --> 00:32:05.734
However, what you can see
out there

00:32:05.734 --> 00:32:09.501
is that users on mobile
will abandon the pages

00:32:09.501 --> 00:32:12.901
or mobile native applications
pretty quickly after that,

00:32:12.901 --> 00:32:15.234
almost as fast as desktop Web.

00:32:15.234 --> 00:32:19.901
And we see that that trend will
actually increase over time.

00:32:19.901 --> 00:32:22.501
I'm sorry.

00:32:22.501 --> 00:32:26.234
And so, one of the things
that we've done with Google--

00:32:26.234 --> 00:32:29.934
we are also very much in line
with making the Web faster

00:32:29.934 --> 00:32:32.334
and making it much better.

00:32:32.334 --> 00:32:36.100
This is probably the key tool
that our users would be using

00:32:36.100 --> 00:32:40.167
to describe Web, mobile Web, and
native application experiences.

00:32:40.167 --> 00:32:42.267
We call that
the Gomez Recorder.

00:32:42.267 --> 00:32:48.667
And we've actually integrated
the Page Speed recommendations

00:32:48.667 --> 00:32:50.234
to every one of our users.

00:32:50.234 --> 00:32:51.968
And so, if you use this tool,

00:32:51.968 --> 00:32:53.968
you'd effectively go
to your Website

00:32:53.968 --> 00:32:56.601
and click through and go
through the various steps

00:32:56.601 --> 00:32:58.667
that you want to
then monitor,

00:32:58.667 --> 00:33:00.634
and then you run
the scripts again,

00:33:00.634 --> 00:33:04.067
and for each of the pages
that you go through,

00:33:04.067 --> 00:33:05.868
you will actually get
the recommendation

00:33:05.868 --> 00:33:09.601
of the Page Speed
as you've seen earlier

00:33:09.601 --> 00:33:13.534
with these stand-alone
Page Speed description

00:33:13.534 --> 00:33:14.834
that Bryan gave.

00:33:14.834 --> 00:33:16.767
And so, this is really
a tremendous help

00:33:16.767 --> 00:33:22.434
to our customer base,
because now not only they can,

00:33:22.434 --> 00:33:24.634
you know, become aware
of performance issues,

00:33:24.634 --> 00:33:27.200
post-production in the field,
but actually

00:33:27.200 --> 00:33:29.634
they can get recommendations
to what to fix

00:33:29.634 --> 00:33:34.167
on their Website
pre-production as they--

00:33:34.167 --> 00:33:38.601
you know, as they create
the experience.

00:33:38.601 --> 00:33:40.334
So, thanks for Bryan
and the team

00:33:40.334 --> 00:33:43.200
to give us those APIs
and let us use them.

00:33:43.200 --> 00:33:46.734
And that's kind of my piece.

00:33:46.734 --> 00:33:48.067
McQuade: Thanks, Amir.

00:33:48.067 --> 00:33:51.000
[applause]

00:33:54.667 --> 00:33:56.067
Okay, so, now Libo and I

00:33:56.067 --> 00:33:58.901
will do a brief survey of other
mobile performance tools.

00:33:58.901 --> 00:34:01.801
So two that we've built
on the Page Speed team,

00:34:01.801 --> 00:34:03.701
and two that were built--
that are third-party tools,

00:34:03.701 --> 00:34:06.968
that were built outside
of our team.

00:34:06.968 --> 00:34:09.634
Song: The first one,
we will show Pcapperf

00:34:09.634 --> 00:34:15.267
that will help you analyze
your mobile device,

00:34:15.267 --> 00:34:18.567
mobile analysis that will show
that flow chart

00:34:18.567 --> 00:34:20.868
to see which requests
at what time

00:34:20.868 --> 00:34:27.200
and then you can see
the bottleneck of your Web page.

00:34:27.200 --> 00:34:29.467
McQuade: Second, we'll talk
about Page Speed online,

00:34:29.467 --> 00:34:32.734
which performs Page Speed
analysis on Websites.

00:34:32.734 --> 00:34:33.901
It also has the ability to load

00:34:33.901 --> 00:34:35.901
the mobile specific
version of a page

00:34:35.901 --> 00:34:40.634
and perform mobile page speed
specific analysis on that site.

00:34:40.634 --> 00:34:46.200
So we'll look at a demo
of that shortly.

00:34:46.200 --> 00:34:48.100
And so, another tool
that we'll look at

00:34:48.100 --> 00:34:50.801
is a tool called JDrop
that was built by Steve Souders.

00:34:50.801 --> 00:34:53.133
And I'll talk about that
in a future slide.

00:34:53.133 --> 00:34:55.400
Song: Lastly, we will talk
about Blaze.io

00:34:55.400 --> 00:35:00.968
that provides a service
to analyze your mobile set also

00:35:00.968 --> 00:35:03.367
and show work flow chart,

00:35:03.367 --> 00:35:07.901
and they have
provided video capture.

00:35:07.901 --> 00:35:12.567
First, let me show
the Pcapperf.

00:35:12.567 --> 00:35:20.000
Last summer, when we started
looking at how to optimize

00:35:20.000 --> 00:35:25.067
mobile Web pages, we found
that there are basically

00:35:25.067 --> 00:35:30.334
no tools for us to use
at that time.

00:35:30.334 --> 00:35:34.434
So, we looked around
and found that there are

00:35:34.434 --> 00:35:41.634
some HAR tools
that can show

00:35:41.634 --> 00:35:43.634
the work flow chart
from HAR format.

00:35:43.634 --> 00:35:47.033
And then there's also
an Open Source product

00:35:47.033 --> 00:35:50.434
that can covert
the PCAP file to HAR,

00:35:50.434 --> 00:35:58.534
which PCAP is TCPdump--
capture of the packets.

00:35:58.534 --> 00:36:05.033
With those available tools then,
we've come up with this setup

00:36:05.033 --> 00:36:10.434
to capture the mobile traffics
and then convert them to HAR,

00:36:10.434 --> 00:36:13.000
and then show,
you know, work flow chart.

00:36:13.000 --> 00:36:18.701
So the setup is we run
TCPdump and workshop

00:36:18.701 --> 00:36:20.701
on the laptop computer.

00:36:20.701 --> 00:36:28.067
And the laptop computer
has two network parts.

00:36:28.067 --> 00:36:32.367
One is wireless
that can connect to a phone.

00:36:32.367 --> 00:36:35.934
The computer is set up
as an access point.

00:36:35.934 --> 00:36:38.467
So the phone connect
to the computer.

00:36:38.467 --> 00:36:41.934
And then the computer use
another network connection

00:36:41.934 --> 00:36:44.234
to the Internet.

00:36:44.234 --> 00:36:47.300
So all the traffic
on your phone

00:36:47.300 --> 00:36:51.067
goes to your computer
and then to the Internet.

00:36:51.067 --> 00:36:54.834
You run TCPdump or workshop
on your computer,

00:36:54.834 --> 00:36:58.367
you capture the traffic
and then save them

00:36:58.367 --> 00:37:01.067
to a PCAP file
and then you upload

00:37:01.067 --> 00:37:08.434
your PCAP file
to pcapperf.app.support.com.

00:37:08.434 --> 00:37:13.767
Magically, you will get
this work flow chart.

00:37:13.767 --> 00:37:16.834
Now let me show you a demo.

00:37:21.801 --> 00:37:29.400
This Pcapperf--so first,
I have uploaded some examples

00:37:29.400 --> 00:37:37.667
on the site, you can
just click real work flow chart.

00:37:37.667 --> 00:37:41.000
You can see
one of those examples.

00:37:41.000 --> 00:37:45.801
Now let me upload
one of the captures

00:37:45.801 --> 00:37:49.801
Bryan just did this morning
or last night.

00:37:49.801 --> 00:37:53.200
McQuade: So this was captured
using TCPdump

00:37:53.200 --> 00:37:55.067
just as Libo described.
And so, that's the first step.

00:37:55.067 --> 00:37:58.000
If you--so before we do this,
actually--if you go to the site

00:37:58.000 --> 00:37:59.567
and click on how to capture
mobile traffic,

00:37:59.567 --> 00:38:02.067
it'll go over the specifics
of how to use TCPdump

00:38:02.067 --> 00:38:06.834
to get the right data
and then--

00:38:06.834 --> 00:38:11.734
Song: And we have checkbox
to remove all your cookies

00:38:11.734 --> 00:38:16.968
so that if other people
happen to have the URL

00:38:16.968 --> 00:38:23.634
you have uploaded, they won't
see your privacy cookies.

00:38:23.634 --> 00:38:27.334
If you want to keep them,
you can uncheck that box.

00:38:27.334 --> 00:38:31.834
So this shows
Google's mobile site.

00:38:31.834 --> 00:38:39.367
At the top, we can see
there is "m? manifest."

00:38:39.367 --> 00:38:43.067
That's the application cache.

00:38:43.067 --> 00:38:52.434
And in a second, it will request
the www.google.com page.

00:38:52.434 --> 00:38:54.067
McQuade:
So, here's actually the HTML.

00:38:54.067 --> 00:38:58.868
and we can look at that
and see indeed, oh--

00:38:58.868 --> 00:39:03.000
Indeed HTML, and here we go,
Manifest equals...

00:39:03.000 --> 00:39:04.567
And so, this is using that,
you know,

00:39:04.567 --> 00:39:06.467
using the application cache--
it's something that google.com

00:39:06.467 --> 00:39:08.868
uses, you know, as an
optimization for mobile

00:39:08.868 --> 00:39:10.734
and then subsequently--
these are actually out of order

00:39:10.734 --> 00:39:14.901
in the display due to the way
the network stack is configured.

00:39:14.901 --> 00:39:19.868
But then you can see here's
the actual manifest response.

00:39:19.868 --> 00:39:21.367
So, you know,
starts cache manifest

00:39:21.367 --> 00:39:24.367
and then lists all those
resources that google.com needs

00:39:24.367 --> 00:39:27.701
to actually render its page
as an application either offline

00:39:27.701 --> 00:39:31.901
or instantly as soon as
the user types in google.com.

00:39:31.901 --> 00:39:36.501
Song: And also, Pcapperf
integrated with Page Speed

00:39:36.501 --> 00:39:39.400
so if you run this as a HAR
with Page Speed,

00:39:39.400 --> 00:39:43.300
it will analyze this Web page

00:39:43.300 --> 00:39:50.167
to show what Page Speed rules
applies on this page.

00:39:52.701 --> 00:39:57.434
And I think that's all.

00:39:57.434 --> 00:40:02.300
McQuade:
So, why don't we look now--

00:40:02.300 --> 00:40:03.667
let's take a look
at Page Speed online.

00:40:03.667 --> 00:40:06.868
So, I'll go ahead
and do a demo of that site.

00:40:06.868 --> 00:40:09.834
So pagespeed.googlelabs.com.

00:40:09.834 --> 00:40:12.234
And here we go. I'll actually
switch back to desktop.

00:40:12.234 --> 00:40:16.834
And so, we can enter
a Web page.

00:40:16.834 --> 00:40:20.634
Song:
Someone pick one.

00:40:20.634 --> 00:40:22.934
McQuade:
We'll do CNN.

00:40:22.934 --> 00:40:24.968
Any site will do.
So we'll run--

00:40:24.968 --> 00:40:27.534
So this is running a sort
of traditional desktop analysis,

00:40:27.534 --> 00:40:31.367
the Page Speed desktop analysis
for their desktop site.

00:40:31.367 --> 00:40:33.834
And so, what we get back here
first, at the top, you know,

00:40:33.834 --> 00:40:36.334
the page, this page,
you know, CNN,

00:40:36.334 --> 00:40:38.434
got an overall Page Speed score
of 67 out of 100.

00:40:38.434 --> 00:40:40.434
So that indicates there's,
you know,

00:40:40.434 --> 00:40:43.267
some room for improvement
for CNN to become faster,

00:40:43.267 --> 00:40:46.200
you know, somewhere in
the middle essentially, right?

00:40:46.200 --> 00:40:47.734
And then over here
on the left,

00:40:47.734 --> 00:40:49.367
we get the same
prioritized suggestions

00:40:49.367 --> 00:40:51.601
that we saw on the screen
showing the browser extension.

00:40:51.601 --> 00:40:54.067
And so, the top thing
that this site can do

00:40:54.067 --> 00:40:55.767
is turn on browser caching.

00:40:55.767 --> 00:40:58.467
And so, if we click on that,
we get some information about,

00:40:58.467 --> 00:41:01.300
you know, what that means
and then if we're curious,

00:41:01.300 --> 00:41:06.567
you know, "Okay.
How do I do that?"

00:41:06.567 --> 00:41:09.467
Or, you know,
specifically--

00:41:09.467 --> 00:41:11.033
Yeah, specifically,
"What does that mean?"

00:41:11.033 --> 00:41:13.033
You can click through
and go to our documentation

00:41:13.033 --> 00:41:14.734
and learn all about that,
and we'll go into detail

00:41:14.734 --> 00:41:16.567
about the right headers
you have to set and, you know,

00:41:16.567 --> 00:41:20.634
what their--what optimal
settings are for those headers

00:41:20.634 --> 00:41:21.834
and all that good detail.

00:41:21.834 --> 00:41:23.634
So...

00:41:30.300 --> 00:41:32.534
Let's find the actual, aha.

00:41:32.534 --> 00:41:34.901
And then, so, you know, there
are the specific suggestions

00:41:34.901 --> 00:41:35.968
associated
with each rule.

00:41:35.968 --> 00:41:37.467
So, in this case, we see,
you know,

00:41:37.467 --> 00:41:40.400
there are a number of resources
that don't have expiries,

00:41:40.400 --> 00:41:43.400
and thus could benefit
from, you know, caching headers,

00:41:43.400 --> 00:41:45.467
which would allow them to be
read from the browser cache,

00:41:45.467 --> 00:41:47.033
as opposed to fetch
from the network

00:41:47.033 --> 00:41:48.868
when the user
returns to the page.

00:41:48.868 --> 00:41:50.801
And so, subsequently, you know,
we see each suggestion,

00:41:50.801 --> 00:41:54.801
you know, listed in order
of priority,

00:41:54.801 --> 00:41:56.067
but if we want to get

00:41:56.067 --> 00:41:58.567
a mobile-specific report
for the site,

00:41:58.567 --> 00:42:03.467
we can just simply click
"mobile report."

00:42:03.467 --> 00:42:07.868
And then what we get back
is a very similar-looking page,

00:42:07.868 --> 00:42:10.868
but the differences here are
that the mobile-specific version

00:42:10.868 --> 00:42:11.968
of the site
has been loaded.

00:42:11.968 --> 00:42:13.367
And so, the first thing
we see, actually,

00:42:13.367 --> 00:42:18.133
is that the site www.cnn.com
redirected to m.cnn.com,

00:42:18.133 --> 00:42:19.968
the mobile-specific version
of the content.

00:42:19.968 --> 00:42:21.968
And so, we get a page
speed score here, 61.

00:42:21.968 --> 00:42:24.434
A little bit, different score,
but in the same ballpark.

00:42:24.434 --> 00:42:26.501
And we see suggestions
over here on the left.

00:42:26.501 --> 00:42:28.734
And in fact, leverage browser
caching comes up as the same,

00:42:28.734 --> 00:42:30.901
you know,
highest-priority suggestion.

00:42:30.901 --> 00:42:32.767
But if we click through,
what we see is

00:42:32.767 --> 00:42:35.100
that the specific resources
being analyzed

00:42:35.100 --> 00:42:37.634
and suggested for caching
are entirely different

00:42:37.634 --> 00:42:38.901
from the desktop version.

00:42:38.901 --> 00:42:41.334
And so, using this tool makes it
really easy for you,

00:42:41.334 --> 00:42:43.801
if you have a mobile-specific
version of your site,

00:42:43.801 --> 00:42:45.534
it makes it really easy
for you to analyze

00:42:45.534 --> 00:42:48.100
the mobile-specific version,
whereas it can

00:42:48.100 --> 00:42:50.501
typically be harder to do that
using a desktop browser

00:42:50.501 --> 00:42:51.934
if you're using
the Firefox add-on

00:42:51.934 --> 00:42:55.434
or the Page Speed add-on
for Google Chrome.

00:42:55.434 --> 00:43:00.167
So, in addition,
we've got some other rules

00:43:00.167 --> 00:43:04.501
in the Page Speed online
offering for mobile analysis.

00:43:04.501 --> 00:43:07.067
In our experimental section
right now, we have a suggestion

00:43:07.067 --> 00:43:08.801
to use an application cache.

00:43:08.801 --> 00:43:11.067
And right now it's--
you know, simply says,

00:43:11.067 --> 00:43:12.334
essentially,
use an application cache

00:43:12.334 --> 00:43:14.968
and if you do that,
the page will be faster.

00:43:14.968 --> 00:43:16.567
Going forward
in the coming weeks,

00:43:16.567 --> 00:43:18.567
what we'll do is we'll actually
provide what we believe

00:43:18.567 --> 00:43:21.067
is an optimal application cache
for that page for you,

00:43:21.067 --> 00:43:23.634
so you can just take
that content and use it.

00:43:23.634 --> 00:43:26.334
Of course, we'll be clear here,
and I'll say now.

00:43:26.334 --> 00:43:28.100
It's always important
to, you know,

00:43:28.100 --> 00:43:29.367
look at the suggested content

00:43:29.367 --> 00:43:30.901
and make sure
it really does make sense.

00:43:30.901 --> 00:43:33.200
We'll do our best, but you know
your site better than we do.

00:43:33.200 --> 00:43:35.968
So, we'll give you
as much information as we can,

00:43:35.968 --> 00:43:39.000
and then, you know,
you can go from there.

00:43:39.000 --> 00:43:41.334
So that's Page Speed online.

00:43:46.801 --> 00:43:50.767
So the third tool is a tool
called JDrop, jdrop.org.

00:43:50.767 --> 00:43:52.000
It's built by
Steve Souders

00:43:52.000 --> 00:43:53.801
and launched recently
in the last few months.

00:43:53.801 --> 00:43:57.200
And the idea here is that
there's all sorts of analysis

00:43:57.200 --> 00:43:59.033
you'd like to do
on your mobile device,

00:43:59.033 --> 00:44:01.400
you know, be it looking
at the DOM on the page

00:44:01.400 --> 00:44:05.834
or at the content
of the HTML document,

00:44:05.834 --> 00:44:08.801
looking at local storage,
other HTML5 properties.

00:44:08.801 --> 00:44:10.801
But analyzing that content
on this tiny screen

00:44:10.801 --> 00:44:12.534
is really not a pleasant
experience, right?

00:44:12.534 --> 00:44:13.934
You've got this tiny screen.

00:44:13.934 --> 00:44:16.334
You'd much rather look
at that content on your desktop

00:44:16.334 --> 00:44:18.167
or laptop,
big screen, you know.

00:44:18.167 --> 00:44:22.801
And so, the idea with JDrop is
that you log into JDrop here

00:44:22.801 --> 00:44:25.901
and on your laptop or desktop,
you perform analysis

00:44:25.901 --> 00:44:28.467
using bookmarklets
on the mobile device,

00:44:28.467 --> 00:44:30.434
and then post the results
of that content to JDrop,

00:44:30.434 --> 00:44:32.067
where it's stored,

00:44:32.067 --> 00:44:33.901
and then because you're
authenticated on your desktop,

00:44:33.901 --> 00:44:36.567
you can see those results
on the big screen.

00:44:36.567 --> 00:44:38.067
And so, the nice thing
about JDrop, too,

00:44:38.067 --> 00:44:40.234
is that it's totally plugin
based and totally extensible.

00:44:40.234 --> 00:44:42.601
So, they've got lots
of really great bookmarklets

00:44:42.601 --> 00:44:43.901
that you can use today.

00:44:43.901 --> 00:44:45.234
But if there's something
that's missing

00:44:45.234 --> 00:44:46.734
that you'd like to add,
it's very easy to add

00:44:46.734 --> 00:44:50.300
a new bookmarklet that does
new kinds of analysis.

00:44:50.300 --> 00:44:53.734
So that's JDrop.

00:44:53.734 --> 00:44:57.267
Song: Last tool we want
to talk about is Blaze.io,

00:44:57.267 --> 00:44:59.501
which provides a service.

00:44:59.501 --> 00:45:02.868
You don't have to use
your own mobile devices.

00:45:02.868 --> 00:45:06.033
They can--they provide
three devices now.

00:45:06.033 --> 00:45:10.267
You can choose one of them
to run the URL you want

00:45:10.267 --> 00:45:15.234
and then it will tell you
an overview

00:45:15.234 --> 00:45:18.767
of how long it took
to load the page

00:45:18.767 --> 00:45:23.234
and what's the size of the page,
the total number of bytes.

00:45:23.234 --> 00:45:29.968
And also it can give you
a screen shot of the site,

00:45:29.968 --> 00:45:33.400
and also they have
this work flow chart.

00:45:33.400 --> 00:45:36.133
You can analyze
the requests that--

00:45:36.133 --> 00:45:39.033
the bottleneck
of the requests.

00:45:39.033 --> 00:45:42.234
Lastly, it has
video capture.

00:45:42.234 --> 00:45:47.801
You can just see how your page
is loaded on the phone,

00:45:47.801 --> 00:45:49.501
if you don't have
so many phones.

00:45:49.501 --> 00:45:53.934
If you develop a Web page,
you can just run those phones

00:45:53.934 --> 00:45:56.834
without buying them yourself.

00:46:00.734 --> 00:46:02.968
McQuade:
So that's our talk.

00:46:02.968 --> 00:46:05.367
To summarize, we'd like
to emphasize two points.

00:46:05.367 --> 00:46:07.367
The first is that, you know,
the unique characteristics

00:46:07.367 --> 00:46:09.200
of mobile networks
and mobile devices

00:46:09.200 --> 00:46:11.667
present new optimization
opportunities.

00:46:11.667 --> 00:46:14.400
So, things like the mobile
channel establishment time,

00:46:14.400 --> 00:46:16.467
like we talked about,
and limited CPU

00:46:16.467 --> 00:46:19.467
and memory of the devices
means there are new, you know--

00:46:19.467 --> 00:46:22.634
both new optimizations
that we need to perform

00:46:22.634 --> 00:46:25.234
to make our mobile Websites
fast, and also sort of

00:46:25.234 --> 00:46:27.901
reprioritization
of existing optimizations

00:46:27.901 --> 00:46:30.000
based on these
new characteristics.

00:46:30.000 --> 00:46:33.467
And so, second, you can use
Page Speed and these other tools

00:46:33.467 --> 00:46:36.834
we've talked about
to understand your performance

00:46:36.834 --> 00:46:42.133
and to optimize your site
for mobile performance.

00:46:42.133 --> 00:46:45.801
Any questions?

00:46:45.801 --> 00:46:50.734
And if you do have questions,
please step up to the mic.

00:46:50.734 --> 00:46:54.000
[applause]
Thank you.

00:46:56.400 --> 00:46:57.734
man:
Hello.

00:46:57.734 --> 00:47:01.167
I was wondering, is there a way
to tweak the user agent

00:47:01.167 --> 00:47:04.501
that you use so that if you
want to test the tablet version

00:47:04.501 --> 00:47:05.834
of a certain mobile version?

00:47:05.834 --> 00:47:07.234
McQuade:
From the desktop browser?

00:47:07.234 --> 00:47:08.300
man:
Yeah.

00:47:08.300 --> 00:47:09.901
McQuade: Yeah, so,
you can actually--

00:47:09.901 --> 00:47:13.534
So in Chrome--
So that PCAP file, actually,

00:47:13.534 --> 00:47:15.367
I cheated a little bit,
and I told Chrome

00:47:15.367 --> 00:47:17.434
to use a mobile-device user
agent when I did that.

00:47:17.434 --> 00:47:19.167
So you can--
In the Chrome case, you can do

00:47:19.167 --> 00:47:21.868
"--user-agent"
on the command line

00:47:21.868 --> 00:47:23.367
and specify a UA,
whatever you want,

00:47:23.367 --> 00:47:25.367
and the nice thing about using
a browser like Chrome or Safari

00:47:25.367 --> 00:47:29.801
is that many of the browsers
on mobile devices are Web-based,

00:47:29.801 --> 00:47:31.234
as are Chrome and Safari.

00:47:31.234 --> 00:47:33.901
So you can expect content
that's targeting mobile devices

00:47:33.901 --> 00:47:36.267
to render correctly
in those browsers.

00:47:36.267 --> 00:47:39.701
man: So, but what about
from your Website, you know,

00:47:39.701 --> 00:47:43.100
when you can run
view mobile report?

00:47:43.100 --> 00:47:45.067
McQuade: Oh, the one that--
Page Speed online?

00:47:45.067 --> 00:47:46.300
man: Yeah.
McQuade: Yeah.

00:47:46.300 --> 00:47:47.367
It actually does
the same thing.

00:47:47.367 --> 00:47:48.801
So it uses a Web-based
render in it.

00:47:48.801 --> 00:47:51.000
It uses a different user agent
to essentially tell the server,

00:47:51.000 --> 00:47:54.000
you know, to look like
a mobile device

00:47:54.000 --> 00:47:56.400
or a desktop device.
man: But can you tweak that one?

00:47:56.400 --> 00:47:57.567
McQuade: Oh, can you override
that as a user?

00:47:57.567 --> 00:47:59.033
We don't provide
that capability today,

00:47:59.033 --> 00:48:00.367
but it's something
we could do.

00:48:00.367 --> 00:48:01.701
man:
Thanks.

00:48:01.701 --> 00:48:05.467
McQuade: So, we'll
think about that. Thanks.

00:48:05.467 --> 00:48:07.801
man: I had a question
about the manifest file

00:48:07.801 --> 00:48:11.100
that you showed
for google.com/m.

00:48:11.100 --> 00:48:12.367
McQuade:
Uh-huh.

00:48:12.367 --> 00:48:15.434
man: Towards the bottom,
you actually had--

00:48:15.434 --> 00:48:17.767
There weren't any resources.
They were just domain names.

00:48:17.767 --> 00:48:19.901
McQuade: Oh, they were just--
I'm sorry?

00:48:19.901 --> 00:48:21.234
man: They were just
domain names.

00:48:21.234 --> 00:48:23.467
They weren't any resources
actually at the domains,

00:48:23.467 --> 00:48:25.434
and it looked like they were
sub-domains of maybe

00:48:25.434 --> 00:48:30.634
image hosting static domains
that you were using.

00:48:30.634 --> 00:48:32.067
McQuade: Yeah. Let me
go ahead and look at that.

00:48:32.067 --> 00:48:33.901
So, I actually don't work
on search--on mobile search,

00:48:33.901 --> 00:48:37.434
so we may not be able to answer,
but we can look at it and see.

00:48:37.434 --> 00:48:40.367
man: I guess the only--
I was curious, yeah.

00:48:40.367 --> 00:48:43.400
Some are there.
McQuade: Uh-huh.

00:48:43.400 --> 00:48:46.167
man: So is that--you're not
actually looking for a resource.

00:48:46.167 --> 00:48:47.567
Why are you doing that?

00:48:47.567 --> 00:48:50.501
Is that because you're kind of
caching the IP address

00:48:50.501 --> 00:48:52.667
so that you don't have to go
back and do another DNS query,

00:48:52.667 --> 00:48:54.567
or what's the purpose of that?

00:48:54.567 --> 00:48:56.868
McQuade: Which one?
man: Further down.

00:48:56.868 --> 00:48:59.734
YTimage.com.
You've got I1, I2, I3,

00:48:59.734 --> 00:49:01.968
but there are no resources
thereafter.

00:49:01.968 --> 00:49:06.434
Usually--In the example you
gave, it was my.css and my.js.

00:49:06.434 --> 00:49:07.901
McQuade:
Sure. Yeah.

00:49:07.901 --> 00:49:10.033
That's interesting,
actually.

00:49:10.033 --> 00:49:13.467
So I actually don't have
a good answer.

00:49:13.467 --> 00:49:15.868
That's a really good question.

00:49:15.868 --> 00:49:17.667
I think you're probably right.

00:49:17.667 --> 00:49:22.334
It's probably a pre-resolve,

00:49:22.334 --> 00:49:23.968
or it's white listing
in those domains.

00:49:23.968 --> 00:49:26.000
I actually don't know.
I'm sorry to say.

00:49:26.000 --> 00:49:27.467
I wish I had an answer.

00:49:27.467 --> 00:49:29.200
One of the things that we found
in our research

00:49:29.200 --> 00:49:32.467
with manifest support is that,
because it's relatively new,

00:49:32.467 --> 00:49:34.467
different browsers
have different

00:49:34.467 --> 00:49:36.100
spec compliant or quirks.

00:49:36.100 --> 00:49:38.667
And so, in fact, we--you know,
there's this nice feature

00:49:38.667 --> 00:49:40.934
of manifests that is you can
have a network section

00:49:40.934 --> 00:49:44.234
where you basically say, "Here
are the things I think I need."

00:49:44.234 --> 00:49:46.067
And then you could say,
"network:star,"

00:49:46.067 --> 00:49:47.767
and that essentially means,
"Anything I didn't declare here,

00:49:47.767 --> 00:49:48.767
go get it from the network."

00:49:48.767 --> 00:49:49.968
And we're like,
well, fantastic.

00:49:49.968 --> 00:49:52.300
That means that, you know,
if you forget it,

00:49:52.300 --> 00:49:54.634
at least you can fetch it from
the network if you're online.

00:49:54.634 --> 00:49:56.133
Turns out--

00:49:56.133 --> 00:49:59.901
Song: Some browsers
does not support this feature.

00:49:59.901 --> 00:50:03.701
McQuade: Yeah. So, it may
very well be that these lines

00:50:03.701 --> 00:50:06.033
are working around
sort of quirks

00:50:06.033 --> 00:50:07.968
in current browser
implementation.

00:50:07.968 --> 00:50:09.567
Or it may have something
to do with the spec,

00:50:09.567 --> 00:50:11.901
but it's not immediately obvious
to me what's going on there.

00:50:11.901 --> 00:50:13.133
It's a good question.

00:50:13.133 --> 00:50:15.033
I'll actually,
if you sync with me afterwards,

00:50:15.033 --> 00:50:17.067
I can take your email
and try to find out.

00:50:17.067 --> 00:50:19.100
man: Okay. And then I had
another question.

00:50:19.100 --> 00:50:21.100
You didn't talk
about Web sockets at all.

00:50:21.100 --> 00:50:23.434
I think I read somewhere
that if you use Chrome

00:50:23.434 --> 00:50:25.267
and you use google.com,

00:50:25.267 --> 00:50:27.467
it uses Web sockets
more than HTTP.

00:50:27.467 --> 00:50:29.100
I don't know
if that's accurate or not.

00:50:29.100 --> 00:50:30.100
McQuade:
It may be that--

00:50:30.100 --> 00:50:31.801
So it uses
the Speedy protocol.

00:50:31.801 --> 00:50:34.100
I don't know that
they're making extensive use

00:50:34.100 --> 00:50:35.400
of Web sockets today.

00:50:35.400 --> 00:50:39.367
I think as--Certainly
Web sockets is the kind of thing

00:50:39.367 --> 00:50:41.567
that we'll start to suggest
as it becomes

00:50:41.567 --> 00:50:44.367
sort of more proven
and more well used.

00:50:44.367 --> 00:50:46.434
At this point, we've seen
some issues with Web sockets

00:50:46.434 --> 00:50:49.234
around, you know--

00:50:49.234 --> 00:50:51.634
Essentially proxies sometimes
can get in the way.

00:50:51.634 --> 00:50:53.033
HTTP proxies or ports
can be blocked

00:50:53.033 --> 00:50:54.767
if you're doing it
on a non-standard port.

00:50:54.767 --> 00:50:57.367
And so, we're sort of waiting
to see how that plays out

00:50:57.367 --> 00:50:59.734
over the coming months,
and then--or, you know,

00:50:59.734 --> 00:51:01.100
six months, say.

00:51:01.100 --> 00:51:02.334
And if things look good
at that point,

00:51:02.334 --> 00:51:04.400
we would certainly recommend
using Web sockets,

00:51:04.400 --> 00:51:06.567
because they have
some nice characteristics...

00:51:06.567 --> 00:51:07.567
man:
Thank you.

00:51:07.567 --> 00:51:10.634
McQuade:
...for performance. Yeah.

00:51:10.634 --> 00:51:14.367
man: Hi. Have you seen
the strictness of the page

00:51:14.367 --> 00:51:16.400
having a page load
time impact?

00:51:16.400 --> 00:51:19.734
So if you have a page
with a lot of TagSoup in it,

00:51:19.734 --> 00:51:24.234
you know, like it's not
well-formed DOM,

00:51:24.234 --> 00:51:25.634
does that make
a big impact?

00:51:25.634 --> 00:51:28.434
I didn't see it as one
of the line items up there

00:51:28.434 --> 00:51:29.968
in the recommendations.
McQuade: Yeah.

00:51:29.968 --> 00:51:35.634
Today we don't suggest
well-formed HTML.

00:51:35.634 --> 00:51:38.300
We haven't seen any compelling
evidence that suggests

00:51:38.300 --> 00:51:40.267
that it will load
more quickly.

00:51:40.267 --> 00:51:42.667
If we saw information
that did suggest that--

00:51:42.667 --> 00:51:44.234
so let me just bring up
the response--

00:51:44.234 --> 00:51:47.734
we would certainly--that
actually looks very well formed.

00:51:47.734 --> 00:51:50.534
Traditionally,
major sites actually

00:51:50.534 --> 00:51:52.601
have not served
well-formed content.

00:51:52.601 --> 00:51:53.901
man:
Right.

00:51:53.901 --> 00:51:56.834
McQuade: And so, we--
in our test labs, as I said,

00:51:56.834 --> 00:51:58.801
we haven't seen any difference
when we do AB tests,

00:51:58.801 --> 00:52:01.033
and it also seems
that other sites

00:52:01.033 --> 00:52:03.400
either haven't
investigated it themselves,

00:52:03.400 --> 00:52:05.667
or if they have, they haven't
seen any difference either.

00:52:05.667 --> 00:52:07.868
But I will say, if somebody
shows that there is

00:52:07.868 --> 00:52:08.934
a substantial difference,
you know,

00:52:08.934 --> 00:52:11.100
for some aspect
of well-formed HTML,

00:52:11.100 --> 00:52:12.901
we would absolutely add that
to the Page Speed rules set.

00:52:12.901 --> 00:52:14.934
We just haven't seen
evidence of that yet.

00:52:14.934 --> 00:52:16.334
man: 'Cause I've heard
anecdotally,

00:52:16.334 --> 00:52:18.167
that TagSoup,
you know, causes the--

00:52:18.167 --> 00:52:21.300
you know, like Firefox
to go into a failure case,

00:52:21.300 --> 00:52:23.234
and sometimes
if it's, you know,

00:52:23.234 --> 00:52:25.934
it'll have to go into a backup
or lookup

00:52:25.934 --> 00:52:28.033
or something like that.

00:52:28.033 --> 00:52:29.901
But I haven't heard any proof
one way or the other

00:52:29.901 --> 00:52:31.901
that it actually
makes a difference.

00:52:31.901 --> 00:52:34.734
McQuade: We'd be glad to--
So we have a mailing list,

00:52:34.734 --> 00:52:36.767
page-pagespeed-discuss
on Google groups.

00:52:36.767 --> 00:52:38.767
if there's a link
or something like that

00:52:38.767 --> 00:52:40.534
that you can point us to,
we'd love to know about that.

00:52:40.534 --> 00:52:42.334
And we'd certainly
add suggestions for that

00:52:42.334 --> 00:52:43.834
if that proved out.

00:52:43.834 --> 00:52:46.100
man: Thank you.
McQuade: Yep.

00:52:46.100 --> 00:52:48.100
man: Maybe an obvious question,
but I have to ask it.

00:52:48.100 --> 00:52:52.000
Would you recommend against
using GWT for a mobile Web app?

00:52:52.000 --> 00:52:55.734
If so, why in particular
and if not, can you say anything

00:52:55.734 --> 00:53:00.000
about optimizing such a Website
with Page Speed.

00:53:00.000 --> 00:53:01.400
McQuade:
Sure.

00:53:01.400 --> 00:53:05.400
So, the first thing
I'll say, actually, is that

00:53:05.400 --> 00:53:08.734
there's a talk tomorrow
about using GWT

00:53:08.734 --> 00:53:10.234
to build high-performance
mobile apps.

00:53:10.234 --> 00:53:14.067
And so, I would--that talk will,
I think, give you a better idea

00:53:14.067 --> 00:53:15.400
for, you know, performance.

00:53:15.400 --> 00:53:17.400
And I certainly know, too,
that the GWT team

00:53:17.400 --> 00:53:21.701
from the beginning has been
very mindful about performance.

00:53:21.701 --> 00:53:23.667
And they actually try to roll
in a lot of these techniques

00:53:23.667 --> 00:53:26.067
into their compiler so that you
don't have to think about them

00:53:26.067 --> 00:53:27.367
when you're building your app,

00:53:27.367 --> 00:53:29.234
but you automatically
get things that we suggest,

00:53:29.234 --> 00:53:31.367
like deferring unused
JavaScript,

00:53:31.367 --> 00:53:34.267
minification of content,
spriting, and things like that.

00:53:34.267 --> 00:53:35.767
So, while I don't know
specifically

00:53:35.767 --> 00:53:38.033
in the mobile space
of any issues,

00:53:38.033 --> 00:53:41.100
positive or negative with GWT,
my expectation is that it's--

00:53:41.100 --> 00:53:43.133
they're probably
very high performance today,

00:53:43.133 --> 00:53:44.567
and the nice thing
about using GWT

00:53:44.567 --> 00:53:45.934
is that as they--

00:53:45.934 --> 00:53:47.534
they constantly improve it,
and so, you'll benefit

00:53:47.534 --> 00:53:48.868
from those improvements
automatically.

00:53:48.868 --> 00:53:50.734
man: So, would you say
there's less need

00:53:50.734 --> 00:53:53.033
for an analysis tool
like that?

00:53:53.033 --> 00:53:56.234
McQuade: So, hmm.
That's an interesting question.

00:53:56.234 --> 00:53:58.901
So I certainly
would always run--

00:53:58.901 --> 00:54:00.501
so I'll give,
actually, an example.

00:54:00.501 --> 00:54:04.567
So pagespeed.gogglelabs.com
uses GWT, actually.

00:54:04.567 --> 00:54:06.100
And one of the things
we did initially

00:54:06.100 --> 00:54:10.601
was we sort of--there's some
browser-feature detection

00:54:10.601 --> 00:54:12.367
that GWT likes to do,

00:54:12.367 --> 00:54:14.601
and that, by default,
runs client side.

00:54:14.601 --> 00:54:16.267
And so, we ran some
Page Speed analysis

00:54:16.267 --> 00:54:18.901
and we saw, "Oh, okay, that's
actually add some serialization,

00:54:18.901 --> 00:54:20.234
some performance impact."

00:54:20.234 --> 00:54:22.200
And so, we actually--
we either had just rolled out,

00:54:22.200 --> 00:54:23.667
or about to roll out
an optimization,

00:54:23.667 --> 00:54:25.968
where we do
that detection server side.

00:54:25.968 --> 00:54:28.667
And so, that's something
you can do with GWT.

00:54:28.667 --> 00:54:30.300
It's just may not
be turned on by default.

00:54:30.300 --> 00:54:32.133
And again, I'm not
a GWT expert,

00:54:32.133 --> 00:54:36.234
so I would recommend asking
the guys speaking tomorrow.

00:54:36.234 --> 00:54:38.667
But I think it makes sense
to use both tools.

00:54:38.667 --> 00:54:40.067
GWT will do a lot for you,

00:54:40.067 --> 00:54:42.334
but it's always good to,
you know, sort of double-check

00:54:42.334 --> 00:54:44.934
and make sure with a tool
like Page Speed.

00:54:44.934 --> 00:54:46.400
man: Thank you.
man: Bryan, can I jump in?

00:54:46.400 --> 00:54:48.167
This is David Chandler.
I am on the GWT team.

00:54:48.167 --> 00:54:49.901
And that's a great answer
that you gave.

00:54:49.901 --> 00:54:51.534
I'm the one giving
the talk tomorrow.

00:54:51.534 --> 00:54:53.234
McQuade: Awesome.
man: And, yes.

00:54:53.234 --> 00:54:55.300
It's still worthwhile
to use the tools,

00:54:55.300 --> 00:54:56.934
because there are
features in GWT

00:54:56.934 --> 00:54:58.501
that can be used
to improve performance.

00:54:58.501 --> 00:55:00.334
One of them, for example,
that we're working on

00:55:00.334 --> 00:55:03.267
for the next few months
is an app cache linker

00:55:03.267 --> 00:55:05.968
that will automatically generate
that manifest for you.

00:55:05.968 --> 00:55:08.200
But you'll still want to run
Page Speed first to determine

00:55:08.200 --> 00:55:11.133
that you can benefit
from that kind of a thing.

00:55:11.133 --> 00:55:13.067
So, thanks.
McQuade: Great.

00:55:13.067 --> 00:55:14.701
man: Hi.
Two questions.

00:55:14.701 --> 00:55:18.300
First, what in the manifest--
what is your guys' strategy

00:55:18.300 --> 00:55:20.067
for, like, in the case--
the example you gave,

00:55:20.067 --> 00:55:23.067
like, you're caching out
some JS files.

00:55:23.067 --> 00:55:25.434
What if you need to pop
that JS file?

00:55:25.434 --> 00:55:26.901
Do you just rename it
something else?

00:55:26.901 --> 00:55:28.567
Or, like, how is the manifest
structure work

00:55:28.567 --> 00:55:30.400
in terms of telling it, no,
there's a new version of that

00:55:30.400 --> 00:55:31.567
you should be using?

00:55:31.567 --> 00:55:33.000
McQuade: In terms
of changing the content?

00:55:33.000 --> 00:55:35.234
Song:
Yeah.

00:55:35.234 --> 00:55:40.267
The application cache
is relatively complex thing.

00:55:40.267 --> 00:55:46.667
If you have the application
cache on the browser side

00:55:46.667 --> 00:55:50.267
and you are changing the
resources on the server side,

00:55:50.267 --> 00:55:52.067
the browser
may not notice that

00:55:52.067 --> 00:55:54.667
until you change
your manifest itself.

00:55:54.667 --> 00:55:55.901
Then the browser

00:55:55.901 --> 00:55:58.367
will start reloading
all the resources again,

00:55:58.367 --> 00:56:00.968
at least to check
if it's changed.

00:56:00.968 --> 00:56:07.234
One technique is to change
the name of your results.

00:56:07.234 --> 00:56:12.100
And then this can be done using
more pages.

00:56:12.100 --> 00:56:13.734
If you change your content,

00:56:13.734 --> 00:56:16.501
it will automatically change
the name of your resources.

00:56:16.501 --> 00:56:18.501
It will solve the problem.

00:56:18.501 --> 00:56:23.200
And then you have to regenerate
the manifest.

00:56:23.200 --> 00:56:26.534
That's another problem
that needs to be solved.

00:56:26.534 --> 00:56:28.300
man: I see. And then,
I was kind of surprised

00:56:28.300 --> 00:56:30.300
at how high some of those
numbers were in Froyo

00:56:30.300 --> 00:56:33.234
for the JavaScript rendering.
In cases like that,

00:56:33.234 --> 00:56:35.534
it almost seems like
you could make a good argument

00:56:35.534 --> 00:56:38.033
for depending on the
functionality of the page,

00:56:38.033 --> 00:56:40.734
to just do it all
server side.

00:56:40.734 --> 00:56:42.133
Is that an accurate assessment?
McQuade: Yeah.

00:56:42.133 --> 00:56:47.067
I think that's a very--
a reasonable way to address--

00:56:47.067 --> 00:56:49.234
So, one of our suggestions is
to defer parsing of JavaScript,

00:56:49.234 --> 00:56:50.601
and one of the ways
to accomplish that

00:56:50.601 --> 00:56:52.567
is to do as much as possible
prerendered on the server,

00:56:52.567 --> 00:56:54.567
because you'll have
more CPU there.

00:56:54.567 --> 00:56:56.968
So the user--
if you do that, I suppose--

00:56:56.968 --> 00:57:00.067
you want to be mindful that
you--so, another technique

00:57:00.067 --> 00:57:02.901
that is wise to use
is called chunk encoding.

00:57:02.901 --> 00:57:04.400
The idea is that you
push data down

00:57:04.400 --> 00:57:05.834
as it's generated
on the server.

00:57:05.834 --> 00:57:07.467
So if what you're doing
is really CPU intensive,

00:57:07.467 --> 00:57:10.267
you don't want to block
sending the first byte

00:57:10.267 --> 00:57:11.834
back to the user
on all that work.

00:57:11.834 --> 00:57:13.767
And so, using chunking
in combination

00:57:13.767 --> 00:57:15.734
with server-side rendering,
I think, would be a great way

00:57:15.734 --> 00:57:17.501
to speed up mobile performance.

00:57:17.501 --> 00:57:20.400
man:
Okay. Thanks.

00:57:20.400 --> 00:57:22.033
man #2: Can you talk
a little bit more

00:57:22.033 --> 00:57:24.901
about HTML5 application cache
and, like, what types of things

00:57:24.901 --> 00:57:27.434
you're caching
and whether that's for, like,

00:57:27.434 --> 00:57:30.801
targeted at specific devices
or just, like, in general,

00:57:30.801 --> 00:57:33.000
or just wanted to know
more about that.

00:57:33.000 --> 00:57:34.734
McQuade: Sure.
Do you want to start with that?

00:57:34.734 --> 00:57:36.133
Song:
Yeah.

00:57:36.133 --> 00:57:39.567
HTML5 application touch,
I think it's a relatively new,

00:57:39.567 --> 00:57:44.100
older browsers support--
most of the Web page browsers

00:57:44.100 --> 00:57:46.267
support
HTML application cache.

00:57:46.267 --> 00:57:50.734
But there was a bug
that we just found out that

00:57:50.734 --> 00:57:54.868
if you used the network:star,

00:57:54.868 --> 00:57:58.434
that basically means
everything else not listed

00:57:58.434 --> 00:58:02.267
in the application cache
go to network and download them.

00:58:02.267 --> 00:58:05.601
But the older implementation
of WebKit

00:58:05.601 --> 00:58:09.734
does not implement
this rule.

00:58:09.734 --> 00:58:12.601
So if you left them out,

00:58:12.601 --> 00:58:16.868
those will stack
on the browser cache.

00:58:16.868 --> 00:58:19.734
So you will never get updated.

00:58:19.734 --> 00:58:24.234
That I found out the hard way.

00:58:24.234 --> 00:58:25.801
McQuade: In terms
of browser support,

00:58:25.801 --> 00:58:28.334
I think all the sort of most--

00:58:28.334 --> 00:58:31.634
I actually don't know
about IE 9.

00:58:31.634 --> 00:58:34.801
Does anyone here know
if IE 9 supports app cache?

00:58:34.801 --> 00:58:36.000
I can't say.

00:58:36.000 --> 00:58:37.334
So the nice thing
about app cache in mobile

00:58:37.334 --> 00:58:41.534
is that the predominant devices
in mobile use WebKit.

00:58:41.534 --> 00:58:42.968
And WebKit
has very good support.

00:58:42.968 --> 00:58:44.868
And so, you know,
iPhone and Android

00:58:44.868 --> 00:58:46.367
both have really great
app cache support.

00:58:46.367 --> 00:58:48.400
And so, while on Desktop--

00:58:48.400 --> 00:58:50.000
it actually has a benefit
on Desktop as well.

00:58:50.000 --> 00:58:51.601
You know the page will load
instantly on Desktop,

00:58:51.601 --> 00:58:53.067
and it makes sense
to use it.

00:58:53.067 --> 00:58:54.934
But you won't reach all
your desktop users,

00:58:54.934 --> 00:58:56.801
because not all of them
have support.

00:58:56.801 --> 00:59:00.167
The support is, you know,
virtually everywhere

00:59:00.167 --> 00:59:02.334
for mobile users.
man: Cool.

00:59:02.334 --> 00:59:03.868
McQuade:
And it's improving, too.

00:59:03.868 --> 00:59:06.300
I would definitely recommend--
based on what Libo said,

00:59:06.300 --> 00:59:08.400
definitely test
on a variety of devices

00:59:08.400 --> 00:59:10.100
whatever you have available
just to make sure,

00:59:10.100 --> 00:59:12.100
because it is changing
rapidly, too.

00:59:12.100 --> 00:59:15.300
So if you can test
a generation or two back,

00:59:15.300 --> 00:59:18.734
it'll help you to find bugs
as you roll that out.

00:59:18.734 --> 00:59:19.734
man: Cool.
Thank you.

00:59:19.734 --> 00:59:22.667
McQuade:
Hmm-mm.

00:59:22.667 --> 00:59:23.667
Okay, 38 seconds left.

00:59:23.667 --> 00:59:25.934
Anyone?
One more?

00:59:25.934 --> 00:59:28.067
Thank you.
Song: Thank you.

00:59:28.067 --> 00:59:30.000
[applause]

