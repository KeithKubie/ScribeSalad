WEBVTT
Kind: captions
Language: en

00:00:00.140 --> 00:00:02.960
So one way of implementing prefetching

00:00:02.960 --> 00:00:06.840
is to just add prefetch instructions
to the instruction set and

00:00:06.840 --> 00:00:11.680
let the compiler of the programmer
figure out when to request prefetches.

00:00:11.680 --> 00:00:15.910
So let's say we have a program
that adds up the elements

00:00:15.910 --> 00:00:17.990
of a large array into a sum.

00:00:17.990 --> 00:00:22.110
This program will access
these elements one at a time.

00:00:22.110 --> 00:00:26.100
So it has a lot of spatial locality,
not much temporal locality.

00:00:26.100 --> 00:00:28.210
And it will have a lot of misses.

00:00:28.210 --> 00:00:33.230
With prefetching instructions, this
program will become something like this.

00:00:33.230 --> 00:00:36.300
We still have the original program,
but in this loop,

00:00:36.300 --> 00:00:41.210
in addition to accessing the appropriate
element of the array in iteration,

00:00:41.210 --> 00:00:45.890
we will be prefetching an element
that we will access in the future.

00:00:45.890 --> 00:00:51.000
Pdist here should be at least 1, so that
we are prefetching the next element, but

00:00:51.000 --> 00:00:56.240
you might want to prefetch the next,
next or even more advanced elements.

00:00:56.240 --> 00:01:01.210
So here, one of the trickier questions
is what should be the pdist?

00:01:01.210 --> 00:01:03.509
How far in advance to prefetch?

00:01:03.509 --> 00:01:07.007
If pdist is too small, for
example, if it's only one,

00:01:07.007 --> 00:01:09.960
we end up having something like this.

00:01:09.960 --> 00:01:11.980
Our axis is here.

00:01:11.980 --> 00:01:16.150
We issue our prefetch in the previous
iteration for this element.

00:01:16.150 --> 00:01:21.150
The memory latency might be this,
which means that when we do our axis,

00:01:21.150 --> 00:01:23.180
the data still hasn't
arrived from memory.

00:01:23.180 --> 00:01:25.510
We will still have to wait for it.

00:01:25.510 --> 00:01:29.160
Although, we will have to wait for
it less, than if there was no prefetch.

00:01:30.700 --> 00:01:34.803
So, here we prefetch too late, and the
access happens before the data arrives

00:01:34.803 --> 00:01:36.804
from memory, so we still have a miss.

00:01:36.804 --> 00:01:39.004
Although it's a slightly
less expensive one,

00:01:39.004 --> 00:01:40.659
in terms on how long we have to wait.

00:01:40.659 --> 00:01:45.942
However, if PDIST is too large,
let's say that the access is here,

00:01:45.942 --> 00:01:50.090
and we prefetch this
element way ahead of time.

00:01:50.090 --> 00:01:53.560
It arrives from memory here,
sits in the cache, and

00:01:53.560 --> 00:01:57.120
because other elements are being
accessed in this loop all the time,

00:01:57.120 --> 00:02:00.660
this might be eventually kicked out.

00:02:00.660 --> 00:02:03.940
And in this case,
we say that we've prefetched too early.

00:02:03.940 --> 00:02:08.840
So as you can see, it is not easy to
guess how far in advance to prefetch.

00:02:09.900 --> 00:02:12.270
Furthermore, if you're
writing a program and

00:02:12.270 --> 00:02:17.580
changing it to do prefetching, it might
be that in one generation of hardware,

00:02:17.580 --> 00:02:20.160
the correct pdist might be,
let's say 20.

00:02:20.160 --> 00:02:24.380
And then the process for example
becomes faster, but the memory doesn't.

00:02:24.380 --> 00:02:28.610
And now, the processor does more
iterations while the memory is

00:02:28.610 --> 00:02:31.590
responding so
we need to increase the distance.

00:02:31.590 --> 00:02:35.830
So basically kind of coding
this pdist into the program

00:02:35.830 --> 00:02:39.300
becomes tricky because
the correct value for it, so

00:02:39.300 --> 00:02:43.890
it's not too small or too large,
changes as hardware changes.

00:02:43.890 --> 00:02:46.670
So prefetch instructions
are very useful, but

00:02:46.670 --> 00:02:48.150
they're not easy to get right.

