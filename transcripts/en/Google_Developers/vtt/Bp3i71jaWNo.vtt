WEBVTT
Kind: captions
Language: en

00:00:00.780 --> 00:00:03.280
IKAI LAN: So I've always wanted
to be the guy who gets

00:00:03.280 --> 00:00:05.440
to give away all the
goodies, right.

00:00:05.440 --> 00:00:07.220
We call that the Oprah moment.

00:00:07.220 --> 00:00:09.430
And today, I'm happy to announce
that you get a

00:00:09.430 --> 00:00:11.280
YouTube, and you get a YouTube,

00:00:11.280 --> 00:00:12.680
and you get a YouTube.

00:00:12.680 --> 00:00:15.555
YouTubes for everyone
in this audience.

00:00:15.555 --> 00:00:18.740
AUDIENCE: [APPLAUSE]

00:00:18.740 --> 00:00:20.850
IKAI LAN: Good afternoon,
everybody.

00:00:20.850 --> 00:00:22.935
It's good to see that your
energy level is still up.

00:00:22.935 --> 00:00:24.020
I like that.

00:00:24.020 --> 00:00:25.880
You've had a lot of learning
thrown at you, and you're

00:00:25.880 --> 00:00:27.790
going to have some more
thrown at you today.

00:00:27.790 --> 00:00:29.260
My name is Ikai Lan.

00:00:29.260 --> 00:00:31.980
I'm a member of the YouTube
developer relations team.

00:00:31.980 --> 00:00:33.900
I'm based out of
New York City.

00:00:33.900 --> 00:00:36.760
Today we're going to be talking
about best practices

00:00:36.760 --> 00:00:39.645
when working with mobile
platforms and the YouTube API.

00:00:46.110 --> 00:00:47.920
Of course, this is when
my remote just

00:00:47.920 --> 00:00:49.170
chooses to stop working.

00:00:56.900 --> 00:00:59.550
So, we'll be talking about
two platforms today.

00:00:59.550 --> 00:01:03.560
One of them is our friend,
the Apple platform, iOS.

00:01:03.560 --> 00:01:05.550
And the other one is going
to be Android.

00:01:05.550 --> 00:01:08.950
So, just as a warning, this talk
is going to favor Android

00:01:08.950 --> 00:01:11.910
a little bit more, and that's
because they are more options

00:01:11.910 --> 00:01:15.310
available on Android platform,
if you're building and working

00:01:15.310 --> 00:01:16.150
with YouTube.

00:01:16.150 --> 00:01:18.260
That doesn't mean we don't
love you, iOS users and

00:01:18.260 --> 00:01:22.390
developers, thank you, it just
means that right now there's

00:01:22.390 --> 00:01:24.400
more to talk about when
it comes to Android.

00:01:27.450 --> 00:01:29.900
So for today's agenda we're
going to go over some general

00:01:29.900 --> 00:01:31.860
tips, when just building mobile
apps, in general.

00:01:31.860 --> 00:01:34.800
I'm not going to spend too
much time on this.

00:01:34.800 --> 00:01:36.950
This talk is broken in
two major sections.

00:01:36.950 --> 00:01:40.440
One is about user experience
during video playback.

00:01:40.440 --> 00:01:43.570
And the second part is going to
be about authorization and

00:01:43.570 --> 00:01:45.190
making API calls.

00:01:45.190 --> 00:01:48.110
So we like to break these into
two sections because these are

00:01:48.110 --> 00:01:51.450
two distinctly different
libraries and APIs that

00:01:51.450 --> 00:01:54.230
YouTube provides.

00:01:54.230 --> 00:01:56.560
So these best practices, they
come from talking to our

00:01:56.560 --> 00:01:57.760
partners in the field.

00:01:57.760 --> 00:01:59.860
And at the end of this session,
we're going to have a

00:01:59.860 --> 00:02:03.210
Q&amp;A where two folks, two honored
guests, are going to

00:02:03.210 --> 00:02:05.190
come up and help answer
questions.

00:02:05.190 --> 00:02:07.310
They are Tom, who works
on the mobile team and

00:02:07.310 --> 00:02:08.780
Android, and Geert--

00:02:08.780 --> 00:02:10.490
hopefully I'm pronouncing
his name correctly--

00:02:10.490 --> 00:02:12.950
he's a friend of ours who
works at Flipboard.

00:02:12.950 --> 00:02:15.690
And they have a lot of things to
share about how to best use

00:02:15.690 --> 00:02:19.250
YouTube on Android.

00:02:19.250 --> 00:02:20.140
OK.

00:02:20.140 --> 00:02:22.820
So first off, just a very quick
review of best practices

00:02:22.820 --> 00:02:25.280
and working with mobile
platforms.

00:02:25.280 --> 00:02:29.500
Always follow the best practices
of your platform.

00:02:29.500 --> 00:02:32.290
So for you Android and iOS
developers this means don't

00:02:32.290 --> 00:02:33.310
block the UI thread.

00:02:33.310 --> 00:02:36.980
Don't ever block the UI thread,
not for YouTube, not

00:02:36.980 --> 00:02:40.180
for me, not for your family,
just leave it open, do stuff

00:02:40.180 --> 00:02:41.520
in the background thread.

00:02:41.520 --> 00:02:43.890
And those are just the things
to keep track of.

00:02:43.890 --> 00:02:50.530
So nothing I recommend today
should supersede anything that

00:02:50.530 --> 00:02:54.070
your platform recommends
as a best practice.

00:02:54.070 --> 00:02:56.350
Be aware of the YouTube
terms of service.

00:02:56.350 --> 00:02:57.570
This is really important.

00:02:57.570 --> 00:02:59.700
The worst thing that can happen
is you create a great

00:02:59.700 --> 00:03:02.180
service, you push it out
there, and it turns out

00:03:02.180 --> 00:03:04.070
there's something you're doing
that's not quite right.

00:03:04.070 --> 00:03:06.150
Now, fortunately, we're going to
try to work with you to try

00:03:06.150 --> 00:03:08.180
to remedy the situation,
but you don't want

00:03:08.180 --> 00:03:09.200
to be in that situation.

00:03:09.200 --> 00:03:12.840
Just check ahead of time, know
what you can and can't do, and

00:03:12.840 --> 00:03:15.300
you should be clear.

00:03:15.300 --> 00:03:18.530
It's also good to understand
the difference between form

00:03:18.530 --> 00:03:19.910
factors on mobile.

00:03:19.910 --> 00:03:23.290
I use mobile very loosely, but
really I'm talking not just

00:03:23.290 --> 00:03:26.380
about phones, and "Phablets",
or giant phones.

00:03:26.380 --> 00:03:29.400
I'm talking also about 7-inch
tablets, and 10-inch tablets.

00:03:29.400 --> 00:03:31.510
So I'm going to plug
a talk real quick.

00:03:31.510 --> 00:03:34.900
Tomorrow there's going to be
a talk at 3:30, it's called

00:03:34.900 --> 00:03:37.690
designing products for
multi-screen view, a YouTube

00:03:37.690 --> 00:03:38.660
perspective.

00:03:38.660 --> 00:03:41.150
I highly recommend this, even
if you're not currently a

00:03:41.150 --> 00:03:44.160
YouTube API developer, because
we're going to share a lot of

00:03:44.160 --> 00:03:47.470
insights we've picked up from
just studying users who are

00:03:47.470 --> 00:03:51.370
using tablets and phones, and
how they use these devices.

00:03:51.370 --> 00:03:53.810
So I'm not going to cover any
of that today, just a quick

00:03:53.810 --> 00:03:55.950
commercial.

00:03:55.950 --> 00:04:00.150
OK, so let's start by talking
about video playback.

00:04:00.150 --> 00:04:02.310
On iOS we've got the
following options--

00:04:02.310 --> 00:04:05.170
I told you we would get
technical real fast.

00:04:05.170 --> 00:04:08.000
On iOS we can play YouTube
videos in the official YouTube

00:04:08.000 --> 00:04:12.090
application, and we can also
play YouTube videos inside our

00:04:12.090 --> 00:04:16.279
applications, inside a web view
using the iFrame player.

00:04:16.279 --> 00:04:18.399
This has been available
for some time now.

00:04:18.399 --> 00:04:21.630
And on iOS what happens when you
push the Play button, is

00:04:21.630 --> 00:04:24.380
this starts playing right there
in the web view and you

00:04:24.380 --> 00:04:26.280
can maximize it in full
screen video.

00:04:29.020 --> 00:04:32.720
Now with Android devices we
have a few more options.

00:04:32.720 --> 00:04:34.630
On Android, we have
one more option.

00:04:34.630 --> 00:04:37.090
We have the Android player
API, which released in

00:04:37.090 --> 00:04:39.300
December 2012.

00:04:39.300 --> 00:04:41.330
So if you haven't heard about
this yet, definitely check it

00:04:41.330 --> 00:04:45.300
out, because the Android player
API is your video tool

00:04:45.300 --> 00:04:47.920
kit for working with YouTube.

00:04:47.920 --> 00:04:50.070
Not only can you play
videos, which is--

00:04:50.070 --> 00:04:52.680
I would say-- very central to
the experience of experiencing

00:04:52.680 --> 00:04:56.810
YouTube, you also get
information about the phone

00:04:56.810 --> 00:05:00.230
and what it can do in relation
to YouTube and playing video.

00:05:00.230 --> 00:05:03.940
You can manage intents, and
intents are ways that your

00:05:03.940 --> 00:05:05.630
activities and Android
communicate

00:05:05.630 --> 00:05:06.430
between each other.

00:05:06.430 --> 00:05:09.470
So that's for the non-Android
developers.

00:05:09.470 --> 00:05:12.260
You also get playback
event callbacks.

00:05:12.260 --> 00:05:14.310
So this is similar to callbacks
you get when you're

00:05:14.310 --> 00:05:16.740
working with the JavaScript
player, where you can say,

00:05:16.740 --> 00:05:19.560
execute some code when we start
playing, pause, stop,

00:05:19.560 --> 00:05:20.820
and so on, and so forth.

00:05:20.820 --> 00:05:23.400
And you get these in native
Java, so you can just

00:05:23.400 --> 00:05:24.865
integrate these with
the classes that

00:05:24.865 --> 00:05:28.080
you are already using.

00:05:28.080 --> 00:05:30.870
So as a general best practice,
if you're on Android, and

00:05:30.870 --> 00:05:33.490
you're using YouTube, you
probably want to use the

00:05:33.490 --> 00:05:36.710
Android Player API.

00:05:36.710 --> 00:05:40.460
We'll get into what this means
but right now this is how you

00:05:40.460 --> 00:05:44.030
make a YouTube video play
in your activity.

00:05:44.030 --> 00:05:47.100
In your layout XML file
you define this view.

00:05:47.100 --> 00:05:50.670
And this is a custom view that
says, in here play a YouTube

00:05:50.670 --> 00:05:52.920
video, in this little
piece of XML.

00:05:52.920 --> 00:05:55.870
And you can put this alongside
your own controls, alongside

00:05:55.870 --> 00:05:58.650
your own look and feel.

00:05:58.650 --> 00:06:03.930
In the activity that inflates
this view, you need to extend

00:06:03.930 --> 00:06:07.850
the YouTube base activity, and
implement a few of the methods

00:06:07.850 --> 00:06:10.620
such as the
OnInitializedListener.

00:06:10.620 --> 00:06:13.730
When you do this, you have a
programmatic hook to the

00:06:13.730 --> 00:06:15.990
YouTube player where you can
control it and get information

00:06:15.990 --> 00:06:17.200
about state.

00:06:17.200 --> 00:06:19.990
And that's all you need to do
to start using the YouTube

00:06:19.990 --> 00:06:23.070
player API in Android, as well
as import a JAR file.

00:06:25.800 --> 00:06:26.491
So let's start talking a little

00:06:26.491 --> 00:06:28.390
bit about best practices.

00:06:28.390 --> 00:06:31.420
As a best practice it's good to
gracefully degrade to the

00:06:31.420 --> 00:06:34.670
best player experience on
the platform you're on.

00:06:34.670 --> 00:06:38.410
So what does this mean?

00:06:38.410 --> 00:06:42.150
In a perfect world, let's say
we wanted to have a YouTube

00:06:42.150 --> 00:06:43.020
stand alone player.

00:06:43.020 --> 00:06:45.900
Now this code is from the
YouTube player API.

00:06:45.900 --> 00:06:49.970
You copy paste this in, import
the JAR file, import your

00:06:49.970 --> 00:06:51.730
developer key, and you
should be able to

00:06:51.730 --> 00:06:54.520
play YouTube videos.

00:06:54.520 --> 00:06:57.270
But that's a perfect world.

00:06:57.270 --> 00:06:59.380
Not all devices are
going to have the

00:06:59.380 --> 00:07:01.530
latest version of YouTube.

00:07:01.530 --> 00:07:03.570
So you're going to have
to fall over to

00:07:03.570 --> 00:07:05.090
your next best option.

00:07:05.090 --> 00:07:08.030
Now depending on what your
application does, this may

00:07:08.030 --> 00:07:10.230
mean a couple of different
things.

00:07:10.230 --> 00:07:15.100
If your application just wants
users to play YouTube videos

00:07:15.100 --> 00:07:16.910
sometimes you just want to
kick them out to the main

00:07:16.910 --> 00:07:17.990
YouTube application.

00:07:17.990 --> 00:07:20.510
So the second line of code is an
example of how you can use

00:07:20.510 --> 00:07:23.470
the YouTube player API to start
a YouTube video in the

00:07:23.470 --> 00:07:25.050
main application.

00:07:25.050 --> 00:07:28.600
In the worst case scenario,
YouTube is not available on

00:07:28.600 --> 00:07:29.860
your platform.

00:07:29.860 --> 00:07:32.700
So then you would fall back
to iFrame player API.

00:07:32.700 --> 00:07:36.930
Now for any number of reasons
this is the last resort, but

00:07:36.930 --> 00:07:38.370
it is one that you might
want to consider.

00:07:41.380 --> 00:07:43.505
Starting the YouTube application
is very easy using

00:07:43.505 --> 00:07:46.200
the player API.

00:07:46.200 --> 00:07:49.650
Using this line of code you can
create a PlayVideoIntent,

00:07:49.650 --> 00:07:52.360
and just using start activity,
you can start the intent that

00:07:52.360 --> 00:07:54.410
kicks you out to YouTube.

00:07:54.410 --> 00:07:56.730
Now why would you do this
instead of just creating an

00:07:56.730 --> 00:08:01.710
intent the normal way, we'll
talk about that in a second.

00:08:01.710 --> 00:08:04.540
And as a last resort, you
can create an iFrame.

00:08:04.540 --> 00:08:06.450
Now for some of you taking
pictures of the slides, these

00:08:06.450 --> 00:08:08.680
will be online later,
so you can just copy

00:08:08.680 --> 00:08:09.930
that down that way.

00:08:12.210 --> 00:08:15.270
OK, so how does graceful
failover look like?

00:08:15.270 --> 00:08:17.770
We're going to walk through
this line by line over the

00:08:17.770 --> 00:08:20.050
code to determine what
your player--

00:08:20.050 --> 00:08:22.540
on the current Android device--
can do, what it can't

00:08:22.540 --> 00:08:24.810
do, and just go and
break through

00:08:24.810 --> 00:08:25.690
these different options.

00:08:25.690 --> 00:08:27.990
And again, these options are
playing them natively in your

00:08:27.990 --> 00:08:31.850
activity, kicking out to the
YouTube app, and playing them

00:08:31.850 --> 00:08:34.520
in an iFrame.

00:08:34.520 --> 00:08:37.850
So first off, let's check
if YouTube is installed.

00:08:37.850 --> 00:08:39.870
The Android player API
comes with a library

00:08:39.870 --> 00:08:42.039
called YouTube intense.

00:08:42.039 --> 00:08:46.040
And using this library, using
this class, you can say, is

00:08:46.040 --> 00:08:47.090
this thing even installed?

00:08:47.090 --> 00:08:49.270
And there's some Android devices
where YouTube isn't

00:08:49.270 --> 00:08:50.330
already installed.

00:08:50.330 --> 00:08:52.700
So in those cases, we'll just
break through and skip this

00:08:52.700 --> 00:08:53.540
block of code.

00:08:53.540 --> 00:08:57.610
But for most Android devices
with Google experience the

00:08:57.610 --> 00:08:59.360
answer you get is yes.

00:08:59.360 --> 00:09:01.760
Now the next thing we'll want
to check is, can I play the

00:09:01.760 --> 00:09:05.310
YouTube video inside
my activity?

00:09:05.310 --> 00:09:07.730
That's what this line of code
here does, using the YouTube

00:09:07.730 --> 00:09:09.510
API service util.

00:09:09.510 --> 00:09:11.260
It looks like a long line
of code, but it's really

00:09:11.260 --> 00:09:12.980
something you can just
copy and paste.

00:09:12.980 --> 00:09:17.120
And if you can play the video
inside your activity, we start

00:09:17.120 --> 00:09:19.830
an intent that says, just
start something

00:09:19.830 --> 00:09:20.900
in standalone player.

00:09:20.900 --> 00:09:22.830
Now the standalone player is
only one of many different

00:09:22.830 --> 00:09:25.470
options, you'll want to take a
look at all of these options

00:09:25.470 --> 00:09:28.420
and they're available in these
samples app for the YouTube

00:09:28.420 --> 00:09:30.740
player API.

00:09:30.740 --> 00:09:33.450
So what if you don't have the
newest version of YouTube,

00:09:33.450 --> 00:09:35.090
what do you do then?

00:09:35.090 --> 00:09:35.780
Let's check for that.

00:09:35.780 --> 00:09:38.500
Let's check if YouTube is
installed, and if it can

00:09:38.500 --> 00:09:40.800
resolve a PlayVideoIntent.

00:09:40.800 --> 00:09:44.840
Now again an intent is a
question that says, can you

00:09:44.840 --> 00:09:45.510
please do this?

00:09:45.510 --> 00:09:47.110
It's a request.

00:09:47.110 --> 00:09:51.220
So you're saying, can you
resolve the PlayVideoIntent?

00:09:51.220 --> 00:09:54.260
If the answer is yes, this is
true, and we execute the next

00:09:54.260 --> 00:09:57.020
line of code, in which we start
an activity where we

00:09:57.020 --> 00:10:00.370
just create a PlayVideoIntent
and this starts the main

00:10:00.370 --> 00:10:03.230
YouTube activity, this starts
the main YouTube player, and

00:10:03.230 --> 00:10:04.480
plays your video.

00:10:07.980 --> 00:10:10.790
So you might not always want
to play the video in the

00:10:10.790 --> 00:10:13.630
YouTube player, the main app.

00:10:13.630 --> 00:10:15.650
But there are lots of times when
you do want to use the

00:10:15.650 --> 00:10:17.110
main YouTube app.

00:10:17.110 --> 00:10:19.660
So a good analogy here would
be if you have a reviews

00:10:19.660 --> 00:10:20.930
application.

00:10:20.930 --> 00:10:23.650
For lots of review applications
you have a map

00:10:23.650 --> 00:10:24.860
right there in the
application.

00:10:24.860 --> 00:10:26.510
It shows you where the
restaurant is.

00:10:26.510 --> 00:10:28.940
But a lot of users may want to
click out and go to Google

00:10:28.940 --> 00:10:31.230
Maps or an alternate
map application.

00:10:31.230 --> 00:10:34.150
That's the difference between
using the player API to play

00:10:34.150 --> 00:10:37.370
the video inside your
application, and on YouTube.

00:10:42.390 --> 00:10:43.890
Don't rebuild the YouTube app.

00:10:43.890 --> 00:10:47.850
This is an anti-pattern that
we don't recommend, right.

00:10:47.850 --> 00:10:51.050
You're replicating code, and in
many of these cases you're

00:10:51.050 --> 00:10:53.390
probably better off just sending
a user to the main

00:10:53.390 --> 00:10:54.640
YouTube application.

00:10:59.700 --> 00:11:01.800
So here's another best practice
that we picked up

00:11:01.800 --> 00:11:03.810
talking to another one
of our partners.

00:11:03.810 --> 00:11:07.250
Providing intermediary screen
during loading.

00:11:07.250 --> 00:11:08.470
And what does this mean?

00:11:08.470 --> 00:11:10.220
Well, let's do a case study.

00:11:10.220 --> 00:11:13.470
This is one of our launch
partners last year, the launch

00:11:13.470 --> 00:11:14.950
partner is Skimble.

00:11:14.950 --> 00:11:16.970
Skimble is an Android
application that loads

00:11:16.970 --> 00:11:20.380
exercise videos from
YouTube, and plays

00:11:20.380 --> 00:11:21.330
them inside your app.

00:11:21.330 --> 00:11:24.310
It puts them in a loop, and it
times you to say, you should

00:11:24.310 --> 00:11:27.090
be doing 100 push-ups,
or 500 push-ups.

00:11:27.090 --> 00:11:30.020
I guess it's good if
you're Superman.

00:11:30.020 --> 00:11:32.000
But realistically, it loops
the video for about 10

00:11:32.000 --> 00:11:35.160
seconds, or 20 seconds,
moves onto the next

00:11:35.160 --> 00:11:37.020
exercise, and so forth.

00:11:39.610 --> 00:11:41.580
So a quick reminder,
I mentioned

00:11:41.580 --> 00:11:42.570
the Terms of Service.

00:11:42.570 --> 00:11:45.400
One thing the Terms of Service
do not allow you to do is do

00:11:45.400 --> 00:11:47.500
overlays, or draw on
top of videos.

00:11:47.500 --> 00:11:50.600
And there are good reasons why
we do this, but this is

00:11:50.600 --> 00:11:53.330
something to keep in mind.

00:11:53.330 --> 00:11:56.090
And if you do try to put an
overlay on top of a video it

00:11:56.090 --> 00:11:58.320
will stop the playback.

00:11:58.320 --> 00:12:01.150
But that doesn't mean you can't
draw on top of the area

00:12:01.150 --> 00:12:02.490
where you're loading the
video before the

00:12:02.490 --> 00:12:03.800
video started playing.

00:12:03.800 --> 00:12:05.700
So what does Skimble do?

00:12:05.700 --> 00:12:08.570
Skimble, you go ahead and click
Start in their fitness

00:12:08.570 --> 00:12:11.290
flow application.

00:12:11.290 --> 00:12:13.260
Now while they're loading the
video, and depending on what

00:12:13.260 --> 00:12:16.000
kind of network situation you
may have, this could take a

00:12:16.000 --> 00:12:17.330
couple of seconds.

00:12:17.330 --> 00:12:20.740
So they don't want people
staring at a black box for a

00:12:20.740 --> 00:12:22.890
while with just a loading
screen, right.

00:12:22.890 --> 00:12:24.810
They want to show the user that
something's happening,

00:12:24.810 --> 00:12:26.100
keep them engaged.

00:12:26.100 --> 00:12:29.270
So what Skimble does is they
draw an overlay, which is some

00:12:29.270 --> 00:12:30.390
kind of text.

00:12:30.390 --> 00:12:33.320
In this case, they're saying you
are a work of art, right.

00:12:33.320 --> 00:12:35.670
Keep you motivated and keep
you working hard.

00:12:35.670 --> 00:12:38.210
And as soon as they get notified
that the video has

00:12:38.210 --> 00:12:42.450
started playing, and this is
through a callback, they take

00:12:42.450 --> 00:12:43.900
the overlay away, and the video

00:12:43.900 --> 00:12:45.150
begins playing as normal.

00:12:48.920 --> 00:12:52.180
Player callbacks are very
easy to register.

00:12:52.180 --> 00:12:55.840
In the Android player API, what
you do is you create a

00:12:55.840 --> 00:13:01.140
player listener class, and you
set a playback event listener

00:13:01.140 --> 00:13:01.900
to the player.

00:13:01.900 --> 00:13:04.180
So this might be a little bit
confusing, but I'll just

00:13:04.180 --> 00:13:05.160
repeat myself.

00:13:05.160 --> 00:13:08.400
You a player instance and this
represents the actual YouTube

00:13:08.400 --> 00:13:10.080
video player.

00:13:10.080 --> 00:13:12.830
You call a method to
set a listener,

00:13:12.830 --> 00:13:14.180
and you set the listener.

00:13:14.180 --> 00:13:16.550
And in the listener this
listener has multiple methods

00:13:16.550 --> 00:13:19.930
you need to define, on stop,
on playing, on pause.

00:13:19.930 --> 00:13:23.620
And in these methods you define
the hooks of what you

00:13:23.620 --> 00:13:24.600
want the player to do.

00:13:24.600 --> 00:13:27.550
In this case, I am taking the
overlay, which is saying you

00:13:27.550 --> 00:13:29.540
are a work of art, you're
doing a great job,

00:13:29.540 --> 00:13:30.790
and I'm hiding it.

00:13:33.240 --> 00:13:35.010
There's a lot of different
callbacks.

00:13:35.010 --> 00:13:37.090
If you've ever worked with the
JavaScript player before you

00:13:37.090 --> 00:13:39.540
know that there's a full range
of things you can do when

00:13:39.540 --> 00:13:41.760
you're playing a YouTube video,
and events that you can

00:13:41.760 --> 00:13:45.920
listen for, and these are all
available via the Java Android

00:13:45.920 --> 00:13:48.350
Player API, as well.

00:13:48.350 --> 00:13:51.280
So note that this is also
available if you're working in

00:13:51.280 --> 00:13:54.190
iOS, it's just that these are
going to be in JavaScript, and

00:13:54.190 --> 00:13:56.560
you're going to have to have a
JavaScript bridge between your

00:13:56.560 --> 00:14:01.830
Objective C code and the
JavaScript code that's working

00:14:01.830 --> 00:14:03.970
with the iOS player.

00:14:03.970 --> 00:14:06.690
OK, and just one quick thing,
because we've been asked about

00:14:06.690 --> 00:14:07.620
this a lot.

00:14:07.620 --> 00:14:10.630
You don't need to implement
your own captions system.

00:14:10.630 --> 00:14:13.220
The YouTube player API will
respect captions.

00:14:13.220 --> 00:14:16.070
And in these two screenshots
what you're seeing is that one

00:14:16.070 --> 00:14:18.370
of these is in the official
YouTube app, and the other one

00:14:18.370 --> 00:14:21.070
is just in the player inside
the Flipboard application

00:14:21.070 --> 00:14:24.200
saying, hey play the captions.

00:14:24.200 --> 00:14:26.530
There will be a button that says
CC where you can hide and

00:14:26.530 --> 00:14:27.450
show captions.

00:14:27.450 --> 00:14:29.240
So you don't need to do this,
you don't need to build your

00:14:29.240 --> 00:14:30.490
own caption functionality.

00:14:33.040 --> 00:14:35.030
Now let's switch gears a little
bit and talk about

00:14:35.030 --> 00:14:36.685
authorization and
authentication.

00:14:39.260 --> 00:14:41.960
A quick public service
announcement, if you are using

00:14:41.960 --> 00:14:45.540
the data API, and you're
probably using V2 of the API,

00:14:45.540 --> 00:14:48.560
we highly encourage you to move
to V3 of the API, this is

00:14:48.560 --> 00:14:51.680
where we're going to be
investing a lot of effort.

00:14:51.680 --> 00:14:54.840
If you're using V2, and you
can't get off it for the

00:14:54.840 --> 00:14:58.000
foreseeable future, please
don't use client login.

00:14:58.000 --> 00:14:59.290
Please you OAuth when you can.

00:15:02.360 --> 00:15:06.590
Now when do you need
authentication when you're

00:15:06.590 --> 00:15:08.690
making API calls?

00:15:08.690 --> 00:15:11.890
So think about when you're on
YouTube.com, when you're

00:15:11.890 --> 00:15:13.700
searching or playing for
videos you don't need

00:15:13.700 --> 00:15:14.830
to be logged in.

00:15:14.830 --> 00:15:17.020
You can just search and
play right there.

00:15:17.020 --> 00:15:19.680
But when you want to start
managing playlists, uploading

00:15:19.680 --> 00:15:23.170
videos, just editing things,
making comments you need

00:15:23.170 --> 00:15:24.290
to be logged in.

00:15:24.290 --> 00:15:26.480
And these are things that
you need to use OAuth to

00:15:26.480 --> 00:15:30.185
authenticate your user for, to
authorize your application.

00:15:33.460 --> 00:15:35.585
Those of you that have worked
with OAuth on the web before

00:15:35.585 --> 00:15:38.420
will probably recognize
this picture.

00:15:38.420 --> 00:15:41.610
The way OAuth works is, you're
on a site maybe it's

00:15:41.610 --> 00:15:43.710
Ikaiscoolsite.com.

00:15:43.710 --> 00:15:46.260
I'm saying, hey I want access
to your YouTube account.

00:15:46.260 --> 00:15:50.380
So I forward you to a page on
Google.com, YouTube.com, and

00:15:50.380 --> 00:15:53.470
you say, do you want to give
Ikaiscoolsite access to your

00:15:53.470 --> 00:15:54.530
YouTube account?

00:15:54.530 --> 00:15:57.890
You say, yes, and you redirect
back to Ikaiscoolsite.com.

00:15:57.890 --> 00:16:01.430
I get a token, and using
this token, I can make

00:16:01.430 --> 00:16:03.040
API calls as you.

00:16:03.040 --> 00:16:05.200
I don't need to store your
email, I don't need to store

00:16:05.200 --> 00:16:07.700
your password, I just need to
store your token and I could

00:16:07.700 --> 00:16:09.970
make API calls.

00:16:09.970 --> 00:16:12.050
On mobile it's not
too different.

00:16:12.050 --> 00:16:15.550
But some of the processes can
be a little streamlined.

00:16:15.550 --> 00:16:20.530
On iOS we can open up a web view
that says, enter in your

00:16:20.530 --> 00:16:22.990
Google account details, and
if you're using a one-time

00:16:22.990 --> 00:16:26.320
password because you're using
two-factor, you enter in your

00:16:26.320 --> 00:16:28.540
one-time password, and you're
logged in, and you can

00:16:28.540 --> 00:16:29.520
authorize the app.

00:16:29.520 --> 00:16:32.260
If you're not using two-factor
cache for your Google account,

00:16:32.260 --> 00:16:33.980
and you haven't heard about
it yet, please look it

00:16:33.980 --> 00:16:35.730
up and use it today.

00:16:35.730 --> 00:16:36.980
You'll want to do this.

00:16:36.980 --> 00:16:37.920
It's good for you.

00:16:37.920 --> 00:16:40.560
You'll keep your stuff secure.

00:16:40.560 --> 00:16:43.610
In Android, we don't even need
you to enter in your email and

00:16:43.610 --> 00:16:44.510
password again.

00:16:44.510 --> 00:16:47.970
Because we have an authorization
service.

00:16:47.970 --> 00:16:50.520
What I'm showing you guys here
is Google Play Services

00:16:50.520 --> 00:16:53.820
checking for your account on
your phone and asking you for

00:16:53.820 --> 00:16:56.710
permission to give your account
details to the YouTube

00:16:56.710 --> 00:16:57.960
application.

00:17:00.150 --> 00:17:01.800
Play Services for Android
makes it very

00:17:01.800 --> 00:17:03.080
easy to manage tokens.

00:17:03.080 --> 00:17:07.230
Once you start working with this
you don't have to manage

00:17:07.230 --> 00:17:08.339
emails or passwords.

00:17:08.339 --> 00:17:11.275
And the token will work very
seamlessly with the Java V3

00:17:11.275 --> 00:17:12.525
API client.

00:17:15.050 --> 00:17:17.819
So authorizing a channel
looks like this.

00:17:17.819 --> 00:17:20.160
This is all the code it takes
to authorize a channel in an

00:17:20.160 --> 00:17:22.340
Android activity using
Play Services.

00:17:24.970 --> 00:17:28.109
Using GoogleAuthUtil
class I'm saying,

00:17:28.109 --> 00:17:30.160
hey, let's get a token.

00:17:30.160 --> 00:17:33.110
You pass it a context and
what are called scopes.

00:17:33.110 --> 00:17:37.960
A scope is the range of APIs
that you want to access on

00:17:37.960 --> 00:17:39.340
behalf of a user.

00:17:39.340 --> 00:17:41.930
You get back a token, and you
can start making API calls on

00:17:41.930 --> 00:17:43.640
behalf of the user.

00:17:43.640 --> 00:17:45.585
But let's say this user has not
given you authorization

00:17:45.585 --> 00:17:48.200
yet, what do you need to do?

00:17:48.200 --> 00:17:51.510
You need to catch this
exception, and this is all

00:17:51.510 --> 00:17:54.380
documented in our samples,
as well as on our site.

00:17:54.380 --> 00:17:59.280
Once you catch this exception,
this exception gives you back

00:17:59.280 --> 00:18:02.600
an exception class, we can fetch
an intent that starts

00:18:02.600 --> 00:18:04.970
the authentication process.

00:18:04.970 --> 00:18:06.900
You'll see in this next
line of code I have

00:18:06.900 --> 00:18:08.850
a get intent method.

00:18:08.850 --> 00:18:10.990
This returns to Android intent,
I just call start

00:18:10.990 --> 00:18:14.100
activity, and once this returns
I attempt to get the

00:18:14.100 --> 00:18:15.560
token and make the
API call again.

00:18:18.410 --> 00:18:22.400
Authorization on iOS is it's
going to involve a little bit

00:18:22.400 --> 00:18:25.180
more user action, but Google
has released a couple of

00:18:25.180 --> 00:18:27.990
libraries to at least make
this easier on your part.

00:18:27.990 --> 00:18:31.570
The two libraries are the
Google+ platform for iOS, as

00:18:31.570 --> 00:18:34.650
well as the kind of a lower
level library that the Google+

00:18:34.650 --> 00:18:36.730
platform was built on top off.

00:18:36.730 --> 00:18:41.250
And the lower level library is
called gtm-oauth2, and what

00:18:41.250 --> 00:18:42.040
this does--

00:18:42.040 --> 00:18:43.520
I know you can't
see this code--

00:18:43.520 --> 00:18:45.660
but this is just the getting
started code.

00:18:45.660 --> 00:18:47.160
It manages the tokens for you.

00:18:47.160 --> 00:18:50.920
It creates a web view that
says, hey login with your

00:18:50.920 --> 00:18:54.330
Google credentials, and I'll
give this application a token

00:18:54.330 --> 00:18:55.760
they can use to make
API calls.

00:18:59.080 --> 00:19:03.720
OK, so those are the basics
around authorization.

00:19:03.720 --> 00:19:08.340
Now in YouTube one of the tips
that we have is sometimes you

00:19:08.340 --> 00:19:10.690
might want to help the user
create a channel, if they

00:19:10.690 --> 00:19:12.800
don't already have a
YouTube channel.

00:19:12.800 --> 00:19:15.030
So a YouTube channel
is not the same

00:19:15.030 --> 00:19:17.060
thing as a Google account.

00:19:17.060 --> 00:19:19.000
A Google account is
what you get when

00:19:19.000 --> 00:19:20.570
you sign up for Gmail.

00:19:20.570 --> 00:19:22.960
You sign up for Gmail, you have
a Google account, you can

00:19:22.960 --> 00:19:26.370
search, get search history, a
calendar, and get access to a

00:19:26.370 --> 00:19:28.470
whole range of other services.

00:19:28.470 --> 00:19:31.940
Now a YouTube channel is
necessary for uploading videos

00:19:31.940 --> 00:19:34.050
and managing playlists and doing
a few other things that

00:19:34.050 --> 00:19:35.620
you need to do on YouTube.

00:19:35.620 --> 00:19:37.710
You can have a Google account
without having a YouTube

00:19:37.710 --> 00:19:40.130
channel, and this can be
initially confusing, but once

00:19:40.130 --> 00:19:41.970
you get the hang of working
with this it's not

00:19:41.970 --> 00:19:43.220
that big of a deal.

00:19:45.310 --> 00:19:48.030
So here I'm showing you what
it looks like to create a

00:19:48.030 --> 00:19:49.670
channel on a mobile device.

00:19:49.670 --> 00:19:53.855
If a user is forwarded to a
page, the user logs in, and

00:19:53.855 --> 00:19:57.030
the user says, do I want to
create a channel, yes or no?

00:19:57.030 --> 00:19:59.725
Yes, create it with my real
name, or give it an alias?

00:20:03.470 --> 00:20:05.890
So you're not able to make
certain YouTube API calls

00:20:05.890 --> 00:20:08.770
without having a channel, and
these API calls are things

00:20:08.770 --> 00:20:09.920
like uploading a video.

00:20:09.920 --> 00:20:13.560
Think of it this way, you can't
have a TV show unless

00:20:13.560 --> 00:20:14.440
you have a TV channel.

00:20:14.440 --> 00:20:15.460
It's the same thing
with YouTube.

00:20:15.460 --> 00:20:19.880
You need a YouTube channel to
be able to upload videos and

00:20:19.880 --> 00:20:22.180
there are two ways we could
check for this.

00:20:22.180 --> 00:20:24.650
This is the lazy way of
checking, in the lazy way of

00:20:24.650 --> 00:20:27.670
checking we just try to make
the API calls anyway.

00:20:27.670 --> 00:20:30.620
So one of the API calls that you
need a channel to make is

00:20:30.620 --> 00:20:31.960
playlist management.

00:20:31.960 --> 00:20:34.820
Channels have playlists, which
are lists of videos which go

00:20:34.820 --> 00:20:36.280
in some certain order.

00:20:36.280 --> 00:20:39.520
So I'm trying to make this API
call here, and this throws an

00:20:39.520 --> 00:20:41.880
exception, because I don't
have a channel yet.

00:20:41.880 --> 00:20:43.130
This is a brand new account
that doesn't

00:20:43.130 --> 00:20:44.770
have a YouTube channel.

00:20:44.770 --> 00:20:46.400
The exception is of the
type, the Google

00:20:46.400 --> 00:20:48.130
Json response exception.

00:20:48.130 --> 00:20:50.000
This is a standard exception
type for

00:20:50.000 --> 00:20:51.950
many of Google's APIs.

00:20:51.950 --> 00:20:55.840
We catch this exception, and
let's fetch the details about

00:20:55.840 --> 00:20:57.080
the errors.

00:20:57.080 --> 00:20:59.970
So this could have some
number of errors is

00:20:59.970 --> 00:21:00.880
greater than zero.

00:21:00.880 --> 00:21:04.480
We iterate through this, it's
a list of errors, and we get

00:21:04.480 --> 00:21:06.220
the reason.

00:21:06.220 --> 00:21:08.560
Get reason is the method, and
we just check to see if the

00:21:08.560 --> 00:21:11.680
reason is the
youtubeSignUpRequired.

00:21:11.680 --> 00:21:15.150
And if this is the reason why
we can't make this API call,

00:21:15.150 --> 00:21:17.350
we recover from this.

00:21:17.350 --> 00:21:19.700
If we have an activity for
creating the channel, we just

00:21:19.700 --> 00:21:21.460
fire off the activity and
we're ready to go.

00:21:24.750 --> 00:21:26.370
That's the lazy way
of checking.

00:21:26.370 --> 00:21:27.900
So what if we want
to check eagerly?

00:21:27.900 --> 00:21:29.860
What if we want to know ahead
of time, so you don't always

00:21:29.860 --> 00:21:32.290
have to deal with
this exception?

00:21:32.290 --> 00:21:35.420
So the way that we can do this
is by making a different API

00:21:35.420 --> 00:21:37.810
call, and this code is really
small, but we'll

00:21:37.810 --> 00:21:40.480
blow it up right now.

00:21:40.480 --> 00:21:44.350
First off, some of this is
semi boilerplate code.

00:21:44.350 --> 00:21:46.830
This is the code you need to
write when you're working in

00:21:46.830 --> 00:21:50.570
Java using the V3 client, and
a lot of this code will map

00:21:50.570 --> 00:21:52.300
directly to the Objective
C client.

00:21:52.300 --> 00:21:54.230
So both of those clients can do
similar things when we're

00:21:54.230 --> 00:21:56.840
talking about the data API.

00:21:56.840 --> 00:22:01.260
We set the access token, and
that's the thing we talked

00:22:01.260 --> 00:22:01.740
about earlier.

00:22:01.740 --> 00:22:06.250
You get this back using either
Play Services or gtm-oauth.

00:22:06.250 --> 00:22:09.840
We create an instance of
the YouTube client.

00:22:09.840 --> 00:22:12.940
We have to pass an http
transport and Jackson factory

00:22:12.940 --> 00:22:15.630
is Json processor.

00:22:15.630 --> 00:22:17.870
Now let's go ahead and make
the actual API call.

00:22:17.870 --> 00:22:20.770
And the API call that we're
making is to list the current

00:22:20.770 --> 00:22:22.500
users channels.

00:22:22.500 --> 00:22:25.370
Let's see if this user
has any channels.

00:22:25.370 --> 00:22:27.710
Once we get back this
information, we're only asking

00:22:27.710 --> 00:22:29.080
for status.

00:22:29.080 --> 00:22:32.440
So we're saying, get back my
channels, and all I want to

00:22:32.440 --> 00:22:34.690
know is the status
of my channels.

00:22:34.690 --> 00:22:37.670
So if I don't have any channels,
what this will

00:22:37.670 --> 00:22:41.820
return is a status under
the field is linked.

00:22:41.820 --> 00:22:43.710
And we check to see if this
is true or false.

00:22:43.710 --> 00:22:45.990
And if this is true, that's all
we need to know, we don't

00:22:45.990 --> 00:22:47.530
ever need to check for
channels again.

00:22:47.530 --> 00:22:50.180
Once a user links a Google
account to a channel they

00:22:50.180 --> 00:22:51.780
cannot unlink these two.

00:22:51.780 --> 00:22:53.610
So once you know that this is
true, you don't need to do

00:22:53.610 --> 00:22:55.970
this check ever again.

00:22:55.970 --> 00:22:59.680
If this is true, go on,
go on with your day.

00:22:59.680 --> 00:23:02.490
If this is false, well figure
out how you can help your

00:23:02.490 --> 00:23:05.600
users create a channel, and
maybe this means doing it in a

00:23:05.600 --> 00:23:07.630
web view, maybe this means
opening up a link in a

00:23:07.630 --> 00:23:10.660
browser, and maybe this just
means sending them directly to

00:23:10.660 --> 00:23:13.560
the YouTube application on their
phone where they can

00:23:13.560 --> 00:23:15.370
create a channel.

00:23:15.370 --> 00:23:19.020
So again this is Java code, but
this will map directly to

00:23:19.020 --> 00:23:23.080
the Objective C client
as well.

00:23:23.080 --> 00:23:26.170
So here's one possible solution,
and I'm hesitating

00:23:26.170 --> 00:23:29.010
because I don't want to
recommend this as a best

00:23:29.010 --> 00:23:31.390
practice, but this is one way
that we've seen some people

00:23:31.390 --> 00:23:33.150
implement this.

00:23:33.150 --> 00:23:34.680
Some people what they
will do is they will

00:23:34.680 --> 00:23:35.730
create a web view.

00:23:35.730 --> 00:23:38.700
And in this web view they will
take them through the channel

00:23:38.700 --> 00:23:40.370
creation flow.

00:23:40.370 --> 00:23:43.390
When they're done, they check
the URL, and they see if the

00:23:43.390 --> 00:23:47.970
URL matches the channel
creation success URL.

00:23:47.970 --> 00:23:52.210
And if it does match, then
you're ready to go.

00:23:52.210 --> 00:23:54.890
The channel is created, try
making the API call again.

00:23:57.840 --> 00:24:02.230
OK, so that's what I have for
you guys today and let's do a

00:24:02.230 --> 00:24:05.280
very quick recap of what we've
talked about so far.

00:24:05.280 --> 00:24:08.080
We've talked about graceful
failover.

00:24:08.080 --> 00:24:11.630
In a perfect world, all the
devices that users are using

00:24:11.630 --> 00:24:16.110
are newest devices with the
newest version of YouTube.

00:24:16.110 --> 00:24:17.990
We have to do with
loading latency.

00:24:17.990 --> 00:24:20.500
This can take a few seconds,
let's give the user something

00:24:20.500 --> 00:24:21.220
to look at.

00:24:21.220 --> 00:24:24.830
And let's keep in mind all the
different callbacks we have to

00:24:24.830 --> 00:24:28.280
keep their playback experience
interesting.

00:24:28.280 --> 00:24:31.830
When using a data API, use the
V3 API, that's a public

00:24:31.830 --> 00:24:33.640
service announcement.

00:24:33.640 --> 00:24:36.600
And for authorization, some of
the easiest ways you can do

00:24:36.600 --> 00:24:39.710
this are using Play Services
or an iOS using the Google+

00:24:39.710 --> 00:24:42.580
platform, or gtm-oauth2.

00:24:42.580 --> 00:24:43.870
Those are libraries you can
use, and those are Google

00:24:43.870 --> 00:24:46.770
provided libraries.

00:24:46.770 --> 00:24:49.150
Understand the difference
between a Google account and a

00:24:49.150 --> 00:24:50.840
channel, and what that
relationship is.

00:24:50.840 --> 00:24:53.820
And again, a user can have a
Google account without having

00:24:53.820 --> 00:24:56.850
a channel, you might want to
help them create one, or just

00:24:56.850 --> 00:24:58.850
guide them through
creating one.

00:24:58.850 --> 00:25:01.060
So that's what I have
for you guys today.

00:25:01.060 --> 00:25:05.120
And for any specific questions
I want to thank a few people

00:25:05.120 --> 00:25:06.650
that helped out with
this talk.

00:25:06.650 --> 00:25:09.750
One of them is Tom, he works
on the YouTube team.

00:25:09.750 --> 00:25:12.820
One of them is Geert,
over here, he works

00:25:12.820 --> 00:25:14.130
on a Flipboard team.

00:25:14.130 --> 00:25:16.840
And another guy is John, who
couldn't be here today.

00:25:16.840 --> 00:25:20.920
So with that, I'd like to move
into some Q&amp;A about mobile,

00:25:20.920 --> 00:25:23.330
and working with mobile, and
the YouTube platform.

00:25:23.330 --> 00:25:26.460
So I'm going to invite
up these guys.

00:25:26.460 --> 00:25:28.050
I have a microphone
for you guys.

00:25:28.050 --> 00:25:30.880
So if you can, please ask your
questions at the microphone

00:25:30.880 --> 00:25:33.361
from over here, this is
a recorded session.

00:25:33.361 --> 00:25:35.205
TOM BRIDGWATER: We should
invite Anton too.

00:25:35.205 --> 00:25:37.390
IKAI LAN: And, well
come on, Anton.

00:25:37.390 --> 00:25:39.990
I didn't know-- we have a
special guest he used to work

00:25:39.990 --> 00:25:41.550
on our mobile stuff.

00:25:41.550 --> 00:25:43.500
He's the big expert.

00:25:43.500 --> 00:25:44.750
This is Anton.

00:25:46.765 --> 00:25:48.015
Hi.

00:25:53.252 --> 00:25:55.890
AUDIENCE: What the heck,
I'll f There you go.

00:25:55.890 --> 00:25:57.560
Larry Lieberman from ooVoo.

00:25:57.560 --> 00:26:04.680
So we're a video chat platform
and Android app now and we

00:26:04.680 --> 00:26:10.750
have really successfully built
YouTube playing capabilities

00:26:10.750 --> 00:26:14.980
within ooVoo video chats
on our PC client.

00:26:14.980 --> 00:26:17.430
So the eight or nine people on
the call can all watch the

00:26:17.430 --> 00:26:21.010
same YouTube video
simultaneously.

00:26:21.010 --> 00:26:23.000
We have not been as successful
building

00:26:23.000 --> 00:26:25.560
that product for Android.

00:26:25.560 --> 00:26:28.820
Is there a way to reach out and
get deeper level support,

00:26:28.820 --> 00:26:29.860
since I'm sure it's not
a question we can

00:26:29.860 --> 00:26:31.050
work through now?

00:26:31.050 --> 00:26:36.280
How does one get deeper into
more sophisticated problems in

00:26:36.280 --> 00:26:38.340
development for Android?

00:26:38.340 --> 00:26:42.170
IKAI LAN: So is your question,
what are the different support

00:26:42.170 --> 00:26:44.595
options available for people
building with YouTube?

00:26:44.595 --> 00:26:46.020
AUDIENCE: There you
go, yes please.

00:26:46.020 --> 00:26:49.420
IKAI LAN: YouTube, the YouTube
platform doesn't have what's

00:26:49.420 --> 00:26:51.170
called a paid support channel.

00:26:51.170 --> 00:26:53.120
So we do most of our support
through the community

00:26:53.120 --> 00:26:55.620
channels, such as Stack Overflow
is one place where

00:26:55.620 --> 00:26:57.040
the team is constantly
monitoring.

00:26:57.040 --> 00:27:00.990
And the other place we look at
is we have an issues tracker,

00:27:00.990 --> 00:27:02.660
but that's more for reporting
issues we're

00:27:02.660 --> 00:27:06.100
either serving or bugs.

00:27:06.100 --> 00:27:08.705
AUDIENCE: Not really any support
yet for the kind of

00:27:08.705 --> 00:27:10.675
level problems we're having.

00:27:10.675 --> 00:27:13.140
IKAI LAN: If you're looking for
a type of support with an

00:27:13.140 --> 00:27:14.955
SLA that's not something
that we provide.

00:27:14.955 --> 00:27:17.508
AUDIENCE: OK, thanks.

00:27:17.508 --> 00:27:20.110
AUDIENCE: Hi, hello.

00:27:20.110 --> 00:27:22.750
When you talk about
authentication, helping the

00:27:22.750 --> 00:27:26.440
user create a channel and all
that, but any recommendations

00:27:26.440 --> 00:27:31.410
about battery users, and
improvements, and that.

00:27:31.410 --> 00:27:34.025
If I'm creating an app using the
YouTube API, probably is

00:27:34.025 --> 00:27:36.480
going to consume my
whole battery.

00:27:36.480 --> 00:27:40.345
Do you have any guidelines
for that?

00:27:40.345 --> 00:27:42.430
IKAI LAN: So to repeat the
question, do we have any

00:27:42.430 --> 00:27:46.380
guidelines for working with
the YouTube API--

00:27:46.380 --> 00:27:49.110
AUDIENCE: --being friendly
with battery users.

00:27:49.110 --> 00:27:50.130
IKAI LAN: Being friendly
with--

00:27:50.130 --> 00:27:51.730
AUDIENCE: --battery users.

00:27:51.730 --> 00:27:52.980
IKAI LAN: Battery.

00:27:55.705 --> 00:27:56.955
TOM BRIDGWATER: Power savings.

00:28:00.150 --> 00:28:02.820
Only specific recommendations,
the fact is when you're

00:28:02.820 --> 00:28:05.750
playing a video the CPU
is busy all the time.

00:28:05.750 --> 00:28:12.100
So the best practice I could
recommend would be identical

00:28:12.100 --> 00:28:13.860
to those that you get
from the general

00:28:13.860 --> 00:28:15.140
Android development community.

00:28:15.140 --> 00:28:16.535
There's nothing specific
to YouTube.

00:28:19.560 --> 00:28:23.640
But the fact is, video related
apps are going to be more

00:28:23.640 --> 00:28:26.515
power hungry than other apps.

00:28:26.515 --> 00:28:28.052
AUDIENCE: Thank you.

00:28:28.052 --> 00:28:31.510
GEERT WEENING: Just to add to
that, the YouTube API also

00:28:31.510 --> 00:28:34.090
allows you to destroy the
instance of the player view

00:28:34.090 --> 00:28:36.370
you're working with and to
release the resources.

00:28:36.370 --> 00:28:39.850
So generally when your user is
done viewing the video, and

00:28:39.850 --> 00:28:42.290
you know they're not going to
watch new video very soon,

00:28:42.290 --> 00:28:45.790
because they just started one
instance, you can just kill

00:28:45.790 --> 00:28:49.450
that view and clean-up
resources.

00:28:49.450 --> 00:28:51.720
IKAI LAN: And when it comes to
API calls just follow the

00:28:51.720 --> 00:28:53.030
platform best practices.

00:28:53.030 --> 00:28:55.870
There's a section on
developers.android.com about

00:28:55.870 --> 00:28:59.020
when to use the 3G radio
and batching.

00:28:59.020 --> 00:29:01.030
A lot of this, unfortunately,
wouldn't apply to the player

00:29:01.030 --> 00:29:03.380
API because the radio needs to
be on the whole time while

00:29:03.380 --> 00:29:06.485
it's streaming the video.

00:29:06.485 --> 00:29:09.170
AUDIENCE: So, you said that for
Android Player API we have

00:29:09.170 --> 00:29:12.240
to extend that duty to YouTube
base activity?

00:29:12.240 --> 00:29:12.725
IKAI LAN: Yes.

00:29:12.725 --> 00:29:17.620
AUDIENCE: Can we do something
with the fragments too?

00:29:17.620 --> 00:29:19.590
TOM BRIDGWATER: Yes there's
a different base class.

00:29:19.590 --> 00:29:22.520
Ikai didn't put it in
his presentation.

00:29:22.520 --> 00:29:25.190
There's a different base class
for fragment usage, and

00:29:25.190 --> 00:29:27.960
there's also for support
fragments, if you want to work

00:29:27.960 --> 00:29:31.370
on older platforms that don't
have fragments natively.

00:29:31.370 --> 00:29:34.770
AUDIENCE: Thank you.

00:29:34.770 --> 00:29:37.820
AUDIENCE: Hi, I had a question
regarding live streaming

00:29:37.820 --> 00:29:39.070
support on mobile.

00:29:41.840 --> 00:29:44.720
Yeah, we can use the YouTube
APIs, we can use YouTube

00:29:44.720 --> 00:29:49.150
embeds, but what is the standard
on live streaming

00:29:49.150 --> 00:29:50.670
support across Android?

00:29:50.670 --> 00:29:53.570
Because Android is a platform
where we have the most trouble

00:29:53.570 --> 00:29:54.820
with live streaming.

00:30:00.580 --> 00:30:05.580
ANTON: So I think it's supported
on Honeycomb MR2 and

00:30:05.580 --> 00:30:11.350
above, so 3.1, if I remember
correctly.

00:30:11.350 --> 00:30:14.720
The player API supports it.

00:30:17.425 --> 00:30:22.150
If you use the Google I/O
companion app, it's actually

00:30:22.150 --> 00:30:24.690
implemented there to live stream
all the sessions that

00:30:24.690 --> 00:30:29.730
are live streamed at Google I/O.
So we do support that.

00:30:29.730 --> 00:30:31.850
IKAI LAN: And we have another
session tomorrow about live

00:30:31.850 --> 00:30:32.840
streaming where--

00:30:32.840 --> 00:30:35.030
I don't want to give away the
secrets too much-- but you

00:30:35.030 --> 00:30:39.090
might see some kind of live
streaming from Android.

00:30:39.090 --> 00:30:41.110
I'm sorry, I'm just taking away
all of your surprises

00:30:41.110 --> 00:30:42.220
tomorrow, aren't I?

00:30:42.220 --> 00:30:44.820
It's his session, it's
my teammates session.

00:30:44.820 --> 00:30:48.450
Definitely come to that, but
you're right, it's just a

00:30:48.450 --> 00:30:50.140
standard player when it
comes to playing.

00:30:50.140 --> 00:30:52.756
When it comes to broadcasting
it's a little bit different.

00:30:52.756 --> 00:30:56.220
AUDIENCE: But if you use YouTube
Live Events, for

00:30:56.220 --> 00:30:59.950
example, you're sending RTMP
so ideally you can support

00:30:59.950 --> 00:31:04.640
Flash and Android pre-3, earlier
Androids did have

00:31:04.640 --> 00:31:06.200
Flash built in.

00:31:06.200 --> 00:31:10.650
So why wouldn't you support
Flash based live streaming on

00:31:10.650 --> 00:31:14.180
older versions of Android, and
HLS on the newer versions,

00:31:14.180 --> 00:31:16.190
rather than not support
live streaming on

00:31:16.190 --> 00:31:19.020
older versions at all?

00:31:19.020 --> 00:31:20.470
IKAI LAN: Is this a question
specifically to

00:31:20.470 --> 00:31:22.130
Flash, or live stream?

00:31:22.130 --> 00:31:23.610
AUDIENCE: Live stream as such.

00:31:23.610 --> 00:31:27.610
Because live streaming, if you
have a YouTube live event, the

00:31:27.610 --> 00:31:31.950
live streaming input is you
take the input as RTMP and

00:31:31.950 --> 00:31:36.260
then you do the encoding in the
Cloud and provide HLS for

00:31:36.260 --> 00:31:37.990
the mobile platforms.

00:31:37.990 --> 00:31:44.430
So since older versions of
Android had Flash built in,

00:31:44.430 --> 00:31:47.330
you can provide live streaming
support across all Android

00:31:47.330 --> 00:31:51.000
platforms if older versions
would just do Flash, and the

00:31:51.000 --> 00:31:52.960
newer versions do HLS.

00:31:52.960 --> 00:31:56.330
But everybody I've talked to
at YouTube, the answer has

00:31:56.330 --> 00:31:58.170
been, we support live streaming

00:31:58.170 --> 00:32:01.035
post 3.2, why is that?

00:32:01.035 --> 00:32:03.100
IKAI LAN: I think it has
to do in general

00:32:03.100 --> 00:32:04.460
with supporting Flash.

00:32:04.460 --> 00:32:07.880
Even look at Adobe, even Adobe
is stopping to support Flash.

00:32:07.880 --> 00:32:11.210
So it gets really difficult to
support what's essentially a

00:32:11.210 --> 00:32:12.860
legacy architecture.

00:32:12.860 --> 00:32:14.720
If you have any more questions
about live streaming though,

00:32:14.720 --> 00:32:16.650
I'd love to talk to you
after the talk.

00:32:16.650 --> 00:32:18.250
We have our live streaming
experts in

00:32:18.250 --> 00:32:21.315
this row right here.

00:32:21.315 --> 00:32:24.610
AUDIENCE: Hi, my
name is David.

00:32:24.610 --> 00:32:30.300
In Version 2 at the data API,
there were some feeds for say

00:32:30.300 --> 00:32:34.070
top-rated videos, or most viewed
videos, but they're no

00:32:34.070 --> 00:32:40.170
longer existing on the Version
3 data API, but I do see some

00:32:40.170 --> 00:32:43.850
channels that are more like
Most Popular, for example,

00:32:43.850 --> 00:32:45.480
Most Popular channels.

00:32:45.480 --> 00:32:48.650
But for certain regions, say
for example the region that

00:32:48.650 --> 00:32:54.090
I'm in, the Taiwan region, the
most popular channel I can see

00:32:54.090 --> 00:32:58.270
when I click on the Most Popular
channel for Taiwan on

00:32:58.270 --> 00:33:01.500
the YouTube website, I can see
a lot of videos there.

00:33:01.500 --> 00:33:07.490
But when I use the Version Three
data API to call for

00:33:07.490 --> 00:33:10.250
video listing in that channel,
there's nothing.

00:33:10.250 --> 00:33:13.700
So I'm just wondering why there
is an inconsistency

00:33:13.700 --> 00:33:18.080
between the desktop version and
the data API that you guys

00:33:18.080 --> 00:33:18.515
are providing.

00:33:18.515 --> 00:33:21.610
IKAI LAN: I think when you're
moving between API versions

00:33:21.610 --> 00:33:23.620
you're always going to have
these inconsistencies.

00:33:23.620 --> 00:33:26.970
And we've been working to
identify these gaps so that

00:33:26.970 --> 00:33:30.520
this is a very legitimate gap
that we need to, this is a

00:33:30.520 --> 00:33:31.650
legitimate use case.

00:33:31.650 --> 00:33:34.120
So for instance, we need to
figure out how we can

00:33:34.120 --> 00:33:36.200
replicate the same functionality
in Version Three

00:33:36.200 --> 00:33:37.770
and make that available
to you.

00:33:37.770 --> 00:33:40.360
So definitely talk to us
afterwards, and we'll see

00:33:40.360 --> 00:33:41.790
where our progress is on this.

00:33:41.790 --> 00:33:43.680
We been keeping track
of this one.

00:33:43.680 --> 00:33:47.240
AUDIENCE: Another question I
have, I notice that for the

00:33:47.240 --> 00:33:53.060
YouTube Player API on Android
you guys have to extend some

00:33:53.060 --> 00:33:57.690
base class for either activity
or fragment, but for a lot of

00:33:57.690 --> 00:34:00.980
applications we need to use
common libraries, like the

00:34:00.980 --> 00:34:07.310
ActionBarSherlock library which
itself uses a base class

00:34:07.310 --> 00:34:09.500
for activities or fragments.

00:34:09.500 --> 00:34:14.739
And so in Java you can't really
extend both classes at

00:34:14.739 --> 00:34:15.540
the same time.

00:34:15.540 --> 00:34:18.980
So how do you resolve that
kind of problem?

00:34:18.980 --> 00:34:23.719
If you have an activity that
you want to be using the

00:34:23.719 --> 00:34:27.330
ActionBarSherlock library and
using the YouTube player API

00:34:27.330 --> 00:34:31.072
at the same time, how
do you resolve that?

00:34:31.072 --> 00:34:33.520
IKAI LAN: I think we all have an
answer and it's going to be

00:34:33.520 --> 00:34:35.339
different from all four of us.

00:34:35.339 --> 00:34:37.090
GEERT WEENING: Let me talk
about how we did it for

00:34:37.090 --> 00:34:40.620
Flipboard, because we can
extend the YouTube API

00:34:40.620 --> 00:34:43.020
activity, because we already
have our own activity does

00:34:43.020 --> 00:34:43.870
certain things.

00:34:43.870 --> 00:34:45.920
In your case, you used the
Sherlock activities you can

00:34:45.920 --> 00:34:46.889
use it [INAUDIBLE].

00:34:46.889 --> 00:34:50.760
So we do use the fragment and
we just insert in our own

00:34:50.760 --> 00:34:52.219
custom view.

00:34:52.219 --> 00:34:55.060
As you saw on the slides, we
have the top bar with the

00:34:55.060 --> 00:34:58.140
social interactions, and we
have the YouTube view.

00:34:58.140 --> 00:35:00.930
So the player view is actually
inserted by a fragment.

00:35:00.930 --> 00:35:02.810
And we use the support fragment,
because we support

00:35:02.810 --> 00:35:03.500
down to Froyo.

00:35:03.500 --> 00:35:05.190
So those are your two options.

00:35:05.190 --> 00:35:06.990
The fragment or the support
fragment that is supported

00:35:06.990 --> 00:35:08.320
with the YouTube API.

00:35:08.320 --> 00:35:10.120
AUDIENCE: OK, that
sounds good.

00:35:10.120 --> 00:35:11.346
Thank you.

00:35:11.346 --> 00:35:12.980
IKAI LAN: The short version
is fragments.

00:35:12.980 --> 00:35:15.276
Fragments, fragments
all the way down.

00:35:15.276 --> 00:35:16.570
AUDIENCE: Hello, I'm Ethan.

00:35:16.570 --> 00:35:20.660
So I know there's like a
courtesy limit of number of

00:35:20.660 --> 00:35:23.810
API calls I can make.

00:35:23.810 --> 00:35:24.730
IKAI LAN: Which API call?

00:35:24.730 --> 00:35:27.010
AUDIENCE: The data API, there's
like a courtesy limits

00:35:27.010 --> 00:35:30.730
of number of APIs I
can call per day.

00:35:30.730 --> 00:35:32.050
IKAI LAN: Right, right,
there's a quota, yes.

00:35:32.050 --> 00:35:34.880
AUDIENCE: What will happen if
I made an app that's pretty

00:35:34.880 --> 00:35:38.250
popular and everybody just keeps
calling, it goes over

00:35:38.250 --> 00:35:41.140
the limits, and how should I
overcome these restrictions?

00:35:41.140 --> 00:35:44.090
IKAI LAN: When you do hit an
API limit let us know.

00:35:44.090 --> 00:35:46.300
There's a place to
contact us on

00:35:46.300 --> 00:35:52.700
developers.google.com/youtube.

00:35:52.700 --> 00:35:54.740
A quota works in a couple
of different tiers.

00:35:54.740 --> 00:35:59.600
So if it's one account, on one
API key, on one device, and

00:35:59.600 --> 00:36:02.770
one IP address making a ton of
API calls, that's going to

00:36:02.770 --> 00:36:03.810
have the smallest quota.

00:36:03.810 --> 00:36:06.980
Now per API key, you're going
to have a very relatively

00:36:06.980 --> 00:36:12.080
large quota, and when it's being
used by many users, it's

00:36:12.080 --> 00:36:15.090
not often that we see quotas
being tripped in that

00:36:15.090 --> 00:36:17.960
situation, because the
quota is fairly high.

00:36:17.960 --> 00:36:20.870
So once you do hit that limit
though, if you have a very

00:36:20.870 --> 00:36:22.730
popular application,
like for instance

00:36:22.730 --> 00:36:24.910
Flipboard is pretty popular.

00:36:24.910 --> 00:36:26.360
What do you got 20 billion
users now?

00:36:26.360 --> 00:36:27.820
There aren't even 20 billion
people in the world.

00:36:27.820 --> 00:36:30.280
I'm just throwing a number
out there, and they

00:36:30.280 --> 00:36:31.214
haven't hit a quota.

00:36:31.214 --> 00:36:32.870
Have you?

00:36:32.870 --> 00:36:35.510
GEERT WEENING: So I think we
actually have a couple of keys

00:36:35.510 --> 00:36:38.850
that were brought to us by some
of the contacts that Ikai

00:36:38.850 --> 00:36:39.990
was talking about.

00:36:39.990 --> 00:36:42.200
So if your application is
reaching certain limits, then

00:36:42.200 --> 00:36:44.310
you can contact them, and they
can help you out with setting

00:36:44.310 --> 00:36:45.850
up specific keys.

00:36:45.850 --> 00:36:48.690
Alternatively, if it's data
calls that you can make from

00:36:48.690 --> 00:36:52.030
the client for just that
specific user, then you can

00:36:52.030 --> 00:36:55.610
also use their key, their token,
to do the data call.

00:36:55.610 --> 00:37:00.710
So you don't run into quota
limits on your own key.

00:37:00.710 --> 00:37:03.300
IKAI LAN: They do a
server side call.

00:37:03.300 --> 00:37:04.040
That's one difference.

00:37:04.040 --> 00:37:05.290
AUDIENCE: OK, thank you.

00:37:12.810 --> 00:37:15.870
AUDIENCE: In some cases, videos
are not available on

00:37:15.870 --> 00:37:18.400
mobile platform, or their not
available for playback in

00:37:18.400 --> 00:37:20.130
third-party applications.

00:37:20.130 --> 00:37:22.560
How do we go about detecting
this ahead of time?

00:37:22.560 --> 00:37:28.085
And what is a prescribed
experience for those cases?

00:37:28.085 --> 00:37:31.830
IKAI LAN: There is an API call
in the data API that will--

00:37:31.830 --> 00:37:34.270
there is a field that will tell
you if these videos are

00:37:34.270 --> 00:37:35.820
available or not.

00:37:35.820 --> 00:37:39.120
But a lot of the reason why this
wasn't available in older

00:37:39.120 --> 00:37:41.170
versions of Player is because
older versions of Player

00:37:41.170 --> 00:37:44.060
couldn't do, for instance
TrueView, or they couldn't do

00:37:44.060 --> 00:37:45.200
monetization.

00:37:45.200 --> 00:37:49.630
So it's been awhile since I've
seen a video that couldn't be

00:37:49.630 --> 00:37:52.960
played on a mobile platform, and
because we're now updating

00:37:52.960 --> 00:37:55.850
the versions on both iOS and
Android, this is something

00:37:55.850 --> 00:37:58.210
that I'm seeing far
less frequently.

00:37:58.210 --> 00:38:02.636
But it's something that you can
detect in the data API.

00:38:02.636 --> 00:38:05.480
AUDIENCE: And regarding the
second part of the question,

00:38:05.480 --> 00:38:08.330
where the videos are not
available for playback in

00:38:08.330 --> 00:38:09.995
third party applications?

00:38:09.995 --> 00:38:13.160
IKAI LAN: In third party
applications, that I believe

00:38:13.160 --> 00:38:14.700
that is also available
in the API.

00:38:14.700 --> 00:38:16.820
The API will show you the
playback restrictions.

00:38:19.630 --> 00:38:21.440
All right, so we've got
to wrap this up.

00:38:21.440 --> 00:38:22.590
We've got about a minute left.

00:38:22.590 --> 00:38:25.150
Thank you guys all for coming
out today and let's have round

00:38:25.150 --> 00:38:27.400
of applause for our
guest speakers.

00:38:27.400 --> 00:38:28.600
[APPLAUSE]

00:38:28.600 --> 00:38:29.850
IKAI LAN: Thank you guys.

