WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:03.057
The GLSL language is sort of like the C language, which is kind of like

00:00:03.057 --> 00:00:07.223
JavaScript anyway but simpler. Because vectors are so important in graphics,

00:00:07.223 --> 00:00:11.387
the language also has vector support built in. This vertex shader computes the

00:00:11.387 --> 00:00:15.152
diffuse Lambertian lighting component at each vertex. At the top you can see

00:00:15.152 --> 00:00:18.142
the material color defined as a uniform as something the vertex shader uses as

00:00:18.142 --> 00:00:23.340
an input. Similarly, the lights direction is passed in as a uniform. Vec3 means

00:00:23.340 --> 00:00:28.412
a three-element vector. RGB for the color, XYZ for the lights direction. Next

00:00:28.412 --> 00:00:32.006
is a varying color, vColor, which is an output color. We'll use this in the

00:00:32.006 --> 00:00:36.750
fragment shader. The vertex shader is required to always output GL position.

00:00:36.750 --> 00:00:39.953
Which is a predefined variable. This vector holds the clipping coordinates of

00:00:39.953 --> 00:00:43.822
the vertex location on the screen. This next line normalizes the direction to

00:00:43.822 --> 00:00:46.990
the light. This operation is done here more for convenience of the designer so

00:00:46.990 --> 00:00:50.690
that the light direction does not have to be passed in normalized. You could

00:00:50.690 --> 00:00:53.290
get rid of this line if you require that the light direction must be normalized

00:00:53.290 --> 00:00:57.125
before being passed into this shader. The diffuse reflection model is computed

00:00:57.125 --> 00:01:01.370
on this next line. We take the dot product of the vertex normal and the light.

00:01:01.370 --> 00:01:04.718
We use the maximum function here to make sure the result is not negative. A

00:01:04.718 --> 00:01:07.724
negative number happens when the surface is pointing away from the light. We

00:01:07.724 --> 00:01:10.420
don't allow the light's contribution to be negative. That would be like light

00:01:10.420 --> 00:01:13.870
sucking energy from the surface. The final line of the program itself computes

00:01:13.870 --> 00:01:16.615
the output color, called vColor, by multiplying the color by the diffuse

00:01:16.615 --> 00:01:20.627
contribution. The shader language is a lot like C or Javascript, but has some

00:01:20.627 --> 00:01:24.756
nice, built in features. Here, we're multiplying a vector, the material color,

00:01:24.756 --> 00:01:28.250
times a single value. The language knows to multiply each value of the color

00:01:28.250 --> 00:01:29.980
vector by the diffuse value.

