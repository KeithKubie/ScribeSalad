WEBVTT
Kind: captions
Language: en

00:00:00.360 --> 00:00:02.280
In this exercise, you're going to set up a

00:00:02.280 --> 00:00:06.350
cron job to periodically update the announcement about the conferences

00:00:06.350 --> 00:00:09.450
that are almost sold out. You've already written the function

00:00:09.450 --> 00:00:12.200
to create the announcement, so pretty much all you're going

00:00:12.200 --> 00:00:14.230
to need to do is to configure the cron job.

00:00:14.230 --> 00:00:17.650
So, you configure cron jobs in cron.XML, and this is

00:00:17.650 --> 00:00:21.290
an example for what cron.XML might look like; has a

00:00:21.290 --> 00:00:26.010
top level cron entries element and then each cron job

00:00:26.010 --> 00:00:29.850
is specified within a cron element. You must specify

00:00:29.850 --> 00:00:33.290
the path, and this is the URL that's going to

00:00:33.290 --> 00:00:36.460
run the task invoked by the cron job. You can

00:00:36.460 --> 00:00:40.760
optionally specify a description, and you must specify a schedule.

00:00:40.760 --> 00:00:43.330
The schedule indicates how often to run the task.

00:00:43.330 --> 00:00:45.960
There's a variety of ways to set the schedule, but

00:00:45.960 --> 00:00:48.440
you must strictly follow the syntax or the current job

00:00:48.440 --> 00:00:51.850
won't run. I recommend checking the formats for the schedule.

00:00:51.850 --> 00:00:55.040
The developer documentation does a really nice job

00:00:55.040 --> 00:00:57.710
of describing the syntax for the schedule, and giving

00:00:57.710 --> 00:01:00.690
examples. For example, you can specify it to go

00:01:00.690 --> 00:01:04.422
every 12 hours. You can specify it to go

00:01:04.422 --> 00:01:08.340
once a year, first Monday of, let's say December.

00:01:08.340 --> 00:01:11.480
And then there's other ways of specifying it. Anyway,

00:01:11.480 --> 00:01:13.570
I really recommend you take a look at the

00:01:13.570 --> 00:01:16.860
develop documentation for the schedule. But do bear in

00:01:16.860 --> 00:01:19.670
mind, although there's lots of flexibility in how you

00:01:19.670 --> 00:01:22.210
specify the schedule, you actually do have to get

00:01:22.210 --> 00:01:25.710
the syntax exactly right. So, you can't say every

00:01:25.710 --> 00:01:28.720
one hour. You actually have to say every one

00:01:28.720 --> 00:01:32.627
hours. The admin console on appspot for your application

00:01:32.627 --> 00:01:35.068
has a cron jobs page that shows you what

00:01:35.068 --> 00:01:38.860
cron jobs you've got running. I've got my cron

00:01:38.860 --> 00:01:42.150
slash set announcement cron job running already, and it's scheduled

00:01:42.150 --> 00:01:44.620
to go every one minute, and the last time

00:01:44.620 --> 00:01:47.400
it ran it had a success. If you recall, the

00:01:47.400 --> 00:01:51.030
set announcement function queries for all conferences that are almost

00:01:51.030 --> 00:01:54.280
sold out. So if we look at the quota details,

00:01:54.280 --> 00:01:59.000
you can see that my query ops number is going up. It'll

00:01:59.000 --> 00:02:02.760
go up every minute. The other thing that's going to go up every minute is the

00:02:02.760 --> 00:02:09.470
Datastore API calls. So let's see. So that's 162 and that's 143.

00:02:09.470 --> 00:02:14.540
Let's refresh, see what happens. If I refresh the browser,

00:02:14.540 --> 00:02:18.280
and you see that now my Datastore Query Ops has gone

00:02:18.280 --> 00:02:21.900
up to 144, and my Datastore API Calls have gone

00:02:21.900 --> 00:02:24.770
up to 163. So every minute these numbers are going to

00:02:24.770 --> 00:02:27.490
go up. It's actually not a big deal because this

00:02:27.490 --> 00:02:30.050
cron job doesn't do a whole lot, but if you have

00:02:30.050 --> 00:02:32.230
a cron job that does a lot of Reads and Writes

00:02:32.230 --> 00:02:35.490
to the Datastore, It is going to use up your quota.

00:02:35.490 --> 00:02:38.860
Another thing that running a cron job every minute does

00:02:38.860 --> 00:02:41.860
is that it means you're, it means you're app engine

00:02:41.860 --> 00:02:45.240
application is always in use, so it never has any

00:02:45.240 --> 00:02:47.910
idle time. Which, you know, if your application is in

00:02:47.910 --> 00:02:50.910
constant use by users anyway, it goes viral, you're hugely

00:02:50.910 --> 00:02:55.430
successful, not a problem. But when your developing and testing,

00:02:55.430 --> 00:02:57.720
it does mean that if you keep your cron job

00:02:57.720 --> 00:03:00.700
running frequently, it's going to keep your front end up, and you're

00:03:00.700 --> 00:03:02.540
going to use up your instance hours. So you can

00:03:02.540 --> 00:03:06.860
see here, I've already used 4.64 of my 28 instance

00:03:06.860 --> 00:03:09.030
hours. Not a big deal, but it's something to

00:03:09.030 --> 00:03:12.960
keep an eye on. Off shot load cron.xml two app

00:03:12.960 --> 00:03:16.090
engine. It stays there until you overwrite it with

00:03:16.090 --> 00:03:18.788
a new cron dot XML. So if you want to

00:03:18.788 --> 00:03:21.692
disable your cron job, it's not good enough to just

00:03:21.692 --> 00:03:25.523
delete cron.XML completely from your app and re-upload your app.

00:03:25.523 --> 00:03:29.432
You actually have to send up a new cron.XML

00:03:29.432 --> 00:03:32.841
with no cron entries. So just delete the cron

00:03:32.841 --> 00:03:35.383
entries for the jobs that you want to delete

00:03:35.383 --> 00:03:38.570
and reupload your cron.xml. And another thing you could do

00:03:38.570 --> 00:03:40.503
is just specify the schedule so that it only

00:03:40.503 --> 00:03:42.757
runs like once a year then you're not going to

00:03:42.757 --> 00:03:44.903
have to worry about Quotro or anything, but you

00:03:44.903 --> 00:03:47.070
know, why not just go ahead and delete it anyway

