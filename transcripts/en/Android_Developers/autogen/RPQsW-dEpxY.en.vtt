WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.473
[MUSIC PLAYING]

00:00:07.314 --> 00:00:08.480
AMRIT SANJEEV: Hi, everyone.

00:00:08.480 --> 00:00:09.270
I'm Amrit.

00:00:09.270 --> 00:00:11.040
I'm a developer
advocate at Google.

00:00:11.040 --> 00:00:13.200
And today I want to talk
about push notifications

00:00:13.200 --> 00:00:16.320
and how internet developers
are hacking to get the delivery

00:00:16.320 --> 00:00:18.827
rates a little
higher in the region.

00:00:18.827 --> 00:00:20.910
So let me talk about one
of the stats about India.

00:00:20.910 --> 00:00:25.020
We have about 340 million
plus smartphone users.

00:00:25.020 --> 00:00:28.050
And it's growing at a
16% year-on-year growth

00:00:28.050 --> 00:00:31.380
rate, which means that your
apps have a great chance

00:00:31.380 --> 00:00:34.080
to acquire more users and have
great business in the region.

00:00:34.080 --> 00:00:35.820
But along with this
business, you have--

00:00:35.820 --> 00:00:37.720
also comes with a
lot of competition.

00:00:37.720 --> 00:00:41.160
So there is a greater need
to have a better engagement,

00:00:41.160 --> 00:00:42.622
as well as delighting
your users.

00:00:42.622 --> 00:00:44.580
And push notifications
is one of the mechanisms

00:00:44.580 --> 00:00:47.169
a lot of developers use in
order to engage your users.

00:00:47.169 --> 00:00:49.210
When it comes a push
notification delivery rates.

00:00:49.210 --> 00:00:51.295
Some of these patterns
in India actually

00:00:51.295 --> 00:00:52.920
affect the notification
delivery rates.

00:00:52.920 --> 00:00:54.570
One of them is
the user behavior.

00:00:54.570 --> 00:00:57.720
Until recently, data plans
were very expensive for us

00:00:57.720 --> 00:00:58.500
in the region.

00:00:58.500 --> 00:01:01.320
And people had tended to
have the habit of turning off

00:01:01.320 --> 00:01:04.100
mobile data when they
are not using internet.

00:01:04.100 --> 00:01:05.600
So when they go out
of a Wi-Fi zone,

00:01:05.600 --> 00:01:07.680
they just turned
their mobile data off.

00:01:07.680 --> 00:01:10.080
And that changes the
behavior of something

00:01:10.080 --> 00:01:13.285
like a time to live parameter
for your push notification.

00:01:13.285 --> 00:01:15.160
If you have a really
short one and the person

00:01:15.160 --> 00:01:16.980
has turned the data
off during that period,

00:01:16.980 --> 00:01:19.410
your notification
never gets delivered.

00:01:19.410 --> 00:01:21.510
Recently we had new
carriers who have come in

00:01:21.510 --> 00:01:25.380
and have reduced the
data cost drastically.

00:01:25.380 --> 00:01:27.450
And now this user behavior
is slowly changing.

00:01:27.450 --> 00:01:31.240
But it hasn't changed enough
for you to ignore this change.

00:01:31.240 --> 00:01:34.390
Secondly, we have a lot of
devices with custom behavior

00:01:34.390 --> 00:01:38.160
or custom Android bills,
where your notification--

00:01:38.160 --> 00:01:39.910
and because of
battery optimization,

00:01:39.910 --> 00:01:41.940
they kill off these
notifications services.

00:01:41.940 --> 00:01:44.640
They sometimes force
close apps, which

00:01:44.640 --> 00:01:47.700
avoids the app from ever getting
the notification delivered

00:01:47.700 --> 00:01:48.510
to it.

00:01:48.510 --> 00:01:50.336
So that's another problem.

00:01:50.336 --> 00:01:52.620
Your time to live
parameter, if you actually

00:01:52.620 --> 00:01:56.810
increase it by, say, from
four to eight hours, you

00:01:56.810 --> 00:01:59.860
see a drastic improvement in--

00:01:59.860 --> 00:02:02.610
or a large improvement
in notification delivery

00:02:02.610 --> 00:02:04.950
because you might
end up overlapping

00:02:04.950 --> 00:02:07.890
with a Wi-Fi usage time.

00:02:07.890 --> 00:02:10.370
So things like that make
it very interesting.

00:02:10.370 --> 00:02:14.590
Like in any other region,
notification frequency also--

00:02:14.590 --> 00:02:17.130
the number of notifications
that are sent in to the users--

00:02:17.130 --> 00:02:18.270
also affect.

00:02:18.270 --> 00:02:21.810
And people do get irritated
and turn off notifications

00:02:21.810 --> 00:02:23.160
if you do it too many times.

00:02:23.160 --> 00:02:25.076
So using collapsible
keys and things like that

00:02:25.076 --> 00:02:27.350
are very important here.

00:02:27.350 --> 00:02:30.730
Now I want to talk about three
design patterns that developers

00:02:30.730 --> 00:02:34.120
have actually tried out
for various use cases

00:02:34.120 --> 00:02:35.830
to improve
notification delivery.

00:02:35.830 --> 00:02:37.390
One is bucketing
of notifications.

00:02:37.390 --> 00:02:40.510
This gives you a better
understanding of your user base

00:02:40.510 --> 00:02:44.110
and how people are-- how
each of these buckets

00:02:44.110 --> 00:02:45.550
actually work better for you.

00:02:45.550 --> 00:02:46.550
Let me explain that.

00:02:46.550 --> 00:02:49.030
The mechanism that
they've developed here

00:02:49.030 --> 00:02:52.130
is that there's a job that--
a periodic job-- that runs,

00:02:52.130 --> 00:02:55.010
refreshes the FCM token,
sends it to the server.

00:02:55.010 --> 00:02:56.590
And when the server
gets the data,

00:02:56.590 --> 00:02:59.590
it actually keeps a user
FCM token mapping along

00:02:59.590 --> 00:03:01.490
with the recency of update.

00:03:01.490 --> 00:03:03.670
It'll also take the time
stamp of the update.

00:03:03.670 --> 00:03:07.030
Now when you send out a
campaign, what they would do

00:03:07.030 --> 00:03:09.490
is they would split
it based on recency.

00:03:09.490 --> 00:03:12.070
Say for example, you would
send your push notifications

00:03:12.070 --> 00:03:14.260
in the first batch
to all the tokens

00:03:14.260 --> 00:03:18.730
that were updated in the
last say, seven days.

00:03:18.730 --> 00:03:22.780
Then the next batch would be
to update from 7 to 31 days,

00:03:22.780 --> 00:03:24.880
all the tokens that got
updated in the last--

00:03:24.880 --> 00:03:26.200
from seven to the 31 days.

00:03:26.200 --> 00:03:28.570
And third batch would
be 31 and above.

00:03:28.570 --> 00:03:31.210
What this allows is
that you can fine tune

00:03:31.210 --> 00:03:32.695
each of these buckets--

00:03:32.695 --> 00:03:34.450
the parameters for
each of these buckets--

00:03:34.450 --> 00:03:36.100
to improve
notification delivery.

00:03:36.100 --> 00:03:38.380
You also have a better
understanding of who

00:03:38.380 --> 00:03:39.430
your users--

00:03:39.430 --> 00:03:41.740
which users would
get the notification

00:03:41.740 --> 00:03:44.200
and might react to your
notification better.

00:03:44.200 --> 00:03:47.500
And your-- and because you have
a lot of tokens, which are not

00:03:47.500 --> 00:03:52.960
updated frequently, or the users
never send that update cycle,

00:03:52.960 --> 00:03:55.990
you don't end up calculating
that into your notification

00:03:55.990 --> 00:03:59.350
delivery and miscalculating
the effectiveness of push

00:03:59.350 --> 00:04:00.460
notifications.

00:04:00.460 --> 00:04:02.110
The second one is
basically where

00:04:02.110 --> 00:04:04.650
you have, again, a
[INAUDIBLE] job that comes in.

00:04:04.650 --> 00:04:07.360
It checks whether
a notification was

00:04:07.360 --> 00:04:12.730
delivered to the device
from the last run or not.

00:04:12.730 --> 00:04:16.980
If not, it'll go to a REST
service, pull the notification,

00:04:16.980 --> 00:04:18.292
and then display to the user.

00:04:18.292 --> 00:04:19.500
This is fairly simple to use.

00:04:19.500 --> 00:04:22.830
But you have to ensure that
this does not excessively wake

00:04:22.830 --> 00:04:23.770
up the device.

00:04:23.770 --> 00:04:26.610
So this is not the most
effective or efficient way

00:04:26.610 --> 00:04:27.310
of doing things.

00:04:27.310 --> 00:04:28.464
But still works for it.

00:04:28.464 --> 00:04:29.880
The last one I
want to call out is

00:04:29.880 --> 00:04:32.120
data messages to the schedule.

00:04:32.120 --> 00:04:34.680
In a case where you want
to send a message like,

00:04:34.680 --> 00:04:37.101
hey, there's a sale that's
going to start at 12:00.

00:04:37.101 --> 00:04:39.600
And you want to show the message
to [INAUDIBLE] for next six

00:04:39.600 --> 00:04:43.790
hours, you have 20% off on this
device, or on this service.

00:04:43.790 --> 00:04:45.605
Where, instead of
sending it on 12:00

00:04:45.605 --> 00:04:47.730
and hoping that most of
the users would receive it,

00:04:47.730 --> 00:04:50.310
what they will do is they
will send this message

00:04:50.310 --> 00:04:53.580
maybe two days before with
the last time to live.

00:04:53.580 --> 00:04:55.770
And they-- as a data message.

00:04:55.770 --> 00:04:56.970
So the app would receive it.

00:04:56.970 --> 00:05:00.210
Then based on the schedule
that's within the data message,

00:05:00.210 --> 00:05:01.820
they would schedule
a job to come up

00:05:01.820 --> 00:05:03.990
at exactly the right time
and display the message

00:05:03.990 --> 00:05:07.380
to the user, which means at
12:00 a lot more of your users

00:05:07.380 --> 00:05:08.641
will start getting that data.

00:05:08.641 --> 00:05:09.140
[BEEPING]

00:05:09.140 --> 00:05:11.456
SPEAKER 1: That
would be times up.

00:05:11.456 --> 00:05:13.590
[GONG]

00:05:13.590 --> 00:05:14.710
All right.

00:05:14.710 --> 00:05:15.520
Thank you.

00:05:15.520 --> 00:05:17.670
[MUSIC PLAYING]

