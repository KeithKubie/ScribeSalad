WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:07.170
[MUSIC PLAYING]

00:00:07.170 --> 00:00:08.890
MALE SPEAKER: Shanghai
GDG is a very

00:00:08.890 --> 00:00:10.960
interesting developer community.

00:00:10.960 --> 00:00:11.800
FEMALE SPEAKER: I'm
glad somebody

00:00:11.800 --> 00:00:13.290
has asked this question.

00:00:13.290 --> 00:00:14.492
MALE SPEAKER: This is where
the magic happens.

00:00:14.492 --> 00:00:15.702
FEMALE SPEAKER: This is
primarily a question and

00:00:15.702 --> 00:00:16.050
answer show.

00:00:16.050 --> 00:00:18.530
So if any of you out there would
like to ask questions--

00:00:23.198 --> 00:00:23.670
JJ BEHRENS: Howdy.

00:00:23.670 --> 00:00:25.250
Welcome to Google
Developers Live.

00:00:25.250 --> 00:00:27.630
Today we're talking
about YouTube API.

00:00:27.630 --> 00:00:32.900
And we have Jeffrey Posnick
with us over in Hangouts.

00:00:32.900 --> 00:00:33.810
JEFFREY POSNICK: Hi, guys.

00:00:33.810 --> 00:00:34.220
JJ BEHRENS: Howdy.

00:00:34.220 --> 00:00:37.940
And we have Danny Hermes from
the Google App Engine team.

00:00:37.940 --> 00:00:39.180
Give it up, Danny.

00:00:39.180 --> 00:00:41.520
Aw!

00:00:41.520 --> 00:00:45.770
So today we're going to talk
about Party Playlist Picker.

00:00:45.770 --> 00:00:49.860
And when I first came to Google,
before Google+ was

00:00:49.860 --> 00:00:53.200
launched, we wanted to build
something that integrated the

00:00:53.200 --> 00:00:55.580
YouTube APIs with Google+.

00:00:55.580 --> 00:00:59.550
And so Jeffrey Posnick and I
decided that we should build

00:00:59.550 --> 00:01:03.460
something cool, a nice mashup
on Google App Engine in

00:01:03.460 --> 00:01:07.580
Python, mashing up the YouTube
APIs with the Google+ APIs.

00:01:07.580 --> 00:01:08.810
DANNY HERMES: All the things
I like to hear.

00:01:08.810 --> 00:01:10.960
JJ BEHRENS: I know, isn't it?

00:01:10.960 --> 00:01:12.300
Yeah, it was pretty sweet.

00:01:12.300 --> 00:01:15.320
And I'm definitely in my
comfort zone in Python.

00:01:15.320 --> 00:01:16.006
DANNY HERMES: Sure.

00:01:16.006 --> 00:01:17.370
JEFFREY POSNICK: It
was a mega mashup.

00:01:17.370 --> 00:01:18.450
JJ BEHRENS: Mega mashup.

00:01:18.450 --> 00:01:21.750
And then it's like I kept on
going to all these different

00:01:21.750 --> 00:01:22.130
hackathons.

00:01:22.130 --> 00:01:25.120
And I was like, oh,
HTML5 hackathon?

00:01:25.120 --> 00:01:26.550
I could do that.

00:01:26.550 --> 00:01:28.760
So yeah, we had a great
time coding it.

00:01:28.760 --> 00:01:31.100
And so today we're going
to talk about the app.

00:01:31.100 --> 00:01:33.310
We're going to talk a little bit
about what it does, how it

00:01:33.310 --> 00:01:36.270
does it, how it works with
Google App Engine.

00:01:36.270 --> 00:01:37.730
Danny's going to tell
us we suck.

00:01:37.730 --> 00:01:39.180
DANNY HERMES: That's
why I'm here.

00:01:39.180 --> 00:01:41.060
JJ BEHRENS: He was like, dude,
what are you doing?

00:01:41.060 --> 00:01:42.850
There's so many better
ways to do that.

00:01:42.850 --> 00:01:45.220
And then we're going to
peek at the code.

00:01:45.220 --> 00:01:48.130
And so it's going to
be a good time.

00:01:48.130 --> 00:01:50.680
So, Jeffrey, you want to
start us off, show us

00:01:50.680 --> 00:01:52.720
what the app can do?

00:01:52.720 --> 00:01:55.394
JEFFREY POSNICK:
Sure thing, OK.

00:01:55.394 --> 00:01:59.300
First of all, what I wanted to
make clear is that what JJ and

00:01:59.300 --> 00:02:04.490
I worked on is an open-source
project, and the code is

00:02:04.490 --> 00:02:06.300
freely available for
folks to use.

00:02:06.300 --> 00:02:10.610
We have a link to the source
code on a blog post that we

00:02:10.610 --> 00:02:12.325
have up announcing Party
Playlist Picker.

00:02:12.325 --> 00:02:15.170
So if you go to
apiblog.youtube.com,

00:02:15.170 --> 00:02:16.470
you can find that.

00:02:16.470 --> 00:02:20.240
And I also wanted to make it
clear that this project is

00:02:20.240 --> 00:02:25.500
something that's separate from
the official YouTube Google+

00:02:25.500 --> 00:02:30.820
Hangout app, and that Hangout
app has some similar features.

00:02:30.820 --> 00:02:33.460
But what we're talking about
today and what we're showing

00:02:33.460 --> 00:02:35.610
off is something completely
separate.

00:02:35.610 --> 00:02:37.180
So please don't confuse
the two.

00:02:37.180 --> 00:02:41.070
JJ BEHRENS: And I would say we
came up with the idea first.

00:02:41.070 --> 00:02:43.600
JEFFREY POSNICK: I am
not raising that

00:02:43.600 --> 00:02:45.520
point, but fair enough.

00:02:45.520 --> 00:02:48.680
Yeah, and as JJ mentioned, we
had a really good time coding

00:02:48.680 --> 00:02:52.470
this and did a lot of stuff
via collaborative--

00:02:52.470 --> 00:02:57.370
I guess, actually VNC pair
programming coast to coast.

00:02:57.370 --> 00:02:57.630
JJ BEHRENS: Yeah.

00:02:57.630 --> 00:02:59.650
That was kind of crazy.

00:02:59.650 --> 00:03:00.550
You're in New York.

00:03:00.550 --> 00:03:01.870
I'm in San Francisco.

00:03:01.870 --> 00:03:04.110
We were working two
hours a day coding

00:03:04.110 --> 00:03:06.950
this in our 20% time.

00:03:06.950 --> 00:03:09.390
And we didn't do any
of this in person.

00:03:09.390 --> 00:03:11.650
We did this completely
over Google Hangouts

00:03:11.650 --> 00:03:14.190
with stuff like that.

00:03:14.190 --> 00:03:16.110
At some point, we were
doing screen sharing.

00:03:16.110 --> 00:03:18.780
At some point, I was logged in
to your machine, and we were

00:03:18.780 --> 00:03:19.840
editing at the same--

00:03:19.840 --> 00:03:22.430
pair programming remotely
worked out really well.

00:03:22.430 --> 00:03:22.690
DANNY HERMES: Wow.

00:03:22.690 --> 00:03:24.130
JEFFREY POSNICK: Yeah, you were
sending emails for me.

00:03:24.130 --> 00:03:25.490
You were taking care
of my work while I

00:03:25.490 --> 00:03:26.180
wasn't paying attention.

00:03:26.180 --> 00:03:28.340
And I appreciated that.

00:03:28.340 --> 00:03:29.360
JJ BEHRENS: Yeah, this
is not true.

00:03:29.360 --> 00:03:30.560
JEFFREY POSNICK: That
being said, this is

00:03:30.560 --> 00:03:31.650
the fruits of labor.

00:03:31.650 --> 00:03:34.340
So hopefully, you guys can
see the screen that I'm

00:03:34.340 --> 00:03:36.350
sharing right now.

00:03:36.350 --> 00:03:40.470
Both JJ and I are engineers,
I guess, first and

00:03:40.470 --> 00:03:42.180
UI designers second.

00:03:42.180 --> 00:03:46.080
So please pardon the spartan
user interface.

00:03:46.080 --> 00:03:47.940
JJ BEHRENS: What are you trying
to say about my design

00:03:47.940 --> 00:03:48.820
skills, Jeffrey?

00:03:48.820 --> 00:03:49.532
DANNY HERMES: I've seen them.

00:03:49.532 --> 00:03:50.180
I'll agree.

00:03:50.180 --> 00:03:52.330
JEFFREY POSNICK: I'm trying to
say Helvetica is classic.

00:03:52.330 --> 00:03:55.500
There's nothing wrong
with that.

00:03:55.500 --> 00:04:00.890
So let's show off the way the
actual app goes and then run

00:04:00.890 --> 00:04:01.640
through some of features.

00:04:01.640 --> 00:04:03.810
Then we'll talk more about how
we built it, after folks have

00:04:03.810 --> 00:04:05.890
had a chance to try it out.

00:04:05.890 --> 00:04:12.090
So as all good YouTube API and
Google API integrations go,

00:04:12.090 --> 00:04:16.350
this starts with OAuth
2 login flow.

00:04:16.350 --> 00:04:19.059
I think the way I'm sharing my
screen, you might have a

00:04:19.059 --> 00:04:21.500
little trouble seeing the actual
window that's going to

00:04:21.500 --> 00:04:23.280
appear when click on Login.

00:04:23.280 --> 00:04:24.800
Or no, OK.

00:04:24.800 --> 00:04:25.460
You can see that.

00:04:25.460 --> 00:04:28.010
So I'm going to log in.

00:04:28.010 --> 00:04:30.680
That's my account.

00:04:30.680 --> 00:04:34.260
And I'm going to enter my
two-step verification code as

00:04:34.260 --> 00:04:35.750
all people should do.

00:04:35.750 --> 00:04:37.035
I'm signed up for that.

00:04:41.090 --> 00:04:45.190
And I'm going to be asked
whether I would like to grant

00:04:45.190 --> 00:04:48.520
access to Party Playlist Picker
to manage my YouTube

00:04:48.520 --> 00:04:49.910
account and know who
I am on Google.

00:04:49.910 --> 00:04:54.780
So this is an example of using
two OAuth 2.0 scopes at once

00:04:54.780 --> 00:04:59.220
to access my YouTube API
data and access some

00:04:59.220 --> 00:05:01.920
Google+ data as well.

00:05:01.920 --> 00:05:04.182
And I do trust Party Playlist
Picker, so I

00:05:04.182 --> 00:05:06.200
will click Allow Access.

00:05:06.200 --> 00:05:10.460
And after this login step, I'll
be redirected back to

00:05:10.460 --> 00:05:14.220
this, again, somewhat spartan
but functional screen.

00:05:14.220 --> 00:05:18.100
And at this point, I see a list
of all the playlists.

00:05:18.100 --> 00:05:21.130
And these are real YouTube
playlists on the back end.

00:05:21.130 --> 00:05:23.350
These are playlists
I've created using

00:05:23.350 --> 00:05:24.300
Party Playlist Picker.

00:05:24.300 --> 00:05:26.730
So a little bit earlier, I
created My New Playlist.

00:05:26.730 --> 00:05:29.590
But I'm going to walk you
through the whole flow of

00:05:29.590 --> 00:05:32.540
creating a new playlist
from scratch.

00:05:32.540 --> 00:05:34.770
So in this case, enter Name.

00:05:39.410 --> 00:05:44.435
Developers Live, So I'm going to
Create a new playlist, and

00:05:44.435 --> 00:05:48.160
that's the first step in the
flow of using the app.

00:05:48.160 --> 00:05:50.150
And I'm taken to this screen.

00:05:50.150 --> 00:05:53.640
I am the only Partygoer right
now, which is kind of the

00:05:53.640 --> 00:05:54.460
story my life.

00:05:54.460 --> 00:05:58.670
But I'm going to make it look a
little bit more interesting.

00:05:58.670 --> 00:06:02.890
I'll invite JJ and Danny to
collaboratively edit this

00:06:02.890 --> 00:06:05.510
playlist along with me.

00:06:05.510 --> 00:06:09.210
So we're just making it so
the standard Google+

00:06:09.210 --> 00:06:10.740
Share button here.

00:06:10.740 --> 00:06:13.980
And I'm going to--

00:06:13.980 --> 00:06:14.470
"Hey, guys.

00:06:14.470 --> 00:06:19.730
Want to join the party?" So the
idea might be I'm going to

00:06:19.730 --> 00:06:22.670
have some party or some sort of
gathering later and have a

00:06:22.670 --> 00:06:23.810
bunch of people attending.

00:06:23.810 --> 00:06:27.260
And I'd like people to be able
to create a playlist of videos

00:06:27.260 --> 00:06:29.420
that they want to show
during the party.

00:06:29.420 --> 00:06:30.870
That's the basic idea.

00:06:30.870 --> 00:06:34.960
So I'm going to add JJ.

00:06:34.960 --> 00:06:38.120
I'm going to Daniel Hermes.

00:06:38.120 --> 00:06:40.280
And I'm going to click Share.

00:06:40.280 --> 00:06:43.250
So what this is doing is
actually creating a post in

00:06:43.250 --> 00:06:45.430
their Google+ streams.

00:06:45.430 --> 00:06:50.380
And it has link-back to a unique
URL that allows them to

00:06:50.380 --> 00:06:53.300
come in and edit that
shared playlist.

00:06:53.300 --> 00:06:57.200
So that's the type of ACL that
we're using in this case.

00:06:57.200 --> 00:07:00.930
Anybody who has that URL
could come in and

00:07:00.930 --> 00:07:02.130
edit that shared playlist.

00:07:02.130 --> 00:07:06.340
So hopefully, JJ and Danny
saw that and will

00:07:06.340 --> 00:07:07.420
get a chance to join.

00:07:07.420 --> 00:07:10.260
In the meantime, I'm going to
start adding some videos.

00:07:10.260 --> 00:07:12.820
So we have a nice little
search box there.

00:07:12.820 --> 00:07:17.130
And this all is making YouTube
API calls on the back end

00:07:17.130 --> 00:07:20.950
using the standard YouTube
API Python library.

00:07:20.950 --> 00:07:25.090
So I see Shannon and JJ
Behrens just joined.

00:07:25.090 --> 00:07:26.680
If I want to know a little bit
more about him, I think I can

00:07:26.680 --> 00:07:29.990
click on that and go to
his Google+ profile.

00:07:29.990 --> 00:07:32.510
So we're integrated with Google+
in terms of getting

00:07:32.510 --> 00:07:36.390
profile information
and also sharing.

00:07:36.390 --> 00:07:38.380
That's our vector for
sharing things.

00:07:38.380 --> 00:07:39.740
So I'm going to add a
couple of videos.

00:07:39.740 --> 00:07:42.390
I always like videos
that have me in the

00:07:42.390 --> 00:07:44.650
thumbnail, as that one does.

00:07:44.650 --> 00:07:45.490
So I'm going to add that.

00:07:45.490 --> 00:07:51.110
We have a little bit a jQuery
UI, or maybe that's just

00:07:51.110 --> 00:07:54.550
standard jQuery magic there
for doing some of those

00:07:54.550 --> 00:07:56.130
transitions.

00:07:56.130 --> 00:08:00.840
And sometimes you might not be
quite as familiar with some of

00:08:00.840 --> 00:08:02.630
these videos that show up
in the search results.

00:08:02.630 --> 00:08:06.740
So we have a way of previewing
the video right inline by

00:08:06.740 --> 00:08:08.200
clicking on the Play button.

00:08:08.200 --> 00:08:12.655
This uses the standard
YouTube iFrame embed.

00:08:12.655 --> 00:08:15.150
It just gives you an example
of what kind of--

00:08:15.150 --> 00:08:15.910
ooh!

00:08:15.910 --> 00:08:17.520
Oh no!

00:08:17.520 --> 00:08:20.200
So you might have just
missed that.

00:08:20.200 --> 00:08:23.430
But JJ just added a video
to the playlist.

00:08:23.430 --> 00:08:26.830
JJ is now actually in
the Dart world.

00:08:26.830 --> 00:08:28.290
He's transitioned
off of YouTube.

00:08:28.290 --> 00:08:30.310
So I think he's competing with
me a little bit and tying to

00:08:30.310 --> 00:08:31.310
add some Dart videos.

00:08:31.310 --> 00:08:33.679
And there's another one.

00:08:33.679 --> 00:08:36.110
So I'm going to say, all
right, that's fine.

00:08:36.110 --> 00:08:37.390
I'm going to actually
be generous.

00:08:37.390 --> 00:08:40.320
I'm going to move JJ's Dart
video to the top of the

00:08:40.320 --> 00:08:42.620
playlist here because I do want
to see the "Introduction

00:08:42.620 --> 00:08:43.952
to Dart."

00:08:43.952 --> 00:08:45.950
DANNY HERMES: What kind of party
is this with no music?

00:08:45.950 --> 00:08:46.510
JJ BEHRENS: I know.

00:08:46.510 --> 00:08:47.220
We're getting there.

00:08:47.220 --> 00:08:48.860
We're getting there.

00:08:48.860 --> 00:08:50.200
JEFFREY POSNICK: Yeah.

00:08:50.200 --> 00:08:52.790
And we want to be careful about
what we're broadcasting

00:08:52.790 --> 00:08:56.260
over the Hangout also.

00:08:56.260 --> 00:09:00.780
I think that Seth is going to
be fine with us showing him

00:09:00.780 --> 00:09:02.210
talking about Dart
in the Hangout

00:09:02.210 --> 00:09:03.260
right now, for instance.

00:09:03.260 --> 00:09:06.570
So I don't anticipate too much
of a problem with that.

00:09:06.570 --> 00:09:06.960
So OK.

00:09:06.960 --> 00:09:09.860
So this gives you an idea of
how people collaboratively

00:09:09.860 --> 00:09:10.580
edit playlists.

00:09:10.580 --> 00:09:14.800
And if you've noticed, what
happened is that when JJ added

00:09:14.800 --> 00:09:17.730
a video to the playlist, without
my page having to

00:09:17.730 --> 00:09:20.950
refresh or anything, it just
seamlessly appeared in the

00:09:20.950 --> 00:09:22.900
list of the videos
that are there.

00:09:22.900 --> 00:09:26.150
So we're actually using the
channels they've got-- which

00:09:26.150 --> 00:09:27.880
Danny's going to talk a little
bit about later--

00:09:27.880 --> 00:09:34.050
to open a connection to the
server and to just have the

00:09:34.050 --> 00:09:37.790
server effectively push those
updates down to us.

00:09:37.790 --> 00:09:42.170
And we're doing something kind
of nifty with the HTML that we

00:09:42.170 --> 00:09:45.140
get pushed from the server
and doing a diff using a

00:09:45.140 --> 00:09:49.100
JavaScript diff library and
trying to identify what the

00:09:49.100 --> 00:09:50.390
new videos are.

00:09:50.390 --> 00:09:53.950
So we're not getting the
deltas from the server.

00:09:53.950 --> 00:09:57.380
We're actually getting that
whole chunk of HTML compared

00:09:57.380 --> 00:09:59.460
to our local chunk of HTML.

00:09:59.460 --> 00:10:02.830
And anything that the diff
algorithm tells us is new, we

00:10:02.830 --> 00:10:04.880
animate Showing.

00:10:04.880 --> 00:10:06.820
JJ BEHRENS: I like the
diff functionality.

00:10:06.820 --> 00:10:09.900
Did you also show the
drag-and-drop functionality?

00:10:09.900 --> 00:10:11.300
JEFFREY POSNICK: Yeah, so we
have drag and drop for

00:10:11.300 --> 00:10:11.870
reordering.

00:10:11.870 --> 00:10:13.670
We also have drag and
drop for just adding

00:10:13.670 --> 00:10:16.470
things to the playlist.

00:10:16.470 --> 00:10:18.410
And that's going to end up--

00:10:18.410 --> 00:10:20.862
I think somebody might have
removed something from the

00:10:20.862 --> 00:10:21.940
playlist in the meantime.

00:10:21.940 --> 00:10:23.200
JJ BEHRENS: Yeah, I did.

00:10:23.200 --> 00:10:24.530
JEFFREY POSNICK: Yeah, so can
see the things getting

00:10:24.530 --> 00:10:26.750
updated as we go.

00:10:26.750 --> 00:10:29.800
So we have a nice little
playlist now.

00:10:29.800 --> 00:10:32.750
The type of parties that I
throw, we normally just

00:10:32.750 --> 00:10:35.740
discuss the YouTube API.

00:10:35.740 --> 00:10:39.050
I don't know how the audience is
going to necessarily react

00:10:39.050 --> 00:10:40.290
to the Dart video at the end.

00:10:40.290 --> 00:10:44.490
But we have about an
hour plus of the

00:10:44.490 --> 00:10:45.870
YouTube API concept there.

00:10:45.870 --> 00:10:48.810
So I think people are probably
going to be zonked out at that

00:10:48.810 --> 00:10:51.760
point and not really notice
that we're sneaking in 50

00:10:51.760 --> 00:10:55.410
minutes of JJ talking about
Dart in Glasgow.

00:10:55.410 --> 00:10:58.800
JJ BEHRENS: And now we're
going to talk about AS3!

00:10:58.800 --> 00:11:00.150
JEFFREY POSNICK: Ooh!

00:11:00.150 --> 00:11:01.740
That's always interesting.

00:11:01.740 --> 00:11:06.890
So once the playlist is fully
assembled, you could view the

00:11:06.890 --> 00:11:07.630
playlist on YouTube.

00:11:07.630 --> 00:11:09.930
You could see those videos
are now in a

00:11:09.930 --> 00:11:10.880
real YouTube playlist.

00:11:10.880 --> 00:11:14.050
You could play them from here.

00:11:14.050 --> 00:11:14.970
You could share the playlist.

00:11:14.970 --> 00:11:16.650
You could get the embed code
from the playlist straight

00:11:16.650 --> 00:11:17.580
from YouTube.

00:11:17.580 --> 00:11:20.130
So you're ready for
your party.

00:11:20.130 --> 00:11:23.670
And that's the basic idea.

00:11:23.670 --> 00:11:25.060
JJ BEHRENS: You could also
watch individual

00:11:25.060 --> 00:11:27.280
videos on the site.

00:11:27.280 --> 00:11:29.360
So that was a nice little
light-box effect

00:11:29.360 --> 00:11:30.435
that you did for that.

00:11:30.435 --> 00:11:33.345
JEFFREY POSNICK: Yep, just
right over there.

00:11:33.345 --> 00:11:34.800
JJ BEHRENS: Yep.

00:11:34.800 --> 00:11:35.580
That's pretty cool.

00:11:35.580 --> 00:11:38.990
JEFFREY POSNICK: So if you're
looking for examples of doing

00:11:38.990 --> 00:11:41.610
that exact thing, for instance,
where you have a

00:11:41.610 --> 00:11:42.560
thumbnail for videos--

00:11:42.560 --> 00:11:46.320
So this is just a thumbnail
and has a little bit of

00:11:46.320 --> 00:11:49.870
JavaScript and CSS to put that
Play button over there.

00:11:49.870 --> 00:11:52.190
If you're looking for an example
of how to do that,

00:11:52.190 --> 00:11:53.700
feel free to take our code.

00:11:53.700 --> 00:11:55.180
JJ BEHRENS: I'm going to go
offline to show you what it

00:11:55.180 --> 00:11:57.670
looks like when someone
has edited it in the

00:11:57.670 --> 00:11:59.460
past but goes offline.

00:11:59.460 --> 00:12:02.400
So we've got state
going on there.

00:12:02.400 --> 00:12:02.520
JEFFREY POSNICK: Yep.

00:12:02.520 --> 00:12:04.260
So you keep track of who's
currently editing and

00:12:04.260 --> 00:12:05.550
everybody who's edited
in the past.

00:12:08.230 --> 00:12:11.000
Yeah, JJ, anything
else major about

00:12:11.000 --> 00:12:13.510
the app that I neglected?

00:12:13.510 --> 00:12:15.170
I guess the Manage
Playlists page.

00:12:15.170 --> 00:12:17.870
That's just having the initial
page over there where we could

00:12:17.870 --> 00:12:19.490
go and choose different
playlists.

00:12:19.490 --> 00:12:20.330
JJ BEHRENS: No.

00:12:20.330 --> 00:12:21.776
I think you got it.

00:12:21.776 --> 00:12:22.590
Yeah.

00:12:22.590 --> 00:12:22.880
JEFFREY POSNICK: Cool.

00:12:22.880 --> 00:12:24.310
JJ BEHRENS: That's cool.

00:12:24.310 --> 00:12:24.590
JEFFREY POSNICK: Yeah.

00:12:24.590 --> 00:12:26.020
So as we mentioned, this
is built on top

00:12:26.020 --> 00:12:27.280
of Python App Engine.

00:12:27.280 --> 00:12:31.570
And we have Danny in the studio,
who is very much an

00:12:31.570 --> 00:12:32.325
App Engine expert.

00:12:32.325 --> 00:12:35.820
And I think you wanted to talk a
little bit about some of the

00:12:35.820 --> 00:12:39.710
sort of technology that we used
and some more general

00:12:39.710 --> 00:12:42.400
Python App Engine technology and
how you can integrate with

00:12:42.400 --> 00:12:43.305
other Google APIs.

00:12:43.305 --> 00:12:43.660
JJ BEHRENS: Yeah.

00:12:43.660 --> 00:12:46.910
So why don't we have
a talk with Danny.

00:12:46.910 --> 00:12:48.810
And Danny can tell us where
we're doing it wrong.

00:12:48.810 --> 00:12:50.640
And then we'll show some code.

00:12:50.640 --> 00:12:54.900
DANNY HERMES: So in addition
to being on the App Engine

00:12:54.900 --> 00:12:57.670
team, I've also worked
a lot on the

00:12:57.670 --> 00:12:59.630
Google API client libraries.

00:12:59.630 --> 00:13:01.740
When we're talking about
Python, there are two

00:13:01.740 --> 00:13:04.010
libraries that are
the main ones.

00:13:04.010 --> 00:13:05.950
We have the GData
Python client.

00:13:05.950 --> 00:13:09.340
And we have the Google
API Python client.

00:13:09.340 --> 00:13:12.550
And these libraries are actually
targeting different

00:13:12.550 --> 00:13:13.580
families of APIs.

00:13:13.580 --> 00:13:18.120
So Google APIs that are a bit
older, including the YouTube

00:13:18.120 --> 00:13:21.870
API, were based on a GData
standard, which was a Google

00:13:21.870 --> 00:13:22.330
Data standard.

00:13:22.330 --> 00:13:23.180
JJ BEHRENS: We're keeping
it old school.

00:13:23.180 --> 00:13:25.260
DANNY HERMES: We're keeping
it old school.

00:13:25.260 --> 00:13:29.790
And this newer library targets
some newer discovery-based

00:13:29.790 --> 00:13:33.350
APIs that Google offers, APIs
that have an entire JSON

00:13:33.350 --> 00:13:37.120
discovery document that
totally explains

00:13:37.120 --> 00:13:38.300
what that API does.

00:13:38.300 --> 00:13:40.170
JJ BEHRENS: And that's what
we're switching to right now.

00:13:40.170 --> 00:13:43.440
We first announced that at
Google I/O. And so we've got

00:13:43.440 --> 00:13:45.700
some support, and we're
working on more.

00:13:45.700 --> 00:13:47.400
DANNY HERMES: Certainly.

00:13:47.400 --> 00:13:52.710
So the reason I bring up these
two libraries is because both

00:13:52.710 --> 00:13:56.200
of them are actually being
used in this application.

00:13:56.200 --> 00:13:58.860
This is one of these things
that I scolded JJ about.

00:13:58.860 --> 00:14:03.540
So OAuth 2 is a relatively
new spec, right?

00:14:03.540 --> 00:14:04.020
JJ BEHRENS: Yeah.

00:14:04.020 --> 00:14:09.750
DANNY HERMES: So we've had specs
as a moving target as we

00:14:09.750 --> 00:14:13.200
understand security and try to
refine the model better for

00:14:13.200 --> 00:14:15.450
usability for end users.

00:14:15.450 --> 00:14:19.170
So when they originally wrote
it, there was no OAuth 2

00:14:19.170 --> 00:14:21.970
support in the GData Python
Client Library.

00:14:21.970 --> 00:14:26.330
But since the YouTube API is a
GData API, they needed to use

00:14:26.330 --> 00:14:28.560
the GData API.

00:14:28.560 --> 00:14:32.116
So they do the OAuth 2 stuff
with the Google API Python

00:14:32.116 --> 00:14:36.270
client and the actual
API calls with the

00:14:36.270 --> 00:14:37.150
GData Python client.

00:14:37.150 --> 00:14:39.110
JJ BEHRENS: We like
it both ways.

00:14:39.110 --> 00:14:41.390
DANNY HERMES: So a few
things I want to say.

00:14:41.390 --> 00:14:45.220
One, with the Google
API Python client,

00:14:45.220 --> 00:14:46.180
there are nice things.

00:14:46.180 --> 00:14:49.190
If you're familiar with Python,
there's a concept of a

00:14:49.190 --> 00:14:52.390
decorator, which you put above
a function or a method

00:14:52.390 --> 00:14:53.720
declaration.

00:14:53.720 --> 00:14:56.850
And it wraps the method,
essentially redefining that

00:14:56.850 --> 00:15:02.330
method, and so doing, actually
gives it more functionality.

00:15:02.330 --> 00:15:06.290
So the Google API Python
Client Library gives a

00:15:06.290 --> 00:15:09.450
decorator, which allows
you to define a

00:15:09.450 --> 00:15:11.790
simple response handler.

00:15:11.790 --> 00:15:15.240
So if your web page that you're
visiting has a Get

00:15:15.240 --> 00:15:18.220
request handler, you can
actually wrap their handler,

00:15:18.220 --> 00:15:21.590
and it'll handle all the Auth
stuff that you need to do.

00:15:21.590 --> 00:15:23.020
And you don't really have
to worry about it.

00:15:23.020 --> 00:15:23.770
JJ BEHRENS: That is a big win.

00:15:23.770 --> 00:15:26.660
That was a huge savings
in terms of

00:15:26.660 --> 00:15:27.700
making our life easier.

00:15:27.700 --> 00:15:32.030
Because all that OAuth 2 token
management stuff, it's like it

00:15:32.030 --> 00:15:33.230
took care of it for us.

00:15:33.230 --> 00:15:36.560
It automatically managed the
tokens in the datastore.

00:15:36.560 --> 00:15:38.430
And there was a little bit of
work that we had to do.

00:15:38.430 --> 00:15:41.940
But by and large, the decorator
saved our bacon.

00:15:41.940 --> 00:15:43.070
DANNY HERMES: Yup.

00:15:43.070 --> 00:15:46.820
And that decorator, I will
honestly say it's probably

00:15:46.820 --> 00:15:50.230
easier to use than the OAuth
2 support in the

00:15:50.230 --> 00:15:51.850
GData Python client.

00:15:51.850 --> 00:15:55.150
But if you're looking to
integrate a GData YouTube

00:15:55.150 --> 00:15:57.970
application, there is OAuth
2 support in that library.

00:15:57.970 --> 00:16:02.190
There was a blog post last
November, actually, from Alain

00:16:02.190 --> 00:16:05.400
Vongsouvanh on the
Google Apps team.

00:16:05.400 --> 00:16:10.750
And we'll try to provide a link
in the description of

00:16:10.750 --> 00:16:13.130
this YouTube video to
that blog post.

00:16:13.130 --> 00:16:15.990
But it describes the
general flow.

00:16:15.990 --> 00:16:18.990
You set up with a credentials
object.

00:16:18.990 --> 00:16:24.590
You get a URL to direct your
users to, to actually accept

00:16:24.590 --> 00:16:28.180
your app to have permissions to
access their data, and then

00:16:28.180 --> 00:16:31.460
they get redirected back
to your application.

00:16:31.460 --> 00:16:36.800
And from there, the actual
credentials object is either

00:16:36.800 --> 00:16:39.180
deserialized from some
datastore or maybe

00:16:39.180 --> 00:16:42.200
deserialized within memory,
depending on what type of

00:16:42.200 --> 00:16:43.560
application you're writing.

00:16:43.560 --> 00:16:46.460
And you can actually finish
the authorization flow.

00:16:46.460 --> 00:16:49.950
And a lot of the actual details
of the spec are

00:16:49.950 --> 00:16:51.810
abstracted away from
you by the library.

00:16:51.810 --> 00:16:52.400
JJ BEHRENS: Yeah.

00:16:52.400 --> 00:16:55.770
So I should just mention a
little bit more since we're a

00:16:55.770 --> 00:16:58.750
little bit down in the weeds.

00:16:58.750 --> 00:17:03.100
From a high-level perspective,
the goal is we have this

00:17:03.100 --> 00:17:06.150
playlist on YouTube, and we want
to manage the playlist

00:17:06.150 --> 00:17:08.089
via this third-party
application.

00:17:08.089 --> 00:17:11.819
And so OAuth 2 is what makes it
possible for me to use this

00:17:11.819 --> 00:17:17.510
application and manage someone
else's playlist.

00:17:17.510 --> 00:17:18.060
DANNY HERMES: Sure.

00:17:18.060 --> 00:17:22.030
And not only that, it also
allows you to retrieve video

00:17:22.030 --> 00:17:23.910
data, retrieve these
thumbnails and the

00:17:23.910 --> 00:17:26.079
descriptions, the titles,
and these other things.

00:17:26.079 --> 00:17:30.620
You're able, with the API, to
get the data that you'd expect

00:17:30.620 --> 00:17:32.640
to be able to get when you
actually go to youtube.com.

00:17:32.640 --> 00:17:35.340
JJ BEHRENS: So there's something
clever going on here

00:17:35.340 --> 00:17:37.610
that maybe you might not
have thought about.

00:17:37.610 --> 00:17:40.050
And that's that Jeffrey
was the one

00:17:40.050 --> 00:17:41.290
who created the playlist.

00:17:41.290 --> 00:17:44.810
And yet I'm using my computer
to manage his playlist.

00:17:44.810 --> 00:17:47.640
And if know the YouTube API
well enough, that is not

00:17:47.640 --> 00:17:49.230
something the YouTube
API gives you.

00:17:49.230 --> 00:17:51.470
It doesn't give you the ability
to manage other

00:17:51.470 --> 00:17:52.850
people's playlists.

00:17:52.850 --> 00:17:55.980
I bet you're wondering
how we did that.

00:17:55.980 --> 00:17:57.460
DANNY HERMES: "Clever"
is one word.

00:17:57.460 --> 00:17:59.640
"Trustworthy" may
be another word.

00:17:59.640 --> 00:18:04.150
But that's maybe all I'll
say about that.

00:18:04.150 --> 00:18:06.010
JJ BEHRENS: I should
explain it, though.

00:18:06.010 --> 00:18:08.520
The way it works is
when Jeffrey--

00:18:08.520 --> 00:18:11.630
Jeffrey logs in and gives the
application access to his

00:18:11.630 --> 00:18:14.160
OAuth 2 tokens.

00:18:14.160 --> 00:18:18.000
And then when I'm managing his
playlist, the application does

00:18:18.000 --> 00:18:20.130
things to his playlist
on my behalf.

00:18:20.130 --> 00:18:23.410
And so it is safe insofar as
the app itself is safe.

00:18:23.410 --> 00:18:25.760
And of course, you're
trusting the app.

00:18:25.760 --> 00:18:28.330
I mean, that's what OAuth 2 is
about, is saying this app is

00:18:28.330 --> 00:18:29.300
trustworthy.

00:18:29.300 --> 00:18:32.810
And so it just so happens that
I'm the one initiating actions

00:18:32.810 --> 00:18:36.190
to Jeffrey's playlist, which
is kind of a neat idea.

00:18:36.190 --> 00:18:41.830
JEFFREY POSNICK: And we are
using a unique URL to control

00:18:41.830 --> 00:18:44.760
access to folks who have access
to this, which is not

00:18:44.760 --> 00:18:46.110
necessarily the best approach.

00:18:46.110 --> 00:18:50.280
It was the most workable
approach that JJ and I found

00:18:50.280 --> 00:18:53.335
that allowed us to integrate
with Google+ the

00:18:53.335 --> 00:18:53.960
way we wanted to.

00:18:53.960 --> 00:18:54.700
DANNY HERMES: Sure.

00:18:54.700 --> 00:18:57.990
And people who are maybe
interested in a more robust

00:18:57.990 --> 00:19:03.450
approach may consider, rather
than having somebody else

00:19:03.450 --> 00:19:08.060
controlling the owner's account,
maybe having some

00:19:08.060 --> 00:19:08.990
third-party account.

00:19:08.990 --> 00:19:11.720
I don't know if the terms of
service of YouTube allow this.

00:19:11.720 --> 00:19:16.810
But it is another model rather
than having some owner have a

00:19:16.810 --> 00:19:19.910
decentralized place where
playlists are owned.

00:19:19.910 --> 00:19:22.720
But anyway, moving on from that,
I want to talk about two

00:19:22.720 --> 00:19:24.420
other App Engine features
that were used.

00:19:24.420 --> 00:19:26.130
Maybe two and a half,
let's say.

00:19:26.130 --> 00:19:31.380
The first is the Channel API,
not the Channels API, as both

00:19:31.380 --> 00:19:34.340
Jeff and JJ constantly say.

00:19:34.340 --> 00:19:36.950
But the Channel API allows
you to create

00:19:36.950 --> 00:19:39.150
channels for message passing.

00:19:39.150 --> 00:19:42.330
It's effectively a nice wrapper
that creates a one-way

00:19:42.330 --> 00:19:46.590
socket between your client that
is actually accessing the

00:19:46.590 --> 00:19:49.940
application via the web and
the application itself.

00:19:49.940 --> 00:19:52.350
JJ BEHRENS: Can we just
call this "real time"?

00:19:52.350 --> 00:19:52.550
DANNY HERMES: No.

00:19:52.550 --> 00:19:54.670
We're going to call it the
Channel API, which

00:19:54.670 --> 00:19:56.600
is the name of it.

00:19:56.600 --> 00:20:00.840
And so that unique URL that
Jeff was talking about

00:20:00.840 --> 00:20:03.210
actually gives the data
about the channel

00:20:03.210 --> 00:20:06.770
itself for the client.

00:20:06.770 --> 00:20:10.880
And so a few things that you're
able to do, so one, in

00:20:10.880 --> 00:20:13.200
order to use it-- it's
really simple--

00:20:13.200 --> 00:20:13.960
there is--

00:20:13.960 --> 00:20:16.990
in the very top of the head
section of the HTML for the

00:20:16.990 --> 00:20:20.880
page, there is a bit of
JavaScript that comes

00:20:20.880 --> 00:20:24.000
pre-loaded with the application
that handles all

00:20:24.000 --> 00:20:25.850
the code that you need
and puts it in

00:20:25.850 --> 00:20:27.820
the global name space.

00:20:27.820 --> 00:20:29.550
JJ BEHRENS: It's way simpler
than when I tried to do it

00:20:29.550 --> 00:20:31.290
myself using Erlang.

00:20:31.290 --> 00:20:32.140
I'll say that.

00:20:32.140 --> 00:20:34.000
DANNY HERMES: Yeah, I'm going
to guess anything with App

00:20:34.000 --> 00:20:37.460
Engine is probably simpler than
Erlang, but maybe not.

00:20:37.460 --> 00:20:43.160
And once you have this code
loaded, you actually open a

00:20:43.160 --> 00:20:46.880
channel between the client and
the application to pass

00:20:46.880 --> 00:20:49.820
messages and receive messages.

00:20:49.820 --> 00:20:51.950
And you just need to define
a few handlers on it.

00:20:51.950 --> 00:20:55.260
So you define a handler for it
if an error occurs, if a

00:20:55.260 --> 00:20:59.280
socket opens, if a socket
closes, and then, of course,

00:20:59.280 --> 00:21:00.980
if a message gets passed
from the application.

00:21:00.980 --> 00:21:03.340
And I mentioned it's
a one-way channel.

00:21:03.340 --> 00:21:07.530
So there's no way via this
channel to send messages back

00:21:07.530 --> 00:21:08.730
to the application.

00:21:08.730 --> 00:21:12.430
However, since it's a web
application, via Ajax, post

00:21:12.430 --> 00:21:15.420
messages, and other things, you
can still send messages to

00:21:15.420 --> 00:21:16.620
the application.

00:21:16.620 --> 00:21:17.880
And you can still--

00:21:17.880 --> 00:21:23.760
via some form of identity that
you have with your users, you

00:21:23.760 --> 00:21:28.020
can still take that identity,
and then whatever they do in

00:21:28.020 --> 00:21:31.590
that post handler send the diff
or send the full payload

00:21:31.590 --> 00:21:33.460
of that playlist back
to your users.

00:21:33.460 --> 00:21:34.760
And that's what's actually
happening.

00:21:34.760 --> 00:21:36.070
JJ BEHRENS: Yeah, so
we're using this in

00:21:36.070 --> 00:21:36.950
two different places.

00:21:36.950 --> 00:21:40.030
One is we're using this to keep
track of who's currently

00:21:40.030 --> 00:21:41.140
editing the web page.

00:21:41.140 --> 00:21:43.760
So you could see who all the
other partygoers are.

00:21:43.760 --> 00:21:46.650
And the second thing is we're
using this to show you the

00:21:46.650 --> 00:21:48.860
updates to the playlist
in real time.

00:21:48.860 --> 00:21:53.250
And I would have to say since
I've coded web stuff in

00:21:53.250 --> 00:21:59.640
everything you could imagine
from AS3 to .net, like weird

00:21:59.640 --> 00:22:04.510
stuff, this is the easiest way
that I've ever seen for doing

00:22:04.510 --> 00:22:07.560
real-time comment type stuff.

00:22:07.560 --> 00:22:10.830
It really pays off using App
Engine to just have this stuff

00:22:10.830 --> 00:22:14.240
work without having to architect
it from scratch.

00:22:14.240 --> 00:22:15.735
DANNY HERMES: I would certainly
agree with that.

00:22:15.735 --> 00:22:16.355
JJ BEHRENS: You should.

00:22:16.355 --> 00:22:18.820
You're on the App Engine team.

00:22:18.820 --> 00:22:18.900
JEFFREY POSNICK: Yes.

00:22:18.900 --> 00:22:19.970
I just want to point
one thing out.

00:22:19.970 --> 00:22:23.780
We are guilty of using it maybe
not entirely as it was

00:22:23.780 --> 00:22:27.990
intended in that we're using
it as a broadcast mechanism

00:22:27.990 --> 00:22:29.460
for a bunch of different users,

00:22:29.460 --> 00:22:30.760
potentially a lot of them.

00:22:30.760 --> 00:22:32.906
DANNY HERMES: That's certainly
how it was intended.

00:22:32.906 --> 00:22:33.660
JEFFREY POSNICK: OK.

00:22:33.660 --> 00:22:35.550
I just want to make sure
because I got into some

00:22:35.550 --> 00:22:39.280
discussions with some of the App
Engine team members, not

00:22:39.280 --> 00:22:42.750
you necessarily, but some other
folks, about wanting to

00:22:42.750 --> 00:22:46.220
have one API call to send
messages to 50 people at once.

00:22:46.220 --> 00:22:50.120
And I gathered that that was not
entirely according to spec

00:22:50.120 --> 00:22:50.850
to do that.

00:22:50.850 --> 00:22:52.120
DANNY HERMES: Yeah,
50 might be a lot.

00:22:52.120 --> 00:22:58.120
But certainly the intent is to
be able to use it, to be able

00:22:58.120 --> 00:23:01.930
to have some sense of
collaboration, like playing

00:23:01.930 --> 00:23:04.470
tic-tac-toe is the seminal
example in the documentation.

00:23:04.470 --> 00:23:06.470
JJ BEHRENS: So are you trying to
say that this is sufficient

00:23:06.470 --> 00:23:09.470
for my-sized parties,
but maybe not for

00:23:09.470 --> 00:23:10.933
Shakira-sized parties.

00:23:10.933 --> 00:23:11.720
DANNY HERMES: Maybe.

00:23:11.720 --> 00:23:14.310
Maybe we stop at Shakira.

00:23:14.310 --> 00:23:17.460
So the last one, one and a half
features of App Engine I

00:23:17.460 --> 00:23:21.690
want to talk about, I want to
give a bit of a preamble about

00:23:21.690 --> 00:23:22.490
what App Engine.

00:23:22.490 --> 00:23:25.580
So for people who don't know,
it's a platform as a service.

00:23:25.580 --> 00:23:29.200
And what this means on the
surface is that you don't

00:23:29.200 --> 00:23:33.410
actually have control of the
system running it or even a

00:23:33.410 --> 00:23:34.360
virtual machine.

00:23:34.360 --> 00:23:36.660
It's even higher level than
a virtual machine.

00:23:36.660 --> 00:23:40.200
And you upload application
code according to some

00:23:40.200 --> 00:23:43.930
specification in some libraries
that are included.

00:23:43.930 --> 00:23:46.670
And you run your code
from there.

00:23:46.670 --> 00:23:48.340
So it's like I said, it's
even higher level

00:23:48.340 --> 00:23:49.620
than a virtual machine.

00:23:49.620 --> 00:23:52.610
However there's still
a concept of memory.

00:23:52.610 --> 00:23:54.020
You still have local memory.

00:23:54.020 --> 00:23:55.630
And you still have
persistent disk.

00:23:55.630 --> 00:23:58.140
And they're not really the same
thing, RAM versus hard

00:23:58.140 --> 00:23:58.750
drive, right?

00:23:58.750 --> 00:23:59.790
JJ BEHRENS: Yep.

00:23:59.790 --> 00:24:04.570
DANNY HERMES: And so with that
in mind, I want to talk about

00:24:04.570 --> 00:24:08.900
the ways this application is
persisting data or maybe not

00:24:08.900 --> 00:24:09.980
persisting data.

00:24:09.980 --> 00:24:13.860
So some of the things like the
actual identifier for the

00:24:13.860 --> 00:24:17.420
channels to send messages, well,
you could imagine you'd

00:24:17.420 --> 00:24:19.800
have two users who don't know
anything about each other and

00:24:19.800 --> 00:24:22.510
haven't invited each other,
but they have some catchy

00:24:22.510 --> 00:24:24.570
playlist name that
they want to use.

00:24:24.570 --> 00:24:27.940
So the playlist itself is
not a global identifier.

00:24:27.940 --> 00:24:30.890
So you need to have some other
sort of global identifier.

00:24:30.890 --> 00:24:34.800
So this application uses
something called memcache.

00:24:34.800 --> 00:24:36.650
And it's exactly what
it sounds like.

00:24:36.650 --> 00:24:40.910
It sort of adheres to a memcache
spec, which is sort

00:24:40.910 --> 00:24:44.790
of agnostic of App Engine.

00:24:44.790 --> 00:24:48.880
And using memcache, you can
actually partially persist

00:24:48.880 --> 00:24:50.350
data in memory.

00:24:50.350 --> 00:24:52.820
But it doesn't actually make
it to persistent disk.

00:24:52.820 --> 00:24:55.270
And so they're able to use
memcache for things like

00:24:55.270 --> 00:25:00.320
caching the randomized token or
the randomized identifier

00:25:00.320 --> 00:25:03.360
for the channels so that, like
I said, if you have two

00:25:03.360 --> 00:25:06.500
different groups of people, two
different parties making

00:25:06.500 --> 00:25:09.510
playlists with the same name,
you don't have a collision so

00:25:09.510 --> 00:25:13.490
that they're sending the wrong
messages to the wrong clients.

00:25:13.490 --> 00:25:16.300
JJ BEHRENS: And we're also
using memcache to cache

00:25:16.300 --> 00:25:19.040
Google+ responses for very
short amounts of time.

00:25:19.040 --> 00:25:20.680
I know they wouldn't want
us to cache them for

00:25:20.680 --> 00:25:21.890
long amounts of time.

00:25:21.890 --> 00:25:24.520
But, for instance, we want to
show the user's profile

00:25:24.520 --> 00:25:26.400
picture on every single
page load.

00:25:26.400 --> 00:25:29.710
We don't want to make it a hit
to the Google+ servers every

00:25:29.710 --> 00:25:30.610
single page load.

00:25:30.610 --> 00:25:32.950
And so we cache that for very
short amounts of time.

00:25:32.950 --> 00:25:33.910
DANNY HERMES: Right.

00:25:33.910 --> 00:25:34.950
And memcache--

00:25:34.950 --> 00:25:36.720
I don't know that you guys
are doing this in your

00:25:36.720 --> 00:25:37.500
application--

00:25:37.500 --> 00:25:40.100
it does allow you to specify
when you add something the

00:25:40.100 --> 00:25:43.110
cache that you'd like to
invalidate it after a certain

00:25:43.110 --> 00:25:43.980
amount of time.

00:25:43.980 --> 00:25:47.670
Just like with RAM, it's
not guaranteed to be

00:25:47.670 --> 00:25:48.330
there all the time.

00:25:48.330 --> 00:25:50.170
That's why I say it's
not persistent.

00:25:50.170 --> 00:25:52.120
So it is something that
sort of transient.

00:25:52.120 --> 00:25:52.930
This is the word.

00:25:52.930 --> 00:25:56.750
I'm stealing this from JJ from
our discussion earlier.

00:25:56.750 --> 00:25:59.050
You can expect it to
be there maybe some

00:25:59.050 --> 00:26:00.220
portion of the time.

00:26:00.220 --> 00:26:03.220
But expecting something you put
in memcache to be there

00:26:03.220 --> 00:26:05.730
all the time is a bad way
to design applications.

00:26:05.730 --> 00:26:11.560
However, given things like many
clients accessing the

00:26:11.560 --> 00:26:15.270
same data, reading directly from
memory rather than going

00:26:15.270 --> 00:26:18.240
to some external datastore or
some external persistent

00:26:18.240 --> 00:26:21.530
memory actually reduces the
amount of I/O and can greatly

00:26:21.530 --> 00:26:24.090
reduce the amount of latency
in your responses.

00:26:24.090 --> 00:26:25.550
JJ BEHRENS: We don't like
slow apps at Google.

00:26:25.550 --> 00:26:26.640
That's just how we roll.

00:26:26.640 --> 00:26:28.780
DANNY HERMES: And so the tiny
half-feature I wanted to talk

00:26:28.780 --> 00:26:32.960
about is that they're actually,
I believe, storing

00:26:32.960 --> 00:26:35.100
credentials that they don't
even know they're doing.

00:26:35.100 --> 00:26:38.640
But the decorator itself, this
OAuth Decorator, stores

00:26:38.640 --> 00:26:42.990
credentials in the datastore
for Google App Engine.

00:26:42.990 --> 00:26:45.780
And the datastore is a
persistent datastore.

00:26:45.780 --> 00:26:48.640
And calls to the datastore take
sometimes much longer,

00:26:48.640 --> 00:26:50.920
but certainly a little bit
longer than calls to memcache.

00:26:53.700 --> 00:26:56.640
And I'm not going to say much
else, other than that

00:26:56.640 --> 00:26:58.500
datastore is a NoSQL database.

00:26:58.500 --> 00:26:59.860
You can define arbitrary
objects in it.

00:26:59.860 --> 00:27:01.490
JJ BEHRENS: The largest
NoSQL database.

00:27:01.490 --> 00:27:02.020
DANNY HERMES: Exactly.

00:27:02.020 --> 00:27:04.450
The largest NoSQL database
in the world.

00:27:04.450 --> 00:27:05.860
JJ BEHRENS: We also store
a couple other

00:27:05.860 --> 00:27:07.390
things in the datastore.

00:27:07.390 --> 00:27:11.650
We store the list of
people who have

00:27:11.650 --> 00:27:12.930
ever edited a playlist.

00:27:12.930 --> 00:27:14.590
That doesn't go away.

00:27:14.590 --> 00:27:17.060
We always remember who's
edited a playlist.

00:27:17.060 --> 00:27:23.350
We also keep track of our
internal identifier for the

00:27:23.350 --> 00:27:25.050
title for the playlist.

00:27:25.050 --> 00:27:27.560
There's actually a few different
metadata-type things

00:27:27.560 --> 00:27:30.110
that we wrap around
the playlist.

00:27:30.110 --> 00:27:32.120
DANNY HERMES: Things that can't
disappear if memcache

00:27:32.120 --> 00:27:33.710
decides to crap out on you.

00:27:33.710 --> 00:27:34.000
JJ BEHRENS: Yes, that's right.

00:27:34.000 --> 00:27:36.890
And then, a lot of the most
interesting pieces of data

00:27:36.890 --> 00:27:38.850
aren't stored in App
Engine at all.

00:27:38.850 --> 00:27:41.960
But they're actually stored in
YouTube via the YouTube API.

00:27:41.960 --> 00:27:46.700
So the playlist itself
lives in YouTube.

00:27:46.700 --> 00:27:48.910
JEFFREY POSNICK: And I really
like that model, where we

00:27:48.910 --> 00:27:51.910
don't have to worry about
keeping things in sync and

00:27:51.910 --> 00:27:53.410
what the authoritative
version is.

00:27:53.410 --> 00:27:55.820
We know that whatever's
in YouTube is the

00:27:55.820 --> 00:27:57.395
authoritative version.

00:27:57.395 --> 00:27:59.460
And that's what gets
pushed down to

00:27:59.460 --> 00:28:00.510
users who are connected.

00:28:00.510 --> 00:28:03.830
And they are obviously really
elegant algorithms for trying

00:28:03.830 --> 00:28:05.450
to do that sort of thing.

00:28:05.450 --> 00:28:07.820
We're taking more of a brute
force approach, but it seems

00:28:07.820 --> 00:28:07.960
to work for us.

00:28:07.960 --> 00:28:10.910
JJ BEHRENS: I'm all about
the brute force.

00:28:10.910 --> 00:28:13.810
That way it doesn't mess up.

00:28:13.810 --> 00:28:17.690
Jeffrey, do you have any other
comments about our storing in

00:28:17.690 --> 00:28:21.886
memcache versus Datastore
versus YouTube?

00:28:21.886 --> 00:28:24.340
JEFFREY POSNICK: Yeah,
just to build on

00:28:24.340 --> 00:28:25.880
something that Danny mentioned.

00:28:25.880 --> 00:28:29.900
I really, really liked what the
Google API Python Client

00:28:29.900 --> 00:28:33.140
Library was doing with the
decorator and automatically

00:28:33.140 --> 00:28:34.770
persisting those OAuth 2 tokens

00:28:34.770 --> 00:28:37.270
for us in the datastore.

00:28:37.270 --> 00:28:40.890
OAuth 2 kind of gets a
reputation as being something

00:28:40.890 --> 00:28:42.090
that is complicated.

00:28:42.090 --> 00:28:45.720
And I usually tell people,
if you think OAuth 2 is

00:28:45.720 --> 00:28:49.940
complicated, you never used
OAuth 1, which has

00:28:49.940 --> 00:28:52.640
its own set of issues.

00:28:52.640 --> 00:28:56.680
But the client library from
Python, in particular-- and I

00:28:56.680 --> 00:29:00.090
know that our other languages
have varying degrees of

00:29:00.090 --> 00:29:01.220
support, as well.

00:29:01.220 --> 00:29:04.820
But I really, really found it
very easy integrating with

00:29:04.820 --> 00:29:08.380
OAuth 2 in a Python App
Engine application.

00:29:08.380 --> 00:29:09.410
It couldn't have been simpler.

00:29:09.410 --> 00:29:12.005
You don't have to worry about
keeping track of even doing

00:29:12.005 --> 00:29:13.440
the refreshes.

00:29:13.440 --> 00:29:16.890
The client library handles the
token refreshes for you, which

00:29:16.890 --> 00:29:17.580
is amazing.

00:29:17.580 --> 00:29:19.840
So a really great experience.

00:29:19.840 --> 00:29:20.900
JJ BEHRENS: Yeah, I agree
with all of that.

00:29:20.900 --> 00:29:23.240
I should mention a little
bit about testing.

00:29:23.240 --> 00:29:25.550
We kind of whipped this
out as a prototype.

00:29:25.550 --> 00:29:27.990
And so we didn't actually
write test in this.

00:29:27.990 --> 00:29:29.530
We did code-review everything.

00:29:29.530 --> 00:29:31.750
Everything's well documented.

00:29:31.750 --> 00:29:34.580
Literally, we code-reviewed
everything.

00:29:34.580 --> 00:29:35.930
But we left out the testing.

00:29:35.930 --> 00:29:39.280
But some of you might have seen,
I did a tutorial for

00:29:39.280 --> 00:29:44.140
Google I/O called "Using Ruby on
Rails and YouTube APIs for

00:29:44.140 --> 00:29:47.370
Building Educational Apps." And
even though that's a Ruby

00:29:47.370 --> 00:29:50.140
talk instead of a Python talk,
one thing I really like about

00:29:50.140 --> 00:29:53.240
the talk is I explain how to
do full-on test-driven

00:29:53.240 --> 00:29:57.900
development with web APIs.

00:29:57.900 --> 00:30:00.480
How do you deal with an API
that you might not fully

00:30:00.480 --> 00:30:00.930
understand?

00:30:00.930 --> 00:30:02.830
How can you possibly
mock that out?

00:30:02.830 --> 00:30:08.630
And especially towards the end
of the video, I show how to,

00:30:08.630 --> 00:30:12.310
within a debugger, make a
request, get the response,

00:30:12.310 --> 00:30:15.030
grab it, store it away, and then
set up mocks so that the

00:30:15.030 --> 00:30:18.340
next time you do that request
from within your tests, you

00:30:18.340 --> 00:30:19.750
get the same actual,

00:30:19.750 --> 00:30:22.370
completely legitimate response.

00:30:22.370 --> 00:30:25.570
And so you could do full-on
test-driven development,

00:30:25.570 --> 00:30:31.340
making the entire request,
integration-type testing even

00:30:31.340 --> 00:30:32.440
with the web API.

00:30:32.440 --> 00:30:35.060
So I recommend that tutorial.

00:30:35.060 --> 00:30:37.220
I was in it, so, of course,
I recommend it.

00:30:37.220 --> 00:30:38.160
DANNY HERMES: Certainly.

00:30:38.160 --> 00:30:40.950
JJ BEHRENS: But I know that
Jeffrey and I, we definitely

00:30:40.950 --> 00:30:44.560
used those tricks where we were
making requests, dumping

00:30:44.560 --> 00:30:47.260
ourselves into a debugger, and
then playing around, which is

00:30:47.260 --> 00:30:48.510
a very Pythonic thing to do.

00:30:48.510 --> 00:30:51.320
You're playing around with the
data, getting a feel for it,

00:30:51.320 --> 00:30:53.960
and then writing the code that
you're going to write, but

00:30:53.960 --> 00:30:56.040
inside the debugger, and then
copying and pasting

00:30:56.040 --> 00:30:57.160
that into the code.

00:30:57.160 --> 00:30:59.890
That works really well.

00:30:59.890 --> 00:31:00.460
JEFFREY POSNICK: Cool.

00:31:00.460 --> 00:31:01.300
Yeah.

00:31:01.300 --> 00:31:03.930
JJ BEHRENS: So anything else
we could think of that we

00:31:03.930 --> 00:31:05.845
implemented in this that was
kind of interesting?

00:31:11.170 --> 00:31:11.790
JEFFREY POSNICK: I don't know.

00:31:11.790 --> 00:31:16.240
I think that it's just great
that there's a decent body of

00:31:16.240 --> 00:31:20.490
both JavaScript code using
jQuery pretty heavily and

00:31:20.490 --> 00:31:23.075
Python code for folks
to look through.

00:31:23.075 --> 00:31:24.790
It's all open source.

00:31:24.790 --> 00:31:31.170
If you see something in the app
that might be useful to

00:31:31.170 --> 00:31:33.040
your own project, feel
free to borrow.

00:31:33.040 --> 00:31:33.773
JJ BEHRENS: Yeah.

00:31:33.773 --> 00:31:34.740
All right.

00:31:34.740 --> 00:31:37.420
So why don't we take
a look at the code?

00:31:37.420 --> 00:31:40.230
And since I promised to do that,
let me do that briefly.

00:31:40.230 --> 00:31:42.480
And I'm going to go to
this Google Hangout.

00:31:42.480 --> 00:31:43.730
And I'm going to share
my screen.

00:31:46.260 --> 00:31:51.650
Desktop, Share Selected,
and OK.

00:31:51.650 --> 00:31:52.370
Great.

00:31:52.370 --> 00:31:54.190
So here's Party Playlist
Picker.

00:31:54.190 --> 00:31:55.440
This is on code.google.com/
p/party-playlist-picker.

00:31:58.620 --> 00:32:01.540
And I'm going to browse
the source.

00:32:01.540 --> 00:32:03.180
So this is in Git.

00:32:03.180 --> 00:32:06.990
We have a top-level Python
package called playlistpicker.

00:32:06.990 --> 00:32:09.190
We have a directory called
static for all

00:32:09.190 --> 00:32:10.720
of our static files.

00:32:10.720 --> 00:32:13.570
And then we have a directory
called third-party, for all of

00:32:13.570 --> 00:32:17.140
our third-party Python
libraries, such as apiclient,

00:32:17.140 --> 00:32:22.210
atom, gdata, httplib2,
oauth2client, and template.

00:32:22.210 --> 00:32:23.525
DANNY HERMES: You might
want to zoom in a bit.

00:32:23.525 --> 00:32:24.500
JJ BEHRENS: Oop, thanks.

00:32:24.500 --> 00:32:26.150
Thank you.

00:32:26.150 --> 00:32:26.996
OK?

00:32:26.996 --> 00:32:27.910
DANNY HERMES: There you go.

00:32:27.910 --> 00:32:31.670
JJ BEHRENS: So in static,
we have CSS images.

00:32:31.670 --> 00:32:36.360
And we have this big chunk
of jQuery code.

00:32:36.360 --> 00:32:40.210
And it looks like jQuery code,
a bunch of nested functions

00:32:40.210 --> 00:32:42.920
and a bunch of the
dollar sign.

00:32:42.920 --> 00:32:43.370
DANNY HERMES: Callback hell.

00:32:43.370 --> 00:32:44.040
JJ BEHRENS: Yeah, yeah.

00:32:44.040 --> 00:32:46.800
And callbacks all
over the place.

00:32:46.800 --> 00:32:49.820
And we used--

00:32:49.820 --> 00:32:51.950
what do you call the basic
framework that App

00:32:51.950 --> 00:32:53.120
Engine uses in Python?

00:32:53.120 --> 00:32:54.500
It's App Client?

00:32:54.500 --> 00:32:57.880
I forget the name of it.

00:32:57.880 --> 00:32:58.860
What is this?

00:32:58.860 --> 00:33:01.910
DANNY HERMES: App.yaml, the
application configuration?

00:33:01.910 --> 00:33:02.680
JJ BEHRENS: WebApp.

00:33:02.680 --> 00:33:03.490
I'm sorry.

00:33:03.490 --> 00:33:05.770
WebApp is the basic framework
in Python.

00:33:05.770 --> 00:33:06.360
DANNY HERMES: I see, yeah.

00:33:06.360 --> 00:33:08.410
JJ BEHRENS: So this is
a WebApp application.

00:33:08.410 --> 00:33:09.440
It's not Django.

00:33:09.440 --> 00:33:12.190
But we structured it in a way
that would be very, very

00:33:12.190 --> 00:33:15.900
familiar to Django programmers
or Ruby on Rails programmers.

00:33:15.900 --> 00:33:18.300
So inside this package,
playlistpicker, we have

00:33:18.300 --> 00:33:20.730
handlers, which handle
a specific page.

00:33:20.730 --> 00:33:22.240
We have templates.

00:33:22.240 --> 00:33:23.940
And then we have utils.

00:33:23.940 --> 00:33:26.820
And so each page generally
has a handler.

00:33:26.820 --> 00:33:28.250
Each page generally
has a template.

00:33:28.250 --> 00:33:31.540
And then the utils is
a bunch of stuff for

00:33:31.540 --> 00:33:32.740
all that other stuff.

00:33:32.740 --> 00:33:36.940
We also have a routes file,
where we import things.

00:33:36.940 --> 00:33:41.900
This is a little bit
brute force-ish.

00:33:41.900 --> 00:33:44.500
But we map out all of our urls
and all the handlers.

00:33:44.500 --> 00:33:46.040
So that's pretty
straightforward.

00:33:46.040 --> 00:33:47.050
DANNY HERMES: Pretty Django.

00:33:47.050 --> 00:33:49.620
JJ BEHRENS: Pretty Django-ish,
except for we're not doing any

00:33:49.620 --> 00:33:51.720
automatic stuff.

00:33:51.720 --> 00:33:53.610
But that worked out all fine.

00:33:53.610 --> 00:33:58.130
So in the utils directory, we
created files for dealing with

00:33:58.130 --> 00:34:03.670
channels, friendlist,
googleplus, memcache,

00:34:03.670 --> 00:34:05.720
web-related stuff and
YouTube stuff.

00:34:05.720 --> 00:34:08.469
And since this is a YouTube
show, I should point out we

00:34:08.469 --> 00:34:11.239
needed functions for creating
YouTube service, preparing

00:34:11.239 --> 00:34:15.020
playlists, parsing durations in
seconds-- you know, you do

00:34:15.020 --> 00:34:19.489
a little bit of random parsing
when you're dealing with API--

00:34:19.489 --> 00:34:21.840
writing a playlist, fetching
a feed and

00:34:21.840 --> 00:34:23.960
entries, and so forth.

00:34:23.960 --> 00:34:26.960
And so all the YouTube-related
stuff, it's in there.

00:34:26.960 --> 00:34:29.630
You could look at it
if you need to.

00:34:29.630 --> 00:34:31.210
So let me jump over
to the handlers.

00:34:31.210 --> 00:34:35.090
We have handlers for all the
different things like the

00:34:35.090 --> 00:34:37.199
playlist handler, removing
the playlist

00:34:37.199 --> 00:34:38.699
entry, the search handler.

00:34:38.699 --> 00:34:42.420
The Ajax is calling back
to various handlers.

00:34:42.420 --> 00:34:46.179
And just like Django
and Ruby on Rails?

00:34:46.179 --> 00:34:48.100
DANNY HERMES: Now, do you have
a separate module for every

00:34:48.100 --> 00:34:50.489
single handler?

00:34:50.489 --> 00:34:52.030
JJ BEHRENS: I think sometimes
we-- yeah.

00:34:52.030 --> 00:34:52.429
Yeah, we do.

00:34:52.429 --> 00:34:52.750
DANNY HERMES: Wow.

00:34:52.750 --> 00:34:53.070
Wow.

00:34:53.070 --> 00:34:53.420
JJ BEHRENS: Yeah.

00:34:53.420 --> 00:34:55.230
I like to keep things
a little bit small.

00:34:55.230 --> 00:34:55.810
I don't know.

00:34:55.810 --> 00:34:57.310
My brain's not overly large.

00:34:57.310 --> 00:34:59.180
DANNY HERMES: For serving
static content, though?

00:34:59.180 --> 00:34:59.970
I mean--

00:34:59.970 --> 00:35:01.220
JJ BEHRENS: For static
content, it's

00:35:01.220 --> 00:35:02.210
in the static directory.

00:35:02.210 --> 00:35:02.990
DANNY HERMES: Oh, OK.

00:35:02.990 --> 00:35:03.750
There you go.

00:35:03.750 --> 00:35:04.420
No handler needed.

00:35:04.420 --> 00:35:05.670
JJ BEHRENS: No handler needed.

00:35:09.530 --> 00:35:11.540
All the handlers have a
parent class, which is

00:35:11.540 --> 00:35:13.660
in this base handler.

00:35:13.660 --> 00:35:16.730
And this takes care of a bunch
of interesting things.

00:35:16.730 --> 00:35:20.280
Also, it sets up our decorator
that you were talking about.

00:35:20.280 --> 00:35:23.730
It takes care of a bunch of
authentication-type stuff.

00:35:23.730 --> 00:35:30.410
One interesting thing is that
there's the GData API and then

00:35:30.410 --> 00:35:32.410
the newer types of API.

00:35:32.410 --> 00:35:37.150
And when you have an
authorization error, they

00:35:37.150 --> 00:35:39.580
throw different exceptions.

00:35:39.580 --> 00:35:40.910
DANNY HERMES: Different
status codes?

00:35:40.910 --> 00:35:42.440
JJ BEHRENS: No, not different
status codes.

00:35:42.440 --> 00:35:44.170
But the libraries itself
will throw a

00:35:44.170 --> 00:35:45.130
different Python exception.

00:35:45.130 --> 00:35:45.620
DANNY HERMES: Ah, I see.

00:35:45.620 --> 00:35:46.110
I see.

00:35:46.110 --> 00:35:48.800
JJ BEHRENS: And so we set up a
global exception handler to

00:35:48.800 --> 00:35:51.070
handle both of those and follow
them through the same

00:35:51.070 --> 00:35:55.710
place to take care of, for
instance, if someone's OAuth 2

00:35:55.710 --> 00:35:57.190
token is expired.

00:35:57.190 --> 00:36:00.940
And so setting up a global
exception handler is a really,

00:36:00.940 --> 00:36:02.820
really useful thing
to be able to do.

00:36:02.820 --> 00:36:03.190
DANNY HERMES: Yeah.

00:36:03.190 --> 00:36:06.210
And certainly, given the
support in those both

00:36:06.210 --> 00:36:08.910
libraries now for OAuth 2, you
actually don't have to worry

00:36:08.910 --> 00:36:10.210
about what or not a
token's expired.

00:36:10.210 --> 00:36:10.300
JJ BEHRENS: Yes, yes.

00:36:10.300 --> 00:36:11.550
But setting up a global
exception

00:36:11.550 --> 00:36:14.240
handler comes in handy.

00:36:14.240 --> 00:36:16.115
That is a tool that's
reusable.

00:36:16.115 --> 00:36:16.670
DANNY HERMES: Certainly.

00:36:16.670 --> 00:36:21.950
JJ BEHRENS: So here's the
editplaylisthandler.

00:36:21.950 --> 00:36:22.950
It's pretty simple.

00:36:22.950 --> 00:36:24.050
We have a Git.

00:36:24.050 --> 00:36:28.880
We're making use of various
of those util modules.

00:36:28.880 --> 00:36:30.950
We're setting up some
template parameters.

00:36:30.950 --> 00:36:33.230
And then we're rendering
a template.

00:36:33.230 --> 00:36:34.860
Let me show you what a
template looks like.

00:36:34.860 --> 00:36:39.110
This is based on Django's
templating system.

00:36:39.110 --> 00:36:41.380
And it looks fairly
straightforward.

00:36:44.440 --> 00:36:46.510
If you've seen Django or if
you've seen Ruby on Rails,

00:36:46.510 --> 00:36:49.870
none of the stuff is all
that unfamiliar.

00:36:49.870 --> 00:36:52.860
There's one trick that we did
where every template can add

00:36:52.860 --> 00:36:53.870
to the JavaScript head.

00:36:53.870 --> 00:36:56.910
That's kind of nice because I
like having page-specific

00:36:56.910 --> 00:36:57.500
JavaScript.

00:36:57.500 --> 00:37:00.760
That's kind of nice.

00:37:00.760 --> 00:37:02.470
And let me see.

00:37:02.470 --> 00:37:04.450
I think I'm out of things
to talk about.

00:37:04.450 --> 00:37:05.030
There's the code.

00:37:05.030 --> 00:37:06.950
If you're interested in looking
at the code some more,

00:37:06.950 --> 00:37:08.570
you could definitely
download it.

00:37:08.570 --> 00:37:10.060
DANNY HERMES: Now, did
you guys use Python

00:37:10.060 --> 00:37:11.760
2.5 or Python 2.7?

00:37:11.760 --> 00:37:13.820
I think it was Python 2.5.

00:37:13.820 --> 00:37:14.230
Yeah.

00:37:14.230 --> 00:37:15.050
DANNY HERMES: OK.

00:37:15.050 --> 00:37:17.920
JJ BEHRENS: This is before
Python 2.7 support was around.

00:37:17.920 --> 00:37:21.290
We actually worked on this for
a surprisingly long time.

00:37:21.290 --> 00:37:24.540
If you look at the code, it's
not a tiny amount of code.

00:37:24.540 --> 00:37:25.540
I mean, it's not massive.

00:37:25.540 --> 00:37:28.310
But we worked on this for
several quarters.

00:37:28.310 --> 00:37:28.480
DANNY HERMES: Sure.

00:37:28.480 --> 00:37:30.010
Certainly.

00:37:30.010 --> 00:37:31.980
So a quick note.

00:37:31.980 --> 00:37:34.590
There are two different Python
runtimes that are supported in

00:37:34.590 --> 00:37:35.860
App Engine.

00:37:35.860 --> 00:37:38.760
And Python 2.5 was the very
first runtime for App Engine.

00:37:38.760 --> 00:37:42.715
There are four now, including
both Python, Go, and Java.

00:37:47.340 --> 00:37:51.000
And the Python 2.7 runtime does
not use Django as the

00:37:51.000 --> 00:37:52.470
default templating system.

00:37:52.470 --> 00:37:52.780
JJ BEHRENS: Oh, is that right?

00:37:52.780 --> 00:37:55.350
DANNY HERMES: But it's still
possible to use Django.

00:37:55.350 --> 00:37:58.050
But there's a bit of
a difference there.

00:37:58.050 --> 00:38:01.475
So for people who are used to
Python 2.7, all this you're

00:38:01.475 --> 00:38:04.870
hearing about Django, it's
really the sort of

00:38:04.870 --> 00:38:06.910
capabilities that came
out of the box.

00:38:06.910 --> 00:38:11.060
Django was chosen as an
arbitrarily framework, which

00:38:11.060 --> 00:38:12.460
was also easy to use.

00:38:12.460 --> 00:38:16.750
But if there's anything Python
has a lot of, it's frameworks.

00:38:16.750 --> 00:38:18.040
JJ BEHRENS: Yeah.

00:38:18.040 --> 00:38:22.820
I always say that to be a really
good Python programmer,

00:38:22.820 --> 00:38:24.890
you have to do, really,
three things.

00:38:24.890 --> 00:38:27.020
One is to write your own
templating language.

00:38:27.020 --> 00:38:29.120
Then you have to write
your own framework.

00:38:29.120 --> 00:38:31.520
And then you have to implement
Scheme in Python.

00:38:31.520 --> 00:38:33.945
I mean, those are the bars.

00:38:33.945 --> 00:38:35.030
DANNY HERMES: Yeah.

00:38:35.030 --> 00:38:37.570
I'm apparently zero out of
three, a terrible Python

00:38:37.570 --> 00:38:37.970
programmer.

00:38:37.970 --> 00:38:41.010
JJ BEHRENS: Well, we're going
to fix that later.

00:38:41.010 --> 00:38:43.190
So I think we're--

00:38:43.190 --> 00:38:45.160
Jeffrey, did you have anything
else to add?

00:38:48.410 --> 00:38:50.072
Did we lose Jeffrey?

00:38:50.072 --> 00:38:51.690
I think we might have
lost Jeffrey.

00:38:55.010 --> 00:38:58.320
Oh, I'm supposed to mention
the fact that not only is

00:38:58.320 --> 00:39:02.020
Google hiring, but the YouTube
API team in Developer

00:39:02.020 --> 00:39:04.650
Relations is hiring.

00:39:04.650 --> 00:39:06.410
It's a busy life, but
it's a fun life.

00:39:06.410 --> 00:39:07.520
DANNY HERMES: Oh,
it's great life.

00:39:07.520 --> 00:39:09.470
Developer Relations is
probably the most fun

00:39:09.470 --> 00:39:10.600
place in the world.

00:39:10.600 --> 00:39:12.870
I would rather do this job
than be president.

00:39:12.870 --> 00:39:15.350
President looks just
kind of stressful.

00:39:15.350 --> 00:39:16.597
DANNY HERMES: Bar none,
I would rather do

00:39:16.597 --> 00:39:17.790
this than be president.

00:39:17.790 --> 00:39:19.710
JJ BEHRENS: Agreed.

00:39:19.710 --> 00:39:21.830
Yes, especially since
I have horrible

00:39:21.830 --> 00:39:25.000
skeletons in my closet.

00:39:25.000 --> 00:39:25.850
Yes.

00:39:25.850 --> 00:39:27.320
No, not really.

00:39:27.320 --> 00:39:29.880
But anyway, thank you guys
for watching today.

00:39:29.880 --> 00:39:31.830
If you guys stuck around
to the very end,

00:39:31.830 --> 00:39:32.740
more kudos to you.

00:39:32.740 --> 00:39:34.310
I think you guys are awesome .

00:39:34.310 --> 00:39:37.700
And Danny, thanks a lot for
coming around today and

00:39:37.700 --> 00:39:40.380
telling me how much
I suck in my app.

00:39:40.380 --> 00:39:40.700
DANNY HERMES: My pleasure.

00:39:40.700 --> 00:39:42.380
JJ BEHRENS: We will see
you guys next time.

00:39:42.380 --> 00:39:46.030
DANNY HERMES: Yeah, and check
out the description on YouTube

00:39:46.030 --> 00:39:47.220
for some helpful links.

00:39:47.220 --> 00:39:49.620
JJ BEHRENS: Yep.

00:39:49.620 --> 00:40:13.300
[MUSIC PLAYING]

