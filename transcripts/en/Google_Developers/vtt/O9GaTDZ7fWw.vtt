WEBVTT
Kind: captions
Language: en

00:00:00.530 --> 00:00:03.090
After provisioning your
beacon, turning it on,

00:00:03.090 --> 00:00:05.060
setting the power
level et cetera,

00:00:05.060 --> 00:00:08.510
it's time to set it up with
data by registering, attaching

00:00:08.510 --> 00:00:12.820
data, and managing the beacons
with the Proximity Beacon API.

00:00:12.820 --> 00:00:16.120
Hi, I'm Marc Wandschneider and
I'm a software engineer here

00:00:16.120 --> 00:00:18.690
at Google and I will run you
through all the necessary steps

00:00:18.690 --> 00:00:20.550
to do the above.

00:00:20.550 --> 00:00:23.210
Not too long ago, we released
details of our new beacon

00:00:23.210 --> 00:00:26.120
platform based on the
Eddystone open standard

00:00:26.120 --> 00:00:28.830
and the Nearby Messages API.

00:00:28.830 --> 00:00:31.830
Nearby Messages is a new
API that enables your device

00:00:31.830 --> 00:00:34.980
to react to nearby objects
and micro-locations,

00:00:34.980 --> 00:00:37.550
such as bus stops,
train platforms,

00:00:37.550 --> 00:00:41.180
or even indoor locations
such as exhibits in a museum.

00:00:41.180 --> 00:00:45.360
It makes use of a whole host of
technologies including Wi-Fi,

00:00:45.360 --> 00:00:50.360
Bluetooth, ultrasound, and most
interestingly for us right now,

00:00:50.360 --> 00:00:54.000
Bluetooth beacons
powered by Eddystone.

00:00:54.000 --> 00:00:55.390
We have some other
videos talking

00:00:55.390 --> 00:00:57.380
about beacons in general,
and using beacons

00:00:57.380 --> 00:00:58.840
with Nearby Messages.

00:00:58.840 --> 00:01:03.890
But let's take a seconds to go
over our basic scenario again.

00:01:03.890 --> 00:01:06.680
First, you need to
get some beacons.

00:01:06.680 --> 00:01:09.270
This is usually done by talking
to one of the beacon vendors

00:01:09.270 --> 00:01:12.010
out there selling beacons
compliant with the Eddystone

00:01:12.010 --> 00:01:13.420
open format.

00:01:13.420 --> 00:01:15.840
They'll provide the
hardware and the software

00:01:15.840 --> 00:01:20.700
needed to provision or
activate these beacons.

00:01:20.700 --> 00:01:23.560
You use the Nearby Messages
API on your mobile device,

00:01:23.560 --> 00:01:25.840
such as your Android
or iOS gadget

00:01:25.840 --> 00:01:29.500
to listen for messages when
one of these beacons is seen,

00:01:29.500 --> 00:01:31.860
and to return attached
data for them.

00:01:31.860 --> 00:01:34.490
Like for example, that this
beacon is meant to be at bus

00:01:34.490 --> 00:01:36.590
stop ABC.

00:01:36.590 --> 00:01:38.930
Now, it's that attached
to data that we're

00:01:38.930 --> 00:01:41.830
going to be taking a closer
look at in this video.

00:01:41.830 --> 00:01:45.760
Just how exactly do I
associate data with my beacons?

00:01:45.760 --> 00:01:50.600
Well, this is done using the
Proximity Beacon API, Indeed,

00:01:50.600 --> 00:01:52.300
in addition to
that, this API lets

00:01:52.300 --> 00:01:55.290
me manage my entire
fleet of beacon hardware,

00:01:55.290 --> 00:01:57.990
register sightings,
and possibly even get

00:01:57.990 --> 00:02:01.580
some diagnostic information
about the beacons.

00:02:01.580 --> 00:02:03.640
The Proximity Beacon
API was designed

00:02:03.640 --> 00:02:05.420
to make deploying
and managing beacons

00:02:05.420 --> 00:02:10.410
easy with three key pieces
of functionality in mind.

00:02:10.410 --> 00:02:14.100
Beacon administration,
beacon sighting and serving,

00:02:14.100 --> 00:02:17.200
and beacon diagnostics.

00:02:17.200 --> 00:02:19.890
The largest and most important
of these bits of functionality

00:02:19.890 --> 00:02:23.270
is the portion relating to
managing your fleet of beacons.

00:02:23.270 --> 00:02:25.350
It's this corner of
the API that you'll

00:02:25.350 --> 00:02:28.260
use to first register your
beacons when you get them,

00:02:28.260 --> 00:02:30.520
and then to control their
lifecycle, including

00:02:30.520 --> 00:02:33.870
their eventual retirement
or decommissioning.

00:02:33.870 --> 00:02:36.870
The beacon life cycle
is roughly as follows.

00:02:36.870 --> 00:02:39.460
First, you take your
unregistered beacon

00:02:39.460 --> 00:02:41.320
and register it.

00:02:41.320 --> 00:02:43.580
Once registered, your
beacon can switch

00:02:43.580 --> 00:02:46.810
between active and
inactive states.

00:02:46.810 --> 00:02:48.460
Registered beacons
that are active

00:02:48.460 --> 00:02:51.780
will return information when
you query the citing and serving

00:02:51.780 --> 00:02:53.110
APIs.

00:02:53.110 --> 00:02:55.940
Thus, when I see beacon
one, two, three, four, five,

00:02:55.940 --> 00:03:00.050
and it is active, when you ask
for more information about it,

00:03:00.050 --> 00:03:03.560
the Proximity Beacon API
will tell you about it.

00:03:03.560 --> 00:03:05.400
Inactive beacons,
on the other hand,

00:03:05.400 --> 00:03:08.610
are registered and can still
be modified in our system,

00:03:08.610 --> 00:03:10.410
but don't serve.

00:03:10.410 --> 00:03:13.430
When an app asks if that
beacon has any data associated

00:03:13.430 --> 00:03:17.190
with it, the Proximity Beacon
API will just say, nope.

00:03:20.100 --> 00:03:22.180
Let's say you've taken
a beacon out of service,

00:03:22.180 --> 00:03:24.970
or maybe it gets lost and
want to make sure it's never

00:03:24.970 --> 00:03:27.110
accidentally reactivated.

00:03:27.110 --> 00:03:30.500
Decommissioning deactivates
the beacon permanently.

00:03:30.500 --> 00:03:32.660
This can never be
undone, and the beacon

00:03:32.660 --> 00:03:34.610
will never serve again.

00:03:34.610 --> 00:03:37.230
Nobody can ever register
this beacon again,

00:03:37.230 --> 00:03:40.800
and if you want to use the
physical beacon hardware again,

00:03:40.800 --> 00:03:43.570
you're going to need to use the
Hardware Vendors Provisioning

00:03:43.570 --> 00:03:47.110
app to give it a new beacon ID.

00:03:47.110 --> 00:03:49.540
Once a beacon is registered
and in the system,

00:03:49.540 --> 00:03:51.780
we need to associate some
attachment data with it

00:03:51.780 --> 00:03:53.590
in the cloud.

00:03:53.590 --> 00:03:55.630
These form the content
of the messages

00:03:55.630 --> 00:03:58.960
that the Nearby Messages API
present to your applications

00:03:58.960 --> 00:04:00.930
at run time.

00:04:00.930 --> 00:04:05.080
For this, we have ways to
create, fetch, and delete

00:04:05.080 --> 00:04:07.780
attachments with our beacons.

00:04:07.780 --> 00:04:09.310
You can put a decent
amount of data

00:04:09.310 --> 00:04:14.460
in there-- JSON, XML, BLOBs,
really whatever you want.

00:04:14.460 --> 00:04:18.240
But, stuffing massive JPG
images into the database

00:04:18.240 --> 00:04:19.630
isn't going to work.

00:04:19.630 --> 00:04:22.650
You've got 1k to work
with for each attachment.

00:04:22.650 --> 00:04:25.580
So for larger objects,
maybe splitting it up

00:04:25.580 --> 00:04:29.940
into smaller chunks, or perhaps
a link to the ultimate resource

00:04:29.940 --> 00:04:32.840
will be the way to go.

00:04:32.840 --> 00:04:36.080
And that's basically what the
Management API is all about.

00:04:36.080 --> 00:04:39.110
There are a few other
methods for fetching things,

00:04:39.110 --> 00:04:41.160
but it's pretty simple stuff.

00:04:41.160 --> 00:04:44.720
You register beacons, add
some attachment data to them,

00:04:44.720 --> 00:04:47.410
and you're ready to go
with Nearby Messages.

00:04:47.410 --> 00:04:49.980
Next, we have the Serving APIs.

00:04:49.980 --> 00:04:52.450
For those of you who will
be using Nearby Messages

00:04:52.450 --> 00:04:54.320
you won't need to
worry about this.

00:04:54.320 --> 00:04:56.740
Nearby does all of this for you.

00:04:56.740 --> 00:04:59.920
However, for those who want to
build complete beacon solutions

00:04:59.920 --> 00:05:01.980
on your own, there's
a cool method here

00:05:01.980 --> 00:05:03.270
you want to know about.

00:05:03.270 --> 00:05:05.600
Get info for observe beacons.

00:05:05.600 --> 00:05:06.760
That's a mouthful.

00:05:06.760 --> 00:05:10.690
Or just get for observed in
the rest version of the API.

00:05:10.690 --> 00:05:12.400
Basically, and
this is what Nearby

00:05:12.400 --> 00:05:15.710
is doing for you under the
covers, when you see a beacon,

00:05:15.710 --> 00:05:19.640
you query this method to see if
it's a beacon you know about.

00:05:19.640 --> 00:05:21.590
If it is, then you
get information

00:05:21.590 --> 00:05:25.630
for the beacon and attachment
data for it as well.

00:05:25.630 --> 00:05:27.130
If it's not a beacon
for which there

00:05:27.130 --> 00:05:29.460
is available registered
data you can use,

00:05:29.460 --> 00:05:31.115
the API just returns
a blank response.

00:05:33.630 --> 00:05:36.030
Finally, if you've
got a large fleet,

00:05:36.030 --> 00:05:37.780
or they're deployed
remotely, we've

00:05:37.780 --> 00:05:40.760
got yet another end-point that
will make your life easier--

00:05:40.760 --> 00:05:43.020
the Diagnostics API.

00:05:43.020 --> 00:05:44.980
And extremely important
part of managing

00:05:44.980 --> 00:05:47.740
a large fleet of beacons is
getting information on them,

00:05:47.740 --> 00:05:50.610
including battery life,
and whether the beacon

00:05:50.610 --> 00:05:53.810
is likely to be where
it's supposed to be.

00:05:53.810 --> 00:05:57.150
The Diagnostics API will
help you with all of that.

00:05:57.150 --> 00:06:00.450
A really great way to see how to
use the Proximity Beacon API is

00:06:00.450 --> 00:06:03.210
to check out the sample
applications we've put here,

00:06:03.210 --> 00:06:04.751
at github.com/google/beacon
platform.

00:06:06.970 --> 00:06:09.560
There's one for Android
and one for iOS,

00:06:09.560 --> 00:06:14.032
and these are fantastic ways
to see how to use these APIs.

00:06:14.032 --> 00:06:15.740
You can use these
samples to get familiar

00:06:15.740 --> 00:06:18.350
with the basic flows of
registering and setting up

00:06:18.350 --> 00:06:20.790
attachment data for beacons.

00:06:20.790 --> 00:06:23.820
You can also use these samples
as a basis for your deployment

00:06:23.820 --> 00:06:28.207
application, and integrate it
with your work flows and data.

00:06:28.207 --> 00:06:30.290
There's a ton of information
available for working

00:06:30.290 --> 00:06:33.210
with Eddystone beacons, Nearby
Messages, and the Google

00:06:33.210 --> 00:06:35.540
Proximity Beacon API.

00:06:35.540 --> 00:06:38.710
First, check out the docs
for the Proximity Beacon

00:06:38.710 --> 00:06:43.680
at developers.googl
e.com/beacon/proximity.

00:06:43.680 --> 00:06:47.580
Or just visit
developers.google.com/beacons

00:06:47.580 --> 00:06:50.480
for more on the broader picture.

00:06:50.480 --> 00:06:52.990
As we mentioned before,
our API samples are

00:06:52.990 --> 00:06:54.531
at github.com/google/beacon
platform.

00:06:56.440 --> 00:06:58.846
And you can also learn
more about Eddystone itself

00:06:58.846 --> 00:07:02.554
at github.com/google/eddystone.

00:07:02.554 --> 00:07:04.220
We've also made a
couple of other videos

00:07:04.220 --> 00:07:08.480
on beacons, which of
course, are great viewing.

00:07:08.480 --> 00:07:10.520
So with this knowledge
combined with what

00:07:10.520 --> 00:07:13.650
I talked about in the using
Nearby with beacons video,

00:07:13.650 --> 00:07:16.520
you've now got a complete
story on how to use beacons

00:07:16.520 --> 00:07:18.480
with Nearby Messages.

00:07:18.480 --> 00:07:21.390
I hope you find it as exciting
and interesting as we do.

00:07:21.390 --> 00:07:23.210
We can't wait to see
all the cool new stuff

00:07:23.210 --> 00:07:25.920
you're going to come up
with this technology.

00:07:25.920 --> 00:07:28.970
[MUSIC PLAYING]

