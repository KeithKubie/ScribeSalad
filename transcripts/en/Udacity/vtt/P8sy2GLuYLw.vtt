WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Welcome back again. This is the second unit in the debugging course.

00:00:04.000 --> 00:00:10.000
This topic is asserting expectations. Today, we will go and explore assertions.

00:00:10.000 --> 00:00:15.000
That is statements in the program that automatically check for errors during execution.

00:00:15.000 --> 00:00:19.000
Assertions are by far the most powerful debugging tool,

00:00:19.000 --> 00:00:23.000
in particular, because they are the key to automating debugging.

00:00:23.000 --> 00:00:25.000
That is debug while you sleep.

00:00:25.000 --> 00:00:30.000
If debugging were a video game and you would be hunted by bugs,

00:00:30.000 --> 00:00:39.000
then assertions would be a power pill that would help you catch all the bugs.

00:00:39.000 --> 00:00:43.000
Okay, specifically, we are going to learn how to learn how to write assertions,

00:00:43.000 --> 00:00:49.000
how to check assertions, and how to infer assertion from executions automatically.

00:00:49.000 --> 00:00:52.000
In our last lecture, we already had met the assert keyword from Python.

00:00:52.000 --> 00:00:57.000
Generally speaking, the statement assert condition, evaluates the condition,

00:00:57.000 --> 00:01:02.000
and then its behavior depends on whether the condition evaluates the true or to fault.

00:01:02.000 --> 00:01:06.000
If the condition holds, we proceed as usual.

00:01:06.000 --> 00:01:08.000
If the condition does not hold, however,

00:01:08.000 --> 00:01:12.000
then we interrupt program execution by throwing an exception.

00:01:12.000 --> 00:01:17.000
When you're writing your condition, you assume that condition will hold.

00:01:17.000 --> 00:01:20.000
This is normally useful when you're writing a test.

00:01:20.000 --> 00:01:23.000
For instance, if we want to test the function square root,

00:01:23.000 --> 00:01:30.000
we can write a test function that asserts the √4 is 2 and √9 is 3,

00:01:30.000 --> 00:01:35.000
and if any of these tests fail, that is if the result of √4 is not 2,

00:01:35.000 --> 00:01:39.000
then the assertion will fail and throw an exception.

00:01:39.000 --> 00:01:44.000
Such a functionality of assertion is available in all programming languages.

00:01:44.000 --> 00:01:46.000
You could even write your own assert function.

