WEBVTT
Kind: captions
Language: en

00:00:01.760 --> 00:00:04.490
In this video, I'll take a
look at three functions--

00:00:04.490 --> 00:00:07.930
with, within, and aggregate.

00:00:07.930 --> 00:00:10.470
To explore these functions, I'm
going to load in the Mario

00:00:10.470 --> 00:00:12.500
Kart data set.

00:00:12.500 --> 00:00:15.010
The with function can be use to
access variables on a data

00:00:15.010 --> 00:00:16.925
frame with ease.

00:00:16.925 --> 00:00:19.070
This is especially important
when the name of the data

00:00:19.070 --> 00:00:21.620
frame is long and multiple
variables are being accessed

00:00:21.620 --> 00:00:24.560
for calculation.

00:00:24.560 --> 00:00:27.990
I can read this command as with
mariokart, compute the

00:00:27.990 --> 00:00:32.080
total price minus the
shipping price.

00:00:32.080 --> 00:00:35.120
The within function is similar
to with except that it's used

00:00:35.120 --> 00:00:37.090
to create new columns and
merge them with the

00:00:37.090 --> 00:00:39.520
original data set.

00:00:39.520 --> 00:00:42.600
For instance, here I'll add an
auction closing price to the

00:00:42.600 --> 00:00:45.040
data frame and store the
result in a new data

00:00:45.040 --> 00:00:46.940
frame called mk.

00:00:46.940 --> 00:00:49.410
Notice that the commands to
generate the new variables

00:00:49.410 --> 00:00:53.340
goes inside braces as
the second argument.

00:00:53.340 --> 00:00:55.510
If I had wanted, I could've
added multiple variables by

00:00:55.510 --> 00:00:59.290
creating more variables
inside of the braces.

00:00:59.290 --> 00:01:01.990
As you can probably guess, the
with function is useful for

00:01:01.990 --> 00:01:05.069
one off calculations, while
within is useful for expanding

00:01:05.069 --> 00:01:09.050
a data set to include
new variables.

00:01:09.050 --> 00:01:12.295
When I want to aggregate or
summarize results, I often use

00:01:12.295 --> 00:01:14.060
the aggregate function.

00:01:14.060 --> 00:01:16.920
Here, I'll aggregate across the
number of wheels and the

00:01:16.920 --> 00:01:19.220
condition variables.

00:01:19.220 --> 00:01:21.830
The first argument
is a formula.

00:01:21.830 --> 00:01:24.190
The dot on the left side of the
tilde means keep all the

00:01:24.190 --> 00:01:27.100
variables for the output, and
the variables on the right

00:01:27.100 --> 00:01:29.800
side, separated by a plus sign,
indicate which variables

00:01:29.800 --> 00:01:32.840
to aggregate across.

00:01:32.840 --> 00:01:35.940
The second argument is a data
frame, and the third argument

00:01:35.940 --> 00:01:38.980
is how to aggregate
the variables.

00:01:38.980 --> 00:01:41.310
Had I only wanted to aggregate
across one variable--

00:01:41.310 --> 00:01:43.540
say, the total price--

00:01:43.540 --> 00:01:46.190
I could've replaced the dot with
the total price variable.

00:01:48.860 --> 00:01:51.030
Notice the similarities between
what the aggregate and

00:01:51.030 --> 00:01:53.940
tapply functions produce.

00:01:53.940 --> 00:01:56.210
Which you should use depends
on what you will use the

00:01:56.210 --> 00:01:57.460
output for.

00:01:59.600 --> 00:02:00.670
Congratulations.

00:02:00.670 --> 00:02:02.920
You've finished section three.

00:02:02.920 --> 00:02:04.770
The next section will introduce
how to write your

00:02:04.770 --> 00:02:06.020
own functions.

