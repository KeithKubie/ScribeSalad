WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:13.600
&gt;&gt; LASSEN: Let me talk about the Wave Server
and Store in a Wave in a Box. So, yes, so

00:00:13.600 --> 00:00:20.430
a quick outline, I'll talk about the Wave
bus whereby the Wave server component--when

00:00:20.430 --> 00:00:26.340
I say Wave server here, it's sort of a narrow
sense of the certain components in the system

00:00:26.340 --> 00:00:32.360
and the Wave bus which is the interface by
which it talks to the rest of the system.

00:00:32.360 --> 00:00:38.660
And then I'll talk about data structures in
there, the Wave map, the wavelet container;

00:00:38.660 --> 00:00:45.140
explain how the mechanics of applying a delta
with operational transformation, et cetera.

00:00:45.140 --> 00:00:56.240
Then I will explain the commit notices and
how that sort of sets the requirements for

00:00:56.240 --> 00:01:01.250
the Wave Store implementation--for a persistent
Wave Store implementation. I won't have a

00:01:01.250 --> 00:01:12.259
lot to say about the index but--and then I'll
explain how the Federation side of the Wave

00:01:12.259 --> 00:01:22.049
server works and then end up by binding to
where the source code is and explain sort

00:01:22.049 --> 00:01:27.850
of the current status of what's working and
what isn't, and some of the next--some of

00:01:27.850 --> 00:01:34.330
the things that--the next things we should
be doing to it. So this is Alex's diagram

00:01:34.330 --> 00:01:43.329
from yesterday. So I think he called it the
server core of that--the big box above the

00:01:43.329 --> 00:01:49.009
Wave--above the data store and behind the
Wave Bus. So this is what is meant by the

00:01:49.009 --> 00:01:57.229
Wave server in this talk and it's indeed called
the Wave server in the source code. And the

00:01:57.229 --> 00:02:13.250
Wave Bus is what connects it to the client
front-end and the robot gateway. These

00:02:13.250 --> 00:02:20.020
clients of the Wave Bus, they are the ones
that consume the deltas that are going through

00:02:20.020 --> 00:02:26.220
the system and that they are the ones who
update the Waves and submits delta into the

00:02:26.220 --> 00:02:35.640
Wave server. So the Wave Bus, I think in the
source code it's called both--is split across

00:02:35.640 --> 00:02:40.490
two interfaces, one called Wave bus, another
called Wave provider. But I think it's useful

00:02:40.490 --> 00:02:47.160
to think on this as one. This is the interface
between the Wave server component and the

00:02:47.160 --> 00:02:58.850
rest of the system. And it allows the clients
to subscribe to all the--all the traffic in

00:02:58.850 --> 00:03:08.290
the system that the Wave server broadcasts
to the clients. And the traffic is the deltas

00:03:08.290 --> 00:03:15.081
have applied and commit notices which I'll
return to but it means--so, yeah, commit notice

00:03:15.081 --> 00:03:25.560
means that you get a guarantee that something
has been persisted. The--and then the clients

00:03:25.560 --> 00:03:33.880
can call some methods on this interface. They
can submit a delta. They can request a snapshot

00:03:33.880 --> 00:03:40.751
of a wavelet and the--they can look at the
past deltas in the history--delta history

00:03:40.751 --> 00:03:48.991
of the wavelets and they can be given a Wave
ID, they can ask for it to look up the set

00:03:48.991 --> 00:03:54.670
of wavelets in a Wave. As I look through the
code and information, I start to realize that's

00:03:54.670 --> 00:03:59.819
not readily implemented but it should be.
And I should take a closer look at exactly

00:03:59.819 --> 00:04:08.130
how client front-end works. I think we--the
thing is that we don't have user data wavelets

00:04:08.130 --> 00:04:14.490
and private replies and so on that are turned
on in the Wave in a Box client yet; therefore,

00:04:14.490 --> 00:04:24.610
we haven't--this concept of discovering the
wavelets in the Wave have not been relevant

00:04:24.610 --> 00:04:35.550
yet. So the advantage of this particular diagram
here and the division of labor and that is

00:04:35.550 --> 00:04:42.529
represented here between the Wave server and
the client front-end is that the Wave server

00:04:42.529 --> 00:04:48.770
is not dealing with the session states of
the clients that are connected to the system.

00:04:48.770 --> 00:04:54.050
It just sends all the--everything has happened,
sends it out on the Wave bus and then the

00:04:54.050 --> 00:04:59.370
client front-end system manages the client
state. So that's a nice simplification here

00:04:59.370 --> 00:05:09.180
down in the boiler room of the Wave server.
Because, you know, all the--all the traffic

00:05:09.180 --> 00:05:20.050
is broadcast to everyone, it means that access
control is--some of this shared--so the Wave

00:05:20.050 --> 00:05:29.010
bus clients are trusted to components that
have to engage in the access control. They

00:05:29.010 --> 00:05:39.639
are responsible for performing access control
for their clients. So the data structures

00:05:39.639 --> 00:05:47.479
inside the Wave server component is there's
a Wave map that--it maps Wave IDs to waves,

00:05:47.479 --> 00:05:51.969
so to speak, and where the Waves are represented
by a map from wavelet IDs to wavelet containers.

00:05:51.969 --> 00:06:01.909
A wavelet container contains the states of
a wavelet. So the most important part is the

00:06:01.909 --> 00:06:09.629
delta history, as through the system diagram
here later to explain that. The delta history

00:06:09.629 --> 00:06:22.780
is a list of contiguous deltas starting from
version zero. Each delta has a version--the

00:06:22.780 --> 00:06:28.819
version where it applies that and it still
has one or more operations. So these little

00:06:28.819 --> 00:06:36.499
circles inside are operations and the triangles
are the deltas as we see how the version numbering

00:06:36.499 --> 00:06:45.490
follows the number of operations inside the
deltas. So now that every number is a valid

00:06:45.490 --> 00:06:59.509
version, only those have fall on a delta boundary.
And then another--the rest is--and then see--so

00:06:59.509 --> 00:07:05.270
this--then we also maintain a snapshots of
the wavelet states, so this is something I

00:07:05.270 --> 00:07:15.529
also described yesterday. So this is a one--when
you apply all these deltas one by one to the

00:07:15.529 --> 00:07:22.900
empty wavelet states, then you end up with
the current wavelet state which is the ordered

00:07:22.900 --> 00:07:29.589
set of participants. It's in the map from
the document IDs to documents or blips and

00:07:29.589 --> 00:07:37.180
the lib bit of metadata like the creator,
the name of the author of the first--the delta,

00:07:37.180 --> 00:07:42.230
the creation time which is the timestamp of
the first delta, and the current version,

00:07:42.230 --> 00:07:49.529
you might be able to say. Then we maintain
like the last modified time and so on, which

00:07:49.529 --> 00:07:55.879
is the timestamp of the last delta. It was
all derived from the data in the deltas and

00:07:55.879 --> 00:08:00.129
then we maintain the last committed version
which has to do with this commit verses that

00:08:00.129 --> 00:08:13.210
I'm going to return to. So, when a client
of the Wave bus, say, the client front-end

00:08:13.210 --> 00:08:23.789
of the robot proxy, submits a delta, it--such
a delta--so this--let me see. I have this

00:08:23.789 --> 00:08:28.219
diagram here. So a submitted delta is one
of the red ones. They're coming in from a

00:08:28.219 --> 00:08:38.500
client of the Wave bus. In the delta, there's
an author, there's one or more operations

00:08:38.500 --> 00:08:43.140
and then there's the target version. So in
the diagram, it's the downwards route, red

00:08:43.140 --> 00:08:55.590
arrow, it's the version within the history
of the wavelets that--the version of the wavelet

00:08:55.590 --> 00:09:03.770
that the client was thinking of when it formulated
this delta. Now, the concurrency control in

00:09:03.770 --> 00:09:08.810
the system with the operation transformation
means that the client could've seen one thing

00:09:08.810 --> 00:09:15.470
and thought of applying a delta there, but
the world has moved on. Others came in concurrently

00:09:15.470 --> 00:09:24.340
and came first added these deltas. So here
in this picture, the leftmost red delta is

00:09:24.340 --> 00:09:32.410
the one that the client was thinking of. The
last two deltas here in the delta history

00:09:32.410 --> 00:09:39.380
were things that arrived that the client hadn't
seen when it came with this delta. Then by

00:09:39.380 --> 00:09:46.810
operation transformation, this delta is transformed
to--across these two deltas. And once it's

00:09:46.810 --> 00:09:54.460
transformed opposite at the target version
points at the current version of the wavelet,

00:09:54.460 --> 00:10:02.850
then this transformed delta can be applied.
So these deltas at the bottom are transformed

00:10:02.850 --> 00:10:08.750
deltas that--so they look very similar to
a submitted delta. They have a list of operation

00:10:08.750 --> 00:10:14.940
and author. The version of a delta down here
is the one that they would--they would actually

00:10:14.940 --> 00:10:19.930
apply that and then they had this extra field
or application timestamp, the server timestamp

00:10:19.930 --> 00:10:28.260
at which time the transformation was complete
and the delta was applied. And once it's a--so

00:10:28.260 --> 00:10:34.010
the server does operational transformation
and by the end of the checking sees that the--that

00:10:34.010 --> 00:10:41.990
makes sense with these, so for instance, if
it's a--let's say, it's add participant, you

00:10:41.990 --> 00:10:48.140
can only add a participant if the participant
wasn't already there or--and the test we can

00:10:48.140 --> 00:10:52.350
say wasn't exactly well-formed. If it's a
document operation, it has to be well-formed

00:10:52.350 --> 00:10:56.399
in the way I described yesterday. If it's
all good, it's applied and then it's broadcast

00:10:56.399 --> 00:11:04.710
on the Wave bus server. Everybody learns that
the delta history has grown. Yeah. So the

00:11:04.710 --> 00:11:10.920
current implementation has the Wave Map and
the Wavelet Container is all held in memory,

00:11:10.920 --> 00:11:19.410
so that's nice and simple. But of course,
not super useful that only Wave disappear

00:11:19.410 --> 00:11:28.350
when you restart your server. So, we should
assist the Wave data in the--inside the Wave

00:11:28.350 --> 00:11:37.610
Server. And then, so that our couplet patches
with implementations of persistence, one from

00:11:37.610 --> 00:11:48.900
March by Anthony Watkins and Steve Baker;
and another one from June by Vaclav Sykora.

00:11:48.900 --> 00:11:56.110
And so, yeah, so it's a little bit--little
bit unhappy story about what has happened

00:11:56.110 --> 00:12:01.870
to these patches. So we messed up the code
review of Anthony's earlier in the year and

00:12:01.870 --> 00:12:10.220
then--and so it was hanging around it. But
in August, when we put more resources on Wave

00:12:10.220 --> 00:12:18.330
in a Box, we took a look at these patches
again and then we communicated with Anthony

00:12:18.330 --> 00:12:27.580
and Steve, and came up with--and decided that
we would piecemeal and get persistence in.

00:12:27.580 --> 00:12:35.330
So, first to see, Linnux took just the certificate
store. I'll describe that in a moment what

00:12:35.330 --> 00:12:45.030
a certificate store is. It's now--has a persistent
augmentation in using MongoDB. Then Joseph

00:12:45.030 --> 00:12:55.630
and I, and Frederick Goubri wrote up a design
for a file-based Wave Store and so--and I'll

00:12:55.630 --> 00:13:06.210
show that to you in a moment. And let me do
that now. So, what am I supposed to click

00:13:06.210 --> 00:13:15.830
here. Yes. The--yes, actually there's one
thing. Let me--I'll come back to this slide,

00:13:15.830 --> 00:13:24.330
but let me just say a few words about Commit
notices. So, this is to understand exactly

00:13:24.330 --> 00:13:30.040
how persistence is intended to work and how
it works within the Google Wave Production

00:13:30.040 --> 00:13:41.400
System. And so, we decided to broadcast these
applied deltas immediately when they're applied

00:13:41.400 --> 00:13:48.161
and not wait for them to be persisted. And
then on the--both on the Federation protocol

00:13:48.161 --> 00:13:55.200
and the time server protocol, a commit notice
is sent then as a follow-up notice that when

00:13:55.200 --> 00:14:07.300
later the delta is persisted. The purpose
of this was to optimize the agency. We wanted--we

00:14:07.300 --> 00:14:14.530
believe that it was a key part differentiator
that the live typing was really live and that

00:14:14.530 --> 00:14:21.120
you would see things happen instantly, that
also spelling corrections and everything would

00:14:21.120 --> 00:14:28.870
just--would come with a minimum delay. And
furthermore, so once you go this route, you

00:14:28.870 --> 00:14:36.820
quite efficiently hide the latency of the
actual rights and there you can sort of start

00:14:36.820 --> 00:14:45.000
patching rights on the Wave server to gain
some efficiencies in the--in storage access.

00:14:45.000 --> 00:14:50.410
And, so there's a tradeoff here, the more
you delay the right and the more you patch,

00:14:50.410 --> 00:14:56.030
the bigger you grow the window where you could
have a crash and you can lose that data that

00:14:56.030 --> 00:15:02.530
you have told everybody about. And that concept
that this data is turning around the system

00:15:02.530 --> 00:15:14.060
that there might be losses is a drawback to
this approach. And so it acts--complex to

00:15:14.060 --> 00:15:20.260
the protocol, the very existence of these
commit notices and then what is the client

00:15:20.260 --> 00:15:28.880
supposed to be doing with them. And so, it
has actually caused us a number of problems

00:15:28.880 --> 00:15:34.650
and we're not entirely sure whether it was
given out to tell to your experience whether

00:15:34.650 --> 00:15:40.160
that was--it was--it was a good choice to
make. So one of the things that we've had

00:15:40.160 --> 00:15:48.790
problems with is cache invalidation edit.
We were sloppy and cached just the most recent

00:15:48.790 --> 00:15:54.731
data running through the system rather than
be disciplined about only caching. The things

00:15:54.731 --> 00:16:01.660
we knew to be committed and that has given
us a number of problems. So the way it can

00:16:01.660 --> 00:16:10.840
work, you know, if you are disciplined about
only caching committed data, the system can

00:16:10.840 --> 00:16:19.010
be made to work. The--one of the things that
makes it work is that the client buffers the

00:16:19.010 --> 00:16:27.800
deltas after they have been--the deltas that
it has sent to the server, it holds on and

00:16:27.800 --> 00:16:35.470
waits for them to be committed and keeps the
applied deltas. Its own applied deltas around

00:16:35.470 --> 00:16:41.190
until it gets the commit notice. And if the
connection drops and the Wave server has crashed

00:16:41.190 --> 00:16:50.500
and lost the data, then it goes into--it activates
some recovery logic where it tries to--when

00:16:50.500 --> 00:16:57.090
we reestablish the connection, it tries to
find out what's the state of the wavelet on

00:16:57.090 --> 00:17:04.339
the server. And if it then can determine that
the server has lost the deltas that it at

00:17:04.339 --> 00:17:13.430
once applied, then it reapplies them. So,
we're sort of halfway there with the--with

00:17:13.430 --> 00:17:22.540
the code that you'll find in the client-server
protocol under the concurrency control in

00:17:22.540 --> 00:17:28.510
the concurrency control package. And so we
have some--there's some ways it could be improved

00:17:28.510 --> 00:17:40.250
and be pretty robust, but it's sort of--there's--one
of the place where it falls down is it has

00:17:40.250 --> 00:17:48.670
been actual concurrency so that the data is
lost from multiple clients, deltas that have

00:17:48.670 --> 00:17:57.710
been transformed against each other; then
the current recovery logic comes up short.

00:17:57.710 --> 00:18:06.180
Anyway, so the commit notices is key to understanding
how the Wave Store should work. So let me

00:18:06.180 --> 00:18:18.260
go to the Wave Store assigned here, which
is up on the site pages. So a key requirement

00:18:18.260 --> 00:18:24.000
to--so, you know, the commit notice tells
everybody that now you can rely on this having

00:18:24.000 --> 00:18:34.860
recent permanent storage, then the Wave Store
should honor that. And so in terms of database

00:18:34.860 --> 00:18:41.830
terminologies, this is a question of durability.
Can you say that something has been durably

00:18:41.830 --> 00:18:49.950
stored? So that made us--when we took a closer
look at MongoDB, it actually doesn't promise

00:18:49.950 --> 00:18:56.470
that in a single server configuration in there.
So the first thing, you know, doing--using

00:18:56.470 --> 00:19:06.880
MongoDB, as Anthony had done, but then if--in
order to get a first improvisation where we

00:19:06.880 --> 00:19:13.010
can be clear about the correctness of the
solution, we decided to go with a file-based

00:19:13.010 --> 00:19:23.730
system instead. So, the Java file APIs has
a concept of durable storage, what's called

00:19:23.730 --> 00:19:32.300
force a file to disk and then you know that
it has reached a persistent storage. So, let's

00:19:32.300 --> 00:19:49.460
see. So that--if you put things directly in
files, then it looks like this. So,

00:19:49.460 --> 00:19:57.250
the design--the file-based design here says
that there's a file per wavelet with the deltas

00:19:57.250 --> 00:20:03.860
in them. So here, let's say we have--in the
Wave Store, we have two waves, food.com with

00:20:03.860 --> 00:20:12.210
W plus something here and another in here,
bar.com something. This and--so let's say

00:20:12.210 --> 00:20:18.320
we have two wavelets here in the first one,
the conversation wavelet and user data wavelets

00:20:18.320 --> 00:20:30.820
then each wavelet has one file with deltas
where the deltas--the transformed deltas are

00:20:30.820 --> 00:20:40.770
stored back to back. They are--then put in
a directory structure here where there's a

00:20:40.770 --> 00:20:51.940
directory per Wave. And then because these--too
many--to be absolutely sure that we have some

00:20:51.940 --> 00:21:00.260
filenames that are clean in every file system,
we were conservative and took the Wave ID

00:21:00.260 --> 00:21:09.370
and in UTF8 and took the device and hex coded
them up into an ASCII string here, and similarly

00:21:09.370 --> 00:21:19.360
with the Wavelet IDs for the delta files.
Then there's--the two, okay--so this way,

00:21:19.360 --> 00:21:25.480
you can look it up right to the Wave Store;
does a directory look up to find the wavelets

00:21:25.480 --> 00:21:40.809
in the--in the Wave by looking at the filenames.
The two files per wavelets, one is--oh man,

00:21:40.809 --> 00:21:58.400
that looks terrible, the background. Yeah.
If that's impossible to see, let's go to the--go

00:21:58.400 --> 00:22:10.510
to the design doc. So, the delta's file is
a--has a file header with some version

00:22:10.510 --> 00:22:17.210
information to--so we know the format and
then there's a header and a body. The header,

00:22:17.210 --> 00:22:24.059
it just says what the sizes of the components
in the body is. And in the body, we have two

00:22:24.059 --> 00:22:30.750
things; the applied delta which is [INDISTINCT]
delta where there are some federation information

00:22:30.750 --> 00:22:35.480
that we've come to now and then there's the
transformed delta that we talked about before.

00:22:35.480 --> 00:22:40.940
And then, for efficiency, there's also an
index file. I'm not going to describe that

00:22:40.940 --> 00:22:49.929
in detail so that's--so then that allows for
efficient indexing of the positions within

00:22:49.929 --> 00:22:56.400
the file where the deltas are. So, let me
go back here. So, where we are with this is

00:22:56.400 --> 00:23:06.120
that the--let's see, Joseph has implemented
the delta store that rise out these files.

00:23:06.120 --> 00:23:13.540
We--it's not yet hooked up to the Wave server,
the Wave server and wavelet container classes

00:23:13.540 --> 00:23:22.340
in the Wave server, so it's not operational
yet, but we're getting there. So, there are

00:23:22.340 --> 00:23:28.460
some question marks here about inbox and search.
We haven't arrived at the design for these

00:23:28.460 --> 00:23:35.559
things yet, so it's probably good I just shut
up about it. There's some thoughts about it

00:23:35.559 --> 00:23:43.840
in the design doc and we have some ideas but
we're very open to inputs here. All right.

00:23:43.840 --> 00:23:59.670
Let me quickly run through federation. The--and
let me just see. I could also save the rest

00:23:59.670 --> 00:24:09.710
for the federation talk in the afternoon.
I'm already running over time. I just want

00:24:09.710 --> 00:24:19.059
to say--let me just say--talk about it very
briefly. So, here again is a diagram with

00:24:19.059 --> 00:24:24.960
the Wave server and the Wave bus. On the--the
Wave server also talks to XMPP server, a federated

00:24:24.960 --> 00:24:31.910
instance of Wave in a Box also talks to XMPP
server and federates with other Wave servers

00:24:31.910 --> 00:24:42.000
out there in the cloud. What it does on the
XMPP site is that it depends on whether a

00:24:42.000 --> 00:24:48.890
wavelet is hosted by this Wave server or whether
it's hosted somewhere else. So for local wavelets,

00:24:48.890 --> 00:24:55.380
wavelets whose wavelet ID--so with the reds
here--is the--so each line here is a wavelet

00:24:55.380 --> 00:25:01.960
name consisting of wavelet ID--Wave ID followed
by a wavelet's ID. So the domain name in the

00:25:01.960 --> 00:25:08.920
wavelet ID says where it's hosted and it--let's
say that this is the Wave server for foo.com

00:25:08.920 --> 00:25:16.740
then these first four wavelets hosted at--that
it hosts a local. And for a local wavelet,

00:25:16.740 --> 00:25:25.740
it does exactly what we just described and
then it--for federation,

00:25:25.740 --> 00:25:36.070
it basically publishes this Wave bus to--or
XMPP to other federated servers. So it's--it

00:25:36.070 --> 00:25:41.990
looks up all the participants--the domain
set on participants in the wavelet and then

00:25:41.990 --> 00:25:49.390
it sends the traffic on the wavelets out to
those domains that it finds, so on, XMPP.

00:25:49.390 --> 00:25:56.970
And then it accepts that they--the Wave server
from those domains, they can come and submit

00:25:56.970 --> 00:26:02.760
deltas from those participants, the remote
participants and they can come in there to

00:26:02.760 --> 00:26:12.290
make history requests to learn about the past
history of the wavelet. And so, for a remote

00:26:12.290 --> 00:26:21.160
wavelet, so here's the one here at the bottom.
So that's hosted by bar.com. Well, for such

00:26:21.160 --> 00:26:26.580
a thing--for such a wavelet, the Wave server
for the foo.com Wave server works basically

00:26:26.580 --> 00:26:36.299
as a caching proxy. It serves up this Wavelet
for its local Wave bus clients and it keeps

00:26:36.299 --> 00:26:44.880
a local copy of all the wavelet state that
it notes that it serves up to them. And it

00:26:44.880 --> 00:26:52.000
then receives from the hosting, from bar.com,
the hosting Wave server or XMPP. It receives

00:26:52.000 --> 00:26:59.049
that delta sets is the bar.com broadcasts
to it and it then follows them to the--its

00:26:59.049 --> 00:27:11.710
local Wave bus. And then when local clients
submit deltas and instead of--so then foo.com's

00:27:11.710 --> 00:27:19.660
Wave server doesn't do the operations transformers
on it. It just follows it to XMPP to the host

00:27:19.660 --> 00:27:28.180
server and that way, it sort of works as a
proxy between--for the local clients towards

00:27:28.180 --> 00:27:35.340
the actual host of the wavelet. I'll save
all these signatures and search stuff for

00:27:35.340 --> 00:27:45.000
the federation talk. And yeah, so I won't--already
mentioned persistence and indexing as two

00:27:45.000 --> 00:27:54.450
things that are work in progress. So the history
of the Wave in a Box Wave server which was

00:27:54.450 --> 00:28:07.740
once called Fed One, so it was done quickly
for a particular event in July last year,

00:28:07.740 --> 00:28:13.590
and so it's good that it's simple. It's not
a lot of craft that has build up, but it's

00:28:13.590 --> 00:28:22.210
also too simple in places. The error handling
is too simplistic and we need some more unit

00:28:22.210 --> 00:28:33.320
tests to make it easier to work with a code
base. And yeah, then that--apart from persistence

00:28:33.320 --> 00:28:42.679
indexing, there are a couple of other things
that we should be doing for indexing. Would--we

00:28:42.679 --> 00:28:52.240
should enhance the Wave bus interface so that
you can reliably deliver messages that delta

00:28:52.240 --> 00:29:00.240
is across of the Wave bus. It doesn't work
to index if you--if you only index a Wave

00:29:00.240 --> 00:29:08.100
when you log in, things don't crash. So we
have some ideas for how to do that that borrows

00:29:08.100 --> 00:29:16.850
from what we did in the production system,
but I can share those, you know. If you want

00:29:16.850 --> 00:29:26.400
to know about that, I have to share more about
that. Then, we are too lax about enforcing

00:29:26.400 --> 00:29:37.600
certain constraints on wavelets so that we
should be policing a couple of things. We

00:29:37.600 --> 00:29:46.510
had a system of police of clauses that were
running inside the Wave server that--doing

00:29:46.510 --> 00:29:52.031
that in the production system and we should
probably do the same for the Wave in a Box

00:29:52.031 --> 00:29:59.530
server. And then, yeah, that's certain efficiency
and scalability things that are not there

00:29:59.530 --> 00:30:14.590
that will be useful to work on once we have
a feature complete. And yes, and I'll--I think

00:30:14.590 --> 00:30:21.760
I'll skip the code walkthrough. So Joseph
did explain where some of this code is located.

00:30:21.760 --> 00:30:31.929
Basically, all of this is inside the Wave
server package plus one or two classes in

00:30:31.929 --> 00:30:38.840
the persistence package. And I'm happy to--all
those coming days I'm around and if you want

00:30:38.840 --> 00:30:46.080
to know more, please come and ask. Questions?
Yes?

00:30:46.080 --> 00:31:23.530
&gt;&gt; What is the pros and cons and possibilities
about upgrading a server into a more sophisticated

00:31:23.530 --> 00:31:26.090
companion like the Wave logic server or web
sphere or...? Where do you actually get some

00:31:26.090 --> 00:31:27.090
of new things like policing management, security
and user management [INDISTINCT]? Why did

00:31:27.090 --> 00:31:28.480
you chose sort of not to do that? Are there
any reasons why they stayed away from doing

00:31:28.480 --> 00:31:30.470
that in the future or to look at potential
doing this?

00:31:30.470 --> 00:31:35.440
&gt;&gt; LASSEN: So, I'm rather ignorant about these
things. So it's possible that--so I should

00:31:35.440 --> 00:31:37.110
repeat your question. So, yeah, your question
is...

00:31:37.110 --> 00:31:38.110
&gt;&gt; You know, why not host that, you know,
you know [INDISTINCT], you could make the

00:31:38.110 --> 00:31:56.010
server essentially a JCA or something? I mean,
adapt a transaction or adapt a [INDISTINCT]

00:31:56.010 --> 00:31:57.010
and a couple of other things [INDISTINCT]
in Wave bus [INDISTINCT] clients to a JCA

00:31:57.010 --> 00:31:58.010
framework for example.
&gt;&gt; LASSEN: Yeah, so the question is why not

00:31:58.010 --> 00:32:04.380
build the Wave server in a JCA container that
has many of the features that we need here

00:32:04.380 --> 00:32:12.039
and of something of that nature? And so that's
in part by, let's see, the historical routes

00:32:12.039 --> 00:32:22.580
where we wanted to do a barebones simple system
where you could see enter into where the bits

00:32:22.580 --> 00:32:29.450
was traveling through the system and in part
our [INDISTINCT] because we're not very well-versed

00:32:29.450 --> 00:32:30.450
in these things. I can't give an informed
answer to that. Okay. So I ran overtime, so

00:32:30.450 --> 00:32:31.450
let's move on to, question?

00:32:31.450 --> 00:32:33.400
uestion is why not build the Wave server in
a JCA container that has many of the features

00:32:33.400 --> 00:32:34.840
that we need here and of something of that
nature? And so that's in part by, let's see,

00:32:34.840 --> 00:32:36.260
the historical routes where we wanted to do
a barebones simple system where you could

00:32:36.260 --> 00:32:39.190
see enter into where the bits was traveling
through the system and in part our [INDISTINCT]

00:32:39.190 --> 00:32:42.020
because we're not very well-versed in these
things. I can't give an informed answer to

00:32:42.020 --> 00:32:56.899
that. Okay. So I ran overtime, so let's move
on to,

