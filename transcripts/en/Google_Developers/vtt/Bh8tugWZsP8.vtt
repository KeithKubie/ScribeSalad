WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.210
FERHAT BUJUKKOKTEN: Hi,
I'm Ferhat Bujukkokten,

00:00:03.210 --> 00:00:07.150
and I work in Google
Ads-- specifically,

00:00:07.150 --> 00:00:11.230
we work on front
end infrastructure.

00:00:11.230 --> 00:00:16.610
And about two years ago,
I got the opportunity

00:00:16.610 --> 00:00:20.700
to join one of the first
large scale projects

00:00:20.700 --> 00:00:22.690
to use start at Google.

00:00:22.690 --> 00:00:29.550
And the project was basically
updating an existing CRM

00:00:29.550 --> 00:00:32.930
system-- a customer
relationship management system.

00:00:32.930 --> 00:00:39.770
And our goal was to change
the back end in flight--

00:00:39.770 --> 00:00:45.490
basically, update all of our
back end systems and our RPC

00:00:45.490 --> 00:00:47.132
layers.

00:00:47.132 --> 00:00:50.200
And at the same time,
solve some of the issues we

00:00:50.200 --> 00:00:52.850
were seeing on the front end.

00:00:52.850 --> 00:01:00.040
So some of the hints that an
existing system needs updating

00:01:00.040 --> 00:01:05.130
is suddenly the application
starts looking data.

00:01:07.930 --> 00:01:13.610
Teams-- very large teams--
are under high pressure

00:01:13.610 --> 00:01:16.640
to deliver changes
inside the application,

00:01:16.640 --> 00:01:22.650
and you see that the visuals
start suffering first.

00:01:22.650 --> 00:01:25.170
Today, all of us
have a very high bar

00:01:25.170 --> 00:01:31.330
to meet in terms of making
our UIs pixel perfect,

00:01:31.330 --> 00:01:34.590
having very good UX,
very good user flows,

00:01:34.590 --> 00:01:39.970
and delivering very
polished interfaces.

00:01:39.970 --> 00:01:43.540
So the existing
app was definitely

00:01:43.540 --> 00:01:46.230
suffering on that side.

00:01:46.230 --> 00:01:50.380
Also, it's started
showing performance issues

00:01:50.380 --> 00:01:52.080
inside the application.

00:01:52.080 --> 00:01:59.540
And the team just didn't
have enough productivity

00:01:59.540 --> 00:02:05.530
to keep up with the changes that
were happening in our business.

00:02:05.530 --> 00:02:13.830
So for the CRM system, it was
pretty much from the ground up

00:02:13.830 --> 00:02:15.740
rebuild.

00:02:15.740 --> 00:02:20.200
And Ted started working on a
project at about the same time,

00:02:20.200 --> 00:02:20.700
too.

00:02:20.700 --> 00:02:22.569
What was your
experience like, Ted?

00:02:22.569 --> 00:02:24.610
TED SANDER: Yeah, my story
is a little different.

00:02:24.610 --> 00:02:28.820
I didn't get to start
from a brand new project

00:02:28.820 --> 00:02:32.420
and start from the ground up.

00:02:32.420 --> 00:02:35.020
I had this frustration
coming to work every day,

00:02:35.020 --> 00:02:39.020
and I'm sure many of you
have the same experience.

00:02:39.020 --> 00:02:42.380
Things were taking too long
to see a change in our system.

00:02:42.380 --> 00:02:45.170
When we'd make a change, it
would take 10 to 15 minutes

00:02:45.170 --> 00:02:46.860
before you can actually
see that change

00:02:46.860 --> 00:02:49.259
on our local environment.

00:02:49.259 --> 00:02:51.300
You just didn't really
want to make a new feature

00:02:51.300 --> 00:02:53.410
because every time you
touch a piece of code,

00:02:53.410 --> 00:02:55.300
it would affect
four other places.

00:02:55.300 --> 00:02:58.750
Everything was highly coupled,
it was hard to get velocity,

00:02:58.750 --> 00:03:01.032
your test coverage
might be iffy,

00:03:01.032 --> 00:03:03.054
you might have
flaky tests, it was

00:03:03.054 --> 00:03:04.970
hard to actually know
if something was working

00:03:04.970 --> 00:03:07.340
the way you expected it to,
there's all these hidden

00:03:07.340 --> 00:03:09.030
gotchas in your
code where if you

00:03:09.030 --> 00:03:12.800
made one change it had unknown
circumstances in the other

00:03:12.800 --> 00:03:14.990
and you were causing
bugs for your users,

00:03:14.990 --> 00:03:17.290
you weren't getting
your stuff out on time.

00:03:17.290 --> 00:03:19.210
And it just really
created this frustration

00:03:19.210 --> 00:03:22.520
that I really didn't like
the work that I was doing.

00:03:22.520 --> 00:03:27.150
And yet, at home, I had
this awesome experience.

00:03:27.150 --> 00:03:30.520
I could use Dart, it
had batteries included,

00:03:30.520 --> 00:03:32.980
there's all these tools
that I could leverage

00:03:32.980 --> 00:03:36.340
and I could start doing
awesome projects right away.

00:03:36.340 --> 00:03:38.980
It was like being
on a rocket ship.

00:03:38.980 --> 00:03:41.910
It just made my
experience so much better

00:03:41.910 --> 00:03:43.200
and I loved to code again.

00:03:43.200 --> 00:03:47.130
It was night and day from what
I was experiencing at work.

00:03:47.130 --> 00:03:48.530
But something had to give.

00:03:48.530 --> 00:03:50.180
Something had to change.

00:03:50.180 --> 00:03:54.070
So I went back to work and I
started analyzing the problem.

00:03:54.070 --> 00:03:56.070
I was like, how
in the world can I

00:03:56.070 --> 00:03:59.390
bring that experience
that I had a home

00:03:59.390 --> 00:04:02.850
and bring it to work and
make the environment better

00:04:02.850 --> 00:04:05.940
for my team, for myself,
for perhaps others?

00:04:05.940 --> 00:04:07.944
How do we make the
situation better?

00:04:07.944 --> 00:04:09.985
And looking at the problem,
it seemed impossible.

00:04:09.985 --> 00:04:11.690
It seemed ominous.

00:04:11.690 --> 00:04:15.120
There's so many projects
we needed to get updated.

00:04:15.120 --> 00:04:17.829
There's so many pieces
that needed to change.

00:04:17.829 --> 00:04:20.850
Stuff that was legacy
wasn't quite sure

00:04:20.850 --> 00:04:24.820
how it worked and we were
afraid of updating it.

00:04:24.820 --> 00:04:28.890
It just seemed impossible.

00:04:28.890 --> 00:04:32.730
And I didn't work at
an old world company.

00:04:32.730 --> 00:04:34.840
We didn't use a waterfall model.

00:04:34.840 --> 00:04:38.050
We didn't do our
requirements out

00:04:38.050 --> 00:04:40.810
for a year or two before
we even started a project.

00:04:40.810 --> 00:04:44.430
I worked at Google-- a modern,
fast, iterative company

00:04:44.430 --> 00:04:47.340
that built many of these tools
that I was using at home.

00:04:47.340 --> 00:04:50.620
If I couldn't make my developer
experience better at Google,

00:04:50.620 --> 00:04:52.309
where in the world could I?

00:04:52.309 --> 00:04:53.850
Did I need to go
work for a start up?

00:04:53.850 --> 00:04:56.556
Did I need to switch teams?

00:04:56.556 --> 00:04:59.640
So I chose to do
the Googly thing.

00:04:59.640 --> 00:05:03.600
I chose to try to make the
environment better for myself,

00:05:03.600 --> 00:05:06.750
for my team, and maybe for more.

00:05:06.750 --> 00:05:09.372
Now, I'm not saying that
I was the one person that

00:05:09.372 --> 00:05:10.330
got everything started.

00:05:10.330 --> 00:05:12.100
That's not what it
was an entirely.

00:05:12.100 --> 00:05:15.410
It was I was a pebble
along with Ferhat, myself,

00:05:15.410 --> 00:05:17.410
and many other teams at
Google that were getting

00:05:17.410 --> 00:05:20.640
frustrated with the
environment that we were using.

00:05:20.640 --> 00:05:23.380
And we started creating
this avalanche.

00:05:23.380 --> 00:05:25.350
And it's just kind
of swept us all up.

00:05:25.350 --> 00:05:28.280
You start seeing so
many teams switch over

00:05:28.280 --> 00:05:30.920
to Dart and the environment
that it provides.

00:05:30.920 --> 00:05:35.730
And it's really this great
story between the Dart team, who

00:05:35.730 --> 00:05:40.830
really want to build these small
to large humongous apps that

00:05:40.830 --> 00:05:42.900
are performant,
that are beautiful,

00:05:42.900 --> 00:05:45.770
that literally help
you code on the web,

00:05:45.770 --> 00:05:49.730
and these add teams that have
the exact same requirements.

00:05:49.730 --> 00:05:51.960
We don't want to have to
worry about our frameworks.

00:05:51.960 --> 00:05:54.043
We don't want to have to
worry about our language.

00:05:54.043 --> 00:05:58.210
We want to have to write our
production code for the problem

00:05:58.210 --> 00:06:00.110
that we're trying
to solve, which

00:06:00.110 --> 00:06:04.120
is allow advertisers
to create their ads

00:06:04.120 --> 00:06:07.130
and really sell their
product across the web.

00:06:07.130 --> 00:06:11.550
And in the process, it makes
Google a little bit of money.

00:06:11.550 --> 00:06:13.890
FERHAT BUJUKKOKTEN:
So we basically

00:06:13.890 --> 00:06:20.410
had this inherent requirement of
having the teams be productive

00:06:20.410 --> 00:06:22.370
and very productive.

00:06:22.370 --> 00:06:27.320
In Google Ads, we have
many mission critical apps.

00:06:27.320 --> 00:06:33.390
And they start out at a
couple hundred thousand lines,

00:06:33.390 --> 00:06:38.040
and we have systems that are in
the millions of lines of code.

00:06:38.040 --> 00:06:42.490
And what makes it even
harder is we have very large

00:06:42.490 --> 00:06:44.340
and distributed teams.

00:06:44.340 --> 00:06:48.660
So we have ads teams all
over the world-- in Europe,

00:06:48.660 --> 00:06:54.000
across many time
zones-- and basically we

00:06:54.000 --> 00:06:58.470
had to get productivity
up to a level

00:06:58.470 --> 00:07:02.180
where we could keep up with
the changes in our business.

00:07:02.180 --> 00:07:07.320
Google Ads is
evolving very fast.

00:07:07.320 --> 00:07:09.630
The requirements change.

00:07:09.630 --> 00:07:12.970
Literally every
month, every quarter,

00:07:12.970 --> 00:07:16.430
we have to make changes
in our application

00:07:16.430 --> 00:07:21.000
and add features to support
our users, our business needs.

00:07:21.000 --> 00:07:27.440
And the needs that
are changing so fast

00:07:27.440 --> 00:07:31.150
require teams to be
very agile and be

00:07:31.150 --> 00:07:35.725
able to confidently make changes
on very large code bases.

00:07:39.330 --> 00:07:41.130
TED SANDER: Yeah, and
it wasn't like that.

00:07:41.130 --> 00:07:45.250
Two years ago, it wasn't
a good situation for us.

00:07:45.250 --> 00:07:47.660
Some of our projects would
take 15 to 30 minutes

00:07:47.660 --> 00:07:51.885
before we could actually see
a change on our local machine.

00:07:51.885 --> 00:07:53.510
And this doesn't
create good practices.

00:07:53.510 --> 00:07:57.260
You start writing as much code
as you can before you actually

00:07:57.260 --> 00:07:59.310
see if it starts working.

00:07:59.310 --> 00:08:02.410
It's really hard to make
even simple CSS changes

00:08:02.410 --> 00:08:05.090
or see how your style flows.

00:08:05.090 --> 00:08:07.740
Even the simple things
become really tough.

00:08:07.740 --> 00:08:10.790
And it had some
other problems too.

00:08:10.790 --> 00:08:14.120
We were finding that the time
that our UX people and our UI

00:08:14.120 --> 00:08:17.130
people were getting us
mocks for us to implement,

00:08:17.130 --> 00:08:20.420
it was just taking way too
long to get those mocked

00:08:20.420 --> 00:08:22.900
and actually get them into
our production system.

00:08:22.900 --> 00:08:24.360
And it was creating
unhappy users

00:08:24.360 --> 00:08:26.401
because we weren't giving
them features that they

00:08:26.401 --> 00:08:27.680
wanted in a timely manner.

00:08:27.680 --> 00:08:29.940
It was causing unhappy
managers because they

00:08:29.940 --> 00:08:31.180
weren't seeing progress.

00:08:31.180 --> 00:08:33.700
It was causing unhappy UX people
because they were coming up

00:08:33.700 --> 00:08:35.429
with all these cool
ideas and we just

00:08:35.429 --> 00:08:37.929
had to push back on them because
our systems really wouldn't

00:08:37.929 --> 00:08:41.390
allow us to make it work.

00:08:41.390 --> 00:08:44.820
So we started evaluating how
could we make this better--

00:08:44.820 --> 00:08:47.240
how could we make
our environment

00:08:47.240 --> 00:08:50.429
this fast and productive
experience for everyone?

00:08:50.429 --> 00:08:52.470
Make our developers happy
and make everybody else

00:08:52.470 --> 00:08:54.000
happy in the process.

00:08:54.000 --> 00:08:57.580
And Dart was really one of the
answers that we liked a lot.

00:08:57.580 --> 00:09:01.910
We evaluated a lot of
languages, but the secret

00:09:01.910 --> 00:09:04.750
is that all of them had types.

00:09:04.750 --> 00:09:09.320
We really didn't want to try
to use a system within Google

00:09:09.320 --> 00:09:11.780
that didn't have types.

00:09:11.780 --> 00:09:13.950
We have a lot of
help on our code.

00:09:13.950 --> 00:09:16.230
Even if you use VI
or Emacs, we have

00:09:16.230 --> 00:09:18.120
tons of systems
that can understand

00:09:18.120 --> 00:09:20.220
the semantics of
our code and can

00:09:20.220 --> 00:09:23.060
help us to find bugs
earlier, whether it

00:09:23.060 --> 00:09:27.220
be a linter or a test tool
that actually can find them

00:09:27.220 --> 00:09:29.310
or somewhere where
you can just go

00:09:29.310 --> 00:09:32.860
into a web search of your
code and you can figure out

00:09:32.860 --> 00:09:34.220
every instance of it.

00:09:34.220 --> 00:09:36.710
You can figure out patterns
of how it's being used.

00:09:36.710 --> 00:09:38.450
You can click on the
type and figure out

00:09:38.450 --> 00:09:42.030
where it's being used and who
else might be implementing it

00:09:42.030 --> 00:09:44.240
or who is overriding it
or whatever it might be.

00:09:44.240 --> 00:09:47.710
It makes it real easy
to grok this huge code

00:09:47.710 --> 00:09:48.730
base that we have.

00:09:48.730 --> 00:09:50.320
You can go in and see.

00:09:50.320 --> 00:09:53.480
And we can use infrastructure
across the whole system

00:09:53.480 --> 00:09:56.110
and really understand where
it's being used within Google.

00:09:59.360 --> 00:10:01.080
Another feature
that we really liked

00:10:01.080 --> 00:10:05.620
was Dart is as fast as
JS, sometimes faster.

00:10:05.620 --> 00:10:07.080
And in the times
where it's slower,

00:10:07.080 --> 00:10:08.830
it's only a little bit slower.

00:10:08.830 --> 00:10:10.390
It's very important
for us to get

00:10:10.390 --> 00:10:12.510
very, very performant systems.

00:10:12.510 --> 00:10:13.969
We want 60 FPF.

00:10:13.969 --> 00:10:16.010
It's a challenge for us,
but that's what we want.

00:10:16.010 --> 00:10:17.970
Even on our ad
systems, we want it

00:10:17.970 --> 00:10:21.300
to be fast,
beautiful, and vibrant

00:10:21.300 --> 00:10:23.160
and have smooth animations.

00:10:23.160 --> 00:10:24.290
And we didn't have that.

00:10:24.290 --> 00:10:26.770
We weren't experiencing
that at the time.

00:10:26.770 --> 00:10:28.520
We were pretty far
away from the metal.

00:10:28.520 --> 00:10:30.460
It was hard for us
to make changes.

00:10:30.460 --> 00:10:32.910
Our system before was
trying to protect us

00:10:32.910 --> 00:10:35.405
against all the different
browser languages.

00:10:35.405 --> 00:10:36.950
And we had kind of
grown past that.

00:10:36.950 --> 00:10:38.241
The browsers had gotten better.

00:10:38.241 --> 00:10:40.609
They were pretty much working
on the same platform now.

00:10:40.609 --> 00:10:41.983
And there's all
these things that

00:10:41.983 --> 00:10:44.030
made it really
hard for us to dive

00:10:44.030 --> 00:10:46.720
into the internals of what
was happening with our DOM--

00:10:46.720 --> 00:10:49.180
to make this really
fast paint speed,

00:10:49.180 --> 00:10:54.935
make our widgets beautiful
and vibrant for our users.

00:10:54.935 --> 00:10:56.810
A hidden thing that we
got, and you might not

00:10:56.810 --> 00:11:01.260
think that we need it at
Google, was the package manager.

00:11:01.260 --> 00:11:04.490
And it's not really because we
need go download code from pub

00:11:04.490 --> 00:11:05.890
and use it in that way.

00:11:05.890 --> 00:11:07.460
But we got a lot
of hidden benefits

00:11:07.460 --> 00:11:10.660
from using this common
infrastructure within Google.

00:11:10.660 --> 00:11:12.700
Dart had batteries included.

00:11:12.700 --> 00:11:14.200
The libraries would
work together.

00:11:14.200 --> 00:11:16.980
We didn't need to try to figure
out which keyboard library

00:11:16.980 --> 00:11:19.670
we were going to use, which
stream library we were going

00:11:19.670 --> 00:11:22.110
to use, what module loading
library we were going to use.

00:11:22.110 --> 00:11:23.010
It was just there.

00:11:23.010 --> 00:11:24.480
It was inside Dart.

00:11:24.480 --> 00:11:27.040
And it gave us
all these patterns

00:11:27.040 --> 00:11:28.940
that we could reuse
over and over again.

00:11:28.940 --> 00:11:32.980
And all of a sudden our code
started looking really similar.

00:11:32.980 --> 00:11:35.190
You see the future pattern
in a lot of our code.

00:11:35.190 --> 00:11:37.040
You see streams in
a lot of our code.

00:11:37.040 --> 00:11:39.110
It has actually inspired
other libraries.

00:11:39.110 --> 00:11:40.450
It's pretty cool.

00:11:40.450 --> 00:11:45.390
And it also allowed us to start
using more external libraries

00:11:45.390 --> 00:11:46.100
that we found.

00:11:46.100 --> 00:11:48.300
We could bring in
external libraries

00:11:48.300 --> 00:11:49.800
and we could just
start using them

00:11:49.800 --> 00:11:51.514
and they would work
within the ecosystem.

00:11:51.514 --> 00:11:52.930
We didn't have to
worry about them

00:11:52.930 --> 00:11:56.660
conflicting with other libraries
or not working in our framework

00:11:56.660 --> 00:11:58.690
or not having types so
that we could easily

00:11:58.690 --> 00:12:00.520
understand what was going on.

00:12:00.520 --> 00:12:03.290
And a great story of
this is we weren't

00:12:03.290 --> 00:12:07.430
really happy with the mocking
story the Dart provided us.

00:12:07.430 --> 00:12:09.830
It uses string-bass mocking.

00:12:09.830 --> 00:12:12.180
It wasn't really
good to refactor it

00:12:12.180 --> 00:12:13.850
because you might
refactor the method

00:12:13.850 --> 00:12:16.308
but you didn't actually refactor
the string that was trying

00:12:16.308 --> 00:12:18.290
to make sure that it matched.

00:12:18.290 --> 00:12:20.856
It didn't have auto
complete a lot of the times.

00:12:20.856 --> 00:12:21.980
We weren't in love with it.

00:12:21.980 --> 00:12:24.241
And we could've just went
to the Dart team and said,

00:12:24.241 --> 00:12:25.490
this isn't good enough for us.

00:12:25.490 --> 00:12:28.670
Please rewrite it all
and give it to us.

00:12:28.670 --> 00:12:31.419
Spend some cycles and ignore
all the cool other stuff

00:12:31.419 --> 00:12:33.210
that you're doing for
us and everybody else

00:12:33.210 --> 00:12:35.230
and please give us a
better mocking library.

00:12:35.230 --> 00:12:37.460
But instead, we found
in external one.

00:12:37.460 --> 00:12:39.370
We found Dart Mikado.

00:12:39.370 --> 00:12:41.460
And we could just use
that-- we could bring it

00:12:41.460 --> 00:12:44.510
into our system and
everything just worked

00:12:44.510 --> 00:12:48.130
and there is nothing we had to
do to make it so that we bring

00:12:48.130 --> 00:12:49.760
in the libraries or whatever.

00:12:49.760 --> 00:12:51.760
This ecosystem was just vibrant.

00:12:51.760 --> 00:12:54.090
We could start
leveraging external.

00:12:54.090 --> 00:12:57.570
We could start giving to
the external community too.

00:12:57.570 --> 00:12:59.870
And this wasn't
actually always true,

00:12:59.870 --> 00:13:03.880
but we actually used the pub
system within Google also.

00:13:03.880 --> 00:13:06.260
And before we actually
had some of our own tools

00:13:06.260 --> 00:13:07.718
and we were actually
envious of you

00:13:07.718 --> 00:13:09.060
guys-- the external developers.

00:13:09.060 --> 00:13:11.160
Because you had pub serve
and you had pub build.

00:13:11.160 --> 00:13:14.310
Everything just worked for
you, and there is no fires

00:13:14.310 --> 00:13:18.270
or there wasn't glue
sticking everything together.

00:13:18.270 --> 00:13:20.670
And sometimes it worked
and sometimes it didn't.

00:13:20.670 --> 00:13:24.030
And now we actually use pub
build and we use pub serve.

00:13:24.030 --> 00:13:26.946
And it allows us to have a
really fast refresh cycle

00:13:26.946 --> 00:13:28.570
to leverage all the
tools that you get.

00:13:28.570 --> 00:13:30.278
We get a leverage that
test runner that's

00:13:30.278 --> 00:13:32.010
coming that you guys saw.

00:13:32.010 --> 00:13:33.260
And it'll just work for us.

00:13:33.260 --> 00:13:35.676
We don't really have to worry
about building our own tools

00:13:35.676 --> 00:13:38.400
to do all that cool stuff.

00:13:38.400 --> 00:13:41.760
So really, this is a story of
the synergy between the Dart

00:13:41.760 --> 00:13:44.820
team and us-- of giving
us the tools to become

00:13:44.820 --> 00:13:48.821
powerful and really worry about
only the problems that we need

00:13:48.821 --> 00:13:51.070
to solve instead of trying
to solve all these language

00:13:51.070 --> 00:13:53.840
and framework problems.

00:13:53.840 --> 00:13:56.870
FERHAT BUJUKKOKTEN:
So we wanted to share

00:13:56.870 --> 00:13:59.700
some of the
experiences we've run

00:13:59.700 --> 00:14:05.070
into in using Dart
in our projects

00:14:05.070 --> 00:14:06.250
over the past couple years.

00:14:06.250 --> 00:14:10.560
And also point to
some of the strengths

00:14:10.560 --> 00:14:14.780
that helped us
solve these issues.

00:14:14.780 --> 00:14:20.640
So one of the big items
is always performance.

00:14:20.640 --> 00:14:26.900
When I joined the CRM project
and we were just starting out,

00:14:26.900 --> 00:14:30.260
I had a meeting with
a project manager

00:14:30.260 --> 00:14:35.370
and he started demoing the
existing application to me.

00:14:35.370 --> 00:14:38.530
And some of the views--
some of the reports--

00:14:38.530 --> 00:14:41.610
were so slow, in the
middle of the meeting,

00:14:41.610 --> 00:14:43.110
he just stopped demoing it.

00:14:43.110 --> 00:14:47.700
And he started talking
about the future what he'd

00:14:47.700 --> 00:14:50.000
like to see in the new system.

00:14:50.000 --> 00:14:55.140
So applications
never start slow.

00:14:55.140 --> 00:14:58.200
They start getting
slower and slower

00:14:58.200 --> 00:15:00.300
as the application is growing.

00:15:00.300 --> 00:15:02.970
You're adding a
lot more features.

00:15:02.970 --> 00:15:04.480
You're making changes.

00:15:04.480 --> 00:15:08.120
You're adding abstractions and
more layers to your system.

00:15:08.120 --> 00:15:10.750
And sometimes it
feels like there's

00:15:10.750 --> 00:15:13.410
this black hole in
the browser and all

00:15:13.410 --> 00:15:21.140
your CPU cycles are disappearing
into the black hole.

00:15:21.140 --> 00:15:26.040
And so one of the
issues we ran into

00:15:26.040 --> 00:15:32.160
was when you closely
monitor a production system,

00:15:32.160 --> 00:15:36.850
you get your p50 numbers--
50th percentile performance,

00:15:36.850 --> 00:15:39.600
90th percentile performance.

00:15:39.600 --> 00:15:44.850
And looking at enough systems
and enough applications

00:15:44.850 --> 00:15:49.520
out there, you have a good idea
of what the ratios should be.

00:15:49.520 --> 00:15:53.490
So p50 for us is
pretty much working

00:15:53.490 --> 00:15:56.265
in Mountain View with
excellent networks

00:15:56.265 --> 00:15:58.960
and being close to
our data centers.

00:15:58.960 --> 00:16:05.160
And p90-95 is people are on
slower connections-- maybe

00:16:05.160 --> 00:16:07.260
they're on older hardware.

00:16:07.260 --> 00:16:12.483
And the numbers always reflect
that no matter which system you

00:16:12.483 --> 00:16:16.280
look at-- if you look at
Gmail, you look at calendar--

00:16:16.280 --> 00:16:18.760
there are constant factors.

00:16:18.760 --> 00:16:23.550
And in our system,
after we started

00:16:23.550 --> 00:16:28.210
testing it-- that
was written in Dart--

00:16:28.210 --> 00:16:32.820
we basically saw that
in p90-95 numbers.

00:16:32.820 --> 00:16:37.220
We had a big drop
off in performance.

00:16:37.220 --> 00:16:39.070
For example, we had
these giant tables

00:16:39.070 --> 00:16:43.740
with 20 columns and
thousands of rows.

00:16:43.740 --> 00:16:49.110
And when you sorted the
columns, it should be instant.

00:16:49.110 --> 00:16:53.330
And on p90th, we were seeing
these really strange and big

00:16:53.330 --> 00:16:57.580
numbers that were beyond--
we couldn't explain really

00:16:57.580 --> 00:16:59.170
with the hardware differences.

00:16:59.170 --> 00:17:03.350
So we turned our
attention to memory

00:17:03.350 --> 00:17:07.230
because the logs also showed
some of these applications,

00:17:07.230 --> 00:17:08.440
they're mission critical.

00:17:08.440 --> 00:17:11.720
People sit down in the morning
and use them all day long.

00:17:11.720 --> 00:17:12.720
They CRM map.

00:17:12.720 --> 00:17:15.339
They make calls,
they log meetings,

00:17:15.339 --> 00:17:18.700
they look at sales
pipelines all day long.

00:17:18.700 --> 00:17:22.420
And what we saw is
on p90th and 95th,

00:17:22.420 --> 00:17:24.579
we saw very high memory usage.

00:17:24.579 --> 00:17:27.980
So we said, OK, maybe
that could explain

00:17:27.980 --> 00:17:30.380
what's going on in performance.

00:17:30.380 --> 00:17:32.490
So we ran some numbers.

00:17:32.490 --> 00:17:36.930
We basically started stress
testing the application

00:17:36.930 --> 00:17:41.330
and started running the
browser slowly out of memory.

00:17:41.330 --> 00:17:44.270
So what happened
was as soon as we

00:17:44.270 --> 00:17:50.470
had about 660 to 670
megs of memory use,

00:17:50.470 --> 00:17:53.380
we saw a very sharp
decline in performance.

00:17:53.380 --> 00:17:55.930
Essentially, the app
would be five to six times

00:17:55.930 --> 00:17:59.280
slower under high
memory pressure.

00:17:59.280 --> 00:18:06.740
And when you build a large
app and you build thousands

00:18:06.740 --> 00:18:11.880
of lines of code and
300 to 400 libraries,

00:18:11.880 --> 00:18:18.790
it's very hard to go back and
find where the bottlenecks are.

00:18:18.790 --> 00:18:23.510
But with Dart, we had
these wonderful tools.

00:18:23.510 --> 00:18:28.590
Observatory really helped us
diagnose some of the issues,

00:18:28.590 --> 00:18:33.710
see where we had services
that we're global.

00:18:33.710 --> 00:18:39.010
We were subscribing to streams
and never releasing them.

00:18:39.010 --> 00:18:44.250
And as the user was
going through their day,

00:18:44.250 --> 00:18:46.390
essentially we were
holding onto memory.

00:18:46.390 --> 00:18:49.360
So tools like
Observatory allowed

00:18:49.360 --> 00:18:55.550
us to automate a lot of this and
make sure that going forward we

00:18:55.550 --> 00:19:00.120
have both memory and
performance under control.

00:19:00.120 --> 00:19:05.370
So yesterday you heard the
protocol for Observatory

00:19:05.370 --> 00:19:06.650
is going to be published.

00:19:06.650 --> 00:19:11.100
And this will allow you to
basically run your tests,

00:19:11.100 --> 00:19:15.390
go to a blank page, go to your
view, go back to a blank page,

00:19:15.390 --> 00:19:18.590
and then talk to
Observatory and say,

00:19:18.590 --> 00:19:20.690
do I have any
controllers-- any views,

00:19:20.690 --> 00:19:26.970
if you're using MBC--
still on the heap?

00:19:26.970 --> 00:19:29.760
So you can easily build
these into your tests

00:19:29.760 --> 00:19:32.730
and make sure whenever
people add features--

00:19:32.730 --> 00:19:35.900
and once you have hundreds
of engineers adding features,

00:19:35.900 --> 00:19:41.720
you want to make sure
that these problems don't

00:19:41.720 --> 00:19:45.310
get worse in your system
as your application grows.

00:19:45.310 --> 00:19:50.700
So today, for a very large
business application,

00:19:50.700 --> 00:19:54.890
we have very stable and
low memory use using Dart.

00:19:54.890 --> 00:20:02.050
So typically at p50th, we're
in the 100 to 150 range.

00:20:02.050 --> 00:20:06.690
And p90th, we're staying
well under 300 megs.

00:20:10.065 --> 00:20:15.430
So the tools that Dart provided
were really key for us too,

00:20:15.430 --> 00:20:18.110
not only in our
daily workflow to be

00:20:18.110 --> 00:20:21.140
able to just pull up
Observatory and use

00:20:21.140 --> 00:20:27.740
it to make sure we didn't
have any issues regarding

00:20:27.740 --> 00:20:31.520
strong references that
we were holding on,

00:20:31.520 --> 00:20:34.960
but these tools also
allow you to build them

00:20:34.960 --> 00:20:42.700
into your systems that
monitor your health.

00:20:42.700 --> 00:20:49.565
And another big
requirement we have in Ads

00:20:49.565 --> 00:20:54.970
is that we need to scale
to very large teams.

00:20:54.970 --> 00:21:00.140
So when you put together a
large number of applications

00:21:00.140 --> 00:21:07.910
in one big system, sometimes it
feels like it looks like this.

00:21:07.910 --> 00:21:12.530
Essentially, the bits
and pieces work together.

00:21:12.530 --> 00:21:18.480
But it's not exactly a harmony.

00:21:18.480 --> 00:21:23.880
So with Dart, as Ted said,
batteries are included.

00:21:23.880 --> 00:21:29.130
It shipped with wonderful
libraries from day one.

00:21:29.130 --> 00:21:31.700
And the libraries are
consistent across.

00:21:31.700 --> 00:21:36.370
So if a library had to
use a certain pattern,

00:21:36.370 --> 00:21:41.990
it was iterables or streams
and it was consistently so.

00:21:41.990 --> 00:21:46.630
We didn't have one library
in the system calling

00:21:46.630 --> 00:21:51.130
it push or destroy and
another library calling

00:21:51.130 --> 00:21:52.820
it add and clear.

00:21:52.820 --> 00:21:55.170
It was these patterns
that are nicely

00:21:55.170 --> 00:21:58.830
followed by not just the
dart team but all of you

00:21:58.830 --> 00:22:02.680
out there publishing
pub packages.

00:22:02.680 --> 00:22:06.680
The libraries look very
similar and work in harmony.

00:22:06.680 --> 00:22:10.580
I can easily read
code from a team

00:22:10.580 --> 00:22:12.710
I had no contact with before.

00:22:12.710 --> 00:22:15.960
If they're using
Dart, it just feels

00:22:15.960 --> 00:22:20.500
natural to reuse
their libraries.

00:22:20.500 --> 00:22:25.680
And that sort of
helped us become--

00:22:25.680 --> 00:22:27.880
although we have huge
number of engineers,

00:22:27.880 --> 00:22:34.950
we became a smaller team
that reused more code.

00:22:34.950 --> 00:22:37.210
And some of the
libraries we built

00:22:37.210 --> 00:22:38.960
we were able to open source.

00:22:38.960 --> 00:22:41.830
For example, in
the business app,

00:22:41.830 --> 00:22:47.090
we had needs for showing
pipeline charts but 50 of them

00:22:47.090 --> 00:22:48.570
on a screen for each customer.

00:22:48.570 --> 00:22:50.860
You would just see
your sales pipeline.

00:22:50.860 --> 00:22:53.970
And we needed to do
that in x milliseconds.

00:22:53.970 --> 00:22:55.430
So it was a good experience.

00:22:55.430 --> 00:22:59.790
So we took these three
and we did a port.

00:22:59.790 --> 00:23:01.740
It's called charted.

00:23:01.740 --> 00:23:03.400
So you can find it on GitHub.

00:23:03.400 --> 00:23:06.110
It's basically a
nice charting library

00:23:06.110 --> 00:23:13.010
and we shared that with
the Dart ecosystem.

00:23:13.010 --> 00:23:16.680
Some of our RPC libraries
we were able to share.

00:23:16.680 --> 00:23:21.020
And a lot of the dart
inspired all the teams

00:23:21.020 --> 00:23:22.980
to follow the same patterns.

00:23:22.980 --> 00:23:27.810
Our RPC back end, when we say,
give me a customer record,

00:23:27.810 --> 00:23:29.310
we literally get the stream.

00:23:29.310 --> 00:23:31.970
We say, listen on the stream.

00:23:31.970 --> 00:23:33.790
Send the query,
listen on the stream.

00:23:33.790 --> 00:23:35.800
And then whenever
there's an update,

00:23:35.800 --> 00:23:39.390
our RPC layer just pushes
it through a stream.

00:23:39.390 --> 00:23:45.330
So it's allowed us to create
much, much nicer libraries.

00:23:45.330 --> 00:23:47.590
TED SANDER: So like
I was saying before,

00:23:47.590 --> 00:23:52.510
we had this is problem of
our apps were really large,

00:23:52.510 --> 00:23:55.890
but they were really highly
connected and tightly coupled.

00:23:55.890 --> 00:23:58.140
It was hard to even
get our head around

00:23:58.140 --> 00:24:01.340
how we were going to start
updating parts of it.

00:24:01.340 --> 00:24:04.200
Not all our teams had
the luxury of a team

00:24:04.200 --> 00:24:07.870
like Ferhat to just do
an RM-RF like Dan said

00:24:07.870 --> 00:24:09.470
and just start from scratch.

00:24:09.470 --> 00:24:10.970
We did actually
have the requirement

00:24:10.970 --> 00:24:13.470
that we did have to
build up some of the apps

00:24:13.470 --> 00:24:18.210
and slowly start iterating
to get a better system.

00:24:18.210 --> 00:24:21.630
And so how we did this was we
started modulizing our apps.

00:24:21.630 --> 00:24:25.550
So even though to the end user
it looks like one large app

00:24:25.550 --> 00:24:27.910
that they can use,
internally, it's

00:24:27.910 --> 00:24:31.310
actually a couple smaller
apps built together

00:24:31.310 --> 00:24:32.655
to become one coherent one.

00:24:32.655 --> 00:24:34.030
And this is very
important to us.

00:24:34.030 --> 00:24:37.636
Because we can't allow
the user to say, well,

00:24:37.636 --> 00:24:39.010
if you want to do
search ads, you

00:24:39.010 --> 00:24:40.820
need to go to this
application over here.

00:24:40.820 --> 00:24:42.705
If you want to do
YouTube ads, you've

00:24:42.705 --> 00:24:44.350
got to go to a different one.

00:24:44.350 --> 00:24:47.300
If you want to have display
ads, well, that's another URL

00:24:47.300 --> 00:24:48.380
that you need to go hit.

00:24:48.380 --> 00:24:50.440
It was very important
that we had one stop

00:24:50.440 --> 00:24:52.180
shopping for advertisers.

00:24:52.180 --> 00:24:53.860
But yet, we found
that if we tried

00:24:53.860 --> 00:24:58.410
to do this all in one large app,
our team's velocity grounded

00:24:58.410 --> 00:25:01.710
to a halt. It was really
hard to add more engineers

00:25:01.710 --> 00:25:03.990
on this humongous
app and allow them

00:25:03.990 --> 00:25:06.800
to iterate quickly and
start doing new stuff

00:25:06.800 --> 00:25:09.760
and to build out new
features and really get

00:25:09.760 --> 00:25:12.710
the velocity that they
crave and they desire.

00:25:12.710 --> 00:25:13.710
So how did we do this?

00:25:13.710 --> 00:25:15.680
Well, we started
splitting them up,

00:25:15.680 --> 00:25:17.610
and yet we used this
very simple pattern

00:25:17.610 --> 00:25:20.010
to make sure that they could
still talk to each other.

00:25:20.010 --> 00:25:22.260
And why do we want
to keep it simple?

00:25:22.260 --> 00:25:24.710
Well, we want one
very simple interface

00:25:24.710 --> 00:25:26.570
because all these
modules will need

00:25:26.570 --> 00:25:28.650
to talk to each other using it.

00:25:28.650 --> 00:25:31.340
And if it's complicated and
we have to change it often,

00:25:31.340 --> 00:25:34.255
there's a chance that we're
going to break all the time.

00:25:34.255 --> 00:25:36.490
And we really don't
want that to happen.

00:25:36.490 --> 00:25:38.590
So if we keep it
simple yet powerful,

00:25:38.590 --> 00:25:40.420
we don't want to
change it too often

00:25:40.420 --> 00:25:43.010
and yet everybody
gets the power of it.

00:25:43.010 --> 00:25:46.930
This actually turns out to be
like six lines of JavaScript

00:25:46.930 --> 00:25:50.210
that allows us to talk
between all these apps.

00:25:50.210 --> 00:25:52.190
And the cool thing
about it is we

00:25:52.190 --> 00:25:55.120
can have different technologies
for each one of these apps.

00:25:55.120 --> 00:25:57.350
We could have an
app written in GWT,

00:25:57.350 --> 00:25:59.420
we could have an
app written in JS,

00:25:59.420 --> 00:26:01.630
we could have an app written
in Flex if we wanted to.

00:26:01.630 --> 00:26:03.900
We don't, but we could.

00:26:03.900 --> 00:26:05.920
As long as it talked
JavaScript, we

00:26:05.920 --> 00:26:10.820
could actually have them
talk in between each other.

00:26:10.820 --> 00:26:15.420
Yet, it was important for us to
have this consistent API layer.

00:26:15.420 --> 00:26:18.350
We needed the data
consistency always.

00:26:18.350 --> 00:26:21.160
You could imagine that if our
data ever gets inconsistent,

00:26:21.160 --> 00:26:24.430
it is a nightmare to make
sure that it's cleaned up

00:26:24.430 --> 00:26:25.450
at the end of the day.

00:26:25.450 --> 00:26:28.750
Migrations are a pain, and
we do not like doing them.

00:26:28.750 --> 00:26:31.470
Also, if there's a
bug in the system

00:26:31.470 --> 00:26:35.150
or you accidentally introduce
some data the shouldn't have,

00:26:35.150 --> 00:26:38.750
it's possible to cause millions
and millions of dollars

00:26:38.750 --> 00:26:42.370
to be lost very easily and
it's very scary sometimes.

00:26:42.370 --> 00:26:44.390
So if we had this
consistent API layer,

00:26:44.390 --> 00:26:46.430
we could make sure that
the data was always

00:26:46.430 --> 00:26:48.020
saved in the same way.

00:26:48.020 --> 00:26:50.370
So all the apps, even though
they were separate apps,

00:26:50.370 --> 00:26:54.320
we're still talking to the back
end in a consistent manner.

00:26:54.320 --> 00:26:55.980
So let me give you
an example of this--

00:26:55.980 --> 00:26:57.813
and I'm actually going
to do a live example.

00:27:01.980 --> 00:27:04.170
So this is AdWords.

00:27:06.950 --> 00:27:09.430
Many of you might not
actually recognize it,

00:27:09.430 --> 00:27:13.710
but if you were an ad agency, it
would be very familiar to you.

00:27:13.710 --> 00:27:18.070
And on the left and on the top,
that's actually separate apps.

00:27:18.070 --> 00:27:20.650
And they're GWT apps right
now, and what we actually

00:27:20.650 --> 00:27:21.750
had before.

00:27:21.750 --> 00:27:23.530
But this app in the
center right here

00:27:23.530 --> 00:27:26.320
is actually written in Dart.

00:27:26.320 --> 00:27:29.200
We could allow us to do
business logic-- covers,

00:27:29.200 --> 00:27:32.820
all that good stuff-- and it
could interop between the two

00:27:32.820 --> 00:27:34.127
systems very easily.

00:27:34.127 --> 00:27:35.710
So it allowed us to
iterate-- our team

00:27:35.710 --> 00:27:38.290
to iterate-- and get some
Dart app code out there

00:27:38.290 --> 00:27:40.390
without rewriting everything.

00:27:40.390 --> 00:27:43.630
Another benefit is these
charts were pretty complicated.

00:27:43.630 --> 00:27:46.220
We didn't want to write
them from scratch.

00:27:46.220 --> 00:27:48.350
So we could leverage
the JS library

00:27:48.350 --> 00:27:50.450
we had a Google to
actually provide

00:27:50.450 --> 00:27:53.790
these charts for us, allowing
us to not have to rewrite

00:27:53.790 --> 00:27:57.970
every library if we chose to.

00:27:57.970 --> 00:28:02.710
And it allowed us to keep
the animations and all

00:28:02.710 --> 00:28:06.150
those cool things, but yet still
have all of our business logic

00:28:06.150 --> 00:28:08.690
and all the other UI
elements in Dart still.

00:28:11.410 --> 00:28:16.310
Now, the crazy part-- if
we want to go even deeper--

00:28:16.310 --> 00:28:18.890
is this app is now a GWT app.

00:28:18.890 --> 00:28:22.300
So now we a GWT app
inside of a Dart app

00:28:22.300 --> 00:28:24.190
which is inside of a GWT app.

00:28:24.190 --> 00:28:25.440
We've got to go deeper, right?

00:28:28.340 --> 00:28:30.850
So it really allowed us to
interate and not replace

00:28:30.850 --> 00:28:32.620
everything if we chose to.

00:28:32.620 --> 00:28:33.970
Sometimes we could.

00:28:33.970 --> 00:28:36.550
We could do what Ferhat's team
did and just burn everything

00:28:36.550 --> 00:28:37.850
and start anew.

00:28:37.850 --> 00:28:41.230
But it also allowed us to
iterate and make changes

00:28:41.230 --> 00:28:43.070
individually and
allow teams that

00:28:43.070 --> 00:28:47.580
wanted to velocity without
sacrificing all the hard work

00:28:47.580 --> 00:28:51.270
and app that they had currently.

00:28:51.270 --> 00:28:54.570
So the strategy for this is
really divide and conquer.

00:28:54.570 --> 00:28:57.410
Even if you could start
over, it's still a good idea

00:28:57.410 --> 00:29:00.330
to keep your app modulized.

00:29:00.330 --> 00:29:03.800
You hope your app can
scale from a team that's

00:29:03.800 --> 00:29:06.570
two or three people to
hundreds and hundreds.

00:29:06.570 --> 00:29:08.860
And if you keep them
modulized, you can do that.

00:29:08.860 --> 00:29:10.980
You can keep the problem
smaller and allow

00:29:10.980 --> 00:29:13.900
them to think about it.

00:29:13.900 --> 00:29:17.770
FERHAT BUJUKKOKTEN: So
finally, before Kevin throws me

00:29:17.770 --> 00:29:22.490
off the stage-- we're a
little over time-- we ended up

00:29:22.490 --> 00:29:23.650
with a wonderful system.

00:29:23.650 --> 00:29:26.466
So in six months,
we built the app

00:29:26.466 --> 00:29:28.510
and shipped the first version.

00:29:28.510 --> 00:29:31.310
And CSAT scores
more than doubled.

00:29:31.310 --> 00:29:34.845
And we had a really happy team.

00:29:34.845 --> 00:29:37.250
So the developers were happy.

00:29:37.250 --> 00:29:38.650
The users were happy.

00:29:38.650 --> 00:29:41.120
And some of the
experiences we had,

00:29:41.120 --> 00:29:44.340
they were so successful
Ads decided basically

00:29:44.340 --> 00:29:46.830
to invest heavily in Dart.

00:29:46.830 --> 00:29:50.720
And many of the teams
are now coming online

00:29:50.720 --> 00:29:55.240
and they're starting to
build their apps in Dart.

00:29:55.240 --> 00:29:58.650
We'd be happy to talk
to you afterwards.

00:29:58.650 --> 00:30:01.920
And thank you.

