WEBVTT
Kind: captions
Language: en

00:00:10.430 --> 00:00:11.090
NAZMUL IDRIS: Hi everyone.

00:00:11.090 --> 00:00:11.900
I'm Nazmul.

00:00:11.900 --> 00:00:13.210
I'm a developer.

00:00:13.210 --> 00:00:14.040
IZABEL IDRIS: And
hi, everyone.

00:00:14.040 --> 00:00:14.300
I'm Izabel.

00:00:14.300 --> 00:00:15.300
I'm a designer.

00:00:15.300 --> 00:00:17.690
NAZMUL IDRIS: Welcome to UX
Design For Developers.

00:00:17.690 --> 00:00:20.400
You may recognize us from I/O
'13 where we did the design

00:00:20.400 --> 00:00:23.160
lab which got a lot
of great feedback.

00:00:23.160 --> 00:00:25.680
That confirmed that there's
a great demand for design

00:00:25.680 --> 00:00:27.650
content from the developer
community.

00:00:27.650 --> 00:00:30.620
This is why we're starting this
GDL series on design.

00:00:30.620 --> 00:00:32.380
And over the coming months we're
planning on bringing you

00:00:32.380 --> 00:00:34.930
some great content on the design
process, on mobile

00:00:34.930 --> 00:00:36.590
design, platform design.

00:00:36.590 --> 00:00:38.110
And we're planning on having
some great guests

00:00:38.110 --> 00:00:40.400
on the show as well.

00:00:40.400 --> 00:00:42.870
This show is really for design
minded developers who want to

00:00:42.870 --> 00:00:45.770
learn how to use user centric
design to build products that

00:00:45.770 --> 00:00:48.350
deliver a great user experience
and that are not

00:00:48.350 --> 00:00:51.360
just a random collection
of features.

00:00:51.360 --> 00:00:54.120
Before we get started I just
wanted to mention that we will

00:00:54.120 --> 00:00:56.500
not be focusing on UI
elements, design

00:00:56.500 --> 00:00:57.630
guidelines, and APIs.

00:00:57.630 --> 00:01:01.920
Instead we will focus purely
on user experience.

00:01:01.920 --> 00:01:03.910
So I wanted to set the stage
and talk briefly about why

00:01:03.910 --> 00:01:06.150
it's important for developers
like us to engage in the

00:01:06.150 --> 00:01:08.150
design process.

00:01:08.150 --> 00:01:12.220
We really need to think about
building products rather than

00:01:12.220 --> 00:01:14.680
just focusing on delivering
features

00:01:14.680 --> 00:01:18.600
on a release schedule.

00:01:18.600 --> 00:01:21.360
As developers, we understand
what it means to have velocity

00:01:21.360 --> 00:01:23.130
in implementing feature
requests.

00:01:23.130 --> 00:01:26.190
However, we rarely get to see
how our final products are

00:01:26.190 --> 00:01:28.740
used by real people
in the real world.

00:01:28.740 --> 00:01:31.530
And all too often we don't see
our contribution to the final

00:01:31.530 --> 00:01:33.430
product at all.

00:01:33.430 --> 00:01:35.250
You might think that if you
don't write front end or UI

00:01:35.250 --> 00:01:37.580
code that you don't impact
the user experience for

00:01:37.580 --> 00:01:39.250
product in any way.

00:01:39.250 --> 00:01:41.210
But UI and UX are
not the same.

00:01:41.210 --> 00:01:44.220
For example, when you compose an
email in Gmail for Android

00:01:44.220 --> 00:01:47.010
and you don't have network
access, Gmail allows you to do

00:01:47.010 --> 00:01:48.100
this anyway.

00:01:48.100 --> 00:01:50.530
What Gmail does not do when you
press the send button is

00:01:50.530 --> 00:01:53.216
notify you that you don't have
network access and that you

00:01:53.216 --> 00:01:55.040
should try a different radio.

00:01:55.040 --> 00:01:57.500
This is a great example of how
good user experience is

00:01:57.500 --> 00:02:01.570
delivered by Gmail without
any UI whatsoever.

00:02:01.570 --> 00:02:04.270
So, again, UI and UX
are not the same.

00:02:04.270 --> 00:02:07.500
UI has to do with visual
layouts, colors, themes,

00:02:07.500 --> 00:02:09.030
animations, and widgets.

00:02:09.030 --> 00:02:12.230
While UI is important for user
interaction, it is not the

00:02:12.230 --> 00:02:14.980
only thing that's interacting
with the user.

00:02:14.980 --> 00:02:18.470
The visual and non visual code
comes together to deliver the

00:02:18.470 --> 00:02:22.000
overall user experience.

00:02:22.000 --> 00:02:25.050
So good user experience is about
removing annoyances,

00:02:25.050 --> 00:02:28.460
needless distraction, and
friction so that end users can

00:02:28.460 --> 00:02:31.800
accomplish their tasks
with ease and grace.

00:02:31.800 --> 00:02:33.800
Google Now is a great example
of this in action.

00:02:33.800 --> 00:02:34.830
It's unobtrusive.

00:02:34.830 --> 00:02:36.650
It does everything it needs
to in the background.

00:02:36.650 --> 00:02:38.540
And the UI is very minimal.

00:02:38.540 --> 00:02:41.880
Google Now delivers unexpected
delight by pleasantly

00:02:41.880 --> 00:02:44.210
surprising you with relevant
information just

00:02:44.210 --> 00:02:45.820
when you need it.

00:02:45.820 --> 00:02:49.680
We should own the unexpected
delight that users feel.

00:02:49.680 --> 00:02:51.530
We should also take
responsibility

00:02:51.530 --> 00:02:53.170
for delivering it.

00:02:53.170 --> 00:02:55.030
The products that we build
can make people happy.

00:02:57.540 --> 00:03:00.860
So since the smartphone
revolution happened a few

00:03:00.860 --> 00:03:03.180
years ago, everything
has changed.

00:03:03.180 --> 00:03:05.930
Users have expectations of a
certain level of fit and

00:03:05.930 --> 00:03:08.790
finish, innovation and quality
that comes from something

00:03:08.790 --> 00:03:13.000
Google, Apple, or Microsoft
would put in their products.

00:03:13.000 --> 00:03:15.290
So as a third party developer,
meaning that you're not in the

00:03:15.290 --> 00:03:18.640
core Android or iOS or Windows
platform teams, your job is

00:03:18.640 --> 00:03:21.580
now harder because the quality
of first party apps keeps

00:03:21.580 --> 00:03:23.230
getting better and better.

00:03:23.230 --> 00:03:24.870
So how do you stay relevant?

00:03:24.870 --> 00:03:27.255
How do you get people to use
your apps and not just install

00:03:27.255 --> 00:03:31.120
and forget them or just ignore
them altogether?

00:03:31.120 --> 00:03:33.192
If you want a chance at success
it's crucial for you

00:03:33.192 --> 00:03:35.860
to keep the end user in mind
and to create a compelling

00:03:35.860 --> 00:03:37.110
user experience for them.

00:03:40.010 --> 00:03:41.440
Now I'm going to show
you some examples of

00:03:41.440 --> 00:03:42.660
good UI and bad UX.

00:03:42.660 --> 00:03:44.650
This will help you further
disambiguate

00:03:44.650 --> 00:03:45.900
one from the other.

00:03:48.180 --> 00:03:51.260
We can all agree that user
account creation and login or

00:03:51.260 --> 00:03:53.000
the bane of our existence.

00:03:53.000 --> 00:03:55.160
When was the last time you
looked forward to creating yet

00:03:55.160 --> 00:03:56.660
another account on a
website you may or

00:03:56.660 --> 00:03:58.320
may not visit again?

00:03:58.320 --> 00:04:01.010
So let's take a second to
admire this nice account

00:04:01.010 --> 00:04:03.670
creation form.

00:04:03.670 --> 00:04:06.765
Now, as a developer you're
probably thinking, I made it

00:04:06.765 --> 00:04:09.730
validate all the fields, it's
mobile friendly, the form has

00:04:09.730 --> 00:04:10.570
a great UI.

00:04:10.570 --> 00:04:11.400
It's legible.

00:04:11.400 --> 00:04:12.360
It's got lots of padding.

00:04:12.360 --> 00:04:14.206
And it's nicely laid out.

00:04:14.206 --> 00:04:17.000
But this is probably what
your user's thinking.

00:04:17.000 --> 00:04:19.390
I just tried a demo of your
product and it's exactly what

00:04:19.390 --> 00:04:20.990
I've been looking for.

00:04:20.990 --> 00:04:22.600
I wanted to get the full
version right now.

00:04:22.600 --> 00:04:24.500
So why am I being punished by
having to fill out this

00:04:24.500 --> 00:04:26.960
massive form?

00:04:26.960 --> 00:04:28.110
So how do you resolve this?

00:04:28.110 --> 00:04:29.740
The right way to do this, of
course, is to use something

00:04:29.740 --> 00:04:33.860
like G+ sign in so your users
can create an account in a

00:04:33.860 --> 00:04:35.130
matter of seconds.

00:04:35.130 --> 00:04:37.830
By removing friction from the
login process, you can make

00:04:37.830 --> 00:04:40.220
sure that you're not getting in
the way of gaining another

00:04:40.220 --> 00:04:43.360
user for your product.

00:04:43.360 --> 00:04:45.000
So here's another example.

00:04:45.000 --> 00:04:47.530
Online shopping is another
thing that we all do.

00:04:47.530 --> 00:04:49.630
And here's a check out flow
that everyone should be

00:04:49.630 --> 00:04:51.330
familiar with.

00:04:51.330 --> 00:04:54.410
Just take a second to admire
the length of these forms.

00:04:54.410 --> 00:04:57.480
There's a lot of information
for a user to fill out.

00:04:57.480 --> 00:04:59.780
Now, as a developer you might
be thinking, I've collected

00:04:59.780 --> 00:05:02.270
all the data I need in order to
make the API calls to the

00:05:02.270 --> 00:05:04.450
fulfillment and payment
back ends.

00:05:04.450 --> 00:05:06.570
And from a UI perspective
it's a great form.

00:05:06.570 --> 00:05:08.770
Lots of detailed information has
to be collected and it's

00:05:08.770 --> 00:05:11.020
pretty clearly layed out.

00:05:11.020 --> 00:05:13.070
Now, this is probably what
your user's thinking.

00:05:13.070 --> 00:05:14.530
I spent a lot of
time and effort

00:05:14.530 --> 00:05:16.150
adding stuff to my cart.

00:05:16.150 --> 00:05:18.220
And I'm trying to spend a lot
of money on your website.

00:05:18.220 --> 00:05:20.315
But had I known I'd have to do
all this paperwork, I would

00:05:20.315 --> 00:05:22.200
have probably not used
this website.

00:05:22.200 --> 00:05:25.240
But since I'm already vested,
why do I feel like checking

00:05:25.240 --> 00:05:28.440
out is as painful as
doing my taxes?

00:05:28.440 --> 00:05:30.630
So how do we result this?

00:05:30.630 --> 00:05:32.730
One way to do it is to use
Google Wallet so that your

00:05:32.730 --> 00:05:35.360
users can pay for their stuff
in a matter of seconds.

00:05:35.360 --> 00:05:37.860
By removing friction from the
all important checkout flow,

00:05:37.860 --> 00:05:40.370
which is essentially where
you're getting paid, your

00:05:40.370 --> 00:05:42.460
user's more likely to
come back and buy

00:05:42.460 --> 00:05:43.710
more stuff from you.

00:05:46.890 --> 00:05:49.280
So here are a few more best
practices that you should

00:05:49.280 --> 00:05:52.500
consider in order to deliver
the best possible UX in the

00:05:52.500 --> 00:05:55.160
products that you're
working on.

00:05:55.160 --> 00:05:57.110
On mobile devices the
quality of network

00:05:57.110 --> 00:05:58.850
connectivity varies greatly.

00:05:58.850 --> 00:06:01.070
So it makes sense to think about
what your application

00:06:01.070 --> 00:06:02.620
can do in offline mode.

00:06:02.620 --> 00:06:06.550
For example, Gmail on Android
allows you work offline and

00:06:06.550 --> 00:06:09.990
you can view your downloaded
emails and compose new ones.

00:06:09.990 --> 00:06:13.450
Once network connectivity is
restored, Gmail silently syncs

00:06:13.450 --> 00:06:15.570
everything without notifying
or bugging the user.

00:06:18.300 --> 00:06:21.360
Now, the user's attention span
is also a precious resource.

00:06:21.360 --> 00:06:23.090
So we should use it wisely.

00:06:23.090 --> 00:06:26.060
Design applications so that if
the user is distracted in any

00:06:26.060 --> 00:06:28.220
moment, they can return
to your application

00:06:28.220 --> 00:06:29.770
without much friction.

00:06:29.770 --> 00:06:31.730
A great example, again,
is Gmail.

00:06:31.730 --> 00:06:34.630
It continuously saves emails in
the background when you're

00:06:34.630 --> 00:06:37.830
composing them so if you leave
the app for any reason you'll

00:06:37.830 --> 00:06:39.080
never lose any work.

00:06:41.690 --> 00:06:44.550
If your app is loading a lot
of data, you might consider

00:06:44.550 --> 00:06:47.310
pre fetching chunks of it that
might be needed soon.

00:06:47.310 --> 00:06:49.790
This way the data will be ready
when the user needs it

00:06:49.790 --> 00:06:51.980
and there's no lag or delay in
the user experience as they

00:06:51.980 --> 00:06:54.080
move forward.

00:06:54.080 --> 00:06:56.280
Similarly, for any data you
might have already fetched,

00:06:56.280 --> 00:06:58.960
it's a good idea to cache it
for some period of time in

00:06:58.960 --> 00:07:01.510
case that the user wants go
back to it, that way there

00:07:01.510 --> 00:07:04.130
won't be any lag or delay
when the user goes back.

00:07:07.330 --> 00:07:09.960
I'm going to hand it
off to Izabel now.

00:07:09.960 --> 00:07:10.180
IZABEL IDRIS: All right.

00:07:10.180 --> 00:07:11.140
Now we're going to
talk a little bit

00:07:11.140 --> 00:07:12.980
about the design process.

00:07:12.980 --> 00:07:14.680
So Nazmul's covered some
best practices.

00:07:14.680 --> 00:07:17.320
So let's talk about how we can
actually create amazing user

00:07:17.320 --> 00:07:19.750
experiences that delight
our users.

00:07:19.750 --> 00:07:21.260
So how do you go about
doing this?

00:07:21.260 --> 00:07:24.390
Well, by using the user centric
design process.

00:07:24.390 --> 00:07:26.890
So what is this user centric
design process?

00:07:26.890 --> 00:07:29.190
Well, I'm going to give you a
brief overview of the process,

00:07:29.190 --> 00:07:30.440
which has been adapted
for developers.

00:07:33.030 --> 00:07:36.740
First off, the design process
begins with user research.

00:07:36.740 --> 00:07:39.150
So user researchers go out in
the world and they get a sense

00:07:39.150 --> 00:07:41.690
for what users expect from
technology and a sense of

00:07:41.690 --> 00:07:44.590
their frustrations when these
current expectations aren't

00:07:44.590 --> 00:07:46.600
met by current products
they're using.

00:07:46.600 --> 00:07:49.620
They also give you insights into
what your users want, and

00:07:49.620 --> 00:07:52.180
they gather data from real
people and define things

00:07:52.180 --> 00:07:55.250
called personas and use cases.

00:07:55.250 --> 00:07:58.910
So a persona is a made up user
whose attributes represent

00:07:58.910 --> 00:08:01.260
those of a larger group
of real people.

00:08:01.260 --> 00:08:04.190
So they're used as a conceptual
model to drive the

00:08:04.190 --> 00:08:06.980
design and the functionality
of a product.

00:08:06.980 --> 00:08:09.220
They're also used as a way to
communicate and prioritize

00:08:09.220 --> 00:08:13.120
feature requests amongst PMs,
designers, and developers.

00:08:13.120 --> 00:08:16.040
So it's really important to
understand who your user is

00:08:16.040 --> 00:08:18.040
and what makes them tick.

00:08:18.040 --> 00:08:20.840
So your product can't satisfy
everyone all the time.

00:08:20.840 --> 00:08:23.470
So you need to design for
specific personas and keep

00:08:23.470 --> 00:08:26.380
those in mind.

00:08:26.380 --> 00:08:30.370
So use cases, they describe an
interaction between a persona

00:08:30.370 --> 00:08:31.740
and your product.

00:08:31.740 --> 00:08:34.710
And they describe when, where,
and how a persona actually

00:08:34.710 --> 00:08:37.100
uses the features
of your product.

00:08:37.100 --> 00:08:39.470
So as developers, we
usually think of

00:08:39.470 --> 00:08:41.630
features as bits of code.

00:08:41.630 --> 00:08:44.610
However, real users, they don't
really see it that way.

00:08:44.610 --> 00:08:47.590
So they use a set of features to
accomplish a task within a

00:08:47.590 --> 00:08:49.630
specific physical environment.

00:08:49.630 --> 00:08:51.910
So thinking of features in
terms of use cases and

00:08:51.910 --> 00:08:56.110
personas is a really good habit
for us to get into.

00:08:56.110 --> 00:08:58.690
So as developers, we're all
familiar with features.

00:08:58.690 --> 00:09:01.080
But how do they fit in
the context of a

00:09:01.080 --> 00:09:03.060
persona and a use case?

00:09:03.060 --> 00:09:05.380
So to answer this, let's
consider a feature in the

00:09:05.380 --> 00:09:08.800
Gmail Android app, which allows
users to send emails in

00:09:08.800 --> 00:09:12.160
offline mode when there's
no network.

00:09:12.160 --> 00:09:15.480
So lets picture a user named
George, who's constantly up in

00:09:15.480 --> 00:09:18.430
the air traveling and spends
a lot of time at airports.

00:09:18.430 --> 00:09:21.430
So while he's at the airport,
Georges is using Gmail for

00:09:21.430 --> 00:09:22.840
Android on his smartphone.

00:09:22.840 --> 00:09:24.420
And he's doing lots of other
important things.

00:09:24.420 --> 00:09:26.940
And, of course, being at the
airport, he doesn't have good

00:09:26.940 --> 00:09:28.430
network coverage.

00:09:28.430 --> 00:09:32.490
So if the implementation of
offline mode requires Georgia,

00:09:32.490 --> 00:09:36.230
a busy traveler, to make IT
decisions while he's at the

00:09:36.230 --> 00:09:38.890
airport then it would
be an epic fail.

00:09:38.890 --> 00:09:41.850
So George doesn't have any
patience or bandwidth to deal

00:09:41.850 --> 00:09:45.200
with IT issues about how an app
should behave in online

00:09:45.200 --> 00:09:46.750
versus offline mode.

00:09:46.750 --> 00:09:49.630
So what Gmail for Android does
is, it implements these

00:09:49.630 --> 00:09:52.520
features without any
UI whatsoever.

00:09:52.520 --> 00:09:54.680
So in fact it actually hides
from George whether it's in

00:09:54.680 --> 00:09:56.930
online or offline mode.

00:09:56.930 --> 00:09:59.730
So the Gmail for Android is
actually a great example of

00:09:59.730 --> 00:10:03.110
how a feature, which is composed
without network, que

00:10:03.110 --> 00:10:05.780
for delivery, and send when
network is available has been

00:10:05.780 --> 00:10:08.710
implemented really well for our
persona George, the busy

00:10:08.710 --> 00:10:11.770
traveler, and his use case,
which is sending an email

00:10:11.770 --> 00:10:13.540
while at an airport with
a crappy network.

00:10:16.150 --> 00:10:19.280
So now we know that for personas
are important.

00:10:19.280 --> 00:10:21.700
Let's look at how
they're created.

00:10:21.700 --> 00:10:24.680
So user researchers will gather
a lot of data from real

00:10:24.680 --> 00:10:27.350
people by asking them targeted
questions and also by

00:10:27.350 --> 00:10:31.250
observing them using certain
technologies or products.

00:10:31.250 --> 00:10:34.020
Then user researchers will
categorize these users into

00:10:34.020 --> 00:10:37.770
groups based on their similar
attributes driven by data.

00:10:37.770 --> 00:10:41.040
So then they give this group a
name and a persona is born,

00:10:41.040 --> 00:10:43.410
such as Casey Googler
or Darth Storm.

00:10:46.170 --> 00:10:49.730
So a persona is a target user
for whom your UX is going to

00:10:49.730 --> 00:10:51.740
be optimized moving forwards.

00:10:51.740 --> 00:10:53.820
So here are some things
to keep in mind.

00:10:53.820 --> 00:10:56.400
You don't have to denature your
persona by compositing

00:10:56.400 --> 00:10:58.960
incompatible attributes
into one persona.

00:10:58.960 --> 00:11:02.150
So for example, you can't have
a persona who is a coupon

00:11:02.150 --> 00:11:05.320
clipping bargain shopper and
who's also a foodie that

00:11:05.320 --> 00:11:07.570
doesn't care about price.

00:11:07.570 --> 00:11:10.360
Another example is you can't
have a persona who has joined

00:11:10.360 --> 00:11:14.360
the dark side but also
uses the force.

00:11:14.360 --> 00:11:17.590
So be careful that your design
doesn't attempt to support too

00:11:17.590 --> 00:11:20.530
many personas that are unrelated
because it's going

00:11:20.530 --> 00:11:21.830
to be impossible to
build a product

00:11:21.830 --> 00:11:23.450
that satisfies everybody.

00:11:23.450 --> 00:11:25.920
So for example, you wouldn't
want to design a car that

00:11:25.920 --> 00:11:29.080
targets the following personas,
race car drivers and

00:11:29.080 --> 00:11:31.295
soccer moms and grandmothers.

00:11:31.295 --> 00:11:33.250
This would be a confused car.

00:11:33.250 --> 00:11:34.760
NAZMUL IDRIS: [INAUDIBLE]
that car.

00:11:34.760 --> 00:11:36.820
IZABEL IDRIS: So once you've
decided which personas your

00:11:36.820 --> 00:11:39.480
product is going to support,
it's really important to think

00:11:39.480 --> 00:11:44.470
about use cases or, basically,
how your personas are going to

00:11:44.470 --> 00:11:46.580
use your product in
the real world.

00:11:46.580 --> 00:11:49.670
So let's say for example your
product is an app that allows

00:11:49.670 --> 00:11:52.820
you to order pizza using
your smartphone.

00:11:52.820 --> 00:11:56.380
So let's say our persona, Casey
Googler, she might use

00:11:56.380 --> 00:11:58.910
your app in the following
ways.

00:11:58.910 --> 00:12:01.490
So her kids are hungry
and screaming and

00:12:01.490 --> 00:12:02.990
they need food ASAP.

00:12:02.990 --> 00:12:05.300
Or maybe she's working late and
she doesn't have time to

00:12:05.300 --> 00:12:07.800
make dinner and so she needs
food really fast.

00:12:07.800 --> 00:12:10.060
Or maybe it's on the weekend
and she's watching the game

00:12:10.060 --> 00:12:11.990
with her friends and they all
want to order some food.

00:12:11.990 --> 00:12:15.370
So these are some cases
Casey might have.

00:12:15.370 --> 00:12:18.480
So a good app that supports the
use case of the kids are

00:12:18.480 --> 00:12:22.240
hungry, she'd have a quick way
to order family combo meals.

00:12:22.240 --> 00:12:24.400
And this would include a
combination of best selling

00:12:24.400 --> 00:12:26.930
pizzas, kids menu items,
drinks, and

00:12:26.930 --> 00:12:28.520
deserts all in one.

00:12:28.520 --> 00:12:31.680
So this feature will make
Casey's life really easy at

00:12:31.680 --> 00:12:33.190
this stressful time.

00:12:33.190 --> 00:12:35.390
So Casey's going to really
appreciate the fact that

00:12:35.390 --> 00:12:37.670
you've considered this scenario
in her life when her

00:12:37.670 --> 00:12:40.250
kids are screaming at dinner
time and she's using your apps

00:12:40.250 --> 00:12:41.540
to order food.

00:12:41.540 --> 00:12:44.355
So you will have delivered a
moment of delight for Casey.

00:12:50.440 --> 00:12:54.030
So this is a really good
example of an app whose

00:12:54.030 --> 00:12:57.210
feature set is driven by
personas and their use cases.

00:12:57.210 --> 00:12:59.890
So personas and use cases,
they go hand in hand.

00:12:59.890 --> 00:13:03.120
And they provide a human
context for features.

00:13:03.120 --> 00:13:06.300
So as developers, we're used
to seeing feature lists.

00:13:06.300 --> 00:13:09.870
But we never really put a face
to Casey Googler and we can't

00:13:09.870 --> 00:13:12.370
really understand her pain and
what she's going through when

00:13:12.370 --> 00:13:14.440
she's using your application.

00:13:14.440 --> 00:13:17.060
So when her kids are hungry and
screaming, as a developer

00:13:17.060 --> 00:13:18.490
we don't really understand
that.

00:13:18.490 --> 00:13:22.040
So the design process really
brings us closer to our users.

00:13:22.040 --> 00:13:24.070
And this is really the only
way that we can build apps

00:13:24.070 --> 00:13:27.100
that people love to use.

00:13:27.100 --> 00:13:29.560
So you're probably asking where
do we as developers fit

00:13:29.560 --> 00:13:30.990
in the process?

00:13:30.990 --> 00:13:34.250
So we tend to think of design as
the domain of the designer.

00:13:34.250 --> 00:13:37.100
And we just write code to
their design specs.

00:13:37.100 --> 00:13:39.630
So, unfortunately, this is most
often the case today.

00:13:39.630 --> 00:13:40.880
But it really shouldn't be.

00:13:43.220 --> 00:13:47.010
So as developers, you can make
sure that designs are grounded

00:13:47.010 --> 00:13:48.300
in reality.

00:13:48.300 --> 00:13:50.030
So through our deep knowledge
and understanding of

00:13:50.030 --> 00:13:52.520
technology, we can make sure
that technological constraints

00:13:52.520 --> 00:13:54.650
aren't violated.

00:13:54.650 --> 00:13:57.000
So even designers create
something amazing that

00:13:57.000 --> 00:14:00.340
challenges the status-quo and
breaks new ground, it's not

00:14:00.340 --> 00:14:02.080
going to build itself.

00:14:02.080 --> 00:14:05.580
So as developers, we bring
great designs to life.

00:14:05.580 --> 00:14:08.860
And it's our job as developers
to be inspired by the new

00:14:08.860 --> 00:14:11.330
designs and come up with
innovative ways to build

00:14:11.330 --> 00:14:12.830
software to delight our users.

00:14:15.590 --> 00:14:19.160
So effective collaboration
between teams is really

00:14:19.160 --> 00:14:21.220
crucial to the design process.

00:14:21.220 --> 00:14:24.510
So personas help foster
effective communication

00:14:24.510 --> 00:14:26.690
between different teams
throughout the product

00:14:26.690 --> 00:14:30.730
development life cycle by
removing confusion about who

00:14:30.730 --> 00:14:32.350
our user actually is.

00:14:32.350 --> 00:14:35.330
And so under tight deadlines--
and we're all used to this--

00:14:35.330 --> 00:14:38.000
teams can use personas to
validate decisions about which

00:14:38.000 --> 00:14:39.720
features to cut or
keep and how to

00:14:39.720 --> 00:14:42.610
prioritize those features.

00:14:42.610 --> 00:14:44.630
So ideally initial design
should be turned into

00:14:44.630 --> 00:14:46.440
prototypes that are
tested by real

00:14:46.440 --> 00:14:47.690
users as soon as possible.

00:14:51.530 --> 00:14:53.840
So I'm going to hand it off to
Nazmul right now to talk about

00:14:53.840 --> 00:14:55.890
a design activity that
you guys can do.

00:14:55.890 --> 00:14:57.260
NAZMUL IDRIS: Thanks, Izabel.

00:14:57.260 --> 00:14:59.400
So we've heard a lot about
the design process.

00:14:59.400 --> 00:15:04.610
And so we just wanted to talk
about how you can actually

00:15:04.610 --> 00:15:07.530
follow this process to design
an application.

00:15:07.530 --> 00:15:10.390
Let's say that you wanted to
build an application that you

00:15:10.390 --> 00:15:12.500
could use to order
pizza online.

00:15:12.500 --> 00:15:14.690
So we're not actually going to
build this application or

00:15:14.690 --> 00:15:16.090
design it right now.

00:15:16.090 --> 00:15:19.180
But we will talk through the
steps that you would take if

00:15:19.180 --> 00:15:23.020
you were to design this app.

00:15:23.020 --> 00:15:24.870
So now, again, the purpose of
this application that we're

00:15:24.870 --> 00:15:28.710
designing is to allow users to
order pizza from a single

00:15:28.710 --> 00:15:29.410
pizza parlor.

00:15:29.410 --> 00:15:32.480
So it's not, like, seamless.

00:15:32.480 --> 00:15:37.780
Now as developers, when we see
this slide our instinct is to

00:15:37.780 --> 00:15:39.630
start thinking about
coding and APIs.

00:15:39.630 --> 00:15:42.370
Instead of thinking about how
we're going to code this up,

00:15:42.370 --> 00:15:45.010
let's do something
different today.

00:15:45.010 --> 00:15:48.960
Let's think about why we're
building this application.

00:15:48.960 --> 00:15:51.130
We want to be a service
to people who

00:15:51.130 --> 00:15:52.310
are hungry for pizza.

00:15:52.310 --> 00:15:55.190
We want them to get exactly what
they want by using the

00:15:55.190 --> 00:15:55.980
application.

00:15:55.980 --> 00:15:58.120
And we want them to
feel delighted to

00:15:58.120 --> 00:15:59.260
have used the app.

00:15:59.260 --> 00:16:01.320
We also want them to tell
their friends about it.

00:16:01.320 --> 00:16:03.240
So this sounds like marketing,
but this is actually the

00:16:03.240 --> 00:16:05.550
result of a good user
experience.

00:16:05.550 --> 00:16:07.960
It's important for us as
developers to stay connected

00:16:07.960 --> 00:16:10.390
to what we're trying to
accomplish here, which is to

00:16:10.390 --> 00:16:12.830
use technology to create
compelling experiences in the

00:16:12.830 --> 00:16:14.460
service of user.

00:16:14.460 --> 00:16:16.630
This is a message that often
gets lost in the rush to get

00:16:16.630 --> 00:16:22.220
features implemented and
released out the door ASAP.

00:16:22.220 --> 00:16:26.470
So let's think about the persona
and use case that we

00:16:26.470 --> 00:16:27.810
will design for.

00:16:27.810 --> 00:16:31.290
So now imagine the perfect
pizza application.

00:16:31.290 --> 00:16:32.480
What would it look like?

00:16:32.480 --> 00:16:34.170
How would people use it?

00:16:34.170 --> 00:16:37.150
When, where, and how would
people use it?

00:16:37.150 --> 00:16:40.130
So think about the people and
use cases that you're going to

00:16:40.130 --> 00:16:41.990
optimize the user
experience for?

00:16:44.630 --> 00:16:46.390
Then let's think about building
a flow that your

00:16:46.390 --> 00:16:48.610
users will follow so they
can go from being

00:16:48.610 --> 00:16:51.270
hungry to being satisfied.

00:16:51.270 --> 00:16:54.310
The flow of screens should
support the list of features

00:16:54.310 --> 00:16:57.320
that neatly fit in the context
provided by your personas and

00:16:57.320 --> 00:16:58.570
your use cases.

00:17:01.260 --> 00:17:04.020
So let's think about how
we would even define an

00:17:04.020 --> 00:17:05.589
application's persona.

00:17:05.589 --> 00:17:08.650
So it's very important to keep
these personas handy, by the

00:17:08.650 --> 00:17:11.440
way, so even after you've
created them you can always

00:17:11.440 --> 00:17:14.109
reference them later on as you
design and even implement your

00:17:14.109 --> 00:17:16.069
application.

00:17:16.069 --> 00:17:18.069
So in order to create
personas let's

00:17:18.069 --> 00:17:19.319
think about a few questions.

00:17:21.520 --> 00:17:25.730
So here's just a few questions
that you might think about to

00:17:25.730 --> 00:17:29.230
help identify attributes that
help define this person.

00:17:29.230 --> 00:17:32.550
So, for example, in the context
of pizza do they value

00:17:32.550 --> 00:17:35.410
convenience over price or do
they bargain shop and are only

00:17:35.410 --> 00:17:37.430
concerned with price?

00:17:37.430 --> 00:17:38.560
Do they have a credit card?

00:17:38.560 --> 00:17:40.230
Do they use Paypal
or Google Wallet?

00:17:40.230 --> 00:17:42.410
The answers to these questions
will determine what

00:17:42.410 --> 00:17:44.890
technologies you use
in the application.

00:17:44.890 --> 00:17:47.030
Do they have dietary
restrictions?

00:17:47.030 --> 00:17:49.090
And, again, this will affect
the types of menus that you

00:17:49.090 --> 00:17:54.100
display, not user interface
menus but actual food menus.

00:17:54.100 --> 00:17:55.750
Do they shop online often?

00:17:55.750 --> 00:17:58.830
Do they primarily do this using
a smartphone or a laptop

00:17:58.830 --> 00:18:01.100
or a tablet?

00:18:01.100 --> 00:18:04.970
So, for example, this can help
you differentiate the design

00:18:04.970 --> 00:18:07.160
for your smartphone application
from your tablet

00:18:07.160 --> 00:18:07.890
application.

00:18:07.890 --> 00:18:09.850
So on the smartphone it's
more actionable.

00:18:09.850 --> 00:18:12.340
The user experience should be
more actionable where they can

00:18:12.340 --> 00:18:14.050
place an order and
go pick it up.

00:18:14.050 --> 00:18:16.550
On a tablet it might be more
research oriented where

00:18:16.550 --> 00:18:19.170
they're considering what to
eat and then they can just

00:18:19.170 --> 00:18:21.610
place the order.

00:18:21.610 --> 00:18:24.090
And, finally, are they
comfortable or willing to

00:18:24.090 --> 00:18:26.610
share sensitive information with
your application, things

00:18:26.610 --> 00:18:28.445
like credit card information
and personal information?

00:18:32.380 --> 00:18:34.760
So now let's talk about the flow
that your persona will go

00:18:34.760 --> 00:18:36.330
through in order to
go from being

00:18:36.330 --> 00:18:37.840
hungry to being satisfied.

00:18:37.840 --> 00:18:40.300
It's important to think about
the flow or path that your

00:18:40.300 --> 00:18:43.255
users will take through your
application and the steps that

00:18:43.255 --> 00:18:49.560
they will need to complete even
before you think about

00:18:49.560 --> 00:18:50.890
sketching out the designs.

00:18:50.890 --> 00:18:53.240
And the sketching has to happen
before implementation.

00:18:55.740 --> 00:18:59.510
So the first step is
they're hungry.

00:18:59.510 --> 00:19:01.652
This is the main thing
motivating the user.

00:19:01.652 --> 00:19:02.690
The want some food.

00:19:02.690 --> 00:19:05.370
In this case it's pizza.

00:19:05.370 --> 00:19:08.120
So the second step in this flow
should be where they can

00:19:08.120 --> 00:19:09.580
create an order.

00:19:09.580 --> 00:19:10.870
They might have dietary
restrictions.

00:19:10.870 --> 00:19:13.500
If we take this into account in
our design, it would be an

00:19:13.500 --> 00:19:17.580
opportunity to deliver delight
to that persona.

00:19:17.580 --> 00:19:20.810
And they should also decide when
and where the food will

00:19:20.810 --> 00:19:22.960
be delivered.

00:19:22.960 --> 00:19:25.260
So the third step is
very important.

00:19:25.260 --> 00:19:27.730
They've figured out what they
want to eat, and now they want

00:19:27.730 --> 00:19:29.380
to complete the order
by paying.

00:19:29.380 --> 00:19:31.470
And this is a great opportunity,
again, to deliver

00:19:31.470 --> 00:19:33.970
delight to the user by making
sure that this payment step is

00:19:33.970 --> 00:19:37.020
super easy.

00:19:37.020 --> 00:19:38.810
Finally, once the user is paid,

00:19:38.810 --> 00:19:40.650
they're now owed a pizza.

00:19:40.650 --> 00:19:43.450
They have an expectation of
when the food will arrive.

00:19:43.450 --> 00:19:46.640
And the application should
ideally provide them with

00:19:46.640 --> 00:19:48.900
accurate status information
so they're aware of

00:19:48.900 --> 00:19:50.160
what's going on.

00:19:50.160 --> 00:19:51.900
For example, is the pizza
being cooked?

00:19:51.900 --> 00:19:52.810
Is it out for delivery?

00:19:52.810 --> 00:19:56.010
Or perhaps the driver can't
enter the property.

00:19:56.010 --> 00:19:57.600
Now, this is a great
opportunity, again, to deliver

00:19:57.600 --> 00:20:01.770
delight by giving them the
information they need without

00:20:01.770 --> 00:20:03.740
inundating them with minute
status updates.

00:20:07.250 --> 00:20:11.070
So once you have your personas
figured out and then you have

00:20:11.070 --> 00:20:14.120
an idea of the flow,
now you can think

00:20:14.120 --> 00:20:15.760
sketching out your design.

00:20:15.760 --> 00:20:18.380
So it doesn't have
to be high tech.

00:20:18.380 --> 00:20:20.860
You can just use index cards,
post it notes, or

00:20:20.860 --> 00:20:23.400
just sheets of paper.

00:20:23.400 --> 00:20:25.470
Make sure, though, that you
focus on the flow of the

00:20:25.470 --> 00:20:29.280
application and not just the
user interface of every

00:20:29.280 --> 00:20:30.650
individual screen.

00:20:30.650 --> 00:20:32.360
So we want to think about this
thing as a collection of

00:20:32.360 --> 00:20:36.140
screens, not just one screen or
just a pile of screens that

00:20:36.140 --> 00:20:38.750
aren't really connected.

00:20:38.750 --> 00:20:41.530
Now, once you've done the
initial design, you've

00:20:41.530 --> 00:20:44.720
sketched it out on paper, go
ahead and put these papers up

00:20:44.720 --> 00:20:47.240
on a wall to depict the flow
that a user would take through

00:20:47.240 --> 00:20:49.400
your application.

00:20:49.400 --> 00:20:52.170
It's important to get feedback
on this flow from other people

00:20:52.170 --> 00:20:53.890
early in the process.

00:20:53.890 --> 00:20:55.340
It's essential to
test out designs

00:20:55.340 --> 00:20:58.510
before you begin coding.

00:20:58.510 --> 00:21:01.550
Now, if possible, try to create
a simple interactive

00:21:01.550 --> 00:21:04.560
prototype using something like
PowerPoint or Keynote.

00:21:04.560 --> 00:21:06.990
You can also use something
like Fluid UI to actually

00:21:06.990 --> 00:21:09.210
create designs that you can
put on your smartphone and

00:21:09.210 --> 00:21:12.270
have a more realistic rendering
of your designs

00:21:12.270 --> 00:21:14.450
Now this is an iterative
process, so don't be afraid to

00:21:14.450 --> 00:21:18.770
make mistakes and make big
changes or even start over.

00:21:18.770 --> 00:21:21.470
This is the time when you want
to make changes and test

00:21:21.470 --> 00:21:22.700
assumptions.

00:21:22.700 --> 00:21:26.080
It's way cheaper to do this at
this stage than have to modify

00:21:26.080 --> 00:21:29.610
code later on when you're, let's
say, your application

00:21:29.610 --> 00:21:31.970
has been released.

00:21:31.970 --> 00:21:34.600
Now, we all make assumptions
about what experience is best

00:21:34.600 --> 00:21:35.190
for our users.

00:21:35.190 --> 00:21:37.940
We all have gut instincts, or
we have a feeling that this

00:21:37.940 --> 00:21:42.080
would work great for us
or someone like us

00:21:42.080 --> 00:21:43.630
or someone we know.

00:21:43.630 --> 00:21:47.050
But unless we test these
assumptions by allowing actual

00:21:47.050 --> 00:21:49.790
users to interact with
prototypes, we can make some

00:21:49.790 --> 00:21:52.460
really costly errors that will
only show themselves after the

00:21:52.460 --> 00:21:55.200
app has been built and people
actually start to use it.

00:21:59.150 --> 00:22:04.010
So to wrap up, designing great
products that delight users is

00:22:04.010 --> 00:22:05.350
what it's all about.

00:22:05.350 --> 00:22:08.650
Great design is not just
the job of designers.

00:22:08.650 --> 00:22:11.590
It's got to be a joint
effort by developers,

00:22:11.590 --> 00:22:13.850
designers, and PM.

00:22:13.850 --> 00:22:16.150
In the future we see developers
becoming more

00:22:16.150 --> 00:22:18.230
design savvy and designers
becoming more

00:22:18.230 --> 00:22:20.260
implementation savvy.

00:22:20.260 --> 00:22:22.450
It's essential that we
understand how the design

00:22:22.450 --> 00:22:26.870
process works and how we
fit in that story.

00:22:26.870 --> 00:22:29.330
With our understanding of
technology, we as developers

00:22:29.330 --> 00:22:32.080
can ground designs in reality
and we can also bring great

00:22:32.080 --> 00:22:33.800
designs to life.

00:22:33.800 --> 00:22:37.870
Now, think product, not screens
or just features.

00:22:37.870 --> 00:22:40.480
Your product is being used by
real people, and you should

00:22:40.480 --> 00:22:42.320
never lose sight of this.

00:22:42.320 --> 00:22:45.710
Don't get bogged down in feature
lists and also being

00:22:45.710 --> 00:22:47.910
in the service only of
release schedules.

00:22:52.380 --> 00:22:54.540
IZABEL IDRIS: So it's really
important that we design for

00:22:54.540 --> 00:22:56.140
personas and use cases.

00:22:56.140 --> 00:22:59.120
So we need to throw out personas
that don't fit.

00:22:59.120 --> 00:23:01.040
And we can't design
for every one.

00:23:01.040 --> 00:23:03.570
So we need to throw out needless
features, personas,

00:23:03.570 --> 00:23:06.480
and use cases that might hinder
our user experience.

00:23:06.480 --> 00:23:09.350
Saying no to the wrong thing
is equally as important as

00:23:09.350 --> 00:23:11.840
saying yes to the right thing.

00:23:11.840 --> 00:23:15.110
So personas help us understand
who is using our products.

00:23:15.110 --> 00:23:17.370
And use cases help us understand
when, where, and

00:23:17.370 --> 00:23:20.470
how they're using
our products.

00:23:20.470 --> 00:23:22.530
do not try and satisfy everyone
or you'll end up

00:23:22.530 --> 00:23:24.880
satisfying no one.

00:23:24.880 --> 00:23:27.000
We need to become a part of
the design story because

00:23:27.000 --> 00:23:29.260
design should be everyone's
responsibility.

00:23:29.260 --> 00:23:32.780
We should own the unexpected
delight that our users feel

00:23:32.780 --> 00:23:34.220
when they use the amazing
products that

00:23:34.220 --> 00:23:35.490
we build for them.

00:23:35.490 --> 00:23:37.310
We need to take ownership of
delivering this delight.

00:23:42.650 --> 00:23:45.400
So we hope that this episode
will be the start of your

00:23:45.400 --> 00:23:48.750
journey into the world of design
driven development.

00:23:48.750 --> 00:23:50.320
We didn't cover everything
in this episode.

00:23:50.320 --> 00:23:51.790
This is just the beginning.

00:23:51.790 --> 00:23:55.400
We're planning to do
a show every month.

00:23:55.400 --> 00:23:58.860
And so please join us on our
G+ community so that we can

00:23:58.860 --> 00:24:00.670
travel on this journey together
and keep this

00:24:00.670 --> 00:24:02.810
conversation going.

00:24:02.810 --> 00:24:05.710
There's going to be links in the
bottom in the description

00:24:05.710 --> 00:24:08.200
of this YouTube video where you
can find out where this G+

00:24:08.200 --> 00:24:09.510
community is.

00:24:09.510 --> 00:24:11.200
And, again, we hope to
see you next month.

00:24:11.200 --> 00:24:13.860
And until then remember,
design is everyone's

00:24:13.860 --> 00:24:15.110
responsibility.

