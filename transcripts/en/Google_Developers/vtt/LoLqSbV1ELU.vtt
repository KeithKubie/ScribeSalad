WEBVTT
Kind: captions
Language: en

00:00:00.112 --> 00:00:04.221
♪ (music) ♪

00:00:06.976 --> 00:00:09.859
Good afternoon, everyone.
Welcome to I/O!

00:00:10.282 --> 00:00:13.695
(cheers and applause)

00:00:14.607 --> 00:00:20.082
For about a third of you here live,
this is your first I/O.

00:00:20.688 --> 00:00:22.511
And it's mine, too.

00:00:22.812 --> 00:00:24.676
(cheers and applause)

00:00:24.855 --> 00:00:28.149
I'm so glad to be here with you, live,

00:00:28.149 --> 00:00:31.107
and to welcome all of those on livestream.

00:00:31.107 --> 00:00:35.427
You know, we have developers here
from 120 countries around the world,

00:00:36.063 --> 00:00:39.021
and many of you watching us
from around the world.

00:00:39.873 --> 00:00:42.070
Thank you for taking the time.

00:00:42.706 --> 00:00:45.712
(cheers and applause)

00:00:49.128 --> 00:00:51.218
Thank you for making time,

00:00:51.218 --> 00:00:53.825
no matter what time it is where you are,

00:00:53.825 --> 00:00:57.658
to invest in yourself, your knowledge,

00:00:57.658 --> 00:00:59.859
and to spend time with us

00:00:59.859 --> 00:01:03.761
as we tell you what we're super excited
about showing you today.

00:01:05.053 --> 00:01:09.629
Many of you are connected
through our developer community groups.

00:01:09.629 --> 00:01:15.169
You know, we have almost 1,000
Google developer groups around the world.

00:01:15.169 --> 00:01:18.654
And if you're one
of our Google developer experts,

00:01:18.654 --> 00:01:22.642
each of you do so much
to help your local developer community

00:01:22.642 --> 00:01:24.838
learn and grow with Google.

00:01:24.838 --> 00:01:27.827
We appreciate everything you do for us.

00:01:28.700 --> 00:01:31.859
(cheers and applause)

00:01:34.821 --> 00:01:37.085
You know, we each have
our own unique paths

00:01:37.085 --> 00:01:39.189
to becoming developers.

00:01:39.189 --> 00:01:41.851
Some of you here are students,

00:01:41.851 --> 00:01:44.028
and just by being here

00:01:44.028 --> 00:01:46.904
you've got a leg up
on your paths to learning.

00:01:47.755 --> 00:01:49.950
When I was in college,

00:01:49.950 --> 00:01:53.338
my first job was
in the Computer Science Lab,

00:01:53.338 --> 00:01:58.502
learning to program the first
3D graphical visualization library

00:01:58.502 --> 00:02:00.871
for gaming and entertainment software

00:02:00.871 --> 00:02:04.146
on a Silicon Graphics IRIS workstation.

00:02:04.919 --> 00:02:09.439
Developing that visualization library
was so magical,

00:02:09.439 --> 00:02:13.838
because people could create amazing
special effects with it so quickly.

00:02:14.519 --> 00:02:18.025
And, even though
I'd never programmed before then,

00:02:18.025 --> 00:02:22.431
I felt confident that,
with the cutting-edge tools

00:02:22.431 --> 00:02:24.629
and some helpful friends,

00:02:24.629 --> 00:02:27.786
I could do it, I could figure it out.

00:02:28.566 --> 00:02:32.633
And that's the feeling
we want each of you to have today,

00:02:32.633 --> 00:02:34.180
and every day,

00:02:34.180 --> 00:02:39.235
that anything is possible,
and that you can create

00:02:39.235 --> 00:02:43.882
that next amazing experience,
app, or startup.

00:02:45.895 --> 00:02:48.796
There's never been
a better time to be a developer.

00:02:49.317 --> 00:02:52.598
There are three important reasons
that I believe this is true.

00:02:53.135 --> 00:02:55.615
First, new user interfaces

00:02:55.615 --> 00:03:00.082
such as voice, camera, speech,

00:03:00.749 --> 00:03:03.298
are making computing ambient,

00:03:03.298 --> 00:03:07.559
available to humans
wherever they are, all the time,

00:03:07.559 --> 00:03:11.001
and enabling much richer
forms of interaction

00:03:11.001 --> 00:03:14.058
than were possible
through keyboards and mice.

00:03:14.586 --> 00:03:17.277
Second, as you heard this morning,

00:03:17.277 --> 00:03:20.451
the Assistant provides great facilities

00:03:20.451 --> 00:03:24.658
to make computing much more helpful
and convenient for people.

00:03:25.337 --> 00:03:29.276
And third, with the advent 
of cloud computing,

00:03:29.276 --> 00:03:33.659
we offer incredibly effective tools
for developers,

00:03:33.659 --> 00:03:37.836
whether that's the convenience
of serverless and container technology

00:03:37.836 --> 00:03:40.646
or the ability to infuse
artificial intelligence

00:03:40.646 --> 00:03:43.870
and machine learning
into your applications.

00:03:44.861 --> 00:03:47.631
Now, Google was founded by developers,

00:03:47.631 --> 00:03:50.206
and we're made up
of engineers and developers.

00:03:50.757 --> 00:03:55.790
Our engineers work hard
to bring you new platforms and APIs

00:03:55.790 --> 00:03:59.273
so that you can get your idea
and your passion

00:03:59.273 --> 00:04:01.529
in front of billions of users,

00:04:01.529 --> 00:04:05.727
including the next billion to come
from around the world.

00:04:06.882 --> 00:04:12.071
We give you an opportunity
to see how far your ideas can go,

00:04:12.071 --> 00:04:15.231
and we're grateful to play a role in this.

00:04:16.371 --> 00:04:20.306
With this opportunity
also comes responsibility.

00:04:21.228 --> 00:04:25.666
Each of us shares
a responsibility to our users

00:04:26.337 --> 00:04:28.366
to make good things for them,

00:04:28.776 --> 00:04:30.734
to be advocates for them,

00:04:31.159 --> 00:04:36.149
to respect them, to help them,
to delight them

00:04:36.149 --> 00:04:41.131
with what you build
with your creativity and passion.

00:04:42.497 --> 00:04:47.532
We at Google have a responsibility
to you, the developer community.

00:04:48.341 --> 00:04:52.520
We seek to empower you
with the technology and tools

00:04:52.520 --> 00:04:57.695
to help you build, grow,
to learn, and to earn.

00:04:58.098 --> 00:05:01.515
And that's exactly
what we're here to do today.

00:05:02.031 --> 00:05:06.922
We're going to spend the next hour
sharing an awesome set of updates

00:05:06.922 --> 00:05:09.373
from our developer teams at Google,

00:05:09.373 --> 00:05:12.970
who are working to enable
and support you on your unique path,

00:05:13.762 --> 00:05:16.962
whether that's the latest advances
in our Assistant,

00:05:16.962 --> 00:05:20.247
machine learning, Android, web, and more.

00:05:20.953 --> 00:05:24.077
We have a fantastic show planned for you.

00:05:24.977 --> 00:05:30.887
To get started, I'd like to welcome Chet
to share the latest from Android.

00:05:31.403 --> 00:05:33.789
♪ (music) ♪

00:05:34.090 --> 00:05:37.031
(cheers and applause)

00:05:44.367 --> 00:05:47.816
We heard in the earlier keynote
about the amazing ecosystem

00:05:47.816 --> 00:05:49.412
that Android has become.

00:05:49.412 --> 00:05:52.525
I want to focus on two aspects
of that ecosystem.

00:05:52.525 --> 00:05:54.765
One is that Android is a product

00:05:54.765 --> 00:05:57.761
that brings rich experiences to users--

00:05:57.761 --> 00:05:59.460
that's all of you--

00:05:59.460 --> 00:06:01.139
all over the world.

00:06:01.139 --> 00:06:03.955
The other is that Android
is also a platform

00:06:03.955 --> 00:06:06.560
that brings capabilities to developers--

00:06:06.560 --> 00:06:08.550
that's also all of you--

00:06:08.550 --> 00:06:10.994
to build powerful applications.

00:06:10.994 --> 00:06:13.354
So today I'm going to talk
about the things that we're doing

00:06:13.354 --> 00:06:17.047
to ensure the users
can have a product that they trust

00:06:17.831 --> 00:06:22.629
while developers become
more productive with our platform.

00:06:22.629 --> 00:06:26.011
So, first, let's talk
about responsibility to our users.

00:06:26.011 --> 00:06:29.959
As a developer community,
we all care about getting this right.

00:06:29.959 --> 00:06:31.768
It's about building a platform

00:06:31.768 --> 00:06:34.759
that gives developers
powerful capabilities

00:06:34.759 --> 00:06:37.330
while making sure that users feel

00:06:37.330 --> 00:06:40.564
that their safety
and privacy is protected.

00:06:41.322 --> 00:06:44.530
When we released Android Q Beta
a few months ago,

00:06:44.530 --> 00:06:47.890
we had nearly 50 features and improvements

00:06:47.890 --> 00:06:51.312
that were all about giving users
more control and transparency

00:06:51.312 --> 00:06:52.899
over their experience.

00:06:53.595 --> 00:06:56.637
But some of those changes
required more effort from you,

00:06:56.637 --> 00:06:58.909
the developers for the platform.

00:06:58.909 --> 00:07:01.319
A good example of that
is the changes in storage.

00:07:01.319 --> 00:07:05.387
We got strong feedback from you
in the Beta 1 and Beta 2 releases

00:07:05.387 --> 00:07:07.488
that helped us find a better way.

00:07:07.488 --> 00:07:10.553
So you'll see
in the Beta 2.5 and 3 releases

00:07:10.553 --> 00:07:11.781
that we have a new approach

00:07:11.781 --> 00:07:14.489
that reflects the input
that we got from you

00:07:14.489 --> 00:07:17.827
and makes it easier to adopt
to those changes going forward.

00:07:18.178 --> 00:07:21.539
So thank you for the feedback,
and please keep it coming.

00:07:21.539 --> 00:07:24.598
This is actually exactly
why we do preview releases,

00:07:24.598 --> 00:07:26.777
because we want to iterate with you

00:07:26.777 --> 00:07:30.612
to find the best solution for everybody
before the final release.

00:07:30.612 --> 00:07:31.933
It's why we do previews,

00:07:31.933 --> 00:07:35.312
and it's also why we love
our developer community.

00:07:35.894 --> 00:07:37.492
Speaking of developers,

00:07:37.492 --> 00:07:39.862
let's talk about developer productivity.

00:07:40.525 --> 00:07:47.340
We care about productivity for developers.

00:07:47.340 --> 00:07:49.837
In fact, we care deeply
about productivity for developers,

00:07:49.837 --> 00:07:52.175
because we are all developers, as well.

00:07:52.175 --> 00:07:54.980
And we know
that the more productive we are,

00:07:55.657 --> 00:07:57.551
the more code we get to write.

00:07:58.082 --> 00:08:02.512
So, two years ago, we announced Kotlin
as a supported language for Android.

00:08:02.512 --> 00:08:05.241
Many developers were using Kotlin already,

00:08:05.241 --> 00:08:06.799
and many more have been using it since.

00:08:06.799 --> 00:08:10.622
In fact, over 50%
of our pro developers are using it,

00:08:10.622 --> 00:08:13.277
and it's the fastest growing
language on GitHub.

00:08:13.277 --> 00:08:15.789
It's production ready,
and it's being used by top apps

00:08:15.789 --> 00:08:17.990
both inside and outside of Google.

00:08:18.370 --> 00:08:20.014
One of the concerns that we have, though,

00:08:20.014 --> 00:08:23.067
is that developers' typing skills
are eroding

00:08:23.067 --> 00:08:27.304
without the need
for so much boilerplate code.

00:08:27.643 --> 00:08:30.657
(cheers and applause)

00:08:33.724 --> 00:08:38.096
In fact, developers are so desperate
for finger exercise

00:08:38.096 --> 00:08:41.452
that they're actually starting
to comment their Kotlin code.

00:08:41.870 --> 00:08:43.814
(laughter)

00:08:44.361 --> 00:08:45.794
A little.

00:08:47.390 --> 00:08:49.504
But you've asked us
to do even more for Kotlin,

00:08:49.504 --> 00:08:51.331
so we're announcing today a big step.

00:08:51.331 --> 00:08:54.271
Android is becoming
increasingly Kotlin-first,

00:08:54.271 --> 00:08:56.192
with many new Jetpack APIs

00:08:56.192 --> 00:09:00.163
being introduced first
for Kotlin developers.

00:09:00.587 --> 00:09:03.673
(cheers and applause)

00:09:05.988 --> 00:09:08.825
We also think that if you have
a new project that you're starting

00:09:08.825 --> 00:09:10.617
that you should be doing it in Kotlin,

00:09:10.617 --> 00:09:13.884
because, frankly, there's less to type,
there's less to test,

00:09:13.884 --> 00:09:15.740
and there's less to maintain.

00:09:15.740 --> 00:09:19.520
We're also investing much more
in tooling, in docs, and in training.

00:09:19.520 --> 00:09:21.538
For example, together with JetBrains,

00:09:21.538 --> 00:09:23.842
we're announcing Kotlin/Everywhere,

00:09:23.842 --> 00:09:26.678
which is a global series
of educational events.

00:09:26.678 --> 00:09:27.825
But maybe you're using

00:09:27.825 --> 00:09:30.670
one of Android's two other
officially-supported languages,

00:09:30.670 --> 00:09:33.110
C++ or the Java programming language.

00:09:33.110 --> 00:09:34.510
That's fine.

00:09:34.510 --> 00:09:36.556
We continue to support these languages,

00:09:36.556 --> 00:09:38.539
and we continue to invest in them.

00:09:38.539 --> 00:09:41.880
For example, we have
a new toolchain for C++.

00:09:41.880 --> 00:09:43.894
On the Java side,
we're offering desugaring

00:09:43.894 --> 00:09:46.342
for language features up through Java 10,

00:09:46.342 --> 00:09:47.706
and soon you'll see desugaring

00:09:47.706 --> 00:09:51.615
for popular OpenJDK libraries
like Time and Streams.

00:09:51.615 --> 00:09:54.466
So you can keep using those languages
if they're using them,

00:09:54.466 --> 00:09:56.377
and trust that we will keep
supporting them.

00:09:56.377 --> 00:09:58.788
We have always been committed on Android

00:09:58.788 --> 00:10:02.200
to compatibility, interoperability
and our ecosystem,

00:10:02.200 --> 00:10:03.938
and that is not changing.

00:10:04.898 --> 00:10:07.080
Last year we announced Android Jetpack,

00:10:07.080 --> 00:10:11.347
which is a set of APIs to accelerate
Android application development.

00:10:11.347 --> 00:10:13.455
We've had great adoption so far,

00:10:13.455 --> 00:10:18.304
with 80% of the top 1,000 apps
shipping with Jetpack modules.

00:10:18.304 --> 00:10:23.319
Jetpack is all about typing less code
to target a larger audience,

00:10:23.319 --> 00:10:28.068
because we support releases
all the way back to API 14.

00:10:28.068 --> 00:10:29.999
It builds on the capabilities
that we already had

00:10:29.999 --> 00:10:31.299
with a support library,

00:10:31.299 --> 00:10:34.371
adds in what we had introduced
with the Architecture Components,

00:10:34.371 --> 00:10:37.845
and we just keep introducing
new APIs and libraries as we go.

00:10:38.166 --> 00:10:41.135
I'm going to talk about
three new developments in Jetpack today--

00:10:41.135 --> 00:10:44.094
a new Camera library,
some new Architecture Components,

00:10:44.094 --> 00:10:47.180
and a brief glimpse into something
brand new we're working on.

00:10:47.884 --> 00:10:50.690
So today we're launching CameraX.

00:10:50.690 --> 00:10:53.459
It's a library to make Camera
application development

00:10:53.459 --> 00:10:55.392
much more easy and consistent

00:10:55.392 --> 00:10:58.609
across 90%
of the Android devices out there.

00:10:58.609 --> 00:11:01.304
A few years ago,
I was talking to a couple of engineers

00:11:01.304 --> 00:11:03.869
from a company that was working
on an interesting photo app.

00:11:03.869 --> 00:11:04.992
It took great pictures,

00:11:04.992 --> 00:11:07.110
it did all these interesting
filtering effects,

00:11:07.110 --> 00:11:08.289
but they had a problem.

00:11:08.289 --> 00:11:12.217
Some of the devices the users had
didn't run their application correctly

00:11:12.217 --> 00:11:14.098
without workarounds in their code.

00:11:14.098 --> 00:11:17.890
It was because of inconsistent support
for some of the platform APIs.

00:11:17.890 --> 00:11:19.773
So here's how CameraX helps.

00:11:20.659 --> 00:11:23.896
It works on releases
all the way back to Lollipop,

00:11:23.896 --> 00:11:26.532
and it can take those workarounds
and put it in the library itself.

00:11:26.532 --> 00:11:28.103
So you call one API,

00:11:28.103 --> 00:11:30.863
and it figures how to make it work
on the runtime device.

00:11:31.361 --> 00:11:34.178
And it does that with more concise APIs

00:11:34.178 --> 00:11:37.750
for core use cases,
so that your code can be smaller.

00:11:37.750 --> 00:11:41.853
And, finally, it adds
an extension add-on feature,

00:11:41.853 --> 00:11:44.141
which can access
device-specific functionality

00:11:44.141 --> 00:11:47.650
like HDR, or night mode, or portrait mode.

00:11:48.042 --> 00:11:51.004
We're working with several manufacturers
on the extensions right now,

00:11:51.004 --> 00:11:52.810
and you'll soon see Extensions coming out

00:11:52.810 --> 00:11:55.715
for both new and existing devices.

00:11:56.682 --> 00:11:59.180
Architecture Components came out
a couple of years ago,

00:11:59.180 --> 00:12:01.731
specifically to address
serious pain points

00:12:01.731 --> 00:12:03.599
in Android development.

00:12:03.599 --> 00:12:05.705
It also works, like the rest of Jetpack,

00:12:05.705 --> 00:12:09.318
across versions
all the way back to API level 14.

00:12:09.318 --> 00:12:12.075
We've had a couple of components
that we introduced last year at I/O

00:12:12.075 --> 00:12:14.104
that recently went 1.0.

00:12:14.104 --> 00:12:15.759
One of those is WorkManager,

00:12:15.759 --> 00:12:18.987
for easier simplification
of background job scheduling.

00:12:18.987 --> 00:12:20.659
The other is Navigation Controller,

00:12:20.659 --> 00:12:24.001
for easier creation and editing
of in-app navigation.

00:12:24.358 --> 00:12:27.050
We're also doing new work
on existing components,

00:12:27.050 --> 00:12:30.486
such as RxJava
and coroutine support in Room,

00:12:30.486 --> 00:12:32.605
as well as, for Kotlin developers,

00:12:32.605 --> 00:12:36.839
deep integration of coroutines
into the Lifecycle and LiveData modules.

00:12:36.839 --> 00:12:39.524
And we're working on new components.

00:12:39.524 --> 00:12:41.559
We announced SavedState for ViewModel,

00:12:41.559 --> 00:12:46.499
which allows easier processing
of application or process restarts,

00:12:47.064 --> 00:12:49.510
and we also have a new Jetpack module
for benchmarking

00:12:49.510 --> 00:12:52.078
which allows much easier
performance testing

00:12:52.078 --> 00:12:54.010
of your application code.

00:12:54.010 --> 00:12:57.349
And there's one more thing I want
to mention about Kotlin development.

00:12:57.351 --> 00:12:59.055
We know that many of you
have been wanting

00:12:59.055 --> 00:13:01.943
a modern reactive-style UI toolkit,

00:13:01.943 --> 00:13:04.918
one that takes advantage of Kotlin

00:13:04.918 --> 00:13:06.918
and also integrates with the platform code

00:13:06.918 --> 00:13:10.951
as well as all of your existing
application code.

00:13:10.951 --> 00:13:13.201
We've been working hard
on a Kotlin-first library

00:13:13.201 --> 00:13:15.555
that we call Jetpack Compose.

00:13:15.555 --> 00:13:19.999
It's a reactive
UI-programming library that's...

00:13:20.652 --> 00:13:25.803
We are proud to announce today
we will be developing in the open in AOSP.

00:13:26.357 --> 00:13:29.204
And that's...
Sure, sure, you can do that.

00:13:29.354 --> 00:13:31.452
(cheers and applause)

00:13:31.652 --> 00:13:34.086
So you can check that out starting today.

00:13:34.086 --> 00:13:35.436
And this is just a brief tease.

00:13:35.436 --> 00:13:36.986
If you want to know more about that,

00:13:36.986 --> 00:13:39.898
attend the "What's New In Android" session

00:13:39.898 --> 00:13:41.501
which immediately follows this keynote.

00:13:41.501 --> 00:13:44.203
So just stay in your seats
and you'll learn more.

00:13:44.669 --> 00:13:46.583
Android Studio launched five years ago.

00:13:46.583 --> 00:13:49.007
Since then they've had
a lot of great features come out

00:13:49.007 --> 00:13:53.408
like ConstraintLayout editing,
lots of profilers, static analysis,

00:13:53.408 --> 00:13:55.122
lots of great Kotlin support.

00:13:55.122 --> 00:13:57.202
But we heard from you
that some of the fundamentals

00:13:57.202 --> 00:14:00.031
didn't work well enough for you,
and it could be really frustrating.

00:14:00.031 --> 00:14:02.060
So we had to revisit some of the basics.

00:14:02.060 --> 00:14:06.331
The entire team, for the last six months,
has stopped feature development completely

00:14:06.331 --> 00:14:10.502
to focus exclusively on quality,
to make the core tool better.

00:14:11.001 --> 00:14:13.791
(cheers and applause)

00:14:17.602 --> 00:14:20.031
They've fixed over 400
high-priority bugs--

00:14:20.031 --> 00:14:22.124
things like crashes
and performance problems,

00:14:22.124 --> 00:14:24.034
UI freezes, memory leaks,

00:14:24.034 --> 00:14:26.895
and we're always working
on build speed as well.

00:14:26.895 --> 00:14:30.290
We've also taken another run
at some features

00:14:30.290 --> 00:14:32.948
to make them work better,
such as Instant Run.

00:14:32.948 --> 00:14:34.946
We heard from you
that it was great when it worked,

00:14:34.946 --> 00:14:36.686
it wasn't reliable enough,

00:14:36.686 --> 00:14:39.121
so we've rewritten that completely
from the ground up

00:14:39.121 --> 00:14:41.613
with a much more stable foundation,

00:14:41.613 --> 00:14:43.849
and it's now called Apply Changes.

00:14:43.849 --> 00:14:46.181
The best part about
all the quality work in Studio

00:14:46.181 --> 00:14:48.244
is it's available today.

00:14:48.244 --> 00:14:52.506
3.5 Beta launches today,
so you can go download it and play with it

00:14:52.506 --> 00:14:54.512
as soon as I'm done talking.

00:14:55.182 --> 00:14:58.248
(cheers and applause)

00:14:59.558 --> 00:15:01.816
So having an application is great,

00:15:01.816 --> 00:15:04.541
but getting it out
to your users, even better.

00:15:04.541 --> 00:15:06.291
So let's talk about distribution.

00:15:06.718 --> 00:15:09.335
We introduced
Android App Bundles last year,

00:15:09.335 --> 00:15:11.858
and now there's
80,000 applications shipping

00:15:11.858 --> 00:15:13.834
with this new bundling format.

00:15:13.834 --> 00:15:17.382
And they're getting an average
APK size savings of about 20%.

00:15:18.281 --> 00:15:21.452
Another thing that helps with size
is Dynamic Feature Modules,

00:15:21.452 --> 00:15:24.453
which was in beta
and is going 1.0 this week.

00:15:24.453 --> 00:15:27.609
This allows you to choose the features
that are downloaded onto a device,

00:15:27.609 --> 00:15:31.613
such as device-specific capabilities,
or country information,

00:15:31.613 --> 00:15:34.400
or on-demand versus install-time features.

00:15:34.400 --> 00:15:36.804
But both of these things
are not just about size,

00:15:36.804 --> 00:15:39.066
they're about the development
and distribution process.

00:15:39.066 --> 00:15:40.367
It's much more modular,

00:15:40.367 --> 00:15:42.702
and it scales with team sizes much better.

00:15:42.702 --> 00:15:45.873
So if you haven't looked into them yet,
we think that you should.

00:15:46.286 --> 00:15:48.639
There's one last area in distribution
I want to talk about.

00:15:48.639 --> 00:15:50.569
It's in-app updates.

00:15:50.982 --> 00:15:53.153
You've asked us
for this feature for a while.

00:15:53.153 --> 00:15:55.239
It's the ability to have
a really important bug

00:15:55.239 --> 00:15:58.069
that needs to be fixed--
let's say there's a security problem,

00:15:58.069 --> 00:16:01.201
or an in-app billing
that's affecting monetization,

00:16:01.201 --> 00:16:03.004
or maybe you just have
a really cool button

00:16:03.004 --> 00:16:04.797
that you want to put in the UI--

00:16:04.797 --> 00:16:07.120
and you want to make sure
that your users get this update

00:16:07.120 --> 00:16:08.356
as soon as possible,

00:16:08.356 --> 00:16:11.586
without waiting for them
to get to the Play Store

00:16:11.586 --> 00:16:13.756
and see that there's an update available.

00:16:13.756 --> 00:16:15.669
That capability is available now,

00:16:15.669 --> 00:16:17.746
and Tor is going to show you how it works.

00:16:17.996 --> 00:16:19.322
(Tor Norbye) Thanks, Chet.

00:16:19.322 --> 00:16:23.388
So, the in-app update functionality
is now part of the Play Core library

00:16:23.388 --> 00:16:26.387
and is available
for all of you to use right away.

00:16:27.235 --> 00:16:30.135
But we've also started working
on a Kotlin and Jetpack API

00:16:30.135 --> 00:16:31.580
to make it simpler to use,

00:16:31.580 --> 00:16:33.821
and that's what I'm going to show you now.

00:16:33.821 --> 00:16:37.689
So here I'm developing
the Google I/O Conference app,

00:16:37.689 --> 00:16:39.872
and I'm going to open up my <i>Activity.</i>

00:16:39.872 --> 00:16:41.289
And in the <i>onCreate</i> method

00:16:41.289 --> 00:16:43.119
I'm going to call
a single extension method,

00:16:43.119 --> 00:16:46.644
<i>updateIfRequired()</i>
and invoke <i>Apply Changes</i>.

00:16:47.165 --> 00:16:50.169
In advance, I've already uploaded
a higher version of my app

00:16:50.169 --> 00:16:52.727
to the Play Store
to simulate a future update.

00:16:52.727 --> 00:16:55.365
And, as you can see,
now when users run my app

00:16:55.365 --> 00:16:59.016
they get this full-screen prompt
asking them to update right away.

00:16:59.534 --> 00:17:03.228
And note that I only had to add
a single line of code to do that.

00:17:04.040 --> 00:17:06.476
But this also means 
that every single update,

00:17:06.476 --> 00:17:09.229
even a minor one, will show this UI,

00:17:09.229 --> 00:17:12.030
and your users may not be
really thrilled about that,

00:17:12.467 --> 00:17:15.294
So we can make the update check smarter.

00:17:15.294 --> 00:17:19.254
We can pass in a <i>lambda</i>
where we look at the offered version code

00:17:19.254 --> 00:17:22.383
and decide whether to show
the full-screen prompt.

00:17:22.383 --> 00:17:24.057
So that way, in the future,

00:17:24.057 --> 00:17:27.241
for each update you can choose
whether to trigger the prompt

00:17:27.241 --> 00:17:29.646
by setting the right bits
in the version code.

00:17:30.119 --> 00:17:32.563
So now I've restarted my app,

00:17:32.563 --> 00:17:35.651
and this update did not request
an immediate prompt

00:17:35.651 --> 00:17:37.328
so we're back in our <i>Activity</i>.

00:17:37.328 --> 00:17:39.992
And notice that there's
an <i>Update</i> button here now.

00:17:39.992 --> 00:17:41.949
That's something I added in advance.

00:17:41.949 --> 00:17:44.834
This is our more flexible update API,

00:17:44.834 --> 00:17:47.126
and here's the code for it.

00:17:47.126 --> 00:17:48.839
I'm not going to explain this,

00:17:48.839 --> 00:17:50.513
because this part depends a lot

00:17:50.513 --> 00:17:53.043
on the surrounding app
you're integrating into.

00:17:53.043 --> 00:17:56.092
But, as you can see,
it's not a lot of work or code.

00:17:56.092 --> 00:17:57.893
So let's take a look
at what this lets you do,

00:17:57.893 --> 00:17:59.170
the flexible update API.

00:17:59.170 --> 00:18:03.326
So this <i>Update</i> button only shows up
if there's an update available.

00:18:03.326 --> 00:18:06.376
As a user, I can click on it
to trigger an update.

00:18:07.278 --> 00:18:09.407
That will then download in the background

00:18:09.407 --> 00:18:11.745
while I can continue to use the app.

00:18:11.745 --> 00:18:13.056
And, when it's done,

00:18:13.056 --> 00:18:15.594
I have the option of restarting
when I am ready to.

00:18:15.884 --> 00:18:18.131
Now, final important point.

00:18:18.367 --> 00:18:21.066
You need to have the foresight
to put an update check

00:18:21.066 --> 00:18:22.953
into your current version.

00:18:22.953 --> 00:18:25.579
That's what will let you
push out an update to it later,

00:18:25.579 --> 00:18:27.223
when you might need it.

00:18:27.603 --> 00:18:28.958
(Chet Haase) Thanks, Tor.

00:18:29.103 --> 00:18:32.227
(applause)

00:18:34.935 --> 00:18:38.542
We had a really quick look today
at how we're making things better

00:18:38.542 --> 00:18:40.747
for both users and developers,

00:18:40.747 --> 00:18:44.636
as we all make Android
a better product and platform--

00:18:44.636 --> 00:18:47.596
from privacy features,
to Kotlin, to Jetpack,

00:18:47.596 --> 00:18:51.923
I really hope you enjoy
the things that we've put in our... Q.

00:18:52.748 --> 00:18:55.199
(laughter)

00:18:56.890 --> 00:18:58.508
Thank Q.

00:18:58.898 --> 00:19:01.206
(laughter and applause)

00:19:04.721 --> 00:19:09.479
So that is my Q to leave, but first...

00:19:09.479 --> 00:19:12.351
One of the exciting things in Android
in the last couple of years

00:19:12.351 --> 00:19:15.060
is the collaboration that we've had
with the Google Assistant.

00:19:15.060 --> 00:19:18.625
Here to tell you more about the Assistant,
here's Chris Turkstra.

00:19:18.834 --> 00:19:19.948
Thank you.

00:19:20.265 --> 00:19:23.156
♪ (music) ♪

00:19:26.045 --> 00:19:27.737
(Chris Turkstra) Thank you, Chet.

00:19:28.832 --> 00:19:33.650
We believe technology is at its best
when it makes things simple,

00:19:33.650 --> 00:19:36.507
and that's really
what the Google Assistant is all about.

00:19:36.507 --> 00:19:39.376
The idea that you can simply
ask for what you want

00:19:39.376 --> 00:19:42.084
without thinking
about all the steps involved

00:19:42.084 --> 00:19:46.338
is a fundamental shift in the way
that people use technology.

00:19:46.338 --> 00:19:48.227
And this isn't just an idea.

00:19:48.227 --> 00:19:51.619
People all around the world
are using the Assistant every day

00:19:51.619 --> 00:19:53.142
to get things done--

00:19:53.142 --> 00:19:54.526
on their mobile devices,

00:19:54.526 --> 00:19:55.835
in their cars,

00:19:55.835 --> 00:19:57.404
and at home.

00:19:57.404 --> 00:19:59.364
And in the smart home space alone,

00:19:59.364 --> 00:20:02.102
there are more than 30,000 unique devices

00:20:02.102 --> 00:20:04.164
that now work with the Google Assistant.

00:20:04.164 --> 00:20:07.892
These are built by a growing community
of over 3,500 partners.

00:20:08.404 --> 00:20:12.162
It's momentum like this
that creates lots of opportunities

00:20:12.162 --> 00:20:14.096
for developers like you.

00:20:14.654 --> 00:20:19.017
Today, I'll share new tools
for content creators and app developers

00:20:19.017 --> 00:20:20.953
to build with the Assistant.

00:20:21.453 --> 00:20:23.812
Let's start with what's new
for content creators.

00:20:24.198 --> 00:20:27.551
We know you want easier ways
to reach more users

00:20:27.551 --> 00:20:29.584
across all of Google,

00:20:29.584 --> 00:20:31.242
and so we're introducing a simple way

00:20:31.242 --> 00:20:33.068
to make your web content stand out

00:20:33.068 --> 00:20:36.925
across both Google Search
and the Assistant,

00:20:36.925 --> 00:20:40.164
using something you're already
familiar with: markup.

00:20:40.772 --> 00:20:42.605
We're starting by enabling the support

00:20:42.605 --> 00:20:45.860
for the <i>HowTo</i> item type from <i>schema.org</i>

00:20:45.860 --> 00:20:48.096
so that your site's
how-to content can appear

00:20:48.096 --> 00:20:50.386
in a rich, structured way.

00:20:50.878 --> 00:20:52.443
Here's an example.

00:20:52.700 --> 00:20:54.675
My kids are headed off to college soon,

00:20:54.675 --> 00:20:56.601
so we're looking
for a kid-replacement unit,

00:20:56.601 --> 00:20:58.240
also known as a dog.

00:20:58.352 --> 00:20:59.494
(laughter)

00:20:59.594 --> 00:21:03.097
So I've been trying to figure out
how to install a dog door.

00:21:03.468 --> 00:21:06.289
Well, DIY Networks has an article on this,

00:21:06.289 --> 00:21:08.254
and they've implemented markup,

00:21:08.254 --> 00:21:11.050
identifying each step in their page.

00:21:11.050 --> 00:21:13.664
So when I search for
"How to Install a Dog Door"

00:21:13.664 --> 00:21:18.136
their content appears
as a more structured, helpful result.

00:21:18.917 --> 00:21:21.817
You'll notice these step-by-step
visual instructions

00:21:21.817 --> 00:21:25.347
on the search result page,
and they really stand out.

00:21:25.347 --> 00:21:28.876
And the best part
is that the same simple markup

00:21:28.876 --> 00:21:33.383
creates an interactive result
on its system-enabled smart displays.

00:21:33.926 --> 00:21:37.355
This extends the reach of your content
to an entirely new surface

00:21:37.355 --> 00:21:39.174
with no extra work.

00:21:40.018 --> 00:21:43.339
In addition to instructional content
on web pages,

00:21:43.339 --> 00:21:47.487
people also turn to YouTube every day
to learn how to do things.

00:21:47.977 --> 00:21:50.626
So we're making it much easier
for video creators

00:21:50.626 --> 00:21:52.747
to add content to the Assistant.

00:21:53.078 --> 00:21:56.687
We're adding a new How-To Template
in the <i>Actions</i> console

00:21:56.687 --> 00:22:00.865
where you can turn your existing videos
into interactive tutorials.

00:22:01.422 --> 00:22:02.842
Let's take a look.

00:22:03.111 --> 00:22:06.067
Here, REI filled out a How-To Template

00:22:06.067 --> 00:22:10.958
with titles, text, and timestamps
for each step in their video

00:22:10.958 --> 00:22:13.728
and uploaded it to the <i>Actions</i> console.

00:22:13.728 --> 00:22:16.922
This transformed their video
into an interactive,

00:22:16.922 --> 00:22:20.576
step-by-step experience
with very little work.

00:22:21.227 --> 00:22:24.106
You can get started
with the HowTo Templates today.

00:22:24.645 --> 00:22:27.734
Now let's talk about what's new
for app developers,

00:22:27.734 --> 00:22:32.079
and I hear there might be
a few Android fans here in the audience.

00:22:32.472 --> 00:22:35.106
(applause)

00:22:37.666 --> 00:22:38.799
Thank you.

00:22:38.799 --> 00:22:41.268
And we know you want to make it easier

00:22:41.268 --> 00:22:43.432
for users to get into your apps.

00:22:43.432 --> 00:22:46.236
So last year we previewed App Actions,

00:22:46.236 --> 00:22:48.347
a way to create voice-based entry points

00:22:48.347 --> 00:22:52.532
from the Assistant to exactly
the right spot in your app

00:22:52.532 --> 00:22:53.957
using intents.

00:22:54.428 --> 00:22:56.925
Today we're announcing
four categories of App Actions

00:22:56.925 --> 00:22:58.495
that are ready to use--

00:22:58.495 --> 00:23:01.013
Health &amp; Fitness, Finance,

00:23:01.013 --> 00:23:03.650
Ridesharing, and Food Ordering.

00:23:04.046 --> 00:23:05.637
Let's look at Health &amp; Fitness,

00:23:05.637 --> 00:23:07.928
an area that I'm clearly new to.

00:23:08.233 --> 00:23:09.566
(laughter)

00:23:09.715 --> 00:23:13.374
Nike has a great app
that lets me track my runs,

00:23:13.374 --> 00:23:15.528
but when my shoes are on,
my headphones are in,

00:23:15.528 --> 00:23:18.150
and I'm finally ready
to actually take a run,

00:23:18.150 --> 00:23:20.951
I don't want to tap through my phone
to get it all started.

00:23:21.389 --> 00:23:25.306
Wouldn't it be much faster
if I could just use my voice?

00:23:25.674 --> 00:23:29.415
Well, luckily,
Nike implemented App Actions,

00:23:29.415 --> 00:23:34.024
so when I say, "Hey Google,
start my run with Nike Run Club,"

00:23:34.024 --> 00:23:36.211
the Assistant fast forwards
into Nike's app

00:23:36.211 --> 00:23:38.482
and automatically starts my run.

00:23:38.989 --> 00:23:43.192
I didn't need to swipe, tap,
or navigate to find what I needed,

00:23:43.510 --> 00:23:45.083
I simply asked.

00:23:45.776 --> 00:23:47.748
Let's take a look at how they did it.

00:23:48.155 --> 00:23:52.601
Here you can see Nike's
<i>actions.xml</i> file in their manifest

00:23:52.601 --> 00:23:55.481
where they map
the <i>START_EXERCISE</i> built-in intent

00:23:55.481 --> 00:23:58.095
to the part of their app
that starts a workout.

00:23:58.095 --> 00:24:01.835
And with that change,
their redeploy, their APK,

00:24:01.835 --> 00:24:03.644
and it's ready for action.

00:24:03.956 --> 00:24:07.215
You can get started today
with the four live intent categories.

00:24:08.771 --> 00:24:11.388
And we have more for app developers.

00:24:11.665 --> 00:24:14.810
Smart displays have been
a huge hit for consumers.

00:24:15.326 --> 00:24:17.703
And, for the first time ever,

00:24:17.703 --> 00:24:20.367
we're opening up the ability
for app developers

00:24:20.367 --> 00:24:23.626
to address the full display
of the smart display.

00:24:24.175 --> 00:24:28.378
So we're introducing a developer preview
of Interactive Canvas,

00:24:28.378 --> 00:24:32.305
a tool to create full-screen experiences
for smart displays

00:24:32.305 --> 00:24:36.558
that leverage voice, visuals, and touch.

00:24:36.558 --> 00:24:40.017
It uses open web technologies
you're already familiar with,

00:24:40.017 --> 00:24:43.749
like HTML, CSS, and JavaScript.

00:24:44.289 --> 00:24:46.696
And we're starting
where interactive experiences

00:24:46.696 --> 00:24:49.539
really come to life: games.

00:24:50.386 --> 00:24:52.377
Here's an example of a trivia game--

00:24:52.377 --> 00:24:55.626
it was built by HQ University
with Interactive Canvas--

00:24:55.626 --> 00:24:58.006
that leverages the full-screen experience.

00:24:58.469 --> 00:25:00.737
You can start building games today,

00:25:00.737 --> 00:25:02.341
and we'd love to hear your feedback

00:25:02.341 --> 00:25:05.372
as we consider which categories
to open up next.

00:25:06.303 --> 00:25:08.877
Whether you're looking
to reach more users across Google

00:25:08.877 --> 00:25:12.596
with your content,
drive more engagement with your apps,

00:25:12.596 --> 00:25:15.335
or build custom experiences
for the Assistant,

00:25:15.335 --> 00:25:17.640
you now have more tools to do so.

00:25:18.274 --> 00:25:19.886
And now I'd like to introduce Tal,

00:25:19.886 --> 00:25:21.794
who's going to talk more
about the web platform.

00:25:21.794 --> 00:25:22.877
Thank you.

00:25:23.106 --> 00:25:24.715
(applause)

00:25:25.019 --> 00:25:26.904
♪ (music) ♪

00:25:31.134 --> 00:25:32.692
(Tal Oppenheimer) Thanks, Chris.

00:25:33.133 --> 00:25:36.764
The open web provides universal access

00:25:36.764 --> 00:25:39.292
to the world's information and services

00:25:39.292 --> 00:25:41.305
for billions of people

00:25:41.305 --> 00:25:44.199
across the full spectrum of devices--

00:25:44.199 --> 00:25:47.914
from entry-level phones,
to high-powered desktops.

00:25:48.552 --> 00:25:52.586
With Chrome, we're focused
on providing the global community

00:25:52.586 --> 00:25:55.937
with a modern,
continuously updated browser

00:25:55.937 --> 00:25:58.584
with new releases every six weeks.

00:25:59.300 --> 00:26:02.964
And we contribute our work
to the entire web ecosystem

00:26:02.964 --> 00:26:05.410
with the open source Chromium project.

00:26:05.855 --> 00:26:09.466
Today we're going to share
the latest improvements to Chrome

00:26:09.466 --> 00:26:12.039
and our developer tools that you can use

00:26:12.039 --> 00:26:15.382
to make your websites faster
and more powerful,

00:26:15.382 --> 00:26:18.768
all while keeping user trust
front and center.

00:26:19.978 --> 00:26:22.785
We all know that speed matters on the web,

00:26:22.785 --> 00:26:26.855
and that even small improvements
can translate into big wins

00:26:26.855 --> 00:26:29.156
for developers and for users.

00:26:29.156 --> 00:26:32.005
So we're continuously working
to make the web faster.

00:26:32.729 --> 00:26:35.219
One area that we focused on with Chrome

00:26:35.219 --> 00:26:37.198
is reducing that startup time,

00:26:37.198 --> 00:26:39.529
so that now, when you launch Chrome

00:26:39.529 --> 00:26:41.420
on an entry-level Android phone,

00:26:41.420 --> 00:26:44.462
the web page loads
in almost half the time.

00:26:44.462 --> 00:26:47.695
And this speed-up is partly due
to improvements in V8,

00:26:47.695 --> 00:26:50.154
our open source JavaScript engine.

00:26:50.154 --> 00:26:53.620
It's now two times faster
at parsing JavaScript,

00:26:53.620 --> 00:26:57.505
and uses up to 20% less memory
on real-world websites.

00:26:58.584 --> 00:27:01.139
In addition to these improvements
in Chrome,

00:27:01.139 --> 00:27:04.119
we're also adding features
to the web platform

00:27:04.119 --> 00:27:06.961
to help you make your sites even faster.

00:27:07.700 --> 00:27:10.497
As one example,
there's image lazy loading.

00:27:10.941 --> 00:27:13.533
Modern websites are more visual than ever,

00:27:13.533 --> 00:27:16.792
using lots of beautiful
high-resolution imagery.

00:27:16.792 --> 00:27:20.413
But loading all those images at once
can bog down the browser

00:27:20.413 --> 00:27:23.730
and can waste the user's data
by loading unnecessary images

00:27:23.730 --> 00:27:26.269
that the user never actually sees.

00:27:26.269 --> 00:27:29.906
So it's often better to load images
only as they're actually needed,

00:27:29.906 --> 00:27:32.439
a technique known as lazy loading.

00:27:32.439 --> 00:27:34.142
We know it can be a lot of work

00:27:34.142 --> 00:27:37.085
for developers to use
their own JavaScript solutions,

00:27:37.085 --> 00:27:39.434
and it can be hard to get
the quality experience

00:27:39.434 --> 00:27:40.916
you want for your users.

00:27:41.399 --> 00:27:43.531
So we wanted to make it incredibly simple

00:27:43.531 --> 00:27:46.423
to have a great image-loading
experience on your site.

00:27:47.277 --> 00:27:50.310
Starting behind a flag
in Chrome Canary today,

00:27:50.310 --> 00:27:53.671
all you'll need to do is add
the new loading attribute

00:27:53.671 --> 00:27:57.496
to your image tags, and Chrome
will take care of the rest.

00:27:58.353 --> 00:28:01.355
(cheers and applause)

00:28:02.527 --> 00:28:06.053
We'll take into account
factors like connection speed

00:28:06.053 --> 00:28:08.220
to decide when to load the images,

00:28:08.220 --> 00:28:10.991
and we'll check the first two kilobytes
of the deferred image

00:28:10.991 --> 00:28:13.852
to add placeholders
that are the right size.

00:28:13.852 --> 00:28:16.515
The end result
is a much smoother experience

00:28:16.515 --> 00:28:18.049
for image-heavy sites,

00:28:18.049 --> 00:28:20.834
all without the need
to write any extra code.

00:28:21.922 --> 00:28:24.745
We've also been enhancing
our developer tools

00:28:24.745 --> 00:28:28.464
to help you understand
how you can use all of these improvements.

00:28:29.016 --> 00:28:32.034
Three years ago, we introduced Lighthouse,

00:28:32.034 --> 00:28:34.690
a powerful tool that audits your website

00:28:34.690 --> 00:28:36.589
and provides you with clear guidance

00:28:36.589 --> 00:28:39.104
on how you can improve
your site's performance,

00:28:39.104 --> 00:28:41.224
security, and lots more.

00:28:41.696 --> 00:28:45.909
Lighthouse's reports have been used
to improve millions of web pages,

00:28:45.909 --> 00:28:48.475
but because our websites,
and the web itself,

00:28:48.475 --> 00:28:50.552
are constantly evolving,

00:28:50.552 --> 00:28:52.594
auditing tools like Lighthouse
need to become

00:28:52.594 --> 00:28:55.359
a continual part
of the development process.

00:28:56.156 --> 00:28:59.233
And we're seeing that some developers
are already doing this.

00:28:59.802 --> 00:29:02.438
At Pinterest, they've set
specific size limits

00:29:02.438 --> 00:29:05.263
and performance thresholds for their site,

00:29:05.263 --> 00:29:08.899
and continuously measure it
to ensure they aren't regressing.

00:29:08.899 --> 00:29:10.720
They call these limits a "budget,"

00:29:10.720 --> 00:29:14.107
and by optimizing for performance
and enforcing these budgets

00:29:14.107 --> 00:29:17.260
they're able to ensure
that their site remains fast

00:29:17.260 --> 00:29:19.187
and delivers great results.

00:29:19.756 --> 00:29:22.398
And we think this is a fantastic practice,

00:29:22.398 --> 00:29:24.470
so we've added support
for performance budgets

00:29:24.470 --> 00:29:26.470
directly to Lighthouse.

00:29:26.470 --> 00:29:29.067
Now you can set budgets based on size,

00:29:29.067 --> 00:29:31.225
such as total JavaScript download,

00:29:31.225 --> 00:29:34.050
or for target metrics like page load time.

00:29:34.050 --> 00:29:35.522
And by integrating Lighthouse

00:29:35.522 --> 00:29:37.581
with your continuous integration server

00:29:37.581 --> 00:29:41.154
you can ensure that your site
stays svelte and healthy.

00:29:42.990 --> 00:29:45.692
In addition to making the web faster,

00:29:45.692 --> 00:29:48.363
we're also working
to make the web more powerful

00:29:48.363 --> 00:29:51.631
and more deeply integrated
with devices and operating systems.

00:29:52.227 --> 00:29:54.954
And Google Duo is a great example of this.

00:29:54.954 --> 00:29:56.775
It uses the latest features of the web

00:29:56.775 --> 00:30:00.276
to support high-quality video calling
right in the browser.

00:30:00.276 --> 00:30:01.746
And using WebAssembly,

00:30:01.746 --> 00:30:04.775
the team was able to easily bring
their native app features,

00:30:04.775 --> 00:30:07.243
like echo detection, to the web.

00:30:07.908 --> 00:30:10.828
And because Duo for Web
is a progressive web app,

00:30:10.828 --> 00:30:16.045
users can install it across Chrome OS,
macOS, Linux, and Windows,

00:30:16.045 --> 00:30:18.296
so it's launchable from a desktop icon

00:30:18.296 --> 00:30:20.297
and it runs in its own window.

00:30:20.297 --> 00:30:22.404
And we're also seeing companies like Hulu

00:30:22.404 --> 00:30:24.758
taking advantage
of these new capabilities

00:30:24.758 --> 00:30:28.256
to deliver a powerful, immersive
desktop-app experience

00:30:28.256 --> 00:30:30.329
and driving more repeat usage.

00:30:30.880 --> 00:30:34.275
And Twitter shows the power
of these progressive web apps

00:30:34.275 --> 00:30:37.849
with a single codebase
that scales seamlessly

00:30:37.849 --> 00:30:40.602
across a wide variety of devices.

00:30:40.602 --> 00:30:43.247
And Twitter and Hulu will actually
be joining us onstage

00:30:43.247 --> 00:30:44.560
later today at I/O,

00:30:44.560 --> 00:30:46.727
to tell us more about their experiences.

00:30:48.582 --> 00:30:51.659
As the web and browsers
continue to evolve,

00:30:51.659 --> 00:30:54.584
we know that search engines
need to keep up

00:30:54.584 --> 00:30:58.059
in order to understand
how to properly index modern websites

00:30:58.059 --> 00:30:59.813
with these latest features.

00:31:00.195 --> 00:31:03.765
Today we're announcing
that Google Search is now using

00:31:03.765 --> 00:31:07.182
the latest version of Chromium
to index the web.

00:31:07.182 --> 00:31:09.213
This means that, as a developer,

00:31:09.213 --> 00:31:11.024
you can focus on building your site

00:31:11.024 --> 00:31:13.433
using the latest web platform features,

00:31:13.433 --> 00:31:16.450
without having to worry
about using hacks or workarounds

00:31:16.450 --> 00:31:19.700
to ensure that the Google crawler
properly sees your content.

00:31:19.700 --> 00:31:21.800
And you can learn more
on our Webmaster blog,

00:31:21.800 --> 00:31:24.476
or at our session here at I/O on Thursday.

00:31:26.768 --> 00:31:29.597
User trust and safety is at the heart

00:31:29.597 --> 00:31:32.044
of everything we do in Chrome.

00:31:32.532 --> 00:31:34.919
It's motivated features
like Safe Browsing,

00:31:34.919 --> 00:31:36.848
that protects users from phishing attacks

00:31:36.848 --> 00:31:38.084
and malware sites,

00:31:38.084 --> 00:31:42.074
and our recent efforts
to move all web traffic to HTTPS.

00:31:43.048 --> 00:31:48.171
We believe that giving users
transparency, choice, and control

00:31:48.171 --> 00:31:51.351
over how their data is used
and shared on the web

00:31:51.351 --> 00:31:54.190
is an important part of these efforts,

00:31:54.190 --> 00:31:56.807
and it requires that we all rethink

00:31:56.807 --> 00:31:59.105
some of the fundamentals of the web.

00:31:59.668 --> 00:32:02.203
Today we're sharing three changes

00:32:02.203 --> 00:32:04.452
that we'll start rolling out
later this year.

00:32:04.452 --> 00:32:07.596
First, we're changing
how cookies work in Chrome,

00:32:07.596 --> 00:32:11.057
making them more private
and secure by default.

00:32:11.545 --> 00:32:14.445
Second, we're adding
new features in Chrome

00:32:14.445 --> 00:32:16.349
that will build on these cookie changes

00:32:16.349 --> 00:32:20.519
to give users more transparency
and easy-to-use controls

00:32:20.519 --> 00:32:23.091
over how sites track them across the web.

00:32:23.876 --> 00:32:26.419
Third, we're enhancing Chrome

00:32:26.419 --> 00:32:29.213
to protect users from techniques
like fingerprinting

00:32:29.213 --> 00:32:33.007
that are used to bypass
this user choice and control.

00:32:34.002 --> 00:32:37.375
As we work to make the web safer,
we're committed to preserving

00:32:37.375 --> 00:32:40.085
the health of the overall web ecosystem

00:32:40.085 --> 00:32:43.638
and to working in cooperation
with the broader developer community.

00:32:43.638 --> 00:32:46.071
You can learn more
about these upcoming changes

00:32:46.071 --> 00:32:48.645
and what they mean for you
on our Chromium blog

00:32:48.645 --> 00:32:51.934
and in the "What's New with Chrome
on the Web" session here at I/O.

00:32:53.563 --> 00:32:56.856
As the web continues
to evolve at a rapid pace,

00:32:56.856 --> 00:32:58.376
we know it can be a little bit tricky

00:32:58.376 --> 00:33:01.482
to keep up with the latest features
and best practices.

00:33:02.100 --> 00:33:05.928
We created a new website
called <i>web.dev</i> to help.

00:33:05.928 --> 00:33:07.915
It's a simple, straightforward guide

00:33:07.915 --> 00:33:10.216
to teach you how to build
on the modern web

00:33:10.216 --> 00:33:13.518
with interactive code labs
on the most important topics

00:33:13.518 --> 00:33:16.862
including how to optimize
popular web frameworks like REACT

00:33:16.862 --> 00:33:18.484
for top performance.

00:33:18.484 --> 00:33:22.507
<i>Web.dev</i> can help you use
the best of the modern web platform

00:33:22.507 --> 00:33:25.431
to create fast, powerful experiences

00:33:25.431 --> 00:33:26.766
for your users.

00:33:27.791 --> 00:33:30.858
In addition to these platform
and tool changes,

00:33:30.858 --> 00:33:33.084
we've also been improving Chrome OS.

00:33:33.084 --> 00:33:38.413
In Q4, Chrome OS accounted
for 21% of U.S. notebook sales,

00:33:38.413 --> 00:33:40.750
and we expect to see growth continue

00:33:40.750 --> 00:33:42.992
as more devices hit the market.

00:33:43.611 --> 00:33:47.087
Last year we brought Linux support
to Chromebooks,

00:33:47.087 --> 00:33:49.119
and we've continued to integrate this

00:33:49.119 --> 00:33:52.498
to provide you with an easy-to-use
Linux development environment

00:33:52.498 --> 00:33:54.346
that's fast and safe,

00:33:54.346 --> 00:33:58.905
thanks to Google's best-in-class
VM and Sandbox isolation technology.

00:33:59.654 --> 00:34:01.566
This integration allows you to do things

00:34:01.566 --> 00:34:05.236
like seamlessly share files
across Chrome OS, Google Drive,

00:34:05.236 --> 00:34:07.182
Android, and Linux,

00:34:07.182 --> 00:34:09.505
and you get all the standard
Linux features,

00:34:09.505 --> 00:34:12.303
like port forwarding,
that lets you run your Web server

00:34:12.303 --> 00:34:15.719
in the Linux container
and debug on the same machine.

00:34:16.432 --> 00:34:20.069
All of this makes Chrome OS
a great choice for developers.

00:34:20.521 --> 00:34:23.736
Web developers can code
in a familiar Linux environment

00:34:23.736 --> 00:34:27.107
and can test on a variety
of desktop and mobile browsers.

00:34:27.550 --> 00:34:30.991
And Android Studio is now available
with a one-click install

00:34:30.991 --> 00:34:32.263
and integrated debugging

00:34:32.263 --> 00:34:35.439
on any of the Android developer
recommended Chromebooks.

00:34:36.088 --> 00:34:38.145
And, finally, we're happy to announce

00:34:38.145 --> 00:34:41.053
that all Chromebooks launched this year

00:34:41.053 --> 00:34:44.020
will be Linux-ready right out of the box.

00:34:44.814 --> 00:34:48.010
(cheers and applause)

00:34:50.520 --> 00:34:53.027
And these are just a few
of the most recent improvements

00:34:53.027 --> 00:34:55.466
across the web and Chrome OS.

00:34:55.466 --> 00:34:58.523
Stay tuned for more features
coming later this year.

00:34:58.523 --> 00:35:00.206
Now I'd like to invite Anitha

00:35:00.206 --> 00:35:02.698
to talk to you
about machine learning and AI.

00:35:03.126 --> 00:35:05.446
(cheers and applause)

00:35:05.666 --> 00:35:09.180
♪ (music) ♪

00:35:10.639 --> 00:35:12.529
(Anitha Vijayakumar) Thanks, Tal.

00:35:12.529 --> 00:35:14.580
Here at Google, we are using AI

00:35:14.580 --> 00:35:17.204
to solve a range of challenging problems

00:35:17.204 --> 00:35:19.098
to help people in their daily lives.

00:35:19.633 --> 00:35:21.829
Whether it is building an AI system

00:35:21.829 --> 00:35:24.308
to get rid of 100-million spam messages

00:35:24.308 --> 00:35:25.999
each day in Gmail,

00:35:25.999 --> 00:35:28.628
or serving relevant and up-to-date content

00:35:28.628 --> 00:35:31.838
through Google News
using new AI techniques,

00:35:31.838 --> 00:35:33.519
or training a neural network

00:35:33.519 --> 00:35:37.110
to improve the way
we interact with our mobile devices

00:35:37.110 --> 00:35:38.668
through faster speech recognition

00:35:38.668 --> 00:35:40.189
on Gboard,

00:35:40.189 --> 00:35:42.714
AI enables us to make our products

00:35:42.714 --> 00:35:46.279
more helpful and delightful for our users.

00:35:47.052 --> 00:35:49.760
But we want all developers
to be able to build

00:35:49.760 --> 00:35:54.109
successful AI-enabled applications
to solve problems.

00:35:54.109 --> 00:35:56.289
That is why we built AI tools

00:35:56.289 --> 00:35:58.909
that are easy to use right out of the box,

00:35:58.909 --> 00:36:00.898
powerful, and flexible,

00:36:00.898 --> 00:36:04.390
all available on the platforms
that you care about.

00:36:05.030 --> 00:36:08.750
Our tools span from APIs
that are easy to get started with

00:36:08.750 --> 00:36:12.130
and come ready
out of the box, like ML Kit,

00:36:12.130 --> 00:36:13.411
to more powerful tooling

00:36:13.411 --> 00:36:15.050
that gives you the performance you need

00:36:15.050 --> 00:36:18.960
like AutoML and cloud TPUs
in the Google Cloud,

00:36:18.960 --> 00:36:21.680
and the flexibility to run
powerful AI systems

00:36:21.680 --> 00:36:23.480
in production anywhere

00:36:23.480 --> 00:36:26.180
with open source libraries
like TensorFlow.

00:36:27.053 --> 00:36:29.680
For the millions of Android
and iOS developers,

00:36:29.680 --> 00:36:34.383
ML Kits get you started with common
machine learning tasks immediately.

00:36:35.050 --> 00:36:37.103
It's taking some of the best features

00:36:37.103 --> 00:36:40.141
that power Google's own AI applications

00:36:40.141 --> 00:36:42.509
and making them available to you.

00:36:43.102 --> 00:36:46.811
Since launching it at I/O last year,
we've seen a lot of adoption

00:36:46.811 --> 00:36:49.331
in a wide array of use cases,

00:36:49.331 --> 00:36:52.709
like the TextPlus app
which uses SmartReply in-app

00:36:52.709 --> 00:36:54.509
to suggest responses,

00:36:54.509 --> 00:36:55.589
or the Gradeup app

00:36:55.589 --> 00:36:59.143
using text recognition to help students
scan in their homework.

00:36:59.729 --> 00:37:02.661
ML Kit's momentum
is why we are excited to share

00:37:02.661 --> 00:37:04.584
a couple of new announcements.

00:37:05.171 --> 00:37:09.029
First, we are making
AI-powered translation available

00:37:09.029 --> 00:37:12.412
through a new on-device translation API.

00:37:13.018 --> 00:37:19.125
This new API provides fast,
dynamic translation for 59 languages.

00:37:20.330 --> 00:37:22.120
Now, the same machine learning models

00:37:22.120 --> 00:37:27.009
that power the Google's Translate app
are available for your app

00:37:27.009 --> 00:37:28.720
even when they're offline,

00:37:28.720 --> 00:37:31.907
helping to save energy and reduce latency.

00:37:32.595 --> 00:37:35.597
Second, ML Kit can help power

00:37:35.597 --> 00:37:38.079
your app's visual search experience

00:37:38.079 --> 00:37:41.008
with a new object detection
and tracking API.

00:37:41.727 --> 00:37:43.886
For retail apps, you can pair this

00:37:43.886 --> 00:37:46.401
with Google Cloud's product Search API

00:37:46.401 --> 00:37:48.257
to match your product SKUs.

00:37:49.381 --> 00:37:52.111
Our partners are already using this API

00:37:52.111 --> 00:37:55.161
to build helpful AI experiences
for their users,

00:37:55.161 --> 00:37:57.730
like this beautiful IKEA app

00:37:57.730 --> 00:37:59.300
which lets you search for products

00:37:59.300 --> 00:38:02.541
by just pointing your mobile phone camera.

00:38:03.494 --> 00:38:05.213
These are just a few examples

00:38:05.213 --> 00:38:07.245
of how ML Kit makes it easy

00:38:07.245 --> 00:38:11.048
to integrate AI
into your Android and iOS apps.

00:38:12.108 --> 00:38:16.318
You can get started using
these new APIs today through Firebase.

00:38:17.179 --> 00:38:19.401
For developers who need more performance

00:38:19.401 --> 00:38:21.680
for large machine learning workloads,

00:38:21.680 --> 00:38:24.933
Google Cloud provides
a complete set of AI tools,

00:38:24.933 --> 00:38:27.350
and this includes AutoML.

00:38:27.974 --> 00:38:32.748
AutoML allows you to train
accurate models on your own datasets

00:38:33.307 --> 00:38:36.544
without having to write
a single line of code.

00:38:37.198 --> 00:38:39.760
And we recently expanded
this product family

00:38:39.760 --> 00:38:41.797
to support new use cases,

00:38:41.797 --> 00:38:43.860
like the new AutoML Tables

00:38:43.860 --> 00:38:47.240
where you can ingest
structured tabular datasets

00:38:47.240 --> 00:38:50.974
and generate prediction models
in days instead of weeks.

00:38:51.888 --> 00:38:55.571
Now you can take your large CSV files
or database tables

00:38:55.571 --> 00:38:58.701
and use them to tackle a range
of challenging problems

00:38:58.701 --> 00:39:01.911
such as fraud detection,
optimizing lead conversion,

00:39:01.911 --> 00:39:03.859
and predicting user demand.

00:39:04.490 --> 00:39:08.281
What's amazing here
is that you can do all of this

00:39:08.281 --> 00:39:11.689
with a few clicks, no coding required,

00:39:11.689 --> 00:39:14.970
and generate a world-class
machine learning model.

00:39:16.010 --> 00:39:19.324
We also launched
AutoML Video Intelligence.

00:39:20.051 --> 00:39:23.451
This new service
lets you create custom models

00:39:23.451 --> 00:39:26.581
that automatically
classify your video content

00:39:26.581 --> 00:39:28.451
with the labels that you define.

00:39:29.159 --> 00:39:31.052
So if you deal with a large dataset

00:39:31.052 --> 00:39:34.646
and you want to analyze your content
by what is in each frame,

00:39:35.216 --> 00:39:37.110
you can create custom labels

00:39:37.110 --> 00:39:41.290
and AutoML Video Intelligence
will help you categorize the content

00:39:41.290 --> 00:39:43.513
and make it easily searchable.

00:39:44.881 --> 00:39:46.621
But to train and deploy your models,

00:39:46.621 --> 00:39:49.370
you need powerful computational resources

00:39:49.370 --> 00:39:54.137
like cloud TPUs,
our custom AI hardware accelerators.

00:39:55.069 --> 00:39:56.180
Through Google Cloud,

00:39:56.180 --> 00:39:58.991
our partners have been using
Cloud TPU devices

00:39:58.991 --> 00:40:01.949
to accomplish large-scale
machine learning tasks

00:40:01.949 --> 00:40:03.456
at incredible speeds.

00:40:04.157 --> 00:40:05.691
For example,

00:40:06.248 --> 00:40:08.840
Recursion Pharmaceuticals
is using Cloud TPUs

00:40:08.840 --> 00:40:14.152
to analyze cellular microscopic images
to help treat rare diseases.

00:40:14.781 --> 00:40:16.350
By using cloud TPUs,

00:40:16.350 --> 00:40:18.751
they're able to reduce their training time

00:40:18.751 --> 00:40:22.897
from 24 hours to nearly 15 minutes.

00:40:23.830 --> 00:40:29.611
Today we're announcing
that you can use Cloud TPU V3 pods in beta

00:40:29.611 --> 00:40:30.980
on the Google Cloud.

00:40:32.317 --> 00:40:35.147
These pods are made up of individual TPUs

00:40:35.147 --> 00:40:36.982
and, when assembled together,

00:40:36.982 --> 00:40:39.577
you can train models
for image classification,

00:40:39.577 --> 00:40:41.297
natural language processing,

00:40:41.297 --> 00:40:43.888
and many other ML applications,

00:40:43.888 --> 00:40:47.015
scaling up by adding
just two lines of code.

00:40:47.907 --> 00:40:52.476
Cloud AutoML and Cloud TPU Pods
are meant to provide you

00:40:52.476 --> 00:40:54.374
with the performance you need

00:40:54.374 --> 00:40:57.041
to speed up
your machine learning workflow.

00:40:58.336 --> 00:41:00.918
We also want to keep you
in complete control

00:41:00.918 --> 00:41:02.784
and give you flexibility.

00:41:03.215 --> 00:41:07.093
That is why we decided
to open source TensorFlow.

00:41:07.635 --> 00:41:10.398
TensorFlow is helping democratize AI

00:41:10.398 --> 00:41:14.344
among developers,
businesses, and researchers

00:41:14.344 --> 00:41:18.710
by helping them build
truly customized AI experiences.

00:41:19.535 --> 00:41:22.825
Since open sourcing it in 2015,

00:41:22.825 --> 00:41:26.557
it has matured into a flexible
end-to-end machine learning ecosystem

00:41:26.557 --> 00:41:28.424
with a global community.

00:41:29.317 --> 00:41:32.743
We recently announced
TensorFlow 2.0 in alpha,

00:41:33.223 --> 00:41:36.740
with plans to launch
a release candidate soon.

00:41:37.955 --> 00:41:41.673
TensorFlow 2.0 is all about usability.

00:41:42.545 --> 00:41:47.685
We are making it even easier
to build and deploy custom models

00:41:47.685 --> 00:41:51.420
with more intuitive APIs,
less code needed,

00:41:51.420 --> 00:41:54.669
and more flexible
for powerful experimentation

00:41:54.669 --> 00:41:58.358
and deployment on the platforms
that you care about.

00:41:59.515 --> 00:42:01.469
For JavaScript developers,

00:42:01.469 --> 00:42:05.625
TensorFlow.js helps you build,
train, and deploy custom models

00:42:05.625 --> 00:42:09.391
right in the browser
and on the Node.js platform.

00:42:10.664 --> 00:42:13.115
For developers working
with on-device platforms

00:42:13.115 --> 00:42:15.344
such as mobile phones and IoT,

00:42:15.344 --> 00:42:18.995
TensorFlow Lite can help you
address common obstacles

00:42:18.995 --> 00:42:20.775
in your AI-powered apps

00:42:20.775 --> 00:42:24.035
like poor network connectivity,
protecting user privacy,

00:42:24.035 --> 00:42:26.153
and low-latency environments,

00:42:26.153 --> 00:42:28.561
without sacrificing performance.

00:42:29.304 --> 00:42:30.975
In just 18 months,

00:42:30.975 --> 00:42:36.166
TensorFlow Lite has been installed
on more than 2 billion devices

00:42:36.166 --> 00:42:39.712
including Android, iOS,
and embedded systems.

00:42:40.904 --> 00:42:45.445
To demonstrate how fast
and flexible TensorFlow Lite is,

00:42:45.445 --> 00:42:48.066
Tim is going to show you custom models,

00:42:48.066 --> 00:42:53.747
tracking user movement in real-time
using the GPU on-device.

00:42:55.172 --> 00:42:56.600
(Tim Davis) Thanks, Anitha.

00:42:56.600 --> 00:42:59.537
We've built a super fun app
called Dance Like

00:42:59.537 --> 00:43:02.705
which helps anyone learn
how to be a better dancer

00:43:02.705 --> 00:43:04.811
using machine learning.

00:43:04.811 --> 00:43:07.346
I'll demo it in a bit, but before I do,

00:43:07.346 --> 00:43:10.185
I want to say that making this app
was a lot of hard work

00:43:10.185 --> 00:43:11.495
and was only made possible

00:43:11.495 --> 00:43:14.065
because of a bunch of teams at Google

00:43:14.065 --> 00:43:17.121
but most importantly
because of TensorFlow Lite.

00:43:17.121 --> 00:43:19.213
So why was it so tricky?

00:43:19.213 --> 00:43:24.058
Well, we set ourselves the goal
of running five intensive,

00:43:24.058 --> 00:43:28.848
on-device tasks in parallel, in real-time,

00:43:28.848 --> 00:43:31.551
without sacrificing performance.

00:43:31.551 --> 00:43:33.257
These tasks were:

00:43:33.856 --> 00:43:37.025
running two body-part
segmentation models,

00:43:37.025 --> 00:43:39.653
matching the segmentation models,

00:43:39.653 --> 00:43:42.485
running dynamic time warping,

00:43:42.485 --> 00:43:46.016
playing a video, and encoding a video.

00:43:46.016 --> 00:43:47.677
And let me emphasize this again--

00:43:47.677 --> 00:43:51.550
all on-device,
simultaneously, in real-time.

00:43:52.523 --> 00:43:55.391
To accomplish this,
TensorFlow Lite enables us

00:43:55.391 --> 00:44:00.185
to easily delegate acceleration
of our ML models on a GPU.

00:44:00.185 --> 00:44:02.535
You can do this on both iOS and Android,

00:44:02.535 --> 00:44:06.814
so you have a single framework
for your on-device ML.

00:44:06.814 --> 00:44:10.474
Here's a code snippet which shows
how we set up this delegation.

00:44:10.825 --> 00:44:13.435
I created a TensorFlow Lite interpreter.

00:44:13.435 --> 00:44:15.845
And to execute my model on the GPU,

00:44:15.845 --> 00:44:18.670
I just construct a new GPU delegate

00:44:18.670 --> 00:44:23.174
and modify the interpreter
to use the GPU delegate, and I'm done.

00:44:23.174 --> 00:44:26.173
The models will now run on the GPU.

00:44:26.828 --> 00:44:29.495
Now I'm going to do a demo live

00:44:29.495 --> 00:44:31.995
and walk you through
the five on-device tasks

00:44:31.995 --> 00:44:33.935
running at the same time.

00:44:33.935 --> 00:44:35.732
Here we go. Wish me luck!

00:44:37.704 --> 00:44:39.766
So there's a few dances
you can choose from.

00:44:39.766 --> 00:44:42.589
I'm going to start with slow motion,
because I'm a beginner.

00:44:43.800 --> 00:44:45.931
Now, as I fire up my dance moves,

00:44:45.931 --> 00:44:49.551
you can see the real-time
segmentation model running on me.

00:44:49.551 --> 00:44:51.561
It's segmenting me out from the background

00:44:51.561 --> 00:44:54.413
and identifying
all the different parts of my body.

00:44:55.491 --> 00:44:58.294
Now, as I follow along the dancer,

00:44:58.294 --> 00:45:01.931
a second segmentation model
is now running.

00:45:01.931 --> 00:45:06.150
So now there's two segmentation models
running, via the GPU,

00:45:06.150 --> 00:45:08.566
to produce a matching score.

00:45:09.190 --> 00:45:12.191
The matching score,
up in the top right-hand corner,

00:45:12.191 --> 00:45:16.161
is telling me how well
I'm matching the dancer's moves.

00:45:17.910 --> 00:45:19.822
How awesome is that, right?

00:45:20.069 --> 00:45:22.803
(cheers and applause)

00:45:23.570 --> 00:45:25.654
But, wait, there's more!

00:45:25.654 --> 00:45:28.213
You know what is really cool?

00:45:28.213 --> 00:45:30.419
Using dynamic time warping!

00:45:30.897 --> 00:45:35.225
This syncs my slow-motion moves
with my real-time dance.

00:45:35.985 --> 00:45:37.623
Pretty fun, right?

00:45:38.042 --> 00:45:40.672
You can tell this was
just another day at Google.

00:45:41.177 --> 00:45:42.858
Back to you, Anitha.

00:45:43.809 --> 00:45:47.131
(Anitha) Isn't that cool? Nice moves, Tim!

00:45:47.560 --> 00:45:49.710
(applause)

00:45:51.030 --> 00:45:53.820
Whether you are just getting started
with machine learning

00:45:53.820 --> 00:45:57.331
or building custom AI apps
like Dance Like,

00:45:57.331 --> 00:46:02.090
we want to help every developer
build incredible AI applications,

00:46:02.090 --> 00:46:05.214
whatever challenging problems
you are trying to solve.

00:46:05.960 --> 00:46:09.009
Now, to talk more about what we are doing
in mobile development,

00:46:09.009 --> 00:46:11.825
I'd like to introduce Kristen Johnson.

00:46:11.825 --> 00:46:13.245
Thank you.

00:46:13.535 --> 00:46:15.484
(applause)

00:46:15.776 --> 00:46:18.059
♪ (music) ♪

00:46:21.448 --> 00:46:22.970
Thanks, Anitha.

00:46:22.970 --> 00:46:26.692
It's great to be here with all of you
to talk a bit about Firebase.

00:46:27.200 --> 00:46:30.625
Our mission is to help mobile
and Web app developers,

00:46:30.625 --> 00:46:33.161
just like all of you, be successful.

00:46:33.543 --> 00:46:36.886
We provide you with a platform
of tools and Cloud services

00:46:36.886 --> 00:46:40.517
that simplify your app dev workflows
and infrastructure needs

00:46:40.517 --> 00:46:44.562
so you can focus on building
amazing user experiences.

00:46:45.726 --> 00:46:47.296
With Firebase, you can build your app

00:46:47.296 --> 00:46:49.529
with fully managed back-ends,

00:46:49.529 --> 00:46:53.057
improve your app's quality
with testing and monitoring,

00:46:53.057 --> 00:46:55.769
and engage your users
with better insights.

00:46:56.541 --> 00:46:58.656
As you heard earlier, Google is committed

00:46:58.656 --> 00:47:02.375
to making AI available to every developer.

00:47:02.375 --> 00:47:04.530
Firebase and ML Kit make it easy for you

00:47:04.530 --> 00:47:09.181
to bring machine learning to your apps,
regardless of expertise.

00:47:10.076 --> 00:47:11.977
And today we're expanding ML Kit

00:47:11.977 --> 00:47:15.191
with the addition of AutoML Vision Edge.

00:47:15.755 --> 00:47:17.247
This will simplify the workflow

00:47:17.247 --> 00:47:20.797
of building and training
your custom TensorFlow Lite models

00:47:20.797 --> 00:47:22.356
to classify images.

00:47:22.796 --> 00:47:25.936
All you have to do
is upload a set of images,

00:47:25.936 --> 00:47:28.884
click a button to train your model,
and then publish it.

00:47:28.884 --> 00:47:30.406
That's it.

00:47:30.406 --> 00:47:31.549
Now, once published,

00:47:31.549 --> 00:47:34.125
your model is hosted
on Google's infrastructure,

00:47:34.125 --> 00:47:36.347
and, with just a few lines of code,

00:47:36.347 --> 00:47:40.112
your app can dynamically
retrieve the model and run it on-device.

00:47:40.746 --> 00:47:43.038
I'd like to invite
my teammate Stella on stage

00:47:43.038 --> 00:47:44.761
to show us how it works.

00:47:45.300 --> 00:47:46.954
(Stella Gaitani) Thanks, Kristen.

00:47:46.954 --> 00:47:49.191
For this demo, I want to build an app

00:47:49.191 --> 00:47:52.260
that identifies different dog breeds.

00:47:52.260 --> 00:47:56.509
I will start in the Firebase console
in the ML Kit section

00:47:56.509 --> 00:48:00.563
by creating a new dataset
which I will call <i>dog_breeds.</i>

00:48:01.198 --> 00:48:05.276
Once my dataset is created,
I just need to add my images.

00:48:05.746 --> 00:48:08.047
I will grab my data from my machine,

00:48:08.047 --> 00:48:10.115
and I'm going to upload it here.

00:48:10.497 --> 00:48:12.487
Now, this can take a little while,

00:48:12.487 --> 00:48:16.476
so to speed things up,
I will jump over to this dataset

00:48:16.476 --> 00:48:18.918
where I have already uploaded the images.

00:48:19.256 --> 00:48:23.994
As you can see, here I can view
all the images I uploaded,

00:48:23.994 --> 00:48:25.677
organized by label.

00:48:25.677 --> 00:48:28.687
And I can easily add or remove images.

00:48:29.109 --> 00:48:31.770
The next step is to train the model.

00:48:32.147 --> 00:48:37.306
When training the model,
I can choose how large my model should be

00:48:37.306 --> 00:48:41.265
to optimize between latency and accuracy.

00:48:41.265 --> 00:48:45.167
And I can also choose
how long to train my model for.

00:48:45.167 --> 00:48:49.373
Typically, larger datasets
require longer training times.

00:48:49.726 --> 00:48:52.531
For this demo, I will choose eight hours

00:48:52.531 --> 00:48:54.544
because my dataset is quite big.

00:48:55.194 --> 00:48:57.027
Again, to speed things up,

00:48:57.027 --> 00:48:59.596
I'm going to jump over to this dataset

00:48:59.596 --> 00:49:01.858
where the model has already been trained.

00:49:02.447 --> 00:49:04.630
Once the model finishes training,

00:49:04.630 --> 00:49:07.282
Firebase will provide me
with an evaluation

00:49:07.282 --> 00:49:10.707
to help me decide if this model
meets my needs

00:49:10.707 --> 00:49:12.934
or if I should continue iterating.

00:49:13.236 --> 00:49:16.235
I can see the precision and recall rates.

00:49:16.235 --> 00:49:19.341
And below these, I have a full breakdown

00:49:19.341 --> 00:49:24.459
of how often my model
labeled an image correctly for each label.

00:49:25.137 --> 00:49:29.401
The next and final step
is to publish the model.

00:49:29.941 --> 00:49:32.207
Once the model is published,

00:49:32.207 --> 00:49:34.987
it will be hosted
on Google's infrastructure.

00:49:34.987 --> 00:49:39.346
What this means is that I can add
a few lines of code to my app,

00:49:39.346 --> 00:49:44.577
and then my app will be able
to dynamically download the model

00:49:44.577 --> 00:49:47.282
and do on-device inferencing.

00:49:47.282 --> 00:49:49.789
And, now, let's see if this works!

00:49:50.271 --> 00:49:54.508
Unfortunately, I couldn't bring
my dog with me on stage,

00:49:54.508 --> 00:49:56.736
so we will have to use a stand-in.

00:49:57.620 --> 00:49:59.038
Here is our friend.

00:49:59.188 --> 00:50:00.368
(laughter)

00:50:00.478 --> 00:50:04.571
And I'm going to launch the app

00:50:04.571 --> 00:50:07.676
and I'm going to aim a camera
at our friend here.

00:50:09.552 --> 00:50:13.803
It's a little harder
with a stuffed animal, but here we go.

00:50:13.803 --> 00:50:17.744
You can see that my app in some angles--

00:50:17.744 --> 00:50:22.132
This is a border collie, so it can pick up
the border collie right here.

00:50:22.132 --> 00:50:25.967
And all of this was done
with just a few lines of code

00:50:25.967 --> 00:50:27.546
and a few button clicks.

00:50:28.414 --> 00:50:31.481
(applause)

00:50:34.666 --> 00:50:36.160
Thanks, Stella.

00:50:36.160 --> 00:50:39.131
So that's just one way
that we're expanding Firebase

00:50:39.131 --> 00:50:41.383
to simplify app development for you.

00:50:42.232 --> 00:50:44.364
Another area that we aim to simplify

00:50:44.364 --> 00:50:47.083
is optimizing the performance
of your apps.

00:50:47.667 --> 00:50:49.904
Firebase Performance Monitoring
gives you insights

00:50:49.904 --> 00:50:53.044
into the start-up time
and network responsiveness

00:50:53.044 --> 00:50:54.947
of your iOS and Android apps.

00:50:55.418 --> 00:50:57.807
Now we've heard from
all you web developers out there

00:50:57.807 --> 00:51:00.343
that you want the same
real user monitoring

00:51:00.343 --> 00:51:01.986
that native developers get.

00:51:02.418 --> 00:51:06.012
Well, today we're expanding
Performance Monitoring to the web!

00:51:06.978 --> 00:51:10.028
(applause)

00:51:12.488 --> 00:51:15.594
You heard from Tal
that users want the web to be fast,

00:51:15.594 --> 00:51:19.853
which means performance
is a major driver for success on the web.

00:51:20.337 --> 00:51:22.739
Tools like Lighthouse are great
for giving you a picture

00:51:22.739 --> 00:51:25.980
of how your web app performs
in a targeted, synthetic test.

00:51:26.454 --> 00:51:28.990
Now, with Firebase,
you can complement these tools

00:51:28.990 --> 00:51:30.014
with an understanding

00:51:30.014 --> 00:51:34.110
of how your users are experiencing
your web app out in the wild.

00:51:34.557 --> 00:51:35.720
This is awesome,

00:51:35.720 --> 00:51:37.854
because it's the first time
that you can see metrics

00:51:37.854 --> 00:51:40.696
that are more granular
than just page load time,

00:51:40.696 --> 00:51:44.364
like how long it takes users
to see any content on your page

00:51:44.364 --> 00:51:47.366
or if the page is ready for interaction.

00:51:48.205 --> 00:51:49.834
And you see the full distribution curve

00:51:49.834 --> 00:51:52.085
of these metrics
across different countries,

00:51:52.085 --> 00:51:54.339
browsers, and network connections.

00:51:54.836 --> 00:51:57.919
As an example, I might notice
that load times are slow

00:51:57.919 --> 00:51:59.920
for users in a region.

00:51:59.920 --> 00:52:02.834
When I investigate further,
I uncover that there is an issue

00:52:02.834 --> 00:52:05.305
with a particular CDN point of presence.

00:52:05.893 --> 00:52:08.733
Without performance monitoring,
I would not have understood

00:52:08.733 --> 00:52:11.345
why my usage was declining in that region.

00:52:12.105 --> 00:52:16.437
And all of these insights come
from just a few lines of code.

00:52:17.656 --> 00:52:21.119
Firebase Performance Monitoring
for the web is available for free

00:52:21.119 --> 00:52:23.291
in beta starting today.

00:52:24.395 --> 00:52:27.894
(applause)

00:52:29.684 --> 00:52:32.581
And these are just two
of the many exciting updates

00:52:32.581 --> 00:52:35.423
we're launching here at I/O for Firebase,

00:52:35.423 --> 00:52:37.719
from AutoML Vision Edge

00:52:37.719 --> 00:52:39.154
to our new Performance Monitoring

00:52:39.154 --> 00:52:40.745
for web apps.

00:52:40.745 --> 00:52:43.348
With every improvement to Firebase,

00:52:43.348 --> 00:52:46.154
we aim to simplify
your app dev workflows

00:52:46.154 --> 00:52:47.745
and infrastructure needs

00:52:47.745 --> 00:52:52.257
so that you can stay focused
on building amazing user experiences.

00:52:52.725 --> 00:52:56.309
And now I'm going to turn it over to Adam
to wrap things up.

00:52:56.745 --> 00:52:57.983
(applause)

00:52:58.073 --> 00:53:00.430
♪ (music) ♪

00:53:05.931 --> 00:53:07.430
Thank you, Kristen.

00:53:07.739 --> 00:53:09.906
So I lead Developer Relations,

00:53:09.906 --> 00:53:12.608
which gives me
a really unique vantage point.

00:53:12.608 --> 00:53:15.277
It's great to connect
with developers every day.

00:53:15.277 --> 00:53:18.707
We get to see how all of you
are making web apps, mobile apps,

00:53:18.707 --> 00:53:21.266
new AI-driven experiences,

00:53:21.266 --> 00:53:25.232
and we get to hear the feedback
that helps us make our products better.

00:53:25.783 --> 00:53:27.942
And I'm excited,
because the team has built

00:53:27.942 --> 00:53:30.622
a really great I/O for you this year.

00:53:30.622 --> 00:53:34.101
We've got sandboxes
where you can see our products in action,

00:53:34.101 --> 00:53:35.943
and you'll find everything from AR,

00:53:35.943 --> 00:53:39.087
the new serverless cloud offerings
we've released,

00:53:39.087 --> 00:53:43.141
and actually an entire sandbox
dedicated to our AI and ML offerings.

00:53:43.816 --> 00:53:48.218
Across I/O you'll find more
than 180 technical sessions this year,

00:53:48.218 --> 00:53:51.130
all presented by engineering
and product leads.

00:53:51.130 --> 00:53:53.940
We've added a new gaming track
that I think you'll really like

00:53:53.940 --> 00:53:57.777
with everything from Android,
Cloud gaming, to Stadia,

00:53:57.777 --> 00:53:59.185
which is pretty exciting.

00:54:00.289 --> 00:54:03.709
And last year, you told us
you liked the inspiration sessions,

00:54:03.709 --> 00:54:06.294
so I'm excited to see
some of what we're bringing.

00:54:06.294 --> 00:54:08.080
We're bringing even more this year,

00:54:08.080 --> 00:54:11.229
and I'm excited to hear
from astronaut Mae Jemison,

00:54:11.229 --> 00:54:14.229
Turing Award winner Geoffrey Hinton,

00:54:14.229 --> 00:54:17.942
and actually Wayne Coyne,
the lead singer of the Flaming Lips,

00:54:17.942 --> 00:54:19.572
is doing an inspiration session.

00:54:19.932 --> 00:54:23.301
Who, by the way, The Flaming Lips
are also going to put on

00:54:23.301 --> 00:54:25.518
an incredible show tomorrow night.

00:54:25.518 --> 00:54:27.125
I'm incredibly excited to see it.

00:54:27.125 --> 00:54:30.653
We have a cool AI
musical integration that they've done.

00:54:30.951 --> 00:54:32.526
And for everybody watching online,

00:54:32.526 --> 00:54:35.481
we're broadcasting it live
so you can watch it too.

00:54:36.202 --> 00:54:38.921
(applause)

00:54:40.526 --> 00:54:42.778
Now, we have a ton of things
to show you at I/O,

00:54:42.778 --> 00:54:45.466
a ton of new technology
that Google is releasing,

00:54:45.466 --> 00:54:48.497
and one of my favorites I wanted
to take a minute on is Flutter.

00:54:48.841 --> 00:54:51.624
(cheers and applause)

00:54:52.377 --> 00:54:54.892
People love Flutter
because it's our open source toolkit

00:54:54.892 --> 00:54:59.370
for building iOS and Android mobile apps
from a single codebase.

00:54:59.370 --> 00:55:02.533
But we're really pleased
to announce something new today,

00:55:02.533 --> 00:55:05.755
and that is a technical preview
of Flutter for the Web.

00:55:06.033 --> 00:55:08.280
(cheers and applause)

00:55:08.480 --> 00:55:11.980
So now you can take the same code
you would use for mobile devices

00:55:11.980 --> 00:55:14.008
and bring it to the web.

00:55:14.008 --> 00:55:16.998
So an example of this is
The New York Times,

00:55:16.998 --> 00:55:19.707
and The New York Times are doing this
with their puzzle apps.

00:55:19.707 --> 00:55:21.768
And rather than rewriting the puzzle app

00:55:21.768 --> 00:55:23.028
for every different platform,

00:55:23.028 --> 00:55:25.312
they can just write it once with Flutter.

00:55:25.312 --> 00:55:27.678
And they can even use Flutter
to take capabilities like this

00:55:27.678 --> 00:55:30.001
and add it to their existing apps

00:55:30.001 --> 00:55:32.292
and include Flutter technology in it.

00:55:32.292 --> 00:55:33.539
So here's an example.

00:55:33.539 --> 00:55:35.883
This is KenKen,
one of their number puzzles.

00:55:35.883 --> 00:55:38.520
And the game changer here
is they've got the same app

00:55:38.520 --> 00:55:42.651
with the same codebase
running at 60 frames per second

00:55:42.651 --> 00:55:48.471
on Android, on iOS, on Mac,
on Windows, and now on the web.

00:55:48.471 --> 00:55:50.817
It's all compiled automatically,

00:55:50.817 --> 00:55:52.823
down in native code or JavaScript.

00:55:52.823 --> 00:55:53.888
It's pretty cool stuff.

00:55:53.888 --> 00:55:55.594
This is one of the things
we'll be showing.

00:55:55.594 --> 00:55:58.347
We'll have this in the Flutter Sandbox. 
Check it out today.

00:55:59.411 --> 00:56:02.321
(cheers and applause)

00:56:03.609 --> 00:56:05.037
So now I wanted to take a second

00:56:05.037 --> 00:56:08.019
and talk about
the Google developer community.

00:56:09.070 --> 00:56:12.762
All of you are here, we're ten years...

00:56:12.762 --> 00:56:15.243
ten years
of our Google developer community

00:56:15.243 --> 00:56:17.805
with programs
like Google Developer Groups,

00:56:17.805 --> 00:56:22.975
Google Developer Experts,
LaunchPad, Women Techmakers.

00:56:23.265 --> 00:56:24.861
(cheers)

00:56:25.066 --> 00:56:29.016
You form connections
with developers all over the world,

00:56:29.016 --> 00:56:30.942
and I wanted to take a minute
to tell you a story

00:56:30.942 --> 00:56:32.912
about one of those developers.

00:56:32.912 --> 00:56:35.836
I wanted to tell you a story
about a woman named Nazirini.

00:56:35.836 --> 00:56:38.521
Nazirini is a developer from Uganda,

00:56:38.521 --> 00:56:41.391
and in that country they're dealing
with a pest in their crops

00:56:41.391 --> 00:56:44.250
called fall armyworm,
and it's devastating.

00:56:44.977 --> 00:56:48.017
Nazirini is a developer
who got introduced to TensorFlow

00:56:48.017 --> 00:56:49.731
through a Study Jam,

00:56:49.731 --> 00:56:51.829
and she worked with a team

00:56:51.829 --> 00:56:54.195
and used her Android
and her new TensorFlow skills

00:56:54.195 --> 00:56:57.062
to build an app
that uses machine learning

00:56:57.062 --> 00:57:01.372
to help diagnose and detect
this attack of fall armyworm earlier

00:57:01.372 --> 00:57:04.766
to help the farmers treat it
and save their harvest.

00:57:05.796 --> 00:57:07.638
Nazirini is actually here today,

00:57:07.638 --> 00:57:09.621
and I thought we could
just give her a big hand.

00:57:09.991 --> 00:57:13.702
(cheers and applause)

00:57:21.596 --> 00:57:26.308
So, as you can see, these connections
you make with the community

00:57:26.308 --> 00:57:28.501
really matter, and make
a difference in the world.

00:57:28.501 --> 00:57:29.502
Thank you.

00:57:29.502 --> 00:57:32.175
Thank you for being
part of this community.

00:57:32.175 --> 00:57:36.122
For the meet-ups you host,
for all the feedback you give us,

00:57:36.122 --> 00:57:38.319
and all the giving back
and mentoring you do

00:57:38.319 --> 00:57:40.517
to other developers, thank you.

00:57:41.158 --> 00:57:44.886
And if anyone here is not already
part of one of those communities,

00:57:44.886 --> 00:57:47.679
there's absolutely no reason
why you shouldn't join.

00:57:47.679 --> 00:57:49.457
And you can join online
with your local group

00:57:49.457 --> 00:57:50.702
or you can actually do it here.

00:57:50.702 --> 00:57:54.067
We built a really cool
developer Community Lounge

00:57:54.067 --> 00:57:55.441
just behind us here

00:57:55.441 --> 00:57:57.640
that I think you'll really enjoy
hanging out with.

00:57:58.227 --> 00:58:01.381
So then, finally, it's also about
all the connections we have

00:58:01.381 --> 00:58:02.872
here at Google with you.

00:58:02.872 --> 00:58:06.691
And I'm excited that we have
more than 2,500 Googlers here

00:58:06.691 --> 00:58:08.865
to meet with you, to talk with you,

00:58:08.865 --> 00:58:11.836
to listen to you, to get your feedback
and share ideas,

00:58:11.836 --> 00:58:15.143
and we're incredibly excited to hear
how you're using our platforms.

00:58:16.320 --> 00:58:19.795
So with that, I/O is off,
it's off to a great start.

00:58:19.795 --> 00:58:21.474
The sessions are about to begin.

00:58:21.474 --> 00:58:23.954
Thanks, everyone for coming to I/O.
Have a great time.

00:58:24.143 --> 00:58:25.845
(cheers and applause)

00:58:26.423 --> 00:58:31.757
♪ (music) ♪

