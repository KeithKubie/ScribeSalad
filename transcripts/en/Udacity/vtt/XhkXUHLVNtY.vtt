WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:03.469
Now we're ready to argue for the
equivalence of our random access model

00:00:03.469 --> 00:00:05.192
and the traditional Turing machine.

00:00:05.192 --> 00:00:08.996
To translate between the symbol
representation of the Turing machine and

00:00:08.996 --> 00:00:12.319
the numbers of RAM,
we use a one-to-one correspondence, E.

00:00:12.319 --> 00:00:15.094
Note that E of the blank symbol is 0.

00:00:15.094 --> 00:00:19.261
That way, the uninitialized parts of
the tape correspond to uninitialized

00:00:19.261 --> 00:00:21.000
parts of RAM.

00:00:21.000 --> 00:00:25.040
First, we argue that RAM can simulate
a single tape Turing machine.

00:00:25.040 --> 00:00:27.530
The role of the tape played
in the Turing machine

00:00:27.530 --> 00:00:29.330
will be played by the memory.

00:00:29.330 --> 00:00:34.540
We'll keep track of the head position
in a fixed register say, R1 and

00:00:34.540 --> 00:00:39.370
the program and the program counter
will implement the transition function.

00:00:39.370 --> 00:00:42.720
Here I've written out in pseudocode
what this might look like for

00:00:42.720 --> 00:00:45.470
the simple Turing
machine shown over here,

00:00:45.470 --> 00:00:49.100
which just replaces all the ones
with zeroes and then halts.

00:00:49.100 --> 00:00:53.820
Being in state q0 corresponds to
having the program counterpoint here.

00:00:54.910 --> 00:00:59.777
So the RAM will execute a sequence of
tests for what the symbol under the head

00:00:59.777 --> 00:01:04.346
would be and it adjusts the values
of the tape and memory accordingly.

00:01:04.346 --> 00:01:09.381
Sometimes, just moving to the right by
changing the value in this register and

00:01:09.381 --> 00:01:12.520
then saying, hey,
let's return to state q0.

00:01:12.520 --> 00:01:17.558
Or sometimes, a write is necessary,
say, for this transition, here.

00:01:17.558 --> 00:01:21.222
And then again, we need to
move the head to the right and

00:01:21.222 --> 00:01:23.619
then transition back to state q0.

00:01:23.619 --> 00:01:26.789
And sometimes we need
to move to a new state,

00:01:26.789 --> 00:01:31.686
like when we encounter the blank
symbol and then in q accept we halt.

00:01:31.686 --> 00:01:32.974
Now we argue the other way,

00:01:32.974 --> 00:01:36.160
that a traditional Turing
machine can simulate a RAM.

00:01:36.160 --> 00:01:39.450
Actually, we'll create a multi-tape
machine to implement a RAM

00:01:39.450 --> 00:01:42.040
since that's a little
easier to conceptualize.

00:01:42.040 --> 00:01:44.690
Of course, anything that can be
done on a multi-tape machine

00:01:44.690 --> 00:01:47.430
can be done with a single
tape as we've already seen.

00:01:47.430 --> 00:01:50.340
We will have one tape per register and

00:01:50.340 --> 00:01:54.470
each tape will represent the numbers
stored in the corresponding registers.

00:01:54.470 --> 00:01:57.430
We also have another tape that's
useful for scratch work in some of

00:01:57.430 --> 00:02:01.730
the instructions, the one's that
involve constants like add 55,

00:02:01.730 --> 00:02:06.230
then we have two tapes corresponding
to the random access device.

00:02:06.230 --> 00:02:09.669
One is just for input and
output and the other is for

00:02:09.669 --> 00:02:13.090
simulating the contents of
the memory device during execution.

00:02:14.320 --> 00:02:16.850
Storing the contents of the random
device is the more interesting part.

00:02:17.960 --> 00:02:22.576
This is done just by concatenating
the index value pairs using

00:02:22.576 --> 00:02:26.667
some standard syntax,
like parentheses and commas.

00:02:26.667 --> 00:02:30.893
The program of the RAM must be simulated
by the state transitions of the Turing

00:02:30.893 --> 00:02:31.485
machine.

00:02:31.485 --> 00:02:36.295
This can be accomplished by having
a subroutine or sub-Turing machine for

00:02:36.295 --> 00:02:38.521
each instruction in the program.

00:02:38.521 --> 00:02:41.236
The most interesting of these
instructions are the ones

00:02:41.236 --> 00:02:42.225
involving memory.

00:02:42.225 --> 00:02:47.364
We simulate those by searching the tape
that stores the contents of the RAM for

00:02:47.364 --> 00:02:51.474
one of these pairs that has
the proper index and then reading or

00:02:51.474 --> 00:02:53.867
writing the value as appropriate.

00:02:53.867 --> 00:02:58.495
If no such pair is found, then the value
in the memory device must be zero and

00:02:58.495 --> 00:03:02.580
we can write a new pair if
it's a writing structure.

00:03:02.580 --> 00:03:05.390
After the work of
the instruction is completed,

00:03:05.390 --> 00:03:09.560
the effect of incrementing the program
counter is achieved by transitioning

00:03:09.560 --> 00:03:13.440
to the state corresponding to
the start of the next instruction.

00:03:13.440 --> 00:03:16.430
That is unless the instruction
was a jump in which case,

00:03:16.430 --> 00:03:18.290
that transition is affected.

00:03:18.290 --> 00:03:22.290
Once the halt instruction is executed,
the contents of the tape simulated in

00:03:22.290 --> 00:03:25.660
random access device are copied
out on to the I/O tape.

