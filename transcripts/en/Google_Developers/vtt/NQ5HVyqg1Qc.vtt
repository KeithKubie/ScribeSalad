WEBVTT
Kind: captions
Language: en

00:00:14.807 --> 00:00:16.807
Test.

00:14:31.536 --> 00:14:33.767
Test.

00:15:42.932 --> 00:15:44.932
[Music playing]

00:17:40.487 --> 00:17:42.487
[music playing]

00:18:12.877 --> 00:18:14.877
&gt;&gt; Hello, and welcome to Flutter
Live.

00:18:16.576 --> 00:18:18.576
I'm Mark Aguinis
&gt;&gt; And I'm Emily Fortuna.

00:18:19.644 --> 00:18:22.111
&gt;&gt; We are all things Flutter.  
We are so happy you are joining 

00:18:22.112 --> 00:18:24.568
fuss for this jam packed two our
event.

00:18:26.407 --> 00:18:28.642
&gt;&gt; I get to connect with people 
from all over the world to make 

00:18:28.643 --> 00:18:31.104
their mobile app ideas possible.
And for today's event, we have 

00:18:31.105 --> 00:18:36.213
dozens of viewing parties 
happening around the world, 

00:18:36.214 --> 00:18:38.214
including Estonia, Canada and 
Angola.

00:18:40.499 --> 00:18:42.499
Before too deep into Flutter 
Live 

00:18:43.789 --> 00:18:45.475
content, Martin, where are you 
here exactly?

00:18:45.476 --> 00:18:47.476
&gt;&gt; I could ask you the same 
thing.

00:18:48.749 --> 00:18:51.198
&gt;&gt; Well, I'm part of the Flutter
team.  I have been a software 

00:18:51.199 --> 00:18:53.199
engineer on the Dart team for 
five years.

00:18:56.738 --> 00:18:58.981
You may recognize me from Google
IO or an YouTube like the 

00:18:58.982 --> 00:19:00.982
Flutter boring development show.

00:19:02.640 --> 00:19:04.640
When I'm not being a computer 

00:19:06.170 --> 00:19:08.170
scientist, I'm an  actor and 
improviser.  Yeah.

00:19:08.829 --> 00:19:10.069
&gt;&gt; Well, I'm on the Flutter team
here at Google and I have been 

00:19:10.070 --> 00:19:12.954
on the team for a year and a 
half, starting back when we were

00:19:12.955 --> 00:19:15.778
in alpha.  You might be familiar
with my voice on 

00:19:19.327 --> 00:19:22.202
the introducing Flutter video or
talks at GG China and Google 

00:19:22.203 --> 00:19:26.288
Marketing live.  And we will be 
showing you around the venue and

00:19:26.289 --> 00:19:28.338
bringing exclusive live content 
including interviews, demos and 

00:19:28.541 --> 00:19:30.541
more.

00:19:32.426 --> 00:19:34.426
&gt;&gt; Flutter Live is a global 
celebration 

00:19:36.104 --> 00:19:38.546
of Flutter, and there will be 
things we can't share  yet, the 

00:19:38.547 --> 00:19:40.547
functionality of Flutter as well
as the ecosystem.

00:19:41.603 --> 00:19:43.603
&gt;&gt; Starting with some fun facts 
about Flutter.

00:19:45.079 --> 00:19:47.128
Did you know that the Flutter 
and Dart mascot is called Dash 

00:19:47.129 --> 00:19:50.040
and there were over 2,000 of 
them  created today.

00:19:50.650 --> 00:19:52.696
&gt;&gt; Very cool.  Flutter has been 
in development for four years.

00:19:52.904 --> 00:19:54.904
&gt;&gt; And actually before it was 
called 

00:19:57.589 --> 00:19:59.589
Flutter, the original name was 
Skyy.

00:19:59.616 --> 00:20:01.037
&gt;&gt; I like Flutter better.
&gt;&gt; Do you know what country has 

00:20:01.038 --> 00:20:03.038
the largest number of developers
of Flutter?

00:20:03.507 --> 00:20:07.188
&gt;&gt; Yeah, it's China.
&gt;&gt; Nice.  Martin, do you want to

00:20:07.189 --> 00:20:09.189
share a fun fact about yourself 
with us?

00:20:10.646 --> 00:20:12.646
&gt;&gt; Well, one of the first brands
to use 

00:20:16.165 --> 00:20:18.610
Flutter was Ham ill Hamilton, 
the Broadway musical.  I'm 

00:20:18.611 --> 00:20:20.611
somewhat obsessed with it.
&gt;&gt; Somewhat obsessed.

00:20:23.180 --> 00:20:25.180
&gt;&gt; I've memorized every lyric.
&gt;&gt; Show us.

00:20:26.660 --> 00:20:28.660
&gt;&gt; The ten daughter without a 
father, 

00:20:29.930 --> 00:20:31.930
working a lot harder by being a 
lot 

00:20:34.241 --> 00:20:36.668
smartedder by being a 
self-starter by 14.  And they 

00:20:36.669 --> 00:20:38.669
place in the charge of the 
chart.

00:20:41.074 --> 00:20:46.568
&gt;&gt; Hamilton is one of the most 
talked about and most loved 

00:20:46.569 --> 00:20:49.814
musicals inland and Broadway and
around the around.  We wanted to

00:20:49.815 --> 00:20:55.156
make the show more accessible to
develop an app to meet the needs

00:20:55.157 --> 00:20:57.157
of fans as we started to expand 
the brand.

00:20:59.234 --> 00:21:01.895
We turned to Posse, a New 
York-based development firm.

00:21:04.749 --> 00:21:06.749
&gt;&gt; Hamilton's app launched three
months after writing the code.

00:21:09.452 --> 00:21:11.077
Fans can enter a daily lottery, 
buy merchandise for a commerce 

00:21:11.078 --> 00:21:14.164
experience, take selfie photos 
and get daily news and updates.

00:21:14.355 --> 00:21:17.245
&gt;&gt; We knew the app needed to be 
rock 

00:21:21.098 --> 00:21:22.747
solid and really represent the 
amazing Spencer that the 

00:21:22.748 --> 00:21:25.203
Hamilton show itself provides.  
And ultimately that's why we 

00:21:25.204 --> 00:21:27.204
decided to use Flutter.

00:21:28.894 --> 00:21:30.894
&gt;&gt; Flutter is a mobile UI 
toolkit that 

00:21:33.019 --> 00:21:35.019
allows developers and designers 
to craft 

00:21:36.098 --> 00:21:37.136
beautiful native experiences on 
iO S and Android and it's open  

00:21:37.137 --> 00:21:39.803
source.
&gt;&gt; We have high expectations of 

00:21:39.804 --> 00:21:41.804
quality.

00:21:44.284 --> 00:21:46.321
We expect pixel-perfect results 
and need them to be high 

00:21:46.322 --> 00:21:50.020
performers.  Flutter gave us 
opportunities that previously 

00:21:50.021 --> 00:21:52.021
wasn't available to us.

00:21:53.297 --> 00:21:55.297
The fact that it was a single 

00:21:56.363 --> 00:21:59.202
codebase, we could be consistent
across platforms.  Extendability

00:21:59.203 --> 00:22:02.091
to produce more features.
&gt;&gt; It allowed me to make changes

00:22:02.092 --> 00:22:04.788
fast and iterate without having 
to stop and restart the app.

00:22:09.095 --> 00:22:11.095
Coming from an iOS and Android 
with 

00:22:12.144 --> 00:22:14.144
background, it's what I've been 
waiting for.

00:22:15.430 --> 00:22:17.473
The community helped us 
integrate elements of Firebase 

00:22:17.474 --> 00:22:19.474
and Cloud.

00:22:21.797 --> 00:22:23.663
&gt;&gt; We are happy we found Flutter
to build these for iOS and 

00:22:23.664 --> 00:22:26.101
Android.
&gt;&gt; We turned the app around 

00:22:26.102 --> 00:22:29.576
faster than I could have 
imagined.  We were able to make 

00:22:29.577 --> 00:22:32.438
changes right up to the night we
went live and really feel 

00:22:32.439 --> 00:22:34.516
confident about them.  In fact, 
we pushed an  entirely new 

00:22:36.754 --> 00:22:38.807
feature to the app store the day
before we launched.

00:22:41.880 --> 00:22:44.154
&gt;&gt; And since launch, Flutter's 
speed helped us build new 

00:22:44.155 --> 00:22:46.155
features such as the trivia 
game.

00:22:47.619 --> 00:22:49.669
As the show grows, we can keep 
pace with a ton of new features 

00:22:49.670 --> 00:22:52.925
to make the app better.
&gt;&gt; We couldn't be more thrilled 

00:22:52.926 --> 00:22:54.926
with Flutter.

00:22:56.196 --> 00:22:58.196
We have used one codebase to 
deliver a 

00:23:00.292 --> 00:23:01.721
high-quality app that Hamilton 
fans have fallen in love with.

00:23:01.722 --> 00:23:06.441
&gt;&gt; The entire brand of Hamilton 
is about an experience for fans 

00:23:06.442 --> 00:23:08.442
they're thrilled 

00:23:10.304 --> 00:23:12.980
about the new features and we're
excited about where the app goes

00:23:12.981 --> 00:23:15.418
next.
&gt;&gt; Mobile users expect their 

00:23:15.419 --> 00:23:17.419
apps to 

00:23:18.505 --> 00:23:19.319
have beautiful designs, smooth 
animations and great 

00:23:19.320 --> 00:23:24.252
performance.  To deliver on 
this, developers need to create 

00:23:24.253 --> 00:23:26.106
new features faster than ever 
without compromising on quality 

00:23:26.107 --> 00:23:28.107
or performance.  That's why we 
built Flutter.

00:23:31.218 --> 00:23:33.247
Flutter is Google's mobile UI 
framework that provides a fast 

00:23:33.248 --> 00:23:35.248
and expressive way for 
developers to build 

00:23:38.126 --> 00:23:39.969
native apps on both iOS and 
Android.  This is because apps 

00:23:39.970 --> 00:23:42.241
and interfaces made with Flutter
are built from a 

00:23:46.114 --> 00:23:48.114
single codebase, compiled to 
code and 

00:23:50.833 --> 00:23:52.867
use the GPU and access  
platforms and services.  Three 

00:23:52.868 --> 00:23:56.137
ways that Flutter helps you on 
day one.  Engineered for high 

00:23:56.138 --> 00:24:00.876
developer velocity.  Stateful 
hot reload, you can change the 

00:24:00.877 --> 00:24:02.915
code and see it come to life in 
less than a second without 

00:24:02.916 --> 00:24:04.916
losing the state of the app.

00:24:06.584 --> 00:24:09.496
It ships with customizable 
widgets built from the modern 

00:24:09.497 --> 00:24:11.939
reactive framework.  Plus 
popular development tools so you

00:24:13.988 --> 00:24:16.413
can get started quickly with the
editor or IDE you know and love.

00:24:17.451 --> 00:24:19.451
Flutter moves the

00:24:20.561 --> 00:24:22.183
widgets,  rendering, and 
gestures into the framework to 

00:24:22.184 --> 00:24:26.919
give you complete control over 
every pixel on the screen.  You 

00:24:26.920 --> 00:24:28.920
have flexibility to build custom
designs.

00:24:31.433 --> 00:24:33.925
Flutter apps have platform 
conventions and details such as 

00:24:33.926 --> 00:24:35.926
scrolling, icons, fonts and 
more.

00:24:40.109 --> 00:24:40.929
Apps with Flutter are on the app
store and Google Play 

00:24:40.930 --> 00:24:42.993
stereotype.  If you're new to 
mobile, Flutter gives 

00:24:46.067 --> 00:24:49.938
you a fast, fun and modern way 
to deliver native  apps.  As an 

00:24:49.939 --> 00:24:51.165
experienced developer, you can 
add Flutter to the existing 

00:24:51.166 --> 00:24:53.166
tools to 

00:24:54.823 --> 00:24:57.081
build new,  expressive UIs.  
It's free and open source and 

00:24:57.082 --> 00:24:59.082
used by developers and 
organizations around the 

00:25:02.999 --> 00:25:04.015
world including enterprise, 
agencies and startups.  Visit 

00:25:04.016 --> 00:25:08.140
Flutter.io to get started today.
We can't wait to see what you 

00:25:08.141 --> 00:25:11.978
are going to build.
&gt;&gt; I'm here with Nilay, one of 

00:25:11.979 --> 00:25:16.354
the program managers on the 
Flutter team and also one of the

00:25:16.355 --> 00:25:20.868
key people working on building 
up our Flutter community.  

00:25:20.869 --> 00:25:22.121
Nilay, you have done an amazing 
job at building up the Flutter 

00:25:22.122 --> 00:25:26.676
community all around the world. 
I am seriously impressed.  And I

00:25:26.677 --> 00:25:29.344
wanted to ask you a little bit 
more about how you got involved 

00:25:29.345 --> 00:25:32.023
with  that.
&gt;&gt; I actually have a story about

00:25:32.024 --> 00:25:35.501
how I started working with 
Flutter.  So, I was working with

00:25:35.502 --> 00:25:37.983
the developer communities in 
another team at Google.

00:25:41.636 --> 00:25:43.471
And then so, with those 
communities they are trying to 

00:25:43.472 --> 00:25:47.180
learn about Google technologies,
they are running meetups, they 

00:25:47.181 --> 00:25:49.444
are asking some resources.  And 
all of a sudden, the community 

00:25:50.251 --> 00:25:52.483
started asking about  Flutter.  
Oh, we need some speakers for 

00:25:52.484 --> 00:25:57.197
Flutter.  Can we get some 
resources for Flutter?  Oh, what

00:25:57.198 --> 00:25:59.862
is that Flutter?  I should look 
at that.  Basically the 

00:25:59.863 --> 00:26:01.703
community attracted me about the
Flutter and I just looked into 

00:26:01.704 --> 00:26:08.479
that.  It was a great team.  I'm
so happy being in this team.

00:26:11.127 --> 00:26:13.208
&gt;&gt; What do you take into 
building a developer community? 

00:26:13.209 --> 00:26:15.278
Do you have any advice?
&gt;&gt; Building a community is not 

00:26:15.279 --> 00:26:18.524
an easy job, but also not 
impossible.  It's all about 

00:26:18.525 --> 00:26:20.788
bringing the right people 
together.  So, if you want to 

00:26:20.789 --> 00:26:22.789
build a community around 
something, you just have to find

00:26:25.480 --> 00:26:27.313
the people that is going to 
create the foundation of your 

00:26:27.314 --> 00:26:32.021
community.  They are the people 
who is sharing the same 

00:26:32.022 --> 00:26:34.050
interests and shared values and 
they are trying to do something 

00:26:34.051 --> 00:26:38.594
with your technology.  This will
be the group of people that are 

00:26:38.595 --> 00:26:39.203
going to set the tone of the 
community and the standards of 

00:26:39.204 --> 00:26:41.204
the community.

00:26:42.909 --> 00:26:44.909
&gt;&gt; You work with the women tech 
leaders I believe.

00:26:47.895 --> 00:26:48.502
Can you tell us a little bit 
about your involvement with 

00:26:48.503 --> 00:26:51.712
them?
&gt;&gt; I was running community 

00:26:51.713 --> 00:26:53.713
events for everyone.

00:26:57.901 --> 00:26:59.901
We were looking for speakers, we
got little response from women.

00:27:01.968 --> 00:27:04.630
But the first women tech makers 
in Istanbul, I got 50 speakers.

00:27:08.130 --> 00:27:10.768
Why didn't these women submit 
for the other conference?  And 

00:27:10.769 --> 00:27:12.841
this kind of thing is happening,
and we want to feel more 

00:27:12.842 --> 00:27:14.907
encouraged, more empowered.  So,
they are participating.

00:27:17.003 --> 00:27:22.130
&gt;&gt; Agreed.  Nilay, thank you so 
much for talking with me.  This 

00:27:22.131 --> 00:27:24.131
is great.

00:27:28.250 --> 00:27:30.250
&gt;&gt; Hi, I am an engineer and I'm 

00:27:31.323 --> 00:27:33.572
organizing a Flutter meetup.  I 
was introduced to Flutter in 

00:27:33.573 --> 00:27:37.066
2017 and it changed my life.  
Now, the software that fits you.

00:27:40.780 --> 00:27:44.057
I can change one piece and take 
it live on the device.  And I 

00:27:44.058 --> 00:27:46.058
don't have to wait two minutes 
anymore.

00:27:47.520 --> 00:27:49.520
To make Flutter even better, I 

00:27:50.978 --> 00:27:53.613
karatted some patches such as 
preview, slight, sticky, and 

00:27:53.614 --> 00:27:55.614
most importantly, side kick.

00:27:57.897 --> 00:28:00.143
I can create complex apps more 
easily with Flutter than with 

00:28:00.144 --> 00:28:02.392
others.  That's magic of 
Flutter.

00:28:07.560 --> 00:28:09.216
For example, I was  creating 
this app.  To go to Flutter 

00:28:09.217 --> 00:28:13.080
Live.  These animations are 
entirely programmed on Flutter.

00:28:17.427 --> 00:28:19.427
My favorite part of Flutter is 
that 

00:28:22.342 --> 00:28:24.342
what I saw on my phone is what 
my users see.

00:28:27.469 --> 00:28:29.469
It matches the device and 
matches what is produced.

00:28:31.186 --> 00:28:33.186
And Flutter is a  fast, growing,
vibrant community.

00:28:35.060 --> 00:28:37.060
And thanks to Flutter, the 
future of 

00:28:38.815 --> 00:28:40.815
unified development is 
happening!

00:28:46.159 --> 00:28:48.298
&gt;&gt; Here we are inside the 
science museum IMAX.  The 

00:28:48.299 --> 00:28:49.311
Flutter keynote is about to 
happen.  Let's look at the 

00:28:49.312 --> 00:28:53.621
stage.  This is a pretty cool 
design.  And this screen is 

00:28:53.622 --> 00:28:58.343
huge.  It's so big that you can 
fit four double decker buses on 

00:28:58.344 --> 00:29:00.344
top of each other.

00:29:02.644 --> 00:29:04.272
Or if we were to lay this thing 
flat, you could park 64 taxis on

00:29:04.273 --> 00:29:06.914
it.  I'm so excited for this 
keynote to begin.

00:29:09.961 --> 00:29:11.961
But before it does, let's take a
brief 

00:29:13.264 --> 00:29:15.701
look at the rest of the venue as
we set up.  Here we are in front

00:29:15.702 --> 00:29:19.164
of registration where all the 
onsite attendees are checking 

00:29:19.165 --> 00:29:21.165
in.

00:29:22.272 --> 00:29:24.090
After the keynote, in this 
space, we have cool demos and 

00:29:24.091 --> 00:29:28.002
activations to show you.  Let's 
look at a few of them.  All the 

00:29:28.003 --> 00:29:30.003
way in the back of the room, a 

00:29:31.051 --> 00:29:32.693
massive showcase wall with 99 
phones that have Flutter apps 

00:29:32.694 --> 00:29:36.386
loaded on  them.  If you want to
check out the apps on the phone,

00:29:36.387 --> 00:29:41.114
go to flutter.io-showcase.  And 
we have the  #askflutter show.

00:29:46.035 --> 00:29:46.642
Andrew from our team is 
answering your questions after 

00:29:46.643 --> 00:29:48.643
the show.  What are you looking 
at?

00:29:51.155 --> 00:29:53.155
&gt;&gt; Looking the at Tweet for ask 
Flutter.

00:29:54.436 --> 00:29:56.464
Jose asked how to use a white 
status bar with a Material app 

00:29:56.465 --> 00:29:58.749
bar.
&gt;&gt; Actually the Material app bar

00:29:58.750 --> 00:30:02.612
should style the status for you,
but you can set it yourself with

00:30:02.613 --> 00:30:05.274
Chrome.
&gt;&gt; It looks like the show 

00:30:05.275 --> 00:30:06.900
technically already started.  
But most of the questions will 

00:30:06.901 --> 00:30:08.901
be answered right after the 
keynote.

00:30:11.389 --> 00:30:14.261
Make sure to stay tuned and ask 
all your questions using 

00:30:14.262 --> 00:30:16.262
#askflutter.
&gt;&gt; We'll be waiting.

00:30:16.712 --> 00:30:18.712
&gt;&gt; Thanks.

00:30:19.998 --> 00:30:23.700
&gt;&gt; Hello, I live in Israel, I'm 
a co-founder.  I switched to 

00:30:23.701 --> 00:30:27.607
Flutter from JavaScript and PHP.
Having only typed code, it's a 

00:30:27.608 --> 00:30:29.670
game changer.  Hard to go back.

00:30:33.598 --> 00:30:35.032
We are using Flutter to rebuild 
native mobile apps, from three 

00:30:35.033 --> 00:30:40.166
to two.  It's a massive win, 
we're a small team.  My favorite

00:30:40.167 --> 00:30:42.167
part of Flutter is the 

00:30:44.075 --> 00:30:45.717
amazing productivity it enables.
We are accomplishing in months 

00:30:45.718 --> 00:30:47.718
what was taking years.

00:30:52.269 --> 00:30:53.707
&gt;&gt; And now Eric Seidel, you were
on the Chrome team when this 

00:30:53.708 --> 00:30:58.418
came to be.  You have seen it go
from an idea to now, you know, a

00:30:58.419 --> 00:31:00.849
globally-used framework.  I'm 
curious, what was your initial 

00:31:03.523 --> 00:31:04.473
vision with Flutter and how has 
that changed, if anything, and 

00:31:04.474 --> 00:31:07.356
evolved.
&gt;&gt; Yeah, Flutter started out 

00:31:07.357 --> 00:31:10.609
with a very different purpose 
than it has now.  Flutter 

00:31:10.610 --> 00:31:14.481
started out as just trying to 
make the web better.  We were 

00:31:14.482 --> 00:31:17.814
tries to make Chrome better, 
trying to make Chrome smaller.  

00:31:17.815 --> 00:31:20.051
And when we first started 
Flutter, we took a couple weeks 

00:31:20.052 --> 00:31:23.710
and we took a razor to Chrome, 
we said.  We even called the 

00:31:23.711 --> 00:31:25.990
test results that we came up 
with "Razor.

00:31:30.073 --> 00:31:32.537
"  And we cut down Chrome and 
tried to make it fast and small 

00:31:32.538 --> 00:31:34.538
and remove some of the sharp 
edges that the weapon has 

00:31:35.843 --> 00:31:37.843
developed over many, many years.

00:31:38.944 --> 00:31:39.758
Anyway, we ended up with a 
faster web, but that wasn't 

00:31:39.759 --> 00:31:43.229
sufficient.  We wanted to do 
more and we ended up adding more

00:31:43.230 --> 00:31:46.290
and more and more.  And once you
add things, you're no longer on 

00:31:46.291 --> 00:31:48.728
the web.  We have rewritten the 
system maybe 

00:31:52.208 --> 00:31:53.607
three times  since, but what we 
have now is Flutter.

00:31:53.608 --> 00:31:57.336
&gt;&gt; Great.  So, what we have now,
obviously, has been used all 

00:31:57.337 --> 00:31:59.337
over the world.

00:32:00.621 --> 00:32:02.458
But I'm curious along that 
adoption journey was there a 

00:32:02.459 --> 00:32:04.898
moment when you went, wow.  This
is legitimate.  This is really  

00:32:04.899 --> 00:32:06.899
taking off.

00:32:08.561 --> 00:32:11.469
&gt;&gt; I think the biggest moment 
for me was Hamilton.  When we 

00:32:11.470 --> 00:32:13.698
saw the Hamilton app ship, when 
we saw that team be successful 

00:32:13.699 --> 00:32:15.699
with Flutter.

00:32:17.430 --> 00:32:19.430
We had seen teams be successful 
inside Google for several years.

00:32:21.799 --> 00:32:24.239
But seeing folks that we had 
much less ability to, you know, 

00:32:24.240 --> 00:32:26.240
talk to on a 

00:32:27.738 --> 00:32:29.352
minute-to-minute basis be 
successful with this technology 

00:32:29.353 --> 00:32:31.626
helped me belief that, yeah, 
anybody can use that.

00:32:32.228 --> 00:32:35.102
&gt;&gt; That's great.  I know now 
they have over a million 

00:32:36.737 --> 00:32:38.737
installs and a lot of people are
winning tickets through the app.

00:32:38.815 --> 00:32:41.284
$10 tickets.  That's  great.  
Where do you see Flutter headed 

00:32:41.285 --> 00:32:43.142
in the future?
&gt;&gt; One of the things that we're 

00:32:43.143 --> 00:32:47.419
seeing with Flutter is we're 
seeing people take Flutter to 

00:32:47.420 --> 00:32:51.597
more places.  We, you know, 
started with iOS and Android 

00:32:51.598 --> 00:32:53.598
because that's where so many 
developers are today.

00:32:56.297 --> 00:32:58.382
But we have seen people bring 
Flutter to desktop.  We have 

00:32:58.383 --> 00:33:01.236
seen people experiment with 
Flutter on all sorts of sizes 

00:33:01.237 --> 00:33:05.992
and shape of devices and I'm 
really excited to, you know, 

00:33:05.993 --> 00:33:07.006
light up more Devs as that 
continues.

00:33:07.007 --> 00:33:09.045
&gt;&gt; Awesome.  Well, thank you so 
much, Eric.

00:33:15.439 --> 00:33:17.542
&gt;&gt; Oh, hi, I'm Phillip I from 
the Flutter team, I'm here to 

00:33:17.543 --> 00:33:19.543
introduce the boring show.

00:33:22.404 --> 00:33:24.032
It's where two engineers sit 
down and build apps in Flutter 

00:33:24.033 --> 00:33:29.158
from scratch.  The show is 
unedited, you see the mistakes, 

00:33:29.159 --> 00:33:31.460
all the dead ends and how we get
out of them.  It's an 

00:33:31.461 --> 00:33:33.119
opportunity for you see Flutter 
being used in more complicated 

00:33:33.120 --> 00:33:35.120
apps.

00:33:36.375 --> 00:33:37.614
We take viewer suggestions on 
what features and had apps to 

00:33:37.615 --> 00:33:39.615
build next.

00:33:40.903 --> 00:33:42.903
If you have a lot of time and 
like 

00:33:44.351 --> 00:33:46.351
boring things like watching 
butter melt 

00:33:48.263 --> 00:33:50.263
or doing your  taxes, you'll 
love this show.

00:36:45.264 --> 00:36:47.264
&gt;&gt; Hey, I'm Martin and standing 
here 

00:36:48.958 --> 00:36:51.398
with Tao and Ja young from our 
UX research team at Google.  I 

00:36:51.399 --> 00:36:53.399
want to start with asking you, 
what 

00:36:54.668 --> 00:36:56.668
do you do at UX in Google and 
specifically with Flutter.

00:36:57.719 --> 00:36:59.543
&gt;&gt; UX in general is trying to 
make sure our product 

00:36:59.544 --> 00:37:01.404
development is centered around 
user needs and make sure they 

00:37:01.405 --> 00:37:06.953
are usable and useful.  But our 
work on Flutter is a little bit 

00:37:06.954 --> 00:37:08.840
different from general UX 
because we work on a developer 

00:37:08.841 --> 00:37:11.282
product and we try to make sure 
the team understands that 

00:37:16.784 --> 00:37:17.999
programming and active 
development is an inherently 

00:37:18.000 --> 00:37:20.000
human process and human 
activities.

00:37:21.300 --> 00:37:23.749
We want to make sure the 
features, the API and design we 

00:37:23.750 --> 00:37:28.831
implement satisfies the needs 
and allows the developer to move

00:37:28.832 --> 00:37:30.832
as fast as they could without 

00:37:31.895 --> 00:37:33.895
frictions and seams when they 
use our tools.

00:37:36.227 --> 00:37:38.467
&gt;&gt; Could you maybe share with us
a recent study you have done as 

00:37:38.468 --> 00:37:41.348
part of using the effort.
&gt;&gt; I have been running Flutter 

00:37:41.349 --> 00:37:45.889
user survey.  Thanks all for 
participating in.  We've learned

00:37:45.890 --> 00:37:48.777
a lot from our users and our 
main goal is to bridge the gap 

00:37:50.203 --> 00:37:52.655
between our users and engineers 
to help the engineers prioritize

00:37:52.656 --> 00:37:54.656
their time and effort in 
developing Flutter.

00:37:56.336 --> 00:37:58.765
&gt;&gt; In doing these types of 
things, was there something that

00:37:58.766 --> 00:38:00.766
was surprising or 

00:38:02.115 --> 00:38:04.115
shocking as you did these 
research projects?

00:38:04.385 --> 00:38:06.610
&gt;&gt; Yeah, we had a recent 
experiment where we looked at 

00:38:06.611 --> 00:38:09.102
different ways to improve our 
messages.  And many of the 

00:38:09.103 --> 00:38:11.550
community members actually 
participated in this experiment.

00:38:12.779 --> 00:38:14.808
Thank you for your 
participation.  But one thing we

00:38:14.809 --> 00:38:16.809
found is that  adding 

00:38:18.120 --> 00:38:20.120
a little bit of styling in the 
error 

00:38:22.474 --> 00:38:25.330
message like color or structure 
and omitting some of the details

00:38:25.331 --> 00:38:27.331
can greatly 

00:38:30.424 --> 00:38:32.424
improve the error message 
comprehension by sometimes 30%.

00:38:35.142 --> 00:38:36.972
By having the guidelines to make
sure Flutter's error messages 

00:38:36.973 --> 00:38:38.973
are more usable 

00:38:40.023 --> 00:38:42.023
and easier to understand in the 
future.

00:38:43.479 --> 00:38:44.713
&gt;&gt; What motivates you personally
to work on Flutter every day?

00:38:44.714 --> 00:38:47.781
&gt;&gt; I think that Flutter is an 
open source project, it's 

00:38:47.782 --> 00:38:52.571
awesome.  And the engineers from
Google and the community members

00:38:52.572 --> 00:38:57.484
also at Google work together to 
create this app called Flutter. 

00:38:57.485 --> 00:38:59.378
It's awesome.
&gt;&gt; Thank you, I have had the 

00:38:59.379 --> 00:39:03.230
privilege of working with you 
guy on some of these as well.  

00:39:03.231 --> 00:39:05.231
Thank you for sharing and thank 
you 

00:39:06.705 --> 00:39:08.705
for sharing some of your work.

00:39:14.917 --> 00:39:16.917
&gt;&gt; Oh, hi there, I'm a Flutter 

00:39:21.176 --> 00:39:24.547
developer, I'm also the CTO at 
Zumbai.  Flutter has changed the

00:39:24.548 --> 00:39:26.548
way I code.

00:39:28.230 --> 00:39:32.524
I previously developed products 
and then an iOS app.  As a 

00:39:32.525 --> 00:39:34.525
developer, I don't want to 
maintain two apps.

00:39:37.030 --> 00:39:39.673
Flutter changed the way I build 
both apps at once.  And it's 

00:39:39.674 --> 00:39:43.761
native, I don't have to worry 
about cross-platform.  And I 

00:39:43.762 --> 00:39:47.410
love how fast it is to develop 
Flutter.  I like hot reload.  

00:39:47.411 --> 00:39:50.927
This building the app instantly 
is like magical.  One of the 

00:39:50.928 --> 00:39:52.762
great things I like about the 
Flutter community is that when 

00:39:52.763 --> 00:39:54.763
you 

00:39:57.229 --> 00:39:59.698
go on to the hub, you can find 
all sorts of great tutorials and

00:39:59.699 --> 00:40:01.140
components that you can actually
use in your projects right 

00:40:01.141 --> 00:40:05.282
there.  This is a great way for 
a community to build and it's 

00:40:05.283 --> 00:40:07.283
one of the first signs that the 
technology that you're using is 

00:40:07.924 --> 00:40:11.399
very, very valuable.  So, with 
that, I think  Flutter's going 

00:40:11.400 --> 00:40:12.819
to be an amazing tool for the 
coming years and it's going to 

00:40:12.820 --> 00:40:14.820
be one of 

00:40:17.109 --> 00:40:19.109
the best ways to build mobile 
apps.

00:40:28.146 --> 00:40:30.146
&gt;&gt; On today's advisers, apps 
rarely get 

00:40:32.059 --> 00:40:34.059
a neat rectangle to run in, 
controls can 

00:40:36.132 --> 00:40:37.549
come in and controls nip at the 
content, complicating layouts 

00:40:37.550 --> 00:40:41.627
with.  There is safearea.  It 
changes the screen and pads the 

00:40:42.243 --> 00:40:44.492
shell to match.  If your app 
looks like this, wrap it 

00:40:48.199 --> 00:40:49.613
in a safearea and keep your 
content safe on both iOS and 

00:40:49.614 --> 00:40:54.334
Android.  You can specify which 
dimensions you care about.  And 

00:40:54.335 --> 00:40:56.335
wrapping the body of a scaffold 
works great.

00:40:58.831 --> 00:41:00.831
For more area on SafeArea and 
the 

00:41:02.314 --> 00:41:04.550
other Flutter widgets, head to 
flutter.io.

00:41:08.224 --> 00:41:12.108
&gt;&gt; If you could hat reload 
anything in your life, what 

00:41:12.109 --> 00:41:14.109
would it be?

00:41:17.454 --> 00:41:18.674
&gt;&gt; I would want to hot reload 
the sending  Dashes to the 

00:41:18.675 --> 00:41:22.967
community.  Because there are so
many people from so many 

00:41:22.968 --> 00:41:25.421
countries that I want to have a 
Dash.  And I was like, it's not 

00:41:25.422 --> 00:41:27.422
so easy to ship a  Dash to that 
one.

00:41:30.334 --> 00:41:32.334
So, I would want to hot reload 
that one.

00:41:33.197 --> 00:41:34.438
&gt;&gt; One of the things that is 
helpful is to eliminate the long

00:41:34.439 --> 00:41:36.439
time.  But if I could broaden 
that 

00:41:39.560 --> 00:41:41.560
capabilities to my life, I wish 
I could 

00:41:42.611 --> 00:41:44.611
have hot reload for the Bay area
traffic 

00:41:46.339 --> 00:41:46.940
so I can get home sooner and get
to work sooner in the morning.

00:41:46.941 --> 00:41:49.618
&gt;&gt; The time that my husband ate 
that 

00:41:54.328 --> 00:41:56.328
lobster roll and he was sick on 
vacation.

00:41:57.844 --> 00:41:59.844
I would change has lobster roll 
to false, definitely.

00:42:00.888 --> 00:42:02.888
&gt;&gt; I would have my coffee this 
morning.

00:42:03.346 --> 00:42:04.584
&gt;&gt; If you could hot reload 
anything in your life, what 

00:42:04.585 --> 00:42:07.299
would it be?
&gt;&gt; Well, I think it would have 

00:42:07.300 --> 00:42:09.300
to be weight loss.

00:42:11.998 --> 00:42:13.622
I skip breakfast, I lose 20 
pounds!

00:42:13.623 --> 00:42:18.562
&gt;&gt; Hey you.  Yeah, you.  You're 
in this because you're curious 

00:42:20.409 --> 00:42:22.462
about Flutter, yeah?  The 
conversation doesn't just go one

00:42:23.081 --> 00:42:25.081
way.

00:42:26.754 --> 00:42:29.049
The  #flutterlive.
&gt;&gt; We are open source and this 

00:42:29.050 --> 00:42:32.515
event is no different.  We will 
be responding to comments in 

00:42:33.123 --> 00:42:35.568
real-time.
&gt;&gt; Let's look at what people 

00:42:35.569 --> 00:42:37.569
have been posting in the leadup 
to this event.

00:42:40.892 --> 00:42:42.892
Samuel says FYI, I'll be 
watching 

00:42:44.393 --> 00:42:47.274
Flutter Live on December # 4th.

00:42:53.654 --> 00:42:55.654
&gt;&gt; [speaking in Spanish -- 
#flutterlive.

00:42:56.755 --> 00:42:58.862
] throughout the live stream, we
will be jumping back to show the

00:42:58.863 --> 00:43:02.342
Tweets coming in during Flutter 
Live.  And huge shoutout to 

00:43:02.343 --> 00:43:04.405
those hosting viewing parties.
&gt;&gt; Oh, and speaking of social 

00:43:04.406 --> 00:43:06.406
media, if you would like to 
connect with the 

00:43:11.787 --> 00:43:14.054
Flutter team, follow us on 
Twitter @flutterio.  Or check 

00:43:14.055 --> 00:43:15.889
out the YouTube channel.
&gt;&gt; And check out the community 

00:43:15.890 --> 00:43:19.747
section of  putter.io for more 
info.

00:43:23.864 --> 00:43:24.900
&gt;&gt; I'm here with Maurice, a 
software engineer on the Flutter

00:43:24.901 --> 00:43:27.960
team.  He's particularly focused
on the plugins and ecosystem 

00:43:27.961 --> 00:43:29.961
part of Flutter.

00:43:31.240 --> 00:43:35.975
So, I know that you've worked a 
lot on the Firebase  plugins.  

00:43:35.976 --> 00:43:38.636
Is there a particular Firebase 
plugin that you think is 

00:43:38.637 --> 00:43:41.701
especially underappreciated that
should have some more love?  

00:43:41.702 --> 00:43:46.416
More usage?
&gt;&gt; I like the Firebase plugin.  

00:43:46.417 --> 00:43:48.066
With that plugin, it makes it 
really easy to navigate to the 

00:43:48.067 --> 00:43:50.912
part of your app that you really
like.  And combined with 

00:43:50.913 --> 00:43:52.913
Flutter's route and how easy it 
is to navigate with Flutter, 

00:43:55.888 --> 00:43:57.888
I think it fits really well 
inside that ecosystem.

00:44:01.652 --> 00:44:03.093
&gt;&gt; So, how would you combine 
dynamic links with the route in 

00:44:03.094 --> 00:44:05.555
Flutter?
&gt;&gt; Go to the website, get your 

00:44:09.097 --> 00:44:11.341
configuration file for Android 
or iOS.  Just plug that in and 

00:44:11.342 --> 00:44:14.808
include the dependency in your 
spec and everything.  Then after

00:44:14.809 --> 00:44:17.070
that, all you have to do is just
retrieve the dynamic link and 

00:44:17.071 --> 00:44:21.566
just parse it.  And then you can
use the navigation with pushes 

00:44:21.567 --> 00:44:23.567
and routes to set up automatic 
navigation when your app starts.

00:44:26.710 --> 00:44:27.321
So, it's really just 
straightforward to implement.

00:44:27.322 --> 00:44:31.220
&gt;&gt; Do you have any advice for 
people looking to create new 

00:44:31.221 --> 00:44:34.092
plugins or packages for Flutter?
&gt;&gt;&gt; I would look at the language

00:44:34.093 --> 00:44:36.979
guide for effective Dart.  
Looking at that language guide 

00:44:36.980 --> 00:44:41.497
really help use not only learn a
lot about Dart and all its 

00:44:41.498 --> 00:44:43.498
features.

00:44:44.766 --> 00:44:46.816
It helps you write cleaner code.
And looking at the language 

00:44:46.817 --> 00:44:48.817
guide 

00:44:49.891 --> 00:44:50.497
helps your app get a lot more 
exposure for following the 

00:44:50.498 --> 00:44:55.231
guides.  When we run the test on
the plugin website, we run 

00:44:55.232 --> 00:44:56.857
through Dart format and how you 
implement it.

00:44:56.858 --> 00:45:01.552
&gt;&gt; That's true.  And I know that
the score that you see on the 

00:45:01.553 --> 00:45:03.553
package on pub when you're 

00:45:05.675 --> 00:45:07.711
looking at packages is partly 
based on if it's following style

00:45:07.712 --> 00:45:10.756
guides.
&gt;&gt; That's true.  It basically 

00:45:10.757 --> 00:45:13.093
running Dart format, a plugin 
tool you can use to 

00:45:13.094 --> 00:45:15.094
automatically format your code.

00:45:17.820 --> 00:45:20.071
And then make sure all your 
dependencies are used, they're 

00:45:20.072 --> 00:45:22.072
lined up and other checks as 
well.

00:45:23.548 --> 00:45:25.444
&gt;&gt; Makes your code more readable
as well.  Is there any package 

00:45:25.445 --> 00:45:27.445
or plugin that you would like to
see that doesn't exist yet?

00:45:29.561 --> 00:45:31.233
&gt;&gt; For me, I would definitely 
like to see a plugin for a 

00:45:31.234 --> 00:45:33.234
graphics engine.

00:45:34.526 --> 00:45:36.526
Right now for my own personal 

00:45:37.789 --> 00:45:39.789
projects, making it with the 
Flame 

00:45:41.246 --> 00:45:44.157
plugin, a really basic 2D 
graphics engine.  I would like 

00:45:44.158 --> 00:45:46.640
to see a fully fleshed out one. 
That would be great for a lot of

00:45:46.641 --> 00:45:49.114
developers.
&gt;&gt; Maurice, thank you so much 

00:45:49.115 --> 00:45:51.115
for chatting with us.  It's been
great.

00:45:54.898 --> 00:45:57.760
&gt;&gt; Hi, my name is Paul from 
Tanzania.  I'm the co-founder 

00:45:57.761 --> 00:45:59.761
and lead product manager.

00:46:02.180 --> 00:46:04.180
I fell in love with Flutter from
the 

00:46:07.500 --> 00:46:09.752
time I saw Emily coding on 
Google IO.  With Flutter, it's 

00:46:09.753 --> 00:46:12.638
really easy to bring my ideas to
life and coming up 

00:46:15.745 --> 00:46:18.599
with working prototypes to share
with my team and users and get 

00:46:18.600 --> 00:46:22.689
instant feedback.  And I have 
been working on a product that's

00:46:22.690 --> 00:46:24.690
basically a recorder app for up 

00:46:25.741 --> 00:46:27.741
and coming artists to share 
ideas with the community.

00:46:31.178 --> 00:46:33.210
So, using Flutter to build it, 
it was interesting do come up 

00:46:33.211 --> 00:46:36.076
with an idea and a working 
prototype to share with the team

00:46:36.077 --> 00:46:37.707
as well as our users and for 
them to give us instant feedback

00:46:37.708 --> 00:46:39.708
on this project.

00:46:41.792 --> 00:46:44.435
The parts I really like about 
Flutter are, one, the 

00:46:44.436 --> 00:46:48.753
development cycle.  Using hot 
reload and hot  restart, it was 

00:46:48.754 --> 00:46:50.187
easy to see an idea come to 
life.  The second thing I really

00:46:50.188 --> 00:46:54.094
like about Flutter is the 
packages.  Now, I'm a bit of a 

00:46:54.095 --> 00:46:58.173
lazy coder.  I prefer to kind 
something that already works and

00:46:58.174 --> 00:46:59.391
plug it into my project.  And 
finally,

00:46:59.392 --> 00:47:01.392
the community.

00:47:03.093 --> 00:47:05.121
I really, really enjoy the 
community engagement on Twitter 

00:47:05.122 --> 00:47:07.783
as well as on GitHub.  That is 
my Flutter development story.  

00:47:07.784 --> 00:47:09.784
Thank you.

00:47:10.852 --> 00:47:12.852
&gt;&gt; What kind of widget are you 
and why?

00:47:15.982 --> 00:47:18.631
&gt;&gt; I think I am a feature 
builder because I'm building the

00:47:18.632 --> 00:47:20.259
community and connecting the 
people.

00:47:20.260 --> 00:47:22.260
&gt;&gt; That's great.

00:47:24.246 --> 00:47:26.720
And also because you're 
responding to peoplearound the 

00:47:26.721 --> 00:47:28.721
world, it's an asynchronous 
request.  Great answer.

00:47:30.448 --> 00:47:32.448
&gt;&gt; What type of widget are you 
and why?

00:47:32.689 --> 00:47:34.729
&gt;&gt; That's a really good 
question.  I think I would like 

00:47:34.730 --> 00:47:37.777
to be the scaffold widget.  I 
think it's included in the 

00:47:37.778 --> 00:47:43.063
default template.  What I would 
like to do is use the better 

00:47:43.064 --> 00:47:45.064
scaffolding experience to make 

00:47:46.735 --> 00:47:47.759
sure how to help people that 
understand different concepts 

00:47:47.760 --> 00:47:49.760
and widgets they need 

00:47:51.017 --> 00:47:51.864
to use to create a better and 
better experience for their  

00:47:51.865 --> 00:47:53.918
users.
&gt;&gt; What kind of widget are you 

00:47:53.919 --> 00:47:55.355
and why?
&gt;&gt; It would definitely be the 

00:47:55.356 --> 00:47:59.649
stack.  The stack is the widget 
where you're trying to stack 

00:47:59.650 --> 00:48:01.650
some widgets over another one.

00:48:02.906 --> 00:48:04.358
And for me that really resonates
because I'm always trying to 

00:48:04.359 --> 00:48:06.359
find time 

00:48:08.641 --> 00:48:09.475
for everything in my life and 
that stack is pretty similar to 

00:48:09.476 --> 00:48:11.476
that.

00:48:13.343 --> 00:48:15.343
&gt;&gt; I think I would have to be 
styling.

00:48:17.886 --> 00:48:20.553
Because I like to make my 
clothes and I dress kind of 

00:48:20.554 --> 00:48:22.554
oddly and I wear funky jewelry.

00:48:24.878 --> 00:48:27.539
So, that's -- that feels right.
&gt;&gt; I'm theme.  Everything that I

00:48:27.540 --> 00:48:30.013
touch gets more beautiful.  But 
I don't like the idea that I 

00:48:30.014 --> 00:48:33.312
would have to have a child.  I'm
the baby.

00:48:43.321 --> 00:48:49.498
&gt;&gt; Almost every Flutter layout 
uses rows and columns.  And 

00:48:49.499 --> 00:48:51.499
they're pretty cool.

00:48:52.580 --> 00:48:53.627
They can hug their children 
tightly or spread them out and 

00:48:53.628 --> 00:48:57.290
relax.  But what if you would 
like one of those children to 

00:48:57.291 --> 00:48:59.291
stretch and fill the extra 
space?

00:49:01.594 --> 00:49:03.594
Just wrap it in an expanded 
widget and watch it grow.

00:49:06.552 --> 00:49:09.421
When a row or column lays out 
its children, it does the 

00:49:09.422 --> 00:49:12.067
inflexible ones first, then 
divides the remaining space 

00:49:14.575 --> 00:49:17.471
among the unflexible once like 
expanded.  You can set a factor 

00:49:17.472 --> 00:49:19.472
just in case of competition.

00:49:21.163 --> 00:49:23.163
For more info on expanded and 
all the 

00:49:27.895 --> 00:49:29.895
other Flutter widgets, head to 
flutter.io.

00:49:31.980 --> 00:49:36.021
&gt;&gt; Here are the top five things 
people love about Flutter.

00:49:36.831 --> 00:49:38.463
&gt;&gt; First off, stateful hot 
reload.  This allows you to make

00:49:38.464 --> 00:49:41.097
changes in your app and see them
appear in action in less than a 

00:49:41.098 --> 00:49:44.603
second.  Developers building 
with Flutter complain that they 

00:49:44.604 --> 00:49:47.702
don't have time to go get coffee
or make tea because their builds

00:49:47.703 --> 00:49:53.025
are too fast.  In the unlikely 
event that hot reload is 

00:49:53.026 --> 00:49:54.667
unsufficient, a hot restart of 
your app also only takes a few 

00:49:54.668 --> 00:49:56.668
seconds and you're back in 
action.

00:49:58.552 --> 00:50:00.552
&gt;&gt; Writing a separate iOS and 
Android 

00:50:02.445 --> 00:50:04.275
app has the possibility of twice
as many bugs and twice as much 

00:50:04.276 --> 00:50:06.276
code to test and maintain.

00:50:08.361 --> 00:50:10.637
It can be hard that open are 
each app has feature parity as 

00:50:10.638 --> 00:50:12.638
it degrees.

00:50:13.714 --> 00:50:15.143
With Flutter, it's a single 
codebase, speed up development 

00:50:15.144 --> 00:50:17.144
and making test coverage easier.

00:50:20.889 --> 00:50:22.889
&gt;&gt; Flutter aims to provide 60 
frames per 

00:50:24.243 --> 00:50:27.094
second with smooth, jank-free 
animations.  It's compiled ahead

00:50:27.095 --> 00:50:31.192
of time, the Flutter engine is 
executing machine instructions 

00:50:31.193 --> 00:50:34.928
for lightning fast performance.
&gt;&gt; An app with Flutter has a 

00:50:34.929 --> 00:50:36.929
great 

00:50:37.992 --> 00:50:40.430
collection of built-in 
components for the platform.  

00:50:40.431 --> 00:50:42.664
There's no need to learn two 
different development systems to

00:50:42.665 --> 00:50:44.665
make your app feel natural to 
your users.

00:50:46.813 --> 00:50:48.240
&gt;&gt; If it looks good on this 
device, will it look good on 

00:50:48.241 --> 00:50:50.777
this other phone?  If it's 
written in Flutter, the answer 

00:50:51.188 --> 00:50:53.188
is yes.

00:50:54.301 --> 00:50:56.301
Flutter uses the engine to draw 
the entire UI to screen.

00:51:00.269 --> 00:51:02.911
All components are performant 
and provides consistent from 

00:51:02.912 --> 00:51:05.003
device to device.
&gt;&gt; Let us know what your 

00:51:05.004 --> 00:51:08.506
favorite feature is.

00:51:12.982 --> 00:51:14.853
&gt;&gt; Hi, any name's Rona, I'm in 
Denver,  Colorado.  I'm fairly 

00:51:14.854 --> 00:51:16.854
new to Flutter.

00:51:17.937 --> 00:51:19.937
I have only been working with 
for two months.

00:51:21.869 --> 00:51:22.878
Prior to that, I was doing web 
app development for the past 18 

00:51:22.879 --> 00:51:24.879
years.

00:51:25.956 --> 00:51:26.981
Mostly on the UI, UX and 
frontend development side of 

00:51:26.982 --> 00:51:28.982
things.

00:51:30.025 --> 00:51:31.685
The last several years, I was in
a leadership role and not so 

00:51:31.686 --> 00:51:35.556
much coding.  And I decided that
missed it.  And I was ready to 

00:51:35.557 --> 00:51:39.435
dive back in.  One of the things
I didn't have any experience 

00:51:39.436 --> 00:51:42.769
with was mobile app development.
We didn't do mobile app 

00:51:42.770 --> 00:51:46.435
development at the agency where 
I was working.  So, I decided 

00:51:46.436 --> 00:51:48.436
now is as good a time as 

00:51:50.084 --> 00:51:52.084
any and I quit my job and now 
I'm ready to build my own thing.

00:51:53.609 --> 00:51:56.672
I'm building my own mobile app 
and I'm doing it with Flutter.  

00:51:56.673 --> 00:51:58.673
I spent some time, I looked at 
the alternatives.

00:52:00.162 --> 00:52:02.804
I looked at Swift, I looked at 
React Native.  But really 

00:52:02.805 --> 00:52:06.473
nothing offered what Flutter 
could offer.  The hot reloading,

00:52:06.474 --> 00:52:10.550
the ready-made widgets.  I was 
up and running very  quickly.  

00:52:10.551 --> 00:52:12.218
And best of all, what
I loved the most about Flutter 

00:52:12.219 --> 00:52:14.219
is the community.

00:52:15.741 --> 00:52:17.601
Hands down, it is the best 
development community I have 

00:52:17.602 --> 00:52:19.602
ever been a part of.

00:52:22.498 --> 00:52:25.562
I was welcomed so quickly and 
warmly, there's so much help.  

00:52:25.563 --> 00:52:27.233
There's a lot of active, 
wonderful people in all the 

00:52:27.234 --> 00:52:30.360
different networks and it's been
wonderful.  No question is a 

00:52:30.361 --> 00:52:33.250
dumb  question.  Got access to 
really smart people.  It's just 

00:52:33.251 --> 00:52:36.902
been a joy.  I can't wait to see
where Flutter goes.  That's my 

00:52:36.903 --> 00:52:39.577
Flutter story.
&gt;&gt; What is something you wish 

00:52:39.578 --> 00:52:42.238
your younger self knew?
&gt;&gt; I wish I knew I would be 

00:52:42.239 --> 00:52:44.292
standing in front of the camera 
someday.

00:52:44.491 --> 00:52:46.491
&gt;&gt; All right.

00:52:49.057 --> 00:52:51.506
&gt;&gt; Well, I used to work for 
Steve Jobs at Next  Computers 

00:52:51.507 --> 00:52:54.565
which was the company he started
up after he was kind of tossed 

00:52:54.566 --> 00:52:57.035
out of Apple.  And what I wish I
knew is that when I 

00:53:00.745 --> 00:53:02.745
quit right as they went back to 
rejoin 

00:53:04.443 --> 00:53:06.887
Apple, they offered to either 
pay me  $10,000 in cash or 

00:53:06.888 --> 00:53:11.573
convert it to Apple stock.  And 
I did the cash.  It was before 

00:53:11.574 --> 00:53:15.027
the iPhone.  I wish I knew that.
&gt;&gt; Regrets.

00:53:16.865 --> 00:53:18.865
&gt;&gt; What's something you wish 
your younger self knew?

00:53:20.776 --> 00:53:22.776
&gt;&gt; How I really looked with that
goatee.

00:53:24.469 --> 00:53:26.469
I shouldn't have done it.

00:53:33.277 --> 00:53:40.677
&gt;&gt; Flutter has a lot of widgets 
to help with explicit an Mesas. 

00:53:40.678 --> 00:53:43.544
Ones that you, the developer, 
code up.  Before there are also 

00:53:43.545 --> 00:53:47.248
implicit animations, those that 
change for you.  A good one to 

00:53:47.249 --> 00:53:49.326
know is animated container.  You
can build it once with a 

00:53:50.106 --> 00:53:52.374
particular attribute like color.
And when you rebuild it with a 

00:53:55.062 --> 00:53:57.503
different value, say in response
to a set state call, animated 

00:53:57.504 --> 00:54:00.151
container performs a linear 
interpolation between the two 

00:54:00.152 --> 00:54:02.152
values.

00:54:03.434 --> 00:54:05.434
And it's more than just two 
colors you 

00:54:06.687 --> 00:54:09.561
can animate borders, border 
radii, background images, width,

00:54:09.562 --> 00:54:13.019
height, alignment and more.  The
length is  controlled by the 

00:54:14.707 --> 00:54:17.151
duration parameter and you can 
specify your own curve to 

00:54:17.152 --> 00:54:19.152
customize the effect.

00:54:20.639 --> 00:54:22.498
There are a bunch of other 
widgets to help with the 

00:54:22.499 --> 00:54:26.004
implicit animation too.  Head to
flutter.io.

00:54:26.817 --> 00:54:28.817
&gt;&gt; Hello.  I'm Kelsey from 
Austin, Texas.

00:54:31.951 --> 00:54:34.591
I'm a web developer and I work 
in Rails.  But previously on 

00:54:34.592 --> 00:54:40.493
Cordova.  I really like Flutter 
because of the hot reloading.  I

00:54:40.494 --> 00:54:42.494
like that it integrates into VS 
code 

00:54:43.572 --> 00:54:46.261
easily and I can run my app from
there.  I like the Firebase 

00:54:46.262 --> 00:54:48.262
integration 

00:54:50.391 --> 00:54:52.241
because I usually use Firebase 
for my projects and it's 

00:54:52.242 --> 00:54:54.969
super-easy to get started with 
Flutter.  I also really like the

00:54:54.970 --> 00:54:56.970
Flutter community on Twitter.

00:54:59.078 --> 00:55:00.509
And I went to a Flutter camp in 
New York City and had the best 

00:55:00.510 --> 00:55:04.210
time.  Everyone was 
super-welcoming.  And it was a 

00:55:04.211 --> 00:55:06.461
lot of fun.  I haven't started 
my own project yet, 

00:55:09.970 --> 00:55:10.580
but I've contributed to a few 
open source projects and am 

00:55:10.581 --> 00:55:12.819
excited about getting started to
build something of my own soon.

00:55:16.747 --> 00:55:18.747
&gt;&gt; Hello, I'm here with Shams, 
the 

00:55:19.794 --> 00:55:21.836
technical writer for Flutter and
the chief plushy officer.  Tell 

00:55:21.837 --> 00:55:24.687
me, what are the 
responsibilities of the chief 

00:55:24.688 --> 00:55:26.949
plushy officer and how did you 
get that title?

00:55:27.775 --> 00:55:29.660
&gt;&gt; It was given to me by another
colleague.  I had some designs 

00:55:29.661 --> 00:55:32.527
for the mascot.  And I found a 
company to make them.

00:55:37.058 --> 00:55:39.058
And then we were making them for
Dart Conf 2018 in January.

00:55:41.534 --> 00:55:44.199
I named her Dash because that 
was the first code the project 

00:55:44.200 --> 00:55:46.200
name for Dart.
&gt;&gt; That's great.

00:55:47.740 --> 00:55:48.550
And I think you have some Dashes
to show us.

00:55:48.551 --> 00:55:52.244
&gt;&gt; I do.  Here is the first 
Dash.  And you can see she's got

00:55:52.245 --> 00:55:54.245
some sort of 

00:55:55.424 --> 00:55:57.424
turquoise, light turquoise here 
and here.

00:55:58.488 --> 00:56:00.488
After she was made, there were 
tweaks 

00:56:01.595 --> 00:56:03.858
to the Flutter logo where it was
brought more in line with 

00:56:03.859 --> 00:56:06.556
Material design.  And so, the 
turquoise went away.

00:56:11.026 --> 00:56:13.970
And so, our second one has -- 
has blue.  Like a darker blue 

00:56:13.971 --> 00:56:16.989
substituted for the light color.
But is otherwise essentially the

00:56:16.990 --> 00:56:18.990
same.

00:56:23.956 --> 00:56:27.022
And then I was requested to make
-- to make some puppets.  So, I 

00:56:27.023 --> 00:56:33.171
did.  I made a puppet.  
Everything's a widget!  You 

00:56:33.172 --> 00:56:35.172
know?
&gt;&gt; Why is Dash a bird?

00:56:38.781 --> 00:56:40.206
&gt;&gt; Oh, an early O'Reilly book 
about Dart on the cover had a 

00:56:40.207 --> 00:56:45.925
hummingbird.  And it was a very 
angular, spikey hummingbird.  

00:56:45.926 --> 00:56:47.926
But when the design company that

00:56:50.881 --> 00:56:52.881
designed the Dart Conf website 
for us, 

00:56:55.421 --> 00:56:58.878
they made this fat, round bi so,
also, I've had Dash socks made. 

00:56:58.879 --> 00:57:00.879
And --
&gt;&gt; Those are adorable.

00:57:02.338 --> 00:57:04.338
&gt;&gt; And I've had Dash fabrics 
made.

00:57:05.612 --> 00:57:07.612
So, here I have a chiffon I plan
to make into a scarf.

00:57:09.743 --> 00:57:11.573
And here I have a knitted -- 
some knitted fabric that I was 

00:57:11.574 --> 00:57:13.574
going to make 

00:57:15.029 --> 00:57:17.284
into a top to wear at Flutter  
Live, but people have suggested 

00:57:17.285 --> 00:57:21.392
that it should be  a -- like a 
onesie.  An adult onesie.  I 

00:57:21.393 --> 00:57:23.393
don't know.  I'll think about 
that.

00:57:24.445 --> 00:57:25.910
&gt;&gt; Thank you so much, Shams.  
It's been great talking with 

00:57:25.911 --> 00:57:27.911
you.
&gt;&gt; Thanks.

00:57:29.993 --> 00:57:31.993
It's been fun talking with you 
too.

00:58:45.209 --> 00:58:49.121
&gt;&gt; Hey, my name is Mark 
Thompson.  I'm from Chicago, 

00:58:49.122 --> 00:58:52.218
Illinois.  And I'm a software 
engineer and an entrepreneur.

00:58:55.484 --> 00:58:56.945
Flutter has changed the way I 
develop really because of the 

00:58:56.946 --> 00:59:00.229
fact that I've never really 
developed with a bird by my side

00:59:00.230 --> 00:59:03.685
all the  time.  A Flutter 
project that I'm really excited 

00:59:03.686 --> 00:59:06.576
about, really proud of is the 
app that I have been making 

00:59:06.577 --> 00:59:10.879
called Totally Strong.  It's a 
fitness app.  And I told Flutter

00:59:10.880 --> 00:59:15.929
because I really wanted to see 
if I could do some really great 

00:59:15.930 --> 00:59:17.761
things with a new and up and 
coming technology that promised 

00:59:17.762 --> 00:59:22.104
this idea of great speed and 
great development.  So, I made  

00:59:22.105 --> 00:59:24.105
Totally Strong.  My favorite 
thing about development 

00:59:29.483 --> 00:59:32.139
with Flutter has to be the 
development and the hot reload. 

00:59:32.140 --> 00:59:33.587
What I like about the Flutter 
community is the support from 

00:59:33.588 --> 00:59:36.702
the development team and the 
community of developers.  I have

00:59:36.703 --> 00:59:38.527
noticed that even when I was 
first learning how to do 

00:59:38.528 --> 00:59:41.578
Flutter, there were so many 
people, even from the Google 

00:59:41.579 --> 00:59:41.987
team, who were willing to try to
help me

00:59:41.988 --> 00:59:46.108
out.  People were responding on 
Twitter, responding in the 

00:59:46.109 --> 00:59:49.790
Gitter.  People were just all 
around.  And that was  

00:59:49.791 --> 00:59:53.009
super-fantastic.  And the 
community is no different.  The 

00:59:53.010 --> 00:59:54.030
other people in the community 
really want to see you do well 

00:59:54.031 --> 00:59:56.690
and really want to help where 
they can.  So, that is 

00:59:56.691 --> 01:00:01.806
phenomenal.  I think that this 
is just going to make Flutter go

01:00:01.807 --> 01:00:03.807
all the way to the top.  I'm 
really excited about it.

01:00:07.781 --> 01:00:09.019
&gt;&gt; I'm here with Will Larche who
works on Material design and 

01:00:09.020 --> 01:00:13.016
Flutter.  Tells what that means.
&gt;&gt; Sure, I'm the Flutter 

01:00:13.017 --> 01:00:15.485
engineering lead in Material.  
Material has a huge engineering 

01:00:15.486 --> 01:00:17.486
team 

01:00:18.784 --> 01:00:19.605
that works on Material 
components on different 

01:00:19.606 --> 01:00:22.275
platforms and also supports the 
different platform team like 

01:00:22.276 --> 01:00:24.962
Flutter as they're building out 
anything that has to do design.

01:00:28.650 --> 01:00:30.704
So, I work with Material 
designers and I work with 

01:00:30.705 --> 01:00:33.185
Flutter engineers to make sure 
that there is really good, 

01:00:33.186 --> 01:00:37.285
really easily executable, 
beautiful design in Flutter.

01:00:38.495 --> 01:00:40.965
&gt;&gt; That's amazing.  I remember 
at IO earlier this year, 

01:00:44.032 --> 01:00:45.681
Flutter was one of the four 
first-class implementations of 

01:00:45.682 --> 01:00:47.682
Material alongside 

01:00:49.170 --> 01:00:51.170
Android, web and iOS.  I was 
wonder for you could comment a 

01:00:51.613 --> 01:00:54.472
little bit about that.
&gt;&gt; Yeah.  That still blows me 

01:00:54.473 --> 01:00:56.731
away.  It's still exciting to be
in that group.

01:00:59.789 --> 01:01:00.805
Those are some giants of digital
industry and Flutter is that 

01:01:00.806 --> 01:01:05.898
important now.  So, we support 
it with our documentation by 

01:01:05.899 --> 01:01:08.353
having an engineering team and 
we believe that this time we 

01:01:10.009 --> 01:01:12.075
will be growing with the 
platform instead of having to 

01:01:12.076 --> 01:01:15.941
catch up.  And that's a really 
great place to be.  Also, we're 

01:01:15.942 --> 01:01:17.942
really grateful to the Flutter 
team for the material 

01:01:19.620 --> 01:01:22.285
implementation that they have 
built.  It is spot on and it's 

01:01:22.286 --> 01:01:24.286
amazing and 

01:01:25.347 --> 01:01:28.000
being the default UI library for
a platform is really flattering.

01:01:30.048 --> 01:01:31.269
Like we're really, really 
grateful that people understand 

01:01:31.270 --> 01:01:35.627
how material design makes 
beautiful things easily.  And 

01:01:35.628 --> 01:01:38.287
now that we see how Flutter 
makes any kind of app easily, 

01:01:38.288 --> 01:01:40.288
those two things go together 
perfectly.

01:01:41.745 --> 01:01:42.763
&gt;&gt; What really motivates you 
every day to work on Flutter?

01:01:42.764 --> 01:01:46.220
&gt;&gt; I was assigned to Flutter 
kind of just to do a little bit 

01:01:46.221 --> 01:01:48.494
of an exploration in Material.  
I was working on the iOS team at

01:01:48.495 --> 01:01:54.053
the time.  And almost instantly 
I knew that I did not want to do

01:01:54.054 --> 01:01:57.995
anything but Flutter ever again 
for the rest of my career.  

01:01:57.996 --> 01:02:01.060
Every day is a delight building 
with Flutter.  And it's very 

01:02:01.061 --> 01:02:03.096
exciting to be on the ground 
level of the next big thing.

01:02:03.499 --> 01:02:05.499
&gt;&gt; Awesome.

01:02:06.561 --> 01:02:07.777
Well, I didn't want to leave 
this interview without asking, 

01:02:07.778 --> 01:02:10.256
did I miss the memo?  Should I 
be wearing a suit?

01:02:11.272 --> 01:02:12.937
&gt;&gt; You should be wearing a suit.
You should be wearing a suit 

01:02:12.938 --> 01:02:14.384
every day.
&gt;&gt; Awesome.  Thanks so much, 

01:02:14.385 --> 01:02:18.872
Will.
&gt;&gt; Thanks, Martin.

01:02:22.177 --> 01:02:24.177
&gt;&gt; #fluttererlive keynote is 
happening soon.

01:02:26.111 --> 01:02:28.111
&gt;&gt; #askflutter, how does fade 
and image work?

01:02:28.814 --> 01:02:30.814
&gt;&gt; Martin, we're supposed to be 
answering those questions.

01:02:31.476 --> 01:02:33.318
&gt;&gt; How does fade and image work?
&gt;&gt; Actually, I made a YouTube 

01:02:33.319 --> 01:02:38.250
video about that.  It's in our 
widget of the week series.  This

01:02:38.251 --> 01:02:40.251
is a friendly reminder to share 

01:02:43.181 --> 01:02:45.005
your questions and thoughts with
the #askflutter and Flutterlive.

01:02:49.062 --> 01:02:50.487
&gt;&gt; Andrew who you may have seen 
on the Google developer YouTube 

01:02:50.488 --> 01:02:52.488
channel will be live to answer 
questions from our online 

01:02:52.945 --> 01:02:54.945
viewers.

01:02:57.480 --> 01:02:59.480
Your Tweets with those hashtags 
can appear on the show.

01:03:00.162 --> 01:03:01.580
&gt;&gt; We're happy to hear from you.
On to the show and see you on 

01:03:01.581 --> 01:03:03.581
the other side.

01:15:03.800 --> 01:15:05.800
&gt;&gt; You never know in advance 
when you 

01:15:09.670 --> 01:15:11.461
have the next idea for a song.  
And when you have an idea, you 

01:15:11.462 --> 01:15:15.748
don't know if it's going to make
it into the song.  It's 

01:15:15.749 --> 01:15:17.375
important, we can use it to 
record and organize our ideas at

01:15:17.376 --> 01:15:19.869
any time from anywhere.

01:15:25.031 --> 01:15:27.031
&gt;&gt; We've been innovating music 
recording 

01:15:28.306 --> 01:15:30.306
process ever since the studio 
has been built.

01:15:32.013 --> 01:15:34.013
Maybe not just for the Beatles, 
we 

01:15:35.701 --> 01:15:37.701
shouldn't forget, and the other 
partist 

01:15:39.380 --> 01:15:42.040
from Pink Floyd to the latest 
and the greatest.  And we have 

01:15:42.041 --> 01:15:44.092
been looking at the music 
writing process and we can see 

01:15:44.093 --> 01:15:48.418
how it changed.  And we noticed 
that people are coming up with 

01:15:48.419 --> 01:15:50.419
their ideas, their song ideas, 
at the worst possible moments.

01:15:53.507 --> 01:15:55.507
So, we wanted to develop 
something to 

01:15:58.000 --> 01:16:00.000
make that initial spark easily 
captured 

01:16:02.519 --> 01:16:04.519
to make sure that they get those
ideas.

01:16:04.788 --> 01:16:06.788
&gt;&gt; Having all that in mind, we 
created a 

01:16:08.518 --> 01:16:13.616
user-friendly, very 
minimalistic-looking iOS app.  

01:16:13.617 --> 01:16:15.617
Artists can use it to record in 
the app.

01:16:17.876 --> 01:16:20.727
&gt;&gt; People were asking for two 
things, one is a version and 

01:16:20.728 --> 01:16:22.963
then asking for Android.  And 
there were so many of our 

01:16:22.964 --> 01:16:27.045
requests.  All of our Facebook, 
all of our Instagram, all of our

01:16:27.046 --> 01:16:29.076
Tweets that we just had to 
develop it very, very quickly.

01:16:29.275 --> 01:16:31.933
&gt;&gt; And we opened up a set, okay,
we can do it.

01:16:35.031 --> 01:16:37.031
But it wasn't as easy as we 
expected.

01:16:39.375 --> 01:16:41.629
While the app itself was simple,
it has a very complicated search

01:16:41.630 --> 01:16:43.630
inside so 

01:16:44.697 --> 01:16:46.697
we have to look into innovative 

01:16:47.961 --> 01:16:50.417
solutions to get to topline on 
Android quickly.  After some 

01:16:50.418 --> 01:16:53.501
research, we found Flutter.
&gt;&gt; Flutter is a free and open 

01:16:53.502 --> 01:16:57.002
source SDK  created by Google.  
It has a single codebase, allow 

01:16:57.003 --> 01:16:59.653
you to crack native apps on iOS 
and Android at the same time.

01:17:02.908 --> 01:17:05.364
One of the key features is 
stateful hot reload.  This 

01:17:05.365 --> 01:17:08.008
allows developers to make 
changes while the app is running

01:17:08.009 --> 01:17:10.009
in real-time.

01:17:11.947 --> 01:17:13.947
Speeding up the troubleshooting 
immensely.

01:17:16.481 --> 01:17:17.500
And there are  customizable 
widgets to create beautiful 

01:17:17.501 --> 01:17:19.501
interfaces.

01:17:21.800 --> 01:17:23.800
&gt;&gt; We used a widget to create a 
swipe menu.

01:17:24.863 --> 01:17:27.104
Overall, the implementation was 
very, very simple.  We were able

01:17:27.105 --> 01:17:29.998
to develop the Android version 
in just ten weeks with a small 

01:17:31.820 --> 01:17:33.820
team consisting of two  people, 
one 

01:17:35.292 --> 01:17:37.292
Android and two frontend 
developers.

01:17:39.397 --> 01:17:41.397
&gt;&gt; As we wanted to Democratize 
music 

01:17:43.682 --> 01:17:46.179
making, it was good to have the 
app available.  We are excited 

01:17:46.180 --> 01:17:48.835
our app is available on both iOS
and Android.

01:17:52.325 --> 01:17:57.022
&gt;&gt; Topline has made making songs
so much  easier.  It has become 

01:17:57.023 --> 01:18:00.337
a vital part in our creative 
process.  And we're looking 

01:18:00.338 --> 01:18:02.338
forward to making 

01:18:03.631 --> 01:18:05.631
much more songs with it in the 
future.

01:18:58.477 --> 01:19:00.477
[ Applause ]

01:19:02.199 --> 01:19:04.239
And now, please welcome to the 
stage, Tim Sneath.

01:19:12.447 --> 01:19:14.447
TIM: Thank you so much.

01:19:15.743 --> 01:19:19.237
Welcome to Flutter Live!  Thank 
you all for coming.  This is a 

01:19:19.238 --> 01:19:21.517
global event.  We have hundreds 
of thousands of 

01:19:25.144 --> 01:19:27.144
people watching this all over 
the world.

01:19:28.952 --> 01:19:30.593
Whether by  livestream, or at 
the over 150 viewing parties 

01:19:30.594 --> 01:19:32.594
around the world.  Whether 
you're watching us over a 

01:19:34.451 --> 01:19:35.869
morning cup of coffee in 
Seattle, or whether you're 

01:19:35.870 --> 01:19:37.870
attending this meeting after 
work in Berlin.

01:19:42.861 --> 01:19:44.861
Or joining a Pajama party in 
Bangkok, welcome.

01:19:46.144 --> 01:19:48.017
I want to start by paying credit
to the many software engineers 

01:19:48.018 --> 01:19:50.263
who contributed to this project.
And without whom we wouldn't all

01:19:50.264 --> 01:19:57.093
be here today.  With Flutter, we
assembled the best engineering 

01:19:57.094 --> 01:19:59.094
talent from across the industry.

01:20:00.815 --> 01:20:02.815
All of whom shared a dream of 

01:20:03.879 --> 01:20:06.545
reinventing how user interfaces 
are built.  Our team includes 

01:20:06.546 --> 01:20:08.546
leaders with 

01:20:10.606 --> 01:20:13.873
pedigree from web, desktop and 
mobile UI toolkits.  It includes

01:20:13.874 --> 01:20:17.785
the former editor of the HTML 
standard.  Leading developers 

01:20:17.786 --> 01:20:21.475
who worked on WebKit and Blink. 
And architects who created the 

01:20:21.476 --> 01:20:25.954
first version of V8,
the JavaScript engine that 

01:20:25.955 --> 01:20:30.465
powers Chrome.  And beyond our 
own team, we also have hundreds 

01:20:30.466 --> 01:20:32.958
of contributors from the 
community.  We've identified 

01:20:32.959 --> 01:20:35.603
issues, contributed patches, and
even introduced new  features.

01:20:38.983 --> 01:20:43.084
And all of that has brought us 
to this moment today.  This 

01:20:43.085 --> 01:20:46.397
isn't just our products, but 
it's your products.  And we're 

01:20:46.398 --> 01:20:48.849
so proud to be part of the 
journey with you.

01:20:52.602 --> 01:20:54.239
So, let's talk about Flutter.  
Our vision for Flutter is 

01:20:54.240 --> 01:20:57.841
something that many of us have 
been dreaming of for years.

01:21:01.722 --> 01:21:03.969
A powerful, general purpose, 
open UI toolkit for  building 

01:21:03.970 --> 01:21:05.970
stunning 

01:21:07.629 --> 01:21:09.629
experiences on any device.

01:21:11.693 --> 01:21:13.541
Embedded, mobile, desktop, or 
beyond.  While we're still in 

01:21:13.542 --> 01:21:15.592
the early stages of this 
journey, we're already depending

01:21:18.690 --> 01:21:20.513
on Flutter ourselves at Google 
to power many different apps and

01:21:20.514 --> 01:21:25.660
services.  We know, from direct 
experience, that it's ready for 

01:21:25.661 --> 01:21:27.661
beautiful production apps.

01:21:29.163 --> 01:21:31.430
And now, we're delighted to 
share it with you also.

01:21:34.949 --> 01:21:38.206
Our immediate focus is the 
mobile phone.  Developers today 

01:21:38.207 --> 01:21:39.630
are forced
to compromise between either 

01:21:39.631 --> 01:21:41.631
building 

01:21:44.488 --> 01:21:46.488
the same app multiple times on 
multiple 

01:21:47.524 --> 01:21:49.163
operating systems, or accepting 
a lowest common denominator 

01:21:49.164 --> 01:21:51.164
solution that trades native 
speed and accuracy for 

01:21:52.379 --> 01:21:56.885
portability.  With Flutter, the 
days of compromise are finally 

01:21:56.886 --> 01:21:58.886
over.

01:22:02.214 --> 01:22:04.474
There are four characteristics 
of Flutter that we think make it

01:22:04.475 --> 01:22:06.475
a unique 

01:22:08.352 --> 01:22:10.352
platform for you to build native
mobile application experiences.

01:22:13.293 --> 01:22:18.002
Firstly, Flutter enables you to 
build beautiful  apps.  As 

01:22:18.003 --> 01:22:20.028
you'll hear later, Flutter 
provides a rich palette of tools

01:22:20.029 --> 01:22:22.029
that give you 

01:22:23.367 --> 01:22:25.616
control over every pixel on the 
screen.  Designers will never 

01:22:25.617 --> 01:22:30.936
again have to compromise on 
their vision.  Flutter includes 

01:22:30.937 --> 01:22:33.608
a full set of widgets that 
deliver  pixel-perfect 

01:22:33.609 --> 01:22:35.609
experiences on both iOS and 
Android.

01:22:38.516 --> 01:22:40.516
And it enables the ultimate 

01:22:41.589 --> 01:22:44.459
realization of material design. 
So, whether you're building a  

01:22:46.090 --> 01:22:49.000
highly-tailored, branded 
experience, or a native iPhone 

01:22:49.001 --> 01:22:51.668
or Android app, you should find 
that Flutter provides everything

01:22:51.669 --> 01:22:53.669
you need to

01:22:56.179 --> 01:22:59.292
build a beautiful, award-winning
interface.  Secondly, Flutter is

01:22:59.293 --> 01:23:01.293
fast.

01:23:02.362 --> 01:23:04.362
It's powered by the blazing 
speed Skia 

01:23:05.422 --> 01:23:08.700
2D graphics engine which enables
hardware accelerated graphics.  

01:23:08.701 --> 01:23:10.701
From the start, we architected 
Flutter 

01:23:12.991 --> 01:23:14.899
to be able to support 
glitch-free, jank-free graphics 

01:23:14.900 --> 01:23:16.735
at the native speed of your 
display.  Flutter code is 

01:23:16.736 --> 01:23:19.613
compiled.  It's not interpreted.
It doesn't go through a virtual 

01:23:19.813 --> 01:23:22.094
machine.  When you're 
application is finished, 

01:23:25.583 --> 01:23:27.583
it's compiled to native machine 
code.

01:23:29.696 --> 01:23:32.148
Thirdly, Flutter is productive. 
Flutter introduces a 

01:23:32.149 --> 01:23:36.484
revolutionary new capability for
developers and designers to 

01:23:36.485 --> 01:23:38.485
iterate on their apps in 
real-time.

01:23:39.957 --> 01:23:42.247
And we call this stateful hot 
reload.  And it  enables you to 

01:23:42.248 --> 01:23:44.248
change the code 

01:23:46.228 --> 01:23:48.228
of your app and see the change

01:23:49.730 --> 01:23:52.345
changes in real-time without 
restarting the app.

01:23:55.480 --> 01:23:57.984
And we think stateful hot reload
transforms the way you use the 

01:23:57.985 --> 01:24:02.267
app.  And developers, some in 
the room today, say it makes 

01:24:02.268 --> 01:24:04.101
them up to three times more 
productive.  And lastly, Flutter

01:24:04.102 --> 01:24:06.560
is
open.  Flutter itself is open 

01:24:06.561 --> 01:24:12.550
source.  Open for contributions.
Open for extensibility.  Every 

01:24:12.551 --> 01:24:14.551
line of code is available for 

01:24:16.477 --> 01:24:18.298
you to read, fork, extend, 
amend.  You don't have to buy a 

01:24:18.299 --> 01:24:20.299
developer tool 

01:24:22.778 --> 01:24:24.778
to use Flutter or use its tools.

01:24:26.699 --> 01:24:29.778
Everything is licensed freely 
under a BSD-style license.  And 

01:24:29.779 --> 01:24:32.043
that openness extends to the 
community.  There are already 

01:24:32.044 --> 01:24:34.744
thousands of Flutter plugins out
there.  And, of course, anything

01:24:34.745 --> 01:24:38.055
with the underlying operating 
system is exposing is available 

01:24:38.056 --> 01:24:40.056
to Flutter.

01:24:43.810 --> 01:24:45.810
Whether it's written in Kotlin 
or 

01:24:47.512 --> 01:24:50.988
Java, or an Android, Objective-C
or Swift on iOS.  So, put all 

01:24:50.989 --> 01:24:53.654
this together.  Combine it with 
best in class tooling 

01:24:56.956 --> 01:24:58.956
for Visual Studio Code or 
Android Studio.

01:25:04.308 --> 01:25:06.308
Intellij or the framework of 
your 

01:25:07.367 --> 01:25:10.212
choice, and you have Flutter.  
For building beautiful 

01:25:10.213 --> 01:25:14.137
experiences for iOS or Android 
from a single codebase.  What 

01:25:14.138 --> 01:25:16.138
does this mean for you?

01:25:17.655 --> 01:25:19.900
Well, as a business, you no 
longer need to fund two teams.  

01:25:19.901 --> 01:25:22.154
You can put all your
resources towards  crafting one 

01:25:24.400 --> 01:25:26.423
beautiful, native experience 
that's available everywhere you 

01:25:26.424 --> 01:25:31.566
need to be.  But today we're not
just here to talk about Flutter,

01:25:31.567 --> 01:25:33.567
we want to show you some 
examples of Flutter in action.

01:25:36.479 --> 01:25:38.479
And to do that, here's Filip 
Hracek.

01:25:39.593 --> 01:25:43.923
Over to you,  Filip.
[ Applause ]

01:25:44.128 --> 01:25:46.128
FILIP: Thank you, thank you.

01:25:47.803 --> 01:25:50.698
So, Tim told you about the four 
tenants of Flutter.  Beautiful, 

01:25:50.699 --> 01:25:55.789
fast, productive and open.  And 
it was okay.  Right?  It was a 

01:25:55.790 --> 01:25:58.640
little bit theoretical.  But 
fortunately, I'm here now.

01:26:02.942 --> 01:26:04.792
And I'm going to show you how 
that translates to practical 

01:26:04.793 --> 01:26:06.793
stuff.

01:26:08.928 --> 01:26:10.928
So, we built an app for this 
event.

01:26:14.669 --> 01:26:16.533
It's called The History of  
Everything.  And I'm going to 

01:26:16.534 --> 01:26:20.041
give you a little tour of the 
app.  And I'm going to show you 

01:26:20.042 --> 01:26:22.042
how, you know, different things 
about Flutter 

01:26:26.196 --> 01:26:28.631
make things possible or at least
easier.  So, I'll start with the

01:26:28.632 --> 01:26:30.632
basics.

01:26:31.716 --> 01:26:35.632
The app starts immediately.  
Right?  This is because Flutter 

01:26:35.633 --> 01:26:37.633
compiles ahead 

01:26:39.299 --> 01:26:41.299
of time to code.

01:26:43.584 --> 01:26:45.829
There is nothing to map, no 
scripts to parse, it just starts

01:26:45.830 --> 01:26:47.830
executing.  Fast.  Right?

01:26:51.942 --> 01:26:52.574
Second, this is -- this is an 
Android guys and this is an 

01:26:52.575 --> 01:26:54.862
iPhone.  And as you can see, you
know, the 

01:26:58.950 --> 01:27:01.383
basic interaction is completely 
natural.  If you go to a 

01:27:01.384 --> 01:27:03.384
different screen, you 

01:27:05.060 --> 01:27:07.302
know, everything works as you 
would expect.  So, these are the

01:27:07.303 --> 01:27:09.303
basics. 

01:27:10.994 --> 01:27:12.640
And this is how Flutter makes 
you productive, by letting you 

01:27:12.641 --> 01:27:14.641
focus on the 

01:27:16.121 --> 01:27:21.021
custom stuff while doing the, 
you know, the basics itself.  

01:27:21.022 --> 01:27:23.272
I'm going to get rid of one of 
the phones just because it's 

01:27:23.273 --> 01:27:25.273
distracting to have  two.

01:27:27.155 --> 01:27:30.012
And I'm just going focus on this
one.  Right?  So, let's take 

01:27:30.013 --> 01:27:32.013
this a little further.

01:27:34.135 --> 01:27:36.805
It's nice to have scrolling but,
you know.  How can we, you know,

01:27:36.806 --> 01:27:38.806
tush this up to 11?

01:27:43.781 --> 01:27:45.649
So, in this view, we have this 
very interactive, very animated 

01:27:45.650 --> 01:27:47.650
timeline, right?

01:27:49.985 --> 01:27:51.985
Where you can go from all the 
way from 

01:27:53.472 --> 01:27:58.200
big bank to today.  And if you 
see that red dot, that's all of 

01:27:58.201 --> 01:28:00.261
human history.  Ah, we'll get 
back to that.

01:28:03.742 --> 01:28:05.974
But what I'm gonna show you now 
is actually so, the scroll 

01:28:05.975 --> 01:28:08.029
behavior is still completely 
natural to the platform.

01:28:12.497 --> 01:28:16.802
But we added this really -- I 
think it's fun, bouncy effect.  

01:28:16.803 --> 01:28:18.019
Just to make it more interesting
to, you know, to interact with 

01:28:18.020 --> 01:28:22.321
the app.  And this is actually a
testament to the openness of 

01:28:22.322 --> 01:28:24.322
Flutter because we were 

01:28:27.259 --> 01:28:29.259
able to use Flutter physics, 
scroll physics

01:28:29.521 --> 01:28:32.218
and add a custom layer on top.  
So, Flutter is not just open as 

01:28:32.219 --> 01:28:34.451
in open source, as in you can 
read the 

01:28:37.619 --> 01:28:39.871
code, of course, but also it 
gives you, as a developer, 

01:28:39.872 --> 01:28:44.364
access to all these classes and 
functionality that you can then 

01:28:44.365 --> 01:28:49.032
build on top of.  But let's take
this a little further, right?  

01:28:49.033 --> 01:28:51.033
So, it's nice to scroll, but 
let's zoom.

01:28:53.362 --> 01:28:55.362
So, I'm gonna zoom right past 

01:28:56.616 --> 01:28:58.616
dinosaurs because it turns out 
nobody likes dinosaurs.  Humans.

01:28:59.725 --> 01:29:01.725
This is the red dot that we saw 
earlier.

01:29:05.010 --> 01:29:07.051
And now, as you can see, at any 
moment at any scroll position at

01:29:07.052 --> 01:29:09.293
any zoom level, we show what 
makes the most sense.

01:29:12.352 --> 01:29:15.865
And that is possible, again, 
because Flutter is fast.  You 

01:29:15.866 --> 01:29:18.502
can actually -- or we can 
actually -- we compute what to 

01:29:18.503 --> 01:29:21.595
show on every frame.  And this 
is basically a requirement 

01:29:24.666 --> 01:29:26.666
for any very custom UI where you
want to 

01:29:30.596 --> 01:29:32.237
be able to rebuild things and be
interpretive 60 frames per 

01:29:32.238 --> 01:29:37.123
second.  Okay.  But let's take 
this a little bit further.  So, 

01:29:37.124 --> 01:29:39.765
you might be thinking, oh, these
are cool.  I like these little

01:29:39.766 --> 01:29:42.648
animations.  And you might also 
be thinking that 

01:29:46.768 --> 01:29:48.626
these are actually, you know, 
pre-computed.  A GIF or maybe a 

01:29:48.627 --> 01:29:50.627
video.

01:29:51.682 --> 01:29:54.356
But these are actually vector 
animations that we're building 

01:29:54.357 --> 01:29:57.801
on every frame with Flutter.   
So, for example, this one.

01:30:01.787 --> 01:30:03.787
I can sway the tree above of 
Newton.

01:30:06.117 --> 01:30:10.639
And I like how, like, the apple 
still falls on Newton's head.  

01:30:10.640 --> 01:30:12.640
Because, you know, life is hard.

01:30:14.903 --> 01:30:16.903
And this is possible because, 
again, Flutter is fast.

01:30:18.785 --> 01:30:21.226
But also because Flutter, at its
deepest level, uses Skia engine.

01:30:26.531 --> 01:30:28.531
Skia is  hardware-accelerated, 
it 

01:30:30.215 --> 01:30:33.554
paints directly to the graphics 
card and uses all the pixels.  

01:30:33.555 --> 01:30:35.555
Whatever beautiful design your 
designer designs.  Okay.

01:30:38.235 --> 01:30:40.235
Whatever artwork your art person
does.  You can do it.

01:30:43.325 --> 01:30:44.751
And you can do it again 60 
frames per second.  And that's 

01:30:44.752 --> 01:30:47.637
really cool.  Okay.  Now you 
might be thinking, this is all 

01:30:47.846 --> 01:30:50.076
cool.  But you're showing pixel 
3.

01:30:53.542 --> 01:30:56.638
That's a very modern phone.  How
about  older phones, right?  And

01:30:56.639 --> 01:30:59.513
I'm glad you asked.  Because by 
chance I have other

01:31:00.931 --> 01:31:02.931
phones with me today.

01:31:04.864 --> 01:31:07.745
So, this is -- this is an 
Android phone from 2014.  

01:31:07.746 --> 01:31:09.746
Samsung.

01:31:11.851 --> 01:31:15.107
And it's running I think Android
Kit Kat.  And as you can see, it

01:31:15.108 --> 01:31:17.108
works just fine.

01:31:19.216 --> 01:31:21.868
And here, if I can make it go 
away.  And here we have an 

01:31:21.869 --> 01:31:26.598
iPhone from 2013.  So, five 
years ago.  And again, it runs 

01:31:26.599 --> 01:31:28.599
just fine.  Right.

01:31:31.697 --> 01:31:33.697
So, it's not just the modern 
phones.  Okay.

01:31:39.065 --> 01:31:42.927
If we go to the computer screen.
What magic is this?  Right?  I'm

01:31:42.928 --> 01:31:44.928
not going to do any live coding.

01:31:46.038 --> 01:31:49.314
But I just wanted you to see 
that it's just Flutter code.  

01:31:49.315 --> 01:31:52.159
All the app itself is all 
Flutter.  There is no magic 

01:31:52.160 --> 01:31:56.240
behind it.  It's all the Flutter
that you all probably -- or at 

01:31:56.241 --> 01:31:58.241
least many of you know and love.

01:32:02.315 --> 01:32:04.315
So, you know, it just compiles 
to APK 

01:32:07.307 --> 01:32:09.307
for Android and IPA for iOS.

01:32:12.690 --> 01:32:16.336
And then it, you know, it gets 
published to the stores.  This 

01:32:16.337 --> 01:32:18.337
is actually published like maybe
two hours ago.

01:32:22.318 --> 01:32:24.163
This is the App Store and this 
is the Play Store.  If we get 

01:32:24.164 --> 01:32:26.164
back to the phone.  So, yes.

01:32:28.639 --> 01:32:30.084
So, we were able in maybe 
something like 6,000 lines of 

01:32:30.085 --> 01:32:32.085
code, we

01:32:33.996 --> 01:32:36.641
were able to build a very custom
app in three months with three 

01:32:36.642 --> 01:32:38.642
people who were busy doing other
stuff as well.

01:32:41.946 --> 01:32:43.946
So, that's the productive part, 
right?

01:32:45.007 --> 01:32:46.838
But there are things that you 
won't find in the released 

01:32:46.839 --> 01:32:48.839
version of the app.  Why?

01:32:52.146 --> 01:32:54.017
Because I believe that just 
because you can do something 

01:32:54.018 --> 01:32:56.018
with Flutter, doesn't mean you 
should.

01:33:01.224 --> 01:33:03.250
For example, can you add 150 
little animated hearts to the 

01:33:03.251 --> 01:33:05.251
timeline that 

01:33:06.504 --> 01:33:08.145
scroll with it and like, you 
know, get bigger and smaller and

01:33:08.146 --> 01:33:17.788
all that?  Sure!  Should you do 
that?  No.  Maybe yes.  But, no.

01:33:22.281 --> 01:33:24.281
Second, that we didn't add to 
the 

01:33:27.022 --> 01:33:29.022
production app, isth last in the
timeline.

01:33:30.925 --> 01:33:33.377
And that is obviously Flutter 
Live,  right?  Because the 

01:33:33.378 --> 01:33:36.871
history of everything ends with 
Flutter Live.  No, the thing 

01:33:36.872 --> 01:33:38.942
about it, like, everything that 
ever happened since the 

01:33:42.843 --> 01:33:45.131
history of time has led us to 
this moment.  It's true.

01:33:45.336 --> 01:33:47.336
[ Laughter ]
[ Applause ]

01:33:47.407 --> 01:33:49.407
Yeah.

01:33:50.874 --> 01:33:54.609
A little bit of philosophy.  
Anyway.  What I wanted to show 

01:33:54.610 --> 01:34:00.337
here is that, you know, Flutter 
is all widgets.  It's open.  And

01:34:00.338 --> 01:34:02.338
it's composable.

01:34:05.055 --> 01:34:07.055
So, if we want to have a video 
playing 

01:34:09.833 --> 01:34:10.035
in our very custom timeline and 
being occluded by all these 

01:34:10.036 --> 01:34:12.910
things, we can.  Because it's 
just another widget.  It's 

01:34:12.911 --> 01:34:15.155
Flutter.  So, sure.

01:34:19.025 --> 01:34:21.665
The last thing I want to show 
you is basically this but can we

01:34:21.666 --> 01:34:23.666
make it -- take it a little 
further?

01:34:26.364 --> 01:34:29.023
So, that's the blue dot just 
above here.  And that is 

01:34:29.024 --> 01:34:31.024
actually a very substantial 
event in the history of 

01:34:31.279 --> 01:34:33.279
everything.

01:34:34.542 --> 01:34:39.661
This is me trying to find this 
venue earlier today.  You know? 

01:34:39.662 --> 01:34:41.662
I got lost in London.  And I was
very  sad.

01:34:43.930 --> 01:34:46.394
But I had a device with me 
connected to the Internet.

01:34:49.656 --> 01:34:51.656
And, you know, there's this 
service by 

01:34:52.940 --> 01:34:55.586
Google that you used if you have
a phone with you and you're 

01:34:55.587 --> 01:34:57.587
lost.

01:35:00.072 --> 01:35:02.896
And as you can see, you know, in
this little animation, wait.  

01:35:02.897 --> 01:35:08.395
What is this?  Can you see that?
Let me zoom in.  Oh!

01:35:12.542 --> 01:35:13.966
Is this an actual Google Map 
running inside my Flutter

01:35:13.967 --> 01:35:17.254
application?
[ Applause ]

01:35:21.109 --> 01:35:24.589
While it's being swayed around. 
You know?  Sure!  Because this 

01:35:24.590 --> 01:35:26.590
is Flutter, right?  So, it's 
another widget.  Okay.

01:35:30.369 --> 01:35:33.257
So, to summarize, we've seen an 
application that I think is 

01:35:33.258 --> 01:35:35.258
beautiful.

01:35:36.315 --> 01:35:38.315
That was built in three months 
by three people.

01:35:40.398 --> 01:35:43.249
That is fast on a wide range of 
devices.  And that, because of 

01:35:43.250 --> 01:35:46.964
the openness of Flutter, can do 
cool things like this.  Thank 

01:35:46.965 --> 01:35:48.965
you for your attention.

01:35:52.020 --> 01:35:55.752
[ Applause ]
TIM: Thanks, Filip.  What do you

01:35:55.753 --> 01:35:58.999
think?
[ Applause ]

01:36:02.265 --> 01:36:04.899
So, to me, that's a great 
example of Flutter, right?  It's

01:36:04.900 --> 01:36:07.563
a beautiful experience that does
things that even a traditional 

01:36:07.564 --> 01:36:10.450
native platform solution might 
struggle to do.

01:36:13.510 --> 01:36:15.510
So, you've seen a little of what
Flutter can do.

01:36:20.490 --> 01:36:22.721
And today, it gives me great 
pleasure to announce the general

01:36:22.722 --> 01:36:27.286
availability of Flutter 1.0!
[ Applause ]

01:36:31.397 --> 01:36:33.397
Thank you.

01:36:36.024 --> 01:36:38.024
So, today's release mark

01:36:41.180 --> 01:36:42.815
marks a Key milestone for the 
product, it's not just for 

01:36:42.816 --> 01:36:44.816
developers, it's for everyone.

01:36:46.311 --> 01:36:47.735
We released Flutter back at 
mobile world Congress in 

01:36:47.736 --> 01:36:50.174
February of this year.  And 
looking back over the last nine 

01:36:53.480 --> 01:36:55.480
months, it's been really quite 
humbling 

01:36:56.547 --> 01:36:59.204
from our point of view to see 
how people have adopted and 

01:36:59.205 --> 01:37:01.851
responded to Flutter.  Since 
February, over a quarter of a 

01:37:04.100 --> 01:37:06.764
million developers have used 
Flutter.  Companies large and 

01:37:06.765 --> 01:37:08.765
small, including 

01:37:13.168 --> 01:37:15.168
the likes of Alibaba, Groupon, 
10 Cent, 

01:37:17.689 --> 01:37:19.111
Capital One, Filips hew, and, of
course, Flutter are developing 

01:37:19.112 --> 01:37:22.030
with Flutter.  And we have seen 
over 3,000 apps 

01:37:25.500 --> 01:37:27.162
published on the Play  Store 
alone, reaching hundreds of 

01:37:27.163 --> 01:37:29.216
millions of users.  To show you 
some of the momentum that 

01:37:32.114 --> 01:37:34.392
already exists for Flutter, we 
thought it would be fun to put 

01:37:34.393 --> 01:37:36.393
together a quick 

01:37:37.822 --> 01:37:40.726
video that thoughs the work that
many of you have done with 

01:37:40.727 --> 01:37:42.727
Flutter so far.

01:38:39.945 --> 01:38:41.945
[ Applause ]
All right.

01:38:45.115 --> 01:38:47.157
So, it's time to switch gears a 
little.  We're going to take the

01:38:47.158 --> 01:38:49.400
next little while to talk 
through four core areas of 

01:38:49.606 --> 01:38:51.606
Flutter.

01:38:53.284 --> 01:38:55.284
Starting with designing apps 
with Flutter.

01:38:57.355 --> 01:39:01.228
Then we're going to talk about 
developing Flutter apps.  And 

01:39:01.229 --> 01:39:02.851
then connecting Flutter to 
online services.  And lastly, 

01:39:02.852 --> 01:39:06.099
we're going to talk about the 
process of releasing apps.  So, 

01:39:06.100 --> 01:39:08.100
let's start with design.

01:39:09.601 --> 01:39:11.601
And to start this section off, 
I'm 

01:39:15.352 --> 01:39:17.352
joined by Will who is an 
engineer on the design team.

01:39:19.009 --> 01:39:22.554
Will, great to see you.
WILL: Thanks, Tim.  I'm so 

01:39:22.555 --> 01:39:23.974
excited to tell you today why I 
believe that Flutter is the 

01:39:23.975 --> 01:39:25.975
perfect 

01:39:28.667 --> 01:39:30.496
platform for executing 
pixel-perfect designs.  But 

01:39:30.497 --> 01:39:32.497
first, let's take a step back.

01:39:34.378 --> 01:39:35.388
Right now good design is 
expensive.  Especially on 

01:39:35.389 --> 01:39:38.910
mobile.  It  takes extra 
engineering resources to 

01:39:38.911 --> 01:39:40.911
execute.

01:39:42.012 --> 01:39:44.012
And what you get is rarely what 
you want.

01:39:46.580 --> 01:39:48.580
The designer hands us something 
detailed and beautiful.

01:39:50.222 --> 01:39:51.070
But we push back on what makes 
it special.  Branded menu 

01:39:51.071 --> 01:39:56.122
button.  It's easier to use a 
stock icon.  Custom map bar, we 

01:39:56.123 --> 01:40:01.031
could, but it's complex.  Custom
tabs, we ran out of time.  We 

01:40:01.032 --> 01:40:03.912
end up compromising on the 
details that make our experience

01:40:03.913 --> 01:40:06.966
excellent.  And end up shipping 
something that's just good 

01:40:06.967 --> 01:40:08.967
enough.

01:40:10.631 --> 01:40:14.740
It has the major features we 
need, but none of the finesse.  

01:40:14.741 --> 01:40:17.386
So, with the best of intentions 
we say we'll get to it later.  

01:40:17.387 --> 01:40:21.470
But let's be honest.  Later 
never comes.  The tickets sit in

01:40:21.471 --> 01:40:23.716
our backlog and we never delete 
them because that would be 

01:40:24.746 --> 01:40:27.181
admitting defeat.  But what gets
me so excited

01:40:29.230 --> 01:40:31.230
about Flutter is that we can 
break that cycle.

01:40:33.915 --> 01:40:35.915
We can ship the app we really 
want.

01:40:37.395 --> 01:40:39.671
With detail and polish and  
fewer of those painful 

01:40:39.672 --> 01:40:41.672
compromises.

01:40:42.718 --> 01:40:45.016
Flutter's architecture and 
designed for building beautiful,

01:40:45.017 --> 01:40:49.947
custom UI.  Flutter's main goal 
is to make building polished, 

01:40:49.948 --> 01:40:52.389
custom app interfaces a faster, 
more delightful experience for 

01:40:55.643 --> 01:40:58.306
designers and developers.  
Firstly, Flutter is powerful 

01:40:58.307 --> 01:41:02.588
enough to draw anything 
designers dream up.  It's built 

01:41:02.589 --> 01:41:05.443
on Skia.  The open source 
graphics engine used 

01:41:10.966 --> 01:41:13.440
by Adobe, Chrome and Amazon 
Kindle.  We can get 

01:41:13.441 --> 01:41:15.441
print-quality custom 

01:41:16.534 --> 01:41:18.992
typography without needing to 
dive down to low level 

01:41:18.993 --> 01:41:21.045
frameworks like core text.  
There's easy to access APIs for 

01:41:23.502 --> 01:41:25.502
character spacing and word 
spacing.

01:41:26.561 --> 01:41:28.561
Its animation and motion 
framework is 

01:41:29.853 --> 01:41:31.475
more finely  tuneable than 
anything I have ever seen on 

01:41:31.476 --> 01:41:36.016
mobile.  We've looked closely at
what developers need to execute 

01:41:36.017 --> 01:41:40.528
complex, high fidelity designs 
on the  devices of today and put

01:41:40.529 --> 01:41:42.529
it at their fingertips instead 
of burying

01:41:45.857 --> 01:41:48.743
it in obscure, hard-to-learn 
frameworks.  And we've used 

01:41:48.744 --> 01:41:50.744
these APIs to make a 

01:41:51.997 --> 01:41:53.997
component library expressing 
opinionated 

01:41:55.671 --> 01:41:57.671
and flexible design standards.  
Material components for Flutter.

01:41:59.363 --> 01:42:01.193
These are reusable widgets 
designed by the Material design 

01:42:01.194 --> 01:42:04.029
team here at Google.  If you 
haven't heard, we released a 

01:42:05.875 --> 01:42:07.887
major expansion of Material, 
making the system more flexible 

01:42:07.888 --> 01:42:09.888
and expressive.

01:42:10.997 --> 01:42:12.997
And the Flutter team has done a 
great 

01:42:14.673 --> 01:42:17.873
job implementing the Material 
components to our 

01:42:14.673 --> 01:42:18.759
specifications.  So, we can get 
a beautifully-themed experience 

01:42:18.760 --> 01:42:20.760
out of the box.

01:42:22.042 --> 01:42:24.518
On Flutter, Material is 
beautiful.  It's a platform 

01:42:24.519 --> 01:42:27.384
powerful enough to build 
anything our designers dream up.

01:42:29.228 --> 01:42:31.228
It's also extensible.

01:42:34.151 --> 01:42:34.968
We can extend the existing 
Material components to support 

01:42:34.969 --> 01:42:36.969
almost anything.

01:42:38.036 --> 01:42:40.036
And often much more easily than 
in traditional code.

01:42:43.199 --> 01:42:45.651
But maybe most impressively, 
Material is fast.  I actually 

01:42:45.652 --> 01:42:48.108
built these screens on the 
subway on my way to work in 

01:42:48.109 --> 01:42:50.583
about half an hour.  The layout 
system in Flutter is just that

01:42:50.584 --> 01:42:56.337
good.  I believe Material design
is the most expressive and 

01:42:56.338 --> 01:43:00.029
flexible cross-platform design 
system you could  need.  But 

01:43:00.030 --> 01:43:03.282
Flutter's powerful enough to 
implement any design system.  

01:43:03.283 --> 01:43:05.115
So, Material components isn't 
the only library that comes with

01:43:05.116 --> 01:43:10.450
Flutter.  You also get 
Cupertino.  A faithful 

01:43:10.451 --> 01:43:12.706
implementation of Apple's iOS 
design language.

01:43:17.410 --> 01:43:19.410
Cupertino gives us action 
sheets, 

01:43:20.877 --> 01:43:22.877
alerts, segment controls, 
sliders, NAV bars, switches.

01:43:25.176 --> 01:43:27.176
Over two dozen widgets that look
like they came right out of UIK.

01:43:28.619 --> 01:43:31.279
But 100% open source.  And 
coming from traditional iOS, 

01:43:32.299 --> 01:43:34.738
that's  mind-blowing.  If I have
a question about a text 

01:43:37.784 --> 01:43:39.784
field, I can go look at its 
source code.

01:43:42.516 --> 01:43:44.516
And you can't do that with 
private APIs.

01:43:47.607 --> 01:43:50.268
Cupertino even plays well with 
Material components on iOS.  So,

01:43:50.269 --> 01:43:52.541
I automatically get iOS-style 
controls when I run a Material 

01:43:52.542 --> 01:43:56.230
app on an iPhone.  But it 
doesn't matter if you're using 

01:43:59.731 --> 01:44:01.372
a design system or a completely 
custom UI.  Flutter is faster 

01:44:01.373 --> 01:44:03.811
than traditional mobile  coding.
In fact,

01:44:09.136 --> 01:44:11.136
we've seen teams make up to 3X 
gains in velocity using Flutter.

01:44:12.603 --> 01:44:14.603
That can  dramatically alter 
what your team can accomplish.

01:44:16.274 --> 01:44:18.547
And we've already seen some of 
you do amazing things with 

01:44:18.548 --> 01:44:20.548
Flutter.  This is Reflectly.

01:44:22.657 --> 01:44:23.893
An award-winning app on iOS and 
Android and it's built with 

01:44:23.894 --> 01:44:26.551
Flutter.  I would like to invite

01:44:30.161 --> 01:44:32.161
designer/developer Jacob

01:44:34.822 --> 01:44:36.847
Christianson, founder of 
Reflectly to join me on stage.  

01:44:36.848 --> 01:44:38.848
Jacob.
JACOB: Thank you so much, Will.

01:44:40.928 --> 01:44:42.928
So, hello, everyone, my name is 
Jacob.

01:44:44.445 --> 01:44:47.130
I'm a co-founder at Reflectly 
and head up UX design as well as

01:44:47.131 --> 01:44:49.586
frontend development.  Now, 
Reflectly is what we call a 

01:44:50.607 --> 01:44:53.064
conversation-based journal.  
Now, what that means is that 

01:44:53.065 --> 01:44:57.187
every day users open up the app 
and go through a series of 

01:44:57.188 --> 01:45:00.098
questions which helps them lock 
down their day.  However, 

01:45:00.099 --> 01:45:02.818
instead of a blank screen and 
they fill in some text like you 

01:45:02.819 --> 01:45:04.819
would in a traditional journal, 
we prompt them 

01:45:07.756 --> 01:45:09.983
with very specific UI 
interactions such as rating the 

01:45:09.984 --> 01:45:11.984
day with a smiley face 

01:45:13.792 --> 01:45:17.266
slider or an icon that 
represented how the day went.  

01:45:17.267 --> 01:45:19.267
This is bundled together into 
what we call a story.

01:45:21.177 --> 01:45:23.221
The users can then go back in 
their journal and reread the 

01:45:23.222 --> 01:45:27.918
stories to see what they were up
to and how they felt.  And we 

01:45:27.919 --> 01:45:29.919
can show them how they have 

01:45:31.233 --> 01:45:33.875
been progressing over time by 
giving them aggregated 

01:45:33.876 --> 01:45:39.482
statistics.  This makes 
Reflectly easy to use.  But we 

01:45:39.483 --> 01:45:42.563
have seen it bring immense value
to our users.  Our users are 

01:45:42.564 --> 01:45:44.831
becoming
happier over time by using 

01:45:44.832 --> 01:45:47.275
Reflectly.  Which, of course, is
amazing.   Now, Reflectly is 

01:45:47.276 --> 01:45:49.728
just around the corner from  
hitting that 1 million user mark

01:45:49.729 --> 01:45:51.729
globally.

01:45:53.453 --> 01:45:55.453
All of whom were able to use 
this 

01:45:56.948 --> 01:45:57.961
amazing app built  entirely in 
Flutter.

01:45:57.962 --> 01:46:02.112
WILL: That's really great, 
Jacob.  A couple questions.  Was

01:46:02.113 --> 01:46:04.113
this your first Flutter app?
JACOB: Yes, it was.

01:46:04.371 --> 01:46:06.822
WILL: And how many engineers 
were working on it?

01:46:08.063 --> 01:46:10.063
JACOB: Just me for the frontend.
WILL: How long did it take you?

01:46:10.116 --> 01:46:15.069
JACOB: The first line of Flutter
was written in March.  And with 

01:46:15.070 --> 01:46:17.932
the learning curve, two and a 
half months.

01:46:17.933 --> 01:46:22.037
WILL: That's crazy.  Wow.  Thank
you, Jacob.  Thank you.  Jacob 

01:46:22.038 --> 01:46:24.038
Christianson.
[ Applause ]

01:46:26.742 --> 01:46:29.386
I really believe we might be 
entering a new  age.  One in 

01:46:29.387 --> 01:46:31.629
which we don't tell designers 
that we're going to be getting 

01:46:31.630 --> 01:46:35.087
to something later or  soon.  
But now.

01:46:39.007 --> 01:46:42.704
Flutter makes executing 
beautiful designs easy.  And 

01:46:42.705 --> 01:46:44.705
with that, I would like to turn 
things back over to Tim.  Tim?

01:46:49.882 --> 01:46:53.603
[ Applause ]
TIM: So, you've heard how the 

01:46:55.044 --> 01:46:56.271
architecture of Flutter makes it
possible for designers and 

01:46:56.272 --> 01:47:01.835
developers to work together to 
create beautiful UI.  And again,

01:47:01.836 --> 01:47:03.836
this is where Flutter 

01:47:07.644 --> 01:47:09.644
stands out as you saw with the 
demo in the big history app.

01:47:12.410 --> 01:47:14.439
It's the composition of text, 
video, graphics and UI controls 

01:47:14.440 --> 01:47:18.541
whether from Flutter or the 
underlying platform applying 

01:47:18.542 --> 01:47:20.542
animations and transformations 

01:47:22.070 --> 01:47:24.106
on to a single 
hardware-accelerated surface 

01:47:24.107 --> 01:47:27.603
that makes Flutter such a 
powerful platform.  And a 

01:47:27.604 --> 01:47:29.604
powerful addition to the 

01:47:30.854 --> 01:47:32.854
toolkits of designers and 
developer developers.

01:47:34.117 --> 01:47:35.751
But while Flutter bridges the 
gap to designers, we think 

01:47:35.752 --> 01:47:39.452
there's an opportunity to give 
creative professionals the same 

01:47:39.453 --> 01:47:41.453
boost to 

01:47:43.199 --> 01:47:45.199
productivity that stateful hot 
reload gives to developers.

01:47:48.174 --> 01:47:49.799
And we have been working with a 
company who have been investing 

01:47:49.800 --> 01:47:53.065
in this space for a little 
while.  And they've got some 

01:47:53.066 --> 01:47:55.066
tools that I think you might be 
interested to see.

01:47:58.642 --> 01:48:02.706
So, I want to invite  Two 
Dimensions on to the stage.

01:48:05.915 --> 01:48:10.522
[ Applause ]
GUIDO: I'm a designer.  What I 

01:48:10.523 --> 01:48:12.964
really like about Flutter is how
easy it makes it for us to 

01:48:12.965 --> 01:48:14.965
create beautiful applications.

01:48:17.302 --> 01:48:19.128
Now, as a designer, I always 
have big plans for what I'm 

01:48:19.129 --> 01:48:21.129
gonna build.

01:48:22.179 --> 01:48:24.179
I love coming up with new 

01:48:25.906 --> 01:48:30.822
interactions, slick animations, 
epic lens flares, you name it.  

01:48:30.823 --> 01:48:33.108
That said, once I've got these 
concepts down, I then have to 

01:48:33.109 --> 01:48:35.109
figure out 

01:48:36.782 --> 01:48:40.677
how I'm going to actually code 
all of this awesome stuff.  And 

01:48:40.678 --> 01:48:43.116
that's when I think, how cool 
would it be if I had a twin that

01:48:43.117 --> 01:48:45.117
could code it all for me?

01:48:48.408 --> 01:48:50.408
Well, I have good news!

01:48:52.725 --> 01:48:54.766
Today we are launching a clone 
program.

01:48:57.781 --> 01:48:59.781
[ Applause ]

01:49:00.925 --> 01:49:02.925
Just kidding.

01:49:04.605 --> 01:49:09.107
I am, indeed, lucky to have a 
twin.  And he's an engineer.  

01:49:09.108 --> 01:49:11.560
This is Luigi, by the way.  But 
thanks to our new tool and 

01:49:15.504 --> 01:49:17.535
Flutter, you won't need a 
complimentary twin like us.

01:49:22.418 --> 01:49:26.704
LUIGI: We are 2Dimensions and we
are here today to talk about a 

01:49:26.705 --> 01:49:30.596
new product we build called 
Flare.  Flare is a vector design

01:49:30.597 --> 01:49:34.721
and run-time animation tool that
exports directly to Flutter.

01:49:37.773 --> 01:49:40.626
We built Flare to designers like
ourselves and developers can 

01:49:40.627 --> 01:49:43.282
work in parallel.
GUIDO: If you're a designer, the

01:49:43.283 --> 01:49:47.764
biggest advantage to Flare is 
that you do get to work  

01:49:47.765 --> 01:49:51.223
directly on the assets that run 
in your final app.  That means 

01:49:51.224 --> 01:49:53.224
you don't need to design in 

01:49:56.158 --> 01:49:58.158
one app, animate in another app,
redline 

01:50:00.064 --> 01:50:02.314
your mockups, write up a 
hundred-page guide to basically 

01:50:02.315 --> 01:50:04.552
help your engineering team redo 
all the work that you already 

01:50:04.758 --> 01:50:08.819
did.  Everything that you design
in Flare is exactly what runs in

01:50:08.820 --> 01:50:13.590
Flutter.  Not only does this 
open up your entire team to be 

01:50:13.591 --> 01:50:15.436
able to quickly iterate, but it 
also allows you to make great 

01:50:15.437 --> 01:50:19.319
design a part of your process 
from the very beginning right up

01:50:19.320 --> 01:50:21.320
until the completion of your 
app.

01:50:23.823 --> 01:50:26.535
So, we have a demo and we're 
going to show you how all this 

01:50:26.536 --> 01:50:28.559
works.
LUIGI: So, what Guido is going 

01:50:28.560 --> 01:50:30.560
to pull 

01:50:33.315 --> 01:50:35.315
up is a Flutter list view, 
that's on a refresh animation.

01:50:37.833 --> 01:50:40.286
As Guido pulls the list down, 
there's a zoom animation with 

01:50:40.287 --> 01:50:42.942
the movement of the list.  And a
couple idle animations like the 

01:50:46.596 --> 01:50:48.596
Earth spinning, the stars 
twinkling and 

01:50:49.878 --> 01:50:52.332
the comments that are blended on
top, regardless of where his 

01:50:52.333 --> 01:50:55.270
finger is or the list view is 
placed.  This is all animated in

01:50:55.271 --> 01:50:59.772
different layers.  So, this 
would all be pretty difficult to

01:50:59.773 --> 01:51:01.847
achieve with a video or an image
sequence.  Instead, these are 

01:51:01.848 --> 01:51:04.088
all animations that I created.  
And I'm going to show you a 

01:51:04.089 --> 01:51:08.576
little bit of what the file  
looks like in Flare.  So, this 

01:51:08.577 --> 01:51:11.292
is our space demo.  And these 
are all the animations I created

01:51:11.293 --> 01:51:13.293
for this app.

01:51:14.746 --> 01:51:17.622
There's this pull animation 
which Luigi hooked up to 

01:51:17.623 --> 01:51:22.110
basically progress as you're 
pulling your finger.  And as you

01:51:22.111 --> 01:51:24.111
can see, the Earth isn't 

01:51:25.220 --> 01:51:27.220
actually rotating, the clouds 
and continents aren't moving.

01:51:28.879 --> 01:51:29.892
There's a separate animation 
called idle here, that's where 

01:51:29.893 --> 01:51:31.893
it's happening. 

01:51:33.813 --> 01:51:35.031
If I blend the two animations 
together, all the stuff is 

01:51:35.032 --> 01:51:38.725
happening together.   The other 
animations are a simple success 

01:51:38.726 --> 01:51:40.146
state which happens when the 
users pull their finger far 

01:51:40.147 --> 01:51:42.994
enough.  It just lets the user  
know, you know, something 

01:51:42.995 --> 01:51:44.995
happened, success.

01:51:48.122 --> 01:51:49.562
And then it goes into this 
loading indeterminate state 

01:51:49.563 --> 01:51:51.563
waiting for the loading to 
finish.  That's it.

01:51:54.868 --> 01:51:57.114
That's created in Flare and 
Luigi hooked it up to work.

01:51:58.537 --> 01:52:00.783
LUIGI: It only takes a few lines
of code to get it running in 

01:52:00.784 --> 01:52:02.784
Flutter.

01:52:03.844 --> 01:52:05.844
Once it's done, Guido can keep 
iterate 

01:52:07.357 --> 01:52:09.823
on this design completely by 
himself.

01:52:07.357 --> 01:52:09.400
GUIDO: That's a good point.  So,
going back to the simulator 

01:52:09.401 --> 01:52:12.653
here, now that I'm actually 
seeing this running here, I kind

01:52:12.654 --> 01:52:16.843
of think that the moon spinning 
actually looks sort of boring.  

01:52:16.844 --> 01:52:18.844
I think we could do something a 
little more exciting with it.

01:52:21.156 --> 01:52:23.408
And that's a good opportunity to
show you guys how easily I can 

01:52:23.409 --> 01:52:25.409
update that 

01:52:28.111 --> 01:52:32.212
and iterate on it without taking
up any of Luigi's time.  I'm 

01:52:32.213 --> 01:52:34.213
loading Flare, in the animation,

01:52:35.550 --> 01:52:37.598
grab the moon orbit key frames 
and hit delete.  What I actually

01:52:37.599 --> 01:52:41.110
want to do is have the moon kind
of move from a side view.  I 

01:52:41.111 --> 01:52:43.766
want it to move like this.  So, 
I'm gonna set a key frame at the

01:52:44.816 --> 01:52:47.123
start here for the position.  
I'm gonna set the same key frame

01:52:47.124 --> 01:52:51.828
at the end.  And then right 
about the middle here, 

01:52:56.927 --> 01:52:58.956
I'm gonna put negative 60 to 
inverse  it.  So, now we've got 

01:52:58.957 --> 01:53:03.631
the movement.  I'm going to add 
just some easing to it.  And I 

01:53:03.632 --> 01:53:05.681
want this to be kind of playful,
so, I'm going for a bit of an 

01:53:06.084 --> 01:53:08.315
exaggerated curve.  I already 
set up the draw curve so that it

01:53:08.316 --> 01:53:11.395
switches.  And
you can see that we have our new

01:53:11.396 --> 01:53:15.526
orbit here.  And one last thing 
to really sell this animation.  

01:53:15.527 --> 01:53:17.355
And that's to add just a little 
bit of scale to make this look 

01:53:17.356 --> 01:53:19.356
cartoony.

01:53:20.423 --> 01:53:21.845
So, I'm going to add two key 
frames first for our normal 

01:53:21.846 --> 01:53:25.316
scale.  And right about here 
where the moon is  passing in 

01:53:25.317 --> 01:53:28.602
front of the Earth, I'm going to
double our X.  And you'll see 

01:53:28.603 --> 01:53:30.603
that this creates just 

01:53:31.872 --> 01:53:34.128
a little bit of playfulness.
LUIGI: All right.  I think 

01:53:34.129 --> 01:53:36.129
that's good enough for now.

01:53:38.011 --> 01:53:38.815
Let's see how I get this back 
into  Flutter.

01:53:38.816 --> 01:53:43.918
GUIDO: I hit export.  Switch 
over to our assets and just drag

01:53:43.919 --> 01:53:45.919
and drop our new asset over the 
old one, hit replace.

01:53:48.661 --> 01:53:51.159
And then I switch over to VS  
code, do a hot restart because 

01:53:51.160 --> 01:53:53.160
we need to reload our asset.

01:53:55.422 --> 01:53:57.457
And we've got my new moon 
animation in  there.

01:54:02.152 --> 01:54:04.152
[ Applause ] I was able -- I was
able to 

01:54:06.462 --> 01:54:08.462
do all that have without taking 
up any of Luigi's time.

01:54:11.607 --> 01:54:13.607
And I can keep iterating as long
as I want.

01:54:15.482 --> 01:54:16.103
LUIGI: It's good at UI 
components as well as animation 

01:54:16.104 --> 01:54:18.913
components as you just saw.  
This is an expand application 

01:54:18.914 --> 01:54:23.232
that Guido built for the 
everything app.  This is a 

01:54:23.233 --> 01:54:25.470
broken heart in the favorites 
list when it's empty.

01:54:28.730 --> 01:54:30.359
But Flare shines at building 
complex animation systems that 

01:54:30.360 --> 01:54:32.800
are easy to control.  Full 
control for bones, constraints 

01:54:36.929 --> 01:54:38.929
and inverse cinematics.

01:54:41.193 --> 01:54:44.060
And you say May have seen this 
Amelia Earhart, allows her eyes 

01:54:44.061 --> 01:54:47.776
and nose and mouth and face to 
move without making them 

01:54:47.777 --> 01:54:50.214
animated individually.  The 
animater can key frame one node 

01:54:50.215 --> 01:54:53.313
or have a developer control it 
in Flutter and have all these 

01:54:53.314 --> 01:54:55.314
constraints work there as well.

01:54:57.591 --> 01:54:59.023
And in this other example, Guido
can move the hipbone for this 

01:54:59.024 --> 01:55:03.970
character and you can see that 
her feet and her legs bend and 

01:55:03.971 --> 01:55:05.805
move in the correct direction as
you would expect, and that's due

01:55:05.806 --> 01:55:07.806
to 

01:55:11.736 --> 01:55:13.736
the inverse  kinematics that we 
export.

01:55:13.995 --> 01:55:16.096
GUIDO: As you can see, Flare is 
between design and development 

01:55:16.097 --> 01:55:17.920
and you can make great design a 
fundamental part of your 

01:55:17.921 --> 01:55:19.921
process.  I'm really  excited to
announce that 

01:55:23.628 --> 01:55:25.628
Flare is launching today on 
2Dimensions.com and it's free.

01:55:30.305 --> 01:55:32.305
[ Applause ]

01:55:36.328 --> 01:55:38.364
If you're a developer, you'll be
able to 

01:55:44.439 --> 01:55:46.439
find a bunch of assets on 
2dimensions.com.

01:55:50.555 --> 01:55:53.743
And their available for free on 
2dimensions.com.  We are excited

01:55:53.744 --> 01:55:56.418
that Flutter is going 1 .0 
today, and we can't wait to see 

01:55:56.419 --> 01:55:59.906
how you'll use Flare with it.  
Thank you.

01:56:01.142 --> 01:56:03.628
[ Applause ]
TIM: Wow.  Thanks, Luigi, 

01:56:03.629 --> 01:56:07.319
thanks, Guido.  So, that is 
Flare.  Flare bridges the gap 

01:56:07.320 --> 01:56:09.320
between designers and 
developers.

01:56:13.017 --> 01:56:15.677
Designers are at last able to 
fully participate from beginning

01:56:15.678 --> 01:56:19.446
to end in the development of an 
app.  Creating interactive 

01:56:19.447 --> 01:56:21.447
content that can 

01:56:22.716 --> 01:56:24.716
evolve along with the rest of 
the app.  Okay.

01:56:26.799 --> 01:56:28.799
So, we've talked about design 
with Flutter.

01:56:30.460 --> 01:56:32.460
Let's now switch to the 
developer.

01:56:34.947 --> 01:56:36.994
You know, writing code can often
be a frustrating process.  

01:56:36.995 --> 01:56:40.452
Particularly when you're working
with a new framework.  And 

01:56:40.453 --> 01:56:42.778
perhaps one of the best things 
about web development is how 

01:56:42.779 --> 01:56:47.226
immediate it is.  You know, you 
can make changes and you can see

01:56:47.227 --> 01:56:49.227
them reflected in real-time 

01:56:51.002 --> 01:56:53.002
without the painful edits, 
compile, run, 

01:56:55.532 --> 01:56:57.386
debug cycle that slows down 
traditional development.  With 

01:56:57.387 --> 01:57:01.084
Flutter, we've taken a lot of 
inspiration from that model.  

01:57:01.085 --> 01:57:03.345
And here to show you how fun it 
can be to develop with Flutter 

01:57:03.346 --> 01:57:06.874
are Emily and Matt.  Hey, you 
guys.

01:57:09.552 --> 01:57:11.552
[ Applause ]

01:57:13.421 --> 01:57:15.427
MATT: So, hopefully so far 
you've seen a whole bunch of 

01:57:15.428 --> 01:57:19.120
really cool and beautiful apps 
built in Flutter.  What we want 

01:57:19.121 --> 01:57:21.983
to do is show you something a 
little different.  What it's 

01:57:21.984 --> 01:57:24.645
actually like to build a Flutter
app.  What the developer 

01:57:24.646 --> 01:57:26.646
experience is like.

01:57:28.120 --> 01:57:30.120
So, we've got a laptop.  We have
a mobile phone.

01:57:33.531 --> 01:57:34.088
And what we're gonna do is we're
gonna start to play around with 

01:57:34.089 --> 01:57:38.298
some code.  Because one of the 
things that we feel Flutter 

01:57:38.299 --> 01:57:40.137
really gives you as a developer 
is a really, really nice 

01:57:40.138 --> 01:57:42.138
development experience.

01:57:43.617 --> 01:57:45.617
So, we're gonna mirror our 
mobile phone on to our laptop.

01:57:48.846 --> 01:57:53.943
And we are going to get -- build
ourselves a -- an app.  And it's

01:57:53.944 --> 01:57:56.829
all going to go swimmingly.  
Because it's actually gonna be 

01:57:56.830 --> 01:57:58.830
live.

01:58:00.692 --> 01:58:02.692
EMILY: Got an ADB not 
responding.

01:58:03.335 --> 01:58:05.400
MATT: And we're starting off 
really well because our ABD is 

01:58:05.401 --> 01:58:07.632
not responding.  Yes!
[ Applause ]

01:58:09.466 --> 01:58:11.491
I'm going to keep talking about 
how wonderful the development 

01:58:11.492 --> 01:58:13.492
experience is.  It's not 
necessarily --

01:58:14.784 --> 01:58:16.784
EMILY: The builds --
MATT: The experience.

01:58:17.632 --> 01:58:18.858
EMILY: You can tell them what 
we're gonna  build.

01:58:18.859 --> 01:58:20.859
MATT: Okay.

01:58:25.500 --> 01:58:28.992
So, we're going to play around 
with clocks.  Because we feel 

01:58:28.993 --> 01:58:32.006
that clocks are underrated as 
apps.  And we're gonna actually 

01:58:32.007 --> 01:58:34.871
try to make them interesting.  
But the real reason we're doing 

01:58:34.872 --> 01:58:39.160
it is because what we did 
initially, as you'll see any 

01:58:39.161 --> 01:58:41.193
second, honestly, I really, 
really promise, is that we put a

01:58:41.194 --> 01:58:44.912
very, very basic app together.  
And what this app is, is a 

01:58:44.913 --> 01:58:46.913
countdown app.

01:58:48.234 --> 01:58:50.234
And when we click "Go," it's 
going to start counting down.

01:58:52.196 --> 01:58:55.008
And we didn't put a reset button
in there.  So, this is going to 

01:58:55.009 --> 01:58:58.743
countdown to zero and that is 
going to keep us honest as to 

01:58:58.744 --> 01:59:02.323
what we're gonna build and we're
gonna see how this goes.  So, 

01:59:02.324 --> 01:59:04.324
we're up and running, great.

01:59:06.002 --> 01:59:08.002
We're gonna take about 30 
minutes to --

01:59:08.062 --> 01:59:10.752
EMILY: 15.
MATT: We're gonna take 25 

01:59:10.753 --> 01:59:12.753
minutes.
EMILY: 15.

01:59:14.426 --> 01:59:15.453
MATT: We're gonna take 20 
minutes.

01:59:15.454 --> 01:59:17.454
EMILY: 10.

01:59:19.735 --> 01:59:21.809
MATT: We're gonna take 15 
minutes to build an app.

01:59:23.026 --> 01:59:25.946
EMILY: How about 12?
MATT: Emily rounds down.  We're 

01:59:25.947 --> 01:59:27.947
going to take 12 minutes.  And 
you've already started.  Okay.

01:59:31.886 --> 01:59:33.886
Emily, explain roughly how our 
base works?

01:59:35.393 --> 01:59:36.414
EMILY: So, as Matt mentioned, we
have a  countdown app written in

01:59:36.415 --> 01:59:38.869
Flutter.  As you can see, it's 
rather boring.

01:59:42.357 --> 01:59:45.015
But we were wondering, what if 
countdown apps could be fun as 

01:59:45.016 --> 01:59:48.711
Flutter is fun, and beautiful.  
This is not yet beautiful.  

01:59:48.712 --> 01:59:50.765
Let's take a look at what we 
have written here.  So, we've 

01:59:50.766 --> 01:59:56.128
got a simple clock.  And if you 
ever come across a clock in your

01:59:56.129 --> 01:59:57.754
lifetime --
MATT: We're not going to explain

01:59:57.755 --> 02:00:01.633
clocks.  People get clocks and 
we have 11 minutes and 24 

02:00:01.634 --> 02:00:03.634
seconds left.
EMILY: Okay.

02:00:05.496 --> 02:00:07.496
As you will all experience,  
clocks tick.

02:00:09.373 --> 02:00:11.373
Every second an event -- time is
passing.

02:00:12.870 --> 02:00:14.870
And so, what we have here is 
we've got 

02:00:17.604 --> 02:00:19.850
a stream that our program can 
subscribe to in every second an 

02:00:19.851 --> 02:00:22.695
event occurs saying the amount 
of  remaining time that is left.

02:00:25.771 --> 02:00:27.771
So, we can subscribe to the 
stream.

02:00:29.047 --> 02:00:31.502
And on our simple clock, we can 
build based on that stream.  So,

02:00:31.503 --> 02:00:33.975
we have this stream builder.  We
are listening to that countdown 

02:00:34.374 --> 02:00:36.374
stream.

02:00:37.690 --> 02:00:40.577
And then based on each time we 
get an update, AKA, a second has

02:00:40.578 --> 02:00:42.578
passed, we're going to print 
that text.

02:00:45.099 --> 02:00:47.099
MATT: So, the moral of the story
here 

02:00:49.179 --> 02:00:53.472
is, time is inexorbly counting 
down and we need to get busy.  

02:00:53.473 --> 02:00:55.915
Emily and I could not agree on 
what we were going to build.  I 

02:00:55.916 --> 02:00:57.916
wanted to build a retro clock 

02:01:02.114 --> 02:01:04.114
because I love my '70s ch

02:01:05.390 --> 02:01:07.631
EMILY: And I wanted to showcase 
features with the mobile phones,

02:01:07.632 --> 02:01:10.694
so, we have a mobile app.  
Interactive timers are best.

02:01:15.249 --> 02:01:16.876
MATT: So, in 10 minutes and 50 
seconds, we are going to build 

02:01:16.877 --> 02:01:20.825
two.  We can combine these into 
the app and use the same timers 

02:01:20.826 --> 02:01:23.259
so we cannot cheat.  Where am I 
going to start.  Let's take a 

02:01:23.260 --> 02:01:26.747
look here.  Let's close that 
down.  And I am start here with 

02:01:26.748 --> 02:01:30.655
basically a blank file.  I have 
nothing.  And I'm going to start

02:01:30.656 --> 02:01:33.493
with a widget.  Because in 
Flutter, everything begins with 

02:01:33.494 --> 02:01:35.494
a widget.  In the beginning, 
there is a widget.

02:01:38.254 --> 02:01:40.254
And I'm going to call this retro
clock.

02:01:40.522 --> 02:01:43.986
EMILY: And as you can see, this 
widget has a build method.  This

02:01:43.987 --> 02:01:45.433
is what gets called when you're 
drawing the particular widget to

02:01:45.434 --> 02:01:47.693
screen which is not yet being 
drawn.  And, yeah.

02:01:49.545 --> 02:01:51.545
MATT: Okay.

02:01:52.862 --> 02:01:54.862
What says '70s chic to you?
EMILY: Orange and brown?

02:01:55.739 --> 02:01:59.216
MATT: Orange and brown is one.  
But also wood grain.  We're 

02:01:59.217 --> 02:02:01.734
going to add wood grain in.  I 
bet you thought you were going 

02:02:01.735 --> 02:02:03.735
so see something awesome.

02:02:06.217 --> 02:02:08.481
Now you're going to get wood 
grain.  I'm going to layer a 

02:02:08.482 --> 02:02:10.482
stack.

02:02:11.767 --> 02:02:15.459
We can layer widgets on top of 
each other with a stack.  Start 

02:02:15.460 --> 02:02:17.690
with the wood grain.
EMILY: This has one widget in 

02:02:17.691 --> 02:02:21.600
it.  But spoiler alert, there 
are more widgets on top.

02:02:23.443 --> 02:02:25.443
AUDIENCE: And because we are 
going to 

02:02:27.219 --> 02:02:29.219
see all the clocks, what to use?

02:02:31.349 --> 02:02:34.051
EMILY: Wrap in a page view to 
swipe between the block clocks 

02:02:34.052 --> 02:02:36.052
to see all of 

02:02:37.067 --> 02:02:39.067
them

02:02:42.049 --> 02:02:43.078
MATT: Wrap page view, retro 
clock first.

02:02:43.079 --> 02:02:45.917
EMILY: Bold move.
MATT: And lo and behold.  Did it

02:02:45.918 --> 02:02:47.918
disconnect?
EMILY: It did.

02:02:48.645 --> 02:02:51.127
MATT: It did disconnect.  This 
is going so  well.  This is 

02:02:51.128 --> 02:02:53.128
awesome.

02:02:56.451 --> 02:02:58.451
I knew we should have used the 
iOS.

02:03:00.544 --> 02:03:02.367
Bear with us while we reconnect 
here.  The problem here is that 

02:03:02.368 --> 02:03:07.722
we're not only counting down, 
so, the app restarts.  It 

02:03:07.723 --> 02:03:09.780
doesn't start at the  same -- or
at a new time or at the 

02:03:09.781 --> 02:03:11.781
beginning time.

02:03:13.692 --> 02:03:15.928
We're persisting this to the 
device.  So, it's probably still

02:03:15.929 --> 02:03:18.974
clicking down at this moment in 
time.  So, we're not going to 

02:03:18.975 --> 02:03:22.668
get anymore extra time to work 
in this.  We're going to be able

02:03:22.669 --> 02:03:24.669
to constrain 

02:03:25.951 --> 02:03:27.951
ourselves even further.

02:03:29.673 --> 02:03:31.502
So, with Flutter, even though it
isn't quite obvious to you at 

02:03:31.503 --> 02:03:33.763
the moment, what you can 
actually do is develop really 

02:03:37.264 --> 02:03:39.264
nicely with the phone plugged 
in.

02:03:40.514 --> 02:03:42.514
And hot reload over to the 
phone, iOS or Android.

02:03:44.627 --> 02:03:46.243
And we work well with emulators 
and simulators and even do funky

02:03:46.244 --> 02:03:48.304
things like.  Did I mess up?

02:03:52.190 --> 02:03:54.064
EMILY: You added a few too many 
parentheses.

02:03:54.065 --> 02:03:56.065
MATT: Did I do that?
EMILY: Yes.

02:03:56.517 --> 02:03:58.765
MATT: Why do I have a job?
EMILY: Yeah, creating empty 

02:03:58.766 --> 02:04:02.044
spaces.
MATT: I used to write lists.  

02:04:02.045 --> 02:04:04.045
This was easy back then.
EMILY: Okay.

02:04:06.342 --> 02:04:08.389
MATT: Keep going now?
EMILY: Yes.

02:04:10.255 --> 02:04:12.888
MATT: It's relaunching.  Can I 
get back at the keyboard?

02:04:14.543 --> 02:04:16.783
EMILY: Go for it.
MATT: I'm going for it.

02:04:19.628 --> 02:04:21.269
EMILY: While it's reloading, we 
stored time in the preferences.

02:04:21.270 --> 02:04:26.363
MATT: Dear me, it's wood grain! 
Yes!  Yeah, wood grain, 

02:04:26.364 --> 02:04:29.059
wonderful.
EMILY: If only we knew what time

02:04:29.060 --> 02:04:32.365
it was, Matt.
MATT: If only we knew what time 

02:04:32.366 --> 02:04:36.857
it was.  Too late.  I'm going to
put back in simple clock because

02:04:36.858 --> 02:04:39.104
with simple clock everything is 
a widget and we can reuse 

02:04:39.105 --> 02:04:43.212
widgets.  And lo and behold, we 
have an incredibly difficult 

02:04:43.213 --> 02:04:47.489
time that we can't read.  Let me
style that up a bit.  And we 

02:04:47.490 --> 02:04:49.731
will put that in  and, okay.  
So, we have eight minutes and 

02:04:49.732 --> 02:04:53.397
we've gotten to wood grain on a 
clock.

02:04:56.718 --> 02:04:57.948
EMILY: I think you've achieved 
Swedish  minimalism.

02:04:57.949 --> 02:05:02.545
MATT: I think I have.  So, let 
me fix that.  I'm going to put 

02:05:02.546 --> 02:05:05.386
it in a clock frame widget.  In 
my clock frame widget, what I'm 

02:05:07.436 --> 02:05:08.651
going to use here is I'm going 
to use a card.

02:05:08.652 --> 02:05:11.706
EMILY: Yeah.  So, a card is just
like a  container.  You can give

02:05:11.707 --> 02:05:16.396
it color.  And it has some 
elevation, it has some nice edge

02:05:16.397 --> 02:05:18.470
-- you can round the edges.  
Make it stand out.

02:05:18.889 --> 02:05:22.197
MATT: Exactly.  And again, I can
just swap out my widgets as I 

02:05:22.198 --> 02:05:24.665
build this up.  And there we go.
We have a card which is kind of 

02:05:24.666 --> 02:05:29.584
boring.  So, let's make it a 
little more framing.  So, I can 

02:05:29.585 --> 02:05:32.830
give it a  shape.  And I can 
give it a border.  And this  

02:05:32.831 --> 02:05:35.713
border.  Border, color.  Some 
roundedness.  Okay.

02:05:38.800 --> 02:05:40.221
That's looking more clocklike, 
right?

02:05:40.222 --> 02:05:42.728
EMILY: I thought this was 
supposed to be a retro clock and

02:05:42.729 --> 02:05:43.766
this is looking pretty darn 
digital.

02:05:43.767 --> 02:05:47.256
MATT: Okay.  I can do something 
about that.  Create another 

02:05:47.257 --> 02:05:49.257
widget and stack them up.  And 
this time I'm going to create a 

02:05:49.519 --> 02:05:51.559
clock face.  What I'm going to 
do now, I'm going to 

02:05:54.841 --> 02:05:56.841
use and cheat, and use a package
built by one of our community.

02:05:57.269 --> 02:06:00.951
EMILY: Someone else in our 
community wrote this really cool

02:06:00.952 --> 02:06:02.952
package called flip panel.

02:06:04.616 --> 02:06:06.986
And Matt wrote some styling 
around that and has a variant, 

02:06:06.987 --> 02:06:11.005
flip digit.  We're using that.
MATT: We have a problem, no 

02:06:11.006 --> 02:06:15.919
longer using simple clock.  I 
don't have a clock anymore.  I 

02:06:15.920 --> 02:06:17.920
need access to the countdown 
stream.

02:06:17.950 --> 02:06:20.605
EMILY: Matt is going to access 
using an inherited widget to 

02:06:20.606 --> 02:06:23.244
pull down this stream so we can 
listen and receive updates.

02:06:24.879 --> 02:06:26.879
MATT: And I'm going to swap out 
my 

02:06:27.922 --> 02:06:31.805
simple clock now with my clock 
face.  And whoa.  There we go.  

02:06:31.806 --> 02:06:33.266
Best clock ever?
[ Applause ]

02:06:33.267 --> 02:06:36.945
Wait!  Wait!  There's more.  
We're not done  yet.

02:06:39.245 --> 02:06:41.245
EMILY: Yeah, but I want to see 
how many minutes we have.

02:06:41.922 --> 02:06:43.922
MATT: You don't to want see how 
many minutes we have left.

02:06:44.162 --> 02:06:46.162
EMILY: You're right, I don't.  
That's fine.

02:06:46.458 --> 02:06:49.137
MATT: Can I close my 
parentheses?  No, I can't.  So, 

02:06:49.138 --> 02:06:51.371
let's -- let's reuse that.  So, 
what I'm doing here is I'm 

02:06:51.372 --> 02:06:53.372
simply 

02:06:54.653 --> 02:06:57.706
creating a row so I can lay  
things out horizontally.  And 

02:06:57.707 --> 02:07:00.224
I'm going to put in four flip 
digits one for each, the tens, 

02:07:00.225 --> 02:07:02.693
the  seconds, the ones and 
whatnot.  And I'm going to save 

02:07:02.694 --> 02:07:06.198
that.  And there we go.  I think
at this point, this is retro 

02:07:06.408 --> 02:07:08.408
enough?
EMILY: Yeah, yeah, it's good.

02:07:10.698 --> 02:07:12.698
And I'm ready to take over the 
keyboard.

02:07:13.592 --> 02:07:15.592
MATT: I'm getting kicked off.  
Good.

02:07:17.664 --> 02:07:19.664
Hopefully you've seen, if you 
put in 

02:07:21.753 --> 02:07:23.879
the parentheses, coding Flutter 
is straightforward.  What I've 

02:07:23.880 --> 02:07:25.710
done is created something by 
styling up a bunch of pieces, a 

02:07:25.711 --> 02:07:29.397
little bit of animation, using a
package.  We're going to get a 

02:07:29.398 --> 02:07:32.505
little more advanced now because
what Emily wants to build is a 

02:07:32.506 --> 02:07:34.506
photo clock.
EMILY: Yes.

02:07:35.773 --> 02:07:38.619
MATT: What Emily is using here 
is using a  stateful widget.  I 

02:07:38.620 --> 02:07:40.620
was using stateless because I 
didn't have any state to follow.

02:07:41.314 --> 02:07:43.154
Emily's going to have a little 
bit of state to manage later on 

02:07:43.155 --> 02:07:48.482
and we'll get back to that in a 
minute when it becomes obvious. 

02:07:48.483 --> 02:07:50.131
So, we have in stateful widget 
and inside what are we doing 

02:07:50.132 --> 02:07:52.132
when we run this thing?
EMILY: Yeah.

02:07:54.471 --> 02:07:56.471
So, with stateful widgets you 
have 

02:07:57.730 --> 02:07:59.822
this init state method that you 
can call when the first time 

02:07:59.823 --> 02:08:01.823
that a stateful widget is 
called.

02:08:04.087 --> 02:08:05.509
Hold on, I'm just going to pull 
up the clock so we know how 

02:08:05.510 --> 02:08:07.564
we're doing.
MATT: So you can see here we 

02:08:07.565 --> 02:08:11.658
have -- we're  using the camera 
plugin.  One of the plugins 

02:08:11.659 --> 02:08:13.659
built by the Flutter team which 
gives you full access 

02:08:17.241 --> 02:08:19.285
to all of the cameras and camera
activities actions that you can 

02:08:19.286 --> 02:08:22.357
do on both iOS and Android.  
What we want to do is take a 

02:08:22.358 --> 02:08:26.865
photo every minute.  We want to 
hurry up because we have four 

02:08:26.866 --> 02:08:28.866
and a half of them left.

02:08:29.919 --> 02:08:32.401
So, we're going to -- Emily has 
done funky math to basically say

02:08:32.402 --> 02:08:36.070
every time we hit zero on the 
seconds, take a picture.  We're 

02:08:36.071 --> 02:08:36.693
doing the right thing with 
permissions.

02:08:36.694 --> 02:08:42.241
EMILY: Yeah.  What you saw is I 
initialized the camera.  It said

02:08:42.242 --> 02:08:44.242
it was asking me for permissions
to use the camera.

02:08:46.544 --> 02:08:47.592
MATT: Technically in 7 seconds, 
we're going to get a photo 

02:08:47.593 --> 02:08:53.156
taken.  So, we shall do our 
first  selfie.  And by the power

02:08:53.157 --> 02:08:56.613
of Flutter, there was a photo 
taken.  Isn't that wonderful?  

02:08:56.614 --> 02:08:58.701
We have our word for it.  Let's 
show something actually.

02:09:00.734 --> 02:09:02.366
EMILY: I'm going to put this in 
a column so we can put the clock

02:09:02.367 --> 02:09:06.545
and then the image that we took 
just below it.  And then I wrote

02:09:06.546 --> 02:09:08.546
a widget ahead of 

02:09:10.819 --> 02:09:13.086
time called Filmstrip that -- 
so, you remember we were talking

02:09:13.087 --> 02:09:15.745
about streams for the time.  We 
also set up a stream that is 

02:09:17.371 --> 02:09:19.371
listening to the file  system.

02:09:20.670 --> 02:09:22.104
So, when we take a photo, we are
writing to that file system and 

02:09:22.105 --> 02:09:24.105
we have a listener.

02:09:26.838 --> 02:09:28.458
And then when that is updated, 
we -- we tell Flutter that we 

02:09:28.459 --> 02:09:30.911
need to rebuild.  So, I'm going 
to add that in.

02:09:37.201 --> 02:09:39.201
MATT: We're going add this in, a

02:09:40.651 --> 02:09:43.909
column here, and I used a row.  
And we have a selfie!  This is 

02:09:43.910 --> 02:09:45.744
great.
EMILY: Another picture coming 

02:09:45.745 --> 02:09:47.745
up.
MATT: I'm going to get a selfie.

02:09:48.990 --> 02:09:50.990
This is going to be great.

02:09:52.095 --> 02:09:54.977
Three, two, one and photo.
[ Laughter ]

02:09:55.994 --> 02:09:58.474
[ Applause ]
We're going to make this so we 

02:09:58.475 --> 02:10:00.475
can scroll back to the other 
photo, right?

02:10:00.516 --> 02:10:04.590
EMILY: Yes.  Because I like the 
first one better.  So, let us 

02:10:04.591 --> 02:10:08.508
switch this out.  Right now 
we're showing the first of the 

02:10:08.509 --> 02:10:10.509
film images.

02:10:11.781 --> 02:10:13.781
So, instead, we're going to use 
a list view.

02:10:15.642 --> 02:10:17.642
And we're gonna scroll 
horizontally 

02:10:19.138 --> 02:10:21.981
through all of the photo paths.
MATT: So, we have managed to 

02:10:21.982 --> 02:10:24.911
squeeze in stacks, columns, rows
and list views almost by 

02:10:24.912 --> 02:10:29.608
accident.  But we got them all 
in.  So, now we can scroll 

02:10:29.609 --> 02:10:32.878
through these photos and this is
great.  And we're starting to 

02:10:32.879 --> 02:10:35.557
get somewhere.  But we're not 
quite done yet, are we?

02:10:37.809 --> 02:10:39.809
EMILY: No, I'm going to add some
styling.

02:10:40.053 --> 02:10:42.053
MATT: Even though I ate up all 
your 

02:10:44.001 --> 02:10:45.439
time, you seem to be making some
up and we have 2 minutes and 10 

02:10:45.440 --> 02:10:47.440
second left.
EMILY: Yes.

02:10:49.779 --> 02:10:51.633
First I'm going to add some 
images to make it look a little 

02:10:51.634 --> 02:10:53.634
more like a camera.  Oh.

02:10:55.516 --> 02:10:57.516
I'm glad that Dash could visit.

02:10:59.178 --> 02:11:01.178
MATT: There we go.

02:11:04.078 --> 02:11:06.426
EMILY: Maybe visited the 
haberdashery.

02:11:09.494 --> 02:11:11.981
And I'm going to set styling to 
make this fill in.  I've got a 

02:11:11.982 --> 02:11:14.418
nice font.
MATT: So, we're going to style 

02:11:14.419 --> 02:11:18.313
up the time and make it not look
super-modern.  We're going to go

02:11:18.314 --> 02:11:22.829
art deco.  This is going to be 
fairly eclectic.  We have the 

02:11:22.830 --> 02:11:26.084
time ticking down.  We have some
styling around it.  What else do

02:11:26.085 --> 02:11:30.782
we need to do?  Oh, we're gone 
in put in a -- we have two 

02:11:30.783 --> 02:11:35.052
cameras on this phone, not one. 
And we can access both of them. 

02:11:35.053 --> 02:11:37.053
So, what we can do here is we 
can pop in a button.

02:11:39.602 --> 02:11:40.621
And that's gonna let us --
EMILY: Switch the direction of 

02:11:40.622 --> 02:11:43.868
the camera.
MATT: Switch the direction of 

02:11:43.869 --> 02:11:45.720
the camera.
EMILY: So, it's a pretty easy 

02:11:45.721 --> 02:11:50.223
button.  You can see here when 
the button gets pressed, we are 

02:11:50.224 --> 02:11:53.341
going to switch the direction of
the camera.  And this is where 

02:11:53.342 --> 02:11:56.206
the statefulness of the widget 
comes into place.  We are 

02:11:56.207 --> 02:11:58.492
setting the state.  And here, 
I'll show you.  So, you see 

02:11:58.493 --> 02:12:00.493
that?

02:12:01.747 --> 02:12:05.814
If you tap the button, you can 
see the text will change.  And 

02:12:05.815 --> 02:12:07.815
so, it's changing states.

02:12:10.117 --> 02:12:11.976
Now, the alignment is a little 
wonky.  I'm going to fix that.  

02:12:11.977 --> 02:12:14.032
Make it interested.  Okay.  
There's one more thing.

02:12:15.069 --> 02:12:17.069
MATT: We have 35 second.  What 
are we going to do?

02:12:19.395 --> 02:12:21.644
EMILY: So, there's a really cool
other  third-party plugin that 

02:12:21.645 --> 02:12:25.931
has this kind of explosion 
animation.  And so, I --

02:12:27.791 --> 02:12:29.225
MATT: We're going to make 
ourselves self-destruct in 22 

02:12:29.226 --> 02:12:31.226
seconds.
EMILY: Yes.

02:12:33.528 --> 02:12:34.329
MATT: Not that we made it 
self-destruct  already, at least

02:12:34.330 --> 02:12:36.582
twice.
EMILY: Yes.

02:12:38.206 --> 02:12:40.206
MATT: We're gonna make it?
EMILY: We're gonna make it.

02:12:41.520 --> 02:12:44.378
MATT: You've got 10 seconds.
EMILY: We are gonna make it.

02:12:46.411 --> 02:12:50.089
MATT: House lights, please.  
Everybody raise your arms.  

02:12:50.090 --> 02:12:54.191
Three, two, one, say cheese!  
Oh, look at that.  There we go.

02:12:54.818 --> 02:12:56.818
[ Applause ]

02:12:58.518 --> 02:13:00.518
fireworks!

02:13:09.834 --> 02:13:11.475
We've subjected you to enough 
live coding so we'll stop it 

02:13:11.476 --> 02:13:16.590
there.  Thank you very much.
EMILY: And enough adrenaline.  

02:13:16.591 --> 02:13:18.591
Yeah.

02:13:20.049 --> 02:13:23.981
Rest easy now.
TIM: I have so much respect for 

02:13:23.982 --> 02:13:28.920
those guys.  To pull that off in
that length of time is just  

02:13:28.921 --> 02:13:32.860
amazing.  Whoof!  Over the last 
couple of months we 

02:13:37.024 --> 02:13:38.277
spent a lot of time talking with
company building with Flutter 

02:13:38.278 --> 02:13:41.545
and learning how they're using 
it.  And in particular towards 

02:13:41.546 --> 02:13:46.055
1.0, we were interested to see 
what things did we need to 

02:13:46.056 --> 02:13:48.511
continue to invest in and so, 
there's a bunch of things that 

02:13:48.512 --> 02:13:53.003
we have been sort of working on 
and adding over the last couple 

02:13:53.004 --> 02:13:56.078
of months.  Particularly in the 
runup to Flutter 1.0.

02:13:59.583 --> 02:14:01.814
So, firstly, developers told us 
as Will mentioned, they wanted 

02:14:01.815 --> 02:14:03.860
to see support or better 
supports for building 

02:14:06.893 --> 02:14:08.893
apps that fully model the iOS 
design guidelines.

02:14:09.984 --> 02:14:12.446
So, we've added lots more 
widgets and classes that make it

02:14:12.447 --> 02:14:14.447
possible to build 

02:14:15.800 --> 02:14:19.383
those  pixel-perfect experiences
for iPhone.  Secondly, as Filip 

02:14:19.384 --> 02:14:23.926
showed, developers wanted to be 
able to integrate other platform

02:14:23.927 --> 02:14:26.582
content into the Flutter apps.  
We have done the heavy lifting 

02:14:26.583 --> 02:14:28.583
work to 

02:14:32.268 --> 02:14:34.268
bring this directly into the 
Flutter come positive iter.

02:14:38.077 --> 02:14:40.134
And we have previews of a Google
Maps plugin and a web browser 

02:14:40.135 --> 02:14:44.040
plugin.  And we heard loud and 
clear that developers wanted to 

02:14:44.041 --> 02:14:47.949
be able to add Flutter to 
existing apps, rather than just 

02:14:47.950 --> 02:14:49.379
creating new apps with Flutter. 
It's actually been possible for 

02:14:49.380 --> 02:14:54.279
a while.  But we've done a lot 
of work over the last couple of 

02:14:54.280 --> 02:14:56.328
months to improve the tooling, 
the build process, the 

02:14:57.761 --> 02:15:00.221
debuggability of this scenario. 
And we'll continue to invest in 

02:15:00.222 --> 02:15:04.519
this space over the next couple 
of months.  And, of course, 

02:15:04.520 --> 02:15:10.930
that's not all that's in Flutter
1.0.  We fixed a bunch of bugs. 

02:15:10.931 --> 02:15:13.162
We've continued to refine and 
polish it.  One feature I'm 

02:15:13.163 --> 02:15:15.457
particularly proud of is adding 
localization of the UI 

02:15:18.725 --> 02:15:20.725
content to 50 languages from 
Arabic to 

02:15:23.437 --> 02:15:27.029
Vietnamese, Marati to 
Swiss-German.  Even English.  

02:15:27.030 --> 02:15:29.945
Many of these have come to 
community contributions.  So, 

02:15:29.946 --> 02:15:32.800
thank you if you have been 
involved in that process also.  

02:15:32.801 --> 02:15:36.087
Lastly, Flutter 1.0 includes 
Dart 2.1.

02:15:39.189 --> 02:15:41.189
Which adds additional compile 
time

02:15:41.637 --> 02:15:43.637
checking, increased performance 
and reduced code size.

02:15:47.194 --> 02:15:49.236
A recent study of GitHub pull 
requests shows that Dart is one 

02:15:49.237 --> 02:15:52.110
of the fastest-growing 
languages.  And that's also 

02:15:52.111 --> 02:15:54.111
backed up by the 

02:15:57.062 --> 02:15:59.062
latest addition of the Tyobi 
index.

02:16:00.313 --> 02:16:02.763
And as you'll see later, Dart 
gives Flutter unique advantages 

02:16:02.764 --> 02:16:05.626
because of its versability as a 
platform.  Okay.  So, we've done

02:16:05.627 --> 02:16:09.507
design.  We've done develop.  
We're now going to move on to 

02:16:09.508 --> 02:16:11.544
talk about another part of the 
development process.

02:16:16.033 --> 02:16:17.922
Connecting to external service 
services.  As I mentioned 

02:16:17.923 --> 02:16:19.923
earlier, one of the reasons why 
Flutter is so productive for 

02:16:22.440 --> 02:16:25.755
mobile development is the 
package ecosystem.  We 

02:16:25.756 --> 02:16:27.756
deliberately made the core of 
Flutter as small as possible.

02:16:29.839 --> 02:16:31.904
And we used the plugin model 
ourselves to ship new features 

02:16:31.905 --> 02:16:33.905
out.

02:16:35.371 --> 02:16:37.371
We already have over 1,000 
Flutter 

02:16:39.198 --> 02:16:41.198
plugins covering everything from
video  

02:16:43.090 --> 02:16:45.543
playback to Facebook 
authentication, SQLLite to 

02:16:45.544 --> 02:16:48.835
GraphQL.  These packages are 
fully open source.  Many of them

02:16:48.836 --> 02:16:50.836
are contributed by the 
community.  And

02:16:52.955 --> 02:16:54.955
they make it easy to add support
for new services.

02:16:57.232 --> 02:16:59.465
For mobile developers, Firebase 
provides an array of key app 

02:16:59.466 --> 02:17:01.466
services 

02:17:03.357 --> 02:17:05.357
such as analytics, databases,  
sign-in, 

02:17:06.411 --> 02:17:08.926
push notifications, and crash 
reporting.  Most of them are 

02:17:08.927 --> 02:17:10.927
already supported 

02:17:12.808 --> 02:17:16.061
with first-party Flutter 
integrations.  And Flutter 1 .0 

02:17:16.062 --> 02:17:18.342
increases this support further. 
To show how these plugins come 

02:17:20.622 --> 02:17:22.622
together to make Flutter apps 
even more  

02:17:24.349 --> 02:17:27.820
connected, please welcome 
Maurice Parrish to the stage.  

02:17:27.821 --> 02:17:30.248
Maurice, great to see you.
MAURICE: Thank you, Tim.  All 

02:17:30.249 --> 02:17:33.166
right.  Get  logged in here.
[ Applause ]

02:17:36.289 --> 02:17:38.289
Make sure everything's 
connected.

02:17:39.548 --> 02:17:41.580
It looks like we're going to 
have to reconnect this.

02:17:44.708 --> 02:17:47.138
All right.  Here we go.  
Perfect.  Hey, everyone.

02:17:50.252 --> 02:17:51.524
My name summaries and I'm the 
engineer that works on Flutter's

02:17:51.525 --> 02:17:54.405
plugins.  I would like to show 
you something cool that we have 

02:17:54.406 --> 02:17:56.406
been adding to Flutter.

02:17:57.674 --> 02:18:00.134
As you can see here, we have an 
avatar of me.  And just like the

02:18:00.135 --> 02:18:02.135
timeline app, the design and 
animation have been provided 

02:18:02.388 --> 02:18:07.990
using Flare.  Right now the 
avatar is just standing idle.  

02:18:07.991 --> 02:18:10.042
That's kind of  boring.  So, 
what we can actually do is we 

02:18:10.043 --> 02:18:12.043
can move these sliders.

02:18:14.577 --> 02:18:16.625
We can have his face animation 
move and have some funny 

02:18:16.626 --> 02:18:22.156
expressions as well.  We can 
even give him a big smile.  But 

02:18:22.157 --> 02:18:24.157
instead of using sliders, what 
if 

02:18:25.412 --> 02:18:27.252
we could have this facial 
expression match mine 

02:18:27.253 --> 02:18:29.527
automatically using the power of
machine learning?  So, let's 

02:18:29.528 --> 02:18:32.389
look at the code.  So, to 
achieve this, we're gonna need 

02:18:32.598 --> 02:18:35.255
two plugins.  We're gonna need 
the camera plugin and 

02:18:39.987 --> 02:18:41.987
the ML Lkit plugin.  Since this 
is

02:18:45.563 --> 02:18:47.210
preconfigured for the cam rat ML
Kit, we're going to dive 

02:18:47.211 --> 02:18:49.721
straight into the code.  What we
need to do is create a class 

02:18:51.388 --> 02:18:53.659
that will facilitate taking 
images from the camera and 

02:18:53.660 --> 02:18:55.660
passing it to the face detector.

02:18:58.776 --> 02:19:00.396
So, I've already gone ahead and 
created a class called face 

02:19:00.397 --> 02:19:03.489
expression reader that does just
that.  This class has three main

02:19:03.490 --> 02:19:06.652
components.  It has the camera 
controller which controls access

02:19:06.653 --> 02:19:09.299
to the camera.  Then we have the
face detector which 

02:19:13.188 --> 02:19:15.188
runs ML models on images to 
detect faces.

02:19:16.442 --> 02:19:17.457
The last part is we have the 
init method which sets 

02:19:17.458 --> 02:19:19.952
everything up.  So, what we're 
going to do is we're 

02:19:23.680 --> 02:19:25.712
going to implement the init 
method.  What I love about 

02:19:25.713 --> 02:19:29.165
Flutter is how easy it is to get
started with the camera.  

02:19:29.166 --> 02:19:33.451
There's two lines.   The first 
one is the constructer, showing 

02:19:33.452 --> 02:19:36.539
we want access to the front 
camera.  The second one is we 

02:19:36.540 --> 02:19:39.197
show we want low resolution 
images.  And the second line is 

02:19:39.198 --> 02:19:42.469
we just initialize the camera.  
That's all that we need.  The 

02:19:42.470 --> 02:19:44.470
next step is initialize the 
detector. 

02:19:45.562 --> 02:19:49.022
And just like the camera, it's 
just as easy to set up.  All we 

02:19:49.023 --> 02:19:51.023
do is get an instance of face 

02:19:53.714 --> 02:19:55.714
detector from Firebase vision.

02:19:57.199 --> 02:19:59.684
However, the default face 
detector only looks at images, 

02:19:59.685 --> 02:20:01.685
but we want to set 

02:20:03.602 --> 02:20:05.602
it to read facial expressions.  
There we go.  Reformat.

02:20:08.746 --> 02:20:09.958
The options we're going to set 
so it can read facial 

02:20:09.959 --> 02:20:12.223
expressions.  Enable 
classification and have the 

02:20:13.868 --> 02:20:15.868
detector run in accurate mode.

02:20:17.352 --> 02:20:19.583
Last but not least, continuously
string bytes from the camera to 

02:20:19.584 --> 02:20:23.684
the detector.  And I've already 
gone ahead and created a helper 

02:20:23.685 --> 02:20:26.549
method to do just that.  So, in 
this method all we do is pass 

02:20:28.397 --> 02:20:30.397
the camera into the detector we 
just initialized.

02:20:32.074 --> 02:20:33.906
But also pass a method that 
updates the face expressions 

02:20:33.907 --> 02:20:38.250
reader every time question get a
new result face from an image.  

02:20:38.251 --> 02:20:41.125
So, we can actually take a quick
look at this helper method.  

02:20:41.126 --> 02:20:43.786
It's actually fairly short.  All
we really did is we called this 

02:20:46.021 --> 02:20:48.296
upcoming method called start 
byte stream on the camera.  

02:20:48.297 --> 02:20:50.162
Every time we get an image, we 
take this image.  We pass

02:20:50.163 --> 02:20:52.246
it to our detector.  And then 
after we get the results for 

02:20:56.516 --> 02:20:58.516
our detector, we update our face
expression reader.

02:21:00.591 --> 02:21:02.441
So, now that we've set all that 
up, let's go ahead and go to our

02:21:02.442 --> 02:21:08.192
main.dart.  We want to go down 
to sour state class.  So, I've 

02:21:08.193 --> 02:21:10.193
already gone ahead and  created 
an instance of the face 

02:21:11.650 --> 02:21:13.077
expression reader of the class 
we just implemented and I called

02:21:13.078 --> 02:21:15.078
it  reader.

02:21:16.159 --> 02:21:17.782
So, the very last thing we need 
to do to get this working is add

02:21:17.783 --> 02:21:21.844
a listener to the reader.  And 
here we go.

02:21:24.896 --> 02:21:26.896
Now with this listener, the face

02:21:27.967 --> 02:21:29.399
expression reader will update 
our avatar every time it gets a 

02:21:29.400 --> 02:21:31.400
new face.

02:21:33.886 --> 02:21:35.886
So, we're gonna go ahead and run
hot restart.

02:21:38.823 --> 02:21:39.863
And the reason we're going to 
run hot restart instead of hot 

02:21:39.864 --> 02:21:42.102
reload is because since we 
changed our init state method, 

02:21:44.123 --> 02:21:47.004
we want to rebuild the entire 
state of our class.  Let's see.

02:21:50.064 --> 02:21:52.064
I think it's already set up.

02:21:54.168 --> 02:21:56.168
There we go.

02:21:58.685 --> 02:22:02.178
There we go.
[ Applause ]

02:22:05.437 --> 02:22:07.287
So, not only can it just tell if
I'm smiling or not, we can 

02:22:07.288 --> 02:22:09.379
actually add a little bit more.

02:22:14.466 --> 02:22:17.524
So, we're going to go ahead and 
run another hot restart.  What 

02:22:17.525 --> 02:22:19.946
we did is that we have the -- 
we're going to update the eyes 

02:22:19.947 --> 02:22:21.947
and we're going to update the  
tilting of the head.

02:22:25.238 --> 02:22:27.697
So, if I hold this up to my face
again, close my eyes, tilt 

02:22:27.698 --> 02:22:29.960
right.  And left.
[ Applause ]

02:22:33.985 --> 02:22:38.173
It updates in real-time.  All 
right.  So, now that you've seen

02:22:38.174 --> 02:22:40.174
how easy it 

02:22:41.418 --> 02:22:43.078
is to use ML Kit,  hopefully 
you'll consider using it in your

02:22:43.079 --> 02:22:46.329
app as well.  Thanks, everyone.

02:22:49.336 --> 02:22:54.802
[ Applause ]
TIM: Thanks, Maurice!  So, as 

02:22:54.803 --> 02:22:57.048
Flutter is now at the point it's
starting to gain critical 

02:22:57.049 --> 02:22:59.928
momentum.
we're starting to see other 

02:22:59.929 --> 02:23:01.929
companies add direct support.

02:23:03.821 --> 02:23:05.238
As an example, today we're  
announcing a new partnership 

02:23:05.239 --> 02:23:07.239
that we think will 

02:23:08.776 --> 02:23:11.660
open Flutter to a new class of 
applications.  Mobile phones are

02:23:11.661 --> 02:23:15.124
increasingly being used for 
payments.  Both for digital and 

02:23:15.125 --> 02:23:19.400
physical goods.  Square are one 
of the pioneers of payment 

02:23:19.401 --> 02:23:21.401
services for retailers and 
consumers.

02:23:25.910 --> 02:23:27.910
And I'm delighted to

02:23:29.636 --> 02:23:31.636
introduce Ella Polo to the stage
to 

02:23:33.543 --> 02:23:35.589
tell us how you are using 
Flutter.

02:23:35.806 --> 02:23:37.692
ELLA: Thank you, Tim.  At 
Square, we believe the economy 

02:23:37.693 --> 02:23:41.157
is better when everyone has 
access.  No one should be left 

02:23:41.158 --> 02:23:45.871
out because the cost is too high
or the technology too complex.  

02:23:45.872 --> 02:23:48.311
We started with a little white 
reader that let millions of 

02:23:48.312 --> 02:23:51.372
merchants participate in the 
economy by makes it easy to take

02:23:51.373 --> 02:23:53.373
credit card payments with your 
smartphone.

02:23:54.838 --> 02:23:57.351
Since then, we've worked hard to
create an ecosystem of products 

02:23:57.352 --> 02:24:00.635
that empowers customers and our 
developer platform is a key 

02:24:00.636 --> 02:24:05.330
part.  Our multi-channel payment
includes APIs and SDKs that let 

02:24:05.331 --> 02:24:09.621
developers integrate payments 
into the apps they build.  

02:24:09.622 --> 02:24:11.622
Square takes care of the 
complexity of payments.

02:24:13.297 --> 02:24:14.922
In-person,  in-app and online so
a developers can just focus on 

02:24:14.923 --> 02:24:17.787
building great apps.  Now, we 
have been following Flutter 

02:24:20.263 --> 02:24:22.263
since the beta and we're 
impressed by 

02:24:23.530 --> 02:24:25.530
how it enables developers to 
quickly 

02:24:28.019 --> 02:24:30.019
create beautiful  cross-platform
apps.

02:24:31.076 --> 02:24:33.076
Today we have two new plugins.

02:24:34.546 --> 02:24:37.394
The Flutter plugin for the 
reader SDK and the in-app 

02:24:37.395 --> 02:24:39.395
payments SDK. 

02:24:41.097 --> 02:24:43.097
The reader S DK allows merchants
-- and 

02:24:45.588 --> 02:24:47.205
the in-app payments SDK lets 
them build consumer apps that 

02:24:47.206 --> 02:24:49.206
take payments directly from 
buyers.

02:24:51.938 --> 02:24:55.222
To see this in action, let's 
meet Collins Family Orchards.  

02:24:55.223 --> 02:24:58.071
They're a small business that 
runs on Square.  They're a 

02:24:58.072 --> 02:25:00.072
fourth generation family 

02:25:01.376 --> 02:25:02.205
farm growing a variety of 
organic fruits in eastern 

02:25:02.206 --> 02:25:05.138
Washington state.  Selling at 
farmers markets in the Seattle 

02:25:05.139 --> 02:25:07.789
area.  And they use a phone and 
a Square reader to take 

02:25:07.790 --> 02:25:10.910
payments.  Now, the Collins 
family was happy running on 

02:25:10.911 --> 02:25:14.619
Square.  But they wanted to 
build an app to accommodate the 

02:25:14.620 --> 02:25:17.466
specific needs of their growing 
business.  So, let's take a look

02:25:17.467 --> 02:25:20.817
at an app built specifically for
the Collins family using Flutter

02:25:20.818 --> 02:25:22.851
and the Flutter for Square 
reader SDK reader plugin.

02:25:26.116 --> 02:25:28.116
This app helps them take 
payments at 

02:25:31.000 --> 02:25:33.443
the farmers markets and has 
quick actions built in.  Can we 

02:25:33.444 --> 02:25:35.444
see the app?  It's on the right.

02:25:37.340 --> 02:25:38.999
It's branded for Collins Family 
Orchards and I'm going to sign  

02:25:39.000 --> 02:25:41.034
in.  And then choose the 
location that I'm selling

02:25:41.645 --> 02:25:44.121
at.  Say today I'm although a 
farmers 

02:25:48.640 --> 02:25:52.309
market in  Bellview.  Great.  
And enter the amount to charge. 

02:25:52.310 --> 02:25:54.383
The charge button is disabled.  
So, let's look at the code 

02:25:54.384 --> 02:25:56.645
really quick.  This is the on 
checkout function and 

02:26:00.769 --> 02:26:01.820
this uses the plugin for SDK 
Square reader for the check out 

02:26:01.821 --> 02:26:03.821
flow.

02:26:05.290 --> 02:26:07.553
It looks at parameters and 
determines the payment flow.  

02:26:07.554 --> 02:26:09.554
The amount of the transaction, 
but 

02:26:10.618 --> 02:26:13.289
whether we want to collect tips 
or show a receipt screen.  And 

02:26:13.290 --> 02:26:15.290
once we start the checkout flow 
you'll notice that there's no 

02:26:15.752 --> 02:26:17.774
configuration for the reader 
here.  And that's because once 

02:26:17.775 --> 02:26:19.775
we're in the 

02:26:21.069 --> 02:26:23.993
transaction, Square takes care 
of talking to the hardware.  

02:26:23.994 --> 02:26:25.994
This is really only the 
configuration you need.

02:26:28.083 --> 02:26:30.083
And nothing is calling this 
checkout function.

02:26:31.785 --> 02:26:33.785
For the live coding demo, we're 
going 

02:26:34.834 --> 02:26:37.083
to do the hot reload and check 
it to call.  And click start to 

02:26:37.084 --> 02:26:39.944
start the transaction.  Great.  
You're seeing the Square 

02:26:39.945 --> 02:26:45.887
checkout flow.  If I can find my
card.  We can see the reader?  

02:26:45.888 --> 02:26:47.888
Yes.

02:26:50.368 --> 02:26:50.553
And I'll insert my card to take 
the

02:26:50.554 --> 02:26:54.885
payment.  Great.  And the 
payment was accepted.  Now, when

02:26:54.886 --> 02:26:56.327
we look at the list of 
transactions for this location, 

02:26:56.328 --> 02:27:00.449
we can see the payment they just
took right there.

02:27:02.953 --> 02:27:05.826
[ Applause ]
As you can see, it's really easy

02:27:05.827 --> 02:27:10.926
to add  payments into your 
Flutter app with Square.  The 

02:27:10.927 --> 02:27:12.760
Flutter plugin for the Square 
SDK is available  today, and the

02:27:12.761 --> 02:27:15.219
Flutter plugin for the in-app  
payments is available for early 

02:27:15.220 --> 02:27:17.220
access.

02:27:18.879 --> 02:27:21.519
And you can read more about 
both.  And we're happy to be  

02:27:21.520 --> 02:27:24.811
partnering with Google on this 
and to see what we can do with 

02:27:24.812 --> 02:27:27.473
Flutter in the future.  Thank 
you.

02:27:28.906 --> 02:27:31.364
[ Applause ]
TIM: Thank you, Ella.  And thank

02:27:31.365 --> 02:27:36.456
you, Square.  So, the last part 
of the app life cycle we're 

02:27:36.457 --> 02:27:38.904
going to talk about is release. 
As you have been hearing 

02:27:38.905 --> 02:27:44.234
throughout the presentation, our
goal is to make Flutter the most

02:27:44.235 --> 02:27:46.900
productive way to build 
beautiful, fast experiences for 

02:27:46.901 --> 02:27:48.901
both iOS 

02:27:50.766 --> 02:27:53.207
and Android from a single 
codebase.  But when it comes to 

02:27:53.208 --> 02:27:58.111
continuous integration, 
continuous deployment, sometimes

02:27:58.112 --> 02:28:01.399
feels that we're still a little 
bit stuck in the olden  days.  

02:28:01.400 --> 02:28:04.086
It's just a little bit too hard 
sometimes to configure build and

02:28:04.087 --> 02:28:07.792
test tooling.  Particularly if 
you're trying to target both iOS

02:28:07.793 --> 02:28:09.793
and Android.

02:28:11.037 --> 02:28:13.702
Lots of knobs and switches and 
manual configuration.  Sometimes

02:28:13.703 --> 02:28:15.955
feels like being a phone 
operator in the 1950s.

02:28:20.297 --> 02:28:22.297
If only there was a build system
that understood Flutter.

02:28:25.196 --> 02:28:27.435
Well, turns out there's a 
company who has been doing that.

02:28:30.456 --> 02:28:35.424
Let me introduce Nevercode.

02:28:40.109 --> 02:28:40.309
TRIIN:  I'm so excited to be 
here and celebrate in Flutter 

02:28:40.310 --> 02:28:43.375
Live event with people here and 
online.  So, hey, people online!

02:28:49.362 --> 02:28:52.218
So, at Nevercode we have been 
building our continuous 

02:28:52.219 --> 02:28:54.250
integration and delivery product
for mobile developers and 

02:28:57.927 --> 02:28:59.927
companies such as Toyota, 
Walmart to name a few.

02:29:02.006 --> 02:29:04.243
And we have seen them struggle 
with setting up the whole 

02:29:04.244 --> 02:29:06.469
development process for iOS and 
Android separately.

02:29:09.557 --> 02:29:11.599
So, when we heard what Flutter 
does and how it actually changes

02:29:11.600 --> 02:29:16.691
the way how mobile apps are 
developed, we were convinced 

02:29:16.692 --> 02:29:18.692
that the whole CIDC experience 
needs to be reengineered.

02:29:22.019 --> 02:29:24.019
So, I'm  proudly presenting you 
our 

02:29:25.899 --> 02:29:28.386
brand new product:   Codemagic.
[ Applause ]

02:29:32.464 --> 02:29:34.545
So, I'm going to show you how it
works.  And I'm going to show 

02:29:34.546 --> 02:29:39.951
you easy it is to set up the 
whole pipeline to build your 

02:29:39.952 --> 02:29:41.952
Flutter apps on codemagic.

02:29:43.434 --> 02:29:46.082
So, actually the beauty starts 
already when you join with a 

02:29:46.083 --> 02:29:48.083
GitHub account.

02:29:49.569 --> 02:29:51.181
Because, you see, it 
automatically understands your 

02:29:51.182 --> 02:29:54.044
Flutter apps and  pulls them to 
codemagic.  And it's very easy.

02:29:57.927 --> 02:29:59.927
You just kick off the first 
build.  And voila.  It starts.

02:30:03.668 --> 02:30:06.323
You see the whole process here 
on one screen.  So, of course, 

02:30:06.324 --> 02:30:09.001
you know, normally you would 
have web hooks that trigger the 

02:30:12.484 --> 02:30:15.141
build from GitHub after each 
commit.  But the underlying 

02:30:15.142 --> 02:30:19.420
thought when we were building 
this product was that it needs 

02:30:19.421 --> 02:30:21.421
to be seamless, it needs to be 

02:30:23.760 --> 02:30:25.760
intuitive, so that even a person
with no 

02:30:26.821 --> 02:30:28.821
prior CI/CD experience can start
very, very quickly.

02:30:30.495 --> 02:30:32.940
So, just to demonstrate to you 
some of the, you know, the UI 

02:30:32.941 --> 02:30:36.206
that we have in mind.  For 
example, I'm taking this -- oh, 

02:30:37.634 --> 02:30:41.739
there's a huge lot -- okay.  
Here's a failed build.  Because 

02:30:41.740 --> 02:30:42.361
you want to know why things are 
failing

02:30:42.362 --> 02:30:44.362
sometimes.

02:30:45.423 --> 02:30:47.264
So, here you see that the build 
failed because it failed to 

02:30:47.265 --> 02:30:49.700
install dependencies.  And here 
you get more information like 

02:30:51.549 --> 02:30:53.549
what happened to make the next 
decisions.

02:30:56.258 --> 02:30:58.550
And then, if you want to 
configure your app more on 

02:30:58.551 --> 02:31:00.551
codemagic because, you 

02:31:01.616 --> 02:31:03.616
know, it's not just for 
hobbyists or freelancers.

02:31:05.522 --> 02:31:07.365
It's also for hardcore 
developers who maybe want to 

02:31:07.366 --> 02:31:09.366
experience a more 

02:31:11.697 --> 02:31:15.418
sophisticateed product.  So, you
just go to the app settings here

02:31:15.419 --> 02:31:17.419
you see, you know?

02:31:19.287 --> 02:31:21.120
Seems like just small steps, but
actually you can customize here 

02:31:21.121 --> 02:31:26.230
a lot.  For example, I have 
chosen that I only want to build

02:31:26.231 --> 02:31:31.543
the Android app.  And, for 
example, in publishing you can 

02:31:31.544 --> 02:31:33.544
publish automatically to Google 
Play 

02:31:36.846 --> 02:31:38.688
or Appear Store and out of the 
box integration with iOS and 

02:31:38.689 --> 02:31:40.689
Android.

02:31:41.787 --> 02:31:44.234
So, as I'm on Slack very often, 
of course, I want my 

02:31:44.235 --> 02:31:47.103
notification to end up in Slack 
channel.  So, I have chosen here

02:31:47.104 --> 02:31:52.464
that I want to know when the 
build starts when it fails.  Or 

02:31:52.465 --> 02:31:54.465
when the artifacts are 
published.  So,

02:31:57.209 --> 02:32:00.089
let's go see how far are we 
building this app currently?  

02:32:00.090 --> 02:32:03.593
Okay.  So, you see that it's 
currently building the Android 

02:32:03.594 --> 02:32:08.084
app.  And already you can open 
up the steps to see everything 

02:32:08.085 --> 02:32:10.085
what's going on here.

02:32:11.578 --> 02:32:13.415
So, it  gives you a lot of 
flexibility.  And another thing 

02:32:13.416 --> 02:32:15.416
that I also wanted 

02:32:16.677 --> 02:32:18.677
to mention that I kind of -- if 
I go 

02:32:21.369 --> 02:32:23.818
here to app settings -- is that 
you can also actually look at 

02:32:23.819 --> 02:32:27.487
the workflows according to the 
user groups.  Maybe you want to 

02:32:27.488 --> 02:32:30.965
have them to different people.  
To testers, beta testers, some 

02:32:30.966 --> 02:32:32.966
other team in your company.  
Okay.

02:32:35.893 --> 02:32:38.331
It shows that the build was 
successful.  So, I'm just going 

02:32:38.332 --> 02:32:42.014
to the build.  And here!  
Everything is green.  It's a 

02:32:42.015 --> 02:32:44.015
really nice green.

02:32:45.092 --> 02:32:47.843
So, I promised that they should 
be on Slack.  So, let's go check

02:32:47.844 --> 02:32:52.333
out my Slack channel.  And they 
are!  Great!  The artifacts are 

02:32:52.334 --> 02:32:56.013
actually here.
[ Applause ]

02:33:00.484 --> 02:33:02.484
So, you know, I'm convinced that
Flutter 

02:33:03.744 --> 02:33:05.974
plus codemagic is the fastest 
road to get your apps to the 

02:33:05.975 --> 02:33:08.893
hands of your end users.  So I 
invite everyone to join and sign

02:33:10.933 --> 02:33:15.044
up at codemagic.io.  It's free. 
It's live now.  You can just go 

02:33:15.045 --> 02:33:20.020
crazy.  And then you can also 
join our Slack channel where all

02:33:20.021 --> 02:33:22.021
the other Flutter fans are and 
just share your experience, 

02:33:22.257 --> 02:33:25.330
learn from others.  So, I think 
it will be awesome.  Thank you.

02:33:30.380 --> 02:33:34.781
[ Applause ]
TIM: Thank you so much.  We're 

02:33:34.782 --> 02:33:36.696
so excited that codemagic is 
working with us here and we hope

02:33:36.697 --> 02:33:42.410
you'll all try it out with your 
own Flutter projects.   Okay.  

02:33:42.411 --> 02:33:45.280
We've covered the four things.  
We're nearing the end of the 

02:33:45.688 --> 02:33:49.400
presentation.  Which is a 
perfect time to look a little 

02:33:49.401 --> 02:33:53.076
beyond Flutter 1.0.  Hopefully 
you've now seen how Flutter 

02:33:56.601 --> 02:33:59.050
is beautiful, fast, productive 
and open.  You've seen how 

02:33:59.051 --> 02:34:02.952
designers and developers can 
collaborate to build native 

02:34:02.953 --> 02:34:04.953
mobile apps.

02:34:06.217 --> 02:34:07.458
You've seen how the ecosystem 
extends Flutter with plugins 

02:34:07.459 --> 02:34:09.459
from companies like Square.

02:34:13.599 --> 02:34:16.445
And you've seen tools like 
2Dimension's Flare that amplify 

02:34:16.446 --> 02:34:18.446
the power of Flutter.  But we're
not quite done.

02:34:22.363 --> 02:34:27.077
Flutter was not conceived as an 
SDK for iOS and Android.  Our 

02:34:27.078 --> 02:34:29.935
vision for Flutter is to be a 
portable UI toolkit that can go 

02:34:29.936 --> 02:34:31.936
wherever 

02:34:33.256 --> 02:34:35.732
you need to paint pixels.  The 
Flutter engine is inherently  

02:34:37.579 --> 02:34:39.626
cross-platform and it can be 
embedded in all kinds of 

02:34:39.627 --> 02:34:42.054
hardware.  Just last week, we 
shared an example 

02:34:45.931 --> 02:34:47.931
of porting Flutter to run on
Raspberry Pi.

02:34:50.672 --> 02:34:52.672
Running directly on the broad 
com 

02:34:53.766 --> 02:34:56.234
hardware rather than an 
intermediary layer like Linux or

02:34:56.235 --> 02:34:59.713
X11.  We believe Flutter is a 
useful building block for these 

02:34:59.714 --> 02:35:03.842
kinds of embedded scenarios.  
And perhaps in the future, we'll

02:35:03.843 --> 02:35:06.106
see Flutter powering things like
automotive 

02:35:09.831 --> 02:35:12.096
displays or other IoT kinds of 
devices.  Another very practical

02:35:12.097 --> 02:35:16.436
example of how we are already 
going beyond mobile is Flutter 

02:35:16.437 --> 02:35:18.437
desktop embedding.

02:35:19.951 --> 02:35:21.996
This is an open source project 
that enables Flutter apps to run

02:35:21.997 --> 02:35:24.853
on Mac, Linux and Windows.  We 
have been working on Flutter 

02:35:26.702 --> 02:35:28.781
desktop embedding in the open 
for a few months now.  And we're

02:35:28.782 --> 02:35:33.717
pretty happy with how it's 
coming on together.  This lets 

02:35:33.718 --> 02:35:36.362
you do things like take your 
basic starter application that 

02:35:36.363 --> 02:35:39.482
you get when you create a 
Flutter project and run it on a 

02:35:39.483 --> 02:35:41.721
Mac.  So, like here's the -- 
here's the 

02:35:44.821 --> 02:35:46.885
usual app here and you can 
imagine, you know, you can plus 

02:35:46.886 --> 02:35:49.732
and see how the number 
increments.  And in fact, when 

02:35:49.733 --> 02:35:52.220
we were putting this 
presentation together, we were 

02:35:52.221 --> 02:35:54.270
thinking,
how could we make our slides as 

02:35:55.282 --> 02:35:57.282
beautiful as possible?

02:35:58.347 --> 02:36:01.619
So, we built the entire 
presentation in Flutter.

02:36:05.041 --> 02:36:07.041
[ Applause ]

02:36:13.040 --> 02:36:16.314
Everything you've seen so far 
has been run on the Mac 

02:36:16.315 --> 02:36:18.546
implementation of Flutter.  The 
app has been built by a company 

02:36:22.770 --> 02:36:24.770
called Very Good 

02:36:26.756 --> 02:36:28.591
ventures, a New York-based 
studio who focus on developing 

02:36:28.592 --> 02:36:30.592
beautiful Flutter experiences.

02:36:32.889 --> 02:36:34.889
We plan to open source this 
software soon.

02:36:40.686 --> 02:36:42.686
But that's not all.

02:36:44.212 --> 02:36:46.041
There's one other place we would
like to go with Flutter that 

02:36:46.042 --> 02:36:50.305
really demonstrates the ground 
breaking potential of this 

02:36:50.306 --> 02:36:52.981
technology.  And you know, 
before I get there, I 

02:36:56.422 --> 02:36:58.422
have to take a moment --
[ Laughter ]

02:36:59.733 --> 02:37:01.733
To talk about Dart.  Because as 
well as being a really 

02:37:04.839 --> 02:37:07.106
well-designed language, it's a 
versatile platform for Flutter.

02:37:13.035 --> 02:37:15.035
Dart doesn't just compile to 
native 

02:37:16.758 --> 02:37:18.610
ARM code, but also compiles to 
tight, production-ready 

02:37:18.611 --> 02:37:20.611
JavaScript code.

02:37:22.095 --> 02:37:23.737
So, I want to give you an early 
glimpse of something we're 

02:37:23.738 --> 02:37:25.738
working on in the labs.

02:37:27.618 --> 02:37:29.618
To be clear, this is a 
technology preview.

02:37:31.503 --> 02:37:34.400
We're not shipping any code 
today.  We're calling this 

02:37:34.401 --> 02:37:36.401
Hummingbird.

02:37:38.723 --> 02:37:40.723
And it's a port of Flutter that 
runs 

02:37:42.581 --> 02:37:44.581
on the modern, standards-based  
web.

02:37:45.067 --> 02:37:47.067
[ Applause ]

02:37:55.711 --> 02:37:58.189
I'm going to show you a little 
demo of Hummingbird now.  Here's

02:37:58.190 --> 02:38:00.840
a simple mobile app that we have
been running on an Android 

02:38:00.841 --> 02:38:02.841
tablet.

02:38:04.711 --> 02:38:07.155
It's an implementation of the 
15-tile sliding puzzle that I 

02:38:07.156 --> 02:38:10.817
suspect we all know pretty well.
You know, I can move tiles 

02:38:10.818 --> 02:38:14.526
around, and I can auto-play it. 
We've done the usual Flutter 

02:38:14.527 --> 02:38:18.192
things.  We've added a little 
bit of styling to it to make it 

02:38:18.193 --> 02:38:20.193
look beautiful and so on and so 
forth.

02:38:22.460 --> 02:38:24.460
But I'm gonna open Chrome.  And 
browse to this page.

02:38:27.763 --> 02:38:30.422
And everything you're seeing 
here is Flutter running on the 

02:38:30.423 --> 02:38:32.423
desktop web browser.

02:38:34.512 --> 02:38:36.533
Everything you're seeing here.

02:38:39.560 --> 02:38:41.560
[ Applause ]

02:38:42.647 --> 02:38:44.647
everything you're seeing here is

02:38:45.742 --> 02:38:49.616
standards-based content, HTML, 
DOM, Canvas, JavaScript.  

02:38:49.617 --> 02:38:50.835
There's no black box here 
anymore than any other web 

02:38:50.836 --> 02:38:53.694
content.  Importantly, it's the 
same Flutter 

02:38:56.964 --> 02:38:58.602
code running in this browser as 
on the  phone.  We haven't had 

02:38:58.603 --> 02:39:03.067
to change the code to get it to 
run here.  We've still got some 

02:39:03.068 --> 02:39:05.068
optimization work to do, but you
can see that we're 

02:39:07.605 --> 02:39:09.830
getting 60 frames per second for
this scenario across the current

02:39:09.831 --> 02:39:12.084
generation of devices.  And 
because this is the web, I can 

02:39:14.351 --> 02:39:16.002
even turn it into a PWA if I 
want to.  Thanks to the great 

02:39:16.003 --> 02:39:21.343
work from the Chrome team.  So, 
that's  Hummingbird.  What do 

02:39:21.344 --> 02:39:23.400
you think?

02:39:26.410 --> 02:39:28.410
[ Applause ]

02:39:36.918 --> 02:39:41.197
Again, this is early days for 
this  experimental product.  Our

02:39:41.198 --> 02:39:44.051
hummingbird, you might say, is 
still learning to fly.  In the 

02:39:44.052 --> 02:39:46.085
meantime, we're publishing right
now a blog article that 

02:39:46.086 --> 02:39:48.086
describes 

02:39:49.162 --> 02:39:51.849
more of the technical details 
behind Hummingbird.  And we'll 

02:39:51.850 --> 02:39:53.850
have much more to share at 

02:39:54.926 --> 02:39:56.926
next year's Google I/O 
conference.

02:39:59.834 --> 02:40:01.834
So, portable, high-quality UI 
has been 

02:40:04.112 --> 02:40:06.351
the Holy Grail for frontend 
developers for decades.  And 

02:40:06.352 --> 02:40:08.352
over the course of the last hour

02:40:09.840 --> 02:40:11.734
or so, I hope you have seen why 
we think Flutter has the 

02:40:11.735 --> 02:40:16.823
potential to transform how all 
manner of UIs are built.  This 

02:40:16.824 --> 02:40:19.485
is not just about iOS and 
Android.  This is about building

02:40:19.486 --> 02:40:21.486
beautiful user 

02:40:22.563 --> 02:40:24.563
experiences on any platform.  
We're excited about our mission.

02:40:26.891 --> 02:40:28.891
And we hope you are too.

02:40:30.172 --> 02:40:32.172
So, to close, I want to 
introduce you 

02:40:33.637 --> 02:40:34.244
to someone whose played a 
pivotal role in the Flutter 

02:40:34.245 --> 02:40:36.245
project.

02:40:38.366 --> 02:40:39.986
Eric Seidel is one of the 
cofounders of the Flutter 

02:40:39.987 --> 02:40:41.826
project and he's going to end 
this presentation with a few 

02:40:41.827 --> 02:40:43.827
final thoughts.  Eric,

02:40:46.721 --> 02:40:48.721
thank you so much.

02:40:49.977 --> 02:40:51.977
ERIC:  Thank you, Tim.
[ Applause ]

02:40:53.230 --> 02:40:55.069
A couple of my colleagues and I 
started this project at Google 

02:40:55.070 --> 02:40:57.506
over four years ago.  We just  
wanted to make development 

02:40:57.704 --> 02:41:02.222
better.  We wanted to make user 
experiences better.  And these 

02:41:02.223 --> 02:41:04.489
are themes that many of us had 
worked on for years as part of 

02:41:04.490 --> 02:41:08.603
the Chrome project.  But we felt
that within the 

02:41:11.847 --> 02:41:13.847
constraints of the web, we 
couldn't get there fast enough.

02:41:16.166 --> 02:41:18.202
So, we started experiments to 
see if we could make something 

02:41:18.203 --> 02:41:20.203
radically better 

02:41:22.940 --> 02:41:26.445
for both users and all the teams
that develop for them.  Those 

02:41:26.446 --> 02:41:28.446
experiments became Flutter.

02:41:30.338 --> 02:41:32.377
So, how we got here was a bit 
interesting.  It took a little 

02:41:32.378 --> 02:41:35.280
while.  But we felt a radical 
approach was required.

02:41:38.356 --> 02:41:40.827
If we were gonna break from 
existing systems and build a 

02:41:40.828 --> 02:41:43.751
whole new way to develop, we 
knew that was gonna take a long 

02:41:43.752 --> 02:41:45.752
time.

02:41:47.639 --> 02:41:49.639
But we saw this as an important 
long-term investment.

02:41:52.775 --> 02:41:54.775
Not just for my team, but also 
for Google.

02:41:56.019 --> 02:41:59.541
So, as we were starting, we 
talked to lots of developers.  

02:41:59.542 --> 02:42:00.979
We sat down and made many, many 
lists of problems that we heard 

02:42:00.980 --> 02:42:04.031
and
wanted to solve.  I think it's 

02:42:04.032 --> 02:42:06.032
worth looking back at 

02:42:08.133 --> 02:42:10.133
least the four big areas that we
set out to solve.

02:42:11.819 --> 02:42:13.678
And you've heard some about 
these today.  So, the first was 

02:42:13.679 --> 02:42:15.679
that we wanted to 

02:42:16.948 --> 02:42:18.794
make it easy to build beautiful 
things.  And because, again, 

02:42:18.795 --> 02:42:20.795
this was a 

02:42:22.042 --> 02:42:24.497
long-term bet, Flutter had to 
make it easy not just to make 

02:42:24.498 --> 02:42:27.163
the most beautiful things 
available today, but also had to

02:42:29.625 --> 02:42:31.874
be flexible enough and powerful 
enough to build the most 

02:42:31.875 --> 02:42:34.135
beautiful things being designed 
for tomorrow.

02:42:37.841 --> 02:42:39.841
The second was that we wanted to
make 

02:42:42.412 --> 02:42:44.412
it easy to produce consistent, 
reliable performance.

02:42:45.884 --> 02:42:47.714
We saw developers struggle with 
this consistently on other 

02:42:47.715 --> 02:42:50.607
platforms.  And we wanted to 
make it easy to 

02:42:54.074 --> 02:42:56.932
deliver a really smooth 
experience at 60 frames a 

02:42:56.933 --> 02:42:58.933
second, 120 frames a second, 240
frames a second.

02:43:01.857 --> 02:43:03.857
Whatever the underlying device 
could do.

02:43:06.141 --> 02:43:07.790
Third, we really wanted to 
improve the developer 

02:43:07.791 --> 02:43:10.663
experience.  Developer 
productivity has, you know, 

02:43:14.167 --> 02:43:16.025
again if we were making a 
long-term bet, developer 

02:43:16.026 --> 02:43:18.479
long-term productivity had to
be at least as good as the best 

02:43:19.100 --> 02:43:23.803
available that day.  And so far,
honestly, we've far exceeded my 

02:43:23.804 --> 02:43:25.804
expectations with now 

02:43:28.532 --> 02:43:31.172
sub-second state stateful hot 
reload.  And fourth, we needed 

02:43:31.173 --> 02:43:34.457
to build a thing that could go 
wherever Google needed it to go.

02:43:35.900 --> 02:43:37.900
It had to be open.  It had to be
extensible.

02:43:40.608 --> 02:43:42.434
It had to be flexible to go to 
all the places and all the 

02:43:42.435 --> 02:43:46.757
devices.  Running all the 
hardware, the software.  All the

02:43:46.758 --> 02:43:48.758
crazy things that Google was 

02:43:50.238 --> 02:43:52.238
building then and is building 
now.

02:43:53.522 --> 02:43:55.522
We spent many, many months 
working 

02:43:58.017 --> 02:44:00.515
with a few brave early  
customers.  And many times in 

02:44:00.516 --> 02:44:02.516
response to customer 

02:44:03.601 --> 02:44:05.601
needs, we rewrote large swaths 
of the system.

02:44:07.052 --> 02:44:09.052
But we always kept our eyes on 
these long-term goals.

02:44:11.011 --> 02:44:12.266
In the end, it was a lot of 
effort.  Still is a lot of 

02:44:12.267 --> 02:44:17.877
effort.  But I think the results
speak for themselves.  The many 

02:44:17.878 --> 02:44:21.551
apps that we've shipped, or that
we've seen shipped, rather.  The

02:44:21.552 --> 02:44:24.016
success stories we've heard.  
Continue to tell me that we 

02:44:24.017 --> 02:44:26.251
focused on the right areas and 
are getting

02:44:29.298 --> 02:44:31.298
good results.  Which brings us 
all to today.

02:44:36.107 --> 02:44:38.107
So, this, today, our 
announcement of 1.

02:44:40.790 --> 02:44:42.216
0 is obviously a major milestone
for the project and for the 

02:44:42.217 --> 02:44:44.217
community and for 

02:44:45.490 --> 02:44:49.402
the many teams who have worked 
for years to get us here.  You 

02:44:49.403 --> 02:44:51.837
saw today how Flutter is already
enabling developers all over the

02:44:51.838 --> 02:44:55.293
world to deliver beautiful apps 
to hundreds of millions of 

02:44:55.294 --> 02:44:57.294
people throughout the globe.

02:44:58.555 --> 02:45:00.555
But this is also just the 
beginning.

02:45:02.220 --> 02:45:04.707
Flutter is Google's portable UI 
toolkit.  It is highly portable 

02:45:04.708 --> 02:45:09.824
and already works on many form 
factors beyond phones.  You saw 

02:45:09.825 --> 02:45:13.077
it used today on desktops for 
our slides.  You may have seen 

02:45:13.078 --> 02:45:15.078
some of the many articles 
floating around the Internet of 

02:45:16.346 --> 02:45:19.221
people taking Flutter and 
running it on gigantic things or

02:45:19.222 --> 02:45:21.222
little tiny things.

02:45:24.097 --> 02:45:25.751
And you even saw today some of 
our experiments of running 

02:45:25.752 --> 02:45:28.875
Flutter on the web.  So, if I 
look forward a few years, I 

02:45:32.157 --> 02:45:34.795
see Flutter running in a ton 
more places.  So, finally, and 

02:45:34.796 --> 02:45:36.796
really the whole 

02:45:38.503 --> 02:45:40.775
reason why I'm up here, is to 
say a big thank you.

02:45:43.779 --> 02:45:45.779
[ Applause ]

02:46:02.486 --> 02:46:04.933
I want to say personally thank 
you to so many for working with 

02:46:04.934 --> 02:46:07.803
us for so long to get here.  
Particularly those who tried 

02:46:07.804 --> 02:46:10.050
Flutter.  Some of you bet on 
Flutter very early 

02:46:13.720 --> 02:46:16.197
on before it even was  called 
Flutter.  I also want to say, 

02:46:16.198 --> 02:46:21.120
thank you for all the hundreds 
of suggestions and bug reports 

02:46:21.121 --> 02:46:23.121
that this community receives 

02:46:24.620 --> 02:46:27.294
every month from those 
listening.  And finally, of 

02:46:27.295 --> 02:46:30.822
course, thank you to those 
tuning in.  Whether via one of 

02:46:30.823 --> 02:46:32.823
our -- I think it's over 150 
now?

02:46:34.683 --> 02:46:36.683
Viewing parties around the  
globe.

02:46:37.782 --> 02:46:39.782
Via Tweeter, via the livestream.

02:46:41.127 --> 02:46:42.970
And, of course, to all of you 
here in person.  So, thank you 

02:46:42.971 --> 02:46:47.863
for taking time out of your day 
to celebrate with  us.  And 

02:46:47.864 --> 02:46:49.087
fittingly, we're gonna close 
today's presentation not with 

02:46:49.088 --> 02:46:54.826
us.  But with you.  Flutter has 
always been and always will be a

02:46:54.827 --> 02:46:59.318
community effort.  Built 
together in the open.  No one 

02:46:59.319 --> 02:47:02.035
company or one team can reach 
all of the places we want 

02:47:02.036 --> 02:47:04.287
Flutter to go.  So, we close 
with our hats off to that 

02:47:04.505 --> 02:47:06.505
community.  The stories like 
we're

02:47:08.418 --> 02:47:11.104
about to show you give us the 
motivation to continue each day 

02:47:11.105 --> 02:47:14.173
in this mission.  Thank you.

02:47:17.374 --> 02:47:19.374
[ Applause ]

02:47:20.573 --> 02:47:24.053
&gt;&gt; I'm a software engineer, born
in Bulgaria.

02:47:26.132 --> 02:47:28.132
&gt;&gt; A developer based in Berlin.
&gt;&gt; I'm a Flutter developer.

02:47:28.791 --> 02:47:31.438
&gt;&gt; I am a web developer.
&gt;&gt; I'm an Android engineer from 

02:47:31.439 --> 02:47:34.780
China.
&gt;&gt; I'm from Chicago, Illinois.

02:47:34.982 --> 02:47:38.057
&gt;&gt; From Lima, Peru.
&gt;&gt; I'm in Denver, Colorado.

02:47:40.726 --> 02:47:42.172
&gt;&gt; Flutter has changed the way I
develop really because of the 

02:47:42.173 --> 02:47:45.651
fact that I've never really 
developed with a bird by my side

02:47:45.652 --> 02:47:49.354
all the time.: Flutter changed a
lot of things in our lives.  

02:47:49.355 --> 02:47:51.355
First of all, it changed the way
that we code.

02:47:51.834 --> 02:47:53.834
&gt;&gt; I fell in love with Flutter 
from the 

02:47:54.916 --> 02:47:57.570
very first time I saw Emily live
coding the meme chat app on 

02:47:57.571 --> 02:47:59.821
Google I/O.
&gt;&gt; And build an app in a single 

02:47:59.822 --> 02:48:01.822
day.

02:48:03.486 --> 02:48:05.486
&gt;&gt; Our company currently works 
on five Flutter projects.

02:48:06.174 --> 02:48:08.222
&gt;&gt; With Flutter I don't have to 
go online and check the docs 

02:48:08.223 --> 02:48:12.567
anymore.  The way it's 
structured makes it easy to jump

02:48:12.568 --> 02:48:14.568
into the definition underneath 
things.

02:48:15.042 --> 02:48:17.497
&gt;&gt; I switched to Flutter from 
JavaScript and PHP having 

02:48:17.498 --> 02:48:19.498
strictly typed code, it's a game
changer.

02:48:20.619 --> 02:48:21.620
&gt;&gt; My favorite fact about 
Flutter, it doesn't limit your 

02:48:21.621 --> 02:48:23.888
imagination.
&gt;&gt; I love with Flutter you can 

02:48:23.889 --> 02:48:26.565
edit the UI code and 
simultaneously preview the 

02:48:28.218 --> 02:48:30.218
changes both on Android and iOS.

02:48:32.128 --> 02:48:34.128
&gt;&gt; The UI page developed by 
Flutter is very smooth.

02:48:36.414 --> 02:48:38.414
Especially on low-end machines.

02:48:40.509 --> 02:48:42.509
&gt;&gt; Flutter helps me.

02:48:44.608 --> 02:48:46.608
&gt;&gt; This year we decided to make 
an app from Flutter.

02:48:47.455 --> 02:48:51.564
&gt;&gt; We're using Flutter to 
rebuild our native mobile apps. 

02:48:51.565 --> 02:48:53.565
Three code bases down to two.

02:48:55.282 --> 02:48:57.282
&gt;&gt; With Flutter, it's been easy 
to bring my ideas to life.

02:48:58.579 --> 02:49:00.619
&gt;&gt; One thing I didn't have 
experience with, mobile app 

02:49:00.620 --> 02:49:04.745
development.  Now is as good a 
time as any.  I'm building my 

02:49:04.746 --> 02:49:06.746
own mobile app and I'm doing it 
with Flutter.

02:49:09.084 --> 02:49:10.116
&gt;&gt; I've open sourced three 
Flutter applications on GitHub.

02:49:10.117 --> 02:49:13.402
&gt;&gt; These animations are entirely
by Flutter.

02:49:15.282 --> 02:49:16.903
&gt;&gt; I like widgets and I like how
it allows me to build apps 

02:49:16.904 --> 02:49:18.904
quickly.

02:49:20.602 --> 02:49:21.820
&gt;&gt; You can quickly turn your 
ideas into real applications.

02:49:25.364 --> 02:49:27.389
&gt;&gt; I really like the Firebase 
integration because I usually 

02:49:27.390 --> 02:49:29.390
use 

02:49:30.457 --> 02:49:32.457
Firebase for my projects and 
it's 

02:49:35.193 --> 02:49:37.193
super-easy to get started with 
Flutter.

02:49:38.655 --> 02:49:40.282
&gt;&gt; I really, really enjoy the 
community  engagement on Twitter

02:49:40.283 --> 02:49:43.984
as well as on GitHub.
&gt;&gt; That took us almost 16 months

02:49:43.985 --> 02:49:47.043
to create an iOS app has taken 
less than four months in 

02:49:47.044 --> 02:49:49.044
Flutter.

02:49:50.798 --> 02:49:52.611
&gt;&gt; One of my favorite things 
about the Flutter community is 

02:49:52.612 --> 02:49:54.612
you can find examples about 
everything.

02:49:55.075 --> 02:49:57.128
&gt;&gt; My favorite part about 
Flutter is that it makes me much

02:49:57.129 --> 02:49:59.129
more productive.

02:50:00.555 --> 02:50:03.705
&gt;&gt; The thing that excites me 
most about Flutter and the 

02:50:03.706 --> 02:50:06.361
Flutter community has to be the 
support from the development 

02:50:06.362 --> 02:50:08.394
team and from the community of 
developers.

02:50:11.407 --> 02:50:16.841
&gt;&gt; The amazing productivity it 
enables.  In months what took 

02:50:16.842 --> 02:50:20.106
years.
&gt;&gt; And I'm part of the developer

02:50:20.302 --> 02:50:22.977
community.
&gt;&gt; With Flutter, I spend less 

02:50:22.978 --> 02:50:25.037
time compiling and more time 
styling.

02:50:26.869 --> 02:50:28.139
&gt;&gt; That is my Flutter 
development story.

02:50:28.140 --> 02:50:30.140
&gt;&gt; That's my Flutter story.
&gt;&gt; And this is my Flutter story.

02:50:30.166 --> 02:50:32.216
&gt;&gt; Flutter!

02:50:41.226 --> 02:50:42.871
Andrew:  Hey, everybody, I'm 
Andrew.

02:50:42.872 --> 02:50:44.872
ask Flutter post show.  Thank 
you for that introduction and 

02:50:46.186 --> 02:50:48.014
thank you for being here with us
tonight.  It's true that 

02:50:48.015 --> 02:50:50.015
Google's putting a lot of effort
into the developments that you 

02:50:51.923 --> 02:50:53.958
have just heard about, Flutter 
is an open source project and 

02:50:53.959 --> 02:50:56.813
created and supported by an 
entire community of SDK 

02:50:58.232 --> 02:51:00.297
developers, YouTube creators and
more.  And by choosing to join 

02:51:00.298 --> 02:51:02.520
us tonight, you're now part of 
that community.  And we want to 

02:51:02.521 --> 02:51:07.842
hear your voice.  So, for the 
next hour or so, we're answering

02:51:07.843 --> 02:51:10.088
your questions live right here. 
You can post them in the YouTube

02:51:12.772 --> 02:51:14.825
livestream comments or Tweet 
using the ask Flutter hashtag 

02:51:14.826 --> 02:51:18.276
and we'll get to as many as we 
can.  You're working the 

02:51:18.277 --> 02:51:23.991
screens.  You have questions?
&gt;&gt; Yes, a ton of questions.  

02:51:23.992 --> 02:51:26.505
We're getting about 2 per 
second.  Down from the high of 

02:51:26.506 --> 02:51:28.506
about 7 per second.
&gt;&gt; Okay.

02:51:29.142 --> 02:51:29.752
&gt;&gt; We're getting a lot of 
Tweets.

02:51:29.753 --> 02:51:31.753
&gt;&gt; Cool.

02:51:32.877 --> 02:51:34.900
We also have a few drop-in 
guests lined up from the Flutter

02:51:34.901 --> 02:51:37.828
engineering team and coming to 
you from the crowd at Flutter 

02:51:37.829 --> 02:51:39.829
Live.

02:51:41.081 --> 02:51:42.976
If you ask a question I can't 
handle, we'll find someone who 

02:51:42.977 --> 02:51:45.023
can and get them up here and 
answer them together.  Ready to 

02:51:45.024 --> 02:51:48.327
go?
&gt;&gt; Start with an obvious one.  

02:51:48.328 --> 02:51:50.605
We have been  getting a lot of 
questions.  Even before the 

02:51:50.606 --> 02:51:54.474
keynote we were getting so many 
people asking us when are Maps 

02:51:54.475 --> 02:51:55.286
going to be available on 
Flutter?

02:51:55.287 --> 02:51:57.287
&gt;&gt; Okay.

02:51:58.767 --> 02:52:00.767
&gt;&gt; Now we already have the 
answer to that question.

02:52:03.232 --> 02:52:05.692
But go into it a little bit 
deeper.  Can you give us a demo 

02:52:05.693 --> 02:52:09.579
how Maps are working on Flutter?
&gt;&gt; Full disclosure.  We figured 

02:52:09.580 --> 02:52:12.218
this was definitely coming.  
I've got some stuff on my  

02:52:12.219 --> 02:52:16.575
laptop.  Real quick, let's take 
a look at the code.  One of the 

02:52:16.576 --> 02:52:18.576
nice things, Flutter is 
completely open source.

02:52:21.464 --> 02:52:23.755
The SDK, the tools, the language
is open source.  And the plugins

02:52:23.756 --> 02:52:28.482
are too.  Let's go to our 
plugins repo.  So, this is 

02:52:28.483 --> 02:52:30.483
Flutter/plugins.  Got it up on 
my laptop.

02:52:33.997 --> 02:52:35.854
And if you go in here, see a 
bunch of the packages that the 

02:52:35.855 --> 02:52:39.138
team is maintaining and building
out.  Battery, camera, 

02:52:39.139 --> 02:52:41.139
connectivity and things.

02:52:42.655 --> 02:52:45.728
And way down here we have Google
Maps for Flutter.  And so, if 

02:52:45.729 --> 02:52:48.376
you're ever curious about this 
codebase, what can maps do right

02:52:48.377 --> 02:52:51.032
now?  Where is it going?  This 
is a great place to go check 

02:52:51.033 --> 02:52:53.033
out.

02:52:55.322 --> 02:52:57.583
So, we have the directly, the 
imports.  This has the Google 

02:52:57.584 --> 02:53:02.935
Map widget.  This is Flutter, 
everything's a widget.  It has 

02:53:02.936 --> 02:53:04.993
the Map controller and other 
things.  And the Android and iOS

02:53:04.994 --> 02:53:06.994
sort of bridge 

02:53:08.239 --> 02:53:09.282
that goes from Dart into the 
Google Maps SDKs for Android and

02:53:09.283 --> 02:53:11.731
iOS.  And let's see what code
I've got here.

02:53:17.247 --> 02:53:19.598
So, here we have our DevRel 
sample for Maps.

02:53:23.065 --> 02:53:25.512
This was done by our talented 
Kenzie up at our Portland 

02:53:25.513 --> 02:53:27.513
office, you know well.

02:53:28.822 --> 02:53:30.822
And this is up in the 
Flutter/samples repo.

02:53:32.686 --> 02:53:34.104
That's what DevRel uses for 
samples.  All this code you can 

02:53:34.105 --> 02:53:36.574
get right now.  And let's take a
look at this app.

02:53:39.689 --> 02:53:42.140
This is using the Google Map 
widget.  And it does the things 

02:53:42.141 --> 02:53:45.815
you expect a Google Map to do.  
You can pan around, zoom in, 

02:53:45.816 --> 02:53:48.497
places she's added to the map 
and a couple sets.  And you can 

02:53:48.498 --> 02:53:50.498
see if I switch between 

02:53:52.190 --> 02:53:53.839
them, the map automatically 
zooms out just like you would 

02:53:53.840 --> 02:53:55.840
expect.

02:53:58.581 --> 02:54:00.581
I can go in and switch terrain 
types.

02:54:01.640 --> 02:54:03.640
Street view to satellite.

02:54:04.735 --> 02:54:06.999
Topographic if you want to know 
where the mountains are.  And 

02:54:07.000 --> 02:54:10.084
turn it off.  And street view.  
And I'm clicking on the buttons 

02:54:10.085 --> 02:54:12.085
on the 

02:54:13.210 --> 02:54:16.901
map that you wouldn't normally 
see on the Google Map.  They're 

02:54:16.902 --> 02:54:19.380
Flutter widgets.  She added on 
top using a stack.

02:54:22.042 --> 02:54:23.262
&gt;&gt; So, the Map widget, just a 
widget like any other widget.

02:54:23.263 --> 02:54:26.939
&gt;&gt; It's just a widget, doing 
things under the hood, but still

02:54:26.940 --> 02:54:28.940
just a widget.

02:54:30.609 --> 02:54:34.092
In the demo that Filip did, 
threw it into a transform.  His 

02:54:34.093 --> 02:54:35.935
Map was tilted like this.  You 
can play with them just like 

02:54:35.936 --> 02:54:38.636
that.  Speaking of playing with 
it, let's ask a little bit.

02:54:41.083 --> 02:54:43.083
&gt;&gt; I wanted to ask, how hard is 
it to add Maps to your app?

02:54:44.173 --> 02:54:46.411
&gt;&gt; A good way to answer that we 
would be just to blow away this 

02:54:46.412 --> 02:54:48.460
entire app.
&gt;&gt; Okay.  Let's kill it.

02:54:50.117 --> 02:54:54.009
&gt;&gt; This is home.  Let's -- I'm 
going to replace everything in 

02:54:54.010 --> 02:54:59.789
the app with just a Google Map.
Let try that.  Here is the 

02:54:59.790 --> 02:55:05.096
Google Map widget.  And the map,
constructer takes a single 

02:55:05.097 --> 02:55:06.548
parameter which is on map 
created.  And this is a 

02:55:06.549 --> 02:55:08.549
callback.

02:55:09.819 --> 02:55:12.105
So interact with the map, you 
use the Google Map controller.  

02:55:12.106 --> 02:55:15.349
The controller pattern you may 
have seen elsewhere in Flutter. 

02:55:15.350 --> 02:55:17.047
The text fields and some of the 
inputs.  This is how you 

02:55:17.048 --> 02:55:20.929
interact with it, you know, 
change its behavior.  So, it has

02:55:20.930 --> 02:55:23.992
a little callback that will give
you the controller.  And so, I'm

02:55:23.993 --> 02:55:25.993
just going to make a spot to 
hold it.

02:55:28.945 --> 02:55:30.945
Go up here, make a little Google
Map controller.  Just like that.

02:55:33.664 --> 02:55:35.664
And I'll call it map controller.

02:55:37.805 --> 02:55:39.805
And I'm gonna sign that down 
here.

02:55:42.499 --> 02:55:47.009
So, all right.  So, I've got any
widget in place.  I've got the 

02:55:47.010 --> 02:55:49.010
controller callback.

02:55:51.451 --> 02:55:53.555
Let's do a little hot reload.  
And there we go.

02:55:56.853 --> 02:55:59.567
The entire app now is just a 
map.  I can zoom in, I can click

02:55:59.568 --> 02:56:03.659
and zoom, I can still pan around
and things like that.  And

02:56:03.903 --> 02:56:08.865
all right.  So, let's do 
something with this.  We got the

02:56:08.866 --> 02:56:11.924
map, we got the controller.
You said before, you could add 

02:56:11.925 --> 02:56:14.567
buttons over the Flutter map 
widget.

02:56:15.013 --> 02:56:17.013
Okay.

02:56:18.274 --> 02:56:20.274
Let's add a button and we can do
something.

02:56:22.440 --> 02:56:24.919
Why won't it let me click the 
button?  I'll wrap this in.  Go 

02:56:24.920 --> 02:56:27.370
with a stack.  Put this in the 
stack.  And, of course, stacks 

02:56:27.371 --> 02:56:31.272
have children, rather than a 
single child.  So, we add that. 

02:56:31.273 --> 02:56:33.932
That's gonna be a list.  Come 
down here.

02:56:37.232 --> 02:56:41.743
The magic of autoformatting.  
And let's put a button.  I'll 

02:56:41.744 --> 02:56:43.587
put this in the lower left-hand 
corner just so we know where it 

02:56:43.588 --> 02:56:45.588
is.

02:56:46.866 --> 02:56:50.991
So, use the positions.  And here
we go.  So, bottom, I'll give it

02:56:50.992 --> 02:56:52.992
a little padding.

02:56:54.312 --> 02:56:58.577
That's not how you spell bottom.
And left.  A little padding 

02:56:58.578 --> 02:57:00.578
there.  And child.

02:57:02.717 --> 02:57:04.717
I'll give this a raised button.

02:57:07.678 --> 02:57:11.339
And so, our button will need 
some text.  Let's see.  Let's 

02:57:11.340 --> 02:57:16.663
move the camera when the button 
gets hit, how about that?  There

02:57:16.664 --> 02:57:21.831
we go.  And give it an on 
pressed.  Every button needs an 

02:57:21.832 --> 02:57:23.832
on pressed callback that's going
to be used.

02:57:26.122 --> 02:57:28.808
And just for fun, let's give it 
a color.  Is there a light green

02:57:28.809 --> 02:57:35.352
material spec?  There is a light
green.  Awesome.  Okay.  Let's 

02:57:35.353 --> 02:57:40.931
hot reload again.  Still got
our map.  And let's -- we got a 

02:57:40.932 --> 02:57:43.200
button now.  Let's move the 
camera when we get this clicked.

02:57:46.959 --> 02:57:48.959
So, we have the controller.

02:57:50.628 --> 02:57:52.628
Updates.

02:57:53.696 --> 02:57:55.696
Animated camera.

02:57:59.427 --> 02:58:01.678
Let's do ananimative.  And 
that's going to take a camera 

02:58:02.082 --> 02:58:04.082
update.

02:58:08.048 --> 02:58:10.048
And we'll do -- let's do Latin 
and long here.

02:58:12.750 --> 02:58:14.750
Do you know latitudes and long 
jiggy attitudes?

02:58:16.880 --> 02:58:18.726
-how about London?
You know that?

02:58:18.727 --> 02:58:20.727
&gt;&gt; 55.0.

02:58:22.962 --> 02:58:24.962
Let's

02:58:27.925 --> 02:58:29.925
say Greenwich, but that's close 
by.

02:58:29.969 --> 02:58:30.988
You want to zoom in a little bit
too?

02:58:30.989 --> 02:58:34.237
Yeah.  Let's zoom in a little.  
Oh.

02:58:39.136 --> 02:58:41.136
I twist it -- let's go ahead and
save this.  Hot reloading again.

02:58:42.187 --> 02:58:45.697
And click the camera.  And there
we go.  Now we're interacting 

02:58:45.698 --> 02:58:50.198
with this map.  In about five 
minutes, dropped a Google map in

02:58:50.199 --> 02:58:52.046
here, got the controller, and 
used it to animate a change to 

02:58:52.047 --> 02:58:54.047
the map.
That's awesome.

02:58:54.682 --> 02:58:56.682
Yeah.

02:58:59.356 --> 02:59:00.582
Not only Maps now, full Google 
Maps, they're really Flutter 

02:59:00.583 --> 02:59:03.017
widgets and really easy to add 
and manipulate.

02:59:04.236 --> 02:59:05.908
You can compose with these.  
They're just like any other 

02:59:05.909 --> 02:59:10.014
widgets, you can put them in 
here, move them around, do what 

02:59:10.015 --> 02:59:12.015
you need to do.
That's great.

02:59:12.912 --> 02:59:14.544
Like I said, if you have 
questions on this, check out the

02:59:14.545 --> 02:59:16.545
source code itself 

02:59:18.424 --> 02:59:20.044
and if you run into any issues 
or want features, file an issue 

02:59:20.045 --> 02:59:21.489
request.
Okay.

02:59:21.490 --> 02:59:24.152
That's Maps.  What else?
Well, I've got a couple of 

02:59:24.153 --> 02:59:28.019
questions.  Here is a question 
from India.  We got a lot of 

02:59:28.020 --> 02:59:32.206
questions from India.  Probably 
I think they win the award for 

02:59:32.207 --> 02:59:34.207
most number of questions.  Which
is doubly amazing because I 

02:59:36.070 --> 02:59:37.299
think it's after midnight now in
India.  So, this is pretty 

02:59:37.300 --> 02:59:42.479
amazing.  So, the question is, I
want to know what the best 

02:59:42.480 --> 02:59:46.194
laptop is for developing Flutter
apps?  You know, which are 

02:59:46.195 --> 02:59:48.842
compatible with all the 
emulators and so forth?

02:59:50.866 --> 02:59:51.285
Probably whatever laptop you 
have.

02:59:51.286 --> 02:59:54.990
That's right.  Yeah.
Yeah.  So, Flutter, part of 

02:59:54.991 --> 02:59:58.475
being open, you know, when the 
team says "Open," they really 

02:59:58.476 --> 03:00:01.338
mean  it.  They don't just mean 
open source.  You should be able

03:00:01.339 --> 03:00:03.370
to use the machine that you 
have.  Use the tools that you 

03:00:03.371 --> 03:00:05.371
already like and things like 
that.

03:00:09.113 --> 03:00:11.113
So, if you're building Flutter 
apps, 

03:00:14.005 --> 03:00:16.242
you can -- you know, this is 
IntelliJ ID that I use.  And 

03:00:16.243 --> 03:00:18.243
runs on everything.

03:00:19.707 --> 03:00:21.707
Windows, Linux, OSX.  You can 
run --

03:00:22.007 --> 03:00:24.007
Apple, yeah.

03:00:25.081 --> 03:00:27.081
They -- you can run this on 
Chromebooks.

03:00:27.108 --> 03:00:31.805
And Chromebook as well.  And so,
if you're -- if you're going to 

03:00:31.806 --> 03:00:34.475
actually build and release an 
iOS app, you would actually need

03:00:34.476 --> 03:00:37.812
a Macbook or an Apple machine at
that point because their tool 

03:00:37.813 --> 03:00:40.867
chain runs on their machine.  
So, if you want to actually 

03:00:40.868 --> 03:00:45.408
build an IPA and sign it and do 
all that, at that point, you 

03:00:45.409 --> 03:00:47.494
would need an Apple machine.  
But you could even build it out 

03:00:49.951 --> 03:00:50.759
entirely without touching a 
Macbook or an Apple, you know?

03:00:50.760 --> 03:00:52.760
Right.

03:00:54.859 --> 03:00:56.859
So, yeah, really, it's -- it's 
up to you.

03:00:57.320 --> 03:00:59.351
That is one of the advantages of
Flutter is that you can actually

03:00:59.352 --> 03:01:03.026
build an iOS app not on a Mac.  
And then at the last moment, 

03:01:03.027 --> 03:01:05.027
because 

03:01:06.092 --> 03:01:08.756
of Apple's requirements, yes, 
you have to find a Mac somewhere

03:01:08.757 --> 03:01:11.635
and do the release build.  But 
that's it.  And send it off to 

03:01:11.636 --> 03:01:15.302
Apple that way.  So, you know, 
if you have a cousin who has an 

03:01:15.303 --> 03:01:17.754
Apple laptop.
Just drop by, release your app.

03:01:21.431 --> 03:01:23.497
Yeah, just borrow it for a few 
hours and there you go.  I'm 

03:01:23.498 --> 03:01:25.348
going to switch over.  We have 
so many live questions coming 

03:01:25.349 --> 03:01:28.852
in.  I'm going to go ahead and 
do a couple of live questions.

03:01:29.057 --> 03:01:31.057
Sure.

03:01:33.151 --> 03:01:33.999
One is, can I use a Java library
in Flutter?

03:01:34.000 --> 03:01:36.000
Sure.  Yeah.

03:01:37.071 --> 03:01:38.901
So, Flutter has a thing called 
platform channels that can help 

03:01:38.902 --> 03:01:42.376
you with this.  Let me pull it 
up.  We'll go into the laptop 

03:01:42.377 --> 03:01:44.377
here.
Okay.

03:01:46.046 --> 03:01:48.046
Let me do platform channels.

03:01:49.149 --> 03:01:51.149
See if I can find it in one 
stroke here.  There we go.

03:01:54.901 --> 03:01:57.559
So, platform channels is a way 
for the dark code in your 

03:01:57.560 --> 03:02:00.024
Flutter app to talk to platform 
code and interact with native 

03:02:01.869 --> 03:02:03.869
APIs if you want to or just use 
the native code.

03:02:05.589 --> 03:02:07.652
And so, you can set up a method 
channel that will marshal data 

03:02:07.653 --> 03:02:12.136
sort of into platform land where
you can call Java functions, you

03:02:12.137 --> 03:02:14.137
can interact with 

03:02:15.867 --> 03:02:17.867
the Android API or pull up a 
Kotlin code 

03:02:19.387 --> 03:02:21.207
or an iOS you can call into 
Objective-C and Swift and work 

03:02:21.208 --> 03:02:23.208
with those APIs.

03:02:24.281 --> 03:02:26.928
If you have a Java library that 
you or your business or your 

03:02:26.929 --> 03:02:31.248
group has invested a lot of time
in and it would be a little bit 

03:02:31.249 --> 03:02:33.314
difficult to rewrite in Dart 
natively for Flutter, you can 

03:02:33.315 --> 03:02:35.315
build a 

03:02:36.385 --> 03:02:38.385
platform channel to it and use 
it that way.

03:02:39.678 --> 03:02:43.352
You have that ability.
Okay.  Let's go to a related 

03:02:43.353 --> 03:02:46.217
question.  This one, where is it
coming from?  Let me see?

03:02:50.994 --> 03:02:52.879
It's -- this is coming from Lake
Zurich which is actually in the 

03:02:52.880 --> 03:02:55.337
United States.  In Illinois.
Right.

03:02:57.568 --> 03:03:00.245
It's one of our very few US 
questions.  So, the question is,

03:03:00.246 --> 03:03:02.692
how secure is a platform 
channel?  You know, is there any

03:03:02.693 --> 03:03:04.693
chance that --
Oh, sure.

03:03:07.182 --> 03:03:08.624
That somebody could intercept 
that data, especially if they 

03:03:08.625 --> 03:03:10.625
have a rooted device or 
something like this.

03:03:11.490 --> 03:03:13.113
This was something I was talking
to the engineering team about 

03:03:13.114 --> 03:03:16.807
the other day.  So the way 
platform channels works, it's --

03:03:16.808 --> 03:03:18.808
you have in your application, 

03:03:19.872 --> 03:03:22.714
you have sort of the Flutter 
code is running in Dart.  It's 

03:03:22.715 --> 03:03:26.198
built with Dart, compiled in 
native code and run that way.  

03:03:26.199 --> 03:03:27.418
And on the side you would have 
some of the code that's running,

03:03:27.419 --> 03:03:32.297
you know, in Android.  You would
have the Java that's running.  

03:03:32.298 --> 03:03:34.624
And iOS you have your platform 
code for iOS that's also running

03:03:34.625 --> 03:03:37.929
outside of that library made 
from the Dart.  And so, there's 

03:03:37.930 --> 03:03:40.215
a memory buffer in your process 
for the communication between 

03:03:40.216 --> 03:03:42.660
the two of them.  And that's -- 
but that's within your process.

03:03:46.768 --> 03:03:47.385
So, there is no, you know, IPC, 
interprocess communication 

03:03:47.386 --> 03:03:51.250
required.  Nobody is writing for
like a named file or a named 

03:03:51.251 --> 03:03:53.251
pipe on the system to talk 
between two different processes 

03:03:55.757 --> 03:03:57.757
where in theory somebody might 
have a 

03:03:58.846 --> 03:03:59.648
better way to go in and sniff 
the traffic or something like 

03:03:59.649 --> 03:04:03.357
that.  This is all in one 
process.  The Flutter app in 

03:04:03.358 --> 03:04:06.218
that
regard is the same as any normal

03:04:06.219 --> 03:04:09.511
Android or iOS app.
Okay.  So, I have another live 

03:04:09.512 --> 03:04:11.512
question, just came in.
Okay.

03:04:17.044 --> 03:04:18.066
can I use a third-party ad 
network in my Flutter project?

03:04:18.067 --> 03:04:21.726
You're talking to the right 
person.  Before coming to the 

03:04:21.727 --> 03:04:23.727
Flutter team, I worked on the 
mobile ads team.

03:04:24.418 --> 03:04:26.418
I gave that one just for you.

03:04:28.294 --> 03:04:30.294
So, there is an -- there are two
ways that you could do this.

03:04:32.189 --> 03:04:34.841
One is, you could use platform 
channels to interact with that 

03:04:34.842 --> 03:04:37.752
network's mobile SDK.  So, if 
you wanted to incorporate the 

03:04:40.442 --> 03:04:42.875
audience network or something 
from both or Imobe or something 

03:04:42.876 --> 03:04:47.151
like that, you could take that 
SDK, build a little bridge to 

03:04:47.152 --> 03:04:49.152
call the platform channels to 

03:04:50.235 --> 03:04:52.694
call methods on it and access it
and use it as you would 

03:04:52.695 --> 03:04:55.339
otherwise normally.  The other 
option that you have and, 

03:04:58.805 --> 03:05:01.664
you know, I would make sure that
you test this thoroughly because

03:05:01.665 --> 03:05:03.698
it's not something I've tested 
personally.

03:05:08.235 --> 03:05:10.462
You can use the ad mop function,
it has mediation to use multiple

03:05:10.463 --> 03:05:14.379
ad networks in concert.  It sort
of manages which network shows 

03:05:16.411 --> 03:05:18.042
an ad based on which one is 
providing the most revenue at 

03:05:18.043 --> 03:05:20.043
that particular moment.

03:05:21.747 --> 03:05:23.747
And because the plugin for admob
is 

03:05:25.424 --> 03:05:26.032
using the native Google mobile 
ads SDK, that is available to 

03:05:26.033 --> 03:05:30.102
you.  So, if you have a mediated
ad unit, give it a try with that

03:05:30.103 --> 03:05:33.155
plugin and see how it goes.  I 
think it will more

03:05:33.367 --> 03:05:36.000
than likely work fine.
Okay.  Let me ask another live 

03:05:36.001 --> 03:05:38.001
one.
Okay.

03:05:40.337 --> 03:05:42.337
Can Dart be a standalone 
programming language?

03:05:43.399 --> 03:05:45.399
Dart is a standalone programming
language.

03:05:46.042 --> 03:05:48.132
It absolutely is.  Yes, it can. 
Yes, it is.

03:05:50.572 --> 03:05:52.827
Obviously on the Flutter team, 
we talk about Dart mostly in the

03:05:52.828 --> 03:05:55.689
scope of mobile applications.  
That's what we use it for.  Dart

03:05:55.690 --> 03:05:58.553
for the web.  It's Angular Dart,
it's being used all over the 

03:05:58.554 --> 03:06:00.554
place.

03:06:02.868 --> 03:06:05.538
Our own website, the pub 
website, is using Dart to build 

03:06:05.539 --> 03:06:07.588
-- on the server to build the 
website as well.

03:06:07.986 --> 03:06:09.986
Yeah.

03:06:13.102 --> 03:06:14.939
And we have Euro, he's here, his
application shares Dart code in 

03:06:14.940 --> 03:06:19.421
between a mobile application 
built for Flutter and an Angular

03:06:19.422 --> 03:06:23.170
Dart application as well.  So, 
that's definitely  possible.  

03:06:23.171 --> 03:06:25.201
There's also server-side Dart.  
There are people building server

03:06:25.610 --> 03:06:27.854
applications with Dart.  It's a 
very portable language.

03:06:28.260 --> 03:06:30.260
That's right.  Okay.

03:06:33.193 --> 03:06:35.193
I think I'm going to  ask -- 
hold on.

03:06:37.286 --> 03:06:39.924
Let me find this new one coming 
in over here.  Ah.  So, we have 

03:06:39.925 --> 03:06:42.766
a couple of questions that are 
sort of related.  They're saying

03:06:42.767 --> 03:06:44.812
at one end of the spectrum is 
how do I get started?  Flutter?

03:06:45.058 --> 03:06:48.506
Okay.
And we have one question that 

03:06:48.507 --> 03:06:51.195
said I know JavaScript.  Can I 
learn Flutter and Dart very  

03:06:51.997 --> 03:06:56.678
easily with it?  And at the 
other end of the spectrum, how 

03:06:56.679 --> 03:06:58.679
do I become an expert in 
Flutter?

03:07:00.196 --> 03:07:02.196
The two, how do I get on the 
path and at the end.

03:07:03.875 --> 03:07:04.485
I did that, because I just 
noticed --

03:07:04.486 --> 03:07:06.932
Over there.  Yes.  Please.  You 
would be great for this 

03:07:06.933 --> 03:07:09.379
question.  Please, come and join
us and sit down.

03:07:12.053 --> 03:07:16.527
Join 
Hi, guys.-the microphone there.

03:07:17.136 --> 03:07:21.867
&gt;&gt; This is Pooja, everyone.
Hi, everyone.

03:07:24.747 --> 03:07:26.747
You recently wrote an article 
about your 

03:07:29.431 --> 03:07:30.844
path from a complete Flutter 
newbie to a seasoned coder, 

03:07:30.845 --> 03:07:33.323
right?
Yes.

03:07:35.418 --> 03:07:37.441
For the person who asked about 
getting started, how did you get

03:07:37.442 --> 03:07:40.359
started?
I actually got started because I

03:07:40.360 --> 03:07:43.664
joined this company.  They 
wanted me to work in Flutter so 

03:07:43.665 --> 03:07:45.665
I learned Flutter.  That's how I
started.

03:07:48.350 --> 03:07:50.350
But I will tell you how I 
started with Flutter.

03:07:52.290 --> 03:07:56.377
What I did is that I worked on a
lot of designs.  You know?  I 

03:07:56.378 --> 03:08:01.475
mean, Flutter is so great for 
designing apps.  I wanted to 

03:08:01.476 --> 03:08:04.327
lets just redesign app that I 
have, that I know.  Let's 

03:08:04.328 --> 03:08:09.068
redesign it in Flutter.
That sounds like a problem.  

03:08:09.069 --> 03:08:11.069
It's so easy, you want to redo 
everything.

03:08:12.145 --> 03:08:14.204
I wanted to see if Flutter has 
the capability to actually make 

03:08:14.205 --> 03:08:18.669
it possible for me to redesign 
all my favorite apps.  And I 

03:08:18.670 --> 03:08:21.523
could actually make apps in one 
day.  Like the entire app in one

03:08:21.524 --> 03:08:23.524
day.  All the screens and 
everything.

03:08:26.412 --> 03:08:28.643
And that's -- that's how I was 
very sure:  This is it.  This is

03:08:28.644 --> 03:08:30.644
what I want to do.
That's right.

03:08:31.519 --> 03:08:34.174
I mean, I switched -- I did not 
switch.  But I did kind of go 

03:08:34.175 --> 03:08:37.471
from Android to Flutter because 
of  it.  Because it's so amazing

03:08:37.472 --> 03:08:39.472
to work with Flutter.

03:08:42.559 --> 03:08:45.618
And it's not like those Android 
skills aren't used.  You need 

03:08:45.619 --> 03:08:48.682
them, right?
You still need them.  You can 

03:08:48.683 --> 03:08:50.747
start Flutter without Android, 
but you have to come back to 

03:08:50.748 --> 03:08:53.012
Android at some point if you 
want to work with native 

03:08:53.013 --> 03:08:55.013
channels.  If you want to make a
fuller app.

03:08:58.157 --> 03:08:59.789
You have to know a bit of 
Android or iOS.

03:08:59.790 --> 03:09:02.039
That definitely helps.
So, what were -- what were some 

03:09:02.040 --> 03:09:05.538
of the things that helped you 
when you were getting started?  

03:09:05.539 --> 03:09:08.397
So, we talked a little bit about
what you were working on.  Did 

03:09:08.398 --> 03:09:11.662
you look for articles?  Did you 
look for videos?  Did you look 

03:09:11.663 --> 03:09:13.689
for sample code?  You know, 
those sorts of things

03:09:16.574 --> 03:09:20.061
I actually looked -- first I 
went to the code labs.  Okay.  

03:09:20.062 --> 03:09:22.062
So, I checked out the code labs.
It was actually very epihadful.

03:09:25.987 --> 03:09:28.831
I wanted to try out the Java to 
Dart code lab just to see how 

03:09:28.832 --> 03:09:30.832
Dart it is -- how Dart is like.

03:09:32.529 --> 03:09:35.186
And it's pretty easy.  Actually 
I learned that in a day.

03:09:38.037 --> 03:09:40.037
Once you get past seeing this 
and a  constructer, it's fine.

03:09:40.064 --> 03:09:45.050
It's actually pretty easy.  I 
don't know.  Other languages, 

03:09:45.051 --> 03:09:48.316
JavaScript, whatever, they're 
not so easy.  So, yeah, so, I 

03:09:48.317 --> 03:09:50.317
was convinced that day.

03:09:52.996 --> 03:09:54.996
And I did try out some articles.

03:09:56.860 --> 03:09:59.914
Thoughts and the Google I/O.
Flutter.io, docs and code labs.

03:10:00.115 --> 03:10:03.594
And there are a lot of GitHub 
repositories out there.

03:10:06.874 --> 03:10:08.874
And a lot of other tutorials.  
And YouTube.

03:10:11.174 --> 03:10:13.201
And they all help you a lot.  
I'm writing tutorials on Flutter

03:10:13.202 --> 03:10:15.202
right 

03:10:16.305 --> 03:10:18.305
now so you can check them out in
Medium if you want to.

03:10:18.751 --> 03:10:23.020
Absolutely.  Yeah, one of the 
problems we have as the Dev 

03:10:23.021 --> 03:10:24.850
team, it's hard to keep up with 
the content being made by the 

03:10:24.851 --> 03:10:30.578
community.  Our GitHub repo with
samples actually links out to a 

03:10:30.579 --> 03:10:33.420
number of samples that our team 
didn't create, we just think are

03:10:33.421 --> 03:10:36.494
really, really good.
You should check that out 

03:10:36.495 --> 03:10:39.987
because they have created the 
best resources that's possible 

03:10:39.988 --> 03:10:42.711
for you to learn Flutter.  So, 
check that out.

03:10:44.954 --> 03:10:46.384
And it's really great having 
people in the community writing 

03:10:46.385 --> 03:10:50.075
articles.  I remember at one 
point where I felt like I had to

03:10:50.076 --> 03:10:52.076
write all the articles.  But 
then it got to the point where I

03:10:55.211 --> 03:10:57.683
was trying to read all the 
articles that would be written. 

03:10:57.684 --> 03:10:59.684
I've totally given up on that.  
There's so much coming out.

03:10:59.718 --> 03:11:02.987
Same here.  In the beginning, I 
used to read all the articles 

03:11:02.988 --> 03:11:05.229
that used to come.  Now I think 
I missed out almost 50%.

03:11:08.289 --> 03:11:09.715
It's kind of like all 
bookmarked, bookmarked, 

03:11:09.716 --> 03:11:11.716
bookmarked.

03:11:12.984 --> 03:11:14.610
If I have time, I'll read them 
then.

03:11:14.611 --> 03:11:16.611
Tell us a little bit about what 
you're working on right now.

03:11:17.667 --> 03:11:20.518
So, right now it's not like a 
project.  But I am going to go 

03:11:20.519 --> 03:11:23.605
back to India and I'm going to 
give a talk at a college and 

03:11:23.606 --> 03:11:26.480
tell them about Flutter.  
Because it's pretty -- very, 

03:11:26.481 --> 03:11:29.342
very required for college people
to actually know about Flutter.

03:11:32.455 --> 03:11:33.884
Because you can't actually tell 
the employees, but it depends on

03:11:33.885 --> 03:11:37.162
the company, what they're using.
But college students, they are 

03:11:37.163 --> 03:11:39.438
going to graduate with that 
knowledge.  And they are going 

03:11:39.439 --> 03:11:43.525
to tell other people to try it 
out.  So, let's start with the 

03:11:43.526 --> 03:11:48.233
colleges first.  As a college 
student myself, I'm targeting 

03:11:48.234 --> 03:11:50.874
the college student in India.  
If you are wanting me to talk 

03:11:50.875 --> 03:11:52.875
about 

03:11:54.388 --> 03:11:56.388
Flutter in any of the colleges 
in India, hi.  So, yes.

03:12:00.090 --> 03:12:01.523
That's what I'm going to work on
now as soon as I go back to 

03:12:01.524 --> 03:12:03.524
India.

03:12:05.598 --> 03:12:08.659
so, almost out of time.  But one
more quick question.  You 

03:12:08.660 --> 03:12:11.114
watched the keynote.  What was 
your favorite thing in the 

03:12:11.318 --> 03:12:13.318
keynote?
The Square.

03:12:13.766 --> 03:12:18.310
The puzzle?
I was really shocked.  I was 

03:12:18.311 --> 03:12:20.311
really shocked working with 
Square right now.

03:12:22.417 --> 03:12:25.880
And also the  2Dimensions thing.
Oh, my god.  That was crazy.

03:12:26.698 --> 03:12:29.151
Yeah, yeah.
Honestly speaking, this was 

03:12:29.152 --> 03:12:32.647
really the best keynote because 
every five minutes I was like, 

03:12:32.648 --> 03:12:34.699
what's?
I'm glad you enjoyed it.

03:12:36.577 --> 03:12:38.577
Yeah, they put a lot of effort 
into it.

03:12:39.881 --> 03:12:42.351
We're going to move on to some 
more questions.  Thank you so 

03:12:42.352 --> 03:12:45.181
much for sitting down with us.  
We appreciate it.

03:12:46.838 --> 03:12:48.838
You are doing a great job.

03:12:49.939 --> 03:12:51.587
Thank you for letting us drag 
you up here.

03:12:51.588 --> 03:12:53.588
Take the microphone with you.  
Thank you so much.

03:12:56.499 --> 03:12:58.499
We have some livestream 
questions.

03:12:59.156 --> 03:13:01.788
We're going to take a short 
break and then have Eric Seidel 

03:13:01.789 --> 03:13:05.494
from the engineering team who 
you saw in the keynote.  But we 

03:13:05.495 --> 03:13:09.375
have a little more time.  A few 
questions from YouTube.  You 

03:13:09.376 --> 03:13:12.259
want to look at the livestream?
Do that?  And while you're 

03:13:12.260 --> 03:13:15.522
looking up questions on there, I
have a couple more coming in.  

03:13:15.523 --> 03:13:18.357
Here is good one.  I can answer 
this one.  We have a question 

03:13:18.358 --> 03:13:21.483
from Nebraska, from the US.  
Says, is there something similar

03:13:21.484 --> 03:13:24.539
to build flavors in Android.  
And it's true.

03:13:24.945 --> 03:13:29.061
Okay.
You can do build flavors.  It's 

03:13:29.062 --> 03:13:31.277
not really built into it, but, 
for example, one of the 

03:13:31.278 --> 03:13:33.278
developing 

03:13:34.369 --> 03:13:37.058
companies that I work with is 
called app Tree.  And all of 

03:13:37.059 --> 03:13:39.089
their stuff is in flavors.  They
have an app which they build a 

03:13:41.321 --> 03:13:42.955
flavor for every single 
customer.  That's pretty far 

03:13:42.956 --> 03:13:44.956
out.
Wow.

03:13:47.036 --> 03:13:49.097
And they have, I don't know, I'm
not even sure I can say how many

03:13:49.098 --> 03:13:53.609
customers they have because it's
not public information.  But 

03:13:53.610 --> 03:13:55.610
they build for  company -- for 

03:13:56.679 --> 03:13:59.339
places like Stanford, for 
companies like McDonald's.  They

03:13:59.340 --> 03:14:02.405
build an app.  And they have to 
customize it for every single 

03:14:02.406 --> 03:14:05.675
customer.  And they do that with
flavors.  So, you could 

03:14:05.676 --> 03:14:07.676
definitely do that.  And the 
other thing that's amazing 

03:14:10.826 --> 03:14:13.878
about what they do, they not 
only do that on Android.  They 

03:14:13.879 --> 03:14:16.310
do that on iOS and they do that 
on their web app.  So, all three

03:14:16.311 --> 03:14:19.600
of them.  They have to deliver 
all three to every customer and 

03:14:19.601 --> 03:14:22.690
they have to have a separate 
flavor for it.  So, it's 

03:14:22.691 --> 03:14:24.691
definitely possible.

03:14:26.977 --> 03:14:28.977
They have put out some open 
source code, too, right?

03:14:29.256 --> 03:14:31.340
What?
They put out open source code.

03:14:31.747 --> 03:14:35.212
They have articles.  I'm not 
sure if they have written an 

03:14:36.659 --> 03:14:39.739
article about doing flavors yet.
Maybe we can talk them into it.

03:14:39.951 --> 03:14:44.433
Anyway, did you find something?
Let's look at this.  We have 

03:14:44.434 --> 03:14:48.943
some things in here.  And let's 
take a look at this.  So, when 

03:14:48.944 --> 03:14:51.806
are you planning to support AR 
or VR development?

03:14:56.098 --> 03:14:58.098
Somebody from the Dominican 
Republic.

03:14:58.758 --> 03:15:00.619
Augmented reality and --
I think that one's a little bit 

03:15:00.620 --> 03:15:02.845
down the road.
I think so too.

03:15:04.518 --> 03:15:06.518
I think there's other things 
sort of before that one.

03:15:07.365 --> 03:15:10.016
Part of the reason for that is 
so far Flutter is really 

03:15:10.017 --> 03:15:12.017
concentrating on 2D graphics.

03:15:13.930 --> 03:15:16.013
And in order to do AR, I mean, 
you can do it with a certain 

03:15:16.014 --> 03:15:18.014
amount of 2D 

03:15:19.268 --> 03:15:21.304
graphics, but it really works 
better with 3D.  Because you do 

03:15:21.305 --> 03:15:23.305
need to be able to do 
perspective and stuff like that.

03:15:25.002 --> 03:15:27.674
So, I think that's probably 
something that will happen.  I'm

03:15:27.675 --> 03:15:29.675
just not sure when.

03:15:31.153 --> 03:15:33.153
It's not on our roadmap right 
now.

03:15:33.628 --> 03:15:36.512
Let me see what else we have.  
Can I integrate my existing 

03:15:36.513 --> 03:15:38.513
Android project with Flutter?
Can you?

03:15:38.767 --> 03:15:40.767
You can.  Many people have done 
this.

03:15:40.798 --> 03:15:42.828
That's true.
Yeah.  This is something that's 

03:15:42.829 --> 03:15:46.911
being worked on right now.  But 
you can go and look at it.  Add 

03:15:46.912 --> 03:15:50.793
to an application.  A number of 
people with larger applications 

03:15:50.794 --> 03:15:53.455
have found ways to integrate a 
single Flutter activity into 

03:15:54.063 --> 03:15:59.035
their app.  You can also have a 
Flutter activity in Android that

03:15:59.036 --> 03:16:02.905
launches a native activity, a 
platform activity.  You can show

03:16:02.906 --> 03:16:04.906
the platform that way.

03:16:06.009 --> 03:16:07.835
And similarly on iOS, you can 
have a view control that's doing

03:16:07.836 --> 03:16:10.688
Flutter launch, launch a 
platform one or vice versa.

03:16:12.947 --> 03:16:14.947
And backing up a little bit, 
there's 

03:16:17.101 --> 03:16:19.950
sort of two ways to go about 
doing that.  One is, can you add

03:16:19.951 --> 03:16:21.377
Flutter to an existing 
application.  And you've talked 

03:16:21.378 --> 03:16:26.075
to that.  But actually another 
way to look at it is that you 

03:16:26.076 --> 03:16:27.286
can actually convert the entire 
application to be a Flutter 

03:16:27.287 --> 03:16:29.287
application.

03:16:33.047 --> 03:16:36.356
But then plugin native code from
both platforms into it.  So, you

03:16:36.357 --> 03:16:38.184
could either do it as, all 
right, here is just a piece of 

03:16:38.185 --> 03:16:43.099
Flutter as a single view.  Or 
you can say, okay.  The whole 

03:16:43.100 --> 03:16:45.763
thing is Flutter, but we're 
going to put a lot of native 

03:16:45.764 --> 03:16:47.764
code.  They're both good ways to
do it.

03:16:52.225 --> 03:16:55.208
The latter is actually easyier 
in some ways even though it 

03:16:55.209 --> 03:16:58.277
seems harder.  It's easier 
because you have two separate 

03:16:58.278 --> 03:17:02.362
applications.  You have an iOS 
and an Android app and you have 

03:17:02.363 --> 03:17:05.027
to put Flutter into both of 
them.  Do that two different 

03:17:05.028 --> 03:17:09.712
ways and you no longer have a 
cross-platform solution.  You're

03:17:09.713 --> 03:17:10.329
going to be modifying two 
different codebases at the same 

03:17:10.330 --> 03:17:13.390
time.  Whereas if you go the 
other way, the code that you 

03:17:13.391 --> 03:17:15.003
haven't
written in Flutter stays the 

03:17:15.004 --> 03:17:19.749
same.  But you can just feed 
that into a single application. 

03:17:19.750 --> 03:17:21.981
So, they both work.  That's 
probably more detail than people

03:17:21.982 --> 03:17:26.520
need.  But anyway.  That's okay.
It's something you can  do.

03:17:28.349 --> 03:17:31.214
For more information on this, 
you can check out the GitHub, 

03:17:31.215 --> 03:17:33.215
Flutter/flutter is the repo with
the  SDK.

03:17:35.896 --> 03:17:37.941
And you can actually go in and 
look at how add to app is 

03:17:37.942 --> 03:17:42.254
progressing.  They're trying to 
make it as easy as possible to 

03:17:42.255 --> 03:17:44.255
mix native with Flutter.  And 
look for add to app and you can 

03:17:45.732 --> 03:17:47.551
find the code that's being 
worked on right now.

03:17:47.552 --> 03:17:51.224
I think we're out of time now.
I think we're out of time.  So, 

03:17:51.225 --> 03:17:52.884
we're going to take a quick 
break.  We're going to take a 

03:17:52.885 --> 03:17:54.927
few minutes break.  And when we 
come back, we're going to 

03:17:58.747 --> 03:18:03.603
have five minutes with Eric 
Seidel from the keynote.  Go 

03:18:03.604 --> 03:18:05.604
ahead and get the questions 
down.

03:18:06.088 --> 03:18:08.114
Send them to Twitter.  I'm going
to be looking through Twitter.

03:18:12.826 --> 03:18:15.315
We picked out a few from 
earlier, but if you have them, 

03:18:15.316 --> 03:18:17.365
get them in and we'll see you in
a few minutes.

03:18:19.410 --> 03:18:21.410
All right.

03:25:07.313 --> 03:25:08.982
We're back and here with Eric 
see dell, one of the founders of

03:25:08.983 --> 03:25:13.674
the project here to answer some 
we questions.  And I have more  

03:25:13.675 --> 03:25:18.794
questions.  We are looking at 
the screen.  Let's start off.  

03:25:18.795 --> 03:25:20.436
Can you tell me a little bit 
more about the Flutter origin 

03:25:20.437 --> 03:25:24.515
story.  I told people, Flutter 
started as a quest for speed.

03:25:29.836 --> 03:25:33.736
I would love know I'm not lying.
No, that's right.  Flutter 

03:25:33.737 --> 03:25:35.737
started as a quest for speed.

03:25:38.224 --> 03:25:40.687
Flutter was a cut down version 
of  Chrome.  And we just allowed

03:25:40.688 --> 03:25:44.563
ourselves to break with the web 
and chop out lots of stuff and 

03:25:44.564 --> 03:25:46.994
see how fast we could go.
Things in there for old 

03:25:46.995 --> 03:25:48.995
standards?  Compatibility with 
other things

03:25:49.709 --> 03:25:51.709
All sorts of things.

03:25:53.398 --> 03:25:56.868
The thing that we built wasn't 
able to render web pages.  We 

03:25:56.869 --> 03:26:00.419
ran benchmarks and they were 20 
times faster.  So, we knew we 

03:26:00.420 --> 03:26:03.270
had something there.
You had a rendering engine and I

03:26:03.271 --> 03:26:06.938
heard there was a search for a 
language at that point.  Can you

03:26:06.939 --> 03:26:08.995
tell us about that?  At one 
point, Flutter was written in 

03:26:11.893 --> 03:26:14.557
JavaScript, is that right?
That's right.  We went through 

03:26:14.558 --> 03:26:16.558
several iterations.

03:26:18.037 --> 03:26:19.685
We had a rendering engine in C++
and then more and more 

03:26:19.686 --> 03:26:21.686
JavaScript code.  And eventually
we had trouble with the 

03:26:22.120 --> 03:26:24.172
JavaScript code.  We went 
searching for another language.

03:26:29.058 --> 03:26:32.519
And then eventually all the C++ 
died away, or most of it.  And 

03:26:32.520 --> 03:26:34.979
once we found Dart and worked 
well for us.  We wrote more and 

03:26:34.980 --> 03:26:37.441
more and more Dart code.
Where did Flutter, the name, 

03:26:37.442 --> 03:26:39.705
come from?  I saw that in the 
stream earlier.

03:26:43.592 --> 03:26:45.592
Where did the name Flutter come 
from?

03:26:46.024 --> 03:26:48.024
We have heard this story before,
but it's so good.

03:26:50.133 --> 03:26:52.375
It turns out naming is is really
hard.  So, we did these things 

03:26:52.376 --> 03:26:57.693
called trademark searches where 
you make sure you can use the 

03:26:57.694 --> 03:27:00.182
name in various countries and 
all that.  And they're not cheap

03:27:00.183 --> 03:27:04.268
and they take a long time.  And 
we did a bunch of them.  And we 

03:27:04.269 --> 03:27:07.340
didn't find any names that we 
liked that we could use.  And 

03:27:07.341 --> 03:27:09.585
so, we got a little desperate.  
But it turns out that Google has

03:27:09.586 --> 03:27:11.586
a 

03:27:13.340 --> 03:27:14.559
cache of names that they've -- 
from companies that they've 

03:27:14.560 --> 03:27:16.560
bought.
Acquired companies.

03:27:19.914 --> 03:27:21.561
Or they turn down a name for 
whatever reason.  That's where 

03:27:21.562 --> 03:27:24.059
Flutter came from.  It was a 
small startup that they had 

03:27:24.469 --> 03:27:28.754
bought.  And the product had 
turned down, but the name was 

03:27:28.755 --> 03:27:31.199
still there and that's how we 
ended up being Flutter.

03:27:32.820 --> 03:27:36.495
That is wild.  All right.  We 
have another question here.  

03:27:36.496 --> 03:27:38.496
This one comes from Twitter.

03:27:40.129 --> 03:27:42.129
The account is from Romania.

03:27:46.550 --> 03:27:48.550
So,

03:27:49.705 --> 03:27:52.542
Buenos cera.  Talk about Dart 
and how Flutter influenced Dart 

03:27:52.543 --> 03:27:56.843
2.0.  Was there things that 
Flutter needed from Dart that 

03:27:56.844 --> 03:27:58.281
the Dart team said, yeah, we can
put those in the language for 

03:27:58.282 --> 03:28:01.147
you?
Oh, totally.  There's so much 

03:28:01.148 --> 03:28:04.644
that's been added to Dart in the
last few years specifically for 

03:28:04.645 --> 03:28:06.645
Flutter.

03:28:09.188 --> 03:28:10.817
A trailing comma for the 
formatting, the into double.

03:28:10.818 --> 03:28:14.718
That's right.
The IoT support in general.

03:28:18.997 --> 03:28:21.245
That was a huge thing for the 
Dart team for Flutter.  

03:28:21.246 --> 03:28:23.706
Performance enhancements.  Yeah.
Just lots and lots of work 

03:28:23.707 --> 03:28:26.765
that's gone into Dart to make 
Flutter awesome.

03:28:27.182 --> 03:28:31.859
Awesome.  Okay.  Let's see.  So,
with one comes also from 

03:28:31.860 --> 03:28:33.860
Twitter.

03:28:36.582 --> 03:28:38.432
This is from Terra, will Google 
introduce a Flutter 

03:28:38.433 --> 03:28:42.315
certification program similar to
ones that exist for Android?

03:28:45.158 --> 03:28:46.588
You know, so, I've heard that 
there are these other 

03:28:46.589 --> 03:28:48.589
certification programs for some 
of the other products, which is 

03:28:48.649 --> 03:28:52.387
awesome.  I think that those are
things that we would think about

03:28:52.388 --> 03:28:56.485
a little bit later on.  I mean, 
we just had one today.  So, I 

03:28:56.486 --> 03:28:58.486
think that's a good idea.  But I
think that's probably going to 

03:28:58.739 --> 03:29:03.456
take a little while.
Okay.  Cool.  All right.  And 

03:29:03.457 --> 03:29:04.881
this is one last one, sort of a 
general question for a lot of 

03:29:04.882 --> 03:29:06.882
the people watching.

03:29:08.780 --> 03:29:10.665
You know, how can someone 
looking to contribute to Flutter

03:29:10.666 --> 03:29:12.666
best make an impact?  So, if 
you're watching this and you're 

03:29:13.957 --> 03:29:15.957
like, you know, I really like 
Flutter.  I like this community.

03:29:17.014 --> 03:29:18.698
I would like to be part of it as
a contributor.  What are some of

03:29:18.699 --> 03:29:21.790
the best waying to do that?
So --

03:29:24.243 --> 03:29:25.917
Other than the fact that you're 
hiring, right?

03:29:25.918 --> 03:29:30.189
Ed that true.  We are always 
hiring.  We have tons of open 

03:29:30.190 --> 03:29:34.700
positions.  To contribute to 
Flutter.  We have a bunch of 

03:29:34.701 --> 03:29:38.978
documentation on GitHub about 
exactly this.  There's lots of 

03:29:38.979 --> 03:29:42.029
ways to contribute beyond just 
engineering.  There's tons of 

03:29:42.030 --> 03:29:47.411
triage to do.  There's obviously
all these people running events 

03:29:47.412 --> 03:29:49.412
today, that's contributing to 
the system, right?

03:29:51.291 --> 03:29:51.692
So, yeah, there's lots of  
engineering-specific tasks that 

03:29:51.693 --> 03:29:53.693
are listed on  GitHub.  Bugs to 
fix.

03:29:57.454 --> 03:30:00.108
We even have an easy fix label 
to help with early bugs.  

03:30:00.109 --> 03:30:02.789
There's contributing docs on the
engine side for those who like 

03:30:02.790 --> 03:30:06.665
C++ as well as the Flutter 
framework side for those who 

03:30:06.666 --> 03:30:09.955
like Dart.  There's lots of docs
up on GitHub about exactly this.

03:30:09.956 --> 03:30:13.641
Yeah.  And, of course, we have 
the package ecosystem and all 

03:30:13.642 --> 03:30:15.642
sorts of stuff, right?
Yes.

03:30:15.891 --> 03:30:17.891
Okay.  Excellent.

03:30:20.170 --> 03:30:22.636
So, that's about all our time, I
think.  Any other questions for 

03:30:22.637 --> 03:30:27.750
Eric we want to touch 
That's all I want to ask.

03:30:28.803 --> 03:30:32.916
That's our time.  And thank you 
for talking to us and talking on

03:30:32.917 --> 03:30:34.917
the stream.  Enjoy Flutter Live.

03:30:37.601 --> 03:30:39.232
And you can take that with you 
and exit right over there.  

03:30:39.233 --> 03:30:41.233
Thank you so much.

03:30:42.905 --> 03:30:44.357
Well, I've got a couple of 
questions.

03:30:44.358 --> 03:30:46.358
What else do we have?
Well, let me ask this one.

03:30:50.352 --> 03:30:52.352
This is a question that says, 
can we 

03:30:54.227 --> 03:30:55.296
design and develop apps for  
eCommerce businesses with 

03:30:55.297 --> 03:30:59.377
Flutter?  This is one of those 
questions where I didn't have to

03:30:59.378 --> 03:31:01.378
pate person to ask this or I 
would have.

03:31:02.071 --> 03:31:03.706
Yeah, the answer is people are 
already doing  it.  Right?

03:31:03.707 --> 03:31:06.762
That's right.
You know, Alibaba.

03:31:11.749 --> 03:31:12.770
Yeah, Alibaba is one of the 
largest E Commerce companies in 

03:31:12.771 --> 03:31:14.771
the world and they're using 
Flutter for their app.

03:31:14.988 --> 03:31:18.893
Absolutely.  We have a sample.
That's right.  Can we see that?

03:31:19.095 --> 03:31:22.777
Yes.  If you watched the 
keynote, you already saw it a 

03:31:22.778 --> 03:31:24.778
little bit.

03:31:25.882 --> 03:31:29.195
Let me go ahead and pull up --
That's right.  When Will got up 

03:31:29.196 --> 03:31:31.196
and talked about Material 
design.

03:31:34.309 --> 03:31:36.309
And has an eCommerce app built 
into it.

03:31:36.952 --> 03:31:38.397
We have in -- the Material team 
built several samples to show 

03:31:38.398 --> 03:31:40.398
off what Material could do.

03:31:42.902 --> 03:31:44.328
The new stuff launched in I/O18 
and how to put it to work in 

03:31:44.329 --> 03:31:47.400
Flutter.  And one of the demos 
is Shrine, which is a shopping 

03:31:47.401 --> 03:31:52.353
app.  So, we took the work that 
they did.  Hey, let's put a 

03:31:52.354 --> 03:31:56.024
little state management into 
this and made a model with it 

03:31:56.025 --> 03:31:58.025
and put a shopping cart into it 

03:31:59.712 --> 03:32:01.712
and put it on the DevRel samples
repo.

03:32:03.204 --> 03:32:05.248
It's up at Flutter/samples.  
Look for Shrine.  You can 

03:32:05.249 --> 03:32:09.365
download that right now.  And 
there we go.  Just about done.

03:32:13.899 --> 03:32:16.611
This is an example of an 
eCommerce app.  So, I can just 

03:32:16.612 --> 03:32:18.612
flip through next here and go 
right on.

03:32:20.301 --> 03:32:22.753
So, we have a list of products 
just like you would expect.  I 

03:32:22.754 --> 03:32:24.596
think Will is himself -- yes.  
He is in here himself as a 

03:32:24.597 --> 03:32:26.597
model.

03:32:27.746 --> 03:32:31.469
Because we needed a model today,
I guess, for the photos team.  

03:32:31.470 --> 03:32:33.097
And so, you can click on things 
to add them to your shopping 

03:32:33.098 --> 03:32:36.773
cart.  And you can see the 
Material team has put a lot of 

03:32:36.774 --> 03:32:38.774
time into this.

03:32:40.297 --> 03:32:42.297
The expanding bottom sheet of 
what's in the cart.  I

03:32:42.357 --> 03:32:45.432
know they're proud of it.  It is
so cool.  Add things like that, 

03:32:45.433 --> 03:32:49.289
click on the bottom sheets and 
it expands into the carts.  I 

03:32:49.290 --> 03:32:51.764
can come in here and take things
out of it.  There's a model, 

03:32:51.765 --> 03:32:54.815
managing state of what's in the 
cart.Tallying up things.  But, 

03:32:54.816 --> 03:32:59.098
yeah.  Obviously eCommerce is a 
huge sector of the mobile app 

03:32:59.099 --> 03:33:01.099
ecosystem.  It's very important.

03:33:02.986 --> 03:33:04.466
So, certainly Flutter, the team 
had that in mind as they were 

03:33:04.467 --> 03:33:06.467
building everything out for 
Flutter.  And -- yeah.

03:33:09.370 --> 03:33:12.421
Works great.  What else we got?
Got some live questions.

03:33:13.029 --> 03:33:15.945
Okay.
Let me pick one.

03:33:21.046 --> 03:33:23.699
Is there a way to embed native 
UI?  And the example they use, 

03:33:23.700 --> 03:33:26.370
can I put Apple Pay into an app 
and have a Flutter 

03:33:30.063 --> 03:33:32.939
button that invokes Apple Pay?
Sure.  Yeah, we can talk a 

03:33:32.940 --> 03:33:34.940
little bit about that.

03:33:38.668 --> 03:33:40.668
The Google Maps plugin you saw 
and Filip demonstrated.

03:33:42.948 --> 03:33:44.948
That's using something called 
platform view.

03:33:46.631 --> 03:33:48.456
There's an Android and UI view. 
And these are the widgets that 

03:33:48.457 --> 03:33:51.742
manage the native platform view 
and sort of fit it into the 

03:33:51.743 --> 03:33:53.743
world of Flutter.

03:33:55.261 --> 03:33:57.100
And so, those are available.  
You can go and try them out on 

03:33:57.101 --> 03:33:59.101
your view and see how that goes.

03:34:02.072 --> 03:34:03.082
There's a bit of the cost to the
work you have to do under the 

03:34:03.083 --> 03:34:06.378
hood.  Don't just throw 30 of 
them into every Flutter screen 

03:34:06.379 --> 03:34:10.471
that you have.  That wouldn't be
a good implementation.  But if 

03:34:10.472 --> 03:34:13.115
you have one specific view that 
you really need to have, like a 

03:34:13.116 --> 03:34:17.017
control that you've invested a 
lot of time in  building or 

03:34:17.018 --> 03:34:19.317
something from the platform.  
You really need a particular 

03:34:19.318 --> 03:34:21.368
piece of the platform.  Those 
have been added now and you can 

03:34:23.402 --> 03:34:26.472
start putting them to work in 
your Flutter apps.  The platform

03:34:26.473 --> 03:34:29.754
views.
I have another question.  This 

03:34:29.755 --> 03:34:31.755
is from Seattle.
Oh.

03:34:32.425 --> 03:34:34.495
So, another question from the 
US.  They're wondering if there 

03:34:34.496 --> 03:34:36.496
are any 

03:34:38.632 --> 03:34:39.864
continuous integration and 
continuous deployment options 

03:34:39.865 --> 03:34:41.865
for Flutter apps?

03:34:43.947 --> 03:34:48.042
So, I think we got scooped a 
little bit by the keynote.  So, 

03:34:48.043 --> 03:34:50.331
in the keynote, you saw their 
solution for this.  They 

03:34:50.332 --> 03:34:52.332
partnered.
This came in after the keynote.

03:34:56.881 --> 03:34:58.881
Maybe they wanted to know what 
the whole  landscape was.

03:35:00.338 --> 03:35:01.770
For our DevRel samples, we use 
Travis.  It's great for open 

03:35:01.771 --> 03:35:03.771
source projects.  And it works 
great with Flutter.

03:35:07.447 --> 03:35:12.405
There's also Cirrus, I believe, 
the engineering team uses for 

03:35:12.406 --> 03:35:16.891
the SDK its.  They have advanced
use cases for testing.  And they

03:35:16.892 --> 03:35:18.567
found that fits their particular
needs.  But the tools for 

03:35:18.568 --> 03:35:20.568
Flutter.

03:35:23.083 --> 03:35:25.751
They run on Linux, they run on 
the command line.  You can run 

03:35:25.752 --> 03:35:27.752
tests from the command line very
easily.

03:35:29.611 --> 03:35:30.413
They fit very well into CI/CD 
systems.

03:35:30.414 --> 03:35:33.926
All right.  I don't think that's
a problem at all.  And I'm sure 

03:35:33.927 --> 03:35:36.791
there's going to be additional 
ones.  One thing that we keep 

03:35:36.792 --> 03:35:40.444
wanting to point out, if there's
something that you want that is 

03:35:40.445 --> 03:35:42.704
not available yet, you can 
actually go in and file an issue

03:35:42.705 --> 03:35:46.869
with Flutter.
That is true, yeah.  You have 

03:35:46.870 --> 03:35:49.161
access -- it not only is Flutter
open in terms of the code and 

03:35:50.791 --> 03:35:52.996
able to see it, it's developed 
in the open.  You can actually 

03:35:52.997 --> 03:35:54.997
go in and look at what the team 
is working on.

03:35:55.268 --> 03:35:57.268
You can do it yourself.
You can also do that.

03:35:57.532 --> 03:36:02.223
Yeah.  That's good.  Well, 
here's a short one.  How about 

03:36:02.224 --> 03:36:05.111
Dart on the server side?
We are -- we kind of already 

03:36:05.112 --> 03:36:07.570
touched on it.
I know, we already touched on 

03:36:07.571 --> 03:36:09.571
that.  But, yes.  You can see 
that.

03:36:13.542 --> 03:36:15.387
I want -- I said that question 
just because I wanted to 

03:36:15.388 --> 03:36:19.476
emphasize that Dart is a general
purpose programming language.  

03:36:19.477 --> 03:36:22.147
It does  run -- as you said 
earlier, we are focusing on 

03:36:22.148 --> 03:36:24.148
mobile apps right now.  But 
there are people who use Dart, 

03:36:25.622 --> 03:36:27.622
including us, on the server.

03:36:29.292 --> 03:36:30.726
Who use it for web apps and so 
forth.  And you have seen some 

03:36:30.727 --> 03:36:33.600
that have come out this time.  
And I think it's only going to 

03:36:33.601 --> 03:36:36.084
get better.  And in fact, you're
going to start 

03:36:39.385 --> 03:36:41.826
seeing it on more and more 
devices as well.  In fact, you 

03:36:41.827 --> 03:36:43.861
know, let me continue with this 
one.  Here's a question from 

03:36:43.862 --> 03:36:48.388
India.  It says, what are the 
new widgets that are about to 

03:36:48.389 --> 03:36:50.389
come out in the next Flutter 
update?  I love that.

03:36:50.425 --> 03:36:52.879
Sure.  Let's touch on this.

03:36:57.569 --> 03:36:59.405
Let me go into our -- so, the 
easiest way to know -- we get 

03:36:59.406 --> 03:37:02.280
this a lot.  What's the team 
working on?  What's coming out 

03:37:02.281 --> 03:37:04.281
soon?

03:37:05.956 --> 03:37:07.227
The easiest way is to bypass us 
and go straight to the team 

03:37:07.228 --> 03:37:09.228
itself through GitHub.

03:37:11.914 --> 03:37:13.914
If I go to the main Flutter repo
here.

03:37:15.975 --> 03:37:18.024
You'll notice, open issues for 
feature requests and bug fixes.

03:37:21.302 --> 03:37:23.136
But the projects tab, which the 
team uses.  And you can see what

03:37:23.137 --> 03:37:25.595
they're working on sort of in 
real-time.

03:37:31.768 --> 03:37:33.798
The  IoT plugin, a lot of stuff 
with Cupertino.  The energies 

03:37:33.799 --> 03:37:37.684
working on that.  And add to 
app, you can see it's nearing 

03:37:37.685 --> 03:37:40.325
the end of its sprint.  And some
other things.  You can come in 

03:37:40.326 --> 03:37:42.588
and see what the team is working
on and that might well answer 

03:37:42.984 --> 03:37:47.673
your question.  If you don't see
the thing that you think is 

03:37:47.674 --> 03:37:50.509
really important, there's likely
an issue open for it already.  

03:37:50.510 --> 03:37:52.611
If not, you can create one.  If 
there is one, go ahead and put 

03:37:53.020 --> 03:37:55.473
comment on it.  Say, I'm 
building with Flutter.  This is 

03:37:55.474 --> 03:37:57.510
important to me.  I need it for 
this use case.  You

03:37:58.721 --> 03:38:01.623
can put a thumb up on it.  The 
team really loves that feedback.

03:38:03.866 --> 03:38:05.312
They like getting that and feel 
like they're staying close to 

03:38:05.313 --> 03:38:07.543
what the community needs.  It's 
very valuable for that.

03:38:09.210 --> 03:38:11.455
I'm going to change gears just a
little bit because I just 

03:38:11.456 --> 03:38:13.073
noticed somebody standing 
nearby.

03:38:13.074 --> 03:38:17.552
Okay.  Who have we got?
The question is, what is the 

03:38:17.553 --> 03:38:20.207
best way to achieve state 
management in a Flutter app.  

03:38:20.208 --> 03:38:22.208
And --
That's Filip.

03:38:23.067 --> 03:38:25.302
Let me finish the question.  
They're currently using scope 

03:38:25.303 --> 03:38:28.773
model.  But it seems like it is 
maybe not the best fit for their

03:38:28.774 --> 03:38:30.774
app.
Okay.

03:38:31.811 --> 03:38:33.811
They want to know, what is the 
right thing to do.

03:38:34.681 --> 03:38:37.791
Fill I, come join us.  You are 
the perfect person for this one.

03:38:41.446 --> 03:38:43.446
Fresh from the keynote, this is 
Filip, everybody.

03:38:43.897 --> 03:38:46.331
I think they already know him.
Careful, I think you might have 

03:38:46.332 --> 03:38:48.772
kicked a video cable.  You're 
going to make all the guys in 

03:38:49.579 --> 03:38:51.852
the back go nuts.  Actually, I 
think it did just disconnect.

03:38:51.853 --> 03:38:56.147
So, the question from somebody 
using scope model.  But they 

03:38:56.148 --> 03:38:58.148
said it's maybe not the right 
fit for their app right now.

03:38:59.795 --> 03:39:01.230
And I know state management is a
mission of yours.

03:39:01.231 --> 03:39:03.257
Yes.
How do you get to scope model in

03:39:03.258 --> 03:39:09.209
the first place?  And then what 
might you go on to after that?

03:39:09.414 --> 03:39:12.094
FILIP: Yeah, I think a lot of 
people are 

03:39:15.368 --> 03:39:18.213
asking for state management all 
the time.  That's a good 

03:39:18.214 --> 03:39:22.507
question.  It always depends on 
many things.  It depends on the 

03:39:22.508 --> 03:39:25.175
app.  It depends on the team.  
And, you know, like previous 

03:39:26.198 --> 03:39:28.198
experience, all that.

03:39:29.928 --> 03:39:31.347
I think if you're -- like, I 
think scope model is a really 

03:39:31.348 --> 03:39:34.618
good start.  And for many 
people, it's -- it is what they 

03:39:34.619 --> 03:39:38.279
need.  Because, you know, it's 
-- I think it's pretty simple to

03:39:38.280 --> 03:39:41.144
understand.  It gives you all 
the things that you want.

03:39:44.215 --> 03:39:45.638
It is a little less reactive 
than maybe some people would 

03:39:45.639 --> 03:39:47.639
want.

03:39:50.113 --> 03:39:52.113
So, a lot of people will kind of
use 

03:39:53.601 --> 03:39:56.075
something like, you know, 
interactive extensions.  And 

03:39:56.076 --> 03:39:58.076
maybe some people are super into
redux.

03:40:00.169 --> 03:40:02.218
And then we have a flood of 
redux package from the community

03:40:02.219 --> 03:40:05.098
for the build.  So, I mean, it 
depends on what you 

03:40:09.414 --> 03:40:11.414
want, what your input are and 
stuff like that.

03:40:12.072 --> 03:40:13.894
I think it really just depends 
on what are the patterns you 

03:40:13.895 --> 03:40:16.563
have used before and enjoy, you 
know?  I think that is one of 

03:40:16.564 --> 03:40:18.564
the biggest factors.

03:40:20.429 --> 03:40:22.476
If you have used redux in the 
past and loved it, nothing wrong

03:40:22.477 --> 03:40:26.764
with using redux.  It works 
great with  Flutter.  If you're 

03:40:26.765 --> 03:40:28.765
used to streams, block, 

03:40:30.028 --> 03:40:33.084
things like that are very good.
FILIP: Yes.  And I would be 

03:40:33.085 --> 03:40:35.085
really interested to know what 
are the limitations that this 

03:40:36.778 --> 03:40:41.781
person sees?  Because obviously 
there are things that  could, 

03:40:41.782 --> 03:40:43.782
you know, like, for example, 
scope model doesn't really work 

03:40:46.299 --> 03:40:49.373
that well with streams, I guess.
Because it notifies -- it 

03:40:49.374 --> 03:40:51.374
rebuilds 

03:40:53.260 --> 03:40:54.925
widgets sort of in its own way 
rather than providing streams 

03:40:54.926 --> 03:40:59.209
like block would.
FILIP: You can still use it.  

03:40:59.210 --> 03:41:00.833
But it kind of feels dirty to be
listening to stream and then 

03:41:00.834 --> 03:41:07.153
notify listeners.  So, anything 
is possible.  Yeah.  I guess I 

03:41:07.154 --> 03:41:09.154
don't have a single answer for 
that.

03:41:10.451 --> 03:41:12.451
Which is fine, right?

03:41:14.374 --> 03:41:15.792
Do you think in the future there
might be different ways of 

03:41:15.793 --> 03:41:17.793
managing state we don't know 
about yet?

03:41:18.035 --> 03:41:21.575
FILIP: Sure.  I'm always 
researching it.  And last week I

03:41:21.576 --> 03:41:24.053
found out that there's a new 
thing that is pretty impressive.

03:41:26.306 --> 03:41:28.543
It's not completely baked  yet. 
But, you know, it's always 

03:41:28.544 --> 03:41:30.544
something new.

03:41:31.618 --> 03:41:33.618
And I think Flutter is very 
young.

03:41:36.749 --> 03:41:38.749
So, it will have these kind of 
like a 

03:41:40.018 --> 03:41:43.072
plethora of different ways to 
manage state.  And in the end, 

03:41:43.073 --> 03:41:45.323
like many people would tell you,
you know, state management is  

03:41:47.152 --> 03:41:49.152
building your app, right?

03:41:52.055 --> 03:41:53.080
Like next to Azure you will 
build your layout and stuff like

03:41:53.081 --> 03:41:56.956
this.  But it's also after that,
it's, how do I manage the state 

03:41:56.957 --> 03:41:58.957
of the app?

03:42:00.652 --> 03:42:03.524
And so, you could go all the way
from, you know, just using state

03:42:03.525 --> 03:42:07.999
and stateful widgets, which I 
don't recommend.  But it can be 

03:42:08.000 --> 03:42:10.494
--
You can go a long way just with 

03:42:10.495 --> 03:42:14.356
stateful widgets and rolling 
your own.  That's not 

03:42:14.357 --> 03:42:16.357
necessarily a bad way to for a 
lot of people sort of onboarding

03:42:17.447 --> 03:42:19.707
themselves with Flutter.
FILIP: Yeah.  I think what we 

03:42:19.708 --> 03:42:21.746
are not doing a really good job 
at is that many people will 

03:42:22.992 --> 03:42:24.992
just, you know, start Flutter.

03:42:26.634 --> 03:42:28.634
They will see the clicking app 
where you increment the counter.

03:42:30.335 --> 03:42:32.335
And they  think, oh.  This is 
how -- this is the way you 

03:42:32.381 --> 03:42:37.945
manage state.  And that's true 
for a single widget.  But it's 

03:42:37.946 --> 03:42:39.946
often not true for the app.
Right, right.

03:42:42.016 --> 03:42:44.016
FILIP: And we're not doing much 
to like tell people, like, yeah.

03:42:45.680 --> 03:42:46.685
Maybe at least do something with
scope model, right?

03:42:46.686 --> 03:42:50.569
Yeah.  And I was actually 
talking to somebody earlier and 

03:42:50.570 --> 03:42:52.570
they were -- they made a point 
and I think I agree with them.

03:42:56.294 --> 03:42:58.733
But I wanted your opinion on it.
They said that Flutter sort of 

03:42:58.734 --> 03:43:03.023
takes things far enough that we 
can actually invent new types of

03:43:03.024 --> 03:43:05.100
state management that are 
specific to Flutter and to Dart.

03:43:08.577 --> 03:43:11.020
FILIP: Right.
Because of the characteristics 

03:43:11.021 --> 03:43:13.670
of Dart being functional and 
having extremes and things like 

03:43:13.671 --> 03:43:16.754
that.
FILIP: I was recently last week 

03:43:16.755 --> 03:43:22.294
I was talking to a person who 
came from Android, right?  And 

03:43:22.295 --> 03:43:24.295
for many people like that -- for

03:43:27.018 --> 03:43:29.070
me, when I came to Flutter 
through, you know, reactive 

03:43:29.071 --> 03:43:31.071
programming, it is kind of a 
change of mind-set.

03:43:31.946 --> 03:43:33.946
Right.

03:43:37.046 --> 03:43:39.722
FILIP: And so, again, we 
probably should be more better 

03:43:39.723 --> 03:43:41.723
at explaining like, okay.

03:43:42.776 --> 03:43:45.030
So, for example, it's not a big 
deal if you rebuild the whole 

03:43:45.031 --> 03:43:47.031
app once in a while.

03:43:49.115 --> 03:43:51.115
It's like, you know, for an 
Android 

03:43:52.985 --> 03:43:55.459
person, for example, like me 
like many years ago.

03:43:57.284 --> 03:43:59.736
A few week ago?
FILIP: You're not -- I hope that

03:43:59.737 --> 03:44:04.037
you're not re-creating the whole
UI from scratch.  But in 

03:44:04.038 --> 03:44:06.038
Flutter, sure.
Right.

03:44:07.137 --> 03:44:09.137
FILIP: That's what you do all 
the time.

03:44:09.367 --> 03:44:11.458
So, we need to let you go.  But 
we did have one question that 

03:44:11.459 --> 03:44:13.459
came up I think from --

03:44:15.724 --> 03:44:17.172
Ah, yes, important question.
They have requested that they 

03:44:17.173 --> 03:44:21.517
would love to see the source for
your timeline app if it's at all

03:44:21.518 --> 03:44:23.803
possible.
FILIP: I have to say, it's not 

03:44:23.804 --> 03:44:27.488
just mine, it's also 
2Dimensions.  And we are going 

03:44:27.489 --> 03:44:31.618
to release it.  But right now 
it's a little bit ugly.  So, we 

03:44:31.619 --> 03:44:33.619
want to like make it a little 
nicer first.

03:44:36.350 --> 03:44:37.563
It was that like last minute 
crunch that kind of killed --

03:44:37.564 --> 03:44:41.864
So, what you're telling us, it 
will be available.  You're just 

03:44:41.865 --> 03:44:44.099
not telling us when.  But 
hopefully soon.

03:44:46.614 --> 03:44:49.100
FILIP: Yeah, hopefully soon.
&gt;&gt; Thank you very much.  Please,

03:44:49.101 --> 03:44:51.372
take the microphone.  Thank you 
for coming out.

03:44:54.048 --> 03:44:56.048
Well, do you have any livestream
questions.

03:44:56.989 --> 03:45:00.495
Yeah, let's take a look at the 
livestream here.  People 

03:45:00.496 --> 03:45:01.711
recommending their favorite 
approaches to state management.

03:45:01.712 --> 03:45:04.780
Yeah.
Yep.

03:45:05.179 --> 03:45:07.179
That's good.

03:45:08.460 --> 03:45:10.150
We'll have people sort of 
arguing for different forms of 

03:45:10.151 --> 03:45:12.151
state management.

03:45:13.644 --> 03:45:15.270
How does Flutter compare to 
React native?  Something we have

03:45:15.271 --> 03:45:19.348
heard.  Excellent question.
So, you know, it is really 

03:45:19.349 --> 03:45:21.349
important to 

03:45:22.643 --> 03:45:24.643
compare different products to 
know their 

03:45:25.902 --> 03:45:28.140
-- but what I worry about is 
sometimes it turns into an 

03:45:28.141 --> 03:45:30.141
argument about what's better and
I don't think that helps 

03:45:30.382 --> 03:45:34.483
anybody.  Me personally, I think
React native was actually a 

03:45:34.484 --> 03:45:36.724
brilliant thing for them to do. 
They took something that was 

03:45:36.725 --> 03:45:41.859
made for the web, you know, 
React and they said, hey.  We 

03:45:41.860 --> 03:45:45.327
could take that technology and 
apply it to native apps.  And 

03:45:45.328 --> 03:45:47.328
that's a brilliant thing.

03:45:48.800 --> 03:45:50.800
Flutter is similar in some ways 
in that we're also reactive.

03:45:55.166 --> 03:45:57.821
But it's also solving a slightly
different problem.  And I don't 

03:45:57.822 --> 03:46:00.904
expect React Native to go away. 
I wouldn't tell people, if 

03:46:00.905 --> 03:46:05.824
you're in React Native, just use
Flutter.  They're for different 

03:46:05.825 --> 03:46:10.172
things and this is a good thing.
You were talking about this 

03:46:10.173 --> 03:46:14.683
similar thing the other day.
This question comes up a lot.  

03:46:14.684 --> 03:46:16.684
Obviously we believe in Flutter 
and 

03:46:17.936 --> 03:46:19.767
the SDK and what it can do and 
that it can play an important 

03:46:19.768 --> 03:46:23.651
role in software and helping 
people.  But it's still just one

03:46:23.652 --> 03:46:27.562
more tool in everybody's tool 
belt.  The fact that Flutter 

03:46:27.563 --> 03:46:29.563
exists doesn't 

03:46:31.063 --> 03:46:34.744
mean that React Native is not a 
good way to make apps.  For many

03:46:34.745 --> 03:46:36.745
developers it is.

03:46:38.448 --> 03:46:40.701
Android and iOS didn't stop 
being good ways to create apps. 

03:46:40.702 --> 03:46:42.702
Flutter is another way to do it.

03:46:43.990 --> 03:46:45.875
We think it's a really good one.
That's it.  It's two positives.

03:46:45.876 --> 03:46:52.011
So, I've noticed some other 
people standing by.  Say, we've 

03:46:52.012 --> 03:46:54.012
got several questions that 

03:46:55.293 --> 03:46:56.513
came from people that to me are 
more questions about the 

03:46:56.514 --> 03:46:58.514
community.

03:46:59.799 --> 03:47:02.088
So, for example, one person 
asks, when are their going to be

03:47:02.089 --> 03:47:04.089
a way to play sounds in Flutter 
and stuff like that.

03:47:06.987 --> 03:47:08.987
There is a way to play sounds in
Flutter.

03:47:10.853 --> 03:47:14.359
There are plugins in the pub 
directory for  playing sounds.  

03:47:14.360 --> 03:47:15.785
And as far as I know, they were 
all written by third parties.

03:47:15.786 --> 03:47:19.464
The community, open source 
developers.  And we have one 

03:47:19.465 --> 03:47:23.938
right here.  I see him.  Come 
on, Simon.  So, some of you may 

03:47:23.939 --> 03:47:28.823
know this man.  This is our next
guest.  This is Simon Lightfoot,

03:47:28.824 --> 03:47:33.376
a London local.  How are you?
Good, thank you.

03:47:34.599 --> 03:47:36.599
Welcome to London.
Thank you.

03:47:37.690 --> 03:47:40.157
We were just talking about the 
community.  Can you talk a 

03:47:40.158 --> 03:47:41.193
little bit about your 
involvement with the community?

03:47:46.726 --> 03:47:48.571
We've done a lot to solve -- 
build the online conversation 

03:47:48.572 --> 03:47:53.127
that Flutter has invoked in 
everyone, I think.  We have 

03:47:53.128 --> 03:47:55.128
started up the study group and 

03:47:56.814 --> 03:47:58.239
we have the Flutter convincing 
Medium.

03:47:58.240 --> 03:48:00.712
That's right.
And we want everyone to publish 

03:48:00.713 --> 03:48:02.713
and submit articles and we'll 
review them, 

03:48:05.640 --> 03:48:07.640
edit them and send them out on 
the schedule which really helps.

03:48:08.288 --> 03:48:09.730
Making sure that everyone's 
getting information about 

03:48:09.731 --> 03:48:11.996
Flutter that everyone really 
needs.  Sort of get going 

03:48:11.997 --> 03:48:15.122
immediately.
How do we let the community know

03:48:15.123 --> 03:48:19.458
that, you know, they shouldn't 
ask us when is Google gonna 

03:48:19.459 --> 03:48:23.984
build this or that?  You know, 
this is going to succeed if we 

03:48:23.985 --> 03:48:25.985
all work together on things like
that.

03:48:26.453 --> 03:48:28.909
This is it -- what we've seen, 
especially with what we have 

03:48:28.910 --> 03:48:30.751
started up is the Flutter 
community GitHub organization.

03:48:30.752 --> 03:48:32.752
Right.

03:48:34.835 --> 03:48:36.835
And what we've done is, any of 
these 

03:48:38.116 --> 03:48:39.960
projects that the community had 
built that want to be owned by 

03:48:39.961 --> 03:48:42.008
the community.  All right?  So, 
this sort of covers that 

03:48:42.009 --> 03:48:44.009
scenario 

03:48:45.058 --> 03:48:46.279
of a developer who wants to 
maintain their open source 

03:48:46.280 --> 03:48:50.210
project.  They started up with 
an idea, I want this on my 

03:48:50.211 --> 03:48:53.510
Flutter app.  One app, now it's 
out there.  Who is going to 

03:48:53.511 --> 03:48:55.511
maintain this product?

03:48:56.782 --> 03:48:59.638
People submit PRs, people submit
fixes.  No one's merging them.  

03:48:59.639 --> 03:49:02.961
So, we're here to help.
That's great.  That's an awesome

03:49:02.962 --> 03:49:04.962
thing to do.

03:49:06.303 --> 03:49:08.944
Well, I see another -- do you 
mind if I swap you out?

03:49:10.806 --> 03:49:13.061
See you guys later.
By the way, thank you so much, 

03:49:13.062 --> 03:49:14.702
Simon.
We have another community 

03:49:14.703 --> 03:49:18.791
member.
Yes.

03:49:22.081 --> 03:49:24.081
This is Hilal, thank you.

03:49:26.603 --> 03:49:28.603
Internet, Hilal, Internet.
Nice to see you.

03:49:32.346 --> 03:49:34.346
When I saw you, I was happy, you
are the 

03:49:35.659 --> 03:49:37.659
-- can you tell us about your 
widget?

03:49:38.957 --> 03:49:41.024
It's an open site for listing 
Flutter apps.  Any developer 

03:49:41.025 --> 03:49:43.668
over the world is free to 
publish their app.  Doesn't need

03:49:43.669 --> 03:49:46.737
to be in the app store.  Doesn't
need to be open source.  If 

03:49:46.738 --> 03:49:48.975
you're proud of something you 
built, showcase it and submit it

03:49:48.976 --> 03:49:50.976
to the site and we will show it.

03:49:54.915 --> 03:49:57.346
And we all need a place to do 
that  occasionally.  You about 

03:49:57.347 --> 03:50:03.301
something we have built.
So far, about 200 apps.  On 

03:50:03.302 --> 03:50:05.759
Flutter, there are thousands of 
apps.  To more interesting than 

03:50:05.760 --> 03:50:09.839
the number is the rate of 
growth.  A few months to get to 

03:50:09.840 --> 03:50:11.840
a hundred, and 

03:50:12.913 --> 03:50:14.913
100 to 200, half that time.
It's going down.

03:50:14.970 --> 03:50:17.026
Absolutely.
You have 200 apps.

03:50:20.902 --> 03:50:22.902
What I found interesting, when 
an app is 

03:50:24.389 --> 03:50:27.046
created, it's shared with 
Twitter follow earlies.  This 

03:50:27.047 --> 03:50:29.922
app can't be Flutter.  I go 
scrambling and message a 

03:50:30.335 --> 03:50:33.596
developer.  Every time, it's a 
Flutter  app.  And the problem 

03:50:33.597 --> 03:50:36.467
is, there's no look of a Flutter
app.  A Flutter app can look 

03:50:36.468 --> 03:50:40.762
like anything.  You're just 
limited by your imagination and 

03:50:40.763 --> 03:50:42.793
the  listing of apps.
Awesome.

03:50:45.661 --> 03:50:47.105
So, a new campaign, what does a 
Flutter app look like?  Anything

03:50:47.106 --> 03:50:49.106
you want.
Absolutely.

03:50:52.191 --> 03:50:54.222
What -- you also did a podcast 
or started a podcast series, 

03:50:54.223 --> 03:50:56.223
right?

03:50:57.692 --> 03:50:59.692
Initially it was going to be a 
podcast.  Thomas Brooke --

03:51:02.187 --> 03:51:04.187
Then it morphed into a website.
Pretty much.

03:51:07.899 --> 03:51:11.839
Simon was working on a Pod cast 
and contributed to the website. 

03:51:11.840 --> 03:51:13.860
Now it's finished, we are going 
back to the podcast idea.  

03:51:13.861 --> 03:51:15.861
Working on it.  It's been a 
great response.

03:51:16.778 --> 03:51:18.778
Who have you had on?
Some amazing developers.

03:51:26.250 --> 03:51:28.725
Marco, Rohan, and if you go to 
ifthetwitch.com, you can see it 

03:51:28.726 --> 03:51:30.726
at the top right.

03:51:31.808 --> 03:51:32.428
Go to the site, anyone can 
submit a request to be 

03:51:32.429 --> 03:51:35.511
interviewed.  And the goal is 
just for developers to share 

03:51:35.512 --> 03:51:38.655
their experiences.  You know, 
what their backgrounds are.  

03:51:38.656 --> 03:51:40.656
What they're learning.

03:51:43.155 --> 03:51:45.155
And also share best practices 
and tips and tricks.

03:51:46.634 --> 03:51:47.882
Actually, we've reached the end 
of our second block.  Stay right

03:51:47.883 --> 03:51:50.968
here.  And one of the things I 
wanted to make sure to mention.

03:51:57.488 --> 03:52:00.350
The things that I love about 
installwidgets.com, you can see 

03:52:00.351 --> 03:52:03.214
if it's open source or not, and 
the link to the app, it  links 

03:52:04.687 --> 03:52:08.562
to the source.  Installwidgets.
com, go to the apps, I would 

03:52:08.563 --> 03:52:12.102
love to see how they did that.  
You can see how they did that.

03:52:12.300 --> 03:52:14.344
One more thing.
Sure.

03:52:17.218 --> 03:52:19.662
These take time and resources, 
and I work with  Sham and Dave. 

03:52:19.663 --> 03:52:21.663
I love you very much.

03:52:23.776 --> 03:52:26.321
We work and we collaborate to 
work on projects.  Still doing a

03:52:26.322 --> 03:52:28.322
lot of Flutter work.  But 
helping the community, helping 

03:52:29.570 --> 03:52:30.823
myself more and it's just been a
great experience.

03:52:30.824 --> 03:52:34.742
Absolutely.  It's a lot of fun. 
All right.  Thank you so much.  

03:52:34.743 --> 03:52:36.743
We're going to take another 
short break.

03:52:39.041 --> 03:52:41.063
When we come back, we will have 
Ian Hickson, tech lead for 

03:52:41.064 --> 03:52:43.064
Flutter, sitting here.

03:52:45.154 --> 03:52:48.226
If you would like to ask the 
tech lead for Flutter.  Somebody

03:52:48.227 --> 03:52:50.250
in the project and done a ton of
the  layering and rendering of 

03:52:50.251 --> 03:52:53.559
code, get those in now.  Stay 
with us, we'll be back in just a

03:52:56.775 --> 03:52:58.775
few minutes

03:53:01.716 --> 03:53:03.716
.

03:59:04.786 --> 03:59:09.110
All right, everybody, we're 
back.  Ian Hickson, and a bunch 

03:59:09.111 --> 03:59:11.111
of questions.

03:59:15.269 --> 03:59:17.269
This is from Twitter, from 
Islamabad.  Hello, Pakistan.

03:59:19.555 --> 03:59:22.201
He wrote a column with unfixed 
height and a hundred plus list 

03:59:22.202 --> 03:59:25.904
aisles is a problem.  Do you 
have any suggestions?  I'm 

03:59:25.905 --> 03:59:27.905
guessing this is a performance 
situation.

03:59:28.959 --> 03:59:31.210
If you just put a bunch of list 
tiles in a column.  There's a 

03:59:31.211 --> 03:59:33.211
lot of work that Flutter's doing
at that point.

03:59:36.155 --> 03:59:36.982
You really only want to be 
building the widgets that are 

03:59:36.983 --> 03:59:38.983
actually on the screen.

03:59:40.873 --> 03:59:42.739
That way we don't waste any CPU 
cycles building things, laying 

03:59:42.740 --> 03:59:44.740
them out, 

03:59:46.611 --> 03:59:48.611
painting them if they're not on 
the screen.

03:59:50.089 --> 03:59:55.812
Listview.builder, and it calls 
for each item.  And won't call 

03:59:55.813 --> 03:59:57.834
it again unless it changes.  
Until it goes off the screen and

03:59:57.835 --> 03:59:59.835
then back on the screen later, 
call you again.

04:00:03.209 --> 04:00:06.072
So, with that, it's not 
recycling anything like a 

04:00:06.073 --> 04:00:08.073
recycler view on Android and a 
similar control on iOS.

04:00:10.952 --> 04:00:12.166
It's not recycling any widgets, 
it's  rebuilding if necessary.

04:00:12.167 --> 04:00:18.411
That's right.  We don't need to 
keep the  objects around.  

04:00:18.412 --> 04:00:20.412
Garbage collection makes that 
very 

04:00:21.420 --> 04:00:25.683
effici.  We allocate the objects
and then off screen, we get rid 

04:00:25.684 --> 04:00:29.451
of them.
Hopefully that helped out.  

04:00:29.452 --> 04:00:31.582
Here's an interesting one.  This
one comes from Sudan.

04:00:34.652 --> 04:00:36.652
So, again.

04:00:38.268 --> 04:00:40.268
This is

04:00:41.804 --> 04:00:45.768
3Mrab -- hopefully I got a good 
pronunciation that have.  Can we

04:00:45.769 --> 04:00:47.405
build games with Flutter and 
what will be the performance be?

04:00:47.406 --> 04:00:51.082
Depends on the game.  Not a 3D 
game with Flutter.

04:00:53.116 --> 04:00:55.393
Sort of expose 3D.
You can do 2D games.

04:01:01.128 --> 04:01:03.128
In fact, one of our earliest 
demo was a 2D game.

04:01:05.181 --> 04:01:07.181
You may have seen it on the 
videos in the keynote today.

04:01:07.424 --> 04:01:10.907
The sliding tile game.
That's right.  And also a much 

04:01:10.908 --> 04:01:14.582
earlier one that we had was kind
of a space shooter game.  That 

04:01:14.583 --> 04:01:16.583
was also --
We saw that in the keynote.

04:01:18.728 --> 04:01:21.870
We don't support that really as 
like a first class citizen.  We 

04:01:21.871 --> 04:01:24.113
don't have a framework built for
that.  But there are frameworks 

04:01:24.114 --> 04:01:28.849
in the community, the community 
has provided, to do exactly 

04:01:28.850 --> 04:01:30.850
that.

04:01:32.997 --> 04:01:34.997
I think floatus rights is one of
them?

04:01:35.904 --> 04:01:39.173
I have seen that package.
The performance is fine.  We are

04:01:39.174 --> 04:01:41.174
designed to render pixels.

04:01:42.850 --> 04:01:44.850
Games do that just like UIs do 
that.

04:01:47.560 --> 04:01:49.560
Not a difference from the 
perspective.

04:01:50.232 --> 04:01:52.689
I heard that the release for the
Flutter app is not different 

04:01:52.690 --> 04:01:55.944
from the typical mobile game.
The way Flutter apps work is 

04:01:55.945 --> 04:01:57.945
similar to how a unity game 
would work.

04:02:03.317 --> 04:02:05.976
We literally drive all the 
pixels and have the hearts of 

04:02:05.977 --> 04:02:07.977
the 2D seam which 

04:02:09.659 --> 04:02:12.310
under the hood is a 3D team.  
You leave the stuff that hasn't 

04:02:12.940 --> 04:02:15.586
changed.
Sort of unity, everything built 

04:02:15.587 --> 04:02:19.473
on top of the renderer is going 
towards the use case of games 

04:02:19.474 --> 04:02:22.340
and for that.  And Flutter is 
mostly towards apps and the use 

04:02:22.341 --> 04:02:26.876
cases.  That's really 
interesting.  All right.  So, 

04:02:26.877 --> 04:02:28.877
what else do we have?  Here's a 
good  one.

04:02:32.189 --> 04:02:34.224
This is Brazil.  And it's a 
question about when would 

04:02:37.275 --> 04:02:39.275
you build a Flutter app versus a
mobile-friendly website?

04:02:42.199 --> 04:02:43.005
So, what is actually  harder 
with HTML, CSS and JavaScript 

04:02:43.006 --> 04:02:45.696
that would be easier in Flutter?
Like why would you prefer one to

04:02:45.697 --> 04:02:47.697
the other?

04:02:51.846 --> 04:02:55.509
So, I mean, that really depends 
on who your target audience is. 

04:02:55.510 --> 04:02:58.201
And obviously if you're a big 
company writing a big app, might

04:02:58.202 --> 04:03:00.202
want to do both.

04:03:01.245 --> 04:03:01.854
Have the mobile web app for 
those who haven't downloaded 

04:03:01.855 --> 04:03:03.855
your app.
That's true.

04:03:06.740 --> 04:03:11.030
Or who are on a device.  An OS 
device or a  laptop.  Whatever. 

04:03:11.031 --> 04:03:13.075
And you might want your mobile 
app for people who want the more

04:03:13.076 --> 04:03:15.076
native experience.

04:03:17.781 --> 04:03:20.280
With butterfly -- sorry, not 
butterfly.  With  Hummingbird we

04:03:20.281 --> 04:03:24.158
are maybe going to make that 
easier.  See how that goes.

04:03:24.988 --> 04:03:27.632
Look forward to that.
I have a couple of questions 

04:03:27.633 --> 04:03:29.633
that came in.
Fire away.

04:03:30.482 --> 04:03:32.482
A couple of live questions.

04:03:33.756 --> 04:03:35.756
The first one is, is in the 
future, 

04:03:36.849 --> 04:03:38.709
support for Android or Apple  
Watch?

04:03:38.710 --> 04:03:40.710
I have no idea.
We could, right?

04:03:42.779 --> 04:03:44.812
There's no reason we couldn't do
that.  We're really targeting 

04:03:44.813 --> 04:03:47.467
mobile right now starting to 
look at desktop.

04:03:48.697 --> 04:03:52.428
Watches are mobile.
That's true.  One thing we have 

04:03:52.429 --> 04:03:55.078
done, we have a demo -- very 
early demo we did to prove that 

04:03:59.793 --> 04:04:01.793
we are not fixed to ports, we 
have a 

04:04:03.070 --> 04:04:04.731
second demo which renders UI 
literally using polar 

04:04:04.732 --> 04:04:06.732
coordinates.

04:04:08.420 --> 04:04:10.420
Which you have a round clock 
face, it's perfect.

04:04:10.491 --> 04:04:12.491
An hour long watch.  All 
coordinates.

04:04:16.213 --> 04:04:17.635
No boxes, just sectors of a 
circle and  truncated them as 

04:04:17.636 --> 04:04:19.636
they go.
Yes.

04:04:20.942 --> 04:04:22.367
What we're saying is we're 
probably not going to do 

04:04:22.368 --> 04:04:24.398
something like that, but we 
would love it if somebody else 

04:04:24.399 --> 04:04:27.090
tried it.
I certainly would love 

04:04:27.091 --> 04:04:29.400
contributions to do  that.  We 
don't have anything on the 

04:04:29.401 --> 04:04:33.662
roadmap.  But we're watching.
It's certainly something, 

04:04:33.663 --> 04:04:38.594
there's a reason it might be a 
good thing to do in this weather

04:04:38.595 --> 04:04:40.847
if you can do polar coordinates.
You have one more and I have one

04:04:40.848 --> 04:04:43.305
more.  And then let you go.  
What's your other question?

04:04:45.781 --> 04:04:47.781
My other question is we all know
that Flutter came from Chrome.

04:04:49.678 --> 04:04:52.337
And the question was, how is the
original team used their 

04:04:52.338 --> 04:04:54.338
previous knowledge from Chrome 
to build Flutter?

04:04:57.275 --> 04:04:58.487
And which features were 
inherited from Chrome to 

04:04:58.488 --> 04:05:00.488
Flutter?  If any?

04:05:04.220 --> 04:05:06.739
Well, from the code perspective,
we started.  And basically 

04:05:06.740 --> 04:05:11.184
decided to leave in code.  I 
think there's no code left.  We 

04:05:11.185 --> 04:05:13.654
literally have no code left.  We
still use the same graphics 

04:05:13.655 --> 04:05:18.477
engine, Skia.  I think there's 
literally nothing else left.  We

04:05:18.478 --> 04:05:20.116
don't use the same scripting 
engine, not the same text layout

04:05:20.117 --> 04:05:22.969
anymore.
But it's fair to say that there 

04:05:22.970 --> 04:05:24.970
was some 

04:05:26.031 --> 04:05:28.095
experience that you had with 
Chrome that sort of informed how

04:05:28.096 --> 04:05:32.647
you built this.
Absolutely.  Look at the 

04:05:32.648 --> 04:05:34.900
internal style guide on our 
Wiki, there's a document that 

04:05:34.901 --> 04:05:38.789
talks about the design 
philosophy.  If you look at some

04:05:38.790 --> 04:05:43.691
of the earliest bullet points, 
it specifically talked about how

04:05:43.692 --> 04:05:45.692
to avoid mistakes on the web 
before.  Mentions document.

04:05:46.365 --> 04:05:51.679
right, for example.  Avoid 
document.right style APIs.  

04:05:51.680 --> 04:05:54.359
We're very much learning from 
that.  We've also hired plenty 

04:05:54.360 --> 04:05:56.360
of people who 

04:05:57.730 --> 04:05:59.931
have worked on the Android team 
and other platforms.  And we're 

04:05:59.932 --> 04:06:00.344
using everyone's knowledge like 
really trying to learn from all 

04:06:00.345 --> 04:06:02.624
of our experiences.
That's great.

04:06:05.500 --> 04:06:07.329
Yeah, so, we have one more and 
then let you get back to 

04:06:07.330 --> 04:06:09.381
enjoying the party.  What 
feedback does the engineering 

04:06:10.799 --> 04:06:12.423
team most value coming from the 
developer community?

04:06:12.424 --> 04:06:15.716
Oh, wow.
We asked Eric, what can 

04:06:15.717 --> 04:06:19.867
developers who want to get 
involved do to have a chance at 

04:06:19.868 --> 04:06:21.303
some really good impact?  
Developers that are using 

04:06:21.304 --> 04:06:25.010
Flutter, what are some of the 
things that you need from them?

04:06:25.230 --> 04:06:29.569
Feedback.  We love all feedback.
Even positive feedback.

04:06:34.045 --> 04:06:36.690
I don't mind if you file a bug, 
say we're great.  When you file 

04:06:36.691 --> 04:06:38.932
a bug, what's useful for us, 
make sure there's reproducible 

04:06:38.933 --> 04:06:44.059
test cases.  Have a piece of 
code that we can download and 

04:06:44.060 --> 04:06:45.511
run that  shows the bug really 
clearly.  That's really useful 

04:06:45.512 --> 04:06:49.832
for us.  If we just have a vague
comment like, hey.  Sometimes my

04:06:49.833 --> 04:06:53.720
app crashes.  I don't know what 
your app does.  I don't know 

04:06:53.721 --> 04:06:54.941
what the device that it crashes 
on.  I don't know what's going 

04:06:54.942 --> 04:07:00.454
on.  If you tell me, hey, when I
run this specific function on  

04:07:00.455 --> 04:07:04.115
a, I don't know, a Samsung G5 or
whatever, it  crashes.  That's 

04:07:04.116 --> 04:07:08.611
helpful.  I can get the phone, 
run that app and test it and try

04:07:08.612 --> 04:07:11.105
to fix it.
You have to be able to reproduce

04:07:11.106 --> 04:07:15.410
it, in other words.
It is very helpful.  I should 

04:07:15.411 --> 04:07:17.875
say, if you can't reproduce it, 
it's still worth filing the bug.

04:07:20.914 --> 04:07:22.780
Because if ten people file ten 
vague bugs that all say, hey, 

04:07:22.781 --> 04:07:27.315
when I do this, it crashes.  We 
might notice a pattern.  For 

04:07:27.316 --> 04:07:31.219
example, there's one bug that 
we're still dealing with.  We 

04:07:31.220 --> 04:07:33.476
haven't figured out what's going
on.  We figured out, it only 

04:07:33.477 --> 04:07:35.477
happens with 

04:07:37.137 --> 04:07:39.137
Windows 10 in China I think when
you're 

04:07:40.138 --> 04:07:42.138
doing a hot reload, something 
like that.

04:07:43.850 --> 04:07:46.107
But we looked at a whole bunch 
of bugs filed at different times

04:07:46.108 --> 04:07:49.191
and 90% of them mentioned 
Windows.  And 90% of them  

04:07:49.192 --> 04:07:51.012
mentioned, oh, it's a problem 
with China or  mentioned they 

04:07:51.013 --> 04:07:54.302
were in China.  And then we 
noticed, we don't have any of 

04:07:54.303 --> 04:07:56.748
this bug outside China.  So, 
file the bug.  That's the most 

04:07:56.749 --> 04:07:58.977
important thing.  And then once 
you file the bug, if you 

04:08:02.875 --> 04:08:03.484
can, provide a reproducible 
snapshot.

04:08:03.485 --> 04:08:07.858
Right.  That's great.  Thank you
so much for sitting down.  

04:08:07.859 --> 04:08:10.531
Everybody out there enjoyed it. 
Head straight out that way and 

04:08:10.532 --> 04:08:14.207
take the microphone with you.
Good-bye, folks.

04:08:14.828 --> 04:08:16.251
Thanks again.  For that was 
great.

04:08:16.252 --> 04:08:18.716
All right.  Let's do livestream.

04:08:21.780 --> 04:08:24.257
&gt;&gt; Yeah, let's look at the 
livestream.  We haven't done 

04:08:24.258 --> 04:08:26.258
much livestream.

04:08:27.312 --> 04:08:29.312
We are getting livestream from 
Twitter.

04:08:30.427 --> 04:08:32.662
Let's get back into the YouTube 
livestream.  What do I have 

04:08:32.663 --> 04:08:36.963
here?
Well, if you're looking for a 

04:08:36.964 --> 04:08:39.825
second.  I've got a question 
that I can answer really fast.

04:08:40.020 --> 04:08:43.493
Go for it.
We just had somebody who wrote 

04:08:43.494 --> 04:08:46.366
in just a few minutes ago.  They
said, is there any chance of 

04:08:47.214 --> 04:08:49.887
having Kotlin on Flutter?  And I
have a stock answer for that 

04:08:49.888 --> 04:08:51.888
one.

04:08:54.443 --> 04:08:57.095
Which is, if you're willing to 
give up hot reload, sure.  But 

04:08:57.096 --> 04:08:59.096
so far nobody's taken me up for 
that.

04:09:01.489 --> 04:09:02.733
Stateful hot reload is one of 
the features that Flutter can 

04:09:02.734 --> 04:09:04.734
get that's not 

04:09:06.465 --> 04:09:08.465
easy to find in other languages.

04:09:09.526 --> 04:09:11.588
Hot loading code, or writing 
JVM.  Dart is built for that 

04:09:11.589 --> 04:09:14.467
kind of thing with its just in 
time compiler and all that 

04:09:14.468 --> 04:09:16.967
stuff.  It can still compile the
native code at the end.

04:09:20.225 --> 04:09:24.110
So, there is still Kotlin code 
in the Flutter app.  If you want

04:09:24.111 --> 04:09:27.583
channels, you're not tied to 
Java necessarily there.  But the

04:09:27.584 --> 04:09:29.855
particular features that Flutter
needs, it really gets from Dart.

04:09:30.053 --> 04:09:32.053
Yeah.

04:09:35.018 --> 04:09:37.264
There's actually an article that
I  wrote, self-plug right here. 

04:09:37.265 --> 04:09:39.352
Why Flutter uses Dart.  And if 
you're curious about what are 

04:09:42.859 --> 04:09:45.498
the advantages of Dart, you can 
read that.  Search for why 

04:09:45.499 --> 04:09:49.184
Flutter uses Dart and that will 
help answer that question.  Have

04:09:49.185 --> 04:09:51.185
you found anything?
Yeah, we have a couple here.

04:09:51.604 --> 04:09:53.604
Go for it.

04:09:55.694 --> 04:09:57.336
One from Pedro who posted, is 
Flutter I/O going to replace 

04:09:57.337 --> 04:09:59.337
Android?  Well, Android 
development --

04:10:00.996 --> 04:10:03.873
So, this is just like the 
question we answered earlier 

04:10:03.874 --> 04:10:05.874
when people were asking us about
React Native and stuff like 

04:10:06.317 --> 04:10:09.604
that.  No, Flutter is not going 
to replace Android.

04:10:10.629 --> 04:10:12.446
They're different things.  
Android is an operating system 

04:10:12.447 --> 04:10:14.447
and Flutter is a software 
development.

04:10:14.685 --> 04:10:16.734
Right.  They're not even 
related.

04:10:18.851 --> 04:10:20.851
They're two different bastions.

04:10:22.768 --> 04:10:24.383
And even if you wonder straight 
ahead, Android development is 

04:10:24.384 --> 04:10:26.831
going to be replaced by Flutter.
None of us think that's going to

04:10:28.052 --> 04:10:31.739
happen either.  It's not like, 
you know, something new comes 

04:10:31.740 --> 04:10:33.570
along and it gets rid of 
something else.  There are 

04:10:33.571 --> 04:10:36.239
things that Android does really 
well.  And that it would be hard

04:10:36.240 --> 04:10:38.240
to do in a cross-platform-type 
tool.

04:10:41.818 --> 04:10:43.049
So, there's definite use cases 
that will always be valuable for

04:10:43.050 --> 04:10:46.563
that.  So, we can name examples 
of  that, but I think they've 

04:10:46.564 --> 04:10:48.564
gotten the idea.  Let's go on to
the next one.

04:10:51.535 --> 04:10:53.568
Yeah, I just skipped past a 
question asking about background

04:10:53.569 --> 04:10:56.485
tasks and Flutter, things like  
that.  Which we can touch on a 

04:10:56.486 --> 04:11:01.181
little bit.  So, certainly, 
again, a Flutter app built for 

04:11:01.182 --> 04:11:03.638
Android is still an Android app.
And a Flutter app built for iOS 

04:11:03.639 --> 04:11:07.141
is still just a typical iOS app.
And you can add code to do a 

04:11:07.142 --> 04:11:12.435
number of things that way on  
that -- on the platform side.  

04:11:12.436 --> 04:11:14.436
We use platform channels to talk
back and forth.

04:11:16.156 --> 04:11:17.817
And speaking of back ground 
tasks, I was talking with Ben 

04:11:17.818 --> 04:11:19.818
the other day.

04:11:21.115 --> 04:11:23.764
Have you seen Ben's background 
task that he wrote about 

04:11:23.765 --> 04:11:26.470
geofencing?  Schedule tests.  If
you haven't seen it, it's great.

04:11:29.114 --> 04:11:31.362
He wrote a very  detailed 
example and had source code up 

04:11:31.363 --> 04:11:33.363
on GitHub for how to 

04:11:34.450 --> 04:11:37.119
make a Flutter app use 
geofencing to do certainly 

04:11:37.120 --> 04:11:39.120
things in response to GPS 
events.

04:11:39.178 --> 04:11:41.633
And that's definitely a need for
background pass, exactly.

04:11:44.702 --> 04:11:46.962
And he had an app that was 
opening his garage home when he 

04:11:46.963 --> 04:11:49.468
arrived home with his bicycle.  
And so, the source for that is 

04:11:50.336 --> 04:11:52.336
actually on GitHub.  You can do 
a search for it.

04:11:54.828 --> 04:11:56.828
Geofences and Flutter, you'll 
find it.

04:11:57.885 --> 04:11:59.307
A great job on the article and 
put the code up where people can

04:11:59.308 --> 04:12:02.976
see it.  That might well answer 
your question and show you how 

04:12:02.977 --> 04:12:05.264
to get started with that.
Okay.  I've got another question

04:12:05.265 --> 04:12:07.265
here.
Okay.

04:12:08.100 --> 04:12:09.548
It's from somebody, they're 
asking, what are the tools and 

04:12:09.549 --> 04:12:11.549
what are the processes 

04:12:12.621 --> 04:12:14.672
I could use to optimize my 
Flutter app?  You know, and 

04:12:14.673 --> 04:12:17.941
they're talking about they were 
working on an app.  It took up 

04:12:17.942 --> 04:12:19.568
more space than they wanted.  
And the performance was not 

04:12:19.569 --> 04:12:22.218
where they wanted.
I just saw Devin.  Perfect.

04:12:23.855 --> 04:12:28.544
You saw -- yeah, exactly.  I saw
Devin too.  We actually have the

04:12:28.545 --> 04:12:30.374
guy in charge of Flutter 
tooling.  Devin, would you come 

04:12:30.375 --> 04:12:32.812
on up?
We're going to spend a little 

04:12:32.813 --> 04:12:36.484
time with my  laptop here.  Let 
me get back into -- this is just

04:12:38.537 --> 04:12:40.537
my Scratch Pad app.  Ladies and 
gentlemen, Devin from the 

04:12:42.266 --> 04:12:44.266
tooling team.  Our Portland 
office.

04:12:47.378 --> 04:12:50.033
Real quick, what are all the 
responsibilities that you have? 

04:12:50.034 --> 04:12:52.034
What are all the things you 
cover in your work?

04:12:52.691 --> 04:12:55.135
We cover a bunch of things on 
the tooling team.  We make 

04:12:55.136 --> 04:12:57.136
toolings to plugins for the 

04:13:00.862 --> 04:13:03.330
major IDE support, IntelliJ and 
Android Studio both.  And 

04:13:03.331 --> 04:13:07.251
virtual Studio as well.  We work
on static analysis tooling.  

04:13:07.252 --> 04:13:11.140
That is a command line tool and 
a language server.  Command line

04:13:11.141 --> 04:13:13.197
tools are analyzed.  The 
language server is actually 

04:13:13.403 --> 04:13:15.403
interesting.

04:13:16.675 --> 04:13:20.351
It's a separate process which 
powers IDEs through a protocol. 

04:13:20.352 --> 04:13:23.208
It's how we're able to provide 
support for multiple IDEs in an 

04:13:23.209 --> 04:13:25.209
economical way.

04:13:26.222 --> 04:13:29.115
We support some other tools like
Dart doc and Dart pad, language 

04:13:29.116 --> 04:13:31.116
playground.

04:13:32.391 --> 04:13:34.454
I use DartPad all the time.  A 
lot of the  things we think of 

04:13:34.455 --> 04:13:36.455
as 

04:13:37.714 --> 04:13:39.175
making developer's lives  
easier, you are the one 

04:13:39.176 --> 04:13:41.176
overseeing production of those.

04:13:42.669 --> 04:13:44.669
For much of it, yeah.

04:13:46.219 --> 04:13:50.709
So, I use IntelliJ.  That's what
I like to use.  Let me get an 

04:13:50.710 --> 04:13:54.794
app going here.  Say it was  
misbehaving and I didn't know 

04:13:54.795 --> 04:13:56.795
why.

04:13:59.327 --> 04:14:01.578
It was dropping frames or 
queuing up gigabytes of RAM on 

04:14:01.579 --> 04:14:05.250
my phone and heating it up, I 
could fry an egg on it.  What 

04:14:05.251 --> 04:14:07.101
are some tools to look into to 
get a handle on that problem?

04:14:07.102 --> 04:14:11.181
That's an area that we have been
working on in the past quarter 

04:14:11.182 --> 04:14:15.714
or two and going forward as 
well.  Performance tooling.  We 

04:14:15.715 --> 04:14:18.433
want to make it so that when 
Flutter was very small, users, 

04:14:18.434 --> 04:14:21.705
if they had performance 
problems, they could come to the

04:14:21.706 --> 04:14:23.759
Flutter team and we could solve 
their performance problems.

04:14:24.570 --> 04:14:27.608
Doesn't quite scale.
As flutter apps gets bigger, we 

04:14:27.609 --> 04:14:30.936
want them to solve the problems 
through good documentation or 

04:14:30.937 --> 04:14:35.221
good tooling.  And going to the 
Flutter website, we have docs 

04:14:35.222 --> 04:14:37.222
about ways you can make your 
apps more performant.

04:14:40.396 --> 04:14:44.263
Best practices.  Flutter.io.
There we are.

04:14:46.746 --> 04:14:48.430
And we're also in parallel 
building out new tooling as well

04:14:48.431 --> 04:14:50.431
to help you with that.

04:14:51.707 --> 04:14:54.224
And we're concentrating mostly 
on UI jank tooling.  So, my app 

04:14:54.225 --> 04:14:56.225
is missing frames.

04:14:57.508 --> 04:14:58.567
Basically to help be better 
aware when they're missing 

04:14:58.568 --> 04:15:02.901
frames.  And if they  missed a 
frame, why are they doing that?

04:15:05.973 --> 04:15:08.213
And then the other slide is 
looking at memory tooling.  Give

04:15:08.214 --> 04:15:10.214
people a better use of memory 
usage.  Where is it going?

04:15:13.582 --> 04:15:15.582
Is it a leak or just a lot of 
resources?

04:15:16.671 --> 04:15:18.671
So, some of that tooling is 
shipped 

04:15:20.756 --> 04:15:22.756
now and available in IntelliJ 
and Android Studio.

04:15:23.422 --> 04:15:25.907
And I think I have the latest 
version of the plugin right 

04:15:25.908 --> 04:15:30.595
here.  The latest version of 
IntelliJ I just updated.  

04:15:30.596 --> 04:15:32.596
There's some things on the sides
here I can see.

04:15:34.266 --> 04:15:36.266
And what -- where am I going 
first?  Find some jank.

04:15:37.533 --> 04:15:39.968
So, for performance, you want to
go to our Flutter performance 

04:15:39.969 --> 04:15:41.969
tab.  It's on the bottom.

04:15:44.555 --> 04:15:46.802
It's active whenever an app is 
running.  We'll have this 

04:15:46.803 --> 04:15:49.462
available.  There's some simple 
options we have 

04:15:53.753 --> 04:15:55.384
which are useful that are just 
enabling performance features 

04:15:55.385 --> 04:15:58.865
already in the Flutter 
framework.  So, if you toggle on

04:15:58.866 --> 04:16:00.866
the performance overlay.
I got some stuff.

04:16:02.137 --> 04:16:03.563
And you interact with your app, 
you can sort of see your frame 

04:16:03.564 --> 04:16:05.564
rate.

04:16:07.525 --> 04:16:09.358
We have the same information 
available inline in Intellij as 

04:16:09.359 --> 04:16:14.069
well.  Toggle that off.  There's
another one that's useful.  It's

04:16:14.070 --> 04:16:16.070
the debug drawing toggle.

04:16:17.580 --> 04:16:20.222
It's the I think the  second -- 
yeah.  Third one.  It just sort 

04:16:20.223 --> 04:16:23.276
of shows you the outline of your
widgets and gives you a sense.  

04:16:23.277 --> 04:16:25.753
That's more for layout.
So, if I have something that's 

04:16:25.754 --> 04:16:28.795
not where it needs to be, I can 
quickly come in with this.

04:16:31.851 --> 04:16:33.851
It's like border equals one.
It's a sense of the layout.

04:16:36.541 --> 04:16:39.382
And we have a Flutter inspector 
for very detailed knowledge.  

04:16:39.383 --> 04:16:41.383
But performance feature we just 
launched.

04:16:43.223 --> 04:16:45.223
If you want

04:16:47.270 --> 04:16:49.099
wanttology off the bug draw.  
What we've done is instrumented 

04:16:49.100 --> 04:16:51.100
your 

04:16:53.252 --> 04:16:55.252
code at run time to display 
inline in 

04:16:56.932 --> 04:16:59.173
the editor which helps 
rebuilding.  It's really like 

04:16:59.174 --> 04:17:02.453
magical.  If you have been doing
Flutter for a while and haven't 

04:17:02.454 --> 04:17:05.306
had this feature.  As you  
interact, we'll show you which 

04:17:06.528 --> 04:17:10.205
widgets are  rebuilding.  If 
widgets are rebuilding.  

04:17:10.206 --> 04:17:12.686
Sometimes having them rebuild is
perfectly natural.  But 

04:17:12.687 --> 04:17:13.696
sometimes you can end up 
rebuilding much more than you 

04:17:13.697 --> 04:17:17.620
expect.  And that could indicate
a performance issue.  Doesn't 

04:17:17.621 --> 04:17:19.621
mean it is.  But --

04:17:22.547 --> 04:17:24.547
So, that was just that little 
online 32 

04:17:25.625 --> 04:17:27.625
I think it was, I saw that text 
widget as it was building.

04:17:29.156 --> 04:17:31.490
But if you give that a bit more 
space at the bottom.  You can 

04:17:31.491 --> 04:17:33.491
see a table of widget rebuilds.
Oh, wow.

04:17:34.959 --> 04:17:37.205
This app is not doing a whole 
lot.  If your app was nor 

04:17:37.206 --> 04:17:39.206
sophisticated, you 

04:17:40.899 --> 04:17:42.524
would see the widgets that were 
rebuilt, how much they were 

04:17:42.525 --> 04:17:45.393
rebuilt, and double click on 
this widget, it would take you 

04:17:47.076 --> 04:17:48.523
to the source where it was 
created.

04:17:48.524 --> 04:17:50.524
Actually show the source window.
Yeah.

04:17:50.577 --> 04:17:53.043
And there it is.
This was all just launched in 

04:17:53.044 --> 04:17:55.122
last month's release and this 
month's release.

04:17:58.791 --> 04:18:01.030
And we actively used a lot of 
user studies to tweak this, and 

04:18:01.031 --> 04:18:04.683
user feedback.  So, this last 
release I think the changes we 

04:18:04.684 --> 04:18:09.176
made were just written by user 
studies.  Of  trying to validate

04:18:09.177 --> 04:18:12.839
that the tooling we'd shipped 
was actually solving the 

04:18:12.840 --> 04:18:14.840
performance problems.

04:18:16.320 --> 04:18:18.761
I mean, the rebuild indication 
on the widgets is great, not 

04:18:18.762 --> 04:18:20.810
only for performance 
information, but people learning

04:18:20.811 --> 04:18:22.883
Flutter.
It gives you better insight what

04:18:22.884 --> 04:18:26.137
your app is doing.  Not 
performance-related.  But just 

04:18:26.138 --> 04:18:28.594
like --
So, let me -- one of the other 

04:18:28.595 --> 04:18:32.927
questions -- we got this I think
a little bit earlier was related

04:18:32.928 --> 04:18:35.827
to Observatory.  Which I think 
is at the moment a bit of an 

04:18:35.828 --> 04:18:40.785
advanced tool.  But can we take 
a look at that and maybe you 

04:18:40.786 --> 04:18:42.786
show me some of the things going
on with Observatory as well?

04:18:47.517 --> 04:18:49.600
Well, I think one of the main 
features you should use 

04:18:49.601 --> 04:18:54.158
Observatory for in a Flutter 
context is their timeline view. 

04:18:54.159 --> 04:18:55.581
Which gives a detailed view of 
the events that your app is 

04:18:55.582 --> 04:19:00.510
going through.  And in familiar,
it can help you identify slow 

04:19:00.511 --> 04:19:02.748
frames and why those frames are 
slow.  This is some of the  

04:19:02.749 --> 04:19:05.187
tooling we're actually 
rebuilding to make it more 

04:19:05.608 --> 04:19:10.297
user-friendly.  Right now it's 
the only way, really, to debug 

04:19:10.298 --> 04:19:14.442
UI jank in your app.  But it's 
one of the ones that we want to 

04:19:14.443 --> 04:19:16.443
make more approachable to your 
typical user.

04:19:18.115 --> 04:19:20.973
So, if you go into this view  
timeline.  And then check all 

04:19:20.974 --> 04:19:24.835
these boxes.
Okay.

04:19:25.443 --> 04:19:27.677
Check those.  Go back to your 
application.

04:19:31.546 --> 04:19:34.596
Interact with it a little bit.  
Click a button or two.  And then

04:19:34.597 --> 04:19:38.324
if you go back to the timeline 
view.  And choose refresh.

04:19:41.839 --> 04:19:43.839
So, in a new version of this 
app, you 

04:19:45.115 --> 04:19:47.383
wouldn't have tokingle those 
options on refresh.  It would 

04:19:47.384 --> 04:19:49.384
just be streaming data live.

04:19:51.422 --> 04:19:53.497
But you can now see in the 
timeline view -- we don't need 

04:19:53.498 --> 04:19:56.375
to get into much more detail 
than this, but you can see 

04:19:58.205 --> 04:20:00.052
events for when frames were 
created.  When your build method

04:20:00.053 --> 04:20:02.053
was running.  What was happening
in that build method.

04:20:04.941 --> 04:20:07.825
And basically our -- and 
iteration of this, we hope to 

04:20:07.826 --> 04:20:12.136
make it much more actual for 
users, once they see this data, 

04:20:12.137 --> 04:20:14.137
what does it mean they should do

04:20:15.396 --> 04:20:17.440
to their app to make it 
performant?  Or is it a 

04:20:17.441 --> 04:20:19.505
performance problem at all where
they would be optimizing where 

04:20:20.747 --> 04:20:22.747
it's not really necessary.

04:20:24.004 --> 04:20:25.638
I got here think a link in 
Intellij.  This is a web server.

04:20:25.639 --> 04:20:30.197
Exactly, yeah.
Cool.  Well, I'm afraid we've 

04:20:30.198 --> 04:20:33.912
hit our time.  We need to say 
good-bye to you and answer some 

04:20:33.913 --> 04:20:35.913
more questions here before we 
end our --

04:20:36.344 --> 04:20:38.596
We have a couple coming in.  
That's good.  Thanks for coming 

04:20:38.597 --> 04:20:42.314
up.
Thank you so much.  That was 

04:20:42.315 --> 04:20:44.315
really great.  Devin, everybody.

04:20:47.408 --> 04:20:49.248
So, I have a couple of 
questions.  First one should be 

04:20:49.249 --> 04:20:51.249
a pretty easy one.

04:20:52.734 --> 04:20:54.755
The question is -- I like the 
way they said it.  It's time to 

04:20:54.756 --> 04:20:56.756
end the debate.  Which is 
better?

04:21:00.503 --> 04:21:02.503
VSCode or Intellij Android 
Studio?

04:21:03.811 --> 04:21:05.811
As I think we just saw, all of 
those are 

04:21:07.707 --> 04:21:09.132
supported for Flutter 
development by Devin and his 

04:21:09.133 --> 04:21:12.591
team.  A bunch of engineers 
working on them.  They're going 

04:21:12.592 --> 04:21:15.736
to co-exist.
I think during the keynote most 

04:21:15.737 --> 04:21:19.432
of the demos were on VSCode.  A 
lot of people internal in 

04:21:19.433 --> 04:21:21.475
Flutter use VSCode.

04:21:24.936 --> 04:21:28.021
And Filip liking Android Studio.
I use Intellij.  And people, 

04:21:28.022 --> 04:21:30.022
engineers on the team, that use 
the text editor.

04:21:33.586 --> 04:21:35.586
That use VI or Emacs.
Use both.

04:21:36.243 --> 04:21:38.736
But yeah.
One of the differences is I 

04:21:38.737 --> 04:21:41.604
think some of the new features 
do appear on Intellij first.

04:21:45.464 --> 04:21:47.541
But  they -- they get to VSCode 
very quickly.  So, I think, you 

04:21:47.542 --> 04:21:52.264
know, this is gonna be just like
every other question people ask 

04:21:52.265 --> 04:21:55.553
us about this.  What's the best?
The best is the one you already 

04:21:55.554 --> 04:21:59.654
know how to use and just use it.
I happen to use Intellij because

04:21:59.655 --> 04:22:04.575
I end up testing a lot of the 
new features that come out.  I 

04:22:04.576 --> 04:22:08.543
actually work with Devin and the
rest of the tooling team.  So, 

04:22:08.544 --> 04:22:11.585
they always -- they throw a lot 
of things at me.  I'm a good 

04:22:11.586 --> 04:22:13.586
idiot for idiot testing.  But, 
you know, it just -- it really 

04:22:14.448 --> 04:22:16.479
depends on what's important to 
you.  But, you know, it really 

04:22:16.480 --> 04:22:19.133
is up to you what you use.  
There's not really a huge 

04:22:19.134 --> 04:22:22.192
difference between them.  So, 
I've got one more that I have to

04:22:22.802 --> 04:22:26.278
ask.
All right.  Go for it.

04:22:27.687 --> 04:22:29.687
Running out of time.  The 
question is, and it's a great 

04:22:31.144 --> 04:22:34.000
question because it answers 
itself.  The question is, how 

04:22:34.001 --> 04:22:38.141
you pronounce fuchsia?  So --

04:22:42.641 --> 04:22:45.337
A question about fuchsia.
That's one of the few questions 

04:22:45.338 --> 04:22:48.664
about fuchsia we can answer.  If
you don't know what fuchsia is, 

04:22:49.286 --> 04:22:51.286
it's open source.  You can go 
look at it.

04:22:54.179 --> 04:22:56.179
It's a about all we can say 
about it.

04:22:56.680 --> 04:22:58.680
One of the things I like about 
an open source project.

04:23:00.546 --> 04:23:02.790
I'm not good at keeping secrets.
I don't learn them in the first 

04:23:02.791 --> 04:23:06.906
place.  Everything with Flutter 
is open, don't have to worry 

04:23:06.907 --> 04:23:10.181
about it.
Anything from the livestream.  

04:23:10.182 --> 04:23:12.182
We're kind of running out of 
time.

04:23:12.252 --> 04:23:16.987
We're going to have to let 
everybody go in a minute.  Let's

04:23:16.988 --> 04:23:18.988
see.

04:23:20.507 --> 04:23:25.672
Anything interesting?
A question about accessibility. 

04:23:25.673 --> 04:23:27.673
That's a big concern.

04:23:28.950 --> 04:23:30.950
When I joined the team, one of 
my 

04:23:34.475 --> 04:23:36.769
first meetings on the team was 
not an accessibility  review.  

04:23:36.770 --> 04:23:38.770
But the person who does the 

04:23:39.843 --> 04:23:41.264
accessibility reviews, they 
talked about the tools in 

04:23:41.265 --> 04:23:43.265
Android and iOS.

04:23:46.444 --> 04:23:49.294
And semantic tree in Flutter, 
it's in part for accessibility. 

04:23:49.295 --> 04:23:53.601
It was designed into Flutter 
from very early on.  What else 

04:23:53.602 --> 04:23:57.486
do we have here?  Someone noted 
that they're installing Flutter 

04:23:57.487 --> 04:23:59.487
right now.
Yeah!

04:23:59.526 --> 04:24:01.663
Good on you.
You're obviously not here at the

04:24:01.664 --> 04:24:05.130
party, then.
Somebody was wondering about 

04:24:05.131 --> 04:24:08.016
positions.  Which is the widget 
-- what?

04:24:08.638 --> 04:24:10.638
Positioned.

04:24:12.562 --> 04:24:14.562
Which was the widgets I used 
earlier.

04:24:15.433 --> 04:24:17.277
It's like stack is used with a 
row.  With a stack, you're 

04:24:17.278 --> 04:24:19.330
stacking up children one on top 
of each other.

04:24:22.405 --> 04:24:24.450
And you use positioned, maybe 
you want to have a small one on 

04:24:24.451 --> 04:24:26.451
top of a big one 

04:24:28.078 --> 04:24:30.078
and you want it in the

04:24:31.809 --> 04:24:35.930
lower left-hand corner or make 
it expand and fill the stack.  

04:24:35.931 --> 04:24:37.931
That's positioned.

04:24:40.436 --> 04:24:43.285
Usually it's a first order child
of a stack.  People calling 

04:24:43.286 --> 04:24:45.286
about issue numbers.

04:24:46.365 --> 04:24:48.627
So, they're looking at the -- 
there's -- somebody's asking 

04:24:48.628 --> 04:24:50.628
about the impact of Flutter on 
the app size.

04:24:53.734 --> 04:24:55.148
That is something that matters a
lot.  Certainly in some parts of

04:24:55.149 --> 04:24:58.397
the  world.  Right now in 
Android, the number is just over

04:24:58.398 --> 04:25:00.398
4 megs.

04:25:02.686 --> 04:25:04.941
To get just the engine and the 
four widgets.  That number was a

04:25:04.942 --> 04:25:07.840
lot higher when I joined the 
team.  6 or 8.

04:25:08.648 --> 04:25:11.506
It was 6.7 for a while.  They 
actually had not done any work 

04:25:12.753 --> 04:25:14.776
trying to get that down.  And 
finally, somebody said, let me 

04:25:15.587 --> 04:25:17.587
play with that a little bit.  
And it dropped down to four.

04:25:18.475 --> 04:25:21.550
Shrinking.
And they're not willing to say 

04:25:21.551 --> 04:25:26.240
it would be that hard to do it 
even better.  They got rid of 

04:25:26.241 --> 04:25:30.958
that much just by eliminating 
things that were naturally being

04:25:30.959 --> 04:25:33.416
generated by the build process 
but weren't being used.  They 

04:25:33.417 --> 04:25:36.717
figured them out and stopped 
those from being emitted.  So, 

04:25:36.718 --> 04:25:38.545
there's almost certainly more 
things they can do to get the 

04:25:38.546 --> 04:25:40.983
space down.  And I know that's 
something they're working on.

04:25:41.189 --> 04:25:46.294
It's part of the CI process for 
the SDK.  Just build an app to 

04:25:46.295 --> 04:25:50.376
see if they bloated it at all 
and look at the metrics every 

04:25:50.377 --> 04:25:52.243
time they make a change.  
Definitely on the team's mind 

04:25:52.244 --> 04:25:55.719
and something that's very 
important.  I think we're going 

04:25:55.720 --> 04:25:58.373
to be running out of time quite 
soon.  Maybe have time for one 

04:25:58.374 --> 04:26:01.453
more.  Do you have one more from
Twitter maybe we can cover?

04:26:01.657 --> 04:26:05.753
Sure.  Can you talk about 
artificial intelligence and 

04:26:05.754 --> 04:26:07.754
machine learning integration on 
Flutter?

04:26:08.005 --> 04:26:12.713
Sure.  Well, you had a great 
demonstration, obviously, with 

04:26:12.714 --> 04:26:15.393
what you saw on the keynote.  
Maurice is working on some great

04:26:15.394 --> 04:26:20.935
things.  We're  hopping for the 
DevRel sample in Flutter in the 

04:26:20.936 --> 04:26:22.936
coming quarter in part because 
we just really want to build it.

04:26:24.002 --> 04:26:25.651
Who doesn't want to build 
something like that?  And so, 

04:26:25.652 --> 04:26:27.652
that's there.

04:26:30.344 --> 04:26:32.344
For more advanced ML cases where
you 

04:26:34.215 --> 04:26:36.215
might want more direct access to
TF-Lite 

04:26:37.702 --> 04:26:39.702
or for like that, platform 
channels is a way to go as well.

04:26:40.757 --> 04:26:42.440
We have been saying for a while 
now, with Flutter you have a 

04:26:42.441 --> 04:26:45.125
great degree of freedom to work 
with things.  And with platform 

04:26:45.126 --> 04:26:49.433
channels.  So, if you ever see a
plugin that's not quite your use

04:26:49.434 --> 04:26:53.333
case or you don't see a plugin 
for a tool that you want to use,

04:26:53.334 --> 04:26:54.966
you can always go use it 
yourself.  You can always build 

04:26:54.967 --> 04:26:59.085
this bridge yourself and get 
access to it that way.  And when

04:26:59.086 --> 04:27:01.086
you do, please post it on 
GitHub.

04:27:02.959 --> 04:27:04.782
Make a package out of it so the 
next person can use it as well.

04:27:04.783 --> 04:27:11.529
That's right.  I've got one 
more.  What about code push?  Is

04:27:11.530 --> 04:27:13.970
there gonna be code push?  Sort 
of like Microsoft code push?

04:27:14.586 --> 04:27:17.436
Sure.
Might want to define it.  Not 

04:27:17.437 --> 04:27:20.309
everybody knows it.
Code push is a popular piece of 

04:27:22.560 --> 04:27:26.045
technology that Microsoft has 
made and open sourced, I think. 

04:27:26.046 --> 04:27:29.125
To push live code to an app that
has been released.  I think with

04:27:29.126 --> 04:27:31.821
React Native, for example, 
because they're using a JS, you 

04:27:35.470 --> 04:27:37.470
can push new JS code to the VM 
using this.

04:27:39.138 --> 04:27:41.623
And so, this is something -- the
way Dart works in debug, you 

04:27:41.624 --> 04:27:43.624
have a VM and just in time 
compilation.

04:27:46.347 --> 04:27:48.347
But then when you build for 
release, 

04:27:50.442 --> 04:27:52.495
you're combining a static layer 
and not using a just in time 

04:27:52.496 --> 04:27:54.326
compiler at that point.  It's 
not something that's supported 

04:27:54.327 --> 04:27:57.377
yet.  But I've heard like this  
hallway conversation about this.

04:27:59.005 --> 04:28:01.694
It's the kind of thing that's 
not -- I don't know if it has a 

04:28:01.695 --> 04:28:05.626
definite place on the roadmap, 
but it's definitely in people's 

04:28:05.627 --> 04:28:07.627
heads and will end up there 
soon.

04:28:07.873 --> 04:28:09.912
I know people are looking at it.
I don't know if it's on the 

04:28:09.913 --> 04:28:13.768
schedule yet.  I see they're 
going to take a group photo of 

04:28:13.769 --> 04:28:15.831
everybody who is here, so, I 
think this is a great time for 

04:28:15.832 --> 04:28:17.832
us to say good-bye and get in 
the group photo.

04:28:18.081 --> 04:28:20.081
So, yeah.

04:28:21.143 --> 04:28:23.200
So, obviously we weren't able to
get -- we had a lot of great 

04:28:23.201 --> 04:28:25.201
questions today.  We weren't 
able to get to all of them.

04:28:28.128 --> 04:28:30.376
If we didn't get to your 
question, we will try too get to

04:28:30.377 --> 04:28:35.932
them after the fact.  Answer on 
Twitter.  And on YouTube, we 

04:28:35.933 --> 04:28:39.008
will get it on the boring show 
if we can.  That's where we 

04:28:39.009 --> 04:28:42.520
answer questions and hack on 
things.  And I will leave you 

04:28:42.521 --> 04:28:45.597
with a bunch of resources to 
grow as a Flutter developer.  

04:28:45.598 --> 04:28:47.014
There's a ton made by the 
community.  And we have 

04:28:47.015 --> 04:28:49.015
something to offer you.  The 
Flutter samples repo.

04:28:51.899 --> 04:28:53.899
We have the docs.

04:28:55.372 --> 04:28:56.387
We have the docs, the code labs,
the Flutter cookbook and 

04:28:56.388 --> 04:28:59.420
Flutter.io.
I think they took their picture.

04:29:00.668 --> 04:29:02.668
Oh, well.

04:29:05.820 --> 04:29:07.849
You can come join us on Gitter 
on our  Flutter/flutter channel 

04:29:07.850 --> 04:29:11.152
on Twitter, Flutter.io.  We have
a big play list of YouTube 

04:29:12.983 --> 04:29:14.983
videos like the  boring show.

04:29:16.238 --> 04:29:18.486
Speaking of YouTube, I need to 
thank the small army of people 

04:29:18.487 --> 04:29:22.795
behind the scenes who have 
helped us put them together.  We

04:29:22.796 --> 04:29:25.658
have John and Adam as tech lead 
and tech support.  Simon in the 

04:29:25.659 --> 04:29:30.349
back on audio.  Neil is the 
project manager.  Derrick, 

04:29:30.350 --> 04:29:32.350
Daniel, Luke and Rick, the 

04:29:34.444 --> 04:29:38.930
social team, Robert, Justin and 
David.  Crystal and Phil.  Ashe.

04:29:40.753 --> 04:29:42.753
I am Andrew.

04:29:44.427 --> 04:29:46.427
Good night from Flutter Live and
great  coding.

04:29:46.881 --> 04:29:49.148
We have had a great time.  Thank
you all.

