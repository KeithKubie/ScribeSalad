WEBVTT
Kind: captions
Language: en

00:00:02.520 --> 00:00:05.750
Matrices are just slightly more
complicated than vectors.

00:00:05.750 --> 00:00:08.990
To create a matrix, we usually
start by creating a vector.

00:00:08.990 --> 00:00:11.580
Here I'll create a vector that
has elements 1 through 12

00:00:11.580 --> 00:00:15.610
using the integer colon
integer notation.

00:00:15.610 --> 00:00:19.610
Next, I'll use the matrix
function to create the matrix.

00:00:19.610 --> 00:00:22.010
Whenever creating a matrix, it
is helpful to provide the

00:00:22.010 --> 00:00:24.585
number of rows and the number
of columns to ensure that

00:00:24.585 --> 00:00:27.230
you're creating the precise
matrix that you expect.

00:00:27.230 --> 00:00:30.065
You can do this using the end
row and end col arguments.

00:00:32.910 --> 00:00:35.650
If you happen to forget to use
the argument names, R will try

00:00:35.650 --> 00:00:37.380
to guess what you meant.

00:00:37.380 --> 00:00:40.500
It usually does this based on
the order of the arguments.

00:00:40.500 --> 00:00:43.130
For the matrix function, if we
specify the number of rows

00:00:43.130 --> 00:00:45.210
before the number of
columns, we get the

00:00:45.210 --> 00:00:48.120
same type of result.

00:00:48.120 --> 00:00:49.700
You can also experiment
with leaving

00:00:49.700 --> 00:00:52.110
off one of the arguments.

00:00:52.110 --> 00:00:55.080
Notice that if I only include
the number of columns, I need

00:00:55.080 --> 00:00:57.910
to specify the end col argument
name if I want to get

00:00:57.910 --> 00:01:01.710
the same matrix that
I got before.

00:01:01.710 --> 00:01:03.864
The matrix function is
very handy in that.

00:01:03.864 --> 00:01:06.050
While you might specify the
complete set of data for the

00:01:06.050 --> 00:01:08.970
matrix right up front, you don't
always have to do this

00:01:08.970 --> 00:01:12.420
if parts of the matrix
will repeat.

00:01:12.420 --> 00:01:14.170
Here's a matrix with
all zeroes.

00:01:14.170 --> 00:01:15.700
We only need to specify
a single zero

00:01:15.700 --> 00:01:18.270
for the entire matrix.

00:01:18.270 --> 00:01:20.950
We can also specify a partial
vector that can be used to

00:01:20.950 --> 00:01:23.180
fill in the entire matrix.

00:01:23.180 --> 00:01:26.180
Let's create a three-by-four
matrix with values 11, 12, and

00:01:26.180 --> 00:01:30.520
13 filled in in the
entire matrix.

00:01:30.520 --> 00:01:33.380
In this example, the vector,
which had length 3, was

00:01:33.380 --> 00:01:34.940
recycled until the
three-by-four

00:01:34.940 --> 00:01:37.420
matrix was filled up.

00:01:37.420 --> 00:01:39.920
Notice that the vector runs down
the columns rather than

00:01:39.920 --> 00:01:41.950
across the rows.

00:01:41.950 --> 00:01:44.140
If we had wanted to make it run
across the rows, we can

00:01:44.140 --> 00:01:46.480
add a fourth argument to
the matrix function--

00:01:46.480 --> 00:01:48.210
byrow equals TRUE.

00:01:52.160 --> 00:01:55.120
We also sometimes want to learn
more about a matrix.

00:01:55.120 --> 00:01:57.570
We might start using the dim
function to learn the

00:01:57.570 --> 00:02:00.310
dimensions of the matrix.

00:02:00.310 --> 00:02:03.920
Here the output of dim is
a vector of length 2.

00:02:03.920 --> 00:02:05.990
The first value is the number of
rows in the matrix and the

00:02:05.990 --> 00:02:09.120
second is the number
of columns.

00:02:09.120 --> 00:02:11.520
We can also apply the length,
head, and tail

00:02:11.520 --> 00:02:12.770
functions to a matrix.

00:02:15.170 --> 00:02:17.070
The length will return the
number of elements in the

00:02:17.070 --> 00:02:18.740
entire matrix.

00:02:18.740 --> 00:02:21.210
And the head and tail functions
will provide up to

00:02:21.210 --> 00:02:25.510
six rows from the top and
bottom of the matrix.

00:02:25.510 --> 00:02:27.990
If we want, we can specify a
second argument in the head or

00:02:27.990 --> 00:02:30.740
tail function and take it a
different number of rows back.

00:02:33.470 --> 00:02:36.290
One last matrix topic to
consider is how to select one

00:02:36.290 --> 00:02:39.270
or more elements
of the matrix.

00:02:39.270 --> 00:02:41.260
Let's return to the matrix that
we had at the beginning

00:02:41.260 --> 00:02:42.630
of the video.

00:02:42.630 --> 00:02:46.040
Here it's just values 1 through
12 in the matrix that

00:02:46.040 --> 00:02:50.110
has three rows and
four columns.

00:02:50.110 --> 00:02:53.050
Like with vectors, we can subset
a matrix, just like one

00:02:53.050 --> 00:02:55.230
or more parts of the matrix.

00:02:55.230 --> 00:02:57.360
But since a matrix is two
dimensional, we need to

00:02:57.360 --> 00:03:00.970
specify two dimensions
in the brackets.

00:03:00.970 --> 00:03:03.990
For example, if we use 2 comma
4, we will get the element in

00:03:03.990 --> 00:03:05.750
the second row and the
fourth column.

00:03:08.430 --> 00:03:10.220
If we leave the column
entry blank, we'll

00:03:10.220 --> 00:03:12.170
get all of the columns.

00:03:12.170 --> 00:03:16.970
And if we leave the rows blank,
we get all of the rows.

00:03:16.970 --> 00:03:19.670
Just like with vectors, you
can use vectors of length

00:03:19.670 --> 00:03:22.440
greater than 1 inside the
subsetting to return

00:03:22.440 --> 00:03:23.690
more than one value.

00:03:27.770 --> 00:03:30.300
Using vectors with length
greater than 1 to get both

00:03:30.300 --> 00:03:34.000
rows and columns may produce a
slightly surprising result--

00:03:34.000 --> 00:03:35.620
another matrix.

00:03:35.620 --> 00:03:37.755
Let's consider the matrix where
we specify the rows 1

00:03:37.755 --> 00:03:41.220
and 2 and the columns 3 and 4.

00:03:41.220 --> 00:03:43.820
Doing so gives us back a
submatrix specified by these

00:03:43.820 --> 00:03:45.070
dimensions.

00:03:46.980 --> 00:03:50.620
Finally, before moving on,
one final word on matrix

00:03:50.620 --> 00:03:52.630
subsetting.

00:03:52.630 --> 00:03:56.220
If you forget the comma, R will
still return a value.

00:03:56.220 --> 00:03:58.590
Each matrix is stored in R
as a vector with extra

00:03:58.590 --> 00:04:01.040
dimensions.

00:04:01.040 --> 00:04:03.470
So if we request the third
element of the matrix, it

00:04:03.470 --> 00:04:08.040
counts down the first column and
returns the third element.

00:04:08.040 --> 00:04:10.310
If we specify the fifth element,
R runs out in the

00:04:10.310 --> 00:04:12.470
first column, and so it goes
to the second column as it

00:04:12.470 --> 00:04:15.390
keeps counting.

00:04:15.390 --> 00:04:17.730
I wanted to highlight this, not
because subsetting this

00:04:17.730 --> 00:04:19.870
way is a good idea, but just to
make clear that it can be

00:04:19.870 --> 00:04:20.709
accidentally done.

00:04:20.709 --> 00:04:23.460
And so it's something you
need to watch out for.

00:04:23.460 --> 00:04:25.630
Using the row, column
subset annotation is

00:04:25.630 --> 00:04:26.880
the preferred method.

00:04:31.080 --> 00:04:33.190
In the next video, we'll take
a look back at the first six

00:04:33.190 --> 00:04:36.750
videos and also how to access
help files for functions

00:04:36.750 --> 00:04:38.570
inside of R.

