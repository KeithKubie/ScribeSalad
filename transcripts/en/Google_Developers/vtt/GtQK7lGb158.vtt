WEBVTT
Kind: captions
Language: en

00:00:03.880 --> 00:00:07.750
Hello and welcome to our very
first episode of Route 85,

00:00:07.750 --> 00:00:10.980
our new show just for
you iOS developers.

00:00:10.980 --> 00:00:11.940
Ooh, do you smell that?

00:00:11.940 --> 00:00:13.356
It's still got the
new show smell.

00:00:13.356 --> 00:00:14.670
That's nice.

00:00:14.670 --> 00:00:17.060
Anyway, as you probably
know, the Chrome web browser

00:00:17.060 --> 00:00:20.280
has been available on iOS
devices for a few years now

00:00:20.280 --> 00:00:23.610
but being able to select
your default browser has not.

00:00:23.610 --> 00:00:26.967
So if you're a regular Chrome
user on iOS, like I am well,

00:00:26.967 --> 00:00:29.300
you've probably got a whole
bunch of tabs open in Chrome

00:00:29.300 --> 00:00:31.560
because that's the
browser you use every day.

00:00:31.560 --> 00:00:34.420
But you've also got some pages
open in Safari because that's

00:00:34.420 --> 00:00:36.020
the browser that
opens by default

00:00:36.020 --> 00:00:38.370
when you typically click
on a link in another app.

00:00:38.370 --> 00:00:40.560
But I wanted to show
you something here.

00:00:40.560 --> 00:00:42.040
Take a look at this.

00:00:42.040 --> 00:00:44.830
I'm here using my favorite
Twitter client, Tweetbot,

00:00:44.830 --> 00:00:47.490
which I highly recommend
if you haven't seen it yet.

00:00:47.490 --> 00:00:50.300
And here I see that Colt
McAnlis has added a link

00:00:50.300 --> 00:00:52.910
to his perflikeapirate day talk.

00:00:52.910 --> 00:00:58.210
Now when I click on it, it opens
in Safari, as you might expect.

00:00:58.210 --> 00:01:01.590
But now let's go
back to Tweetbot here

00:01:01.590 --> 00:01:05.910
and go into my
preferences over here.

00:01:05.910 --> 00:01:08.240
And you'll notice that one
of the options I have here

00:01:08.240 --> 00:01:10.210
is to change my default browser.

00:01:10.210 --> 00:01:12.340
And one of those
options is Chrome so,

00:01:12.340 --> 00:01:14.940
well heck, let's pick that.

00:01:14.940 --> 00:01:17.640
We'll go back and now
watch what happens

00:01:17.640 --> 00:01:19.210
when I click on
this very same link.

00:01:22.000 --> 00:01:25.910
Well now it opens in Chrome
along with the 24 other tabs

00:01:25.910 --> 00:01:27.040
I have open.

00:01:27.040 --> 00:01:28.850
I have a lot of tabs.

00:01:28.850 --> 00:01:31.490
And incidentally, this provides
me with a few other benefits

00:01:31.490 --> 00:01:32.290
as well.

00:01:32.290 --> 00:01:35.330
If this site required a log
in and password and Chrome

00:01:35.330 --> 00:01:38.206
had remembered it for me from,
say, the desktop version,

00:01:38.206 --> 00:01:40.580
I'd be able to sign in using
that password without having

00:01:40.580 --> 00:01:41.794
to type it in.

00:01:41.794 --> 00:01:43.210
If you look at the
settings you'll

00:01:43.210 --> 00:01:48.960
see that over here I also
have Chrome's Data Usage

00:01:48.960 --> 00:01:51.520
option turned on,
which does allow

00:01:51.520 --> 00:01:54.610
me to reduce my bandwidth
if I am browsing

00:01:54.610 --> 00:01:57.830
on a mobile network
instead of Wi-Fi.

00:01:57.830 --> 00:02:01.100
It also turns out that if this
page were in another language

00:02:01.100 --> 00:02:02.820
Chrome would
translate it for me.

00:02:02.820 --> 00:02:06.100
And of course, if I were
to bookmark this article

00:02:06.100 --> 00:02:08.970
you would see that it would show
up later on my desktop browser

00:02:08.970 --> 00:02:09.880
if I wanted.

00:02:09.880 --> 00:02:11.540
But I think the
nicest benefit of all,

00:02:11.540 --> 00:02:13.110
particularly for
you app developers,

00:02:13.110 --> 00:02:15.690
is that Chrome gives me this
nifty little Back button here

00:02:15.690 --> 00:02:19.010
that, when I click on it, goes
right back to my Tweetbot app

00:02:19.010 --> 00:02:20.150
where I left off.

00:02:20.150 --> 00:02:22.640
So I can continue checking
on my Twitter news.

00:02:22.640 --> 00:02:24.420
So how do they do that?

00:02:24.420 --> 00:02:26.500
Well, while I haven't
seen their source code

00:02:26.500 --> 00:02:29.080
I've got a pretty good idea
of how they pulled this off.

00:02:29.080 --> 00:02:33.370
So this involves a technique
in iOS known as URL schemes.

00:02:33.370 --> 00:02:35.570
The idea is that if
you were to open a URL,

00:02:35.570 --> 00:02:37.760
like the ones pictured
here, iOS would

00:02:37.760 --> 00:02:40.860
look at that little bit of text
before the colon and use that

00:02:40.860 --> 00:02:42.620
to decide what
app it should open

00:02:42.620 --> 00:02:44.700
to process the rest of the URL.

00:02:44.700 --> 00:02:47.010
In this first
example, for instance,

00:02:47.010 --> 00:02:50.470
mailto would open
in iOS's mail app.

00:02:50.470 --> 00:02:54.600
Similarly, tel would open
phone, http and https

00:02:54.600 --> 00:02:57.890
would open in Safari, and
in one kind of special case,

00:02:57.890 --> 00:03:01.610
iOS will take any web link
that starts with maps.apple.com

00:03:01.610 --> 00:03:04.460
and open it directly
in Apple's Maps app.

00:03:04.460 --> 00:03:06.550
Now as third party
developers we can't

00:03:06.550 --> 00:03:10.340
change what apps get to open
mailto, http, or tel URL

00:03:10.340 --> 00:03:13.910
schemes but we can
declare our own schemes.

00:03:13.910 --> 00:03:16.460
By doing so we then
declare that a URL that

00:03:16.460 --> 00:03:19.630
starts with that string
belongs to our application.

00:03:19.630 --> 00:03:21.460
If we do, and then
the user then attempts

00:03:21.460 --> 00:03:24.800
to open that kind of URL,
our application gets opened

00:03:24.800 --> 00:03:28.660
and this URL is passed to our
own app delegate to handle.

00:03:28.660 --> 00:03:30.140
So we could create
an app that says

00:03:30.140 --> 00:03:33.710
that a URL beginning with foo
opens up in our application.

00:03:33.710 --> 00:03:36.710
And in fact, we'll show you how
to do this at a later point.

00:03:36.710 --> 00:03:38.910
But I think the important
thing to know here

00:03:38.910 --> 00:03:41.280
is that Google Chrome,
along with Maps,

00:03:41.280 --> 00:03:43.270
and many other third
party applications

00:03:43.270 --> 00:03:45.760
have declared their
own URL schemes.

00:03:45.760 --> 00:03:47.490
And you can take
advantage of this

00:03:47.490 --> 00:03:50.010
to open a URL
directly in Chrome.

00:03:50.010 --> 00:03:51.760
Let's find out how.

00:03:51.760 --> 00:03:54.720
So let's start by creating
a simple application.

00:03:54.720 --> 00:03:58.170
Now at the time of this
recording Swift and Xcode 6

00:03:58.170 --> 00:04:00.220
are still in beta
so I'm going to do

00:04:00.220 --> 00:04:03.040
this in Objective C and Xcode 5.

00:04:03.040 --> 00:04:05.500
Now if there's enough
interest I can certainly

00:04:05.500 --> 00:04:07.630
redo these tutorials
in Swift as well.

00:04:07.630 --> 00:04:10.480
That's a little something I
like to call job security.

00:04:10.480 --> 00:04:12.710
So I'm going to create
a new project here

00:04:12.710 --> 00:04:16.560
and I'm going to make it
a Single View Application.

00:04:16.560 --> 00:04:20.990
Let's call it
OpeninChromeExample

00:04:20.990 --> 00:04:23.424
because I'm really
original like that.

00:04:23.424 --> 00:04:25.840
We're just going to make it
for the iPhone for simplicity.

00:04:28.392 --> 00:04:30.350
And feel free to create
it wherever you'd like.

00:04:33.500 --> 00:04:38.720
Now let's go into
our storyboard here

00:04:38.720 --> 00:04:47.460
and I'm going to add a
button that will say oh,

00:04:47.460 --> 00:04:49.900
let's just have it
say Open a web page.

00:04:52.480 --> 00:04:53.820
Center it.

00:04:53.820 --> 00:04:55.390
Gosh, look at this application.

00:04:55.390 --> 00:04:56.510
Isn't it beautiful?

00:04:56.510 --> 00:04:57.690
This thing is beautiful.

00:04:57.690 --> 00:04:58.880
Oh man.

00:04:58.880 --> 00:05:02.510
Anyway, I'm going to open
up my helper editor here

00:05:02.510 --> 00:05:08.190
and I'm going to Control-drag
from this button into here.

00:05:08.190 --> 00:05:11.060
And I'll create a new Action
called openWebPageWasPressed.

00:05:16.760 --> 00:05:21.160
So now from within here
I'll create an NSURL.

00:05:21.160 --> 00:05:25.240
We'll call it
googleURL and it will

00:05:25.240 --> 00:05:29.820
be an NSURL, URLWithString,
and in here we'll

00:05:29.820 --> 00:05:35.140
do https://www.google.com.

00:05:35.140 --> 00:05:37.640
Feel free to replace this with
your own favorite web page

00:05:37.640 --> 00:05:39.790
if you get tired of
seeing the Google Home

00:05:39.790 --> 00:05:41.610
screen over and over.

00:05:41.610 --> 00:05:45.340
And I'm going to have my
UIApplication sharedApplication

00:05:45.340 --> 00:05:49.750
call openURL and I'll
have it open googleURL.

00:05:49.750 --> 00:05:51.330
There we go.

00:05:51.330 --> 00:05:54.890
And sure enough--
let's save this--

00:05:54.890 --> 00:06:03.290
when I run this application,
and I click on this button,

00:06:03.290 --> 00:06:06.290
there you go, it opens the
Google Home page in Safari.

00:06:06.290 --> 00:06:09.180
And that's because the URL
I'm trying to open right now

00:06:09.180 --> 00:06:12.510
begins with https,
which, as you'll recall,

00:06:12.510 --> 00:06:16.340
iOS automatically assigns
to Safari browser.

00:06:16.340 --> 00:06:19.690
So now let's go back
into my application here.

00:06:19.690 --> 00:06:23.450
I'm going to go into my View
Controller and the main editor

00:06:23.450 --> 00:06:27.080
and let's watch what
happens when I replace https

00:06:27.080 --> 00:06:27.965
with Google Chrome.

00:06:32.430 --> 00:06:39.740
Now when I run this, and I
click on this button, huh,

00:06:39.740 --> 00:06:41.080
nothing happened.

00:06:41.080 --> 00:06:44.130
And that's because I'm
running this on the simulator

00:06:44.130 --> 00:06:46.380
where I don't have
Chrome installed.

00:06:46.380 --> 00:06:48.920
Now this is a situation
I should check for

00:06:48.920 --> 00:06:51.580
and I probably want to fall back
to Safari if the user doesn't

00:06:51.580 --> 00:06:54.130
have Chrome installed, and
we'll get to that later.

00:06:54.130 --> 00:06:57.180
But for now let's stop this.

00:06:57.180 --> 00:07:00.160
And I'm going to switch
over from the simulator

00:07:00.160 --> 00:07:03.110
to my actual iPhone
and run it there.

00:07:06.459 --> 00:07:08.000
And now when you
click on this button

00:07:08.000 --> 00:07:13.130
we see that, sure enough, my
URL now opens in Google Chrome.

00:07:13.130 --> 00:07:15.840
Hooray.

00:07:15.840 --> 00:07:18.110
And honestly, at
the most basic level

00:07:18.110 --> 00:07:20.990
this is all you really
need to do, replace http

00:07:20.990 --> 00:07:24.500
with Google Chrome and
replace https with, I guess,

00:07:24.500 --> 00:07:27.960
let's make this Google
Chrome s to open it securely.

00:07:27.960 --> 00:07:31.000
And voila, all your
links open with Chrome.

00:07:31.000 --> 00:07:33.680
But let's go back to the
app running on my simulator

00:07:33.680 --> 00:07:35.310
where I didn't have
Chrome installed.

00:07:35.310 --> 00:07:36.690
Obviously, having
my button click

00:07:36.690 --> 00:07:39.150
do nothing is a bad
user experience.

00:07:39.150 --> 00:07:41.770
At the very least, I should
check for this situation

00:07:41.770 --> 00:07:44.040
and open the link
in Safari instead.

00:07:44.040 --> 00:07:46.340
And it turns out, there's
an easy way to do this.

00:07:46.340 --> 00:07:50.040
In addition to UIApplications
openURL method,

00:07:50.040 --> 00:07:53.310
it also has a Boolean
canOpenURL method

00:07:53.310 --> 00:07:55.060
that checks to see--
with the system--

00:07:55.060 --> 00:07:57.250
to see if there's an
application out there that

00:07:57.250 --> 00:07:59.760
can respond to this URL scheme.

00:07:59.760 --> 00:08:03.080
So I'm going to go back
to my button handler here

00:08:03.080 --> 00:08:05.080
and I'm going to
create two URLs.

00:08:05.080 --> 00:08:10.840
The first one, that I
will call mySafariURL,

00:08:10.840 --> 00:08:14.610
it is an NSURL
URLWithString, and here we're

00:08:14.610 --> 00:08:18.490
just going use the plain
old https URL scheme.

00:08:21.440 --> 00:08:25.970
And this one I'm going to
rename as our Chrome URL.

00:08:25.970 --> 00:08:29.750
And here we're using the
Google Chrome s URL scheme.

00:08:29.750 --> 00:08:32.799
Then down here I'll
simply check and see

00:08:32.799 --> 00:08:40.390
if my UIApplication
sharedApplication canOpenURL

00:08:40.390 --> 00:08:46.610
chromeURL then UIApplication
sharedApplication openURL.

00:08:49.980 --> 00:08:55.550
And otherwise, we will
default, or I guess fall back,

00:08:55.550 --> 00:08:57.430
to the Safari URL.

00:08:59.990 --> 00:09:02.050
So this time the application
does the right thing

00:09:02.050 --> 00:09:02.758
on the simulator.

00:09:05.730 --> 00:09:09.330
I click my fancy Open
a web page button

00:09:09.330 --> 00:09:14.150
and it opens the google.com
Home page in Safari.

00:09:14.150 --> 00:09:21.610
And when I go back
to my actual device,

00:09:21.610 --> 00:09:25.190
and on my device, when I click
on this button, sure enough,

00:09:25.190 --> 00:09:27.190
it now properly opens in Chrome.

00:09:27.190 --> 00:09:28.170
So this is great.

00:09:28.170 --> 00:09:30.180
But I'd like to explore
one other feature

00:09:30.180 --> 00:09:31.620
that we haven't
really covered yet

00:09:31.620 --> 00:09:33.661
and that's probably the
one most important to app

00:09:33.661 --> 00:09:36.450
developers, which is the ability
to add that nice little back

00:09:36.450 --> 00:09:39.564
button in Chrome that takes
users back to your application.

00:09:39.564 --> 00:09:40.980
I know it seems
like a small thing

00:09:40.980 --> 00:09:43.410
but being able to click
back with one press

00:09:43.410 --> 00:09:46.000
as opposed to double
clicking the Home button

00:09:46.000 --> 00:09:49.440
and then selecting your app
again from the multitasker

00:09:49.440 --> 00:09:51.900
just feels like a much
smoother experience to me.

00:09:51.900 --> 00:09:55.310
And we will show you how to do
that in the very next lesson.

00:09:55.310 --> 00:09:56.400
So stick around.

00:09:56.400 --> 00:09:59.750
[MUSIC PLAYING]

