WEBVTT
Kind: captions
Language: en

00:00:00.080 --> 00:00:02.940
Okay let's work on the solution for our ROB timing quiz.

00:00:02.940 --> 00:00:08.140
The final question was, when does the ADD here, the last instruction commit?

00:00:08.140 --> 00:00:12.260
To do that we have to figure out, what happens with the last two instructions.

00:00:12.260 --> 00:00:16.110
So can we issue the subtract in cycle 5? Yes we can.

00:00:16.110 --> 00:00:21.000
Only one of the, add subtract reservation stations is used at that time.

00:00:21.000 --> 00:00:23.440
In cycle 5 it actually will be freed so

00:00:23.440 --> 00:00:27.580
from cycle 6 we actually have all the reservations in add subtract available,

00:00:27.580 --> 00:00:32.310
but for sure one is available in cycle 5. And then the third one,

00:00:32.310 --> 00:00:37.110
we can use it in cycle 6. In fact, by that time, this one is also available, so

00:00:37.110 --> 00:00:43.600
we, we can just issue these instructions. The subtract here, uses R2 and

00:00:43.600 --> 00:00:47.420
R5. R5 is not produced by any of the previous instructions but R2 is.

00:00:47.420 --> 00:00:53.160
So, we actually have to wait until cycle 7 before we can. Proceed to execution.

00:00:53.160 --> 00:00:57.570
Now, because in cycle 7, other instructions are also beginning execution,

00:00:57.570 --> 00:01:00.350
we have to figure out can we actually run this subtract now or

00:01:00.350 --> 00:01:04.569
do we have to wait for the next cycle. So we want to run it in cycle 7,

00:01:04.569 --> 00:01:08.710
but remember, this is a multiplication. This is a subtract, so they're using

00:01:08.710 --> 00:01:13.520
different execution units and they can begin in the same cycle. If another, for

00:01:13.520 --> 00:01:16.660
example add or subtract was beginning at seven, then we would actually have to

00:01:16.660 --> 00:01:20.562
wait until eight. But because these are different units we can begin at seven,

00:01:20.562 --> 00:01:24.130
And we're going to try to broadcast our result at eight.

00:01:24.130 --> 00:01:28.090
Nobody else is trying to broadcast at eight, so we will succeed at that.

00:01:28.090 --> 00:01:32.520
And finally, for the add here, it's waiting for

00:01:32.520 --> 00:01:37.920
R4 and R3. R4 is produced by this subtract. R3 is produced here. So

00:01:37.920 --> 00:01:43.290
we need to wait for cycles five and eight and then begin in cycle nine. We will

00:01:43.290 --> 00:01:47.660
try to broadcast in cycle ten. And now the question is when do they commit?

00:01:47.660 --> 00:01:51.930
. Remember that we can commit up to two instructions per cycle. So what's

00:01:51.930 --> 00:01:56.410
going to happen. Is in cycle 10. We're going to also try to commit to subtract.

00:01:56.410 --> 00:02:00.060
We only committing this multiplication so far. We can commit two instructions.

00:02:00.060 --> 00:02:02.020
We'll try to commit to the next instruction. So

00:02:02.020 --> 00:02:06.650
in cycle 10 we will actually commit this. And now interestingly enough,

00:02:06.650 --> 00:02:11.240
this add is done just in time to write to commit to cycle 11.

00:02:11.240 --> 00:02:15.100
So it's going to commit to cycle 11. So, the final answer for

00:02:15.100 --> 00:02:19.230
the final part of the quiz is that the commit is happening in cycle 11, here.

