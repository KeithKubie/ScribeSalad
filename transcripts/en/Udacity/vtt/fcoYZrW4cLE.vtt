WEBVTT
Kind: captions
Language: en

00:00:00.130 --> 00:00:04.170
The final aspect of how the caches work,
concerns the write policy.

00:00:04.170 --> 00:00:05.750
They're really two parts of it.

00:00:05.750 --> 00:00:08.540
First is the so called allocate policy.

00:00:08.540 --> 00:00:11.860
Which is about do we
insert into the cache?

00:00:11.860 --> 00:00:16.320
Meaning allocate and entering
the cache for blocks that we write.

00:00:16.320 --> 00:00:17.938
So we have a write miss.

00:00:17.938 --> 00:00:21.920
The question is, does the block
get brought to the cache or not.

00:00:21.920 --> 00:00:23.680
There are two types of caches.

00:00:23.680 --> 00:00:26.890
The first type of cache is according
to this is a write-allocated cache.

00:00:28.110 --> 00:00:31.700
It brings the block that
we write into the cache.

00:00:31.700 --> 00:00:33.540
The second type does not.

00:00:34.550 --> 00:00:36.020
So when we have a read miss.

00:00:36.020 --> 00:00:38.620
The block is brought into the cache, but

00:00:38.620 --> 00:00:43.240
if we have a write miss The block
is not brought into the caches.

00:00:43.240 --> 00:00:45.890
Most cachestoday are write-allocate,

00:00:45.890 --> 00:00:49.150
simply because there is some
locality between reads and writes.

00:00:49.150 --> 00:00:55.040
Meaning if we write to something,
we are also likely to read it.

00:00:55.040 --> 00:00:59.189
So write allocate helps us have read
hits, even if we have the write miss.

00:01:00.210 --> 00:01:04.550
The other aspect of the Write Policy
is when we have a write,

00:01:04.550 --> 00:01:07.680
do we write just to the cache or
also to the memory?

00:01:07.680 --> 00:01:12.400
We can have a write-through cache,
which updates the memory immediately.

00:01:12.400 --> 00:01:15.980
So when a write happens,
we write to the cache and

00:01:15.980 --> 00:01:18.520
just propagate the write also to memory.

00:01:18.520 --> 00:01:20.150
That's why it's called write-through,

00:01:20.150 --> 00:01:22.330
because the write kind of
goes through the cache.

00:01:22.330 --> 00:01:27.170
Or we can have a write-back cache,
where we only write to the cache, and

00:01:27.170 --> 00:01:30.730
we write to memory only when
the block is replaced in the cache.

00:01:30.730 --> 00:01:33.110
We cannot just discard
the block at this time,

00:01:33.110 --> 00:01:37.040
because the memory does not have
the most recent version of the block, so

00:01:37.040 --> 00:01:41.290
the memory has to be updated once
the block is no longer in the cache.

00:01:41.290 --> 00:01:45.170
But as long as it's in the cache, we
will just keep writing to the cache, and

00:01:45.170 --> 00:01:46.475
not keep memory up to date.

00:01:46.475 --> 00:01:51.350
Write-through is a very
unpopular cache for

00:01:51.350 --> 00:01:54.480
caches that send stuff
to memory directly.

00:01:54.480 --> 00:02:00.040
We usually want to have a write-back
cache, because that way

00:02:00.040 --> 00:02:05.250
writes which have a lot of locality will
update the cache possibly many times.

00:02:05.250 --> 00:02:08.400
And only send a write to memory once,
once the blocked is replaced.

00:02:08.400 --> 00:02:10.669
So we can have many writes.

00:02:10.669 --> 00:02:12.410
And only one memory write for that.

00:02:13.440 --> 00:02:16.360
That prevents the memory
from being overwhelmed with

00:02:16.360 --> 00:02:17.800
the number of writes that we might have.

00:02:18.870 --> 00:02:22.400
The results of some relationship
between this choice and this.

00:02:22.400 --> 00:02:28.851
If you have a write-back cache, you want
to also have a write-allocate cache.

00:02:28.851 --> 00:02:34.070
Because, you are saving writes to
memory, by writing only to the cache.

00:02:34.070 --> 00:02:38.608
If you have a write miss, you want to
have future writes go to the cache so

00:02:38.608 --> 00:02:40.284
you do write-allocate.

