WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:03.510
Today we're going to talk about one of
my favorite topics in Computer Science,

00:00:03.510 --> 00:00:07.799
which is the Lambda Calculus. And in
particular, we're going to talk about

00:00:07.799 --> 00:00:12.750
three things: we're going to think what
actually is it, why is it useful, and

00:00:12.750 --> 00:00:17.970
where did it actually come from? So
we're going to start with the last

00:00:17.970 --> 00:00:27.060
question here - where did it actually come
from?  This is Alonzo Church, who was

00:00:27.060 --> 00:00:31.439
a mathematician at Princeton University
in the United States, and he

00:00:31.439 --> 00:00:36.120
was the person who invented the Lambda
Calculus. And what he was interested in

00:00:36.120 --> 00:00:42.210
is what is the notion of a function from
a computational perspective. And his

00:00:42.210 --> 00:00:47.610
answer to this question is what we now
know as the Lambda Calculus. And there's

00:00:47.610 --> 00:00:51.149
an interesting piece of history here,
which many people don't know.

00:00:51.149 --> 00:00:55.530
So, it turns out that Alonzo Church was
the PhD supervisor of someone very

00:00:55.530 --> 00:00:59.399
famous in computer science -- Alan
Turing.  And of course Alan Turing,

00:00:59.399 --> 00:01:03.629
amongst many other things which he did,
he invented Turing machines -- which

00:01:03.629 --> 00:01:08.280
Computerphile has done a number of videos
on -- and Turing machines capture a basic

00:01:08.280 --> 00:01:12.479
state-based model of computation.  It's
interesting that his PhD supervisor,

00:01:12.479 --> 00:01:17.700
Alonzo Church, he captured a basic
functional notion of computation with

00:01:17.700 --> 00:01:22.140
his Lambda Calculus. And it turns out
that these two, quite different notions,

00:01:22.140 --> 00:01:26.580
one functional and one state-based, turn
out to be equivalent -- and this is what's

00:01:26.580 --> 00:01:30.869
called the Church-Turing hypothesis, or 
part of the Church-Turing hypothesis.

00:01:30.869 --> 00:01:35.189
So for Church, a function was a black box,
but you're not allowed to look inside.

00:01:35.189 --> 00:01:41.579
And what it does is it takes some input, so
maybe it takes a number like x, and it's

00:01:41.579 --> 00:01:46.320
going to process it in some way, and it's
going to produce an output. So maybe it

00:01:46.320 --> 00:01:51.540
produces the output x + 1. So this would
be a function that takes a single

00:01:51.540 --> 00:01:56.250
input, a number called x, processes in
some way, and then produces a single

00:01:56.250 --> 00:02:00.840
output, which is the number x + 1.
And we could have a slightly more

00:02:00.840 --> 00:02:05.470
interesting example. Maybe we
have a box with two inputs, x

00:02:05.470 --> 00:02:10.990
and y, and we process them in some way,
and maybe we produce their sum as the

00:02:10.990 --> 00:02:15.430
output. So this would be a function which
takes two inputs, x and y, processes

00:02:15.430 --> 00:02:21.310
them in some way, and then produces their
sum, x + y. And there's two important

00:02:21.310 --> 00:02:25.180
things about functions in this sense. The
first is that they're black boxes; you're

00:02:25.180 --> 00:02:28.660
not allowed to look inside, and you can't
see the mechanics of what's going on

00:02:28.660 --> 00:02:32.500
inside that box, all you can do it put
something in and observe what comes out

00:02:32.500 --> 00:02:36.370
the other side. And the second important
thing is that these functions are pure,

00:02:36.370 --> 00:02:41.830
they have no internal state; so all that
happens when you map x across to x + 1,

00:02:41.830 --> 00:02:46.090
is the magic goes on inside the box, and
there's no internal state, there's no

00:02:46.090 --> 00:02:49.900
hidden information that we can use. And
this is quite different from the notion of

00:02:49.900 --> 00:02:54.310
computation that Alan Turing was interested
in with his Turing machines -- he had

00:02:54.310 --> 00:02:59.680
internal state -- there's no internal state,
these are pure mathematical functions. Now

00:02:59.680 --> 00:03:03.880
we can think how do you actually define
functions in the Lambda Calculus. And

00:03:03.880 --> 00:03:07.930
there is a very, very simple syntax for
this, which I'll introduce to you now. So

00:03:07.930 --> 00:03:11.830
let's think about the increment function
in the Lambda Calculus. What you do is

00:03:11.830 --> 00:03:15.880
you write down a lambda symbol -- so this
is the Greek lower-case letter lambda, and

00:03:15.880 --> 00:03:19.090
that says we're introducing a function
at this point. And then you just write

00:03:19.090 --> 00:03:23.709
down the name of the input, so that was x.
And then you have a dot, and then

00:03:23.709 --> 00:03:29.980
you say how the output is calculated in
terms of the input, that's x + 1. So we

00:03:29.980 --> 00:03:33.610
could do the same with addition, you just
need two lambdas, and write lambda x,

00:03:33.610 --> 00:03:40.269
dot, lambda y, dot, x + y. So this is the
function that takes two inputs, x

00:03:40.269 --> 00:03:45.820
and y, and then delivers the result x + y.
And this is written down formally in

00:03:45.820 --> 00:03:49.989
Church's Lambda Calculus exactly like
this. So, when you've got a function,

00:03:49.989 --> 00:03:54.850
what can you do with it? Well, all you can
do is give it some input, let it do its

00:03:54.850 --> 00:03:58.510
thing, and it will give you some output.
So let's have a simple example of this.

00:03:58.510 --> 00:04:04.510
If we take a function like increment,
which was lambda x, x + 1, and we

00:04:04.510 --> 00:04:09.280
apply it to a number like 5, what actually
happens? It's a basic process of

00:04:09.280 --> 00:04:15.069
substitution; we're essentially substituting
the number 5 here into the body of

00:04:15.069 --> 00:04:18.910
this lambda expression and then x
becomes 5, so we get 5 + 1,

00:04:18.910 --> 00:04:22.900
and then we get the result 6 on the
other side. And this is basically all

00:04:22.900 --> 00:04:26.500
there is to the Lambda Calculus. It's
only got three things: it's got variables,

00:04:26.500 --> 00:04:31.330
like x, y and z; and it's got a way of
building functions -- this lambda notation;

00:04:31.330 --> 00:04:35.770
and it's got a way of applying functions.
This is the only three things that you

00:04:35.770 --> 00:04:39.220
have in the setting.  What is
actually the point of the Lambda 

00:04:39.220 --> 00:04:42.190
Calculus? We've introduced this very
simple notation, why should you be

00:04:42.190 --> 00:04:46.090
interested in learning about it? I think
there's three answers which I would give

00:04:46.090 --> 00:04:50.110
to this. The first point I'd make is that
the Lambda Calculus can encode any

00:04:50.110 --> 00:04:54.460
computation. If you write a program in
any programming language, which has ever

00:04:54.460 --> 00:04:58.210
been invented, or ever will be invented,
or really any sequential programming

00:04:58.210 --> 00:05:02.410
language, it can in some way be encoded
in the Lambda Calculus. And of course it

00:05:02.410 --> 00:05:06.040
may be extremely inefficient when you do
that, but that's not the point -- this is a

00:05:06.040 --> 00:05:10.480
basic idea of computation, and we want to
think how many and what kind of programs

00:05:10.480 --> 00:05:14.470
can we encode this, and actually you can
encode anything. And this is really the

00:05:14.470 --> 00:05:19.540
kind of Church-Turing hypothesis which
I mentioned. Alan Turing, you can encode

00:05:19.540 --> 00:05:24.130
anything in his Turing machines, and in
Church's Lambda Calculus, you can encode

00:05:24.130 --> 00:05:27.370
anything.  And actually these two systems
are formally equivalent -- any Turing

00:05:27.370 --> 00:05:31.300
machine program can be translated into an
equivalent Lambda Calculus program, and

00:05:31.300 --> 00:05:33.730
vice versa.  They are
formally equivalent. The

00:05:33.730 --> 00:05:38.260
second point I would make is that Lambda
Calculus can also be regarded as the

00:05:38.260 --> 00:05:41.560
basis for functional programming
languages like Haskell. So these are

00:05:41.560 --> 00:05:45.070
becoming increasingly popular these days.
And actually a very sophisticated

00:05:45.070 --> 00:05:49.810
language like Haskell is compiled down to
a very small core language, which is

00:05:49.810 --> 00:05:53.560
essentially a glorified form of Lambda
Calculus. So if you're interested in

00:05:53.560 --> 00:05:56.590
functional programming languages
like Haskell, or the ML family,

00:05:56.590 --> 00:05:59.680
these are all fundamentally based on the
Lambda Calculus -- it's just kind of a 

00:05:59.680 --> 00:06:04.690
glorified syntax on top of that. The
third point which I would make, is that

00:06:04.690 --> 00:06:09.100
the Lambda Calculus is actually now
present in most major programming

00:06:09.100 --> 00:06:13.810
languages. So this wasn't the case 10 or 15
years ago, but it is the case today. So if

00:06:13.810 --> 00:06:19.510
you look at languages like Java, like
C#, even Visual Basic, F#, and so

00:06:19.510 --> 00:06:23.500
on, all of these languages now encode
Lambda Calculus, or include Lambda

00:06:23.500 --> 00:06:28.090
Calculus, as a fundamental component. So
every computer scientist today needs to

00:06:28.090 --> 00:06:32.449
know about Lambda Calculus. What
I'd like to end up with is

00:06:32.449 --> 00:06:36.229
a couple of little examples of what you
can do with it. So, the Lambda Calculus has

00:06:36.229 --> 00:06:40.819
basically got nothing in it: it's got variables,
it's got a way of building functions, and it's

00:06:40.819 --> 00:06:43.699
got a way of applying functions. It
doesn't have any built-in data types

00:06:43.699 --> 00:06:48.080
like numbers, logical values, recursion
and things like that. So if you want to

00:06:48.080 --> 00:06:51.710
do these things in the Lambda Calculus,
you need to encode them. So I'll end

00:06:51.710 --> 00:06:55.999
up showing you a simple encoding, and the
encoding which I'm going to show you is

00:06:55.999 --> 00:07:01.279
the logical values TRUE and FALSE. And
the key to this is to think what do you

00:07:01.279 --> 00:07:05.900
do with logical values in a programming
language? And the basic observation is

00:07:05.900 --> 00:07:09.770
that you use them to make a choice
between doing two things -- you say if

00:07:09.770 --> 00:07:14.659
something is TRUE do one thing, if
something is FALSE do another thing, and

00:07:14.659 --> 00:07:18.080
we're going to use this idea of making a
choice between two things to actually

00:07:18.080 --> 00:07:24.229
encode TRUE and FALSE. So the trick is
for TRUE, you write down this lambda

00:07:24.229 --> 00:07:29.120
expression. So what it does is it takes
two things, x and y, and then it chooses

00:07:29.120 --> 00:07:33.589
the first. And FALSE does the opposite.
It's going to take two things, and it's

00:07:33.589 --> 00:07:37.430
going to choose the second. So we've got
two lambda expressions here, both of

00:07:37.430 --> 00:07:43.159
which take two inputs, x and y, and one
chooses the first one, x, and one chooses the

00:07:43.159 --> 00:07:45.589
second one, y.  So fair enough,
what can we actually

00:07:45.589 --> 00:07:50.839
do with this? Well, let's think how we
could define a little logical operator.

00:07:50.839 --> 00:07:54.439
So, NOT is the most simple logical
operator which I could think of. It's going

00:07:54.439 --> 00:07:59.479
to flip TRUE to FALSE, and FALSE to TRUE.
It's logical negation. Based upon this

00:07:59.479 --> 00:08:04.669
encoding, how could I actually define the
NOT operator or the NOT function. It's

00:08:04.669 --> 00:08:10.310
very easy to do. I will take in a logical
value, or a Boolean as it normally called

00:08:10.310 --> 00:08:14.779
in Computer Science, after George Boole, who
first studied a kind of formal logic. So

00:08:14.779 --> 00:08:19.430
we take a Boolean, which will be one of TRUE
or FALSE, and here's what we do. We apply

00:08:19.430 --> 00:08:24.499
it to FALSE, and we apply it TRUE. And I
claim that this is a valid definition

00:08:24.499 --> 00:08:28.669
for a NOT function. But I can very
easily convince you that it's the case,

00:08:28.669 --> 00:08:33.260
because I can do a little calculation.
So, let's check, if we apply NOT to TRUE,

00:08:33.260 --> 00:08:37.579
that we actually get FALSE. And in just a
few steps, using the Lambda Calculus magic,

00:08:37.579 --> 00:08:40.699
we'll find that this actually works
out. So what can we do here?

00:08:40.699 --> 00:08:43.320
Well the only thing we
can do is start to expand

00:08:43.320 --> 00:08:48.690
definitions. So, we know what the definition
of NOT is. It was lambda b, b applied to

00:08:48.690 --> 00:08:52.890
FALSE and TRUE, and then we just copy
down the TRUE. So all I've done in the

00:08:52.890 --> 00:08:57.060
first step here, is I've expanded my
definition of NOT -- NOT was defined to be

00:08:57.060 --> 00:09:01.410
this Lambda Calculus expression here. Now,
I've got a function, which is this thing,

00:09:01.410 --> 00:09:05.190
and it's applied to an input,
so i can just apply it.

00:09:05.190 --> 00:09:09.780
OK, and the function says if I take in a b,
I just apply that b to FALSE and TRUE.

00:09:09.780 --> 00:09:13.200
So, the thing I'm applying it to is TRUE
here, so i just do the little

00:09:13.200 --> 00:09:17.730
substitution. Rather than b, I write TRUE,
and then I copy down the FALSE, and copy

00:09:17.730 --> 00:09:21.000
down the TRUE, and I get down to here.
And at this point, you might quite

00:09:21.000 --> 00:09:23.280
rightly be thinking this
looks like complete rubbish.

00:09:23.280 --> 00:09:26.100
I've just written TRUE FALSE TRUE.
What does that mean? It means absolutely

00:09:26.100 --> 00:09:29.490
nothing. But it means something in the
Lambda Calculus, because we continue to

00:09:29.490 --> 00:09:34.680
expand. So, what we can do now, is expand
the definition of TRUE. We said that TRUE

00:09:34.680 --> 00:09:39.870
takes two things, and chooses the first one.
So, let's expand it out. So, TRUE is

00:09:39.870 --> 00:09:45.210
lambda x, lambda y, x. So, it chooses the
first thing of two things, and then we just

00:09:45.210 --> 00:09:48.750
copy down the two inputs, FALSE AND TRUE.
And you can see what's going to

00:09:48.750 --> 00:09:52.290
happen now -- we've got a function here
which takes two things and chooses the first

00:09:52.290 --> 00:09:56.370
thing. Here the first thing is FALSE, so
when we apply the function, we just get

00:09:56.370 --> 00:09:59.580
back FALSE.  So what you see
has happened here, in just

00:09:59.580 --> 00:10:04.950
a few steps, we've shown how using this
encoding of TRUE and FALSE, and not, we

00:10:04.950 --> 00:10:08.250
can actually get the desired behavior.
And it's very easy to check for yourself,

00:10:08.250 --> 00:10:14.340
if you apply NOT to FALSE, you'll get TRUE.
And I'd like to set you a little kind of

00:10:14.340 --> 00:10:17.640
puzzle at this point -- think how
you could define logical AND,

00:10:17.640 --> 00:10:22.140
or logical OR, in this style as well.
And I'm interested to see what kind

00:10:22.140 --> 00:10:27.510
of definitions people come up with in
the comments. So, the very last thing I'd

00:10:27.510 --> 00:10:32.550
like to show you is this lambda
expression here, which is a very famous

00:10:32.550 --> 00:10:38.010
Lambda Calculus expression called the Y
combinator, or the Y operator. And actually,

00:10:38.010 --> 00:10:42.180
this is the key to doing recursion in
the Lambda Calculus. So, as I mentioned,

00:10:42.180 --> 00:10:45.720
Lambda Calculus has basically nothing in
it, or it's only got three things in it:

00:10:45.720 --> 00:10:50.160
variables x, y and z, and so on; a way of
building functions; and a way of applying

00:10:50.160 --> 00:10:54.840
functions. It's got no other control
structures, no other data types, no anything.

00:10:54.840 --> 00:10:58.410
So, if you want to do recursion,
which is the basic mechanism for

00:10:58.410 --> 00:11:02.130
defining things in terms of themselves --
again Computerphile's had videos on this --

00:11:02.130 --> 00:11:06.690
you need to encode it. And it turns out
that this expression here is the key to

00:11:06.690 --> 00:11:10.350
encoding recursion in the Lambda
Calculus. And this expression was

00:11:10.350 --> 00:11:13.800
invented by someone called Haskell Curry,
and this is the Haskell that gives

00:11:13.800 --> 00:11:17.730
his name to the Haskell programming
language. And he was a PhD student of

00:11:17.730 --> 00:11:21.870
David Hilbert, who's a very famous
mathematician. The last observation

00:11:21.870 --> 00:11:25.650
I'd like to leave you with here, is
something that's interested me for many

00:11:25.650 --> 00:11:29.910
years. I think there's a connection between
this piece of kind of abstract computer

00:11:29.910 --> 00:11:35.640
science, or abstract mathematics, and
biology. If you look at human DNA, you

00:11:35.640 --> 00:11:38.880
have this double helix structure; you
have two copies of the same thing,

00:11:38.880 --> 00:11:43.800
side-by-side, and this is the key to
allowing DNA to self-replicate. If you

00:11:43.800 --> 00:11:47.910
look at the structure of this lambda
expression here, we have two copies of

00:11:47.910 --> 00:11:52.890
the same thing side-by-side.  You have
lambda x, f applied to x x, and exactly the

00:11:52.890 --> 00:11:56.880
same here. This is the key to doing
recursion, which is kind of related to

00:11:56.880 --> 00:12:01.980
self-replication in a programming
language, or in the Lambda Calculus. And

00:12:01.980 --> 00:12:04.470
for me, I don't think this is a
coincidence -- I think it's kind of

00:12:04.470 --> 00:12:08.310
interesting philosophical observation.
The Lambda Calculus has this kind of

00:12:08.310 --> 00:12:13.200
very clever way of doing recursion, which
would take a video on its own to explain

00:12:13.200 --> 00:12:17.610
how it actually works, but you can look it
up on Wikipedia. And there's a link here,

00:12:17.610 --> 00:12:24.650
I think, to biology.  Somebody
actually found the Y Combinator

00:12:24.650 --> 00:12:28.160
so interesting, that they've had it
tattooed permanently on their arm, and

00:12:28.160 --> 00:12:32.690
you can find a picture of this if you do a
quick web search. What would people search for?

00:12:32.690 --> 00:12:37.940
The Y combination -- the Y combinator in
mathematics or computer science.

00:12:37.940 --> 00:12:43.090
And tattoo I'm guessing.  Yup!

