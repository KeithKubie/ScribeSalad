WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Okay, here we are back on one of my work machines,

00:00:03.000 --> 00:00:06.000
and we're going to look at a test case which makes the latest version of GCC crash.

00:00:06.000 --> 00:00:09.000
That's not to say the latest-released version,

00:00:09.000 --> 00:00:12.000
but the version from their subversion repository that I just built recently.

00:00:12.000 --> 00:00:15.000
We can see that this is kind of big, and if we look at it's size,

00:00:15.000 --> 00:00:18.000
it's about 40 kb, so actually that's not that big as random test cases go.

00:00:18.000 --> 00:00:21.000
Sometimes the bugs that trigger compiler crashes are much huger

00:00:21.000 --> 00:00:24.000
like hundreds and hundreds of kilobytes. Anyway, this one is pretty small. That's nice.

00:00:24.000 --> 00:00:26.000
What we're going to do now is run a delta debugger on it.

00:00:26.000 --> 00:00:28.000
First, let's make sure we know that it crashes,

00:00:28.000 --> 00:00:33.000
so current--gcc is what I call the GCCs that I build from the repository.

00:00:33.000 --> 00:00:37.000
All right, it seems to have croaked in get<u>initial</u>def<u>for</u>induction

00:00:37.000 --> 00:00:39.000
at tree-vect-loop 3222.

00:00:39.000 --> 00:00:41.000
An assertion violated inside the compiler,

00:00:41.000 --> 00:00:43.000
and we're happy that it did,

00:00:43.000 --> 00:00:45.000
because otherwise this might have turned into a bug

00:00:45.000 --> 00:00:47.000
that causes GCC to generate wrong code, and we never want that to happen.

00:00:47.000 --> 00:00:50.000
The next thing we need is an automatic script

00:00:50.000 --> 00:00:53.000
that detects if a particular program has this bug.

00:00:53.000 --> 00:00:55.000
I've already made the script. I've called it test1.sh.

00:00:55.000 --> 00:00:59.000
What it does is compiles a program at the particular optimization level 033.

00:00:59.000 --> 00:01:04.000
and then searches the output for this particular string get<u>initial</u>def<u>for</u>induction.

00:01:04.000 --> 00:01:07.000
The reason for that is that we want to be sure not only that we can crash GCC,

00:01:07.000 --> 00:01:10.000
but we crash GCC with the particular bug we're interested in right now.

00:01:10.000 --> 00:01:14.000
This test script will return 0 to the operating system if it succeeds,

00:01:14.000 --> 00:01:16.000
and it will return something else if it fails.

00:01:16.000 --> 00:01:19.000
Now what we're going to do is invoke the godelta debugger. This is a little script here.

00:01:19.000 --> 00:01:22.000
It makes that work, and it's going to go ahead and try to minimize this test program.

00:01:22.000 --> 00:01:24.000
Let's see how it does.

00:01:24.000 --> 00:01:27.000
The delta debugger just finished, and no doubt Udacity's excellent editors

00:01:27.000 --> 00:01:30.000
have cut out the several minutes I sat there waiting for that to finish,

00:01:30.000 --> 00:01:32.000
but it took about maybe 4 minutes.

00:01:32.000 --> 00:01:34.000
The point is I didn't have to sit there waiting. Let's see how big the program is.

00:01:34.000 --> 00:01:37.000
Okay, it's not that small, but it's about 7 kb.

00:01:37.000 --> 00:01:40.000
The delta debugger got rid of a bunch of the junk.

00:01:40.000 --> 00:01:43.000
It's still going to be a little bit bad. It's not too bad.

00:01:43.000 --> 00:01:47.000
We'll be able to cut down that 7 kb by hand if we want to fairly rapidly--

00:01:47.000 --> 00:01:50.000
much faster than we would have been able to deal with the original nearly 40 kb.

00:01:50.000 --> 00:01:53.000
One thing you might be saying to yourself is that's all well and good.

00:01:53.000 --> 00:01:56.000
John can do test-case reduction for compiler inputs using delta debugging,

00:01:56.000 --> 00:02:00.000
but the really nice thing about delta debugging is it works for any text-based input format.

00:02:00.000 --> 00:02:02.000
That's really nice.

00:02:02.000 --> 00:02:04.000
If we're trying to reduce an HTML document that causes the web browser to crash,

00:02:04.000 --> 00:02:06.000
we can use delta debugger.

00:02:06.000 --> 00:02:08.000
We can use delta debugger if we're trying reduce the JavaScript program

00:02:08.000 --> 00:02:10.000
that causes the JavaScript interpreter to crash.

00:02:10.000 --> 00:02:15.000
We can use delta debugging, basically--anything that's text we can use it for.

00:02:15.000 --> 00:02:17.000
If we think back to the bounded queue data structure

00:02:17.000 --> 00:02:19.000
that we developed a random tester for,

00:02:19.000 --> 00:02:22.000
those particular random tests didn't have any external manifestation.

00:02:22.000 --> 00:02:25.000
Those only existed as data structures internal to Python.

00:02:25.000 --> 00:02:27.000
We can't do delta debugging on those,

00:02:27.000 --> 00:02:29.000
because there's no text file,

00:02:29.000 --> 00:02:31.000
but what we could have done is before running the random test through the queue,

00:02:31.000 --> 00:02:33.000
we could have saved those to a text file--

00:02:33.000 --> 00:02:37.000
that is to say just translating the operations that we were doing into strings--

00:02:37.000 --> 00:02:40.000
and then once that is saved on disk we can run the delta debugger on it

00:02:40.000 --> 00:02:42.000
and come up with a minimal set of queue API operations

00:02:42.000 --> 00:02:44.000
that cause the queue to do something wrong.

00:02:44.000 --> 00:02:46.000
That would probably be a really good idea.

00:02:46.000 --> 00:02:48.000
So, delta debugging is an extremely powerful technique

00:02:48.000 --> 00:02:52.000
and test-case reduction is something that we really need to have in practice,

00:02:52.000 --> 00:02:57.000
especially since this ties in with the triage idea that I talked about a little bit earlier.

00:02:57.000 --> 00:03:00.000
Remember that one of our triage methods is looking at the test case.

00:03:00.000 --> 00:03:02.000
Well, looking at big test cases is really hard.

00:03:02.000 --> 00:03:04.000
There's a bunch of junk that's sitting in the way,

00:03:04.000 --> 00:03:08.000
obscuring the actual features that are causing the system to crash

00:03:08.000 --> 00:03:10.000
or otherwise misbehave.

00:03:10.000 --> 00:03:13.000
If we can do test-case reduction before doing the bug triage

00:03:13.000 --> 00:03:16.000
then the whole process becomes really a lot easier.

