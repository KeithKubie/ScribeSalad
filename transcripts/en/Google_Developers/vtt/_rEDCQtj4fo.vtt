WEBVTT
Kind: captions
Language: en

00:00:12.532 --> 00:00:13.290
AMY: OK.

00:00:13.290 --> 00:00:17.460
Hi everyone, and welcome to
another App Engine Office

00:00:17.460 --> 00:00:19.000
Hours Hangout.

00:00:19.000 --> 00:00:23.090
And so, this is Amy from App
Engine Developer Relations,

00:00:23.090 --> 00:00:26.990
once again happily
not on screen.

00:00:26.990 --> 00:00:32.409
And joining me in our lovely
studio today are three members

00:00:32.409 --> 00:00:35.520
of the App Engine team.

00:00:35.520 --> 00:00:43.040
So these are Sam,
Brian, and Matt.

00:00:43.040 --> 00:00:47.510
And they are going to talk to
us today about a really neat

00:00:47.510 --> 00:00:49.410
thing that they've been working
on, which is a new,

00:00:49.410 --> 00:00:53.270
experimental Dev App
Server for Python.

00:00:53.270 --> 00:00:57.450
And so if you want to join
this Hangout, please do.

00:00:57.450 --> 00:01:02.530
If anyone is watching,
you can go to the

00:01:02.530 --> 00:01:07.440
developers.google.com/liveevent
page, and you should see a

00:01:07.440 --> 00:01:08.640
Join button.

00:01:08.640 --> 00:01:12.630
And you can also see
a Join link on our

00:01:12.630 --> 00:01:15.730
cloud platform G+ page.

00:01:15.730 --> 00:01:19.930
And this is, of course, being
recorded, as well.

00:01:19.930 --> 00:01:22.720
OK, let's get started.

00:01:22.720 --> 00:01:24.510
And I'll let these guys
take it away.

00:01:24.510 --> 00:01:28.456
Brian, tell us a little bit
about what the new Dev App

00:01:28.456 --> 00:01:29.930
Server is and what it's doing.

00:01:29.930 --> 00:01:34.610
BRIAN: Well, I'll actually start
by pointing out how you

00:01:34.610 --> 00:01:35.840
can get to it.

00:01:35.840 --> 00:01:39.090
Because it's my goal here to try
and convince everyone who

00:01:39.090 --> 00:01:42.230
listens to this that they should
download Dev App Server

00:01:42.230 --> 00:01:47.660
to test us and provide feedback
so we can make it

00:01:47.660 --> 00:01:50.480
better when we release it.

00:01:50.480 --> 00:01:53.560
As always, the URL is

00:01:53.560 --> 00:01:57.020
devappserver2 in a Google search.

00:01:57.020 --> 00:02:03.210
And then click on
the first link.

00:02:03.210 --> 00:02:07.860
And here you can get
instructions on what the

00:02:07.860 --> 00:02:09.720
design goals are.

00:02:09.720 --> 00:02:15.320
You can download the project.

00:02:15.320 --> 00:02:17.550
And also if you want--

00:02:17.550 --> 00:02:20.390
we're developing
this using GIT.

00:02:20.390 --> 00:02:24.720
So you can GIT clone a
repository if you want, and

00:02:24.720 --> 00:02:27.525
then just keep pulling
for updates.

00:02:30.370 --> 00:02:36.350
OK, actually I'll start
with a demo.

00:02:36.350 --> 00:02:41.930
Dev App Server 2, its goal is
basically to eventually

00:02:41.930 --> 00:02:48.730
replace the development server
that we use for offline,

00:02:48.730 --> 00:02:51.210
non-production Python
development and testing.

00:02:53.940 --> 00:03:00.120
And here's a simple application
that I made.

00:03:00.120 --> 00:03:05.040
Actually, I'll just start
by running it.

00:03:05.040 --> 00:03:13.640
Here it is running in the
original development server.

00:03:13.640 --> 00:03:16.500
So, Dev App Server, I will
run it on port 9000.

00:03:16.500 --> 00:03:22.680
And then my App is on my
desktop, and it's called Perf.

00:03:22.680 --> 00:03:25.110
I'll run that.

00:03:25.110 --> 00:03:26.200
And it's running.

00:03:26.200 --> 00:03:27.840
And then let me go here.

00:03:31.460 --> 00:03:35.890
And what this does is it
just serves tiles.

00:03:35.890 --> 00:03:37.650
The imagery is courtesy
of NASA.

00:03:37.650 --> 00:03:39.885
And it's just tiles representing
the Earth.

00:03:39.885 --> 00:03:43.730
Now, let me do the same thing
in a different window

00:03:43.730 --> 00:03:49.630
using Version 2.

00:03:49.630 --> 00:03:53.170
Hopefully that shell completion
is correct, even

00:03:53.170 --> 00:03:53.970
though it looked wrong.

00:03:53.970 --> 00:03:55.110
How are we doing?

00:03:55.110 --> 00:03:58.190
Well, we're almost done.

00:03:58.190 --> 00:04:05.000
And then in Version 2,
it's getting nervous

00:04:05.000 --> 00:04:06.250
because of the demo.

00:04:09.726 --> 00:04:11.540
Actually, that is very odd.

00:04:11.540 --> 00:04:12.885
Let me switch back here.

00:04:20.220 --> 00:04:22.029
I feel like a Microsoft
executive on

00:04:22.029 --> 00:04:23.279
the stage right now.

00:04:26.140 --> 00:04:28.820
Let me restart.

00:04:28.820 --> 00:04:30.470
AMY: Do you want to just
play Steve Ballmer?

00:04:34.826 --> 00:04:36.700
MATT: So it's experimental?

00:04:36.700 --> 00:04:38.510
BRIAN: Yes, did I say
it was experimental?

00:04:46.345 --> 00:04:47.595
OK.

00:04:54.250 --> 00:04:55.732
Let's try again.

00:05:03.320 --> 00:05:04.570
OK, I don't know why
this is happening.

00:05:07.240 --> 00:05:08.340
This is the App.

00:05:08.340 --> 00:05:12.020
It had Threadsafe
No set before.

00:05:12.020 --> 00:05:13.560
Let me change that to Yes.

00:05:16.185 --> 00:05:19.394
Do I have maybe just a network
connectivity problem?

00:05:19.394 --> 00:05:20.865
That's possible, I suppose.

00:05:27.054 --> 00:05:30.070
Let me try once more.

00:05:30.070 --> 00:05:31.830
And then I'll just tell
you how awesome this

00:05:31.830 --> 00:05:32.640
demo would have been.

00:05:32.640 --> 00:05:35.130
OK.

00:05:35.130 --> 00:05:37.720
I don't know why
that happened.

00:05:37.720 --> 00:05:42.890
One of the goals of the project
is the new frontend is

00:05:42.890 --> 00:05:44.220
multi-threaded.

00:05:44.220 --> 00:05:48.140
You can see, compared to--
this is the current

00:05:48.140 --> 00:05:49.210
development server.

00:05:49.210 --> 00:05:50.980
I just hit Reload.

00:05:50.980 --> 00:05:55.480
And you can see the performance
loading content.

00:05:55.480 --> 00:06:01.970
And in Version 2, which I just
switched to, this is the

00:06:01.970 --> 00:06:05.240
performance loading
the example app.

00:06:05.240 --> 00:06:09.970
And you can see, version one,
if I switch back, it's still

00:06:09.970 --> 00:06:15.280
not even half done before the
previous one is finished.

00:06:15.280 --> 00:06:18.570
And just to give you an idea of
what the application looks

00:06:18.570 --> 00:06:24.360
like, these image tiles are
being served, half of them are

00:06:24.360 --> 00:06:29.870
being served, through
static content.

00:06:29.870 --> 00:06:35.410
And the other half are being
served through a user-defined

00:06:35.410 --> 00:06:36.550
application.

00:06:36.550 --> 00:06:38.560
And the application is
completely trivial.

00:06:38.560 --> 00:06:46.830
It's just sleep for 100
milliseconds to simulate doing

00:06:46.830 --> 00:06:54.140
some sort of work and then just
open the image, read it,

00:06:54.140 --> 00:06:56.890
and then write the response.

00:06:56.890 --> 00:06:59.380
Interesting, I just noticed now
that this is not correct

00:06:59.380 --> 00:07:00.150
for Windows.

00:07:00.150 --> 00:07:01.400
Let me fix that.

00:07:05.920 --> 00:07:08.130
We'll try and add
this to our demo

00:07:08.130 --> 00:07:10.410
applications at some point.

00:07:10.410 --> 00:07:12.010
We just have to check
the copyright

00:07:12.010 --> 00:07:15.220
on that NASA imagery.

00:07:15.220 --> 00:07:20.320
So, you can see one of the
advantages that we have in the

00:07:20.320 --> 00:07:25.915
new development application
server is performance due to

00:07:25.915 --> 00:07:27.840
this multi-threaded frontend.

00:07:27.840 --> 00:07:33.660
We also have a nicer task
queue behavior, because

00:07:33.660 --> 00:07:37.100
multiple tasks can execute
concurrently.

00:07:37.100 --> 00:07:42.870
And they don't block user
requests when they're running.

00:07:42.870 --> 00:07:47.030
The current development server
also has this problem where if

00:07:47.030 --> 00:07:50.840
you URL fetch your own
application, it deadlocks.

00:07:50.840 --> 00:07:54.990
That's because your application
is running.

00:07:54.990 --> 00:07:57.540
It's single-threaded, so when
you then connect back to

00:07:57.540 --> 00:08:01.250
yourself, that connect
back blocks

00:08:01.250 --> 00:08:03.590
until the request finishes.

00:08:03.590 --> 00:08:05.670
But, of course, the request will
never finish until the

00:08:05.670 --> 00:08:08.520
URL fetch returns.

00:08:08.520 --> 00:08:09.495
It also fixes some problems.

00:08:09.495 --> 00:08:17.890
A few browsers, notably Opera,
have problems displaying

00:08:17.890 --> 00:08:22.120
content from single-threaded web
servers, because they do

00:08:22.120 --> 00:08:24.080
multiple fetches in parallel.

00:08:24.080 --> 00:08:28.785
And they kind of get confused
if the fetches don't return.

00:08:31.560 --> 00:08:33.782
In addition to this
multi-threaded frontend, we do

00:08:33.782 --> 00:08:36.600
have a few other nice things.

00:08:36.600 --> 00:08:41.620
We're aiming to have a
much higher fidelity.

00:08:41.620 --> 00:08:47.510
We want to more accurately
reflect the production

00:08:47.510 --> 00:08:48.100
environment.

00:08:48.100 --> 00:08:50.740
So we do that by spawning
multiple

00:08:50.740 --> 00:08:52.413
instances to handle requests.

00:08:55.490 --> 00:08:58.650
We support thread safe.

00:08:58.650 --> 00:09:00.740
You saw I turned that
on, and it magically

00:09:00.740 --> 00:09:01.740
made everything work.

00:09:01.740 --> 00:09:02.730
I don't know why that is.

00:09:02.730 --> 00:09:06.340
But clearly thread safe actually
does something on

00:09:06.340 --> 00:09:08.230
this development server.

00:09:08.230 --> 00:09:11.550
We support warm-up requests.

00:09:11.550 --> 00:09:19.980
The sandbox, which is the part
of the development server that

00:09:19.980 --> 00:09:22.850
makes the security look like the
production run time, it's

00:09:22.850 --> 00:09:28.100
a lot more robust in the
Version 2 run time.

00:09:28.100 --> 00:09:32.215
And also we support multiple
library versions.

00:09:37.480 --> 00:09:43.570
In the current development
server, we only will let you

00:09:43.570 --> 00:09:47.060
use one version of webapp, even
though your library's

00:09:47.060 --> 00:09:49.910
directive allows you to specify
different versions.

00:09:49.910 --> 00:09:54.480
We fixed that in Dev
App Server 2.

00:09:54.480 --> 00:09:56.610
By the way, if anyone is online
and has questions, feel

00:09:56.610 --> 00:09:57.860
free to fire away.

00:10:01.112 --> 00:10:04.570
AMY: Yeah, Anton
has joined us.

00:10:04.570 --> 00:10:09.210
And please feel free to type in
the chat window or break in

00:10:09.210 --> 00:10:12.140
if you have anything you'd
like to ask or discuss.

00:10:15.241 --> 00:10:17.710
BRIAN: What else?

00:10:17.710 --> 00:10:23.210
There's also this new project
we're doing on App Engine

00:10:23.210 --> 00:10:25.470
called Servers.

00:10:25.470 --> 00:10:30.120
We're not really ready to
disclose very much about that.

00:10:30.120 --> 00:10:33.450
There was a tiny bit that
we talked about on

00:10:33.450 --> 00:10:35.860
I/O talk this year.

00:10:35.860 --> 00:10:40.110
Do you remember what talk it
was at the end of, Sam?

00:10:40.110 --> 00:10:42.135
SAM: Not sure which talk
it was, but it was

00:10:42.135 --> 00:10:45.050
one given by Troy.

00:10:45.050 --> 00:10:45.920
BRIAN: Troy.

00:10:45.920 --> 00:10:50.350
OK, so if you look on the Google
I/O site, look for Troy

00:10:50.350 --> 00:10:52.810
and App Engine.

00:10:52.810 --> 00:10:55.670
By look for, I mean, of course,
the search is App

00:10:55.670 --> 00:10:58.290
Engine Google I/O Troy.

00:10:58.290 --> 00:11:01.750
And you look at about the last
15 minutes of the talk, and

00:11:01.750 --> 00:11:05.400
you'll hear a bit
about servers.

00:11:05.400 --> 00:11:10.520
Servers are basically,
conceptually, they're in the

00:11:10.520 --> 00:11:14.930
same space as backends, just
a way of running additional

00:11:14.930 --> 00:11:21.900
functionality as part of the
same logical application.

00:11:21.900 --> 00:11:24.760
So, one of the goals of the Dev
App Server 2 project is to

00:11:24.760 --> 00:11:33.200
support that robustly in a way
that the current development

00:11:33.200 --> 00:11:35.520
server does not provide the

00:11:35.520 --> 00:11:38.900
equivalent support for backend.

00:11:38.900 --> 00:11:45.830
So, for example, the Version 2
Development Server supports

00:11:45.830 --> 00:11:55.530
background threads, what
else does it support?

00:11:55.530 --> 00:11:59.180
Did Version 1 support H Start
and Stop requests?

00:11:59.180 --> 00:12:04.840
SAM: I think it might have
Start but not Stop.

00:12:04.840 --> 00:12:09.180
We'll have probably Shut
Down requests in V-2.

00:12:09.180 --> 00:12:10.412
BRIAN: Yeah.

00:12:10.412 --> 00:12:14.910
MATT: You need some kind of
multi-processing to support

00:12:14.910 --> 00:12:15.770
servers or backends.

00:12:15.770 --> 00:12:17.660
BRIAN: Yeah, in a logical way.

00:12:17.660 --> 00:12:20.960
MATT: The old Dev App server,
the architecture couldn't have

00:12:20.960 --> 00:12:26.810
supported any kind of ongoing
background requests or

00:12:26.810 --> 00:12:28.960
background processing because
it's single-threaded.

00:12:31.800 --> 00:12:35.010
BRIAN: Yeah, that's pretty
much what our goals are.

00:12:35.010 --> 00:12:40.830
We're also just trying to do
as much cleanup as we can,

00:12:40.830 --> 00:12:45.830
just support some little things
that make life better

00:12:45.830 --> 00:12:48.280
for people.

00:12:48.280 --> 00:12:55.600
For example, we're supporting
High Replication Datastore

00:12:55.600 --> 00:12:56.630
exclusively.

00:12:56.630 --> 00:13:02.760
And we have some parameters to
allow you to configure exactly

00:13:02.760 --> 00:13:04.380
what consistency mode
you want for

00:13:04.380 --> 00:13:05.630
High Replication Datastore.

00:13:09.500 --> 00:13:11.630
It's a small thing, but
I think it's cool.

00:13:11.630 --> 00:13:17.370
We package all of the data
files related to an

00:13:17.370 --> 00:13:22.870
application, like the Datastore,
Blobstore in one

00:13:22.870 --> 00:13:25.460
directory, which I
think is nice.

00:13:25.460 --> 00:13:27.550
Can you guys think of anything
else that's kind

00:13:27.550 --> 00:13:29.825
of small but cool?

00:13:35.550 --> 00:13:38.012
Very sad.

00:13:38.012 --> 00:13:43.612
AMY: And I can't remember if
you mentioned that it's

00:13:43.612 --> 00:13:46.690
essentially open source, taking
contributions from

00:13:46.690 --> 00:13:47.060
people who want to.

00:13:47.060 --> 00:13:51.200
BRIAN: Yeah, so we took a fairly
different approach to

00:13:51.200 --> 00:13:55.750
open sourcing Version 2 of
the development server.

00:13:55.750 --> 00:14:02.600
If anyone else has looked at the
source for Version 1, you

00:14:02.600 --> 00:14:08.760
can see we push the code maybe
once every month or two.

00:14:08.760 --> 00:14:11.990
They don't include comments
or tests.

00:14:11.990 --> 00:14:17.570
And there's no easy way for you
to produce patches or file

00:14:17.570 --> 00:14:24.660
issues except through
the public App

00:14:24.660 --> 00:14:26.230
Engine Issue Tracker.

00:14:26.230 --> 00:14:30.730
We've changed all of those
things for Dev App Server 2.

00:14:35.220 --> 00:14:39.770
The code is, I was going to
say well-commented, but

00:14:39.770 --> 00:14:45.300
clearly that's a matter that
software engineers fight over.

00:14:45.300 --> 00:14:45.890
I think it's well-commented.

00:14:45.890 --> 00:14:47.140
AMY: Is it self-documented?

00:14:50.865 --> 00:14:55.845
MATT: It has all the comments
that we can see.

00:14:55.845 --> 00:14:57.290
BRIAN: We include
the unit tests.

00:14:57.290 --> 00:15:01.950
So if you want to know--

00:15:01.950 --> 00:15:04.377
some people have providing
feedback saying that--

00:16:21.950 --> 00:16:26.500
From your perspective, it gives
you a chance to affect

00:16:26.500 --> 00:16:31.120
our development trajectories.

00:16:31.120 --> 00:16:43.470
So, people have already noted
that maybe some of the

00:16:43.470 --> 00:16:48.030
dependencies that we have should
at least be documented

00:16:48.030 --> 00:16:50.520
better, or they should warn you
appropriately if you don't

00:16:50.520 --> 00:16:52.330
have those in place.

00:16:52.330 --> 00:16:58.080
And we've already taken action
to address that, because right

00:16:58.080 --> 00:16:59.680
now we have a small
pool of users.

00:16:59.680 --> 00:17:04.235
And we're trying our best
to make them happy.

00:17:04.235 --> 00:17:07.030
MATT: So, is there an issue
tracker on GitHub?

00:17:07.030 --> 00:17:08.290
Are you using that?

00:17:08.290 --> 00:17:11.130
BRIAN: Not on GitHub,
on Google Code.

00:17:11.130 --> 00:17:15.376
MATT: Oh, OK, and is it the same
issue tracker that you

00:17:15.376 --> 00:17:16.380
used for the rest
of App Engine?

00:17:16.380 --> 00:17:16.910
BRIAN: No, it's not.

00:17:16.910 --> 00:17:20.950
MATT: OK, so how do you find
that on Google Code?

00:17:20.950 --> 00:17:22.720
Is there a link from GitHub?

00:17:22.720 --> 00:17:26.569
BRIAN: No, all our code
is on Google Project.

00:17:26.569 --> 00:17:32.370
So, once you've done your search
for Dev App Server 2,

00:17:32.370 --> 00:17:34.870
you just click the
Issues link.

00:17:34.870 --> 00:17:39.890
And then you can
file your bugs.

00:17:39.890 --> 00:17:45.640
AMY: I think your laptop has
left the Hangout due to our

00:17:45.640 --> 00:17:47.468
little reboot there.

00:17:47.468 --> 00:17:49.753
If you want to join in.

00:17:49.753 --> 00:17:51.450
BRIAN: I was just going to--

00:17:54.180 --> 00:17:59.505
MATT: And, also, what's the
license for Dev App Server 2?

00:17:59.505 --> 00:18:01.150
BRIAN: It's all Apache
licensed.

00:18:08.038 --> 00:18:09.288
Join.

00:18:12.510 --> 00:18:15.560
SAM: Whoops, [INAUDIBLE].

00:18:15.560 --> 00:18:19.260
AMY: OK, so I'm not seeing any
questions yet on the moderator

00:18:19.260 --> 00:18:22.060
from any of our viewing
audience.

00:18:22.060 --> 00:18:25.910
And if you have a question and
you want to ask, if you go to

00:18:25.910 --> 00:18:33.690
developers.google.com/live and
look for this event and click

00:18:33.690 --> 00:18:35.730
on it, you should be
able to find the

00:18:35.730 --> 00:18:37.690
moderator queue there.

00:18:37.690 --> 00:18:39.130
We welcome your questions.

00:18:39.130 --> 00:18:41.970
And you should also be able to
join from that event page if

00:18:41.970 --> 00:18:43.220
you want to talk
to us directly.

00:18:47.730 --> 00:18:51.210
Otherwise, I'll play audience
for a few minutes and ask

00:18:51.210 --> 00:18:52.615
these guys a few
more questions.

00:18:58.880 --> 00:19:03.190
Sorry, there's someone asking
can you hear us OK?

00:19:03.190 --> 00:19:05.210
BRIAN: We can't hear
you at all.

00:19:05.210 --> 00:19:07.720
AMY: No, unfortunately,
we can't.

00:19:10.660 --> 00:19:13.730
MATT: We can't see them
in the Hangout either.

00:19:13.730 --> 00:19:18.150
AMY: We had a little
bit of a glitch.

00:19:18.150 --> 00:19:21.800
And our Hangout screen appeared
to reboot itself.

00:19:21.800 --> 00:19:29.390
And the person who's asking
that question may

00:19:29.390 --> 00:19:31.700
want to try to rejoin.

00:19:31.700 --> 00:19:35.300
And then we see a question
from Anand.

00:19:35.300 --> 00:19:37.810
Are there any new and
interesting features we expect

00:19:37.810 --> 00:19:39.567
to see in Dev App Server 2?

00:19:42.369 --> 00:19:51.290
BRIAN: Yes, well, as I said,
we're basically trying to

00:19:51.290 --> 00:19:59.530
track features that are coming
up in App Engine itself.

00:19:59.530 --> 00:20:02.960
Servers would be a big one.

00:20:02.960 --> 00:20:06.700
But, obviously, the point of the
development server is to

00:20:06.700 --> 00:20:09.910
emulate what happens
in production.

00:20:09.910 --> 00:20:11.920
So, obviously, we're not going
to add any features that

00:20:11.920 --> 00:20:14.120
aren't going to be available
when you actually deploy your

00:20:14.120 --> 00:20:15.370
application.

00:20:17.390 --> 00:20:19.460
Fidelity, I guess, would
be our better feature.

00:20:19.460 --> 00:20:22.410
And as I said, we're supporting
background threads,

00:20:22.410 --> 00:20:26.570
warm-up requests, better
sandboxing, better library

00:20:26.570 --> 00:20:27.820
version support.

00:20:30.075 --> 00:20:33.590
MATT: Some of the really tiny
things that have come up just

00:20:33.590 --> 00:20:36.770
from the process of porting
over the code to Dev App

00:20:36.770 --> 00:20:38.585
Server 2, just discovering
little things that were wrong

00:20:38.585 --> 00:20:41.080
like, for example, HTTP
headers being

00:20:41.080 --> 00:20:42.520
sent exactly the same.

00:20:42.520 --> 00:20:45.740
We cleaned up all that.

00:20:45.740 --> 00:20:49.130
Just lots of small things that
will make it closer to

00:20:49.130 --> 00:20:50.490
production.

00:20:50.490 --> 00:20:53.640
BRIAN: Yeah, exactly.

00:20:53.640 --> 00:20:56.800
MATT: One of the things that's
still a problem, I think, with

00:20:56.800 --> 00:20:59.490
Dev App Server 2 that we may be
working towards improving

00:20:59.490 --> 00:21:04.980
is that a lot of the libraries,
you need to bring

00:21:04.980 --> 00:21:06.765
your own version
of the library.

00:21:06.765 --> 00:21:09.220
Can we talk about--

00:21:09.220 --> 00:21:11.550
this is not in the current
version of Dev App Server 2.

00:21:11.550 --> 00:21:15.150
You still need to bring your own
version of libraries like

00:21:15.150 --> 00:21:17.010
LXML and some of
the other ones.

00:21:19.590 --> 00:21:22.060
I think at least the
architecture will perhaps

00:21:22.060 --> 00:21:23.740
allow this to be fixed.

00:21:23.740 --> 00:21:26.810
BRIAN: Yeah, I mean adding the
dependencies as part of the

00:21:26.810 --> 00:21:28.920
packaging is definitely
something we'd like to do in

00:21:28.920 --> 00:21:30.170
the future.

00:21:34.400 --> 00:21:36.700
Did the person who asked
whether they--

00:21:36.700 --> 00:21:40.480
I hope, Anand, that answers
your question.

00:21:40.480 --> 00:21:44.890
The other person who we couldn't
hear, could you type

00:21:44.890 --> 00:21:47.860
in your question, or your
feedback, or whatever you

00:21:47.860 --> 00:21:49.250
wanted to say?

00:21:49.250 --> 00:21:51.620
AMY: I see Bryce has
just joined us.

00:21:51.620 --> 00:21:52.250
Hi, Bryce.

00:21:52.250 --> 00:21:56.715
If you want to type any
questions into the chat or

00:21:56.715 --> 00:22:00.081
turn on your audio,
you're welcome to.

00:22:00.081 --> 00:22:02.780
BRIAN: Well, we don't know if we
can actually hear people if

00:22:02.780 --> 00:22:05.508
they turn on their audio.

00:22:05.508 --> 00:22:09.900
MATT: So far we're just seeing
black or profile pictures.

00:22:09.900 --> 00:22:11.410
BRIAN: We're all software
engineers.

00:22:11.410 --> 00:22:15.575
But at home we all have 8:00
blinking on our VCRs.

00:22:18.350 --> 00:22:22.190
AMY: So, Bryce is typing
something.

00:22:22.190 --> 00:22:23.440
That's great.

00:22:26.042 --> 00:22:28.526
He says he's in a busy room.

00:22:28.526 --> 00:22:31.010
He does have to have
his A/V on.

00:22:31.010 --> 00:22:32.260
Very good point.

00:22:34.610 --> 00:22:38.340
I have a question to ask.

00:22:38.340 --> 00:22:44.900
I notice that in the command
line options for Dev App

00:22:44.900 --> 00:22:47.890
Server 2 the High Replication
flag is gone.

00:22:47.890 --> 00:22:49.886
And there's a Consistency
flag.

00:22:49.886 --> 00:22:51.250
Do you guys want to say a
little more about that?

00:22:51.250 --> 00:22:53.850
It looks like an improvement
to your model.

00:22:53.850 --> 00:23:00.530
BRIAN: Sure, there's no support
for emulating the old

00:23:00.530 --> 00:23:04.960
master-slave Datastore anymore
since it's been deprecated

00:23:04.960 --> 00:23:08.230
for, how long?

00:23:08.230 --> 00:23:12.280
Instead, what the flag does
is control exactly how the

00:23:12.280 --> 00:23:15.280
consistency works in
High Replication.

00:23:15.280 --> 00:23:17.830
The default is time-based.

00:23:22.380 --> 00:23:26.670
Let me just take a half a step
back and explain how High

00:23:26.670 --> 00:23:30.500
Replication works at the
most trivial level.

00:23:30.500 --> 00:23:37.420
If you do a Put in the
Datastore, and then you do a

00:23:37.420 --> 00:23:40.230
Query which should find
that Put-- and it's

00:23:40.230 --> 00:23:42.540
not an Ancestor Query--

00:23:42.540 --> 00:23:47.550
then it's possible that you
won't see the data you just

00:23:47.550 --> 00:23:52.310
Put, because the data hasn't
replicated to the instance

00:23:52.310 --> 00:23:56.240
that the Query is running on.

00:23:56.240 --> 00:24:01.100
So, our defaults, this slide
that you were mentioning, by

00:24:01.100 --> 00:24:06.700
default it emulates that
behavior where the probability

00:24:06.700 --> 00:24:18.110
of a Put appearing in a Query
result is proportional to the

00:24:18.110 --> 00:24:21.815
time that's passed since you
added it to the Datastore.

00:24:21.815 --> 00:24:23.580
AMY: And that's good,
because it didn't

00:24:23.580 --> 00:24:24.950
used to be the default.

00:24:24.950 --> 00:24:26.796
It used to be--

00:24:26.796 --> 00:24:30.270
BRIAN: Master-slave
was the default.

00:24:30.270 --> 00:24:39.430
And this, actually, is the
most consistent with how

00:24:39.430 --> 00:24:40.840
production App Engine works.

00:24:40.840 --> 00:24:46.410
The longer you wait, the more
likely that entity you Put

00:24:46.410 --> 00:24:51.860
will appear in Query results.

00:24:51.860 --> 00:24:56.970
We also have another mode
which is purely

00:24:56.970 --> 00:25:01.360
probability-based,
not time-based.

00:25:01.360 --> 00:25:07.016
And this is actually pretty good
for testing correctness.

00:25:10.210 --> 00:25:13.890
The problem with the time-based
model, if you do a

00:25:13.890 --> 00:25:18.980
Put, and then you do a Request
two seconds later, you'll

00:25:18.980 --> 00:25:22.910
almost always see that the Put
you do appears in the results.

00:25:22.910 --> 00:25:27.670
Because two seconds means
it's highly likely to

00:25:27.670 --> 00:25:31.610
appear in the results.

00:25:31.610 --> 00:25:36.490
The random one just assigns a
probability, whether every

00:25:36.490 --> 00:25:40.320
query increases the probability
that you'll see a

00:25:40.320 --> 00:25:42.400
particular entity in it.

00:25:42.400 --> 00:25:48.890
That means you can hit refresh
in your browser, or whatever

00:25:48.890 --> 00:25:54.740
triggers a query, and even if
there was a time delay there,

00:25:54.740 --> 00:25:57.650
you might not see the results.

00:25:57.650 --> 00:26:03.440
That's good for stress testing
your correctness.

00:26:03.440 --> 00:26:09.970
And there is a final mode, which
is just force things to

00:26:09.970 --> 00:26:10.700
be consistent.

00:26:10.700 --> 00:26:13.670
So, as soon as you
do a Put, you're

00:26:13.670 --> 00:26:17.440
guaranteed to see the results.

00:26:17.440 --> 00:26:24.460
And the only good reason to
use that is if you have a

00:26:24.460 --> 00:26:29.900
test, and you're using the
development server as part of

00:26:29.900 --> 00:26:33.930
that, and you just
need determinism.

00:26:33.930 --> 00:26:36.120
We use that ourselves for
some of our tests.

00:26:36.120 --> 00:26:40.550
Because the tests would
be flaky if it had

00:26:40.550 --> 00:26:43.055
non-deterministic aspects.

00:26:43.055 --> 00:26:46.720
AMY: And also, perhaps, just for
debugging if you want to

00:26:46.720 --> 00:26:48.340
rule out that it's--

00:26:48.340 --> 00:26:50.600
BRIAN: Oh, yeah, if you
had a sequencing

00:26:50.600 --> 00:26:51.650
problem, and you wanted--

00:26:51.650 --> 00:26:53.250
yeah, then forcing a particular

00:26:53.250 --> 00:26:54.273
ordering would be useful.

00:26:54.273 --> 00:26:55.523
Yeah, that's true.

00:26:59.586 --> 00:27:03.386
AMY: Just checking if we had any
more moderator questions.

00:27:03.386 --> 00:27:05.250
No moderator questions?

00:27:05.250 --> 00:27:06.500
Oh, there is one.

00:27:10.887 --> 00:27:16.267
All right, well this is not
quite on the topic of the Dev

00:27:16.267 --> 00:27:18.930
App Server, but it's one that
everyone would be interested

00:27:18.930 --> 00:27:21.410
in discussing, I think.

00:27:21.410 --> 00:27:23.610
So, we'll diverge briefly.

00:27:23.610 --> 00:27:25.410
Do you think it's worth
learning Go?

00:27:25.410 --> 00:27:27.796
Currently using Python as
my primary language.

00:27:30.855 --> 00:27:32.710
I would say, emphatically,
yes.

00:27:32.710 --> 00:27:35.220
Go is an excellent language.

00:27:35.220 --> 00:27:37.040
And it's clean and beautiful.

00:27:37.040 --> 00:27:39.974
And you will have a lot
of fun learning it.

00:27:39.974 --> 00:27:41.280
Would you guys like to
contribute to that?

00:27:41.280 --> 00:27:44.170
BRIAN: Well, as always, spinning
things back toward

00:27:44.170 --> 00:27:51.460
something at least vaguely
Dev App Server 2 related,

00:27:51.460 --> 00:27:55.640
currently backends allow you
to write a single logical

00:27:55.640 --> 00:28:02.120
application using versions,
in general.

00:28:02.120 --> 00:28:06.560
There's a trick where you can
deploy an application with one

00:28:06.560 --> 00:28:09.670
version, and then change the run
time and the version and

00:28:09.670 --> 00:28:11.140
deploy it again.

00:28:11.140 --> 00:28:14.800
So, now, serving under different
domains like version

00:28:14.800 --> 00:28:19.170
number dot your app dot appspot
dot com, you can have

00:28:19.170 --> 00:28:22.910
code running in different
languages.

00:28:22.910 --> 00:28:28.290
So, if you have Python code that
might have a performance

00:28:28.290 --> 00:28:34.790
hot spot, and you want to
code it in Go, which is

00:28:34.790 --> 00:28:39.960
significantly faster, then you
can use this approach.

00:28:39.960 --> 00:28:44.230
When Servers are released, then
they'll be a much more

00:28:44.230 --> 00:28:50.690
convenient way of structuring
your applications like this.

00:28:50.690 --> 00:28:51.410
I'm a Python guy.

00:28:51.410 --> 00:28:54.592
But it never hurts to learn
another language.

00:28:54.592 --> 00:28:58.200
And I think Go complements
Python quite nicely.

00:28:58.200 --> 00:29:01.730
MATT: So, does the Dev App
Server 2, do you plan to

00:29:01.730 --> 00:29:02.410
support Go?

00:29:02.410 --> 00:29:05.320
BRIAN: Absolutely.

00:29:05.320 --> 00:29:09.040
You'll be able to run--

00:29:09.040 --> 00:29:13.980
right now, basically the same
development server is used to

00:29:13.980 --> 00:29:16.220
run Python apps and Go apps.

00:29:16.220 --> 00:29:21.050
And in Dev App Server 2, it will
be possible to write an

00:29:21.050 --> 00:29:25.250
application that has both Go and
Python components as part

00:29:25.250 --> 00:29:27.353
of the same logical
application.

00:29:27.353 --> 00:29:30.320
MATT: And I suppose it would
be remiss of me not to ask,

00:29:30.320 --> 00:29:31.570
what about Java?

00:29:34.880 --> 00:29:38.330
To put some context on it, if
you look in the current SDKE,

00:29:38.330 --> 00:29:43.420
you'll find that the Go
development server is largely

00:29:43.420 --> 00:29:45.150
based on the Python one.

00:29:45.150 --> 00:29:47.465
Whereas the Java one is
completely separate and

00:29:47.465 --> 00:29:48.785
written in Java.

00:29:48.785 --> 00:29:50.520
I'm asking the hard question.

00:29:50.520 --> 00:29:52.090
It's much harder to integrate.

00:29:52.090 --> 00:29:54.410
BRIAN: Your colleagues are
always the worst critics.

00:29:57.210 --> 00:29:58.742
It would be nice to
support that.

00:30:03.730 --> 00:30:08.700
The big difference is in
culture, I think, between

00:30:08.700 --> 00:30:09.950
Python and Java.

00:30:13.432 --> 00:30:18.840
In Python and Go, we don't
really have a good ID story,

00:30:18.840 --> 00:30:20.090
debugging story.

00:30:25.620 --> 00:30:30.180
Python doesn't really have a
good debugging story because,

00:30:30.180 --> 00:30:33.920
for whatever reason, Python
developers tend not to use

00:30:33.920 --> 00:30:35.050
things like debuggers.

00:30:35.050 --> 00:30:36.850
And the ID space is--

00:30:36.850 --> 00:30:38.950
MATT: We don't have bugs.

00:30:38.950 --> 00:30:44.780
BRIAN: And the ID space
is heavily fragmented.

00:30:44.780 --> 00:30:47.940
Sam uses VIM.

00:30:47.940 --> 00:30:48.625
Well, I'm--

00:30:48.625 --> 00:30:50.193
MATT: We all use VIM, come on.

00:30:50.193 --> 00:30:52.160
BRIAN: Well, I use VIM, too.

00:30:52.160 --> 00:30:52.930
I've been playing
with Sublime.

00:30:52.930 --> 00:30:54.410
SAM: You pretend
not to use VIM.

00:30:54.410 --> 00:30:56.915
AMY: I use Sublime.

00:30:56.915 --> 00:30:58.640
BRIAN: And I was using
Komodo before.

00:30:58.640 --> 00:31:05.160
But people have different
expectations for tool support

00:31:05.160 --> 00:31:09.460
versus Java people, where
they expect there's--

00:31:09.460 --> 00:31:11.740
well, I was going to say there's
Eclipse and IntelliJ.

00:31:11.740 --> 00:31:13.740
And really for open
source stuff,

00:31:13.740 --> 00:31:15.810
there's really just Eclipse.

00:31:15.810 --> 00:31:21.660
And Java developers expect a
very polished experience as

00:31:21.660 --> 00:31:27.230
far as being able to invoke
their code directly from the

00:31:27.230 --> 00:31:31.270
IDE to be able to set break
points and debug and just

00:31:31.270 --> 00:31:34.150
doing that integration work.

00:31:34.150 --> 00:31:35.450
We definitely should do it.

00:31:35.450 --> 00:31:39.710
But there's a lot of open
questions on how we would make

00:31:39.710 --> 00:31:47.430
that work, especially if you
have a mixed Python Java app,

00:31:47.430 --> 00:31:51.070
and you hit run in Eclipse,
what does that mean?

00:31:51.070 --> 00:31:53.772
How should that work?

00:31:53.772 --> 00:31:57.570
MATT: To answer the question,
yeah, it's good if you want to

00:31:57.570 --> 00:31:59.990
use Go and mix that with Python,
you'll have a much

00:31:59.990 --> 00:32:02.185
better experience on the
Dev App Server 2.

00:32:02.185 --> 00:32:06.770
AMY: In the future it will
be easier to mix them.

00:32:06.770 --> 00:32:09.416
MATT: And Anand says VIM FTW.

00:32:14.542 --> 00:32:18.610
AMY: So, let me ask you
guys another question.

00:32:18.610 --> 00:32:22.700
Say a little more about the
multiple instance support,

00:32:22.700 --> 00:32:28.800
which seems really cool, maybe
something that as people tune

00:32:28.800 --> 00:32:31.113
in and out of this broadcast,
they might not have heard so

00:32:31.113 --> 00:32:32.186
much about.

00:32:32.186 --> 00:32:33.350
BRIAN: Sam, you haven't
answered a

00:32:33.350 --> 00:32:35.440
question yet, go for it.

00:32:35.440 --> 00:32:40.650
SAM: OK, in Dev App Server 1
we have a single instance

00:32:40.650 --> 00:32:43.175
unless you use backends,
which will do one

00:32:43.175 --> 00:32:45.290
instance per backend.

00:32:45.290 --> 00:32:48.410
But in Dev App Server 2, we
support much more production

00:32:48.410 --> 00:32:58.350
like instances where we will
start up new instances in

00:32:58.350 --> 00:33:04.030
response to traffic, kind of
like production does, but not

00:33:04.030 --> 00:33:07.300
really the same algorithm as
production, though it looks

00:33:07.300 --> 00:33:10.660
clever anyway.

00:33:10.660 --> 00:33:21.120
BRIAN: So, say I had a handler
that was just Sleep Five

00:33:21.120 --> 00:33:26.190
Seconds and then Print
Hello World.

00:33:26.190 --> 00:33:30.380
You're saying in Dev App Server
1 if I did that in five

00:33:30.380 --> 00:33:33.460
separate tabs on my browser,
I triggered them one after

00:33:33.460 --> 00:33:36.370
another, it would take 25
seconds to see their result in

00:33:36.370 --> 00:33:37.120
the [INAUDIBLE]?

00:33:37.120 --> 00:33:39.600
SAM: Yes, exactly.

00:33:39.600 --> 00:33:43.740
BRIAN: And in Dev App Server
2, it would make--

00:33:43.740 --> 00:33:44.470
what would happen?

00:33:44.470 --> 00:33:46.760
SAM: Well, it depends if you
have Thread Safe On or Off.

00:33:46.760 --> 00:33:49.140
BRIAN: OK, let's say I
have Thread Safe Off.

00:33:49.140 --> 00:33:51.132
MATT: He's like, it doesn't
work at all if you

00:33:51.132 --> 00:33:53.040
have Thread Safe Off.

00:33:53.040 --> 00:33:57.920
SAM: Well, on other computers,
it won't, fine.

00:33:57.920 --> 00:34:04.610
If you have Thread Safe Off,
then after a short time, based

00:34:04.610 --> 00:34:11.600
on some min wait time or
something, it will spin up new

00:34:11.600 --> 00:34:13.990
instances, which will then
serve the requests.

00:34:17.120 --> 00:34:17.860
You can only get five seconds.

00:34:17.860 --> 00:34:21.204
MATT: So, the console in Dev
App Server 2, which is--

00:34:21.204 --> 00:34:23.912
BRIAN: Sadly, there's not.

00:34:23.912 --> 00:34:25.940
There's a lot of code motion.

00:34:25.940 --> 00:34:26.909
We add stuff.

00:34:26.909 --> 00:34:28.114
We remove stuff.

00:34:28.114 --> 00:34:31.790
MATT: Then what's left
of [INAUDIBLE]?

00:34:31.790 --> 00:34:37.469
BRIAN: We need to add some sort
of UI like production to

00:34:37.469 --> 00:34:41.040
visualize what instances
are getting created.

00:34:41.040 --> 00:34:45.719
And we add that UI and make some
changes to how instances

00:34:45.719 --> 00:34:46.469
are handled.

00:34:46.469 --> 00:34:47.460
The UI ends up breaking.

00:34:47.460 --> 00:34:51.210
We remove it.

00:34:51.210 --> 00:34:53.130
We re-add it working.

00:34:53.130 --> 00:34:55.294
And then the cycle repeats.

00:34:55.294 --> 00:35:00.370
SAM: The good news is if you put
Debugging Prints On, then

00:35:00.370 --> 00:35:05.490
you'll see Starting Instance
One, Stopping Instance One,

00:35:05.490 --> 00:35:07.790
Starting Instance Two, when
you start them up.

00:35:07.790 --> 00:35:09.920
BRIAN: I think you also get--

00:35:09.920 --> 00:35:12.310
there's some debugging
statements that will show when

00:35:12.310 --> 00:35:17.550
it's handling a request, like
if you have Thread Safe On,

00:35:17.550 --> 00:35:18.450
how many requests the

00:35:18.450 --> 00:35:20.380
instances are already handling.

00:35:23.930 --> 00:35:25.930
So, you can see how much
concurrency you're getting.

00:35:36.240 --> 00:35:37.830
So Amy is checking something.

00:35:37.830 --> 00:35:42.300
AMY: I'm checking the moderator
queue again.

00:35:42.300 --> 00:35:44.820
We have no more questions.

00:35:44.820 --> 00:35:49.220
If anyone is watching and has
questions, I really would

00:35:49.220 --> 00:35:50.830
suggest you jump on the queue.

00:35:50.830 --> 00:35:56.210
Because this is a relatively
rare opportunity to talk to

00:35:56.210 --> 00:36:01.260
the people who are working on
something you use every day

00:36:01.260 --> 00:36:03.104
and ask them about it.

00:36:03.104 --> 00:36:06.110
So we have a question from
Bryce coming in, I think.

00:36:13.460 --> 00:36:15.770
MATT: See, the pressure is on
as soon as you start typing.

00:36:20.700 --> 00:36:22.620
AMY: We're waiting
in suspense.

00:36:26.372 --> 00:36:29.440
BRIAN: Can you juggle, Matt?

00:36:29.440 --> 00:36:31.320
MATT: Three balls.

00:36:31.320 --> 00:36:33.780
We don't have any
here, though.

00:36:33.780 --> 00:36:37.930
BRIAN: We're the only Googlers
on the App Engine team that

00:36:37.930 --> 00:36:39.560
can't juggle and entertain
people.

00:36:39.560 --> 00:36:42.055
MATT: I thought Peter was
getting everyone to

00:36:42.055 --> 00:36:43.210
learn how to juggle.

00:36:43.210 --> 00:36:44.830
SAM: He even got to me.

00:36:44.830 --> 00:36:46.080
BRIAN: I tried.

00:36:48.365 --> 00:36:50.976
MATT: Well, when you show up
for work, there's juggling

00:36:50.976 --> 00:36:52.175
balls on the desk.

00:36:52.175 --> 00:36:53.425
Learn how to juggle.

00:36:56.524 --> 00:37:00.410
AMY: Well, we may have run out
of audience questions.

00:37:00.410 --> 00:37:02.550
Anand, do you have any more
questions you would like to

00:37:02.550 --> 00:37:05.270
ask the group?

00:37:05.270 --> 00:37:09.360
Oh, I think Bryce is still
typing, actually.

00:37:09.360 --> 00:37:14.130
BRIAN: So, while the typing is
happening, I'll just add we're

00:37:14.130 --> 00:37:17.640
trying to be responsive
to people's feedback.

00:37:17.640 --> 00:37:20.000
As I say, this is a
great opportunity.

00:37:20.000 --> 00:37:27.800
At this point, we're still at
early stage for you to be able

00:37:27.800 --> 00:37:32.820
to affect the direction of the
project, or at least make sure

00:37:32.820 --> 00:37:37.740
that it doesn't have bugs or
missing features that will

00:37:37.740 --> 00:37:38.270
affect you.

00:37:38.270 --> 00:37:43.720
So I would strongly encourage
you, if you use the

00:37:43.720 --> 00:37:49.560
Development Server as part of
your development process, then

00:37:49.560 --> 00:37:51.480
play with the experimental
server,

00:37:51.480 --> 00:37:53.200
file bugs, ask questions.

00:37:53.200 --> 00:37:58.350
Even if you don't want to look
at it now, if there's big

00:37:58.350 --> 00:38:07.650
limitations in the current
development server, then let

00:38:07.650 --> 00:38:11.060
us now to make sure that we
don't have the same kind of

00:38:11.060 --> 00:38:13.820
problems in Version 2.

00:38:17.234 --> 00:38:24.820
AMY: And sort of apropos of
that, Bryce asks, is Dev App 2

00:38:24.820 --> 00:38:26.660
a total rewrite?

00:38:26.660 --> 00:38:29.730
I'm wondering if perhaps some
of the Dev App Server 1 bugs

00:38:29.730 --> 00:38:31.320
were carried over.

00:38:31.320 --> 00:38:36.520
And he mentions, particularly,
two issues that I'll look up.

00:38:36.520 --> 00:38:42.660
Issue 8383 is the one
where changes to .py

00:38:42.660 --> 00:38:43.700
files are not detected.

00:38:43.700 --> 00:38:50.200
And Issue 7717 is the one in
Windows where SQLite fails to

00:38:50.200 --> 00:38:53.412
write files due to using the
Windows folder Temp.

00:38:56.075 --> 00:39:05.230
BRIAN: So that kind of bug
we don't carry over.

00:39:05.230 --> 00:39:13.580
That file detection bug
should only be in that

00:39:13.580 --> 00:39:15.020
release that was in--

00:39:15.020 --> 00:39:19.320
the next release of the Dev
App Server will fix that.

00:39:19.320 --> 00:39:21.460
But we don't have that bug.

00:39:21.460 --> 00:39:25.450
SAM: There's a completely new
strategy for file changes.

00:39:25.450 --> 00:39:31.870
BRIAN: Right, it's lighter
weight in the sense that it

00:39:31.870 --> 00:39:33.750
takes less resources
on your computer

00:39:33.750 --> 00:39:36.240
to detect file changes.

00:39:36.240 --> 00:39:38.790
MATT: To go to the first part
of the question though, I

00:39:38.790 --> 00:39:41.930
think that a lot of the Dev App
Server 1 code was carried

00:39:41.930 --> 00:39:46.750
over, particularly the stubs,
all of the API stubs, the

00:39:46.750 --> 00:39:51.550
DataStore, memcache, URL
fetch, and so on.

00:39:51.550 --> 00:39:53.470
That has been tweaked
a little bit.

00:39:53.470 --> 00:39:55.730
We made a Thread Safe,
for example.

00:39:55.730 --> 00:39:57.680
But it's mostly carried over.

00:39:57.680 --> 00:40:01.630
The new part is the shell around
it that manages the

00:40:01.630 --> 00:40:04.736
instances and manages
running Python code

00:40:04.736 --> 00:40:07.000
and importing modules.

00:40:07.000 --> 00:40:09.550
What percentage would
you say is new?

00:40:09.550 --> 00:40:14.360
BRIAN: Well, except for
the APIs, probably

00:40:14.360 --> 00:40:15.460
90% of it is new.

00:40:15.460 --> 00:40:20.850
We also do the app.yaml
parsing is the same.

00:40:20.850 --> 00:40:22.610
But most of it is new.

00:40:22.610 --> 00:40:26.890
And the second part, the second
question, I actually

00:40:26.890 --> 00:40:29.610
don't know about the--

00:40:29.610 --> 00:40:35.620
I know what bug you're talking
about, about creating SQLite

00:40:35.620 --> 00:40:38.860
in the directory.

00:40:38.860 --> 00:40:41.330
And to be honest, I haven't
tested that.

00:40:41.330 --> 00:40:43.110
But I will now.

00:40:43.110 --> 00:40:45.990
AMY: And Bryce comments, with
stubs carried over, there's a

00:40:45.990 --> 00:40:48.618
good chance that bug
still exists.

00:40:48.618 --> 00:40:51.754
So, we'll check on it.

00:40:51.754 --> 00:40:54.890
SAM: On Windows,
the SQLite one.

00:40:54.890 --> 00:40:57.260
BRIAN: But isn't it, it
only occurs if you

00:40:57.260 --> 00:40:58.880
don't run as admin.

00:40:58.880 --> 00:41:01.160
And I think I do
on my machine.

00:41:01.160 --> 00:41:02.750
SAM: Run as admin?

00:41:02.750 --> 00:41:04.330
BRIAN: Oh, is that?

00:41:04.330 --> 00:41:05.570
I'm not really a Windows--

00:41:05.570 --> 00:41:06.410
SAM: --admin anymore.

00:41:06.410 --> 00:41:07.220
BRIAN: Oh, really?

00:41:07.220 --> 00:41:08.770
MATT: Yeah, they cleaned up.

00:41:08.770 --> 00:41:12.000
BRIAN: I'm not really much
of a Windows guy.

00:41:12.000 --> 00:41:15.520
I assume my Windows 7 box is
basically the same as my

00:41:15.520 --> 00:41:20.060
Windows 2000 box.

00:41:20.060 --> 00:41:23.760
I haven't seen that bug.

00:41:23.760 --> 00:41:24.760
AMY: We'll make a
note to do it.

00:41:24.760 --> 00:41:26.930
BRIAN: We'll make a note
to look into it.

00:41:26.930 --> 00:41:28.740
MATT: I think the current
Windows strategy is don't run

00:41:28.740 --> 00:41:32.257
as admin unless a program
breaks, and then run as admin.

00:41:36.415 --> 00:41:40.110
AMY: We have another question
from the moderator.

00:41:40.110 --> 00:41:44.240
Would it be possible to see
server side JavaScript for App

00:41:44.240 --> 00:41:46.810
Engine Development, something
like Node.js?

00:41:51.800 --> 00:41:54.630
For this one, I hope everyone
can hear me.

00:41:54.630 --> 00:41:57.540
I'm a little further
away from the mic.

00:41:57.540 --> 00:42:00.420
Our stock answer is, well, we
don't really comment on things

00:42:00.420 --> 00:42:03.410
that aren't specifically
on the roadmap.

00:42:03.410 --> 00:42:06.950
But we're definitely aware that
people are interested in

00:42:06.950 --> 00:42:07.950
something like that.

00:42:07.950 --> 00:42:11.310
And there's probably
an external

00:42:11.310 --> 00:42:13.840
issue requesting that.

00:42:13.840 --> 00:42:15.900
So, please go and star it.

00:42:15.900 --> 00:42:16.965
I'm almost certain there is.

00:42:16.965 --> 00:42:18.975
And if there's not, you
can create one.

00:42:18.975 --> 00:42:20.465
MATT: There is one.

00:42:20.465 --> 00:42:22.890
AMY: Yes, the more stars
the better on

00:42:22.890 --> 00:42:24.520
these kinds of requests.

00:42:24.520 --> 00:42:29.051
Externally, that's very
helpful to us.

00:42:29.051 --> 00:42:31.356
MATT: I think Bryce said
something else.

00:42:31.356 --> 00:42:37.920
AMY: Yes, Bryce says, admin
can write to Windows.

00:42:37.920 --> 00:42:40.640
But regular users can not.

00:42:40.640 --> 00:42:43.920
This bug does not exist if you
use an earlier version of

00:42:43.920 --> 00:42:45.972
Python than 2.7.

00:42:45.972 --> 00:42:48.010
BRIAN: Oh, interesting.

00:42:48.010 --> 00:42:49.620
AMY: Yeah, that is
interesting.

00:42:49.620 --> 00:42:50.980
Thanks for all the information
on that.

00:42:50.980 --> 00:42:53.305
MATT: Thanks, Bryce.

00:42:53.305 --> 00:42:58.050
BRIAN: It would actually be
really helpful if you--

00:42:58.050 --> 00:43:03.130
we only support the SQLite
stub, not the

00:43:03.130 --> 00:43:04.380
pickle-based stub.

00:43:07.470 --> 00:43:10.345
If you're willing to give us a
hand, Bryce, if you downloaded

00:43:10.345 --> 00:43:14.930
the Dev App Server 2 and just
run whatever application is

00:43:14.930 --> 00:43:16.920
giving you problems with V1--

00:43:19.750 --> 00:43:21.160
We'll look into it
independently.

00:43:21.160 --> 00:43:26.410
But the best way to ensure that
we fix it for you is if

00:43:26.410 --> 00:43:31.610
you tell us it's broken for you,
then we'll work to make

00:43:31.610 --> 00:43:33.060
sure it's fixed for you.

00:43:36.828 --> 00:43:39.510
SAM: I don't think we actually
said that this only supports

00:43:39.510 --> 00:43:42.220
the Python 2.7 runtime.

00:43:42.220 --> 00:43:43.660
BRIAN: Right.

00:43:43.660 --> 00:43:46.366
SAM: We're not actually
supporting Python 2.5.

00:43:46.366 --> 00:43:49.267
AMY: For the experimental
Dev App Server.

00:43:49.267 --> 00:43:52.190
BRIAN: Yeah.

00:43:52.190 --> 00:43:53.820
So, you found this link?

00:43:53.820 --> 00:43:59.960
Optimizing your Google App
Engine App is the talk that

00:43:59.960 --> 00:44:03.610
mentioned Servers at the end.

00:44:03.610 --> 00:44:07.355
AMY: It's a Google I/O talk.

00:44:07.355 --> 00:44:12.030
BRIAN: If you look at Google
I/O 2012, Optimizing Your

00:44:12.030 --> 00:44:14.630
Google App Engine App, and then
look at about the last 15

00:44:14.630 --> 00:44:16.460
minutes, it'll talk a
bit about Servers.

00:44:19.370 --> 00:44:22.130
And the content before
that is good, too.

00:44:22.130 --> 00:44:23.380
MATT: Do not skip.

00:44:27.850 --> 00:44:34.030
AMY: OK, well, I think we don't
have any more questions.

00:44:34.030 --> 00:44:37.842
So, I think we'll wrap
it up at that.

00:44:37.842 --> 00:44:39.500
BRIAN: For everyone who is
watching, thanks very

00:44:39.500 --> 00:44:40.390
much for tuning in.

00:44:40.390 --> 00:44:44.365
And we'll thank you even more if
you give us feedback on Dev

00:44:44.365 --> 00:44:45.826
App Server 2.

00:44:45.826 --> 00:44:48.730
AMY: Yes, we look forward to
having you play around a bit.

00:44:48.730 --> 00:44:50.715
And you mentioned that there was
a discussion group for it.

00:44:50.715 --> 00:44:52.450
BRIAN: There is a discussion
group.

00:44:52.450 --> 00:44:54.860
And if you go to the Google
Project page, it's all linked

00:44:54.860 --> 00:44:56.960
from there.

00:44:56.960 --> 00:44:59.260
AMY: Thanks very much for
watching, everyone.

00:44:59.260 --> 00:45:00.490
See you next time.

00:45:00.490 --> 00:45:01.090
BRIAN: Bye.

00:45:01.090 --> 00:45:02.340
MATT: Bye.

