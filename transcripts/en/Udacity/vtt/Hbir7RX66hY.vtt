WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
So one of the topics that we cover in

00:00:02.000 --> 00:00:05.000
this class is optimization,

00:00:05.000 --> 00:00:07.000
making a program faster but having it

00:00:07.000 --> 00:00:10.000
compute the same result, and I like optimization a lot.

00:00:10.000 --> 00:00:12.000
It is a lot of fun to think of

00:00:12.000 --> 00:00:15.000
cool ways to speed up the code,

00:00:15.000 --> 00:00:18.000
but it turns out that often getting the right answer

00:00:18.000 --> 00:00:20.000
or maintaining the code later,

00:00:20.000 --> 00:00:22.000
having the code be well documented,

00:00:22.000 --> 00:00:24.000
making it easy to debug the code,

00:00:24.000 --> 00:00:28.000
these things might all trump optimization.

00:00:28.000 --> 00:00:30.000
Steve, have you seen anything like that in Mozilla

00:00:30.000 --> 00:00:32.000
or other projects you've worked on?

00:00:32.000 --> 00:00:34.000
[Steve] Constantly.

00:00:34.000 --> 00:00:37.000
With the SpiderMonkey JavaScript engine these days,

00:00:37.000 --> 00:00:40.000
I kind of feel like we spend half of our time removing old

00:00:40.000 --> 00:00:47.000
optimizations to make way for refactoring; future engines.

00:00:47.000 --> 00:00:49.000
I think we've been hit particularly hard

00:00:49.000 --> 00:00:52.000
because we switched our JIT engines

00:00:52.000 --> 00:00:54.000
several times at this point.

00:00:54.000 --> 00:00:57.000
TraceMonkey was our original optimization--

00:00:57.000 --> 00:01:00.000
well, our original JIT engine,

00:01:00.000 --> 00:01:07.000
which had a particular style of optimization that it covered,

00:01:07.000 --> 00:01:10.000
and we have since entirely removed

00:01:10.000 --> 00:01:12.000
the TraceMonkey JIT engine and

00:01:12.000 --> 00:01:14.000
replaced it with JÃ¤gerMonkey,

00:01:14.000 --> 00:01:17.000
which is kind of the next generation JIT engine,

00:01:17.000 --> 00:01:19.000
except now, it's the previous generation

00:01:19.000 --> 00:01:21.000
JIT engine itself, and it is slated to be

00:01:21.000 --> 00:01:24.000
replaced by IonMonkey, we like monkeys.

00:01:24.000 --> 00:01:26.000
&gt;&gt; I was going to there is referring monkey theme. [Steve] Yes.

00:01:26.000 --> 00:01:29.000
And it turns out that the sorts of

00:01:29.000 --> 00:01:31.000
optimizations that are really helpful

00:01:31.000 --> 00:01:34.000
for a tracing style JIT

00:01:34.000 --> 00:01:36.000
are really obnoxious when you get into

00:01:36.000 --> 00:01:39.000
a different style of JIT, because they just get in the way,

00:01:39.000 --> 00:01:42.000
and it prevents you from--you know--

00:01:42.000 --> 00:01:44.000
making a lot of code simplifications that makes it

00:01:44.000 --> 00:01:50.000
straight forward to do a JIT in a different style,

00:01:50.000 --> 00:01:52.000
and so there are many, many different

00:01:52.000 --> 00:01:56.000
optimizations that we've had to just rip out wholesale,

00:01:56.000 --> 00:01:59.000
and unfortunately, it's at least as

00:01:59.000 --> 00:02:00.000
much work to remove

00:02:00.000 --> 00:02:02.000
some of these--some of these optimizations

00:02:02.000 --> 00:02:05.000
as it was to make them in the first place,

00:02:05.000 --> 00:02:08.000
and really anytime you do an optimization,

00:02:08.000 --> 00:02:11.000
you have to be very aware of the cost of that optimization.

00:02:11.000 --> 00:02:13.000
You may be saving some runtime,

00:02:13.000 --> 00:02:15.000
but you are adding complexity to everybody who comes

00:02:15.000 --> 00:02:18.000
by and tries to read and understand that code.

00:02:18.000 --> 00:02:21.000
You are preventing some refactoring,

00:02:21.000 --> 00:02:24.000
some restructurings of that code

00:02:24.000 --> 00:02:26.000
because it would--

00:02:26.000 --> 00:02:28.000
it would break the optimization--you know--

00:02:28.000 --> 00:02:31.000
the optimization was made with certain assumptions,

00:02:31.000 --> 00:02:35.000
that's almost the definition of an optimization is that

00:02:35.000 --> 00:02:37.000
if we assume certain things,

00:02:37.000 --> 00:02:41.000
then we don't have to do some of these operations,

00:02:41.000 --> 00:02:43.000
and that's the way to make things faster is to

00:02:43.000 --> 00:02:47.000
not do some of the things that you were previously doing.

00:02:47.000 --> 00:02:50.000
And so there are all kinds of--you know--

00:02:50.000 --> 00:02:53.000
hidden costs to an optimization,

00:02:53.000 --> 00:02:56.000
and it can actually be very damaging to

00:02:56.000 --> 00:02:59.000
put certain optimizations in the code

00:02:59.000 --> 00:03:01.000
because they're going to prevent other optimizations,

00:03:01.000 --> 00:03:04.000
they are going to prevent--you know--

00:03:04.000 --> 00:03:08.000
simplifications of the code, they are going to prevent

00:03:08.000 --> 00:03:10.000
changing the semantics of what you've implemented

00:03:10.000 --> 00:03:12.000
because the optimization is based on certain

00:03:12.000 --> 00:03:15.000
assumptions that you may want to change in the future,

00:03:15.000 --> 00:03:18.000
and so we sent a lot of time--you know--

00:03:18.000 --> 00:03:21.000
trying to find the right balance today,

00:03:21.000 --> 00:03:23.000
which is actually different from the balance yesterday,

00:03:23.000 --> 00:03:26.000
and so even if a previous optimization

00:03:26.000 --> 00:03:29.000
made total sense in the past world,

00:03:29.000 --> 00:03:33.000
it may actually get in the way in the current world.

00:03:33.000 --> 00:03:35.000
So yeah, we see a lot of this.

00:03:35.000 --> 00:03:37.000
&gt;&gt;Excellent, now you mentioned something

00:03:37.000 --> 00:03:39.000
that caught my ear, and I wonder if I might put you on the

00:03:39.000 --> 00:03:41.000
spot with a bit of a surprise question.

00:03:41.000 --> 00:03:44.000
You mentioned that you're looking over old code and refactoring it,

00:03:44.000 --> 00:03:46.000
and I'm just wondering throughout your average day,

00:03:46.000 --> 00:03:49.000
let's say you spend some amount of time reading code

00:03:49.000 --> 00:03:52.000
and some amount of time writing new code.

00:03:52.000 --> 00:03:54.000
What's that ratio or how many hours is

00:03:54.000 --> 00:03:57.000
fixing bugs and code, looking over old code,

00:03:57.000 --> 00:03:59.000
and how much is writing new code?

00:03:59.000 --> 00:04:02.000
[Steve] It varies a lot from day to day.

00:04:02.000 --> 00:04:05.000
Some days are actually spent 100% writing new code,

00:04:05.000 --> 00:04:09.000
and those days are happy days and rare days.

00:04:09.000 --> 00:04:14.000
The vast majority really is looking at existing code,

00:04:14.000 --> 00:04:16.000
sometimes code that I wrote,

00:04:16.000 --> 00:04:18.000
much more often code that other people wrote,

00:04:18.000 --> 00:04:21.000
and here at Mozilla, we have

00:04:21.000 --> 00:04:23.000
a rule that every line of code that goes into the

00:04:23.000 --> 00:04:25.000
tree must be reviewed by another person

00:04:25.000 --> 00:04:31.000
so-you know--in terms of you have a

00:04:31.000 --> 00:04:35.000
sealing of 50% of time is spent

00:04:35.000 --> 00:04:37.000
on new code because every line of new

00:04:37.000 --> 00:04:41.000
code is going to be viewed by at least one other person,

00:04:41.000 --> 00:04:44.000
and often you'll go through multiple rounds of review,

00:04:44.000 --> 00:04:47.000
and so--you know--multiple people or the same person

00:04:47.000 --> 00:04:51.000
are looking at that line of code several times,

00:04:51.000 --> 00:04:53.000
but even if you're going to write new code,

00:04:53.000 --> 00:04:55.000
you always have to understand

00:04:55.000 --> 00:04:57.000
the context in which you're placing that code,

00:04:57.000 --> 00:05:01.000
and so you really have to understand what comes before,

00:05:01.000 --> 00:05:04.000
and you will spend much, much of your time doing that,

00:05:04.000 --> 00:05:06.000
far more of your time doing that

00:05:06.000 --> 00:05:11.000
than kind of going into a green field

00:05:11.000 --> 00:05:14.000
and putting something brand new in place.

00:05:14.000 --> 00:05:16.000
&gt;&gt; And this idea that you have to understand

00:05:16.000 --> 00:05:19.000
the context in which your adding code

00:05:19.000 --> 00:05:21.000
is one of the reasons why understanding the meanings

00:05:21.000 --> 09:59:59.000
of programs, their semantics, is so important.

