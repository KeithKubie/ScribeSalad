WEBVTT
Kind: captions
Language: en

00:00:00.730 --> 00:00:04.220
Can you give us an idea of
a typical application, and

00:00:04.220 --> 00:00:08.840
in particular, how big it is,
how long it takes to develop?

00:00:10.310 --> 00:00:11.730
&gt;&gt; Sure.

00:00:11.730 --> 00:00:13.280
So there are two or three,

00:00:13.280 --> 00:00:17.820
as I said, different kinds of
applications that we tend to develop.

00:00:17.820 --> 00:00:21.220
I think one, that is a good
representative is the Forecast Manager.

00:00:21.220 --> 00:00:25.920
So a forecast manager,
is an application that will forecast

00:00:27.420 --> 00:00:31.550
customer demand for
products at various locations,

00:00:31.550 --> 00:00:36.240
various stores, of a retailer
based on a historical analysis of

00:00:36.240 --> 00:00:39.119
how those products have sold at those
stores over the past two to three years.

00:00:40.380 --> 00:00:45.340
It takes into account special events
like promotions that are enforce and

00:00:45.340 --> 00:00:47.960
it's actually a pretty
complicated set of calculations.

00:00:47.960 --> 00:00:52.606
It involves some regression analysis and
it's pretty involved.

00:00:52.606 --> 00:00:57.480
So, we generally,
when we have a customer,

00:00:57.480 --> 00:01:00.130
what we'll do is, every week or
maybe even every day,

00:01:00.130 --> 00:01:05.260
we will generate new forecasts for
them in a big nightly batch.

00:01:05.260 --> 00:01:06.800
Nightly or weekly batch.

00:01:06.800 --> 00:01:10.140
And we'll calculate the next
52 weeks of forecast for

00:01:10.140 --> 00:01:11.630
all their products at all their stores.

00:01:12.940 --> 00:01:17.360
After which, most retailers have

00:01:17.360 --> 00:01:21.310
a group of employees who go through and
review those forecasts.

00:01:21.310 --> 00:01:24.460
And if they find things don't
look like they have imagined,

00:01:24.460 --> 00:01:28.420
because it's forecasting, it's not,
you know, it's not an exact science.

00:01:28.420 --> 00:01:31.050
They'll want to get in and do some
tweaking, make some adjustments to them,

00:01:31.050 --> 00:01:35.540
maybe they think that some estimates
of increased demand are too high or

00:01:35.540 --> 00:01:38.390
too low, and they'll actually
want to make some changes.

00:01:38.390 --> 00:01:40.500
So forecast manager
application's responsible for

00:01:40.500 --> 00:01:44.300
generating all these forecasts
allowing forecasters,

00:01:45.420 --> 00:01:48.760
the employees at a retail organization
to go through and drill up and

00:01:48.760 --> 00:01:50.930
drill down, and
try to understand these forecasts, and

00:01:50.930 --> 00:01:53.950
also to allow them to make
changes to the forecast.

00:01:53.950 --> 00:01:55.766
Tweak them, what if them, et cetera.

00:01:55.766 --> 00:02:01.060
&gt;&gt; And they can use they forecasts
to predict sales and do inventory?

00:02:01.060 --> 00:02:02.770
&gt;&gt; Correct.
&gt;&gt; Sorts of things.

00:02:02.770 --> 00:02:04.540
It's central to they're planning.

00:02:04.540 --> 00:02:05.910
&gt;&gt; It's very similar to their plan,
yeah.

00:02:05.910 --> 00:02:08.880
It's typically hooked up with
replenishment systems as well.

00:02:08.880 --> 00:02:14.500
So once they approve the forecasts
that we've suggested for them, they'll

00:02:14.500 --> 00:02:18.410
then send those forecasts down to a
replenishment system which will actually

00:02:18.410 --> 00:02:24.050
make orders and cause goods to be put
on trucks or on ships or whatever.

00:02:24.050 --> 00:02:28.308
&gt;&gt; And I imagine with all this
data that there are kind of

00:02:28.308 --> 00:02:33.040
heavyweight calculations,

00:02:33.040 --> 00:02:38.350
functional requirements that
the forecast manager has to satisfy.

00:02:38.350 --> 00:02:39.860
&gt;&gt; That's correct, that's correct.

00:02:39.860 --> 00:02:43.370
And what's interesting about it, and
what I found particular in working in

00:02:43.370 --> 00:02:47.270
the retail domain was surprising,
let's put it that way.

00:02:47.270 --> 00:02:51.660
There are, every different client has
slightly different business requirements

00:02:51.660 --> 00:02:55.090
that make it very difficult to
design a completely generic product.

00:02:55.090 --> 00:02:58.510
So there's always a bit of client
specific business rules that you need to

00:02:58.510 --> 00:03:01.700
take into account and configuration.

00:03:01.700 --> 00:03:03.820
It's not like a shrink
wrap product at all.

00:03:03.820 --> 00:03:07.980
So, it really is when you want
to sell this to a new clien,

00:03:07.980 --> 00:03:12.670
even if it's a product very similar
to one you've released before.

00:03:12.670 --> 00:03:16.150
You have to do a fair amount of, you
have to staff it up with a development

00:03:16.150 --> 00:03:20.270
team, and you know, do or extend
an existing requirements analysis.

00:03:20.270 --> 00:03:21.480
And do some custom protection.

00:03:21.480 --> 00:03:25.460
&gt;&gt; And so when you say product
before you were talking about

00:03:25.460 --> 00:03:27.830
software as a service,
the products are really services.

00:03:27.830 --> 00:03:28.605
&gt;&gt; That's correct, Yes.

00:03:28.605 --> 00:03:32.500
&gt;&gt; Okay,and what I'm hearing is that

00:03:34.260 --> 00:03:38.130
you don't want to have to do
a separate forecaster for

00:03:38.130 --> 00:03:43.350
every one of your customers, but
there are individual pieces.

00:03:43.350 --> 00:03:49.040
Each customer has their individual
needs, and so you need some solution for

00:03:49.040 --> 00:03:53.350
them specifically, but you can't
have a general one for everybody.

00:03:53.350 --> 00:03:54.730
&gt;&gt; That's correct, that's correct.

00:03:54.730 --> 00:03:56.629
That's one of the core parts of
the problem that makes it hard.

00:03:56.629 --> 00:04:01.730
&gt;&gt; Okay, now how about on
the non-functional side?

00:04:01.730 --> 00:04:04.821
What sort of interesting non
functional characteristics do these

00:04:04.821 --> 00:04:06.040
applications have?

00:04:06.040 --> 00:04:09.680
&gt;&gt; Yeah, you can break them
into a couple of categories.

00:04:09.680 --> 00:04:14.610
One is, you asked earlier about
how we get data and we load it, so

00:04:14.610 --> 00:04:17.160
that implies that there's a batch

00:04:17.160 --> 00:04:21.540
operation that has to load all this
data that come in, into our database.

00:04:21.540 --> 00:04:25.600
The batches tend to have pretty
tight timing requirements.

00:04:25.600 --> 00:04:29.200
So, for example, when we do
forecasting at the end of a week for

00:04:29.200 --> 00:04:35.360
next week's orders,
we typically get the revised sales data

00:04:35.360 --> 00:04:40.640
that we use in predicting, we'll get
that sometime late on a Friday evening.

00:04:40.640 --> 00:04:44.350
We may get any number of other
kind of data from the customer,

00:04:44.350 --> 00:04:46.240
as well,
that we need to use in prediction.

00:04:47.450 --> 00:04:53.890
We'll have to have the forecast all
generated and ready for inspection and

00:04:53.890 --> 00:04:57.080
modification for the forecasters when
they arrive by 8 AM Monday morning.

00:04:58.230 --> 00:05:04.570
So there's a batch window and that
batch window is a very hard deadline.

00:05:04.570 --> 00:05:09.370
If we can't do all the work within
that deadline, we have a service level

00:05:09.370 --> 00:05:12.280
agreement with customers because
we sell this as a service, and

00:05:12.280 --> 00:05:16.340
if we don't meet our batch window, then
we're in violation of that agreement,

00:05:16.340 --> 00:05:18.610
that has financial implications,
et cetera.

00:05:18.610 --> 00:05:20.120
So batch requirements are big.

00:05:20.120 --> 00:05:24.090
We also have a nightly batch which
has a much tighter window and

00:05:24.090 --> 00:05:25.980
doesn't consume as much data.

00:05:25.980 --> 00:05:31.670
&gt;&gt; So in the weekend situation, is that
enough time for you to deal with things?

00:05:31.670 --> 00:05:35.060
How much of that weekend is
consumed with actually computing?

00:05:36.560 --> 00:05:38.340
&gt;&gt; So that's a good question.

00:05:38.340 --> 00:05:40.880
It depends largely by client.

00:05:40.880 --> 00:05:47.940
We, for our bigger clients, we have
one that I think their app is now,

00:05:47.940 --> 00:05:51.900
it's over 11 terabytes of data that
we have to maintain and let them use.

00:05:51.900 --> 00:05:55.330
And what we do is,
we actually partition the database.

00:05:55.330 --> 00:05:56.850
Over many different nodes,

00:05:56.850 --> 00:06:01.370
many different nodes on the cloud, so
that we can meet this batch window.

00:06:01.370 --> 00:06:05.470
And what we find when
we're scaling these up is,

00:06:05.470 --> 00:06:10.335
we have to do some experiments to
decide how big, how fat can we make one

00:06:10.335 --> 00:06:15.875
database in order to meet our
batch window to load all,

00:06:15.875 --> 00:06:18.508
not just to do the calculations,
just to load the data to begin with,

00:06:18.508 --> 00:06:21.045
because it takes a while to
load 6 terabytes of data.

00:06:22.530 --> 00:06:25.770
So we have to, we have to scale
ourselves and partition it so that we

00:06:25.770 --> 00:06:28.780
can load all the data, perform all the
calculations within the batch window.

00:06:28.780 --> 00:06:32.380
And there's always a trade off between,
the more that you can make,

00:06:32.380 --> 00:06:35.190
you can decrease your batch time,
if you throw more machines at it, but

00:06:35.190 --> 00:06:39.970
then that increases your cost,
our company's cost which we have to eat.

00:06:39.970 --> 00:06:42.509
So we're always trying to
optimize that sweet spot.

00:06:42.509 --> 00:06:47.813
&gt;&gt; So what I'm hearing is that
you're making use of a large number

00:06:47.813 --> 00:06:53.318
of fairly heavyweight server nodes
on the cloud that are cranking

00:06:53.318 --> 00:06:57.024
pretty much full time over the weekend-
&gt;&gt; That's correct.

00:06:57.024 --> 00:07:00.041
&gt;&gt; To make sure you hit your
deadline for Monday morning.

00:07:00.041 --> 00:07:01.551
&gt;&gt; That's correct, that's correct.

00:07:01.551 --> 00:07:04.685
And one of things that's interesting
about deploying as a service,

00:07:04.685 --> 00:07:06.970
has everything to do with that problem.

00:07:06.970 --> 00:07:10.530
So traditionally, when a retailer
would want a forecasting application,

00:07:10.530 --> 00:07:15.940
that retailer would have to buy and
maintain all the machinery he or

00:07:15.940 --> 00:07:20.010
she might need in order to generate
those forecasts even though you're

00:07:20.010 --> 00:07:22.680
only going to do it every week,
every weekend sorry.

00:07:23.790 --> 00:07:27.980
So, what typically happens with the
forecasting application is, it's a of

00:07:27.980 --> 00:07:31.380
heavyweight work on the weekend, but
then during the week, not so much.

00:07:31.380 --> 00:07:36.390
And so our solution scales, so that
we actually scale up over the weekend

00:07:36.390 --> 00:07:39.570
in order to do all this data loading and
calculation.

00:07:39.570 --> 00:07:43.290
But then we scale back down to a smaller
footprint after all those calculations.

00:07:43.290 --> 00:07:45.300
&gt;&gt; So
you're taking advantage of the fact that

00:07:46.850 --> 00:07:50.490
you can get elastic computing resources
&gt;&gt; Elasticity, exactly.

00:07:50.490 --> 00:07:52.990
&gt;&gt; Off the cloud and
only pay for what you need.

00:07:52.990 --> 00:07:54.350
&gt;&gt; Precisely.

00:07:54.350 --> 00:07:57.250
&gt;&gt; So, I interrupted you before when you
were talking about the nonfunctional

00:07:57.250 --> 00:07:58.260
requirements, what else is there?

00:07:58.260 --> 00:08:00.440
&gt;&gt; So
batch requirements is the one category.

00:08:00.440 --> 00:08:03.230
The other category
are interactive requirements.

00:08:03.230 --> 00:08:06.150
So, users are going to,
as I mentioned when,

00:08:06.150 --> 00:08:08.950
after we generate all these forecasts
you're going to want to go through and

00:08:08.950 --> 00:08:12.120
inspect them and analyze them, and drill
up, and drill down, and make analyses,

00:08:12.120 --> 00:08:14.110
and maybe even modifications.

00:08:14.110 --> 00:08:17.930
So, that's a large set of data
that they need to operate over.

00:08:17.930 --> 00:08:20.770
And anytime you have users doing
interactive queries over large

00:08:20.770 --> 00:08:23.150
data sets,
you have the potential that queries and

00:08:23.150 --> 00:08:25.420
operations could take a very long time.

00:08:25.420 --> 00:08:30.450
So in addition to our batch window,
we also have to design and

00:08:30.450 --> 00:08:35.020
partition accordingly so
that queries will be,

00:08:35.020 --> 00:08:40.169
user operations will be
performed in acceptable times.

00:08:40.169 --> 00:08:44.868
&gt;&gt; And I'm assuming that you've kind
of mentioned that reliability is

00:08:44.868 --> 00:08:46.248
really important.

00:08:46.248 --> 00:08:47.460
&gt;&gt; Hm-mm
&gt;&gt; Okay this,

00:08:47.460 --> 00:08:49.620
you have to get the thing done.

00:08:49.620 --> 00:08:53.110
&gt;&gt; Yeah.
&gt;&gt; How about accuracy of these

00:08:53.110 --> 00:08:54.890
computations, how do you deal with that?

00:08:54.890 --> 00:08:57.980
&gt;&gt; Yeah, so
usually through a separate process, so

00:08:57.980 --> 00:09:03.580
Logicblocks has a dedicated data
science team that works with

00:09:03.580 --> 00:09:08.750
big retailers who are very familiar with
their own data to do accuracy analysis.

00:09:08.750 --> 00:09:14.260
And we tend to do this by
running our forecasting offline,

00:09:15.270 --> 00:09:20.090
and comparing on old data, and then
comparing it with actual sales data, so

00:09:20.090 --> 00:09:23.530
there s some metrics
we used called mean.

00:09:23.530 --> 00:09:27.620
Mean percent error which
are used to decide whether

00:09:27.620 --> 00:09:29.300
your forecasts
are sufficiently accurate.

00:09:29.300 --> 00:09:32.910
If they're within a certain
percent error of the actual sales.

00:09:32.910 --> 00:09:36.430
And so, we tend to do that offline,
and then if there are any changes to

00:09:36.430 --> 00:09:39.820
the algorithms, the science algorithms,
we roll those into the service so

00:09:39.820 --> 00:09:43.322
that it'll be available next week
when we do the next analysis.

00:09:43.322 --> 00:09:48.660
&gt;&gt; So some real significant,
non functional requirements,

00:09:48.660 --> 00:09:53.700
in order to make all this work in a
fashion that can satisfy your customers.

00:09:53.700 --> 00:09:54.480
&gt;&gt; Right.

00:09:54.480 --> 00:09:57.480
&gt;&gt; Okay,
how about the architecture itself,

00:09:57.480 --> 00:10:00.060
let's say of the Forecast Manager,

00:10:00.060 --> 00:10:04.420
what makes this particular application
architecturally interesting?

00:10:04.420 --> 00:10:07.830
&gt;&gt; Okay, so
I think from an architecture standpoint,

00:10:07.830 --> 00:10:14.330
what makes this architecture most
interesting is the distribution aspect.

00:10:14.330 --> 00:10:19.230
The services oriented
design of the whole thing.

00:10:19.230 --> 00:10:22.910
And how each of the distributed
nodes talk to one another.

00:10:22.910 --> 00:10:25.920
So I have a diagram we
can take a quick look at.

00:10:25.920 --> 00:10:28.280
This is a multi tier diagram.

00:10:28.280 --> 00:10:29.440
I'm not showing the top tier,

00:10:29.440 --> 00:10:32.250
because the top tier is
basically a web browser, right?

00:10:32.250 --> 00:10:37.146
So all of our clients, they're top

00:10:37.146 --> 00:10:40.260
tier, presentation tier,
would be there web browser.

00:10:41.270 --> 00:10:47.540
They're going to be running HTML 5,
JavaScript applications,

00:10:47.540 --> 00:10:50.328
running in their browsers that are
periodically going to make service calls

00:10:50.328 --> 00:10:57.000
to a uniform location on the cloud.

00:10:57.000 --> 00:11:01.870
Those requests, those http service
requests will all go through this

00:11:01.870 --> 00:11:04.540
front end node that I'm
showing here in this diagram.

00:11:04.540 --> 00:11:06.580
We consider that the middle tier,
all right?

00:11:06.580 --> 00:11:10.630
So the front end of our
application is a middle tier

00:11:10.630 --> 00:11:14.360
that has a couple of databases running
on it, which I'm showing there.

00:11:14.360 --> 00:11:17.610
One of them is largely
the one called UI0.

00:11:18.760 --> 00:11:22.390
It is hosting services
which do things like either

00:11:23.680 --> 00:11:26.450
directly answer queries or
proxy them down to

00:11:27.450 --> 00:11:29.830
other nodes that actually contain
a slice of the real data.

00:11:29.830 --> 00:11:31.290
And so

00:11:31.290 --> 00:11:36.070
that data tier level that I'm showing
in the diagram, actually has multiple.

00:11:36.070 --> 00:11:38.440
I'm abstracting it by just showing 2,
but there could be up to 50, or 60, or

00:11:38.440 --> 00:11:41.620
100 of these things depending
on the size of the data.

00:11:41.620 --> 00:11:45.672
Each one of them is the same in terms
of what code they're running, but

00:11:45.672 --> 00:11:50.070
they have a different partition of
the data that they're responsible for,

00:11:50.070 --> 00:11:53.435
and each one of them is running
a web server that's hosting

00:11:53.435 --> 00:11:57.380
services that answer queries,
all right, or do updates.

00:11:57.380 --> 00:12:00.710
So typically in this architecture,

00:12:00.710 --> 00:12:05.790
you don't see this much when you're
running the app from your browser,

00:12:05.790 --> 00:12:10.750
but you'll click on a link to go drill
down into, you know, the results

00:12:10.750 --> 00:12:15.090
of some query that will issue a request
that goes to this front end node,

00:12:15.090 --> 00:12:19.880
which may then delegate to one or more
of those data tier nodes to gather some

00:12:19.880 --> 00:12:23.530
data, perform some updates, put it back
together and then get your response.

00:12:23.530 --> 00:12:25.120
And all this has to work very quickly.

00:12:25.120 --> 00:12:27.280
&gt;&gt; So, as far as architectural style,

00:12:27.280 --> 00:12:30.350
would you say this is
a three tier architecture?

00:12:30.350 --> 00:12:31.230
&gt;&gt; Yes, yes.

00:12:31.230 --> 00:12:34.433
&gt;&gt; And, complicated by the fact that
you've partitioned your data across

00:12:34.433 --> 00:12:35.440
many, may networks.

00:12:35.440 --> 00:12:37.529
&gt;&gt; Correct, correct.

