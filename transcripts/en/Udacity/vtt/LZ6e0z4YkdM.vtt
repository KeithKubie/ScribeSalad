WEBVTT
Kind: captions
Language: en

00:00:00.210 --> 00:00:01.600
&gt;&gt; All right Charles, what do you think?

00:00:01.600 --> 00:00:02.870
&gt;&gt; I don't know but I know how to do it.

00:00:02.870 --> 00:00:03.630
&gt;&gt; All right.

00:00:03.630 --> 00:00:06.190
&gt;&gt; I'm just going to substitute any equation we had before.

00:00:06.190 --> 00:00:07.060
&gt;&gt; Yeah, that's what I was thinking, uh-huh.

00:00:07.060 --> 00:00:09.730
&gt;&gt; Alright, so M is greater than or equal to, 1 over

00:00:09.730 --> 00:00:13.990
epsilon times the natural log of the size of the hypothesis space.

00:00:13.990 --> 00:00:16.540
&gt;&gt; Mm, which is what, that is not one of our variables here.

00:00:17.706 --> 00:00:19.146
&gt;&gt; ten.

00:00:19.146 --> 00:00:22.460
&gt;&gt; Yeah. Right, so it's not 2 to the 10. Even though

00:00:22.460 --> 00:00:25.340
the input space is 2 to the 10. The number of hypotheses.

00:00:25.340 --> 00:00:28.290
There's one hypothesis corresponding to each of the bit positions. So, good?

00:00:28.290 --> 00:00:33.760
&gt;&gt; Right. Plus, the natural log of 1 over delta. So

00:00:33.760 --> 00:00:38.710
that would be greater than or equal to ten times the natural log of ten.

00:00:38.710 --> 00:00:40.985
&gt;&gt; [LAUGH]

00:00:40.985 --> 00:00:46.070
&gt;&gt; Plus the natural log of, five. So,

00:00:46.070 --> 00:00:51.060
let's see. The natural log of ten is something

00:00:51.060 --> 00:00:55.040
like three point something, the natural log of five is something like, two point

00:00:55.040 --> 00:01:02.498
something. We add those up, multiply by ten you're going to end up with 39.12.

00:01:02.498 --> 00:01:06.220
&gt;&gt; Good, so, we need, you know, 40 samples?

00:01:06.220 --> 00:01:07.980
&gt;&gt; Yeah. That sounds about right.

00:01:07.980 --> 00:01:10.186
&gt;&gt; That actually doesn't sound too bad. Well, you

00:01:10.186 --> 00:01:12.078
know, it's not learning a very hard problem, but

00:01:12.078 --> 00:01:13.926
it's, you know, a pretty big input space. So

00:01:13.926 --> 00:01:16.270
let's see. What, how big is the input space?

00:01:16.270 --> 00:01:19.504
It's like two to the ten, which is.

00:01:19.504 --> 00:01:19.602
&gt;&gt; 1,024.

00:01:19.602 --> 00:01:24.797
&gt;&gt; 1,024. So how much of 1024 is 40? It's,

00:01:24.797 --> 00:01:27.960
it's, you know, less than 4%. Hm, that's not bad.

00:01:27.960 --> 00:01:30.590
&gt;&gt; Before we leave this quiz, let me point out one

00:01:30.590 --> 00:01:35.290
more thing: that this bound is actually agnostic to the distribution

00:01:35.290 --> 00:01:37.560
from which samples came, so this idea that it's from a

00:01:37.560 --> 00:01:41.460
uniform distribution is actually not being directly used here. So so

00:01:41.460 --> 00:01:43.460
this is pretty cool. It actually doesn't matter, we only

00:01:43.460 --> 00:01:46.480
need 40 samples no matter what the distribution is. It's

00:01:46.480 --> 00:01:50.200
not like some distributions are harder or easier ,because we

00:01:50.200 --> 00:01:53.160
are measuring the true error on the same distribution that we

00:01:53.160 --> 00:01:55.400
used to, to create the training set. So if it's

00:01:55.400 --> 00:01:58.800
a really hard distribution and some tough examples never appear,

00:01:58.800 --> 00:02:02.400
then we're unlikely to see them in the training set,

00:02:02.400 --> 00:02:05.470
but they're not going to contribute very much to the true error.

00:02:05.470 --> 00:02:06.670
&gt;&gt; Well that makes sense. So the

00:02:06.670 --> 00:02:08.479
distri, oh right. So in some sense, I

00:02:08.479 --> 00:02:09.889
mean, I guess the equation doesn't show this,

00:02:09.889 --> 00:02:12.990
but in some sense, the distribution is, cancels

00:02:12.990 --> 00:02:15.766
out between the training and the true error

00:02:15.766 --> 00:02:17.710
&gt;&gt; Yeah, that's one way to think about it.

00:02:17.710 --> 00:02:23.330
&gt;&gt; Well, I like that. So 40 is pretty good to get 10% error.

00:02:23.330 --> 00:02:29.240
If we wanted to get say, only 1% error, Then we would go from 40 to 400.

00:02:29.240 --> 00:02:29.812
&gt;&gt; Mm.

00:02:29.812 --> 00:02:30.669
&gt;&gt; Right?

00:02:30.669 --> 00:02:31.713
&gt;&gt; That's a good

00:02:31.713 --> 00:02:32.860
point, yeah.

00:02:32.860 --> 00:02:35.390
&gt;&gt; And it's, it's, it's one decimal point even.

00:02:35.390 --> 00:02:38.560
And so, that would be about 40% of the data.

00:02:38.560 --> 00:02:41.150
&gt;&gt; Yeah, that's true. Yeah, if we want to go a little

00:02:41.150 --> 00:02:43.995
bit beyond that we may need all the data multiple times.

00:02:43.995 --> 00:02:45.081
&gt;&gt; Mm-hm.

00:02:45.081 --> 00:02:46.750
&gt;&gt; Yeah, but this example doesn't look so bad. So

00:02:46.750 --> 00:02:48.700
let's just move on before we think about it too hard.

00:02:48.700 --> 00:02:50.190
&gt;&gt; Okay. That seems fair, I like that.

