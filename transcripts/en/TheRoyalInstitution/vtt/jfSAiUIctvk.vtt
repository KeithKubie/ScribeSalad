WEBVTT
Kind: captions
Language: en

00:00:09.780 --> 00:00:11.670
Flying an aeroplane is
difficult enough.

00:00:11.670 --> 00:00:14.477
And one of the most difficult
operations a pilot can train

00:00:14.477 --> 00:00:16.120
for is air-to-air refuelling.

00:00:16.120 --> 00:00:18.655
But what we're trying to do is
teach a computer to do it.

00:00:27.020 --> 00:00:29.070
Air-to-air refuelling is
essentially formation flying

00:00:29.070 --> 00:00:30.300
at close quarters.

00:00:30.300 --> 00:00:32.196
The receiver sidles
up to the tanker.

00:00:32.196 --> 00:00:34.080
And he tries to get
his probe into the

00:00:34.080 --> 00:00:39.250
basket, into the basket.

00:00:39.250 --> 00:00:40.530
It takes a lot of skill
to do this.

00:00:40.530 --> 00:00:42.420
And pilots train on a weekly
basis, just to keep

00:00:42.420 --> 00:00:43.220
their skills up.

00:00:43.220 --> 00:00:46.200
And when it goes wrong,
boy, does it go wrong.

00:00:46.200 --> 00:00:49.080
[CRASHING]

00:00:49.080 --> 00:00:50.980
To automate air-to-air
refuelling, there are two key

00:00:50.980 --> 00:00:53.030
technologies that need
to be developed.

00:00:53.030 --> 00:00:55.190
The first is sensors to
detect the position of

00:00:55.190 --> 00:00:56.440
the end of the hose.

00:00:56.440 --> 00:00:59.060
The second is control
algorithms, to guide the

00:00:59.060 --> 00:01:00.740
receiver aircraft to
that position.

00:01:00.740 --> 00:01:05.690
And this is the kit we're going
to be using to do that.

00:01:05.690 --> 00:01:08.265
These are standard robotic arms,
the sort of thing you'd

00:01:08.265 --> 00:01:09.620
find in a car production line.

00:01:09.620 --> 00:01:12.350
But they've got 6 degrees of
freedom, which means you can

00:01:12.350 --> 00:01:13.890
manipulate something in
three dimensional

00:01:13.890 --> 00:01:15.500
space, in any position.

00:01:15.500 --> 00:01:18.250
So you've got three degrees of
freedom like this and then any

00:01:18.250 --> 00:01:21.390
orientation, by rotating
about different axes.

00:01:21.390 --> 00:01:24.130
Now, this is accomplished
using six joints.

00:01:24.130 --> 00:01:26.550
The first joint is at the base
here, which allows the whole

00:01:26.550 --> 00:01:28.585
robot to swivel around there.

00:01:28.585 --> 00:01:30.352
The second joint is here.

00:01:30.352 --> 00:01:32.890
The third joint is
up at the elbow.

00:01:32.890 --> 00:01:37.582
The fourth joint is about the
axis of the forearm here.

00:01:37.582 --> 00:01:42.050
The fifth joint is the
wrist, rotating here.

00:01:42.050 --> 00:01:47.110
And then, the sixth joint is
around the end effector here.

00:01:47.110 --> 00:01:48.690
Now, there's another joint,
another axis,

00:01:48.690 --> 00:01:50.700
which is the track.

00:01:50.700 --> 00:01:52.800
And that gives us the room to
move backwards and forwards,

00:01:52.800 --> 00:01:54.460
extends the range
of the robots.

00:01:54.460 --> 00:01:56.010
And when they want to,
they can shift.

00:02:02.106 --> 00:02:04.030
So this is the refueling
probe.

00:02:04.030 --> 00:02:06.640
It's mounted rigidly to
the receiver aircraft.

00:02:06.640 --> 00:02:08.970
The pilot has to manoeuvre this
probe into the reception

00:02:08.970 --> 00:02:10.274
coupling on the drove
assembly.

00:02:10.274 --> 00:02:12.810
And that's when the
magic happens.

00:02:12.810 --> 00:02:15.050
So the basket hangs off the
end of a hose which is

00:02:15.050 --> 00:02:17.130
trailing from the
tanker aircraft.

00:02:17.130 --> 00:02:19.325
This canopy helps to stabilise
it behind the aircraft.

00:02:19.325 --> 00:02:21.505
But it's still very difficult
for a pilot to manoeuvre the

00:02:21.505 --> 00:02:22.755
nozzle into the reception
coupling.

00:02:26.900 --> 00:02:28.880
Now it'd be easy enough to get
the probe into the basket,

00:02:28.880 --> 00:02:29.740
using just the robots alone.

00:02:29.740 --> 00:02:32.380
But what we're trying to do is
to simulate the environment

00:02:32.380 --> 00:02:34.100
which the receiver aircraft
flies in.

00:02:34.100 --> 00:02:36.410
So we model the flight dynamics
of the two aircraft.

00:02:36.410 --> 00:02:37.680
We model the turbulence.

00:02:37.680 --> 00:02:40.250
We model the wake of the tanker.
and we model the bow

00:02:40.250 --> 00:02:42.025
wave on the receiver aircraft.

00:02:42.025 --> 00:02:47.150
And these simulations all
run in this box here.

00:02:47.150 --> 00:02:48.430
Those run in real time.

00:02:48.430 --> 00:02:50.050
And they pass the position
demands to the robot

00:02:50.050 --> 00:02:50.860
controller.

00:02:50.860 --> 00:02:52.355
So there are two computers
we need to look at in the

00:02:52.355 --> 00:02:52.710
controller.

00:02:52.710 --> 00:02:54.400
This is the main computer.

00:02:54.400 --> 00:02:56.882
And this is used to calculate
the motion trajectories for

00:02:56.882 --> 00:02:58.140
the robots.

00:02:58.140 --> 00:03:01.390
This computer here is the axis
computer, which is in charge

00:03:01.390 --> 00:03:02.090
of the motors.

00:03:02.090 --> 00:03:04.340
With the help of the Lund
University in Sweden, we're

00:03:04.340 --> 00:03:06.610
intercepting the messages
between these two computers,

00:03:06.610 --> 00:03:08.880
which gives us direct access
to the motor controller.

00:03:08.880 --> 00:03:13.220
Effectively, we've hacked
the robot controller.

00:03:13.220 --> 00:03:15.610
The robots allow us
to manipulate the

00:03:15.610 --> 00:03:17.090
probe and the basket.

00:03:17.090 --> 00:03:19.700
So they follow the motions from
a real-time simulation,

00:03:19.700 --> 00:03:20.910
which runs in parallel.

00:03:20.910 --> 00:03:22.785
This simulation allows us to
develop the control algorithms

00:03:22.785 --> 00:03:24.465
for the real aircraft.

00:03:24.465 --> 00:03:27.360
And underpinning all of these
things is the idea of feedback

00:03:27.360 --> 00:03:28.610
control systems.

00:03:33.970 --> 00:03:36.430
So first, we're going to take
a look at open-loop control

00:03:36.430 --> 00:03:38.690
systems, without any feedback.

00:03:38.690 --> 00:03:40.820
This is effectively a
remote-control helicopter.

00:03:40.820 --> 00:03:43.560
And we're just going to look
at the elevation control.

00:03:43.560 --> 00:03:47.094
So what we're controlling
is the fan speed.

00:03:47.094 --> 00:03:49.110
Now, it's inherently
a stable systems.

00:03:49.110 --> 00:03:50.280
So I can let it go like this.

00:03:50.280 --> 00:03:51.505
And it'll stay put.

00:03:51.505 --> 00:03:56.680
But if I give it a little
nudge, then it'll start

00:03:56.680 --> 00:03:57.010
oscillating.

00:03:57.010 --> 00:03:59.740
And it'll take awhile to settle
down to that stable

00:03:59.740 --> 00:04:01.810
position again.

00:04:01.810 --> 00:04:05.641
Now, we're going to go ahead
and change that.

00:04:05.641 --> 00:04:10.670
We're now going to close the
loop on that control system.

00:04:10.670 --> 00:04:15.310
And using the feedback, we get
a much more stable position.

00:04:15.310 --> 00:04:20.402
Now, if I nudge it, the fans
change speed to compensate.

00:04:20.402 --> 00:04:24.030
So that controller allows it to
stay in the same position.

00:04:24.030 --> 00:04:26.010
Now, what we're going to try
doing is introducing a delay

00:04:26.010 --> 00:04:26.890
to this system.

00:04:26.890 --> 00:04:29.340
So we're putting a delay
into that loop.

00:04:29.340 --> 00:04:31.750
And what that means is that by
the time the system is aware

00:04:31.750 --> 00:04:34.200
of where it is, it's already
gone past the position it

00:04:34.200 --> 00:04:34.950
wants to be.

00:04:34.950 --> 00:04:36.290
And so it doesn't have
time to compensate.

00:04:38.890 --> 00:04:43.580
So what you'll see is that,
each time it goes past the

00:04:43.580 --> 00:04:48.824
stable position, the fans change
to speed too late.

00:04:48.824 --> 00:04:51.535
And it diverges from the
stable position.

00:04:51.535 --> 00:04:56.240
So that's why delay is a bad
thing in a control system and

00:04:56.240 --> 00:04:57.490
why we're trying to get
rid of it in robots.

00:05:04.508 --> 00:05:06.515
Let's have a look at
what we just saw.

00:05:06.515 --> 00:05:09.090
We had an input going
into a controller.

00:05:09.090 --> 00:05:12.640
The controller determined the
fan speed for the helicopter.

00:05:12.640 --> 00:05:14.700
And then, the outputs from that
system were the position

00:05:14.700 --> 00:05:15.880
and velocity.

00:05:15.880 --> 00:05:17.870
So that's a simple,
open-loop system.

00:05:17.870 --> 00:05:21.610
What we then did was we closed
the loop, by measuring the

00:05:21.610 --> 00:05:23.780
position of sensors and feeding
that back into the

00:05:23.780 --> 00:05:25.280
controller.

00:05:25.280 --> 00:05:26.560
What you saw was the effect.

00:05:26.560 --> 00:05:29.340
If we had a delay in
the sensors, the

00:05:29.340 --> 00:05:31.431
aircraft became unstable.

00:05:31.431 --> 00:05:33.120
Now, this is very similar
to the system we're

00:05:33.120 --> 00:05:34.590
looking at behind us.

00:05:34.590 --> 00:05:37.690
We can split this
into two halves.

00:05:37.690 --> 00:05:39.610
The bottom half is
the real world.

00:05:39.610 --> 00:05:40.790
So we've got the physical
sensors that

00:05:40.790 --> 00:05:41.685
we're hoping to evaluate.

00:05:41.685 --> 00:05:45.700
And the top half is completely
simulated.

00:05:45.700 --> 00:05:47.530
And on the boundary
between these two,

00:05:47.530 --> 00:05:49.120
you have the robots.

00:05:49.120 --> 00:05:53.010
Now, the robots translate the
positions from the simulation

00:05:53.010 --> 00:05:54.850
into real physical positions
that the sensors

00:05:54.850 --> 00:05:57.404
can then use to detect.

00:05:57.404 --> 00:05:59.450
Now, by bringing the robots
in, we now have

00:05:59.450 --> 00:06:00.355
two sources of delay.

00:06:00.355 --> 00:06:01.625
So there's delays
in the sensors.

00:06:01.625 --> 00:06:03.340
And there's delays
in the robots.

00:06:03.340 --> 00:06:05.330
We're trying to evaluate the
delays in the sensors and how

00:06:05.330 --> 00:06:06.960
they affect our control
algorithms.

00:06:06.960 --> 00:06:09.260
So we need to eliminate the
delays from the robots, to

00:06:09.260 --> 00:06:11.194
make sure they don't add
in to the effect.

00:06:18.090 --> 00:06:21.520
Now that we've ironed out the
creases in the test rig, the

00:06:21.520 --> 00:06:22.770
real work can begin.

