WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.423
[MUSIC PLAYING]

00:00:04.401 --> 00:00:05.379
[APPLAUSE]

00:00:05.379 --> 00:00:07.520
RAJ AJRAWAT: Hey, everyone.

00:00:07.520 --> 00:00:10.280
My name is Raj Ajrawat, and
I'm a Product Specialist

00:00:10.280 --> 00:00:13.220
for the Android platform
here at Google Play.

00:00:13.220 --> 00:00:14.720
Today I'm going to
begin our session

00:00:14.720 --> 00:00:17.300
by talking about the
Android Go opportunity

00:00:17.300 --> 00:00:20.150
and walking through some
details about the product

00:00:20.150 --> 00:00:22.109
since we last spoke about it.

00:00:22.109 --> 00:00:23.900
I'm then going to invite
my colleague Steve

00:00:23.900 --> 00:00:26.660
to come up on stage and walk
you through some of the data

00:00:26.660 --> 00:00:29.360
that we're seeing support
all the details as to why

00:00:29.360 --> 00:00:31.250
we built Go,
including reasons why

00:00:31.250 --> 00:00:33.620
you should keep your app small.

00:00:33.620 --> 00:00:36.530
After that, we'll have
Amrit come up on stage

00:00:36.530 --> 00:00:38.060
to walk through all
the requirements

00:00:38.060 --> 00:00:40.010
that you should pay
attention to when

00:00:40.010 --> 00:00:42.800
it comes to optimizing
your app and your game

00:00:42.800 --> 00:00:44.790
for these devices.

00:00:44.790 --> 00:00:47.527
And finally, I'm going to
have James come up on stage,

00:00:47.527 --> 00:00:49.610
and he's going to walk you
through all the details

00:00:49.610 --> 00:00:51.254
that we've been doing
on the Play Store

00:00:51.254 --> 00:00:52.670
to make sure that
we're delivering

00:00:52.670 --> 00:00:55.187
a really awesome store
experience for users

00:00:55.187 --> 00:00:55.895
on these devices.

00:00:59.140 --> 00:01:01.020
So to start things
off, Android Go

00:01:01.020 --> 00:01:03.360
was an ecosystem-wide
effort to make sure

00:01:03.360 --> 00:01:06.150
that we delivered a premium
hardware and software

00:01:06.150 --> 00:01:09.930
experience for users
on entry-level devices.

00:01:09.930 --> 00:01:14.070
Now, in all of the user
research that we did globally,

00:01:14.070 --> 00:01:17.370
we found that users had
very specific pain points

00:01:17.370 --> 00:01:19.440
on these types of devices.

00:01:19.440 --> 00:01:23.310
Those items included processor
speed and quality, storage

00:01:23.310 --> 00:01:26.160
capacity, and battery life.

00:01:26.160 --> 00:01:28.170
No matter where we
went in the world--

00:01:28.170 --> 00:01:31.580
in developed markets,
in developing markets--

00:01:31.580 --> 00:01:33.600
users consistently
kept coming up

00:01:33.600 --> 00:01:36.760
with those issues on
these types of devices.

00:01:36.760 --> 00:01:40.260
So we challenged ourselves,
along with our OEM partners,

00:01:40.260 --> 00:01:42.360
to deliver a much more
integrated and better

00:01:42.360 --> 00:01:47.030
experience at this
device capability.

00:01:47.030 --> 00:01:49.670
It's important to remember
that Android Go is not

00:01:49.670 --> 00:01:51.364
a fork of Android.

00:01:51.364 --> 00:01:53.030
What we did was we
actually introduced a

00:01:53.030 --> 00:01:55.700
build time flag into
the platform that

00:01:55.700 --> 00:01:59.690
ensures that all devices that
are 1 gigabyte or less of RAM

00:01:59.690 --> 00:02:04.250
going forward are going to
be Go configuration devices.

00:02:04.250 --> 00:02:06.830
We worked with all of our
Google teams internally--

00:02:06.830 --> 00:02:10.735
from Search to the Assistant
to YouTube and Maps--

00:02:10.735 --> 00:02:12.860
to make sure that we
delivered a first-class Google

00:02:12.860 --> 00:02:16.850
experience as well to users
who are on these devices.

00:02:16.850 --> 00:02:19.407
We also made sure to
introduce pre-load limits.

00:02:19.407 --> 00:02:20.990
We definitely don't
want to have users

00:02:20.990 --> 00:02:24.560
unboxing super slow phones
the second they buy them.

00:02:24.560 --> 00:02:26.870
Let's dive a little bit more
into storage, performance,

00:02:26.870 --> 00:02:27.630
and security.

00:02:30.380 --> 00:02:32.330
Now, again, referencing
that user research

00:02:32.330 --> 00:02:34.230
that we were talking
about earlier,

00:02:34.230 --> 00:02:36.320
we noticed that
over 2/3 of users

00:02:36.320 --> 00:02:39.440
on devices with 8
gigabytes of flash or less

00:02:39.440 --> 00:02:42.140
really only had about
a gigabyte of storage

00:02:42.140 --> 00:02:44.090
when it came down to it.

00:02:44.090 --> 00:02:46.370
You can't really do much
with a gig of space.

00:02:46.370 --> 00:02:47.830
It's 2018.

00:02:47.830 --> 00:02:48.830
I want to take pictures.

00:02:48.830 --> 00:02:49.830
I want to download apps.

00:02:49.830 --> 00:02:51.860
I want to play games.

00:02:51.860 --> 00:02:53.960
What we realized was we
needed to do a better

00:02:53.960 --> 00:02:55.940
job of actually making
sure that users had

00:02:55.940 --> 00:02:57.710
more storage out of the gate.

00:02:57.710 --> 00:03:00.620
And what we were able to
accomplish with software

00:03:00.620 --> 00:03:03.650
improvements was that users
now have 2X more storage

00:03:03.650 --> 00:03:04.910
right off the bat.

00:03:04.910 --> 00:03:06.530
That's an additional
1,000 photos

00:03:06.530 --> 00:03:07.946
that they can take
on their phone.

00:03:10.470 --> 00:03:12.780
Now, it would be
disingenuous of me

00:03:12.780 --> 00:03:15.150
to come up here and ask all
of you to optimize your apps

00:03:15.150 --> 00:03:18.240
and your games for these
devices if we didn't, ourselves,

00:03:18.240 --> 00:03:19.890
actually do the same thing.

00:03:19.890 --> 00:03:22.200
So we got together with
all the different product

00:03:22.200 --> 00:03:24.960
teams for some of the major
apps that you know and love--

00:03:24.960 --> 00:03:28.327
like Search, the
Assistant, Gmail, YouTube--

00:03:28.327 --> 00:03:30.660
and made sure that we delivered
a really good experience

00:03:30.660 --> 00:03:33.790
from Google on these
particular devices.

00:03:33.790 --> 00:03:35.370
Some of our product
teams decided

00:03:35.370 --> 00:03:36.540
to remove some features.

00:03:36.540 --> 00:03:38.640
Others decided to
add specific features

00:03:38.640 --> 00:03:40.586
for these types of devices.

00:03:40.586 --> 00:03:42.210
It really just depended
on the use case

00:03:42.210 --> 00:03:44.220
for those particular teams.

00:03:44.220 --> 00:03:46.980
One of our most popular
apps is actually Files Go.

00:03:46.980 --> 00:03:48.540
And in that
scenario, we realized

00:03:48.540 --> 00:03:49.956
that we needed to
deliver a better

00:03:49.956 --> 00:03:53.689
job for users in terms of
managing space on their phones.

00:03:53.689 --> 00:03:55.230
We've been really
excited to see some

00:03:55.230 --> 00:03:58.410
of the ratings
and the excitement

00:03:58.410 --> 00:04:00.400
that users have with
these particular apps.

00:04:03.560 --> 00:04:05.930
Now, security is at
the heart of everything

00:04:05.930 --> 00:04:07.281
that we do at Android.

00:04:07.281 --> 00:04:09.530
And one of the things that
we launched as part of this

00:04:09.530 --> 00:04:11.690
was Google Play Protect.

00:04:11.690 --> 00:04:15.090
With the rise of peer-to-peer
sharing and offline

00:04:15.090 --> 00:04:17.209
usage of apps, we
wanted to make sure

00:04:17.209 --> 00:04:20.600
that users felt very comfortable
with the apps and the games

00:04:20.600 --> 00:04:22.640
that they were downloading
onto their phone.

00:04:22.640 --> 00:04:26.000
Think of Play Protect
as a badge of trust

00:04:26.000 --> 00:04:28.910
that essentially extends
the Play brand to let a user

00:04:28.910 --> 00:04:30.950
know that the app or
the game that they're

00:04:30.950 --> 00:04:33.230
putting on their phone
can be trusted to be

00:04:33.230 --> 00:04:35.284
used on that particular phone.

00:04:35.284 --> 00:04:37.700
My colleague James will go
through more details about what

00:04:37.700 --> 00:04:39.372
that actually looks
like on a user

00:04:39.372 --> 00:04:40.580
experience for these devices.

00:04:43.450 --> 00:04:45.150
Now, I'm really
proud of all the work

00:04:45.150 --> 00:04:47.819
that we've accomplished
so far over the past year,

00:04:47.819 --> 00:04:49.860
but let's take a second
to dive a little bit more

00:04:49.860 --> 00:04:52.050
into the opportunity
around why it matters

00:04:52.050 --> 00:04:55.020
for you to optimize
your specific experience

00:04:55.020 --> 00:04:56.385
for these types of devices.

00:04:59.140 --> 00:05:03.160
This chart right here shows
2017 shipments, globally,

00:05:03.160 --> 00:05:08.380
for Android devices, broken down
by the RAM on those devices.

00:05:08.380 --> 00:05:10.360
As you'll see on
the top-right there,

00:05:10.360 --> 00:05:14.560
about 25% of global shipments
every year are devices that

00:05:14.560 --> 00:05:17.616
have 1 gigabyte of less a RAM--

00:05:17.616 --> 00:05:21.040
sorry, 1 gigabyte
of RAM or less.

00:05:21.040 --> 00:05:24.400
That represents about 300
million devices in the market

00:05:24.400 --> 00:05:26.500
currently.

00:05:26.500 --> 00:05:29.230
Now, we expect the number
to actually increase

00:05:29.230 --> 00:05:31.300
throughout the year,
but it just gives you

00:05:31.300 --> 00:05:33.370
a general sense for
how many devices

00:05:33.370 --> 00:05:36.260
you should expect will actually
have this configuration going

00:05:36.260 --> 00:05:36.760
forward.

00:05:39.500 --> 00:05:41.660
We've seen a ton of
interest in the market

00:05:41.660 --> 00:05:44.010
from all of our OEM partners.

00:05:44.010 --> 00:05:46.910
In fact, back at Mobile
World Congress in March,

00:05:46.910 --> 00:05:49.940
we had about six
OEMs launch devices.

00:05:49.940 --> 00:05:54.290
I'm happy to report now we
have over 80 OEM partners

00:05:54.290 --> 00:05:56.750
committed to delivering
devices, with hundreds

00:05:56.750 --> 00:05:59.280
more in the pipeline
by the end of the year.

00:05:59.280 --> 00:06:01.730
We really cannot thank our
partners enough for all

00:06:01.730 --> 00:06:04.370
the work that they've done
to partner with us to deliver

00:06:04.370 --> 00:06:07.370
a really awesome hardware
experience for entry-level

00:06:07.370 --> 00:06:08.780
devices.

00:06:08.780 --> 00:06:11.690
I definitely encourage you
to go out and buy a device,

00:06:11.690 --> 00:06:15.160
just so you can feel and see
just how premium the experience

00:06:15.160 --> 00:06:19.560
is at such a decent price point.

00:06:19.560 --> 00:06:23.370
Now, I want to dive a little
bit more into the Indian market

00:06:23.370 --> 00:06:24.570
specifically.

00:06:24.570 --> 00:06:26.460
India represents
the largest market

00:06:26.460 --> 00:06:28.560
for these types of devices.

00:06:28.560 --> 00:06:31.710
We expect about 30
to 35 million devices

00:06:31.710 --> 00:06:33.840
by the end of this
year that'll have

00:06:33.840 --> 00:06:36.720
the Go configuration on them.

00:06:36.720 --> 00:06:39.030
The marketing that
you're seeing right here

00:06:39.030 --> 00:06:41.370
is what Micromax is
actually using in-market

00:06:41.370 --> 00:06:45.510
to show users just how
premium the experience is.

00:06:45.510 --> 00:06:49.110
And the good thing to call out
is that with carrier subsidies,

00:06:49.110 --> 00:06:52.650
many of these devices
are actually under $40 US

00:06:52.650 --> 00:06:54.070
in these markets.

00:06:54.070 --> 00:06:57.015
So very, very good price point,
and still a premium quality

00:06:57.015 --> 00:06:57.515
hardware.

00:07:00.490 --> 00:07:03.640
Of course, India does represent
the largest opportunity

00:07:03.640 --> 00:07:06.940
for these devices, but I can't
stress this point enough--

00:07:06.940 --> 00:07:11.650
the US is the second-largest
market for these devices today.

00:07:11.650 --> 00:07:13.420
Every time I tell that
to people, everyone

00:07:13.420 --> 00:07:15.128
looks at me with blank
stares, because it

00:07:15.128 --> 00:07:16.590
doesn't make any sense.

00:07:16.590 --> 00:07:19.350
Well, the numbers
prove out that the US

00:07:19.350 --> 00:07:22.690
is the second-largest market
for entry-level devices today.

00:07:22.690 --> 00:07:25.810
This isn't just a developing
market problem or an emerging

00:07:25.810 --> 00:07:26.950
market problem.

00:07:26.950 --> 00:07:30.010
This is a developed Western
market, first-world market

00:07:30.010 --> 00:07:31.280
problem as well.

00:07:31.280 --> 00:07:33.610
Users around the world
at these price points

00:07:33.610 --> 00:07:35.260
and at these device
configurations

00:07:35.260 --> 00:07:37.420
want to have a
premium experience,

00:07:37.420 --> 00:07:39.864
and Go delivers that.

00:07:39.864 --> 00:07:42.030
I'd like to now invite my
colleague Steve to come up

00:07:42.030 --> 00:07:44.080
on stage to walk you
through some of the data

00:07:44.080 --> 00:07:47.110
that we're seeing on the Play
side around all the information

00:07:47.110 --> 00:07:50.036
that we see that supports the
reasons why you should invest

00:07:50.036 --> 00:07:51.160
in the opportunity as well.

00:07:54.004 --> 00:07:54.670
STEVE SUPPE: Hi.

00:07:54.670 --> 00:07:55.676
Thanks, Raj.

00:07:55.676 --> 00:07:58.798
[APPLAUSE]

00:07:58.798 --> 00:08:00.090
Hi, everyone.

00:08:00.090 --> 00:08:00.900
My name's Steve.

00:08:00.900 --> 00:08:04.290
I'm a Product Manager on
the Google Play Console.

00:08:04.290 --> 00:08:06.710
So Raj just introduced
you to Android Go

00:08:06.710 --> 00:08:08.460
and talked a little
bit about all the work

00:08:08.460 --> 00:08:11.190
that we've been doing to
shrink the storage and memory

00:08:11.190 --> 00:08:14.184
footprint of our Google
Apps in preparation for it.

00:08:14.184 --> 00:08:15.600
I want to talk to
you a little bit

00:08:15.600 --> 00:08:18.040
about the importance
of doing your bit

00:08:18.040 --> 00:08:20.590
and the rewards you'll get to
your business and your user

00:08:20.590 --> 00:08:23.990
relationships by focusing
on shrinking your app size

00:08:23.990 --> 00:08:25.740
and thinking small.

00:08:25.740 --> 00:08:27.810
Now, if you haven't gotten
enough data analysis

00:08:27.810 --> 00:08:29.660
over the last few days,
hold onto your hats,

00:08:29.660 --> 00:08:32.360
because I'm going to show
you a bunch of graphs.

00:08:32.360 --> 00:08:35.900
So as devices have gotten
more and more advanced,

00:08:35.900 --> 00:08:37.640
developers like you
are making increasing

00:08:37.640 --> 00:08:40.190
use of their capabilities,
which is great.

00:08:40.190 --> 00:08:43.309
It means you're packing in
more features than ever before.

00:08:43.309 --> 00:08:45.170
You're making better
user experiences,

00:08:45.170 --> 00:08:48.140
providing more value to users.

00:08:48.140 --> 00:08:50.780
But it can come
at a serious cost.

00:08:50.780 --> 00:08:52.480
This chart here
that I'm showing--

00:08:52.480 --> 00:08:54.530
and you may have
seen it earlier--

00:08:54.530 --> 00:08:57.200
shows the average app
size served on Google Play

00:08:57.200 --> 00:08:58.940
over the last 10 years.

00:08:58.940 --> 00:09:01.610
And you can see very clearly
that app sizes continue

00:09:01.610 --> 00:09:02.970
to increase.

00:09:02.970 --> 00:09:07.440
In fact, it's grown 250% over
the last five years alone.

00:09:07.440 --> 00:09:09.200
And it's still growing.

00:09:09.200 --> 00:09:12.530
All that increase in size
may be materially impacting

00:09:12.530 --> 00:09:15.330
your user acquisition strategy.

00:09:15.330 --> 00:09:19.250
App size has a very real
effect on conversion rates

00:09:19.250 --> 00:09:22.230
and the successful
download of your app.

00:09:22.230 --> 00:09:25.640
This chart shows the correlation
between app size and user

00:09:25.640 --> 00:09:27.410
conversion rates.

00:09:27.410 --> 00:09:29.660
Specifically, when I'm
talking about conversions,

00:09:29.660 --> 00:09:32.690
I'm talking about users who
come to the Play Store and tap

00:09:32.690 --> 00:09:33.410
Install.

00:09:33.410 --> 00:09:36.140
That's the conversion
we're talking about here.

00:09:36.140 --> 00:09:38.930
Clearly, the heavier your
app-- you can see app size is

00:09:38.930 --> 00:09:40.370
the x-axis--

00:09:40.370 --> 00:09:43.100
the less likely a user will
be to install your app,

00:09:43.100 --> 00:09:45.590
even when we account for
things like Store listing

00:09:45.590 --> 00:09:47.180
optimizations.

00:09:47.180 --> 00:09:50.120
Size has a very clear
negative impact on

00:09:50.120 --> 00:09:52.190
whether or not a user
will want to install

00:09:52.190 --> 00:09:55.750
your app on their device.

00:09:55.750 --> 00:09:59.020
In fact, the data shows that
for every 6 megabytes that

00:09:59.020 --> 00:10:02.500
increases on an app size, we
see a decrease in the user

00:10:02.500 --> 00:10:05.260
conversion rate of roughly 1%.

00:10:05.260 --> 00:10:09.080
That trend applies to all
apps under 100 megabytes,

00:10:09.080 --> 00:10:11.170
and it also applies globally.

00:10:11.170 --> 00:10:12.850
That's a material
loss and conversion

00:10:12.850 --> 00:10:15.760
that could be recovered if
you focused on app size,

00:10:15.760 --> 00:10:17.500
but that's not all.

00:10:17.500 --> 00:10:19.896
We can also compare
country by country.

00:10:19.896 --> 00:10:21.645
Now, if we compare the
percentage increase

00:10:21.645 --> 00:10:25.730
in conversions by reducing
app size by 10 megabytes,

00:10:25.730 --> 00:10:27.210
we first of all see--

00:10:27.210 --> 00:10:29.920
by the global average--
that worldwide,

00:10:29.920 --> 00:10:32.170
users see more benefit.

00:10:32.170 --> 00:10:34.450
They tend to install more.

00:10:34.450 --> 00:10:37.810
But this can vary dramatically
country by country as well.

00:10:37.810 --> 00:10:39.460
Shrinking your app
by 10 megabytes

00:10:39.460 --> 00:10:41.410
in a country like
India or Brazil

00:10:41.410 --> 00:10:44.230
has a larger impact on
your store conversion rates

00:10:44.230 --> 00:10:47.710
than countries like
Germany, the USA, or Japan.

00:10:47.710 --> 00:10:50.200
But if you look across
all emerging markets,

00:10:50.200 --> 00:10:52.880
the removal of 10
megabytes from an app size

00:10:52.880 --> 00:10:55.450
roughly correlates with an
increase in conversion rate

00:10:55.450 --> 00:10:57.860
by about 2.5%.

00:10:57.860 --> 00:11:00.030
That's pretty big.

00:11:00.030 --> 00:11:02.750
But let's drill down
a little bit further.

00:11:02.750 --> 00:11:04.460
Often when we talk
about businesses,

00:11:04.460 --> 00:11:05.892
we talk about conversion rates.

00:11:05.892 --> 00:11:07.850
But we have a different
lens that you might not

00:11:07.850 --> 00:11:09.620
have seen before,
because we're also

00:11:09.620 --> 00:11:10.920
the ones that serve the app.

00:11:10.920 --> 00:11:14.510
So what happens after
a user taps Install?

00:11:14.510 --> 00:11:16.890
Well, they still have to
download the app, right?

00:11:16.890 --> 00:11:19.790
So we can also measure
what percentage of apps--

00:11:19.790 --> 00:11:23.420
by size-- actually fully
make it to the device--

00:11:23.420 --> 00:11:26.750
have a 100% transfer rate
and are ready for install.

00:11:26.750 --> 00:11:28.800
And that's what this
graph shows here.

00:11:28.800 --> 00:11:31.370
So you can see that
as app size increases,

00:11:31.370 --> 00:11:35.130
the success of a download
drops precipitously.

00:11:35.130 --> 00:11:37.520
Now, this could be for
a variety of reasons

00:11:37.520 --> 00:11:39.300
that aren't all shown here.

00:11:39.300 --> 00:11:42.420
So for example, it might be
for environmental conditions.

00:11:42.420 --> 00:11:44.890
Perhaps in certain
parts of the world,

00:11:44.890 --> 00:11:47.890
network quality isn't as high
as we would like it to be.

00:11:47.890 --> 00:11:50.450
It's not as reliable as
we would like it to be.

00:11:50.450 --> 00:11:52.770
It might also be for
our user actions.

00:11:52.770 --> 00:11:55.580
Perhaps the user gets tired of
waiting around for a large app

00:11:55.580 --> 00:11:58.520
to download, or maybe once
they're on the download screen,

00:11:58.520 --> 00:12:02.540
they see just how large the app
is and they decide to cancel.

00:12:02.540 --> 00:12:05.660
The blue line here shows apps--

00:12:05.660 --> 00:12:07.460
excuse me, devices--
that have less than

00:12:07.460 --> 00:12:09.290
or equal to 1
gigabyte of RAM, which

00:12:09.290 --> 00:12:12.440
is the same device profile
as the Android Go devices

00:12:12.440 --> 00:12:13.920
we're talking about.

00:12:13.920 --> 00:12:16.470
And you can see that the
impact is even more dramatic

00:12:16.470 --> 00:12:18.500
for those sorts of devices.

00:12:18.500 --> 00:12:20.450
But whatever the
individual reason,

00:12:20.450 --> 00:12:22.670
the action you can
take today is clear--

00:12:22.670 --> 00:12:25.590
keep your apps small.

00:12:25.590 --> 00:12:28.740
In many parts of the world,
users pay attention to app size

00:12:28.740 --> 00:12:30.690
when deciding what to download.

00:12:30.690 --> 00:12:33.540
This chart shows the
median download size,

00:12:33.540 --> 00:12:36.870
country by country, for devices
with less than or equal to 1

00:12:36.870 --> 00:12:38.610
gigabyte of RAM.

00:12:38.610 --> 00:12:42.420
So in countries with cheap
data or cheap storage

00:12:42.420 --> 00:12:44.520
or strong network
reliability, we

00:12:44.520 --> 00:12:47.010
see that users have
a natural tendency

00:12:47.010 --> 00:12:50.950
to prefer larger apps, which
you can see in the blue.

00:12:50.950 --> 00:12:52.620
But in many markets,
particularly

00:12:52.620 --> 00:12:55.650
across Africa and Asia,
we see a clear trend

00:12:55.650 --> 00:12:58.820
towards smaller apps.

00:12:58.820 --> 00:13:01.160
But just to reiterate
Raj's point,

00:13:01.160 --> 00:13:03.960
this isn't just an
emerging market problem.

00:13:03.960 --> 00:13:06.350
If we look at the median
download size again,

00:13:06.350 --> 00:13:08.780
we can see that
the US is roughly

00:13:08.780 --> 00:13:11.490
right in the middle
of our global minimum

00:13:11.490 --> 00:13:13.020
and our global maximum.

00:13:13.020 --> 00:13:16.610
So this implies that roughly
50% of users in the US

00:13:16.610 --> 00:13:18.620
and countries like
it also are more

00:13:18.620 --> 00:13:21.140
likely to prefer smaller apps.

00:13:21.140 --> 00:13:24.020
The US is the second-largest
market for Android Go devices

00:13:24.020 --> 00:13:25.790
globally, and I
think these numbers

00:13:25.790 --> 00:13:29.080
help to support that statement.

00:13:29.080 --> 00:13:30.860
So you might be
saying to yourself,

00:13:30.860 --> 00:13:33.172
what's the point of this
part of the presentation?

00:13:33.172 --> 00:13:35.380
Is Google really trying to
tell me to remove features

00:13:35.380 --> 00:13:39.220
from my app and try and make
my app small by doing that?

00:13:39.220 --> 00:13:40.600
Not exactly.

00:13:40.600 --> 00:13:42.250
What I'm trying to
do is paint for you

00:13:42.250 --> 00:13:45.370
a larger picture of the
decisions and the factors

00:13:45.370 --> 00:13:47.320
that you should weigh
when considering

00:13:47.320 --> 00:13:49.360
what to do in your app next.

00:13:49.360 --> 00:13:51.580
Some of your
decisions might cause

00:13:51.580 --> 00:13:53.950
you to lose out on
quality installs

00:13:53.950 --> 00:13:56.306
and prevent users from
installing your app.

00:13:56.306 --> 00:13:58.770
I'm now going to pass it
to my colleague Amrit, who

00:13:58.770 --> 00:14:01.360
will dive more into the
details of how to optimize

00:14:01.360 --> 00:14:02.730
your app for Android Go.

00:14:02.730 --> 00:14:03.230
Thanks.

00:14:03.230 --> 00:14:06.261
[APPLAUSE]

00:14:06.261 --> 00:14:07.469
AMRIT SANJEEV: Thanks, Steve.

00:14:11.210 --> 00:14:11.960
I'm Amrit Sanjeev.

00:14:11.960 --> 00:14:15.212
I'm a Developer Advocate
at Google based in India.

00:14:15.212 --> 00:14:16.670
And in this session,
I want to talk

00:14:16.670 --> 00:14:18.860
about how you can
optimize your apps to make

00:14:18.860 --> 00:14:20.870
them Android Go-ready.

00:14:20.870 --> 00:14:23.540
What we have learned
working with our partners

00:14:23.540 --> 00:14:26.620
is that when they actually
optimize their apps for Android

00:14:26.620 --> 00:14:29.750
Go, it just did not
benefit only the users who

00:14:29.750 --> 00:14:31.550
used Android Go devices.

00:14:31.550 --> 00:14:34.940
It did help everyone who
was using those apps.

00:14:34.940 --> 00:14:38.210
It worked with people who
were in emerged markets,

00:14:38.210 --> 00:14:41.100
as well as using
high-end devices.

00:14:41.100 --> 00:14:44.130
As you'll hopefully
see, tuning these apps

00:14:44.130 --> 00:14:47.380
with these requirements
will enable all your users

00:14:47.380 --> 00:14:49.760
and will bring a lot
of benefits for you.

00:14:49.760 --> 00:14:53.710
Let's walk through some of the
technical requirements here.

00:14:53.710 --> 00:14:59.400
Firstly, you need to set your
target SDK to 26 or above.

00:14:59.400 --> 00:15:01.980
This will not only ensure
that you deliver the latest

00:15:01.980 --> 00:15:05.160
Android experience to
users, it will also

00:15:05.160 --> 00:15:08.940
allow you to comply with
the Play policy change that

00:15:08.940 --> 00:15:11.290
requires you to set
the target SDK to n

00:15:11.290 --> 00:15:17.240
minus 1 API level, where n
is the latest Android API.

00:15:17.240 --> 00:15:19.820
If you're targeting a
version lower right now,

00:15:19.820 --> 00:15:22.880
you need to ensure that you
test your apps thoroughly

00:15:22.880 --> 00:15:26.330
to make sure that there are
no breakages or functionality

00:15:26.330 --> 00:15:28.460
changes because of
this API change.

00:15:28.460 --> 00:15:30.290
There are some behavior
changes in API 26,

00:15:30.290 --> 00:15:32.760
and you need to
account for that.

00:15:32.760 --> 00:15:36.550
Limitations like background
processing, location updates,

00:15:36.550 --> 00:15:39.090
notification changes
are some of the examples

00:15:39.090 --> 00:15:43.050
of reasons why you might
want to test more thoroughly.

00:15:43.050 --> 00:15:46.380
The second requirement
is reduce the APK size.

00:15:46.380 --> 00:15:51.360
For apps, we require you
to make it less than 40 MB.

00:15:51.360 --> 00:15:53.850
And for games, that's
extended to 65 MB.

00:15:53.850 --> 00:15:56.390
That's excluding the
secondary downloads.

00:15:56.390 --> 00:15:58.950
When I say 40 MB,
that's the upper limit

00:15:58.950 --> 00:16:00.370
that I'm talking about here.

00:16:00.370 --> 00:16:03.090
You need to make it
as small as possible.

00:16:03.090 --> 00:16:05.340
Here are some of the things
that you could do in order

00:16:05.340 --> 00:16:07.210
to reduce your APK size.

00:16:07.210 --> 00:16:10.530
Firstly, remove all unnecessary
code and unnecessary libraries

00:16:10.530 --> 00:16:13.560
that you have added
into your build,

00:16:13.560 --> 00:16:15.560
and ensure that the
libraries that you're adding

00:16:15.560 --> 00:16:20.350
are mobile-optimized
and not server-side ones

00:16:20.350 --> 00:16:22.000
The drawers in your
resource folder,

00:16:22.000 --> 00:16:24.114
they need to be
optimized for both size

00:16:24.114 --> 00:16:25.030
as well as for format.

00:16:27.507 --> 00:16:29.340
If you're looking for
backward compatibility

00:16:29.340 --> 00:16:32.130
and you're adding
support for modules,

00:16:32.130 --> 00:16:34.350
ensure that you're adding
only the modules that

00:16:34.350 --> 00:16:37.900
are required by the application
and not all of them.

00:16:37.900 --> 00:16:42.600
In case your app has audio
resource files like .wav files,

00:16:42.600 --> 00:16:45.360
try converting
them to MP3 or AAC,

00:16:45.360 --> 00:16:47.980
which are much smaller formats,
thereby reducing the APK size.

00:16:47.980 --> 00:16:49.980
But it's not really about
changing these things.

00:16:49.980 --> 00:16:51.230
You also need to measure them.

00:16:51.230 --> 00:16:52.050
Right?

00:16:52.050 --> 00:16:55.200
So if using a
traditional APK format,

00:16:55.200 --> 00:16:58.080
you can use the Android APK
Analyzer that shipped along

00:16:58.080 --> 00:17:01.740
with Android Studio to
check the sizes of the APK

00:17:01.740 --> 00:17:04.140
and also compare it
against the previous one

00:17:04.140 --> 00:17:06.660
as you make changes
to see how well you're

00:17:06.660 --> 00:17:09.990
making increments in this one.

00:17:09.990 --> 00:17:13.140
If you're using the
new app bundle format,

00:17:13.140 --> 00:17:15.750
then you might want
to use the bundle tool

00:17:15.750 --> 00:17:19.089
and check the size
of the [INAUDIBLE]..

00:17:19.089 --> 00:17:22.740
We all know that entry level
devices are RAM constraints.

00:17:22.740 --> 00:17:25.750
So you need to check all
your key user features

00:17:25.750 --> 00:17:29.340
to ensure that they run
properly without any issues

00:17:29.340 --> 00:17:32.350
on a [INAUDIBLE] RAM device.

00:17:32.350 --> 00:17:35.630
ANR, janky frames,
out-of-memory exceptions

00:17:35.630 --> 00:17:37.420
are things that you
got to watch out for.

00:17:37.420 --> 00:17:40.650
So test your apps thoroughly
before you release them

00:17:40.650 --> 00:17:43.350
for these problems, and
fix them proactively

00:17:43.350 --> 00:17:45.540
before you send it
out in the market.

00:17:45.540 --> 00:17:47.800
Once you've actually put
it out there in the market,

00:17:47.800 --> 00:17:49.980
you need to observe and
reactively fix issues

00:17:49.980 --> 00:17:51.350
as they come.

00:17:51.350 --> 00:17:55.000
Android-wide tools, which James
will actually talk about later

00:17:55.000 --> 00:17:59.530
on, Firebase, Crashlytics,
and Firebase Performance

00:17:59.530 --> 00:18:01.030
Monitoring tool are
some of the SDKs

00:18:01.030 --> 00:18:03.970
is that you could use in
order to do this reactive part

00:18:03.970 --> 00:18:06.700
really, really well.

00:18:06.700 --> 00:18:11.280
Let's take a look at the
requirement for RAM usage.

00:18:11.280 --> 00:18:14.760
Start up memory in your apps
should be less than 50 MB.

00:18:14.760 --> 00:18:18.420
And for games, that's
extended to 150 MB.

00:18:18.420 --> 00:18:21.450
I want to be clear that when
I'm talking about RAM usage,

00:18:21.450 --> 00:18:23.590
I'm talking about the
Proportional Set Size

00:18:23.590 --> 00:18:26.270
here, or PSS in short.

00:18:26.270 --> 00:18:29.620
PSS is basically the sum
of the private memory

00:18:29.620 --> 00:18:32.190
your app is using plus the
proportion of the shared

00:18:32.190 --> 00:18:35.320
memory with other processors.

00:18:35.320 --> 00:18:37.720
Test all your key user
journeys and optimize them

00:18:37.720 --> 00:18:38.500
for memory usage.

00:18:38.500 --> 00:18:42.100
And make the memory
footprint as low as possible.

00:18:42.100 --> 00:18:43.990
A common way to
find this PSS number

00:18:43.990 --> 00:18:46.630
is to use the meminfo
command that you

00:18:46.630 --> 00:18:48.040
will run from the ADB shell.

00:18:48.040 --> 00:18:50.770
Or you could use a
debug memory class

00:18:50.770 --> 00:18:54.270
and programmatically
calculate this.

00:18:54.270 --> 00:18:56.750
Let's move on to app's
startup time here.

00:18:56.750 --> 00:18:58.900
The requirement here is
that apps should start

00:18:58.900 --> 00:19:01.030
in less than five seconds.

00:19:01.030 --> 00:19:03.730
What I mean startup time in
five seconds, what I mean is,

00:19:03.730 --> 00:19:07.270
be fully interactive in
less than five seconds.

00:19:07.270 --> 00:19:09.100
We all know that
quick starts are

00:19:09.100 --> 00:19:13.590
key to avoid early
uninstalls and abandonment.

00:19:13.590 --> 00:19:16.620
A quick startup time is key
in building a perception

00:19:16.620 --> 00:19:19.380
that your app loads fast
and is fast for the user.

00:19:19.380 --> 00:19:23.000
As a general rule,
you need to ensure

00:19:23.000 --> 00:19:27.810
that your app is perceived
to be fast on these devices.

00:19:27.810 --> 00:19:30.060
In order to measure
the app startup time,

00:19:30.060 --> 00:19:32.210
you could use the Firebase
Performance Monitoring

00:19:32.210 --> 00:19:34.790
SDK, which actually calculates
it automatically and shows it

00:19:34.790 --> 00:19:36.123
on the Firebase console for you.

00:19:38.905 --> 00:19:41.030
We're extremely proud of
the work our partners have

00:19:41.030 --> 00:19:45.710
done in order to reduce
size and improve performance

00:19:45.710 --> 00:19:47.330
for their users.

00:19:47.330 --> 00:19:49.190
We can't thank them
enough for partnering

00:19:49.190 --> 00:19:51.710
with us on this initiative
and in providing

00:19:51.710 --> 00:19:56.600
a fast-performing and rich
experience for the users.

00:19:56.600 --> 00:19:59.300
I'm going to now show you
a video that our team has

00:19:59.300 --> 00:20:02.380
put together, highlighting
the experience Flipkart

00:20:02.380 --> 00:20:04.580
team had while they
were optimizing

00:20:04.580 --> 00:20:05.660
their app for Android Go.

00:20:05.660 --> 00:20:06.410
Let's take a look.

00:20:09.332 --> 00:20:12.750
[VIDEO PLAYBACK]

00:22:31.383 --> 00:22:33.878
[END PLAYBACK]

00:22:33.878 --> 00:22:36.380
We are so proud of
the work Flipkart

00:22:36.380 --> 00:22:38.120
and all our partners
have done in order

00:22:38.120 --> 00:22:42.150
to optimize their
apps for Android Go.

00:22:42.150 --> 00:22:44.740
Now, I'm going to hand over
the stage to my colleague

00:22:44.740 --> 00:22:47.710
James, who is going to talk
to you about the Play updates.

00:22:47.710 --> 00:22:49.451
Thank you.

00:22:49.451 --> 00:22:51.373
[APPLAUSE]

00:22:51.373 --> 00:22:52.373
JAMES BENDER: Thank you.

00:22:56.760 --> 00:22:57.410
Hey, everyone.

00:22:57.410 --> 00:23:00.340
I'm James, and I'm a Product
Manager on Google Play.

00:23:00.340 --> 00:23:03.340
I work on initiatives like
Android Go, the emerging

00:23:03.340 --> 00:23:05.880
markets, and end
user optimizations.

00:23:05.880 --> 00:23:07.960
And I'm really excited
to share all the work

00:23:07.960 --> 00:23:09.550
that the entire
Play team has put

00:23:09.550 --> 00:23:12.970
in over the past couple of years
to deliver a quality Android

00:23:12.970 --> 00:23:15.550
experience to our users.

00:23:15.550 --> 00:23:17.720
Let's dive into the work
we're doing in the store.

00:23:17.720 --> 00:23:19.594
I'm going to chat a
little bit about end user

00:23:19.594 --> 00:23:21.970
experience and then
optimizations and improvements

00:23:21.970 --> 00:23:23.176
we made under the hood.

00:23:23.176 --> 00:23:25.300
And then I'll tell you guys
about some of the tools

00:23:25.300 --> 00:23:27.400
that we've developed for
you to make it easier

00:23:27.400 --> 00:23:29.560
to build on Android Go.

00:23:29.560 --> 00:23:31.780
A key point that I
want to make today

00:23:31.780 --> 00:23:35.110
is that there is no Go
version of the Play Store.

00:23:35.110 --> 00:23:37.690
It's just the Play
Store optimized for Go.

00:23:37.690 --> 00:23:40.840
It's the same Play
Store on every device.

00:23:40.840 --> 00:23:43.600
We did this deliberately because
we think that the optimizations

00:23:43.600 --> 00:23:47.170
that we can make,
the customer should

00:23:47.170 --> 00:23:49.660
be able to take advantage
of those optimizations

00:23:49.660 --> 00:23:51.880
on any device that they
may be on, whether it

00:23:51.880 --> 00:23:54.910
be a Go device or a Pixel.

00:23:54.910 --> 00:23:57.700
We aren't limiting the
catalog on Android Go,

00:23:57.700 --> 00:24:01.000
so users get access
to any title that you

00:24:01.000 --> 00:24:04.540
choose to distribute to them,
whether your distribution

00:24:04.540 --> 00:24:09.650
settings be limited by
location or by device type.

00:24:09.650 --> 00:24:12.680
So we kind of need
to set the example.

00:24:12.680 --> 00:24:15.800
You've heard today over and
over that small matters.

00:24:15.800 --> 00:24:19.700
We went out over the
past year and have

00:24:19.700 --> 00:24:23.150
chopped the Play Store in
half from a size perspective.

00:24:23.150 --> 00:24:27.080
And we're now just at or below
10 megabytes on all devices

00:24:27.080 --> 00:24:28.430
globally.

00:24:28.430 --> 00:24:32.610
It's an accomplishment
I'm super proud of.

00:24:32.610 --> 00:24:35.550
Users in emerging markets
have made it ultra clear to us

00:24:35.550 --> 00:24:38.520
that mobile data
is their currency.

00:24:38.520 --> 00:24:40.560
So we ran a couple
of tests and we

00:24:40.560 --> 00:24:44.800
showed how expensive any
app download is on a card

00:24:44.800 --> 00:24:46.360
and on search results.

00:24:46.360 --> 00:24:50.130
And as you could imagine,
users opt for smaller apps,

00:24:50.130 --> 00:24:52.240
even if a rating may be lower.

00:24:52.240 --> 00:24:54.900
So in a couple of
places, we actually

00:24:54.900 --> 00:25:01.560
replaced where we previously had
an app rating with an app size.

00:25:01.560 --> 00:25:05.850
We found that showing the APK
size increases install rates

00:25:05.850 --> 00:25:09.490
and more importantly,
user engagement over time.

00:25:09.490 --> 00:25:11.140
Remember what
Steve said earlier.

00:25:11.140 --> 00:25:14.760
APK size does have an
effect on install conversion

00:25:14.760 --> 00:25:17.770
and successful install rate.

00:25:17.770 --> 00:25:23.300
And with the rise of offline
and peer-to-peer sharing,

00:25:23.300 --> 00:25:26.690
Play wanted to ensure that
users could still trust the apps

00:25:26.690 --> 00:25:28.910
and games that they
got from us, no matter

00:25:28.910 --> 00:25:30.630
where those apps came from.

00:25:30.630 --> 00:25:32.780
That's why we
introduced Play Protect.

00:25:32.780 --> 00:25:35.390
You can think of it
as a badge of security

00:25:35.390 --> 00:25:38.460
that users will know and trust.

00:25:38.460 --> 00:25:43.110
So what this does is it gives
users on any device type

00:25:43.110 --> 00:25:48.727
confidence that they have a safe
and secure app experience when

00:25:48.727 --> 00:25:50.310
they're in interacting
with these apps

00:25:50.310 --> 00:25:52.440
in the context of Play.

00:25:52.440 --> 00:25:54.247
How did we do it?

00:25:54.247 --> 00:25:55.830
We wanted to make
sure that an app can

00:25:55.830 --> 00:25:57.340
be trusted on a user's device.

00:25:57.340 --> 00:26:02.490
So we started to attach a very
small bit of security metadata

00:26:02.490 --> 00:26:05.210
to every app and
game that we publish.

00:26:05.210 --> 00:26:10.770
Then, what we can do is if a
user acquires an app offline

00:26:10.770 --> 00:26:13.980
or via peer-to-peer,
we can use Play Protect

00:26:13.980 --> 00:26:16.500
to read that security
metadata and determine

00:26:16.500 --> 00:26:19.980
an app's authenticity
and verify its source.

00:26:19.980 --> 00:26:22.980
You, as a developer,
get the added benefit

00:26:22.980 --> 00:26:26.160
of being able to service those
apps because we will bring them

00:26:26.160 --> 00:26:28.830
into the user's Play library.

00:26:28.830 --> 00:26:32.480
And we'll be able to update
those apps in the future.

00:26:32.480 --> 00:26:35.150
It's a major pain point that
we know you've relayed to us

00:26:35.150 --> 00:26:36.990
and we're excited to
address moving forward.

00:26:39.850 --> 00:26:45.000
APK size, the downstream
metrics that come from it,

00:26:45.000 --> 00:26:50.820
installs, how long a user may
keep an app on their device,

00:26:50.820 --> 00:26:54.020
and APK size getting bigger
over the past 10 years

00:26:54.020 --> 00:26:57.570
caused us to really take a step
back and evaluate ourselves.

00:26:57.570 --> 00:27:00.810
And we said, what can we do
to make this situation better?

00:27:00.810 --> 00:27:03.540
Well, through that
analysis, we came up

00:27:03.540 --> 00:27:05.250
with Google Play
dynamic delivery.

00:27:05.250 --> 00:27:09.000
Today, you can use
Android app bundle

00:27:09.000 --> 00:27:11.820
to benefit from a smaller
app without needing

00:27:11.820 --> 00:27:13.680
to refactor your code.

00:27:13.680 --> 00:27:18.180
The app bundle also enables
future modularization.

00:27:18.180 --> 00:27:19.830
What it does is it
reduces your app

00:27:19.830 --> 00:27:22.100
at the moment the
user installs the app.

00:27:22.100 --> 00:27:26.190
It allows you to load dynamic
feature modules on demand

00:27:26.190 --> 00:27:28.560
at the point when they're
needed further down the road

00:27:28.560 --> 00:27:30.660
when the user is
engaging with the app

00:27:30.660 --> 00:27:33.270
rather than making
sure there is lots

00:27:33.270 --> 00:27:35.190
of pressure at install time.

00:27:35.190 --> 00:27:38.160
The Android app bundle, along
with Google Play's dynamic app

00:27:38.160 --> 00:27:42.180
delivery, ensure we deliver apps
of the future that are modular,

00:27:42.180 --> 00:27:43.435
instant, and dynamic.

00:27:45.970 --> 00:27:48.850
We've also tuned the Play
Store's personalization

00:27:48.850 --> 00:27:52.750
algorithm to show smaller
apps on lower-level devices.

00:27:52.750 --> 00:27:55.630
And as you could imagine,
this increases engagement,

00:27:55.630 --> 00:27:58.510
because downloads are more
successful and smaller

00:27:58.510 --> 00:28:01.919
apps run better on these
entry-level devices.

00:28:01.919 --> 00:28:03.460
This is evident in
all the data we've

00:28:03.460 --> 00:28:05.440
collected on user
behavior, and it's

00:28:05.440 --> 00:28:08.890
key to think about how
size will affect app store

00:28:08.890 --> 00:28:10.510
ranking for these users.

00:28:13.190 --> 00:28:16.700
We've done a bunch of feature
improvements for the store.

00:28:16.700 --> 00:28:22.910
For example, when a user is
near device disk capacity space,

00:28:22.910 --> 00:28:24.980
we suggest users
removing apps that

00:28:24.980 --> 00:28:26.870
have either never
been opened or haven't

00:28:26.870 --> 00:28:28.640
been used in a long time.

00:28:28.640 --> 00:28:30.440
You can see on the
screen here, we

00:28:30.440 --> 00:28:36.950
show a mock of apps that
are of a specific size that

00:28:36.950 --> 00:28:40.460
haven't been used from
least frequently used

00:28:40.460 --> 00:28:41.936
to most frequently used.

00:28:41.936 --> 00:28:43.310
And we give the
user who's trying

00:28:43.310 --> 00:28:45.920
to install your app an
opportunity to delete

00:28:45.920 --> 00:28:48.794
an app that is stale
or they've never used.

00:28:48.794 --> 00:28:50.210
And that gives
them an opportunity

00:28:50.210 --> 00:28:51.960
to have a better
experience with your app.

00:28:55.850 --> 00:28:59.440
Another thing that we
recognized we were not

00:28:59.440 --> 00:29:01.780
serving our users
in the best way

00:29:01.780 --> 00:29:04.210
was the notion
that a lot of users

00:29:04.210 --> 00:29:07.360
manage app installs
when they're on Wi-Fi.

00:29:07.360 --> 00:29:09.310
Well, we thought
we could do better.

00:29:09.310 --> 00:29:13.370
So we created Play's
Wait For Wi-Fi feature.

00:29:13.370 --> 00:29:16.370
It's a known usage pattern
everyone sees all the time,

00:29:16.370 --> 00:29:19.330
but we thought Play could
do a better job of serving

00:29:19.330 --> 00:29:21.670
this particular user need.

00:29:21.670 --> 00:29:23.680
Data management is
important to these users.

00:29:23.680 --> 00:29:29.560
So if today, if a user is on
Play via a mobile connection,

00:29:29.560 --> 00:29:31.450
when they install,
they can either choose

00:29:31.450 --> 00:29:34.450
to install that app immediately
or delay the download

00:29:34.450 --> 00:29:36.470
until their device
connects to Wi-Fi

00:29:36.470 --> 00:29:38.950
and will initiate the
download in the background

00:29:38.950 --> 00:29:43.240
and alert them when the download
and install is complete.

00:29:43.240 --> 00:29:45.020
This gives users more control.

00:29:45.020 --> 00:29:46.560
It saves metered data.

00:29:46.560 --> 00:29:50.140
And most importantly,
it saves money.

00:29:50.140 --> 00:29:52.890
We also took a look at
ourselves and realized

00:29:52.890 --> 00:29:56.670
that we weren't doing a very
good job from an offline

00:29:56.670 --> 00:30:00.190
or a connectivity
tolerance point of view.

00:30:00.190 --> 00:30:02.500
So we built a couple
of additional features.

00:30:02.500 --> 00:30:06.420
The first one is when the
Play Store is on Wi-Fi,

00:30:06.420 --> 00:30:09.150
we cache a larger percentage
of the most visited parts

00:30:09.150 --> 00:30:10.320
of the store.

00:30:10.320 --> 00:30:13.470
So what that means is if the
user turns mobile data off

00:30:13.470 --> 00:30:16.740
or their connectivity is
crummy or their connectivity is

00:30:16.740 --> 00:30:20.970
spotty, we can actually serve a
greater percentage of the store

00:30:20.970 --> 00:30:22.230
directly from cache.

00:30:22.230 --> 00:30:24.330
This is great because
it works offline.

00:30:24.330 --> 00:30:26.970
It's also great because
it's a super fast experience

00:30:26.970 --> 00:30:29.040
for our users.

00:30:29.040 --> 00:30:31.710
Then when they reach the edge
of the cache, they're offline,

00:30:31.710 --> 00:30:34.560
and they can't bring up
any additional pages,

00:30:34.560 --> 00:30:36.780
we've built another
feature that allows a user

00:30:36.780 --> 00:30:39.672
to opt into a notification
that will bring them back

00:30:39.672 --> 00:30:41.130
to that part of
the store that they

00:30:41.130 --> 00:30:45.420
left once their device
establishes a connection again.

00:30:45.420 --> 00:30:48.330
This is a great opportunity
for the user to get back

00:30:48.330 --> 00:30:52.237
to Play to download your app.

00:30:52.237 --> 00:30:53.820
All the features I
just walked through

00:30:53.820 --> 00:30:57.730
are designed to give end users
a high-quality store experience.

00:30:57.730 --> 00:31:00.900
But I also want to reiterate
that we have tools available

00:31:00.900 --> 00:31:04.770
for you to help you optimize
your app for these Android Go

00:31:04.770 --> 00:31:07.110
devices and these markets.

00:31:07.110 --> 00:31:10.980
The first, which no one in this
room should be unfamiliar with,

00:31:10.980 --> 00:31:13.440
is Android Vitals.

00:31:13.440 --> 00:31:17.340
Android Vitals gives you an
insight into ANRs and crashes.

00:31:17.340 --> 00:31:20.100
And it's paramount for
understanding the stability

00:31:20.100 --> 00:31:22.380
of your app battery.

00:31:22.380 --> 00:31:26.640
And the most important part is
that Android Vitals Performance

00:31:26.640 --> 00:31:29.910
impacts your promotability
on the Play Store,

00:31:29.910 --> 00:31:34.070
especially in the context
of Search and Discovery.

00:31:34.070 --> 00:31:39.500
We also introduced a flag,
as Raj previously spoke of,

00:31:39.500 --> 00:31:42.860
called Is Low RAM, that allows
you to adjust your app's UX

00:31:42.860 --> 00:31:44.480
and distribution choices.

00:31:44.480 --> 00:31:47.540
We want you to optimize
for maximum distribution.

00:31:47.540 --> 00:31:51.570
Here's an additional
tool to help with that.

00:31:51.570 --> 00:31:54.590
We've also included details
about Android Go devices

00:31:54.590 --> 00:31:57.080
in the console
pre-launch report.

00:31:57.080 --> 00:31:59.150
This allows you to
check on your builds

00:31:59.150 --> 00:32:02.480
and understand how they're
performing on actual Android Go

00:32:02.480 --> 00:32:06.620
devices on testbeds before
you release to market.

00:32:06.620 --> 00:32:10.040
Be sure you incorporate
a regular cadence

00:32:10.040 --> 00:32:12.590
with the console
pre-launch report as part

00:32:12.590 --> 00:32:16.430
of your normal QA and
release management process.

00:32:16.430 --> 00:32:20.210
So you guys have been
to a lot of meetings.

00:32:20.210 --> 00:32:21.570
You've heard a lot of things.

00:32:21.570 --> 00:32:24.320
And if you've been on your
phone the last 25 minutes,

00:32:24.320 --> 00:32:26.390
the four things you
need to remember,

00:32:26.390 --> 00:32:29.880
Android Go is a huge
opportunity, keep

00:32:29.880 --> 00:32:36.600
your apps small, you should do
everything you can to improve

00:32:36.600 --> 00:32:40.605
app quality by leveraging
the Android tools, and Play

00:32:40.605 --> 00:32:42.915
is delivering a focused
experience for these users.

00:32:46.730 --> 00:32:47.692
Thank you everyone.

00:32:47.692 --> 00:32:49.400
If you have any
questions, the four of us

00:32:49.400 --> 00:32:50.608
will be up here at the front.

00:32:50.608 --> 00:32:52.420
Looking forward to
hearing from you.

00:32:52.420 --> 00:32:53.890
[APPLAUSE]

00:32:53.890 --> 00:32:57.590
[MUSIC PLAYING]

