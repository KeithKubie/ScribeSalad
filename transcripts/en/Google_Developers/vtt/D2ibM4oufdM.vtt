WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:12.630
&gt;&gt; GLAZER: Hello, everyone. Welcome to, welcome
to tonight's campfire. Excited to see everyone

00:00:12.630 --> 00:00:16.660
here, it was a fun sort of gathering of the
tribe, mingling with people, seeing lots of

00:00:16.660 --> 00:00:20.890
people that I tend to see at these kinds of
events and more importantly seeing you all

00:00:20.890 --> 00:00:24.679
see each and connect with people that you
see occasionally, so. It's one of the things

00:00:24.679 --> 00:00:28.659
that I like about this kind of events, just
remembering that we are a community of developers

00:00:28.659 --> 00:00:32.970
and we care about a lot of the same things
and it's nice to be able to get together.

00:00:32.970 --> 00:00:36.930
Thank you all for turning out on a cold night.
I'm a--you know, I was kind of disappointed

00:00:36.930 --> 00:00:40.800
it was inside until I stuck my nose outside
and then I tried to warm my hands over one

00:00:40.800 --> 00:00:47.070
of these fires and realized that a, that this
was good idea. I'm Dave Glazer, director of

00:00:47.070 --> 00:00:50.170
engineering here at Google, responsible for
a bunch of our developer products. One of

00:00:50.170 --> 00:00:56.020
the best things about my job is when I get
to at events like this, brag about and introduce

00:00:56.020 --> 00:00:59.870
and show off the great work done by some of
our engineering teams. And I'm going to talk

00:00:59.870 --> 00:01:03.050
for a couple of minutes and then get out the
way and let the, the product team get up here

00:01:03.050 --> 00:01:08.770
and show you what it is that they've been
working on with Google Web Toolkit. The last

00:01:08.770 --> 00:01:12.451
time we did a campfire and talked to you about
some of the features in Google Web Toolkit

00:01:12.451 --> 00:01:17.020
was about eight months ago back in April,
and the team has been working before, since

00:01:17.020 --> 00:01:21.490
and, you know, during and since that, that
and enhancing Google Web Toolkit. And we've

00:01:21.490 --> 00:01:25.380
been using it a lot internally here at Google.
A lot of our product teams here at Google

00:01:25.380 --> 00:01:30.170
and you've heard about a few of these releases.
You know, at Google I/O back in May, we released

00:01:30.170 --> 00:01:35.020
the Wave which was built on top of Google
Web Toolkit. Most of you probably know we

00:01:35.020 --> 00:01:39.850
did a major new release, a ground-up rewrite
of our AdWords Interface which is the place

00:01:39.850 --> 00:01:44.479
that advertisers interact and manage their
advertising campaign. So, that was done on

00:01:44.479 --> 00:01:49.759
top of Google Web Toolkit. We did our--a brand
new redo of the Orchid UI which is, which

00:01:49.759 --> 00:01:54.939
is incredibly high user traffic, much richer
more than interactive UI. You probably don't

00:01:54.939 --> 00:01:59.829
know about a couple of dozen other applications
that we, Google have built using Google Web

00:01:59.829 --> 00:02:03.189
Toolkit because they're internal. We use it,
we use Google Web Toolkit all the time for

00:02:03.189 --> 00:02:10.340
applications that manage hiring, that manage
performance, that manage application distribution

00:02:10.340 --> 00:02:15.010
on desktops, lots of through different internal
applications that we regularly use the tools

00:02:15.010 --> 00:02:20.180
that we build ourselves because we're trying
to build the best web apps we can and we like

00:02:20.180 --> 00:02:25.370
using the best tools. One of the things that's
really good about having internal people use

00:02:25.370 --> 00:02:29.680
our tools is we get to see and hear from them
when they like what's happening and they like

00:02:29.680 --> 00:02:33.610
the tools and they're happy about, with how
they make their job easier. One of the other

00:02:33.610 --> 00:02:37.200
things about having internal people use our
tools is we also hear from them when the tools

00:02:37.200 --> 00:02:42.250
could be improved. And one of the refrains
that we hear all the time is we found out

00:02:42.250 --> 00:02:46.140
that developers are impatient, you know. And
developers are impatient because their users

00:02:46.140 --> 00:02:50.819
are impatient, because we all want to when
we're using software, we're building software,

00:02:50.819 --> 00:02:54.799
we want to get things done. And the theme
of what we're going to talk to you about tonight

00:02:54.799 --> 00:03:00.650
is faster apps, building them faster and faster
apps, running them faster. So, you're going

00:03:00.650 --> 00:03:04.580
to see the team talk you through a set of
enhancements. I'm just going to sort of skim

00:03:04.580 --> 00:03:08.530
the highlight to some of the new things that
we've been working on, have packaged up that

00:03:08.530 --> 00:03:14.219
are now available for all of you to use as
part of Google Web Toolkit 2.0. On the side

00:03:14.219 --> 00:03:18.560
of letting you develop software more quickly,
that's a whole new work-flow around working

00:03:18.560 --> 00:03:23.330
with UI that lets us work--lets that process
work more quickly. This improved integration

00:03:23.330 --> 00:03:30.281
with IDE and there's a much tighter and higher
fidelity edit-refresh test, edit-refresh test

00:03:30.281 --> 00:03:34.900
cycle which is where all the time gets spent
when you're building apps. We also put a lot

00:03:34.900 --> 00:03:39.650
of work in to letting the apps themselves
be much faster with continuing to take the

00:03:39.650 --> 00:03:43.940
Web Toolkit compiler that takes code and squishes
it down to be smaller and faster and getting

00:03:43.940 --> 00:03:50.251
it to some more squishing and be smallerer
and fasterer. Work on start-up of apps so

00:03:50.251 --> 00:03:54.709
that you can download just the code you need
as you need it. And we're excited to show

00:03:54.709 --> 00:04:00.549
off a brand new tool that does performance
profiling applications and you'll get to see

00:04:00.549 --> 00:04:04.200
some demonstrations of how--no matter how
you build the WebApp, you can really get inside

00:04:04.200 --> 00:04:08.079
it and understand where it's spending its
time and once you understand, you can improve.

00:04:08.079 --> 00:04:11.969
So, with that, thank you all very much for
coming, excited about to what you're about

00:04:11.969 --> 00:04:16.799
to see and I'd like to introduce Andrew Bowers,
who is the product manager from Google Web

00:04:16.799 --> 00:04:20.449
Toolkit to start walking you through what's
new. Thank you.

00:04:20.449 --> 00:04:26.280
&gt;&gt; BOWERS: Thanks, David. So, as David said,
we've been working with these teams Google

00:04:26.280 --> 00:04:31.690
Wave AdWord and Orchid over the past 18 months
to evolve Google Web Toolkit, to meet the

00:04:31.690 --> 00:04:36.830
needs of modern web applications. And to set
the context for what I mean by modern web

00:04:36.830 --> 00:04:41.401
applications, just in the past 12 months,
a lot has happened in the browser space. The

00:04:41.401 --> 00:04:47.370
capability of the browsers continues to increase
as HTML 5 moves from specification to reality.

00:04:47.370 --> 00:04:52.620
We're also seeing that the places you can
run web applications is increasing not just

00:04:52.620 --> 00:04:58.120
on the desktop but a lot more opportunities
in the mobile area. You could also say it's

00:04:58.120 --> 00:05:03.250
an understatement that in that same time period,
Java speed--JavaScript speed has increased.

00:05:03.250 --> 00:05:07.460
And this is allowing developers to push a
lot more functionality to the client that

00:05:07.460 --> 00:05:12.720
used to happen on the server. So as these
performance enhancedâ€”-you know, performance

00:05:12.720 --> 00:05:17.990
increases and capabilities increase, we're
seeing much more ambitious applications. And

00:05:17.990 --> 00:05:23.060
some of these apps are quiet frankly evolving
out of the tools that are--growing out of

00:05:23.060 --> 00:05:28.199
the tools that we're used to build them, GWT
included. So need to make a few changes, and

00:05:28.199 --> 00:05:32.470
we'll walk you through that tonight. Now for
those of you not familiar with Google Web

00:05:32.470 --> 00:05:36.440
Toolkit, let me just tell you what it is at
a very high level, and we're going to talk

00:05:36.440 --> 00:05:41.220
about the details in depth throughout the
night. It allows you to write an Ajax application

00:05:41.220 --> 00:05:46.800
in Java, and then cross-compile the in a highly
optimized JavaScript that run across all browsers.

00:05:46.800 --> 00:05:51.020
So you have one code base that works across
all these browsers. Now if you look at the

00:05:51.020 --> 00:05:55.220
development cycle for Google Web Toolkit,
you can divide it into two parts, we have

00:05:55.220 --> 00:06:00.800
development time and deployment time. During
development, you code your application against

00:06:00.800 --> 00:06:05.270
the Java APIs and widgets. This is to abstract
the way the browser differences so that you

00:06:05.270 --> 00:06:11.259
can have that one code base that works across
multiple browsers. You iterate in the same

00:06:11.259 --> 00:06:15.180
other life cycle that you're used to in the
browser with the added benefit of being able

00:06:15.180 --> 00:06:20.610
to take advantage of Java debuggers and tools.
And when you're ready to deploy your application,

00:06:20.610 --> 00:06:25.050
you use the GWT compiler to compile that source
to highly optimized JavaScript. Now we're

00:06:25.050 --> 00:06:29.509
going to talk about these steps in depth tonight,
and we'll talk about the improvements we've

00:06:29.509 --> 00:06:35.270
made divided up in these two sides of development
and deployment, or really sort of productivity

00:06:35.270 --> 00:06:41.210
and performance. So I want to start with the
productivity side of the equation, and one

00:06:41.210 --> 00:06:47.259
of the features that we learn working with
Google AdWords. So many of you may not realize

00:06:47.259 --> 00:06:51.070
just how big Google AdWords is. There's a
lot of functionality, a lot of features have

00:06:51.070 --> 00:06:55.740
been added over the years to meet the advertiser
requirements. So when they were looking at

00:06:55.740 --> 00:07:01.490
the UI redesign they wanted a way to iterate
quickly to test UIs with users and to move

00:07:01.490 --> 00:07:07.650
very quickly and use Google Web Toolkit to
do that. So we introduced a new feature, a

00:07:07.650 --> 00:07:14.699
declarative UI called UI binder. This allows
me to write my user interface in an XML template,

00:07:14.699 --> 00:07:21.270
drop in widgets into that template, and then,
associate or bind those widgets to an associated

00:07:21.270 --> 00:07:25.949
Java class where I write my application logic.
So it's a clean separation of a presentation

00:07:25.949 --> 00:07:31.280
layer and application logic, and allows you
to iterate quickly. Now a demo is probably

00:07:31.280 --> 00:07:35.240
worth a thousand of these PowerPoint slides
so I'm going to show you a very quick example.

00:07:35.240 --> 00:07:40.310
It's a small example so I could show you something
from scratch. So if we could go over to the

00:07:40.310 --> 00:07:47.060
demo machine. Oh, I'm already here. So this
is the mail sample that ships to [INDISTINCT]

00:07:47.060 --> 00:07:53.470
STK and it's a simple client side Ajax app
here. And there's an about dialog box, it

00:07:53.470 --> 00:07:59.570
shows up if I click this link. So I'm going
to recreate that dialog box using UI binder.

00:07:59.570 --> 00:08:07.360
So I go over to eclipse, and then delete the
files that are there right now. I hope I won't

00:08:07.360 --> 00:08:16.400
delete anything I don't need. And now I'm
going to create that new dialog box. And let

00:08:16.400 --> 00:08:20.419
see, I've got a mock. Let say, a designer
sent me this mock, and I want to incorporate

00:08:20.419 --> 00:08:30.569
that in here. So I go over to the clips, then
I get to the UI binder wizard, I call the

00:08:30.569 --> 00:08:36.550
dialog. Now the wizard is going to create
two files for me, the XML template here and

00:08:36.550 --> 00:08:43.409
I lay out my user interface, and an about
Dialog.Java that's going to contain my application

00:08:43.409 --> 00:08:48.170
logic. Now this is just boilerplate code right
now so I'm going to change this to dialog

00:08:48.170 --> 00:08:55.100
box, and I know that dialog box takes a set
widget instead of initwidget, in its constructor,

00:08:55.100 --> 00:09:05.470
so I'll change that there. It got two Ts.
So I go to about dialog and I'm going to this

00:09:05.470 --> 00:09:10.731
mock right here, I've got it opened, and I'm
going to take that and copy and paste that

00:09:10.731 --> 00:09:21.560
code in. Just paste it in to the template
here. One of the other nice benefits of UI

00:09:21.560 --> 00:09:26.970
binder is that I can actually bundle CSS style
directly into the template. So that has a

00:09:26.970 --> 00:09:31.700
few benefits. One, it means I don't have to
get fetch external style sheets, one less

00:09:31.700 --> 00:09:36.450
round trip. Two, I means that I can take a
widget, package it up and use it across one

00:09:36.450 --> 00:09:40.170
application in multiple places or across many
applications without having to worry about

00:09:40.170 --> 00:09:45.450
CSS name conflicts. So I'm going to take the
styles here and I'm going to paste this in

00:09:45.450 --> 00:09:52.089
as well. Now we could use an external style
sheet as well, so we leave the regular way

00:09:52.089 --> 00:09:57.550
you would reference a style to reference the
internal there is a little bit different notation,

00:09:57.550 --> 00:10:04.779
just use some brackets. We can see that's
there. Now, I save that, I should be able

00:10:04.779 --> 00:10:14.570
to go back here to Chrome, quick refresh and
my changes are going to show up. Click on

00:10:14.570 --> 00:10:19.649
the about dialogue box and you can see we
now have a new dialogue box there. Yes, very

00:10:19.649 --> 00:10:24.670
exciting dialogue box, isn't it? So, now you
will notice that the close button didn't work.

00:10:24.670 --> 00:10:30.110
So, I probably did something wrong or actually,
I didn't change that from HTML, so it's still

00:10:30.110 --> 00:10:34.329
a button. I want to change that to a widget,
so, I can easily go in to UI binder and do

00:10:34.329 --> 00:10:41.060
that as well. Remember we said, we could mix
HTML and widgets as we wanted to as appropriate.

00:10:41.060 --> 00:10:46.980
So, I'll just do that here, call it close.
I wan to give it a name because I want to

00:10:46.980 --> 00:10:57.480
have a handle to it. I call it close widget.
Get rid of this old one. Now I go to the Java

00:10:57.480 --> 00:11:09.360
file and I'll create a UI handle for it. And
creating event, creative event handler for

00:11:09.360 --> 00:11:15.180
it. Creative event handler is actually really
easy and UI binders as well. I just annotate

00:11:15.180 --> 00:11:26.089
it, I tell it which, which did I want. And
then I create a simple event handler. And

00:11:26.089 --> 00:11:35.980
I want to hide this dialogue box, so I'll
do that. Import that click event, and now

00:11:35.980 --> 00:11:40.300
I have an event handler. Notice I didn't have
to write any anonymous on requests set up

00:11:40.300 --> 00:11:45.910
in any event leisters, just annotate it a
method. And we go back to Chrome, click refresh;

00:11:45.910 --> 00:11:53.579
we'll have taken that HTML button and converted
that into a GWT widget. Then we can continue

00:11:53.579 --> 00:11:58.680
to add additional event handlers too. And
now the dialogue box closes. So, it's a very

00:11:58.680 --> 00:12:04.649
quick way to iterate with designers in your
workflow and then also has a very nice separation

00:12:04.649 --> 00:12:09.680
between your presentation layer and your application
logic. Then the other thing that you've probably

00:12:09.680 --> 00:12:14.350
noticed is, when I was in eclipse that I used
a wizard to create the boilerplate template

00:12:14.350 --> 00:12:20.060
for me and the java file. I also had a co-completion
and error checking. So, as we're adding new

00:12:20.060 --> 00:12:25.170
features to Google Web toolkit, we're continuing
to increase the ID support to the Google plug

00:12:25.170 --> 00:12:32.279
in for eclipse. So, what it means in, in UI
binder for instance is that, if I have a widget

00:12:32.279 --> 00:12:38.790
mismatch or name mismatch between my Java
class and my UI.xml template, its going to

00:12:38.790 --> 00:12:44.100
flag that for me because remember, we're binding
this two together so, I get a little notice

00:12:44.100 --> 00:12:50.050
there, you can read it, it says it, has a
new corresponding field. Now, we've also done

00:12:50.050 --> 00:12:57.110
that for other features as well as we're adding,
quickly we go back to slides. And not just

00:12:57.110 --> 00:13:04.300
in UI binder obviously, many other things
for new features as well as existing things,

00:13:04.300 --> 00:13:09.350
so RPC re-factoring, Java script native interface,
we've added syntax highlighting for the Java

00:13:09.350 --> 00:13:13.440
script and re-factoring there. You can actually
re-factor native Java script methods that

00:13:13.440 --> 00:13:20.550
are inside your code. The other nice thing
is â€“ you noticed that I was in Chrome the

00:13:20.550 --> 00:13:25.279
entire time, yet I was editing the Java file
and the XML file. Well this is thanks to the

00:13:25.279 --> 00:13:30.329
Google web Toolkit developer plug in which
allows me to edit those Java and XML files

00:13:30.329 --> 00:13:35.560
and continue to work in the browser. But it's
not just Chrome that it works with, it's any

00:13:35.560 --> 00:13:40.220
browser, any of the major browsers that I
prefer so, if I want to work in Safari, if

00:13:40.220 --> 00:13:45.560
I want to work in Firefox, but I want to work
in IE, its going to work across all of these

00:13:45.560 --> 00:13:52.529
so I can debug and test across multiple browsers
again, using my same eclipse IE and using

00:13:52.529 --> 00:13:57.710
my same machine there. The other thing is
that, that obviously means I can use firebug,

00:13:57.710 --> 00:14:02.740
I can use inspector, I can use Chrome dev
tools, any of those tools that I'm used to.

00:14:02.740 --> 00:14:08.029
And one other, sort of side benefit of this
I can do it across the network too. So, if

00:14:08.029 --> 00:14:14.779
I have a problem in Safari that's on, let's
say the Mac next to me, and I want to debug

00:14:14.779 --> 00:14:19.750
that, I can stay on my Windows machine; let's
say I put DNC on here. Just go over, take

00:14:19.750 --> 00:14:24.509
that URL without using the Chrome, drop it
into Safari and then hit my eclipse development

00:14:24.509 --> 00:14:30.509
environment here stepping through the code
in machine that I used to. So, it's really,

00:14:30.509 --> 00:14:37.410
really nice way to iterate through the development
cycle. Now, so we're talking about these multiple

00:14:37.410 --> 00:14:45.709
browsers, these one code base multiple browsers.
But it's also not just the web apps in browsers,

00:14:45.709 --> 00:14:51.910
so basically anywhere that you have Java script
running, you can run a GWT application. So,

00:14:51.910 --> 00:14:55.930
let's say you're developing a Firefox extension
or Chrome extension, or something from word

00:14:55.930 --> 00:15:02.230
press, those can all be applications built
with Google web Toolkit as well. So, to show

00:15:02.230 --> 00:15:06.720
you that exact thing and someone who's doing
that, I'd like to invite out Matt Mastrache

00:15:06.720 --> 00:15:07.459
from dots box [ph].

