WEBVTT
Kind: captions
Language: en

00:00:00.440 --> 00:00:05.710
So, it sounds as though what you have is the system component is responsible for

00:00:07.450 --> 00:00:11.409
causing the input to be read in, causing it to be parsed into pieces

00:00:11.409 --> 00:00:15.940
getting storing those pieces into the line and

00:00:15.940 --> 00:00:19.650
word data structures, and organizing index.

00:00:19.650 --> 00:00:22.283
Okay? And then calling the circular ship to do his thing, and

00:00:22.283 --> 00:00:25.560
then ultimately calling the sorted view to do its thing.

00:00:25.560 --> 00:00:29.055
Now sometimes when you put a lot of responsibility for

00:00:29.055 --> 00:00:33.122
organizing steps and behavior and algorithms inside of one piece,

00:00:33.122 --> 00:00:36.590
you may want to break that piece into, into parts.

00:00:36.590 --> 00:00:40.095
So, this particular solution is similar to

00:00:40.095 --> 00:00:44.540
Parnas' approach which he called the Shared Data Decomposition.

00:00:45.565 --> 00:00:49.430
Well, we're the system into components based upon the functions they compute.

00:00:49.430 --> 00:00:54.540
And all components share access to the data, which is stored in, in, in memory.

00:00:54.540 --> 00:00:59.080
So you have a component several data structure components which are then

00:00:59.080 --> 00:01:02.750
accessible to the circular sorter and

00:01:02.750 --> 00:01:06.520
to the the circular shifter and, and to the sorter.

00:01:06.520 --> 00:01:11.930
And this solution solutions like this typically contain some form of

00:01:11.930 --> 00:01:16.350
what's called a master controller routine, which you have labeled as systems.

00:01:16.350 --> 00:01:21.660
And it's responsible for invoking the others and knowing what steps are,

00:01:21.660 --> 00:01:26.200
are in the process and that the typically in a situation like this,

00:01:26.200 --> 00:01:30.370
control flow dependencies, is, are organized or realized by function calls.

