WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.412
[APPLAUSE]

00:00:14.794 --> 00:00:15.960
TIM SNEATH: Thank you, guys.

00:00:15.960 --> 00:00:17.250
Welcome to DartConf.

00:00:17.250 --> 00:00:20.370
It's so good to
have you all here.

00:00:20.370 --> 00:00:23.370
My name is Tim Sneath
and I'm the Group Product

00:00:23.370 --> 00:00:26.820
Manager for Flutter and Dart.

00:00:26.820 --> 00:00:31.920
I've been only at Google
for about nine weeks so far,

00:00:31.920 --> 00:00:35.955
after joining from
Microsoft where I spent just

00:00:35.955 --> 00:00:38.350
under 20 years working on
different client technologies,

00:00:38.350 --> 00:00:44.685
including WPF, Silverlight,
Internet Explorer, and Windows.

00:00:47.370 --> 00:00:51.150
Honestly, I expected to be with
Microsoft for a good many years

00:00:51.150 --> 00:00:51.730
to come.

00:00:51.730 --> 00:00:55.860
But about six months ago,
I came across Flutter.

00:00:55.860 --> 00:00:58.424
And I kind of fell in love.

00:00:58.424 --> 00:01:00.090
So today I want to
tell you a little bit

00:01:00.090 --> 00:01:02.750
about what brought me here.

00:01:02.750 --> 00:01:04.500
So we're going to be
talking about out two

00:01:04.500 --> 00:01:07.200
primary technologies
this morning.

00:01:07.200 --> 00:01:08.820
Of course, one is Dart.

00:01:08.820 --> 00:01:10.650
This is, after all,
the Dart Conference.

00:01:10.650 --> 00:01:14.450
And Dart is a fast, powerful,
and productive language

00:01:14.450 --> 00:01:18.620
that is optimized for
client-side development.

00:01:18.620 --> 00:01:21.820
The other is Flutter,
which is a new mobile UI

00:01:21.820 --> 00:01:24.310
framework from
Google for crafting

00:01:24.310 --> 00:01:30.670
high-quality, native
experiences for iOS and Android.

00:01:30.670 --> 00:01:32.170
Over the last couple
of weeks, we've

00:01:32.170 --> 00:01:34.840
been iterating on our
vision to try and make sure

00:01:34.840 --> 00:01:37.822
that we fully convey the
opportunity that we see here.

00:01:37.822 --> 00:01:39.280
And here's what
we've come up with.

00:01:39.280 --> 00:01:43.270
We want to help developers craft
beautiful, native experiences

00:01:43.270 --> 00:01:46.900
across all screens with a
client-optimized language,

00:01:46.900 --> 00:01:50.140
rich, powerful frameworks,
and delightful and flexible

00:01:50.140 --> 00:01:51.540
tooling.

00:01:51.540 --> 00:01:54.820
And we believe we're at a
unique inflection point,

00:01:54.820 --> 00:01:57.820
at this time, in building mobile
application software, where

00:01:57.820 --> 00:02:00.700
the time is ripe for new
framework that combines

00:02:00.700 --> 00:02:04.090
all these attributes together.

00:02:04.090 --> 00:02:06.150
So I want to tell
you a story about one

00:02:06.150 --> 00:02:09.360
of the first companies to
build an application using

00:02:09.360 --> 00:02:12.360
this framework and
their experiences.

00:02:12.360 --> 00:02:14.580
In fact, instead of me
telling you the story,

00:02:14.580 --> 00:02:18.072
I want to show you
this short video.

00:02:18.072 --> 00:02:19.902
[VIDEO PLAYBACK]

00:02:19.902 --> 00:02:22.360
- "Hamilton" is one of the most
talked-about and best-loved

00:02:22.360 --> 00:02:25.360
musicals, with shows
on Broadway, in London,

00:02:25.360 --> 00:02:27.070
and around the country.

00:02:27.070 --> 00:02:28.870
We wanted something
to make the show more

00:02:28.870 --> 00:02:30.140
accessible for our fans.

00:02:30.140 --> 00:02:32.920
So we wanted to develop an
app to meet the needs of fans

00:02:32.920 --> 00:02:35.470
as we started to
expand the brand.

00:02:35.470 --> 00:02:37.870
We turned to Posse, a New
York based development firm,

00:02:37.870 --> 00:02:39.370
to help us develop
the Hamilton app.

00:02:39.370 --> 00:02:41.911
Hamilton's Flutter app launched
in the App Store and the Play

00:02:41.911 --> 00:02:44.750
Store three months after we
wrote our first line of code.

00:02:44.750 --> 00:02:45.970
And we accomplished a ton.

00:02:45.970 --> 00:02:48.610
Fans can enter a daily lottery
for a shot at $10 tickets,

00:02:48.610 --> 00:02:50.860
buy merchandise through
an e-commerce experience,

00:02:50.860 --> 00:02:52.490
take selfie photos
with the HamCam,

00:02:52.490 --> 00:02:54.040
and get daily news and updates.

00:02:54.040 --> 00:02:56.680
- We knew that this app needed
to be rock solid, both in terms

00:02:56.680 --> 00:02:58.750
of performance and
visual fidelity,

00:02:58.750 --> 00:03:01.840
and really represent the amazing
experience that the "Hamilton"

00:03:01.840 --> 00:03:03.280
show itself provides.

00:03:03.280 --> 00:03:06.280
And ultimately, that's why
we decided to use Flutter.

00:03:06.280 --> 00:03:08.980
- Flutter is a mobile UI
toolkit that allows developers

00:03:08.980 --> 00:03:10.780
and designers to
craft beautiful,

00:03:10.780 --> 00:03:14.860
native experiences on iOS and
Android and is entirely free

00:03:14.860 --> 00:03:15.760
and open-source.

00:03:15.760 --> 00:03:18.400
- We have very high expectations
of quality for the apps

00:03:18.400 --> 00:03:19.330
that we build.

00:03:19.330 --> 00:03:21.760
We expect pixel-perfect results.

00:03:21.760 --> 00:03:24.340
And we need them to be
very high-performance.

00:03:24.340 --> 00:03:27.070
Flutter gave us a lot of
opportunities that previously

00:03:27.070 --> 00:03:28.720
weren't available to us.

00:03:28.720 --> 00:03:30.310
The fact that it's
a single codebase

00:03:30.310 --> 00:03:32.120
drastically improved
our ability to deliver

00:03:32.120 --> 00:03:34.270
a consistent experience
across platforms.

00:03:34.270 --> 00:03:36.640
Its hot reload
gives us an ability

00:03:36.640 --> 00:03:38.810
to build more
features in less time.

00:03:38.810 --> 00:03:41.220
- It allowed me to make
changes really fast and iterate

00:03:41.220 --> 00:03:44.740
through the UI without having
to stop and restart the app.

00:03:44.740 --> 00:03:46.810
Coming from an iOS and
Android background,

00:03:46.810 --> 00:03:49.240
it's something that I've been
waiting for for a long time.

00:03:49.240 --> 00:03:51.280
The Flutter developer
community is very active.

00:03:51.280 --> 00:03:53.657
Drop-in packages helped
us maximize productivity.

00:03:53.657 --> 00:03:55.990
It helped us integrate elements
like Firebase and Cloud.

00:03:55.990 --> 00:03:57.100
- At the end of
the day, we're just

00:03:57.100 --> 00:03:58.390
really happy that
we found Flutter

00:03:58.390 --> 00:04:00.681
so that we can build these
beautiful, native interfaces

00:04:00.681 --> 00:04:03.006
for both iOS and Android
from a single codebase.

00:04:03.006 --> 00:04:04.630
- We were given a
really tight timeline

00:04:04.630 --> 00:04:06.588
and we turned the app
around faster than I ever

00:04:06.588 --> 00:04:07.557
could have imagined.

00:04:07.557 --> 00:04:09.640
We were able to make changes
right up to the night

00:04:09.640 --> 00:04:12.910
before we went live and really
feel confident about them.

00:04:12.910 --> 00:04:15.130
In fact, we pushed an
entirely new feature

00:04:15.130 --> 00:04:17.260
to the App Store the
day before we launched.

00:04:17.260 --> 00:04:19.434
- And since launch, Flutter's
efficiency and speed

00:04:19.434 --> 00:04:21.279
has helped us to
build new features,

00:04:21.279 --> 00:04:22.680
such as the recent trivia game.

00:04:22.680 --> 00:04:25.139
We're really excited because
as the show continues to grow,

00:04:25.139 --> 00:04:27.721
we're going to be able to keep
pace with a ton of new features

00:04:27.721 --> 00:04:29.597
that's going to make
the app even better.

00:04:29.597 --> 00:04:31.430
- We couldn't be more
thrilled with Flutter.

00:04:31.430 --> 00:04:34.900
It has enabled us to use one
codebase to deliver a truly

00:04:34.900 --> 00:04:37.630
high-quality app that
"Hamilton" fans have absolutely

00:04:37.630 --> 00:04:38.692
fallen in love with.

00:04:38.692 --> 00:04:40.900
- We're thrilled with what
Posse was able to deliver.

00:04:40.900 --> 00:04:42.640
The entire brand
of "Hamilton" is

00:04:42.640 --> 00:04:45.250
about delivering on an
experience for fans.

00:04:45.250 --> 00:04:46.900
They're thrilled
about the new features

00:04:46.900 --> 00:04:47.858
that we're rolling out.

00:04:47.858 --> 00:04:51.346
And we're really excited to
see where the app goes next.

00:04:51.346 --> 00:04:54.298
[END PLAYBACK]

00:04:54.298 --> 00:04:58.726
[APPLAUSE]

00:05:01.987 --> 00:05:02.820
TIM SNEATH: So cool!

00:05:02.820 --> 00:05:05.910
I got to hang out with
some of the team from Posse

00:05:05.910 --> 00:05:06.990
last week in New York.

00:05:06.990 --> 00:05:08.830
And it's amazing what
they've done there.

00:05:08.830 --> 00:05:10.950
I particularly love
the speed that they

00:05:10.950 --> 00:05:14.220
were able to start building
and get a great result

00:05:14.220 --> 00:05:15.930
on their Hamilton app.

00:05:15.930 --> 00:05:20.040
And the results are in
from the various stores.

00:05:20.040 --> 00:05:22.920
We've already seen a
million or more installs

00:05:22.920 --> 00:05:29.080
of the Hamilton app with over
450,000 monthly, active users.

00:05:29.080 --> 00:05:31.830
So it's been a really powerful
experience and a great example

00:05:31.830 --> 00:05:34.350
of how Dart and Flutter
come together to build

00:05:34.350 --> 00:05:37.800
great application experiences.

00:05:37.800 --> 00:05:40.029
OK, so let's break
it down a little.

00:05:40.029 --> 00:05:42.570
We're going to spend the next
little while talking about each

00:05:42.570 --> 00:05:44.700
of these three parts
and why we think,

00:05:44.700 --> 00:05:46.470
together, they
make this platform

00:05:46.470 --> 00:05:49.860
a compelling opportunity
for client developers.

00:05:49.860 --> 00:05:52.380
I'm going to start with
the language, which

00:05:52.380 --> 00:05:55.296
is, of course, Dart.

00:05:55.296 --> 00:05:59.800
So Dart is the backbone for
everything we're building.

00:05:59.800 --> 00:06:04.220
It's a stable, complete,
battle-tested language.

00:06:04.220 --> 00:06:05.910
This isn't an
architectural diagram,

00:06:05.910 --> 00:06:08.890
but Dart is more than just
a language, of course.

00:06:08.890 --> 00:06:10.482
It includes a set
of core libraries.

00:06:10.482 --> 00:06:13.530
It includes compilers,
transpilers.

00:06:13.530 --> 00:06:16.470
It's got runtime support for
advanced language capabilities

00:06:16.470 --> 00:06:19.530
like garbage collection,
as well as a rich ecosystem

00:06:19.530 --> 00:06:21.612
of tools and packages.

00:06:21.612 --> 00:06:25.380
And Dart started on the web
but we've evolved it over time

00:06:25.380 --> 00:06:27.000
to add mobile.

00:06:27.000 --> 00:06:30.300
And that's been our
direction moving forward.

00:06:30.300 --> 00:06:32.820
As we look across the
web, we're seeing evidence

00:06:32.820 --> 00:06:35.400
that Dart is starting
to become popular.

00:06:35.400 --> 00:06:40.320
We used Google BigQuery to do
a scan across the public GitHub

00:06:40.320 --> 00:06:43.650
corpus to see how
many lines of code

00:06:43.650 --> 00:06:45.379
there were out there with Dart.

00:06:45.379 --> 00:06:46.920
And we're already
seeing that there's

00:06:46.920 --> 00:06:50.315
over 70 million lines
of code out there.

00:06:50.315 --> 00:06:52.440
And you can see that over
the last couple of years,

00:06:52.440 --> 00:06:54.430
Dart is starting to take off.

00:06:54.430 --> 00:06:56.850
It's not a top-10
language yet, but as you

00:06:56.850 --> 00:06:59.520
can see from the shape
of this TIOBE index,

00:06:59.520 --> 00:07:04.260
Dart is really starting to climb
up the rankings or the ratings.

00:07:04.260 --> 00:07:07.520
OK, but there are lots
of languages out there.

00:07:07.520 --> 00:07:11.710
Why do we specifically
think Dart is a good one?

00:07:11.710 --> 00:07:14.952
Well, there are three
things in my mind.

00:07:14.952 --> 00:07:16.660
Firstly, as you saw
with the Hamilton app

00:07:16.660 --> 00:07:18.490
and as you'll see
again later, Flutter

00:07:18.490 --> 00:07:21.850
has this amazing capability
called hot reload which

00:07:21.850 --> 00:07:25.390
allows you to deploy an
application to your device

00:07:25.390 --> 00:07:27.430
and continue to change
it in profound ways

00:07:27.430 --> 00:07:29.460
while it's still running.

00:07:29.460 --> 00:07:34.510
And hot reload let's you quickly
iterate on your UI design.

00:07:34.510 --> 00:07:36.760
You can make changes
to your application

00:07:36.760 --> 00:07:40.210
and continue immediately to see
the results of those changes

00:07:40.210 --> 00:07:42.640
whilst the application
keeps running.

00:07:42.640 --> 00:07:44.540
And that doesn't just happen.

00:07:44.540 --> 00:07:46.720
It's powered by Dart.

00:07:46.720 --> 00:07:48.730
Dart provides a JIT compiler.

00:07:48.730 --> 00:07:51.550
And it provides the support
and integration with Flutter

00:07:51.550 --> 00:07:54.070
at runtime for changing
code and keeping

00:07:54.070 --> 00:07:57.400
the state alive as
the new pieces of code

00:07:57.400 --> 00:08:01.300
are deployed into the VM.

00:08:01.300 --> 00:08:05.470
Secondly, Dart is near
unique in having a number

00:08:05.470 --> 00:08:07.660
of different outputs for it.

00:08:07.660 --> 00:08:10.810
Dart is designed
around the ability

00:08:10.810 --> 00:08:13.840
to support mobile
and web applications.

00:08:13.840 --> 00:08:16.960
If you're building a mobile
application as a developer,

00:08:16.960 --> 00:08:19.000
we have a JIT compiler
that gives you

00:08:19.000 --> 00:08:21.550
the great developer support
for things like hot reload.

00:08:21.550 --> 00:08:24.700
But we also have native,
ahead-of-time compilation

00:08:24.700 --> 00:08:27.460
to machine code, whether
it's ARM or something else,

00:08:27.460 --> 00:08:31.630
so that you can achieve
that native performance

00:08:31.630 --> 00:08:34.033
on your released product.

00:08:34.033 --> 00:08:36.574
Similarly, if you're building
a web app, we have transpilers.

00:08:36.574 --> 00:08:38.157
And we have a couple
of those as well.

00:08:38.157 --> 00:08:41.650
We have one that is designed for
development purposes that has

00:08:41.650 --> 00:08:43.589
lightning-speed compilation.

00:08:43.589 --> 00:08:45.130
And we also have
one that is designed

00:08:45.130 --> 00:08:50.030
for highly-scalable,
production-quality code.

00:08:50.030 --> 00:08:58.100
Thirdly, the fact that Dart
can reconstruct the environment

00:08:58.100 --> 00:09:00.920
quickly relies on
the memory management

00:09:00.920 --> 00:09:03.320
of Dart, a garbage
collector that

00:09:03.320 --> 00:09:05.810
is designed around the
client, making allocating

00:09:05.810 --> 00:09:09.800
new objects fast and making
short-lived objects very

00:09:09.800 --> 00:09:11.342
cheap to manage.

00:09:11.342 --> 00:09:12.800
And this is again
an example of how

00:09:12.800 --> 00:09:16.160
the partnership of Flutter and
Dart pays off well together.

00:09:16.160 --> 00:09:18.644
We worked to have the engine
and the garbage collector

00:09:18.644 --> 00:09:20.810
talk to each other so that
garbage collection occurs

00:09:20.810 --> 00:09:23.740
during idle times.

00:09:23.740 --> 00:09:26.380
And finally, Dart puts
all of these pieces

00:09:26.380 --> 00:09:29.110
together in a single language.

00:09:29.110 --> 00:09:30.410
It's an open standard.

00:09:30.410 --> 00:09:32.290
It's published by Ecma.

00:09:32.290 --> 00:09:35.020
It's the same body that
standardizes JavaScript.

00:09:35.020 --> 00:09:36.550
Everything's open-source.

00:09:36.550 --> 00:09:38.020
It's all published on GitHub.

00:09:38.020 --> 00:09:42.680
It's open to inspection and
open to your contributions.

00:09:42.680 --> 00:09:46.990
So we mentioned those 70
million lines of code on GitHub.

00:09:46.990 --> 00:09:49.120
But how is Google using Dart?

00:09:49.120 --> 00:09:52.076
Well, I'd like to invite Kevin
Moore, who is a fellow product

00:09:52.076 --> 00:09:53.950
manager on the Dart
team, to come up and talk

00:09:53.950 --> 00:09:55.180
a little bit about that.

00:09:55.180 --> 00:09:56.962
Kevin.

00:09:56.962 --> 00:09:57.897
[APPLAUSE]

00:09:57.897 --> 00:09:58.938
KEVIN MOORE: Thanks, Tim.

00:10:01.866 --> 00:10:03.740
So a lot of people have
come to Dart recently

00:10:03.740 --> 00:10:04.850
because of Flutter.

00:10:04.850 --> 00:10:06.950
I'd like to say that
this is not a comeback.

00:10:06.950 --> 00:10:10.250
We've been here for years,
actually, over five years

00:10:10.250 --> 00:10:12.804
we've been using Dart at Google
primarily on the web side.

00:10:12.804 --> 00:10:14.720
And as Tim talked about,
a lot of the features

00:10:14.720 --> 00:10:16.550
that make Dart so
powerful are the fact

00:10:16.550 --> 00:10:18.530
that we can do language
work and library

00:10:18.530 --> 00:10:21.634
work that works great and
builds high-performance,

00:10:21.634 --> 00:10:23.300
mission-critical
applications on the web

00:10:23.300 --> 00:10:24.809
and on mobile with
no compromises.

00:10:24.809 --> 00:10:27.350
A lot of solutions that exist
today that say they can let you

00:10:27.350 --> 00:10:28.130
do both.

00:10:28.130 --> 00:10:30.470
You really have to do
some tweaking and fighting

00:10:30.470 --> 00:10:31.910
to get it working everywhere.

00:10:31.910 --> 00:10:34.100
And Dart really nails it.

00:10:34.100 --> 00:10:36.770
As Tim mentioned,
we're designed to be

00:10:36.770 --> 00:10:39.530
cross-compiled to compile the
really efficient JavaScript.

00:10:39.530 --> 00:10:42.920
And we have Dart,
with its type system,

00:10:42.920 --> 00:10:45.140
with its strong language
features, allows us to build

00:10:45.140 --> 00:10:47.990
giant frameworks, frameworks
that allow us to build things

00:10:47.990 --> 00:10:49.280
like AdWords.

00:10:49.280 --> 00:10:53.300
So a lot of people aren't
familiar with what AdWords is.

00:10:53.300 --> 00:10:55.466
Has anyone here
actually used AdWords?

00:10:55.466 --> 00:10:56.590
Oh, there are a few people.

00:10:56.590 --> 00:10:57.070
That's good.

00:10:57.070 --> 00:10:58.444
Usually in the
engineering crowd,

00:10:58.444 --> 00:10:59.770
there aren't a lot of folks.

00:10:59.770 --> 00:11:01.656
You've certainly seen
the output of AdWords.

00:11:01.656 --> 00:11:03.280
If you ever do a
Google Search, and I'm

00:11:03.280 --> 00:11:05.206
guessing a few people
in the room have,

00:11:05.206 --> 00:11:06.580
if you see an ad
on Google Search

00:11:06.580 --> 00:11:08.860
or even a text ad in
YouTube or Google Shopping,

00:11:08.860 --> 00:11:11.470
it was probably
bought via AdWords.

00:11:11.470 --> 00:11:15.190
AdWords was completely rewritten
in the last few years with Dart

00:11:15.190 --> 00:11:18.640
and our framework AngularDart,
again, all open-source.

00:11:18.640 --> 00:11:21.340
And it's really
tough to emphasize

00:11:21.340 --> 00:11:22.329
how big a deal this is.

00:11:22.329 --> 00:11:24.620
I talked to one of our vice
presidents before the talk.

00:11:24.620 --> 00:11:26.110
I was like, can I talk
about how many lines of code

00:11:26.110 --> 00:11:27.452
we have in Dart and Google?

00:11:27.452 --> 00:11:29.660
And he's like, well, we
really can't talk about that.

00:11:29.660 --> 00:11:32.320
And I was like, can we talk
about how many engineers

00:11:32.320 --> 00:11:34.980
we have working with our
web tools inside Google?

00:11:34.980 --> 00:11:35.770
And he's like, ah,
we really can't

00:11:35.770 --> 00:11:37.340
talk about that,
which really taught me

00:11:37.340 --> 00:11:39.631
an important thing, which is
always ask for forgiveness

00:11:39.631 --> 00:11:42.130
instead of permission.

00:11:42.130 --> 00:11:44.410
But what I did ask is like,
well, can I show a demo

00:11:44.410 --> 00:11:46.170
and talk about how
much money it makes?

00:11:46.170 --> 00:11:47.960
And he's like, well,
that's all public.

00:11:47.960 --> 00:11:49.295
I was like, oh, perfect.

00:11:49.295 --> 00:11:51.670
So all you have to do is go
look at a quarterly statement

00:11:51.670 --> 00:11:54.200
from Google to see how much
money we make on ad revenue.

00:11:54.200 --> 00:11:57.670
It's not a small part
of the Google business.

00:11:57.670 --> 00:12:00.070
It's all primarily
driven by AdWords.

00:12:00.070 --> 00:12:02.530
So I was trying to
think of the superlative

00:12:02.530 --> 00:12:04.005
to describe the requirements.

00:12:04.005 --> 00:12:06.130
And I think "intimidating"
was the word I landed on

00:12:06.130 --> 00:12:07.840
that I liked the most.

00:12:07.840 --> 00:12:12.024
This team has to build an app
that has to be rock solid.

00:12:12.024 --> 00:12:13.690
Anyone here that has
an application that

00:12:13.690 --> 00:12:16.430
takes credit cards, you
realize any minute of downtime

00:12:16.430 --> 00:12:17.570
is lost revenue.

00:12:17.570 --> 00:12:19.150
So it has to be stable.

00:12:19.150 --> 00:12:20.042
It has to be fast.

00:12:20.042 --> 00:12:21.625
People expect this
kind of experience,

00:12:21.625 --> 00:12:24.430
this rich experience, to feel
like a native application,

00:12:24.430 --> 00:12:26.020
like a desktop application.

00:12:26.020 --> 00:12:28.930
Remember having
to install those?

00:12:28.930 --> 00:12:30.400
And it has to iterate quickly.

00:12:30.400 --> 00:12:32.530
This is still a very
competitive business.

00:12:32.530 --> 00:12:34.510
The people that buy
ads expect new features

00:12:34.510 --> 00:12:36.040
to be rolled out continually.

00:12:36.040 --> 00:12:38.980
And so the engineers have to
be able to move really quickly.

00:12:38.980 --> 00:12:41.800
And what was great is, because
of Dart's flexibility, its type

00:12:41.800 --> 00:12:44.644
system, its core
libraries, it not only

00:12:44.644 --> 00:12:46.060
enabled us to build
the frameworks

00:12:46.060 --> 00:12:47.799
that we use to
drive these tools,

00:12:47.799 --> 00:12:49.840
but allowed us to build
a compelling application.

00:12:49.840 --> 00:12:52.110
So without showing you how
to buy an ad on AdWords,

00:12:52.110 --> 00:12:54.276
I at least want to show you
the application we have.

00:13:01.680 --> 00:13:03.780
If we can switch to
the demo, please.

00:13:03.780 --> 00:13:05.430
This is AdWords.

00:13:05.430 --> 00:13:06.222
Exciting.

00:13:06.222 --> 00:13:08.430
The first thing I want to
do, and it's kind of silly,

00:13:08.430 --> 00:13:12.000
I'm going to do the
Shift-Command-R trick just

00:13:12.000 --> 00:13:15.184
to show how fast loading
the application is.

00:13:15.184 --> 00:13:16.350
This is a giant application.

00:13:16.350 --> 00:13:19.350
I don't know if people
have reloaded Gmail before,

00:13:19.350 --> 00:13:22.320
but for the size and scale
of what this accomplishes

00:13:22.320 --> 00:13:25.020
because we have a very smart
compiler that knows how

00:13:25.020 --> 00:13:27.300
to tree shake and do lots
of other clever things,

00:13:27.300 --> 00:13:29.430
we actually generate
relatively small binaries

00:13:29.430 --> 00:13:31.780
for large applications.

00:13:31.780 --> 00:13:34.690
Secondly, I just want to show
some of the richness of this.

00:13:34.690 --> 00:13:36.100
Even things like a button click.

00:13:36.100 --> 00:13:38.930
I could just do this for hours.

00:13:38.930 --> 00:13:40.840
Like the subtle
material animations,

00:13:40.840 --> 00:13:42.982
you notice the load animations.

00:13:42.982 --> 00:13:44.440
This application
is actually broken

00:13:44.440 --> 00:13:45.920
into several small parts.

00:13:45.920 --> 00:13:48.310
And we delay load them
as you click around.

00:13:48.310 --> 00:13:50.530
This allows our initial
load time to be very small.

00:13:50.530 --> 00:13:52.890
It allows us to segment the
application up logically.

00:13:52.890 --> 00:13:54.640
And again, this is one
of the things where

00:13:54.640 --> 00:13:56.920
having a strong type
system and being

00:13:56.920 --> 00:13:59.350
able to rely on things
like static analysis

00:13:59.350 --> 00:14:00.400
are really important.

00:14:00.400 --> 00:14:02.800
It allows our engineers
to build multiple segments

00:14:02.800 --> 00:14:05.180
of a huge application
and have high confidence

00:14:05.180 --> 00:14:07.180
that when you deploy, it
all glues together well

00:14:07.180 --> 00:14:08.690
and the messages send well.

00:14:08.690 --> 00:14:12.710
So things like slide-out
animations, really big lists--

00:14:15.780 --> 00:14:17.030
wait for the delay load here--

00:14:22.200 --> 00:14:23.910
all work really fast.

00:14:23.910 --> 00:14:25.410
And this is 100%
written in Dart.

00:14:28.050 --> 00:14:30.300
So if I want to target my
AngularDart ad at my father,

00:14:30.300 --> 00:14:34.390
I can go in here very easily
and make sure he sees it.

00:14:34.390 --> 00:14:37.480
And even silly things
like the calendar control.

00:14:37.480 --> 00:14:40.300
If you look at just the
mouse-over behaviors,

00:14:40.300 --> 00:14:43.264
we show the highlight, the
ability to drag and drop.

00:14:43.264 --> 00:14:44.680
Tim and I both
spent a lot of time

00:14:44.680 --> 00:14:48.070
working on desktop
frameworks where

00:14:48.070 --> 00:14:50.500
we had complete control of the
operating system and the OS

00:14:50.500 --> 00:14:51.250
stack.

00:14:51.250 --> 00:14:52.990
And accomplishing
these kinds of effects

00:14:52.990 --> 00:14:55.172
and this kind of speed
was really difficult.

00:14:55.172 --> 00:14:57.130
And it's so exciting to
work on a platform that

00:14:57.130 --> 00:15:00.370
enables delivering these type
of applications to the open web.

00:15:00.370 --> 00:15:01.690
And that's what Dart let us do.

00:15:01.690 --> 00:15:05.120
Back to slides please.

00:15:05.120 --> 00:15:08.180
So speaking of superlatives,
we talked to Manish

00:15:08.180 --> 00:15:11.390
about just the experience of
deploying AdWords with Dart

00:15:11.390 --> 00:15:14.780
and, again, how critical it
was to Google's revenue, how

00:15:14.780 --> 00:15:17.810
the shape of the language, the
libraries, the tooling we have,

00:15:17.810 --> 00:15:20.660
really offered an amazingly
productive experience

00:15:20.660 --> 00:15:22.700
for the engineers.

00:15:22.700 --> 00:15:25.815
And given what they
came from, it's

00:15:25.815 --> 00:15:27.440
a very validating
thing to be a product

00:15:27.440 --> 00:15:29.481
manager on because they've
just been so delighted

00:15:29.481 --> 00:15:30.650
in their productivity.

00:15:30.650 --> 00:15:33.090
And, of course, when you have
very productive engineers

00:15:33.090 --> 00:15:34.760
in such a critical
business, that really

00:15:34.760 --> 00:15:37.220
maps to increased revenue.

00:15:37.220 --> 00:15:39.808
TIM SNEATH: Thank you, Kevin.

00:15:39.808 --> 00:15:44.755
[APPLAUSE]

00:15:44.755 --> 00:15:46.740
AdWords is such a
great example of how

00:15:46.740 --> 00:15:50.060
Dart, coupled with the web
framework that Dart provides,

00:15:50.060 --> 00:15:52.100
enables you to build
these highly-scalable,

00:15:52.100 --> 00:15:55.130
fast-performance experiences.

00:15:55.130 --> 00:15:58.220
So Dart 1 was good.

00:15:58.220 --> 00:16:02.055
But we listened to you, people
in our community, people

00:16:02.055 --> 00:16:04.790
on GitHub and other
places and you

00:16:04.790 --> 00:16:06.290
told us a couple
of things about how

00:16:06.290 --> 00:16:08.390
you were using Dart
and some innovations

00:16:08.390 --> 00:16:10.310
you'd like to see
in the language.

00:16:10.310 --> 00:16:13.040
In particular, you told us that
optional types are sometimes

00:16:13.040 --> 00:16:14.390
hard to use.

00:16:14.390 --> 00:16:17.030
You told us that as you write
more and more code in Dart,

00:16:17.030 --> 00:16:19.820
you'd like us to help
you, as a language,

00:16:19.820 --> 00:16:23.340
reduce the amount of
boilerplate code in your code.

00:16:23.340 --> 00:16:26.300
And then thirdly, you said you'd
like us to just iterate faster

00:16:26.300 --> 00:16:29.600
with the language, to build
new innovations or new language

00:16:29.600 --> 00:16:31.940
features into the language.

00:16:31.940 --> 00:16:36.420
So today I'm delighted
to formally announce

00:16:36.420 --> 00:16:38.680
Dart 2, which is--

00:16:38.680 --> 00:16:44.158
[APPLAUSE]

00:16:46.660 --> 00:16:51.080
Dart 2 is a reboot of Dart
as a language optimized

00:16:51.080 --> 00:16:53.900
for client development.

00:16:53.900 --> 00:16:56.490
Dart 2 is mainly
about three things--

00:16:56.490 --> 00:17:01.190
Firstly, strong mode; secondly,
some new language features;

00:17:01.190 --> 00:17:04.339
and thirdly, a common front-end.

00:17:04.339 --> 00:17:07.700
Let's talk about each
of these in turn.

00:17:07.700 --> 00:17:09.680
Firstly, strong mode.

00:17:09.680 --> 00:17:11.810
So when the team
first designed Dart,

00:17:11.810 --> 00:17:15.319
they were inspired by the
dynamic, loose, typing model

00:17:15.319 --> 00:17:16.069
of the web.

00:17:16.069 --> 00:17:17.690
It seemed great.

00:17:17.690 --> 00:17:21.650
But as we scaled up Dart 1 to
extremely large applications,

00:17:21.650 --> 00:17:23.839
we found that
stronger typing really

00:17:23.839 --> 00:17:25.854
helped us to detect errors.

00:17:25.854 --> 00:17:28.020
And, of course, this is
becoming a trend on the web,

00:17:28.020 --> 00:17:30.440
as well, as you can see
from the rise of languages

00:17:30.440 --> 00:17:32.420
like TypeScript.

00:17:32.420 --> 00:17:35.780
So here's an example of how
insidious errors can sometimes

00:17:35.780 --> 00:17:39.050
creep into your code with
a weaker type system.

00:17:39.050 --> 00:17:42.410
This is a simplified
example of an actual bug

00:17:42.410 --> 00:17:44.750
we found in our AdWords code.

00:17:44.750 --> 00:17:46.560
You can see here that
there's some code.

00:17:46.560 --> 00:17:50.210
It's taking some prices,
trying to sort them, and return

00:17:50.210 --> 00:17:52.100
the lowest price.

00:17:52.100 --> 00:17:54.470
Any guesses as to what the
price reported will be?

00:17:58.312 --> 00:18:00.020
I'm hearing a few
different answers here.

00:18:00.020 --> 00:18:02.790
Some expert Dart engineers
have already figured this out.

00:18:02.790 --> 00:18:05.100
Maybe they're the
people on the Dart team.

00:18:05.100 --> 00:18:08.010
Yeah, the answer is 10,000.

00:18:08.010 --> 00:18:12.870
And that's because of the way
that the strings are converted.

00:18:12.870 --> 00:18:15.140
When the initialization
takes place,

00:18:15.140 --> 00:18:20.190
it essentially converts
price into a dynamic list.

00:18:20.190 --> 00:18:23.110
So strong mode
enforces type checking.

00:18:23.110 --> 00:18:25.110
And it means you can never
get into such a state

00:18:25.110 --> 00:18:28.470
where an expression evaluates
to a value that doesn't match

00:18:28.470 --> 00:18:30.390
the expression's static type.

00:18:30.390 --> 00:18:32.490
So with strong mode we
get better error messages

00:18:32.490 --> 00:18:35.620
earlier so issues like this
are caught immediately.

00:18:35.620 --> 00:18:37.820
And so you see here,
this is DartPad

00:18:37.820 --> 00:18:39.150
with strong mode turned on.

00:18:39.150 --> 00:18:41.400
And you immediately
see that there's

00:18:41.400 --> 00:18:43.290
a squiggly line
underneath warning you

00:18:43.290 --> 00:18:44.650
that there's an error.

00:18:44.650 --> 00:18:47.100
So strong mode, we
think, is a good step

00:18:47.100 --> 00:18:48.600
forward for Dart as a language.

00:18:48.600 --> 00:18:51.660
It will help with these
broader, big, production-quality

00:18:51.660 --> 00:18:53.700
applications.

00:18:53.700 --> 00:18:56.250
Secondly, new language features.

00:18:56.250 --> 00:18:58.620
I mentioned that we're
evolving and rebooting Dart

00:18:58.620 --> 00:19:00.490
to be optimized for the client.

00:19:00.490 --> 00:19:02.490
And here's a great example
of how we can reduce

00:19:02.490 --> 00:19:04.230
the amount of boilerplates.

00:19:04.230 --> 00:19:07.920
So this is a bit of Flutter
code to build a widget.

00:19:07.920 --> 00:19:11.130
And, as you may know,
Flutter uses Dart to actually

00:19:11.130 --> 00:19:13.279
create and instantiate the UI.

00:19:13.279 --> 00:19:14.820
And this is an
interesting challenge.

00:19:14.820 --> 00:19:16.290
A lot of languages
try and create

00:19:16.290 --> 00:19:19.870
a separate markup language
for the UI declaration

00:19:19.870 --> 00:19:23.970
because the language itself is
not really designed around UI.

00:19:23.970 --> 00:19:26.520
And with Dart, we think we're
onto something here where

00:19:26.520 --> 00:19:29.700
the UI can be expressed
in the same code file

00:19:29.700 --> 00:19:33.630
as the rest of your logic,
the model, the view controller

00:19:33.630 --> 00:19:35.919
all appearing in the same place.

00:19:35.919 --> 00:19:37.460
The problem with
this is that there's

00:19:37.460 --> 00:19:39.840
a little too much language
ceremony associated

00:19:39.840 --> 00:19:41.400
with the declarations here.

00:19:41.400 --> 00:19:42.870
And it gets in the
way of that UI.

00:19:42.870 --> 00:19:45.720
In particular, there's
a lot of new and const

00:19:45.720 --> 00:19:47.234
to the boilerplate.

00:19:47.234 --> 00:19:48.150
You can't miss it out.

00:19:48.150 --> 00:19:49.608
And it can actually
cause confusion

00:19:49.608 --> 00:19:51.875
if you suddenly forget
to put in a const

00:19:51.875 --> 00:19:55.620
and suddenly all the
extra, intelligent help

00:19:55.620 --> 00:19:58.480
from the editor
sort of disappears.

00:19:58.480 --> 00:20:00.900
So wouldn't it be great if
we could get rid of that

00:20:00.900 --> 00:20:03.660
and just focus on
building the UI?

00:20:03.660 --> 00:20:07.370
So with this specific
new language feature,

00:20:07.370 --> 00:20:09.660
we've made new and
const optional.

00:20:09.660 --> 00:20:12.870
And so now you can write
something like this in Dart 2,

00:20:12.870 --> 00:20:16.560
where there's not actually
a single Dart keyword

00:20:16.560 --> 00:20:23.040
involved in the
declaration of your widget.

00:20:23.040 --> 00:20:24.070
Pretty cool, huh?

00:20:28.780 --> 00:20:31.190
And following this,
we are looking

00:20:31.190 --> 00:20:33.860
at how we can make the
UI-as-code experience even

00:20:33.860 --> 00:20:37.520
better with future releases
and iterations of the Dart

00:20:37.520 --> 00:20:38.209
language.

00:20:38.209 --> 00:20:40.250
And Leaf is going to be
talking a little bit more

00:20:40.250 --> 00:20:42.260
about language features
after this keynote.

00:20:42.260 --> 00:20:45.260
So you'll hear some
other examples.

00:20:45.260 --> 00:20:49.130
The third thing in Dart
2 is the introduction

00:20:49.130 --> 00:20:51.260
of a common front-end.

00:20:51.260 --> 00:20:52.910
Now, lots of tools
and compilers are

00:20:52.910 --> 00:20:56.690
out there already that allow
us to handle Dart code.

00:20:56.690 --> 00:20:59.420
Today, most of them are
built independently,

00:20:59.420 --> 00:21:01.690
which basically allows
different teams to work fast

00:21:01.690 --> 00:21:03.140
and to iterate quickly.

00:21:03.140 --> 00:21:06.650
But many of the tasks that
each of these different items

00:21:06.650 --> 00:21:09.560
needs to perform
are actually common.

00:21:09.560 --> 00:21:11.660
And so that means
there's lots of rework,

00:21:11.660 --> 00:21:13.880
lots of these tools
doing the same things.

00:21:13.880 --> 00:21:16.587
And worst, there's a
risk of inconsistency

00:21:16.587 --> 00:21:18.170
if there are subtle
differences in how

00:21:18.170 --> 00:21:21.230
they handle the Dart language.

00:21:21.230 --> 00:21:23.680
So with Dart 2,
we're introducing

00:21:23.680 --> 00:21:26.930
a new common front-end
to our tooling.

00:21:26.930 --> 00:21:29.960
And this front-end, of course,
analyzes the source code

00:21:29.960 --> 00:21:32.520
to build an internal
representation of the program.

00:21:32.520 --> 00:21:35.630
It manages the symbol tables
and those kinds of things.

00:21:35.630 --> 00:21:39.560
And the benefit of that is
that we get more consistency

00:21:39.560 --> 00:21:41.300
across these individual pieces.

00:21:41.300 --> 00:21:43.370
It means we can move
faster with the language

00:21:43.370 --> 00:21:44.390
by adding new features.

00:21:44.390 --> 00:21:46.790
And in some cases,
those changes don't even

00:21:46.790 --> 00:21:48.800
require back-end changes.

00:21:48.800 --> 00:21:50.750
Also, it enables
us, it positions us

00:21:50.750 --> 00:21:53.930
well for the future
to make improvements

00:21:53.930 --> 00:21:57.080
to the client side
that might actually

00:21:57.080 --> 00:21:58.310
take advantage of this.

00:21:58.310 --> 00:22:00.350
For example, a new
tool like the one

00:22:00.350 --> 00:22:04.750
we introduced last week that
lets you inspect widgets.

00:22:04.750 --> 00:22:09.340
So to recap, strong mode,
new language features,

00:22:09.340 --> 00:22:11.110
a common front-end.

00:22:11.110 --> 00:22:14.590
We just, in this last week,
flipped the Dart 2 switch

00:22:14.590 --> 00:22:15.595
for Flutter.

00:22:15.595 --> 00:22:17.470
And we're now working
on the remaining issues

00:22:17.470 --> 00:22:19.600
to get ready to swap
in the new front-end.

00:22:19.600 --> 00:22:22.300
So we'll have full strong mode
and the new language features

00:22:22.300 --> 00:22:24.980
available.

00:22:24.980 --> 00:22:27.660
OK, so that's Dart.

00:22:27.660 --> 00:22:30.630
Let's move up the
stack a little.

00:22:30.630 --> 00:22:34.130
And I want to talk
now about Flutter.

00:22:34.130 --> 00:22:36.780
Dart has built some
amazing things.

00:22:36.780 --> 00:22:38.850
And, really, it's Flutter,
in many ways, that

00:22:38.850 --> 00:22:42.020
was one of the first to
actually find the Dart language

00:22:42.020 --> 00:22:47.970
and realize its vision and
to build on the innovations

00:22:47.970 --> 00:22:50.450
that Dart introduces.

00:22:50.450 --> 00:22:52.910
So in some ways, while Dart
is like the high performance

00:22:52.910 --> 00:22:55.370
gasoline that powers
the car, Flutter

00:22:55.370 --> 00:22:59.920
is the engine that helps
take it forward at speed.

00:22:59.920 --> 00:23:04.010
And here is the problem we're
trying to solve with Flutter.

00:23:04.010 --> 00:23:07.130
A lot of people are trying to
build mobile apps right now.

00:23:07.130 --> 00:23:08.912
And with multiple
popular platforms

00:23:08.912 --> 00:23:10.870
for building mobile apps,
historically, there's

00:23:10.870 --> 00:23:14.350
been two different
approaches to solving this.

00:23:14.350 --> 00:23:16.360
On the one hand,
many people choose

00:23:16.360 --> 00:23:19.160
to build for a single
platform at once.

00:23:19.160 --> 00:23:21.160
They'll have a team that's
dedicated to building

00:23:21.160 --> 00:23:24.690
an iOS application or
an Android application.

00:23:24.690 --> 00:23:26.020
And that has many benefits.

00:23:26.020 --> 00:23:27.436
Of course, you can
build something

00:23:27.436 --> 00:23:30.559
that is really native to
the underlying platform.

00:23:30.559 --> 00:23:31.725
But there's also a downside.

00:23:31.725 --> 00:23:33.970
You have to have two
separate codebases.

00:23:33.970 --> 00:23:36.970
Sometimes teams [INAUDIBLE] have
literally two separate teams

00:23:36.970 --> 00:23:39.760
that struggle to connect
together and talk together

00:23:39.760 --> 00:23:42.550
and share designs, et cetera.

00:23:42.550 --> 00:23:45.970
The alternative approach
that a lot of companies use

00:23:45.970 --> 00:23:49.060
is to look at various
cross-platform frameworks that

00:23:49.060 --> 00:23:50.820
are becoming increasingly
popular as a way

00:23:50.820 --> 00:23:55.060
to use one codebase to target
both platforms at once.

00:23:55.060 --> 00:23:57.010
On the plus side, that
means one codebase.

00:23:57.010 --> 00:23:59.540
So you can execute
and iterate quickly.

00:23:59.540 --> 00:24:01.210
The problem is that
they often trade

00:24:01.210 --> 00:24:04.860
performance or native experience
for that single codebase.

00:24:04.860 --> 00:24:06.860
For example, they might
be built with JavaScript

00:24:06.860 --> 00:24:09.730
as their language and
interpreted at runtime.

00:24:09.730 --> 00:24:11.410
Or they just don't
feel native because

00:24:11.410 --> 00:24:15.130
of the lowest common denominator
approach to the widgets.

00:24:15.130 --> 00:24:18.160
And that's where
Flutter comes in.

00:24:18.160 --> 00:24:21.520
Flutter makes it easy
and fast to build

00:24:21.520 --> 00:24:25.710
beautiful, native, mobile apps.

00:24:25.710 --> 00:24:28.120
Flutter is the best
of both worlds.

00:24:28.120 --> 00:24:30.386
It's fast and it's native.

00:24:30.386 --> 00:24:32.010
You have a single
codebase, and yet you

00:24:32.010 --> 00:24:35.100
can still take full advantage
of the underlying operating

00:24:35.100 --> 00:24:36.790
system.

00:24:36.790 --> 00:24:39.760
And Flutter is powered by some
great code and engineering

00:24:39.760 --> 00:24:41.680
that we've taken
from other places.

00:24:41.680 --> 00:24:44.620
The Skia graphics stack,
a fast and powerful

00:24:44.620 --> 00:24:49.260
text-rendering engine, and,
of course, the Dart language.

00:24:49.260 --> 00:24:51.310
Flutter is a reactive framework.

00:24:51.310 --> 00:24:54.570
It has a deep notion of states
that flows through the system.

00:24:54.570 --> 00:24:56.970
So it's always clear
what needs updating.

00:24:56.970 --> 00:24:59.820
And we only need to repaint
the widgets that need it.

00:24:59.820 --> 00:25:01.740
And it being native
means that you can access

00:25:01.740 --> 00:25:04.620
always the underlying APIs.

00:25:04.620 --> 00:25:08.010
You can still write parts of
your app in Kotlin or Java

00:25:08.010 --> 00:25:10.170
or Swift or
ObjectiveC or leverage

00:25:10.170 --> 00:25:14.960
other's work with packages
to make that happen as well.

00:25:14.960 --> 00:25:20.247
I love this little quote here
that is from "Hacker News."

00:25:20.247 --> 00:25:21.830
It feels like the
kind of thing that I

00:25:21.830 --> 00:25:24.560
would have written myself, "it
feels like a futuristic version

00:25:24.560 --> 00:25:26.330
of the Android SDK."

00:25:26.330 --> 00:25:29.720
But rather than me sort of just
share somebody else's quote,

00:25:29.720 --> 00:25:35.480
I'd like to invite on to stage
Jere and Tero from Hookle

00:25:35.480 --> 00:25:38.030
who are one company who've
built a Flutter app that

00:25:38.030 --> 00:25:43.760
is launching today in beta
for Android and for iOS.

00:25:43.760 --> 00:25:45.000
Hey guys, are you doing?

00:25:45.000 --> 00:25:45.290
TERO SEPPALA: Fine.

00:25:45.290 --> 00:25:45.710
Hi, Tim.

00:25:45.710 --> 00:25:46.130
Thanks.

00:25:46.130 --> 00:25:46.550
JERE SEPPALA: Hi, Tim.

00:25:46.550 --> 00:25:47.376
TIM SNEATH: Good to see you.

00:25:47.376 --> 00:25:48.626
JERE SEPPALA: Nice to be here.

00:25:51.011 --> 00:25:52.510
TIM SNEATH: So tell
me a little bit,

00:25:52.510 --> 00:25:54.360
firstly, tell me what is Hookle.

00:25:54.360 --> 00:25:56.820
TERO SEPPALA: Well,
Hookle is a young startup

00:25:56.820 --> 00:26:02.130
and we have been less
than five months before,

00:26:02.130 --> 00:26:03.445
less than five months in here.

00:26:03.445 --> 00:26:03.920
TIM SNEATH: Uh-huh.

00:26:03.920 --> 00:26:04.440
TERO SEPPALA: Yeah.

00:26:04.440 --> 00:26:05.100
TIM SNEATH: OK.

00:26:05.100 --> 00:26:07.800
TERO SEPPALA: And we're
developing a social media

00:26:07.800 --> 00:26:10.780
management tool on the go.

00:26:10.780 --> 00:26:13.210
So we need an application
and tool for developing that.

00:26:13.210 --> 00:26:16.230
TIM SNEATH: OK, and so Hookle
is a social media app, right?

00:26:16.230 --> 00:26:16.980
TERO SEPPALA: Yes.

00:26:16.980 --> 00:26:17.430
TIM SNEATH: Just tell
me a little bit more

00:26:17.430 --> 00:26:18.650
about what it does.

00:26:18.650 --> 00:26:19.800
TERO SEPPALA: OK.

00:26:19.800 --> 00:26:21.300
JERE SEPPALA: Yeah,
you can actually

00:26:21.300 --> 00:26:24.936
post to all of your social media
just with one app, one click.

00:26:24.936 --> 00:26:25.560
TIM SNEATH: OK.

00:26:25.560 --> 00:26:28.860
OK, so why did you pick
Flutter, specifically,

00:26:28.860 --> 00:26:30.750
as your technology
to build Hookle.

00:26:30.750 --> 00:26:33.041
TERO SEPPALA: Well, that's
a good question and actually

00:26:33.041 --> 00:26:33.870
a funny story.

00:26:33.870 --> 00:26:36.600
When we started the
company five months ago,

00:26:36.600 --> 00:26:39.150
we hadn't heard about
Flutter back then.

00:26:39.150 --> 00:26:42.870
So we started to evaluate
these more traditional,

00:26:42.870 --> 00:26:46.050
like native Android and
[? React ?] Native kind

00:26:46.050 --> 00:26:49.290
of frameworks.

00:26:49.290 --> 00:26:52.290
We had our requirements,
like we wanted

00:26:52.290 --> 00:26:59.340
to have native-like performance,
smooth user experience.

00:26:59.340 --> 00:27:03.890
And we wanted it to run
on both iOS and Android,

00:27:03.890 --> 00:27:07.110
not to mention cost efficiently
to develop this all.

00:27:07.110 --> 00:27:09.990
And last but not
least, we wanted

00:27:09.990 --> 00:27:12.540
it to be out
quickly in timetable

00:27:12.540 --> 00:27:14.060
[INAUDIBLE], of course.

00:27:14.060 --> 00:27:14.820
TIM SNEATH: OK.

00:27:14.820 --> 00:27:20.560
TERO SEPPALA: So
then, these frameworks

00:27:20.560 --> 00:27:22.390
didn't fulfill our requirements.

00:27:22.390 --> 00:27:28.270
So our developer actually
suggested suddenly Flutter.

00:27:28.270 --> 00:27:30.995
And he told us that
it's going to fulfill

00:27:30.995 --> 00:27:31.870
all the requirements.

00:27:31.870 --> 00:27:33.460
And we were amazed.

00:27:33.460 --> 00:27:35.380
And that's actually
why we're here now.

00:27:35.380 --> 00:27:36.670
Because we chose Flutter.

00:27:36.670 --> 00:27:42.010
And we have our beta version
out on iOS and Android.

00:27:42.010 --> 00:27:43.040
TIM SNEATH: Fantastic.

00:27:43.040 --> 00:27:45.681
So just tell me a little about
your experiences using Flutter,

00:27:45.681 --> 00:27:46.180
then.

00:27:46.180 --> 00:27:47.680
Tell me from a
technical level, what

00:27:47.680 --> 00:27:49.720
is it about Flutter
that attracts you?

00:27:49.720 --> 00:27:52.390
JERE SEPPALA: Tim, out of
all of the good features

00:27:52.390 --> 00:27:55.760
Flutter provides, I actually
went to our developers,

00:27:55.760 --> 00:27:58.150
thanked them, I
asked them, if you

00:27:58.150 --> 00:28:01.570
need to name two most
important features that you

00:28:01.570 --> 00:28:02.650
love about Flutter.

00:28:02.650 --> 00:28:04.690
So here you go.

00:28:04.690 --> 00:28:06.920
Number one, hot reload.

00:28:06.920 --> 00:28:11.280
Hot, stateful reload is killer.

00:28:11.280 --> 00:28:19.640
And then another one
is the customizable UI.

00:28:19.640 --> 00:28:21.080
It's amazing.

00:28:21.080 --> 00:28:23.920
You can just customize
anything you want.

00:28:23.920 --> 00:28:25.450
That's about it.

00:28:25.450 --> 00:28:27.349
TIM SNEATH: Fantastic.

00:28:27.349 --> 00:28:28.650
Cool.

00:28:28.650 --> 00:28:31.000
So thank you.

00:28:31.000 --> 00:28:34.570
So the application is live right
now in beta on both stores,

00:28:34.570 --> 00:28:35.070
right?

00:28:35.070 --> 00:28:36.403
Tell me a little bit about that.

00:28:36.403 --> 00:28:38.640
How can people get it?

00:28:38.640 --> 00:28:42.790
JERE SEPPALA: Yeah, well, it's
public beta on Google Play.

00:28:42.790 --> 00:28:44.770
So you can get it today.

00:28:44.770 --> 00:28:46.350
Just Hookle it.

00:28:46.350 --> 00:28:47.945
TIM SNEATH: Hookle
it, there we are.

00:28:47.945 --> 00:28:49.480
JERE SEPPALA: A new
word, Hookle it.

00:28:49.480 --> 00:28:54.070
And then if you want to use
Apple version, iOS version,

00:28:54.070 --> 00:28:58.150
we have a stand-booth there
outside in the break time.

00:28:58.150 --> 00:29:00.190
So you can go there
and just give email

00:29:00.190 --> 00:29:01.930
and we give it to
you on TestFlight.

00:29:01.930 --> 00:29:02.680
TIM SNEATH: Great.

00:29:02.680 --> 00:29:03.471
I've seen your app.

00:29:03.471 --> 00:29:04.290
It looks beautiful.

00:29:04.290 --> 00:29:06.852
It's a really good example of
the power of Flutter in action.

00:29:06.852 --> 00:29:09.060
There's a little video of
it behind the scenes there.

00:29:09.060 --> 00:29:11.500
But, yeah, I'd encourage
everybody, go download it,

00:29:11.500 --> 00:29:12.680
check it out.

00:29:12.680 --> 00:29:16.750
And if you want the iOS version
and you're not physically here,

00:29:16.750 --> 00:29:18.969
I guess you can email
these guys and they'll

00:29:18.969 --> 00:29:21.010
give you a TestFlight code
to activate it, right?

00:29:21.010 --> 00:29:21.640
JERE SEPPALA: Yes,
just come to us.

00:29:21.640 --> 00:29:21.890
All right.

00:29:21.890 --> 00:29:23.320
TIM SNEATH: Cool, hey
guys, thank you so much.

00:29:23.320 --> 00:29:23.700
TERO SEPPALA: Thank you.

00:29:23.700 --> 00:29:24.370
TIM SNEATH: Thank you
for coming on stage.

00:29:24.370 --> 00:29:26.602
JERE SEPPALA: Thank
you, Tim, yes.

00:29:26.602 --> 00:29:31.440
[APPLAUSE]

00:29:31.440 --> 00:29:33.240
TIM SNEATH: So Flutter
is only in alpha,

00:29:33.240 --> 00:29:36.990
but we already have over 200
apps in the Google Play Store.

00:29:36.990 --> 00:29:40.290
And we're continuing to see
apps start to take off here.

00:29:40.290 --> 00:29:43.710
And we think this is the point
in time where maybe Flutter is

00:29:43.710 --> 00:29:47.170
starting to be that firework
that's caught the spark

00:29:47.170 --> 00:29:50.100
and maybe starting to
take off a little bit.

00:29:50.100 --> 00:29:52.560
We launched Flutter back in--

00:29:52.560 --> 00:29:55.380
we announced Flutter,
I should say, at I/O.

00:29:55.380 --> 00:29:58.170
And since I/O last
year-- so that's what,

00:29:58.170 --> 00:29:59.730
nine months or so--

00:29:59.730 --> 00:30:02.860
there's been a whole bunch
of new features added to it,

00:30:02.860 --> 00:30:05.430
including things like
right-to-left layout supports,

00:30:05.430 --> 00:30:08.610
accessibility, custom UI,
background execution--

00:30:08.610 --> 00:30:10.020
you can read the list here--

00:30:10.020 --> 00:30:14.070
as well as integrating Dart 2
and the richness of the Dart

00:30:14.070 --> 00:30:16.080
language into Flutter.

00:30:16.080 --> 00:30:18.000
We're getting very
close to beta.

00:30:18.000 --> 00:30:21.540
We're expecting a beta to
be available before I/O. We

00:30:21.540 --> 00:30:22.667
have the channel ready.

00:30:22.667 --> 00:30:24.750
We're starting to kind of
put the pieces in place.

00:30:24.750 --> 00:30:27.330
So whilst we're not announcing
the beta this morning,

00:30:27.330 --> 00:30:30.750
stay real tuned because we
are getting very, very close

00:30:30.750 --> 00:30:32.280
to the point where
we think Flutter

00:30:32.280 --> 00:30:34.880
is ready for prime time.

00:30:34.880 --> 00:30:37.700
And a few examples
of some of the things

00:30:37.700 --> 00:30:39.170
that we're working on.

00:30:39.170 --> 00:30:42.620
As with Dart, everything
in Flutter is open-source,

00:30:42.620 --> 00:30:44.090
everything is out
there on GitHub.

00:30:44.090 --> 00:30:46.220
So you can go and
see what's going on.

00:30:46.220 --> 00:30:48.530
This is a sampling
of some of the areas

00:30:48.530 --> 00:30:51.110
where we've been putting
some energy right now

00:30:51.110 --> 00:30:54.620
to add new capabilities
including widgets like maps,

00:30:54.620 --> 00:30:57.440
and webview, and charts.

00:30:57.440 --> 00:30:59.487
We're doing continued
work on accessibility.

00:30:59.487 --> 00:31:01.070
We already have
accessibility support,

00:31:01.070 --> 00:31:03.800
but that's the journey
we're continuing to work on.

00:31:03.800 --> 00:31:06.740
We're adding increased
support for performance,

00:31:06.740 --> 00:31:07.880
for text rendering.

00:31:07.880 --> 00:31:10.550
We're adding new language
and tooling features

00:31:10.550 --> 00:31:13.820
like embedding Flutter
widgets into an existing app

00:31:13.820 --> 00:31:15.630
and profiling.

00:31:15.630 --> 00:31:16.297
So check it out.

00:31:16.297 --> 00:31:18.088
There's the website
there where you can see

00:31:18.088 --> 00:31:19.520
everything that's on our radar.

00:31:19.520 --> 00:31:23.030
We also love receiving your pull
requests, your contributions,

00:31:23.030 --> 00:31:25.760
your issues so we can continue
to make sure that we build

00:31:25.760 --> 00:31:30.560
with Flutter a framework
and an SDK that is perfectly

00:31:30.560 --> 00:31:35.086
suited for the needs that you
have as a client-app developer.

00:31:35.086 --> 00:31:36.460
So the third
stanza, if you like.

00:31:36.460 --> 00:31:40.340
We've talked about Dart 2,
the rebooted, client-optimized

00:31:40.340 --> 00:31:41.300
language.

00:31:41.300 --> 00:31:43.157
We've talked about
Flutter as an example

00:31:43.157 --> 00:31:44.990
of one of the rich,
powerful frameworks that

00:31:44.990 --> 00:31:46.456
build on the Dart language.

00:31:46.456 --> 00:31:48.080
And lastly, I want
to talk a little bit

00:31:48.080 --> 00:31:52.040
about some of the tooling that
we have for Dart and Flutter

00:31:52.040 --> 00:31:53.600
together.

00:31:53.600 --> 00:31:57.350
Firstly, we build great
IntelliJ plug-in support

00:31:57.350 --> 00:32:00.500
for the entire stack here.

00:32:00.500 --> 00:32:03.980
And that's available for
IntelliJ, for WebStorm,

00:32:03.980 --> 00:32:05.360
for Android Studio.

00:32:05.360 --> 00:32:08.520
And just this last year, we
shipped 13 different versions

00:32:08.520 --> 00:32:09.020
of this.

00:32:09.020 --> 00:32:11.480
So we're moving very
fast on the tooling.

00:32:11.480 --> 00:32:13.310
You can see a lot
of momentum there.

00:32:13.310 --> 00:32:17.460
And you can expect to see
continued delivery of updates

00:32:17.460 --> 00:32:17.960
to that.

00:32:17.960 --> 00:32:20.960
Our Portland team delivered
a lot of that work.

00:32:20.960 --> 00:32:23.240
So thank you to you guys.

00:32:23.240 --> 00:32:27.800
We also have a redesigned
package repository

00:32:27.800 --> 00:32:29.945
for getting at various
different things

00:32:29.945 --> 00:32:32.070
that you need, whether
you're building for the web,

00:32:32.070 --> 00:32:34.010
whether you're building
a Flutter mobile app,

00:32:34.010 --> 00:32:35.410
or whether you're just
building something that needs

00:32:35.410 --> 00:32:37.310
some core Dart functionality.

00:32:37.310 --> 00:32:40.380
And relatively uniquely
as a packaging site,

00:32:40.380 --> 00:32:42.890
our repo here provides
really good support

00:32:42.890 --> 00:32:44.060
for things like reputation.

00:32:44.060 --> 00:32:46.820
So when you pick a
particular package here,

00:32:46.820 --> 00:32:49.970
we assign it a reputation score
based off number of downloads,

00:32:49.970 --> 00:32:51.860
based off a few other metrics.

00:32:51.860 --> 00:32:53.990
So it's easier to kind
of see the packages

00:32:53.990 --> 00:32:55.940
that you might be
interested in that

00:32:55.940 --> 00:32:59.150
are relevant to your needs.

00:32:59.150 --> 00:33:02.360
Already we have
over 1,500 packages

00:33:02.360 --> 00:33:05.240
at pub.dartlang.org, which
is pretty incredible,

00:33:05.240 --> 00:33:08.570
again, given where we're at in
this early stage of our journey

00:33:08.570 --> 00:33:09.964
with Dart and Flutter.

00:33:09.964 --> 00:33:11.630
And you can see more
packages every day.

00:33:11.630 --> 00:33:14.630
There's one that came
out just this last 24

00:33:14.630 --> 00:33:18.294
hours from AppTree, who have
built a great maps plug-in.

00:33:18.294 --> 00:33:20.210
And so you can see a
bunch of different things

00:33:20.210 --> 00:33:22.340
that are coming out here.

00:33:22.340 --> 00:33:26.240
One great example of how
the community, how you guys

00:33:26.240 --> 00:33:30.080
are all helping us build
a better Dart ecosystem is

00:33:30.080 --> 00:33:32.100
this one here, Danny Tuppeny.

00:33:32.100 --> 00:33:33.350
Danny, are you here somewhere?

00:33:33.350 --> 00:33:34.600
Wave your hand if you're here.

00:33:34.600 --> 00:33:37.060
There he is hiding at the
back there because he's shy.

00:33:37.060 --> 00:33:37.560
Danny--

00:33:37.560 --> 00:33:40.480
[APPLAUSE]

00:33:40.480 --> 00:33:43.790
Danny has built this amazing
extension for Flutter and Dart

00:33:43.790 --> 00:33:46.460
for Visual Studio Code, which
is a really popular developer

00:33:46.460 --> 00:33:47.280
tool.

00:33:47.280 --> 00:33:50.450
And again, we're seeing a
lot of interest in this.

00:33:50.450 --> 00:33:54.085
It's a great way to build
Flutter or Dart applications.

00:33:54.085 --> 00:33:55.460
And I'm pleased
to announce today

00:33:55.460 --> 00:33:58.400
that we're bringing Danny
on to work full time with us

00:33:58.400 --> 00:34:02.870
for the next 12 months on
continuing to improve this code

00:34:02.870 --> 00:34:06.140
extension to make it a really
great alternative to Android

00:34:06.140 --> 00:34:10.524
Studio IntelliJ for
building these applications.

00:34:10.524 --> 00:34:15.820
[APPLAUSE]

00:34:15.820 --> 00:34:18.420
So this is the opportunity
we have right now

00:34:18.420 --> 00:34:20.550
between these three
different pieces--

00:34:20.550 --> 00:34:24.750
with Dart, this battle-tested,
high-performance, scalable

00:34:24.750 --> 00:34:28.790
language; with Flutter,
this beautiful SDK

00:34:28.790 --> 00:34:32.159
for building incredible
experiences; with tooling that

00:34:32.159 --> 00:34:35.550
supports this; and packages
that the community provides.

00:34:35.550 --> 00:34:38.730
We think we're poised for
a really interesting 2018.

00:34:38.730 --> 00:34:42.330
We think we've got something
here that is rather unique.

00:34:42.330 --> 00:34:44.760
And I'm really excited
by the opportunity

00:34:44.760 --> 00:34:48.659
as we move ahead with
this combination.

00:34:48.659 --> 00:34:51.699
And others are starting
to see it as well.

00:34:51.699 --> 00:34:54.389
For example, this "Medium"
article from Nick Manning

00:34:54.389 --> 00:34:55.920
was a really good
article talking

00:34:55.920 --> 00:35:00.840
about why he thinks Flutter
will take off in 2018.

00:35:00.840 --> 00:35:03.130
Even "Visual Studio
Magazine," who

00:35:03.130 --> 00:35:07.500
are maybe not our
most loyal fans,

00:35:07.500 --> 00:35:11.105
wrote this article about
how even things like Xamarin

00:35:11.105 --> 00:35:13.950
are starting to be
challenged by Flutter.

00:35:13.950 --> 00:35:16.560
So the opportunity is here.

00:35:16.560 --> 00:35:17.940
You guys are the early adopters.

00:35:17.940 --> 00:35:19.440
You were here first.

00:35:19.440 --> 00:35:22.660
You've been following
this journey for awhile.

00:35:22.660 --> 00:35:23.970
And we think this is the time.

00:35:23.970 --> 00:35:29.150
This is the year where Flutter
is going to be amazing.

00:35:29.150 --> 00:35:31.930
So I want to close
with a thank you.

00:35:31.930 --> 00:35:33.490
Some of you have
done amazing work

00:35:33.490 --> 00:35:35.800
to help support us and
get us to this point.

00:35:35.800 --> 00:35:41.440
In particular, Alexandre
has 156 pull requests

00:35:41.440 --> 00:35:44.950
committed in the codebase
for Flutter and Dart.

00:35:44.950 --> 00:35:49.630
And Gunter has been amazing
at answering questions

00:35:49.630 --> 00:35:53.410
on stack overflow with
over 2,400 answers

00:35:53.410 --> 00:35:54.562
to different questions.

00:35:54.562 --> 00:35:56.020
Plus, of course,
we have this stack

00:35:56.020 --> 00:35:59.440
of Google developer
experts, most of whom

00:35:59.440 --> 00:36:02.830
are here in LA for
the conference.

00:36:02.830 --> 00:36:04.720
So I'd like to
particularly thank

00:36:04.720 --> 00:36:08.110
you guys for making
this environment great.

00:36:08.110 --> 00:36:09.932
Thank you so much.

00:36:09.932 --> 00:36:16.315
[APPLAUSE]

00:36:17.790 --> 00:36:19.345
So lastly, what next?

00:36:19.345 --> 00:36:21.720
Here at DartConf, we're going
to have a really good time.

00:36:21.720 --> 00:36:24.640
We've got, I can't remember
how many sessions, 12, 13, 14,

00:36:24.640 --> 00:36:25.800
15 sessions.

00:36:25.800 --> 00:36:27.870
We've got an unconference.

00:36:27.870 --> 00:36:29.886
We've got lightning talks.

00:36:29.886 --> 00:36:31.260
It's a great
opportunity not just

00:36:31.260 --> 00:36:32.926
to listen and learn,
but also to network

00:36:32.926 --> 00:36:36.417
with other Google engineers,
to network with each other.

00:36:36.417 --> 00:36:37.750
Secondly, we want your feedback.

00:36:37.750 --> 00:36:38.750
Tell us how we're doing.

00:36:38.750 --> 00:36:40.540
Tell us what we need
to continue to invest

00:36:40.540 --> 00:36:44.790
and improve on to make this
a great platform for you.

00:36:44.790 --> 00:36:46.860
Thirdly, we'd really
appreciate your help.

00:36:46.860 --> 00:36:48.870
We are still in
alpha with Flutter.

00:36:48.870 --> 00:36:50.850
Dart is still
starting to take off.

00:36:50.850 --> 00:36:54.060
We'd really love your support
in being our evangelists,

00:36:54.060 --> 00:36:56.800
to spread the good news
of Dart and Flutter.

00:36:56.800 --> 00:36:59.160
So if you feel able,
we'd really appreciate

00:36:59.160 --> 00:37:02.820
you tweeting or sharing with
your networks a little bit

00:37:02.820 --> 00:37:05.610
about your own experiences
with the platform.

00:37:05.610 --> 00:37:07.500
And lastly, please contribute.

00:37:07.500 --> 00:37:09.620
We have everything
out in the open.

00:37:09.620 --> 00:37:11.650
We really do relish
your contributions,

00:37:11.650 --> 00:37:13.800
whether it's finding
new bug reports

00:37:13.800 --> 00:37:18.030
or whether it's filing issues
or contributing actually

00:37:18.030 --> 00:37:23.620
to the code with patches or
widgets or things like that.

00:37:23.620 --> 00:37:26.020
So with that, I
want to thank you.

00:37:26.020 --> 00:37:28.090
I hope you have a really
good Dart Conference.

00:37:28.090 --> 00:37:29.370
Thank you so much for coming.

00:37:29.370 --> 00:37:31.524
Have a great day and
today and tomorrow.

00:37:31.524 --> 00:37:32.190
Thank you, guys.

00:37:32.190 --> 00:37:36.440
[APPLAUSE]

