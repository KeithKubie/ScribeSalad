WEBVTT
Kind: captions
Language: en

00:00:06.860 --> 00:00:07.860
KEVIN MOORE: This is me.

00:00:07.860 --> 00:00:10.240
You can find me on
Google+ and Twitter.

00:00:10.240 --> 00:00:12.882
I'm also kevmoo at GitHub.

00:00:12.882 --> 00:00:14.840
So if you want to-- I've
referenced some sites,

00:00:14.840 --> 00:00:16.527
some code there during my talk.

00:00:16.527 --> 00:00:18.360
And so that's a good
place to follow and see

00:00:18.360 --> 00:00:22.170
what I'm working on,
what I'm contributing to.

00:00:22.170 --> 00:00:23.454
I'm here to talk about Dart.

00:00:23.454 --> 00:00:25.870
I'm actually really excited
to be here talking about Dart.

00:00:25.870 --> 00:00:28.580
The first I/O I came
to was last year.

00:00:28.580 --> 00:00:30.620
And I was here as a
fanboy, a Dart fanboy,

00:00:30.620 --> 00:00:32.330
to cheer on the
team, as they talked

00:00:32.330 --> 00:00:35.850
about how great the
launch was going to be.

00:00:35.850 --> 00:00:37.690
And I was really
excited about Dart.

00:00:37.690 --> 00:00:39.450
In my development
career, I've done C,

00:00:39.450 --> 00:00:43.290
C++ and Java and
C Sharp, and XAML.

00:00:43.290 --> 00:00:45.300
And I've done Flash, and
I've done Silverlight,

00:00:45.300 --> 00:00:47.650
and I've done
JavaScript and Ruby.

00:00:47.650 --> 00:00:50.150
And I can say that in
both places I struggled.

00:00:50.150 --> 00:00:53.100
I never found an experience
that really made me happy,

00:00:53.100 --> 00:00:56.570
that gave me a great
development flow, while being

00:00:56.570 --> 00:00:57.630
on the open web.

00:00:57.630 --> 00:00:59.570
And not limited to
one operating system,

00:00:59.570 --> 00:01:01.760
not because I have
some plug-in installed,

00:01:01.760 --> 00:01:03.842
but the whole open web.

00:01:03.842 --> 00:01:06.050
And so I discovered Dart,
and I was enamored by Dart,

00:01:06.050 --> 00:01:07.508
and I started
contributing to Dart.

00:01:07.508 --> 00:01:10.190
In December I went full-time
at Google to work on Dart.

00:01:10.190 --> 00:01:13.620
And I'm excited to be here to
talk about it, and specifically

00:01:13.620 --> 00:01:18.229
that developer experience--
or I'll just shorten to DX.

00:01:18.229 --> 00:01:20.270
This is something really
important, and something

00:01:20.270 --> 00:01:21.853
we really strive for
on the Dart team,

00:01:21.853 --> 00:01:23.924
to deliver an amazing
developer experience

00:01:23.924 --> 00:01:25.840
for people that want to
build on the open web.

00:01:28.560 --> 00:01:31.390
So when I say DX,
what do I mean?

00:01:31.390 --> 00:01:33.860
Well, I'll make
an analogy to UI.

00:01:33.860 --> 00:01:36.904
And I put it in old-timey
font on purpose, right?

00:01:36.904 --> 00:01:38.320
I spent a lot of
time when I first

00:01:38.320 --> 00:01:40.760
started working in
software dealing with UI,

00:01:40.760 --> 00:01:43.770
and talking about UI-- oh,
let's make the UI look cool!

00:01:43.770 --> 00:01:46.020
Let's make it look pretty!

00:01:46.020 --> 00:01:48.380
If you ever wanted to
get beat by a designer,

00:01:48.380 --> 00:01:49.710
first thing is Comic Sans.

00:01:49.710 --> 00:01:50.775
That's always the first
one they'll beat you.

00:01:50.775 --> 00:01:52.324
But right below
that was asking them

00:01:52.324 --> 00:01:54.490
to go make something pretty,
make it look more cool.

00:01:54.490 --> 00:01:55.150
Right?

00:01:55.150 --> 00:01:56.775
Because any good
designer will tell you

00:01:56.775 --> 00:01:58.090
it's not about the pixels.

00:01:58.090 --> 00:02:01.270
It's not just about making it
look pretty or cool, right?

00:02:01.270 --> 00:02:03.580
It's about the experience.

00:02:03.580 --> 00:02:05.927
And so by analogy--
when we talk about

00:02:05.927 --> 00:02:07.260
experience, what does that mean?

00:02:07.260 --> 00:02:08.176
It's more than pixels.

00:02:08.176 --> 00:02:10.870
It's about being intuitive
or enjoyable-- hopefully

00:02:10.870 --> 00:02:12.327
at the end of the
day, productive.

00:02:12.327 --> 00:02:14.660
And so by analogy, we're going
to talk about a developer

00:02:14.660 --> 00:02:17.550
experience in the same way.

00:02:17.550 --> 00:02:19.490
It's more than syntax
or color coding

00:02:19.490 --> 00:02:22.320
or some kind of tool
framework or test framework.

00:02:22.320 --> 00:02:24.590
it's about having an
end-to-end experience that

00:02:24.590 --> 00:02:27.870
helps you be productive
as a developer.

00:02:27.870 --> 00:02:30.860
In the Dart team, we talk a lot
about the trifecta-- language,

00:02:30.860 --> 00:02:32.270
tools, and libraries.

00:02:32.270 --> 00:02:33.980
And I'll show
several demos today

00:02:33.980 --> 00:02:36.780
to talk through
that set of stuff.

00:02:36.780 --> 00:02:39.591
And I'd actually claim that
we've seen this story before,

00:02:39.591 --> 00:02:40.090
done well.

00:02:40.090 --> 00:02:41.740
Microsoft and Apple
and even Google

00:02:41.740 --> 00:02:44.700
have shipped this experience
as great end-to-end.

00:02:44.700 --> 00:02:45.630
The issue is the web.

00:02:45.630 --> 00:02:49.740
In some ways, some might
argue is a little lacking.

00:02:49.740 --> 00:02:52.090
And that's where Dart comes in.

00:02:52.090 --> 00:02:54.970
The goal of Dart is to offer an
end-to-end developer experience

00:02:54.970 --> 00:02:56.020
for the web.

00:02:56.020 --> 00:02:57.560
Today I'm going to
talk about that.

00:02:57.560 --> 00:02:58.970
I'm going to talk
to you about it

00:02:58.970 --> 00:03:01.470
in terms of a spectrum,
an end-to-end spectrum.

00:03:01.470 --> 00:03:05.056
We start with Dart as a
basis for just a great way

00:03:05.056 --> 00:03:06.920
to write code that
targets the web.

00:03:06.920 --> 00:03:09.220
To efficiently write code,
it's well-componentized

00:03:09.220 --> 00:03:10.799
that's easy to understand.

00:03:10.799 --> 00:03:11.590
It's easy to share.

00:03:11.590 --> 00:03:13.460
It's easy to reuse.

00:03:13.460 --> 00:03:15.080
On top of that, we have Polymer.

00:03:15.080 --> 00:03:17.570
So what Dart does
for code, Polymer

00:03:17.570 --> 00:03:20.450
does for the user experience
of your web applications,

00:03:20.450 --> 00:03:22.680
and how Dart and
Polymer work together,

00:03:22.680 --> 00:03:25.010
specifically adding on the
interesting announcements

00:03:25.010 --> 00:03:28.250
today about paper
and material design.

00:03:28.250 --> 00:03:31.500
And then on two ends of the
spectrum, we have mobile

00:03:31.500 --> 00:03:34.110
and we have cloud.

00:03:34.110 --> 00:03:37.220
So first I'm going to give
some context, because I'll

00:03:37.220 --> 00:03:40.660
be talking about a very
contrived scenario today.

00:03:40.660 --> 00:03:42.010
There's this little contact app.

00:03:42.010 --> 00:03:45.720
So I have my Nexus
7 device here.

00:03:45.720 --> 00:03:47.690
And I want to add
in a contact here.

00:03:47.690 --> 00:03:50.580
Let's do John Moore.

00:03:50.580 --> 00:03:53.740
Because today is his birthday.

00:03:53.740 --> 00:03:56.430
So this is my birthday
shout-out to John.

00:03:56.430 --> 00:03:58.805
And you can see I'm
using material design,

00:03:58.805 --> 00:04:01.110
a set of components there
and just sit here and check

00:04:01.110 --> 00:04:04.970
the check box all day long,
because it looks so cool.

00:04:04.970 --> 00:04:06.730
And let's save that.

00:04:06.730 --> 00:04:08.700
So I've created a new contact.

00:04:08.700 --> 00:04:11.230
So, yes, this is pretty cool.

00:04:11.230 --> 00:04:12.050
I'm not a designer.

00:04:12.050 --> 00:04:13.820
And actually, later in the talk
I'll talk a little bit more

00:04:13.820 --> 00:04:16.260
about how the tools
we're offering hopefully

00:04:16.260 --> 00:04:18.741
will make this split
a little easier.

00:04:18.741 --> 00:04:20.240
And so for folks
that you work with,

00:04:20.240 --> 00:04:22.750
or maybe you yourself that
are really design-focused

00:04:22.750 --> 00:04:26.701
have more freedom and can
get more done in this world.

00:04:26.701 --> 00:04:27.700
Let's go back to slides.

00:04:32.460 --> 00:04:34.664
So let's start
talking about Dart

00:04:34.664 --> 00:04:36.080
as this basis for
this end-to-end.

00:04:40.300 --> 00:04:43.030
There's many ways
to solve problems.

00:04:43.030 --> 00:04:47.570
We can do the spaghetti way I've
certainly been guilty of this.

00:04:47.570 --> 00:04:50.420
Now obviously, given any
framework, any set of tools,

00:04:50.420 --> 00:04:52.610
you can decide not to
do the spaghetti way.

00:04:52.610 --> 00:04:57.830
But having good tools
can really be helpful.

00:04:57.830 --> 00:05:00.184
If you have the right
processors up front, but also

00:05:00.184 --> 00:05:01.600
the right
infrastructure in place,

00:05:01.600 --> 00:05:03.510
it actually can make
it a pit of success,

00:05:03.510 --> 00:05:04.885
like doing the
right thing, doing

00:05:04.885 --> 00:05:07.040
the clean thing can
actually just happen

00:05:07.040 --> 00:05:09.075
if you have right
tools to help you out.

00:05:09.075 --> 00:05:11.200
So what's our wish list
when we think about coding?

00:05:11.200 --> 00:05:12.777
I would think
about three things.

00:05:12.777 --> 00:05:14.360
One is, give us some
default structure

00:05:14.360 --> 00:05:15.610
to get things started.

00:05:15.610 --> 00:05:17.300
Second is, have
the tools actually

00:05:17.300 --> 00:05:18.830
be smart and
understand our code,

00:05:18.830 --> 00:05:21.154
and see what great
things can happen.

00:05:21.154 --> 00:05:23.070
And finally is integration--
having everything

00:05:23.070 --> 00:05:24.787
work well together.

00:05:24.787 --> 00:05:27.286
So let's do a brief introduction
to Dart and talk about some

00:05:27.286 --> 00:05:27.952
of these things.

00:05:36.220 --> 00:05:37.685
Don't copy my password.

00:05:37.685 --> 00:05:39.060
So let's look at
a piece of code.

00:05:39.060 --> 00:05:41.610
Can everybody see the code OK?

00:05:41.610 --> 00:05:43.310
Thumbs up in the back?

00:05:43.310 --> 00:05:46.810
So here's the silliest "Hello,
world" example in Dart.

00:05:46.810 --> 00:05:48.210
And it's designed for the web.

00:05:48.210 --> 00:05:50.010
So you see that we
have a main method.

00:05:50.010 --> 00:05:51.620
So right off the bat,
this is something simple.

00:05:51.620 --> 00:05:52.440
So this is a web app.

00:05:52.440 --> 00:05:53.900
You see I'm running
to the document

00:05:53.900 --> 00:05:55.270
and just appending text.

00:05:55.270 --> 00:05:58.847
We're going back to 1998 now for
our web app, at least to start.

00:05:58.847 --> 00:06:01.180
So the first thing you'll see
is, we have a main method.

00:06:01.180 --> 00:06:02.560
So there's a single
entry point if you're

00:06:02.560 --> 00:06:03.680
building an app in Dart.

00:06:03.680 --> 00:06:05.867
There's no document.ready
dance, when does it work,

00:06:05.867 --> 00:06:08.450
you just write "main" and we'll
call "main" when you're ready.

00:06:08.450 --> 00:06:09.777
Already it's really nice.

00:06:09.777 --> 00:06:11.360
You'll see that we
can define classes.

00:06:11.360 --> 00:06:13.180
So I just find a
contact class here.

00:06:13.180 --> 00:06:14.910
And have a set of
fields, name and notes,

00:06:14.910 --> 00:06:16.460
and then this
notion of important,

00:06:16.460 --> 00:06:18.100
and I'm setting some values.

00:06:18.100 --> 00:06:19.960
And already we have
this nice little syntax,

00:06:19.960 --> 00:06:21.750
so that if you want to set
multiple fields and object,

00:06:21.750 --> 00:06:22.791
you can just use dot dot.

00:06:22.791 --> 00:06:24.410
It works really well.

00:06:24.410 --> 00:06:28.424
And then we append
that to the document.

00:06:28.424 --> 00:06:30.590
So right off the bat, I
want to point something out.

00:06:30.590 --> 00:06:33.180
You might see this
little squiggle here.

00:06:33.180 --> 00:06:34.740
Unused import.

00:06:34.740 --> 00:06:37.810
So already, because Dart's
a structured language,

00:06:37.810 --> 00:06:39.734
our tools can actually
understand the code

00:06:39.734 --> 00:06:42.150
and understand what you're
doing in code and help you out.

00:06:42.150 --> 00:06:43.524
So this is a very
simple example,

00:06:43.524 --> 00:06:45.920
which is, like, I'm not
using this convert library.

00:06:45.920 --> 00:06:47.065
So let's delete that.

00:06:47.065 --> 00:06:48.940
Now in this case, it's
pretty trivial, right?

00:06:48.940 --> 00:06:51.020
But if you wanted to track
the progression of your code,

00:06:51.020 --> 00:06:52.500
if you're going to
manage your dependencies,

00:06:52.500 --> 00:06:54.430
having a good idea of the
packages and libraries you're

00:06:54.430 --> 00:06:55.890
using in your code
and being told

00:06:55.890 --> 00:06:57.430
when you stop using
something is great.

00:06:57.430 --> 00:06:59.430
That means you can update
your dependency matrix

00:06:59.430 --> 00:07:00.790
and simplify your code.

00:07:00.790 --> 00:07:02.385
But obviously if
you try to use code

00:07:02.385 --> 00:07:04.010
without importing
the right dependency,

00:07:04.010 --> 00:07:05.242
you find out right away.

00:07:05.242 --> 00:07:07.200
So I'm doing all this
without running anything.

00:07:07.200 --> 00:07:09.325
The tools can just tell me
because of the structure

00:07:09.325 --> 00:07:12.110
of Dart and the
analyzer we have.

00:07:12.110 --> 00:07:13.769
So let's go in a
little bit deeper.

00:07:13.769 --> 00:07:15.810
So I see now, let's imagine
that the implementers

00:07:15.810 --> 00:07:17.393
of main and the
implementer of contact

00:07:17.393 --> 00:07:19.530
were two different developers.

00:07:19.530 --> 00:07:21.030
For some reason,
this person decided

00:07:21.030 --> 00:07:23.657
to assign the name
variable to be an array.

00:07:23.657 --> 00:07:25.740
That wasn't my intention
as the contact developer.

00:07:25.740 --> 00:07:27.320
I actually wanted
it to be a string.

00:07:27.320 --> 00:07:28.624
How do I enforce that?

00:07:28.624 --> 00:07:29.790
Of course this is very easy.

00:07:29.790 --> 00:07:33.670
I just come in here and say
this should be a string.

00:07:33.670 --> 00:07:35.170
That solves all our
problems, right?

00:07:35.170 --> 00:07:36.378
Everyone reads code comments.

00:07:36.378 --> 00:07:37.840
Clearly this works well.

00:07:37.840 --> 00:07:39.930
So this is the
first step, right?

00:07:39.930 --> 00:07:43.500
There's lots of debate about,
I don't want to type my code,

00:07:43.500 --> 00:07:46.600
is it really necessary, does
it just add cruft to the code?

00:07:46.600 --> 00:07:47.940
So here's my argument.

00:07:47.940 --> 00:07:49.880
At a minimum as a
developer, you should

00:07:49.880 --> 00:07:51.544
be doing this,
beyond a trivial app.

00:07:51.544 --> 00:07:53.460
Even if you're the only
developer on your app,

00:07:53.460 --> 00:07:54.400
like three months
from now you'll

00:07:54.400 --> 00:07:55.710
forget what you were doing.

00:07:55.710 --> 00:07:57.227
So at a minimum,
you should do this.

00:07:57.227 --> 00:07:58.810
The question is,
what's the difference

00:07:58.810 --> 00:08:03.480
in terms of how you code
from that, just doing this?

00:08:06.885 --> 00:08:08.510
You're actually typing
less characters.

00:08:08.510 --> 00:08:10.343
You can actually generate
documentation now,

00:08:10.343 --> 00:08:12.750
based on this class, because
you attribute it using Dart.

00:08:12.750 --> 00:08:15.360
And now the analyzer wakes
up, and says, oh by the way,

00:08:15.360 --> 00:08:18.960
you can't assign an
array to a stream.

00:08:18.960 --> 00:08:21.786
So let's do John here.

00:08:21.786 --> 00:08:23.660
And so the same thing
with, let's say, notes.

00:08:23.660 --> 00:08:25.080
Let's make sure that's a string.

00:08:25.080 --> 00:08:27.729
Important-- let's make
sure that's a bool.

00:08:27.729 --> 00:08:29.770
And these are examples
that are really important.

00:08:29.770 --> 00:08:31.320
When we talk about
JSON serialization,

00:08:31.320 --> 00:08:32.695
there's actually
a big difference

00:08:32.695 --> 00:08:35.636
between the string true and
the literal true-- and actually

00:08:35.636 --> 00:08:37.510
more importantly if
you're dealing with JSON,

00:08:37.510 --> 00:08:39.557
the string false and the
literal false, right?

00:08:39.557 --> 00:08:41.640
So being able to have these
annotated in your code

00:08:41.640 --> 00:08:43.647
is really helpful.

00:08:43.647 --> 00:08:45.480
And you'll notice that
I do a 2-string here.

00:08:45.480 --> 00:08:47.105
Let's say as an
example, maybe I wanted

00:08:47.105 --> 00:08:51.730
to return 42 for
my 2-string, right?

00:08:51.730 --> 00:08:53.020
That seems legal.

00:08:53.020 --> 00:08:55.697
But actually a 2-string
is an inherited method

00:08:55.697 --> 00:08:56.530
from the base class.

00:08:56.530 --> 00:08:57.549
Everything's an object.

00:08:57.549 --> 00:08:59.840
So if you can mouse over
here, you actually see a hint.

00:08:59.840 --> 00:09:02.340
This is overriding
in very small font.

00:09:02.340 --> 00:09:04.700
This is overriding
object.2 string.

00:09:04.700 --> 00:09:05.830
Well, let's debate.

00:09:05.830 --> 00:09:06.800
I'm returning a 42.

00:09:06.800 --> 00:09:09.031
Let's make this an integer.

00:09:09.031 --> 00:09:10.780
And again, my system
yells at me and says,

00:09:10.780 --> 00:09:12.902
the return type from the
base class is string.

00:09:12.902 --> 00:09:14.610
So even when you think
about inheritance,

00:09:14.610 --> 00:09:16.460
Dart helps you out, and
makes sure that if you change

00:09:16.460 --> 00:09:18.920
the underlying contract, those
that implement your underlying

00:09:18.920 --> 00:09:20.628
contract will get
warrant, whether you're

00:09:20.628 --> 00:09:24.820
missing an implementation
or you type it incorrectly.

00:09:24.820 --> 00:09:26.794
So let's make this a
string, like it should be.

00:09:26.794 --> 00:09:28.210
We'll notice we
get another error,

00:09:28.210 --> 00:09:31.309
because now our 42 is
not a string, clearly.

00:09:31.309 --> 00:09:32.850
And the other thing
is, you'll notice

00:09:32.850 --> 00:09:34.390
we have some nice
little add-ons.

00:09:34.390 --> 00:09:38.212
For instance, we actually
support string interpolation.

00:09:38.212 --> 00:09:39.170
And let's fix this guy.

00:09:42.602 --> 00:09:43.310
And we'll run it.

00:09:48.720 --> 00:09:51.160
So, happy birthday, brother.

00:09:51.160 --> 00:09:54.680
Let me move this over
just a little bit.

00:09:54.680 --> 00:09:59.120
So you'll see that I'm
running Chromium here.

00:09:59.120 --> 00:10:02.314
It's actually not-- you actually
can't see I'm running Chromium.

00:10:02.314 --> 00:10:03.980
Someone in IT's going
to get in trouble.

00:10:03.980 --> 00:10:08.170
I'm actually running
Chrome called

00:10:08.170 --> 00:10:10.610
Chromium, version of Chrome.

00:10:10.610 --> 00:10:11.980
This is not normal Chrome.

00:10:11.980 --> 00:10:14.120
Actually, we lovingly
refer to it as Dartium

00:10:14.120 --> 00:10:15.620
This is actually a
version of Chrome

00:10:15.620 --> 00:10:18.100
that ships with our SDK
that runs Dart natively.

00:10:18.100 --> 00:10:19.760
What does this mean?

00:10:19.760 --> 00:10:22.310
So there's obviously a lot
of languages and platforms

00:10:22.310 --> 00:10:23.750
that let you write
other languages

00:10:23.750 --> 00:10:25.840
and compile the
JavaScript, which is great.

00:10:25.840 --> 00:10:27.220
The problem with
that is you have

00:10:27.220 --> 00:10:29.440
to do a compile step
often, before you actually

00:10:29.440 --> 00:10:30.637
run the code in the browser.

00:10:30.637 --> 00:10:32.220
And then when you're
debugging issues,

00:10:32.220 --> 00:10:33.900
you're debugging the JavaScript.

00:10:33.900 --> 00:10:36.112
Now source maps gets you a
little far along the way.

00:10:36.112 --> 00:10:38.320
But wouldn't it be nice to
just debug in the language

00:10:38.320 --> 00:10:39.870
you're working in?

00:10:39.870 --> 00:10:42.850
So I can come in
here and say throw

00:10:42.850 --> 00:10:44.805
something silly and reload it.

00:10:44.805 --> 00:10:46.180
And you'll see I
get break points

00:10:46.180 --> 00:10:47.555
and I jump right
into the editor.

00:10:51.100 --> 00:10:51.850
So that's Dartium.

00:10:51.850 --> 00:10:53.940
we actually have
the Dart VM baked

00:10:53.940 --> 00:10:55.845
in for development
in a custom browser.

00:10:55.845 --> 00:10:58.470
Now beyond that, you'll see I'm
actually running a server here.

00:10:58.470 --> 00:10:58.969
Right?

00:10:58.969 --> 00:11:01.900
I'm hitting port 8080.

00:11:01.900 --> 00:11:04.550
Underneath this is a
service we call pub serve.

00:11:04.550 --> 00:11:06.690
But this handles not
only serving your assets

00:11:06.690 --> 00:11:08.430
as you're building,
but also smart,

00:11:08.430 --> 00:11:10.650
and knows what browser's
hitting the endpoint.

00:11:10.650 --> 00:11:12.990
So if I hit it with an
endpoint that's not Dartium,

00:11:12.990 --> 00:11:16.560
for instance,
Chrome, it actually

00:11:16.560 --> 00:11:19.300
goes through with the work
and compiles the applications.

00:11:19.300 --> 00:11:22.170
So now it's turning that
Dart code into JavaScript.

00:11:22.170 --> 00:11:24.931
And you now see, it works
great in normal Chrome as well.

00:11:30.710 --> 00:11:31.960
So what do we have?

00:11:31.960 --> 00:11:33.914
First we're talking
about Dart analyzer.

00:11:33.914 --> 00:11:36.205
This is the ability that our
tools understand our code.

00:11:36.205 --> 00:11:37.734
This is actually
a standalone app

00:11:37.734 --> 00:11:39.650
you can run outside the
editor if you want to,

00:11:39.650 --> 00:11:41.080
and integrate it
in your own tools.

00:11:41.080 --> 00:11:43.371
But it actually understands
the structure of your code.

00:11:43.371 --> 00:11:46.040
And it lets you find errors
before you even run things.

00:11:46.040 --> 00:11:46.810
We have pub serve.

00:11:46.810 --> 00:11:48.643
This is our internal
server that understands

00:11:48.643 --> 00:11:50.394
how to serve normal Dart code.

00:11:50.394 --> 00:11:52.560
And then if you hit it with
another type of browser,

00:11:52.560 --> 00:11:56.330
for instance, Chrome or
Firefox or anything else,

00:11:56.330 --> 00:11:58.460
we spin up Dart to JS,
which is our compiler that

00:11:58.460 --> 00:12:00.009
turns Dart code into JavaScript.

00:12:00.009 --> 00:12:01.800
And of course this is
all wrapped up really

00:12:01.800 --> 00:12:02.883
nicely in the Dart Editor.

00:12:07.110 --> 00:12:08.250
We talked about Dartium.

00:12:08.250 --> 00:12:10.210
This is a custom
build of Chromium

00:12:10.210 --> 00:12:12.440
that ships as part of the
editor that has the Dart VM

00:12:12.440 --> 00:12:15.760
baked in, and makes it easy to
debug the code you're writing.

00:12:15.760 --> 00:12:19.600
So you can iterate quickly, get
most of the things ironed out

00:12:19.600 --> 00:12:24.140
and then go test it on
deployed browsers and the web.

00:12:24.140 --> 00:12:25.950
So you debug and
develop in Dartium,

00:12:25.950 --> 00:12:28.230
and then you deploy
across any browser.

00:12:31.490 --> 00:12:33.320
So that's part of the spectrum.

00:12:33.320 --> 00:12:36.200
Let's talk about UI
here, obviously printing

00:12:36.200 --> 00:12:38.667
my brother's name, as much
as I'm sure he appreciates

00:12:38.667 --> 00:12:39.750
is not a great experience.

00:12:43.842 --> 00:12:45.300
There's this
misconception that you

00:12:45.300 --> 00:12:46.920
can't do rich UX on the web.

00:12:46.920 --> 00:12:50.420
Obviously, with all the
talk about Android at I/O,

00:12:50.420 --> 00:12:54.930
it's easy to forget that the
browser has come a long way.

00:12:54.930 --> 00:12:58.249
Usually when you think about
running a mobile mapping,

00:12:58.249 --> 00:12:59.540
we think about running the app.

00:12:59.540 --> 00:13:01.680
The web app actually
works amazingly well.

00:13:01.680 --> 00:13:04.220
Pinch and zoom works great,
rotation works great.

00:13:04.220 --> 00:13:06.560
Like, we can build
rich UX for the web,

00:13:06.560 --> 00:13:09.130
and it works really
well, even on mobile.

00:13:09.130 --> 00:13:10.360
So yay, Rich UX!

00:13:12.920 --> 00:13:15.790
The question now is, do we have
a rational developer experience

00:13:15.790 --> 00:13:19.160
for building this rich UX?

00:13:19.160 --> 00:13:20.812
So let's use an
example by analogy.

00:13:20.812 --> 00:13:23.270
Datagrid-- if people have done
[? line-up ?] business apps,

00:13:23.270 --> 00:13:24.530
everyone's like, I
need the Datagrid.

00:13:24.530 --> 00:13:25.450
Always the Datagrid.

00:13:25.450 --> 00:13:29.100
The first thing
you install, right?

00:13:29.100 --> 00:13:31.840
So how do you do
datagrid on the web?

00:13:31.840 --> 00:13:33.010
This, right?

00:13:33.010 --> 00:13:35.549
That's our datagrid.

00:13:35.549 --> 00:13:36.590
But it's not that, right?

00:13:36.590 --> 00:13:38.256
You need to import
the right script tag,

00:13:38.256 --> 00:13:40.110
and define the right CSS.

00:13:40.110 --> 00:13:41.867
Then you need to define the div.

00:13:41.867 --> 00:13:43.450
And it's probably
more than one class.

00:13:43.450 --> 00:13:44.400
It might be many classes.

00:13:44.400 --> 00:13:46.316
You might need to find
elements underneath it.

00:13:46.316 --> 00:13:48.850
There's a lot of ceremony
to get this working, right?

00:13:48.850 --> 00:13:50.340
You kind of end up with this.

00:13:50.340 --> 00:13:51.802
You have styles
that leak all over,

00:13:51.802 --> 00:13:53.260
and you're not sure
what's defined.

00:13:53.260 --> 00:13:54.940
You can't define
it in one place.

00:13:54.940 --> 00:13:56.730
It could be a huge mess.

00:13:56.730 --> 00:13:59.330
So I claim this is not a
rational developer experience

00:13:59.330 --> 00:14:03.050
for building components or
using components on the web.

00:14:03.050 --> 00:14:04.540
What is the rational experience?

00:14:04.540 --> 00:14:05.789
Do we have an existence proof?

00:14:05.789 --> 00:14:08.630
And I would claim we do.

00:14:08.630 --> 00:14:13.820
Whether you're doing C#
or Java or Xcode in iOS,

00:14:13.820 --> 00:14:15.740
you define a component
and you extend,

00:14:15.740 --> 00:14:17.950
using object inheritance,
a base component.

00:14:17.950 --> 00:14:20.140
And things come along
that way, right?

00:14:20.140 --> 00:14:22.670
And we've seen this
in other platforms.

00:14:22.670 --> 00:14:26.160
So the web model, this
rational model for UX, is this.

00:14:26.160 --> 00:14:27.910
Actually be able to
define my own element,

00:14:27.910 --> 00:14:30.160
just like I do in
any other UI platform

00:14:30.160 --> 00:14:32.720
and crank along that way.

00:14:32.720 --> 00:14:34.550
So thankfully, our
friends the W3C,

00:14:34.550 --> 00:14:37.424
with help from a
few browser vendors,

00:14:37.424 --> 00:14:38.840
we have the standards
in place now

00:14:38.840 --> 00:14:40.770
to have this great
experience as a developer.

00:14:40.770 --> 00:14:43.000
We have Shadow DOM and
Template and Custom Element.

00:14:43.000 --> 00:14:44.030
So this is in Firefox.

00:14:44.030 --> 00:14:45.462
This is in Chrome.

00:14:45.462 --> 00:14:46.920
We're doing work
with other vendors

00:14:46.920 --> 00:14:48.760
to get this in all
other browsers.

00:14:48.760 --> 00:14:50.830
And what's great is we
actually polyfill it

00:14:50.830 --> 00:14:52.705
for those browsers that
don't support it yet.

00:14:55.720 --> 00:14:58.230
And our friends on the
Polymer team, part of Chrome,

00:14:58.230 --> 00:15:00.710
have done work to make a
rational developer experience

00:15:00.710 --> 00:15:02.170
on top of these standards.

00:15:02.170 --> 00:15:05.510
So have people heard of Polymer,
or seen the talks, right?

00:15:05.510 --> 00:15:08.450
Amazing stuff for building
components on the web.

00:15:08.450 --> 00:15:10.700
And today, we are excited
to announce material design.

00:15:10.700 --> 00:15:13.450
This is a model for building
rich user experiences,

00:15:13.450 --> 00:15:15.550
and a model for how
these user experiences

00:15:15.550 --> 00:15:18.710
should look and
feel across devices.

00:15:18.710 --> 00:15:20.670
Of course, Polymer
has just announced--

00:15:20.670 --> 00:15:23.060
the Polymer team just
announced Paper Elements.

00:15:23.060 --> 00:15:26.170
These are implementations of
the material design pattern

00:15:26.170 --> 00:15:29.340
that have support in Polymer.

00:15:29.340 --> 00:15:32.080
So what's our wish list
for these UX model, right?

00:15:32.080 --> 00:15:33.930
One is, give us the
structure again.

00:15:33.930 --> 00:15:36.096
So just like Dart gives you
structure for your code,

00:15:36.096 --> 00:15:38.030
you want the same
structure in your UI.

00:15:38.030 --> 00:15:39.720
And then you want it to be
easy to make these components.

00:15:39.720 --> 00:15:41.678
You want it to be easy
to use these components,

00:15:41.678 --> 00:15:44.225
and have it easy to
share these components.

00:15:44.225 --> 00:15:45.100
So let's take a look.

00:15:52.470 --> 00:15:53.810
And [? Sigi's ?] talking to me.

00:15:53.810 --> 00:15:58.190
Oh, [? Sigi. ?] Just one second.

00:16:05.440 --> 00:16:07.190
So we have an app here.

00:16:07.190 --> 00:16:07.984
Our contacts app.

00:16:07.984 --> 00:16:09.900
Let me move the window
over just a little bit.

00:16:13.330 --> 00:16:14.440
Does that work OK?

00:16:14.440 --> 00:16:17.040
Yell at me if you can't
see anything, please.

00:16:17.040 --> 00:16:18.544
So this is our contacts app.

00:16:18.544 --> 00:16:19.960
We actually have
an implementation

00:16:19.960 --> 00:16:21.459
of our little context
class in here.

00:16:24.590 --> 00:16:27.060
Actually, let's go open that up.

00:16:27.060 --> 00:16:28.560
So this should look
pretty familiar.

00:16:28.560 --> 00:16:29.760
We've added an ID field.

00:16:29.760 --> 00:16:31.009
We've added a constructor.

00:16:31.009 --> 00:16:33.300
And we've done a little bit
of work to understand JSON.

00:16:33.300 --> 00:16:34.190
And that's about it.

00:16:36.801 --> 00:16:38.300
So if you look at
our web directory,

00:16:38.300 --> 00:16:40.341
you'll notice there's
actually no Dart code here.

00:16:40.341 --> 00:16:43.240
It's all encapsulated
in the HTML.

00:16:43.240 --> 00:16:44.690
And what' the HTML look like?

00:16:44.690 --> 00:16:46.730
Let's look at the
structure of our app.

00:16:46.730 --> 00:16:47.990
We have an app element.

00:16:47.990 --> 00:16:49.970
This is kind of the
meat and potatoes

00:16:49.970 --> 00:16:51.730
of the application
that does things.

00:16:51.730 --> 00:16:53.549
And you have this
little sync service.

00:16:53.549 --> 00:16:55.340
And this is actually
defined as an element.

00:16:55.340 --> 00:16:58.250
And why this is interesting and
important, I'll get to later.

00:16:58.250 --> 00:17:00.440
But I define an ID sync service.

00:17:00.440 --> 00:17:02.980
And then I grab a hold of it
with the app element and say,

00:17:02.980 --> 00:17:06.150
this is the ID of the thing
that does syncing for you.

00:17:06.150 --> 00:17:08.524
So let's go look at that local
sync store implementation.

00:17:14.099 --> 00:17:16.141
First, the element
definition is trivial.

00:17:16.141 --> 00:17:17.599
There's actually
no UI here at all.

00:17:20.250 --> 00:17:23.550
And you'll see that I
have a local sync store.

00:17:23.550 --> 00:17:26.500
Now before I dive into those
details of this implementation,

00:17:26.500 --> 00:17:31.160
you'll see that I'm implementing
a class, an interface-- sync.

00:17:31.160 --> 00:17:32.660
Let's open that.

00:17:32.660 --> 00:17:34.550
Now just that, I want
to show that already.

00:17:34.550 --> 00:17:37.732
This is not, like, fuzzy,
word wheel search or grepping.

00:17:37.732 --> 00:17:39.190
Like, I know what
the structure is.

00:17:39.190 --> 00:17:41.240
I know where that
sync definition is.

00:17:41.240 --> 00:17:43.730
I could have 50 definitions
of sync in this class,

00:17:43.730 --> 00:17:44.580
or this project.

00:17:44.580 --> 00:17:47.010
But I know what implementation
of sync I'm talking about.

00:17:47.010 --> 00:17:49.561
I can just open the definition.

00:17:49.561 --> 00:17:51.310
So you see I've defined
an abstract class.

00:17:51.310 --> 00:17:52.930
This is the interface for sync.

00:17:52.930 --> 00:17:54.790
If someone wants to
support syncing contacts

00:17:54.790 --> 00:17:57.660
in my little contact app,
this is what they implement.

00:17:57.660 --> 00:18:00.200
Now you don't care if this is
implemented as a UI component,

00:18:00.200 --> 00:18:02.241
if it stores it in
the browser cache.

00:18:02.241 --> 00:18:03.740
In my case, I'm
using local storage,

00:18:03.740 --> 00:18:04.850
which Seth told me this morning.

00:18:04.850 --> 00:18:05.475
I shouldn't be.

00:18:05.475 --> 00:18:07.024
It should all be
in index DB so he

00:18:07.024 --> 00:18:09.065
can go implement this
interface and use index DB,

00:18:09.065 --> 00:18:11.580
and do it the right way.

00:18:11.580 --> 00:18:13.370
By default, I have
an implementation.

00:18:13.370 --> 00:18:15.120
But it's a very simple model.

00:18:15.120 --> 00:18:17.810
And we can dig in more if
you're new to Dart to understand

00:18:17.810 --> 00:18:19.720
our async model,
and our list model,

00:18:19.720 --> 00:18:21.155
and our support for generics.

00:18:21.155 --> 00:18:23.440
We won't go into that now.

00:18:23.440 --> 00:18:26.120
So I have my little
local sync service.

00:18:26.120 --> 00:18:28.664
And the other half of my
application is my app element.

00:18:28.664 --> 00:18:29.580
So how does that look?

00:18:32.800 --> 00:18:34.320
So the app element
is in two parts--

00:18:34.320 --> 00:18:36.134
its code and its markup.

00:18:36.134 --> 00:18:37.550
The markup's very
straightforward.

00:18:37.550 --> 00:18:39.150
I define a Polymer element.

00:18:39.150 --> 00:18:41.010
I give it a name.

00:18:41.010 --> 00:18:42.800
I define some styles.

00:18:42.800 --> 00:18:44.740
And then I do a bunch
of interesting things.

00:18:44.740 --> 00:18:47.570
One is, I bring in
another element.

00:18:47.570 --> 00:18:50.120
So I define a custom
context edit element.

00:18:50.120 --> 00:18:53.080
I can handle events on this
element, by just doing On Save,

00:18:53.080 --> 00:18:54.960
and passing in a method.

00:18:54.960 --> 00:18:57.590
I can repeat over
properties on my class

00:18:57.590 --> 00:18:59.360
and say, go through
all the contacts

00:18:59.360 --> 00:19:02.480
and iterate and create a
bunch of contact items.

00:19:02.480 --> 00:19:05.017
And then I define
the script backing.

00:19:05.017 --> 00:19:06.600
If we look at the
script backing this,

00:19:06.600 --> 00:19:08.990
you'll see that I'm doing
exactly what we talked about.

00:19:08.990 --> 00:19:12.810
I define an app element, and I'm
extending the polymer element.

00:19:12.810 --> 00:19:15.040
This is all supported
in Dart today.

00:19:15.040 --> 00:19:16.817
So you can see, I can bind to--

00:19:16.817 --> 00:19:18.900
I can set the app element
and actually bind to it,

00:19:18.900 --> 00:19:20.800
so that that iteration
works really well.

00:19:20.800 --> 00:19:23.810
I can define a method that
says, when saved just click

00:19:23.810 --> 00:19:24.810
on my edit element.

00:19:24.810 --> 00:19:25.545
Call this method.

00:19:25.545 --> 00:19:27.360
And I can extract
a contact out of it

00:19:27.360 --> 00:19:29.710
and call save on
my sync service.

00:19:29.710 --> 00:19:33.380
So I have a clean model
for how I define my UI.

00:19:33.380 --> 00:19:34.632
All in markup.

00:19:34.632 --> 00:19:36.340
I can use binding to
reference properties

00:19:36.340 --> 00:19:38.120
on my underlying object.

00:19:38.120 --> 00:19:40.630
And I implement that using
types and all the great stuff

00:19:40.630 --> 00:19:43.380
in Dart, using a class.

00:19:43.380 --> 00:19:45.530
If you dig deep enough
into my elements--

00:19:45.530 --> 00:19:47.930
you see edit is
an example here--

00:19:47.930 --> 00:19:50.730
you'll see that I actually
use a bunch of Paper Elements.

00:19:50.730 --> 00:19:52.460
So my fun check box,
that I can't help

00:19:52.460 --> 00:19:55.330
but checking a bunch, because
the animation's so cool, right?

00:19:55.330 --> 00:19:57.590
I just import that
in my element.

00:19:57.590 --> 00:19:59.232
I say go get check box here.

00:19:59.232 --> 00:20:00.940
Of course, check box
is a bunch of stuff.

00:20:00.940 --> 00:20:02.320
It has shadows.

00:20:02.320 --> 00:20:03.570
It has cool animation effects.

00:20:03.570 --> 00:20:04.710
It has CSS.

00:20:04.710 --> 00:20:06.140
And all of that
just encapsulated.

00:20:06.140 --> 00:20:08.030
All I worry about is
importing the element.

00:20:08.030 --> 00:20:10.680
And then I can
just handle events.

00:20:10.680 --> 00:20:12.600
So I say OK, I have my button.

00:20:12.600 --> 00:20:15.120
When someone clicks on
this, call the Save action.

00:20:15.120 --> 00:20:18.130
When someone clicks Cancel,
call the Cancel action.

00:20:18.130 --> 00:20:19.940
None of these
dependencies leak through.

00:20:19.940 --> 00:20:21.860
The dependency is defined
once, in one place.

00:20:21.860 --> 00:20:22.970
Super easy to use.

00:20:26.441 --> 00:20:27.940
And of course, I
can run it locally.

00:20:35.480 --> 00:20:37.855
Here we're doing the work to
turn to the Polymer elements

00:20:37.855 --> 00:20:41.655
and everything, generate the
Dart we need, and drum roll.

00:20:45.480 --> 00:20:47.739
I swear, there's relativistic
time dilation on stage

00:20:47.739 --> 00:20:48.780
when your demo's loading.

00:20:52.670 --> 00:20:53.771
Come on.

00:20:53.771 --> 00:20:54.270
I believe.

00:20:57.941 --> 00:20:59.975
Let me try killing
off Dartium here.

00:20:59.975 --> 00:21:01.350
Oh, I have another
instance open.

00:21:01.350 --> 00:21:02.240
That might be it.

00:21:02.240 --> 00:21:02.870
Let me do this.

00:21:10.980 --> 00:21:14.200
Ah, the gods.

00:21:14.200 --> 00:21:15.590
Give me one more second.

00:21:15.590 --> 00:21:16.820
Make sure I'm not doing
anything silly here.

00:21:16.820 --> 00:21:17.528
I don't think so.

00:21:23.513 --> 00:21:25.400
Oh.

00:21:25.400 --> 00:21:26.700
Well, you saw the app already.

00:21:26.700 --> 00:21:28.950
Hopefully, the next stuff
will go a little bit better.

00:21:34.640 --> 00:21:37.090
So way deep in my
elements, I have

00:21:37.090 --> 00:21:42.140
my app, then my app element,
then my contact item,

00:21:42.140 --> 00:21:44.141
and inside contact item
I have my paper element.

00:21:44.141 --> 00:21:46.556
What's nice is, this inheritance
model that we're used to,

00:21:46.556 --> 00:21:48.532
the object oriented
programming, plays here.

00:21:48.532 --> 00:21:50.240
Every paper element
is a Polymer element.

00:21:50.240 --> 00:21:52.600
Every Polymer element
is a custom element.

00:21:52.600 --> 00:21:56.147
Every custom element
is just an element.

00:21:56.147 --> 00:21:58.480
And we're excited today that
we've done work on the Dart

00:21:58.480 --> 00:22:01.459
team to expose these 2U
as a Dart programmer.

00:22:01.459 --> 00:22:03.000
So core elements
has already been out

00:22:03.000 --> 00:22:04.430
and shipped by the Polymer team.

00:22:04.430 --> 00:22:07.360
And the paper elements is now
available, shipped this morning

00:22:07.360 --> 00:22:08.610
from the Polymer folks.

00:22:08.610 --> 00:22:11.670
And we now have a package
available, hopefully soon,

00:22:11.670 --> 00:22:14.832
that you can go install these
and use these on your own Dart

00:22:14.832 --> 00:22:18.180
apps, starting today.

00:22:18.180 --> 00:22:22.390
So let's go the other end
of the spectrum-- mobile.

00:22:22.390 --> 00:22:25.750
So deploying across
browsers is great.

00:22:25.750 --> 00:22:28.350
The problem is, if your
browser's only your desktop,

00:22:28.350 --> 00:22:30.690
you're missing out.

00:22:30.690 --> 00:22:32.564
We have a lot of other
devices on the web.

00:22:32.564 --> 00:22:33.980
In fact, many
people have argued--

00:22:33.980 --> 00:22:36.240
and actually, there's data
showing-- that this year

00:22:36.240 --> 00:22:38.900
sometime, the amount of web
traffic from mobile devices

00:22:38.900 --> 00:22:42.911
will exceed that
from desktop devices.

00:22:42.911 --> 00:22:44.160
And we hear this mantra a lot.

00:22:44.160 --> 00:22:46.076
In the keynote this
morning and other places--

00:22:46.076 --> 00:22:49.390
mobile first, mobile
first, mobile first.

00:22:49.390 --> 00:22:52.540
So how do we sell
this on our devices

00:22:52.540 --> 00:22:55.870
if we're going to do
mobile web development?

00:22:55.870 --> 00:22:58.430
We ship Chrome, a
custom build of Chrome,

00:22:58.430 --> 00:23:00.580
for Android as part of
our development tools

00:23:00.580 --> 00:23:02.000
that includes a Dart VM.

00:23:02.000 --> 00:23:04.945
So you can debug Dart
code on a mobile device,

00:23:04.945 --> 00:23:08.726
on your Android device, and have
a great development experience.

00:23:08.726 --> 00:23:10.350
So what we're excited
to show you today

00:23:10.350 --> 00:23:12.560
is, we now have this
Dartium, this custom

00:23:12.560 --> 00:23:14.302
build of Dartium
that runs on Android.

00:23:14.302 --> 00:23:16.260
We leverage the existing
tools that you already

00:23:16.260 --> 00:23:18.800
use, if you guys use
Chrome Inspect to do

00:23:18.800 --> 00:23:22.040
mobile development, you can
use those today with Dart.

00:23:22.040 --> 00:23:24.326
And this is all baked
into the Dart Editor.

00:23:24.326 --> 00:23:25.200
So let's show a demo.

00:23:40.300 --> 00:23:42.860
Did you try turning it off
and turning it back on again?

00:23:42.860 --> 00:23:43.609
We'll try that.

00:23:50.180 --> 00:23:53.182
So you see that I have my
device plugged in here.

00:23:53.182 --> 00:23:54.140
I'll show you the wolf.

00:23:54.140 --> 00:23:56.230
This is proof that my
device is running here.

00:23:56.230 --> 00:23:58.060
I'm hitting local
host on a device,

00:23:58.060 --> 00:24:00.070
which doesn't make
a lot of sense.

00:24:00.070 --> 00:24:01.245
So let's see how that works.

00:24:01.245 --> 00:24:03.120
The first thing you do
is you open up Chrome.

00:24:07.340 --> 00:24:07.840
Oops.

00:24:11.750 --> 00:24:14.414
You'll see that, again, if
people played with the dev

00:24:14.414 --> 00:24:15.955
tools in Chrome,
this already exists.

00:24:15.955 --> 00:24:19.620
You can actually define--
connect to your device.

00:24:19.620 --> 00:24:22.016
You set up debugging
on your Android device.

00:24:22.016 --> 00:24:23.390
Set up port
forwarding, so we can

00:24:23.390 --> 00:24:25.290
find those ports and
forward connections.

00:24:25.290 --> 00:24:28.850
And now you can debug an
application on Android.

00:24:28.850 --> 00:24:30.850
So now if we go in an
then we right-click and do

00:24:30.850 --> 00:24:36.719
run on mobile, from our editor,
so we're spinning up pub serve,

00:24:36.719 --> 00:24:37.510
like we usually do.

00:24:39.892 --> 00:24:41.350
And now you'll see
what we're doing

00:24:41.350 --> 00:24:43.379
is we're installing
content shell.

00:24:43.379 --> 00:24:45.170
So we're actually
installing an application

00:24:45.170 --> 00:24:46.544
on your Android
device, now that'

00:24:46.544 --> 00:24:49.120
you've authorized it for debug.

00:24:49.120 --> 00:24:51.440
And this content shell device
is this Dartium instance.

00:24:51.440 --> 00:24:52.940
It actually is the
Dart VM built in.

00:24:56.050 --> 00:24:59.770
So if we switch
over here, you see

00:24:59.770 --> 00:25:01.340
I have the app running here.

00:25:01.340 --> 00:25:05.810
I can go in and
create a new contact.

00:25:05.810 --> 00:25:08.857
This is typing when
you're in a hurry.

00:25:08.857 --> 00:25:11.190
What's great is you still the
same debugging experience.

00:25:11.190 --> 00:25:14.320
So let's go into our little--
switching is always fun.

00:25:14.320 --> 00:25:16.630
Let's go back to the--
let's go back to our app.

00:25:16.630 --> 00:25:19.100
Maybe to our local data store.

00:25:19.100 --> 00:25:20.600
Let's just randomly
throw somewhere.

00:25:24.880 --> 00:25:25.380
Oops.

00:25:25.380 --> 00:25:27.380
Let's complete our string.

00:25:27.380 --> 00:25:30.490
Things that are
nice and upfront.

00:25:30.490 --> 00:25:32.990
So if I add a contact, I
should get a throw here.

00:25:32.990 --> 00:25:34.017
Let's go in now.

00:25:34.017 --> 00:25:34.850
Add another contact.

00:25:41.150 --> 00:25:41.690
Drum roll.

00:25:41.690 --> 00:25:43.709
Oh, you can do it.

00:25:43.709 --> 00:25:44.500
Give me one second.

00:25:47.790 --> 00:25:49.270
The demo gods are
frowning upon me.

00:25:51.540 --> 00:25:52.540
Let's try one more time.

00:26:02.040 --> 00:26:07.005
Actually, instead of throwing
here, let's go into our app.

00:26:10.194 --> 00:26:12.110
And when someone calls
save, let's throw here.

00:26:16.470 --> 00:26:18.430
Great.

00:26:18.430 --> 00:26:19.750
Let's reload the app.

00:26:19.750 --> 00:26:21.833
That's probably what caused
the problem last time.

00:26:24.024 --> 00:26:24.940
Go back to the podium.

00:26:27.539 --> 00:26:28.705
It's creating a new contact.

00:26:31.810 --> 00:26:33.740
Save.

00:26:33.740 --> 00:26:40.510
You know it's at hung,
because we hit a break point.

00:26:40.510 --> 00:26:42.740
And so this is all the
stuff you'd expect.

00:26:42.740 --> 00:26:45.090
You can actually go in
and see the stack trace.

00:26:45.090 --> 00:26:47.010
The fonts aren't
scaled very well here.

00:26:47.010 --> 00:26:49.690
You see this stack trace,
and what was called.

00:26:49.690 --> 00:26:51.469
You can see the
objects in scope.

00:26:51.469 --> 00:26:53.510
And actually, I had a lot
of fun developing this.

00:26:53.510 --> 00:26:55.810
I actually found myself
just using the device,

00:26:55.810 --> 00:26:56.500
as I was coding.

00:26:56.500 --> 00:26:58.416
And coding along, I hit
Refresh on the device,

00:26:58.416 --> 00:27:00.080
and it just worked,
which is actually

00:27:00.080 --> 00:27:01.163
we should be doing, right?

00:27:01.163 --> 00:27:03.470
We should be coding on the
devices we're targeting.

00:27:03.470 --> 00:27:04.750
And it's more and more mobile.

00:27:08.600 --> 00:27:10.940
So we have a version of Dartium.

00:27:10.940 --> 00:27:13.810
Again, this is a custom, debug
only version of Dartium design

00:27:13.810 --> 00:27:15.017
that runs Dart VM.

00:27:15.017 --> 00:27:16.600
We leverage the
existing Chrome tools.

00:27:16.600 --> 00:27:17.808
It's all based on the Editor.

00:27:17.808 --> 00:27:20.450
And it's available
today, with Dart 1.5.

00:27:20.450 --> 00:27:22.540
So go install.

00:27:22.540 --> 00:27:23.390
So that's one end.

00:27:23.390 --> 00:27:28.080
Let's go all the way to
the other end-- the cloud.

00:27:28.080 --> 00:27:30.380
So we talked a lot about
targeting browsers with Dart.

00:27:30.380 --> 00:27:31.879
And actually that
was our main focus

00:27:31.879 --> 00:27:35.320
when we started-- support
the open web, open browsers.

00:27:35.320 --> 00:27:37.570
But it turns out, we've done
a lot of work on this VM.

00:27:37.570 --> 00:27:39.903
And it'd be nice to use the
VM in places other than just

00:27:39.903 --> 00:27:42.686
our debug tools in Dartium.

00:27:42.686 --> 00:27:45.060
It actually turns out it's
very easy to write a Dart app.

00:27:45.060 --> 00:27:48.800
You can just define that, which
works really well, and run it.

00:27:48.800 --> 00:27:50.220
We ship a Dart command.

00:27:50.220 --> 00:27:52.324
So we didn't wait for
node Dart to ship.

00:27:52.324 --> 00:27:53.990
We figured we'd just
ship a command that

00:27:53.990 --> 00:27:56.420
lets you run Dart
directly in the shell,

00:27:56.420 --> 00:27:58.272
and execute Dart code directly.

00:27:58.272 --> 00:28:00.480
And in fact, the things I
talked about today, Dart2js

00:28:00.480 --> 00:28:04.080
or compiler or analyzer or
pub system or documentation

00:28:04.080 --> 00:28:06.959
generator-- these are
all written in Dart.

00:28:06.959 --> 00:28:09.250
And they're designed to run
independent of the browser.

00:28:09.250 --> 00:28:11.416
So already in the Dart team
today, like our compiler

00:28:11.416 --> 00:28:14.842
we're bootstrap Dart in Dart.

00:28:14.842 --> 00:28:16.300
And we ship a
library that lets you

00:28:16.300 --> 00:28:18.424
access to all the things
you want to access, right?

00:28:18.424 --> 00:28:22.270
Directories and files, web
sockets, secure sockets,

00:28:22.270 --> 00:28:25.820
htp serving, all the things
you want to do-- file watching.

00:28:25.820 --> 00:28:27.020
You can go into this today.

00:28:27.020 --> 00:28:29.186
Obviously, you can't use
these APIs in a browser app

00:28:29.186 --> 00:28:32.350
anymore than you could use
button element in a server app.

00:28:32.350 --> 00:28:34.237
We have access to these things.

00:28:34.237 --> 00:28:36.570
And we've done a lot of work
to improve our performance.

00:28:36.570 --> 00:28:37.944
In the last several
months, we've

00:28:37.944 --> 00:28:40.260
already done work,
I think 6x increase,

00:28:40.260 --> 00:28:42.902
in file serving scenarios.

00:28:42.902 --> 00:28:45.110
So we've done a lot of work
to optimize these things.

00:28:45.110 --> 00:28:47.443
It turns out you can actually
deploy server apps in Dart

00:28:47.443 --> 00:28:52.939
today, on the Google Cloud
Platform, using Compute Engine.

00:28:52.939 --> 00:28:54.980
I know, people, this isn't
exactly what you want,

00:28:54.980 --> 00:28:55.730
but bear with me.

00:28:55.730 --> 00:28:57.780
It's actually a great
way to go play with Dart

00:28:57.780 --> 00:29:01.900
today on the server, or
anywhere that supports Docker.

00:29:01.900 --> 00:29:04.760
So obviously, the cloud
folks have done a lot of work

00:29:04.760 --> 00:29:07.380
to support Docker and actually
Docker came out a week ago

00:29:07.380 --> 00:29:08.539
as a v1 release.

00:29:08.539 --> 00:29:10.830
And as part of that, Google
announced that actually you

00:29:10.830 --> 00:29:12.850
can deploy Docker
images much easier

00:29:12.850 --> 00:29:15.581
now on Google Compute
infrastructure.

00:29:15.581 --> 00:29:18.205
In fact, if you go searching for
Docker Google Cloud Platform--

00:29:18.205 --> 00:29:20.420
the URL is a little
ugly-- you can

00:29:20.420 --> 00:29:23.470
go see about deploying Docker
images on Google Cloud.

00:29:23.470 --> 00:29:25.010
And it turns out,
it's really simple

00:29:25.010 --> 00:29:28.210
to create images that
use Docker with Dart.

00:29:28.210 --> 00:29:29.650
In fact, I have a sample here.

00:29:29.650 --> 00:29:31.490
So if you're running
Docker on your laptop

00:29:31.490 --> 00:29:34.030
now, even if you don't
have the Dart tools,

00:29:34.030 --> 00:29:39.590
you can go run-- what is
it-- Docker run, kevmoo.

00:29:39.590 --> 00:29:40.520
I have it registered.

00:29:40.520 --> 00:29:42.770
And like, spin up a Dart
server on your local machine,

00:29:42.770 --> 00:29:45.260
and actually test it out on
your laptop, all using Docker.

00:29:45.260 --> 00:29:48.650
It's a great story, and we
play along there really nicely.

00:29:48.650 --> 00:29:51.160
Of course, people want a
little bit more than that.

00:29:51.160 --> 00:29:53.990
We've been hearing about
requests for app engine support

00:29:53.990 --> 00:29:57.914
since Dart started, basically,
for lots of reasons, right?

00:29:57.914 --> 00:29:58.830
You want a Dev Server.

00:29:58.830 --> 00:30:00.600
So things like
Memcache and Data Store

00:30:00.600 --> 00:30:03.164
you can run locally, and have
those local copies as you

00:30:03.164 --> 00:30:04.330
iterate in your development.

00:30:04.330 --> 00:30:05.829
And obviously,
there's great support

00:30:05.829 --> 00:30:08.490
for monitoring and
management as well.

00:30:08.490 --> 00:30:11.160
So the cloud folks
have done a great job

00:30:11.160 --> 00:30:15.640
and recently announced-- I think
in March-- App Engine custom

00:30:15.640 --> 00:30:16.850
run times.

00:30:16.850 --> 00:30:18.760
This is the ability
for bring your own run

00:30:18.760 --> 00:30:21.040
time to App Engine.

00:30:21.040 --> 00:30:22.540
Right now it's in private beta.

00:30:22.540 --> 00:30:23.700
You can't do this.

00:30:23.700 --> 00:30:26.650
But the cloud team is working
actively to bring this out.

00:30:26.650 --> 00:30:28.490
So you can run any
language or runtime

00:30:28.490 --> 00:30:31.520
you want and have the same
access to the App Engine's

00:30:31.520 --> 00:30:32.517
APIs.

00:30:32.517 --> 00:30:34.100
And what we're excited
about today is,

00:30:34.100 --> 00:30:36.307
I'll give you a sneak peek
of the support in Dart.

00:30:36.307 --> 00:30:38.640
The Dart team is using the
support provided by the cloud

00:30:38.640 --> 00:30:42.300
engine so that we provide an
App Engine experience using

00:30:42.300 --> 00:30:45.040
Dart on Google's infrastructure.

00:30:45.040 --> 00:30:46.030
So what do we have?

00:30:46.030 --> 00:30:46.910
We have libraries.

00:30:46.910 --> 00:30:50.404
We have an App Engine library,
a memcache and cloud_datastore.

00:30:50.404 --> 00:30:52.070
Again, these aren't
public yet, so don't

00:30:52.070 --> 00:30:53.570
go looking for them
in the pub repository.

00:30:53.570 --> 00:30:54.319
But they're there.

00:30:54.319 --> 00:30:56.400
And we're working on them.

00:30:56.400 --> 00:30:58.830
And it turns out it's really
straightforward to use.

00:30:58.830 --> 00:31:03.000
So you call runAppEngine
and you give it a handler.

00:31:03.000 --> 00:31:04.380
This is a lambda definition.

00:31:04.380 --> 00:31:06.940
And in that context you
can handle the requests.

00:31:06.940 --> 00:31:09.480
You can access the data store,
memcached, or anything else.

00:31:09.480 --> 00:31:11.605
The coding model's actually
really straightforward.

00:31:15.060 --> 00:31:16.810
And so how does this
play with pub, right?

00:31:16.810 --> 00:31:18.080
Because we have this
pub system running that

00:31:18.080 --> 00:31:19.880
handles compiling your assets.

00:31:19.880 --> 00:31:21.410
So we try to be smart here.

00:31:21.410 --> 00:31:23.190
Basically, when a
request comes in,

00:31:23.190 --> 00:31:25.100
if it's accessing
static content, things

00:31:25.100 --> 00:31:28.280
you've defined in your web
directory, it gets run via pub

00:31:28.280 --> 00:31:29.820
serve.

00:31:29.820 --> 00:31:32.484
And then everything else it's
an executable you define.

00:31:32.484 --> 00:31:34.650
And by convention, it's
usually in the bin directory

00:31:34.650 --> 00:31:35.960
called server.

00:31:35.960 --> 00:31:37.335
And then when we
deploy your app,

00:31:37.335 --> 00:31:40.325
what we do is we do work
to build your assets,

00:31:40.325 --> 00:31:42.450
actually create a static
copy of all the JavaScript

00:31:42.450 --> 00:31:43.283
and everything else.

00:31:43.283 --> 00:31:45.670
And then we serve
this to App Engine.

00:31:45.670 --> 00:31:47.912
And so in that model you
get a static file handler

00:31:47.912 --> 00:31:49.370
that handles all
the static assets.

00:31:49.370 --> 00:31:51.410
And everything else
runs your code normally.

00:31:51.410 --> 00:31:53.160
So you have a great
development experience

00:31:53.160 --> 00:31:55.107
on your local machine
and when you deploy, you

00:31:55.107 --> 00:31:56.565
get all your assets
compiled nicely

00:31:56.565 --> 00:31:59.520
so it runs across any browser.

00:31:59.520 --> 00:32:03.210
We've also done work
for the data model.

00:32:03.210 --> 00:32:06.430
This is actually on a
model we're iterating on.

00:32:06.430 --> 00:32:08.140
The idea is you
can define a class,

00:32:08.140 --> 00:32:09.310
define a meta-model for it.

00:32:09.310 --> 00:32:12.060
This is the shape of my class.

00:32:12.060 --> 00:32:14.750
Set up a meta model to say
these are the types and things.

00:32:14.750 --> 00:32:16.140
I'm hoping we can do
work here to actually

00:32:16.140 --> 00:32:17.880
do some code generation
for you as well.

00:32:17.880 --> 00:32:20.171
So because you've already
annotated your Greeting model

00:32:20.171 --> 00:32:21.750
in this case, with
strings and dates,

00:32:21.750 --> 00:32:23.416
we can just generate
the model for you

00:32:23.416 --> 00:32:25.040
and just generate
the data store types.

00:32:25.040 --> 00:32:27.139
And it just works.

00:32:27.139 --> 00:32:27.930
So let's do a demo.

00:32:35.449 --> 00:32:36.990
First, let me close
some things down.

00:32:42.390 --> 00:32:44.159
So you see we have a server app.

00:32:44.159 --> 00:32:45.200
You guys can see this OK?

00:32:47.870 --> 00:32:50.560
First, we'll open
the web directory

00:32:50.560 --> 00:32:54.180
because I want to show you this.

00:32:54.180 --> 00:32:58.690
So the project name
is contacts_server.

00:32:58.690 --> 00:33:02.840
What you'll notice is, I've
actually imported the contacts

00:33:02.840 --> 00:33:04.880
app that I just defined earlier.

00:33:04.880 --> 00:33:06.870
So I had a contacts
app, and it had

00:33:06.870 --> 00:33:08.830
custom elements in
the sync adapter.

00:33:08.830 --> 00:33:11.380
I'm importing that
into this project.

00:33:11.380 --> 00:33:12.990
I'm actually
depending on it here.

00:33:12.990 --> 00:33:17.010
So if you look at the HTML
file defined in my server,

00:33:17.010 --> 00:33:18.660
I'm defining the
same app element

00:33:18.660 --> 00:33:20.640
and saying go get
your sync element.

00:33:20.640 --> 00:33:21.940
And here's the difference.

00:33:21.940 --> 00:33:25.320
Instead of using the poorly
implemented local storage

00:33:25.320 --> 00:33:29.370
implementation for sync, I
have a cloud sync adapter.

00:33:29.370 --> 00:33:32.239
And I define that
in this project.

00:33:32.239 --> 00:33:34.530
So let's go look at cloud
sync, because everything else

00:33:34.530 --> 00:33:35.837
runs the exact same way.

00:33:35.837 --> 00:33:38.170
In fact, I'll take a moment
to actually make this point.

00:33:38.170 --> 00:33:40.545
What's nice is, components
are just like libraries.

00:33:40.545 --> 00:33:41.920
You can define
them in a package,

00:33:41.920 --> 00:33:43.670
you can re-use them
in another package.

00:33:43.670 --> 00:33:45.379
So this is a great
model for separation.

00:33:45.379 --> 00:33:46.920
You can imagine
giving your front end

00:33:46.920 --> 00:33:49.330
guy this package with
a little local store

00:33:49.330 --> 00:33:51.030
and say, go make the UI pretty.

00:33:51.030 --> 00:33:51.700
Ha.

00:33:51.700 --> 00:33:54.650
And then he'll beat
you with Comic Sans.

00:33:54.650 --> 00:33:56.150
Gp make the UI
interesting and great

00:33:56.150 --> 00:33:57.691
and a great user
experience, and I'll

00:33:57.691 --> 00:33:59.030
go work on the server stuff.

00:33:59.030 --> 00:34:01.613
And you know that if you change
the sync interface or anything

00:34:01.613 --> 00:34:05.370
else, the tools will tell
you and help you along.

00:34:05.370 --> 00:34:09.550
So you have an
implementation of-- oops,

00:34:09.550 --> 00:34:16.780
go on here-- a sync adapter.

00:34:16.780 --> 00:34:17.780
Implement sync again.

00:34:17.780 --> 00:34:19.394
It's a Polymer element.

00:34:19.394 --> 00:34:21.685
And this time, instead of
talking to the local storage,

00:34:21.685 --> 00:34:25.440
I actually say, post
JSON and get JSON

00:34:25.440 --> 00:34:26.989
using our web request model.

00:34:26.989 --> 00:34:29.380
So now I'm doing XHR and
this client provider.

00:34:29.380 --> 00:34:31.690
This is all code that
runs on the client.

00:34:31.690 --> 00:34:34.690
And actually go access the
endpoint API slash contacts.

00:34:34.690 --> 00:34:37.210
So I'm doing gets against that,
I'm doing post against that.

00:34:37.210 --> 00:34:40.210
This is all still browser code.

00:34:40.210 --> 00:34:42.340
So we know what the browser
code looks like, right?

00:34:42.340 --> 00:34:43.510
So what's running on the server?

00:34:43.510 --> 00:34:45.426
We talk about all the
stuff [? that will be ?]

00:34:45.426 --> 00:34:46.870
served to the client.

00:34:46.870 --> 00:34:51.239
On the server side, we've
defined a server binary

00:34:51.239 --> 00:34:53.929
in our bin directory.

00:34:53.929 --> 00:34:55.790
And at the end,
all we say here is

00:34:55.790 --> 00:34:58.100
I have a little
wrapper that makes

00:34:58.100 --> 00:35:00.724
building composable
applications easier.

00:35:00.724 --> 00:35:01.390
I call it shelf.

00:35:01.390 --> 00:35:02.710
I'm going to talk
about this tomorrow.

00:35:02.710 --> 00:35:04.650
Come and find my talk
about shelf tomorrow.

00:35:04.650 --> 00:35:06.483
But all I'm saying is
serve up this handler.

00:35:06.483 --> 00:35:07.680
It's just a method.

00:35:07.680 --> 00:35:10.040
So I have my little
handler method.

00:35:10.040 --> 00:35:12.790
And this does work to break
up the URI into segments.

00:35:12.790 --> 00:35:14.745
If the segment's
API, it calls off

00:35:14.745 --> 00:35:16.110
to another handler I've defined.

00:35:16.110 --> 00:35:17.410
We'll get into that later.

00:35:17.410 --> 00:35:18.506
And otherwise.

00:35:18.506 --> 00:35:20.380
it does some interesting
memcache stuff, just

00:35:20.380 --> 00:35:22.380
to kind of show that it's there.

00:35:22.380 --> 00:35:25.980
So let me go spin up my server.

00:35:25.980 --> 00:35:29.955
You see it running
G cloud, app run.

00:35:29.955 --> 00:35:31.330
We'll wait for
that to get going.

00:35:34.020 --> 00:35:38.609
Listing on on port 8080.

00:35:38.609 --> 00:35:39.900
I should pick a browser to use.

00:35:39.900 --> 00:35:40.650
Let's do this one.

00:35:49.009 --> 00:35:50.675
This is where we hope
for the demo gods.

00:35:55.470 --> 00:35:57.340
There we go.

00:35:57.340 --> 00:35:58.900
So Seth, demo time.

00:35:58.900 --> 00:35:59.926
I'll add an item here.

00:36:03.580 --> 00:36:04.220
And save.

00:36:07.510 --> 00:36:09.660
And save.

00:36:09.660 --> 00:36:13.030
Make sure editing
isn't happening here.

00:36:13.030 --> 00:36:14.990
So what's happening here?

00:36:14.990 --> 00:36:16.480
We have this data store handler.

00:36:16.480 --> 00:36:18.370
And it turns out,
I have another API

00:36:18.370 --> 00:36:20.370
that defines a handler
for data store.

00:36:20.370 --> 00:36:23.050
And what I do here is I
say, you have endpoints.

00:36:23.050 --> 00:36:25.410
In this case, there's
a context endpoint

00:36:25.410 --> 00:36:27.152
and it maps to a JSON mapper.

00:36:27.152 --> 00:36:28.360
This is a class I've defined.

00:36:30.999 --> 00:36:32.540
What this handler
does is, because we

00:36:32.540 --> 00:36:34.650
have rich types in
Dart, we can say hey,

00:36:34.650 --> 00:36:36.480
for a list of
strings in this map,

00:36:36.480 --> 00:36:38.860
take all these JSON
mappers and implement them

00:36:38.860 --> 00:36:40.870
as API front ends,
for all the stuff.

00:36:40.870 --> 00:36:45.450
So if I go to my app and I
go to API slash contacts,

00:36:45.450 --> 00:36:47.507
you see that this is
returning the JSON.

00:36:47.507 --> 00:36:49.090
So because we have
rich types in Dart,

00:36:49.090 --> 00:36:50.540
I can do things like
define these mappers

00:36:50.540 --> 00:36:52.195
and say, here's a
list of the endpoints

00:36:52.195 --> 00:36:56.084
I want to support, with post for
populating and delete in get.

00:36:56.084 --> 00:36:57.500
And it just defines
the endpoints.

00:36:57.500 --> 00:36:58.590
And I write it once.

00:36:58.590 --> 00:37:00.260
Now of course, this is just
getting started, right?

00:37:00.260 --> 00:37:02.635
Because you want to implement
security and authentication

00:37:02.635 --> 00:37:03.600
for these APIs.

00:37:03.600 --> 00:37:05.808
But in terms of a model,
it's really straightforward.

00:37:09.347 --> 00:37:10.930
And so the other
interesting thing is,

00:37:10.930 --> 00:37:12.750
all this uses the
existing infrastructure

00:37:12.750 --> 00:37:14.370
I defined before.

00:37:14.370 --> 00:37:17.710
So you talk about
serializing the objects.

00:37:17.710 --> 00:37:21.380
I'm using the two JSON from JSON
that I defined in the object.

00:37:21.380 --> 00:37:22.850
All the same code applies here.

00:37:22.850 --> 00:37:24.760
So I'm using the exact
same context type.

00:37:24.760 --> 00:37:28.170
Let me open that up.

00:37:28.170 --> 00:37:31.440
I take the
implementation of contact

00:37:31.440 --> 00:37:35.070
that I defined in the other
application, and use it here.

00:37:35.070 --> 00:37:38.840
And I extend it
with a model type.

00:37:38.840 --> 00:37:40.250
And model is the
base type that's

00:37:40.250 --> 00:37:42.541
used in data store This is
another convention in Dart--

00:37:42.541 --> 00:37:45.640
the ability to actually
mix in classes.

00:37:45.640 --> 00:37:48.640
So now that my DS contact
is the same kind of contact,

00:37:48.640 --> 00:37:50.190
and I have to add
some constructors.

00:37:50.190 --> 00:37:52.690
But otherwise, I'm re-using
the contact implementation

00:37:52.690 --> 00:37:54.690
from the other library,
the exact same code that

00:37:54.690 --> 00:37:55.567
runs in the browser.

00:37:55.567 --> 00:37:56.650
It runs in the server now.

00:37:56.650 --> 00:37:58.150
And I extend it
with a functionality

00:37:58.150 --> 00:38:01.050
so it supports data store.

00:38:01.050 --> 00:38:03.540
And of course, a data
store demo would not

00:38:03.540 --> 00:38:09.280
be complete unless I go into the
App Engine Devs Server Manager.

00:38:09.280 --> 00:38:10.980
I look at my data store.

00:38:10.980 --> 00:38:12.480
I see I have Seth here.

00:38:12.480 --> 00:38:13.250
Seth, go away.

00:38:20.637 --> 00:38:21.970
And we see that Seth's gone now.

00:38:30.170 --> 00:38:33.100
So again, this is the
App Engine customer run

00:38:33.100 --> 00:38:35.660
time work is work being
done by the cloud team

00:38:35.660 --> 00:38:37.052
to offer bring
your own run time.

00:38:37.052 --> 00:38:38.760
So anyone can have
the same functionality

00:38:38.760 --> 00:38:41.950
that exists currently in App
Engine with native languages,

00:38:41.950 --> 00:38:43.510
currently in private beta.

00:38:43.510 --> 00:38:45.950
They're working hard
to have a release.

00:38:45.950 --> 00:38:48.592
Andrew said maybe this year.

00:38:48.592 --> 00:38:49.800
I can't wait to play with it.

00:38:51.827 --> 00:38:53.910
We're building on this
infrastructure that already

00:38:53.910 --> 00:38:57.230
exists, to bring Dart to this
new world of custom run times.

00:38:57.230 --> 00:38:59.010
Again, not ready yet--
we're working hard.

00:38:59.010 --> 00:39:01.460
As soon as the cloud team has
custom run times available,

00:39:01.460 --> 00:39:02.920
we'll be right there
with Dart implementation

00:39:02.920 --> 00:39:04.210
so you can start playing.

00:39:04.210 --> 00:39:05.280
And we're actually
hoping that all

00:39:05.280 --> 00:39:07.655
of our implementation for
Dart, like the rest of the Dart

00:39:07.655 --> 00:39:09.436
project, will be
completely open source.

00:39:09.436 --> 00:39:11.060
So you can see how
we implement things.

00:39:11.060 --> 00:39:12.290
You can send
patches to us if you

00:39:12.290 --> 00:39:14.390
wanted to use data store
model in a different way.

00:39:14.390 --> 00:39:15.460
We'd love help.

00:39:15.460 --> 00:39:17.440
And if you go here,
there's a mailing list.

00:39:17.440 --> 00:39:21.980
You can stay tuned for more
information about this project.

00:39:21.980 --> 00:39:23.277
So that's cloud.

00:39:23.277 --> 00:39:24.360
And that's our end-to-end.

00:39:27.190 --> 00:39:29.700
The goal of Dart is having
this great end-to-end developer

00:39:29.700 --> 00:39:30.930
experience.

00:39:30.930 --> 00:39:32.775
Great way to find
code, integrates

00:39:32.775 --> 00:39:34.330
with Polymer, which
is a great way

00:39:34.330 --> 00:39:36.780
to find UI, which
implements paper, which

00:39:36.780 --> 00:39:41.610
is a beautiful implementation
of UI components.

00:39:41.610 --> 00:39:43.970
We go to mobile, give
you a great experience

00:39:43.970 --> 00:39:44.825
to target mobile.

00:39:44.825 --> 00:39:46.450
And we're looking
forward to giving you

00:39:46.450 --> 00:39:49.310
a great experience
for server as well.

00:39:49.310 --> 00:39:50.050
What's next?

00:39:50.050 --> 00:39:54.040
Tomorrow morning, we
have a talk about Spark,

00:39:54.040 --> 00:39:58.420
which is an IDE written in
Dart that runs on Chromebooks.

00:39:58.420 --> 00:40:00.050
It's a Chrome app.

00:40:00.050 --> 00:40:02.610
1/3 of the talk will all be
about Polymer and other things,

00:40:02.610 --> 00:40:05.150
about building packaged
apps, Chrome apps, excuse me,

00:40:05.150 --> 00:40:05.940
in Dart.

00:40:05.940 --> 00:40:08.126
So please come to that.

00:40:08.126 --> 00:40:10.500
To learn anything about what
we're working on on the Dart

00:40:10.500 --> 00:40:13.470
team, please go to dartlang.org.

00:40:13.470 --> 00:40:16.570
We're on Google+ at +dartlang,
@dartlang on Twitter,

00:40:16.570 --> 00:40:19.510
and of course, hash
tags are all cool.

00:40:19.510 --> 00:40:21.560
So tweet us if you
have questions.

00:40:21.560 --> 00:40:23.380
And thank you very much.

00:40:23.380 --> 00:40:24.930
[APPLAUSE]

