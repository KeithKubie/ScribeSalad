WEBVTT
Kind: captions
Language: en

00:00:01.740 --> 00:00:03.620
In this video, I'll cover
two important

00:00:03.620 --> 00:00:04.970
structures in any language--

00:00:04.970 --> 00:00:08.010
the if statement and
logical operators.

00:00:08.010 --> 00:00:13.280
I'll also introduce this if/else
and which functions.

00:00:13.280 --> 00:00:15.800
I'm going to occasionally rely
on the stock data used the

00:00:15.800 --> 00:00:18.890
last video, but to keep things
simple, I'm also going to omit

00:00:18.890 --> 00:00:21.840
any rows that have an NA value,
as these represent

00:00:21.840 --> 00:00:25.630
missing observations
in the data.

00:00:25.630 --> 00:00:28.880
An if statement is used to
execute some section of code

00:00:28.880 --> 00:00:33.140
on the condition that a
particular statement is true.

00:00:33.140 --> 00:00:36.470
In this setup, the code inside
the braces will run if the

00:00:36.470 --> 00:00:39.000
condition is true.

00:00:39.000 --> 00:00:42.120
For example, suppose I want to
check whether the first entry

00:00:42.120 --> 00:00:45.360
in the stock data
was up or down.

00:00:45.360 --> 00:00:47.760
If it was up, I want to create
a variable called status that

00:00:47.760 --> 00:00:50.860
takes the value up.

00:00:50.860 --> 00:00:53.490
It would also be informative to
label the status as down if

00:00:53.490 --> 00:00:55.070
the stock is down.

00:00:55.070 --> 00:00:58.890
So I'll add an else statement.

00:00:58.890 --> 00:01:01.180
The code in the second set of
braces will execute if the

00:01:01.180 --> 00:01:02.700
condition is false.

00:01:02.700 --> 00:01:04.590
However, this still
isn't quite right.

00:01:04.590 --> 00:01:08.150
What if the stock opens and
closes at the same price?

00:01:08.150 --> 00:01:10.300
I can add a condition for the
second set of code using a

00:01:10.300 --> 00:01:13.680
second if statement after
the else command.

00:01:13.680 --> 00:01:15.900
Then, I'll add another else
command at the end that labels

00:01:15.900 --> 00:01:20.630
status with a value of flat if
the stock is flat for the day.

00:01:20.630 --> 00:01:23.770
I also want to briefly mention
the if/else function, which

00:01:23.770 --> 00:01:27.390
could be used in this context
to create an up, down, flat

00:01:27.390 --> 00:01:31.060
vector for all the elements in
the stocks data in just a few

00:01:31.060 --> 00:01:32.900
lines of code.

00:01:32.900 --> 00:01:35.620
The if/else function takes
three arguments--

00:01:35.620 --> 00:01:38.370
a vector of length one or more
that contains true and false

00:01:38.370 --> 00:01:43.570
values, a value to take for
each true instance, and a

00:01:43.570 --> 00:01:46.680
value to take for each
false instance.

00:01:46.680 --> 00:01:48.820
Though this still isn't quite
right, because I need to

00:01:48.820 --> 00:01:53.430
return a value of down if the
close is lower than the open.

00:01:53.430 --> 00:01:55.870
I can do this by creating the
second condition, and I'd need

00:01:55.870 --> 00:01:59.860
one more if/else command.

00:01:59.860 --> 00:02:01.310
Here, I've done something
subtle.

00:02:01.310 --> 00:02:04.110
I have provided the status
argument for those cases where

00:02:04.110 --> 00:02:06.800
the close is not lower
than the open.

00:02:06.800 --> 00:02:09.100
I've exploited a special
feature of the if/else

00:02:09.100 --> 00:02:11.880
function, which is that when a
vector of length greater than

00:02:11.880 --> 00:02:15.240
one is provided in the second
or third arguments, if/else

00:02:15.240 --> 00:02:15.960
will be performed,

00:02:15.960 --> 00:02:19.460
element-wise, for that argument.

00:02:19.460 --> 00:02:21.300
I'll leave it to you to
verify that this code

00:02:21.300 --> 00:02:23.210
works and why it works.

00:02:23.210 --> 00:02:26.160
You should think about
each possible case.

00:02:26.160 --> 00:02:30.080
A stock can be up, down, or
flat, and I strongly recommend

00:02:30.080 --> 00:02:32.540
you create some test data and
work your way through each

00:02:32.540 --> 00:02:35.460
step of the code.

00:02:35.460 --> 00:02:38.990
Next, I want to talk about
logical operators.

00:02:38.990 --> 00:02:41.500
I'm going to create a vector
with 10 random integers

00:02:41.500 --> 00:02:44.730
between negative 1 and
13, and a second

00:02:44.730 --> 00:02:47.020
vector in the same way.

00:02:47.020 --> 00:02:49.460
I'd like to know whether all
of the elements in x are

00:02:49.460 --> 00:02:51.320
greater than zero.

00:02:51.320 --> 00:02:55.850
I might intuitively start by
using the command x&gt;0.

00:02:55.850 --> 00:02:59.420
However, as R does in many
other scenarios, it also

00:02:59.420 --> 00:03:02.020
performs this check
element-wise.

00:03:02.020 --> 00:03:03.180
Here you can see I
have a vector of

00:03:03.180 --> 00:03:04.740
true and false values.

00:03:04.740 --> 00:03:08.480
I can use the all function
around x&gt;0 to answer the

00:03:08.480 --> 00:03:11.000
question as to whether all
of the values of x are

00:03:11.000 --> 00:03:13.350
greater than zero.

00:03:13.350 --> 00:03:16.150
We can also check other things,
such as, do any

00:03:16.150 --> 00:03:18.680
elements of x line up
with those in y?

00:03:18.680 --> 00:03:21.200
This, again, returns a vector
of true and false, but this

00:03:21.200 --> 00:03:23.830
time, I can use the any function
to check whether any

00:03:23.830 --> 00:03:26.860
of the values are equal.

00:03:26.860 --> 00:03:29.650
We can also do other checks
that relate x and y.

00:03:29.650 --> 00:03:35.460
For example, consider the
separate commands x&gt;0 and y&gt;0.

00:03:35.460 --> 00:03:38.400
If I wanted to check in which
elements this was true in both

00:03:38.400 --> 00:03:40.510
vectors, I could use a single

00:03:40.510 --> 00:03:44.320
ampersand between the commands.

00:03:44.320 --> 00:03:46.900
Here, the single ampersand means
to check whether both

00:03:46.900 --> 00:03:49.090
the first and the second
condition are true on an

00:03:49.090 --> 00:03:52.510
element-wise basis.

00:03:52.510 --> 00:03:56.060
There's a similar or command
using a pipe, or a vertical

00:03:56.060 --> 00:03:59.030
line character, that creates
an element-wise basis on

00:03:59.030 --> 00:04:03.630
whether one statement or the
other statement is true.

00:04:03.630 --> 00:04:06.770
R, like other languages, also
has a double ampersand and

00:04:06.770 --> 00:04:10.520
double pipe notation, though
I'm going to move on.

00:04:10.520 --> 00:04:12.450
If you're interested in this,
you should check out the help

00:04:12.450 --> 00:04:13.700
file for x or.

00:04:16.640 --> 00:04:18.410
The last topic I wanted to cover
in this video is the

00:04:18.410 --> 00:04:21.329
which function, used to identify
which elements or

00:04:21.329 --> 00:04:24.310
observations satisfy a
particular condition.

00:04:24.310 --> 00:04:27.520
For example, I'd like to know
which observations had a big

00:04:27.520 --> 00:04:29.700
intraday fluctuation.

00:04:29.700 --> 00:04:33.210
To begin, I'll create an object
called fluctuation that

00:04:33.210 --> 00:04:34.885
gives the raw intraday
fluctuation.

00:04:37.390 --> 00:04:40.140
I can scale the fluctuation by
dividing the difference by the

00:04:40.140 --> 00:04:43.770
opening share price
of the day.

00:04:43.770 --> 00:04:46.750
Next, I'll create a condition
for whether the fluctuation

00:04:46.750 --> 00:04:51.910
was greater than say, 25%.

00:04:51.910 --> 00:04:54.110
This is a Boolean vector of
true and false values that

00:04:54.110 --> 00:04:57.010
report whether each row in the
data frame satisfied or did

00:04:57.010 --> 00:05:00.496
not satisfy this big fluctuation
condition.

00:05:00.496 --> 00:05:03.380
If I wanted a vector reporting
just those rows that satisfy

00:05:03.380 --> 00:05:06.990
the condition, I can use
the which function.

00:05:06.990 --> 00:05:09.130
These rows represent
observations where the stock

00:05:09.130 --> 00:05:12.430
price fluctuated by more
than 25% in a day.

00:05:12.430 --> 00:05:14.770
If I wanted, I could examine
each of these rows in the

00:05:14.770 --> 00:05:17.500
original data set.

00:05:17.500 --> 00:05:19.720
In the next video, I'll
talk about for loops.

