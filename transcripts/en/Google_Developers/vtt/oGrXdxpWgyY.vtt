WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.041
[MUSIC PLAYING]

00:00:04.540 --> 00:00:05.860
Recognize this?

00:00:05.860 --> 00:00:09.420
It's the dreaded ANR, the
application not responding

00:00:09.420 --> 00:00:11.320
dialogue.

00:00:11.320 --> 00:00:14.070
Android shows this
dialogue when an app

00:00:14.070 --> 00:00:16.860
has taken more than five
seconds to return from an event

00:00:16.860 --> 00:00:17.970
handler.

00:00:17.970 --> 00:00:19.520
But why would that happen?

00:00:19.520 --> 00:00:21.500
Well it's because the
UI thread is blocked.

00:00:21.500 --> 00:00:23.220
It's waiting for something.

00:00:23.220 --> 00:00:25.610
And since the UI thread
is the only thread

00:00:25.610 --> 00:00:28.770
than can process input and draw
to the screen, when it stops

00:00:28.770 --> 00:00:31.320
responding, so does your app.

00:00:31.320 --> 00:00:34.580
So what can cause the UI
thread to just stop like that?

00:00:34.580 --> 00:00:36.850
Well, the usual suspects
are system calls

00:00:36.850 --> 00:00:40.440
that can block indefinitely,
like disk or network access.

00:00:40.440 --> 00:00:44.040
These blocking calls are like
time bombs in your application.

00:00:44.040 --> 00:00:46.730
Under normal conditions,
they might execute so fast

00:00:46.730 --> 00:00:48.210
you barely notice them.

00:00:48.210 --> 00:00:50.505
But with the right combination
of hardware and software

00:00:50.505 --> 00:00:53.050
and luck, they explode.

00:00:53.050 --> 00:00:54.750
My name is Ian
Ni-Lewis, and I'm going

00:00:54.750 --> 00:00:57.920
to show you how to find
blocking calls in your UI thread

00:00:57.920 --> 00:01:00.340
before they blow up on you.

00:01:00.340 --> 00:01:03.160
Now the tool that can help us
here is called strict mode.

00:01:03.160 --> 00:01:05.800
You can get to it by
going to Developer Options

00:01:05.800 --> 00:01:08.180
and selecting
Strict Mode Enabled.

00:01:08.180 --> 00:01:11.180
And when this option is
enabled, anytime a blocking call

00:01:11.180 --> 00:01:15.100
is made on the UI thread, the
screen border will flash red.

00:01:15.100 --> 00:01:16.555
Now that's the
strict mode alarm.

00:01:16.555 --> 00:01:19.770
It signals a potential
performance problem.

00:01:19.770 --> 00:01:21.700
For example, let's
say your app suddenly

00:01:21.700 --> 00:01:24.750
decides to, I don't
know, load 90 bitmaps

00:01:24.750 --> 00:01:26.220
during a scroll event.

00:01:26.220 --> 00:01:28.580
With strict mode on,
you'll know about that

00:01:28.580 --> 00:01:31.440
because you'll see
that red flash.

00:01:31.440 --> 00:01:33.660
But there's more to strict
mode than just a checkbox.

00:01:33.660 --> 00:01:36.540
Strict mode is actually a
flexible and fine-grained API

00:01:36.540 --> 00:01:39.280
that gives you control over
what every thread in your app

00:01:39.280 --> 00:01:40.480
is allowed to do.

00:01:40.480 --> 00:01:43.100
It's kind of like a
run-time version of Lint.

00:01:43.100 --> 00:01:46.080
Now using strict mode
means defining a policy

00:01:46.080 --> 00:01:48.620
for one or more of the
threads in your app.

00:01:48.620 --> 00:01:52.560
Now policy is an object that's
composed of two components,

00:01:52.560 --> 00:01:55.680
a detection mask and a penalty.

00:01:55.680 --> 00:01:57.570
Now the detection
mask is a set of flags

00:01:57.570 --> 00:02:00.580
that defines the things that
you want to test for like disk

00:02:00.580 --> 00:02:02.950
reads or network access.

00:02:02.950 --> 00:02:05.410
The penalty tells
the system what

00:02:05.410 --> 00:02:08.509
to do when any one of those
flag conditions are met.

00:02:08.509 --> 00:02:11.710
The API in strict mode gives you
a whole set of penalty options,

00:02:11.710 --> 00:02:14.300
from flashing the screen,
like we saw earlier,

00:02:14.300 --> 00:02:16.470
to writing to the system
log, all the way up

00:02:16.470 --> 00:02:19.520
to crashing your process.

00:02:19.520 --> 00:02:22.720
You can also use strict mode
to respond to custom conditions

00:02:22.720 --> 00:02:24.068
that you detect.

00:02:24.068 --> 00:02:25.443
Let's say, for
instance, that you

00:02:25.443 --> 00:02:27.220
know that one of
your methods is too

00:02:27.220 --> 00:02:29.330
slow to run on the UI thread.

00:02:29.330 --> 00:02:31.190
To detect that with
strict mode, you

00:02:31.190 --> 00:02:36.130
call StrictMode.noteSlowCall
at the beginning of the method.

00:02:36.130 --> 00:02:38.670
And make sure you enable
detectCustomSlowCalls

00:02:38.670 --> 00:02:41.370
in the policy for the UI thread.

00:02:41.370 --> 00:02:44.120
Now when detectCustomSlowCalls
is enabled,

00:02:44.120 --> 00:02:47.210
a call to noteSlowCall
will raise an exception,

00:02:47.210 --> 00:02:50.150
and then strict mode will apply
whatever penalty that you've

00:02:50.150 --> 00:02:51.645
defined for that thread.

00:02:51.645 --> 00:02:54.780
Now if detectCustomSlowCalls
is disabled,

00:02:54.780 --> 00:02:57.250
then noteSlowCall is a NOOP.

00:02:57.250 --> 00:02:58.930
Oh, here's a quick pro tip.

00:02:58.930 --> 00:03:02.130
Call noteSlowCall whenever
you acquire a lock.

00:03:02.130 --> 00:03:03.130
Why?

00:03:03.130 --> 00:03:06.390
Well, locks are kind of
like stealth blocking calls.

00:03:06.390 --> 00:03:08.440
They often return
immediately, so fast

00:03:08.440 --> 00:03:10.240
that you don't even
notice they're there.

00:03:10.240 --> 00:03:13.360
But if the lock is
contended, your thread

00:03:13.360 --> 00:03:15.660
will get switched
out, with no guarantee

00:03:15.660 --> 00:03:17.670
on when it gets to run again.

00:03:17.670 --> 00:03:20.310
Now locks won't usually cause
an ANR all by themselves,

00:03:20.310 --> 00:03:22.540
but if you call a
synchronized method

00:03:22.540 --> 00:03:25.070
or acquire a lock
on your UI thread,

00:03:25.070 --> 00:03:27.720
sooner or later you're
going to drop a frame.

00:03:27.720 --> 00:03:30.250
Now strict mode also has
an API to set the policy

00:03:30.250 --> 00:03:31.740
for the virtual machine.

00:03:31.740 --> 00:03:33.970
That's the VM policy.

00:03:33.970 --> 00:03:37.160
Now where the thread policy has
options for detecting slower

00:03:37.160 --> 00:03:40.830
blocking methods, the
VM policy gives you

00:03:40.830 --> 00:03:44.040
options for detecting various
kinds of memory leaks.

00:03:44.040 --> 00:03:46.250
Now these two policies
complement each other.

00:03:46.250 --> 00:03:48.300
Remember, if you're
low on memory,

00:03:48.300 --> 00:03:50.200
even a normal
allocation can block

00:03:50.200 --> 00:03:52.470
for hundreds of milliseconds.

00:03:52.470 --> 00:03:54.190
Now chances are
there's at least one

00:03:54.190 --> 00:03:56.380
blocking call on
your app's UI thread,

00:03:56.380 --> 00:03:58.420
just waiting to
cause a glitch, a

00:03:58.420 --> 00:04:00.730
dropped frame, or even an ANR.

00:04:00.730 --> 00:04:03.260
Strict mode will help you
find those time bombs.

00:04:03.260 --> 00:04:05.150
In an upcoming video,
we'll talk about how

00:04:05.150 --> 00:04:07.877
to diffuse them, which is
why you need to check out

00:04:07.877 --> 00:04:09.710
the rest of our Android
Performance Patterns

00:04:09.710 --> 00:04:12.850
content for other ways to
improve your performance.

00:04:12.850 --> 00:04:14.850
And don't forget to join
our Google community

00:04:14.850 --> 00:04:16.139
for more excellent info.

00:04:16.139 --> 00:04:20.550
So keep calm, profile your
code, and always remember,

00:04:20.550 --> 00:04:21.679
perf matters.

00:04:21.679 --> 00:04:24.729
[MUSIC PLAYING]

