WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
In the good old days programs would read their input from data files only,

00:00:05.000 --> 00:00:07.000
which made reproduction an easy task.

00:00:07.000 --> 00:00:10.000
Modern programs use complex user interfaces,

00:00:10.000 --> 00:00:14.000
and these make it hard to observe and control the user's input.

00:00:14.000 --> 00:00:17.000
The standard approach to reproduce user interaction

00:00:17.000 --> 00:00:20.000
is to use a capture replay tool.

00:00:20.000 --> 00:00:24.000
A capture replay tool acts like a layer that interposes itself between the input,

00:00:24.000 --> 00:00:28.000
as provided by the user, and the actual program.

00:00:28.000 --> 00:00:29.000
These tools can operate in two modes.

00:00:29.000 --> 00:00:34.000
During recording mode all input coming from the user

00:00:34.000 --> 00:00:38.000
is passed down directly to the program as is all output from the program.

00:00:38.000 --> 00:00:41.000
So, the user interacts normally with the program as always.

00:00:41.000 --> 00:00:44.000
During the capture all input from the user, that is

00:00:44.000 --> 00:00:51.000
mouse clicks, keystrokes, and similar events, are recorded in the log file.

00:00:51.000 --> 00:00:54.000
During replay the program executes under control

00:00:54.000 --> 00:00:57.000
of the capture replay tool, getting its input from the previously

00:00:57.000 --> 00:01:01.000
recorded events and thereby ignoring regular user input.

00:01:01.000 --> 00:01:04.000
That is, all the events which are previously recorded and are passed

00:01:04.000 --> 00:01:07.000
onto the program just as if they were input by the user,

00:01:07.000 --> 00:01:10.000
and the program produces its normal output.

00:01:10.000 --> 00:01:14.000
Technically spoken, such tools realize capture replay by intercepting calls

00:01:14.000 --> 00:01:18.000
to library or system functions, which would normally provide user input.

00:01:18.000 --> 00:01:20.000
Let's demo this on an example.

00:01:20.000 --> 00:01:23.000
We have a program which takes commands.

00:01:23.000 --> 00:01:25.000
From a command, it processed them,

00:01:25.000 --> 00:01:28.000
Here is the function input command, which is supposed to accept a command.

00:01:28.000 --> 00:01:32.000
Process is a function, which then processes the command as entered.

00:01:32.000 --> 00:01:36.000
This is how such an input function would be implemented in Python.

00:01:36.000 --> 00:01:39.000
The function raw input outputs the prompt on the console

00:01:39.000 --> 00:01:42.000
and accepts a line that will then be returned

00:01:42.000 --> 00:01:46.000
by the function raw input and therefore input command.

00:01:46.000 --> 00:01:48.000
The idea we are having in here, however,

00:01:48.000 --> 00:01:50.000
does not support interaction with programs.

00:01:50.000 --> 00:01:53.000
So we simulate the whole thing by reading commands from an array instead.

00:01:53.000 --> 00:01:55.000
Here we have a list of commands.

00:01:55.000 --> 00:01:57.000
With every invocation of input command,

00:01:57.000 --> 00:02:00.000
the next command is returned from the array.

00:02:00.000 --> 00:02:03.000
We do so by increasing the index, command index,

00:02:03.000 --> 00:02:06.000
by one every time input command is called.

00:02:06.000 --> 00:02:08.000
The first time it returns open.

00:02:08.000 --> 00:02:11.000
The second time it returns save--The third time it returns quit.

00:02:11.000 --> 00:02:13.000
Here's the function that actually handles the command.

00:02:13.000 --> 00:02:16.000
All it does at this point is to print out the command,

00:02:16.000 --> 00:02:19.000
and if the command starts with q , such as the quit command,

00:02:19.000 --> 00:02:22.000
then the global resume variable is set to false,

00:02:22.000 --> 00:02:25.000
meaning that a while loop over here simply exits.

00:02:25.000 --> 00:02:28.000
Now we have to move the main function at the end

00:02:28.000 --> 00:02:31.000
such that it gets executed after all the functions are refined.

00:02:31.000 --> 00:02:34.000
Let's see whether this works properly--It does.

00:02:34.000 --> 00:02:37.000
Here we have simply the three commands printed out,

00:02:37.000 --> 00:02:40.000
and with the quit command the loop simply exits.

00:02:40.000 --> 00:02:43.000
Here's how a capture replay tool works.

00:02:43.000 --> 00:02:47.000
It replaces the original input command function by a new function,

00:02:47.000 --> 00:02:51.000
which wraps around the original input command function, calls it,

00:02:51.000 --> 00:02:54.000
also returns its original value.

00:02:54.000 --> 00:02:57.000
On top of that it also saves the commands in a log.

00:02:57.000 --> 00:03:00.000
In our example here, we're simply going to use this list here

00:03:00.000 --> 00:03:03.000
wherever our new command is to be appended.

00:03:03.000 --> 00:03:05.000
This is a simple programming exercise, and I'll leave it over to you.

