WEBVTT
Kind: captions
Language: en

00:00:06.033 --> 00:00:07.534
Taylor: Good afternoon.

00:00:07.534 --> 00:00:09.534
My name is Jamie Taylor,

00:00:09.534 --> 00:00:11.534
and, uh, this afternoon,

00:00:11.534 --> 00:00:13.534
um, to wrap things up,

00:00:13.534 --> 00:00:15.534
we're going to talk
a little bit more

00:00:15.534 --> 00:00:17.567
about, uh, using Freebase
and MQL.

00:00:17.567 --> 00:00:20.534
Um, this is, um, a talk

00:00:20.534 --> 00:00:23.033
which is really sort of trying

00:00:23.033 --> 00:00:26.000
to move your use of MQL ahead,

00:00:26.000 --> 00:00:28.601
um, some of advanced
sort of techniques.

00:00:28.601 --> 00:00:31.434
And, um, I know
that not everybody here

00:00:31.434 --> 00:00:34.434
is probably,
um, completely versed in MQL

00:00:34.434 --> 00:00:36.767
and as facile
as, uh, some people,

00:00:36.767 --> 00:00:38.767
so I thought it would be useful

00:00:38.767 --> 00:00:41.767
to actually do
a little bit of a level set,

00:00:41.767 --> 00:00:43.767
um, to make sure that everybody

00:00:43.767 --> 00:00:46.267
was sort of thinking
about things the same way

00:00:46.267 --> 00:00:48.267
and everybody was familiar
with the syntax

00:00:48.267 --> 00:00:50.767
and some of the capabilities
of the query language.

00:00:50.767 --> 00:00:53.767
So we'll start by talking
a little but about Freebase,

00:00:53.767 --> 00:00:55.267
um, understanding how MQL works,

00:00:55.267 --> 00:00:57.767
uh, some of the different forms
that it takes,

00:00:57.767 --> 00:01:00.834
and then we're gonna push ahead
and really look quite closely

00:01:00.834 --> 00:01:02.834
at how links are actually formed

00:01:02.834 --> 00:01:05.334
and all of the metadata
around links, um, in Freebase.

00:01:05.334 --> 00:01:08.334
And that's really going to be
sort of the heart or the power

00:01:08.334 --> 00:01:09.834
in, um, this talk.

00:01:09.834 --> 00:01:12.334
And given
what we've learned about,

00:01:12.334 --> 00:01:15.400
uh, how links are actually
represented in Freebase,

00:01:15.400 --> 00:01:18.400
this really suggests
a different way

00:01:18.400 --> 00:01:20.901
of conceptualizing
your programming model,

00:01:20.901 --> 00:01:22.901
um, when you're working
with Freebase data,

00:01:22.901 --> 00:01:24.934
and so we'll talk a little bit

00:01:24.934 --> 00:01:26.901
about what I call
property-driven programming.

00:01:26.901 --> 00:01:29.901
And then finally, to wind up,
um, we'll talk about metaschema,

00:01:29.901 --> 00:01:32.901
which is a fairly new concept,
um, in Freebase.

00:01:32.901 --> 00:01:36.067
Uh, and the idea is that you can
actually get more power

00:01:36.067 --> 00:01:38.234
by rolling things together.

00:01:38.234 --> 00:01:41.234
So with that,
um, I should point out that,

00:01:41.234 --> 00:01:44.934
um, I would really if you have
feedback about this talk,

00:01:44.934 --> 00:01:46.934
uh, to use the short link.

00:01:46.934 --> 00:01:48.934
Um, I'll have these available--

00:01:48.934 --> 00:01:50.934
uh, at the end of the talk,
as well--

00:01:50.934 --> 00:01:52.934
um, and hashtags
that people are using

00:01:52.934 --> 00:01:54.934
when they're in
their social networks.

00:01:54.934 --> 00:01:57.968
Um, I should also say
that, um, the slides

00:01:57.968 --> 00:02:00.434
may not be sort of
as easily viewable,

00:02:00.434 --> 00:02:02.000
but, um, at the end,

00:02:02.000 --> 00:02:05.000
I will give you a URL,
uh, that actually takes you

00:02:05.000 --> 00:02:08.000
to an acre application where
all the queries are available

00:02:08.000 --> 00:02:11.000
and you can actually explore
them and edit them yourselves,

00:02:11.000 --> 00:02:13.501
so you don't have to worry
about taking notes

00:02:13.501 --> 00:02:15.000
and things like that.

00:02:15.000 --> 00:02:18.000
So, uh, let's start by talking
a little bit about Freebase.

00:02:18.000 --> 00:02:20.000
Uh, so you're probably aware

00:02:20.000 --> 00:02:23.000
that Freebase
is a giant graph of entities.

00:02:23.000 --> 00:02:26.000
Um, so here we're looking
at the neighborhood

00:02:26.000 --> 00:02:27.667
around, uh, Jane Austen.

00:02:27.667 --> 00:02:29.567
Um, she was an author

00:02:29.567 --> 00:02:31.901
who was born in a town
in E-England

00:02:31.901 --> 00:02:33.901
and wrote a couple of books,

00:02:33.901 --> 00:02:36.067
and she's influenced
a few people,

00:02:36.067 --> 00:02:37.734
uh, over her lifetime.

00:02:37.734 --> 00:02:40.734
Um, what's unique about Freebase

00:02:40.734 --> 00:02:42.734
is that all of these links

00:02:42.734 --> 00:02:45.067
between these entities
are actually labels

00:02:45.067 --> 00:02:47.067
that we can actually tell you

00:02:47.067 --> 00:02:50.067
what type of relationship
they have, uh, with one another.

00:02:50.067 --> 00:02:52.067
And this graph is fairly large.

00:02:52.067 --> 00:02:54.067
Uh, so right now

00:02:54.067 --> 00:02:56.901
there are over 22 million topics
in Freebase--

00:02:56.901 --> 00:02:58.901
these are the entities--

00:02:58.901 --> 00:03:00.901
uh, and over
400 million connections

00:03:00.901 --> 00:03:04.534
between those 20 million--
22 million, uh, entities.

00:03:04.534 --> 00:03:06.501
Everything in Freebase
is available

00:03:06.501 --> 00:03:08.501
under a Creative Commons
attribution license.

00:03:08.501 --> 00:03:11.501
So you're free to use it
in any way that you see fit,

00:03:11.501 --> 00:03:13.501
uh, as long as you give credit

00:03:13.501 --> 00:03:15.501
back to where the data
came from,

00:03:15.501 --> 00:03:18.767
which I find very interesting
about Freebase, as well.

00:03:18.767 --> 00:03:20.267
And this is really where

00:03:20.267 --> 00:03:22.267
the--the community
contribution part,

00:03:22.267 --> 00:03:24.267
I think, kicks in
in a very interesting way,

00:03:24.267 --> 00:03:26.067
is that Freebase

00:03:26.067 --> 00:03:28.667
is a very rich, uh, source
of vocabulary,

00:03:28.667 --> 00:03:31.667
that is for ways of actually
talking about entities.

00:03:31.667 --> 00:03:34.167
So here I've just, um,
created a simple graph

00:03:34.167 --> 00:03:36.667
where I've, um,
ranked the instances,

00:03:36.667 --> 00:03:38.667
um, that use types--

00:03:38.667 --> 00:03:41.667
types being sort of collections
of attributes--

00:03:41.667 --> 00:03:43.667
and looked at all of these types

00:03:43.667 --> 00:03:46.667
that had more than ten
entity instances.

00:03:46.667 --> 00:03:50.200
And you can see that we have
over 6,000 different types

00:03:50.200 --> 00:03:52.200
that you can draw from.

00:03:52.200 --> 00:03:55.868
Uh, over 1,700 of these are in
what we call the commons.

00:03:55.868 --> 00:03:58.868
Um, that's an area
that's fairly well protected,

00:03:58.868 --> 00:04:01.934
um, community managed,
and curated.

00:04:01.934 --> 00:04:04.934
Um, these are the vocabularies
that you can really depend on.

00:04:04.934 --> 00:04:07.267
And then we've got,
uh, over 4,000

00:04:07.267 --> 00:04:09.267
that are in what we call bases.

00:04:09.267 --> 00:04:11.801
Uh, these are areas where
individuals or small communities

00:04:11.801 --> 00:04:14.767
are coming together and actually
developing a vocabulary.

00:04:14.767 --> 00:04:17.734
So there's a very rich source,
um, of ways

00:04:17.734 --> 00:04:21.834
of talking about the entities
that's available to you.

00:04:21.834 --> 00:04:24.834
So that we're all using
the same terminology

00:04:24.834 --> 00:04:27.834
and so that everybody's clear,
uh, topics are things

00:04:27.834 --> 00:04:30.834
that, um, uh, are--are--
topics are objects

00:04:30.834 --> 00:04:32.834
that represent things
in the real world.

00:04:32.834 --> 00:04:34.834
Um, so for instance,

00:04:34.834 --> 00:04:37.467
um, we have a topic

00:04:37.467 --> 00:04:41.133
that represents a person--
Jane Austen.

00:04:41.133 --> 00:04:44.400
Um, we have topics
that represent places--

00:04:44.400 --> 00:04:46.701
um, Steventon,
where she was born.

00:04:46.701 --> 00:04:48.701
Uh, and we have topics

00:04:48.701 --> 00:04:50.701
that represent other things
in the world,

00:04:50.701 --> 00:04:53.200
for instance--
Darcy, one of her characters,

00:04:53.200 --> 00:04:55.901
um, other things
like planets and iPods

00:04:55.901 --> 00:04:58.467
and things like that, as well.

00:04:58.467 --> 00:05:00.467
Uh, what's unique about Freebase

00:05:00.467 --> 00:05:02.534
is that all of these, uh, topics

00:05:02.534 --> 00:05:04.534
have strong identifiers,

00:05:04.534 --> 00:05:07.033
that is, there is a unique,
uh, and dependable way

00:05:07.033 --> 00:05:09.701
that you can actually reference,
uh, these objects

00:05:09.701 --> 00:05:11.701
by using these identifiers.

00:05:11.701 --> 00:05:14.234
But it's important
to keep in mind that objects,

00:05:14.234 --> 00:05:17.267
while they have IDs, the IDs
are not actually their names.

00:05:17.267 --> 00:05:21.234
Names are actually attributes
on these objects.

00:05:21.234 --> 00:05:23.234
So that leads us to properties,

00:05:23.234 --> 00:05:25.601
the relationships
between these objects.

00:05:25.601 --> 00:05:28.767
And you can see that,
uh, Jane Aun--Jane Austen

00:05:28.767 --> 00:05:30.767
influenced Henry James,

00:05:30.767 --> 00:05:33.934
and Henry James was influenced
by Jane Austen.

00:05:33.934 --> 00:05:35.934
Um, these links
are bidirectional,

00:05:35.934 --> 00:05:37.934
but it's important to understand

00:05:37.934 --> 00:05:42.033
that the links can have
unique names in each direction.

00:05:42.033 --> 00:05:45.501
And finally, this
is really a-a very subtle thing

00:05:45.501 --> 00:05:48.000
when you're looking at a graph
of entities.

00:05:48.000 --> 00:05:50.501
It's the properties that are
actually creating the meaning.

00:05:50.501 --> 00:05:53.000
When you, you know,
think about the object

00:05:53.000 --> 00:05:54.667
that represents Jane Austen,

00:05:54.667 --> 00:05:56.834
there's nothing intrinsic
about that object

00:05:56.834 --> 00:05:59.000
that tells you anything
about Jane Austen.

00:05:59.000 --> 00:06:01.234
It's the relationships that
that object has

00:06:01.234 --> 00:06:03.734
with other things in the graph,
for instance,

00:06:03.734 --> 00:06:06.734
the fact that there's a link
called "place of birth,"

00:06:06.734 --> 00:06:08.734
a property called
"place of birth"

00:06:08.734 --> 00:06:11.234
that leads you to another object
which is Steventon.

00:06:11.234 --> 00:06:14.234
And the fact that there
is a date of birth that's--

00:06:14.234 --> 00:06:16.734
leads you to a literal,
which is 1775,

00:06:16.734 --> 00:06:19.734
and the fact that she actually
has a name, which is her label--

00:06:19.734 --> 00:06:24.133
these are the things that
actually bestow Jane Austen-ness

00:06:24.133 --> 00:06:27.868
onto that object.

00:06:27.868 --> 00:06:30.868
So now that we have
sort of a-a quick understanding

00:06:30.868 --> 00:06:33.868
of sort of what
it is that we're talking about,

00:06:33.868 --> 00:06:36.367
um, let's press
right on into the language.

00:06:36.367 --> 00:06:38.868
Um, this is MQL,
the Metaweb Query Language,

00:06:38.868 --> 00:06:41.367
where we can ask this graph
of entities questions.

00:06:41.367 --> 00:06:44.367
We're gonna start off, um, with
a bunch of really simple queries

00:06:44.367 --> 00:06:46.367
that I think demonstrate
the different forms

00:06:46.367 --> 00:06:48.367
that, uh, queries can take.

00:06:48.367 --> 00:06:50.868
So we're just gonna look
at the relationship

00:06:50.868 --> 00:06:53.367
between Jane Austen
and her place of birth.

00:06:53.367 --> 00:06:55.868
So probably the simplest query
that we could formulate

00:06:55.868 --> 00:06:58.901
is to say we're gonna start
with this object, Jane Austen,

00:06:58.901 --> 00:07:01.367
and then we're going to look
at this property,

00:07:01.367 --> 00:07:05.868
which is, um, ideas, uh,
/people/person/place_of_birth,

00:07:05.868 --> 00:07:07.868
and we're gonna say "null,"

00:07:07.868 --> 00:07:09.868
that is we want the system

00:07:09.868 --> 00:07:12.067
to actually fill in
that last part.

00:07:12.067 --> 00:07:14.567
And when we do this
and run the query,

00:07:14.567 --> 00:07:17.067
it comes back
with the "label" Steventon.

00:07:17.067 --> 00:07:19.501
So, uh, it replaces the null

00:07:19.501 --> 00:07:23.167
with just the label
of the entity at the other end.

00:07:23.167 --> 00:07:25.667
Now we can be
a little bit more sophisticated

00:07:25.667 --> 00:07:27.167
and we can actually say,

00:07:27.167 --> 00:07:30.167
"well, we know that the thing
at the other end is an object,"

00:07:30.167 --> 00:07:32.167
and so by using
the curly braces,

00:07:32.167 --> 00:07:34.400
um, we're actually
going to ask the system

00:07:34.400 --> 00:07:35.834
to blow this object out.

00:07:35.834 --> 00:07:37.501
And what it gives us back

00:07:37.501 --> 00:07:40.000
is all of the sort of core
object properties

00:07:40.000 --> 00:07:42.000
that are on the other end.

00:07:42.000 --> 00:07:45.000
So for instance,
the fact that it has an ID,

00:07:45.000 --> 00:07:47.501
that it has a name,
um, and this object

00:07:47.501 --> 00:07:50.000
has a whole bunch
of these different types.

00:07:50.000 --> 00:07:52.000
It's, uh, a topic.
It's a location.

00:07:52.000 --> 00:07:53.501
It's a city/town,

00:07:53.501 --> 00:07:56.000
and there's a bunch more
information that it gives.

00:07:56.000 --> 00:07:58.000
Being a little bit
more sophisticated,

00:07:58.000 --> 00:08:01.000
we can actually ask a wild card,
um, and the wild card,

00:08:01.000 --> 00:08:04.100
um, the star is going to return
us the same information

00:08:04.100 --> 00:08:07.934
that we got in the last query,
plus a bunch more information,

00:08:07.934 --> 00:08:11.434
um, based on the type of object

00:08:11.434 --> 00:08:14.434
that we should be seeing
on the other end of that link.

00:08:14.434 --> 00:08:16.934
So here it knows
that, um, place of birth

00:08:16.934 --> 00:08:18.934
has a location at the other end,

00:08:18.934 --> 00:08:21.434
and so it's going
to give us things

00:08:21.434 --> 00:08:22.934
like the containment hierarchy--

00:08:22.934 --> 00:08:25.434
the fact that it's contained
by the United Kingdom.

00:08:25.434 --> 00:08:26.934
It's contained by Hampshire.

00:08:26.934 --> 00:08:29.934
Um, if it had, uh, if it
were in the United States,

00:08:29.934 --> 00:08:32.968
it might have a USBG name
associated with it.

00:08:32.968 --> 00:08:35.968
So, uh, we can also ask
for a very specific property

00:08:35.968 --> 00:08:37.968
off of this
where we just want

00:08:37.968 --> 00:08:40.467
the ID of the object
at the other end.

00:08:40.467 --> 00:08:45.234
So here we just get back
/en/steventon.

00:08:45.234 --> 00:08:48.234
And in this case, I'm actually
gonna turn the query around.

00:08:48.234 --> 00:08:50.234
I'm gonna say I know that,
you know,

00:08:50.234 --> 00:08:52.234
some people were born
in Steventon.

00:08:52.234 --> 00:08:54.734
Um, I'm curious
as to who they are.

00:08:54.734 --> 00:08:57.234
And I put this query
in square brackets,

00:08:57.234 --> 00:08:59.234
because I know that I'm gonna--

00:08:59.234 --> 00:09:01.934
going to possibly get
a list of people back.

00:09:01.934 --> 00:09:05.167
And so, in fact, it turns out
that Jane and her siblings

00:09:05.167 --> 00:09:07.167
were actually born there--

00:09:07.167 --> 00:09:10.234
not terribly surprising.

00:09:10.234 --> 00:09:13.634
Uh, we can also, um, reverse
the meaning

00:09:13.634 --> 00:09:17.234
of the /people/place_of_birth,
uh, property.

00:09:17.234 --> 00:09:20.501
So here I'm saying,
uh, I'm starting on Steventon,

00:09:20.501 --> 00:09:23.000
and I know there's links
from other objects

00:09:23.000 --> 00:09:24.501
that are place of birth.

00:09:24.501 --> 00:09:26.000
Show me what's there.

00:09:26.000 --> 00:09:29.000
And, uh, we use
the bang operator in this case

00:09:29.000 --> 00:09:31.467
to reverse the meaning
of the property.

00:09:31.467 --> 00:09:33.968
And lo and behold,
we actually get Jane

00:09:33.968 --> 00:09:36.934
and her siblings back
as well here.

00:09:36.934 --> 00:09:39.133
So that's great.

00:09:39.133 --> 00:09:41.801
That sort of runs us through
the different forms

00:09:41.801 --> 00:09:43.801
that a MQL query can take,

00:09:43.801 --> 00:09:46.801
and we'll be using a lot
of those different forms,

00:09:46.801 --> 00:09:49.801
uh, as we work through
the rest of this, uh, talk.

00:09:49.801 --> 00:09:51.767
Um, but what's really
interesting about Freebase

00:09:51.767 --> 00:09:54.267
is the fact
that all of these properties

00:09:54.267 --> 00:09:56.767
are in a very orderly
relationship with one another,

00:09:56.767 --> 00:09:58.767
and this is what we call schema,

00:09:58.767 --> 00:10:01.767
and this is sort of how
to understand what to expect,

00:10:01.767 --> 00:10:03.767
um, as you navigate the graph.

00:10:03.767 --> 00:10:06.267
And so we can start
with Jane Austen,

00:10:06.267 --> 00:10:09.267
and we can say, "How is it
that we actually know

00:10:09.267 --> 00:10:11.267
"that Jane Austen is a person?

00:10:11.267 --> 00:10:13.267
"And furthermore,
what makes us think

00:10:13.267 --> 00:10:15.767
that she actually has this
property 'place of birth'?"

00:10:15.767 --> 00:10:17.767
So let's start
with the first question.

00:10:17.767 --> 00:10:20.767
And the first thing
to sort of understand

00:10:20.767 --> 00:10:24.701
is that everything in Freebase
is represented as an object.

00:10:24.701 --> 00:10:27.701
And objects then have a set of
properties associated with them,

00:10:27.701 --> 00:10:30.701
and I don't know that you can
necessarily read this,

00:10:30.701 --> 00:10:33.200
but the idea is that
there's a reference

00:10:33.200 --> 00:10:36.200
that you can go to and you can
see all of the properties

00:10:36.200 --> 00:10:37.701
on a type object.

00:10:37.701 --> 00:10:40.701
And one of the first things
that you'll probably use,

00:10:40.701 --> 00:10:42.200
uh, is the type property.

00:10:42.200 --> 00:10:43.701
So that's great.

00:10:43.701 --> 00:10:46.200
We know that, um, Jane Austen,
being an object,

00:10:46.200 --> 00:10:49.200
she's going to have a type
property associated with her,

00:10:49.200 --> 00:10:52.200
and we can actually run
a query to find out

00:10:52.200 --> 00:10:55.200
what's at the other end
of that, uh, type link.

00:10:55.200 --> 00:10:58.200
And lo and behold, we discover
that there's another object

00:10:58.200 --> 00:11:01.200
which has the ID /people/person.
Ah, so this is interesting.

00:11:01.200 --> 00:11:04.267
This is how it is that we think
that Jane Austen is a person.

00:11:04.267 --> 00:11:06.767
But what's so special about
that /people/person object?

00:11:06.767 --> 00:11:09.767
Well, it's an object, so it's
going to have a type link,

00:11:09.767 --> 00:11:11.767
and we can run a query there

00:11:11.767 --> 00:11:13.767
to find out
what it's connected to,

00:11:13.767 --> 00:11:16.267
and what we discover
is, at the other end,

00:11:16.267 --> 00:11:18.267
there's another object
called /type/type.

00:11:18.267 --> 00:11:20.767
Okay, so that's great.
We have another object there.

00:11:20.767 --> 00:11:23.767
Super. Let's play this game out
a little bit further.

00:11:23.767 --> 00:11:25.300
Let's run that query again.

00:11:25.300 --> 00:11:26.767
And what's special
about /type/type

00:11:26.767 --> 00:11:29.434
is that /type/type
is actually connected to itself.

00:11:29.434 --> 00:11:32.100
So this sort of completes
the circuit, right?

00:11:32.100 --> 00:11:34.767
We actually now understand
how it is that /people/person

00:11:34.767 --> 00:11:36.434
became a type

00:11:36.434 --> 00:11:39.934
and how it is then that
Jane Austen becomes a person

00:11:39.934 --> 00:11:41.934
by being connected
to that object.

00:11:41.934 --> 00:11:43.767
So that's cool.

00:11:43.767 --> 00:11:45.767
You know, we have
some basic understanding

00:11:45.767 --> 00:11:48.767
of sort of how the type system
comes into being in the graph.

00:11:48.767 --> 00:11:50.767
Um, but that
still doesn't answer

00:11:50.767 --> 00:11:52.267
this--this latter question,

00:11:52.267 --> 00:11:54.300
which is,
how is it that we think

00:11:54.300 --> 00:11:57.234
that she actually has a property
called "place of birth"?

00:11:57.234 --> 00:12:00.300
Well, to do that, we probably
have to look a little bit closer

00:12:00.300 --> 00:12:03.868
at this interesting type
called type.

00:12:03.868 --> 00:12:06.534
Uh, one of the things to notice

00:12:06.534 --> 00:12:08.934
is that types have properties,

00:12:08.934 --> 00:12:11.133
so let's go back to our graph.

00:12:11.133 --> 00:12:14.734
Um, this is the same triad
that we were just exploring.

00:12:14.734 --> 00:12:17.734
Uh, and we know that
there's another type out there

00:12:17.734 --> 00:12:20.234
called property,
so that's great.

00:12:20.234 --> 00:12:23.734
Um, we know that this object,
which is type property

00:12:23.734 --> 00:12:25.734
is actually connected
to /type/type

00:12:25.734 --> 00:12:28.067
just like person is--
cool.

00:12:28.067 --> 00:12:31.267
Um, and we know that this type
has properties,

00:12:31.267 --> 00:12:33.234
and one of those properties

00:12:33.234 --> 00:12:36.234
is, uh, a thing
called expected type.

00:12:36.234 --> 00:12:40.000
So now we actually have
a property on property,

00:12:40.000 --> 00:12:42.367
which is the expected type.

00:12:42.367 --> 00:12:43.868
Awesome.

00:12:43.868 --> 00:12:45.868
You can see
how this playing out.

00:12:45.868 --> 00:12:49.133
So now we can actually go
and construct

00:12:49.133 --> 00:12:53.100
a, um, place of birth property.

00:12:53.100 --> 00:12:56.501
We connect it up,
because it's a type property.

00:12:56.501 --> 00:13:00.000
And we're going to make it
a property of /people/person.

00:13:00.000 --> 00:13:03.067
And it actually
has an expected type

00:13:03.067 --> 00:13:05.501
of location.

00:13:05.501 --> 00:13:08.467
And you can see how this
is all interconnected.

00:13:08.467 --> 00:13:09.968
So this is great.

00:13:09.968 --> 00:13:11.968
We actually have now
an understanding

00:13:11.968 --> 00:13:14.968
of both how types in the system
come into being

00:13:14.968 --> 00:13:17.467
and also how properties
are represented in the system

00:13:17.467 --> 00:13:19.968
and how they're connected
up to their types.

00:13:19.968 --> 00:13:21.467
What's really fun about this

00:13:21.467 --> 00:13:24.467
is that all of this is done
in the graph.

00:13:24.467 --> 00:13:26.968
And that means that using
our MQL query capabilities

00:13:26.968 --> 00:13:28.467
that we've been building up,

00:13:28.467 --> 00:13:30.467
we can actually interrogate
these structures

00:13:30.467 --> 00:13:32.467
exactly the same way
we've been interrogating,

00:13:32.467 --> 00:13:33.968
uh, Jane Austen.

00:13:33.968 --> 00:13:36.467
In fact, we can do both
at the same time.

00:13:36.467 --> 00:13:38.467
How much fun is that?

00:13:38.467 --> 00:13:39.968
So let's play on

00:13:39.968 --> 00:13:42.968
and sort of interrogate
the schema a little bit more.

00:13:42.968 --> 00:13:45.968
So for this, uh, object out
there which is /people/person,

00:13:45.968 --> 00:13:47.968
we know that its type is type,

00:13:47.968 --> 00:13:50.968
um, and we want to know
all of the properties

00:13:50.968 --> 00:13:52.467
that are on this type.

00:13:52.467 --> 00:13:54.467
So, uh, we ask a simple query.

00:13:54.467 --> 00:13:57.467
We get back a list
of all of the properties,

00:13:57.467 --> 00:13:59.133
including, um, place of birth.

00:13:59.133 --> 00:14:01.701
It happens to also have gender
and profession

00:14:01.701 --> 00:14:04.434
and a whole bunch
of other things.

00:14:04.434 --> 00:14:06.601
Uh, so for this place of birth,

00:14:06.601 --> 00:14:09.100
um, we know
that it's a /type/property.

00:14:09.100 --> 00:14:11.634
We know that there's a property
called expected_types.

00:14:11.634 --> 00:14:13.601
Let's find out
what's at the other--

00:14:13.601 --> 00:14:16.601
what we should expect to be at
the other end of these objects.

00:14:16.601 --> 00:14:19.100
And that tells us that
it's a location. So great.

00:14:19.100 --> 00:14:21.300
So we actually now
can interrogate,

00:14:21.300 --> 00:14:24.167
um, that graph structure
that we were looking at before.

00:14:24.167 --> 00:14:27.167
So now we can build up slightly
more interesting structures,

00:14:27.167 --> 00:14:29.167
and this is a structure

00:14:29.167 --> 00:14:31.501
that we're actually
going to refer to again.

00:14:31.501 --> 00:14:35.267
Um, we're going to say,
for, uh, some type,

00:14:35.267 --> 00:14:37.400
um, I want
all of its properties,

00:14:37.400 --> 00:14:40.400
and I want to know
what the expected type is

00:14:40.400 --> 00:14:41.901
of those properties.

00:14:41.901 --> 00:14:44.901
So, um, find me all of the types
that have properties

00:14:44.901 --> 00:14:48.067
where the expected type
is a location.

00:14:48.067 --> 00:14:50.567
And what we get back
is, um, the fact

00:14:50.567 --> 00:14:54.534
that, uh, the location type has
a property called "contains."

00:14:54.534 --> 00:14:58.534
The location property also has
a property called "containedby."

00:14:58.534 --> 00:15:00.200
What's kind of interesting

00:15:00.200 --> 00:15:03.267
is this is actually what we call
the phylogeny pattern.

00:15:03.267 --> 00:15:05.934
These are, um, properties
that expect their own type,

00:15:05.934 --> 00:15:07.434
uh, on the other side,

00:15:07.434 --> 00:15:09.434
and you can sort of
create hierarchies

00:15:09.434 --> 00:15:11.267
and--and circuits that way.

00:15:11.267 --> 00:15:13.267
Um, we also get human language
back--

00:15:13.267 --> 00:15:15.934
the region of the human language
as a location.

00:15:15.934 --> 00:15:17.934
Uh, and lo and behold,

00:15:17.934 --> 00:15:19.934
place_of_birth
on /people/person,

00:15:19.934 --> 00:15:21.934
uh, has an expected type
of location

00:15:21.934 --> 00:15:24.434
as well as a whole bunch
of other ones.

00:15:24.434 --> 00:15:25.934
So great.

00:15:25.934 --> 00:15:27.934
Now I told you
that, uh, properties,

00:15:27.934 --> 00:15:29.934
uh, are bidirectional

00:15:29.934 --> 00:15:32.434
and that they have different
names in each direction.

00:15:32.434 --> 00:15:35.434
And for the most part, you can
just sort of think of properties

00:15:35.434 --> 00:15:37.434
as being sort of uniform.

00:15:37.434 --> 00:15:40.100
But it turns out
that, under the surface,

00:15:40.100 --> 00:15:42.767
properties actually have
a bit of a directionality

00:15:42.767 --> 00:15:44.267
associated with them--

00:15:44.267 --> 00:15:46.267
where were they defined,
essentially.

00:15:46.267 --> 00:15:48.601
Um, and so here,
I'm asking for,

00:15:48.601 --> 00:15:53.100
um, the, uh, in the, uh,
written_work type,

00:15:53.100 --> 00:15:55.934
I want to know about
the author property.

00:15:55.934 --> 00:15:58.934
And I want to know
if it's a master

00:15:58.934 --> 00:16:01.501
or if it's actually
just the inverse

00:16:01.501 --> 00:16:03.501
of, uh, another property.

00:16:03.501 --> 00:16:06.501
And it turns out that,
when I run this query,

00:16:06.501 --> 00:16:09.501
I discover that, in fact, um,
there is a master property,

00:16:09.501 --> 00:16:11.501
which is defined on author,

00:16:11.501 --> 00:16:13.501
which is the works written.

00:16:13.501 --> 00:16:16.501
So this is that link
running in the other direction.

00:16:16.501 --> 00:16:18.501
So the only thing
to take away from this

00:16:18.501 --> 00:16:20.501
is that there is this notion
of directionality

00:16:20.501 --> 00:16:22.501
that's sort of buried
under the covers.

00:16:22.501 --> 00:16:25.534
For the most part, you really
don't have to think about it,

00:16:25.534 --> 00:16:28.000
but when we're gonna start
playing some of the games

00:16:28.000 --> 00:16:29.834
that we're going
to be talking about

00:16:29.834 --> 00:16:31.667
a little bit down the road,

00:16:31.667 --> 00:16:34.167
um, this is actually
going to come in very handy.

00:16:34.167 --> 00:16:37.167
So now that we understand
a little bit more about schema,

00:16:37.167 --> 00:16:39.667
how to interrogate it,
um, let's press on,

00:16:39.667 --> 00:16:41.667
and actually look
into connections.

00:16:41.667 --> 00:16:44.667
Now going back
to that really simple query

00:16:44.667 --> 00:16:47.667
that we started with, um, where
we talk about Jane Austen,

00:16:47.667 --> 00:16:49.667
this time,
we're actually gonna look at

00:16:49.667 --> 00:16:52.601
the languages that she spoke.

00:16:52.601 --> 00:16:55.934
Uh, I want to find out what, uh,
languages are at the other end,

00:16:55.934 --> 00:16:59.300
and what you discover is that,
um, she actually spoke English,

00:16:59.300 --> 00:17:02.367
so that's the little
representation at the bottom.

00:17:02.367 --> 00:17:04.868
And what you
have to really think about

00:17:04.868 --> 00:17:07.367
when you write
a very simple query like this

00:17:07.367 --> 00:17:10.467
is that this
/people/person/languages,

00:17:10.467 --> 00:17:12.634
this property
is really representing

00:17:12.634 --> 00:17:14.467
this link,

00:17:14.467 --> 00:17:17.467
and what you're doing is
you're looking from one object

00:17:17.467 --> 00:17:20.467
across to another object,
but what we don't see

00:17:20.467 --> 00:17:23.501
is anything
about that link itself.

00:17:23.501 --> 00:17:26.367
So happily,
uh, MQL actually provides

00:17:26.367 --> 00:17:29.200
a directive called "link"
that we can insert

00:17:29.200 --> 00:17:31.200
to actually see

00:17:31.200 --> 00:17:33.901
into, uh, the connection

00:17:33.901 --> 00:17:36.267
that's being made
between these two objects.

00:17:36.267 --> 00:17:38.767
It's not just that we think
that these objects

00:17:38.767 --> 00:17:40.267
are sort of nearby.

00:17:40.267 --> 00:17:42.267
We think that there's a link,

00:17:42.267 --> 00:17:44.767
and we want to know more
about them.

00:17:44.767 --> 00:17:46.767
Uh, the link directive
actually returns,

00:17:46.767 --> 00:17:48.767
uh, objects of /type/link

00:17:48.767 --> 00:17:51.267
and if you look at
the properties for /type/link,

00:17:51.267 --> 00:17:54.267
you discover that it has things
like creator and timestamp--

00:17:54.267 --> 00:17:56.767
Who did this?
When did they do it?--

00:17:56.767 --> 00:17:59.267
as well as a whole bunch
of other properties,

00:17:59.267 --> 00:18:01.834
and we're gonna look at those
other properties, actually,

00:18:01.834 --> 00:18:03.334
in depth here.

00:18:03.334 --> 00:18:05.834
So, um, this
is the, uh, client display

00:18:05.834 --> 00:18:07.834
of the schema for a /type/link,

00:18:07.834 --> 00:18:10.834
and this is actually one of my
favorite, um, type definitions

00:18:10.834 --> 00:18:12.667
in the whole Freebase system,

00:18:12.667 --> 00:18:15.334
because I-I think it's just like
the ultimate understatement--

00:18:15.334 --> 00:18:18.334
"used to access
the advanced features of MQL."

00:18:18.334 --> 00:18:19.834
Tells you nothing!

00:18:19.834 --> 00:18:21.834
Um, and yet, all of this power

00:18:21.834 --> 00:18:24.334
is hidden away
in these different properties.

00:18:24.334 --> 00:18:26.834
Um, so we're going
to explore this, actually,

00:18:26.834 --> 00:18:28.701
a-a-a bit in depth.

00:18:28.701 --> 00:18:31.501
So these are the properties
of /type/link.

00:18:31.501 --> 00:18:35.300
And they actually sort of,
um, form different bundles,

00:18:35.300 --> 00:18:37.801
which I think of
as sort of fulfilling

00:18:37.801 --> 00:18:39.801
different needs
that you might have,

00:18:39.801 --> 00:18:42.300
depending upon sort of what
activity you're engaged in.

00:18:42.300 --> 00:18:45.901
So this first set--timestamp,
creator, operation, and valid--

00:18:45.901 --> 00:18:49.400
are useful for exploring
the history of these links.

00:18:49.400 --> 00:18:52.400
When were these made?
Who did it?

00:18:52.400 --> 00:18:55.834
Um, and we can actually
talk about sort of time.

00:18:55.834 --> 00:18:58.834
Schema, um, we can look
at the master_property

00:18:58.834 --> 00:19:00.501
and the reverse property--

00:19:00.501 --> 00:19:03.067
the things
that we were looking at before

00:19:03.067 --> 00:19:05.067
when we were looking
at the /book/author.

00:19:05.067 --> 00:19:07.767
And finally, uh, source, target,
and target_value--

00:19:07.767 --> 00:19:11.100
these are the connections
on each end of the link,

00:19:11.100 --> 00:19:14.434
and this is really useful when
we want to reflect on the graph

00:19:14.434 --> 00:19:16.934
and understand a lot more
about the connections.

00:19:16.934 --> 00:19:19.434
So we'll talk about
each one of these sets,

00:19:19.434 --> 00:19:20.934
uh, in depth.

00:19:20.934 --> 00:19:23.434
So going back
to, uh, our link directive,

00:19:23.434 --> 00:19:25.267
we can actually just add in

00:19:25.267 --> 00:19:27.267
the specific property
that we want.

00:19:27.267 --> 00:19:29.267
Who is the creator of this link

00:19:29.267 --> 00:19:31.267
between Jane Austen
and the English language?

00:19:31.267 --> 00:19:35.267
and lo and behold,
you discover that it was me.

00:19:35.267 --> 00:19:37.934
Um, now we can play out

00:19:37.934 --> 00:19:40.667
a little bit more
of a history, uh, game.

00:19:40.667 --> 00:19:42.901
Um, so starting
with Jane Austen,

00:19:42.901 --> 00:19:45.200
um, we know
that she's an object,

00:19:45.200 --> 00:19:48.167
so she has a bunch of types
associated with her.

00:19:48.167 --> 00:19:51.167
And now we actually want
to look at the links

00:19:51.167 --> 00:19:52.667
between this Jane Austen

00:19:52.667 --> 00:19:54.667
and the different types
that she has.

00:19:54.667 --> 00:19:58.133
So here, um, I'm opening up
the--the link there.

00:19:58.133 --> 00:20:01.300
I'm asking for the timestamp,
the operation,

00:20:01.300 --> 00:20:03.701
whether or not
it was an insert or a delete,

00:20:03.701 --> 00:20:05.701
and whether or not this link

00:20:05.701 --> 00:20:08.167
is currently valid
in the system.

00:20:08.167 --> 00:20:12.234
And finally, I'm gonna actually
sort, um, the output

00:20:12.234 --> 00:20:14.901
based on the timestamp
of the link creation,

00:20:14.901 --> 00:20:17.667
so I can see these things
in chronological order.

00:20:17.667 --> 00:20:21.167
And what we get back, uh,
is actually kind of interesting.

00:20:21.167 --> 00:20:24.667
We discover that when
Jane Austen was added,

00:20:24.667 --> 00:20:27.534
uh, she was given,
um, the type "common topic,"

00:20:27.534 --> 00:20:29.534
that is she became a topic,

00:20:29.534 --> 00:20:33.501
um, and that was in,
uh, October of 2006.

00:20:33.501 --> 00:20:35.501
And yes, in fact,
it's still true--

00:20:35.501 --> 00:20:37.501
she is a topic.

00:20:37.501 --> 00:20:39.501
She's also a per--a person,

00:20:39.501 --> 00:20:42.167
um, that was added in November
of 2006,

00:20:42.167 --> 00:20:45.334
and that link is still valid,
as well.

00:20:45.334 --> 00:20:48.667
But then we get to this one,
which is a little perplexing.

00:20:48.667 --> 00:20:51.167
It says
that she was a film writer.

00:20:51.167 --> 00:20:53.667
The only problem
is that she was long dead

00:20:53.667 --> 00:20:57.067
before celluloid was being used
to create motion pictures.

00:20:57.067 --> 00:21:00.067
So it's a little hard to imagine
her as being a film writer.

00:21:00.067 --> 00:21:02.133
Um, happily, we can see that,

00:21:02.133 --> 00:21:05.300
uh, even though this was
inserted in November of 2006,

00:21:05.300 --> 00:21:07.634
um, the link
is not currently valid.

00:21:07.634 --> 00:21:10.634
And if we look further
and further down the chronology,

00:21:10.634 --> 00:21:12.634
we actually discover
that, in fact,

00:21:12.634 --> 00:21:15.934
the /film/writer type--the link
to it was actually deleted,

00:21:15.934 --> 00:21:19.601
uh, in, uh, what, July of 2010.

00:21:19.601 --> 00:21:22.100
So happily, somebody went in
and corrected this,

00:21:22.100 --> 00:21:24.100
but we can actually see
all of this history,

00:21:24.100 --> 00:21:26.100
and that's because Freebase
is really

00:21:26.100 --> 00:21:27.601
an append-only data store.

00:21:27.601 --> 00:21:29.601
So we have
all of this information

00:21:29.601 --> 00:21:32.701
about what has happened
to these objects over time.

00:21:32.701 --> 00:21:34.334
So great.

00:21:34.334 --> 00:21:37.100
Uh, that actually sort of
takes us through history.

00:21:37.100 --> 00:21:39.801
And now we can look
a little bit more at schema.

00:21:39.801 --> 00:21:42.100
Um, so starting with Jane Austen

00:21:42.100 --> 00:21:44.200
and looking
at this languages link,

00:21:44.200 --> 00:21:47.033
we can ask about,
what is the master property

00:21:47.033 --> 00:21:48.901
for this link?

00:21:48.901 --> 00:21:51.400
Um, we can also ask
if it's the reverse.

00:21:51.400 --> 00:21:54.400
And what we get back is,
in fact, it's not the reverse.

00:21:54.400 --> 00:21:56.901
Um, that the master_property
is /people/person/languages,

00:21:56.901 --> 00:22:01.000
and you say, "Gee, that's really
not terribly informative,

00:22:01.000 --> 00:22:03.734
because that's the way
I asked the query."

00:22:03.734 --> 00:22:05.734
And I'm thinking,
yeah, yeah, yeah.

00:22:05.734 --> 00:22:08.234
There's actually more
that we can do here.

00:22:08.234 --> 00:22:09.734
So for instance,

00:22:09.734 --> 00:22:12.234
if I were actually
sort of building an application,

00:22:12.234 --> 00:22:14.734
one of the things I might want
to do

00:22:14.734 --> 00:22:17.734
is to say, "Ah, I can actually
open up this link,

00:22:17.734 --> 00:22:20.734
"and I can get out the display
name of that property,

00:22:20.734 --> 00:22:22.734
"as well as learn about the type

00:22:22.734 --> 00:22:25.234
that I should find
at the other end,"

00:22:25.234 --> 00:22:28.234
and I can do that all in this
one package, so that's great.

00:22:28.234 --> 00:22:30.234
I actually get back to the fact

00:22:30.234 --> 00:22:32.767
that the display name
for this link is languages,

00:22:32.767 --> 00:22:35.234
um, and the thing that
I should find at the other end

00:22:35.234 --> 00:22:37.234
is, uh, a human language.

00:22:37.234 --> 00:22:39.234
Now the only problem here

00:22:39.234 --> 00:22:41.234
is that it's a little bit
of a cheat.

00:22:41.234 --> 00:22:43.234
Um, and that's because,
in fact,

00:22:43.234 --> 00:22:45.234
this could have been
the reverse property.

00:22:45.234 --> 00:22:48.234
So here's a query where
I'm asking about Ridley Scott,

00:22:48.234 --> 00:22:50.734
the director of "Blade Runner"
and other like classics.

00:22:50.734 --> 00:22:53.734
Um, and I'm gonna look at him
as a film director

00:22:53.734 --> 00:22:56.234
and get back the films
that he's connected to.

00:22:56.234 --> 00:22:59.234
And here I'm asking for the link
between Ridley Scott

00:22:59.234 --> 00:23:02.634
and his films, and I'm gonna
get back the master_property,

00:23:02.634 --> 00:23:05.133
the display name,
the expected_type,

00:23:05.133 --> 00:23:08.167
and now I'm actually asking
for the reverse

00:23:08.167 --> 00:23:10.667
of that master_property,
so I'm gonna find out

00:23:10.667 --> 00:23:13.667
what that property definition is
going in the other direction.

00:23:13.667 --> 00:23:16.667
And I'm gonna get the name
and the expected_type.

00:23:16.667 --> 00:23:19.334
And you'll see
this "reverse": null down here,

00:23:19.334 --> 00:23:21.000
um, is actually very important,

00:23:21.000 --> 00:23:22.667
because now
when it comes back true,

00:23:22.667 --> 00:23:24.501
that tells my application

00:23:24.501 --> 00:23:27.501
that I should actually be
looking at this area in green

00:23:27.501 --> 00:23:29.000
and using that

00:23:29.000 --> 00:23:32.567
as the information
about this link.

00:23:32.567 --> 00:23:35.133
Make sense? Cool.

00:23:35.133 --> 00:23:36.634
Okay, just to make sure

00:23:36.634 --> 00:23:39.634
I'm not, you know, pulling
the wool over your eyes here.

00:23:39.634 --> 00:23:41.133
Um, so this is great.

00:23:41.133 --> 00:23:44.133
So now we can actually formulate
sort of meaningful queries.

00:23:44.133 --> 00:23:46.634
We can get
a lot of information back

00:23:46.634 --> 00:23:49.133
about the links
that are in those queries.

00:23:49.133 --> 00:23:52.133
Um, but, you know,
there's this one sort of thing

00:23:52.133 --> 00:23:53.968
when we're actually
exploring the graph,

00:23:53.968 --> 00:23:56.968
and that is, if I'm just looking
at an object,

00:23:56.968 --> 00:23:58.968
how is that I can know

00:23:58.968 --> 00:24:00.968
what queries
I should actually be asking?

00:24:00.968 --> 00:24:04.033
How do I know what things
are actually connected to this?

00:24:04.033 --> 00:24:06.534
Um, and in fact,
this is the mechanism

00:24:06.534 --> 00:24:09.100
that the Freebase client
actually uses

00:24:09.100 --> 00:24:11.601
to display the information
about these topics

00:24:11.601 --> 00:24:13.601
and help you navigate
around the graph.

00:24:13.601 --> 00:24:17.367
So we're gonna look at,
uh, again, uh, /type/link,

00:24:17.367 --> 00:24:21.133
and the last set here--
source, target, and value--

00:24:21.133 --> 00:24:24.133
to understand how it is that
we can reflect on these things.

00:24:24.133 --> 00:24:27.067
Source, target is the idea
that these links

00:24:27.067 --> 00:24:28.567
have a source--

00:24:28.567 --> 00:24:31.067
they start somewhere
and they end in another place,

00:24:31.067 --> 00:24:33.567
and sometimes that thing
that they end on

00:24:33.567 --> 00:24:35.067
is actually a literal value,

00:24:35.067 --> 00:24:37.567
oh, or a primitive value
of some sort.

00:24:37.567 --> 00:24:40.567
So that's what source, target--
source, target, and target_value

00:24:40.567 --> 00:24:42.067
are giving you.

00:24:42.067 --> 00:24:44.567
So we can formulate
a pretty simple query,

00:24:44.567 --> 00:24:47.067
which is, um, we're going
to use /type/link.

00:24:47.067 --> 00:24:50.067
We want to start with the source
of being Jane Austen.

00:24:50.067 --> 00:24:53.601
We want to get the property
that connects Jane Austen

00:24:53.601 --> 00:24:57.067
to other things, which, on
the other side, are just topics.

00:24:57.067 --> 00:25:00.067
Cool. This is a nice
little reflect query.

00:25:00.067 --> 00:25:02.634
And we can find out that,
in fact,

00:25:02.634 --> 00:25:05.133
she has a master_property
of place of birth

00:25:05.133 --> 00:25:07.133
and that the target
is en/Steventon,

00:25:07.133 --> 00:25:10.367
uh, and that,
uh, she has a place of death,

00:25:10.367 --> 00:25:12.367
whichwas Winchester,

00:25:12.367 --> 00:25:15.367
uh, and that she has gender,
and she is female,

00:25:15.367 --> 00:25:17.367
and it goes on and on--

00:25:17.367 --> 00:25:20.367
all of the things that
are connected up to Jane Austen.

00:25:20.367 --> 00:25:21.868
So that's cool.

00:25:21.868 --> 00:25:25.200
Um, but there's really more
to this story

00:25:25.200 --> 00:25:27.200
that we need to unpack.

00:25:27.200 --> 00:25:29.200
And so one of the things,

00:25:29.200 --> 00:25:31.200
when you're exploring,
uh, Freebase schema--

00:25:31.200 --> 00:25:34.200
um, and you could to go
the client and do this,

00:25:34.200 --> 00:25:37.200
but since we actually know
how to write MQL queries

00:25:37.200 --> 00:25:39.701
against schema,
we can actually write our own--

00:25:39.701 --> 00:25:42.200
and that is, can we actually
find a property

00:25:42.200 --> 00:25:45.300
that has the expected type
of /type/link on property?

00:25:45.300 --> 00:25:46.801
And lo and behold,

00:25:46.801 --> 00:25:50.968
there is, happily,
a thing called, uh, links,

00:25:50.968 --> 00:25:53.300
which is all of the uses

00:25:53.300 --> 00:25:55.868
of this property.

00:25:55.868 --> 00:25:58.868
And, uh, now I can say something

00:25:58.868 --> 00:26:01.934
like, for the property
"place of birth,"

00:26:01.934 --> 00:26:06.100
I want to get back
all of the links that are--

00:26:06.100 --> 00:26:09.100
all of the connections
that are using this property.

00:26:09.100 --> 00:26:11.100
And the first one I get back

00:26:11.100 --> 00:26:13.601
actually was made
by a guy named Robert.

00:26:13.601 --> 00:26:16.434
Uh, it was the source
of Steve Martin

00:26:16.434 --> 00:26:18.434
and connecting him to Waco,

00:26:18.434 --> 00:26:21.434
uh, and that was done
in December of 2006,

00:26:21.434 --> 00:26:22.934
and it's currently valid,

00:26:22.934 --> 00:26:25.467
so apparently
that's the right thing to say.

00:26:25.467 --> 00:26:26.934
So this is great.

00:26:26.934 --> 00:26:28.934
So we actually have a way now

00:26:28.934 --> 00:26:31.434
of exploring all of the uses
of a property.

00:26:31.434 --> 00:26:33.934
And that's kind of important,
because in that query

00:26:33.934 --> 00:26:36.434
that we ran for Jane Austen,
the reflect query,

00:26:36.434 --> 00:26:38.434
where we said that Jane Austen
was the source,

00:26:38.434 --> 00:26:40.434
and we wanted to know
the target,

00:26:40.434 --> 00:26:42.434
that tells us this story.

00:26:42.434 --> 00:26:44.934
It says Jane Austen
is connected to Steventon,

00:26:44.934 --> 00:26:46.934
and she's connected
to the English language,

00:26:46.934 --> 00:26:48.934
and she's connected
to "Pride and Prejudice."

00:26:48.934 --> 00:26:50.934
But what's missing is the fact

00:26:50.934 --> 00:26:53.434
that actually Henry James
is connected to Jane Austen,

00:26:53.434 --> 00:26:56.267
but the connection
is going the other direction.

00:26:56.267 --> 00:26:59.501
Jane Austen is the target
of that connection.

00:26:59.501 --> 00:27:01.534
She's not the source.

00:27:01.534 --> 00:27:03.834
So that's simple enough to fix.

00:27:03.834 --> 00:27:06.534
We could actually just say,
"well, we're gonna run the query

00:27:06.534 --> 00:27:09.534
"that we ran before
where Jane Austen is the source,

00:27:09.534 --> 00:27:11.534
and we're looking
for the target."

00:27:11.534 --> 00:27:14.033
We could run another query
where we actually say,

00:27:14.033 --> 00:27:16.033
"Hey, uh, Jane Austen
is the target.

00:27:16.033 --> 00:27:17.534
Show me the source."

00:27:17.534 --> 00:27:20.033
That would get us back
to Henry James. Cool.

00:27:20.033 --> 00:27:22.534
But that seems
really kind of inefficient.

00:27:22.534 --> 00:27:24.534
So let's take another approach

00:27:24.534 --> 00:27:28.133
given sort of all the mechanism
that we now have under our belt.

00:27:28.133 --> 00:27:30.634
We can start
with this very simple query,

00:27:30.634 --> 00:27:33.634
which says
for this object Jane Austen,

00:27:33.634 --> 00:27:36.267
give me back all of her types,

00:27:36.267 --> 00:27:39.267
that is all of the types
that Jane Austen is using.

00:27:39.267 --> 00:27:41.267
And for every one
of those types,

00:27:41.267 --> 00:27:44.267
go to the schema and tell me
all of the properties

00:27:44.267 --> 00:27:46.267
that those types have.

00:27:46.267 --> 00:27:49.701
So we run this, and we get back
all of the properties

00:27:49.701 --> 00:27:51.701
for all of those types.

00:27:51.701 --> 00:27:54.267
Now we can actually use

00:27:54.267 --> 00:27:57.100
that links property
on property,

00:27:57.100 --> 00:27:59.100
and we can say,

00:27:59.100 --> 00:28:02.200
"Great, for all the uses
of that property,

00:28:02.200 --> 00:28:04.701
"show me where Jane Austen
is the source.

00:28:04.701 --> 00:28:06.767
Find me all of the targets."

00:28:06.767 --> 00:28:09.734
And that's essentially the same
as our first reflect query,

00:28:09.734 --> 00:28:11.734
but we can extend this
even further,

00:28:11.734 --> 00:28:13.734
and we can now reverse it.

00:28:13.734 --> 00:28:16.734
And we can say, "Look,
for the use of--of--of this

00:28:16.734 --> 00:28:19.734
as the master_property," which
means going the other direction,

00:28:19.734 --> 00:28:23.234
"um, I want to find all
of the links for that property,

00:28:23.234 --> 00:28:26.734
um, where we want the source
and Jane Austen is the target."

00:28:26.734 --> 00:28:30.567
Cool. This give us
sort of full reflection.

00:28:30.567 --> 00:28:32.567
So now we have a way

00:28:32.567 --> 00:28:35.067
of actually picking up an object
in the graph

00:28:35.067 --> 00:28:38.300
and knowing everything there
is to know about that object.

00:28:38.300 --> 00:28:40.801
And so once you have
this capability then,

00:28:40.801 --> 00:28:43.767
I think,
um, this really sort of suggests

00:28:43.767 --> 00:28:45.601
a new style of programming

00:28:45.601 --> 00:28:48.267
when you're thinking about
working with Freebase data,

00:28:48.267 --> 00:28:50.767
and that is to act
on the meaning

00:28:50.767 --> 00:28:53.767
that you get back
from the objects in the graph.

00:28:53.767 --> 00:28:55.767
So the typical approach,
and the approach

00:28:55.767 --> 00:28:58.767
that we've been sort of
playing out earlier in this talk

00:28:58.767 --> 00:29:01.834
was to say, well, we start
with an object like Jane Austen,

00:29:01.834 --> 00:29:04.334
we say, "Great,
we know that she is a person,

00:29:04.334 --> 00:29:07.334
and she has a place of birth,"
and then we go on and we say,

00:29:07.334 --> 00:29:09.334
"Great, we think
that she has some languages.

00:29:09.334 --> 00:29:10.834
Give us those languages."

00:29:10.834 --> 00:29:12.834
And there's a whole bunch
of other stuff

00:29:12.834 --> 00:29:14.334
that we probably want.

00:29:14.334 --> 00:29:15.834
"You know, she's an author.

00:29:15.834 --> 00:29:17.834
Tell us about her books"
and things like that.

00:29:17.834 --> 00:29:19.834
And so great, we, you know,
do some "collabor-optomization."

00:29:19.834 --> 00:29:21.834
We, I don't know,
package these things up.

00:29:21.834 --> 00:29:23.834
We write a whole bunch
of optional clauses,

00:29:23.834 --> 00:29:25.834
or we package these up
in one MQL envelope

00:29:25.834 --> 00:29:27.834
to make the transport
more efficient,

00:29:27.834 --> 00:29:30.334
but when we take
that kind of rote approach,

00:29:30.334 --> 00:29:32.334
things go a little bit south

00:29:32.334 --> 00:29:34.834
when we actually have
another person like Franz Liszt,

00:29:34.834 --> 00:29:36.334
right?

00:29:36.334 --> 00:29:38.000
Not an author, a composer.

00:29:38.000 --> 00:29:41.000
We probably want to ask slightly
different questions about him.

00:29:41.000 --> 00:29:43.000
How are we gonna do that?

00:29:43.000 --> 00:29:46.367
Well, if we go back and use
our reflect capabilities,

00:29:46.367 --> 00:29:49.367
We can write a query
essentially like this.

00:29:49.367 --> 00:29:52.367
We probably want to expand it
in some interesting ways,

00:29:52.367 --> 00:29:55.367
but this is the basic skeleton
that you would be using,

00:29:55.367 --> 00:29:58.367
and now you're going to get back
all of the things

00:29:58.367 --> 00:30:01.367
that are connected
to that object, Franz Liszt,

00:30:01.367 --> 00:30:03.868
and we're gonna learn
that he's a composer.

00:30:03.868 --> 00:30:05.868
And now the trick is to say,

00:30:05.868 --> 00:30:09.501
can your application
take the results of this query

00:30:09.501 --> 00:30:12.567
and respond to those
in useful ways?

00:30:12.567 --> 00:30:15.567
So if I want to sort of respond
to him as a person,

00:30:15.567 --> 00:30:17.567
I could write
a bunch of functions

00:30:17.567 --> 00:30:19.601
that deal with the properties

00:30:19.601 --> 00:30:22.567
coming off of here as a person
to represent him as a person.

00:30:22.567 --> 00:30:24.901
If I think that composers
are important,

00:30:24.901 --> 00:30:27.901
I can go and add some
more methods around composers

00:30:27.901 --> 00:30:30.901
to the system without
ever having to change the query.

00:30:30.901 --> 00:30:33.601
And the important thing
to understand

00:30:33.601 --> 00:30:36.200
is that Freebase
is a very live community, right?

00:30:36.200 --> 00:30:38.200
The graph
is continually changing.

00:30:38.200 --> 00:30:40.200
New connections are being made
to objects.

00:30:40.200 --> 00:30:42.200
New types and new properties

00:30:42.200 --> 00:30:44.200
are coming into existence
every day.

00:30:44.200 --> 00:30:47.200
If you have to go in
and actually modify the queries

00:30:47.200 --> 00:30:50.200
and modify the code
that's digesting those queries

00:30:50.200 --> 00:30:52.701
and taking them apart
and finding all the results,

00:30:52.701 --> 00:30:54.400
that's a lot of work.

00:30:54.400 --> 00:30:58.367
Much easier to write sort of
a straightforward query

00:30:58.367 --> 00:31:01.234
that grabs all the information
that it can

00:31:01.234 --> 00:31:03.868
and then sends it off
for processing

00:31:03.868 --> 00:31:07.534
in the applications, so that you
get some useful results back.

00:31:07.534 --> 00:31:09.200
So this is great.

00:31:09.200 --> 00:31:11.534
I think, you know, this is--
this really does suggest

00:31:11.534 --> 00:31:13.901
sort of this
property-driven programming.

00:31:13.901 --> 00:31:16.901
I see the property,
I respond to it, in which case,

00:31:16.901 --> 00:31:19.400
my application has really become
sort of semantically aware.

00:31:19.400 --> 00:31:22.400
That is, I'm responding
to the meaning of these objects

00:31:22.400 --> 00:31:25.033
in interesting ways.

00:31:25.033 --> 00:31:27.133
But that's actually, I think,

00:31:27.133 --> 00:31:29.267
just sort of the first part
of the story.

00:31:29.267 --> 00:31:31.968
Metaschema is the idea

00:31:31.968 --> 00:31:35.033
that there are generalized
relationships in Freebase.

00:31:35.033 --> 00:31:37.334
So, for instance, if we think
about Jane Austen

00:31:37.334 --> 00:31:39.200
and her relationship
to Steventon,

00:31:39.200 --> 00:31:42.234
we can say, well, that's not
just her place of birth,

00:31:42.234 --> 00:31:45.868
but that's in some sense,
the origin of Jane Austen.

00:31:45.868 --> 00:31:49.667
And similarly, we could look at
her book, "Pride and Prejudice,"

00:31:49.667 --> 00:31:52.501
and we could say its place
of first publication--

00:31:52.501 --> 00:31:55.834
that property points to London,
but we could also think of that

00:31:55.834 --> 00:31:58.167
as being the PlaceOfOrigin
for the book.

00:31:58.167 --> 00:32:01.000
So now we have one property

00:32:01.000 --> 00:32:03.434
which actually describes
two properties.

00:32:03.434 --> 00:32:05.400
And so, if we actually respond

00:32:05.400 --> 00:32:07.767
to PlaceOfOrigin
in some interesting way,

00:32:07.767 --> 00:32:09.734
now we actually
have some leverage.

00:32:09.734 --> 00:32:12.133
We can actually
group properties together

00:32:12.133 --> 00:32:15.601
write a bunch of methods
against, uh, these,

00:32:15.601 --> 00:32:18.834
and we'll get sort of more power
out of our application.

00:32:18.834 --> 00:32:21.834
One of the nice things about
metaschema is it actually isn't,

00:32:21.834 --> 00:32:24.434
uh, just sort of single-property
relationships, as well.

00:32:24.434 --> 00:32:28.067
In Freebase, when you represent
the relationship

00:32:28.067 --> 00:32:31.133
of an actor to the film,
for instance, Colin Firth

00:32:31.133 --> 00:32:34.701
to the BBC miniseries
"Pride and Prejudice,"

00:32:34.701 --> 00:32:36.801
there's actually
an intermediate node there,

00:32:36.801 --> 00:32:38.467
which is the performance,

00:32:38.467 --> 00:32:40.167
and that performance
is necessary

00:32:40.167 --> 00:32:43.300
because we need to be able
to tell you that on that path

00:32:43.300 --> 00:32:46.033
between "Pride and Prejudice"
and Colin Firth,

00:32:46.033 --> 00:32:48.567
he actually played
a role of Darcy,

00:32:48.567 --> 00:32:51.167
and we need a place to actually
hang that property,

00:32:51.167 --> 00:32:53.367
and that's gonna come off
of the performance.

00:32:53.367 --> 00:32:55.567
But in sort of a colloquial way,

00:32:55.567 --> 00:32:57.567
it would be nice
to be able to say,

00:32:57.567 --> 00:33:01.234
oh, Colin For--Firth
was an actor

00:33:01.234 --> 00:33:04.067
in "Pride and Prejudice,"
as opposed to actually saying,

00:33:04.067 --> 00:33:05.767
well, he was
in this performance,

00:33:05.767 --> 00:33:07.934
and that performance
was for this movie.

00:33:07.934 --> 00:33:10.934
So one of the nice things
is that metaschema

00:33:10.934 --> 00:33:14.234
actually allows us to jump over
relationships, as well.

00:33:14.234 --> 00:33:17.267
So now we can actually have
a HasContributor relationship

00:33:17.267 --> 00:33:19.133
between Colin Firth

00:33:19.133 --> 00:33:22.200
and the BBC production
of "Pride and Prejudice."

00:33:22.200 --> 00:33:24.701
So we went through
the whole graph,

00:33:24.701 --> 00:33:27.300
and we looked at
all of the properties

00:33:27.300 --> 00:33:29.234
in Freebase commons,

00:33:29.234 --> 00:33:31.200
and what we discovered

00:33:31.200 --> 00:33:34.334
was that about 3,500
of the properties

00:33:34.334 --> 00:33:37.934
actually fell into
one of 46 patterns,

00:33:37.934 --> 00:33:40.901
and those 46 patterns

00:33:40.901 --> 00:33:44.934
package those 3,500 properties

00:33:44.934 --> 00:33:49.300
in interesting sort of,
um, stylistic patterns.

00:33:49.300 --> 00:33:51.934
And, of course, what fun
would this mapping

00:33:51.934 --> 00:33:55.467
of those 3,500 properties
into 46 patterns be

00:33:55.467 --> 00:33:57.467
if we didn't actually go
and represent that

00:33:57.467 --> 00:34:00.033
in the graph itself,
so that you could query it?

00:34:00.033 --> 00:34:01.601
So that mapping,

00:34:01.601 --> 00:34:04.567
uh, into all of these properties
into those patterns,

00:34:04.567 --> 00:34:07.534
is actually represented in what
we call this metaschema schema.

00:34:07.534 --> 00:34:09.300
And it's actually very simple.

00:34:09.300 --> 00:34:11.801
I won't go into the details
here, but the idea is

00:34:11.801 --> 00:34:14.601
that you can start with
something like a property,

00:34:14.601 --> 00:34:16.334
/film/director/film,

00:34:16.334 --> 00:34:18.968
and you can ask what it--
the relationship is,

00:34:18.968 --> 00:34:22.234
what is the predicate, the type
of relationship that it has?

00:34:22.234 --> 00:34:25.934
And we can actually use
that little query snippet,

00:34:25.934 --> 00:34:30.000
um, in our Jane Austen query

00:34:30.000 --> 00:34:32.067
about what properties
are on these types,

00:34:32.067 --> 00:34:35.934
and we're gonna get back, then,
all of the different patterns

00:34:35.934 --> 00:34:38.534
of the different properties
that are on those types.

00:34:38.534 --> 00:34:40.334
So with Jane Austen,

00:34:40.334 --> 00:34:42.167
this isn't actually
terribly interesting, right?

00:34:42.167 --> 00:34:44.167
I mean, what we really know
about Jane Austen

00:34:44.167 --> 00:34:46.467
is that she was an author.
Yeah, that's great.

00:34:46.467 --> 00:34:49.467
I mean, very important author
and she's really fun to read,

00:34:49.467 --> 00:34:52.501
but she's not that challenging
to actually represent.

00:34:52.501 --> 00:34:54.501
But when it comes to somebody
like Robert Redford,

00:34:54.501 --> 00:34:56.400
things go a little bit
weird, right?

00:34:56.400 --> 00:34:58.067
I mean, he's an actor,

00:34:58.067 --> 00:35:00.567
but we actually represent
the fact that he's a film actor

00:35:00.567 --> 00:35:03.133
and a TV actor and a stage actor
all separately.

00:35:03.133 --> 00:35:06.234
But yet, if our application
is responding to meaning,

00:35:06.234 --> 00:35:09.000
it would be nice to actually
group those things together,

00:35:09.000 --> 00:35:11.534
so we can play out that
same query using Robert Redford,

00:35:11.534 --> 00:35:13.367
and what we discover
is, in fact,

00:35:13.367 --> 00:35:15.767
we get a much fewer
set of predicates

00:35:15.767 --> 00:35:17.701
than we do of all the properties

00:35:17.701 --> 00:35:19.968
that, uh, he is actually
connected to.

00:35:19.968 --> 00:35:23.434
So we can actually add
this little, um, snippet

00:35:23.434 --> 00:35:25.234
into our reflection,

00:35:25.234 --> 00:35:28.234
and now when we look
at the connections

00:35:28.234 --> 00:35:30.501
between Jane Austen
and all of the other objects,

00:35:30.501 --> 00:35:33.267
we can get those relationships
back now as metaschema,

00:35:33.267 --> 00:35:34.968
as one of these 46 patterns.

00:35:34.968 --> 00:35:39.033
So the idea here is really to
reduce the number of properties

00:35:39.033 --> 00:35:40.934
that your program
has to respond to,

00:35:40.934 --> 00:35:42.801
needs to understand
in some sense.

00:35:42.801 --> 00:35:46.300
We said that Freebase has
a really rich set of vocabulary,

00:35:46.300 --> 00:35:47.968
and that's absolutely true,

00:35:47.968 --> 00:35:50.501
but the question is, you know,
would you really like

00:35:50.501 --> 00:35:54.367
to have to go and map all of
those properties into methods,

00:35:54.367 --> 00:35:56.868
or would you actually
like to say, well, there are

00:35:56.868 --> 00:35:58.868
kind of these 46 patterns
that I'm interested in,

00:35:58.868 --> 00:36:00.701
and there are some
very specialized things

00:36:00.701 --> 00:36:02.801
that I want to do,
perhaps, around people?

00:36:02.801 --> 00:36:06.033
Um, or, you know, whatever it is
that my domain of interest is,

00:36:06.033 --> 00:36:07.701
but the rest of them,

00:36:07.701 --> 00:36:09.901
I can sort of group into
these larger collections

00:36:09.901 --> 00:36:11.834
and respond to in aggregate.

00:36:11.834 --> 00:36:15.701
So that was sort of
a whirlwind tour through this.

00:36:15.701 --> 00:36:19.167
What I wanted to do, since we
have a little bit of time,

00:36:19.167 --> 00:36:23.100
uh, is to show you

00:36:23.100 --> 00:36:26.400
uh, a very bad application,

00:36:26.400 --> 00:36:28.734
and I would not suggest that,

00:36:28.734 --> 00:36:31.467
um, that this is a framework
in any way.

00:36:31.467 --> 00:36:34.567
It's just an idea out there
that you can sort of look at

00:36:34.567 --> 00:36:36.400
and try to understand
what's going on.

00:36:36.400 --> 00:36:39.033
Um, so this
not-pretty application

00:36:39.033 --> 00:36:41.767
is designed for you to clone--
um, it is--

00:36:41.767 --> 00:36:44.400
I tried to be as bare-bones
about things as possible,

00:36:44.400 --> 00:36:47.133
so that you could actually see
what was going on.

00:36:47.133 --> 00:36:49.567
Um, and so, in this--oops.

00:36:49.567 --> 00:36:54.534
Uh, I can ask for,
uh, Jane Austen...

00:36:54.534 --> 00:36:56.167
Oops.

00:36:56.167 --> 00:36:58.400
Apparently, hard--

00:36:58.400 --> 00:37:00.868
hard to see
what's going on over there.

00:37:05.200 --> 00:37:08.534
There we go.

00:37:08.534 --> 00:37:12.367
And what I have
is just, uh, two methods

00:37:12.367 --> 00:37:14.033
in this application,

00:37:14.033 --> 00:37:16.968
which are responding to,

00:37:16.968 --> 00:37:19.300
um, the results
of the reflect query,

00:37:19.300 --> 00:37:22.934
so this is a very bare-bones
template to display things.

00:37:22.934 --> 00:37:25.067
In fact, all of the juice

00:37:25.067 --> 00:37:27.934
is in this,
um, one function here,

00:37:27.934 --> 00:37:29.667
reflection,

00:37:29.667 --> 00:37:32.167
so I go to doreflect,
and look at this,

00:37:32.167 --> 00:37:35.300
and this is just going through

00:37:35.300 --> 00:37:37.133
and actually running
the reflect query,

00:37:37.133 --> 00:37:39.033
and then dispatching into

00:37:39.033 --> 00:37:41.501
a bunch of functions
that I've defined,

00:37:41.501 --> 00:37:44.033
um, for the different properties
that I get back,

00:37:44.033 --> 00:37:46.767
and I have
a very minimal collection

00:37:46.767 --> 00:37:49.167
of these properties,
or these functions,

00:37:49.167 --> 00:37:52.000
so I have something
for common_topic_alias.

00:37:52.000 --> 00:37:54.534
You saw that
with George Washington.

00:37:54.534 --> 00:37:56.834
And I'm saying,
if there's an image,

00:37:56.834 --> 00:37:58.901
show us the image, as well.

00:37:58.901 --> 00:38:01.834
Now that wasn't too interesting

00:38:01.834 --> 00:38:04.334
for, uh, Jane Austen,

00:38:04.334 --> 00:38:08.067
and let me show you,
uh, what happens if we do...

00:38:08.067 --> 00:38:11.601
Ridley Scott.

00:38:13.567 --> 00:38:17.100
Here, we see the alias
and the images coming back.

00:38:17.100 --> 00:38:19.100
Again, not terribly exciting.

00:38:19.100 --> 00:38:21.601
But if we wanted to do something
more interesting

00:38:21.601 --> 00:38:23.501
for Ridley Scott, say,

00:38:23.501 --> 00:38:26.167
I could add a function in

00:38:26.167 --> 00:38:31.667
which interprets
the, uh, relationship

00:38:31.667 --> 00:38:34.133
between a film director
and his films,

00:38:34.133 --> 00:38:37.767
and so I'll add
this very simple one in.

00:38:37.767 --> 00:38:40.567
It just goes off and gets
the picture of the film

00:38:40.567 --> 00:38:42.801
at the other end of the link.

00:38:42.801 --> 00:38:45.801
Go back and refresh.

00:38:45.801 --> 00:38:49.567
And now actually, I'm
interpreting all of the other--

00:38:49.567 --> 00:38:52.734
The query hasn't changed at all.
Same information coming back.

00:38:52.734 --> 00:38:56.200
I'm just dispatching on another
property, so this is great.

00:38:56.200 --> 00:38:57.868
I've got more information

00:38:57.868 --> 00:39:00.634
about the films
that he's directed here.

00:39:00.634 --> 00:39:04.167
Um, but, uh...

00:39:04.167 --> 00:39:06.100
Let's see. If I do
Jane Austen again,

00:39:06.100 --> 00:39:07.834
just to sort of prove

00:39:07.834 --> 00:39:10.934
that I'm not doing anything
too magical here...

00:39:14.601 --> 00:39:16.901
Um, this doesn't help
Jane Austen at all, right?

00:39:16.901 --> 00:39:19.067
She's not a film director.
Okay, so great.

00:39:19.067 --> 00:39:22.701
Let's actually go and turn this
into a bit of metaschema,

00:39:22.701 --> 00:39:25.334
so down here,
I've added a function

00:39:25.334 --> 00:39:27.000
for ContributedTo,

00:39:27.000 --> 00:39:30.000
which is one of the properties
that I'll get back,

00:39:30.000 --> 00:39:33.100
uh, and then if I go and--

00:39:33.100 --> 00:39:36.133
it turns out that this reflect
query and this metareflect query

00:39:36.133 --> 00:39:38.667
are literally the same
except for that one clause,

00:39:38.667 --> 00:39:41.734
but unfortunately, I didn't want
to try to edit it on the fly

00:39:41.734 --> 00:39:44.067
since I'm really bad
at the keyboard,

00:39:44.067 --> 00:39:47.067
uh, and I will just change
the query that I'm using

00:39:47.067 --> 00:39:49.434
to metareflect.

00:39:51.934 --> 00:39:55.334
Now if we look at Jane Austen,

00:39:55.334 --> 00:39:57.367
we discover
that she has contributed

00:39:57.367 --> 00:39:59.434
to a whole bunch of films.

00:39:59.434 --> 00:40:02.901
She's credited as the
story writer for these films,

00:40:02.901 --> 00:40:04.901
not--not the screenwriter,

00:40:04.901 --> 00:40:07.400
uh, as well as a whole bunch
of information

00:40:07.400 --> 00:40:09.167
about books and things
like that,

00:40:09.167 --> 00:40:10.801
um, and if I go in

00:40:10.801 --> 00:40:13.434
and actually look
at Ridley Scott again...

00:40:19.300 --> 00:40:22.334
What I get back is not only
the films that he directed,

00:40:22.334 --> 00:40:24.767
but he also has produced
a bunch of films

00:40:24.767 --> 00:40:29.200
and acted as, you know,
ancillary personnel on films,

00:40:29.200 --> 00:40:31.701
and so we get a whole lot
more information

00:40:31.701 --> 00:40:33.367
about the films
that he's worked on.

00:40:33.367 --> 00:40:35.367
And, of course,
if we were really clever,

00:40:35.367 --> 00:40:37.033
we could actually
display the property

00:40:37.033 --> 00:40:38.868
that was contributing to this
metaschema relationship

00:40:38.868 --> 00:40:40.534
and things like that.

00:40:40.534 --> 00:40:43.033
But the idea is that this
is a really simple pattern

00:40:43.033 --> 00:40:44.701
which takes that one query now

00:40:44.701 --> 00:40:47.200
and allows you to do
a whole lot of stuff with it,

00:40:47.200 --> 00:40:50.100
and allows you to incrementally
change your application

00:40:50.100 --> 00:40:52.634
to respond to the data
that's coming back.

00:40:52.634 --> 00:40:55.667
Um, so this is online,

00:40:55.667 --> 00:40:59.501
and if you go to the, um,

00:40:59.501 --> 00:41:01.067
there's...

00:41:01.067 --> 00:41:02.901
Let's see here.

00:41:06.434 --> 00:41:10.701
If you go to
io2011.freebaseapps.com,

00:41:10.701 --> 00:41:13.601
um, all of the queries that
I went through today are there,

00:41:13.601 --> 00:41:16.634
as well as a link
to that application,

00:41:16.634 --> 00:41:18.133
which you can clone,

00:41:18.133 --> 00:41:21.267
uh, and modify
and play with yourself,

00:41:21.267 --> 00:41:24.767
and then there's information
about Freebase documentation.

00:41:24.767 --> 00:41:26.767
All of the things
that I've been telling you

00:41:26.767 --> 00:41:28.868
are in that documentation,

00:41:28.868 --> 00:41:31.534
and we have a very active
developer community.

00:41:31.534 --> 00:41:34.067
Um, the Freebase mailing list,

00:41:34.067 --> 00:41:38.133
um, you can find out about it
at lists.freebase.com.

00:41:38.133 --> 00:41:41.434
So I'm happy
to entertain questions,

00:41:41.434 --> 00:41:44.367
comments.

00:41:44.367 --> 00:41:48.000
Happily, I left about as much
time as I had hoped for.

00:41:50.133 --> 00:41:51.801
All right.

00:41:51.801 --> 00:41:54.734
[applause]

00:41:59.834 --> 00:42:01.968
man: This may be
a silly 101 question,

00:42:01.968 --> 00:42:03.734
but what's the relationship

00:42:03.734 --> 00:42:05.801
between the data that's
in Freebase right now

00:42:05.801 --> 00:42:09.033
and, say, other source data
like Wikipedia

00:42:09.033 --> 00:42:11.400
or census data
or stuff like that?

00:42:11.400 --> 00:42:14.167
Taylor: Right, so Freebase
is a super-set

00:42:14.167 --> 00:42:16.067
of a lot of different data sets,

00:42:16.067 --> 00:42:19.200
um, so we're continuously
importing Wikipedia,

00:42:19.200 --> 00:42:22.667
uh, mostly for
the topics themselves.

00:42:22.667 --> 00:42:26.300
Um, and I'm not sure what
the total article count

00:42:26.300 --> 00:42:28.567
in Wikipedia is these days,

00:42:28.567 --> 00:42:31.100
but it's, I believe,
well under 4 million,

00:42:31.100 --> 00:42:33.801
so given the 22 million
that's in Freebase,

00:42:33.801 --> 00:42:36.734
um, it's a pretty, you know,
small section.

00:42:36.734 --> 00:42:40.667
It's an important section,
um, but it's a subset of--

00:42:40.667 --> 00:42:43.667
We have other data sets,

00:42:43.667 --> 00:42:47.467
like MusicBrainz is brought in,
um, for a lot of music data.

00:42:47.467 --> 00:42:50.200
It's augmented by a lot
of other sources, as well,

00:42:50.200 --> 00:42:53.501
so Freebase is really,
in some sense, the melting pot

00:42:53.501 --> 00:42:55.534
for all of these
different data sets.

00:42:55.534 --> 00:42:57.200
And one of the important things,

00:42:57.200 --> 00:42:58.901
um, is you can think
about Freebase

00:42:58.901 --> 00:43:00.601
as sort of the Rosetta stone

00:43:00.601 --> 00:43:03.167
for navigating between
these different data sets,

00:43:03.167 --> 00:43:06.267
because all of their
sort of internal identifiers

00:43:06.267 --> 00:43:09.501
are actually maintained
with the Freebase topics,

00:43:09.501 --> 00:43:14.000
so that you can actually use
a Wikipedia article name,

00:43:14.000 --> 00:43:15.667
come into Freebase,

00:43:15.667 --> 00:43:18.167
and find the topic that
that's associated with,

00:43:18.167 --> 00:43:22.100
and then jet out to another
data source, um, as well.

00:43:22.100 --> 00:43:24.434
So it's--that's one
very important way

00:43:24.434 --> 00:43:26.400
of actually using Freebase.

00:43:26.400 --> 00:43:29.501
man: I'm curious how and if MQL

00:43:29.501 --> 00:43:31.400
handles transitive predicates.
Taylor: Ahh.

00:43:31.400 --> 00:43:33.934
man: And, uh, in terms of
querying either n-hops

00:43:33.934 --> 00:43:35.934
or, uh infinite hops,
and within the topic.

00:43:35.934 --> 00:43:38.734
Taylor: Yeah, so we--
MQL does not actually have

00:43:38.734 --> 00:43:41.033
any transitive operations,
so it's up to you

00:43:41.033 --> 00:43:42.701
to navigate
those links yourself.

00:43:42.701 --> 00:43:44.367
man: Okay, thanks.

00:43:44.367 --> 00:43:46.400
man: I know Google
just recently put out

00:43:46.400 --> 00:43:49.100
a whole lot of
the U.S. Patent Office online.

00:43:49.100 --> 00:43:51.167
Is there any chance
of getting this integrated?

00:43:51.167 --> 00:43:53.167
Taylor: Uh, you know, I think
it really depends

00:43:53.167 --> 00:43:55.634
on sort of the interest
of the community,

00:43:55.634 --> 00:43:57.501
um, but, yes, we've actually--

00:43:57.501 --> 00:44:00.467
people have added
patent models before

00:44:00.467 --> 00:44:03.601
in hopes that we could actually
do that type of thing.

00:44:03.601 --> 00:44:05.534
I don't know
of any current plans,

00:44:05.534 --> 00:44:08.667
but I think it's
a pretty interesting idea.

00:44:08.667 --> 00:44:11.033
man: So my question
centers around

00:44:11.033 --> 00:44:12.901
using MQL outside of Freebase.

00:44:12.901 --> 00:44:16.000
Obviously, it's a very
expressive syntax,

00:44:16.000 --> 00:44:18.400
and it would be very good
for other APIs,

00:44:18.400 --> 00:44:20.901
so my question is,
do you have any advice on--

00:44:20.901 --> 00:44:22.567
um, is it very feasible

00:44:22.567 --> 00:44:24.567
to be able to,
um, incorporate the same syntax

00:44:24.567 --> 00:44:26.567
and, like, what's some
good things to read?

00:44:26.567 --> 00:44:29.968
Taylor: So this has actually
come up on the mailing list,

00:44:29.968 --> 00:44:33.467
uh, in the past,
and we know of actually

00:44:33.467 --> 00:44:36.100
at least two other
MQL implementations

00:44:36.100 --> 00:44:37.767
that are out there.

00:44:37.767 --> 00:44:40.501
Um, there's a geo data set
and another knowledge base

00:44:40.501 --> 00:44:43.033
that is actually using,
essentially, MQL syntax.

00:44:43.033 --> 00:44:45.601
In fact, the geo dataset--

00:44:45.601 --> 00:44:48.200
um, their documentation
just pointed to ours.

00:44:48.200 --> 00:44:50.033
Um, they had
very specific things,

00:44:50.033 --> 00:44:52.033
but the actual MQL syntax
and things like that,

00:44:52.033 --> 00:44:55.234
they wanted you to actually
look at sort of this one source.

00:44:55.234 --> 00:44:58.300
And we'd be, you know,
very interested and excited

00:44:58.300 --> 00:45:00.400
to see other people adopting it.

00:45:00.400 --> 00:45:03.000
I don't have anything specific
to say about the implementation.

00:45:03.000 --> 00:45:05.067
I'm not sort of in that world,

00:45:05.067 --> 00:45:07.167
but I know that, you know,

00:45:07.167 --> 00:45:09.234
there are actual papers
that have been published

00:45:09.234 --> 00:45:11.734
on, like graphd, the underlying
data store and things like that,

00:45:11.734 --> 00:45:14.234
so I'm sure if you asked,
you know, hard questions

00:45:14.234 --> 00:45:16.234
that you might have,
on the mailing list,

00:45:16.234 --> 00:45:18.601
somebody would probably
be interested in talking.

00:45:18.601 --> 00:45:21.501
man: Uh, hi. Thanks for
your presentation.

00:45:21.501 --> 00:45:25.801
Uh, so are there
any uses of Freebase

00:45:25.801 --> 00:45:27.601
that are not permitted?

00:45:27.601 --> 00:45:30.234
Basically, is there
an open license?

00:45:30.234 --> 00:45:34.567
Can Freebase be integrated
into commercial applications?

00:45:34.567 --> 00:45:36.300
Are there different
content licenses?

00:45:36.300 --> 00:45:39.033
Do people own what they put
into Freebase? Et cetera.

00:45:39.033 --> 00:45:41.300
Taylor: Yeah, so that's
a great question.

00:45:41.300 --> 00:45:44.834
Um, so everything that's
in Freebase in the graph

00:45:44.834 --> 00:45:47.868
is available under a Creative
Commons Attribution license,

00:45:47.868 --> 00:45:50.601
and you're free to use that
however you want

00:45:50.601 --> 00:45:53.534
in your own applications,
commercial or otherwise.

00:45:53.534 --> 00:45:57.000
The data--
things like the images,

00:45:57.000 --> 00:45:58.968
um, and some of
the article descriptions,

00:45:58.968 --> 00:46:01.234
are under other open licenses,

00:46:01.234 --> 00:46:03.200
and you can actually
get that information.

00:46:03.200 --> 00:46:05.000
You need to make
the proper attribution

00:46:05.000 --> 00:46:06.667
if you're using those things

00:46:06.667 --> 00:46:08.634
that are coming out of what
we call the blob store,

00:46:08.634 --> 00:46:11.634
um, but there's also--
and I didn't put it up there.

00:46:11.634 --> 00:46:14.334
It's in the documentation--
um, the data dumps,

00:46:14.334 --> 00:46:17.334
which is a very popular way
of consuming the data en masse

00:46:17.334 --> 00:46:19.334
if you're going to do
processing on it

00:46:19.334 --> 00:46:21.000
for different applications,

00:46:21.000 --> 00:46:23.534
so those are being produced
on a very regular basis,

00:46:23.534 --> 00:46:25.601
so you can actually
look through the whole graph,

00:46:25.601 --> 00:46:27.901
extract the information
that you're interested in,

00:46:27.901 --> 00:46:31.434
and use it, uh, with
the proper attributions.

00:46:34.634 --> 00:46:36.701
Great. Well, I really appreciate

00:46:36.701 --> 00:46:38.567
all of the questions
and comments,

00:46:38.567 --> 00:46:40.467
and feel free to contact me if

00:46:40.467 --> 00:46:42.968
you have any further thoughts.
Thank you.

00:46:42.968 --> 00:46:45.901
[applause]

