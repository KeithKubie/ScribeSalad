WEBVTT
Kind: captions
Language: en

00:00:02.780 --> 00:00:05.460
When we're talking about
performance, doing less work

00:00:05.460 --> 00:00:06.520
is important.

00:00:06.520 --> 00:00:08.590
But sometimes when
you do work is just

00:00:08.590 --> 00:00:11.120
as important as how
much work you do.

00:00:11.120 --> 00:00:12.310
I'm Ian Ni-Lewis.

00:00:12.310 --> 00:00:15.340
Smart devices have plenty of
ways to drain your battery.

00:00:15.340 --> 00:00:18.190
The CPU, the radios, and
all the various sensors

00:00:18.190 --> 00:00:20.340
need a lot of power to operate.

00:00:20.340 --> 00:00:23.109
Now, if all of these systems
were powered up all the time,

00:00:23.109 --> 00:00:24.650
there's no way our
devices could last

00:00:24.650 --> 00:00:28.270
a full day on a battery small
enough to fit into your pocket.

00:00:28.270 --> 00:00:30.900
So to conserve power, each
of the systems in the device

00:00:30.900 --> 00:00:33.420
is designed to go to sleep
when it's not needed.

00:00:33.420 --> 00:00:35.380
But most of these
components have power states

00:00:35.380 --> 00:00:37.300
that are a little more
sophisticated than just

00:00:37.300 --> 00:00:39.180
sleeping and waking.

00:00:39.180 --> 00:00:41.640
And just like me in the
morning, individual components

00:00:41.640 --> 00:00:45.030
in a smart device take some time
to wake up from a deep sleep.

00:00:45.030 --> 00:00:47.420
And not only time,
but also energy.

00:00:47.420 --> 00:00:50.180
Oscillating between being all
the way asleep and all the way

00:00:50.180 --> 00:00:53.520
awake can consume nearly as
much power as just staying awake

00:00:53.520 --> 00:00:55.220
all the time.

00:00:55.220 --> 00:00:58.190
And to avoid this,
manufacturers design each system

00:00:58.190 --> 00:01:00.690
with multiple power
states, from fully off,

00:01:00.690 --> 00:01:04.360
through one or more stages of
readiness, to fully powered.

00:01:04.360 --> 00:01:08.620
For instance, a WCDMA radio
has four power states.

00:01:08.620 --> 00:01:11.410
Each successive state
consumes more power,

00:01:11.410 --> 00:01:14.010
but the higher the power state,
the more quickly the device

00:01:14.010 --> 00:01:16.440
can become fully operational.

00:01:16.440 --> 00:01:18.430
Now, this kind of
design works really well

00:01:18.430 --> 00:01:20.570
when the load on the
device is bursty.

00:01:20.570 --> 00:01:22.539
That is, a bunch of
work items arrive

00:01:22.539 --> 00:01:24.080
fairly close to one
another, and then

00:01:24.080 --> 00:01:26.900
there's a long period
where no items arrive.

00:01:26.900 --> 00:01:29.090
So during a burst,
the radio will maybe

00:01:29.090 --> 00:01:31.215
oscillate a bit between
its top power modes,

00:01:31.215 --> 00:01:33.090
but it never gets into
a state where it would

00:01:33.090 --> 00:01:35.270
take a long time to wake up.

00:01:35.270 --> 00:01:36.860
And then when the
work tails off,

00:01:36.860 --> 00:01:39.570
it drops to a lower power
mode, then a lower one,

00:01:39.570 --> 00:01:43.140
and finally down to its
deepest level of sleep.

00:01:43.140 --> 00:01:46.040
But what if the load
doesn't follow this pattern?

00:01:46.040 --> 00:01:48.710
Well, if work items are
spaced out a bit more,

00:01:48.710 --> 00:01:51.540
then the radio spends more
time in high power states,

00:01:51.540 --> 00:01:55.200
even though it doesn't spend
any more time doing real work.

00:01:55.200 --> 00:01:57.870
The worst case scenario
is that work items

00:01:57.870 --> 00:01:59.960
arrive at just the
right frequency

00:01:59.960 --> 00:02:02.870
to keep the radio
from ever going idle.

00:02:02.870 --> 00:02:05.540
And this is exactly what
happens, for example,

00:02:05.540 --> 00:02:08.840
when a device is running a large
number of apps that are all

00:02:08.840 --> 00:02:11.420
doing background syncs
on their own slightly

00:02:11.420 --> 00:02:13.100
different schedule.

00:02:13.100 --> 00:02:16.810
If you want to avoid being
that app that wastes power,

00:02:16.810 --> 00:02:18.710
you need to find a way
to do your background

00:02:18.710 --> 00:02:20.960
work at the same
time as other apps

00:02:20.960 --> 00:02:24.165
so you can share the cost of
these power state transitions.

00:02:24.165 --> 00:02:26.310
But how do you do that?

00:02:26.310 --> 00:02:28.690
Well, fortunately Android
gives you several options

00:02:28.690 --> 00:02:30.260
for scheduling your
background work

00:02:30.260 --> 00:02:32.980
to run in a batch with
work from other processes.

00:02:32.980 --> 00:02:36.530
Let's start with the simplest
technique, Alarm Manager.

00:02:36.530 --> 00:02:38.710
Now, Alarm Manager is
like an alarm clock.

00:02:38.710 --> 00:02:41.440
It schedules a wake-up
call for your app.

00:02:41.440 --> 00:02:45.360
You can ask for an inexact
alarm or an exact alarm.

00:02:45.360 --> 00:02:47.950
If you use an exact
alarm, the system

00:02:47.950 --> 00:02:51.969
will try to wake up your app at
exactly the time you asked for.

00:02:51.969 --> 00:02:53.760
The problem with that
is that you might not

00:02:53.760 --> 00:02:57.100
be waking up at a time that's
convenient for the device.

00:02:57.100 --> 00:03:00.290
So if you ask for an
inexact alarm instead,

00:03:00.290 --> 00:03:03.280
you're giving the permission
to adjust your time slightly

00:03:03.280 --> 00:03:06.620
to align it with
an existing batch.

00:03:06.620 --> 00:03:09.700
So how do you get
that inexact behavior?

00:03:09.700 --> 00:03:12.200
Well, if you want
a one-shot alarm,

00:03:12.200 --> 00:03:14.990
you call AlarmManager.setWindow.

00:03:14.990 --> 00:03:16.700
And if you want a
repeating alarm,

00:03:16.700 --> 00:03:19.630
you call AlarmManager.set
InexactRepeating.

00:03:19.630 --> 00:03:24.540
Now, both of those calls
create inexact alarms.

00:03:24.540 --> 00:03:27.640
Now, don't call
AlarmManager.setExact

00:03:27.640 --> 00:03:29.760
unless you absolutely have to.

00:03:29.760 --> 00:03:33.620
For instance, if your app
really is an alarm clock.

00:03:33.620 --> 00:03:36.850
A more comprehensive technique
is to implement a sync adapter

00:03:36.850 --> 00:03:37.880
in your app.

00:03:37.880 --> 00:03:40.380
Now, sync adapters give you
exactly the same batching

00:03:40.380 --> 00:03:43.590
behavior as inexact
alarms, but they also

00:03:43.590 --> 00:03:45.350
give you network
connectivity checks

00:03:45.350 --> 00:03:47.690
and automatically retries.

00:03:47.690 --> 00:03:50.390
Implementing a sync adapter can
be a little daunting at first

00:03:50.390 --> 00:03:53.090
because they're composed of
a number of moving parts.

00:03:53.090 --> 00:03:54.560
Don't get discouraged.

00:03:54.560 --> 00:03:57.020
There is an online training
guide that will help you get up

00:03:57.020 --> 00:03:58.760
and running fast.

00:03:58.760 --> 00:04:02.040
Finally, if you're
targeting API 21 or higher,

00:04:02.040 --> 00:04:03.720
you get the best of both worlds.

00:04:03.720 --> 00:04:05.920
The new job scheduler
API, it's as easy

00:04:05.920 --> 00:04:08.210
to use as Alarm Manager,
but it gives you

00:04:08.210 --> 00:04:11.610
all of the important features
of sync adapter and more.

00:04:11.610 --> 00:04:14.200
You can specify the schedule,
the amount that the system is

00:04:14.200 --> 00:04:17.079
allowed to deviate from that
schedule, and a whole set

00:04:17.079 --> 00:04:19.640
of conditions the define when
the job should and shouldn't

00:04:19.640 --> 00:04:20.700
run.

00:04:20.700 --> 00:04:23.030
For instance, with
one line of code,

00:04:23.030 --> 00:04:25.430
you can set up a job that
will run periodically,

00:04:25.430 --> 00:04:27.320
but only when the
device is charging

00:04:27.320 --> 00:04:29.440
and only when it's on Wi-Fi.

00:04:29.440 --> 00:04:32.760
You can even set up a retry
with backup [? policy ?] in case

00:04:32.760 --> 00:04:33.750
the job fails.

00:04:33.750 --> 00:04:37.690
Now, that's all done
through JobInfo.Builder.

00:04:37.690 --> 00:04:39.190
So stop wasting power.

00:04:39.190 --> 00:04:42.670
Batching your background
jobs is incredibly easy.

00:04:42.670 --> 00:04:44.300
It might be the
easiest battery saving

00:04:44.300 --> 00:04:46.540
technique you'll ever learn.

00:04:46.540 --> 00:04:48.290
Now, there's plenty
more power saving tips

00:04:48.290 --> 00:04:50.660
on the Android Performance
Patterns home page,

00:04:50.660 --> 00:04:51.740
so check it out.

00:04:51.740 --> 00:04:53.480
And don't forget
to join G+ group.

00:04:53.480 --> 00:04:55.570
And remember, keep calm.

00:04:55.570 --> 00:04:57.040
Profile your code.

00:04:57.040 --> 00:04:59.680
And as always, perf matters.

00:04:59.680 --> 00:05:01.230
[MUSIC PLAYING]

