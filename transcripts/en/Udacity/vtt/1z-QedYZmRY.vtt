WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
The answer is no, this doesn't quite work.

00:00:02.000 --> 00:00:07.000
The reason it doesn't work is this message encrypting r with a key,

00:00:07.000 --> 00:00:10.000
that's exactly what the server sent.

00:00:10.000 --> 00:00:13.000
So this certainly doesn't prove knowledge of k

00:00:13.000 --> 00:00:16.000
because this could just be reflected back to the server.

00:00:16.000 --> 00:00:18.000
So we need to do something a little different.

00:00:18.000 --> 00:00:21.000
Instead of encrypting just r, we need to encrypt something else

00:00:21.000 --> 00:00:26.000
that proves knowledge of k and r but couldn't be generated just by replaying this.

00:00:26.000 --> 00:00:30.000
And so one way to do that would be to add another nonce.

00:00:30.000 --> 00:00:32.000
We're going to concatenate a new nonce here

00:00:32.000 --> 00:00:35.000
and encrypt the concatenation of those 2.

00:00:35.000 --> 00:00:39.000
The server can decrypt this, extract r, check that it matches,

00:00:39.000 --> 00:00:42.000
and extract that value,

00:00:42.000 --> 00:00:46.000
and the server could send that value back encrypted with k.

00:00:46.000 --> 00:00:52.000
At this stage both the server and the client have proved knowledge of the password,

00:00:52.000 --> 00:00:55.000
they've established a shared secret that they can use for further communication,

00:00:55.000 --> 00:00:58.000
and they've done this in a way so that even if there's an active attacker

00:00:58.000 --> 00:01:01.000
intercepting and modifying all these messages,

00:01:01.000 --> 00:01:04.000
if the attacker doesn't know the password, p,

00:01:04.000 --> 00:01:07.000
they can't trick the client and server into believing that they're talking with each other

00:01:07.000 --> 99:59:59.000
or establishing a key that's different from the one that they would establish.

