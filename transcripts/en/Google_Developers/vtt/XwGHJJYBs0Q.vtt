WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:01.250
RICHARD FULCHER: So
good morning.

00:00:01.250 --> 00:00:05.160
Welcome to a session
entirely devoted to

00:00:05.160 --> 00:00:07.430
navigation in Android.

00:00:07.430 --> 00:00:08.580
My name's Rich Fulcher.

00:00:08.580 --> 00:00:11.090
I'm one of the interaction
designers on the Android user

00:00:11.090 --> 00:00:11.970
experience team.

00:00:11.970 --> 00:00:13.240
ADAM POWELL: And I'm
Adam Powell.

00:00:13.240 --> 00:00:15.812
I'm a framework engineer
in Mountain View.

00:00:15.812 --> 00:00:18.870
RICHARD FULCHER: And we both
care passionately about

00:00:18.870 --> 00:00:20.240
navigation.

00:00:20.240 --> 00:00:23.050
In fact, when I first applied to
work at Google three years

00:00:23.050 --> 00:00:28.320
ago, resolving questions with
Back was part of my first

00:00:28.320 --> 00:00:32.040
interview to become an
interaction designer here.

00:00:32.040 --> 00:00:32.910
So we're going to take
you through a

00:00:32.910 --> 00:00:35.350
lot of content today.

00:00:35.350 --> 00:00:38.690
So to get started, to really
understand tasks in Android,

00:00:38.690 --> 00:00:40.290
first, you have to have
a good understanding

00:00:40.290 --> 00:00:42.560
of how tasks behave.

00:00:42.560 --> 00:00:45.760
And then Adam will help set
the stage for that.

00:00:45.760 --> 00:00:49.530
ADAM POWELL: So a lot of early
Android apps talked about

00:00:49.530 --> 00:00:50.750
being task managers.

00:00:50.750 --> 00:00:52.770
But generally, they were
actually talking about

00:00:52.770 --> 00:00:54.390
managing processes.

00:00:54.390 --> 00:00:57.170
In Android, a process can be
a container for multiple

00:00:57.170 --> 00:00:58.020
components.

00:00:58.020 --> 00:01:00.830
And a task can contain
activities hosted by many

00:01:00.830 --> 00:01:02.030
different processes.

00:01:02.030 --> 00:01:05.910
They really aren't
the same thing.

00:01:05.910 --> 00:01:07.620
RICHARD FULCHER: So let's
just do a couple

00:01:07.620 --> 00:01:09.220
of examples of this.

00:01:09.220 --> 00:01:11.350
This is a really simple task
that we'll build out.

00:01:11.350 --> 00:01:12.570
We're going to open Gmail.

00:01:12.570 --> 00:01:15.250
And we're going to dive in
and view a conversation.

00:01:15.250 --> 00:01:17.010
And the way I'm going to show
a bunch of examples during

00:01:17.010 --> 00:01:18.660
this talk is with this format.

00:01:18.660 --> 00:01:20.930
The left-hand side of the screen
will show the state of

00:01:20.930 --> 00:01:23.900
the task stack as activities
are added to it.

00:01:23.900 --> 00:01:26.590
And the right-hand side will
show the screen progression

00:01:26.590 --> 00:01:28.990
that the user experiences
as they navigate.

00:01:28.990 --> 00:01:32.230
So starting here, we start
at the Home screen.

00:01:32.230 --> 00:01:34.670
We have the Launcher activity
at the base of the

00:01:34.670 --> 00:01:36.940
task stack for us.

00:01:36.940 --> 00:01:40.370
Clicking on the Gmail icon
from Home opens up the

00:01:40.370 --> 00:01:43.440
activity for the Gmail
Conversation List.

00:01:43.440 --> 00:01:45.230
I'm just going to use wire
frames throughout this talk,

00:01:45.230 --> 00:01:49.370
just to keep the focus on
the navigation itself.

00:01:49.370 --> 00:01:52.260
So that has added the
Conversation List activity

00:01:52.260 --> 00:01:53.620
onto the task stack.

00:01:53.620 --> 00:01:56.160
If I navigate deeper, I go
down into a particular

00:01:56.160 --> 00:01:59.170
conversation to view the
messages inside of that.

00:01:59.170 --> 00:02:02.050
Then the Conversation View
was added as well.

00:02:02.050 --> 00:02:06.560
And that's just building
up a very simple task.

00:02:06.560 --> 00:02:10.639
Another slightly more
complicated example involves

00:02:10.639 --> 00:02:14.040
activities that are coming from
multiple applications.

00:02:14.040 --> 00:02:16.250
Adam mentioned that we can do
this within a single task.

00:02:16.250 --> 00:02:18.320
That's one of the strengths
of Android.

00:02:18.320 --> 00:02:20.660
So I'm going to start
at Home again.

00:02:20.660 --> 00:02:23.310
I'm going to build into--

00:02:23.310 --> 00:02:26.130
enter into Talk, where I see the
Friend List, the list of

00:02:26.130 --> 00:02:28.140
everybody I can have a
conversation with.

00:02:28.140 --> 00:02:30.590
I'll pick a particular friend
from that list.

00:02:30.590 --> 00:02:31.740
Go into the Chat View.

00:02:31.740 --> 00:02:34.250
That activity gets added on.

00:02:34.250 --> 00:02:38.290
Let's say that friend had sent
me a link to a YouTube video.

00:02:38.290 --> 00:02:41.080
I can continue into a different
application.

00:02:41.080 --> 00:02:43.710
In this case, I can
go to YouTube.

00:02:43.710 --> 00:02:47.560
And that activity is added to
the task stack as well--

00:02:47.560 --> 00:02:48.280
the same system.

00:02:48.280 --> 00:02:49.890
We're just adding and
adding and adding on

00:02:49.890 --> 00:02:51.350
top to the task stack.

00:02:51.350 --> 00:02:52.160
And I can go further.

00:02:52.160 --> 00:02:54.300
If I wanted to watch this video
and then share it with a

00:02:54.300 --> 00:02:57.040
friend, I could hit
the Share button.

00:02:57.040 --> 00:03:00.700
And that'll take me to Gmail's
Compose Screen, yet another

00:03:00.700 --> 00:03:03.170
activity that we just drop
onto the task stack.

00:03:03.170 --> 00:03:05.090
So now we finish this example.

00:03:05.090 --> 00:03:08.020
We've got Launcher at the
root of the stack.

00:03:08.020 --> 00:03:10.560
We've got activities from three
different applications,

00:03:10.560 --> 00:03:14.280
all part of this one
continuous task.

00:03:14.280 --> 00:03:16.700
And this is the way that tasks
have always worked inside of

00:03:16.700 --> 00:03:21.000
Android, all the way back
to Android 1.0.

00:03:21.000 --> 00:03:24.310
And one particular control,
the Back button, has been

00:03:24.310 --> 00:03:26.720
along for the whole ride.

00:03:26.720 --> 00:03:29.170
Although over time, it's changed
its appearance a

00:03:29.170 --> 00:03:29.650
little bit.

00:03:29.650 --> 00:03:31.360
It's now trimmer than
it used to be.

00:03:34.660 --> 00:03:38.510
So Back works by unwinding
that task stack

00:03:38.510 --> 00:03:39.920
that we build up.

00:03:39.920 --> 00:03:43.260
It actually unwinds the
global history stack.

00:03:43.260 --> 00:03:45.820
We'll get into that in a
little bit more detail.

00:03:45.820 --> 00:03:48.120
It finishes off the
current activity.

00:03:48.120 --> 00:03:50.600
So when I hit Back, the activity
has the opportunity

00:03:50.600 --> 00:03:52.640
to do things, save out
any local state

00:03:52.640 --> 00:03:54.250
that it wants to preserve.

00:03:54.250 --> 00:03:57.010
And then clears itself away
off the task stack.

00:03:57.010 --> 00:04:00.660
And the ActivityManager brings
forward the next lower down

00:04:00.660 --> 00:04:03.230
activity and presents
that to the user.

00:04:03.230 --> 00:04:06.670
Now, of course, there are
a couple of exceptions.

00:04:06.670 --> 00:04:11.090
Most of these just relate to
when Back handles a local bit

00:04:11.090 --> 00:04:12.650
of state within the activity.

00:04:12.650 --> 00:04:16.779
So things like if the virtual
keyboard is displayed, Back

00:04:16.779 --> 00:04:18.085
will recede that.

00:04:18.085 --> 00:04:21.540
If there are dialogues or
spinners that have popped

00:04:21.540 --> 00:04:25.270
open, Back will dismiss those.

00:04:25.270 --> 00:04:27.520
If you have a selection mode,
Back will get rid of that.

00:04:27.520 --> 00:04:30.150
And then a subsequent press of
Back in all of those cases

00:04:30.150 --> 00:04:32.300
will actually act as
the navigation.

00:04:32.300 --> 00:04:35.490
There are also a few instances
where Back is completely taken

00:04:35.490 --> 00:04:36.460
over by the application.

00:04:36.460 --> 00:04:38.680
The browser is the most obvious
and notable example of

00:04:38.680 --> 00:04:42.930
that, where Back becomes back
through your browsing history,

00:04:42.930 --> 00:04:45.400
kind of historical browsing
context within browser.

00:04:48.430 --> 00:04:50.850
So going back to the two
examples we covered at the

00:04:50.850 --> 00:04:52.470
start, what does Back do?

00:04:52.470 --> 00:04:55.510
Well, it's actually really
simple in both cases.

00:04:55.510 --> 00:04:58.620
Back from Gmail just pops that
activity off the stack.

00:04:58.620 --> 00:05:01.210
And the Conversation List
comes to the front.

00:05:01.210 --> 00:05:04.130
Hitting Back again finishes
that activity,

00:05:04.130 --> 00:05:06.100
returns me to Home.

00:05:06.100 --> 00:05:10.380
Same is true for the slightly
more complex case.

00:05:10.380 --> 00:05:12.760
Again, we built up these
different activities from

00:05:12.760 --> 00:05:13.350
different apps.

00:05:13.350 --> 00:05:16.160
But Back just walks through
them just as comfortably.

00:05:16.160 --> 00:05:20.300
Back, Back, Back,
Back to Home.

00:05:20.300 --> 00:05:22.530
And once we're at Home,
there's no place

00:05:22.530 --> 00:05:23.510
further back to go.

00:05:23.510 --> 00:05:26.490
So Back loses meaning once
it lands in that context.

00:05:26.490 --> 00:05:28.960
You've got a safe root
point to do all of

00:05:28.960 --> 00:05:31.960
your exploration from.

00:05:31.960 --> 00:05:34.310
So now Adam's going to talk a
little bit about how multiple

00:05:34.310 --> 00:05:35.912
tasks work.

00:05:35.912 --> 00:05:36.610
ADAM POWELL: Right.

00:05:36.610 --> 00:05:39.900
We've been focused on single
tasks so far, but how do

00:05:39.900 --> 00:05:42.980
multiple tasks behave?

00:05:42.980 --> 00:05:46.330
So you might have noticed that
the Recents list here is a

00:05:46.330 --> 00:05:48.540
whole lot like something else
that you might be used to

00:05:48.540 --> 00:05:49.790
using day to day.

00:05:54.170 --> 00:05:57.630
So it's very similar to
your browser tab list.

00:05:57.630 --> 00:06:01.840
But so how do tasks really
work in the context of

00:06:01.840 --> 00:06:03.470
Android with this?

00:06:03.470 --> 00:06:05.610
What are all those intent flags
that you see in the

00:06:05.610 --> 00:06:07.490
developer documentation?

00:06:07.490 --> 00:06:10.060
There's a lot about how tasks
work internally that isn't

00:06:10.060 --> 00:06:11.400
immediately obvious.

00:06:11.400 --> 00:06:14.270
But it really helps make things
feel right to the user

00:06:14.270 --> 00:06:15.570
when they're all put together.

00:06:15.570 --> 00:06:17.970
And it's useful for you as a
developer to know how a bunch

00:06:17.970 --> 00:06:20.270
of this stuff is going on under
the hood, even if your

00:06:20.270 --> 00:06:21.520
users don't have to.

00:06:28.580 --> 00:06:32.060
So ActivityManager, which is the
component that ties all of

00:06:32.060 --> 00:06:35.580
this navigation together, sees
the world as one big global

00:06:35.580 --> 00:06:38.510
activity stack sorted by task.

00:06:38.510 --> 00:06:40.750
So this might explain some of
the behavior that you've seen

00:06:40.750 --> 00:06:43.590
here and there that might have
made you scratch your head.

00:06:43.590 --> 00:06:46.790
So if I hit Back a few times,
I'll pop from the top of the

00:06:46.790 --> 00:06:49.640
stack until I hit Home.

00:06:49.640 --> 00:06:52.020
Home then prevents me from
popping further.

00:06:52.020 --> 00:06:53.750
The rest of the stack still
exists, though.

00:06:53.750 --> 00:06:55.350
This is part of my
global navigation

00:06:55.350 --> 00:06:56.600
history across the system.

00:06:59.510 --> 00:07:02.870
So we said before that your list
of tasks in Android is

00:07:02.870 --> 00:07:04.680
very similar to your
tabs in a browser.

00:07:04.680 --> 00:07:06.980
So how do you open a new tab?

00:07:06.980 --> 00:07:09.390
How do you create a new task?

00:07:09.390 --> 00:07:14.780
So in an example here, from
Home, we open Talk.

00:07:14.780 --> 00:07:17.480
A new task is created.

00:07:17.480 --> 00:07:20.390
And further navigation
within Talk just adds

00:07:20.390 --> 00:07:23.100
to that same task.

00:07:23.100 --> 00:07:25.645
So how many of you use tabbed
browsing out there?

00:07:25.645 --> 00:07:27.460
Show of hands?

00:07:27.460 --> 00:07:28.950
OK, pretty much everybody.

00:07:28.950 --> 00:07:33.140
So keep your hand up if you end
up with way too many tabs

00:07:33.140 --> 00:07:34.940
open at the end of the day.

00:07:34.940 --> 00:07:35.720
Oh, look at that.

00:07:35.720 --> 00:07:37.480
Just as many people.

00:07:37.480 --> 00:07:39.510
So we really didn't want to have
the same problem happen

00:07:39.510 --> 00:07:42.030
in Android.

00:07:42.030 --> 00:07:45.470
Because manually curating your
browser tabs really stinks.

00:07:45.470 --> 00:07:48.620
You have to do this manual
garbage collection pass every

00:07:48.620 --> 00:07:51.070
now and then, just to make sure
that things stay cleaned

00:07:51.070 --> 00:07:53.690
up and that you can still
understand what the heck

00:07:53.690 --> 00:07:55.740
you're doing on your desktop.

00:07:55.740 --> 00:07:59.030
So we have this idea called
Task Affinity in Android.

00:07:59.030 --> 00:08:02.440
Task Affinity lets us keep a
single context associated with

00:08:02.440 --> 00:08:04.705
a task instead of multiple
tasks that

00:08:04.705 --> 00:08:06.670
are very, very similar.

00:08:06.670 --> 00:08:09.200
And this avoids having multiple
tabs open for doing

00:08:09.200 --> 00:08:11.040
the same thing.

00:08:11.040 --> 00:08:14.090
So how does this work?

00:08:14.090 --> 00:08:17.940
When we launch an activity into
a new task here and a

00:08:17.940 --> 00:08:20.940
task with the same affinity
already exists, then the

00:08:20.940 --> 00:08:24.040
existing task gets brought
to the front.

00:08:24.040 --> 00:08:26.670
Now, if the intent that we just
launched matches the root

00:08:26.670 --> 00:08:29.990
intent of that existing task,
the one that's at the very

00:08:29.990 --> 00:08:32.320
bottom of the task stack,
then we're done.

00:08:32.320 --> 00:08:34.419
We have nothing else to do.

00:08:34.419 --> 00:08:38.980
So what it means for an intent
to match is a little

00:08:38.980 --> 00:08:41.570
unintuitive if you're not
familiar with this particular

00:08:41.570 --> 00:08:45.820
little detail here, is that
intent extras don't count.

00:08:45.820 --> 00:08:47.380
They're always app specific.

00:08:47.380 --> 00:08:49.990
And the system really doesn't
even pretend to know how to

00:08:49.990 --> 00:08:53.140
unparcel them and compare them
for any sort of equivalence.

00:08:53.140 --> 00:08:55.920
So that means that intents can
match even if they have very

00:08:55.920 --> 00:08:58.638
different extras.

00:08:58.638 --> 00:09:04.110
But all of this put together
means that this is why

00:09:04.110 --> 00:09:07.810
Launcher is able to act as a
task switcher on its own.

00:09:07.810 --> 00:09:10.110
Shortcuts always launch
a new task.

00:09:10.110 --> 00:09:12.680
And it's always the root
activity of that task if it

00:09:12.680 --> 00:09:14.200
was already existing.

00:09:14.200 --> 00:09:16.930
So before Honeycomb, this is how
a lot of users got around

00:09:16.930 --> 00:09:17.380
the system.

00:09:17.380 --> 00:09:18.390
You would just hit Home.

00:09:18.390 --> 00:09:20.020
And then you would reopen
the app that you wanted.

00:09:20.020 --> 00:09:23.280
But it would reopen to exactly
the same state that it was in

00:09:23.280 --> 00:09:26.895
the previous time that
you were using it.

00:09:26.895 --> 00:09:28.350
RICHARD FULCHER: So now
we've got a handle

00:09:28.350 --> 00:09:30.140
on how tasks work.

00:09:30.140 --> 00:09:32.050
We've talked a little bit
about affinity, how Back

00:09:32.050 --> 00:09:34.880
behaves, but navigation
has evolved

00:09:34.880 --> 00:09:36.610
during Android's history.

00:09:36.610 --> 00:09:38.990
And in particular, we'll talk
about Up and Recents, and how

00:09:38.990 --> 00:09:40.860
they've been added.

00:09:40.860 --> 00:09:44.360
So let's bring the
timeline back up.

00:09:44.360 --> 00:09:50.270
By the start of 2010, we knew
we kind of had a problem.

00:09:50.270 --> 00:09:53.230
Or more exactly, we knew that
our users were having several

00:09:53.230 --> 00:09:55.690
problems when it came to
navigation within Android.

00:10:00.100 --> 00:10:02.520
We had system-level controls
for navigation.

00:10:02.520 --> 00:10:04.740
We had Back, which we've
talked about.

00:10:04.740 --> 00:10:06.000
And we had Home.

00:10:06.000 --> 00:10:08.770
Home was kind of a task
switcher, but it was a little

00:10:08.770 --> 00:10:10.210
bit awkward for that.

00:10:10.210 --> 00:10:11.750
I'd have to hit the Home key.

00:10:11.750 --> 00:10:13.480
I'd come back to the
Home screen.

00:10:13.480 --> 00:10:15.660
Maybe the task I'm trying to
switch to isn't on that Home

00:10:15.660 --> 00:10:17.530
screen, so I might have
to locate it.

00:10:17.530 --> 00:10:19.540
Or maybe it is on any of the
Home screens, and I have to

00:10:19.540 --> 00:10:22.690
bring up the All Apps
drawer to find it.

00:10:22.690 --> 00:10:24.910
We had a more elegant way of
doing that, which was our

00:10:24.910 --> 00:10:27.620
Recents control, which you'd
invoke by kind of long

00:10:27.620 --> 00:10:29.030
pressing on Home.

00:10:29.030 --> 00:10:30.820
And it would bring
up not a lot of

00:10:30.820 --> 00:10:31.920
details about the tasks.

00:10:31.920 --> 00:10:36.970
You'd get five application
icons and five labels.

00:10:36.970 --> 00:10:41.610
But we knew from listening to
the users that people just

00:10:41.610 --> 00:10:43.470
didn't know this function
existed.

00:10:43.470 --> 00:10:46.300
It was really a very hidden,
power-user feature.

00:10:46.300 --> 00:10:48.120
And users were craving something
that was a lot more

00:10:48.120 --> 00:10:50.230
obvious than that.

00:10:50.230 --> 00:10:50.820
What about for the

00:10:50.820 --> 00:10:53.180
application-level navigation controls?

00:10:53.180 --> 00:10:55.810
These are switching
between tasks--

00:10:55.810 --> 00:10:56.940
or moving within the task.

00:10:56.940 --> 00:11:00.030
What about inside an app?

00:11:00.030 --> 00:11:02.260
We didn't have any story
really there.

00:11:02.260 --> 00:11:05.860
Now, that didn't stop charming,
clever developers

00:11:05.860 --> 00:11:08.150
such as yourselves from
coming up with ways

00:11:08.150 --> 00:11:09.410
to work around this.

00:11:09.410 --> 00:11:13.090
One popular one was to take
the Menu button and to add

00:11:13.090 --> 00:11:15.590
additional actions into that
that would target specific

00:11:15.590 --> 00:11:17.450
activities within your
application.

00:11:17.450 --> 00:11:19.670
So it might be that you added
an action to go to the

00:11:19.670 --> 00:11:20.710
Home of your app.

00:11:20.710 --> 00:11:24.450
Or to go to a common screen
like an Account list or an

00:11:24.450 --> 00:11:27.050
inbox, those types of things.

00:11:27.050 --> 00:11:30.180
Another approach that a lot of
apps took was to take the Back

00:11:30.180 --> 00:11:33.830
button and try to turn it into
something like a structural

00:11:33.830 --> 00:11:37.090
navigation element by overriding
its behavior.

00:11:37.090 --> 00:11:38.860
A lot of apps did this.

00:11:38.860 --> 00:11:40.310
I've worked on apps
that did this--

00:11:40.310 --> 00:11:40.710
[COUGH]

00:11:40.710 --> 00:11:42.980
Gmail.

00:11:42.980 --> 00:11:45.980
But it made the Back button very
inconsistent for users.

00:11:45.980 --> 00:11:48.280
They couldn't really predict
what was going to happen when

00:11:48.280 --> 00:11:50.270
in certain contexts we'd
get overridden and

00:11:50.270 --> 00:11:51.810
do something different.

00:11:51.810 --> 00:11:53.095
So we wanted to address those.

00:11:56.070 --> 00:11:58.110
I think a problem that happened
with a lot of early

00:11:58.110 --> 00:12:01.350
Android applications is that it
was easy to build them in a

00:12:01.350 --> 00:12:04.590
way that it was just kind of
like a bag of activities that

00:12:04.590 --> 00:12:06.420
you would throw your
activities into.

00:12:06.420 --> 00:12:07.090
And you could shake it up.

00:12:07.090 --> 00:12:09.540
And the user could move to
different activities through

00:12:09.540 --> 00:12:11.690
whatever affordances you
wanted to give them.

00:12:11.690 --> 00:12:13.690
And there might be
a top doorway in.

00:12:13.690 --> 00:12:16.140
But once you started diving in
a little bit, you could get

00:12:16.140 --> 00:12:19.400
these paths that were a little
bit formless, a little bit

00:12:19.400 --> 00:12:22.195
unpredictable, and could even
have circuits in the path

00:12:22.195 --> 00:12:24.580
where I start from one
screen and follow a

00:12:24.580 --> 00:12:26.540
forward-navigating path
that takes me back

00:12:26.540 --> 00:12:27.920
to that same screen.

00:12:27.920 --> 00:12:32.480
In which case Back gets
quite interesting.

00:12:32.480 --> 00:12:38.110
We definitely heard from
coworkers, from users, a lot

00:12:38.110 --> 00:12:39.610
of frustration.

00:12:39.610 --> 00:12:41.290
And when people are frustrated,
they come talk to

00:12:41.290 --> 00:12:43.780
their designers.

00:12:43.780 --> 00:12:47.150
So we didn't want to be
associated with this.

00:12:47.150 --> 00:12:49.600
We wanted to take this problem
head on and really try to do

00:12:49.600 --> 00:12:50.850
something about it.

00:12:50.850 --> 00:12:52.160
So we did.

00:12:52.160 --> 00:12:55.690
We started at I/O
two years ago.

00:12:55.690 --> 00:12:58.100
Myself and a few other members
of the user experience team

00:12:58.100 --> 00:13:02.060
were on a stage about this
size, talking about five

00:13:02.060 --> 00:13:04.212
interface patterns that we
thought were helpful for app

00:13:04.212 --> 00:13:04.980
developers.

00:13:04.980 --> 00:13:06.860
And one of the ones we
introduced in that session,

00:13:06.860 --> 00:13:09.370
talked about, was
the Action Bar.

00:13:09.370 --> 00:13:11.650
So the Action Bar was trying
to solve two problems.

00:13:11.650 --> 00:13:14.755
The first was to make the most
common actions more visible.

00:13:14.755 --> 00:13:17.310
And you've heard about that in
the sessions earlier today, so

00:13:17.310 --> 00:13:18.520
I won't go there.

00:13:18.520 --> 00:13:20.770
But the other thing it tried
to do is give a sense of

00:13:20.770 --> 00:13:23.170
structure and place
to the app.

00:13:23.170 --> 00:13:24.840
The Action Bar was intended
to replace the

00:13:24.840 --> 00:13:26.350
old Title Bar element.

00:13:26.350 --> 00:13:28.480
Internally, we called it the
Interactive Title Bar for

00:13:28.480 --> 00:13:30.160
quite a while.

00:13:30.160 --> 00:13:33.400
So the area at the left would
give you the app icon and the

00:13:33.400 --> 00:13:35.910
name of the activity that you
were currently viewing.

00:13:35.910 --> 00:13:38.870
But it would also be a touch
target for jumping back up to

00:13:38.870 --> 00:13:40.750
the top of the application.

00:13:40.750 --> 00:13:43.450
In the same way that a user
might expect to touch at the

00:13:43.450 --> 00:13:46.910
logo at the upper left corner
of a website, it's going to

00:13:46.910 --> 00:13:48.555
come back to the home
of that site.

00:13:48.555 --> 00:13:51.580
So we're trying to play
off those conventions.

00:13:51.580 --> 00:13:54.400
Now that said, what we gave you
at I/O two years ago was

00:13:54.400 --> 00:13:55.920
far from perfect.

00:13:55.920 --> 00:13:57.025
It was an interface pattern.

00:13:57.025 --> 00:13:58.640
It wasn't supported
by the framework.

00:13:58.640 --> 00:14:00.970
It wasn't a code pattern yet.

00:14:00.970 --> 00:14:04.560
We were just kind of offering,
this would be a good thing for

00:14:04.560 --> 00:14:07.100
you to go and do.

00:14:07.100 --> 00:14:10.310
And it also only supported one
target, which was navigating

00:14:10.310 --> 00:14:12.330
directly to the top of
the application.

00:14:12.330 --> 00:14:15.000
And for some apps that's fine,
and that's suitable.

00:14:15.000 --> 00:14:18.600
For apps with deeper hierarchy,
you want to have a

00:14:18.600 --> 00:14:20.310
little bit more subtlety
than that.

00:14:20.310 --> 00:14:22.930
At the time, we were
demonstrating the Facebook app

00:14:22.930 --> 00:14:25.520
and the Twitter app during
that session.

00:14:25.520 --> 00:14:28.180
And those have a much richer
set of activities.

00:14:28.180 --> 00:14:31.100
They have entire subsections
to those apps.

00:14:31.100 --> 00:14:33.270
And a little bit more navigation
control would have

00:14:33.270 --> 00:14:34.520
been appropriate.

00:14:36.450 --> 00:14:38.730
So in 2010, we did
Gingerbread.

00:14:38.730 --> 00:14:40.950
It didn't really change
the story there.

00:14:40.950 --> 00:14:43.820
But in 2011 and 2012,
we really started

00:14:43.820 --> 00:14:44.820
tackling this problem.

00:14:44.820 --> 00:14:47.010
We wanted to take the direction
we'd laid out with

00:14:47.010 --> 00:14:49.790
that alpha version of the
Action Bar and really

00:14:49.790 --> 00:14:52.120
reinforce the story
that was there.

00:14:52.120 --> 00:14:54.760
And even as we were chatting at
I/O two years ago, we were

00:14:54.760 --> 00:14:56.210
already hard at work
on our tablet UI.

00:14:56.210 --> 00:15:00.240
So we started rolling that
thought right into Honeycomb,

00:15:00.240 --> 00:15:01.830
what would become the
full Action Bar.

00:15:01.830 --> 00:15:05.300
And then in ICS, we brought
it to phone with even more

00:15:05.300 --> 00:15:06.430
capabilities.

00:15:06.430 --> 00:15:10.110
And navigation was a critical
part of that.

00:15:10.110 --> 00:15:13.330
So a lot of what we tried to do
in those two releases was

00:15:13.330 --> 00:15:16.400
motivated by what we saw
from user research.

00:15:16.400 --> 00:15:19.950
We did very frequent testing
for Honeycomb.

00:15:19.950 --> 00:15:23.420
Literally, we would have two or
three sessions a week with

00:15:23.420 --> 00:15:27.650
four or five different
participants in a given

00:15:27.650 --> 00:15:32.410
session for four months when
we were testing Honeycomb.

00:15:32.410 --> 00:15:36.570
And during all of those tests,
we were testing navigation to

00:15:36.570 --> 00:15:37.300
some extent.

00:15:37.300 --> 00:15:39.410
We were testing a lot of
different applications.

00:15:39.410 --> 00:15:41.810
But that kind of glue that
let the user get to the

00:15:41.810 --> 00:15:44.900
applications, switch between
them, was always something

00:15:44.900 --> 00:15:47.590
that we were looking at.

00:15:47.590 --> 00:15:52.160
When I think about evaluating
what research can do for you,

00:15:52.160 --> 00:15:55.580
I think the wrong question that
people ask too often is

00:15:55.580 --> 00:15:56.570
if they do an experiment.

00:15:56.570 --> 00:16:00.220
And then they say, well, did
the product test well?

00:16:00.220 --> 00:16:03.120
I think a more valuable question
to ask is, did we

00:16:03.120 --> 00:16:05.960
glean some new insights
to the problems that

00:16:05.960 --> 00:16:07.160
we're trying to solve?

00:16:07.160 --> 00:16:09.660
And when it comes to navigation
and the work we did

00:16:09.660 --> 00:16:11.310
in Honeycomb, we
learned a lot.

00:16:11.310 --> 00:16:15.520
Our four big takeaways were this
notion of the navigation

00:16:15.520 --> 00:16:18.190
being in the upper left corner
of the screen calling back to

00:16:18.190 --> 00:16:21.050
their experience with the web
and with other devices was

00:16:21.050 --> 00:16:24.340
really powerful for users
and felt very natural.

00:16:24.340 --> 00:16:27.110
Users wanted to make a clear
distinction between navigation

00:16:27.110 --> 00:16:31.260
that kept you inside an
application and navigation

00:16:31.260 --> 00:16:32.960
controls that were
outside of it.

00:16:32.960 --> 00:16:36.240
So users definitely had a
distinction between things

00:16:36.240 --> 00:16:39.670
that we would render in the
applications content area and

00:16:39.670 --> 00:16:41.750
things that would be rendered
in the System bar.

00:16:41.750 --> 00:16:44.120
Or more typically at the time,
that would be physical

00:16:44.120 --> 00:16:46.295
hardware controls that
were on the device.

00:16:46.295 --> 00:16:49.210
It was sometimes a mapping
problem moving between those

00:16:49.210 --> 00:16:51.340
two sets for users.

00:16:51.340 --> 00:16:54.990
And users also want to have a
safe form of the navigation.

00:16:54.990 --> 00:16:57.610
They wanted to know that the
affordances or the controls

00:16:57.610 --> 00:17:00.540
that they would use would be
able to keep them within the

00:17:00.540 --> 00:17:04.200
app that they were currently
viewing.

00:17:04.200 --> 00:17:06.660
Users were incredibly frustrated
when they would

00:17:06.660 --> 00:17:09.579
press a Back button and
unexpectedly be jettisoned

00:17:09.579 --> 00:17:10.349
from an app.

00:17:10.349 --> 00:17:13.060
That's back to our bag of
activities from before.

00:17:13.060 --> 00:17:16.359
And then finally--
quick, obvious--

00:17:16.359 --> 00:17:18.470
task switching was super
important to them.

00:17:18.470 --> 00:17:20.349
So we wanted to address that.

00:17:20.349 --> 00:17:24.079
So we added two controls in
Honeycomb and ICS to cover

00:17:24.079 --> 00:17:25.750
those issues.

00:17:25.750 --> 00:17:30.000
Up was looking at those
first three issues.

00:17:30.000 --> 00:17:34.160
The upper left corner, the
inside-outside problem, and

00:17:34.160 --> 00:17:36.180
the predictability of
remaining within the

00:17:36.180 --> 00:17:38.560
application, that safety
guarantee.

00:17:38.560 --> 00:17:42.000
And Recents was our way of
taking that question of task

00:17:42.000 --> 00:17:45.340
switching and making it dead
obvious for the user.

00:17:45.340 --> 00:17:48.620
So I'll goes into detail on
both of these, first Up.

00:17:52.620 --> 00:17:55.230
Up is structural navigation.

00:17:55.230 --> 00:17:56.830
We've hit that point a couple
of times today,

00:17:56.830 --> 00:17:58.990
but I'll hit it again.

00:17:58.990 --> 00:18:00.440
It's going to keep
you in the app.

00:18:00.440 --> 00:18:02.230
When you're at the top of the
app, you don't even see it

00:18:02.230 --> 00:18:04.070
because it's all about
navigating in the app.

00:18:04.070 --> 00:18:04.715
You're at the top.

00:18:04.715 --> 00:18:06.690
There's no further to go.

00:18:06.690 --> 00:18:10.390
It's completely independent
of the task state.

00:18:10.390 --> 00:18:13.100
So all those examples that I
showed before of how the task

00:18:13.100 --> 00:18:17.430
stack builds, your behavior of
Up isn't affected by what's on

00:18:17.430 --> 00:18:19.540
that task stack.

00:18:19.540 --> 00:18:24.010
It's based entirely upon the
relationships between the

00:18:24.010 --> 00:18:25.950
different activities that you've
constructed in your

00:18:25.950 --> 00:18:27.920
app, the right parent/child

00:18:27.920 --> 00:18:29.840
relationships that exist there.

00:18:29.840 --> 00:18:32.820
It can alter the task stack as
a side effect, but it's not

00:18:32.820 --> 00:18:35.040
dependent upon it.

00:18:35.040 --> 00:18:40.650
And then as a result,
Up is not Back.

00:18:40.650 --> 00:18:44.250
They sometimes will have the
same effect for the user.

00:18:44.250 --> 00:18:46.380
But they behave differently.

00:18:46.380 --> 00:18:48.760
And there are a couple of
critical cases where they're

00:18:48.760 --> 00:18:50.140
actually quite different.

00:18:50.140 --> 00:18:53.140
So let's dive into those.

00:18:53.140 --> 00:18:58.750
So the first is when you're
doing a browsing session.

00:18:58.750 --> 00:19:01.280
And you're going to
Related Views.

00:19:01.280 --> 00:19:03.790
So an example here that we'll
use is, I've gone into the

00:19:03.790 --> 00:19:04.980
Play store.

00:19:04.980 --> 00:19:08.590
I'm looking at a
list of books.

00:19:08.590 --> 00:19:10.280
Maybe it's the featured books.

00:19:10.280 --> 00:19:12.930
And I pick a book that I want
to view more details about.

00:19:12.930 --> 00:19:16.380
And I go and I see that
Book Details screen.

00:19:16.380 --> 00:19:19.440
Now, part of a lot of store
experiences is that part of

00:19:19.440 --> 00:19:21.710
the item's display will
give you a list of

00:19:21.710 --> 00:19:24.160
related content items--

00:19:24.160 --> 00:19:26.190
you know, users also liked--

00:19:26.190 --> 00:19:28.020
that might show other books.

00:19:28.020 --> 00:19:30.700
And when you browse to that and
you click on that, we give

00:19:30.700 --> 00:19:34.800
you another Book Details
activity.

00:19:34.800 --> 00:19:37.030
And now, we've got two Book
Details activity.

00:19:37.030 --> 00:19:40.740
The same type of activity, but
two different instances of it

00:19:40.740 --> 00:19:42.580
get built onto the task stack.

00:19:42.580 --> 00:19:45.950
And now obviously, this
can extend from there.

00:19:45.950 --> 00:19:51.930
So the question becomes,
Back will do one thing.

00:19:51.930 --> 00:19:54.930
Back will unwind you through
that browsing history.

00:19:54.930 --> 00:19:56.290
I was looking at this book.

00:19:56.290 --> 00:19:57.810
I went and looked at
a related book.

00:19:57.810 --> 00:20:00.510
Now I'd like to come back
to that first book.

00:20:00.510 --> 00:20:02.840
Up is structural navigation.

00:20:02.840 --> 00:20:05.865
Up gives you the ability to
bypass that intermediate state

00:20:05.865 --> 00:20:08.300
and return up to that
original list.

00:20:08.300 --> 00:20:09.890
Now, that may not seem
like that big a deal

00:20:09.890 --> 00:20:11.620
for this short example.

00:20:11.620 --> 00:20:14.940
But imagine browser sessions
that could get quite lengthy.

00:20:14.940 --> 00:20:16.530
I might go from book
to book to book to

00:20:16.530 --> 00:20:17.910
book to book to book.

00:20:17.910 --> 00:20:20.376
And then in the old school, I
could go Back to Back to Back

00:20:20.376 --> 00:20:22.280
to Back to Back, to
Back to Back.

00:20:22.280 --> 00:20:24.950
Up lets you skip all
that and just jump

00:20:24.950 --> 00:20:26.200
right up to the list.

00:20:28.280 --> 00:20:31.370
The second instance where Back
and Up differ critically is

00:20:31.370 --> 00:20:34.010
when you have a task that's
being built up from multiple

00:20:34.010 --> 00:20:35.490
applications.

00:20:35.490 --> 00:20:37.630
And so I'll go through
one here.

00:20:37.630 --> 00:20:39.160
I'll start at Home.

00:20:39.160 --> 00:20:40.260
I'll go into YouTube.

00:20:40.260 --> 00:20:42.605
I'm browsing a list
of YouTube videos.

00:20:42.605 --> 00:20:46.050
I'll pick one out, and
I'll watch it.

00:20:46.050 --> 00:20:48.640
And then I'll elect to
share it over Gmail.

00:20:48.640 --> 00:20:51.420
So the Gmail Compose activity
comes to the

00:20:51.420 --> 00:20:54.120
front of the task stack.

00:20:54.120 --> 00:20:57.270
So from here, Back is going
to do the natural thing.

00:20:57.270 --> 00:21:00.630
If I decide I don't really want
to share that cat video

00:21:00.630 --> 00:21:04.320
with my friend, Back gets me out
of that context, takes me

00:21:04.320 --> 00:21:06.440
back to the lovely cat video.

00:21:06.440 --> 00:21:09.990
But if instead I wanted to
remain within Gmail--

00:21:09.990 --> 00:21:12.760
maybe the fact of firing up that
Compose reminded me of

00:21:12.760 --> 00:21:14.795
something else I
needed to do--

00:21:14.795 --> 00:21:17.390
the Up lets me stay inside.

00:21:17.390 --> 00:21:20.300
And, in fact, it'll take me to
a higher level activity that

00:21:20.300 --> 00:21:22.360
wasn't in the task stack
at any point.

00:21:22.360 --> 00:21:25.250
This is going to graduate me
up to the Conversation List

00:21:25.250 --> 00:21:27.560
and the inbox that's
associated with it.

00:21:27.560 --> 00:21:29.460
And a couple of critical
things happen here.

00:21:29.460 --> 00:21:31.680
We add that activity.

00:21:31.680 --> 00:21:33.740
We finish the Compose
activity.

00:21:33.740 --> 00:21:35.110
That one's gone.

00:21:35.110 --> 00:21:37.660
And we split the task.

00:21:37.660 --> 00:21:42.330
So we have one task, our old
YouTube task, now sans that

00:21:42.330 --> 00:21:44.720
useless Gmail Compose
activity.

00:21:44.720 --> 00:21:47.680
And we have a new task, the
Gmail task focused on the

00:21:47.680 --> 00:21:49.200
Conversation List.

00:21:49.200 --> 00:21:52.500
And we've also carried
along Home's Launcher

00:21:52.500 --> 00:21:53.555
activity for the ride.

00:21:53.555 --> 00:21:56.480
So that if I'm at the
Conversation List and now I

00:21:56.480 --> 00:21:58.610
hit Back, I'll actually
wind up back at Home.

00:22:01.690 --> 00:22:04.260
Recents is actually pretty
straightforward.

00:22:04.260 --> 00:22:07.850
It behaves the same as it did
for that hidden function way

00:22:07.850 --> 00:22:09.470
back in [? Android .1 ?].

00:22:09.470 --> 00:22:12.680
But what we've significantly
changed in Honeycomb was to

00:22:12.680 --> 00:22:16.550
just give the user a much
cleaner interaction with it.

00:22:16.550 --> 00:22:19.810
We introduced a dedicated button
in the system or in the

00:22:19.810 --> 00:22:22.560
navigation area.

00:22:22.560 --> 00:22:25.700
It brings the entire
task stack forward.

00:22:25.700 --> 00:22:29.720
And we just added a lot of
detail that helps the user

00:22:29.720 --> 00:22:30.970
make that decision.

00:22:33.110 --> 00:22:35.890
Instead of just getting the name
and the app icon, we're

00:22:35.890 --> 00:22:40.420
now giving the user those plus
a screen shot of the topmost

00:22:40.420 --> 00:22:43.580
activity in that task stack.

00:22:43.580 --> 00:22:46.430
Which is helpful for
both identifying--

00:22:46.430 --> 00:22:48.010
where's that task I'm trying
to get back to?

00:22:48.010 --> 00:22:48.560
Oh, it's this map.

00:22:48.560 --> 00:22:50.140
Yeah, it's that map.

00:22:50.140 --> 00:22:53.590
As well as orienting the
user for the switch.

00:22:53.590 --> 00:22:56.280
The user's already remembering
the context that they're going

00:22:56.280 --> 00:22:59.630
to be going into even before
that animation completes.

00:22:59.630 --> 00:23:02.460
So it's a much less jarring
transition for the user, which

00:23:02.460 --> 00:23:03.600
made it much better.

00:23:03.600 --> 00:23:06.280
Finally, we're delivering on
that great multitasking story

00:23:06.280 --> 00:23:11.670
that we always knew Android
was capable of supporting.

00:23:11.670 --> 00:23:16.180
ADAM POWELL: So coming back to
our diagram from before, when

00:23:16.180 --> 00:23:19.310
I choose Task B from Recents
here, what actually happens?

00:23:24.570 --> 00:23:28.340
So when you bring Task B to the
top using the Recents UI,

00:23:28.340 --> 00:23:30.870
Recents is starting the
root activity of Task

00:23:30.870 --> 00:23:32.170
B with these flags.

00:23:32.170 --> 00:23:34.330
Remember, when we start the root
activity of a task, it

00:23:34.330 --> 00:23:35.930
brings it forward.

00:23:35.930 --> 00:23:38.870
So we've already covered what
New Task does but what about

00:23:38.870 --> 00:23:40.430
this Task on Home thing?

00:23:40.430 --> 00:23:43.250
So this was a new flag that
we added in Honeycomb.

00:23:43.250 --> 00:23:46.070
And this is the flag that allows
us to bring Launcher

00:23:46.070 --> 00:23:47.950
along for the ride, like
Rich mentioned.

00:23:47.950 --> 00:23:53.160
To keep this more consistent
state that is more predictable

00:23:53.160 --> 00:23:54.820
for users when they
switch around.

00:23:57.810 --> 00:24:02.070
So after that switch, Task
B is now on top with Home

00:24:02.070 --> 00:24:03.500
immediately beneath it.

00:24:03.500 --> 00:24:06.890
And if I back through Gmail,
I'll end up on Home no matter

00:24:06.890 --> 00:24:11.274
how I got into Gmail,
just as I expect.

00:24:11.274 --> 00:24:14.060
RICHARD FULCHER: So one last
visit to the timeline.

00:24:14.060 --> 00:24:15.230
So we talked about Honeycomb.

00:24:15.230 --> 00:24:15.870
We talked about ICS.

00:24:15.870 --> 00:24:19.975
And today, we are proud
to announce--

00:24:23.040 --> 00:24:24.130
nothing else new.

00:24:24.130 --> 00:24:25.750
We haven't changed it.

00:24:25.750 --> 00:24:29.110
[APPLAUSE]

00:24:29.110 --> 00:24:30.360
RICHARD FULCHER:
You're welcome.

00:24:34.862 --> 00:24:38.300
ADAM POWELL: So now you know a
little bit more of the history

00:24:38.300 --> 00:24:40.860
of how we got where
we are here.

00:24:40.860 --> 00:24:44.120
And it's important to remember
that it's really easy to find

00:24:44.120 --> 00:24:47.520
these local maxima for your
app's experiences and sort of

00:24:47.520 --> 00:24:48.930
implement special functionality

00:24:48.930 --> 00:24:50.190
to make that happen.

00:24:50.190 --> 00:24:53.300
But following system conventions
makes your app

00:24:53.300 --> 00:24:56.860
more intuitive to people that
already know how other apps

00:24:56.860 --> 00:24:59.750
behave in the system, when
those apps follow those

00:24:59.750 --> 00:25:01.170
conventions too.

00:25:01.170 --> 00:25:04.720
But as you've already seen, the
Android framework has a

00:25:04.720 --> 00:25:07.630
lot of intricate options and
opportunities to do things

00:25:07.630 --> 00:25:08.620
differently.

00:25:08.620 --> 00:25:11.460
So how do we actually implement
all these guidelines

00:25:11.460 --> 00:25:13.530
that we're talking about here?

00:25:13.530 --> 00:25:15.420
Well, Back is really easy.

00:25:15.420 --> 00:25:16.760
We just leave it alone.

00:25:16.760 --> 00:25:19.400
Let it go ahead and unwind
fragment transactions or

00:25:19.400 --> 00:25:22.460
finish activities just as
it does by default.

00:25:22.460 --> 00:25:25.310
And let it move to the previous
activity in the task,

00:25:25.310 --> 00:25:25.970
so on and so forth.

00:25:25.970 --> 00:25:29.290
But what about this Up thing?

00:25:29.290 --> 00:25:33.510
So we talked before about
how Up can switch tasks.

00:25:33.510 --> 00:25:36.570
When you deliberately task
switch, here's how you bring

00:25:36.570 --> 00:25:39.880
Launcher along for the ride
the way that Recents does.

00:25:39.880 --> 00:25:42.000
And we talked about
this a little bit.

00:25:42.000 --> 00:25:44.630
But this really helps reinforce
this hub and spoke

00:25:44.630 --> 00:25:48.140
model of tasks for the users
with Launcher as this hub.

00:25:48.140 --> 00:25:50.225
Each one of the tasks
kind of splits

00:25:50.225 --> 00:25:52.510
out, forming the spokes.

00:25:52.510 --> 00:25:56.180
When a task is fully replaced,
then traversing back through a

00:25:56.180 --> 00:25:59.660
synthetic stack and returning
to the previous task instead

00:25:59.660 --> 00:26:01.470
feels really, really weird.

00:26:01.470 --> 00:26:04.110
So landing at Home reinforces
structure.

00:26:07.000 --> 00:26:10.740
So when we implement Up, we need
to fully replace the task

00:26:10.740 --> 00:26:11.150
that's there.

00:26:11.150 --> 00:26:13.300
Again, because of this new tabs
problem that we talked

00:26:13.300 --> 00:26:14.550
about before.

00:26:14.550 --> 00:26:17.530
By replacing the task, we're
effectively sort of faking

00:26:17.530 --> 00:26:18.230
history, though.

00:26:18.230 --> 00:26:20.240
And some of you may be
wondering, why would you

00:26:20.240 --> 00:26:21.100
really want to do that?

00:26:21.100 --> 00:26:22.930
Why not just have
Back be Back?

00:26:22.930 --> 00:26:24.455
Why are you lying
to the users?

00:26:24.455 --> 00:26:26.370
RICHARD FULCHER: Yeah, there are
actually a few different

00:26:26.370 --> 00:26:31.300
cases where the activity that's
the logical parent may

00:26:31.300 --> 00:26:35.300
or may not be something that's
already on that task stack.

00:26:35.300 --> 00:26:37.970
So we'll see this in more detail
when we talk about

00:26:37.970 --> 00:26:40.610
widgets and notifications
in just a little bit.

00:26:40.610 --> 00:26:42.075
And they actually behave
very similarly

00:26:42.075 --> 00:26:43.325
to Up in that regard.

00:26:47.006 --> 00:26:49.360
ADAM POWELL: So that means
that another ability that

00:26:49.360 --> 00:26:53.000
we'll need is being able to
replace an existing task.

00:26:53.000 --> 00:26:56.310
So for example, imagine that the
user's at Home with tasks

00:26:56.310 --> 00:26:59.150
they've already built up for
Gmail, Talk, and YouTube.

00:26:59.150 --> 00:27:03.970
That's A, B, and C as listed
on the slide here.

00:27:03.970 --> 00:27:06.330
So from Home, the user
navigates into

00:27:06.330 --> 00:27:07.820
Gmail from its widget.

00:27:07.820 --> 00:27:10.930
So this needs to be sort of
a deep link in there.

00:27:10.930 --> 00:27:13.900
Then it's the same story for Up
when you're composing from

00:27:13.900 --> 00:27:17.280
a different task, like in
our previous example.

00:27:17.280 --> 00:27:20.760
So using that widget will
make the old task

00:27:20.760 --> 00:27:22.410
state of Gmail invalid.

00:27:22.410 --> 00:27:26.710
So we use this Clear Task flag,
since we don't want

00:27:26.710 --> 00:27:29.420
leftover state or duplicate
Gmail tasks anywhere in the

00:27:29.420 --> 00:27:30.670
global activities stack.

00:27:33.340 --> 00:27:36.970
So as much as systems
programmers really enjoy

00:27:36.970 --> 00:27:39.980
packing arrays full of values
and getting exact flag

00:27:39.980 --> 00:27:42.350
combinations right through all
of that, we really wanted to

00:27:42.350 --> 00:27:44.590
provide a little bit of a nicer
interface on top of that

00:27:44.590 --> 00:27:46.460
to help get the details right.

00:27:46.460 --> 00:27:49.330
So in both the Jellybean
framework and in the support

00:27:49.330 --> 00:27:53.490
library, TaskStackBuilder
is that nicer interface.

00:27:53.490 --> 00:27:55.900
So it can determine the full
synthetic task stack that

00:27:55.900 --> 00:27:59.120
you'll need based on the
structural hierarchy from the

00:27:59.120 --> 00:28:02.470
declared parent activities in
your manifest, as well as

00:28:02.470 --> 00:28:05.350
generate some pending intents
for notifications and launcher

00:28:05.350 --> 00:28:07.360
widgets when you need those.

00:28:07.360 --> 00:28:09.590
We've got some code examples in
the SDK that you can take a

00:28:09.590 --> 00:28:12.990
look at for more details.

00:28:12.990 --> 00:28:16.280
So how do we pull all these
little pieces together to

00:28:16.280 --> 00:28:16.990
implement Up?

00:28:16.990 --> 00:28:19.870
Well, the good news is that in
Jellybean, you don't have to.

00:28:19.870 --> 00:28:21.990
It's all completely
done for you.

00:28:21.990 --> 00:28:24.420
Just give us the metadata in
your manifest about the parent

00:28:24.420 --> 00:28:25.330
activities.

00:28:25.330 --> 00:28:28.090
And we'll take care of
everything else.

00:28:28.090 --> 00:28:31.470
So sometimes you need to specify
some other intent

00:28:31.470 --> 00:28:34.610
extras to those activities
along the way.

00:28:34.610 --> 00:28:37.000
For example, if one of your
parent activities is a

00:28:37.000 --> 00:28:40.350
category view and you need to
know what category you're

00:28:40.350 --> 00:28:43.020
viewing, you may express
that as some sort

00:28:43.020 --> 00:28:44.830
of an intent extra.

00:28:44.830 --> 00:28:47.550
So in that case, you can
override an activity method

00:28:47.550 --> 00:28:50.290
and edit the intents in the
TaskStackBuilder that's being

00:28:50.290 --> 00:28:53.210
used under the hoods whenever
it's needed.

00:28:53.210 --> 00:28:57.050
So we'll also be bringing this
to the AppCompat component of

00:28:57.050 --> 00:28:59.370
the support library that we
talked about yesterday in the

00:28:59.370 --> 00:29:01.240
multi-versioning Android
UI session, if

00:29:01.240 --> 00:29:04.500
any of you were there.

00:29:04.500 --> 00:29:07.170
RICHARD FULCHER: So the last
major topic we need to cover

00:29:07.170 --> 00:29:11.920
as far as navigation goes is
widgets and notifications.

00:29:11.920 --> 00:29:14.860
And these are both examples of
a pattern we internally call

00:29:14.860 --> 00:29:16.260
deep links.

00:29:16.260 --> 00:29:20.730
These are things that let you
bypass certain intro screens

00:29:20.730 --> 00:29:24.000
in an app and target an activity
that's deeper within

00:29:24.000 --> 00:29:26.180
its hierarchy.

00:29:26.180 --> 00:29:27.870
Widgets are pretty
straightforward in the sense

00:29:27.870 --> 00:29:31.145
that we know that those are
always going to be new tasks.

00:29:31.145 --> 00:29:33.330
You're always firing
them from Home.

00:29:33.330 --> 00:29:36.270
They're effectively acting
as a Launcher activity.

00:29:36.270 --> 00:29:39.540
They can apply task affinity as
Adam talked about before.

00:29:39.540 --> 00:29:41.590
But they're not that complex.

00:29:41.590 --> 00:29:42.890
Notifications are a little
trickier, so

00:29:42.890 --> 00:29:45.020
we'll cover those last.

00:29:45.020 --> 00:29:48.730
So here's just a quick example
showing widgets.

00:29:51.240 --> 00:29:54.022
So back to the old format, we've
got the task stack and

00:29:54.022 --> 00:29:55.360
the screens building up.

00:29:55.360 --> 00:30:00.720
So from Home, I have a Gmail
widget on my Home screen.

00:30:00.720 --> 00:30:04.580
And I see a conversation
within my inbox,

00:30:04.580 --> 00:30:07.490
and I touch on that.

00:30:07.490 --> 00:30:10.720
That lets you bypass the
Conversation List screen, and

00:30:10.720 --> 00:30:14.888
you navigate directly to
the Conversation View.

00:30:14.888 --> 00:30:18.120
But actually representing
that screen in the

00:30:18.120 --> 00:30:20.600
task stack is valuable.

00:30:20.600 --> 00:30:24.040
Keeping that Conversation List
around matters a lot.

00:30:24.040 --> 00:30:26.030
It doesn't matter so much
right now, like

00:30:26.030 --> 00:30:27.100
right at this instant.

00:30:27.100 --> 00:30:29.890
But where it matters a lot to
the user is when they've been

00:30:29.890 --> 00:30:31.670
inside Gmail for awhile.

00:30:31.670 --> 00:30:32.790
They come in.

00:30:32.790 --> 00:30:34.640
They read that message.

00:30:34.640 --> 00:30:37.900
They read several other
conversations past that.

00:30:37.900 --> 00:30:39.670
And they've been in the app
for a little while,

00:30:39.670 --> 00:30:41.260
and they hit Back.

00:30:41.260 --> 00:30:44.680
They're not aware that instant
that, oh, the doorway I used

00:30:44.680 --> 00:30:45.750
to enter was the widget.

00:30:45.750 --> 00:30:48.160
So of course, it's going
to kick me out to Home.

00:30:48.160 --> 00:30:50.510
It's a surprising change if
we were to just do that.

00:30:50.510 --> 00:30:51.690
So we don't.

00:30:51.690 --> 00:30:54.780
When the widget calls into the
Conversation View, you can add

00:30:54.780 --> 00:30:57.763
the Conversation List activity
to the task stack.

00:30:57.763 --> 00:31:01.510
That way when the user hits Up
or Back, they're being kept

00:31:01.510 --> 00:31:02.870
within the application.

00:31:02.870 --> 00:31:04.480
If they really wanted to go
Home, well, they could have

00:31:04.480 --> 00:31:05.740
hit Home to begin with.

00:31:05.740 --> 00:31:06.990
Or they could just
hit Back again.

00:31:11.270 --> 00:31:13.940
Notifications--

00:31:13.940 --> 00:31:16.370
so a common flow for
notifications

00:31:16.370 --> 00:31:17.940
is I'm in one app.

00:31:17.940 --> 00:31:19.000
So I start Home.

00:31:19.000 --> 00:31:21.465
I launch again into Gmail.

00:31:21.465 --> 00:31:23.470
I'm reading a conversation.

00:31:23.470 --> 00:31:25.760
And in comes a notification.

00:31:25.760 --> 00:31:27.640
I pull down the shade.

00:31:27.640 --> 00:31:28.866
No activity.

00:31:28.866 --> 00:31:30.270
No task stack change there.

00:31:30.270 --> 00:31:33.000
That's just purely local.

00:31:33.000 --> 00:31:36.240
And I've got a new notification
from Talk.

00:31:36.240 --> 00:31:38.740
A new message has come in,
and I want to read that.

00:31:38.740 --> 00:31:41.580
So I tap that notification.

00:31:41.580 --> 00:31:43.670
And now we have the Talk
activity to deal with.

00:31:43.670 --> 00:31:45.640
And we're going to go straight
to the Chat View.

00:31:45.640 --> 00:31:48.200
Again, we're bypassing that
Friends chat or the Friends

00:31:48.200 --> 00:31:51.100
List that we'd seen in
the earlier examples.

00:31:51.100 --> 00:31:54.710
The question here is, what
should the relationship

00:31:54.710 --> 00:31:58.630
between that new activity
and the prior task be?

00:31:58.630 --> 00:31:59.970
Is this going to
be a new task?

00:31:59.970 --> 00:32:02.260
Is this just something
that we put on top of

00:32:02.260 --> 00:32:03.510
the previous task?

00:32:08.662 --> 00:32:12.520
ADAM POWELL: So knowing what you
now know about how all of

00:32:12.520 --> 00:32:16.500
this fits together and what we
found our users' expectations

00:32:16.500 --> 00:32:19.820
were, not just right immediately
but several hours

00:32:19.820 --> 00:32:23.370
later, this really
doesn't work.

00:32:23.370 --> 00:32:26.270
We can't just hop back
to the previous task.

00:32:26.270 --> 00:32:28.880
This is something that became
muscle memory for a lot of

00:32:28.880 --> 00:32:32.010
users over time in previous
versions of Android.

00:32:32.010 --> 00:32:33.620
You answer a notification.

00:32:33.620 --> 00:32:35.770
You do whatever you
need to do there.

00:32:35.770 --> 00:32:36.610
And then you hit Back.

00:32:36.610 --> 00:32:39.020
And then you continue doing
what you're doing.

00:32:39.020 --> 00:32:41.590
So this actually caused
us a lot of problems.

00:32:41.590 --> 00:32:44.780
It was trivially easy to create
this super confusing

00:32:44.780 --> 00:32:46.900
state that users wouldn't
discover

00:32:46.900 --> 00:32:48.110
until much, much later.

00:32:48.110 --> 00:32:51.770
So something really
needed to change.

00:32:51.770 --> 00:32:54.720
So the problem that it created
was that the task stack was no

00:32:54.720 --> 00:32:56.220
longer predictable.

00:32:56.220 --> 00:32:59.270
If you last opened Gmail through
a notification, hours

00:32:59.270 --> 00:33:02.840
or days later your Gmail task
state would be very different

00:33:02.840 --> 00:33:04.750
than if you had opened it
through the front door.

00:33:04.750 --> 00:33:07.940
So as you go switching back and
forth between tasks just

00:33:07.940 --> 00:33:11.020
as you use your device,
then this gets

00:33:11.020 --> 00:33:12.580
really massively confusing.

00:33:12.580 --> 00:33:15.190
And users just started
attributing this to Android

00:33:15.190 --> 00:33:19.640
being dumb or confusing,
one thing or another.

00:33:19.640 --> 00:33:22.880
So the idea of Back staying
within the current task is

00:33:22.880 --> 00:33:24.940
something that we weren't
willing to give up.

00:33:24.940 --> 00:33:27.610
There's a ton of psychology
behind maintaining that

00:33:27.610 --> 00:33:29.950
expectation in each task.

00:33:29.950 --> 00:33:33.230
Context switches are very,
very powerful.

00:33:33.230 --> 00:33:35.490
People remember a lot
about an old context

00:33:35.490 --> 00:33:36.860
when they switch back.

00:33:36.860 --> 00:33:38.580
And then they forget about
the context that

00:33:38.580 --> 00:33:41.210
they switched from.

00:33:41.210 --> 00:33:44.240
So have you ever walk through
a doorway into another room

00:33:44.240 --> 00:33:47.580
and suddenly forgotten
what you were doing?

00:33:47.580 --> 00:33:49.870
You're not alone in this.

00:33:49.870 --> 00:33:52.410
RICHARD FULCHER: Yeah, there
was actually a pretty

00:33:52.410 --> 00:33:55.410
well-known psych study that
covered this exact topic that

00:33:55.410 --> 00:33:56.985
got some play in the popular
press, so you may

00:33:56.985 --> 00:33:58.500
have heard about it.

00:33:58.500 --> 00:34:02.780
And it looked at what happens
when participants were asked

00:34:02.780 --> 00:34:07.050
to engage in memory tests
while they were walking

00:34:07.050 --> 00:34:08.080
through doorways.

00:34:08.080 --> 00:34:11.179
And they did it in both physical
and in virtual

00:34:11.179 --> 00:34:12.770
environments.

00:34:12.770 --> 00:34:15.370
Spoiler alert, people forgot
stuff when they walked through

00:34:15.370 --> 00:34:17.570
the doorway.

00:34:17.570 --> 00:34:20.929
So we didn't want our users to
suffer the same fate when they

00:34:20.929 --> 00:34:23.030
did the task switch.

00:34:23.030 --> 00:34:25.080
I have to just call
out in this quote.

00:34:25.080 --> 00:34:26.449
I love this little
bit that talks

00:34:26.449 --> 00:34:28.510
about episodes of activity.

00:34:28.510 --> 00:34:29.679
I read this quote--

00:34:29.679 --> 00:34:30.670
I swear I didn't doctor it.

00:34:30.670 --> 00:34:35.089
And that just screams task stack
to me when I look at it.

00:34:35.089 --> 00:34:36.810
ADAM POWELL: OK, so
we have all of

00:34:36.810 --> 00:34:38.670
these crazy flags available.

00:34:38.670 --> 00:34:40.360
Can we cheat a little bit?

00:34:40.360 --> 00:34:43.000
Can we really keep that flow of
just hitting Back and going

00:34:43.000 --> 00:34:45.280
right back to where
we wanted to be?

00:34:45.280 --> 00:34:47.690
So here's one possible trick.

00:34:47.690 --> 00:34:49.690
We could start a new task
but don't set the

00:34:49.690 --> 00:34:52.770
Task on Home flag.

00:34:52.770 --> 00:34:54.530
Well, this trick will make
the Back button work

00:34:54.530 --> 00:34:55.600
for this use case.

00:34:55.600 --> 00:34:58.560
But the rest of the existing
task still ends up being there

00:34:58.560 --> 00:34:59.510
to mash back through.

00:34:59.510 --> 00:35:01.240
And that's really
not very great.

00:35:01.240 --> 00:35:04.410
And if we add the Clear Task
flag, then it really leaves us

00:35:04.410 --> 00:35:06.090
with a bogus state.

00:35:06.090 --> 00:35:08.170
Back becomes unpredictable
either way.

00:35:08.170 --> 00:35:10.720
If you clear the task, then
returning to that task later

00:35:10.720 --> 00:35:14.020
from Recents means you Back
right back into Home again.

00:35:14.020 --> 00:35:16.530
If you don't, then you have to
Back through the rest of the

00:35:16.530 --> 00:35:18.820
task before you get back
to the previous task.

00:35:18.820 --> 00:35:20.650
And you still lost
the quick Back.

00:35:20.650 --> 00:35:22.920
So that's not going to work.

00:35:22.920 --> 00:35:26.030
So, OK, what if we really,
really cheat?

00:35:26.030 --> 00:35:29.010
You can try a really
dirty trick here.

00:35:29.010 --> 00:35:31.660
But this will leave this
orphaned activity hanging

00:35:31.660 --> 00:35:34.350
around that you won't actually
be able to get back to in any

00:35:34.350 --> 00:35:36.130
sort of a discoverable way.

00:35:36.130 --> 00:35:39.060
If you answered a notification
and then wrote half of a

00:35:39.060 --> 00:35:42.340
message in Talk, then you're
basically hosed if you leave

00:35:42.340 --> 00:35:43.920
and want to come back.

00:35:43.920 --> 00:35:46.570
And then you get into this
matter of, OK, well, we could

00:35:46.570 --> 00:35:49.890
go ahead and make everyone try
and save drafts for everything

00:35:49.890 --> 00:35:51.230
that you're doing one
thing or another.

00:35:51.230 --> 00:35:54.560
But we really didn't think it
was a good idea to expect

00:35:54.560 --> 00:35:57.890
developers or even want them
to take on this much

00:35:57.890 --> 00:35:59.900
duplication in special casing.

00:35:59.900 --> 00:36:02.300
So notifications are supposed
to be this first-class thing

00:36:02.300 --> 00:36:03.620
in Android.

00:36:03.620 --> 00:36:06.810
But just as a note, this trick
actually is useful in some

00:36:06.810 --> 00:36:08.110
other cases.

00:36:08.110 --> 00:36:11.640
So if you have a deliberately
orphaned summary dialogue or a

00:36:11.640 --> 00:36:14.060
screen that shows more than a
notification can on its own

00:36:14.060 --> 00:36:16.050
but it's really just an
extension of that notification

00:36:16.050 --> 00:36:18.700
before you jump into the
content, then this can be

00:36:18.700 --> 00:36:19.320
really useful.

00:36:19.320 --> 00:36:21.470
Calendar reminders are one place
where we do this in the

00:36:21.470 --> 00:36:22.420
base Android system.

00:36:22.420 --> 00:36:25.150
When you get a pop up that shows
multiple reminders that

00:36:25.150 --> 00:36:28.230
have been collapsed.

00:36:28.230 --> 00:36:31.910
So the solution that we finally
settled on was that we

00:36:31.910 --> 00:36:35.830
treat notifications just like
we treat widgets in Up.

00:36:35.830 --> 00:36:39.190
So that means that navigating
into an app from a

00:36:39.190 --> 00:36:42.270
notification replaces the target
task entirely with that

00:36:42.270 --> 00:36:44.700
same sort of deep link synthetic
task stack that we

00:36:44.700 --> 00:36:47.350
use for Up and for widgets.

00:36:47.350 --> 00:36:50.020
So conceptually that means
notifications have become a

00:36:50.020 --> 00:36:54.350
shortcut for going Home,
clearing out the current task

00:36:54.350 --> 00:36:58.350
state by swiping away in
Recents, opening the app, and

00:36:58.350 --> 00:37:00.290
then just following the shortest
path down the UI to

00:37:00.290 --> 00:37:02.150
get to the content that you
actually cared about.

00:37:02.150 --> 00:37:04.740
But you're doing it
all in one step.

00:37:04.740 --> 00:37:06.530
So TaskStackBuilder gives
you an easy way

00:37:06.530 --> 00:37:08.910
to accomplish this.

00:37:08.910 --> 00:37:12.550
So the implications of this are
that, yeah, we really did

00:37:12.550 --> 00:37:14.250
just lose that case.

00:37:14.250 --> 00:37:16.710
You can't just use Back from
answering a notification to

00:37:16.710 --> 00:37:18.210
switch to the previous
task anymore.

00:37:18.210 --> 00:37:20.450
And that is kind
of unfortunate.

00:37:20.450 --> 00:37:23.580
But the good news is that since
we've elevated Recents

00:37:23.580 --> 00:37:25.550
to this first-class element
that's right there on the

00:37:25.550 --> 00:37:29.140
navigation bar all the time,
then getting back to the last

00:37:29.140 --> 00:37:30.630
thing that you were doing
is very simple.

00:37:30.630 --> 00:37:32.730
So the most recent task
is always sorted

00:37:32.730 --> 00:37:33.770
closest to the button.

00:37:33.770 --> 00:37:37.580
So it's a very quick two taps
to get back to the previous

00:37:37.580 --> 00:37:38.750
thing that you were doing.

00:37:38.750 --> 00:37:41.830
But more importantly, we
realized from all the user

00:37:41.830 --> 00:37:44.800
testing that it was less
important to keep this quick

00:37:44.800 --> 00:37:48.170
Back than it was not to surprise
people with a bogus

00:37:48.170 --> 00:37:51.190
task state much, much
later down the road.

00:37:51.190 --> 00:37:54.620
And to reinforce this idea of
the task switch as we go back

00:37:54.620 --> 00:37:56.915
and forth, we really try and
tell the story with animation

00:37:56.915 --> 00:37:59.835
in Jellybean.

00:37:59.835 --> 00:38:01.590
RICHARD FULCHER: OK,
so wrapping up.

00:38:01.590 --> 00:38:03.290
Three things that I'd
love you to take

00:38:03.290 --> 00:38:05.250
away from this session.

00:38:05.250 --> 00:38:09.080
The first is, think about the
structure of your app early on

00:38:09.080 --> 00:38:12.290
in your planning process.

00:38:12.290 --> 00:38:14.440
The first talk this morning
did a really good job of

00:38:14.440 --> 00:38:17.150
illustrating how you think about
what you want your app

00:38:17.150 --> 00:38:18.310
to achieve.

00:38:18.310 --> 00:38:22.080
What is the app in
and of itself?

00:38:22.080 --> 00:38:24.030
Don't be the bag
of activities.

00:38:24.030 --> 00:38:26.260
You don't have to be like
this exact hierarchy.

00:38:26.260 --> 00:38:27.560
There are a lot of different
hierarchies

00:38:27.560 --> 00:38:28.280
that are out there.

00:38:28.280 --> 00:38:31.130
And there are a lot of apps
you can look at as

00:38:31.130 --> 00:38:32.540
exemplars of that.

00:38:32.540 --> 00:38:35.750
You can be broad or narrow.

00:38:35.750 --> 00:38:37.610
You could be shallow or deep.

00:38:37.610 --> 00:38:40.070
You could be balanced or
imbalanced in your hierarchy.

00:38:40.070 --> 00:38:43.140
Let the activities and their
relationships drive the

00:38:43.140 --> 00:38:46.584
structure that you
try to implement.

00:38:46.584 --> 00:38:50.230
ADAM POWELL: So another thing
that we'd like you to do is

00:38:50.230 --> 00:38:53.330
don't just test your app
navigation in isolation.

00:38:53.330 --> 00:38:55.980
It's very, very easy when you're
in an intense debugging

00:38:55.980 --> 00:38:59.050
session to just make some quick
changes, push the new

00:38:59.050 --> 00:39:02.480
APK to your device, test it out
really quick just within

00:39:02.480 --> 00:39:04.900
your app that just launched
from your debugger,

00:39:04.900 --> 00:39:06.570
and say, OK, great.

00:39:06.570 --> 00:39:07.130
It works.

00:39:07.130 --> 00:39:08.835
We're done.

00:39:08.835 --> 00:39:12.000
The thing is is that as soon
as you have any sort of

00:39:12.000 --> 00:39:15.940
sophisticated navigation in your
application, this doesn't

00:39:15.940 --> 00:39:18.390
actually exercise all of the
different cases that users are

00:39:18.390 --> 00:39:19.860
going to run into.

00:39:19.860 --> 00:39:21.980
Make sure that you test all
of the navigation in

00:39:21.980 --> 00:39:22.720
and out of your app.

00:39:22.720 --> 00:39:25.150
That's the notifications,
widgets, and any sort of

00:39:25.150 --> 00:39:26.870
intent fulfillment that
happens from other

00:39:26.870 --> 00:39:27.600
applications.

00:39:27.600 --> 00:39:29.590
If your application can
act as a viewer for

00:39:29.590 --> 00:39:31.110
certain types of content.

00:39:31.110 --> 00:39:34.120
If other applications can
share to your app.

00:39:34.120 --> 00:39:36.360
Make sure that you test all
of those things too.

00:39:36.360 --> 00:39:39.550
And most importantly, go ahead
and dogfood your own

00:39:39.550 --> 00:39:40.660
application, too.

00:39:40.660 --> 00:39:42.060
Test it over a number of days.

00:39:42.060 --> 00:39:43.460
See how it interacts with other

00:39:43.460 --> 00:39:45.020
applications on the system.

00:39:45.020 --> 00:39:47.700
And make sure that it's behaving
consistently with the

00:39:47.700 --> 00:39:49.340
other applications that
people are going to be

00:39:49.340 --> 00:39:50.590
using day to day.

00:39:52.972 --> 00:39:54.790
RICHARD FULCHER: And
then finally, why

00:39:54.790 --> 00:39:55.450
are we doing this?

00:39:55.450 --> 00:39:57.540
Why do I care about
this so much?

00:39:57.540 --> 00:39:59.070
Users always win.

00:39:59.070 --> 00:40:01.985
Your users are always win when
apps behave consistently.

00:40:01.985 --> 00:40:05.130
You've heard the consistency
point a number of times today.

00:40:05.130 --> 00:40:07.320
It's important.

00:40:07.320 --> 00:40:10.190
There's no need for a user to
learn how to navigate your

00:40:10.190 --> 00:40:12.690
application if you're doing
the standard, doing the

00:40:12.690 --> 00:40:13.850
consistent thing.

00:40:13.850 --> 00:40:15.940
They can take the knowledge
they've learned in one app and

00:40:15.940 --> 00:40:18.570
apply it to yours directly.

00:40:18.570 --> 00:40:22.110
You also don't have to spend
time introducing a tutorial,

00:40:22.110 --> 00:40:25.240
teaching the users how to
use your navigation.

00:40:25.240 --> 00:40:27.900
It gives the users a
sense of mastery.

00:40:27.900 --> 00:40:30.620
That ability to take the
knowledge learned in one place

00:40:30.620 --> 00:40:32.580
and apply it into a different
context is what

00:40:32.580 --> 00:40:33.940
contributes to that.

00:40:33.940 --> 00:40:37.040
And your app is the beneficiary
of that.

00:40:37.040 --> 00:40:40.170
The user gets all these positive
associations with it.

00:40:40.170 --> 00:40:42.540
Adam often talks about
this being--

00:40:42.540 --> 00:40:45.330
kind of one way that users
express this is they say, oh

00:40:45.330 --> 00:40:47.160
that app's intuitive.

00:40:47.160 --> 00:40:49.640
It's just doing the things
they would expect to do

00:40:49.640 --> 00:40:52.440
without having had to learn
what the app is

00:40:52.440 --> 00:40:54.630
asking them to do.

00:40:54.630 --> 00:40:57.130
And it lets the users
concentrate on the key things

00:40:57.130 --> 00:40:58.960
your app is trying to deliver.

00:40:58.960 --> 00:41:02.510
And then finally, it makes the
whole experience feel better

00:41:02.510 --> 00:41:03.420
to the users.

00:41:03.420 --> 00:41:06.720
Your app, all the apps,
all the devices.

00:41:06.720 --> 00:41:09.160
We're working really hard to
try to bring consistency to

00:41:09.160 --> 00:41:10.920
all of the Google
applications.

00:41:10.920 --> 00:41:13.450
And hopefully, you'll notice
in Jellybean, we've made a

00:41:13.450 --> 00:41:15.940
tremendous number of
improvements when it comes to

00:41:15.940 --> 00:41:17.600
using navigation consistently.

00:41:17.600 --> 00:41:19.720
I'm sure there's a couple
that we've missed.

00:41:19.720 --> 00:41:21.250
We're working on it.

00:41:21.250 --> 00:41:24.230
ADAM POWELL: We couldn't
have missed any, Rich.

00:41:24.230 --> 00:41:25.250
I don't think that's possible.

00:41:25.250 --> 00:41:27.420
RICHARD FULCHER: Yeah.

00:41:27.420 --> 00:41:29.205
That's why they pay us
the medium buck.

00:41:32.950 --> 00:41:34.450
We've covered a lot today.

00:41:34.450 --> 00:41:38.130
If you want to go back and
review any of this material--

00:41:38.130 --> 00:41:39.780
I've tried to concentrate
on the why's.

00:41:39.780 --> 00:41:41.560
You know, why did
we come to these

00:41:41.560 --> 00:41:43.100
decisions that we've made?

00:41:43.100 --> 00:41:44.780
But if you just need the
guidelines, they're in the

00:41:44.780 --> 00:41:45.650
design guide.

00:41:45.650 --> 00:41:47.500
If you go to the navigation
pattern there,

00:41:47.500 --> 00:41:48.320
you can review it.

00:41:48.320 --> 00:41:51.650
It's got a lot of this content
or other related examples that

00:41:51.650 --> 00:41:53.220
you can go through again.

00:41:53.220 --> 00:41:55.780
And with that, thank
you very much.

00:41:55.780 --> 00:42:05.020
[APPLAUSE]

00:42:05.020 --> 00:42:06.270
RICHARD FULCHER: And we have
time for questions.

00:42:10.690 --> 00:42:12.220
AUDIENCE: Hi.

00:42:12.220 --> 00:42:19.640
Do you have some advice for
tools to draw diagrams or some

00:42:19.640 --> 00:42:25.065
tools like UML to create the
navigation diagrams?

00:42:25.065 --> 00:42:27.190
RICHARD FULCHER: Yeah, that's
a good question.

00:42:27.190 --> 00:42:30.940
So we use a lot of different
tools within the team.

00:42:30.940 --> 00:42:33.300
I happen to use Illustrator just
because I do navigation

00:42:33.300 --> 00:42:35.420
and wire framing at
the same time.

00:42:35.420 --> 00:42:39.000
We have a number of designers
who use OmniGraffle to do

00:42:39.000 --> 00:42:39.880
quick connections.

00:42:39.880 --> 00:42:41.500
I've worked at places
where we've used

00:42:41.500 --> 00:42:43.145
PowerPoint or Visio.

00:42:43.145 --> 00:42:45.630
I'm dating myself.

00:42:45.630 --> 00:42:48.980
Pen and paper is usually good
enough, too, oftentimes if the

00:42:48.980 --> 00:42:50.570
app just isn't that large.

00:42:50.570 --> 00:42:53.112
I don't know if you have
anything to add.

00:42:53.112 --> 00:42:53.580
No.

00:42:53.580 --> 00:42:56.260
ADAM POWELL: No, I think that,
that pretty well covers.

00:42:56.260 --> 00:42:57.120
RICHARD FULCHER: Great.

00:42:57.120 --> 00:42:57.791
AUDIENCE: Thank you.

00:42:57.791 --> 00:42:59.755
RICHARD FULCHER: Thanks.

00:42:59.755 --> 00:43:00.740
AUDIENCE: Hi.

00:43:00.740 --> 00:43:03.780
I have a question related to
how the Back navigation is

00:43:03.780 --> 00:43:06.030
supposed to be working
when you're having a

00:43:06.030 --> 00:43:07.140
list view on a tablet.

00:43:07.140 --> 00:43:09.720
So on a tablet, for example,
you have a list view.

00:43:09.720 --> 00:43:11.590
And then you're showing it
beside it in a separate

00:43:11.590 --> 00:43:14.650
fragment the icon, like
the item of the list.

00:43:14.650 --> 00:43:17.710
And then on the list, you select
the next one and then

00:43:17.710 --> 00:43:20.290
the next one and the
display shows.

00:43:20.290 --> 00:43:21.240
What's the expected behavior?

00:43:21.240 --> 00:43:24.280
Is there an expected behavior
of the Back button to go and

00:43:24.280 --> 00:43:25.720
go back and show me
those other list

00:43:25.720 --> 00:43:27.190
items that showed before?

00:43:27.190 --> 00:43:29.320
RICHARD FULCHER: No.

00:43:29.320 --> 00:43:32.220
The expectation is more that
Back will operate at the level

00:43:32.220 --> 00:43:33.720
of the entire screen.

00:43:33.720 --> 00:43:34.760
So any internal--

00:43:34.760 --> 00:43:36.110
AUDIENCE: So then the Back
button basically behaves the

00:43:36.110 --> 00:43:38.215
same as the app button.

00:43:38.215 --> 00:43:39.750
RICHARD FULCHER: Again,
but it depends on how

00:43:39.750 --> 00:43:40.690
you entered it, yes.

00:43:40.690 --> 00:43:44.156
AUDIENCE: Yeah, but, if I enter
into the list here and

00:43:44.156 --> 00:43:47.350
then go through the list, the
Back button doesn't actually

00:43:47.350 --> 00:43:51.120
do the expected back operation
in terms of I went back to

00:43:51.120 --> 00:43:52.050
that list item I saw before.

00:43:52.050 --> 00:43:53.378
And that's expected?

00:43:53.378 --> 00:43:55.010
RICHARD FULCHER: That's
expected.

00:43:55.010 --> 00:43:57.060
Another example of this
would be tabs.

00:43:57.060 --> 00:43:59.680
Back doesn't operate
across tab views.

00:43:59.680 --> 00:44:03.210
So if I come in and I'm browsing
even on the I/O app--

00:44:03.210 --> 00:44:05.020
I'm browsing through
the top level--

00:44:05.020 --> 00:44:07.010
Back isn't going to take
me to the prior tab.

00:44:07.010 --> 00:44:10.605
It's just going to treat
that all as state--

00:44:10.605 --> 00:44:11.710
ADAM POWELL: Yeah,
that's right.

00:44:11.710 --> 00:44:13.490
There's a few of these
constructs that we have.

00:44:13.490 --> 00:44:16.470
And just like you mentioned,
tabs are one of them, where we

00:44:16.470 --> 00:44:19.140
really distinguish between what
types of actions do or

00:44:19.140 --> 00:44:21.390
don't create navigation
history.

00:44:21.390 --> 00:44:25.170
And tabs are definitely one that
we decided do not create

00:44:25.170 --> 00:44:26.080
navigation history.

00:44:26.080 --> 00:44:28.880
And choosing different list
items to focus on in a

00:44:28.880 --> 00:44:32.230
two-pane UI is another one of
those very analogous sort of

00:44:32.230 --> 00:44:34.510
actions that doesn't itself
create navigation history.

00:44:34.510 --> 00:44:35.940
AUDIENCE: Can you update that
in the design guide?

00:44:35.940 --> 00:44:37.590
Because it's not explicit
from there.

00:44:37.590 --> 00:44:40.810
And I was thinking that it
actually should be doing the

00:44:40.810 --> 00:44:42.320
actual Back thing.

00:44:42.320 --> 00:44:44.650
And therefore implemented
that in my app and

00:44:44.650 --> 00:44:45.910
that's how it works.

00:44:45.910 --> 00:44:49.510
I find that, for example, the
Gmail app and all these apps,

00:44:49.510 --> 00:44:50.310
they don't do that.

00:44:50.310 --> 00:44:52.750
So I'm kind of contemplating
to ripping it out again.

00:44:52.750 --> 00:44:57.290
So you're saying that that
is the expected behavior?

00:44:57.290 --> 00:44:58.270
Maybe update the design guide.

00:44:58.270 --> 00:44:58.760
That would be great.

00:44:58.760 --> 00:45:00.250
RICHARD FULCHER: Yep, I
think we can add that.

00:45:00.250 --> 00:45:01.950
We're actually trying to add
more and more depth to our

00:45:01.950 --> 00:45:03.710
tablet support in the
design guide.

00:45:03.710 --> 00:45:04.640
So that's a good call-out.

00:45:04.640 --> 00:45:05.690
Thank you.

00:45:05.690 --> 00:45:07.660
ADAM POWELL: Yeah, so I guess
we should add that same note

00:45:07.660 --> 00:45:10.610
that we have about tabs
to the left pane list.

00:45:10.610 --> 00:45:14.660
AUDIENCE: So with the move from
Gingerbread to Honeycomb

00:45:14.660 --> 00:45:18.820
and ICS, you guys did away with
the option menu, which

00:45:18.820 --> 00:45:22.140
had a visual interface and a
nice grid layout, to the

00:45:22.140 --> 00:45:24.540
overflow menu, which is a
big giant list of text.

00:45:24.540 --> 00:45:25.740
RICHARD FULCHER: That's right.

00:45:25.740 --> 00:45:27.240
AUDIENCE: Now, some of us
prefer to have a visual

00:45:27.240 --> 00:45:29.176
interface for people
rather than just a

00:45:29.176 --> 00:45:30.350
bunch of text to read.

00:45:30.350 --> 00:45:33.710
And so before I and others start
getting into coming up

00:45:33.710 --> 00:45:36.615
with our own ideas of how that
menu should work, I'm curious

00:45:36.615 --> 00:45:40.080
if you guys have had any
discussion and ideas on how to

00:45:40.080 --> 00:45:42.560
integrate visual pieces into
the overflow menu.

00:45:42.560 --> 00:45:45.650
RICHARD FULCHER: Yeah, I guess
my initial response to that

00:45:45.650 --> 00:45:51.150
would be that the old menu would
give you visibility for

00:45:51.150 --> 00:45:54.670
five options and then like a
More button, which would then

00:45:54.670 --> 00:45:57.480
fall through to a text-only
display at that point.

00:45:57.480 --> 00:46:00.500
So when we designed the Action
Bar, and particularly in ICS

00:46:00.500 --> 00:46:02.310
when we brought it to phone,
we gave you the

00:46:02.310 --> 00:46:03.350
split Action Bar.

00:46:03.350 --> 00:46:06.960
So you could still have five
visible targets within your

00:46:06.960 --> 00:46:08.570
application, if you wanted to.

00:46:08.570 --> 00:46:11.980
And then kick over to
the text overflow.

00:46:11.980 --> 00:46:15.470
So we tried to, in the Action
Bar, give you a similar amount

00:46:15.470 --> 00:46:18.310
of graphical targets that
you can give it.

00:46:18.310 --> 00:46:21.090
We don't have any plans right
now to introduce graphics into

00:46:21.090 --> 00:46:22.595
the action overflow
itself, though.

00:46:22.595 --> 00:46:24.930
ADAM POWELL: Yeah, the idea
was really to reduce the

00:46:24.930 --> 00:46:27.870
navigation depth that the user
had to traverse by one.

00:46:27.870 --> 00:46:30.570
So everything that would have
appeared in that menu panel,

00:46:30.570 --> 00:46:32.890
we're now trying to bring on
screen just by default.

00:46:32.890 --> 00:46:35.250
So that anything that really
needs visual navigation should

00:46:35.250 --> 00:46:38.730
be there present, that is a
little bit more discoverable

00:46:38.730 --> 00:46:40.720
than something that's hidden
behind the Menu button.

00:46:40.720 --> 00:46:44.100
So in that case we're
positioning the overflow menu

00:46:44.100 --> 00:46:46.300
as something that really is
for some of those hidden

00:46:46.300 --> 00:46:50.370
options that are not frequent,
important, or typical.

00:46:50.370 --> 00:46:52.242
RICHARD FULCHER: Thank you.

00:46:52.242 --> 00:46:56.380
AUDIENCE: So this is regarding
the Back button.

00:46:56.380 --> 00:47:01.550
If I had to navigate a page to
an activity from a dialogue.

00:47:01.550 --> 00:47:02.960
And I hit the Back button.

00:47:02.960 --> 00:47:07.440
I go through the stack
of dialogues that

00:47:07.440 --> 00:47:09.810
I didn't want to.

00:47:09.810 --> 00:47:12.280
As a user, I would expect Back
to go to the previous

00:47:12.280 --> 00:47:16.410
activity, without hitting all
the dialogues that I had to go

00:47:16.410 --> 00:47:18.390
to the next activity.

00:47:18.390 --> 00:47:21.775
So is this behavior
remaining, or--

00:47:21.775 --> 00:47:22.110
ADAM POWELL: So which?

00:47:22.110 --> 00:47:22.880
I'm sorry.

00:47:22.880 --> 00:47:23.860
I guess I don't quite
understand.

00:47:23.860 --> 00:47:26.150
So you had a case where you had
multiple nested dialogues

00:47:26.150 --> 00:47:26.835
that were created?

00:47:26.835 --> 00:47:28.860
AUDIENCE: Yeah, I had
two dialogues.

00:47:28.860 --> 00:47:34.270
Which was important to make some
decisions before we go to

00:47:34.270 --> 00:47:36.070
the next activity.

00:47:36.070 --> 00:47:37.640
ADAM POWELL: Oh, I see.

00:47:37.640 --> 00:47:41.230
AUDIENCE: When I hit the Back
button I would actually expect

00:47:41.230 --> 00:47:44.960
to go to the previous activity
rather than [? fall on ?] all

00:47:44.960 --> 00:47:45.630
the dialogues.

00:47:45.630 --> 00:47:46.450
ADAM POWELL: Right.

00:47:46.450 --> 00:47:50.220
So what the system alert
dialogues do by default is

00:47:50.220 --> 00:47:52.760
whenever you choose one of those
options in the bottom

00:47:52.760 --> 00:47:55.820
bar from the dialogue, we
actually dismiss the dialogue

00:47:55.820 --> 00:47:57.730
as part of navigating
to the next thing.

00:47:57.730 --> 00:48:00.250
So that way, there's no extra
states still left over.

00:48:00.250 --> 00:48:02.660
If you're ending up with a lot
of stacked dialogues one on

00:48:02.660 --> 00:48:04.850
top of another, then that's
probably a situation that you

00:48:04.850 --> 00:48:07.810
want to avoid getting into
upfront, rather than worrying

00:48:07.810 --> 00:48:09.490
about how to clean it
up after the fact.

00:48:09.490 --> 00:48:12.530
So when you've already made a
decision from a dialogue, that

00:48:12.530 --> 00:48:14.060
should be about it
for the dialogue.

00:48:14.060 --> 00:48:16.900
So go ahead and dismiss it and
let the next thing take over.

00:48:16.900 --> 00:48:19.500
RICHARD FULCHER: And the
behavior you're describing

00:48:19.500 --> 00:48:22.310
would be kind of strange
and jarring, I agree.

00:48:22.310 --> 00:48:24.940
We would want to not take you
back to the dialogue and take

00:48:24.940 --> 00:48:26.610
you back to the root activity
underneath it.

00:48:26.610 --> 00:48:27.200
ADAM POWELL: Yeah, absolutely.

00:48:27.200 --> 00:48:27.820
RICHARD FULCHER: Yes.

00:48:27.820 --> 00:48:28.710
AUDIENCE: Thank you.

00:48:28.710 --> 00:48:30.335
RICHARD FULCHER: Sure.

00:48:30.335 --> 00:48:33.780
AUDIENCE: Hi, I'm constantly
having to explain to my

00:48:33.780 --> 00:48:38.810
parents that there aren't
actually two Back buttons on

00:48:38.810 --> 00:48:39.200
the screen.

00:48:39.200 --> 00:48:40.083
RICHARD FULCHER: That's
not true.

00:48:40.083 --> 00:48:40.476
There's two.

00:48:40.476 --> 00:48:41.820
There's a Back and an Up.

00:48:41.820 --> 00:48:45.105
AUDIENCE: Are there any plans to
make the Up button face up?

00:48:45.105 --> 00:48:47.590
ADAM POWELL: So that's
kind of interesting.

00:48:47.590 --> 00:48:48.890
We actually started--

00:48:48.890 --> 00:48:49.230
oh.

00:48:49.230 --> 00:48:50.132
Lots of people like this.

00:48:50.132 --> 00:48:51.940
[APPLAUSE]

00:48:51.940 --> 00:48:53.770
ADAM POWELL: So believe it or
not, this is actually what it

00:48:53.770 --> 00:48:56.030
looks like in the first
release of Honeycomb.

00:48:56.030 --> 00:48:58.510
We actually had a little
glyph that pointed

00:48:58.510 --> 00:49:00.320
up and to the left.

00:49:00.320 --> 00:49:02.700
And as it turned out, because
of just the way that the

00:49:02.700 --> 00:49:04.820
spacing all works out,
nobody saw it.

00:49:04.820 --> 00:49:07.260
It was effectively invisible.

00:49:07.260 --> 00:49:08.980
It almost looked like a
little shaded corner.

00:49:08.980 --> 00:49:10.330
We played around with
a lot of different

00:49:10.330 --> 00:49:12.030
glyphs to try it out.

00:49:12.030 --> 00:49:15.190
And in our user testing, we just
found that something a

00:49:15.190 --> 00:49:20.340
lot more in your face that we
ended up using as that sort of

00:49:20.340 --> 00:49:23.490
left-facing chevron was way
more effective in terms of

00:49:23.490 --> 00:49:25.850
just how it read to the majority
of the people that we

00:49:25.850 --> 00:49:26.750
user-tested with.

00:49:26.750 --> 00:49:27.620
RICHARD FULCHER: Yeah,
the other thing

00:49:27.620 --> 00:49:29.320
I'll add is like Up--

00:49:29.320 --> 00:49:30.880
we think about Up
all the time.

00:49:30.880 --> 00:49:34.910
Hierarchy isn't an odd concept
for most of our consumers.

00:49:34.910 --> 00:49:36.310
They don't view apps that way.

00:49:36.310 --> 00:49:38.775
And even though we're kind of
expressing it as the Up

00:49:38.775 --> 00:49:40.330
button-- that's what
we call it--

00:49:40.330 --> 00:49:42.300
they think of it as Back
in some sense.

00:49:42.300 --> 00:49:44.210
Back in the app versus
this other Back.

00:49:44.210 --> 00:49:45.425
AUDIENCE: Thanks, guys.

00:49:45.425 --> 00:49:47.816
RICHARD FULCHER: Sure,
thank you.

00:49:47.816 --> 00:49:53.270
AUDIENCE: So the Up button in
the new Google+ app opens up

00:49:53.270 --> 00:49:55.380
that little slide app
menu on the side.

00:49:55.380 --> 00:49:58.210
RICHARD FULCHER: Ah, we
knew this was coming.

00:49:58.210 --> 00:49:59.720
Have you used YouTube?

00:49:59.720 --> 00:50:01.290
AUDIENCE: I haven't checked
at YouTube.

00:50:01.290 --> 00:50:02.435
RICHARD FULCHER: Same thing.

00:50:02.435 --> 00:50:03.260
AUDIENCE: All right.

00:50:03.260 --> 00:50:05.730
So is that going to
be a standard or--

00:50:05.730 --> 00:50:08.890
ADAM POWELL: Yeah, so this is
basically the next problem

00:50:08.890 --> 00:50:12.930
that Rich and I are going to
tackle after everything from

00:50:12.930 --> 00:50:15.180
I/O settles down here.

00:50:15.180 --> 00:50:17.660
This idea of the [? nab ?]
drawer is something that has

00:50:17.660 --> 00:50:19.250
become really popular
in the community.

00:50:19.250 --> 00:50:21.990
And we want to make sure that
we have some really strong

00:50:21.990 --> 00:50:23.820
guidelines and support
around it.

00:50:23.820 --> 00:50:27.630
And I think that out of some of
the different ones that are

00:50:27.630 --> 00:50:32.430
around, I think that YouTube
probably meets most of the

00:50:32.430 --> 00:50:34.530
direction that we're moving
toward for that.

00:50:34.530 --> 00:50:36.830
And part of that is just because
of the way that it

00:50:36.830 --> 00:50:39.460
implements the direct
manipulation is you can

00:50:39.460 --> 00:50:42.360
actually grab hold of the
content and slide it over,

00:50:42.360 --> 00:50:45.150
rather than only relying
on the Up button.

00:50:45.150 --> 00:50:48.100
But in the case of something
like Google+, the Up button

00:50:48.100 --> 00:50:50.020
actually is semantically
correct as well.

00:50:50.020 --> 00:50:52.530
Because it's something where
you're saying, I want to

00:50:52.530 --> 00:50:55.750
perform some navigation one
level up in the hierarchy from

00:50:55.750 --> 00:50:57.350
where I currently am.

00:50:57.350 --> 00:51:00.180
RICHARD FULCHER: As far as if
you're thinking about doing

00:51:00.180 --> 00:51:03.350
for your apps, the things I
would keep in mind-- because I

00:51:03.350 --> 00:51:04.490
think this will track
the guidance

00:51:04.490 --> 00:51:07.550
we'll give most closely--

00:51:07.550 --> 00:51:11.410
think of it as almost an
alternate visualization of the

00:51:11.410 --> 00:51:14.830
drop-down that you can get as
a view changer as well.

00:51:14.830 --> 00:51:19.020
It's part of the local state
of that topmost activity.

00:51:19.020 --> 00:51:22.830
It means that where we would
never have an Up button before

00:51:22.830 --> 00:51:25.570
on that top-most screen, we gave
you an affordance that

00:51:25.570 --> 00:51:27.840
still looks like Up that
pulls this drawer out.

00:51:27.840 --> 00:51:30.380
And that's in addition to any
kind of gestural affordance.

00:51:30.380 --> 00:51:33.140
You know, an edge swipe that
you'd like to introduce that

00:51:33.140 --> 00:51:34.460
panel with.

00:51:34.460 --> 00:51:39.312
AUDIENCE: Sorry, are there are
plans to make this native?

00:51:39.312 --> 00:51:41.390
ADAM POWELL: I think that
we've talked about doing

00:51:41.390 --> 00:51:43.590
something in the support
library for it.

00:51:43.590 --> 00:51:46.190
Of course, the problem with
adding some core navigation

00:51:46.190 --> 00:51:49.620
pattern like this natively is
that how many people are going

00:51:49.620 --> 00:51:52.520
to use it for the next
to 6 to 18 months.

00:51:52.520 --> 00:51:54.290
So I think that we're probably
targeting something closer to

00:51:54.290 --> 00:51:55.380
the support library for it.

00:51:55.380 --> 00:51:56.050
RICHARD FULCHER: So
we don't have

00:51:56.050 --> 00:51:57.140
anything to announce today.

00:51:57.140 --> 00:51:58.680
But it's definitely something
we're looking at.

00:51:58.680 --> 00:52:01.010
And just one last point I'll
throw in on that--

00:52:01.010 --> 00:52:03.930
if that drawer is open, then
the behavior of Back should

00:52:03.930 --> 00:52:06.810
just clearly be to cancel that
drawer and not take the

00:52:06.810 --> 00:52:07.450
navigation.

00:52:07.450 --> 00:52:10.130
So it's a state [? within ?]
the activity.

00:52:10.130 --> 00:52:11.528
AUDIENCE: [INAUDIBLE]

00:52:11.528 --> 00:52:13.280
go Back to [INAUDIBLE].

00:52:13.280 --> 00:52:14.210
Why is it not [? back at the ?]

00:52:14.210 --> 00:52:16.940
Menu icon or something?

00:52:16.940 --> 00:52:18.810
RICHARD FULCHER: It could be
decorated differently at some

00:52:18.810 --> 00:52:20.830
point, but for now, the
affordance we have

00:52:20.830 --> 00:52:21.470
available is Up.

00:52:21.470 --> 00:52:22.060
So that's what we're using.

00:52:22.060 --> 00:52:25.710
AUDIENCE: [INAUDIBLE] don't
go Up just [INAUDIBLE].

00:52:25.710 --> 00:52:29.560
RICHARD FULCHER: I think you
don't physically move up in

00:52:29.560 --> 00:52:33.040
terms of the options you're
presenting to the user.

00:52:33.040 --> 00:52:34.730
They are upward.

00:52:34.730 --> 00:52:35.905
This is a magic hierarchy.

00:52:35.905 --> 00:52:36.640
ADAM POWELL: Right, right.

00:52:36.640 --> 00:52:39.670
And in terms of the idea of
Back closing the drawer, I

00:52:39.670 --> 00:52:42.180
would think of that as any of
the other sort of modal states

00:52:42.180 --> 00:52:43.030
that you can get into.

00:52:43.030 --> 00:52:44.230
It's the same as the IME.

00:52:44.230 --> 00:52:46.290
It's the same as any of the
action modes that you can pull

00:52:46.290 --> 00:52:48.310
down for editing and
so on and so forth.

00:52:48.310 --> 00:52:49.340
AUDIENCE: Thank you.

00:52:49.340 --> 00:52:50.450
RICHARD FULCHER: Thanks.

00:52:50.450 --> 00:52:51.240
AUDIENCE: Hi.

00:52:51.240 --> 00:52:53.730
A couple times in your
presentation, you talked about

00:52:53.730 --> 00:52:55.470
tasks being in a bogus state--

00:52:55.470 --> 00:52:57.125
one being you're in Gmail.

00:52:57.125 --> 00:53:00.110
You get a notification
for a text message.

00:53:00.110 --> 00:53:01.310
The text message shows up.

00:53:01.310 --> 00:53:04.990
And apparently, a text message
without a corresponding

00:53:04.990 --> 00:53:08.770
Conversation View underneath it
is somehow a bogus state.

00:53:08.770 --> 00:53:11.410
Could you elaborate what's
bogus about that?

00:53:11.410 --> 00:53:11.810
ADAM POWELL: Yeah.

00:53:11.810 --> 00:53:16.430
So the idea there is that if you
have the detail view of a

00:53:16.430 --> 00:53:19.830
particular text message, then
if you don't have the

00:53:19.830 --> 00:53:23.260
Conversation List above it, then
the problem isn't right

00:53:23.260 --> 00:53:24.260
there when you're
working with it.

00:53:24.260 --> 00:53:27.200
The problem is, OK, you get
another notification.

00:53:27.200 --> 00:53:28.110
You answer it.

00:53:28.110 --> 00:53:28.970
You press Home.

00:53:28.970 --> 00:53:29.470
You leave.

00:53:29.470 --> 00:53:30.410
One thing or another.

00:53:30.410 --> 00:53:34.300
And then you actually come back
into the SMS app or the

00:53:34.300 --> 00:53:37.550
Talk app sometime later
through Recents.

00:53:37.550 --> 00:53:41.130
And at that point, you've
crossed through the doorway.

00:53:41.130 --> 00:53:44.720
And that's where you want the
Back button's behavior to be

00:53:44.720 --> 00:53:47.100
somewhat consistent with
your expectations.

00:53:47.100 --> 00:53:49.315
And if you start that activity
without having a Conversation

00:53:49.315 --> 00:53:53.060
List below it, then what that
means is that the Back button

00:53:53.060 --> 00:53:54.810
is going to finish
that activity.

00:53:54.810 --> 00:53:56.850
And then you're going to
land back at Home.

00:53:56.850 --> 00:53:59.810
And then that ends up being
inconsistent with expectations

00:53:59.810 --> 00:54:02.240
that the user would have,
depending on if they got into

00:54:02.240 --> 00:54:05.640
it from a different way, again
hours or even days earlier.

00:54:05.640 --> 00:54:08.090
AUDIENCE: So switching back
to it from Recents

00:54:08.090 --> 00:54:09.675
after you left it.

00:54:09.675 --> 00:54:10.560
ADAM POWELL: Yeah.

00:54:10.560 --> 00:54:12.240
RICHARD FULCHER: Or from
another notification.

00:54:12.240 --> 00:54:15.600
Like any mechanism at that
point, it's going to have I

00:54:15.600 --> 00:54:19.230
guess what I'd describe as an
incomplete state above it.

00:54:19.230 --> 00:54:20.500
It's not invalid.

00:54:20.500 --> 00:54:22.685
It just means that once I try to
exit it, I'm going to wind

00:54:22.685 --> 00:54:23.550
up somewhere unexpected.

00:54:23.550 --> 00:54:24.960
ADAM POWELL: This is one of
the things that we found

00:54:24.960 --> 00:54:27.610
really contributed to a lot of
users feeling like Back was

00:54:27.610 --> 00:54:29.670
unpredictable in Android
as a whole.

00:54:29.670 --> 00:54:33.240
It wasn't a matter of what
it did right away.

00:54:33.240 --> 00:54:37.530
It was a matter of state that
got created a really long time

00:54:37.530 --> 00:54:40.520
ago that wasn't really
intentional.

00:54:40.520 --> 00:54:43.920
But as soon as you come back
to it, then suddenly

00:54:43.920 --> 00:54:45.180
everything's kind
of goofed up.

00:54:45.180 --> 00:54:47.550
And it's right after you did
another task switch.

00:54:47.550 --> 00:54:48.950
You're trying to do something
where your

00:54:48.950 --> 00:54:50.440
expectations were one way.

00:54:50.440 --> 00:54:51.530
Suddenly, you get flustered.

00:54:51.530 --> 00:54:53.120
And it's like, oh, this
stupid phone.

00:54:53.120 --> 00:54:54.310
I hate it.

00:54:54.310 --> 00:54:56.930
AUDIENCE: Don't they feel
frustrated after responding to

00:54:56.930 --> 00:54:59.990
a notification, hitting Back,
and it doesn't go back to

00:54:59.990 --> 00:55:00.780
where they were?

00:55:00.780 --> 00:55:02.250
RICHARD FULCHER: If they're
really familiar with that old

00:55:02.250 --> 00:55:04.560
behavior, yes, there's some kind
of muscle learning they

00:55:04.560 --> 00:55:06.390
have to do to shift that
behavior to Recents.

00:55:06.390 --> 00:55:08.270
But we still think we're
supporting it.

00:55:08.270 --> 00:55:11.640
ADAM POWELL: We've found that
in practice in our own

00:55:11.640 --> 00:55:14.750
dogfooding with Googlers, who,
by the way, are probably the

00:55:14.750 --> 00:55:18.640
most critical audience
for issues like this.

00:55:18.640 --> 00:55:21.200
We had a lot of initial
frustration in

00:55:21.200 --> 00:55:22.540
the first few days.

00:55:22.540 --> 00:55:25.290
And then it really trailed off
after that, once you started

00:55:25.290 --> 00:55:25.810
training yourself.

00:55:25.810 --> 00:55:27.900
I know that I was
the same way.

00:55:27.900 --> 00:55:30.910
Matias isn't around here, but
I actually locked him in a

00:55:30.910 --> 00:55:33.320
conference room for the better
part of an afternoon trying to

00:55:33.320 --> 00:55:35.510
convince him that, no, we
had to find some way

00:55:35.510 --> 00:55:37.210
to keep this behavior.

00:55:37.210 --> 00:55:41.050
And in the end, I was not only
convinced that this was the

00:55:41.050 --> 00:55:42.170
right way to go.

00:55:42.170 --> 00:55:47.040
But that once I actually started
using it this way,

00:55:47.040 --> 00:55:50.270
once it's in action, you start
switching over to Recents.

00:55:50.270 --> 00:55:52.520
And it becomes extremely natural
to the point where you

00:55:52.520 --> 00:55:53.880
pick up an older device
and you're like,

00:55:53.880 --> 00:55:55.670
this is entirely wrong.

00:55:55.670 --> 00:55:59.460
So a lot of it really is just
a matter of habituation.

00:55:59.460 --> 00:56:01.060
AUDIENCE: Thanks.

00:56:01.060 --> 00:56:03.350
AUDIENCE: I have a couple
of questions.

00:56:03.350 --> 00:56:08.560
You mentioned going up through
the stack and then basically

00:56:08.560 --> 00:56:11.150
hitting the Up and going
all the way,

00:56:11.150 --> 00:56:13.070
bypassing the middle ones.

00:56:13.070 --> 00:56:16.920
And you were showing the task
stack as basically having

00:56:16.920 --> 00:56:19.620
those vanish.

00:56:19.620 --> 00:56:22.200
But how do you make
that happen?

00:56:22.200 --> 00:56:27.520
Since conceptually, you could
also be getting back to that

00:56:27.520 --> 00:56:31.786
Home screen just by following
other navigation which would

00:56:31.786 --> 00:56:34.550
put it on the top with all
those back in there.

00:56:34.550 --> 00:56:37.040
ADAM POWELL: Yes, there's
a few ways to do this.

00:56:37.040 --> 00:56:40.940
The first is that, well, in
Jellybean and forward, there's

00:56:40.940 --> 00:56:44.076
actually a specific method
that does this.

00:56:44.076 --> 00:56:45.590
Or, wait, no, that's--

00:56:45.590 --> 00:56:45.950
never mind.

00:56:45.950 --> 00:56:47.570
That's a different case.

00:56:47.570 --> 00:56:50.340
So as you're jumping up for
that type of navigation,

00:56:50.340 --> 00:56:54.690
essentially you have this other
flag that's called Flag

00:56:54.690 --> 00:56:56.850
Activity Clear Top.

00:56:56.850 --> 00:57:00.600
And it means that I'm launching
into this task, but

00:57:00.600 --> 00:57:05.350
clear everything else off the
top if this same target

00:57:05.350 --> 00:57:07.820
activity already exists
in my task stack.

00:57:07.820 --> 00:57:10.940
So we've used this in the past
to really try and prevent

00:57:10.940 --> 00:57:12.690
cycles in navigation.

00:57:12.690 --> 00:57:15.400
And that's exactly what it does
in this case, as well.

00:57:15.400 --> 00:57:18.120
AUDIENCE: OK, and somewhat
similar.

00:57:18.120 --> 00:57:24.750
We respond to a number of
deep links we capture.

00:57:24.750 --> 00:57:27.340
You've probably formatted
URLs, etc.

00:57:27.340 --> 00:57:36.810
And so if we come in for item A,
and then we stay in the app

00:57:36.810 --> 00:57:38.170
for a little bit, and
then we go back out.

00:57:38.170 --> 00:57:42.300
And we come in again following
another link for item B. And

00:57:42.300 --> 00:57:45.700
we go off a ways.

00:57:45.700 --> 00:57:49.340
So our stack for our
task currently has

00:57:49.340 --> 00:57:52.590
items A and B on it.

00:57:52.590 --> 00:57:57.360
And so those are handled by
the same activity, just

00:57:57.360 --> 00:57:58.770
different data.

00:57:58.770 --> 00:58:03.930
Now we get a deep link again for
item A, but it just brings

00:58:03.930 --> 00:58:06.165
our activity to the front
showing item B.

00:58:06.165 --> 00:58:06.870
ADAM POWELL: Yes.

00:58:06.870 --> 00:58:09.250
That's that task switching
behavior that we described

00:58:09.250 --> 00:58:10.900
when it matches the
root intent.

00:58:10.900 --> 00:58:15.320
So I'm guessing that your data
URI is an exact match for what

00:58:15.320 --> 00:58:16.890
A was in that particular case.

00:58:16.890 --> 00:58:19.003
So that's definitely why you're
seeing that behavior.

00:58:19.003 --> 00:58:19.366
AUDIENCE: Actually, it's not.

00:58:19.366 --> 00:58:20.160
ADAM POWELL: It's not?

00:58:20.160 --> 00:58:23.102
AUDIENCE: Or sorry, it's an
exact match for item A, yes.

00:58:23.102 --> 00:58:23.990
ADAM POWELL: Yeah, yeah.

00:58:23.990 --> 00:58:25.690
So if it's an exact match for
item A, that's why it's

00:58:25.690 --> 00:58:27.890
bringing that task forward, even
though you've got other

00:58:27.890 --> 00:58:31.220
tasks still on top of it.

00:58:31.220 --> 00:58:34.980
So generally, it sounds like
this means that your activity

00:58:34.980 --> 00:58:37.610
is acting as a viewer, sort of
as a helper for another app.

00:58:37.610 --> 00:58:38.770
Is that correct?

00:58:38.770 --> 00:58:41.710
AUDIENCE: Actually-- well,
I'm with IMDb.

00:58:41.710 --> 00:58:44.830
So basically, if somebody
follows a link that has been

00:58:44.830 --> 00:58:47.800
shared to them, or whatever,
or a title or a

00:58:47.800 --> 00:58:49.010
celebrity or whatever.

00:58:49.010 --> 00:58:51.370
ADAM POWELL: So it's basically
a web link that you've

00:58:51.370 --> 00:58:54.020
registered an HTTP URI
Intent Filter for?

00:58:54.020 --> 00:58:54.460
AUDIENCE: Right.

00:58:54.460 --> 00:58:55.210
ADAM POWELL: Excellent.

00:58:55.210 --> 00:58:58.710
So generally, the way that we
do this is that that doesn't

00:58:58.710 --> 00:59:00.560
actually launch a new task.

00:59:00.560 --> 00:59:02.610
So that shouldn't be launching
a new task to begin with.

00:59:02.610 --> 00:59:05.070
Because it's conceptually part
of exactly what the user was

00:59:05.070 --> 00:59:07.500
doing in whatever task
linked them to it.

00:59:07.500 --> 00:59:11.370
So that's our case before, where
we were doing the share

00:59:11.370 --> 00:59:13.270
YouTube video off to Gmail.

00:59:13.270 --> 00:59:17.580
Where in that case, the detail
view from the IMDb app would

00:59:17.580 --> 00:59:23.330
be launching as an activity on
the current task already.

00:59:23.330 --> 00:59:26.640
So in that case, you wouldn't
be creating this other state

00:59:26.640 --> 00:59:27.780
that you've still
got left here.

00:59:27.780 --> 00:59:30.160
Now, there's another flag which
is kind of important to

00:59:30.160 --> 00:59:33.680
be aware of for this
that is useful when

00:59:33.680 --> 00:59:34.570
linking out to this.

00:59:34.570 --> 00:59:37.780
But sometimes when you're just
handling an HTTP URI, it's not

00:59:37.780 --> 00:59:39.460
really feasible to be
able to set it.

00:59:39.460 --> 00:59:43.510
But that's Flag Activity
Clear When Task Reset.

00:59:43.510 --> 00:59:44.660
So it's kind of a mouthful.

00:59:44.660 --> 00:59:47.820
But what that does is that makes
a distinction on whether

00:59:47.820 --> 00:59:49.440
or not the user comes back.

00:59:49.440 --> 00:59:51.140
So say they were
in the browser.

00:59:51.140 --> 00:59:52.630
So they're in the browser.

00:59:52.630 --> 00:59:54.490
They hit a link to an
IMDb page, and it

00:59:54.490 --> 00:59:55.750
brings up the app instead.

00:59:55.750 --> 00:59:59.410
So it's launched that on the
browser's activities stack.

00:59:59.410 --> 01:00:02.750
Now ideally, if you're linking
them from something else and

01:00:02.750 --> 01:00:04.140
using this as sort of
a viewer, you could

01:00:04.140 --> 01:00:05.220
also set this flag.

01:00:05.220 --> 01:00:07.620
And then that means that if
the user later comes in

01:00:07.620 --> 01:00:10.160
through Recents, then,
OK, it's exactly

01:00:10.160 --> 01:00:10.900
the same as it was.

01:00:10.900 --> 01:00:13.480
The IMDb activity
is still on top.

01:00:13.480 --> 01:00:16.920
But in the case where the user
relaunches from the Launcher

01:00:16.920 --> 01:00:18.620
itself, they press Browser.

01:00:18.620 --> 01:00:19.540
They want to get browser.

01:00:19.540 --> 01:00:21.100
They don't want to
get the IMDb app.

01:00:21.100 --> 01:00:24.000
So that actually acts as that
task reset at that point.

01:00:24.000 --> 01:00:27.850
And any cut points where that
flag was specified, all those

01:00:27.850 --> 01:00:29.950
tasks get finished and
are cleared off.

01:00:29.950 --> 01:00:32.970
But that aside, the general idea
is that you really want

01:00:32.970 --> 01:00:38.910
to be trying to launch within
the current task of whatever

01:00:38.910 --> 01:00:40.960
is linking into your activity.

01:00:40.960 --> 01:00:44.270
So that that way you don't end
up creating your own task

01:00:44.270 --> 01:00:46.320
stack of a whole ton of
extra history there.

01:00:46.320 --> 01:00:47.570
AUDIENCE: OK.

01:00:51.000 --> 01:00:53.780
On certain links, then,
we used the clear top.

01:00:53.780 --> 01:01:04.250
But I'm not sure that the
activity that actually

01:01:04.250 --> 01:01:09.150
responds to that intent actually
gets dismissed and

01:01:09.150 --> 01:01:11.775
this other fragment activity
gets loaded on top.

01:01:11.775 --> 01:01:12.700
ADAM POWELL: Oh, I see.

01:01:12.700 --> 01:01:14.730
So this is when you're
navigating Up from that other

01:01:14.730 --> 01:01:16.130
detail view from before, or--

01:01:16.130 --> 01:01:18.910
AUDIENCE: No, it's actually in
order to cover some of the

01:01:18.910 --> 01:01:24.710
other cases, we had to have
basically an activity chooser

01:01:24.710 --> 01:01:27.610
activity that handles the
intent coming in.

01:01:27.610 --> 01:01:30.470
And then goes off to fragment
activities that actually load

01:01:30.470 --> 01:01:32.040
everything else.

01:01:32.040 --> 01:01:34.730
So it's a little complicated.

01:01:34.730 --> 01:01:35.510
ADAM POWELL: I see.

01:01:35.510 --> 01:01:38.820
So you've essentially got a
detail activity that holds a

01:01:38.820 --> 01:01:39.680
bunch of other pieces then?

01:01:39.680 --> 01:01:41.250
RICHARD FULCHER: We're
over our time.

01:01:41.250 --> 01:01:43.130
So let's just cut the questions
on the mic off.

01:01:43.130 --> 01:01:44.190
Please feel free to come up.

01:01:44.190 --> 01:01:45.240
And then everybody
else can go.

01:01:45.240 --> 01:01:45.930
ADAM POWELL: Yeah, definitely.

01:01:45.930 --> 01:01:47.980
If we get kicked out of this
room, then let's talk more

01:01:47.980 --> 01:01:48.410
outside, too.

01:01:48.410 --> 01:01:49.660
RICHARD FULCHER: Thanks.

