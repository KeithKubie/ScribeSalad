WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
So there's 2 true answers here,

00:00:02.000 --> 00:00:04.000
and I know this was a rather challenging question,

00:00:04.000 --> 00:00:07.000
but just imagine how challenging it must have been for Cook and Levin

00:00:07.000 --> 00:00:10.000
when they figured this out for the first time.

00:00:10.000 --> 00:00:13.000
So first of all, each snapshot has size polynomial and N.

00:00:13.000 --> 00:00:16.000
That is true, so why is that?

00:00:16.000 --> 00:00:21.000
Well, first of all, we said the size of the input is a polynomial of N

00:00:21.000 --> 00:00:24.000
or often times it is N, but sometimes it can also be a polynomial.

00:00:24.000 --> 00:00:28.000
So for example, when we are given a graph with N vertices,

00:00:28.000 --> 00:00:30.000
then there can be up to N squared edges,

00:00:30.000 --> 00:00:33.000
but in any case, the input is some polynomial of N.

00:00:33.000 --> 00:00:37.000
Now the size of the algorithm or program here,

00:00:37.000 --> 00:00:42.000
that is constant because the algorithm doesn't change with the input,

00:00:42.000 --> 00:00:46.000
so we can assume that this year has constant size

00:00:46.000 --> 00:00:48.000
no matter what kind of input we are given.

00:00:48.000 --> 00:00:50.000
And then finally, this is an interesting one,

00:00:50.000 --> 00:00:52.000
how much memory does our algorithm need?

00:00:52.000 --> 00:00:56.000
Well, it's an algorithm for a problem in NP,

00:00:56.000 --> 00:00:59.000
which means it takes only a polynomial number of time steps,

00:00:59.000 --> 00:01:02.000
and in each time step,

00:01:02.000 --> 00:01:05.000
it can only modify a constant amount of variables.

00:01:05.000 --> 00:01:08.000
So the total memory that it needs

00:01:08.000 --> 00:01:11.000
is some constant times the number of time steps,

00:01:11.000 --> 00:01:14.000
and since the number of time steps is a polynomial of N,

00:01:14.000 --> 00:01:19.000
the total space required here for the memory is also a polynomial of N.

00:01:19.000 --> 00:01:21.000
So you have a polynomial of N

00:01:21.000 --> 00:01:24.000
plus some constant plus a polynomial of N,

00:01:24.000 --> 00:01:28.000
so each single snapshot has size polynomial in N.

00:01:28.000 --> 00:01:30.000
Now the second one, I think that was the easiest one to find out,

00:01:30.000 --> 00:01:32.000
is of course not true

00:01:32.000 --> 00:01:34.000
because we said we're looking at a problem in NP,

00:01:34.000 --> 00:01:36.000
we should have even written it down here on the left side.

00:01:36.000 --> 00:01:39.000
So we said the number of time steps must be some polynomial,

00:01:39.000 --> 00:01:41.000
because otherwise, the problem wouldn't be an NP,

00:01:41.000 --> 00:01:43.000
and since we're running on a non-deterministic RAM,

00:01:43.000 --> 00:01:47.000
we can assume that the number of time steps here is bounded by some polynomial.

00:01:47.000 --> 00:01:52.000
So since there's only a polynomial number of time steps,

00:01:52.000 --> 00:01:55.000
there can also only be a polynomial number of snapshots,

00:01:55.000 --> 00:01:59.000
so there cannot be an exponential number of snapshots.

00:01:59.000 --> 00:02:01.000
But this, if you take it together, is--

00:02:01.000 --> 00:02:03.000
well, I don't know it's pretty cool,

00:02:03.000 --> 00:02:06.000
but at least it's very useful for the proof that we're trying to do,

00:02:06.000 --> 00:02:10.000
because if each snapshot has a size that's polynomial in N

00:02:10.000 --> 00:02:14.000
and the total number of snapshots that we have is a polynomial,

00:02:14.000 --> 00:02:18.000
then you have a situation where you have

00:02:18.000 --> 00:02:22.000
a polynomial number of polynomial size snapshots,

00:02:22.000 --> 00:02:26.000
which means that the size of it all taken together is

00:02:26.000 --> 00:02:30.000
a polynomial times a polynomial, which again is a polynomial.

00:02:30.000 --> 00:02:35.000
So basically, a complete protocol of what this algorithm here is doing

00:02:35.000 --> 00:02:38.000
given this input and using this memory here,

00:02:38.000 --> 00:02:42.000
the complete protocol only takes up a polynomial amount of space.

00:02:42.000 --> 00:02:45.000
Polynomial and N, the size of the input.

00:02:45.000 --> 00:02:50.000
What I will now show you is how you can encode a single snapshot.

00:02:50.000 --> 99:59:59.000
So for example, this one here or this one here as a Boolean formula.

