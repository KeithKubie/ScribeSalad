WEBVTT
Kind: captions
Language: en

00:00:02.142 --> 00:00:05.320
 One of the most common questions we get about Android performance 

00:00:05.320 --> 00:00:07.590
 Are about using the Enums prepackage styles in your code. 

00:00:07.590 --> 00:00:10.600
 I mean, this question literally appears everywhere 

00:00:10.600 --> 00:00:13.945
 On the StackOverflow website, on our site for a question and answer after our conversations 

00:00:14.050 --> 00:00:17.555
 Even during a lunch break at a local food session. 

00:00:18.556 --> 00:00:20.187
 Anyway, my name is Colt McCannless. 

00:00:20.188 --> 00:00:24.030
 Patterns in your Android applications are complex and not very complex 

00:00:24.030 --> 00:00:25.950
 That is why there is some confusion 

00:00:25.950 --> 00:00:27.750
 But to go back a bit 

00:00:27.750 --> 00:00:31.820
 If returning to 2009 there was a web page on developers.android.com 

00:00:31.820 --> 00:00:34.810
 She said that the use of anemia should be avoided for reasons of performance. 

00:00:34.870 --> 00:00:39.210
 But then disappeared mysteriously for a while without much clarification 

00:00:39.210 --> 00:00:43.271
 And then of course, it is returned later but in a much smaller condition. 

00:00:43.322 --> 00:00:44.640
 What is the story here? 

00:00:44.641 --> 00:00:47.437
 Well, the truth is a bit different and entirely related 

00:00:47.449 --> 00:00:50.138
 The difference between performance and memory fullness. 

00:00:50.392 --> 00:00:51.797
 See, when your app is loaded, 

00:00:51.797 --> 00:00:56.250
 Android will allocate a portion of the system memory to your application 

00:00:56.251 --> 00:00:58.729
 And for your application to work 

00:00:58.729 --> 00:01:02.763
 DEX code is fully loaded within the subdomain. 

00:01:02.814 --> 00:01:05.501
 But of course, in the end they are shared with the rest of the heap 

00:01:05.552 --> 00:01:08.608
 For any run-time customizations your app will make. 

00:01:08.860 --> 00:01:12.510
 Luckily though, this does not deal with your runtime allocations 

00:01:12.720 --> 00:01:15.760
 However, it puts more stress on the memory system 

00:01:15.760 --> 00:01:20.867
 This of course, when a memory shortage occurs, can cause your application to finish freeing up space. 

00:01:21.056 --> 00:01:25.298
 So with that in mind let's take a look at the effect of prepackage patterns on your application. 

00:01:25.484 --> 00:01:31.520
 Let's say we have here a small base application whose full DEX footprint is 2556 bytes. 

00:01:31.520 --> 00:01:37.252
 Now, we add some integers representing cases that can be used and returned to our system. 

00:01:37.550 --> 00:01:41.589
 After re-translation, the final size of the DEX was 2680 bytes, 

00:01:41.652 --> 00:01:44.709
 This means that these integers are in terms of code size 

00:01:44.804 --> 00:01:48.551
 You have added an additional 124 bytes to our database. 

00:01:48.750 --> 00:01:52.420
 Now for comparison, let's take the same application rule 

00:01:52.420 --> 00:01:54.744
 But its implementation of pluralistic patterns rather than integers 

00:01:54.752 --> 00:01:58.438
 The result here is that the DEX file size is 4188 bytes. 

00:01:58.720 --> 00:02:01.530
 If you add one element of a pattern to this code 

00:02:01.530 --> 00:02:05.650
 Added an additional 1632 bytes for the final DEX file size 

00:02:05.650 --> 00:02:08.380
 Or for those who are proficient in mathematics 

00:02:08.380 --> 00:02:12.217
 Memory is about 13 times greater than the version using int 

00:02:12.367 --> 00:02:15.802
 This, of course, increases your DEX file, which in turn consumes the space of your cluster. 

00:02:15.895 --> 00:02:17.270
 If this is not bad enough, 

00:02:17.270 --> 00:02:20.765
 Although there are also expenses in memory at the time of implementation, attention should be paid to them. 

00:02:20.840 --> 00:02:25.050
 In general, each definition of a pluralistic value costs you about 20 additional bytes. 

00:02:25.050 --> 00:02:29.010
 Of course, in addition to having the object matrix needed to trace the value of the pattern, 

00:02:29.010 --> 00:02:31.800
 So these are 12 additional bytes for the banner as well. 

00:02:31.800 --> 00:02:33.752
 Well, by the way it's 16 bytes in Dalvik. 

00:02:34.050 --> 00:02:38.750
 However, taking this overload occurs at each definition of a code element in your code 

00:02:38.750 --> 00:02:41.056
 This means that the greater the number of prepayments in your app 

00:02:41.056 --> 00:02:42.940
 The larger the memory consumed. 

00:02:43.060 --> 00:02:46.209
 And all of this can get out of control more easily than you think. 

00:02:46.440 --> 00:02:49.610
 For example, if you have used large-scale prepackage patterns, 

00:02:49.611 --> 00:02:53.660
 Or if they are within a library that has been used by many applications on the device, 

00:02:53.941 --> 00:02:57.929
 Each of these small burdens accumulates rapidly to reach a large amount. 

00:02:57.968 --> 00:02:59.024
 And the worst part 

00:02:59.032 --> 00:03:03.718
 Is that you do not really know that the repetitive patterns cause a problem until you hit the code base. 

00:03:03.902 --> 00:03:07.679
 At this point, trying to reform it is indeed a terrible process. 

00:03:07.700 --> 00:03:11.260
 Think of it as such - repetitive patterns are a pattern like Grimlines is not it? 

00:03:11.261 --> 00:03:13.971
 I mean, one or two on their own is not a big problem 

00:03:13.972 --> 00:03:16.826
 I mean, you can get rid of them like something wrapped up or a baseball bat 

00:03:16.873 --> 00:03:19.510
 Or flamethrower if you have any of that next to you, right? 

00:03:19.510 --> 00:03:22.006
 But when there is a whole bunch of them together 

00:03:22.580 --> 00:03:26.547
 Here a problem occurs, and you really want to have a flame launcher. 

00:03:26.762 --> 00:03:30.555
 That's why the basic platform team and people who write the Android code, 

00:03:30.751 --> 00:03:32.187
 They have a strong recommendation 

00:03:32.650 --> 00:03:35.791
 Avoid using prepackage patterns in any part of the code they write. 

00:03:36.060 --> 00:03:39.069
 This allows them to be predictive of potential problems here, 

00:03:39.156 --> 00:03:40.763
 Rather than being interactive 

00:03:40.763 --> 00:03:42.810
 So with that in mind, here are two tips 

00:03:42.810 --> 00:03:45.196
 You should take them into account to address this problem. 

00:03:45.196 --> 00:03:48.060
 First, if you use int for values ​​instead of prep patterns 

00:03:48.060 --> 00:03:50.632
 You can add an IntDef @ note to them, 

00:03:50.782 --> 00:03:54.690
 Which will provide your code with security at build time when LINT errors are enabled, 

00:03:54.691 --> 00:03:58.878
 While the performance and size benefits resulting from the use of int type variables are retained 

00:03:58.944 --> 00:04:01.838
 Basically, this allows you to get the best of both worlds. 

00:04:01.873 --> 00:04:04.454
 Second, if your code is typed correctly 

00:04:04.628 --> 00:04:06.875
 Proguard can in many cases 

00:04:06.900 --> 00:04:09.759
 To improve the conversion of preprogramming styles to int values ​​for you, 

00:04:09.801 --> 00:04:12.594
 So you do not need to think about it or do anything. 

00:04:12.610 --> 00:04:16.140
 Which is one of the few places where free performance gains may be reaped 

00:04:16.140 --> 00:04:18.690
 Note Most of the time, you really have to fight for it. 

00:04:18.690 --> 00:04:22.116
 That's why you need to check out the rest of Android's performance patterns. 

00:04:22.116 --> 00:04:25.149
 And stop asking some questions on our Google+ forum too, 

00:04:25.151 --> 00:04:26.231
 Because you are not alone 

00:04:26.263 --> 00:04:27.863
 So keep calm and write ... 

00:04:27.910 --> 00:04:29.358
 My God! My God! 

