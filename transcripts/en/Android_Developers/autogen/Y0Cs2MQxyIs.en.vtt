WEBVTT
Kind: captions
Language: en

00:00:02.455 --> 00:00:04.150
 Browse the app, 

00:00:04.150 --> 00:00:06.510
 I mean moving from one screen to another, 

00:00:06.510 --> 00:00:09.710
 This is the basic part of Android development. 

00:00:09.710 --> 00:00:12.140
 Historically, you can use intent or fragment interaction 

00:00:12.140 --> 00:00:15.200
 To do this, in simple cases, such as clicking a button, 

00:00:15.200 --> 00:00:16.515
 This is easy. 

00:00:16.515 --> 00:00:19.760
 But what if you want to do something a little more complicated? 

00:00:19.850 --> 00:00:23.050
 For example, connect a common pattern like bottom navigation. 

00:00:23.050 --> 00:00:25.550
 You need to make sure not only your bottom navigation view 

00:00:25.550 --> 00:00:27.800
 Really can navigate, but also 

00:00:27.800 --> 00:00:29.360
 Highlight the correct button. 

00:00:29.360 --> 00:00:32.420
 Oh, and it handles the background stacking in a uniform way. 

00:00:32.420 --> 00:00:35.300
 This way the user will not lose direction or be confused. 

00:00:35.300 --> 00:00:37.730
 A case like this is a new navigation component 

00:00:37.730 --> 00:00:38.673
 Shining place. 

00:00:38.673 --> 00:00:40.340
 The navigation component is a set of libraries. 

00:00:40.340 --> 00:00:42.440
 A cocoa simplifies Android navigation 

00:00:42.440 --> 00:00:44.798
 Plugins and tools. 

00:00:44.798 --> 00:00:47.090
 In addition to making settings for common modes such as bottom navigation 

00:00:47.090 --> 00:00:49.910
 Easier, the component also handles the background stack. 

00:00:49.910 --> 00:00:52.160
 Fragment transaction, parameter passing, 

00:00:52.160 --> 00:00:54.800
 Navigation-based animation and deep links. 

00:00:54.800 --> 00:00:57.740
 The important thing is that it collects all of this navigation information. 

00:00:57.740 --> 00:01:00.510
 And put it in a visual location in your app. 

00:01:00.510 --> 00:01:02.143
 The navigation map. 

00:01:02.143 --> 00:01:03.560
 Navigation components and clips and activities 

00:01:03.560 --> 00:01:05.475
 Out of the box. 

00:01:05.475 --> 00:01:07.850
 You can also extend its library to use other screen implementations. 

00:01:07.850 --> 00:01:10.197
 For example, a custom view. 

00:01:10.197 --> 00:01:12.530
 Let's take a look at some examples of actual navigation components. 

00:01:12.530 --> 00:01:14.870
 One of the activities here will be exchanged 

00:01:14.870 --> 00:01:16.150
 Multiple fragments. 

00:01:16.150 --> 00:01:17.900
 If you want to know why you should consider 

00:01:17.900 --> 00:01:21.080
 For a single activity model, check out Ian Link's wonderful presentation. 

00:01:21.080 --> 00:01:22.820
 I added a video link to my notes. 

00:01:22.820 --> 00:01:23.550
 it is good. 

00:01:23.550 --> 00:01:25.820
 Therefore, the navigation component 

00:01:25.820 --> 00:01:28.250
 By three main parts together 

00:01:28.250 --> 00:01:29.310
 Coordination. 

00:01:29.310 --> 00:01:32.135
 These are navigation maps, NavHostFragment 

00:01:32.135 --> 00:01:33.890
 And NavController. 

00:01:33.890 --> 00:01:36.590
 A navigation map is a new type of resource. 

00:01:36.590 --> 00:01:39.620
 It is an XML file that contains and concentrates 

00:01:39.620 --> 00:01:41.450
 Navigation related information. 

00:01:41.450 --> 00:01:43.130
 Now available in Android Studio 3.3 

00:01:43.130 --> 00:01:46.570
 Provided in the new navigation editor 

00:01:46.570 --> 00:01:47.750
 This message is displayed. 

00:01:47.750 --> 00:01:49.730
 It is a graphical editor to create 

00:01:49.730 --> 00:01:51.680
 This navigation map. 

00:01:51.680 --> 00:01:54.350
 Every screen is called a destination. 

00:01:54.350 --> 00:01:56.750
 Or you can navigate to the place. 

00:01:56.750 --> 00:01:58.920
 In this example, they are all fragments. 

00:01:58.920 --> 00:02:00.957
 These arrows are called operations, 

00:02:00.957 --> 00:02:02.540
 They represent the user can pass 

00:02:02.540 --> 00:02:04.740
 Different paths taken by your app. 

00:02:04.740 --> 00:02:06.426
 If you click on one of the actions, 

00:02:06.426 --> 00:02:08.509
 You can see a lot of embedded information, 

00:02:08.509 --> 00:02:10.850
 Including data passed between destinations, 

00:02:10.850 --> 00:02:14.510
 Animation transitions, reverse stack operations, etc. 

00:02:14.510 --> 00:02:17.610
 Click on the destination and you can see the deep link URL 

00:02:17.610 --> 00:02:20.160
 And startup options and more. 

00:02:20.160 --> 00:02:23.190
 This is all part of the XML of the chart. 

00:02:23.190 --> 00:02:26.025
 Ok, next, we have NavHostFragment. 

00:02:26.025 --> 00:02:28.400
 Suppose you are doing segment navigation, 

00:02:28.400 --> 00:02:30.740
 This is a fragment widget that you will add to your layout. 

00:02:30.740 --> 00:02:32.878
 It is basically a 

00:02:32.878 --> 00:02:34.920
 Can be exchanged in and out of the navigation map 

00:02:34.920 --> 00:02:36.620
 A window containing different fragment destinations. 

00:02:36.620 --> 00:02:39.320
 The last fragment is the NavController. 

00:02:39.320 --> 00:02:41.540
 Each NavHostFragment corresponds to a NavController 

00:02:41.540 --> 00:02:43.747
 You will use it in Kotlin or Java code. 

00:02:43.747 --> 00:02:45.830
 This is to indicate that navigation occurs. 

00:02:45.830 --> 00:02:47.100
 s things. 

00:02:47.100 --> 00:02:48.890
 So if I write code like this, 

00:02:48.890 --> 00:02:51.562
 NavController will be based on the navigation map 

00:02:51.562 --> 00:02:53.270
 All the information to perform this navigation, 

00:02:53.270 --> 00:02:55.640
 And eventually exchanged 

00:02:55.640 --> 00:02:58.730
 The fragment shown in the NavHost fragment. 

00:02:58.730 --> 00:03:00.850
 Now I am using the XML ID of the operation 

00:03:00.850 --> 00:03:03.470
 To specify the action arrow to follow, 

00:03:03.470 --> 00:03:06.080
 But a better way is to use 

00:03:06.080 --> 00:03:08.120
 The SafeArgs plugin for the navigation component. 

00:03:08.120 --> 00:03:10.010
 The SafeArgs plugin generates code, 

00:03:10.010 --> 00:03:12.020
 Allows you to use type-safe navigation 

00:03:12.020 --> 00:03:13.640
 And parameter passing. 

00:03:13.640 --> 00:03:16.160
 First, you add the Gradle plugin to your code. 

00:03:16.160 --> 00:03:19.220
 This will generate classes based on your navigation map. 

00:03:19.220 --> 00:03:20.690
 It will be any destination with operations 

00:03:20.690 --> 00:03:22.930
 Create these "directions" classes, 

00:03:22.930 --> 00:03:25.250
 And it will be any destination with parameters 

00:03:25.250 --> 00:03:26.720
 Create an "Args" class. 

00:03:26.720 --> 00:03:28.910
 If you use the original navigation statement, 

00:03:28.910 --> 00:03:30.830
 You can exchange these generated classes, 

00:03:30.830 --> 00:03:33.140
 And you will get the content shown below. 

00:03:33.140 --> 00:03:35.568
 You should make sure you have it 

00:03:35.568 --> 00:03:37.610
 The action associated with the destination, 

00:03:37.610 --> 00:03:40.070
 Instead of having to reference an operation through its XML ID. 

00:03:40.070 --> 00:03:42.140
 You can also set the parameters of the operation. 

00:03:42.140 --> 00:03:45.290
 If the type of error is passed, the code will not compile. 

00:03:45.290 --> 00:03:47.850
 Getting the parameters you pass is easy. 

00:03:47.850 --> 00:03:49.970
 Just use the GeneratedArgs class, 

00:03:49.970 --> 00:03:51.890
 You can only have the parameters that are correctly named 

00:03:51.890 --> 00:03:53.540
 Type-safe access. 

00:03:53.540 --> 00:03:56.810
 No need to worry about past key value pairs. 

00:03:56.810 --> 00:03:58.700
 This is simple navigation. 

00:03:58.700 --> 00:04:01.070
 Let's talk about setting the bottom navigation. 

00:04:01.070 --> 00:04:02.570
 Navigation components include 

00:04:02.570 --> 00:04:05.960
 Additional navigation UI library in Java 

00:04:05.960 --> 00:04:08.060
 And Kotlin's KTX extension, 

00:04:08.060 --> 00:04:11.660
 They support the options menu, bottom navigation, 

00:04:11.660 --> 00:04:13.400
 Navigation view and navigation drawer. 

00:04:13.400 --> 00:04:15.290
 It also applies to the action bar, toolbar 

00:04:15.290 --> 00:04:16.850
 And folding toolbars. 

00:04:16.850 --> 00:04:19.099
 For our bottom navigation, you can normally 

00:04:19.099 --> 00:04:20.930
 Switch the bottom navigation to XML. 

00:04:20.930 --> 00:04:23.360
 You can also pass 

00:04:23.360 --> 00:04:25.588
 ID that matches your destination XML ID 

00:04:25.588 --> 00:04:28.130
 And the navigation map you want to go to the bottom navigation 

00:04:28.130 --> 00:04:28.990
 Create an XML menu. 

00:04:28.990 --> 00:04:31.940
 Then you can use the navigation UI to connect the rest. 

00:04:31.940 --> 00:04:35.060
 In Kotlin, you can use this handy extension. 

00:04:35.060 --> 00:04:37.370
 This line of code has a NavController. 

00:04:37.370 --> 00:04:39.350
 It handles the actual navigation, 

00:04:39.350 --> 00:04:41.930
 Ensure that you follow best practices in material design, 

00:04:41.930 --> 00:04:43.700
 In terms of reverse stack management. 

00:04:43.700 --> 00:04:45.500
 Most importantly, it handles highlighting 

00:04:45.500 --> 00:04:47.120
 The correct bottom button. 

00:04:47.120 --> 00:04:48.860
 Now we only discuss 

00:04:48.860 --> 00:04:50.330
 Some parts of the navigation component. 

00:04:50.330 --> 00:04:52.190
 To learn more about navigation, 

00:04:52.190 --> 00:04:54.230
 Please check out Codelab and related documentation. 

00:04:54.230 --> 00:04:55.400
 All of this is in the link below. 

00:04:55.400 --> 00:04:58.840
 I hope you have a pleasant coding and navigation experience. 

