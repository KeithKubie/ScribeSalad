WEBVTT
Kind: captions
Language: en

00:00:01.872 --> 00:00:04.220
MIKE WEST: Good afternoon.

00:00:04.220 --> 00:00:05.190
I hope you all had
a good lunch.

00:00:05.190 --> 00:00:08.039
I hope it was as tasty
as mine was.

00:00:08.039 --> 00:00:10.850
I'm glad you all have shown
up for a talk like this.

00:00:10.850 --> 00:00:12.580
It's relatively specific.

00:00:12.580 --> 00:00:15.410
And I'm hoping that means that
all of you are very interested

00:00:15.410 --> 00:00:17.010
in the topic and will have some
really good questions

00:00:17.010 --> 00:00:17.980
afterwards.

00:00:17.980 --> 00:00:19.980
This will be about 45 minutes.

00:00:19.980 --> 00:00:22.300
And then I'm going to try to
leave a good amount of time at

00:00:22.300 --> 00:00:24.090
the end for questions, because
there are a lot of things

00:00:24.090 --> 00:00:26.150
going on in the extension
space.

00:00:26.150 --> 00:00:28.500
There are a lot of things that I
think are really interesting

00:00:28.500 --> 00:00:30.750
and that are going, I think,
to have a little bit of an

00:00:30.750 --> 00:00:32.210
impact on the way
that you develop

00:00:32.210 --> 00:00:34.150
extensions going forward.

00:00:34.150 --> 00:00:36.440
But before we get too much into
that, extensions are kind

00:00:36.440 --> 00:00:37.870
of awesome, aren't they?

00:00:37.870 --> 00:00:40.980
Extensions are great because
they allow you to customize

00:00:40.980 --> 00:00:45.360
the browser in ways that we
simply couldn't do when we

00:00:45.360 --> 00:00:47.940
distribute the browser
to a broad audience.

00:00:47.940 --> 00:00:50.240
Extensions give you the ability
to personalize the way

00:00:50.240 --> 00:00:52.320
you interact not only
with the web but

00:00:52.320 --> 00:00:53.990
with the browser itself.

00:00:53.990 --> 00:00:57.650
A good example of this is me
building this presentation.

00:00:57.650 --> 00:01:01.640
I used an extension called Clear
Cache by a guy named

00:01:01.640 --> 00:01:03.280
Benjamin Bojko.

00:01:03.280 --> 00:01:05.379
This is an extension that's
really quite excellent.

00:01:05.379 --> 00:01:07.500
And it's really, really good
for web developers because

00:01:07.500 --> 00:01:10.770
what it does is, you click a
button, it clears your cache,

00:01:10.770 --> 00:01:13.340
and then reloads the page that
you're currently looking at.

00:01:13.340 --> 00:01:14.920
This is really, really helpful,

00:01:14.920 --> 00:01:16.690
astoundingly so, actually.

00:01:16.690 --> 00:01:19.370
And what's really interesting
about this is that it actually

00:01:19.370 --> 00:01:21.390
has powers above and beyond
what we would

00:01:21.390 --> 00:01:22.890
give to a normal website.

00:01:22.890 --> 00:01:25.680
It's able to actually dive deep
down into the browser and

00:01:25.680 --> 00:01:28.550
use some APIs in order
to remove data.

00:01:28.550 --> 00:01:30.960
Or, if it was a different
extension, to change settings

00:01:30.960 --> 00:01:32.380
or something along
those lines.

00:01:32.380 --> 00:01:34.260
I think we'd all be pretty
surprised if we went to a

00:01:34.260 --> 00:01:36.750
website and it suddenly cleared
my browsing data.

00:01:36.750 --> 00:01:39.100
That would be a bit odd.

00:01:39.100 --> 00:01:42.200
What's interesting about these,
however, is that we see

00:01:42.200 --> 00:01:44.750
a little bit of bloat in
the extension space.

00:01:44.750 --> 00:01:47.450
We see a little bit of bloat
in a couple of ways, two

00:01:47.450 --> 00:01:48.200
distinct ways.

00:01:48.200 --> 00:01:51.320
First, we see extensions that
are actually requesting more

00:01:51.320 --> 00:01:54.400
permissions than they actually
need to do their job.

00:01:54.400 --> 00:01:57.280
If we look at Clear Cache, for
instance, we see that even

00:01:57.280 --> 00:01:59.970
though it's only clearing my
browsing data, it actually

00:01:59.970 --> 00:02:03.450
requests host permissions
to the entire internet.

00:02:03.450 --> 00:02:05.185
It does this for a very
good reason actually.

00:02:05.185 --> 00:02:08.160
It does it because it wants
to clear cookies on an

00:02:08.160 --> 00:02:10.100
origin-specific basis.

00:02:10.100 --> 00:02:12.740
We don't yet have an API that
allows you to do that, which

00:02:12.740 --> 00:02:15.360
means that the only mechanism
that the developer actually

00:02:15.360 --> 00:02:19.150
has at this point is to request
a large and dangerous

00:02:19.150 --> 00:02:23.100
permission in order to do a very
small and focused task.

00:02:23.100 --> 00:02:25.020
This is something that we
definitely want to fix.

00:02:25.020 --> 00:02:27.320
And there are a lot of things
in the extension system that

00:02:27.320 --> 00:02:30.360
we think we can fix
along these lines.

00:02:30.360 --> 00:02:33.350
The other area that we see
bloated with regard to

00:02:33.350 --> 00:02:38.710
extensions is the resource usage
that extensions actually

00:02:38.710 --> 00:02:42.990
use when they're active
on your computer.

00:02:42.990 --> 00:02:45.240
We'll talk a little bit about
how we're going to try to

00:02:45.240 --> 00:02:48.410
address both of these issues
in a little bit.

00:02:48.410 --> 00:02:53.140
One last thing we see in the
extension ecosystem is the

00:02:53.140 --> 00:02:56.070
fact that while extensions
themselves are quite secure--

00:02:56.070 --> 00:02:59.930
and we think we have a really
good handle on dealing with

00:02:59.930 --> 00:03:02.120
explicitly malware
extensions--

00:03:02.120 --> 00:03:04.750
we see problems with regard
to extensions that

00:03:04.750 --> 00:03:06.670
are benign but buggy.

00:03:06.670 --> 00:03:09.780
This means that the extension
itself is doing things that

00:03:09.780 --> 00:03:10.740
are quite important.

00:03:10.740 --> 00:03:14.330
And it's doing things in a way
that simply opens up a hole or

00:03:14.330 --> 00:03:18.630
two within the extension
process itself.

00:03:18.630 --> 00:03:21.530
This is a bit problematic
because, as we said earlier,

00:03:21.530 --> 00:03:24.950
extensions have permissions that
go well above and beyond

00:03:24.950 --> 00:03:26.800
what's available on
the open web.

00:03:26.800 --> 00:03:29.680
This makes extensions a
juicy target indeed.

00:03:29.680 --> 00:03:31.580
We'll talk a little bit about
how we're going to address

00:03:31.580 --> 00:03:35.200
that with the concept of
Manifest Version 2.

00:03:35.200 --> 00:03:37.650
Manifest Version 2 is something
that was introduced

00:03:37.650 --> 00:03:41.340
in Chrome 18 as the first set
of breaking changes in the

00:03:41.340 --> 00:03:42.830
extension system.

00:03:42.830 --> 00:03:45.660
Manifest Version 2 basically
is exactly the same as

00:03:45.660 --> 00:03:48.330
Manifest Version 1 with a little
bit of extra stuff

00:03:48.330 --> 00:03:50.860
layered on top, a few
restrictions but also a few

00:03:50.860 --> 00:03:51.980
new abilities.

00:03:51.980 --> 00:03:55.190
We'll talk about those now.

00:03:55.190 --> 00:03:57.790
The attacks that I talked
about earlier would look

00:03:57.790 --> 00:03:58.740
something like this.

00:03:58.740 --> 00:03:59.930
And these are the sorts
of things that

00:03:59.930 --> 00:04:01.510
we're trying to address.

00:04:01.510 --> 00:04:05.170
Extensions dive deep into
a web page by injecting

00:04:05.170 --> 00:04:06.170
JavaScript.

00:04:06.170 --> 00:04:08.450
This injected JavaScript might,
for instance, in a

00:04:08.450 --> 00:04:11.430
mapping application or a mapping
extension look for

00:04:11.430 --> 00:04:13.360
addresses on the page
and try to do

00:04:13.360 --> 00:04:14.460
something useful with them.

00:04:14.460 --> 00:04:15.830
It might want to
display a map.

00:04:15.830 --> 00:04:18.100
It might want to go out to the
Google Maps API or something

00:04:18.100 --> 00:04:19.640
along those lines.

00:04:19.640 --> 00:04:23.140
It grabs this information via
inner HTML and passes it to

00:04:23.140 --> 00:04:25.570
the background page
via a message.

00:04:25.570 --> 00:04:28.520
The background page or a pop-up
or anything along those

00:04:28.520 --> 00:04:31.650
lines might then try to use this
information by injecting

00:04:31.650 --> 00:04:33.370
it into the background
page or into a

00:04:33.370 --> 00:04:35.960
pop-up using inner HTML.

00:04:35.960 --> 00:04:38.240
The problem happens when
this information isn't

00:04:38.240 --> 00:04:41.470
well-processed, when you don't
really ensure that you're only

00:04:41.470 --> 00:04:45.210
getting information that you can
easily and safely inject

00:04:45.210 --> 00:04:46.630
the inner HTML.

00:04:46.630 --> 00:04:49.860
If, for instance, the website
injected some script tags

00:04:49.860 --> 00:04:52.760
inside of the thing your
extension is looking for, then

00:04:52.760 --> 00:04:55.880
you've got a big problem because
at this point you've

00:04:55.880 --> 00:04:59.650
just injected untrusted script
into a high-permission area of

00:04:59.650 --> 00:05:00.860
your extension.

00:05:00.860 --> 00:05:02.450
This is a big problem,
in fact.

00:05:02.450 --> 00:05:06.400
It's something that a team of
researchers at University of

00:05:06.400 --> 00:05:10.800
California at Berkeley have
found exists not really to a

00:05:10.800 --> 00:05:14.550
really wide margin within
the extension system.

00:05:14.550 --> 00:05:17.930
They went through about 100
extensions and found

00:05:17.930 --> 00:05:21.690
vulnerabilities like this
in about 40 of them.

00:05:21.690 --> 00:05:25.470
However, they found that 94%
of the vulnerabilities that

00:05:25.470 --> 00:05:28.480
they found-- which included
either loading resources over

00:05:28.480 --> 00:05:33.190
HTTP as opposed to HTTPS or
the sort of inline scripts

00:05:33.190 --> 00:05:34.540
injection issue--

00:05:34.540 --> 00:05:37.890
would've been solved if both of
these issues could somehow

00:05:37.890 --> 00:05:39.020
be removed.

00:05:39.020 --> 00:05:40.430
We think there's a
way to do that.

00:05:40.430 --> 00:05:42.780
And I'll talk about it
in just a moment.

00:05:42.780 --> 00:05:47.380
Manifest Version 2 introduces,
then, two large changes that

00:05:47.380 --> 00:05:49.790
we think are going to help make
the extension ecosystem

00:05:49.790 --> 00:05:53.150
more secure and a couple of
small cleanup changes.

00:05:53.150 --> 00:05:55.620
The two big changes are a
default content security

00:05:55.620 --> 00:05:59.070
policy and web accessible
resources.

00:05:59.070 --> 00:06:02.810
Manifest Version 1 is, as of
Chrome 18, deprecated.

00:06:02.810 --> 00:06:04.980
We'll talk a little bit about
the schedule that we have in

00:06:04.980 --> 00:06:07.210
mind later on.

00:06:07.210 --> 00:06:09.370
Manifest Version 2 is very
easy to opt into.

00:06:09.370 --> 00:06:12.430
It's simply an attribute inside
of your manifest file.

00:06:12.430 --> 00:06:14.650
You say, Manifest Version 2 and
then we know that you're

00:06:14.650 --> 00:06:16.800
opting into the new system.

00:06:16.800 --> 00:06:19.570
The structural changes are
very straightforward.

00:06:19.570 --> 00:06:22.060
First of all, we've made the
background property a little

00:06:22.060 --> 00:06:22.920
bit smarter.

00:06:22.920 --> 00:06:26.100
Instead of creating a background
.html page that

00:06:26.100 --> 00:06:29.420
really contains nothing except
script, you can simply inject

00:06:29.420 --> 00:06:32.200
scripts by using the scripts
property inside background.

00:06:32.200 --> 00:06:35.760
You could load a library, load
your main.js and go without

00:06:35.760 --> 00:06:38.250
actually creating an HTML page
that doesn't do really

00:06:38.250 --> 00:06:41.030
anything at all other than
load these scripts.

00:06:41.030 --> 00:06:44.410
And also, we've made some
cleanup within the APIs

00:06:44.410 --> 00:06:44.890
themselves.

00:06:44.890 --> 00:06:46.085
For example, we had
chrome.extension

00:06:46.085 --> 00:06:47.335
.getTabContentses.

00:06:49.400 --> 00:06:50.440
That's not actually a typo.

00:06:50.440 --> 00:06:51.950
That was part of the API.

00:06:51.950 --> 00:06:53.180
We've removed that.

00:06:53.180 --> 00:06:55.210
Instead, you should use
extension get Views.

00:06:55.210 --> 00:06:58.660
There are a couple of other
places where we've combined or

00:06:58.660 --> 00:07:01.690
we've removed pluralization that
wasn't necessary, things

00:07:01.690 --> 00:07:02.340
along those lines.

00:07:02.340 --> 00:07:04.840
If you go to the extension
documentation, you can see a

00:07:04.840 --> 00:07:09.260
complete list of all the API
changes that happened.

00:07:09.260 --> 00:07:11.740
Let's talk, then, about the
first of the two big changes.

00:07:11.740 --> 00:07:14.430
The first one is Web Accessible
Resources.

00:07:14.430 --> 00:07:17.370
Web Accessible Resources gives
you a mechanism of determining

00:07:17.370 --> 00:07:21.010
exactly which resources inside
your extension should be

00:07:21.010 --> 00:07:23.890
available outside the context
of your extension.

00:07:23.890 --> 00:07:26.880
If you need to inject a script
file or an image or anything

00:07:26.880 --> 00:07:29.930
along these lines into a
website, what you'll need to

00:07:29.930 --> 00:07:32.730
do is actually specify
that resource within

00:07:32.730 --> 00:07:34.090
your manifest file.

00:07:34.090 --> 00:07:36.650
Here we've shown web accessible
resources

00:07:36.650 --> 00:07:38.740
public.png.

00:07:38.740 --> 00:07:42.370
public.png loads, private.png
fails.

00:07:42.370 --> 00:07:44.950
So at this point, you simply
have the ability to whitelist

00:07:44.950 --> 00:07:48.710
the specific resources within
your extension that are

00:07:48.710 --> 00:07:51.270
available outside the context
of your extension.

00:07:51.270 --> 00:07:52.510
This solves a couple
of problems.

00:07:52.510 --> 00:07:55.710
For instance, we've seen a lot
of extension developers using

00:07:55.710 --> 00:07:59.400
the query string on a options
page or a background page or

00:07:59.400 --> 00:08:01.470
something that gets
loaded in order to

00:08:01.470 --> 00:08:02.790
actually do some work.

00:08:02.790 --> 00:08:06.970
It was then impossible to script
that page by loading it

00:08:06.970 --> 00:08:09.080
outside the context
of the extension.

00:08:09.080 --> 00:08:12.810
This will remove that sort
of vulnerability.

00:08:12.810 --> 00:08:15.910
Content Security Policy, then,
is the second of these two

00:08:15.910 --> 00:08:18.550
large changes within
Manifest Version 2.

00:08:18.550 --> 00:08:20.730
This is probably the
biggest change.

00:08:20.730 --> 00:08:22.600
And it's something that I'm
going to spend a good amount

00:08:22.600 --> 00:08:26.220
of time on walking you through
because it's very important.

00:08:26.220 --> 00:08:29.250
Content Security Policy gives
you a mechanism of mitigating

00:08:29.250 --> 00:08:31.990
the risk of cross-site scripting
attacks by very

00:08:31.990 --> 00:08:35.169
specifically whitelisting the
origins that are allowed to

00:08:35.169 --> 00:08:38.429
load resources inside of
a certain context.

00:08:38.429 --> 00:08:41.860
In this case, we're defining a
policy for extensions that

00:08:41.860 --> 00:08:46.230
enables you to determine that
origin one-- so my website--

00:08:46.230 --> 00:08:47.750
I should be able to
load resources.

00:08:47.750 --> 00:08:49.840
I should be able to load script
from that website.

00:08:49.840 --> 00:08:52.770
I shouldn't, however, be able
to load resources from the

00:08:52.770 --> 00:08:54.590
evil.example.com.

00:08:54.590 --> 00:08:58.030
If somehow people were able to
inject code into my background

00:08:58.030 --> 00:09:00.320
page that tried to load
resources from an

00:09:00.320 --> 00:09:03.010
unwhitelisted origin, it
would simply fail.

00:09:03.010 --> 00:09:05.080
This gives us a good measure
of security.

00:09:05.080 --> 00:09:07.220
And it's something that we're
really excited about, not only

00:09:07.220 --> 00:09:09.700
for extensions but also
for the open web.

00:09:09.700 --> 00:09:11.480
There's going to be a really
good talk on Friday that I

00:09:11.480 --> 00:09:12.990
think you should all attend
if you're at all

00:09:12.990 --> 00:09:14.280
interested in security.

00:09:14.280 --> 00:09:17.590
And really everyone should be.

00:09:17.590 --> 00:09:18.960
There's a lot of
detail on this.

00:09:18.960 --> 00:09:21.170
I'm not going to go into a
whole lot of detail about

00:09:21.170 --> 00:09:24.160
Content Security Policy itself,
how it actually works,

00:09:24.160 --> 00:09:26.350
and how you define a Content
Security Policy.

00:09:26.350 --> 00:09:29.330
We've just published an article
on HTML5Rocks, which

00:09:29.330 --> 00:09:31.130
is an excellent website
by the way.

00:09:31.130 --> 00:09:33.515
If you go there, you can get
a really good overview of

00:09:33.515 --> 00:09:34.720
Content Security Policy.

00:09:34.720 --> 00:09:37.560
And I think that's probably a
good use of 10 or so minutes

00:09:37.560 --> 00:09:39.330
of your time.

00:09:39.330 --> 00:09:41.860
The default Content Security
Policy that we're defining

00:09:41.860 --> 00:09:46.240
within the context of Manifest
Version 2 is script src self,

00:09:46.240 --> 00:09:47.920
object src self.

00:09:47.920 --> 00:09:49.670
This has a couple of impacts.

00:09:49.670 --> 00:09:53.490
The basic idea is that you can
only load script from inside

00:09:53.490 --> 00:09:55.890
of the context of your
extensions, so inside your

00:09:55.890 --> 00:09:58.770
extension package coming
from the same origin.

00:09:58.770 --> 00:10:02.310
You can also only load Flash and
other plug-in information

00:10:02.310 --> 00:10:04.040
via the same mechanism.

00:10:04.040 --> 00:10:06.700
So these sorts of things we
would like you to bundle with

00:10:06.700 --> 00:10:08.530
your extension when possible.

00:10:08.530 --> 00:10:10.410
It has a couple of
impacts then.

00:10:10.410 --> 00:10:13.580
First, no JavaScript can be
loaded by default from third

00:10:13.580 --> 00:10:14.725
party servers.

00:10:14.725 --> 00:10:16.650
No objects can be loaded
by default

00:10:16.650 --> 00:10:18.240
from third-party servers.

00:10:18.240 --> 00:10:19.530
No inline JavaScript--

00:10:19.530 --> 00:10:20.890
this includes script tags.

00:10:20.890 --> 00:10:24.140
It also includes things like
inline event handlers in

00:10:24.140 --> 00:10:25.620
JavaScript URLs.

00:10:25.620 --> 00:10:29.720
It's simply impossible, you
see, to differentiate code

00:10:29.720 --> 00:10:34.650
that was injected maliciously
from code that was inlined in

00:10:34.650 --> 00:10:37.430
your web page intentionally.

00:10:37.430 --> 00:10:40.220
There is no difference between
the two as far as the HTML

00:10:40.220 --> 00:10:41.230
parser is concerned.

00:10:41.230 --> 00:10:43.810
It's simply impossible to
make that determination.

00:10:43.810 --> 00:10:46.170
And the Security Policy then
takes the safest route, which

00:10:46.170 --> 00:10:48.550
is banning it entirely.

00:10:48.550 --> 00:10:51.130
No eval, this is an
interesting topic.

00:10:51.130 --> 00:10:53.230
And we'll talk about it a little
bit more later on.

00:10:53.230 --> 00:10:57.420
But for the moment, by default,
eval is disallowed.

00:10:57.420 --> 00:11:00.530
This includes not only eval
itself but also things like

00:11:00.530 --> 00:11:04.810
new function, set timeout that
uses a string, and set

00:11:04.810 --> 00:11:06.050
interval that uses a string.

00:11:06.050 --> 00:11:08.610
So anything that takes strings
and converts them directly

00:11:08.610 --> 00:11:11.690
into executed JavaScript is
something that we simply can't

00:11:11.690 --> 00:11:16.330
allow within the protected
context of the extension.

00:11:16.330 --> 00:11:20.040
Ideally, this means that we'll
be free from XSS attacks

00:11:20.040 --> 00:11:21.950
within the context
of the extension.

00:11:21.950 --> 00:11:23.760
That probably isn't
completely true.

00:11:23.760 --> 00:11:27.190
But Content Security Policy gets
us a heck of a lot closer

00:11:27.190 --> 00:11:30.000
to that than we are today.

00:11:30.000 --> 00:11:31.700
So let's talk in a little
bit more detail

00:11:31.700 --> 00:11:33.470
about third-party resources.

00:11:33.470 --> 00:11:35.600
I said that by default you
aren't allowed to load

00:11:35.600 --> 00:11:37.040
third-party resources.

00:11:37.040 --> 00:11:38.210
This is the case.

00:11:38.210 --> 00:11:41.910
You can, however, loosen this
policy to include HTTPS

00:11:41.910 --> 00:11:44.770
sources, that is secure
HTTP sources as

00:11:44.770 --> 00:11:47.260
opposed to HTTP sources.

00:11:47.260 --> 00:11:50.350
If you go to a coffee bar and
hook up to their wi-fi, you

00:11:50.350 --> 00:11:54.160
really have no guarantee that
anything you load over HTTP is

00:11:54.160 --> 00:11:55.980
actually what the
server sent you.

00:11:55.980 --> 00:11:58.590
It's incredibly trivial to
go in and manipulate that

00:11:58.590 --> 00:12:00.780
content, injecting new content,

00:12:00.780 --> 00:12:02.510
or changing it entirely.

00:12:02.510 --> 00:12:05.310
HTTPS, however, is an entirely
different story.

00:12:05.310 --> 00:12:08.860
Because it's encrypted, it's
much, much more difficult to

00:12:08.860 --> 00:12:12.140
inject anything malicious
into an HTTPS string.

00:12:12.140 --> 00:12:14.800
At that point, we feel pretty
good about allowing you to

00:12:14.800 --> 00:12:18.260
load things like Google
Analytics over HTTPS as

00:12:18.260 --> 00:12:19.810
opposed to HTTP.

00:12:19.810 --> 00:12:22.970
So if there are third-party
JavaScripts that you need to

00:12:22.970 --> 00:12:25.780
load within the context of your
extension, we would ask

00:12:25.780 --> 00:12:29.100
you to specify within the
Content Security Policy that

00:12:29.100 --> 00:12:31.840
you define for your extension.

00:12:31.840 --> 00:12:34.130
You could write something like
this, script src self, which

00:12:34.130 --> 00:12:36.930
means you can load things from
your own extension's origin,

00:12:36.930 --> 00:12:40.310
but also https://ssl.goog
le-analytics.com.

00:12:40.310 --> 00:12:43.200
This will enable you then to
load Google Analytics, do the

00:12:43.200 --> 00:12:46.230
things you need to do with this
external library, but do

00:12:46.230 --> 00:12:48.230
it in a very safe way.

00:12:48.230 --> 00:12:50.710
We'd actually, however, be
thrilled if you locked things

00:12:50.710 --> 00:12:54.200
down even further than the
defaults that we've set.

00:12:54.200 --> 00:12:57.120
You can start with a default
source of none, and then list

00:12:57.120 --> 00:13:00.080
every single type of resource
that you need to load and the

00:13:00.080 --> 00:13:02.450
origins associated with
those resources.

00:13:02.450 --> 00:13:03.860
This gives you a much--

00:13:03.860 --> 00:13:08.330
a higher degree of security than
simply using the defaults

00:13:08.330 --> 00:13:09.260
that we've set.

00:13:09.260 --> 00:13:11.760
The defaults take care of the
most dangerous things, that is

00:13:11.760 --> 00:13:13.460
scripts and objects.

00:13:13.460 --> 00:13:16.100
But if you want to deal with
everything else as well, we'd

00:13:16.100 --> 00:13:18.970
be quite happy.

00:13:18.970 --> 00:13:21.000
Inline JavaScript, however,
is something that we

00:13:21.000 --> 00:13:22.230
simply can't loosen.

00:13:22.230 --> 00:13:25.750
This is actually the core of
Content Security Policy.

00:13:25.750 --> 00:13:27.750
Because you can't differentiate
between

00:13:27.750 --> 00:13:31.120
maliciously injected code and
non-maliciously intentional

00:13:31.120 --> 00:13:38.930
code, we simply can't allow this
policy to be loosened.

00:13:38.930 --> 00:13:41.550
If you have code that looks
something like this, it's

00:13:41.550 --> 00:13:43.970
actually not really best
practice anyway, right.

00:13:43.970 --> 00:13:46.450
We have JavaScript,
CSS, and HTML.

00:13:46.450 --> 00:13:48.460
But all have very different
purposes.

00:13:48.460 --> 00:13:49.830
HTML is there for markup.

00:13:49.830 --> 00:13:52.160
CSS is there for your
presentation.

00:13:52.160 --> 00:13:54.170
And JavaScript is there
for behavior.

00:13:54.170 --> 00:13:57.050
Separating those out into
separate files makes your code

00:13:57.050 --> 00:14:00.700
easier to understand and is
really best practice anyway.

00:14:00.700 --> 00:14:04.280
If you haven code like this, you
can very easily rewrite it

00:14:04.280 --> 00:14:05.920
into two separate files.

00:14:05.920 --> 00:14:09.020
So instead of having an inline
event handler on a button, you

00:14:09.020 --> 00:14:10.230
would have an external
JavaScript

00:14:10.230 --> 00:14:11.450
file that gets loaded.

00:14:11.450 --> 00:14:13.820
This JavaScript file would hook
up an event listener.

00:14:13.820 --> 00:14:15.470
And at that point, when you
click on the button,

00:14:15.470 --> 00:14:17.210
amazingness will still happen.

00:14:17.210 --> 00:14:18.670
You'll get the exact
same effect.

00:14:18.670 --> 00:14:20.970
But you'll get it in a way
that we can ensure safe.

00:14:24.260 --> 00:14:27.370
Eval, on the other hand,
is a bit problematic.

00:14:27.370 --> 00:14:30.510
We can't really allow it by
default because your extension

00:14:30.510 --> 00:14:32.400
might be working with untrusted

00:14:32.400 --> 00:14:33.990
data coming from users.

00:14:33.990 --> 00:14:37.370
So user-generated data being
potentially turned directly

00:14:37.370 --> 00:14:39.880
into executed JavaScript,
that's problematic.

00:14:39.880 --> 00:14:42.710
And it's simply something that
we can't allow within the

00:14:42.710 --> 00:14:44.330
context, within this
high-permission

00:14:44.330 --> 00:14:46.460
context, of an extension.

00:14:46.460 --> 00:14:49.490
We understand, however, that
it's pretty important for a

00:14:49.490 --> 00:14:50.640
couple of use cases.

00:14:50.640 --> 00:14:53.080
There are a few of you that
really, really need to use

00:14:53.080 --> 00:14:56.100
eval and especially eval-like
constructs.

00:14:56.100 --> 00:14:59.720
New Function, for instance, is
used in a wide variety of

00:14:59.720 --> 00:15:00.640
templating libraries.

00:15:00.640 --> 00:15:01.420
And we understand.

00:15:01.420 --> 00:15:04.520
We've heard the feedback that
that's incredibly important to

00:15:04.520 --> 00:15:06.950
the way that many
of you develop.

00:15:06.950 --> 00:15:09.660
We think we have an alternative
or a work around

00:15:09.660 --> 00:15:12.370
for this that we're happy with
and that we hope you'll be

00:15:12.370 --> 00:15:13.780
happy with as well.

00:15:13.780 --> 00:15:17.680
The idea is that you create a
sandbox in which eval can

00:15:17.680 --> 00:15:20.320
execute in a non
dangerous way.

00:15:20.320 --> 00:15:23.110
Let's talk a little bit about
how that might work.

00:15:23.110 --> 00:15:24.200
We have your extension.

00:15:24.200 --> 00:15:26.930
And inside of your extension,
you create an iframe.

00:15:26.930 --> 00:15:29.670
This iframe is sandboxed,
meaning that it has fewer

00:15:29.670 --> 00:15:32.070
permissions than the
extension itself.

00:15:32.070 --> 00:15:35.880
We defined in the previous
page sandbox.html.

00:15:35.880 --> 00:15:39.310
We load sandbox.html
in an iframe.

00:15:39.310 --> 00:15:41.210
It's then pushed off
into a separate

00:15:41.210 --> 00:15:43.010
origin from your extension.

00:15:43.010 --> 00:15:45.600
This means it doesn't have
access to any data that your

00:15:45.600 --> 00:15:47.100
extension has stored.

00:15:47.100 --> 00:15:50.190
And it doesn't have access
to the dangerous

00:15:50.190 --> 00:15:52.530
chrome.star name space.

00:15:52.530 --> 00:15:56.400
So any of the things that your
extension can do, you'll need

00:15:56.400 --> 00:15:59.160
to deal with the sandbox in
much the same way that you

00:15:59.160 --> 00:16:01.770
deal with content scripts
and injected scripts.

00:16:01.770 --> 00:16:05.310
You'll pass messages into the
sandbox containing data that

00:16:05.310 --> 00:16:06.900
you'd like to see processed.

00:16:06.900 --> 00:16:10.820
Then you'll pass processed data
back out of the sandbox

00:16:10.820 --> 00:16:14.250
into your extension giving you
the ability to, for instance,

00:16:14.250 --> 00:16:17.080
pass on a context for a template
and get templated

00:16:17.080 --> 00:16:20.380
HTML or rendered
HTML back out.

00:16:20.380 --> 00:16:23.600
At that point, you can inject
that HTML into your pop-up

00:16:23.600 --> 00:16:26.730
page or into your background
page without worrying about

00:16:26.730 --> 00:16:29.880
whether it's dangerous or not
because that new HTML, that

00:16:29.880 --> 00:16:33.590
newly generated HTML, would
then be executed inside a

00:16:33.590 --> 00:16:37.030
context that's protected by
Content Security Policy.

00:16:37.030 --> 00:16:40.090
Even if an attacker was
completely able to hijack

00:16:40.090 --> 00:16:43.310
everything within your sandbox
HTML file, the worst they

00:16:43.310 --> 00:16:46.640
could do is present links or
something that would be useful

00:16:46.640 --> 00:16:49.610
for a user or that looks useful
for a user to click on.

00:16:49.610 --> 00:16:51.300
They couldn't actually
execute any code.

00:16:51.300 --> 00:16:52.890
They couldn't exfiltrate data.

00:16:52.890 --> 00:16:54.770
At that point, we're pretty
happy with this as a

00:16:54.770 --> 00:16:56.270
compromise.

00:16:56.270 --> 00:16:58.900
The code for this would look
relatively straightforward.

00:16:58.900 --> 00:17:00.990
As I said, you would inject
an iframe-- in this case,

00:17:00.990 --> 00:17:04.329
sandbox.html, which again was
defined in the manifest file

00:17:04.329 --> 00:17:06.200
as being a sandboxed file.

00:17:06.200 --> 00:17:10.140
When this file is loaded, you
would fill that iframe with

00:17:10.140 --> 00:17:10.970
templating goodness.

00:17:10.970 --> 00:17:13.650
So at this point, I'm using
something like Handlebars.

00:17:13.650 --> 00:17:15.710
Many of you are using different
frameworks.

00:17:15.710 --> 00:17:17.880
They would generally
work the same way.

00:17:17.880 --> 00:17:22.550
You want to inject or you want
to code a sandboxed page that

00:17:22.550 --> 00:17:25.240
contains all of this templating
information and

00:17:25.240 --> 00:17:29.110
then create sandbox.js,
which has--

00:17:29.110 --> 00:17:33.270
will basically create an API
on top of your sandbox that

00:17:33.270 --> 00:17:35.810
allows messages to be passed in
with a certain command and

00:17:35.810 --> 00:17:37.240
a certain context.

00:17:37.240 --> 00:17:39.420
Then you'll be able to execute
that information.

00:17:39.420 --> 00:17:41.440
So I create a template at
the top of the page.

00:17:41.440 --> 00:17:43.490
This is just the way
Handlebars works.

00:17:43.490 --> 00:17:45.600
And then I listen for
a message event.

00:17:45.600 --> 00:17:48.280
When a message event comes in
with the command of render,

00:17:48.280 --> 00:17:53.230
then I post a message back to
the extension containing some

00:17:53.230 --> 00:17:54.110
templated data.

00:17:54.110 --> 00:17:58.020
So I execute template with the
context that I passed in.

00:17:58.020 --> 00:17:59.370
This gives me new HTML.

00:17:59.370 --> 00:18:00.300
I pass it back out.

00:18:00.300 --> 00:18:01.840
And I can do whatever
I want with it in a

00:18:01.840 --> 00:18:03.550
relatively safe way.

00:18:03.550 --> 00:18:05.290
That side would look
like this.

00:18:05.290 --> 00:18:07.630
When I click on the browser
action, I pass information

00:18:07.630 --> 00:18:09.510
into the iframe content
window.

00:18:09.510 --> 00:18:12.440
And I get the information back
out as a message event.

00:18:12.440 --> 00:18:15.350
This gives me the ability then,
as I said, to sandbox

00:18:15.350 --> 00:18:16.640
the way that eval works.

00:18:16.640 --> 00:18:19.360
This means I can do the
dangerous things.

00:18:19.360 --> 00:18:21.890
But I do them in a context in
which those things are no

00:18:21.890 --> 00:18:23.140
longer dangerous.

00:18:26.060 --> 00:18:28.560
The Support Schedule for
Manifest Version 1 is as

00:18:28.560 --> 00:18:30.780
follows at the moment.

00:18:30.780 --> 00:18:34.510
Chrome 21 is coming out
mid to end of August.

00:18:34.510 --> 00:18:37.440
At this point, no new extensions
built using

00:18:37.440 --> 00:18:39.570
Manifest Version 1 will
be accepted in

00:18:39.570 --> 00:18:41.080
the Chrome Web Store.

00:18:41.080 --> 00:18:43.510
It's not, however, the case that
old extensions at this

00:18:43.510 --> 00:18:45.280
point will have any problems
whatsoever.

00:18:45.280 --> 00:18:48.130
Old extensions will be
grandfathered in.

00:18:48.130 --> 00:18:50.290
If you currently have an
extension in the store that's

00:18:50.290 --> 00:18:52.240
using Manifest Version
1, you're fine

00:18:52.240 --> 00:18:53.030
for a little while.

00:18:53.030 --> 00:18:55.570
But this is our message
to you.

00:18:55.570 --> 00:18:57.220
Manifest Version 1
is deprecated.

00:18:57.220 --> 00:19:00.085
We really need to move to a
system that is more secure,

00:19:00.085 --> 00:19:02.820
that gives us these guarantees
in a way that we

00:19:02.820 --> 00:19:04.420
simply can't do now.

00:19:04.420 --> 00:19:06.750
We've had Content Security
Policy in the extension system

00:19:06.750 --> 00:19:07.600
for a while.

00:19:07.600 --> 00:19:10.090
And it simply hasn't gotten
enough adoption for it to be

00:19:10.090 --> 00:19:12.830
useful for us as a security
mechanism.

00:19:12.830 --> 00:19:17.890
We're going to need to migrate
extensions over to the new

00:19:17.890 --> 00:19:18.880
Manifest version.

00:19:18.880 --> 00:19:21.910
And we're doing it with
a schedule as follows.

00:19:21.910 --> 00:19:25.370
Chrome 23, Chrome will stop
packaging Manifest Version 1.

00:19:25.370 --> 00:19:28.770
This means if you want to
package a Manifest Version 1

00:19:28.770 --> 00:19:31.590
extension for distribution
outside the Chrome Web Store,

00:19:31.590 --> 00:19:33.180
you won't be able to do it
through Chrome anymore.

00:19:33.180 --> 00:19:35.600
You'll need to write something
on your own.

00:19:35.600 --> 00:19:39.660
Some time in Q1 2013, we're
looking at Manifest Version 1s

00:19:39.660 --> 00:19:42.010
not appearing in search
any longer.

00:19:42.010 --> 00:19:44.650
This is the point at which old
extensions are going to start

00:19:44.650 --> 00:19:46.610
seeing impacts from this.

00:19:46.610 --> 00:19:50.040
Some time in the middle of Q--
of 2013, Manifest Version 1

00:19:50.040 --> 00:19:52.640
items will simply be unpublished
from the store.

00:19:52.640 --> 00:19:54.480
We're going to be publishing
warnings about this.

00:19:54.480 --> 00:19:56.830
We're going to be sending
emails out about this.

00:19:56.830 --> 00:19:59.580
We're going to make it very
clear what's going on.

00:19:59.580 --> 00:20:02.620
And we're very much hoping that
we can get you guys to

00:20:02.620 --> 00:20:04.300
come along with us.

00:20:04.300 --> 00:20:09.810
In 2013, whenever we're happy
with the way things are going,

00:20:09.810 --> 00:20:12.380
we'll turn off Manifest
Version 1

00:20:12.380 --> 00:20:14.190
inside of Chrome, period.

00:20:14.190 --> 00:20:17.290
This means even extensions
that are loaded within--

00:20:17.290 --> 00:20:19.970
in Enterprise, for instance,
will simply not work anymore

00:20:19.970 --> 00:20:21.390
in new versions of Chrome.

00:20:21.390 --> 00:20:24.640
So we're definitely looking to
move people over relatively

00:20:24.640 --> 00:20:27.630
quickly for Manifest Version
1 to Manifest Version 2.

00:20:27.630 --> 00:20:29.400
We're really looking for
feedback about this.

00:20:29.400 --> 00:20:32.250
We want to know what the pain
points are so that we can make

00:20:32.250 --> 00:20:33.310
the system better.

00:20:33.310 --> 00:20:35.530
We've heard your feedback with
regard to templating.

00:20:35.530 --> 00:20:38.180
We think sandboxing is a
good alternative there.

00:20:38.180 --> 00:20:40.430
If there are other pain points
that are really causing

00:20:40.430 --> 00:20:43.380
problems in this migration, we
really want to hear about it

00:20:43.380 --> 00:20:46.020
so that we can fix it and make
it easy for you guys to

00:20:46.020 --> 00:20:49.370
migrate from one to the other.

00:20:49.370 --> 00:20:51.840
We've talked a little bit about
Manifest Version 2.

00:20:51.840 --> 00:20:53.400
It's a big change.

00:20:53.400 --> 00:20:56.150
It, however, has a lot of
benefits that we think are

00:20:56.150 --> 00:20:57.450
really valuable.

00:20:57.450 --> 00:21:01.100
And it also is going to enable
us to build new APIs that are

00:21:01.100 --> 00:21:02.080
more targeted.

00:21:02.080 --> 00:21:04.570
And these new APIs, we think,
are going to be really

00:21:04.570 --> 00:21:06.100
interesting for developers.

00:21:06.100 --> 00:21:08.270
Let's talk a little bit
about some of them.

00:21:08.270 --> 00:21:11.760
So, many of the APIs that we've
produced over the last

00:21:11.760 --> 00:21:14.760
three years in the extension
framework have been very much

00:21:14.760 --> 00:21:15.790
like chainsaws.

00:21:15.790 --> 00:21:16.500
They're large.

00:21:16.500 --> 00:21:17.320
They're powerful.

00:21:17.320 --> 00:21:19.870
But it's relatively easy to
sever a limb if you're not

00:21:19.870 --> 00:21:21.030
being careful.

00:21:21.030 --> 00:21:23.090
What we'd like to produce is
something much more like

00:21:23.090 --> 00:21:24.760
X-Acto knives or scalpels--

00:21:24.760 --> 00:21:27.760
something that's very fine in
detail that gives you the

00:21:27.760 --> 00:21:31.180
ability to do the things that
you need to do, but do it in a

00:21:31.180 --> 00:21:33.220
way that's much less dangerous,
that doesn't

00:21:33.220 --> 00:21:36.180
require the same permission set,
specifically with regard

00:21:36.180 --> 00:21:37.920
to host permission.

00:21:37.920 --> 00:21:40.170
What we also want to do,
however, is reduce the number

00:21:40.170 --> 00:21:42.250
of resources that are
used by extensions

00:21:42.250 --> 00:21:44.710
on an ongoing basis.

00:21:44.710 --> 00:21:46.210
You see here that I have--

00:21:46.210 --> 00:21:47.570
and I have a lot of extensions
installed.

00:21:47.570 --> 00:21:50.100
I've basically installed every
Google extension that I could

00:21:50.100 --> 00:21:53.070
find on the first couple of
pages of the Chrome Web Store.

00:21:53.070 --> 00:21:55.220
What we see here is, first
of all, it's relatively

00:21:55.220 --> 00:21:56.360
difficult to use.

00:21:56.360 --> 00:21:59.440
But if we look at the Task
Manager, we'll see that all of

00:21:59.440 --> 00:22:00.360
these extensions--

00:22:00.360 --> 00:22:03.100
even though they're doing
absolutely nothing right now--

00:22:03.100 --> 00:22:07.320
are taking up a large number of
resources, anywhere from 20

00:22:07.320 --> 00:22:09.510
to 30 meg, depending
on the extension.

00:22:09.510 --> 00:22:11.050
It isn't quite as bad
as it sounds.

00:22:11.050 --> 00:22:12.700
Much of this memory is
shared because of

00:22:12.700 --> 00:22:13.980
multi process model.

00:22:13.980 --> 00:22:16.650
But it's still much more than we
think extensions should be

00:22:16.650 --> 00:22:19.220
using when they're not doing
anything at all.

00:22:19.220 --> 00:22:21.250
We'd like to kill off
those processes.

00:22:21.250 --> 00:22:23.310
And we'd like to shrink the
amount of resource that's

00:22:23.310 --> 00:22:25.660
being used an ongoing basis.

00:22:25.660 --> 00:22:27.450
The mechanism we are looking
at for doing

00:22:27.450 --> 00:22:28.400
that is event pages.

00:22:28.400 --> 00:22:31.030
We published a blog post on
Chromium.org about this, I

00:22:31.030 --> 00:22:32.490
think, last week.

00:22:32.490 --> 00:22:35.670
The idea of event pages is that
they work very similarly

00:22:35.670 --> 00:22:36.810
to background pages.

00:22:36.810 --> 00:22:39.430
But they disappear when you're
not actually using them.

00:22:39.430 --> 00:22:41.700
So we can kill the
process entirely.

00:22:41.700 --> 00:22:43.900
This has a large number
of benefits.

00:22:43.900 --> 00:22:47.900
First of all, by killing the
process, we ensure that even

00:22:47.900 --> 00:22:50.340
if there's a leak somewhere in
your extension, by killing

00:22:50.340 --> 00:22:52.980
that background process, we
can also kill the leaks.

00:22:52.980 --> 00:22:56.270
So even if there's a leaky
extension, we reclaim all of

00:22:56.270 --> 00:22:59.440
those resources simply by
reaping the entire process.

00:22:59.440 --> 00:23:02.510
It also gives us the ability to
move to a more event-driven

00:23:02.510 --> 00:23:05.780
model, something that we think
is really going to be useful

00:23:05.780 --> 00:23:09.020
for low memory devices,
like Chrome OS.

00:23:09.020 --> 00:23:10.980
If you're looking at a
Chromebook, it's not going to

00:23:10.980 --> 00:23:13.250
be possible for you to load
hundreds and hundreds of

00:23:13.250 --> 00:23:15.610
extensions if each of them is
taking up memory in the

00:23:15.610 --> 00:23:18.320
background, regardless of
whether they're active or not.

00:23:18.320 --> 00:23:21.180
We want to make sure that on
these low resource devices

00:23:21.180 --> 00:23:23.750
that we point those resources
towards the things that you're

00:23:23.750 --> 00:23:26.480
actually doing as opposed to the
things you might be doing.

00:23:29.630 --> 00:23:30.830
Event pages are opt-in.

00:23:30.830 --> 00:23:32.090
And it's very straightforward.

00:23:32.090 --> 00:23:34.090
When you use the new background
page syntax, you

00:23:34.090 --> 00:23:35.740
simply write, persistent
false.

00:23:35.740 --> 00:23:37.390
So you set this flag to false.

00:23:37.390 --> 00:23:39.770
And at that point, your
background page will simply be

00:23:39.770 --> 00:23:42.670
killed when it's not doing
anything useful.

00:23:42.670 --> 00:23:44.410
The life cycle is as follows.

00:23:44.410 --> 00:23:47.160
We load the background
page on installation.

00:23:47.160 --> 00:23:49.890
At that point, we record all
of the events that are

00:23:49.890 --> 00:23:51.580
registered within the
background page.

00:23:51.580 --> 00:23:54.160
So your background page might
look something like this.

00:23:54.160 --> 00:23:56.050
It might be a main.js.

00:23:56.050 --> 00:23:57.950
You might register for
a couple of events.

00:23:57.950 --> 00:24:00.860
Chrome will remember and persist
all of these events.

00:24:00.860 --> 00:24:04.810
Then when your background page
is killed, we can start it up

00:24:04.810 --> 00:24:07.890
again based upon these events,
based upon user interaction.

00:24:07.890 --> 00:24:10.140
So in the middle, I register
for chrome

00:24:10.140 --> 00:24:11.780
browser action unclicked.

00:24:11.780 --> 00:24:14.070
Chrome will remember this, even
when the background page

00:24:14.070 --> 00:24:15.090
isn't there anymore.

00:24:15.090 --> 00:24:17.510
If I click on the browser
action, it'll restart the

00:24:17.510 --> 00:24:21.225
process, spin it back up again,
and execute or pass in

00:24:21.225 --> 00:24:24.790
this event so that I can execute
something useful.

00:24:24.790 --> 00:24:27.780
You'll see two new events,
chrome runtime on installed

00:24:27.780 --> 00:24:29.900
and chrome runtime on suspend.

00:24:29.900 --> 00:24:33.770
Chrome runtime on installed is
triggered on installation but

00:24:33.770 --> 00:24:35.210
also on every update.

00:24:35.210 --> 00:24:38.250
This gives you the ability to
determine whether or not the

00:24:38.250 --> 00:24:40.550
extension is being installed
for the first time, which

00:24:40.550 --> 00:24:44.630
gives you a good opportunity to
use the Chrome storage APIs

00:24:44.630 --> 00:24:47.650
in order to set some values, to
do some set up, to set some

00:24:47.650 --> 00:24:50.760
flags or whatever it is that
your extension actually needs.

00:24:50.760 --> 00:24:53.370
But on update, you can also
do things like migration.

00:24:53.370 --> 00:24:55.370
So if you're using index to be
in the background, you could

00:24:55.370 --> 00:24:56.670
at this point check the version

00:24:56.670 --> 00:24:57.870
of the current database.

00:24:57.870 --> 00:25:01.000
And if it's the old database
then migrate to the new one.

00:25:01.000 --> 00:25:02.680
So this, we think, is going
to give you some good

00:25:02.680 --> 00:25:06.505
opportunities for dealing with
these sorts of events that

00:25:06.505 --> 00:25:08.650
were difficult to deal
with in the past.

00:25:08.650 --> 00:25:11.340
Chrome runtime on suspend is
called when the background

00:25:11.340 --> 00:25:12.810
page is about to be killed.

00:25:12.810 --> 00:25:15.860
So when Chrome recognizes that
the background page isn't

00:25:15.860 --> 00:25:18.240
doing anything-- it doesn't have
any pop-ups open, you're

00:25:18.240 --> 00:25:20.150
not inspecting it at the moment,
it doesn't have any

00:25:20.150 --> 00:25:22.770
active network requests, and
things along these lines--

00:25:22.770 --> 00:25:24.930
will go ahead and send an
on suspend event to the

00:25:24.930 --> 00:25:26.060
background page.

00:25:26.060 --> 00:25:28.220
You'll have a little bit of time
here to do any sort of

00:25:28.220 --> 00:25:29.670
last minute saving.

00:25:29.670 --> 00:25:32.390
This isn't a good time to start
uploading 10 megs of

00:25:32.390 --> 00:25:34.170
data to an external server.

00:25:34.170 --> 00:25:35.790
You should be saving
as you go.

00:25:35.790 --> 00:25:38.560
Basically, you should be ready
to die as soon as this thing

00:25:38.560 --> 00:25:39.450
is called--

00:25:39.450 --> 00:25:41.190
or your process should
be ready to die.

00:25:41.190 --> 00:25:43.970
You, of course, should
not be ready to die.

00:25:43.970 --> 00:25:45.660
Chrome runtime on suspend
will be called.

00:25:45.660 --> 00:25:46.480
It'll execute.

00:25:46.480 --> 00:25:49.440
And then some arbitrary period
of time later, your process

00:25:49.440 --> 00:25:50.910
will be killed entirely.

00:25:50.910 --> 00:25:52.700
It'll be spun back up
again when any of

00:25:52.700 --> 00:25:55.520
these events are triggered.

00:25:55.520 --> 00:25:58.000
It's not, however, the case that
you can only respond to

00:25:58.000 --> 00:25:59.130
user driven events.

00:25:59.130 --> 00:26:01.120
Some of your writing extensions
that need to go out

00:26:01.120 --> 00:26:04.230
to the web, pull some data,
store it locally, and then be

00:26:04.230 --> 00:26:06.400
ready and responsive
for your users.

00:26:06.400 --> 00:26:09.320
We've then created an Alarms
API that works exactly for

00:26:09.320 --> 00:26:10.480
this use case.

00:26:10.480 --> 00:26:13.420
At some point in the future,
you can wake your extension

00:26:13.420 --> 00:26:16.830
back up, do some processing,
and then go back to sleep.

00:26:16.830 --> 00:26:19.410
For example, you can create
a period in minutes, which

00:26:19.410 --> 00:26:21.540
simply means that your extension
will be triggered

00:26:21.540 --> 00:26:23.550
every 10 minutes
at this point.

00:26:23.550 --> 00:26:25.960
Every 10 minutes, you can go out
to the web, pull some new

00:26:25.960 --> 00:26:29.140
information, store it locally,
and be ready for your user's

00:26:29.140 --> 00:26:31.620
response whenever-- or ready
to respond to your user

00:26:31.620 --> 00:26:34.400
whenever they actually interact
with your extension.

00:26:34.400 --> 00:26:38.100
You can do this as a one off,
as a repeating, or at some

00:26:38.100 --> 00:26:39.210
specific point in the future.

00:26:39.210 --> 00:26:42.180
We give you a lot
of options here.

00:26:42.180 --> 00:26:45.480
Another area in which we see
extensions actually requesting

00:26:45.480 --> 00:26:49.370
more permissions than they need
is keyboard shortcuts.

00:26:49.370 --> 00:26:51.480
Key bindings, at the moment,
are a big mess

00:26:51.480 --> 00:26:52.920
in extension land.

00:26:52.920 --> 00:26:56.500
To bind to a specific keyboard
shortcut, you have to request

00:26:56.500 --> 00:26:59.370
host permissions to all URLs,
so the entire internet.

00:26:59.370 --> 00:27:00.750
Then you inject a content
script that

00:27:00.750 --> 00:27:02.210
listens for key presses.

00:27:02.210 --> 00:27:04.580
And you really, really hope
that this content script

00:27:04.580 --> 00:27:06.985
doesn't actually interfere in
some way with the application

00:27:06.985 --> 00:27:10.180
that your user is running or get
overwritten in some way by

00:27:10.180 --> 00:27:12.170
the application user
is running.

00:27:12.170 --> 00:27:14.060
We can do much better
than this.

00:27:14.060 --> 00:27:16.690
Our attempt at doing better is
the keybindings API, which is

00:27:16.690 --> 00:27:18.370
currently an experimental.

00:27:18.370 --> 00:27:21.070
The keybindings API is a
declarative API that allows

00:27:21.070 --> 00:27:22.910
you to say, I want to respond.

00:27:22.910 --> 00:27:24.610
Or I have a couple
of commands.

00:27:24.610 --> 00:27:27.090
And these commands should be
associated with specific

00:27:27.090 --> 00:27:29.230
suggested keyboard shortcuts.

00:27:29.230 --> 00:27:29.900
This is--

00:27:29.900 --> 00:27:31.870
should be, I think, be
relatively straightforward.

00:27:31.870 --> 00:27:33.140
You define a list of commands.

00:27:33.140 --> 00:27:34.630
Each of the commands
has a description

00:27:34.630 --> 00:27:35.770
associated with it.

00:27:35.770 --> 00:27:38.720
And each of the commands has
a list of suggested keys.

00:27:38.720 --> 00:27:41.280
You can set up different
suggested keys for the default

00:27:41.280 --> 00:27:42.860
or for a specific platform.

00:27:42.860 --> 00:27:45.420
We think this gives you
a lot of flexibility.

00:27:45.420 --> 00:27:48.080
Inside of your extension will
look a little bit like this.

00:27:48.080 --> 00:27:51.160
You'll hook it into the on
command event of keybindings.

00:27:51.160 --> 00:27:53.010
And, at that point, you'll
get a string.

00:27:53.010 --> 00:27:55.250
And that string is going to be
the same string you defined in

00:27:55.250 --> 00:27:56.530
the manifest file.

00:27:56.530 --> 00:27:57.370
You'll get this command.

00:27:57.370 --> 00:27:59.960
You can respond to it
in some useful way.

00:27:59.960 --> 00:28:03.020
What you might have seen is
Execute Browser Action as a

00:28:03.020 --> 00:28:06.330
specific command that will
allow you to execute the

00:28:06.330 --> 00:28:09.430
pop-up or execute the On Clicked
event of your browser

00:28:09.430 --> 00:28:11.780
action with a keyboard
shortcut.

00:28:11.780 --> 00:28:14.110
This is something that hasn't
been possible before, even by

00:28:14.110 --> 00:28:15.350
injecting content scripts.

00:28:15.350 --> 00:28:17.350
And it's going to be a big
benefit, we think, of moving

00:28:17.350 --> 00:28:19.000
over to the keybindings API.

00:28:19.000 --> 00:28:21.470
You'll be able to, for instance,
just do a pop-up by

00:28:21.470 --> 00:28:24.330
executing some keyboard
shortcut.

00:28:24.330 --> 00:28:25.440
There are a couple
of to-dos here.

00:28:25.440 --> 00:28:26.400
It's not done.

00:28:26.400 --> 00:28:28.520
As you notice, it's
an experimental.

00:28:28.520 --> 00:28:30.820
Mac support is simply
nonexistent at the moment.

00:28:30.820 --> 00:28:31.520
We're working on it.

00:28:31.520 --> 00:28:33.170
But it's going to take
a little time.

00:28:33.170 --> 00:28:36.060
And we also don't have any UI
for dealing with conflicts.

00:28:36.060 --> 00:28:38.430
We have some UI for assigning
shortcuts.

00:28:38.430 --> 00:28:39.910
But it's just not there yet.

00:28:39.910 --> 00:28:42.350
We actually just implemented
saving last week.

00:28:42.350 --> 00:28:43.810
You could look at
it beforehand.

00:28:43.810 --> 00:28:47.020
But this week you can actually
save new keyboard shortcuts.

00:28:47.020 --> 00:28:47.760
So we're getting there.

00:28:47.760 --> 00:28:49.900
Slowly but surely.

00:28:49.900 --> 00:28:51.760
Let's talk a little bit
about network APIs.

00:28:51.760 --> 00:28:54.010
There a couple of really
interesting APIs that we've

00:28:54.010 --> 00:28:55.800
released over the last year.

00:28:55.800 --> 00:28:59.980
And the usage of those APIs has
surprised us in some ways

00:28:59.980 --> 00:29:02.985
but is also, we think, pointing
towards things that

00:29:02.985 --> 00:29:05.060
we can do in the future
to make things better.

00:29:05.060 --> 00:29:06.360
That future thing
is going to be a

00:29:06.360 --> 00:29:08.430
declarative web request API.

00:29:08.430 --> 00:29:10.280
To understand why that's
important and why that's

00:29:10.280 --> 00:29:12.610
valuable, let's first talk a
little bit about the web

00:29:12.610 --> 00:29:15.390
request API that exists today.

00:29:15.390 --> 00:29:17.150
The web request API looks
something like this.

00:29:17.150 --> 00:29:19.810
In this case, I went to block
my user from going to

00:29:19.810 --> 00:29:20.910
malicious websites.

00:29:20.910 --> 00:29:25.180
As we all know, malicious
websites have an evil=1 as the

00:29:25.180 --> 00:29:26.770
last get parameter.

00:29:26.770 --> 00:29:27.650
I mean, it's great.

00:29:27.650 --> 00:29:29.750
It's really useful that they do
this because it allows us

00:29:29.750 --> 00:29:31.520
to block their requests.

00:29:31.520 --> 00:29:33.150
Blocking their requests looks
something like this,

00:29:33.150 --> 00:29:35.330
chrome.webreques
t.onbeforerequest--

00:29:35.330 --> 00:29:37.110
so before the request is
actually sent out of my

00:29:37.110 --> 00:29:39.450
computer to do something
useful.

00:29:39.450 --> 00:29:41.860
You see the last item here
contains a few flags, in this

00:29:41.860 --> 00:29:42.890
case blocking.

00:29:42.890 --> 00:29:45.610
This is the first synchronous
API that we've created.

00:29:45.610 --> 00:29:48.650
And the synchronicity of
the API is a little bit

00:29:48.650 --> 00:29:50.180
problematic for us.

00:29:50.180 --> 00:29:52.020
It's problematic for the
following reasons.

00:29:52.020 --> 00:29:53.880
Chrome looks more or
less like this.

00:29:53.880 --> 00:29:56.630
We have a browser process that
manages a wide variety of

00:29:56.630 --> 00:29:58.310
renderer processes.

00:29:58.310 --> 00:30:01.800
Each tab, more or less, has
its own renderer process.

00:30:01.800 --> 00:30:05.510
So, if a web page wants to load
a URL, if they're using a

00:30:05.510 --> 00:30:09.000
web request API, the web page
will say, OK, I'd like to load

00:30:09.000 --> 00:30:09.830
this image.

00:30:09.830 --> 00:30:11.860
That request will be sent
up to the browser.

00:30:11.860 --> 00:30:14.260
The browser they need to make a
decision should the web page

00:30:14.260 --> 00:30:15.590
load the image or not.

00:30:15.590 --> 00:30:19.080
To make that decision, something
it sends a message

00:30:19.080 --> 00:30:20.110
down to the extension.

00:30:20.110 --> 00:30:21.790
The extension--

00:30:21.790 --> 00:30:24.980
or the message then hops from
c to JavaScript in order to

00:30:24.980 --> 00:30:27.640
make the determination to do
something useful to execute

00:30:27.640 --> 00:30:30.380
this code up above and then
sends that information back to

00:30:30.380 --> 00:30:31.730
the browser process.

00:30:31.730 --> 00:30:34.500
In parallel, it's sending these
requests out to all the

00:30:34.500 --> 00:30:37.500
extensions that have registered
for a web request

00:30:37.500 --> 00:30:40.630
that filters into this
specific request.

00:30:40.630 --> 00:30:43.050
Sending all of this information
back and forth

00:30:43.050 --> 00:30:45.570
between the processes
is costly.

00:30:45.570 --> 00:30:47.980
It's more costly than we
actually expected it to be.

00:30:47.980 --> 00:30:50.140
If you go to Chrome histograms,
you can see

00:30:50.140 --> 00:30:52.870
exactly how costly it
is on your computer.

00:30:52.870 --> 00:30:54.570
I created a bit of a
torture test here.

00:30:54.570 --> 00:30:56.540
But, you see-- actually, you
probably can't see because

00:30:56.540 --> 00:30:57.700
it's really small.

00:30:57.700 --> 00:31:00.720
But at the bottom here, the
longest request or the longest

00:31:00.720 --> 00:31:04.700
wait between sending a message
from my page to the extension

00:31:04.700 --> 00:31:06.980
and back was over two seconds.

00:31:06.980 --> 00:31:08.070
Now, this isn't typical.

00:31:08.070 --> 00:31:10.460
Most of the requests are
happening in well under 100

00:31:10.460 --> 00:31:11.440
milliseconds.

00:31:11.440 --> 00:31:14.280
But over two seconds to
process a request is

00:31:14.280 --> 00:31:15.110
incredible.

00:31:15.110 --> 00:31:17.300
That's much longer than it
should actually take to load

00:31:17.300 --> 00:31:18.890
the resource in the
first place.

00:31:18.890 --> 00:31:20.660
We need to do better
than this.

00:31:20.660 --> 00:31:22.400
And we think we can.

00:31:22.400 --> 00:31:27.780
The declarative web request API
is a declarative mechanism

00:31:27.780 --> 00:31:30.620
for determining whether or not a
request should be blocked or

00:31:30.620 --> 00:31:33.210
redirected or anything
along these lines.

00:31:33.210 --> 00:31:35.660
You declare a declarative
web request permission.

00:31:35.660 --> 00:31:38.690
And you create a series
of rules.

00:31:38.690 --> 00:31:43.370
You might do this in the on
install event of your

00:31:43.370 --> 00:31:44.710
background page.

00:31:44.710 --> 00:31:45.720
You create a rule.

00:31:45.720 --> 00:31:48.340
Rules contain conditions
and actions.

00:31:48.340 --> 00:31:50.640
If the request matches
the condition--

00:31:50.640 --> 00:31:53.110
so if they're going to
evil.example.com--

00:31:53.110 --> 00:31:55.280
then we're going to
block the request.

00:31:55.280 --> 00:31:58.740
Once we've created this large
array of rules, we add all of

00:31:58.740 --> 00:32:01.310
the rules into Chrome.

00:32:01.310 --> 00:32:03.440
And we can do this incredibly
efficiently.

00:32:03.440 --> 00:32:06.250
Adding the rules to Chrome
standardizes the way that we

00:32:06.250 --> 00:32:09.550
deal with network requests,
giving us the ability to very

00:32:09.550 --> 00:32:11.870
efficiently store the
information in the browser

00:32:11.870 --> 00:32:14.200
process as opposed to pushing
everything down to the

00:32:14.200 --> 00:32:15.560
extension process.

00:32:15.560 --> 00:32:16.920
This has a couple
of advantages.

00:32:16.920 --> 00:32:18.870
First, we don't have
to do so much IPC

00:32:18.870 --> 00:32:20.620
messaging between processes.

00:32:20.620 --> 00:32:24.920
But second, because we've
defined a single mechanism for

00:32:24.920 --> 00:32:29.590
declaring these sorts of rules,
we can do it very, very

00:32:29.590 --> 00:32:32.090
efficiently indeed.

00:32:32.090 --> 00:32:34.430
You can set conditions
on basically every

00:32:34.430 --> 00:32:35.500
piece of the URL.

00:32:35.500 --> 00:32:36.790
So you can look for ports.

00:32:36.790 --> 00:32:38.280
You can look for paths.

00:32:38.280 --> 00:32:40.140
And you can look for
query strings.

00:32:40.140 --> 00:32:42.140
You can also look at the
entire URL if that

00:32:42.140 --> 00:32:44.326
suits your use case.

00:32:44.326 --> 00:32:47.280
We haven't yet added regex
for the entire URL.

00:32:47.280 --> 00:32:48.470
We're working on that.

00:32:48.470 --> 00:32:50.970
What we have added, however, is
a variety of conditions--

00:32:50.970 --> 00:32:53.630
or, I'm sorry, a variety
of actions.

00:32:53.630 --> 00:32:56.210
The actions that are associated
with these URLs

00:32:56.210 --> 00:32:57.810
are, for instance,
cancel requests.

00:32:57.810 --> 00:32:59.080
This is probably the
most common.

00:32:59.080 --> 00:33:00.790
You simply don't want
to make this request

00:33:00.790 --> 00:33:01.450
in the first place.

00:33:01.450 --> 00:33:03.610
You don't want to send
any information out.

00:33:03.610 --> 00:33:05.470
What we also all you
to do is redirect.

00:33:05.470 --> 00:33:08.610
And you can redirect not only to
a specific URL, but you can

00:33:08.610 --> 00:33:10.270
redirect using a regex.

00:33:10.270 --> 00:33:13.530
For instance, you could redirect
all HTTP requests to

00:33:13.530 --> 00:33:16.550
the exact same request
on HTTPS.

00:33:16.550 --> 00:33:18.800
Unfortunately, it isn't quite
that simple, which is why

00:33:18.800 --> 00:33:20.470
HTTPS Everywhere exists.

00:33:20.470 --> 00:33:23.850
But we think this is going to
give extensions like HTTPS

00:33:23.850 --> 00:33:27.340
Everywhere the ability to create
this really complicated

00:33:27.340 --> 00:33:30.520
rule set without actually
jumping into JavaScript in

00:33:30.520 --> 00:33:31.770
order to make that
determination.

00:33:35.060 --> 00:33:37.450
We also give you the ability
to deal with the request

00:33:37.450 --> 00:33:39.810
headers and the response headers
that you can set and

00:33:39.810 --> 00:33:43.870
remove headers simply based upon
the URL that the user is

00:33:43.870 --> 00:33:47.010
actually going to.

00:33:47.010 --> 00:33:48.310
You can ignore rules.

00:33:48.310 --> 00:33:50.540
So if you're familiar at all
with email, you've probably

00:33:50.540 --> 00:33:51.640
set up a bunch of rules.

00:33:51.640 --> 00:33:54.940
And you have things like, if
this, then do this and ignore

00:33:54.940 --> 00:33:56.210
the rest of the rules.

00:33:56.210 --> 00:33:58.050
This allows you to set
a priority with

00:33:58.050 --> 00:33:59.010
each of these rules.

00:33:59.010 --> 00:34:01.680
So when you create really
complex rule sets, multiple

00:34:01.680 --> 00:34:02.620
things might match.

00:34:02.620 --> 00:34:04.910
And you want to make sure that
the right thing actually

00:34:04.910 --> 00:34:06.720
executes based upon
that action.

00:34:06.720 --> 00:34:08.400
So you set a priority
with the rule.

00:34:08.400 --> 00:34:10.820
And at the end of your actions,
you can say, ignore

00:34:10.820 --> 00:34:13.159
any other rules that are lower
priority than this one.

00:34:17.659 --> 00:34:21.130
The act of tab permission is the
last new thing that I want

00:34:21.130 --> 00:34:22.500
to talk about today.

00:34:22.500 --> 00:34:25.219
The active tab permission is
something that we think is

00:34:25.219 --> 00:34:26.820
going to be really
quite powerful.

00:34:26.820 --> 00:34:29.340
It's something that we, I think,
are very excited about.

00:34:29.340 --> 00:34:33.530
What it does is allow you to
deal with specific hosts

00:34:33.530 --> 00:34:36.449
without requesting permission
for those hosts.

00:34:36.449 --> 00:34:39.790
We see a lot of extensions out
there that really only need to

00:34:39.790 --> 00:34:42.810
interact with the page the user
is currently viewing.

00:34:42.810 --> 00:34:45.440
For example, Google has a
dictionary extension, which

00:34:45.440 --> 00:34:48.900
allows you to grab a word out
of a page and give you a

00:34:48.900 --> 00:34:50.030
definition for that word.

00:34:50.030 --> 00:34:51.219
It's incredibly useful.

00:34:51.219 --> 00:34:54.120
But in order to act, it injects
content scripts into

00:34:54.120 --> 00:34:56.900
every page that you go
to and then listens

00:34:56.900 --> 00:34:58.270
for a browser action.

00:34:58.270 --> 00:35:01.180
When you click on the browser
action or use a context menu,

00:35:01.180 --> 00:35:04.810
it then grabs the thing that
you've currently selected,

00:35:04.810 --> 00:35:06.500
does something useful with
it, and displays

00:35:06.500 --> 00:35:07.820
the result to you.

00:35:07.820 --> 00:35:10.170
It has to request host
permissions to every website

00:35:10.170 --> 00:35:12.280
on the net in order
to do that.

00:35:12.280 --> 00:35:15.850
Active tab permission would give
it the ability to, based

00:35:15.850 --> 00:35:19.200
upon a user's gesture, inject
script into a page that it

00:35:19.200 --> 00:35:21.150
hasn't requested permissions
for.

00:35:21.150 --> 00:35:23.310
In this case, I would request
permission for

00:35:23.310 --> 00:35:25.440
active tab and tabs.

00:35:25.440 --> 00:35:27.130
You'll note that I'm not
requesting any host

00:35:27.130 --> 00:35:28.980
permissions at this point.

00:35:28.980 --> 00:35:31.540
I can, however, listen
for a browser action.

00:35:31.540 --> 00:35:34.560
I could also listen for a
context menu and act upon that

00:35:34.560 --> 00:35:37.340
action by injecting script
into this page.

00:35:37.340 --> 00:35:39.760
We're using the user's
interaction with either the

00:35:39.760 --> 00:35:44.040
browser action or the context
menu in order to give the

00:35:44.040 --> 00:35:46.970
extension the ability to inject
script into this new

00:35:46.970 --> 00:35:50.230
context, even though it hasn't
explicitly requested

00:35:50.230 --> 00:35:51.490
permission for it.

00:35:51.490 --> 00:35:53.240
We think this is going to be
really useful, not only for

00:35:53.240 --> 00:35:55.430
the Google dictionary extension
but for the wide

00:35:55.430 --> 00:35:58.260
variety of extensions that we
see in the Chrome Web Store

00:35:58.260 --> 00:36:01.160
that are looking for exactly
this sort of functionality.

00:36:01.160 --> 00:36:04.120
We see many extensions that
really don't need permission

00:36:04.120 --> 00:36:04.990
for the entire web.

00:36:04.990 --> 00:36:07.710
But they don't have any other
mechanism of doing it.

00:36:07.710 --> 00:36:09.520
We'd love to see people
experimenting with this.

00:36:09.520 --> 00:36:11.940
It's in canary right now.

00:36:11.940 --> 00:36:16.070
It'll be in dev relatively
soon.

00:36:16.070 --> 00:36:18.150
So we've talked about a wide
variety of things.

00:36:18.150 --> 00:36:20.720
What do we actually want
to see happen?

00:36:20.720 --> 00:36:23.460
And what do we think that we can
do together as a community

00:36:23.460 --> 00:36:25.950
in order to strengthen
this ecosystem?

00:36:25.950 --> 00:36:29.230
The first thing is to really
take a hard look at Manifest

00:36:29.230 --> 00:36:32.810
Version 2 and start migrating
extensions over to it.

00:36:32.810 --> 00:36:36.170
Manifest Version 2 gives us
really good guarantees about

00:36:36.170 --> 00:36:39.410
the way that the extension can
function and the security that

00:36:39.410 --> 00:36:40.370
comes along with that.

00:36:40.370 --> 00:36:44.070
If we ban inline JavaScript,
there's a huge win associated

00:36:44.070 --> 00:36:47.200
with that, not only for us but
also for the users that are

00:36:47.200 --> 00:36:49.340
using extensions at the
end of the day.

00:36:49.340 --> 00:36:50.640
They get a safer ecosystem.

00:36:50.640 --> 00:36:55.190
And they can more easily install
extensions with the

00:36:55.190 --> 00:36:57.560
understanding that those
extensions are safe.

00:36:57.560 --> 00:36:59.960
We'd love to see people start
migrating over to Manifest

00:36:59.960 --> 00:37:02.590
Version 2 and, as I said,
talking to us

00:37:02.590 --> 00:37:03.780
about the pain points.

00:37:03.780 --> 00:37:06.690
We've really heard what people
have said with regard to eval.

00:37:06.690 --> 00:37:08.400
We've created a work
around for that.

00:37:08.400 --> 00:37:10.540
That's the model that we'd like
to see going forward.

00:37:10.540 --> 00:37:13.710
We really want to understand
what the problems are that you

00:37:13.710 --> 00:37:15.950
guys are going to face when
you're building extensions in

00:37:15.950 --> 00:37:20.060
the future under these
new restrictions.

00:37:20.060 --> 00:37:22.930
You can report issues either
by filing a bug at

00:37:22.930 --> 00:37:27.530
new.crbug.com or by hopping onto
the Chromium extensions

00:37:27.530 --> 00:37:28.500
mailing list.

00:37:28.500 --> 00:37:29.550
So you can send an email
to chromium-extensi

00:37:29.550 --> 00:37:34.140
ons@chromium.org or subscribe
to the mailing list yourself

00:37:34.140 --> 00:37:35.440
if you'd like to do that.

00:37:35.440 --> 00:37:38.530
That's via groups.google.com.

00:37:38.530 --> 00:37:41.090
We'd then like for you to take
a look at the new APIs that

00:37:41.090 --> 00:37:41.940
are coming out.

00:37:41.940 --> 00:37:45.620
In the past, we've had the
concept of experimental APIs.

00:37:45.620 --> 00:37:48.010
We're going to start doing
away with that slowly.

00:37:48.010 --> 00:37:51.020
Instead, we're going to start
experimenting via channels.

00:37:51.020 --> 00:37:54.250
That is, an API will be
available in dev but not in

00:37:54.250 --> 00:37:56.850
beta or beta but not stable.

00:37:56.850 --> 00:37:59.760
This, I think, will give us a
much larger audience for the

00:37:59.760 --> 00:38:01.240
new APIs that are coming out.

00:38:01.240 --> 00:38:05.790
Instead of only targeting the
users that have set the

00:38:05.790 --> 00:38:08.190
experimental flag-- that means
they've gone into flags,

00:38:08.190 --> 00:38:10.650
they've set experimental and so
on, which is a very small

00:38:10.650 --> 00:38:12.760
number of people indeed--

00:38:12.760 --> 00:38:14.350
you'll be able to target
everyone who is

00:38:14.350 --> 00:38:15.200
on a certain channel.

00:38:15.200 --> 00:38:18.530
So everyone using dev can start
installing extensions

00:38:18.530 --> 00:38:20.870
that are using these new
privileges or the new

00:38:20.870 --> 00:38:22.700
extension APIs that
are coming out.

00:38:22.700 --> 00:38:25.920
And as soon as that moves to
beta, your audience broadens

00:38:25.920 --> 00:38:27.030
even further.

00:38:27.030 --> 00:38:29.090
We think this will give you the
ability to start playing

00:38:29.090 --> 00:38:32.190
around with extension APIs
earlier without forcing your

00:38:32.190 --> 00:38:34.150
users to do something
that they're not at

00:38:34.150 --> 00:38:34.830
all comfortable with.

00:38:34.830 --> 00:38:38.110
That is going in deep into
Chrome and setting some sort

00:38:38.110 --> 00:38:40.480
of flag that they don't
understand.

00:38:40.480 --> 00:38:44.010
Finally, again, we'd really love
to hear what the issues

00:38:44.010 --> 00:38:47.330
are, what the pain points are,
what we can address, and what

00:38:47.330 --> 00:38:50.260
we can address together, what
the things are that are really

00:38:50.260 --> 00:38:52.450
going to be problematic going
forward because we want to

00:38:52.450 --> 00:38:53.560
solve these things.

00:38:53.560 --> 00:38:57.060
We want people to start using
the new Manifest version and

00:38:57.060 --> 00:38:58.260
the new APIs.

00:38:58.260 --> 00:39:00.540
And that's simply not going to
happen if there are blockers.

00:39:00.540 --> 00:39:02.480
So we want to understand
those blockers.

00:39:02.480 --> 00:39:04.480
And we want to fix them to
the best of our ability.

00:39:07.160 --> 00:39:09.570
You can contact me at
any of these places.

00:39:09.570 --> 00:39:14.600
So I'm on Twitter, I'm on G+,
that's my website on GitHub.

00:39:14.600 --> 00:39:16.630
Or you can send me an email
personally, mkwst@google.com.

00:39:19.390 --> 00:39:20.790
I'd be happy to hear from you.

00:39:20.790 --> 00:39:22.830
And I'd be happy to hear from
now if you have any questions

00:39:22.830 --> 00:39:25.340
or comments.

00:39:25.340 --> 00:39:30.100
[APPLAUSE]

00:39:30.100 --> 00:39:30.420
Sorry.

00:39:30.420 --> 00:39:32.100
There are microphones
in the middle.

00:39:32.100 --> 00:39:33.430
So if you can walk over,
then everyone

00:39:33.430 --> 00:39:36.475
can hear the questions.

00:39:36.475 --> 00:39:38.810
AUDIENCE: So I have two
questions, if that's OK.

00:39:38.810 --> 00:39:39.912
MIKE WEST: Yeah, that's fine.

00:39:39.912 --> 00:39:40.200
AUDIENCE: Cool.

00:39:40.200 --> 00:39:44.820
So what's the-- but with these
background pages that die when

00:39:44.820 --> 00:39:45.180
they're not--

00:39:45.180 --> 00:39:47.000
MIKE WEST: Event pages, yes.

00:39:47.000 --> 00:39:48.440
AUDIENCE: What's the preferred
practice for push

00:39:48.440 --> 00:39:50.600
notifications to Chrome
extensions?

00:39:50.600 --> 00:39:52.610
MIKE WEST: Push notifications
will be events

00:39:52.610 --> 00:39:53.520
just like any other.

00:39:53.520 --> 00:39:55.280
That is, you can subscribe
to them.

00:39:55.280 --> 00:39:57.260
Chrome will recognize that
you've subscribed to them.

00:39:57.260 --> 00:40:01.110
And when one comes in, you'll
get an event notification in

00:40:01.110 --> 00:40:03.350
exactly the same way that
you would before.

00:40:03.350 --> 00:40:04.600
There really should
be very little

00:40:04.600 --> 00:40:06.200
difference with event pages.

00:40:06.200 --> 00:40:08.730
It's just subscribing to events
and dealing with that

00:40:08.730 --> 00:40:09.240
subscription.

00:40:09.240 --> 00:40:10.560
AUDIENCE: OK, cool.

00:40:10.560 --> 00:40:14.470
My other question is, I can't
help but notice some parallels

00:40:14.470 --> 00:40:18.186
between, like, malicious Chrome
applications being out

00:40:18.186 --> 00:40:20.020
there and malicious Android
applications.

00:40:20.020 --> 00:40:23.610
And the Android team at Google
has made Bouncer, which for

00:40:23.610 --> 00:40:26.770
those who aren't familiar, it's
a dynamic analysis tool

00:40:26.770 --> 00:40:28.430
that runs your Android code.

00:40:28.430 --> 00:40:31.475
And if it detects malicious
behavior, it

00:40:31.475 --> 00:40:32.540
rejects you, basically.

00:40:32.540 --> 00:40:35.820
Do you see anything like this
in the future for Chrome

00:40:35.820 --> 00:40:37.260
extensions?

00:40:37.260 --> 00:40:38.970
MIKE WEST: As I said, I think
we're pretty happy with our

00:40:38.970 --> 00:40:41.660
ability to deal with malicious
Chrome extensions, the

00:40:41.660 --> 00:40:44.980
extensions that are actually
doing damage intentionally.

00:40:44.980 --> 00:40:47.240
The thing that we find much more
difficult to deal with

00:40:47.240 --> 00:40:50.470
are the benign extensions that
are doing really good things

00:40:50.470 --> 00:40:52.450
but are doing them in
dangerous ways.

00:40:52.450 --> 00:40:55.020
These sorts of things, we think,
are better addressed

00:40:55.020 --> 00:40:59.150
simply by applying a policy to
the extensions that forces

00:40:59.150 --> 00:41:02.160
them to do things
the right way.

00:41:02.160 --> 00:41:04.010
I hope that answers
your question.

00:41:04.010 --> 00:41:04.490
AUDIENCE: Sounds good.

00:41:04.490 --> 00:41:05.030
Thanks.

00:41:05.030 --> 00:41:06.280
MIKE WEST: Thank you.

00:41:08.980 --> 00:41:12.960
AUDIENCE: Are there any plans
to have tighter integration

00:41:12.960 --> 00:41:17.100
for having my web application
detect that you have an

00:41:17.100 --> 00:41:19.070
extension installed and
be able to have

00:41:19.070 --> 00:41:20.080
them communicate together?

00:41:20.080 --> 00:41:22.980
Because right now, if I want
to pass information between

00:41:22.980 --> 00:41:25.840
extension and my page, I have to
use an inner HTML with some

00:41:25.840 --> 00:41:27.430
random element on the page.

00:41:27.430 --> 00:41:29.280
MIKE WEST: I mean, if you have
an extension that should

00:41:29.280 --> 00:41:32.340
interact in some way with
a page, you can have an

00:41:32.340 --> 00:41:34.840
interaction point--

00:41:34.840 --> 00:41:36.820
well, I mean, you can send
messages to the extension.

00:41:36.820 --> 00:41:40.190
So if you have a defined API,
you can send messages over.

00:41:40.190 --> 00:41:42.780
You would have to have
that endpoint as a

00:41:42.780 --> 00:41:44.190
web-accessible resource.

00:41:44.190 --> 00:41:47.280
So that's where the new
stuff would come in.

00:41:47.280 --> 00:41:49.770
What we would also suggest is
that you use the inline

00:41:49.770 --> 00:41:50.870
install mechanism.

00:41:50.870 --> 00:41:54.290
That would actually enable you
to install the extension if it

00:41:54.290 --> 00:41:55.870
isn't already installed
on the website.

00:41:55.870 --> 00:41:58.290
So you could prompt the user and
then install it directly

00:41:58.290 --> 00:42:00.530
from the page without hopping
over to the web store.

00:42:00.530 --> 00:42:02.115
AUDIENCE: And one more
question is, is

00:42:02.115 --> 00:42:05.070
there any plans to--

00:42:05.070 --> 00:42:09.310
for example, we wrote a Chrome
extension that would let users

00:42:09.310 --> 00:42:11.490
give us feedback about an
application or if they

00:42:11.490 --> 00:42:14.310
experienced a bug with our
application, they could send

00:42:14.310 --> 00:42:16.470
us a screen shot basically of
what they were looking at when

00:42:16.470 --> 00:42:17.210
it happened.

00:42:17.210 --> 00:42:20.770
We wanted to be able to get
access to the console log from

00:42:20.770 --> 00:42:22.950
the extension so that we could
see what error they got.

00:42:22.950 --> 00:42:25.610
Is there any plans to get that
kind of information available?

00:42:25.610 --> 00:42:27.200
MIKE WEST: Within your
background page, you should be

00:42:27.200 --> 00:42:30.310
able to use window.onerror in
the exact same way that you do

00:42:30.310 --> 00:42:31.320
on web pages.

00:42:31.320 --> 00:42:33.570
That would give you any
errors that happens.

00:42:33.570 --> 00:42:36.310
And you'd be able to report
those in the same way that you

00:42:36.310 --> 00:42:37.530
can on the open web.

00:42:37.530 --> 00:42:40.100
AUDIENCE: But not like, for
example, informational

00:42:40.100 --> 00:42:43.410
messages, debug messages
we might output.

00:42:43.410 --> 00:42:45.810
MIKE WEST: No, if you're
outputting the messages, then

00:42:45.810 --> 00:42:48.310
you could package those
up in some way

00:42:48.310 --> 00:42:49.430
and save them locally.

00:42:49.430 --> 00:42:51.400
And then if an error occurs,
you could send them.

00:42:51.400 --> 00:42:54.910
But there's no mechanism that
the extension framework itself

00:42:54.910 --> 00:42:56.475
gives you to make
that possible.

00:42:56.475 --> 00:42:56.860
MIKE WEST: Got you.

00:42:56.860 --> 00:42:57.340
Thanks.

00:42:57.340 --> 00:42:57.500
MIKE WEST: Yeah.

00:42:57.500 --> 00:42:58.750
No worries.

00:43:00.740 --> 00:43:04.000
AUDIENCE: As the Android is
having the Chrome browser, do

00:43:04.000 --> 00:43:05.960
you guys have any plans
for building the

00:43:05.960 --> 00:43:08.300
extension for the Android?

00:43:08.300 --> 00:43:10.110
MIKE WEST: There's nothing to
announce at this point.

00:43:10.110 --> 00:43:11.050
It's difficult.

00:43:11.050 --> 00:43:14.866
And it's difficult.

00:43:14.866 --> 00:43:17.540
AUDIENCE: OK, thanks.

00:43:17.540 --> 00:43:18.460
AUDIENCE: Nice talk.

00:43:18.460 --> 00:43:21.480
I have a question about
the permission.

00:43:21.480 --> 00:43:23.610
It's really cool to have
permissions and extensions.

00:43:23.610 --> 00:43:27.000
That's very cool what
has been done.

00:43:27.000 --> 00:43:30.220
But for the normal user,
everyone's saying-- you know

00:43:30.220 --> 00:43:31.930
that when you have in Chrome Web
Store, you have all these

00:43:31.930 --> 00:43:34.030
permissions saying, old
browser history,

00:43:34.030 --> 00:43:35.120
every single thing.

00:43:35.120 --> 00:43:37.750
Is that going to be taken
care of as well?

00:43:37.750 --> 00:43:40.800
Like the whole point of us
putting all these permissions

00:43:40.800 --> 00:43:42.490
in our extensions right now,
it's going to be more work for

00:43:42.490 --> 00:43:44.020
us to figure out we need.

00:43:44.020 --> 00:43:47.490
But it would be cool if the
Chrome app store says, oh,

00:43:47.490 --> 00:43:48.990
this user's using web sockets.

00:43:48.990 --> 00:43:54.070
Or this user's using those kind
of new HTML technologies

00:43:54.070 --> 00:43:57.760
that you're exposing this
website or exposing this

00:43:57.760 --> 00:43:58.870
hacker website and
stuff like that.

00:43:58.870 --> 00:44:01.460
MIKE WEST: I think what I should
have made clear earlier

00:44:01.460 --> 00:44:04.590
is that by not requesting host
permissions, we can actually

00:44:04.590 --> 00:44:07.610
make the permission messages
much less scary.

00:44:07.610 --> 00:44:09.580
Instead of requesting permission
to the entire

00:44:09.580 --> 00:44:13.320
internet by having, you know,
all URLs as part of your host

00:44:13.320 --> 00:44:16.370
permissions, if you only
request active tab--

00:44:16.370 --> 00:44:19.080
because that always goes through
a user gesture--

00:44:19.080 --> 00:44:20.650
we actually don't have
to show a permission

00:44:20.650 --> 00:44:21.710
warning at that point.

00:44:21.710 --> 00:44:24.990
The permission is explicitly
granted by the user when they

00:44:24.990 --> 00:44:26.540
directly interact with
your extension.

00:44:26.540 --> 00:44:27.800
AUDIENCE: That's
on the timeline

00:44:27.800 --> 00:44:29.900
to fix up the messages.

00:44:29.900 --> 00:44:31.870
MIKE WEST: It's on the timeline
in that we're going

00:44:31.870 --> 00:44:34.430
to create new APIs that
are less dangerous.

00:44:34.430 --> 00:44:37.700
And those new APIs will come
with less scary permission

00:44:37.700 --> 00:44:39.940
messages because they simply
are less scary.

00:44:39.940 --> 00:44:43.320
AUDIENCE: And my next question
is, I like the on suspend and

00:44:43.320 --> 00:44:45.890
on install, because before we
used to do them version check

00:44:45.890 --> 00:44:47.030
all the time.

00:44:47.030 --> 00:44:49.710
And for the on install, is there
a way to know if it's

00:44:49.710 --> 00:44:52.880
updated or installed without
doing a local storage check?

00:44:52.880 --> 00:44:54.930
MIKE WEST: No, you would have
to set something locally.

00:44:54.930 --> 00:44:56.680
AUDIENCE: How about
the on suspend?

00:44:56.680 --> 00:44:59.170
Is there a way to revoke
suspension?

00:44:59.170 --> 00:44:59.880
MIKE WEST: No.

00:44:59.880 --> 00:45:01.420
AUDIENCE: So we can't
do event preval--

00:45:01.420 --> 00:45:05.130
MIKE WEST: No, if your extension
is suspended, it's

00:45:05.130 --> 00:45:07.635
going to be suspended unless the
user interacts with it in

00:45:07.635 --> 00:45:10.850
some way or unless it's being
kept alive by either having a

00:45:10.850 --> 00:45:11.990
long network request --

00:45:11.990 --> 00:45:14.170
AUDIENCE: So there's no way to
wake it up instantly, like--

00:45:14.170 --> 00:45:15.450
MIKE WEST: That would
be the alarms API.

00:45:15.450 --> 00:45:17.740
So you can say that at some
point in the future, I want to

00:45:17.740 --> 00:45:18.930
wake up again.

00:45:18.930 --> 00:45:21.760
So inside of the on suspend
event , you could certainly

00:45:21.760 --> 00:45:23.080
say, you know, in five minutes,

00:45:23.080 --> 00:45:24.530
wake me up to do something.

00:45:24.530 --> 00:45:27.322
But that would be
your mechanism.

00:45:27.322 --> 00:45:27.920
AUDIENCE: OK, thank you.

00:45:27.920 --> 00:45:29.201
MIKE WEST: Thank you.

00:45:29.201 --> 00:45:29.630
AUDIENCE: Hi.

00:45:29.630 --> 00:45:33.200
Are there any updates on
detecting when a user

00:45:33.200 --> 00:45:35.200
uninstalls an extension?

00:45:35.200 --> 00:45:37.410
MIKE WEST: None that
I know of, no.

00:45:37.410 --> 00:45:39.560
That's definitely something
that we can talk about.

00:45:39.560 --> 00:45:43.192
I'd suggest, if there's not
already a bug filed, file a

00:45:43.192 --> 00:45:44.240
bug and send them to me.

00:45:44.240 --> 00:45:44.970
AUDIENCE: It's there.

00:45:44.970 --> 00:45:45.970
MIKE WEST: OK.

00:45:45.970 --> 00:45:47.520
Send me the ID, if
you don't mind.

00:45:47.520 --> 00:45:48.800
AUDIENCE: I can do that.

00:45:48.800 --> 00:45:49.490
MIKE WEST: I'll take
a look at it.

00:45:49.490 --> 00:45:49.880
Thank you.

00:45:49.880 --> 00:45:50.560
AUDIENCE: Thank you.

00:45:50.560 --> 00:45:51.810
MIKE WEST: Thank you.

00:45:55.280 --> 00:45:56.890
AUDIENCE: Question about
potentially selling

00:45:56.890 --> 00:45:59.890
extensions, do you-- is there a
plan in the store to extend

00:45:59.890 --> 00:46:02.060
the apps, like purchase ability

00:46:02.060 --> 00:46:04.620
APIs into Chrome extension?

00:46:04.620 --> 00:46:06.470
MIKE WEST: There's nothing
to announce.

00:46:06.470 --> 00:46:08.650
I don't know of any plans.

00:46:08.650 --> 00:46:12.010
AUDIENCE: OK then, a subset to
that, what would Chrome's--

00:46:12.010 --> 00:46:15.880
or, potentially, what would
the thought be on,

00:46:15.880 --> 00:46:19.470
hypothetically, bundling an app
in the store and the app's

00:46:19.470 --> 00:46:24.020
sole existence just be a license
file that I can sell

00:46:24.020 --> 00:46:27.490
and then use the Chrome
management permissions to

00:46:27.490 --> 00:46:30.080
check the existence of
installation of both and

00:46:30.080 --> 00:46:33.140
thereby shoehorn some way
to sell an extension.

00:46:33.140 --> 00:46:36.740
If I managed to do that, would
that somehow get me kicked out

00:46:36.740 --> 00:46:37.300
of the store?

00:46:37.300 --> 00:46:40.140
MIKE WEST: It sounds
interesting.

00:46:40.140 --> 00:46:40.880
AUDIENCE: All right,
well, [INAUDIBLE].

00:46:40.880 --> 00:46:41.500
MIKE WEST: That's the
first I've heard of

00:46:41.500 --> 00:46:42.080
something like that.

00:46:42.080 --> 00:46:43.330
So--

00:46:45.380 --> 00:46:47.950
AUDIENCE: Currently, building
cross-browser extensions

00:46:47.950 --> 00:46:50.850
across different browsers
is a pain.

00:46:50.850 --> 00:46:54.210
The more and more we use
advanced Chrome APIs, we are

00:46:54.210 --> 00:46:57.090
alienating ourselves from
Safari and Firefox.

00:46:57.090 --> 00:46:59.190
I'm not even talking about IE.

00:46:59.190 --> 00:47:01.850
Like browsers-- even like Safari
that chooses that kit,

00:47:01.850 --> 00:47:03.840
we are alienating ourselves.

00:47:03.840 --> 00:47:08.537
Are there any plans from
Chromium to prescribe a base

00:47:08.537 --> 00:47:12.970
set of APIs or form a consortium
so that these are

00:47:12.970 --> 00:47:14.860
some basic APIs that
should be present

00:47:14.860 --> 00:47:16.860
across all the browsers.

00:47:16.860 --> 00:47:19.410
[INTERPOSING VOICES]

00:47:19.410 --> 00:47:21.780
MIKE WEST: Part of the issue,
I think, is that extensions

00:47:21.780 --> 00:47:23.960
really enable you to dive deeply
into the way that a

00:47:23.960 --> 00:47:24.820
browser works.

00:47:24.820 --> 00:47:28.880
And they're really well bound
together with the way the

00:47:28.880 --> 00:47:31.700
browser itself works.

00:47:31.700 --> 00:47:36.080
I think there probably would be
value in figuring out some

00:47:36.080 --> 00:47:41.570
way of dealing with extensions
in a cross-browser fashion.

00:47:41.570 --> 00:47:44.570
What we think, however, is that
extensions are really

00:47:44.570 --> 00:47:46.050
based on web technologies.

00:47:46.050 --> 00:47:48.270
And to whatever extent possible,
you should be

00:47:48.270 --> 00:47:51.750
building things in HTML and
CSS and JavaScript.

00:47:51.750 --> 00:47:54.260
And those sorts of things,
especially the back end

00:47:54.260 --> 00:47:57.070
portion, should be reusable
across browsers.

00:47:57.070 --> 00:47:59.740
I think you can look at
extensions, like HTTPS

00:47:59.740 --> 00:48:02.430
Everywhere, that have presence
on multiple browsers.

00:48:02.430 --> 00:48:04.530
And what they've basically done
is create a library in

00:48:04.530 --> 00:48:07.350
the back end and then put a
thin shell on top of that

00:48:07.350 --> 00:48:10.650
library that lets them target
both Firefox and Chrome.

00:48:10.650 --> 00:48:12.530
We think that's a pretty
successful model because it

00:48:12.530 --> 00:48:14.980
enables them to do the things
that they do really well--

00:48:14.980 --> 00:48:16.270
building this library--

00:48:16.270 --> 00:48:18.990
and then allow the browsers to
do the things that they do

00:48:18.990 --> 00:48:21.930
really well by having specific
APIs for each.

00:48:21.930 --> 00:48:22.920
But you're entirely correct.

00:48:22.920 --> 00:48:25.960
It would be nice if everything
was the same everywhere.

00:48:25.960 --> 00:48:28.490
That's simply not where
we are right now.

00:48:28.490 --> 00:48:30.770
AUDIENCE: I have another
question about extending on

00:48:30.770 --> 00:48:32.230
the malicious extensions.

00:48:32.230 --> 00:48:34.920
Say if an extension currently
requests x number of

00:48:34.920 --> 00:48:38.340
permissions and on a remote
update it's going to access

00:48:38.340 --> 00:48:41.220
more permissions to do
some thing that it

00:48:41.220 --> 00:48:42.050
shouldn't be doing.

00:48:42.050 --> 00:48:44.690
Are there any things
to prevent that?

00:48:44.690 --> 00:48:46.130
Like, say, one of the--

00:48:46.130 --> 00:48:47.750
it might not be intentional.

00:48:47.750 --> 00:48:50.510
One of those popular extensions
are putting

00:48:50.510 --> 00:48:52.580
affiliate links on
Google search.

00:48:52.580 --> 00:48:54.330
Like, basically, it could put
a content script and do

00:48:54.330 --> 00:48:55.270
anything it wants.

00:48:55.270 --> 00:48:58.190
What are steps from those?

00:48:58.190 --> 00:49:00.190
MIKE WEST: Currently, if an
extension requests more

00:49:00.190 --> 00:49:03.110
permissions, then it'll be
disabled on update until the

00:49:03.110 --> 00:49:04.880
user specifically enables it.

00:49:04.880 --> 00:49:07.900
So, they'll get an info bar at
the top of-- or, actually,

00:49:07.900 --> 00:49:08.700
it's not an info bar anymore.

00:49:08.700 --> 00:49:11.110
It's a pop-up that says, this
extension requested more

00:49:11.110 --> 00:49:11.900
permissions.

00:49:11.900 --> 00:49:13.640
It's been disabled.

00:49:13.640 --> 00:49:15.730
And you can re-enable
it from that menu.

00:49:15.730 --> 00:49:17.880
So it gives you the ability to
determine that the extension

00:49:17.880 --> 00:49:20.130
is now requesting more
permissions and to evaluate

00:49:20.130 --> 00:49:22.980
that based on what you know
that the extension does.

00:49:22.980 --> 00:49:25.020
What we'd also like to see is
people moving more towards

00:49:25.020 --> 00:49:28.340
optional permissions, which we
introduced a few months ago.

00:49:28.340 --> 00:49:29.960
I'm not exactly sure
when it came out.

00:49:29.960 --> 00:49:31.250
But, by having optional

00:49:31.250 --> 00:49:33.140
permissions, we don't actually--

00:49:33.140 --> 00:49:36.310
if you request new optional
permissions in a new extension

00:49:36.310 --> 00:49:38.640
update, we don't give you this
info bar because it actually

00:49:38.640 --> 00:49:40.820
doesn't change the way
the extension works.

00:49:40.820 --> 00:49:43.440
But it gives you the ability
then to explicitly request

00:49:43.440 --> 00:49:46.320
those new things from the user
when the time is right.

00:49:46.320 --> 00:49:47.050
So geolocation--

00:49:47.050 --> 00:49:50.140
for instance-- if I need to
interact in some way with a

00:49:50.140 --> 00:49:52.890
user's location, I can make
geolocation an optional

00:49:52.890 --> 00:49:53.580
permission.

00:49:53.580 --> 00:49:55.200
And then when the user actually
interacts with the

00:49:55.200 --> 00:49:57.780
extension and needs that new
permission, I can ask them

00:49:57.780 --> 00:50:00.390
then, when it's really quite
relevant to the way that

00:50:00.390 --> 00:50:01.996
they're working.

00:50:01.996 --> 00:50:02.840
AUDIENCE: Thanks.

00:50:02.840 --> 00:50:04.090
MIKE WEST: Thank you.

00:50:06.360 --> 00:50:06.855
Go ahead.

00:50:06.855 --> 00:50:08.340
OK, one more.

00:50:08.340 --> 00:50:09.830
Two more.

00:50:09.830 --> 00:50:12.170
AUDIENCE: Hi, I work
at Genentech.

00:50:12.170 --> 00:50:17.360
And we are trying to deploy
Chrome for Business for all of

00:50:17.360 --> 00:50:20.140
our employees at Roche
and Genentech.

00:50:20.140 --> 00:50:20.970
I was wondering--

00:50:20.970 --> 00:50:21.950
and we also have--

00:50:21.950 --> 00:50:25.630
currently, we just use the
consumer Chrome browser and

00:50:25.630 --> 00:50:27.840
build extensions on it.

00:50:27.840 --> 00:50:33.200
Are there any limitations to
using Chrome for business as

00:50:33.200 --> 00:50:35.420
far as building extensions
goes?

00:50:35.420 --> 00:50:38.760
Or is it just the exact same
sort of functionality?

00:50:38.760 --> 00:50:42.420
MIKE WEST: You actually have
a really good mechanism for

00:50:42.420 --> 00:50:44.440
deploying Chrome inside
of Enterprise.

00:50:44.440 --> 00:50:46.500
So it's very Enterprise ready.

00:50:46.500 --> 00:50:48.820
You can deploy it as an SI
package and deal with

00:50:48.820 --> 00:50:51.390
corporate policies via,
you know, like Active

00:50:51.390 --> 00:50:52.610
Directory or something.

00:50:52.610 --> 00:50:55.170
Via Active Directory you can
actually set a list of

00:50:55.170 --> 00:50:58.290
extensions that should be auto
installed or that are banned

00:50:58.290 --> 00:51:00.430
within the context of
an organization.

00:51:00.430 --> 00:51:03.370
So, by using group policy in
the same way that your IT

00:51:03.370 --> 00:51:06.970
department is probably quite
familiar with, they'll be able

00:51:06.970 --> 00:51:11.180
to deploy Chrome locally and
actually deal in a very

00:51:11.180 --> 00:51:13.140
detailed manner with the
extensions that are

00:51:13.140 --> 00:51:15.940
pre-installed and also the
extensions that aren't allowed

00:51:15.940 --> 00:51:17.006
to be installed.

00:51:17.006 --> 00:51:17.450
AUDIENCE: OK.

00:51:17.450 --> 00:51:18.490
Thank you.

00:51:18.490 --> 00:51:19.740
MIKE WEST: Thank you.

00:51:21.830 --> 00:51:22.210
Great.

00:51:22.210 --> 00:51:23.240
Thank you very much
for your time.

00:51:23.240 --> 00:51:26.000
If you have any questions later
on, I'll be at office

00:51:26.000 --> 00:51:28.380
hours pretty much
all the time.

00:51:28.380 --> 00:51:29.670
So just come hang out.

00:51:29.670 --> 00:51:31.930
We'd be happy to answer any
questions that you have.

00:51:31.930 --> 00:51:33.180
Thank you very much.

