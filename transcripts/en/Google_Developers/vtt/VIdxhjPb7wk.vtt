WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:01.930
JASON DALY: So I am Jason Daly.

00:00:01.930 --> 00:00:04.000
I am a software engineer
with Google Fiber.

00:00:04.000 --> 00:00:05.580
And I'm going to
talk to you today

00:00:05.580 --> 00:00:08.510
about a few points of interest.

00:00:08.510 --> 00:00:12.550
We're going to talk about how
we created a TV and DVR user

00:00:12.550 --> 00:00:17.220
interface with HTML5,
CSS3, and Dart.

00:00:17.220 --> 00:00:19.730
This is running on embedded
hardware, which might

00:00:19.730 --> 00:00:21.340
be interesting to some people.

00:00:21.340 --> 00:00:23.830
MIPS and ARM devices,
specifically.

00:00:23.830 --> 00:00:26.240
And we're also going
to talk about how

00:00:26.240 --> 00:00:29.250
I use some Dart VM-based
services running

00:00:29.250 --> 00:00:32.049
on these boxes, interacting
with native code

00:00:32.049 --> 00:00:35.126
to handle some of the stuff
that the browser can't do,

00:00:35.126 --> 00:00:37.780
dealing with sockets and
Native Dart extensions.

00:00:37.780 --> 00:00:41.500
So some of you might be
interested in that as well.

00:00:41.500 --> 00:00:42.512
So about Google Fiber.

00:00:42.512 --> 00:00:43.970
A lot of you probably
already know.

00:00:43.970 --> 00:00:45.600
But I'll cover it anyway.

00:00:45.600 --> 00:00:49.030
Google Fiber is Google's
fiber-to-the-home internet

00:00:49.030 --> 00:00:50.350
service.

00:00:50.350 --> 00:00:52.500
We offer customers
up to one gigabit

00:00:52.500 --> 00:00:54.110
per second symmetric bandwidth.

00:00:54.110 --> 00:00:56.880
So upstream and
downstream, one gigabit.

00:00:56.880 --> 00:00:59.280
We also have a TV package
available with it--

00:00:59.280 --> 00:01:02.030
about 500 channels or so.

00:01:02.030 --> 00:01:03.440
High definition.

00:01:03.440 --> 00:01:04.950
Fat, fat bit streams.

00:01:04.950 --> 00:01:06.580
It really looks good.

00:01:06.580 --> 00:01:08.220
We're really proud of it.

00:01:08.220 --> 00:01:11.320
Currently, fiber is deployed
in Kansas City, Provo, Utah,

00:01:11.320 --> 00:01:14.700
and Austin, with additional
cities coming soon.

00:01:14.700 --> 00:01:17.580
I do not know when your
city or neighborhood

00:01:17.580 --> 00:01:18.700
will get Google Fiber.

00:01:18.700 --> 00:01:19.390
I'm sorry.

00:01:19.390 --> 00:01:20.320
I cannot answer that.

00:01:20.320 --> 00:01:22.340
Those are very
complex questions,

00:01:22.340 --> 00:01:23.392
way above my pay grade.

00:01:23.392 --> 00:01:24.600
I'm just a software engineer.

00:01:24.600 --> 00:01:26.900
So I can't answer that question.

00:01:26.900 --> 00:01:29.190
I'm sorry.

00:01:29.190 --> 00:01:31.150
So at Fiber we
use several pieces

00:01:31.150 --> 00:01:33.930
of custom hardware
for the TV service.

00:01:33.930 --> 00:01:38.712
So the storage box, which has
a 2 terabyte hard drive in it,

00:01:38.712 --> 00:01:40.170
and recent versions
of the software

00:01:40.170 --> 00:01:41.740
it combines with
the network box.

00:01:41.740 --> 00:01:43.560
We call it the Network+ Box.

00:01:43.560 --> 00:01:45.400
There's one of
these per household.

00:01:45.400 --> 00:01:47.400
So all your video
goes on to one box.

00:01:47.400 --> 00:01:50.770
And then you can have
several TV boxes.

00:01:50.770 --> 00:01:53.980
So one TV box per TV,
up to six per household.

00:01:53.980 --> 00:01:56.345
That's a recent
expansion from four.

00:01:56.345 --> 00:01:58.970
Lot of people in Kansas City are
happy about that, because they

00:01:58.970 --> 00:02:01.720
have big houses there.

00:02:01.720 --> 00:02:03.830
And we've also got
the network box

00:02:03.830 --> 00:02:05.740
in the original hardware,
and the fiber jack.

00:02:05.740 --> 00:02:07.430
Which none of those
have Dart codes,

00:02:07.430 --> 00:02:09.789
So that's probably the last
time we'll hear about those.

00:02:09.789 --> 00:02:11.360
Sorry for the bad
programmer art.

00:02:11.360 --> 00:02:15.892
Here is the best I could
do for the picture.

00:02:15.892 --> 00:02:17.350
The pretty orange
fiber cable comes

00:02:17.350 --> 00:02:19.940
in from outside of your
house into the fiber jack.

00:02:19.940 --> 00:02:22.730
From there it's ethernet
to the network box.

00:02:22.730 --> 00:02:24.510
Ethernet usually
to the storage box.

00:02:24.510 --> 00:02:26.540
And either ethernet,
or we can run over

00:02:26.540 --> 00:02:30.712
coax lines using the
Mocha protocol, which

00:02:30.712 --> 00:02:32.670
makes it a lot easier to
install in houses that

00:02:32.670 --> 00:02:34.310
don't have ethernet built in.

00:02:34.310 --> 00:02:36.820
And then for the TV box,
get a nice HDMI cable,

00:02:36.820 --> 00:02:40.040
or whatever, to your TV.

00:02:40.040 --> 00:02:43.540
We had a previous
UI and DVR system.

00:02:43.540 --> 00:02:44.310
It works well.

00:02:44.310 --> 00:02:47.320
It's serving thousands
of customers as we speak.

00:02:47.320 --> 00:02:51.150
But it's got several things
that are not done-- right

00:02:51.150 --> 00:02:52.590
is a very objective thing.

00:02:52.590 --> 00:02:55.710
But it's not done the way that
Google usually does things.

00:02:55.710 --> 00:02:58.370
For example, lots of heavy
work is done redundantly

00:02:58.370 --> 00:03:02.170
on these little limited
embedded devices.

00:03:02.170 --> 00:03:04.110
The electronic program
guide specifically

00:03:04.110 --> 00:03:06.479
is a huge piece of
data when you consider

00:03:06.479 --> 00:03:08.270
the size of the device
we're talking about.

00:03:08.270 --> 00:03:11.970
That's hundreds of channels
times two weeks of time.

00:03:11.970 --> 00:03:14.609
There's lots of data other
than just the name of the show

00:03:14.609 --> 00:03:15.900
and what time it's on in there.

00:03:15.900 --> 00:03:17.900
There's lots of metadata
that goes with it.

00:03:17.900 --> 00:03:20.640
And we distribute that
to each and every storage

00:03:20.640 --> 00:03:22.300
box in the fleet.

00:03:22.300 --> 00:03:24.910
And that's probably not
the best way to do it.

00:03:24.910 --> 00:03:27.490
Also, there are some
very complex tasks that

00:03:27.490 --> 00:03:30.380
get done on the storage box.

00:03:30.380 --> 00:03:33.000
DVR scheduling, which is
where when the user sets up

00:03:33.000 --> 00:03:36.012
a recording rule, say I want
to record "Law and Order."

00:03:36.012 --> 00:03:37.970
Show me every single
episode of "Law and Order"

00:03:37.970 --> 00:03:39.940
that you can find.

00:03:39.940 --> 00:03:41.630
A lot of computation
has to be done.

00:03:41.630 --> 00:03:43.147
Well, when's "Law and Order" on?

00:03:43.147 --> 00:03:45.480
Have I already recorded this
episode of "Law and Order"?

00:03:45.480 --> 00:03:46.855
Do I have enough
tuners to record

00:03:46.855 --> 00:03:49.063
this episode of "Law and
Order," with everything else

00:03:49.063 --> 00:03:50.020
I'm recording?

00:03:50.020 --> 00:03:52.250
And that's a very
complex problem.

00:03:52.250 --> 00:03:55.680
And we do it on a little MIPS
processor, ARM processor.

00:03:55.680 --> 00:03:56.750
Also, Search.

00:03:56.750 --> 00:03:59.690
When you want to search for a
program, that's a complex task.

00:03:59.690 --> 00:04:02.060
Dealing with I've
typed in three letters.

00:04:02.060 --> 00:04:04.970
What matches that,
that kind of thing.

00:04:04.970 --> 00:04:08.410
And that's all being done,
again, on the storage box.

00:04:08.410 --> 00:04:10.610
Mostly this is
implemented in Java,

00:04:10.610 --> 00:04:12.720
which means we require
a third-party JVM

00:04:12.720 --> 00:04:14.720
license to run on each device.

00:04:14.720 --> 00:04:17.951
And the JVM we're using
is not a Google JVM.

00:04:17.951 --> 00:04:19.200
It's not something we control.

00:04:19.200 --> 00:04:22.270
So whenever it
breaks-- and it does--

00:04:22.270 --> 00:04:26.180
we have to deal with external
vendors to help us fix it.

00:04:26.180 --> 00:04:29.270
On the other hand, the
previous UI and DVR system

00:04:29.270 --> 00:04:31.020
does have some
native code that's

00:04:31.020 --> 00:04:33.810
been tuned specifically
for our hardware,

00:04:33.810 --> 00:04:35.310
for performance-critical tasks.

00:04:35.310 --> 00:04:36.900
And a lot of that we can reuse.

00:04:36.900 --> 00:04:39.270
So that's good.

00:04:39.270 --> 00:04:41.584
For a new solution, we
wanted to do several things.

00:04:41.584 --> 00:04:44.000
We wanted to move most of this
heavy lifting to the Cloud.

00:04:44.000 --> 00:04:46.200
So the big data and
the big computation

00:04:46.200 --> 00:04:48.459
moves into the Cloud.

00:04:48.459 --> 00:04:51.000
Also, we wanted to move some of
the user's data to the Cloud.

00:04:51.000 --> 00:04:54.620
Specifically, their preferences
and their settings, and the DVR

00:04:54.620 --> 00:04:55.670
recording rules.

00:04:55.670 --> 00:04:57.581
So that when one of
their boxes goes down

00:04:57.581 --> 00:04:59.330
and we have to replace
it, they don't have

00:04:59.330 --> 00:05:02.180
to go set up everything again.

00:05:02.180 --> 00:05:04.720
At this point, recorded video
is staying on the hard drive,

00:05:04.720 --> 00:05:06.360
mainly because of
licensing reasons.

00:05:06.360 --> 00:05:08.950
We can't move that to the Cloud.

00:05:08.950 --> 00:05:11.200
This has advantages, obviously.

00:05:11.200 --> 00:05:13.370
The large data sets, such
as the program guide,

00:05:13.370 --> 00:05:15.551
can be queried instead of
copied all the way down

00:05:15.551 --> 00:05:17.050
to every single
device in the fleet.

00:05:17.050 --> 00:05:19.550
Whenever somebody hits
Guide on the remote,

00:05:19.550 --> 00:05:21.380
it just asks the data center.

00:05:21.380 --> 00:05:23.410
And the relevant piece
of data comes down

00:05:23.410 --> 00:05:26.120
for say, seven
channels in 90 minutes,

00:05:26.120 --> 00:05:30.050
as opposed to 500
channels in two weeks.

00:05:30.050 --> 00:05:32.360
Also, the complex tasks such
as scheduling and search

00:05:32.360 --> 00:05:35.090
can be done by a data center,
as opposed to a TV box

00:05:35.090 --> 00:05:37.500
with limited capabilities.

00:05:37.500 --> 00:05:40.780
And again, user data is
not lost if a box breaks.

00:05:40.780 --> 00:05:42.870
The settings and the
recording rules are safe.

00:05:42.870 --> 00:05:44.180
The recorded videos is lost.

00:05:44.180 --> 00:05:45.430
But as soon as you
get the new box,

00:05:45.430 --> 00:05:47.221
it'll start recording
all your stuff again.

00:05:49.790 --> 00:05:52.300
We still need the UI that
runs on the TV box, though.

00:05:52.300 --> 00:05:55.660
So we can't do
everything in the Cloud.

00:05:55.660 --> 00:05:57.590
For our goals for
this were, we wanted

00:05:57.590 --> 00:05:59.920
it to be at least as
responsive as the existing UI.

00:05:59.920 --> 00:06:03.040
We didn't want to go backwards
in terms of performance.

00:06:03.040 --> 00:06:04.830
We don't want to rely
on third-party code

00:06:04.830 --> 00:06:05.580
as much as we can.

00:06:05.580 --> 00:06:07.510
We want to do as much
as we can in-house,

00:06:07.510 --> 00:06:10.170
because we can fix things
in-house really easily.

00:06:10.170 --> 00:06:12.110
And we wanted this to
be easy to develop,

00:06:12.110 --> 00:06:14.650
easy to maintain,
and easy to deploy.

00:06:14.650 --> 00:06:18.140
So the decisions we made
was an HTML5 CSS-based UI

00:06:18.140 --> 00:06:19.910
running inside Chromium.

00:06:19.910 --> 00:06:22.530
And the front end UI
code written in Dart.

00:06:22.530 --> 00:06:23.680
Why did we pick Dart?

00:06:23.680 --> 00:06:26.054
Well, this is the laundry list
you've heard over and over

00:06:26.054 --> 00:06:28.100
again this couple of days.

00:06:28.100 --> 00:06:30.810
Dart looks and feels like
a lot of other languages

00:06:30.810 --> 00:06:32.200
that people already know.

00:06:32.200 --> 00:06:35.940
Most of us on the team,
we're not front end engineers

00:06:35.940 --> 00:06:37.060
from background.

00:06:37.060 --> 00:06:39.450
A lot of us came up
from C++ or Java.

00:06:39.450 --> 00:06:42.849
And Dart looked a lot like
the stuff we already knew.

00:06:42.849 --> 00:06:44.640
And we liked a lot of
the features in Dart,

00:06:44.640 --> 00:06:46.990
too-- the strict type
checking when you want it,

00:06:46.990 --> 00:06:48.460
and the libraries and imports.

00:06:48.460 --> 00:06:50.245
It's going to be a
big, big project.

00:06:50.245 --> 00:06:53.030
So we wanted to be able to
package up code modually

00:06:53.030 --> 00:06:53.722
and reuse it.

00:06:53.722 --> 00:06:55.430
Which yes, you can do
that in JavaScript.

00:06:55.430 --> 00:06:59.360
But Dart makes a lot prettier
and a lot nicer to deal with.

00:06:59.360 --> 00:07:01.650
Also, Dart still has the
dynamic and asynchronous

00:07:01.650 --> 00:07:02.920
features that web apps need.

00:07:02.920 --> 00:07:05.230
So the dynamic types,
you don't need types

00:07:05.230 --> 00:07:06.430
if you don't want them.

00:07:06.430 --> 00:07:08.030
And the futures and streams.

00:07:08.030 --> 00:07:09.900
We're not using async/await yet.

00:07:09.900 --> 00:07:11.560
This happened two years ago.

00:07:11.560 --> 00:07:13.844
So we didn't have
that available yet.

00:07:13.844 --> 00:07:15.260
We're looking
forward to using it.

00:07:15.260 --> 00:07:18.620
But at the moment, if it's
not broke, don't fix it.

00:07:18.620 --> 00:07:21.570
We're following that paradigm.

00:07:21.570 --> 00:07:26.390
And also, Dart is not limited to
just the browser and web apps.

00:07:26.390 --> 00:07:28.370
We'll talk a little bit
more about that later.

00:07:28.370 --> 00:07:32.030
But we like that going
from the beginning.

00:07:32.030 --> 00:07:34.900
So, using HTML, CSS, and Dart.

00:07:34.900 --> 00:07:36.690
We had a lot of
wins in development.

00:07:36.690 --> 00:07:39.560
Everybody's talked about how
great the Dart tools are.

00:07:39.560 --> 00:07:41.830
Dart's really easy to pick
up compared to JavaScript,

00:07:41.830 --> 00:07:44.100
if you're already a
programmer and you haven't

00:07:44.100 --> 00:07:46.140
worked with JavaScript already.

00:07:46.140 --> 00:07:49.630
We really like Dartium, because
the prototyping is just bam.

00:07:49.630 --> 00:07:50.130
It's done.

00:07:50.130 --> 00:07:52.010
You write the code and it runs.

00:07:52.010 --> 00:07:53.350
You make a change, it runs.

00:07:53.350 --> 00:07:54.630
You don't need to recompile.

00:07:54.630 --> 00:07:55.940
You just refresh.

00:07:55.940 --> 00:08:00.045
And with CSS and HTML, you don't
even need to refresh sometimes.

00:08:00.045 --> 00:08:01.520
You just change it
in the debugger.

00:08:01.520 --> 00:08:02.910
And bam, there it is.

00:08:02.910 --> 00:08:05.344
And UX designers
really like that.

00:08:05.344 --> 00:08:06.260
Can you make that red?

00:08:06.260 --> 00:08:08.718
Make that a little bit bigger
and move it down five pixels?

00:08:08.718 --> 00:08:10.110
Sure.

00:08:10.110 --> 00:08:10.610
OK.

00:08:10.610 --> 00:08:12.180
Good.

00:08:12.180 --> 00:08:16.310
That was really a
nice experience.

00:08:16.310 --> 00:08:20.534
For deployment, as opposed to
packaging up a big firmware

00:08:20.534 --> 00:08:22.700
image and sending it down
to every box in the fleet,

00:08:22.700 --> 00:08:26.080
now we can just say hey, go to
this URL instead of that one.

00:08:26.080 --> 00:08:27.950
And now we've got
new UI deployed.

00:08:27.950 --> 00:08:28.860
That's really cool.

00:08:28.860 --> 00:08:31.390
That's really, really cool.

00:08:31.390 --> 00:08:33.570
And also, the server side
software in the Cloud

00:08:33.570 --> 00:08:34.260
can be updated.

00:08:34.260 --> 00:08:36.450
We don't need to deploy
an image for that, either.

00:08:36.450 --> 00:08:39.770
So when the back end needs
to change, that just happens.

00:08:39.770 --> 00:08:42.659
And the customers don't
even know the difference,

00:08:42.659 --> 00:08:45.494
except that stuff works better.

00:08:45.494 --> 00:08:47.410
We did have some challenges
with this, though.

00:08:47.410 --> 00:08:50.720
Most of the packages and
libraries and everything

00:08:50.720 --> 00:08:52.340
out there for doing
web development

00:08:52.340 --> 00:08:54.720
assume you have a mouse
and a pointing device.

00:08:54.720 --> 00:08:55.820
We have a remote control.

00:08:55.820 --> 00:08:58.320
We have up, down,
left, right, and OK.

00:08:58.320 --> 00:09:01.420
So we didn't really
find any widget

00:09:01.420 --> 00:09:04.010
or development
libraries, frameworks,

00:09:04.010 --> 00:09:06.290
anything like that that
could really work for us.

00:09:06.290 --> 00:09:08.460
So we had to develop
our own widgets.

00:09:08.460 --> 00:09:11.950
Custom widgets, navigation
system, and all that.

00:09:11.950 --> 00:09:13.700
It wasn't terribly
difficult. But it was

00:09:13.700 --> 00:09:16.080
a challenge we had overcome.

00:09:16.080 --> 00:09:18.550
Again, we have a limited
CPU, limited GPU,

00:09:18.550 --> 00:09:19.590
and limited memory.

00:09:19.590 --> 00:09:22.600
So we have a lot of effort
went into managing streams

00:09:22.600 --> 00:09:23.880
and DOM elements efficiently.

00:09:23.880 --> 00:09:26.140
We don't create divs
and throw them away.

00:09:26.140 --> 00:09:30.030
We try to reuse them as much as
we can so there's less garbage

00:09:30.030 --> 00:09:31.550
collection and everything.

00:09:31.550 --> 00:09:34.950
Also, for the big, big
data sets like our video

00:09:34.950 --> 00:09:38.400
on demand library, we don't
request everything at once.

00:09:38.400 --> 00:09:39.540
We get pages at a time.

00:09:39.540 --> 00:09:42.170
We work with the back team to
give us small chunks of data

00:09:42.170 --> 00:09:45.590
that we can handle easily.

00:09:45.590 --> 00:09:48.760
Also, there's the challenge of
interfacing with the hardware.

00:09:48.760 --> 00:09:52.070
This is an embedded CPU.

00:09:52.070 --> 00:09:54.420
It can't do software
video decoding.

00:09:54.420 --> 00:09:56.990
There's dedicated
hardware for that.

00:09:56.990 --> 00:09:59.270
Also, dealing with
digital rights management,

00:09:59.270 --> 00:10:01.730
which we have to do.

00:10:01.730 --> 00:10:03.330
No content provider
will talk to us

00:10:03.330 --> 00:10:04.746
if we didn't have
some kind of way

00:10:04.746 --> 00:10:06.160
of protecting their content.

00:10:06.160 --> 00:10:08.800
So we had to deal with that.

00:10:08.800 --> 00:10:10.770
Largely, this was
accomplished outside of Dart

00:10:10.770 --> 00:10:11.800
with native code.

00:10:11.800 --> 00:10:15.040
So we have a custom build of
Chromium with a custom video

00:10:15.040 --> 00:10:17.730
tag that we can move around
the screen that talks

00:10:17.730 --> 00:10:19.620
straight to the decoders.

00:10:19.620 --> 00:10:23.320
And some of the
existing native software

00:10:23.320 --> 00:10:25.280
that was working
with the old system.

00:10:25.280 --> 00:10:29.980
We refactored parts of that and
moved some of it into Chromium.

00:10:29.980 --> 00:10:31.610
Some of it stayed
on the storage box.

00:10:31.610 --> 00:10:35.060
And so that's how we
dealt with getting

00:10:35.060 --> 00:10:39.200
the video actually decoded so
you could actually watch TV.

00:10:39.200 --> 00:10:40.200
Here's some screenshots.

00:10:40.200 --> 00:10:43.520
This is our program guide.

00:10:43.520 --> 00:10:47.940
This particular screen is using
mostly using Canvas right now.

00:10:47.940 --> 00:10:50.864
We're looking into a
WebGL version of it

00:10:50.864 --> 00:10:52.530
to make it animate a
little bit quicker.

00:10:52.530 --> 00:10:55.100
But other than that,
it words pretty well.

00:10:55.100 --> 00:10:57.870
This is the on-demand
library I was talking about.

00:10:57.870 --> 00:11:03.250
So here's one page with
10 different shows on it.

00:11:03.250 --> 00:11:04.890
You can see some of
them bleeding off

00:11:04.890 --> 00:11:07.181
to the side to let you know
there's more content if you

00:11:07.181 --> 00:11:07.870
just arrow over.

00:11:07.870 --> 00:11:10.480
It goes over there, fetches
the next page, and moves on.

00:11:13.250 --> 00:11:14.520
Some detailed info.

00:11:14.520 --> 00:11:18.290
So this is an episode
of how it's made.

00:11:18.290 --> 00:11:22.500
All that data comes
from the guide.

00:11:22.500 --> 00:11:24.100
And this is the DVR.

00:11:24.100 --> 00:11:26.400
So this is what's going
to be recorded coming up.

00:11:31.220 --> 00:11:34.710
Now, that's great for the UI.

00:11:34.710 --> 00:11:36.100
It worked really well.

00:11:36.100 --> 00:11:37.500
We were moving forward.

00:11:37.500 --> 00:11:38.420
We were really happy.

00:11:38.420 --> 00:11:40.090
We like Dart.

00:11:40.090 --> 00:11:42.990
But the browser can't do
everything, it turns out.

00:11:42.990 --> 00:11:44.930
We need to be able to
record video to disk.

00:11:44.930 --> 00:11:47.096
We need to be able to play
back video from the disk.

00:11:47.096 --> 00:11:50.059
We need to be able to
delete stuff from the disk.

00:11:50.059 --> 00:11:51.850
We also have some
third-party applications.

00:11:51.850 --> 00:11:53.700
Like we have a Netflix
client on our TV box.

00:11:53.700 --> 00:11:55.667
We need to launch that.

00:11:55.667 --> 00:11:57.750
None of that is something
that the browser can do.

00:11:57.750 --> 00:12:01.750
So some of this week we
handled with native code.

00:12:01.750 --> 00:12:04.940
Again, recycling some of the
code we had in the old system

00:12:04.940 --> 00:12:08.000
that was already tuned to run
really well on our hardware.

00:12:08.000 --> 00:12:10.290
So the recording
and the streaming

00:12:10.290 --> 00:12:13.330
is how we dealt with that.

00:12:13.330 --> 00:12:16.660
And the other tasks that
weren't so performance-critical,

00:12:16.660 --> 00:12:18.510
but were still
very necessary, we

00:12:18.510 --> 00:12:21.950
decided to write some
services running into Dart VM

00:12:21.950 --> 00:12:23.670
to do that.

00:12:23.670 --> 00:12:24.495
Again, why Dart?

00:12:24.495 --> 00:12:25.370
Well, it makes sense.

00:12:25.370 --> 00:12:26.660
We already have a
bunch of Dart code.

00:12:26.660 --> 00:12:28.285
Let's write some more
Dart code instead

00:12:28.285 --> 00:12:31.780
of having to switch languages
back and forth all the time.

00:12:31.780 --> 00:12:33.870
Dart works just great
outside of the browser.

00:12:33.870 --> 00:12:37.240
There's no limitations
on that at all.

00:12:37.240 --> 00:12:38.830
Or very little, at least.

00:12:38.830 --> 00:12:42.070
And we also could do a lot
of code reuse this way.

00:12:42.070 --> 00:12:45.280
So things like the code that
interfaces with the back end.

00:12:45.280 --> 00:12:47.410
We could use that on
both inside the browser

00:12:47.410 --> 00:12:50.260
and outside the
browser and the VMs.

00:12:50.260 --> 00:12:51.770
Some of the logging we do too.

00:12:51.770 --> 00:12:55.232
So when something breaks,
we get a flag immediately.

00:12:55.232 --> 00:12:56.690
That needs to be
done consistently,

00:12:56.690 --> 00:12:58.930
so we recycle the loggers.

00:12:58.930 --> 00:13:01.450
And other things like that.

00:13:01.450 --> 00:13:04.710
it made sense to be able
to reuse all this code.

00:13:04.710 --> 00:13:08.210
So we decided to
pick Dart again.

00:13:08.210 --> 00:13:09.500
The DVR service.

00:13:09.500 --> 00:13:14.760
This one runs in the Dart
VM on the storage box.

00:13:14.760 --> 00:13:17.510
This service handles
live TV tuning.

00:13:17.510 --> 00:13:21.770
It handles recording,
playback, and file management.

00:13:21.770 --> 00:13:25.230
The recording instructions,
which come from the Cloud,

00:13:25.230 --> 00:13:27.000
are executed by this service.

00:13:27.000 --> 00:13:29.080
Basically, when you
set up recording rules

00:13:29.080 --> 00:13:32.410
in the TV client, that sets up
recording rules in the Cloud.

00:13:32.410 --> 00:13:34.600
The Cloud does a bunch
of processing on that

00:13:34.600 --> 00:13:37.300
and turns those into specific
instructions, which say,

00:13:37.300 --> 00:13:39.400
record channel X
from time Y to time

00:13:39.400 --> 00:13:43.030
Z. Those come down to this
service on the storage box.

00:13:43.030 --> 00:13:45.060
And the storage box
handles those instructions,

00:13:45.060 --> 00:13:47.090
recording that video.

00:13:47.090 --> 00:13:48.950
Also, when the disk
fills up, we need

00:13:48.950 --> 00:13:51.630
to be able to delete
files to free up space.

00:13:51.630 --> 00:13:53.950
So files are deleted, again,
according to instructions

00:13:53.950 --> 00:13:54.710
from the back end.

00:13:54.710 --> 00:13:58.260
Because that's a complex task,
figuring out which file should

00:13:58.260 --> 00:13:59.670
I delete before
what other files.

00:14:01.830 --> 00:14:04.060
Also, this service
interacts with native code

00:14:04.060 --> 00:14:06.390
to control the actual
capture and streaming.

00:14:06.390 --> 00:14:10.980
So on our storage box
we have eight tuners,

00:14:10.980 --> 00:14:12.220
which are not really tuners.

00:14:12.220 --> 00:14:15.190
They're basically just threads
that write to the disk.

00:14:15.190 --> 00:14:17.520
So we could can record up
to eight things at once.

00:14:17.520 --> 00:14:20.120
And also, we can stream
six things at once,

00:14:20.120 --> 00:14:21.400
because we have six TV boxes.

00:14:21.400 --> 00:14:23.030
So you can be
recording eight things,

00:14:23.030 --> 00:14:25.360
and streaming six
of them to your TV.

00:14:25.360 --> 00:14:27.850
Or six other things, if
you have stuff recorded.

00:14:27.850 --> 00:14:30.150
That's something that
really screams native code.

00:14:30.150 --> 00:14:32.230
That's not something
we want to run in a VM.

00:14:32.230 --> 00:14:35.150
We want to run that as close
to the metal as possible.

00:14:35.150 --> 00:14:37.710
So we recycled the
service that was

00:14:37.710 --> 00:14:39.190
used in the original software.

00:14:39.190 --> 00:14:41.160
We basically didn't
even change it.

00:14:41.160 --> 00:14:44.030
We just copied it onto the
disk and started talking to it.

00:14:44.030 --> 00:14:46.240
Just like the old code did.

00:14:46.240 --> 00:14:48.650
Most of that is done
with TCP sockets.

00:14:48.650 --> 00:14:50.630
Also, the service
writes out some metadata

00:14:50.630 --> 00:14:53.350
files while it's recording.

00:14:53.350 --> 00:14:55.500
And we needed to be able
to read those to do things

00:14:55.500 --> 00:14:57.360
like determine how
long a file is--

00:14:57.360 --> 00:14:59.180
not in bytes, but in seconds.

00:14:59.180 --> 00:15:02.050
How many seconds is
this file of video?

00:15:02.050 --> 00:15:05.140
And to do that, we wrote a
native extension to talk to one

00:15:05.140 --> 00:15:06.910
of that service's libraries.

00:15:06.910 --> 00:15:09.700
So we just write a real simple
Dart wrapper around that.

00:15:09.700 --> 00:15:11.970
We can call methods
into that library.

00:15:11.970 --> 00:15:14.920
And we can figure out
things like how long is it,

00:15:14.920 --> 00:15:17.740
or how far in is 50
seconds, so we can seek

00:15:17.740 --> 00:15:19.050
to a certain point in the file.

00:15:22.340 --> 00:15:24.810
We also interact
with the TV itself.

00:15:24.810 --> 00:15:27.450
The TV UI, that part
that's running in Dart.

00:15:27.450 --> 00:15:28.886
We use a WebSocket for that.

00:15:28.886 --> 00:15:30.760
So when the user wants
to change the channel,

00:15:30.760 --> 00:15:32.390
hits channel up on the remote.

00:15:32.390 --> 00:15:36.265
That sends a command
to the DVR service

00:15:36.265 --> 00:15:38.850
that says, stop recording
what you're doing.

00:15:38.850 --> 00:15:40.254
Start recording
this new channel.

00:15:40.254 --> 00:15:41.670
And then start
streaming it to me.

00:15:44.800 --> 00:15:46.640
And then additional
native extension

00:15:46.640 --> 00:15:51.160
we had to write to interact
with the operating systems.

00:15:51.160 --> 00:15:54.510
Mainly because Dart doesn't
have a version of STAT DFS,

00:15:54.510 --> 00:15:57.300
if you're familiar
with that, to look

00:15:57.300 --> 00:15:59.730
at how big file systems are.

00:15:59.730 --> 00:16:02.830
How big they are, how much is
used, and how much is free.

00:16:02.830 --> 00:16:05.796
And that's something
we needed to know

00:16:05.796 --> 00:16:07.830
to be able to know when
the disk is filling up,

00:16:07.830 --> 00:16:10.600
and to ask what files
we should delete.

00:16:10.600 --> 00:16:12.060
So that was a real
simple wrapper.

00:16:12.060 --> 00:16:13.932
That took like a day to write.

00:16:13.932 --> 00:16:14.890
Not even a day, really.

00:16:14.890 --> 00:16:15.431
Like an hour.

00:16:15.431 --> 00:16:19.210
It was really,
really super simple.

00:16:19.210 --> 00:16:21.280
Also, we've got
a TV box service.

00:16:21.280 --> 00:16:22.970
This is outside
the browser again.

00:16:22.970 --> 00:16:24.870
And this is handling
things, again,

00:16:24.870 --> 00:16:26.130
that the browser can't do.

00:16:26.130 --> 00:16:29.780
Specifically, we need to be
able to switch applications.

00:16:29.780 --> 00:16:32.170
We need to be able to start
Google Fiber TV when we want.

00:16:32.170 --> 00:16:33.920
We need to be able to
shut it down, switch

00:16:33.920 --> 00:16:37.120
to a third-party app,
say Netflix or YouTube.

00:16:37.120 --> 00:16:39.050
And we also need to be
able to turn it off.

00:16:39.050 --> 00:16:41.180
And once we turn it
off, we need to be

00:16:41.180 --> 00:16:43.120
able to turn it back on again.

00:16:43.120 --> 00:16:47.720
So we needed some additional
smarts outside of the browser

00:16:47.720 --> 00:16:51.400
to be able to do all that.

00:16:51.400 --> 00:16:52.690
We have a mobile client.

00:16:52.690 --> 00:16:56.440
And the mobile client, in
order to control the TV,

00:16:56.440 --> 00:16:59.350
needs to be able to
talk to a service that

00:16:59.350 --> 00:17:00.660
can interface with the browser.

00:17:00.660 --> 00:17:03.930
So again, we have
another WebSocket open

00:17:03.930 --> 00:17:07.900
for that inside of this service,
to let mobile clients connect

00:17:07.900 --> 00:17:10.810
and be able to control TVs.

00:17:10.810 --> 00:17:17.349
We also do things like-- say you
switch from 16 by 9 to 4 by 3.

00:17:17.349 --> 00:17:19.829
That's not something we
can do inside the browser,

00:17:19.829 --> 00:17:21.599
because that's dealing
with video hardware

00:17:21.599 --> 00:17:24.300
itself, and not just the video.

00:17:24.300 --> 00:17:26.880
So we needed to be able
to switch video streams,

00:17:26.880 --> 00:17:28.290
switch audio streams.

00:17:28.290 --> 00:17:30.340
Also, closed caption
data comes down

00:17:30.340 --> 00:17:32.340
that doesn't come through
the video tag we have.

00:17:32.340 --> 00:17:37.180
Instead, it's routed outside
through another socket.

00:17:37.180 --> 00:17:38.620
And also DRM.

00:17:38.620 --> 00:17:42.510
Fetching DRM keys from
our secure service

00:17:42.510 --> 00:17:44.890
to be able to install
the keys on the device,

00:17:44.890 --> 00:17:47.390
and be able to decrypt
video properly.

00:17:47.390 --> 00:17:49.840
That was done by the service.

00:17:49.840 --> 00:17:56.100
So this new TV UI and DVR system
we launched in mid-January

00:17:56.100 --> 00:17:58.960
this year to new customers.

00:17:58.960 --> 00:18:00.760
We don't have a
migration path just yet.

00:18:00.760 --> 00:18:02.650
But it's coming up really soon.

00:18:02.650 --> 00:18:05.430
And so far customers are
pretty happy with it.

00:18:05.430 --> 00:18:08.575
It's pretty seamless going
from one system to the other.

00:18:08.575 --> 00:18:09.950
It's hard to tell
the difference,

00:18:09.950 --> 00:18:12.220
unless you're really
familiar with it.

00:18:12.220 --> 00:18:14.470
And we're happy about that.

00:18:14.470 --> 00:18:17.340
In conclusion, we
really like Dart.

00:18:17.340 --> 00:18:19.987
Developing this stuff
was fun because of Dart

00:18:19.987 --> 00:18:21.070
and all the tools we have.

00:18:21.070 --> 00:18:23.250
We really enjoyed it.

00:18:23.250 --> 00:18:24.160
Dar is versatile.

00:18:24.160 --> 00:18:24.880
It's powerful.

00:18:24.880 --> 00:18:26.460
It's fun to develop with.

00:18:26.460 --> 00:18:30.340
It also works just fine
on embedded hardware.

00:18:30.340 --> 00:18:32.710
We might have had two or
three really minor issues that

00:18:32.710 --> 00:18:34.910
were handled really
quickly by the VM team

00:18:34.910 --> 00:18:36.520
during this process.

00:18:36.520 --> 00:18:41.050
So we couldn't be happier with
how well it works on our boxes.

00:18:41.050 --> 00:18:43.470
And with that, are
there any questions?

00:18:47.628 --> 00:18:49.897
AUDIENCE: [INAUDIBLE].

00:18:49.897 --> 00:18:51.355
SPEAKER 2: I'll be
question monkey.

00:18:51.355 --> 00:18:54.076
Would you like a mic?

00:18:54.076 --> 00:18:56.780
You like how I just materialize
on stage in time for this?

00:18:59.597 --> 00:19:01.180
AUDIENCE: Going
forward, are you going

00:19:01.180 --> 00:19:04.040
to focus on either ARM or MIPS?

00:19:04.040 --> 00:19:06.374
Or are you using
both on purpose?

00:19:09.290 --> 00:19:12.870
JASON DALY: We do have new
revisions of the customer

00:19:12.870 --> 00:19:13.840
equipment coming up.

00:19:13.840 --> 00:19:16.190
I can't really talk about
which way we're going.

00:19:16.190 --> 00:19:17.301
AUDIENCE: OK.

00:19:17.301 --> 00:19:19.550
JASON DALY: A lot of it is
undetermined at this point.

00:19:19.550 --> 00:19:21.674
And even if it was determined,
that's not something

00:19:21.674 --> 00:19:24.822
that we talk about publicly.

00:19:24.822 --> 00:19:25.780
SPEAKER 2: Anyone else?

00:19:25.780 --> 00:19:28.480
Back here.

00:19:28.480 --> 00:19:31.310
AUDIENCE: How did you deal
with managing shared objects

00:19:31.310 --> 00:19:36.697
and shipping them in packages
for the shared wrapper objects,

00:19:36.697 --> 00:19:37.530
the native wrappers.

00:19:37.530 --> 00:19:40.876
JASON DALY: Oh, for
the native extensions?

00:19:40.876 --> 00:19:42.830
I might have been a
little bit misleading.

00:19:42.830 --> 00:19:44.380
The browser in the
back end code we

00:19:44.380 --> 00:19:46.702
don't have to ship new
firmware images for.

00:19:46.702 --> 00:19:50.069
For the VM services
that run on the boxes,

00:19:50.069 --> 00:19:51.360
those are part of the firmware.

00:19:51.360 --> 00:19:53.950
So it just packs up right
along with the firmware.

00:19:59.260 --> 00:20:00.771
SPEAKER 2: Any more?

00:20:00.771 --> 00:20:02.020
Probably do one more question.

00:20:05.820 --> 00:20:06.490
Or not.

00:20:06.490 --> 00:20:08.271
OK.

00:20:08.271 --> 00:20:09.020
Thank you so much.

00:20:09.020 --> 00:20:10.061
JASON DALY: Thanks a lot.

00:20:10.061 --> 00:20:13.270
[APPLAUSE]

