WEBVTT
Kind: captions
Language: en

00:00:01.180 --> 00:00:04.740
One of the fundamental objects
in R is a vector, which is

00:00:04.740 --> 00:00:07.350
just a term to mean a single
set of values in

00:00:07.350 --> 00:00:09.760
a particular order.

00:00:09.760 --> 00:00:12.410
We can create a simple vector
in R using the concatenate

00:00:12.410 --> 00:00:14.400
function, which is the function
represented by a

00:00:14.400 --> 00:00:16.180
lowercase c.

00:00:16.180 --> 00:00:19.370
Inside the parentheses, we put
values or other vectors

00:00:19.370 --> 00:00:22.230
separated by commas, and these
will be stuck together to

00:00:22.230 --> 00:00:25.160
create a new vector.

00:00:25.160 --> 00:00:28.390
When we print the vector, R
simply prints the values one

00:00:28.390 --> 00:00:30.780
after another.

00:00:30.780 --> 00:00:32.380
You might wonder--

00:00:32.380 --> 00:00:34.900
what happens if there are so
many values in the vector that

00:00:34.900 --> 00:00:37.060
it hits the end of the line?

00:00:37.060 --> 00:00:39.970
Well, the values drop to the
next line, just like the text

00:00:39.970 --> 00:00:42.460
would if you were writing
a paragraph.

00:00:42.460 --> 00:00:44.520
Notice that there's also a
little extra information in

00:00:44.520 --> 00:00:47.920
the first and second lines.

00:00:47.920 --> 00:00:50.520
In the first line, we have a
number 1 in brackets, and on

00:00:50.520 --> 00:00:53.460
the second line, we have a
number 10 in brackets.

00:00:53.460 --> 00:00:56.880
In each case, these correspond
to how far R is into the

00:00:56.880 --> 00:00:59.720
vector at the start
of each line.

00:00:59.720 --> 00:01:02.890
For example, the 10 indicates
the first element on the

00:01:02.890 --> 00:01:07.920
second line is the 10th
element of the vector.

00:01:07.920 --> 00:01:10.580
The 1 in the brackets at the
start of the output indicates

00:01:10.580 --> 00:01:13.015
that this line was the start
of the printed vector.

00:01:15.940 --> 00:01:18.760
This brings up a subtle point.

00:01:18.760 --> 00:01:21.620
Looking back on our earlier
output, we can see the bracket

00:01:21.620 --> 00:01:23.620
1 in each output.

00:01:23.620 --> 00:01:26.950
While each earlier output looked
like a scalar, that is,

00:01:26.950 --> 00:01:29.930
a standalone number, each of
these is really a vector with

00:01:29.930 --> 00:01:31.390
a single value.

00:01:31.390 --> 00:01:36.730
In R, a vector of length 1 is
equivalent to a scalar.

00:01:36.730 --> 00:01:39.510
For those vectors with length
greater than 1, it is common

00:01:39.510 --> 00:01:43.340
for us to want to access
a specific element.

00:01:43.340 --> 00:01:48.860
Let's call our longer vector
v. If you wanted to look at

00:01:48.860 --> 00:01:53.830
just the first element of v,
we use brackets with a 1.

00:01:53.830 --> 00:01:55.550
Or if we wanted the third
value, we could

00:01:55.550 --> 00:01:56.800
use a 3 in the brackets.

00:02:01.270 --> 00:02:04.220
We can also request several
values at once.

00:02:04.220 --> 00:02:07.050
To do so, we create a vector
that indicates the positions

00:02:07.050 --> 00:02:08.810
of the values we
want returned.

00:02:08.810 --> 00:02:12.220
Then we put this vector
into the brackets.

00:02:12.220 --> 00:02:13.310
So let's suppose we
want to look at

00:02:13.310 --> 00:02:15.450
the first three values.

00:02:15.450 --> 00:02:19.010
We start by creating
a vector 1, 2, 3.

00:02:19.010 --> 00:02:23.100
Here I've done that using the
special notation 1:3, which

00:02:23.100 --> 00:02:27.730
produces a vector with
values 1, 2, 3.

00:02:27.730 --> 00:02:31.070
I'll save this vector into a
variable called look.at, and

00:02:31.070 --> 00:02:34.690
then I'll use look.at inside
the brackets to get at the

00:02:34.690 --> 00:02:38.650
first three values of v.

00:02:38.650 --> 00:02:40.880
There are three more functions
worth remembering when it

00:02:40.880 --> 00:02:42.310
comes to vectors--

00:02:42.310 --> 00:02:44.850
length, head, and tail.

00:02:44.850 --> 00:02:46.610
The length function indicates
the number of

00:02:46.610 --> 00:02:48.200
elements in a vector.

00:02:48.200 --> 00:02:50.390
The head function returns
the first six

00:02:50.390 --> 00:02:53.030
observations in the vector.

00:02:53.030 --> 00:02:55.900
And the tail function returns
the last six observations in

00:02:55.900 --> 00:02:57.150
the vector.

00:02:58.930 --> 00:03:02.600
Here's a v printed out
for comparison.

00:03:02.600 --> 00:03:05.740
Also, if we want, we can specify
a second argument in

00:03:05.740 --> 00:03:08.330
the head or tail functions.

00:03:08.330 --> 00:03:09.940
This second argument
says how many

00:03:09.940 --> 00:03:11.940
observations we want to see.

00:03:11.940 --> 00:03:14.670
For example, here I'll specify
that I want to see just the

00:03:14.670 --> 00:03:18.980
last three values of v using
the tail function with 3 as

00:03:18.980 --> 00:03:21.830
the second argument.

00:03:21.830 --> 00:03:23.290
In the next video,
we'll work with

00:03:23.290 --> 00:03:24.740
character and Boolean vectors.

