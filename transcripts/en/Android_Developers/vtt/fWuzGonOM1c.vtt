WEBVTT
Kind: captions
Language: en

00:00:00.300 --> 00:00:02.640
SEAN MCQUILLAN: With the
launch of Jetpack and the KTX

00:00:02.640 --> 00:00:04.650
libraries, we've made
Android development

00:00:04.650 --> 00:00:06.360
even sweeter in Kotlin.

00:00:06.360 --> 00:00:10.170
But our apps rely on more than
just the Android libraries.

00:00:10.170 --> 00:00:12.120
As app writers and
library maintainers,

00:00:12.120 --> 00:00:14.970
there's a lot you can do
to be Kotlin friendly.

00:00:14.970 --> 00:00:17.220
First, you should update
your existing code

00:00:17.220 --> 00:00:18.870
to follow the interop guide.

00:00:18.870 --> 00:00:22.260
Then you can start building
Kotlin specific APIs.

00:00:22.260 --> 00:00:24.060
This video will cover
the interop guide,

00:00:24.060 --> 00:00:26.490
which covers best
practices for writing code

00:00:26.490 --> 00:00:29.790
in the Java programming
language to support Kotlin.

00:00:29.790 --> 00:00:32.439
It has four main
interop suggestions.

00:00:32.439 --> 00:00:35.400
First, Kotlin is all
about null safety.

00:00:35.400 --> 00:00:37.710
To support this in the
Java programming language,

00:00:37.710 --> 00:00:40.140
add the annotations
Nullable and NonNull

00:00:40.140 --> 00:00:42.210
everywhere in your public API.

00:00:42.210 --> 00:00:45.270
Kotlin will use these to
make your API null safe.

00:00:45.270 --> 00:00:46.860
Now, what happens if you don't?

00:00:46.860 --> 00:00:49.860
Well, Kotlin makes what's
called a platform type.

00:00:49.860 --> 00:00:52.860
It's a heisen type that
can be null or non-null,

00:00:52.860 --> 00:00:56.490
and it leads to heisen bugs
and NullPointerExceptions.

00:00:56.490 --> 00:00:58.500
When you do use
annotations, Kotlin

00:00:58.500 --> 00:01:00.900
will make your API
null safe, fixing

00:01:00.900 --> 00:01:03.260
the NullPointerExceptions.

00:01:03.260 --> 00:01:05.810
Getters and setters are
important for interop.

00:01:05.810 --> 00:01:09.020
Kotlin requires they
follow the bean style--

00:01:09.020 --> 00:01:12.020
getName, setName,
isActive, setActive.

00:01:12.020 --> 00:01:14.930
When you do this, Kotlin will
elevate them to properties,

00:01:14.930 --> 00:01:17.150
so they can be used naturally.

00:01:17.150 --> 00:01:19.700
Next, Kotlin adds
support for lambdas,

00:01:19.700 --> 00:01:23.210
and you can interop with them by
using single abstract methods.

00:01:23.210 --> 00:01:24.920
Examples of single
abstract methods

00:01:24.920 --> 00:01:26.660
are runnable and callable.

00:01:26.660 --> 00:01:29.090
When defining your
API, make sure to put

00:01:29.090 --> 00:01:31.660
your single abstract
method parameters last.

00:01:31.660 --> 00:01:34.730
Then Kotlin developers can
make full use of lambdas.

00:01:34.730 --> 00:01:37.480
And finally, Kotlin has
some different keywords,

00:01:37.480 --> 00:01:39.860
and it's important to
avoid name conflicts.

00:01:39.860 --> 00:01:42.830
If you do provide a function
called is, developers can still

00:01:42.830 --> 00:01:46.470
call it by saying back tick is
back tick, but let's be honest,

00:01:46.470 --> 00:01:48.260
that is not a good look.

00:01:48.260 --> 00:01:51.350
For a full list of keywords,
check out the interop guide.

00:01:51.350 --> 00:01:53.120
To help support
interop, we've added

00:01:53.120 --> 00:01:56.090
tooling to Android
Studio 3.2, introducing

00:01:56.090 --> 00:01:59.390
lint checks that will warn
you for all interop issues.

00:01:59.390 --> 00:02:02.120
To use them, enable the
interoperability group

00:02:02.120 --> 00:02:03.380
in Gradle.

00:02:03.380 --> 00:02:05.600
Another tool for
Kotlin is Dokka.

00:02:05.600 --> 00:02:07.190
If you're generating
documentation

00:02:07.190 --> 00:02:10.699
with the Java doc tool, you
can migrate to using Dokka.

00:02:10.699 --> 00:02:12.470
Dokka will generate
your documentation

00:02:12.470 --> 00:02:14.660
and it supports both languages.

00:02:14.660 --> 00:02:17.370
There is a lot you can do to
make sure your existing code is

00:02:17.370 --> 00:02:18.470
Kotlin friendly.

00:02:18.470 --> 00:02:21.014
In this video, I covered how
to follow the interop guide,

00:02:21.014 --> 00:02:22.430
and we'll cover
how to make Kotlin

00:02:22.430 --> 00:02:24.900
specific APIs in a later video.

00:02:24.900 --> 00:02:25.830
Thanks for watching.

00:02:25.830 --> 00:02:27.380
See you again next time.

00:02:27.380 --> 00:02:29.830
[MUSIC PLAYING]

