WEBVTT
Kind: captions
Language: en

00:00:00.570 --> 00:00:04.090
&gt;&gt; FISHER: All right. So, let's begin. This
session is: Going Social with the YouTube

00:00:04.090 --> 00:00:11.429
APIs. I am Jeff Fisher, and this is Johann
Hartmann, we're presenting today. If you can

00:00:11.429 --> 00:00:20.210
read this way in the back, we do have a board
you can post questions to. It's tinyurl.com/io-social-youtube.

00:00:20.210 --> 00:00:28.650
So while you're pulling that up, I have to
continue this. So, last year I made this big

00:00:28.650 --> 00:00:33.110
stint about what the t-shirts meant and I
pointed out how there were ASCII characters

00:00:33.110 --> 00:00:38.559
for Google IO, and of course it turned out
that it didn't actually say Google IO, they

00:00:38.559 --> 00:00:42.989
say Google KO because one of the dots was
the wrong kind. So, that's the joke if you

00:00:42.989 --> 00:00:47.710
don't know for why this guy has a spray can
on the back and really faintly at the end

00:00:47.710 --> 00:00:51.879
here you can see KO kind of sprayed on. So
if you haven't caught that yet. That's--that's

00:00:51.879 --> 00:01:00.829
a continuation of my disaster last year of
explaining the shirt that was wrong. Okay.

00:01:00.829 --> 00:01:05.850
So we all have the moderator up and running.
Okay. Good. You will be able to also ask questions

00:01:05.850 --> 00:01:06.689
in person but if you're shy or just don't
like to talk to me. So we're going to do a

00:01:06.689 --> 00:01:15.750
little poll in the audience to make sure you
never sleep, I know it's the second day, I'm

00:01:15.750 --> 00:01:22.960
pretty tired too. So, who here has used the
YouTube before? Okay. So you're not all asleep,

00:01:22.960 --> 00:01:30.540
that's good. So who here has used the YouTube
API before? Ah, good number, good number.

00:01:30.540 --> 00:01:36.040
Okay. So how many of you have noticed on YouTube
that we have the social events like what your

00:01:36.040 --> 00:01:39.390
friends are doing or what you're doing like
on channel page. Anyone seen that little box?

00:01:39.390 --> 00:01:45.040
Okay. Okay, 'cause now we're going to merge
those two and this is very rare. Is anyone

00:01:45.040 --> 00:01:51.540
here actually got in those events through
our API yet? Good! You're in the right talk

00:01:51.540 --> 00:01:57.600
'cause that's what we're going to talk about.
So, yes, this talk is about, how we're going

00:01:57.600 --> 00:02:03.450
to get the social events and make them available
to you as a developer. And we're going to

00:02:03.450 --> 00:02:06.280
do this mostly by going through examples,
because examples are better than just a bunch

00:02:06.280 --> 00:02:15.910
of slides about XML. And we're going to have--one
example first that's just really basic, you

00:02:15.910 --> 00:02:19.360
know, okay, I'm going to retrieve activity
for a user, I'm going to retrieve their friends

00:02:19.360 --> 00:02:24.390
activity and I'm going to retrieve some information
about that, and that's all done in PHP. We

00:02:24.390 --> 00:02:28.300
also have a second sample. It's a little more
involved which also has a PHP component to

00:02:28.300 --> 00:02:33.410
display information but this example goes
a little bit above and beyond, just a simple

00:02:33.410 --> 00:02:38.080
one user use case and it lets you figure out
how you can build an app that will actually

00:02:38.080 --> 00:02:41.690
scale the support, you know, assign like millions
of users that you want to keep track of all

00:02:41.690 --> 00:02:44.280
their YouTube activity on. And that's one
is going to have a Java component to help

00:02:44.280 --> 00:02:54.100
us with the whole scaling and speed thing.
Okay. So, why do you care about YouTube activity?

00:02:54.100 --> 00:02:58.720
Why are you here? Well, there are some new
things you can do with it. For example, you

00:02:58.720 --> 00:03:02.950
can bring these events into existing social
networks, such as, you know, status updates

00:03:02.950 --> 00:03:09.770
or stories or what have you. You can bring
some information to social applications, devices,

00:03:09.770 --> 00:03:14.020
gadgets, all that good stuff, just exposing
it to your users in another way. There are

00:03:14.020 --> 00:03:19.070
lots of aggregators out there. It's very popular
right now. You can also use it obviously to

00:03:19.070 --> 00:03:24.290
create a better YouTube search experience.
So, if you know that my friend rated something

00:03:24.290 --> 00:03:29.450
five stars, then perhaps you want to recommend
that video to me more highly and the search

00:03:29.450 --> 00:03:32.320
results or highlight that somehow because,
you know, that probably more interesting to

00:03:32.320 --> 00:03:38.660
me than just a normal video if someone I knew
liked it. And then of course, you can also

00:03:38.660 --> 00:03:43.770
educate your app about what a user is doing
on-site. So, if you have a really awesome,

00:03:43.770 --> 00:03:49.450
say, Android or iPhone app, you don't really
know what a user does on YouTube when they're

00:03:49.450 --> 00:03:54.660
not using your Apps. So, how can you train
that App to respond to those events? Well

00:03:54.660 --> 00:03:58.500
that's what these activity feeds are good
for. So, for example, I just rated this five

00:03:58.500 --> 00:04:03.240
stars again, we go back to that example, and
I'm out and about, you know, when I have my

00:04:03.240 --> 00:04:07.410
little Android device, and you know, I'm not
lying. I actually, do have one. It will be

00:04:07.410 --> 00:04:11.280
really useful if I have this really awesome
App for it that already integrates with YouTube.

00:04:11.280 --> 00:04:19.049
If it was like, "Hey, here's all the things
you recently rated highly or that you favorited."

00:04:19.049 --> 00:04:21.420
I mean, now I guess with cupcake, you can
get your favorites on the YouTube App. But

00:04:21.420 --> 00:04:24.270
you know, understand like, you can actually
learn from what user is doing and provide

00:04:24.270 --> 00:04:30.850
useful suggestions in your App which is cool.
Okay. So, and I mentioned this is--or maybe

00:04:30.850 --> 00:04:36.800
I didn't quite mention it. But we're using
these APIs, called the YouTube data API, and

00:04:36.800 --> 00:04:49.560
its very similar to or other Google data APIs,
if you're familiar with them. Speaking of

00:04:49.560 --> 00:05:00.430
which, how many people have used one of our
data API spreadsheets. Okay. All they own.

00:05:00.430 --> 00:05:12.040
Its okay, you're familiar. Okay. So it's based
Atom Publishing Protocol which, if you're

00:05:12.040 --> 00:05:25.860
not familiar what that is, it's a lot of XML.
So, our API is a lot of XML. We're working

00:05:25.860 --> 00:05:36.280
to make that better particularly, with doing
more things with Jason (ph). There was a talk

00:05:36.280 --> 00:05:48.410
the first day, so if you didn't see that,
you already missed it. But we are going in

00:05:48.410 --> 00:06:01.000
that direction. So it's going to be less work
in the future. But for right now, it's XML.

00:06:01.000 --> 00:06:10.510
I'm not going to go into too much detail about
the API but you should know it's a version,

00:06:10.510 --> 00:06:17.490
so 2 is greater than 1, yeah. Version 2 is
the current version and has also some goodies

00:06:17.490 --> 00:06:28.110
like GeoSearch, the most activity stuff we're
talking about today. Version 1 doesn't have

00:06:28.110 --> 00:06:39.040
them, so don't use it. The API basically allows
us to look at metadata of all these different

00:06:39.040 --> 00:06:46.590
things on YouTube users, channels, videos,
comments, what have you. And also allows us

00:06:46.590 --> 00:06:57.490
to programmatically create and manage them
so you now can create videos for a user. You

00:06:57.490 --> 00:07:08.180
can favorite a video on behalf of a user.
You can also, of course, upload a video because

00:07:08.180 --> 00:07:28.970
what would a YouTube API be if it didn't upload
videos. And then, of course, you also probably

00:07:28.970 --> 00:07:47.030
don't want to deal with XML anymore than I
want to deal with XML, so we have a number

00:07:47.030 --> 00:07:57.440
of client libraries in your favorite languages.
I actually have a really lightweight thing

00:07:57.440 --> 00:08:14.639
I wrote for Ruby, if you're a Rubyist out
there. So, you don't have to go with the XML

00:08:14.639 --> 00:08:29.820
directly usually. But, like I said, this is
not a talk about YouTube API, in general.

00:08:29.820 --> 00:08:45.560
That was last year. It's on YouTube, if you
want to watch it. But this is a talk about

00:08:45.560 --> 00:09:01.460
Activity Feeds that we've done recently. So,
Activity Feeds on YouTube, if you been to

00:09:01.460 --> 00:09:21.230
your channel page, you might have seen this
little box, and has stuff that you've recently

00:09:21.230 --> 00:09:39.970
done. There's also a similar box on the homepage
you can configure of your friend activities,

00:09:39.970 --> 00:09:54.200
all your friends, what they do. And, yes,
there is a giant privacy settings link. Maybe

00:09:54.200 --> 00:10:10.320
not super giant but its there, its boxed in
a red for you. So if you'd think all these

00:10:10.320 --> 00:10:21.690
stuffs sounds scary, you don't want applications
running about your activity on YouTube you

00:10:21.690 --> 00:10:39.740
can go in there and check all these, and none
of what I say in this talk will apply to your

00:10:39.740 --> 00:10:55.589
user account anymore, so, there it is. To
give an actual demo of this, and that to prove

00:10:55.589 --> 00:11:04.890
that it works, let's have some screen shots,
I'm going to have Johann navigate me through

00:11:04.890 --> 00:11:21.060
here. So, here we have spaces. So

00:11:21.060 --> 00:11:35.220
we have a recent activity box down there,
like I promised. And I want to go to do something

00:11:35.220 --> 00:11:38.649
like go favorite a video.
&gt;&gt; HARTMANN: All right, you want to go...

00:11:38.649 --> 00:11:40.230
&gt;&gt; FISHER: Find something clever, I don't
know.

00:11:40.230 --> 00:11:46.120
&gt;&gt; HARTMANN: Moving up, yeah.
&gt;&gt; FISHER: Well, that's kind of interesting.

00:11:46.120 --> 00:11:53.470
That's not a very good thumbnail 'cause it's
catching people. Okay.

00:11:53.470 --> 00:12:00.330
&gt;&gt; HARTMANN: So there it is.
&gt;&gt; FISHER: So you're on favorites, you have

00:12:00.330 --> 00:12:10.450
to go back to this, click on like IO demo,
the user name, channel page. So, look! They

00:12:10.450 --> 00:12:17.660
actually showed up right away, yeah. Okay.
So, the social stuff actually works. So now

00:12:17.660 --> 00:12:32.459
when I show a demo we build that uses our
API to attach this self-same information.

00:12:32.459 --> 00:12:39.260
So if you log-in, you do this with a sub,
it's all documented. Basically, we redirect

00:12:39.260 --> 00:12:46.170
to a YouTube and we have little crypto key
to make sure that we're from the right domain

00:12:46.170 --> 00:12:54.180
name, and we get back here again, now we have
access to the users feeds. And as you can

00:12:54.180 --> 00:13:04.130
see, this is the same information that was
in that box but it's on a little site, and

00:13:04.130 --> 00:13:21.529
you can, you know, do the embedded player
and whatnot. And also, of course, you can

00:13:21.529 --> 00:13:30.160
do a friend activity, you want to click on
that and, you know, you can see what your

00:13:30.160 --> 00:13:44.390
friends are doing. But these, of course, have
to be people that you've actually friended

00:13:44.390 --> 00:13:51.649
on YouTube. And they also allow you to search
for arbitrary users.

00:13:51.649 --> 00:13:59.430
&gt;&gt; How about from your g-mail? Can you search
for g-mail context?

00:13:59.430 --> 00:14:07.440
&gt;&gt; FISHER: Okay. So the question was can you
search for g-mail context? And the answer

00:14:07.440 --> 00:14:10.220
is no, 'cause unfortunately, you can link
a Google account, a g-mail account, to a YouTube

00:14:10.220 --> 00:14:19.560
profile and there might be some crazy auto-suggest
stuff where you can figure out their YouTube

00:14:19.560 --> 00:14:33.800
account through that, but you actually, as
of right now, still have to friend them explicitly

00:14:33.800 --> 00:14:45.630
on YouTube, like we don't automatically share
your stuff unless you go to YouTube and actually

00:14:45.630 --> 00:14:47.910
approve.
&gt;&gt; [INDISTINCT]

00:14:47.910 --> 00:14:59.070
&gt;&gt; FISHER: Yeah, yeah. So gentleman was just
saying that an open social list and useful

00:14:59.070 --> 00:15:04.560
stuff about finding most contact and whatnot.
So, the YouTube has--has a lot to work on

00:15:04.560 --> 00:15:16.430
in that aspect. We can talk about more about
that later as far as how are we trying to

00:15:16.430 --> 00:15:29.500
merge the idea of YouTube accounts and Google
accounts and make these actually useful to

00:15:29.500 --> 00:15:36.220
you and not have like a million different
friends lists. That's little bit outside the

00:15:36.220 --> 00:15:46.300
scope of activities right now, but it's a
very good point. And part of what we're going

00:15:46.300 --> 00:15:52.230
to talk about here is how if you are some
other network that already has contacts, so

00:15:52.230 --> 00:16:04.420
if you're in MySpace per se, you already a
friend graph and how can you use that friend

00:16:04.420 --> 00:16:14.399
graph and leverage that against YouTube without
actually having some deep integration on YouTube's

00:16:14.399 --> 00:16:24.610
part. So here! So we showed you the demos,
so its feeds work, and this is just a URL,

00:16:24.610 --> 00:16:33.740
you retrieve, this is a YouTube feeds, API
users. This is documented. I don't expect

00:16:33.740 --> 00:16:40.820
you to memorize this right now. So we just
retrieve those events from the API just like

00:16:40.820 --> 00:16:49.860
how the box retrieves them from our database,
and there's a very similar URL for a friend

00:16:49.860 --> 00:17:02.089
activity, and yes, retrieve your friend's
activity. But as was mentioned, right now

00:17:02.089 --> 00:17:10.919
it's limited to YouTube friends which isn't
the most useful thing in the world because

00:17:10.919 --> 00:17:22.339
not everyone remembers to friend people on
YouTube if they're already friended on Google

00:17:22.339 --> 00:17:39.649
contact or Google talk or Orchid or Hi-5 or
MySpace or whatnot. So, yeah, by getting ahead

00:17:39.649 --> 00:17:54.850
of ourselves, the activities that we currently
expose are usually related around videos,

00:17:54.850 --> 00:17:59.649
so like the video rated, shared, favorited
events. We also have some user activities.

00:17:59.649 --> 00:18:14.149
So, if you add a friend, we'll tell you or
tell you--if you go reflect that, this user

00:18:14.149 --> 00:18:25.080
just add a friend, similarly, if they add
the users' description. But what is it look

00:18:25.080 --> 00:18:33.509
like? What do you actually seeing in this
XML that I promised you, words entry, that's

00:18:33.509 --> 00:18:48.239
how Atom Pub works, every item has its own
entry, and each of them has this ID which

00:18:48.239 --> 00:19:03.289
is this big long string. Don't put too much
thought to this, but it will be unique, and

00:19:03.289 --> 00:19:13.239
that's what important. We also have updated
element. We shall tell you when this event

00:19:13.239 --> 00:19:23.340
took place, so it's, you know, useful for
sorting and organizing. We have a category.

00:19:23.340 --> 00:19:34.999
We shall tell you what type of event it is.
This is a user upload, a video upload to user

00:19:34.999 --> 00:19:46.019
channel. And we have a short descriptive text
and a title that you can just display verbatim

00:19:46.019 --> 00:19:54.100
to the user to, you know, tell them what the
event was, in this case Googledevelopers has

00:19:54.100 --> 00:20:02.009
uploaded a video. And then we have the YouTube
username and its own elements, you have to

00:20:02.009 --> 00:20:16.399
rejects that out. And, of course, this is
a video upload we'll give you the video ID.

00:20:16.399 --> 00:20:26.450
Now we're only giving you the video ID for
this video, we're not giving you the video

00:20:26.450 --> 00:20:40.919
title, its rating, its comments, all that
stuff because we don't really want to pollute

00:20:40.919 --> 00:20:56.330
this user feed 'cause when talk about a little
bit will be, you know, how you can intelligently

00:20:56.330 --> 00:21:11.830
cache that information. And that's all we
have. So, there's a little bit more information

00:21:11.830 --> 00:21:23.720
in, for example, the video rating event. We
will actually tell you what rating the user

00:21:23.720 --> 00:21:38.489
gave that video. But we'll still are going
to tell you any other video metadata about

00:21:38.489 --> 00:21:53.919
it. And of course, if it's a user event, we
will tell you the YouTube user name of the

00:21:53.919 --> 00:22:08.820
user they interacted with. Okay. So that's
what this--this is just inside of a giant

00:22:08.820 --> 00:22:27.489
XML feed, do not try to read this. I'm not
showing you what I saved you from having to

00:22:27.489 --> 00:22:41.119
try to digest. So that was a lot of XML, and
so here are some kittens 'cause I don't like

00:22:41.119 --> 00:22:53.059
XML by I do like kittens, and so clear your
minds of all that XML, I don't want to talk

00:22:53.059 --> 00:23:06.200
about it too much anymore. So, how did our
sample work? Well, we have our server, it's

00:23:06.200 --> 00:23:12.649
host/hostserver, incidentally. And once the
PHP Website, and this PHP Website is going

00:23:12.649 --> 00:23:28.909
to go into the cloud, and access YouTube API,
and retrieve the activity information. And

00:23:28.909 --> 00:23:45.379
as it does that, it's going to also, like
I said, you don't get the video ID back, so

00:23:45.379 --> 00:23:53.269
it has to make addition calls to the API to
populate all the video metadata for each of

00:23:53.269 --> 00:24:00.279
those videos, and then we store that video
metadata in a nice caching system like memcached

00:24:00.279 --> 00:24:09.789
which I hardly recommend to you--it's not
just because we hired the guy who wrote it

00:24:09.789 --> 00:24:23.340
which is a really good system and it's free.
So, we store information in memcache and then

00:24:23.340 --> 00:24:31.549
we render all of that to our front-end--which
is written in JQuery which is also awesome

00:24:31.549 --> 00:24:51.499
by the way--and we always use a compact JSON
format that we created on the fly to do that

00:24:51.499 --> 00:24:59.419
'cause there's a lot of information in our
XML feeds right now that is usually extraneous

00:24:59.419 --> 00:25:11.229
to what you want to display on the site. Working
on fixing that in a protocol level but for

00:25:11.229 --> 00:25:19.869
right now, you can just kind of dig out what
you need and render it yourself. So, the things

00:25:19.869 --> 00:25:32.739
you've got to keep in mind here is you want
to be smart, you know, you want to request

00:25:32.739 --> 00:25:42.090
Metadata for each of this items you're getting
back because, you know, telling me that I--that

00:25:42.090 --> 00:25:47.460
my friend just favorited video X53976O isn't
very useful to me. And you can retrieve all

00:25:47.460 --> 00:26:00.859
that Metadata fortunately by the ID which
we do give you and similarly you can retrieved

00:26:00.859 --> 00:26:04.580
all the profile information just by using
YouTube user name. And so, as you're doing

00:26:04.580 --> 00:26:12.099
this you can retrieved--you can request only
what you need as you need it which, you know,

00:26:12.099 --> 00:26:17.700
sort of lead us into the next part which is
Be Scalable. So, if you have a thousand activity

00:26:17.700 --> 00:26:25.149
items but no ones looking at them because
you just pulled them but they're still no

00:26:25.149 --> 00:26:29.590
users looking at that yet. You don't really
need to retrieve that Metadata 'cause no ones

00:26:29.590 --> 00:26:36.479
going to look at it and, you know, why incur
the penalty of HTP request if you don't have

00:26:36.479 --> 00:26:45.859
to. So, what you should do is when you do
make request for your Metadata is you cache

00:26:45.859 --> 00:26:47.749
that somewhere, usually one to two hours is
safe and you're trading freshness here for

00:26:47.749 --> 00:26:53.499
basically speed and scale and, you know, obviously
if you have been teller talks especially app

00:26:53.499 --> 00:27:00.249
engines they'll tell you, hitting a local
cache is a lot cheaper than making an external

00:27:00.249 --> 00:27:10.149
HTTP request to our API. And, once again I
do recommend using memcached to do this. And

00:27:10.149 --> 00:27:15.789
the last caveat I really want to mention with
this sample is, you know, you got, you want

00:27:15.789 --> 00:27:24.529
to be robust. So, there's a lot of different
areas that can happen whenever you're doing

00:27:24.529 --> 00:27:29.739
that quick programming that can actually get
interrupted and even like our servers can

00:27:29.739 --> 00:27:36.529
temporarily go down or loose your session
or whatever. So, just be graceful when service

00:27:36.529 --> 00:27:47.570
errors happen to the API for whatever reason
and provide nice messages to your users. I

00:27:47.570 --> 00:27:57.200
mean, this, this is kind of a general good
programming practice but, you know, we ran

00:27:57.200 --> 00:28:06.229
into some problems like with people not displaying
useful information because our API is pretty

00:28:06.229 --> 00:28:15.409
decent in that like for example, if YouTube
is read only mode--you know that happens a

00:28:15.409 --> 00:28:25.629
little bit often for my taste--you can detect
that in the API because we'll give you back

00:28:25.629 --> 00:28:36.139
an air message that actually says pretty much,
you know, "YouTube is in read only mode, you

00:28:36.139 --> 00:28:44.619
cannot upload right now but you can still
read." And so, you can display something useful

00:28:44.619 --> 00:28:53.539
to the user if they're trying to upload a
video and it didn't work for example. But

00:28:53.539 --> 00:29:01.499
to talk about the actual PHP Website itself,
I'm going to invite Johann up here since he

00:29:01.499 --> 00:29:10.039
wrote a lot of it--he does a lot of work with
our PHP client libraries--so, he's much more

00:29:10.039 --> 00:29:16.539
familiar.
&gt;&gt; HARTMANN: So, yes I wanted to start with

00:29:16.539 --> 00:29:27.019
just a general question on, how many of you
have actually used one of our client libraries

00:29:27.019 --> 00:29:37.159
before? Okay, only a few people. Okay, so,
I'm going to go into it a little bit about

00:29:37.159 --> 00:29:52.599
our client libraries work and why we encourage
you to use them as well. But for this application

00:29:52.599 --> 00:30:00.739
the PHP Website is a very simple component,
I'm going to talk about this basic front-end

00:30:00.739 --> 00:30:10.940
twice. So, this is the first time I'm presenting
you with the overall structure of how we designed

00:30:10.940 --> 00:30:17.109
this and then we're going to reuse the same
front-end in a more complex application and

00:30:17.109 --> 00:30:25.019
at which point, I would just skip all the
basics because you should already know them.

00:30:25.019 --> 00:30:33.249
In general, the kind of things that we need
to do is we need to create sort of a service

00:30:33.249 --> 00:30:42.009
object that we use to connect to YouTube.
You'll notice that the word Zen there that's

00:30:42.009 --> 00:30:48.349
because our PHP client library is part of
the Zen framework--I don't know how many people

00:30:48.349 --> 00:30:56.519
are familiar with the Zen framework but it's
available also as a separate component, a

00:30:56.519 --> 00:31:04.570
separate download so you don't need to download
the entire framework. And this is a common

00:31:04.570 --> 00:31:08.539
use case for all the other client libraries,
you create some type of service object and

00:31:08.539 --> 00:31:24.669
use that to interact with our API's. The other
function obviously is
we want to fetch the activity for a user or

00:31:24.669 --> 00:31:32.619
for their friends. We fetch metadata from
YouTube API--so that was in the previous diagram--we

00:31:32.619 --> 00:31:39.869
are actually making two requests because we
don't have the metadata yet, we just have

00:31:39.869 --> 00:31:48.700
a video ID in the event that Jeff showed.
So, we need to go out again and get the metadata

00:31:48.700 --> 00:31:55.629
for the API--for the video. We create our
own JSON feeds inside the application just

00:31:55.629 --> 00:32:02.559
for performance and also because we're using
JQuery front-end. So, it's very easy to work

00:32:02.559 --> 00:32:06.679
with JSON and JQuery obviously and we're only
interested in displaying specific information

00:32:06.679 --> 00:32:14.940
not everything about the video. And then,
you know, we use memcached so, I'm not going

00:32:14.940 --> 00:32:23.999
to explain that too well but memcached is
very easy to use in PHP, you just get stuff

00:32:23.999 --> 00:32:36.749
out and set things in, very simple. So, what
we're doing here I'm going to explain how

00:32:36.749 --> 00:32:42.389
you would use the YouTube service object that
you need to communicate to the API with. This

00:32:42.389 --> 00:32:52.129
code is a little bit different because we're
actually using authentication here because

00:32:52.129 --> 00:32:57.979
we need you, to get a users friend activity,
you need to make an authenticated request.

00:32:57.979 --> 00:33:08.759
So, this is why we're using this Zen_Gdata_Authsub
object here. Authsub--how many of you are

00:33:08.759 --> 00:33:19.839
familiar with Authsub authentication? Okay,
only a few. So, I'll explain that a little

00:33:19.839 --> 00:33:28.960
bit. So, in general for API's we have two
forms of authentication, there's a client

00:33:28.960 --> 00:33:41.749
login based authentication which would be
for desktop apps or you know devices and that's

00:33:41.749 --> 00:33:54.099
just simply sending username and password
to our API and getting back a string and then

00:33:54.099 --> 00:34:01.869
you use that in the header and you're authenticated.
Authsub is different, it's more sort of a

00:34:01.869 --> 00:34:07.359
token or proxy base authentication where your
application basically sends a user over to

00:34:07.359 --> 00:34:18.460
YouTube--which is what you've seen when we
demo this--they sign in on YouTube and then

00:34:18.460 --> 00:34:26.690
they get set back to your application with
a Token and you store that Token and make

00:34:26.690 --> 00:34:34.730
authenticated request, basically on their
behalf. So, what we're doing here in this,

00:34:34.730 --> 00:34:43.770
this line of code is we're basically creating
an HTTP client which is going to handle our

00:34:43.770 --> 00:34:49.530
communications on the HTTP level and we're
passing in just the session Token that we've

00:34:49.530 --> 00:34:59.720
received after the user has sign-in to YouTube.
And then we just set the client in the constructor

00:34:59.720 --> 00:35:06.770
of the Zen_Gdata_YouTube object and now we're
basically authenticated. You'll notice here

00:35:06.770 --> 00:35:15.650
though that there's some other parameter that
are actually very important for using the

00:35:15.650 --> 00:35:23.820
YouTube API's. So, in the second line there
you'll see clientId and developerKey, these

00:35:23.820 --> 00:35:32.150
are very important, you need to use a clientId
and a developerKey for any authenticated request

00:35:32.150 --> 00:35:44.630
that you're making to YouTube. Of course if
you're just doing a read operation on YouTube,

00:35:44.630 --> 00:35:57.140
so you just want to get a feed or something
that doesn't require any authentication--you

00:35:57.140 --> 00:36:09.420
don't have to worry about any of these stuff--you
would just use the second line here, so you

00:36:09.420 --> 00:36:16.140
just create a new Zen_Gdata_YouTube object
and you go from there. And lastly, you know,

00:36:16.140 --> 00:36:22.840
as Jeff mentioned earlier, he have two versions
of API. So, we will set the version to two

00:36:22.840 --> 00:36:32.600
so that we can access the activity information.
Here's a slide that shows how this would work

00:36:32.600 --> 00:36:37.920
in other client libraries. So, like we've
mentioned we use PHP because I've written

00:36:37.920 --> 00:36:50.480
a lot of the extensions and it's very straightforward
for web stuff but you know if you prefer Java.net,

00:36:50.480 --> 00:36:59.330
Python, ObjectiveC--I don't have one here--but
it's generally the same. So, you create a

00:36:59.330 --> 00:37:21.710
kind of a service object and then you communicate
to our API's with that. And, you know, all

00:37:21.710 --> 00:37:32.380
this client libraries worked for other API's
as well so it's all very similar. So, you

00:37:32.380 --> 00:37:37.100
can make requests to calendar, YouTube, etc.
Getting activity out is actually very simple

00:37:37.100 --> 00:37:43.620
it's just this method, "getActivityForUser"
and you just pass in the user name that you

00:37:43.620 --> 00:37:52.820
want activity for --we support up to twenty
username so you can get aggregate activity.

00:37:52.820 --> 00:38:04.390
What you get back as an activity feed and
this is another characteristic of our client

00:38:04.390 --> 00:38:16.960
libraries is that they abstract a lot of the
XML and transform it into objects for you.

00:38:16.960 --> 00:38:28.250
So, that's a lot easier to use, a lot of times,
so in this case we're getting an activity

00:38:28.250 --> 00:38:34.690
feed. That feed is going to have entries,
entries are going to have properties so it

00:38:34.690 --> 00:38:43.150
mirrors the Xmls structure exactly. To get
friend activities, you know, you just use

00:38:43.150 --> 00:38:52.000
the get friend activity for current user method.
The reason why there's no parameter here is

00:38:52.000 --> 00:39:02.110
because you can only use this when you're
authenticated and at this point the client

00:39:02.110 --> 00:39:10.580
library will know your user so, you don't
have to pass in anything and we'll just get

00:39:10.580 --> 00:39:20.800
all your friends activities. Now, getting
video metadata is kind of a multi step process

00:39:20.800 --> 00:39:33.640
here because like Jeff mentioned earlier we're
trying to be robust. Or, we want to count

00:39:33.640 --> 00:39:45.020
on errors, right, because you could be fetching
video information the same second that somebody

00:39:45.020 --> 00:39:53.160
deletes the video on YouTube so you want to
be able to account for this kind of things.

00:39:53.160 --> 00:39:58.800
So, we're getting our service--I have abstracted
this in the application in just a simple method

00:39:58.800 --> 00:40:10.750
and by the way, all the source code for this
is available. So, if you want to look at it

00:40:10.750 --> 00:40:26.320
later in detail, we'll show you the link.
So, then what we're doing is we're just using

00:40:26.320 --> 00:40:37.470
to get video Entry method here, passing in
just the string that represents the videoID

00:40:37.470 --> 00:40:49.830
and this obviously was the entry event. And
next thing we're doing is like Jeff mentioned,

00:40:49.830 --> 00:41:00.700
we're creating our own JSON here, this is
very simple to do and PHP just create basically

00:41:00.700 --> 00:41:10.940
create an empty array and then you use the
JSON encode function. So, in this array I've

00:41:10.940 --> 00:41:16.380
skipped a bunch of the code but we're just
actually getting the relevant information

00:41:16.380 --> 00:41:25.400
that we care about so we get the ID, we get
the title and so on. All these stuff that

00:41:25.400 --> 00:41:35.470
we want to display in our front-end. All of
these methods are basically getVideo X so

00:41:35.470 --> 00:41:44.400
there's a ton of method inside the video entry
object that you can use to access the metadata,

00:41:44.400 --> 00:41:54.330
whether the video is private all this kind
of stuff. And then, you know, some skipping

00:41:54.330 --> 00:42:05.790
a little bit of stuff and then of course we
want to handle any kind of exceptions that

00:42:05.790 --> 00:42:12.070
may happen. This is how you would do this
with our PHP client library, so you want to

00:42:12.070 --> 00:42:22.200
catch an HTTP exemption, get their response
and then get the status and that will actually

00:42:22.200 --> 00:42:37.580
tell you, the actual HTTP error message that--actually
that's the error code, I'm sorry, you can

00:42:37.580 --> 00:42:45.200
also get this string of the message. And then
we check on that code if, you know, if it's

00:42:45.200 --> 00:42:49.320
a 500 error or any other error we just say,
"video is not available." The reason why we

00:42:49.320 --> 00:43:01.260
were doing this is because we want to pass
into our JSON feed some kind of string that

00:43:01.260 --> 00:43:11.620
we can interpret in JQuery so we can print
out a useful error message here instead of

00:43:11.620 --> 00:43:18.770
just sort of an empty object. And that's basically
it for how this application works out. The

00:43:18.770 --> 00:43:28.420
code is on GoogleCodeSamples.com you can just
go to the PHP tab and find it there. So, next

00:43:28.420 --> 00:43:40.270
we're go on to part two, talk about scaling,
so I'll hand it over to Jeff.

00:43:40.270 --> 00:43:53.570
&gt;&gt; FISHER: okay, so we've been through the
basics of how you can build this app and certainly

00:43:53.570 --> 00:44:08.760
it's not too hard with out client library.
But what happens if you have a million users

00:44:08.760 --> 00:44:15.880
or what happens if you have your own friend
graph or terror of terrors, what happen if

00:44:15.880 --> 00:44:17.210
you have million users and your own friend
graph. Well, are you out of luck? Well, no,

00:44:17.210 --> 00:44:23.870
so we do actually have a solution for this
that we are announcing today and I think it's

00:44:23.870 --> 00:44:34.960
even in a documentation yet, so--and that
SUP. And you know, what's SUP? Well, not much,

00:44:34.960 --> 00:44:50.350
I know. But what is SUP? Okay, so, it's the
Simple Update Protocol and the Simple Update

00:44:50.350 --> 00:44:58.690
Protocol is the simple and compact 'ping feed'
that web services can produce in order to

00:44:58.690 --> 00:45:12.170
alert the consumers of their feeds when a
feed has been updated. So, this is a project

00:45:12.170 --> 00:45:21.500
on Google code hosting. It's actually done
by the friend feed guys, who used to be Googlers.

00:45:21.500 --> 00:45:31.530
So, and also, I should mention that friend
feed was able to integrate this new thing

00:45:31.530 --> 00:45:38.230
that we just launched like, yesterday. So,
they're pretty fast too, or it's just that

00:45:38.230 --> 00:45:44.050
easy. So, anyway, SUP is solving this problem.
So, when you have a million users, you know,

00:45:44.050 --> 00:45:45.000
how do you get their activity? Well, you could
pull each of their individual one million

00:45:45.000 --> 00:45:49.540
activity feeds every few minutes, and see
if they've done anything. That's the one million

00:45:49.540 --> 00:45:52.690
HTTP request and are, that most of the users
won't have done anything, especially at like,

00:45:52.690 --> 00:45:54.060
five AM. Well, maybe at five AM. But--so wouldn't
it be nice if we had one simple little JSON

00:45:54.060 --> 00:45:55.560
feed that just contain the big list of all
the users that actually have done something

00:45:55.560 --> 00:45:55.930
in the last five minutes. So, that's exactly
what SUP is. So, if you go ahead and retrieve

00:45:55.930 --> 00:45:56.240
your SUP feed which is just gdata.youtube.com/sup,
you get back this thing that's--like I said

00:45:56.240 --> 00:45:58.140
JSON and has a really simple on his construction.
So, we have an updated time and that's just

00:45:58.140 --> 00:46:06.030
going to tell you when the feed was last refreshed
so you can use that to check if it's changed,

00:46:06.030 --> 00:46:06.520
since the last time you pulled it. We have
a sense time, and this identifies when the

00:46:06.520 --> 00:46:08.300
activity conveyed in this SUP feed began,
so when the beating of the window that the

00:46:08.300 --> 00:46:14.740
SUP feed is for, we have a period which is
in seconds, so 300 seconds; it's five minutes

00:46:14.740 --> 00:46:17.680
which is the default. Then we have other periods
and links to those--but most important thing

00:46:17.680 --> 00:46:24.110
is we have updates. So, updates is a two [INDISTINCT]
here of two different hash codes. The second

00:46:24.110 --> 00:46:33.070
which is the time code hash, which you can
just ignore, it's not that useful, but the

00:46:33.070 --> 00:47:00.030
first one is the user hash. The idea here
is that if I know that user hash for the 1

00:47:00.030 --> 00:47:11.440
million users that I am interested in, I can
hunt to the SUP feed, see if any of those

00:47:11.440 --> 00:47:18.190
1 million hashes are actually in here, and
if so, I can pull for the activity feed for

00:47:18.190 --> 00:47:25.950
those users. So pretty straight forward, but
there's an obvious problem here, which is

00:47:25.950 --> 00:47:36.540
how, do I know what users these hash codes
correspond to? And to do that, you just actually

00:47:36.540 --> 00:47:46.240
retrieve the activity feed for a specific
user, and if you look in the activity feed,

00:47:46.240 --> 00:47:53.600
we have this link element that has this link
that points to out SUP feed and inside of

00:47:53.600 --> 00:47:59.210
the anchor part of that URL is the hash code.
So the flow here is that someone will go to

00:47:59.210 --> 00:48:03.900
your site, and they will authorize you to
use their YouTube account or otherwise, indicate

00:48:03.900 --> 00:48:14.620
what their user account is on YouTube. And
then you can pull their activity feed, which

00:48:14.620 --> 00:48:23.560
will give you a chance to pre-populate, you
know, all activities they have done in the

00:48:23.560 --> 00:48:31.050
past. And at the same time, you can grab their
SUP hash and now you can start monitoring

00:48:31.050 --> 00:48:35.830
the SUP feed whenever they have updates. So,
pretty straight forward. So, to demonstrate

00:48:35.830 --> 00:49:16.500
that this--again actually works, we built
another activity viewer called the UBER Activity

00:49:16.500 --> 00:49:38.570
Viewer, that is going to do the same process
and retrieve user activity. So, here I can--I

00:49:38.570 --> 00:49:44.980
suppose to show it. What could go wrong? Okay,
so, here we have a really simple website that

00:49:44.980 --> 00:49:47.370
just shows you all the activity for users
that have joined the website, you know, sort

00:49:47.370 --> 00:49:50.180
of a friend connect idea, right? So, you just
go in to add yourself, you allow access and

00:49:50.180 --> 00:49:50.970
you know, voila, you could add it this background
process that fetch this information from YouTube.

00:49:50.970 --> 00:49:51.770
So, as you can see here, the video we favorited
at the beginning has already showed up, although,

00:49:51.770 --> 00:49:53.520
but somehow it seemed to be quite displaying,
probably because it's not embeddable. So the

00:49:53.520 --> 00:49:55.580
activity that we added earlier actually just
showed up already since our demo-user was

00:49:55.580 --> 00:49:56.160
already a member of the site. So, you know,
that's kind of cool. So, here we're pulling

00:49:56.160 --> 00:49:57.310
for users and we're not actually retrieving
the activity feeds until we see them in the

00:49:57.310 --> 00:49:57.380
SUP feed. And you can try yourself at just
GoogleCodeSample.com/uberviewer, so if you

00:49:57.380 --> 00:49:57.480
want to add yourself, then, you know, we can
go back to that later and prove to you that

00:49:57.480 --> 00:49:57.560
this actually does work. Although, you will
have to actually add yourself, do something

00:49:57.560 --> 00:49:58.550
on YouTube to show up on the SUP feed. So,
how is a sample built? Well, again, we have

00:49:58.550 --> 00:50:03.140
your server somewhere in the cloud and now,
instead of just a PHP Website, which we also

00:50:03.140 --> 00:50:03.740
have, we have a Java Daemon which is going
to handle all of the SUP business that we

00:50:03.740 --> 00:50:09.473
talked about. We also have a MySQL database
that allow this to have some sort of shared

00:50:03.740 --> 00:50:09.473
storage, and we have memcached again to store
video metadata for us. So the Java Daemon

00:50:03.740 --> 00:50:09.540
goes out into the cloud, fetches our SUP file
from YouTube, process that out and figures

00:50:03.740 --> 00:50:09.273
out what YouTube users were interested in.
And then, you know, retrieves those users

00:50:03.740 --> 00:50:04.060
activity from the YouTube's API and then put
all that activity into our database. So, pretty

00:50:04.060 --> 00:50:05.750
straight forward so far, the PHP Website then
just goes in the database to fetch recent

00:50:05.750 --> 00:50:12.980
activity from the site, goes to YouTube API
to fetch additional metadata about all the

00:50:12.980 --> 00:50:13.360
videos and what not to have--had activity,
and then stores that metadata in memcached

00:50:13.360 --> 00:50:13.440
and once again, has a nice little JSON interface
to our user interface. So, pretty straight

00:50:13.440 --> 00:50:13.520
forward, and I want to go into, you know,
each of the parts. First, the Java Daemon

00:50:13.520 --> 00:50:13.850
and then the PHP Website. So, why we pick
Java? Well, 'cause it's multi-threaded and

00:50:13.850 --> 00:50:14.600
someone already criticized me, "Why don't
you use Python?" Well, I could have used Python

00:50:14.600 --> 00:50:15.250
but our client libraries happens to be a little
more friendly in Java, so, I use Java. So,

00:50:15.250 --> 00:50:31.940
we have a couple different threads here that
they're going to have their different parts.

00:50:31.940 --> 00:50:44.030
And the idea here, why we need threads is
because like I said, if we have a million

00:50:44.030 --> 00:50:44.090
users and we're trying to get all of this
activity process in a five-minute window.

00:50:44.090 --> 00:50:44.160
You probably want to be doing this, you know,
multiple users at a time and not serially

00:50:44.160 --> 00:50:44.210
retrieving each--'cause you know, you know
only 20,000 of those users may have activity,

00:50:44.210 --> 00:50:44.440
20,000 requests is still a lot do in five
minutes. So, here's the basic diagram, once

00:50:44.440 --> 00:50:46.550
again just, you know, we have the SUP fetcher
thread, that's kind of actually retrieve the

00:50:46.550 --> 00:50:48.180
SUP file and parse it for us. And now, we
have the synchronized queue that is going

00:50:48.180 --> 00:50:48.990
to get appended to with the user name of what
activity--what users' activity needs to be

00:50:48.990 --> 00:50:49.150
updated. And then we have this activity fetcher
thread, which you can configure how many you

00:50:49.150 --> 00:50:49.930
need, which I was going to grab out of that
queue and actually pull down the activity

00:50:49.930 --> 00:50:50.670
for each of those users, you know, we'll query
and walk on them, so they don't fight over

00:50:50.670 --> 00:51:01.910
the same user. And then--so they just go up
to the YouTube API to fetch the activity,

00:51:01.910 --> 00:51:07.510
put that in the database and we're done, basically.
Because all the rest is handled by the PHP

00:51:07.510 --> 00:51:07.770
Website, which is again very similar to the
PHP Website we saw before. So, what do we

00:51:07.770 --> 00:51:08.020
do to start threads? If you knew Java threading,
you pass an object of your creation that implements

00:51:08.020 --> 00:51:08.990
random ball to the thread constructor and
you see start. Pretty simple and you do that

00:51:08.990 --> 00:51:09.100
again on a loop for all of your activity fetcher
threads. Oh, and all of this code is also

00:51:09.100 --> 00:51:09.190
open source, although, we haven't quite posted
it just because of all the hectic-ness on

00:51:09.190 --> 00:51:10.180
I/O, but you bother us afterwards, and we'll
then get that posted. So, don't worry about

00:51:10.180 --> 00:51:13.800
capping this all down now. So, to close threads,
again, pretty simple, if you remember your

00:51:13.800 --> 00:51:24.690
operating systems class how or many years
ago, you interrupt them and then you join

00:51:24.690 --> 00:51:31.200
them back to appear in process. Okay, so we
have some--some things that we're using to

00:51:31.200 --> 00:51:37.200
share a state. We have this ConfigData object,
which is a read-only object that parses some

00:51:31.200 --> 00:51:36.800
configuration files for us, that provides
like the developer key that we're using and

00:51:31.200 --> 00:51:36.666
the database password that sort of stuff.
But the interesting stuff is we have some

00:51:31.200 --> 00:51:36.733
thread safe objects that Java provides us,
like that blocking queue that I mentioned

00:51:31.200 --> 00:51:31.480
earlier, and this concurrent map of user locks.
So, these two things are going to let us have

00:51:31.480 --> 00:51:37.080
communication between the threads in a safe
manner, so you don't stamp on each other.

00:51:31.480 --> 00:51:31.810
Okay, so the main thread is going to be really
simple. It reads a configuration files into

00:51:31.810 --> 00:51:32.340
that object that I have showed earlier. It
sets up some logging with log for J, which

00:51:32.340 --> 00:51:32.820
is an awesome logging system for Java. Initializes
the other threads and it listens on a shutdown

00:51:32.820 --> 00:51:32.880
port before rejoining them. So, while practicing
this, someone who knows Java a lot better

00:51:32.880 --> 00:51:32.960
than me criticize me for not using the shutdown
API in Java, and I couldn't get to wherever

00:51:32.960 --> 00:51:33.030
the clips. It was a lot of hassle and control
seat and now it's true, I thought it would,

00:51:33.030 --> 00:51:33.110
so I used this and this is a nice hack. You
listen on a local port and when something

00:51:33.110 --> 00:51:34.110
tries to make a connection to that port, you
know, that's accept call finally return and

00:51:34.110 --> 00:51:34.730
then you quit. So, you can't just tell that
to your server and make a connection and you're

00:51:34.730 --> 00:51:35.270
done. So, close your Daemon, however you're
comfortable with, but this is how I did it

00:51:35.270 --> 00:51:35.860
for the sample, so it's easy. Okay, so, the
SUP Fetcher Thread, what is the code look

00:51:35.860 --> 00:51:36.380
like there? Well, it's going to have to retrieve
users from our database and kind of an implicit

00:51:36.380 --> 00:51:36.390
part of this is when the website adds you,
it actually does that step of adding your

00:51:36.390 --> 00:51:36.400
token to the database for Java Daemon, record
it in the Java Daemon, but you know, we're

00:51:36.400 --> 00:51:36.410
lazy. So, we have the users now, we retrieve
the SUP feed, for each of the user hashes

00:51:36.410 --> 00:51:36.430
we find, we add their username to a queue,
and--oh yeah, that's it, right? 'Cause we

00:51:36.430 --> 00:51:36.570
also have to deal with the activity fetcher
threads take care of the rest. So, okay, what

00:51:36.570 --> 00:51:36.840
does the code look like--first is there's
a really hacky way of scheduling stuff in

00:51:36.840 --> 00:51:37.120
Java. I basically compare date object to see
if it's after--the timer suppose to run and

00:51:37.120 --> 00:51:37.450
if so, we do all our magic, and if not, we
sleep. If you're really crazy in the Java

00:51:37.450 --> 00:51:37.740
threading, you can use something called executors
and you can actually schedule threads to run

00:51:37.740 --> 00:51:37.910
at a certain interval. But this is really
easy for samples, so I did that. Using a theme

00:51:37.910 --> 00:51:38.090
here, I didn't take the most complex route
on one of these because, you know, I don't

00:51:38.090 --> 00:51:38.290
want to make sample code to be relatively
legible. So, to update the time, you know,

00:51:38.290 --> 00:51:39.710
you just add so many seconds to a calendar
object and you know, Java is nice like that.

00:51:39.710 --> 00:51:40.550
What's really important is already in with
the API, so we get back this user map from

00:51:40.550 --> 00:51:40.680
the database just as using JDBC, and you get
back the SUP feed data that was parsing out,

00:51:40.680 --> 00:51:40.810
those user hashes and time hashes from the
SUP feed. And then, we do a little Java magic

00:51:40.810 --> 00:51:40.940
here, it's kind of nice one [INDISTINCT],
to get rid of all the keys in this users that

00:51:40.940 --> 00:51:41.080
we got back that aren't in the SUP feed, and
then we're left with a nice map of all the--usernames

00:51:41.080 --> 00:51:41.200
are arranged in [INDISTINCT] we can then append
to the queue. So, we go through the SUP feed,

00:51:41.200 --> 00:51:41.420
we parse it out, we got the ones we're interested
in, and then we add those ones to the queue.

00:51:41.420 --> 00:51:41.600
Now, we go into the activity threads, so,
we're going to grab usually usernames off

00:51:41.600 --> 00:51:41.790
the queue one at a time, acquire a lock on
that username, retrieve the activity feed

00:51:41.790 --> 00:51:42.080
for that user, and then add their activity
of course to database, ignore and duplicates,

00:51:42.080 --> 00:51:42.360
which is where that ID element that I mentioned
earlier comes into play, and then, we're going

00:51:42.360 --> 00:51:42.620
to release the lock and go again get another
username off the queue. So, getting something

00:51:42.620 --> 00:51:42.820
off the queue, really easy, and these blocks
so you don't have to worry about sleeping

00:51:42.820 --> 00:51:42.970
here, and you may not to worry about sleeping
in this session, no, I was kidding. So, we

00:51:42.970 --> 00:51:43.120
also create some sort of new-text lock so
that each of these threads is only going to

00:51:43.120 --> 00:51:43.240
retrieve one username at a time, so two threads
aren't retrieving the same activity feed,

00:51:43.240 --> 00:51:43.380
including our database. We get the lock, we
acquire it, we get some metadata about the

00:51:43.380 --> 00:51:43.530
user, so it's just kind of an aside, it's
important aside. So, I know a thing about

00:51:43.530 --> 00:51:43.650
E-tags but they are caching mechanism use
an HTTP to check if you've already retrieved

00:51:43.650 --> 00:51:43.790
something or not. So, this is how we check
that we have already--we haven't already retrieved

00:51:43.790 --> 00:51:43.910
this particular activity feed insofar that
has changed. That's the last time we pulled

00:51:43.910 --> 00:51:44.060
it. We also have the feed updated time, which
is useful because when we get the activity

00:51:44.060 --> 00:51:44.440
feed for the user, we can pass that along
and we can actually filter out all the activities

00:51:44.440 --> 00:51:44.810
that happened before--I mean, since the last
time we pulled. So, it's just to publish menu

00:51:44.810 --> 00:51:45.100
correct parameter it's again, in a documentation.
So, a little efficiency help you out. And

00:51:45.100 --> 00:51:45.180
once you have all those activities, you know,
you put them to database, you dig out, the

00:51:45.180 --> 00:51:45.250
metadata you care about, store it. And there's
some things to watch out for here, first of

00:51:45.250 --> 00:51:45.330
all, you know, if the SUP feed hasn't updated,
which actually check that since time and see

00:51:45.330 --> 00:51:45.400
that it has been refreshed. Again, be robust
if the API returns errors, you know, it shouldn't

00:51:45.400 --> 00:51:45.460
but sometimes it happens, please handle that
gracefully. And the database connection might

00:51:45.460 --> 00:51:45.530
die, so, hang up and you'll be able to hear
of--had allowed experience with JBC in MySQL

00:51:45.530 --> 00:51:45.610
but it's kind of pain, yeah, 'cause the connections
will close especially if you have a long running

00:51:45.610 --> 00:51:45.680
daemon process like this, after eight hours--but
it's not really closed, 'cause there's no

00:51:45.680 --> 00:51:45.740
intrinsic way in the connector to check and
the connections closed outside the performing

00:51:45.740 --> 00:51:45.820
query. So, the hack that I used in this, and
you're going to, you know, probably look down

00:51:45.820 --> 00:51:45.900
on this, I actually make a really cheap query
on the database before I do my real ones 'cause

00:51:45.900 --> 00:51:45.980
I didn't want to bother to rewrite, you know,
some sort of logic where, if the query fails,

00:51:45.980 --> 00:51:46.050
they try it again after restarting the connection.
And do what you will. If you use hibernate

00:51:46.050 --> 00:51:46.130
in you, you know, like kind of big beard and
you're like, great at Java, we have connection

00:51:46.130 --> 00:51:46.220
pulling for you, so you don't have to worry
about this. I mean, I'm sure if you have a

00:51:46.220 --> 00:51:46.280
big website, obviously you have solved, you
know, the problems of Java and database is

00:51:46.280 --> 00:51:46.340
already--but that's my experience with the
sample. And in the real world--well, in the

00:51:46.340 --> 00:51:46.420
real world, we're not going to build a website
that just has all of whoever signs up activity

00:51:46.420 --> 00:51:46.490
on the front page from YouTube 'cause that's
kind of silly. It's a great illustrative example,

00:51:46.490 --> 00:51:46.560
but what can you actually do that's useful
at this. Well, obviously you can have other

00:51:46.560 --> 00:51:46.640
daemon processes that once you get this data,
you can filter it, you can aggregate it, and

00:51:46.640 --> 00:51:46.720
can sort it in its different friend circles
and do what you want with it. You can send

00:51:46.720 --> 00:51:46.790
notifications to user on their devices, and
again, like I said, you can learn from user

00:51:46.790 --> 00:51:46.850
behavior stuff. You know, all the users are
doing on YouTube; you can extrapolate some

00:51:46.850 --> 00:51:46.920
interesting things from that information.
So, yeah, like this is just kind of a really

00:51:46.920 --> 00:51:46.980
simple sample, to show you that you can get
this information into a database somewhere,

00:51:46.980 --> 00:51:47.070
and then you can do whatever you want with
it. And what you know, you chose to do with

00:51:47.070 --> 00:51:47.150
it, it's up to you, I'm happy to hear what
your ideas are after this session. So now,

00:51:47.150 --> 00:51:47.260
again, talk about the PHP website, we have
Johann back again.

00:51:47.260 --> 00:51:53.060
&gt;&gt; HARTMANN: All right, so I'm going to review
the same basic front end with a couple of

00:51:47.260 --> 00:51:52.860
the optimizations and then we'll finish up
the talk and open it up to questions after

00:51:47.260 --> 00:51:47.270
that. So this time, we're basically doing
the same things that we did before, so we're

00:51:47.270 --> 00:51:52.936
getting activities, we're getting metadata
and stuff like that except, we're doing the

00:51:47.270 --> 00:51:52.803
log in a little bit differently this time
because, if you remember we're still using

00:51:47.270 --> 00:51:47.280
Authsub, but last time because we're making
authenticated request for users friend activity,

00:51:47.280 --> 00:51:52.880
we need to have a session token that we can
hold on for the entire time that they are

00:51:47.280 --> 00:51:52.746
using the application. So, we continually
make authenticated requests. This time we

00:51:47.280 --> 00:51:47.290
really need to authenticate only ones to get
the hash that is in the SUP feed. So, the

00:51:47.290 --> 00:51:52.823
way all sub works is when you authenticate
the first time you get a single use token

00:51:47.290 --> 00:51:47.300
back. You can use that one, exactly one time.
Normally, you use it to send another request

00:51:47.300 --> 00:51:52.833
to get a session token. But this time, we
don't really care about the session token,

00:51:47.300 --> 00:51:47.310
so we actually use the single token to get
the hash and then we don't need it anymore.

00:51:47.310 --> 00:51:52.843
We write stuff to the database, you know,
we're just using the MySQL extention, PHP,

00:51:47.310 --> 00:51:52.910
very simple. And again, we're working with
JSON here, so we're building our own feeds

00:51:47.310 --> 00:51:47.320
a little bit in PHP because we want to write,
we want to read JSON feeds back as quick as

00:51:47.320 --> 00:51:53.186
possible and write them and send them to our
front-end, the JQuery front-end. We're doing

00:51:47.320 --> 00:51:47.330
some paging as well because, you know, there's
really no end to the amount of activity that

00:51:47.330 --> 00:51:52.796
could be in this application, so we could
have, you know, thousands of, millions of

00:51:47.330 --> 00:51:53.263
users and so, we don't want to actually figure
out how much stuff we have on our database,

00:51:47.330 --> 00:51:47.340
so we just use paging and MySQL to just continually
give us a set of results until there's nothing

00:51:47.340 --> 00:51:53.673
left. Again we're using memcache for performance
and what we decide to do here is just basically

00:51:47.340 --> 00:51:47.350
fetch a page of activities from the database
and then display it and write it to Memcached,

00:51:47.350 --> 00:51:52.950
so that when you're paging back and forth,
you know, as you're going back, it's going

00:51:47.350 --> 00:51:53.083
to get faster because you can hit memcache
instead of database. So, the way we're doing

00:51:47.350 --> 00:51:47.360
authentication here, again is we're getting
the user profile and what you see here is

00:51:47.360 --> 00:51:53.093
that, I'm passing in a string default. And
that's a nice feature that we do on the APIs

00:51:47.360 --> 00:51:47.370
so, after the user has completed the Authsub
process, you don't actually know their user

00:51:47.370 --> 00:51:53.036
name and you know that you have a token for
that user but you don't actually know what

00:51:47.370 --> 00:51:47.380
their name is, so we need to get their user
name and, because we don't have it, we can

00:51:47.380 --> 00:51:53.246
pass him the string default which will give
you the profile in this case of the currently

00:51:47.380 --> 00:51:53.113
authenticated user. So once we have their
profile, you know, we can get their user name

00:51:47.380 --> 00:51:47.390
so, this is what we want to write to our database.
And then, we're making an authenticated request

00:51:47.390 --> 00:51:53.923
now to that users events feed, and we're stripping,
we're looking for the link that has the updates

00:51:47.390 --> 00:51:47.400
real attribute and then we're, you know, skip
the PHP part where we're doing a little bit

00:51:47.400 --> 00:51:53.200
string hacking but really we're just stripping
off the last anchor tag here. And this is

00:51:47.400 --> 00:51:53.066
how we're getting the hash so, now we have
the two things that we care about, the user

00:51:47.400 --> 00:51:47.410
name and the hash and use MySQL to write this
to the database using a prepared statement,

00:51:47.410 --> 00:51:53.076
very simple. To get the activity feedback
from the database, what we're doing is we're

00:51:47.410 --> 00:51:47.420
doing a multi step process here. So, first
is we're just reading it, passing an integer

00:51:47.420 --> 00:51:53.420
for the page that we're currently interested
in. Then we're passing that to an Add Metadata

00:51:47.420 --> 00:51:52.953
method. Now, this method is going--look to
that feed, look for the types of activity

00:51:47.420 --> 00:51:47.430
that can obviously, either be video or user
related and then it makes separate calls to

00:51:47.430 --> 00:51:53.430
the APIs so, if it's a user activity, we fetch
it for user profile and get all the Metadata

00:51:47.430 --> 00:51:47.440
that we're interested inn video, we do the
same for video. So, we add all this back and

00:51:47.440 --> 00:51:52.906
then just JSON encode it, and now we have
our JSON output that the JQuery front-end

00:51:47.440 --> 00:51:47.450
needs. To get the user profile, we're just
making a call here to get user profile, and

00:51:47.450 --> 00:51:53.316
again we're using a blank PHP array, in this
case, profile data. To just get the Metadata

00:51:47.450 --> 00:51:53.050
that we're interested in, there's a lot of
data, so you can get first name, last name

00:51:47.450 --> 00:51:47.460
about me, all this kind of stuff. So, we're
basically storing everything. What I didn't

00:51:47.460 --> 00:51:53.060
show on this side is sometimes, you know,
a value could be null, so what we do at the

00:51:47.460 --> 00:51:47.470
end before we write the final array that we're
interested in this, we're just looking through

00:51:47.470 --> 00:51:53.403
this particular array and stripping out anything
that's null. For video Metadata, it's the

00:51:47.470 --> 00:51:53.470
same call that you've seen before as we pass
the video ID, get a video entry back and write

00:51:47.470 --> 00:51:47.480
this also to our JSON. We were handling, paging,
it's like I said we memcached each particular

00:51:47.480 --> 00:51:53.013
page and then in MySQL, you know, you just
use the offset perimeter that you can see

00:51:47.480 --> 00:51:47.490
here. So, we're just passing in. So, basically
what we're doing is reading this, this page

00:51:47.490 --> 00:51:53.090
variable and if it's not understandable to
prevent any hacking, of course this is not

00:51:47.490 --> 00:51:53.356
a production app but we initialize it to one
if we can understand what it is. And we just

00:51:47.490 --> 00:51:47.500
multiply it by the number of items per page
which is a configuration variable of how much

00:51:47.500 --> 00:51:53.166
you want to page at a given time. And then
we just pass that to the offset and get our

00:51:47.500 --> 00:51:47.510
activities. That basically sums up the application
like I've mentioned, we don't have a code

00:51:47.510 --> 00:51:53.043
published yet, but we can get on that, you
know, if you bother us. I want to mention

00:51:47.510 --> 00:51:47.520
that we have office hours starting actually
now. They're going to be outside so, you will

00:51:47.520 --> 00:51:53.320
have to walk all away around the back section
and you'll find us in the corner. We'll be

00:51:47.520 --> 00:51:53.786
there, we'll have some YouTube API engineers,
we'll have our product managers so, any questions

00:51:47.520 --> 00:51:47.530
you have about you tube at all and we we're
happy to help you.

00:51:47.530 --> 00:51:53.063
&gt;&gt; FISHER: And we're next to the wave guys
so, you know. We've come to see them, you

00:51:47.530 --> 00:51:47.540
should at least come to see us too.
&gt;&gt; HARTMANN: Yeah, definitely. Okay, so.

00:51:47.540 --> 00:51:53.540
&gt;&gt; FISHER: Oh yeah, so thank you Flicker creative
comments. Ryan will take a picture of the

00:51:47.540 --> 00:51:53.340
lion, I'm sorry. See you. Now, we have Q and,
so if you could go up to the mics, we also

00:51:47.540 --> 00:51:47.550
have that moderator link that we mentioned
earlier. Does anyone actually follow us into

00:51:47.550 --> 00:51:53.083
this? Oh yeah, I actually have questions.
I thought it has got to write my own like,

00:51:47.550 --> 00:51:47.560
Jeff why don't you have a haircut? Okay, so
let's see. Is it possible to further... that's

00:51:47.560 --> 00:51:53.160
awesome [INDISTINCT] location down there.
Now, so I guess the point itself is that we

00:51:47.560 --> 00:51:53.093
can show you all the users on YouTube who
have activity in five minutes and we don't

00:51:47.560 --> 00:51:47.570
know which of those people you are interested
in. You know, if there were some way for you

00:51:47.570 --> 00:51:53.370
to register with us which those users, I mean,
we could get something like that but that

00:51:47.570 --> 00:51:47.580
sounds like, you'll just have, it would just
off load all this burden on to our systems,

00:51:47.580 --> 00:51:53.313
but you know its good for you. But it's a
little bit harder convincing the systems guys

00:51:47.580 --> 00:51:47.590
to build it. I mean the idea is, this feed
is somewhat large because, you know, there's

00:51:47.590 --> 00:51:53.390
a lot of YouTube users out there doing stuff.
But it's only, it's like 700 kilobytes and

00:51:47.590 --> 00:51:53.323
its JSON, that part is really fast. I mean,
you can run some bench marks but using like

00:51:47.590 --> 00:51:47.600
the Java stuff that we showed, I was able
to [INDISTINCT] the file and like no time

00:51:47.600 --> 00:51:53.266
at all basically and hunt through the ones
for that were interesting. Yeah, I must not

00:51:47.600 --> 00:51:47.610
sure of the way that we can implement that,
that wouldn't basically be you registering

00:51:47.610 --> 00:51:53.810
each user with us somehow and, you know, just
doing, we'll be doing the same thing essentially

00:51:47.610 --> 00:51:53.876
just on our servers instead of on yours. Okay
so, is there a way to drive users and application

00:51:47.610 --> 00:51:47.620
which uploads videos to become friends?
&gt;&gt; HARTMANN: So, I guess this is more like,

00:51:47.620 --> 00:51:53.153
you want to look at your friend graph and
maybe connect users that are doing similar

00:51:47.620 --> 00:51:47.630
things, I think, you know, you could do this
obviously by just doing some parsing on your

00:51:47.630 --> 00:51:53.230
end and seeing what users you have that are
generally, maybe interested in same video

00:51:47.630 --> 00:51:53.230
or rate the same videos highly. And you can
use client libraries to add context so, I

00:51:47.630 --> 00:51:47.640
mean, you could make a very easy for a user
to just add somebody as their friend, or subscribe

00:51:47.640 --> 00:51:52.906
to a channel that could connect them.
&gt;&gt; FISHER: But you can do through the API,

00:51:47.640 --> 00:51:47.650
so you can actually issue a friend request
through the API. And we're working on that

00:51:47.650 --> 00:51:53.383
contacts stuff and making that a more robust
to, and like I said it's still an a little

00:51:47.650 --> 00:51:47.660
bit of flux because, you know, obviously YouTube
and Google accounts didn't use to be the same

00:51:47.660 --> 00:51:53.260
idea but, you know, in the future. Okay so,
can you choose... so you don't share ever

00:51:47.660 --> 00:51:53.460
videos that you're watching. Watching is only
if you're part of that experiment with the

00:51:47.660 --> 00:51:47.670
bar across the bottom were only your friends
online right there can see what you're watching,

00:51:47.670 --> 00:51:53.536
you can share with them only if you turn it
on. Watching a video isn't one of the events.

00:51:47.670 --> 00:51:47.680
And right now, I think the only granularity
you have is you can opt out of particular

00:51:47.680 --> 00:51:53.346
types of events in our priority settings so,
like, you know, show my video uploads and

00:51:47.680 --> 00:51:53.346
my reason of activity is one check box show
my favorites, the videos my favorite is in

00:51:47.680 --> 00:51:47.690
another check box, videos I rate, you get
the idea. I don't think there is a way to

00:51:47.690 --> 00:51:53.556
explicitly do stuff so, I guess if you question
is, "How can I, what--how can I favorite,

00:51:47.690 --> 00:51:47.700
you know some video I don't want my friends
knowing I favorited. That's a little cheeky;

00:51:47.700 --> 00:51:53.500
I guess we have to figure that one out. Any
other questions, live questions, complaints?

00:51:47.700 --> 00:51:53.700
Oh, sir. Yeah, yeah, then you could build
really easily something in PHP that just rendered

00:51:47.700 --> 00:51:47.710
it, I mean, a kind of lied, because we do
have a JSON format right now for our API,

00:51:47.710 --> 00:51:53.376
like this is all because JSON, there's also
RSS besides ADAM. But it's kind of ugly in

00:51:47.710 --> 00:51:47.720
my opinion. So, if you, if you like JSON,
you see this feed, you're like; “Oh”.

00:51:47.720 --> 00:51:54.120
So, its--it's literally a one to one translation
of the XML but, on like you said there's nothing

00:51:47.720 --> 00:51:53.586
like stopping you from rendering a page per
using. Actually, there is a site, I remember,

00:51:47.720 --> 00:51:47.730
some one was, this is like, normal user found
a site and all I did was use the API to, you

00:51:47.730 --> 00:51:53.596
know, grab their username and then spice some
information about them and then it turn out

00:51:47.730 --> 00:51:47.740
in a search somehow or something. And then
like, how is this person have information

00:51:47.740 --> 00:51:53.673
about me, and it's like well because you have
this in your public profile. Yeah, right so,

00:51:47.740 --> 00:51:47.750
and this wasn't on the microphone so for the
audiences at home, gentleman was just saying

00:51:47.750 --> 00:51:53.350
that obviously you can leverage some of our
Google properties and the properties that

00:51:47.750 --> 00:51:53.283
Google searched indexing and alert to do a
lot of the stuff that we talked about for

00:51:47.750 --> 00:51:47.760
you. Right, so you can integrate with contact,
and calendar and so much, better store, I

00:51:47.760 --> 00:51:53.426
hope that someday that can just be part of
YouTube and we don't have to--don't have to

00:51:47.760 --> 00:51:47.770
try to work around it too hard. You can log
in with your Google account but it gets tricky.

00:51:47.770 --> 00:51:53.370
Its always good states, was a little flow
chart that has like six States in it. Okay,

00:51:47.770 --> 00:51:53.303
any other, any other questions, comments?
Okay so, we're going to be outside like we

00:51:47.770 --> 00:51:47.780
said like way back in that corner of Mascony
hay and you can just come and ask us, you

00:51:47.780 --> 00:51:53.513
know, if you were timid, didn't want to get
recorded on video, whatever. And we'll tell

00:51:47.780 --> 00:51:47.790
you about what's wrong with your app or you
know, how to put YouTube into it, whatever.

00:51:47.790 --> 00:51:49.256
So, thanks for coming.

