WEBVTT
Kind: captions
Language: en

00:00:00.130 --> 00:00:03.760
And he has a, a diagram which has these pieces in it.

00:00:03.760 --> 00:00:09.550
It's somewhat similar to yours and it differentiates between subroutine calls

00:00:09.550 --> 00:00:15.160
which are indicated here by the lines with the arrowheads, the big arrowheads.

00:00:15.160 --> 00:00:21.740
And accesses to the memory which are lines with the smaller arrowheads.

00:00:21.740 --> 00:00:25.120
And he also breaks out system IO, that is the reading and

00:00:25.120 --> 00:00:27.300
the input and the writing and the output.

00:00:27.300 --> 00:00:29.440
So that's solution number one.

00:00:29.440 --> 00:00:33.940
Take a minute now and see if you can come up with another solution.

00:00:35.260 --> 00:00:41.280
&gt;&gt; Okay, so for my second solution, I've tried to decentralize some of this,

00:00:41.280 --> 00:00:44.300
because it sounded like the system was just too, too heavy.

00:00:44.300 --> 00:00:50.167
So, the system is still comprised of these components for

00:00:50.167 --> 00:00:55.400
parsing something to circle what we parsed, and sort and then display.

00:00:55.400 --> 00:00:59.560
So I have the parser, the circler, the sorter and the displayer, but

00:00:59.560 --> 00:01:04.290
I'm trying to treat it as if it's like a running

00:01:04.290 --> 00:01:07.830
through a process in which the system doesn't have to negotiate everything.

00:01:07.830 --> 00:01:09.120
So [INAUDIBLE]. &gt;&gt; So, a step at a time?

00:01:09.120 --> 00:01:10.130
&gt;&gt; A step at a time.

00:01:10.130 --> 00:01:11.390
&gt;&gt; Okay. &gt;&gt; So we start with the parser.

00:01:11.390 --> 00:01:16.640
The parser does its job, passes its output to the circler.

00:01:16.640 --> 00:01:17.510
The circler, then,

00:01:17.510 --> 00:01:20.790
creates all of our different, you know, shifted versions of the lines.

00:01:20.790 --> 00:01:22.860
That gets passed to the sorter.

00:01:22.860 --> 00:01:25.400
And then, the sorter sorts it alphabetically and

00:01:25.400 --> 00:01:26.610
passes that on to the displayer.

00:01:28.670 --> 00:01:29.390
&gt;&gt; Okay.

00:01:29.390 --> 00:01:32.800
This sounds very similar to, what Parnas calls the pipe and

00:01:32.800 --> 00:01:35.870
filter, solution to things, so let's take a minute and look at that.

