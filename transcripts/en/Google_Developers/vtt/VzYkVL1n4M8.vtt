WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.760
[MUSIC PLAYING]

00:00:02.640 --> 00:00:04.960
For modern mobile applications,
rendering performance

00:00:04.960 --> 00:00:07.980
can often be the most common
thief of your precious frame

00:00:07.980 --> 00:00:08.480
time.

00:00:08.480 --> 00:00:11.020
These issues are easy to
create, easy to fall into,

00:00:11.020 --> 00:00:12.520
and, with the help
of a handy tool,

00:00:12.520 --> 00:00:14.150
they're easy to
track down as well.

00:00:14.150 --> 00:00:15.180
My name is Colt McAnlis.

00:00:15.180 --> 00:00:17.590
And with the Profile
GPU Rendering tool,

00:00:17.590 --> 00:00:19.400
you've got a handy,
on-device ability

00:00:19.400 --> 00:00:22.450
to see exactly what's causing
slowdowns in your application.

00:00:22.450 --> 00:00:25.010
To get access to this tool,
simply go into Developer Mode

00:00:25.010 --> 00:00:27.720
and select the Profile
GPU Rendering option.

00:00:27.720 --> 00:00:29.560
This will prompt you
for a secondary screen

00:00:29.560 --> 00:00:31.630
on how you'd like to
collect your profiling data.

00:00:31.630 --> 00:00:35.050
For ease of use, select the
On Screen As Bars option.

00:00:35.050 --> 00:00:38.060
Doing so will reward you with
a plethora of colors and bars

00:00:38.060 --> 00:00:39.135
on your device.

00:00:39.135 --> 00:00:41.010
You'll notice that for
each visible activity,

00:00:41.010 --> 00:00:42.700
this tool is
displaying a profiling

00:00:42.700 --> 00:00:44.621
graph drawn on top of it.

00:00:44.621 --> 00:00:46.120
For example, the
graph at the bottom

00:00:46.120 --> 00:00:48.590
represents rendering performance
coming from the navigation

00:00:48.590 --> 00:00:49.510
activity there.

00:00:49.510 --> 00:00:52.257
The upper graph represents time
gone to the notification bar.

00:00:52.257 --> 00:00:54.590
And the graph in the middle
contains all the performance

00:00:54.590 --> 00:00:56.577
information from the
active application.

00:00:56.577 --> 00:00:58.660
Since that's the one we're
actually interested in,

00:00:58.660 --> 00:01:00.807
let's focus our attention there.

00:01:00.807 --> 00:01:02.390
As you interact with
your application,

00:01:02.390 --> 00:01:04.098
you'll see that the
vertical bars show up

00:01:04.098 --> 00:01:06.350
on your screen appearing
from left to right.

00:01:06.350 --> 00:01:08.980
Each vertical bar represents
one frame of rendering.

00:01:08.980 --> 00:01:11.277
The taller the bar, the
longer it took to render.

00:01:11.277 --> 00:01:12.860
And as you render
more frames, they'll

00:01:12.860 --> 00:01:14.359
be stacked next to
each other so you

00:01:14.359 --> 00:01:16.650
can see the influence
of frame rate over time.

00:01:16.650 --> 00:01:20.410
That green line there actually
represents 16 milliseconds,

00:01:20.410 --> 00:01:22.680
and it moves around based
on the overall scale

00:01:22.680 --> 00:01:23.680
of the bars themselves.

00:01:23.680 --> 00:01:26.100
To hit 60 frames
a second, you need

00:01:26.100 --> 00:01:28.540
to make sure that each one of
these frames' vertical bars

00:01:28.540 --> 00:01:31.090
stays under that 16
millisecond mark.

00:01:31.090 --> 00:01:33.450
Anytime you see a bar
push above that mark,

00:01:33.450 --> 00:01:36.080
you're going to see some
pauses in your animations.

00:01:36.080 --> 00:01:37.642
Now the astute
observer will notice

00:01:37.642 --> 00:01:39.100
that each bar is
actually comprised

00:01:39.100 --> 00:01:41.900
of three colors stacked
on top of each other.

00:01:41.900 --> 00:01:44.640
These colors directly relate
to a portion of the Android

00:01:44.640 --> 00:01:46.560
rendering pipeline
and how long it

00:01:46.560 --> 00:01:48.570
took to actually run that frame.

00:01:48.570 --> 00:01:51.667
The blue section of that
bar represents draw time

00:01:51.667 --> 00:01:54.250
or, rather, how long it took to
create and update your display

00:01:54.250 --> 00:01:55.382
lists in Java.

00:01:55.382 --> 00:01:57.590
Remember that before a view
can actually be rendered,

00:01:57.590 --> 00:02:01.392
it has to first be transformed
into a GPU-friendly format.

00:02:01.392 --> 00:02:03.100
On the simple side of
this, it could just

00:02:03.100 --> 00:02:04.380
be a few Draw commands.

00:02:04.380 --> 00:02:07.170
But on the complex end, we could
be tessellating a custom path

00:02:07.170 --> 00:02:08.940
coming from your canvas object.

00:02:08.940 --> 00:02:10.750
Once done, the results
are then cached

00:02:10.750 --> 00:02:13.390
as a display list
object by the system.

00:02:13.390 --> 00:02:15.690
This blue bar is
recording how much time

00:02:15.690 --> 00:02:18.810
it takes to complete these
two steps for all the views

00:02:18.810 --> 00:02:22.075
that need to be updated
on the screen this frame.

00:02:22.075 --> 00:02:23.450
When you see this
bar shoot high,

00:02:23.450 --> 00:02:24.910
it could mean that
a bunch of views

00:02:24.910 --> 00:02:26.910
suddenly became
invalidated, or it

00:02:26.910 --> 00:02:28.730
may be a few custom
views who might

00:02:28.730 --> 00:02:30.330
have some extremely
complex logic

00:02:30.330 --> 00:02:32.750
in their On-Draw function.

00:02:32.750 --> 00:02:35.720
Now the red section of the
bar represents execute time.

00:02:35.720 --> 00:02:38.120
This is the time spent
by Android's 2D renderer

00:02:38.120 --> 00:02:39.940
to Execute Display List.

00:02:39.940 --> 00:02:42.090
See, in order to
draw to the screen,

00:02:42.090 --> 00:02:44.590
Android needs to draw your
display list information

00:02:44.590 --> 00:02:48.430
by interfacing with the OpenGL
ES API, which effectively

00:02:48.430 --> 00:02:51.600
passes along data to the GPU,
which then, ultimately, ends up

00:02:51.600 --> 00:02:53.420
putting pixels on the screen.

00:02:53.420 --> 00:02:56.560
Remember that for more complex
views, like a custom view,

00:02:56.560 --> 00:03:00.190
the more complex the commands
needed for OpenGL to draw it.

00:03:00.190 --> 00:03:01.950
And when you see this
red bar shoot high,

00:03:01.950 --> 00:03:04.930
these complex views
are a likely culprit.

00:03:04.930 --> 00:03:07.790
It's also worth noting that
large spikes in this bar

00:03:07.790 --> 00:03:09.990
can come from re-submitting
a load of views

00:03:09.990 --> 00:03:11.500
to be redrawn again.

00:03:11.500 --> 00:03:13.804
These views haven't
necessarily been invalidated.

00:03:13.804 --> 00:03:15.720
But if something happens,
like a view rotates,

00:03:15.720 --> 00:03:17.110
then we need to go
back and clean up

00:03:17.110 --> 00:03:18.860
areas of the screen
that might be affected

00:03:18.860 --> 00:03:22.230
by that by redrawing
the views underneath it.

00:03:22.230 --> 00:03:24.200
And finally, the orange
section of the bar

00:03:24.200 --> 00:03:26.230
represents the process time.

00:03:26.230 --> 00:03:29.030
Or rather, this is where
the CPU tells the GPU

00:03:29.030 --> 00:03:30.840
that it's done
rendering a frame.

00:03:30.840 --> 00:03:33.890
This action is a blocking
call, and as such, the CPU

00:03:33.890 --> 00:03:35.600
will sit around and
wait for the GPU

00:03:35.600 --> 00:03:38.090
to acknowledge that it's
received the command.

00:03:38.090 --> 00:03:39.790
If this bar is
getting large, then it

00:03:39.790 --> 00:03:42.460
means that you're doing
a lot of work on the GPU,

00:03:42.460 --> 00:03:44.370
resulting from many
complex views that

00:03:44.370 --> 00:03:46.430
require a lot of OpenGL
rendering commands

00:03:46.430 --> 00:03:47.720
to be processed.

00:03:47.720 --> 00:03:50.450
The key to getting silky smooth
animations that respond to user

00:03:50.450 --> 00:03:53.910
input is keeping all of these
vertical bars below that 16

00:03:53.910 --> 00:03:55.962
millisecond line as
often as possible.

00:03:55.962 --> 00:03:57.670
Any time the column
spikes up above that,

00:03:57.670 --> 00:03:59.294
you're going to end
up missing a frame,

00:03:59.294 --> 00:04:01.230
and the users won't enjoy that.

00:04:01.230 --> 00:04:03.600
Using Profile GPU
Rendering is a nifty tool

00:04:03.600 --> 00:04:05.730
that can give you immediate
insight into where

00:04:05.730 --> 00:04:08.030
you may be having problems
in your rendering pipeline.

00:04:08.030 --> 00:04:10.555
But fixing those problems
is easier said than done.

00:04:10.555 --> 00:04:12.930
So check out the rest of the
Android Performance Patterns

00:04:12.930 --> 00:04:13.430
content.

00:04:13.430 --> 00:04:16.490
And don't forget to join our
Google+ Community as well.

00:04:16.490 --> 00:04:19.249
So keep calm, profile your
code, and always remember,

00:04:19.249 --> 00:04:20.149
perf matters.

00:04:20.149 --> 00:04:22.899
[MUSIC PLAYING]

