WEBVTT
Kind: captions
Language: en

00:00:05.030 --> 00:00:06.560
ELIF BONCUK: Hi, my name's Elif.

00:00:06.560 --> 00:00:10.070
I work as a software specialist
at Garanti Technology Mobile

00:00:10.070 --> 00:00:11.250
Applications team.

00:00:11.250 --> 00:00:12.750
iGaranti and Cep
[? Subesi, ?] which

00:00:12.750 --> 00:00:14.990
are our most popular
banking applications,

00:00:14.990 --> 00:00:17.020
are our team's products.

00:00:17.020 --> 00:00:19.760
There are lots of different
devices in the market with lots

00:00:19.760 --> 00:00:21.440
of different capabilities.

00:00:21.440 --> 00:00:23.990
Because of being a bank,
we should provide service

00:00:23.990 --> 00:00:26.090
to all of our customers.

00:00:26.090 --> 00:00:29.450
And some of the devices
have some low memory issues.

00:00:29.450 --> 00:00:33.000
"Don't keep activities" options,
which is lying under developer

00:00:33.000 --> 00:00:35.450
options, gives us the
opportunity of assimilating

00:00:35.450 --> 00:00:37.770
these low memory issues.

00:00:37.770 --> 00:00:41.880
Today I'm going to tell you
the most important and common

00:00:41.880 --> 00:00:46.490
low memory issue, which is
your activities being created.

00:00:46.490 --> 00:00:48.640
The system may
destroy your activity

00:00:48.640 --> 00:00:53.250
if it's stopped, or hasn't
been used for a long time,

00:00:53.250 --> 00:00:55.940
or the foreground's activity
needs more resources.

00:00:55.940 --> 00:01:00.970
So, the system will destroy your
activity to recover the memory.

00:01:00.970 --> 00:01:03.730
Let's think about money
transfer transaction.

00:01:03.730 --> 00:01:08.710
There are lots of selections in
the page-- [INAUDIBLE] account,

00:01:08.710 --> 00:01:10.160
branch selection.

00:01:10.160 --> 00:01:14.530
If a low memory issue happens
on the user selection page--

00:01:14.530 --> 00:01:18.210
let's say account selection--
the user selects the account

00:01:18.210 --> 00:01:20.400
and turns back to the main page.

00:01:20.400 --> 00:01:23.450
And because of low memory,
all the selections,

00:01:23.450 --> 00:01:25.350
all the fields will be cleared.

00:01:25.350 --> 00:01:30.010
If your activity stops
because of a low memory issue,

00:01:30.010 --> 00:01:34.250
then a save instance statement
will be called by the system.

00:01:34.250 --> 00:01:38.485
And you can save all your data--
what you want-- in this method.

00:01:38.485 --> 00:01:41.450
And after recreating
your activity,

00:01:41.450 --> 00:01:44.710
the Restore Instant Statement
[INAUDIBLE] will be called.

00:01:44.710 --> 00:01:48.420
So, you can restore back
all your data in here,

00:01:48.420 --> 00:01:53.550
and the system uses [? model ?]
[? objects ?] in this solution.

00:01:53.550 --> 00:01:56.155
The official solution
wasn't enough in our case,

00:01:56.155 --> 00:01:58.870
because being we created
[INAUDIBLE] activity

00:01:58.870 --> 00:02:03.890
means to us, the users start
transaction from main start

00:02:03.890 --> 00:02:07.610
and select all the
selections again and again.

00:02:07.610 --> 00:02:10.129
And of course, we could
use on-service statement

00:02:10.129 --> 00:02:12.880
[INAUDIBLE] and
official solution.

00:02:12.880 --> 00:02:15.840
But it would miss
high cost [INAUDIBLE]

00:02:15.840 --> 00:02:20.200
assimilated to problem and
develop another solution.

00:02:20.200 --> 00:02:22.960
If you use one activity
for a whole transaction

00:02:22.960 --> 00:02:27.020
and a fragment for
each related page,

00:02:27.020 --> 00:02:29.830
then your activity
won't be recreated,

00:02:29.830 --> 00:02:33.960
and you will complete your
transaction in one activity.

00:02:33.960 --> 00:02:37.410
If you want to solve the
foreground/background canvas,

00:02:37.410 --> 00:02:42.530
you can use custom components,
on-service [INAUDIBLE],

00:02:42.530 --> 00:02:44.650
activities on-service
[INAUDIBLE].

00:02:44.650 --> 00:02:46.290
And you can save all the data.

00:02:46.290 --> 00:02:48.430
But if you think
about your users--

00:02:48.430 --> 00:02:52.040
users in other application
or at another transaction--

00:02:52.040 --> 00:02:55.030
it's not a very good problem
to lose the data which

00:02:55.030 --> 00:02:57.090
is not using one.

00:02:57.090 --> 00:02:59.060
One last issue I
want to talk about

00:02:59.060 --> 00:03:04.980
is our bundle object, which you
use for saving data and passing

00:03:04.980 --> 00:03:07.180
data between activities.

00:03:07.180 --> 00:03:09.930
Bundle object has a
maximum storage limit.

00:03:09.930 --> 00:03:13.790
And if you have to keep more
than this maximum limit,

00:03:13.790 --> 00:03:18.310
then you have to develop
some other solutions.

00:03:18.310 --> 00:03:22.720
In that case, you want to use
your device's local storage,

00:03:22.720 --> 00:03:23.220
maybe.

00:03:23.220 --> 00:03:26.340
But it won't be a safe solution.

00:03:26.340 --> 00:03:29.900
Our solution is,
in that case, use

00:03:29.900 --> 00:03:34.140
a hash map that will allow
[INAUDIBLE] our application.

00:03:34.140 --> 00:03:37.850
I'll talk about the
common low memory issue

00:03:37.850 --> 00:03:39.230
and how we solve it.

00:03:39.230 --> 00:03:43.090
My advice to all
Android developers--

00:03:43.090 --> 00:03:46.840
select this option
before submission

00:03:46.840 --> 00:03:48.790
and control their applications.

00:03:48.790 --> 00:03:51.400
They don't have to solve
every low memory issue.

00:03:51.400 --> 00:03:56.380
But at least they could known
which problems the users

00:03:56.380 --> 00:03:58.690
are faced with.

00:03:58.690 --> 00:04:02.040
[MUSIC PLAYING]

