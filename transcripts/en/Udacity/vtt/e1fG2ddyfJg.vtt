WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[Norvig] Now I'm going to show you this program, test_shuffler,

00:00:03.000 --> 00:00:05.000
that produces the output you just saw

00:00:05.000 --> 00:00:12.000
to see if a shuffle program is correct, if it comes up with a balanced set of results.

00:00:12.000 --> 00:00:13.500
So what am I going to do?

00:00:13.500 --> 00:00:18.000
First I'm going to keep track of the counts of every result that comes back from the shuffler.

00:00:18.000 --> 00:00:21.000
I'm going to start counts off as a default dictionary.

00:00:21.000 --> 00:00:25.000
That means that its default value is the default value of integer, which is 0.

00:00:25.000 --> 00:00:27.000
So the counts all start at 0.

00:00:27.000 --> 00:00:30.000
And then I go from range(n), so n times,

00:00:30.000 --> 00:00:33.000
and by default we're going to go 10000 shuffles.

00:00:33.000 --> 00:00:38.000
We're going to make a list out of the deck that we get passed in.

00:00:38.000 --> 00:00:41.000
The deck is just a string of characters. That's the simplest thing to show.

00:00:41.000 --> 00:00:45.000
Then we're going to shuffle the input and then count the result.

00:00:45.000 --> 00:00:48.000
And result here is a list of items.

00:00:48.000 --> 00:00:51.000
We're going to join the list of items together back into a single string

00:00:51.000 --> 00:00:54.000
to make them smaller and easy to deal with,

00:00:54.000 --> 00:00:55.500
and then we just increment that count.

00:00:55.500 --> 00:01:00.000
So abcd comes in, we make a list, we make the list abcd,

00:01:00.000 --> 00:01:07.000
we shuffle that, maybe we get bcad, and then we increment the count for that result.

00:01:07.000 --> 00:01:11.000
Now, we calculate the expected count, what we expect to get,

00:01:11.000 --> 00:01:16.000
and that's 1 over the factorial of the number of items in the deck

00:01:16.000 --> 00:01:24.000
because all n factorial where n is the length of the deck items are equally probable.

00:01:24.000 --> 00:01:27.000
And so the expected count should be n times that.

00:01:27.000 --> 00:01:32.000
And then we say that the result is okay if the counts for each item--

00:01:32.000 --> 00:01:36.000
The ratio of the counts to the expected value should be about 1.

00:01:36.000 --> 00:01:42.000
And we're going to say if it's within 0.9 and 1.1 of what we expect, then that's okay.

00:01:42.000 --> 00:01:47.000
If any item doesn't have that, then it's not okay.

00:01:47.000 --> 00:01:49.000
What we passed in as shuffler is a function,

00:01:49.000 --> 00:01:53.000
and functions have a name attribute, so we're pulling out the name of the shuffler

00:01:53.000 --> 00:01:57.000
and then we're just printing out the name of the shuffler, the deck we're shuffling,

00:01:57.000 --> 00:01:59.000
and whether it's okay or not,

00:01:59.000 --> 00:02:05.000
and then we print out the individual probabilities for each of the possible results.

00:02:05.000 --> 00:02:07.000
And then I made another function, test_shufflers,

00:02:07.000 --> 00:02:10.000
which takes a list of shufflers and a list of possible decks

00:02:10.000 --> 00:02:13.000
and it applies the test to the cross product of them.

00:02:13.000 --> 00:02:17.000
For every shuffler we test every deck and we print the result.

00:02:17.000 --> 00:02:20.000
We saw that the function shuffle1 was not a good function,

00:02:20.000 --> 00:02:25.000
so I'm trying to fix it up, and I have 2 attempts here called shuffle2 and shuffle3.

00:02:25.000 --> 00:02:27.000
We can see what's going on here.

00:02:27.000 --> 00:02:31.000
In shuffle2 it's almost the same as shuffle1,

00:02:31.000 --> 00:02:36.000
except when I pick out 2 random indices to swap,

00:02:36.000 --> 00:02:39.000
I'm only saying that swapped of i is true,

00:02:39.000 --> 00:02:41.000
and I'm not saying that swapped of j is true.

00:02:41.000 --> 00:02:42.500
Otherwise it's the same.

00:02:42.500 --> 00:02:46.000
In shuffle3 I go through the deck.

00:02:46.000 --> 00:02:50.000
Rather than have a while loop, I just go through the deck for each of the indices

00:02:50.000 --> 00:02:54.500
and swap that index with something in the random range of N.

00:02:54.500 --> 00:02:58.000
So in other words, we swap each of the elements in the deck

00:02:58.000 --> 00:03:00.000
with any one of the other elements.

