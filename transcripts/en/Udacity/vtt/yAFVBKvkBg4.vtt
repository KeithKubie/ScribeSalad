WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
The answer to this is actually N-1.

00:00:03.000 --> 00:00:08.000
So in the worst case, it still has to look through N-1 iterations,

00:00:08.000 --> 00:00:12.000
which is not really any better than any of our other algorithms.

00:00:12.000 --> 00:00:15.000
And let's take a look at an example of why that is.

00:00:15.000 --> 00:00:17.000
So let's say we have this star-shaped graph,

00:00:17.000 --> 00:00:20.000
and we can see that there is a single

00:00:20.000 --> 00:00:22.000
vertex cover that is better than any of the others.

00:00:22.000 --> 00:00:25.000
That is you pick this vertex in the middle,

00:00:25.000 --> 00:00:29.000
and that automatically covers every single edge,

00:00:29.000 --> 00:00:32.000
and no other possible vertex cover is going to be as good.

00:00:32.000 --> 00:00:36.000
So with our randomized algorithm, let's say that we pick an edge at random.

00:00:36.000 --> 00:00:39.000
Let's say we pick this one,

00:00:39.000 --> 00:00:43.000
and then we have to pick one of the two endpoints randomly.

00:00:43.000 --> 00:00:47.000
Now let's say we pick this one and add it to the cover.

00:00:47.000 --> 00:00:49.000
Well then we've only covered this edge,

00:00:49.000 --> 00:00:53.000
and then we start over and reiterate.

00:00:53.000 --> 00:00:55.000
And let's say we pick edges at random,

00:00:55.000 --> 00:00:58.000
and each time we pick the outer vertex.

00:00:58.000 --> 00:01:00.000
It's unlikely, but it can happen.

00:01:00.000 --> 00:01:05.000
Now if we do that, then we've had to go through N-1 iterations to get a cover,

00:01:05.000 --> 00:01:10.000
and we are going to get a not great cover either.

00:01:10.000 --> 00:01:12.000
Now if we do this, you can see that

00:01:12.000 --> 00:01:16.000
we've had to go through N-1 iterations to find this cover,

00:01:16.000 --> 00:01:20.000
and it has a remotely close to the K equal 1 cover

00:01:20.000 --> 99:59:59.000
that is actually optimal in this case.

