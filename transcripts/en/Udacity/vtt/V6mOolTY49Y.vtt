WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.000
The next protocol I'm going to talk about is SSH, which is the secure shell protocol.

00:00:07.000 --> 00:00:12.000
The problem SSH is trying to solve is also a client server authentication problem.

00:00:12.000 --> 00:00:15.000
We have a client who wants to log into the server,

00:00:15.000 --> 00:00:20.000
and to log into the server the server asks for the password, and the client enters it.

00:00:20.000 --> 00:00:23.000
What we want to know is that when clients are connecting to the server

00:00:23.000 --> 00:00:26.000
that they're connecting to the server they think they are

00:00:26.000 --> 00:00:29.000
and that an attacker who can intercept and modify this traffic

00:00:29.000 --> 00:00:33.000
won't be able to trick the user into giving its password to a different server

00:00:33.000 --> 00:00:36.000
or thinking it's interacting with a different server.

00:00:36.000 --> 00:00:39.000
This protocol is also based on Diffie-Hellman

00:00:39.000 --> 00:00:43.000
and uses aspects of both symmetric and asymmetric cryptography.

00:00:43.000 --> 00:00:47.000
The first step is very similar to Diffie-Hellman. In fact, it's the same.

00:00:47.000 --> 00:00:54.000
The client picks a large random number and sends to the server g to that power mod p.

00:00:54.000 --> 00:00:58.000
G is the generator and p is the modulus just like in Diffie-Hellman.

00:00:58.000 --> 00:01:02.000
The server picks its own large random value--we'll call that xs--

00:01:02.000 --> 00:01:05.000
and computes ys, which is g raised to that power.

00:01:05.000 --> 00:01:08.000
So far this is the same as the Diffie-Hellman protocol.

00:01:08.000 --> 00:01:13.000
Then the server computes the key, which is yc--the value transmitted here--

00:01:13.000 --> 00:01:15.000
raised to the xs power.

00:01:15.000 --> 00:01:18.000
So far this is all the same as what's done in Diffie-Hellman.

00:01:18.000 --> 00:01:22.000
We just changed the names of the variables to match the client and server.

00:01:22.000 --> 00:01:25.000
The next step is where things get interesting.

00:01:25.000 --> 00:01:30.000
What the server will compute is a hash. We'll use some cryptographic has function.

00:01:30.000 --> 00:01:35.000
The input to the hash function--first there will be some parameters that identify the protocol.

00:01:35.000 --> 00:01:39.000
Those will be concatenated with the public key of the server.

00:01:39.000 --> 00:01:44.000
We're assuming at the start of the protocol the server has some public-private key pair.

00:01:44.000 --> 00:01:50.000
What will be included in this hash is that public key--public key of the server,

00:01:50.000 --> 00:01:53.000
the value of yc that was sent by the client--

00:01:53.000 --> 00:01:56.000
that verifies that it's part of the same session and prevents replay attacks,

00:01:56.000 --> 00:01:59.000
because now that value was determined by the client,

00:01:59.000 --> 00:02:04.000
the value of ys--this is the normal Diffie-Hellman response,

00:02:04.000 --> 00:02:08.000
and the key. Note that this is all in a one-way hash.

00:02:08.000 --> 00:02:12.000
Someone who intercepts that hash won't be able to learn anything about the inputs.

00:02:12.000 --> 00:02:17.000
Someone who knows the inputs would be able to verify that the hash is correct.

00:02:17.000 --> 00:02:22.000
So what the server sends is the value of its public key,

00:02:22.000 --> 00:02:27.000
the value of ys, and the hash signed with the servers private key.

00:02:27.000 --> 00:02:32.000
We finger that as sending the hash along with the hash encrypted with the private key.

00:02:32.000 --> 00:02:36.000
That's what it means to do a signature in an asymmetric cryptosystem.

00:02:36.000 --> 00:02:41.000
For this quiz, I want to see that you understand the SSH protocol.

00:02:41.000 --> 00:02:44.000
At this stage, the client and the server have a shared key.

00:02:44.000 --> 00:02:48.000
The question is what should the client do to verify that the server is indeed the server

00:02:48.000 --> 00:02:51.000
that the client expects it is talking with.

00:02:51.000 --> 00:02:56.000
Check all of the choices that are necessary to verify this.

