WEBVTT
Kind: captions
Language: en

00:00:00.570 --> 00:00:01.070
Hi.

00:00:01.070 --> 00:00:03.336
I'm Rick Viscomi, and
I make YouTube fast.

00:00:03.336 --> 00:00:04.710
In this video,
I'm going to share

00:00:04.710 --> 00:00:06.710
how we test web
performance and a few tips

00:00:06.710 --> 00:00:09.350
for doing the same
on your own website.

00:00:09.350 --> 00:00:11.600
The two test methodologies
that we're going to look at

00:00:11.600 --> 00:00:15.770
are real user monitoring, or
RUM, and synthetic testing.

00:00:15.770 --> 00:00:17.520
Real user monitoring,
just as it sounds,

00:00:17.520 --> 00:00:19.350
gathers performance
data from real users

00:00:19.350 --> 00:00:20.775
as they browse the site.

00:00:20.775 --> 00:00:22.900
For YouTube, this provides
us with the ground truth

00:00:22.900 --> 00:00:26.246
about how users are
experiencing the site.

00:00:26.246 --> 00:00:28.870
Synthetic testing, on the other
hand, is more like a laboratory

00:00:28.870 --> 00:00:31.510
and is commonly used on demand
to analyze our particular use

00:00:31.510 --> 00:00:32.840
case.

00:00:32.840 --> 00:00:34.960
Both methodologies
collect performance data,

00:00:34.960 --> 00:00:36.540
but given these
distinctions, RUM

00:00:36.540 --> 00:00:38.150
is especially useful
for identifying

00:00:38.150 --> 00:00:40.940
how fast the page is, and
synthetic for identifying

00:00:40.940 --> 00:00:44.250
how to make it faster.

00:00:44.250 --> 00:00:46.250
The simplest way to gather
and analyze RUM data

00:00:46.250 --> 00:00:49.040
is with one of the existing
analytics products.

00:00:49.040 --> 00:00:51.720
In fact, Google Analytics
can do this for you.

00:00:51.720 --> 00:00:53.260
At Google, we use
a custom solution

00:00:53.260 --> 00:00:57.540
called client side
instrumentation, or CSI.

00:00:57.540 --> 00:00:59.590
RUM works on three basic levels.

00:00:59.590 --> 00:01:01.420
First, we instrument
our client side code

00:01:01.420 --> 00:01:04.019
to provide timing and page
state data to the RUM JavaScript

00:01:04.019 --> 00:01:05.050
library.

00:01:05.050 --> 00:01:07.430
Then, the library
packages up the data

00:01:07.430 --> 00:01:10.460
and sends it off to the
Analytics server for later use.

00:01:10.460 --> 00:01:11.880
And finally, the
Analytics server

00:01:11.880 --> 00:01:16.580
provides developers with a
dashboard to view the results.

00:01:16.580 --> 00:01:19.550
Out of the box, most RUM tools
measure the general page events

00:01:19.550 --> 00:01:21.930
published by their
navigation timing API.

00:01:21.930 --> 00:01:24.400
But for us, one of the most
important performance metrics

00:01:24.400 --> 00:01:26.517
is how quickly a video plays.

00:01:26.517 --> 00:01:28.350
The metrics you collect
should be customized

00:01:28.350 --> 00:01:29.808
based on what your
application does

00:01:29.808 --> 00:01:33.017
and what your users are
actually waiting for.

00:01:33.017 --> 00:01:35.600
It's also important to include
any contextual information that

00:01:35.600 --> 00:01:37.700
might have an effect
on performance.

00:01:37.700 --> 00:01:39.340
For example,
YouTube users may be

00:01:39.340 --> 00:01:40.841
exposed to
experimental features,

00:01:40.841 --> 00:01:42.590
and we would need to
know what effect that

00:01:42.590 --> 00:01:44.850
might have had on performance.

00:01:44.850 --> 00:01:46.350
By keeping track
of these variables,

00:01:46.350 --> 00:01:47.725
we're better able
to get insights

00:01:47.725 --> 00:01:51.070
into the performance of
particular demographics.

00:01:51.070 --> 00:01:53.490
Also, note that the CSI
beacon is sent unobtrusively

00:01:53.490 --> 00:01:55.881
after the critical path
and video playback.

00:01:55.881 --> 00:01:57.630
This helps to ensure
that testing does not

00:01:57.630 --> 00:01:59.088
interfere with the
user experience.

00:02:01.330 --> 00:02:04.790
To analyze the performance data,
we turn to the CSI dashboard.

00:02:04.790 --> 00:02:07.460
Here, we're able to look at the
change in performance over time

00:02:07.460 --> 00:02:09.986
and compare experiments
against controls.

00:02:09.986 --> 00:02:11.360
For example, in
this chart, we're

00:02:11.360 --> 00:02:13.960
comparing the results of an
experiment against the baseline

00:02:13.960 --> 00:02:14.860
control.

00:02:14.860 --> 00:02:17.350
The experiment times
are lower or faster

00:02:17.350 --> 00:02:19.420
until this last point.

00:02:19.420 --> 00:02:21.490
We can use the CSI
dashboard to slice data

00:02:21.490 --> 00:02:23.110
by various demographics
to understand

00:02:23.110 --> 00:02:25.810
why this is happening, and
when we break the data down

00:02:25.810 --> 00:02:27.740
by browser, it becomes
clear that browser B

00:02:27.740 --> 00:02:30.309
is responsible for
the regression.

00:02:30.309 --> 00:02:32.600
It's also worth mentioning
that, because we gather data

00:02:32.600 --> 00:02:34.380
from so many users--
all of whom have

00:02:34.380 --> 00:02:36.290
different devices on
different networks--

00:02:36.290 --> 00:02:38.477
we typically look at
the 50th percentile,

00:02:38.477 --> 00:02:40.685
or the median value, to give
us a representative view

00:02:40.685 --> 00:02:43.060
of the performance data.

00:02:43.060 --> 00:02:43.560
OK.

00:02:43.560 --> 00:02:44.960
That's it for RUM.

00:02:44.960 --> 00:02:47.480
Now let's compare it
to synthetic testing.

00:02:47.480 --> 00:02:51.450
For that, we use WebPagetest,
which is a free public tool.

00:02:51.450 --> 00:02:53.560
And instead of gathering
data from real users,

00:02:53.560 --> 00:02:57.244
we configure synthetic tests
to a particular demographic.

00:02:57.244 --> 00:02:59.160
The tests run in a
laboratory-like environment

00:02:59.160 --> 00:03:01.044
to mitigate the effective
network anomalies,

00:03:01.044 --> 00:03:02.710
and this is achieved
through repetition.

00:03:02.710 --> 00:03:06.407
So tests that are run many times
are considered to be reliable.

00:03:06.407 --> 00:03:07.990
And, finally, when
the results are in,

00:03:07.990 --> 00:03:09.531
we're able to analyze
our application

00:03:09.531 --> 00:03:13.200
specific metrics along
with the test network log.

00:03:13.200 --> 00:03:14.780
WebPagetest gives
you full control

00:03:14.780 --> 00:03:16.700
over the type of use case
for which you want to test.

00:03:16.700 --> 00:03:18.830
For example, we may be
interested in the Watch page

00:03:18.830 --> 00:03:22.320
performance in Chrome
over a DSL connection.

00:03:22.320 --> 00:03:24.300
And being a free public
tool, WebPagetests

00:03:24.300 --> 00:03:27.267
are run on ordinary computers
connected to the internet.

00:03:27.267 --> 00:03:29.600
To test YouTube, however, we
need more privileged access

00:03:29.600 --> 00:03:31.320
to beta versions of the site.

00:03:31.320 --> 00:03:33.710
So for this reason, we run
our own private instances

00:03:33.710 --> 00:03:37.200
of WebPagetest inside of Google.

00:03:37.200 --> 00:03:39.560
The results are shown on
a waterfall diagram, which

00:03:39.560 --> 00:03:42.410
is a visualization of
the network activity.

00:03:42.410 --> 00:03:44.910
In this view, we're able to
precisely see the activity

00:03:44.910 --> 00:03:47.160
on the critical path
to video playback.

00:03:47.160 --> 00:03:49.740
And, finally, WebPagetest
also annotates the waterfall

00:03:49.740 --> 00:03:52.020
with our application
specific metrics.

00:03:52.020 --> 00:03:53.590
This gives us the
necessary context

00:03:53.590 --> 00:03:55.100
to better understand
what exactly

00:03:55.100 --> 00:03:56.560
is contributing to slow values.

00:03:59.350 --> 00:04:01.750
So that's it for our look
at synthetic testing.

00:04:01.750 --> 00:04:04.040
Remember that RUM is only
as useful as the metrics

00:04:04.040 --> 00:04:05.180
you provide.

00:04:05.180 --> 00:04:07.340
CSI is just one of many
tools that does it,

00:04:07.340 --> 00:04:11.930
but your solution should be just
as unobtrusive and lightweight.

00:04:11.930 --> 00:04:13.430
Synthetic tests
should be configured

00:04:13.430 --> 00:04:16.459
to represent common use cases,
like a particular browser,

00:04:16.459 --> 00:04:18.730
connection, or page demographic.

00:04:18.730 --> 00:04:21.040
Also, by locating synthetic
test machines inside

00:04:21.040 --> 00:04:23.370
of your own network, you
can validate performance

00:04:23.370 --> 00:04:26.860
on a staging server
before launching.

00:04:26.860 --> 00:04:28.890
To learn more about the
NavigationTiming API,

00:04:28.890 --> 00:04:32.050
check out the Mozilla Developer
Network article at this URL.

00:04:32.050 --> 00:04:34.177
Or for more information
on using WebPagetest,

00:04:34.177 --> 00:04:35.760
check out the link
over here, and also

00:04:35.760 --> 00:04:37.740
look out for my book
coming later this year.

00:04:37.740 --> 00:04:39.720
Thanks for watching.

