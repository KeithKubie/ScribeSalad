WEBVTT
Kind: captions
Language: en

00:00:00.350 --> 00:00:03.080
Passwords are not really random.

00:00:03.080 --> 00:00:06.440
So when somebody's trying
a brute force attack.

00:00:06.440 --> 00:00:10.320
They don't have to sort of search for
things in the dark.

00:00:10.320 --> 00:00:15.255
What they really, if they're smart, they
would start with more popular passwords.

00:00:15.255 --> 00:00:18.725
So the 12345 or password or
whatever it is.

00:00:18.725 --> 00:00:23.905
So you absolutely can sort of reduce
the amount of work that you have to do

00:00:23.905 --> 00:00:27.400
by trying out more
popular passwords first.

00:00:27.400 --> 00:00:30.550
In fact, what you can do is create
what is called a rainbow table,

00:00:30.550 --> 00:00:34.710
which is nothing but potential
passwords and their hash values and

00:00:34.710 --> 00:00:37.490
as a table that you create.

00:00:37.490 --> 00:00:41.980
The hashed value table for each possible
password and so this is, you don't even

00:00:41.980 --> 00:00:45.910
have to run your hash function when
you're doing this brute force guessing.

00:00:45.910 --> 00:00:49.600
You're just doing a lookup in
a rainbow table saying this password

00:00:49.600 --> 00:00:53.970
let me see what it's corresponding
hash value is and does that match

00:00:53.970 --> 00:00:57.960
some entry in the rainbow table without
having to compute the hash function.

00:00:57.960 --> 00:01:02.690
You can have these other tricks you can
use if that hacker is use you rainbow

00:01:02.690 --> 00:01:07.620
table or be smart and
try more popular passwords first.

00:01:07.620 --> 00:01:12.170
The couple of other things related
to passwords and their guessing and

00:01:12.170 --> 00:01:15.570
things like that, we said, what if
two users pick the same password?

00:01:15.570 --> 00:01:17.060
If you have common passwords,

00:01:17.060 --> 00:01:21.770
then of course 12345 is taken
by lots and lots of users.

00:01:21.770 --> 00:01:24.040
How do we avoid this problem?

00:01:24.040 --> 00:01:25.710
In one of the quiz questions we say,

00:01:25.710 --> 00:01:28.370
what would happen if
the hash value is the same.

00:01:28.370 --> 00:01:29.680
It's sort of related here.

00:01:29.680 --> 00:01:33.270
If they do have the same password,
they'll have the same hash value.

00:01:33.270 --> 00:01:38.010
And by looking at the hash values,
we can see that from one person's

00:01:38.010 --> 00:01:42.310
password we can login as the other
user and that would be a problem.

00:01:42.310 --> 00:01:44.950
Fortunately, we have a solution to that,

00:01:44.950 --> 00:01:48.830
we add a random number
before we do the hashing.

00:01:48.830 --> 00:01:51.950
We take the password strength,
add this random salt.

00:01:51.950 --> 00:01:53.700
The random salt will be different for

00:01:53.700 --> 00:01:58.720
different users, that makes the hash
value different for different users.

00:01:58.720 --> 00:02:03.240
If two users pick the same password,
without the salt, the hash value

00:02:03.240 --> 00:02:06.690
will be the same, but with the salt,
the hash value will be different.

00:02:06.690 --> 00:02:09.830
And we will know whether
the passwords are the same or

00:02:09.830 --> 00:02:12.380
they're different because the hash
values could be different,

00:02:12.380 --> 00:02:16.082
either because of the passwords being
different or the salt being different.

00:02:16.082 --> 00:02:20.140
You'll have to store the salt because
later on when we do the check,

00:02:20.140 --> 00:02:21.360
we're going to get a password.

00:02:21.360 --> 00:02:24.000
We'll need the salt before
we can run the hash again.

00:02:24.000 --> 00:02:25.950
So we can compare it
with the hashed value.

00:02:25.950 --> 00:02:27.460
So we're going to need the salt.

00:02:27.460 --> 00:02:28.680
Where do you store the salt?

00:02:28.680 --> 00:02:32.050
You store it in the file where
you store the hashed value.

00:02:32.050 --> 00:02:35.890
Whoever has access to the hashed value
would also have access to the salt,

00:02:35.890 --> 00:02:36.710
which is fine.

00:02:36.710 --> 00:02:37.840
Actually not a problem.

00:02:37.840 --> 00:02:42.610
So this checking, when we have salt,
is done by combining or

00:02:42.610 --> 00:02:45.990
computing the hash function with
both the salt and the password.

