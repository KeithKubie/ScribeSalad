WEBVTT
Kind: captions
Language: en

00:00:07.360 --> 00:00:07.950
Hey, there.

00:00:07.950 --> 00:00:09.990
My name Is Brett Slatkin, and
I'm a software engineer on the

00:00:09.990 --> 00:00:11.260
Google Surveys Team.

00:00:11.260 --> 00:00:13.300
I'm here today to tell you
about the secret to safe,

00:00:13.300 --> 00:00:14.900
continuous deployment.

00:00:14.900 --> 00:00:17.888
You can find me online
at onebigfluke.com.

00:00:17.888 --> 00:00:19.830
So here's our agenda
for today.

00:00:19.830 --> 00:00:22.090
We're going to talk about the
why and how of continuous

00:00:22.090 --> 00:00:23.402
deployment.

00:00:23.402 --> 00:00:26.225
I'm going to talk to you about
making mistakes while doing

00:00:26.225 --> 00:00:27.720
continuous deployment.

00:00:27.720 --> 00:00:29.340
Then we're going to talk about
how to be safe while

00:00:29.340 --> 00:00:30.500
you're doing it.

00:00:30.500 --> 00:00:33.180
And then finally, I'm going to
show you some examples of our

00:00:33.180 --> 00:00:37.970
team being safe with continuous
deployment.

00:00:37.970 --> 00:00:40.050
So the why and how.

00:00:40.050 --> 00:00:43.860
This is your typical software
release process on a team.

00:00:43.860 --> 00:00:45.200
You write your code.

00:00:45.200 --> 00:00:48.350
You commit it to your source
code repository.

00:00:48.350 --> 00:00:49.750
And at that point, you're really
happy, and you have a

00:00:49.750 --> 00:00:50.880
lot of motivation, because
you've gotten

00:00:50.880 --> 00:00:52.470
this feature to work.

00:00:52.470 --> 00:00:53.760
You branch the code.

00:00:53.760 --> 00:00:55.170
You maybe push it to
a staging server.

00:00:55.170 --> 00:00:57.120
And then you get to see it
kind of live in a mostly

00:00:57.120 --> 00:01:00.780
production deployment.

00:01:00.780 --> 00:01:04.630
But then after that, nothing
happens for weeks.

00:01:04.630 --> 00:01:06.610
There's a release schedule, and
it doesn't actually get

00:01:06.610 --> 00:01:09.330
launched until everybody's
ready, and the bus is leaving

00:01:09.330 --> 00:01:10.350
the station.

00:01:10.350 --> 00:01:13.290
So what I found on the App
Engine team is that we would

00:01:13.290 --> 00:01:15.900
have this release process that,
to me, it was really

00:01:15.900 --> 00:01:18.390
hard to stay motivated, because
the time from when I

00:01:18.390 --> 00:01:21.380
wrote the code to when it hit
production was so long.

00:01:21.380 --> 00:01:23.180
I would be happiest when
I wrote the code, and

00:01:23.180 --> 00:01:25.510
when I saw it live.

00:01:25.510 --> 00:01:27.510
Now while I was working on App
Engine, I was also working on

00:01:27.510 --> 00:01:28.670
PubSubHubbub.

00:01:28.670 --> 00:01:32.640
This was an open source project,
so we would push this

00:01:32.640 --> 00:01:34.150
to production every two days.

00:01:34.150 --> 00:01:36.970
So in the span of time that it
would take one release for App

00:01:36.970 --> 00:01:39.710
Engine, we could do 10
for PubSubHubbub.

00:01:39.710 --> 00:01:41.280
And that made me really happy.

00:01:41.280 --> 00:01:46.450
I realized that seeing my code
live is what made me happy.

00:01:46.450 --> 00:01:49.640
And then that reminds of this
quote from Ian Bicking, who

00:01:49.640 --> 00:01:50.940
works in Mozilla.

00:01:50.940 --> 00:01:53.650
And he said, "When it comes to
deployment, App Engine is the

00:01:53.650 --> 00:01:57.270
first thing that has really felt
good to me." And that's

00:01:57.270 --> 00:01:58.500
what really kind of brought
it all together.

00:01:58.500 --> 00:02:00.490
I was working on App Engine
infrastructure.

00:02:00.490 --> 00:02:03.330
I was also building an
app using App Engine.

00:02:03.330 --> 00:02:04.485
App Engine is great
for deployment.

00:02:04.485 --> 00:02:07.100
It makes it very easy
to deploy your app.

00:02:07.100 --> 00:02:09.780
And that's what I found was what
made me the most happy

00:02:09.780 --> 00:02:10.759
about PubSubHubbub.

00:02:10.759 --> 00:02:12.780
I just loved writing the
code and deploying

00:02:12.780 --> 00:02:14.820
it as fast as possible.

00:02:14.820 --> 00:02:16.860
So I was browsing the web one
day and I came across this

00:02:16.860 --> 00:02:19.930
article by Timothy Fitz, called
"Continuous Deployment

00:02:19.930 --> 00:02:23.970
at IMVU," which is a start-up,
"Doing the Impossible 50 Times

00:02:23.970 --> 00:02:27.580
A Day." And the process he
describes reminds me a lot of

00:02:27.580 --> 00:02:31.450
the tool that we had,
appcfg update.

00:02:31.450 --> 00:02:33.640
They made it ridiculously easy
to deploy their software to

00:02:33.640 --> 00:02:34.040
production.

00:02:34.040 --> 00:02:35.320
They would do it all the time.

00:02:35.320 --> 00:02:37.830
And I thought, I could use the
same tool to do the same kind

00:02:37.830 --> 00:02:39.730
of thing very easily.

00:02:39.730 --> 00:02:42.190
But I never had.

00:02:42.190 --> 00:02:44.270
So then, we were starting this
new project called Google

00:02:44.270 --> 00:02:45.430
Consumer Surveys.

00:02:45.430 --> 00:02:47.750
And like any new software team,
we were deciding on the

00:02:47.750 --> 00:02:50.460
stack that we wanted to use
to build the software.

00:02:50.460 --> 00:02:52.430
So we wanted to use
Django and Python.

00:02:52.430 --> 00:02:54.120
We wanted to use Closure
Library.

00:02:54.120 --> 00:02:58.040
We wanted to use App Engine, and
JavaScript, and HTML5, and

00:02:58.040 --> 00:02:59.920
everything that it
has to offer.

00:02:59.920 --> 00:03:02.190
But we thought, if we're going
to be deliberate about our

00:03:02.190 --> 00:03:04.880
software stack, maybe we should
be deliberate about our

00:03:04.880 --> 00:03:08.940
processes beyond that, such
as deployment or testing.

00:03:08.940 --> 00:03:10.570
And so we did that.

00:03:10.570 --> 00:03:13.880
So we adopted this as our
process for continuous

00:03:13.880 --> 00:03:14.390
deployment.

00:03:14.390 --> 00:03:15.770
It's a kind of serial
test and push.

00:03:15.770 --> 00:03:17.830
It's kind of your textbook
example of continuous

00:03:17.830 --> 00:03:19.100
deployment.

00:03:19.100 --> 00:03:20.880
So someone writes the code.

00:03:20.880 --> 00:03:22.810
You do code review
with a peer.

00:03:22.810 --> 00:03:24.780
You check it into revision
control.

00:03:24.780 --> 00:03:27.780
Once it's in revision control,
you run automated tests to

00:03:27.780 --> 00:03:30.290
make sure that your code's
passing tests.

00:03:30.290 --> 00:03:34.830
Then you automate deploying
to a staging server.

00:03:34.830 --> 00:03:36.830
Then later on, some other person
looks at the staging

00:03:36.830 --> 00:03:38.680
version, makes sure that
it looks good.

00:03:38.680 --> 00:03:41.780
And if it does, they set that
version to live, or make it

00:03:41.780 --> 00:03:44.370
the default version.

00:03:44.370 --> 00:03:46.030
So now we've been doing
this for over a year.

00:03:46.030 --> 00:03:47.980
It's been working really well.

00:03:47.980 --> 00:03:50.290
And so here's a kind of a plot
of the number of deployments

00:03:50.290 --> 00:03:53.810
that we do over the year.

00:03:53.810 --> 00:03:55.890
And this is the number of
deployments per day.

00:03:55.890 --> 00:03:59.040
So you can see we've peaked at
40 deployments in one day.

00:03:59.040 --> 00:04:00.730
You can see that where
the graph goes

00:04:00.730 --> 00:04:02.150
to zero is the weekends.

00:04:02.150 --> 00:04:04.130
And you can see our average
number of deployments per day

00:04:04.130 --> 00:04:07.480
is actually very
good over time.

00:04:07.480 --> 00:04:09.820
Here's another graph, which
shows how long a version stays

00:04:09.820 --> 00:04:12.030
live in production after
we've pushed it.

00:04:12.030 --> 00:04:13.940
And you can see on average
during the week, it's less

00:04:13.940 --> 00:04:15.940
than 24 hours, which means that
we're constantly pushing

00:04:15.940 --> 00:04:18.970
new versions during
business hours.

00:04:18.970 --> 00:04:20.899
And then on the weekends,
we don't push software.

00:04:20.899 --> 00:04:24.052
And you can see our time to
deployment goes over 24 hours

00:04:24.052 --> 00:04:26.090
to three days.

00:04:26.090 --> 00:04:29.420
So that was working
great, until we

00:04:29.420 --> 00:04:31.970
started making some mistakes.

00:04:31.970 --> 00:04:34.230
And here it is.

00:04:34.230 --> 00:04:36.960
So I pushed a pony to production
for all of our

00:04:36.960 --> 00:04:38.030
paying customers.

00:04:38.030 --> 00:04:39.810
This is one of the stupidest
things I've

00:04:39.810 --> 00:04:43.010
done in a long time.

00:04:43.010 --> 00:04:44.840
The whole idea was that it
was supposed to indicate

00:04:44.840 --> 00:04:45.810
experimental features.

00:04:45.810 --> 00:04:50.470
A lot of engineers call features
that you want, the

00:04:50.470 --> 00:04:51.920
pony features, something
like that.

00:04:51.920 --> 00:04:53.900
That's what we were
trying to do here.

00:04:53.900 --> 00:04:56.440
I didn't realize that it would
be enabled for all users.

00:04:56.440 --> 00:04:58.940
I thought it would only be
for administrative users.

00:04:58.940 --> 00:05:03.300
But it turns out, I pushed
it for everybody.

00:05:03.300 --> 00:05:05.310
And that was a big mistake.

00:05:05.310 --> 00:05:07.880
When you talk to people who
work in dev ops and do any

00:05:07.880 --> 00:05:10.830
kind of system administration
at all, this is their

00:05:10.830 --> 00:05:14.280
nightmare scenario, this idea
of having a pony in

00:05:14.280 --> 00:05:14.720
production.

00:05:14.720 --> 00:05:18.570
It's just embarrassing to the
product for your users.

00:05:18.570 --> 00:05:19.600
And I did this.

00:05:19.600 --> 00:05:22.220
And that was a big mistake.

00:05:22.220 --> 00:05:24.360
And it's not like we
didn't have tests.

00:05:24.360 --> 00:05:26.845
Like I said before, we had
automated tests to make sure

00:05:26.845 --> 00:05:28.310
that everything was good.

00:05:28.310 --> 00:05:31.890
But nothing actually tested the
site to say like, is there

00:05:31.890 --> 00:05:34.625
a pony dancing on the
screen on that page?

00:05:34.625 --> 00:05:36.060
It's like, no, didn't
test that.

00:05:36.060 --> 00:05:37.950
Didn't think about that one.

00:05:37.950 --> 00:05:40.070
We also had all kinds of
monitoring and graphs.

00:05:40.070 --> 00:05:43.100
We knew our error rates for
data store operations, and

00:05:43.100 --> 00:05:44.960
JavaScript client errors,
and so on.

00:05:44.960 --> 00:05:47.350
But none of that would surface
a dancing pony on the screen.

00:05:50.090 --> 00:05:51.330
And so here are the things
we tried and failed.

00:05:51.330 --> 00:05:52.810
We had monitoring.

00:05:52.810 --> 00:05:53.630
We did test and automation.

00:05:53.630 --> 00:05:56.120
We had continuous integration
of our source code.

00:05:56.120 --> 00:05:58.140
We did peer code review.

00:05:58.140 --> 00:05:59.850
We deployed this to staging
even, and we

00:05:59.850 --> 00:06:01.120
saw the pony on staging.

00:06:01.120 --> 00:06:03.780
But the pony was expected
behavior on staging.

00:06:03.780 --> 00:06:06.330
We couldn't tell the difference
between the staging

00:06:06.330 --> 00:06:07.960
behavior and the production
behavior.

00:06:07.960 --> 00:06:09.810
So that didn't work.

00:06:09.810 --> 00:06:11.760
And then having a QA checklist
wouldn't have caught the pony,

00:06:11.760 --> 00:06:13.940
because it's not like, make sure
there's no pony on this

00:06:13.940 --> 00:06:15.810
screen for this thing.

00:06:15.810 --> 00:06:16.710
It just would've failed.

00:06:16.710 --> 00:06:21.230
So all the ideas we
had didn't work.

00:06:21.230 --> 00:06:23.380
But then we came up with
this other idea.

00:06:23.380 --> 00:06:25.020
And this is the secret
I'm talking about.

00:06:25.020 --> 00:06:27.060
How to be safe.

00:06:27.060 --> 00:06:29.820
So what you're looking at here
is something you may not have

00:06:29.820 --> 00:06:30.870
seen before.

00:06:30.870 --> 00:06:32.050
It's called the perceptual
diff.

00:06:32.050 --> 00:06:33.100
It's a perceptual difference.

00:06:33.100 --> 00:06:35.980
It's kind of like a diff on
files that you've changed when

00:06:35.980 --> 00:06:36.860
you've written code.

00:06:36.860 --> 00:06:40.950
But it's for the pixels on the
screen as part of the website.

00:06:40.950 --> 00:06:43.870
So on the left is an old
version of this page.

00:06:43.870 --> 00:06:46.040
On the right is a new version
of this page.

00:06:46.040 --> 00:06:48.000
And what you'll notice is that
it's almost humanly impossible

00:06:48.000 --> 00:06:49.370
to tell the difference
between the two.

00:06:49.370 --> 00:06:51.025
It's kind of like "Where's
Waldo?" It's going to take you

00:06:51.025 --> 00:06:54.260
a long time to find the actual
pick it out, the actual

00:06:54.260 --> 00:06:55.690
difference.

00:06:55.690 --> 00:06:56.720
It's next to the globe.

00:06:56.720 --> 00:06:58.290
It was something to do with the
way that the pricing was

00:06:58.290 --> 00:07:00.940
indicated on our page here.

00:07:00.940 --> 00:07:02.580
And I have it highlighted
in red below.

00:07:02.580 --> 00:07:05.220
Because what we did is we hooked
up a system for doing

00:07:05.220 --> 00:07:06.940
this with a computer.

00:07:06.940 --> 00:07:08.610
So computers are really
good at detecting

00:07:08.610 --> 00:07:09.980
changes like this.

00:07:09.980 --> 00:07:11.950
And so we let the computer
do the work for us.

00:07:11.950 --> 00:07:14.820
And it was able to do a
screenshot of the page on the

00:07:14.820 --> 00:07:18.070
left, a screenshot of the page
on the right, and then diff

00:07:18.070 --> 00:07:20.750
the two perceptually, and
show us what's changed.

00:07:20.750 --> 00:07:23.870
And that's what's in
red at the bottom.

00:07:23.870 --> 00:07:25.480
Here's another example
of the same thing.

00:07:25.480 --> 00:07:28.350
This is our reporting interface
on the left.

00:07:28.350 --> 00:07:30.300
And on that page, there's
a mistake.

00:07:30.300 --> 00:07:32.470
There's a problem
with the build.

00:07:32.470 --> 00:07:33.460
It's down on the bottom left.

00:07:33.460 --> 00:07:35.380
There's a histogram
of response times.

00:07:35.380 --> 00:07:37.920
It's pulled out here
on the right.

00:07:37.920 --> 00:07:39.780
So you can see what we expected
on the top was 0 to

00:07:39.780 --> 00:07:41.750
60 seconds response time.

00:07:41.750 --> 00:07:44.900
What we found was the x-axis
was totally garbled.

00:07:44.900 --> 00:07:47.770
And what's awesome is that
perceptual diffs are able to

00:07:47.770 --> 00:07:50.940
automatically pick out this
change and show that to you,

00:07:50.940 --> 00:07:53.160
which is highlighted
in red below.

00:07:53.160 --> 00:07:56.300
So we're using a tool now to
do this that automates this

00:07:56.300 --> 00:07:58.830
process for many, many different
parts of our website

00:07:58.830 --> 00:08:02.210
to figure out, how is it
changed, and have we regressed

00:08:02.210 --> 00:08:04.740
in any way that's hard
for a human to see?

00:08:07.300 --> 00:08:09.710
So again, we screenshot the
old release that's live in

00:08:09.710 --> 00:08:10.540
production.

00:08:10.540 --> 00:08:13.050
We screenshot the new release
that's on the staging version,

00:08:13.050 --> 00:08:15.760
hopefully using the same
data, if possible.

00:08:15.760 --> 00:08:18.740
We pair the URL paths together
so that we're comparing--

00:08:18.740 --> 00:08:20.250
even though the host names
are different, the

00:08:20.250 --> 00:08:21.720
paths are the same.

00:08:21.720 --> 00:08:24.420
And then we visually
diff the pixels.

00:08:24.420 --> 00:08:26.670
So we tried this a few
times for different

00:08:26.670 --> 00:08:27.330
parts of our site.

00:08:27.330 --> 00:08:29.280
We were actually just doing this
big refactoring of some

00:08:29.280 --> 00:08:30.590
of our user-facing code.

00:08:30.590 --> 00:08:33.559
And we wanted to make sure that
it was visually exactly

00:08:33.559 --> 00:08:34.720
what it had been before.

00:08:34.720 --> 00:08:37.100
But we thought, why don't we
just use this for everything?

00:08:37.100 --> 00:08:40.059
Why don't we use visual diffs
for every single part of our

00:08:40.059 --> 00:08:41.720
application?

00:08:41.720 --> 00:08:43.820
So we have.

00:08:43.820 --> 00:08:45.670
So here is our old
process before.

00:08:45.670 --> 00:08:48.950
And now we've modified it to
add this parallel step.

00:08:48.950 --> 00:08:51.680
Once the code hits revision
control, we deploy it to

00:08:51.680 --> 00:08:54.330
staging at the same time that
we run automated tests.

00:08:54.330 --> 00:08:57.550
And then we also do perceptual
diff tests at the same time.

00:08:57.550 --> 00:08:59.640
So the release pusher who's
deciding, is this release

00:08:59.640 --> 00:09:02.050
ready to go or not, they look
at the test results of the

00:09:02.050 --> 00:09:04.070
unit tests and the integration
tests.

00:09:04.070 --> 00:09:06.640
But they also look at the
perceptual diff tests, and

00:09:06.640 --> 00:09:09.440
they say, has my site visually
changed in a way that I did

00:09:09.440 --> 00:09:10.440
not expect?

00:09:10.440 --> 00:09:12.880
And if it hasn't, then you set
the version live, and you're

00:09:12.880 --> 00:09:15.640
good to go.

00:09:15.640 --> 00:09:18.790
So let me give you some
examples of pdiffs.

00:09:18.790 --> 00:09:20.280
I think it's really interesting
to see the types

00:09:20.280 --> 00:09:23.430
of problems you can
find doing this.

00:09:23.430 --> 00:09:26.880
And so I'm going to highlight
a few of them.

00:09:26.880 --> 00:09:27.100
OK.

00:09:27.100 --> 00:09:30.030
So the first of these are things
you'd expect to see.

00:09:30.030 --> 00:09:31.790
So here, we added a button, this
little building button up

00:09:31.790 --> 00:09:32.730
at the top.

00:09:32.730 --> 00:09:33.570
And here's the pdiff.

00:09:33.570 --> 00:09:35.290
So on the left, there's the
building button on the right.

00:09:35.290 --> 00:09:36.730
That's before there was
no building button.

00:09:36.730 --> 00:09:37.600
So we added it.

00:09:37.600 --> 00:09:39.770
You can see the diff.

00:09:39.770 --> 00:09:41.740
Here's one when the Giants
won the World Series.

00:09:41.740 --> 00:09:43.190
And it was Halloween, and we
thought, hey, let's do

00:09:43.190 --> 00:09:43.750
something silly.

00:09:43.750 --> 00:09:45.470
We're based in the San Francisco
office, so we ended

00:09:45.470 --> 00:09:47.630
up putting some Giants
colors on here.

00:09:47.630 --> 00:09:48.500
Did that for a day.

00:09:48.500 --> 00:09:49.750
That was an expected change.

00:09:52.830 --> 00:09:54.570
Here's another one, where
we totally revamped the

00:09:54.570 --> 00:09:56.700
Confirmation page for
our billing flow.

00:09:56.700 --> 00:09:59.090
And you can see on the left is
how it used to be with this

00:09:59.090 --> 00:10:00.170
gray kind of box.

00:10:00.170 --> 00:10:02.130
And on the right is the new
way we have it, where it's

00:10:02.130 --> 00:10:03.450
kind of laid out in a grid.

00:10:03.450 --> 00:10:04.950
At the bottom, you
can see the diff.

00:10:04.950 --> 00:10:06.620
All of the different pieces
totally changed.

00:10:06.620 --> 00:10:09.230
Very obvious diff.

00:10:09.230 --> 00:10:11.750
Here's another one, where we
started doing surveys along

00:10:11.750 --> 00:10:12.700
with the Harris Poll.

00:10:12.700 --> 00:10:15.260
And we had a promotion
that it totally

00:10:15.260 --> 00:10:16.410
changed on our home page.

00:10:16.410 --> 00:10:18.140
Pdiff totally picked this up.

00:10:18.140 --> 00:10:20.900
And that was pretty easy.

00:10:20.900 --> 00:10:22.410
Where it starts getting
interesting is cases like

00:10:22.410 --> 00:10:24.100
this, where it's less obvious.

00:10:24.100 --> 00:10:25.860
When you first glance at these
two, it's really hard to tell

00:10:25.860 --> 00:10:26.910
what's changed.

00:10:26.910 --> 00:10:29.580
What's changed is at the top,
you'll see that now there's

00:10:29.580 --> 00:10:31.980
three steps instead
of four steps.

00:10:31.980 --> 00:10:33.860
So pdiff is able to pick
that out really easily.

00:10:33.860 --> 00:10:36.630
That's another feature launch.

00:10:36.630 --> 00:10:40.140
Pdiff can also pick out this
color changing on the map.

00:10:40.140 --> 00:10:41.210
We had all blues before.

00:10:41.210 --> 00:10:43.700
It was really hard to see, so
we changed the color scheme.

00:10:43.700 --> 00:10:45.726
So it picked out that all of
that had changed, even thought

00:10:45.726 --> 00:10:46.976
it was just by a little bit.

00:10:49.780 --> 00:10:53.095
And then we also have another
feature launched here, where

00:10:53.095 --> 00:10:54.820
we added frequency
to our surveys.

00:10:54.820 --> 00:10:58.870
So that's kind of the bigger,
chunkier changes.

00:10:58.870 --> 00:11:00.280
What's interesting is
the ones you can't

00:11:00.280 --> 00:11:01.090
really see as a human.

00:11:01.090 --> 00:11:03.690
So on the left, the padding
on top of this div

00:11:03.690 --> 00:11:06.790
changed by 40 pixels.

00:11:06.790 --> 00:11:09.330
The diff showed that
it had shifted.

00:11:09.330 --> 00:11:10.210
And if you look at it visually,

00:11:10.210 --> 00:11:11.550
now you can see that.

00:11:11.550 --> 00:11:13.680
But you really couldn't pick
that up unless you were

00:11:13.680 --> 00:11:15.680
expecting it to be there.

00:11:15.680 --> 00:11:17.190
And this is something that
pdiff is very good at.

00:11:17.190 --> 00:11:17.520
It's regressions.

00:11:17.520 --> 00:11:19.570
It's very good at.

00:11:19.570 --> 00:11:20.360
Here's another one.

00:11:20.360 --> 00:11:22.640
These are two different versions
of the same chart.

00:11:22.640 --> 00:11:25.180
They look still to
me identical.

00:11:25.180 --> 00:11:27.690
But we subtly changed the way
that the bar width calculation

00:11:27.690 --> 00:11:30.000
was made, and the spacing
between the

00:11:30.000 --> 00:11:32.010
labels and the bars.

00:11:32.010 --> 00:11:34.000
And pdiff totally picked this
up, and showed actually it's a

00:11:34.000 --> 00:11:35.390
huge change.

00:11:35.390 --> 00:11:36.730
But it's almost impossible
to see as a human.

00:11:39.570 --> 00:11:40.050
Here's another one.

00:11:40.050 --> 00:11:42.000
We had a table of information.

00:11:42.000 --> 00:11:44.470
People glaze over when they're
looking at tables of data.

00:11:44.470 --> 00:11:49.480
And we lost the Midwest and
regional bias table.

00:11:49.480 --> 00:11:52.290
And pdiff was able to pick this
up and show us like, hey,

00:11:52.290 --> 00:11:54.630
this thing totally moved,
and you lost this.

00:11:54.630 --> 00:11:56.040
And it turns out it was a
bug, and we had to go

00:11:56.040 --> 00:11:59.050
back and fix it.

00:11:59.050 --> 00:12:01.650
And then here's one
of my favorites.

00:12:01.650 --> 00:12:04.110
We changed it so there's a
single pixel line above the

00:12:04.110 --> 00:12:05.490
charts that moved.

00:12:05.490 --> 00:12:06.460
That's it.

00:12:06.460 --> 00:12:09.600
So pdiff saw this single pixel
line and made us realize we

00:12:09.600 --> 00:12:11.200
had a regression.

00:12:11.200 --> 00:12:13.830
The diff below is actually
very large.

00:12:13.830 --> 00:12:15.880
But to a human, it's almost
impossible to see that this

00:12:15.880 --> 00:12:16.920
has changed.

00:12:16.920 --> 00:12:19.580
So that was like, a really
helpful one.

00:12:19.580 --> 00:12:22.170
So the subtle differences is
what it gets really well.

00:12:22.170 --> 00:12:24.940
Here's another example, where
the sort order changed on this

00:12:24.940 --> 00:12:28.670
from lexical to numerical,
or numerical to lexical.

00:12:28.670 --> 00:12:31.760
And it's another example of,
a human wouldn't see this.

00:12:31.760 --> 00:12:33.220
We just glaze past it.

00:12:33.220 --> 00:12:37.030
And pdiff can see
it really well.

00:12:37.030 --> 00:12:40.610
And so finally, we're using
diff for everything now.

00:12:40.610 --> 00:12:42.860
We even diff the emails that
we send to our customers as

00:12:42.860 --> 00:12:45.680
part of our onboarding flow
and the purchase flows.

00:12:45.680 --> 00:12:48.540
So this is an actual rendering
of an email that we would send

00:12:48.540 --> 00:12:50.650
to a customer, and we diff it on
every release to make sure

00:12:50.650 --> 00:12:54.360
that those emails look good and
don't change over time.

00:12:54.360 --> 00:12:58.050
Because once you send an email,
you can't take it back.

00:12:58.050 --> 00:13:00.310
So anyway, the conclusion of
all this is that pdiffs are

00:13:00.310 --> 00:13:01.370
the best thing.

00:13:01.370 --> 00:13:04.280
If you have anyone you've ever
worked with who says, well, we

00:13:04.280 --> 00:13:07.400
can't do continuous deployment
because it's not safe, this is

00:13:07.400 --> 00:13:07.950
the thing for you.

00:13:07.950 --> 00:13:10.580
Perceptual diffs are what make
it possible to do it safely.

00:13:10.580 --> 00:13:12.880
And that's what you should
be looking at.

00:13:12.880 --> 00:13:14.770
There's a lot of great tools
now if you're doing this.

00:13:14.770 --> 00:13:17.770
PhantomJS is the big one.

00:13:17.770 --> 00:13:20.410
So PhantomJS is a WebKit build
that does this-- it's a

00:13:20.410 --> 00:13:22.010
headless WebKit that
does screenshots.

00:13:22.010 --> 00:13:25.440
Slimer's the same thing for
Firefox and the Gecko engine.

00:13:25.440 --> 00:13:28.440
And then PhantomCSS is a kind of
nice wrapper around this to

00:13:28.440 --> 00:13:31.710
make it easy for CSS refactoring
changes.

00:13:31.710 --> 00:13:34.490
You can do all kinds of
integration with Jenkins, and

00:13:34.490 --> 00:13:37.450
Travis-CI, and CircleCI, and
there's many others, to do the

00:13:37.450 --> 00:13:39.560
actual build and release
process.

00:13:39.560 --> 00:13:42.020
And then for deployment, there's
a lot of companies

00:13:42.020 --> 00:13:43.510
that are doing deployment
right now.

00:13:43.510 --> 00:13:44.840
A few open source projects.

00:13:44.840 --> 00:13:47.220
But generally, we need more
continuous deployment tools,

00:13:47.220 --> 00:13:49.740
in my opinion.

00:13:49.740 --> 00:13:51.450
There's also an open source
project that I'm working on.

00:13:51.450 --> 00:13:52.680
It's called dpxdt.

00:13:52.680 --> 00:13:55.320
You can find it on GitHub.

00:13:55.320 --> 00:13:58.295
And that project's still just
starting out, but we're making

00:13:58.295 --> 00:13:59.920
some progress to make this
tool really easy

00:13:59.920 --> 00:14:01.730
for anyone to use.

00:14:01.730 --> 00:14:04.110
And then, you're more than
welcome to check out my day

00:14:04.110 --> 00:14:07.630
job on g.co/consumersurveys of
where we're using continuous

00:14:07.630 --> 00:14:10.540
deployment and perceptual diffs,
building our product

00:14:10.540 --> 00:14:13.060
and releasing all the time.

00:14:13.060 --> 00:14:14.190
So thanks.

00:14:14.190 --> 00:14:15.040
That's all I have
to say today.

00:14:15.040 --> 00:14:16.290
And thanks for listening.

