WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:04.170
And this is very similar to how D3 does its joins.

00:00:04.170 --> 00:00:09.290
In the case of two tables, let's think of Table one as our data file,

00:00:09.290 --> 00:00:15.478
in this case data.tsv, where every row is a row in our file.

00:00:15.478 --> 00:00:19.900
And Table two here for the department are all the HTML and

00:00:19.900 --> 00:00:22.190
SVG elements on our webpage.

00:00:22.190 --> 00:00:27.710
And when we perform that magical data join, we simply associate every row

00:00:27.710 --> 00:00:31.160
in our data file with the corresponding element on our web page.

00:00:31.160 --> 00:00:35.820
In the case of our scatter plot, we're adding circles,

00:00:35.820 --> 00:00:40.040
based on some common key, that associates the two elements.

00:00:40.040 --> 00:00:42.230
The question actually arises,

00:00:42.230 --> 00:00:46.900
what happens to rows in the tables that either don't have a match or

00:00:46.900 --> 00:00:51.770
elements on our webpage that don't have corresponding data to bind to?

00:00:51.770 --> 00:00:56.570
Well, that is exactly what the special selection .enter that

00:00:56.570 --> 00:00:58.930
follows the data bindings for.

00:00:58.930 --> 00:01:04.260
And before moving on, just to make this example a tiny bit more concrete,

00:01:04.260 --> 00:01:11.270
in D3 there's the idea of a key that maps data to elements.

00:01:11.270 --> 00:01:16.100
As long as the data has the same key, in this case the department ID,

00:01:16.100 --> 00:01:22.080
as to an HTML element that has previously been bound, they'll map to the same.

00:01:22.080 --> 00:01:25.550
Let's say, for example, on the first time through our code,

00:01:25.550 --> 00:01:30.520
we have an empty selection for the circle elements before the data bind.

00:01:30.520 --> 00:01:33.710
When we bind our data to the empty selection,

00:01:33.710 --> 00:01:38.080
think of it as creating something of an imaginary placeholder.

00:01:38.080 --> 00:01:42.990
That has the value of our data, so in this case, for every row in our data

00:01:42.990 --> 00:01:48.295
table it will actually create an adjacent second department table.

00:01:48.295 --> 00:01:54.500
The .enter selection corresponds to all of these elements.

00:01:54.500 --> 00:01:59.140
In this new mirror table that the databind creates.

00:01:59.140 --> 00:02:03.490
Which then get appended to whatever we first selected, in this case,

00:02:03.490 --> 00:02:04.970
the SVG element.

00:02:04.970 --> 00:02:10.258
So on the first time through, there's no circles on the page, we bind data,

00:02:10.258 --> 00:02:15.410
select all the bound data through placeholder circles that are not yet

00:02:15.410 --> 00:02:19.240
on our page, which there won't be any, and then for

00:02:19.240 --> 00:02:23.470
every one of those, we append a circle to our SVG element.

00:02:23.470 --> 00:02:27.310
Now if we wanted to re-run this code, without changing data, or

00:02:27.310 --> 00:02:30.660
without changing our selections, nothing will happen.

00:02:30.660 --> 00:02:34.570
The reason being is that since the data never changed,

00:02:34.570 --> 00:02:37.680
the key of the bond data never changed.

00:02:37.680 --> 00:02:41.940
So our enter selection which corresponding to all the new elements to

00:02:41.940 --> 00:02:45.300
draw on the page will simply be empty.

00:02:45.300 --> 00:02:47.300
So we dont append anything new.

00:02:47.300 --> 00:02:51.470
In theory, we could run this line of code 100 times and

00:02:51.470 --> 00:02:56.430
our chart won't change, as long as our data and our selections don't change.

00:02:56.430 --> 00:03:00.510
And again this is one of the strengths of the declarative syntax and

00:03:00.510 --> 00:03:05.320
allows us to build complex animations where only some elements of our data or

00:03:05.320 --> 00:03:09.780
some elements of our web page actually change from one frame to the next

