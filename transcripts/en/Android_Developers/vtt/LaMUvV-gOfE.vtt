WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.850
IAN LAKE: If you've implemented
a get content activity

00:00:03.850 --> 00:00:07.270
so other apps could access
files or photos from your app,

00:00:07.270 --> 00:00:09.710
your life got a lot
easier in KitKat.

00:00:09.710 --> 00:00:12.120
Rather than having to
implement your own activity,

00:00:12.120 --> 00:00:15.260
build a whole U/I, and deal
with options like multi-select,

00:00:15.260 --> 00:00:18.040
you can rely on the
Storage Access Framework

00:00:18.040 --> 00:00:21.100
and build a DocumentsProvider.

00:00:21.100 --> 00:00:24.030
A quick refresher on the
Storage Access Framework.

00:00:24.030 --> 00:00:26.040
On KitKat and
higher devices, when

00:00:26.040 --> 00:00:29.340
apps start a get
content intent, they'll

00:00:29.340 --> 00:00:33.570
first get a system-provided U/I,
courtesy of the Storage Access

00:00:33.570 --> 00:00:34.680
Framework.

00:00:34.680 --> 00:00:37.560
This U/I automatically
connects to each app

00:00:37.560 --> 00:00:40.290
that provides a
DocumentsProvider

00:00:40.290 --> 00:00:42.130
and gives users
a consistent look

00:00:42.130 --> 00:00:46.160
and feel and functionality
across all those apps.

00:00:46.160 --> 00:00:49.730
Think of it as the open dialog
from a traditional operating

00:00:49.730 --> 00:00:50.930
system.

00:00:50.930 --> 00:00:53.460
Only at the end of
that list of apps

00:00:53.460 --> 00:00:57.540
does any app use a
get content activity.

00:00:57.540 --> 00:01:00.580
These document providers
are like the data backends

00:01:00.580 --> 00:01:01.260
for your app.

00:01:01.260 --> 00:01:04.090
With no U/I component,
it's completely

00:01:04.090 --> 00:01:07.980
focused on returning a list
of files and some meta data

00:01:07.980 --> 00:01:10.660
to make available to
the user to select right

00:01:10.660 --> 00:01:13.360
there in the
system-provided U/I,

00:01:13.360 --> 00:01:15.200
even allowing users
to select files

00:01:15.200 --> 00:01:19.760
from multiple DocumentsProviders
at the same time.

00:01:19.760 --> 00:01:22.190
There's only four required
methods for implementing

00:01:22.190 --> 00:01:25.100
DocumentsProvider--
queryRoots(),

00:01:25.100 --> 00:01:28.200
queryChildDocuments(),
queryDocument(),

00:01:28.200 --> 00:01:30.570
and openDocument().

00:01:30.570 --> 00:01:34.360
A root is the entry point
to your DocumentsProvider,

00:01:34.360 --> 00:01:37.160
so queryRoots() is where
you'd return metadata,

00:01:37.160 --> 00:01:41.120
like a unique root ID; the
title and icon for your root

00:01:41.120 --> 00:01:44.930
for display to the user; an
optional summary for maybe

00:01:44.930 --> 00:01:48.260
an account name; as well as
flags for enabling optional

00:01:48.260 --> 00:01:51.070
functionality, such as returning
recent items, searching,

00:01:51.070 --> 00:01:53.060
or creating new files.

00:01:53.060 --> 00:01:57.730
It also includes a document
ID for the topmost directory.

00:01:57.730 --> 00:01:59.410
It turns out when
we say "document,"

00:01:59.410 --> 00:02:02.920
it can mean two different
things-- a traditional file--

00:02:02.920 --> 00:02:06.900
something the user can open--
and a directory, a folder which

00:02:06.900 --> 00:02:09.749
can contain other documents.

00:02:09.749 --> 00:02:12.050
queryChildDocuments()
is where you're given

00:02:12.050 --> 00:02:16.080
a directory's document ID, and
you return metadata about all

00:02:16.080 --> 00:02:19.360
of its direct children
of that directory.

00:02:19.360 --> 00:02:23.020
This metadata would include
document IDs; a display name--

00:02:23.020 --> 00:02:26.150
what gets shown to the
user-- a MIME type,

00:02:26.150 --> 00:02:29.210
and flags indicating whether
it could be written, deleted,

00:02:29.210 --> 00:02:31.160
renamed, and more.

00:02:31.160 --> 00:02:34.600
You might already be guessing
what queryDocument() does then.

00:02:34.600 --> 00:02:39.600
It provides the same metadata,
just about a single document.

00:02:39.600 --> 00:02:42.860
It's important to note that
while each document ID must

00:02:42.860 --> 00:02:45.660
be unique, the same
document can appear

00:02:45.660 --> 00:02:48.940
in different directories, say
if you categorize pictures

00:02:48.940 --> 00:02:52.130
by both tags and date.

00:02:52.130 --> 00:02:54.520
Then, of course, you do
actually need to provide

00:02:54.520 --> 00:02:57.780
the document's contents, and
that's what openDocument()

00:02:57.780 --> 00:02:59.520
does.

00:02:59.520 --> 00:03:00.970
Now, it seems easy enough.

00:03:00.970 --> 00:03:02.975
Yet when you look
at the actual API,

00:03:02.975 --> 00:03:06.180
you note that many of these
methods return a cursor.

00:03:06.180 --> 00:03:09.770
And many have a
projection as a parameter.

00:03:09.770 --> 00:03:12.240
For those not working
on databases all day,

00:03:12.240 --> 00:03:17.190
a cursor is just an interface
for iterating over rows of data

00:03:17.190 --> 00:03:21.120
with each row having
a set of columns.

00:03:21.120 --> 00:03:23.450
The projection that's
passed in indicates

00:03:23.450 --> 00:03:26.130
what columns are being
requested by the Storage Access

00:03:26.130 --> 00:03:27.470
Framework.

00:03:27.470 --> 00:03:29.540
And your resulting
cursor should have a row

00:03:29.540 --> 00:03:32.220
for each root or document.

00:03:32.220 --> 00:03:34.790
If you don't have a database,
that's totally fine.

00:03:34.790 --> 00:03:39.650
You can construct a cursor
manually using a matrix cursor.

00:03:39.650 --> 00:03:43.070
You create one by passing in
the projection you want to use.

00:03:43.070 --> 00:03:45.370
You'll note that a null
projection parameter means

00:03:45.370 --> 00:03:47.730
you decide what
fields to return,

00:03:47.730 --> 00:03:51.000
although there are some required
ones for DocumentsProviders,

00:03:51.000 --> 00:03:54.780
so look through the links in
the description for the details.

00:03:54.780 --> 00:03:59.110
Then for each row you want, you
first create it using newRow,

00:03:59.110 --> 00:04:00.610
then call add.

00:04:00.610 --> 00:04:03.700
For queryRoots(), use the
constants in the Documents

00:04:03.700 --> 00:04:09.530
Contract Root class as the
keys for each piece of data.

00:04:09.530 --> 00:04:12.780
And queryChildDocuments() and
queryDocuments() aren't much

00:04:12.780 --> 00:04:15.970
different, although in that
case you'd use the Documents

00:04:15.970 --> 00:04:21.060
Contract Document Class
for the constants.

00:04:21.060 --> 00:04:25.610
Now, for openDocument, you're
tasked to return a parcel file

00:04:25.610 --> 00:04:27.440
descriptor.

00:04:27.440 --> 00:04:30.160
Thankfully, if you
already have a local file,

00:04:30.160 --> 00:04:31.690
this is really straightforward.

00:04:31.690 --> 00:04:35.430
Thanks to ParcelFileDescriptor's
Open method.

00:04:35.430 --> 00:04:38.270
You can also create a
ParcelFileDescriptor directly

00:04:38.270 --> 00:04:41.580
from a socket though, so
having the full local file

00:04:41.580 --> 00:04:44.870
locally isn't a
hard requirement.

00:04:44.870 --> 00:04:47.240
Of course, the
best implementation

00:04:47.240 --> 00:04:50.350
won't do any good unless you
add your DocumentsProvider

00:04:50.350 --> 00:04:51.920
to your Android manifest.

00:04:51.920 --> 00:04:53.620
A couple things of note here.

00:04:53.620 --> 00:04:56.370
You need a unique authority
for your DocumentsProvider,

00:04:56.370 --> 00:04:58.770
generally something prefaced
with your application ID,

00:04:58.770 --> 00:05:00.079
your package name.

00:05:00.079 --> 00:05:02.120
Then you'll need to make
sure that it's exported,

00:05:02.120 --> 00:05:04.660
so the Storage Access
Framework can access it,

00:05:04.660 --> 00:05:07.410
grant-uri-permissions mean the
system can grant permissions

00:05:07.410 --> 00:05:09.430
on your behalf,
and the permission

00:05:09.430 --> 00:05:12.040
ensures only the Storage
Access Framework can connect

00:05:12.040 --> 00:05:14.480
to your DocumentsProvider.

00:05:14.480 --> 00:05:16.010
Now, that's it for the basics.

00:05:16.010 --> 00:05:18.670
You should be able to see
your root and documents when

00:05:18.670 --> 00:05:22.950
apps invoke the standard
documents U/I via get content,

00:05:22.950 --> 00:05:27.060
or that
ACTION_OPEN_DOCUMENT intent.

00:05:27.060 --> 00:05:28.790
No more need to
build your own U/I,

00:05:28.790 --> 00:05:31.560
and a consistent experience,
whether users are operating

00:05:31.560 --> 00:05:34.060
on local files or
files you provide

00:05:34.060 --> 00:05:36.540
or files from some other app.

00:05:36.540 --> 00:05:39.290
But this is really only the
beginning of the Storage Access

00:05:39.290 --> 00:05:40.140
Framework.

00:05:40.140 --> 00:05:43.270
There are optimizations for
loading huge lists of document,

00:05:43.270 --> 00:05:46.710
with EXTRA_LOADING;
ACTION_OPEN_DOCUMENT_TREE,

00:05:46.710 --> 00:05:49.870
for letting users select
whole directories to share;

00:05:49.870 --> 00:05:52.790
ACTION_CREATE_DOCUMENT,
for saving a file, not

00:05:52.790 --> 00:05:56.050
just locally, but to
any DocumentsProvider;

00:05:56.050 --> 00:05:58.830
providing thumbnails;
document management

00:05:58.830 --> 00:06:01.840
features like Deleting,
Renaming, Copying, Moving,

00:06:01.840 --> 00:06:06.410
and Removing; alternate file
formats; and virtual files.

00:06:06.410 --> 00:06:09.400
You'll find all the details in
the links in the description

00:06:09.400 --> 00:06:11.370
and how you can use
the Storage Access

00:06:11.370 --> 00:06:15.210
Framework to build a great
DocumentsProvider to build

00:06:15.210 --> 00:06:15.790
better apps.

00:06:15.790 --> 00:06:19.140
[MUSIC PLAYING]

