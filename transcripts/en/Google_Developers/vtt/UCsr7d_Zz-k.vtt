WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.020
STEPHEN FLUIN: Good afternoon,
and welcome everyone.

00:00:03.020 --> 00:00:04.420
My name is Stephen Fluin.

00:00:04.420 --> 00:00:08.920
I'm a developer advocate on
the Angular team at Google.

00:00:08.920 --> 00:00:11.800
When I talk about
my role to people,

00:00:11.800 --> 00:00:13.570
they're often a
little bit surprised

00:00:13.570 --> 00:00:16.840
by what a developer advocate
on the Angular team does.

00:00:16.840 --> 00:00:20.020
The Angular team, overall,
is relatively small.

00:00:20.020 --> 00:00:22.420
But I really have two missions.

00:00:22.420 --> 00:00:26.650
My first mission is to help the
community build great Angular

00:00:26.650 --> 00:00:30.700
applications, and use
Angular to build great apps.

00:00:30.700 --> 00:00:34.300
My second mission is to listen
and understand the challenges

00:00:34.300 --> 00:00:37.450
that the developers go
through on an everyday basis,

00:00:37.450 --> 00:00:40.630
and then reflect those needs
within the Angular team,

00:00:40.630 --> 00:00:42.460
because only by
understanding what's

00:00:42.460 --> 00:00:45.370
going on in the real
world can we really

00:00:45.370 --> 00:00:47.740
build the right framework,
and the right platform

00:00:47.740 --> 00:00:50.380
to make everyone
else successful.

00:00:50.380 --> 00:00:53.740
So I don't know how many of you
were listening in the keynote,

00:00:53.740 --> 00:00:57.370
or attending any of the
Angular tracks earlier today,

00:00:57.370 --> 00:00:59.680
but I'm going to start off
with a brief introduction

00:00:59.680 --> 00:01:03.350
to Angular, for those of you
that may not be familiar.

00:01:03.350 --> 00:01:06.700
So I like to say that Angular
exists to make building

00:01:06.700 --> 00:01:09.490
applications with the web easy.

00:01:09.490 --> 00:01:13.270
And so I use these
words very carefully,

00:01:13.270 --> 00:01:17.500
because the web
is a platform that

00:01:17.500 --> 00:01:20.380
is one of the most powerful
platforms for delivering

00:01:20.380 --> 00:01:24.530
content and interactivity
that has ever existed.

00:01:24.530 --> 00:01:26.920
But the web is also changing.

00:01:26.920 --> 00:01:29.880
There's new frameworks
coming out all the time.

00:01:29.880 --> 00:01:31.630
There's new ways of
building applications.

00:01:31.630 --> 00:01:34.060
There's new standards for
things like JavaScript,

00:01:34.060 --> 00:01:36.910
and for bundling
your applications.

00:01:36.910 --> 00:01:40.402
And so when we
think about Angular,

00:01:40.402 --> 00:01:41.860
the Angular team
is thinking about,

00:01:41.860 --> 00:01:45.010
how do we react to the
web as it is today?

00:01:45.010 --> 00:01:49.300
And build a framework that makes
your lives a little bit, easier

00:01:49.300 --> 00:01:51.430
and tries to solve
some of the problems

00:01:51.430 --> 00:01:56.530
that you face everyday, by being
a little bit more opinionated.

00:01:56.530 --> 00:02:01.360
And so one example of that
opinionation that we see

00:02:01.360 --> 00:02:03.400
is that we believe
applications should

00:02:03.400 --> 00:02:05.680
be written to live everywhere.

00:02:05.680 --> 00:02:08.979
And so when we think about
building an application

00:02:08.979 --> 00:02:12.550
we want to be able to use the
same code to build your web

00:02:12.550 --> 00:02:15.220
application that might be
rendering on a desktop.

00:02:15.220 --> 00:02:17.830
Or, as we think about the
majority of use cases,

00:02:17.830 --> 00:02:20.770
rendering out to mobile devices.

00:02:20.770 --> 00:02:23.470
And so this means
things like performance

00:02:23.470 --> 00:02:25.660
are very, very important to us.

00:02:25.660 --> 00:02:28.030
And it also means that
things like taking advantage

00:02:28.030 --> 00:02:30.500
of the latest and
greatest of the web,

00:02:30.500 --> 00:02:32.830
such as progressive
web applications

00:02:32.830 --> 00:02:35.230
is also a very
important part, that we

00:02:35.230 --> 00:02:37.510
feel is critical to
our strategy of helping

00:02:37.510 --> 00:02:40.456
you connect to users, and
deliver great experiences.

00:02:43.240 --> 00:02:47.680
I'm going to talk through this
in about four different parts.

00:02:47.680 --> 00:02:51.340
So hopefully you guys have some
background on progressive web

00:02:51.340 --> 00:02:54.430
applications, because I'm going
to assume that most of you

00:02:54.430 --> 00:02:57.630
have heard about some of
these concepts before.

00:02:57.630 --> 00:03:00.460
And I'm going to talk about
them in how they specifically

00:03:00.460 --> 00:03:01.510
apply to Angular.

00:03:01.510 --> 00:03:04.540
So I'm going to start off
talking about app shells.

00:03:04.540 --> 00:03:07.150
Then I'm going to move
into service workers,

00:03:07.150 --> 00:03:08.980
and how to register
service workers.

00:03:08.980 --> 00:03:10.480
And then I'm going
to talk about how

00:03:10.480 --> 00:03:14.410
Angular tries to encapsulate
push notifications.

00:03:14.410 --> 00:03:18.670
And then together, hopefully
with a little bit of luck,

00:03:18.670 --> 00:03:20.560
we're going to do
some live coding.

00:03:20.560 --> 00:03:23.710
And we will build an Angular
application from scratch.

00:03:23.710 --> 00:03:25.300
And then we will
add a service worker

00:03:25.300 --> 00:03:28.180
to give it some
additional capabilities,

00:03:28.180 --> 00:03:31.480
and really try and take
it out of the realm of web

00:03:31.480 --> 00:03:34.450
application, into kind of this
progressive web application

00:03:34.450 --> 00:03:36.910
concept.

00:03:36.910 --> 00:03:39.670
I will say, as a little
bit of a preface,

00:03:39.670 --> 00:03:43.210
that from the Angular
team's perspective,

00:03:43.210 --> 00:03:45.340
these things are experimental.

00:03:45.340 --> 00:03:48.370
So while we have a lot of
great working code examples,

00:03:48.370 --> 00:03:50.410
and there are
companies using all

00:03:50.410 --> 00:03:53.320
of these concepts
in production today,

00:03:53.320 --> 00:03:57.070
we are still aware that
the developer experience

00:03:57.070 --> 00:03:58.540
can be improved.

00:03:58.540 --> 00:04:00.760
And we're spending a
lot of time and energy

00:04:00.760 --> 00:04:04.164
on making that experience
better for everyone here.

00:04:04.164 --> 00:04:06.580
An example of that, that I'm
going to demonstrate a little

00:04:06.580 --> 00:04:10.060
bit, is the use of what
we call the Angular CLI,

00:04:10.060 --> 00:04:12.610
which is a command line
environment that helps you both

00:04:12.610 --> 00:04:17.050
scaffold out new applications,
but it also helps you to run

00:04:17.050 --> 00:04:20.079
these applications, so that
you're getting this live

00:04:20.079 --> 00:04:22.510
development editing
and environment,

00:04:22.510 --> 00:04:25.450
but then also helps you
ship great applications,

00:04:25.450 --> 00:04:30.300
in terms of delivering
production ready minified,

00:04:30.300 --> 00:04:34.030
compiled JavaScript
bundles, , out to the users,

00:04:34.030 --> 00:04:37.300
in the best way possible, with
a service worker, ideally.

00:04:37.300 --> 00:04:40.090
And so I'm going to show
you tools that work today,

00:04:40.090 --> 00:04:41.020
and that will work.

00:04:41.020 --> 00:04:43.840
But you can also expect
over the coming months

00:04:43.840 --> 00:04:45.550
to see all of these
tools get baked

00:04:45.550 --> 00:04:47.690
into our standard set of tools.

00:04:47.690 --> 00:04:50.470
Because when I think about
progressive web applications

00:04:50.470 --> 00:04:53.170
I see a future where every
web application should be

00:04:53.170 --> 00:04:54.930
a progressive web application.

00:04:54.930 --> 00:04:57.790
There's almost, pretty soon,
going to be very little,

00:04:57.790 --> 00:04:59.560
or no excuse of why
you wouldn't want

00:04:59.560 --> 00:05:03.040
to do this, because in
every case, the only impact

00:05:03.040 --> 00:05:06.940
that your additional things
like a service worker

00:05:06.940 --> 00:05:10.030
are going to have are to improve
the experience for your users,

00:05:10.030 --> 00:05:13.560
and deliver better outcomes
for you as a developer.

00:05:13.560 --> 00:05:15.450
So let's get into the
first section here.

00:05:15.450 --> 00:05:17.750
App shell generation.

00:05:17.750 --> 00:05:21.870
So just a brief highlight of
what we believe an app shell

00:05:21.870 --> 00:05:22.710
is.

00:05:22.710 --> 00:05:25.500
An app shell is a
set of static HTML

00:05:25.500 --> 00:05:27.450
that is rendered
on the server side,

00:05:27.450 --> 00:05:30.720
and delivered down to
the user, to give you

00:05:30.720 --> 00:05:34.290
the quickest, fastest
time to first paint,

00:05:34.290 --> 00:05:36.540
and time to first interactivity.

00:05:36.540 --> 00:05:39.930
And so many firmwares do these
things in different ways.

00:05:39.930 --> 00:05:42.840
But the primary way that
Angular thinks about doing this

00:05:42.840 --> 00:05:46.540
is with a project that we
have called Angular Universal.

00:05:46.540 --> 00:05:49.720
And so Angular
Universal is a project.

00:05:49.720 --> 00:05:52.590
It's an open source project,
as with all of Angular,

00:05:52.590 --> 00:05:55.890
that is designed to allow you
to run Angular applications,

00:05:55.890 --> 00:05:58.260
and render them
fully server side,

00:05:58.260 --> 00:06:01.440
and then deliver down to the
browser, a fully rendered HTML

00:06:01.440 --> 00:06:05.550
document, then bootstraps
Angular on top of it,

00:06:05.550 --> 00:06:09.450
trying to balance both the
high performance, and ready

00:06:09.450 --> 00:06:11.550
availability of that HTML.

00:06:11.550 --> 00:06:14.160
But then also the interactivity
and the same development

00:06:14.160 --> 00:06:17.720
experience that you have with
any normal Angular application.

00:06:17.720 --> 00:06:20.460
And so if you're looking at
Angular- and we actually,

00:06:20.460 --> 00:06:22.080
in the Angular
track earlier today

00:06:22.080 --> 00:06:24.990
we actually heard from a
couple of companies in China

00:06:24.990 --> 00:06:27.886
that are using Angular
universal today to deliver

00:06:27.886 --> 00:06:29.010
these types of experiences.

00:06:29.010 --> 00:06:30.384
So that was really
great to hear.

00:06:32.830 --> 00:06:35.370
So when we think about Angular
Universal, what we're doing

00:06:35.370 --> 00:06:38.580
is we've got a
de-coupled DOM model.

00:06:38.580 --> 00:06:41.100
And so what that means is,
when you build an Angular

00:06:41.100 --> 00:06:44.449
application, all of the logic,
all of the change detection

00:06:44.449 --> 00:06:45.990
that happens within
your application,

00:06:45.990 --> 00:06:48.420
is not happening on a DOM level.

00:06:48.420 --> 00:06:51.000
We first acknowledge the
kind of, more pure concept

00:06:51.000 --> 00:06:53.850
of your component hierarchy,
and then we figure out

00:06:53.850 --> 00:06:55.920
what changes have happened
within your component

00:06:55.920 --> 00:07:00.150
hierarchy, and then we propagate
only those changes back using

00:07:00.150 --> 00:07:02.010
a renderer out to the DOM.

00:07:02.010 --> 00:07:04.570
So we don't use a virtual DOM.

00:07:04.570 --> 00:07:08.370
We do it all in the pure, kind
of ES6, class and module world.

00:07:11.100 --> 00:07:12.640
And what that
allows us to do is,

00:07:12.640 --> 00:07:15.310
that allows us to run,
similar to many frameworks,

00:07:15.310 --> 00:07:18.184
the entire application in the
server, and then ship it down.

00:07:18.184 --> 00:07:19.600
But the other thing
that we can do

00:07:19.600 --> 00:07:22.840
is, because we're running
Angular fully on the server,

00:07:22.840 --> 00:07:25.840
is we can apply Angular
logic to some of the things

00:07:25.840 --> 00:07:28.160
that you're building
your applications with.

00:07:28.160 --> 00:07:31.390
So this is an example
of an app shell module.

00:07:31.390 --> 00:07:33.535
And so you're going to
see a few things here.

00:07:33.535 --> 00:07:35.410
At the top, you're going
to see the app shell

00:07:35.410 --> 00:07:38.650
module that we're importing
from the Angular project.

00:07:38.650 --> 00:07:40.750
And then we're going
to be importing that

00:07:40.750 --> 00:07:42.710
into our specific module.

00:07:42.710 --> 00:07:44.590
So you see here we've
got this app module

00:07:44.590 --> 00:07:48.520
and it is importing
the app shell module.

00:07:48.520 --> 00:07:52.270
So what that does is that
gives us a set of directives,

00:07:52.270 --> 00:07:56.290
and capabilities, to render
Angular in different ways

00:07:56.290 --> 00:07:59.220
depending on the type of
environment we are in.

00:07:59.220 --> 00:08:02.800
And so this sets
the stage for us,

00:08:02.800 --> 00:08:05.200
and then we move that forward
into a set of directives.

00:08:05.200 --> 00:08:07.340
And I'll make this
bigger in a second.

00:08:07.340 --> 00:08:10.780
So this is a standard,
relatively simple, template.

00:08:10.780 --> 00:08:13.090
So we've got a header section.

00:08:13.090 --> 00:08:15.310
We're writing this
in HTML, so we're

00:08:15.310 --> 00:08:18.460
anticipating it being rendered
to the DOM at some point here.

00:08:18.460 --> 00:08:20.920
You've got normal Angular
style event handlers,

00:08:20.920 --> 00:08:22.670
such as these click handlers.

00:08:22.670 --> 00:08:24.760
Then I've got a
main section where

00:08:24.760 --> 00:08:26.440
I want to render
out, for example,

00:08:26.440 --> 00:08:29.560
the subcomponents
called weather cards.

00:08:29.560 --> 00:08:31.420
And then I have a loading bar.

00:08:31.420 --> 00:08:34.596
And then I've got a city
picker at the bottom.

00:08:34.596 --> 00:08:36.220
And so what you're
going to notice here

00:08:36.220 --> 00:08:38.650
is in this middle
section, we actually

00:08:38.650 --> 00:08:41.559
have two very intentionally
designed directives.

00:08:41.559 --> 00:08:45.400
So you're going to see star
shell no render here, and star

00:08:45.400 --> 00:08:46.930
shell render.

00:08:46.930 --> 00:08:50.110
And what this allows us to
do is, because with Angular

00:08:50.110 --> 00:08:52.570
Universal you're rendering
on the server side,

00:08:52.570 --> 00:08:55.840
we can actually determine
which parts of your template

00:08:55.840 --> 00:08:59.290
should be rendered, as
part of that app shell,

00:08:59.290 --> 00:09:02.260
and ship down to the browser,
and which parts should not.

00:09:02.260 --> 00:09:05.320
And so in this case,
shell no render means

00:09:05.320 --> 00:09:09.040
do not render this if
we are in an app shell.

00:09:09.040 --> 00:09:13.150
And shell render means do render
it if we're in an app shell.

00:09:13.150 --> 00:09:14.770
And so what this
looks like is we

00:09:14.770 --> 00:09:18.730
will not see that shell
no render component,

00:09:18.730 --> 00:09:20.740
but we will see the
loading bar here.

00:09:20.740 --> 00:09:23.230
And then we have any of
the other HTML that we put,

00:09:23.230 --> 00:09:26.890
which is going to be
there in either case.

00:09:26.890 --> 00:09:31.150
And so what we've actually done,
using Angular Universal here,

00:09:31.150 --> 00:09:33.640
is we figured out, based on
the directives that you've

00:09:33.640 --> 00:09:35.569
set on your
templates, regardless

00:09:35.569 --> 00:09:38.110
of what routing you're using,
or how complex your application

00:09:38.110 --> 00:09:42.550
is, we figured out what
are the critical path, DOM

00:09:42.550 --> 00:09:46.450
tree, and the CSS required
for those components,

00:09:46.450 --> 00:09:48.820
and we've included
those into the app shell

00:09:48.820 --> 00:09:51.760
that we then render, and
ship down to the browser.

00:09:51.760 --> 00:09:54.820
And so when I first
heard about this,

00:09:54.820 --> 00:09:56.680
it sounds a little bit magic.

00:09:56.680 --> 00:10:01.280
But many people already maintain
their own app shells by hand.

00:10:01.280 --> 00:10:03.340
And so this is just a
little bit of a tool

00:10:03.340 --> 00:10:05.604
to help manage those
sorts of things,

00:10:05.604 --> 00:10:07.270
and to make our lives
as developers just

00:10:07.270 --> 00:10:10.312
a little bit easier.

00:10:10.312 --> 00:10:11.770
So second, I want
to talk about one

00:10:11.770 --> 00:10:15.370
of the most important parts
of building a progressive web

00:10:15.370 --> 00:10:19.940
application, and that's the
usage of its service worker.

00:10:19.940 --> 00:10:23.492
So just like any
application that you're

00:10:23.492 --> 00:10:24.950
building with the
web, you're going

00:10:24.950 --> 00:10:28.010
to want to check to see
if a service worker is

00:10:28.010 --> 00:10:31.340
available within the current
browser that the user is using.

00:10:31.340 --> 00:10:33.260
And then we are going
to register this.

00:10:33.260 --> 00:10:36.500
But we're going to register
this thing called worker-basic.

00:10:36.500 --> 00:10:38.900
And so what I'm going
to demo in a little bit

00:10:38.900 --> 00:10:43.520
is the way that we generate
that worker-basic for you,

00:10:43.520 --> 00:10:46.190
in a way that is
going to, we hope,

00:10:46.190 --> 00:10:48.470
automatically figure out
what's in your application,

00:10:48.470 --> 00:10:50.345
and how it needs to be
rendered, how it needs

00:10:50.345 --> 00:10:52.252
to be cached for your users.

00:10:52.252 --> 00:10:54.710
So we're trying to keep this
step as simple and as standard

00:10:54.710 --> 00:10:55.262
as possible.

00:10:55.262 --> 00:10:57.470
And then we're trying to do
a little bit of the magic

00:10:57.470 --> 00:11:00.590
on the back end, in the same
way that SW pre-cache does

00:11:00.590 --> 00:11:03.410
for generic, kind of
non-framework applications,

00:11:03.410 --> 00:11:08.030
in a very Angular
specific context.

00:11:08.030 --> 00:11:09.770
One of the things
behind the scenes that

00:11:09.770 --> 00:11:13.400
allows us to generate
that service worker basic

00:11:13.400 --> 00:11:15.560
is this idea that we
have an Angular service

00:11:15.560 --> 00:11:17.300
worker manifest.

00:11:17.300 --> 00:11:21.680
And so one of the fantastic
parts of building a single page

00:11:21.680 --> 00:11:26.510
application is that we can use
this idea of HTML-5 push state.

00:11:26.510 --> 00:11:30.260
So this is the idea that I can
have a single page application,

00:11:30.260 --> 00:11:32.930
where all of my JavaScript
is loading in one place,

00:11:32.930 --> 00:11:37.400
and then using URLs to
map into that state.

00:11:37.400 --> 00:11:39.830
I can change what
the user is viewing.

00:11:39.830 --> 00:11:42.780
And so one of the things that
our service worker manifest

00:11:42.780 --> 00:11:46.340
does right now is it
tells the service worker

00:11:46.340 --> 00:11:50.430
which routes it should
listen for, an intercept.

00:11:50.430 --> 00:11:53.930
So if anyone has built a
single page application

00:11:53.930 --> 00:11:57.890
and deployed that onto
Roku, or Firebase, or any

00:11:57.890 --> 00:12:00.284
of these kind of
content platforms,

00:12:00.284 --> 00:12:01.700
one of the things
you had to do is

00:12:01.700 --> 00:12:03.605
you had to intercept
any non-slash,

00:12:03.605 --> 00:12:09.450
or slash index that HTML URLs,
and serve up the right page.

00:12:09.450 --> 00:12:11.540
And so what this
allows us to do is

00:12:11.540 --> 00:12:14.370
this allows us to do the
same thing within the service

00:12:14.370 --> 00:12:15.230
worker.

00:12:15.230 --> 00:12:17.360
And so this is an
example of an area

00:12:17.360 --> 00:12:19.790
that we're trying to make
the tooling much better,

00:12:19.790 --> 00:12:23.990
because right now this file will
work for your basic routes so,

00:12:23.990 --> 00:12:26.210
your slash route,
but we feel that we

00:12:26.210 --> 00:12:29.120
can should be automatically
generating, or automatically

00:12:29.120 --> 00:12:31.610
interpreting in
this file for you,

00:12:31.610 --> 00:12:33.980
based on the routes
of your application.

00:12:33.980 --> 00:12:37.040
Because we have this
statically analyzable

00:12:37.040 --> 00:12:40.130
set of routes within your
application typically,

00:12:40.130 --> 00:12:42.470
and so we should be able
to figure out for you what

00:12:42.470 --> 00:12:45.200
the routes are, and then
automatically intercept those

00:12:45.200 --> 00:12:46.600
in the service worker for you.

00:12:49.980 --> 00:12:52.770
The second step here, in
having a service worker

00:12:52.770 --> 00:12:54.760
within an Angular
application today

00:12:54.760 --> 00:12:58.470
is we have a very simple gulp
task that we've provided.

00:12:58.470 --> 00:13:02.189
So once again, we're working
to embed this into our CLI.

00:13:02.189 --> 00:13:04.230
But we also want to make
sure that we're doing it

00:13:04.230 --> 00:13:06.360
in the right way,
and not limiting

00:13:06.360 --> 00:13:08.400
these sorts of capabilities
to only those that

00:13:08.400 --> 00:13:10.230
are using the CLI,
because we understand

00:13:10.230 --> 00:13:14.160
that a lot of Angular developers
are not yet using the CLI.

00:13:14.160 --> 00:13:16.920
But basically what
this gulp task does

00:13:16.920 --> 00:13:19.590
is it will process all
of the static files that

00:13:19.590 --> 00:13:22.540
match a specific type
within your application.

00:13:22.540 --> 00:13:26.460
So you can specify file
names, or file types,

00:13:26.460 --> 00:13:28.380
and then we will
automatically add that

00:13:28.380 --> 00:13:31.310
to the service worker cache.

00:13:31.310 --> 00:13:34.595
And so then, you saw
this in the last session,

00:13:34.595 --> 00:13:35.970
when you look at
the application,

00:13:35.970 --> 00:13:37.886
and see what your browser
is actually storing,

00:13:37.886 --> 00:13:40.080
you'll see that we automatically
update those caches

00:13:40.080 --> 00:13:43.440
as soon as a new service
worker manifests,

00:13:43.440 --> 00:13:47.000
or service worker
has been deployed.

00:13:47.000 --> 00:13:49.610
One of the things that
we are working on as well

00:13:49.610 --> 00:13:52.550
is the idea of dynamic
content caching.

00:13:52.550 --> 00:13:55.460
So what we would like to do
is every time your Angular

00:13:55.460 --> 00:13:58.910
application encounters
a URL that it has

00:13:58.910 --> 00:14:01.520
to load from the
internet, we want

00:14:01.520 --> 00:14:05.390
to give you the options to
look at the headers of that,

00:14:05.390 --> 00:14:07.490
and obey their caching
policy, but then

00:14:07.490 --> 00:14:10.160
use the service worker to do
that level of dynamic content

00:14:10.160 --> 00:14:11.130
caching.

00:14:11.130 --> 00:14:14.810
So to visualize that further,
if you build an application that

00:14:14.810 --> 00:14:18.200
pulls a data set from
an adjacent web server,

00:14:18.200 --> 00:14:20.450
or backend, we would
like to give you

00:14:20.450 --> 00:14:24.230
the power, and the ability,
to monitor that request,

00:14:24.230 --> 00:14:26.960
and funnel that request
through the service worker,

00:14:26.960 --> 00:14:30.990
and then if you choose to, cache
that request automatically.

00:14:30.990 --> 00:14:33.200
So this is something
that, if you follow

00:14:33.200 --> 00:14:37.640
the @angular/angularchangelog,
or any of our release

00:14:37.640 --> 00:14:40.250
announcements,
you'll see very soon.

00:14:43.410 --> 00:14:45.870
And then the final section
here that I want to talk about

00:14:45.870 --> 00:14:48.340
is the idea of
push notifications.

00:14:48.340 --> 00:14:51.060
So for those of you that may
be less familiar with Angular,

00:14:51.060 --> 00:14:55.080
we are big fans of
the concepts of RXJS,

00:14:55.080 --> 00:14:58.710
which is basically observables,
or streams of information.

00:14:58.710 --> 00:15:01.320
And so as you
might expect, we've

00:15:01.320 --> 00:15:03.720
represented a lot of
push notifications,

00:15:03.720 --> 00:15:07.890
and some of those
capabilities, as observables.

00:15:07.890 --> 00:15:09.810
I have a slide at the
end that shows you

00:15:09.810 --> 00:15:14.040
a working demonstration with
push notifications, in this way

00:15:14.040 --> 00:15:15.760
that I'm talking about here.

00:15:15.760 --> 00:15:18.810
But very similar to
our app shell module,

00:15:18.810 --> 00:15:21.600
we're going to pull in our
service worker module, which

00:15:21.600 --> 00:15:24.810
is, we're going to use
dependency injection to add

00:15:24.810 --> 00:15:27.650
to our app component.

00:15:27.650 --> 00:15:30.830
And then we're going to call
that service, that Ng service

00:15:30.830 --> 00:15:34.700
worker, we're going to
say register me for push.

00:15:34.700 --> 00:15:36.350
And then what
you'll get back is,

00:15:36.350 --> 00:15:40.340
you'll get back a Ng service
worker dot push object.

00:15:40.340 --> 00:15:43.520
And so this is going to be
an observable of messages.

00:15:43.520 --> 00:15:45.410
And because it's
an observable, that

00:15:45.410 --> 00:15:47.660
means you can subscribe to that.

00:15:47.660 --> 00:15:50.364
You can merge it with
other data sources.

00:15:50.364 --> 00:15:52.280
Or you can do any sort
of reactive programming

00:15:52.280 --> 00:15:56.630
that you want to go a little
bit beyond just showing this

00:15:56.630 --> 00:15:59.350
as a notification at
the top of the screen.

00:15:59.350 --> 00:16:01.100
And so we're working
very hard to give you

00:16:01.100 --> 00:16:03.480
control of what goes on.

00:16:03.480 --> 00:16:06.800
So for example, if your
application is offline,

00:16:06.800 --> 00:16:10.070
so the user is not interacting
with it, so to say,

00:16:10.070 --> 00:16:12.980
then obviously it's going to
just come in as a notification.

00:16:12.980 --> 00:16:16.040
But if your user is interacting
with your application

00:16:16.040 --> 00:16:17.990
at the time, a push
notification comes in,

00:16:17.990 --> 00:16:21.170
we want to give you that as
a different type of message,

00:16:21.170 --> 00:16:23.810
and then possibly give you
a different channel for how

00:16:23.810 --> 00:16:26.620
to deal with that message.

00:16:26.620 --> 00:16:29.250
And so if we look at
what it would actually

00:16:29.250 --> 00:16:32.280
look like in an app
component to use these things

00:16:32.280 --> 00:16:35.010
I would first pull in
the Ng service worker,

00:16:35.010 --> 00:16:36.962
by a dependency injection.

00:16:36.962 --> 00:16:39.420
I would double check to make
sure the service worker exists

00:16:39.420 --> 00:16:42.240
within the browser
that I'm running in.

00:16:42.240 --> 00:16:43.785
And then I would
register for push

00:16:43.785 --> 00:16:44.910
as part of the constructor.

00:16:44.910 --> 00:16:48.220
So as part of setting up the
application for the first time.

00:16:48.220 --> 00:16:50.970
And then I would take,
and I would then also

00:16:50.970 --> 00:16:54.600
be able to scan, or
listen to that observable,

00:16:54.600 --> 00:16:57.990
and then I can push that
out into a new array.

00:16:57.990 --> 00:17:01.230
So scan is an operator
on an observable

00:17:01.230 --> 00:17:03.940
that stacks up all of the
things that have come before it.

00:17:03.940 --> 00:17:05.849
So every time a new
push notification

00:17:05.849 --> 00:17:08.069
comes in this
messages array would

00:17:08.069 --> 00:17:11.280
contain all of the messages
received to date, for example.

00:17:14.619 --> 00:17:18.160
So with that brief intro out
of the way what I want to do is

00:17:18.160 --> 00:17:21.099
I want to actually get into
a live application with you,

00:17:21.099 --> 00:17:24.119
build it from scratch, pull
in some data via the web,

00:17:24.119 --> 00:17:27.400
add material design, get
something that looks OK

00:17:27.400 --> 00:17:29.162
and functions well.

00:17:29.162 --> 00:17:31.120
And then I want to go
ahead and use these tools

00:17:31.120 --> 00:17:33.460
that I've talked about,
and add a service

00:17:33.460 --> 00:17:35.410
worker on top of that.

00:17:35.410 --> 00:17:36.920
So let's dive in.

00:17:39.880 --> 00:17:41.700
I've just got to set
up my microphone here.

00:17:48.650 --> 00:17:49.150
All right.

00:17:49.150 --> 00:17:50.662
Can you guys hear me like this?

00:17:50.662 --> 00:17:56.060
This is a Jerry-rigged
little device.

00:17:56.060 --> 00:17:56.600
All right.

00:17:56.600 --> 00:18:00.830
So the first thing I need is a
brand new Angular application.

00:18:00.830 --> 00:18:03.830
And because I'm not assuming any
network connectivity right now

00:18:03.830 --> 00:18:06.650
I took a moment before
we started here,

00:18:06.650 --> 00:18:08.390
and I basically
typed two commands.

00:18:08.390 --> 00:18:11.930
I typed Ng new,
GDD, which creates

00:18:11.930 --> 00:18:14.240
a new project called GDD.

00:18:14.240 --> 00:18:15.860
And then it
automatically went ahead

00:18:15.860 --> 00:18:19.520
and installed all of the
NPM, or dependencies,

00:18:19.520 --> 00:18:21.770
that this application
would need to run.

00:18:21.770 --> 00:18:25.179
So I did the network
intensive part before coming.

00:18:25.179 --> 00:18:26.720
But if we look at
this we're actually

00:18:26.720 --> 00:18:31.100
going to see a very blank
starter Angular application.

00:18:31.100 --> 00:18:35.406
So I'm going to spin up a
server here by typing Ng serv.

00:18:35.406 --> 00:18:36.780
That what we should
be able to do

00:18:36.780 --> 00:18:39.450
is, we should be able
to open the source code,

00:18:39.450 --> 00:18:41.010
and I'll give you a brief look.

00:18:41.010 --> 00:18:42.525
So we're doing a demo for GDD.

00:18:46.090 --> 00:18:48.530
So for those of you that
haven't used the CLI before,

00:18:48.530 --> 00:18:50.820
the CLI's scaffolding
capabilities

00:18:50.820 --> 00:18:53.160
are very powerful, in
terms of the way that it's

00:18:53.160 --> 00:18:56.700
going to give you all of
the complex parts of web

00:18:56.700 --> 00:18:57.510
development now.

00:18:57.510 --> 00:19:01.290
So all of the testing
infrastructure, all the testing

00:19:01.290 --> 00:19:04.200
configuration, the get ignores.

00:19:04.200 --> 00:19:05.970
Because we're big
fans of TypeScript

00:19:05.970 --> 00:19:07.678
it's going to give
you all the TypeScript

00:19:07.678 --> 00:19:09.040
configurations for you.

00:19:09.040 --> 00:19:11.670
And it will even make
the first commit for you,

00:19:11.670 --> 00:19:13.800
if you want it to do so.

00:19:13.800 --> 00:19:17.382
And then if we move up a
layer into source slash app,

00:19:17.382 --> 00:19:18.840
we're going to see
the core of what

00:19:18.840 --> 00:19:20.460
is our Angular application.

00:19:20.460 --> 00:19:23.040
So at the top level,
we have a module

00:19:23.040 --> 00:19:24.730
that was generated for us.

00:19:24.730 --> 00:19:27.690
And it pulls in some things
that people commonly need,

00:19:27.690 --> 00:19:32.700
such as forms, such as HTTP
for making network requests.

00:19:32.700 --> 00:19:36.460
And then it's bootstrapping
to this initial app component.

00:19:36.460 --> 00:19:38.040
And so that app
component is where we

00:19:38.040 --> 00:19:40.790
put most of our functionality.

00:19:40.790 --> 00:19:45.480
So we'll see here, it's a ES6
class with a decorator on it

00:19:45.480 --> 00:19:48.570
telling it what each HTML
to use for its template,

00:19:48.570 --> 00:19:52.170
what CSS to use, and then
how to bind into the DOM.

00:19:52.170 --> 00:19:54.000
So let's change this here.

00:19:54.000 --> 00:19:56.625
So let's build an application
about things to do in China.

00:19:59.521 --> 00:20:00.020
All right.

00:20:00.020 --> 00:20:03.260
So if we save that here,
and if our terminal

00:20:03.260 --> 00:20:05.150
was successful in
the background here,

00:20:05.150 --> 00:20:07.910
we should be able to
go to our local server,

00:20:07.910 --> 00:20:11.420
and see a working Angular
application with that title.

00:20:11.420 --> 00:20:13.790
And so one of the first
things that I always

00:20:13.790 --> 00:20:15.950
do when I am touching
a new application

00:20:15.950 --> 00:20:19.460
is I actually add material
design, because this is a very

00:20:19.460 --> 00:20:22.970
easy to way to go from having a
design that does not look very

00:20:22.970 --> 00:20:26.330
good, which is
typically my designs,

00:20:26.330 --> 00:20:28.640
and then add
something that tries

00:20:28.640 --> 00:20:30.560
to use the best of what
Google is designing,

00:20:30.560 --> 00:20:31.851
in terms of material design.

00:20:31.851 --> 00:20:33.350
So what I'm going
to do is I'm going

00:20:33.350 --> 00:20:37.140
to import from Angular
slash material,

00:20:37.140 --> 00:20:40.350
and I'm going to import
that material module.

00:20:40.350 --> 00:20:42.660
And don't worry about
taking pictures.

00:20:42.660 --> 00:20:46.747
All of this code will be on
GitHub after the presentation.

00:20:46.747 --> 00:20:48.580
So I'm going to add
here, a material module.

00:20:50.974 --> 00:20:52.640
I'm going to say for
root, because we're

00:20:52.640 --> 00:20:55.510
calling it in a root component.

00:20:55.510 --> 00:20:58.170
And then, now that I
have materials then,

00:20:58.170 --> 00:21:00.750
I need to add a theme for it.

00:21:00.750 --> 00:21:03.240
So I've just got a tiny
bit, a snippet of CSS

00:21:03.240 --> 00:21:05.280
here, that I'm
going to paste in.

00:21:05.280 --> 00:21:07.890
This basically
resets the margins.

00:21:07.890 --> 00:21:12.570
Gives me a little bit of padding
on buttons, and on cards,

00:21:12.570 --> 00:21:15.540
and then pulls in that
theme as we talked about.

00:21:15.540 --> 00:21:17.790
And so now, let's also take
advantage of that material

00:21:17.790 --> 00:21:19.590
design that we've just imported.

00:21:19.590 --> 00:21:22.170
So I'm going to go to
my HTML, and instead

00:21:22.170 --> 00:21:25.980
of having a simple H1 tag, I'm
going to add an MD toolbar,

00:21:25.980 --> 00:21:28.200
and I'm going to give
it a color matching

00:21:28.200 --> 00:21:29.520
the primary color of our theme.

00:21:32.031 --> 00:21:32.530
Toolbar.

00:21:32.530 --> 00:21:35.656
Just close out the
MD toolbar tag here.

00:21:35.656 --> 00:21:37.030
So what we've done
is, this color

00:21:37.030 --> 00:21:40.630
refers to the primary color that
was imported from our theme,

00:21:40.630 --> 00:21:42.500
and then MD toolbar
is a material design

00:21:42.500 --> 00:21:44.440
toolbar that looks
a little bit better

00:21:44.440 --> 00:21:45.940
than just the standard H1.

00:21:45.940 --> 00:21:47.520
So now at the top
of our screen, we

00:21:47.520 --> 00:21:49.990
have this relatively nice
looking, "Things To Do

00:21:49.990 --> 00:21:52.970
In China" app introduction.

00:21:52.970 --> 00:21:55.190
So from there what I
want to do is I actually

00:21:55.190 --> 00:21:57.770
want to pull in a
couple of things

00:21:57.770 --> 00:22:00.260
that would normally be
pulled from the internet.

00:22:00.260 --> 00:22:03.440
So namely, a list of
things to do in China,

00:22:03.440 --> 00:22:06.230
and some images that
correspond with them.

00:22:06.230 --> 00:22:08.630
So let's go ahead and
copy those things.

00:22:08.630 --> 00:22:12.230
So I'm going to go into our
source slash assets folder,

00:22:12.230 --> 00:22:13.455
and I'm going to copy from--

00:22:16.235 --> 00:22:17.710
I think.

00:22:17.710 --> 00:22:20.270
Yep so star dot jpg.

00:22:20.270 --> 00:22:22.430
We'll just copy all
the images, and then I

00:22:22.430 --> 00:22:25.340
will copy our China
places JSON file.

00:22:28.040 --> 00:22:28.832
All right.

00:22:28.832 --> 00:22:31.040
So those things would
typically be hosted on the web,

00:22:31.040 --> 00:22:35.210
but I'm trying to do this in
an entirely localized way.

00:22:35.210 --> 00:22:37.550
But now we've got
a JSON file that's

00:22:37.550 --> 00:22:39.220
going to be served
via the internet.

00:22:39.220 --> 00:22:42.350
And so I need to pull that
JSON file into my application.

00:22:42.350 --> 00:22:44.360
And so what I can
do is, I can use

00:22:44.360 --> 00:22:47.730
that HTTP module that we talked
about a little bit earlier.

00:22:47.730 --> 00:22:50.630
So I'm going to pull in
HTTP, from Angular HTTP.

00:22:53.290 --> 00:22:59.690
And then in our
constructor I'm going

00:22:59.690 --> 00:23:02.550
to use dependency injection
to get a handle on that it

00:23:02.550 --> 00:23:04.940
HTTP service.

00:23:04.940 --> 00:23:07.750
And then once I have that I
can define a local variable,

00:23:07.750 --> 00:23:09.070
such as places.

00:23:09.070 --> 00:23:11.840
Or a member variable
on our component,

00:23:11.840 --> 00:23:14.320
and then I will
go ahead and add,

00:23:14.320 --> 00:23:16.450
or I will retrieve
that set of places.

00:23:16.450 --> 00:23:22.960
So I'll say, this dot
places equals HTTP dot get.

00:23:22.960 --> 00:23:27.174
And it's going to be in assets
slash-- what did we call it?

00:23:27.174 --> 00:23:34.330
I think it was China
dash places dot JSON.

00:23:34.330 --> 00:23:36.990
And then we'll all just want
to throw a quick map on here

00:23:36.990 --> 00:23:40.361
to get the JSON of the response.

00:23:40.361 --> 00:23:40.860
All right.

00:23:40.860 --> 00:23:42.900
So now, we should
theoretically have

00:23:42.900 --> 00:23:46.110
a list of places that is
an observable emitting that

00:23:46.110 --> 00:23:49.710
list as soon as the HTTP
request is completed.

00:23:49.710 --> 00:23:52.622
But now we actually want to
go ahead and render that list.

00:23:52.622 --> 00:23:54.330
So let's go ahead into
our app component.

00:23:54.330 --> 00:23:56.440
And let's first just
throw a div on here.

00:23:56.440 --> 00:23:58.773
And I'm going to use what we
call a structural directive

00:23:58.773 --> 00:23:59.870
called and Ng four.

00:23:59.870 --> 00:24:02.060
And I'll say what
place of places.

00:24:02.060 --> 00:24:08.700
And I'm going to automatically
DA sync this request.

00:24:08.700 --> 00:24:10.747
And then let's say,
place dot name.

00:24:13.290 --> 00:24:13.790
All right.

00:24:13.790 --> 00:24:16.640
So if I've done this correctly
what we should be getting

00:24:16.640 --> 00:24:21.710
is a HTTP request gets made
to China dash places dot JSON.

00:24:25.390 --> 00:24:29.240
And then that should be
iterated over asynchronously,

00:24:29.240 --> 00:24:31.250
and then be rendered
out to the page.

00:24:31.250 --> 00:24:32.660
So let's take a look.

00:24:32.660 --> 00:24:33.230
All right.

00:24:33.230 --> 00:24:35.210
We now have a very
simple list of things

00:24:35.210 --> 00:24:36.909
that we can do in China.

00:24:36.909 --> 00:24:39.200
But let's go ahead and make
this a little bit prettier,

00:24:39.200 --> 00:24:42.050
because once again, you
should not trust my design.

00:24:42.050 --> 00:24:45.370
So I'm going to use
something called an MD card.

00:24:45.370 --> 00:24:48.750
And I'm going to put this
into an MD card header.

00:24:52.510 --> 00:24:55.870
And we'll say MD card content.

00:24:55.870 --> 00:24:59.775
And we'll put the
place dot description.

00:24:59.775 --> 00:25:03.650
I'll just complete
the task here.

00:25:03.650 --> 00:25:04.150
All right.

00:25:04.150 --> 00:25:06.733
So now we're going to be using
a material design card, instead

00:25:06.733 --> 00:25:09.161
of a simple div file.

00:25:09.161 --> 00:25:09.660
All right.

00:25:09.660 --> 00:25:11.460
So now this looks a
little bit better.

00:25:11.460 --> 00:25:14.040
But I think we can
do even one better.

00:25:14.040 --> 00:25:16.170
So here I'm going
to use an image tag.

00:25:16.170 --> 00:25:22.050
And I'm going to use a material
design directive called MD card

00:25:22.050 --> 00:25:24.760
image.

00:25:24.760 --> 00:25:34.370
And I'm going to bind the source
attribute to our assets folder,

00:25:34.370 --> 00:25:36.890
plus the place dot image URL.

00:25:41.365 --> 00:25:42.740
And what this
directive should do

00:25:42.740 --> 00:25:45.170
is, it should make it
everything render nice and full,

00:25:45.170 --> 00:25:47.990
and we should be seeing
that nice picture.

00:25:47.990 --> 00:25:50.300
So effectively, that
is our application.

00:25:50.300 --> 00:25:51.770
So it now works.

00:25:51.770 --> 00:25:54.410
It should render
relatively well on mobile,

00:25:54.410 --> 00:25:58.160
if we consider a
normal looking device.

00:25:58.160 --> 00:25:59.990
And so now let's try
turning this into more

00:25:59.990 --> 00:26:01.977
of an advanced web application.

00:26:01.977 --> 00:26:03.560
And so the first
thing I'm going to do

00:26:03.560 --> 00:26:07.410
is I'm going to pull in a
very basic manifest file.

00:26:07.410 --> 00:26:10.220
So I'm going to once again copy
from my little magic folder

00:26:10.220 --> 00:26:12.800
here, a manifest.

00:26:12.800 --> 00:26:17.810
So if we look at what
I just pulled in,

00:26:17.810 --> 00:26:20.604
this is a GDD, Things
To See In China app,

00:26:20.604 --> 00:26:21.770
and I have supplied an icon.

00:26:21.770 --> 00:26:25.422
I've supplied some
colors for it, as well.

00:26:25.422 --> 00:26:26.880
But we also have
to reference that.

00:26:26.880 --> 00:26:28.890
So I've got a
little snippet here.

00:26:28.890 --> 00:26:30.310
So we can pull
that into our HTML.

00:26:39.645 --> 00:26:42.020
So I'm just going to put it
next to this other link here.

00:26:44.951 --> 00:26:45.450
All right.

00:26:45.450 --> 00:26:47.820
So there are a couple
other dependencies now

00:26:47.820 --> 00:26:49.860
that we want to get a
little bit more advanced,

00:26:49.860 --> 00:26:52.290
and do things like
adding a service worker.

00:26:52.290 --> 00:26:54.210
So there's angular
slash service worker

00:26:54.210 --> 00:26:58.590
project that I've already
added to our project here.

00:26:58.590 --> 00:27:00.840
So if you see Angular
slash service worker,

00:27:00.840 --> 00:27:03.630
I've already used
NPM to add that.

00:27:03.630 --> 00:27:06.440
As well as dependencies,
such as gulp.

00:27:06.440 --> 00:27:07.920
And so now what
I'm going to do is

00:27:07.920 --> 00:27:12.810
I'm going to copy a very generic
gulp task, and a service worker

00:27:12.810 --> 00:27:15.010
configuration, into
our project again.

00:27:18.100 --> 00:27:21.110
So we're going to
copy the gulp file.

00:27:21.110 --> 00:27:24.305
And we're going to copy
the Ng SW manifest.

00:27:27.470 --> 00:27:30.110
So just like I showed you
earlier in the slides,

00:27:30.110 --> 00:27:31.816
we're only going to
intercept the slash.

00:27:31.816 --> 00:27:34.190
So we're not going to intercept
any other special routes,

00:27:34.190 --> 00:27:36.192
and override them.

00:27:36.192 --> 00:27:38.150
And we're going to see
a relatively simple gulp

00:27:38.150 --> 00:27:42.020
file, where we want to look
for any HTML, CSS, JavaScript,

00:27:42.020 --> 00:27:44.630
as SEGs, JSON files, JPEGs.

00:27:44.630 --> 00:27:46.700
So just a list of
standard files that

00:27:46.700 --> 00:27:49.915
might be in our application.

00:27:49.915 --> 00:27:51.290
And then last,
what we need to do

00:27:51.290 --> 00:27:53.415
is, we need to make sure
that our service worker is

00:27:53.415 --> 00:27:54.890
registered on our page.

00:27:54.890 --> 00:27:58.240
We're going to, again,
modify the index HTML file.

00:27:58.240 --> 00:27:59.740
Right before the
end of the head I'm

00:27:59.740 --> 00:28:01.780
going to include our
script differ, where

00:28:01.780 --> 00:28:03.340
we check if there's
a service worker,

00:28:03.340 --> 00:28:05.891
and then we register using that.

00:28:05.891 --> 00:28:06.390
All right.

00:28:06.390 --> 00:28:10.260
So we've done a few extra
steps here, and copied

00:28:10.260 --> 00:28:12.001
some very boilerplate code.

00:28:12.001 --> 00:28:13.500
Once again, these
are things that we

00:28:13.500 --> 00:28:14.970
want to help automate for you.

00:28:14.970 --> 00:28:17.280
But they're relatively
simple to do.

00:28:17.280 --> 00:28:19.440
So let's go ahead
now, and take this out

00:28:19.440 --> 00:28:21.144
of live development mode.

00:28:21.144 --> 00:28:22.560
And what I actually
want to do is,

00:28:22.560 --> 00:28:24.150
I want to do a full
production build.

00:28:24.150 --> 00:28:26.400
So I'm going to, again,
use the command line.

00:28:26.400 --> 00:28:29.520
And I'm going to say
Ng build AOT prod,

00:28:29.520 --> 00:28:32.504
and I'm going to call my
gulp task called, enhance.

00:28:32.504 --> 00:28:33.920
And so what this
is going to do is

00:28:33.920 --> 00:28:35.750
this is going to
take my code, it's

00:28:35.750 --> 00:28:39.050
going to compile all of the
templates, all the CSS, down

00:28:39.050 --> 00:28:42.920
into JavaScript, into
what we call Ng factories.

00:28:42.920 --> 00:28:45.230
It's going to minify the
code, pull out any comments.

00:28:45.230 --> 00:28:47.660
It's going to do a
little bit of ugly-fying,

00:28:47.660 --> 00:28:50.780
a little bit of tree shaking,
store that entire application

00:28:50.780 --> 00:28:53.450
into the slash disk
folder, and then render out

00:28:53.450 --> 00:28:57.710
the service worker based on
the files as they were then.

00:28:57.710 --> 00:29:04.039
So the Angular CLI is finished,
and our gulp task is finished,

00:29:04.039 --> 00:29:05.330
so let's check our disk folder.

00:29:05.330 --> 00:29:08.117
And let's actually go
ahead, and serve this.

00:29:08.117 --> 00:29:10.700
So I'm going to use Python, just
because I find that Python is

00:29:10.700 --> 00:29:12.516
on every computer I ever touch.

00:29:12.516 --> 00:29:14.265
And I'm going to use
a simple HTTP server.

00:29:16.880 --> 00:29:21.090
So now, when I access
local host 8,000,

00:29:21.090 --> 00:29:23.160
we should see the
same application.

00:29:23.160 --> 00:29:29.660
But if we look in
the developer tools

00:29:29.660 --> 00:29:32.626
we should now see that we've
registered a service worker.

00:29:32.626 --> 00:29:34.250
And that service
worker should be doing

00:29:34.250 --> 00:29:35.837
all of the caching for us.

00:29:35.837 --> 00:29:37.670
Pulling in these images,
pulling in the JSON

00:29:37.670 --> 00:29:39.380
file that we were pulling.

00:29:39.380 --> 00:29:41.780
And then, for example, if I
want to take this application

00:29:41.780 --> 00:29:44.510
offline, so now I want
to actually go out

00:29:44.510 --> 00:29:47.120
into China, where I may not
have an internet connection,

00:29:47.120 --> 00:29:50.360
and I want to still be able to
pull up all of this content,

00:29:50.360 --> 00:29:53.360
and I do a refresh, it
should still be there.

00:29:53.360 --> 00:29:56.610
So the entire application
is now running offline,

00:29:56.610 --> 00:29:59.325
stored on my device, and
because we have that nice, web

00:29:59.325 --> 00:30:01.200
app manifest, we're
going to get all

00:30:01.200 --> 00:30:03.510
of the appropriate
lightning scores.

00:30:03.510 --> 00:30:07.110
I think this thing, this
app gets about a 77,

00:30:07.110 --> 00:30:08.890
if I remember correctly.

00:30:08.890 --> 00:30:10.890
And there's more that you
can do to optimize it.

00:30:10.890 --> 00:30:14.010
But it's very, very
easy to get started.

00:30:14.010 --> 00:30:18.092
So that was our application.

00:30:18.092 --> 00:30:19.800
Let me just jump back
to the slides here.

00:30:23.400 --> 00:30:25.990
So all of today's code,
it's not there yet,

00:30:25.990 --> 00:30:31.197
but it will be in my GitHub
repo there, 2016 PWA Beijing.

00:30:31.197 --> 00:30:33.780
And then if you want to see all
of the more advanced features,

00:30:33.780 --> 00:30:36.900
such as app shell generation,
we have another sample there

00:30:36.900 --> 00:30:39.680
that you can take a look at.

00:30:39.680 --> 00:30:41.749
So I will take
questions offline.

00:30:41.749 --> 00:30:44.290
So if you guys want to come up,
thank you so much for coming.

00:30:54.390 --> 00:30:54.890
Sure.

00:30:54.890 --> 00:30:57.540
I can try and take
questions now.

00:30:57.540 --> 00:31:00.010
Should we also do the lightning
score, and see how we do?

00:31:03.250 --> 00:31:35.200
AUDIENCE: [SPEAKING CHINESE]

00:31:35.200 --> 00:31:38.380
AUDIENCE: So this is a very
specific question about--

00:31:38.380 --> 00:31:43.930
So the question is, even if
the data is bound in Angular,

00:31:43.930 --> 00:31:47.810
does somehow the page does
not refresh, or updated.

00:31:47.810 --> 00:31:52.900
So the question is
wondering if any site that--

00:31:52.900 --> 00:31:54.775
STEPHEN FLUIN: So the
page will what refresh?

00:31:54.775 --> 00:31:57.180
AUDIENCE: It's not
updated, or refreshed.

00:31:57.180 --> 00:32:02.150
STEPHEN FLUIN: So what the
service worker basic does

00:32:02.150 --> 00:32:05.300
is it will proxy requests,
and if something is not

00:32:05.300 --> 00:32:07.700
found in the cache, then it
will go out to the internet,

00:32:07.700 --> 00:32:09.860
and try and fetch that for you.

00:32:09.860 --> 00:32:13.580
But one of the reasons that
I'm a big fan, personally,

00:32:13.580 --> 00:32:16.850
of observables is that you
can actually mix and match

00:32:16.850 --> 00:32:18.170
data sources.

00:32:18.170 --> 00:32:20.000
So for example, in
several applications

00:32:20.000 --> 00:32:24.800
that I've seen built, you can
combine a observable stream

00:32:24.800 --> 00:32:27.470
coming from a HTTP request,
that may or may not

00:32:27.470 --> 00:32:31.700
be cached locally, with
perhaps local storage, which

00:32:31.700 --> 00:32:33.200
should be in memory.

00:32:33.200 --> 00:32:36.860
But it might be faster than a
local service worker request,

00:32:36.860 --> 00:32:40.250
with a full web request out
to a third party service.

00:32:40.250 --> 00:32:43.610
So observables, and the
ability to merge observables

00:32:43.610 --> 00:32:48.860
into a single, kind of, event
emitter, or a single subject,

00:32:48.860 --> 00:32:50.510
is one of the most
powerful things.

00:32:50.510 --> 00:32:53.300
And that would be one way to
achieve this idea of combining

00:32:53.300 --> 00:32:55.340
the local cached version,
and with an attempt

00:32:55.340 --> 00:32:56.450
to get something fresher.

00:33:06.410 --> 00:33:06.991
AUDIENCE Hi.

00:33:06.991 --> 00:33:07.824
I have one question.

00:33:07.824 --> 00:33:10.024
And PWA, and Angular--

00:33:10.024 --> 00:33:12.440
STEPHEN FLUIN: Could you speak
a little bit louder please?

00:33:12.440 --> 00:33:13.264
AUDIENCE: OK.

00:33:13.264 --> 00:33:15.596
Sorry.

00:33:15.596 --> 00:33:23.520
And PWA, and Angular can
be used Chrome, Explorer.

00:33:23.520 --> 00:33:29.560
And I want to know how it can
be used in Adroid WebView,

00:33:29.560 --> 00:33:31.620
could we support good?

00:33:31.620 --> 00:33:33.530
STEPHEN FLUIN: So
Angular is going

00:33:33.530 --> 00:33:36.950
to be identical to any
other framework, or even

00:33:36.950 --> 00:33:40.520
pure JavaScript, when it
comes to browser support.

00:33:40.520 --> 00:33:42.290
So we're going to--

00:33:42.290 --> 00:33:45.680
I love the idea of progressively
enhanced applications,

00:33:45.680 --> 00:33:48.980
because you can add a service
worker to an application,

00:33:48.980 --> 00:33:51.950
and if service workers are
available in that context,

00:33:51.950 --> 00:33:55.460
so I know more and more
Android WebViews are

00:33:55.460 --> 00:33:58.400
kind of being served by
Chrome, instead of Android.

00:33:58.400 --> 00:34:02.000
I think that that's a
legacy that's slowly fading.

00:34:02.000 --> 00:34:05.090
But it's not an Angular
specific problem.

00:34:05.090 --> 00:34:07.700
AUDIENCE: How about PWA?

00:34:07.700 --> 00:34:10.860
PWA in Android WebView.

00:34:10.860 --> 00:34:12.310
STEPHEN FLUIN: In
Android WebView?

00:34:12.310 --> 00:34:12.969
AUDIENCE: Yeah.

00:34:12.969 --> 00:34:15.489
STEPHEN FLUIN: Do you
know what version?

00:34:15.489 --> 00:34:16.360
I think it works.

00:34:16.360 --> 00:34:20.320
I always use, caniuse.com,
or Is Service Worker Ready,

00:34:20.320 --> 00:34:23.300
are two resources
that you can see.

00:34:23.300 --> 00:34:28.550
So Angular is not going to get
in the way, or help in any way.

00:34:28.550 --> 00:34:31.489
If PWAs work in Android,
which I believe they

00:34:31.489 --> 00:34:35.423
do in four and above, maybe.

00:34:35.423 --> 00:34:38.649
AUDIENCE: I don't
remember the exact--

00:34:38.649 --> 00:34:40.440
STEPHEN FLUIN: They
may work, they may not,

00:34:40.440 --> 00:34:43.451
but as more Android devices
continue getting updated,

00:34:43.451 --> 00:34:44.409
things will get better.

00:34:44.409 --> 00:34:45.420
AUDIENCE: OK.

00:34:45.420 --> 00:34:49.371
And another question, I have
application use Angular,

00:34:49.371 --> 00:34:55.710
and use Angular with
Android WebView,

00:34:55.710 --> 00:35:02.190
but sometimes when I
load a URL this will

00:35:02.190 --> 00:35:05.954
shows a gap in the WebView.

00:35:05.954 --> 00:35:07.105
STEPHEN FLUIN: Like a--

00:35:07.105 --> 00:35:08.260
AUDIENCE: An outer--

00:35:08.260 --> 00:35:12.595
STEPHEN FLUIN: A space, or
a gap, in terms of time?

00:35:12.595 --> 00:35:18.630
AUDIENCE: A very short time,
about one or two seconds.

00:35:18.630 --> 00:35:19.720
One or two seconds.

00:35:19.720 --> 00:35:22.020
And there's a date, and it
says, hi, our Javascript

00:35:22.020 --> 00:35:23.717
will be load.

00:35:23.717 --> 00:35:24.550
STEPHEN FLUIN: Sure.

00:35:24.550 --> 00:35:27.490
So and that's why an app
shell is really important,

00:35:27.490 --> 00:35:31.390
because that app shell
is what should get you,

00:35:31.390 --> 00:35:34.150
instead of a gap, it
should get you something

00:35:34.150 --> 00:35:36.080
meaningful on the page,
that tells the user,

00:35:36.080 --> 00:35:37.690
this application is loading.

00:35:37.690 --> 00:35:39.820
So for example,
in my application

00:35:39.820 --> 00:35:43.420
we just had the word loading,
which is not a great app shell,

00:35:43.420 --> 00:35:46.990
by any means, but if you could
render, for example, the title

00:35:46.990 --> 00:35:50.470
bar, just a flat
image, or excuse me,

00:35:50.470 --> 00:35:54.490
a flat background, which is
one line of CSS, then the user

00:35:54.490 --> 00:35:56.500
feels like something's coming.

00:35:56.500 --> 00:35:58.750
And then the faster
we can swap that out

00:35:58.750 --> 00:36:02.399
with actual content, the better,
which is why service worker is

00:36:02.399 --> 00:36:04.690
great, because service worker
means we don't have to do

00:36:04.690 --> 00:36:06.100
a full network round trip.

00:36:06.100 --> 00:36:09.810
We can just get that from local
cache, and then render it.

00:36:09.810 --> 00:36:11.358
AUDIENCE: OK.

00:36:11.358 --> 00:36:18.122
And is there any better
solution about this?

00:36:18.122 --> 00:36:20.070
STEPHEN FLUIN: So the
question is, do we have

00:36:20.070 --> 00:36:23.118
a better solution for the gap?

00:36:23.118 --> 00:36:26.856
AUDIENCE: Cause my
application is about stock.

00:36:26.856 --> 00:36:28.800
STEPHEN FLUIN: So
I mean, I think

00:36:28.800 --> 00:36:33.330
the Chrome team, in general,
is fantastic at focusing

00:36:33.330 --> 00:36:34.320
on metrics.

00:36:34.320 --> 00:36:36.920
So we talk about
time to first paint,

00:36:36.920 --> 00:36:40.530
and time to interactive,
which is you

00:36:40.530 --> 00:36:42.600
only make them
better by writing,

00:36:42.600 --> 00:36:46.670
kind of better app shells, and
by writing less JavaScript.

00:36:46.670 --> 00:36:48.660
So on the Angular
side of things,

00:36:48.660 --> 00:36:51.720
we're working on rendering as
little JavaScript as possible.

00:36:51.720 --> 00:36:53.460
And we have a long
way to go there

00:36:53.460 --> 00:36:56.310
to make it even
better than before,

00:36:56.310 --> 00:36:57.830
and running less JavaScript.

00:36:57.830 --> 00:37:00.090
But on the HTML side
of things, that's

00:37:00.090 --> 00:37:03.570
going to be a subject of the
HTML you're able to craft,

00:37:03.570 --> 00:37:05.670
and then the device's
ability to render it.

00:37:05.670 --> 00:37:06.370
AUDIENCE: Okay.

00:37:06.370 --> 00:37:07.879
Thank you.

00:37:07.879 --> 00:37:10.170
AUDIENCE: I just want to toss
one thing in where I just

00:37:10.170 --> 00:37:11.850
did a little quick searching.

00:37:11.850 --> 00:37:14.940
And service workers
are supported

00:37:14.940 --> 00:37:19.750
in Chrome WebView, starting
in Chrome WebView 40, right?

00:37:19.750 --> 00:37:24.330
So if you are running a version
of Android that has the Chrome

00:37:24.330 --> 00:37:27.027
WebView, and it is
version 40 or above,

00:37:27.027 --> 00:37:28.860
you get the service
workers, and all the fun

00:37:28.860 --> 00:37:30.300
stuff that goes along with that.

00:37:30.300 --> 00:37:32.133
STEPHEN FLUIN: Build
it today, and every day

00:37:32.133 --> 00:37:33.687
you will hit more users.

00:37:33.687 --> 00:37:34.641
AUDIENCE: Yes.

00:37:39.411 --> 00:37:43.110
AUDIENCE: I have a
question about it the SEO.

00:37:43.110 --> 00:37:46.140
As we know, the Angular
is a good framework

00:37:46.140 --> 00:37:49.050
so that we can use
[INAUDIBLE] banding.

00:37:49.050 --> 00:37:53.520
But the problem is just
we have our website,

00:37:53.520 --> 00:37:57.390
but the Google spider
cannot cache our website,

00:37:57.390 --> 00:38:01.630
because they cannot do
anything with our JavaScript.

00:38:01.630 --> 00:38:04.790
How can we deal with
the SEO problem?

00:38:04.790 --> 00:38:07.560
STEPHEN FLUIN: So this is
common to many single page

00:38:07.560 --> 00:38:09.390
applications, or
really any application

00:38:09.390 --> 00:38:12.820
that is using JavaScript
to run its code.

00:38:12.820 --> 00:38:14.880
There are a number
of different answers.

00:38:14.880 --> 00:38:17.520
A growing percentage
of search engines

00:38:17.520 --> 00:38:21.970
render JavaScript for you, and
understand the page perfectly.

00:38:21.970 --> 00:38:25.060
But there are still search
engines that do not.

00:38:25.060 --> 00:38:28.740
And for those there are things
like server side rendering,

00:38:28.740 --> 00:38:31.170
either doing it yourself,
where you take control,

00:38:31.170 --> 00:38:33.510
using a project such
as Angular Universal

00:38:33.510 --> 00:38:36.010
to render the page on
behalf of your user.

00:38:36.010 --> 00:38:39.600
There's also services out
there that will load your page,

00:38:39.600 --> 00:38:41.760
and then store
that, and cache that

00:38:41.760 --> 00:38:43.620
rendered version of your page.

00:38:43.620 --> 00:38:46.110
So its a bit of a
hybrid approach.

00:38:46.110 --> 00:38:50.990
So it's going to work
in many search engines,

00:38:50.990 --> 00:38:54.709
especially the one I
use, and then there

00:38:54.709 --> 00:38:56.250
are services if you
want to continue,

00:38:56.250 --> 00:38:58.166
and take the performance
up to the next notch.

00:39:01.434 --> 00:39:05.370
I Think there's time for
maybe one more question.

00:39:05.370 --> 00:39:07.255
How are we doing?

00:39:07.255 --> 00:39:08.080
AUDIENCE: Hello.

00:39:08.080 --> 00:39:09.700
Just a short one.

00:39:09.700 --> 00:39:12.100
I saw you mentioning
this gulp task,

00:39:12.100 --> 00:39:17.410
and I thought that Angular
2 was based on Webpack,

00:39:17.410 --> 00:39:21.116
and I thought were
hopefully going to move away

00:39:21.116 --> 00:39:22.240
from these kinds of things.

00:39:22.240 --> 00:39:23.080
Now I just saw it.

00:39:23.080 --> 00:39:25.210
I wasn't sure, is it just
related to your project,

00:39:25.210 --> 00:39:26.425
or to Angular 2 in-general.

00:39:26.425 --> 00:39:27.420
STEPHEN FLUIN: No.

00:39:27.420 --> 00:39:29.545
So I'll clarify in
a couple of ways.

00:39:29.545 --> 00:39:30.145
AUDIENCE: OK.

00:39:30.145 --> 00:39:34.210
STEPHEN FLUIN: Angular 2 is not,
in any way, built on Webpack.

00:39:34.210 --> 00:39:37.330
We are agnostic of
module bundlers.

00:39:37.330 --> 00:39:40.360
So there are a number
of good module bundlers

00:39:40.360 --> 00:39:41.830
that have different trade-offs.

00:39:41.830 --> 00:39:45.130
So in general, we tend
to think about Webpack,

00:39:45.130 --> 00:39:46.690
which we use for the CLI.

00:39:46.690 --> 00:39:48.580
And so we're big
fans of Webpack,

00:39:48.580 --> 00:39:50.950
but you'll also see a lot
of our documentation written

00:39:50.950 --> 00:39:53.170
for System JS,
because it's easier

00:39:53.170 --> 00:39:56.020
to run System JS
in the client side,

00:39:56.020 --> 00:39:57.670
and in different contexts.

00:39:57.670 --> 00:39:59.710
There's also things
like roll up,

00:39:59.710 --> 00:40:02.174
which allow you to do more
effective tree shaking,

00:40:02.174 --> 00:40:04.090
and then finally things
like Closure Compiler,

00:40:04.090 --> 00:40:05.590
which can do advanced
optimizations,

00:40:05.590 --> 00:40:08.890
and probably achieve the
best level of tree shaking.

00:40:08.890 --> 00:40:12.210
So Angular itself is
agnostic to how you bundle.

00:40:12.210 --> 00:40:16.600
And in general, the module
bundling, and module loading

00:40:16.600 --> 00:40:19.120
ecosystem is going to
undergo significant change

00:40:19.120 --> 00:40:22.630
over the next six to 12
months, because there is not

00:40:22.630 --> 00:40:26.030
yet a web standard for how
modules should be loaded.

00:40:26.030 --> 00:40:28.660
Once that standard is
formalized, all of those tools

00:40:28.660 --> 00:40:30.880
will probably update to comply.

00:40:30.880 --> 00:40:32.740
And that world will change.

00:40:32.740 --> 00:40:39.150
So first part, I love all
of my bundlers equally.

00:40:39.150 --> 00:40:43.860
The second part is what I
demoed today is a gulp task,

00:40:43.860 --> 00:40:47.670
but we are working to get
it to work as a plug-in.

00:40:47.670 --> 00:40:49.530
And there are code
samples online

00:40:49.530 --> 00:40:54.450
that if you ping me on an
GitHub I can help you find,

00:40:54.450 --> 00:40:58.650
using Webpack today that do the
same service worker generation.

00:40:58.650 --> 00:41:01.110
So where we're designing
these things independent

00:41:01.110 --> 00:41:04.684
of the module bundler, so that
you can use them anywhere.

00:41:04.684 --> 00:41:06.100
AUDIENCE: OK, thank
you very much.

00:41:17.370 --> 00:41:21.610
AUDIENCE: Do you think Angular
2 needs some state management

00:41:21.610 --> 00:41:26.630
framework, like Redux, or React?

00:41:26.630 --> 00:41:32.040
If not, what's best practice
to manage is our model,

00:41:32.040 --> 00:41:33.540
and to help?

00:41:33.540 --> 00:41:37.150
STEPHEN FLUIN: So
we are opinionated

00:41:37.150 --> 00:41:39.640
about a lot of things,
and we try and force you

00:41:39.640 --> 00:41:44.320
down some paths that improve
your developer experience.

00:41:44.320 --> 00:41:48.700
State management is one that
we are less opinionated about.

00:41:48.700 --> 00:41:51.460
So we have a Redux
pattern library

00:41:51.460 --> 00:41:56.410
called NGRX, that allows you
to set up all of the reducers,

00:41:56.410 --> 00:41:58.180
and set up all the
actions that you want,

00:41:58.180 --> 00:42:01.720
and use that exact same
pattern in a very Angular way.

00:42:01.720 --> 00:42:05.650
You'll see that you can actually
use Redux within Angular.

00:42:05.650 --> 00:42:07.660
So for example,
there's a project

00:42:07.660 --> 00:42:10.930
called Apollo, which is
a graphical client that

00:42:10.930 --> 00:42:14.500
uses Redox, and exposes
all of this content

00:42:14.500 --> 00:42:18.800
to use transparently
within Angular apps.

00:42:18.800 --> 00:42:22.120
But if you don't
want to use NGRX,

00:42:22.120 --> 00:42:23.770
a lot of what's
built into Angular

00:42:23.770 --> 00:42:27.430
is based on, if
you want it to be,

00:42:27.430 --> 00:42:29.330
one way immutable
data structures.

00:42:29.330 --> 00:42:35.710
So for example, what I showed
here was a observable of places

00:42:35.710 --> 00:42:39.130
that would come in,
and then a component

00:42:39.130 --> 00:42:43.720
that was unraveling that via the
async pipe, and showing that.

00:42:43.720 --> 00:42:46.190
What would happen, because
we're using that one way

00:42:46.190 --> 00:42:50.990
immutable dataflow is, if that
observable emitted a new value,

00:42:50.990 --> 00:42:52.490
that component
would automatically

00:42:52.490 --> 00:42:55.980
be updated without
reinstantiation.

00:42:55.980 --> 00:42:58.370
So that's kind of this magical
world where, maybe we're

00:42:58.370 --> 00:43:00.620
combining data from three
different sources, right?

00:43:00.620 --> 00:43:03.560
We're combining it from a
memory cache, a disk cache,

00:43:03.560 --> 00:43:05.480
and a full network request.

00:43:05.480 --> 00:43:10.015
And then whatever resolves
first is going to be shown.

00:43:10.015 --> 00:43:11.390
And then whatever
resolves second

00:43:11.390 --> 00:43:12.870
is going to be shown second.

00:43:12.870 --> 00:43:14.900
And then finally, that network
request is going to finish,

00:43:14.900 --> 00:43:16.524
and then you'll have
the freshest data.

00:43:16.524 --> 00:43:20.240
And you can propagate that back
into the appropriate caches.

00:43:20.240 --> 00:43:23.420
And so Angular, as I talked
about in an Angular track

00:43:23.420 --> 00:43:27.470
earlier today, is spending a
ton of time on making Angular

00:43:27.470 --> 00:43:30.080
very, very fast,
and very performant.

00:43:30.080 --> 00:43:34.280
And so we've built in this idea
of immutable data structures

00:43:34.280 --> 00:43:37.160
into that model, where we don't
have to run change detection,

00:43:37.160 --> 00:43:38.637
unless there's a new value.

00:43:38.637 --> 00:43:39.470
AUDIENCE: Thank you.

00:43:46.900 --> 00:43:49.050
AUDIENCE: Hello.

00:43:49.050 --> 00:44:19.730
[SPEAKING CHINESE]

00:44:19.730 --> 00:44:22.960
AUDIENCE: He's asking,
he did two things.

00:44:22.960 --> 00:44:26.620
One, he is using Android
to develop a app.

00:44:26.620 --> 00:44:28.880
Another is doing a web app.

00:44:28.880 --> 00:44:31.990
But he feels like
he likes Angular,

00:44:31.990 --> 00:44:36.130
but he's not sure that
Google is pushing for Angular

00:44:36.130 --> 00:44:41.320
or the other cases, right?

00:44:41.320 --> 00:44:45.122
Or in the future, or
maybe you can add it more.

00:44:45.122 --> 00:44:47.580
AUDIENCE: He mentioned like,
some kind of develop framework

00:44:47.580 --> 00:44:48.960
I'm not familiar with, React.

00:44:48.960 --> 00:44:49.910
AUDIENCE: React.

00:44:49.910 --> 00:44:53.059
Yeah, he has React.

00:44:53.059 --> 00:44:55.100
STEPHEN FLUIN: So, maybe
I'll just try and answer

00:44:55.100 --> 00:44:55.715
the question.

00:44:55.715 --> 00:44:56.360
AUDIENCE: Yeah.

00:44:56.360 --> 00:44:59.600
STEPHEN FLUIN: You can tell
me if I've misunderstood.

00:44:59.600 --> 00:45:01.790
So when it comes to
bringing great experiences

00:45:01.790 --> 00:45:05.660
to mobile devices, and
in particular, Android,

00:45:05.660 --> 00:45:08.780
I definitely always
look to the web first.

00:45:08.780 --> 00:45:11.720
For the reason being that you
still need a web application,

00:45:11.720 --> 00:45:14.150
in most cases,
that you can't just

00:45:14.150 --> 00:45:17.060
ship a native
installed application,

00:45:17.060 --> 00:45:19.310
and hit the entire
market that you're

00:45:19.310 --> 00:45:21.320
trying to capture anymore.

00:45:21.320 --> 00:45:22.882
I think maybe four
or five years ago

00:45:22.882 --> 00:45:24.590
you could just ship
a native application,

00:45:24.590 --> 00:45:27.390
and not have a website,
but that's changed.

00:45:27.390 --> 00:45:29.390
And I thought the
numbers this morning,

00:45:29.390 --> 00:45:32.750
in the opening keynote
about 92% of users,

00:45:32.750 --> 00:45:35.660
are using their mobile
devices, and not

00:45:35.660 --> 00:45:40.080
necessarily in an installed app
mode, that was really telling.

00:45:40.080 --> 00:45:43.970
But Angular, we do care
about this still installed

00:45:43.970 --> 00:45:45.530
mobile feel.

00:45:45.530 --> 00:45:47.750
And so there are
projects like Ionic,

00:45:47.750 --> 00:45:51.410
or Onsen, that give you the
ability to ship a web view,

00:45:51.410 --> 00:45:55.010
and so you get that
icon in the app store,

00:45:55.010 --> 00:45:57.620
using, hopefully the
same code that you're

00:45:57.620 --> 00:46:00.410
shipping on the web,
and shipping with a PWA,

00:46:00.410 --> 00:46:02.120
to get that same experience.

00:46:02.120 --> 00:46:04.190
But then there's also
ways, because of our DOM

00:46:04.190 --> 00:46:07.130
independence, you can use
something like Native Script,

00:46:07.130 --> 00:46:10.370
and render instead of to
DOM, and instead of to HTML,

00:46:10.370 --> 00:46:13.350
you can render to
native UI elements.

00:46:13.350 --> 00:46:16.190
And when it comes
to other frameworks,

00:46:16.190 --> 00:46:19.002
you have to look at what
they're trying to achieve,

00:46:19.002 --> 00:46:20.210
or what they're trying to be.

00:46:20.210 --> 00:46:22.460
And in particular,
Angular's trying

00:46:22.460 --> 00:46:24.560
to be a full platform
for building web

00:46:24.560 --> 00:46:26.810
applications across the web.

00:46:26.810 --> 00:46:30.110
In particular, I'm a big fan
of Polymer within Google.

00:46:30.110 --> 00:46:33.470
Polymer is really based around
this idea of standardizing

00:46:33.470 --> 00:46:36.800
on web components, which are
an emerging standard, that

00:46:36.800 --> 00:46:39.570
are available in a growing
number of browsers.

00:46:39.570 --> 00:46:41.900
So instead of relying on
something like Angular,

00:46:41.900 --> 00:46:46.460
for a component, you can rely
on pure HTML, in a portable way.

00:46:46.460 --> 00:46:47.960
And then what
Angular's trying to do

00:46:47.960 --> 00:46:50.480
is, for example, we
can use web components

00:46:50.480 --> 00:46:52.970
as leaf nodes in
a component tree,

00:46:52.970 --> 00:46:55.550
and still get all of the nice
event binding, and property

00:46:55.550 --> 00:46:59.766
binding, as you would get with
a normal Angular component.

00:46:59.766 --> 00:47:14.060
AUDIENCE: [SPEAKING CHINESE]
The last question.

00:47:14.060 --> 00:47:21.310
AUDIENCE: Maybe this question
is very likely this person,

00:47:21.310 --> 00:47:27.870
and I want to know, that
Angular very suitable for SPIA,

00:47:27.870 --> 00:47:32.030
a single page application.

00:47:32.030 --> 00:47:38.440
I want to know can you
provide the Android

00:47:38.440 --> 00:47:39.790
[INAUDIBLE] packaging?

00:47:39.790 --> 00:47:44.640
Will Android [INAUDIBLE]
library for Angular?

00:47:44.640 --> 00:47:51.530
When I use Angular to some
[INAUDIBLE] with some coding,

00:47:51.530 --> 00:47:58.380
I can call Android native view,
Android [INAUDIBLE] action.

00:47:58.380 --> 00:48:00.522
Yes, so you can
you provide this?

00:48:00.522 --> 00:48:02.980
STEPHEN FLUIN: Yes, so I think
I answered this a little bit

00:48:02.980 --> 00:48:05.230
before, and I'll just
repeat that a little bit.

00:48:05.230 --> 00:48:07.150
So there are many
projects out there

00:48:07.150 --> 00:48:10.960
that help you build, and
ship Angular applications

00:48:10.960 --> 00:48:13.270
as a installed mobile
application, which

00:48:13.270 --> 00:48:17.200
is for Android Wear, you get
that app icon in the store.

00:48:17.200 --> 00:48:18.910
And so there's
things like Ionic,

00:48:18.910 --> 00:48:20.800
which is entirely
built on Angular 1,

00:48:20.800 --> 00:48:23.020
originally, and
now on Angular 2.

00:48:23.020 --> 00:48:25.210
There are things like Native
Script, that allow you

00:48:25.210 --> 00:48:27.100
to render to native UI widgets.

00:48:27.100 --> 00:48:28.750
But then there's
just general products

00:48:28.750 --> 00:48:33.520
like Cordova, which are really
all about exposing native APIs,

00:48:33.520 --> 00:48:35.897
in the JavaScript
world, and then allowing

00:48:35.897 --> 00:48:38.230
you to ship that single page
application down as an app.

00:48:44.366 --> 00:48:50.780
AUDIENCE: Maybe Ionic
package, Ionic program,

00:48:50.780 --> 00:48:53.910
it not been known by Google--

00:48:53.910 --> 00:49:00.030
maybe if Google, Google company,
provides another package,

00:49:00.030 --> 00:49:04.110
another library,
set as this user,

00:49:04.110 --> 00:49:10.170
official maybe the entire
[INAUDIBLE] powerful--

00:49:10.170 --> 00:49:12.780
STEPHEN FLUIN: So you're
asking, when is Google

00:49:12.780 --> 00:49:14.220
going to build one of those?

00:49:14.220 --> 00:49:15.720
What I'll say is,
Angular has only

00:49:15.720 --> 00:49:18.210
been successful over
the last seven years

00:49:18.210 --> 00:49:20.490
because of an
ecosystem, and because

00:49:20.490 --> 00:49:22.860
of things like developers
like yourselves have been

00:49:22.860 --> 00:49:24.970
building to make it better.

00:49:24.970 --> 00:49:27.540
So we do focus,
and we think about,

00:49:27.540 --> 00:49:29.760
what should we be building?

00:49:29.760 --> 00:49:32.610
But in general, we talk
to the team at Ionic,

00:49:32.610 --> 00:49:35.520
we talk to the team at
Progress relatively often,

00:49:35.520 --> 00:49:37.320
and we feel like they're
doing a great job,

00:49:37.320 --> 00:49:40.000
and there's not really
a need that we can fill.

00:49:40.000 --> 00:49:42.870
So maybe someday we'll
build something like that,

00:49:42.870 --> 00:49:45.360
but we believe there's a lot
of companies out there, that

00:49:45.360 --> 00:49:46.500
are doing a great
job, and we want

00:49:46.500 --> 00:49:47.670
to recognize their efforts.

00:49:50.337 --> 00:49:51.920
All right, thank you
so much everyone.

00:49:51.920 --> 00:49:53.823
STEPHEN FLUIN: Thank
you, Stephen Fluin.

00:49:56.972 --> 00:50:00.800
AUDIENCE: [SPEAKING CHINESE]

