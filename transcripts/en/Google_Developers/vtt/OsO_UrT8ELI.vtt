WEBVTT
Kind: captions
Language: en

00:00:03.000 --> 00:00:04.501
Joneja: Good morning
and welcome.

00:00:04.501 --> 00:00:05.801
I am Navneet Joneja,

00:00:05.801 --> 00:00:08.100
the product manager for
Google Storage for Developers,

00:00:08.100 --> 00:00:12.734
and with me is Mike Schwartz,
an engineer on the team.

00:00:12.734 --> 00:00:14.734
We're here to talk to you
about how you can store

00:00:14.734 --> 00:00:18.801
your application's data
in the Google Cloud.

00:00:18.801 --> 00:00:20.300
So we're going to begin
today's session

00:00:20.300 --> 00:00:22.968
with a quick introduction
to the product

00:00:22.968 --> 00:00:24.601
and talk to you
about some new features

00:00:24.601 --> 00:00:26.734
we're announcing
at I/O this morning.

00:00:26.734 --> 00:00:28.734
We'll then walk you through
getting started

00:00:28.734 --> 00:00:31.701
with using Google Storage,
some more advanced features,

00:00:31.701 --> 00:00:33.334
several of which are new
this morning,

00:00:33.334 --> 00:00:34.467
and then put it all together

00:00:34.467 --> 00:00:36.801
with a comprehensive
end-to-end scenario.

00:00:36.801 --> 00:00:38.300
Now, there's a lot more
to the product

00:00:38.300 --> 00:00:40.067
than we can cover
in a one-hour session,

00:00:40.067 --> 00:00:44.267
but we'll try to hit
all the highlights.

00:00:44.267 --> 00:00:46.400
So what is Google Storage?

00:00:46.400 --> 00:00:50.400
At its core, it's a service that
allows you to store your data

00:00:50.400 --> 00:00:53.667
on Google's proven
storage infrastructure.

00:00:53.667 --> 00:00:55.734
It's designed to be
extremely reliable

00:00:55.734 --> 00:00:58.501
with multiple layers
of redundancy built in.

00:00:58.501 --> 00:01:01.467
It's also designed to be
very scalable and fast.

00:01:01.467 --> 00:01:03.501
We've brought
our many years of innovation

00:01:03.501 --> 00:01:07.133
in online storage and networking
to bear on this product

00:01:07.133 --> 00:01:09.801
so you have a product
that scales seamlessly,

00:01:09.801 --> 00:01:13.267
and is extremely fast.

00:01:13.267 --> 00:01:15.033
As the name suggests,

00:01:15.033 --> 00:01:17.868
Google Storage has
a developer and business focus,

00:01:17.868 --> 00:01:19.634
but there's nothing
stopping you using it

00:01:19.634 --> 00:01:21.067
for personal use as well.

00:01:21.067 --> 00:01:23.501
Several of us do.

00:01:23.501 --> 00:01:25.901
The product
has a REST API,

00:01:25.901 --> 00:01:29.300
which is basically
the standard HTTP semantics,

00:01:29.300 --> 00:01:32.000
and is supported by many
third-party tools and libraries,

00:01:32.000 --> 00:01:35.834
several of which
are Open Source.

00:01:35.834 --> 00:01:37.901
Authentication and sharing
is extremely flexible,

00:01:37.901 --> 00:01:40.434
allowing you to implement
a wide variety of use cases.

00:01:40.434 --> 00:01:43.234
We'll talk about some of those
later in the session today.

00:01:43.234 --> 00:01:47.934
And the service features
strong data consistency.

00:01:47.934 --> 00:01:49.200
So, last year at I/O,

00:01:49.200 --> 00:01:50.868
we introduced into
an invitation-only preview

00:01:50.868 --> 00:01:53.234
a product
that was very simple,

00:01:53.234 --> 00:01:56.667
developer oriented,
scaled well,

00:01:56.667 --> 00:01:58.901
extremely reliable,
very fast,

00:01:58.901 --> 00:02:00.667
and put you in control
of your data

00:02:00.667 --> 00:02:02.534
and gave you mechanisms
to share it.

00:02:02.534 --> 00:02:04.901
So, this year we're taking
those three themes

00:02:04.901 --> 00:02:09.100
and deepening our focus
in each of those areas.

00:02:09.100 --> 00:02:10.868
We're focusing
more on the developer

00:02:10.868 --> 00:02:13.300
by moving to a more
team-based account model,

00:02:13.300 --> 00:02:14.501
which maps more naturally

00:02:14.501 --> 00:02:17.100
to how teams of people
work on a product.

00:02:17.100 --> 00:02:18.267
And along with that,

00:02:18.267 --> 00:02:20.367
we're moving management
of Google Storage

00:02:20.367 --> 00:02:23.367
over to the API's console,
the Google API's console,

00:02:23.367 --> 00:02:25.033
where you manage
all your other APIs,

00:02:25.033 --> 00:02:26.901
so you can manage them,
all the interactions,

00:02:26.901 --> 00:02:29.667
from one common place.

00:02:29.667 --> 00:02:31.767
We're also introducing
several new features

00:02:31.767 --> 00:02:34.734
in the areas of scalability
and performance,

00:02:34.734 --> 00:02:38.100
starting with raising the size
of objects you can store

00:02:38.100 --> 00:02:39.767
in Google Storage
to five terabytes,

00:02:39.767 --> 00:02:42.767
up from a terabyte
last year.

00:02:42.767 --> 00:02:45.801
We're also introducing
a new storage region in Europe,

00:02:45.801 --> 00:02:47.567
so you can choose
to store your data

00:02:47.567 --> 00:02:50.033
either in the U.S. or Europe
and get the same high levels

00:02:50.033 --> 00:02:52.534
of reliability, scalability,
and performance

00:02:52.534 --> 00:02:54.300
and the exact
same set of features

00:02:54.300 --> 00:02:58.200
regardless of where
you choose to store your data.

00:02:58.200 --> 00:03:01.067
We're also announcing support
for streaming uploads

00:03:01.067 --> 00:03:02.868
into Google Storage.

00:03:02.868 --> 00:03:05.567
The benefit of this is you
no longer need to buffer data

00:03:05.567 --> 00:03:06.701
on your servers.

00:03:06.701 --> 00:03:08.267
If you're trying
to get data from, say,

00:03:08.267 --> 00:03:10.634
an external telemetry source
or from an end-user

00:03:10.634 --> 00:03:12.367
into the Cloud,
you can just sta--

00:03:12.367 --> 00:03:14.033
start sending it
straight into the Cloud

00:03:14.033 --> 00:03:15.467
by using the standard

00:03:15.467 --> 00:03:18.434
HTTP chunked transfer
encoding mechanism.

00:03:18.434 --> 00:03:23.000
So, it's very easy and makes--
that use gets a lot easier.

00:03:23.000 --> 00:03:26.067
And finally, Google believes
strongly in simplicity,

00:03:26.067 --> 00:03:27.767
and Google believes in speed,

00:03:27.767 --> 00:03:29.701
and we're bringing
those two together

00:03:29.701 --> 00:03:32.234
by building a performance
that performs really well

00:03:32.234 --> 00:03:34.667
without any additional
complexity, just works.

00:03:34.667 --> 00:03:38.467
So, a great example of that is--
One of the common models

00:03:38.467 --> 00:03:39.934
when serving data
over the Internet

00:03:39.934 --> 00:03:42.968
to a wide variety of users,
some of whom may be, you know,

00:03:42.968 --> 00:03:44.234
across the globe,

00:03:44.234 --> 00:03:46.901
is you find a reliable place
to store your data,

00:03:46.901 --> 00:03:49.567
and then you stick an edge cache
or CDN around it.

00:03:49.567 --> 00:03:51.234
With Google Storage,
you don't need to do that.

00:03:51.234 --> 00:03:55.200
It just works.

00:03:55.200 --> 00:03:59.400
So, I talked a bit about how
we're deepening our focus

00:03:59.400 --> 00:04:01.400
on sharing and controlling
your data,

00:04:01.400 --> 00:04:04.100
and we have several
new features in that area

00:04:04.100 --> 00:04:05.767
to announce today as well,

00:04:05.767 --> 00:04:09.400
starting with support
for OAuth 2.0, the standard,

00:04:09.400 --> 00:04:11.901
which allows you to do
a bunch of very interesting

00:04:11.901 --> 00:04:14.534
sharing and authentication
authorization mechanisms.

00:04:14.534 --> 00:04:18.400
Moving to a more project-based
ACL model,

00:04:18.400 --> 00:04:20.067
so, you know, in conjunction

00:04:20.067 --> 00:04:24.067
with the team-based
account model for using storage,

00:04:24.067 --> 00:04:26.067
you can set
ACLs in a project-based manner

00:04:26.067 --> 00:04:29.234
so you can easily
set up accounts and ACLs

00:04:29.234 --> 00:04:30.901
that work for your team.

00:04:30.901 --> 00:04:32.767
Of course, you can
always override that,

00:04:32.767 --> 00:04:35.667
but we wanted to make it easy
for you to get started.

00:04:35.667 --> 00:04:37.567
And finally,
we got a lot of feedback

00:04:37.567 --> 00:04:41.267
from our community
that sharing was great,

00:04:41.267 --> 00:04:43.400
but they didn't necessarily
want to have all the people

00:04:43.400 --> 00:04:46.067
they had sign up
and share their data

00:04:46.067 --> 00:04:47.734
have Google Storage accounts.

00:04:47.734 --> 00:04:49.434
So, we're happy
to announce today

00:04:49.434 --> 00:04:52.334
that, as of today,
you no longer need to have

00:04:52.334 --> 00:04:54.734
your partners and customers
have Google accounts

00:04:54.734 --> 00:04:56.133
to share your data.

00:04:56.133 --> 00:04:57.868
They can just have
a Google account,

00:04:57.868 --> 00:05:01.501
and you can share data
with them.

00:05:01.501 --> 00:05:03.100
And we're also
very happy to announce

00:05:03.100 --> 00:05:05.767
that for those of you
who have been waiting

00:05:05.767 --> 00:05:07.567
for an interview to use--
sorry--

00:05:07.567 --> 00:05:10.033
an invitation
to use the service,

00:05:10.033 --> 00:05:11.868
the wait is now over.

00:05:11.868 --> 00:05:13.200
We're generally available,

00:05:13.200 --> 00:05:15.334
and we also have
a free trial here

00:05:15.334 --> 00:05:18.400
with a limited quota
of bandwidth, storage,

00:05:18.400 --> 00:05:22.133
and requests
through the end of the year.

00:05:22.133 --> 00:05:23.601
So, great.

00:05:23.601 --> 00:05:25.934
We have a bunch of new features.
We're generally available.

00:05:25.934 --> 00:05:28.200
And you can get started
for free,

00:05:28.200 --> 00:05:30.968
but what do you want to use
Google Storage for?

00:05:30.968 --> 00:05:34.968
Well, we've designed the service
to be extremely generic,

00:05:34.968 --> 00:05:36.534
so you can use it
for almost anything.

00:05:36.534 --> 00:05:38.567
You're limited
by your imagination.

00:05:38.567 --> 00:05:40.200
But having said that,

00:05:40.200 --> 00:05:42.000
there's probably
about five main buckets

00:05:42.000 --> 00:05:45.367
into which we see
our users falling.

00:05:45.367 --> 00:05:48.234
The first is storing data
for applications,

00:05:48.234 --> 00:05:50.033
a great example of which is,
for example,

00:05:50.033 --> 00:05:54.167
if you want to have, say,
a photo-editing application

00:05:54.167 --> 00:05:55.868
and you want to store
photographs somewhere,

00:05:55.868 --> 00:05:59.133
you can store the photographs
in Google Storage.

00:05:59.133 --> 00:06:02.501
If you have a data-sharing
mechanism you want to implement,

00:06:02.501 --> 00:06:04.767
we talked
about the number of features

00:06:04.767 --> 00:06:08.234
we implemented in that area
to make that easier.

00:06:08.234 --> 00:06:10.334
Storing data for computation
is also a great use

00:06:10.334 --> 00:06:12.234
for Google Storage,

00:06:12.234 --> 00:06:15.167
and a great example of that
is the Google Prediction API,

00:06:15.167 --> 00:06:18.834
so for those of you who
haven't yet encountered that,

00:06:18.834 --> 00:06:21.701
it's a product that allows you
to use Google's

00:06:21.701 --> 00:06:23.634
proprietary machine
learning tools

00:06:23.634 --> 00:06:26.667
to detect patterns and meaning
in existing data sets

00:06:26.667 --> 00:06:28.400
and then to use that knowledge

00:06:28.400 --> 00:06:30.601
to predict the meaning
of new data sets.

00:06:30.601 --> 00:06:32.200
It's a great product--
if that sounds interesting,

00:06:32.200 --> 00:06:35.200
there's actually a session
on that tomorrow as well.

00:06:35.200 --> 00:06:36.467
Static content hosting

00:06:36.467 --> 00:06:39.167
is also a very common use case
in Google Storage,

00:06:39.167 --> 00:06:42.033
and I talked about the fact
that performance just works,

00:06:42.033 --> 00:06:45.567
and because
of our HTTP REST API,

00:06:45.567 --> 00:06:48.000
it's a very natural fit.

00:06:48.000 --> 00:06:49.868
And finally, if you have
high-value data

00:06:49.868 --> 00:06:51.634
that you want to make sure
is either backed up

00:06:51.634 --> 00:06:54.501
or archived to the Cloud
so you can either pull it down

00:06:54.501 --> 00:06:56.634
reliably and quickly
if something goes wrong,

00:06:56.634 --> 00:06:59.067
or you want to CloudBurst,
or you just want to have

00:06:59.067 --> 00:07:01.200
a secondary copy available
that you load balance across

00:07:01.200 --> 00:07:07.200
or distribute, that's another
great use for Google Storage.

00:07:07.200 --> 00:07:10.467
We believe there's no greater
endorsement for a product

00:07:10.467 --> 00:07:13.200
than that Google is willing
to bet its own businesses on it,

00:07:13.200 --> 00:07:19.200
and Google Storage has seen very
wide adoption across Google.

00:07:19.200 --> 00:07:21.400
So, with that, I'd like
to bring on Mike Schwartz,

00:07:21.400 --> 00:07:24.100
who'll walk you through
using the product.

00:07:24.100 --> 00:07:26.968
Schwartz:
Thanks, Navneet.

00:07:26.968 --> 00:07:29.868
So, I'm going to talk today
about the various aspects,

00:07:29.868 --> 00:07:31.868
most basically,
the basic API,

00:07:31.868 --> 00:07:34.167
and then
the more advanced aspects

00:07:34.167 --> 00:07:35.167
that we're introducing today,

00:07:35.167 --> 00:07:36.968
and then provide
an end-to-end scenario.

00:07:36.968 --> 00:07:38.801
Before I do that,
I want to just go back

00:07:38.801 --> 00:07:41.334
to this slide
that Navneet just had up.

00:07:41.334 --> 00:07:42.701
You probably noticed
my picture there,

00:07:42.701 --> 00:07:45.033
so there's a lot of products
inside of Google

00:07:45.033 --> 00:07:46.400
that use Google Storage.

00:07:46.400 --> 00:07:48.801
The reason my picture's up there
is, several months ago,

00:07:48.801 --> 00:07:51.033
I decided to move all the data
out of my house,

00:07:51.033 --> 00:07:53.334
all of my personal data out of
the house into Google Storage,

00:07:53.334 --> 00:07:56.067
and so now I just have
browsers in my home,

00:07:56.067 --> 00:07:57.400
and that's, again,
an endorsement

00:07:57.400 --> 00:08:00.467
for how much I believe
in the product.

00:08:00.467 --> 00:08:02.501
Okay, so first step
I want to show you,

00:08:02.501 --> 00:08:04.901
it's pretty quick and easy to
get started using Google Storage

00:08:04.901 --> 00:08:08.133
and for this,
if you go to that link.

00:08:08.133 --> 00:08:09.901
Actually,
starting this afternoon,

00:08:09.901 --> 00:08:11.734
that link will be live.

00:08:11.734 --> 00:08:14.667
Once you get to that link,
you'll get to a--

00:08:14.667 --> 00:08:16.200
you'll click through,
and you'll get to a page

00:08:16.200 --> 00:08:17.667
called the Google APIs page,

00:08:17.667 --> 00:08:21.667
and from here, you can sign up
for a variety of different APIs.

00:08:21.667 --> 00:08:23.367
As you can see,
there's quite a few.

00:08:23.367 --> 00:08:25.501
And what you want to do is get
down to the storage link

00:08:25.501 --> 00:08:27.734
and click on
"enable storage,"

00:08:27.734 --> 00:08:29.067
and once you do that,

00:08:29.067 --> 00:08:31.200
you'll be presented
with some terms of service,

00:08:31.200 --> 00:08:33.400
which you can read
and agree to,

00:08:33.400 --> 00:08:35.501
and then
once you finish that,

00:08:35.501 --> 00:08:37.567
then you just need to
sign up for billing,

00:08:37.567 --> 00:08:39.234
and I've already
enabled this account

00:08:39.234 --> 00:08:40.634
and set it up for billing.

00:08:40.634 --> 00:08:44.467
And at this point, I can come in
and start using Google Storage.

00:08:44.467 --> 00:08:46.434
And for this purpose,
I want to show you first,

00:08:46.434 --> 00:08:49.367
we have a simple command
line tool called "gsutil,"

00:08:49.367 --> 00:08:52.167
and gsutil has
a number of UNIX-like commands

00:08:52.167 --> 00:08:53.567
built into it.

00:08:53.567 --> 00:08:55.234
So, the first one
I want to use

00:08:55.234 --> 00:08:59.868
is to create a bucket
called "gsdemo2011,"

00:08:59.868 --> 00:09:00.868
and once I've done that,

00:09:00.868 --> 00:09:02.968
I can upload data
into the Cloud.

00:09:02.968 --> 00:09:06.634
So, for example,
I'm going to use the gsutil copy

00:09:06.634 --> 00:09:08.133
and similarly to UNIX,

00:09:08.133 --> 00:09:10.667
copy "-r" will
recursively copy everything

00:09:10.667 --> 00:09:12.133
that starts with "data."

00:09:12.133 --> 00:09:14.067
I'm using
a wild card there.

00:09:14.067 --> 00:09:15.767
I have a half dozen files
like that,

00:09:15.767 --> 00:09:18.801
and once I finish copying all
those clouds up in the Cloud,

00:09:18.801 --> 00:09:20.100
all those files up
into the Cloud,

00:09:20.100 --> 00:09:25.667
I can look and see what's--
what's in the--

00:09:25.667 --> 00:09:27.701
I can look and see
what's there,

00:09:27.701 --> 00:09:31.534
and I can also use
the gsutil "ls-l" command

00:09:31.534 --> 00:09:33.667
and this will give me
a little more detail,

00:09:33.667 --> 00:09:36.834
some object sizes
and time stamps and so forth.

00:09:36.834 --> 00:09:39.534
Okay, so that gets some data
up into the Cloud.

00:09:39.534 --> 00:09:41.701
And then one other thing
I want to demonstrate here

00:09:41.701 --> 00:09:43.400
is it's equally easy
to get your data

00:09:43.400 --> 00:09:45.400
right back out of the Cloud,
and for that purpose,

00:09:45.400 --> 00:09:48.067
I'm just going to reverse
the order of the recursive copy

00:09:48.067 --> 00:09:50.567
and copy down
to a local directory,

00:09:50.567 --> 00:09:51.934
and it's as easy as that.

00:09:51.934 --> 00:09:54.701
And that's actually
an important point to us.

00:09:54.701 --> 00:09:56.501
At Google, we believe
your data belongs to you,

00:09:56.501 --> 00:09:59.400
and it should be really easy
to get your data completely out

00:09:59.400 --> 00:10:01.467
anytime that you want.

00:10:01.467 --> 00:10:03.567
So, there it is in a nutshell,
getting started.

00:10:03.567 --> 00:10:05.667
Just sign up,
agree to terms of service,

00:10:05.667 --> 00:10:06.734
set up billing,

00:10:06.734 --> 00:10:09.167
and you can start
using the service.

00:10:09.167 --> 00:10:10.901
Now I want to talk
about the API.

00:10:10.901 --> 00:10:13.801
So, as we've
already alluded to,

00:10:13.801 --> 00:10:16.501
Cloud storage is organized
into buckets and objects

00:10:16.501 --> 00:10:18.701
and you can create
as many buckets as you want,

00:10:18.701 --> 00:10:20.968
but in practice,
most users just create one

00:10:20.968 --> 00:10:22.601
or maybe a handful
of buckets,

00:10:22.601 --> 00:10:25.467
and then they load that bucket
up with many, many objects.

00:10:25.467 --> 00:10:26.767
You can have
millions of objects

00:10:26.767 --> 00:10:29.534
that can be anywhere
from a few bytes to terabytes,

00:10:29.534 --> 00:10:31.634
any format of data
that you want.

00:10:31.634 --> 00:10:35.901
And then the--the basic API
uses REST, which stands as--

00:10:35.901 --> 00:10:38.534
stands for "representational
state transfer,"

00:10:38.534 --> 00:10:40.601
which is just the principle
behind HTTP.

00:10:40.601 --> 00:10:43.133
Basically, everything's
named with your eyes

00:10:43.133 --> 00:10:45.467
and acted on with
a simple handful of verbs,

00:10:45.467 --> 00:10:47.567
"GET," "HOST," "PUT,"
and so forth.

00:10:47.567 --> 00:10:51.267
And so, here's an example of
uploading a file to the Cloud

00:10:51.267 --> 00:10:52.734
called "data.csv,"

00:10:52.734 --> 00:10:56.167
and it's going to upload it
into the bucket "gsdemo2011,"

00:10:56.167 --> 00:10:57.901
and there's
an authorization header.

00:10:57.901 --> 00:11:00.300
I'll talk about that
a bit later.

00:11:00.300 --> 00:11:02.868
And then
that basic REST request

00:11:02.868 --> 00:11:05.133
can be modified
using HTTP headers.

00:11:05.133 --> 00:11:06.868
So, for example,
you can set content type

00:11:06.868 --> 00:11:08.534
and encoding this way.

00:11:08.534 --> 00:11:10.567
You can control
caching this way.

00:11:10.567 --> 00:11:12.501
By default,
objects are not cache-able,

00:11:12.501 --> 00:11:14.901
but you can make them
cache-able

00:11:14.901 --> 00:11:18.934
for a variety of
performance-enhancement reasons.

00:11:18.934 --> 00:11:20.567
So that's the basic API.

00:11:20.567 --> 00:11:22.567
And now what
I want to point out is

00:11:22.567 --> 00:11:24.968
we have a couple of layers
of reference implementation.

00:11:24.968 --> 00:11:26.801
So, you could just
write a piece of code

00:11:26.801 --> 00:11:28.501
that talks directly using HTTP,

00:11:28.501 --> 00:11:30.234
and that's pretty
straightforward to do.

00:11:30.234 --> 00:11:32.067
There's a lot of language
or level libraries

00:11:32.067 --> 00:11:33.834
that make that
pretty easy to do,

00:11:33.834 --> 00:11:36.167
but once you start using some
of the more involved features,

00:11:36.167 --> 00:11:37.667
it can be
a little bit complicated.

00:11:37.667 --> 00:11:40.033
For example, if you ever need
to implement signing

00:11:40.033 --> 00:11:43.901
like HMAC signing for--
for authentication,

00:11:43.901 --> 00:11:46.234
or if you wanted to use
resumable transfers--

00:11:46.234 --> 00:11:48.033
a feature
I'll talk about in a bit--

00:11:48.033 --> 00:11:50.767
having a higher level
of abstraction is nice,

00:11:50.767 --> 00:11:53.534
and in addition to being nice,
it's also--

00:11:53.534 --> 00:11:55.567
we use a reference-able
implementation

00:11:55.567 --> 00:11:57.701
to let you see
a complete representation

00:11:57.701 --> 00:11:58.901
of how to use the API.

00:11:58.901 --> 00:12:00.067
Here's some code.

00:12:00.067 --> 00:12:02.801
And for this,
our library level is BOTO.

00:12:02.801 --> 00:12:05.367
BOTO's a popular
Open Source library

00:12:05.367 --> 00:12:08.701
written in Python,
and here, what you can see,

00:12:08.701 --> 00:12:10.367
is I'm going to get
the same object,

00:12:10.367 --> 00:12:12.367
as you can see,
it's being requested

00:12:12.367 --> 00:12:14.000
using the REST API,

00:12:14.000 --> 00:12:15.868
but it's a higher level
of abstraction.

00:12:15.868 --> 00:12:19.033
Basically,
you import a class

00:12:19.033 --> 00:12:21.100
and instantiate an object
with that URI,

00:12:21.100 --> 00:12:23.033
and then just print the content
out as a string.

00:12:23.033 --> 00:12:24.968
In this case,
it's a pretty small object,

00:12:24.968 --> 00:12:27.000
so printing it
as a string works.

00:12:27.000 --> 00:12:28.667
And then
one level up from there,

00:12:28.667 --> 00:12:31.801
I already mentioned gsutil
being a useful command,

00:12:31.801 --> 00:12:33.567
but in addition to being
a useful command,

00:12:33.567 --> 00:12:36.367
it also represents
a reference implementation

00:12:36.367 --> 00:12:40.467
of how to use BOTO
for Google Storage,

00:12:40.467 --> 00:12:42.834
and additionally
there's this "-d" option,

00:12:42.834 --> 00:12:44.267
which is really handy.

00:12:44.267 --> 00:12:48.033
It prints out all
the HTTP requests and responses,

00:12:48.033 --> 00:12:52.133
not the actual payload, but just
the headers of the requests,

00:12:52.133 --> 00:12:55.234
and that's really useful
both for just basically

00:12:55.234 --> 00:12:58.367
understanding what the--
the protocol is doing,

00:12:58.367 --> 00:13:00.100
and also, if you're trying
to troubleshoot some problem

00:13:00.100 --> 00:13:02.067
in an application
you're implementing,

00:13:02.067 --> 00:13:03.901
a lot of times,
this'll give you some details

00:13:03.901 --> 00:13:05.434
about what's going on.

00:13:05.434 --> 00:13:07.834
So let me give you a quick
demonstration of this.

00:13:07.834 --> 00:13:13.534
If I look, first I have a copy
of that same BOTO program

00:13:13.534 --> 00:13:16.234
that I showed you, that
reference-implementation slide,

00:13:16.234 --> 00:13:18.234
and now I'm just
going to run this

00:13:18.234 --> 00:13:20.767
using the Python interpreter.

00:13:20.767 --> 00:13:22.734
You can see
it just retrieves--

00:13:22.734 --> 00:13:25.367
it's a little short,
comma-separated value file,

00:13:25.367 --> 00:13:28.367
and so that's running it
using Python.

00:13:28.367 --> 00:13:29.968
You can go in
and separate points

00:13:29.968 --> 00:13:31.734
and examine the state
of the program,

00:13:31.734 --> 00:13:33.400
if you want, in Python.

00:13:33.400 --> 00:13:35.968
And then the other thing
we can do here is,

00:13:35.968 --> 00:13:41.067
I can use that same URL...

00:13:41.067 --> 00:13:43.067
and now I'm just going to
CAT it using gsutil,

00:13:43.067 --> 00:13:44.734
and you can see
I get the data out,

00:13:44.734 --> 00:13:47.400
but before the data came out,
there's the--the request.

00:13:47.400 --> 00:13:49.734
You can see the "GET,"
accepting coding,

00:13:49.734 --> 00:13:52.367
authorization header,
the response,

00:13:52.367 --> 00:13:54.067
a number of fields including,
for example,

00:13:54.067 --> 00:13:56.667
the ETag which is a cryptic
affect track-check sum

00:13:56.667 --> 00:13:59.467
that's used to help maintain
integrity of your data,

00:13:59.467 --> 00:14:04.334
content type,
and so forth.

00:14:04.334 --> 00:14:06.667
Okay, so that's
the reference implementations,

00:14:06.667 --> 00:14:09.300
BOTO and gsutil.

00:14:09.300 --> 00:14:11.534
Now, moving on, I want to talk
about security and sharing,

00:14:11.534 --> 00:14:13.167
starting
with authentication.

00:14:13.167 --> 00:14:16.067
So there's three ways
to authenticate requests,

00:14:16.067 --> 00:14:19.167
OAuth2, which is the newest one
we're introducing today--

00:14:19.167 --> 00:14:22.234
and I'll get to that in a fair
amount more depth later--

00:14:22.234 --> 00:14:23.934
Web browser login,
which basically means

00:14:23.934 --> 00:14:26.234
once you've logged
into any Google service,

00:14:26.234 --> 00:14:29.067
that set of credentials
that you've logged in with

00:14:29.067 --> 00:14:32.734
can be used to access
controlled content

00:14:32.734 --> 00:14:33.734
from Google Storage.

00:14:33.734 --> 00:14:34.934
So that's pretty convenient.

00:14:34.934 --> 00:14:36.567
Once you're logged
into Gmail, for example,

00:14:36.567 --> 00:14:38.400
you can also get
to your Google Storage.

00:14:38.400 --> 00:14:40.868
And finally, HMAC-based
request signing,

00:14:40.868 --> 00:14:42.667
and this is
a authentication mechanism

00:14:42.667 --> 00:14:47.100
that depends on a shared secret
between you and Google Storage.

00:14:47.100 --> 00:14:49.133
So here's another example

00:14:49.133 --> 00:14:52.400
of a PUT-request to upload
an object to the Cloud,

00:14:52.400 --> 00:14:53.701
and here I'm showing

00:14:53.701 --> 00:14:56.501
a complete authorization header
using OAuth2 Standard.

00:14:56.501 --> 00:14:59.100
This particular credential
is not valid.

00:14:59.100 --> 00:15:01.968
It's just in the right format,
but it's just

00:15:01.968 --> 00:15:07.868
to illustrate what an OAuth2
credential looks like.

00:15:07.868 --> 00:15:10.434
So that's authentication.

00:15:10.434 --> 00:15:13.300
Now, for access control,
the way access control works,

00:15:13.300 --> 00:15:17.167
every bucket and every object
has an access control list

00:15:17.167 --> 00:15:20.367
that specifies
who can access and do what

00:15:20.367 --> 00:15:22.133
to the bucket and object,

00:15:22.133 --> 00:15:24.067
and it's all controlled
using this--

00:15:24.067 --> 00:15:27.734
this GET and PUT syntax
with a "? acl" at the end.

00:15:27.734 --> 00:15:30.501
So, here's an example
for what you would see

00:15:30.501 --> 00:15:33.133
if you retrieve a particular
object's ACL,

00:15:33.133 --> 00:15:34.467
and I've highlighted
the parts

00:15:34.467 --> 00:15:35.934
that are
particularly interesting.

00:15:35.934 --> 00:15:38.734
First there's a grant
to the owner of this object,

00:15:38.734 --> 00:15:41.734
"gsdemo2011@gmail.com,"

00:15:41.734 --> 00:15:44.200
and that's a full control grant
which means that owner

00:15:44.200 --> 00:15:45.734
can both read
and write the object

00:15:45.734 --> 00:15:48.934
and also can read and write
the access control list.

00:15:48.934 --> 00:15:51.868
And then
below that is a grant,

00:15:51.868 --> 00:15:54.400
a group-based grant,
to this mailing list--

00:15:54.400 --> 00:15:58.133
"gsdemo2011-guests
@googlegroups.com,"

00:15:58.133 --> 00:16:00.133
and this is actually
a really powerful mechanism,

00:16:00.133 --> 00:16:01.634
because what it means is,

00:16:01.634 --> 00:16:03.601
you can set
an access control list

00:16:03.601 --> 00:16:05.767
on many, many objects
and buckets,

00:16:05.767 --> 00:16:07.167
say, millions of objects
and buckets

00:16:07.167 --> 00:16:08.767
and then centrally
administer that

00:16:08.767 --> 00:16:10.601
from the Google Groups console.

00:16:10.601 --> 00:16:13.300
So this is a nice way
to do it, for example,

00:16:13.300 --> 00:16:15.400
if you have
a bunch of objects

00:16:15.400 --> 00:16:17.734
that need to be shared
by everybody in your company,

00:16:17.734 --> 00:16:20.767
and as employees join
and leave the company,

00:16:20.767 --> 00:16:22.701
you can just go edit
in one place

00:16:22.701 --> 00:16:25.367
and affect the access control
for everything at once,

00:16:25.367 --> 00:16:27.934
rather than having to go
individually edit ACLs

00:16:27.934 --> 00:16:31.467
on individual objects.

00:16:31.467 --> 00:16:33.601
Okay, so that's it
in a nutshell.

00:16:33.601 --> 00:16:36.334
I've gone over the basic API,
and with that,

00:16:36.334 --> 00:16:38.534
with GETs and PUTs
and the access control

00:16:38.534 --> 00:16:41.868
and authentication mechanisms
I've talked about so far,

00:16:41.868 --> 00:16:44.033
you can do a fair amount.

00:16:44.033 --> 00:16:46.934
And that mostly was things
that were available last year,

00:16:46.934 --> 00:16:50.200
although OAuth2 was not
until this year.

00:16:50.200 --> 00:16:53.067
Now I want to talk about
some more advanced features.

00:16:53.067 --> 00:16:54.767
The first one I want
to talk about is,

00:16:54.767 --> 00:16:57.000
starting today,
you can request

00:16:57.000 --> 00:16:59.501
that your data
be stored in Europe.

00:16:59.501 --> 00:17:01.567
Before, you could only store
data in the United States,

00:17:01.567 --> 00:17:02.734
and now, optionally,

00:17:02.734 --> 00:17:05.968
if you specify
a location parameter using--

00:17:05.968 --> 00:17:08.501
at bucket creation time,

00:17:08.501 --> 00:17:10.634
you can specify
where the objects

00:17:10.634 --> 00:17:13.901
are going to be located,
and it's as simple as that.

00:17:13.901 --> 00:17:16.501
Once you've done that,
the rest of the API is the same.

00:17:16.501 --> 00:17:18.033
In particular,
no one needs to know

00:17:18.033 --> 00:17:20.067
where the bucket's located
to use it.

00:17:20.067 --> 00:17:21.234
So, you make this decision--

00:17:21.234 --> 00:17:22.501
where you're going
to put the bucket--

00:17:22.501 --> 00:17:24.901
and then people can just use
the rest of the API,

00:17:24.901 --> 00:17:26.667
and if you want,
you can look up

00:17:26.667 --> 00:17:31.100
where a bucket's located
using this "? location" syntax.

00:17:31.100 --> 00:17:32.701
Now, earlier
in the presentation,

00:17:32.701 --> 00:17:36.300
Navneet mentioned that we
support strong data consistency

00:17:36.300 --> 00:17:38.701
and here's where I think it
makes a really compelling case

00:17:38.701 --> 00:17:40.701
for why that matters so much.

00:17:40.701 --> 00:17:42.534
I mean, strong data
consistency matters

00:17:42.534 --> 00:17:45.167
even if you're just using
buckets and--

00:17:45.167 --> 00:17:48.667
in a nearby location, but
imagine the following scenario.

00:17:48.667 --> 00:17:50.534
You have customers
all over the world

00:17:50.534 --> 00:17:53.968
and a customer goes to upload
some data using HTTP form post

00:17:53.968 --> 00:17:56.534
into the Cloud, and that--

00:17:56.534 --> 00:17:59.334
that form post causes
a re-direct to a server

00:17:59.334 --> 00:18:02.300
that you have that might be
running in the United States.

00:18:02.300 --> 00:18:04.534
Now, Google Storage
is implemented

00:18:04.534 --> 00:18:08.033
as a replicated set of servers
running all over the world,

00:18:08.033 --> 00:18:11.601
and it's possible, and, in fact,
likely, in a scenario like this

00:18:11.601 --> 00:18:13.601
that the Web server's
going to ask for the data

00:18:13.601 --> 00:18:18.901
from a different server
than where the user uploaded to.

00:18:18.901 --> 00:18:20.734
Strong data consistency says

00:18:20.734 --> 00:18:22.400
that once
the data's been written,

00:18:22.400 --> 00:18:23.901
anywhere you read it
in the world,

00:18:23.901 --> 00:18:26.033
you're going to get
the most recent value.

00:18:26.033 --> 00:18:29.367
That's as con--contrasted
with eventual consistency,

00:18:29.367 --> 00:18:32.534
which only guarantees
you would see a value

00:18:32.534 --> 00:18:35.000
that was current
at some time in the past

00:18:35.000 --> 00:18:37.200
and will eventually come
up-to-date

00:18:37.200 --> 00:18:39.467
if there are no more updates,

00:18:39.467 --> 00:18:41.501
and strong data consistency
makes it much easier

00:18:41.501 --> 00:18:43.601
to implement applications,
'cause you don't have to worry

00:18:43.601 --> 00:18:48.567
what version of the data
they're looking at and so forth.

00:18:48.567 --> 00:18:50.901
So next I want to talk
about a feature

00:18:50.901 --> 00:18:55.267
called "resumable transfers."

00:18:55.267 --> 00:18:57.367
And this is particularly useful
if you're uploading

00:18:57.367 --> 00:18:58.901
and downloading
really large objects.

00:18:58.901 --> 00:19:02.234
Suppose you're trying to upload,
for example, a terabyte,

00:19:02.234 --> 00:19:05.000
and partway
through the upload, the--

00:19:05.000 --> 00:19:06.534
your network connection
gets interrupted.

00:19:06.534 --> 00:19:08.367
For example, you're walking
between meeting rooms,

00:19:08.367 --> 00:19:09.901
and your laptop
goes through

00:19:09.901 --> 00:19:12.434
an area of limited
Wi-Fi connectivity.

00:19:12.434 --> 00:19:16.434
If your upload is interrupted,
with resumable transfer,

00:19:16.434 --> 00:19:19.234
once you get back
into high-connectivity zone,

00:19:19.234 --> 00:19:21.067
it can just resume again,
and that's nice,

00:19:21.067 --> 00:19:22.567
because you don't waste
all the time

00:19:22.567 --> 00:19:25.767
that you already put into--
suppose you already uploaded,

00:19:25.767 --> 00:19:28.734
you know, 500 megabytes--
you don't waste the time

00:19:28.734 --> 00:19:31.701
and the network expense
to re-upload that part of it.

00:19:31.701 --> 00:19:33.234
And so here's the way
it works.

00:19:33.234 --> 00:19:35.033
When you start
a resumable upload,

00:19:35.033 --> 00:19:36.834
the server will give you back
an upload ID,

00:19:36.834 --> 00:19:39.367
and if it gets interrupted,
you can use that upload ID,

00:19:39.367 --> 00:19:41.300
you can see it on the end
of the URL there,

00:19:41.300 --> 00:19:44.701
during the PUT request
and in response to that--

00:19:44.701 --> 00:19:47.501
this is the Google Data
resumable protocol--

00:19:47.501 --> 00:19:50.634
Google's server will tell you
how many bytes it currently has,

00:19:50.634 --> 00:19:53.234
and then you can follow up
by putting a range--

00:19:53.234 --> 00:19:56.067
content range PUT
with the rest of the content.

00:19:56.067 --> 00:19:58.200
So that's how
resumable upload works.

00:19:58.200 --> 00:20:01.501
Resumable download uses
the standard HTTP range

00:20:01.501 --> 00:20:04.100
GET request to do
a similar thing.

00:20:04.100 --> 00:20:06.067
In this case, you don't need
to ask the server.

00:20:06.067 --> 00:20:07.234
You can tell what--

00:20:07.234 --> 00:20:09.234
how many bytes you have
locally on your disc,

00:20:09.234 --> 00:20:12.100
and you can just ask for the
bytes that you don't yet have.

00:20:12.100 --> 00:20:14.167
So, now what I want to do
is give you a demonstration

00:20:14.167 --> 00:20:18.734
of both European buckets
and of resumable transfers,

00:20:18.734 --> 00:20:22.133
and for this, I have
a couple of windows open,

00:20:22.133 --> 00:20:24.601
in two different cities,
one in London and one Dallas.

00:20:24.601 --> 00:20:27.234
These are on machines that are
off of Google's network,

00:20:27.234 --> 00:20:28.367
and the first thing
I'm going to do

00:20:28.367 --> 00:20:33.601
is I'm going to create
a bucket...

00:20:33.601 --> 00:20:36.400
using this "-l" syntax,
saying in location "Europe."

00:20:36.400 --> 00:20:37.901
If you don't specify
a location,

00:20:37.901 --> 00:20:41.534
the default
is the United States.

00:20:41.534 --> 00:20:43.701
And I'm just going
to call it "gseu."

00:20:43.701 --> 00:20:44.901
So, I've created a bucket,

00:20:44.901 --> 00:20:49.467
and immediately,
I can go over to Dallas now,

00:20:49.467 --> 00:20:52.133
and I can see
the bucket's there.

00:20:52.133 --> 00:20:57.567
Now I'm going to go back
over to London...

00:20:57.567 --> 00:20:58.868
and I'm going to upload.

00:20:58.868 --> 00:21:01.567
I have a file locally
that's 50 megabytes.

00:21:01.567 --> 00:21:03.100
And you can see,
as it's uploading,

00:21:03.100 --> 00:21:04.567
it's giving
you a progress report.

00:21:04.567 --> 00:21:07.367
I'm going to interrupt it
at about 35 megabytes in

00:21:07.367 --> 00:21:09.000
and start it back up.

00:21:09.000 --> 00:21:11.100
And you can see it started
right back up where it left off.

00:21:11.100 --> 00:21:12.901
So that was
a resumable upload.

00:21:12.901 --> 00:21:15.834
And now, as soon as
the upload is finished...

00:21:19.167 --> 00:21:21.200
I'm going to download it.

00:21:21.200 --> 00:21:24.334
And you can see the file
is immediately available,

00:21:24.334 --> 00:21:26.634
and it's--the download's
going a bit slower,

00:21:26.634 --> 00:21:29.067
because it's going
across the Atlantic now.

00:21:29.067 --> 00:21:31.067
And I'm going to interrupt
this download

00:21:31.067 --> 00:21:34.767
and start it back up again.

00:21:34.767 --> 00:21:36.501
And you can see it picked
back up at four megabytes,

00:21:36.501 --> 00:21:38.267
where it left off.

00:21:38.267 --> 00:21:40.267
So, that quick demonstration

00:21:40.267 --> 00:21:42.234
showed creating
and using buckets,

00:21:42.234 --> 00:21:43.534
that they're
immediately visible.

00:21:43.534 --> 00:21:44.801
Once you've created in London,

00:21:44.801 --> 00:21:48.167
I can immediately start using it
in Dallas, and you--

00:21:48.167 --> 00:21:51.334
I could do resumable uploads
and downloads.

00:21:53.567 --> 00:21:56.067
Okay, the next new topic
I wanted to talk about

00:21:56.067 --> 00:21:57.167
is OAuth2.

00:21:57.167 --> 00:21:58.734
We've mentioned it
a few times now.

00:21:58.734 --> 00:22:00.167
What is OAuth2?

00:22:00.167 --> 00:22:02.634
Well, it's a widely adopted
open standard

00:22:02.634 --> 00:22:06.400
for both authentication
and authorization, okay?

00:22:06.400 --> 00:22:08.000
So it's being used--

00:22:08.000 --> 00:22:09.901
Google is moving
all its APIs over

00:22:09.901 --> 00:22:12.934
to support OAuth2,
and it's not just in Google.

00:22:12.934 --> 00:22:15.634
It's more widely used
outside of Google as well.

00:22:15.634 --> 00:22:17.901
It's a widely adopted
open standard,

00:22:17.901 --> 00:22:19.400
and the thing
that's really powerful,

00:22:19.400 --> 00:22:20.901
there's a number of things
that are nice features about it,

00:22:20.901 --> 00:22:22.400
but one of the things
that's really powerful

00:22:22.400 --> 00:22:23.767
in my mind about OAuth2

00:22:23.767 --> 00:22:27.734
is that you can authorize
a Web app to act on your behalf

00:22:27.734 --> 00:22:30.067
without giving
your login credentials away.

00:22:30.067 --> 00:22:31.834
So think about it.
This is important.

00:22:31.834 --> 00:22:34.734
If the way I gave access
to Google Storage

00:22:34.734 --> 00:22:37.767
was to give it
my login and password,

00:22:37.767 --> 00:22:41.067
that would mean whatever
account was going to go access--

00:22:41.067 --> 00:22:43.667
whatever application was going
to go access Google Storage

00:22:43.667 --> 00:22:46.033
could also,
if it was unscrupulous,

00:22:46.033 --> 00:22:49.434
go access my Gmail,
my Buzzes, my Docs,

00:22:49.434 --> 00:22:51.367
everything else
that's all locked

00:22:51.367 --> 00:22:54.934
behind that authorization,
those credentials.

00:22:54.934 --> 00:22:57.100
Instead,
what OAuth2 lets you do

00:22:57.100 --> 00:23:00.534
is authorize
a particular application

00:23:00.534 --> 00:23:02.601
only to access
Google Storage.

00:23:02.601 --> 00:23:05.367
It can't also access
all these other services.

00:23:05.367 --> 00:23:07.801
So it's a much narrower scope
of authorization,

00:23:07.801 --> 00:23:10.100
so that's, in general,
a better security practice.

00:23:10.100 --> 00:23:11.901
And you can authorize
different applications

00:23:11.901 --> 00:23:13.200
with different tokens

00:23:13.200 --> 00:23:16.100
and revoke individual ones
if you want to.

00:23:16.100 --> 00:23:18.801
And finally,
in order to implement OAuth2,

00:23:18.801 --> 00:23:20.400
you don't need to do
any request signing,

00:23:20.400 --> 00:23:22.734
and if anybody's ever tried
implementing request signing

00:23:22.734 --> 00:23:24.901
using OAuth1 or HMAC,

00:23:24.901 --> 00:23:28.834
you know it's kind of tricky
to get all the details right.

00:23:31.067 --> 00:23:33.367
Okay, so those are the new
features I wanted to talk about,

00:23:33.367 --> 00:23:35.234
and now, to try
to pull it all together

00:23:35.234 --> 00:23:37.067
and give you a better idea
of what you could do

00:23:37.067 --> 00:23:39.100
with all these capabilities
we're talking about,

00:23:39.100 --> 00:23:41.100
I want to present
an end-to-end scenario.

00:23:41.100 --> 00:23:42.400
And here's the scenario.

00:23:42.400 --> 00:23:44.868
It's a photographer's
preview service,

00:23:44.868 --> 00:23:46.934
and so think of it this way.

00:23:46.934 --> 00:23:49.868
Photographer goes
and shoots photos

00:23:49.868 --> 00:23:53.000
at an event like a wedding
or like this conference here

00:23:53.000 --> 00:23:56.367
and then wants to make
the photos available to people

00:23:56.367 --> 00:23:57.734
who attended the event,

00:23:57.734 --> 00:24:00.100
and there's a few different
access control things

00:24:00.100 --> 00:24:01.300
that we want to do about that.

00:24:01.300 --> 00:24:03.968
First of all,
we only want to let users see

00:24:03.968 --> 00:24:05.901
a watermarked version
of the photo,

00:24:05.901 --> 00:24:07.234
because the photographer's

00:24:07.234 --> 00:24:09.000
actually going to try
to sell the photo,

00:24:09.000 --> 00:24:11.167
so we want to make a photo
that the user can recognize

00:24:11.167 --> 00:24:12.734
but has a big mark
across the middle

00:24:12.734 --> 00:24:13.901
so they don't have any desire

00:24:13.901 --> 00:24:16.200
to just keep that version
of the photo.

00:24:16.200 --> 00:24:17.901
And we also want to make it
so the only people

00:24:17.901 --> 00:24:19.400
that can see
those preview photos

00:24:19.400 --> 00:24:20.901
are the people
that attended the event.

00:24:20.901 --> 00:24:25.734
We don't really want it globally
visible to the whole world.

00:24:25.734 --> 00:24:27.801
So that's the basic idea
of the service,

00:24:27.801 --> 00:24:29.734
and it demonstrates
a number of things.

00:24:29.734 --> 00:24:31.868
I'm going to show you
using team-based development

00:24:31.868 --> 00:24:34.934
and management to build
this application and deploy it.

00:24:34.934 --> 00:24:37.234
I'm going to show
domain named buckets,

00:24:37.234 --> 00:24:40.033
so you can make buckets
with a domain name in it,

00:24:40.033 --> 00:24:42.734
and this is useful
if you want to brand

00:24:42.734 --> 00:24:44.901
the service or application
you're deploying

00:24:44.901 --> 00:24:46.567
as being run as you,

00:24:46.567 --> 00:24:49.834
as opposed to something
that's in Google.

00:24:49.834 --> 00:24:51.767
I'm going to show you
OAuth2 authorization,

00:24:51.767 --> 00:24:53.934
and I'm going to show you
group-based sharing

00:24:53.934 --> 00:24:56.634
using Google Groups'
infrastructure.

00:24:56.634 --> 00:24:59.567
So, the first step in this is
my IT guy comes along,

00:24:59.567 --> 00:25:01.234
and he's going to
set everything up

00:25:01.234 --> 00:25:03.801
so then the developers
can work on it.

00:25:03.801 --> 00:25:06.300
And the first step is he's
going to go create a project

00:25:06.300 --> 00:25:08.601
and register an application
with Google's author--

00:25:08.601 --> 00:25:11.367
authorization infrastructure,
and once he's done that,

00:25:11.367 --> 00:25:14.234
he's going to verify
that he's the domain owner

00:25:14.234 --> 00:25:15.567
so that he can create a bucket.

00:25:15.567 --> 00:25:18.367
Google will prevent people
other than you

00:25:18.367 --> 00:25:21.400
from creating a bucket
with your domain name.

00:25:21.400 --> 00:25:24.901
Okay, so let me give you
a demonstration of this.

00:25:24.901 --> 00:25:27.200
So, this is the Google API
console again,

00:25:27.200 --> 00:25:30.033
the place that we were looking
at earlier in the talk,

00:25:30.033 --> 00:25:33.234
and the first thing I'm going
to do is I'm going to...

00:25:33.234 --> 00:25:35.434
set up API access.

00:25:35.434 --> 00:25:37.801
So when you click
on that link,

00:25:37.801 --> 00:25:40.501
you can ask it
to create credentials.

00:25:45.934 --> 00:25:48.167
I'm just going to create
a product name.

00:25:48.167 --> 00:25:50.334
I don't have a logo for it.

00:25:57.667 --> 00:25:59.300
And it's a Web application.

00:25:59.300 --> 00:26:01.501
And I'm going to tell it
to create a client ID.

00:26:01.501 --> 00:26:03.934
And at this point--

00:26:03.934 --> 00:26:06.601
Now, it's got
a not very pretty formatting

00:26:06.601 --> 00:26:08.133
'cause the window's so large,

00:26:08.133 --> 00:26:10.734
but essentially there's
this client ID and a secret,

00:26:10.734 --> 00:26:12.234
and those two pieces
of information

00:26:12.234 --> 00:26:13.901
you can stick
in your application

00:26:13.901 --> 00:26:18.534
so that it can request
credentials on behalf of a user

00:26:18.534 --> 00:26:21.167
and the authorization
service can know

00:26:21.167 --> 00:26:23.601
that that's
this particular client.

00:26:23.601 --> 00:26:25.367
And that secret
in and of itself

00:26:25.367 --> 00:26:27.000
actually doesn't gain access
to anything.

00:26:27.000 --> 00:26:29.334
It's basically
just to identify the client

00:26:29.334 --> 00:26:31.033
that you've just created.

00:26:31.033 --> 00:26:33.601
Okay, so I've set up an API.

00:26:33.601 --> 00:26:36.634
I set up API access
for my new application,

00:26:36.634 --> 00:26:39.133
and now I'm going to set up
the team.

00:26:39.133 --> 00:26:41.367
And. actually, I've already
added the two people here.

00:26:41.367 --> 00:26:42.767
I've added
a couple of developers

00:26:42.767 --> 00:26:44.000
and given them edit access.

00:26:44.000 --> 00:26:46.601
You can give them
view or edit access.

00:26:46.601 --> 00:26:51.133
And what this does is
it makes it so that once the--

00:26:51.133 --> 00:26:53.834
once you've set up this team,
anytime you go create a bucket,

00:26:53.834 --> 00:26:56.801
anybody who has edit access
in the team

00:26:56.801 --> 00:26:58.868
will have edit access
to the bucket.

00:26:58.868 --> 00:27:00.901
So it just makes
setting up ACLs easier,

00:27:00.901 --> 00:27:02.367
among other things.

00:27:02.367 --> 00:27:06.701
Okay, so that's
what the IT person's done.

00:27:06.701 --> 00:27:08.567
He's gone and created
the project

00:27:08.567 --> 00:27:09.901
and registered the app,

00:27:09.901 --> 00:27:12.767
and now the next step
I want to do is set up domain--

00:27:12.767 --> 00:27:16.567
a domain-named bucket,
and for this...

00:27:16.567 --> 00:27:19.400
I have a little script.

00:27:19.400 --> 00:27:21.400
So the first thing I'm going
to do is show you what happens

00:27:21.400 --> 00:27:22.934
if you were to try to
create a bucket

00:27:22.934 --> 00:27:26.234
with a domain name in it that
I don't have authorization for.

00:27:26.234 --> 00:27:29.467
So I don't own the domain
"example.com."

00:27:29.467 --> 00:27:30.734
Google Storage detects that.

00:27:30.734 --> 00:27:34.033
When you try to create
the bucket "example.com,"

00:27:34.033 --> 00:27:37.067
it says you need to go
to this URL to--

00:27:37.067 --> 00:27:38.767
to prove that you own
the bucket,

00:27:38.767 --> 00:27:40.868
and if you do, it would take you
to a page that gives--

00:27:40.868 --> 00:27:42.601
that explains
what domain ownership is

00:27:42.601 --> 00:27:44.367
and gives you
several different options.

00:27:44.367 --> 00:27:45.767
I'm not going to go
to that page now.

00:27:45.767 --> 00:27:47.734
Instead, I'm just going to
show you the result

00:27:47.734 --> 00:27:52.267
of having already done that
for my gsdemo2011.com domain.

00:27:52.267 --> 00:27:55.634
So here what I did was,
when I visited the doma--

00:27:55.634 --> 00:27:58.767
Webmaster tools domain
ownership verification page,

00:27:58.767 --> 00:28:00.801
it generated
a little text token,

00:28:00.801 --> 00:28:03.200
which you can see down at
the bottom of the screen here,

00:28:03.200 --> 00:28:07.234
and asked me to write
that into my domain name server.

00:28:07.234 --> 00:28:10.133
And the fact that I'm able
to do that proves to--

00:28:10.133 --> 00:28:12.567
to Google
that I own the domain.

00:28:12.567 --> 00:28:14.033
And there's other options, too.

00:28:14.033 --> 00:28:17.934
You don't need to do it
just using domain updates.

00:28:17.934 --> 00:28:20.234
Once I've done that,
I can now go create a bucket,

00:28:20.234 --> 00:28:21.968
and Google Storage
will allow me to do it.

00:28:21.968 --> 00:28:25.934
So I'm creating this bucket
"photos.gsdemo2011.com"

00:28:25.934 --> 00:28:29.000
and at that point,
the IT guy's job is complete.

00:28:29.000 --> 00:28:30.868
He's set up the project,
created the team,

00:28:30.868 --> 00:28:33.367
set up the bucket,
and now we can move on

00:28:33.367 --> 00:28:35.868
and bring in
the development team.

00:28:35.868 --> 00:28:37.300
Here's my development team.

00:28:37.300 --> 00:28:40.100
And they're going to go
implement the application,

00:28:40.100 --> 00:28:43.167
and they're going to test it
using an access control list

00:28:43.167 --> 00:28:45.701
called--mechanism called
"project-private,"

00:28:45.701 --> 00:28:47.200
which basically means
anybody in the team

00:28:47.200 --> 00:28:48.734
can read and write
the bucket

00:28:48.734 --> 00:28:50.901
and see everything
that's being created in there,

00:28:50.901 --> 00:28:52.868
but it's not yet visible
to the rest of the world

00:28:52.868 --> 00:28:54.567
because we're still
in the process,

00:28:54.567 --> 00:28:56.400
developing and de-bugging
this application.

00:28:56.400 --> 00:28:59.000
Once they finish doing that,
they can deploy

00:28:59.000 --> 00:29:05.234
the app into App Engine
and start using it.

00:29:05.234 --> 00:29:06.767
Okay, so the next step now is

00:29:06.767 --> 00:29:08.601
we've got this app up
and running

00:29:08.601 --> 00:29:10.400
using this bucket
that we've set up,

00:29:10.400 --> 00:29:12.734
and now we have a photographer
who's going to go along--

00:29:12.734 --> 00:29:13.968
come along and use the app.

00:29:13.968 --> 00:29:15.734
And the way that works is,

00:29:15.734 --> 00:29:18.400
the photographer's going to go
to App Engine and run the app,

00:29:18.400 --> 00:29:20.133
and the first thing
it's going to do

00:29:20.133 --> 00:29:23.167
is notice that the app
doesn't yet have credentials

00:29:23.167 --> 00:29:24.167
for that photographer.

00:29:24.167 --> 00:29:25.634
It's going to request those

00:29:25.634 --> 00:29:28.167
via Google's
authorization infrastructure,

00:29:28.167 --> 00:29:30.367
and that is going to
in turn require

00:29:30.367 --> 00:29:32.400
that the user
authorize the access.

00:29:32.400 --> 00:29:35.400
So you're not just giving it
credentials

00:29:35.400 --> 00:29:37.267
to work with
without first verifying

00:29:37.267 --> 00:29:40.267
that the user wants that
to be done.

00:29:40.267 --> 00:29:45.400
Okay, so here
I'm going to show this.

00:29:45.400 --> 00:29:47.234
So what I have here--
first of all,

00:29:47.234 --> 00:29:50.968
notice that this is a--

00:29:50.968 --> 00:29:53.667
I'm logged into Gmail here
as this identity pix--

00:29:53.667 --> 00:29:57.000
the photographer
"pix@gsdemo2011.com,"

00:29:57.000 --> 00:29:58.834
and I'm going to go
run this app engine app.

00:29:58.834 --> 00:30:00.801
This is an application

00:30:00.801 --> 00:30:04.067
that I've uploaded
to Google's App Engine,

00:30:04.067 --> 00:30:06.234
and what it does is it's going
to try to acquire credentials.

00:30:06.234 --> 00:30:07.734
And the first thing
it's going to notice

00:30:07.734 --> 00:30:11.234
is it doesn't have credentials
that are authorized yet for me.

00:30:11.234 --> 00:30:12.734
So it's saying,

00:30:12.734 --> 00:30:16.634
"Do you want to authorize
this application GoogleIO Demo

00:30:16.634 --> 00:30:18.901
to access Google Storage
for developers?"

00:30:18.901 --> 00:30:20.801
And if you click, you can find
a little bit more information

00:30:20.801 --> 00:30:22.567
about what
it's actually saying.

00:30:22.567 --> 00:30:25.067
Do you want to manage data
and so forth?

00:30:25.067 --> 00:30:28.467
And you can also see what's
going to happen once you do.

00:30:28.467 --> 00:30:29.834
So, in particular,
what happened was

00:30:29.834 --> 00:30:31.501
I went from App Engine,

00:30:31.501 --> 00:30:33.267
App Engine noticed
it didn't have credentials

00:30:33.267 --> 00:30:35.567
and redirected to Google's
authorization server.

00:30:35.567 --> 00:30:37.434
You can see it's logged in--

00:30:37.434 --> 00:30:42.234
it's "@accounts.google.com,"
and after authorizing,

00:30:42.234 --> 00:30:44.200
it's going to redirect
back to my app,

00:30:44.200 --> 00:30:46.267
down an app spot
but a different entry point,

00:30:46.267 --> 00:30:48.701
which is the entry point that
will receive the credentials

00:30:48.701 --> 00:30:49.901
that are generated.

00:30:49.901 --> 00:30:51.501
So I'm going to allow
this access.

00:30:51.501 --> 00:30:52.801
And at this point,

00:30:52.801 --> 00:30:54.601
the application's
receiving the credentials,

00:30:54.601 --> 00:30:56.934
it's going to store them
away securely

00:30:56.934 --> 00:31:00.400
in the App Engine credential's
repository,

00:31:00.400 --> 00:31:02.200
and it's going to use
those credentials

00:31:02.200 --> 00:31:04.934
to read and write buckets
and store this--

00:31:04.934 --> 00:31:06.801
this watermarked photo.

00:31:06.801 --> 00:31:09.868
And now it's saying the photo's
available at this link.

00:31:09.868 --> 00:31:12.334
And since I'm the person
who ran this app,

00:31:12.334 --> 00:31:17.067
I can go ahead and click on
this link and get to the photo.

00:31:17.067 --> 00:31:19.234
And now I want to make
one other point,

00:31:19.234 --> 00:31:21.234
which is the comment
I just made about,

00:31:21.234 --> 00:31:23.567
"Since I'm the one who ran it,
I can look at it."

00:31:23.567 --> 00:31:25.834
Let me bring up
a different window here.

00:31:25.834 --> 00:31:27.367
Now, you remember
that previous window

00:31:27.367 --> 00:31:28.567
was logged in
as the photographer.

00:31:28.567 --> 00:31:30.133
The photographer
ran the app,

00:31:30.133 --> 00:31:32.133
generated
the watermarked photos.

00:31:32.133 --> 00:31:34.934
Now I want to see
the view of the data

00:31:34.934 --> 00:31:36.567
that was generated
by this app

00:31:36.567 --> 00:31:38.400
from someone
other than the photographer.

00:31:38.400 --> 00:31:41.300
So here's my IT login,

00:31:41.300 --> 00:31:44.501
and here I have positioned
in the address bar

00:31:44.501 --> 00:31:47.567
that same photo URL,
and if I try to go there,

00:31:47.567 --> 00:31:49.267
I get "Access Denied,"

00:31:49.267 --> 00:31:51.868
and that's because
when the app wrote the photo,

00:31:51.868 --> 00:31:55.167
it wrote it with an ACL
that granted read access

00:31:55.167 --> 00:31:57.300
to anybody that was

00:31:57.300 --> 00:32:02.534
in the "gsdemo-2011-guests
@googlegroups.com" group,

00:32:02.534 --> 00:32:04.934
and this identity
is not yet logged in there.

00:32:04.934 --> 00:32:07.367
So let me show what--
show you what happens.

00:32:07.367 --> 00:32:09.667
I'm going to go sign up.

00:32:09.667 --> 00:32:12.000
So I'm over
at the Google Groups console

00:32:12.000 --> 00:32:14.601
under "gsdemo2011-guests,"

00:32:14.601 --> 00:32:18.567
and I'm going to go
join this group.

00:32:18.567 --> 00:32:20.367
And you can also try this
if you want.

00:32:20.367 --> 00:32:22.534
I promise I'm not going to
harvest anyone's email.

00:32:22.534 --> 00:32:25.667
This is just
a little demonstration.

00:32:25.667 --> 00:32:28.400
I'm going to join this group.

00:32:28.400 --> 00:32:30.434
And once I've done that,

00:32:30.434 --> 00:32:35.100
I can go back and refresh,
and now I can access the photo.

00:32:35.100 --> 00:32:37.734
So, again, this is demonstrating
that you can share with a group,

00:32:37.734 --> 00:32:39.634
and there's actually that--

00:32:39.634 --> 00:32:41.434
that group-sharing mechanism,
actually,

00:32:41.434 --> 00:32:43.000
there's a couple different ways
you can set it up.

00:32:43.000 --> 00:32:44.567
The way I have it
set up right now,

00:32:44.567 --> 00:32:47.067
it just lets anybody
who wants to go log in and--

00:32:47.067 --> 00:32:50.934
and sign up
to be in the group.

00:32:50.934 --> 00:32:52.501
And that implements,
for example,

00:32:52.501 --> 00:32:54.000
if you wanted a registry
of everybody

00:32:54.000 --> 00:32:56.400
who tried to access
this photo.

00:32:56.400 --> 00:32:57.901
A different way
of setting it up

00:32:57.901 --> 00:32:59.767
would be to have
a central administrator

00:32:59.767 --> 00:33:01.234
who decides who gets to be
in the group,

00:33:01.234 --> 00:33:02.567
and that's what
you'd want to do,

00:33:02.567 --> 00:33:04.734
for example, if you were
a company that was setting up

00:33:04.734 --> 00:33:06.601
the access control mechanism
I mentioned before

00:33:06.601 --> 00:33:07.968
where you have
millions of objects

00:33:07.968 --> 00:33:11.334
all set with the same grant
to a particular group,

00:33:11.334 --> 00:33:13.133
and then you can just add
and remove people

00:33:13.133 --> 00:33:14.667
from that group
from here.

00:33:14.667 --> 00:33:17.067
So there's two very different
kinds of access control models

00:33:17.067 --> 00:33:20.400
you can implement with this.

00:33:20.400 --> 00:33:22.667
Okay, so...

00:33:24.901 --> 00:33:26.067
And that's pretty much it.

00:33:26.067 --> 00:33:27.400
That's the part I just
showed you

00:33:27.400 --> 00:33:29.067
with the guests that join
and can view

00:33:29.067 --> 00:33:32.434
the photos and so forth.

00:33:32.434 --> 00:33:33.901
Okay, so moving on...

00:33:33.901 --> 00:33:35.567
Now I want to talk
a little bit more

00:33:35.567 --> 00:33:37.267
about what actually
happened with OAuth,

00:33:37.267 --> 00:33:39.234
and I'm not going to get into
a lot of depth about this.

00:33:39.234 --> 00:33:41.834
If you want to learn more
about OAuth2,

00:33:41.834 --> 00:33:43.834
I recommend--
There's a session

00:33:43.834 --> 00:33:47.467
about identity and OAuth2
that's going to be tomorrow--

00:33:47.467 --> 00:33:49.000
I think tomorrow afternoon
at 1:45.

00:33:49.000 --> 00:33:50.667
You can check
your schedule.

00:33:50.667 --> 00:33:52.133
But let me just give you
a brief overview.

00:33:52.133 --> 00:33:54.167
So what happened was,
we set up the application,

00:33:54.167 --> 00:33:56.033
and the Google
authorization service

00:33:56.033 --> 00:33:57.400
set up a set up credentials

00:33:57.400 --> 00:33:59.200
that we wrote
into the application,

00:33:59.200 --> 00:34:02.334
and then when the photographer
runs the application,

00:34:02.334 --> 00:34:05.267
it gets--
the app redirects

00:34:05.267 --> 00:34:08.100
to Google Storage, to Google's
authentication service,

00:34:08.100 --> 00:34:11.267
which then generates
a revocable token.

00:34:11.267 --> 00:34:14.567
It's called a "refresh token,"
and that token can be used

00:34:14.567 --> 00:34:16.868
with an exchange protocol,
which, again, I encourage you

00:34:16.868 --> 00:34:19.901
to go to the OAuth2 talk if
you want to learn more about it,

00:34:19.901 --> 00:34:22.400
to actually generate the--

00:34:22.400 --> 00:34:24.367
the what's called
an "access token"

00:34:24.367 --> 00:34:27.634
to access the protected storage,
Google Storage in this case.

00:34:27.634 --> 00:34:29.400
And one of the important
points to note here

00:34:29.400 --> 00:34:32.834
is that access token
is short-lived,

00:34:32.834 --> 00:34:34.567
and by default, it lives
for only an hour.

00:34:34.567 --> 00:34:37.634
So you're never actually
sharing long-lived credential

00:34:37.634 --> 00:34:39.033
with a protected resource,

00:34:39.033 --> 00:34:42.501
which, again, is another
nice security feature.

00:34:44.200 --> 00:34:45.701
And one other comment
I'd make is,

00:34:45.701 --> 00:34:48.234
if you get the--the latest
version of gsutil,

00:34:48.234 --> 00:34:50.701
which we just made available,

00:34:50.701 --> 00:34:53.067
it includes a sub-directory
called "cloudauth"

00:34:53.067 --> 00:34:56.267
that has a complete
implementation of a Web app

00:34:56.267 --> 00:34:59.033
that does OAuth2-based
authorization

00:34:59.033 --> 00:35:03.968
to talk to Google Storage
from Google App engine.

00:35:03.968 --> 00:35:06.234
Okay, so just the recap
of some of the

00:35:06.234 --> 00:35:08.234
business/developer-oriented
features

00:35:08.234 --> 00:35:10.634
that we've announced
and talked about today.

00:35:10.634 --> 00:35:14.033
Support for large
and streaming transfers,

00:35:14.033 --> 00:35:18.334
the ability to specify an
additional location in Europe,

00:35:18.334 --> 00:35:19.968
projects
and team-based development

00:35:19.968 --> 00:35:22.634
via Google's API console,

00:35:22.634 --> 00:35:25.167
ownership verification
for domain name buckets,

00:35:25.167 --> 00:35:29.968
and then, finally, security,
both OAuth2 and group sharing.

00:35:29.968 --> 00:35:33.934
So, at this point,
I invite people to go sign up.

00:35:33.934 --> 00:35:37.934
Again, this link is going to--
the link that this takes you to,

00:35:37.934 --> 00:35:41.067
the actual sign-up page
will be live this afternoon,

00:35:41.067 --> 00:35:42.601
and if anybody
has any questions,

00:35:42.601 --> 00:35:46.901
I'd like to open up
the floor now.

00:35:46.901 --> 00:35:48.834
And if people have questions,
we would appreciate it

00:35:48.834 --> 00:35:51.667
if you'd use one of
the two mics here, by the way.

00:35:57.300 --> 00:36:00.567
man:
Put the URL back up, Mike.

00:36:00.567 --> 00:36:02.834
Joneja:
Okay, put the URL back up.

00:36:02.834 --> 00:36:05.167
man:
I have a question for you.

00:36:05.167 --> 00:36:08.234
What does the pricing scheme
look like

00:36:08.234 --> 00:36:13.567
for GETS, PUTS, POSTS,
all that jazz?

00:36:13.567 --> 00:36:16.000
Joneja:
So you can go to--

00:36:16.000 --> 00:36:20.300
Sorry, the question was about
pricing for GETS, PUTS, POSTS,

00:36:20.300 --> 00:36:22.400
I guess, storage
and bandwidth as well.

00:36:22.400 --> 00:36:24.367
So the information
is on our Website,

00:36:24.367 --> 00:36:27.000
but just a quick highlight is,

00:36:27.000 --> 00:36:29.234
storage costs
17 cents a gigabyte,

00:36:29.234 --> 00:36:31.167
regardless
of where you store it.

00:36:31.167 --> 00:36:33.901
Transfer into Google's ser--
data centers

00:36:33.901 --> 00:36:35.601
is 10 cents a gigabyte.

00:36:35.601 --> 00:36:38.000
Transfer out depends on
where you're transferring to.

00:36:38.000 --> 00:36:40.601
It's 15 cents per gigabyte
in the US and Europe

00:36:40.601 --> 00:36:43.901
and 30 in Asia,
and then requests are charged--

00:36:43.901 --> 00:36:47.400
the read-type requests
are charged at 1 cent

00:36:47.400 --> 00:36:48.901
per 10,000 requests,

00:36:48.901 --> 00:36:51.400
and the write-type requests
are charged at 1 cent

00:36:51.400 --> 00:36:55.901
per thousand requests.

00:36:55.901 --> 00:36:57.734
man: Hi. I'm curious
whether you see this

00:36:57.734 --> 00:36:59.567
as a service
that's meant to be consumed

00:36:59.567 --> 00:37:03.934
on the back end by a Web app
or by users through a browser

00:37:03.934 --> 00:37:07.901
with a latency kind of support
dealing with large files

00:37:07.901 --> 00:37:10.567
in real time for a Web app.

00:37:10.567 --> 00:37:11.868
Schwartz:
So the question was,

00:37:11.868 --> 00:37:15.300
Web app versus end users making
use of the service.

00:37:15.300 --> 00:37:16.767
You can use it for either.

00:37:16.767 --> 00:37:19.601
I mean, we're more tailored
towards developers building,

00:37:19.601 --> 00:37:21.801
you know,
scalable applications,

00:37:21.801 --> 00:37:23.234
so in that sense,

00:37:23.234 --> 00:37:25.300
it's more
of a back-end infrastructure,

00:37:25.300 --> 00:37:27.834
but certainly
we have use cases

00:37:27.834 --> 00:37:30.734
of users accessing the data
directly from the browser.

00:37:30.734 --> 00:37:35.400
We actually have a manager,
a Google Storage manager,

00:37:35.400 --> 00:37:38.734
which is a web-based UI
for browsing as an end user,

00:37:38.734 --> 00:37:40.400
and I actually use it,
for example,

00:37:40.400 --> 00:37:44.067
for moving data up and down
into my home for the Cloud.

00:37:44.067 --> 00:37:45.200
Yeah.

00:37:45.200 --> 00:37:46.968
man:
I have an Android app

00:37:46.968 --> 00:37:53.734
that I want to upload a file
directly into Google Docs.

00:37:53.734 --> 00:37:57.701
Is there a way to do that?

00:37:57.701 --> 00:38:01.801
I mean, it seemed like this
might be a lower-level API.

00:38:01.801 --> 00:38:04.434
Is there something
in the Android SDK

00:38:04.434 --> 00:38:08.667
that allows me to send the file
into a user's--

00:38:08.667 --> 00:38:09.801
Schwartz:
Into Docs?

00:38:09.801 --> 00:38:12.400
man:
Into a user's GDocs?

00:38:12.400 --> 00:38:14.868
Schwartz:
So GDocs and Google Storage

00:38:14.868 --> 00:38:16.234
are separate services.

00:38:16.234 --> 00:38:18.000
They don't share data.

00:38:18.000 --> 00:38:19.901
There might be a way to do
what you're talking about

00:38:19.901 --> 00:38:21.834
using the GData protocols,

00:38:21.834 --> 00:38:25.767
but it's not through
Google Storage.

00:38:25.767 --> 00:38:28.667
man: Thank you.
Schwartz: Yeah.

00:38:28.667 --> 00:38:30.901
man: Why should I prefer
to use a Storage

00:38:30.901 --> 00:38:34.467
instead of the Blobstore
on App Engine's application?

00:38:34.467 --> 00:38:35.534
Schwartz: I'm sorry.
I couldn't--

00:38:35.534 --> 00:38:36.934
man: Why I should
prefer the Storage

00:38:36.934 --> 00:38:40.400
instead of Blobstore
on App Engine?

00:38:40.400 --> 00:38:43.033
Schwartz: Well, actually
we're working with App Engine--

00:38:43.033 --> 00:38:44.200
So the question was,

00:38:44.200 --> 00:38:46.067
why should you prefer to use
Google Storage

00:38:46.067 --> 00:38:48.667
rather than talking
to App Engine's Blobstore.

00:38:48.667 --> 00:38:50.400
We're working
with the App Engine team

00:38:50.400 --> 00:38:52.267
to integrate the two
so that they'll be the same,

00:38:52.267 --> 00:38:54.434
and it'll basically just come
down to being your choice

00:38:54.434 --> 00:38:57.634
of whether you want to use
App Engine or Google Storage API

00:38:57.634 --> 00:38:59.767
to get the data there,
but once it's there,

00:38:59.767 --> 00:39:01.567
it should be accessible
by both.

00:39:01.567 --> 00:39:03.067
That's not currently
the state of things.

00:39:03.067 --> 00:39:04.467
We're working on that.
man: All right.

00:39:04.467 --> 00:39:07.801
Would you work on providing
the Image API on top of Storage,

00:39:07.801 --> 00:39:10.367
which is very good?

00:39:10.367 --> 00:39:11.734
Joneja:
So the question was,

00:39:11.734 --> 00:39:13.634
will we work on supporting
the Images API

00:39:13.634 --> 00:39:15.067
on top of Google Storage?

00:39:15.067 --> 00:39:16.767
So I can't comment
about future directions,

00:39:16.767 --> 00:39:19.267
but, you know, you could assume
that if we're working

00:39:19.267 --> 00:39:22.801
on those features 
in one--in App Engine,

00:39:22.801 --> 00:39:24.367
once the integration happens,

00:39:24.367 --> 00:39:29.000
you'll be able to use it
all over.

00:39:29.000 --> 00:39:32.334
man: So, in your demo--
in your demo,

00:39:32.334 --> 00:39:34.968
where you uploaded the file
to a European data center...

00:39:34.968 --> 00:39:36.000
Schwartz:
Mm-hmm.

00:39:36.000 --> 00:39:37.567
man: and downloaded it
from the US,

00:39:37.567 --> 00:39:38.901
that file is being served

00:39:38.901 --> 00:39:40.968
from that European data center
directly, right?

00:39:40.968 --> 00:39:43.334
I guess
the first question is--

00:39:43.334 --> 00:39:45.701
Schwartz: Well, the data lives
in the European data center.

00:39:45.701 --> 00:39:48.234
The exact mechanics
of how things are served

00:39:48.234 --> 00:39:50.567
are really something
we can't comment about,

00:39:50.567 --> 00:39:52.968
but I mean, yeah, it does live
in the European data center.

00:39:52.968 --> 00:39:54.901
man: You saw slow download
speeds from that US client.

00:39:54.901 --> 00:39:55.968
Schwartz:
Right, right.

00:39:55.968 --> 00:39:57.234
man:
Does that eventually get better?

00:39:57.234 --> 00:39:58.801
Is that replicated
to a US end point

00:39:58.801 --> 00:40:00.234
and downloaded from there?

00:40:00.234 --> 00:40:03.000
Schwartz: So you can turn on
caching if you want.

00:40:03.000 --> 00:40:05.567
By default, it's not on,
and the--

00:40:05.567 --> 00:40:07.667
no, the data is not replicated
to the US.

00:40:07.667 --> 00:40:11.000
We, you know, keep it in
Europe for a variety of reasons,

00:40:11.000 --> 00:40:13.300
if you ask it
to be placed in Europe.

00:40:13.300 --> 00:40:14.767
Joneja: So I'll build

00:40:14.767 --> 00:40:16.634
on Mike's statement
and add that, you know,

00:40:16.634 --> 00:40:19.834
data is always replicated,
but the way we do replication

00:40:19.834 --> 00:40:21.868
is within a region,
and so we have two regions,

00:40:21.868 --> 00:40:23.834
the US region
and the Europe region,

00:40:23.834 --> 00:40:25.300
so you will have replicas
of your data

00:40:25.300 --> 00:40:27.701
in multiple data centers
when you store it in Europe,

00:40:27.701 --> 00:40:29.834
but those data centers
will all be in Europe.

00:40:29.834 --> 00:40:31.167
Now, talking
about performance,

00:40:31.167 --> 00:40:33.334
there's probably
a bunch of things going on

00:40:33.334 --> 00:40:34.501
between Dallas and Europe.

00:40:34.501 --> 00:40:36.067
I'm not sure
what was happening today,

00:40:36.067 --> 00:40:37.734
maybe network congestion
or something,

00:40:37.734 --> 00:40:41.901
but in general, performance
should be pretty fast.

00:40:41.901 --> 00:40:44.400
man: I have a question
on the large data sets.

00:40:44.400 --> 00:40:45.767
So, if I'm starting with,

00:40:45.767 --> 00:40:48.567
say, hundreds of terabytes
at the onset of my app, is--

00:40:48.567 --> 00:40:50.167
Amazon today
offers a opportunity

00:40:50.167 --> 00:40:52.434
where I can send them a drive,
and they'll load that for me.

00:40:52.434 --> 00:40:55.033
Will Google offer something
similar to that?

00:40:55.033 --> 00:40:56.234
Schwartz:
So, again--

00:40:56.234 --> 00:40:57.801
man: Initial data load
for a very large size?

00:40:57.801 --> 00:40:59.000
Schwartz:
Right.

00:40:59.000 --> 00:41:01.234
Again, we can't comment
on future offerings,

00:41:01.234 --> 00:41:03.400
but we're definitely looking

00:41:03.400 --> 00:41:05.067
at lots of different things
like that,

00:41:05.067 --> 00:41:07.734
and we're very interested--
If anybody has ideas of things

00:41:07.734 --> 00:41:09.400
they'd like to be able to work,
come talk to us.

00:41:09.400 --> 00:41:11.067
You know,
we're always interested

00:41:11.067 --> 00:41:12.968
in hearing
what your needs are.

00:41:12.968 --> 00:41:14.601
man: I think you may have
already answered it

00:41:14.601 --> 00:41:15.968
with, "Can't comment
on future directions."

00:41:15.968 --> 00:41:18.167
Asia coming online
anytime soon?

00:41:18.167 --> 00:41:19.734
Schwartz: Again,
a future direction.

00:41:19.734 --> 00:41:21.534
[laughter]

00:41:21.534 --> 00:41:22.934
Sorry.

00:41:22.934 --> 00:41:26.067
man: Hello.
Yeah.

00:41:26.067 --> 00:41:27.701
I have one question.

00:41:27.701 --> 00:41:29.601
I'm curious
about the performance,

00:41:29.601 --> 00:41:32.567
and for improved performance,
have you considered to use

00:41:32.567 --> 00:41:37.434
some peer-to-peer technology
to take advantage

00:41:37.434 --> 00:41:44.734
of some storaging in the user,
in--in user space?

00:41:44.734 --> 00:41:46.400
Schwartz: So, the question
is whether we've considered

00:41:46.400 --> 00:41:49.067
using peer-to-peer technology
to make performance faster

00:41:49.067 --> 00:41:50.734
by taking advantage of users

00:41:50.734 --> 00:41:52.400
that might be near you that have
already downloaded it.

00:41:52.400 --> 00:41:55.567
No.
We're not doing that.

00:41:55.567 --> 00:41:56.734
Joneja:
We don't do that,

00:41:56.734 --> 00:41:58.834
and, again,
as we spoke about, you know,

00:41:58.834 --> 00:42:00.767
future directions,
we don't comment.

00:42:00.767 --> 00:42:02.801
However, having said that,
if you have thoughts and input

00:42:02.801 --> 00:42:04.400
on things
that you would like us do to

00:42:04.400 --> 00:42:06.834
and use cases you'd like us
to support,

00:42:06.834 --> 00:42:08.567
please do feel free
to keep suggesting them.

00:42:08.567 --> 00:42:10.234
Either find us
after the session

00:42:10.234 --> 00:42:12.133
or post them to
the GS discussion mailing list,

00:42:12.133 --> 00:42:14.300
and we monitor
that list pretty closely.

00:42:14.300 --> 00:42:15.901
man:
Okay, thank you.

00:42:15.901 --> 00:42:17.868
man #2: Hi, what kind of APIs
do you guys have

00:42:17.868 --> 00:42:20.667
for dealing
with a relational database

00:42:20.667 --> 00:42:22.801
and keeping records synched.

00:42:22.801 --> 00:42:25.067
So, if I wanted two, say,
SQL server databases

00:42:25.067 --> 00:42:26.567
synchronized
in different places,

00:42:26.567 --> 00:42:29.067
do you have any specific APIs
for dealing with that?

00:42:29.067 --> 00:42:30.334
Schwartz:
Well, that's definitely

00:42:30.334 --> 00:42:31.901
not part of Google Storage.

00:42:31.901 --> 00:42:33.734
Google Storage API
is really just a storage,

00:42:33.734 --> 00:42:35.667
not a database API.

00:42:35.667 --> 00:42:38.534
There's various
other kinds of, you know,

00:42:38.534 --> 00:42:40.934
products inside of Google
that do database-like things,

00:42:40.934 --> 00:42:42.701
but that's not part
of Google Storage.

00:42:42.701 --> 00:42:45.534
man:
Thank you.

00:42:45.534 --> 00:42:50.968
man #2: Will you have the--
the capability to cap,

00:42:50.968 --> 00:42:54.400
say, items
per authentication?

00:42:54.400 --> 00:42:56.267
So, say, for instance,
I use a Kindle

00:42:56.267 --> 00:43:01.033
and downloaded it once or twice
based on their authentication,

00:43:01.033 --> 00:43:03.367
would you have that
as a feature?

00:43:03.367 --> 00:43:05.667
Schwartz: Are you talking
about limiting how much

00:43:05.667 --> 00:43:07.234
a user might end up costing

00:43:07.234 --> 00:43:09.367
because you put a limit
on how many things they can do?

00:43:09.367 --> 00:43:10.667
man:
Yes, yes.

00:43:10.667 --> 00:43:12.801
Schwartz: So, again,
it's a--

00:43:12.801 --> 00:43:14.901
do you want to comment on that?
Joneja: I mean, thanks.

00:43:14.901 --> 00:43:16.067
Thanks for the question.

00:43:16.067 --> 00:43:17.567
I guess that the short answer
is, again,

00:43:17.567 --> 00:43:18.901
you know,
"future directions."

00:43:18.901 --> 00:43:20.334
Don't comment too much
about it.

00:43:20.334 --> 00:43:22.100
But, you know, come
and find me afterwards.

00:43:22.100 --> 00:43:23.934
Let's chat about what
you want to do,

00:43:23.934 --> 00:43:25.434
and I'd love to just understand
what you're trying to do,

00:43:25.434 --> 00:43:27.734
and we can see, you know,
if there's something--

00:43:27.734 --> 00:43:29.234
Schwartz: Yeah.
We'll both be here

00:43:29.234 --> 00:43:31.501
for the next couple days,
by the way.

00:43:31.501 --> 00:43:34.100
Thank you.
man: How you doing?

00:43:34.100 --> 00:43:36.567
Your demo showed
resuming file transfers.

00:43:36.567 --> 00:43:37.868
Schwartz:
Mm-hmm.

00:43:37.868 --> 00:43:39.968
man: So it looks like
your system can accommodate

00:43:39.968 --> 00:43:42.067
ordered operations,
and is there, like,

00:43:42.067 --> 00:43:45.901
perhaps, a head request where
you can get, like, file length

00:43:45.901 --> 00:43:48.033
so you can create
your own chunking mechanism?

00:43:48.033 --> 00:43:50.033
It looks like it's all happening
under the hood in gsutil.

00:43:50.033 --> 00:43:51.267
Schwartz: Yeah, yeah.

00:43:51.267 --> 00:43:53.300
There is a head mechanism,
and, actually,

00:43:53.300 --> 00:43:56.033
when I scrolled back
and showed you the operations

00:43:56.033 --> 00:43:58.234
that were going on
using that "gsuitl-d,"

00:43:58.234 --> 00:44:00.167
I didn't scroll back
far enough.

00:44:00.167 --> 00:44:02.868
The underlying
BOTO library call

00:44:02.868 --> 00:44:06.234
actually ended up doing a head
before it did the CAT,

00:44:06.234 --> 00:44:07.667
so, yes, you can.

00:44:07.667 --> 00:44:09.467
man: So that's what it's
actually going to do--

00:44:09.467 --> 00:44:11.234
resume so it figures out
its place in the file,

00:44:11.234 --> 00:44:12.567
so it knows
it's getting something--

00:44:12.567 --> 00:44:14.067
Schwartz: Oh, actually,
for resumable upload,

00:44:14.067 --> 00:44:15.234
it's not using head,

00:44:15.234 --> 00:44:17.167
it's using a request
to the server

00:44:17.167 --> 00:44:19.000
to ask what the server has.

00:44:19.000 --> 00:44:22.501
It's using that Google
resumable protocol.

00:44:22.501 --> 00:44:24.734
So it's basically,
when you start the transfer,

00:44:24.734 --> 00:44:26.634
the server gives you back
an upload ID,

00:44:26.634 --> 00:44:30.400
which is just a GUID, basically,
a globally unique ID.

00:44:30.400 --> 00:44:33.133
You--you make a--
when you PUT again it--

00:44:33.133 --> 00:44:34.567
you specify that GUID,

00:44:34.567 --> 00:44:36.234
and the server gives you
a response back saying

00:44:36.234 --> 00:44:38.767
what it currently has,
so it's not using head for that.

00:44:38.767 --> 00:44:40.667
man:
Thanks.

00:44:40.667 --> 00:44:42.234
Schwartz: And that's
a more general protocol

00:44:42.234 --> 00:44:43.934
than just Google Storage,
by the way.

00:44:43.934 --> 00:44:46.100
That's used
throughout Google.

00:44:46.100 --> 00:44:48.267
For example, when you upload
attachments with Gmail,

00:44:48.267 --> 00:44:51.834
it uses that same protocol.

00:44:51.834 --> 00:44:55.033
man: Hi.
I have a couple questions.

00:44:55.033 --> 00:44:58.300
Does Google Storage
support transport encryption

00:44:58.300 --> 00:45:02.734
and on-site encryption?

00:45:02.734 --> 00:45:07.367
And my other question was
related to a previous question

00:45:07.367 --> 00:45:09.901
about do you store metadata

00:45:09.901 --> 00:45:13.100
along with the files
that you upload?

00:45:13.100 --> 00:45:14.434
Schwartz:
So the first question was,

00:45:14.434 --> 00:45:15.934
do we support
transport encryption?

00:45:15.934 --> 00:45:19.033
And, yes, we do, and, in fact,
we encourage it.

00:45:19.033 --> 00:45:23.300
Particularly with OAuth2,
you want to leave using HTTPS.

00:45:23.300 --> 00:45:26.100
You want to encrypt
the payload,

00:45:26.100 --> 00:45:28.234
including the credential
information.

00:45:28.234 --> 00:45:29.734
I think the second question

00:45:29.734 --> 00:45:31.567
was asking whether
we store data encrypted.

00:45:31.567 --> 00:45:34.267
Was that...?
So, we don't, right now.

00:45:34.267 --> 00:45:35.834
We're, you know, it's--

00:45:35.834 --> 00:45:37.501
We can't comment
about future offerings,

00:45:37.501 --> 00:45:40.000
but that's not the case
right now.

00:45:40.000 --> 00:45:42.234
And the third one I think
was about storing metadata.

00:45:42.234 --> 00:45:43.434
Was that right?

00:45:43.434 --> 00:45:44.868
man: Along with
each individual file.

00:45:44.868 --> 00:45:46.701
Schwartz:
Yeah, so you can store

00:45:46.701 --> 00:45:48.934
limited amounts of metadata.

00:45:48.934 --> 00:45:51.033
You can actually
set headers on objects

00:45:51.033 --> 00:45:53.601
when you PUT the object,

00:45:53.601 --> 00:45:55.634
and you can only do that
when you create an object.

00:45:55.634 --> 00:45:58.667
The objects are immutable,

00:45:58.667 --> 00:46:01.067
so you can't take an object
and then, you know,

00:46:01.067 --> 00:46:02.167
overwrite parts of it.

00:46:02.167 --> 00:46:04.501
You just write an object
with the headers.

00:46:04.501 --> 00:46:05.901
man:
Thank you.

00:46:05.901 --> 00:46:07.801
Joneja: So, can I build
on your second answer as well,

00:46:07.801 --> 00:46:09.901
just to your question
about storing data encrypted?

00:46:09.901 --> 00:46:12.434
So, you know, I--
I do want to, you know--

00:46:12.434 --> 00:46:15.567
a specific call out
that we do take, you know,

00:46:15.567 --> 00:46:17.834
strong security precautions
with your data.

00:46:17.834 --> 00:46:19.767
You know, you've probably
seen the video of us

00:46:19.767 --> 00:46:21.000
destroying
our hard drives, right?

00:46:21.000 --> 00:46:22.400
There's one on YouTube.

00:46:22.400 --> 00:46:24.400
But, you know, in general,
the data store encoded,

00:46:24.400 --> 00:46:25.901
so even if you got hold
of a hard drive,

00:46:25.901 --> 00:46:27.601
you wouldn't be able to do
anything with it,

00:46:27.601 --> 00:46:28.734
but it's not encrypted.

00:46:28.734 --> 00:46:32.300
Like, it's not
strongly encrypted.

00:46:32.300 --> 00:46:35.000
man: Hi. I have a question
about the business model.

00:46:35.000 --> 00:46:36.400
Does it support MSPs,

00:46:36.400 --> 00:46:41.567
or if I'm a third-party data
management provider,

00:46:41.567 --> 00:46:44.567
is there a support for
that kind of a business model,

00:46:44.567 --> 00:46:46.267
in terms of whether
it be pricing

00:46:46.267 --> 00:46:49.167
or how we control
credentials,

00:46:49.167 --> 00:46:51.400
and do we have to set up
a different account

00:46:51.400 --> 00:46:54.234
for every customer that we have
or client of ours?

00:46:54.234 --> 00:46:56.634
Schwartz:
Why don't you go on that one?

00:46:56.634 --> 00:46:58.834
Joneja: Could you just help me
understand the scenario again,

00:46:58.834 --> 00:47:00.367
one more time?

00:47:00.367 --> 00:47:04.734
man: So, for example, if I'm
a data management vendor...

00:47:04.734 --> 00:47:06.000
Joneja:
Mm-hmm.

00:47:06.000 --> 00:47:10.200
man: ...and I want to provide
data services for,

00:47:10.200 --> 00:47:11.501
you know,
my client bases.

00:47:11.501 --> 00:47:13.100
Joneja: Mm-hmm.
man: I have 100 customers.

00:47:13.100 --> 00:47:14.601
Is there a business model
that supports that,

00:47:14.601 --> 00:47:16.200
or do I have to set up--

00:47:16.200 --> 00:47:17.701
Is it going to be like
a brute force

00:47:17.701 --> 00:47:20.634
of different accounts
for each customer,

00:47:20.634 --> 00:47:22.801
or do they have to do it
for themselves,

00:47:22.801 --> 00:47:24.434
or can I do it for them?

00:47:24.434 --> 00:47:26.234
Joneja: That's a great question,
and, in fact,

00:47:26.234 --> 00:47:28.400
let's talk after the session,
and I'd like to understand more

00:47:28.400 --> 00:47:29.734
about what you're trying to do,

00:47:29.734 --> 00:47:32.667
and we'll see if there's
something we can do.

00:47:32.667 --> 00:47:34.901
man: You talked
about using your home data

00:47:34.901 --> 00:47:36.334
and synching it
to Google Storage.

00:47:36.334 --> 00:47:38.067
Are you using, like,
rsync or anything to keep

00:47:38.067 --> 00:47:40.601
that data synchronized,
or is that a possibility yet?

00:47:40.601 --> 00:47:42.801
Schwartz:
It's not using rsync.

00:47:42.801 --> 00:47:45.734
There are
third-party tools available

00:47:45.734 --> 00:47:47.534
that do a form
of synchronization.

00:47:47.534 --> 00:47:52.734
They look at time stamps and--
and MD5s and ETags.

00:47:52.734 --> 00:47:55.868
I think the one I use
is S3Sync.

00:47:55.868 --> 00:47:57.667
Yeah, but it's not using rsync.

00:47:57.667 --> 00:47:59.234
It's not that protocol.
man: Okay.

00:47:59.234 --> 00:48:00.367
Schwartz: Yeah.
man: Thank you.

00:48:00.367 --> 00:48:01.734
Schwartz:
Yeah, and actually,

00:48:01.734 --> 00:48:04.067
I think there are also
some other third-party tools

00:48:04.067 --> 00:48:05.400
that are out there

00:48:05.400 --> 00:48:07.467
that work with Google Storage
that give you

00:48:07.467 --> 00:48:13.033
a nicer, kind of gooey interface
for doing synchronization.

00:48:13.033 --> 00:48:14.901
Any other questions?

00:48:14.901 --> 00:48:17.300
Okay, well, if not, we're going
to stick around for a while,

00:48:17.300 --> 00:48:18.934
if anyone wants to come
talk to us individually,

00:48:18.934 --> 00:48:21.634
or feel free to come grab us
out in the halls,

00:48:21.634 --> 00:48:23.234
and thanks again for coming.

00:48:23.234 --> 00:48:24.834
[applause]

