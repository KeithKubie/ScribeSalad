WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:09.580
&gt;&gt; VAKIL: So, my name is Sanjay Vakil. I am
the founder of LuckyCal. And LuckyCal is an

00:00:09.580 --> 00:00:13.280
application that works with calendar services.
So, the best way to tell you about it is,

00:00:13.280 --> 00:00:17.260
to tell you a story, what, what happened is
when I was coming to this conference, I went

00:00:17.260 --> 00:00:21.740
and put in my calendar, Google I/O, at the
Moscone Center in San Francisco. And what

00:00:21.740 --> 00:00:25.789
LuckyCal did id looked at, figured out where
San Francisco was and then it went to Facebook

00:00:25.789 --> 00:00:29.500
and a couple of other places and figure out
where my friends were that lived in the San

00:00:29.500 --> 00:00:33.730
Francisco area. I put them on map for me.
And then, and this is really cool. It looked

00:00:33.730 --> 00:00:38.110
at my iTunes data and it said, “These are
bands that are playing in the San Francisco

00:00:38.110 --> 00:00:41.280
area while you’re there.” And it actually
found that the Prodigy is playing here tonight.

00:00:41.280 --> 00:00:45.050
Unfortunately, I'm not going to get to see
the show because I'm on the red eye. So, it

00:00:45.050 --> 00:00:48.559
looks at the calendar information and then
figures out where it's going to be and figures

00:00:48.559 --> 00:00:52.940
out other stuff you can or should be doing
while you’re there.

00:00:52.940 --> 00:01:01.329
&gt;&gt; MALE: So, you chose this calendar API to
create your App. Can you tell us a little

00:01:01.329 --> 00:01:04.309
bit about how you came to this technical decision
to do that?

00:01:04.309 --> 00:01:08.030
&gt;&gt; VAKIL: So, it turns out Calendars are a
funny part of the worlds where there’s a

00:01:08.030 --> 00:01:11.579
tremendous number of people using them, there’s
a lot of interested in them, but nothing really

00:01:11.579 --> 00:01:15.950
co0ol as happened for a very long time there.
Google Calendar sort of came out of the blue

00:01:15.950 --> 00:01:19.850
and allowed you to do things with calendars
that most other calendar clients simply don’t

00:01:19.850 --> 00:01:24.700
allow you to do. A couple of them are that
it allows you to put events back up on someone’s

00:01:24.700 --> 00:01:28.409
calendar for them to see. And that’s a capability
that sort of fundamental to what LuckyCal

00:01:28.409 --> 00:01:31.810
does. We don’t want to pollute your calendar
necessarily with these new events. And so

00:01:31.810 --> 00:01:37.490
we create an independent calendar, personalized
to you and allow you access to that. And Google

00:01:37.490 --> 00:01:40.491
Calendar allows us to do that very efficiently.
I'm trying to do another calendar clients

00:01:40.491 --> 00:01:57.340
has been a bit of a challenge.
&gt;&gt; MALE: So as developers, we’re really

00:01:57.340 --> 00:01:58.340
valued being able to share “war stories”
and lessons for technical challenges. Can

00:01:58.340 --> 00:01:59.340
you tell us about one particular difficult
period of development that you face and you

00:01:59.340 --> 00:02:00.340
how you approach this technical challenge?
&gt;&gt; VAKIL: So, the technical challenge I faced

00:02:00.340 --> 00:02:03.310
was actually on a slightly different project,
but it was all Google Calendar anyhow. We

00:02:03.310 --> 00:02:07.849
were actually one of the first people to build
a calendar, a gadget, a straight up iGoogle

00:02:07.849 --> 00:02:13.189
gadget. This was a couple of years ago now.
And it turns that the, what gadgets really

00:02:13.189 --> 00:02:18.760
want to be are a single URL that everybody
talks to, a single location to be installed

00:02:18.760 --> 00:02:23.209
in a way they go. Unfortunately, this doesn’t
allow you any mechanism for personalization.

00:02:23.209 --> 00:02:26.150
So what we ended up doing, I had this moment
where suddenly the clouds parted and I realized

00:02:26.150 --> 00:02:31.110
it’s, everything is just a URL, that the
Gadgets are just URLs. And so I constructed

00:02:31.110 --> 00:02:36.109
a URL on the fly which was specific to the
user in question. And then we’d look up

00:02:36.109 --> 00:02:40.829
their credentials based on that. And what
I’ve learned since then is that the Gadget

00:02:40.829 --> 00:02:44.209
actually is fairly popular. It had tens of
thousands of users. And instead of being a

00:02:44.209 --> 00:02:49.150
single entry in the Google Gadget database,
it ended up being a 30,000 entries because

00:02:49.150 --> 00:02:53.420
each of them was a unique URL, but it worked
beautifully. People are very happy with it.

00:02:53.420 --> 00:02:58.700
So, the Ambien clock which never actually
got built, but the software prototype of it

00:02:58.700 --> 00:03:10.051
is actually still up and running.
&gt;&gt; MALE: So, what are the benefits to your

00:03:10.051 --> 00:03:11.051
App of using the Calendar API?
&gt;&gt; VAKIL: So the benefits to our App for using

00:03:11.051 --> 00:03:16.659
the Calendar API, there’s a couple of them,
I want to focus on one which is that calendars

00:03:16.659 --> 00:03:21.090
are sort of gnarly beasts that have a lot
of history to them. And in particular, one

00:03:21.090 --> 00:03:25.239
of the places that they’re a little dodgy
is dealing with repeating events. So, repeating

00:03:25.239 --> 00:03:28.780
events are, I do this every Tuesday or I do
this every, you know, third Wednesday of the

00:03:28.780 --> 00:03:34.489
month. And there’s a language that’s been
created for calendars to describe this, they're

00:03:34.489 --> 00:03:39.299
called, “R Rules, Repeating Rules.” And
they’re used by, by the iCal standard which

00:03:39.299 --> 00:03:46.120
is actually RFC 24/45. It’s awful. It’s
a terrible gnarly thing to try and implement.

00:03:46.120 --> 00:03:49.750
It’s full of edged cases. It’s full of
weird conditions. Different client deals with

00:03:49.750 --> 00:03:53.150
it differently. The repeating rules are slightly
offs. So you can have stuff like, “I want

00:03:53.150 --> 00:03:56.060
to have this on every Tuesday, oh, but this
is Christmas, so I'm going to delete just

00:03:56.060 --> 00:04:00.889
this event.” Dealing with those sort of
edged cases has been, it's sort of a very

00:04:00.889 --> 00:04:04.700
tricky thing to deal with. One of the nice
things about the, in particular, the Calendar

00:04:04.700 --> 00:04:10.180
Date API is there are different views of the
feeds that are available. And one of the feeds

00:04:10.180 --> 00:04:16.030
is just, do all the work for me. Just tell
me what it is that I need to do during this

00:04:16.030 --> 00:04:20.650
window of time? What events actually fall
during this window of time? And using that

00:04:20.650 --> 00:04:25.340
truly does a tremendous amount of work because
we throw all of the decoding of this bizarre

00:04:25.340 --> 00:04:28.560
language over to the Google servers and let
them do the hard work and we just get the

00:04:28.560 --> 00:04:40.212
answers back.
&gt;&gt; MALE: So, how has using the Calendar API

00:04:40.212 --> 00:04:42.660
reduce the amount of work for you? And could
you please elaborate on how this is happening?

00:04:42.660 --> 00:04:46.460
&gt;&gt; VAKIL: So, the amount of work that we’ve
had to do to make LuckyCal work in the Google

00:04:46.460 --> 00:04:49.509
Calendar environment is significantly less
than we’ve had to do working with other

00:04:49.509 --> 00:04:52.569
calendar clients. You know, it’s a little
funny, people think of calendar and they immediately

00:04:52.569 --> 00:04:56.370
think, my Calendar is outlook or my calendar
is Google Calendar. We tend to view the world

00:04:56.370 --> 00:05:00.699
as having calendar clients and then calendar
the data much like you have a web clients

00:05:00.699 --> 00:05:04.910
and web data. The Google Calendar clients
has been by far the easiest to work with in

00:05:04.910 --> 00:05:09.259
a way that it is secure which is important
because Calendar Data is intensely personal.

00:05:09.259 --> 00:05:14.370
And in a way that allows us to do some do
some fairly advance stuff. As a particular

00:05:14.370 --> 00:05:19.300
example, because it’s a web native client,
we can actually turn around and place links

00:05:19.300 --> 00:05:22.919
in the events. So, you can see the event,
it can have a map in it, it can have a link

00:05:22.919 --> 00:05:27.770
out to additional things that are going on
in town. We can, you know, a semi structured

00:05:27.770 --> 00:05:33.020
rich event there. And that capability simple
isn’t available in other calendar clients.

00:05:33.020 --> 00:05:37.190
So that sort of capability is one of the things
we take advantage of a lot.

00:05:37.190 --> 00:05:44.380
&gt;&gt; MALE: Okay. So, my last question is, do
you have any future suggestions or things

00:05:44.380 --> 00:05:46.860
you’d like to see in the Calendar API?
&gt;&gt; VAKIL: So stuff I'd love to see in the

00:05:46.860 --> 00:05:50.979
Calendar API, you know, one of the things
that LuckyCal is pushing toward is to make

00:05:50.979 --> 00:05:54.860
interactive with the calendar, a conversation
rather than being simply a dead repository

00:05:54.860 --> 00:05:58.669
data. I wanted to be the case that when I
say I'm going to San Francisco, I don’t

00:05:58.669 --> 00:06:01.410
just get a reminder the night before saying,
“Hey dude, you’re going to San Francisco

00:06:01.410 --> 00:06:04.611
tomorrow.” I want to have, I want to go
out and tell me, “Hey, this is what’s

00:06:04.611 --> 00:06:07.099
going on there, this is what’s, you know,
these are bands that are playing, these are

00:06:07.099 --> 00:06:09.850
friends that’ll be there, these are contacts
to be there, customers that will be there

00:06:09.850 --> 00:06:14.250
and so on. And LuckyCal does all that but
there’s a latency involved and it generating

00:06:14.250 --> 00:06:19.270
that information which is based on how quickly
we can get updated, newly created and modified

00:06:19.270 --> 00:06:24.120
events from Google Calendar out to our servers
to do that processing. So one of the things

00:06:24.120 --> 00:06:29.500
that’d be tremendous for us is real time
notification when an event changes or when

00:06:29.500 --> 00:06:33.409
a new event is constructed. And whether that’s
an XMPP stream or it’s a pink server running

00:06:33.409 --> 00:06:37.500
around, it doesn’t really matter. But I'd
love for the conversation to actually become

00:06:37.500 --> 00:06:41.389
close to real time. I'd love to have a situation
where, you know, I type in a change to my

00:06:41.389 --> 00:06:46.940
schedule and seconds later, ideally, sub-seconds
later, I can come back with the response and

00:06:46.940 --> 00:06:50.350
I say, “Oh, if you’re going on this week,
you know, the Socks are going to be playing.

00:06:50.350 --> 00:06:53.659
Do you want to get tickets to that?” If
I move the event three days earlier, I’ll

00:06:53.659 --> 00:06:56.860
find that I can’t get tickets to the game
and I’ll, you know, book a different trip.

00:06:56.860 --> 00:07:01.379
That sort of interactivity is going to require
something a step beyond what the calendar

00:07:01.379 --> 00:07:04.939
and fundamentally the GData APIs provide right
now.

00:07:04.939 --> 00:07:08.490
&gt;&gt; MALE: Okay. Well, thank you so much for
your time.

00:07:08.490 --> 00:07:08.500
&gt;&gt; VAKIL: Yeah, thank you.

