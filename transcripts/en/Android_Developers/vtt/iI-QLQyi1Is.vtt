WEBVTT
Kind: captions
Language: en

00:00:05.700 --> 00:00:08.320
QQ Music has been continuously pursuing breakthroughs

00:00:08.440 --> 00:00:11.740
I think this is the reason why it has been so popular for almost a decade

00:00:12.380 --> 00:00:15.700
I'm Abao, lead of the Android platform group

00:00:15.800 --> 00:00:20.360
Every breakthrough is inseparable from
the support of creativity, R&amp;D, and platform

00:00:20.360 --> 00:00:22.360
so our team has been paying close attention to

00:00:22.360 --> 00:00:25.280
Google's technological evolvement and updates on Android

00:00:25.400 --> 00:00:29.080
and strives to let our users enjoy the new system features
as soon as possible

00:00:29.080 --> 00:00:31.640
Our team led the current version adaptation

00:00:31.800 --> 00:00:33.960
of QQ music for Android 9

00:00:36.240 --> 00:00:37.360
I'm Shawn

00:00:37.360 --> 00:00:39.360
the engineer responsible for Android 9 adaptation

00:00:39.360 --> 00:00:41.460
We began to pay attention to the behavioral changes

00:00:41.460 --> 00:00:43.460
and new features from DP1

00:00:43.460 --> 00:00:46.140
and officially started the adaptation since DP2

00:00:46.460 --> 00:00:47.980
New features such as edge-to-edge screen support

00:00:47.980 --> 00:00:51.100
and native system notification style

00:00:51.460 --> 00:00:54.420
have allowed our users to feel the evolution of the platform

00:00:54.420 --> 00:00:55.860
Especially the latter

00:00:55.860 --> 00:00:58.280
we received a lot of positive feedbacks

00:00:58.280 --> 00:00:59.540
from the users who had experienced the native notification

00:00:59.800 --> 00:01:01.460
From the developer's perspective

00:01:01.460 --> 00:01:04.780
Android Studio has also become better and more powerful

00:01:05.160 --> 00:01:08.900
Memory Profiler makes it easier to analyze memory

00:01:09.100 --> 00:01:12.580
and we can monitor JNI memory allocation in real-time

00:01:12.720 --> 00:01:15.640
With the help of Android Studio
reducing memory usage has become a lot easier

00:01:16.740 --> 00:01:21.080
Music apps usually have a foreground process
and a background playback process

00:01:21.080 --> 00:01:24.080
To meet the background execution restrictions of Android 9

00:01:24.080 --> 00:01:26.260
these two processes need to be modified

00:01:26.480 --> 00:01:31.480
We analyzed the data transmission and interface calls
between the two processes

00:01:31.480 --> 00:01:34.360
and finally met not only the restrictions of background execution

00:01:34.360 --> 00:01:37.940
but also eliminated excessive wake-ups

00:01:38.180 --> 00:01:42.200
In some scenarios, RAM usage can be reduced by more than 50%

00:01:42.200 --> 00:01:45.100
We have been paying attention to Kotlin for awhile

00:01:45.100 --> 00:01:48.940
The new features in the current project are
mostly written in Kotlin language

00:01:49.100 --> 00:01:51.100
This brings a lot of benefits to our development:

00:01:51.220 --> 00:01:54.540
the average number of lines of code
can be reduced by as much as 25%

00:01:54.760 --> 00:01:57.920
and errors like NullPointerExpection can also
be reduced by around 50%

00:01:57.920 --> 00:02:01.980
We believe that in the future
the usage of Kotlin will proliferate in our projects

00:02:01.980 --> 00:02:05.680
With powerful toolchain and strong developer community support

00:02:05.680 --> 00:02:08.600
we believe that Android will keep bringing us more security

00:02:08.600 --> 00:02:14.080
better system behavior, lower power consumption
and greater user experience

00:02:14.460 --> 00:02:18.500
With the help of an ever-evolving
and open platform like Android

00:02:18.680 --> 00:02:22.460
QQ Music will continue to bring users
a fantastic music experience

