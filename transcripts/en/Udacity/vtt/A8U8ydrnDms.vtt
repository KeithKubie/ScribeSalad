WEBVTT
Kind: captions
Language: en

00:00:00.450 --> 00:00:04.059
But, the most fundamental
assumption of Lucas-Kanade, or

00:00:04.059 --> 00:00:06.680
at least the one that in some
sense is most problematic yet,

00:00:06.680 --> 00:00:12.410
fixable is this idea that we can use
that Taylor series approximation.

00:00:12.410 --> 00:00:15.755
So, the idea of that Taylor series
approximation is that we can make

00:00:15.755 --> 00:00:20.435
a small ramp estimate that is the first
linear first order linear estimate.

00:00:20.435 --> 00:00:24.705
And then as things move a little bit,
that'll tell us how things change.

00:00:24.705 --> 00:00:26.635
And, we've gone over one method.

00:00:26.635 --> 00:00:29.545
We talked about non-linear
iterative refinements.

00:00:29.545 --> 00:00:32.340
So that if it's, if it's still the right

00:00:32.340 --> 00:00:35.700
model in terms of the point nearby
is changing, but it's not linear.

00:00:35.700 --> 00:00:37.720
Maybe it's quadratic or something.

00:00:37.720 --> 00:00:40.420
We use a bunch of linear
successive approximations.

00:00:41.620 --> 00:00:45.230
But actually, that's not the problem
that exists mall, most often.

00:00:45.230 --> 00:00:50.310
The one that exists most often is that,
actually, pixel motion is not small.

00:00:50.310 --> 00:00:54.290
And so, you can't just assume that you
can tell how things have changed by just

00:00:54.290 --> 00:00:56.270
doing a very local analysis.

00:00:56.270 --> 00:00:57.560
So to solve that,

00:00:57.560 --> 00:01:00.890
we have to do something called
coarse-to-fine estimation.

00:01:00.890 --> 00:01:03.470
To illustrate what I mean,
here's a, a simple example.

00:01:03.470 --> 00:01:08.070
So, here you see on this one,
on the left side,

00:01:08.070 --> 00:01:12.090
I have curves that have been
shifted by only a small amount.

00:01:12.090 --> 00:01:14.017
So, when I find one point value,

00:01:14.017 --> 00:01:16.983
the nearest match is actually
the correct displacement.

00:01:16.983 --> 00:01:21.730
So, they actually fit
a little slope through here.

00:01:21.730 --> 00:01:25.340
I can do my local estimate, and I'll
eventually find the, the correct match.

00:01:26.340 --> 00:01:28.540
But over here,
I've got a different situation.

00:01:28.540 --> 00:01:33.160
So, there is one point, the nearest
match will now be this red point.

00:01:33.160 --> 00:01:36.280
All right?
So, it basically has just estimated

00:01:36.280 --> 00:01:38.550
the change to be that much.

00:01:38.550 --> 00:01:39.110
All right?

00:01:39.110 --> 00:01:42.540
Where the actual shift of course,
is much, much more.

00:01:42.540 --> 00:01:43.260
All right?

00:01:43.260 --> 00:01:46.180
And so, the estimated shift is,
is too small.

00:01:46.180 --> 00:01:49.030
So, the question is how
would you fix that?

00:01:49.030 --> 00:01:51.390
So, let's take a look at
this on a real picture.

00:01:51.390 --> 00:01:53.310
So, here's an example
on some real pictures.

00:01:53.310 --> 00:01:57.180
So, this is two frames taken out
of the MPEG garden sequence.

00:01:57.180 --> 00:01:59.710
And, what you can see is
that I've got one frame, and

00:01:59.710 --> 00:02:02.220
then the next frame the tree
moves to the left quite a bit

00:02:02.220 --> 00:02:04.410
because the camera has
moved to the right.

00:02:04.410 --> 00:02:06.790
And, you can see the tree in the front
is occluding the tree in the back.

00:02:06.790 --> 00:02:08.210
Okay, so question.

00:02:08.210 --> 00:02:13.833
Do you think that this is a small enough
motion to be able to run Lucas- Kanade?

00:02:13.833 --> 00:02:16.620
No, look,
there's a lot more than one pixel or

00:02:16.620 --> 00:02:20.750
a small number of pixel motion
with a planar assumption between.

00:02:20.750 --> 00:02:23.833
I'm cov, I'm covering entire
trees in the background.

00:02:23.833 --> 00:02:24.583
All right?

00:02:24.583 --> 00:02:28.958
So, the problem is, you know,
how could we solve this, right?

00:02:28.958 --> 00:02:32.750
How could we eliminate this
problem of large pixel motion?

00:02:32.750 --> 00:02:34.970
And, I'm going to show
you with a single slide.

00:02:34.970 --> 00:02:37.680
You're going to look at it,
you're going to go, aha!

00:02:37.680 --> 00:02:38.840
I get it.

00:02:38.840 --> 00:02:40.080
Ready?

00:02:40.080 --> 00:02:40.820
Now.

00:02:40.820 --> 00:02:41.790
&gt;&gt; Aha!
I get it.

00:02:41.790 --> 00:02:42.436
&gt;&gt; What do you get?

00:02:44.955 --> 00:02:46.420
&gt;&gt; Okay, here's what you got.

00:02:46.420 --> 00:02:50.250
In the top left corner is
the original sequence, all right?

00:02:50.250 --> 00:02:52.980
And, you can see that the thing is
moving a whole bunch of pixels.

00:02:52.980 --> 00:02:56.220
I don't know,
maybe it's moving let's call it Sep.

00:02:56.220 --> 00:03:00.380
On the top, right you'll notice
the picture is drawn the same size, but

00:03:00.380 --> 00:03:03.030
I've actually reduced
the pixels in half.

00:03:03.030 --> 00:03:06.230
So now, it says there's, like,
90 pixels across, right.

00:03:06.230 --> 00:03:07.670
Before, there was something like 180.

00:03:07.670 --> 00:03:10.750
Well, gee,
if I was moving seven pixels before,

00:03:10.750 --> 00:03:12.870
now I'd only be moving three and
a half pixels.

00:03:15.050 --> 00:03:16.230
Do it again.

00:03:16.230 --> 00:03:18.430
Now, I've only got 45ish pixels.

00:03:18.430 --> 00:03:19.610
Bottom left hand corner.

00:03:19.610 --> 00:03:22.360
Now instead of moving three and a half
half of three and a half is one, one and

00:03:22.360 --> 00:03:23.370
three quarters.

00:03:23.370 --> 00:03:24.964
Okay?
That's still more than one, isn't it?

00:03:24.964 --> 00:03:27.300
Yes.

00:03:27.300 --> 00:03:27.880
Okay.

00:03:27.880 --> 00:03:29.390
Well, cut it in half again.

00:03:29.390 --> 00:03:31.250
So now,
I have this picture on the bottom right.

00:03:31.250 --> 00:03:33.761
And if you look at that animation,
you'll see,

00:03:33.761 --> 00:03:36.280
you can sort of see it
shifting within the pixels.

00:03:36.280 --> 00:03:39.380
It's actually less than
a one pixel motion.

00:03:39.380 --> 00:03:40.740
Okay?
It's a very blurry picture, and

00:03:40.740 --> 00:03:42.250
I had to make it really, blow it up, and

00:03:42.250 --> 00:03:44.400
now you can actually see
each pixel in there.

00:03:44.400 --> 00:03:48.280
But, you can see that the motion
is a sub-pixel motion.

00:03:48.280 --> 00:03:51.780
So basically, what we want to
do is we want to implement

00:03:51.780 --> 00:03:56.610
a motion recovery method that
takes this coarse image.

00:03:56.610 --> 00:03:59.240
And then iteratively, or

00:03:59.240 --> 00:04:02.540
I should say multi-scalewise,
goes to a finer and finer image.

