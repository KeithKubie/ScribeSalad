WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:11.124
[MUSIC PLAYING]

00:00:11.124 --> 00:00:12.790
MANFRED ZABARAUSKAS:
My name is Manfred.

00:00:12.790 --> 00:00:14.830
I'm here today with Rajeev.

00:00:14.830 --> 00:00:17.890
And we're going to talk about
building cloud-powered Android

00:00:17.890 --> 00:00:19.940
applications.

00:00:19.940 --> 00:00:23.430
So this is going to be
very much a hands-on demo.

00:00:23.430 --> 00:00:26.300
We're actually going
to take an application,

00:00:26.300 --> 00:00:31.290
write it back and forth
now, live, in 15 minutes.

00:00:31.290 --> 00:00:33.540
And we're also going to give
you a bit of introduction

00:00:33.540 --> 00:00:34.510
before we do that.

00:00:34.510 --> 00:00:36.650
And then we're going
to talk about some

00:00:36.650 --> 00:00:38.100
of the future directions.

00:00:38.100 --> 00:00:40.210
And we'll try to
leave a minute or two

00:00:40.210 --> 00:00:42.580
for questions and answers.

00:00:42.580 --> 00:00:45.360
So let's start with an overview.

00:00:45.360 --> 00:00:48.440
For this demo, we're going to be
using Android Studio and Google

00:00:48.440 --> 00:00:49.520
Cloud Endpoints.

00:00:49.520 --> 00:00:53.200
And let me just give a quick
overview of each of these.

00:00:53.200 --> 00:00:56.060
So Android Studio is
an open source ID.

00:00:56.060 --> 00:00:57.850
It's built for Android.

00:00:57.850 --> 00:01:00.980
And it's based on
an IntelliJ IDEA.

00:01:00.980 --> 00:01:04.459
Now, what that means is that
it has a lot of good coding

00:01:04.459 --> 00:01:08.280
assistance tools to help
you write quality Java code.

00:01:08.280 --> 00:01:11.990
So things like context aware,
code completion, and the chain

00:01:11.990 --> 00:01:15.640
method autocompletion,
optimizing the imports,

00:01:15.640 --> 00:01:18.800
built-in spell checker, all
of that kind of nice stuff.

00:01:18.800 --> 00:01:22.057
It also has a nice integrated
visual and layout designer,

00:01:22.057 --> 00:01:23.640
which means that you
can drag and drop

00:01:23.640 --> 00:01:26.420
visual elements into your app.

00:01:26.420 --> 00:01:29.550
And it also comes with a whole
bunch of static code analysis

00:01:29.550 --> 00:01:30.130
tools.

00:01:30.130 --> 00:01:31.390
We call them linters.

00:01:31.390 --> 00:01:34.590
I think that's how they're
known in the industry as well.

00:01:34.590 --> 00:01:36.510
And they help you to
build quality apps.

00:01:36.510 --> 00:01:38.990
So can check things
like simple security

00:01:38.990 --> 00:01:42.680
issues and compatibility issues,
all of that kind of things.

00:01:42.680 --> 00:01:44.280
And finally, Android
Studio is very

00:01:44.280 --> 00:01:47.060
well-integrated
with Gradle build.

00:01:47.060 --> 00:01:51.430
Which means that you can use
the same build files and build

00:01:51.430 --> 00:01:56.170
setup for ID, command line,
your continuous integration

00:01:56.170 --> 00:01:58.120
server, all of these things.

00:01:58.120 --> 00:01:59.020
So that's one half.

00:01:59.020 --> 00:02:01.710
Now, the other half is
Google Cloud Endpoints.

00:02:01.710 --> 00:02:03.500
And what Google Cloud
Endpoints points do

00:02:03.500 --> 00:02:06.160
is they provide
a very simple way

00:02:06.160 --> 00:02:09.190
to build server-side
logic for your apps

00:02:09.190 --> 00:02:11.410
on Google App Engine Platform.

00:02:11.410 --> 00:02:13.410
And since it's
running on App Engine,

00:02:13.410 --> 00:02:16.211
it's benefiting from
all of these things

00:02:16.211 --> 00:02:18.210
that we just spoke about
throughout the day-- so

00:02:18.210 --> 00:02:22.500
auto scaling, high availability,
all of those nicenesses.

00:02:22.500 --> 00:02:24.810
So this is how a basic
architecture looks like.

00:02:24.810 --> 00:02:27.719
You have a backend running
on App Engine instances.

00:02:27.719 --> 00:02:29.760
And then you have Google
Cloud Endpoints clients.

00:02:29.760 --> 00:02:33.770
And one thing that Endpoints
does for you is they

00:02:33.770 --> 00:02:36.730
take the plumbing out
of API programming

00:02:36.730 --> 00:02:41.100
by, for example, marshaling
Java objects into JSON objects,

00:02:41.100 --> 00:02:45.490
providing rest APIs from
your annotated Java code.

00:02:45.490 --> 00:02:49.200
Another thing that the Google
Cloud Endpoints does for you

00:02:49.200 --> 00:02:52.670
is, they take the complexity
out of multi-client development.

00:02:52.670 --> 00:02:57.130
So I understand that while
you might be targeting Android

00:02:57.130 --> 00:03:01.020
as a primary distribution
source, there's also iOS,

00:03:01.020 --> 00:03:02.430
and there's JavaScript.

00:03:02.430 --> 00:03:04.355
And so you can automatically
generate strongly

00:03:04.355 --> 00:03:08.640
tied client libraries
for those platforms.

00:03:08.640 --> 00:03:11.370
And then, finally, Endpoints
also take the risk out of API

00:03:11.370 --> 00:03:14.790
development in the sense
that there is out-of-the-box,

00:03:14.790 --> 00:03:17.880
built-in denial of
service protection.

00:03:17.880 --> 00:03:21.430
There is support for all of 2.0.

00:03:21.430 --> 00:03:24.030
And there's also support
for things like client

00:03:24.030 --> 00:03:25.896
key management and so on.

00:03:25.896 --> 00:03:27.770
So anyway, when you
combine these two things,

00:03:27.770 --> 00:03:29.590
you get something
that's even better.

00:03:29.590 --> 00:03:33.740
And so, in my mind, Android
Studio plus Cloud Endpoints

00:03:33.740 --> 00:03:36.800
is the easiest way
for mobile developers

00:03:36.800 --> 00:03:38.960
to get to Google Cloud platform.

00:03:38.960 --> 00:03:40.710
And we have a whole
bunch of functionality

00:03:40.710 --> 00:03:43.840
in Android Studio which
help you do just that.

00:03:43.840 --> 00:03:46.220
So you can create
App Engine backends.

00:03:46.220 --> 00:03:49.120
You can generate strongly
tied client libraries.

00:03:49.120 --> 00:03:52.070
There are also a bunch of
quick fixes, and as you

00:03:52.070 --> 00:03:55.755
type validations for when you're
developing the actual API.

00:03:55.755 --> 00:03:57.380
And we're going to
show you all of this

00:03:57.380 --> 00:04:00.377
during the demo in the
next 15 minutes or so.

00:04:00.377 --> 00:04:02.460
And one thing I would just
like to mention as well

00:04:02.460 --> 00:04:05.990
is that it's all using
Gradle as a build system,

00:04:05.990 --> 00:04:09.590
so it's very well tied
together and unified

00:04:09.590 --> 00:04:12.920
build across the command
line, across IDEA

00:04:12.920 --> 00:04:15.980
for both the backend
and the front end.

00:04:15.980 --> 00:04:18.810
So let's jump into the demo.

00:04:18.810 --> 00:04:23.362
And we were thinking you've
seen a lot of cool demos today.

00:04:23.362 --> 00:04:24.820
We were thinking,
what is something

00:04:24.820 --> 00:04:28.040
cool that we could
show to you guys?

00:04:28.040 --> 00:04:30.430
And first, we wanted to
show our own application,

00:04:30.430 --> 00:04:32.710
just write something
from scratch.

00:04:32.710 --> 00:04:36.360
But then we thought,
is that necessary?

00:04:36.360 --> 00:04:37.300
And we found this.

00:04:37.300 --> 00:04:40.420
We found the Todo.txt app,
which is a simple to-do task

00:04:40.420 --> 00:04:41.860
management app.

00:04:41.860 --> 00:04:43.220
It's on Play Store.

00:04:43.220 --> 00:04:45.360
It's loved by Play Store users.

00:04:45.360 --> 00:04:49.060
And it's using a different
cloud provider for the backend.

00:04:49.060 --> 00:04:52.100
So let me just show you
the app, if we can just

00:04:52.100 --> 00:04:55.170
cut to the mobile device.

00:04:55.170 --> 00:04:57.620
This is the Todo.txt app.

00:04:57.620 --> 00:04:59.560
As you can see, it
does all of the things

00:04:59.560 --> 00:05:02.600
that you would expect
from a to-do app.

00:05:02.600 --> 00:05:03.700
You can add a task.

00:05:03.700 --> 00:05:05.190
You can mark a task as done.

00:05:08.280 --> 00:05:12.630
Nothing groundbreaking,
but it's a nice little app.

00:05:12.630 --> 00:05:15.130
Now, if we could cut back to
the slides for one more second.

00:05:18.460 --> 00:05:20.830
Best of all, the
app is open source.

00:05:20.830 --> 00:05:23.960
So we thought,
let's take the app.

00:05:23.960 --> 00:05:26.780
Let's remove the different
cloud provider backend,

00:05:26.780 --> 00:05:29.620
and let's add our own
cloud backend to it.

00:05:29.620 --> 00:05:30.960
So let's cut back to the device.

00:05:34.840 --> 00:05:36.740
This is exactly what we've done.

00:05:36.740 --> 00:05:39.760
So, again, this
is a Todo.txt app.

00:05:39.760 --> 00:05:43.550
But now instead of using a
different cloud provider,

00:05:43.550 --> 00:05:45.580
it's using Google
Cloud Platform.

00:05:45.580 --> 00:05:49.950
And so, again, as you would
expect, I can add a task.

00:05:49.950 --> 00:05:53.930
Sorry, I'm going to try to add
a task during the demo, which--

00:05:53.930 --> 00:05:55.890
Hero demo.

00:05:55.890 --> 00:05:56.940
Sure, why not?

00:05:56.940 --> 00:05:59.400
Good enough.

00:05:59.400 --> 00:06:02.074
Yeah, so it works as expected.

00:06:02.074 --> 00:06:03.740
And let's cut back
to the slide, please.

00:06:06.280 --> 00:06:08.680
And in fact, it was
so simple and so easy

00:06:08.680 --> 00:06:12.430
to do this transition from
taking an existing app

00:06:12.430 --> 00:06:15.415
and adding a Google Cloud
Platform backend to it

00:06:15.415 --> 00:06:17.040
that we're going to
show you right now,

00:06:17.040 --> 00:06:20.280
live-- again, submitting
to demo gods--

00:06:20.280 --> 00:06:22.790
how to do all of
this kid of stuff.

00:06:22.790 --> 00:06:26.460
So we're going to start with
an app which is completely

00:06:26.460 --> 00:06:29.846
stripped out of any kind
of backend, just the UI.

00:06:29.846 --> 00:06:31.720
And then Rajeev is going
to do all the magic.

00:06:31.720 --> 00:06:33.770
And he's going to
add a backend to it.

00:06:33.770 --> 00:06:34.780
So over to you.

00:06:34.780 --> 00:06:35.670
RAJEEV DAYAL: Cool.

00:06:35.670 --> 00:06:36.830
Thanks, Manfred.

00:06:36.830 --> 00:06:38.380
All right, so,
yeah, no pressure.

00:06:38.380 --> 00:06:41.200
Let's write a backend.

00:06:41.200 --> 00:06:42.950
All right, so here's
just the architecture

00:06:42.950 --> 00:06:45.283
of what we're doing because
there's a lot of steps here.

00:06:45.283 --> 00:06:47.280
On the left side, you
see the Todo.txt app,

00:06:47.280 --> 00:06:51.480
which Manfred showed, and as we
dropped out the existing cloud

00:06:51.480 --> 00:06:52.544
provider.

00:06:52.544 --> 00:06:54.460
On the right-hand side,
you see the App Engine

00:06:54.460 --> 00:06:56.250
backend that we
want to build here.

00:06:56.250 --> 00:06:59.030
It's going to use a Cloud
Datastore to store and retrieve

00:06:59.030 --> 00:06:59.890
tasks.

00:06:59.890 --> 00:07:02.800
And what we're going to do
is then expose this backend,

00:07:02.800 --> 00:07:04.540
using Cloud Endpoints.

00:07:04.540 --> 00:07:07.120
And once you've exposed the
backend using Cloud Endpoints,

00:07:07.120 --> 00:07:09.570
we can generate strongly
tied client libraries

00:07:09.570 --> 00:07:11.517
and then use them over
in the Todo.txt app.

00:07:11.517 --> 00:07:13.350
And then we can communicate
with the backend

00:07:13.350 --> 00:07:15.200
to store and retrieve tasks.

00:07:15.200 --> 00:07:15.990
So, OK, cool.

00:07:15.990 --> 00:07:17.905
All right, let's
get started here.

00:07:17.905 --> 00:07:20.030
All right, so we're starting
with the Todo.txt app.

00:07:20.030 --> 00:07:21.200
So what does that look like?

00:07:21.200 --> 00:07:23.719
All right, let me just go
to Android Studio here.

00:07:23.719 --> 00:07:24.760
Then you guys can see it.

00:07:24.760 --> 00:07:28.070
OK, so what I have on
the left-hand side--

00:07:28.070 --> 00:07:30.190
you don't have to read
all the lines here--

00:07:30.190 --> 00:07:33.410
but it's a Todo.txt
project here.

00:07:33.410 --> 00:07:36.440
And there's a bunch of
modules-- Todo.txt Touch.

00:07:36.440 --> 00:07:38.550
There's an action bar
widget and whatnot.

00:07:38.550 --> 00:07:40.970
And what I was showing here
is the main build.gradle

00:07:40.970 --> 00:07:44.560
file actually for the
Todo.txt Touch module.

00:07:44.560 --> 00:07:47.010
So I'm not going to go
through everything here.

00:07:47.010 --> 00:07:50.300
But as Manfred was
saying, this is

00:07:50.300 --> 00:07:52.170
using the Gradle build system.

00:07:52.170 --> 00:07:54.660
And this is written in Groovy.

00:07:54.660 --> 00:07:56.750
So this is what the syntax
is that you're seeing.

00:07:56.750 --> 00:07:59.956
And right here I've actually
got-- one thing I'll point out

00:07:59.956 --> 00:08:01.956
is, if you look at the
compilation dependencies,

00:08:01.956 --> 00:08:03.720
there's a bunch of jars
here, but then there's

00:08:03.720 --> 00:08:05.345
a couple of project
dependencies, which

00:08:05.345 --> 00:08:07.940
are actually just pointing
to the other modules there.

00:08:07.940 --> 00:08:11.370
So this is kind of a key point
about using Android Studio.

00:08:11.370 --> 00:08:13.380
All of your Android
applications use the Gradle

00:08:13.380 --> 00:08:15.920
build system and give you
a much more rational way

00:08:15.920 --> 00:08:18.630
to build your app and
do command line builds.

00:08:18.630 --> 00:08:19.260
So cool.

00:08:19.260 --> 00:08:20.830
OK, great.

00:08:20.830 --> 00:08:23.306
Let's go back here just
to see where we're at now.

00:08:23.306 --> 00:08:24.930
And all right, so
what I want to do now

00:08:24.930 --> 00:08:26.920
is I want to generate an
App Engine backend that

00:08:26.920 --> 00:08:28.170
has a Cloud Endpoints service.

00:08:28.170 --> 00:08:30.590
Let's go and do that.

00:08:30.590 --> 00:08:33.720
So I'm going to go
up here to Tools,

00:08:33.720 --> 00:08:35.620
going to go to
Google Cloud Tools.

00:08:35.620 --> 00:08:37.799
I'm going to say New
App Engine Module.

00:08:37.799 --> 00:08:40.960
The template I'm going to use
is the App Engine Java Endpoints

00:08:40.960 --> 00:08:42.140
Module.

00:08:42.140 --> 00:08:47.410
Let's call this
Todo.txt Backend.

00:08:47.410 --> 00:08:53.210
And the package name could be
Com Google Todo.txt Backend.

00:08:53.210 --> 00:08:54.610
All right, that looks good.

00:08:54.610 --> 00:08:56.590
So I'm going to generate.

00:08:56.590 --> 00:08:59.070
All right, so couple
things going on here.

00:08:59.070 --> 00:09:02.050
One, we basically have
a series of templates.

00:09:02.050 --> 00:09:06.740
And you're seeing that over
here, from the template code,

00:09:06.740 --> 00:09:08.635
we basically generated
all this code here.

00:09:08.635 --> 00:09:10.510
And I'm going to go
through that in a second.

00:09:10.510 --> 00:09:12.540
What's also going
on is you're seeing

00:09:12.540 --> 00:09:14.710
that is says Gradle
sync in progress.

00:09:14.710 --> 00:09:17.180
Because this is using
the Gradle build system,

00:09:17.180 --> 00:09:19.430
any time you add a
module to your project,

00:09:19.430 --> 00:09:25.120
it has to be built and absorbed
into the actual IDE via Gradle.

00:09:25.120 --> 00:09:27.700
So that's why a synchronize
was going on here.

00:09:27.700 --> 00:09:29.880
So if we're looking at
the Build Gradle file

00:09:29.880 --> 00:09:33.320
here for the Android application
or the App Engine application,

00:09:33.320 --> 00:09:35.680
you can see that this is
using the App Engine plug-in.

00:09:35.680 --> 00:09:37.790
This is a Gradle
plug-in for App Engine.

00:09:37.790 --> 00:09:40.360
The dependencies are
on the App Engine SDK.

00:09:40.360 --> 00:09:42.580
You've got some compile
time dependencies here.

00:09:42.580 --> 00:09:44.260
That's the Main Gradle file.

00:09:44.260 --> 00:09:47.470
So let's hop into the code that
was actually generated, right?

00:09:47.470 --> 00:09:51.540
MyBean is-- well,
it's, I guess, MyBean.

00:09:51.540 --> 00:09:53.560
It's a pretty simple
class with a single field.

00:09:53.560 --> 00:09:55.790
It's just got a string
field, as simple

00:09:55.790 --> 00:09:58.130
as you can get
for a data object.

00:09:58.130 --> 00:10:00.410
Again, this is part of the
template that we generate.

00:10:00.410 --> 00:10:02.172
And we've got My Endpoint here.

00:10:02.172 --> 00:10:04.630
OK, so My Endpoint's a little
more interesting because what

00:10:04.630 --> 00:10:09.100
this is is it's a
Java class, but we're

00:10:09.100 --> 00:10:10.854
exposing it as a Cloud Endpoint.

00:10:10.854 --> 00:10:11.770
How are we doing that?

00:10:11.770 --> 00:10:13.950
We're using the
Add API annotation,

00:10:13.950 --> 00:10:15.230
which you see up here.

00:10:15.230 --> 00:10:18.200
And I'm specifying
a name of myAPI,

00:10:18.200 --> 00:10:21.530
which allows us to be
exposed as a Cloud Endpoint

00:10:21.530 --> 00:10:23.520
with the API name myAPI.

00:10:23.520 --> 00:10:24.879
But that's not much fun.

00:10:24.879 --> 00:10:25.920
You need a method, right?

00:10:25.920 --> 00:10:27.378
I mean, you have
to call something.

00:10:27.378 --> 00:10:28.530
You attempt an RPC call.

00:10:28.530 --> 00:10:32.230
So there's the sayHi method
that's also been defined here.

00:10:32.230 --> 00:10:36.590
And we've expose this with
the API method annotation.

00:10:36.590 --> 00:10:39.460
And we've given the name
here sayHi, as well.

00:10:39.460 --> 00:10:41.110
And this is a really
simple method.

00:10:41.110 --> 00:10:43.700
It takes a parameter,
creates MyBean or returns it.

00:10:43.700 --> 00:10:45.764
So let's look at what
this looks like actually.

00:10:45.764 --> 00:10:47.180
Let's see what
this actually does.

00:10:47.180 --> 00:10:48.230
So I'm going to run this.

00:10:48.230 --> 00:10:52.590
I'm going to run this, hit Play.

00:10:52.590 --> 00:11:01.840
OK, so whenever we run an App
Engine app in Android studio,

00:11:01.840 --> 00:11:06.482
because it's using Gradle, it
does a Gradle build beforehand.

00:11:06.482 --> 00:11:08.940
And then what it does is it
kicks off the local development

00:11:08.940 --> 00:11:09.830
app server.

00:11:09.830 --> 00:11:12.740
You saw this in a
previous demo, actually.

00:11:12.740 --> 00:11:13.852
And it's starting.

00:11:13.852 --> 00:11:15.060
It just kicked me over there.

00:11:15.060 --> 00:11:15.860
So it just started.

00:11:15.860 --> 00:11:17.970
But basically, this
allows us to test locally

00:11:17.970 --> 00:11:19.730
before deploying to production.

00:11:19.730 --> 00:11:23.360
So let's take a look at what
our simple app looks like here.

00:11:26.030 --> 00:11:30.050
So what I'm doing here is I'm
basically open up API Explorer.

00:11:30.050 --> 00:11:33.330
It's an app that's basically
pointing to my local hosts

00:11:33.330 --> 00:11:35.670
here to slurp in the
API meta-information

00:11:35.670 --> 00:11:37.860
to provide me a view
over the rest API.

00:11:37.860 --> 00:11:40.920
So you see that an API called
myAPI has been defined.

00:11:40.920 --> 00:11:42.660
There's the sayHi method.

00:11:42.660 --> 00:11:44.200
And it takes a parameter.

00:11:44.200 --> 00:11:44.700
It's a name.

00:11:44.700 --> 00:11:46.290
So I'm just going
to put in Manfred.

00:11:46.290 --> 00:11:47.130
It's not my name.

00:11:47.130 --> 00:11:50.862
It's his name But hit
Execute, and there we go.

00:11:50.862 --> 00:11:52.320
So what actually
happened here, you

00:11:52.320 --> 00:11:55.490
see that the Java class I
created with the annotations

00:11:55.490 --> 00:11:57.840
has mapped pretty
well into a rest API.

00:11:57.840 --> 00:12:01.280
If you look at the post-- just
zoom in here a little bit--

00:12:01.280 --> 00:12:03.760
you've got myAPI up in
the name, version 1.

00:12:03.760 --> 00:12:04.650
That's the method.

00:12:04.650 --> 00:12:05.770
That's the data.

00:12:05.770 --> 00:12:07.730
The response is, Hi, Manfred.

00:12:07.730 --> 00:12:09.500
So that's basically
the API Explorer.

00:12:09.500 --> 00:12:10.874
That's just showing
you how we're

00:12:10.874 --> 00:12:13.000
exposing a Cloud
import really simply.

00:12:13.000 --> 00:12:17.860
So, OK, let's go back
over to Studio here.

00:12:17.860 --> 00:12:20.780
All right, let's stop
the Dev App server.

00:12:20.780 --> 00:12:25.940
And OK, let's checkpoint
where we are here, all right?

00:12:25.940 --> 00:12:28.995
So what we want to do is--
we've got the backend.

00:12:28.995 --> 00:12:30.120
We've got a Cloud Endpoint.

00:12:30.120 --> 00:12:31.750
That's great, but
that's not really

00:12:31.750 --> 00:12:33.458
helpful for what we're
trying to do here.

00:12:33.458 --> 00:12:36.350
We're trying to store tasks in
a data store and get them back.

00:12:36.350 --> 00:12:38.590
So let's work on
that part of the app.

00:12:38.590 --> 00:12:40.390
So I'll go back to Studio.

00:12:40.390 --> 00:12:43.281
And what I'm going to do is--
so I'll start with this sample.

00:12:43.281 --> 00:12:43.780
It's good.

00:12:43.780 --> 00:12:45.270
I can get somewhere with this.

00:12:45.270 --> 00:12:46.560
It's called MyBean.

00:12:46.560 --> 00:12:47.880
I don't like that name.

00:12:47.880 --> 00:12:51.970
So I'm going to actually
rename this to TaskBean.

00:12:51.970 --> 00:12:53.100
All right, that's better.

00:12:53.100 --> 00:12:55.280
Well, let me add
an ID field here.

00:12:58.190 --> 00:13:02.249
I'm going to generate a
getter and setter for this.

00:13:02.249 --> 00:13:04.290
I'll reformat the file
because that's a bit ugly.

00:13:04.290 --> 00:13:06.310
All right, cool.

00:13:06.310 --> 00:13:08.800
So now the bean with
an ID field, all right?

00:13:08.800 --> 00:13:11.540
Now, OK, MyEndpoint-- so
this is where we actually

00:13:11.540 --> 00:13:14.090
want to put in the logic for
what we're trying to do here.

00:13:14.090 --> 00:13:18.760
So I'm going to rename this
to TaskApi instead of MyApi.

00:13:18.760 --> 00:13:21.200
I'm going to drop
out the sayHi method

00:13:21.200 --> 00:13:23.080
because we don't
need that anymore.

00:13:23.080 --> 00:13:25.840
And I'm going to drop
in some code here.

00:13:25.840 --> 00:13:28.230
And this is going to be code
to talk to the data store.

00:13:28.230 --> 00:13:32.970
And it's going to expose three
methods-- clearTasks, getTask,

00:13:32.970 --> 00:13:34.750
and storeTask.

00:13:34.750 --> 00:13:37.040
GetTask will retrieve
tasks from the data store.

00:13:37.040 --> 00:13:39.452
storeTask will store a
task in the data store.

00:13:39.452 --> 00:13:41.910
And clearTasks will delete all
of them from the data store.

00:13:41.910 --> 00:13:43.368
But I'm going to
drop in this code.

00:13:43.368 --> 00:13:45.940
And them I'm going to talk
through what I did here.

00:13:45.940 --> 00:13:48.370
All right, so I've just
dropped in a bunch of code.

00:13:48.370 --> 00:13:50.570
And I'm just going to
resolve these imports here.

00:13:53.140 --> 00:13:56.680
I'm going to use the
data store entity.

00:13:56.680 --> 00:13:57.640
Let's see.

00:13:57.640 --> 00:14:00.463
I want to use the App
Engine fetch options, want

00:14:00.463 --> 00:14:03.440
to use Java to list.

00:14:03.440 --> 00:14:04.960
Cool, I think I got them all.

00:14:04.960 --> 00:14:06.770
OK, great.

00:14:06.770 --> 00:14:09.960
Oh, there are actually a
couple of other errors here.

00:14:09.960 --> 00:14:14.750
This one is actually
complaining because TaskApi,

00:14:14.750 --> 00:14:16.950
it starts with a
capital letter here.

00:14:16.950 --> 00:14:18.820
But when you're using
these rest APIs,

00:14:18.820 --> 00:14:20.861
you're supposed to start
with lower case letters.

00:14:20.861 --> 00:14:22.070
So I can just fix that.

00:14:22.070 --> 00:14:24.190
That's a validation
that we wrote.

00:14:24.190 --> 00:14:25.950
And I look here at
the getTask method,

00:14:25.950 --> 00:14:27.600
and also I've got
a dot in the name.

00:14:27.600 --> 00:14:29.220
It doesn't like that either.

00:14:29.220 --> 00:14:30.860
So I'm just going
to fix that up.

00:14:30.860 --> 00:14:33.360
And just to let you know, when
you're writing these Endpoint

00:14:33.360 --> 00:14:34.770
classes, there's
a lot of helpers

00:14:34.770 --> 00:14:35.910
for all these conventions.

00:14:35.910 --> 00:14:37.641
If you go under
Inspections here,

00:14:37.641 --> 00:14:39.390
you can see under
Google Cloud Endpoints--

00:14:39.390 --> 00:14:40.840
you don't have to
read them all-- but

00:14:40.840 --> 00:14:43.173
there's a variety of things
that'll help you with as you

00:14:43.173 --> 00:14:46.230
type validation, as you
write Cloud Endpoint classes.

00:14:46.230 --> 00:14:46.790
OK great.

00:14:46.790 --> 00:14:48.970
So what did I actually do here?

00:14:48.970 --> 00:14:50.980
So I've created three methods.

00:14:50.980 --> 00:14:53.060
There's storeTask--
as I mentioned

00:14:53.060 --> 00:14:55.740
to you-- getTasks,
and clearTasks.

00:14:55.740 --> 00:14:57.340
So to go through
these really quickly,

00:14:57.340 --> 00:14:59.650
I'm using the Data
Store Service here.

00:14:59.650 --> 00:15:01.140
And what I'm doing
in storeTasks,

00:15:01.140 --> 00:15:03.510
I'm basically creating
a new transaction.

00:15:03.510 --> 00:15:06.230
And then for a TaskBean
that's coming in

00:15:06.230 --> 00:15:10.242
from basically a client, I'm
creating an entity for that,

00:15:10.242 --> 00:15:11.700
and I'm putting it
into data store,

00:15:11.700 --> 00:15:14.050
and I'm committing
that transaction.

00:15:14.050 --> 00:15:16.720
getTasks runs a query
over the data store

00:15:16.720 --> 00:15:19.450
for all entities
of type TaskBean,

00:15:19.450 --> 00:15:21.260
creates TaskBean
objects from them,

00:15:21.260 --> 00:15:23.310
and returns them to the caller.

00:15:23.310 --> 00:15:26.050
clearTasks is similar, except
it creates a transaction,

00:15:26.050 --> 00:15:27.880
does that same
query, and then it

00:15:27.880 --> 00:15:30.230
blows away all the tasks
that are in the data store

00:15:30.230 --> 00:15:32.060
and commits a transaction.

00:15:32.060 --> 00:15:33.580
So, OK, cool.

00:15:33.580 --> 00:15:37.160
So looks like we
have our backend.

00:15:37.160 --> 00:15:39.564
So what we need to
do now, I think,

00:15:39.564 --> 00:15:40.980
is actually-- let's
just see where

00:15:40.980 --> 00:15:43.870
we are so I can keep
track of where we are.

00:15:43.870 --> 00:15:44.370
OK, cool.

00:15:44.370 --> 00:15:45.830
Yeah, what I want
to do now is I want

00:15:45.830 --> 00:15:47.390
to generate client
libraries, right?

00:15:47.390 --> 00:15:48.410
I've got my backend.

00:15:48.410 --> 00:15:50.280
I've exposed it through
Cloud Endpoints.

00:15:50.280 --> 00:15:51.950
But someone's got
to use it, right?

00:15:51.950 --> 00:15:54.580
And the thing that we want
to use it is an Android app.

00:15:54.580 --> 00:15:57.570
So we need to generate
strongly tied client libraries

00:15:57.570 --> 00:15:59.440
so that we can use
this on the other side.

00:15:59.440 --> 00:16:02.070
So let me go ahead
and do that, actually.

00:16:02.070 --> 00:16:05.900
So I'm going to go to
Tools, Google Cloud Tools.

00:16:05.900 --> 00:16:08.892
And I'm going to pick
Install Client Libraries.

00:16:08.892 --> 00:16:10.850
OK, so this is doing a
couple of things, right?

00:16:10.850 --> 00:16:13.560
What it's doing is it's doing
a build of the App Engine app

00:16:13.560 --> 00:16:15.370
because we've changed
a bunch of the code.

00:16:15.370 --> 00:16:19.320
And it's going to then basically
get all the meta-information

00:16:19.320 --> 00:16:21.710
from the annotations,
kick that up

00:16:21.710 --> 00:16:23.166
to a cloud service,
which is going

00:16:23.166 --> 00:16:25.847
to take that meta-information
and say, oh, hi, you need Java.

00:16:25.847 --> 00:16:27.930
Here, I'm going to give
you a bunch of Java source

00:16:27.930 --> 00:16:31.410
that you can use as a
way to call the Cloud

00:16:31.410 --> 00:16:33.310
Endpoints from a
client application.

00:16:33.310 --> 00:16:34.910
We grab that source.

00:16:34.910 --> 00:16:35.870
We compile it.

00:16:35.870 --> 00:16:38.260
And we install into your
local Maven repository.

00:16:38.260 --> 00:16:43.740
So now you can access it on the
other side in the Android app.

00:16:43.740 --> 00:16:47.952
So let's go ahead and
actually go and use

00:16:47.952 --> 00:16:49.660
those client libraries
on the other side.

00:16:49.660 --> 00:16:52.410
So now I'm going to go to the
Todo.txt Touch application

00:16:52.410 --> 00:16:53.050
here.

00:16:53.050 --> 00:16:57.100
And I'm going to drop in
the dependencies here.

00:16:57.100 --> 00:17:02.280
So I've added a reference to the
libraries that were generated.

00:17:02.280 --> 00:17:04.980
And this referencing
the local Maven repo.

00:17:04.980 --> 00:17:07.109
And because I changed
the build Gradle file,

00:17:07.109 --> 00:17:08.490
I've got to do a sync.

00:17:08.490 --> 00:17:10.020
So let's do that.

00:17:10.020 --> 00:17:13.630
And while that's going on, let's
just see where we're at here.

00:17:13.630 --> 00:17:15.990
All right, so basically, we're
getting in the last stage

00:17:15.990 --> 00:17:16.489
here, right?

00:17:16.489 --> 00:17:18.150
We basically have our backend.

00:17:18.150 --> 00:17:21.030
We've got our
client application.

00:17:21.030 --> 00:17:23.069
We're generating the
client libraries.

00:17:23.069 --> 00:17:25.260
Now what we need to do is
override the parts where

00:17:25.260 --> 00:17:27.980
we actually call the cloud
provider, the existing cloud

00:17:27.980 --> 00:17:31.082
provider from Todo.text
app and use ours instead,

00:17:31.082 --> 00:17:32.040
the backend we created.

00:17:32.040 --> 00:17:34.020
So let's go and do that.

00:17:34.020 --> 00:17:34.750
All right, cool.

00:17:34.750 --> 00:17:37.030
OK, so the magic
of this actually

00:17:37.030 --> 00:17:41.650
all happens in a class called
TaskBagImpl-- not a great name,

00:17:41.650 --> 00:17:42.150
I know.

00:17:42.150 --> 00:17:43.980
It's a TaskBagImpl.

00:17:43.980 --> 00:17:48.030
But anyway, there's
basically two methods here,

00:17:48.030 --> 00:17:51.160
or four methods,
actually-- pushToRemote and

00:17:51.160 --> 00:17:52.510
pullFromRemote.

00:17:52.510 --> 00:17:55.900
And these methods, actually,
are doing what they're saying.

00:17:55.900 --> 00:18:00.070
They're pushing the task to
the remote cloud provider

00:18:00.070 --> 00:18:02.690
and pulling from the
remote cloud provider.

00:18:02.690 --> 00:18:04.790
And you can see, in this
implementation here,

00:18:04.790 --> 00:18:06.820
it's using the
remoteClientManager,

00:18:06.820 --> 00:18:08.720
which is through the
existing cloud provider.

00:18:08.720 --> 00:18:12.840
So let's extend this class
and override these methods.

00:18:12.840 --> 00:18:15.390
I'm going to create a new
class here-- TaskBagImpl.

00:18:18.440 --> 00:18:22.430
I'm going to extend TaskBagImpl.

00:18:22.430 --> 00:18:25.670
And I'm going to drop in code
that overrides these methods

00:18:25.670 --> 00:18:29.671
and actually calls our backend
instead of the existing backend

00:18:29.671 --> 00:18:30.170
here.

00:18:30.170 --> 00:18:31.270
So let's do that.

00:18:35.117 --> 00:18:37.200
All right, I'm just going
to walk through the code

00:18:37.200 --> 00:18:40.280
quickly here.

00:18:40.280 --> 00:18:43.270
So what we've got
here is, basically,

00:18:43.270 --> 00:18:46.660
an Endpoints TaskBagImpl.

00:18:46.660 --> 00:18:50.750
I'm creating a new version
or a new instance of TaskApi.

00:18:50.750 --> 00:18:53.141
And that's really the
thing that calls over

00:18:53.141 --> 00:18:55.390
to the-- it's the thing that
we use to actually invoke

00:18:55.390 --> 00:18:57.439
remote methods on our backend.

00:18:57.439 --> 00:18:58.980
You'll see, in the
construction, I've

00:18:58.980 --> 00:19:02.996
overridden the root URL
to point to 10.0.2.2.

00:19:02.996 --> 00:19:06.440
That's because, when I run this
in the emulator, the Android

00:19:06.440 --> 00:19:09.290
emulator, I want to run against
the local dev app server, which

00:19:09.290 --> 00:19:12.770
is mapped to 10.0.2.2.

00:19:12.770 --> 00:19:15.751
In pushToRemote, really-- I'll
just go through this really

00:19:15.751 --> 00:19:16.250
quickly.

00:19:16.250 --> 00:19:18.800
But we're basically grabbing
the list of the tasks that

00:19:18.800 --> 00:19:22.570
are stored in the
local Android store,

00:19:22.570 --> 00:19:24.930
creating TaskBean
objects, and then calling

00:19:24.930 --> 00:19:26.836
storeTasks for
each one of those.

00:19:26.836 --> 00:19:28.210
When we call
execute, that's when

00:19:28.210 --> 00:19:30.970
the HTTP call happens
to our backend.

00:19:30.970 --> 00:19:34.010
In pullFromRemote,
we call getTasks

00:19:34.010 --> 00:19:36.410
which is the name of the
method we defined on that side,

00:19:36.410 --> 00:19:38.540
execute, and we call getItems.

00:19:38.540 --> 00:19:40.250
And then for each
one of those, we

00:19:40.250 --> 00:19:41.990
create a new task
object, which is

00:19:41.990 --> 00:19:44.470
what the UI understands
for this app.

00:19:44.470 --> 00:19:45.520
And we call reload.

00:19:45.520 --> 00:19:50.070
And that shows them up in
the Android application.

00:19:50.070 --> 00:19:51.570
So let's go ahead
and just run this.

00:19:51.570 --> 00:19:52.910
Let's try this out, actually.

00:19:52.910 --> 00:19:54.285
So what I'm going
do is I'm going

00:19:54.285 --> 00:19:58.580
to run the backend locally.

00:19:58.580 --> 00:20:00.430
And while that's
actually going on,

00:20:00.430 --> 00:20:02.850
I did remember there's one
thing I do need to change here.

00:20:02.850 --> 00:20:06.975
I need to use our new actual--
the Endpoints TaskBagImpl.

00:20:06.975 --> 00:20:08.350
So I'm going to
change that here.

00:20:12.650 --> 00:20:14.065
Whoops.

00:20:14.065 --> 00:20:16.190
Cool.

00:20:16.190 --> 00:20:18.000
So looks like the dev
app server's running.

00:20:18.000 --> 00:20:18.670
That's great.

00:20:18.670 --> 00:20:24.595
And now while that's running,
I want to run the client app.

00:20:24.595 --> 00:20:26.710
So I'm going to run that.

00:20:26.710 --> 00:20:29.290
That's going to cause a
Gradle build to happen here.

00:20:38.450 --> 00:20:40.980
You can see that, basically,
in the build process,

00:20:40.980 --> 00:20:43.970
it's actually going ahead
and doing both the debug

00:20:43.970 --> 00:20:46.260
and release builds
of the application.

00:20:46.260 --> 00:20:47.812
You get that by default.

00:20:47.812 --> 00:20:49.770
And you can actually
define many other variants

00:20:49.770 --> 00:20:53.109
of your application
very easily in Gradle.

00:20:53.109 --> 00:20:55.150
So I'm going to choose
the running emulator here.

00:20:58.130 --> 00:21:00.410
All right, let's kick
over to the emulator

00:21:00.410 --> 00:21:02.260
and see if we're working here.

00:21:02.260 --> 00:21:02.924
OK, cool.

00:21:02.924 --> 00:21:04.840
All right, so we're
running the emulator here.

00:21:04.840 --> 00:21:05.715
So let me add a task.

00:21:11.240 --> 00:21:16.604
OK, cool.

00:21:16.604 --> 00:21:17.270
Add another one.

00:21:22.900 --> 00:21:26.530
OK, I'll mark this as complete.

00:21:26.530 --> 00:21:30.290
And let's look at
the backend and make

00:21:30.290 --> 00:21:34.010
sure we're actually storing data
and I'm not deceiving myself

00:21:34.010 --> 00:21:34.610
here.

00:21:34.610 --> 00:21:36.360
So I'm running the API explorer.

00:21:36.360 --> 00:21:40.500
You notice the API definitions
are now mapping to TaskApi.

00:21:40.500 --> 00:21:42.690
I'm going to call getTasks here.

00:21:42.690 --> 00:21:46.070
And basically, you
see the data here.

00:21:46.070 --> 00:21:48.560
You see Hi there, Hi
cloud platform people

00:21:48.560 --> 00:21:50.319
with the X. It's been
marked as completed.

00:21:50.319 --> 00:21:51.860
That's why there's
a line through it.

00:21:51.860 --> 00:21:53.820
So it looks like we're
up and running there.

00:21:53.820 --> 00:21:55.500
Cool.

00:21:55.500 --> 00:21:56.770
So this is great.

00:21:56.770 --> 00:21:58.250
This is good times.

00:21:58.250 --> 00:22:01.282
But one thing we actually
need to do is, well, hey,

00:22:01.282 --> 00:22:02.990
we need to get this
to production, right?

00:22:02.990 --> 00:22:05.340
I mean, that was the whole
point of the exercise.

00:22:05.340 --> 00:22:07.920
So let's go, and let's do that.

00:22:07.920 --> 00:22:10.607
So what I'm going
to do is I'm going

00:22:10.607 --> 00:22:12.690
to do a little housekeeping
so we can deploy this.

00:22:17.660 --> 00:22:22.040
OAuth 2.0-- I'm going to use
OAuth 2.0 authentication.

00:22:22.040 --> 00:22:25.708
I want to make sure my app
ID is set properly here--

00:22:25.708 --> 00:22:26.666
cloud-platform-live-14.

00:22:30.540 --> 00:22:31.050
Great.

00:22:31.050 --> 00:22:32.400
And what I'm going
to do is deploy

00:22:32.400 --> 00:22:34.050
this from the command
line, because I mentioned

00:22:34.050 --> 00:22:36.610
we're using Gradle so I should
be able to do that, right?

00:22:36.610 --> 00:22:44.740
So gradlew todoTxtBackend,
call App Engine update, which

00:22:44.740 --> 00:22:47.000
uses a cloud SDK under the hood.

00:22:47.000 --> 00:22:48.950
And all right, cool.

00:22:48.950 --> 00:22:52.880
So before doing this,
it does a build.

00:22:52.880 --> 00:22:54.650
Looks like it's going up there.

00:22:54.650 --> 00:22:57.420
It was an updated SDK,
so should grab that.

00:22:57.420 --> 00:22:59.104
Anyway, cool.

00:22:59.104 --> 00:23:00.270
So looks like it's deployed.

00:23:02.970 --> 00:23:04.300
All right, cool.

00:23:04.300 --> 00:23:06.550
Let's actually use the
production backend on the phone

00:23:06.550 --> 00:23:07.050
there.

00:23:07.050 --> 00:23:10.330
MANFRED ZABARAUSKAS: Yeah,
yeah, let's do that, Rajeev.

00:23:10.330 --> 00:23:17.300
So let's see if I'm more lucky
this time with my fancy tablet.

00:23:17.300 --> 00:23:21.718
So if we could cut to
the device-- ay yay

00:23:21.718 --> 00:23:22.660
yay, black screen.

00:23:22.660 --> 00:23:24.640
Let's try one more time.

00:23:24.640 --> 00:23:26.740
Unplug, plug back in.

00:23:26.740 --> 00:23:30.649
That solve all the problems
most of the time-- unplug,

00:23:30.649 --> 00:23:31.190
plug back in.

00:23:31.190 --> 00:23:32.000
RAJEEV DAYAL: Oh, no, that's me.

00:23:32.000 --> 00:23:34.114
MANFRED ZABARAUSKAS: So we'll
try the phone one more time.

00:23:34.114 --> 00:23:35.114
MALE SPEAKER: Try again.

00:23:35.114 --> 00:23:38.220
MANFRED ZABARAUSKAS: OK,
OK, if that doesn't work,

00:23:38.220 --> 00:23:40.045
let's use the
tried-and-true method.

00:23:45.460 --> 00:23:46.290
OK, still nothing.

00:23:48.379 --> 00:23:49.545
RAJEEV DAYAL: Try one more--

00:23:49.545 --> 00:23:50.626
MALE SPEAKER: Try to
go back and forth.

00:23:50.626 --> 00:23:52.042
MANFRED ZABARAUSKAS:
Oh, one more?

00:23:54.309 --> 00:23:55.100
RAJEEV DAYAL: Yeah.

00:23:55.100 --> 00:23:55.830
MANFRED ZABARAUSKAS:
There we are.

00:23:55.830 --> 00:23:56.850
All right, OK.

00:23:56.850 --> 00:24:01.670
So, Rajeev, what do
you want me to add?

00:24:01.670 --> 00:24:07.370
So first of all, let me delete
this Hero task and then--

00:24:07.370 --> 00:24:09.382
RAJEEV DAYAL: Just,
I don't know, say--

00:24:09.382 --> 00:24:10.590
MANFRED ZABARAUSKAS: Wrap up.

00:24:10.590 --> 00:24:11.756
RAJEEV DAYAL: Yeah, wrap up.

00:24:11.756 --> 00:24:12.680
I like Rajeev.

00:24:12.680 --> 00:24:13.250
I don't know.

00:24:13.250 --> 00:24:14.220
Any of those things are fine.

00:24:14.220 --> 00:24:15.761
MANFRED ZABARAUSKAS:
All right, then.

00:24:15.761 --> 00:24:17.671
OK so I've tried adding
the wrap up task.

00:24:17.671 --> 00:24:18.670
RAJEEV DAYAL: All right.

00:24:18.670 --> 00:24:21.294
MANFRED ZABARAUSKAS: And now if
you go to Developer's Console--

00:24:21.294 --> 00:24:26.180
RAJEEV DAYAL: Cool, can you
flip over to the demo computer?

00:24:26.180 --> 00:24:30.080
All right, I'm going
to refresh this here.

00:24:30.080 --> 00:24:31.890
There we go-- wrap up.

00:24:31.890 --> 00:24:32.390
Cool.

00:24:32.390 --> 00:24:32.590
MANFRED ZABARAUSKAS: All right?

00:24:32.590 --> 00:24:32.880
RAJEEV DAYAL: All right.

00:24:32.880 --> 00:24:34.160
MANFRED ZABARAUSKAS: This
is a good time for applause.

00:24:34.160 --> 00:24:35.120
[APPLAUSE]

00:24:35.120 --> 00:24:36.120
RAJEEV DAYAL: Thank you.

00:24:36.120 --> 00:24:38.078
MANFRED ZABARAUSKAS: All
right, so thanks, man.

00:24:38.078 --> 00:24:39.720
So seriously, I
know this might not

00:24:39.720 --> 00:24:42.430
have been the most exciting
demo of your lives.

00:24:42.430 --> 00:24:44.860
But this was no
smokes and mirrors.

00:24:44.860 --> 00:24:47.750
In 15 minutes, we took
this stripped out app,

00:24:47.750 --> 00:24:49.510
and we added in a
cloud backend to it.

00:24:49.510 --> 00:24:51.620
So I thought it
was kind of cool.

00:24:51.620 --> 00:24:55.410
And you've seen things like
local dev app server and API

00:24:55.410 --> 00:24:59.210
Explorer and how code gets
translated from Java to rest

00:24:59.210 --> 00:25:02.450
and all of those cool things.

00:25:02.450 --> 00:25:04.360
So anyway, if we can
go back to the slides,

00:25:04.360 --> 00:25:08.000
I know you guys are eager
to get to the fireside chat

00:25:08.000 --> 00:25:10.430
with [INAUDIBLE] and Jeff Dean.

00:25:10.430 --> 00:25:14.430
So I'll just quickly lamblast
through these slides.

00:25:14.430 --> 00:25:17.360
I would just like to mention
that while some of these things

00:25:17.360 --> 00:25:19.180
are really cool
what we have now,

00:25:19.180 --> 00:25:22.010
more of the exciting things
are coming, including support

00:25:22.010 --> 00:25:25.710
for GC and improve getting
started experience,

00:25:25.710 --> 00:25:29.140
API analytics, third-party
client access, and all

00:25:29.140 --> 00:25:32.050
of those kinds of things
that you can look forward to

00:25:32.050 --> 00:25:34.010
in I/O in 2014.

00:25:34.010 --> 00:25:36.390
So I hope to see you all there.

00:25:36.390 --> 00:25:37.580
Thanks so much for coming.

00:25:37.580 --> 00:25:39.660
Thanks for being
attentive after the lunch.

00:25:39.660 --> 00:25:41.670
I understand that that
can be quite hard.

00:25:41.670 --> 00:25:43.350
And any questions?

00:25:46.100 --> 00:25:47.180
Yes?

00:25:47.180 --> 00:25:48.580
Actually, do we have a mic?

00:25:51.695 --> 00:25:53.320
If not, you can just
yell the question.

00:25:53.320 --> 00:25:54.210
I'll repeat that.

00:25:54.210 --> 00:25:55.180
AUDIENCE: Yeah.

00:25:55.180 --> 00:25:57.605
I was actually just curious
about the [INAUDIBLE].

00:26:16.034 --> 00:26:18.450
MANFRED ZABARAUSKAS: Yeah, so
that's a very good question.

00:26:18.450 --> 00:26:20.070
Let me just repeat it.

00:26:20.070 --> 00:26:23.360
The question was
mostly, cloud developers

00:26:23.360 --> 00:26:26.750
are using other IDs
outside of Android Studio.

00:26:26.750 --> 00:26:28.720
And Android Studio
is mostly Android.

00:26:28.720 --> 00:26:31.820
And so what's the further,
long-term plan there?

00:26:31.820 --> 00:26:35.420
So our goal is to meet
you where you are.

00:26:35.420 --> 00:26:37.770
And so partially,
one reason for that

00:26:37.770 --> 00:26:42.730
was having the
[INAUDIBLE] backend

00:26:42.730 --> 00:26:45.320
and front end build,
currently Android Studio

00:26:45.320 --> 00:26:48.610
supports just Java.

00:26:48.610 --> 00:26:52.200
There might be some things on
the roadmap to extend that.

00:26:52.200 --> 00:26:55.290
Unfortunately, that's all
I can give at this point.

00:26:55.290 --> 00:26:55.790
Thank you.

00:26:55.790 --> 00:26:59.290
RAJEEV DAYAL: Though one
reason we did-- we want to say,

00:26:59.290 --> 00:27:01.680
the backends that we're
creating there, especially

00:27:01.680 --> 00:27:04.150
in Android Studio, are
really attuned to be

00:27:04.150 --> 00:27:06.180
used by Android apps, right?

00:27:06.180 --> 00:27:08.980
So that's why it's
still in Android Studio.

00:27:08.980 --> 00:27:11.520
It's like just add a
cloud backend very easily

00:27:11.520 --> 00:27:15.050
for the purpose of
your Android app.

00:27:15.050 --> 00:27:16.723
MANFRED ZABARAUSKAS:
OK, last question.

00:27:16.723 --> 00:27:17.639
AUDIENCE: [INAUDIBLE].

00:27:21.139 --> 00:27:22.680
MANFRED ZABARAUSKAS:
OK, the question

00:27:22.680 --> 00:27:25.090
was, when will there
be support from Android

00:27:25.090 --> 00:27:27.330
wearables and Google Glass?

00:27:27.330 --> 00:27:30.160
RAJEEV DAYAL: I mean, yeah we
haven't thought about that.

00:27:30.160 --> 00:27:34.750
But technically, I mean,
with Cloud Endpoints,

00:27:34.750 --> 00:27:39.080
if it's a Java, you can generate
bindings in any language.

00:27:39.080 --> 00:27:41.100
And you're using HTTP, right?

00:27:41.100 --> 00:27:44.310
So we haven't thought
about it, but I

00:27:44.310 --> 00:27:46.790
don't see any actual
technical reason

00:27:46.790 --> 00:27:50.310
why that would be
a problem, to use

00:27:50.310 --> 00:27:52.660
a cloud-based backend
and Cloud Endpoints

00:27:52.660 --> 00:27:54.619
to expose it to a
device like that.

00:27:54.619 --> 00:27:55.910
MANFRED ZABARAUSKAS: All right?

00:27:55.910 --> 00:27:56.785
Thanks so much, guys.

00:27:56.785 --> 00:27:57.660
Thank you.

00:27:57.660 --> 00:27:59.210
RAJEEV DAYAL: Thanks.

