WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
So our goal is to write code now

00:00:03.000 --> 00:00:05.000
that computes the formula that we worked out earlier--

00:00:05.000 --> 00:00:09.000
that we want to compute the rank for each page.

00:00:09.000 --> 00:00:12.000
The thing that we're going to do--instead of

00:00:12.000 --> 00:00:14.000
using this recursive definition,

00:00:14.000 --> 00:00:17.000
we're going to write a loop that goes through the timesteps,

00:00:17.000 --> 00:00:19.000
and we're going to figure out how many timesteps we want.

00:00:19.000 --> 00:00:21.000
The more timesteps, the more accurate rankings we'll have--

00:00:21.000 --> 00:00:23.000
but the longer it will take.

00:00:23.000 --> 00:00:25.000
So we'll just pick a value

00:00:25.000 --> 00:00:27.000
for the maximum number of timesteps

00:00:27.000 --> 00:00:29.000
and we'll make our loop go through those steps,

00:00:29.000 --> 00:00:31.000
computing these equations.

00:00:31.000 --> 00:00:33.000
So let's work out the code to do that.

00:00:33.000 --> 00:00:35.000
So now that we've got the graph,

00:00:35.000 --> 00:00:37.000
all that's left to do is figure out how to use it

00:00:37.000 --> 00:00:39.000
to compute the Page Ranks.

00:00:39.000 --> 00:00:42.000
So to do that, we'll make a procedure called, "compute.ranks".

00:00:42.000 --> 00:00:46.000
It takes, as input, a graph that gives the link structure.

00:00:46.000 --> 00:00:49.000
So, as an example, we have our graph

00:00:49.000 --> 00:00:52.000
that has the URLs--

00:00:52.000 --> 00:00:56.000
and each URL, followed by the link of pages that it links to .

00:00:56.000 --> 00:01:00.000
And this is the graph that was produced by our crawler.

00:01:00.000 --> 00:01:02.000
And crawl&lt;u&gt;web produced, as outputs,&lt;/u&gt;

00:01:02.000 --> 00:01:05.000
a graph as well as an index.

00:01:05.000 --> 00:01:08.000
We're going to use the graph as the input to compute.ranks.

00:01:08.000 --> 00:01:11.000
So the output from compute.ranks will be a dictionary,

00:01:11.000 --> 00:01:14.000
giving, for each URL, its urank--

00:01:14.000 --> 00:01:17.000
the ranking that we compute, using our formula--

00:01:17.000 --> 00:01:19.000
and the higher the rank, the better.

00:01:19.000 --> 00:01:22.000
And what we're going to do, once we have those ranks--

00:01:22.000 --> 00:01:25.000
and this last part is going to be left as a homework assignment for you--

00:01:25.000 --> 00:01:28.000
we're going to--instead of having just "lookup",

00:01:28.000 --> 00:01:30.000
we're going to have "lookup&lt;u&gt;best".&lt;/u&gt;

00:01:30.000 --> 00:01:32.000
And lookup&lt;u&gt;best will take 3 inputs.&lt;/u&gt;

00:01:32.000 --> 00:01:35.000
It will take the keyword we're looking for.

00:01:35.000 --> 00:01:39.000
It will also take the index that came from the crawl,

00:01:39.000 --> 00:01:41.000
and it will also take the ranks.

00:01:41.000 --> 00:01:44.000
And from those 3 inputs, the index will give us

00:01:44.000 --> 00:01:46.000
all of the pages that contain the keyword.

00:01:46.000 --> 00:01:48.000
And then what lookup&lt;u&gt;best will do is&lt;/u&gt;

00:01:48.000 --> 00:01:51.000
use the ranks to find the highest Rank Page

00:01:51.000 --> 00:01:53.000
and give that as the output.

00:01:53.000 --> 00:01:56.000
So once we've done that, you'll have a complete search engine.

00:01:56.000 --> 00:02:00.000
You'll have a crawler that starts from a seed,

00:02:00.000 --> 00:02:03.000
finds pages, produces an index, produces a graph;

00:02:03.000 --> 00:02:05.000
that graph is the input to compute.ranks;

00:02:05.000 --> 00:02:08.000
compute.ranks uses our page-ranking algorithm

00:02:08.000 --> 00:02:11.000
to figure out the pages that are most popular.

00:02:11.000 --> 00:02:14.000
And then lookup&lt;u&gt;best takes the graph, as input--&lt;/u&gt;

00:02:14.000 --> 00:02:16.000
the index as input--and the keyword,

00:02:16.000 --> 00:02:18.000
finds the pages that contain that keyword,

00:02:18.000 --> 00:02:21.000
and identifies the one that's best, using the ranks.

00:02:21.000 --> 00:02:24.000
So that's what you'll have, after the homework of this unit.

00:02:24.000 --> 00:02:27.000
We're going to finish compute.ranks now

00:02:27.000 --> 99:59:59.000
and leave it up to you to define lookup&lt;u&gt;best, as a homework question.&lt;/u&gt;

