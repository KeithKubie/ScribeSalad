WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.041
[APPLAUSE]

00:00:01.041 --> 00:00:01.540
NICK: Hello.

00:00:01.540 --> 00:00:02.570
Hello, everyone.

00:00:02.570 --> 00:00:05.030
Thank you very much for
coming to this talk, "A Window

00:00:05.030 --> 00:00:05.950
into Transitions."

00:00:05.950 --> 00:00:08.340
It's one of the last talks
of I/O, or the ultimate talk,

00:00:08.340 --> 00:00:09.861
if you will.

00:00:09.861 --> 00:00:11.110
My name is Nick [? Butcher ?].

00:00:11.110 --> 00:00:13.120
I'm joined by my colleagues
Ben [? Vice ?] and George

00:00:13.120 --> 00:00:15.411
[? Mount. ?] We're engineers
on the developer relations

00:00:15.411 --> 00:00:19.252
and Android engineering team.

00:00:19.252 --> 00:00:19.752
OK.

00:00:19.752 --> 00:00:22.674
[APPLAUSE]

00:00:23.660 --> 00:00:26.450
So we're here today to talk
about the Android transitions

00:00:26.450 --> 00:00:26.950
API.

00:00:26.950 --> 00:00:29.050
We've got a lot to
cover, so we're just

00:00:29.050 --> 00:00:32.238
going to jump straight into
the topic and get going.

00:00:32.238 --> 00:00:33.640
So first up, transitions.

00:00:33.640 --> 00:00:34.850
What are they?

00:00:34.850 --> 00:00:36.760
The basic idea of
the transitions API

00:00:36.760 --> 00:00:40.300
is to help you whenever there's
a change in the scene, where

00:00:40.300 --> 00:00:43.700
a scene is basically a
view hierarchy on screen.

00:00:43.700 --> 00:00:46.560
So the idea is that
when a scene changes,

00:00:46.560 --> 00:00:49.010
my animation doesn't work
properly, ironically.

00:00:49.010 --> 00:00:51.770
And we perform a transition.

00:00:51.770 --> 00:00:53.670
So a transition
being look at what

00:00:53.670 --> 00:00:57.200
has changed, and then
animate that difference.

00:00:57.200 --> 00:00:59.900
So the API for the
transition is pretty simple.

00:00:59.900 --> 00:01:01.630
It's just exactly the same.

00:01:01.630 --> 00:01:03.290
What has changed?

00:01:03.290 --> 00:01:05.530
Firstly, there will
be two callbacks

00:01:05.530 --> 00:01:07.750
into your transition,
which is captureStartValues

00:01:07.750 --> 00:01:10.250
and captureEndValues.

00:01:10.250 --> 00:01:12.760
Passing in this object, this
transition values object,

00:01:12.760 --> 00:01:15.180
so this object has the view.

00:01:15.180 --> 00:01:17.780
And you can look at the view
and capture properties about it,

00:01:17.780 --> 00:01:20.280
and save it into some kind of
map in the transitions values.

00:01:20.280 --> 00:01:23.720
And so you do that in a start
state and the end state.

00:01:23.720 --> 00:01:27.030
And then we'll call the
createAnimator method,

00:01:27.030 --> 00:01:29.120
given those two states.

00:01:29.120 --> 00:01:31.590
And you create animators
to animate the change

00:01:31.590 --> 00:01:33.831
between those two states.

00:01:33.831 --> 00:01:34.330
Cool.

00:01:34.330 --> 00:01:37.301
So that's the very
basic API covered off.

00:01:37.301 --> 00:01:38.800
There's a bunch of
transitions which

00:01:38.800 --> 00:01:41.870
come in the Android framework,
which you can and absolutely

00:01:41.870 --> 00:01:42.690
should use.

00:01:42.690 --> 00:01:44.200
So let's have a quick
survey of what they are,

00:01:44.200 --> 00:01:45.866
so you know what
these, then, primitives

00:01:45.866 --> 00:01:47.780
that you can build with are.

00:01:47.780 --> 00:01:49.810
The first, and a super
handy one to know about,

00:01:49.810 --> 00:01:51.670
is the ChangeBounds transition.

00:01:51.670 --> 00:01:53.300
So this will help
you out whenever you

00:01:53.300 --> 00:01:55.930
are moving or resizing a view.

00:01:55.930 --> 00:01:58.320
It will animate the top left
and bottom right properties

00:01:58.320 --> 00:02:01.160
to help you move it around.

00:02:01.160 --> 00:02:04.260
Crucially, this ChangeBounds
also helps suppress layouts.

00:02:04.260 --> 00:02:06.720
So you don't want to be calling
RequestLayout repeatedly,

00:02:06.720 --> 00:02:08.150
because that's going to
be bad for performance,

00:02:08.150 --> 00:02:09.524
whereas ChangeBounds
will do this

00:02:09.524 --> 00:02:12.070
in a performant way for you.

00:02:12.070 --> 00:02:13.740
Secondly, there's
a fade transition,

00:02:13.740 --> 00:02:16.720
which, as the name suggests,
helps fade things in and out.

00:02:16.720 --> 00:02:18.250
So anytime an
object's visibility

00:02:18.250 --> 00:02:21.040
changes or gets added or
removed from the hierarchy,

00:02:21.040 --> 00:02:24.389
you can run a fade
to ease that change.

00:02:24.389 --> 00:02:26.180
And lastly, there's
this awesome little guy

00:02:26.180 --> 00:02:28.540
called the AutoTransition, which
will put some of those things

00:02:28.540 --> 00:02:29.040
together.

00:02:29.040 --> 00:02:32.820
So when a hierarchy changes, it
will fade newly-arriving things

00:02:32.820 --> 00:02:36.350
in, it'll move and resize items
which are remaining or changing

00:02:36.350 --> 00:02:39.220
position, and then fade out
anything which is disappearing.

00:02:39.220 --> 00:02:41.010
Very handy.

00:02:41.010 --> 00:02:43.720
In API21, or Lollipop,
transitions API

00:02:43.720 --> 00:02:46.390
got a bunch of new and
exciting additions.

00:02:46.390 --> 00:02:48.020
First up was the slides.

00:02:48.020 --> 00:02:50.460
So you can-- and anytime
anything is entering or exiting

00:02:50.460 --> 00:02:52.335
the scene, you can,
like, do so from an edge,

00:02:52.335 --> 00:02:54.890
in a kind of, like,
nice, staggered manner.

00:02:54.890 --> 00:02:57.995
And then there's a bunch
of transforms for whenever

00:02:57.995 --> 00:02:59.120
you're changing the bounds.

00:02:59.120 --> 00:03:01.369
So you can actually just
click the bounds of something

00:03:01.369 --> 00:03:04.460
changing size, or if you're
doing a ChangeTransform, which

00:03:04.460 --> 00:03:07.600
will affect the rotation
and scale of a view,

00:03:07.600 --> 00:03:09.150
or if you're doing
an image-- say

00:03:09.150 --> 00:03:11.914
you're changing from one scale
type to another scale type--

00:03:11.914 --> 00:03:13.330
this will help
animate the changes

00:03:13.330 --> 00:03:18.070
to the matrix of the image view
to change between those scales.

00:03:18.070 --> 00:03:21.650
The transitions object itself
got some upgrades in 21.

00:03:21.650 --> 00:03:24.359
So firstly, it got this
thing called PathMotion,

00:03:24.359 --> 00:03:25.900
which basically
allows you to control

00:03:25.900 --> 00:03:28.130
the movement along a path.

00:03:28.130 --> 00:03:30.497
So here, for example, we're
looking at a transition

00:03:30.497 --> 00:03:31.580
which is a shared element.

00:03:31.580 --> 00:03:33.790
And then we can control the path
that it follows when it moves

00:03:33.790 --> 00:03:35.260
from one state to the other.

00:03:35.260 --> 00:03:38.090
Don't actually do this kind
of horrible loopy thing.

00:03:38.090 --> 00:03:39.425
This is exaggerated for effect.

00:03:39.425 --> 00:03:41.370
Please don't do that.

00:03:41.370 --> 00:03:42.870
And the classes
you'll probably want

00:03:42.870 --> 00:03:45.120
to look at when doing this
kind of control on the path

00:03:45.120 --> 00:03:47.220
is called ArcMotion
and PatternPathMotion.

00:03:47.220 --> 00:03:50.800
And we'll return to those later.

00:03:50.800 --> 00:03:53.320
And lastly, the transitions
API got this new ability

00:03:53.320 --> 00:03:55.580
to control the
propagation and epicenter.

00:03:55.580 --> 00:03:58.270
So what these two
properties let you do

00:03:58.270 --> 00:04:00.190
is to choreograph the
way a group of views

00:04:00.190 --> 00:04:01.282
are going to move.

00:04:01.282 --> 00:04:02.490
Easier shown with an example.

00:04:02.490 --> 00:04:04.531
So in this example here,
when I click on an item,

00:04:04.531 --> 00:04:07.310
see how the views around the
grid all move out together?

00:04:07.310 --> 00:04:08.990
This is called an
explode transition.

00:04:08.990 --> 00:04:11.880
But basically, by passing
in the epicenter, which

00:04:11.880 --> 00:04:13.430
would be the view
you touched on,

00:04:13.430 --> 00:04:15.180
you can then set
the start delays

00:04:15.180 --> 00:04:17.471
on the other views which are
exiting, as well, in order

00:04:17.471 --> 00:04:19.060
to have this
coordinated movement.

00:04:19.060 --> 00:04:20.702
So these are the
kind of APIs to look

00:04:20.702 --> 00:04:22.910
for if you're trying to
build this kind of transition

00:04:22.910 --> 00:04:23.409
yourself.

00:04:25.774 --> 00:04:26.690
So that's transitions.

00:04:26.690 --> 00:04:28.780
It turns out that,
quite frequently,

00:04:28.780 --> 00:04:30.492
when you're changing
scenes and want

00:04:30.492 --> 00:04:32.200
to perform an animation
on those changes,

00:04:32.200 --> 00:04:35.160
it is activity boundaries,
so when you're going

00:04:35.160 --> 00:04:36.760
from one activity to another.

00:04:36.760 --> 00:04:39.540
So API21 added a whole
bunch of new APIs

00:04:39.540 --> 00:04:41.465
to help do this
kind of thing, which

00:04:41.465 --> 00:04:43.510
we call window transitions.

00:04:43.510 --> 00:04:45.080
There's two main types.

00:04:45.080 --> 00:04:47.470
The first type is a
content transition.

00:04:47.470 --> 00:04:51.050
So that's when a window
exits or a new window enters,

00:04:51.050 --> 00:04:53.120
you have an opportunity
to run an animation

00:04:53.120 --> 00:04:54.450
on the content coming in.

00:04:54.450 --> 00:04:56.350
So in this example here, if
we go from the grid and we

00:04:56.350 --> 00:04:57.974
launch into like a
details-type screen,

00:04:57.974 --> 00:04:59.780
where we're going
to enter animation

00:04:59.780 --> 00:05:02.090
on the views coming into
the details, where they're

00:05:02.090 --> 00:05:05.120
sliding in from the bottom.

00:05:05.120 --> 00:05:08.790
The second type is a
shared element transition.

00:05:08.790 --> 00:05:11.930
So this is where--
oh, I went too far.

00:05:11.930 --> 00:05:13.625
Go back.

00:05:13.625 --> 00:05:14.555
Ah.

00:05:14.555 --> 00:05:16.582
There we go.

00:05:16.582 --> 00:05:19.030
A shared element is where,
when you tap on one view,

00:05:19.030 --> 00:05:22.740
the element transitions
smoothly from one activity

00:05:22.740 --> 00:05:24.090
into the second activity.

00:05:24.090 --> 00:05:25.840
And as you just had a
sneak peek of there,

00:05:25.840 --> 00:05:27.790
those two things aren't
mutually exclusive.

00:05:27.790 --> 00:05:32.027
You can, of course, run a
shared element and the content

00:05:32.027 --> 00:05:32.860
transition, as well.

00:05:32.860 --> 00:05:34.734
So here we're sharing
a view and also sliding

00:05:34.734 --> 00:05:38.590
in the unshared
content, as it were.

00:05:38.590 --> 00:05:41.320
Now, a note on
shared element views,

00:05:41.320 --> 00:05:43.310
like-- shared element
transitions, excuse me.

00:05:43.310 --> 00:05:45.749
You can't actually share a
view between two activities.

00:05:45.749 --> 00:05:47.790
You can't pick up an image
view from one activity

00:05:47.790 --> 00:05:49.760
and supplant it
into the other one.

00:05:49.760 --> 00:05:52.280
So what we do, as many
animation things--

00:05:52.280 --> 00:05:54.127
APIs-- do is kind
of like fake it.

00:05:54.127 --> 00:05:56.210
It will allow you to give
the appearance of that's

00:05:56.210 --> 00:05:58.860
what's happening, while
still maintaining your either

00:05:58.860 --> 00:06:00.340
one activity or the other.

00:06:00.340 --> 00:06:03.660
So the way we do it is, when you
click on an image in the source

00:06:03.660 --> 00:06:07.185
activity, we record some
information about that view.

00:06:07.185 --> 00:06:08.560
Just [INAUDIBLE]
information like

00:06:08.560 --> 00:06:10.850
the position and the bounds,
and a few other things.

00:06:10.850 --> 00:06:12.850
And then we pass
that information over

00:06:12.850 --> 00:06:15.090
to the destination activity.

00:06:15.090 --> 00:06:17.110
So we then launch the
destination activity,

00:06:17.110 --> 00:06:19.400
but don't show
anything just yet.

00:06:19.400 --> 00:06:22.390
And then we lay out and
measure all the views

00:06:22.390 --> 00:06:24.940
in the destination activity,
and work out where that shared

00:06:24.940 --> 00:06:26.934
view wants to end up.

00:06:26.934 --> 00:06:28.350
Then we do something
a bit sneaky.

00:06:28.350 --> 00:06:30.630
We actually-- we
apply transforms

00:06:30.630 --> 00:06:33.110
to the shared element
in the destination view

00:06:33.110 --> 00:06:35.710
to kind of put it back
into the position it

00:06:35.710 --> 00:06:37.420
was in in the source
view, and then

00:06:37.420 --> 00:06:39.730
fade out any unshared content.

00:06:39.730 --> 00:06:42.690
So at this point, destination
activity is launched.

00:06:42.690 --> 00:06:44.440
It's the activity on top.

00:06:44.440 --> 00:06:46.300
But it, you know, appears
as if you're still

00:06:46.300 --> 00:06:47.800
in the source
activity, because it's

00:06:47.800 --> 00:06:50.010
been transformed to appear so.

00:06:50.010 --> 00:06:53.810
Then we simply run animations
to move the shared element back

00:06:53.810 --> 00:06:57.290
into place, and fade back
up any unshared content.

00:06:57.290 --> 00:06:57.890
Voila.

00:06:57.890 --> 00:07:00.515
Looks like you've shared a view
from one activity to the other,

00:07:00.515 --> 00:07:01.130
but it hasn't.

00:07:01.130 --> 00:07:02.970
So this is important
to remember,

00:07:02.970 --> 00:07:06.100
that everything happens in
the destination activity.

00:07:06.100 --> 00:07:08.559
You're never actually changing
the view in the source

00:07:08.559 --> 00:07:09.850
activity, other than hiding it.

00:07:13.250 --> 00:07:16.070
So shared element and
content transitions

00:07:16.070 --> 00:07:18.080
can run at a number of points.

00:07:18.080 --> 00:07:20.330
So there's a kind of a life
cycle to think about here.

00:07:20.330 --> 00:07:21.920
So when you go from one
screen to the other,

00:07:21.920 --> 00:07:23.460
so when you call
startActivity, you

00:07:23.460 --> 00:07:25.710
have the opportunity
to run transitions

00:07:25.710 --> 00:07:29.230
on the exiting source activity
and on the entering destination

00:07:29.230 --> 00:07:30.370
activity.

00:07:30.370 --> 00:07:32.460
And then on the way
back, you can also then

00:07:32.460 --> 00:07:34.830
animate on the return
and re-enter them.

00:07:34.830 --> 00:07:37.760
So these are the four
points you can hook into.

00:07:37.760 --> 00:07:40.910
And it's worth noting that these
kind of come in pairs, such

00:07:40.910 --> 00:07:43.510
that if you were to set an
exit transition from the source

00:07:43.510 --> 00:07:44.860
activity-- so, you
know, do something

00:07:44.860 --> 00:07:46.401
with the views on
the way out-- well,

00:07:46.401 --> 00:07:49.180
by default, if you don't specify
a different re-enter one,

00:07:49.180 --> 00:07:52.620
it will just run the same
transition in reverse.

00:07:52.620 --> 00:07:55.850
So worth bearing in mind
that's what's going on there.

00:07:55.850 --> 00:07:58.820
So that's, in a nutshell,
what the transitions API

00:07:58.820 --> 00:07:59.500
is trying to do.

00:07:59.500 --> 00:08:02.530
To give you an example
of how to do it,

00:08:02.530 --> 00:08:05.030
Ben is going to walk you through
an example application that

00:08:05.030 --> 00:08:07.560
implements these APIs.

00:08:07.560 --> 00:08:09.430
BEN: Thank you, Nick.

00:08:09.430 --> 00:08:13.190
So as we saw, we had a couple
of transitions going on there.

00:08:13.190 --> 00:08:16.370
And let's see what we're
going to [? aim at. ?] We will

00:08:16.370 --> 00:08:19.720
have an application having a
master activity and a detail

00:08:19.720 --> 00:08:21.200
activity.

00:08:21.200 --> 00:08:24.990
And once you tap on one of the
items, it will move the image

00:08:24.990 --> 00:08:26.930
and perform a couple
of other transitions.

00:08:26.930 --> 00:08:29.770
So let's get started.

00:08:29.770 --> 00:08:31.800
We have our app.

00:08:31.800 --> 00:08:36.470
Before we actually got
started with the transitions,

00:08:36.470 --> 00:08:38.120
this is what the
system gives us.

00:08:38.120 --> 00:08:41.260
We tap on [INAUDIBLE] views,
and the detail activity

00:08:41.260 --> 00:08:42.470
slides and fades in.

00:08:42.470 --> 00:08:43.400
Pretty cool.

00:08:43.400 --> 00:08:46.710
But in order to
use the transitions

00:08:46.710 --> 00:08:50.820
API, what we want to do is
we first enable the window

00:08:50.820 --> 00:08:53.100
activity transitions
within our app theme,

00:08:53.100 --> 00:08:56.660
or simply inherit from theme
that material, or, as many

00:08:56.660 --> 00:09:02.250
of you use it, AppCompat is also
inheriting from theme.material

00:09:02.250 --> 00:09:05.540
on Lollipop and +.

00:09:05.540 --> 00:09:08.820
So once we've got this,
we can go to the next step

00:09:08.820 --> 00:09:12.000
and do the shared element
transition for the image view.

00:09:12.000 --> 00:09:14.760
In order to do this, we
set a transition name

00:09:14.760 --> 00:09:17.490
on both the starting
and the target view.

00:09:17.490 --> 00:09:20.944
And remember, those have to be--
or should be, at least-- unique

00:09:20.944 --> 00:09:22.360
for the view
hierarchies, in order

00:09:22.360 --> 00:09:27.160
to avoid a couple of issues
that we will cover later on.

00:09:27.160 --> 00:09:30.510
After we have taken
a look into this,

00:09:30.510 --> 00:09:33.480
we need to tell the system
how to actually deal

00:09:33.480 --> 00:09:34.520
with the shared element.

00:09:34.520 --> 00:09:36.850
Because as we just learned,
sharing the element

00:09:36.850 --> 00:09:39.090
is something that happens
within the receiving--

00:09:39.090 --> 00:09:40.790
sorry, the detail activity.

00:09:40.790 --> 00:09:43.230
So we have to tell
the system that,

00:09:43.230 --> 00:09:46.320
at the point where we actually
started the new activity,

00:09:46.320 --> 00:09:47.920
that a couple of
things have changed.

00:09:47.920 --> 00:09:51.940
We do this by calling the
makeSceneTransitionAnimation,

00:09:51.940 --> 00:09:54.650
pass it the image that we
want to share, as well as

00:09:54.650 --> 00:09:56.390
the identifier for target view.

00:09:56.390 --> 00:09:58.570
So the name that we
just said on that.

00:09:58.570 --> 00:09:59.220
Pretty cool.

00:09:59.220 --> 00:10:03.220
Pretty straightforward
and awesome to use.

00:10:03.220 --> 00:10:06.010
After that, we add
the exiting transition

00:10:06.010 --> 00:10:09.740
for the grid, which this is
the explode that we just saw,

00:10:09.740 --> 00:10:12.224
which is probably
one of the things

00:10:12.224 --> 00:10:14.640
that you should think about
if you actually want to do it,

00:10:14.640 --> 00:10:16.679
because it can confuse users.

00:10:16.679 --> 00:10:18.720
It can be very handy, as
well, on the other hand.

00:10:18.720 --> 00:10:21.000
So make sure that you don't
just throw explodes in

00:10:21.000 --> 00:10:25.540
everywhere, because it can be
not helpful, on the other hand,

00:10:25.540 --> 00:10:26.580
as well.

00:10:26.580 --> 00:10:30.550
So to do this, we create a
transition in the Transitions

00:10:30.550 --> 00:10:32.580
folder called grid_exit.

00:10:32.580 --> 00:10:34.970
And we just say
explode, and that's it

00:10:34.970 --> 00:10:37.630
from the declaration
of the transition.

00:10:37.630 --> 00:10:39.370
Pretty straightforward again.

00:10:39.370 --> 00:10:43.280
We then set that in-- we then
have to declare the window exit

00:10:43.280 --> 00:10:45.810
transition within
our homes activity--

00:10:45.810 --> 00:10:48.320
home activity's theme.

00:10:48.320 --> 00:10:51.660
And as we just learned, this
will be replayed, reversed,

00:10:51.660 --> 00:10:56.140
on the way back in when the
activity does its reenter

00:10:56.140 --> 00:11:00.770
transition, when we press
back from the detail activity.

00:11:00.770 --> 00:11:02.540
Let's go and take the next step.

00:11:02.540 --> 00:11:05.400
For the detail activity,
we also want the content

00:11:05.400 --> 00:11:09.220
that is not shared to be slide--
to slide in from the bottom.

00:11:09.220 --> 00:11:12.450
You don't just-- you can't
just create the transitions

00:11:12.450 --> 00:11:15.320
from XML, but you also can
do this directly within code.

00:11:15.320 --> 00:11:18.160
So let's take a look
at how you can do that.

00:11:18.160 --> 00:11:20.207
We just created a
new slide transition.

00:11:20.207 --> 00:11:21.790
We want to slide--
to have the content

00:11:21.790 --> 00:11:22.831
slide in from the bottom.

00:11:22.831 --> 00:11:25.020
And we want to have
it enter at full speed

00:11:25.020 --> 00:11:26.947
and then ease in all
the way up until it

00:11:26.947 --> 00:11:28.030
reaches its resting point.

00:11:28.030 --> 00:11:30.950
To do this, we inflate
an interpolator

00:11:30.950 --> 00:11:32.360
to do exactly that.

00:11:32.360 --> 00:11:34.880
Then on the window of
[INAUDIBLE] activity,

00:11:34.880 --> 00:11:36.690
we set the enter
transition to be

00:11:36.690 --> 00:11:38.280
the transition we just created.

00:11:38.280 --> 00:11:41.010
This can be a lot more complex
than this if you want to,

00:11:41.010 --> 00:11:43.710
but to get started, just
adding one transition, seeing

00:11:43.710 --> 00:11:45.970
if you actually got the
right things in place,

00:11:45.970 --> 00:11:47.530
works pretty well.

00:11:47.530 --> 00:11:49.470
Since we are already
in the motion

00:11:49.470 --> 00:11:52.620
of getting things feel more
natural by having them enter

00:11:52.620 --> 00:11:55.294
very quickly, let's take
a look at another thing

00:11:55.294 --> 00:11:56.460
that Nick already mentioned.

00:11:56.460 --> 00:11:58.060
It's curved motion.

00:11:58.060 --> 00:12:00.410
So usually, you have
just one linear motion

00:12:00.410 --> 00:12:01.750
of the shared element view.

00:12:01.750 --> 00:12:03.880
But we want to have
this motion in the end

00:12:03.880 --> 00:12:06.750
so that it fills
while you grow--

00:12:06.750 --> 00:12:09.350
while the view is
growing, it should also

00:12:09.350 --> 00:12:10.830
have a curved path
that it follows

00:12:10.830 --> 00:12:12.960
to make it feel more natural.

00:12:12.960 --> 00:12:16.120
Let's take a look at one of the
transitions that we use there.

00:12:16.120 --> 00:12:17.790
We have a transition
set which is

00:12:17.790 --> 00:12:21.640
a-- which is a collection
of different transitions

00:12:21.640 --> 00:12:24.740
that will be run at a
point in the animation.

00:12:24.740 --> 00:12:27.450
And we basically just have
to do this on the SetBounds.

00:12:27.450 --> 00:12:30.710
We just say we want to
add an ArcMotion to that.

00:12:30.710 --> 00:12:32.680
Pretty straightforward
again, and it

00:12:32.680 --> 00:12:35.020
helps to get exactly this done.

00:12:35.020 --> 00:12:37.170
You can also set
maximum, minimum angles

00:12:37.170 --> 00:12:39.170
on that to make sure
that the user actually

00:12:39.170 --> 00:12:41.080
sees what's going on.

00:12:41.080 --> 00:12:45.250
You shouldn't exaggerate,
like Nick earlier said.

00:12:45.250 --> 00:12:50.210
So but for development purposes,
this can be pretty handy.

00:12:50.210 --> 00:12:51.950
So those are all
built-in transitions.

00:12:51.950 --> 00:12:53.450
Let's take a look
at a thing that we

00:12:53.450 --> 00:12:56.890
can do with getting
into custom transitions.

00:12:56.890 --> 00:12:58.570
We also want to share
the detail text.

00:12:58.570 --> 00:13:02.230
So the title-- this is
the author of the picture.

00:13:02.230 --> 00:13:05.320
And we did a couple of
things there other than just

00:13:05.320 --> 00:13:07.230
going-- just sharing that.

00:13:07.230 --> 00:13:08.460
We also grow it.

00:13:08.460 --> 00:13:12.030
And to do this, from the
declaration point of view,

00:13:12.030 --> 00:13:14.490
we just go back to the
transition that we already had,

00:13:14.490 --> 00:13:16.870
add another transition--
add a target

00:13:16.870 --> 00:13:21.470
to both of the transitions to
have the initial transition set

00:13:21.470 --> 00:13:24.510
only target the photo
that we already shared.

00:13:24.510 --> 00:13:28.630
Then, we go and add
a second transition

00:13:28.630 --> 00:13:32.270
set targeting the author that
we want to share, as well.

00:13:32.270 --> 00:13:35.570
And add a TextResize
transition to that,

00:13:35.570 --> 00:13:37.870
which is a custom
transition that George

00:13:37.870 --> 00:13:41.180
will cover in a minute.

00:13:41.180 --> 00:13:43.390
And then, of course,
we need to tell

00:13:43.390 --> 00:13:45.720
the system what's going on,
that things have changed.

00:13:45.720 --> 00:13:48.270
So far, we changed-- we shared
the image and the target

00:13:48.270 --> 00:13:49.030
directly.

00:13:49.030 --> 00:13:50.730
If you only have
one shared element,

00:13:50.730 --> 00:13:52.340
this is the right--
this is a good way

00:13:52.340 --> 00:13:55.740
to actually get started with
that, to share this information

00:13:55.740 --> 00:13:58.780
with the detail activity.

00:13:58.780 --> 00:14:00.610
If you have multiple
shared elements,

00:14:00.610 --> 00:14:03.624
though, you want to
have pairs, which can

00:14:03.624 --> 00:14:04.790
be created in separate ways.

00:14:04.790 --> 00:14:05.956
But this is one of the ways.

00:14:05.956 --> 00:14:07.571
We just create a
pair which basically

00:14:07.571 --> 00:14:08.820
contains the same information.

00:14:08.820 --> 00:14:12.290
It contains the detail view--
the starting view, as well

00:14:12.290 --> 00:14:15.000
as the target transition name.

00:14:15.000 --> 00:14:19.350
And then, instead of
having this on here,

00:14:19.350 --> 00:14:22.130
you just pass those
two pairs in here

00:14:22.130 --> 00:14:24.050
and start your activity as is.

00:14:26.670 --> 00:14:29.510
And after all this is done,
this is the nice transition

00:14:29.510 --> 00:14:31.320
set you get.

00:14:31.320 --> 00:14:36.770
And with that, let's take
a look behind the curtain.

00:14:36.770 --> 00:14:37.685
GEORGE: All right.

00:14:37.685 --> 00:14:40.060
How's that firehose, everyone?

00:14:40.060 --> 00:14:41.090
Good?

00:14:41.090 --> 00:14:43.106
Let's drink some more.

00:14:43.106 --> 00:14:44.700
All right, let's
talk about some--

00:14:44.700 --> 00:14:46.330
making your own transitions.

00:14:46.330 --> 00:14:48.940
We saw the built-in
ones-- ChangeBounds,

00:14:48.940 --> 00:14:50.360
ChangeTransform, those ones.

00:14:50.360 --> 00:14:52.210
Those are great
basic transitions,

00:14:52.210 --> 00:14:55.480
but if you want to change
the text size, for example,

00:14:55.480 --> 00:14:56.662
it's not built in.

00:14:56.662 --> 00:14:57.870
We have to do that ourselves.

00:14:57.870 --> 00:14:59.860
So let's see how we
go about making it.

00:14:59.860 --> 00:15:03.730
Let's make this resize
text transition.

00:15:03.730 --> 00:15:04.410
All right.

00:15:04.410 --> 00:15:06.480
So we need to capture
some data, right?

00:15:06.480 --> 00:15:08.764
And we need, of
course, the font size.

00:15:08.764 --> 00:15:09.680
That's obvious, right?

00:15:09.680 --> 00:15:11.110
We need to capture the
font size at the beginning,

00:15:11.110 --> 00:15:12.510
capture the font
size at the end.

00:15:12.510 --> 00:15:14.940
And we also need
some other data.

00:15:14.940 --> 00:15:18.070
But when we return the
data set that we're

00:15:18.070 --> 00:15:20.401
going to track in
our transition,

00:15:20.401 --> 00:15:22.400
we only want-- we only
care about the font size.

00:15:22.400 --> 00:15:23.858
Because if the
other stuff changes,

00:15:23.858 --> 00:15:26.570
like if the bounds changes
only on your text view,

00:15:26.570 --> 00:15:28.950
we're not going to do
any transition on that.

00:15:28.950 --> 00:15:31.180
We're only transitioning
when the text size changes.

00:15:31.180 --> 00:15:33.494
So we just ignore
the rest of the data.

00:15:33.494 --> 00:15:34.660
We still want to capture it.

00:15:34.660 --> 00:15:37.390
So that's why we have those
pieces of information,

00:15:37.390 --> 00:15:40.380
that tag that we're going to
use in our transition values.

00:15:40.380 --> 00:15:45.050
But we just don't want to keep
that for the transition API--

00:15:45.050 --> 00:15:47.970
for the transition framework.

00:15:47.970 --> 00:15:50.155
So when we capture our start
values and end values--

00:15:50.155 --> 00:15:53.570
you remember this from what Nick
said-- we want to capture them,

00:15:53.570 --> 00:15:55.010
and we said this
is the same thing

00:15:55.010 --> 00:15:56.260
in both the start and the end.

00:15:56.260 --> 00:15:59.190
We have a common function to do.

00:15:59.190 --> 00:16:02.330
And first thing we have to do is
we can just throw away anything

00:16:02.330 --> 00:16:03.670
that's not a text view, right?

00:16:03.670 --> 00:16:05.720
We're only animating text views.

00:16:05.720 --> 00:16:07.675
So anything else,
we just ignore.

00:16:07.675 --> 00:16:10.390
Of course, we want to capture
the font size and the text size

00:16:10.390 --> 00:16:10.987
here.

00:16:10.987 --> 00:16:12.820
And we also want to
capture some other data.

00:16:12.820 --> 00:16:15.349
And I just stuck this all
in its own class and kind

00:16:15.349 --> 00:16:16.390
of hide that information.

00:16:16.390 --> 00:16:19.540
But it's basic things like
the bounds of the text view,

00:16:19.540 --> 00:16:21.744
because we're going to need
that for the animation.

00:16:21.744 --> 00:16:22.590
All right.

00:16:22.590 --> 00:16:24.660
When you animate
text, what do we do?

00:16:24.660 --> 00:16:28.096
Are we going to
animate the font size?

00:16:28.096 --> 00:16:30.470
Well if we do that, we're
going to thrash our font cache,

00:16:30.470 --> 00:16:31.170
right?

00:16:31.170 --> 00:16:33.520
Every font size between
the start and the end

00:16:33.520 --> 00:16:36.150
is going to be used and
created in our font cache,

00:16:36.150 --> 00:16:40.220
and we're going to have,
like, font size 26.281.

00:16:40.220 --> 00:16:42.380
And you know, we're never
going to use that again.

00:16:42.380 --> 00:16:43.750
It's just going to
thrash our font cache.

00:16:43.750 --> 00:16:44.970
We don't want to do that.

00:16:44.970 --> 00:16:45.830
So what we're going
to do is we're

00:16:45.830 --> 00:16:48.790
going to capture a bitmap at the
start and a bitmap at the end,

00:16:48.790 --> 00:16:50.670
and we're going to animate.

00:16:50.670 --> 00:16:53.365
So here, if we animate
just the start,

00:16:53.365 --> 00:16:55.190
it looks pretty terrible, right?

00:16:55.190 --> 00:16:59.040
You see that thing blown
up from the beginning.

00:16:59.040 --> 00:17:01.550
And also, if you animate just
from the large size down,

00:17:01.550 --> 00:17:04.170
you're going to end up with
a little bit of kerning

00:17:04.170 --> 00:17:06.410
error in the final text view.

00:17:06.410 --> 00:17:08.710
And you might not see
it here on this slide,

00:17:08.710 --> 00:17:10.460
but you're definitely
going to see it when

00:17:10.460 --> 00:17:11.530
you're looking at the phone.

00:17:11.530 --> 00:17:13.363
And you really don't
want to see your user--

00:17:13.363 --> 00:17:15.170
users to see that effect.

00:17:15.170 --> 00:17:17.640
You want to see a
perfect transition.

00:17:17.640 --> 00:17:19.450
So instead of this,
what we're going to do

00:17:19.450 --> 00:17:21.869
is we're going to
animate piecewise.

00:17:21.869 --> 00:17:24.140
So we animate a little
bit from the start.

00:17:24.140 --> 00:17:27.670
And you don't really see
that blown-up image, right?

00:17:27.670 --> 00:17:29.520
And then we're
going to swap it out

00:17:29.520 --> 00:17:32.050
for the final image,
just scaled down.

00:17:32.050 --> 00:17:34.590
And then we're going to
animate the rest of the way.

00:17:34.590 --> 00:17:37.650
And because it's done
during the motion,

00:17:37.650 --> 00:17:40.210
nobody will see that
animation, that change,

00:17:40.210 --> 00:17:42.708
that swap there in the middle.

00:17:42.708 --> 00:17:43.600
OK?

00:17:43.600 --> 00:17:45.052
Let's see how we do that.

00:17:45.052 --> 00:17:47.990
When we create our animator,
first thing we have to do,

00:17:47.990 --> 00:17:50.861
of course, is to capture-- we
use our start values and end

00:17:50.861 --> 00:17:51.360
values.

00:17:51.360 --> 00:17:55.570
But here, we are checking the
start values if they're null.

00:17:55.570 --> 00:17:56.865
What does null mean?

00:17:56.865 --> 00:17:58.590
It means the view didn't exist.

00:17:58.590 --> 00:18:01.280
So if the view didn't exist at
the beginning or at the end,

00:18:01.280 --> 00:18:03.652
we don't want to animate size.

00:18:03.652 --> 00:18:04.610
That's for fade, right?

00:18:04.610 --> 00:18:07.230
That's for the
other transitions.

00:18:07.230 --> 00:18:09.541
OK?

00:18:09.541 --> 00:18:11.040
Next thing we have
to do, of course,

00:18:11.040 --> 00:18:13.090
is capture the
start bitmap, right?

00:18:13.090 --> 00:18:14.510
So we just capture that bitmap.

00:18:14.510 --> 00:18:16.940
That's where that
extra data is useful.

00:18:16.940 --> 00:18:20.320
And we also have to capture
the end state bitmap.

00:18:20.320 --> 00:18:24.180
And then, of course, we have
to say, don't-- text view,

00:18:24.180 --> 00:18:25.120
don't draw yourself.

00:18:25.120 --> 00:18:26.490
Set yourself to transparent.

00:18:26.490 --> 00:18:29.200
All that text stuff,
make it transparent.

00:18:29.200 --> 00:18:30.620
We don't want you to draw it.

00:18:30.620 --> 00:18:34.570
Because what we're going to do
is create a drawable with those

00:18:34.570 --> 00:18:36.790
bitmaps that we just
captured that's going

00:18:36.790 --> 00:18:39.730
to do the swapping for us.

00:18:39.730 --> 00:18:40.230
All right.

00:18:40.230 --> 00:18:42.592
So we need to animate some
things on that drawable.

00:18:42.592 --> 00:18:43.800
One of them is the font size.

00:18:43.800 --> 00:18:45.900
We're going to have this
font size that we're going

00:18:45.900 --> 00:18:47.000
to animate on the drawable.

00:18:47.000 --> 00:18:48.900
And we also have to
animate those other things,

00:18:48.900 --> 00:18:50.191
all that other data I captured.

00:18:50.191 --> 00:18:51.870
But we need to know that stuff.

00:18:51.870 --> 00:18:54.590
So we get property
values holders for those,

00:18:54.590 --> 00:18:57.270
and then we create
the animator, right?

00:18:57.270 --> 00:18:59.180
And then we're all
set to return, right?

00:18:59.180 --> 00:19:00.885
Everyone?

00:19:00.885 --> 00:19:01.990
Not quite.

00:19:01.990 --> 00:19:04.110
Remember what we just did?

00:19:04.110 --> 00:19:05.790
We set it to be invisible?

00:19:05.790 --> 00:19:08.120
Like no, don't draw that text?

00:19:08.120 --> 00:19:09.790
When the animation
is done, we want it

00:19:09.790 --> 00:19:11.081
to go back to the normal state.

00:19:11.081 --> 00:19:13.200
So we set the text
color back to normal,

00:19:13.200 --> 00:19:15.110
and we remove that
overlay we just added.

00:19:17.571 --> 00:19:18.070
All right.

00:19:18.070 --> 00:19:18.778
So we're all set.

00:19:18.778 --> 00:19:20.310
Our transition looks great.

00:19:20.310 --> 00:19:21.150
We're all set.

00:19:21.150 --> 00:19:23.360
Let's put it into
activity transition.

00:19:23.360 --> 00:19:23.860
All right.

00:19:23.860 --> 00:19:24.818
What does it look like?

00:19:27.170 --> 00:19:29.580
Holy moly.

00:19:29.580 --> 00:19:31.070
Did you do this?

00:19:31.070 --> 00:19:32.950
All right.

00:19:32.950 --> 00:19:34.120
No, no, OK.

00:19:34.120 --> 00:19:37.080
Remember what happened-- what
Nick was saying about this.

00:19:37.080 --> 00:19:42.320
The values are captured in
the destination activity.

00:19:42.320 --> 00:19:44.980
And when the values are captured
in the destination activity,

00:19:44.980 --> 00:19:47.650
text view doesn't
have the text size

00:19:47.650 --> 00:19:50.070
of the source activity's text.

00:19:50.070 --> 00:19:51.930
So it doesn't even
know that it was there.

00:19:51.930 --> 00:19:54.170
It doesn't know what
that font size was.

00:19:54.170 --> 00:19:57.130
So what we have to do is send
that along as extra data.

00:19:57.130 --> 00:20:01.144
Now, the activity
transitions system

00:20:01.144 --> 00:20:02.560
will send the basic
stuff for you.

00:20:02.560 --> 00:20:07.637
It will send you position,
size, and image scale,

00:20:07.637 --> 00:20:09.470
right, because those
are very common things.

00:20:09.470 --> 00:20:10.980
And those are the things that
are built into the system.

00:20:10.980 --> 00:20:12.990
Those transitions are
built into the system.

00:20:12.990 --> 00:20:15.650
But the other stuff, anything
that you need to animate,

00:20:15.650 --> 00:20:18.220
you're going to
send along, as well.

00:20:18.220 --> 00:20:21.350
So we put those in
as intent extras.

00:20:21.350 --> 00:20:23.040
That's easy enough.

00:20:23.040 --> 00:20:27.250
And then we get that intent
extra in the target activity,

00:20:27.250 --> 00:20:30.500
and we get the-- our font size.

00:20:30.500 --> 00:20:32.734
And then we call this
SharedElementCallback.

00:20:32.734 --> 00:20:34.150
The SharedElementCallback
is where

00:20:34.150 --> 00:20:38.670
you put all the really
complex part of your activity

00:20:38.670 --> 00:20:39.170
transition.

00:20:39.170 --> 00:20:42.520
This is a callback that has lots
of extra stuff for you to hook

00:20:42.520 --> 00:20:45.400
into, to do the little
tweaking that you need to do.

00:20:45.400 --> 00:20:48.940
And during the start, what
we have to do, of course,

00:20:48.940 --> 00:20:53.530
is capture the transition-- the
text size of the current text

00:20:53.530 --> 00:20:55.740
view, and then set
it to the one that we

00:20:55.740 --> 00:20:58.256
want it to be in the start.

00:20:58.256 --> 00:21:00.630
And in the end, of course, we
have to reset the text size

00:21:00.630 --> 00:21:01.960
back to what it was before.

00:21:01.960 --> 00:21:04.870
Otherwise, you just animate
to the little tiny font

00:21:04.870 --> 00:21:07.360
from the start.

00:21:07.360 --> 00:21:08.613
So what happens now?

00:21:08.613 --> 00:21:12.120
You end up with a
beautiful transition

00:21:12.120 --> 00:21:14.210
from activity to activity.

00:21:14.210 --> 00:21:15.734
Nice and smooth.

00:21:15.734 --> 00:21:18.150
Now Nick's going to come back
and show this really awesome

00:21:18.150 --> 00:21:20.670
transition that he made up.

00:21:20.670 --> 00:21:21.840
You guys have to see this.

00:21:21.840 --> 00:21:24.490
NICK: Thanks, [INAUDIBLE].

00:21:24.490 --> 00:21:25.920
Awesome.

00:21:25.920 --> 00:21:28.120
So that's been some
pretty cool transitions

00:21:28.120 --> 00:21:29.880
we've looked at so far.

00:21:29.880 --> 00:21:32.120
One of my favorite things
in the updated motion

00:21:32.120 --> 00:21:34.310
guidelines in the materials
spec is this section

00:21:34.310 --> 00:21:35.810
on transforming things.

00:21:35.810 --> 00:21:37.240
If you haven't
seen this, I highly

00:21:37.240 --> 00:21:39.366
recommend you check out
both this, as well as there

00:21:39.366 --> 00:21:42.810
was an awesome session at I/O
on Wednesday by John [INAUDIBLE]

00:21:42.810 --> 00:21:45.014
about the updated
motion guidelines.

00:21:45.014 --> 00:21:46.430
This talk's about
material design,

00:21:46.430 --> 00:21:49.320
about how things are, you
know, sheets of digital paper

00:21:49.320 --> 00:21:51.540
and so on, and that they
can transform from one thing

00:21:51.540 --> 00:21:52.510
to another.

00:21:52.510 --> 00:21:54.870
This transition in
particular caught my eye,

00:21:54.870 --> 00:21:56.890
which is transitioning--
transforming,

00:21:56.890 --> 00:21:59.800
sorry-- a Floating Action
Button, this circular FAB,

00:21:59.800 --> 00:22:02.699
into a different
sheet of material.

00:22:02.699 --> 00:22:04.240
I thought this was
pretty cool, and I

00:22:04.240 --> 00:22:06.300
wanted to use this in
an opensource app which

00:22:06.300 --> 00:22:07.990
I built called Plaid.

00:22:07.990 --> 00:22:11.020
And I wanted to
transform from this FAB

00:22:11.020 --> 00:22:12.890
here into this
bottom sheet, which

00:22:12.890 --> 00:22:15.787
is essentially a linear layout.

00:22:15.787 --> 00:22:17.370
So unlike the
transitions we've looked

00:22:17.370 --> 00:22:19.320
at so far, which are
pretty much acting

00:22:19.320 --> 00:22:21.562
on the same kind of view--
so transitioning an image

00:22:21.562 --> 00:22:23.520
view in one window to an
image view in another,

00:22:23.520 --> 00:22:26.360
or a text view to a text view,
for example-- this is, like,

00:22:26.360 --> 00:22:26.970
pretty different, right?

00:22:26.970 --> 00:22:29.011
We're going to go from a
floating action button--

00:22:29.011 --> 00:22:32.840
basically an image button-- to
a linear layout, essentially.

00:22:32.840 --> 00:22:36.040
So how do we do that?

00:22:36.040 --> 00:22:37.950
So it's really, really
important to remember,

00:22:37.950 --> 00:22:39.860
as we've talked about before,
that everything happens

00:22:39.860 --> 00:22:42.276
in the destination window, so
in the window with this kind

00:22:42.276 --> 00:22:43.780
of bottom sheet here.

00:22:43.780 --> 00:22:45.530
So as with most
animation things,

00:22:45.530 --> 00:22:48.170
we do some tricks to make it
look like the one thing is

00:22:48.170 --> 00:22:50.420
transforming into the other.

00:22:50.420 --> 00:22:52.860
So what we do is, in
the destination window,

00:22:52.860 --> 00:22:57.830
we use setTranslationXandY to
basically center the dialogue

00:22:57.830 --> 00:22:59.509
on the-- the
coordinates of the FAB.

00:22:59.509 --> 00:23:00.550
So where it started from.

00:23:00.550 --> 00:23:02.820
Just TranslationXandY.

00:23:02.820 --> 00:23:04.530
And then we use the
view overlay again.

00:23:04.530 --> 00:23:05.870
So if you haven't
used the view overlay,

00:23:05.870 --> 00:23:07.410
this is the ability
to add, like,

00:23:07.410 --> 00:23:09.860
drawables on top of the view.

00:23:09.860 --> 00:23:12.690
So we add a solid color
drawable, as well as

00:23:12.690 --> 00:23:14.930
an icon on top of
the view, and locate

00:23:14.930 --> 00:23:16.910
that it sits in the center.

00:23:16.910 --> 00:23:19.870
And then we run some
animations on this entire view.

00:23:19.870 --> 00:23:23.460
So first, we fade out
the color and the icon.

00:23:23.460 --> 00:23:25.130
We run a circular
reveal animation.

00:23:25.130 --> 00:23:27.490
So that applies a
circular clipping mask.

00:23:27.490 --> 00:23:30.030
And we start from
the size of the FAB,

00:23:30.030 --> 00:23:32.120
and then we animate
that clip mask out

00:23:32.120 --> 00:23:35.340
to show the whole dialogue.

00:23:35.340 --> 00:23:38.630
And at the same time, we
move along a curved path

00:23:38.630 --> 00:23:41.200
using this motion thing.

00:23:41.200 --> 00:23:43.630
So when we run all of those
animations at the same time,

00:23:43.630 --> 00:23:44.490
you get this effect.

00:23:44.490 --> 00:23:46.770
It looks like you're
transforming from the FAB

00:23:46.770 --> 00:23:48.865
to the dialogue.

00:23:48.865 --> 00:23:52.580
So do you want to see
how we build this?

00:23:52.580 --> 00:23:53.080
All right.

00:23:53.080 --> 00:23:55.180
Before we do, let's think
about what information

00:23:55.180 --> 00:23:56.290
we need to build it.

00:23:56.290 --> 00:23:57.840
So in order to build
this transition,

00:23:57.840 --> 00:24:00.780
we need to know the
positions, like where the FAB

00:24:00.780 --> 00:24:02.524
was to where the dialogue is.

00:24:02.524 --> 00:24:04.190
We need to know the
color it's going to,

00:24:04.190 --> 00:24:06.190
and the icon because,
as we've talked about,

00:24:06.190 --> 00:24:07.984
what we keep hammering
on about, it all

00:24:07.984 --> 00:24:09.400
happens in the
destination window.

00:24:09.400 --> 00:24:13.010
So the sheet doesn't know
anything about the FAB, right?

00:24:13.010 --> 00:24:14.820
So how do we get all
this information?

00:24:18.270 --> 00:24:20.260
So the position is pretty easy.

00:24:20.260 --> 00:24:21.727
As George said,
the position is one

00:24:21.727 --> 00:24:24.060
of the few things that actually
does get passed through.

00:24:24.060 --> 00:24:26.840
So we can just-- in the
captureStart and captureEnd

00:24:26.840 --> 00:24:28.550
bounds, we do the same thing.

00:24:28.550 --> 00:24:31.660
We just call
CaptureValues, and we

00:24:31.660 --> 00:24:35.190
put those bounds into the
value-- transition values map.

00:24:35.190 --> 00:24:37.380
And we'll get access to
those a bit later on.

00:24:37.380 --> 00:24:40.270
So we have the bounds of
the FAB and the dialogue.

00:24:40.270 --> 00:24:44.120
So for the color and
the icon, I basically

00:24:44.120 --> 00:24:47.020
created a couple constructors
that you can use.

00:24:47.020 --> 00:24:50.410
So just like views,
transitions can have--

00:24:50.410 --> 00:24:51.700
can be inflated from XML.

00:24:51.700 --> 00:24:53.650
So when we looked at
the XML transition sets

00:24:53.650 --> 00:24:56.350
that Ben was showing
you before, you

00:24:56.350 --> 00:25:00.070
can define your own transitions,
as we did with the text resize,

00:25:00.070 --> 00:25:02.080
but you can also add
your own attributes.

00:25:02.080 --> 00:25:03.920
So here's an example
where we're doing,

00:25:03.920 --> 00:25:06.190
you know,
context.obtainStyledAttributes,

00:25:06.190 --> 00:25:07.770
just as you would
in the custom view.

00:25:07.770 --> 00:25:10.640
And you can define your own
declare [INAUDIBLE] stylables

00:25:10.640 --> 00:25:12.140
and pull them out
of that attribute.

00:25:12.140 --> 00:25:16.930
So we could pass in the color
and the icon free attributes.

00:25:16.930 --> 00:25:18.880
Just a quick note.

00:25:18.880 --> 00:25:20.340
We're setting the
path motion here.

00:25:20.340 --> 00:25:21.964
So this is what we
talked about before,

00:25:21.964 --> 00:25:23.909
adding a path motion to
control the path which

00:25:23.909 --> 00:25:25.200
it's going to move along later.

00:25:25.200 --> 00:25:28.380
And we'll come back to
using that in a second.

00:25:28.380 --> 00:25:31.796
But as an alternative, I
also added a dynamic way

00:25:31.796 --> 00:25:33.670
of determining this,
because there's actually

00:25:33.670 --> 00:25:35.836
different entry points that
I have into this screen.

00:25:35.836 --> 00:25:40.520
So I couldn't statically
declare in the details activity

00:25:40.520 --> 00:25:42.450
what color and icon it
was going to come from,

00:25:42.450 --> 00:25:44.116
because it can come
from multiple places

00:25:44.116 --> 00:25:45.370
into that screen.

00:25:45.370 --> 00:25:47.150
So I added a
constructor which will

00:25:47.150 --> 00:25:51.800
pass in the color
and the icon to use.

00:25:51.800 --> 00:25:53.740
And so we can do
the technique which

00:25:53.740 --> 00:25:55.660
George talked about
earlier of using

00:25:55.660 --> 00:25:58.050
intent extras to pass this
information to the details

00:25:58.050 --> 00:25:58.890
activity.

00:25:58.890 --> 00:26:01.284
But here's a pattern which
I found really helpful

00:26:01.284 --> 00:26:02.200
for implementing this.

00:26:02.200 --> 00:26:04.199
This isn't part of the
transitions API contract,

00:26:04.199 --> 00:26:06.200
but it's just a
pattern I found useful.

00:26:06.200 --> 00:26:09.060
So I added a static
method onto the transition

00:26:09.060 --> 00:26:11.860
object itself called addExtras.

00:26:11.860 --> 00:26:14.520
So you can call this
from the source activity,

00:26:14.520 --> 00:26:16.020
from the activity
which has the FAB

00:26:16.020 --> 00:26:18.930
and knows about the
icon and the color.

00:26:18.930 --> 00:26:20.790
So pass in those things
in a static method,

00:26:20.790 --> 00:26:23.470
and it will add them
to the extras for you.

00:26:23.470 --> 00:26:25.267
And then a corresponding
setup method,

00:26:25.267 --> 00:26:27.850
I call it, which you would call
from the destination activity,

00:26:27.850 --> 00:26:30.650
so from the activity with the
bottom sheet, which will then

00:26:30.650 --> 00:26:35.450
pull those activity-- those
parameters out to the intent

00:26:35.450 --> 00:26:36.590
extra fields.

00:26:36.590 --> 00:26:40.990
And then it will actually create
an instance of this transition

00:26:40.990 --> 00:26:42.780
object which I
called FabTransform,

00:26:42.780 --> 00:26:46.210
itself set the target,
and then set it

00:26:46.210 --> 00:26:48.666
on the window as the
SharedElementEnter.

00:26:48.666 --> 00:26:50.040
The reason I like
this pattern is

00:26:50.040 --> 00:26:52.801
because it means it keeps
the keys and so on private

00:26:52.801 --> 00:26:53.550
to the transition.

00:26:53.550 --> 00:26:55.383
You don't have to worry
about exposing that.

00:26:55.383 --> 00:26:57.839
It kind of keeps it
nicely encapsulated.

00:26:57.839 --> 00:27:00.380
Notice here that we're using
setSharedEnterElementTransition.

00:27:02.946 --> 00:27:04.570
But if you remember
from the animation,

00:27:04.570 --> 00:27:06.340
it goes both from
the FAB to the sheet,

00:27:06.340 --> 00:27:08.770
as well as animating
from the sheet back down.

00:27:08.770 --> 00:27:11.810
So what that means is
the element-- sorry,

00:27:11.810 --> 00:27:15.490
the shared enter transition was
going to get used on the return

00:27:15.490 --> 00:27:17.085
transition, as well.

00:27:17.085 --> 00:27:17.960
So bear that in mind.

00:27:17.960 --> 00:27:20.040
It's going to become
important in a second.

00:27:20.040 --> 00:27:20.540
Right.

00:27:20.540 --> 00:27:21.831
So we have all the information.

00:27:21.831 --> 00:27:23.665
We've created the
transition object itself.

00:27:23.665 --> 00:27:25.290
How do we actually
create the animators

00:27:25.290 --> 00:27:28.900
to run this transition,
to make it all happen?

00:27:28.900 --> 00:27:30.430
First off, we grab
out the bounds

00:27:30.430 --> 00:27:32.940
that we saved into the
transitions values map,

00:27:32.940 --> 00:27:35.230
and hold onto those.

00:27:35.230 --> 00:27:37.320
I then do something where
I just check basically

00:27:37.320 --> 00:27:39.170
which of those is wider.

00:27:39.170 --> 00:27:42.365
It's maybe not the most
sophisticated method,

00:27:42.365 --> 00:27:44.490
but that's how I work out
if I'm going from the FAB

00:27:44.490 --> 00:27:46.990
to the dialogue or from
the dialogue to the FAB.

00:27:46.990 --> 00:27:50.030
I'll basically use
that Boolean later on

00:27:50.030 --> 00:27:51.874
to set up the
appropriate animation.

00:27:51.874 --> 00:27:54.290
So for example, if you're going
from the FAB to the sheet,

00:27:54.290 --> 00:27:56.616
you do an expanding
circular view,

00:27:56.616 --> 00:27:58.490
or if you're going from
the sheet to the FAB,

00:27:58.490 --> 00:28:01.220
you do a contracting circular
reveal, or circular hide.

00:28:01.220 --> 00:28:01.720
Don't know.

00:28:04.390 --> 00:28:09.060
So next up, the view is
always the endValues.view.

00:28:09.060 --> 00:28:11.435
So even though you're giving
the start values and the end

00:28:11.435 --> 00:28:13.952
values, you're always acting
on the endValues.view.

00:28:13.952 --> 00:28:15.660
And something that
took me a little while

00:28:15.660 --> 00:28:18.480
to get my head around was
that that view is always

00:28:18.480 --> 00:28:21.000
in the state that
it ends up in, which

00:28:21.000 --> 00:28:25.347
is to say when we were going
from the FAB to the dialogue,

00:28:25.347 --> 00:28:27.680
it was already laid out and
positioned in the dialogue's

00:28:27.680 --> 00:28:28.690
position.

00:28:28.690 --> 00:28:31.120
And then we reversed it by
setting those translations

00:28:31.120 --> 00:28:34.120
and so forth to put it back
into the FAB's position, right.

00:28:34.120 --> 00:28:36.170
So it was already
in its end state.

00:28:36.170 --> 00:28:38.010
Well, the same is true
when I'm going back.

00:28:38.010 --> 00:28:40.590
So what that means is,
when I'm about to do

00:28:40.590 --> 00:28:43.119
the animation from the
dialogue back to the FAB,

00:28:43.119 --> 00:28:44.660
the FAB is-- the
dialogue is actually

00:28:44.660 --> 00:28:49.520
laid out like this, just in the
exact same bounds as the FAB.

00:28:49.520 --> 00:28:52.610
And so what you need
to do is to manually

00:28:52.610 --> 00:28:54.810
call Measure and Layout
onto the dialogue

00:28:54.810 --> 00:28:56.710
in order to put it
back into the position

00:28:56.710 --> 00:28:58.230
that you want to animate from.

00:28:58.230 --> 00:29:00.210
So it may sound
counterintuitive at first

00:29:00.210 --> 00:29:02.461
that you have to call
Layout and Measure yourself,

00:29:02.461 --> 00:29:04.710
but it is just how the system
works, that it's already

00:29:04.710 --> 00:29:05.560
in that same state.

00:29:05.560 --> 00:29:06.740
It was easy for
us on the way in.

00:29:06.740 --> 00:29:08.948
We have to do a little bit
more work on the way back.

00:29:11.987 --> 00:29:14.070
And then I just want to
highlight the translation,

00:29:14.070 --> 00:29:14.480
as well.

00:29:14.480 --> 00:29:16.160
So this is how we
use that path motion.

00:29:16.160 --> 00:29:19.552
So we set a path motion in
the constructor early on.

00:29:19.552 --> 00:29:22.010
And here, I'm using one of the
overloads of ObjectAnimator,

00:29:22.010 --> 00:29:24.260
which will actually animate
two properties at once.

00:29:24.260 --> 00:29:26.650
So here, I'm animating
the TranslationXandY

00:29:26.650 --> 00:29:27.600
of the dialogue.

00:29:27.600 --> 00:29:29.080
And we get hold of
that path motion

00:29:29.080 --> 00:29:32.630
again, and call getPath,
passing in the start x and y

00:29:32.630 --> 00:29:33.787
and the end x and y.

00:29:33.787 --> 00:29:35.370
And that will generate
the curved path

00:29:35.370 --> 00:29:39.430
and animate the translation
along the curved path for us.

00:29:39.430 --> 00:29:42.370
We do some more animators
for the circular reveal

00:29:42.370 --> 00:29:43.940
and the fade and so on.

00:29:43.940 --> 00:29:45.870
And we put them in
set and return that.

00:29:45.870 --> 00:29:48.420
And that gives you
that entire animation.

00:29:48.420 --> 00:29:49.589
So that's how it's done.

00:29:49.589 --> 00:29:51.130
And this is all open
source, as well,

00:29:51.130 --> 00:29:52.090
so there'll be a
link at the end.

00:29:52.090 --> 00:29:53.465
You can go and
have a look if you

00:29:53.465 --> 00:29:56.810
wanted to go into all
the nitty-gritty details.

00:29:56.810 --> 00:29:58.462
GEORGE: That was awesome.

00:29:58.462 --> 00:30:02.390
[APPLAUSE]

00:30:03.380 --> 00:30:04.456
All right.

00:30:04.456 --> 00:30:06.080
So let's talk about
a few things that I

00:30:06.080 --> 00:30:08.270
think you guys will
find really useful here.

00:30:08.270 --> 00:30:09.650
Transition names.

00:30:09.650 --> 00:30:13.250
Now, if you do things well
with transition names,

00:30:13.250 --> 00:30:17.520
the system will work for you,
and that will help you a lot.

00:30:17.520 --> 00:30:20.450
For example, we have an
animation here, a transition,

00:30:20.450 --> 00:30:23.130
to go from this little guy to
a big-- [INAUDIBLE] big thing.

00:30:23.130 --> 00:30:25.600
We want to do an activity
transition like that.

00:30:25.600 --> 00:30:27.840
And what's happening in
our activity transition is,

00:30:27.840 --> 00:30:31.884
of course, we call
MakeSceneTransitionAnimation.

00:30:31.884 --> 00:30:32.800
And we have this view.

00:30:32.800 --> 00:30:35.810
And we-- my view doesn't
have a transition name here.

00:30:35.810 --> 00:30:39.680
Or-- please don't do this--
you call view.setTransitionName

00:30:39.680 --> 00:30:41.420
right here in this call.

00:30:41.420 --> 00:30:42.275
Don't do that, OK?

00:30:42.275 --> 00:30:45.420
And I'll show you why.

00:30:45.420 --> 00:30:47.600
We have our activity here.

00:30:47.600 --> 00:30:50.140
We launch a new one.

00:30:50.140 --> 00:30:52.320
And then we change the
orientation of the phone.

00:30:52.320 --> 00:30:54.590
What happens now?

00:30:54.590 --> 00:30:55.490
That's right.

00:30:55.490 --> 00:30:59.010
Our activity gets
rebuilt. But further,

00:30:59.010 --> 00:31:00.950
the thing underneath
it gets rebuilt, too.

00:31:00.950 --> 00:31:04.970
So even if you called
view.setTransitionName,

00:31:04.970 --> 00:31:05.860
you just lost that.

00:31:05.860 --> 00:31:07.500
It's gone.

00:31:07.500 --> 00:31:10.320
So now when the view
tries to come back,

00:31:10.320 --> 00:31:14.900
it has no idea which
is the shared element.

00:31:14.900 --> 00:31:18.081
The transition name
is used to identify

00:31:18.081 --> 00:31:20.330
which-- you know, going from
the source to the target,

00:31:20.330 --> 00:31:21.990
and so it can map those two.

00:31:21.990 --> 00:31:25.394
And if it loses that transition
name, it won't know what to do.

00:31:25.394 --> 00:31:27.560
You, of course, can fix
that up for it, if you want.

00:31:27.560 --> 00:31:29.435
And we'll talk about
that a little bit later.

00:31:29.435 --> 00:31:32.520
But the transition
name is your friend.

00:31:32.520 --> 00:31:35.490
So in a system like this,
where you have a RecyclerView,

00:31:35.490 --> 00:31:39.050
for example, when
you bind your view,

00:31:39.050 --> 00:31:42.340
that's when you set
your transition name.

00:31:42.340 --> 00:31:45.590
And it should be a unique name
that you have for that item.

00:31:45.590 --> 00:31:47.320
And it can be a URL
or whatever you want.

00:31:47.320 --> 00:31:47.960
It's fine.

00:31:47.960 --> 00:31:49.990
As long as it's a
string that's unique.

00:31:49.990 --> 00:31:51.670
Here, I bound it
to the position,

00:31:51.670 --> 00:31:53.720
in my ViewHolder, of
position is unique.

00:31:53.720 --> 00:31:55.170
Whatever.

00:31:55.170 --> 00:31:57.590
Or-- and a little plug
for data bindingg-- you

00:31:57.590 --> 00:31:59.090
can do it right in
the layout, too,

00:31:59.090 --> 00:32:01.560
if you're using data binding.

00:32:01.560 --> 00:32:02.809
That's awesome, by the way.

00:32:02.809 --> 00:32:04.225
I know some guy
who works on that.

00:32:06.980 --> 00:32:09.150
Let's talk about changing
the shared elements.

00:32:09.150 --> 00:32:11.150
That means we have a
different shared element

00:32:11.150 --> 00:32:12.910
than you originally thought.

00:32:12.910 --> 00:32:14.780
Here, I have a
view-- an activity.

00:32:14.780 --> 00:32:16.010
And it launches another one.

00:32:16.010 --> 00:32:18.120
And then we scroll
in the detail view.

00:32:18.120 --> 00:32:21.290
And when we go back, we want to
go back to a different shared

00:32:21.290 --> 00:32:23.350
element, right?

00:32:23.350 --> 00:32:25.060
Now, this transition
system, of course,

00:32:25.060 --> 00:32:27.820
is going to try to go back to
the same one you had before.

00:32:27.820 --> 00:32:30.560
We have to tell
it something else.

00:32:30.560 --> 00:32:32.760
Step one.

00:32:32.760 --> 00:32:35.710
When you launch the
activity, ask for which

00:32:35.710 --> 00:32:37.770
shared element is coming back.

00:32:37.770 --> 00:32:41.850
So you
startActivityForResult. OK?

00:32:41.850 --> 00:32:43.030
Step two.

00:32:43.030 --> 00:32:44.980
Before you go back,
set the result.

00:32:44.980 --> 00:32:47.710
Tell it which shared element
is going to come back to you.

00:32:47.710 --> 00:32:51.620
Here, I have an ID that I'm
going to send back as a result.

00:32:51.620 --> 00:32:53.030
Step three.

00:32:53.030 --> 00:32:56.830
In onActivityReenter,
not onActivityResult--

00:32:56.830 --> 00:33:00.090
I've gotten bitten by this
just yesterday, I think was,

00:33:00.090 --> 00:33:05.180
when I was writing a demo--
onActivityReenter, that's

00:33:05.180 --> 00:33:09.290
a new thing just for
activity transitions here.

00:33:09.290 --> 00:33:12.440
It will be called before the
shared element comes back.

00:33:12.440 --> 00:33:14.740
And this is where you
can do some tweaking.

00:33:14.740 --> 00:33:18.170
Here, I'm going to get the
data, get the shared element.

00:33:18.170 --> 00:33:18.670
OK?

00:33:18.670 --> 00:33:20.660
And that's going
to come back to me.

00:33:20.660 --> 00:33:22.360
All that data is
coming back to me.

00:33:22.360 --> 00:33:25.980
And then we can also call a
shared element exit callback,

00:33:25.980 --> 00:33:28.310
set the SharedElementCallback
for the exit.

00:33:28.310 --> 00:33:30.760
Now the exit is used
for the exiting,

00:33:30.760 --> 00:33:31.960
and also for the reenter.

00:33:31.960 --> 00:33:34.640
It's the same callback
used for both.

00:33:34.640 --> 00:33:36.320
And this is where
we can switch up

00:33:36.320 --> 00:33:38.950
our activity-- our
shared elements.

00:33:38.950 --> 00:33:41.530
We can set our shared
element to whatever

00:33:41.530 --> 00:33:42.910
we want in our view hierarchy.

00:33:42.910 --> 00:33:45.360
So here, I've just--
I used that ID I just

00:33:45.360 --> 00:33:48.580
had-- got before from
the onActivityReenter.

00:33:48.580 --> 00:33:50.890
And I used it right
now for my share--

00:33:50.890 --> 00:33:52.440
to change my shared element.

00:33:52.440 --> 00:33:55.530
And now it works perfectly.

00:33:55.530 --> 00:33:56.970
Let's talk about overlays.

00:33:56.970 --> 00:33:59.480
Shared elements often
go into the overlay.

00:33:59.480 --> 00:34:03.040
If it'll just go right into the
overlay, unless we specifically

00:34:03.040 --> 00:34:04.254
tell it not to.

00:34:04.254 --> 00:34:05.670
Now, the great
thing about this is

00:34:05.670 --> 00:34:07.326
it's drawn on top of
everything, right,

00:34:07.326 --> 00:34:09.659
because you don't want to
have your shared element drawn

00:34:09.659 --> 00:34:11.803
underneath something
over there, right.

00:34:11.803 --> 00:34:13.469
And it's also not
clipped by the parent.

00:34:13.469 --> 00:34:15.679
And that's really important.

00:34:15.679 --> 00:34:19.042
But the problem is, it's
drawn on top of everything.

00:34:19.042 --> 00:34:20.750
And when it's drawn
on top of everything,

00:34:20.750 --> 00:34:22.920
that's a little
bit of a problem.

00:34:22.920 --> 00:34:28.770
And it's also not
clipped by the parent.

00:34:33.960 --> 00:34:36.420
Sorry. [INAUDIBLE] All right.

00:34:36.420 --> 00:34:38.000
NICK: Here's a
real example I had

00:34:38.000 --> 00:34:39.949
of this issue, which
is, in the screen,

00:34:39.949 --> 00:34:44.060
again from Plaid, when
you click on a list item,

00:34:44.060 --> 00:34:46.580
I wanted to have this
expand and grow out.

00:34:46.580 --> 00:34:48.260
So I wanted to have
a shared element

00:34:48.260 --> 00:34:50.020
where the background
was actually

00:34:50.020 --> 00:34:51.239
one of the shared elements.

00:34:51.239 --> 00:34:52.210
So if you look at
this transition,

00:34:52.210 --> 00:34:53.880
there's two shared
elements going on here.

00:34:53.880 --> 00:34:55.739
There's an image going from
one position to the other,

00:34:55.739 --> 00:34:57.230
but also the
background transitions

00:34:57.230 --> 00:34:59.390
to give that growing effect.

00:34:59.390 --> 00:35:00.870
So this is all well and good.

00:35:00.870 --> 00:35:03.750
But if you were to use the
overlay to do the transition,

00:35:03.750 --> 00:35:05.787
if you put the background
into the overlay,

00:35:05.787 --> 00:35:07.870
it's going to be on top
of everything else, right.

00:35:07.870 --> 00:35:10.280
So you get this horrible effect
where it kind of grows up

00:35:10.280 --> 00:35:12.611
and you don't see any content,
and it snaps in, right.

00:35:12.611 --> 00:35:13.610
That's not what we want.

00:35:13.610 --> 00:35:15.730
We actually want the content
to be able to kind of come in

00:35:15.730 --> 00:35:17.040
on top of the background.

00:35:17.040 --> 00:35:19.100
So hopefully we can
control that, George.

00:35:19.100 --> 00:35:20.070
GEORGE: Yeah, we can.

00:35:20.070 --> 00:35:22.360
Well, all we have to do
to make the shared element

00:35:22.360 --> 00:35:24.580
do something different
is tell it not to.

00:35:24.580 --> 00:35:29.899
And so we just set this
value in your styles.

00:35:29.899 --> 00:35:32.065
But you might end up with
a little bit of a problem.

00:35:35.339 --> 00:35:36.130
I think it was you.

00:35:36.130 --> 00:35:37.710
You did it, right?

00:35:37.710 --> 00:35:39.290
No.

00:35:39.290 --> 00:35:42.060
Well, the problem is this.

00:35:42.060 --> 00:35:43.990
Let's see what's going on here.

00:35:43.990 --> 00:35:46.680
The shared element
is, of course, popped

00:35:46.680 --> 00:35:49.050
into the new activity.

00:35:49.050 --> 00:35:52.300
And when that happens, it's
being clipped by its parent.

00:35:52.300 --> 00:35:54.700
And it's only visible
when the shared element

00:35:54.700 --> 00:35:58.080
slides into the parent view.

00:35:58.080 --> 00:36:01.280
So what we can do, of course, is
tell the parent, don't clip it.

00:36:01.280 --> 00:36:04.300
So you'd say, tell the
parent, say setClipChildren

00:36:04.300 --> 00:36:07.030
to false, and also
setClipToPadding false,

00:36:07.030 --> 00:36:08.370
as well.

00:36:08.370 --> 00:36:10.569
Now this is-- might
cause you a little bit

00:36:10.569 --> 00:36:11.860
of a problem with your drawing.

00:36:11.860 --> 00:36:13.010
So be careful with this.

00:36:13.010 --> 00:36:14.560
And also, it's a
performance issue.

00:36:14.560 --> 00:36:19.087
You might consider doing this
only during your transition.

00:36:19.087 --> 00:36:21.170
But you can't do it just
on the parent of the view

00:36:21.170 --> 00:36:22.180
of the shared element.

00:36:22.180 --> 00:36:25.110
You have to go all the way
up, because the grandparent

00:36:25.110 --> 00:36:27.760
can also clip the child and
clip your shared element.

00:36:27.760 --> 00:36:29.049
And that's no good.

00:36:29.049 --> 00:36:30.465
The other option
is to do, as Nick

00:36:30.465 --> 00:36:33.470
did in his-- is to put
it right into the root,

00:36:33.470 --> 00:36:36.010
into the root of his
layout as a child of that.

00:36:36.010 --> 00:36:37.510
And now it's not
going to be clipped

00:36:37.510 --> 00:36:38.800
by anything, because
the root, of course,

00:36:38.800 --> 00:36:39.716
owns the whole window.

00:36:39.716 --> 00:36:40.270
It's fine.

00:36:43.051 --> 00:36:43.550
All right.

00:36:43.550 --> 00:36:46.200
Let's take a look at it now
that it has no clipping.

00:36:46.200 --> 00:36:47.230
It comes in.

00:36:47.230 --> 00:36:50.650
Instead of like a flash,
it comes in on top,

00:36:50.650 --> 00:36:53.370
just like we want.

00:36:53.370 --> 00:36:54.130
All right.

00:36:54.130 --> 00:36:55.920
Ben.

00:36:55.920 --> 00:36:56.470
BEN: Cool.

00:36:56.470 --> 00:36:56.970
Whoop.

00:36:59.630 --> 00:37:03.200
So as you may have seen, within
some of these transitions,

00:37:03.200 --> 00:37:05.300
and in general, if you
work with transitions,

00:37:05.300 --> 00:37:08.530
you also have access to
the window decorations.

00:37:08.530 --> 00:37:10.860
That was basically a status
bar in the navigation bar

00:37:10.860 --> 00:37:12.215
backgrounds.

00:37:12.215 --> 00:37:13.840
So let's take a look
at what you can do

00:37:13.840 --> 00:37:17.320
is you just say define
a slide transition.

00:37:17.320 --> 00:37:19.610
And what will happen
with that is that it

00:37:19.610 --> 00:37:22.600
slides all the content in.

00:37:22.600 --> 00:37:24.720
We highlighted the
status bar here

00:37:24.720 --> 00:37:26.410
to show you what's going on.

00:37:26.410 --> 00:37:28.240
So it slides the
status bar in, as well.

00:37:28.240 --> 00:37:30.369
But we actually don't
want to do this.

00:37:30.369 --> 00:37:32.660
And as you can see on the
bottom, under navigation bar,

00:37:32.660 --> 00:37:33.451
there's also Flash.

00:37:33.451 --> 00:37:36.530
And the last moment of that, it
still-- it slides up, as well.

00:37:36.530 --> 00:37:38.980
So in order to
avoid this, there's

00:37:38.980 --> 00:37:40.520
a couple of ways
you can do this.

00:37:40.520 --> 00:37:43.000
But what you want
to do is you want

00:37:43.000 --> 00:37:46.766
to exclude both the status bar
background and the navigation

00:37:46.766 --> 00:37:47.390
bar background.

00:37:47.390 --> 00:37:50.510
So we provided IDs, as well
as transition names, for those

00:37:50.510 --> 00:37:52.429
so you can work with them.

00:37:52.429 --> 00:37:54.220
That is one of the ways
that you can do it.

00:37:54.220 --> 00:37:56.180
Obviously, you can
do this not just

00:37:56.180 --> 00:37:58.670
in XML, as we showed you
before, but also when

00:37:58.670 --> 00:38:02.600
you do this within your
code, you basically just say,

00:38:02.600 --> 00:38:05.040
on this transition,
exclude the target,

00:38:05.040 --> 00:38:09.690
and set those values to true.

00:38:09.690 --> 00:38:12.450
But you can also do something
a little bit more nifty.

00:38:12.450 --> 00:38:15.420
You can add this to the
shared element transitions.

00:38:15.420 --> 00:38:17.400
So you could have
recolors in there,

00:38:17.400 --> 00:38:19.700
or just fade out
stuff when you want,

00:38:19.700 --> 00:38:23.550
or fade them out within a
shared element transition.

00:38:23.550 --> 00:38:26.194
This is-- in order to do this,
you basically go all the way up

00:38:26.194 --> 00:38:27.110
in the view hierarchy.

00:38:27.110 --> 00:38:29.430
You get the decor
view of your window.

00:38:29.430 --> 00:38:31.300
Then, you find the views by ID.

00:38:31.300 --> 00:38:33.197
You create the pairs.

00:38:33.197 --> 00:38:35.030
This is the second way
you can create pairs.

00:38:35.030 --> 00:38:40.390
So another-- it's another
way to calling that.

00:38:40.390 --> 00:38:42.290
And then adding them
to the shared element

00:38:42.290 --> 00:38:44.960
transition to actually
have the system being

00:38:44.960 --> 00:38:47.730
aware of exactly that.

00:38:47.730 --> 00:38:49.850
And then you get
the desired behavior

00:38:49.850 --> 00:38:53.010
of no flashes, no
exploding or just

00:38:53.010 --> 00:38:59.200
moving out of the way status bar
or navigation bar background.

00:38:59.200 --> 00:39:03.547
And with that, we actually have
a little room for questions.

00:39:03.547 --> 00:39:05.130
So you can start
lining up if you have

00:39:05.130 --> 00:39:07.650
questions, about six minutes.

00:39:07.650 --> 00:39:09.680
Thank you very much
for being here.

00:39:09.680 --> 00:39:12.750
It's been a pleasure to talk
to you about transitions,

00:39:12.750 --> 00:39:15.710
and we have open
source all the code

00:39:15.710 --> 00:39:18.390
already for the samples
that we gave here.

00:39:18.390 --> 00:39:21.560
So the new one, the one with
the images that we just showed,

00:39:21.560 --> 00:39:22.914
is on [INAUDIBLE].

00:39:22.914 --> 00:39:25.330
You definitely have to take a
look in Nick [? Butcher's ?]

00:39:25.330 --> 00:39:28.480
Plaid app if you want to
go into the advanced things

00:39:28.480 --> 00:39:29.140
on transitions.

00:39:29.140 --> 00:39:31.490
There's also topeka out
there, and another sample

00:39:31.490 --> 00:39:33.410
called ourstreets.

00:39:33.410 --> 00:39:37.110
You can take-- we looked through
the training that we have,

00:39:37.110 --> 00:39:38.720
and yeah.

00:39:38.720 --> 00:39:39.630
Thank you very much.

00:39:39.630 --> 00:39:43.280
[MUSIC PLAYING]

