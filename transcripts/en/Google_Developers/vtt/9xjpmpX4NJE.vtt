WEBVTT
Kind: captions
Language: en

00:00:09.260 --> 00:00:11.320
But what I thought I would do,
is I thought I'd take a step

00:00:11.320 --> 00:00:14.400
back for us now and I thought
I'd visualize the speakers for

00:00:14.400 --> 00:00:18.270
you by help of a trustee
Venn diagram.

00:00:18.270 --> 00:00:21.450
Now on the left, we
have bald people.

00:00:21.450 --> 00:00:23.676
On the right, we have Pauls.

00:00:23.676 --> 00:00:28.190
Colt, firmly in the bald camp.

00:00:28.190 --> 00:00:31.390
Professor Irish, firmly
in the Paul.

00:00:31.390 --> 00:00:34.350
Me, making up the middle--

00:00:34.350 --> 00:00:36.170
the intersection, if you will.

00:00:36.170 --> 00:00:41.390
But unfortunately we have Jake
who's thinning up top and

00:00:41.390 --> 00:00:42.650
trying to get into bald.

00:00:45.240 --> 00:00:46.490
I wish him well.

00:00:50.390 --> 00:00:54.490
Now what I wanted to do is I
want to set the scene and I

00:00:54.490 --> 00:00:57.080
feel like resetting the scene.

00:00:57.080 --> 00:00:58.850
Talking about rendering
performance, there's a lot of

00:00:58.850 --> 00:01:02.120
people that kind of go, I'm not
so sure, what does he mean

00:01:02.120 --> 00:01:05.239
by rendering, this
performance chat.

00:01:05.239 --> 00:01:09.930
And what we've done I think is
we've gone, OK, how long does

00:01:09.930 --> 00:01:11.440
this thing take to load?

00:01:11.440 --> 00:01:13.130
How many requests am I making?

00:01:13.130 --> 00:01:14.840
Have I got gzip switched on?

00:01:14.840 --> 00:01:15.930
And what about ETags?

00:01:15.930 --> 00:01:17.730
They're dead.

00:01:17.730 --> 00:01:18.790
I don't know what to do.

00:01:18.790 --> 00:01:23.330
And I think I understand why
we've done it, but the thing

00:01:23.330 --> 00:01:27.160
is it's only part
of the picture.

00:01:27.160 --> 00:01:29.170
It's only part of the problem.

00:01:29.170 --> 00:01:32.040
Because as we discussed with
the-- or Colt discussed with

00:01:32.040 --> 00:01:33.300
the memory thing--

00:01:33.300 --> 00:01:34.680
that's something that
doesn't fit into

00:01:34.680 --> 00:01:35.960
page load time, right?

00:01:35.960 --> 00:01:37.480
And that's a part
of performance.

00:01:37.480 --> 00:01:39.950
So it's sort of a bit
of a question.

00:01:39.950 --> 00:01:44.090
And so what I'm going to do is
just a quick, highly technical

00:01:44.090 --> 00:01:49.220
graph, or chart, for myself,
of two apps.

00:01:49.220 --> 00:01:52.660
App one is fast to load and slow
to render and app two is

00:01:52.660 --> 00:01:55.800
slow to load and
fast to render.

00:01:55.800 --> 00:01:57.580
And which is worse?

00:01:57.580 --> 00:01:58.950
Which is better?

00:01:58.950 --> 00:02:00.900
And the answer, of course, is
both of those are going to

00:02:00.900 --> 00:02:02.040
hack off your users.

00:02:02.040 --> 00:02:05.180
They are not going to be happy
with you, so it matters.

00:02:05.180 --> 00:02:08.630
So what I thought I would then
do is take us through the

00:02:08.630 --> 00:02:12.810
pipeline, a little
bit like this.

00:02:12.810 --> 00:02:15.570
The idea here is I'm going from
a page load perspective,

00:02:15.570 --> 00:02:18.450
because that means we will hit
every part of the pipeline.

00:02:18.450 --> 00:02:22.740
I want to get through from how
the browser does a request and

00:02:22.740 --> 00:02:24.280
gets pixels onto the screen.

00:02:24.280 --> 00:02:26.360
That's actually the job
of the browser.

00:02:26.360 --> 00:02:29.630
It's there to get content
on your users' screens.

00:02:29.630 --> 00:02:31.360
So it's good to understand it.

00:02:31.360 --> 00:02:33.730
And then when your users are
scrolling and dragging stuff

00:02:33.730 --> 00:02:37.560
about and just generally using
your site or your app, then

00:02:37.560 --> 00:02:39.470
we'll hit parts of this pipeline
again, so it's good

00:02:39.470 --> 00:02:41.450
to understand it.

00:02:41.450 --> 00:02:44.090
This is part one of two, because
I would normally talk

00:02:44.090 --> 00:02:46.860
about the DevTools-y part of
this where you can figure out

00:02:46.860 --> 00:02:50.040
how your project is
actually working.

00:02:50.040 --> 00:02:51.730
But Paul Irish is going
to actually do

00:02:51.730 --> 00:02:52.720
that part later on.

00:02:52.720 --> 00:02:54.830
So think of this as a sort
of scene setter, a

00:02:54.830 --> 00:02:57.520
part one if you will.

00:02:57.520 --> 00:03:00.730
Now, we start off our journey
with the humble get

00:03:00.730 --> 00:03:03.500
request, like so.

00:03:03.500 --> 00:03:08.390
Our server is going to respond
for us with some HTML--

00:03:08.390 --> 00:03:10.780
all pretty awesome.

00:03:10.780 --> 00:03:13.510
And the first thing that the
browser is going to do-- and

00:03:13.510 --> 00:03:16.310
it does clever stuff with
doing the streamed and

00:03:16.310 --> 00:03:17.790
lookaheads and all this
kind of stuff--

00:03:17.790 --> 00:03:21.140
but it starts to parse that and
when you look in DevTools

00:03:21.140 --> 00:03:22.580
you'll see things
like parse HTML.

00:03:22.580 --> 00:03:26.420
Which is this process, really,
of taking tag soup and turning

00:03:26.420 --> 00:03:30.900
it into this, which
is the DOM.

00:03:30.900 --> 00:03:34.460
And that's the DOM for that
HTML, so we'll just make our

00:03:34.460 --> 00:03:38.020
lives a little bit easier and
just call it the DOM.

00:03:38.020 --> 00:03:42.150
And then what we do is
we take the CSS--

00:03:42.150 --> 00:03:44.870
we're just going to add
that plus in there--

00:03:44.870 --> 00:03:47.850
we take the CSS, and some of
that CSS will come part of the

00:03:47.850 --> 00:03:50.760
browser as the default style
sheets with the browser,

00:03:50.760 --> 00:03:52.450
there's the stuff you put in
line, there's the stuff that's

00:03:52.450 --> 00:03:53.730
in your style sheets--

00:03:53.730 --> 00:03:58.100
and we start to actually figure
out from the DOM what

00:03:58.100 --> 00:03:59.320
CSS applies to what.

00:03:59.320 --> 00:04:03.820
And historically, people have
spent quite a lot of time

00:04:03.820 --> 00:04:06.370
trying to optimize
CSS selectors.

00:04:06.370 --> 00:04:07.110
How quickly--

00:04:07.110 --> 00:04:10.550
and it's actually a bit of a
waste of your time because the

00:04:10.550 --> 00:04:13.470
browser's very, very,
very fast at

00:04:13.470 --> 00:04:14.370
doing selector matching.

00:04:14.370 --> 00:04:15.660
So just bear that one in mind.

00:04:15.660 --> 00:04:20.110
Anyway, this will show up in
DevTools as Recalculate Style.

00:04:20.110 --> 00:04:21.719
So what happens-- and I'm about
to do a sound effect, I

00:04:21.719 --> 00:04:23.060
can feel it coming along--

00:04:23.060 --> 00:04:25.380
we put these together
like [PBBTH]

00:04:25.380 --> 00:04:30.460
that and we get the
render tree.

00:04:30.460 --> 00:04:32.080
Paul Irish is happy
with that noise.

00:04:32.080 --> 00:04:33.690
He's happy with that.

00:04:33.690 --> 00:04:36.690
Now the render tree looks
distinctly like the DOM,

00:04:36.690 --> 00:04:38.760
except that things are missing,
like the head, for

00:04:38.760 --> 00:04:40.610
example, or our scripts.

00:04:40.610 --> 00:04:42.120
They're not there because we're
not going to render

00:04:42.120 --> 00:04:46.270
them, so they don't appear
in that tree.

00:04:46.270 --> 00:04:49.300
But let's say, for example, I
decide that in my style sheets

00:04:49.300 --> 00:04:51.150
I'm going to put section p.

00:04:51.150 --> 00:04:51.550
[BOOP]

00:04:51.550 --> 00:04:53.180
I'm going to say display none.

00:04:53.180 --> 00:04:55.590
That will disappear from the
render tree because it's set

00:04:55.590 --> 00:04:56.450
to display none.

00:04:56.450 --> 00:04:57.940
It's not something we're
going to draw.

00:04:57.940 --> 00:05:00.030
It's not something
we care about.

00:05:00.030 --> 00:05:03.500
Equally, I could have a pseudo
element and that would add

00:05:03.500 --> 00:05:05.500
something into the
render tree.

00:05:05.500 --> 00:05:08.740
So the render tree as I said, it
looks like the DOM but it's

00:05:08.740 --> 00:05:09.890
not the DOM.

00:05:09.890 --> 00:05:12.450
It's the styles applied
to the DOM.

00:05:12.450 --> 00:05:14.760
So that's that.

00:05:14.760 --> 00:05:18.320
Now the next job-- and it's
going to look like a really

00:05:18.320 --> 00:05:20.600
simple job-- we've
got all this CSS

00:05:20.600 --> 00:05:21.950
that we want to apply.

00:05:21.950 --> 00:05:26.090
And it's basically like widths
and heights, and display blog,

00:05:26.090 --> 00:05:27.560
position absolute, all
this kind of stuff.

00:05:27.560 --> 00:05:32.910
And what the browser has to do
is take that and go, where

00:05:32.910 --> 00:05:34.980
does everything live
on screen?

00:05:34.980 --> 00:05:37.530
What are the boxes here?

00:05:37.530 --> 00:05:39.410
And, as you probably know,
this can actually get

00:05:39.410 --> 00:05:42.820
extremely expensive because
everything tends to be

00:05:42.820 --> 00:05:44.370
contingent on everything else.

00:05:44.370 --> 00:05:47.390
So if I were to change the
height of body, everything

00:05:47.390 --> 00:05:50.430
that's inside body needs
to be recalculated.

00:05:50.430 --> 00:05:53.770
And this will show itself up
in DevTools as layout.

00:05:53.770 --> 00:05:57.600
And that's where all those
boxes are coming from.

00:05:57.600 --> 00:05:59.740
Good.

00:05:59.740 --> 00:06:02.930
So the next job that we
have is to actually

00:06:02.930 --> 00:06:03.690
fill in some pixels.

00:06:03.690 --> 00:06:08.200
We know where those boxes are,
but they now need filling in

00:06:08.200 --> 00:06:10.990
with pixels, so we need
a rasterizer.

00:06:10.990 --> 00:06:14.040
Now just a bit of terminology
in case you don't spend the

00:06:14.040 --> 00:06:15.730
time looking at this stuff.

00:06:15.730 --> 00:06:19.690
Vectors are basically shapes
that we have the mathematical

00:06:19.690 --> 00:06:23.400
formulae for or we have the
positions of the corners, for

00:06:23.400 --> 00:06:25.400
example, in the case
of a triangle.

00:06:25.400 --> 00:06:27.590
We're interested in
actually pixels.

00:06:27.590 --> 00:06:30.630
So what we actually have to do
is we have to figure out from

00:06:30.630 --> 00:06:33.380
our triangle which pixels we
need to fill in and what color

00:06:33.380 --> 00:06:33.710
they need to be.

00:06:33.710 --> 00:06:34.960
And this is the process
of converting

00:06:34.960 --> 00:06:36.740
vector to raster, OK?

00:06:36.740 --> 00:06:37.890
All pretty simple.

00:06:37.890 --> 00:06:41.690
Now if you and I were to have a
fun afternoon and we were to

00:06:41.690 --> 00:06:46.180
create a rasterizer, we'd
probably include

00:06:46.180 --> 00:06:47.460
methods like this.

00:06:47.460 --> 00:06:49.200
And I know that we would because
these are the ones

00:06:49.200 --> 00:06:51.660
from Chrome's rasterizer,
which is called Skia.

00:06:51.660 --> 00:06:54.500
And so you can imagine that
I'd drawPoints, drawOvals,

00:06:54.500 --> 00:06:59.730
drawRectangles, drawBitmaps,
draw some text.

00:06:59.730 --> 00:07:02.920
And if you've worked with the
HTML5 canvas, a lot of this

00:07:02.920 --> 00:07:04.540
stuff will actually look
quite similar.

00:07:04.540 --> 00:07:07.810
It's the rasterizer,
basically.

00:07:07.810 --> 00:07:09.100
So now what we can do--

00:07:09.100 --> 00:07:11.480
I actually ran that HTML--

00:07:11.480 --> 00:07:15.030
I actually ran it through Skia
and said, what did you do?

00:07:15.030 --> 00:07:16.330
And it told me.

00:07:16.330 --> 00:07:18.810
So I thought I'd show
you what it does.

00:07:18.810 --> 00:07:20.360
Ta-daa!

00:07:20.360 --> 00:07:22.450
But you probably didn't see
what was going on, so why

00:07:22.450 --> 00:07:24.090
don't we have ourselves
an instant replay?

00:07:24.090 --> 00:07:27.580
Now, you'll see that as we get
through each of these calls

00:07:27.580 --> 00:07:29.410
we're starting to build up
the picture of what's

00:07:29.410 --> 00:07:30.300
actually going on.

00:07:30.300 --> 00:07:32.340
Draw a rounded rectangle, which
isn't that clear but

00:07:32.340 --> 00:07:33.530
that's the drop shadow.

00:07:33.530 --> 00:07:36.150
Draw the path, here we go, draw
the bitmap, which is my

00:07:36.150 --> 00:07:39.950
face, do a bit of tidy up,
and we'll call it a day.

00:07:39.950 --> 00:07:41.940
DevTools is going to show
you that as paint.

00:07:41.940 --> 00:07:44.660
That's how it goes about letting
you know that it did

00:07:44.660 --> 00:07:46.570
some of that work.

00:07:46.570 --> 00:07:48.250
Now, some of this bears
a little bit

00:07:48.250 --> 00:07:50.300
more scrutiny, I think.

00:07:50.300 --> 00:07:52.820
Specifically, drawBitmap.

00:07:52.820 --> 00:07:54.460
Now, I was a good developer.

00:07:54.460 --> 00:07:58.150
I sent through my tiny JPEG, I
compressed it, I'm good on the

00:07:58.150 --> 00:08:00.820
page load time, I'm happy,
well done me.

00:08:00.820 --> 00:08:04.400
But you'll notice that it's
called drawBitmap and not

00:08:04.400 --> 00:08:08.142
drawJpeg, or drawPng,
or drawGif--

00:08:08.142 --> 00:08:09.830
"jif," gif.

00:08:09.830 --> 00:08:12.120
Hands up for gif--

00:08:12.120 --> 00:08:13.630
ooh it's going to be close--

00:08:13.630 --> 00:08:17.500
hands up for "jif."
You're wrong.

00:08:17.500 --> 00:08:22.010
[LAUGHTER]

00:08:22.010 --> 00:08:23.400
They're not "jraphics",
are they?

00:08:27.030 --> 00:08:31.510
So now we have our JPEG and we
basically go through and we're

00:08:31.510 --> 00:08:36.330
going to decode out an
image into a bitmap--

00:08:36.330 --> 00:08:39.080
red, green, blue, and
possibly alpha.

00:08:39.080 --> 00:08:40.669
But the thing is we are also
maybe doing a bit of

00:08:40.669 --> 00:08:43.760
responsive web design, so we
also have to do some re-sizes

00:08:43.760 --> 00:08:44.940
as well on the other side.

00:08:44.940 --> 00:08:47.530
So these are extremely
expensive.

00:08:47.530 --> 00:08:48.490
They show up in DevTools--

00:08:48.490 --> 00:08:50.790
you can spin down Paint records
and you'll see image

00:08:50.790 --> 00:08:53.120
decodes and image re-sizes--

00:08:53.120 --> 00:08:58.820
and they will kill your frames
per second if you have them,

00:08:58.820 --> 00:09:01.180
particularly re-sizes
actually.

00:09:01.180 --> 00:09:04.120
OK, so we've spent some
time with drawBitmap.

00:09:04.120 --> 00:09:07.330
The next thing we want to
look at is quite fancy.

00:09:07.330 --> 00:09:08.530
We're going to do a
bit of animation.

00:09:08.530 --> 00:09:10.580
What we're going to actually end
up doing is we're going to

00:09:10.580 --> 00:09:13.690
move that picture of
me up to there.

00:09:13.690 --> 00:09:17.890
Now when this happens, we
basically took this rectangle

00:09:17.890 --> 00:09:21.850
around everything and said, this
is now damaged and dirty.

00:09:21.850 --> 00:09:23.690
This area needs fixing.

00:09:23.690 --> 00:09:26.120
This needs repainting.

00:09:26.120 --> 00:09:30.360
So we actually have to step
through one by one and re-run

00:09:30.360 --> 00:09:33.620
all those commands, with the
drop shadow, and the white

00:09:33.620 --> 00:09:36.470
box, and the bitmap.

00:09:36.470 --> 00:09:38.860
And it doesn't take much
imagination to figure out that

00:09:38.860 --> 00:09:42.320
if we have a lot of things that
need painting, or we move

00:09:42.320 --> 00:09:45.460
something a really, really
long way, that could be a

00:09:45.460 --> 00:09:48.380
hugely expensive thing
that we just did.

00:09:48.380 --> 00:09:51.170
So what we do to work around
that is we do these things

00:09:51.170 --> 00:09:51.850
called layers.

00:09:51.850 --> 00:09:55.120
Instead of having one surface
that we render into, that we

00:09:55.120 --> 00:09:57.550
rasterize into, we
have several.

00:09:57.550 --> 00:10:01.160
So this is my website and
this is actually--

00:10:01.160 --> 00:10:03.150
the masthead thing
is a canvas--

00:10:03.150 --> 00:10:05.020
so why don't we just boost
that out a little bit.

00:10:05.020 --> 00:10:08.000
Now what happens is, we can
basically do this so that when

00:10:08.000 --> 00:10:10.650
we want to change something in
the masthead, we don't have to

00:10:10.650 --> 00:10:12.810
worry about repainting
the thing behind.

00:10:12.810 --> 00:10:13.940
We keep it separate.

00:10:13.940 --> 00:10:15.820
This is extremely useful.

00:10:15.820 --> 00:10:17.840
What's also interesting about
this, or at least to me

00:10:17.840 --> 00:10:22.220
because I'm a nerd, is the Next
and Previous buttons are

00:10:22.220 --> 00:10:24.030
actually DOM elements
on their own, right?

00:10:24.030 --> 00:10:26.130
But they're sitting on top of
something that was just

00:10:26.130 --> 00:10:28.300
boosted out to its own layer.

00:10:28.300 --> 00:10:30.720
So what Chrome actually ends
up doing, is it ends up

00:10:30.720 --> 00:10:33.540
creating more layers
just for those.

00:10:33.540 --> 00:10:37.380
So you actually end up with
four of the suckers.

00:10:37.380 --> 00:10:39.460
And these all get sent across
the GPU, which we'll talk

00:10:39.460 --> 00:10:41.980
about in a second, and then
composite layers is what

00:10:41.980 --> 00:10:43.150
you're going to see
in DevTools.

00:10:43.150 --> 00:10:44.960
That's when it's taking all
these layers and all this

00:10:44.960 --> 00:10:47.950
stuff and it's basically
going [SHOOP]

00:10:47.950 --> 00:10:49.190
putting them all
together again.

00:10:49.190 --> 00:10:52.650
Figuring out what layers it
needs, where they need to

00:10:52.650 --> 00:10:55.830
live, all that kind of stuff.

00:10:55.830 --> 00:10:56.680
So those are the layers.

00:10:56.680 --> 00:10:57.270
They're pretty cool.

00:10:57.270 --> 00:11:00.020
And you might be asking
yourself, so

00:11:00.020 --> 00:11:01.550
how do I get a layer?

00:11:01.550 --> 00:11:02.560
That's exciting to me.

00:11:02.560 --> 00:11:04.960
You'll notice it's subject
to change because it's an

00:11:04.960 --> 00:11:05.950
implementation detail.

00:11:05.950 --> 00:11:08.270
But all the same, let's
have a look at them.

00:11:08.270 --> 00:11:10.230
3D or perspective transform--

00:11:10.230 --> 00:11:11.870
anybody use an old
transform hack?

00:11:11.870 --> 00:11:14.090
Anybody translateZ(0) happy?

00:11:14.090 --> 00:11:14.920
Yeah?

00:11:14.920 --> 00:11:15.570
Work for you?

00:11:15.570 --> 00:11:18.300
Good, OK that's the
classic one.

00:11:18.300 --> 00:11:20.760
Video elements, canvas elements,
composited plugins

00:11:20.760 --> 00:11:24.590
like Flash or Silverlight,
an animation on opacity,

00:11:24.590 --> 00:11:25.400
interesting--

00:11:25.400 --> 00:11:29.940
transform, filters like blur and
all those ones, and then

00:11:29.940 --> 00:11:31.700
the last one, which are my Next
and Previous buttons,

00:11:31.700 --> 00:11:35.200
those are rendered on top
of another layer.

00:11:35.200 --> 00:11:37.580
So those are the ones, you could
imagine that we might

00:11:37.580 --> 00:11:40.880
add some more, we might.

00:11:40.880 --> 00:11:42.220
So the last little part--
and this is the

00:11:42.220 --> 00:11:43.410
website from tonight--

00:11:43.410 --> 00:11:47.940
is to actually take those
rastered images and send them

00:11:47.940 --> 00:11:48.710
across the GPU.

00:11:48.710 --> 00:11:51.370
The thing to bear in mind, all
that rasterization we did was

00:11:51.370 --> 00:11:53.960
done actually on the CPU.

00:11:53.960 --> 00:11:55.040
And when we do rasterization--

00:11:55.040 --> 00:11:57.040
this is a small detail, I just
wanted to include it for

00:11:57.040 --> 00:11:58.170
completeness' sake--

00:11:58.170 --> 00:12:01.310
we actually rasterize
into tiles.

00:12:01.310 --> 00:12:04.610
Doesn't make any difference to
us as developers, but I just

00:12:04.610 --> 00:12:06.940
like to include it.

00:12:06.940 --> 00:12:08.150
So there we go.

00:12:08.150 --> 00:12:12.720
That doesn't matter for what
we do, but we have the CPU.

00:12:12.720 --> 00:12:14.900
All this work so far has
happened on the CPU.

00:12:14.900 --> 00:12:16.900
So when people are talking about
hardware accelerated

00:12:16.900 --> 00:12:19.480
this and that, so far
everything we've

00:12:19.480 --> 00:12:21.800
done was on the CPU.

00:12:21.800 --> 00:12:23.540
The last thing that we actually
end up doing at this

00:12:23.540 --> 00:12:27.260
point is sending those tiles
across to the GPU--

00:12:27.260 --> 00:12:28.270
happy days.

00:12:28.270 --> 00:12:30.870
And that was a nice simple
animation, but the bandwidth

00:12:30.870 --> 00:12:33.290
between CPU and GPU might
be quite constrained.

00:12:33.290 --> 00:12:36.310
Especially on a mobile device,
it's very easy to

00:12:36.310 --> 00:12:37.730
saturate that link.

00:12:37.730 --> 00:12:40.330
And if you're having
to send across--

00:12:40.330 --> 00:12:41.800
if you're doing a lot of
repainting, and you're sending

00:12:41.800 --> 00:12:43.680
a lot of stuff across
to the GPU, you

00:12:43.680 --> 00:12:45.120
might really struggle.

00:12:45.120 --> 00:12:46.750
So it's a finely
balanced thing.

00:12:46.750 --> 00:12:49.220
Anyway, that's going to show
up as composite layers.

00:12:49.220 --> 00:12:50.926
And finally, [WHOOSH]

00:12:50.926 --> 00:12:53.700
there we go, we end up with
something on screen.

00:12:53.700 --> 00:12:57.350
So now we know how you get from
the humble get request

00:12:57.350 --> 00:13:01.200
all the way through to some
pixels on screen.

00:13:01.200 --> 00:13:04.950
So with that said, I am now
interested in the bit where we

00:13:04.950 --> 00:13:07.480
control the workload.

00:13:07.480 --> 00:13:10.400
I really want to ask, are you
the captain of your ship?

00:13:10.400 --> 00:13:11.660
Arrr.

00:13:11.660 --> 00:13:13.120
But I'm not going to.

00:13:13.120 --> 00:13:15.870
But we are, and so seeing as
we're in control, let's talk

00:13:15.870 --> 00:13:17.650
about some millisecond
stuff for a second.

00:13:17.650 --> 00:13:21.010
Let's frame what we're
interested in.

00:13:21.010 --> 00:13:25.980
When a user interacts with your
site or your application,

00:13:25.980 --> 00:13:31.050
we have 100 milliseconds in
which to respond for that user

00:13:31.050 --> 00:13:33.510
to feel like it was an
instant response.

00:13:33.510 --> 00:13:36.170
If we take more than 100
milliseconds to respond to the

00:13:36.170 --> 00:13:40.250
user's interaction,
we have failed.

00:13:40.250 --> 00:13:41.920
They will notice.

00:13:41.920 --> 00:13:45.930
The second thing that we care
about is 16 milliseconds.

00:13:45.930 --> 00:13:50.550
If we're doing anything like
scrolling, or dragging, or

00:13:50.550 --> 00:13:53.300
anything that's regularly
animating and updating the

00:13:53.300 --> 00:13:56.430
screen, we have 16 milliseconds
in which to get

00:13:56.430 --> 00:13:58.200
all the work done.

00:13:58.200 --> 00:14:01.110
So this is just to frame
our argument here.

00:14:01.110 --> 00:14:03.820
Response time, 100 milliseconds,
frame time, 16

00:14:03.820 --> 00:14:05.070
milliseconds.

00:14:06.980 --> 00:14:09.420
Now all I'm going to do at this
point-- as I say normally

00:14:09.420 --> 00:14:11.250
I'd show you some DevTools,
but I'm going to just talk

00:14:11.250 --> 00:14:13.680
about some stuff you want to
look at, some stuff you need

00:14:13.680 --> 00:14:16.220
to be careful of, and then Paul
will actually run you

00:14:16.220 --> 00:14:20.550
through DevTools and the tools
that are available to you.

00:14:20.550 --> 00:14:23.770
Small style changes can have
big layout knock-ons.

00:14:23.770 --> 00:14:29.100
If you're, say, changing body
like I explained before, we

00:14:29.100 --> 00:14:31.860
have to re-layout everything.

00:14:31.860 --> 00:14:34.090
Huge deal if you're trying
to do that in an

00:14:34.090 --> 00:14:35.900
animation, for example.

00:14:35.900 --> 00:14:39.110
You decide you're going to
change some high level element

00:14:39.110 --> 00:14:41.950
instead of one or two
levels into the DOM.

00:14:41.950 --> 00:14:43.730
Everything's probably going
to get recalculated.

00:14:43.730 --> 00:14:45.960
That will kill you in terms
of your frame rate.

00:14:48.830 --> 00:14:51.240
This is something of a common
misconception that layout is

00:14:51.240 --> 00:14:54.070
somehow always triggered
by JavaScript.

00:14:54.070 --> 00:14:55.700
It's not.

00:14:55.700 --> 00:14:59.610
You can have a transition that's
in response to a hover.

00:14:59.610 --> 00:15:05.620
It's not done by JavaScript, but
it's layouts all the same.

00:15:05.620 --> 00:15:07.360
And layout isn't painting.

00:15:07.360 --> 00:15:10.490
Now that you've been through
that pipeline with me, again

00:15:10.490 --> 00:15:12.320
there's often a misunderstanding
that layout

00:15:12.320 --> 00:15:15.000
is somehow painting, but
actually layout--

00:15:15.000 --> 00:15:17.330
if you do change the position
of something, we

00:15:17.330 --> 00:15:18.260
might need to repaint.

00:15:18.260 --> 00:15:19.740
And we'll have a look
at something that's

00:15:19.740 --> 00:15:22.150
doing that in a second.

00:15:22.150 --> 00:15:24.320
There's a thing that looks
a little bit like

00:15:24.320 --> 00:15:25.650
this and the code--

00:15:25.650 --> 00:15:27.470
it doesn't really matter too
much what the code is doing.

00:15:27.470 --> 00:15:29.350
I'll tell you what it's doing
anyway, just for a laugh.

00:15:29.350 --> 00:15:33.590
We're going through some
paragraphs and we've got some

00:15:33.590 --> 00:15:36.200
other element we want to match
the widths of all our

00:15:36.200 --> 00:15:38.040
paragraphs to.

00:15:38.040 --> 00:15:41.080
So the first thing we do is we
ask for the width of this

00:15:41.080 --> 00:15:43.220
thing called greenBlock.

00:15:43.220 --> 00:15:46.910
And we ask for its offset width,
which causes Chrome--

00:15:46.910 --> 00:15:49.280
and in fact any WebKit or
Blink-based browser--

00:15:49.280 --> 00:15:53.780
to go off and do a layout
operation, go, what's the

00:15:53.780 --> 00:15:55.570
width of the green
block please?

00:15:55.570 --> 00:15:58.680
And then we set the first
paragraph's width.

00:15:58.680 --> 00:16:00.640
And then we go through that loop
over and over and over

00:16:00.640 --> 00:16:03.240
and over and over again and
that is effectively

00:16:03.240 --> 00:16:03.372
read-write-read-
write-read-write

00:16:03.372 --> 00:16:04.622
-read-write-read-write--

00:16:07.290 --> 00:16:09.120
and that's not a good thing.

00:16:09.120 --> 00:16:12.840
Because every single write
invalidates the previous read.

00:16:12.840 --> 00:16:15.660
This is called layout
thrashing.

00:16:15.660 --> 00:16:19.130
You do not want this in
your applications.

00:16:19.130 --> 00:16:20.710
What you wanted to do--

00:16:20.710 --> 00:16:21.700
there we go--

00:16:21.700 --> 00:16:25.220
was to ask for the width once.

00:16:25.220 --> 00:16:26.470
Read-write-write
-write-write-write.

00:16:28.580 --> 00:16:29.300
Happy days.

00:16:29.300 --> 00:16:30.590
Paint--

00:16:30.590 --> 00:16:32.170
I'll show you this demo.

00:16:32.170 --> 00:16:35.000
There's this brilliant tool
called Show paint rectangles.

00:16:35.000 --> 00:16:37.200
If you're ever wondering whether
something's painting

00:16:37.200 --> 00:16:40.090
in Chrome, that is your tool.

00:16:40.090 --> 00:16:43.550
And what's going to happen is so
I select some text, right,

00:16:43.550 --> 00:16:45.640
and you get this red
box around it.

00:16:45.640 --> 00:16:47.830
And that's basically Chrome
saying, I had to do some

00:16:47.830 --> 00:16:50.410
repainting here, Paul.

00:16:50.410 --> 00:16:52.710
Thanks, Chrome.

00:16:52.710 --> 00:16:54.300
I expected you to do
it and you did.

00:16:54.300 --> 00:16:55.980
You are so reliable.

00:16:55.980 --> 00:16:58.445
Anyway, so what I've got is I've
got these buttons-- oh,

00:16:58.445 --> 00:17:01.025
yeah, scroll bar, that's getting
repainted-- now I've

00:17:01.025 --> 00:17:03.940
got this button up here
that says Animate.

00:17:03.940 --> 00:17:08.369
It is a highly realistic
animation.

00:17:08.369 --> 00:17:14.089
Now the interesting thing here
is that this one big area

00:17:14.089 --> 00:17:16.240
needed repainting because we're

00:17:16.240 --> 00:17:17.359
moving everything inside.

00:17:17.359 --> 00:17:20.819
But we can also figure out
that they've all been

00:17:20.819 --> 00:17:24.480
flattened down to one surface,
one layer that we're actually

00:17:24.480 --> 00:17:25.500
painting into, right?

00:17:25.500 --> 00:17:27.390
So this is the thing that's
getting invalidated.

00:17:27.390 --> 00:17:29.090
It needs repainting.

00:17:29.090 --> 00:17:31.460
That might be slow, so
we're quite smart.

00:17:31.460 --> 00:17:33.890
What we want to do is we're
going to use the translateZ(0)

00:17:33.890 --> 00:17:38.470
hack to isolate all those boxes
and all we're doing is

00:17:38.470 --> 00:17:39.290
moving them around.

00:17:39.290 --> 00:17:41.490
And the GPU is really good at
just moving stuff around.

00:17:41.490 --> 00:17:43.040
It's fantastic at it.

00:17:43.040 --> 00:17:44.040
So we're going to do that.

00:17:44.040 --> 00:17:44.140
There we go.

00:17:44.140 --> 00:17:46.650
Change it to black just
so it's a bit easier.

00:17:46.650 --> 00:17:48.400
And then moving you see we're
not painting anymore.

00:17:48.400 --> 00:17:51.200
Because we painted them once,
all these layers, and then we

00:17:51.200 --> 00:17:52.850
just asked the GPU to
move them around.

00:17:52.850 --> 00:17:55.840
This is an awesome way of using
the translateZ(0) hack.

00:17:55.840 --> 00:17:56.560
I've come full circle.

00:17:56.560 --> 00:18:00.750
I used to hate it, now I love
it just for this reason.

00:18:00.750 --> 00:18:03.520
The danger that we then have--

00:18:03.520 --> 00:18:05.750
I'm just hovering
over in this--

00:18:05.750 --> 00:18:07.690
animate the radii.

00:18:07.690 --> 00:18:11.600
Now these boxes have a slightly
rounded corner.

00:18:11.600 --> 00:18:13.530
What I've got is I've got an
animation queued up that's

00:18:13.530 --> 00:18:18.640
going to change the border
radius of each of those boxes.

00:18:18.640 --> 00:18:20.340
Ready?

00:18:20.340 --> 00:18:22.540
[AUGH]

00:18:22.540 --> 00:18:25.650
Look how much it crawls.

00:18:25.650 --> 00:18:31.250
So it's not always a good thing
to isolate everything

00:18:31.250 --> 00:18:32.830
and put a translateZ(0)
hack on it.

00:18:32.830 --> 00:18:35.750
Because you can end up creating
a lot of extra work.

00:18:35.750 --> 00:18:38.560
If you end up having to paint
each one of these things,

00:18:38.560 --> 00:18:42.340
these all need re-rasterizing
and then they all need copying

00:18:42.340 --> 00:18:44.280
over to the GPU.

00:18:44.280 --> 00:18:47.510
Eww should be what you feel.

00:18:47.510 --> 00:18:49.260
So this tool is amazing when
you want to figure out is

00:18:49.260 --> 00:18:51.820
something getting repainted,
what's getting repainted,

00:18:51.820 --> 00:18:53.910
switch on that tool, have
a look at what goes red.

00:18:53.910 --> 00:18:56.920
If you see a big red flash
across your whole screen,

00:18:56.920 --> 00:18:58.980
you've probably got
a problem, OK?

00:18:58.980 --> 00:19:01.700
So that's a good way
to find that out.

00:19:01.700 --> 00:19:04.820
So painting, avoid it.

00:19:04.820 --> 00:19:06.580
You can't avoid it on the first
time your page loads,

00:19:06.580 --> 00:19:09.120
but you want to try
after that.

00:19:09.120 --> 00:19:12.010
You can promote elements
to isolate them.

00:19:12.010 --> 00:19:16.700
If you have one element that
is moving around and maybe

00:19:16.700 --> 00:19:19.170
does need repainting, promoting
it is actually often

00:19:19.170 --> 00:19:21.480
a really good way to just make
sure that nothing else has to

00:19:21.480 --> 00:19:23.110
be repainted unnecessarily.

00:19:23.110 --> 00:19:26.430
But bear in mind that it can
also spawn other layers like I

00:19:26.430 --> 00:19:28.090
showed with the Next and
Previous buttons.

00:19:28.090 --> 00:19:29.410
You just want to be
careful with it.

00:19:29.410 --> 00:19:32.260
Layers themselves do actually
have a knock-on effect for

00:19:32.260 --> 00:19:35.090
memory, the management, and the
transfers I've mentioned.

00:19:35.090 --> 00:19:37.340
So just be careful with that.

00:19:37.340 --> 00:19:39.670
Often people say, well, how
many layers can I have?

00:19:39.670 --> 00:19:42.530
And there isn't a good answer to
that because it depends on

00:19:42.530 --> 00:19:45.220
the device that you're talking
about and whatever else you're

00:19:45.220 --> 00:19:45.980
actually trying to do.

00:19:45.980 --> 00:19:50.060
So you just profile it and see
if you can see how your frames

00:19:50.060 --> 00:19:53.570
per second is doing and respond
to that, really.

00:19:53.570 --> 00:19:56.940
Paint storms-- we were debating
this term earlier,

00:19:56.940 --> 00:19:57.980
what it really means.

00:19:57.980 --> 00:19:59.510
What it really comes down to
is you wouldn't want to be

00:19:59.510 --> 00:20:02.240
caught in an actual storm, you
don't want to be caught in a

00:20:02.240 --> 00:20:03.620
paint storm, either.

00:20:03.620 --> 00:20:05.440
It's generally you're
doing paint that you

00:20:05.440 --> 00:20:06.400
shouldn't be doing.

00:20:06.400 --> 00:20:08.420
You're either painting too much
or you're painting too

00:20:08.420 --> 00:20:10.420
often, all those
kind of things.

00:20:10.420 --> 00:20:13.680
It's just a nice name for saying
it's not what you want.

00:20:13.680 --> 00:20:17.990
You're doing too much paint,
so don't do that.

00:20:17.990 --> 00:20:21.400
Interestingly, because the GPU
is exceptionally good at these

00:20:21.400 --> 00:20:24.540
things particularly, they often
don't cause paints.

00:20:24.540 --> 00:20:28.580
If you isolate an element and
then monkey around with it's

00:20:28.580 --> 00:20:31.500
opacity and transforms,
we won't be repainted.

00:20:31.500 --> 00:20:33.010
Like those boxes, they
didn't repaint.

00:20:33.010 --> 00:20:36.420
Happy days, we all smiled
a happy smile.

00:20:36.420 --> 00:20:39.920
Image decodes and re-sizes,
those are done on demand.

00:20:39.920 --> 00:20:42.620
So when we're rasterizing we
hit one of those drawBitmap

00:20:42.620 --> 00:20:44.840
calls, we actually queue up
the decodes and re-sizes.

00:20:44.840 --> 00:20:48.410
So it can make for very
sporadic frame

00:20:48.410 --> 00:20:50.300
rates, let's call it.

00:20:50.300 --> 00:20:52.080
Because we do it on demand.

00:20:52.080 --> 00:20:55.120
So when something comes into
view that we need to

00:20:55.120 --> 00:20:57.510
rasterize, we go and get the
image, we decode it, which

00:20:57.510 --> 00:21:01.720
could kill us, and for all
intents and purposes that's

00:21:01.720 --> 00:21:03.100
not a good thing.

00:21:03.100 --> 00:21:07.980
So bear in mind that handling
images is expensive.

00:21:07.980 --> 00:21:11.490
You can't really avoid images
on the web, but just bear in

00:21:11.490 --> 00:21:13.470
mind that handling them is
expensive so you want to see

00:21:13.470 --> 00:21:14.410
if you can mitigate it.

00:21:14.410 --> 00:21:17.270
And one of the best ways to
do that is actually avoid

00:21:17.270 --> 00:21:18.620
resizing them when you can.

00:21:18.620 --> 00:21:23.930
And I say that frustratedly
because responsive web design

00:21:23.930 --> 00:21:27.490
is, a, popular and
b, quite cool.

00:21:27.490 --> 00:21:32.690
But it does put a really heavy
tax on the browser.

00:21:32.690 --> 00:21:36.150
So if you're going to do it,
just know that there's a tax

00:21:36.150 --> 00:21:39.840
and be happy to pay the tax.

00:21:39.840 --> 00:21:40.900
There you go.

00:21:40.900 --> 00:21:43.270
Now requesting an animation
frame, if you've

00:21:43.270 --> 00:21:45.320
not come across it.

00:21:45.320 --> 00:21:50.900
When you are changing things on
screen, please avoid these.

00:21:50.900 --> 00:21:56.320
They are not timed to the
browser's refresh cycle.

00:21:56.320 --> 00:21:58.550
So they will just run whatever
suits, and that could be at

00:21:58.550 --> 00:22:02.340
the worst possible time
for the browser.

00:22:02.340 --> 00:22:04.700
What you want to do is
use friendly green

00:22:04.700 --> 00:22:06.830
requestAnimationFrame.

00:22:06.830 --> 00:22:09.950
It is so helpful.

00:22:09.950 --> 00:22:12.130
Anybody use jQuery?

00:22:12.130 --> 00:22:12.730
Yeah?

00:22:12.730 --> 00:22:14.970
Anybody use jQuery animate?

00:22:14.970 --> 00:22:15.500
Yeah?

00:22:15.500 --> 00:22:16.395
OK.

00:22:16.395 --> 00:22:17.920
It currently uses
set interval.

00:22:17.920 --> 00:22:20.700
I would love that to change,
in fact I actually double

00:22:20.700 --> 00:22:22.880
checked that from the
jQuery source.

00:22:22.880 --> 00:22:25.870
It does use set interval.

00:22:25.870 --> 00:22:28.860
There are patches that you can
apply, then switch it back to

00:22:28.860 --> 00:22:30.490
requestAnimationFrame.

00:22:30.490 --> 00:22:33.670
Simple enough thing to do and it
might be worth it for your

00:22:33.670 --> 00:22:37.985
project if you are using
jQuery animate

00:22:37.985 --> 00:22:40.110
as it stands today.

00:22:40.110 --> 00:22:42.440
Scrolling performance is a
big, big deal actually,

00:22:42.440 --> 00:22:45.950
because most of the time people
scroll on the web.

00:22:45.950 --> 00:22:47.200
Apparently it happens
quite a lot.

00:22:49.470 --> 00:22:53.790
Scrolling then, it does cause
paints because as content

00:22:53.790 --> 00:22:57.050
becomes visible we have to
rasterize, we have to paint

00:22:57.050 --> 00:22:59.090
that stuff.

00:22:59.090 --> 00:23:00.940
So we want to make sure
that when we do it

00:23:00.940 --> 00:23:02.200
we keep things light.

00:23:06.780 --> 00:23:10.290
The easiest thing to do with
scrolling is to avoid doing

00:23:10.290 --> 00:23:13.550
anything in scrolling.

00:23:13.550 --> 00:23:15.620
There's a really good one
actually that you might want

00:23:15.620 --> 00:23:19.330
to look at, which is--

00:23:19.330 --> 00:23:20.720
it doesn't take too much
imagination-- if you're

00:23:20.720 --> 00:23:24.050
scrolling through and you
trigger a hover on an element

00:23:24.050 --> 00:23:27.480
as you're scrolling, then we
have to repaint the thing that

00:23:27.480 --> 00:23:28.330
you hovered.

00:23:28.330 --> 00:23:30.910
Then you keep scrolling, and you
hover out and we have to

00:23:30.910 --> 00:23:32.890
repaint the thing that you now
hovered out, just because you

00:23:32.890 --> 00:23:34.490
were scrolling past it.

00:23:34.490 --> 00:23:38.060
OK, now if your hover effects
are really expensive, that's

00:23:38.060 --> 00:23:39.080
going to be awful.

00:23:39.080 --> 00:23:44.180
What you want to do is you want
to basically switch off

00:23:44.180 --> 00:23:45.620
anything changing.

00:23:45.620 --> 00:23:48.260
So you basically add a class
or something that basically

00:23:48.260 --> 00:23:52.170
switches off hover effects
while you're scrolling.

00:23:52.170 --> 00:23:53.940
Wait a little bit of time then
switch them back on again.

00:23:53.940 --> 00:23:54.820
Happy days.

00:23:54.820 --> 00:23:58.140
There's a HTML5 Rocks article
about that, that I wrote.

00:23:58.140 --> 00:24:00.580
Pretty good.

00:24:00.580 --> 00:24:03.116
I mean the idea is good,
it wasn't my idea, I

00:24:03.116 --> 00:24:03.700
just wrote it up.

00:24:03.700 --> 00:24:07.280
Anyway, debounce scroll
handlers.

00:24:07.280 --> 00:24:09.530
What do you possibly
mean, Paul?

00:24:09.530 --> 00:24:11.570
I mean this.

00:24:11.570 --> 00:24:18.540
If you add a scroll listener to
your window, in this case,

00:24:18.540 --> 00:24:20.530
don't do anything inside
that scroll handler.

00:24:20.530 --> 00:24:24.160
Please, for the love of all that
is decent, don't do it.

00:24:24.160 --> 00:24:27.760
What you do, store the value if
you need to, great, super,

00:24:27.760 --> 00:24:30.390
and then schedule a
requestAnimationFrame to

00:24:30.390 --> 00:24:31.960
handle the scroll--

00:24:31.960 --> 00:24:32.620
the thing that happened.

00:24:32.620 --> 00:24:36.970
Because you can get 5, 10, 20
of these events, but really

00:24:36.970 --> 00:24:37.790
you probably only want one.

00:24:37.790 --> 00:24:40.580
You want the last one most
likely to know the current

00:24:40.580 --> 00:24:42.310
scroll position because you're
doing the parallax site.

00:24:49.690 --> 00:24:51.240
Just because it's cool doesn't
mean it's right.

00:24:54.208 --> 00:24:58.400
Just throw that out there
if anybody's listening.

00:24:58.400 --> 00:25:01.415
OK, the last thing I want to do,
because we're running low

00:25:01.415 --> 00:25:04.760
on time, is to just do a little
bit of myth busting.

00:25:04.760 --> 00:25:05.670
JavaScript--

00:25:05.670 --> 00:25:07.820
and you'll notice I haven't
talked about it at all.

00:25:07.820 --> 00:25:09.710
You maybe thought
I would, right?

00:25:09.710 --> 00:25:11.740
Because when we're not talking
about page load time we're

00:25:11.740 --> 00:25:16.300
talking about JavaScript and how
slow it is, and horrible.

00:25:16.300 --> 00:25:17.660
But it's not, actually.

00:25:17.660 --> 00:25:19.570
Work is often triggered
by your JavaScript.

00:25:19.570 --> 00:25:23.140
You maybe change a class with
dot classname or classlist or

00:25:23.140 --> 00:25:24.690
something, or whatever.

00:25:24.690 --> 00:25:27.050
It's often triggered by
JavaScript but the work that's

00:25:27.050 --> 00:25:29.720
actually running is often
carried out in C++.

00:25:29.720 --> 00:25:32.440
Layout is not done
in JavaScript.

00:25:32.440 --> 00:25:35.840
Layout is done in C++,
it's done lower down.

00:25:35.840 --> 00:25:37.170
So bear that in mind.

00:25:37.170 --> 00:25:40.990
And slow JavaScript is this
kind of idea that, oh

00:25:40.990 --> 00:25:43.440
JavaScript is slow and that's
why the mobile web is slow.

00:25:43.440 --> 00:25:47.470
No, it's not actually the
reason most of the time.

00:25:47.470 --> 00:25:48.960
Because it's not JavaScript
that's actually running.

00:25:48.960 --> 00:25:50.660
It's the other stuff that's
inside the browser that's

00:25:50.660 --> 00:25:51.470
actually running.

00:25:51.470 --> 00:25:53.090
Unless you're making
a game, or--

00:25:53.090 --> 00:25:55.890
there are classes of
applications that do rely on

00:25:55.890 --> 00:25:58.550
JavaScript quite heavily.

00:25:58.550 --> 00:26:00.720
I do want to say that I'd like
you to start treating

00:26:00.720 --> 00:26:06.770
JavaScript benchmarks with deep,
unyielding cynicism.

00:26:06.770 --> 00:26:10.200
Because JavaScript probably
isn't your bottleneck.

00:26:10.200 --> 00:26:11.840
Layout probably is
your bottleneck.

00:26:11.840 --> 00:26:14.690
Paint is probably
your bottleneck.

00:26:14.690 --> 00:26:19.420
So if you start seeing it's
really fast with JavaScript--

00:26:19.420 --> 00:26:22.120
yay, so.

00:26:22.120 --> 00:26:24.060
And then the other thing
is the DOM is slow.

00:26:24.060 --> 00:26:27.590
You hear this one quite a lot
for fairly similar reasons to

00:26:27.590 --> 00:26:28.890
the last, actually.

00:26:28.890 --> 00:26:30.490
Interacting with the
DOM is actually

00:26:30.490 --> 00:26:33.090
quite fast, as it happens.

00:26:33.090 --> 00:26:36.870
The problem is that changes to
the DOM probably incur changes

00:26:36.870 --> 00:26:40.490
that are layout, or recalc
style, layout, paint,

00:26:40.490 --> 00:26:42.880
composite, misery.

00:26:42.880 --> 00:26:44.760
So be careful.

00:26:44.760 --> 00:26:48.170
Now, going forth, aim for
60 frames a second.

00:26:48.170 --> 00:26:50.770
It is well and truly
achievable.

00:26:50.770 --> 00:26:52.380
You control the browser's
workload.

00:26:52.380 --> 00:26:54.820
You are in fact the
ship's captain.

00:26:54.820 --> 00:26:57.560
I brought it in.

00:26:57.560 --> 00:27:00.380
Performance is a feature,
it is not a unit test.

00:27:00.380 --> 00:27:02.220
It's not something you get to
the end of the project--

00:27:02.220 --> 00:27:03.230
am I fast?

00:27:03.230 --> 00:27:04.480
No--

00:27:06.170 --> 00:27:07.770
ship anyway.

00:27:07.770 --> 00:27:08.300
Nobody'll notice.

00:27:08.300 --> 00:27:11.780
Wait until they complain,
that's what we'll do.

00:27:11.780 --> 00:27:15.020
No, think of it, put
it on the list.

00:27:15.020 --> 00:27:16.780
It might be two, three,
four, but make

00:27:16.780 --> 00:27:17.890
sure it's on the list.

00:27:17.890 --> 00:27:19.850
Ideally put it number one.

00:27:19.850 --> 00:27:22.060
I do, oh I love that.

00:27:22.060 --> 00:27:24.040
Profile, and then fix.

00:27:24.040 --> 00:27:26.660
A lot of times you'll read
things that are like, this is

00:27:26.660 --> 00:27:28.820
fast, do this.

00:27:28.820 --> 00:27:29.470
And that's fine.

00:27:29.470 --> 00:27:30.740
Sometimes you need to do that.

00:27:30.740 --> 00:27:34.030
But you end up writing things
that don't fix the problem

00:27:34.030 --> 00:27:34.910
you've got.

00:27:34.910 --> 00:27:37.770
You end up writing something
that makes paint better, but

00:27:37.770 --> 00:27:39.490
you've got a layout problem.

00:27:39.490 --> 00:27:42.650
Profile, use DevTools, Paul
will show you how.

00:27:42.650 --> 00:27:44.860
Profile your stuff, figure out
where you're actually slow,

00:27:44.860 --> 00:27:46.310
then fix that thing.

00:27:46.310 --> 00:27:47.920
Sounds simple enough,
because it is.

00:27:47.920 --> 00:27:50.270
Profile early, profile often.

00:27:50.270 --> 00:27:51.410
Smile a happy smile.

00:27:51.410 --> 00:27:52.990
Do it.

00:27:52.990 --> 00:27:54.490
Thanks.

00:27:54.490 --> 00:28:07.138
[APPLAUSE]

