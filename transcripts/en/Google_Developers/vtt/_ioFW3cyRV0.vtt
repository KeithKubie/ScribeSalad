WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:00.900
[MUSIC PLAYING]

00:00:02.700 --> 00:00:04.790
In modern, mobile
applications, bitmaps

00:00:04.790 --> 00:00:06.770
can account for a large
amount of memory churn.

00:00:06.770 --> 00:00:10.112
Costly loading thumbnails,
user icons, and emoji sets

00:00:10.112 --> 00:00:12.320
can provide your users with
a steady stream of media,

00:00:12.320 --> 00:00:15.780
but it can also contribute to
some huge pauses for garbage

00:00:15.780 --> 00:00:16.540
collection.

00:00:16.540 --> 00:00:19.350
My name is Colt McAnlis, and for
temporarily allocated bitmaps,

00:00:19.350 --> 00:00:21.110
there's a handy trick
that you absolutely

00:00:21.110 --> 00:00:23.740
should be using to escape
these performance concerns.

00:00:23.740 --> 00:00:25.980
See, bitmaps represent the
largest contiguous blocks

00:00:25.980 --> 00:00:28.210
of memory that will
occupy your heaps, which

00:00:28.210 --> 00:00:31.190
can create a lot of contention
to find free space when

00:00:31.190 --> 00:00:33.770
a new one has been requested,
which, of course, then leads

00:00:33.770 --> 00:00:37.180
to more GC events being kicked
off to free up and provide

00:00:37.180 --> 00:00:38.092
that needed space.

00:00:38.092 --> 00:00:40.300
Now, when you've got a
media-rich applications that's

00:00:40.300 --> 00:00:42.220
providing lots of
images to the user,

00:00:42.220 --> 00:00:44.600
these extra GC events
during image loading

00:00:44.600 --> 00:00:46.990
can quickly eat into your
applications performance.

00:00:46.990 --> 00:00:48.740
Thankfully, though,
you can fix this issue

00:00:48.740 --> 00:00:52.490
by extending the concept
of object pools to bitmaps.

00:00:52.490 --> 00:00:53.950
Object pools are
a common technique

00:00:53.950 --> 00:00:55.167
for high-churn data types.

00:00:55.167 --> 00:00:57.250
Now, effectively, when
you're done with an object,

00:00:57.250 --> 00:00:59.208
rather than freeing it
back to the memory heap,

00:00:59.208 --> 00:01:02.040
you keep a reference to it in
the list of available objects.

00:01:02.040 --> 00:01:04.450
The next time you need a new
object of that same type,

00:01:04.450 --> 00:01:07.250
you can repurpose the
existing object from the pool

00:01:07.250 --> 00:01:09.870
rather than grabbing a brand
new one from the memory heap.

00:01:09.870 --> 00:01:13.110
Extending this to your bitmaps,
though, it is a little tricky.

00:01:13.110 --> 00:01:16.190
See, Android image-loading
APIs by default

00:01:16.190 --> 00:01:18.640
will load your image data
and create new bitmap

00:01:18.640 --> 00:01:20.630
on the heap for
them to reside in.

00:01:20.630 --> 00:01:23.450
But you can actually
around this limitation.

00:01:23.450 --> 00:01:25.120
Rather than creating
a brand new bitmap,

00:01:25.120 --> 00:01:28.600
you can signal to the decoder to
use an existing piece of memory

00:01:28.600 --> 00:01:30.220
to load that bitmap into.

00:01:30.220 --> 00:01:32.940
This is easily done using
the inBitmap property

00:01:32.940 --> 00:01:35.030
of your bitmap options object.

00:01:35.030 --> 00:01:38.060
When you assign the inBitmap
property to an existing bitmap,

00:01:38.060 --> 00:01:40.460
any of your decode
or load calls will

00:01:40.460 --> 00:01:43.440
reuse that existing bitmap
for the incoming pixel data

00:01:43.440 --> 00:01:45.210
rather than allocating
a new object

00:01:45.210 --> 00:01:47.694
from the heap, which is
great, because it means

00:01:47.694 --> 00:01:49.860
that for your awesome new
social media stream, where

00:01:49.860 --> 00:01:52.850
the user starts scrolling
through 10,000 profile photos,

00:01:52.850 --> 00:01:55.860
you don't need to create
10,000 separate bitmap objects.

00:01:55.860 --> 00:01:58.110
Instead you only need to
allocate the maximum number

00:01:58.110 --> 00:02:00.740
of bitmaps that could be
visible and just reuse

00:02:00.740 --> 00:02:03.560
those new bitmaps as they
scroll onto the screen.

00:02:03.560 --> 00:02:05.630
Now, this technique
comes with some caveats,

00:02:05.630 --> 00:02:07.800
though, that you
need to be aware of.

00:02:07.800 --> 00:02:10.870
Firstly, reused bitmaps have
a constraint with respect

00:02:10.870 --> 00:02:13.830
to the physical size of
the existing bitmaps.

00:02:13.830 --> 00:02:17.560
See, in SDK 18 and below,
the bitmap you're loading in

00:02:17.560 --> 00:02:19.180
and the bitmap
you're reusing must

00:02:19.180 --> 00:02:23.150
be the same exact size in order
for things to work properly.

00:02:23.150 --> 00:02:26.640
In SDK 19 and above, this has
been relaxed a little bit,

00:02:26.640 --> 00:02:28.480
in that your existing
bitmap can be

00:02:28.480 --> 00:02:30.660
greater than or equal
to the same dimensions

00:02:30.660 --> 00:02:32.350
of the incoming bitmap.

00:02:32.350 --> 00:02:37.070
Secondly, know that while you
can reuse across pixel formats,

00:02:37.070 --> 00:02:38.630
it's a pretty gnarly process.

00:02:38.630 --> 00:02:40.960
A much easier approach is
to use separate bitmaps

00:02:40.960 --> 00:02:43.150
for each unique pixel
format that you have.

00:02:43.150 --> 00:02:46.750
For example, if you're
using a 565 or a 4444 image

00:02:46.750 --> 00:02:48.460
in order to optimize
for memory space,

00:02:48.460 --> 00:02:51.910
you shouldn't reuse that
space for an 8888 image later.

00:02:51.910 --> 00:02:52.460
Trust me.

00:02:52.460 --> 00:02:53.777
Madness waits there.

00:02:53.777 --> 00:02:55.360
Oh, and to further
help out with this,

00:02:55.360 --> 00:02:58.160
it might save you some time
to create an object pool

00:02:58.160 --> 00:03:00.220
with common bitmap
sizes and formats

00:03:00.220 --> 00:03:03.040
that you can reuse over the
life of your application,

00:03:03.040 --> 00:03:05.867
reducing memory churn and
fragmentation even more.

00:03:05.867 --> 00:03:07.950
But in truth, this problem
has been around awhile,

00:03:07.950 --> 00:03:10.440
and lots of other people
have gone about solving it.

00:03:10.440 --> 00:03:12.480
In fact the Glide
library already

00:03:12.480 --> 00:03:14.970
has code to handle this
type of bitmap reuse

00:03:14.970 --> 00:03:16.600
as well as a ton of
other functionality

00:03:16.600 --> 00:03:19.719
that makes using bitmaps
on Android a world easier.

00:03:19.719 --> 00:03:22.260
I mean, it's really good to know
how the basics of this stuff

00:03:22.260 --> 00:03:25.330
work under the hood, but when it
comes to production level code,

00:03:25.330 --> 00:03:28.886
it's usually a good idea to
lean on libraries where you can.

00:03:28.886 --> 00:03:30.010
But this is just the start.

00:03:30.010 --> 00:03:32.260
There's a whole load of other
things that you can take

00:03:32.260 --> 00:03:34.250
advantage of to increase
your performance,

00:03:34.250 --> 00:03:36.625
which is why you should check
out the rest of the Android

00:03:36.625 --> 00:03:39.175
Performance Patterns content
and join the Google+ community

00:03:39.175 --> 00:03:42.220
for tips from other developers
facing the same problems.

00:03:42.220 --> 00:03:45.210
So keep calm, profile your
code, and always remember--

00:03:45.210 --> 00:03:46.090
Perfmatters.

00:03:46.090 --> 00:03:50.040
[MUSIC PLAYING]

