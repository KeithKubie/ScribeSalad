WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:02.150
So we know from before that applications

00:00:02.150 --> 00:00:05.370
compete for bandwidth. Consider a Voice over

00:00:05.370 --> 00:00:08.450
IP application and a file transfer application

00:00:08.450 --> 00:00:11.920
that want to share a common network link.

00:00:11.920 --> 00:00:14.260
In this case, we'd like the audio

00:00:14.260 --> 00:00:17.880
packets to receive priority over the file transfer

00:00:17.880 --> 00:00:20.530
packets. Since the user's experience can be

00:00:20.530 --> 00:00:25.070
significantly degraded by lost or delayed audio packets.

00:00:25.070 --> 00:00:31.320
In this case, we want to mark the audio packets as they arrive at the router,

00:00:31.320 --> 00:00:34.600
so that they receive a higher priority. Then

00:00:34.600 --> 00:00:37.950
the file transfer packets. You might imagine implementing

00:00:37.950 --> 00:00:41.860
this with priority queues where the void packets

00:00:41.860 --> 00:00:44.220
were put in one queue and the file

00:00:44.220 --> 00:00:47.650
transfer packets are put in a separate queue

00:00:47.650 --> 00:00:50.240
that is served less often than a high

00:00:50.240 --> 00:00:53.710
priority queue. An alternative is to allocate

00:00:53.710 --> 00:00:56.180
fixed ban width per application, but the problem

00:00:56.180 --> 00:00:58.310
with this alternative. Is that it can result

00:00:58.310 --> 00:01:01.830
in inefficiency if one of the flows doesn't

00:01:01.830 --> 00:01:05.580
fully utilize its fixed allocation. So the

00:01:05.580 --> 00:01:09.130
idea, in addition to marking and policing, is

00:01:09.130 --> 00:01:12.600
to apply scheduling. One way of applying scheduling

00:01:12.600 --> 00:01:15.140
is to use what's called weighted fair queuing,

00:01:15.140 --> 00:01:18.160
whereby the queue with the green packets is

00:01:18.160 --> 00:01:20.680
served more often than the queue with the

00:01:20.680 --> 00:01:23.810
red packets. Another alternative is to use admission

00:01:23.810 --> 00:01:28.220
control, whereby an application declares its needs in advance,

00:01:28.220 --> 00:01:31.360
and the network may block the application's traffic

00:01:31.360 --> 00:01:34.550
if the application can't satisfy the needs. A busy

00:01:34.550 --> 00:01:37.470
signal on a telephone network is an example

00:01:37.470 --> 00:01:40.460
of admission control. But can you imagine how annoying

00:01:40.460 --> 00:01:43.680
it would be if you attempted to load a web page

00:01:43.680 --> 00:01:47.880
and were blocked. This blocking or the user experience that results

00:01:47.880 --> 00:01:51.180
from it, is a negative consequence of admission control and is

00:01:51.180 --> 00:01:54.870
one of the reasons it's not commonly applied for internet applications.

