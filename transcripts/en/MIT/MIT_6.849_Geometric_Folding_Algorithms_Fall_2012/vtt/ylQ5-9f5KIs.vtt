WEBVTT
Kind: captions
Language: en

00:00:02.616 --> 00:00:03.490
PROFESSOR: All right.

00:00:03.490 --> 00:00:06.720
Welcome back to 6.849.

00:00:06.720 --> 00:00:12.620
Today we are going over
TreeMaker, folding polyhedra,

00:00:12.620 --> 00:00:14.900
folding checkerboards,
and Origamizer.

00:00:14.900 --> 00:00:16.500
Lots of stuff.

00:00:16.500 --> 00:00:18.150
And can't fit
everything in today,

00:00:18.150 --> 00:00:20.340
but we'll be doing more
Treemaker in some sense

00:00:20.340 --> 00:00:21.760
from a more
practical perspective

00:00:21.760 --> 00:00:25.710
in the very next lecture
video and next class,

00:00:25.710 --> 00:00:28.390
with a guest
lecture by Jason Ku.

00:00:28.390 --> 00:00:30.440
So today we have a
bunch of questions.

00:00:30.440 --> 00:00:33.460
We'll start with TreeMaker.

00:00:33.460 --> 00:00:35.132
So the first
question is, wow, you

00:00:35.132 --> 00:00:37.340
can make all these crazy
things with the tree method.

00:00:37.340 --> 00:00:38.910
Are they really uniaxial?

00:00:38.910 --> 00:00:41.990
And the answer is yes.

00:00:41.990 --> 00:00:43.580
And I think it's
probably easiest

00:00:43.580 --> 00:00:47.080
to just go through
some examples.

00:00:47.080 --> 00:00:49.880
These are all from Origami
Design Secrets, this book

00:00:49.880 --> 00:00:53.760
by Robert Lang, which is on
the recommended reading list.

00:00:53.760 --> 00:00:56.760
And I think there's even an
electronic copy available

00:00:56.760 --> 00:00:57.960
through MIT Libraries.

00:00:57.960 --> 00:01:03.390
So you can read it online or
there maybe one in the library.

00:01:03.390 --> 00:01:04.572
There's two editions.

00:01:04.572 --> 00:01:06.280
These figures are from
the first edition.

00:01:06.280 --> 00:01:12.390
So here is a-- the goal is
to design "Scorpion varileg."

00:01:12.390 --> 00:01:14.130
These are all
Robert Lang designs.

00:01:14.130 --> 00:01:17.260
You come up with this
stick figure, your tree.

00:01:17.260 --> 00:01:19.210
TreeMaker makes
this crease pattern.

00:01:19.210 --> 00:01:23.130
You can also see the
rivers here and the disks.

00:01:23.130 --> 00:01:26.069
And then you get this base.

00:01:26.069 --> 00:01:27.610
And then it folds
into that scorpion.

00:01:27.610 --> 00:01:29.359
So while the scorpion
doesn't look like it

00:01:29.359 --> 00:01:31.704
has a single axis--
scorpion, maybe.

00:01:31.704 --> 00:01:33.370
There's kind of an
axis down the center.

00:01:33.370 --> 00:01:35.610
But it's not just this axis.

00:01:35.610 --> 00:01:37.110
It branches, then
it branches again.

00:01:37.110 --> 00:01:40.490
You can make a tree and
it's still uniaxial.

00:01:40.490 --> 00:01:44.960
So uniaxial refers to
this axis in the base.

00:01:44.960 --> 00:01:48.050
All the flaps are
attached to that one spot.

00:01:48.050 --> 00:01:50.210
So in this picture,
it's vertical.

00:01:50.210 --> 00:01:53.280
Usually in the-- when
we draw all the figures,

00:01:53.280 --> 00:01:57.560
we think of it as the horizontal
plane, or horizontal line.

00:01:57.560 --> 00:02:02.250
So we imagine this is the floor.

00:02:02.250 --> 00:02:05.590
And then we have flaps
attached to the floor.

00:02:05.590 --> 00:02:08.770
Something like this.

00:02:08.770 --> 00:02:10.690
So in that sense, when
you flatten this base,

00:02:10.690 --> 00:02:12.635
everything lies along this axis.

00:02:12.635 --> 00:02:14.510
Even though, in terms
of branching structure,

00:02:14.510 --> 00:02:16.120
you could have lots of branches.

00:02:16.120 --> 00:02:18.370
So that's to clarify
what uniaxial means.

00:02:18.370 --> 00:02:22.940
Maybe not the best term, but I
have a few more examples here.

00:02:22.940 --> 00:02:25.110
This hat includes
a color reversal.

00:02:25.110 --> 00:02:27.860
Some crazy stick figure.

00:02:27.860 --> 00:02:29.329
And you get your pattern.

00:02:29.329 --> 00:02:30.620
Here's a somewhat simpler want.

00:02:30.620 --> 00:02:33.770
It makes a more three
dimensional horse.

00:02:33.770 --> 00:02:36.846
This Alamo Stallion.

00:02:36.846 --> 00:02:38.720
So you can go through,
and for each of these,

00:02:38.720 --> 00:02:43.340
I've just reverse engineered
from this crease pattern what

00:02:43.340 --> 00:02:45.000
the stick figure must be.

00:02:45.000 --> 00:02:47.290
And you're going to
do this on PSET2,

00:02:47.290 --> 00:02:50.750
which will be released
in a few minutes.

00:02:50.750 --> 00:02:53.820
And so this uniaxial's to
contrast from something,

00:02:53.820 --> 00:02:58.510
the kind of most famous
non-uniaxial or biaxial origami

00:02:58.510 --> 00:03:02.790
bases, with Montroll's Dog
Base, which looks like this.

00:03:02.790 --> 00:03:05.060
So it's very easy to turn
this into all sorts of dogs.

00:03:05.060 --> 00:03:06.890
This is a wiener dog.

00:03:06.890 --> 00:03:11.970
But you have kind of one
axis here and one axis here.

00:03:11.970 --> 00:03:15.130
Which is different.

00:03:15.130 --> 00:03:17.471
It's not the same kind of
branching tree structure.

00:03:17.471 --> 00:03:19.970
Of course, you can make a dog
using uniaxial method as well,

00:03:19.970 --> 00:03:23.220
but it's kind of a fun
counter example of the things

00:03:23.220 --> 00:03:24.630
you might do.

00:03:24.630 --> 00:03:26.430
So that's uniaxial.

00:03:26.430 --> 00:03:31.370
Next question is, do people
use TreeMaker and/or Origamizer

00:03:31.370 --> 00:03:32.710
in practice?

00:03:32.710 --> 00:03:35.500
And the short answer is no.

00:03:35.500 --> 00:03:38.260
I would say most origamists
don't use software

00:03:38.260 --> 00:03:40.390
to design things.

00:03:40.390 --> 00:03:43.370
But they use a lot of the
ideas in their own designs.

00:03:43.370 --> 00:03:45.290
So in particular,
the tree method

00:03:45.290 --> 00:03:48.220
of origami design, which
TreeMaker is implementing,

00:03:48.220 --> 00:03:51.940
almost every advanced
origami designer uses.

00:03:51.940 --> 00:03:55.180
Not everyone, but most of the
complicated-- most complex

00:03:55.180 --> 00:03:57.810
origami that you see uses
the tree method at least

00:03:57.810 --> 00:03:59.380
to get started.

00:03:59.380 --> 00:04:03.050
Origamizer is much newer,
so it's not used as much.

00:04:03.050 --> 00:04:05.840
Most of the cool designs--
I'll show you a bunch of both--

00:04:05.840 --> 00:04:10.320
are by Tomohiro Tachi,
who invented Origamizer.

00:04:10.320 --> 00:04:11.980
But I think it's still evolving.

00:04:11.980 --> 00:04:14.240
And hopefully, these
more advanced techniques

00:04:14.240 --> 00:04:17.950
will catch on with time.

00:04:17.950 --> 00:04:21.339
And by now, you've seen lots
of examples of the tree method.

00:04:21.339 --> 00:04:24.000
I'll show a few more from
Robert Lang's website.

00:04:24.000 --> 00:04:28.050
This is a local delicacy.

00:04:28.050 --> 00:04:30.710
And these are all
on langorigami.com,

00:04:30.710 --> 00:04:31.930
on his website.

00:04:31.930 --> 00:04:34.180
And we'll see even more
examples in the next class.

00:04:34.180 --> 00:04:39.080
And Jason Ku is going to give
an overview of various artists.

00:04:39.080 --> 00:04:41.460
And in some cases, they
publish crease patterns.

00:04:41.460 --> 00:04:42.740
Not always.

00:04:42.740 --> 00:04:44.640
This is not quite
the tree method.

00:04:44.640 --> 00:04:47.260
So this example was
standard tree method.

00:04:47.260 --> 00:04:49.629
You've got disks and rivers,
which aren't drawn here.

00:04:49.629 --> 00:04:50.670
You get a crease pattern.

00:04:50.670 --> 00:04:53.040
This could be done
directly from TreeMaker.

00:04:53.040 --> 00:04:55.750
I don't know for
sure whether it was.

00:04:55.750 --> 00:04:58.600
This pattern is not
done with TreeMaker

00:04:58.600 --> 00:05:02.320
because it's not regular disks.

00:05:02.320 --> 00:05:05.469
This is the box pleating version
of the tree method, which

00:05:05.469 --> 00:05:06.760
there's another question about.

00:05:06.760 --> 00:05:08.364
So we'll talk about that more.

00:05:08.364 --> 00:05:10.780
But you see all the creases
here are horizontal, vertical,

00:05:10.780 --> 00:05:13.050
or diagonal, 45 degrees.

00:05:13.050 --> 00:05:15.050
That makes it a lot easier
to fold, a lot easier

00:05:15.050 --> 00:05:16.091
to find reference points.

00:05:16.091 --> 00:05:17.660
You see it falls
nicely on a grid.

00:05:17.660 --> 00:05:20.230
But still, you get an
arbitrary tree structure.

00:05:23.160 --> 00:05:26.540
I think I have another example.

00:05:26.540 --> 00:05:31.319
This one also-- well, this
has 22 and 1/2 degree folds.

00:05:31.319 --> 00:05:32.610
It's a little bit more general.

00:05:32.610 --> 00:05:36.780
Also very non-stick figure-like
models, particularly.

00:05:36.780 --> 00:05:39.640
It's obviously called
the "Fiddler Crab."

00:05:39.640 --> 00:05:40.140
No, sorry.

00:05:40.140 --> 00:05:42.250
I have the wrong title here.

00:05:42.250 --> 00:05:45.480
I will fix that.

00:05:45.480 --> 00:05:48.380
I forget this guy's name,
but if anyone remembers.

00:05:48.380 --> 00:05:53.560
He wrote about the division
between scientists and people

00:05:53.560 --> 00:05:55.575
who know literature
as two different types

00:05:55.575 --> 00:05:56.950
of intellectuals
that know almost

00:05:56.950 --> 00:05:57.991
nothing about each other.

00:05:57.991 --> 00:06:04.130
At least in the early
1900s when he was writing.

00:06:04.130 --> 00:06:06.280
And one more example.

00:06:06.280 --> 00:06:10.380
This is based on
a 60 degree grid.

00:06:10.380 --> 00:06:15.720
So all the creases, I think,
lie at 60 degrees to the axis,

00:06:15.720 --> 00:06:17.780
or horizontal.

00:06:17.780 --> 00:06:21.260
There might be some 30 degrees.

00:06:21.260 --> 00:06:23.980
So I'll talk a little bit
about this alternate version

00:06:23.980 --> 00:06:26.490
of the tree method that doesn't
just use arbitrary circles,

00:06:26.490 --> 00:06:31.130
but tries to stay
on these nice grids.

00:06:31.130 --> 00:06:33.010
Here's just one more example.

00:06:33.010 --> 00:06:36.790
Jason Ku is the designer
of this model called "Pan."

00:06:36.790 --> 00:06:39.710
and he'll be giving
the guest lecture.

00:06:39.710 --> 00:06:41.190
So this is just one example.

00:06:41.190 --> 00:06:44.050
But tons and tons of
advanced origami artists

00:06:44.050 --> 00:06:46.800
use tree method
of origami design.

00:06:46.800 --> 00:06:50.390
And you get some pretty cool
crease patterns from it.

00:06:50.390 --> 00:06:53.670
But I think most people
do it by hand, usually

00:06:53.670 --> 00:06:55.890
on a computer using some
drawing programs that

00:06:55.890 --> 00:07:00.000
can compute intersections and
do things with high accuracy.

00:07:00.000 --> 00:07:04.220
And then they draw these
pictures, then they fold them.

00:07:04.220 --> 00:07:06.174
And then you get
your base and then

00:07:06.174 --> 00:07:07.340
you shape it into the model.

00:07:10.100 --> 00:07:13.630
So next I want to show you
some practical examples of

00:07:13.630 --> 00:07:17.680
So there's a bunch on
Tomohiro Tachi's Flickr site.

00:07:17.680 --> 00:07:18.890
This is one of the earliest.

00:07:18.890 --> 00:07:22.200
This is just making a
negative curvature surface

00:07:22.200 --> 00:07:25.920
that curves in both ways
like a saddle, called

00:07:25.920 --> 00:07:27.140
a hyperbolic paraboloid.

00:07:27.140 --> 00:07:28.860
We'll see more of
those in the future.

00:07:28.860 --> 00:07:32.070
But this is folded from
one square of paper.

00:07:32.070 --> 00:07:36.090
And there's tabs on the backside
that you don't see here.

00:07:36.090 --> 00:07:39.315
Here he's making a
kind of 3D bell curve.

00:07:44.692 --> 00:07:46.660
Here's a computer mouse.

00:07:46.660 --> 00:07:51.370
Apparently the scroll
wheel works fine. [LAUGHS]

00:07:51.370 --> 00:07:53.136
Doesn't support USB, though.

00:07:53.136 --> 00:07:55.890
Only Bluetooth.

00:07:55.890 --> 00:07:59.480
We've got a nice mask.

00:07:59.480 --> 00:08:02.250
These are all-- you're
given a 3D model,

00:08:02.250 --> 00:08:04.090
and you fold exactly
that 3D model.

00:08:07.140 --> 00:08:08.830
This is a tetrapod.

00:08:08.830 --> 00:08:11.700
So here it sort of shows
Tomohiro's background

00:08:11.700 --> 00:08:12.747
in architecture.

00:08:12.747 --> 00:08:14.330
If you haven't seen
tetrapods, they're

00:08:14.330 --> 00:08:19.170
used to hold back the ocean
and things from-- or hold

00:08:19.170 --> 00:08:20.780
from erosion and
things like that.

00:08:20.780 --> 00:08:22.370
So usually made out of concrete.

00:08:22.370 --> 00:08:26.310
But here you can make
them out of paper.

00:08:26.310 --> 00:08:27.940
Here's a flat design.

00:08:27.940 --> 00:08:32.990
So here the mesh, the
triangles were all in a plane.

00:08:32.990 --> 00:08:36.270
And of course, you still get
the tabs on the backside.

00:08:36.270 --> 00:08:38.900
But you make this
very exact leaf.

00:08:38.900 --> 00:08:40.400
You can get the
triangulation edges

00:08:40.400 --> 00:08:43.320
exactly where you
want them to express

00:08:43.320 --> 00:08:50.310
these veins of the leaf.

00:08:50.310 --> 00:08:53.655
Here's what it looks like to
fold one of these in practice.

00:08:53.655 --> 00:08:55.030
It's not quite a
square of paper,

00:08:55.030 --> 00:08:56.790
but it could be a square.

00:08:56.790 --> 00:08:59.690
And this is actually
folded at CSAIL.

00:08:59.690 --> 00:09:04.080
You might recognize
some of the furniture.

00:09:04.080 --> 00:09:06.075
And so while
Tomohiro's folding, he

00:09:06.075 --> 00:09:11.790
uses various devices--
paper clips and clips

00:09:11.790 --> 00:09:14.164
and so on-- to hold it in shape.

00:09:14.164 --> 00:09:15.830
Because until it's
completely collapsed,

00:09:15.830 --> 00:09:17.630
it kind of want to open back up.

00:09:17.630 --> 00:09:21.390
So it's kind of like having
a hundred hands at once.

00:09:21.390 --> 00:09:26.020
But when he's done, he'll
take all of them off,

00:09:26.020 --> 00:09:29.380
and you'll get-- so this,
I think, was about 10 hours

00:09:29.380 --> 00:09:32.510
and you get your bunny.

00:09:32.510 --> 00:09:35.320
Easy.

00:09:35.320 --> 00:09:37.920
Or this is the one we
did a little bit later,

00:09:37.920 --> 00:09:39.240
just last year.

00:09:39.240 --> 00:09:43.560
This is a laser
cut sheet of steel.

00:09:43.560 --> 00:09:46.290
And now, here we've
cut out bigger holes

00:09:46.290 --> 00:09:49.610
so there aren't too many
accumulation of layers.

00:09:49.610 --> 00:09:51.700
But essentially the same design.

00:09:51.700 --> 00:09:56.020
Somewhat coarser
mesh of the bunny.

00:09:56.020 --> 00:09:59.110
And you have to wear gloves,
otherwise you'll cut yourself.

00:09:59.110 --> 00:10:01.710
So we're perforating the
metal at the creases.

00:10:01.710 --> 00:10:05.090
And then also takes
about eight hours.

00:10:05.090 --> 00:10:06.760
A lot harder to fold steel.

00:10:09.390 --> 00:10:14.690
And in the end,
you get your bunny.

00:10:14.690 --> 00:10:16.860
So in principle, out of
any sheet of material,

00:10:16.860 --> 00:10:18.400
you can make any
3D shape you want.

00:10:18.400 --> 00:10:19.592
That's the exciting thing.

00:10:19.592 --> 00:10:21.300
So I think Origamizer
is really powerful.

00:10:21.300 --> 00:10:23.880
Obviously, it's hard to fold.

00:10:23.880 --> 00:10:25.220
You need to be pretty advanced.

00:10:25.220 --> 00:10:28.250
But there's a lot of
potential for designing

00:10:28.250 --> 00:10:30.650
very non-stick
figure-like models.

00:10:33.190 --> 00:10:37.400
So that was TreeMaker and
Origamizer in practice.

00:10:37.400 --> 00:10:41.010
So next question is
about this box pleating,

00:10:41.010 --> 00:10:43.270
which is the horizontal,
vertical, and 45 degree

00:10:43.270 --> 00:10:44.325
creases.

00:10:44.325 --> 00:10:48.820
And TreeMaker, is there
some theory for this?

00:10:48.820 --> 00:10:49.820
And indeed there is.

00:10:49.820 --> 00:10:54.200
And we started working on
it, me, Marty, and Rob Lang,

00:10:54.200 --> 00:10:56.290
I think during his
first visit here,

00:10:56.290 --> 00:10:59.055
which was probably
2004 or something.

00:10:59.055 --> 00:11:01.420
A long time ago.

00:11:01.420 --> 00:11:04.190
And the best writeup
of it currently

00:11:04.190 --> 00:11:07.071
is in Origami Design Secrets,
especially Second Edition.

00:11:07.071 --> 00:11:07.570
So

00:11:07.570 --> 00:11:10.290
It has a chapter on
basic tree theory,

00:11:10.290 --> 00:11:11.970
a chapter on box
pleating in general.

00:11:11.970 --> 00:11:13.830
This is sort of
classical box pleating.

00:11:13.830 --> 00:11:16.210
But then there's a
chapter on mixing the two.

00:11:16.210 --> 00:11:18.380
Uniaxial box pleating
and polygon packing.

00:11:18.380 --> 00:11:20.310
These kind of go together.

00:11:20.310 --> 00:11:21.910
So if you're interested
in this stuff,

00:11:21.910 --> 00:11:26.430
you want to design something
the way that the experts do,

00:11:26.430 --> 00:11:28.360
check out Origami
Design Secrets.

00:11:28.360 --> 00:11:30.130
Or go to an origami
convention where

00:11:30.130 --> 00:11:32.730
Rob was talking
about this stuff.

00:11:32.730 --> 00:11:35.740
We are working on
this giant manuscript.

00:11:35.740 --> 00:11:37.330
It's currently called
the Mathematics

00:11:37.330 --> 00:11:40.410
of Origami Design, which
is, in particular, trying

00:11:40.410 --> 00:11:43.860
to prove the tree
method always works.

00:11:43.860 --> 00:11:46.300
And we'll generalize
to things like this.

00:11:46.300 --> 00:11:49.950
But it's not finished, so we
don't have a complete proof

00:11:49.950 --> 00:11:51.370
yet that it all works.

00:11:51.370 --> 00:11:54.880
Everything seems fine, but it's
tedious to write it all down.

00:11:54.880 --> 00:11:56.670
So still working on it.

00:11:56.670 --> 00:11:59.170
But I thought I'd show you
an example of box pleating

00:11:59.170 --> 00:12:02.960
uniaxial origami design
from Origami Design Secrets.

00:12:02.960 --> 00:12:06.090
So this is sort of typical
tree method of origami design.

00:12:06.090 --> 00:12:07.840
If you're not necessarily
using TreeMaker,

00:12:07.840 --> 00:12:10.460
but you're doing it by
hand, you think about, OK.

00:12:10.460 --> 00:12:15.670
Suppose I want to make this kind
of insect, this stick figure.

00:12:15.670 --> 00:12:17.935
Maybe I realize, oh, it's
kind of centrally symmetric,

00:12:17.935 --> 00:12:19.310
so I'd like to
make the left half

00:12:19.310 --> 00:12:20.810
of the paper same
as the right half.

00:12:20.810 --> 00:12:23.580
You can also express that
in the TreeMaker software.

00:12:23.580 --> 00:12:25.350
And then you start
thinking about where

00:12:25.350 --> 00:12:27.090
these leaves
correspond to disks.

00:12:27.090 --> 00:12:29.089
Then you've got to have
the corresponding rivers

00:12:29.089 --> 00:12:29.790
in between them.

00:12:29.790 --> 00:12:31.623
So you might start with
this kind of layout,

00:12:31.623 --> 00:12:35.370
and then you try to blow it up
until things can't be expanded

00:12:35.370 --> 00:12:37.270
anymore and there's
lots of touching.

00:12:37.270 --> 00:12:38.880
So that would be
the usual approach.

00:12:38.880 --> 00:12:40.879
Then from that, you could
apply the tree method,

00:12:40.879 --> 00:12:42.530
get the crease pattern.

00:12:42.530 --> 00:12:45.780
With the box pleated version,
essentially, instead of disks,

00:12:45.780 --> 00:12:47.440
you have squares.

00:12:47.440 --> 00:12:51.160
And instead of rivers, you
have these orthogonal channels

00:12:51.160 --> 00:12:53.350
of constant width.

00:12:53.350 --> 00:12:55.670
And so I'll just wave my
hands and say that happens.

00:12:55.670 --> 00:12:59.250
Now, you get these weird
things-- you get these gaps.

00:12:59.250 --> 00:13:01.740
You tend to get more
gaps in this way.

00:13:01.740 --> 00:13:04.050
But in this case, instead
of just having a square,

00:13:04.050 --> 00:13:05.880
you can extend it out
to be a rectangle.

00:13:05.880 --> 00:13:07.546
So these guys are
actually going to fill

00:13:07.546 --> 00:13:11.650
in these holes like this.

00:13:11.650 --> 00:13:13.250
And then from
this, you can start

00:13:13.250 --> 00:13:14.520
constructing a crease pattern.

00:13:14.520 --> 00:13:19.440
So you start with
these ridge creases.

00:13:19.440 --> 00:13:21.749
And this is something
like a generalization.

00:13:21.749 --> 00:13:24.290
It's actually something like a
straight skeleton, which we'll

00:13:24.290 --> 00:13:25.748
be covering in a
couple of lectures

00:13:25.748 --> 00:13:28.230
for a different purpose,
where it was originally

00:13:28.230 --> 00:13:30.130
developed for origami purposes.

00:13:30.130 --> 00:13:34.060
But these are just
lots to bisectors.

00:13:34.060 --> 00:13:37.260
And you'll have to see
the general version later.

00:13:37.260 --> 00:13:39.390
And then you start putting
in the hinge creases.

00:13:39.390 --> 00:13:44.610
These are these green lines.

00:13:44.610 --> 00:13:47.992
And they're
perpendicular to these.

00:13:47.992 --> 00:13:50.880
These blue creases are
going to be the floor.

00:13:50.880 --> 00:13:52.440
And so on, you fill it in.

00:13:52.440 --> 00:13:55.640
Eventually you get your
complete crease pattern.

00:13:55.640 --> 00:13:57.830
So in a nutshell,
that's how it works.

00:13:57.830 --> 00:14:01.580
You tend to get tabs that are
a constant width like this.

00:14:01.580 --> 00:14:03.015
Constant height, I guess.

00:14:06.770 --> 00:14:08.730
And so, it's a
general technique.

00:14:08.730 --> 00:14:11.300
It's a little bit much to
explain here, but read the book

00:14:11.300 --> 00:14:12.681
if you want to see it.

00:14:12.681 --> 00:14:14.930
And I would say it's probably
some of the most common.

00:14:14.930 --> 00:14:16.700
There's a lot of
intuitive ways to do it,

00:14:16.700 --> 00:14:20.990
and then a lot of the details
are worked out in that book.

00:14:20.990 --> 00:14:23.350
But it's quite common to
design bases in this way,

00:14:23.350 --> 00:14:25.266
because it's just so
much easier to fold them.

00:14:25.266 --> 00:14:28.006
You don't have to construct
really weird angles.

00:14:28.006 --> 00:14:28.990
A lot cleaner.

00:14:28.990 --> 00:14:32.980
But a little bit less
efficient, because instead

00:14:32.980 --> 00:14:35.350
of using a disk, which is
the minimum amount of paper

00:14:35.350 --> 00:14:37.660
you need to make a flap,
you're using a square.

00:14:37.660 --> 00:14:39.630
So you're wasting
those little corners.

00:14:39.630 --> 00:14:43.190
But not that much
more inefficient.

00:14:43.190 --> 00:14:46.940
Cool, so that was that method.

00:14:46.940 --> 00:14:50.320
Next question I have is about
the triangulation algorithm,

00:14:50.320 --> 00:14:53.090
which I didn't even
cover in lecture.

00:14:53.090 --> 00:14:59.160
So this was you set up-- you
have your piece of paper.

00:14:59.160 --> 00:15:01.420
And you assign each
leaf in this tree

00:15:01.420 --> 00:15:03.750
to some point in
the piece of paper.

00:15:03.750 --> 00:15:06.440
And you satisfy the
active path condition

00:15:06.440 --> 00:15:09.420
so each of these distances
measured on the paper

00:15:09.420 --> 00:15:13.040
should be greater than or
equal to the distance measured

00:15:13.040 --> 00:15:15.650
on the tree, which is
the floor of the base.

00:15:18.360 --> 00:15:19.520
Great.

00:15:19.520 --> 00:15:21.510
And so if you happen to
have some equalities,

00:15:21.510 --> 00:15:24.230
you draw in active paths.

00:15:24.230 --> 00:15:26.100
But what if you don't have any?

00:15:26.100 --> 00:15:27.990
Or you don't have enough?

00:15:27.990 --> 00:15:32.050
The tree method in
its original form

00:15:32.050 --> 00:15:36.260
only works when the active paths
decompose the piece of paper

00:15:36.260 --> 00:15:38.500
into convex polygons.

00:15:38.500 --> 00:15:40.580
This is what you'd
like to have happen.

00:15:40.580 --> 00:15:43.170
Each of the faces here
is a convex polygon.

00:15:43.170 --> 00:15:44.340
If that happens, great.

00:15:44.340 --> 00:15:47.279
You can use the
universal molecule

00:15:47.279 --> 00:15:48.320
and you get your folding.

00:15:48.320 --> 00:15:50.450
If it doesn't happen,
you have to modify

00:15:50.450 --> 00:15:52.210
your tree a little bit.

00:15:52.210 --> 00:15:55.230
There are a couple ways to
do this in the TreeMaker.

00:15:55.230 --> 00:15:56.770
You can modify
these edge lengths

00:15:56.770 --> 00:15:59.180
and try to modify them
as little as possible

00:15:59.180 --> 00:16:01.050
so that things touch.

00:16:01.050 --> 00:16:03.290
But the easy way to
prove that something

00:16:03.290 --> 00:16:06.440
is possible-- because remember,
if we add a little bit

00:16:06.440 --> 00:16:09.344
to the base, we
get an extra flap.

00:16:09.344 --> 00:16:10.510
That doesn't really hurt us.

00:16:10.510 --> 00:16:12.859
At the end, we
can hide the flap.

00:16:12.859 --> 00:16:14.900
Just fold it against other
flaps and just pretend

00:16:14.900 --> 00:16:16.070
it wasn't there.

00:16:16.070 --> 00:16:19.250
So as long as we can
add flaps in order

00:16:19.250 --> 00:16:25.030
to make the active paths
decompose into convex polygons,

00:16:25.030 --> 00:16:26.040
we're happy.

00:16:26.040 --> 00:16:30.580
And in fact, what we prove is
that you can keep adding flaps

00:16:30.580 --> 00:16:32.200
until you get into triangles.

00:16:32.200 --> 00:16:34.390
And triangles are always convex.

00:16:34.390 --> 00:16:37.350
And so they make us happy.

00:16:37.350 --> 00:16:41.070
So we will end up adding a
bunch of flaps in our tree

00:16:41.070 --> 00:16:43.524
in order to triangulate
with active paths.

00:16:43.524 --> 00:16:44.940
And then in each
of these, we just

00:16:44.940 --> 00:16:48.340
fill in a rabbit ear molecule.

00:16:48.340 --> 00:16:49.730
So that's the goal.

00:16:49.730 --> 00:16:52.970
Now let me tell you how the
triangulation actually works.

00:16:56.810 --> 00:16:58.590
It was originally
described by Lang.

00:16:58.590 --> 00:17:03.670
It's also in the
textbook for this class.

00:17:03.670 --> 00:17:06.380
I'll try to give an
abbreviated version here.

00:17:06.380 --> 00:17:09.900
It's a little bit technical,
but here's the idea.

00:17:09.900 --> 00:17:14.920
So suppose-- all right.

00:17:14.920 --> 00:17:18.030
So we've assigned some leaves.

00:17:18.030 --> 00:17:22.367
And suppose we have some
region that's not convex.

00:17:22.367 --> 00:17:23.200
It's not a triangle.

00:17:23.200 --> 00:17:25.490
Has more than three sides.

00:17:25.490 --> 00:17:29.949
Now, some of these edges
may come from active paths,

00:17:29.949 --> 00:17:32.240
and some of them may be from
the boundary of the paper.

00:17:32.240 --> 00:17:35.690
So maybe the paper is here.

00:17:35.690 --> 00:17:37.849
So this edge is not active.

00:17:37.849 --> 00:17:39.390
It's just the boundary
of this region

00:17:39.390 --> 00:17:41.020
because it's the
boundary of the paper.

00:17:41.020 --> 00:17:43.230
So there are two types of edges.

00:17:43.230 --> 00:17:47.430
But there should be, I guess,
at least one active edge.

00:17:47.430 --> 00:17:50.700
And there's at least
four edges total.

00:17:50.700 --> 00:17:55.020
So what I'm going to do is look
at any of the active edges,

00:17:55.020 --> 00:17:58.660
and I'm going to imagine-- OK.

00:17:58.660 --> 00:18:01.900
So that active edge, this
is in the piece of paper.

00:18:01.900 --> 00:18:03.920
But now I'm going to think
about it in the tree.

00:18:03.920 --> 00:18:05.560
So the tree looks
like something.

00:18:05.560 --> 00:18:08.780
We don't really know what.

00:18:08.780 --> 00:18:14.596
Any active path here
corresponds to an active path

00:18:14.596 --> 00:18:16.220
in the tree of exactly
the same length.

00:18:16.220 --> 00:18:18.740
So maybe it's from
this leaf to this leaf.

00:18:18.740 --> 00:18:23.570
So it corresponds
to-- use a color.

00:18:23.570 --> 00:18:27.380
This guy corresponds
to this path.

00:18:27.380 --> 00:18:30.020
And the sum of those lengths
should be equal to that length.

00:18:30.020 --> 00:18:36.080
It isn't, obviously, but there's
a scale factor in between here.

00:18:36.080 --> 00:18:37.720
Lambda.

00:18:37.720 --> 00:18:38.220
OK.

00:18:38.220 --> 00:18:39.511
So here's what I'm going to do.

00:18:39.511 --> 00:18:44.870
I'm going to modify the tree
by adding a new leaf somewhere

00:18:44.870 --> 00:18:47.310
off of this path.

00:18:47.310 --> 00:18:47.935
OK, where?

00:18:50.510 --> 00:18:56.090
For convenience, let's assume
that this path length here

00:18:56.090 --> 00:18:58.160
is 1.

00:18:58.160 --> 00:19:04.290
Then I'm going to measure
out some distance x here,

00:19:04.290 --> 00:19:09.680
which will leave a different
distance, 1 minus x, here.

00:19:09.680 --> 00:19:14.530
And then I'm going to make
this length, I guess, L.

00:19:14.530 --> 00:19:19.380
And I'm going to call this
leaf L. Capital L. OK.

00:19:19.380 --> 00:19:20.950
This is a modification
to a tree.

00:19:20.950 --> 00:19:21.650
I can do it.

00:19:21.650 --> 00:19:23.720
I can do it for any value
of x between 0 and 1.

00:19:23.720 --> 00:19:27.640
And i can do it for any value
of L greater or equal to 0.

00:19:27.640 --> 00:19:30.210
So what I'd like to
do is design the tree

00:19:30.210 --> 00:19:32.490
so that this point ends
up in an interesting place

00:19:32.490 --> 00:19:34.680
on the piece of paper.

00:19:34.680 --> 00:19:38.870
In fact, I claim that no
matter where I draw L here,

00:19:38.870 --> 00:19:41.860
capital L, as my desired place.

00:19:41.860 --> 00:19:44.382
Now, what I'd really
like is for-- I

00:19:44.382 --> 00:19:45.590
should give these guys names.

00:19:45.590 --> 00:19:51.740
This is called U, or say, in
the notes, I call it V and W.

00:19:51.740 --> 00:19:57.190
So here we have W
and V. What I would

00:19:57.190 --> 00:20:02.620
like is for these two
paths to also be active.

00:20:02.620 --> 00:20:06.610
Meaning the lengths here
match the lengths in the tree.

00:20:06.610 --> 00:20:10.260
I claim that no matter
where I put L in the plane,

00:20:10.260 --> 00:20:14.480
anywhere in the plane, I
can choose x and choose L

00:20:14.480 --> 00:20:17.710
so that these two lengths
are exactly correct.

00:20:17.710 --> 00:20:18.870
Do you believe me?

00:20:21.660 --> 00:20:23.420
Not really.

00:20:23.420 --> 00:20:25.882
How many people think
this is obvious?

00:20:25.882 --> 00:20:26.381
Good.

00:20:26.381 --> 00:20:29.339
A couple maybe.

00:20:29.339 --> 00:20:30.630
Let me give you a quick sketch.

00:20:30.630 --> 00:20:32.495
It's not that
interesting, so I just

00:20:32.495 --> 00:20:33.620
want to do it very briefly.

00:20:37.040 --> 00:20:41.680
If you let x be a free
parameter, but fix l,

00:20:41.680 --> 00:20:44.760
little l, then what
this corresponds to

00:20:44.760 --> 00:20:55.870
is, in fact, an ellipse with V
and W as foci of the ellipse.

00:20:55.870 --> 00:20:59.510
Because you have to hold the
sum of these lengths fixed

00:20:59.510 --> 00:21:03.740
if you fix-- if you let x vary,
this length plus this length

00:21:03.740 --> 00:21:07.630
is always going to be
the same if you fix l.

00:21:07.630 --> 00:21:10.280
And so this is called
the major axis,

00:21:10.280 --> 00:21:15.055
the sum of these two lengths
is going to be like 1 plus 2l.

00:21:15.055 --> 00:21:17.440
And so if I have a
point, basically, there's

00:21:17.440 --> 00:21:19.300
some ellipse of the
appropriate size that

00:21:19.300 --> 00:21:22.600
passes through L. That will
let me choose little l.

00:21:22.600 --> 00:21:25.357
And then as I vary x, I
walk around the ellipse.

00:21:25.357 --> 00:21:26.940
So I just choose the
appropriate value

00:21:26.940 --> 00:21:29.923
of x that gets me the
desired point on the ellipse.

00:21:29.923 --> 00:21:32.116
That's it.

00:21:32.116 --> 00:21:34.490
The point is, the set of all
ellipses with these two foci

00:21:34.490 --> 00:21:35.850
spans the entire plane.

00:21:35.850 --> 00:21:37.740
So wherever you
want to put L, you

00:21:37.740 --> 00:21:39.400
can make those two paths active.

00:21:39.400 --> 00:21:41.800
OK, this is good, because
it makes a little triangle.

00:21:41.800 --> 00:21:44.600
But of course, if I just add
an arbitrary triangle, not very

00:21:44.600 --> 00:21:45.340
interesting.

00:21:45.340 --> 00:21:48.130
The good thing is I'm free
to put L wherever I want.

00:21:48.130 --> 00:21:50.640
I'd really like
to put L say here

00:21:50.640 --> 00:21:53.020
and draw active paths like that.

00:21:53.020 --> 00:21:55.120
Because then I'm kind of
decomposing my polygon

00:21:55.120 --> 00:21:56.070
into triangles.

00:21:56.070 --> 00:21:58.260
That's not always possible.

00:21:58.260 --> 00:22:00.300
So let's just go
through the cases.

00:22:00.300 --> 00:22:02.800
In all cases, we're going
to simplify a polygon,

00:22:02.800 --> 00:22:04.820
make it have fewer sides.

00:22:04.820 --> 00:22:06.840
And that's on the next page.

00:22:09.600 --> 00:22:23.687
So the claim is-- well, the L.
There's sort of three cases.

00:22:23.687 --> 00:22:25.270
Going to reorganize
this a little bit.

00:22:39.500 --> 00:22:42.630
One thing that would be nice
is I can place L-- maybe

00:22:42.630 --> 00:22:45.660
I'll draw another
version of this.

00:22:45.660 --> 00:22:48.990
So I've got UV.

00:22:48.990 --> 00:22:52.290
I'll draw the
active paths in red.

00:22:52.290 --> 00:22:54.090
So we know UV is active.

00:22:54.090 --> 00:22:56.810
We've got L. If I
could somehow place L

00:22:56.810 --> 00:23:03.090
so that it's active with two
other points, two other leaves.

00:23:03.090 --> 00:23:10.250
This is V and W. This
is U and this is T.

00:23:10.250 --> 00:23:17.190
If I can do this, and the region
looks something like that,

00:23:17.190 --> 00:23:18.970
then I'm happy.

00:23:18.970 --> 00:23:24.320
I'm going to put L there
and add in these four edges.

00:23:24.320 --> 00:23:28.475
And essentially, if you look at
any one of these regions that

00:23:28.475 --> 00:23:29.850
remains, there's
a triangle here.

00:23:29.850 --> 00:23:31.030
That's definitely OK.

00:23:31.030 --> 00:23:32.640
These regions, each
of them will have

00:23:32.640 --> 00:23:35.014
fewer edges than
the original region.

00:23:35.014 --> 00:23:36.680
That's pretty easy
to prove, because you

00:23:36.680 --> 00:23:39.810
have-- Because you're connecting
to these four vertices,

00:23:39.810 --> 00:23:43.480
this region won't have
this vertex or this vertex.

00:23:43.480 --> 00:23:46.830
So it has one added vertex and
two removed vertices at least,

00:23:46.830 --> 00:23:48.880
W and T. So this
one will be smaller.

00:23:48.880 --> 00:23:51.070
And this is symmetric
for all of them.

00:23:51.070 --> 00:23:51.570
OK.

00:23:51.570 --> 00:23:53.020
So this would be a good case.

00:23:53.020 --> 00:23:55.480
So what I'm going to do
is try to move L around.

00:23:55.480 --> 00:23:58.190
I'm going to start
very close to VW

00:23:58.190 --> 00:24:00.780
and just start
moving off the edge.

00:24:00.780 --> 00:24:02.420
Initially, nothing
else will be active

00:24:02.420 --> 00:24:05.130
because it's basically
right on top of VW.

00:24:05.130 --> 00:24:09.970
But as I move around, I might
get another active path.

00:24:09.970 --> 00:24:10.870
OK.

00:24:10.870 --> 00:24:14.440
Maybe this is Case 1A.

00:24:14.440 --> 00:24:20.550
Before we get there, Case
1 is you get LU active.

00:24:20.550 --> 00:24:26.810
Suppose you just to get
one additional active path.

00:24:26.810 --> 00:24:29.646
The other case is, nothing
else becomes active.

00:24:29.646 --> 00:24:36.970
So here's V, here's W. Here's
L. Here's U. So this is active,

00:24:36.970 --> 00:24:40.020
active, active, active.

00:24:40.020 --> 00:24:42.680
OK, what I'm going to
do in this situation is,

00:24:42.680 --> 00:24:46.240
if I want to keep LU
active, I can actually

00:24:46.240 --> 00:24:48.520
move L on a circle.

00:24:51.490 --> 00:24:57.570
As long as L stays on this
circle, LU remains active.

00:24:57.570 --> 00:24:58.220
OK?

00:24:58.220 --> 00:25:00.320
So just move it
along the circle.

00:25:00.320 --> 00:25:01.920
Now, there are
two possibilities.

00:25:01.920 --> 00:25:04.120
It could be it becomes
active with something else.

00:25:04.120 --> 00:25:06.550
Then I'm done.

00:25:06.550 --> 00:25:10.572
Or it could be it doesn't, which
means it will hit the boundary.

00:25:10.572 --> 00:25:13.000
So it will hit a boundary point.

00:25:13.000 --> 00:25:15.240
So Case 1A-- so this is Case 1.

00:25:15.240 --> 00:25:17.130
You can make something active.

00:25:17.130 --> 00:25:18.880
When you move along
the circle, either you

00:25:18.880 --> 00:25:21.447
make another thing active,
or you won't and you

00:25:21.447 --> 00:25:22.155
hit the boundary.

00:25:24.950 --> 00:25:30.900
Case 1B is you hit the boundary.

00:25:30.900 --> 00:25:34.570
And then I claim
you're also happy.

00:25:34.570 --> 00:25:43.340
So in that situation--
draw it one more time--

00:25:43.340 --> 00:25:46.300
we've got L on the boundary.

00:25:46.300 --> 00:25:52.250
And we've got some path
here, here, here, here.

00:25:52.250 --> 00:25:53.982
These are all active.

00:25:53.982 --> 00:25:57.350
So here's L. OK.

00:25:57.350 --> 00:25:59.210
I claim again, each
of these regions

00:25:59.210 --> 00:26:03.206
has fewer vertices than before.

00:26:03.206 --> 00:26:05.340
Should be pretty obvious.

00:26:05.340 --> 00:26:17.733
This one is emitting W
and this was U. Yeah.

00:26:17.733 --> 00:26:19.490
It's emitting W
and it's emitting

00:26:19.490 --> 00:26:21.765
whatever's down
here, if anything.

00:26:21.765 --> 00:26:23.414
Yeah, I think it's
pretty obvious.

00:26:23.414 --> 00:26:24.830
You've got to check
all the cases.

00:26:24.830 --> 00:26:26.410
There's a few details here.

00:26:26.410 --> 00:26:29.050
But it should be each of
these regions has strictly

00:26:29.050 --> 00:26:31.811
fewer vertices
than it did before.

00:26:31.811 --> 00:26:33.115
And so you're making progress.

00:26:33.115 --> 00:26:38.100
If You started with all faces
having some number of edges,

00:26:38.100 --> 00:26:41.410
each time you do one of
these steps, you decrease it.

00:26:41.410 --> 00:26:48.440
OK, the last case, Case 2, is
you can't make anything active.

00:26:53.840 --> 00:26:56.070
This can happen, for
example, if you're

00:26:56.070 --> 00:26:58.310
in the corner of
the piece of paper

00:26:58.310 --> 00:27:03.897
and you have an active path.

00:27:03.897 --> 00:27:05.480
I guess that's a
little less exciting.

00:27:05.480 --> 00:27:07.295
Maybe your piece of
paper is this shape.

00:27:07.295 --> 00:27:09.070
Be a little bit weirder.

00:27:09.070 --> 00:27:12.162
So this will work for any
convex piece of paper.

00:27:12.162 --> 00:27:13.370
So it's not quite a triangle.

00:27:13.370 --> 00:27:15.610
And you're moving L
around here and you just

00:27:15.610 --> 00:27:17.030
can't get another active path.

00:27:17.030 --> 00:27:18.590
You have no vertices around.

00:27:18.590 --> 00:27:26.050
This is W, this is U-- sorry,
this is V. And in this case,

00:27:26.050 --> 00:27:27.320
L can go anywhere here.

00:27:27.320 --> 00:27:28.600
It's free.

00:27:28.600 --> 00:27:30.950
In that case, I'm
going to put L on one

00:27:30.950 --> 00:27:33.330
of the vertices of the paper.

00:27:33.330 --> 00:27:35.820
So I get this active
and this active.

00:27:35.820 --> 00:27:40.167
And then I've decomposed
that region into pieces by,

00:27:40.167 --> 00:27:41.500
this is what we call a diagonal.

00:27:41.500 --> 00:27:44.410
We're adding a vertex to
vertex edge in this polygon.

00:27:44.410 --> 00:27:45.930
And that always
decreases the number

00:27:45.930 --> 00:27:49.920
of sides in each
of the subregions.

00:27:49.920 --> 00:27:53.660
So if I just keep doing this,
taking any region of size

00:27:53.660 --> 00:27:55.570
larger than three,
I will eventually

00:27:55.570 --> 00:27:58.430
reduce them all to
have size three.

00:27:58.430 --> 00:28:00.460
So they'll all be triangles.

00:28:00.460 --> 00:28:04.450
So that's the triangulation
algorithm in a nutshell.

00:28:04.450 --> 00:28:07.570
You can look at the textbook if
you want to see it more detail,

00:28:07.570 --> 00:28:10.620
but it's pretty simple.

00:28:10.620 --> 00:28:13.264
This proves that
something is possible.

00:28:13.264 --> 00:28:15.680
I don't think TreeMaker actually
implements this algorithm

00:28:15.680 --> 00:28:18.170
specifically, but you can
kind of do it by hand.

00:28:18.170 --> 00:28:19.510
So I have a little example here.

00:28:19.510 --> 00:28:20.900
This is TreeMaker.

00:28:20.900 --> 00:28:22.470
I drew this really weird tree.

00:28:22.470 --> 00:28:25.310
We call it a caterpillar tree
because you would actually

00:28:25.310 --> 00:28:28.040
use it to make caterpillars.

00:28:28.040 --> 00:28:32.110
And if you just plug this into
TreeMaker with all the lengths

00:28:32.110 --> 00:28:34.600
unit, it will give you
this error message.

00:28:34.600 --> 00:28:36.160
I couldn't construct
all the polygons

00:28:36.160 --> 00:28:37.950
because things
weren't tight enough.

00:28:37.950 --> 00:28:39.866
And if you look carefully--
it's a little hard

00:28:39.866 --> 00:28:42.690
to see these colors-- but
the light green edges,

00:28:42.690 --> 00:28:44.410
those are the active paths.

00:28:44.410 --> 00:28:47.810
And here-- so this was a
triangle and it was happy.

00:28:47.810 --> 00:28:51.290
If you look at this green
polygon-- maybe actually

00:28:51.290 --> 00:28:55.690
I'll draw with the tablet.

00:28:55.690 --> 00:29:05.560
So this thing is
an active-- that's

00:29:05.560 --> 00:29:07.410
a region bounded
by active paths.

00:29:07.410 --> 00:29:09.500
And probably the top edge
is not an active path.

00:29:09.500 --> 00:29:10.540
That's just a boundary.

00:29:10.540 --> 00:29:11.870
But it's not convex.

00:29:11.870 --> 00:29:13.830
And so you're unhappy.

00:29:13.830 --> 00:29:15.880
And so I just kind of
eyeball this and say, OK.

00:29:15.880 --> 00:29:18.680
Well, probably I should
add another leaf here

00:29:18.680 --> 00:29:21.957
that would maybe add a disk
that will probably fill that in.

00:29:21.957 --> 00:29:23.540
So you don't have
to be super-precise.

00:29:23.540 --> 00:29:25.160
Here we had the
very carefully place

00:29:25.160 --> 00:29:26.560
the disk to make things touch.

00:29:26.560 --> 00:29:28.310
But because TreeMaker's
always just trying

00:29:28.310 --> 00:29:30.340
to blow things up
and make them touch,

00:29:30.340 --> 00:29:32.600
it's quite a bit
easier in practice.

00:29:32.600 --> 00:29:34.440
You just say, OK.

00:29:34.440 --> 00:29:39.575
I will add an extra leaf
here, like that, to my tree.

00:29:39.575 --> 00:29:43.357
And then I hit Optimize,
and boom, it works.

00:29:43.357 --> 00:29:44.440
In this case, I was lucky.

00:29:44.440 --> 00:29:46.850
In general, I might
get a nonconvex region.

00:29:46.850 --> 00:29:50.800
I'd guess where to add
another leaf, and it works.

00:29:50.800 --> 00:29:51.989
You can adjust.

00:29:51.989 --> 00:29:53.405
Did that leaf have
to be that bit,

00:29:53.405 --> 00:29:55.030
or could I get away
with a smaller one?

00:29:55.030 --> 00:29:57.339
But eventually, you
will get a base.

00:29:57.339 --> 00:29:59.630
And if you want, you could
carefully monitor this proof

00:29:59.630 --> 00:30:01.527
and actually always succeed.

00:30:01.527 --> 00:30:03.360
But in practice, it's
usually not that hard.

00:30:06.310 --> 00:30:08.880
Questions about that?

00:30:08.880 --> 00:30:13.436
So that was the triangulation
method in a nutshell.

00:30:13.436 --> 00:30:16.675
The next question is about
the universal molecule.

00:30:16.675 --> 00:30:20.250
And we might spend some more
time on this next class.

00:30:20.250 --> 00:30:22.540
But I thought we could
actually look at this example,

00:30:22.540 --> 00:30:27.460
because it's got a bunch of
different universal molecules.

00:30:27.460 --> 00:30:29.680
So I will continue to draw.

00:30:35.510 --> 00:30:41.621
So let me pick, let's say,
this universal molecule here.

00:30:41.621 --> 00:30:42.495
It's a quadrilateral.

00:30:50.141 --> 00:30:50.640
All right.

00:30:50.640 --> 00:30:55.180
So those are four active
paths in this case.

00:30:55.180 --> 00:30:59.040
And it corresponds to some tree.

00:30:59.040 --> 00:31:01.360
So I don't have
handy here, but it's

00:31:01.360 --> 00:31:03.585
going to be a tree
with four edges.

00:31:06.300 --> 00:31:08.980
With four leaves, sorry.

00:31:08.980 --> 00:31:11.590
Tree with four leaves is going
to look something like this.

00:31:11.590 --> 00:31:13.900
This is a piece of
the bigger tree, which

00:31:13.900 --> 00:31:17.900
you recall looked
something like this.

00:31:17.900 --> 00:31:20.730
And we added one somewhere.

00:31:20.730 --> 00:31:22.910
But this particular
quadrilateral

00:31:22.910 --> 00:31:27.070
is doing some particular
subtree on four leaves.

00:31:27.070 --> 00:31:30.020
In particular, there
are four leaves here,

00:31:30.020 --> 00:31:31.950
correspond to four leaves here.

00:31:31.950 --> 00:31:33.020
I don't know which ones.

00:31:33.020 --> 00:31:34.710
I don't really need to know.

00:31:34.710 --> 00:31:38.991
TreeMaker keeps
track of it for me.

00:31:38.991 --> 00:31:41.240
And I happen to know that
these four paths are active.

00:31:41.240 --> 00:31:44.710
Meaning the lengths in the
plane here match exactly

00:31:44.710 --> 00:31:48.540
the lengths as measured
along the tree.

00:31:48.540 --> 00:31:51.330
So what I do to make
this work-- this

00:31:51.330 --> 00:31:54.240
is basically the
floor of the molecule.

00:31:54.240 --> 00:31:59.320
Those four paths will all
lie on the ground level.

00:31:59.320 --> 00:32:03.750
What I'm trying to do is slice
higher and higher in the base

00:32:03.750 --> 00:32:06.010
to see what happens
when I slice.

00:32:06.010 --> 00:32:11.640
And if you think about it, as
you move up here, in the plane

00:32:11.640 --> 00:32:15.570
this corresponds to moving
parallel to these edges.

00:32:15.570 --> 00:32:21.710
So I'm shrinking this
polygon by parallel offsets.

00:32:21.710 --> 00:32:24.005
So let me draw one
parallel offset.

00:32:28.330 --> 00:32:29.615
Approximately parallel.

00:32:33.580 --> 00:32:37.090
OK, after I shrink a little
bit, might look like that.

00:32:37.090 --> 00:32:40.840
An interesting moment
in this case is here.

00:32:40.840 --> 00:32:43.445
Let me draw this carefully.

00:32:43.445 --> 00:32:47.000
It should go-- this
should go here.

00:32:50.430 --> 00:32:52.835
Ooh.

00:32:52.835 --> 00:32:54.615
Oops.

00:32:54.615 --> 00:32:55.720
I'm going to start over.

00:33:00.520 --> 00:33:02.417
This is actually
already drawn for us.

00:33:02.417 --> 00:33:03.000
It's this guy.

00:33:08.115 --> 00:33:10.280
OK, this is a parallel offset.

00:33:10.280 --> 00:33:12.390
And in this case,
something interesting

00:33:12.390 --> 00:33:16.450
happens, which is this path.

00:33:16.450 --> 00:33:18.940
So it turns out this
middle edge, in this case,

00:33:18.940 --> 00:33:21.404
becomes active.

00:33:21.404 --> 00:33:22.820
So what that means
is, originally,

00:33:22.820 --> 00:33:27.070
if you looked at these two
points, these two leaves,

00:33:27.070 --> 00:33:29.680
they had the wrong length.

00:33:29.680 --> 00:33:30.180
OK?

00:33:30.180 --> 00:33:32.020
So that's going to correspond
to something like these two

00:33:32.020 --> 00:33:32.519
leaves.

00:33:32.519 --> 00:33:34.460
They're opposite
corners of the quad.

00:33:34.460 --> 00:33:38.920
And you measure the length along
the tree, you get something.

00:33:38.920 --> 00:33:41.860
And the claim was, in the
plane, it was too big.

00:33:41.860 --> 00:33:43.670
Now, as you do this
parallel offset,

00:33:43.670 --> 00:33:46.520
as you shrink the
polygon, at some point

00:33:46.520 --> 00:33:48.830
it will be just
the right length.

00:33:48.830 --> 00:33:49.580
This could happen.

00:33:49.580 --> 00:33:51.230
Doesn't have to happen.

00:33:51.230 --> 00:33:52.890
If it happens, you have to stop.

00:33:52.890 --> 00:33:55.160
Because if you kept going,
it would become too short.

00:33:55.160 --> 00:33:57.040
And we know every
length here must

00:33:57.040 --> 00:34:01.660
be greater than or equal
to length over here.

00:34:01.660 --> 00:34:04.175
So when it becomes
equal, we have to stop,

00:34:04.175 --> 00:34:06.120
and we have to
make this a crease.

00:34:06.120 --> 00:34:08.270
Making it a crease
basically says,

00:34:08.270 --> 00:34:10.219
ah, this is exactly
the right length.

00:34:10.219 --> 00:34:11.960
I have to split here.

00:34:11.960 --> 00:34:15.969
And where'd my chalk go?

00:34:15.969 --> 00:34:21.100
And I have to sort of grow
now two different flaps

00:34:21.100 --> 00:34:22.179
from that point.

00:34:22.179 --> 00:34:24.590
The crease sort of
makes it horizontal.

00:34:24.590 --> 00:34:27.050
And then we end up shrinking
in two different parts.

00:34:27.050 --> 00:34:30.040
We shrink in this triangle,
which gives us a rabbit ear.

00:34:30.040 --> 00:34:31.954
And we shrink up there
in that triangle.

00:34:31.954 --> 00:34:33.120
Gives us another rabbit ear.

00:34:33.120 --> 00:34:35.389
So it will end up giving
these angular bisectors.

00:34:35.389 --> 00:34:37.330
In general, as you
do the shrinking,

00:34:37.330 --> 00:34:39.090
you watch where the vertices go.

00:34:39.090 --> 00:34:40.610
Those are your ridge creases.

00:34:40.610 --> 00:34:42.840
So this one went along
an angular bisector.

00:34:42.840 --> 00:34:44.210
That one did as well.

00:34:44.210 --> 00:34:46.360
But once we do this
split operation,

00:34:46.360 --> 00:34:49.350
because of this newly
active path, which we also

00:34:49.350 --> 00:34:52.280
called a gusset in the
universal molecule,

00:34:52.280 --> 00:34:55.379
then these vertices actually
split and go in two directions.

00:34:55.379 --> 00:34:57.170
One for this thing
angular bisector and one

00:34:57.170 --> 00:34:59.990
for that angular bisector.

00:34:59.990 --> 00:35:03.307
So in general, for a
universal molecule,

00:35:03.307 --> 00:35:04.890
there, are two things
that can happen.

00:35:17.532 --> 00:35:19.630
You can be shrinking
your polygon

00:35:19.630 --> 00:35:22.370
and suddenly discover
there's a newly active path.

00:35:22.370 --> 00:35:24.600
And then you have to
divide it into two polygons

00:35:24.600 --> 00:35:29.060
and start shrinking
those separately.

00:35:29.060 --> 00:35:32.950
Or vertices can disappear.

00:35:32.950 --> 00:35:35.020
So it could be you're
just shrinking, shrinking,

00:35:35.020 --> 00:35:36.970
shrinking merrily along the way.

00:35:36.970 --> 00:35:38.620
And then suddenly,
these two vertices

00:35:38.620 --> 00:35:41.110
collide with each other.

00:35:41.110 --> 00:35:43.100
So you get to
ridge creases here.

00:35:43.100 --> 00:35:45.810
In this case, you just treat
those two vertices now as one.

00:35:45.810 --> 00:35:48.800
So you'll start
shrinking like this.

00:35:48.800 --> 00:35:52.382
And so these vertices will
now start going that way.

00:35:52.382 --> 00:35:53.840
So in general, as
you're shrinking,

00:35:53.840 --> 00:35:56.131
these are the only two types
of events that can happen.

00:35:56.131 --> 00:35:58.990
Either two vertices merge, or
you get a new diagonal here

00:35:58.990 --> 00:35:59.990
that becomes active.

00:36:03.520 --> 00:36:05.550
When that happens,
you just divide.

00:36:05.550 --> 00:36:07.810
Now, this will work
for any convex polygon

00:36:07.810 --> 00:36:10.800
and you get your molecule.

00:36:10.800 --> 00:36:13.370
It's hard to just
draw a picture of this

00:36:13.370 --> 00:36:15.102
without using a
computer tool or really

00:36:15.102 --> 00:36:16.560
keeping track of
what you're doing.

00:36:16.560 --> 00:36:19.201
Because how do you tell when
something becomes active?

00:36:19.201 --> 00:36:20.450
You have to look at your tree.

00:36:20.450 --> 00:36:21.400
You have to measure lengths.

00:36:21.400 --> 00:36:23.270
It's tricky to do
without a computer tool.

00:36:23.270 --> 00:36:25.110
And that's why
TreeMaker was made.

00:36:25.110 --> 00:36:27.174
But it can be done.

00:36:27.174 --> 00:36:28.840
Probably even easier
with physical paper

00:36:28.840 --> 00:36:33.230
if you know exactly what
lengths you're trying to match.

00:36:33.230 --> 00:36:36.810
So that was a quick overview
of how universal molecule works

00:36:36.810 --> 00:36:37.840
in more detail.

00:36:42.170 --> 00:36:46.420
Next, I want to talk about a
few different open problems.

00:36:46.420 --> 00:36:51.860
So one of them was-- these are
called gift wrapping problems.

00:36:51.860 --> 00:36:55.500
So we have things like given
a square, a unit square,

00:36:55.500 --> 00:36:58.210
let's say, what's the largest
regular tetrahedron you

00:36:58.210 --> 00:36:59.080
can wrap?

00:36:59.080 --> 00:36:59.950
That's still open.

00:36:59.950 --> 00:37:02.283
All these problems are still
open except for the squared

00:37:02.283 --> 00:37:04.840
to a cube which talked
about in lecture.

00:37:04.840 --> 00:37:08.050
And I realize equilateral
triangle to tetrahedron.

00:37:08.050 --> 00:37:10.161
That's also really easy.

00:37:10.161 --> 00:37:11.910
If you can do it without
any paper wasted,

00:37:11.910 --> 00:37:12.872
just clearly optimal.

00:37:12.872 --> 00:37:14.580
But it would be very
cool to study these.

00:37:14.580 --> 00:37:17.390
I think these would make a
good project or open problem

00:37:17.390 --> 00:37:20.350
for the open problem session.

00:37:20.350 --> 00:37:24.600
Folding a given rectangle with
given aspect ratio into a cube.

00:37:24.600 --> 00:37:25.704
Also open.

00:37:25.704 --> 00:37:27.370
Pretty much any version
you can think of

00:37:27.370 --> 00:37:32.270
is open except the ones
that we've already seen.

00:37:32.270 --> 00:37:36.130
Also wanted to mention for
checkerboards, a fun problem,

00:37:36.130 --> 00:37:38.000
kind of in this
spirit, is, what would

00:37:38.000 --> 00:37:41.250
be the best way to fold a
two by two checkerboard?

00:37:41.250 --> 00:37:43.140
Even for a two by
two, we have no idea

00:37:43.140 --> 00:37:44.860
how to argue any
kind of lower bound

00:37:44.860 --> 00:37:47.620
about how bad you must do.

00:37:47.620 --> 00:37:50.480
That you can't just take a
square and fold a two by two

00:37:50.480 --> 00:37:52.410
checkerboard of the same size.

00:37:52.410 --> 00:37:54.181
Surely you can't do that.

00:37:54.181 --> 00:37:55.680
But we don't know
how to prove that.

00:37:55.680 --> 00:37:57.270
So it would be a nice target.

00:37:57.270 --> 00:37:58.700
We obviously have upper bounds.

00:37:58.700 --> 00:38:01.074
We have constructions that
make two by two checkerboards.

00:38:01.074 --> 00:38:03.110
I think from a 3 by 3
grid, you can make a two

00:38:03.110 --> 00:38:04.480
by two checkerboard.

00:38:04.480 --> 00:38:06.580
But is that optimal?

00:38:06.580 --> 00:38:07.410
We have no idea.

00:38:10.720 --> 00:38:13.236
So a couple questions about
the checkerboard folding.

00:38:13.236 --> 00:38:14.610
So we had this
picture of how you

00:38:14.610 --> 00:38:16.487
would take a square
root of paper-- you

00:38:16.487 --> 00:38:17.570
start with a square paper.

00:38:17.570 --> 00:38:21.040
You fold into this shape
with these long slits.

00:38:21.040 --> 00:38:22.490
And then these guys fold over.

00:38:22.490 --> 00:38:24.440
And then there are also
tab sticking up here,

00:38:24.440 --> 00:38:25.440
which are not drawn.

00:38:25.440 --> 00:38:27.835
And they fall over and give
you the color reversal.

00:38:27.835 --> 00:38:29.960
Question was, how do you
actually build this thing?

00:38:29.960 --> 00:38:31.126
This does not look uniaxial.

00:38:31.126 --> 00:38:34.140
And indeed, we do not use
uniaxial techniques for this.

00:38:34.140 --> 00:38:36.220
We use a separate
set of gadgets which

00:38:36.220 --> 00:38:37.665
are kind of based on pleating.

00:38:37.665 --> 00:38:39.790
And this will actually be
very similar to something

00:38:39.790 --> 00:38:41.248
we see in a couple
of lectures when

00:38:41.248 --> 00:38:45.410
we do box pleating to
make cubes and stuff.

00:38:45.410 --> 00:38:47.950
But you just compose
these gadgets.

00:38:47.950 --> 00:38:50.670
So this is kind of a
general tab gadget.

00:38:50.670 --> 00:38:52.340
You collapse this
crease pattern,

00:38:52.340 --> 00:38:53.710
and do a couple more folds.

00:38:53.710 --> 00:38:55.700
And you end up with this
tab sticking out here,

00:38:55.700 --> 00:38:59.070
and you can flip it up or down.

00:38:59.070 --> 00:39:02.365
And you see that it has these
pleats running off to the side.

00:39:02.365 --> 00:39:04.690
This mountain valley,
mountain valley, and then

00:39:04.690 --> 00:39:06.850
valley mountain,
valley mountain.

00:39:06.850 --> 00:39:10.580
And so those have to go all
the way through the paper.

00:39:10.580 --> 00:39:14.070
And they come into this
construction, which basically

00:39:14.070 --> 00:39:16.530
lets you make a big
slit in the paper.

00:39:16.530 --> 00:39:18.770
Or you can also turn a corner.

00:39:18.770 --> 00:39:20.857
And so you just prove that
these gadgets compose.

00:39:20.857 --> 00:39:22.440
I mean, it's pretty
that they compose.

00:39:22.440 --> 00:39:25.150
You just have to analyze how
much of the paper you're using.

00:39:25.150 --> 00:39:27.212
And it turns out
to be really good.

00:39:27.212 --> 00:39:28.200
That a short version.

00:39:28.200 --> 00:39:33.070
If you want to try it
out, fold some gadgets.

00:39:33.070 --> 00:39:37.760
Fun project idea
from you guys is,

00:39:37.760 --> 00:39:40.120
given an image, sample
at low resolution,

00:39:40.120 --> 00:39:41.350
make it black and white.

00:39:41.350 --> 00:39:43.450
And then come up with
the crease pattern

00:39:43.450 --> 00:39:46.080
that would fold, by this
checkerboard technique,

00:39:46.080 --> 00:39:50.210
into exactly that two
color pixel pattern.

00:39:50.210 --> 00:39:52.440
You could make all
sorts of useful things

00:39:52.440 --> 00:39:55.544
like Space Invaders
and stuff like that.

00:39:55.544 --> 00:39:57.210
You'd never want to
fold them, I think--

00:39:57.210 --> 00:39:59.430
although maybe with low enough
resolution you could fold them.

00:39:59.430 --> 00:40:01.513
But I think they'd be cool
just as crease patterns

00:40:01.513 --> 00:40:02.650
by themselves.

00:40:02.650 --> 00:40:05.260
You input a different
pattern-- I'd like web applet.

00:40:05.260 --> 00:40:06.790
You change the pixel pattern.

00:40:06.790 --> 00:40:08.800
And boom, it gives you
the crease pattern.

00:40:08.800 --> 00:40:09.840
I think this would
be a fun project

00:40:09.840 --> 00:40:11.298
if you're into
implementing things.

00:40:11.298 --> 00:40:13.260
It's essentially the
algorithm we already have,

00:40:13.260 --> 00:40:18.990
but it needs to be just written
out in detail and coded up.

00:40:18.990 --> 00:40:20.575
OK.

00:40:20.575 --> 00:40:22.700
Here's what it looks like
to fold an eight by eight

00:40:22.700 --> 00:40:23.949
checkerboard with this method.

00:40:23.949 --> 00:40:27.210
These are all by Robert Lang.

00:40:27.210 --> 00:40:30.155
So a lot of precreasing
along this huge grid.

00:40:30.155 --> 00:40:32.826
I thinks it's roughly 48 by 48.

00:40:32.826 --> 00:40:34.200
And then some tape
to hold things

00:40:34.200 --> 00:40:37.370
shut, mostly for photographing.

00:40:37.370 --> 00:40:40.770
And to collapse, now we're
down by a factor of two or so.

00:40:40.770 --> 00:40:45.170
Now you can see the
slits in one direction.

00:40:45.170 --> 00:40:47.960
I think the particular
method being used here only

00:40:47.960 --> 00:40:49.461
has slits in one direction.

00:40:49.461 --> 00:40:49.960
Oh, no.

00:40:49.960 --> 00:40:52.251
Here we've got slits in the
vertical direction as well.

00:40:52.251 --> 00:40:54.500
You could see the tabs
sticking out here.

00:40:54.500 --> 00:40:56.180
They're going to fall down.

00:40:56.180 --> 00:40:58.640
There's some more of the tabs.

00:40:58.640 --> 00:41:01.100
Start folding over,
and boom, you've

00:41:01.100 --> 00:41:04.170
got your eight by
eight checkerboard.

00:41:04.170 --> 00:41:05.390
Robert Lang says, wow.

00:41:05.390 --> 00:41:09.180
That was not one of the
easier things I've done.

00:41:09.180 --> 00:41:13.200
And this is folded from
a 48 by 42 checkerboard.

00:41:13.200 --> 00:41:16.560
In principle, this method can
go down to 36 plus epsilon

00:41:16.560 --> 00:41:20.360
by 36 plus epsilon, but it gets
messier crease pattern-wise.

00:41:20.360 --> 00:41:25.260
And 36 would be better than the
best known eight by eight board

00:41:25.260 --> 00:41:26.165
if you want seamless.

00:41:26.165 --> 00:41:27.840
Notice these are
seamless squares.

00:41:27.840 --> 00:41:30.634
No crease lines through them.

00:41:30.634 --> 00:41:32.300
This one's not
necessarily-- this is not

00:41:32.300 --> 00:41:35.190
better than known techniques,
but it follows our algorithm.

00:41:35.190 --> 00:41:39.500
And that's what the
crease pattern looks like.

00:41:39.500 --> 00:41:40.930
Cool.

00:41:40.930 --> 00:41:43.210
Next we go to Origamizer.

00:41:43.210 --> 00:41:45.740
So as I mentioned
in lecture, there's

00:41:45.740 --> 00:41:47.140
two versions of Origamizer.

00:41:47.140 --> 00:41:50.210
There's the version that's
implemented in the software,

00:41:50.210 --> 00:41:52.930
and there's a version that
we're proving is always correct.

00:41:52.930 --> 00:41:55.221
These are different because
the version in the software

00:41:55.221 --> 00:41:57.100
doesn't always work.

00:41:57.100 --> 00:41:59.480
And it remains that way
because the software

00:41:59.480 --> 00:42:00.650
version is more practical.

00:42:03.480 --> 00:42:05.479
And also, the
theoretical version

00:42:05.479 --> 00:42:06.520
is still a moving target.

00:42:06.520 --> 00:42:10.909
We change it every few weeks
to fix part of the proof.

00:42:10.909 --> 00:42:12.700
It's almost done, but
it's been almost done

00:42:12.700 --> 00:42:13.616
for a couple of years.

00:42:13.616 --> 00:42:14.890
So we're still working on it.

00:42:14.890 --> 00:42:16.806
Tomohiro was just visiting
a couple weeks ago,

00:42:16.806 --> 00:42:18.210
as I mentioned.

00:42:18.210 --> 00:42:19.570
And we're closing in.

00:42:19.570 --> 00:42:24.870
I actually have with me the
current draft of the paper.

00:42:24.870 --> 00:42:29.100
And it's not nearly as long as
this one with the tree method,

00:42:29.100 --> 00:42:31.160
but it's still growing
and working up,

00:42:31.160 --> 00:42:34.870
making sure all the
details check out.

00:42:34.870 --> 00:42:37.020
And the theoretical version
is kind of complicated,

00:42:37.020 --> 00:42:38.880
so I thought, in particular,
given this question,

00:42:38.880 --> 00:42:40.421
we'll talk about
the software version

00:42:40.421 --> 00:42:42.130
because it's actually
a lot simpler.

00:42:42.130 --> 00:42:43.906
Only catch is, it
doesn't always work.

00:42:43.906 --> 00:42:45.530
And it's described
in this paper if you

00:42:45.530 --> 00:42:51.250
want to read it, by Tomohiro,
about Origamizer 2010.

00:42:51.250 --> 00:42:53.640
And I have a few
figures from that paper.

00:42:53.640 --> 00:42:55.860
Well, this is still
from Tomohiro's Flickr.

00:42:55.860 --> 00:42:57.870
So we had this example
where you wanted

00:42:57.870 --> 00:42:59.764
to fold this
hyperbolic paraboloid.

00:42:59.764 --> 00:43:01.680
And here's what the
crease pattern looks like.

00:43:01.680 --> 00:43:02.960
It's actually pretty simple.

00:43:02.960 --> 00:43:05.220
You've got these
white polygons, which

00:43:05.220 --> 00:43:07.760
are polygons from the surface.

00:43:07.760 --> 00:43:09.630
That's what you need to fold.

00:43:09.630 --> 00:43:12.630
And the goal is to lay them
out on the piece of paper--

00:43:12.630 --> 00:43:15.120
this square is the
piece of paper--

00:43:15.120 --> 00:43:18.200
so that I can--
for example, I need

00:43:18.200 --> 00:43:20.330
to bring this polygon
to touch this polygon.

00:43:20.330 --> 00:43:22.171
This edge has to
touch this edge.

00:43:22.171 --> 00:43:23.670
Wouldn't it be great
if I could just

00:43:23.670 --> 00:43:25.790
fold the bisector
of those two edges,

00:43:25.790 --> 00:43:28.260
and this would come
right onto here?

00:43:28.260 --> 00:43:30.010
Sometimes that happens,
but for example,

00:43:30.010 --> 00:43:32.750
if this polygon is way down
here, that won't happen.

00:43:32.750 --> 00:43:35.549
It will fold over
and they won't align.

00:43:35.549 --> 00:43:36.340
There's two issues.

00:43:36.340 --> 00:43:38.150
First you have to get
the angles to match.

00:43:38.150 --> 00:43:40.960
And also there's this
vertical shifting.

00:43:40.960 --> 00:43:46.700
If you place the polygons
in the plane in a good way,

00:43:46.700 --> 00:43:47.950
this will work.

00:43:47.950 --> 00:43:49.990
You always get alignment.

00:43:49.990 --> 00:43:54.720
And what Origamizer implements
is nonconvex optimization,

00:43:54.720 --> 00:43:59.590
a constraint projection, to
make all of the edges work.

00:43:59.590 --> 00:44:00.840
And sometimes that's possible.

00:44:00.840 --> 00:44:02.980
It's actually
possible fairly often.

00:44:02.980 --> 00:44:05.130
And that's when the
Origamizer software works.

00:44:05.130 --> 00:44:08.750
If it's not possible,
you're screwed.

00:44:08.750 --> 00:44:10.920
This particular
method won't work.

00:44:10.920 --> 00:44:13.250
But when it's possible,
things are great.

00:44:13.250 --> 00:44:15.627
So essentially, you have to
bring the edges together.

00:44:15.627 --> 00:44:17.710
Then you also have to bring
the vertices together.

00:44:17.710 --> 00:44:21.130
Like these four vertices
come together to a point.

00:44:21.130 --> 00:44:24.540
And so you get two
kinds of gadgets,

00:44:24.540 --> 00:44:27.100
which are the vertex tucking
molecule to bring vertices

00:44:27.100 --> 00:44:29.640
together, and edge
tucking molecule

00:44:29.640 --> 00:44:30.820
to bring two edges together.

00:44:30.820 --> 00:44:32.920
Edge tucking molecule
is a single crease.

00:44:32.920 --> 00:44:36.200
Trivial in this construction.

00:44:36.200 --> 00:44:38.500
Vertex tucking molecule
is complicated.

00:44:38.500 --> 00:44:42.980
And in general, what
happens is for these points,

00:44:42.980 --> 00:44:46.080
we construct what's called
a Voronoi diagram, which

00:44:46.080 --> 00:44:48.590
is essentially, for
each of these points,

00:44:48.590 --> 00:44:52.110
if you grow a disk at equal
speeds around all of them,

00:44:52.110 --> 00:44:55.090
and when the disks
meet, you stop them.

00:44:55.090 --> 00:44:57.010
So then these two
disks will meet along

00:44:57.010 --> 00:44:58.890
this perpendicular bisector.

00:44:58.890 --> 00:45:02.650
And they'll keep growing until
they kind of all die out.

00:45:02.650 --> 00:45:05.270
And you'll get this tree
structure, in general.

00:45:05.270 --> 00:45:07.030
Those are your main creases.

00:45:07.030 --> 00:45:12.100
You follow that structure
and you do some stuff.

00:45:12.100 --> 00:45:14.940
Essentially, what happens when
you fold along this Voronoi

00:45:14.940 --> 00:45:19.140
diagram, you also have to add in
these creases from the Voronoi

00:45:19.140 --> 00:45:20.980
diagram to the points.

00:45:20.980 --> 00:45:25.530
When you do that, you'll get a
kind of mushrooming structure

00:45:25.530 --> 00:45:27.770
that has too much material.

00:45:27.770 --> 00:45:32.120
If you set it up right, all the
angles of paper that you have

00:45:32.120 --> 00:45:35.360
are larger than what you need
in the folded state, which

00:45:35.360 --> 00:45:37.440
would look like this.

00:45:37.440 --> 00:45:41.010
And so what you do are lots
of little pleats to reduce

00:45:41.010 --> 00:45:41.740
the angle. .

00:45:41.740 --> 00:45:43.324
If you've got a
big angle of paper,

00:45:43.324 --> 00:45:44.740
you can do a
mountain and a valley

00:45:44.740 --> 00:45:46.370
and make it a smaller angle.

00:45:46.370 --> 00:45:48.210
And that's what all
these creases are doing.

00:45:48.210 --> 00:45:51.570
You've got these pleats
to reduce the angle here,

00:45:51.570 --> 00:45:55.380
reduce the amount of material
here and here in order

00:45:55.380 --> 00:45:57.312
to match the 3D structure.

00:45:57.312 --> 00:45:58.770
So overall, what
the algorithm does

00:45:58.770 --> 00:46:00.990
is first, given the
surface, it constructs

00:46:00.990 --> 00:46:05.070
a suitable 3D structure of
where to put all the extra tabs.

00:46:05.070 --> 00:46:08.419
Then it designs things so
that the angles are bigger

00:46:08.419 --> 00:46:09.960
here than what they
need to be there.

00:46:09.960 --> 00:46:12.250
This is, again, a
constraint projection.

00:46:12.250 --> 00:46:17.430
Also constrains these
edges to meet up perfectly.

00:46:17.430 --> 00:46:20.440
And then it just applies
all these crimps--

00:46:20.440 --> 00:46:23.550
it's easier in a computer
than to see it here--

00:46:23.550 --> 00:46:26.140
to make all the angles
correct to match the 3D model.

00:46:26.140 --> 00:46:27.169
Yeah, question?

00:46:27.169 --> 00:46:28.765
AUDIENCE: So on
the sheet metal one

00:46:28.765 --> 00:46:30.361
that you showed,
do you just cut out

00:46:30.361 --> 00:46:31.750
the vertex shrinking
[INAUDIBLE]?

00:46:31.750 --> 00:46:32.458
PROFESSOR: Right.

00:46:32.458 --> 00:46:36.520
So for the sheet metal bunny,
we just cut out these polygons.

00:46:36.520 --> 00:46:40.060
Because otherwise, it's a mess
and you get lots of layers.

00:46:40.060 --> 00:46:42.570
And the point was to make
it of one sheet of material,

00:46:42.570 --> 00:46:44.460
but not necessarily a square.

00:46:44.460 --> 00:46:46.250
So if you have really
thick material,

00:46:46.250 --> 00:46:48.124
recommend cutting those out.

00:46:48.124 --> 00:46:50.290
And we were laser cutting
to score the lines anyway,

00:46:50.290 --> 00:46:52.330
so why not cut out
some holes as well.

00:46:52.330 --> 00:46:53.310
Yeah.

00:46:53.310 --> 00:46:55.640
So that way, you just have
edge tucking molecules,

00:46:55.640 --> 00:46:56.556
which are really easy.

00:46:56.556 --> 00:46:58.352
Mountain, valley, mountain.

00:46:58.352 --> 00:46:59.935
And so it actually
is pretty practical

00:46:59.935 --> 00:47:04.310
to fold these things out of
generalized sheets with holes.

00:47:04.310 --> 00:47:08.700
So the non-software
version of Origamizer

00:47:08.700 --> 00:47:13.670
works the same way, except
it does the full generality

00:47:13.670 --> 00:47:16.480
of constructing this tuck
proxy, where the tabs should go.

00:47:16.480 --> 00:47:18.370
And that can get very
messy in general.

00:47:18.370 --> 00:47:19.737
It's just tedious to explain.

00:47:19.737 --> 00:47:21.570
There are all these
crazy spherical diagrams

00:47:21.570 --> 00:47:24.010
that you saw in lecture.

00:47:24.010 --> 00:47:26.770
But it's not that exciting.

00:47:26.770 --> 00:47:29.390
The more interesting part is
that the edge tucking molecules

00:47:29.390 --> 00:47:31.920
can't just be a
single crease anymore.

00:47:31.920 --> 00:47:34.890
They have to, in general,
kind of follow some path

00:47:34.890 --> 00:47:37.050
to get to where they need to go.

00:47:37.050 --> 00:47:37.790
But it's similar.

00:47:37.790 --> 00:47:41.030
You just do a bunch
of different folds.

00:47:41.030 --> 00:47:43.180
You can sweep them
one way or the other

00:47:43.180 --> 00:47:46.430
in order to navigate this edge
to be where it needs to be.

00:47:46.430 --> 00:47:49.280
So again you place the
faces in the plane.

00:47:49.280 --> 00:47:51.890
In the mathematical
version, you can place them

00:47:51.890 --> 00:47:53.331
anywhere you want.

00:47:53.331 --> 00:47:54.080
It doesn't matter.

00:47:54.080 --> 00:47:56.140
And then you have to
shrink them until they're

00:47:56.140 --> 00:47:58.030
small enough that things work.

00:47:58.030 --> 00:48:01.880
Then you route these paths
to get from each edge

00:48:01.880 --> 00:48:03.150
to each corresponding edge.

00:48:06.201 --> 00:48:08.450
The edge tucking molecules
are fairly straightforward.

00:48:08.450 --> 00:48:11.390
The vertex tucking molecules
become even messier.

00:48:11.390 --> 00:48:14.830
We still use a Voronoi
diagram in the end.

00:48:14.830 --> 00:48:16.530
It's just there's
a lot more points.

00:48:16.530 --> 00:48:19.420
Here we're just using the
corners of the triangles

00:48:19.420 --> 00:48:21.560
as the source points
for growing stuff.

00:48:21.560 --> 00:48:23.060
In the general case,
you have to add

00:48:23.060 --> 00:48:24.880
lots of points in
the middle too.

00:48:24.880 --> 00:48:26.334
But it turns out not to matter.

00:48:26.334 --> 00:48:27.750
You could throw
in tons of points.

00:48:27.750 --> 00:48:29.470
You could always fold
a Voronoi diagram.

00:48:29.470 --> 00:48:31.510
You get this mushroomy thing.

00:48:31.510 --> 00:48:34.460
And then you can just fold
away the parts you don't need.

00:48:34.460 --> 00:48:36.750
You have to make
them really small

00:48:36.750 --> 00:48:38.977
in order to make these
tabs not too big,

00:48:38.977 --> 00:48:41.560
because if the tabs are too big,
they collide with each other.

00:48:41.560 --> 00:48:43.290
That already happened
in the software version.

00:48:43.290 --> 00:48:44.706
Even in the software
version, this

00:48:44.706 --> 00:48:47.400
might not work because
this tab may be huge.

00:48:47.400 --> 00:48:50.410
But you can-- in this case,
you just add a few more

00:48:50.410 --> 00:48:55.340
and make this pleat up and down,
and you'll avoid collision.

00:48:55.340 --> 00:48:58.440
So that was a quick, but
a little bit more clear,

00:48:58.440 --> 00:49:01.971
overview of Origamizer
and how it works.

00:49:01.971 --> 00:49:03.100
Any more questions?

00:49:08.080 --> 00:49:09.280
Cool.

00:49:09.280 --> 00:49:11.360
That's it for today.

