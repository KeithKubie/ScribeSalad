WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.160
So we saw how the Mac used 30 pin SIMS like this to store its memory

00:00:05.160 --> 00:00:09.340
And we'll look later at what sort of information the computer stores in these things

00:00:09.340 --> 00:00:13.080
But for now, I just want to look at how this actually stores information.

00:00:13.080 --> 00:00:19.320
Now as I'm sure all of you are aware, it stores it in terms of binary digits or bits

00:00:19.320 --> 00:00:22.940
But actually what we are really interested in [is] just storing a single bit

00:00:22.940 --> 00:00:25.600
and we can put them together to form lots of memory.

00:00:27.740 --> 00:00:34.340
So to understand how the memory works, we need to look at some of the basic digital logic circuits we can build using logic gates.

00:00:34.340 --> 00:00:40.020
Now over on Numberphile, Matt Parker introduced these using dominoes to create various things

00:00:40.020 --> 00:00:43.560
We're going to look at them in terms of the electronic chips

00:00:43.560 --> 00:00:48.200
So you can buy your basic logic circuits in integrated circuits like this.

00:00:48.200 --> 00:00:51.320
This one's four OR gates.

00:00:51.320 --> 00:00:54.280
So [incomprehensible], you put them together in an electronic circuit to build memory

00:00:54.280 --> 00:00:59.940
Now this is a bit odd because normally these are just used to process or combine various inputs

00:00:59.940 --> 00:01:04.960
but if we connect them in a specific way, we can actually get them to store information

00:01:05.160 --> 00:01:07.160
at least until the power is turned off.

00:01:07.780 --> 00:01:12.340
So what we've got here are two very basic electronic circuits.

00:01:12.340 --> 00:01:17.920
We've got an AND gate here, and an OR gate in this chip, here.

00:01:17.920 --> 00:01:22.780
These chips come with four AND gates or four OR gates together

00:01:22.780 --> 00:01:29.260
And if we remember from the Numberphile video,  an AND gate is on when both of its inputs are on.

00:01:29.800 --> 00:01:31.800
If either input if off, then the output is off.

00:01:31.860 --> 00:01:37.280
So in this case, I wired it up to a simple L.E.D., so that we can see the output of one of the AND gates.

00:01:37.740 --> 00:01:46.240
And I've wired both of the inputs to the positive voltage rail because we use positive five volts to represent TRUE or one in binary

00:01:46.520 --> 00:01:53.040
and we use ground, or zero volts, to represent false or zero in binary.

00:01:53.040 --> 00:01:56.040
Now. That's generally what we use with what was called TTL logic.

00:01:56.040 --> 00:01:59.860
These days you use different voltage levels and so on, but the principle is the same;

00:01:59.860 --> 00:02:07.900
you have one voltage which represents FALSE, or zero, and another voltage which is generally higher that represents one, or TRUE.

00:02:08.340 --> 00:02:12.400
So if I take... Hang on. If I just move these over so you can see what I'm doing.

00:02:12.780 --> 00:02:17.060
So both of these are currently connected to logic 1, or five volts.

00:02:17.280 --> 00:02:27.940
If I disconnect one and connect it to logic zero, you can see that immediately that light goes off, because the AND gate has now got one input zero, one input at one,

00:02:28.260 --> 00:02:32.600
one and zero is zero by the laws of boolean algebra.

00:02:32.600 --> 00:02:34.580
So we can combine these in different ways,

00:02:34.800 --> 00:02:38.360
And [incomprehensible] back in one, both one, it's on.

00:02:38.800 --> 00:02:43.380
Put them both to zero, then they're both off.

00:02:43.700 --> 00:02:47.060
Over here, I've got an OR gate.

00:02:47.100 --> 00:02:54.220
And if you remember back from the Numberphile video, an OR gate is on when either of its inputs are on, or both of them are on.

00:02:54.220 --> 00:02:56.760
So I'm gonna to rewire the circuit to do that.

00:02:56.900 --> 00:03:00.840
So often you'll get books like this which will give you details of different things.

00:03:01.380 --> 00:03:06.640
The quad input positive OR gates has inputs on pins one and two and the output on pin three.

00:03:07.020 --> 00:03:14.580
The AND gate, the 7402, has the inputs on pins two and three, and the [output] on pin one.

00:03:14.580 --> 00:03:19.760
So, connect the output to pin three.

00:03:19.760 --> 00:03:21.700
And we can now start to connect the inputs.

00:03:22.400 --> 00:03:24.900
Now in both cases... Woops! I just shorted the uh...

00:03:24.900 --> 00:03:26.840
Oo. Ha Ha.

00:03:27.020 --> 00:03:29.020
*laughing" I just shorted the uh...

00:03:29.020 --> 00:03:29.740
[BRADY]: A little bit hot?

00:03:29.860 --> 00:03:33.100
[GUY]: Yeah. Just shorted the power supply which is why it's making noise.

00:03:33.280 --> 00:03:38.780
So we connect both of these to... The cable's all melted! ...pin zero.

00:03:39.120 --> 00:03:44.580
And if we now unplug that and plug it into there,

00:03:44.580 --> 00:03:46.280
Have I just broken everything?

00:03:46.480 --> 00:03:48.480
[BRADY]: You fried the chip!

00:03:50.680 --> 00:03:52.680
[GUY]: I hope this gets edited out

00:03:54.240 --> 00:03:58.040
Yeah. So that's right. Um. I've either fried everything on here...

00:03:59.580 --> 00:04:01.580
[BRADY]: Are you now turning it off and on again?

00:04:01.640 --> 00:04:07.160
[GUY]: I am indeed turning it off and on again, here, in the hope that I haven't just shorted everything out.

00:04:07.360 --> 00:04:09.360
Uum.

00:04:09.360 --> 00:04:10.340
[BRADY]: Shall we pause there?

00:04:10.580 --> 00:04:12.580
[GUY]: Yeah. I think we might need to pause it. Ha ha ha ha.

00:04:12.960 --> 00:04:16.400
Smoke's cleared, and we've just had a slight problem with power supply

00:04:16.400 --> 00:04:21.160
but we're back and running now. There's a little hamster running around in a wheel to power everything at the moment.

00:04:21.460 --> 00:04:30.900
So we've rewired this so that the output of the OR gate is now connected to the L.E.D. and these are both tied to logic zero through these resistors here.

00:04:30.940 --> 00:04:33.820
If I now connect any of these to logic one,

00:04:35.260 --> 00:04:38.000
the input comes on. So that's input two connected to logic one.

00:04:38.640 --> 00:04:40.640
Input one, the input comes on.

00:04:40.920 --> 00:04:49.260
And of course because it's an OR gate, if I connect the second input at the same time, then they're both on.

00:04:49.260 --> 00:04:52.400
We also get other versions of these chips.

00:04:52.400 --> 00:04:56.480
and these are called NAND gates or NOR gates.

00:04:56.480 --> 00:05:01.060
And they work in exactly the same way. They two inputs and they AND them together

00:05:01.060 --> 00:05:07.200
but immediately following that, build into the chip, is what's called a NOT gate, which inverts the output.

00:05:07.200 --> 00:05:12.140
So it's the opposite of an AND gate. Its output is off when both of its inputs are on.

00:05:12.140 --> 00:05:15.180
So I'm-gonna-open this up.

00:05:17.400 --> 00:05:18.380
There we are.

00:05:18.540 --> 00:05:22.100
So-I'm-gonna take the AND chip out. There we are!

00:05:22.940 --> 00:05:25.960
And pop this chip in.

00:05:25.960 --> 00:05:29.440
It can be a pain because you have to bend all of the legs to fit in.

00:05:33.220 --> 00:05:34.080
There we go.

00:05:34.080 --> 00:05:35.600
So that's now in place

00:05:35.840 --> 00:05:39.120
So-I-gotta rewire it now to use a NAND gate that I've popped in there.

00:05:39.120 --> 00:05:43.280
So I connect the output to pin three of this circuit.

00:05:43.280 --> 00:05:51.180
and the L.E.D. of course comes on, because both inputs one and two are wired to zero.

00:05:51.380 --> 00:05:55.300
Normally an AND gate would be off because both of its inputs are zero

00:05:55.400 --> 00:05:59.580
But this is the opposite of that so both of its inputs are zero, it's now on.

00:05:59.620 --> 00:06:02.840
So if we connect input two to five volts,

00:06:03.420 --> 00:06:11.040
it stays on because zero and one is zero. There inverse of that is one.

00:06:11.160 --> 00:06:16.380
But if we connect input one as well to five volts, then the L.E.D. goes off.

00:06:16.380 --> 00:06:22.540
Because one and one is one, the opposite of that is zero, so the L.E.D. is now off.

00:06:22.540 --> 00:06:26.300
But as soon as we disconnect one of the pins, it comes back on.

00:06:26.440 --> 00:06:36.220
And one of the fascinating things about NAND gates is that you could build a whole computer just using the circuits on this chip.

00:06:36.380 --> 00:06:38.380
You'd need lots of them. You'd need more than four.

00:06:38.380 --> 00:06:42.560
But what we are going to do today is use, not a NAND gate to start with, but a NOR gate,

00:06:42.560 --> 00:06:44.440
which is an OR, then NOTed.

00:06:44.960 --> 00:06:46.960
to actually build some memory.

00:06:47.320 --> 00:06:53.480
So over here, here is one I prepared earlier, we have quad input NOR gate.

00:06:53.480 --> 00:06:54.780
So-this-is four NOR gates

00:06:54.780 --> 00:07:01.980
So-what-I'm-gonna do is wire two NOR gates into a circuit so that it'll actually store the information that we put in it.

00:07:02.060 --> 00:07:05.220
I'm gonna use this one on the left here.

00:07:05.420 --> 00:07:09.660
And this one over here. Let me just check the wiring diagram

00:07:09.740 --> 00:07:13.000
We have pins one is the output of the NOR gate. Two and three are the inputs.

00:07:13.500 --> 00:07:17.740
And on the other side, pin thirteen is the output in pin eleven and twelve.

00:07:18.120 --> 00:07:22.980
So I'm gonna connect the output of this NOR gate on the right hand side

00:07:23.340 --> 00:07:29.400
to the input of the one on the left hand side

00:07:29.400 --> 00:07:30.500
[BRADY]: Shall we call them A and B or..?

00:07:30.500 --> 00:07:35.680
[GUY]: Yeah. So we connected the output of NOR gate B to the input of NOR gate A

00:07:35.760 --> 00:07:42.480
And-now-I'm-gonna connect the output of NOR gate A back to the input of NOR gate B.

00:07:43.120 --> 00:07:45.420
It's a very tight fit so... There we go.

00:07:45.800 --> 00:07:51.020
So we've got these two things crossed over, but the output of one is connected to the input of the other.

00:07:51.100 --> 00:07:58.920
And just to make sure the circuit works, I'm just gonna put some resistors to tie the other input to zero volts to our logic zero.

00:07:58.920 --> 00:08:05.960
This means that I can make them logic one or logic zero just by touching the leg of the resistor with a wire connected to five volts

00:08:05.960 --> 00:08:07.800
later in the demonstration

00:08:07.800 --> 00:08:13.800
So the other thing I'm gonna do is I've connected the output of NOR gate A to this wire here.

00:08:13.800 --> 00:08:19.260
And I'm just gonna put a L.E.D. across that wire to ground like so.

00:08:19.260 --> 00:08:26.540
And I'm gonna to the same on the other side. So I'll connect that up like so. There.

00:08:27.500 --> 00:08:31.880
And well see that this L.E.D. has now come on.

00:08:32.140 --> 00:08:38.000
So I now get a fly wire, plug this into five volts like that.

00:08:38.340 --> 00:08:43.120
And if I touch this one, this L.E.D. comes on, and it stays on.

00:08:43.300 --> 00:08:49.080
If I touch that one, that L.E.D. goes off and this one comes on, and stays on.

00:08:49.080 --> 00:08:57.280
This circuit is remembering its state. And we can do that by just driving a signal into the chip.

00:08:57.280 --> 00:09:00.020
And it'll stay like that until I turn the power off.

00:09:00.020 --> 00:09:01.700
We need to look at how this circuit works.

00:09:01.760 --> 00:09:08.060
What-I'm-gonna do is draw it out. But before we do that, it would be useful to refresh out memory of how a NOR gate works.

00:09:08.060 --> 00:09:18.160
Ah. So that's a NOR gate and it has two inputs which we'll label as a and b and it has an output which we'll label as q.

00:09:18.160 --> 00:09:20.680
So we can build a truth table for this.

00:09:20.680 --> 00:09:25.540
So normally with an OR gate, zero OR zero would be zero.

00:09:25.540 --> 00:09:29.600
But we're inverting it because it's a NOR gate. So the output is one.

00:09:29.600 --> 00:09:33.960
Zero or one is one, but it's inverted so the output is zero.

00:09:34.260 --> 00:09:37.700
One or zero is one, but it's inverted so the output's zero.

00:09:38.120 --> 00:09:41.280
One or one is one, inverted, so the answer is zero.

00:09:41.280 --> 00:09:43.800
So that's the truth table for our NOR gate.

00:09:43.800 --> 00:09:46.740
Now let's have a look at the circuit that we used over there.

00:09:46.740 --> 00:09:52.500
So we had our first NOR gate and we also had our second NOR gate, like that.

00:09:52.500 --> 00:09:55.860
And we've got the inputs to these like so.

00:09:56.100 --> 00:10:00.560
And we took the output from here and connected it to the input of that one.

00:10:00.560 --> 00:10:04.160
And we took the output from here and connected it here.

00:10:04.160 --> 00:10:09.040
We've now got two inputs left that we're not using and I gotta label them as R

00:10:09.040 --> 00:10:11.040
because that is what we use to reset it.

00:10:11.040 --> 00:10:14.980
and we've got S which is what we used to set it, or to store a bit.

00:10:15.160 --> 00:10:22.280
We've also got two outputs. And I'm gonna label the first one q and the other one we're gonna call this NOT q.

00:10:22.280 --> 00:10:26.240
And the way we do that is is we draw a line over the top to say that this is NOT q.

00:10:26.360 --> 00:10:33.520
Now the thing we have to remember about these circuits is that they don't switch the output instantaneously when the inputs switches.

00:10:33.660 --> 00:10:39.300
There is a slight very short delay. And depending in what kind of chip you get... But there is always a slight delay.

00:10:39.620 --> 00:10:41.620
So-what-I'm-gonna do is I'm gonna draw out our truth table for this

00:10:41.860 --> 00:10:47.840
So we've got input R, and we've got input S, we've got output q, and output q NOT q.

00:10:47.840 --> 00:10:49.760
But these are also inputs to this.

00:10:49.760 --> 00:10:53.360
So I'm actually going to put in q prime and NOT q prime.

00:10:53.360 --> 00:10:56.160
To start with, this is at zero, this is at zero.

00:10:56.380 --> 00:10:58.960
We don't know what these values are, so we'll leave them blank.

00:10:58.960 --> 00:11:02.000
What's the next value of q going to be?

00:11:02.160 --> 00:11:11.420
So it's going to be zero, OR'd with the current value of NOT q, NOT'd, so that's gonna be represented as  q NOT q, NOT'd.

00:11:11.420 --> 00:11:15.740
NOT q, NOT'd is of course q because the two NOTs cancel out.

00:11:15.740 --> 00:11:19.860
So the value of q prime is whatever the old value of q was effectively.

00:11:19.880 --> 00:11:24.380
Same happens for NOT q prime. That's s, which is zero.

00:11:24.740 --> 00:11:28.980
OR'd with the old value of q, NOT'd so we get NOT q.

00:11:29.080 --> 00:11:34.520
So as long as the two inputs are zero, you get the same values propagating through the circuit.

00:11:34.580 --> 00:11:40.260
But what happens if we set s to be one. We'll leave r at zero.

00:11:40.380 --> 00:11:48.080
So our new value of q is gonna be the old value of NOT q OR'd with zero

00:11:49.220 --> 00:11:53.500
So it's gonna be NOT NOT q again. So it's gonna be q.

00:11:53.940 --> 00:12:01.960
Our new value of NOT q is gonna be s, which is one,  OR'd with whatever the value of q was, NOT'd.

00:12:02.300 --> 00:12:07.680
Now if you OR anything with one, if you think about the truth table, the answer is always one.

00:12:08.060 --> 00:12:14.000
So NOT q is going to be zero because it's NOT of one.

00:12:14.000 --> 00:12:15.540
So we're gonna get a zero in there.

00:12:15.540 --> 00:12:17.280
So we can feed those back in again

00:12:18.100 --> 00:12:20.100
We've still got zero and one as the input here

00:12:20.460 --> 00:12:25.680
We now know that the output of q bar, or NOT q, is zero.

00:12:25.680 --> 00:12:27.660
So what's the new value of q gonna be?

00:12:27.960 --> 00:12:34.240
Well, it's the output of NOT q, which is zero OR'd with zero

00:12:34.240 --> 00:12:35.760
NOT'd which is one

00:12:36.160 --> 00:12:38.160
The output of q prime is going to be one

00:12:38.480 --> 00:12:44.320
and the output of q bar prime... Well that's still one OR'd with whatever the output of q was before.

00:12:44.860 --> 00:12:48.780
So we'll call that q, that's always going to be one, NOT'd, so that's gonna be zero.

00:12:49.180 --> 00:12:53.760
And if we run those values through again... So we've got zero, one, one zero.

00:12:54.060 --> 00:12:57.660
Then we get the same values out: one, zero.

00:12:58.240 --> 00:13:03.200
But the interesting thing is, when this becomes zero, and that becomes zero again,

00:13:03.360 --> 00:13:06.620
q is still at one, NOT q is still at zero

00:13:07.120 --> 00:13:14.220
If we run the circuit through here, the new value of q is the old value of NOT q OR'd with zero

00:13:14.520 --> 00:13:16.740
that's zero, NOT'd, that's one.

00:13:16.980 --> 00:13:25.260
And NOT q prime is S, which is zero, with the old value of q, which was one, and that's one, NOT'd, that's zero.

00:13:25.460 --> 00:13:28.360
So it stays the same, and you get the same input coming through.

00:13:28.360 --> 00:13:30.300
So it actually continues.

00:13:30.500 --> 00:13:38.560
And we could do the same thing with the reset, and you'd find if you work it through, that it resets it and all of the values go to zero.

00:13:38.860 --> 00:13:45.300
So that very simple circuit will actually store the state if it is set and if it is reset.

00:13:45.660 --> 00:13:48.160
And you can actually build up a complete memory circuit

00:13:48.160 --> 00:13:54.560
because you can put some very simple digital logic in front of that to generate the right s or r signal

00:13:54.560 --> 00:13:58.760
based on the value of a bit and whether you want to store it or not.

00:14:00.840 --> 00:14:08.980
[LEFTVIDEO]: ...and everybody was gonna  click on that one. Well it turned out that the video behind that was a person talking about the fight

00:14:09.000 --> 00:14:12.500
[RIGHTVIDEO]: Only that will fall over, that wont move. Here we go! Ready?

