WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.934
[MUSIC PLAYING]

00:00:07.340 --> 00:00:08.500
DOM TURNER: My name is Dom.

00:00:08.500 --> 00:00:10.590
I work in the
Android DevRel team,

00:00:10.590 --> 00:00:13.540
and I'm here today to talk
to you about low latency

00:00:13.540 --> 00:00:15.910
audio on Android.

00:00:15.910 --> 00:00:19.270
So why is audio
latency important?

00:00:19.270 --> 00:00:23.170
Well, there are a
whole raft of use cases

00:00:23.170 --> 00:00:26.170
where the audio
latency is directly

00:00:26.170 --> 00:00:29.300
proportional to the
user experience.

00:00:29.300 --> 00:00:34.660
So this can be in games
where you tap on the screen

00:00:34.660 --> 00:00:37.810
and you hear a sound,
particularly in rhythm games

00:00:37.810 --> 00:00:40.000
like Guitar
Hero-style games where

00:00:40.000 --> 00:00:43.900
you're tapping in response
to some rhythmic event

00:00:43.900 --> 00:00:46.690
and you need to have
audible feedback as quickly

00:00:46.690 --> 00:00:49.750
as possible-- like, the longer
the delay between tapping

00:00:49.750 --> 00:00:51.640
on the screen and
hearing a sound,

00:00:51.640 --> 00:00:54.200
the worse the user experience.

00:00:54.200 --> 00:00:57.910
Also, in DJing apps, you
are tapping on the screen

00:00:57.910 --> 00:01:01.720
and manipulating audio, and you
expect that audio manipulation

00:01:01.720 --> 00:01:04.860
to happen in real time.

00:01:04.860 --> 00:01:09.360
Karaoke, where you've got an
input, which is your voice.

00:01:09.360 --> 00:01:13.260
And generally, you're listening
to a backing track and also

00:01:13.260 --> 00:01:14.350
your own voice.

00:01:14.350 --> 00:01:17.160
So if the delay between
you singing and hearing

00:01:17.160 --> 00:01:21.796
your own voice is too
long, then it sounds awful.

00:01:21.796 --> 00:01:25.580
Also, in VR, we
have objects which

00:01:25.580 --> 00:01:28.200
make sound in a virtual world.

00:01:28.200 --> 00:01:30.260
And if that sound
doesn't follow you around

00:01:30.260 --> 00:01:32.780
as your head moves
in this environment,

00:01:32.780 --> 00:01:36.560
then it kind of
distorts the reality.

00:01:36.560 --> 00:01:38.530
And lastly, of course,
there's a whole load

00:01:38.530 --> 00:01:41.530
of apps for live
performance-- synthesizers,

00:01:41.530 --> 00:01:44.590
drum machines, looping apps.

00:01:44.590 --> 00:01:49.060
Anything which you press
a key and make a sound,

00:01:49.060 --> 00:01:52.120
you need low latency audio.

00:01:52.120 --> 00:01:55.010
So with this in mind,
we built a library

00:01:55.010 --> 00:01:57.220
to help developers build
these kind of apps.

00:01:57.220 --> 00:02:01.830
It's called Oboe, and it's
available on GitHub now.

00:02:01.830 --> 00:02:05.410
We just launched Version 1,
so it's production-ready,

00:02:05.410 --> 00:02:09.190
able to be included
in your apps today.

00:02:09.190 --> 00:02:11.550
And the way it works
is, under the hood,

00:02:11.550 --> 00:02:17.020
it uses the AAudio API
on API 27 and above,

00:02:17.020 --> 00:02:20.070
which is the new
high-performance, low latency

00:02:20.070 --> 00:02:23.210
audio introduced in Oreo.

00:02:23.210 --> 00:02:26.160
And on older devices,
it uses OpenSL ES.

00:02:26.160 --> 00:02:29.100
So basically, the
idea is provide

00:02:29.100 --> 00:02:33.480
a simple, easy-to-use API
which works across the widest

00:02:33.480 --> 00:02:36.670
range of devices.

00:02:36.670 --> 00:02:40.272
So rather than me
talk about this API,

00:02:40.272 --> 00:02:42.730
I thought it'd be fun to try
and build a musical instrument

00:02:42.730 --> 00:02:47.570
in 17 minutes and 23 seconds.

00:02:47.570 --> 00:02:49.392
So before I start
that, I'm just going

00:02:49.392 --> 00:02:51.100
to explain the
architecture so it kind of

00:02:51.100 --> 00:02:53.050
makes sense when
I'm in the code.

00:02:53.050 --> 00:02:57.640
So we have an app, and I'm
going to build the audio engine

00:02:57.640 --> 00:02:59.290
part of this app.

00:02:59.290 --> 00:03:02.080
This audio engine is going to
be responsible for creating

00:03:02.080 --> 00:03:03.250
an audio stream.

00:03:03.250 --> 00:03:05.560
That's provided by
the Oboe library.

00:03:05.560 --> 00:03:08.050
And we're going to be
passing audio frames of data

00:03:08.050 --> 00:03:10.570
into this audio stream.

00:03:10.570 --> 00:03:13.990
Ultimately, this stream is
responsible for putting data

00:03:13.990 --> 00:03:16.100
out of the audio device.

00:03:16.100 --> 00:03:21.040
In this case, it will be
the 3 and 1/2 mil jack

00:03:21.040 --> 00:03:25.500
on this Pixel XL phone.

00:03:25.500 --> 00:03:29.280
Now, every time the audio
device needs more information,

00:03:29.280 --> 00:03:30.820
it's going to give
us a callback.

00:03:30.820 --> 00:03:35.290
So we get this callback loop
of, hey, I need more audio data,

00:03:35.290 --> 00:03:39.190
and our audio engine is going to
be passing frames of audio data

00:03:39.190 --> 00:03:41.920
into the audio stream.

00:03:41.920 --> 00:03:45.730
For some form of
control, we're going

00:03:45.730 --> 00:03:48.986
to monitor tap
events on the screen.

00:03:48.986 --> 00:03:50.860
So when you tap down,
the sound will come on.

00:03:50.860 --> 00:03:54.460
When you lift up,
sound will go off.

00:03:54.460 --> 00:03:56.670
This worked about 50% of
the time in rehearsal,

00:03:56.670 --> 00:04:00.522
so let's see what happens.

00:04:00.522 --> 00:04:01.770
OK.

00:04:01.770 --> 00:04:03.220
First problem, I need to log in.

00:04:07.100 --> 00:04:13.480
Can you see my screen?

00:04:13.480 --> 00:04:16.412
Fantastic.

00:04:16.412 --> 00:04:17.390
OK.

00:04:17.390 --> 00:04:20.440
So I'm just going
to run the app.

00:04:20.440 --> 00:04:23.917
So I've kind of got a very
simple shell of an app.

00:04:23.917 --> 00:04:25.750
It doesn't really do
anything at the moment,

00:04:25.750 --> 00:04:27.333
but it just has a
few little shortcuts

00:04:27.333 --> 00:04:29.200
that make it possible
for me to do this

00:04:29.200 --> 00:04:31.940
in a very short amount of time.

00:04:31.940 --> 00:04:35.710
So I will just run the
app on this Pixel XL.

00:04:35.710 --> 00:04:40.666
And hopefully, you'll be able
to see that it does nothing.

00:04:40.666 --> 00:04:42.510
So here we go.

00:04:42.510 --> 00:04:43.640
Here's the app.

00:04:43.640 --> 00:04:45.880
And when I tap on the
screen, nothing happens.

00:04:45.880 --> 00:04:47.520
No sound comes out.

00:04:47.520 --> 00:04:48.730
It's non-functional.

00:04:48.730 --> 00:04:50.230
I just want you to
know that there's

00:04:50.230 --> 00:04:51.400
no smoke and mirrors there.

00:04:51.400 --> 00:04:53.080
It is genuinely live.

00:04:53.080 --> 00:04:55.330
[LAUGHTER]

00:04:55.330 --> 00:04:57.340
Thank you, Glenn.

00:04:57.340 --> 00:04:57.910
OK.

00:04:57.910 --> 00:05:00.520
So we're in our
main activity here,

00:05:00.520 --> 00:05:04.390
and we're going to talk to
the Oboe library via JNI.

00:05:04.390 --> 00:05:06.100
So I have a couple
of native methods

00:05:06.100 --> 00:05:09.700
here which I'm going to use,
and I'll implement those methods

00:05:09.700 --> 00:05:11.650
in a second.

00:05:11.650 --> 00:05:14.620
So we're going to
create an audio engine,

00:05:14.620 --> 00:05:17.080
and we'll start by
calling start engine.

00:05:17.080 --> 00:05:22.340
So let's just jump
into our JNI code.

00:05:22.340 --> 00:05:27.850
So this is in
native-lib.cpp here.

00:05:27.850 --> 00:05:33.070
So I'm going to define
an audio engine up here--

00:05:33.070 --> 00:05:36.260
just call it engine.

00:05:36.260 --> 00:05:38.190
And then, I'm going
to call a method

00:05:38.190 --> 00:05:41.631
on my engine called start.

00:05:41.631 --> 00:05:45.180
Now, I've already created
the header and implementation

00:05:45.180 --> 00:05:45.990
files--

00:05:45.990 --> 00:05:49.320
just the blank files for
this audio engine class.

00:05:49.320 --> 00:05:52.650
So I'll go ahead now
and write the class.

00:05:52.650 --> 00:06:01.820
So AudioEngine, and I'm going
to have one method called start.

00:06:01.820 --> 00:06:02.320
OK.

00:06:02.320 --> 00:06:04.270
Now, I can use
Option-Enter to generate

00:06:04.270 --> 00:06:05.420
the definition for this.

00:06:05.420 --> 00:06:11.200
I'm in my implementation,
and I'm in the start method.

00:06:11.200 --> 00:06:13.330
Before I can start
using the Oboe library,

00:06:13.330 --> 00:06:14.900
I need to do two things.

00:06:14.900 --> 00:06:17.940
Number one, I need to
include the Oboe header.

00:06:21.349 --> 00:06:23.790
There we go.

00:06:23.790 --> 00:06:25.990
And the other thing
I need to do is--

00:06:25.990 --> 00:06:28.660
this kind of just makes
it easier for me-- which

00:06:28.660 --> 00:06:30.820
is to use the Oboe namespace.

00:06:30.820 --> 00:06:33.430
And this just avoids me having
to prefix all of the Oboe

00:06:33.430 --> 00:06:37.090
objects with the word Oboe.

00:06:37.090 --> 00:06:42.290
So in our start method, we
want to create an audio stream.

00:06:42.290 --> 00:06:45.719
To do that, we use an
audio stream builder.

00:06:45.719 --> 00:06:48.260
[? Call ?] [? up ?] [? b. ?]
And the builder allows us to set

00:06:48.260 --> 00:06:49.910
properties on the stream.

00:06:49.910 --> 00:06:54.190
So that's things like
the format of the stream.

00:06:54.190 --> 00:06:56.210
Now, when I set
the format, there

00:06:56.210 --> 00:06:58.880
are two choices I
can choose from--

00:06:58.880 --> 00:07:01.640
either 16-bit
integers or floats.

00:07:01.640 --> 00:07:03.500
I will use floats.

00:07:03.500 --> 00:07:06.830
I can also set the
number of channels.

00:07:06.830 --> 00:07:09.050
So that would be two for
stereo or one for mono.

00:07:11.850 --> 00:07:14.610
And I can also set
properties which

00:07:14.610 --> 00:07:17.470
inform the stream of my
latency requirements.

00:07:17.470 --> 00:07:23.012
So the most important one
here is set performance mode.

00:07:23.012 --> 00:07:25.580
And there are a number of
options, but the one I want

00:07:25.580 --> 00:07:28.950
is, obviously, the
low latency one.

00:07:28.950 --> 00:07:31.800
The second thing I can do is set
the sharing mode on the stream.

00:07:31.800 --> 00:07:35.690
So let's just set that.

00:07:35.690 --> 00:07:38.580
So I'm going to set this to
an exclusive sharing mode.

00:07:38.580 --> 00:07:40.550
And what that means
is that I'm requesting

00:07:40.550 --> 00:07:44.300
that the audio device give
me an exclusive stream.

00:07:44.300 --> 00:07:46.730
That means that my
app's audio won't

00:07:46.730 --> 00:07:49.530
be mixed with any other
audio on the system.

00:07:49.530 --> 00:07:52.040
So if the device
supports it, I can

00:07:52.040 --> 00:07:57.080
avoid having my audio
mixed with anything else

00:07:57.080 --> 00:08:00.170
before it goes through
the speaker or headphones.

00:08:00.170 --> 00:08:04.040
And by doing this, I can cut
a few milliseconds of latency

00:08:04.040 --> 00:08:06.170
off the output.

00:08:06.170 --> 00:08:09.590
So that's all I need to
do to open the stream.

00:08:09.590 --> 00:08:12.440
So I can go ahead now
and call open stream.

00:08:12.440 --> 00:08:16.610
This takes a reference to
an audio stream pointer.

00:08:16.610 --> 00:08:19.400
Again, I can use
Option-Enter to create

00:08:19.400 --> 00:08:21.800
a new field called stream.

00:08:21.800 --> 00:08:26.060
So back in our header, it's
done this automatically for me.

00:08:26.060 --> 00:08:26.940
OK.

00:08:26.940 --> 00:08:30.550
Once the stream is open, there's
one final step I need to take,

00:08:30.550 --> 00:08:32.669
which is to set the
buffer size on the stream.

00:08:32.669 --> 00:08:37.020
So I can do this by doing
set buffer size in frames.

00:08:37.020 --> 00:08:42.870
Now, to get the smallest
possible buffer size,

00:08:42.870 --> 00:08:48.060
we have to interrogate the audio
device for the minimum amount

00:08:48.060 --> 00:08:53.700
of data that it will read in one
operation-- so a discrete chunk

00:08:53.700 --> 00:08:54.730
of audio data.

00:08:54.730 --> 00:08:56.730
And we call this a burst.

00:08:56.730 --> 00:09:00.400
So we want to obtain the burst
size from the audio device.

00:09:00.400 --> 00:09:04.690
We can do this using stream
get frames per burst.

00:09:04.690 --> 00:09:07.050
And that's the minimum
possible buffer size

00:09:07.050 --> 00:09:09.614
that we can set
our stream to have.

00:09:09.614 --> 00:09:11.280
But we actually don't
recommend that you

00:09:11.280 --> 00:09:13.380
use this absolute minimum.

00:09:13.380 --> 00:09:19.020
We recommend that you use
double this because it provides

00:09:19.020 --> 00:09:21.690
a good protection
against underruns,

00:09:21.690 --> 00:09:25.884
and it's a good trade-off
with latency and underrun.

00:09:25.884 --> 00:09:26.880
OK.

00:09:26.880 --> 00:09:29.610
So that's all I need to do to
create a low-latency stream.

00:09:29.610 --> 00:09:36.160
So now, I can go ahead and
start the stream, which

00:09:36.160 --> 00:09:37.930
will do nothing
because we haven't

00:09:37.930 --> 00:09:40.780
found any way of putting
data into the stream.

00:09:40.780 --> 00:09:45.490
So to get data into the
stream, we use a callback.

00:09:45.490 --> 00:09:48.590
So I'm back in the
builder, and I'll

00:09:48.590 --> 00:09:50.800
use the set callback method.

00:09:50.800 --> 00:09:54.070
This wants to take an audio
stream callback object.

00:09:54.070 --> 00:09:56.020
And to make this
simple, I'll just

00:09:56.020 --> 00:10:00.070
use my this object, which means
that my audio engine needs

00:10:00.070 --> 00:10:03.590
to implement this interface.

00:10:03.590 --> 00:10:06.260
So we'll have it do this.

00:10:06.260 --> 00:10:09.440
Now, I can use Control-O
to show me the methods

00:10:09.440 --> 00:10:11.750
that I can override
in this interface.

00:10:11.750 --> 00:10:13.700
The one I want is onAudioReady.

00:10:13.700 --> 00:10:15.860
This is the method
that will be called

00:10:15.860 --> 00:10:18.920
every time the audio
device needs more data.

00:10:21.890 --> 00:10:26.090
So inside here, let's
just take a quick look

00:10:26.090 --> 00:10:28.010
at what this method
signature is.

00:10:28.010 --> 00:10:30.410
So onAudioReady is called.

00:10:30.410 --> 00:10:33.140
It tells me the stream
that wants more data.

00:10:33.140 --> 00:10:36.500
And it also gives me
a container array.

00:10:36.500 --> 00:10:41.030
So this container array,
which is of type void star

00:10:41.030 --> 00:10:46.760
because it can be either 16-bit
integers or floating point

00:10:46.760 --> 00:10:50.120
samples, is something
that I'm going

00:10:50.120 --> 00:10:52.292
to write my audio data into.

00:10:52.292 --> 00:10:53.750
So I write into
it, and then that's

00:10:53.750 --> 00:10:56.060
passed out to the audio device.

00:10:56.060 --> 00:10:58.100
Lastly, we have num
frames, which tells me

00:10:58.100 --> 00:11:03.110
the number of audio frames
which need to be populated

00:11:03.110 --> 00:11:05.000
in this container array.

00:11:05.000 --> 00:11:06.740
So I need an audio source.

00:11:06.740 --> 00:11:08.900
And I'm going to cheat
a little bit here.

00:11:08.900 --> 00:11:12.710
I have created an
oscillator in advance.

00:11:12.710 --> 00:11:14.670
And let's just take
a quick look at it.

00:11:14.670 --> 00:11:17.490
And it's just going to
generate a square wave here.

00:11:17.490 --> 00:11:23.030
So that's a periodic signal
varying between two points

00:11:23.030 --> 00:11:25.080
to create a square wave.

00:11:25.080 --> 00:11:31.150
So let's now create
an oscillator.

00:11:31.150 --> 00:11:35.630
Let me just do oscillator.

00:11:35.630 --> 00:11:40.560
It's a templated object, so
I need to tell it what type.

00:11:40.560 --> 00:11:44.320
And I'll just include
the oscillator header.

00:11:44.320 --> 00:11:46.510
So now that I have
an oscillator,

00:11:46.510 --> 00:11:50.222
I can do osc render--

00:11:50.222 --> 00:11:51.600
OK.

00:11:51.600 --> 00:11:54.720
So Android Studio is complaining
about this method signature.

00:11:54.720 --> 00:11:56.640
That's why it's got
a red underline here.

00:11:56.640 --> 00:11:58.790
I'm just going to
go ahead and build,

00:11:58.790 --> 00:12:02.120
and that normally sorts it out.

00:12:02.120 --> 00:12:04.666
Yeah, there we go.

00:12:04.666 --> 00:12:06.150
OK.

00:12:06.150 --> 00:12:07.530
Ignore the errors.

00:12:07.530 --> 00:12:09.000
OK.

00:12:09.000 --> 00:12:12.040
So on my oscillator, I
have a render audio method,

00:12:12.040 --> 00:12:16.560
which is going to put the audio
frames from the oscillator

00:12:16.560 --> 00:12:17.890
into this audio data array.

00:12:17.890 --> 00:12:24.845
So first thing I need to do is
cast it to an array of floats--

00:12:24.845 --> 00:12:30.624
audio data-- and pass
in the number of frames.

00:12:30.624 --> 00:12:35.540
So the last thing I need
to do in onAudioReady

00:12:35.540 --> 00:12:38.270
is return a result. And this
can be either to continue,

00:12:38.270 --> 00:12:40.720
where the callbacks will
continue, or it can be stop

00:12:40.720 --> 00:12:42.540
and the callbacks will stop.

00:12:42.540 --> 00:12:48.280
So in my case, I'm
going to continue.

00:12:48.280 --> 00:12:48.880
Right.

00:12:48.880 --> 00:12:52.540
The final thing I want to
do is set some things up

00:12:52.540 --> 00:12:54.640
on my oscillator.

00:12:54.640 --> 00:12:58.330
So I'm going to set
the amplitude, which

00:12:58.330 --> 00:13:02.140
is kind of the volume.

00:13:02.140 --> 00:13:05.110
I'm also going to
set the frequency.

00:13:05.110 --> 00:13:07.780
Set that at about 80 Hertz--

00:13:07.780 --> 00:13:10.285
nice bass frequency.

00:13:10.285 --> 00:13:12.160
And I also need to set
the sample rate, which

00:13:12.160 --> 00:13:15.970
tells the oscillator how
frequently these samples should

00:13:15.970 --> 00:13:18.260
be produced.

00:13:18.260 --> 00:13:20.320
And I can get that
from the stream--

00:13:20.320 --> 00:13:23.170
get sample rate there.

00:13:23.170 --> 00:13:23.860
OK.

00:13:23.860 --> 00:13:25.920
I know you're all
desperate to hear a sound.

00:13:25.920 --> 00:13:28.660
There is one very final
thing I need to do here,

00:13:28.660 --> 00:13:32.460
which is I need to
respond to tap events.

00:13:32.460 --> 00:13:36.470
So I'll just go back
into MainActivity,

00:13:36.470 --> 00:13:43.340
and I'm going to override
the onTouchEvent so that,

00:13:43.340 --> 00:13:50.090
if the event is
down, then I'm going

00:13:50.090 --> 00:13:53.610
to call this native method tap.

00:13:53.610 --> 00:13:56.706
Make that true-- else.

00:13:59.460 --> 00:14:00.830
Otherwise, if the event is up--

00:14:00.830 --> 00:14:03.980
I'm lifting my finger
off the screen--

00:14:03.980 --> 00:14:05.525
then I'll pass in False.

00:14:08.091 --> 00:14:08.590
OK.

00:14:08.590 --> 00:14:12.600
Let's just have a look
at this tap method.

00:14:12.600 --> 00:14:16.200
This needs implementing.

00:14:16.200 --> 00:14:19.450
So I'll just pass in
this true or false value.

00:14:19.450 --> 00:14:24.871
Create the new method.

00:14:24.871 --> 00:14:30.190
And I'll just call
osc setWaveOn,

00:14:30.190 --> 00:14:33.396
and that's going to
pass that in there.

00:14:33.396 --> 00:14:35.570
Now, moment of truth.

00:14:35.570 --> 00:14:36.340
OK.

00:14:36.340 --> 00:14:38.655
I'm going to run this.

00:14:38.655 --> 00:14:42.025
And in theory, you
should hear a sound.

00:14:50.842 --> 00:14:52.550
So when I tap on the
screen, we should

00:14:52.550 --> 00:14:56.110
hear an 80-hertz square wave.

00:14:56.110 --> 00:14:56.690
The pressure.

00:14:56.690 --> 00:14:59.091
[VIBRATING SOUND] There we go.

00:14:59.091 --> 00:15:00.534
[APPLAUSE]

00:15:00.534 --> 00:15:03.420
[VIBRATING SOUNDS]

00:15:06.787 --> 00:15:11.440
So you can see it's the
lowest possible latency here,

00:15:11.440 --> 00:15:16.880
and it's actually
pretty responsive.

00:15:16.880 --> 00:15:18.850
So we have a musical instrument.

00:15:18.850 --> 00:15:21.310
Admittedly, it's not the
best musical instrument

00:15:21.310 --> 00:15:23.810
in the world.

00:15:23.810 --> 00:15:26.964
A little bit to be desired on
the sound and control front.

00:15:26.964 --> 00:15:28.630
So what I actually
thought would be nice

00:15:28.630 --> 00:15:31.430
is if we could add a
little bit more control.

00:15:31.430 --> 00:15:35.660
So for the last four
minutes and 30 seconds,

00:15:35.660 --> 00:15:38.350
I'm going to tie
the motion sensor

00:15:38.350 --> 00:15:41.950
to the pitch of the oscillator.

00:15:41.950 --> 00:15:45.670
So to do this, I'm going
to cheat, uncomment

00:15:45.670 --> 00:15:47.510
some code that I wrote earlier.

00:15:47.510 --> 00:15:51.890
And what this does is
register a listener,

00:15:51.890 --> 00:15:57.460
which will listen to the
rotation vector sensor.

00:15:57.460 --> 00:16:00.160
So to listen to
these events, I need

00:16:00.160 --> 00:16:08.230
to implement the sensor event
listener interface, implement

00:16:08.230 --> 00:16:11.620
the methods onSensorChanged.

00:16:11.620 --> 00:16:18.400
So what I want to do
is set the frequency

00:16:18.400 --> 00:16:23.280
based on the event
values of the x-axis.

00:16:23.280 --> 00:16:25.840
And I also need to
scale this value.

00:16:25.840 --> 00:16:30.550
So I want to have it from,
let's say, 20 Hertz--

00:16:30.550 --> 00:16:34.510
the limit of human hearing--

00:16:34.510 --> 00:16:35.950
and let's go up to like--

00:16:40.350 --> 00:16:43.830
this should give me up
to around 100 Hertz.

00:16:46.591 --> 00:16:47.090
Yep.

00:16:47.090 --> 00:16:47.756
That looks good.

00:16:50.200 --> 00:16:53.970
Again, I just need to
implement this frequency.

00:17:02.788 --> 00:17:03.290
OK.

00:17:03.290 --> 00:17:07.540
So we'll just go
osc setFrequency.

00:17:07.540 --> 00:17:09.561
And there we go.

00:17:09.561 --> 00:17:10.060
OK.

00:17:10.060 --> 00:17:12.369
So we're good to go on that.

00:17:12.369 --> 00:17:15.991
Brief interlude--
very brief, in fact.

00:17:15.991 --> 00:17:20.031
Has anyone heard
of the Amen break?

00:17:20.031 --> 00:17:20.530
OK.

00:17:20.530 --> 00:17:21.210
One person.

00:17:21.210 --> 00:17:22.450
Yes.

00:17:22.450 --> 00:17:27.900
So the Amen break comes from a
song in the '60s by the Winston

00:17:27.900 --> 00:17:30.240
Brothers called "Amen
Brother," and it's

00:17:30.240 --> 00:17:33.810
four bars of the most
incredible drum solo.

00:17:33.810 --> 00:17:38.100
And it's the most
sampled loop in history,

00:17:38.100 --> 00:17:43.620
but no one's heard of it--
evidently-- apart from one guy.

00:17:43.620 --> 00:17:45.150
So I thought it
would be nice if I

00:17:45.150 --> 00:17:49.000
could play my new musical
instrument over this loop.

00:17:49.000 --> 00:17:53.550
So here's the loop.

00:17:53.550 --> 00:17:56.270
I need to run the app.

00:17:56.270 --> 00:17:57.150
Let's give it a go.

00:17:59.898 --> 00:18:01.540
Let's just make sure it's here.

00:18:06.980 --> 00:18:07.480
OK.

00:18:07.480 --> 00:18:09.981
So with a bit of luck.

00:18:09.981 --> 00:18:13.460
[MUSIC PLAYING]

00:18:13.460 --> 00:18:15.448
Here we go.

00:18:15.448 --> 00:18:18.430
[VIBRATING NOISES OVER DRUMBEAT]

00:18:34.460 --> 00:18:35.240
Right.

00:18:35.240 --> 00:18:38.180
[APPLAUSE]

00:18:44.550 --> 00:18:45.080
OK.

00:18:45.080 --> 00:18:48.170
So that's about it from me.

00:18:48.170 --> 00:18:50.195
If we can just go
back to slides?

00:18:54.128 --> 00:18:55.237
And yeah.

00:18:55.237 --> 00:18:56.820
So the library is
available on GitHub.

00:18:56.820 --> 00:18:59.730
There's documentation,
code labs, all sorts

00:18:59.730 --> 00:19:00.720
of good stuff on there.

00:19:00.720 --> 00:19:02.303
We'd love you to
start using it, start

00:19:02.303 --> 00:19:06.007
building amazing audio
experiences on Android.

00:19:06.007 --> 00:19:08.340
And I'll be around afterwards
if you have any questions.

00:19:08.340 --> 00:19:10.290
So thank you all very much.

00:19:10.290 --> 00:19:12.090
[APPLAUSE]

00:19:12.090 --> 00:19:15.140
[MUSIC PLAYING]

