WEBVTT
Kind: captions
Language: en

00:00:02.700 --> 00:00:06.070
For media-rich applications,
bitmaps are everywhere.

00:00:06.070 --> 00:00:07.600
But these high
resolution images can

00:00:07.600 --> 00:00:09.600
cause a horde of
performance problems

00:00:09.600 --> 00:00:12.270
if the size of the image in
memory is larger than the size

00:00:12.270 --> 00:00:13.910
you're displaying it on screen.

00:00:13.910 --> 00:00:16.410
My name is Colt McAnlis and one
of the most important things

00:00:16.410 --> 00:00:18.820
you can do to alleviate
memory pressure in your apps

00:00:18.820 --> 00:00:20.812
is resizing your bitmaps.

00:00:20.812 --> 00:00:22.520
This is actually a
pretty common problem.

00:00:22.520 --> 00:00:24.831
Let's say a developer
has a photo gallery

00:00:24.831 --> 00:00:27.080
app where you can scroll
through pictures and drawings

00:00:27.080 --> 00:00:28.760
that the user has
made on their device.

00:00:28.760 --> 00:00:31.470
Now, most of these images
are super-high resolution.

00:00:31.470 --> 00:00:33.550
But in gallery mode,
you're only displaying them

00:00:33.550 --> 00:00:35.570
as small icons,
which means you've

00:00:35.570 --> 00:00:36.710
got a huge image in memory.

00:00:36.710 --> 00:00:38.920
But on the screen, it's
only 1/10 of the size.

00:00:38.920 --> 00:00:40.540
The issue here has
everything to do

00:00:40.540 --> 00:00:43.510
with taking up blocks of memory
that you're not actually using.

00:00:43.510 --> 00:00:46.590
Those large images occupy big
spaces in your memory heap,

00:00:46.590 --> 00:00:49.040
leaving less space for the
rest of your application.

00:00:49.040 --> 00:00:50.866
However, resizing
those images to match

00:00:50.866 --> 00:00:52.240
what they look
like on the screen

00:00:52.240 --> 00:00:54.190
reduces this unneeded
memory bloat,

00:00:54.190 --> 00:00:56.430
which, of course, puts
less performance pressure

00:00:56.430 --> 00:00:58.064
on the rest of your system.

00:00:58.064 --> 00:00:59.480
What you really
want to do here is

00:00:59.480 --> 00:01:01.270
find a way to load
the image into memory

00:01:01.270 --> 00:01:03.220
at the dimensions
it'll be displayed at

00:01:03.220 --> 00:01:05.069
rather than at full resolution.

00:01:05.069 --> 00:01:07.870
Later, when the user wants to
see the full resolution image,

00:01:07.870 --> 00:01:11.030
you can display it and load
it into memory on demand.

00:01:11.030 --> 00:01:14.160
Scaling your bitmaps is such an
important operation on Android

00:01:14.160 --> 00:01:16.980
that the platform provides a
whole group of ways to do it.

00:01:16.980 --> 00:01:19.750
So you don't have to write
any of that code yourself.

00:01:19.750 --> 00:01:23.030
First up is the
createScaledBitmap function.

00:01:23.030 --> 00:01:25.010
This API will take
in an existing bitmap

00:01:25.010 --> 00:01:27.870
and create a new bitmap
with the exact dimensions

00:01:27.870 --> 00:01:29.119
that you've selected.

00:01:29.119 --> 00:01:30.660
On the plus side,
you can get exactly

00:01:30.660 --> 00:01:32.130
the image size
you're looking for,

00:01:32.130 --> 00:01:34.000
regardless of how it looks.

00:01:34.000 --> 00:01:35.850
But the downside
is that this API

00:01:35.850 --> 00:01:38.822
requires an existing
bitmap in order to work,

00:01:38.822 --> 00:01:40.780
meaning that the image
would have to be loaded,

00:01:40.780 --> 00:01:43.790
decoded, and a bitmap created
before being able to create

00:01:43.790 --> 00:01:45.907
a new, smaller version.

00:01:45.907 --> 00:01:47.990
This kind of a dealbreaker
for most app developers

00:01:47.990 --> 00:01:49.780
who tend to be memory conscious.

00:01:49.780 --> 00:01:51.550
Instead, they
prefer to find a way

00:01:51.550 --> 00:01:53.110
to do the resizing
of their bitmaps

00:01:53.110 --> 00:01:56.870
at load time, which is something
that the inSampleSize flag

00:01:56.870 --> 00:02:00.120
of your bitmap's Option
object can do for you.

00:02:00.120 --> 00:02:02.212
Having this property
set to a non-1 value

00:02:02.212 --> 00:02:03.920
will result in an
image that's a fraction

00:02:03.920 --> 00:02:06.370
of the size of the original
without having to load

00:02:06.370 --> 00:02:08.620
in the full sized image.

00:02:08.620 --> 00:02:11.120
For example, setting
inSampleSize to 2

00:02:11.120 --> 00:02:12.950
returns an image
that's half the size.

00:02:12.950 --> 00:02:16.250
And setting it to 4 returns
an image that's 1/4 the size.

00:02:16.250 --> 00:02:18.890
Basically, image sizes will
always be some power of 2

00:02:18.890 --> 00:02:21.040
smaller than your source size.

00:02:21.040 --> 00:02:23.990
Now, inSampleSize is a
really fast operation.

00:02:23.990 --> 00:02:26.850
Effectively, it will only
read in every few pixels

00:02:26.850 --> 00:02:28.610
based on its value.

00:02:28.610 --> 00:02:30.340
So an inSampleSize
of 1 means it'll only

00:02:30.340 --> 00:02:32.115
read in every other pixel.

00:02:32.115 --> 00:02:34.490
But if you want to scale your
image to a dimension that's

00:02:34.490 --> 00:02:36.780
not equal to a power
of 2, then you'll

00:02:36.780 --> 00:02:40.230
need the inScaled, inDensity,
and inTargetDensity flags

00:02:40.230 --> 00:02:41.800
of BitmapOptions.

00:02:41.800 --> 00:02:44.210
See, when the inScaled
flag has been set,

00:02:44.210 --> 00:02:46.190
the system will derive
the scaling value

00:02:46.190 --> 00:02:48.520
to apply to your bitmap
by dividing the target

00:02:48.520 --> 00:02:51.130
density by the current density.

00:02:51.130 --> 00:02:53.070
Using this method
will resize your image

00:02:53.070 --> 00:02:56.400
and also apply a resizing
filter to it-- that is,

00:02:56.400 --> 00:02:58.900
the end result will look better
because some additional math

00:02:58.900 --> 00:03:01.830
has been taken into account
during the resizing step.

00:03:01.830 --> 00:03:05.780
But be warned, that extra filter
step takes extra processing

00:03:05.780 --> 00:03:08.340
time, which can quickly
add up for big images,

00:03:08.340 --> 00:03:10.780
resulting in slow
re-sizes, which

00:03:10.780 --> 00:03:13.530
is why the super
magic trick here is

00:03:13.530 --> 00:03:15.810
to combine these two options.

00:03:15.810 --> 00:03:18.090
inSampleSize will first
be applied to the image,

00:03:18.090 --> 00:03:22.420
getting it to the next power of
2 larger than your target size.

00:03:22.420 --> 00:03:24.780
Then inDensity and
inTargetDensity

00:03:24.780 --> 00:03:27.500
are used to scale the result
to the exact dimensions

00:03:27.500 --> 00:03:28.590
that you want.

00:03:28.590 --> 00:03:30.760
Combining these two is
a much faster operation

00:03:30.760 --> 00:03:33.900
since the inSampleSize will
reduce the number of pixels

00:03:33.900 --> 00:03:36.000
that the resulting
density based step

00:03:36.000 --> 00:03:39.020
will need to apply its
resizing filter on.

00:03:39.020 --> 00:03:41.950
Now, it's worth pointing out
one particularly tricky problem

00:03:41.950 --> 00:03:42.570
here.

00:03:42.570 --> 00:03:44.687
How do you get the
source size of the image?

00:03:44.687 --> 00:03:46.270
Well, it's a little
bit more difficult

00:03:46.270 --> 00:03:47.530
than you'd actually want.

00:03:47.530 --> 00:03:51.230
Basically, you have to set
the inJustDecodeBounds value

00:03:51.230 --> 00:03:54.530
of your bitmap object, and then
go ahead and decode your image

00:03:54.530 --> 00:03:55.190
file.

00:03:55.190 --> 00:03:57.536
This will result with the
width and height of the image,

00:03:57.536 --> 00:03:59.160
and allow you to go
forward and then do

00:03:59.160 --> 00:04:02.180
the actual decode of your
image, finally resizing it

00:04:02.180 --> 00:04:05.040
to the size you actually
need, which, by the way,

00:04:05.040 --> 00:04:06.800
is a great time to
point out that there

00:04:06.800 --> 00:04:09.060
is existing, stable
libraries out there that

00:04:09.060 --> 00:04:11.900
handle all of this types of
craziness on your behalf.

00:04:11.900 --> 00:04:14.370
In fact, the Glide and
Picasso libraries already

00:04:14.370 --> 00:04:16.810
have code to handle this
type of bitmap resizing

00:04:16.810 --> 00:04:18.769
as well as a ton of
other functionality

00:04:18.769 --> 00:04:21.920
like async decoding and
caching, all of which

00:04:21.920 --> 00:04:24.417
makes managing bitmaps
on Android a lot easier.

00:04:24.417 --> 00:04:26.500
I mean, it's good to know
the basics of the stuff.

00:04:26.500 --> 00:04:28.720
But when it comes to
production level code,

00:04:28.720 --> 00:04:31.370
it's usually a good idea
to lean on proven libraries

00:04:31.370 --> 00:04:32.580
where you can.

00:04:32.580 --> 00:04:34.500
And understanding these
types of trade-offs

00:04:34.500 --> 00:04:36.306
is what performance
is all about, which

00:04:36.306 --> 00:04:38.930
is why you should check out the
rest of the Android Performance

00:04:38.930 --> 00:04:40.050
Patterns content.

00:04:40.050 --> 00:04:42.480
And don't forget to join our
Google+ Community to swap

00:04:42.480 --> 00:04:45.260
bitmap war stories
with fellow developers.

00:04:45.260 --> 00:04:48.440
So keep calm, profile your
code, and always remember,

00:04:48.440 --> 00:04:49.040
perf matters.

00:04:49.040 --> 00:04:51.790
[MUSIC PLAYING]

