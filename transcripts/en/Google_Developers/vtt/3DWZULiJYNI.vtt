WEBVTT
Kind: captions
Language: en

00:00:13.020 --> 00:00:16.410
Hi everyone, and welcome to
today's Google Developers Live

00:00:16.410 --> 00:00:17.530
for Google Drive.

00:00:17.530 --> 00:00:21.075
Today I'm going to talk about a
very, very small change that

00:00:21.075 --> 00:00:25.256
was made to Auth in
Google Drive.

00:00:25.256 --> 00:00:29.330
And it's just one little check
box in our SDK settings.

00:00:29.330 --> 00:00:33.060
But it actually has really big
implications for how you

00:00:33.060 --> 00:00:35.170
develop your application.

00:00:35.170 --> 00:00:39.320
So I want to switch over to
our SDK settings here.

00:00:39.320 --> 00:00:40.710
This is the APIs console.

00:00:40.710 --> 00:00:43.310
And if you've built a Drive
app that does open with or

00:00:43.310 --> 00:00:46.880
create from the Drive UI, you've
been in here before and

00:00:46.880 --> 00:00:49.110
you're familiar with it.

00:00:49.110 --> 00:00:52.790
But one thing that changed
probably about a month back is

00:00:52.790 --> 00:00:56.100
this Authentications section.

00:00:56.100 --> 00:00:59.090
Before, this little check box
that says, "Automatically

00:00:59.090 --> 00:01:03.580
initiate the OAuth to flow"
was not present, and this

00:01:03.580 --> 00:01:07.470
section was always enabled
for applications.

00:01:11.860 --> 00:01:16.930
What this did is when a user
clicked Open With or clicked

00:01:16.930 --> 00:01:21.700
on a file or clicked Create in
the Drive menu, Drive would

00:01:21.700 --> 00:01:25.580
automatically initiate the OAuth
flow on behalf of your

00:01:25.580 --> 00:01:27.990
application.

00:01:27.990 --> 00:01:30.265
It did some really good
things as a result.

00:01:30.265 --> 00:01:33.310
It solved one really important
problem for developers, which

00:01:33.310 --> 00:01:36.970
is handling multiple
user accounts.

00:01:36.970 --> 00:01:39.370
Since we already knew which
user was logged in, which

00:01:39.370 --> 00:01:43.680
Drive account it was, we were
able to automatically route

00:01:43.680 --> 00:01:45.470
that Auth flow for
the correct user.

00:01:45.470 --> 00:01:47.510
So you didn't have to
worry about that.

00:01:47.510 --> 00:01:49.540
But it did have some negative
side effects, too.

00:01:49.540 --> 00:01:52.630
So one of them was, it's
pretty tedious to

00:01:52.630 --> 00:01:54.020
configure all this.

00:01:54.020 --> 00:01:55.290
There's a little bit
of duplication.

00:01:55.290 --> 00:01:58.240
You can see here we have
to copy our client ID.

00:01:58.240 --> 00:02:02.420
This is from the API
access section.

00:02:02.420 --> 00:02:05.610
We needed to list all the scopes
that our app used.

00:02:05.610 --> 00:02:08.650
By default, it included
the drive.file.scope.

00:02:08.650 --> 00:02:12.480
But if you needed access to the
user's profile or their

00:02:12.480 --> 00:02:16.790
email address, for example, you
had to copy these in here.

00:02:16.790 --> 00:02:19.310
But you also needed to list
these in your code as well,

00:02:19.310 --> 00:02:22.510
because most apps had use cases
where they needed to

00:02:22.510 --> 00:02:25.020
initiate the OAuth
flow themselves.

00:02:25.020 --> 00:02:26.200
So you just had a lot
of copying and

00:02:26.200 --> 00:02:27.250
pasting back and forth.

00:02:27.250 --> 00:02:29.550
And every time you added a new
scope, you wanted to make sure

00:02:29.550 --> 00:02:33.110
that you kept these in sync.

00:02:33.110 --> 00:02:34.830
There were also some other
complications with the

00:02:34.830 --> 00:02:39.630
Redirect URI, specifically
again some duplicate

00:02:39.630 --> 00:02:40.860
configuration.

00:02:40.860 --> 00:02:43.920
Because Drive was initiating the
flow, it was setting the

00:02:43.920 --> 00:02:47.985
redirect URIs to your Open URL,
or if you had Create, you

00:02:47.985 --> 00:02:49.540
had a Create URL.

00:02:49.540 --> 00:02:53.620
And for example, if you wanted
to have a separate action for

00:02:53.620 --> 00:02:56.690
these two different events, we
now had two different redirect

00:02:56.690 --> 00:02:59.500
URIs that we could
possibly receive.

00:02:59.500 --> 00:03:01.140
And hey, look at that.

00:03:01.140 --> 00:03:02.390
An unexpected error.

00:03:05.200 --> 00:03:07.690
That is really unexpected.

00:03:07.690 --> 00:03:10.180
So anyway, you had these two
different redirect URIs.

00:03:10.180 --> 00:03:13.160
You would also have to copy
those into the API access and

00:03:13.160 --> 00:03:14.350
register them.

00:03:14.350 --> 00:03:16.840
And then in your code, of
course, you would need to have

00:03:16.840 --> 00:03:20.590
those configured and then switch
depending on which one.

00:03:20.590 --> 00:03:23.410
It made handling OAuth in
Drive a little bit more

00:03:23.410 --> 00:03:26.330
tedious and error prone than
it really needed to be.

00:03:29.070 --> 00:03:30.380
So what changed?

00:03:30.380 --> 00:03:33.750
Basically, what we added is an
option to disable this for

00:03:33.750 --> 00:03:34.470
applications.

00:03:34.470 --> 00:03:37.830
And by default for new
applications, Drive-initiated

00:03:37.830 --> 00:03:39.340
OAuth is disabled.

00:03:39.340 --> 00:03:41.450
What this means is that your
application, if you're writing

00:03:41.450 --> 00:03:46.120
a new Drive app, you are in
complete control over how

00:03:46.120 --> 00:03:49.980
OAuth works within
your application.

00:03:49.980 --> 00:03:54.630
I did mention earlier that the
previous mechanism had solved

00:03:54.630 --> 00:03:57.640
one important problem,
which is multi-login.

00:03:57.640 --> 00:04:00.880
To help you handle that now
when you're initiating the

00:04:00.880 --> 00:04:05.600
flow yourself, we added a new
parameter into the JSON state

00:04:05.600 --> 00:04:07.380
parameter that Drive
gives you.

00:04:07.380 --> 00:04:10.620
And it's obviously
called User ID.

00:04:10.620 --> 00:04:17.050
And this user ID can then be
used by your application to

00:04:17.050 --> 00:04:20.470
give us a hint when we prompt
the user for authorization

00:04:20.470 --> 00:04:23.110
which account we should be
authorizing with if they

00:04:23.110 --> 00:04:26.640
happen to be logged in with
multiple accounts.

00:04:26.640 --> 00:04:27.670
One word of warning.

00:04:27.670 --> 00:04:31.590
This User ID is not the user's
regular user ID.

00:04:31.590 --> 00:04:35.740
For privacy reasons, it's
obfuscated differently than we

00:04:35.740 --> 00:04:39.610
would obfuscate other user IDs,
because at the point when

00:04:39.610 --> 00:04:41.670
we're giving this to your
application, the user may not

00:04:41.670 --> 00:04:43.650
have approved your app.

00:04:43.650 --> 00:04:46.120
They may have just installed
through the Chrome Web Store,

00:04:46.120 --> 00:04:48.720
which doesn't have the same
set of approvals that you

00:04:48.720 --> 00:04:51.620
would have on the
OAuth screen.

00:04:51.620 --> 00:04:54.920
So until the user has fully
consented to giving

00:04:54.920 --> 00:04:58.160
information to your application,
what you receive

00:04:58.160 --> 00:05:02.450
about who the user is
is an opaque ID.

00:05:02.450 --> 00:05:05.340
It's obfuscated differently than
other IDs that you may

00:05:05.340 --> 00:05:08.640
see for that user in the Drive
API or in, say, the user

00:05:08.640 --> 00:05:13.190
profile or Google+ APIs, so you
can't really use that as a

00:05:13.190 --> 00:05:14.940
way to correlate
user activity.

00:05:14.940 --> 00:05:18.720
But you can use it, and you
should use it, as a hint when

00:05:18.720 --> 00:05:23.110
initiating the OAuth flow so
that the correct account is

00:05:23.110 --> 00:05:27.370
used and authorized for
your application.

00:05:27.370 --> 00:05:28.670
So why did we make
these changes?

00:05:28.670 --> 00:05:33.970
Well, one was, I mentioned
earlier the previous mechanism

00:05:33.970 --> 00:05:36.860
was just very tedious, a lot of
duplicate configuration, a

00:05:36.860 --> 00:05:38.930
lot of things that you can get
wrong when setting up your

00:05:38.930 --> 00:05:41.040
application.

00:05:41.040 --> 00:05:45.700
But the bigger implication was
it was actually very difficult

00:05:45.700 --> 00:05:50.060
to create a Drive application
that was pure client-side.

00:05:50.060 --> 00:05:54.860
So for example, if you wanted to
do a pure JavaScript client

00:05:54.860 --> 00:06:00.680
application, or doing a
Chrome-packaged app, because

00:06:00.680 --> 00:06:03.670
we were always requesting--

00:06:03.670 --> 00:06:05.870
always initiating an OAuth flow
that was designed for

00:06:05.870 --> 00:06:08.160
server-based web applications
and included things like

00:06:08.160 --> 00:06:13.320
offline access, it just made it
very difficult to do a pure

00:06:13.320 --> 00:06:13.700
client-side.

00:06:13.700 --> 00:06:15.560
You always had to have that
little bit of server code

00:06:15.560 --> 00:06:20.010
running in order to handle
this login case.

00:06:20.010 --> 00:06:23.230
It wasn't too bad, but now you
can actually use a JavaScript

00:06:23.230 --> 00:06:27.020
client library, for example,
and keep the authorization

00:06:27.020 --> 00:06:28.710
flow completely within
the web browser.

00:06:34.350 --> 00:06:35.600
The other thing is it gives
you a little bit more

00:06:35.600 --> 00:06:39.810
flexibility in terms of what
you need from OAuth.

00:06:39.810 --> 00:06:45.680
For example, with the previous
mechanism, because it was

00:06:45.680 --> 00:06:49.610
always using the drive.file
scope, it pretty much forced

00:06:49.610 --> 00:06:53.230
you into using that scope
if you had an app.

00:06:53.230 --> 00:06:56.210
You could, of course, always
add an additional scope to

00:06:56.210 --> 00:06:58.050
get, say, the full Drive
access if your

00:06:58.050 --> 00:06:59.930
application needed it.

00:06:59.930 --> 00:07:01.550
But then you would have
a very confusing

00:07:01.550 --> 00:07:03.360
authorization dialogue.

00:07:03.360 --> 00:07:06.310
And while we certainly encourage
everyone to use the

00:07:06.310 --> 00:07:09.950
narrowest scope possible for
their application, and the

00:07:09.950 --> 00:07:13.940
drive.file one is definitely
preferred, there are certain

00:07:13.940 --> 00:07:20.990
applications that really have a
very compelling use case and

00:07:20.990 --> 00:07:25.280
a justified use for having the
full scope for Drive while

00:07:25.280 --> 00:07:30.210
still appearing in the Drive
Create menu and being able to

00:07:30.210 --> 00:07:32.190
open files from the UI.

00:07:32.190 --> 00:07:35.210
So if you do fall into that
category, you now have the

00:07:35.210 --> 00:07:39.580
option of initiating the OAuth
request using just the Drive

00:07:39.580 --> 00:07:44.470
scope and avoiding having
duplicate text or conflicting

00:07:44.470 --> 00:07:47.690
text in the OAuth dialogue,
which potentially could

00:07:47.690 --> 00:07:48.940
confuse users.

00:07:51.100 --> 00:07:53.070
So one of things that
I'm actually

00:07:53.070 --> 00:07:55.500
really curious to do--

00:07:55.500 --> 00:07:57.190
for those who have been through
our documentation and

00:07:57.190 --> 00:08:00.910
our samples, you know we have
a JavaScript quick start.

00:08:00.910 --> 00:08:06.230
We don't yet have a JavaScript
version of the text editor

00:08:06.230 --> 00:08:09.260
sample that we have for
most other languages.

00:08:09.260 --> 00:08:11.380
That is something that
we would like to do.

00:08:11.380 --> 00:08:14.200
Hopefully we'll have that out
soon so that you can actually

00:08:14.200 --> 00:08:17.310
see how to build a pure
client-side application and

00:08:17.310 --> 00:08:24.350
take advantage of this change
in how we open applications.

00:08:24.350 --> 00:08:26.140
But there are some other things
that I think would be

00:08:26.140 --> 00:08:29.600
interesting challenges for
people to try, things that I

00:08:29.600 --> 00:08:30.560
want to try myself.

00:08:30.560 --> 00:08:34.130
I'm really hoping that
somebody's going to beat me to

00:08:34.130 --> 00:08:36.770
it in the community and maybe
can post in the Google+

00:08:36.770 --> 00:08:40.620
community about whether or not
it was successful or learned.

00:08:40.620 --> 00:08:43.909
But really, the two things that
I'm curious to see how

00:08:43.909 --> 00:08:46.820
they would work with Drive
apps, one is building a

00:08:46.820 --> 00:08:48.990
Chrome-packaged app.

00:08:48.990 --> 00:08:53.970
Now that we can actually build
Drive applications that are

00:08:53.970 --> 00:08:57.510
completely client-side, it
should be possible to build a

00:08:57.510 --> 00:09:00.450
packaged app that works with the
Drive APIs that integrates

00:09:00.450 --> 00:09:04.310
with the UI and runs
without a server.

00:09:04.310 --> 00:09:06.430
And then the other thing is
I know there are some new

00:09:06.430 --> 00:09:10.820
experimental APIs in Chrome
for identity.

00:09:10.820 --> 00:09:13.700
Of course, we have the ability
in the JavaScript client

00:09:13.700 --> 00:09:15.270
library to do authorization.

00:09:15.270 --> 00:09:17.210
It would be just really curious
to see if people are

00:09:17.210 --> 00:09:20.570
successful in using the identity
APIs in Chrome as an

00:09:20.570 --> 00:09:22.450
alternative, particularly
when combined with

00:09:22.450 --> 00:09:23.510
the packaged app.

00:09:23.510 --> 00:09:25.900
So interesting things to do.

00:09:25.900 --> 00:09:29.320
Maybe when we do to the
JavaScript version of our text

00:09:29.320 --> 00:09:33.210
editor, that's something that
we can look at trying.

00:09:33.210 --> 00:09:35.700
But if somebody out there is
really curious and wants to

00:09:35.700 --> 00:09:39.160
try it, I'd love to hear the
results of that, whether or

00:09:39.160 --> 00:09:40.410
not you're successful.

00:09:43.280 --> 00:09:44.280
That's really the change.

00:09:44.280 --> 00:09:47.440
I just want to give a couple
other tips related to OAuth.

00:09:50.320 --> 00:09:52.390
And this is regardless of how
you're doing it, whether or

00:09:52.390 --> 00:09:56.480
not it's client side or you're
still using the server flows.

00:09:56.480 --> 00:09:59.620
Just remember that with this
change, what your app is doing

00:09:59.620 --> 00:10:02.830
is really just plain OAuth 2
that you would use for any web

00:10:02.830 --> 00:10:06.130
application, whether or not it
was for Drive or using any of

00:10:06.130 --> 00:10:10.590
our other APIs, like Google+
or Calendar or Contacts.

00:10:10.590 --> 00:10:12.430
It doesn't really matter.

00:10:12.430 --> 00:10:16.310
It is important, though,
particularly in the case of

00:10:16.310 --> 00:10:21.140
Drive, that when you are given
a user ID hint when a user

00:10:21.140 --> 00:10:24.110
initiates an action from Drive
that you include this in your

00:10:24.110 --> 00:10:25.160
authorization request.

00:10:25.160 --> 00:10:28.950
And this should work for both
the JavaScript client in the

00:10:28.950 --> 00:10:29.660
configuration--

00:10:29.660 --> 00:10:33.650
you can just give it user_ID
and then the value.

00:10:33.650 --> 00:10:36.740
Similarly for all of the client
libraries, they all

00:10:36.740 --> 00:10:39.750
allow this in the
OAuth request.

00:10:39.750 --> 00:10:43.530
If you happen to be constructing
the URL by hand,

00:10:43.530 --> 00:10:46.500
the query parameter that you
would include in the request

00:10:46.500 --> 00:10:48.340
is user_ID.

00:10:48.340 --> 00:10:51.110
And then you would set that to
the value that you get in the

00:10:51.110 --> 00:10:52.190
state parameter.

00:10:52.190 --> 00:10:53.610
This is really important.

00:10:53.610 --> 00:10:57.820
If you don't do this, what could
happen is a user would

00:10:57.820 --> 00:10:59.890
attempt to open a file.

00:10:59.890 --> 00:11:02.370
When they do the approval
dialogue, depending on which

00:11:02.370 --> 00:11:04.110
account they were using in
Drive and which is their

00:11:04.110 --> 00:11:08.730
default, or depending on just
what they select in the

00:11:08.730 --> 00:11:11.090
account chooser, they may
pick the wrong account.

00:11:11.090 --> 00:11:13.620
And what would happen is you
would end up getting

00:11:13.620 --> 00:11:17.990
authorization for an account
that is different than the

00:11:17.990 --> 00:11:22.490
owner of the file that the user
is trying to act upon.

00:11:22.490 --> 00:11:23.920
So what would happen is
you would authorize.

00:11:23.920 --> 00:11:24.720
Things would look great.

00:11:24.720 --> 00:11:27.010
But as soon as you try to read
that file, you're going to get

00:11:27.010 --> 00:11:29.510
an error saying that you
don't have access.

00:11:29.510 --> 00:11:31.180
That would just be really
confusing for the user.

00:11:31.180 --> 00:11:33.770
You'd have to handle that, kind
of back out, retry the

00:11:33.770 --> 00:11:35.800
authorization, and hope that
they picked the right user

00:11:35.800 --> 00:11:37.180
account again.

00:11:37.180 --> 00:11:38.890
It's just not a good
user experience.

00:11:38.890 --> 00:11:42.100
But if we can give you the
user ID and you have it,

00:11:42.100 --> 00:11:44.330
include it in the request, and
it will ensure that the user

00:11:44.330 --> 00:11:46.595
gets a really nice,
smooth experience.

00:11:49.940 --> 00:11:52.990
You can do some optimizations,
depending on

00:11:52.990 --> 00:11:53.840
how your app is done.

00:11:53.840 --> 00:11:59.670
So for example, it's quite
common for a user to launch an

00:11:59.670 --> 00:12:02.420
application from Drive for an
app that they're already

00:12:02.420 --> 00:12:04.050
logged into.

00:12:04.050 --> 00:12:10.070
So if you don't want to blindly
check and reauthorize

00:12:10.070 --> 00:12:12.820
every time, what you could do is
you can detect if the user

00:12:12.820 --> 00:12:16.900
has an active session, check to
see if it's the same user--

00:12:16.900 --> 00:12:18.410
because it is possible if
they're logged in with

00:12:18.410 --> 00:12:21.000
multiple accounts that they may
have switched accounts in

00:12:21.000 --> 00:12:23.990
between that period of time.

00:12:23.990 --> 00:12:26.000
But you can use the user ID
from the state parameter

00:12:26.000 --> 00:12:27.320
against a saved value.

00:12:27.320 --> 00:12:29.830
If they're the same, there's
really no need to reauthorize

00:12:29.830 --> 00:12:31.160
in that case.

00:12:31.160 --> 00:12:35.270
And so you can save a redirect
or save those two to three

00:12:35.270 --> 00:12:38.260
seconds that it takes to
actually do the authorization,

00:12:38.260 --> 00:12:40.710
and then just let the
user in right away.

00:12:40.710 --> 00:12:42.950
If it's a different user or
you don't have an active

00:12:42.950 --> 00:12:45.160
session, then of course you do
want to go through the full

00:12:45.160 --> 00:12:48.140
authorization flow and make
sure they have an updated

00:12:48.140 --> 00:12:49.390
access token.

00:12:52.210 --> 00:12:54.370
For JavaScript, if you're
building a client-side

00:12:54.370 --> 00:12:56.740
application, you can do
this type of check.

00:12:56.740 --> 00:12:59.810
There is what we call immediate
mode, which is a way

00:12:59.810 --> 00:13:03.120
that you can check to see if
the user has previously

00:13:03.120 --> 00:13:05.160
authorized your application
and get an

00:13:05.160 --> 00:13:07.400
updated access token.

00:13:07.400 --> 00:13:09.170
You should always do
this first for

00:13:09.170 --> 00:13:10.110
the JavaScript client.

00:13:10.110 --> 00:13:12.920
What this allows you to do
is that if the user has

00:13:12.920 --> 00:13:15.460
previously authorized your
application, we don't want to

00:13:15.460 --> 00:13:17.880
show an approval prompt.

00:13:17.880 --> 00:13:18.980
We really just want
to give you an

00:13:18.980 --> 00:13:20.660
access token right away.

00:13:20.660 --> 00:13:23.780
Immediate mode allows your
application to do that check

00:13:23.780 --> 00:13:28.500
but do it in a way that is
transparent to the users, so

00:13:28.500 --> 00:13:32.070
actually do a hidden iframe with
post message, handle that

00:13:32.070 --> 00:13:32.740
communication.

00:13:32.740 --> 00:13:34.580
And then you just get
back a status.

00:13:34.580 --> 00:13:35.780
You either get back
a successful

00:13:35.780 --> 00:13:37.850
authorization or a failure.

00:13:37.850 --> 00:13:39.740
And if it's a failure, then
you want to go through the

00:13:39.740 --> 00:13:42.190
normal authorization flow.

00:13:42.190 --> 00:13:44.000
And when you do the normal
authorization, you'll get a

00:13:44.000 --> 00:13:50.890
popup and then the full UI for
authorizing your application.

00:13:50.890 --> 00:13:54.530
What this immediate mode does,
besides giving a quick way to

00:13:54.530 --> 00:13:57.200
do it, is in the case that the
user is authorized, it's just

00:13:57.200 --> 00:14:02.210
a nicer experience, because it
avoids flashing a popup.

00:14:02.210 --> 00:14:05.350
Even though it's only there for
half a second or a second,

00:14:05.350 --> 00:14:08.790
it's still something that you
want to avoid just to keep

00:14:08.790 --> 00:14:10.040
your UI nice and clean.

00:14:12.500 --> 00:14:15.590
Other than that, just remember
with OAuth in general, whether

00:14:15.590 --> 00:14:19.590
or not you're talking to our
APIs or any other provider,

00:14:19.590 --> 00:14:21.570
they do want to keep your
keys and secrets

00:14:21.570 --> 00:14:24.370
protected, same as tokens.

00:14:24.370 --> 00:14:27.280
Treat these like passwords.

00:14:27.280 --> 00:14:32.360
It's a lot easier to reset
tokens or reset your

00:14:32.360 --> 00:14:35.100
credentials if they happen
to be compromised.

00:14:35.100 --> 00:14:38.540
But obviously, you want to avoid
ever having credentials

00:14:38.540 --> 00:14:41.060
compromised in first place,
because it is disruptive, both

00:14:41.060 --> 00:14:43.460
to you as a developer and to
your users if they have to

00:14:43.460 --> 00:14:47.140
reauthorize access to
your application.

00:14:47.140 --> 00:14:51.620
So treat these as sensitive
materials, as you would for

00:14:51.620 --> 00:14:54.145
any other credential that you
would store in your system.

00:14:56.660 --> 00:15:01.440
Other than that, I think
that's really about it.

00:15:01.440 --> 00:15:05.520
I do know there are a couple
issues with the JavaScript

00:15:05.520 --> 00:15:06.880
client related to multi-login.

00:15:06.880 --> 00:15:09.600
I know there's some issues in
Stack Overflow related to

00:15:09.600 --> 00:15:14.750
this, and in the Issue Tracker
on the client API.

00:15:14.750 --> 00:15:18.760
It should, however, still work
with the user ID parameter.

00:15:18.760 --> 00:15:23.370
So basically, the issue that I'm
referring to is by default

00:15:23.370 --> 00:15:27.340
when you do an OAuth request
with the JavaScript client, if

00:15:27.340 --> 00:15:30.230
the user is logged in with
multiple accounts, it's always

00:15:30.230 --> 00:15:32.560
going to default to
the first user.

00:15:32.560 --> 00:15:36.110
However, if you do give it to
the user ID parameter, it

00:15:36.110 --> 00:15:39.320
should pick the correct
user regardless.

00:15:39.320 --> 00:15:41.830
Just at the moment, there's
really no way to force the

00:15:41.830 --> 00:15:43.960
account chooser if you want
to make it an interactive

00:15:43.960 --> 00:15:45.060
experience.

00:15:45.060 --> 00:15:47.600
That is something that we're
aware of, hopefully something

00:15:47.600 --> 00:15:49.660
that will be fixed
not too long.

00:15:49.660 --> 00:15:52.750
But for the purposes of a Drive
app, you should be able

00:15:52.750 --> 00:15:55.790
to do things correctly and
have a good experience.

00:15:55.790 --> 00:16:01.510
And again, hopefully, probably
in the next week or two, maybe

00:16:01.510 --> 00:16:04.400
a little bit longer, we'll have
an updated text editor

00:16:04.400 --> 00:16:08.070
sample that shows how to
do this in JavaScript.

00:16:08.070 --> 00:16:10.190
And then from there, maybe we'll
try some of these other

00:16:10.190 --> 00:16:12.820
experiments with packaged
apps and so on.

00:16:12.820 --> 00:16:15.130
Again, I would love to see
somebody from the community

00:16:15.130 --> 00:16:18.510
try these things and give us
your feedback as to what works

00:16:18.510 --> 00:16:21.210
and what doesn't and if there's
things that we could

00:16:21.210 --> 00:16:23.421
do to make it easier.

00:16:23.421 --> 00:16:27.030
Other than that, that's
all I have on this.

00:16:27.030 --> 00:16:29.330
Again, always check back
in the documentation.

00:16:29.330 --> 00:16:32.680
We'll try to keep
it up to date.

00:16:32.680 --> 00:16:35.250
Look for refreshes of a
lot of our samples.

00:16:35.250 --> 00:16:40.010
In the future there are some
other OAuth-related changes

00:16:40.010 --> 00:16:42.630
that we made, things like the
install scope which we've

00:16:42.630 --> 00:16:46.970
talked about back before the
holidays, things that just

00:16:46.970 --> 00:16:50.910
make it a lot easier for you as
a developer to get your app

00:16:50.910 --> 00:16:52.540
up and running without
having to go

00:16:52.540 --> 00:16:55.120
through a lot of overhead.

00:16:55.120 --> 00:16:57.550
So in the near future, we're
going to update all those

00:16:57.550 --> 00:17:00.920
examples, clean up all the
details that we used to have

00:17:00.920 --> 00:17:03.610
in there about working with the
Chrome Web Store, switch

00:17:03.610 --> 00:17:07.500
over to using the install
scope for Auth, and just

00:17:07.500 --> 00:17:09.869
generally make it a much easier
experience for you as a

00:17:09.869 --> 00:17:13.520
developer to get started
with these APIs.

00:17:13.520 --> 00:17:15.694
So that's all for today.

00:17:15.694 --> 00:17:18.040
I'm not sure what our next
topic is going to be, but

00:17:18.040 --> 00:17:20.849
check back on the Google
Developers Live site.

00:17:20.849 --> 00:17:23.900
We'll be back on Friday.

00:17:23.900 --> 00:17:26.810
Our new normal times are, I
believe, Tuesdays and Fridays.

00:17:26.810 --> 00:17:31.370
And look for either Ali or
Claudio to be here next time.

00:17:31.370 --> 00:17:32.590
So thank you, everyone.

00:17:32.590 --> 00:17:34.350
And we'll probably see
you next week.

00:17:41.550 --> 00:17:58.467
[MUSIC PLAYING]

