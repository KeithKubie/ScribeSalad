WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.500
[MUSIC PLAYING]

00:00:07.301 --> 00:00:08.050
JINGYU SHI: Hello.

00:00:08.050 --> 00:00:09.520
Good morning, everyone.

00:00:09.520 --> 00:00:13.140
Welcome to Improving Battery
Life with Restrictions.

00:00:13.140 --> 00:00:14.490
My name is Jingyu.

00:00:14.490 --> 00:00:17.580
I'm a developer advocate
from the Partner DevRel team.

00:00:17.580 --> 00:00:18.930
AMITH YAMASANI: Hi, I'm Amith.

00:00:18.930 --> 00:00:22.840
I'm a software engineer on
the Android Framework team.

00:00:22.840 --> 00:00:25.730
JINGYU SHI: So today, we want
to start with this notification

00:00:25.730 --> 00:00:28.190
that we've all
received, hopefully

00:00:28.190 --> 00:00:32.000
never around this
time of the day.

00:00:32.000 --> 00:00:34.160
Knowing that our
battery is running out

00:00:34.160 --> 00:00:37.820
can be really frustrating
and sometimes scary,

00:00:37.820 --> 00:00:41.480
depending on where we are and
what we're doing at that time.

00:00:41.480 --> 00:00:46.280
These days, we rely so much
on our devices for navigation,

00:00:46.280 --> 00:00:47.840
talking to our
friends and family,

00:00:47.840 --> 00:00:50.930
taking pictures, and even
translating for us when we're

00:00:50.930 --> 00:00:54.000
traveling in a foreign country.

00:00:54.000 --> 00:00:58.070
But all these cool features
and amazing apps that you built

00:00:58.070 --> 00:01:02.210
cannot help the user if
their battery is dead.

00:01:02.210 --> 00:01:03.830
So that's why
today, we're talking

00:01:03.830 --> 00:01:07.330
about how we're going to
improve battery with your help,

00:01:07.330 --> 00:01:10.580
hopefully, and this is
what we are going to cover.

00:01:10.580 --> 00:01:13.580
First, we'll talk about
what's consuming power

00:01:13.580 --> 00:01:15.950
and how we measure
power consumption.

00:01:15.950 --> 00:01:19.190
And then we're going to go
through the power saving

00:01:19.190 --> 00:01:21.860
features we introduced
in recent years.

00:01:21.860 --> 00:01:24.290
And in the end, we're
going to talk about

00:01:24.290 --> 00:01:27.200
how your app will be affected
by these restrictions,

00:01:27.200 --> 00:01:29.750
and what you can do
to work with them.

00:01:29.750 --> 00:01:32.300
Next, I'll pass it
over to Amith to talk

00:01:32.300 --> 00:01:34.940
about what's consuming power.

00:01:34.940 --> 00:01:35.930
AMITH YAMASANI: Hi.

00:01:35.930 --> 00:01:38.120
Quickly walk through
how we actually

00:01:38.120 --> 00:01:41.040
estimate how an app consumes
power, how much power

00:01:41.040 --> 00:01:43.620
it's consuming on the device.

00:01:43.620 --> 00:01:46.580
These are the typical
hardware components

00:01:46.580 --> 00:01:50.300
that are consuming power
on a typical phone.

00:01:50.300 --> 00:01:52.620
I've highlighted some
of the top consumers.

00:01:52.620 --> 00:01:55.700
You got an earful about
display and how much power that

00:01:55.700 --> 00:01:58.310
consumes from Chris and Alan.

00:01:58.310 --> 00:02:00.380
Running the CPU at
high frequencies

00:02:00.380 --> 00:02:05.110
is also pretty expensive,
and transferring data

00:02:05.110 --> 00:02:09.789
over the cell network is
quite expensive as well.

00:02:09.789 --> 00:02:13.640
So when each device
is manufactured,

00:02:13.640 --> 00:02:17.360
the OEM provides something
called a power profile.

00:02:17.360 --> 00:02:21.080
What the power profile
contains is the average current

00:02:21.080 --> 00:02:23.120
drawn by various
subsystems that we

00:02:23.120 --> 00:02:26.030
want to measure in real time.

00:02:26.030 --> 00:02:30.380
And for example, if
you turn the screen

00:02:30.380 --> 00:02:33.920
on at minimum brightness, it
might be about 100 milliamps,

00:02:33.920 --> 00:02:36.170
and if you crank it
up to full brightness,

00:02:36.170 --> 00:02:38.030
depending on the
technology, let's say

00:02:38.030 --> 00:02:40.070
it adds another 300 milliamps.

00:02:40.070 --> 00:02:44.051
So we keep track of
that in real time.

00:02:44.051 --> 00:02:47.100
CPU at different frequencies
has different power consumption,

00:02:47.100 --> 00:02:48.970
so we add that in the
power profile as well.

00:02:52.350 --> 00:02:54.870
At runtime, what
we do is, there's

00:02:54.870 --> 00:02:56.940
a subsystem called
battery stats.

00:02:56.940 --> 00:03:00.780
It tracks what
each app is doing.

00:03:00.780 --> 00:03:02.790
It measures how
long it's consuming

00:03:02.790 --> 00:03:05.700
each of these resources,
like how much CPU time,

00:03:05.700 --> 00:03:08.820
at what frequency, how many
data packets it's transferring,

00:03:08.820 --> 00:03:10.260
and so on.

00:03:10.260 --> 00:03:11.670
We take those
values, and then we

00:03:11.670 --> 00:03:14.070
multiply with the
power cost for each

00:03:14.070 --> 00:03:16.560
of those in the power profile.

00:03:16.560 --> 00:03:19.110
And we get an
approximate estimate

00:03:19.110 --> 00:03:23.670
of how many milliamp hours the
particular app has drained.

00:03:23.670 --> 00:03:25.440
And then we rank all
the different apps

00:03:25.440 --> 00:03:28.470
based on their consumption,
present it to the user

00:03:28.470 --> 00:03:29.850
so they can see
that in settings,

00:03:29.850 --> 00:03:31.920
and then they can learn
for themselves what's

00:03:31.920 --> 00:03:35.280
really draining their battery.

00:03:35.280 --> 00:03:39.030
So let's talk about how the
OS is trying to help the user

00:03:39.030 --> 00:03:40.240
extend their battery life.

00:03:42.820 --> 00:03:44.360
But first, broadly
speaking, there

00:03:44.360 --> 00:03:46.030
are two reasons why an app runs.

00:03:46.030 --> 00:03:46.550
Right?

00:03:46.550 --> 00:03:48.140
The user's launching it.

00:03:48.140 --> 00:03:50.270
It's running in the foreground.

00:03:50.270 --> 00:03:52.410
User's actively using the app.

00:03:52.410 --> 00:03:55.760
Now as developers,
that's something

00:03:55.760 --> 00:03:58.730
you don't want
them to not do, but

00:03:58.730 --> 00:04:01.070
that's a whole different
topic about digital well-being

00:04:01.070 --> 00:04:04.340
and trying to help users
control how much time they

00:04:04.340 --> 00:04:05.614
spend on apps.

00:04:05.614 --> 00:04:08.030
But one note I want to leave
about that here because we're

00:04:08.030 --> 00:04:09.680
not going to talk
too much about it

00:04:09.680 --> 00:04:13.219
is there is a concept
about suspending apps.

00:04:13.219 --> 00:04:15.260
And that's something you
might want to read about

00:04:15.260 --> 00:04:18.380
and how that impacts your app
if the user suspends the app

00:04:18.380 --> 00:04:21.130
for, say, the rest of the day.

00:04:21.130 --> 00:04:24.050
But we'll focus on how we
try to limit background

00:04:24.050 --> 00:04:26.480
activity from an app.

00:04:26.480 --> 00:04:30.980
And app can schedule background
work by using jobs or alarms

00:04:30.980 --> 00:04:34.060
or setting up a
background service.

00:04:34.060 --> 00:04:36.260
It can also register
for callbacks

00:04:36.260 --> 00:04:40.220
for external triggers, such
as a push message or you

00:04:40.220 --> 00:04:43.955
walking past a geofence.

00:04:43.955 --> 00:04:47.500
So over the years, we've
introduced several features

00:04:47.500 --> 00:04:49.700
in the OS to save battery.

00:04:49.700 --> 00:04:53.540
First in Marshmallow, we
introduced Doze or Deep Doze.

00:04:53.540 --> 00:04:55.480
As the name suggests,
it puts the device

00:04:55.480 --> 00:04:58.000
into a really deep sleep
under the condition

00:04:58.000 --> 00:04:59.390
that the device is not moving.

00:04:59.390 --> 00:05:02.050
So let's say you left it on
your desk or on your nightstand,

00:05:02.050 --> 00:05:03.760
you forgot to plug it in.

00:05:03.760 --> 00:05:07.060
It basically shuts down a lot
of the background activity

00:05:07.060 --> 00:05:11.010
so that you can really
extend your battery life.

00:05:11.010 --> 00:05:13.830
But this is not really how
we use our daily phones.

00:05:13.830 --> 00:05:14.330
Right?

00:05:14.330 --> 00:05:15.610
We are walking around with it.

00:05:15.610 --> 00:05:17.080
We're using it
throughout the day.

00:05:17.080 --> 00:05:20.700
So we came up with Doze
on-the-go or Light Doze.

00:05:20.700 --> 00:05:23.370
What that does is it puts the
device into a slightly lighter

00:05:23.370 --> 00:05:25.770
sleep and wakes
up more frequently

00:05:25.770 --> 00:05:29.040
so that it has an opportunity to
see if there's any pending work

00:05:29.040 --> 00:05:32.470
to do so that your data
is reasonably fresh.

00:05:32.470 --> 00:05:34.620
But it's not in front of you.

00:05:34.620 --> 00:05:37.110
You're not using the
screen, so it can shut down

00:05:37.110 --> 00:05:40.070
some of the background work.

00:05:40.070 --> 00:05:43.200
You're probably all familiar
with the Oreo restrictions

00:05:43.200 --> 00:05:45.870
on background
services as well as

00:05:45.870 --> 00:05:48.000
limiting the number
of implicit broadcasts

00:05:48.000 --> 00:05:51.096
that you can wake up to.

00:05:51.096 --> 00:05:53.190
And as of this
month, everyone needs

00:05:53.190 --> 00:05:57.120
to target Android Oreo or
above because otherwise,

00:05:57.120 --> 00:06:00.020
you can't publish
to the Play Store.

00:06:00.020 --> 00:06:04.790
But we'll focus more on what's
new in P, Adaptive Battery, app

00:06:04.790 --> 00:06:06.950
restrictions or
background restrictions,

00:06:06.950 --> 00:06:11.650
and we've also made some
improvements to Battery Saver.

00:06:11.650 --> 00:06:14.680
Adaptive Battery is
actually an evolution

00:06:14.680 --> 00:06:17.500
of App Standby that
was introduced back

00:06:17.500 --> 00:06:19.450
in Marshmallow along with Doze.

00:06:19.450 --> 00:06:21.400
What App Standby
did was put apps

00:06:21.400 --> 00:06:27.020
into two possible states, active
or inactive, based on usage.

00:06:27.020 --> 00:06:29.510
Adaptive Battery extends
this into four buckets

00:06:29.510 --> 00:06:32.740
now, where active is
the least restricted.

00:06:32.740 --> 00:06:36.190
And based on usage, we move it
into some of the other buckets,

00:06:36.190 --> 00:06:38.290
and rare is the most restricted.

00:06:38.290 --> 00:06:40.390
For instance, if
you are Google I/O

00:06:40.390 --> 00:06:42.257
and you install the
I/O app, by now,

00:06:42.257 --> 00:06:43.840
it should have gone
to the rare bucket

00:06:43.840 --> 00:06:45.256
because you haven't
been using it.

00:06:48.467 --> 00:06:52.710
So how does the OS assign
these buckets to each app?

00:06:52.710 --> 00:06:55.020
It starts off when
you're installing

00:06:55.020 --> 00:06:56.280
the app in a never bucket.

00:06:56.280 --> 00:06:57.220
It's not shown here.

00:06:57.220 --> 00:06:59.320
It's really not that relevant.

00:06:59.320 --> 00:07:01.170
But once you launch
the app or every time

00:07:01.170 --> 00:07:04.110
you launch the app or any
kind of strong interaction

00:07:04.110 --> 00:07:06.400
like clicking on a
notification from the app,

00:07:06.400 --> 00:07:08.390
the app goes into
the active bucket.

00:07:08.390 --> 00:07:11.970
And it stays there for a while,
and maybe in a few hours,

00:07:11.970 --> 00:07:13.770
it comes down to the
working set where

00:07:13.770 --> 00:07:15.810
it starts applying
restrictions on what

00:07:15.810 --> 00:07:17.310
you can do in the background.

00:07:17.310 --> 00:07:21.180
And then a little later, most
frequent and then to rare.

00:07:21.180 --> 00:07:23.216
And then we uninstall your app.

00:07:23.216 --> 00:07:24.202
I'm just kidding.

00:07:24.202 --> 00:07:24.910
We don't do that.

00:07:24.910 --> 00:07:26.600
[LAUGHTER]

00:07:26.600 --> 00:07:29.050
And if there is some kind
of an indirect interaction,

00:07:29.050 --> 00:07:31.300
such as you're looking
at a notification

00:07:31.300 --> 00:07:34.840
by pulling down the shade,
it's not a clear indication

00:07:34.840 --> 00:07:37.060
that it's an active
usage of the app.

00:07:37.060 --> 00:07:39.250
So we put it in a
slightly restricted state,

00:07:39.250 --> 00:07:42.140
which is the working set.

00:07:42.140 --> 00:07:44.050
What is actually
adaptive about this

00:07:44.050 --> 00:07:46.480
is if the device happens
to have a machine learning

00:07:46.480 --> 00:07:50.950
algorithm, what it does is it
watches your usage patterns,

00:07:50.950 --> 00:07:54.700
learns over time, and
then it decides, OK,

00:07:54.700 --> 00:07:56.380
this app is probably
going to be used

00:07:56.380 --> 00:07:57.950
in the next couple of hours.

00:07:57.950 --> 00:08:00.940
Let me put it in the
active set, and maybe it

00:08:00.940 --> 00:08:02.490
can freshen up its data.

00:08:02.490 --> 00:08:06.270
Maybe it needs to download
the latest news or whatever.

00:08:06.270 --> 00:08:08.294
And once it feels that
maybe the app is not

00:08:08.294 --> 00:08:10.210
going to be used for a
while, it might move it

00:08:10.210 --> 00:08:11.680
into one of the lower buckets.

00:08:11.680 --> 00:08:15.250
So this actually really
improves our ability

00:08:15.250 --> 00:08:18.830
to reduce the amount of work
that apps do in the background.

00:08:18.830 --> 00:08:20.380
And it's not your
fault. It's just

00:08:20.380 --> 00:08:23.380
you don't know when the
user is going to launch you,

00:08:23.380 --> 00:08:26.785
so we're trying
to help with that.

00:08:26.785 --> 00:08:28.670
App restrictions
is another feature,

00:08:28.670 --> 00:08:32.150
which is kind of an extreme
version of background limits.

00:08:32.150 --> 00:08:35.610
We really limit what the app
can do in the background.

00:08:35.610 --> 00:08:37.490
So it's mostly meant
for apps that you just

00:08:37.490 --> 00:08:40.969
want to be doing work
in the foreground.

00:08:40.969 --> 00:08:43.789
There are two ways the
app can go into the state.

00:08:43.789 --> 00:08:46.310
The user might see in
settings that your app

00:08:46.310 --> 00:08:50.180
is draining battery and decides
to manually restrict the app.

00:08:50.180 --> 00:08:54.290
The other way is the system
is monitoring certain criteria

00:08:54.290 --> 00:08:56.480
about how the app is
behaving, and if it

00:08:56.480 --> 00:08:59.510
feels that it's doing anything
excessive over certain

00:08:59.510 --> 00:09:02.880
thresholds that we set,
it suggests to the user,

00:09:02.880 --> 00:09:05.380
hey, do you want to restrict
this app because it is draining

00:09:05.380 --> 00:09:07.000
your battery in the background.

00:09:07.000 --> 00:09:08.750
These are things that
we will improve over

00:09:08.750 --> 00:09:11.420
time, the kind of criteria
and the thresholds.

00:09:11.420 --> 00:09:15.930
And OEMs are also free to
add their own criteria.

00:09:15.930 --> 00:09:20.640
So what is restricted if an
app is background restricted?

00:09:20.640 --> 00:09:24.160
The usual jobs, alarms,
foreground services.

00:09:24.160 --> 00:09:26.210
You can't run a
foreground service

00:09:26.210 --> 00:09:27.970
if your app is in
a restricted state

00:09:27.970 --> 00:09:30.160
because as far as the
user is concerned,

00:09:30.160 --> 00:09:31.870
it is still kind of
a background thing

00:09:31.870 --> 00:09:35.290
if you see something
happening with a notification

00:09:35.290 --> 00:09:37.840
and it's doing work
in the background.

00:09:37.840 --> 00:09:42.470
FCM, as of January, will
be restricted as well.

00:09:42.470 --> 00:09:45.670
So you won't get any
messages when your app

00:09:45.670 --> 00:09:46.930
is in the restricted state.

00:09:46.930 --> 00:09:49.030
You also don't get
location updates.

00:09:49.030 --> 00:09:51.280
And one thing that's unique
about app restrictions

00:09:51.280 --> 00:09:54.160
is, even while the
device is charging,

00:09:54.160 --> 00:09:56.170
we don't let you run
in the background.

00:09:56.170 --> 00:09:59.230
This is not true for any
of the other restrictions.

00:09:59.230 --> 00:10:02.080
And the reason is this is not
just about saving battery.

00:10:02.080 --> 00:10:05.515
It's also about annoyances
and maybe privacy concerns.

00:10:08.040 --> 00:10:11.340
Battery Saver was
improved in Pie as well.

00:10:11.340 --> 00:10:13.890
It's very similar to how
app restrictions work,

00:10:13.890 --> 00:10:16.590
but it applies it
across all the apps.

00:10:16.590 --> 00:10:19.020
Some of the differences
are foreground services

00:10:19.020 --> 00:10:21.652
are OK to run while
in Battery Saver

00:10:21.652 --> 00:10:23.610
because you might want
to be listening to music

00:10:23.610 --> 00:10:25.320
while on Battery Saver.

00:10:25.320 --> 00:10:27.960
There are no restrictions
on push messages.

00:10:27.960 --> 00:10:33.040
Network is restricted, jobs
and alarms, the usual ones.

00:10:33.040 --> 00:10:35.070
And one thing
that's new in Pie is

00:10:35.070 --> 00:10:37.860
we turn off location
services completely,

00:10:37.860 --> 00:10:39.450
at least on Pixel devices.

00:10:39.450 --> 00:10:43.800
OEMs might not
choose to do that.

00:10:43.800 --> 00:10:45.600
So we have some
APIs that you can

00:10:45.600 --> 00:10:50.040
use to detect which state you
are in, which restricted state.

00:10:50.040 --> 00:10:51.750
For example, you
can ask usage stats

00:10:51.750 --> 00:10:54.870
what is your current standby
bucket at this moment.

00:10:54.870 --> 00:10:56.760
But if you want to
debug something or want

00:10:56.760 --> 00:10:59.610
to know how frequently
you're in some rare bucket,

00:10:59.610 --> 00:11:01.380
you can also get
historical information

00:11:01.380 --> 00:11:03.724
about your standby
bucket changes.

00:11:03.724 --> 00:11:05.390
You can also check
if you are background

00:11:05.390 --> 00:11:06.420
unrestricted right now.

00:11:06.420 --> 00:11:09.610
And maybe you want to tell
the user something about that

00:11:09.610 --> 00:11:13.110
or maybe your critical
services will not work.

00:11:13.110 --> 00:11:14.730
But please don't nag the user.

00:11:14.730 --> 00:11:17.600
If they don't want you to run,
they don't want you to run.

00:11:17.600 --> 00:11:20.730
And you can also check
if Battery Saver's on.

00:11:20.730 --> 00:11:23.520
Internally, it's called
Power Saver Mode.

00:11:23.520 --> 00:11:25.465
Hand it back to Jingyu.

00:11:25.465 --> 00:11:27.780
JINGYU SHI: Thank you, Amith.

00:11:27.780 --> 00:11:32.830
So how is your app affected?

00:11:32.830 --> 00:11:35.880
So anytime, to the
system, your app

00:11:35.880 --> 00:11:37.830
will be in one of
these two states.

00:11:37.830 --> 00:11:43.320
It will be either in the
foreground or the background.

00:11:43.320 --> 00:11:46.500
And whenever your app is
considered to be in foreground,

00:11:46.500 --> 00:11:48.390
all these restrictions
are lifted so you

00:11:48.390 --> 00:11:50.820
can run whenever you need to.

00:11:50.820 --> 00:11:52.740
But when your app
is in background

00:11:52.740 --> 00:11:57.030
and the device is not charging,
all of the Battery Saver

00:11:57.030 --> 00:12:00.270
features that Amith just
talked about, any of them

00:12:00.270 --> 00:12:04.500
could be enabled, which
means that your jobs, alarms,

00:12:04.500 --> 00:12:08.090
network access, and FCM
messages could be restricted.

00:12:08.090 --> 00:12:10.830
And next, we have some
really beautiful diagrams,

00:12:10.830 --> 00:12:14.320
which will show you
how they are affected.

00:12:14.320 --> 00:12:18.568
First, let's look at
the scheduled jobs.

00:12:18.568 --> 00:12:21.630
Given that all the constraints
you have on the job

00:12:21.630 --> 00:12:24.920
is satisfied, these
are the features,

00:12:24.920 --> 00:12:28.160
which will affect when
this job will get run.

00:12:28.160 --> 00:12:30.440
First, let's look
at the device level.

00:12:30.440 --> 00:12:33.140
If the device is in
Doze, then your job

00:12:33.140 --> 00:12:35.390
will be deferred to
maintenance window.

00:12:35.390 --> 00:12:38.740
And then if user decide to
turn on Battery Saver or app

00:12:38.740 --> 00:12:41.870
restrictions, meaning restrict
your app from their battery

00:12:41.870 --> 00:12:44.680
setting, your job
will be deferred

00:12:44.680 --> 00:12:49.370
until user opens the app or
when the app is in foreground.

00:12:49.370 --> 00:12:51.930
And if none of those
are true, then it's

00:12:51.930 --> 00:12:57.320
up to App Standby Bucket or
Adaptive Battery in Pixel.

00:12:57.320 --> 00:13:00.660
Your job could be
deferred up to 24 hours.

00:13:00.660 --> 00:13:03.470
That's when your app
belongs to the rare bucket.

00:13:03.470 --> 00:13:06.350
And that's the worst case,
which means that even

00:13:06.350 --> 00:13:09.270
in the worst case, your job
will still get run every day.

00:13:12.054 --> 00:13:15.630
So similarly, for
AlarmManager alarms,

00:13:15.630 --> 00:13:19.696
these features will affect
when your alarms fire.

00:13:19.696 --> 00:13:22.170
When device is in
Doze, your alarm

00:13:22.170 --> 00:13:24.370
will be deferred to
maintenance window.

00:13:24.370 --> 00:13:26.370
And if the user turn
on Battery Saver

00:13:26.370 --> 00:13:28.350
or they restrict
your app, your alarm

00:13:28.350 --> 00:13:33.220
will be deferred until
your app is in foreground.

00:13:33.220 --> 00:13:36.490
And finally, onto the
App Standby Bucket,

00:13:36.490 --> 00:13:40.570
your alarm could be
delayed up to two hours

00:13:40.570 --> 00:13:45.210
if your app belongs
to that rare bucket.

00:13:45.210 --> 00:13:48.790
So if your use case really
requires that exact time

00:13:48.790 --> 00:13:53.920
execution, for example if
you want to remind the user

00:13:53.920 --> 00:13:56.860
they need to take
medicine or a TV program

00:13:56.860 --> 00:13:59.260
that they subscribe
to is about to start,

00:13:59.260 --> 00:14:04.570
so for these use cases, you can
use this site while idle method

00:14:04.570 --> 00:14:08.440
that we provided so your
alarm will fire on time.

00:14:08.440 --> 00:14:12.550
But when you are using
AlarmManager to wake

00:14:12.550 --> 00:14:14.490
up the device frequently--

00:14:14.490 --> 00:14:16.810
and imagine that if
every app is doing

00:14:16.810 --> 00:14:18.280
that at a different time--

00:14:18.280 --> 00:14:20.350
then you are draining
a lot of battery.

00:14:20.350 --> 00:14:23.770
That's why we have the excessive
wakeup on your Android vitals

00:14:23.770 --> 00:14:24.490
page.

00:14:24.490 --> 00:14:27.760
So if you see your excessive
wakeup on vitals page

00:14:27.760 --> 00:14:30.760
is caused by AlarmManager,
I would highly

00:14:30.760 --> 00:14:32.740
recommend that you
think about, maybe

00:14:32.740 --> 00:14:35.650
it's time for you to
migrate to some other APIs

00:14:35.650 --> 00:14:36.700
like JobScheduler.

00:14:39.562 --> 00:14:43.120
If you are sending
push notifications,

00:14:43.120 --> 00:14:46.060
you are probably already using
Firebase Cloud Messaging.

00:14:46.060 --> 00:14:50.750
And similarly, your FCM
messages will also be affected.

00:14:50.750 --> 00:14:54.180
When the device is in Doze,
your normal priority messages

00:14:54.180 --> 00:14:56.910
will be deferred to the
maintenance window, which

00:14:56.910 --> 00:14:59.490
means that if you're sending
high priority message,

00:14:59.490 --> 00:15:02.160
that message will be
delivered immediately.

00:15:02.160 --> 00:15:05.190
This is because high
priority FCM message,

00:15:05.190 --> 00:15:07.920
they are created to
trigger action that's

00:15:07.920 --> 00:15:11.130
visible to the user like
sending a notification so user

00:15:11.130 --> 00:15:13.160
can act on it.

00:15:13.160 --> 00:15:17.140
And if the user turn on
Battery Saver, then still,

00:15:17.140 --> 00:15:21.500
your messages will be
delivered as it is.

00:15:21.500 --> 00:15:25.050
As Amith mentioned earlier,
if the user restricted

00:15:25.050 --> 00:15:29.920
your app, currently, the
messages are still delivered.

00:15:29.920 --> 00:15:34.570
But as of January next year
2019, all these messages

00:15:34.570 --> 00:15:36.130
will be discarded
because this is

00:15:36.130 --> 00:15:37.930
a strong signal from
the user that they

00:15:37.930 --> 00:15:40.760
want to restrict the app.

00:15:40.760 --> 00:15:43.840
And finally, in the
App Standby Bucket,

00:15:43.840 --> 00:15:47.270
there's a different
cap on each bucket

00:15:47.270 --> 00:15:49.100
that your app could belong to.

00:15:49.100 --> 00:15:52.670
The more active the bucket is,
the more high priority message

00:15:52.670 --> 00:15:53.450
you can send.

00:15:56.845 --> 00:15:59.700
But if you reach that
quota, don't worry.

00:15:59.700 --> 00:16:01.800
We're not discarding
your message.

00:16:01.800 --> 00:16:04.290
We're just downgrading them
to normal priority, which

00:16:04.290 --> 00:16:06.960
means that they could be
delayed a little bit when

00:16:06.960 --> 00:16:08.970
device is in Doze.

00:16:08.970 --> 00:16:11.490
So if you really want
to reach your user

00:16:11.490 --> 00:16:14.460
with that important message,
don't use high priority

00:16:14.460 --> 00:16:17.670
for operations that don't
require user interaction.

00:16:17.670 --> 00:16:19.400
Whenever you're
sending high priority,

00:16:19.400 --> 00:16:21.900
it should trigger a
notification or something

00:16:21.900 --> 00:16:24.730
user can interact with.

00:16:24.730 --> 00:16:28.020
OK, here's a summary of
the power saving features

00:16:28.020 --> 00:16:30.790
that we talked today.

00:16:30.790 --> 00:16:34.590
One thing to note is that all
of these features we see here,

00:16:34.590 --> 00:16:36.720
they will apply
on any app that's

00:16:36.720 --> 00:16:39.360
running on Android 9
device no matter which

00:16:39.360 --> 00:16:42.870
target SDK you are targeting.

00:16:42.870 --> 00:16:46.770
So our first advice to you
is, please test your app

00:16:46.770 --> 00:16:48.390
against all of these features.

00:16:48.390 --> 00:16:51.250
We have adb command
on the developer dock

00:16:51.250 --> 00:16:54.300
you can use to put your app
in all of these features

00:16:54.300 --> 00:16:58.020
and test your use cases to see
if your push notifications are

00:16:58.020 --> 00:16:58.980
coming through.

00:16:58.980 --> 00:17:03.170
If your job is running, are
you handling that case well?

00:17:03.170 --> 00:17:06.910
The good news is except for
the high party FCM message

00:17:06.910 --> 00:17:09.730
restriction that
I just mentioned,

00:17:09.730 --> 00:17:12.710
actually none of the
other restrictions is new.

00:17:12.710 --> 00:17:14.420
We had them since Doze.

00:17:14.420 --> 00:17:17.319
So if your app works
well under Doze,

00:17:17.319 --> 00:17:19.480
it's very likely
that you don't need

00:17:19.480 --> 00:17:23.839
to change much to work
with these features.

00:17:23.839 --> 00:17:26.310
Our second advice
to you is, whenever

00:17:26.310 --> 00:17:28.240
you're running task
in the background,

00:17:28.240 --> 00:17:33.960
please keep in mind to use this
lazy first design principle.

00:17:33.960 --> 00:17:36.590
Try to reduce the work you're
running in the background.

00:17:36.590 --> 00:17:39.160
Think about, do I really need
to run in the background.

00:17:39.160 --> 00:17:41.780
Can this wait until my
app is in foreground?

00:17:41.780 --> 00:17:44.990
And think about, do I need
to run with this frequency.

00:17:44.990 --> 00:17:48.180
Maybe reduce some work I
am doing in the background.

00:17:48.180 --> 00:17:50.180
And if you really need
to run in the background,

00:17:50.180 --> 00:17:52.760
try to defer that
work to a later time,

00:17:52.760 --> 00:17:55.460
say, when device is
plugged in or think

00:17:55.460 --> 00:17:57.110
about that exact alarm.

00:17:57.110 --> 00:17:59.360
Does it have to happen
at that exact time?

00:17:59.360 --> 00:18:01.710
Can it wait?

00:18:01.710 --> 00:18:06.310
And finally, try to coalesce the
work you do in the background.

00:18:06.310 --> 00:18:09.090
So in Lollipop, we
introduced JobScheduler,

00:18:09.090 --> 00:18:13.050
which is a way for you to help
the system to intelligently

00:18:13.050 --> 00:18:15.120
batch all the background work.

00:18:15.120 --> 00:18:17.400
And this year, we
introduced the WorkManager

00:18:17.400 --> 00:18:20.970
in Jetpack, which makes
running background work easier.

00:18:20.970 --> 00:18:25.710
And when it hits stable, it
will be the recommended way

00:18:25.710 --> 00:18:27.430
to do background work.

00:18:27.430 --> 00:18:33.180
So with that in mind, let's
look at this upgraded view

00:18:33.180 --> 00:18:36.040
of how you do things
in the background.

00:18:38.550 --> 00:18:41.460
If you need to
execute a work or do

00:18:41.460 --> 00:18:44.170
a sync that's
deferrable locally,

00:18:44.170 --> 00:18:48.150
then WorkManager is your answer.

00:18:48.150 --> 00:18:50.580
If this work is
triggered online,

00:18:50.580 --> 00:18:54.580
then you would use a FCM
message with WorkManager,

00:18:54.580 --> 00:18:56.910
meaning you would want
to use FCM message

00:18:56.910 --> 00:19:00.150
to notify your app that there
is some work you need to do

00:19:00.150 --> 00:19:02.190
or you need to sync
with the app server.

00:19:02.190 --> 00:19:06.030
And then in the message
handler, you enqueue that work.

00:19:06.030 --> 00:19:10.680
If your user case doesn't fit
with either of these cases

00:19:10.680 --> 00:19:13.860
and you need to run
something at that exact time,

00:19:13.860 --> 00:19:17.604
then you would want
to use AlarmManager.

00:19:17.604 --> 00:19:22.060
Finally, if this is something
that the user started,

00:19:22.060 --> 00:19:25.900
user is aware that it's running
and it must happen immediately

00:19:25.900 --> 00:19:28.920
right now, then you would
use foreground service.

00:19:28.920 --> 00:19:32.380
But please whenever you're
using this foreground service,

00:19:32.380 --> 00:19:35.110
add that action in the
notification because there is

00:19:35.110 --> 00:19:38.350
nothing more frustrating than
seeing a bunch of notifications

00:19:38.350 --> 00:19:40.900
but there's nothing I can do
about them because foreground

00:19:40.900 --> 00:19:43.460
service notification,
you cannot dismiss them.

00:19:43.460 --> 00:19:46.360
So please add that action
in a notification for user

00:19:46.360 --> 00:19:47.670
to stop this service.

00:19:47.670 --> 00:19:50.120
And then notification
is dismissed.

00:19:50.120 --> 00:19:54.360
And if you reach the end, I
would say, go back to the top

00:19:54.360 --> 00:19:58.900
or you should wait until
your app is in foreground.

00:19:58.900 --> 00:20:02.710
So we have a WorkManager
talk later today at 1:00 PM.

00:20:02.710 --> 00:20:05.770
Please go to that to learn
how you can use WorkManager

00:20:05.770 --> 00:20:07.720
to do background work.

00:20:07.720 --> 00:20:11.650
And we also have a
lot of best practices

00:20:11.650 --> 00:20:15.940
and guidance on how you can
to help users save battery

00:20:15.940 --> 00:20:17.960
in this power block series.

00:20:17.960 --> 00:20:22.450
Please visit to learn more, and
we will be in the office hours

00:20:22.450 --> 00:20:24.910
this afternoon
for any questions.

00:20:24.910 --> 00:20:25.810
Thank you.

00:20:25.810 --> 00:20:28.560
[MUSIC PLAYING]

