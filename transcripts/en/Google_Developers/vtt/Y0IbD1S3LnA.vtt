WEBVTT
Kind: captions
Language: en

00:00:06.745 --> 00:00:08.370
LAURENCE MORONEY:
Hi, and welcome again

00:00:08.370 --> 00:00:10.290
to Geocasts, where
we'll teach you

00:00:10.290 --> 00:00:13.800
all about using Google
Maps to build better apps.

00:00:13.800 --> 00:00:15.420
I'm Laurence, and
in this video, I'm

00:00:15.420 --> 00:00:19.200
going to talk all about building
an interactive experience using

00:00:19.200 --> 00:00:20.910
the Places API.

00:00:20.910 --> 00:00:25.380
It's a simple game where you can
define three real-world places

00:00:25.380 --> 00:00:27.690
and then have your
users go to them as part

00:00:27.690 --> 00:00:31.020
of the overall narrative
of saving Alyssa here

00:00:31.020 --> 00:00:35.010
from being trapped in
a parallel dimension.

00:00:35.010 --> 00:00:38.400
In part one of this tutorial,
we identified and stored

00:00:38.400 --> 00:00:41.970
three places using the
Places API, Firebase,

00:00:41.970 --> 00:00:43.920
and some unique game codes.

00:00:43.920 --> 00:00:45.720
So the next thing
to talk about is

00:00:45.720 --> 00:00:49.320
how to use the Places API
to see if your user is

00:00:49.320 --> 00:00:51.930
at the right place, so
that they can unlock

00:00:51.930 --> 00:00:54.210
the next part of the story.

00:00:54.210 --> 00:00:57.300
The Places API is designed
to make your apps stand

00:00:57.300 --> 00:01:01.740
out with detailed information
about over 100 million places

00:01:01.740 --> 00:01:05.000
around the world across a
wide range of categories.

00:01:05.000 --> 00:01:08.160
And it uses the same
database as Google Maps.

00:01:08.160 --> 00:01:11.640
We used this information in
part one of the tutorial.

00:01:11.640 --> 00:01:13.770
But not only that,
the Places API

00:01:13.770 --> 00:01:16.320
has location
detection, giving you

00:01:16.320 --> 00:01:19.920
the ability to tell if you
are in the right place.

00:01:19.920 --> 00:01:21.570
ALYSSA: That makes it easier.

00:01:21.570 --> 00:01:25.320
I can just tell you to go to
a specific place, like, say,

00:01:25.320 --> 00:01:26.910
the Seattle Space
Needle, instead

00:01:26.910 --> 00:01:29.940
of dealing with latitude
and longitude or addresses.

00:01:29.940 --> 00:01:32.370
LAURENCE MORONEY: That's
right, and the Places API can

00:01:32.370 --> 00:01:34.740
detect if the user is there.

00:01:34.740 --> 00:01:36.847
ALYSSA: Well, of course
I'm there, silly!

00:01:36.847 --> 00:01:38.430
LAURENCE MORONEY:
So let's take a look

00:01:38.430 --> 00:01:41.580
at how you would build
the app to scan and detect

00:01:41.580 --> 00:01:42.780
where you are.

00:01:42.780 --> 00:01:44.250
ALYSSA: OK, I see
you are scanning

00:01:44.250 --> 00:01:46.180
for the bridge between
our dimensions,

00:01:46.180 --> 00:01:48.224
but you aren't close to it yet.

00:01:52.950 --> 00:01:54.760
LAURENCE MORONEY: In
the previous video,

00:01:54.760 --> 00:01:58.290
we saw how the user can
pick three real-world places

00:01:58.290 --> 00:02:01.170
and save them to a Firebase
database using a code

00:02:01.170 --> 00:02:02.490
to define them.

00:02:02.490 --> 00:02:04.680
So if you want to play
the game, then you

00:02:04.680 --> 00:02:06.300
start it with that
code, and you'll

00:02:06.300 --> 00:02:08.190
be guided through
those three places

00:02:08.190 --> 00:02:09.960
as part of the narrative.

00:02:09.960 --> 00:02:12.030
But of course, the
game needs to know

00:02:12.030 --> 00:02:14.910
if you are at that
place in order to unlock

00:02:14.910 --> 00:02:16.960
the next part of the story.

00:02:16.960 --> 00:02:19.590
So let's take a look at
the code to achieve this.

00:02:19.590 --> 00:02:24.030
It uses the Place Detection
API's GetCurrentPlace call

00:02:24.030 --> 00:02:26.260
to find the current location.

00:02:26.260 --> 00:02:29.490
This requires the Access
Find Location permission

00:02:29.490 --> 00:02:31.230
to be set in your app.

00:02:31.230 --> 00:02:35.010
Remember, you can learn all
about permissions at this link.

00:02:35.010 --> 00:02:37.630
Do note that this is
subject to limits.

00:02:37.630 --> 00:02:40.710
So make sure you don't
call it too often.

00:02:40.710 --> 00:02:44.160
You can learn more about
the usage limits here.

00:02:44.160 --> 00:02:47.340
So, when building an
experience like this one,

00:02:47.340 --> 00:02:50.850
instead of constantly
polling the device location

00:02:50.850 --> 00:02:54.300
and calling the Places API
to get place information,

00:02:54.300 --> 00:02:57.240
it's probably better for
you to do it on demand.

00:02:57.240 --> 00:03:02.110
I.e., in this case Alyssa told
me to go to a specific place.

00:03:02.110 --> 00:03:04.800
So when I think I'm
nearby, I can ping her

00:03:04.800 --> 00:03:08.540
and she can tell me if
I'm close enough or not.

00:03:08.540 --> 00:03:12.230
The call returns a place
likelihood buffer in a pending

00:03:12.230 --> 00:03:14.930
result. A place
likelihood buffer

00:03:14.930 --> 00:03:18.230
is a list of places near
your current location

00:03:18.230 --> 00:03:21.380
and the likelihood that
you are at that place.

00:03:21.380 --> 00:03:24.350
So for example, in
a dense city area,

00:03:24.350 --> 00:03:27.080
there could be two places
next door to each other

00:03:27.080 --> 00:03:30.150
which are recognized
by the Places API.

00:03:30.150 --> 00:03:32.090
And if you're in
between the two,

00:03:32.090 --> 00:03:35.270
the Places API will
return both of them,

00:03:35.270 --> 00:03:37.670
as well as anything else nearby.

00:03:37.670 --> 00:03:41.510
This will come with a likelihood
of which one you're in.

00:03:41.510 --> 00:03:43.940
So all you have to do
is look at this list

00:03:43.940 --> 00:03:47.240
and see if the place you
are looking for is on it,

00:03:47.240 --> 00:03:49.040
and if the likelihood
that you were there

00:03:49.040 --> 00:03:53.630
is above a reasonable
threshold-- say, 60%, or 0.6

00:03:53.630 --> 00:03:54.870
in this case.

00:03:54.870 --> 00:03:57.920
And then you could go on to
the next part of the game.

00:03:57.920 --> 00:04:00.630
It's really that simple.

00:04:00.630 --> 00:04:02.180
ALYSSA: If it were
that simple, I

00:04:02.180 --> 00:04:04.760
wouldn't have been trapped
in this parallel dimension.

00:04:04.760 --> 00:04:07.850
I guess I should have used the
Places API instead of the flux

00:04:07.850 --> 00:04:09.080
capacitor.

00:04:09.080 --> 00:04:10.640
LAURENCE MORONEY: Good idea.

00:04:10.640 --> 00:04:12.110
Thanks for watching
this Geocast,

00:04:12.110 --> 00:04:14.110
and if you want to learn
more about Google Maps,

00:04:14.110 --> 00:04:15.680
check out the Google
Developers site,

00:04:15.680 --> 00:04:18.790
and don't forget to hit
that Subscribe button.

