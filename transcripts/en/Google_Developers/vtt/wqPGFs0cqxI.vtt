WEBVTT
Kind: captions
Language: en

00:00:00.270 --> 00:00:00.900
BRENDAN KENNY: And
it's brought you

00:00:00.900 --> 00:00:03.470
mostly by Mike Bostock.

00:00:03.470 --> 00:00:06.500
And here we can see a
bunch of examples.

00:00:06.500 --> 00:00:08.940
So the great thing about the
d3 is there's just tons and

00:00:08.940 --> 00:00:11.490
tons of examples, all
with code to let you

00:00:11.490 --> 00:00:13.080
know how to do them.

00:00:13.080 --> 00:00:18.660
And a big part of the d3 has
been geoapplications--

00:00:18.660 --> 00:00:23.190
so using geographical data and
doing visualizations with this

00:00:23.190 --> 00:00:25.210
geographical data.

00:00:25.210 --> 00:00:29.430
So for the most part, it seems
like d4 lives separately from

00:00:29.430 --> 00:00:31.320
something like a Maps
application.

00:00:31.320 --> 00:00:35.810
But really all it does is, takes
data and binds it to

00:00:35.810 --> 00:00:38.130
some way of displaying
that data.

00:00:38.130 --> 00:00:43.460
That's kind of the underlying
thesis of d3--

00:00:43.460 --> 00:00:46.680
Data Driven Documents is
what the d3 stands for.

00:00:46.680 --> 00:00:51.530
And so we can take advantage
of that, to use kind of d3

00:00:51.530 --> 00:00:56.470
skill sets and the tools d3
brings, and put it on top of a

00:00:56.470 --> 00:01:00.420
map so that you can put
things in place.

00:01:00.420 --> 00:01:03.950
So we're going to start with a
really simple example, just to

00:01:03.950 --> 00:01:09.150
show how this kind of binding
to the Maps API works.

00:01:09.150 --> 00:01:13.630
So here's a cool example
that's been highlighted

00:01:13.630 --> 00:01:14.980
recently by Mike.

00:01:14.980 --> 00:01:19.760
And it has to do with, well,
scale-dependent sampling as it

00:01:19.760 --> 00:01:20.840
says on screen--

00:01:20.840 --> 00:01:24.690
using the kind of scale of the
thing that you're displaying

00:01:24.690 --> 00:01:28.160
and the amount of precision that
you need to show at that

00:01:28.160 --> 00:01:31.640
scale to re-sample a line so
that you get a smooth curve.

00:01:31.640 --> 00:01:35.170
And you can see here that we
have these control points

00:01:35.170 --> 00:01:36.790
multiply as you zoom
in so you get a

00:01:36.790 --> 00:01:37.840
really nice smooth curve.

00:01:37.840 --> 00:01:41.330
But as you zoom out it starts
eliminating these control

00:01:41.330 --> 00:01:43.400
points so that you don't draw
too many of these line

00:01:43.400 --> 00:01:47.310
segments, filling pixels that
you would never see in the

00:01:47.310 --> 00:01:48.170
first place.

00:01:48.170 --> 00:01:51.080
And so we're going to use
that and bring it

00:01:51.080 --> 00:01:53.100
over to this example.

00:01:53.100 --> 00:01:56.070
So here all I've done is taken
that same exact thing.

00:01:56.070 --> 00:01:58.610
I've removed the animation just
so it's slightly less

00:01:58.610 --> 00:01:59.590
distracting.

00:01:59.590 --> 00:02:04.690
And whereas this is some triggy
projection, this is

00:02:04.690 --> 00:02:07.290
just a really simple Mercator
projection.

00:02:07.290 --> 00:02:08.289
And I've taken a line.

00:02:08.289 --> 00:02:11.220
And all I'm doing is saying,
show me a line that kind of

00:02:11.220 --> 00:02:13.570
undulates around the equator.

00:02:13.570 --> 00:02:16.550
And if you want to see what that
looks like, it just looks

00:02:16.550 --> 00:02:18.060
like this right here.

00:02:18.060 --> 00:02:21.620
I'm just defining a line string
kind of in this GeoJSON

00:02:21.620 --> 00:02:22.840
like format.

00:02:22.840 --> 00:02:26.700
And I'm keeping it right
on, around the equator.

00:02:26.700 --> 00:02:30.080
So here's 20 degrees north past
the equator, 20 degrees

00:02:30.080 --> 00:02:31.730
south and back again.

00:02:31.730 --> 00:02:33.520
And then it just rotates
around the earth.

00:02:33.520 --> 00:02:36.110
And so the key thing here is,
actually we only have five

00:02:36.110 --> 00:02:37.150
points-- really four.

00:02:37.150 --> 00:02:40.280
It begins and ends at
the same point.

00:02:40.280 --> 00:02:45.300
But d3 knows that you want
to draw a great circle.

00:02:45.300 --> 00:02:50.470
And so it actually fills then
and smooths that curve for us.

00:02:50.470 --> 00:02:51.240
So that's great.

00:02:51.240 --> 00:02:53.730
It's now in a different
projection, and that's a great

00:02:53.730 --> 00:02:56.180
thing about d3 is that you can
throw any projection in the

00:02:56.180 --> 00:02:57.090
world at it.

00:02:57.090 --> 00:03:00.220
But really we want to bring
this into Google Maps.

00:03:00.220 --> 00:03:01.820
So how do we do this?

00:03:01.820 --> 00:03:06.620
So the way that d3
renders paths--

00:03:06.620 --> 00:03:12.810
well, the way that most examples
of d3 render paths

00:03:12.810 --> 00:03:14.950
either falls down to
SVG or Canvas.

00:03:14.950 --> 00:03:18.310
So these are the two kind of
newer browser technologies,

00:03:18.310 --> 00:03:22.760
"newer" browser technologies,
that let us draw things

00:03:22.760 --> 00:03:23.750
dynamically.

00:03:23.750 --> 00:03:25.480
So each brings its
own benefits.

00:03:25.480 --> 00:03:29.110
So SVG lives in the DOM, you
can add mouse events to it.

00:03:29.110 --> 00:03:36.120
You can select things after the
fact and do logic on that

00:03:36.120 --> 00:03:36.780
sort of thing.

00:03:36.780 --> 00:03:38.730
Whereas Canvas, it
gets rasterized,

00:03:38.730 --> 00:03:39.500
puts it into display.

00:03:39.500 --> 00:03:42.020
But then you get really fast
display if you have maybe

00:03:42.020 --> 00:03:43.670
thousands or millions
of elements.

00:03:43.670 --> 00:03:48.530
That's what lets you do WebGL,
you can rasterize to an image

00:03:48.530 --> 00:03:52.590
and put it on screen, even if
it's a huge amount of elements

00:03:52.590 --> 00:03:54.360
that you could never
put in the DOM.

00:03:54.360 --> 00:03:57.160
So each has its trade-offs.

00:03:57.160 --> 00:04:00.290
But really, it's actually
abstracted.

00:04:00.290 --> 00:04:04.030
There's actually an interface
that d3 uses to write to these

00:04:04.030 --> 00:04:06.280
different graphics contexts.

00:04:06.280 --> 00:04:08.970
And there's different methods
that it uses that lets you

00:04:08.970 --> 00:04:16.180
bind SVG or the Canvas to the
thing you want to display, in

00:04:16.180 --> 00:04:16.990
this case a path.

00:04:16.990 --> 00:04:19.120
You want to draw
this red path.

00:04:19.120 --> 00:04:22.790
So we're going to use the
Canvas kind of method of

00:04:22.790 --> 00:04:25.420
binding these things, because
it's a little bit easier.

00:04:25.420 --> 00:04:28.190
So if you dig into that to
d3 docs, you can go to

00:04:28.190 --> 00:04:30.800
d3.geo.path here.

00:04:30.800 --> 00:04:40.680
And if you look, we can
see path.context.

00:04:40.680 --> 00:04:44.840
So this is actually used in that
code that we were looking

00:04:44.840 --> 00:04:49.340
at, where we create
a path from that

00:04:49.340 --> 00:04:51.210
line around the equator.

00:04:51.210 --> 00:04:56.130
And then when that path is being
created, actually, we

00:04:56.130 --> 00:05:00.980
have a context that we pass
it to draw to, sort of.

00:05:00.980 --> 00:05:04.920
But if you just look at the code
afterwards, you'll see

00:05:04.920 --> 00:05:05.685
what I mean.

00:05:05.685 --> 00:05:07.680
But you pass through
the context and it

00:05:07.680 --> 00:05:09.460
binds to that context.

00:05:09.460 --> 00:05:12.480
But if you look at these docs,
it doesn't actually have to be

00:05:12.480 --> 00:05:13.590
a Canvas context.

00:05:13.590 --> 00:05:15.820
All it has to do is fulfill
a certain interface.

00:05:15.820 --> 00:05:18.050
And here are the following
methods that you have to

00:05:18.050 --> 00:05:20.920
fulfill if you're implementing
that interface.

00:05:20.920 --> 00:05:24.560
So you beginPath, moveTo,
lineTo, arc, and closePath.

00:05:24.560 --> 00:05:26.850
And so if you've ever used HTML5
Canvas those should look

00:05:26.850 --> 00:05:27.480
very familiar.

00:05:27.480 --> 00:05:30.190
Those are the basic
drawing tools.

00:05:30.190 --> 00:05:33.080
And it allows you to construct
paths and then, once you have

00:05:33.080 --> 00:05:37.100
that path kind of in your
context state, you can either

00:05:37.100 --> 00:05:38.980
stroke it or fill it.

00:05:38.980 --> 00:05:41.450
But there's no reason, again,
that this has to be in Canvas.

00:05:41.450 --> 00:05:42.570
Again, it's just an interface.

00:05:42.570 --> 00:05:44.510
And we can actually fulfill
that ourselves.

00:05:44.510 --> 00:05:46.120
And if you look, there's
actually scattered throughout

00:05:46.120 --> 00:05:48.020
examples-- you'll see places
where they cheat.

00:05:48.020 --> 00:05:52.450
And they actually pass a context
in to buffer objects

00:05:52.450 --> 00:05:54.890
into an array, for instance, and
then pass that array to a

00:05:54.890 --> 00:05:56.590
different way of rendering.

00:05:56.590 --> 00:05:57.450
So that's what we're
going to do.

00:05:57.450 --> 00:05:59.410
We're going to cheat and we're
going to implement this

00:05:59.410 --> 00:06:05.730
context in terms of the v3 Maps
API geometry methods.

00:06:05.730 --> 00:06:08.210
So let's go back to the code.

00:06:08.210 --> 00:06:09.950
And I've created this really
simple thing called the

00:06:09.950 --> 00:06:11.200
PolyLineContext.

00:06:11.200 --> 00:06:13.310
And it's about as dumb
as you can get.

00:06:13.310 --> 00:06:16.710
And it relies on the fact that
in this case we know we have

00:06:16.710 --> 00:06:17.410
just a line.

00:06:17.410 --> 00:06:19.720
So we don't have to worry about
polygons, for instance,

00:06:19.720 --> 00:06:24.020
that might have breaks with
different polyline rings that

00:06:24.020 --> 00:06:25.130
we then need to fill.

00:06:25.130 --> 00:06:26.770
Or we don't have to
worry about arcs.

00:06:26.770 --> 00:06:28.820
We know that it's never actually
going to call arcs.

00:06:28.820 --> 00:06:32.380
Because we'd be in trouble if
it tried to call an arc.

00:06:32.380 --> 00:06:35.590
So we've implemented these four
methods on this polyline

00:06:35.590 --> 00:06:37.890
context, or five methods.

00:06:37.890 --> 00:06:39.130
And most of them do nothing.

00:06:39.130 --> 00:06:41.040
So beginPath, we don't
really care.

00:06:41.040 --> 00:06:42.070
It doesn't do anything.

00:06:42.070 --> 00:06:44.300
In that case you could've made
it so it creates a new

00:06:44.300 --> 00:06:45.560
polyline, for instance.

00:06:45.560 --> 00:06:47.090
The same thing with
arc and closePath.

00:06:47.090 --> 00:06:48.810
These are just empty functions,
and in fact they're

00:06:48.810 --> 00:06:51.990
never actually called
by the path code.

00:06:51.990 --> 00:06:55.370
And the important ones are
moveTo and lineTo.

00:06:55.370 --> 00:06:57.710
And I've made a really
simple method here.

00:06:57.710 --> 00:07:00.500
It's actually the same for both,
where if a current path

00:07:00.500 --> 00:07:03.630
is selected--

00:07:03.630 --> 00:07:06.460
sorry, a polyline on the map is
selected, then I create a

00:07:06.460 --> 00:07:13.340
LatLng object and push that on
to the polyline path array.

00:07:13.340 --> 00:07:17.280
And so if we go to the
map code, we have two

00:07:17.280 --> 00:07:18.260
things going on here.

00:07:18.260 --> 00:07:21.290
We have-- first we initialize
a map, just like always.

00:07:21.290 --> 00:07:24.130
And on that map we
make a polyline.

00:07:24.130 --> 00:07:27.760
And then we init d3 to do
the same thing as in

00:07:27.760 --> 00:07:29.450
the previous example.

00:07:29.450 --> 00:07:32.550
But now instead of context from
a Canvas, now we're doing

00:07:32.550 --> 00:07:35.890
a polyline context, that context
we just made up.

00:07:35.890 --> 00:07:40.570
And when we create our path
object, that's with our

00:07:40.570 --> 00:07:45.220
equi-rectangular projection so
that we can do-- just like an

00:07:45.220 --> 00:07:46.600
identity projection.

00:07:46.600 --> 00:07:48.410
We pass that to the context.

00:07:48.410 --> 00:07:50.780
So now, we're finally at
the point when we can

00:07:50.780 --> 00:07:51.670
actually draw this.

00:07:51.670 --> 00:07:58.240
And so to draw it we've changed
our style methods that

00:07:58.240 --> 00:08:01.140
set properties on Canvas context
to setting those

00:08:01.140 --> 00:08:02.420
options on the polylines.

00:08:02.420 --> 00:08:05.330
So we have a red and a
stroke weight of two.

00:08:05.330 --> 00:08:08.760
And then we set our current
polyline, that's part of the

00:08:08.760 --> 00:08:10.360
polyline context
that we wrote.

00:08:10.360 --> 00:08:13.200
And finally, we just pass it
to this path method that we

00:08:13.200 --> 00:08:14.940
created up here.

00:08:14.940 --> 00:08:18.030
And that projects those points
and then passes it to the

00:08:18.030 --> 00:08:20.790
context through those
five functions, or

00:08:20.790 --> 00:08:23.080
really two in this case.

00:08:23.080 --> 00:08:25.620
And just calls point, point,
point, point, point.

00:08:25.620 --> 00:08:28.640
And so finally we can take a
look at what that looks like.

00:08:28.640 --> 00:08:35.610
And if we refresh we can see
that we have this line.

00:08:35.610 --> 00:08:40.090
In fact, let's make it a little
thicker, just a little

00:08:40.090 --> 00:08:43.400
bit more obvious.

00:08:43.400 --> 00:08:45.720
You can see this path
that we've created.

00:08:45.720 --> 00:08:52.540
And so we're actually using
the d3, all its different

00:08:52.540 --> 00:08:56.820
machinery, and then driving
these points on the map.

00:08:56.820 --> 00:08:57.830
So this could be anything.

00:08:57.830 --> 00:09:01.350
So in this case I created a
simple GeoJSON in code.

00:09:01.350 --> 00:09:02.580
But you can bring
that GeoJSON in.

00:09:02.580 --> 00:09:05.880
You can use topojson, which is
natively supported by d3.

00:09:05.880 --> 00:09:09.090
You can use any sort of thing
and pass it in to draw these

00:09:09.090 --> 00:09:09.840
draw commands.

00:09:09.840 --> 00:09:12.650
And then, just like we drew
these polylines, we can also

00:09:12.650 --> 00:09:14.570
draw polygons, that
sort of thing.

00:09:14.570 --> 00:09:16.570
You just have to be careful
with your context.

00:09:16.570 --> 00:09:20.970
And so just as a last, really
simple example, we can see as

00:09:20.970 --> 00:09:25.230
we zoom in we get these hard
corners here where you see a

00:09:25.230 --> 00:09:25.850
definite angle.

00:09:25.850 --> 00:09:27.450
So we're not adaptively
re-sampling.

00:09:27.450 --> 00:09:30.020
And so we can actually do a
couple of things there.

00:09:30.020 --> 00:09:33.480
We can tell that d3 that
the scale has changed.

00:09:33.480 --> 00:09:37.540
Or we can totally cheat and go
to the console here and just

00:09:37.540 --> 00:09:42.440
set the precision of the
projection manually.

00:09:42.440 --> 00:09:46.310
So here we've moved to a
much smoother polyline.

00:09:46.310 --> 00:09:48.500
And we can even do that-- so on
Zoom, for instance, we can

00:09:48.500 --> 00:09:50.910
change the precision of
the polyline if we

00:09:50.910 --> 00:09:52.390
wanted to do that.

00:09:52.390 --> 00:09:54.480
And it goes the other
way, too.

00:09:54.480 --> 00:10:01.360
We can set so it's just like
this very angular thing.

00:10:01.360 --> 00:10:03.620
And so, as you can see, it's
the full pipeline.

00:10:03.620 --> 00:10:05.260
It's really easy to bind.

00:10:05.260 --> 00:10:07.260
And so that's something to keep
in mind in the future

00:10:07.260 --> 00:10:09.560
when you're looking at
kind of, I want d3.

00:10:09.560 --> 00:10:13.170
But I also want to put on a map
if it actually needs to be

00:10:13.170 --> 00:10:14.770
in context.

00:10:14.770 --> 00:10:17.760
And so there's no reason why
these can't live together. d3

00:10:17.760 --> 00:10:21.000
is designed exactly for this
kind of adaptability.

00:10:21.000 --> 00:10:22.290
So try it out.

00:10:22.290 --> 00:10:24.380
Check out the code, where it's
going to be in a simple gist

00:10:24.380 --> 00:10:25.520
linked on the video.

00:10:25.520 --> 00:10:28.650
And let me know what
you think.

00:10:28.650 --> 00:10:33.210
And if anything interesting
comes up we can covered in

00:10:33.210 --> 00:10:34.760
future Maps Shortcuts.

00:10:34.760 --> 00:10:36.010
Thanks.

