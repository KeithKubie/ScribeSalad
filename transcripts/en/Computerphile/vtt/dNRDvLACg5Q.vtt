WEBVTT
Kind: captions
Language: en

00:00:00.320 --> 00:00:02.480
Back at the start of the 20th century

00:00:02.660 --> 00:00:05.420
mathematicians were fascinated by the question

00:00:05.420 --> 00:00:10.460
'just how much maths can we do, not by
using our

00:00:10.460 --> 00:00:15.240
gut feelings or intuitions but just by
following rules very very carefully

00:00:15.889 --> 00:00:21.390
by following an algorithm'? In order to
make that notion precise

00:00:21.390 --> 00:00:25.640
we would have to set out: "just what do we
mean by a program

00:00:25.640 --> 00:00:28.789
or algorithm" - and this is where Alan Turing came in,

00:00:28.789 --> 00:00:33.262
with his notion of a Turing machine.

00:00:33.280 --> 00:00:36.480
Turing was working on a problem in
Formal Logic

00:00:36.480 --> 00:00:40.540
and as part of his proof he had to come up
with the notion

00:00:40.540 --> 00:00:43.899
of any possible algorithm

00:00:43.900 --> 00:00:48.469
or any possible machine. He had to come
up with a very general way of capturing

00:00:48.920 --> 00:00:53.020
how algorithms or programs or machines
would work

00:00:53.020 --> 00:00:58.230
This is where his notion of a Turing
machine comes in. The way Turing

00:00:58.230 --> 00:01:03.700
described these machines goes like this:
you have a way of

00:01:03.760 --> 00:01:06.970
writing down information in a coded form.

00:01:06.970 --> 00:01:10.910
His way was to think of a tape which is
as long as it needs to be.

00:01:10.960 --> 00:01:17.439
It's divided up into squares and each of the squares there is either one

00:01:17.440 --> 00:01:22.130
or a zero or we can have some spaces. Now
what our machine does

00:01:22.160 --> 00:01:25.460
is it looks at the tape

00:01:25.460 --> 00:01:28.710
one square at a time. So you could
imagine it

00:01:28.800 --> 00:01:32.210
as a little box running above the tape,

00:01:32.240 --> 00:01:35.680
maybe on little wheels, looking

00:01:35.680 --> 00:01:39.900
one square at a time and that
information

00:01:39.920 --> 00:01:44.240
codes up a question or a problem that we
want solved.

00:01:44.240 --> 00:01:47.490
What a Turing machine does is really
simple

00:01:47.520 --> 00:01:50.810
at any moment in time it's in a
particular state

00:01:50.810 --> 00:01:54.429
and it's looking at one square on the
tape, and it has

00:01:54.429 --> 00:01:57.610
a logbook, a program book. And that tells it,

00:01:57.680 --> 00:02:00.950
if for instance you're in state number
23

00:02:00.960 --> 00:02:05.180
and you're looking at a zero, then rub out the zero, change it

00:02:05.200 --> 00:02:08.310
to one, move one square to the right,

00:02:08.320 --> 00:02:11.770
and move into state number 359,

00:02:11.770 --> 00:02:17.280
for instance. Or if you're in state
number 359 and you're looking at a one

00:02:17.280 --> 00:02:21.699
leave that one as it is, move one square to
the left

00:02:21.699 --> 00:02:26.691
and move into state number twenty. Really
simple instructions!

00:02:26.720 --> 00:02:30.470
what the machine does, is it starts off
with a certain

00:02:30.480 --> 00:02:33.500
pattern of ones and zeros. It

00:02:33.520 --> 00:02:37.200
follows these rules one square at a time,

00:02:37.200 --> 00:02:40.450
transforming that string of ones and zeros

00:02:40.480 --> 00:02:43.890
into a different string of ones and zeros.

00:02:43.920 --> 00:02:47.870
And eventually - hopefully -

00:02:47.870 --> 00:02:51.789
the machine moves into a halting state,
it is finished, it is done.

00:02:51.840 --> 00:02:55.700
And what's left on the tape is the answer to
our problem,

00:02:55.700 --> 00:03:00.480
coded up as ones and zeros. That is such
a simple

00:03:00.640 --> 00:03:03.750
process but it turns out it's the

00:03:03.760 --> 00:03:07.420
essence of computation. Whatever

00:03:07.440 --> 00:03:11.709
any computer can do, it could in theory

00:03:11.709 --> 00:03:15.471
be done by that system looking at ones
and zeros

00:03:15.520 --> 00:03:19.800
on a tape. So that's why we say

00:03:19.800 --> 00:03:23.660
that Turing in coming up with his
idea of Turing machines,

00:03:23.680 --> 00:03:27.719
in effect, came up with a blueprint for
modern digital computers.

00:03:27.760 --> 00:03:31.590
Those computers manipulate strings of
ones and zeros

00:03:31.600 --> 00:03:35.040
to solve problems. This really simple

00:03:35.040 --> 00:03:39.620
idea that we find in Turing machines is
actually so

00:03:39.620 --> 00:03:42.799
powerful that all modern computers

00:03:42.800 --> 00:03:47.769
basically do what Turing machines do. And
we use this idea

00:03:47.769 --> 00:03:52.120
to evaluate the strength of modern
computer programs.

00:03:52.160 --> 00:03:55.709
When a computer program can do

00:03:55.709 --> 00:04:00.310
what a Turing machine can do, we call it Turing complete

00:04:00.320 --> 00:04:06.430
and that is the top of the hierarchy of
program strength. So the strongest

00:04:07.049 --> 00:04:10.890
program that we can get does exactly
what

00:04:10.890 --> 00:04:15.559
a Turing machine can do. We've never come up with
a way of computing things

00:04:15.569 --> 00:04:18.709
that could do more than a Turing machine. So

00:04:18.709 --> 00:04:21.750
recently, there's been a challenge to the
idea

00:04:21.760 --> 00:04:25.940
that anything a computer can do, a Turing machine can do.

00:04:25.940 --> 00:04:29.370
And the challenge comes from quantum
computers which

00:04:29.370 --> 00:04:34.020
almost seem like they can do things
magically.

00:04:34.030 --> 00:04:37.520
My take on this is that a quantum
computer

00:04:37.520 --> 00:04:42.490
can't do more than a Turing machine but
it can do things more

00:04:42.490 --> 00:04:45.949
efficiently. For instance, if you asked

00:04:45.949 --> 00:04:49.860
a classical computer to find you a phone
number

00:04:49.889 --> 00:04:53.220
in the phone directory, you have to look
for every single

00:04:53.220 --> 00:04:56.430
entry and it takes a long time.

00:04:56.430 --> 00:05:00.320
But a quantum computer can do that

00:05:00.320 --> 00:05:04.860
more efficiently, don't ask me how.

00:05:04.860 --> 00:05:07.270
ok

00:05:07.270 --> 00:05:08.139
look what

00:05:08.139 --> 00:05:11.240
happens, if I've read a zero, which I have, there.

00:05:11.240 --> 00:05:14.240
What do I then do? The answer is I

00:05:14.280 --> 00:05:17.639
override it with a one. Call that machine
H,

00:05:17.639 --> 00:05:22.060
for the halting problem, if you give me
that machine, I could transform it into a

00:05:22.060 --> 00:05:23.120
different machine,

00:05:23.120 --> 00:05:23.659
like this.

