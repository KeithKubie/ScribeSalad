WEBVTT
Kind: captions
Language: en

00:00:02.097 --> 00:00:03.430
WOJTEK KALICINSKI: Hi, everyone.

00:00:03.430 --> 00:00:05.100
Please settle down.

00:00:05.100 --> 00:00:06.636
Nice to see a full room.

00:00:06.636 --> 00:00:08.510
I wonder if it's because
of the heat outside,

00:00:08.510 --> 00:00:11.239
or do you care about
application sizes?

00:00:11.239 --> 00:00:13.280
Who cares about the
application sizes on Android?

00:00:13.280 --> 00:00:13.910
[CHEERING]

00:00:13.910 --> 00:00:15.100
Lots of people.

00:00:15.100 --> 00:00:16.720
Is there any one
who doesn't care?

00:00:16.720 --> 00:00:17.490
AUDIENCE: Yeah.

00:00:17.490 --> 00:00:18.490
WOJTEK KALICINSKI: Yeah?

00:00:18.490 --> 00:00:21.550
OK, great, well I hope I'm
going to convince you that it's

00:00:21.550 --> 00:00:23.020
really important to do that.

00:00:23.020 --> 00:00:27.170
And I also hope that you
especially will go to a session

00:00:27.170 --> 00:00:28.300
tomorrow.

00:00:28.300 --> 00:00:32.500
I encourage you to all go
and see Ankur and others talk

00:00:32.500 --> 00:00:34.740
about building for
billions, and they're

00:00:34.740 --> 00:00:37.190
going to tell you all
about building apps

00:00:37.190 --> 00:00:40.010
that will work great
on all kinds of devices

00:00:40.010 --> 00:00:42.250
for all kinds of markets.

00:00:42.250 --> 00:00:46.040
But today we're going to
concentrate on app sizes.

00:00:46.040 --> 00:00:50.900
And if you think, why
is it important anyway?

00:00:50.900 --> 00:00:52.430
Why should I care
about app size,

00:00:52.430 --> 00:00:54.610
and what is app size anyway?

00:00:54.610 --> 00:00:56.860
First of all, think about this.

00:00:56.860 --> 00:01:02.210
We're here in the US, where
there's Wi-Fi on every corner,

00:01:02.210 --> 00:01:03.780
in every coffee shop.

00:01:03.780 --> 00:01:06.810
We have all those
all-you-can-eat data plans.

00:01:06.810 --> 00:01:09.070
We can download as
much as we want.

00:01:09.070 --> 00:01:10.830
Well, I just want
you to remember

00:01:10.830 --> 00:01:13.410
there are parts of the
world where people actually

00:01:13.410 --> 00:01:15.580
pay for every megabyte
they download.

00:01:15.580 --> 00:01:18.140
And it's not always easy
for them to install apps,

00:01:18.140 --> 00:01:20.800
to keep apps updated,
and it should

00:01:20.800 --> 00:01:25.760
matter to us developers that
people you your apps, for one,

00:01:25.760 --> 00:01:27.940
and just keep them updated.

00:01:27.940 --> 00:01:32.860
And the other important thing is
that people's phones not always

00:01:32.860 --> 00:01:38.440
have 16 gigs, 32 gigs
of memory, so they just

00:01:38.440 --> 00:01:41.430
can't keep all of the apps
installed that they would want.

00:01:41.430 --> 00:01:45.050
And, again, if you want
the users to actually use

00:01:45.050 --> 00:01:47.030
your apps, maybe
you will help them

00:01:47.030 --> 00:01:49.680
a little bit by keeping your
app just a little bit smaller,

00:01:49.680 --> 00:01:52.070
so they maybe will be encouraged
to leave your app alone

00:01:52.070 --> 00:01:54.200
and just not uninstall it.

00:01:54.200 --> 00:01:57.470
So when I was beginning to
create this presentation,

00:01:57.470 --> 00:02:00.440
I was talking with lots
of developers at events.

00:02:00.440 --> 00:02:04.780
And I had asked them this simple
question-- how big is your app?

00:02:04.780 --> 00:02:07.290
And I wonder if I
ask you, just think

00:02:07.290 --> 00:02:09.223
in your head, how
big is your app?

00:02:09.223 --> 00:02:11.110
Can you answer that
in five seconds?

00:02:11.110 --> 00:02:14.380
And if you follow
the number, I'm

00:02:14.380 --> 00:02:17.600
pretty sure you thought
of the raw APK size.

00:02:17.600 --> 00:02:20.980
So this is the file that is
produced by Android Studio.

00:02:20.980 --> 00:02:23.730
How many people
thought about that?

00:02:23.730 --> 00:02:25.761
Yeah, lots of people,
and that's correct.

00:02:25.761 --> 00:02:26.760
That's a correct answer.

00:02:26.760 --> 00:02:30.090
It's technically correct--
the best kind of correct.

00:02:30.090 --> 00:02:33.880
But application size
is not about the file

00:02:33.880 --> 00:02:35.970
on the your computer.

00:02:35.970 --> 00:02:38.590
The user doesn't really
interact with the file

00:02:38.590 --> 00:02:41.220
on your hard drive that
Android Studio produces.

00:02:41.220 --> 00:02:45.400
So the all important
sizes we can talk about

00:02:45.400 --> 00:02:46.980
is the download size.

00:02:46.980 --> 00:02:50.900
So, again, if I'm on not a
very good network connection,

00:02:50.900 --> 00:02:53.310
if I have to pay for
the data that I use,

00:02:53.310 --> 00:02:54.970
before downloading
an app, I have

00:02:54.970 --> 00:02:58.810
to actually look and think, can
I afford downloading this app?

00:02:58.810 --> 00:03:02.880
Can I afford spending this much
money on this many megabytes

00:03:02.880 --> 00:03:03.910
to download it?

00:03:03.910 --> 00:03:06.160
And it's not always the
same as raw APK size,

00:03:06.160 --> 00:03:07.930
which we'll find out a moment.

00:03:07.930 --> 00:03:09.205
Then there is install size.

00:03:09.205 --> 00:03:11.820
So, like I mentioned, the
other important metric

00:03:11.820 --> 00:03:16.350
is how much space users
actually have on their devices

00:03:16.350 --> 00:03:18.940
and how much space your
app will actually take up.

00:03:18.940 --> 00:03:20.640
And, again, it's not that easy.

00:03:20.640 --> 00:03:23.590
So it's not always the
same as raw APK size,

00:03:23.590 --> 00:03:25.035
nor is it the download size.

00:03:25.035 --> 00:03:28.100
And I'll tell why in a sec.

00:03:28.100 --> 00:03:31.320
And third of all, the
update size-- again,

00:03:31.320 --> 00:03:33.981
you might think people
download an APK.

00:03:33.981 --> 00:03:36.230
If they want a new version,
they get a new APK, right?

00:03:36.230 --> 00:03:38.063
So it must be the same
as the download size,

00:03:38.063 --> 00:03:39.460
only with a new APK.

00:03:39.460 --> 00:03:42.000
Well, that's also not true.

00:03:42.000 --> 00:03:44.400
Then there's other metrics,
which are really, really

00:03:44.400 --> 00:03:47.450
important, like RAM footprint,
how much memory your app

00:03:47.450 --> 00:03:50.840
uses, how many methods
are in your app.

00:03:50.840 --> 00:03:53.690
That's really
important for if you

00:03:53.690 --> 00:03:56.750
have to use multidecks or not
and probably lots and lots

00:03:56.750 --> 00:03:58.010
of other metrics for app size.

00:03:58.010 --> 00:04:00.330
But we're not really
going to talk about those.

00:04:00.330 --> 00:04:04.440
We're concentrating more on
APK size and the four metrics

00:04:04.440 --> 00:04:07.750
that I mentioned
in the beginning.

00:04:07.750 --> 00:04:11.140
So before we start,
before we start

00:04:11.140 --> 00:04:16.160
talking about how to optimize
for all those four scenarios--

00:04:16.160 --> 00:04:20.510
for APK size, download size and
so on-- just a quick primer.

00:04:20.510 --> 00:04:23.470
Let's look at the internals--
what's actually in an APK--

00:04:23.470 --> 00:04:28.050
so that we can talk about what
we can do with it and what we

00:04:28.050 --> 00:04:29.260
cannot do.

00:04:29.260 --> 00:04:33.960
And an APK is really
just a zip archive.

00:04:33.960 --> 00:04:35.610
You probably all know that.

00:04:35.610 --> 00:04:38.170
If you unpack it
to a folder or just

00:04:38.170 --> 00:04:41.300
inspect it in an archive
viewer, first of all,

00:04:41.300 --> 00:04:43.530
you will find the
application code.

00:04:43.530 --> 00:04:44.890
So there's byte code.

00:04:44.890 --> 00:04:46.727
There's the DEX files.

00:04:46.727 --> 00:04:47.810
There be one class as dex.

00:04:47.810 --> 00:04:49.930
There may be more, if
you're using MultiDex.

00:04:49.930 --> 00:04:52.270
That's pretty much all
your code that you wrote

00:04:52.270 --> 00:04:55.780
or your libraries that you
imported and so on and so on.

00:04:55.780 --> 00:04:57.840
There's also native
code-- so native libraries

00:04:57.840 --> 00:05:01.230
compiled for a specific
CPU architecture or ABI

00:05:01.230 --> 00:05:03.580
that resides in the Libs folder.

00:05:03.580 --> 00:05:05.650
And under Libs, you have
all these architectures.

00:05:05.650 --> 00:05:09.280
So if you have an ARM
device, it needs ARM SO files

00:05:09.280 --> 00:05:11.410
and so on and so on.

00:05:11.410 --> 00:05:15.050
Then resources-- a pretty big
part of your app, usually.

00:05:15.050 --> 00:05:18.190
And resources are really
divided into two categories.

00:05:18.190 --> 00:05:21.420
So in the Rest folder, we
have all kinds of resources,

00:05:21.420 --> 00:05:25.030
like drawables,
PNGs, JPEG files,

00:05:25.030 --> 00:05:26.850
layouts, and so on and so on.

00:05:26.850 --> 00:05:31.580
And there's also another
file, a resources.arc,

00:05:31.580 --> 00:05:35.230
which contains mostly styles,
identifiers, and strings.

00:05:35.230 --> 00:05:37.630
And also this file
can get pretty big.

00:05:37.630 --> 00:05:41.050
So we'll talk about how to
reduce that sizes as well.

00:05:41.050 --> 00:05:43.930
And then there's all kind of
kinds of miscellaneous stuff,

00:05:43.930 --> 00:05:46.870
like other assets.

00:05:46.870 --> 00:05:50.979
You put any file that you use
as a binary stream-- anything

00:05:50.979 --> 00:05:52.270
that's not an Android resource.

00:05:52.270 --> 00:05:55.086
So if you want to have a
font bundle with your app

00:05:55.086 --> 00:05:57.420
or some game data,
some textures,

00:05:57.420 --> 00:05:59.930
you just put it in the Assets,
and you can open it later

00:05:59.930 --> 00:06:01.430
in your app.

00:06:01.430 --> 00:06:04.300
Then there is the
META-INF folder.

00:06:04.300 --> 00:06:07.250
This contains the
app's APK signature.

00:06:07.250 --> 00:06:09.760
And I'm going to talk about
that on the next slide.

00:06:09.760 --> 00:06:11.460
And then there is
the Android manifest.

00:06:11.460 --> 00:06:13.870
So when you work
on Android Studio,

00:06:13.870 --> 00:06:16.340
when you actually
compile your app,

00:06:16.340 --> 00:06:19.570
Android Studio gets all
pieces of information

00:06:19.570 --> 00:06:22.030
from all the libraries you
use, from your own app,

00:06:22.030 --> 00:06:26.530
and it creates this combined,
merged Android manifest that it

00:06:26.530 --> 00:06:28.140
finally puts in the APK.

00:06:28.140 --> 00:06:31.120
And one important thing
is if you actually

00:06:31.120 --> 00:06:33.600
do what I said and
extract the APK

00:06:33.600 --> 00:06:35.840
and try to inspect this
file, you will find

00:06:35.840 --> 00:06:37.647
that it's in another format.

00:06:37.647 --> 00:06:39.480
It's actually in a
binary compressed format.

00:06:39.480 --> 00:06:43.170
So you will not be able
to inspect it easily.

00:06:43.170 --> 00:06:46.920
And I will talk about
how to do that in a sec.

00:06:46.920 --> 00:06:51.860
So APK signing,
like I said, there's

00:06:51.860 --> 00:06:55.860
a whole folder that contains
the cryptographic signature

00:06:55.860 --> 00:06:57.120
for your APK.

00:06:57.120 --> 00:06:59.440
We all know that's important
so that Android can verify

00:06:59.440 --> 00:07:02.310
that the app was produced
by you, it comes from you,

00:07:02.310 --> 00:07:04.350
it can install it securely.

00:07:04.350 --> 00:07:09.230
And how APK signing of v1
works-- the important part

00:07:09.230 --> 00:07:13.220
to know here is that
Android actually, when

00:07:13.220 --> 00:07:15.250
verifying the
signature, it goes file

00:07:15.250 --> 00:07:19.070
by file on every
file in your archive

00:07:19.070 --> 00:07:22.620
and actually
decompresses the file,

00:07:22.620 --> 00:07:24.860
then goes over the
full file contents,

00:07:24.860 --> 00:07:26.620
checks it against the signature.

00:07:26.620 --> 00:07:29.530
And of if it matches
the signature,

00:07:29.530 --> 00:07:31.310
it verify it's correct.

00:07:31.310 --> 00:07:35.680
So one cool thing that
we can do about this

00:07:35.680 --> 00:07:39.360
is changing compression levels
on files is actually allowed.

00:07:39.360 --> 00:07:42.410
So if you have an APK, if
it's cryptographically signed,

00:07:42.410 --> 00:07:44.260
you can actually
change compression

00:07:44.260 --> 00:07:47.010
on a file inside the
archive, and that will not

00:07:47.010 --> 00:07:49.890
invalidate the signature.

00:07:49.890 --> 00:07:52.680
Another thing that's useful to
know is that removing any files

00:07:52.680 --> 00:07:53.480
is not allowed.

00:07:53.480 --> 00:07:56.800
So if you remove a file, you
will have to resign your app.

00:07:56.800 --> 00:08:01.530
And after making any changes
to the archive, to the APK,

00:08:01.530 --> 00:08:06.330
remember that you have to run
Zipalign after any changes.

00:08:06.330 --> 00:08:10.050
So even if you like change
something, then sign the image,

00:08:10.050 --> 00:08:13.100
sign the APK, then you
always have to run Zipalign--

00:08:13.100 --> 00:08:15.760
so just a few rules.

00:08:15.760 --> 00:08:19.720
But we have this new APK
signing scheme with version two

00:08:19.720 --> 00:08:23.050
and Android N, which
changes things a little bit.

00:08:23.050 --> 00:08:25.600
So it makes it a
little bit difficult,

00:08:25.600 --> 00:08:28.150
or let's say impossible,
to actually change

00:08:28.150 --> 00:08:31.130
anything inside the archive.

00:08:31.130 --> 00:08:31.908
It's more secure.

00:08:34.760 --> 00:08:38.620
The signature is computed over
all the bytes in the APK--

00:08:38.620 --> 00:08:40.500
so all the content in the APK.

00:08:40.500 --> 00:08:43.812
And then it's appended towards
the end of the zip archive--

00:08:43.812 --> 00:08:45.270
not exactly at the
end of the file,

00:08:45.270 --> 00:08:48.500
but just before the zip
archive central directory.

00:08:48.500 --> 00:08:51.280
And, like I said, no
changes are allowed.

00:08:51.280 --> 00:08:56.460
And what's more, Zipalign has
to be run before the v2 signing,

00:08:56.460 --> 00:08:59.910
so that complicates
things a little bit.

00:08:59.910 --> 00:09:03.810
Fortunately Android Studio
has made some improvements,

00:09:03.810 --> 00:09:08.500
and I'm going to tell you why.

00:09:08.500 --> 00:09:10.700
But why am I talking
about all this?

00:09:10.700 --> 00:09:13.340
Why did I not go
straight to the point

00:09:13.340 --> 00:09:16.930
and tell you what you can
do to make your APK smaller?

00:09:16.930 --> 00:09:19.460
I think it's very important
to understand those things,

00:09:19.460 --> 00:09:22.980
to understand the role of
every file in this archive.

00:09:22.980 --> 00:09:26.410
For example, I said
that resources.arc

00:09:26.410 --> 00:09:28.050
can bet get pretty big.

00:09:28.050 --> 00:09:29.880
And so lots of
developers noticed that.

00:09:29.880 --> 00:09:31.690
They noticed that
this file in their app

00:09:31.690 --> 00:09:35.400
takes even 10
megabytes, 15 megabytes.

00:09:35.400 --> 00:09:37.950
And they also notice
that it's uncompressed.

00:09:37.950 --> 00:09:40.810
So if you create an
APK in Android Studio,

00:09:40.810 --> 00:09:43.912
and you look at the compression
level of all the files,

00:09:43.912 --> 00:09:46.120
you will see that this file
is actually uncompressed.

00:09:46.120 --> 00:09:48.485
So why does it waste
all this space?

00:09:48.485 --> 00:09:50.610
I just said that it mostly
contains strings, right?

00:09:50.610 --> 00:09:52.740
So text is compressible.

00:09:52.740 --> 00:09:56.570
So many developers, using this
knowledge of APK signing v1,

00:09:56.570 --> 00:09:59.880
they go and compress this
file and problem fixed.

00:09:59.880 --> 00:10:01.460
APK is smaller.

00:10:01.460 --> 00:10:05.870
But what I want you to
understand from this talk

00:10:05.870 --> 00:10:08.800
and bring as takeaway from
this talk is some optimizations

00:10:08.800 --> 00:10:10.700
are actually
counter-intuitive and not

00:10:10.700 --> 00:10:14.920
always actually reducing APK
size will help in the long run.

00:10:14.920 --> 00:10:18.440
So, for example, in this case,
compressing resources.arc

00:10:18.440 --> 00:10:19.860
is actually a very bad idea.

00:10:19.860 --> 00:10:22.010
You should leave it as is.

00:10:22.010 --> 00:10:26.210
It's optimized for runtime
for running your app,

00:10:26.210 --> 00:10:28.390
so the framework could
actually memory map the file.

00:10:28.390 --> 00:10:32.000
It doesn't have to decompress
when you launch your app.

00:10:32.000 --> 00:10:33.220
Even worse, think about that.

00:10:33.220 --> 00:10:36.592
If the launcher has
to read something

00:10:36.592 --> 00:10:38.550
from this file from your
app-- and the launcher

00:10:38.550 --> 00:10:40.810
has to read your
application name-- if this

00:10:40.810 --> 00:10:43.020
file we're compressed,
then just to show your app

00:10:43.020 --> 00:10:44.420
name next to your
icon, this file

00:10:44.420 --> 00:10:46.780
will have to be
decompressed into memory.

00:10:46.780 --> 00:10:49.450
So that's one thing
you just shouldn't do,

00:10:49.450 --> 00:10:52.380
even though you can.

00:10:52.380 --> 00:10:55.720
And we're going to talk
about all these stages

00:10:55.720 --> 00:10:59.810
and what magic things
happen that make it

00:10:59.810 --> 00:11:03.810
so that download size is not
always the same as raw APK size

00:11:03.810 --> 00:11:04.910
and so and so on.

00:11:04.910 --> 00:11:08.400
So, for example, Play Store
serves a compressed version

00:11:08.400 --> 00:11:09.750
of your APK.

00:11:09.750 --> 00:11:12.400
So, in case, for example,
of this resources file,

00:11:12.400 --> 00:11:14.720
even though we keep
it uncompressed,

00:11:14.720 --> 00:11:17.870
when it's actually
sent to users' devices,

00:11:17.870 --> 00:11:20.390
Play Store will compress
the APK beforehand.

00:11:20.390 --> 00:11:22.090
So we don't lose any bandwidth.

00:11:22.090 --> 00:11:24.390
We don't use any bytes
over the network.

00:11:24.390 --> 00:11:26.180
So that's good.

00:11:26.180 --> 00:11:29.120
The only thing is when
installed on the device,

00:11:29.120 --> 00:11:33.710
the file will take up
more space on the drive.

00:11:33.710 --> 00:11:39.630
But, like I said, that's
actually working as intended.

00:11:39.630 --> 00:11:44.600
Some cool stuff is also
happening around install time.

00:11:44.600 --> 00:11:47.652
So, first of all,
remember how I was

00:11:47.652 --> 00:11:49.360
talking about these
signatures and so on?

00:11:49.360 --> 00:11:51.630
You can't change anything
inside the archives.

00:11:51.630 --> 00:11:55.330
And so because of that,
whenever you install an app,

00:11:55.330 --> 00:11:58.040
the first and the
most important part

00:11:58.040 --> 00:12:00.020
of what's taking up
space on the device

00:12:00.020 --> 00:12:01.770
will be the raw APK itself.

00:12:01.770 --> 00:12:02.790
We cannot change it.

00:12:02.790 --> 00:12:05.370
Even if it contains
resources for other devices,

00:12:05.370 --> 00:12:08.530
for devices with different
screen densities,

00:12:08.530 --> 00:12:10.730
with different
CPU architectures,

00:12:10.730 --> 00:12:13.250
there's nothing we can
do with it on the device

00:12:13.250 --> 00:12:16.490
because we have to keep
the signature intact.

00:12:16.490 --> 00:12:18.620
So a little bit of space wasted.

00:12:18.620 --> 00:12:21.590
We can remedy that later.

00:12:21.590 --> 00:12:26.540
Then there was a thing that
we introduced in Lollipop,

00:12:26.540 --> 00:12:29.620
and that was the new runtime
called ART, which introduced

00:12:29.620 --> 00:12:31.850
ahead-of-time compilation.

00:12:31.850 --> 00:12:36.280
So whenever you install an
APK, the ahead-of-time compiler

00:12:36.280 --> 00:12:39.700
will take all your DEX
byte code and actually

00:12:39.700 --> 00:12:42.230
compile it down into
native code and store

00:12:42.230 --> 00:12:45.000
that on your user partition.

00:12:45.000 --> 00:12:49.360
So, again, this takes up space.

00:12:49.360 --> 00:12:52.562
This is a derivative of
how big your code is.

00:12:52.562 --> 00:12:54.770
The bigger your code is,
the bigger the compiled code

00:12:54.770 --> 00:12:59.620
will be-- so another
thing to be mindful about.

00:12:59.620 --> 00:13:02.380
One note-- with M,
we're, again, getting

00:13:02.380 --> 00:13:03.990
rid of the ahead-of-time
compilation.

00:13:03.990 --> 00:13:05.560
We're using a JIT compiler.

00:13:05.560 --> 00:13:10.070
So this is, let's say, not a
concern as much on N devices

00:13:10.070 --> 00:13:12.920
and going forward.

00:13:12.920 --> 00:13:16.370
Finally, one curious thing-- if
you have any native libraries

00:13:16.370 --> 00:13:19.480
in your APK, they will actually
get uncompressed, again,

00:13:19.480 --> 00:13:21.910
on the user partition
and will take up

00:13:21.910 --> 00:13:27.924
space on the user partition
so that Android can actually

00:13:27.924 --> 00:13:32.160
load them and access them
with better performance.

00:13:32.160 --> 00:13:33.920
Again, we cannot touch the APK.

00:13:33.920 --> 00:13:37.030
Even though we uncompressed
the native libraries,

00:13:37.030 --> 00:13:38.219
they take up more space.

00:13:38.219 --> 00:13:39.760
Well, we cannot
remove them from APK.

00:13:39.760 --> 00:13:41.650
So that's space wasted.

00:13:41.650 --> 00:13:44.310
Fortunately, starting with
Marshmallow and above,

00:13:44.310 --> 00:13:45.210
we can remedy that.

00:13:45.210 --> 00:13:47.170
And that will be one
of the techniques

00:13:47.170 --> 00:13:49.180
I will talk about later.

00:13:49.180 --> 00:13:51.630
And then there's things
that happen at runtime.

00:13:51.630 --> 00:13:56.860
So you know a user looks up the
application size in Settings

00:13:56.860 --> 00:13:59.119
looks at the whole
app size, it's

00:13:59.119 --> 00:14:00.660
not just the things
that I mentioned.

00:14:00.660 --> 00:14:04.420
It's also everything you create
during runtime-- so databases,

00:14:04.420 --> 00:14:06.560
cached images, anything
you pretty much

00:14:06.560 --> 00:14:09.760
download from the internet
or generate locally.

00:14:09.760 --> 00:14:11.410
We're not going to
cover that as much.

00:14:11.410 --> 00:14:13.160
but remember this is
a very important part

00:14:13.160 --> 00:14:16.210
to think about too.

00:14:16.210 --> 00:14:17.990
And finally, update
size-- so why

00:14:17.990 --> 00:14:20.630
is the update size different
than the download size?

00:14:20.630 --> 00:14:23.770
Well, I don't know if you're
aware, but for many years

00:14:23.770 --> 00:14:25.850
now, Play Store has
supported delta updates

00:14:25.850 --> 00:14:29.060
or, in other words,
downloading patches.

00:14:29.060 --> 00:14:33.410
How that works is, first of
all, when a developer uploads

00:14:33.410 --> 00:14:36.140
a new APK on the Play
Store, Play Store

00:14:36.140 --> 00:14:39.580
will compute the difference or
the delta between the old APK

00:14:39.580 --> 00:14:41.804
and the new APK.

00:14:41.804 --> 00:14:43.470
It's just basically
a minute difference.

00:14:43.470 --> 00:14:46.950
It uses an algorithm to figure
out which bytes are similar

00:14:46.950 --> 00:14:51.440
and how it can send only
certain bytes over the network.

00:14:51.440 --> 00:14:54.250
Then the delta can be
additionally compressed.

00:14:54.250 --> 00:14:57.740
And, finally, the client only
downloads the difference,

00:14:57.740 --> 00:15:01.840
the delta file, and reconstruct
the new APK on-device.

00:15:01.840 --> 00:15:05.260
So the final result
is as if the user

00:15:05.260 --> 00:15:08.395
had the whole APK, the new
signature and everything.

00:15:08.395 --> 00:15:10.770
But it's just reconstructed
on the devise from this patch

00:15:10.770 --> 00:15:11.530
file.

00:15:11.530 --> 00:15:14.860
And one thing we've been
a little bit vague about,

00:15:14.860 --> 00:15:16.830
like I said-- uses
some algorithm,

00:15:16.830 --> 00:15:18.440
can be compressed and so on.

00:15:18.440 --> 00:15:21.020
And we weren't really
telling you what kind

00:15:21.020 --> 00:15:23.450
of algorithms Play
uses for that,

00:15:23.450 --> 00:15:24.920
and there was a reason for it.

00:15:24.920 --> 00:15:27.930
So the Play Store team always
wants to improve on that.

00:15:27.930 --> 00:15:30.290
And they've been
experimenting a lot,

00:15:30.290 --> 00:15:33.550
and it wouldn't make any sense
to give out this information

00:15:33.550 --> 00:15:35.380
and then it would
change the next day.

00:15:35.380 --> 00:15:39.620
But, actually, let me talk
a little bit about the most

00:15:39.620 --> 00:15:41.840
recent Play improvements
on that field.

00:15:41.840 --> 00:15:44.710
And we have a new
delta algorithm.

00:15:44.710 --> 00:15:48.020
We are using BSDiff now
for computing the deltas.

00:15:48.020 --> 00:15:50.530
And we've seen some
major, major improvements

00:15:50.530 --> 00:15:54.290
for reducing this delta size.

00:15:54.290 --> 00:15:56.610
So, for example, a
major update Chrome,

00:15:56.610 --> 00:16:01.630
so like a big change from
one APK to a second APK,

00:16:01.630 --> 00:16:04.350
from a certain version
to a newer one, used

00:16:04.350 --> 00:16:07.670
to take 22 megs
or almost 23 megs

00:16:07.670 --> 00:16:09.230
on the previous algorithms.

00:16:09.230 --> 00:16:13.015
With the new one, it's down to
13 megs With a minor update,

00:16:13.015 --> 00:16:16.600
the difference is a little bit
different-- again, from 15 megs

00:16:16.600 --> 00:16:19.160
to 3 megs So imagine
instead of downloading

00:16:19.160 --> 00:16:24.475
a whole tens of megabytes
whole package of Chrome,

00:16:24.475 --> 00:16:26.850
you download only 3 megs and
have a new version installed

00:16:26.850 --> 00:16:30.010
on your device.

00:16:30.010 --> 00:16:33.060
From other news,
we've also introduced

00:16:33.060 --> 00:16:37.250
patching and compression
for the APK expansion files.

00:16:37.250 --> 00:16:40.480
That's mostly used for games,
but it's super important.

00:16:40.480 --> 00:16:42.210
That's because games
usually have lots

00:16:42.210 --> 00:16:45.132
of textures, huge level files.

00:16:45.132 --> 00:16:48.380
APK expansion files can be
like a gigabyte in size.

00:16:48.380 --> 00:16:50.110
Imagine this from
version to version.

00:16:50.110 --> 00:16:52.670
You have to download and
over and over a gig and a gig

00:16:52.670 --> 00:16:57.570
and again a gig-- lots
of bandwidth wasted.

00:16:57.570 --> 00:17:02.180
We're now saving over a petabyte
of data per day for our users,

00:17:02.180 --> 00:17:02.870
thanks to that.

00:17:05.640 --> 00:17:08.230
But I can talk to you
developers about that.

00:17:08.230 --> 00:17:11.829
You will be happy that you have
smaller update sizes and so on.

00:17:11.829 --> 00:17:15.099
But what's really important is
to show the benefits to users.

00:17:15.099 --> 00:17:19.380
So starting now, Play Store
will show download size instead

00:17:19.380 --> 00:17:21.630
of APK size on the Play Store.

00:17:21.630 --> 00:17:25.920
And in case of an update, users
will only see the update size.

00:17:25.920 --> 00:17:27.439
So users will be more happy.

00:17:27.439 --> 00:17:29.480
They will see the benefits
of all your hard work,

00:17:29.480 --> 00:17:35.470
of all the work of the
Play Store people do.

00:17:35.470 --> 00:17:37.900
It's great.

00:17:37.900 --> 00:17:40.670
But Play Store is just
one component, right?

00:17:40.670 --> 00:17:43.370
They can only do so
much on the server side,

00:17:43.370 --> 00:17:46.660
especially with the signing
that has to be left intact.

00:17:46.660 --> 00:17:48.470
So we also have some
cool improvements

00:17:48.470 --> 00:17:53.460
in Android Studio 2.2,
which is out in preview now.

00:17:53.460 --> 00:17:56.360
So they've been working on
the whole packaging subsystem

00:17:56.360 --> 00:18:01.240
and optimizing it to create
APK files that are actually

00:18:01.240 --> 00:18:04.390
better for computing
of those delta updates.

00:18:04.390 --> 00:18:07.340
So, first of all, they started
sorting files in the archive

00:18:07.340 --> 00:18:09.030
so that things don't
move around a bit,

00:18:09.030 --> 00:18:12.460
because then the
delta algorithms get

00:18:12.460 --> 00:18:15.730
confused and can't figure out
the most optimal solution.

00:18:15.730 --> 00:18:17.796
They zero out all
the time stamps,

00:18:17.796 --> 00:18:22.430
zero out any empty space, like
useless comments and so on.

00:18:22.430 --> 00:18:24.820
And finally, they're
introducing the option

00:18:24.820 --> 00:18:29.910
to store uncompressed
native code-- so SO files.

00:18:29.910 --> 00:18:32.320
And I already told
you about that.

00:18:32.320 --> 00:18:34.322
I will get to that later
in the presentation.

00:18:37.490 --> 00:18:42.870
So what you can do if you
want to actually measure

00:18:42.870 --> 00:18:45.930
if your efforts, if what
Android Studio is doing

00:18:45.930 --> 00:18:48.230
is doing any good for
your update size--

00:18:48.230 --> 00:18:51.290
and I'm happy to say we
finally released a tool that

00:18:51.290 --> 00:18:54.570
will help you estimate-- let
me stress that-- estimate

00:18:54.570 --> 00:18:55.670
the update size.

00:18:55.670 --> 00:18:59.410
Again, there may
be new algorithms.

00:18:59.410 --> 00:19:01.380
There may be experiments
that are going on.

00:19:01.380 --> 00:19:03.340
But this will give
you a good estimate

00:19:03.340 --> 00:19:06.480
on the current algorithms and
how they work for your APK.

00:19:06.480 --> 00:19:10.020
So basically you run against
an old APK, a new APK.

00:19:10.020 --> 00:19:11.550
You see the size
difference, and you

00:19:11.550 --> 00:19:16.135
can see if any changes you
make makes sense for that.

00:19:19.326 --> 00:19:21.200
So now moving on to the
second section, which

00:19:21.200 --> 00:19:25.600
is kind of like a tips, recipes
on how to actually make your

00:19:25.600 --> 00:19:26.920
APKs smaller.

00:19:26.920 --> 00:19:31.110
And let's go through
some of those things.

00:19:31.110 --> 00:19:32.770
And first of all,
how many of you

00:19:32.770 --> 00:19:36.380
had read my articles on
"Medium" on keeping APK low?

00:19:36.380 --> 00:19:37.110
Some of you?

00:19:37.110 --> 00:19:40.340
OK, so let me first explain
one point of contention

00:19:40.340 --> 00:19:43.510
about using Zopfli
compression for APK.

00:19:43.510 --> 00:19:46.340
So in the articles,
I actually wrote

00:19:46.340 --> 00:19:48.180
you can reduce the
size of your APK

00:19:48.180 --> 00:19:50.310
just by using a better
compression method.

00:19:50.310 --> 00:19:51.410
It's called Zopfli.

00:19:51.410 --> 00:19:54.360
It's an algorithm that was
created by Google engineers.

00:19:54.360 --> 00:19:59.330
And, yes, it did make your APK
smaller by a couple of percent.

00:19:59.330 --> 00:20:02.600
Nothing much changed for users.

00:20:02.600 --> 00:20:06.400
They were decompressed just
as fast and so on and so on.

00:20:06.400 --> 00:20:10.980
But currently, we advise against
using Zopfli for your APK.

00:20:10.980 --> 00:20:14.450
So, first of all,
some users did write

00:20:14.450 --> 00:20:17.280
to me saying that certain
devices and certain versions

00:20:17.280 --> 00:20:21.340
of Android might have
had a kind of problem

00:20:21.340 --> 00:20:23.540
with Zopfli-compressed APK.

00:20:23.540 --> 00:20:25.790
They just threw an exception.

00:20:25.790 --> 00:20:27.210
So that's one thing.

00:20:27.210 --> 00:20:30.090
Another thing is they
take an awful lot of time

00:20:30.090 --> 00:20:32.400
to compress on your computer.

00:20:32.400 --> 00:20:34.830
Well, you don't make a
release every five minutes,

00:20:34.830 --> 00:20:36.800
so it's not that of a big deal.

00:20:36.800 --> 00:20:38.920
But the next thing is
really, really important.

00:20:38.920 --> 00:20:41.110
So, like I said,
the Play Store team

00:20:41.110 --> 00:20:42.730
likes experimenting with stuff.

00:20:42.730 --> 00:20:44.610
And actually, using
Zopfli, because it's

00:20:44.610 --> 00:20:48.790
so resource-intensive and
needs so much CPU and memory

00:20:48.790 --> 00:20:52.930
to compress, in the
future, it might actually

00:20:52.930 --> 00:20:57.880
make new kinds of differential
updates impossible.

00:20:57.880 --> 00:21:00.410
So, if you read my
articles, if you

00:21:00.410 --> 00:21:03.270
are thinking of using
Zopfli, forget about it--

00:21:03.270 --> 00:21:06.650
just don't, especially since
the new packaging system

00:21:06.650 --> 00:21:09.530
in Android Studio actually
experiments when compressing

00:21:09.530 --> 00:21:10.870
files in your archive.

00:21:10.870 --> 00:21:13.720
And it actually figures out
the best gzip compression

00:21:13.720 --> 00:21:15.130
for the files.

00:21:15.130 --> 00:21:20.380
So that's also something
new in Android Studio 2.2.

00:21:20.380 --> 00:21:23.640
Next, images-- how many of you
have been to Colt's session

00:21:23.640 --> 00:21:26.650
just before?

00:21:26.650 --> 00:21:27.590
Yep.

00:21:27.590 --> 00:21:31.620
So I'm just going
to do a quick recap.

00:21:31.620 --> 00:21:35.640
Remember that you can always
pre-optimize your images.

00:21:35.640 --> 00:21:39.360
The tools that we currently
have in Android Studio in our

00:21:39.360 --> 00:21:42.660
build tools, don't always do
the best job of figuring out

00:21:42.660 --> 00:21:44.560
the best compression
for images, the best

00:21:44.560 --> 00:21:46.270
optimizations they can make.

00:21:46.270 --> 00:21:50.960
So you are free to use external
tools to preprocess images

00:21:50.960 --> 00:21:53.260
in your drawable folders.

00:21:53.260 --> 00:21:55.151
They might be a lot
smaller from that.

00:21:55.650 --> 00:21:59.070
Just remember that
you used to have

00:21:59.070 --> 00:22:01.830
to add these lines
to your build.gradle.

00:22:01.830 --> 00:22:05.910
That's simply because, again,
the packaging system had

00:22:05.910 --> 00:22:08.970
its own optimizer, and
it wasn't, let's say,

00:22:08.970 --> 00:22:12.970
smart enough to figure out that
if you preprocess an image,

00:22:12.970 --> 00:22:17.080
then our build tools
process it again.

00:22:17.080 --> 00:22:19.660
They could actually make
it a little bit bigger.

00:22:19.660 --> 00:22:23.240
So this actually disables
crunching of images

00:22:23.240 --> 00:22:26.630
so that your preprocessing
is left intact.

00:22:26.630 --> 00:22:31.740
I'm happy to say I've talked to
the people at Android Studio.

00:22:31.740 --> 00:22:34.700
And they promised me this
will be fixed for Android 2.2.

00:22:34.700 --> 00:22:40.270
So the build tools will be
smart enough to figure that out.

00:22:40.270 --> 00:22:45.440
One easy win you can
have with your PNG images

00:22:45.440 --> 00:22:47.260
is actually Zopfli-fy them.

00:22:47.260 --> 00:22:50.490
So, again, this better
compression algorithm

00:22:50.490 --> 00:22:53.700
called Zopfli, turns
out it's OK for images.

00:22:53.700 --> 00:22:55.490
You can use it for PNG files.

00:22:55.490 --> 00:22:57.810
There's tools that
do that for you.

00:22:57.810 --> 00:22:58.855
It's completely lossless.

00:22:58.855 --> 00:22:59.980
It doesn't change anything.

00:22:59.980 --> 00:23:02.070
The images look the same.

00:23:02.070 --> 00:23:06.520
They work as fast, and it's
an easy win for file size.

00:23:09.130 --> 00:23:13.430
WEBP-- it's an older image
format developed with Google.

00:23:13.430 --> 00:23:17.910
It gives about 30% smaller image
sizes than JPEGs, for example.

00:23:17.910 --> 00:23:20.930
And you can use WEBP
for your images.

00:23:20.930 --> 00:23:24.910
Again, just remember one
thing; support for WEBP

00:23:24.910 --> 00:23:31.450
was added in Android 4.0, but
only to replace JPEGS or PNG

00:23:31.450 --> 00:23:33.170
images with no transparency.

00:23:33.170 --> 00:23:37.740
And that's because only
Android 4.2.1 added support

00:23:37.740 --> 00:23:43.230
for new WEBP formats, including
lossless and transparent.

00:23:43.230 --> 00:23:47.230
So then you can
replace all your PNGs,

00:23:47.230 --> 00:23:49.310
and also remember to
use it server side.

00:23:49.310 --> 00:23:53.900
This is really the biggest win,
because if your app downloads

00:23:53.900 --> 00:23:56.280
a lot of images, if you
know it's on Android,

00:23:56.280 --> 00:23:59.746
your server can just generate
WEBPs instead of JPEGS.

00:23:59.746 --> 00:24:02.540
You will save your users
a lot of bandwidth,

00:24:02.540 --> 00:24:04.900
and you will save a lot
of space on the device

00:24:04.900 --> 00:24:06.030
if you cache those images.

00:24:09.440 --> 00:24:13.020
If you can, on Android 5.0, of
course, use VectorDrawables.

00:24:13.020 --> 00:24:15.060
It's a great text-based format.

00:24:15.060 --> 00:24:16.840
It compresses very well.

00:24:16.840 --> 00:24:21.150
It's just amazing for icons .

00:24:21.150 --> 00:24:25.210
If you are targeting still
previous versions of Android

00:24:25.210 --> 00:24:29.160
before 5.0, there's two
ways you can actually

00:24:29.160 --> 00:24:30.450
use VectorDrawables.

00:24:30.450 --> 00:24:32.240
So, for some time
in Android Studio,

00:24:32.240 --> 00:24:36.840
we've had support for generating
PNGs from your VectorDrawables.

00:24:36.840 --> 00:24:40.130
So if you put VectorDrawables
in your Drawable folder and add

00:24:40.130 --> 00:24:43.400
these lines to Android
Studio, during compile,

00:24:43.400 --> 00:24:46.150
during building your APK, it
will actually generate those

00:24:46.150 --> 00:24:50.350
PNGs for you for those
older devices who cannot use

00:24:50.350 --> 00:24:51.930
VectorDrawables.

00:24:51.930 --> 00:24:59.280
And after that, we finally
got VectorDrawableCompat,

00:24:59.280 --> 00:25:02.830
so that's a more
problematic way of using it

00:25:02.830 --> 00:25:05.760
from the support library,
where you can actually

00:25:05.760 --> 00:25:10.280
use VectorDrawables on your
image views, [INAUDIBLE] code.

00:25:10.280 --> 00:25:13.560
It just works.

00:25:13.560 --> 00:25:15.520
Of course, there's a
little bit more to it.

00:25:15.520 --> 00:25:18.800
But for that, I suggest you
go to Chris Bane's session,

00:25:18.800 --> 00:25:20.797
where he will probably
talk about that.

00:25:23.660 --> 00:25:25.670
And finally,
shapeDrawables-- this

00:25:25.670 --> 00:25:28.590
has been in Android
since 1.0, and I think

00:25:28.590 --> 00:25:30.160
it's really under-appreciated.

00:25:30.160 --> 00:25:33.330
So VectorDrawables are great.

00:25:33.330 --> 00:25:37.510
You can do lots of complex
shapes in VectorDrawables,

00:25:37.510 --> 00:25:40.250
but they're not always
available, like I just said.

00:25:40.250 --> 00:25:42.700
ShapeDrawables, however,
have been there forever,

00:25:42.700 --> 00:25:44.740
and they're great
for simple shapes,

00:25:44.740 --> 00:25:48.660
like button backgrounds,
borders, gradients.

00:25:48.660 --> 00:25:51.420
They're super, super
optimized, super performant.

00:25:51.420 --> 00:25:55.520
So if you can use a
ShapeDrawable, just please do.

00:25:55.520 --> 00:25:58.330
And, like I said,
this was a quick recap

00:25:58.330 --> 00:26:03.410
of what Colt was talking about
an hour ago here on this stage.

00:26:03.410 --> 00:26:05.730
But since everything
is recorded,

00:26:05.730 --> 00:26:07.510
I encourage those
of you who haven't

00:26:07.510 --> 00:26:09.750
been able to attend the
session or are those of you

00:26:09.750 --> 00:26:12.150
watching online to go and
check out his session on image

00:26:12.150 --> 00:26:14.080
compression.

00:26:14.080 --> 00:26:17.430
So that's what we can
do to resources, right?

00:26:17.430 --> 00:26:18.840
But what about code?

00:26:18.840 --> 00:26:22.600
And really with your code,
with the size of your code,

00:26:22.600 --> 00:26:24.810
there's one thing I want
to tell you-- use ProGuard.

00:26:24.810 --> 00:26:29.480
You will hate it, but
use ProGuard, please do.

00:26:29.480 --> 00:26:30.500
It's very easy.

00:26:30.500 --> 00:26:33.280
No really, it's very easy to
add to your build.gradle file,

00:26:33.280 --> 00:26:36.000
and then things will break.

00:26:36.000 --> 00:26:38.550
So, yeah, just add this line.

00:26:38.550 --> 00:26:42.940
There's also a new way of
using the built-in shrinker

00:26:42.940 --> 00:26:43.930
in our tools.

00:26:43.930 --> 00:26:47.690
So if you do minifyEnabled
true, that enables ProGuard.

00:26:47.690 --> 00:26:50.890
But you can then go and
actually say use ProGuard false,

00:26:50.890 --> 00:26:52.754
and this will use our
built-in shrinker.

00:26:52.754 --> 00:26:55.170
It's a little bit faster, but
it doesn't do all the things

00:26:55.170 --> 00:26:55.961
that ProGuard does.

00:26:55.961 --> 00:26:58.020
So it just removes classes.

00:26:58.020 --> 00:26:59.204
It doesn't obfuscate.

00:26:59.204 --> 00:27:01.370
But it works better within
[INAUDIBLE], for example.

00:27:01.370 --> 00:27:04.930
But anyway, whichever
option you decide to use,

00:27:04.930 --> 00:27:08.240
you don't have this notion of
ProGuard configuration files.

00:27:08.240 --> 00:27:11.620
And by default, we
have one in the SDK,

00:27:11.620 --> 00:27:15.950
which has some of the same
defaults for any Android app.

00:27:15.950 --> 00:27:20.490
So, for example, the built-in
ProGuard file already

00:27:20.490 --> 00:27:24.980
has rules that keep all
the setters and getters

00:27:24.980 --> 00:27:26.980
on your view so that
animations work and so

00:27:26.980 --> 00:27:29.620
on, because otherwise they
would be optimized the way,

00:27:29.620 --> 00:27:32.120
and your app will break.

00:27:32.120 --> 00:27:34.410
But then, if you're not
familiar with ProGuard rules,

00:27:34.410 --> 00:27:35.750
it's a really complex topic.

00:27:35.750 --> 00:27:38.160
I will not teach you that here.

00:27:38.160 --> 00:27:39.300
But you can go and look.

00:27:39.300 --> 00:27:42.500
In your Builds folders
in the Android Studio,

00:27:42.500 --> 00:27:44.540
there's actually an
auto-generated file.

00:27:44.540 --> 00:27:47.580
It's generated by AAPT,
and it looks basically

00:27:47.580 --> 00:27:48.380
at your Android.

00:27:48.380 --> 00:27:48.910
Manifest.

00:27:48.910 --> 00:27:50.980
It looks at your
layouts, and it generates

00:27:50.980 --> 00:27:52.990
rules for your
activities, for you views

00:27:52.990 --> 00:27:54.370
that you use in your layouts.

00:27:54.370 --> 00:27:58.530
And, again, by looking at those
and by looking at the default

00:27:58.530 --> 00:28:01.710
ProGuard file, you can learn a
lot and start writing your own.

00:28:04.750 --> 00:28:06.936
And there's also
another easy way.

00:28:06.936 --> 00:28:08.560
If you know that
you're doing something

00:28:08.560 --> 00:28:11.350
in your code that
will be optimized away

00:28:11.350 --> 00:28:13.190
because you access
it by a reflection,

00:28:13.190 --> 00:28:14.730
for example, there's a new way.

00:28:14.730 --> 00:28:16.250
Just add an annotation keep.

00:28:16.250 --> 00:28:17.890
Use the new build tools.

00:28:17.890 --> 00:28:19.470
ProGuard will just
leave it as is.

00:28:19.470 --> 00:28:21.650
It will not be removed
from your code.

00:28:24.870 --> 00:28:27.530
If you're writing
libraries for other users

00:28:27.530 --> 00:28:30.950
or just libraries that are
components in your app,

00:28:30.950 --> 00:28:34.740
sometimes those libraries just
need their own ProGuard rules

00:28:34.740 --> 00:28:37.600
so that when someone uses them,
they don't break their app.

00:28:37.600 --> 00:28:39.304
And just remember,
be a good citizen.

00:28:39.304 --> 00:28:40.720
If you're writing
a library, if it

00:28:40.720 --> 00:28:44.340
needs ProGuard, you can put
your own ProGuard configuration

00:28:44.340 --> 00:28:47.520
inside your library, and
then anyone who imports it,

00:28:47.520 --> 00:28:48.990
it will just work.

00:28:54.270 --> 00:28:58.790
But you can't always remove
code because you don't need it.

00:28:58.790 --> 00:29:02.290
So sometimes you
actually need the things

00:29:02.290 --> 00:29:04.830
you are adding to your
project, but it's not

00:29:04.830 --> 00:29:07.130
easy to keep track
of all the libraries

00:29:07.130 --> 00:29:09.680
that bring in other libraries
and other libraries and so on.

00:29:09.680 --> 00:29:12.920
So we call these
transitive dependencies.

00:29:12.920 --> 00:29:16.340
And if you add
just one dependency

00:29:16.340 --> 00:29:18.500
to your build.gradle
file, it may

00:29:18.500 --> 00:29:22.040
bring in lots and lots of
those transitive dependencies.

00:29:22.040 --> 00:29:27.170
So if you weren't aware, there's
a cool command line command

00:29:27.170 --> 00:29:29.240
for gradle that will let
you see a tree of all

00:29:29.240 --> 00:29:31.810
those dependencies that you
bring in with your libraries.

00:29:31.810 --> 00:29:33.690
And here, the only
advice is just

00:29:33.690 --> 00:29:36.990
be aware of what you're using
and what kind of libraries

00:29:36.990 --> 00:29:39.010
you're pulling in and
make the right decisions

00:29:39.010 --> 00:29:40.830
by looking at this.

00:29:40.830 --> 00:29:45.500
And if you're still
not sure if what's

00:29:45.500 --> 00:29:48.420
inside your APK,
what kind of classes

00:29:48.420 --> 00:29:50.170
finally make it
through the ProGuard,

00:29:50.170 --> 00:29:52.700
through the optimizations,
through pulling

00:29:52.700 --> 00:29:54.490
in other libraries,
there's a tool

00:29:54.490 --> 00:29:57.530
that we open sourced
recently called ClassyShark.

00:29:57.530 --> 00:30:00.370
And it's basically
an APK explorer.

00:30:00.370 --> 00:30:02.940
So it will let you go
into your dex files.

00:30:02.940 --> 00:30:04.830
It will show you
all the packages.

00:30:04.830 --> 00:30:07.010
They're great for
debugging ProGuard.

00:30:07.010 --> 00:30:09.780
And you will do that a lot if
you enable it for your app,

00:30:09.780 --> 00:30:11.481
let me tell you.

00:30:11.481 --> 00:30:14.720
And I really encourage
you to try it.

00:30:14.720 --> 00:30:19.710
So we have ProGuard
for byte code.

00:30:19.710 --> 00:30:23.320
But if you go through this
pain of enabling ProGuard,

00:30:23.320 --> 00:30:26.050
you actually get one more
very important thing,

00:30:26.050 --> 00:30:27.840
and that's the
resource shrinker.

00:30:27.840 --> 00:30:30.050
And once you have
ProGuard enabled,

00:30:30.050 --> 00:30:33.510
you can get another option
called shrinkResources true,

00:30:33.510 --> 00:30:38.230
and that will go and figure
out which resources in your app

00:30:38.230 --> 00:30:41.500
are actually referenced
from the code--

00:30:41.500 --> 00:30:45.670
from the code that's left
after ProGuard runs its course.

00:30:45.670 --> 00:30:47.820
And it can remove
any resource that

00:30:47.820 --> 00:30:51.065
is unused in your code,
which is pretty awesome.

00:30:53.800 --> 00:30:56.770
And, again, it has
a configuration.

00:30:56.770 --> 00:31:00.470
So you can add this really
on any resource file,

00:31:00.470 --> 00:31:05.170
on any XML resource in
your Resource folder.

00:31:05.170 --> 00:31:10.580
Just add this tools:keep or
tools:discard attributes,

00:31:10.580 --> 00:31:14.490
and you can make sure that if
there are resources that you

00:31:14.490 --> 00:31:18.700
want to have in your APK, or if
you explicitly want to remove

00:31:18.700 --> 00:31:22.690
something from your APK,
that's where you configure it--

00:31:22.690 --> 00:31:26.280
so a little bit like ProGuard
rules, only for resources.

00:31:26.280 --> 00:31:29.770
And then sometimes it happens
that if you pull in a library,

00:31:29.770 --> 00:31:32.480
even like Google Play Services
or the support library,

00:31:32.480 --> 00:31:36.620
we offer translations for many
languages in those libraries.

00:31:36.620 --> 00:31:40.000
But what if you're making
an app just for one market,

00:31:40.000 --> 00:31:43.320
just for one language or
just for two languages?

00:31:43.320 --> 00:31:45.540
If you know that there will
be no users of your app

00:31:45.540 --> 00:31:47.530
or that you don't
manage translations

00:31:47.530 --> 00:31:50.370
for other languages,
then you don't really

00:31:50.370 --> 00:31:52.770
need all those resources
from those other libraries,

00:31:52.770 --> 00:31:55.750
like the Support library,
for all those other languages

00:31:55.750 --> 00:31:57.340
that you do not support.

00:31:57.340 --> 00:31:59.510
So just use restConfigs.

00:31:59.510 --> 00:32:02.470
Just put the names of
the configurations,

00:32:02.470 --> 00:32:03.930
or the languages
in this example,

00:32:03.930 --> 00:32:06.510
that you want to
make it to your APK,

00:32:06.510 --> 00:32:08.660
and the rest will
be simply removed.

00:32:08.660 --> 00:32:13.250
And one side note here-- there's
a lot of tips on Stack Overflow

00:32:13.250 --> 00:32:18.370
and other places about using
this for stripping resources

00:32:18.370 --> 00:32:20.170
for other densities.

00:32:20.170 --> 00:32:24.060
That was supported a long
time ago in ancient versions

00:32:24.060 --> 00:32:25.830
of our gradle plugin.

00:32:25.830 --> 00:32:28.700
You can't really specify
many densities here.

00:32:28.700 --> 00:32:33.780
So don't use it for densities,
unless you specify only one.

00:32:33.780 --> 00:32:36.550
But that's kind of a
very advanced usage.

00:32:36.550 --> 00:32:41.240
So we have restConfigs
for resources.

00:32:41.240 --> 00:32:44.580
We have shrinkResources,
ProGuard.

00:32:44.580 --> 00:32:47.140
But there is one very,
very advanced technique

00:32:47.140 --> 00:32:49.660
that probably not many
people are aware of,

00:32:49.660 --> 00:32:53.050
and that's the problem of
sparse resource confligs.

00:32:53.050 --> 00:32:58.350
And so, if you notice that your
resources.arc file is bloated--

00:32:58.350 --> 00:33:00.280
it's very big,
but you don't know

00:33:00.280 --> 00:33:03.990
why-- it's worth
trying to figure out

00:33:03.990 --> 00:33:05.240
if maybe that is your problem.

00:33:05.240 --> 00:33:06.930
And let me try to explain that.

00:33:06.930 --> 00:33:08.690
It's not very simple.

00:33:08.690 --> 00:33:11.870
So I'm not going to teach
you how the resources file

00:33:11.870 --> 00:33:12.920
format works.

00:33:12.920 --> 00:33:15.550
Let me tell you this is
a big oversimplification.

00:33:15.550 --> 00:33:18.390
But hopefully, it'll
get the point across.

00:33:18.390 --> 00:33:21.870
So imagine you have an
app that has five strings.

00:33:21.870 --> 00:33:23.710
The strings are somewhere
in a string pool.

00:33:23.710 --> 00:33:25.150
They take up some memory.

00:33:25.150 --> 00:33:27.070
And then you have
your default config.

00:33:27.070 --> 00:33:29.180
You have your string--
My App, Hello, Exit,

00:33:29.180 --> 00:33:32.430
and so on-- just labels
for things in your app.

00:33:32.430 --> 00:33:37.050
But then you decide, well, I'm
adding a new feature to my app.

00:33:37.050 --> 00:33:39.350
It's going to be named New
Feature instead of Feature,

00:33:39.350 --> 00:33:41.530
so you get a new string, right?

00:33:41.530 --> 00:33:45.370
But this new feature only
works for version 21 and above.

00:33:45.370 --> 00:33:46.770
So you have a config.

00:33:46.770 --> 00:33:52.910
You create a new folder under
your resources with v21.

00:33:52.910 --> 00:33:55.870
And you're just
switching this Feature

00:33:55.870 --> 00:33:58.330
to a New Feature in that config.

00:33:58.330 --> 00:34:01.120
Well, it should take up only
space for one string, right?

00:34:01.120 --> 00:34:04.770
But it actually has
to keep new entries

00:34:04.770 --> 00:34:06.780
on all the positions
for other strings

00:34:06.780 --> 00:34:08.520
that you're not
using in this config.

00:34:08.520 --> 00:34:09.860
So you lose a lot of space.

00:34:09.860 --> 00:34:11.770
It still takes up
a lot of space,

00:34:11.770 --> 00:34:14.130
even though you're
just using this

00:34:14.130 --> 00:34:15.750
to override this one string.

00:34:15.750 --> 00:34:19.630
And I know these kind of
bytes, who cares about bytes?

00:34:19.630 --> 00:34:22.310
But if you think about
that, if you have an app

00:34:22.310 --> 00:34:26.739
that has 3,000 strings, if
you have 50 translations--

00:34:26.739 --> 00:34:29.831
and there's a lot of apps
among the top 100 apps

00:34:29.831 --> 00:34:30.580
on the Play Store.

00:34:30.580 --> 00:34:34.929
I'm sure lots of them
have even more than that.

00:34:34.929 --> 00:34:39.989
The cost of adding a single
training for v21, for example,

00:34:39.989 --> 00:34:43.230
that's translated
for 50 languages

00:34:43.230 --> 00:34:45.770
would give you 600
kilobytes overhead,

00:34:45.770 --> 00:34:47.830
and that's something
we can work with,

00:34:47.830 --> 00:34:51.060
especially if we can have
lots of other dimensions

00:34:51.060 --> 00:34:52.860
than just v21.

00:34:52.860 --> 00:34:55.360
You can actually
shrink your file a lot.

00:34:55.360 --> 00:34:57.470
But how do you know
that you're doing this?

00:34:57.470 --> 00:35:00.840
It's not very easy to guess
which string do I remove?

00:35:00.840 --> 00:35:03.280
And we just recently
open-sourced

00:35:03.280 --> 00:35:06.067
a tool called ArscBlamer.

00:35:06.067 --> 00:35:07.460
It's on GitHub.

00:35:07.460 --> 00:35:09.490
I'm going to post
those links later.

00:35:09.490 --> 00:35:12.570
Don't worry on the
spaces-- application

00:35:12.570 --> 00:35:14.250
on our space for this talk.

00:35:14.250 --> 00:35:16.300
And basically, it's
a command line tool.

00:35:16.300 --> 00:35:19.680
You run your APK through
it, and you get a CSV file.

00:35:19.680 --> 00:35:21.550
You upload the CSV
to Sheets or use

00:35:21.550 --> 00:35:27.080
some other program for
that, and it gives you

00:35:27.080 --> 00:35:30.010
this kind of nice overview
of where the resources are

00:35:30.010 --> 00:35:31.320
in your application.

00:35:31.320 --> 00:35:37.290
And if you sort that by
the null entries column,

00:35:37.290 --> 00:35:41.730
then you can find which configs
are the most sparse in app--

00:35:41.730 --> 00:35:44.620
so which configs
wastes the most space.

00:35:44.620 --> 00:35:48.700
So, in this example, if you
look at the right-most column,

00:35:48.700 --> 00:35:53.840
I can identify that the
string that's called Apps List

00:35:53.840 --> 00:35:56.965
is wasting almost 200
kilobytes in my app.

00:35:56.965 --> 00:35:59.430
Well, 200 kilobytes
is not a lot, right?

00:35:59.430 --> 00:36:03.550
But the next one, if I
remove descriptive text one,

00:36:03.550 --> 00:36:06.130
I'm saving one megabyte
from this file.

00:36:06.130 --> 00:36:08.260
And you can do
this over and over,

00:36:08.260 --> 00:36:12.390
and remove a lot of
really unneeded data

00:36:12.390 --> 00:36:14.250
from your resources.

00:36:14.250 --> 00:36:17.010
And some of our
apps, I want to say,

00:36:17.010 --> 00:36:20.910
remove 2 and 1/2 megs by
removing just three strings.

00:36:20.910 --> 00:36:24.680
So that's a pretty big savings.

00:36:24.680 --> 00:36:26.240
So that's that.

00:36:26.240 --> 00:36:30.370
Let me just say that it really
works for only big apps.

00:36:30.370 --> 00:36:33.110
If your app is not really huge
with lots of configurations

00:36:33.110 --> 00:36:36.510
and so on, then probably you
won't get anything from that.

00:36:36.510 --> 00:36:39.070
And finally, getting
to the native libraries

00:36:39.070 --> 00:36:43.100
that I mentioned so many times
already-- so since Android 6.0

00:36:43.100 --> 00:36:47.110
Marshmallow, we have
this attribute that you

00:36:47.110 --> 00:36:51.240
can add on the application
tag in your manifest,

00:36:51.240 --> 00:36:53.110
ExtractNativeLibs false.

00:36:53.110 --> 00:36:55.940
And basically, what it does,
it instructs just the package

00:36:55.940 --> 00:36:58.930
installer, the system,
to not copy out

00:36:58.930 --> 00:37:02.045
those SO files, the native
libraries, at installation

00:37:02.045 --> 00:37:04.400
from your APK.

00:37:04.400 --> 00:37:06.590
And the other thing
is things just work.

00:37:06.590 --> 00:37:08.340
So if you're using
system.loadLibrary,

00:37:08.340 --> 00:37:12.070
you just don't have
to think about it.

00:37:12.070 --> 00:37:15.620
The SO files will just
stay inside the APK.

00:37:15.620 --> 00:37:16.700
They will just work.

00:37:16.700 --> 00:37:18.800
You don't waste the
space that's used

00:37:18.800 --> 00:37:23.350
for decompressing them
somewhere on the user partition.

00:37:23.350 --> 00:37:25.150
But there are conditions.

00:37:25.150 --> 00:37:27.710
For this to work,
the SO files have

00:37:27.710 --> 00:37:30.470
to be uncompressed in your APK.

00:37:30.470 --> 00:37:32.350
And the other thing is
they must be correctly

00:37:32.350 --> 00:37:34.540
page aligned using Zipalign.

00:37:34.540 --> 00:37:37.340
So up until now,
there was no easy way

00:37:37.340 --> 00:37:39.470
to do that using Android
Studio and our tools.

00:37:39.470 --> 00:37:40.590
It was just not supported.

00:37:40.590 --> 00:37:42.770
You have to go and
manually decompress those

00:37:42.770 --> 00:37:44.610
files and store them and so on.

00:37:44.610 --> 00:37:48.280
I'm happy to say that Android
Studio 2.2 finally does

00:37:48.280 --> 00:37:50.210
that for you automatically.

00:37:50.210 --> 00:37:53.063
So you can enable this option
in the Android manifest

00:37:53.063 --> 00:37:55.570
and see big gains.

00:37:55.570 --> 00:37:59.600
If you're worried that having
uncompressed SO files will just

00:37:59.600 --> 00:38:02.440
bloat your APK, will make
it really big, that's true.

00:38:02.440 --> 00:38:04.850
Raw APK size will go up a bit.

00:38:04.850 --> 00:38:07.450
But remember that Play Store
compresses data anyway,

00:38:07.450 --> 00:38:09.540
so the download size
will not suffer,

00:38:09.540 --> 00:38:12.450
and the delta sizes will
actually be smaller.

00:38:12.450 --> 00:38:14.500
That's because the
BSDiff algorithm

00:38:14.500 --> 00:38:16.030
will be able to
figure out smaller

00:38:16.030 --> 00:38:20.070
deltas for uncompressed SO
files, so win, win, win.

00:38:20.070 --> 00:38:23.176
Just a little bit bigger a
file, but we can live with that.

00:38:27.150 --> 00:38:31.080
And then, I mentioned
before the there's not

00:38:31.080 --> 00:38:34.130
much we can do on the
device with resources

00:38:34.130 --> 00:38:37.840
that are not targeted at
your device's, let's say,

00:38:37.840 --> 00:38:39.500
screen density.

00:38:39.500 --> 00:38:44.530
And if you produce a fat APK,
if the resources are all there,

00:38:44.530 --> 00:38:47.060
there's not really much
we can do about that.

00:38:47.060 --> 00:38:51.490
Unless you actually split your
APK into many smaller APKs,

00:38:51.490 --> 00:38:53.440
targeted at those devices.

00:38:53.440 --> 00:38:56.400
And Android Studio
supports producing

00:38:56.400 --> 00:38:58.130
two kinds of split APKs.

00:38:58.130 --> 00:38:59.570
One of them is density-based.

00:38:59.570 --> 00:39:02.950
So you can actually,
during your compilation,

00:39:02.950 --> 00:39:07.460
you get smaller files
with resources targeted

00:39:07.460 --> 00:39:09.660
at specific screen densities.

00:39:09.660 --> 00:39:12.160
Then you can then upload to
Play Store and use the multi APK

00:39:12.160 --> 00:39:15.890
feature to serve them
only to certain devices.

00:39:15.890 --> 00:39:19.060
And then there is the
ABI-based multi APK.

00:39:19.060 --> 00:39:20.920
So, again, if you
have native libraries

00:39:20.920 --> 00:39:23.870
for all kinds of
CPU architectures,

00:39:23.870 --> 00:39:26.610
that will usually be really
big-- a really big portion

00:39:26.610 --> 00:39:27.600
of your APK.

00:39:27.600 --> 00:39:28.920
So, again, you can split those.

00:39:28.920 --> 00:39:32.180
You can have multiple APKs that
you can upload to Play Store.

00:39:32.180 --> 00:39:36.760
And the users with devices
with certain CPU architecture

00:39:36.760 --> 00:39:41.662
will get only this file that's
suited for their device.

00:39:41.662 --> 00:39:43.120
The only thing you
have to remember

00:39:43.120 --> 00:39:46.519
is every APK has to have
a different version code.

00:39:46.519 --> 00:39:48.060
So there's some
scripts that you need

00:39:48.060 --> 00:39:50.460
to add to your build
APK to make that work.

00:39:50.460 --> 00:39:53.300
I really encourage
you to go and see

00:39:53.300 --> 00:39:57.470
my articles on "Medium," where
I have the necessary snippets.

00:39:57.470 --> 00:40:00.030
There's really no time
today on this session

00:40:00.030 --> 00:40:02.630
to go through all the
code variants for that.

00:40:05.510 --> 00:40:07.980
And example density
split savings-- I just

00:40:07.980 --> 00:40:09.520
took our Topeka sample app.

00:40:09.520 --> 00:40:10.860
It's really image-heavy.

00:40:10.860 --> 00:40:14.070
So, again, results may vary,
but the original Fat APK

00:40:14.070 --> 00:40:15.560
was 3 and 1/2 megs.

00:40:15.560 --> 00:40:18.370
And then if I split that
for different densities,

00:40:18.370 --> 00:40:21.140
it's almost 2 and 1/2
megs saving for everyone.

00:40:25.230 --> 00:40:27.220
And then you can do a lot more.

00:40:27.220 --> 00:40:28.910
You can do custom multi APK.

00:40:28.910 --> 00:40:31.900
You can split things
by minSdkVersion.

00:40:31.900 --> 00:40:35.980
So if you have some features
that only work for 21

00:40:35.980 --> 00:40:38.990
and above, maybe it's
better to start thinking

00:40:38.990 --> 00:40:41.644
about splitting those up.

00:40:41.644 --> 00:40:43.310
That's is pretty
advanced stuff, really,

00:40:43.310 --> 00:40:46.180
so not everyone
wants to do that.

00:40:46.180 --> 00:40:48.380
Then for games, you
split by texture formats.

00:40:48.380 --> 00:40:52.250
You don't have to ship all
textures to every device.

00:40:52.250 --> 00:40:54.140
You can recreate
density in and ABI

00:40:54.140 --> 00:40:58.470
splits using Variance
in Android Studio

00:40:58.470 --> 00:41:01.080
and customize it even more.

00:41:01.080 --> 00:41:04.390
And then, for games mostly, you
will use APK expansion files

00:41:04.390 --> 00:41:07.130
to put all the stuff that
you can fit into the APK

00:41:07.130 --> 00:41:10.410
to a separate file that'll be
downloaded from Android Studio.

00:41:10.410 --> 00:41:13.694
And here's an
example of this file,

00:41:13.694 --> 00:41:16.750
of a build.gradle file
that kind of recreates

00:41:16.750 --> 00:41:19.440
the splits using multi APK.

00:41:19.440 --> 00:41:24.390
Again, I encourage you to
look at my "Medium" articles.

00:41:24.390 --> 00:41:27.850
This will be explained
there better.

00:41:27.850 --> 00:41:29.670
So what's next?

00:41:29.670 --> 00:41:31.210
Go through my articles.

00:41:31.210 --> 00:41:32.880
Go through the
tools that we have.

00:41:32.880 --> 00:41:35.640
And since we have only
three minutes left,

00:41:35.640 --> 00:41:39.740
let me just mention that some
of the tools that I mentioned

00:41:39.740 --> 00:41:42.420
during this talk, we are
actually building those

00:41:42.420 --> 00:41:43.770
into Android Studio.

00:41:43.770 --> 00:41:45.876
So you might have
heard at the keynote

00:41:45.876 --> 00:41:49.540
that there's a new APK
analyzer in Android Studio.

00:41:49.540 --> 00:41:53.170
So I'm happy to say you will
be able to download that

00:41:53.170 --> 00:41:54.870
now and play with it.

00:41:54.870 --> 00:41:59.764
And what this actually does, it
shows you the compressed size

00:41:59.764 --> 00:42:01.420
of your APK.

00:42:01.420 --> 00:42:04.430
It shows you the compressed
sizes of every resource

00:42:04.430 --> 00:42:06.250
inside your APK.

00:42:06.250 --> 00:42:10.620
You can browse classes
in your DEX files.

00:42:10.620 --> 00:42:14.490
You can browse resources, a
little bit like ArscBlamer,

00:42:14.490 --> 00:42:18.540
and then you can also look
at the Android manifest XML,

00:42:18.540 --> 00:42:23.270
as it is in this forum that
is compressed in the APK.

00:42:23.270 --> 00:42:24.802
So I encourage you to try it.

00:42:24.802 --> 00:42:26.010
It's still under development.

00:42:26.010 --> 00:42:27.440
It's an early preview.

00:42:27.440 --> 00:42:31.090
If you have any
feedback, if you think

00:42:31.090 --> 00:42:33.980
you would find some feature
that's missing useful,

00:42:33.980 --> 00:42:38.530
please contact us, and I'm
happy to hear of feedback.

00:42:38.530 --> 00:42:41.590
So thank you very much, and
I'll be open to questions.

00:42:41.590 --> 00:42:42.790
[APPLAUSE]

00:42:42.790 --> 00:42:48.540
[MUSIC PLAYING]

