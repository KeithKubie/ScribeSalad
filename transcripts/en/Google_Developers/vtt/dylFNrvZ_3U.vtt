WEBVTT
Kind: captions
Language: en

00:00:01.480 --> 00:00:03.968
YANIV INBAR: So how do you
like your new Nexus 7?

00:00:03.968 --> 00:00:07.216
[APPLAUSE]

00:00:07.216 --> 00:00:09.730
YANIV INBAR: All right, so
hopefully now that you got a

00:00:09.730 --> 00:00:13.310
Nexus 7 to develop against and
you're ready to build Android

00:00:13.310 --> 00:00:15.960
applications using
your Nexus 7.

00:00:15.960 --> 00:00:18.590
And hopefully, your next step,
once you've got an Android

00:00:18.590 --> 00:00:21.380
application, is to design
it to work with the web.

00:00:21.380 --> 00:00:24.300
And we'll talk about everything
you need to know to

00:00:24.300 --> 00:00:27.660
be able to accomplish that both
working with Google's Web

00:00:27.660 --> 00:00:32.280
APIs as well as being able to
take advantage of Google's

00:00:32.280 --> 00:00:36.800
Cloud platform, the Google App
Engine, to backend your

00:00:36.800 --> 00:00:39.860
Android data on the Cloud.

00:00:39.860 --> 00:00:41.520
So let me introduce ourselves.

00:00:41.520 --> 00:00:43.330
My name is Yaniv Inbar.

00:00:43.330 --> 00:00:45.890
I've worked at Google for about
five and 1/2 years.

00:00:45.890 --> 00:00:48.760
I'm a senior software
engineer.

00:00:48.760 --> 00:00:51.880
I'm the tech lead of the team
that develops open source

00:00:51.880 --> 00:00:54.380
client libraries for
Google APIs.

00:00:54.380 --> 00:00:57.710
And I'm the lead developer of
the Android client library.

00:00:57.710 --> 00:00:58.540
SRIRAM SAROOP: Hey, guys.

00:00:58.540 --> 00:00:59.640
I'm Sriram.

00:00:59.640 --> 00:01:02.560
I'm the product manager in
the Cloud platform team.

00:01:02.560 --> 00:01:05.470
So here I'll be talking about
Cloud Endpoints, how you can

00:01:05.470 --> 00:01:09.040
use App Engine to build great
mobile backends for your

00:01:09.040 --> 00:01:11.020
Android applications.

00:01:11.020 --> 00:01:11.790
YANIV INBAR: So I'm
really excited.

00:01:11.790 --> 00:01:13.820
Because we're going to the
previewing some new

00:01:13.820 --> 00:01:14.340
technology.

00:01:14.340 --> 00:01:16.680
So stay tuned just a moment.

00:01:16.680 --> 00:01:22.100
And I'll start by talking
about Google's Web APIs.

00:01:22.100 --> 00:01:26.185
So about two years ago, I
demoed, we talked about how at

00:01:26.185 --> 00:01:31.140
Google we built this whole new
API infrastructure that was

00:01:31.140 --> 00:01:33.670
supposed to run all of
Google's new APIs.

00:01:33.670 --> 00:01:35.960
And I'm really excited that
by today I think we have

00:01:35.960 --> 00:01:38.810
something like over
30 Google APIs.

00:01:38.810 --> 00:01:41.420
That includes Google+ and
a variety of others.

00:01:41.420 --> 00:01:42.570
So I'll talk a little
about some of the

00:01:42.570 --> 00:01:43.890
ones that are available.

00:01:43.890 --> 00:01:47.510
But the good news is that
we've been able to take

00:01:47.510 --> 00:01:52.640
advantage of the same API
infrastructure and allow you

00:01:52.640 --> 00:01:56.710
to build your own backend for
your Android application on

00:01:56.710 --> 00:01:58.290
Google App Engine.

00:01:58.290 --> 00:02:01.740
So any API that you build on App
Engine will work exactly

00:02:01.740 --> 00:02:02.660
the same way.

00:02:02.660 --> 00:02:05.070
And as I said, Sriram will
talk more about that.

00:02:05.070 --> 00:02:06.620
So stay tuned for that.

00:02:06.620 --> 00:02:09.199
But the goal of this session is
to allow you to be able to

00:02:09.199 --> 00:02:12.360
build your Android
application.

00:02:12.360 --> 00:02:14.370
First of all, to take advantage
of Google's Web

00:02:14.370 --> 00:02:17.520
APIs, so this is a sample of
some of the APIs that are

00:02:17.520 --> 00:02:18.770
available to you to use.

00:02:18.770 --> 00:02:20.540
Google+ is an example.

00:02:20.540 --> 00:02:22.750
You can get profile information
about the user,

00:02:22.750 --> 00:02:25.610
their name, the email address,
of course, with their

00:02:25.610 --> 00:02:29.520
permission, maybe a list of the
activities that they've

00:02:29.520 --> 00:02:30.770
done Google+.

00:02:30.770 --> 00:02:32.730
Google Calendar, you're probably
very familiar with

00:02:32.730 --> 00:02:34.370
that web application.

00:02:34.370 --> 00:02:37.900
There's a very similar
API interface to it.

00:02:37.900 --> 00:02:39.510
They're often JSON formatted.

00:02:39.510 --> 00:02:42.560
And it's very easy
to work with.

00:02:42.560 --> 00:02:44.670
Google Drive just launched
recently.

00:02:44.670 --> 00:02:45.510
That's pretty exciting.

00:02:45.510 --> 00:02:48.700
You can upload and download
documents.

00:02:48.700 --> 00:02:51.900
YouTube just announced today
their new API based on this

00:02:51.900 --> 00:02:54.370
API infrastructure.

00:02:54.370 --> 00:02:56.600
So I think this is pretty
exciting for us.

00:03:00.260 --> 00:03:02.950
So about a year ago, I presented
a session at Google

00:03:02.950 --> 00:03:05.960
I/O talking about best practices
of working with

00:03:05.960 --> 00:03:08.950
Google's Web APIs and announced
the beta release of

00:03:08.950 --> 00:03:10.670
the Java client library.

00:03:10.670 --> 00:03:11.500
So I'm very happy.

00:03:11.500 --> 00:03:12.920
A lot of developments
have gone through.

00:03:12.920 --> 00:03:15.280
We've added a lot more
useful features.

00:03:15.280 --> 00:03:18.150
And one of the things that
surprised me is that a lot of

00:03:18.150 --> 00:03:20.620
you developers were using it,
not just to access Google's

00:03:20.620 --> 00:03:22.730
Web APIs, but really
API on the web.

00:03:22.730 --> 00:03:24.710
And that actually
was my dream.

00:03:24.710 --> 00:03:27.030
I was hoping that you'd be able
to take advantage of the

00:03:27.030 --> 00:03:30.440
same HTTP infrastructure, OAuth,
these are all common

00:03:30.440 --> 00:03:34.570
web standards that any API on
the web that implements it,

00:03:34.570 --> 00:03:37.650
say Twitter API, for example,
you should be able to use this

00:03:37.650 --> 00:03:38.720
same library.

00:03:38.720 --> 00:03:39.650
So what we've done was actually

00:03:39.650 --> 00:03:41.630
split into three projects.

00:03:41.630 --> 00:03:44.040
The first project is
the HTTP library.

00:03:44.040 --> 00:03:49.060
It implements the RFCs
of HTTP be able

00:03:49.060 --> 00:03:50.530
to access any resource.

00:03:50.530 --> 00:03:53.275
And it really goes beyond just
your basic HTTP library.

00:03:53.275 --> 00:03:55.270
It does exponential back
off, a variety

00:03:55.270 --> 00:03:58.530
of other great features.

00:03:58.530 --> 00:04:01.390
And on top of that we built
the OAuth library.

00:04:01.390 --> 00:04:05.630
That adds an OAuth 2.0 as well
OAuth 1.0 implementation on

00:04:05.630 --> 00:04:08.190
top of the HTTP library, again,
work with any web

00:04:08.190 --> 00:04:11.740
service that implements
the specification.

00:04:11.740 --> 00:04:14.160
And finally, there's the
Google API libraries.

00:04:14.160 --> 00:04:17.959
This is useful for working
with Google libraries.

00:04:17.959 --> 00:04:20.310
So let's talk about some of
the features in there.

00:04:20.310 --> 00:04:25.690
The HTTP library supports any
Java 5 language platform such

00:04:25.690 --> 00:04:29.070
as Android as well as
Google App Engine.

00:04:29.070 --> 00:04:31.780
We support the JSON wire format,
the XML wire format,

00:04:31.780 --> 00:04:34.810
protocol buffers even.

00:04:34.810 --> 00:04:37.890
As I mentioned, the OAuth
project, that adds OAuth 2.0

00:04:37.890 --> 00:04:40.240
as well as OAuth 1.0
implementation on top of it.

00:04:40.240 --> 00:04:44.560
It makes it very easy to work
within OAuth service.

00:04:44.560 --> 00:04:47.310
And there's the Base Library
that all the Google API

00:04:47.310 --> 00:04:48.530
libraries share.

00:04:48.530 --> 00:04:50.930
It implements sophisticated
functionality, such as

00:04:50.930 --> 00:04:55.710
batching HTTP requests into a
single HTTP request, media

00:04:55.710 --> 00:04:56.840
upload, media download.

00:04:56.840 --> 00:04:58.200
I won't be demonstrating
that today.

00:04:58.200 --> 00:04:59.690
But there's lots of great
documentation

00:04:59.690 --> 00:05:01.150
about how to do that.

00:05:01.150 --> 00:05:04.860
How to process errors from the
Google API servers, how do

00:05:04.860 --> 00:05:07.050
reduce the size of JSON, I'll
show you an example

00:05:07.050 --> 00:05:09.180
of that in a moment.

00:05:09.180 --> 00:05:13.050
And then the server specific
libraries so you're working

00:05:13.050 --> 00:05:14.810
with Calendar, Google+.

00:05:14.810 --> 00:05:16.890
They make it incredibly
easy to use.

00:05:16.890 --> 00:05:18.390
They're very simple methods.

00:05:18.390 --> 00:05:21.050
And I'll show you in just a
minute what it looks like.

00:05:21.050 --> 00:05:24.110
And I'm pretty happy with
how well that's evolved.

00:05:24.110 --> 00:05:25.830
We have an automated
infrastructure.

00:05:25.830 --> 00:05:28.890
Every time a new API gets
released, say the YouTube API

00:05:28.890 --> 00:05:31.830
announced this morning, we
simply rearm the generator.

00:05:31.830 --> 00:05:33.300
And we publish new libraries.

00:05:33.300 --> 00:05:36.260
And I'll show you exactly
where to get them.

00:05:36.260 --> 00:05:38.230
So there's some references
for you.

00:05:38.230 --> 00:05:41.990
The Google APIs is Getting
Started webinar, we just

00:05:41.990 --> 00:05:42.970
published on YouTube.

00:05:42.970 --> 00:05:44.090
It's about 30 minutes long.

00:05:44.090 --> 00:05:46.810
It talks about all the great
tools that are available, not

00:05:46.810 --> 00:05:49.700
necessarily specific the Java
library but the API's Council,

00:05:49.700 --> 00:05:53.540
the API's Explorer, really
great convenient tools.

00:05:53.540 --> 00:05:56.830
And then if you're a more
advanced developer and you're

00:05:56.830 --> 00:05:59.380
trying to get the most efficient
Android application

00:05:59.380 --> 00:06:02.240
possible, you want to advantage
of batching requests

00:06:02.240 --> 00:06:06.060
or partial response, partial
update, this is a

00:06:06.060 --> 00:06:07.590
really great resource.

00:06:07.590 --> 00:06:09.370
There was a Google
I/O session.

00:06:09.370 --> 00:06:12.830
And you're welcome
to check it out.

00:06:12.830 --> 00:06:14.610
So let's talk about OAuth 2.0.

00:06:14.610 --> 00:06:20.470
And it has just recently
been finalized.

00:06:20.470 --> 00:06:24.310
I mean all the Google APIs
support OAuth 2.0 for access

00:06:24.310 --> 00:06:25.270
of protected resources.

00:06:25.270 --> 00:06:26.790
So it's really important
to understand.

00:06:26.790 --> 00:06:29.500
And this is really the blocker a
lot of times when developers

00:06:29.500 --> 00:06:30.870
tell us, I'm getting blocked.

00:06:30.870 --> 00:06:33.570
It's usually related
to authorization.

00:06:33.570 --> 00:06:36.540
So let me step you through
a typical OAuth 2.0 flow.

00:06:36.540 --> 00:06:37.610
That's a picturE OF me.

00:06:37.610 --> 00:06:38.890
It's a little old.

00:06:38.890 --> 00:06:41.560
But that's me using an
Android application.

00:06:41.560 --> 00:06:44.820
So I really want to get value
out of the OAuth application.

00:06:44.820 --> 00:06:48.390
Now, we don't want just any
application grabbing your

00:06:48.390 --> 00:06:50.000
protected resource from
the Google servers.

00:06:50.000 --> 00:06:51.980
We want to make sure there's
a very strong and secure

00:06:51.980 --> 00:06:53.190
permissions model.

00:06:53.190 --> 00:06:56.270
So the Android application, what
it does conceptually is

00:06:56.270 --> 00:06:58.370
it goes to Google Authorization
server and says,

00:06:58.370 --> 00:07:00.390
hey, I want to be able
to access data on

00:07:00.390 --> 00:07:01.740
behalf of the user.

00:07:01.740 --> 00:07:04.630
So the Authorization server
says, well, I'm not sure.

00:07:04.630 --> 00:07:08.690
Let me ask the user, is it OK
to grant permission for this

00:07:08.690 --> 00:07:10.180
application?

00:07:10.180 --> 00:07:11.740
And presumably I say,
yes, of course.

00:07:11.740 --> 00:07:13.620
I'm I trust this developer.

00:07:13.620 --> 00:07:15.000
I trust this Android
application.

00:07:15.000 --> 00:07:16.780
So I say yes to the
Auth server.

00:07:16.780 --> 00:07:19.400
The Auth server returns
back an access token.

00:07:19.400 --> 00:07:23.440
So this access token is much
like a key that has access to

00:07:23.440 --> 00:07:24.810
data that's locked in
Google servers.

00:07:24.810 --> 00:07:27.725
With that access token, every
time you make an HTTP request

00:07:27.725 --> 00:07:32.240
to the Google Web API servers,
you include an access token.

00:07:32.240 --> 00:07:35.150
This is in the form of an
authorization header where you

00:07:35.150 --> 00:07:37.260
simply say authorization
colon bearer and

00:07:37.260 --> 00:07:40.830
then the access token.

00:07:40.830 --> 00:07:43.530
And then the Google API server
has to ask the Authorization

00:07:43.530 --> 00:07:45.080
server, is it OK?

00:07:45.080 --> 00:07:46.390
Is this access token valid?

00:07:46.390 --> 00:07:49.670
Has it expired and since they
often expire after an hour for

00:07:49.670 --> 00:07:51.590
the most secure application?

00:07:51.590 --> 00:07:54.860
And assuming that that's OK,
it'll go back to the Android

00:07:54.860 --> 00:07:57.800
application with the data
that I requested.

00:07:57.800 --> 00:07:59.650
Hopefully, that made sense.

00:07:59.650 --> 00:08:01.200
I'll drill down a little
bit into the

00:08:01.200 --> 00:08:03.370
permission model on OAuth.

00:08:03.370 --> 00:08:07.040
Every Google API publishes
a set of scopes of

00:08:07.040 --> 00:08:08.530
working with that API.

00:08:08.530 --> 00:08:11.470
Kill Calendar has two of them,
one for read-only access and

00:08:11.470 --> 00:08:16.580
one for editing, updating, or
creating new calendars.

00:08:16.580 --> 00:08:18.570
This is what it looks like.

00:08:18.570 --> 00:08:21.970
And I'll mention, too, a great
reference for OAuth 2.0.

00:08:21.970 --> 00:08:26.630
The first is a Google I/O
session by Ryan Boyd.

00:08:26.630 --> 00:08:28.670
He literally wrote a book
about the subject.

00:08:28.670 --> 00:08:31.740
So he can give you a great
overview of OAuth 2.0.

00:08:31.740 --> 00:08:35.830
And as well as our general
documentation, there's a bunch

00:08:35.830 --> 00:08:38.559
of different flows on there
if you're interested.

00:08:38.559 --> 00:08:42.000
Now, why don't you see more
applications on the web on

00:08:42.000 --> 00:08:44.010
Android using OAuth 2.0?

00:08:44.010 --> 00:08:46.840
And when I talk to a lot of
developers, I get a very

00:08:46.840 --> 00:08:49.620
common complaint.

00:08:49.620 --> 00:08:52.320
It's complicated.

00:08:52.320 --> 00:08:52.740
Yes.

00:08:52.740 --> 00:08:56.050
So there's a number of reasons
why it's complicated.

00:08:56.050 --> 00:08:58.180
And part of it is we just
haven't done a good job of

00:08:58.180 --> 00:09:00.440
getting the message out
how to do it properly.

00:09:00.440 --> 00:09:01.610
But there's another
good reason.

00:09:01.610 --> 00:09:04.240
And I'll show you the next
screen of what the current

00:09:04.240 --> 00:09:05.690
authorization screen
looks like.

00:09:05.690 --> 00:09:09.210
Now, if you Ice Cream Sandwich
or a later device that

00:09:09.210 --> 00:09:13.360
represents about I think about
7% of the market Android

00:09:13.360 --> 00:09:16.610
devices, it looked better.

00:09:16.610 --> 00:09:20.970
But on Froyo and most of the
devices on the web, you'll see

00:09:20.970 --> 00:09:21.550
an Android.

00:09:21.550 --> 00:09:22.680
It will look like this.

00:09:22.680 --> 00:09:24.360
And I don't know if
you can see this.

00:09:24.360 --> 00:09:29.260
But is this a readable
permission?

00:09:29.260 --> 00:09:31.100
Would you be able to explain
it to a loved one what this

00:09:31.100 --> 00:09:33.620
means and exactly what
permission you're granting in

00:09:33.620 --> 00:09:34.880
this application?

00:09:34.880 --> 00:09:36.010
I'm not sure.

00:09:36.010 --> 00:09:39.050
So I'll show you the next slide
of what's launching

00:09:39.050 --> 00:09:41.070
really soon and probably
in the order

00:09:41.070 --> 00:09:42.180
of a couple of weeks.

00:09:42.180 --> 00:09:43.500
I'm really excited about this.

00:09:43.500 --> 00:09:45.910
It's been a long journey
to get to this point.

00:09:45.910 --> 00:09:47.630
And we're almost there.

00:09:47.630 --> 00:09:52.030
So I want to see some applause
if you like it.

00:09:52.030 --> 00:09:57.260
[APPLAUSE]

00:09:57.260 --> 00:09:59.130
YANIV INBAR: Oh, good.

00:09:59.130 --> 00:09:59.400
Yes.

00:09:59.400 --> 00:10:01.830
So I'm really excited about this
and, like I said, in just

00:10:01.830 --> 00:10:02.560
a couple of weeks.

00:10:02.560 --> 00:10:04.460
Now, what I'm showing is what
it looks like in Froyo.

00:10:04.460 --> 00:10:06.530
Of course, it will look
a lot better on one

00:10:06.530 --> 00:10:07.790
of these Nexus 7's.

00:10:07.790 --> 00:10:10.030
But already on Froyo,
it looks very nice.

00:10:10.030 --> 00:10:11.450
I think it's pretty clear.

00:10:11.450 --> 00:10:13.550
It says it's going to manage
your calendars.

00:10:13.550 --> 00:10:14.620
Great, I know what to do.

00:10:14.620 --> 00:10:15.990
I'm going to click Allow.

00:10:15.990 --> 00:10:19.630
I'm going to trust my app
a little bit better now.

00:10:19.630 --> 00:10:23.990
And this is going to come with
Google Play services.

00:10:23.990 --> 00:10:25.960
And if you use Google Play
service, it comes with a

00:10:25.960 --> 00:10:27.960
really handy tool called
AccountPicker.

00:10:27.960 --> 00:10:30.960
It's just a little UI that shows
you all the accounts

00:10:30.960 --> 00:10:31.960
that are on the device.

00:10:31.960 --> 00:10:34.230
Yes, you'll select which one
you want, add an account if

00:10:34.230 --> 00:10:35.610
you want to use a
different one.

00:10:35.610 --> 00:10:36.810
It's just super handy.

00:10:36.810 --> 00:10:39.020
I find it really convenient.

00:10:39.020 --> 00:10:41.940
So some of the details, Google
Play services is actually an

00:10:41.940 --> 00:10:44.280
essential component
of Google Play.

00:10:44.280 --> 00:10:47.070
But they're built in a way
that allows all you

00:10:47.070 --> 00:10:48.170
developers to use it.

00:10:48.170 --> 00:10:50.750
So this is really great the
way that they've built it.

00:10:50.750 --> 00:10:54.335
That means that it's going to
be an all users' devices all

00:10:54.335 --> 00:10:55.000
the way down Froyo.

00:10:55.000 --> 00:10:58.140
I think that represents
somewhere around 94% of the

00:10:58.140 --> 00:10:59.770
market of Android devices.

00:10:59.770 --> 00:11:03.290
So you can be sure that you
can be able to use it.

00:11:03.290 --> 00:11:04.660
The permission is a
lot more readable.

00:11:04.660 --> 00:11:06.890
You get AccountPicker.

00:11:06.890 --> 00:11:10.500
And the nicest thing about
it is it's more secure.

00:11:10.500 --> 00:11:12.960
It actually uses the signature,
the way that you

00:11:12.960 --> 00:11:16.640
signed your application, it is
able to use that and is able

00:11:16.640 --> 00:11:20.980
to use that signature with the
Google Authorization server.

00:11:20.980 --> 00:11:23.400
So you never have to specify
an API key, which is really

00:11:23.400 --> 00:11:24.655
easy to steal.

00:11:24.655 --> 00:11:27.130
And you can be sure that your
application is the only one

00:11:27.130 --> 00:11:29.710
that's going to be able to
have access to that data.

00:11:29.710 --> 00:11:32.390
It also does token caching.

00:11:32.390 --> 00:11:34.790
So these tokens expire
within the hour.

00:11:34.790 --> 00:11:36.790
And it takes care of refreshing
them for you.

00:11:36.790 --> 00:11:38.680
You just basically don't have
to deal with expired tokens.

00:11:38.680 --> 00:11:39.780
It's really handy.

00:11:39.780 --> 00:11:40.690
It's really great.

00:11:40.690 --> 00:11:42.550
The documentation is live.

00:11:42.550 --> 00:11:45.710
But we're not yet providing
you the ability to build

00:11:45.710 --> 00:11:47.420
applications in it yet.

00:11:47.420 --> 00:11:49.520
This will come in a couple
weeks hopefully.

00:11:49.520 --> 00:11:52.210
But I'm supposed to tell
you it's coming soon.

00:11:52.210 --> 00:11:55.660
We'll see, hopefully
very shortly.

00:11:55.660 --> 00:11:57.990
So we're done with slides.

00:11:57.990 --> 00:11:59.390
Now we're just going to show
you how to build an

00:11:59.390 --> 00:12:01.530
application, all the tools that
you're going to need.

00:12:01.530 --> 00:12:04.830
I'm going to demo for you some
applications, some pretty

00:12:04.830 --> 00:12:05.740
simple ones.

00:12:05.740 --> 00:12:07.200
And I'll show you the
code behind it.

00:12:07.200 --> 00:12:09.570
I'll show you also a
few of the tools.

00:12:09.570 --> 00:12:11.490
So let's start with the tools.

00:12:11.490 --> 00:12:15.990
The first, as I promised, that
I will show you where you can

00:12:15.990 --> 00:12:20.850
grab the Java library so this
is the open source project.

00:12:20.850 --> 00:12:24.390
And I'm just going to click
on Libraries and Samples.

00:12:24.390 --> 00:12:25.900
I'm interested in a
Google Calendar.

00:12:25.900 --> 00:12:28.320
So I'm going to click
on a calendar API.

00:12:28.320 --> 00:12:30.480
And there's a couple things here
that are pretty useful.

00:12:30.480 --> 00:12:31.695
You can download the library.

00:12:31.695 --> 00:12:36.710
It has the jars that you need,
sources, documentation, a link

00:12:36.710 --> 00:12:40.050
to the Java.doc, Calendar API
Documentation, Developer's

00:12:40.050 --> 00:12:44.270
Guide, and a couple other useful
things as well as I'm

00:12:44.270 --> 00:12:47.820
going to highlight Calendar
Preview Android Sample.

00:12:47.820 --> 00:12:51.510
This is the source code to the
sample I'm going to show you.

00:12:51.510 --> 00:12:53.250
It uses Google Play services.

00:12:53.250 --> 00:12:54.940
You won't be able
to run it yet.

00:12:54.940 --> 00:12:56.640
Because we haven't made
it available yet.

00:12:56.640 --> 00:12:58.470
But I will show you here
just because you're

00:12:58.470 --> 00:12:59.460
attending my session.

00:12:59.460 --> 00:13:00.750
I'll give you a sneak peek
at what it looks

00:13:00.750 --> 00:13:02.000
like with real code.

00:13:05.050 --> 00:13:07.160
And now I'm going to go to
the API's Explorer, a

00:13:07.160 --> 00:13:09.250
pretty handy tool.

00:13:09.250 --> 00:13:11.310
It lists all the APIs that
are in Google's API

00:13:11.310 --> 00:13:13.010
infrastructure.

00:13:13.010 --> 00:13:14.810
Here I'm going to look
at the list method.

00:13:14.810 --> 00:13:17.890
I'm going to first sign
in using OAuth 2.0.

00:13:17.890 --> 00:13:19.480
Here are the scopes.

00:13:19.480 --> 00:13:20.480
I mentioned that earlier.

00:13:20.480 --> 00:13:23.250
I'm just going to accept
all the scopes.

00:13:23.250 --> 00:13:27.300
And I'm going to execute it.

00:13:27.300 --> 00:13:28.270
Where is the Execute button?

00:13:28.270 --> 00:13:29.600
Great.

00:13:29.600 --> 00:13:31.790
So this gives you a really
concrete sense of what's

00:13:31.790 --> 00:13:33.440
actually going on
under the hood.

00:13:33.440 --> 00:13:37.220
Here's that authorization header
I mentioned earlier.

00:13:37.220 --> 00:13:39.720
And here's the JSON response.

00:13:39.720 --> 00:13:40.410
I know, Sriram.

00:13:40.410 --> 00:13:41.840
This is not very readable.

00:13:41.840 --> 00:13:42.350
SRIRAM SAROOP: Sorry, Yan.

00:13:42.350 --> 00:13:43.620
YANIV INBAR: Can I make it
a little bit smaller?

00:13:43.620 --> 00:13:44.870
What do you think?

00:13:46.850 --> 00:13:47.380
SRIRAM SAROOP: [INAUDIBLE]

00:13:47.380 --> 00:13:48.880
attributes.

00:13:48.880 --> 00:13:51.160
YANIV INBAR: Let's use
the fields editor.

00:13:51.160 --> 00:13:53.790
I'm only interested in the ID of
the calendar and a summary

00:13:53.790 --> 00:13:54.920
of the calendar.

00:13:54.920 --> 00:13:56.530
That's just the title.

00:13:56.530 --> 00:13:57.780
Let's take a look.

00:14:01.960 --> 00:14:03.486
Whoops, what just
happened here?

00:14:03.486 --> 00:14:05.320
Let's try that again.

00:14:05.320 --> 00:14:06.470
Click Execute again.

00:14:06.470 --> 00:14:08.070
I think I forgot to
click Execute.

00:14:08.070 --> 00:14:09.345
There you go.

00:14:09.345 --> 00:14:10.640
It's a lot more readable.

00:14:10.640 --> 00:14:12.790
But more importantly, it
also reduces the size

00:14:12.790 --> 00:14:14.080
of your HTTP response.

00:14:14.080 --> 00:14:16.700
So it is a lot more efficient.

00:14:16.700 --> 00:14:17.520
So you're welcome to
play with this.

00:14:17.520 --> 00:14:18.560
This is a great tool.

00:14:18.560 --> 00:14:20.560
The next thing I'm going to do
is I'm going to go to the

00:14:20.560 --> 00:14:22.260
API's council.

00:14:22.260 --> 00:14:25.550
I'm going to start from scratch
here, one second.

00:14:25.550 --> 00:14:27.210
OK, create a new project.

00:14:27.210 --> 00:14:29.620
This allows you to register your
Android application with

00:14:29.620 --> 00:14:31.820
its signature.

00:14:31.820 --> 00:14:33.840
The first thing I have to do,
and please don't forget this

00:14:33.840 --> 00:14:36.766
step, is you have to
enable the API that

00:14:36.766 --> 00:14:37.950
you're interested in.

00:14:37.950 --> 00:14:38.910
There we go.

00:14:38.910 --> 00:14:41.490
I enabled Google Calendar.

00:14:41.490 --> 00:14:43.940
It may ask you to sign the terms
of service is usually

00:14:43.940 --> 00:14:45.860
pretty standard.

00:14:45.860 --> 00:14:47.440
Create a client ID.

00:14:47.440 --> 00:14:51.080
I'll give it a name,
My Android App.

00:14:54.390 --> 00:14:55.640
This is an Android
application.

00:14:58.650 --> 00:15:00.150
Now, you have to give
it two things.

00:15:00.150 --> 00:15:02.680
The first is the package name.

00:15:02.680 --> 00:15:06.880
I'll grab that from over here,
the manifest file.

00:15:11.790 --> 00:15:12.470
There we go.

00:15:12.470 --> 00:15:16.690
And the second is the
SHA1 certificate.

00:15:16.690 --> 00:15:18.520
You can read the documentation
about where to get it.

00:15:18.520 --> 00:15:21.950
Here I'm using the one that
comes with Android.

00:15:21.950 --> 00:15:24.860
And here's the command.

00:15:24.860 --> 00:15:27.580
The password is android,
really secure.

00:15:27.580 --> 00:15:28.830
Don't tell anybody.

00:15:31.550 --> 00:15:32.450
Great.

00:15:32.450 --> 00:15:34.000
Let's create the client ID.

00:15:34.000 --> 00:15:35.280
And I'm going to cheat here.

00:15:35.280 --> 00:15:36.490
Because I've already
registered it.

00:15:36.490 --> 00:15:37.740
So I'm going to give
it a new name.

00:15:42.530 --> 00:15:44.170
And there you go.

00:15:44.170 --> 00:15:46.460
So I wanted to show
you this because

00:15:46.460 --> 00:15:47.270
this is really important.

00:15:47.270 --> 00:15:49.620
This is where you get
your client ID from.

00:15:49.620 --> 00:15:52.140
You're not going to need it for
the Android sample also.

00:15:52.140 --> 00:15:54.680
But you'll need it for
Sriram's sample.

00:15:54.680 --> 00:15:57.850
I've got the redirect
here I can ignore.

00:15:57.850 --> 00:16:00.760
And the rest is the package
name and the fingerprint.

00:16:00.760 --> 00:16:02.600
Now, again, I won't go into the
details about what this

00:16:02.600 --> 00:16:03.840
means exactly.

00:16:03.840 --> 00:16:07.590
But I just wanted to show
you how it works once.

00:16:07.590 --> 00:16:09.710
In this case, I was using
the debug certificate.

00:16:09.710 --> 00:16:11.310
If you're doing a release built,
you want to use your

00:16:11.310 --> 00:16:12.260
release certificate as well.

00:16:12.260 --> 00:16:14.330
So you want to register that.

00:16:14.330 --> 00:16:15.070
Great.

00:16:15.070 --> 00:16:18.180
So now let's do a demo before
I go into the code.

00:16:18.180 --> 00:16:21.120
Let's switch to--

00:16:21.120 --> 00:16:22.810
now, the wifi's been giving
me some issues.

00:16:22.810 --> 00:16:26.360
So I got it hooked up through
the ethernet.

00:16:26.360 --> 00:16:29.670
Hopefully, that will
work better.

00:16:29.670 --> 00:16:32.960
First, I'm going to select
the account.

00:16:32.960 --> 00:16:35.070
Here's that AccountPicker
I was talking about.

00:16:35.070 --> 00:16:39.010
I'm going to use this account.

00:16:39.010 --> 00:16:41.190
It's going to go to the
Google Auth server.

00:16:41.190 --> 00:16:43.250
And the Auth array is going to
say, hey, you know what?

00:16:43.250 --> 00:16:46.790
This person hasn't given
permission to the app yet.

00:16:46.790 --> 00:16:48.690
So let's give it permission.

00:16:48.690 --> 00:16:50.720
Here's that screen I
showed you earlier.

00:16:50.720 --> 00:16:53.110
I'm going to click on that.

00:16:53.110 --> 00:16:55.006
Go ahead and applause
if you want to.

00:16:55.006 --> 00:16:57.802
[APPLAUSE]

00:16:57.802 --> 00:16:58.740
YANIV INBAR: All right.

00:16:58.740 --> 00:17:00.520
Now, you know what?

00:17:00.520 --> 00:17:02.390
Can you put on that screen,
can you show,

00:17:02.390 --> 00:17:04.079
can you put my laptop?

00:17:04.079 --> 00:17:05.579
SRIRAM SAROOP: Sure.

00:17:05.579 --> 00:17:07.300
YANIV INBAR: I'm going to sign
into Google Calendar on my

00:17:07.300 --> 00:17:09.260
laptop just to show you
that I'm not cheating.

00:17:09.260 --> 00:17:13.075
This is the real Google
Calendar.

00:17:13.075 --> 00:17:14.410
There you go.

00:17:17.410 --> 00:17:25.616
Standard web interface and I'm
going to add a new calendar.

00:17:25.616 --> 00:17:29.380
Let's call it Google.

00:17:34.100 --> 00:17:38.740
And by the way, HTTP requests
can take a long time.

00:17:38.740 --> 00:17:40.830
There we go.

00:17:40.830 --> 00:17:42.980
And it's showing up on here?

00:17:42.980 --> 00:17:43.340
Yes.

00:17:43.340 --> 00:17:45.340
It's over there.

00:17:45.340 --> 00:17:46.510
Why don't we make
a copy of that?

00:17:46.510 --> 00:17:48.330
In fact, I'm going to
use batch here.

00:17:48.330 --> 00:17:51.420
I'm going to make three copies
of that calendar.

00:17:51.420 --> 00:17:52.760
And that's running in
the background.

00:17:52.760 --> 00:17:53.520
There we go.

00:17:53.520 --> 00:17:55.170
OK.

00:17:55.170 --> 00:17:58.230
Let's see if I've just created
a whole lot of calendars.

00:17:58.230 --> 00:18:00.352
Oh, not yet.

00:18:00.352 --> 00:18:03.260
I'm not sure why that's
not showing up yet.

00:18:03.260 --> 00:18:05.560
Let's delete this calendar.

00:18:05.560 --> 00:18:06.640
Why not?

00:18:06.640 --> 00:18:09.760
Let's edit this calendar.

00:18:09.760 --> 00:18:13.050
Let's give it another name.

00:18:13.050 --> 00:18:15.670
And everything is happening
in the background all

00:18:15.670 --> 00:18:16.920
asynchronously.

00:18:21.290 --> 00:18:21.740
OK.

00:18:21.740 --> 00:18:23.740
And I'm not sure why that's
not showing up yet.

00:18:23.740 --> 00:18:26.350
But that's all right.

00:18:26.350 --> 00:18:29.050
Cool, so that pretty simple
application, just making

00:18:29.050 --> 00:18:31.500
requests, inserting calendars,
deleting calendars.

00:18:31.500 --> 00:18:32.750
Let me show you the code.

00:18:35.731 --> 00:18:39.050
Now, I'm going to assume you're
a fairly experienced

00:18:39.050 --> 00:18:39.890
Android programmer.

00:18:39.890 --> 00:18:42.890
You're familiar with the
activities and how they work.

00:18:42.890 --> 00:18:44.860
So I'll highlight sort of the
things that I think are most

00:18:44.860 --> 00:18:46.470
interesting.

00:18:46.470 --> 00:18:48.460
The first is I made a
calendar info class.

00:18:48.460 --> 00:18:50.550
In this case, I've
oversimplified a little bit.

00:18:50.550 --> 00:18:52.050
I'm just storing the title
of the calendar.

00:18:52.050 --> 00:18:53.800
Obviously, you'll want a more
sophisticated model.

00:18:53.800 --> 00:18:55.260
It's a plain old Java object.

00:18:55.260 --> 00:18:57.440
It's got an ID and a summary.

00:18:57.440 --> 00:18:59.580
A summary is just the title
of the calendar.

00:18:59.580 --> 00:19:02.050
And I've got a calendar
model class.

00:19:02.050 --> 00:19:05.610
Here I've got a map from the
ID of the calendar to the

00:19:05.610 --> 00:19:09.390
calendar information and some
standard add, remove, and get

00:19:09.390 --> 00:19:12.450
methods on it.

00:19:12.450 --> 00:19:16.230
So here is the activity class.

00:19:16.230 --> 00:19:17.680
Oh, let's project.

00:19:17.680 --> 00:19:21.530
Here we go.

00:19:21.530 --> 00:19:23.640
So this is the uncreate
method.

00:19:27.620 --> 00:19:30.140
The first thing I'm going to
highlight here is logging.

00:19:30.140 --> 00:19:31.990
This is a really handy
debugging tool.

00:19:31.990 --> 00:19:35.160
It shows you the content of
every HTTP request and HTTP

00:19:35.160 --> 00:19:39.970
response that you make, and
including the JSON content,

00:19:39.970 --> 00:19:41.210
all the HTTP headers.

00:19:41.210 --> 00:19:42.710
It's a really handy tool.

00:19:42.710 --> 00:19:45.330
The second thing I'm going to
highlight here is Google

00:19:45.330 --> 00:19:47.720
Account Credential
using OAuth 2.0.

00:19:47.720 --> 00:19:49.510
I'll go into that code
in just a second.

00:19:49.510 --> 00:19:52.290
But I wanted to highlight
the calendar

00:19:52.290 --> 00:19:53.260
scopes of that calendar.

00:19:53.260 --> 00:19:56.150
That's that manager
calendar scope.

00:19:56.150 --> 00:19:59.550
This is as easy as it is.

00:19:59.550 --> 00:20:01.260
If you want to store the account
name, this is the

00:20:01.260 --> 00:20:03.060
currently selected account.

00:20:03.060 --> 00:20:06.550
It's a good thing to store in
your shared preferences.

00:20:06.550 --> 00:20:09.570
This is the Calendar
Client Object.

00:20:09.570 --> 00:20:12.930
You pass it the HP transport
and the JSON factor.

00:20:12.930 --> 00:20:14.130
You know want these are?

00:20:14.130 --> 00:20:18.950
Since Library has a completely
plugable HTTP transport, you

00:20:18.950 --> 00:20:20.620
can use HTTP URL connection.

00:20:20.620 --> 00:20:22.370
You can use Apache HTTPclient.

00:20:22.370 --> 00:20:24.580
There's lots of great
information about which one to

00:20:24.580 --> 00:20:27.860
use at which Android
SDK level.

00:20:27.860 --> 00:20:29.450
And also for the JSON
library, that's

00:20:29.450 --> 00:20:30.330
completely plugable as well.

00:20:30.330 --> 00:20:32.960
If you want to use
Jackson or JSON.

00:20:32.960 --> 00:20:34.400
Or on Honeycomb there's
actually a

00:20:34.400 --> 00:20:35.700
built-in JSON parser.

00:20:35.700 --> 00:20:37.700
So you can use that as well.

00:20:37.700 --> 00:20:41.630
And finally, a pass at the
OAuth 2.0 credential--

00:20:41.630 --> 00:20:46.150
Now let's go to Google
Account Credential.

00:20:46.150 --> 00:20:49.176
This is where it gets
more interesting.

00:20:49.176 --> 00:20:52.800
The first method that's
interesting

00:20:52.800 --> 00:20:54.950
is using OAuth 2.0.

00:20:54.950 --> 00:20:59.180
Now in this case, you pass
an array of scopes.

00:20:59.180 --> 00:21:01.400
Maybe you get a scope for both
Calendar and Blogger.

00:21:01.400 --> 00:21:05.700
So this access token that you
have enables access to both of

00:21:05.700 --> 00:21:08.250
those APIs.

00:21:08.250 --> 00:21:10.770
The other use case is
using Audience.

00:21:10.770 --> 00:21:12.620
And Sriram is going to explain
to you what that's about.

00:21:12.620 --> 00:21:13.870
That's when using Google
Cloud Endpoints.

00:21:16.800 --> 00:21:19.220
The next thing here that's
interesting is the

00:21:19.220 --> 00:21:20.860
Initializer.

00:21:20.860 --> 00:21:22.550
Every time I make a request,
I want to use

00:21:22.550 --> 00:21:24.640
exponential back off.

00:21:24.640 --> 00:21:27.946
It's a one liner to add that.

00:21:27.946 --> 00:21:31.650
The next thing is, this
is my favorite.

00:21:31.650 --> 00:21:34.360
It shows you how to use
the AccountPicker.

00:21:34.360 --> 00:21:37.270
You just pass it mostly nulls
parameters to it.

00:21:37.270 --> 00:21:39.495
And you get a very good
default behavior.

00:21:39.495 --> 00:21:42.340
It is the one that shows the
screen that allows you to

00:21:42.340 --> 00:21:43.730
select which account you want.

00:21:43.730 --> 00:21:46.890
And it gives you
back an intent.

00:21:46.890 --> 00:21:47.950
You just start that intent.

00:21:47.950 --> 00:21:50.010
It comes back with
the access token.

00:21:50.010 --> 00:21:51.590
That's pretty much all you
need to know when you're

00:21:51.590 --> 00:21:52.525
programming it.

00:21:52.525 --> 00:21:54.420
That's how easy that is.

00:21:54.420 --> 00:21:58.490
Next, getting a token, Google
Auth Util as well as

00:21:58.490 --> 00:21:59.990
AccountPicker, again,
that counts as part

00:21:59.990 --> 00:22:01.465
of Google Play services.

00:22:01.465 --> 00:22:04.830
With a get token method, it just
returns a string based on

00:22:04.830 --> 00:22:06.820
the scopes that you give it.

00:22:06.820 --> 00:22:08.340
What's interesting about
this method is

00:22:08.340 --> 00:22:10.080
how we handle errors.

00:22:10.080 --> 00:22:13.110
One type of error is Transient
Auth exception.

00:22:13.110 --> 00:22:15.970
That just means there is a
connection problem or it can't

00:22:15.970 --> 00:22:18.050
the server for whatever
reason.

00:22:18.050 --> 00:22:22.250
The best strategy for that is to
retry the request and using

00:22:22.250 --> 00:22:25.910
an exponential back off policy,
as I've done here,

00:22:25.910 --> 00:22:28.670
just to make sure not to
overload the server, fairly

00:22:28.670 --> 00:22:29.750
straightforward.

00:22:29.750 --> 00:22:30.520
You just copy this code.

00:22:30.520 --> 00:22:32.100
It will work.

00:22:32.100 --> 00:22:34.190
Any other kind of Auth exception
I'm just going to

00:22:34.190 --> 00:22:35.200
wrap in the I/O exception.

00:22:35.200 --> 00:22:36.670
They handle it somewhere else.

00:22:36.670 --> 00:22:39.540
I'll show you that
in a minute.

00:22:39.540 --> 00:22:42.460
The next one is the actual
request initializer.

00:22:42.460 --> 00:22:46.940
This gives it the bearer token
for the authorization header.

00:22:46.940 --> 00:22:48.240
I mentioned that earlier.

00:22:48.240 --> 00:22:52.910
And the second thing it does is,
if I get a 401 HTTP error

00:22:52.910 --> 00:22:55.695
code, this is the standard way
of saying your access token

00:22:55.695 --> 00:22:56.390
has expire.

00:22:56.390 --> 00:22:58.630
It's no longer valid for
whatever reason.

00:22:58.630 --> 00:23:00.920
So what we have to do, we have
to tell Google Play services

00:23:00.920 --> 00:23:03.800
to remove it from its cache so
that next time you make a

00:23:03.800 --> 00:23:06.030
request, and this is just going
to automatically retry

00:23:06.030 --> 00:23:09.510
it, it's going to get a new
access token from the server.

00:23:09.510 --> 00:23:10.470
That's all there is to it.

00:23:10.470 --> 00:23:12.530
Now, there's a lot
of code in here.

00:23:12.530 --> 00:23:15.220
Hopefully, I can get this into
a form of a Java library.

00:23:15.220 --> 00:23:17.560
You can just use Google Account
Credential directly.

00:23:17.560 --> 00:23:19.300
That's something we can
maybe do in the future

00:23:19.300 --> 00:23:21.820
based on your feedback.

00:23:21.820 --> 00:23:23.310
I'm going to show
you ASIG task.

00:23:23.310 --> 00:23:25.150
Now, if you're an experienced
programmer, you probably are

00:23:25.150 --> 00:23:26.780
familiar with ASIG task.

00:23:26.780 --> 00:23:29.290
Any long running operation, you
definitely want to run in

00:23:29.290 --> 00:23:30.320
a background thread.

00:23:30.320 --> 00:23:32.400
You never want to run
that in UI thread.

00:23:32.400 --> 00:23:34.780
So that's what I'm using here.

00:23:34.780 --> 00:23:37.650
This does some standard progress
bar stuff but do in

00:23:37.650 --> 00:23:38.820
background.

00:23:38.820 --> 00:23:41.550
This is my abstract class
that all my ASIG

00:23:41.550 --> 00:23:44.070
task classes extend.

00:23:44.070 --> 00:23:46.440
So you do the HTTP request
in the background.

00:23:46.440 --> 00:23:50.780
And then you catch User
Recoverable Auth exception.

00:23:50.780 --> 00:23:53.680
That's what tells you, hey,
you need to show the

00:23:53.680 --> 00:23:56.752
permission screen, that really
nice permission screen that I

00:23:56.752 --> 00:23:58.700
think most of you liked.

00:23:58.700 --> 00:23:59.860
So it's two lines of code.

00:23:59.860 --> 00:24:01.550
You get the intent from that.

00:24:01.550 --> 00:24:02.950
And you start activity
for result.

00:24:05.840 --> 00:24:05.960
Good.

00:24:05.960 --> 00:24:09.120
So let's show you an example of

00:24:09.120 --> 00:24:12.360
getting, let's load Calendars.

00:24:12.360 --> 00:24:14.320
This is how easy the
Google Library is.

00:24:14.320 --> 00:24:16.610
And I've gotten feedback
about this.

00:24:16.610 --> 00:24:17.660
This is just too easy.

00:24:17.660 --> 00:24:20.701
It should be more than
a line of code.

00:24:20.701 --> 00:24:22.400
So yeah, this is the Library.

00:24:22.400 --> 00:24:24.015
You just call calendar.calenda
rlist.list.execute.

00:24:28.150 --> 00:24:31.050
The one thing that I've done
here is I actually gave it a

00:24:31.050 --> 00:24:34.410
partial syntax saying I only
want the ID and the summary.

00:24:34.410 --> 00:24:36.610
It's exactly what I did in
API's Explorer, a good

00:24:36.610 --> 00:24:38.380
practice in general.

00:24:38.380 --> 00:24:41.510
It gives you a plain old Java
object Calendar list.

00:24:41.510 --> 00:24:42.200
You get the items.

00:24:42.200 --> 00:24:46.410
And you update your model
as simple as that.

00:24:46.410 --> 00:24:53.110
Now, let me show how simple
batching is with the Library.

00:24:53.110 --> 00:24:55.930
In this case, you have to create
a batch request object

00:24:55.930 --> 00:24:58.490
that just stores a collection
of requests to make, which,

00:24:58.490 --> 00:25:01.320
when you execute, will then
execute all those requests.

00:25:01.320 --> 00:25:02.810
You have to register a callback

00:25:02.810 --> 00:25:04.360
method for each request.

00:25:04.360 --> 00:25:06.620
In this case, I'm inserting
Calendars.

00:25:06.620 --> 00:25:09.640
The on success method just
updates my model.

00:25:09.640 --> 00:25:13.630
On failure will show an error.

00:25:13.630 --> 00:25:13.990
Let's see.

00:25:13.990 --> 00:25:18.550
What else is interesting here
is ProGuard configuration.

00:25:18.550 --> 00:25:23.920
So I wanted to show you, I get
a lot of feedback, hey, this

00:25:23.920 --> 00:25:24.570
is all great.

00:25:24.570 --> 00:25:26.210
But it's a really big library.

00:25:26.210 --> 00:25:28.840
And oftentimes, when you're
debugging, it will look like a

00:25:28.840 --> 00:25:30.650
four-megabyte application.

00:25:30.650 --> 00:25:32.780
Well, the trick is
to use ProGuard.

00:25:32.780 --> 00:25:34.010
And this is really important.

00:25:34.010 --> 00:25:37.340
So I want to show you how large
the application is if

00:25:37.340 --> 00:25:38.590
you're using ProGuard.

00:25:38.590 --> 00:25:47.170
So let me go into
settings, apps.

00:25:47.170 --> 00:25:48.360
I don't know if you
can see this.

00:25:48.360 --> 00:25:56.360
But it says here
332 kilobytes.

00:25:56.360 --> 00:25:57.830
This is a much smaller
library.

00:25:57.830 --> 00:26:00.260
So the reason is ProGuard
basically strips out

00:26:00.260 --> 00:26:01.700
everything you don't use.

00:26:01.700 --> 00:26:04.840
It's absolutely essential if
you're going to release a real

00:26:04.840 --> 00:26:06.070
application on the market.

00:26:06.070 --> 00:26:07.020
You'll want to do that.

00:26:07.020 --> 00:26:08.965
You'll want to minimize the
amount of space you take up on

00:26:08.965 --> 00:26:11.610
the user's Android device.

00:26:11.610 --> 00:26:13.790
Great.

00:26:13.790 --> 00:26:17.600
And it's as easy as using the
ProGuard configuration that

00:26:17.600 --> 00:26:19.460
Eclipse gives you.

00:26:19.460 --> 00:26:21.330
There's a properties
file here.

00:26:21.330 --> 00:26:25.570
You just uncomment the
ProGuard config line.

00:26:25.570 --> 00:26:27.680
And you want to use--

00:26:27.680 --> 00:26:29.450
And there's a couple of things
that you add to the Pro Guard

00:26:29.450 --> 00:26:30.820
configuration file.

00:26:30.820 --> 00:26:32.940
And I'll give you in
the documentation.

00:26:32.940 --> 00:26:36.300
All right, so let's get
back to the slides.

00:26:36.300 --> 00:26:39.110
And I'm going to let Sriram
tell us all about

00:26:39.110 --> 00:26:40.350
Google Cloud Endpoints.

00:26:40.350 --> 00:26:41.810
SRIRAM SAROOP: Awesome.

00:26:41.810 --> 00:26:43.240
That's a lot of content.

00:26:43.240 --> 00:26:44.020
You guys want a break?

00:26:44.020 --> 00:26:45.270
Just kidding.

00:26:49.870 --> 00:26:51.760
All right, let's talk about
Google Cloud Endpoints.

00:26:51.760 --> 00:26:54.410
So show of hands, how many
of you are app engine

00:26:54.410 --> 00:26:56.570
developers out there?

00:26:56.570 --> 00:26:58.770
All right, around 10
person, not many.

00:26:58.770 --> 00:27:02.070
How many of you are Android
developers who have used a

00:27:02.070 --> 00:27:04.700
mobile backend of some sort.

00:27:04.700 --> 00:27:06.480
All right, that's a fair
amount of you.

00:27:06.480 --> 00:27:10.905
So my aim at the end of this
talk is to ask all of you or

00:27:10.905 --> 00:27:13.250
rather to get all of you to sign
up for the Trusted Tester

00:27:13.250 --> 00:27:15.700
program for Google
Cloud Endpoints.

00:27:15.700 --> 00:27:17.860
So let me quickly show you
how I'm going to do that.

00:27:20.730 --> 00:27:23.190
So what is Google Cloud
Endpoints all about?

00:27:23.190 --> 00:27:27.510
So Google Cloud Endpoints is the
ability to easily develop

00:27:27.510 --> 00:27:31.725
code on a mobile backend, that's
App Engine, and consume

00:27:31.725 --> 00:27:34.900
it across multiple platforms,
Android being one of them.

00:27:34.900 --> 00:27:37.000
You can consume it from
an iOS platform.

00:27:37.000 --> 00:27:39.320
You can also consume it from
any browser out there.

00:27:39.320 --> 00:27:41.560
So what is so cool
about App Engine?

00:27:41.560 --> 00:27:44.010
App Engine automatically
scales according to the

00:27:44.010 --> 00:27:44.900
incoming load.

00:27:44.900 --> 00:27:46.550
So you don't have to worry about
provisioning servers.

00:27:46.550 --> 00:27:48.960
You don't have to worry about
configuring them, keeping them

00:27:48.960 --> 00:27:50.710
updated with patches.

00:27:50.710 --> 00:27:53.970
And where does App Engine
store all its data?

00:27:53.970 --> 00:27:55.700
It's got a variety of options.

00:27:55.700 --> 00:27:59.270
It's got a NoSQL, highly
scalable data store, which you

00:27:59.270 --> 00:28:00.720
can use to store your data.

00:28:00.720 --> 00:28:04.530
If you're not a NoSQL junkie,
if you're a SQL junkie, you

00:28:04.530 --> 00:28:06.430
can also use Cloud SQL.

00:28:06.430 --> 00:28:10.740
So the App Engine app that you
write your backend in can make

00:28:10.740 --> 00:28:13.870
use of the same Web APIs
that Yaniv just showed.

00:28:13.870 --> 00:28:17.370
And all the functionality in
your backend can be exposed

00:28:17.370 --> 00:28:20.470
using a simple REST interface,
which we call as Endpoints,

00:28:20.470 --> 00:28:23.400
and can be consumed using the
same Java client library

00:28:23.400 --> 00:28:26.150
that's used to consume
Google APIs.

00:28:26.150 --> 00:28:29.070
So that means that you
essentially get to develop

00:28:29.070 --> 00:28:32.290
APIs on Google API
infrastructure that powers

00:28:32.290 --> 00:28:36.240
your Google+ API, Gmail API,
and all that stuff.

00:28:36.240 --> 00:28:40.160
And along with that, you get all
the good functionalities,

00:28:40.160 --> 00:28:44.890
tooling, the API Explorer to
explore your own APIs.

00:28:44.890 --> 00:28:48.200
And you also have available
Google plug-ins for Eclipse

00:28:48.200 --> 00:28:51.030
support for actually producing
these APIs and

00:28:51.030 --> 00:28:52.610
consuming these APIs.

00:28:52.610 --> 00:28:55.930
So in fact, Google plug-in for
Eclipse version 3.0 with

00:28:55.930 --> 00:28:58.470
support for Cloud Endpoints
has been released today.

00:28:58.470 --> 00:29:00.985
So I guess you guys should go
ahead and download that.

00:29:04.410 --> 00:29:10.430
All right, so you might have
attended a talk on Google

00:29:10.430 --> 00:29:12.340
Cloud Messaging for Android.

00:29:12.340 --> 00:29:13.640
So it's come out of preview.

00:29:13.640 --> 00:29:16.850
And I'm happy to announce that
Cloud Endpoints also has

00:29:16.850 --> 00:29:19.560
pretty good support for
Cloud Messaging.

00:29:19.560 --> 00:29:22.910
So essentially what you want to
do here, you want to store

00:29:22.910 --> 00:29:24.600
state in the Cloud.

00:29:24.600 --> 00:29:27.460
So if you want to store state in
the Cloud, you also want to

00:29:27.460 --> 00:29:30.090
get it synchronized across
multiple devices.

00:29:30.090 --> 00:29:31.610
And how do go about
doing this?

00:29:31.610 --> 00:29:32.720
There are couple of ways
in which you can

00:29:32.720 --> 00:29:33.790
go about doing this.

00:29:33.790 --> 00:29:36.580
One obvious way is to kind of
implement some kind of a

00:29:36.580 --> 00:29:39.150
polling logic in which
you poll the server

00:29:39.150 --> 00:29:40.270
every now and then.

00:29:40.270 --> 00:29:41.970
But that's going to suck
out your battery.

00:29:41.970 --> 00:29:43.830
It's going to be really bad
for as far as your network

00:29:43.830 --> 00:29:45.090
bandwidth is concerned.

00:29:45.090 --> 00:29:46.460
So what is the solution here?

00:29:46.460 --> 00:29:49.140
So Google Cloud Messaging
works well with Cloud

00:29:49.140 --> 00:29:52.450
Endpoints in that, when you
define an Endpoint which

00:29:52.450 --> 00:29:56.510
modifies the state of your data,
you can use Google Cloud

00:29:56.510 --> 00:29:59.500
Messaging to send a ping back
to all registered devices so

00:29:59.500 --> 00:30:03.440
that the required devices
actually get the data back.

00:30:03.440 --> 00:30:06.010
So this really works well for
a case where you want to

00:30:06.010 --> 00:30:09.100
synchronize data across
multiple devices.

00:30:09.100 --> 00:30:11.490
So I'll be showing a cool demo
which demonstrates this.

00:30:15.460 --> 00:30:19.220
All right, so the use cases that
we spoke about was that

00:30:19.220 --> 00:30:21.860
you can use App Engine to
centrally write your business

00:30:21.860 --> 00:30:24.470
logic, perform some kind of
computation in case you're

00:30:24.470 --> 00:30:26.080
writing a chess game.

00:30:26.080 --> 00:30:28.660
Suppose you want to compute the
next best possible move.

00:30:28.660 --> 00:30:30.040
That can be done
on App Engine.

00:30:30.040 --> 00:30:32.730
If you want to store the state
of your chessboard, you can do

00:30:32.730 --> 00:30:34.790
that using the data store.

00:30:34.790 --> 00:30:39.110
And you can synchronize state
across multiple devices using

00:30:39.110 --> 00:30:43.380
a combination of Endpoints in
Google Cloud Messaging.

00:30:43.380 --> 00:30:43.830
Right.

00:30:43.830 --> 00:30:45.110
So I want you to do this.

00:30:45.110 --> 00:30:46.380
Go sign up on endpoints-truste
d-tester.appspot.com.

00:30:49.700 --> 00:30:52.100
So it's a trusted
tester program.

00:30:52.100 --> 00:30:53.760
It's possibly got some
rough edges.

00:30:53.760 --> 00:30:56.480
So we really want your
feedback here.

00:30:56.480 --> 00:30:58.340
So give it a shot.

00:30:58.340 --> 00:31:01.860
All right, so time to get our
hands dirty with a demo.

00:31:14.100 --> 00:31:15.170
So what am I going
to show you?

00:31:15.170 --> 00:31:17.530
I'm going to show you a
simple application.

00:31:17.530 --> 00:31:21.070
If you'd remember this UI, this
is similar to the UI that

00:31:21.070 --> 00:31:23.450
Yaniv just showed you for
his Calendar app.

00:31:23.450 --> 00:31:26.535
So it's called Cloud Notes,
the ability to store your

00:31:26.535 --> 00:31:29.620
notes in the Cloud and carry
it on your various devices

00:31:29.620 --> 00:31:30.900
that you have.

00:31:30.900 --> 00:31:32.150
So the UI is really simple.

00:31:32.150 --> 00:31:34.630
It's got an add note
functionality.

00:31:34.630 --> 00:31:36.680
So here I can say, what
did I want to do?

00:31:36.680 --> 00:31:38.150
I want to build a rocket.

00:31:38.150 --> 00:31:39.400
How about that?

00:31:42.450 --> 00:31:47.190
So what's happening now is the
build a rocket note is

00:31:47.190 --> 00:31:49.830
actually being sent over
on the wire in JSON

00:31:49.830 --> 00:31:51.860
format to App Engine.

00:31:51.860 --> 00:31:54.520
And it's securely stored
in the Cloud for you.

00:31:54.520 --> 00:31:56.290
Right, so that's cool.

00:31:56.290 --> 00:31:58.300
Let's just write another note
to make things more

00:31:58.300 --> 00:31:58.780
interesting.

00:31:58.780 --> 00:32:06.260
Let's take it to the moon.

00:32:06.260 --> 00:32:08.320
And what do we do there?

00:32:08.320 --> 00:32:13.450
Let's go build maps
for the moon.

00:32:13.450 --> 00:32:16.000
We are Google here so we
build maps everywhere.

00:32:16.000 --> 00:32:22.930
So just to make sure that I'm
not storing it anywhere else,

00:32:22.930 --> 00:32:26.410
App Engine provides a cool
interface for administration

00:32:26.410 --> 00:32:30.570
that's available both locally as
well as on your App Engine

00:32:30.570 --> 00:32:31.960
remote Endpoint.

00:32:31.960 --> 00:32:35.200
So here I'm actually using a
local development server

00:32:35.200 --> 00:32:37.010
that's like a local version
of App Engine

00:32:37.010 --> 00:32:38.780
running for your testing.

00:32:38.780 --> 00:32:41.250
So I'm going to show you the
data that's actually

00:32:41.250 --> 00:32:44.250
stored in the Cloud.

00:32:44.250 --> 00:32:47.300
So you see an entity kind
here with just Note.

00:32:47.300 --> 00:32:50.110
I'm using the NoSQL
data store.

00:32:50.110 --> 00:32:53.450
I'm storing my notes
in a note object.

00:32:53.450 --> 00:32:56.080
So if I do a list entities over
there, we should be able

00:32:56.080 --> 00:33:00.760
to see that the two notes that
I built, build a rocket and

00:33:00.760 --> 00:33:02.650
take it to the moon,
are right there.

00:33:02.650 --> 00:33:05.710
And they're automatically tied
to my email address, which

00:33:05.710 --> 00:33:08.060
means that I've already
authenticated using the same

00:33:08.060 --> 00:33:10.710
OAuth stuff that Yaniv
just showed you.

00:33:10.710 --> 00:33:11.200
Right?

00:33:11.200 --> 00:33:15.630
So storing stuff on your Cloud
and getting it from

00:33:15.630 --> 00:33:16.570
one device is fine.

00:33:16.570 --> 00:33:17.620
But it's not cool enough.

00:33:17.620 --> 00:33:18.387
What do you think?

00:33:18.387 --> 00:33:20.720
YANIV INBAR: You know what I
think would be really cool?

00:33:20.720 --> 00:33:21.130
SRIRAM SAROOP: Yeah?

00:33:21.130 --> 00:33:22.500
YANIV INBAR: If you could
show two devices.

00:33:22.500 --> 00:33:23.100
SRIRAM SAROOP: Awesome.

00:33:23.100 --> 00:33:24.270
Let's do that.

00:33:24.270 --> 00:33:26.370
So how about that?

00:33:26.370 --> 00:33:27.790
Let's take another device.

00:33:27.790 --> 00:33:31.030
OK, so the other device
automatically has the state.

00:33:31.030 --> 00:33:32.950
I didn't have to do anything.

00:33:32.950 --> 00:33:35.490
So let's give another demo.

00:33:35.490 --> 00:33:36.740
So OK, you go to the moon.

00:33:39.300 --> 00:33:43.390
Let's go and hang out in the
moon, not literally, actually

00:33:43.390 --> 00:33:44.640
using Google Hangout.

00:33:47.080 --> 00:33:48.180
YANIV INBAR: Sergi's
next project.

00:33:48.180 --> 00:33:51.670
SRIRAM SAROOP: So once I click
on Save, what should happen is

00:33:51.670 --> 00:33:55.570
that this note should go
to App Engine, right?

00:33:55.570 --> 00:33:58.500
And App Engine will use Google
Cloud Messaging to actually

00:33:58.500 --> 00:34:00.520
ping all devices which
are registered for

00:34:00.520 --> 00:34:02.660
this particular user.

00:34:02.660 --> 00:34:05.480
The user is srsaroop@gmail.com
that you saw.

00:34:05.480 --> 00:34:09.280
So hand in my mouth I'm
going to try this.

00:34:09.280 --> 00:34:11.340
Let's hit on Save.

00:34:11.340 --> 00:34:11.889
How about that?

00:34:11.889 --> 00:34:12.350
YANIV INBAR: Yeah.

00:34:12.350 --> 00:34:14.710
[APPLAUSE]

00:34:14.710 --> 00:34:15.680
SRIRAM SAROOP: Great.

00:34:15.680 --> 00:34:18.489
Now let's do a couple of
other things, right?

00:34:18.489 --> 00:34:19.179
How about an edit?

00:34:19.179 --> 00:34:21.389
Is that going to still work?

00:34:21.389 --> 00:34:23.739
Let's not build maps.

00:34:23.739 --> 00:34:24.989
Let's build glasses.

00:34:32.679 --> 00:34:34.429
OK, I'm going to delete
the whole thing.

00:34:34.429 --> 00:34:36.520
YANIV INBAR: Perfect.

00:34:36.520 --> 00:34:37.100
Let's see it.

00:34:37.100 --> 00:34:37.900
SRIRAM SAROOP: OK, the
emulator is not very

00:34:37.900 --> 00:34:39.150
responsive.

00:34:42.650 --> 00:34:43.909
OK, let's give it
one more shot.

00:34:46.980 --> 00:34:48.230
Let's click on Edit.

00:34:53.480 --> 00:34:54.810
All right.

00:34:54.810 --> 00:34:55.630
YANIV INBAR: Just click Save.

00:34:55.630 --> 00:34:58.590
SRIRAM SAROOP: Let's
build glasses.

00:34:58.590 --> 00:35:01.730
OK, what's going
to happen now?

00:35:01.730 --> 00:35:03.336
All right, there you go.

00:35:03.336 --> 00:35:05.566
[APPLAUSE]

00:35:05.566 --> 00:35:08.910
SRIRAM SAROOP: All right, so
this is an example of an

00:35:08.910 --> 00:35:13.040
application that shows you how
to use Google Cloud Endpoint

00:35:13.040 --> 00:35:15.180
and get automatic states
synchronization using Google

00:35:15.180 --> 00:35:16.170
Cloud Messaging.

00:35:16.170 --> 00:35:17.700
So I'm going to be a little
adventurous now.

00:35:17.700 --> 00:35:19.340
And I'm actually going to show
you how to build this

00:35:19.340 --> 00:35:20.770
application from scratch.

00:35:20.770 --> 00:35:24.630
So let's go about doing that.

00:35:24.630 --> 00:35:26.140
And I'm a product manager.

00:35:26.140 --> 00:35:27.940
If I can build this application,
I'm sure all of

00:35:27.940 --> 00:35:31.000
you engineers can do that.

00:35:31.000 --> 00:35:35.030
So I'm going to start
with building a

00:35:35.030 --> 00:35:36.920
simple Android project.

00:35:36.920 --> 00:35:39.680
YANIV INBAR: Where did
you get this tool?

00:35:39.680 --> 00:35:40.360
SRIRAM SAROOP: Oh, right.

00:35:40.360 --> 00:35:41.200
Where did I get this tool?

00:35:41.200 --> 00:35:43.830
So a couple of things you need
to note here so the first

00:35:43.830 --> 00:35:46.050
thing is that I've installed a
Google plug-in for Eclipse,

00:35:46.050 --> 00:35:50.160
which is a simple utility to
easily help you develop using

00:35:50.160 --> 00:35:51.440
App Engine.

00:35:51.440 --> 00:35:54.330
You can do a one click
deploy to App Engine.

00:35:54.330 --> 00:35:55.930
The font might be a
little small for

00:35:55.930 --> 00:35:57.750
the guys in the back.

00:35:57.750 --> 00:35:59.120
So I'll show that to
you in a minute.

00:35:59.120 --> 00:36:01.720
So I've essentially installed
Google plug-in for Eclipse and

00:36:01.720 --> 00:36:03.310
your favorite Android
development tools.

00:36:03.310 --> 00:36:06.400
And these two plug-ins really
work well together.

00:36:06.400 --> 00:36:10.210
So let's go ahead.

00:36:10.210 --> 00:36:16.260
Let's call it Cloud
notes Z one.

00:36:16.260 --> 00:36:17.630
All right, I'll go
to defaults here.

00:36:17.630 --> 00:36:19.020
Let's give it a package name.

00:36:19.020 --> 00:36:21.190
Let's call it Cloud notes.

00:36:21.190 --> 00:36:22.100
I don't need an [INAUDIBLE].

00:36:22.100 --> 00:36:23.140
I'm going to build my own.

00:36:23.140 --> 00:36:24.275
So I'm finished.

00:36:24.275 --> 00:36:28.300
All right, so this is like
a simple Android project.

00:36:28.300 --> 00:36:31.650
And you're thinking, how do I
generate a backend for it?

00:36:31.650 --> 00:36:33.620
Is that going to be difficult?

00:36:33.620 --> 00:36:36.810
Now, just look at this.

00:36:36.810 --> 00:36:39.910
If I right-click this Android
project under the Google menu,

00:36:39.910 --> 00:36:42.670
you see there is this
option called

00:36:42.670 --> 00:36:44.090
Generate App Engine backend.

00:36:44.090 --> 00:36:44.890
It's as simple as that.

00:36:44.890 --> 00:36:46.140
All you have to do
is click on it.

00:36:48.300 --> 00:36:52.300
So what's happening is we are
downloading a bunch of

00:36:52.300 --> 00:36:57.240
libraries that's going to help
you build APIs on App Engine.

00:36:57.240 --> 00:36:59.720
And it's automatically saved
in your class [? pod. ?]

00:36:59.720 --> 00:37:02.270
And not only that, there are
libraries for Google Cloud

00:37:02.270 --> 00:37:04.050
messaging, which is
also downloaded.

00:37:04.050 --> 00:37:06.550
And there's a library to
actually register your device

00:37:06.550 --> 00:37:07.150
with App Engine.

00:37:07.150 --> 00:37:08.190
That's also downloaded.

00:37:08.190 --> 00:37:10.100
So all that is done for you.

00:37:10.100 --> 00:37:12.430
So you essentially have two
projects, one an Android

00:37:12.430 --> 00:37:14.560
project and one the
corresponding App Engine

00:37:14.560 --> 00:37:15.660
backend for it.

00:37:15.660 --> 00:37:17.010
So what's the next step?

00:37:17.010 --> 00:37:20.560
The next step is to define APIs
that you can call from

00:37:20.560 --> 00:37:21.460
the Android app.

00:37:21.460 --> 00:37:22.940
So what do you define APIs on?

00:37:22.940 --> 00:37:25.050
You need to define it on some
kind of a resource.

00:37:25.050 --> 00:37:28.870
So in my case, the resource
is just a note class.

00:37:28.870 --> 00:37:32.540
So as you might have guessed, a
note is nothing but a simple

00:37:32.540 --> 00:37:36.150
plain Java, a portal.

00:37:36.150 --> 00:37:37.950
So I'm going to just copy
over some code.

00:37:44.140 --> 00:37:45.390
Let's look at this.

00:37:48.870 --> 00:37:53.700
All right, so the note class is
nothing but a ID, which is

00:37:53.700 --> 00:37:55.090
like a unique field.

00:37:55.090 --> 00:37:58.410
I've marked it with a add ID
annotation, which essentially

00:37:58.410 --> 00:38:01.110
says that it's a unique
identifier for

00:38:01.110 --> 00:38:02.370
this particular object.

00:38:02.370 --> 00:38:05.280
At entity is a standard Java
persistence API annotation to

00:38:05.280 --> 00:38:07.730
say that this object is
going to be persisted.

00:38:07.730 --> 00:38:10.600
Description and email
address are just

00:38:10.600 --> 00:38:12.430
fields, setters and getters.

00:38:12.430 --> 00:38:15.300
Now, how do I go about creating
APIs that actually

00:38:15.300 --> 00:38:17.370
create a note, delete a note,
list notes, all the

00:38:17.370 --> 00:38:18.610
functionality that you see?

00:38:18.610 --> 00:38:21.510
Again, our aim is to reduce the
amount of code that you

00:38:21.510 --> 00:38:23.130
have to write on App Engine.

00:38:23.130 --> 00:38:26.530
Google plug-in for Eclipse acts
like a good friend and

00:38:26.530 --> 00:38:30.500
allows you to do a one-click
Generate Cloud Endpoint class.

00:38:30.500 --> 00:38:31.150
How about that?

00:38:31.150 --> 00:38:34.855
So all your code is
pregenerated.

00:38:34.855 --> 00:38:36.840
[APPLAUSE]

00:38:36.840 --> 00:38:40.650
SRIRAM SAROOP: So you have the
list note method, which

00:38:40.650 --> 00:38:43.460
actually uses the Java
persistence API to persist

00:38:43.460 --> 00:38:48.320
your notes to the App
Engine data store.

00:38:48.320 --> 00:38:50.180
So all this code is pregenerated
for you.

00:38:50.180 --> 00:38:52.330
It should just work
out of the box.

00:38:52.330 --> 00:38:52.830
There's list node.

00:38:52.830 --> 00:38:56.750
There's get note, insert note,
update note, and remove note.

00:38:56.750 --> 00:38:59.580
In addition to all this code,
what you should notice is the

00:38:59.580 --> 00:39:01.210
small annotation on the top.

00:39:01.210 --> 00:39:03.790
It's the at API annotation,
which essentially says that

00:39:03.790 --> 00:39:05.360
this is an Endpoint
that I want to be

00:39:05.360 --> 00:39:07.600
exposed as a REST API.

00:39:07.600 --> 00:39:09.400
That's the only annotation
that you need to add.

00:39:09.400 --> 00:39:10.780
You can modify this class.

00:39:10.780 --> 00:39:12.720
You can add other
functionality.

00:39:12.720 --> 00:39:15.270
For example, if you want to
search note by some kind of a

00:39:15.270 --> 00:39:16.980
substring, you can add that.

00:39:16.980 --> 00:39:19.130
And in which case, you will have
to annotate each of the

00:39:19.130 --> 00:39:21.045
methods with an at API
method annotation.

00:39:21.045 --> 00:39:22.370
You can read up that
in the docs.

00:39:22.370 --> 00:39:23.880
But in the default case,
this should just

00:39:23.880 --> 00:39:25.070
work out of the box.

00:39:25.070 --> 00:39:28.330
So one thing that's missing in
this code is the concept of

00:39:28.330 --> 00:39:30.400
authentication and a user.

00:39:30.400 --> 00:39:33.870
So list note, in this case, is
just selecting notes from the

00:39:33.870 --> 00:39:34.940
App Engine data store.

00:39:34.940 --> 00:39:37.060
It doesn't really select notes
that correspond to a

00:39:37.060 --> 00:39:38.120
particular user.

00:39:38.120 --> 00:39:41.490
So how do I add the notion
of authentication?

00:39:41.490 --> 00:39:44.120
So it's, again, really simple.

00:39:44.120 --> 00:39:45.640
So I've just made the
modifications.

00:39:45.640 --> 00:39:46.560
And I'm just going
to copy over the

00:39:46.560 --> 00:39:47.910
modified note Endpoint.

00:39:50.610 --> 00:39:53.280
So I'll show you what needs
to be done here.

00:39:53.280 --> 00:39:56.470
So if you notice in the at API
annotation, I'm adding two

00:39:56.470 --> 00:39:57.400
other parameters.

00:39:57.400 --> 00:39:58.340
One is a client ID.

00:39:58.340 --> 00:39:59.780
That should be very familiar.

00:39:59.780 --> 00:40:03.120
Yaniv just generated that
from the API console.

00:40:03.120 --> 00:40:04.270
So you just need to
copy that string

00:40:04.270 --> 00:40:05.310
out that Yaniv generated.

00:40:05.310 --> 00:40:06.380
Copy it there.

00:40:06.380 --> 00:40:08.560
The audience is just to make
sure that the request is

00:40:08.560 --> 00:40:10.560
coming from the correct
server.

00:40:10.560 --> 00:40:13.370
So it's just the application
identifier that you can get

00:40:13.370 --> 00:40:14.790
when you register
with App Engine.

00:40:14.790 --> 00:40:17.530
So those are two parameters
that you need to put.

00:40:17.530 --> 00:40:19.550
And after that, life
is simple.

00:40:19.550 --> 00:40:23.260
So what you need to do is to add
a parameter called user.

00:40:23.260 --> 00:40:25.810
So user is defined by
the App Engine SDK.

00:40:25.810 --> 00:40:29.120
And this user object is
automatically filled in by App

00:40:29.120 --> 00:40:33.910
Engine when a valid request
comes in to App Engine.

00:40:33.910 --> 00:40:36.270
So when a valid request with
the access token that Yaniv

00:40:36.270 --> 00:40:39.025
spoke about comes into App
Engine, App Engine is able to

00:40:39.025 --> 00:40:41.370
validate that and is able to
convert that to the user

00:40:41.370 --> 00:40:44.420
object that comes in nicely
to your APIs.

00:40:44.420 --> 00:40:45.990
So you don't really have to
pass this user object.

00:40:45.990 --> 00:40:48.290
It's created by App
Engine for you.

00:40:48.290 --> 00:40:51.570
And then it's just a matter of
changing your code a little

00:40:51.570 --> 00:40:55.085
bit to make sure that you're
fetching the notes for a

00:40:55.085 --> 00:40:55.685
particular email address.

00:40:55.685 --> 00:40:58.100
The user object has a
email address field.

00:40:58.100 --> 00:41:01.040
So you can use that
to achieve that.

00:41:01.040 --> 00:41:04.920
So similarly I modify all
the other methods.

00:41:04.920 --> 00:41:07.990
Get note I add a user parameter
and make the

00:41:07.990 --> 00:41:09.140
necessary checks.

00:41:09.140 --> 00:41:12.160
So all that stuff should
be self-explanatory.

00:41:12.160 --> 00:41:13.750
YANIV INBAR: Can you show me a
little bit what it looks like

00:41:13.750 --> 00:41:14.920
in the Android application?

00:41:14.920 --> 00:41:16.390
SRIRAM SAROOP: Sure.

00:41:16.390 --> 00:41:19.760
Before I do that, one thing that
I didn't talk about in

00:41:19.760 --> 00:41:22.880
App Engine is the ability to
actually ping devices when the

00:41:22.880 --> 00:41:25.430
state of a note changes.

00:41:25.430 --> 00:41:26.070
How do I do that?

00:41:26.070 --> 00:41:27.590
Is that going to be difficult?

00:41:27.590 --> 00:41:32.880
Not at all, so device ping is
a class that's generated by

00:41:32.880 --> 00:41:34.920
the Google plug-in
for Eclipse.

00:41:34.920 --> 00:41:39.510
And device ping has a method
called ping all devices.

00:41:39.510 --> 00:41:41.780
All you need to do is to
call ping all devices.

00:41:41.780 --> 00:41:44.420
And all devices registered
with App Engine will

00:41:44.420 --> 00:41:46.550
automatically be sent a ping.

00:41:46.550 --> 00:41:48.000
So let me just copy
one more class.

00:41:48.000 --> 00:41:49.590
And then we should be able to
go to the Android piece.

00:41:57.670 --> 00:42:00.910
All right, so like I said,
whenever the state of the

00:42:00.910 --> 00:42:03.050
resource changes, in this case,
note, so for example,

00:42:03.050 --> 00:42:06.980
when I do an insert note, I just
have to call device ping

00:42:06.980 --> 00:42:07.890
or ping all devices.

00:42:07.890 --> 00:42:09.210
And you know that should
send a [INAUDIBLE]

00:42:09.210 --> 00:42:09.710
ping.

00:42:09.710 --> 00:42:12.070
So let's go on to
the Android app.

00:42:12.070 --> 00:42:15.960
So I'm not going to show you the
standard stuff of Android

00:42:15.960 --> 00:42:17.620
in terms of UI development
and all that.

00:42:17.620 --> 00:42:21.060
I'll just show you the
pieces where I

00:42:21.060 --> 00:42:21.890
need to call the Endpoints.

00:42:21.890 --> 00:42:23.650
So I'll copy over a bunch
of resources that's

00:42:23.650 --> 00:42:24.900
needed for my app.

00:42:28.470 --> 00:42:31.010
Let's get this [INAUDIBLE]
.xml out of the way.

00:42:31.010 --> 00:42:32.260
I don't need it.

00:42:33.980 --> 00:42:36.510
And I'll copy a bunch
of classes.

00:42:36.510 --> 00:42:49.090
I'll quickly go through them
and then copy the manifest,

00:42:49.090 --> 00:42:51.020
which defines the activities
that I have.

00:42:54.020 --> 00:42:56.010
The last thing I need to copy
is this Google Play services

00:42:56.010 --> 00:42:56.380
[INAUDIBLE]

00:42:56.380 --> 00:42:56.960
jar.

00:42:56.960 --> 00:43:00.510
So it's the jar which allows
you to have that awesome

00:43:00.510 --> 00:43:02.880
authorization screen that
Yaniv showed you.

00:43:02.880 --> 00:43:05.850
Unfortunately, it's not part
of the Android SDK yet.

00:43:05.850 --> 00:43:06.550
It'll soon be.

00:43:06.550 --> 00:43:09.540
So in which case, you don't
have to do this.

00:43:09.540 --> 00:43:13.300
All right, so let's look
at the classes

00:43:13.300 --> 00:43:14.550
that have been generated.

00:43:17.450 --> 00:43:19.560
OK, so it's showing me
a bunch of errors.

00:43:19.560 --> 00:43:23.350
So let's be adventurous and
see what those errors are.

00:43:23.350 --> 00:43:27.070
So it's essentially saying that
it's not able to find out

00:43:27.070 --> 00:43:29.260
what this con.appspots
stuff is.

00:43:29.260 --> 00:43:31.960
So one thing that it forgot to
do is to actually generate a

00:43:31.960 --> 00:43:32.640
[? strongly-type ?]

00:43:32.640 --> 00:43:34.850
client library for my API.

00:43:34.850 --> 00:43:37.130
So Yaniv showed you how you can
use a Java client library,

00:43:37.130 --> 00:43:39.150
how you can go to the website
and download the APIs for

00:43:39.150 --> 00:43:39.870
various libraries.

00:43:39.870 --> 00:43:44.200
Now, how do you do the same for
the APIs that you develop?

00:43:44.200 --> 00:43:46.380
Not a problem at all so
right-click your App Engine

00:43:46.380 --> 00:43:49.630
project, Google generate Cloud
Endpoint client library.

00:43:52.620 --> 00:43:55.440
So if things work, that client
library should automatically

00:43:55.440 --> 00:43:56.650
be generated.

00:43:56.650 --> 00:43:58.650
Copy down to your
Android project.

00:43:58.650 --> 00:43:59.630
And there you go.

00:43:59.630 --> 00:44:01.024
The compile errors are gone.

00:44:01.024 --> 00:44:04.900
[APPLAUSE]

00:44:04.900 --> 00:44:07.710
SRIRAM SAROOP: So if you see the
lib folder, all the client

00:44:07.710 --> 00:44:10.200
libraries, including the awesome
Java client library

00:44:10.200 --> 00:44:13.720
with all the OAuth libraries,
are copied over, set in your

00:44:13.720 --> 00:44:15.030
class [? pod. ?]

00:44:15.030 --> 00:44:17.610
In addition to that, you
also have classes that

00:44:17.610 --> 00:44:18.350
you can call into.

00:44:18.350 --> 00:44:20.210
So I'll show you in a minute
how that's done.

00:44:20.210 --> 00:44:22.570
So an example of an Async task
that I'm going to show you

00:44:22.570 --> 00:44:24.920
here is Async edit note,
which is actually the

00:44:24.920 --> 00:44:26.600
class to edit a note.

00:44:26.600 --> 00:44:29.380
And if you notice, the code
is really just one line.

00:44:29.380 --> 00:44:33.000
I just get a object
called Endpoint.

00:44:33.000 --> 00:44:35.410
I construct it in a very similar
way as I would for any

00:44:35.410 --> 00:44:36.160
other Google API.

00:44:36.160 --> 00:44:38.360
And I just call the method
that you want to call.

00:44:38.360 --> 00:44:40.000
In this case, it's
update note.

00:44:40.000 --> 00:44:41.370
And I pass in the note object.

00:44:41.370 --> 00:44:43.270
It's as simple as that.

00:44:43.270 --> 00:44:46.520
So all that stuff was fine.

00:44:46.520 --> 00:44:47.890
Now, do I want to actually--

00:44:47.890 --> 00:44:49.320
do we have time to actually
run this app?

00:44:49.320 --> 00:44:50.010
I think we do.

00:44:50.010 --> 00:44:51.260
So let's give it a shot.

00:44:53.840 --> 00:44:55.320
YANIV INBAR: So what you did
here is you're actually

00:44:55.320 --> 00:44:56.070
running it locally?

00:44:56.070 --> 00:44:56.390
SRIRAM SAROOP: Yeah.

00:44:56.390 --> 00:44:58.360
YANIV INBAR: There's a local
App Engine instance.

00:44:58.360 --> 00:44:59.400
SRIRAM SAROOP: That's right.

00:44:59.400 --> 00:45:01.200
So I'm running stuff
locally here.

00:45:01.200 --> 00:45:02.670
When you're developing with
the Cloud, you want the

00:45:02.670 --> 00:45:04.470
ability to test stuff locally
before you can

00:45:04.470 --> 00:45:06.020
actually deploy it.

00:45:06.020 --> 00:45:09.010
So let me show you how
I'm doing that here.

00:45:09.010 --> 00:45:11.220
So just click on the project.

00:45:11.220 --> 00:45:14.000
Click on the run button.

00:45:14.000 --> 00:45:16.390
And App Engine should start
up locally for you.

00:45:19.340 --> 00:45:20.050
Let's give it a while.

00:45:20.050 --> 00:45:21.300
The network here is
not very good.

00:45:26.320 --> 00:45:28.560
All right, it started.

00:45:28.560 --> 00:45:32.100
So let's quickly deploy
the Android app.

00:45:38.940 --> 00:45:39.980
It's not just the network.

00:45:39.980 --> 00:45:41.285
My laptop is also slow.

00:45:44.030 --> 00:45:45.280
Can't blame Innertrod
for everything.

00:45:49.880 --> 00:45:51.220
All right, but I think
you guys should

00:45:51.220 --> 00:45:53.030
trust that it works.

00:45:53.030 --> 00:45:54.750
Let's have a quick
shot at that.

00:45:58.330 --> 00:45:58.780
YANIV INBAR: I have to say.

00:45:58.780 --> 00:46:00.920
This is pretty amazing, 10
minutes to build an Android

00:46:00.920 --> 00:46:01.408
app like that.

00:46:01.408 --> 00:46:03.360
SRIRAM SAROOP: Yeah.

00:46:03.360 --> 00:46:05.190
Well, I had a lot of code
written already.

00:46:09.580 --> 00:46:10.650
All right, cross your fingers.

00:46:10.650 --> 00:46:12.100
So this is the new app.

00:46:12.100 --> 00:46:13.810
It just come out there.

00:46:13.810 --> 00:46:16.305
So the spinning wheel indicates
that it's making a

00:46:16.305 --> 00:46:17.640
call to get all the notes.

00:46:17.640 --> 00:46:18.590
Obviously, there are no notes.

00:46:18.590 --> 00:46:21.910
Because it's a brand new app.

00:46:21.910 --> 00:46:24.940
So let's chill out since
its end of the day.

00:46:24.940 --> 00:46:26.190
You guys want to go home.

00:46:28.870 --> 00:46:31.260
All right, chill out, goes in.

00:46:31.260 --> 00:46:36.280
And just to make sure that I'm
not bluffing you guys, let's

00:46:36.280 --> 00:46:37.940
go ahead and click
on list notes.

00:46:37.940 --> 00:46:39.860
And there you see chill
out out there.

00:46:39.860 --> 00:46:40.342
YANIV INBAR: All right.

00:46:40.342 --> 00:46:43.550
[APPLAUSE]

00:46:43.550 --> 00:46:45.332
SRIRAM SAROOP: All right,
let's switch to--

00:46:50.260 --> 00:46:50.580
YANIV INBAR: Great.

00:46:50.580 --> 00:46:56.280
So you probably want to get some
more information about

00:46:56.280 --> 00:46:57.730
Google Cloud Endpoints.

00:46:57.730 --> 00:46:59.410
There's a great link here.

00:46:59.410 --> 00:47:03.200
It tells you about the backend
part of building mobile apps

00:47:03.200 --> 00:47:07.700
as well as covering iOS
and web applications.

00:47:07.700 --> 00:47:09.240
Google Cloud OAuth support
all of those.

00:47:09.240 --> 00:47:12.340
And in fact, we have the same
generation service to provide

00:47:12.340 --> 00:47:12.870
[? strongly-type ?]

00:47:12.870 --> 00:47:18.190
libraries for iOS, objective C
and JavaScript dynamically.

00:47:18.190 --> 00:47:19.130
[APPLAUSE]

00:47:19.130 --> 00:47:20.380
YANIV INBAR: Yeah.

00:47:22.150 --> 00:47:26.790
And another great I/O session
about how to do it with HTML5

00:47:26.790 --> 00:47:28.280
so I'm pretty excited
about this.

00:47:28.280 --> 00:47:29.700
And I hope you are, too.

00:47:29.700 --> 00:47:35.750
I highly encourage you to go to
the request trusted tester.

00:47:35.750 --> 00:47:37.990
I can show that link real
quick right there,

00:47:37.990 --> 00:47:39.240
endpoints-truste
d-tester.appspot.com.

00:47:41.330 --> 00:47:42.250
Go there.

00:47:42.250 --> 00:47:45.780
As well, if you're interested
in how to build with Google

00:47:45.780 --> 00:47:49.720
Web APIs, your next
step should be to

00:47:49.720 --> 00:47:50.530
go to the code labs.

00:47:50.530 --> 00:47:52.600
So we actually have two great
code labs for you tomorrow.

00:47:52.600 --> 00:48:00.230
The first is how to build
REST APIs for mobile.

00:48:00.230 --> 00:48:02.980
I think there's a great
tic-tac-to sample that you can

00:48:02.980 --> 00:48:05.770
build, a very simple one.

00:48:05.770 --> 00:48:07.910
And I hope that gives you
confidence of working with

00:48:07.910 --> 00:48:10.200
Google Cloud Endpoints.

00:48:10.200 --> 00:48:11.300
That's at 11 o'clock.

00:48:11.300 --> 00:48:14.790
And I'll be there at 1:15
for the code lab on

00:48:14.790 --> 00:48:16.170
working with Web APIs.

00:48:16.170 --> 00:48:17.890
I'll step you through
the outflow.

00:48:17.890 --> 00:48:19.335
I'm sorry I'm not going
to be able to show

00:48:19.335 --> 00:48:20.800
you Google Play services.

00:48:20.800 --> 00:48:22.930
But I'll show you the standard
Account Manager flow.

00:48:22.930 --> 00:48:27.750
It does work really great or at
least fairly well with your

00:48:27.750 --> 00:48:28.790
new Nexus 7 device.

00:48:28.790 --> 00:48:30.670
So bring that with you.

00:48:30.670 --> 00:48:32.560
And I'll be there to answer
any questions.

00:48:32.560 --> 00:48:34.810
And before we jump into
questions, I just want to make

00:48:34.810 --> 00:48:37.080
one request from
everybody here.

00:48:37.080 --> 00:48:39.210
If you like this session, please
grab one of those plus

00:48:39.210 --> 00:48:42.050
one cards and put
them in the box.

00:48:42.050 --> 00:48:43.120
I'd really appreciate it.

00:48:43.120 --> 00:48:43.900
SRIRAM SAROOP: And we
have a bunch of

00:48:43.900 --> 00:48:45.220
stickers, Cloud Endpoints.

00:48:45.220 --> 00:48:47.578
So come here and
collect those.

00:48:47.578 --> 00:48:52.030
[APPLAUSE]

00:48:52.030 --> 00:48:53.250
SRIRAM SAROOP: Can you go
to the mike, please?

00:48:53.250 --> 00:48:55.240
YANIV INBAR: Yeah, please go
line up next to the mike if

00:48:55.240 --> 00:48:56.580
you have any questions for us.

00:48:56.580 --> 00:49:00.440
If there's not enough time,
please feel free to come by.

00:49:00.440 --> 00:49:01.260
We'll just stick around.

00:49:01.260 --> 00:49:03.010
Happy to answer any questions
you might have.

00:49:03.010 --> 00:49:03.740
So go ahead.

00:49:03.740 --> 00:49:05.140
AUDIENCE: Yeah, I was
wondering if--

00:49:05.140 --> 00:49:07.445
These are great presentation
by the way.

00:49:07.445 --> 00:49:10.330
But I was wondering if any of
these tools and plug-ins are

00:49:10.330 --> 00:49:14.000
going to be available for
Intellij or other IDEs.

00:49:14.000 --> 00:49:16.440
SRIRAM SAROOP: So it's not
currently available.

00:49:16.440 --> 00:49:20.900
But we do have other means of
generating a Cloud Endpoint.

00:49:20.900 --> 00:49:23.400
For example, we provide a script
that you can just call

00:49:23.400 --> 00:49:24.650
on the command line.

00:49:24.650 --> 00:49:26.140
So currently we do not have IDE

00:49:26.140 --> 00:49:27.630
support other than Eclipse.

00:49:27.630 --> 00:49:30.560
AUDIENCE: Because, seriously,
Eclipse sucks.

00:49:30.560 --> 00:49:31.790
YANIV INBAR: Yeah, that's
a great question.

00:49:31.790 --> 00:49:33.040
So like he said there's
a command line tool.

00:49:33.040 --> 00:49:34.590
SRIRAM SAROOP: We can have
a debate on that.

00:49:34.590 --> 00:49:36.730
YANIV INBAR: So actually one
of the cool steps that he

00:49:36.730 --> 00:49:38.920
showed you is generating
the client library.

00:49:38.920 --> 00:49:40.130
That's actually done
in the Cloud.

00:49:40.130 --> 00:49:41.800
We actually have a service
that does it.

00:49:41.800 --> 00:49:43.850
So in theory, it should be
really easy to build Intellij

00:49:43.850 --> 00:49:45.080
integration.

00:49:45.080 --> 00:49:48.860
Because it's just a Cloud
service that you can call.

00:49:48.860 --> 00:49:52.800
AUDIENCE: So I'm actually
working on essentially a

00:49:52.800 --> 00:49:54.060
weather app.

00:49:54.060 --> 00:49:57.560
And all I'm trying to do is
synchronize some really simple

00:49:57.560 --> 00:50:02.010
settings like units, location,
stuff like that.

00:50:02.010 --> 00:50:05.900
And I came across the backup
API, which I know isn't

00:50:05.900 --> 00:50:06.655
supposed to be used for
synchronization.

00:50:06.655 --> 00:50:08.450
So that's kind of what I
wanted to ask about.

00:50:08.450 --> 00:50:14.090
Because having to go maintain
a server and do all of that

00:50:14.090 --> 00:50:16.540
work just to do something that
simple, it seems like App

00:50:16.540 --> 00:50:20.610
Engine is really designed more
for applications which almost

00:50:20.610 --> 00:50:22.140
revolve around--

00:50:22.140 --> 00:50:25.770
SRIRAM SAROOP: Yeah, so as an
example I showed you how to

00:50:25.770 --> 00:50:27.230
achieve states in transition.

00:50:27.230 --> 00:50:30.020
But one thing that I did not
show you is how do you

00:50:30.020 --> 00:50:31.610
actually store the
state locally.

00:50:31.610 --> 00:50:31.920
AUDIENCE: Exactly.

00:50:31.920 --> 00:50:32.920
SRIRAM SAROOP: And you don't
get it automatically

00:50:32.920 --> 00:50:34.020
synchronized with the Cloud.

00:50:34.020 --> 00:50:35.480
So just wait for a few weeks.

00:50:35.480 --> 00:50:37.580
We're coming up with an awesome
technology that's

00:50:37.580 --> 00:50:41.020
going to allow you to
synchronize shade preferences,

00:50:41.020 --> 00:50:43.440
which is the standard way of
storing settings on Android

00:50:43.440 --> 00:50:46.450
across multiple devices using
App Engine as a backend.

00:50:46.450 --> 00:50:48.010
So that's going to come out
of the box for you that

00:50:48.010 --> 00:50:48.550
you can just use.

00:50:48.550 --> 00:50:49.940
And that stuff should
just work.

00:50:49.940 --> 00:50:50.630
AUDIENCE: That's exactly
what I need.

00:50:50.630 --> 00:50:50.930
SRIRAM SAROOP: Awesome.

00:50:50.930 --> 00:50:51.470
AUDIENCE: Thank you.

00:50:51.470 --> 00:50:52.430
YANIV INBAR: Thanks
for asking.

00:50:52.430 --> 00:50:53.940
SRIRAM SAROOP: Yeah, yeah,
thanks for asking.

00:50:53.940 --> 00:50:56.200
I almost forgot about that.

00:50:56.200 --> 00:50:59.660
AUDIENCE: So I have a question
about the authorization part.

00:50:59.660 --> 00:51:02.620
Like you said, it's going to
be handled but yet to be

00:51:02.620 --> 00:51:04.290
released Google Play,
I don't know,--

00:51:04.290 --> 00:51:04.600
YANIV INBAR: Play services.

00:51:04.600 --> 00:51:06.130
AUDIENCE: --plug-in
or whatever.

00:51:06.130 --> 00:51:10.030
So does this mean that the
Account Manager stuff is being

00:51:10.030 --> 00:51:12.062
deprecating or--

00:51:12.062 --> 00:51:14.000
YANIV INBAR: Ah, great question
so is the Account

00:51:14.000 --> 00:51:15.760
Manager stuff being
deprecated?

00:51:15.760 --> 00:51:18.380
And I probably shouldn't answer
that question just

00:51:18.380 --> 00:51:22.030
because I'm not the person who
owns that part of the code.

00:51:22.030 --> 00:51:23.760
So I don't know what
their plans are.

00:51:23.760 --> 00:51:27.830
But essentially, yes, I mean if
not literally deprecated.

00:51:27.830 --> 00:51:28.510
SRIRAM SAROOP: Essentially,
yes.

00:51:28.510 --> 00:51:30.280
YANIV INBAR: We want you to
switch to using Google Play

00:51:30.280 --> 00:51:32.880
services definitely as
soon as it comes out.

00:51:32.880 --> 00:51:35.620
AUDIENCE: So it will be like
updated automatically along

00:51:35.620 --> 00:51:37.400
with the Play client or--

00:51:37.400 --> 00:51:38.850
YANIV INBAR: So it is actually
an essential

00:51:38.850 --> 00:51:40.230
part of Google Play.

00:51:40.230 --> 00:51:42.250
And the beautiful thing that
they've done is, rather than

00:51:42.250 --> 00:51:44.370
just building up the Google
Play, they've opened up for

00:51:44.370 --> 00:51:47.870
developers for anyone to use,
which is just fantastic.

00:51:47.870 --> 00:51:50.340
So because it's an essential
part of Google Play, it will

00:51:50.340 --> 00:51:52.310
be a market update
for everybody's

00:51:52.310 --> 00:51:54.500
device, Froyo and higher.

00:51:54.500 --> 00:51:57.620
AUDIENCE: Because up until now
you have to wait for the next

00:51:57.620 --> 00:52:00.740
iteration to get the Google
services and Account Manager

00:52:00.740 --> 00:52:01.690
and whatever.

00:52:01.690 --> 00:52:03.340
YANIV INBAR: So I want
to make this clear.

00:52:03.340 --> 00:52:06.190
It's not just part
of Jellybean.

00:52:06.190 --> 00:52:08.940
Because it's an independent
component, it's not part of

00:52:08.940 --> 00:52:10.930
the operating system,
it's just going

00:52:10.930 --> 00:52:11.980
to be a market update.

00:52:11.980 --> 00:52:13.630
You'll get a new application.

00:52:13.630 --> 00:52:15.680
And so that's the [? APK. ?]

00:52:15.680 --> 00:52:18.320
And as well, they will also
publish a jar file, which you

00:52:18.320 --> 00:52:21.770
include in your Android
application that makes it very

00:52:21.770 --> 00:52:23.860
easy to use that service.

00:52:23.860 --> 00:52:26.740
AUDIENCE: Thanks.

00:52:26.740 --> 00:52:28.880
AUDIENCE: Do you have any
examples of using access

00:52:28.880 --> 00:52:31.530
control lists and things like
that say, for instance, that

00:52:31.530 --> 00:52:34.950
note, you want a whole group to
be able to edit that note

00:52:34.950 --> 00:52:38.700
and where things would fit in?

00:52:38.700 --> 00:52:40.350
SRIRAM SAROOP: So we
don't right now.

00:52:40.350 --> 00:52:42.470
So maybe we could discuss a bit
more to understand what

00:52:42.470 --> 00:52:43.060
you're talking about.

00:52:43.060 --> 00:52:45.030
YANIV INBAR: Can you repeat
the question, please?

00:52:45.030 --> 00:52:48.220
AUDIENCE: Talking about access
control lists to Endpoints and

00:52:48.220 --> 00:52:52.870
data and who manages that, where
abouts is that managed?

00:52:52.870 --> 00:52:53.990
YANIV INBAR: Oh, that's
a great question.

00:52:53.990 --> 00:52:57.070
How do you set up access control
lists for that data?

00:52:57.070 --> 00:53:00.230
So let's follow up on that.

00:53:00.230 --> 00:53:02.390
We would like to find out more
about what your use case is.

00:53:02.390 --> 00:53:04.400
I mean, obviously, you can
build anything, right?

00:53:04.400 --> 00:53:06.160
It's an app engine.

00:53:06.160 --> 00:53:08.090
But that's a great question
how to make that easier.

00:53:12.110 --> 00:53:14.770
AUDIENCE: I had a question about
the Account Manager.

00:53:14.770 --> 00:53:21.750
You said that for using
basically Play services you'll

00:53:21.750 --> 00:53:24.430
be using, what was that,
AccountPicker?

00:53:24.430 --> 00:53:25.910
YANIV INBAR: Yes.

00:53:25.910 --> 00:53:30.170
AUDIENCE: Does that mean I need
a Google account or Gmail

00:53:30.170 --> 00:53:33.650
account to use Play services?

00:53:33.650 --> 00:53:35.420
YANIV INBAR: OK, yes, that's
a good question.

00:53:35.420 --> 00:53:38.590
So what I've done, so actually
I don't think there is that

00:53:38.590 --> 00:53:42.155
restriction necessarily,
however, as far as the Google

00:53:42.155 --> 00:53:43.250
Play services tools.

00:53:43.250 --> 00:53:47.370
However, because it will only
work with Google's Web APIs,

00:53:47.370 --> 00:53:50.200
it will not work with any OAuth
2.0 server, it has to be

00:53:50.200 --> 00:53:50.870
a Google account.

00:53:50.870 --> 00:53:53.780
Now, it doesn't have to
be a Gmail address.

00:53:53.780 --> 00:53:55.830
It can be even a
Yahoo account.

00:53:55.830 --> 00:53:57.880
As long as you've set up a
Google account for that email

00:53:57.880 --> 00:53:59.130
address, it should work.

00:54:02.840 --> 00:54:06.005
AUDIENCE: Is there a way to
use the OAuth and the API

00:54:06.005 --> 00:54:09.090
infrastructure without going
through App Engine like if

00:54:09.090 --> 00:54:11.250
it's your own server?

00:54:11.250 --> 00:54:14.320
SRIRAM SAROOP: So it's currently
not available.

00:54:14.320 --> 00:54:15.530
But that's an awesome idea.

00:54:15.530 --> 00:54:18.230
And we are looking
into it, yeah.

00:54:18.230 --> 00:54:21.280
YANIV INBAR: Yeah, build your
API on a different kind of

00:54:21.280 --> 00:54:24.910
server, so as we said, we built
this API infrastructure.

00:54:24.910 --> 00:54:29.470
In theory, you could build any
kind of service on top of it.

00:54:29.470 --> 00:54:34.050
But coming up with the
underlying infrastructure of

00:54:34.050 --> 00:54:38.910
connecting that Google Cloud
with that API infrastructure

00:54:38.910 --> 00:54:40.860
makes a lot more sense when it's
all part of the Google

00:54:40.860 --> 00:54:42.110
Cloud platform.

00:54:44.799 --> 00:54:46.915
AUDIENCE: Can you
still hear me?

00:54:46.915 --> 00:54:51.120
If you're looking to create
an API system for your

00:54:51.120 --> 00:54:53.090
corporation or whatever, is
there anything else you'd

00:54:53.090 --> 00:54:56.150
recommend out there
besides this?

00:54:56.150 --> 00:54:57.510
Obviously, you can't
use it yet.

00:54:57.510 --> 00:54:58.660
SRIRAM SAROOP: Sign up
for Cloud Endpoint.

00:54:58.660 --> 00:54:59.610
Check it out, man.

00:54:59.610 --> 00:55:00.588
AUDIENCE: OK.

00:55:00.588 --> 00:55:01.838
YANIV INBAR: Give it a shot.

00:55:04.990 --> 00:55:07.120
SRIRAM SAROOP: All right, so
we're close to wrapping up.

00:55:07.120 --> 00:55:08.340
So thanks a lot, guys.

00:55:08.340 --> 00:55:13.680
[APPLAUSE]

