WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.410
[MUSIC PLAYING]

00:00:04.410 --> 00:00:06.330
VADIM CAEN: Good
morning, everyone.

00:00:06.330 --> 00:00:08.550
Thank you for coming
so early to our talk

00:00:08.550 --> 00:00:11.720
up, What's New in Android
Studio, UI Design and Debugging

00:00:11.720 --> 00:00:12.220
Tools.

00:00:12.220 --> 00:00:12.720
Thank you.

00:00:12.720 --> 00:00:15.600
[APPLAUSE]

00:00:15.600 --> 00:00:18.900
I'm Vadim, from Android Studio,
working on the design tools.

00:00:18.900 --> 00:00:21.450
JEROME GAILLARD: I'm Jerome,
from the Android Studio team.

00:00:21.450 --> 00:00:23.760
JOE BAKER-MALONE: I'm Joe,
from Android Studio team.

00:00:23.760 --> 00:00:26.750
ASHLEY ROSE: I'm Ashley, from
Android Framework and JetPack.

00:00:26.750 --> 00:00:28.260
VADIM CAEN: All right.

00:00:28.260 --> 00:00:31.370
Before we start, a little
word about product mobile.

00:00:31.370 --> 00:00:33.930
You've heard maybe yesterday
that the Android Studio

00:00:33.930 --> 00:00:36.840
team has been focused on
product mobile to improve

00:00:36.840 --> 00:00:40.590
the end-to-end user
experience of Android Studio.

00:00:40.590 --> 00:00:43.320
Improving Android Studio
is not just about fixes.

00:00:43.320 --> 00:00:46.140
It's also about
improving how you use it,

00:00:46.140 --> 00:00:49.860
and filling any gaps that
we might have identified.

00:00:49.860 --> 00:00:52.470
Our tool chain-- when
it comes to design--

00:00:52.470 --> 00:00:54.720
it's building new layout,
building new navigation

00:00:54.720 --> 00:00:58.050
between this layout,
managing your resources,

00:00:58.050 --> 00:01:00.915
and dealing with the inspection
at runtime on your device.

00:01:03.090 --> 00:01:04.590
To go through this
tool chain, we're

00:01:04.590 --> 00:01:07.170
going to go through a
typical user journey,

00:01:07.170 --> 00:01:09.390
building the Google
Trips application.

00:01:09.390 --> 00:01:12.240
And to start with, Jerome will
talk about the Layout Editor

00:01:12.240 --> 00:01:15.880
and how to build the first
layout that you see here.

00:01:15.880 --> 00:01:17.670
JEROME GAILLARD:
Thank you, Vadim.

00:01:17.670 --> 00:01:20.070
So first of all,
we're going to build

00:01:20.070 --> 00:01:22.740
the first screen of
our Google Trips app,

00:01:22.740 --> 00:01:25.400
using the Layout Editor.

00:01:25.400 --> 00:01:27.960
Upon opening the Layout Editor,
this is the kind of screen

00:01:27.960 --> 00:01:29.630
you're going to see.

00:01:29.630 --> 00:01:32.520
Here, it's just a blank layout.

00:01:32.520 --> 00:01:35.210
The first thing we're going to
do is switch to blueprint mode,

00:01:35.210 --> 00:01:39.110
as it is faster,
and it's just less

00:01:39.110 --> 00:01:41.620
distracting when
trying to just build

00:01:41.620 --> 00:01:43.910
the constraints on your layout.

00:01:43.910 --> 00:01:46.220
You don't want to
be just looking

00:01:46.220 --> 00:01:48.980
at what the components
actually look like.

00:01:48.980 --> 00:01:51.050
I'm just going to--
from the palette--

00:01:51.050 --> 00:01:54.890
just dragging all the components
that I need for my layout,

00:01:54.890 --> 00:01:58.520
more or less in
the definite place.

00:01:58.520 --> 00:02:00.440
Once I'm done with
that comes the time

00:02:00.440 --> 00:02:02.000
to build the constraints.

00:02:04.740 --> 00:02:08.020
As a way to be a bit more
efficient building constraints,

00:02:08.020 --> 00:02:10.750
I could build them one by one.

00:02:10.750 --> 00:02:13.390
But using the
contextual menus, we

00:02:13.390 --> 00:02:17.140
can build several
constraints in one go.

00:02:17.140 --> 00:02:20.560
For example here, I want
to center the RecyclerView

00:02:20.560 --> 00:02:23.140
within the layout.

00:02:23.140 --> 00:02:26.710
One thing I can do is right
clicking on the RecyclerView,

00:02:26.710 --> 00:02:29.020
and in the contextual
menu there is the option

00:02:29.020 --> 00:02:31.360
of centering horizontally.

00:02:31.360 --> 00:02:34.450
What that does is it
creates both a left

00:02:34.450 --> 00:02:36.665
and a right constraint
in one click,

00:02:36.665 --> 00:02:38.665
ensuring that the
RecyclerView will be centered.

00:02:41.330 --> 00:02:44.790
Once I'm done building
all my constraints,

00:02:44.790 --> 00:02:48.530
this is what my layout looks
like in the blueprint mode.

00:02:48.530 --> 00:02:50.030
Obviously, it doesn't
really tell me

00:02:50.030 --> 00:02:53.660
right now if I built the right
thing, compared to the design

00:02:53.660 --> 00:02:55.185
that I was given.

00:02:55.185 --> 00:02:56.810
So I'm going to go
back to Design mode,

00:02:56.810 --> 00:02:59.060
and see what it looks like.

00:02:59.060 --> 00:03:03.650
In the Design mode, you
can see that it looks not

00:03:03.650 --> 00:03:07.640
very much like the original
design I was given.

00:03:07.640 --> 00:03:10.340
The reason for that is
that the RecyclerView view

00:03:10.340 --> 00:03:12.410
is pretty much empty.

00:03:12.410 --> 00:03:15.500
As you know,
RecyclerView usually

00:03:15.500 --> 00:03:18.620
get the data
populated at runtime,

00:03:18.620 --> 00:03:20.390
but that's not very
helpful when you're

00:03:20.390 --> 00:03:24.440
trying to build
your layout and make

00:03:24.440 --> 00:03:27.620
sure that it displays
correctly with the data

00:03:27.620 --> 00:03:30.380
that you're going to see.

00:03:30.380 --> 00:03:32.240
To solve that
problem, you can use

00:03:32.240 --> 00:03:34.990
design [? tools ?] attribute.

00:03:34.990 --> 00:03:38.490
So design time attributes,
you can simply--

00:03:38.490 --> 00:03:41.280
in the RecyclerView-- use
the contextual menu again,

00:03:41.280 --> 00:03:45.420
and the sample data picker,
just like you see on screen.

00:03:45.420 --> 00:03:48.540
And from the sample
data picker, you

00:03:48.540 --> 00:03:51.480
can pick one of the
predefined templates

00:03:51.480 --> 00:03:54.600
that we provide for you
for RecyclerView items.

00:03:54.600 --> 00:03:58.470
Here, I just picked the
first one, the email client.

00:03:58.470 --> 00:04:05.340
Doing that creates a layout
for that RecyclerView

00:04:05.340 --> 00:04:08.860
item, that email client card.

00:04:08.860 --> 00:04:11.490
And at the same time, it
links it to your RecyclerView,

00:04:11.490 --> 00:04:16.950
so that in the Layout
Editor it shows populated.

00:04:16.950 --> 00:04:19.500
Of course, we're not
building any email client.

00:04:19.500 --> 00:04:21.870
What we want to build
in the RecyclerView

00:04:21.870 --> 00:04:23.970
is those Trips card.

00:04:23.970 --> 00:04:26.610
So I'm going to edit that
RecyclerView item that

00:04:26.610 --> 00:04:31.320
was created to be a Trip card.

00:04:31.320 --> 00:04:33.657
In the resource manager panel--

00:04:33.657 --> 00:04:35.490
in the left hand side
that you can see here,

00:04:35.490 --> 00:04:37.410
and that Vadim is
going to present

00:04:37.410 --> 00:04:39.420
to you in much more detail--

00:04:39.420 --> 00:04:45.180
I can simply first, rename my
RecyclerView item to something

00:04:45.180 --> 00:04:49.260
more appropriate to
my project, and then I

00:04:49.260 --> 00:04:51.180
can start editing it.

00:04:51.180 --> 00:04:54.810
Double clicking on the layout
in the Resource Manager

00:04:54.810 --> 00:04:58.980
will simply open that
layout in the Layout Editor.

00:05:01.570 --> 00:05:04.270
As you can see on screen,
I pretty much have

00:05:04.270 --> 00:05:08.420
all the right components
right there for my Trip card,

00:05:08.420 --> 00:05:11.110
like an ImageView,
couple of tags views,

00:05:11.110 --> 00:05:14.920
but they're obviously not
having the right constraints.

00:05:14.920 --> 00:05:17.230
So I'm going to start by
deleting all the constraints,

00:05:17.230 --> 00:05:23.620
clicking that button
in the toolbar.

00:05:23.620 --> 00:05:26.440
Once that's done, I'm
going to just reorganize

00:05:26.440 --> 00:05:29.770
all those constraints.

00:05:29.770 --> 00:05:35.470
One issue here is that we
have quite a few components

00:05:35.470 --> 00:05:37.933
overlapping each
other in a small area.

00:05:37.933 --> 00:05:39.100
That can be a bit cluttered.

00:05:39.100 --> 00:05:42.580
And we've heard from you
that in this situation,

00:05:42.580 --> 00:05:46.030
building constraints
can be a bit difficult.

00:05:46.030 --> 00:05:49.630
It can be sometimes difficult
to drag the constraint

00:05:49.630 --> 00:05:52.540
to the right target, on the
right components-- especially

00:05:52.540 --> 00:05:55.910
when components are overlapping.

00:05:55.910 --> 00:05:57.820
So what we are
now allowing to do

00:05:57.820 --> 00:06:01.480
is dragging the constraint
directly onto any place

00:06:01.480 --> 00:06:04.930
in the component that
you want to attach it to,

00:06:04.930 --> 00:06:08.260
and then a pop-up menu
opens, asking you what type

00:06:08.260 --> 00:06:11.320
of constraint you want to set.

00:06:11.320 --> 00:06:13.610
It gets really
interesting when you

00:06:13.610 --> 00:06:16.870
are dragging a constraint
into a location that

00:06:16.870 --> 00:06:19.330
has overlapping component.

00:06:19.330 --> 00:06:24.850
In that situation, we
are offering not only

00:06:24.850 --> 00:06:27.400
several types of
constraint, but you can also

00:06:27.400 --> 00:06:29.980
select which of the
overlapping components

00:06:29.980 --> 00:06:32.080
you want to attach
that constraint to.

00:06:32.080 --> 00:06:33.580
And that should
make it much easier

00:06:33.580 --> 00:06:37.270
to build constraint
layouts in the cases

00:06:37.270 --> 00:06:39.970
where you have overlapping
and small components.

00:06:42.730 --> 00:06:46.060
One final way that
can be helpful

00:06:46.060 --> 00:06:48.860
for you to build
constraints efficiently

00:06:48.860 --> 00:06:51.040
is using the componentry.

00:06:51.040 --> 00:06:56.350
So in the componentry, if you do
multi selection of components--

00:06:56.350 --> 00:06:59.650
like here, we selected
two text views--

00:06:59.650 --> 00:07:05.140
again with the contextual menu,
right clicking and selecting

00:07:05.140 --> 00:07:07.330
one of the
constraints available,

00:07:07.330 --> 00:07:09.430
you can create
that one constraint

00:07:09.430 --> 00:07:13.010
over the multi components
that are selected.

00:07:13.010 --> 00:07:15.550
So here, we create
two constraints

00:07:15.550 --> 00:07:17.650
at the same time on
those two text views.

00:07:20.430 --> 00:07:23.840
Once we're done building
all our constraints,

00:07:23.840 --> 00:07:27.110
it's time to customize
our views a little bit.

00:07:27.110 --> 00:07:29.450
For that, we're going to
use the Attributes Panel,

00:07:29.450 --> 00:07:33.280
on the right hand side
of the Layout Editor.

00:07:33.280 --> 00:07:35.530
We have redesigned
the Attributes Panel

00:07:35.530 --> 00:07:40.030
to show a new section at the
top called Declared Attributes.

00:07:40.030 --> 00:07:43.240
In that section, we
put all the attributes

00:07:43.240 --> 00:07:48.160
for the selected view that
have been set specifically

00:07:48.160 --> 00:07:49.640
for that view.

00:07:49.640 --> 00:07:52.240
So right there, you
can edit any attributes

00:07:52.240 --> 00:07:54.940
that have already been set.

00:07:54.940 --> 00:07:58.060
If you want to set a new
attribute on that view,

00:07:58.060 --> 00:08:00.190
you can simply click
the plus button

00:08:00.190 --> 00:08:04.990
and add the name and
value for that attribute.

00:08:04.990 --> 00:08:08.080
Another thing you can do
in the Attributes Panel

00:08:08.080 --> 00:08:13.090
is use the Constraint
Widget to set margins.

00:08:13.090 --> 00:08:17.760
From your feedback,
we've heard that you

00:08:17.760 --> 00:08:19.930
would have liked to see--

00:08:19.930 --> 00:08:25.030
in addition to being able to set
just actual values, like number

00:08:25.030 --> 00:08:27.160
value for the margin--

00:08:27.160 --> 00:08:30.910
you wanted to also be able to
set custom dimensions defined

00:08:30.910 --> 00:08:32.330
in your project.

00:08:32.330 --> 00:08:37.000
That's why we've added
that @ dot dot dot option

00:08:37.000 --> 00:08:40.360
at the bottom of your dropdown.

00:08:40.360 --> 00:08:44.800
Clicking on that button
opens a resource picker,

00:08:44.800 --> 00:08:48.010
where you can pick a
dimension that you've already

00:08:48.010 --> 00:08:50.380
defined in your project,
or you can create

00:08:50.380 --> 00:08:51.910
a new dimension right there.

00:08:54.770 --> 00:08:57.820
One final thing that
needs to happen--

00:08:57.820 --> 00:08:59.110
looking at that layout--

00:08:59.110 --> 00:09:03.060
you see that the ImageView is
populated with sample data,

00:09:03.060 --> 00:09:05.080
but it's just
default sample data

00:09:05.080 --> 00:09:06.910
coming from Android Studio.

00:09:06.910 --> 00:09:09.130
So that's not really
representative of the kind

00:09:09.130 --> 00:09:14.270
of data that your RecyclerView
will receive at runtime.

00:09:14.270 --> 00:09:17.980
So what you can do is
set your own sample data

00:09:17.980 --> 00:09:20.090
to that ImageView.

00:09:20.090 --> 00:09:26.410
We've added images of cities
into a directory called cities,

00:09:26.410 --> 00:09:29.890
in the sample data
folder of our project.

00:09:29.890 --> 00:09:34.750
You can see that it appears
in the sample data picture,

00:09:34.750 --> 00:09:40.070
and we can select it to
set that sample data.

00:09:40.070 --> 00:09:43.190
Going back to our
original layout,

00:09:43.190 --> 00:09:44.840
we can now see
that it looks much

00:09:44.840 --> 00:09:50.210
more like the original
design that you got.

00:09:50.210 --> 00:09:53.270
From there, you can
really see if the design

00:09:53.270 --> 00:09:55.760
has been implemented
properly, and will

00:09:55.760 --> 00:09:59.082
work when receiving real
data, once the application is

00:09:59.082 --> 00:09:59.915
running on a device.

00:10:04.160 --> 00:10:09.110
Now we're done with the building
of the first constraint,

00:10:09.110 --> 00:10:11.060
the first screen, and
we want to move on

00:10:11.060 --> 00:10:14.240
to building our next
screen in our application.

00:10:14.240 --> 00:10:19.460
But instead of just going back
to creating a layout file,

00:10:19.460 --> 00:10:21.440
and building it from
the Layout Editor,

00:10:21.440 --> 00:10:24.740
we want to start right there
thinking of the navigation

00:10:24.740 --> 00:10:29.480
flow of our app, and how the
first screen will transition

00:10:29.480 --> 00:10:31.677
into the second screen.

00:10:31.677 --> 00:10:34.010
To do that, we're going to
have a look at the Navigation

00:10:34.010 --> 00:10:36.490
Editor.

00:10:36.490 --> 00:10:39.520
The Navigation Editor
is a visual tool

00:10:39.520 --> 00:10:42.790
that makes it easier to use
the Navigation Architecture

00:10:42.790 --> 00:10:47.430
component from the
JetPack library.

00:10:47.430 --> 00:10:49.440
The way the Navigation
Architecture component

00:10:49.440 --> 00:10:55.410
works is it relies on having
a navigation host fragment

00:10:55.410 --> 00:10:59.310
as the main layout
in your application.

00:10:59.310 --> 00:11:02.340
Here in our activity
main layout file,

00:11:02.340 --> 00:11:07.290
we're going to drag
from the Layout Editor

00:11:07.290 --> 00:11:09.990
palette a NavHostFragment--

00:11:09.990 --> 00:11:12.610
it's there by default--

00:11:12.610 --> 00:11:15.930
and we're going to drag it
onto the design surface.

00:11:15.930 --> 00:11:19.560
When doing that, it
will ask you to select

00:11:19.560 --> 00:11:24.430
a navigation graph associated
with that NavHostFragment.

00:11:24.430 --> 00:11:26.820
If you haven't already
created a navigation graph,

00:11:26.820 --> 00:11:29.667
you can do it right
in that dialog, which

00:11:29.667 --> 00:11:30.500
is what we're doing.

00:11:33.330 --> 00:11:36.450
This is what your
layout will look like.

00:11:36.450 --> 00:11:38.090
It's empty.

00:11:38.090 --> 00:11:39.510
There's just this
NavHostFragment,

00:11:39.510 --> 00:11:43.620
because the Navigation
Architecture component

00:11:43.620 --> 00:11:45.690
is the one that's
going to populate it

00:11:45.690 --> 00:11:49.340
with the various fragments
that you are going to load.

00:11:49.340 --> 00:11:54.720
But double clicking on it will
open the Navigation Editor.

00:11:54.720 --> 00:11:59.360
This is what a Navigation Editor
looks like when it's empty.

00:11:59.360 --> 00:12:01.070
First thing we're
going to want to do

00:12:01.070 --> 00:12:05.000
is add our first screen as
the starting destination

00:12:05.000 --> 00:12:07.040
for our app.

00:12:07.040 --> 00:12:12.620
In the add destination
menu, you have

00:12:12.620 --> 00:12:16.978
pre-selected all the layouts
that exist in your app.

00:12:16.978 --> 00:12:19.520
So for us, we're going to just
select that fragment welcome--

00:12:19.520 --> 00:12:22.700
which is the layout we've
been working on previously--

00:12:22.700 --> 00:12:25.190
and set it right there.

00:12:25.190 --> 00:12:28.850
Next, we want to select,
to add the second screen.

00:12:28.850 --> 00:12:33.530
But because we haven't created
a layout for it already,

00:12:33.530 --> 00:12:35.900
we can simply create
a new destination

00:12:35.900 --> 00:12:38.900
from the add destination menu.

00:12:38.900 --> 00:12:42.350
Doing that will offer you
the possibility of creating

00:12:42.350 --> 00:12:45.093
a new fragment class and
its associated layout,

00:12:45.093 --> 00:12:46.760
and that's the layout
that's going to be

00:12:46.760 --> 00:12:48.350
used as the second screen.

00:12:51.000 --> 00:12:55.130
Once the two screens are
in the Navigation Editor,

00:12:55.130 --> 00:12:58.850
comes the time of
linking them together.

00:12:58.850 --> 00:13:01.460
That can be done with actions.

00:13:01.460 --> 00:13:05.510
You can simply create an
action as shown on screen.

00:13:05.510 --> 00:13:08.480
In addition, you can directly--
in the Attributes Panel

00:13:08.480 --> 00:13:09.980
of the Navigation Editor--

00:13:09.980 --> 00:13:13.160
set some of the properties
for that action,

00:13:13.160 --> 00:13:15.050
like what animation
will be played

00:13:15.050 --> 00:13:20.230
when transitioning through
that action, or pressing back.

00:13:20.230 --> 00:13:23.310
Another very interesting thing
that can be done with action

00:13:23.310 --> 00:13:27.580
is pass type-safe data from
one screen to the next.

00:13:27.580 --> 00:13:29.640
If you want to do
that, you can--

00:13:29.640 --> 00:13:31.530
on the receiving destination--

00:13:31.530 --> 00:13:34.860
click the plus button
in the arguments section

00:13:34.860 --> 00:13:37.230
of the Attributes
Panel, and that

00:13:37.230 --> 00:13:39.360
opens a dialog
where you can simply

00:13:39.360 --> 00:13:41.380
specify the name
of the argument,

00:13:41.380 --> 00:13:43.020
and the type of the argument.

00:13:43.020 --> 00:13:45.310
That can be a type
that is predefined,

00:13:45.310 --> 00:13:48.150
or that can be a type that
you defined in your project,

00:13:48.150 --> 00:13:49.490
for whatever object you want.

00:13:52.110 --> 00:13:55.830
Of course, building
the navigation graph

00:13:55.830 --> 00:14:00.220
is not enough to fully specify
the navigation of your app.

00:14:00.220 --> 00:14:02.680
You also need to write
a little bit of code.

00:14:02.680 --> 00:14:05.090
But it's pretty
simple, as you can see.

00:14:05.090 --> 00:14:09.330
Here, I'm just on the
item of the RecyclerView.

00:14:09.330 --> 00:14:12.150
For the OnClickListener,
I want to transition

00:14:12.150 --> 00:14:13.990
and go through that action.

00:14:13.990 --> 00:14:19.940
So what I do is I create
the action object,

00:14:19.940 --> 00:14:23.420
passing it the argument that
I specified in the Navigation

00:14:23.420 --> 00:14:24.860
Editor.

00:14:24.860 --> 00:14:26.810
And once I have the
action, I can simply

00:14:26.810 --> 00:14:30.530
call the navigate method
of the navigation library

00:14:30.530 --> 00:14:32.630
to actually perform
that transition.

00:14:32.630 --> 00:14:37.980
That's all you need to actually
do the transition you defined.

00:14:37.980 --> 00:14:41.700
One final thing you can do
in the Navigation Editor

00:14:41.700 --> 00:14:45.600
is use placeholder to fill the
rest of your navigation flow,

00:14:45.600 --> 00:14:49.590
if you don't want to bother
at that moment creating

00:14:49.590 --> 00:14:51.000
new fragments.

00:14:51.000 --> 00:14:53.250
Later on, when you're
ready to do so,

00:14:53.250 --> 00:14:58.920
you can simply go back and
replace them with layouts.

00:14:58.920 --> 00:15:01.050
I think now it's time
to actually build

00:15:01.050 --> 00:15:03.300
our second layout.

00:15:03.300 --> 00:15:05.910
As you can see, it's a layout
that involves a lot of images,

00:15:05.910 --> 00:15:08.052
and a lot of resources.

00:15:08.052 --> 00:15:09.510
We're going to see
how the resource

00:15:09.510 --> 00:15:12.260
manager can help us build it.

00:15:16.080 --> 00:15:18.540
VADIM CAEN: I was talking
before about filling gaps.

00:15:18.540 --> 00:15:20.820
One gap that was existing
in Android Studio

00:15:20.820 --> 00:15:22.960
was how to manage
your resources.

00:15:22.960 --> 00:15:24.850
So let's go to see
what the issue was.

00:15:24.850 --> 00:15:28.110
The Android Studio resource
directory structure

00:15:28.110 --> 00:15:29.940
is made for the
framework, not really

00:15:29.940 --> 00:15:33.390
for the user, because
when you get resources

00:15:33.390 --> 00:15:35.550
from your designer, it
might look like this.

00:15:35.550 --> 00:15:37.890
You might have a
bunch of folders--

00:15:37.890 --> 00:15:42.600
I'm sorry, the other issue
first is that in Android Studio,

00:15:42.600 --> 00:15:44.480
you don't have any
thumbnail view of all

00:15:44.480 --> 00:15:46.380
the specific Android view.

00:15:46.380 --> 00:15:49.680
So layout, vector
rubble, or shapes--

00:15:49.680 --> 00:15:51.690
the only way you can
preview those are

00:15:51.690 --> 00:15:54.960
is to double click on one
layout, or on one file,

00:15:54.960 --> 00:15:58.385
and see it in the preview.

00:15:58.385 --> 00:16:00.760
To solve this problem, we've
introduced in Android Studio

00:16:00.760 --> 00:16:04.420
3.4 the Resource Manager,
which is a new tool that

00:16:04.420 --> 00:16:08.250
helps you import, use,
and explore your resources

00:16:08.250 --> 00:16:09.250
in a more graphical way.

00:16:12.540 --> 00:16:15.480
To open it, simply click the
button, Resource Manager, right

00:16:15.480 --> 00:16:19.200
below the project button, on
the left side of Android Studio,

00:16:19.200 --> 00:16:21.997
and it will open
this neutral window.

00:16:21.997 --> 00:16:22.580
One more time.

00:16:28.730 --> 00:16:30.040
So back to our problem.

00:16:30.040 --> 00:16:33.990
On the left side, we have
our project structure,

00:16:33.990 --> 00:16:39.220
and on the right side, we have
what the designer gave us.

00:16:39.220 --> 00:16:41.600
We can see the different
program on the file

00:16:41.600 --> 00:16:43.100
that the designer gave us.

00:16:43.100 --> 00:16:46.180
Maybe they used their
favorite design software,

00:16:46.180 --> 00:16:47.980
and used a default
export option,

00:16:47.980 --> 00:16:51.310
and it might be missing the
drawable prefix on the folder

00:16:51.310 --> 00:16:52.390
names.

00:16:52.390 --> 00:16:56.720
Or maybe they used the web
format, with the suffix, @2x.

00:16:56.720 --> 00:17:00.460
And what you would need to do
is to remove the @2x suffix,

00:17:00.460 --> 00:17:05.349
and then copy paste every
single file, one by one.

00:17:05.349 --> 00:17:07.503
The other issue is the
folder might be missing,

00:17:07.503 --> 00:17:09.670
and you would have to jump
back to the documentation

00:17:09.670 --> 00:17:14.260
to remember what the qualifier
for this specific folder was,

00:17:14.260 --> 00:17:17.579
and you have to put
them in the right order.

00:17:17.579 --> 00:17:19.920
How does it work with
the Resource Manager?

00:17:19.920 --> 00:17:22.740
Now you can simply drag
and drop the whole bunch

00:17:22.740 --> 00:17:25.859
of files that you got
onto the Resource Manager,

00:17:25.859 --> 00:17:30.220
and that will be automatically
imported and grouped by name.

00:17:30.220 --> 00:17:33.150
So as you can see here, our
resources are grouped by name,

00:17:33.150 --> 00:17:35.250
and the right qualifier
has been applied.

00:17:35.250 --> 00:17:37.604
So what just happened here?

00:17:37.604 --> 00:17:38.719
[APPLAUSE]

00:17:38.719 --> 00:17:39.516
Thank you.

00:17:45.730 --> 00:17:49.010
If we identify a qualifier--

00:17:49.010 --> 00:17:53.830
it could be web or Android,
in your file path, like here--

00:17:53.830 --> 00:17:56.650
we would simply create the
corresponding Android folder,

00:17:56.650 --> 00:18:00.760
and strip out any suffix that
might be present in the file,

00:18:00.760 --> 00:18:02.890
and copy it onto your project.

00:18:05.480 --> 00:18:09.450
Of course, if you want to add
more qualifiers, for example,

00:18:09.450 --> 00:18:15.810
randomly a local, and a
random language like French,

00:18:15.810 --> 00:18:19.590
and the region France,
you can simply do it here.

00:18:19.590 --> 00:18:21.980
And you don't have to
remember the order,

00:18:21.980 --> 00:18:23.420
or create manually
the folder, it

00:18:23.420 --> 00:18:25.010
will be created
automatically for you

00:18:25.010 --> 00:18:27.380
with the right qualifier.

00:18:27.380 --> 00:18:31.250
You can also rename your file
if you want to, at this point.

00:18:34.200 --> 00:18:36.790
Now, our resources are grouped
in the Resource Manager,

00:18:36.790 --> 00:18:38.380
and you can see
them all in one go.

00:18:38.380 --> 00:18:42.400
So you will see only one version
of your resources by default.

00:18:42.400 --> 00:18:45.460
But when you double
click on the resource,

00:18:45.460 --> 00:18:47.250
you will see all the
different versions

00:18:47.250 --> 00:18:50.490
with the different
qualifier applied on it,

00:18:50.490 --> 00:18:53.760
and the file type if
you were to analyze

00:18:53.760 --> 00:18:57.215
what files were taking the
most space on your application.

00:19:00.130 --> 00:19:02.680
Now, this is a feature
I'm really excited about.

00:19:02.680 --> 00:19:04.840
You can now drag
and drop your SVG,

00:19:04.840 --> 00:19:07.650
and they will be all converted
at once into VectorDrawable.

00:19:07.650 --> 00:19:09.858
[CROWD CHEERING]

00:19:09.858 --> 00:19:10.822
Thank you.

00:19:14.690 --> 00:19:17.120
So here, I have my
file picker open.

00:19:17.120 --> 00:19:18.500
I don't need to select anything.

00:19:18.500 --> 00:19:21.250
I can simply click,
open, and all my SVG

00:19:21.250 --> 00:19:23.438
will be imported and converted.

00:19:26.510 --> 00:19:29.450
Another really cool feature is
previewing all your layouts.

00:19:29.450 --> 00:19:33.330
It might be hard just
recognizing a layout by name.

00:19:33.330 --> 00:19:36.390
So when you open the Resource
Manager on the Layout tab,

00:19:36.390 --> 00:19:38.522
you can see all the
layouts, and it's way easier

00:19:38.522 --> 00:19:39.980
to find the one
you're looking for.

00:19:44.810 --> 00:19:46.820
As I was saying before,
we have a tool chain.

00:19:46.820 --> 00:19:49.710
I want to integrate this
whole tool chain together.

00:19:49.710 --> 00:19:54.050
What we did is
integrated [INAUDIBLE]

00:19:54.050 --> 00:19:56.060
with the Layout Editor.

00:19:56.060 --> 00:19:59.420
For example, here I have a
layout that I want to include,

00:19:59.420 --> 00:20:02.580
so the top part.

00:20:02.580 --> 00:20:06.540
I can simply drag and drop this
layout onto the Layout Editor,

00:20:06.540 --> 00:20:10.280
and it will create
an [INAUDIBLE]..

00:20:10.280 --> 00:20:12.260
The same applies for Drawable.

00:20:12.260 --> 00:20:15.690
Drag and drop Drawable, and
the ImageView will be created.

00:20:15.690 --> 00:20:17.870
Let's fast forward to
the end of this view.

00:20:24.240 --> 00:20:26.550
We can see that on
the previous layout

00:20:26.550 --> 00:20:29.220
our toolbar is not
the right color.

00:20:29.220 --> 00:20:30.990
What we can do is
open the color tab,

00:20:30.990 --> 00:20:35.370
and see all the colors that
are defined on our project.

00:20:35.370 --> 00:20:37.215
You can simply double
click on one of them,

00:20:37.215 --> 00:20:39.340
and it will move open the
file, and move the cursor

00:20:39.340 --> 00:20:41.560
where the color is defined.

00:20:41.560 --> 00:20:43.860
Then you can use
a new color picker

00:20:43.860 --> 00:20:48.150
to visually choose a color.

00:20:48.150 --> 00:20:51.920
The color picker
works in RGB and HSB,

00:20:51.920 --> 00:20:54.975
if you were to were to work
with a designer that chooses HSB

00:20:54.975 --> 00:20:56.620
value, or you can
use the material

00:20:56.620 --> 00:20:59.680
palette that is already there.

00:20:59.680 --> 00:21:01.810
So now, our two
layouts are ready,

00:21:01.810 --> 00:21:03.690
and we want to run
them on the app.

00:21:03.690 --> 00:21:06.010
We're going to welcome back
Ashley and Joe to tell us

00:21:06.010 --> 00:21:09.061
about inspecting new layouts.

00:21:09.061 --> 00:21:13.354
[APPLAUSE]

00:21:16.220 --> 00:21:18.680
JOE BAKER-MALONE:
Thank you, Vadim.

00:21:18.680 --> 00:21:21.320
Now, we're onto the next
part of the development cycle

00:21:21.320 --> 00:21:23.240
where we actually
get to run the app,

00:21:23.240 --> 00:21:26.180
see how it works with real
data, and make any adjustments

00:21:26.180 --> 00:21:27.910
that we might need to.

00:21:27.910 --> 00:21:30.500
Now today, if you want to see
how your layouts are working

00:21:30.500 --> 00:21:33.290
at runtime, there's the
Layout Inspector tool

00:21:33.290 --> 00:21:34.730
in Android Studio.

00:21:34.730 --> 00:21:38.060
The Layout Inspector
gives you a snapshot

00:21:38.060 --> 00:21:40.850
of the complete view
hierarchy of one screen,

00:21:40.850 --> 00:21:42.770
and some information
about the attributes

00:21:42.770 --> 00:21:44.810
that are set on each view.

00:21:44.810 --> 00:21:47.120
But right now, it has a
number of limitations.

00:21:47.120 --> 00:21:50.060
This is due in part to what
data the Android framework

00:21:50.060 --> 00:21:53.200
makes available
to Studio to show.

00:21:53.200 --> 00:21:55.280
Now in Android Q,
the framework has

00:21:55.280 --> 00:21:57.560
added a number of
new APIs for Studio

00:21:57.560 --> 00:22:00.740
to use to expose more
view and layout debugging

00:22:00.740 --> 00:22:03.020
information in Studio.

00:22:03.020 --> 00:22:07.570
Ashley is going to talk
about those new APIs shortly.

00:22:07.570 --> 00:22:11.650
To verify that the framework
additions are sufficient for us

00:22:11.650 --> 00:22:15.010
to show the information that
we want to, to the users,

00:22:15.010 --> 00:22:17.500
a couple of us from
the Android Studio team

00:22:17.500 --> 00:22:20.020
have taken a little bit of time
out from our Project Marvel

00:22:20.020 --> 00:22:24.780
work to adopt the new APIs, and
see what we can do with them.

00:22:24.780 --> 00:22:28.190
We started work on a completely
new Layout Inspector.

00:22:28.190 --> 00:22:30.640
What I'm going to show you now
is a sneak peak of the work

00:22:30.640 --> 00:22:33.030
that we've done so far.

00:22:33.030 --> 00:22:34.490
Now, this is early work.

00:22:34.490 --> 00:22:36.830
It's not yet in the
latest preview builds.

00:22:36.830 --> 00:22:41.070
But as Chad said yesterday
in the Developer Keynote,

00:22:41.070 --> 00:22:42.320
we love previews.

00:22:42.320 --> 00:22:43.878
We love developer feedback.

00:22:43.878 --> 00:22:45.920
And so, we're going to
get it out into your hands

00:22:45.920 --> 00:22:48.150
as soon as possible.

00:22:48.150 --> 00:22:50.488
Now, let's see how it works.

00:22:50.488 --> 00:22:52.030
We'll start with
the Google Trips app

00:22:52.030 --> 00:22:53.650
that we've been working on.

00:22:53.650 --> 00:22:55.780
You can see now that it's
running in the emulator.

00:22:55.780 --> 00:22:57.238
We've hooked things
up so that it's

00:22:57.238 --> 00:22:59.290
running on real
data from a user,

00:22:59.290 --> 00:23:03.610
rather than the sample data that
we were using at design time.

00:23:03.610 --> 00:23:05.440
As we scroll down
here, you can see

00:23:05.440 --> 00:23:08.230
that some of the trip
descriptions in the real data

00:23:08.230 --> 00:23:11.950
are significantly longer than
what we had in the sample data,

00:23:11.950 --> 00:23:13.480
to a point where
the text is sort

00:23:13.480 --> 00:23:17.570
of dominating the images in a
way that we hadn't intended.

00:23:17.570 --> 00:23:20.094
Let's take a look at this
in the new Layout Inspector.

00:23:23.060 --> 00:23:25.280
You can see that the new
Layout Inspector gives us

00:23:25.280 --> 00:23:29.570
a view similar to what we have
in the Layout Inspector today.

00:23:29.570 --> 00:23:31.250
If we select the
text view in question

00:23:31.250 --> 00:23:36.043
here, and then look at the
Attributes Panel on the right,

00:23:36.043 --> 00:23:38.210
we can see that there are
a few differences compared

00:23:38.210 --> 00:23:40.970
to what we have in the
current Layout Inspector.

00:23:40.970 --> 00:23:44.420
First of all, we have the
actual attribute names here,

00:23:44.420 --> 00:23:47.570
whereas previously we had a
collection of getter methods

00:23:47.570 --> 00:23:49.700
that may or may not
have corresponded very

00:23:49.700 --> 00:23:52.370
well to the actual attributes.

00:23:52.370 --> 00:23:54.530
This should make it much
easier for you to map back

00:23:54.530 --> 00:23:56.840
from what you see here,
to what you have defined

00:23:56.840 --> 00:23:59.600
in your own layouts and styles.

00:23:59.600 --> 00:24:02.450
Secondly, we have nicely
formatted attribute values

00:24:02.450 --> 00:24:04.570
for a number of
different value types,

00:24:04.570 --> 00:24:06.840
and we couldn't always
get that before.

00:24:06.840 --> 00:24:09.590
So for example, you can
see we have an ID, an enum

00:24:09.590 --> 00:24:13.760
value, a color, et cetera.

00:24:13.760 --> 00:24:15.590
Thirdly, we have
some information now

00:24:15.590 --> 00:24:18.600
about where that attribute
value is being set.

00:24:18.600 --> 00:24:21.290
So you can see that we have
this declared attributes section

00:24:21.290 --> 00:24:24.950
here, similar to what we
have in the Layout Editor,

00:24:24.950 --> 00:24:26.990
for those attributes
that are set directly

00:24:26.990 --> 00:24:30.128
on the view that's selected.

00:24:30.128 --> 00:24:32.545
Now, let's look at the relevant
attribute here, text size.

00:24:35.900 --> 00:24:39.430
Once we have this selected, you
can use your preferred navigate

00:24:39.430 --> 00:24:43.040
to declaration keystroke
to go directly from here

00:24:43.040 --> 00:24:47.275
to the layout xml where
that value is being set.

00:24:47.275 --> 00:24:49.275
Let's change it to make
it a little bit smaller.

00:24:52.390 --> 00:24:53.980
As you heard in the
Developer Keynote,

00:24:53.980 --> 00:24:56.660
in Android Studio
3.5 preview they

00:24:56.660 --> 00:24:59.880
have this new apply
changes functionality.

00:24:59.880 --> 00:25:02.380
You can hear more about that
right after this, in the What's

00:25:02.380 --> 00:25:04.780
New in Android
Developer Tools talk.

00:25:04.780 --> 00:25:08.920
But right now, we'll use it to
see our change in the emulator

00:25:08.920 --> 00:25:10.660
without having to
redeploy our app.

00:25:14.880 --> 00:25:17.970
In fact, we'll see the update
right away in the new Layout

00:25:17.970 --> 00:25:19.980
Inspector as well.

00:25:19.980 --> 00:25:22.380
This is because Layout
Inspector is mirroring what

00:25:22.380 --> 00:25:25.380
happens on the device live.

00:25:25.380 --> 00:25:27.480
If we were to
scroll back up here,

00:25:27.480 --> 00:25:29.850
we'd see that the Layout
Inspector scrolls right along

00:25:29.850 --> 00:25:30.785
as well.

00:25:30.785 --> 00:25:31.740
[APPLAUSE]

00:25:31.740 --> 00:25:32.240
Yay.

00:25:38.070 --> 00:25:40.470
Let's take a look
at another scenario.

00:25:40.470 --> 00:25:44.330
Let's say we want to implement
a dark theme for our app.

00:25:44.330 --> 00:25:46.690
Here you see we have a
light background color.

00:25:46.690 --> 00:25:48.440
Let's find out where
that background color

00:25:48.440 --> 00:25:50.250
is coming from.

00:25:50.250 --> 00:25:52.370
If we look in the
fragment xml we have here,

00:25:52.370 --> 00:25:54.790
we don't see it
set there directly.

00:25:54.790 --> 00:25:56.540
Let's take a look in
the Layout Inspector.

00:25:59.480 --> 00:26:03.940
If we select the background
here, you can see--

00:26:03.940 --> 00:26:05.950
if you can see really well--

00:26:05.950 --> 00:26:07.630
that we don't have
the background color

00:26:07.630 --> 00:26:10.030
set directly on this view.

00:26:10.030 --> 00:26:12.350
Now, why might that be?

00:26:12.350 --> 00:26:16.000
Well, we've only selected
the top most view here,

00:26:16.000 --> 00:26:18.790
and the background color might
be set somewhere lower down

00:26:18.790 --> 00:26:20.830
in the view hierarchy.

00:26:20.830 --> 00:26:23.380
But which view is
it being set on?

00:26:23.380 --> 00:26:25.570
Well, the new Layout
Inspector gives us

00:26:25.570 --> 00:26:28.213
an easy way to find out.

00:26:28.213 --> 00:26:30.618
[CROWD REACTION]

00:26:30.618 --> 00:26:39.930
[LAUGHS] So in the 3D view,
it's easy to see which

00:26:39.930 --> 00:26:42.420
view is drawing what here.

00:26:42.420 --> 00:26:48.280
Now, if we select that view,
you can see that the background

00:26:48.280 --> 00:26:50.500
color is indeed being set.

00:26:50.500 --> 00:26:53.440
But in what file
is it being set?

00:26:53.440 --> 00:26:56.200
It's not at the top in the
declared attributes section,

00:26:56.200 --> 00:26:59.650
so we know it isn't being
set on this view directly.

00:26:59.650 --> 00:27:02.320
But again, if we select the
property in the Attributes

00:27:02.320 --> 00:27:05.530
Panel, we can navigate
directly from there

00:27:05.530 --> 00:27:07.570
to where it's being set.

00:27:07.570 --> 00:27:10.120
In this case, it's
being set in a style.

00:27:10.120 --> 00:27:12.830
And we can navigate
directly to that style,

00:27:12.830 --> 00:27:15.940
even if it isn't referenced
explicitly by your view.

00:27:18.760 --> 00:27:20.860
The 3D representation
we saw allows

00:27:20.860 --> 00:27:23.630
us to visualize things
in other ways as well,

00:27:23.630 --> 00:27:27.010
and we're still exploring
what might be useful here.

00:27:27.010 --> 00:27:29.530
For example, it might
be useful to just focus

00:27:29.530 --> 00:27:32.110
on one view, and its children.

00:27:32.110 --> 00:27:36.070
Or it might be useful to group
views together based on what

00:27:36.070 --> 00:27:38.350
layout file they're defined in.

00:27:38.350 --> 00:27:42.130
So example for this screen,
you can see that at the top,

00:27:42.130 --> 00:27:46.670
we have the RecyclerView items,
and then the fragment, and then

00:27:46.670 --> 00:27:47.910
the activity.

00:27:47.910 --> 00:27:49.560
And behind that,
the various views

00:27:49.560 --> 00:27:52.160
that are defined
by the framework.

00:27:52.160 --> 00:27:54.800
We have a lot more planned for
the light new Layout Inspector,

00:27:54.800 --> 00:27:59.085
and I'm excited to see
what we can come up with.

00:27:59.085 --> 00:28:01.460
Now, to talk about the framework
changes that were needed

00:28:01.460 --> 00:28:04.050
to enable this, here's Ashley.

00:28:04.050 --> 00:28:05.092
ASHLEY ROSE: Thanks, Joe.

00:28:05.092 --> 00:28:08.876
[APPLAUSE]

00:28:12.015 --> 00:28:14.340
For Android Q, we've
added three new APIs

00:28:14.340 --> 00:28:16.620
to enable these new
inspection features.

00:28:16.620 --> 00:28:20.100
We have the ability to take
all the drawing commands that

00:28:20.100 --> 00:28:22.350
went into building a
frame on the screen

00:28:22.350 --> 00:28:24.690
and serialize them and send
them back over to Studio

00:28:24.690 --> 00:28:29.040
so it can replay them, and
build that lovely 3D view.

00:28:29.040 --> 00:28:30.960
We significantly
sped up how long

00:28:30.960 --> 00:28:34.620
it takes to get the properties
of views in the view hierarchy,

00:28:34.620 --> 00:28:36.870
as well as adding
additional metadata to that

00:28:36.870 --> 00:28:38.370
and making it more correct.

00:28:38.370 --> 00:28:40.770
And we added some new APIs to
the resource framework that

00:28:40.770 --> 00:28:43.560
let us see where an
attribute value came from,

00:28:43.560 --> 00:28:46.110
as well as some more
insight into the decision

00:28:46.110 --> 00:28:48.720
process of which themes
were applied when

00:28:48.720 --> 00:28:50.088
reaching that attribute value.

00:28:50.088 --> 00:28:51.630
So let's talk about
the Skia Picture.

00:28:51.630 --> 00:28:56.550
Skia is our 2D graphics library
that underlies the UI toolkit.

00:28:56.550 --> 00:28:59.290
This is a simplified view to
actually fit it on the slide,

00:28:59.290 --> 00:29:00.750
but it's a list of
drawing commands

00:29:00.750 --> 00:29:04.650
that go into building one of
our trip cards from earlier.

00:29:04.650 --> 00:29:07.920
If we look at it, it's composed
of shadows, rounded rectangles,

00:29:07.920 --> 00:29:09.390
images, text--

00:29:09.390 --> 00:29:12.990
all of that, along
with the assets

00:29:12.990 --> 00:29:17.190
needed to render it, the image
data, the font data, et cetera.

00:29:17.190 --> 00:29:18.720
We get this from Skia natively.

00:29:18.720 --> 00:29:19.560
It's very quick.

00:29:19.560 --> 00:29:22.830
It allows us to do our
live preview because we can

00:29:22.830 --> 00:29:26.190
get this a few times a second.

00:29:26.190 --> 00:29:30.270
It's generally very small.

00:29:30.270 --> 00:29:32.910
But the problem
with this is, if we

00:29:32.910 --> 00:29:35.160
want to zoom in on
the switch here,

00:29:35.160 --> 00:29:37.590
it's composed of a text,
a rounded rectangle,

00:29:37.590 --> 00:29:42.080
and a little image for
the circle slider switch.

00:29:42.080 --> 00:29:43.830
We don't know which
views those came from.

00:29:43.830 --> 00:29:45.450
They're just drawing commands.

00:29:45.450 --> 00:29:47.610
We wanted some way to
group drawing commands

00:29:47.610 --> 00:29:49.583
by what view they came from.

00:29:49.583 --> 00:29:51.000
We looked at the
render note API--

00:29:51.000 --> 00:29:55.170
which is an organization tree
that underlies both views

00:29:55.170 --> 00:29:59.510
and drawables-- and we added a
unique ID to each render note.

00:29:59.510 --> 00:30:02.130
We then exposed this
unique ID on the views,

00:30:02.130 --> 00:30:05.910
and annotated the
Skia Picture itself

00:30:05.910 --> 00:30:09.270
with where each render node
started and stopped drawing.

00:30:09.270 --> 00:30:14.010
This lets us on the
studio side walk through

00:30:14.010 --> 00:30:17.430
and see where a view started and
where it stopped, and associate

00:30:17.430 --> 00:30:20.730
these three drawing commands
back to the switch view.

00:30:20.730 --> 00:30:22.920
Additionally, since we
have start and stop,

00:30:22.920 --> 00:30:25.350
we have a nice nested
framework-- kind of like,

00:30:25.350 --> 00:30:26.400
HTML--

00:30:26.400 --> 00:30:29.010
that lets us see, here's all
the drawing commands again,

00:30:29.010 --> 00:30:31.440
simplified, that went into
building this card view,

00:30:31.440 --> 00:30:34.640
as [? long as well ?] which
views they start and stop from,

00:30:34.640 --> 00:30:37.260
which let's us do nesting.

00:30:37.260 --> 00:30:41.090
Let's talk a little bit about
how we fix property inspection.

00:30:41.090 --> 00:30:42.563
To Joe's point earlier--

00:30:42.563 --> 00:30:44.730
where everything was getter
names, or method names--

00:30:44.730 --> 00:30:46.620
that was because we
were using reflection

00:30:46.620 --> 00:30:51.120
at runtime on the attributes
inside the view instance.

00:30:51.120 --> 00:30:53.380
Reflection isn't the
fastest thing in the world,

00:30:53.380 --> 00:30:55.320
especially on a mobile device.

00:30:55.320 --> 00:30:57.210
And for a very
complicated app, that

00:30:57.210 --> 00:30:59.790
could take up to several
seconds to render an entire view

00:30:59.790 --> 00:31:01.030
hierarchy.

00:31:01.030 --> 00:31:04.560
So we looked into
an approach of-- we

00:31:04.560 --> 00:31:06.555
have a method that
serializes everything.

00:31:06.555 --> 00:31:07.680
That gets a little brittle.

00:31:07.680 --> 00:31:11.460
If you add a new attribute to
your view, it's not updated.

00:31:11.460 --> 00:31:14.160
We added in a
annotation processor,

00:31:14.160 --> 00:31:18.900
which allows us to retain the
flexibility that the reflection

00:31:18.900 --> 00:31:19.560
provided us.

00:31:19.560 --> 00:31:22.050
All you have to do
is add an annotation

00:31:22.050 --> 00:31:23.492
if you add a new getter.

00:31:23.492 --> 00:31:25.950
Let's take a look at what that
might look like for a custom

00:31:25.950 --> 00:31:28.230
view because this will be
relevant for anyone who's

00:31:28.230 --> 00:31:30.630
building library views soon.

00:31:30.630 --> 00:31:32.040
We have a color view.

00:31:32.040 --> 00:31:35.370
It's property is a
color, and we annotate it

00:31:35.370 --> 00:31:37.290
with InspectableProperty.

00:31:37.290 --> 00:31:39.630
This gets us-- when the
annotation processor looks

00:31:39.630 --> 00:31:42.270
at it-- this gets us a
little bit more context

00:31:42.270 --> 00:31:45.040
than we had before of just
looking at the getter.

00:31:45.040 --> 00:31:49.110
So we're in Kotlin, and we can
see the @ColorInt annotation,

00:31:49.110 --> 00:31:52.020
as well as the
integer type, which

00:31:52.020 --> 00:31:54.570
we know that we've packed
a color into this integer

00:31:54.570 --> 00:31:58.130
and it's not just
a numerical value.

00:31:58.130 --> 00:32:01.620
We've got the name of
the property, which

00:32:01.620 --> 00:32:04.660
we can use to make inferences
about its attribute ID, what

00:32:04.660 --> 00:32:05.160
to call it.

00:32:05.160 --> 00:32:06.720
And of course, we
can override any

00:32:06.720 --> 00:32:09.870
of the inferences using
properties on the annotation

00:32:09.870 --> 00:32:11.020
itself.

00:32:11.020 --> 00:32:14.700
So what the code generation
for this looks like,

00:32:14.700 --> 00:32:16.740
is it builds a
companion object that

00:32:16.740 --> 00:32:18.720
will sit alongside this view.

00:32:18.720 --> 00:32:22.530
Let's take a look at what
one of those might look like.

00:32:22.530 --> 00:32:24.160
This is an inspection companion.

00:32:24.160 --> 00:32:27.760
It's a new API for Q.
It has two purposes.

00:32:27.760 --> 00:32:31.330
One, defines a list
of-- given a class--

00:32:31.330 --> 00:32:33.300
here are the properties
defined on that class.

00:32:33.300 --> 00:32:35.250
In this case, we've
defined color.

00:32:35.250 --> 00:32:38.570
If you look into the
call to map color,

00:32:38.570 --> 00:32:41.580
we have the type there,
since it's a color.

00:32:41.580 --> 00:32:43.890
We have the property name
color, and we've inferred

00:32:43.890 --> 00:32:46.650
the attribute of ID off R.attr.

00:32:46.650 --> 00:32:48.240
This will also enable us to--

00:32:48.240 --> 00:32:50.230
if you didn't have an
inferred attribute ID,

00:32:50.230 --> 00:32:52.590
or you supplied one-- we
would put it in there.

00:32:52.590 --> 00:32:56.130
This teaches the Studio,
if I have a view,

00:32:56.130 --> 00:32:58.830
here's what properties
I have on it,

00:32:58.830 --> 00:33:00.810
here's what their
attribute IDs are,

00:33:00.810 --> 00:33:03.060
and this allows us to
enable that part of that

00:33:03.060 --> 00:33:06.610
jump to code
completion function.

00:33:06.610 --> 00:33:08.010
The next step is
when we actually

00:33:08.010 --> 00:33:11.505
have an instance of the view,
we want to read the property.

00:33:11.505 --> 00:33:14.130
Again, since our view is defined
in Kotlin, and we're in Java--

00:33:14.130 --> 00:33:16.890
because this is generated code--

00:33:16.890 --> 00:33:19.260
we call view.getColor,
we have a direct call

00:33:19.260 --> 00:33:21.460
to the getter, no
reflection required.

00:33:21.460 --> 00:33:23.550
It's very fast.

00:33:23.550 --> 00:33:28.170
This enables us to do the live
updating of the view hierarchy

00:33:28.170 --> 00:33:30.390
in Studio, because
we do not have

00:33:30.390 --> 00:33:34.170
all the additional
overhead we did previously.

00:33:34.170 --> 00:33:37.860
Where all that gets us
is to a current value.

00:33:37.860 --> 00:33:42.150
We can say, here's this lovely
blue text color we have here.

00:33:42.150 --> 00:33:43.910
We can say what it
is, regardless of

00:33:43.910 --> 00:33:46.320
whether it was set in runtime.

00:33:46.320 --> 00:33:49.470
Maybe you called view.setColor.

00:33:49.470 --> 00:33:51.300
Or if it was set in resources.

00:33:51.300 --> 00:33:54.090
But most attribute values
are set in resources,

00:33:54.090 --> 00:33:56.997
so we wanted to
help with that case.

00:33:56.997 --> 00:33:59.080
We wanted to help with a
case where, in this case,

00:33:59.080 --> 00:34:00.780
it's defined in your widget.

00:34:00.780 --> 00:34:03.810
We added an API to
resources that lets you say,

00:34:03.810 --> 00:34:05.640
I've gotten this value.

00:34:05.640 --> 00:34:07.540
Tell me where it came from.

00:34:07.540 --> 00:34:10.260
We track that data, and we store
it through the entire resources

00:34:10.260 --> 00:34:11.940
framework.

00:34:11.940 --> 00:34:13.830
Additionally, we wanted
to get some insight

00:34:13.830 --> 00:34:16.469
into how styles affected this.

00:34:16.469 --> 00:34:19.560
So the resources framework--
when it's resolving

00:34:19.560 --> 00:34:21.060
an attribute value--

00:34:21.060 --> 00:34:24.750
has to make a decision
about which style to apply.

00:34:24.750 --> 00:34:28.739
We took the decision tree and
we add an API to expose that.

00:34:28.739 --> 00:34:32.679
So it's essentially the list
of styles that were considered,

00:34:32.679 --> 00:34:34.920
but eventually maybe
used or not used

00:34:34.920 --> 00:34:38.290
while resolving that
attribute value.

00:34:38.290 --> 00:34:42.913
The problem with all this is
it's ephemeral, because views,

00:34:42.913 --> 00:34:45.330
once they've been inflated,
they forget their relationship

00:34:45.330 --> 00:34:46.692
to resources.

00:34:46.692 --> 00:34:48.150
Once they've been
constructed, they

00:34:48.150 --> 00:34:50.442
don't remember where they
came from, for the most part.

00:34:52.889 --> 00:34:54.900
We added a developer
option that allows

00:34:54.900 --> 00:34:59.910
views to store both the
map of attribute IDs,

00:34:59.910 --> 00:35:02.040
and locations where
they came from,

00:35:02.040 --> 00:35:08.910
and the style resolution stacks
from the themes on the view.

00:35:08.910 --> 00:35:11.042
So Studio-- when it's
ready, or you're interested

00:35:11.042 --> 00:35:13.500
and you want to drill down more
into a property-- come back

00:35:13.500 --> 00:35:15.570
to a view and ask
the view, hey, where

00:35:15.570 --> 00:35:17.070
did your attribute
values come from,

00:35:17.070 --> 00:35:19.800
and what are their styles?

00:35:19.800 --> 00:35:22.340
That pretty much wraps up
everything we have for Q,

00:35:22.340 --> 00:35:24.255
and I'd like to welcome
Vadim and Jerome back

00:35:24.255 --> 00:35:25.380
on the stage to wrap us up.

00:35:25.380 --> 00:35:28.852
[APPLAUSE]

00:35:32.643 --> 00:35:34.810
VADIM CAEN: You've heard
about the whole tool chain,

00:35:34.810 --> 00:35:38.152
and I hope you're going to be
using it when you go back home.

00:35:38.152 --> 00:35:40.360
There is building your layout
with the Layout Editor,

00:35:40.360 --> 00:35:42.100
and the new feature we've added.

00:35:42.100 --> 00:35:44.530
Building your navigation
with the Navigation Editor,

00:35:44.530 --> 00:35:46.600
managing resources with
a resource manager,

00:35:46.600 --> 00:35:50.470
and doing your inspection
with a new Layout Inspector.

00:35:50.470 --> 00:35:54.220
This year, I/O is packed
with Android Studio talks.

00:35:54.220 --> 00:35:56.320
Right after-- in
the Amphitheater--

00:35:56.320 --> 00:35:58.690
you can watch the What's
New in Android Development

00:35:58.690 --> 00:36:01.420
Tools, presented by Tor
and [? Ja. ?] Then you have

00:36:01.420 --> 00:36:04.120
What's New in the Android
Build System on Stage 2,

00:36:04.120 --> 00:36:07.090
which is on the other side,
which starts this afternoon.

00:36:07.090 --> 00:36:10.820
I have little red dots here.

00:36:10.820 --> 00:36:13.060
Android Studio Tips
and Tricks, presented

00:36:13.060 --> 00:36:16.390
by a curated selection of
engineers and project managers,

00:36:16.390 --> 00:36:17.440
Stage 2.

00:36:17.440 --> 00:36:19.690
And finally tomorrow, What's
New in ConstraintLayout

00:36:19.690 --> 00:36:23.890
and Motion Layout
by Nicolas and John.

00:36:23.890 --> 00:36:26.170
We're going to be taking
questions right outside here.

00:36:26.170 --> 00:36:27.890
Thank you very much for
coming, and I'll probably

00:36:27.890 --> 00:36:28.660
see you next year.

00:36:28.660 --> 00:36:32.610
[MUSIC PLAYING]

