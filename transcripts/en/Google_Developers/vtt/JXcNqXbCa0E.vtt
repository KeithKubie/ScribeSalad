WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.940
[APPLAUSE]

00:00:03.202 --> 00:00:04.410
ANDERS SANDHOLM: Thanks, Bob.

00:00:04.410 --> 00:00:05.630
Thanks, Kevin.

00:00:05.630 --> 00:00:08.111
KASPER LUND: Thank
you very much.

00:00:08.111 --> 00:00:09.110
DAN GROVE: Yeah, thanks.

00:00:09.110 --> 00:00:11.151
ANDERS SANDHOLM: It's
great to be here in Munich.

00:00:11.151 --> 00:00:14.070
Great to see all of you here.

00:00:14.070 --> 00:00:16.780
As was just said, I'm
here with Dan and Kasper,

00:00:16.780 --> 00:00:18.410
and we're really
excited to be here.

00:00:18.410 --> 00:00:21.519
I think I speak for all of us,
maybe after the third rewrite

00:00:21.519 --> 00:00:23.310
of the entire slide
deck yesterday evening,

00:00:23.310 --> 00:00:24.601
we're a little bit too excited.

00:00:24.601 --> 00:00:28.140
But hopefully things
will be just fine.

00:00:28.140 --> 00:00:32.240
As was just mentioned, this
is actually the second Dart

00:00:32.240 --> 00:00:33.050
Summit.

00:00:33.050 --> 00:00:36.540
So last year we were
in San Francisco.

00:00:36.540 --> 00:00:38.400
A little over 150 people there.

00:00:38.400 --> 00:00:40.190
Just maybe a show
of hands, anyone who

00:00:40.190 --> 00:00:42.110
was there with us last year.

00:00:42.110 --> 00:00:43.719
Yeah, a few familiar faces.

00:00:43.719 --> 00:00:45.260
Really, really cool
to see you again.

00:00:45.260 --> 00:00:48.840
And great to see so many
new people here as well.

00:00:48.840 --> 00:00:51.970
We're in Munich, we actually
have close to 300 people

00:00:51.970 --> 00:00:56.120
who registered for the event,
so great to see that momentum as

00:00:56.120 --> 00:00:56.930
well.

00:00:56.930 --> 00:01:00.950
And obviously where
we will be next year.

00:01:00.950 --> 00:01:04.645
Hopefully it'll be even more and
hope to see all of you again.

00:01:04.645 --> 00:01:06.020
KASPER LUND: On
a boat somewhere.

00:01:06.020 --> 00:01:08.450
ANDERS SANDHOLM: Yeah, who
knows where we'll end up.

00:01:08.450 --> 00:01:14.292
But actually, before moving
on to some of the great news

00:01:14.292 --> 00:01:15.750
that we're going
to share with you.

00:01:15.750 --> 00:01:17.980
I want to-- I have a confession.

00:01:17.980 --> 00:01:20.380
I want to be honest with you.

00:01:20.380 --> 00:01:25.300
If we take a step back and
look at where we were a little

00:01:25.300 --> 00:01:28.110
over a year ago when we met
for the summit last time.

00:01:28.110 --> 00:01:31.970
This was right after we
had announced the shift

00:01:31.970 --> 00:01:35.990
in strategy, where we moved
away from the focus of having

00:01:35.990 --> 00:01:39.150
the Dart view in Chrome to
having Dart for the entire web.

00:01:39.150 --> 00:01:41.290
So having the ability
to use all modern

00:01:41.290 --> 00:01:46.650
browsers not just for deployment
but also for development.

00:01:46.650 --> 00:01:50.260
And you could say in some
sense for some people,

00:01:50.260 --> 00:01:55.490
maybe it's been somewhat quiet
in terms of news from our side.

00:01:55.490 --> 00:01:59.960
Even at the time it
might feel like a setback

00:01:59.960 --> 00:02:03.510
in some sense for some
people, especially

00:02:03.510 --> 00:02:06.210
if you were looking at
some of the encouragement

00:02:06.210 --> 00:02:09.419
we were getting on
social media around this.

00:02:09.419 --> 00:02:11.710
[LAUGHTER]

00:02:11.710 --> 00:02:13.240
But to tell you
the actual story,

00:02:13.240 --> 00:02:17.650
is that while maybe on the news
side we've been somewhat quiet.

00:02:17.650 --> 00:02:19.850
Actually we've been
really, really busy.

00:02:19.850 --> 00:02:22.100
So what the shift in
strategy allowed us to do

00:02:22.100 --> 00:02:25.950
was to do a lot of work
with our key customers.

00:02:25.950 --> 00:02:28.180
Understanding their
use of Dart and help

00:02:28.180 --> 00:02:29.270
them expand their usage.

00:02:29.270 --> 00:02:32.220
We had over 10,000
commits just on the core

00:02:32.220 --> 00:02:36.500
SDK since that announcement.

00:02:36.500 --> 00:02:39.360
And so that's really
allowed us to understand

00:02:39.360 --> 00:02:41.920
better what the issues
were for our key customers.

00:02:41.920 --> 00:02:45.190
Help them solve
them and really have

00:02:45.190 --> 00:02:49.010
Dart be a much more
productive web stack for them.

00:02:49.010 --> 00:02:53.130
And that helps us end
up where we are today.

00:02:53.130 --> 00:02:57.190
Celebrating over the next
few days, a lot of this news

00:02:57.190 --> 00:03:02.710
and in particular Dart
is in all kinds of ways

00:03:02.710 --> 00:03:04.990
very much an open
source project.

00:03:04.990 --> 00:03:08.360
It is also, for Google,
very serious business.

00:03:08.360 --> 00:03:10.740
So just for one
of our customers,

00:03:10.740 --> 00:03:14.590
there's more than $70 billion
of revenue flowing through Dart

00:03:14.590 --> 00:03:16.290
software every year.

00:03:16.290 --> 00:03:20.790
That Dart is the tech stack
of choice for Google Ads.

00:03:20.790 --> 00:03:23.700
But we're not just seeing
serious use of this.

00:03:23.700 --> 00:03:27.830
This is also-- if the
revenue number isn't enough,

00:03:27.830 --> 00:03:30.450
these are not toy apps,
we're talking about millions

00:03:30.450 --> 00:03:31.370
of lines of code.

00:03:31.370 --> 00:03:33.060
And we're seeing a
tremendous amount

00:03:33.060 --> 00:03:36.960
of momentum inside of Google
just over the past year.

00:03:36.960 --> 00:03:40.750
We've seen the amount of
Dart code more than triple.

00:03:40.750 --> 00:03:43.460
And this actually makes Dart,
I'm very happy to say this,

00:03:43.460 --> 00:03:46.406
is the fastest growing
language inside Google.

00:03:46.406 --> 00:03:48.280
We're growing from a
smaller base admittedly,

00:03:48.280 --> 00:03:50.940
but still this is
really fantastic.

00:03:50.940 --> 00:03:52.690
You know, why are we
seeing this momentum?

00:03:52.690 --> 00:03:56.780
I think one of the key themes
that we see when talking teams,

00:03:56.780 --> 00:04:00.234
is that they get
better velocity.

00:04:00.234 --> 00:04:01.650
We've seen increased
productivity.

00:04:01.650 --> 00:04:06.170
Some teams have reported twice
the productivity of what they

00:04:06.170 --> 00:04:08.810
had with their previous stack.

00:04:08.810 --> 00:04:10.640
KASPER LUND: That's
really significant.

00:04:10.640 --> 00:04:13.050
2x productivity, that
really makes a difference

00:04:13.050 --> 00:04:15.163
for any kind of team size.

00:04:15.163 --> 00:04:16.079
DAN GROVE: Absolutely.

00:04:16.079 --> 00:04:17.245
ANDERS SANDHOLM: Definitely.

00:04:17.245 --> 00:04:18.700
And so what allowed
us to get here

00:04:18.700 --> 00:04:21.940
was really this
change in strategy.

00:04:21.940 --> 00:04:25.400
And working really closely
with our key customers

00:04:25.400 --> 00:04:29.480
in striving for Dart to
become the most productive web

00:04:29.480 --> 00:04:30.745
stack for them.

00:04:30.745 --> 00:04:33.120
And who would be better to
talk about this than you, Dan,

00:04:33.120 --> 00:04:35.482
you work quite closely
with a lot of these teams.

00:04:35.482 --> 00:04:36.190
DAN GROVE: I did.

00:04:36.190 --> 00:04:39.440
So, who here can
identify the products

00:04:39.440 --> 00:04:42.110
that these logos represent?

00:04:42.110 --> 00:04:43.290
Totally obvious, right.

00:04:43.290 --> 00:04:46.670
The upper one is
AdWords for Google.

00:04:46.670 --> 00:04:47.720
Kind of a big product.

00:04:47.720 --> 00:04:51.490
This is AdSense down here,
this yellow and is that purple.

00:04:51.490 --> 00:04:52.290
Not sure.

00:04:52.290 --> 00:04:52.690
KASPER LUND: Blueish.

00:04:52.690 --> 00:04:54.780
DAN GROVE: Greentea is our
customer relationship app.

00:04:54.780 --> 00:04:56.946
Google Fiber's logo actually
tells you what they do,

00:04:56.946 --> 00:04:59.170
so that one's kind of easy.

00:04:59.170 --> 00:05:00.910
All of these are all Dart.

00:05:00.910 --> 00:05:04.500
So it's really amazing to see
how much real stuff is being

00:05:04.500 --> 00:05:06.400
built on Dart at this point.

00:05:06.400 --> 00:05:09.256
Let's take a step
back in time though.

00:05:09.256 --> 00:05:10.880
Around the time at
the summit last year

00:05:10.880 --> 00:05:13.660
we saw this note from one
of our VPs of engineering.

00:05:13.660 --> 00:05:17.830
This is a guy who runs, he
has like 1,000-ish people,

00:05:17.830 --> 00:05:20.130
1,000 engineers working for him.

00:05:20.130 --> 00:05:21.459
And he was excited.

00:05:21.459 --> 00:05:23.250
And I was really happy
that he was excited,

00:05:23.250 --> 00:05:25.790
because if I had rolled
back time a little bit

00:05:25.790 --> 00:05:29.300
further, six months earlier,
I'd been on vacation.

00:05:29.300 --> 00:05:31.480
And I got back
from vacation and I

00:05:31.480 --> 00:05:33.740
noticed I had a calendar
appointment from him

00:05:33.740 --> 00:05:35.630
for the moment I
arrived in the office.

00:05:35.630 --> 00:05:37.456
It's like, that is not good.

00:05:37.456 --> 00:05:39.420
[LAUGHTER]

00:05:39.420 --> 00:05:41.060
You do not want to
have someone who's

00:05:41.060 --> 00:05:44.460
managing 1,000 people drop an
appointment on your calendar

00:05:44.460 --> 00:05:46.770
for the day you get back from
vacation, at 8:00 o'clock

00:05:46.770 --> 00:05:47.395
in the morning.

00:05:47.395 --> 00:05:48.600
Right?

00:05:48.600 --> 00:05:50.230
Never a good sign.

00:05:50.230 --> 00:05:53.391
We had a little discussion
of areas that were hurting.

00:05:53.391 --> 00:05:54.890
And there were some
things happening

00:05:54.890 --> 00:05:56.790
that were hurting productivity.

00:05:56.790 --> 00:05:59.770
And we spend a lot of time
listening to those people.

00:05:59.770 --> 00:06:01.610
And Scott got very happy.

00:06:01.610 --> 00:06:05.530
And the ads engineering
team got extremely happy.

00:06:05.530 --> 00:06:07.902
So what did we learn
while we were listening?

00:06:07.902 --> 00:06:09.860
We learned that we had
done a couple of things.

00:06:09.860 --> 00:06:11.950
We had a really nice language.

00:06:11.950 --> 00:06:15.110
So we had a language
that was kind

00:06:15.110 --> 00:06:17.530
of walking this tightrope
between being familiar,

00:06:17.530 --> 00:06:18.720
being modern.

00:06:18.720 --> 00:06:21.060
We have all kinds of
nice, cool features.

00:06:21.060 --> 00:06:25.580
Things like cascades,
async await.

00:06:25.580 --> 00:06:26.670
You have a terse language.

00:06:26.670 --> 00:06:28.370
This is something people
really like if they're

00:06:28.370 --> 00:06:29.500
coming from the Java world.

00:06:29.500 --> 00:06:31.750
What we hear from
Java developers

00:06:31.750 --> 00:06:33.640
is that they're
often writing a third

00:06:33.640 --> 00:06:36.580
to a half the number of lines
of code when they move to Dart.

00:06:36.580 --> 00:06:38.663
KASPER LUND: It's very
consistent feedback we get.

00:06:38.663 --> 00:06:40.480
I think the terseness
really works well.

00:06:40.480 --> 00:06:42.720
I think most people
here probably feel

00:06:42.720 --> 00:06:46.160
that when they write Dart
code, that having a terse,

00:06:46.160 --> 00:06:48.829
a flexible, nice to use
language is really key.

00:06:48.829 --> 00:06:50.870
DAN GROVE: Yeah, I mean
there's a balance, right.

00:06:50.870 --> 00:06:52.900
Like APL was terse
too, but I don't know

00:06:52.900 --> 00:06:55.640
that it was highly productive.

00:06:55.640 --> 00:06:57.660
I think we're actually
at a pretty good spot.

00:06:57.660 --> 00:06:58.840
And it's really scalable.

00:06:58.840 --> 00:07:01.650
The teams that I
talked to about it

00:07:01.650 --> 00:07:05.180
have dozens of core engineers
and often hundreds of people

00:07:05.180 --> 00:07:07.180
contributing to their
projects, and contributing

00:07:07.180 --> 00:07:08.096
from around the world.

00:07:08.096 --> 00:07:10.236
So you have to build a
system that really scales.

00:07:10.236 --> 00:07:12.610
And yet we want something that
is still flexible and fun.

00:07:12.610 --> 00:07:15.020
And I think most people are
enjoying doing programming

00:07:15.020 --> 00:07:18.330
in Dart, and that's
what you guys are here.

00:07:18.330 --> 00:07:20.920
We feel pretty confident
that we've actually

00:07:20.920 --> 00:07:22.540
reached a really nice balance.

00:07:22.540 --> 00:07:26.600
And I think we see a similar
balance in the core libraries.

00:07:26.600 --> 00:07:28.379
There are bunch of
different approaches

00:07:28.379 --> 00:07:29.670
you can take to core libraries.

00:07:29.670 --> 00:07:33.110
You can go the JavaScript
route and not really have any.

00:07:33.110 --> 00:07:35.970
You can go the Java route and
have very, very large core

00:07:35.970 --> 00:07:37.500
libraries.

00:07:37.500 --> 00:07:40.380
We tried to reach a middle
point and build something that

00:07:40.380 --> 00:07:42.730
was tight and comprehensive.

00:07:42.730 --> 00:07:47.109
And I think we wound up
in a pretty good spot.

00:07:47.109 --> 00:07:49.150
We also spent a lot of
time making them coherent,

00:07:49.150 --> 00:07:50.191
and that was really nice.

00:07:50.191 --> 00:07:51.770
So things like
streams are pervasive

00:07:51.770 --> 00:07:53.830
and really work well
across the libraries.

00:07:53.830 --> 00:07:54.340
ANDERS SANDHOLM:
You know, I think

00:07:54.340 --> 00:07:56.900
that especially with the
coherency, when we introduced

00:07:56.900 --> 00:07:59.970
async await last year, it
turned out that worked really

00:07:59.970 --> 00:08:02.615
well with the existing
streams in the core libraries,

00:08:02.615 --> 00:08:04.849
it's where coherency
really paid off.

00:08:04.849 --> 00:08:06.390
DAN GROVE: And
overall, the libraries

00:08:06.390 --> 00:08:08.910
are nice and efficient
so people are actually

00:08:08.910 --> 00:08:12.120
getting good performance
out of these things.

00:08:12.120 --> 00:08:14.750
But when we listen
further, what we learned

00:08:14.750 --> 00:08:17.730
was that this wasn't
actually enough.

00:08:17.730 --> 00:08:20.250
Yes, we had a nice language,
we had nice core libraries,

00:08:20.250 --> 00:08:24.040
but were they actually
useful for web developers.

00:08:24.040 --> 00:08:26.574
Maybe this is why Scott
set up a meeting with me.

00:08:26.574 --> 00:08:27.740
Something along these lines.

00:08:27.740 --> 00:08:29.490
KASPER LUND: This is
not Scott by the way.

00:08:29.490 --> 00:08:30.766
DAN GROVE: That's not Scott.

00:08:30.766 --> 00:08:33.140
So one of the questions that
we heard from our users was,

00:08:33.140 --> 00:08:36.020
how can I use JS libraries?

00:08:36.020 --> 00:08:38.984
Our first answer was, no.

00:08:38.984 --> 00:08:39.870
[LAUGHTER]

00:08:39.870 --> 00:08:42.390
And that wound up
not actually being

00:08:42.390 --> 00:08:44.690
the answer that a lot of
people wanted to hear.

00:08:44.690 --> 00:08:46.510
KASPER LUND: It
was short though.

00:08:46.510 --> 00:08:48.100
DAN GROVE: It was terse.

00:08:48.100 --> 00:08:49.740
[LAUGHTER]

00:08:49.740 --> 00:08:53.380
But not really flexible or fun.

00:08:53.380 --> 00:08:57.189
So we built a new,
improved JS interop.

00:08:57.189 --> 00:08:59.730
One thing that's really nice is
that by waiting a little bit,

00:08:59.730 --> 00:09:01.920
the JavaScript community
started learning about types,

00:09:01.920 --> 00:09:03.510
and they started building
these things called

00:09:03.510 --> 00:09:06.280
TypeScript definition files,
and putting those out on the web

00:09:06.280 --> 00:09:08.860
so that you actually had
types available for JavaScript

00:09:08.860 --> 00:09:10.050
libraries.

00:09:10.050 --> 00:09:11.900
So with our new
JS interop system,

00:09:11.900 --> 00:09:14.870
you can convert TypeScript
definition files to start .Dart

00:09:14.870 --> 00:09:15.855
files automatically.

00:09:15.855 --> 00:09:17.480
And this is fantastic,
because once you

00:09:17.480 --> 00:09:19.940
do that, you get all the
benefits of IntelliJ, the Dart

00:09:19.940 --> 00:09:22.279
Analyzer, you can just use
that thing as if it's Dart.

00:09:22.279 --> 00:09:23.820
And we're launching
this later today.

00:09:23.820 --> 00:09:26.585
So, Jacob Richmond will be
giving a talk on JS interop

00:09:26.585 --> 00:09:27.210
sometime today.

00:09:27.210 --> 00:09:28.675
I don't remember the schedule.

00:09:28.675 --> 00:09:30.270
You should come to that.

00:09:30.270 --> 00:09:32.500
And the rest of the talks.

00:09:32.500 --> 00:09:34.280
Another question that
we got a lot was,

00:09:34.280 --> 00:09:35.890
how do I develop
outside Dartium?

00:09:35.890 --> 00:09:38.010
And this could be
as simple as, I'm

00:09:38.010 --> 00:09:42.710
building an app for my
Android phone using Chrome.

00:09:42.710 --> 00:09:44.180
We don't have
Dartium on Android.

00:09:44.180 --> 00:09:47.342
Or I want to use
another browser, right?

00:09:47.342 --> 00:09:48.800
There are other
browsers out there.

00:09:48.800 --> 00:09:50.425
KASPER LUND: For a
long time our answer

00:09:50.425 --> 00:09:52.370
to that question was
like, use Dart to JS.

00:09:52.370 --> 00:09:54.430
But I worked on Dart
to JS for a while,

00:09:54.430 --> 00:09:57.460
and it's a really good tool,
but it's not super fast.

00:09:57.460 --> 00:10:00.204
So if you have that in
your development workflow,

00:10:00.204 --> 00:10:01.370
it's going to slow you down.

00:10:01.370 --> 00:10:03.120
So we needed something better.

00:10:03.120 --> 00:10:04.110
DAN GROVE: It especially
slows you down

00:10:04.110 --> 00:10:05.318
if you're building a big app.

00:10:05.318 --> 00:10:07.650
We have teams that Google
for whom Dart to JS

00:10:07.650 --> 00:10:10.020
takes several
minutes to compile,

00:10:10.020 --> 00:10:16.470
and that doesn't fit the fun
box that we checked off earlier.

00:10:16.470 --> 00:10:18.940
So we built this thing
called the Dart Dev Compiler,

00:10:18.940 --> 00:10:20.634
and this is really super.

00:10:20.634 --> 00:10:22.050
So one of the nice
things it does,

00:10:22.050 --> 00:10:23.420
is it does modular compilation.

00:10:23.420 --> 00:10:26.320
So how many of you
have used Dart to JS?

00:10:26.320 --> 00:10:27.820
Lots of people.

00:10:27.820 --> 00:10:32.550
Produces essentially one
giant JS file, or maybe a few

00:10:32.550 --> 00:10:34.270
if you're doing
deferred loading.

00:10:34.270 --> 00:10:36.490
What we do with the dev
compiler, is instead,

00:10:36.490 --> 00:10:37.990
we compile library by library.

00:10:37.990 --> 00:10:40.410
So the idea is that if
your application is made up

00:10:40.410 --> 00:10:42.950
of a hundred libraries,
you'll have 100 JS files

00:10:42.950 --> 00:10:45.200
and you'll only recompile
the ones that are necessary.

00:10:45.200 --> 00:10:47.320
This makes it much, much faster.

00:10:47.320 --> 00:10:50.260
Another thing that's
fantastic, Chrome

00:10:50.260 --> 00:10:52.620
started building extension
points in DevTools.

00:10:52.620 --> 00:10:54.584
So if you're used to
the Dartium devtools,

00:10:54.584 --> 00:10:56.750
we can actually provide you
with all those features,

00:10:56.750 --> 00:10:58.501
even with the Dart Dev
Compiler in Chrome.

00:10:58.501 --> 00:11:00.375
And the way this came
about was pretty funny.

00:11:00.375 --> 00:11:02.980
One of our team members had
worked on another compilation

00:11:02.980 --> 00:11:06.200
to JS project several years ago,
and worked with the Chrome team

00:11:06.200 --> 00:11:07.679
to get these
extension points in.

00:11:07.679 --> 00:11:09.470
He left that team and
then came to our team

00:11:09.470 --> 00:11:11.200
and then we realized
that we needed this.

00:11:11.200 --> 00:11:13.300
And at that point the
stuff landed in Chrome.

00:11:13.300 --> 00:11:14.550
And so we were able to use it.

00:11:14.550 --> 00:11:16.190
It's really a nice experience.

00:11:16.190 --> 00:11:18.420
So all those cool Dartium
things, like a ripple,

00:11:18.420 --> 00:11:21.070
you can do all of that
with the dev compiler.

00:11:21.070 --> 00:11:23.910
Browsers were also catching
up here with some nice ES 6

00:11:23.910 --> 00:11:27.230
support, and that lets us
put out much nicer JavaScript

00:11:27.230 --> 00:11:28.950
in the dev compiler.

00:11:28.950 --> 00:11:31.550
And all this adds
up to give you fast,

00:11:31.550 --> 00:11:34.380
nice cross browser support
which we're working on today.

00:11:34.380 --> 00:11:36.121
So right now you can
use Chrome for this,

00:11:36.121 --> 00:11:37.370
you don't need to use Dartium.

00:11:37.370 --> 00:11:40.330
So you don't need to wait for
us to get Dartium up to date,

00:11:40.330 --> 00:11:42.330
which is often challenging.

00:11:42.330 --> 00:11:44.500
You just use the regular
Chrome on your desktop.

00:11:44.500 --> 00:11:46.160
We're also working
on Safari right now,

00:11:46.160 --> 00:11:48.490
and we will be working
on Firefox and Edge

00:11:48.490 --> 00:11:49.790
in the near future.

00:11:49.790 --> 00:11:51.540
And the amazing
thing about this,

00:11:51.540 --> 00:11:55.180
is that with the dev compiler,
you can get fast edit refresh

00:11:55.180 --> 00:11:56.000
at real scale.

00:11:56.000 --> 00:11:58.344
So we're talking
100,000 lines of code,

00:11:58.344 --> 00:12:00.760
typical refresh is going to
be under a second with the dev

00:12:00.760 --> 00:12:01.680
compiler.

00:12:01.680 --> 00:12:05.190
So, no more need for
Dartium with dev compiler,

00:12:05.190 --> 00:12:07.550
and you can get a really
beautiful, fast edit

00:12:07.550 --> 00:12:08.540
refresh cycle.

00:12:08.540 --> 00:12:10.032
KASPER LUND: Very slick.

00:12:10.032 --> 00:12:11.490
DAN GROVE: There's
other stuff that

00:12:11.490 --> 00:12:14.560
needed to happen to improve
the dev cycle, though.

00:12:14.560 --> 00:12:18.600
Transformers were an area
that was kind of painful.

00:12:18.600 --> 00:12:22.960
Anyone who's used these will
probably recognize this.

00:12:22.960 --> 00:12:25.730
Things like not putting
the artifacts that

00:12:25.730 --> 00:12:27.490
were created on disk,
made it kind of hard

00:12:27.490 --> 00:12:29.047
to see what was happening.

00:12:29.047 --> 00:12:31.130
We're replacing this with
a code generation system

00:12:31.130 --> 00:12:33.088
that actually will put
artifacts on disk so you

00:12:33.088 --> 00:12:35.550
can go read them, play
with them, mess with them,

00:12:35.550 --> 00:12:37.620
see what you did wrong.

00:12:37.620 --> 00:12:39.330
Faster static
analysis was something

00:12:39.330 --> 00:12:41.880
where we did a bunch of
changes to the Dart analyzer.

00:12:41.880 --> 00:12:44.400
Part of this was in support
of the Dart dev compiler.

00:12:44.400 --> 00:12:47.670
And the end result here, is
that the analyzer can basically

00:12:47.670 --> 00:12:50.130
operate on summaries,
which are essentially

00:12:50.130 --> 00:12:52.400
module by module summarization's
of your application.

00:12:52.400 --> 00:12:54.649
So rather than having to
look at the whole application

00:12:54.649 --> 00:12:56.640
monolithically, the
analyzer can only

00:12:56.640 --> 00:12:59.310
look at things
that have changed.

00:12:59.310 --> 00:13:01.510
One of my favorite
things, and many people

00:13:01.510 --> 00:13:06.090
think is a tiny thing, but
getting formatting right.

00:13:06.090 --> 00:13:07.810
[APPLAUSE]

00:13:08.470 --> 00:13:10.240
KASPER LUND: That
was very popular.

00:13:10.240 --> 00:13:11.380
DAN GROVE: It's really
irritating, right,

00:13:11.380 --> 00:13:13.838
to send out a code review and
have people tell you that you

00:13:13.838 --> 00:13:14.980
formatted things wrong.

00:13:14.980 --> 00:13:16.016
What do they know?

00:13:18.610 --> 00:13:20.612
KASPER LUND: My
formatting is the best.

00:13:20.612 --> 00:13:21.320
DAN GROVE: Right.

00:13:21.320 --> 00:13:22.770
So we decide to
solve this and we

00:13:22.770 --> 00:13:26.010
let Bob define how things
would get formatted.

00:13:26.010 --> 00:13:27.840
And actually this is
working out great,

00:13:27.840 --> 00:13:31.470
because it eliminates a huge
set of issues in code reviews.

00:13:31.470 --> 00:13:33.295
And the thing is
that people love

00:13:33.295 --> 00:13:35.170
picking on formatting
in code reviews, right.

00:13:35.170 --> 00:13:36.280
Because it's really easy.

00:13:36.280 --> 00:13:37.450
You just get to
go needle someone,

00:13:37.450 --> 00:13:39.250
you don't have to
actually think about it.

00:13:39.250 --> 00:13:40.762
Just move this around.

00:13:40.762 --> 00:13:41.970
We get rid of this.

00:13:41.970 --> 00:13:43.870
It's fantastic.

00:13:43.870 --> 00:13:46.470
And finally we've done a
lot of work with Jet Brains

00:13:46.470 --> 00:13:48.090
to make IntelliJ much better.

00:13:48.090 --> 00:13:49.800
And one thing that
is fantastic is

00:13:49.800 --> 00:13:52.240
that this gives us a
great story for both

00:13:52.240 --> 00:13:54.000
our web and our mobile story.

00:13:54.000 --> 00:13:57.650
So IntelliJ is becoming a really
key piece of our development

00:13:57.650 --> 00:13:59.790
cycle.

00:13:59.790 --> 00:14:01.730
There were other
questions though.

00:14:01.730 --> 00:14:03.720
When we started talking
about building things

00:14:03.720 --> 00:14:04.890
like AdWords in Dart.

00:14:04.890 --> 00:14:07.840
We got lots of questions
from teams about scalability.

00:14:10.630 --> 00:14:12.920
We had never built
something this large before.

00:14:12.920 --> 00:14:14.378
KASPER LUND: It
was somewhat bigger

00:14:14.378 --> 00:14:15.940
than what we started with.

00:14:15.940 --> 00:14:18.170
And so these are really,
really significant apps

00:14:18.170 --> 00:14:19.890
and they grow
really quickly, too.

00:14:19.890 --> 00:14:20.370
DAN GROVE: Exactly.

00:14:20.370 --> 00:14:21.786
So one of the
things that we found

00:14:21.786 --> 00:14:24.280
was that we really needed a
solid and trustworthy type

00:14:24.280 --> 00:14:27.040
system to enable scalability.

00:14:27.040 --> 00:14:31.370
And we also needed a fast
and modular build system.

00:14:31.370 --> 00:14:35.740
And so we have been working on
both of these over the past two

00:14:35.740 --> 00:14:37.140
years or so.

00:14:37.140 --> 00:14:39.760
So one of the things we
found was that stronger types

00:14:39.760 --> 00:14:40.710
scale better.

00:14:40.710 --> 00:14:42.670
So it's no secret,
that within Google, we

00:14:42.670 --> 00:14:46.290
develop all of our source
code, that's for internal use,

00:14:46.290 --> 00:14:49.245
inside one gigantic tree.

00:14:49.245 --> 00:14:51.620
And if you want to be able to
do things like refactoring,

00:14:51.620 --> 00:14:53.994
you have to be able to
do refactoring across, oh

00:14:53.994 --> 00:14:55.660
all the code that
Google's ever written.

00:14:55.660 --> 00:14:58.070
I mean it's kind of a
large amount of code.

00:14:58.070 --> 00:15:01.590
And that was very difficult to
do with the original Dart type

00:15:01.590 --> 00:15:02.090
system.

00:15:02.090 --> 00:15:05.500
Because the type system, it
was kind of squishy, right.

00:15:05.500 --> 00:15:07.470
And so we developed
a strong mode.

00:15:07.470 --> 00:15:09.990
And the key points with
strong mode-- and Leaf

00:15:09.990 --> 00:15:11.800
will be talking about
this later today--

00:15:11.800 --> 00:15:14.190
are that type errors
actually matter.

00:15:14.190 --> 00:15:17.680
So in Dart one, type
errors were type warnings.

00:15:17.680 --> 00:15:19.780
You could keep running,
it was no problem.

00:15:19.780 --> 00:15:24.250
In strong mode, type errors
actually matter, period.

00:15:24.250 --> 00:15:25.560
We also use type inference.

00:15:25.560 --> 00:15:29.010
The idea is that it should
be obvious to all tools,

00:15:29.010 --> 00:15:32.660
that if you say something like,
var x equals a string, that x

00:15:32.660 --> 00:15:33.630
is actually a string.

00:15:33.630 --> 00:15:35.921
And this is something that's
pretty intuitive to users,

00:15:35.921 --> 00:15:38.280
but it's something-- I
think many people thought

00:15:38.280 --> 00:15:41.930
Dart was operating this way,
because we're kind of tricky.

00:15:41.930 --> 00:15:44.570
But it wasn't really, and now
with strong mode it will be.

00:15:44.570 --> 00:15:46.450
The other thing that's
important for this,

00:15:46.450 --> 00:15:48.430
is that we're adding
generic methods to Dart.

00:15:48.430 --> 00:15:50.180
And the reason for
this is pretty obvious.

00:15:50.180 --> 00:15:51.554
If you actually
care about types,

00:15:51.554 --> 00:15:53.440
which you do in
strong mode, you don't

00:15:53.440 --> 00:15:56.380
want to be dropping those
types on the floor every time

00:15:56.380 --> 00:15:58.239
you're passing
through a generic.

00:15:58.239 --> 00:15:59.780
ANDERS SANDHOLM:
And I think that you

00:15:59.780 --> 00:16:01.380
mentioned introducing
strong mode as a way

00:16:01.380 --> 00:16:02.530
to better scale your code.

00:16:02.530 --> 00:16:05.290
I think it also serves
another purpose.

00:16:05.290 --> 00:16:07.370
From you talking
to external teams,

00:16:07.370 --> 00:16:11.970
I talk with Soundtrap, a Swedish
startup, long term Dart user

00:16:11.970 --> 00:16:15.380
a few weeks back, and got
really positive feedback.

00:16:15.380 --> 00:16:17.570
They found out about strong
mode, started using it,

00:16:17.570 --> 00:16:20.060
and just getting the
error messages early on

00:16:20.060 --> 00:16:23.240
was just a huge benefit
for them as well.

00:16:23.240 --> 00:16:25.830
Kim mentioned this is as well,
he's giving a talk tomorrow.

00:16:25.830 --> 00:16:28.560
I've also had a very good
experience trying out

00:16:28.560 --> 00:16:29.590
strong mode.

00:16:29.590 --> 00:16:30.510
DAN GROVE: Yeah, it's
kind of like people

00:16:30.510 --> 00:16:33.010
would rather find out about
errors at development time,

00:16:33.010 --> 00:16:34.830
than when they deploy things.

00:16:34.830 --> 00:16:38.130
But you know, it's just an idea.

00:16:38.130 --> 00:16:40.900
Another question that
we heard a lot was, OK,

00:16:40.900 --> 00:16:44.330
you've got all this cool
stuff, but my job is basically

00:16:44.330 --> 00:16:45.900
building web
applications, and I need

00:16:45.900 --> 00:16:47.710
to be able to build
really nice UIs,

00:16:47.710 --> 00:16:49.530
and I need to be able
to build them fast.

00:16:49.530 --> 00:16:53.780
So when we started off, we said,
oh well you have dart:html.

00:16:53.780 --> 00:16:55.120
I mean, some people like that.

00:16:55.120 --> 00:16:56.900
It's a kind of nice
library, but it's not

00:16:56.900 --> 00:16:59.865
really enough to make
people super happy.

00:16:59.865 --> 00:17:01.585
At least most people.

00:17:01.585 --> 00:17:02.960
And we did a couple
of iterations

00:17:02.960 --> 00:17:05.780
here as we tried to
hone in on what we

00:17:05.780 --> 00:17:07.390
thought the right answer was.

00:17:07.390 --> 00:17:09.160
So we did a lot of
work with Polymer.

00:17:09.160 --> 00:17:12.250
Probably some of you have
experimented with that.

00:17:12.250 --> 00:17:14.040
And we were wrapping
a JS library,

00:17:14.040 --> 00:17:15.784
we weren't thrilled with it.

00:17:15.784 --> 00:17:17.450
We started working
with the Angular team

00:17:17.450 --> 00:17:19.908
and came up with something that
felt pretty nice to program

00:17:19.908 --> 00:17:21.349
with Angular 1.

00:17:21.349 --> 00:17:23.760
But it also didn't have the
performance that we wanted,

00:17:23.760 --> 00:17:26.300
and it didn't have
that Darty feel.

00:17:26.300 --> 00:17:27.730
It was using mirrors.

00:17:27.730 --> 00:17:32.330
It was something that wasn't
quite what we wanted to get to.

00:17:32.330 --> 00:17:34.874
And so over the last
year or so, we've

00:17:34.874 --> 00:17:36.290
been working with
the Angular team

00:17:36.290 --> 00:17:39.610
to get Angular2
Dart out the door.

00:17:39.610 --> 00:17:42.410
I'm happy to say that
AngularDart 2.0 is launching

00:17:42.410 --> 00:17:42.990
today.

00:17:42.990 --> 00:17:45.560
And this is a
really nice system.

00:17:45.560 --> 00:17:47.942
[APPLAUSE]

00:17:51.140 --> 00:17:53.870
So, you'll be hearing more
about this in just a few minutes

00:17:53.870 --> 00:17:55.320
from Ferhat and Matan.

00:17:55.320 --> 00:17:58.540
But the nice things about
this is, it's idiomatic Dart.

00:17:58.540 --> 00:18:02.570
So there is no more JavaScript
legacy in AngularDart 2.0.

00:18:02.570 --> 00:18:05.640
this is all Dart,
in Dart, for Dart.

00:18:05.640 --> 00:18:07.290
It's getting faster and faster.

00:18:07.290 --> 00:18:09.430
In the last couple
months I think

00:18:09.430 --> 00:18:11.870
we've seen a 10% speed
increase and I know,

00:18:11.870 --> 00:18:15.840
Ferhat promises me that
there's more on the table.

00:18:15.840 --> 00:18:19.310
An amazing thing, by moving it
into Dart, and really making it

00:18:19.310 --> 00:18:22.060
focused on how does thing work
when compiled to Dart to JS

00:18:22.060 --> 00:18:25.420
Is that it's gotten 40% smaller
JS output just in the last four

00:18:25.420 --> 00:18:25.920
months.

00:18:25.920 --> 00:18:28.260
So I figure if we do this
for another year or so we--

00:18:28.260 --> 00:18:29.270
KASPER LUND: Should be good.

00:18:29.270 --> 00:18:30.660
DAN GROVE: Should
be pretty good.

00:18:30.660 --> 00:18:32.900
And this is used heavily today.

00:18:32.900 --> 00:18:35.420
So all these things that we're
talking about like AdWords,

00:18:35.420 --> 00:18:37.710
AdSense, Google Fiber.

00:18:37.710 --> 00:18:38.780
They're all using this.

00:18:38.780 --> 00:18:40.680
This is the core of
Google's ads tech stack

00:18:40.680 --> 00:18:45.230
and it is in critical,
critical in the sense,

00:18:45.230 --> 00:18:47.260
I like getting paid, use today.

00:18:47.260 --> 00:18:50.630
So this is really,
really important.

00:18:50.630 --> 00:18:54.150
KASPER LUND: It's been in
production for a while.

00:18:54.150 --> 00:18:57.070
DAN GROVE: A number of
quarters at this point.

00:18:57.070 --> 00:19:00.170
But even that wasn't
really enough.

00:19:00.170 --> 00:19:02.261
People wanted to know where
their components were,

00:19:02.261 --> 00:19:04.760
because even if you give them
Angular, even if you give them

00:19:04.760 --> 00:19:07.240
this great language, you give
them these nice libraries,

00:19:07.240 --> 00:19:09.710
people still want more.

00:19:09.710 --> 00:19:12.010
They want to not write
their own components.

00:19:12.010 --> 00:19:14.620
And well guess what, we
created a ton of components

00:19:14.620 --> 00:19:16.360
as we build all
these applications.

00:19:16.360 --> 00:19:19.220
And these components are shared
across many of our applications

00:19:19.220 --> 00:19:20.130
within Google.

00:19:20.130 --> 00:19:21.790
And we're launching
a preview today

00:19:21.790 --> 00:19:23.020
of AngularDart components.

00:19:23.020 --> 00:19:24.610
These are material
design components

00:19:24.610 --> 00:19:26.355
that you can use in
your application.

00:19:26.355 --> 00:19:28.480
Their industrial strength,
they work cross-browser,

00:19:28.480 --> 00:19:30.690
they're really nicely done.

00:19:30.690 --> 00:19:32.360
There's an actual
UI team that works

00:19:32.360 --> 00:19:35.760
on making sure that these comply
with the material design spec.

00:19:35.760 --> 00:19:39.580
So you can start using these
and playing with them now.

00:19:39.580 --> 00:19:42.340
So overall, we finally
feel like we've

00:19:42.340 --> 00:19:44.510
got a really great web stack.

00:19:44.510 --> 00:19:46.940
So we've got the language,
we got the core libraries,

00:19:46.940 --> 00:19:48.120
we got the ecosystem.

00:19:48.120 --> 00:19:50.350
Which many of you all
have contributed to.

00:19:50.350 --> 00:19:53.160
And I think things like
getting pub.dartlang.org.

00:19:53.160 --> 00:19:56.180
Out early so that we had a
coherent place to share stuff,

00:19:56.180 --> 00:19:58.184
was wonderful for the ecosystem.

00:19:58.184 --> 00:19:59.350
We've got a great framework.

00:19:59.350 --> 00:20:01.040
We've got components.

00:20:01.040 --> 00:20:03.120
We've got the full web stack.

00:20:03.120 --> 00:20:05.510
And now we feel really
ready for the future.

00:20:05.510 --> 00:20:08.615
We made it really easy to
use JavaScript libraries.

00:20:08.615 --> 00:20:10.362
We've got these
incredibly fast dev

00:20:10.362 --> 00:20:12.320
cycles using the dev compiler.

00:20:12.320 --> 00:20:14.300
Scalability that's
incredible, really

00:20:14.300 --> 00:20:17.230
for best in class
kind of scalability.

00:20:17.230 --> 00:20:20.400
And we've made it really easy
to build high performance UIs.

00:20:20.400 --> 00:20:21.150
KASPER LUND: Yeah.

00:20:21.150 --> 00:20:23.480
But I mean this is a
really nice future.

00:20:23.480 --> 00:20:25.550
But it's not the entire future.

00:20:25.550 --> 00:20:29.710
There's a whole other set of
things that we could be doing,

00:20:29.710 --> 00:20:31.700
and that we are doing,
that I want to give you

00:20:31.700 --> 00:20:34.120
a sneak preview into.

00:20:34.120 --> 00:20:35.602
But to make sure
that it actually

00:20:35.602 --> 00:20:37.310
is something that will
interest you guys,

00:20:37.310 --> 00:20:39.240
I started looking at
what kind of things

00:20:39.240 --> 00:20:41.880
were popular at the last summit.

00:20:41.880 --> 00:20:44.790
And there was one
talk that was just

00:20:44.790 --> 00:20:46.350
way more popular
than anything else.

00:20:46.350 --> 00:20:47.330
DAN GROVE: That was
my talk, that right?

00:20:47.330 --> 00:20:48.830
KASPER LUND: That
was not your talk.

00:20:48.830 --> 00:20:49.690
[LAUGHTER]

00:20:49.690 --> 00:20:52.290
It was not my talk either.

00:20:52.290 --> 00:20:55.190
Most of it was fairly popular,
but this one, this one talk

00:20:55.190 --> 00:20:58.480
here, had like 50% of
all views on YouTube

00:20:58.480 --> 00:21:02.190
of these presentations
in one single talk.

00:21:02.190 --> 00:21:05.350
And the talk was about Dart
code for mobile devices.

00:21:05.350 --> 00:21:08.250
It's called Sky: An Experiment
Writing Dart for Mobile.

00:21:08.250 --> 00:21:10.580
And it showed
something kind of neat.

00:21:10.580 --> 00:21:12.600
It showed you a way to
write Dart code that

00:21:12.600 --> 00:21:14.430
ended up on a mobile device.

00:21:14.430 --> 00:21:19.690
In this case, like showing a
spinning cube on a real phone.

00:21:19.690 --> 00:21:22.690
And in some ways,
it's a bit surprising

00:21:22.690 --> 00:21:26.810
that you get that many views
on a video presentation that

00:21:26.810 --> 00:21:29.080
shows you a spinning
cube on a device.

00:21:29.080 --> 00:21:30.830
So I wonder, why
is that so popular.

00:21:30.830 --> 00:21:33.038
Are you guys really so
impressed with spinning cubes?

00:21:33.038 --> 00:21:34.670
[LAUGHTER]

00:21:34.670 --> 00:21:36.070
Some people are saying yes.

00:21:36.070 --> 00:21:37.420
That's kind of neat.

00:21:37.420 --> 00:21:40.481
I think the reason why you
guys are excited about this,

00:21:40.481 --> 00:21:42.230
and the reason why I'm
excited about this,

00:21:42.230 --> 00:21:43.310
is it holds promise.

00:21:43.310 --> 00:21:45.770
It shows you that there
might be a way in the future

00:21:45.770 --> 00:21:47.750
where you can write
for Android and iOS,

00:21:47.750 --> 00:21:50.730
build a really high performance,
really slick mobile apps,

00:21:50.730 --> 00:21:54.970
for both kinds of devices from a
single codebase, based on Dart.

00:21:54.970 --> 00:21:58.830
I think that kind of
promise is really exciting.

00:21:58.830 --> 00:22:01.150
Maybe as importantly
though, it also

00:22:01.150 --> 00:22:04.530
showed you a way to
write mobile apps

00:22:04.530 --> 00:22:07.141
in a way that was very
pleasant and approachable.

00:22:07.141 --> 00:22:09.640
I think the native stacks out
there today are really useful,

00:22:09.640 --> 00:22:11.800
and you can write
wonderful things with that.

00:22:11.800 --> 00:22:13.560
But I think there
is something to be

00:22:13.560 --> 00:22:16.320
said for a more pleasant,
more delightful experience.

00:22:16.320 --> 00:22:18.500
Something that's much
easier to get started on.

00:22:18.500 --> 00:22:20.650
And what Eric
showed you last year

00:22:20.650 --> 00:22:22.884
was just much easier
to get going with.

00:22:22.884 --> 00:22:24.800
You'd type in the Dart
code, you hit a button,

00:22:24.800 --> 00:22:26.240
and you have it on the device.

00:22:26.240 --> 00:22:29.430
It's really simple,
slick, and I think

00:22:29.430 --> 00:22:31.280
that sort of got you
guys excited about what

00:22:31.280 --> 00:22:33.020
we could do with that.

00:22:33.020 --> 00:22:37.250
So this was basically the
talk from 1 and 1/2 years ago.

00:22:37.250 --> 00:22:39.290
And things have
happened since then.

00:22:39.290 --> 00:22:42.750
It was called Sky back in the
day, now it's called Flutter.

00:22:42.750 --> 00:22:44.070
It has a new spiffy logo.

00:22:44.070 --> 00:22:45.820
But this is not the
most interesting thing

00:22:45.820 --> 00:22:46.810
that's happened.

00:22:46.810 --> 00:22:48.950
We've actually gone
from spinning cubes,

00:22:48.950 --> 00:22:51.960
to being able to have
real, modern, beautiful UIs

00:22:51.960 --> 00:22:56.350
on Android and iOS from
the same source base.

00:22:56.350 --> 00:22:57.880
And I think my main
point with this,

00:22:57.880 --> 00:23:00.710
is that you do not want to be
late for the keynote tomorrow.

00:23:00.710 --> 00:23:03.764
So tomorrow we're going to
spend a lot of time on mobile.

00:23:03.764 --> 00:23:05.180
Starting with the
keynote and then

00:23:05.180 --> 00:23:06.554
diving into the
Dart technologies

00:23:06.554 --> 00:23:10.320
that power Dart for
mobile and Flutter.

00:23:10.320 --> 00:23:12.980
So I think tomorrow will prove
to be another exciting day

00:23:12.980 --> 00:23:14.740
at the summit.

00:23:14.740 --> 00:23:17.470
So I think mobile is
clearly an area for us that

00:23:17.470 --> 00:23:20.570
excites you, and excites us, and
something we are investing in

00:23:20.570 --> 00:23:21.630
very heavily.

00:23:21.630 --> 00:23:24.570
It's a very exciting
part of our future.

00:23:24.570 --> 00:23:26.750
But I think the main
takeaway for you

00:23:26.750 --> 00:23:28.870
guys here is that, Dart
is doing really well.

00:23:28.870 --> 00:23:30.440
We have a very productive Stack.

00:23:30.440 --> 00:23:31.590
We're growing really fast.

00:23:31.590 --> 00:23:34.006
Anders mentioned that Dart is
the fastest growing language

00:23:34.006 --> 00:23:34.540
at Google.

00:23:34.540 --> 00:23:36.250
That's really significant.

00:23:36.250 --> 00:23:38.310
Furthermore, maybe
that's one thing that

00:23:38.310 --> 00:23:40.690
makes us really proud here,
is that Dart actually powers

00:23:40.690 --> 00:23:42.180
Google's most critical apps.

00:23:42.180 --> 00:23:44.610
Like the $70 billion
US dollars, I almost

00:23:44.610 --> 00:23:46.820
want to impersonate Dr.
Evil when I see that number.

00:23:46.820 --> 00:23:48.485
DAN GROVE: Yeah no kidding.

00:23:48.485 --> 00:23:50.860
KASPER LUND: This is really
almost too big numbers right,

00:23:50.860 --> 00:23:53.530
but it's kind of interesting
for us to be part of that.

00:23:53.530 --> 00:23:55.190
It's really significant.

00:23:55.190 --> 00:23:57.840
And maybe for you guys,
even more importantly,

00:23:57.840 --> 00:23:58.717
it's ready for you.

00:23:58.717 --> 00:24:00.550
You can actually start
using the same stack,

00:24:00.550 --> 00:24:04.690
and use the fact that we
have a full Dart web stack.

00:24:04.690 --> 00:24:07.440
[APPLAUSE]

