WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:09.740
[MUSIC PLAYING]

00:00:09.740 --> 00:00:10.690
KATHRYN HURLEY: Hey, everyone.

00:00:10.690 --> 00:00:12.610
My name's Kathryn Hurley.

00:00:12.610 --> 00:00:15.410
I'm a developer programs
engineer at Google.

00:00:15.410 --> 00:00:17.460
And this is Marc Cohen,
also a developer

00:00:17.460 --> 00:00:18.950
programs engineer at Google.

00:00:18.950 --> 00:00:19.825
MARC COHEN: Hello.

00:00:19.825 --> 00:00:22.930
KATHRYN HURLEY: And we both work
on Google Compute Engine.

00:00:22.930 --> 00:00:25.940
So in this session, we're going
to show you how to get

00:00:25.940 --> 00:00:27.960
started using Google
Compute Engine.

00:00:30.770 --> 00:00:34.670
So first, what is Google
Compute Engine?

00:00:34.670 --> 00:00:36.890
It's a compute engine
just launched at--

00:00:36.890 --> 00:00:58.347
[LOST AUDIO]

00:00:58.347 --> 00:01:02.210
--infrastructure, what
it's all about.

00:01:02.210 --> 00:01:04.590
Basically, this is what Google's
infrastructure

00:01:04.590 --> 00:01:05.370
already handles.

00:01:05.370 --> 00:01:07.059
It indexes billions--

00:01:07.059 --> 00:02:10.940
[LOST AUDIO]

00:02:10.940 --> 00:02:15.720
--data that's written to and
from your VMs, all the data is

00:02:15.720 --> 00:02:17.470
encrypted, so it's
very secure.

00:02:17.470 --> 00:02:21.620
Again, it's one of the
engineers' number-one

00:02:21.620 --> 00:02:23.050
priorities.

00:02:23.050 --> 00:02:24.700
Another guiding principle
was that the

00:02:24.700 --> 00:02:27.850
system is open and flexible.

00:02:27.850 --> 00:02:30.020
And basically, you're
given a VM.

00:02:30.020 --> 00:02:32.890
You have root access to this VM,
so you can install pretty

00:02:32.890 --> 00:02:35.920
much whatever you want on this
VM, which allows a very

00:02:35.920 --> 00:02:41.200
flexible environment for you
to develop applications on.

00:02:41.200 --> 00:02:44.130
The engineers were also
concerned about consistency.

00:02:44.130 --> 00:02:47.440
So they want to make sure that
any application that you are

00:02:47.440 --> 00:02:50.380
writing on your engine would
be consistent and run

00:02:50.380 --> 00:02:51.300
consistently.

00:02:51.300 --> 00:02:54.550
So it works once, and
it always works.

00:02:54.550 --> 00:02:58.240
The system, Compute Engine,
is also proven.

00:02:58.240 --> 00:03:02.460
So a lot of Google's production
services are

00:03:02.460 --> 00:03:05.320
already running on
Compute Engine.

00:03:05.320 --> 00:03:06.060
And finally--

00:03:06.060 --> 00:03:08.530
MARC COHEN: So I just wanted
to stop you for a second.

00:03:08.530 --> 00:03:11.580
I'm getting some reports that
people aren't getting audio

00:03:11.580 --> 00:03:13.790
when we cut to the slides.

00:03:13.790 --> 00:03:14.730
We're OK?

00:03:14.730 --> 00:03:15.230
OK, it's fixed.

00:03:15.230 --> 00:03:16.480
Sorry about the interruption.

00:03:22.122 --> 00:03:25.130
KATHRYN HURLEY: Should I go back
and go over any of the

00:03:25.130 --> 00:03:27.321
slides, or are we good?

00:03:27.321 --> 00:03:31.488
MARC COHEN: Not sure how
much audio we lost.

00:03:31.488 --> 00:03:34.952
Maybe carry on from where
you left off, perhaps.

00:03:34.952 --> 00:03:38.090
KATHRYN HURLEY: And finally, the
engineers, and the team in

00:03:38.090 --> 00:03:40.780
general, is just very interested
in enabling an

00:03:40.780 --> 00:03:42.810
ecosystem on Compute Engine.

00:03:42.810 --> 00:03:47.050
So we have an API that you can
use and incorporate into your

00:03:47.050 --> 00:03:48.070
own applications.

00:03:48.070 --> 00:03:51.580
So we're very interested in
partnering with you to help

00:03:51.580 --> 00:03:54.580
you include Compute Engine
in your projects and

00:03:54.580 --> 00:03:55.830
applications.

00:03:58.490 --> 00:04:02.010
So what I wanted to do was just
jump into a little demo

00:04:02.010 --> 00:04:04.900
right here right now and
show off the Google

00:04:04.900 --> 00:04:07.090
Compute Engine UI.

00:04:07.090 --> 00:04:11.000
And the UI is available in
the Google API Console.

00:04:11.000 --> 00:04:13.670
I'm going to switch to
that view right now.

00:04:13.670 --> 00:04:18.430
So if you just go to
code.google.com/apis/console,

00:04:18.430 --> 00:04:21.260
this is Google's API Console,
and you have control over

00:04:21.260 --> 00:04:25.480
several or all of Google APIs
we have in this console.

00:04:25.480 --> 00:04:29.180
And you have the opportunity
to create projects.

00:04:29.180 --> 00:04:32.040
Here I have a project called
Google Compute Engine that I'm

00:04:32.040 --> 00:04:33.080
going to be working in.

00:04:33.080 --> 00:04:34.510
And you can see some
information

00:04:34.510 --> 00:04:36.590
about my project here.

00:04:36.590 --> 00:04:38.700
And you can see I have
Google Compute Engine

00:04:38.700 --> 00:04:40.430
enabled on my project.

00:04:42.950 --> 00:04:48.965
And it looks like I don't have
access to this project.

00:04:48.965 --> 00:04:51.090
Shoot.

00:04:51.090 --> 00:04:52.740
I guess I can't have more
than one account.

00:04:56.590 --> 00:04:57.610
Let me see.

00:04:57.610 --> 00:04:57.950
Sorry.

00:04:57.950 --> 00:05:00.696
MARC COHEN: You can sign
out and sign back in.

00:05:00.696 --> 00:05:02.360
KATHRYN HURLEY: Give me
one second to sign out

00:05:02.360 --> 00:05:03.800
and sign back in.

00:05:03.800 --> 00:05:05.050
Sorry about the delay.

00:05:08.120 --> 00:05:22.820
[TYPING]

00:05:22.820 --> 00:05:23.315
KATHRYN HURLEY: All right.

00:05:23.315 --> 00:05:24.350
Here we go.

00:05:24.350 --> 00:05:27.040
So again, this is Google's
API Console.

00:05:27.040 --> 00:05:30.290
And I was going to click
on Compute Engine here.

00:05:30.290 --> 00:05:34.250
And you see I have Compute
Engine projects called

00:05:34.250 --> 00:05:36.300
compute-engine-demo.

00:05:36.300 --> 00:05:39.370
And you can see some information
about my Compute

00:05:39.370 --> 00:05:40.060
Engine project.

00:05:40.060 --> 00:05:44.760
I have 100 instances available,
100 CPUs, and some

00:05:44.760 --> 00:05:46.210
other information.

00:05:46.210 --> 00:05:49.930
I can see a list of
all the instances

00:05:49.930 --> 00:05:50.920
I have up and running.

00:05:50.920 --> 00:05:55.105
So I already have an instance
called demo-1 up and running.

00:05:55.105 --> 00:05:59.910
I can create new disks here
if I want to do that.

00:05:59.910 --> 00:06:01.200
I can just skip that for now.

00:06:01.200 --> 00:06:04.480
And I can see information about
networks that I have in

00:06:04.480 --> 00:06:06.390
my project and zones
and operations.

00:06:06.390 --> 00:06:08.130
So let's just go back
to Instances.

00:06:08.130 --> 00:06:10.370
And I want to create a new
instance now and just show you

00:06:10.370 --> 00:06:14.080
how easy it is to get an
instance up and running.

00:06:14.080 --> 00:06:16.350
So I click on Create
Instance button.

00:06:16.350 --> 00:06:19.000
You can see there's a lot of
options here in this UI.

00:06:19.000 --> 00:06:21.000
So I can give the
instance a name.

00:06:21.000 --> 00:06:23.210
I'll just call this demo-2.

00:06:23.210 --> 00:06:25.570
I can apply a description.

00:06:25.570 --> 00:06:28.560
I can select which zone I want
the instance to get up and

00:06:28.560 --> 00:06:29.120
running in.

00:06:29.120 --> 00:06:31.130
I'll keep it the default
for now.

00:06:31.130 --> 00:06:35.060
I can select the machine types,
which allows me to

00:06:35.060 --> 00:06:39.320
select a number of virtual
CPUs for my instance.

00:06:39.320 --> 00:06:41.250
I'll keep it as the default.

00:06:41.250 --> 00:06:44.876
If I had images, Custom Image,
I could apply it, or I can

00:06:44.876 --> 00:06:49.600
select from one of the many
default images to apply.

00:06:49.600 --> 00:06:50.810
And there are several
other options.

00:06:50.810 --> 00:06:52.830
But this looks good
for now, so I will

00:06:52.830 --> 00:06:54.870
Create a New Instance.

00:06:54.870 --> 00:06:59.190
And you can see this instance is
provisioning right now, and

00:06:59.190 --> 00:07:01.730
it's going to go through
provisioning and staging and

00:07:01.730 --> 00:07:03.560
get up and running.

00:07:03.560 --> 00:07:06.000
And it's staging right now,
so it's pretty quick.

00:07:06.000 --> 00:07:07.350
Let's just go and look
at this one that's

00:07:07.350 --> 00:07:09.850
already up and running.

00:07:09.850 --> 00:07:12.490
And you can see some information
about this

00:07:12.490 --> 00:07:14.330
instance I've already started.

00:07:14.330 --> 00:07:18.090
So you can see information about
the zone, machine type,

00:07:18.090 --> 00:07:20.640
the disks that I have
for this image.

00:07:20.640 --> 00:07:26.850
And what's pretty interesting
down here is this SSH command.

00:07:26.850 --> 00:07:30.830
And I could just copy this and
paste it directly in my

00:07:30.830 --> 00:07:35.380
terminal window, and this will
allow me to SSH directly into

00:07:35.380 --> 00:07:36.190
this machine.

00:07:36.190 --> 00:07:38.900
So that's pretty handy.

00:07:38.900 --> 00:07:40.790
All right, so let's go
back to the slides.

00:07:44.180 --> 00:07:47.510
So now I just want to talk about
the overview of Compute

00:07:47.510 --> 00:07:49.400
Engine and talk about
some various

00:07:49.400 --> 00:07:51.540
components of Compute Engine.

00:07:51.540 --> 00:07:53.840
So first, we have the concept
of a project.

00:07:53.840 --> 00:07:56.870
And I briefly showed you that
in the API Console.

00:07:56.870 --> 00:08:00.590
That's an API console project,
and the project owns all of

00:08:00.590 --> 00:08:03.200
these resources.

00:08:03.200 --> 00:08:06.360
And then we have the compute
component of Compute Engine.

00:08:06.360 --> 00:08:08.700
And that's basically your
VMs that are doing all

00:08:08.700 --> 00:08:10.550
the work for you.

00:08:10.550 --> 00:08:13.740
Next, we have the network and
storage and API and tools.

00:08:16.512 --> 00:08:20.480
And I'm going to talk about each
of those individually.

00:08:20.480 --> 00:08:22.580
So the Project, again,
it's based on

00:08:22.580 --> 00:08:24.290
the API Console projects.

00:08:24.290 --> 00:08:27.400
You create project in
the API Console.

00:08:27.400 --> 00:08:30.050
And this project is a container
for all your Compute

00:08:30.050 --> 00:08:31.560
Engine resources.

00:08:31.560 --> 00:08:33.539
So the project owns the VMs.

00:08:33.539 --> 00:08:37.676
It owns storage, networks,
et cetera.

00:08:37.676 --> 00:08:41.419
And you can invite specific
team members to join the

00:08:41.419 --> 00:08:43.679
project and work on that
project with you.

00:08:43.679 --> 00:08:45.755
And also, billing is enabled
for that project.

00:08:49.000 --> 00:08:52.240
The Compute powers the VMs,
and so these VMs are Linux

00:08:52.240 --> 00:08:53.410
virtual machines.

00:08:53.410 --> 00:08:56.840
You have root access to these
VMs, which means you can

00:08:56.840 --> 00:08:58.460
basically install whatever
you want on it,

00:08:58.460 --> 00:09:00.840
which is really cool.

00:09:00.840 --> 00:09:02.780
You can choose from some
of the stock images.

00:09:02.780 --> 00:09:05.520
We have Ubuntu and
CentOS images.

00:09:05.520 --> 00:09:08.500
Or you can create your
own custom images to

00:09:08.500 --> 00:09:10.680
apply to the VMs.

00:09:10.680 --> 00:09:12.480
There's a modern processor--

00:09:12.480 --> 00:09:15.080
Intel Sandy Bridge--

00:09:15.080 --> 00:09:24.770
and you can select the number of
CPUs and RAM for your VMs.

00:09:24.770 --> 00:09:26.320
Next is the Network.

00:09:26.320 --> 00:09:31.040
So all the VMs live within their
own private network as

00:09:31.040 --> 00:09:34.340
isolated per project.

00:09:34.340 --> 00:09:37.800
You're given a private
IPv4 space.

00:09:37.800 --> 00:09:39.830
And one thing I find pretty
cool is there's

00:09:39.830 --> 00:09:41.650
internal-facing DNS.

00:09:41.650 --> 00:09:47.400
So the names that you have
assigned to these VMs are also

00:09:47.400 --> 00:09:49.120
the DNS names for the VMs.

00:09:49.120 --> 00:09:52.700
So it's easy to communicate
within your

00:09:52.700 --> 00:09:54.462
private network of VMs.

00:09:57.590 --> 00:10:00.630
So you might also be interested
in allowing

00:10:00.630 --> 00:10:05.490
communication with the external
world, so allowing

00:10:05.490 --> 00:10:09.400
computers to connect to your
VMs or vice versa.

00:10:09.400 --> 00:10:13.830
So each of the VMs has an
external IP assigned using

00:10:13.830 --> 00:10:15.910
1-to-1 NAT.

00:10:15.910 --> 00:10:23.180
And you can use firewalls to
allow TCP connections to your

00:10:23.180 --> 00:10:24.910
VMs or allow other protocols.

00:10:29.110 --> 00:10:30.190
Now, Storage.

00:10:30.190 --> 00:10:34.440
So if you decide to do so,
you can have persistent

00:10:34.440 --> 00:10:36.160
disk for your VMs.

00:10:36.160 --> 00:10:39.590
And persistent disks are
provisioned via the API.

00:10:39.590 --> 00:10:42.880
And they are located in the same
zone as that instance.

00:10:42.880 --> 00:10:46.040
And since the team is very
concerned about security, they

00:10:46.040 --> 00:10:47.290
are encrypted.

00:10:49.410 --> 00:10:52.780
You can use ephemeral disk
instead, if you want to, or in

00:10:52.780 --> 00:10:55.520
addition to your persistent
disk.

00:10:55.520 --> 00:10:58.500
Ephemeral disk, it lives and
dies with the instance.

00:10:58.500 --> 00:11:01.720
So as soon as that instance
shuts down, it's

00:11:01.720 --> 00:11:03.950
also gone as well.

00:11:03.950 --> 00:11:06.900
And that's because it lives on
the same physical machine as

00:11:06.900 --> 00:11:08.630
that instance.

00:11:08.630 --> 00:11:13.160
And again, this is also
encrypted at rest.

00:11:13.160 --> 00:11:16.010
And finally, you can also
use cloud storage for

00:11:16.010 --> 00:11:17.370
your storage needs.

00:11:17.370 --> 00:11:19.300
And this is an internet
object store.

00:11:19.300 --> 00:11:21.050
It's similar to EC2.

00:11:21.050 --> 00:11:24.750
There's an API where you can
access the objects in your

00:11:24.750 --> 00:11:28.130
cloud storage buckets.

00:11:28.130 --> 00:11:32.730
What's really cool is there's
frictionless access to cloud

00:11:32.730 --> 00:11:34.940
storage if you use
service accounts.

00:11:34.940 --> 00:11:38.330
So basically, when you start
up a VM, you can say, OK, I

00:11:38.330 --> 00:11:42.200
want this VM to be able to
access cloud storage as well.

00:11:42.200 --> 00:11:47.760
And you can immediately use
gsutil on this VM without

00:11:47.760 --> 00:11:50.010
having to worry about
OAuth at all.

00:11:53.490 --> 00:11:56.910
So finally, we have a few tools
that you can use to

00:11:56.910 --> 00:11:59.190
access Compute Engine.

00:11:59.190 --> 00:12:02.780
There's a command line library
called gcutil, which makes it

00:12:02.780 --> 00:12:07.100
really easy to add instances,
list instances, create

00:12:07.100 --> 00:12:08.560
networks, et cetera.

00:12:08.560 --> 00:12:10.960
I showed you the Compute
Engine UI, and that's

00:12:10.960 --> 00:12:13.170
available in the API Console.

00:12:13.170 --> 00:12:16.100
And then finally, there's
code, and that's you.

00:12:16.100 --> 00:12:20.620
So we're very interested in
forming partners and creating

00:12:20.620 --> 00:12:23.630
an ecosystem around
Compute Engine.

00:12:23.630 --> 00:12:31.350
And we have an API that allows
you to use Compute Engine in

00:12:31.350 --> 00:12:32.600
your applications.

00:12:36.820 --> 00:12:41.430
So gcutil, I'll just go through
gcutil real quickly.

00:12:41.430 --> 00:12:46.140
That's a command-line
utility library.

00:12:46.140 --> 00:12:48.870
And here are a few examples of
the commands that you can run.

00:12:48.870 --> 00:12:51.420
So you can start up a new
instance using the gcutil

00:12:51.420 --> 00:12:54.910
addinstance, and you provide
a name for that instance.

00:12:54.910 --> 00:12:58.520
You can list all the running
instances using listinstances.

00:12:58.520 --> 00:13:02.000
You can even apply filters to
listing out the instances.

00:13:02.000 --> 00:13:04.830
So if you want to find all the
instances that are running,

00:13:04.830 --> 00:13:08.980
you can filter for status
equals RUNNING.

00:13:08.980 --> 00:13:11.230
If you want to add a new
network, you can use

00:13:11.230 --> 00:13:13.880
addnetwork and provide a
name for that network.

00:13:13.880 --> 00:13:15.275
Here, we're calling it prod.

00:13:15.275 --> 00:13:19.080
And finally, you can set up
a firewall to allow your

00:13:19.080 --> 00:13:21.200
instances to accept incoming
HTTP connections.

00:13:25.530 --> 00:13:26.290
All right.

00:13:26.290 --> 00:13:32.930
So I was going to have an API
demo, but due to the account

00:13:32.930 --> 00:13:38.208
issue, I'm wondering if
I should cancel that.

00:13:38.208 --> 00:13:41.475
Can we switch away for a second
while I set it up?

00:13:54.780 --> 00:13:56.700
Give me just one second
to set this up.

00:14:05.592 --> 00:14:08.990
MARC COHEN: Just to amplify
the last point about the

00:14:08.990 --> 00:14:11.350
network configuration--

00:14:11.350 --> 00:14:14.622
just give me a yell
when you're ready.

00:14:14.622 --> 00:14:17.705
Are you ready now?

00:14:17.705 --> 00:14:18.870
KATHRYN HURLEY: Sure.

00:14:18.870 --> 00:14:19.650
MARC COHEN: OK.

00:14:19.650 --> 00:14:20.430
KATHRYN HURLEY: I can't
that works.

00:14:20.430 --> 00:14:21.620
MARC COHEN: I'll finish
the thought.

00:14:21.620 --> 00:14:25.240
Basically, Kathryn showed
a command line that was

00:14:25.240 --> 00:14:28.550
configuring access to port
80 for the network.

00:14:28.550 --> 00:14:30.560
And in case anyone was
wondering, you

00:14:30.560 --> 00:14:31.570
don't have to do that.

00:14:31.570 --> 00:14:36.320
By default, your network will
come up with the ability to

00:14:36.320 --> 00:14:38.830
accept SSH connections.

00:14:38.830 --> 00:14:43.460
So I think that's port 22 SSH?

00:14:43.460 --> 00:14:46.310
I'm not exactly sure of the port
number, but it'll accept

00:14:46.310 --> 00:14:49.000
SSH connections from
virtually anywhere.

00:14:49.000 --> 00:14:54.880
And it will accept any allow all
traffic between instances

00:14:54.880 --> 00:14:59.770
within a given virtual
network or cluster.

00:14:59.770 --> 00:15:01.840
Other than that, you would
want to use that command

00:15:01.840 --> 00:15:05.370
Kathryn showed you to augment
the firewalls to allow

00:15:05.370 --> 00:15:06.230
additional access.

00:15:06.230 --> 00:15:07.794
KATHRYN HURLEY: And
yes, it is 22.

00:15:07.794 --> 00:15:10.578
MARC COHEN: Cool.

00:15:10.578 --> 00:15:12.310
KATHRYN HURLEY: All right,
should we go

00:15:12.310 --> 00:15:12.800
through the demo now?

00:15:12.800 --> 00:15:13.580
MARC COHEN: Sure.

00:15:13.580 --> 00:15:14.870
KATHRYN HURLEY: OK, just
real quick, I'll go

00:15:14.870 --> 00:15:15.580
through this demo.

00:15:15.580 --> 00:15:18.980
So I set up this little
App Engine app

00:15:18.980 --> 00:15:21.360
that starts up instances.

00:15:21.360 --> 00:15:24.690
And I'll get those up and
running right now.

00:15:24.690 --> 00:15:28.840
And basically, this App
Engine app uses an

00:15:28.840 --> 00:15:30.440
App Engine task queue.

00:15:30.440 --> 00:15:32.960
And so the App Engine
app sends these

00:15:32.960 --> 00:15:34.460
tasks to the task queue.

00:15:34.460 --> 00:15:39.850
And each task is going to
start up a VM using the

00:15:39.850 --> 00:15:41.300
Compute Engine API.

00:15:41.300 --> 00:15:45.430
And you can see, these are all
the VMs I've asked Compute

00:15:45.430 --> 00:15:48.330
Engine to get started running.

00:15:48.330 --> 00:15:51.580
And as they turn from red
to yellow to green, that

00:15:51.580 --> 00:15:54.650
indicates the various status
of the instances.

00:15:54.650 --> 00:15:56.730
So red is when they're
provisioning.

00:15:56.730 --> 00:15:58.420
Orange is when they
are staging.

00:15:58.420 --> 00:16:01.060
And green is when they're
actually running.

00:16:01.060 --> 00:16:03.990
So when they're up and running,
they get placed in

00:16:03.990 --> 00:16:06.410
this little waiting period.

00:16:06.410 --> 00:16:11.940
So they're basically waiting for
a file to get uploaded to

00:16:11.940 --> 00:16:13.150
cloud storage.

00:16:13.150 --> 00:16:16.530
So when I click at this Fractal
Time button, there's

00:16:16.530 --> 00:16:19.210
going to a file that's uploaded
to cloud storage, and

00:16:19.210 --> 00:16:22.110
all of VMs are going to be,
OK, the file's there.

00:16:22.110 --> 00:16:24.480
And so they'll continue at their
work, and they're all

00:16:24.480 --> 00:16:30.070
going to generate one tile
for this fractal image.

00:16:30.070 --> 00:16:31.680
And as you can see, they're
filling in all

00:16:31.680 --> 00:16:33.140
the tiles right now.

00:16:33.140 --> 00:16:35.730
So that's basic API demo.

00:16:35.730 --> 00:16:38.250
You can do so much more
with the API.

00:16:38.250 --> 00:16:41.150
But this gives you an idea of
the kind of thing that you can

00:16:41.150 --> 00:16:42.600
get up and running
really quickly.

00:16:42.600 --> 00:16:45.457
This took me less than a week
to get up and running.

00:16:45.457 --> 00:16:48.440
MARC COHEN: And we're going to
make this available soon.

00:16:48.440 --> 00:16:50.870
KATHRYN HURLEY: Yes, so we're
going to share the code with

00:16:50.870 --> 00:16:55.350
you to help you learn
how to use the API.

00:16:55.350 --> 00:16:57.615
And let me just go
back real quick.

00:16:57.615 --> 00:16:59.570
So a little bit about the API.

00:16:59.570 --> 00:17:01.010
It's a REST API.

00:17:01.010 --> 00:17:04.599
And here's just a basic example
of an HTTP request

00:17:04.599 --> 00:17:07.770
that you make to
start up a VM.

00:17:07.770 --> 00:17:11.180
So you send a POST request
to this URL.

00:17:11.180 --> 00:17:14.420
And then you send--

00:17:14.420 --> 00:17:16.470
ooh, that's very yellow.

00:17:16.470 --> 00:17:20.530
You send a JSON object
representing the instance that

00:17:20.530 --> 00:17:21.780
you want up and running.

00:17:24.980 --> 00:17:26.750
So I just want to provide
a couple of

00:17:26.750 --> 00:17:28.130
helpful links to you.

00:17:28.130 --> 00:17:31.960
So you can sign up for
Compute Engine here.

00:17:31.960 --> 00:17:34.360
It has a few instructions
of what to do.

00:17:34.360 --> 00:17:37.220
And I also want to provide a
link to the docs so you can

00:17:37.220 --> 00:17:38.480
read the docs this URL.

00:17:42.580 --> 00:17:43.020
All right.

00:17:43.020 --> 00:17:43.690
Thank you.

00:17:43.690 --> 00:17:45.616
That's all I have.

00:17:45.616 --> 00:17:48.210
Here's some information about
me if you want to get

00:17:48.210 --> 00:17:48.995
in touch with me.

00:17:48.995 --> 00:17:53.100
I'll leave that up for just
maybe a couple of seconds.

00:17:53.100 --> 00:17:55.950
And I think at this point,
we're going to go to the

00:17:55.950 --> 00:18:01.020
moderator that we had and answer
the questions that

00:18:01.020 --> 00:18:02.970
people had posted.

00:18:02.970 --> 00:18:04.850
The moderator was available
in the Google

00:18:04.850 --> 00:18:07.780
Developer Live session.

00:18:07.780 --> 00:18:12.330
And I think we can just read off
those questions and answer

00:18:12.330 --> 00:18:14.200
them, so if you don't
mind helping out.

00:18:14.200 --> 00:18:15.190
MARC COHEN: Sure.

00:18:15.190 --> 00:18:15.680
Yes.

00:18:15.680 --> 00:18:20.180
We have the top question right
now is "Do you have API client

00:18:20.180 --> 00:18:23.740
libraries and for
what language?"

00:18:23.740 --> 00:18:26.065
KATHRYN HURLEY: Yes.

00:18:26.065 --> 00:18:27.350
MARC COHEN: We do
have languages.

00:18:27.350 --> 00:18:28.165
KATHRYN HURLEY: Yes.

00:18:28.165 --> 00:18:28.730
Let's see.

00:18:28.730 --> 00:18:31.782
I can even try to find--

00:18:31.782 --> 00:18:34.500
MARC COHEN: So while you're
navigating, I'll mention that

00:18:34.500 --> 00:18:41.360
Google has kind of a
comprehensive set of libraries

00:18:41.360 --> 00:18:44.410
for multiple languages covering
most of the popular

00:18:44.410 --> 00:18:46.310
programming languages
that are used now.

00:18:46.310 --> 00:18:54.580
So Java, JavaScript,
Ruby, Python, PHP.

00:18:54.580 --> 00:18:55.980
There's the list.

00:18:55.980 --> 00:18:59.470
And so those are all available
for use now with Google

00:18:59.470 --> 00:19:01.440
Compute Engine's API.

00:19:01.440 --> 00:19:04.460
KATHRYN HURLEY: Yep,
Go, GWT, Java.

00:19:04.460 --> 00:19:07.160
So we've got several.

00:19:07.160 --> 00:19:12.150
And I used the Python Client
Library to build that sample

00:19:12.150 --> 00:19:13.410
application on App Engine.

00:19:16.392 --> 00:19:17.840
MARC COHEN: Let's see.

00:19:17.840 --> 00:19:20.810
"Is there a free tier that
we could use to test out

00:19:20.810 --> 00:19:25.130
applications?" Actually, before
I answer that, one more

00:19:25.130 --> 00:19:27.920
thing I wanted to add is-- did
you mention the GCE lib?

00:19:27.920 --> 00:19:28.540
KATHRYN HURLEY: No.

00:19:28.540 --> 00:19:29.313
Yes, thank you.

00:19:29.313 --> 00:19:32.260
MARC COHEN: So there's another
library that you guys should

00:19:32.260 --> 00:19:34.210
know about in addition
to the standard

00:19:34.210 --> 00:19:36.860
Google Client Libraries.

00:19:36.860 --> 00:19:39.570
Kathryn's bringing it up
on a page right now.

00:19:39.570 --> 00:19:44.360
So this is called GCE lib, and
this is kind of a reference

00:19:44.360 --> 00:19:46.360
library for what we think
is a really great

00:19:46.360 --> 00:19:48.580
abstraction layer in Python.

00:19:48.580 --> 00:19:51.990
So it's specific to Python,
but we think it's a really

00:19:51.990 --> 00:19:53.840
nice programming paradigm.

00:19:53.840 --> 00:19:58.210
And we'd like to recommend
people give it a try.

00:19:58.210 --> 00:20:05.140
Really natural object-oriented
structure for accessing the

00:20:05.140 --> 00:20:07.440
Compute Engine capabilities.

00:20:07.440 --> 00:20:09.880
So that's another option for
people who are interested in

00:20:09.880 --> 00:20:11.130
Python programming.

00:20:13.920 --> 00:20:16.410
"Is there a free tier that
we could use to test out

00:20:16.410 --> 00:20:18.150
applications?"

00:20:18.150 --> 00:20:20.510
KATHRYN HURLEY: That's a good
question, and I'm not sure of

00:20:20.510 --> 00:20:20.870
the answer.

00:20:20.870 --> 00:20:22.580
MARC COHEN: Yeah.

00:20:22.580 --> 00:20:25.570
I think the answer is
that right now, yes,

00:20:25.570 --> 00:20:28.040
there is a free tier.

00:20:28.040 --> 00:20:32.450
We haven't officially set the
rules as far as the free

00:20:32.450 --> 00:20:34.210
quota, when that's going
to be introduced.

00:20:34.210 --> 00:20:36.250
So right now, all
access is free.

00:20:36.250 --> 00:20:40.300
But we're definitely moving to
a model where we're going to

00:20:40.300 --> 00:20:41.720
be charging.

00:20:41.720 --> 00:20:47.090
And the pricing for the charging
for our service is on

00:20:47.090 --> 00:20:51.930
that same page that's in the
second link on Kathryn's page.

00:20:51.930 --> 00:20:53.177
Or actually, yeah--

00:20:53.177 --> 00:20:54.051
KATHRYN HURLEY: Down here.

00:20:54.051 --> 00:20:57.020
MARC COHEN: So if you go to
developers.google.com.

00:20:57.020 --> 00:20:59.698
KATHRYN HURLEY: Dot pricing.

00:20:59.698 --> 00:21:01.960
MARC COHEN: Yeah, so right
now, we're in the limited

00:21:01.960 --> 00:21:03.950
preview period.

00:21:03.950 --> 00:21:07.800
And during that phase,
the pricing is free.

00:21:07.800 --> 00:21:13.760
But we'll have further details
on the actual charging

00:21:13.760 --> 00:21:16.475
mechanism when we get to the
next stage of the service.

00:21:20.840 --> 00:21:24.750
"Time frame to get access to
test Google Compute Engine

00:21:24.750 --> 00:21:29.416
instance?" So this is--

00:21:29.416 --> 00:21:30.680
I don't know if you
wanted to--

00:21:30.680 --> 00:21:33.541
KATHRYN HURLEY: That's a
good question again.

00:21:33.541 --> 00:21:34.500
Lots of good questions.

00:21:34.500 --> 00:21:38.220
We just encourage you to sign
up here at this forum.

00:21:38.220 --> 00:21:42.790
And we will get to your request
as soon as possible.

00:21:42.790 --> 00:21:46.920
So right now, we're spending a
lot of time just making sure

00:21:46.920 --> 00:21:49.800
that the service is
running well.

00:21:49.800 --> 00:21:52.290
We want to make sure Compute
Engine is the

00:21:52.290 --> 00:21:53.160
best that it can be.

00:21:53.160 --> 00:21:58.390
So we're in limited preview
right now, as was mentioned.

00:21:58.390 --> 00:22:01.270
And so we're letting people in
little by little and making

00:22:01.270 --> 00:22:03.970
sure that Compute Engine
is best that it can be.

00:22:07.430 --> 00:22:08.740
It is production ready.

00:22:08.740 --> 00:22:09.946
We should also mention that.

00:22:09.946 --> 00:22:10.405
MARC COHEN: Right.

00:22:10.405 --> 00:22:14.710
We do have production Google
services running on this

00:22:14.710 --> 00:22:17.770
product, and we just want to
make sure it's going to be the

00:22:17.770 --> 00:22:20.900
best possible experience
for all users, so

00:22:20.900 --> 00:22:25.030
we're scaling it carefully.

00:22:25.030 --> 00:22:28.640
Next question is "Would it be
feasible to boot the instances

00:22:28.640 --> 00:22:35.220
with a persistent disk mounted
at root?" My understanding is

00:22:35.220 --> 00:22:41.750
the persistent disks have to
be formatted and mounted

00:22:41.750 --> 00:22:46.130
yourself, so there might be
sort of a chicken-and-egg

00:22:46.130 --> 00:22:46.700
problem there.

00:22:46.700 --> 00:22:49.040
But we have one of
our engineering

00:22:49.040 --> 00:22:51.170
leads on the Hangout.

00:22:51.170 --> 00:22:56.140
I'm not sure if we're able to
switch to include audio from a

00:22:56.140 --> 00:22:58.340
Hangout attendee.

00:22:58.340 --> 00:22:59.030
Is that possible?

00:22:59.030 --> 00:23:00.335
JOE: Can you hear me?

00:23:00.335 --> 00:23:01.240
MARC COHEN: There's Joe.

00:23:01.240 --> 00:23:04.490
And I'm hearing you, actually.

00:23:04.490 --> 00:23:07.108
You might have to speak up.

00:23:07.108 --> 00:23:10.310
JOE: OK I hope everybody
else can hear me.

00:23:10.310 --> 00:23:15.970
The question about booting from
persistent disk, that's

00:23:15.970 --> 00:23:19.960
something that we're working on
and that we're looking at

00:23:19.960 --> 00:23:20.990
very carefully.

00:23:20.990 --> 00:23:25.180
Obviously, that provides a much
more persistent feel to

00:23:25.180 --> 00:23:28.350
the virtual machine than booting
off of ephemeral disk.

00:23:28.350 --> 00:23:30.680
We want to make sure that we get
all the right features set

00:23:30.680 --> 00:23:32.790
up there so that we
can provide a

00:23:32.790 --> 00:23:33.790
great experience there.

00:23:33.790 --> 00:23:36.760
But that's definitely the
direction that we're headed.

00:23:36.760 --> 00:23:39.320
And then the user will be able
to choose whether they want to

00:23:39.320 --> 00:23:42.662
boot from persistent disk
or from ephemeral.

00:23:42.662 --> 00:23:45.110
MARC COHEN: Thanks.

00:23:45.110 --> 00:23:49.050
Next question is "Do you--"
this changed right

00:23:49.050 --> 00:23:51.240
in front of my eyes.

00:23:51.240 --> 00:23:53.410
Let's go down the list here.

00:23:56.230 --> 00:23:59.020
"Any plans to introduce an
auction-based pricing model

00:23:59.020 --> 00:24:06.120
like EC2 Spot Instances?" We'll
consider that input.

00:24:06.120 --> 00:24:10.920
We don't currently have specific
plans to do that.

00:24:10.920 --> 00:24:14.390
But we really like this kind of
input, so we'll take that

00:24:14.390 --> 00:24:15.640
into consideration.

00:24:18.740 --> 00:24:21.290
"How secure is this about
hackers and other security

00:24:21.290 --> 00:24:26.710
issues?" Really good question.

00:24:26.710 --> 00:24:29.320
There's a lot of dimensions to
security, so I just want to

00:24:29.320 --> 00:24:32.020
mention a couple of things that
I think make this product

00:24:32.020 --> 00:24:35.820
really well situated to
keep your data secure.

00:24:35.820 --> 00:24:40.180
A lot of really deep engineering
work has gone into

00:24:40.180 --> 00:24:44.700
isolating the instances and the
networks so that when you

00:24:44.700 --> 00:24:48.270
actually visit your instance
or interact with your

00:24:48.270 --> 00:24:52.210
instance, we've taken great
pains to make sure that other

00:24:52.210 --> 00:24:55.600
people's instances can't come
along and see your data or

00:24:55.600 --> 00:24:56.970
your instances.

00:24:56.970 --> 00:24:59.820
And likewise, you can't get
to other people's data.

00:24:59.820 --> 00:25:03.560
And there's a lot of work to
firewall these instances from

00:25:03.560 --> 00:25:04.810
Google as well.

00:25:07.110 --> 00:25:10.170
It's up to you whether you're
going to use HTTPS or HTTP.

00:25:10.170 --> 00:25:14.280
We recommend HTTPS for
encrypting all your data

00:25:14.280 --> 00:25:17.250
that's in transit, as
a general rule.

00:25:17.250 --> 00:25:20.230
And as Kathryn mentioned, the
data that's stored at rest in

00:25:20.230 --> 00:25:22.480
the ephemeral disks
and the persistent

00:25:22.480 --> 00:25:24.760
disks is all encrypted.

00:25:24.760 --> 00:25:28.140
So the combination of all those
things, we believe,

00:25:28.140 --> 00:25:31.630
yields a very secure platform
for application developers.

00:25:31.630 --> 00:25:33.910
I don't know, Joe, if you wanted
to add to that at all.

00:25:33.910 --> 00:25:36.440
JOE: Yeah, I'd like to add
just a couple things.

00:25:36.440 --> 00:25:38.400
I think that's a
great summary.

00:25:38.400 --> 00:25:43.220
The first thing is that at the
API level, we're leveraging a

00:25:43.220 --> 00:25:45.570
bunch of common technology that
Google has built around

00:25:45.570 --> 00:25:47.440
servicing APIs.

00:25:47.440 --> 00:25:52.700
And all communication to our
API goes over HTTPS.

00:25:52.700 --> 00:25:54.460
And we do things in our clients
like make sure we

00:25:54.460 --> 00:25:56.870
check the certificates that we
get back, which is actually a

00:25:56.870 --> 00:26:00.300
common problem in API clients.

00:26:00.300 --> 00:26:02.500
The next thing is that
our default images--

00:26:02.500 --> 00:26:06.690
and we offer both CentOS and
Ubunto-based images.

00:26:06.690 --> 00:26:08.700
We've done a little bit of work
or harden these down a

00:26:08.700 --> 00:26:10.760
little bit to provide
some good defaults.

00:26:10.760 --> 00:26:13.750
Now, we can't go all the way to
sort of guarantee security

00:26:13.750 --> 00:26:15.670
for what's running inside
the virtual machine.

00:26:15.670 --> 00:26:18.690
I mean, with great power comes
great responsibility, and

00:26:18.690 --> 00:26:21.240
having root on the machine means
that there's a certain

00:26:21.240 --> 00:26:22.800
amount of ability to shoot
yourself in the foot.

00:26:22.800 --> 00:26:25.110
But we've tried to do some
common-sense things.

00:26:25.110 --> 00:26:27.750
Like using SSH keys instead
of passwords is a

00:26:27.750 --> 00:26:28.800
great way to do this.

00:26:28.800 --> 00:26:31.220
We don't allow SSH to
root by default.

00:26:31.220 --> 00:26:34.010
We actually disallow password
authentication for SSH.

00:26:34.010 --> 00:26:37.670
By default, we've turned on
automatic updates for the

00:26:37.670 --> 00:26:39.730
various distributions to make
sure that you get the latest

00:26:39.730 --> 00:26:41.840
security packages installed.

00:26:41.840 --> 00:26:44.050
Now, you can go in and modify
all of this to turn any of

00:26:44.050 --> 00:26:47.366
these capabilities off if you
really want to, but we wanted

00:26:47.366 --> 00:26:51.556
to make things be as secure as
we could by default for things

00:26:51.556 --> 00:26:52.984
that make sense.

00:26:52.984 --> 00:26:53.900
MARC COHEN: Makes sense.

00:26:53.900 --> 00:26:55.930
Thanks, Joe.

00:26:55.930 --> 00:27:00.680
"How do I configure my instance
on startup?" There's

00:27:00.680 --> 00:27:01.962
a couple of answers to that.

00:27:01.962 --> 00:27:03.640
KATHRYN HURLEY: A
couple options.

00:27:03.640 --> 00:27:08.360
So there are start-up scripts,
and you can specify start-up

00:27:08.360 --> 00:27:13.090
script and just run when your
instance says start it up.

00:27:13.090 --> 00:27:17.090
And another option is to
create custom image.

00:27:17.090 --> 00:27:19.870
So you can also select a custom
image to apply to an

00:27:19.870 --> 00:27:21.910
instance while starting.

00:27:21.910 --> 00:27:24.180
MARC COHEN: And maybe we can
just really quickly summarize

00:27:24.180 --> 00:27:26.450
the process of creating
a custom image.

00:27:26.450 --> 00:27:31.730
So you'll create an instance
using one of the standard

00:27:31.730 --> 00:27:33.160
default images.

00:27:33.160 --> 00:27:35.820
And then you'll customize
that to your needs.

00:27:35.820 --> 00:27:39.770
So you might install a web
server or some sort of package

00:27:39.770 --> 00:27:41.870
or your own custom application
software that you're

00:27:41.870 --> 00:27:44.430
interested in using.

00:27:44.430 --> 00:27:46.780
And once you have the
configuration exactly the way

00:27:46.780 --> 00:27:50.000
you want it, we have a script
that kind of makes the process

00:27:50.000 --> 00:27:51.170
pretty easy.

00:27:51.170 --> 00:27:57.840
It writes a compressed tarball
file to the local disk.

00:27:57.840 --> 00:28:02.050
And then you store that
in cloud storage.

00:28:02.050 --> 00:28:06.800
Then there's an API call you
can make, or it's visible

00:28:06.800 --> 00:28:11.070
through gcutil as well, that
you can run to assign a

00:28:11.070 --> 00:28:17.190
mnemonic name to the image and
also to tell it which cloud

00:28:17.190 --> 00:28:21.210
storage object to use
for that image.

00:28:21.210 --> 00:28:23.600
And then from that point
forward, you can create

00:28:23.600 --> 00:28:29.600
instances with that tag as
the requested image.

00:28:29.600 --> 00:28:32.610
And I think those images will
also show up on the console

00:28:32.610 --> 00:28:33.960
API, as far as I know.

00:28:33.960 --> 00:28:35.550
KATHRYN HURLEY: Yes, so you
can select that from the

00:28:35.550 --> 00:28:37.202
drop-down menu where you're
creating your instance.

00:28:37.202 --> 00:28:40.560
MARC COHEN: So if you prefer
using the web UI, you can go

00:28:40.560 --> 00:28:45.060
there and access the images,
create a new image with your

00:28:45.060 --> 00:28:47.230
own custom images from
there as well.

00:28:47.230 --> 00:28:49.070
KATHRYN HURLEY: And it's
all documented here.

00:28:49.070 --> 00:28:49.730
MARC COHEN: Yep.

00:28:49.730 --> 00:28:50.140
It's all there.

00:28:50.140 --> 00:28:53.830
JOE: I'd love to add something
there real quick.

00:28:53.830 --> 00:28:58.170
When you do ahead and register
the image with Compute Engine,

00:28:58.170 --> 00:29:01.970
we take a copy of the image
that's in cloud storage.

00:29:01.970 --> 00:29:04.670
And so then if you go and change
the underlying bits in

00:29:04.670 --> 00:29:07.226
cloud storage, that doesn't
change the image that gets

00:29:07.226 --> 00:29:07.600
used a lot.

00:29:07.600 --> 00:29:11.440
So it's really once you register
that image with

00:29:11.440 --> 00:29:14.755
Compute Engine, it's sort of
locked in at that point.

00:29:14.755 --> 00:29:17.065
And you can delete it or create
a different image if

00:29:17.065 --> 00:29:19.310
you want to update it.

00:29:19.310 --> 00:29:22.725
And then, in general, though,
we've been encouraging users

00:29:22.725 --> 00:29:25.400
to use dynamic configuration
software.

00:29:25.400 --> 00:29:30.700
I think it's much easier to keep
the image up to date as

00:29:30.700 --> 00:29:33.450
bug fixes to our script and the
stuff that we put in our

00:29:33.450 --> 00:29:34.570
default images.

00:29:34.570 --> 00:29:38.290
Or if you need to recreate
things from scratch, it's a

00:29:38.290 --> 00:29:40.890
lot easier to do that with
dynamic systems.

00:29:40.890 --> 00:29:43.280
The easiest thing is the
start-up script that Kathryn

00:29:43.280 --> 00:29:46.420
managed, but if you're building
a larger system, you

00:29:46.420 --> 00:29:53.430
can start taking on systems like
Chef or Puppet or more

00:29:53.430 --> 00:29:55.760
full-blown providers
like Bright Scale.

00:29:55.760 --> 00:30:00.430
So this really, when Kathryn
mentioned earlier the idea of

00:30:00.430 --> 00:30:03.682
building an ecosystem, that's
really some of the stuff that

00:30:03.682 --> 00:30:09.650
we're talking about, is being
able to plug into a lot of

00:30:09.650 --> 00:30:13.215
these management systems that
have been built up as people

00:30:13.215 --> 00:30:15.600
have started learning how
to use the cloud.

00:30:15.600 --> 00:30:18.250
MARC COHEN: There's kind of a
fine line between the custom

00:30:18.250 --> 00:30:20.950
image capability and the
start-up script capability.

00:30:20.950 --> 00:30:25.990
And just from my own playing
with the product, I tend to

00:30:25.990 --> 00:30:29.520
use the start-up capability
as my iterative

00:30:29.520 --> 00:30:31.000
experimentation mechanism.

00:30:31.000 --> 00:30:32.760
And then when I've got something
that's relatively

00:30:32.760 --> 00:30:37.460
solid, I'll convert to a custom
image, just because the

00:30:37.460 --> 00:30:43.670
start-up thing is more dynamic
and lower overhead.

00:30:43.670 --> 00:30:45.580
Next question.

00:30:45.580 --> 00:30:48.485
ANDREW: Sorry, I might just add
something, because I've

00:30:48.485 --> 00:30:50.590
just recently been building out
a service on big cluster

00:30:50.590 --> 00:30:52.570
for an internal project that
we'll be launching soon.

00:30:52.570 --> 00:30:56.154
JOE: You need Google
Compute Engine.

00:30:56.154 --> 00:30:56.870
ANDREW: Oh, sorry.

00:30:56.870 --> 00:30:59.002
Sorry, Joe.

00:30:59.002 --> 00:31:00.252
MARC COHEN: It's OK.

00:31:03.690 --> 00:31:05.350
ANDREW: My experience with the
start-up scripts is actually

00:31:05.350 --> 00:31:05.970
really great.

00:31:05.970 --> 00:31:10.180
And one of the features that
I really enjoyed was the

00:31:10.180 --> 00:31:13.580
metadata service so that you
can assign a key value

00:31:13.580 --> 00:31:19.270
metadata to individual
instances.

00:31:19.270 --> 00:31:21.410
And then there's a RESTful
interface for accessing those

00:31:21.410 --> 00:31:22.870
metadata values.

00:31:22.870 --> 00:31:27.950
And I actually ended up building
my service in my

00:31:27.950 --> 00:31:30.560
server daemon, the capability
to query that metadata.

00:31:30.560 --> 00:31:34.280
And so I was able to do live
configuration of my--

00:31:34.280 --> 00:31:39.920
I'm running services just by
using the Compute Engine API.

00:31:39.920 --> 00:31:41.500
So I don't know if you--

00:31:41.500 --> 00:31:46.110
that's probably a subject for
another Hangout, but I think

00:31:46.110 --> 00:31:49.160
that metadata capability is
really, really awesome.

00:31:49.160 --> 00:31:53.230
And I'm kind of partial to
using start-up scripts as

00:31:53.230 --> 00:32:00.070
opposed to building images
because I find that the

00:32:00.070 --> 00:32:02.040
ability to iterate on something
that is just built

00:32:02.040 --> 00:32:04.985
live every time is really
compelling to me.

00:32:04.985 --> 00:32:08.140
KATHRYN HURLEY: One thing I
found useful as far as images

00:32:08.140 --> 00:32:12.040
are concerned, though, is on
some of my instances--

00:32:12.040 --> 00:32:14.470
actually, the ones in the demo
that I had that created

00:32:14.470 --> 00:32:17.480
fractal image, I wanted
to install Java.

00:32:17.480 --> 00:32:19.860
And installing Java in the
start-up script did take a

00:32:19.860 --> 00:32:20.550
little bit of time.

00:32:20.550 --> 00:32:24.130
So having an image with Java
installed already did make a

00:32:24.130 --> 00:32:25.380
little bit faster.

00:32:27.110 --> 00:32:31.810
ANDREW: Yeah, well, I'm a Go
programmer, so deployment in

00:32:31.810 --> 00:32:34.490
Go is just shipping a binary, so
that's a non-issue for me.

00:32:37.142 --> 00:32:39.550
MARC COHEN: There's some really
nice things that just

00:32:39.550 --> 00:32:41.060
work in the start-up script.

00:32:41.060 --> 00:32:44.360
And I think a lot of it is that
the networking is set up

00:32:44.360 --> 00:32:47.380
to just do the right thing and
that you have access to root

00:32:47.380 --> 00:32:52.130
with sudo, and you have the
frictionless gsutil.

00:32:52.130 --> 00:32:54.995
All that stuff just being there
from the first second

00:32:54.995 --> 00:32:57.250
the instance comes up
is super powerful.

00:32:57.250 --> 00:33:00.090
So you want to install
a package in

00:33:00.090 --> 00:33:01.440
that start-up script.

00:33:01.440 --> 00:33:05.530
You do a sudo apt-get of some
package, and it just installs.

00:33:05.530 --> 00:33:07.810
There's no friction.

00:33:07.810 --> 00:33:11.930
So I would echo what
Andrew said.

00:33:11.930 --> 00:33:15.150
From my experience, it's a
really nice environment for

00:33:15.150 --> 00:33:18.840
iteratively building
these systems.

00:33:18.840 --> 00:33:24.300
ANDREW: And also, compared to
other virtual machine systems

00:33:24.300 --> 00:33:28.830
that I've used, the start-up
times for Compute Engine are

00:33:28.830 --> 00:33:30.140
really, really great.

00:33:30.140 --> 00:33:32.590
Like the turnaround time for
restarting an instance is

00:33:32.590 --> 00:33:38.270
usually between a minute
and 30 seconds, or

00:33:38.270 --> 00:33:40.950
less, in some cases.

00:33:40.950 --> 00:33:43.976
And that's just been awesome.

00:33:43.976 --> 00:33:47.500
MARC COHEN: I've been working on
a demo that involves 1,000

00:33:47.500 --> 00:33:51.270
VM cluster, and that's been
pretty important to me, the

00:33:51.270 --> 00:33:53.450
speed with which I can
start that cluster up

00:33:53.450 --> 00:33:54.700
and iterate on it.

00:33:54.700 --> 00:33:56.610
So I would agree.

00:33:56.610 --> 00:34:00.040
ANDREW: I wanted to ask a
question about the start-up

00:34:00.040 --> 00:34:01.650
scripts, though.

00:34:01.650 --> 00:34:04.950
Is it correct that they run
every time the instant starts?

00:34:04.950 --> 00:34:08.600
So if the instance restarts, the
setup script is run again?

00:34:08.600 --> 00:34:09.540
Is that correct?

00:34:09.540 --> 00:34:14.400
And is the ephemeral disk
totally wiped if

00:34:14.400 --> 00:34:16.150
the instance restarts?

00:34:16.150 --> 00:34:17.940
MARC COHEN: Well, it depends
what you mean by "restart." So

00:34:17.940 --> 00:34:23.050
a reboot will not wipe
the ephemeral disk.

00:34:23.050 --> 00:34:29.760
If the VM has some sort of
failure where it fails in a

00:34:29.760 --> 00:34:34.675
hard way, then the ephemeral
disk would be lost.

00:34:34.675 --> 00:34:37.530
JOE: So our behavior
then there is--

00:34:37.530 --> 00:34:40.770
I think it's natural for
actually how we develop

00:34:40.770 --> 00:34:41.500
software at Google.

00:34:41.500 --> 00:34:43.790
But I think it's a little bit
of a change from what people

00:34:43.790 --> 00:34:46.350
might be expecting from
outside of Google.

00:34:46.350 --> 00:34:50.889
Currently, when we see a failure
in a virtual machine--

00:34:50.889 --> 00:34:54.880
so this usually is a
software-hardware failure.

00:34:54.880 --> 00:34:58.160
And we're obviously working to
make sure that it's only a

00:34:58.160 --> 00:35:00.680
hardware failure and do what
we can to minimize that.

00:35:00.680 --> 00:35:03.540
But when that virtual machine
fails, we'll just restart it

00:35:03.540 --> 00:35:04.600
with the same parameters.

00:35:04.600 --> 00:35:09.930
So if you're looking at
something like the demo that

00:35:09.930 --> 00:35:13.460
you saw earlier, where you're
waiting on some sort of signal

00:35:13.460 --> 00:35:15.780
to do some work, or you're just
reading from a queue to

00:35:15.780 --> 00:35:17.600
just do some back work, that's
really a natural thing to do,

00:35:17.600 --> 00:35:19.460
that the VM will fail.

00:35:19.460 --> 00:35:21.870
It'll come back, and then it'll
start picking up a few

00:35:21.870 --> 00:35:24.320
items and start working on it.

00:35:24.320 --> 00:35:28.280
We're going to be looking to
provide expanded options in

00:35:28.280 --> 00:35:31.270
terms of communicating and
dealing with those failure

00:35:31.270 --> 00:35:32.610
situations in the future.

00:35:32.610 --> 00:35:34.480
That's one of the things that
we're looking at, figuring out

00:35:34.480 --> 00:35:36.318
what's the best way
to handle that?

00:35:36.318 --> 00:35:38.050
What's the best way to
communicate that stuff?

00:35:38.050 --> 00:35:40.070
What kind of other tools can
we provide around that?

00:35:40.070 --> 00:35:43.240
And things like booting off
a persistent disk that was

00:35:43.240 --> 00:35:46.280
mentioned earlier as a question
is definitely

00:35:46.280 --> 00:35:48.290
part of that plan.

00:35:48.290 --> 00:35:52.730
That being said, the only time
that you'll typically see a

00:35:52.730 --> 00:35:56.050
reboot of the virtual machine,
short of these failures, is

00:35:56.050 --> 00:35:58.420
that you type reboot from inside
the virtual machine.

00:35:58.420 --> 00:36:02.670
And in that case, you will
see the start-up

00:36:02.670 --> 00:36:04.390
script be run again.

00:36:04.390 --> 00:36:06.880
If you want to detect whether
you're actually seeing the

00:36:06.880 --> 00:36:09.660
first boot or the second boot,
with the start-up script, you

00:36:09.660 --> 00:36:12.770
can write a sentinel file
someplace on the file system

00:36:12.770 --> 00:36:14.970
to actually sort of say, oh,
I've been through this code

00:36:14.970 --> 00:36:17.530
path before, and detect that.

00:36:17.530 --> 00:36:19.660
One of the other things I want
to point out-- and I think

00:36:19.660 --> 00:36:21.800
this is documented in
our documentation.

00:36:21.800 --> 00:36:24.240
It's a really useful thing
for a start-up script.

00:36:24.240 --> 00:36:27.080
There's a safe format and
mount helper script that

00:36:27.080 --> 00:36:27.610
essentially--

00:36:27.610 --> 00:36:30.670
like we have this idea of
extended ephemeral disks or

00:36:30.670 --> 00:36:31.870
persistent disks.

00:36:31.870 --> 00:36:34.600
And if you want to mount these
things and format them, if

00:36:34.600 --> 00:36:36.870
they haven't already been
formatted, that's something

00:36:36.870 --> 00:36:38.660
that we provide a helper
script to do.

00:36:38.660 --> 00:36:40.750
And then that helps to prevent
data loss in case of one of

00:36:40.750 --> 00:36:43.990
these unexpected reboots for
both extended ephemeral disks

00:36:43.990 --> 00:36:46.240
or the persistent disk.

00:36:46.240 --> 00:36:48.310
And then also to help make sure
that you know which disk

00:36:48.310 --> 00:36:51.680
you're talking about when you
attach a persistent disk, you

00:36:51.680 --> 00:36:55.760
can actually provide an alias
that shows up in the dev file

00:36:55.760 --> 00:37:00.930
system so that instead of
knowing, oh, it's BDA, BDB, or

00:37:00.930 --> 00:37:05.070
SDA, FDB, or SDC, or whatever,
we actually create an alias

00:37:05.070 --> 00:37:08.760
there that makes it easy
to have stable

00:37:08.760 --> 00:37:09.540
connections to that.

00:37:09.540 --> 00:37:11.674
So that's another hint there.

00:37:11.674 --> 00:37:12.840
MARC COHEN: Cool.

00:37:12.840 --> 00:37:14.090
Thanks.

00:37:17.780 --> 00:37:18.200
Let's see.

00:37:18.200 --> 00:37:25.900
Next one is "How much visibility
do Google admins

00:37:25.900 --> 00:37:32.125
have into my machine?" That's
probably a Joe question.

00:37:32.125 --> 00:37:33.010
JOE: Very little.

00:37:33.010 --> 00:37:38.910
I mean, we've tried very hard
to make sure that we provide

00:37:38.910 --> 00:37:41.090
as many walls and protections
as we can.

00:37:41.090 --> 00:37:45.290
We really take customers' data
very, very seriously.

00:37:45.290 --> 00:37:47.450
This is one of the reasons
why we've done that

00:37:47.450 --> 00:37:51.340
encryption at rest.

00:37:51.340 --> 00:37:54.490
We do have access to the
machines, and the keys have to

00:37:54.490 --> 00:37:56.000
be stored someplace.

00:37:56.000 --> 00:38:02.140
But we have a lot of internal
control to make sure that

00:38:02.140 --> 00:38:06.340
before anybody takes a look at
that stuff, that all that

00:38:06.340 --> 00:38:10.320
stuff gets audited and that
very few people have

00:38:10.320 --> 00:38:12.860
permission to be able to do
anything that you could

00:38:12.860 --> 00:38:14.470
possibly get to that data.

00:38:14.470 --> 00:38:17.530
So we're very, very careful
about, and we really take

00:38:17.530 --> 00:38:19.820
great pains to make sure
that we limit as

00:38:19.820 --> 00:38:21.350
much access as possible.

00:38:21.350 --> 00:38:24.460
We actually segment and control
those keys very, very

00:38:24.460 --> 00:38:28.424
carefully, and we control access
very, very carefully.

00:38:28.424 --> 00:38:31.610
MARC COHEN: Here's another one
that may be for you, Joe.

00:38:31.610 --> 00:38:35.980
Somebody says, "Ive seen you
have custom-built images based

00:38:35.980 --> 00:38:37.540
on Ubuntu and CentOS.

00:38:37.540 --> 00:38:40.230
What has been changed on them,
and will people release them

00:38:40.230 --> 00:38:42.720
for our own servers?" And you
mentioned earlier that we've

00:38:42.720 --> 00:38:45.910
locked things down so that by
default, it kind of errs on

00:38:45.910 --> 00:38:49.245
the side of security, but
maybe you can share.

00:38:49.245 --> 00:38:52.130
JOE: So the first question,
what has been changed?

00:38:55.010 --> 00:38:58.840
We create these images by doing
a dev bootstrap from the

00:38:58.840 --> 00:39:00.450
ground up and just install--

00:39:00.450 --> 00:39:03.030
at least for Ubuntu, we
do a dev bootstrap up.

00:39:03.030 --> 00:39:06.590
For CentOS, I think we pick
an Iso and install it.

00:39:06.590 --> 00:39:09.010
And then we go through, and
we do make a bunch of

00:39:09.010 --> 00:39:09.810
modifications.

00:39:09.810 --> 00:39:12.080
Most of those things are
additive in terms of adding

00:39:12.080 --> 00:39:20.260
some extra scripts to be able to
run those start-up scripts

00:39:20.260 --> 00:39:25.920
or to customize the device file
system for those aliases

00:39:25.920 --> 00:39:27.930
that I mentioned earlier.

00:39:27.930 --> 00:39:30.120
One of the things that I'd like
to see us do is document

00:39:30.120 --> 00:39:33.280
exactly what we've changed there
and really get down to

00:39:33.280 --> 00:39:34.640
the details.

00:39:34.640 --> 00:39:37.770
In terms of releasing these
things, all the software

00:39:37.770 --> 00:39:41.670
that's available on these
images is available from

00:39:41.670 --> 00:39:44.550
either in-source form on the
images themselves, so we don't

00:39:44.550 --> 00:39:47.500
have any binaries deployed
there, and anything that's a

00:39:47.500 --> 00:39:53.200
binary is available via the
ways that you can download

00:39:53.200 --> 00:39:55.550
source from the distributions.

00:39:55.550 --> 00:39:58.520
So with respect to being able
to get the source for

00:39:58.520 --> 00:40:00.997
open-source software, that's the
way that we could go ahead

00:40:00.997 --> 00:40:01.320
and do that.

00:40:01.320 --> 00:40:04.430
In terms of releasing the images
themselves as a whole,

00:40:04.430 --> 00:40:06.490
that's not something that
we've thought about.

00:40:06.490 --> 00:40:08.385
It something that--

00:40:08.385 --> 00:40:10.130
it's a good piece of data.

00:40:10.130 --> 00:40:12.590
But most of the customizations
that we've made to these

00:40:12.590 --> 00:40:15.210
images are to make them work
well in the Compute Engine

00:40:15.210 --> 00:40:15.880
environment.

00:40:15.880 --> 00:40:18.362
So I'm not quite sure how much
sense it would make to have

00:40:18.362 --> 00:40:19.856
these things run elsewhere.

00:40:19.856 --> 00:40:20.700
MARC COHEN: Cool.

00:40:20.700 --> 00:40:23.090
Thanks, Joe.

00:40:23.090 --> 00:40:25.860
A business and investment
question.

00:40:25.860 --> 00:40:28.050
"Do you foresee App
Engine being

00:40:28.050 --> 00:40:30.600
cannibalized by Compute Engine?

00:40:30.600 --> 00:40:32.380
What should we be using?

00:40:32.380 --> 00:40:36.540
What should we be advising
clients?" I can take a crack

00:40:36.540 --> 00:40:37.420
at that, unless you
wanted to--

00:40:37.420 --> 00:40:38.600
KATHRYN HURLEY: Go ahead.

00:40:38.600 --> 00:40:40.090
Amy might have some
input, too.

00:40:40.090 --> 00:40:42.300
MARC COHEN: Yeah, we'll
ask Amy in a minute.

00:40:42.300 --> 00:40:44.440
My quick reaction
is not at all.

00:40:44.440 --> 00:40:47.700
In fact, we think that the
combination of the two

00:40:47.700 --> 00:40:49.140
products are awesome.

00:40:49.140 --> 00:40:54.820
There was a talk at I/O where
an engineer and a product

00:40:54.820 --> 00:40:59.370
manager showed a really cool
demo where the two products

00:40:59.370 --> 00:41:01.560
worked together really well.

00:41:01.560 --> 00:41:04.140
In my own experience, I've been
playing around with the

00:41:04.140 --> 00:41:06.350
combination of those
two a little bit.

00:41:06.350 --> 00:41:09.580
And App Engine works super
nicely as kind of an

00:41:09.580 --> 00:41:13.960
orchestrator of these virtual
machines in the back end.

00:41:13.960 --> 00:41:17.520
And it's almost like a similar
concept to the task queues or

00:41:17.520 --> 00:41:19.910
the App Engine back ends,
although those have different

00:41:19.910 --> 00:41:21.320
capabilities and different
features.

00:41:21.320 --> 00:41:24.520
But the quick answer is, I think
they work really well

00:41:24.520 --> 00:41:26.260
together and complement
each other.

00:41:26.260 --> 00:41:30.670
I don't know if Amy or anybody
else wanted to add to that.

00:41:30.670 --> 00:41:31.630
AMY: Yeah.

00:41:31.630 --> 00:41:33.000
Can you guys hear me?

00:41:33.000 --> 00:41:34.430
MARC COHEN: Might need to
speak up a little bit.

00:41:34.430 --> 00:41:35.510
Your audio's low.

00:41:35.510 --> 00:41:39.152
KATHRYN HURLEY: And Amy is
our App Engine expert.

00:41:39.152 --> 00:41:40.080
MARC COHEN: Right.

00:41:40.080 --> 00:41:41.330
Thanks.

00:41:43.372 --> 00:41:47.380
AMY: I just concur and
say that they're very

00:41:47.380 --> 00:41:49.415
complementary.

00:41:49.415 --> 00:41:51.760
And I'd recommend that
you check out

00:41:51.760 --> 00:41:53.220
the Google I/O session.

00:41:53.220 --> 00:41:54.500
It's very interesting.

00:41:54.500 --> 00:41:58.256
And one thing that we probably
don't have time to get into in

00:41:58.256 --> 00:42:04.620
this Hangout, but quite a nice
pattern, how Compute Engine

00:42:04.620 --> 00:42:11.040
instances were accessing tasks
on an App Engine pool queue to

00:42:11.040 --> 00:42:12.600
control what they were doing.

00:42:12.600 --> 00:42:18.330
And that's a very nice way
to view the interaction.

00:42:18.330 --> 00:42:25.976
And at the App Engine end,
there was also some load

00:42:25.976 --> 00:42:28.880
distribution, load
balancing of the

00:42:28.880 --> 00:42:30.030
Compute Engine instances.

00:42:30.030 --> 00:42:30.840
It was quite nice.

00:42:30.840 --> 00:42:33.715
It's sort of different levels
of abstraction.

00:42:33.715 --> 00:42:36.550
MARC COHEN: Maybe we can have a
session down the road a bit

00:42:36.550 --> 00:42:39.700
where we could perhaps work
with the App Engine, do a

00:42:39.700 --> 00:42:42.430
joint one of these sessions with
the App Engine team and

00:42:42.430 --> 00:42:46.512
just kind of focus on that
subject entirely.

00:42:46.512 --> 00:42:49.280
ANDREW: I can probably speak to
this a little bit as well,

00:42:49.280 --> 00:42:51.390
because the service I'm building
at the moment uses

00:42:51.390 --> 00:42:54.170
both App Engine and
Compute Engine.

00:42:54.170 --> 00:42:56.930
So just to give you a sort of
vague idea of the architecture

00:42:56.930 --> 00:42:59.840
and the division between each
is that it's essentially a

00:42:59.840 --> 00:43:02.510
game, a multiuser game.

00:43:02.510 --> 00:43:06.270
And so the user interface
is also served by

00:43:06.270 --> 00:43:09.010
the App Engine app.

00:43:09.010 --> 00:43:12.580
So users join a session, and the
sessions are all tracked

00:43:12.580 --> 00:43:13.960
in the App Engine data store.

00:43:13.960 --> 00:43:17.180
And scores and settings and all
that are tracked by App

00:43:17.180 --> 00:43:20.900
Engine, and static content
is also by App Engine.

00:43:20.900 --> 00:43:23.320
And then, when the users
actually start interacting

00:43:23.320 --> 00:43:26.380
with each other in real time,
they make web socket

00:43:26.380 --> 00:43:29.720
connections to Compute
Engine instances.

00:43:29.720 --> 00:43:34.480
So they're able to do real-time,
low-latency

00:43:34.480 --> 00:43:40.330
communication between players
but with all of the state and

00:43:40.330 --> 00:43:43.620
all of the sort of the typical
web-appy stuff is being

00:43:43.620 --> 00:43:45.030
handled by App Engine.

00:43:45.030 --> 00:43:48.030
And so there was a really nice
division there, and the

00:43:48.030 --> 00:43:49.930
respective APIs of each
made it really easy

00:43:49.930 --> 00:43:51.270
to construct this.

00:43:51.270 --> 00:43:54.950
And I look forward to sharing
it in more detail.

00:43:54.950 --> 00:43:57.090
We're going to open source it
and make it widely available.

00:43:57.090 --> 00:43:58.980
So that should be
a great example.

00:43:58.980 --> 00:44:00.440
MARC COHEN: That'd be awesome.

00:44:00.440 --> 00:44:02.940
And the other thing is, about 10
minutes ago, we just saw an

00:44:02.940 --> 00:44:06.940
example of an App Engine app
that orchestrated VMs.

00:44:06.940 --> 00:44:10.170
Because I think you mentioned,
Kathryn's app is App Engine

00:44:10.170 --> 00:44:15.830
based, and it works really
nicely that way.

00:44:15.830 --> 00:44:18.840
Can you show the test
sign-up links again?

00:44:18.840 --> 00:44:21.063
Maybe you can do
that while I--

00:44:21.063 --> 00:44:21.750
KATHRYN HURLEY: Yes.

00:44:21.750 --> 00:44:22.650
Let me just find that.

00:44:22.650 --> 00:44:23.430
MARC COHEN: --look
down the list for

00:44:23.430 --> 00:44:24.680
another question here.

00:44:29.540 --> 00:44:30.790
KATHRYN HURLEY: There we go.

00:44:35.988 --> 00:44:36.484
Oops.

00:44:36.484 --> 00:44:39.340
MARC COHEN: While you're doing
that, I'll just read off one

00:44:39.340 --> 00:44:42.340
of these. "Do you provide
an API so that I can

00:44:42.340 --> 00:44:44.430
programmatically manage my
compute instances?" Hopefully,

00:44:44.430 --> 00:44:48.420
everyone on this Hangout knows
the answer to that.

00:44:48.420 --> 00:44:50.600
And the answer is yes.

00:44:50.600 --> 00:44:53.600
APIs and client libraries, as
we discussed at length.

00:44:56.280 --> 00:44:59.960
"There is an interaction between
this product and all

00:44:59.960 --> 00:45:00.800
Google products.

00:45:00.800 --> 00:45:06.200
How?" That's a pretty
broad question.

00:45:06.200 --> 00:45:09.740
So Kathryn, thanks for putting
the sign-up link on there.

00:45:09.740 --> 00:45:12.160
So you can see the link up on
the screen right now, if

00:45:12.160 --> 00:45:15.930
you're interested in
that sign-up URL.

00:45:15.930 --> 00:45:18.280
Yes, there are many interactions
between this

00:45:18.280 --> 00:45:22.860
product and other
Google products.

00:45:22.860 --> 00:45:29.630
One that seems pretty clear is
the ability to use Google APIs

00:45:29.630 --> 00:45:31.940
from these virtual machines.

00:45:31.940 --> 00:45:35.810
So all the great stuff that
you know and love--

00:45:35.810 --> 00:45:44.470
Docs and Apps and the Data API
and Maps and everything should

00:45:44.470 --> 00:45:47.390
be usable from a VM.

00:45:47.390 --> 00:45:50.440
But the cloud APIs,
in particular, are

00:45:50.440 --> 00:45:52.110
all usable as well.

00:45:52.110 --> 00:45:54.930
And as we mentioned earlier,
we've taken pains to try to

00:45:54.930 --> 00:45:59.130
make some of that work more
easily by taking care of or

00:45:59.130 --> 00:46:02.500
minimizing some of the
complexity of the process of

00:46:02.500 --> 00:46:08.380
obtaining access tokens,
using the OAuth

00:46:08.380 --> 00:46:09.630
authority delegation mechanism.

00:46:13.140 --> 00:46:16.500
And we also talked about App
Engine interactions with

00:46:16.500 --> 00:46:17.380
Compute Engine.

00:46:17.380 --> 00:46:21.970
So there are lots of ways that
Compute Engine interacts with

00:46:21.970 --> 00:46:22.840
Google products.

00:46:22.840 --> 00:46:26.040
And one of the things we're
really excited about is for

00:46:26.040 --> 00:46:30.280
you guys to start mashing things
up in interesting and

00:46:30.280 --> 00:46:32.320
unique ways that maybe we
haven't even thought of yet.

00:46:37.200 --> 00:46:42.010
"Do you like Google?" Yes.

00:46:42.010 --> 00:46:44.630
KATHRYN HURLEY: That is one
of the questions on mine.

00:46:44.630 --> 00:46:46.300
MARC COHEN: That's a
pretty easy one.

00:46:46.300 --> 00:46:48.310
Obviously, we're getting
pretty far

00:46:48.310 --> 00:46:50.260
down on the list here.

00:46:50.260 --> 00:46:53.370
"Do you have any plans to allow
deployments to more data

00:46:53.370 --> 00:46:59.990
centers, for example, Europe and
Asia?" And we definitely

00:46:59.990 --> 00:47:04.420
want to expand our footprint,
but I'm not sure about what

00:47:04.420 --> 00:47:06.290
specifics we can talk
about at this point.

00:47:06.290 --> 00:47:10.440
I don't know, Joe, if you
know what we can say.

00:47:10.440 --> 00:47:13.110
JOE: I don't think we have
anything to really talk about

00:47:13.110 --> 00:47:13.600
right there.

00:47:13.600 --> 00:47:17.620
I mean, obviously, one of the
advantages of Compute Engine

00:47:17.620 --> 00:47:22.850
that we didn't have a chance to
touch on is the fact that

00:47:22.850 --> 00:47:25.360
it takes advantage of Google's
global footprint in a lot of

00:47:25.360 --> 00:47:29.990
ways, and specifically,
our network footprint.

00:47:29.990 --> 00:47:33.320
And one of the ways that this
manifests is that if you have

00:47:33.320 --> 00:47:36.450
a bunch of virtual machines in
different regions-- because

00:47:36.450 --> 00:47:38.210
right now, we have three
different regions

00:47:38.210 --> 00:47:40.020
with a zone in each.

00:47:40.020 --> 00:47:41.560
And they all sit on
a virtual network.

00:47:41.560 --> 00:47:45.220
They can talk to each other
across regions, even though

00:47:45.220 --> 00:47:49.320
those regions might be separated
by large distances.

00:47:49.320 --> 00:47:51.090
And we're going to look to
maintain that type of

00:47:51.090 --> 00:47:54.540
capability as we scale out
geographically, also.

00:47:54.540 --> 00:47:58.870
So as we do look to actually
have a larger footprint

00:47:58.870 --> 00:48:01.030
geographically, we want to
make sure that we make it

00:48:01.030 --> 00:48:03.680
really easy to integrate instead
of having to build a

00:48:03.680 --> 00:48:07.400
bunch of cross-region special
code to do that stuff.

00:48:07.400 --> 00:48:10.130
MARC COHEN: Cool.

00:48:10.130 --> 00:48:11.540
Here's an interesting
question.

00:48:11.540 --> 00:48:15.410
"Are the Google APIs accessed
from within Compute Engine

00:48:15.410 --> 00:48:19.830
over Google's internal network
or over public internet?

00:48:19.830 --> 00:48:24.815
Can you describe more which
traffic goes where?"

00:48:24.815 --> 00:48:27.920
JOE: So all connections between
a Compute Engine

00:48:27.920 --> 00:48:32.950
instance and any API go over,

00:48:32.950 --> 00:48:36.400
logically, the public internet.

00:48:36.400 --> 00:48:40.900
They go out through our gateway,
and Google sees them

00:48:40.900 --> 00:48:45.510
come back in with a
public IP address.

00:48:45.510 --> 00:48:48.420
So if you have an instance that
doesn't have a public IP

00:48:48.420 --> 00:48:51.550
address, it can access the
internet, including whether

00:48:51.550 --> 00:48:54.900
that be the cloud storage APIs
or whether that be the Compute

00:48:54.900 --> 00:48:57.090
Engine APIs or what have you.

00:48:57.090 --> 00:49:00.940
That being said, practically,
that data never leaves

00:49:00.940 --> 00:49:02.620
Google's networks.

00:49:02.620 --> 00:49:06.200
It just hairpins at a certain
point and comes right back in.

00:49:06.200 --> 00:49:09.200
In addition, most
of these APIs--

00:49:09.200 --> 00:49:12.710
all of these APIs, I believe--
are accessible over HTTPS.

00:49:12.710 --> 00:49:14.450
So if you're worried about
security and eavesdropping and

00:49:14.450 --> 00:49:16.860
things, you 't have to
worry about that.

00:49:16.860 --> 00:49:19.470
And we're actively monitoring,
making sure that we can

00:49:19.470 --> 00:49:23.340
provide the best performance
available, specifically

00:49:23.340 --> 00:49:27.740
between Compute Engine and
Google Cloud storage, because

00:49:27.740 --> 00:49:30.050
we know that the connection
there is really, really

00:49:30.050 --> 00:49:33.970
critical as people fill
out the applications.

00:49:33.970 --> 00:49:34.890
MARC COHEN: Thanks.

00:49:34.890 --> 00:49:37.310
And maybe we have--

00:49:37.310 --> 00:49:38.360
getting down to the wire here.

00:49:38.360 --> 00:49:41.560
One more question, maybe?

00:49:41.560 --> 00:49:44.330
"Do you provide--" no, we
already hit that one.

00:49:44.330 --> 00:49:47.230
"Would it be feasible to do
socket connections between App

00:49:47.230 --> 00:49:49.750
Engine and GCE?" I think we
touched on that one, too.

00:49:49.750 --> 00:49:52.560
Did you say you were
using web sockets,

00:49:52.560 --> 00:49:53.850
Andrew, in your Go app?

00:49:56.950 --> 00:49:57.840
So I think we--

00:49:57.840 --> 00:49:58.700
ANDREW: Yeah, that's right.

00:49:58.700 --> 00:49:59.830
MARC COHEN: --we
verified that.

00:49:59.830 --> 00:50:02.600
And yep, that's fully
supported.

00:50:02.600 --> 00:50:05.140
I think we're kind of out of
questions, but we're kind of

00:50:05.140 --> 00:50:08.208
out of time at the same time.

00:50:08.208 --> 00:50:09.470
KATHRYN HURLEY: So thanks,
again, everyone--

00:50:09.470 --> 00:50:11.870
MARC COHEN: Thanks to everybody
for participating.

00:50:11.870 --> 00:50:15.520
KATHRYN HURLEY: --that is
watching online, and everybody

00:50:15.520 --> 00:50:16.745
trying to hang out as well.

00:50:16.745 --> 00:50:17.500
Thanks.

00:50:17.500 --> 00:50:19.440
MARC COHEN: Thanks, folks.

00:50:19.440 --> 00:50:20.050
We'll do more.

00:50:20.050 --> 00:50:22.910
KATHRYN HURLEY: Yep,
stay tuned.

00:50:22.910 --> 00:50:24.160
We will.

00:50:38.510 --> 00:51:24.867
[MUSIC PLAYING]

