WEBVTT
Kind: captions
Language: en

00:00:02.340 --> 00:00:04.960
CHET HAASE: Good afternoon, and
welcome to the first session,

00:00:04.960 --> 00:00:05.460
right?

00:00:05.460 --> 00:00:07.440
What's New In Android?

00:00:07.440 --> 00:00:09.980
The session that I like
to think of as the Android

00:00:09.980 --> 00:00:11.900
keynote for the people
that couldn't actually

00:00:11.900 --> 00:00:14.420
wake up that early.

00:00:14.420 --> 00:00:17.549
So congratulations for
actually waking up this early.

00:00:17.549 --> 00:00:18.465
We'll see how it goes.

00:00:18.465 --> 00:00:18.965
[APPLAUSE]

00:00:18.965 --> 00:00:19.920
Yes, well done.

00:00:19.920 --> 00:00:21.440
Give yourselves a hand.

00:00:21.440 --> 00:00:22.275
Absolutely.

00:00:22.275 --> 00:00:23.650
This is a talk
that traditionally

00:00:23.650 --> 00:00:26.250
has been done by
me and Romain Guy,

00:00:26.250 --> 00:00:31.110
who could not make it this year
because we didn't ask him to.

00:00:31.110 --> 00:00:34.570
Though we did get an
appropriate stand-in for Romain.

00:00:34.570 --> 00:00:38.130
We found someone that can
fake a decent French accent.

00:00:38.130 --> 00:00:41.134
DAN SANDLER: [SPEAKING FRENCH]
Eiffel Tower.

00:00:41.134 --> 00:00:43.300
CHET HAASE: So with that,
let's introduce ourselves,

00:00:43.300 --> 00:00:45.300
because obviously you
have no idea who we are.

00:00:45.300 --> 00:00:46.440
I am Chet Haase.

00:00:46.440 --> 00:00:48.402
I am on the UI Toolkit
team in Android.

00:00:48.402 --> 00:00:49.610
DAN SANDLER: I'm Dan Sandler.

00:00:49.610 --> 00:00:52.254
I'm on the Android
System UI team.

00:00:52.254 --> 00:00:54.170
CHET HAASE: That accent
didn't last very long.

00:00:54.170 --> 00:00:54.710
DAN SANDLER: It didn't.

00:00:54.710 --> 00:00:55.550
I couldn't.

00:00:55.550 --> 00:00:57.500
CHET HAASE: All right, so one
of the questions that comes up--

00:00:57.500 --> 00:00:59.125
it just came up at
lunchtime, actually,

00:00:59.125 --> 00:01:01.510
down in the cafeteria-- is
OK, so there's an L release.

00:01:01.510 --> 00:01:03.130
What does L stand for?

00:01:03.130 --> 00:01:05.240
And I'm here to
tell you-- can we

00:01:05.240 --> 00:01:06.888
have like, a drum
roll, or something?

00:01:06.888 --> 00:01:10.720
[AUDIENCE ATTEMPTS DRUM ROLL]

00:01:10.720 --> 00:01:11.460
L if I know.

00:01:14.390 --> 00:01:18.950
But for today, we are calling
this the L Developer Preview

00:01:18.950 --> 00:01:19.450
release.

00:01:19.450 --> 00:01:21.180
We heard about this
in the keynote,

00:01:21.180 --> 00:01:24.700
and we can see by the graphics
on the screen that aren't quite

00:01:24.700 --> 00:01:28.120
professionally done that
it is not a final release.

00:01:28.120 --> 00:01:31.020
It is instead a preview release
where things work pretty well,

00:01:31.020 --> 00:01:32.460
but it's not done yet.

00:01:32.460 --> 00:01:34.790
We're hard at work
finishing the L release.

00:01:34.790 --> 00:01:36.960
And in the meantime,
we're exposing it to you

00:01:36.960 --> 00:01:39.850
to actually use in the meantime,
get your apps running and happy

00:01:39.850 --> 00:01:42.120
on it, and most
importantly, to send us

00:01:42.120 --> 00:01:44.750
feedback about what's not
working exactly perfectly

00:01:44.750 --> 00:01:46.841
so that we can actually
nail that down by the time

00:01:46.841 --> 00:01:47.340
we ship it.

00:01:47.340 --> 00:01:49.117
So in the meantime
today, we wanted

00:01:49.117 --> 00:01:50.950
to give a session talking
about all the bits

00:01:50.950 --> 00:01:53.060
that are new in
this preview release

00:01:53.060 --> 00:01:56.690
that you can get your
hands on and play with,

00:01:56.690 --> 00:01:58.980
and there's a lot
of material in here.

00:01:58.980 --> 00:02:00.000
We'll see how fast--

00:02:00.000 --> 00:02:02.000
DAN SANDLER: We have about
six hours of material

00:02:02.000 --> 00:02:04.460
to cover in 45 minutes, so
you're gonna have to hang on.

00:02:04.460 --> 00:02:05.876
CHET HAASE: So
first of all, let's

00:02:05.876 --> 00:02:07.491
start with graphics
and UI, because I

00:02:07.491 --> 00:02:08.949
like to start with
graphics and UI,

00:02:08.949 --> 00:02:11.370
and I usually like to
end with that as well.

00:02:11.370 --> 00:02:15.610
So we heard about the material
design stuff in the keynote,

00:02:15.610 --> 00:02:17.931
and we wanted to touch on
a couple of those elements

00:02:17.931 --> 00:02:18.430
in here.

00:02:18.430 --> 00:02:20.060
I also want to point
out, I'll give you

00:02:20.060 --> 00:02:21.797
references at the
end of this section,

00:02:21.797 --> 00:02:23.380
about where to go
for more information

00:02:23.380 --> 00:02:24.296
during the conference.

00:02:24.296 --> 00:02:26.320
In fact, one of the whole
points of this session

00:02:26.320 --> 00:02:29.242
is to give you just a little
bit more detailed info on all

00:02:29.242 --> 00:02:31.450
of the feature areas that
we find interesting to talk

00:02:31.450 --> 00:02:34.090
about, and also the
references to what

00:02:34.090 --> 00:02:36.600
other sessions and what other
videos you should check out,

00:02:36.600 --> 00:02:39.720
or sandboxes that have
further information,

00:02:39.720 --> 00:02:42.280
or where you can simply
find Diane on the show floor

00:02:42.280 --> 00:02:44.300
if you want to ask her directly.

00:02:44.300 --> 00:02:47.270
So in the material area,
we have a new theme,

00:02:47.270 --> 00:02:48.730
we have some new
widgets for you,

00:02:48.730 --> 00:02:50.840
and we also have
some new APIs, which

00:02:50.840 --> 00:02:52.160
you can use at your option.

00:02:52.160 --> 00:02:54.010
The theme exposes new colors.

00:02:54.010 --> 00:02:55.800
There's an idea
in material design

00:02:55.800 --> 00:02:58.464
that all the assets are
by default grayscale,

00:02:58.464 --> 00:02:59.630
and then they can be tinted.

00:02:59.630 --> 00:03:02.340
So it's very easy to
brand your application,

00:03:02.340 --> 00:03:04.550
or your application
state, with colors,

00:03:04.550 --> 00:03:07.697
as opposed to baking the colors
directly into the assets.

00:03:07.697 --> 00:03:08.780
So that's much easier now.

00:03:08.780 --> 00:03:10.394
There's new icons out there.

00:03:10.394 --> 00:03:11.810
Some of them are
animated, part of

00:03:11.810 --> 00:03:14.090
the rich interactive
experience that we have.

00:03:14.090 --> 00:03:16.910
With material design, we
have touch feedback ripples.

00:03:16.910 --> 00:03:19.820
We'll see a little bit
more about-- give the user

00:03:19.820 --> 00:03:21.500
a sense of interacting
with the UI

00:03:21.500 --> 00:03:25.250
and knowing exactly what's
going on in the UI at all times.

00:03:25.250 --> 00:03:28.150
And also, activity transitions
with shared hero elements.

00:03:28.150 --> 00:03:29.790
We'll see a little
bit more about that.

00:03:29.790 --> 00:03:31.620
In the widget space,
we have a couple

00:03:31.620 --> 00:03:32.780
of widgets that
are very important.

00:03:32.780 --> 00:03:33.655
One of them is minor.

00:03:33.655 --> 00:03:34.280
It's CardView.

00:03:34.280 --> 00:03:35.280
There's not a lot there.

00:03:35.280 --> 00:03:37.830
It's basically a container
with rounded corners,

00:03:37.830 --> 00:03:40.780
and it's raised up off the view
hierarchy plane a little bit

00:03:40.780 --> 00:03:42.549
to give a shadowed look to it.

00:03:42.549 --> 00:03:45.090
This is not something that's
too hard to do in your own code,

00:03:45.090 --> 00:03:49.110
but having CardView there
allows you to have this look

00:03:49.110 --> 00:03:51.750
and feel in a consistent way
that other applications are

00:03:51.750 --> 00:03:52.790
using it as well.

00:03:52.790 --> 00:03:55.144
RecyclerView is a
little bit larger.

00:03:55.144 --> 00:03:57.060
If we can actually just
do an informal poll of

00:03:57.060 --> 00:03:58.351
who has actually used ListView?

00:04:00.960 --> 00:04:01.750
OK.

00:04:01.750 --> 00:04:02.650
If I can just count.

00:04:02.650 --> 00:04:03.370
Hang on.

00:04:03.370 --> 00:04:05.540
OK, so that was basically
everyone in the audience.

00:04:05.540 --> 00:04:07.250
Now if we can get a
count of the people

00:04:07.250 --> 00:04:09.690
who have enjoyed
that experience?

00:04:09.690 --> 00:04:15.210
I count two, which is actually
one more than I expected.

00:04:15.210 --> 00:04:18.019
So you can think of
RecyclerView as being ListView2.

00:04:18.019 --> 00:04:20.339
This is more extensible,
more flexible.

00:04:20.339 --> 00:04:22.200
We have layout managers
that you can plug in

00:04:22.200 --> 00:04:23.550
to get different layouts.

00:04:23.550 --> 00:04:24.180
It's amazing.

00:04:24.180 --> 00:04:26.230
You can actually
linearly lay out

00:04:26.230 --> 00:04:28.820
both vertically
and horizontally.

00:04:28.820 --> 00:04:29.520
Incredible.

00:04:29.520 --> 00:04:30.975
[CHEERING]

00:04:30.975 --> 00:04:31.975
DAN SANDLER: Absolutely.

00:04:34.314 --> 00:04:35.980
CHET HAASE: Because
on the Android team,

00:04:35.980 --> 00:04:40.690
we think not only about why,
but also about X. So we have--

00:04:40.690 --> 00:04:41.960
[GROANING]

00:04:41.960 --> 00:04:44.320
We have a linear--
why the groan?

00:04:44.320 --> 00:04:46.544
We have a linear layout
manager in there right now.

00:04:46.544 --> 00:04:47.960
We have some other
layout managers

00:04:47.960 --> 00:04:49.490
that we're working on that
will come out with it,

00:04:49.490 --> 00:04:51.500
or you can write your own
custom layout manager.

00:04:51.500 --> 00:04:53.780
There's also animations
baked into it.

00:04:53.780 --> 00:04:55.980
Some very simple add remove
animations right now.

00:04:55.980 --> 00:04:57.480
I don't know if
anybody has actually

00:04:57.480 --> 00:04:59.730
tried to implement
animations in ListView.

00:04:59.730 --> 00:05:02.010
I know I personally have
done several videos trying

00:05:02.010 --> 00:05:04.590
to explain how to do this
nearly impossible task.

00:05:04.590 --> 00:05:07.880
What we'd like is for that
to simply be automatic,

00:05:07.880 --> 00:05:10.100
so we've started down
the road for that.

00:05:10.100 --> 00:05:12.180
And both of these,
most importantly,

00:05:12.180 --> 00:05:14.280
unlike a lot of the new
APIs, which are obviously

00:05:14.280 --> 00:05:16.020
just part of the L
release, these widgets

00:05:16.020 --> 00:05:18.250
are actually in the
support library in V7.

00:05:18.250 --> 00:05:19.320
So you can use those--

00:05:19.320 --> 00:05:24.025
[APPLAUSE]

00:05:24.025 --> 00:05:25.650
DAN SANDLER: How much
did you pay them?

00:05:25.650 --> 00:05:27.770
We're getting a lot of
applause lines here.

00:05:27.770 --> 00:05:29.190
CHET HAASE: I actually don't
know what they're clapping at.

00:05:29.190 --> 00:05:30.380
It has nothing to do
with what I'm saying.

00:05:30.380 --> 00:05:31.546
Something else is going on--

00:05:31.546 --> 00:05:33.880
DAN SANDLER: World Cup.

00:05:33.880 --> 00:05:36.774
CHET HAASE: So you can use those
in your material applications,

00:05:36.774 --> 00:05:38.440
in your L applications,
but you can also

00:05:38.440 --> 00:05:40.970
use them in code for
earlier releases as well.

00:05:40.970 --> 00:05:42.420
So have at it.

00:05:42.420 --> 00:05:45.020
Also, in the graphics area, we
have real time soft shadows.

00:05:45.020 --> 00:05:47.020
We heard a little bit
about that in the keynote.

00:05:47.020 --> 00:05:49.210
We'll hear more tomorrow
in some sessions tomorrow.

00:05:49.210 --> 00:05:52.170
It's the ability to give
elevation to views to pop them

00:05:52.170 --> 00:05:54.180
up off the view hierarchy plane.

00:05:54.180 --> 00:05:56.550
Not only giving them
elevation and Z value,

00:05:56.550 --> 00:06:00.070
and then allowing them to cast
a shadow, a soft shadow based

00:06:00.070 --> 00:06:02.460
on that elevation, but also
to draw outside their bounds.

00:06:02.460 --> 00:06:05.050
One of the tricky parts about
doing things like shadows

00:06:05.050 --> 00:06:06.949
is, or if you want to
scale that view, well,

00:06:06.949 --> 00:06:08.490
then you need to
tell the containment

00:06:08.490 --> 00:06:10.350
hierarchy of that
view not to clip it.

00:06:10.350 --> 00:06:13.100
Well, giving it elevation pops
it into-- what you can picture

00:06:13.100 --> 00:06:15.154
is like an aquarium,
a 3D volume that

00:06:15.154 --> 00:06:16.570
sits on top of the
view hierarchy.

00:06:16.570 --> 00:06:18.940
And all of a sudden, you've
got much more flexibility

00:06:18.940 --> 00:06:21.430
about how that thing is
drawn, about how it's clipped,

00:06:21.430 --> 00:06:23.990
and about the ordering with
which it and its shadow

00:06:23.990 --> 00:06:26.600
is drawn in the hierarchy.

00:06:26.600 --> 00:06:27.990
We have animations.

00:06:27.990 --> 00:06:29.920
Yay, more animation stuff.

00:06:29.920 --> 00:06:32.692
The biggest one in this area
is activity transitions--

00:06:32.692 --> 00:06:34.150
in particular, the
ability to share

00:06:34.150 --> 00:06:35.940
elements between activities.

00:06:35.940 --> 00:06:37.511
So we've seen some work.

00:06:37.511 --> 00:06:40.010
I think it was last year at I/O
there was an animation talk,

00:06:40.010 --> 00:06:41.718
and there was some
"DevBytes" around this

00:06:41.718 --> 00:06:44.370
where we showed techniques
for passing information

00:06:44.370 --> 00:06:46.830
between activities such that
you could pass information

00:06:46.830 --> 00:06:49.670
about elements, and you could
sort of fake this animation

00:06:49.670 --> 00:06:51.610
to look like it
transitions seamlessly

00:06:51.610 --> 00:06:53.060
from one activity to another.

00:06:53.060 --> 00:06:55.600
So that technique has been
baked into the platform,

00:06:55.600 --> 00:06:58.500
so there's a standard
API way for you

00:06:58.500 --> 00:07:00.600
to say this is my shared
[INAUDIBLE] element,

00:07:00.600 --> 00:07:03.020
or a set of shared
elements, and you

00:07:03.020 --> 00:07:04.610
can pass those
between activities,

00:07:04.610 --> 00:07:05.610
and they can share them.

00:07:05.610 --> 00:07:07.600
They can animate them
between the activities.

00:07:07.600 --> 00:07:10.260
You can animate other items in
and out between the activities,

00:07:10.260 --> 00:07:12.350
and you can customize
the entire experience,

00:07:12.350 --> 00:07:16.360
making it all part of the
material idea of making all

00:07:16.360 --> 00:07:18.240
the transitions
seamless for the user

00:07:18.240 --> 00:07:21.190
as they go from state to state
to state in their application,

00:07:21.190 --> 00:07:22.980
or in your application.

00:07:22.980 --> 00:07:26.200
Also, there's new animation
curve capabilities, both motion

00:07:26.200 --> 00:07:28.400
and timing curves,
so you can have

00:07:28.400 --> 00:07:32.020
a much more custom path-based
curve in the timing area.

00:07:32.020 --> 00:07:33.907
You can also move
things in x and y

00:07:33.907 --> 00:07:35.740
along a curve, which
is a little bit tricky.

00:07:35.740 --> 00:07:37.510
Possible, but tricky before.

00:07:37.510 --> 00:07:39.645
And finally, there's
animated reveal capabilities.

00:07:39.645 --> 00:07:43.150
So you can reveal the next
state of an activity or a view

00:07:43.150 --> 00:07:47.580
by having a circular reveal
that exposes it over time.

00:07:47.580 --> 00:07:50.330
And I think there's a video
of some of this stuff.

00:07:50.330 --> 00:07:55.010
So this is sort of an
epilepsy-causing animation

00:07:55.010 --> 00:07:57.745
here that I looped, just showing
some of the shared element

00:07:57.745 --> 00:08:00.120
transition stuff where we're
popping the view in and out.

00:08:00.120 --> 00:08:01.850
If you look closely,
you can see a shadow

00:08:01.850 --> 00:08:03.430
that's popped as
we're elevating it.

00:08:03.430 --> 00:08:05.596
And then as it goes back
down to the view hierarchy,

00:08:05.596 --> 00:08:08.520
we launch the next activity
and pass that view over

00:08:08.520 --> 00:08:12.340
as the shared element between
these two separate activities.

00:08:12.340 --> 00:08:14.324
We have some new
icon capabilities.

00:08:14.324 --> 00:08:15.740
There's a couple
of different ways

00:08:15.740 --> 00:08:17.840
of animating states in icons.

00:08:17.840 --> 00:08:20.570
One of them you see in the
check boxes and radio buttons,

00:08:20.570 --> 00:08:22.930
the ability to basically
animate key frames,

00:08:22.930 --> 00:08:25.430
or these images that
represent an animation

00:08:25.430 --> 00:08:27.290
from one state to another.

00:08:27.290 --> 00:08:29.877
And there's another one
called StateListAnimator,

00:08:29.877 --> 00:08:31.710
where when you go from
one state to another,

00:08:31.710 --> 00:08:33.460
you can specify a
custom animation that

00:08:33.460 --> 00:08:35.210
will animate
properties over time.

00:08:35.210 --> 00:08:37.299
And then finally, we have
touch feedback ripples,

00:08:37.299 --> 00:08:40.974
which gives the user indication
of what's going on in the UI

00:08:40.974 --> 00:08:42.140
when they press that button.

00:08:42.140 --> 00:08:44.140
It's not simply going
from unpressed to pressed,

00:08:44.140 --> 00:08:45.848
but it's actually
giving them information

00:08:45.848 --> 00:08:48.120
about the gradual state
change that's occurring,

00:08:48.120 --> 00:08:50.397
as well as possibly where
that state change occurred.

00:08:50.397 --> 00:08:51.980
So if we look at the
video here, let's

00:08:51.980 --> 00:08:55.280
see if-- that is really
hard to see on this screen.

00:08:55.280 --> 00:08:58.100
There's some subtle ripples
on the button down below,

00:08:58.100 --> 00:08:59.800
and you can see the
ripples are actually

00:08:59.800 --> 00:09:01.590
emanating from the
touch point that I

00:09:01.590 --> 00:09:05.410
had when I touched this
beautiful button in my UI.

00:09:05.410 --> 00:09:08.340
And then the check box
up at the top, that's

00:09:08.340 --> 00:09:10.482
one of the animated
PNG animations

00:09:10.482 --> 00:09:12.440
that we have for the
AnimatedStateListDrawable.

00:09:15.060 --> 00:09:15.857
And render thread.

00:09:15.857 --> 00:09:17.690
So this is kind of an
implementation detail,

00:09:17.690 --> 00:09:19.106
but it's a really
interesting one,

00:09:19.106 --> 00:09:20.670
so I'm going to talk
about it anyway.

00:09:20.670 --> 00:09:23.580
And it's also important, and
probably increasingly important

00:09:23.580 --> 00:09:25.430
as we go forward,
for performance.

00:09:25.430 --> 00:09:28.810
One of the issues that we
have with UI and graphics

00:09:28.810 --> 00:09:32.240
animations, and performance
in UIs in general and Android,

00:09:32.240 --> 00:09:35.830
is that everything needs to stay
on the UI toolkit thread, which

00:09:35.830 --> 00:09:38.400
means if you're doing
something silly like querying

00:09:38.400 --> 00:09:42.420
a web service on your UI
thread, A, don't, and B,

00:09:42.420 --> 00:09:44.010
you're going to freeze your UI.

00:09:44.010 --> 00:09:46.570
And C, see A before.

00:09:46.570 --> 00:09:47.550
Don't do that.

00:09:47.550 --> 00:09:49.890
But you can get yourself
into these positions,

00:09:49.890 --> 00:09:53.474
in some cases
necessarily, because that

00:09:53.474 --> 00:09:55.640
is an operation we need to
perform in the UI toolkit

00:09:55.640 --> 00:09:58.550
thread, and therefore
everything else happening halts.

00:09:58.550 --> 00:10:02.580
A really great example of that
is when you launch an activity,

00:10:02.580 --> 00:10:04.980
then we need to inflate
that new activity

00:10:04.980 --> 00:10:07.524
if you're in the same process
on the UI toolkit thread.

00:10:07.524 --> 00:10:09.940
Well, in the meantime, if
you're running an animation that

00:10:09.940 --> 00:10:12.120
also needs to run in
the UI toolkit thread,

00:10:12.120 --> 00:10:13.690
then that animation
is going to stop

00:10:13.690 --> 00:10:15.400
while the activity launches.

00:10:15.400 --> 00:10:18.000
So we came along with the
render thread technology

00:10:18.000 --> 00:10:21.856
to be able to break apart the
two processes of rendering.

00:10:21.856 --> 00:10:24.230
There's the creating the
display list of what we actually

00:10:24.230 --> 00:10:25.938
want to render, and
then there's actually

00:10:25.938 --> 00:10:28.400
executing that display
list and telling the GPU

00:10:28.400 --> 00:10:29.420
how to draw this stuff.

00:10:29.420 --> 00:10:30.750
And we broke these two apart.

00:10:30.750 --> 00:10:32.530
So we create it on
the UI toolkit thread,

00:10:32.530 --> 00:10:34.670
where it necessarily
has to be, and then we

00:10:34.670 --> 00:10:37.140
pass that information over
the wall to the render thread

00:10:37.140 --> 00:10:39.140
to let it actually execute
and talk to the GPU

00:10:39.140 --> 00:10:40.210
on a separate thread.

00:10:40.210 --> 00:10:41.760
In particular,
what we want to do

00:10:41.760 --> 00:10:45.050
is take these atomic
animations and send them over

00:10:45.050 --> 00:10:48.140
so they can perform completely
autonomously on the render

00:10:48.140 --> 00:10:51.270
thread so that now you're not
beholden to the state of the UI

00:10:51.270 --> 00:10:53.660
toolkit thread if you
are inflating an activity

00:10:53.660 --> 00:10:56.220
or doing an expensive operation,
because the animations can

00:10:56.220 --> 00:10:58.910
happen asynchronously
at the same time.

00:10:58.910 --> 00:11:00.660
So we've started down
that path right now.

00:11:00.660 --> 00:11:02.740
There's going to be more
work going forward on that.

00:11:02.740 --> 00:11:04.320
A great visual
example of that right

00:11:04.320 --> 00:11:06.544
now is the touch
feedback ripples,

00:11:06.544 --> 00:11:07.960
which happen on
the render thread,

00:11:07.960 --> 00:11:11.140
and they happen completely
autonomous of the UI toolkit

00:11:11.140 --> 00:11:13.470
thread, which is why when
you click on something that

00:11:13.470 --> 00:11:16.260
launches a new activity, the
ripple continues to actually

00:11:16.260 --> 00:11:19.800
animate while the new
activity window is coming up.

00:11:19.800 --> 00:11:21.420
There's some important
I/O talks where

00:11:21.420 --> 00:11:25.060
we go into a lot more gory
detail in a lot of this stuff,

00:11:25.060 --> 00:11:27.312
so I would suggest that
you check those out.

00:11:27.312 --> 00:11:29.020
Some of them are, of
course, the material

00:11:29.020 --> 00:11:30.590
design talks themselves.

00:11:30.590 --> 00:11:32.610
They're scattered
throughout the conference,

00:11:32.610 --> 00:11:34.694
and I frankly didn't look
up the names and titles,

00:11:34.694 --> 00:11:35.901
so they're not on this slide.

00:11:35.901 --> 00:11:37.490
There are two
sessions in particular

00:11:37.490 --> 00:11:39.680
that go into the
more techie details.

00:11:39.680 --> 00:11:41.750
One is called Material
Science-- this

00:11:41.750 --> 00:11:43.810
is tomorrow morning at
11:00-- and the other

00:11:43.810 --> 00:11:45.500
is Material Witness.

00:11:45.500 --> 00:11:47.562
Material Science is
an overview of sort

00:11:47.562 --> 00:11:50.182
of the entire space, kind of
a deeper dive of everything

00:11:50.182 --> 00:11:51.140
I've just talked about.

00:11:51.140 --> 00:11:53.510
And Material Witness
is a use case

00:11:53.510 --> 00:11:56.130
where Romain and I wrote
particular apps using

00:11:56.130 --> 00:11:58.650
these APIs and then talk
about how they were actually

00:11:58.650 --> 00:12:00.660
implemented and how
the technology works.

00:12:00.660 --> 00:12:02.230
The sessions in
your schedule right

00:12:02.230 --> 00:12:03.605
now probably have
different names

00:12:03.605 --> 00:12:05.340
because we were
withholding the material

00:12:05.340 --> 00:12:07.548
name until after the keynote,
but the real names will

00:12:07.548 --> 00:12:09.020
be out there very soon.

00:12:09.020 --> 00:12:10.520
So check those out,
and there's also

00:12:10.520 --> 00:12:13.780
an I/O Byte on activity
transitions in particular

00:12:13.780 --> 00:12:15.785
that you can check out as well.

00:12:15.785 --> 00:12:18.160
In Support Lib, there's the
RecyclerView and the CardView

00:12:18.160 --> 00:12:19.243
stuff that I talked about.

00:12:19.243 --> 00:12:21.980
There's also other capabilities,
including palette capabilities

00:12:21.980 --> 00:12:23.790
for doing color sampling stuff.

00:12:23.790 --> 00:12:25.709
This was mentioned
in the keynote.

00:12:25.709 --> 00:12:27.500
Matias was talking
about that this morning.

00:12:27.500 --> 00:12:29.140
There's RoundedBitmapDrawable.

00:12:29.140 --> 00:12:31.460
This comes into play in
things like CardView.

00:12:31.460 --> 00:12:32.310
It's very useful.

00:12:32.310 --> 00:12:33.250
ViewPropertyAnimator.

00:12:33.250 --> 00:12:34.999
This was done as more
of an implementation

00:12:34.999 --> 00:12:38.600
detail of getting RecyclerView
animations to work.

00:12:38.600 --> 00:12:43.430
And NotificationCompat is
useful for Android Wear stuff.

00:12:43.430 --> 00:12:48.200
And we're onto WebView, where
we have updated to Chromium,

00:12:48.200 --> 00:12:52.280
build M36, which enables
various useful web standards,

00:12:52.280 --> 00:12:54.217
so you now have WebGL,
and the other things

00:12:54.217 --> 00:12:55.050
listed on the slide.

00:12:55.050 --> 00:12:56.730
Check out the I/O
Byte "What's New In

00:12:56.730 --> 00:12:59.340
WebView" for more
detailed information.

00:12:59.340 --> 00:13:02.410
On the graphic side,
there is an update

00:13:02.410 --> 00:13:07.460
to OpenGL ES 3.1 with new
compute shaders and new shader

00:13:07.460 --> 00:13:09.810
language capabilities.

00:13:09.810 --> 00:13:13.210
We have bindings in
the SDK as well as NDK,

00:13:13.210 --> 00:13:15.715
and obviously it's backward
compatible with OpenGL ES

00:13:15.715 --> 00:13:18.660
2 and 3, as they usually are.

00:13:18.660 --> 00:13:21.470
And you can say use
feature in your manifest

00:13:21.470 --> 00:13:23.550
to specify this version exactly.

00:13:23.550 --> 00:13:25.050
The other important
thing to mention

00:13:25.050 --> 00:13:27.110
was also mentioned by
Dave Burke in the keynote.

00:13:27.110 --> 00:13:28.530
It's the Android extension pack.

00:13:28.530 --> 00:13:31.830
We basically collected a bunch
of extensions that are really

00:13:31.830 --> 00:13:35.450
useful and powerful together and
sort of bring the platform up

00:13:35.450 --> 00:13:39.440
to the current state of,
say, console gaming hardware.

00:13:39.440 --> 00:13:41.030
And all of these
come as a bundle,

00:13:41.030 --> 00:13:42.980
and we're working with
partners to enable

00:13:42.980 --> 00:13:44.689
one and all of these
extensions together.

00:13:44.689 --> 00:13:46.854
And there will probably be
a mechanism in the future

00:13:46.854 --> 00:13:49.090
for you to ask for this
particular capability, which

00:13:49.090 --> 00:13:51.820
basically gives you the
whole sandbox of capabilities

00:13:51.820 --> 00:13:52.970
altogether.

00:13:52.970 --> 00:13:55.860
Lots of useful stuff in
there, including tessellation,

00:13:55.860 --> 00:13:59.110
enhanced geometry shaders,
and texture compression

00:13:59.110 --> 00:14:01.160
would be nice.

00:14:01.160 --> 00:14:02.320
Camera and audio space.

00:14:02.320 --> 00:14:04.445
There's a couple of talks
I would suggest you go to

00:14:04.445 --> 00:14:06.810
for the actual details
on this, but some image

00:14:06.810 --> 00:14:12.940
processing capabilities, also
some audio data type buffering

00:14:12.940 --> 00:14:14.890
information that I
couldn't possibly address,

00:14:14.890 --> 00:14:16.240
because I don't know.

00:14:16.240 --> 00:14:19.110
So I would suggest that you
go to the talks instead.

00:14:19.110 --> 00:14:21.445
And in the meantime,
listen to Dan.

00:14:21.445 --> 00:14:23.070
DAN SANDLER: You can
take a breath now.

00:14:23.070 --> 00:14:23.700
CHET HAASE: Yay.

00:14:23.700 --> 00:14:24.491
DAN SANDLER: Right.

00:14:24.491 --> 00:14:27.360
So related to the audio
is a whole new set of APIs

00:14:27.360 --> 00:14:29.660
to effectively replace
RemoteControlClient.

00:14:29.660 --> 00:14:31.119
If you've ever
built a media player

00:14:31.119 --> 00:14:32.826
and you've dealt with
transport controls,

00:14:32.826 --> 00:14:34.520
you know about
RemoteControlClient.

00:14:34.520 --> 00:14:37.030
Here to the rescue is
MediaSession and its friend

00:14:37.030 --> 00:14:37.720
MediaController.

00:14:37.720 --> 00:14:40.650
These are two new classes
and a bunch of other support

00:14:40.650 --> 00:14:45.370
code in the platform to allow
you to make multiple playback

00:14:45.370 --> 00:14:47.510
sources, and multiple
transport controllers,

00:14:47.510 --> 00:14:48.635
and wire them all together.

00:14:48.635 --> 00:14:50.135
The nice thing about
MediaController

00:14:50.135 --> 00:14:51.942
is that it works from
a non-UI process,

00:14:51.942 --> 00:14:54.150
so you can be running this
entirely in the background

00:14:54.150 --> 00:14:57.430
if you need to do control of
an ongoing playback stream

00:14:57.430 --> 00:14:59.930
from there, extract
metadata, things like that.

00:14:59.930 --> 00:15:01.670
And we use that in
the system UI as well.

00:15:01.670 --> 00:15:03.878
We'll talk about that a
little bit later in the talk.

00:15:03.878 --> 00:15:08.250
MediaSession hooks up
to your playback stream

00:15:08.250 --> 00:15:11.730
and essentially handles those
transport control requests

00:15:11.730 --> 00:15:14.055
in much the same way that
you're already accustomed to.

00:15:14.055 --> 00:15:15.750
And you'll talk to the
MediaSession manager

00:15:15.750 --> 00:15:16.541
to work with those.

00:15:16.541 --> 00:15:18.806
Great new tools, all on
android.media.session.

00:15:18.806 --> 00:15:21.022
So you want to check those out.

00:15:21.022 --> 00:15:23.480
I will segue from here into
all the other good stuff that's

00:15:23.480 --> 00:15:26.641
in the framework, if it doesn't
fall under the green category.

00:15:26.641 --> 00:15:28.640
CHET HAASE: It's the
non-visual framework stuff.

00:15:28.640 --> 00:15:29.550
DAN SANDLER: That's
right, except that I'm

00:15:29.550 --> 00:15:30.760
sure there's going to
some visual stuff here,

00:15:30.760 --> 00:15:32.134
like right here
at the beginning.

00:15:32.134 --> 00:15:33.440
So recent documents and tasks.

00:15:33.440 --> 00:15:35.640
You saw this in the keynote.

00:15:35.640 --> 00:15:39.780
Our recent apps interface in the
system UI is not just for apps

00:15:39.780 --> 00:15:40.280
anymore.

00:15:40.280 --> 00:15:42.827
We're now encouraging
your app to break apart

00:15:42.827 --> 00:15:44.410
different components
of the experience

00:15:44.410 --> 00:15:46.449
into different
tasks or documents.

00:15:46.449 --> 00:15:48.740
We sort of call this a more
document-centric interface.

00:15:48.740 --> 00:15:50.340
So you see in the
screen shot here

00:15:50.340 --> 00:15:54.896
we've got a couple of
different web sessions,

00:15:54.896 --> 00:15:56.770
essentially web documents
that are showing up

00:15:56.770 --> 00:15:58.800
as different cards in
the recents experience.

00:15:58.800 --> 00:16:01.170
And so this gives the user
a much greater ability

00:16:01.170 --> 00:16:05.930
to shift back and forth between
different tasks on one device.

00:16:05.930 --> 00:16:06.440
Go ahead.

00:16:06.440 --> 00:16:07.856
CHET HAASE: Yeah,
I was gonna say,

00:16:07.856 --> 00:16:10.734
this came up in the keynote when
they were talking about Chrome.

00:16:10.734 --> 00:16:12.150
There was a web
session where they

00:16:12.150 --> 00:16:13.830
were talking about different
tabs in the recents,

00:16:13.830 --> 00:16:15.400
and this is the capability
that enables that.

00:16:15.400 --> 00:16:15.730
DAN SANDLER: That's right.

00:16:15.730 --> 00:16:17.840
So you can start a new
document at any time

00:16:17.840 --> 00:16:19.702
by throwing in
Flag_Activity_New_Document

00:16:19.702 --> 00:16:20.410
into that intent.

00:16:20.410 --> 00:16:22.774
You can also mark your activity
that way in the manifest

00:16:22.774 --> 00:16:24.940
to say this is always going
to start a new document.

00:16:24.940 --> 00:16:26.731
Lots of other APIs that
we didn't have room

00:16:26.731 --> 00:16:27.950
for on the slide.

00:16:27.950 --> 00:16:30.160
You should definitely
check it out.

00:16:30.160 --> 00:16:32.594
Also in the system
UI, you can now

00:16:32.594 --> 00:16:33.760
do more with the status bar.

00:16:33.760 --> 00:16:36.260
In KitKat, we introduced
a translucent status bar,

00:16:36.260 --> 00:16:39.440
which was great for wallpaper
experiences and things that

00:16:39.440 --> 00:16:40.460
wanted to go full bleed.

00:16:40.460 --> 00:16:42.210
The problem that
we struggled with

00:16:42.210 --> 00:16:45.610
was that gradient that we put in
there to protect the status bar

00:16:45.610 --> 00:16:48.920
and navigation icons didn't
work great in every situation.

00:16:48.920 --> 00:16:50.000
It's not a lot of space.

00:16:50.000 --> 00:16:51.420
We didn't want to
overlap the app window.

00:16:51.420 --> 00:16:54.060
We didn't know what was going
to be in the app window region.

00:16:54.060 --> 00:16:55.624
So in the L Developer
preview, you'll

00:16:55.624 --> 00:16:57.540
be able to see that you
can do a lot of things

00:16:57.540 --> 00:16:59.530
with the status bar that
you couldn't do before,

00:16:59.530 --> 00:17:01.280
particularly change
the color to something

00:17:01.280 --> 00:17:05.230
that matches your application's
color branding, and so forth.

00:17:05.230 --> 00:17:07.440
You can use a solid
color there, or you

00:17:07.440 --> 00:17:10.849
can use a completely
transparent status bar,

00:17:10.849 --> 00:17:12.742
and then it's up
to you to make sure

00:17:12.742 --> 00:17:15.200
that all the status bar icons,
all the navigation bar icons

00:17:15.200 --> 00:17:15.920
still look great.

00:17:15.920 --> 00:17:17.711
But as you can see here
in the screen shot,

00:17:17.711 --> 00:17:19.980
that gives us the opportunity
in Google Now Launcher

00:17:19.980 --> 00:17:24.457
to create a nice, long gradient
that both protects the icon

00:17:24.457 --> 00:17:26.040
so the user can see
them and gives you

00:17:26.040 --> 00:17:27.940
a really nice transition
into the content.

00:17:27.940 --> 00:17:29.980
Check it out.

00:17:29.980 --> 00:17:32.060
You heard about power
a bunch in the keynote.

00:17:32.060 --> 00:17:33.810
And we'll talk a little
bit about it here.

00:17:33.810 --> 00:17:35.935
There's so much more to
look into under the heading

00:17:35.935 --> 00:17:38.606
of Project Volta.

00:17:38.606 --> 00:17:40.980
The first thing you'll see is
that there's a battery stat

00:17:40.980 --> 00:17:43.100
service that you can
ask from ADB to give you

00:17:43.100 --> 00:17:45.560
all kinds of gory details
about where the power is

00:17:45.560 --> 00:17:47.860
going on the system,
what kind of power events

00:17:47.860 --> 00:17:50.000
there have been, and
break it down by UID,

00:17:50.000 --> 00:17:53.960
as well as looking
at the global story.

00:17:53.960 --> 00:17:56.584
There's a tool in the SDK
called Battery Historian, which

00:17:56.584 --> 00:17:58.500
I believe Dave Burke
mentioned, that gives you

00:17:58.500 --> 00:18:00.974
sort of a trace view
like HTML graph output.

00:18:00.974 --> 00:18:03.390
You feed it a bug report, and
it will tell you essentially

00:18:03.390 --> 00:18:06.710
what happened to
all of the power

00:18:06.710 --> 00:18:08.330
in that device
over that session.

00:18:08.330 --> 00:18:10.910
It's incredibly,
incredibly useful.

00:18:10.910 --> 00:18:14.540
Just a quick example of how
to talk to these things,

00:18:14.540 --> 00:18:16.420
you can talk to batterystats
and say, oh, you

00:18:16.420 --> 00:18:19.520
want to turn it on, you want
to enable the full history,

00:18:19.520 --> 00:18:21.420
clear out all the stats,
take a bug report,

00:18:21.420 --> 00:18:23.128
and then you stuff it
into the historian,

00:18:23.128 --> 00:18:25.300
and you get out this
great piece of graphics

00:18:25.300 --> 00:18:28.610
that you can use to understand
where those coulombs went.

00:18:28.610 --> 00:18:30.110
Another thing that
helps with power,

00:18:30.110 --> 00:18:31.690
and this was also touched on
a little bit in the keynote,

00:18:31.690 --> 00:18:32.520
is JobScheduler.

00:18:32.520 --> 00:18:34.325
We're going to go a
little bit deeper here.

00:18:34.325 --> 00:18:35.741
It's pretty common
that you've got

00:18:35.741 --> 00:18:37.570
an app that wants to
do some work later--

00:18:37.570 --> 00:18:40.057
sometime in the background,
sometime when it's plugged in,

00:18:40.057 --> 00:18:42.390
sometime when you have access
to an unmetered high speed

00:18:42.390 --> 00:18:43.140
network.

00:18:43.140 --> 00:18:44.330
So you can do all
this today, right?

00:18:44.330 --> 00:18:45.496
You probably do in your app.

00:18:45.496 --> 00:18:47.610
You wake up periodically,
check the conditions,

00:18:47.610 --> 00:18:50.747
and then go back to sleep if
the situation isn't right.

00:18:50.747 --> 00:18:52.330
That's not super
efficient because you

00:18:52.330 --> 00:18:54.204
are waking up the device
just to check to see

00:18:54.204 --> 00:18:56.110
if it's a good time
to wake up the device.

00:18:56.110 --> 00:18:58.260
JobScheduler is here to help.

00:18:58.260 --> 00:18:59.740
It wraps it all
up into something

00:18:59.740 --> 00:19:02.040
that the system can
do and essentially

00:19:02.040 --> 00:19:05.587
call back your job when
certain conditions are met.

00:19:05.587 --> 00:19:07.170
And you see a little
bit of code here.

00:19:07.170 --> 00:19:09.044
The interesting part
here is that you specify

00:19:09.044 --> 00:19:11.004
the capabilities
you need, and then

00:19:11.004 --> 00:19:12.420
you just give it
a component name,

00:19:12.420 --> 00:19:14.128
and you'll get that
component name called

00:19:14.128 --> 00:19:15.340
when the time is right.

00:19:15.340 --> 00:19:17.314
Very handy.

00:19:17.314 --> 00:19:18.980
Also in the framework,
some improvements

00:19:18.980 --> 00:19:20.620
to the Storage Access
Framework, which

00:19:20.620 --> 00:19:23.640
we introduced in
KitKat in API 19.

00:19:23.640 --> 00:19:26.400
Previously if you wanted
to pop up a file browser

00:19:26.400 --> 00:19:28.730
and ask for a directory,
you couldn't do it.

00:19:28.730 --> 00:19:29.950
Now you can.

00:19:29.950 --> 00:19:32.376
Once an app receives
a whole directory

00:19:32.376 --> 00:19:34.250
from the picker in this
way, you can actually

00:19:34.250 --> 00:19:37.010
explore the entire
subtree of documents

00:19:37.010 --> 00:19:41.240
and do whatever you need to
do with that whole directory.

00:19:41.240 --> 00:19:44.492
Also in our framework are some
new things around networking.

00:19:44.492 --> 00:19:45.700
A couple of different topics.

00:19:45.700 --> 00:19:47.122
First one is multi-networking.

00:19:47.122 --> 00:19:48.830
We talked a little
bit about JobScheduler

00:19:48.830 --> 00:19:51.371
being handy for doing some work
later under a particular kind

00:19:51.371 --> 00:19:51.920
of condition.

00:19:51.920 --> 00:19:53.800
What if you need to do work now?

00:19:53.800 --> 00:19:56.120
Your service is running now,
your app is running now,

00:19:56.120 --> 00:19:58.590
but you need to open a
socket on a link that

00:19:58.590 --> 00:20:01.327
has some particular feature--
some carrier future you need,

00:20:01.327 --> 00:20:02.910
needs to have SMS
capability, it needs

00:20:02.910 --> 00:20:05.240
to be unmetered, and so forth.

00:20:05.240 --> 00:20:08.210
ConnectivityManager now
supports the ability

00:20:08.210 --> 00:20:09.650
to handle these
network requests.

00:20:09.650 --> 00:20:12.300
You say requestNetwork, and
you give it a call back.

00:20:12.300 --> 00:20:14.280
Inside that call back,
you will find out

00:20:14.280 --> 00:20:16.776
when a network meeting your
criteria becomes available,

00:20:16.776 --> 00:20:18.150
and then you can
use that network

00:20:18.150 --> 00:20:21.490
object to look up hosts and
open sockets on that link

00:20:21.490 --> 00:20:22.092
specifically.

00:20:22.092 --> 00:20:23.550
The other nice
thing about the call

00:20:23.550 --> 00:20:27.160
back, and this is very cool,
you get warnings, when possible,

00:20:27.160 --> 00:20:29.530
when the network is
about to go down.

00:20:29.530 --> 00:20:32.280
This allows you to actually do
a graceful handoff in your app

00:20:32.280 --> 00:20:33.406
from one link to another.

00:20:33.406 --> 00:20:35.280
Oh, you're about to lose
Wi-Fi because you're

00:20:35.280 --> 00:20:36.390
leaving its range.

00:20:36.390 --> 00:20:38.430
We're just going to
move this over, rebuild

00:20:38.430 --> 00:20:44.460
the stream on cellular with
no interruption to the user.

00:20:44.460 --> 00:20:47.010
Also under the banner of
networking is Bluetooth.

00:20:47.010 --> 00:20:50.070
We introduced in 4.3
Bluetooth Low Energy.

00:20:50.070 --> 00:20:52.790
In L, we are now adding
peripheral device support

00:20:52.790 --> 00:20:53.290
to BLE.

00:20:53.290 --> 00:20:55.410
So you can provide
services and scan

00:20:55.410 --> 00:20:58.815
for services pursuant to
the way that Bluetooth LE

00:20:58.815 --> 00:21:01.080
peripheral devices do
that sort of thing.

00:21:01.080 --> 00:21:05.310
Check out the Android Bluetooth
LE package for more on that.

00:21:05.310 --> 00:21:09.224
Finally, under networking,
we have NFC changes.

00:21:09.224 --> 00:21:11.640
NFC has been a little hard to
use for users, a little hard

00:21:11.640 --> 00:21:12.556
to use for developers.

00:21:12.556 --> 00:21:14.630
We're trying to remove
all those pain points.

00:21:14.630 --> 00:21:16.800
We're now showing Android
Beam in the Share menu

00:21:16.800 --> 00:21:19.520
to make it easier to go
ahead and start an NFC

00:21:19.520 --> 00:21:22.451
transmission from
the user standpoint.

00:21:22.451 --> 00:21:23.950
From an app standpoint,
I don't know

00:21:23.950 --> 00:21:26.032
if you've ever had a
situation where you're

00:21:26.032 --> 00:21:27.740
trying to pop up a
dialog saying now hold

00:21:27.740 --> 00:21:28.906
your phones closer together.

00:21:28.906 --> 00:21:30.350
Now you can actually
specifically

00:21:30.350 --> 00:21:32.410
start a Beam
operation anytime you

00:21:32.410 --> 00:21:34.535
want with NfcAdapter.invokeBeam.

00:21:34.535 --> 00:21:36.910
Another thing that has been
a little harder than it needs

00:21:36.910 --> 00:21:40.500
to be is creating a very simple
piece of text to push over NFC.

00:21:40.500 --> 00:21:43.954
Now there's a method on
NdefRecord to let you do that.

00:21:43.954 --> 00:21:45.870
And there's a bunch of
new CardEmulation stuff

00:21:45.870 --> 00:21:49.149
that I can't begin to explain
because, as Chet explained,

00:21:49.149 --> 00:21:50.190
we don't know what it is.

00:21:50.190 --> 00:21:52.590
So you should check that out.

00:21:52.590 --> 00:21:54.440
And now as a sub head
of the frameworks,

00:21:54.440 --> 00:21:56.186
we're going to talk
about notifications.

00:21:56.186 --> 00:21:57.560
There's a lot to
talk about here.

00:21:57.560 --> 00:21:59.380
CHET HAASE: It's a visual
side of the non-visual side.

00:21:59.380 --> 00:22:01.671
DAN SANDLER: The visual side
of the non-- that's right.

00:22:01.671 --> 00:22:03.440
It's layers.

00:22:03.440 --> 00:22:06.510
There's a lot to
talk about here.

00:22:06.510 --> 00:22:10.462
It's so key to what we're
doing with L for the user.

00:22:10.462 --> 00:22:12.420
There's a lot to talk
about with notifications.

00:22:12.420 --> 00:22:13.879
Also, it's an area
of my expertise,

00:22:13.879 --> 00:22:15.461
and I have the
clicker, so we're going

00:22:15.461 --> 00:22:16.976
to talk about it for a while.

00:22:16.976 --> 00:22:19.100
I'm going to look at four
different categories, how

00:22:19.100 --> 00:22:20.470
they look, how they work.

00:22:20.470 --> 00:22:21.620
We're going to talk
about how that interacts

00:22:21.620 --> 00:22:23.161
with the lock screen
and some privacy

00:22:23.161 --> 00:22:25.530
features we've added to
make that work for everyone,

00:22:25.530 --> 00:22:27.680
additional metadata that every
app needs to start putting

00:22:27.680 --> 00:22:29.971
into its notifications to
make sure you're ready for L,

00:22:29.971 --> 00:22:32.310
and then finally we'll touch
on Wear just a little bit.

00:22:32.310 --> 00:22:34.410
They've got great talks
later in the program,

00:22:34.410 --> 00:22:38.060
but I wanted to just mention
some of those interactions.

00:22:38.060 --> 00:22:42.510
So first, the new style
notifications in L.

00:22:42.510 --> 00:22:44.490
We should take a
quick look back.

00:22:44.490 --> 00:22:46.210
These are the different
versions we've

00:22:46.210 --> 00:22:48.520
had just in the last five years.

00:22:48.520 --> 00:22:51.550
We've had a little
bit of evolution.

00:22:51.550 --> 00:22:53.675
I don't know if you can
see the differences there.

00:22:53.675 --> 00:22:55.680
CHET HAASE: We're getting
blacker and blacker-- how--

00:22:55.680 --> 00:22:57.330
DAN SANDLER: It's a dark time
for the rebellion right there

00:22:57.330 --> 00:22:58.242
at the end.

00:23:01.490 --> 00:23:03.270
Here we have
notifications in L. We've

00:23:03.270 --> 00:23:04.920
moved to the material style.

00:23:04.920 --> 00:23:07.272
Let's go through and take
a look at the pieces here.

00:23:07.272 --> 00:23:08.730
So first I want to
show you that we

00:23:08.730 --> 00:23:10.290
are in fact using
the material theme.

00:23:10.290 --> 00:23:13.940
We are in line with the rest
of the material design system

00:23:13.940 --> 00:23:15.920
that we're introducing
for Android with L.

00:23:15.920 --> 00:23:19.100
We've got these card-shaped
backgrounds that cast shadows.

00:23:19.100 --> 00:23:23.220
The foreground is now
dark text, dark icons,

00:23:23.220 --> 00:23:24.854
and the background
is this light color.

00:23:24.854 --> 00:23:27.270
I should point out at this
point, if you've been following

00:23:27.270 --> 00:23:29.769
the icon guidelines, there are
no new icon guidelines again,

00:23:29.769 --> 00:23:30.470
by the way.

00:23:30.470 --> 00:23:31.609
Trying to keep that going.

00:23:31.609 --> 00:23:33.650
But if you've been following
the icon guidelines,

00:23:33.650 --> 00:23:36.055
you should now have small
icons for notifications

00:23:36.055 --> 00:23:37.991
and for actions that
are effectively masks.

00:23:37.991 --> 00:23:40.240
And in L, we're actually
going to treat them as masks.

00:23:40.240 --> 00:23:43.000
We're just going to use those
to draw in the correct color.

00:23:43.000 --> 00:23:44.500
As Chet was alluding
earlier, that's

00:23:44.500 --> 00:23:46.930
something we're trying
to do more of in L.

00:23:46.930 --> 00:23:50.922
So if you have any opacity baked
into your icons right now, now

00:23:50.922 --> 00:23:52.130
is the time to get rid of it.

00:23:52.130 --> 00:23:55.680
Those should be full opacity,
white on transparent icons

00:23:55.680 --> 00:23:56.382
everywhere.

00:23:56.382 --> 00:23:58.340
The next thing I want to
draw your attention to

00:23:58.340 --> 00:23:59.337
is this accent color.

00:23:59.337 --> 00:24:00.920
This really looks
great and can really

00:24:00.920 --> 00:24:03.460
make a notification pop
out and showcase, again,

00:24:03.460 --> 00:24:04.840
that sort of color
story that you

00:24:04.840 --> 00:24:06.630
may be trying to
tell with your app.

00:24:06.630 --> 00:24:08.580
It's just one method on
the builder, setColor,

00:24:08.580 --> 00:24:10.100
and it fills that
nice circle right

00:24:10.100 --> 00:24:11.900
behind the small icon
on the notification

00:24:11.900 --> 00:24:14.550
inside that layout.

00:24:14.550 --> 00:24:17.320
I should point out that if you
have a large icon in the past,

00:24:17.320 --> 00:24:19.619
we've kicked that small
icon, that important symbolic

00:24:19.619 --> 00:24:21.660
representation of what
that notification's about,

00:24:21.660 --> 00:24:23.368
we've kicked it over
kind of to the side,

00:24:23.368 --> 00:24:24.740
where nobody notices it.

00:24:24.740 --> 00:24:26.550
Now we're going to
keep that color circle,

00:24:26.550 --> 00:24:28.142
we're going to keep
that visual story,

00:24:28.142 --> 00:24:30.350
and we're gonna shrink it
down to a little badge that

00:24:30.350 --> 00:24:31.933
goes right in front
of the large icon.

00:24:31.933 --> 00:24:34.860
So it's always right where
the user expects to see it.

00:24:34.860 --> 00:24:36.610
And then finally, it
just bears mentioning

00:24:36.610 --> 00:24:38.193
that everything else
you know and love

00:24:38.193 --> 00:24:40.530
about Android notifications
is still alive and well

00:24:40.530 --> 00:24:43.850
and showcased great in
the L developer preview.

00:24:43.850 --> 00:24:47.190
Expanded views, action buttons,
and as always in Android,

00:24:47.190 --> 00:24:49.479
if what you need it
extends beyond what we've

00:24:49.479 --> 00:24:51.270
been able to come up
with in our templates,

00:24:51.270 --> 00:24:53.900
customer remote views are
there for you and available.

00:24:53.900 --> 00:24:56.400
Now, I will say that one of the
things that people have said

00:24:56.400 --> 00:24:58.275
to us is, well, OK,
that's all fine and well,

00:24:58.275 --> 00:25:00.750
but I have to make a media
player, and for media players,

00:25:00.750 --> 00:25:02.360
people expect
transport controls,

00:25:02.360 --> 00:25:05.330
and then I have to go deal with
custom remote views and all

00:25:05.330 --> 00:25:05.866
that pain.

00:25:05.866 --> 00:25:08.490
We've been suffering along with
that basically since Honeycomb.

00:25:08.490 --> 00:25:09.246
No longer.

00:25:09.246 --> 00:25:11.120
We have a new template
for you, the first one

00:25:11.120 --> 00:25:12.590
since Jellybean-- MediaStyle.

00:25:12.590 --> 00:25:15.750
Material design finally
comes to media playback.

00:25:15.750 --> 00:25:18.240
If you use this template, you
will opt into, essentially,

00:25:18.240 --> 00:25:22.844
the design created just for
you by the Android UX team,

00:25:22.844 --> 00:25:24.510
designing something
that will look great

00:25:24.510 --> 00:25:27.906
both on the lock screen and in
the regular notification shade.

00:25:27.906 --> 00:25:29.780
One other thing that
you'll notice about this

00:25:29.780 --> 00:25:32.290
is that the accent color
fills the entire background

00:25:32.290 --> 00:25:32.840
of the card.

00:25:32.840 --> 00:25:33.590
CHET HAASE: It's orange.

00:25:33.590 --> 00:25:34.420
DAN SANDLER: It is orange.

00:25:34.420 --> 00:25:36.820
I wanted to make sure they could
see it from the cheap seats.

00:25:36.820 --> 00:25:37.528
What am I saying?

00:25:37.528 --> 00:25:39.720
This is Google I/O.
There are no cheap seats.

00:25:39.720 --> 00:25:41.429
The accent color
fills the entire card,

00:25:41.429 --> 00:25:42.970
and that helps it
pop out when you're

00:25:42.970 --> 00:25:44.095
looking at the lock screen.

00:25:44.095 --> 00:25:45.790
That's where your
media is coming from.

00:25:45.790 --> 00:25:47.915
For the first time, we're
going to let you actually

00:25:47.915 --> 00:25:49.689
use up to six action icons.

00:25:49.689 --> 00:25:51.480
In fact, you could
always attach up to six,

00:25:51.480 --> 00:25:52.740
we just only show
you the first three.

00:25:52.740 --> 00:25:54.776
If you're using MediaStyle,
you'll get all six,

00:25:54.776 --> 00:25:56.650
and we draw them as
little transport controls

00:25:56.650 --> 00:25:58.000
here, which is super handy.

00:25:58.000 --> 00:26:00.730
And in fact, we even let
you use one or two of those

00:26:00.730 --> 00:26:02.435
in the compact form
of the notification,

00:26:02.435 --> 00:26:03.810
again, to make
sure that wherever

00:26:03.810 --> 00:26:06.580
you see that notification, it's
a great place to play and pause

00:26:06.580 --> 00:26:07.640
media.

00:26:07.640 --> 00:26:10.120
There's a custom ProgressBar
that fits with the theme,

00:26:10.120 --> 00:26:12.950
but most importantly, you don't
need to use RemoteViews anymore

00:26:12.950 --> 00:26:14.325
just to do simple
media playback.

00:26:14.325 --> 00:26:16.825
I mentioned a little bit earlier
that there's a MediaSession

00:26:16.825 --> 00:26:17.380
API.

00:26:17.380 --> 00:26:18.880
There's also a bit
of the MediaStyle

00:26:18.880 --> 00:26:21.701
that allows you to attach
your MediaSession token right

00:26:21.701 --> 00:26:24.200
into the notification, which
is going to tell the system UI,

00:26:24.200 --> 00:26:26.960
hey, this thing is
playing back media

00:26:26.960 --> 00:26:29.220
right now, which is
going to be important

00:26:29.220 --> 00:26:31.860
as we start to do things like
integrating more metadata

00:26:31.860 --> 00:26:34.500
from that track, more metadata
from that ongoing playback,

00:26:34.500 --> 00:26:35.532
into the system UI.

00:26:35.532 --> 00:26:37.740
So for example, if you take
a look at the L Developer

00:26:37.740 --> 00:26:40.410
preview, you'll see that
album art is regrettably not

00:26:40.410 --> 00:26:42.372
showing on the lock
screen right now.

00:26:42.372 --> 00:26:43.830
I was working on
that on the plane.

00:26:43.830 --> 00:26:45.580
I couldn't quite
get it done in time.

00:26:45.580 --> 00:26:46.320
I'm sorry.

00:26:46.320 --> 00:26:49.200
But when we have it in L,
it will use this connection

00:26:49.200 --> 00:26:50.960
to MediaSession to
get that metadata

00:26:50.960 --> 00:26:53.892
right out of your ongoing
play back in real time.

00:26:53.892 --> 00:26:55.850
Very quickly I want to
show you a wall of code,

00:26:55.850 --> 00:26:57.347
because everybody loves that.

00:26:57.347 --> 00:26:58.930
The important thing
about this is just

00:26:58.930 --> 00:27:01.138
to note that most of these
APIs here are the existing

00:27:01.138 --> 00:27:03.569
notification APIs that
you know and love.

00:27:03.569 --> 00:27:06.110
They're the five actions that
are in the demonstration there.

00:27:06.110 --> 00:27:08.484
I'm setting the color, and
then right there at the bottom

00:27:08.484 --> 00:27:10.680
we're doing
Notification.MediaStyle,

00:27:10.680 --> 00:27:13.030
which lets you attach
the media token

00:27:13.030 --> 00:27:15.020
and then pick which
of the actions

00:27:15.020 --> 00:27:18.820
to show in the compact form.

00:27:18.820 --> 00:27:20.560
Something else you
saw in the keynote,

00:27:20.560 --> 00:27:22.817
it kind of went by
quickly, and I really

00:27:22.817 --> 00:27:24.150
should have put a video in here.

00:27:24.150 --> 00:27:27.460
So it went by so quickly, it
disappeared from this slide.

00:27:27.460 --> 00:27:29.380
Heads-up notifications
is something

00:27:29.380 --> 00:27:31.950
that we've added to L to make
it easier for important things

00:27:31.950 --> 00:27:34.570
to get in front of the user
without actually taking you out

00:27:34.570 --> 00:27:35.560
of context.

00:27:35.560 --> 00:27:37.506
So in the past, if a
phone call comes in,

00:27:37.506 --> 00:27:39.130
you're in the middle
of playing a game,

00:27:39.130 --> 00:27:41.370
that activity is paused,
that activity goes away.

00:27:41.370 --> 00:27:42.870
If it was a multiplayer
game, that's

00:27:42.870 --> 00:27:45.820
a great way to cause
somebody's game

00:27:45.820 --> 00:27:48.380
to freeze so that you can
tag them or what have you.

00:27:48.380 --> 00:27:48.960
No longer.

00:27:48.960 --> 00:27:52.760
Heads-up notifications are the
new way for important things

00:27:52.760 --> 00:27:55.220
to get the user's attention
without stealing focus away

00:27:55.220 --> 00:27:56.060
from the app.

00:27:56.060 --> 00:27:57.710
When that pops up,
you can look at it,

00:27:57.710 --> 00:28:00.140
you can decide to ignore it,
you can decide to swipe it away,

00:28:00.140 --> 00:28:02.514
you can decide to just push
it back into the notification

00:28:02.514 --> 00:28:05.140
shade without swiping it
away, or you can act on it

00:28:05.140 --> 00:28:07.110
by clicking one of
the action buttons.

00:28:07.110 --> 00:28:09.220
We're using this for things that
the user needs to deal with,

00:28:09.220 --> 00:28:10.136
the user needs to see.

00:28:10.136 --> 00:28:12.990
So high priority notifications
will show up there.

00:28:12.990 --> 00:28:14.414
Notifications that
involve people,

00:28:14.414 --> 00:28:16.330
we'll talk about that
in the metadata section.

00:28:16.330 --> 00:28:18.032
Similarly about
notifications that buzz,

00:28:18.032 --> 00:28:20.240
make noise, or that would
use the full screen intent,

00:28:20.240 --> 00:28:22.320
which is the way, of course,
that phone calls and alarms

00:28:22.320 --> 00:28:24.680
and things like that would take
over your whole screen just

00:28:24.680 --> 00:28:25.513
from a notification.

00:28:27.700 --> 00:28:30.960
Let's take a little time and
talk about the lock screen.

00:28:30.960 --> 00:28:34.630
So this is a big part of L.
You saw this in the keynote.

00:28:34.630 --> 00:28:37.277
We heard you like notifications,
so we put your notifications

00:28:37.277 --> 00:28:38.110
in your lock screen.

00:28:38.110 --> 00:28:40.120
It's there any time
you want to look at it.

00:28:40.120 --> 00:28:41.540
Why would we bother doing this?

00:28:41.540 --> 00:28:43.070
What is the point of this?

00:28:43.070 --> 00:28:46.485
Pre-L, the workflow of
your phone going off,

00:28:46.485 --> 00:28:47.860
your phone buzzing
in your pocket

00:28:47.860 --> 00:28:50.300
is you hear it buzz, you hear it
ding, you reach in, you take it

00:28:50.300 --> 00:28:52.430
out of your pocket, you turn
it on, unlock the screen,

00:28:52.430 --> 00:28:53.520
pull down the
notification shade.

00:28:53.520 --> 00:28:55.220
By the time you've gotten
through all those gauntlets,

00:28:55.220 --> 00:28:56.960
you've forgotten what
you came there for,

00:28:56.960 --> 00:29:00.100
and there's some-- five other
things-- your email was sitting

00:29:00.100 --> 00:29:02.100
there before you pulled
down your notifications,

00:29:02.100 --> 00:29:04.042
and you're already distracted.

00:29:04.042 --> 00:29:07.050
In L, you hear the phone buzz,
you take it out and turn it on,

00:29:07.050 --> 00:29:07.732
and that's it.

00:29:07.732 --> 00:29:08.440
It's right there.

00:29:08.440 --> 00:29:11.150
It's completely glanceable for
everyone using an L device.

00:29:11.150 --> 00:29:12.680
But what about privacy?

00:29:12.680 --> 00:29:14.675
So for many users,
the design that we

00:29:14.675 --> 00:29:16.800
showed in the keynote, the
design I just described,

00:29:16.800 --> 00:29:18.210
is a perfect trade-off.

00:29:18.210 --> 00:29:20.475
It's OK for you to allow
your notification content

00:29:20.475 --> 00:29:22.350
to show up on your lock
screen because that's

00:29:22.350 --> 00:29:24.180
super useful to you.

00:29:24.180 --> 00:29:27.680
Unauthorized users are still not
be able to get into your phone

00:29:27.680 --> 00:29:29.500
without authenticating,
but that doesn't

00:29:29.500 --> 00:29:31.960
work for everyone or
every IT department,

00:29:31.960 --> 00:29:34.700
particularly in a bring
your own device scenario.

00:29:34.700 --> 00:29:36.380
So we've introduced
something in L

00:29:36.380 --> 00:29:38.272
called notification visibility.

00:29:38.272 --> 00:29:40.230
This is a new privacy
feature for notifications

00:29:40.230 --> 00:29:42.646
specifically about how they
interact with the lock screen.

00:29:42.646 --> 00:29:45.560
It lets apps specify what
is safe to show where.

00:29:45.560 --> 00:29:47.120
It lets users
specify whether they

00:29:47.120 --> 00:29:49.380
care about this
level of privacy,

00:29:49.380 --> 00:29:51.670
and device policy can
be involved as well.

00:29:51.670 --> 00:29:53.160
So to explain
this, I have to dig

00:29:53.160 --> 00:29:54.980
into the spheres of visibility.

00:29:54.980 --> 00:29:57.330
I need an echo, like
a reverb for that.

00:29:57.330 --> 00:29:58.997
Spheres of visibility.

00:29:58.997 --> 00:30:00.080
This is the public sphere.

00:30:00.080 --> 00:30:02.510
This is all the things anyone
can do with your phone.

00:30:02.510 --> 00:30:04.980
You can do it, Chet can do
it if he picks up your phone,

00:30:04.980 --> 00:30:07.620
the person who picks up
the phone at the bar when

00:30:07.620 --> 00:30:09.060
you've left it on the bar stool.

00:30:09.060 --> 00:30:11.750
These are all the things that
you can do from the lock screen

00:30:11.750 --> 00:30:12.911
without authenticating.

00:30:12.911 --> 00:30:14.910
The circle inside, these
are the private things.

00:30:14.910 --> 00:30:16.530
These are the things that only
you can do with your phone,

00:30:16.530 --> 00:30:18.590
because you know
how to get into it.

00:30:18.590 --> 00:30:19.684
You can authenticate.

00:30:19.684 --> 00:30:21.350
You can get past the
lock screen and get

00:30:21.350 --> 00:30:24.100
into your notifications, your
email, your apps, your games,

00:30:24.100 --> 00:30:27.920
your data, your
pictures, and so forth.

00:30:27.920 --> 00:30:29.720
So in the notification
visibility world,

00:30:29.720 --> 00:30:31.905
we call this central--
this ring of the things

00:30:31.905 --> 00:30:34.280
that only you are supposed to
be able to see-- visibility

00:30:34.280 --> 00:30:34.720
private.

00:30:34.720 --> 00:30:36.719
A notification that is
marked visibility private

00:30:36.719 --> 00:30:39.420
is very much like an Android
notification up until now.

00:30:39.420 --> 00:30:42.210
That is to say we don't
leak anything about it

00:30:42.210 --> 00:30:44.410
on a lock screen where the
user has said that they

00:30:44.410 --> 00:30:45.715
care about this sort of thing.

00:30:45.715 --> 00:30:47.506
All you show is the
icon, and in fact, in L

00:30:47.506 --> 00:30:51.650
we also show the application
name to help fill the space.

00:30:51.650 --> 00:30:54.010
If you set a notification
to be visibility public,

00:30:54.010 --> 00:30:56.717
you're saying this notification
has nothing sensitive.

00:30:56.717 --> 00:30:58.050
It's completely unobjectionable.

00:30:58.050 --> 00:30:59.920
It's the weather, right?

00:30:59.920 --> 00:31:04.072
It's your device
is low on battery.

00:31:04.072 --> 00:31:06.280
This is not information that
is personally sensitive.

00:31:06.280 --> 00:31:08.040
It's safe to show
on any lock screen,

00:31:08.040 --> 00:31:10.080
no matter whether
the user is concerned

00:31:10.080 --> 00:31:12.127
with that level of security.

00:31:12.127 --> 00:31:14.460
There's a little ring here
that I didn't mention before,

00:31:14.460 --> 00:31:16.200
which is the things that
are private that you

00:31:16.200 --> 00:31:17.658
can kind of see on
the lock screen.

00:31:17.658 --> 00:31:21.070
I told you that in L, we
continue Android's tradition

00:31:21.070 --> 00:31:22.642
of showing notification
icons, even

00:31:22.642 --> 00:31:23.850
if you haven't authenticated.

00:31:23.850 --> 00:31:26.419
So one of the things
that you can do now in L,

00:31:26.419 --> 00:31:27.960
I'll show you an
example in a minute,

00:31:27.960 --> 00:31:30.502
is say, if you've got a
private notification, where

00:31:30.502 --> 00:31:32.960
the user doesn't want to see
all that sensitive information

00:31:32.960 --> 00:31:34.418
on the lock screen,
you can provide

00:31:34.418 --> 00:31:36.440
a substitute, a
public version that

00:31:36.440 --> 00:31:39.580
lets you provide a redacted
form of that same notification

00:31:39.580 --> 00:31:41.040
for a sensitive lock screen.

00:31:41.040 --> 00:31:43.430
We'll see an example
on the next slide.

00:31:43.430 --> 00:31:45.677
I do want to mention
also that now that we've

00:31:45.677 --> 00:31:47.760
created all these circles,
all these pretty builds

00:31:47.760 --> 00:31:50.050
in the slide, there's one
little spot that's left,

00:31:50.050 --> 00:31:53.792
which is things that only
you know are even there.

00:31:53.792 --> 00:31:56.250
We didn't have an opportunity
to do this in Android before,

00:31:56.250 --> 00:31:58.804
so we've created the
third and final visibility

00:31:58.804 --> 00:32:00.220
level, which is
visibility secret.

00:32:00.220 --> 00:32:02.980
If you post a notification
that is visibility secret,

00:32:02.980 --> 00:32:05.390
it doesn't appear on
the lock screen at all.

00:32:05.390 --> 00:32:07.114
So if it's
particularly sensitive

00:32:07.114 --> 00:32:09.030
and you would like to
get notifications for it

00:32:09.030 --> 00:32:11.363
but you don't really want
anybody else to know that it's

00:32:11.363 --> 00:32:13.640
installed, visibility
secret is for you.

00:32:13.640 --> 00:32:15.717
OK, here's that
promised example.

00:32:15.717 --> 00:32:18.050
So let's say the user has
said, this is important to me.

00:32:18.050 --> 00:32:19.690
They've set up a pattern
or PIN on their phone,

00:32:19.690 --> 00:32:21.523
and they've said, when
the device is locked,

00:32:21.523 --> 00:32:23.800
I want to hide the
sensitive notification

00:32:23.800 --> 00:32:26.060
content from the lock screen.

00:32:26.060 --> 00:32:28.990
If you have a notification
that is visibility public,

00:32:28.990 --> 00:32:33.260
this is what you see
on the lock screen.

00:32:33.260 --> 00:32:36.210
I may or may not have
overseen that on a lock screen

00:32:36.210 --> 00:32:37.940
somewhere.

00:32:37.940 --> 00:32:39.460
Anybody can see
this notification

00:32:39.460 --> 00:32:40.760
whether they've
authenticated or not,

00:32:40.760 --> 00:32:42.635
whether the user cares
about security or not.

00:32:42.635 --> 00:32:44.270
This is safe for everyone.

00:32:44.270 --> 00:32:45.641
CHET HAASE: I don't think so.

00:32:45.641 --> 00:32:47.640
DAN SANDLER: Well, so
this is why you would say,

00:32:47.640 --> 00:32:49.220
maybe this is something
that's visibility private.

00:32:49.220 --> 00:32:50.470
A chat app is the
sort of thing that

00:32:50.470 --> 00:32:51.760
maybe is supposed
to be personal.

00:32:51.760 --> 00:32:52.280
CHET HAASE: Should have been.

00:32:52.280 --> 00:32:52.760
DAN SANDLER: Should have been.

00:32:52.760 --> 00:32:53.260
Really.

00:32:53.260 --> 00:32:55.530
You should think
about that next time.

00:32:55.530 --> 00:32:57.530
So if you have a visibility
private notification

00:32:57.530 --> 00:32:58.988
on a lock screen
where the user has

00:32:58.988 --> 00:33:00.870
said hide sensitive
notification content,

00:33:00.870 --> 00:33:03.203
this is the experience you'll
see by default under the L

00:33:03.203 --> 00:33:08.307
Developer preview-- icon,
app name, nothing else.

00:33:08.307 --> 00:33:10.640
So if you as an app want to
provide a better experience,

00:33:10.640 --> 00:33:12.510
you can provide that
redacted version.

00:33:12.510 --> 00:33:14.380
You can create a public
version of the notification,

00:33:14.380 --> 00:33:16.004
you say setPublicVersion,
you construct

00:33:16.004 --> 00:33:17.760
a whole new
notification object that

00:33:17.760 --> 00:33:19.730
is a substitute for that
one to be shown only

00:33:19.730 --> 00:33:20.840
on the lock screen.

00:33:20.840 --> 00:33:23.214
And so in this case,
we've corrected,

00:33:23.214 --> 00:33:24.880
we've changed the app
name a little bit.

00:33:24.880 --> 00:33:27.100
We've added an exclamation
mark because that

00:33:27.100 --> 00:33:28.580
makes people feel cool.

00:33:28.580 --> 00:33:30.060
And we've actually
given the user

00:33:30.060 --> 00:33:31.370
some interesting information.

00:33:31.370 --> 00:33:32.340
You have a new message.

00:33:32.340 --> 00:33:34.798
It's not simply something is
happening from this app, which

00:33:34.798 --> 00:33:37.629
could be I have a sync
problem, or you need to pay $5

00:33:37.629 --> 00:33:39.170
or whatever, it's
actually giving you

00:33:39.170 --> 00:33:41.836
a little bit of information, but
it's not sensitive information.

00:33:41.836 --> 00:33:43.700
So it's compatible
with the user's wishes.

00:33:43.700 --> 00:33:45.950
And then finally there's
that visibility secret,

00:33:45.950 --> 00:33:48.312
and those things
wouldn't show up at all.

00:33:48.312 --> 00:33:50.020
Now of course, if the
user goes and says,

00:33:50.020 --> 00:33:52.070
well, when my device
is locked, I actually

00:33:52.070 --> 00:33:54.000
don't mind seeing all
my notifications there,

00:33:54.000 --> 00:33:56.832
then you see the same thing.

00:33:56.832 --> 00:33:58.790
It essentially is every
notification is public.

00:34:01.860 --> 00:34:04.080
We talked a little
bit about metadata,

00:34:04.080 --> 00:34:06.190
about adding people
and things like that.

00:34:06.190 --> 00:34:09.587
We actually talked about
metadata in KitKat.

00:34:09.587 --> 00:34:11.670
We've started to introduce
some new features to be

00:34:11.670 --> 00:34:13.711
able to stick more
information onto notifications

00:34:13.711 --> 00:34:16.359
for the benefit of the system UI
and any notification listeners

00:34:16.359 --> 00:34:17.650
that the user may have enabled.

00:34:17.650 --> 00:34:20.261
Well, we've got more for you
in the L Developer preview.

00:34:20.261 --> 00:34:22.719
One of the reasons that we want
to do sorting a lot better.

00:34:22.719 --> 00:34:23.949
There's limited space
to show notifications

00:34:23.949 --> 00:34:25.290
on the lock screen.

00:34:25.290 --> 00:34:27.844
In the past, sorting things
chronologically, maybe

00:34:27.844 --> 00:34:30.260
with a little bit of priority,
it's good-- it's not great.

00:34:30.260 --> 00:34:33.630
We're doing better in
L. So one of the things

00:34:33.630 --> 00:34:36.310
that you can do in L to make
sure that notifications get

00:34:36.310 --> 00:34:38.219
sorted in the right
way so that users

00:34:38.219 --> 00:34:39.677
are seeing the most
important stuff

00:34:39.677 --> 00:34:42.076
first is attach, first of
all, a notification category.

00:34:42.076 --> 00:34:43.534
We have a number
of categories that

00:34:43.534 --> 00:34:44.969
are in the notification API.

00:34:44.969 --> 00:34:47.270
It's a set of essentially
a global partition

00:34:47.270 --> 00:34:48.310
of notification space.

00:34:48.310 --> 00:34:49.695
If what you have
doesn't fit, you

00:34:49.695 --> 00:34:51.139
don't have to set a category.

00:34:51.139 --> 00:34:53.670
But if your thing
is an incoming voice

00:34:53.670 --> 00:34:56.739
call, or an incoming video call,
or you've got an alarm clock

00:34:56.739 --> 00:35:00.600
app, high timely team, then
you can tag your notifications

00:35:00.600 --> 00:35:03.010
with that category and
make sure that the system

00:35:03.010 --> 00:35:04.740
UI knows what kind
of thing it is.

00:35:04.740 --> 00:35:08.930
And as we improve L, we will be
able to do more things to sort

00:35:08.930 --> 00:35:11.830
of mute things that are
not relevant to the user's

00:35:11.830 --> 00:35:12.500
current context.

00:35:12.500 --> 00:35:15.237
We'll use that
category to do it.

00:35:15.237 --> 00:35:17.070
There's a new extra key
for the notification

00:35:17.070 --> 00:35:18.630
extras called EXTRA_PEOPLE.

00:35:18.630 --> 00:35:21.250
This is for you to be able to
say this notification relates

00:35:21.250 --> 00:35:23.081
to a person that the
user might care about.

00:35:23.081 --> 00:35:24.080
What do you put in here?

00:35:24.080 --> 00:35:26.909
You put in a URI from
the contacts provider,

00:35:26.909 --> 00:35:29.200
or you put in a telephone
number if that's all you have

00:35:29.200 --> 00:35:30.730
and you're not integrating
with Android contacts,

00:35:30.730 --> 00:35:31.820
or you put in an email address.

00:35:31.820 --> 00:35:33.645
Whatever you have, you
put in EXTRA_PEOPLE,

00:35:33.645 --> 00:35:35.395
and then system UI can
take a look at that

00:35:35.395 --> 00:35:37.160
and say, hey, that
involves somebody.

00:35:37.160 --> 00:35:38.856
I might want to boost that up.

00:35:38.856 --> 00:35:40.810
And the other stuff
is still important.

00:35:40.810 --> 00:35:44.340
The timestamp, whether there's
a fullScreenIntent, priority,

00:35:44.340 --> 00:35:46.007
whether it makes
noise, all these things

00:35:46.007 --> 00:35:47.715
are going to give the
system UI new tools

00:35:47.715 --> 00:35:50.125
to be able to know what things
are most important to show

00:35:50.125 --> 00:35:51.900
to the user first.

00:35:51.900 --> 00:35:54.130
Most importantly,
though, for developers

00:35:54.130 --> 00:35:55.970
is to give that
user that control.

00:35:55.970 --> 00:35:57.470
Let the user turn
off notifications,

00:35:57.470 --> 00:35:59.390
let the user change the
properties of notifications.

00:35:59.390 --> 00:36:01.473
You don't want to run the
risk of the user banning

00:36:01.473 --> 00:36:03.910
notifications using the
system Settings app, a very

00:36:03.910 --> 00:36:07.620
popular feature that we
introduced in Jellybean.

00:36:07.620 --> 00:36:09.925
And when you do give users
choices about notifications,

00:36:09.925 --> 00:36:11.674
when you give the users
that activity that

00:36:11.674 --> 00:36:14.250
lets them configure
everything, put that activity

00:36:14.250 --> 00:36:15.980
into your manifest
with the new intent

00:36:15.980 --> 00:36:18.340
category listed on the slide,
NOTIFICATION_PREFERENCES.

00:36:18.340 --> 00:36:21.050
And we will actually link to
that notification preferences

00:36:21.050 --> 00:36:22.940
page right from system Settings.

00:36:22.940 --> 00:36:24.827
So if you go into
Settings, Notifications,

00:36:24.827 --> 00:36:26.910
you'll be able to jump
straight into the apps that

00:36:26.910 --> 00:36:31.400
have notification preferences
that the user can control.

00:36:31.400 --> 00:36:36.500
Briefly I want to mention that
Wear is key to the notification

00:36:36.500 --> 00:36:38.547
story in L and vice versa.

00:36:38.547 --> 00:36:40.130
It's very much like
the L lock screen.

00:36:40.130 --> 00:36:41.754
It's super glanceable,
except with Wear

00:36:41.754 --> 00:36:43.670
it's already out of your pocket.

00:36:43.670 --> 00:36:45.754
Your phone app's notifications
appear on wearables

00:36:45.754 --> 00:36:46.336
automatically.

00:36:46.336 --> 00:36:47.400
They get bridged there.

00:36:47.400 --> 00:36:48.733
You've seen this in the keynote.

00:36:48.733 --> 00:36:54.000
You saw this as part of the Wear
unveiling a couple months ago.

00:36:54.000 --> 00:36:56.100
Notification.WearableExtender
is the place

00:36:56.100 --> 00:36:58.200
where all the APIs exist
for you to customize

00:36:58.200 --> 00:36:59.660
the appearance of
that notification

00:36:59.660 --> 00:37:01.390
specifically on the
wearable device.

00:37:01.390 --> 00:37:04.280
Split it up into multiple pages,
group notifications together,

00:37:04.280 --> 00:37:05.930
and things like that.

00:37:05.930 --> 00:37:08.080
And as you get into more
advanced Wear development

00:37:08.080 --> 00:37:10.090
and you're developing
apps for Wear itself,

00:37:10.090 --> 00:37:13.971
to run on the watch, you'll
see that it uses notifications

00:37:13.971 --> 00:37:14.470
there, too.

00:37:14.470 --> 00:37:16.386
In fact, the notification
manager on the watch

00:37:16.386 --> 00:37:17.960
is the thing that
manages those cards

00:37:17.960 --> 00:37:19.800
that you see in the wearable UI.

00:37:19.800 --> 00:37:22.420
So you'll use the same old
Notifications API to interact

00:37:22.420 --> 00:37:24.720
with Wear from on
the wearable itself.

00:37:24.720 --> 00:37:27.310
There are I/O sessions that you
should definitely check out.

00:37:27.310 --> 00:37:32.169
Tomorrow at 10:00, the Android
developers on the Wear team

00:37:32.169 --> 00:37:34.460
are going to take you through
all these APIs in detail,

00:37:34.460 --> 00:37:36.500
and there's an I/O
Byte on YouTube

00:37:36.500 --> 00:37:39.470
about building
these UIs as well.

00:37:39.470 --> 00:37:41.179
OK, other important stuff.

00:37:41.179 --> 00:37:41.970
Take it away, Chet.

00:37:41.970 --> 00:37:43.345
CHET HAASE: OK,
I took my breath.

00:37:43.345 --> 00:37:43.954
I'm back.

00:37:43.954 --> 00:37:44.620
DAN SANDLER: OK.

00:37:44.620 --> 00:37:45.815
CHET HAASE: So
other random stuff

00:37:45.815 --> 00:37:47.990
that we couldn't actually find
an appropriate bucket for.

00:37:47.990 --> 00:37:48.730
So here it is.

00:37:48.730 --> 00:37:50.412
ART, we heard about
this in the keynote.

00:37:50.412 --> 00:37:51.620
You've heard about it before.

00:37:51.620 --> 00:37:55.150
It came out in KitKat
as an optional run time,

00:37:55.150 --> 00:37:57.725
and now it is the runtime.

00:37:57.725 --> 00:37:59.650
I had thought
previously, oh, it's

00:37:59.650 --> 00:38:01.190
the one that's
enabled by default,

00:38:01.190 --> 00:38:02.810
and then I was
corrected this week.

00:38:02.810 --> 00:38:03.960
It is the one.

00:38:03.960 --> 00:38:04.810
In fact, Dalvik?

00:38:04.810 --> 00:38:06.190
What Dalvik?

00:38:06.190 --> 00:38:08.210
Everything is ART,
and it's a good thing.

00:38:08.210 --> 00:38:11.480
Faster runtime, the ability to
actually pre-compile this stuff

00:38:11.480 --> 00:38:12.740
so that it's running faster.

00:38:12.740 --> 00:38:15.010
A lot more intelligence
going on in that runtime

00:38:15.010 --> 00:38:16.370
than we had before.

00:38:16.370 --> 00:38:20.010
And one of my favorites is
the increased capabilities

00:38:20.010 --> 00:38:21.130
for garbage collection.

00:38:21.130 --> 00:38:24.940
So less frequent pauses and
shorter durations of those

00:38:24.940 --> 00:38:28.540
pauses mean a better ability to
actually hit your frame rate,

00:38:28.540 --> 00:38:30.040
particularly for animations.

00:38:30.040 --> 00:38:32.370
If you had a GC pause of
10 milliseconds, which

00:38:32.370 --> 00:38:34.150
was sometimes common,
unfortunately,

00:38:34.150 --> 00:38:36.510
in Dalvik, depending on what
was going on in the system,

00:38:36.510 --> 00:38:39.081
that could just push you right
over the boundary of a frame,

00:38:39.081 --> 00:38:40.580
and you'd skip a
frame, and the user

00:38:40.580 --> 00:38:42.079
would see a hiccup
in the animation.

00:38:42.079 --> 00:38:45.064
Now if you have pause times
of around 2 milliseconds,

00:38:45.064 --> 00:38:46.730
then it's much more
probable that you're

00:38:46.730 --> 00:38:49.126
going to stay within that
16 millisecond boundary,

00:38:49.126 --> 00:38:50.750
and it's not going
to affect your frame

00:38:50.750 --> 00:38:52.420
rate or those animations.

00:38:52.420 --> 00:38:54.220
So faster, better,
newer, cooler.

00:38:54.220 --> 00:38:57.250
Check it out, in particular
go to the ART talk.

00:38:57.250 --> 00:38:59.980
That's Thursday, tomorrow
morning, at 10:00.

00:38:59.980 --> 00:39:01.840
And also, go to the
Sandbox, and they're

00:39:01.840 --> 00:39:04.879
giving an ongoing talk,
GC and Jank in ART.

00:39:04.879 --> 00:39:05.420
Talk to them.

00:39:05.420 --> 00:39:07.128
I think there's also
documentation that's

00:39:07.128 --> 00:39:09.310
coming out on the web if
it's not there already.

00:39:09.310 --> 00:39:11.540
So lots of stuff
to check out there.

00:39:11.540 --> 00:39:14.090
Oh, one of my favorite things
too is the moving collector.

00:39:14.090 --> 00:39:16.090
The ability to actually
move stuff around

00:39:16.090 --> 00:39:18.750
in the heap, which
caused some of the delays

00:39:18.750 --> 00:39:20.907
that we saw before, that
things couldn't move.

00:39:20.907 --> 00:39:22.490
So then the heap
would get fragmented,

00:39:22.490 --> 00:39:24.220
and then it got
harder and harder

00:39:24.220 --> 00:39:26.810
to find space for things that
you needed to newly allocate.

00:39:26.810 --> 00:39:29.600
Well, now we can actually
collect the heap and move

00:39:29.600 --> 00:39:32.820
stuff around when that
app is backgrounded.

00:39:32.820 --> 00:39:35.100
So very powerful capability,
linked with the ability

00:39:35.100 --> 00:39:37.590
to then take really
large objects like bitmap

00:39:37.590 --> 00:39:39.870
and put those in
a set aside space

00:39:39.870 --> 00:39:42.574
so that the really large
objects aren't taking up room

00:39:42.574 --> 00:39:44.990
in the common space where all
the little tiny objects need

00:39:44.990 --> 00:39:45.490
to go.

00:39:45.490 --> 00:39:48.240
So that's part of the reason
why we have much smaller pause

00:39:48.240 --> 00:39:51.480
times for allocations as well
as collections, because it's

00:39:51.480 --> 00:39:53.110
much faster for us
to find the space

00:39:53.110 --> 00:39:55.520
that we need when
we actually need it.

00:39:55.520 --> 00:39:57.270
Android TV?

00:39:57.270 --> 00:39:59.560
DAN SANDLER: There's a
great talk about this,

00:39:59.560 --> 00:40:00.435
let's see when it is.

00:40:00.435 --> 00:40:02.340
That's this afternoon.

00:40:02.340 --> 00:40:03.610
Yes, this afternoon.

00:40:03.610 --> 00:40:04.650
All about Android TV.

00:40:04.650 --> 00:40:06.230
There's an I/O Byte on YouTube.

00:40:06.230 --> 00:40:07.730
The message from
the Android TV team

00:40:07.730 --> 00:40:09.870
is this-- you saw it in
the keynote-- there's

00:40:09.870 --> 00:40:10.579
gonna be one app.

00:40:10.579 --> 00:40:12.161
You're gonna produce
one app, and it's

00:40:12.161 --> 00:40:13.940
going to run great
on every device that

00:40:13.940 --> 00:40:17.460
calls itself Android--
phones, tablets, TVs.

00:40:17.460 --> 00:40:20.346
When your app is ready for
that 10 foot experience

00:40:20.346 --> 00:40:21.720
they talked about
in the keynote,

00:40:21.720 --> 00:40:23.261
there's an additional
intent category

00:40:23.261 --> 00:40:25.860
you can toss into your manifest
to move your app up so that it

00:40:25.860 --> 00:40:30.650
shows up on that main panel,
that main rail inside the TV

00:40:30.650 --> 00:40:31.451
launcher UI.

00:40:31.451 --> 00:40:33.450
You can still launch your
app if it's not there,

00:40:33.450 --> 00:40:35.590
but when it's ready for
that TV experience, that's

00:40:35.590 --> 00:40:36.381
how you move it up.

00:40:36.381 --> 00:40:40.090
More info at d.android.com/tv.

00:40:40.090 --> 00:40:42.630
CHET HAASE: Enterprise,
the main thing I'd say here

00:40:42.630 --> 00:40:44.430
is go to the Sandbox
and attend the talk

00:40:44.430 --> 00:40:46.740
on frameworks for enterprise
and device management,

00:40:46.740 --> 00:40:48.520
and Ben will give
you more information

00:40:48.520 --> 00:40:50.430
about what's going
on for enterprise.

00:40:50.430 --> 00:40:51.900
They talked about
it a little bit,

00:40:51.900 --> 00:40:54.540
Sundar was talking
about it in the keynote,

00:40:54.540 --> 00:40:56.500
about managed
profiles, the ability

00:40:56.500 --> 00:40:58.660
to actually have
your IT department,

00:40:58.660 --> 00:41:00.504
let's say, in a
BYOD world actually

00:41:00.504 --> 00:41:01.670
manage what's on the device.

00:41:01.670 --> 00:41:03.860
And then this division
between the device owner,

00:41:03.860 --> 00:41:05.460
the person actually
using the device,

00:41:05.460 --> 00:41:07.710
and the profile owner, which
might be the organization

00:41:07.710 --> 00:41:09.450
that that user is a part of.

00:41:09.450 --> 00:41:11.430
And the ability to do
that in enterprises

00:41:11.430 --> 00:41:13.640
is increasingly important.

00:41:13.640 --> 00:41:15.492
There's new APIs in
DevicePolicyManager

00:41:15.492 --> 00:41:17.200
that enable this, and
there's also an app

00:41:17.200 --> 00:41:19.740
that they're working on
for pre-L releases that

00:41:19.740 --> 00:41:23.270
will enable some of these
capabilities as well.

00:41:23.270 --> 00:41:24.630
Android tools.

00:41:24.630 --> 00:41:27.050
I spoke to one of the
people on the Tools team

00:41:27.050 --> 00:41:29.060
and got the brief
take on exactly what's

00:41:29.060 --> 00:41:30.850
new and exciting
in the tool space.

00:41:30.850 --> 00:41:33.055
And then I said, OK,
great, I will talk about it

00:41:33.055 --> 00:41:33.680
in the session.

00:41:33.680 --> 00:41:35.638
He said, actually, we're
going to talk about it

00:41:35.638 --> 00:41:36.940
in Thursday's so please don't.

00:41:39.670 --> 00:41:42.210
So go to their session
tomorrow at 9:00

00:41:42.210 --> 00:41:44.990
and learn what's new in tools.

00:41:44.990 --> 00:41:46.290
Play Services.

00:41:46.290 --> 00:41:49.390
There's an excellent session
coming on this afternoon.

00:41:49.390 --> 00:41:51.350
So we have the Wear
Data API, much more

00:41:51.350 --> 00:41:53.120
information about
what's going on there.

00:41:53.120 --> 00:41:55.760
Games, capabilities, the
capabilities of Quests,

00:41:55.760 --> 00:41:57.880
as well as saved
games in the cloud.

00:41:57.880 --> 00:42:01.190
So you can actually save your
share state between devices

00:42:01.190 --> 00:42:02.440
much more easily.

00:42:02.440 --> 00:42:04.600
New Drive capabilities,
new Wallet capabilities,

00:42:04.600 --> 00:42:06.260
increased analytics
for your apps.

00:42:06.260 --> 00:42:08.450
Much more that I didn't
want to get into this slide,

00:42:08.450 --> 00:42:10.825
and they can tell you much
more about that at the session

00:42:10.825 --> 00:42:12.000
if you go there.

00:42:12.000 --> 00:42:13.640
And some other stuff
that didn't even

00:42:13.640 --> 00:42:16.070
fit into our other
grab bag category.

00:42:16.070 --> 00:42:17.160
Security.

00:42:17.160 --> 00:42:19.501
SELinux is now in
enforcing mode.

00:42:19.501 --> 00:42:21.250
I would encourage you
to go to the "Secure

00:42:21.250 --> 00:42:24.419
Development on Android" I/O Byte
on YouTube and check that out.

00:42:24.419 --> 00:42:26.210
Get more information
about that, as well as

00:42:26.210 --> 00:42:28.560
some other things in
the encryption area

00:42:28.560 --> 00:42:30.660
that you can learn about.

00:42:30.660 --> 00:42:32.160
And also in the
printing area, but I

00:42:32.160 --> 00:42:34.810
would say just in general,
we have a new PdfRenderer

00:42:34.810 --> 00:42:37.360
capability that allows
you to take PDFs and then

00:42:37.360 --> 00:42:38.646
render them as bitmaps.

00:42:38.646 --> 00:42:40.270
Very useful for
printing, and we use it

00:42:40.270 --> 00:42:44.010
for the print preview, which
is now part of the release.

00:42:44.010 --> 00:42:46.270
But you can use it in general
if that's a capability

00:42:46.270 --> 00:42:48.560
that you need in
your application.

00:42:48.560 --> 00:42:51.630
And most importantly,
the preview SDK.

00:42:51.630 --> 00:42:52.130
What is it?

00:42:52.130 --> 00:42:53.110
When is it coming out?

00:42:53.110 --> 00:42:53.890
Tomorrow.

00:42:53.890 --> 00:42:55.680
So here's some URLs.

00:42:55.680 --> 00:42:59.350
d.android.com, actually /preview
is where you can get more

00:42:59.350 --> 00:43:01.150
information about
the preview release,

00:43:01.150 --> 00:43:04.580
as well as download the bits for
building against and download

00:43:04.580 --> 00:43:09.570
system images for Nexus
5 and 7 minimally.

00:43:09.570 --> 00:43:13.160
And that comes out
tomorrow, so please

00:43:13.160 --> 00:43:20.040
get started developing today,
or-- yeah, there's the links.

00:43:20.040 --> 00:43:20.651
Tomorrow.

00:43:20.651 --> 00:43:21.150
Yeah.

00:43:21.150 --> 00:43:25.090
Developed for the preview
release of L today, tomorrow.

00:43:25.090 --> 00:43:27.880
And in the meantime, go to all
the I/O sessions, enjoy those,

00:43:27.880 --> 00:43:31.490
and the I/O Bytes online are
being posted as of today.

00:43:31.490 --> 00:43:34.360
And please, if you have
issues, please submit them.

00:43:34.360 --> 00:43:36.809
The sooner the better, because
the sooner you submit them,

00:43:36.809 --> 00:43:38.350
the better chance
we're going to have

00:43:38.350 --> 00:43:39.933
of actually knowing
about them in time

00:43:39.933 --> 00:43:43.560
to fix them for the
full on L release.

00:43:43.560 --> 00:43:45.060
DAN SANDLER: And
we ran out of time.

00:43:45.060 --> 00:43:46.260
CHET HAASE: We did
run out of time.

00:43:46.260 --> 00:43:47.120
DAN SANDLER: We
planned it perfectly.

00:43:47.120 --> 00:43:49.150
We have 17 seconds for
Q&amp;A. So actually, we're

00:43:49.150 --> 00:43:51.906
going to take Q&amp;A downstairs
in the sandbox on the platform

00:43:51.906 --> 00:43:53.280
level of the second
floor, right?

00:43:53.280 --> 00:43:53.360
CHET HAASE: Yes.

00:43:53.360 --> 00:43:55.860
We'll be there right after this
talk, and thanks for coming.

00:43:55.860 --> 00:43:57.000
[APPLAUSE]

