WEBVTT
Kind: captions
Language: en

00:00:00.375 --> 00:00:01.750
FRANCOIS SAULNIER:
Hi, everybody.

00:00:01.750 --> 00:00:02.484
I'm full so Sony

00:00:02.484 --> 00:00:03.650
MATHIEU LORBER: I'm Mathieu.

00:00:03.650 --> 00:00:06.150
FRANCOIS SAULNIER: We
are coming from France.

00:00:06.150 --> 00:00:09.630
We are the co-founders with
Eric Therond, who's there

00:00:09.630 --> 00:00:11.640
in the audience, of Instill.

00:00:11.640 --> 00:00:16.490
And we are going to talk about
how we built Instill with Dart.

00:00:16.490 --> 00:00:22.970
So Instill is an online
service, with one you can build,

00:00:22.970 --> 00:00:25.160
we can create--

00:00:25.160 --> 00:00:26.590
MATHIEU LORBER: That's perfect.

00:00:26.590 --> 00:00:31.320
FRANCOIS SAULNIER: With one you
can create informative videos.

00:00:31.320 --> 00:00:35.820
So before Mathieu talks to you
about technical architecture

00:00:35.820 --> 00:00:38.460
evolution, and how we moved
from Angular to Polymer--

00:00:38.460 --> 00:00:41.540
and why we move from
Angular to Polymer--

00:00:41.540 --> 00:00:47.400
I will talk to you about who
we are and what Instill is.

00:00:47.400 --> 00:00:51.450
So we are three developers
with a strong background

00:00:51.450 --> 00:00:54.930
in development and web
application development.

00:00:54.930 --> 00:00:59.150
And a long time ago,
far away from here

00:00:59.150 --> 00:01:03.120
in France, we used Java
stacks with MVC frameworks

00:01:03.120 --> 00:01:07.800
like Struts or Spring
MVC, with piece of JS.,

00:01:07.800 --> 00:01:09.680
and then, Prototype
and then jQuery

00:01:09.680 --> 00:01:13.140
and all the frameworks you
can have in JavaScript.

00:01:13.140 --> 00:01:17.470
And in 2008, we started building
large, single-page applications

00:01:17.470 --> 00:01:21.790
with Squid and we had also
some experience with Flex.

00:01:21.790 --> 00:01:26.960
So one year ago, we
were discussing video

00:01:26.960 --> 00:01:32.740
and we observed that
video traffic was always

00:01:32.740 --> 00:01:34.160
increasing on the internet.

00:01:34.160 --> 00:01:39.135
And that people were consuming
more and more videos, even

00:01:39.135 --> 00:01:43.270
in their work, to
share information

00:01:43.270 --> 00:01:45.940
to make some presentations.

00:01:45.940 --> 00:01:49.140
But at the same
time, we also noticed

00:01:49.140 --> 00:01:55.020
that people were impedimented
in such video production

00:01:55.020 --> 00:01:57.930
because it was time consuming.

00:01:57.930 --> 00:02:01.670
So as we didn't find any tools
or services on the internet

00:02:01.670 --> 00:02:06.800
to produce videos-- to be
efficient to produce videos--

00:02:06.800 --> 00:02:09.070
we decided to create Instill.

00:02:09.070 --> 00:02:13.120
So Instill is an
online service with one

00:02:13.120 --> 00:02:18.620
you don't have to
consider technical video

00:02:18.620 --> 00:02:20.350
stuff like
audiosynchronizations,

00:02:20.350 --> 00:02:23.620
transitions, animations,
and other things.

00:02:26.780 --> 00:02:29.930
So how it works--
it's quite simple.

00:02:29.930 --> 00:02:32.770
Instill helps you to
structure your information.

00:02:32.770 --> 00:02:37.710
And then to choose
visual representations

00:02:37.710 --> 00:02:41.630
to illustrate what you
want to explain to people.

00:02:41.630 --> 00:02:46.780
And then it helps you to record
your voice over the video.

00:02:46.780 --> 00:02:49.830
So if you have an
idea, in one hour,

00:02:49.830 --> 00:02:52.350
you can produce a
short video to explain

00:02:52.350 --> 00:02:54.700
what you want to explain to
people-- the information you

00:02:54.700 --> 00:02:56.540
want to share with people.

00:02:56.540 --> 00:02:58.190
So I have a short
video demonstration

00:02:58.190 --> 00:03:01.620
of how Instill works
that I will command.

00:03:01.620 --> 00:03:07.100
So when you to create
a project with Instill,

00:03:07.100 --> 00:03:09.210
we start by collecting
some information

00:03:09.210 --> 00:03:13.410
like the title of the video,
the main objectives you want

00:03:13.410 --> 00:03:20.350
to-- the information that people
will use after the main points,

00:03:20.350 --> 00:03:22.875
so the structure
of the information.

00:03:26.040 --> 00:03:34.620
And at the end of this
step, you've got a review.

00:03:34.620 --> 00:03:38.350
And this review allows you to
check that you didn't forget

00:03:38.350 --> 00:03:42.010
anything you wanted to build.

00:03:42.010 --> 00:03:44.280
Then, you can immediately
have a preview

00:03:44.280 --> 00:03:47.030
of the video at this stage.

00:03:47.030 --> 00:03:48.570
So it's a preview--
it's not video.

00:03:48.570 --> 00:03:50.900
It's rendered right
in the browser.

00:03:50.900 --> 00:03:58.430
So it's based only on the
information you gave to us.

00:03:58.430 --> 00:04:05.070
And after that, I can add a new
visual sequence to my video.

00:04:05.070 --> 00:04:08.170
So I add an item list
to explain who we are.

00:04:08.170 --> 00:04:10.280
So we are three
software engineers.

00:04:14.340 --> 00:04:15.899
Where is Mathieu?

00:04:15.899 --> 00:04:16.399
There.

00:04:16.399 --> 00:04:19.393
Eric and myself.

00:04:23.610 --> 00:04:27.310
So we can have an
instant preview

00:04:27.310 --> 00:04:35.410
to check that the video is
OK and to see the animation.

00:04:35.410 --> 00:04:39.730
And after that, we are
ready to record our voice.

00:04:39.730 --> 00:04:43.320
So we have to accept the
microphone authorization

00:04:43.320 --> 00:04:43.920
request.

00:04:43.920 --> 00:04:46.580
And then when you click
on the Record button,

00:04:46.580 --> 00:04:48.930
we can record the
voice over the video.

00:04:48.930 --> 00:04:51.380
And we control the animation
flow by the next button.

00:04:51.380 --> 00:05:00.785
So the device is the main way
to control the video flow--

00:05:00.785 --> 00:05:02.230
the animation flow.

00:05:02.230 --> 00:05:05.590
And then you can just publish
your video directly on YouTube,

00:05:05.590 --> 00:05:07.525
or you can get a download link.

00:05:10.530 --> 00:05:11.730
OK.

00:05:11.730 --> 00:05:13.520
So why did we choose Dart?

00:05:13.520 --> 00:05:15.250
It's all about productivity.

00:05:15.250 --> 00:05:20.370
One year ago, Mathieu--
there-- told us, hey

00:05:20.370 --> 00:05:22.720
guys, why don't we
start with Dart?

00:05:22.720 --> 00:05:26.860
And maybe because
they call me papa--

00:05:26.860 --> 00:05:29.910
so they call me daddy, in
English-- maybe because I'm

00:05:29.910 --> 00:05:32.450
older than they are,
or maybe because I'm

00:05:32.450 --> 00:05:36.761
an old fashioned guy-- I
don't know-- I say, no guys,

00:05:36.761 --> 00:05:38.010
we don't start with this Dart.

00:05:38.010 --> 00:05:40.400
We start with the
technologies we know

00:05:40.400 --> 00:05:43.720
and where we are
already productive.

00:05:43.720 --> 00:05:48.390
And after a long discussion
with Mathieu and Eric,

00:05:48.390 --> 00:05:50.955
I admitted that
maybe I was wrong.

00:05:50.955 --> 00:05:52.920
And I was wrong.

00:05:52.920 --> 00:05:58.022
So we agreed that Dart
presented all the advantages

00:05:58.022 --> 00:06:00.730
of the technologies we knew.

00:06:00.730 --> 00:06:05.070
And we decided to
start with Dart.

00:06:05.070 --> 00:06:07.400
So we started with
this technology.

00:06:07.400 --> 00:06:10.540
And at the beginning,
we were very productive

00:06:10.540 --> 00:06:12.600
but we reached some
limitations with the first UI

00:06:12.600 --> 00:06:14.590
framework we chose.

00:06:14.590 --> 00:06:19.390
So that's what Mathieu
is going to talk about.

00:06:19.390 --> 00:06:21.420
MATHIEU LORBER: So
first, a quick overview

00:06:21.420 --> 00:06:23.540
of the global
architecture of Instill.

00:06:23.540 --> 00:06:27.370
So Instill is a single-page
application made with Dart.

00:06:27.370 --> 00:06:30.160
We have a Java back end, so
the application is loaded once.

00:06:30.160 --> 00:06:33.780
And then only JSON information
is shared with the back end.

00:06:36.780 --> 00:06:40.480
As we render movies,
we can't render movie

00:06:40.480 --> 00:06:43.170
in the lifetime of
an HTTP request,

00:06:43.170 --> 00:06:45.340
so we have a message queue.

00:06:45.340 --> 00:06:47.600
And the whole application
is asynchronous

00:06:47.600 --> 00:06:50.150
because we have another
Java application, which

00:06:50.150 --> 00:06:53.120
render in publishing movies.

00:06:53.120 --> 00:06:57.700
And later, we hoped we'd be able
to connect directly the message

00:06:57.700 --> 00:06:59.660
queue to the Dart
front end, so we

00:06:59.660 --> 00:07:03.720
can give real time information
to the user about rendering

00:07:03.720 --> 00:07:05.440
and publishing.

00:07:05.440 --> 00:07:09.330
As you can see, we
kept a Java back end

00:07:09.330 --> 00:07:12.950
because we were OK
with the back end.

00:07:12.950 --> 00:07:16.280
Our stack is very lightweight.

00:07:16.280 --> 00:07:18.210
The whole stack is great.

00:07:18.210 --> 00:07:23.000
But truth is, when you
come back from Dart code,

00:07:23.000 --> 00:07:28.320
Java is becoming to
be a bit painful.

00:07:28.320 --> 00:07:29.710
Let's talk about the back end.

00:07:29.710 --> 00:07:32.870
We have a CQRS and
Event-sourced back end.

00:07:32.870 --> 00:07:38.950
CQRS stands for Command Query
Responsibility Segregation.

00:07:38.950 --> 00:07:41.370
I'll be short-- the
main idea behind

00:07:41.370 --> 00:07:45.857
is that design button is
separating write and read

00:07:45.857 --> 00:07:46.565
responsibilities.

00:07:49.480 --> 00:07:51.320
In our case, that's
the way we communicate

00:07:51.320 --> 00:07:54.630
between the front
end and the back end.

00:07:54.630 --> 00:07:56.670
We have a query base
and a command base.

00:07:56.670 --> 00:07:59.970
And for example, when they need
a project in the front end,

00:07:59.970 --> 00:08:05.430
I will send GetProjectQuery
to the back end.

00:08:05.430 --> 00:08:09.230
The meaning is even
stronger than epicycles.

00:08:09.230 --> 00:08:10.910
And when I have
an action-- which

00:08:10.910 --> 00:08:15.970
would require a
write as a database--

00:08:15.970 --> 00:08:17.800
I will send the
ChangeTitleCommand,

00:08:17.800 --> 00:08:20.720
for example, to change a title.

00:08:20.720 --> 00:08:25.500
Event-sourced means we
don't save whole objects

00:08:25.500 --> 00:08:27.300
in the database.

00:08:27.300 --> 00:08:30.790
When the user changes the
title of his presentation,

00:08:30.790 --> 00:08:34.329
we don't save a new
presentation object.

00:08:34.329 --> 00:08:35.495
We save a TitleChangedEvent.

00:08:40.450 --> 00:08:45.200
So that's, as a reminder, a
typical screen of Instill.

00:08:45.200 --> 00:08:51.287
So as in 99.7% of
web applications,

00:08:51.287 --> 00:08:52.370
you can see we have forms.

00:08:55.090 --> 00:08:58.990
But we have to make real
time pre-authorization--

00:08:58.990 --> 00:09:02.270
we say preview in the rest
of the implementation.

00:09:02.270 --> 00:09:06.500
We use [INAUDIBLE] canvas,
audio elements, video elements

00:09:06.500 --> 00:09:10.870
and that makes a lot
of asynchronous code.

00:09:10.870 --> 00:09:14.460
So asynchronous generators
are working for us.

00:09:14.460 --> 00:09:17.250
But we also used
the [INAUDIBLE] API.

00:09:17.250 --> 00:09:20.670
And that's a fun API
because it changed a lot

00:09:20.670 --> 00:09:23.090
in the last months.

00:09:23.090 --> 00:09:26.600
But through the API, we needed
to record the people's voice.

00:09:26.600 --> 00:09:30.145
So that was important for us,
even if it was very unstable.

00:09:33.210 --> 00:09:35.140
So we started the
application one year ago,

00:09:35.140 --> 00:09:39.560
and we needed a framework for
the interface at that moment.

00:09:39.560 --> 00:09:42.420
And AngularDart was
the natural choice.

00:09:42.420 --> 00:09:46.490
It was a more mature framework
for interfaces at the moment.

00:09:46.490 --> 00:09:51.140
And we felt very productive
in the first weeks.

00:09:51.140 --> 00:09:53.776
We felt very productive
because of the data binding

00:09:53.776 --> 00:09:54.400
and everything.

00:09:54.400 --> 00:09:58.850
But we actually quickly
reached some difficulties.

00:09:58.850 --> 00:10:02.530
I'm going to talk
about them now.

00:10:02.530 --> 00:10:04.000
In the rest of the
presentation, I

00:10:04.000 --> 00:10:07.780
will use the very complicated
component as an example.

00:10:07.780 --> 00:10:08.530
That's the player.

00:10:08.530 --> 00:10:11.696
We have the preview part,
a time indication, the play

00:10:11.696 --> 00:10:14.330
and the stop button.

00:10:14.330 --> 00:10:18.310
And I'm going to compose it.

00:10:18.310 --> 00:10:21.310
So we have the player
at the top-- which

00:10:21.310 --> 00:10:24.890
is the whole component-- with
two subcomponents, a control

00:10:24.890 --> 00:10:26.270
panel, and a renderer.

00:10:26.270 --> 00:10:29.600
The control panel is
composed of two buttons.

00:10:29.600 --> 00:10:31.440
The timing indication
and the renderer

00:10:31.440 --> 00:10:34.360
use the canvas and
video elements.

00:10:34.360 --> 00:10:37.750
So this composition
may be simpler,

00:10:37.750 --> 00:10:40.530
but this was the purpose
of the presentation.

00:10:40.530 --> 00:10:47.020
With Angular, one good
way to code that component

00:10:47.020 --> 00:10:51.470
would be to have a
PlayerAPI object, living

00:10:51.470 --> 00:10:52.490
beside the components.

00:10:52.490 --> 00:10:54.560
So the PlayerAPI is
binding to the player

00:10:54.560 --> 00:10:58.030
and could be used
in the controllers.

00:10:58.030 --> 00:11:00.080
I'm going to code
two whole components.

00:11:00.080 --> 00:11:05.440
I have a movie in the PlayerAPI,
on which I make the binding.

00:11:05.440 --> 00:11:08.250
I have play and stop methods,
who can be called directly

00:11:08.250 --> 00:11:10.070
by the buttons.

00:11:10.070 --> 00:11:12.840
And when I call
the play method--

00:11:12.840 --> 00:11:16.090
and we have a play
event, which will

00:11:16.090 --> 00:11:19.490
be handled by the renderer.

00:11:19.490 --> 00:11:21.190
So that's OK.

00:11:21.190 --> 00:11:26.530
But we actually have
two problems with that.

00:11:26.530 --> 00:11:32.360
First, the renderer--
we want to reel it.

00:11:32.360 --> 00:11:35.440
As you saw in the
screen, we have

00:11:35.440 --> 00:11:37.320
lots of preview thumbnails.

00:11:37.320 --> 00:11:41.540
And the renderer
subcomponent should

00:11:41.540 --> 00:11:44.290
be used in those thumbnails.

00:11:44.290 --> 00:11:50.610
And truth is, AngularDart
1 made the creation

00:11:50.610 --> 00:11:53.990
of isolated, tiny
components very complicated.

00:11:53.990 --> 00:11:59.260
Because in that case, I can't
really isolate my renderer.

00:11:59.260 --> 00:12:01.950
The other problem we
had with that code

00:12:01.950 --> 00:12:05.940
is that play and stop
events-- they weren't events.

00:12:05.940 --> 00:12:07.990
They actually were orders.

00:12:07.990 --> 00:12:12.870
And it wouldn't be a problem
if it was only that component.

00:12:12.870 --> 00:12:16.360
But we had lots
and lots of events

00:12:16.360 --> 00:12:18.460
which actually were orders.

00:12:18.460 --> 00:12:23.690
And the code became
complicated because of that.

00:12:23.690 --> 00:12:27.760
And let me tell the complete
story of a user action.

00:12:27.760 --> 00:12:31.880
So I have my user.

00:12:31.880 --> 00:12:32.380
It's a girl.

00:12:32.380 --> 00:12:33.780
And her name is Natasha.

00:12:33.780 --> 00:12:36.800
Natasha wants to change the
title of her presentation.

00:12:36.800 --> 00:12:40.650
So she had an input,
she changed the title.

00:12:40.650 --> 00:12:43.860
The browser fired
a changed event.

00:12:43.860 --> 00:12:47.550
That change event is
handled by AngularDart.

00:12:47.550 --> 00:12:49.330
We don't see it.

00:12:49.330 --> 00:12:51.890
And AngularDart
operates binding.

00:12:51.890 --> 00:12:56.200
So I have my project object.

00:12:56.200 --> 00:12:57.580
It's title will be changed.

00:13:03.640 --> 00:13:07.640
I will detect the change in
the object in our controller.

00:13:07.640 --> 00:13:11.930
Our controller will create a
changed title command, which

00:13:11.930 --> 00:13:13.500
will be sent to the back end.

00:13:13.500 --> 00:13:17.330
And the back end will
save a TitleChangedEvent

00:13:17.330 --> 00:13:18.880
in the database.

00:13:18.880 --> 00:13:21.140
So here, Natasha--
if she could see

00:13:21.140 --> 00:13:25.040
the whole journey--
she may wonder,

00:13:25.040 --> 00:13:27.390
was it the simplest way?

00:13:27.390 --> 00:13:28.800
Guys-- really.

00:13:28.800 --> 00:13:32.550
Is it the simplest architecture,
with the data binding

00:13:32.550 --> 00:13:34.265
and stuff?

00:13:34.265 --> 00:13:37.170
To transform a changed
event from the browser

00:13:37.170 --> 00:13:40.280
to a TitleChangedEvent
in the back end?

00:13:40.280 --> 00:13:43.270
So that wasn't
technically complicated,

00:13:43.270 --> 00:13:44.980
but it doesn't feel right.

00:13:48.150 --> 00:13:50.660
We have other examples
of difficulties.

00:13:50.660 --> 00:13:56.690
For example, when you add a
visual in your presentation,

00:13:56.690 --> 00:14:01.460
we have an editor, which depends
on the kind of visual you use.

00:14:01.460 --> 00:14:08.380
And with Angular, the only
way to switch the editor,

00:14:08.380 --> 00:14:11.810
depending on the kind of
visual, was a big switch.

00:14:11.810 --> 00:14:14.920
That's OK when you have
seven kinds of visuals.

00:14:14.920 --> 00:14:18.380
But when you have 20,
it becomes complicated.

00:14:18.380 --> 00:14:21.970
And we wanted to
programmatically add

00:14:21.970 --> 00:14:23.390
those components.

00:14:23.390 --> 00:14:26.685
And the only way to do it really
programmatically with Angular

00:14:26.685 --> 00:14:30.940
was to use the internal
technical cases

00:14:30.940 --> 00:14:31.820
of the frameworks.

00:14:31.820 --> 00:14:34.000
So that wasn't good.

00:14:34.000 --> 00:14:37.380
Another example was about
synchronous control.

00:14:37.380 --> 00:14:40.770
Because we have video and sound.

00:14:40.770 --> 00:14:43.320
We want them to be
really synchronous.

00:14:43.320 --> 00:14:47.300
If we use the scope
and states, we

00:14:47.300 --> 00:14:50.639
would have used the dirty
checking internal mechanism

00:14:50.639 --> 00:14:51.180
of the scope.

00:14:51.180 --> 00:14:53.990
And if you don't know
about dirty checking,

00:14:53.990 --> 00:14:57.910
just know it's by nature--
it can be synchronous.

00:14:57.910 --> 00:15:01.580
So we had a state-- we had a
state which cannot really be

00:15:01.580 --> 00:15:04.460
watched, because the watch
this time wasn't synchronous.

00:15:04.460 --> 00:15:09.990
So we had events for saying,
hey, pre-synchronously check

00:15:09.990 --> 00:15:10.490
the state.

00:15:10.490 --> 00:15:12.870
And it was complicated.

00:15:12.870 --> 00:15:17.010
To be fair, AngularDart was
very good at some tasks.

00:15:17.010 --> 00:15:18.380
Data binding is really great.

00:15:18.380 --> 00:15:24.700
And Angular is the first really
good data centric framework.

00:15:24.700 --> 00:15:28.840
But the component model
wasn't the one we needed.

00:15:28.840 --> 00:15:36.740
So eight months ago, we
started to watch for Polymer

00:15:36.740 --> 00:15:39.810
and check that its model--
its components model--

00:15:39.810 --> 00:15:40.910
was good for us.

00:15:40.910 --> 00:15:42.030
And it was.

00:15:42.030 --> 00:15:44.060
Polymer was very
bad at that moment.

00:15:44.060 --> 00:15:47.990
But reminder-- we are
using the [INAUDIBLE] API,

00:15:47.990 --> 00:15:54.390
so truth is, the list
of browsers we support

00:15:54.390 --> 00:15:56.110
is actually short.

00:15:56.110 --> 00:15:59.210
So no problem with Polymer.

00:15:59.210 --> 00:16:03.550
At that moment-- no.

00:16:03.550 --> 00:16:06.470
We are going to take back
the player components.

00:16:06.470 --> 00:16:09.130
How are we going to
code it with Polymer?

00:16:09.130 --> 00:16:10.350
We are binding.

00:16:10.350 --> 00:16:13.270
So a movie object is
binding to the player

00:16:13.270 --> 00:16:15.660
by the controller, which
will bind the movie

00:16:15.660 --> 00:16:18.590
to the other subcomponents.

00:16:18.590 --> 00:16:21.930
The timing will be
binding to the template

00:16:21.930 --> 00:16:24.060
by the control panel.

00:16:24.060 --> 00:16:30.650
Our button will fire DOM
native events-- click events.

00:16:30.650 --> 00:16:32.910
The control panel
will handle them.

00:16:32.910 --> 00:16:37.110
And we'll be able to fire
play and stop events.

00:16:37.110 --> 00:16:40.050
And when it receives
those events,

00:16:40.050 --> 00:16:42.550
the player will be
able to code directly

00:16:42.550 --> 00:16:45.000
the renderer components
play and stop.

00:16:45.000 --> 00:16:49.960
So that composition
is more variables,

00:16:49.960 --> 00:16:51.610
but it's actually simpler.

00:16:51.610 --> 00:16:54.810
Because there is no question
of how things should be done.

00:16:54.810 --> 00:16:57.570
You bind elements,
you fire events,

00:16:57.570 --> 00:17:00.580
and you code directly
your child components.

00:17:00.580 --> 00:17:06.410
And with that composition,
we can reuse the renderer.

00:17:06.410 --> 00:17:09.750
So that's what we needed.

00:17:09.750 --> 00:17:14.990
So at that moment, we
started a migration process.

00:17:14.990 --> 00:17:18.599
I was OK to live
two weeks in a cave

00:17:18.599 --> 00:17:21.750
and make the whole
migration and come back.

00:17:21.750 --> 00:17:24.304
But Papa-- Dad--
wasn't OK with that.

00:17:24.304 --> 00:17:27.460
I think I would have missed him.

00:17:27.460 --> 00:17:30.320
So I did that.

00:17:30.320 --> 00:17:34.510
We had a components
hierarchy with Angular.

00:17:34.510 --> 00:17:38.930
And we started using--
as Polymer components are

00:17:38.930 --> 00:17:43.790
standard elements-- we started
changing the last elements

00:17:43.790 --> 00:17:45.490
in the hierarchy.

00:17:45.490 --> 00:17:49.460
So we did not try to match
the two binding systems.

00:17:49.460 --> 00:17:52.650
We did not try to broadcast
the DOM events and the scope.

00:17:52.650 --> 00:17:57.150
We just chose polymer
components as DOM elements

00:17:57.150 --> 00:17:58.860
in our Angular application.

00:17:58.860 --> 00:18:02.900
And we changed, layer by
layer, the whole application.

00:18:02.900 --> 00:18:05.200
We reached the
controller and they just

00:18:05.200 --> 00:18:10.020
became stateful components
and the routing.

00:18:10.020 --> 00:18:10.604
That simple.

00:18:10.604 --> 00:18:11.645
Everything's a component.

00:18:14.480 --> 00:18:19.320
People who compare the two
frameworks-- AngularDart

00:18:19.320 --> 00:18:23.480
and Polymer-- always
miss three things,

00:18:23.480 --> 00:18:27.670
which are injection and
services, the scope,

00:18:27.670 --> 00:18:28.570
and routing.

00:18:28.570 --> 00:18:30.660
And that's because Polymer
is not a framework.

00:18:30.660 --> 00:18:32.360
Polymer is just a library.

00:18:35.750 --> 00:18:38.700
I'm going to explain
how we replaced them.

00:18:38.700 --> 00:18:43.040
About injections and services--
that was actually simple.

00:18:43.040 --> 00:18:46.520
Because dependency
injection mechanisms

00:18:46.520 --> 00:18:52.270
library of AngularDart
can be reused separately,

00:18:52.270 --> 00:18:53.820
so we used it.

00:18:53.820 --> 00:18:59.070
And we implemented an inject--
a notation in our code.

00:18:59.070 --> 00:19:03.620
So we have an Instill element
which extends the Polymer base

00:19:03.620 --> 00:19:04.550
elements.

00:19:04.550 --> 00:19:10.590
And in its life cycle, we
have an injection process.

00:19:10.590 --> 00:19:11.850
So that's not complicated.

00:19:11.850 --> 00:19:13.425
It's the same, actually.

00:19:13.425 --> 00:19:14.800
Our implementation
is not perfect

00:19:14.800 --> 00:19:16.850
yet because we use Reflection.

00:19:16.850 --> 00:19:21.060
But we watch another
system and so on.

00:19:21.060 --> 00:19:25.280
About the scope--
in our use cases,

00:19:25.280 --> 00:19:29.570
the scope satisfied
three use cases.

00:19:29.570 --> 00:19:33.950
There is the communication
between related components,

00:19:33.950 --> 00:19:35.920
the subject of the
component model.

00:19:35.920 --> 00:19:39.050
So we've already
talked about it.

00:19:39.050 --> 00:19:42.320
The internet change tracking,
because sometimes binding

00:19:42.320 --> 00:19:43.020
is not enough.

00:19:43.020 --> 00:19:47.680
And you want to manipulate
the DOM manually.

00:19:47.680 --> 00:19:51.470
And communication between
non-related components.

00:19:51.470 --> 00:19:53.190
I will talk about
the two last ones.

00:19:53.190 --> 00:19:57.770
About internet change tracking--
there is nothing to say,

00:19:57.770 --> 00:19:58.270
actually.

00:19:58.270 --> 00:20:00.910
Everything is in the framework.

00:20:00.910 --> 00:20:03.850
So the scope watch
inside an element

00:20:03.850 --> 00:20:06.370
is replaced by the
property change

00:20:06.370 --> 00:20:10.310
mechanisms of the observed
property annotation.

00:20:10.310 --> 00:20:12.325
So in that case, if
I change my project,

00:20:12.325 --> 00:20:15.390
the project change will
be automatically called

00:20:15.390 --> 00:20:16.730
by the framework.

00:20:16.730 --> 00:20:22.360
And if I change the title, the
title observer will be called.

00:20:22.360 --> 00:20:24.590
The real question was
about communication

00:20:24.590 --> 00:20:28.150
between non-related components.

00:20:28.150 --> 00:20:32.580
You should have a few
use cases like that one.

00:20:32.580 --> 00:20:35.670
If you have a lot,
you have a problem.

00:20:35.670 --> 00:20:40.930
But in that example,
the interesting part

00:20:40.930 --> 00:20:42.060
is the green one.

00:20:42.060 --> 00:20:44.240
I have a ThemeChooser.

00:20:44.240 --> 00:20:51.390
And when my user
changes theme, I

00:20:51.390 --> 00:20:56.010
want the three previews to
be changed in real time.

00:20:56.010 --> 00:21:00.330
So if I use the
previous-- the mechanisms

00:21:00.330 --> 00:21:02.950
that I already
talked about I would

00:21:02.950 --> 00:21:07.250
have to fire an event until
the application container.

00:21:07.250 --> 00:21:12.310
But I don't want my
application container

00:21:12.310 --> 00:21:14.900
to be aware of the SIM.

00:21:14.900 --> 00:21:15.660
He doesn't care.

00:21:15.660 --> 00:21:18.520
He manipulates big components.

00:21:18.520 --> 00:21:20.680
He doesn't care
about the SIM system.

00:21:20.680 --> 00:21:22.970
So what I want to do is that.

00:21:22.970 --> 00:21:28.280
I want to be able to broadcast
a ThemeChangedEvent directly

00:21:28.280 --> 00:21:30.150
to the preview.

00:21:30.150 --> 00:21:35.090
For [INAUDIBLE] case,
we have an event bus.

00:21:35.090 --> 00:21:37.380
We actually use the
package event bus,

00:21:37.380 --> 00:21:40.360
which is the label and pub.

00:21:40.360 --> 00:21:42.490
We extended it a little bit.

00:21:42.490 --> 00:21:46.830
For registering purposes.

00:21:46.830 --> 00:21:49.525
So in our ThemeChooser,
we have eventBus.fire(new

00:21:49.525 --> 00:21:50.525
ThemeChanged(newStyle)).

00:21:52.770 --> 00:21:57.170
That's a true code
of our code base.

00:21:57.170 --> 00:22:01.890
And you preview the elements,
we have just a eventBus.listen.

00:22:01.890 --> 00:22:07.910
So those elements have
to be as few as possible.

00:22:07.910 --> 00:22:15.210
But in that type of use
cases, you have the event bus.

00:22:15.210 --> 00:22:21.290
About routing-- we
actually didn't miss it.

00:22:21.290 --> 00:22:23.090
You need it.

00:22:23.090 --> 00:22:24.570
Like for dependency
injection, you

00:22:24.570 --> 00:22:27.490
can use it as a package,
separately of Angular.

00:22:27.490 --> 00:22:29.600
But in our case,
we tried to make

00:22:29.600 --> 00:22:35.470
Instill the more-- we tried to
make the experience the close

00:22:35.470 --> 00:22:37.150
as possible to a
native application.

00:22:37.150 --> 00:22:40.320
So we have parts of the
application which are almost

00:22:40.320 --> 00:22:42.330
always displayed,
but not always.

00:22:42.330 --> 00:22:45.590
And what we would have
to do with AngularDart

00:22:45.590 --> 00:22:46.970
is nested views.

00:22:46.970 --> 00:22:52.320
But if you asked internet
about nested views,

00:22:52.320 --> 00:22:55.830
you will have that
kind of response.

00:22:55.830 --> 00:23:00.360
Nested views are complicated
and routing isn't done for that.

00:23:00.360 --> 00:23:02.900
So we introduced a
notion of places.

00:23:02.900 --> 00:23:06.415
A place contains two things.

00:23:06.415 --> 00:23:11.300
The state of the application--
which project I am working on--

00:23:11.300 --> 00:23:15.660
and the display state--
which screen, which view,

00:23:15.660 --> 00:23:16.410
is displayed?

00:23:16.410 --> 00:23:18.880
Which paths are displayed?

00:23:18.880 --> 00:23:22.180
And that whole place
is series label.

00:23:22.180 --> 00:23:25.620
So we actually used
the history API.

00:23:25.620 --> 00:23:29.330
And the goal of
routing, which is

00:23:29.330 --> 00:23:34.040
sharing links and manipulating
the browser history-- we

00:23:34.040 --> 00:23:35.690
don't need to share links.

00:23:35.690 --> 00:23:38.390
It's not relevant for Instill.

00:23:38.390 --> 00:23:41.340
But we wanted to be able
to use Next, Previous,

00:23:41.340 --> 00:23:44.190
and to make refresh
on the same page.

00:23:44.190 --> 00:23:47.160
And with our places, we
are able to sterilize them

00:23:47.160 --> 00:23:48.850
and to use the history API.

00:23:48.850 --> 00:23:50.710
So that is great for the user.

00:23:50.710 --> 00:23:53.580
And that's great, also, for
the developer experience.

00:23:53.580 --> 00:23:56.030
Because when you
refresh the application

00:23:56.030 --> 00:24:00.360
after changing the code,
it's just the same place.

00:24:00.360 --> 00:24:08.160
So as a conclusion, we have
a really great development

00:24:08.160 --> 00:24:09.460
environment.

00:24:09.460 --> 00:24:14.920
I think everybody here agrees
that Dart tools are great.

00:24:14.920 --> 00:24:19.160
The package manager, the
built systems, the IDE.

00:24:19.160 --> 00:24:22.640
I'm actually switching from
Eclipse to IntelliJ in Java.

00:24:22.640 --> 00:24:27.605
And IntelliJ is really great,
and I'm happy about the plug

00:24:27.605 --> 00:24:30.130
in.

00:24:30.130 --> 00:24:31.520
It has JavaScript lightness.

00:24:31.520 --> 00:24:36.260
You change the code, refresh
your browser, and that's it.

00:24:36.260 --> 00:24:40.790
But we have a
productivity enhancement.

00:24:40.790 --> 00:24:44.860
Just a tool upgrade with
refactor possibilities,

00:24:44.860 --> 00:24:45.950
et cetera.

00:24:45.950 --> 00:24:51.640
I actually already felt
that way once with Flex.

00:24:51.640 --> 00:24:53.500
Flex was a great framework.

00:24:53.500 --> 00:24:56.520
But difference is
here, this is web.

00:24:56.520 --> 00:24:58.440
This is not flash.

00:24:58.440 --> 00:24:59.545
So that's great.

00:24:59.545 --> 00:25:01.760
We are able to use a
JavaScript libraries.

00:25:01.760 --> 00:25:06.470
We actually use
perfect-scrollbar in our views.

00:25:06.470 --> 00:25:08.670
And we can use web tools.

00:25:08.670 --> 00:25:13.350
So we use, actually, SASS,
or CSS, and browsersync.

00:25:13.350 --> 00:25:18.200
So when you make modifications,
it's refreshed the browser.

00:25:18.200 --> 00:25:20.250
And that's great
for CSS, actually,

00:25:20.250 --> 00:25:24.150
because it doesn't
refresh the whole page.

00:25:24.150 --> 00:25:27.460
And that's it.

00:25:27.460 --> 00:25:35.120
We have the greatest development
environment we never had.

00:25:35.120 --> 00:25:36.140
So thank you.

00:25:36.140 --> 00:25:37.340
FRANCOIS SAULNIER: Merci.

00:25:37.340 --> 00:25:38.890
[APPLAUSE]

