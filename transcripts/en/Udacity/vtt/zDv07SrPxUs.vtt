WEBVTT
Kind: captions
Language: en

00:00:00.440 --> 00:00:03.360
It's time to begin adding the methods
that actually save changes that

00:00:03.360 --> 00:00:04.770
the user makes.

00:00:04.770 --> 00:00:07.190
Remember that up until this point
we could change the text of our

00:00:07.190 --> 00:00:07.970
default note.

00:00:07.970 --> 00:00:10.280
But that whenever the app relaunched,
the same text for

00:00:10.280 --> 00:00:13.990
that note would appear and any changes
added by the user would be lost.

00:00:13.990 --> 00:00:18.200
We can persist the user's changes to
the note by adding just a few lines.

00:00:18.200 --> 00:00:21.530
Let's take another look at
our core data stack struct.

00:00:21.530 --> 00:00:25.130
If we scroll down to the bottom we can
see that we have this extension here

00:00:25.130 --> 00:00:29.988
that already contains what looks to
be a save function, save context.

00:00:29.988 --> 00:00:36.050
If context.hasChanges try context.save.

00:00:36.050 --> 00:00:40.710
So, it looks at this is a wrapper
function for this context.save function.

00:00:40.710 --> 00:00:42.830
So what is this .save function?

00:00:44.200 --> 00:00:50.420
It looks like it's a function of an
estimated object context and it attempts

00:00:50.420 --> 00:00:55.260
to commit unsaved changes to registered
objects to the receiver's parent store.

00:00:56.290 --> 00:00:57.770
Okay so perfect.

00:00:57.770 --> 00:01:02.650
It looks like all we need to do is
call this save contexts function for

00:01:02.650 --> 00:01:05.140
instance of core data stack when
we want to save or changes.

00:01:06.300 --> 00:01:10.240
But I guess the question is then where
and when do we want to call this.

00:01:10.240 --> 00:01:13.680
Several things happen when the save
function is called on context.

00:01:13.680 --> 00:01:16.460
All properties and
relationships are validated.

00:01:16.460 --> 00:01:19.850
All new and
modified objects are saved to disk, and

00:01:19.850 --> 00:01:23.050
all deleted objects
are removed from the database.

00:01:23.050 --> 00:01:25.620
These three steps, depending on
how much data we're dealing with,

00:01:25.620 --> 00:01:28.580
could actually take a human
perceivable amount of time.

00:01:28.580 --> 00:01:30.890
Because of this,
it's really important to think about and

00:01:30.890 --> 00:01:33.370
carefully choose when
to call this function.

00:01:33.370 --> 00:01:35.530
If we call it after every
change the user makes,

00:01:35.530 --> 00:01:38.240
the app will become sluggish and
possibly timeout.

00:01:38.240 --> 00:01:42.120
But if we call it too seldomly, we
risk the user potentially losing data.

00:01:42.120 --> 00:01:43.560
So when is the right time to save?

00:01:43.560 --> 00:01:46.990
Let's look through some of the methods
in our app delegate that represent

00:01:46.990 --> 00:01:49.150
the different states of
the app's life cycle and

00:01:49.150 --> 00:01:52.340
see if maybe one of those methods is
a good place to save the app's state.

