WEBVTT
Kind: captions
Language: en

00:00:00.250 --> 00:00:03.077
The answer of course is the second one, structure of arrays,

00:00:03.077 --> 00:00:06.006
because you're going to have many threads

00:00:06.006 --> 00:00:08.879
executing this code snippet at the same time.

00:00:08.879 --> 00:00:14.704
In the first case, each thread will be accessing element A from a different place in memory

00:00:14.704 --> 00:00:17.887
followed element B and element C and so forth.

00:00:17.887 --> 00:00:19.824
Whereas in the second case,

00:00:19.824 --> 00:00:23.891
all these threads running at the same time will access adjacent elements.

00:00:23.891 --> 00:00:25.935
And remember why this matters?

00:00:25.935 --> 00:00:29.033
Because the actual memory, the DRAM that represents the global memory,

00:00:29.033 --> 00:00:32.520
accesses data in large chunks or bursts.

00:00:32.520 --> 00:00:35.684
So you'll get much better utilization of one of these bursts,

00:00:35.684 --> 00:00:38.109
a fixed sized memory transaction,

00:00:38.109 --> 00:00:42.346
when you have many threads that are simultaneously trying to access memory

00:00:42.346 --> 00:00:44.913
that will be contained within that transaction.

