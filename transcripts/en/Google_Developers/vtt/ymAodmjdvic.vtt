WEBVTT
Kind: captions
Language: en

00:00:00.135 --> 00:00:01.260
ERIC ERNST: I'm Eric Ernst.

00:00:01.260 --> 00:00:04.110
I'm on the language team, and
I really enjoyed Leaf's talk

00:00:04.110 --> 00:00:05.440
this morning.

00:00:05.440 --> 00:00:08.490
But I wanted to interject
a little bit extra here,

00:00:08.490 --> 00:00:11.940
a little extra point of
view that he didn't cover.

00:00:11.940 --> 00:00:18.240
So there is this issue of how
to specify the foundations

00:00:18.240 --> 00:00:18.962
of this language.

00:00:18.962 --> 00:00:21.420
How do we make sure that we
understand what the language is

00:00:21.420 --> 00:00:22.930
in the first place?

00:00:22.930 --> 00:00:25.470
So for that, we have the
language specification,

00:00:25.470 --> 00:00:30.720
and the language specification
was published as ECMA-408

00:00:30.720 --> 00:00:31.560
last summer.

00:00:31.560 --> 00:00:33.900
And we're working on the
language specification,

00:00:33.900 --> 00:00:36.600
and we have a lot of updates
in the current version that's

00:00:36.600 --> 00:00:37.250
in GitHub.

00:00:37.250 --> 00:00:39.360
And then we have these
feature specifications

00:00:39.360 --> 00:00:41.580
that specify the new
features, and they're all

00:00:41.580 --> 00:00:45.930
going to be folded into the
language specification proper.

00:00:45.930 --> 00:00:48.190
But one element in the
language specification

00:00:48.190 --> 00:00:54.300
that is a little bit difficult
to get an overview over

00:00:54.300 --> 00:00:56.100
is the specification
of the grammar

00:00:56.100 --> 00:00:58.140
because what we have
in the specification

00:00:58.140 --> 00:01:01.050
there is a lot of snippets.

00:01:01.050 --> 00:01:04.379
So basically, we
have these snippets

00:01:04.379 --> 00:01:08.970
all over the specification,
and some of these snippets

00:01:08.970 --> 00:01:11.340
have a couple of issues
that we knew about.

00:01:11.340 --> 00:01:12.870
For instance, there
were some places

00:01:12.870 --> 00:01:15.510
where metadata could
be placed in two

00:01:15.510 --> 00:01:16.830
locations in a declaration.

00:01:16.830 --> 00:01:18.960
That was clearly
not intended, so we

00:01:18.960 --> 00:01:21.650
had a need to make sure that
we knew that this specification

00:01:21.650 --> 00:01:23.920
was actually correct.

00:01:23.920 --> 00:01:26.700
So instead of having a
lot of textual snippets

00:01:26.700 --> 00:01:28.770
and then letting
everybody who's working

00:01:28.770 --> 00:01:32.700
on the implementation of a tool
work based on these snippets

00:01:32.700 --> 00:01:35.670
and rely on them
100%, we would want

00:01:35.670 --> 00:01:39.810
to have some direct feedback on
the correctness of the grammar

00:01:39.810 --> 00:01:42.000
itself, the whole grammar.

00:01:42.000 --> 00:01:45.600
So basically, I set out to
create this specification

00:01:45.600 --> 00:01:49.140
parser, which is a parser that
has a complete Dart grammar,

00:01:49.140 --> 00:01:52.260
and that Dart
grammar is something

00:01:52.260 --> 00:01:58.680
that we are going to use to feed
back into the specification.

00:01:58.680 --> 00:02:03.060
So we want to know that the
grammar is, itself, consistent,

00:02:03.060 --> 00:02:05.280
for instance, that it
has ambiguity properties

00:02:05.280 --> 00:02:06.517
that we know about.

00:02:06.517 --> 00:02:08.600
We're not going to get rid
of all the ambiguities.

00:02:08.600 --> 00:02:11.680
We're going to say
how to resolve them.

00:02:11.680 --> 00:02:14.130
We also want to make sure
that the specification

00:02:14.130 --> 00:02:16.860
grammar matches the
actual Dart source code,

00:02:16.860 --> 00:02:18.600
so we can run this
tool, which is

00:02:18.600 --> 00:02:23.550
a parser that is generated
by the ANTLR 3 tool, parser

00:02:23.550 --> 00:02:24.360
generator.

00:02:24.360 --> 00:02:27.810
And then we can see that the
specification of the grammar,

00:02:27.810 --> 00:02:30.960
as we specify it in
this grammar file,

00:02:30.960 --> 00:02:35.250
will actually match the
source code out there.

00:02:35.250 --> 00:02:37.590
This is, as I mentioned,
a specification

00:02:37.590 --> 00:02:39.660
in a particular tool,
this ANTLR tool,

00:02:39.660 --> 00:02:41.490
so that means that
it is not something

00:02:41.490 --> 00:02:45.270
that we're going to make the
specification of the grammar

00:02:45.270 --> 00:02:48.060
of the language because it
has accidental properties.

00:02:48.060 --> 00:02:50.880
It's an ANTLR V3
thing, but still, we're

00:02:50.880 --> 00:02:54.270
going to use it as input.

00:02:54.270 --> 00:02:57.060
So we have a couple
of rules here

00:02:57.060 --> 00:02:59.250
from this specification grammar.

00:02:59.250 --> 00:03:02.370
That is what we're using to
generate the specification

00:03:02.370 --> 00:03:03.630
parser from.

00:03:03.630 --> 00:03:06.690
So if you compare that
with the previous version,

00:03:06.690 --> 00:03:11.490
we had here a function
body, and the function body

00:03:11.490 --> 00:03:13.354
is very much the same.

00:03:13.354 --> 00:03:15.270
Now, it's a little bit
different in the syntax

00:03:15.270 --> 00:03:16.890
because it's a
specification that

00:03:16.890 --> 00:03:22.470
fits ANTLR V3 instead of the
ad hoc format that is used

00:03:22.470 --> 00:03:24.500
in the language specification.

00:03:24.500 --> 00:03:26.940
But if you look at
the type, then it

00:03:26.940 --> 00:03:29.340
used to be type name
and type arguments,

00:03:29.340 --> 00:03:32.040
and that's now a lot
different because we've

00:03:32.040 --> 00:03:36.960
integrated the inline function
types that Leaf mentioned.

00:03:36.960 --> 00:03:40.530
So we are able to
write function of int

00:03:40.530 --> 00:03:44.460
instead of writing a typedef and
then referring to that typedef,

00:03:44.460 --> 00:03:49.260
so that means that we have
a number of constructs

00:03:49.260 --> 00:03:52.440
that are considerably more
complex now than they used

00:03:52.440 --> 00:03:53.766
to be.

00:03:53.766 --> 00:03:55.140
And for instance,
down there, you

00:03:55.140 --> 00:04:00.750
have something like a Type Not
function, which is the old type

00:04:00.750 --> 00:04:03.360
as you knew it, and
then it has the function

00:04:03.360 --> 00:04:04.800
keyword separately.

00:04:04.800 --> 00:04:07.570
And the reason why we have
that is that we cannot allow

00:04:07.570 --> 00:04:10.697
function to be an ordinary type
name because then you could

00:04:10.697 --> 00:04:13.280
give it type arguments, and then
it would be ambiguous whether

00:04:13.280 --> 00:04:18.329
we were currently reading a
function type or we're reading

00:04:18.329 --> 00:04:20.339
something that just uses
functions as the name

00:04:20.339 --> 00:04:22.140
of a class.

00:04:22.140 --> 00:04:26.130
So we have a number of cases
where we need to disambiguate,

00:04:26.130 --> 00:04:27.840
and this is something
that happens

00:04:27.840 --> 00:04:30.660
in different ways in
the specification,

00:04:30.660 --> 00:04:34.620
the big document,
150-page document.

00:04:34.620 --> 00:04:39.582
So the symbol literal at
the top is one good example.

00:04:39.582 --> 00:04:41.415
So basically, if you
have something like Foo

00:04:41.415 --> 00:04:44.010
dot Bar dot To String,
that could be a symbol that

00:04:44.010 --> 00:04:46.110
has three elements,
but it could also

00:04:46.110 --> 00:04:48.210
be a symbol that's
Foo dot Bar, and then

00:04:48.210 --> 00:04:53.040
you run the To String
tear-off process on that

00:04:53.040 --> 00:04:55.020
to get something
that will actually

00:04:55.020 --> 00:04:58.302
be able to return the string
that represents that symbol.

00:04:58.302 --> 00:05:00.260
So you couldn't know
which one it is, and there

00:05:00.260 --> 00:05:03.790
is no syntactic way to say that
because the grammar is simply

00:05:03.790 --> 00:05:06.560
such that it is ambiguous.

00:05:06.560 --> 00:05:09.280
So this is something that is
handled in the specification

00:05:09.280 --> 00:05:12.820
by actually saying that you
continue as far as you can.

00:05:12.820 --> 00:05:15.010
Then the second example is
the function expression,

00:05:15.010 --> 00:05:16.760
and I won't go into
the details with that.

00:05:16.760 --> 00:05:19.720
But the point is that
you could actually

00:05:19.720 --> 00:05:25.150
have something like this
expression that is here--

00:05:25.150 --> 00:05:27.310
x to 42 dot To String.

00:05:27.310 --> 00:05:31.690
Again, you could parse
that as the function,

00:05:31.690 --> 00:05:34.270
and then you tear off
the To String method

00:05:34.270 --> 00:05:38.410
from the function itself, which
is possible but never useful.

00:05:38.410 --> 00:05:42.040
So we adjusted the grammar
to make sure that it's never

00:05:42.040 --> 00:05:43.950
parsed like that.

00:05:43.950 --> 00:05:45.940
And finally, we have
the example down below,

00:05:45.940 --> 00:05:47.890
where you have something
that is an invocation

00:05:47.890 --> 00:05:50.950
of a generic method,
but it also parses

00:05:50.950 --> 00:05:54.460
as two arguments of type bool.

00:05:54.460 --> 00:05:56.920
So basically, what's
happening is that we

00:05:56.920 --> 00:05:58.750
have the specification parser.

00:05:58.750 --> 00:06:01.540
It's supposed to help us
ensure that the grammar

00:06:01.540 --> 00:06:03.770
of the language is
internally consistent,

00:06:03.770 --> 00:06:06.370
so we have a correct grammar.

00:06:06.370 --> 00:06:09.039
It's consistent with itself.

00:06:09.039 --> 00:06:11.080
Second, we want to make
sure that we can actually

00:06:11.080 --> 00:06:14.290
run this actual parser
on the source code

00:06:14.290 --> 00:06:18.200
out there to see that we are
tracking the language as it is,

00:06:18.200 --> 00:06:20.050
and it's consistent
with the tools.

00:06:20.050 --> 00:06:23.110
And finally, this
specification grammar

00:06:23.110 --> 00:06:26.860
is going to be used to
take the grammar rules out

00:06:26.860 --> 00:06:31.150
of this ANTLR formulation
and put it into the language

00:06:31.150 --> 00:06:33.220
specification in
a way that's free

00:06:33.220 --> 00:06:37.060
of these accidental properties
and the extra detail.

00:06:37.060 --> 00:06:37.960
That's it.

00:06:37.960 --> 00:06:40.763
[APPLAUSE]

