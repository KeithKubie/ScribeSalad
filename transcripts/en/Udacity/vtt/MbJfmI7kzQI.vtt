WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:02.650
Earlier we looked at querying string valued fields using

00:00:02.650 --> 00:00:05.640
the greater than and less than operators. Returning to

00:00:05.640 --> 00:00:08.620
our consideration of queries matching string fields. There are

00:00:08.620 --> 00:00:10.710
more complicated sorts of queries that you might want to

00:00:10.710 --> 00:00:14.400
perform on strings than just equality and inequality. For

00:00:14.400 --> 00:00:16.129
example, we often want to look for patterns in

00:00:16.129 --> 00:00:20.250
strings. MongoDB supports querying for string patterns using the

00:00:20.250 --> 00:00:25.730
regex operator. Regex is based on a regular expression library.

00:00:25.730 --> 00:00:30.230
In particular, the Perl Compatible Regular Expressions library.

00:00:30.230 --> 00:00:32.180
For more information, I'd encourage you to just Google

00:00:32.180 --> 00:00:35.180
for this. So the regex operator allows us

00:00:35.180 --> 00:00:38.450
to do regular expression queries in MongoDB. Let's look

00:00:38.450 --> 00:00:41.590
at some examples. Now in this collection, city

00:00:41.590 --> 00:00:45.390
documents, contain a motto field or at least some

00:00:45.390 --> 00:00:47.290
of them do. So as an example of

00:00:47.290 --> 00:00:50.960
doing regex queries in MongoDB, let's take a look

00:00:50.960 --> 00:00:54.090
at some of the words these mottos contain. This

00:00:54.090 --> 00:00:56.580
is a very simple regular expression. In fact, we

00:00:56.580 --> 00:00:58.950
don't even need regex to do this one. So

00:00:58.950 --> 00:01:01.030
if I do the query this way, I should match

00:01:01.030 --> 00:01:05.260
only documents where friendship is the entire string of

00:01:05.260 --> 00:01:09.510
the motto. And here we go, friendship. Okay, so now

00:01:09.510 --> 00:01:13.260
let's begin to expand this regular expression. What I'm

00:01:13.260 --> 00:01:17.290
going to do first is introduce a very simple change.

00:01:17.290 --> 00:01:19.720
Now we're looking for all mottos that contain

00:01:19.720 --> 00:01:23.110
the word friendship. And friendship can either be capitalized

00:01:23.110 --> 00:01:27.200
or not. And so here we have four, where

00:01:27.200 --> 00:01:29.940
before we have simply one document. Okay so, now

00:01:29.940 --> 00:01:32.470
let's expand this a little bit more. And if

00:01:32.470 --> 00:01:34.560
your regex skills are a little rusty, please see

00:01:34.560 --> 00:01:36.690
the instructor notes for documentation and pointers to some

00:01:36.690 --> 00:01:40.120
tutorials. So let's expand this to include another word.

00:01:42.150 --> 00:01:45.690
Okay, so this regular expression will identify all documents

00:01:45.690 --> 00:01:48.970
containing a motto with either the word friendship or the

00:01:48.970 --> 00:01:52.957
word pride. And either word can be capitalized. Let's

00:01:52.957 --> 00:01:56.330
take a look at the actual models themselves. And again,

00:01:56.330 --> 00:01:58.290
I'm going to use a projection to make it

00:01:58.290 --> 00:02:02.247
a little bit easier to see the mottos. Okay and

00:02:02.247 --> 00:02:04.306
we can see that each one of these has

00:02:04.306 --> 00:02:07.400
either the word pride or the word friendship in it.

00:02:07.400 --> 00:02:10.740
And capitalization doesn't matter. Okay so, that's about all the farther I

00:02:10.740 --> 00:02:14.300
want to go with regex queries in this example. The point here is

00:02:14.300 --> 00:02:18.250
that MongoDB supports Perl Compatible Regular Expressions. So, you have a lot of

00:02:18.250 --> 00:02:22.450
power in what types of queries you can do involving string value fields.

