WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
For one of these things to be in the return value, two things have to be true.

00:00:04.000 --> 00:00:08.000
First, it has to actually match this regular expression.

00:00:08.000 --> 00:00:11.000
Second, it has to be in this string.

00:00:11.000 --> 00:00:14.000
So a1 does match this regular expression.

00:00:14.000 --> 00:00:20.000
We're looking for things like a1, a2, b1, b2, c1, etc.

00:00:20.000 --> 00:00:23.000
There's actually an a1 in this string. So, yes.

00:00:23.000 --> 00:00:27.000
2b does not match this regular expression.

00:00:27.000 --> 00:00:33.000
For this particular regular expression, the first letter always has to be a letter and not a digit.

00:00:33.000 --> 00:00:36.000
This doesn't work out. b2 looks very promising.

00:00:36.000 --> 00:00:42.000
It's one of the strings we would match, except that it's not actually found in our haystack string.

00:00:42.000 --> 00:00:44.000
It can't be part of the return value.

00:00:44.000 --> 00:00:48.000
cc doesn't match, because we're looking for things like a1, b1, c1

00:00:48.000 --> 00:00:52.000
that have a digit in the second position. This is not a digit.

00:00:52.000 --> 00:00:56.000
cc3 does not match because it's three characters long

00:00:56.000 --> 00:00:58.000
and we're looking for strings that are two characters long.

00:00:58.000 --> 00:01:02.000
44 doesn't match, because it doesn't start with a through z.

00:01:02.000 --> 00:01:08.000
d4 looks very good. It's the sort of thing we would match from this regular expression,

00:01:08.000 --> 00:01:11.000
but it's not actually in our haystack string.

00:01:11.000 --> 00:01:13.000
Instead we have 44d.

00:01:13.000 --> 00:01:16.000
The empty string--this was a bit of a ringer or distracter thrown in--

00:01:16.000 --> 00:01:20.000
doesn't match our regular expression. It's too short.

00:01:20.000 --> 00:01:24.000
It's zero characters long, and we're matching things that are two characters long.

00:01:24.000 --> 00:01:30.341
But finally c3 matches our regular expression and it's present in the string, so yes.

