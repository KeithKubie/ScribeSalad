WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
We saw this earlier, although I was trying not to call attention to it,

00:00:03.000 --> 00:00:06.000
but what happened is when we add something to a queue that is not full,

00:00:06.000 --> 00:00:08.000
I'm going to increment the counter.

00:00:08.000 --> 00:00:10.000
Similarly, I'm going to increment the counter when we add something to a full queue

00:00:10.000 --> 00:00:12.000
when we remove something from an empty queue

00:00:12.000 --> 00:00:14.000
and when we remove something from a non-empty queue.

00:00:14.000 --> 00:00:19.000
Let's see. We want to make a two element queue to match my drawing.

00:00:19.000 --> 00:00:22.000
Now, let's run the random tester. Okay, here's what it tells us.

00:00:22.000 --> 00:00:28.000
It did 33,000 in sum adds to a non-full queue, 16,000 in sum adds to a full queue,

00:00:28.000 --> 00:00:34.000
33,000 removes from a non-full queue, and 16,000 in sum removes from an empty queue.

00:00:34.000 --> 00:00:37.000
We can see is that at least thus far as got really crude coverage metric goes,

00:00:37.000 --> 00:00:40.000
and of course, we could have got similar information using a branch coverage tool,

00:00:40.000 --> 00:00:42.000
but it is a little easier and more general purpose,

00:00:42.000 --> 00:00:45.000
we can get coverage of our queue, and now, let's try something different.

00:00:45.000 --> 00:00:48.000
Let's imagine that instead of a state machine having just three states.

00:00:48.000 --> 00:00:51.000
Let's say that we had a queue containing 100 elements.

00:00:51.000 --> 00:00:55.000
The dynamics are going to be exactly the same, sometime leaving a lot of nodes in the middle.

00:00:55.000 --> 00:00:57.000
Okay, so we're still going to start at the empty state.

00:00:57.000 --> 00:01:00.000
We're still going to randomly walk around our finite state machine and the question is

00:01:00.000 --> 00:01:03.000
"Are we going to get good behavioral coverage of our queue in this case?" So, let's take a look.

