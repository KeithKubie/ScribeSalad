WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.000
What I'd like you to think about is how long does it take for naïve(a, b)

00:00:06.000 --> 00:00:10.000
to execute as we look at larger and larger inputs.

00:00:10.000 --> 00:00:13.000
These should be really fast. This should still be pretty fast.

00:00:13.000 --> 00:00:15.000
As we give it larger and larger powers of 2,

00:00:15.000 --> 00:00:18.000
you should notice that it's going to take longer and longer

00:00:18.000 --> 00:00:21.000
for this multiplication to actually execute.

00:00:21.000 --> 00:00:24.000
Now, I could keep doing this all day, which probably wouldn't be fun for any of us.

00:00:24.000 --> 00:00:28.000
What I'll do instead is have the computer actually do some of these calculations for me.

00:00:28.000 --> 00:00:31.000
I'll measure the time and then we'll plot it and see how it turns out.

00:00:31.000 --> 00:00:33.000
Here's our naïve algorithm again.

00:00:33.000 --> 00:00:37.000
There's a whole lot of Python code wrapped around it that's going to help us do some plotting

00:00:37.000 --> 00:00:40.000
What we're going to do is we're going to run naïve(n, n) with different values of n.

00:00:40.000 --> 00:00:47.000
The n's are going to be all the powers of 2 from 2^0 to 2^23.

00:00:47.000 --> 00:00:50.000
For each of those what we're going to do--and the details of this aren't important--

00:00:50.000 --> 00:00:53.000
we're going to time how long it takes to do that, gather all those times together,

00:00:53.000 --> 00:00:56.000
and then plot them. Here we go. We run this.

00:00:56.000 --> 00:00:58.000
It generated a plot, and this is what that plot looks like.

00:00:58.000 --> 00:01:00.000
It's a little bit crufty to read at the bottom,

00:01:00.000 --> 00:01:03.000
but you can get a sense of the general shape of it.

00:01:03.000 --> 00:01:06.000
Across this access is the number that we're squaring.

00:01:06.000 --> 00:01:10.000
We're sending naive of this number, and it goes up to billions.

00:01:10.000 --> 00:01:13.000
This is the time in seconds that it takes for it to execute.

00:01:13.000 --> 00:01:16.000
You can see that it actually follows a very recognizable pattern.

00:01:16.000 --> 00:01:18.000
Our plot looks something like this.

00:01:18.000 --> 00:01:23.000
How does the running time t relate to the input that we're giving naive n?

00:01:23.000 --> 00:01:25.000
Is the running time roughly constant--

00:01:25.000 --> 00:01:27.000
as n gets bigger the time stays about the same?

00:01:27.000 --> 00:01:32.000
Is it roughly logarithmic--as n gets bigger the time grows like the log of n?

00:01:32.000 --> 00:01:38.000
Is it roughly linear--as n gets bigger the time grows like cn for some constant c?

00:01:38.000 --> 00:01:44.000
Or is it roughly exponential where the time grows like c^n for some value of c?

