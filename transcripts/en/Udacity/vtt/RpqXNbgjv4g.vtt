WEBVTT
Kind: captions
Language: en

00:00:00.270 --> 00:00:05.370
When the client server relationship that resulted in this formation of a

00:00:05.370 --> 00:00:10.620
transaction tree, completes it's action, for example, let's

00:00:10.620 --> 00:00:15.740
say that, the transaction tree got created as a result of a

00:00:15.740 --> 00:00:20.680
client opening a file, doing a bunch of reads of the file, writes of the file,

00:00:20.680 --> 00:00:23.420
and finally closes the file. At that point,

00:00:23.420 --> 00:00:25.590
that interaction between the client and the server

00:00:25.590 --> 00:00:30.020
is complete. That's when the transaction tree, that

00:00:30.020 --> 00:00:32.460
has been created as a shadow of the

00:00:32.460 --> 00:00:35.900
original client's relationship, would get into gear and

00:00:35.900 --> 00:00:38.080
say, okay, now it is time to clean

00:00:38.080 --> 00:00:40.790
up any resources that may have been partially

00:00:40.790 --> 00:00:44.300
created. In order to satisfy that original client-server

00:00:44.300 --> 00:00:48.120
relationship. And it is the coordinator that initiates

00:00:48.120 --> 00:00:51.240
the termination of a transaction and the termination

00:00:51.240 --> 00:00:53.890
initiated by the coordinator can be for commit,

00:00:53.890 --> 00:00:55.795
or it can be an abort. And the different

00:00:55.795 --> 00:00:58.340
color-coded arrows show you what are all the

00:00:58.340 --> 00:01:02.080
kinds of commands that the coordinator may issue to

00:01:02.080 --> 00:01:05.400
its subordinates. Who in turn will issue the

00:01:05.400 --> 00:01:09.650
same commands to their subordinates. If the transaction manager,

00:01:09.650 --> 00:01:12.270
the coordinator, decides that it is time to

00:01:12.270 --> 00:01:16.970
commit, it might ask for vote request on committee.

00:01:16.970 --> 00:01:23.570
Or it might ask for an abort request. Or it might send an end of commit

00:01:23.570 --> 00:01:26.300
or abort. These are all the communications that

00:01:26.300 --> 00:01:30.040
would be initiated by the coordinator of the transaction.

00:01:30.040 --> 00:01:33.460
And correspondingly, responses will come back up the

00:01:33.460 --> 00:01:36.820
tree commensurate with the request that was given.

00:01:36.820 --> 00:01:39.140
So using again the file service as an

00:01:39.140 --> 00:01:42.120
example, if a client that started a file service

00:01:42.120 --> 00:01:44.720
request crashed for some reason, then the

00:01:44.720 --> 00:01:47.400
transaction manager that is a coordinator for

00:01:47.400 --> 00:01:50.350
their client server relationship will then send

00:01:50.350 --> 00:01:55.170
an abort request to all the participating transaction

00:01:55.170 --> 00:02:01.710
managers that got touched by that particular client, as a result of that file

00:02:01.710 --> 00:02:03.670
service request. For instance it could a

00:02:03.670 --> 00:02:07.820
directory manager, it could be data servers that

00:02:07.820 --> 00:02:10.330
are hosting those files and so on. All

00:02:10.330 --> 00:02:13.390
those transaction managers will get contacted by the coordinator

00:02:13.390 --> 00:02:16.620
through this transaction tree with a request to

00:02:16.620 --> 00:02:20.930
abort that particular transaction ID. And when they get

00:02:20.930 --> 00:02:24.170
that request, these transaction managers can do local

00:02:24.170 --> 00:02:27.450
cleanup, whatever that might mean. And indicate to the

00:02:27.450 --> 00:02:30.690
transaction manager by response that yes, we have

00:02:30.690 --> 00:02:32.910
done what it needs to be done, to clean

00:02:32.910 --> 00:02:36.140
up the interaction that was started by that

00:02:36.140 --> 00:02:39.460
failed IPC chain. All the different kinds of

00:02:39.460 --> 00:02:42.900
communication that I've indicated here are opportunities to

00:02:42.900 --> 00:02:46.140
tailor the commit protocols, depending on the criticality

00:02:46.140 --> 00:02:50.744
of the states. That is, the nature of the bread crumbs that are going to be

00:02:50.744 --> 00:02:53.596
left behind in the different servers. So, for

00:02:53.596 --> 00:02:58.965
instance, if the transaction tree is representing a client-server

00:02:58.965 --> 00:03:02.332
relationship between a client that opened a

00:03:02.332 --> 00:03:06.030
window using the window manager on the screen.

00:03:06.030 --> 00:03:09.096
Then if the client crashes, then the transaction

00:03:09.096 --> 00:03:12.308
manager who was the coordinator for that particular

00:03:12.308 --> 00:03:15.447
client will indicate to the transaction manager at

00:03:15.447 --> 00:03:19.243
the window manager's site that this particular transaction

00:03:19.243 --> 00:03:21.590
ID is aborting. And in that case, the

00:03:21.590 --> 00:03:23.970
window manager can simply clean up the state,

00:03:23.970 --> 00:03:25.800
because the state that it has got is a

00:03:25.800 --> 00:03:30.230
volatile state. Namely, a window that it created on behalf

00:03:30.230 --> 00:03:32.330
of the client, so it can take care of it

00:03:32.330 --> 00:03:35.210
internally. It need not be persisted. On the other hand,

00:03:35.210 --> 00:03:38.960
if the interaction that we're talking about involves persistent data

00:03:38.960 --> 00:03:42.010
structure, for instance through a file server, then the file

00:03:42.010 --> 00:03:45.240
server may have to take more complicated action. So that

00:03:45.240 --> 00:03:49.340
is what this transaction tree allows you to do depending

00:03:49.340 --> 00:03:52.840
on the nature of the client server relationship.

00:03:52.840 --> 00:03:56.950
You can choose to use different commit protocols,

00:03:56.950 --> 00:03:59.210
depending on the criticality of the states that

00:03:59.210 --> 00:04:01.810
are associated and the nature of the breadcrumbs

00:04:01.810 --> 00:04:04.190
that may be left behind in the different

00:04:04.190 --> 00:04:08.890
sites, because of the client-server relationships. Persistent servers

00:04:08.890 --> 00:04:10.710
such as a file system may need a

00:04:10.710 --> 00:04:15.270
sophisticated commit processing, such as a two-phase commit protocol

00:04:15.270 --> 00:04:19.089
while window manager will only need a simple one

00:04:19.089 --> 00:04:22.170
phase commit protocol. So all of those are possible

00:04:22.170 --> 00:04:25.590
with the structure of the transaction tree and the

00:04:25.590 --> 00:04:28.880
kinds of requests that flow through the transaction tree both

00:04:28.880 --> 00:04:31.600
down the tree and up the tree in response.

00:04:31.600 --> 00:04:33.790
And this is the heavy lifting that is done

00:04:33.790 --> 00:04:37.000
by the operating system in order to support different

00:04:37.000 --> 00:04:40.780
classes of services that might exist in the operating system,

00:04:40.780 --> 00:04:43.490
which may require different recovery management.

