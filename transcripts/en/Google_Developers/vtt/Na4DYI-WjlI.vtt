WEBVTT
Kind: captions
Language: en

00:00:00.026 --> 00:00:01.400
JULIUS KAMMERL:
Hello, everybody.

00:00:01.400 --> 00:00:02.650
My name is Julius Kammerl.

00:00:02.650 --> 00:00:04.640
I'm a software engineer
and the tech lead

00:00:04.640 --> 00:00:07.750
for our spatial audio
efforts for virtual reality,

00:00:07.750 --> 00:00:08.850
here at Google.

00:00:08.850 --> 00:00:10.912
First of all, thank
you so much for coming.

00:00:10.912 --> 00:00:13.370
It's really great to see so
much interest for spatial audio

00:00:13.370 --> 00:00:15.220
here at Google I/O this year.

00:00:15.220 --> 00:00:18.530
And we're extremely
excited to share with you

00:00:18.530 --> 00:00:20.760
our spatial audio
rendering engine, which

00:00:20.760 --> 00:00:24.630
is included in the Google
VR SDK, Google's platform

00:00:24.630 --> 00:00:28.060
for high-quality mobile VR.

00:00:28.060 --> 00:00:31.130
Very early on in the project,
we made an experiment

00:00:31.130 --> 00:00:33.710
where we tried to simulate
all aspects of how

00:00:33.710 --> 00:00:35.760
humans perceive sound.

00:00:35.760 --> 00:00:37.710
And these results have
been so incredible

00:00:37.710 --> 00:00:41.200
that this immediately
became a serious project.

00:00:41.200 --> 00:00:45.780
And today we have made available
our best-in-class spatial audio

00:00:45.780 --> 00:00:48.440
rendering solution
for mobile devices,

00:00:48.440 --> 00:00:51.120
with zero compromise in quality.

00:00:51.120 --> 00:00:54.060
This means now you can get a
truly realistic spatial audio

00:00:54.060 --> 00:00:57.290
experience on a mobile
device for free.

00:00:57.290 --> 00:01:00.020
And we know you're
going to love this.

00:01:00.020 --> 00:01:02.430
So today-- together
with my colleagues

00:01:02.430 --> 00:01:05.190
Ian, Alper, and
Adam-- will share

00:01:05.190 --> 00:01:07.710
a lot of background information
about the technology

00:01:07.710 --> 00:01:10.170
that we created for you.

00:01:10.170 --> 00:01:12.830
Specifically, you will
learn about the importance

00:01:12.830 --> 00:01:17.150
of high-quality spatial
audio for virtual reality.

00:01:17.150 --> 00:01:20.290
We will explain how spatial
audio works in our real world,

00:01:20.290 --> 00:01:23.320
and how we can simulate
that in our SDK.

00:01:23.320 --> 00:01:25.245
And parts may sound
complex, but we

00:01:25.245 --> 00:01:28.240
will show you how easy it is
to add spatial audio to your VR

00:01:28.240 --> 00:01:29.510
experiences.

00:01:29.510 --> 00:01:31.080
We will show you
the very few steps

00:01:31.080 --> 00:01:33.140
needed to create
really compelling

00:01:33.140 --> 00:01:35.350
spatial audio experiences.

00:01:35.350 --> 00:01:37.305
And we will share user
design recommendations,

00:01:37.305 --> 00:01:40.100
which will help you to
optimize your audio assets

00:01:40.100 --> 00:01:42.520
and create amazing experiences.

00:01:42.520 --> 00:01:45.446
So you see, you hear a
lot of cool stuff today.

00:01:48.490 --> 00:01:50.760
Spatial audio has
a long history.

00:01:50.760 --> 00:01:53.490
Already, stereo recordings
provided a first sense

00:01:53.490 --> 00:01:57.070
of spaciousness since we are
able to pan a phantom source

00:01:57.070 --> 00:01:59.800
between two speakers.

00:01:59.800 --> 00:02:02.210
And over the years, more and
more speakers were added.

00:02:02.210 --> 00:02:04.770
Here we see a 5.1
setup, which allows you

00:02:04.770 --> 00:02:07.330
to horizontally panel source.

00:02:07.330 --> 00:02:11.940
7.1 provides more elevation.

00:02:11.940 --> 00:02:14.440
And now we are in
the VR era, where

00:02:14.440 --> 00:02:17.880
technologies like ambisonics
provide true audio immersion.

00:02:17.880 --> 00:02:21.320
We are able to play back sound
sources from all directions,

00:02:21.320 --> 00:02:24.480
and we are able to simulate
real-world acoustics in VR.

00:02:27.090 --> 00:02:30.290
And in VR, spatial
audio is vital.

00:02:30.290 --> 00:02:33.820
If someone calls your name, you
know immediately where to look.

00:02:33.820 --> 00:02:35.950
If you drop a coin,
you know immediately

00:02:35.950 --> 00:02:38.510
the direction it rolled.

00:02:38.510 --> 00:02:39.500
Why?

00:02:39.500 --> 00:02:41.380
Because we hear directionally.

00:02:41.380 --> 00:02:43.740
We perceive the location
of sound sources

00:02:43.740 --> 00:02:46.140
in our environment.

00:02:46.140 --> 00:02:49.020
So how does that apply to VR?

00:02:49.020 --> 00:02:52.100
In VR, we put the user into
the middle of the action,

00:02:52.100 --> 00:02:54.820
and he might not even
know where to look.

00:02:54.820 --> 00:02:57.330
Spatial audio provides
a powerful tool

00:02:57.330 --> 00:02:59.350
to control user attention.

00:02:59.350 --> 00:03:02.540
By providing spatial audio cues
from the direction of interest,

00:03:02.540 --> 00:03:06.180
we can guide a user
through a VR experience.

00:03:06.180 --> 00:03:09.160
But it's not only a powerful
content-creation tool.

00:03:09.160 --> 00:03:11.960
The illusion of being
in a different world

00:03:11.960 --> 00:03:13.700
immediately breaks
as soon as there's

00:03:13.700 --> 00:03:16.050
a mismatch between our senses.

00:03:16.050 --> 00:03:18.450
And particularly, the
lack of spatial audio

00:03:18.450 --> 00:03:21.070
immediately breaks
in VR immersion.

00:03:21.070 --> 00:03:23.130
So in this context,
it's really important

00:03:23.130 --> 00:03:26.230
that spatial audio
deserves a lot of attention

00:03:26.230 --> 00:03:29.790
from content creators like you.

00:03:29.790 --> 00:03:31.930
So in order to
bring spatial audio

00:03:31.930 --> 00:03:35.160
to VR, the first question
we should ask ourselves is,

00:03:35.160 --> 00:03:39.180
how does spatial audio
work in our real world?

00:03:39.180 --> 00:03:40.610
Let's take a look
at what happens

00:03:40.610 --> 00:03:43.040
when a sound wave
propagates through a room

00:03:43.040 --> 00:03:45.840
and hits a human head.

00:03:45.840 --> 00:03:47.599
The first thing
we notice here is

00:03:47.599 --> 00:03:50.140
that there's a time difference
between the sound wave hitting

00:03:50.140 --> 00:03:53.330
the left and the right ear, and
that time difference depends

00:03:53.330 --> 00:03:55.610
on the location of
your sound source.

00:03:55.610 --> 00:03:58.130
The more the sound source is
to the left or to the right,

00:03:58.130 --> 00:04:00.800
the larger the
time difference is.

00:04:00.800 --> 00:04:03.280
So just using the time
difference doesn't work.

00:04:03.280 --> 00:04:07.310
At the moment where we
consider high frequencies ,

00:04:07.310 --> 00:04:14.630
the size of the sound waves
traveling through the air

00:04:14.630 --> 00:04:16.459
becomes smaller
than the human head.

00:04:16.459 --> 00:04:20.279
So at approximately
1.5 kilohertz,

00:04:20.279 --> 00:04:22.170
this is exactly
what is happening.

00:04:22.170 --> 00:04:24.180
At this moment, the
human brain isn't

00:04:24.180 --> 00:04:26.900
able to differentiate
anymore if it's

00:04:26.900 --> 00:04:28.890
the same sound wave
hitting both ears,

00:04:28.890 --> 00:04:31.420
or if we have two
separate sound waves.

00:04:31.420 --> 00:04:34.720
So just using the time
difference alone doesn't help.

00:04:34.720 --> 00:04:36.750
We need more.

00:04:36.750 --> 00:04:38.890
And in fact, the
human brain also

00:04:38.890 --> 00:04:40.370
uses the level differences.

00:04:40.370 --> 00:04:42.760
The human head creates
an acoustic shadow,

00:04:42.760 --> 00:04:44.520
which damps high frequencies.

00:04:44.520 --> 00:04:48.390
And at approximately
1.5 kilohertz and above,

00:04:48.390 --> 00:04:51.700
we use these level differences
to localize sound objects,

00:04:51.700 --> 00:04:54.480
as well.

00:04:54.480 --> 00:04:56.670
So we've heard of time
differences and level

00:04:56.670 --> 00:04:57.280
differences.

00:04:57.280 --> 00:04:59.010
But unfortunately,
that's not enough.

00:04:59.010 --> 00:05:02.420
Consider a sound source in
your front or in your back.

00:05:02.420 --> 00:05:05.550
It would have the same
time and level differences.

00:05:05.550 --> 00:05:09.642
What about a sound source at
two o'clock and four o'clock?

00:05:09.642 --> 00:05:12.100
Again, that would have the same
time and level differences.

00:05:12.100 --> 00:05:16.400
In fact, you can draw a set of
cones on the sides of each ear,

00:05:16.400 --> 00:05:18.860
and every sound source on
the surface of each cone

00:05:18.860 --> 00:05:21.800
would have the same time
and level differences.

00:05:21.800 --> 00:05:24.680
So how do we humans
deal with that?

00:05:24.680 --> 00:05:27.220
We do two things.

00:05:27.220 --> 00:05:28.880
First, we move our head.

00:05:28.880 --> 00:05:30.755
We move our head all
the time, and I'm

00:05:30.755 --> 00:05:32.630
sure you have seen dogs
doing the same thing.

00:05:32.630 --> 00:05:36.970
They have a very precise
spatial audio perception system.

00:05:36.970 --> 00:05:38.840
So what happens when
we move our head?

00:05:38.840 --> 00:05:40.540
This is illustrated here.

00:05:40.540 --> 00:05:43.470
On the left side, we see a
sound source in our front

00:05:43.470 --> 00:05:46.220
and in our back, and it results
in the same time and level

00:05:46.220 --> 00:05:47.350
differences.

00:05:47.350 --> 00:05:49.310
At the moment where
we move our head,

00:05:49.310 --> 00:05:51.280
these level and time
differences change

00:05:51.280 --> 00:05:54.200
in exact opposite
direction, which

00:05:54.200 --> 00:05:57.590
helps us to resolve
these ambiguities

00:05:57.590 --> 00:05:59.170
in the horizontal domain.

00:05:59.170 --> 00:06:02.050
But what about the
vertical domain?

00:06:02.050 --> 00:06:05.030
Here we use those
guys-- our outer ears.

00:06:05.030 --> 00:06:07.730
They act as a special
pair of filters

00:06:07.730 --> 00:06:09.560
that are highly-unique to us.

00:06:09.560 --> 00:06:12.330
They create something like
an acoustic fingerprint

00:06:12.330 --> 00:06:14.630
to everything we hear.

00:06:14.630 --> 00:06:17.040
And when sound waves
arrive at our ears,

00:06:17.040 --> 00:06:19.036
they bounce off inside
the so-called pinna

00:06:19.036 --> 00:06:20.910
in different ways,
depending on the direction

00:06:20.910 --> 00:06:22.180
of the sound wave.

00:06:22.180 --> 00:06:25.320
In this way, our outer
ears act as a filter,

00:06:25.320 --> 00:06:29.980
which depends on the direction
of the sound waves arriving.

00:06:29.980 --> 00:06:33.260
And again, by moving
our head and listening

00:06:33.260 --> 00:06:35.310
for the changes in
spectral frequencies,

00:06:35.310 --> 00:06:37.306
we can localize objects in 3D.

00:06:40.450 --> 00:06:41.660
But let's not be selfish.

00:06:41.660 --> 00:06:43.710
Spatial audio is
not only about us.

00:06:43.710 --> 00:06:45.550
It's also about the environment.

00:06:45.550 --> 00:06:48.520
Sound waves do not only
bounce off our ears.

00:06:48.520 --> 00:06:51.230
They bounce off everything
that surrounds us.

00:06:51.230 --> 00:06:53.430
First comes the
direct sound, then we

00:06:53.430 --> 00:06:55.260
hear so-called
early reflections,

00:06:55.260 --> 00:06:57.090
which are the first
strong reflections--

00:06:57.090 --> 00:06:59.620
reflections from
objects, probably, nearby

00:06:59.620 --> 00:07:03.580
and that are still strong enough
to perceive their direction.

00:07:03.580 --> 00:07:04.960
And this builds
up more and more,

00:07:04.960 --> 00:07:07.200
until we hear the
reverb of a room.

00:07:07.200 --> 00:07:10.400
And that reverb tells us a
lot of important information--

00:07:10.400 --> 00:07:13.490
for instance, the size of the
room or the materials used.

00:07:13.490 --> 00:07:15.270
For instance, a
stone room sounds

00:07:15.270 --> 00:07:17.582
different than a room
made out of wood.

00:07:17.582 --> 00:07:20.450
And so you see, we perceive a
lot of important information

00:07:20.450 --> 00:07:22.610
here.

00:07:22.610 --> 00:07:26.260
So now you heard about
spatial audio perception

00:07:26.260 --> 00:07:30.470
and the importance of
real-world acoustic modeling.

00:07:30.470 --> 00:07:32.710
I'd like to invite,
now, Ian to explain

00:07:32.710 --> 00:07:36.556
how we simulate all of this
in VR on a mobile device.

00:07:36.556 --> 00:07:40.397
[APPLAUSE]

00:07:41.360 --> 00:07:44.390
IAN KELLY: Hello, everyone.
[INAUDIBLE] My name is Ian,

00:07:44.390 --> 00:07:46.560
and I'm a software
engineer here at Google.

00:07:46.560 --> 00:07:48.530
And I work on some
of the DSP algorithms

00:07:48.530 --> 00:07:51.850
that underlie how our spatial
audio technology works.

00:07:51.850 --> 00:07:53.480
Today, I'm going to
bring it through,

00:07:53.480 --> 00:07:58.250
how it is we spatialize
sounds in virtual reality.

00:07:58.250 --> 00:08:01.620
Now, we're all familiar with
the concept of loudspeakers.

00:08:01.620 --> 00:08:04.490
Well, with an array of
loud speakers positioned

00:08:04.490 --> 00:08:06.700
around a listener's
head, we can begin

00:08:06.700 --> 00:08:10.320
to playback audio through the
individual loudspeakers in such

00:08:10.320 --> 00:08:13.050
a way that we could
recreate the sound wave,

00:08:13.050 --> 00:08:16.820
as if it came from an object
anywhere in space around.

00:08:16.820 --> 00:08:19.690
So in this way, we could
create a synthetic sound source

00:08:19.690 --> 00:08:21.630
anywhere around the listener.

00:08:21.630 --> 00:08:23.920
We use a method that's
known as ambisonics,

00:08:23.920 --> 00:08:26.190
in order to calculate
what the signal played

00:08:26.190 --> 00:08:28.560
through each loud speaker
needs to be in order

00:08:28.560 --> 00:08:30.120
to recreate these sound waves.

00:08:30.120 --> 00:08:32.710
And we can use this not just
for the direct sound coming

00:08:32.710 --> 00:08:36.539
from the source to the listener,
but also for reflections

00:08:36.539 --> 00:08:37.912
coming from the walls.

00:08:37.912 --> 00:08:39.370
In this way, we
could also recreate

00:08:39.370 --> 00:08:43.179
an artificial environment
around the listener's head.

00:08:43.179 --> 00:08:44.940
And with more and
more loudspeakers,

00:08:44.940 --> 00:08:46.870
we can move into
three dimensions

00:08:46.870 --> 00:08:50.722
and create an array of loud
speakers around the listener.

00:08:50.722 --> 00:08:52.180
In that manner,
you could play back

00:08:52.180 --> 00:08:54.850
sounds from any
direction-- reflections

00:08:54.850 --> 00:08:57.400
from walls, ceiling, or floor.

00:08:57.400 --> 00:08:59.580
And with more and
more loud speakers,

00:08:59.580 --> 00:09:02.140
you can have a greater
fidelity in the sound waves

00:09:02.140 --> 00:09:04.120
you're recreating.

00:09:04.120 --> 00:09:06.630
But all of that still
leaves you with one foot

00:09:06.630 --> 00:09:08.520
in the real world, so to speak.

00:09:08.520 --> 00:09:11.780
Because sure, you have a
synthetic sound source,

00:09:11.780 --> 00:09:13.339
synthetic reflections
from surfaces

00:09:13.339 --> 00:09:14.380
that aren't really there.

00:09:14.380 --> 00:09:18.140
But the loudspeakers themselves
are still very much rooted

00:09:18.140 --> 00:09:19.871
in the real world.

00:09:19.871 --> 00:09:21.620
And the manner in which
we get around this

00:09:21.620 --> 00:09:24.630
is what's known as
binaural rendering.

00:09:24.630 --> 00:09:28.120
Now, Julius spoke about the
cues that humans use in order

00:09:28.120 --> 00:09:30.190
to localize sounds,
whether they be

00:09:30.190 --> 00:09:33.270
the time of arrival differences,
the level differences,

00:09:33.270 --> 00:09:36.750
or the changes in the frequency
as a sound moves up and down.

00:09:36.750 --> 00:09:40.250
All of this information can
be captured in a special set

00:09:40.250 --> 00:09:41.630
of audio filters.

00:09:41.630 --> 00:09:45.030
And these are the HRTFs
you might have heard about.

00:09:45.030 --> 00:09:47.780
Well, when sound is
played through an HRTF

00:09:47.780 --> 00:09:50.220
and then over headphones,
it gives the listener

00:09:50.220 --> 00:09:52.970
the impression-- it fools
your auditory system

00:09:52.970 --> 00:09:56.964
into thinking-- that a sound
source is somewhere in space.

00:09:56.964 --> 00:09:59.320
Well, at Google we used
this to create what

00:09:59.320 --> 00:10:02.200
we call virtual loudspeakers.

00:10:02.200 --> 00:10:04.240
And we can have a set
of these audio filters

00:10:04.240 --> 00:10:06.320
for each loud
speaker around you,

00:10:06.320 --> 00:10:10.717
in the large, spherical array.

00:10:10.717 --> 00:10:12.800
So a very real sense, when
you're using Google VR,

00:10:12.800 --> 00:10:16.110
you have a virtual, spherical
array of loudspeakers

00:10:16.110 --> 00:10:19.690
around you at all times.

00:10:19.690 --> 00:10:23.090
We move our heads
constantly, and this

00:10:23.090 --> 00:10:24.730
is conscious and subconscious.

00:10:24.730 --> 00:10:26.450
In fact, your head
is always in motion,

00:10:26.450 --> 00:10:28.520
whether you're
aware of it or not.

00:10:28.520 --> 00:10:31.540
But when you're wearing a
HMD, this motion is tracked.

00:10:31.540 --> 00:10:35.470
And we use that data in order to
rotate all of our sound sources

00:10:35.470 --> 00:10:38.760
and all of the reflections
in the opposite direction

00:10:38.760 --> 00:10:40.810
to how you're turning your head.

00:10:40.810 --> 00:10:43.080
And we do this so
that when you turn,

00:10:43.080 --> 00:10:45.570
sources don't track with
you-- but instead, they

00:10:45.570 --> 00:10:47.330
stay locked in space.

00:10:47.330 --> 00:10:49.820
And you can use all of the
cues that Julius spoke about

00:10:49.820 --> 00:10:52.160
in the real world,
in order to localize

00:10:52.160 --> 00:10:56.480
sound sources in virtual
environments that we create.

00:10:56.480 --> 00:11:00.470
Now, you might naively think
that with this finite set

00:11:00.470 --> 00:11:02.560
of loud speakers around
the listener's head,

00:11:02.560 --> 00:11:04.500
there would be a finite
number of positions

00:11:04.500 --> 00:11:06.330
in which we could
specialize audio,

00:11:06.330 --> 00:11:08.840
but that is not the case.

00:11:08.840 --> 00:11:11.150
In fact, to explain this,
all you need think about

00:11:11.150 --> 00:11:13.200
are the old-fashioned
stereo loudspeakers

00:11:13.200 --> 00:11:14.830
you probably have at home.

00:11:14.830 --> 00:11:18.560
And one can pan a source
between a pair of loudspeakers

00:11:18.560 --> 00:11:21.405
and create a phantom
source anywhere in between.

00:11:21.405 --> 00:11:24.450
Well, we do something very
similar, if a little more

00:11:24.450 --> 00:11:28.600
complex, using ambisonics to
pan sound sources anywhere

00:11:28.600 --> 00:11:32.970
between the virtual loudspeakers
in our spherical array.

00:11:32.970 --> 00:11:35.080
In this way, you can
have an audio source

00:11:35.080 --> 00:11:37.510
anywhere around your head
and immerse the listener

00:11:37.510 --> 00:11:39.710
in a sphere of sound.

00:11:39.710 --> 00:11:42.480
And there's also a computational
advantage offered here,

00:11:42.480 --> 00:11:45.130
because even as we add
in more and more sound

00:11:45.130 --> 00:11:47.370
sources and more and
more reflections,

00:11:47.370 --> 00:11:49.610
the number of virtual
loudspeakers that we're

00:11:49.610 --> 00:11:53.530
rendering this over
stays constant.

00:11:53.530 --> 00:11:56.890
Julius touched upon the
concept of sound propagation--

00:11:56.890 --> 00:12:01.030
of a sound wave propagating
from a source to a listener.

00:12:01.030 --> 00:12:02.990
Well, a very nice
analogy for this

00:12:02.990 --> 00:12:06.020
is the way ripples spread
from a source-- a drop

00:12:06.020 --> 00:12:08.580
falling on a pond, outwards.

00:12:08.580 --> 00:12:11.240
As they spread outwards,
they diminish in amplitude

00:12:11.240 --> 00:12:15.590
because the energy is spread
over a larger and larger area.

00:12:15.590 --> 00:12:19.050
Well, this is replicated
in VR, in order

00:12:19.050 --> 00:12:21.530
to give a third dimension
to the spatial audio we're

00:12:21.530 --> 00:12:22.690
listening to.

00:12:22.690 --> 00:12:25.150
As you move towards
or away from sources--

00:12:25.150 --> 00:12:28.160
or they do the same for
you-- we model the way

00:12:28.160 --> 00:12:30.660
in which the amplitudes
change in the real world,

00:12:30.660 --> 00:12:33.210
in order to give you this
sense of distance in your VR

00:12:33.210 --> 00:12:34.300
environments.

00:12:34.300 --> 00:12:36.050
Take, for example, occlusion.

00:12:36.050 --> 00:12:38.940
We use low-pass filtering
in order to model occlusion,

00:12:38.940 --> 00:12:42.210
because in the real world,
when a sound wave emanates

00:12:42.210 --> 00:12:44.970
from a source and strikes
an object between you

00:12:44.970 --> 00:12:47.070
and the source, the
higher frequencies

00:12:47.070 --> 00:12:49.030
are reflected backwards
off the source,

00:12:49.030 --> 00:12:52.080
while lower frequencies can
diffract around and still reach

00:12:52.080 --> 00:12:53.365
the listener's ears.

00:12:53.365 --> 00:12:56.750
And by using smoothly-changing,
low-pass filters,

00:12:56.750 --> 00:13:00.160
we can accurately recreate
the sounds of real occlusions

00:13:00.160 --> 00:13:03.460
in the virtual environments
you're creating.

00:13:03.460 --> 00:13:06.330
Now, so far I've talked
about the direct sound--

00:13:06.330 --> 00:13:09.270
the sound coming directly from
the source to the listener.

00:13:09.270 --> 00:13:11.550
But that is not
where the story ends.

00:13:11.550 --> 00:13:13.120
The next thing to
arrive at your ears

00:13:13.120 --> 00:13:15.820
are what are called
the early reflections,

00:13:15.820 --> 00:13:18.500
and we spatialize the
early reflections.

00:13:18.500 --> 00:13:22.430
We calculate the number of
bounces they make off surfaces,

00:13:22.430 --> 00:13:25.010
the eventual direction
they're arriving in from,

00:13:25.010 --> 00:13:28.220
the time and distance they've
taken to travel there,

00:13:28.220 --> 00:13:31.750
and we use this to create
a new set of audio sources,

00:13:31.750 --> 00:13:34.730
spatialized on our virtual
array of loudspeakers

00:13:34.730 --> 00:13:36.340
all around the listener.

00:13:36.340 --> 00:13:39.950
And we do this just for the
first few, early reflections.

00:13:39.950 --> 00:13:41.530
For the next few
million reflections,

00:13:41.530 --> 00:13:43.650
we do something else--
because not only would it

00:13:43.650 --> 00:13:46.990
be computationally expensive,
but it is perceptually not

00:13:46.990 --> 00:13:47.980
necessary.

00:13:47.980 --> 00:13:49.944
In fact, we can do
better than that.

00:13:49.944 --> 00:13:51.860
If you think about what
happens to sound waves

00:13:51.860 --> 00:13:53.850
as they bounce
around inside a room,

00:13:53.850 --> 00:13:57.210
over time the arrivals at your
ears of the different waves

00:13:57.210 --> 00:13:59.800
builds up, and up,
and up, and you

00:13:59.800 --> 00:14:03.340
get something that is very much
like white noise-- overlapping

00:14:03.340 --> 00:14:06.240
reflections, distorted by the
bounce as they're arriving.

00:14:06.240 --> 00:14:08.200
Well, this
white-noise-like portion

00:14:08.200 --> 00:14:12.250
is what's generally referred
to as the reverb of a room.

00:14:12.250 --> 00:14:13.950
And in the Google
VR audio system,

00:14:13.950 --> 00:14:16.430
we have a powerful
reverb engine built in.

00:14:16.430 --> 00:14:18.940
It reacts in real
time to changes

00:14:18.940 --> 00:14:21.120
in the size and shape
of the environment,

00:14:21.120 --> 00:14:23.310
to changes in the acoustic
properties of the surface

00:14:23.310 --> 00:14:25.570
materials you have.

00:14:25.570 --> 00:14:29.337
It provides a different reverb
to each of the listener's ears.

00:14:29.337 --> 00:14:30.920
And this gives you
a very strong sense

00:14:30.920 --> 00:14:34.880
of spaciousness-- of a sound
being without your head.

00:14:34.880 --> 00:14:37.680
We provide a reverb
that decays differently

00:14:37.680 --> 00:14:39.200
at different frequencies.

00:14:39.200 --> 00:14:42.050
Because in the real
world, if I clap by hand,

00:14:42.050 --> 00:14:45.120
the sound waves dissipate
at different rates,

00:14:45.120 --> 00:14:46.950
depending on frequency.

00:14:46.950 --> 00:14:48.960
We model all of
this so that we give

00:14:48.960 --> 00:14:52.180
the most realistic-sounding
reverb we possibly can.

00:14:52.180 --> 00:14:56.600
And all of it is done reacting
in real time on mobile.

00:14:56.600 --> 00:15:00.180
Now, shown here is a
highly-simplified audio graph,

00:15:00.180 --> 00:15:03.020
but it captures many of the
key components in our system.

00:15:03.020 --> 00:15:05.260
We take in mono-audio.

00:15:05.260 --> 00:15:08.770
We spatialize it over our
virtual loudspeaker array.

00:15:08.770 --> 00:15:10.690
We calculate the
early reflections--

00:15:10.690 --> 00:15:12.020
where they arrive in from.

00:15:12.020 --> 00:15:14.090
And we provide an
advanced reverb system.

00:15:14.090 --> 00:15:15.950
And all of this is
rendered binaurally,

00:15:15.950 --> 00:15:18.650
over a pair of headphones,
reacting in real time

00:15:18.650 --> 00:15:20.970
to listeners' head
movements, changes

00:15:20.970 --> 00:15:24.000
in the source's position, and
changes in the environment's

00:15:24.000 --> 00:15:26.387
size, shape, and
surface materials.

00:15:26.387 --> 00:15:27.970
And I haven't even
had time to mention

00:15:27.970 --> 00:15:30.060
all of the different
effects we're applying.

00:15:30.060 --> 00:15:32.590
There are other things like
complex directivity patterns

00:15:32.590 --> 00:15:35.020
for a source's emission,
the ability to play back

00:15:35.020 --> 00:15:36.542
ambisonic sound fields.

00:15:36.542 --> 00:15:39.000
And in order to see at all,
what you're going to have to do

00:15:39.000 --> 00:15:41.270
is just go and download
the Google VR SDK

00:15:41.270 --> 00:15:43.740
and start playing around
with it yourselves.

00:15:43.740 --> 00:15:46.430
And in order, now, to bring
you through our SDKs and APIs,

00:15:46.430 --> 00:15:47.400
I'd like to welcome
onto the stage

00:15:47.400 --> 00:15:48.910
my friend and colleague,
Alper Gungormusler.

00:15:48.910 --> 00:15:49.300
ALPER GUNGORMUSLER: Thanks.

00:15:49.300 --> 00:15:50.174
IAN KELLY: Thank you.

00:15:50.174 --> 00:15:53.373
[APPLAUSE]

00:15:54.324 --> 00:15:55.740
ALPER GUNGORMUSLER:
Hey, everyone.

00:15:55.740 --> 00:15:56.940
My name is Alper.

00:15:56.940 --> 00:15:59.580
I'm a software engineer on
the Google VR audio team,

00:15:59.580 --> 00:16:02.370
focusing on the
development of our SDKs.

00:16:02.370 --> 00:16:05.470
So now we've covered how our
spatial audio system works.

00:16:05.470 --> 00:16:07.460
Let's take a look
at how you can use

00:16:07.460 --> 00:16:10.670
it to easily enable spatial
audio in your virtual reality

00:16:10.670 --> 00:16:13.110
experiences.

00:16:13.110 --> 00:16:15.780
So as part of the
Google VR SDK, we

00:16:15.780 --> 00:16:20.630
target three main platforms--
Android, iOS, and Unity.

00:16:20.630 --> 00:16:24.150
With our native SDKs,
for Android and iOS,

00:16:24.150 --> 00:16:26.405
we provide you all
the tools you need

00:16:26.405 --> 00:16:31.600
to add special audio to any apps
or games you wish to create,

00:16:31.600 --> 00:16:34.860
with a simple few
function calls.

00:16:34.860 --> 00:16:37.320
So to give you an idea
how this looks like,

00:16:37.320 --> 00:16:41.330
let's take a look
at our Android SDK.

00:16:41.330 --> 00:16:44.770
Here you see a short code
snippet written in Java .

00:16:44.770 --> 00:16:47.120
It demonstrates all the
steps required for you

00:16:47.120 --> 00:16:51.030
to play back specialized
audio in your Android app.

00:16:51.030 --> 00:16:55.190
So we can break this down
into four simple steps.

00:16:55.190 --> 00:16:58.180
First, we initialize our
spatial audio engine.

00:16:58.180 --> 00:17:00.060
This is basically
responsible for everything

00:17:00.060 --> 00:17:02.970
unrelated in the
Google VR system.

00:17:02.970 --> 00:17:05.829
Of course, this wouldn't do
much without any audio sources.

00:17:05.829 --> 00:17:06.670
Right?

00:17:06.670 --> 00:17:10.660
So here, we create our audio
source-- or as we call it,

00:17:10.660 --> 00:17:14.030
our sound object-- with
a simple function call.

00:17:14.030 --> 00:17:16.990
So after the creation, you
can manipulate its properties,

00:17:16.990 --> 00:17:21.089
such as its volume or its
position, as seen here.

00:17:21.089 --> 00:17:24.060
Then once you are happy with
the settings, all left to do

00:17:24.060 --> 00:17:26.819
is to play the sound
at the desired time.

00:17:26.819 --> 00:17:29.040
So what about environment, then?

00:17:29.040 --> 00:17:32.690
We worked really hard to provide
a solution as simple and as

00:17:32.690 --> 00:17:34.970
intuitive as possible
for you to add room

00:17:34.970 --> 00:17:37.130
effects into your environments.

00:17:37.130 --> 00:17:41.380
These room effects can be
edited or modified any time,

00:17:41.380 --> 00:17:43.470
with a single function call.

00:17:43.470 --> 00:17:46.160
So as you can see here,
all you need to think about

00:17:46.160 --> 00:17:48.970
is the size and the
surface materials

00:17:48.970 --> 00:17:50.540
of the room you are in.

00:17:50.540 --> 00:17:53.190
Then our audio system
will handle the rest

00:17:53.190 --> 00:17:56.450
to add up your audio sources
to the environment you've just

00:17:56.450 --> 00:17:57.860
selected.

00:17:57.860 --> 00:17:59.160
And that's it.

00:17:59.160 --> 00:18:01.350
You're all set.

00:18:01.350 --> 00:18:04.210
So we also provide an audio
plugin for the Unity game

00:18:04.210 --> 00:18:07.280
engine, with an even wider
set of options to play with.

00:18:07.280 --> 00:18:10.450
With this plugin, you can
create and build your apps

00:18:10.450 --> 00:18:13.020
to any VR headset
you wish to use.

00:18:13.020 --> 00:18:15.290
So let's take a look.

00:18:15.290 --> 00:18:17.970
Here, let's say you have this
guitar object in your Unity

00:18:17.970 --> 00:18:20.970
scene, and you want to
specialize the sound.

00:18:20.970 --> 00:18:24.090
So here, all you need to
do is to attach Google VR

00:18:24.090 --> 00:18:26.900
audio source components onto it.

00:18:26.900 --> 00:18:30.310
Then with this component,
you have all these basic game

00:18:30.310 --> 00:18:32.930
parameters, such as muting,
looping, or changing

00:18:32.930 --> 00:18:34.550
the volume of the sound.

00:18:34.550 --> 00:18:36.880
And more interestingly,
we provide

00:18:36.880 --> 00:18:39.970
you these two additional
properties-- directivity

00:18:39.970 --> 00:18:44.150
and occlusion effects-- which
can be very useful from the VR

00:18:44.150 --> 00:18:45.450
point of view.

00:18:45.450 --> 00:18:47.280
So let's first
take a look at how

00:18:47.280 --> 00:18:50.390
the directivity property works.

00:18:50.390 --> 00:18:52.640
So the directivity
of an audio source

00:18:52.640 --> 00:18:56.450
can be used to change the
way you hear the sound.

00:18:56.450 --> 00:18:59.335
So imagine you are
walking around this guitar

00:18:59.335 --> 00:19:00.470
in the real world.

00:19:00.470 --> 00:19:03.290
You would hear its [INAUDIBLE]
sound differently from one way

00:19:03.290 --> 00:19:04.640
to another.

00:19:04.640 --> 00:19:07.240
For instance, you would
hear it much louder

00:19:07.240 --> 00:19:10.280
when you're just in front
of it than behind, right?

00:19:10.280 --> 00:19:12.960
So with the directivity
property, and using

00:19:12.960 --> 00:19:16.060
these directivity
patterns, you can precisely

00:19:16.060 --> 00:19:19.520
control how this
should sound like.

00:19:19.520 --> 00:19:23.510
So as seen here, you can change
the shape of this pattern

00:19:23.510 --> 00:19:26.340
by using the Alpha
parameter you can see here

00:19:26.340 --> 00:19:28.940
to control how it
should sound like when

00:19:28.940 --> 00:19:31.770
approached from different
angles all around.

00:19:31.770 --> 00:19:34.910
And in addition to that,
with the Sharpness parameter

00:19:34.910 --> 00:19:37.196
you can actually adjust,
smoothly, the width

00:19:37.196 --> 00:19:39.590
of the shape, accordingly.

00:19:39.590 --> 00:19:41.895
And by choosing the
right parameters, Alpha

00:19:41.895 --> 00:19:45.100
and Sharpness, you can
closely match the directivity

00:19:45.100 --> 00:19:50.360
of real-world objects in your
virtual reality environment.

00:19:50.360 --> 00:19:52.860
So our guitar object
would not usually

00:19:52.860 --> 00:19:54.590
be alone in the
environment, right?

00:19:54.590 --> 00:19:57.110
So there can be different
objects, obstacles,

00:19:57.110 --> 00:19:59.470
walls interact all around.

00:19:59.470 --> 00:20:01.780
To achieve this
interaction dynamically,

00:20:01.780 --> 00:20:03.990
we use our occlusion effects.

00:20:03.990 --> 00:20:06.430
So for instance,
here in this example,

00:20:06.430 --> 00:20:10.090
the sound of this guitar object
should be blocked by the walls

00:20:10.090 --> 00:20:11.250
when it's out of the view.

00:20:11.250 --> 00:20:12.190
Right?

00:20:12.190 --> 00:20:15.730
So once you enable
occlusion for the guitar,

00:20:15.730 --> 00:20:18.480
we automatically detect
all the physical colliders

00:20:18.480 --> 00:20:20.990
in the scene, which
occludes guitar's

00:20:20.990 --> 00:20:25.060
[INAUDIBLE] to the listener, to
apply this effect accordingly.

00:20:25.060 --> 00:20:29.020
In fact, you can even go further
and add more and more obstacles

00:20:29.020 --> 00:20:31.950
in between, to amplify
this effect in real time

00:20:31.950 --> 00:20:35.300
or mobile during gameplay.

00:20:35.300 --> 00:20:40.400
So to simulate the acoustic
environment itself,

00:20:40.400 --> 00:20:42.940
we use Google VR Audio Rooms.

00:20:42.940 --> 00:20:44.820
As you can see
here on the right,

00:20:44.820 --> 00:20:46.320
we have a wide
range of parameters

00:20:46.320 --> 00:20:50.990
selected to customize the
very room you wish to create.

00:20:50.990 --> 00:20:54.470
So you can use surface
materials to determine

00:20:54.470 --> 00:20:56.530
how the sound waves
should get deflected

00:20:56.530 --> 00:20:59.510
from each wall of your room,
and how they're affected

00:20:59.510 --> 00:21:01.510
in different frequencies.

00:21:01.510 --> 00:21:04.100
Then we provide
additional effectivity

00:21:04.100 --> 00:21:07.700
on reverb properties, to
fine-tune this outcome.

00:21:07.700 --> 00:21:10.910
So here, parameters
such as gain and time

00:21:10.910 --> 00:21:15.043
can be used to adjust the
loudness and time of your room

00:21:15.043 --> 00:21:15.830
sound.

00:21:15.830 --> 00:21:18.280
Moreover, you can use
the brightness parameter

00:21:18.280 --> 00:21:22.150
to adjust and balance the low
and high frequencies, which

00:21:22.150 --> 00:21:25.310
can be very useful when you
want to simulate how empty

00:21:25.310 --> 00:21:28.440
or how full your room
should sound like.

00:21:28.440 --> 00:21:30.560
For instance,
decreasing this value

00:21:30.560 --> 00:21:32.870
dramatically can be
a perfect solution

00:21:32.870 --> 00:21:34.400
when you want to
make your room feel

00:21:34.400 --> 00:21:37.530
like it's full of furniture.

00:21:37.530 --> 00:21:40.510
So of course, with all these
parameters to select from,

00:21:40.510 --> 00:21:42.430
it's totally up to
your imagination

00:21:42.430 --> 00:21:45.590
to create your own,
unique-sounding world.

00:21:45.590 --> 00:21:48.700
So you see, here are
dozens of surface materials

00:21:48.700 --> 00:21:51.260
for each wall of your room.

00:21:51.260 --> 00:21:56.160
For instance, you can
use surface materials

00:21:56.160 --> 00:21:58.490
like marble or
sheetrock when you

00:21:58.490 --> 00:22:01.560
want to create more [INAUDIBLE]
environments, such as caves

00:22:01.560 --> 00:22:02.810
or cathedrals.

00:22:02.810 --> 00:22:05.210
On the other hand, you
can go for something

00:22:05.210 --> 00:22:09.010
like a heavy curtain when
you want to have more damped,

00:22:09.010 --> 00:22:11.460
dry-sounding environments.

00:22:11.460 --> 00:22:15.000
And here one thing worth
remembering, again,

00:22:15.000 --> 00:22:18.330
that all the parameters we've
been talking about so far-- all

00:22:18.330 --> 00:22:23.200
those properties can be updated
and manipulated in real time.

00:22:23.200 --> 00:22:27.675
So as Ian previously
mentioned, our audio system

00:22:27.675 --> 00:22:30.330
will react immediately
to every change

00:22:30.330 --> 00:22:34.420
you make in the environment,
in real time during gameplay.

00:22:34.420 --> 00:22:40.030
So to simply put, there are
just limitless possibilities

00:22:40.030 --> 00:22:43.900
in the types of experiences you
can go for, for your audience.

00:22:43.900 --> 00:22:45.660
And for that, I'm
now handing over

00:22:45.660 --> 00:22:48.830
to Adam, who will be talking
more about the user experience

00:22:48.830 --> 00:22:50.951
side, for designing
for special audio.

00:22:50.951 --> 00:22:51.450
Thanks.

00:22:51.450 --> 00:22:55.258
[APPLAUSE]

00:22:56.690 --> 00:22:58.040
ADAM GLAZIER: Thanks, Alper.

00:22:58.040 --> 00:23:01.300
Hi, I'm Adam, and I'm a
user experience designer.

00:23:01.300 --> 00:23:05.220
And over the past year, I've
been designing apps for VR,

00:23:05.220 --> 00:23:07.250
for the Daydream team.

00:23:07.250 --> 00:23:09.850
During this experience we've
learned a lot of things,

00:23:09.850 --> 00:23:11.740
integrating this plugin.

00:23:11.740 --> 00:23:14.370
And one thing I can say is that
it performs extremely well,

00:23:14.370 --> 00:23:17.300
even against real-world tests.

00:23:17.300 --> 00:23:19.550
So today I'm going to share
some design considerations

00:23:19.550 --> 00:23:21.240
that we've learned for that.

00:23:21.240 --> 00:23:23.490
The fundamental building
blocks you'll be working with

00:23:23.490 --> 00:23:27.510
are the audio room, the
GVR soundfield sources,

00:23:27.510 --> 00:23:30.740
and the GVR audio sources.

00:23:30.740 --> 00:23:32.840
So let's take a look
at the room model.

00:23:32.840 --> 00:23:37.140
Room models provide early
reflections and reverb,

00:23:37.140 --> 00:23:40.780
and the materials of
the walls around you.

00:23:40.780 --> 00:23:43.270
They make a living room
sound like a living room,

00:23:43.270 --> 00:23:45.120
or outdoors sound
like an outdoor scene.

00:23:48.220 --> 00:23:51.350
It's really easy to make these
rooms sound however you want,

00:23:51.350 --> 00:23:53.141
because you have
so much control.

00:23:53.141 --> 00:23:54.890
You can change the
materials of the walls,

00:23:54.890 --> 00:23:58.110
and the floor, and the ceiling,
make the walls transparent,

00:23:58.110 --> 00:24:00.190
and connect different
rooms together

00:24:00.190 --> 00:24:02.310
to get different sonic
sounds from different parts

00:24:02.310 --> 00:24:03.320
of the room.

00:24:03.320 --> 00:24:05.220
It's super powerful.

00:24:05.220 --> 00:24:07.320
It's easy to make a living
room sound like a cave,

00:24:07.320 --> 00:24:10.570
or a cave sound
like a living room.

00:24:10.570 --> 00:24:12.370
So when you're thinking
about the ambience

00:24:12.370 --> 00:24:15.870
of a scene-- like the ocean
waves in the distance,

00:24:15.870 --> 00:24:19.930
or swaying trees,
or birds-- there's

00:24:19.930 --> 00:24:22.490
two ways that you can
make these sounds happen.

00:24:22.490 --> 00:24:28.330
You've got the GVR soundfield
sources and the audio sources.

00:24:28.330 --> 00:24:33.360
The soundfield sources
playback ambisonic audio files.

00:24:33.360 --> 00:24:36.110
These are similar to
how a 360 photo works,

00:24:36.110 --> 00:24:37.940
or a SkyBox in your app.

00:24:37.940 --> 00:24:39.950
You hear sound from
all directions,

00:24:39.950 --> 00:24:43.650
from one audio file.

00:24:43.650 --> 00:24:47.590
Ambisonic sources don't
respond to the user moving

00:24:47.590 --> 00:24:49.400
in a direction, like
walking, but they

00:24:49.400 --> 00:24:51.200
do respond to head rotation.

00:24:51.200 --> 00:24:53.410
So they work really
good for sounds

00:24:53.410 --> 00:24:56.210
that are in the distance,
when you need a complex scene

00:24:56.210 --> 00:24:58.950
with a lot of ambience.

00:24:58.950 --> 00:25:02.860
For things that do move,
use the audio sources.

00:25:02.860 --> 00:25:05.630
For instance, dropping an
audio source on a bird--

00:25:05.630 --> 00:25:07.300
it just sounds
natural, whether it's

00:25:07.300 --> 00:25:10.000
flying near you or far away.

00:25:10.000 --> 00:25:13.550
You can also use audio
sources as ambient objects.

00:25:13.550 --> 00:25:15.740
So imagine sprinkling
audio sources

00:25:15.740 --> 00:25:17.410
all around your environment.

00:25:17.410 --> 00:25:19.030
As the user walks
around, they'll

00:25:19.030 --> 00:25:21.435
hear these sounds go by
them, and it will just

00:25:21.435 --> 00:25:22.226
feel super natural.

00:25:25.560 --> 00:25:30.270
So as Julius mentioned
earlier, we move our heads

00:25:30.270 --> 00:25:32.330
to locate sounds.

00:25:32.330 --> 00:25:35.120
But because users aren't
always moving their head,

00:25:35.120 --> 00:25:37.100
we can do a little
trick for them.

00:25:37.100 --> 00:25:39.590
When there's something
out of their field of view

00:25:39.590 --> 00:25:41.390
that demands
attention, that we want

00:25:41.390 --> 00:25:43.870
them to be able to
precisely locate,

00:25:43.870 --> 00:25:47.130
you can animate the
position of that sound.

00:25:47.130 --> 00:25:49.260
Users don't notice
that happening,

00:25:49.260 --> 00:25:52.060
and when they look at it
you stop animating it,

00:25:52.060 --> 00:25:53.460
and they instantly locate it.

00:25:56.140 --> 00:25:59.900
A similar thing that happens is
that when you repeat the sound,

00:25:59.900 --> 00:26:04.020
users are more
likely to locate it.

00:26:04.020 --> 00:26:06.950
In addition, if you have
a single sound file that's

00:26:06.950 --> 00:26:09.650
comprised of many
complex elements,

00:26:09.650 --> 00:26:11.420
it achieves the same effect.

00:26:11.420 --> 00:26:13.330
Let me give you an example.

00:26:13.330 --> 00:26:15.610
Imagine you lose
your phone at home,

00:26:15.610 --> 00:26:20.110
and your ring tone is a
single sine wave beep.

00:26:20.110 --> 00:26:22.380
When that ring tone
happens, you're probably

00:26:22.380 --> 00:26:24.750
not going to find your phone.

00:26:24.750 --> 00:26:26.820
You might even think
it was the dishwasher,

00:26:26.820 --> 00:26:29.340
or that you were hearing
things altogether.

00:26:29.340 --> 00:26:32.710
But if that beep happens
even one more time,

00:26:32.710 --> 00:26:34.650
you're much more
likely to locate it,

00:26:34.650 --> 00:26:38.116
and you'll know
you're not crazy.

00:26:38.116 --> 00:26:39.990
When you're picking your
sounds for your app,

00:26:39.990 --> 00:26:41.830
there's important
sonic characteristics

00:26:41.830 --> 00:26:43.680
to take in mind
if you want users

00:26:43.680 --> 00:26:45.982
to be able to spatially
locate sounds, and have

00:26:45.982 --> 00:26:47.065
them sound more realistic.

00:26:49.980 --> 00:26:52.800
As Julius mentioned
earlier, the occlusion

00:26:52.800 --> 00:26:57.140
from your head and the ear
shape filter the full frequency

00:26:57.140 --> 00:26:59.360
spectrum of audio.

00:26:59.360 --> 00:27:02.040
So with this in mind, make
sure that your sounds have

00:27:02.040 --> 00:27:03.910
a broad range of frequencies.

00:27:03.910 --> 00:27:07.810
Avoid using sounds that are
lacking in high frequencies.

00:27:07.810 --> 00:27:11.620
Avoid really quiet sounds,
or really simple sounds

00:27:11.620 --> 00:27:13.970
like a sine wave beep.

00:27:13.970 --> 00:27:16.680
These simple tones--
like a sine wave beep--

00:27:16.680 --> 00:27:20.640
are even difficult to
spatialize in the real world.

00:27:20.640 --> 00:27:22.730
Audio sources take mono files.

00:27:22.730 --> 00:27:25.450
And there's thousands
of tools and libraries

00:27:25.450 --> 00:27:29.710
available to get sound effects
for your games and experiences.

00:27:29.710 --> 00:27:32.487
With ambisonic audio, this
is just up and coming.

00:27:32.487 --> 00:27:34.070
There's not a lot
out there right now,

00:27:34.070 --> 00:27:36.810
but over the next year,
expect to see a host of tools

00:27:36.810 --> 00:27:39.280
and libraries for these.

00:27:39.280 --> 00:27:44.340
But to get started right now,
there's two ways to do this.

00:27:44.340 --> 00:27:45.940
You can use a
plugin-- like this one

00:27:45.940 --> 00:27:49.460
from Ambix-- to take
your mono or stereo files

00:27:49.460 --> 00:27:53.400
and map them to a
3D ambisonic sphere.

00:27:53.400 --> 00:27:56.350
On that sphere, you can
animate the position of sound

00:27:56.350 --> 00:27:59.420
so they match what you
see visually in the scene.

00:27:59.420 --> 00:28:02.740
You can add audio effects,
and then output your mix

00:28:02.740 --> 00:28:06.390
to a 4-channel ambisonic file.

00:28:06.390 --> 00:28:08.820
The second way
you can do this is

00:28:08.820 --> 00:28:12.240
by recording your own ambisonic
files with a microphone,

00:28:12.240 --> 00:28:14.810
like the Zoom H2n.

00:28:14.810 --> 00:28:18.150
With these microphones, it's
just like a 360-degree camera.

00:28:18.150 --> 00:28:21.300
You can drop it anywhere
in a room, outside,

00:28:21.300 --> 00:28:23.668
and capture all sound
from all directions.

00:28:26.930 --> 00:28:29.560
Finally, when you get your
experiences up and running,

00:28:29.560 --> 00:28:32.620
it's really important
to check your work.

00:28:32.620 --> 00:28:36.410
Make sure that what you see
and what you hear match.

00:28:36.410 --> 00:28:38.690
It just needs to sound natural.

00:28:38.690 --> 00:28:41.890
So let me share an example
that we stumbled upon.

00:28:41.890 --> 00:28:48.070
We had an ocean scene that
was this low-poly ocean that

00:28:48.070 --> 00:28:52.650
was not moving, and we threw
some sound of waves crashing.

00:28:52.650 --> 00:28:56.440
And it just felt really wrong.

00:28:56.440 --> 00:28:59.030
So one tip is just,
look around your scene.

00:28:59.030 --> 00:29:00.830
See what's moving,
and put sounds

00:29:00.830 --> 00:29:04.160
for things that are moving or
things that are out of view,

00:29:04.160 --> 00:29:05.980
that you would expect to hear.

00:29:05.980 --> 00:29:08.330
When you're testing your
app, if your experience

00:29:08.330 --> 00:29:10.840
allows users to
roam freely, we've

00:29:10.840 --> 00:29:13.680
seen that users love
finding these sound sources

00:29:13.680 --> 00:29:16.340
and putting their ear
right up next to them.

00:29:16.340 --> 00:29:19.330
So make sure the sounds you're
using are really high-quality,

00:29:19.330 --> 00:29:21.510
and that no matter where
you are in the experience,

00:29:21.510 --> 00:29:23.950
the sounds are natural.

00:29:23.950 --> 00:29:25.960
And when you do
check your work, make

00:29:25.960 --> 00:29:29.500
sure to check on headphones--
different types of headphones.

00:29:29.500 --> 00:29:32.750
These provide the best
spatial audio experience.

00:29:32.750 --> 00:29:35.060
Try not to test your
work on laptop speakers

00:29:35.060 --> 00:29:36.460
or cellphone speakers.

00:29:36.460 --> 00:29:40.970
So to get started right now,
check out the links to the SDK,

00:29:40.970 --> 00:29:42.270
and check out the demo app.

00:29:42.270 --> 00:29:45.060
It's a fun example
of how good this is.

00:29:45.060 --> 00:29:49.430
We'll also be posting things in
the Spaces app-- some examples

00:29:49.430 --> 00:29:50.630
and tutorial videos.

00:29:50.630 --> 00:29:54.580
[MUSIC PLAYING]

