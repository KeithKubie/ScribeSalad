WEBVTT
Kind: captions
Language: en

00:00:03.420 --> 00:00:05.820
This episode is supported by Hover.

00:00:06.000 --> 00:00:09.440
Hi, I'm Carrie Anne, and welcome to Crash
Course Computer Science!

00:00:09.440 --> 00:00:12.740
Computers in the 1940s and early 50s ran one
program at a time.

00:00:12.740 --> 00:00:15.559
A programmer would write one at their desk,
for example, on punch cards.

00:00:15.559 --> 00:00:19.630
Then, they’d carry it to a room containing
a room-sized computer, and hand it to a dedicated

00:00:19.630 --> 00:00:20.630
computer operator.

00:00:20.630 --> 00:00:24.400
That person would then feed the program into
the computer when it was next available.

00:00:24.400 --> 00:00:27.140
The computer would run it, spit out some output,
and halt.

00:00:27.140 --> 00:00:31.730
This very manual process worked OK back when
computers were slow, and running a program

00:00:31.730 --> 00:00:33.621
often took hours, days or even weeks.

00:00:33.621 --> 00:00:38.760
But, as we discussed last episode, computers
became faster... and faster... and faster

00:00:38.760 --> 00:00:39.980
– exponentially so!

00:00:39.980 --> 00:00:43.620
Pretty soon, having humans run around and
inserting programs into readers was taking

00:00:43.620 --> 00:00:46.149
longer than running the actual programs themselves.

00:00:46.149 --> 00:00:50.700
We needed a way for computers to operate themselves,
and so, operating systems were born.

00:00:50.700 --> 00:00:59.840
INTRO

00:00:59.840 --> 00:01:03.140
Operating systems, or OS’es for short, are
just programs.

00:01:03.140 --> 00:01:07.080
But, special privileges on the hardware let
them run and manage other programs.

00:01:07.080 --> 00:01:10.860
They’re typically the first one to start
when a computer is turned on, and all subsequent

00:01:10.860 --> 00:01:12.570
programs are launched by the OS.

00:01:12.570 --> 00:01:16.980
They got their start in the 1950s, as computers
became more widespread and more powerful.

00:01:16.980 --> 00:01:21.760
The very first OSes augmented the mundane,
manual task of loading programs by hand.

00:01:21.760 --> 00:01:25.690
Instead of being given one program at a time,
computers could be given batches.

00:01:25.690 --> 00:01:30.000
When the computer was done with one, it would automatically and near-instantly start the next.

00:01:30.000 --> 00:01:33.520
There was no downtime while someone scurried
around an office to find the next program

00:01:33.520 --> 00:01:34.520
to run.

00:01:34.530 --> 00:01:36.190
This was called batch processing.

00:01:36.190 --> 00:01:38.430
While computers got faster, they also got
cheaper.

00:01:38.430 --> 00:01:42.330
So, they were popping up all over the world,
especially in universities and government

00:01:42.330 --> 00:01:43.330
offices.

00:01:43.330 --> 00:01:45.340
Soon, people started sharing software.

00:01:45.340 --> 00:01:46.830
But there was a problem…

00:01:46.830 --> 00:01:51.140
In the era of one-off computers, like the
Harvard Mark 1 or ENIAC, programmers only

00:01:51.140 --> 00:01:53.860
had to write code for that one single machine.

00:01:53.860 --> 00:01:58.150
The processor, punch card readers, and printers
were known and unchanging.

00:01:58.150 --> 00:02:02.260
But as computers became more widespread, their
configurations were not always identical,

00:02:02.260 --> 00:02:05.660
like computers might have the same CPU, but
not the same printer.

00:02:05.660 --> 00:02:07.560
This was a huge pain for programmers.

00:02:07.560 --> 00:02:11.249
Not only did they have to worry about writing
their program, but also how to interface with

00:02:11.249 --> 00:02:16.440
each and every model of printer, and all devices
connected to a computer, what are called peripherals.

00:02:16.440 --> 00:02:20.880
Interfacing with early peripherals was very
low level, requiring programmers to know intimate

00:02:20.880 --> 00:02:23.100
hardware details about each device.

00:02:23.100 --> 00:02:27.880
On top of that, programmers rarely had access to every model of a peripheral to test their code on.

00:02:27.880 --> 00:02:32.060
So, they had to write code as best they could,
often just by reading manuals, and hope it

00:02:32.060 --> 00:02:33.060
worked when shared.

00:02:33.069 --> 00:02:36.590
Things weren’t exactly plug-and-play back
then… more plug-and-pray.

00:02:36.590 --> 00:02:40.840
This was clearly terrible, so to make it easier
for programmers, Operating Systems stepped

00:02:40.840 --> 00:02:45.480
in as intermediaries between software programs
and hardware peripherals.

00:02:45.480 --> 00:02:50.320
More specifically, they provided a software
abstraction, through APIs, called device drivers.

00:02:50.320 --> 00:02:54.620
These allow programmers to talk to common
input and output hardware, or I/O for short,

00:02:54.629 --> 00:02:56.430
using standardized mechanisms.

00:02:56.430 --> 00:03:00.129
For example, programmers could call a function
like “print highscore”, and the OS would

00:03:00.129 --> 00:03:02.349
do the heavy lifting to get it onto paper.

00:03:02.349 --> 00:03:06.290
By the end of the 1950s, computers had gotten
so fast, they were often idle waiting for

00:03:06.290 --> 00:03:09.829
slow mechanical things, like printers and
punch card readers.

00:03:09.829 --> 00:03:13.939
While programs were blocked on I/O, the expensive
processor was just chillin’... not like

00:03:13.939 --> 00:03:15.479
a villain… you know, just relaxing.

00:03:15.479 --> 00:03:19.500
In the late 50’s, the University of Manchester,
in the UK, started work on a supercomputer

00:03:19.500 --> 00:03:21.959
called Atlas, one of the first in the world.

00:03:21.959 --> 00:03:25.780
They knew it was going to be wicked fast,
so they needed a way to make maximal use of

00:03:25.780 --> 00:03:26.870
the expensive machine.

00:03:26.870 --> 00:03:31.200
Their solution was a program called the Atlas
Supervisor, finished in 1962.

00:03:31.200 --> 00:03:35.370
This operating system not only loaded programs
automatically, like earlier batch systems,

00:03:35.370 --> 00:03:39.170
but could also run several at the same time
on its single CPU.

00:03:39.170 --> 00:03:40.569
It did this through clever scheduling.

00:03:40.569 --> 00:03:44.760
Let’s say we have a game program running
on Atlas, and we call the function “print

00:03:44.760 --> 00:03:48.540
highscore” which instructs Atlas to print
the value of a variable named “highscore”

00:03:48.540 --> 00:03:52.609
onto paper to show our friends that we’re
the ultimate champion of virtual tiddlywinks.

00:03:52.609 --> 00:03:57.309
That function call is going to take a while,
the equivalent of thousands of clock cycles,

00:03:57.309 --> 00:04:01.400
because mechanical printers are slow in comparison
to electronic CPUs.

00:04:01.400 --> 00:04:05.980
So instead of waiting for the I/O to finish,
Atlas instead puts our program to sleep, then

00:04:05.980 --> 00:04:08.980
selects and runs another program that’s
waiting and ready to run.

00:04:08.980 --> 00:04:12.049
Eventually, the printer will report back to
Atlas that it finished printing the value

00:04:12.049 --> 00:04:13.290
of “highscore”.

00:04:13.290 --> 00:04:16.930
Atlas then marks our program as ready to go,
and at some point, it will be scheduled to

00:04:16.930 --> 00:04:21.690
run again on the CPU, and continue onto the
next line of code following the print statement.

00:04:21.690 --> 00:04:25.979
In this way, Atlas could have one program
running calculations on the CPU, while another

00:04:25.980 --> 00:04:29.760
was printing out data, and yet another reading
in data from a punch tape.

00:04:29.760 --> 00:04:34.080
Atlas’ engineers doubled down on this idea,
and outfitted their computer with 4 paper

00:04:34.100 --> 00:04:38.240
tape readers, 4 paper tape punches, and up
to 8 magnetic tape drives.

00:04:38.240 --> 00:04:43.210
This allowed many programs to be in progress
all at once, sharing time on a single CPU.

00:04:43.210 --> 00:04:46.900
This ability, enabled by the Operating System,
is called multitasking.

00:04:46.920 --> 00:04:51.740
There’s one big catch to having many programs running simultaneously on a single computer, though.

00:04:51.740 --> 00:04:55.160
Each one is going to need some memory, and
we can’t lose that program’s data when

00:04:55.160 --> 00:04:56.759
we switch to another program.

00:04:56.759 --> 00:04:59.479
The solution is to allocate each program its
own block of memory.

00:04:59.480 --> 00:05:04.000
So, for example, let’s say a computer has
10,000 memory locations in total.

00:05:04.000 --> 00:05:10.700
Program A might get allocated memory addresses
0 through 999, and Program B might get 1000

00:05:10.710 --> 00:05:13.400
through 1999, and so on.

00:05:13.400 --> 00:05:17.960
If a program asks for more memory, the operating
system decides if it can grant that request,

00:05:17.960 --> 00:05:20.590
and if so, what memory block to allocate next.

00:05:20.590 --> 00:05:23.470
This flexibility is great, but introduces
a quirk.

00:05:23.470 --> 00:05:27.729
It means that Program A could end up being
allocated non-sequential blocks of memory,

00:05:27.729 --> 00:05:33.300
in say addresses 0 through 999, and 2000 through 2999.

00:05:33.300 --> 00:05:37.349
And this is just a simple example - a real
program might be allocated dozens of blocks

00:05:37.349 --> 00:05:38.650
scattered all over memory.

00:05:38.650 --> 00:05:42.560
As you might imagine, this would get really
confusing for programmers to keep track of.

00:05:42.560 --> 00:05:46.240
Maybe there’s a long list of sales data
in memory that a program has to total up at

00:05:46.250 --> 00:05:50.040
the end of the day, but this list is stored
across a bunch of different blocks of memory.

00:05:50.050 --> 00:05:54.880
To hide this complexity, Operating Systems
virtualize memory locations.

00:05:54.880 --> 00:05:58.860
With Virtual Memory, programs can assume their
memory always starts at address 0, keeping

00:05:58.860 --> 00:06:00.520
things simple and consistent.

00:06:00.520 --> 00:06:04.720
However, the actual, physical location in
computer memory is hidden and abstracted by

00:06:04.720 --> 00:06:06.240
the operating system.

00:06:06.240 --> 00:06:13.960
Just a new level of abstraction.

00:06:13.960 --> 00:06:17.620
Let’s take our example Program B, which
has been allocated a block of memory from

00:06:17.620 --> 00:06:21.080
address 1000 to 1999.

00:06:21.080 --> 00:06:25.880
As far as Program B can tell, this appears
to be a block from 0 to 999.

00:06:25.880 --> 00:06:29.930
The OS and CPU handle the virtual-to-physical
memory remapping automatically.

00:06:29.930 --> 00:06:36.250
So, if Program B requests memory location
42, it really ends up reading address 1042.

00:06:36.250 --> 00:06:40.319
This virtualization of memory addresses is
even more useful for Program A, which in our

00:06:40.319 --> 00:06:44.580
example, has been allocated two blocks of
memory that are separated from one another.

00:06:44.580 --> 00:06:46.750
This too is invisible to Program A.

00:06:46.750 --> 00:06:51.490
As far as it can tell, it’s been allocated
a continuous block of 2000 addresses.

00:06:51.490 --> 00:06:57.039
When Program A reads memory address 999, that
does coincidentally map to physical memory

00:06:57.039 --> 00:06:59.009
address 999.

00:06:59.009 --> 00:07:03.469
But if Program A reads the very next value
in memory, at address 1000, that gets mapped

00:07:03.469 --> 00:07:06.319
behind the scenes to physical memory address
2000.

00:07:06.319 --> 00:07:11.580
This mechanism allows programs to have flexible
memory sizes, called dynamic memory allocation,

00:07:11.580 --> 00:07:13.900
that appear to be continuous to them.

00:07:13.900 --> 00:07:18.260
It simplifies everything and offers tremendous
flexibility to the Operating System in running

00:07:18.260 --> 00:07:20.100
multiple programs simultaneously.

00:07:20.100 --> 00:07:23.860
Another upside of allocating each program
its own memory, is that they’re better isolated

00:07:23.870 --> 00:07:24.860
from one another.

00:07:24.870 --> 00:07:28.900
So, if a buggy program goes awry, and starts
writing gobbledygook, it can only trash its

00:07:28.900 --> 00:07:31.660
own memory, not that of other programs.

00:07:31.660 --> 00:07:33.840
This feature is called Memory Protection.

00:07:33.840 --> 00:07:37.930
This is also really useful in protecting against
malicious software, like viruses.

00:07:37.930 --> 00:07:41.710
For example, we generally don’t want other
programs to have the ability to read or modify

00:07:41.710 --> 00:07:45.719
the memory of, let say, our email, with that
kind of access, malware could send emails

00:07:45.720 --> 00:07:48.520
on your behalf and maybe steal personal information.

00:07:48.520 --> 00:07:49.300
Not good!

00:07:49.300 --> 00:07:51.660
Atlas had both virtual and protected memory.

00:07:51.660 --> 00:07:54.560
It was the first computer and OS to support
these features!

00:07:54.560 --> 00:07:58.080
By the 1970s, computers were sufficiently
fast and cheap.

00:07:58.080 --> 00:08:02.400
Institutions like a university could buy a
computer and let students use it.

00:08:02.409 --> 00:08:06.979
It was not only fast enough to run several
programs at once, but also give several users

00:08:06.979 --> 00:08:09.479
simultaneous, interactive access.

00:08:09.479 --> 00:08:13.550
This was done through a terminal, which is
a keyboard and screen that connects to a big

00:08:13.550 --> 00:08:16.410
computer, but doesn’t contain any processing
power itself.

00:08:16.410 --> 00:08:21.110
A refrigerator-sized computer might have 50
terminals connected to it, allowing up to

00:08:21.110 --> 00:08:22.110
50 users.

00:08:22.110 --> 00:08:27.039
Now operating systems had to handle not just
multiple programs, but also multiple users.

00:08:27.039 --> 00:08:30.889
So that no one person could gobble up all
of a computer's resources, operating systems

00:08:30.889 --> 00:08:32.659
were developed that offered time-sharing.

00:08:32.659 --> 00:08:37.270
With time-sharing each individual user was
only allowed to utilize a small fraction of

00:08:37.270 --> 00:08:39.860
the computer’s processor, memory, and so
on.

00:08:39.860 --> 00:08:44.630
Because computers are so fast, even getting
just 1/50th of its resources was enough for

00:08:44.630 --> 00:08:45.750
individuals to complete many tasks.

00:08:45.750 --> 00:08:50.339
The most influential of early time-sharing
Operating Systems was Multics, or Multiplexed

00:08:50.340 --> 00:08:54.080
Information and Computing Service, released
in 1969.

00:08:54.080 --> 00:08:58.520
Multics was the first major operating
system designed to be secure from the outset.

00:08:58.520 --> 00:09:02.640
Developers didn’t want mischievous users
accessing data they shouldn't, like students

00:09:02.640 --> 00:09:05.740
attempting to access the final exam on their
professor’s account.

00:09:05.740 --> 00:09:10.270
Features like this meant Multics was really
complicated for its time, using around 1 Megabit

00:09:10.270 --> 00:09:12.269
of memory, which was a lot back then!

00:09:12.269 --> 00:09:15.840
That might be half of a computer's memory,
just to run the OS!

00:09:15.840 --> 00:09:18.930
Dennis Ritchie, one of the researchers working
on Multics, once said:

00:09:18.930 --> 00:09:23.200
“One of the obvious things that went wrong
with Multics as a commercial success was just

00:09:23.200 --> 00:09:25.209
that it was sort of over-engineered in a sense.

00:09:25.209 --> 00:09:26.790
There was just too much in it.”

00:09:26.790 --> 00:09:28.920
T
his lead Dennis, and another Multics researcher,

00:09:28.920 --> 00:09:33.640
Ken Thompson, to strike out on their own and build a new, lean operating system… called Unix.

00:09:33.640 --> 00:09:36.240
They wanted to separate the OS into two parts:

00:09:36.240 --> 00:09:40.520
First was the core functionality of the OS,
things like memory management, multitasking,

00:09:40.520 --> 00:09:43.330
and dealing with I/O, which is called the
kernel.

00:09:43.330 --> 00:09:47.260
The second part was a wide array of useful
tools that came bundled with, but not part

00:09:47.260 --> 00:09:49.780
of the kernel, things like programs and libraries.

00:09:49.780 --> 00:09:53.460
Building a compact, lean kernel meant intentionally
leaving some functionality out.

00:09:53.470 --> 00:09:55.840
Tom Van Vleck, another Multics developer,
recalled:

00:09:55.840 --> 00:10:00.540
“I remarked to Dennis that easily half the
code I was writing in Multics was error recovery

00:10:00.540 --> 00:10:01.280
code."

00:10:01.280 --> 00:10:03.740
He said, "We left all that stuff out of Unix.

00:10:03.740 --> 00:10:07.870
If there's an error, we have this routine
called panic, and when it is called, the machine

00:10:07.870 --> 00:10:11.019
crashes, and you holler down the hall, 'Hey,
reboot it.'"”

00:10:11.019 --> 00:10:14.140
You might have heard of kernel panics, This
is where the term came from.

00:10:14.140 --> 00:10:18.459
It’s literally when the kernel crashes,
has no recourse to recover, and so calls a

00:10:18.459 --> 00:10:19.940
function called “panic”.

00:10:19.940 --> 00:10:22.950
Originally, all it did was print the word
“panic” and then enter

00:10:22.950 --> 00:10:24.030
an infinite loop.

00:10:24.030 --> 00:10:28.120
This simplicity meant that Unix could be run
on cheaper and more diverse hardware, making

00:10:28.120 --> 00:10:31.120
it popular inside Bell Labs, where Dennis
and Ken worked.

00:10:31.120 --> 00:10:34.820
As more developers started using Unix to build
and run their own programs, the number of

00:10:34.820 --> 00:10:36.320
contributed tools grew.

00:10:36.320 --> 00:10:41.000
Soon after its release in 1971, it gained
compilers for different programming languages

00:10:41.000 --> 00:10:45.510
and even a word processor, quickly making
it one of the most popular OSes of the 1970s

00:10:45.510 --> 00:10:46.529
and 80s.

00:10:46.529 --> 00:10:50.680
At the same time, by the early 1980s, the
cost of a basic computer had fallen to the

00:10:50.680 --> 00:10:55.019
point where individual people could afford
one, called a personal or home computer.

00:10:55.019 --> 00:10:59.480
These were much simpler than the big mainframes
found at universities, corporations, and governments.

00:10:59.480 --> 00:11:02.240
So, their operating systems had to be equally
simple.

00:11:02.240 --> 00:11:07.769
For example, Microsoft’s Disk Operating
System, or MS-DOS, was just 160 kilobytes,

00:11:07.769 --> 00:11:10.589
allowing it to fit, as the name suggests,
onto a single disk.

00:11:10.589 --> 00:11:15.171
First released in 1981, it became the most
popular OS for early home computers, even

00:11:15.171 --> 00:11:18.650
though it lacked multitasking and protected
memory.

00:11:18.650 --> 00:11:22.240
This meant that programs could, and would,
regularly crash the system.

00:11:22.240 --> 00:11:26.399
While annoying, it was an acceptable tradeoff,
as users could just turn their own computers

00:11:26.400 --> 00:11:27.120
off and on again!

00:11:27.120 --> 00:11:32.060
Even early versions of Windows, first released
by Microsoft in 1985 and which dominated the

00:11:32.060 --> 00:11:35.640
OS scene throughout the 1990s, lacked strong
memory protection.

00:11:35.640 --> 00:11:40.079
When programs misbehaved, you could get the
blue screen of death, a sign that a program

00:11:40.080 --> 00:11:43.589
had crashed so badly that it took down the
whole operating system.

00:11:43.589 --> 00:11:48.320
Luckily, newer versions of Windows have better protections and usually don't crash that often.

00:11:48.320 --> 00:11:53.100
Today, computers run modern operating systems,
like Mac OS X, Windows 10, Linux, iOS and

00:11:53.100 --> 00:11:54.300
Android.

00:11:54.300 --> 00:11:58.740
Even though the computers we own are most
often used by just a single person, you! their

00:11:58.740 --> 00:12:02.220
OSes all have multitasking and virtual and
protected memory.

00:12:02.220 --> 00:12:06.269
So, they can run many programs at once: you
can watch YouTube in your web browser, edit

00:12:06.269 --> 00:12:12.259
a photo in Photoshop, play music in Spotify
and sync Dropbox all at the same time.

00:12:12.259 --> 00:12:16.089
This wouldn’t be possible without those
decades of research and development on Operating

00:12:16.089 --> 00:12:19.590
Systems, and of course the proper memory to
store those programs.

00:12:19.590 --> 00:12:21.200
Which we’ll get to next week.

00:12:21.200 --> 00:12:24.080
I’d like to thank Hover for sponsoring this
episode.

00:12:24.080 --> 00:12:27.160
Hover is a service that helps you buy and
manage domain names.

00:12:27.160 --> 00:12:32.140
Hover has over 400 domain extensions to end
your domain with - including .com and .net.

00:12:32.149 --> 00:12:35.800
You can also get unique domains that are more
professional than a generic address.

00:12:35.800 --> 00:12:40.190
Here at Crash Course, we'd get the domain
name “mongols.fans” but I think you know

00:12:40.190 --> 00:12:41.000
that already.

00:12:41.000 --> 00:12:44.760
Once you have your domain, you can set up
your custom email to forward to your existing

00:12:44.780 --> 00:12:48.680
email address -- including Outlook or Gmail
or whatever you already use.

00:12:48.680 --> 00:12:52.769
With Hover, you can get a custom domain and
email address for 10% off.

00:12:52.800 --> 00:12:57.980
Go to Hover.com/crashcourse today to create
your custom domain and help support our show!

