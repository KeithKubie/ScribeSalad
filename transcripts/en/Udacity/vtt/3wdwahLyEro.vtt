WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Just as we have to separate words in HTML and JavaScript

00:00:04.000 --> 00:00:09.000
based on white space, we also have to take into account comments,

00:00:09.000 --> 00:00:12.000
and comments in HTML serve the same purpose that they do in Python,

00:00:12.000 --> 00:00:20.000
documentation or removing functionality.

00:00:20.000 --> 00:00:25.000
You can add a comment containing English text to explain what a program should be doing.

00:00:25.000 --> 00:00:28.000
You can do the same with a webpage or with a JavaScript program.

00:00:28.000 --> 00:00:33.000
Or you could comment out a function or a line to see how things behave without it.

00:00:33.000 --> 00:00:38.000
In HTML, comments start with this interesting 4-character sequence

00:00:38.000 --> 00:00:41.000
and end with this 3-character sequence.

00:00:41.000 --> 00:00:45.000
Left angle, bang, hyphen, hyphen begins a comment.

00:00:45.000 --> 00:00:47.000
Bang, bang, right angle ends a comment.

00:00:47.000 --> 00:00:49.000
They look a bit like tags.

00:00:49.000 --> 00:00:54.000
Here I have an HTML fragment, "I think therefore,"

00:00:54.000 --> 00:00:57.000
and then there's a comment, "I am."

00:00:57.000 --> 00:00:59.000
Je pense, donc je suis.

00:00:59.000 --> 00:01:03.000
We're going to see how to implement this in our lexical analyzer,

00:01:03.000 --> 00:01:09.000
but recall that our lexical analyzer was just based on regular expressions.

00:01:09.000 --> 00:01:15.000
I could recognize these comments with another finite state machine,

00:01:15.000 --> 00:01:21.000
and all I have to do is just merge these 2 finite state machines together conceptually.

00:01:21.000 --> 00:01:24.000
If I could have one set of rules describing comments

00:01:24.000 --> 00:01:28.000
and another set of rules describing all of my other tokens,

00:01:28.000 --> 00:01:31.000
I'll just put them together into one big machine.

00:01:31.000 --> 00:01:33.000
It might have too many states for us to be comfortable with,

00:01:33.000 --> 00:01:36.000
but it is entirely fine for a computer.

00:01:36.000 --> 00:01:41.000
When we're processing a comment, normal rules don't apply.

00:01:41.000 --> 00:01:47.000
Let's consider a super tricky comment example.

00:01:47.000 --> 00:01:54.000
Here we have "Welcome to &lt;b&gt; my," comment that closes the bold tag,

00:01:54.000 --> 00:01:57.000
"webpage," close the bold tag again.

00:01:57.000 --> 00:02:00.000
My question for you is how will this render?

00:02:00.000 --> 00:02:02.000
Which of these words will be bolded?

00:02:02.000 --> 00:02:06.000
Well, it turns out that when something is in a comment, we ignore it entirely.

00:02:06.000 --> 00:02:11.000
It's as if it weren't there, so even though this looks like it's closing the bold tag,

00:02:11.000 --> 00:02:17.000
it does not, and the words "my" and "webpage" will both be bolded.

00:02:17.000 --> 00:02:24.000
In fact, it's almost as if everything in the comments were entirely erased

00:02:24.000 --> 00:02:28.000
and had no impact on the final rendering of the webpage at all.

00:02:28.000 --> 00:02:31.000
And now without the distracting text, it's relatively clear that "my"

00:02:31.000 --> 00:02:34.000
and "webpage" should both be bolded.

00:02:34.000 --> 00:02:39.000
Here I've written another HTML fragment that includes a comment,

00:02:39.000 --> 00:02:44.000
and the quiz for you is--in multiple, multiple choice fashion--

00:02:44.000 --> 00:02:48.000
to tell me which of the following HTML tokens--and I'll draw them now--

00:02:48.000 --> 00:02:50.000
could be found by our lexer.

00:02:50.000 --> 00:02:52.000
Check all that apply.

00:02:52.000 --> 00:02:56.000
Based on this string, assuming that we've added the right rules

00:02:56.000 --> 09:59:59.000
for comments to our lexer, which of the following would be found?

