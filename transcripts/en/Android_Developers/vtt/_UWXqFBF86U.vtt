WEBVTT
Kind: captions
Language: en

00:00:05.760 --> 00:00:07.120
CHET HAASE: Hi, I'm Chet
Haase from the

00:00:07.120 --> 00:00:08.180
Android team at Google.

00:00:08.180 --> 00:00:10.560
I work on graphics and
animation stuff here.

00:00:10.560 --> 00:00:13.050
And today I wanted to talk about
some animation stuff.

00:00:13.050 --> 00:00:14.350
Surprise, surprise.

00:00:14.350 --> 00:00:16.740
Specifically I wanted to talk
about View Animations, which

00:00:16.740 --> 00:00:19.540
is the set of the animation APIs
that are available prior

00:00:19.540 --> 00:00:21.300
to the 3.0 release.

00:00:21.300 --> 00:00:25.020
So there's some more modern APIs
that we'll talk about in

00:00:25.020 --> 00:00:28.060
future episodes, but for now
we'll talk about the APIs that

00:00:28.060 --> 00:00:30.190
you might want to use if you're
running on devices that

00:00:30.190 --> 00:00:33.760
are running platforms prior
to the 3.0 release.

00:00:33.760 --> 00:00:36.050
So View Animations were created
specifically for

00:00:36.050 --> 00:00:38.000
animating individual properties
of views.

00:00:38.000 --> 00:00:40.630
It's not a general purpose
animation engine, but a way to

00:00:40.630 --> 00:00:42.980
achieve specific visual effects

00:00:42.980 --> 00:00:44.550
for your user interface.

00:00:44.550 --> 00:00:47.420
So let's take a look at a demo,
which I called View

00:00:47.420 --> 00:00:48.410
Animations.

00:00:48.410 --> 00:00:51.560
We have a few buttons on the
screen that are named after

00:00:51.560 --> 00:00:53.070
the animations that are
going to be run when

00:00:53.070 --> 00:00:53.630
you click on them.

00:00:53.630 --> 00:00:56.580
So we have an alpha animation,
a translate animation that

00:00:56.580 --> 00:00:59.460
moves the button around, rotate
animation, a scale

00:00:59.460 --> 00:01:02.630
animation, and then a set
animation is basically a way

00:01:02.630 --> 00:01:05.430
to choreograph several
animations on the same object.

00:01:05.430 --> 00:01:08.230
So we run all of those types
of animations on that one

00:01:08.230 --> 00:01:12.310
button to give a really horrible
effect, which I

00:01:12.310 --> 00:01:15.410
expect to not see in any
of your applications.

00:01:15.410 --> 00:01:17.490
Now all of these animations that
we're running here were

00:01:17.490 --> 00:01:20.140
created and run in code, but
you can also load them from

00:01:20.140 --> 00:01:21.700
animation resources,
which we'll see in

00:01:21.700 --> 00:01:22.850
the code in a minute.

00:01:22.850 --> 00:01:25.610
So we can get exactly the same
types of effect loading from

00:01:25.610 --> 00:01:27.440
XML resources instead.

00:01:27.440 --> 00:01:30.050
So now let's take a
look at the code.

00:01:30.050 --> 00:01:32.090
So we have this class called
View Animations.

00:01:32.090 --> 00:01:33.110
It's an activity.

00:01:33.110 --> 00:01:35.220
We have a check box that
controls whether we load from

00:01:35.220 --> 00:01:37.620
resources or create these
on the fly in code.

00:01:37.620 --> 00:01:40.160
We have the buttons that
are created here.

00:01:40.160 --> 00:01:42.810
We have alpha, translate,
rotate, scale, set, and then

00:01:42.810 --> 00:01:45.810
we listen for clicks on those
buttons and run the animations

00:01:45.810 --> 00:01:46.840
appropriately.

00:01:46.840 --> 00:01:49.610
This is the interesting part
about how the animations are

00:01:49.610 --> 00:01:51.600
actually created, so this is how
you create some of these

00:01:51.600 --> 00:01:53.040
animations in code.

00:01:53.040 --> 00:01:54.370
So here's an alpha animation.

00:01:54.370 --> 00:01:56.300
We say we want an alpha
animation, it's going to go

00:01:56.300 --> 00:01:57.230
from 1 to 0.

00:01:57.230 --> 00:01:59.790
That's basically saying from
fully opaque to fully

00:01:59.790 --> 00:02:00.770
transparent.

00:02:00.770 --> 00:02:02.150
And we're going to
set the duration.

00:02:02.150 --> 00:02:04.940
Note that view animations don't
have a default duration,

00:02:04.940 --> 00:02:09.090
so you need to set a duration to
have any animation at all,

00:02:09.090 --> 00:02:12.360
otherwise they'll just happen
atomically and immediately,

00:02:12.360 --> 00:02:14.400
which is probably not the kind
of animation effect you're

00:02:14.400 --> 00:02:15.220
looking for.

00:02:15.220 --> 00:02:18.570
We have a translate animation
that's going to be moving in

00:02:18.570 --> 00:02:21.810
both x and y, and you have the
ability to move in absolute

00:02:21.810 --> 00:02:25.140
coordinates or relative to self
or relative to parents.

00:02:25.140 --> 00:02:27.990
You can basically say, I want
to move for half of my

00:02:27.990 --> 00:02:29.980
parent's width, for example.

00:02:29.980 --> 00:02:31.950
Again, we set the duration
and that animation

00:02:31.950 --> 00:02:33.470
is on rotate animation.

00:02:33.470 --> 00:02:35.870
Again we have the concept of
being relative to self,

00:02:35.870 --> 00:02:37.790
relative to parent, and we have
a pivot point that we're

00:02:37.790 --> 00:02:39.030
rotating around.

00:02:39.030 --> 00:02:43.030
Here we're pivoting around the
center point of the button

00:02:43.030 --> 00:02:45.400
itself, so it's just going to
rotate around its center.

00:02:45.400 --> 00:02:46.840
Set the duration
and we're done.

00:02:46.840 --> 00:02:50.530
Scale animation, we're going to
scale in both x and y, from

00:02:50.530 --> 00:02:52.860
1 to 2, which is saying
from my normal 100%

00:02:52.860 --> 00:02:56.050
size to 200% size.

00:02:56.050 --> 00:02:59.570
And the set animation is a way
of combining all of these

00:02:59.570 --> 00:03:02.470
animations to run all on the
same button to give that

00:03:02.470 --> 00:03:04.640
really horrible effect
that we saw.

00:03:04.640 --> 00:03:07.540
We set up each of these
animations, which is just a

00:03:07.540 --> 00:03:10.860
method that I created to say
either use the animations that

00:03:10.860 --> 00:03:14.150
are created above or create
them from resources, which

00:03:14.150 --> 00:03:15.170
we'll see in a minute.

00:03:15.170 --> 00:03:17.240
And then we listen
in on the button.

00:03:17.240 --> 00:03:19.390
When the button has clicked,
then we run the animation

00:03:19.390 --> 00:03:20.340
appropriately.

00:03:20.340 --> 00:03:22.220
So that's the code
side of this.

00:03:22.220 --> 00:03:26.770
The resource side we can take
a look at, and it should be

00:03:26.770 --> 00:03:27.490
fairly straightforward.

00:03:27.490 --> 00:03:29.160
If you understand how to create
these in code, you'll

00:03:29.160 --> 00:03:32.300
understand what the attribute
names are in the XML resource.

00:03:32.300 --> 00:03:34.040
So here's the alpha animation.

00:03:34.040 --> 00:03:37.820
We say from an alpha of 1 to an
alpha of 0 duration we're

00:03:37.820 --> 00:03:40.610
going to make this a little bit
faster in XML resources.

00:03:40.610 --> 00:03:44.910
Rotate, we've got two degrees
360, so it's basically going

00:03:44.910 --> 00:03:47.380
to spin an entire cycle and
it's going to pivot around

00:03:47.380 --> 00:03:49.480
half of its own width.

00:03:49.480 --> 00:03:52.820
So it's got a center point right
it in its center for the

00:03:52.820 --> 00:03:55.700
rotation scale animation here.

00:03:55.700 --> 00:03:59.730
From x and y of 1, so that's
from its normal 100% size to

00:03:59.730 --> 00:04:01.650
an x and y scale of
2, so going to

00:04:01.650 --> 00:04:05.120
200% duration of 1,000.

00:04:05.120 --> 00:04:06.310
And here's the set.

00:04:06.310 --> 00:04:09.000
So this is how we choreograph
animations and do several

00:04:09.000 --> 00:04:11.490
things either in parallel
or in sequence.

00:04:11.490 --> 00:04:14.390
We're actually doing all of
these all together, so they're

00:04:14.390 --> 00:04:17.360
going to happen all at the same
time to give to the most

00:04:17.360 --> 00:04:19.310
egregious effect possible.

00:04:19.310 --> 00:04:21.190
But you can stagger these
in time as well by

00:04:21.190 --> 00:04:23.160
using a start offset.

00:04:23.160 --> 00:04:25.790
Here we have an alpha animation
that's going to kick

00:04:25.790 --> 00:04:28.250
off at the same time as the
rotate animation, same time as

00:04:28.250 --> 00:04:30.280
the scale animation, and
at the same time as

00:04:30.280 --> 00:04:32.040
the translate animation.

00:04:32.040 --> 00:04:37.100
So to load these we can go back
and look at the code and

00:04:37.100 --> 00:04:39.220
instead of just running the
animation that we created in

00:04:39.220 --> 00:04:44.120
code above we do a animation
utils load animation, and load

00:04:44.120 --> 00:04:46.500
it from the resource ID
that we specified.

00:04:46.500 --> 00:04:50.230
So the takeaway from this today
is, it's fairly easy to

00:04:50.230 --> 00:04:52.860
create these things and to run
these animations and get some

00:04:52.860 --> 00:04:55.140
simple effects, basically moving
things around on the

00:04:55.140 --> 00:04:57.520
screen and fading them in and
out, which can be a very

00:04:57.520 --> 00:05:00.530
powerful tool to help your users
understand what's going

00:05:00.530 --> 00:05:01.290
on in your UI.

00:05:01.290 --> 00:05:03.840
Fade the things in that are
coming into view, fade them

00:05:03.840 --> 00:05:07.210
out if they're going away, move
things into position, and

00:05:07.210 --> 00:05:10.700
basically give a more immersive
and intuitive

00:05:10.700 --> 00:05:12.480
experience to your users.

00:05:12.480 --> 00:05:15.020
In future episodes we'll see
alternate ways of doing this

00:05:15.020 --> 00:05:17.190
kind of stuff as well as
other, more powerful,

00:05:17.190 --> 00:05:18.330
animations.

00:05:18.330 --> 00:05:19.580
Thanks for tuning in.

