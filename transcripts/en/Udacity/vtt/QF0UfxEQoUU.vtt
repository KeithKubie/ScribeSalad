WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
The answer is that none of these solve our problem.

00:00:03.000 --> 00:00:06.000
The third one would be secure, but would be useless,

00:00:06.000 --> 00:00:11.000
because there was no way from this to learn the value of M unless you know x,

00:00:11.000 --> 00:00:13.000
and there's no way to know x.

00:00:13.000 --> 00:00:17.000
The second one doesn't solve our problem, and it's not even possible.

00:00:17.000 --> 00:00:19.000
M could be 1.

00:00:19.000 --> 00:00:25.000
There is no value of e we could pick that would make m^e when m is 1 exceed n.

00:00:25.000 --> 00:00:27.000
So that doesn't work.

00:00:27.000 --> 00:00:29.000
The first one is the most plausible, but it also doesn't work.

00:00:29.000 --> 00:00:32.000
Let me show you why the first one doesn't work.

00:00:32.000 --> 00:00:36.000
Even though the previous attack of just taking the eth root would not work on this.

00:00:36.000 --> 00:00:40.000
There's another attack that does, which is just to try all the messages.

00:00:40.000 --> 00:00:43.000
We can try for each message, and in this case

00:00:43.000 --> 00:00:49.000
the messages were the numbers from 1-365 whatever the set of messages is.

00:00:49.000 --> 00:00:52.000
As long as that's small, we can try them all,

00:00:52.000 --> 00:00:57.000
and we can try for each of those messages we're going to try encrypting using the public key.

00:00:57.000 --> 00:01:01.000
That message--see if it matches the cipher text.

00:01:01.000 --> 00:01:05.000
In this case it's not that message that we would try encrypting.

00:01:05.000 --> 00:01:11.000
We would try encrypting x + m, since we know the value of x.

00:01:11.000 --> 00:01:15.000
We find the one that matches. Then we know what the message was.

00:01:15.000 --> 00:01:19.000
Without randomizing the encryption system, this is very dangerous.

00:01:19.000 --> 00:01:23.000
If the set of message is small in a public key system,

00:01:23.000 --> 00:01:26.000
that's always dangerous because the public key is known.

00:01:26.000 --> 00:01:29.000
We can always try encryption in the forward direction and see which one

00:01:29.000 --> 00:01:31.000
matches the intercepted cipher text.

00:01:31.000 --> 00:01:34.000
If we're going to use RSA in practice, we need a solution to that,

00:01:34.000 --> 99:59:59.000
because we can't assume the messages are large and random and from some large set.

