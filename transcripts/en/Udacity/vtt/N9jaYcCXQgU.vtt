WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
[Evans] We've seen the basic looking at just the first letter does not work very well.

00:00:04.000 --> 00:00:08.000
It doesn't use enough buckets, and it doesn't distribute the keys well.

00:00:08.000 --> 00:00:12.000
So now we're going to think about how to make a better hash function.

00:00:12.000 --> 00:00:16.000
We want the same property we had before in the sense that it's 1 function

00:00:16.000 --> 00:00:22.000
that takes 2 inputs, and the 2 inputs are the keyword, which is a string,

00:00:22.000 --> 00:00:25.000
and the number of buckets, which is a number.

00:00:25.000 --> 00:00:29.000
Those are the 2 inputs, and the output is the hash value,

00:00:29.000 --> 00:00:33.000
and it's in the range from 0 to number of buckets - 1.

00:00:33.000 --> 00:00:38.000
And our goal is for these numbers to be well distributed.

00:00:38.000 --> 00:00:40.000
We can have any number of buckets we want.

00:00:40.000 --> 00:00:43.000
The keywords will be spread evenly among the buckets,

00:00:43.000 --> 00:00:46.000
and every time we hash the same keyword, we'll get the same bucket,

00:00:46.000 --> 00:00:48.000
so we'll know quickly where to find it.

00:00:48.000 --> 00:00:51.000
In order to do better than we were doing before,

00:00:51.000 --> 00:00:53.000
we're going to need to look at more than just 1 letter of the keyword.

00:00:53.000 --> 00:00:56.000
If we look at just the first letter, we're not going to do better

00:00:56.000 --> 00:01:00.000
than having a limited number of buckets and a bad distribution.

00:01:00.000 --> 00:01:03.000
So what we want to do is something that's going to look at all the letters of the keyword,

00:01:03.000 --> 00:01:08.000
not just the first letter, and based on all the letters will decide the appropriate bucket.

00:01:08.000 --> 00:01:13.000
We saw that with lists if we had a list of items, we could use the for loop construct

00:01:13.000 --> 00:01:17.000
to go through the elements in the list like this.

00:01:17.000 --> 00:01:21.000
And this would go through each element in p, assigning it to the variable e

00:01:21.000 --> 00:01:25.000
and executing whatever is in the block for each element of p.

00:01:25.000 --> 00:01:27.000
We can do something similar with strings.

00:01:27.000 --> 00:01:32.000
If we have a string s, we can use the same construct to go through the characters in s.

00:01:32.000 --> 00:01:37.000
So each time we go through the loop, the value assigned to variable c

00:01:37.000 --> 00:01:41.000
will be a 1-letter string corresponding to each character in the string in order.

00:01:41.000 --> 00:01:46.000
So first it will have the value a, then the value b, then the value c, then the value d.

00:01:46.000 --> 00:01:50.000
This gives us a way to go through all the elements in the string.

00:01:50.000 --> 00:01:56.000
If you remember how we turned single letter strings into numbers and modulo arithmetic,

00:01:56.000 --> 00:01:59.000
then I think you know enough to define a much better hash function.

00:01:59.000 --> 00:02:05.000
So for this quiz your goal is to define a function, hash&lt;u&gt;string, that behaves like this.&lt;/u&gt;

00:02:05.000 --> 00:02:09.000
It takes a keyword, a number of buckets, and it gives a number

00:02:09.000 --> 00:02:12.000
identifying the bucket where that keyword will belong,

00:02:12.000 --> 00:02:15.000
but instead of just using the first letter in the keyword, it's going to use all the letters

00:02:15.000 --> 00:02:17.000
and produce as its output a single number

00:02:17.000 --> 00:02:21.000
that represents the bucket where that keyword belongs.

00:02:21.000 --> 00:02:24.000
Your goal is to do this in a way that depends on all the characters in the string,

00:02:24.000 --> 00:02:26.000
not just the first character.

00:02:26.000 --> 00:02:28.000
There are lots of different ways to do this,

00:02:28.000 --> 00:02:30.000
so we're going to specify exactly what you should do.

00:02:30.000 --> 00:02:35.000
What we want to do is make the output of hash&lt;u&gt;string a function of all the characters.&lt;/u&gt;

00:02:35.000 --> 00:02:37.000
We can think of that with modulo arithmetic

00:02:37.000 --> 00:02:41.000
that if we have a circle which is the size of the number of buckets,

00:02:41.000 --> 00:02:45.000
so this is going to go from 0 to the buckets - 1,

00:02:45.000 --> 00:02:48.000
what we want to do for each character, we're going to start at 0,

00:02:48.000 --> 00:02:53.000
and for each character in the string we're going to go around ord of that character,

00:02:53.000 --> 00:02:56.000
distance around the circle, and we're going to keep going.

00:02:56.000 --> 00:02:58.000
So each character we're going to go some distance around the circle.

00:02:58.000 --> 00:03:02.000
The circle can be any size depending on the number of buckets,

00:03:02.000 --> 00:03:07.000
and we're going to keep going around the circle using modulo arithmetic for each letter.

00:03:07.000 --> 00:03:12.000
As we keep going, we can go lots and lots of times if it's a big word.

00:03:12.000 --> 00:03:16.000
Wherever we end up is going to be the bucket that we use.

00:03:16.000 --> 00:03:21.000
Let's say that's position 27. Who knows where it is?

00:03:21.000 --> 00:03:23.000
That's the idea, and I'll give you a couple examples

00:03:23.000 --> 00:03:26.000
so you know if you're implementing it the right way.

00:03:26.000 --> 00:03:31.000
Let's suppose we have as our string the single letter 'a'

00:03:31.000 --> 00:03:33.000
and we have 12 buckets.

00:03:33.000 --> 00:03:37.000
In that case, we're going to have 12 buckets, so we wouldn't have 27 here.

00:03:37.000 --> 00:03:40.000
This is going to be 11 is the last bucket.

00:03:40.000 --> 00:03:43.000
The ord value of 'a' is 97.

00:03:43.000 --> 00:03:50.000
So for 'a' what we would do is go around the circle 8 times

00:03:50.000 --> 00:03:57.000
because 97 is 12  8.

00:03:57.000 --> 00:04:03.000
And 1 more because 97 is 12  8 + 1.

00:04:03.000 --> 00:04:05.000
You don't actually have to go around the circle.

00:04:05.000 --> 00:04:07.000
If you use the modulo, that's what it will give you.

00:04:07.000 --> 00:04:12.000
So the hash value for 'a' should end up in bucket 1.

00:04:12.000 --> 00:04:18.000
As another example, if we tried hash&lt;u&gt;string where the string is the single letter 'b'&lt;/u&gt;

00:04:18.000 --> 00:04:22.000
also with 12 buckets, that's going to also go around the circle 8 times

00:04:22.000 --> 00:04:26.000
because the ord of 'b' is 98, but it's going to end up in bucket 2

00:04:26.000 --> 00:04:31.000
since that's 96 + 2, which will end up in bucket 2.

00:04:31.000 --> 00:04:35.000
If we change the number of buckets, the results will be different.

00:04:35.000 --> 00:04:38.000
Let's say instead of having 12 buckets we have 13

00:04:38.000 --> 00:04:45.000
and we tried hash&lt;u&gt;string on the single letter string 'a' with 13 buckets.&lt;/u&gt;

00:04:45.000 --> 00:04:50.000
The result there should end up being 6.

00:04:50.000 --> 00:04:58.000
The reason it's 6 is because 97 is equal to 13  7 + 6.

00:04:58.000 --> 00:05:01.000
So the size of the hash table matters as well as the string.

00:05:01.000 --> 00:05:05.000
We don't want it to just work on single letter strings.

00:05:05.000 --> 00:05:08.000
With single letter strings we're really getting the same thing we defined before.

00:05:08.000 --> 00:05:12.000
Where it gets interesting is where we have multi-letter strings,

00:05:12.000 --> 00:05:14.000
so let's look at a few examples like that.

00:05:14.000 --> 00:05:19.000
Where we can see the difference between what you're going to define as hash&lt;u&gt;string&lt;/u&gt;

00:05:19.000 --> 00:05:22.000
and the bad hash string we had before is once we have longer strings.

00:05:22.000 --> 00:05:25.000
So suppose we tried the string 'au'.

00:05:25.000 --> 00:05:32.000
The ord of 'a' was 97 and that, when we went around the circle, ended up at location 1.

00:05:32.000 --> 00:05:38.000
The ord of 'u' I can tell you is 117.

00:05:38.000 --> 00:05:42.000
When we add those 2, we get 214.

00:05:42.000 --> 00:05:48.000
And modulo the number of buckets, which is 12 here, we should get 10.

00:05:48.000 --> 00:05:53.000
So that string with 2 symbols doesn't end up in position 1 where the 'a' would end up.

00:05:53.000 --> 00:05:55.000
It ends up in bucket 10.

00:05:55.000 --> 00:05:59.000
As another example--we won't work through the details on this one,

00:05:59.000 --> 00:06:02.000
but you'll be able to test if your result is correct--

00:06:02.000 --> 00:06:06.000
if you try the string 'udacity', it should end up in bucket--

00:06:06.000 --> 00:06:11.000
Sorry. I forgot the input size. This is very important.

00:06:11.000 --> 00:06:16.000
We need 2 inputs to hash&lt;u&gt;string. Both the string and the number of buckets matter.&lt;/u&gt;

00:06:16.000 --> 00:06:19.000
So here we're also assuming 12 buckets.

00:06:19.000 --> 00:06:23.000
Here we'll use 12 buckets again.

00:06:23.000 --> 00:06:25.000
The result should be 11.

00:06:25.000 --> 00:06:28.000
See if you can define a function, hash&lt;u&gt;string, that does this.&lt;/u&gt;

00:06:28.000 --> 00:06:30.000
We want it to take these 2 inputs and produce a number

00:06:30.000 --> 99:59:59.000
that tells us what bucket that keyword should be in.

