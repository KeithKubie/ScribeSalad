WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
To get a handle on how to best find shortest paths in a graph,

00:00:04.000 --> 00:00:10.000
it's going to help to compare a little bit between the kinds of depth first search algorithms

00:00:10.000 --> 00:00:13.000
that we were looking at with the kinds of breadth first search algorithms

00:00:13.000 --> 00:00:15.000
that we're going to need to look at.

00:00:15.000 --> 00:00:19.000
So let's consider what the check_connection algorithm that we were just talking about does

00:00:19.000 --> 00:00:25.000
if it's given this graph, G, and we ask it to check the connection between i and n.

00:00:25.000 --> 00:00:30.000
The flow of control is when we do check_connection on i and n,

00:00:30.000 --> 00:00:32.000
checking to see whether i and n are connected in the graph,

00:00:32.000 --> 00:00:35.000
the way that it proceeds is it starts off at i

00:00:35.000 --> 00:00:38.000
then visits the neighbors of i in some order.

00:00:38.000 --> 00:00:44.000
Let's say it visits j first and then it asks, "Has j been visited so far? i has."

00:00:44.000 --> 00:00:46.000
"Has j been visited so far?" No.

00:00:46.000 --> 00:00:50.000
"Okay, well, let's go to j and do a mark_component from j."

00:00:50.000 --> 00:00:52.000
It's going to consider the neighbors of j in some order.

00:00:52.000 --> 00:00:55.000
Let's say it considers k first. "Has k been visited?" No.

00:00:55.000 --> 00:01:00.000
"All right. Let's go mark_component on k." And so on.

00:01:00.000 --> 00:01:03.000
So at some point, it may actually check one of the neighbors that it's already visited,

00:01:03.000 --> 00:01:05.000
but at this point, once it's kind of heading in this direction,

00:01:05.000 --> 00:01:08.000
it's going to continue to explore the graph this way,

00:01:08.000 --> 00:01:10.000
and it will eventually hit n.

00:01:10.000 --> 00:01:16.000
Essentially, the path that it followed to get to n is 1, 2, 3, 4, 5 links long,

00:01:16.000 --> 00:01:21.000
which is not very representative of the shortest path, which in this case is just the 1 link.

00:01:21.000 --> 00:01:24.000
So partly what's going on when you run this kind of algorithm

00:01:24.000 --> 00:01:26.000
is it's diving deep into the graph.

00:01:26.000 --> 00:01:30.000
It starts off at i and it just keeps digging itself deeper and deeper

00:01:30.000 --> 00:01:32.000
and deeper and deeper and deeper.

00:01:32.000 --> 00:01:36.000
And really what we'd like to do is kind of check in circles around i.

00:01:36.000 --> 00:01:40.000
We start at i and check the things that are close to i before the things that are far from i.

00:01:40.000 --> 09:59:59.000
And that's the essence of what breadth first search is going to do.

