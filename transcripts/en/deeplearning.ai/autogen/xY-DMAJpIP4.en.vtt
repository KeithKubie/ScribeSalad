WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.119
to build a neuro style transfer system

00:00:02.119 --> 00:00:02.129
to build a neuro style transfer system
 

00:00:02.129 --> 00:00:04.460
to build a neuro style transfer system
let's define a cost function for the

00:00:04.460 --> 00:00:04.470
let's define a cost function for the
 

00:00:04.470 --> 00:00:06.860
let's define a cost function for the
generated image what you see later is

00:00:06.860 --> 00:00:06.870
generated image what you see later is
 

00:00:06.870 --> 00:00:09.320
generated image what you see later is
that LP by minimizing this cost function

00:00:09.320 --> 00:00:09.330
that LP by minimizing this cost function
 

00:00:09.330 --> 00:00:11.810
that LP by minimizing this cost function
that you can generate the image that you

00:00:11.810 --> 00:00:11.820
that you can generate the image that you
 

00:00:11.820 --> 00:00:13.910
that you can generate the image that you
want so remember what the problem

00:00:13.910 --> 00:00:13.920
want so remember what the problem
 

00:00:13.920 --> 00:00:16.430
want so remember what the problem
formulation is you're given a content

00:00:16.430 --> 00:00:16.440
formulation is you're given a content
 

00:00:16.440 --> 00:00:19.429
formulation is you're given a content
image C given the style image s and you

00:00:19.429 --> 00:00:19.439
image C given the style image s and you
 

00:00:19.439 --> 00:00:23.240
image C given the style image s and you
go is to generate a new image G so in

00:00:23.240 --> 00:00:23.250
go is to generate a new image G so in
 

00:00:23.250 --> 00:00:25.910
go is to generate a new image G so in
order to implement neural style transfer

00:00:25.910 --> 00:00:25.920
order to implement neural style transfer
 

00:00:25.920 --> 00:00:28.490
order to implement neural style transfer
what you're going to do is what you're

00:00:28.490 --> 00:00:28.500
what you're going to do is what you're
 

00:00:28.500 --> 00:00:31.310
what you're going to do is what you're
going to do is define a cost function J

00:00:31.310 --> 00:00:31.320
going to do is define a cost function J
 

00:00:31.320 --> 00:00:33.920
going to do is define a cost function J
of G that measures how good is a

00:00:33.920 --> 00:00:33.930
of G that measures how good is a
 

00:00:33.930 --> 00:00:37.160
of G that measures how good is a
particular generator image and we'll use

00:00:37.160 --> 00:00:37.170
particular generator image and we'll use
 

00:00:37.170 --> 00:00:39.770
particular generator image and we'll use
gradient descent to minimize J of G in

00:00:39.770 --> 00:00:39.780
gradient descent to minimize J of G in
 

00:00:39.780 --> 00:00:43.220
gradient descent to minimize J of G in
order to generate this image so how good

00:00:43.220 --> 00:00:43.230
order to generate this image so how good
 

00:00:43.230 --> 00:00:45.080
order to generate this image so how good
is a particular image well we're going

00:00:45.080 --> 00:00:45.090
is a particular image well we're going
 

00:00:45.090 --> 00:00:47.479
is a particular image well we're going
to define two parts to this cost

00:00:47.479 --> 00:00:47.489
to define two parts to this cost
 

00:00:47.489 --> 00:00:50.090
to define two parts to this cost
function the first part is called the

00:00:50.090 --> 00:00:50.100
function the first part is called the
 

00:00:50.100 --> 00:00:53.360
function the first part is called the
content cost this is a function of the

00:00:53.360 --> 00:00:53.370
content cost this is a function of the
 

00:00:53.370 --> 00:00:56.209
content cost this is a function of the
content image and of the generated image

00:00:56.209 --> 00:00:56.219
content image and of the generated image
 

00:00:56.219 --> 00:00:57.860
content image and of the generated image
and what it does is it measures how

00:00:57.860 --> 00:00:57.870
and what it does is it measures how
 

00:00:57.870 --> 00:01:00.470
and what it does is it measures how
similar is the contents of the generated

00:01:00.470 --> 00:01:00.480
similar is the contents of the generated
 

00:01:00.480 --> 00:01:03.619
similar is the contents of the generated
image to the content of the content

00:01:03.619 --> 00:01:03.629
image to the content of the content
 

00:01:03.629 --> 00:01:06.530
image to the content of the content
image C and then going to add that to a

00:01:06.530 --> 00:01:06.540
image C and then going to add that to a
 

00:01:06.540 --> 00:01:09.469
image C and then going to add that to a
style cost function which is now a

00:01:09.469 --> 00:01:09.479
style cost function which is now a
 

00:01:09.479 --> 00:01:12.710
style cost function which is now a
function of s comma G and what this does

00:01:12.710 --> 00:01:12.720
function of s comma G and what this does
 

00:01:12.720 --> 00:01:15.380
function of s comma G and what this does
is it measures how similar is the style

00:01:15.380 --> 00:01:15.390
is it measures how similar is the style
 

00:01:15.390 --> 00:01:18.940
is it measures how similar is the style
of the mhg to the style of the image s

00:01:18.940 --> 00:01:18.950
of the mhg to the style of the image s
 

00:01:18.950 --> 00:01:22.010
of the mhg to the style of the image s
finally we wait these with two hyper

00:01:22.010 --> 00:01:22.020
finally we wait these with two hyper
 

00:01:22.020 --> 00:01:24.710
finally we wait these with two hyper
parameters alpha and beta to specify the

00:01:24.710 --> 00:01:24.720
parameters alpha and beta to specify the
 

00:01:24.720 --> 00:01:26.719
parameters alpha and beta to specify the
relative weighting between the content

00:01:26.719 --> 00:01:26.729
relative weighting between the content
 

00:01:26.729 --> 00:01:29.960
relative weighting between the content
cost and the style cost it seems

00:01:29.960 --> 00:01:29.970
cost and the style cost it seems
 

00:01:29.970 --> 00:01:31.730
cost and the style cost it seems
redundant to use two different hyper

00:01:31.730 --> 00:01:31.740
redundant to use two different hyper
 

00:01:31.740 --> 00:01:34.160
redundant to use two different hyper
parameters to specify their relative

00:01:34.160 --> 00:01:34.170
parameters to specify their relative
 

00:01:34.170 --> 00:01:36.319
parameters to specify their relative
weighting seems that you know you need

00:01:36.319 --> 00:01:36.329
weighting seems that you know you need
 

00:01:36.329 --> 00:01:40.190
weighting seems that you know you need
one hybrid it seems redundant to use two

00:01:40.190 --> 00:01:40.200
one hybrid it seems redundant to use two
 

00:01:40.200 --> 00:01:42.830
one hybrid it seems redundant to use two
hyper parameters to specify the relative

00:01:42.830 --> 00:01:42.840
hyper parameters to specify the relative
 

00:01:42.840 --> 00:01:44.569
hyper parameters to specify the relative
cost of the weighting one hyper

00:01:44.569 --> 00:01:44.579
cost of the weighting one hyper
 

00:01:44.579 --> 00:01:46.999
cost of the weighting one hyper
parameter seems I could be enough but

00:01:46.999 --> 00:01:47.009
parameter seems I could be enough but
 

00:01:47.009 --> 00:01:49.310
parameter seems I could be enough but
the original authors of the neural style

00:01:49.310 --> 00:01:49.320
the original authors of the neural style
 

00:01:49.320 --> 00:01:51.020
the original authors of the neural style
transfer algorithm used two different

00:01:51.020 --> 00:01:51.030
transfer algorithm used two different
 

00:01:51.030 --> 00:01:53.149
transfer algorithm used two different
hyper parameters and so I'm just going

00:01:53.149 --> 00:01:53.159
hyper parameters and so I'm just going
 

00:01:53.159 --> 00:01:55.969
hyper parameters and so I'm just going
to follow their convention here and the

00:01:55.969 --> 00:01:55.979
to follow their convention here and the
 

00:01:55.979 --> 00:01:58.219
to follow their convention here and the
nearest our transfer algorithm I'm going

00:01:58.219 --> 00:01:58.229
nearest our transfer algorithm I'm going
 

00:01:58.229 --> 00:02:00.530
nearest our transfer algorithm I'm going
to present in the next few videos is due

00:02:00.530 --> 00:02:00.540
to present in the next few videos is due
 

00:02:00.540 --> 00:02:03.170
to present in the next few videos is due
to Leon Gatti's Alexander occur and

00:02:03.170 --> 00:02:03.180
to Leon Gatti's Alexander occur and
 

00:02:03.180 --> 00:02:06.139
to Leon Gatti's Alexander occur and
methods and their paper is not too hard

00:02:06.139 --> 00:02:06.149
methods and their paper is not too hard
 

00:02:06.149 --> 00:02:08.930
methods and their paper is not too hard
to read so after washing these V videos

00:02:08.930 --> 00:02:08.940
to read so after washing these V videos
 

00:02:08.940 --> 00:02:09.710
to read so after washing these V videos
if you wish

00:02:09.710 --> 00:02:09.720
if you wish
 

00:02:09.720 --> 00:02:11.930
if you wish
I certainly encourage you to take a look

00:02:11.930 --> 00:02:11.940
I certainly encourage you to take a look
 

00:02:11.940 --> 00:02:13.809
I certainly encourage you to take a look
at their paper as well if you want

00:02:13.809 --> 00:02:13.819
at their paper as well if you want
 

00:02:13.819 --> 00:02:16.750
at their paper as well if you want
so the way the algorithm will run is as

00:02:16.750 --> 00:02:16.760
so the way the algorithm will run is as
 

00:02:16.760 --> 00:02:19.690
so the way the algorithm will run is as
follows having to find the cost function

00:02:19.690 --> 00:02:19.700
follows having to find the cost function
 

00:02:19.700 --> 00:02:22.479
follows having to find the cost function
J of G in order to actually generate a

00:02:22.479 --> 00:02:22.489
J of G in order to actually generate a
 

00:02:22.489 --> 00:02:24.869
J of G in order to actually generate a
new image what you do is the following

00:02:24.869 --> 00:02:24.879
new image what you do is the following
 

00:02:24.879 --> 00:02:28.869
new image what you do is the following
you would initialize the generated image

00:02:28.869 --> 00:02:28.879
you would initialize the generated image
 

00:02:28.879 --> 00:02:31.839
you would initialize the generated image
G randomly so it might be 100 by 100 by

00:02:31.839 --> 00:02:31.849
G randomly so it might be 100 by 100 by
 

00:02:31.849 --> 00:02:34.720
G randomly so it might be 100 by 100 by
3 or 500 by 500 by 3 or whatever

00:02:34.720 --> 00:02:34.730
3 or 500 by 500 by 3 or whatever
 

00:02:34.730 --> 00:02:37.690
3 or 500 by 500 by 3 or whatever
dimensions you want it to be then we'll

00:02:37.690 --> 00:02:37.700
dimensions you want it to be then we'll
 

00:02:37.700 --> 00:02:40.809
dimensions you want it to be then we'll
define the cost function J of G on their

00:02:40.809 --> 00:02:40.819
define the cost function J of G on their
 

00:02:40.819 --> 00:02:43.270
define the cost function J of G on their
previous slide so what you can now do is

00:02:43.270 --> 00:02:43.280
previous slide so what you can now do is
 

00:02:43.280 --> 00:02:45.819
previous slide so what you can now do is
use gradient descent to minimize this so

00:02:45.819 --> 00:02:45.829
use gradient descent to minimize this so
 

00:02:45.829 --> 00:02:49.629
use gradient descent to minimize this so
you can update G as G minus the

00:02:49.629 --> 00:02:49.639
you can update G as G minus the
 

00:02:49.639 --> 00:02:51.520
you can update G as G minus the
derivative respect to the cost function

00:02:51.520 --> 00:02:51.530
derivative respect to the cost function
 

00:02:51.530 --> 00:02:54.399
derivative respect to the cost function
of J of G so in this process you're

00:02:54.399 --> 00:02:54.409
of J of G so in this process you're
 

00:02:54.409 --> 00:02:56.920
of J of G so in this process you're
actually updating the pixel values of

00:02:56.920 --> 00:02:56.930
actually updating the pixel values of
 

00:02:56.930 --> 00:03:01.179
actually updating the pixel values of
this image G which is a 100 100 by 3 may

00:03:01.179 --> 00:03:01.189
this image G which is a 100 100 by 3 may
 

00:03:01.189 --> 00:03:04.960
this image G which is a 100 100 by 3 may
be RGB channel image so here's an

00:03:04.960 --> 00:03:04.970
be RGB channel image so here's an
 

00:03:04.970 --> 00:03:07.089
be RGB channel image so here's an
example let's say you starts with this

00:03:07.089 --> 00:03:07.099
example let's say you starts with this
 

00:03:07.099 --> 00:03:10.360
example let's say you starts with this
content image and this style image this

00:03:10.360 --> 00:03:10.370
content image and this style image this
 

00:03:10.370 --> 00:03:13.569
content image and this style image this
is another public picasso image then

00:03:13.569 --> 00:03:13.579
is another public picasso image then
 

00:03:13.579 --> 00:03:16.149
is another public picasso image then
when you initialize G randomly your

00:03:16.149 --> 00:03:16.159
when you initialize G randomly your
 

00:03:16.159 --> 00:03:18.789
when you initialize G randomly your
initial randomly generated image is just

00:03:18.789 --> 00:03:18.799
initial randomly generated image is just
 

00:03:18.799 --> 00:03:21.580
initial randomly generated image is just
this white noise image with each pixel

00:03:21.580 --> 00:03:21.590
this white noise image with each pixel
 

00:03:21.590 --> 00:03:24.789
this white noise image with each pixel
value chosen at random and then as you

00:03:24.789 --> 00:03:24.799
value chosen at random and then as you
 

00:03:24.799 --> 00:03:26.800
value chosen at random and then as you
run gradient descent you minimize the

00:03:26.800 --> 00:03:26.810
run gradient descent you minimize the
 

00:03:26.810 --> 00:03:29.830
run gradient descent you minimize the
cost function J of G you slowly treat

00:03:29.830 --> 00:03:29.840
cost function J of G you slowly treat
 

00:03:29.840 --> 00:03:32.949
cost function J of G you slowly treat
the pixel values so then you get slowly

00:03:32.949 --> 00:03:32.959
the pixel values so then you get slowly
 

00:03:32.959 --> 00:03:35.589
the pixel values so then you get slowly
an image that looks more and more like

00:03:35.589 --> 00:03:35.599
an image that looks more and more like
 

00:03:35.599 --> 00:03:38.830
an image that looks more and more like
your content image rendered in the style

00:03:38.830 --> 00:03:38.840
your content image rendered in the style
 

00:03:38.840 --> 00:03:41.920
your content image rendered in the style
of your style image so in this video you

00:03:41.920 --> 00:03:41.930
of your style image so in this video you
 

00:03:41.930 --> 00:03:45.309
of your style image so in this video you
saw the overall outline of the neuro

00:03:45.309 --> 00:03:45.319
saw the overall outline of the neuro
 

00:03:45.319 --> 00:03:47.050
saw the overall outline of the neuro
style transfer algorithm where you

00:03:47.050 --> 00:03:47.060
style transfer algorithm where you
 

00:03:47.060 --> 00:03:49.059
style transfer algorithm where you
define a cost function for the generated

00:03:49.059 --> 00:03:49.069
define a cost function for the generated
 

00:03:49.069 --> 00:03:52.180
define a cost function for the generated
image G and minimize it next we need to

00:03:52.180 --> 00:03:52.190
image G and minimize it next we need to
 

00:03:52.190 --> 00:03:54.339
image G and minimize it next we need to
see how to define the content cost

00:03:54.339 --> 00:03:54.349
see how to define the content cost
 

00:03:54.349 --> 00:03:56.409
see how to define the content cost
function as well as the style cost

00:03:56.409 --> 00:03:56.419
function as well as the style cost
 

00:03:56.419 --> 00:03:58.030
function as well as the style cost
function let's take a look at that

00:03:58.030 --> 00:03:58.040
function let's take a look at that
 

00:03:58.040 --> 00:04:01.389
function let's take a look at that
starting at the next video

