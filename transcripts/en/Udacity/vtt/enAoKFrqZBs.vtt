WEBVTT
Kind: captions
Language: en

00:00:00.410 --> 00:00:02.630
The traditional approach, which I'll call the

00:00:02.630 --> 00:00:07.790
greedy approach, in constructing distributed hash table is

00:00:07.790 --> 00:00:14.410
when you want to place a key value, you pick a node, n, where n is

00:00:14.410 --> 00:00:19.760
very close to key. And now, if you want to retrieve a given key,

00:00:19.760 --> 00:00:25.700
K, the algorithm you know is going to be, you want to go to a node N,

00:00:25.700 --> 00:00:28.990
which is closest to this key K, because

00:00:28.990 --> 00:00:31.430
that is the algorithm that is being used for

00:00:31.430 --> 00:00:35.336
placing, so for retrieval you just do the reverse.

00:00:35.336 --> 00:00:37.210
When you want a key K, you go to

00:00:37.210 --> 00:00:41.260
a node which is closest to key K. That's

00:00:41.260 --> 00:00:45.690
how these routing tables get populated at different nodes

00:00:45.690 --> 00:00:48.230
in the distributed system at the user level. So

00:00:48.230 --> 00:00:51.140
the routing table at A says that these are

00:00:51.140 --> 00:00:57.610
the known peers to me whose node IDs I know and I know their mapping of the node

00:00:57.610 --> 00:01:01.520
ID to the IP addresses. Now the node space

00:01:01.520 --> 00:01:04.430
may be much bigger than the number entries I have

00:01:04.430 --> 00:01:07.810
in my routing table. So what do I do

00:01:07.810 --> 00:01:11.685
if I want to communicate with a node whose node

00:01:11.685 --> 00:01:13.740
ID I know, but I don't have a mapping

00:01:13.740 --> 00:01:16.560
for that node ID with respect to the IP address.

00:01:16.560 --> 00:01:20.260
Basically the routing table at every node is

00:01:20.260 --> 00:01:23.220
just saying these are the nodes that I

00:01:23.220 --> 00:01:25.820
know how to communicate with directly. That is

00:01:25.820 --> 00:01:29.330
all the nodes that are reachable from node A.

00:01:29.330 --> 00:01:36.120
Because, at the user level, I have a mapping between the virtual node ID that is

00:01:36.120 --> 00:01:39.230
used in the DHT and the IP address

00:01:39.230 --> 00:01:41.720
that corresponds to it. And remember that IP address

00:01:41.720 --> 00:01:43.756
is the only thing that the operating system is going

00:01:43.756 --> 00:01:46.780
to understand. And therefore I know how to communicate with node

00:01:46.780 --> 00:01:50.280
60, because I can give the IP address that corresponds to

00:01:50.280 --> 00:01:52.750
node 60 when I want to send a message to node

00:01:52.750 --> 00:01:57.200
60. Similarly for 79. Over here, node B knows how

00:01:57.200 --> 00:02:01.260
to communicate with 60, knows how to communicate with 109. And

00:02:01.260 --> 00:02:04.260
if these are the only entries that are in the routing

00:02:04.260 --> 00:02:07.630
tables of A and B, these are the ones to which

00:02:07.630 --> 00:02:12.150
node A knows how to communicate directly. What if I want to go to some other

00:02:12.150 --> 00:02:17.860
node that is not in my routing my table yet? For example let's say

00:02:17.860 --> 00:02:22.960
that I am trying to retrieve a key, 58 or 59. I know

00:02:22.960 --> 00:02:28.150
that 58 or 59, in terms of the DST construction, it's

00:02:28.150 --> 00:02:33.640
most likely stored in some node whose ID

00:02:33.640 --> 00:02:42.040
is very close to this key. Now in my table I have a node ID 60, close enough to

00:02:42.040 --> 00:02:45.800
the key that I'm looking for. So what I'm going to hope is that if I am looking

00:02:45.800 --> 00:02:49.910
for this particular key, 58 or 59, good chance

00:02:49.910 --> 00:02:53.590
that the key value pair that corresponds to 58

00:02:53.590 --> 00:02:56.550
or 59 is stored in this node ID 60.

00:02:56.550 --> 00:03:00.130
So that's the one that I'm going to communicate with.

00:03:00.130 --> 00:03:05.050
It's possible that 58 is actually stored in

00:03:05.050 --> 00:03:10.000
a node ID 58, in which case my hope is the desired

00:03:10.000 --> 00:03:14.570
destination that I want to reach to is known to this peer,

00:03:14.570 --> 00:03:20.430
60, who is close to the node number 58. So in other words,

00:03:20.430 --> 00:03:25.700
if I want to communicate with node number 58, my best bet

00:03:25.700 --> 00:03:27.990
is to communicate with node number 60 with

00:03:27.990 --> 00:03:30.680
the hope that 60 may actually know how

00:03:30.680 --> 00:03:34.310
to communicate with node number 58, because ultimately

00:03:34.310 --> 00:03:37.870
I'm hoping that that's where this particular key value

00:03:37.870 --> 00:03:42.980
pair may be actually stored. On the other hand, if the key that I am looking for

00:03:42.980 --> 00:03:50.890
is 80 or 81, then I'll say well, chances are this key is toward a node

00:03:50.890 --> 00:03:57.840
ID 79 for whom I have a mapping. Or if I go to him, he might know how to get to

00:03:57.840 --> 00:04:03.300
node number 80 which may be actually storing this key 80, which may be actually

00:04:03.300 --> 00:04:06.350
storing this key 80. So in other words, in

00:04:06.350 --> 00:04:08.740
the greedy approach what we're going to do is

00:04:08.740 --> 00:04:12.490
in placing a key value we're going to place

00:04:12.490 --> 00:04:16.170
the key value pair at a node N where N

00:04:16.170 --> 00:04:22.680
is equal to K, ideally, or close to K. Similarly, if I want to retrieve

00:04:22.680 --> 00:04:29.360
a key K, I'm going to go to a node N, where N is either equal to K if I know

00:04:29.360 --> 00:04:35.190
how to get to it from my routing table. Or get to a node that is close enough to

00:04:35.190 --> 00:04:41.190
the desired N. In this case, the desired N is 58 or 59, but the one that I

00:04:41.190 --> 00:04:47.370
can get to is 60, and my hope is that when I get to 60 he will know how to get

00:04:47.370 --> 00:04:53.430
me to node number 58 or 59. Or even better, he may be the one that is storing

00:04:53.430 --> 00:04:56.620
this particular key value pair that corresponds to the key

00:04:56.620 --> 00:04:59.350
that I'm looking for. So in other words, in the

00:04:59.350 --> 00:05:02.830
greedy approach we are trying to get to our desired

00:05:02.830 --> 00:05:06.300
destination as quickly as possible with the minimum number of

00:05:06.300 --> 00:05:09.530
hops to get to the desired destination. And when

00:05:09.530 --> 00:05:12.680
I say the number of hops, it is at the

00:05:12.680 --> 00:05:16.070
level of the virtual overlay network, not in terms of

00:05:16.070 --> 00:05:19.040
the physical network. Because at the user level have no

00:05:19.040 --> 00:05:22.730
idea how many hops my message may actually take

00:05:22.730 --> 00:05:26.090
going from source to destination. All that we are saying

00:05:26.090 --> 00:05:28.790
is at the user level we are trying to minimize

00:05:28.790 --> 00:05:31.500
the number of hops to get to the desired destination.

