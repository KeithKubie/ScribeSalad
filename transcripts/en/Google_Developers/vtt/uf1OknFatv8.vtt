WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.620
&gt;&gt; CHANEZON: Cool. I think everybody is here
so we can get started. Hello, everybody. My

00:00:07.620 --> 00:00:14.370
name is Patrick Chanezon. I've been a developer
advocate at Google since five years. I was

00:00:14.370 --> 00:00:20.190
actually the first one hired to do developer
stuff at Google. And I've been to Brazil twice

00:00:20.190 --> 00:00:31.220
already, GDD last year and some dev-fest a
few years before so I met a few friendly faces

00:00:31.220 --> 00:00:38.910
here. So like Eric Tholome, I am very French
like you can see in my accent. And like Eric

00:00:38.910 --> 00:00:45.850
said, in France we like to come on bare and
wine and cheese. This is Super DuPont, that's

00:00:45.850 --> 00:00:57.760
our national hero. But we also like to work
with our heads like in this case. However,

00:00:57.760 --> 00:01:04.470
contrarily to Eric, I think soccer is just
an area where French and Brazil just get along

00:01:04.470 --> 00:01:11.670
together really well like this picture proves.
And so let's talk about cloud computing. That's

00:01:11.670 --> 00:01:22.140
the topic of my talk today.
Okay, so just a reminder, there's a mobile

00:01:22.140 --> 00:01:28.230
agenda for GDD so if you have an Android or
a smartphone, you can get there and you can

00:01:28.230 --> 00:01:35.980
get feedback about the session in there, and
you can see all the agenda and all that. So

00:01:35.980 --> 00:01:41.460
today, we're going to talk about cloud computing.
There are two talks about it. This one will

00:01:41.460 --> 00:01:47.331
be about platform as a service offering which
is Google App Engine and Google App Engine

00:01:47.331 --> 00:01:52.120
for Business. And then I have another talk
this afternoon if you're interested about

00:01:52.120 --> 00:01:58.830
our new infrastructure as a service, services,
which is Google storage for developer, the

00:01:58.830 --> 00:02:04.530
Prediction API and BigQuery. So if you're
interested in cloud computing, come to both.

00:02:04.530 --> 00:02:09.141
Today we're going to talk about Google App
Engine. The new features in Google App Engine,

00:02:09.141 --> 00:02:14.060
a little bit about the roadmap, some details
about Google App Engine for Business which

00:02:14.060 --> 00:02:20.200
is the new thing that we unveiled at Google
I/O in May and that is in trusted tester right

00:02:20.200 --> 00:02:28.700
now. And then, we have a guest speaker Phillip
Klien from BTBucket. He's going to tell us--Mario,

00:02:28.700 --> 00:02:34.650
this morning, told us about the business aspect
of how BTBucket is using App Engine and he's

00:02:34.650 --> 00:02:40.230
going to tell us about the technical aspect.
And I think he's driving from the airport

00:02:40.230 --> 00:02:47.530
right now. So before I get started, I'd like
to know a little bit more about you guys.

00:02:47.530 --> 00:02:59.090
Who here is using some kind of cloud platform,
whether Amazon or Microsoft or Google? Okay,

00:02:59.090 --> 00:03:05.520
not that many. I guess it's less than 5%.
Any Google App Engine users here already?

00:03:05.520 --> 00:03:12.650
Wow, the same 5% so all of you guys are using
App Engine. That's great. That's a good start.

00:03:12.650 --> 00:03:23.340
So what is cloud computing? Cloud computing,
there are a lots of talks about this these

00:03:23.340 --> 00:03:30.459
days because it began fashionable. It started
to become fashionable this summer when Gartner

00:03:30.459 --> 00:03:37.819
has this hype cycle for technology adoption.
And this summer, cloud computing started to

00:03:37.819 --> 00:03:43.290
get at the top of the hype curve, which means
that during the year, it's going to go down

00:03:43.290 --> 00:03:47.780
into the trough of disillusionment. But we
don't care about that because we're developers.

00:03:47.780 --> 00:03:52.080
We're just going to build stuff with that
kind of infrastructure. If you're interested

00:03:52.080 --> 00:03:58.720
in definitions about cloud computing, there's
a great talk, I forgot his name, at OSCON

00:03:58.720 --> 00:04:06.190
by a guy name Simon--I forgot his last name.
A very good talk where he goes over the 15

00:04:06.190 --> 00:04:11.519
different definitions of cloud computing.
Basically, to me, cloud computing is all about

00:04:11.519 --> 00:04:16.639
industrialization of software infrastructure.
Industrialization and automation. There's

00:04:16.639 --> 00:04:23.479
a great book by Nick Carr, that's called the
Big Switch that explains that what we're going

00:04:23.479 --> 00:04:31.129
through right now is a revolution similar
to the industrialization of electricity at

00:04:31.129 --> 00:04:38.900
the beginning of the 20th century where, basically,
we're going instead of each company having

00:04:38.900 --> 00:04:44.249
their own data center you're going to use
some utility computing and just pay in a metered

00:04:44.249 --> 00:04:49.439
way. And that's exactly how electricity was
industrialized at the beginning of the 20th

00:04:49.439 --> 00:04:54.990
century when lots--every company had their
own powered generators and they started buying

00:04:54.990 --> 00:05:02.099
electricity from utilities that built huge
plants. So we're seeing that move in computing

00:05:02.099 --> 00:05:11.509
these days. It started, I should say, around
10 years ago. And right now, it's reaching

00:05:11.509 --> 00:05:17.700
critical mass where you start to have real
utility computing that is available. What's

00:05:17.700 --> 00:05:23.080
really interesting about this field that it's
blooming. There's tons of startups as well

00:05:23.080 --> 00:05:29.500
as big companies experimenting with various
play sets of that so the market is quite complicated

00:05:29.500 --> 00:05:38.719
and there are a lots of offerings in there.
The way the analyst traditionally view that

00:05:38.719 --> 00:05:45.490
market is with three layers. The first one
is infrastructure of the service. That's what

00:05:45.490 --> 00:05:51.360
companies like, Joyent or Amazon are doing.
Basically, it's renting VMs, you just provision

00:05:51.360 --> 00:05:57.871
your VMs in the cloud. It's very flexible
but the disadvantage of it is that you still

00:05:57.871 --> 00:06:02.529
have to manage all that stuff. And so there
are some companies like RightScale that provide

00:06:02.529 --> 00:06:07.210
you some admin consoles for managing all that
but still there's lots of work to provision

00:06:07.210 --> 00:06:14.569
all the VMs and build your own scalable infrastructure
on top of that. On top of that, there's another

00:06:14.569 --> 00:06:20.729
layer called platform as a service. This is
what Google App Engine is. In a platform--and

00:06:20.729 --> 00:06:27.020
there are some other frames like Windows Azure
or force.com. The concept of platform as a

00:06:27.020 --> 00:06:31.669
service is you write your code, you push it
to the cloud, and then the cloud provider

00:06:31.669 --> 00:06:38.139
manages everything like the load balance or
the number of the front-end servers, number

00:06:38.139 --> 00:06:45.039
of backend servers and replication the data
store and replication between different data

00:06:45.039 --> 00:06:54.590
centers. So the disadvantage of these platforms
is that you need to abide by the limitations

00:06:54.590 --> 00:06:59.219
of the platform provider. So I'll tell you
about Google App Engine. There are few limitations

00:06:59.219 --> 00:07:05.029
in there. For example, you need to code in
Java or Python if you do PHP or oblige to

00:07:05.029 --> 00:07:10.249
go to infrastructure as a service. But if
you abide by these limitations, it buys you

00:07:10.249 --> 00:07:15.969
a lot of flexibility. You just can't concentrate
on your code and you don't need to worry about

00:07:15.969 --> 00:07:24.259
scalability. And then at the top layer of
that is software as a service which is what

00:07:24.259 --> 00:07:30.080
Google Apps or salesforce.com are about. And
there's a big explosion of software as a service

00:07:30.080 --> 00:07:36.479
these days. Most software is becoming as a
service, and as companies are building more

00:07:36.479 --> 00:07:43.210
and more of type of software that use to be
done as client applications provided as a

00:07:43.210 --> 00:07:54.889
service, they more and more rely on cloud
computing for that. The way I describe Google's

00:07:54.889 --> 00:08:03.979
exposure of cloud computing is pretty much
like a striptease. So we started with a software

00:08:03.979 --> 00:08:08.020
as a service with Google Apps. We've provided
Gmail and Google Docs and all that to all

00:08:08.020 --> 00:08:12.830
companies. After that, we just unveiled one
layer and we exposed our platform which is

00:08:12.830 --> 00:08:18.309
Google App Engine. And then more recently,
we started unveiling even more and starting

00:08:18.309 --> 00:08:26.339
to expose our infrastructure like Google storage
for developers. So I talked about the value

00:08:26.339 --> 00:08:31.050
proposition for infrastructure as a service.
It's very flexible but you still have to manage

00:08:31.050 --> 00:08:38.840
all that stuff yourself. Now, platform as
a service is much easier. Google App Engine's

00:08:38.840 --> 00:08:43.380
value proposition Eric talked about it this
morning. I won't go over that for long. It's

00:08:43.380 --> 00:08:48.950
like build, manage, and scale. It's easy to
do all that. And our motto in the App Engine

00:08:48.950 --> 00:08:54.171
team is, "We wear the pagers so you don't
have to." And I think it's a pretty good--pretty

00:08:54.171 --> 00:09:00.520
good explanation of what we do. Numbers are
really good, I think, Eric showed them this

00:09:00.520 --> 00:09:08.911
morning, 90,000 developers and 130,000 apps
and 700 million daily pageviews. This is a

00:09:08.911 --> 00:09:15.090
Wordle, like a tech cloud of words about an
App Engine. It's all about applications and

00:09:15.090 --> 00:09:22.761
data and request and data store. Lots of partners,
lots of companies have started using App Engine

00:09:22.761 --> 00:09:28.740
for their apps. Initially, when we launched
App Engine in 2008, the first type of companies

00:09:28.740 --> 00:09:36.760
who adopted it on mass where mobile and social
companies. Companies who have hockey stick

00:09:36.760 --> 00:09:44.370
curve type of adoption where from one week
to the other they have two more million users

00:09:44.370 --> 00:09:49.130
and there's no way they could manage that
to have their own infrastructure. So for this

00:09:49.130 --> 00:09:56.800
type of companies like BuddyPoke on Orkut,
App Engine was really a boon. Now, that app

00:09:56.800 --> 00:10:01.910
engine has matured and we have added lots
of feature, there are more and more enterprise

00:10:01.910 --> 00:10:07.360
companies and ISGs who start to build their
apps on top of App Engine. And BTBucket is

00:10:07.360 --> 00:10:13.820
going to come to talk at the end of this talk
to explain their experience. Socialwok is

00:10:13.820 --> 00:10:19.800
another good example. They're doing social
networking for enterprises and they are integrated

00:10:19.800 --> 00:10:26.330
with Google Apps in the Google Apps Marketplace.
Best Buy is another example of enterprise

00:10:26.330 --> 00:10:34.370
use. BuddyPoke, very famous on Orkut, and
they've been one of our poster children since

00:10:34.370 --> 00:10:40.180
the beginning. Lots of social apps like Gigya
as well. And what's interesting about Gigya

00:10:40.180 --> 00:10:49.950
is if you look at the kind of spikes here--so
you see the spike there, App Engine is very

00:10:49.950 --> 00:11:00.130
good at managing spikes. So, why App Engine,
I talked about that before. If you're hosting

00:11:00.130 --> 00:11:07.250
by yourself or either, you know, you have
lots of hidden costs. If you're using infrastructure

00:11:07.250 --> 00:11:12.120
as a service, you have lots of hidden cost
as well, you need to manage all that stuff.

00:11:12.120 --> 00:11:17.990
So, what's in App Engine? So you have SDK,
the hardware, networking, we take care of

00:11:17.990 --> 00:11:28.080
everything. But you're limited to two languages,
Java and Python. In terms of features, we

00:11:28.080 --> 00:11:35.600
provide you a lot of services that are just
connectors to internal infrastructure at Google

00:11:35.600 --> 00:11:41.270
in the form of APIs. So the services we have
are Memcache, the Datastore, which is called

00:11:41.270 --> 00:11:50.040
Bigtable, URL Fetch, Mail, XMPP, Task Queues,
Images, Blobstore to store big files, and

00:11:50.040 --> 00:11:59.740
a User Service. To language runtimes, we try
to make App Engine use standards whenever

00:11:59.740 --> 00:12:05.340
we can so that you can port your app outside
of App Engine if you want to. In order to

00:12:05.340 --> 00:12:11.120
do that, what we do is that we use standards
whenever they exist. So for example, App Engine

00:12:11.120 --> 00:12:16.250
in Python is using the WSGI, which is the
standard for Python Apps, and you can run

00:12:16.250 --> 00:12:23.070
Jungle applications there. For Java, we're
using Servlets and JDO/JPA. For the URL Fetcher,

00:12:23.070 --> 00:12:29.880
we're using java.net.URL and javax.mail for
the mail and all that. So we try not to ring

00:12:29.880 --> 00:12:36.150
event APIs. And the result of that is that
there are some developers who took the App

00:12:36.150 --> 00:12:42.930
Engine SDK which is open source. And the App
Engine SDK is open source, you can run it

00:12:42.930 --> 00:12:47.930
on your laptop to just do your development
and when you're finish you push it to the

00:12:47.930 --> 00:12:55.770
production server. Some developers at a university
in the U.S., they created this open source

00:12:55.770 --> 00:13:08.990
project called, I think, it's a Python IE--Python
IE were they took the App Engine SDK and they

00:13:08.990 --> 00:13:15.820
plug it into scalable components--oh no, it's
called App Scale. So they plug that to scalable

00:13:15.820 --> 00:13:21.770
open source components, like for example,
they replaced Bigtable with [INDISTINCT].

00:13:21.770 --> 00:13:27.310
So that now you can run your private cloud
inside of your company if you want to and

00:13:27.310 --> 00:13:33.480
use the same technology that you're using
with App Engine. So that kind of ensures the

00:13:33.480 --> 00:13:38.880
portability. Another aspect that's interesting
is that, because we have Java, there are lots

00:13:38.880 --> 00:13:47.110
of languages that run on top of the VM. So,
Scala, JRuby, so you can build rails application

00:13:47.110 --> 00:13:54.210
with App Engine using JRuby, Groovy. Quercus
is a version of PHP that runs on top of the

00:13:54.210 --> 00:13:59.791
top App Engine but I'm not sure how solid
it is, I haven't tried it myself. You can

00:13:59.791 --> 00:14:06.279
do JavaScript with Rhino and there are even
people using Jython on top of Java instead

00:14:06.279 --> 00:14:12.460
of using App Engine Python because they want
to use other Java APIs. The pricing for App

00:14:12.460 --> 00:14:17.520
Engine, it's free to get started. You have
a five million pageviews per month, a free

00:14:17.520 --> 00:14:23.180
quota. So that's a lot. That means that as
long as your application don't get serious

00:14:23.180 --> 00:14:29.210
volume, App Engine is free for you. Then if
you start to get into the more than 5 million

00:14:29.210 --> 00:14:34.260
page views you pay for what you're using.
But at this point we expect that you'll be

00:14:34.260 --> 00:14:44.710
able to monetize your app, and so you're paying
for bandwidth and CPU and storage, and all

00:14:44.710 --> 00:14:48.810
that. When you're--so there's a dashboard
that shows all your application health and

00:14:48.810 --> 00:14:55.310
stats, and you can view the data store and
all that. And there's a system status console.

00:14:55.310 --> 00:15:01.450
In terms of developer tools, we have the App
Engine launcher that you saw Python and I'll

00:15:01.450 --> 00:15:10.050
show you that. And then--and there's a console
in there that you can use, there's a plug-in

00:15:10.050 --> 00:15:21.160
for Eclipse and it's constantly evolving.
So that's the timeline for the past two years.

00:15:21.160 --> 00:15:26.529
Basically when you look App Engine, if you
looked at App Engine in 2009, you should take

00:15:26.529 --> 00:15:31.480
a look again because there are lots of capabilities
that have been added since then. So the big

00:15:31.480 --> 00:15:37.540
things were the Python launch, the Java launch
and then App Engine for business in May. But

00:15:37.540 --> 00:15:43.970
in between these release is we add lots of
more features. So, something that's were pretty

00:15:43.970 --> 00:15:52.010
important was XMPP support, incoming email.
There are some companies like TweetDeck who

00:15:52.010 --> 00:15:57.070
use App Engine only for the email service
because they found that this is the cheapest

00:15:57.070 --> 00:16:03.980
way to send email that they found. The Blobstore
for storing large files. And then later on

00:16:03.980 --> 00:16:12.170
an additional API for serving images in a
very fast way where we are using a Picasa

00:16:12.170 --> 00:16:18.860
infrastructure. App Stats, if you're an APP
Engine developer I highly recommend to look

00:16:18.860 --> 00:16:26.339
at that tool. It really lets you--it's a server
side profiler. It really let's you see which

00:16:26.339 --> 00:16:32.820
pieces of your code are taking the longest
time to run. I think URL Fetch allows you

00:16:32.820 --> 00:16:39.900
to fetch many URLs in parallel in the same
request. And then OpenId, Oauth, and better

00:16:39.900 --> 00:16:52.290
Bulkloader back in May. So what's new? One
of the new things is the Multitenant API.

00:16:52.290 --> 00:16:58.700
It's called a Namespace API. It allows you
to--it makes it easier for you to go Multitenant

00:16:58.700 --> 00:17:04.059
applications. So, first time I heard about
Multitenant, it was all in the salesforce

00:17:04.059 --> 00:17:08.589
lingo and I thought, "Wow, what the heck is
that? What does that mean?" And what that

00:17:08.589 --> 00:17:13.939
mean is very simply. It means you have just
one web application and it can be used by

00:17:13.939 --> 00:17:19.630
many different domains. And each of these
domains will have separate data stores. So

00:17:19.630 --> 00:17:24.629
instead of provisioning separate apps and
separate data stores, just use the same app,

00:17:24.629 --> 00:17:29.400
same data store but then you just have an
API to say, "Oh, when I'm making this call

00:17:29.400 --> 00:17:35.700
into the data layer, just prefix it with this
Namespace which corresponds, for example,

00:17:35.700 --> 00:17:40.510
to the company domain or something like that,
and then you don't need to worry about it."

00:17:40.510 --> 00:17:46.529
So that's a very easy way to build these Multitenant
apps. And it is especially important because

00:17:46.529 --> 00:17:52.649
more and more Google Apps Marketplace applications
are using App Engine and they need to be Multitenant

00:17:52.649 --> 00:17:58.659
in order to participate in the Marketplace.
High performance image serving, I told you

00:17:58.659 --> 00:18:05.629
that. Now, when you put an image in the Blobstore,
instead of it being served relatively slowly

00:18:05.629 --> 00:18:12.919
from the Blobstore you can elect to use the
Picasa service to just serve your image really

00:18:12.919 --> 00:18:19.450
fast and crop to a certain size and all that.
OpenId and Oauth integration, Error Pages,

00:18:19.450 --> 00:18:26.790
we have--we increased lots of good quotas
that we were limits for developers. You can

00:18:26.790 --> 00:18:33.669
now pause Task Queues from the console. And
there's a lot of stuff. You should check our

00:18:33.669 --> 00:18:39.130
blog for all the features. Now, there are
three up and coming features that I think

00:18:39.130 --> 00:18:45.370
are really important and will help you build
a new kind of app in App Engine. App Engine

00:18:45.370 --> 00:18:51.860
traditionally has been targeted at just building
web apps but there's a lot of stuff in the

00:18:51.860 --> 00:18:58.019
web app that needs to have asynchronously
were your messaging, your data, you do migrations,

00:18:58.019 --> 00:19:04.830
you clean up your data, you do reporting and
all that, all that aspects has slowly evolved

00:19:04.830 --> 00:19:11.220
into App Engine. First, we have Task Queues
and now there's three APIs in the pipe that

00:19:11.220 --> 00:19:18.450
will help you do this heavy duty processing.
First one is called the Mapper API. Who among

00:19:18.450 --> 00:19:26.480
you have heard about MapReduce? Any MapReduce
users here? Okay. So for those of you haven't,

00:19:26.480 --> 00:19:33.769
I highly recommend the MapReduce papers by--that
was done by Googlers maybe 10 years ago or

00:19:33.769 --> 00:19:44.510
eight years ago. MapReduce is--it's a notion
that comes from 30 years ago from list but

00:19:44.510 --> 00:19:52.649
it's been re-implemented in C++ by Googlers,
like eight years ago, in order to build our

00:19:52.649 --> 00:19:59.039
batch processing pipeline. So MapReduce is
what we're using internally at Google to compute

00:19:59.039 --> 00:20:06.000
the search ranking and do a lot of background
processing, batch processing that happens

00:20:06.000 --> 00:20:14.820
asynchronously. The concept of MapReduce is
very simple. You just have--instead of building

00:20:14.820 --> 00:20:24.029
a long program that will act on your data
you just cut it down into small parts containing

00:20:24.029 --> 00:20:31.429
two essential operations. One is called map
that selects a specific set of data from all

00:20:31.429 --> 00:20:35.960
the data stream that you're going through
and all this is happening in parallel on lots

00:20:35.960 --> 00:20:42.200
of different servers. And then the second
one once your Mapper has done their job they

00:20:42.200 --> 00:20:48.269
can push the entries that they have done into
a reducer, into a reduce operation, and Reduce

00:20:48.269 --> 00:20:54.240
takes lots of records and then reduces them
to a single data or a single record or something

00:20:54.240 --> 00:21:04.850
like that. And this is a very simple concepts
that you can--if you can reduce lots of your

00:21:04.850 --> 00:21:14.029
processing to this paradigm it lends itself
very well to parallelization. So once you

00:21:14.029 --> 00:21:20.119
have coded your stuff in MapReduce, basically
you can have the underlying infrastructure

00:21:20.119 --> 00:21:26.289
run it in parallel on thousands of servers
and huge sets of data. So in App Engine today

00:21:26.289 --> 00:21:31.830
we don't have reduce yet but we have map and
map can be very useful. So what map allows

00:21:31.830 --> 00:21:40.279
you to do is--for example to do a report generation
or to clean up your data store. For example,

00:21:40.279 --> 00:21:47.950
you can have a map that just go over all your
records and look for a specific field and

00:21:47.950 --> 00:21:55.080
remove it. Brett Slatkin from the App Engine
team who's maintaining the PubSubHubbub project--if

00:21:55.080 --> 00:22:02.730
you want to hear more about that, come to
my social session later, so he has a huge

00:22:02.730 --> 00:22:14.409
PubSubHubbub public hub that's used by lots
of people with I think maybe a terabyte of

00:22:14.409 --> 00:22:21.429
data; like huge number of records, millions
of records in there. And this is an App Engine

00:22:21.429 --> 00:22:28.080
app and he was one of the first one to use
the Mapper and what he did is that all his

00:22:28.080 --> 00:22:33.159
data was taking too much space so he just
wrote a map, sent it to a Mapper and said,

00:22:33.159 --> 00:22:37.389
"Just execute this," and the Mapper was a
few lines of code just to remove one field

00:22:37.389 --> 00:22:44.009
from all that. And I think it's run nonstop
for eight days or something like that on lots

00:22:44.009 --> 00:22:50.639
of servers and he--I need to put the link
in there, but he put a buzz entry above this

00:22:50.639 --> 00:22:57.940
and it was pretty impressive. So Mapper API
is coming soon. Another important aspect for

00:22:57.940 --> 00:23:04.980
building apps is something called Comet, which
is where the server is pushing some data to

00:23:04.980 --> 00:23:10.820
your clients. For example, when you're in
Gmail, you receive notification that your

00:23:10.820 --> 00:23:16.190
Gmail, there's new mail for you. So in order
to build that kind of apps in App Engine it

00:23:16.190 --> 00:23:23.289
was impossible before because you have a 30-second
limit for every HTTP request so after that,

00:23:23.289 --> 00:23:28.350
there's no way to keep a connection open to
the server so you have to pull. In order to

00:23:28.350 --> 00:23:34.740
make that kind of apps possible, we're releasing
a new API called the Channel API. That's a

00:23:34.740 --> 00:23:41.710
conjunction of a client-side library and a
server-side component API that will basically

00:23:41.710 --> 00:23:49.369
allow you to use an API that's very similar
to WebSocket in HTML5 in App Engine apps.

00:23:49.369 --> 00:23:54.090
And what that allows you to do is to have
some test queues on the server that can push

00:23:54.090 --> 00:24:00.889
some results to the browser. So that's pretty
impressive. And there's some demo code already.

00:24:00.889 --> 00:24:05.379
If you want to participate in this one, it's
in trusted tester right now. It's not generally

00:24:05.379 --> 00:24:11.779
available yet. And then the last one that
was announced last week in the Google Group

00:24:11.779 --> 00:24:20.340
for developers is called the Matcher API.
So Matcher API allows you to register some

00:24:20.340 --> 00:24:25.980
queries to match against incoming documents
in the database but shoots your documents.

00:24:25.980 --> 00:24:32.169
So it's not like map where map is acting on
your existing database. Here, you're setting

00:24:32.169 --> 00:24:37.659
matchers for specific criteria on the future
stuff that's going to enter your database.

00:24:37.659 --> 00:24:43.169
And then we have some powerful infrastructure
of it that's going to run that in parallel

00:24:43.169 --> 00:24:50.379
in a very efficient way instead of running
test queues by yourself where basically your

00:24:50.379 --> 00:24:56.619
criteria or your query is going to be execute
every time there are some new documents coming

00:24:56.619 --> 00:25:01.350
in the system and then that query can do something
with it like increment a counter, create a

00:25:01.350 --> 00:25:09.250
new record, send an email or whatever. So,
this one is in trusted tester as well. And

00:25:09.250 --> 00:25:14.250
I think there's a signup sheet in the Google
Group. I'll push my slide on slide chair a

00:25:14.250 --> 00:25:21.109
little bit after this talk so you can find
all these URLs. Now the App Engine Roadmap,

00:25:21.109 --> 00:25:26.679
I think Eric talked about it this morning.
We have bunch of stuff in the pipe. For me,

00:25:26.679 --> 00:25:32.149
the most exciting one is background servers.
One of the things that you cannot do with

00:25:32.149 --> 00:25:40.049
app engine is not designed for that is to
have long running processes like they do some--so

00:25:40.049 --> 00:25:46.059
we have test queues which are limited to a
specific time that can run in the background.

00:25:46.059 --> 00:25:51.470
But these background services you could connect
to them and so you can implement a much richer

00:25:51.470 --> 00:25:58.409
set of applications with that. So, these ones
are on the pipeline. All the rest, dump and

00:25:58.409 --> 00:26:04.210
restore, like all the rest is like pretty
much we talked about it. Another important

00:26:04.210 --> 00:26:11.460
aspect is reserved instance. Reserved instances
are available in trusted tester today so if

00:26:11.460 --> 00:26:15.549
you need that, ping me, and I'll put you on
the list for that. Reserved instances allow

00:26:15.549 --> 00:26:24.400
you to book--yes, to book an instance, a specific
instance for your App Eapp. When you push

00:26:24.400 --> 00:26:30.440
your App Engine app to App Engine, you don't
know which server you're running on, how many

00:26:30.440 --> 00:26:35.230
instances they are. You don't have any control
of that and that's a little promise of platform

00:26:35.230 --> 00:26:41.280
as a service. Now, in some cases, that's a
problem. Like for example, when you're using

00:26:41.280 --> 00:26:48.879
heavy frameworks in Java that take a long
time to load, the first request is going to

00:26:48.879 --> 00:26:54.080
cost a lot. So there's going to be a lot of
this 30-second that is taken by the framework

00:26:54.080 --> 00:26:59.859
loading. And it's even worse when you're running
interpreted languages on top of the VM, like

00:26:59.859 --> 00:27:06.109
JRuby for example. So for that type of app,
it's really slow to start. And because that's

00:27:06.109 --> 00:27:12.109
a problem, reserved instances, you will be
able to pin down your application to a few

00:27:12.109 --> 00:27:18.331
instances. And that's where you pay that price
for the warming request only once and you

00:27:18.331 --> 00:27:25.659
can do that at Startup. So, that should solve
a lot of problems. Now Google App Engine for

00:27:25.659 --> 00:27:33.190
Business, so, that's the new stuff that's
being announced at Google I/O last year. It's

00:27:33.190 --> 00:27:38.690
very similar to Google App Engine but it's
trying to address a different use case which

00:27:38.690 --> 00:27:45.799
is lots of people are building public web
apps with Google App Engine. But since 2008

00:27:45.799 --> 00:27:50.879
when we shipped it, I've been talking to lots
of companies and they come to me and they

00:27:50.879 --> 00:27:56.799
say, "Oh, we like the flexibility. We like
not to have to worry about all that infrastructures

00:27:56.799 --> 00:28:01.710
and stuff. We like to use App Engine for building
our internal apps but basically, you guys,

00:28:01.710 --> 00:28:09.780
are bozos. There's no SLA. There's no paid
support. There's no SQL support. I need that

00:28:09.780 --> 00:28:15.139
because I have some existing apps so I just
cannot use it." So basically what we did is

00:28:15.139 --> 00:28:21.049
that we responded to this market demand by
created Google App Engine for Business to

00:28:21.049 --> 00:28:29.250
specifically address this use case of building
internal apps for companies, for Internet-type

00:28:29.250 --> 00:28:38.879
of applications.
So App Engine for Business is the same platform

00:28:38.879 --> 00:28:48.350
as App Engine with a few enterprise specific
features in there. So the first one is what

00:28:48.350 --> 00:28:53.359
we called the domain console that allows you
to provision your apps from a single console

00:28:53.359 --> 00:28:59.490
for the whole intranet. So you don't need
to depend on the main name space from appspot.com,

00:28:59.490 --> 00:29:08.559
you can create whatever apps in there directly
in the console. There's a 39 SLA. There's

00:29:08.559 --> 00:29:15.249
premium developer support. There's SQL support
as well. And so, that will be available as

00:29:15.249 --> 00:29:23.070
part of App Engine for Business. SSL for your
domain. But then this is targeted at enterprise

00:29:23.070 --> 00:29:29.659
apps, which means these are apps where you're
building internal apps and you're a company

00:29:29.659 --> 00:29:34.479
who have build Google Apps for your domain
so every user will have a Google Apps for

00:29:34.479 --> 00:29:39.820
your domain log-in and all these apps will
be authentified so you need to authentify

00:29:39.820 --> 00:29:47.159
in order to go to these apps. You cannot build
apps that are public on the Web. And the pricing

00:29:47.159 --> 00:29:58.480
is different. So the pricing is $8 per active
user per month for--and per application. So

00:29:58.480 --> 00:30:04.940
the--all that stuff, this is the status of
that. So the admin console is in preview.

00:30:04.940 --> 00:30:08.960
If you're interested in trying it out for
your enterprise, contact me and I'll put you

00:30:08.960 --> 00:30:17.629
on the list. Direct phone support as well.
Hosted SQL, it was available since two or

00:30:17.629 --> 00:30:23.529
three weeks, it's very recent. So if you have
a used case and want to play with that, shoot

00:30:23.529 --> 00:30:30.799
me an email. I wanted to do a demo but I will
lack time. And billing and all that will come

00:30:30.799 --> 00:30:43.680
later in this quarter. Okay, so now maybe
I will--maybe I will do--let me see, I will

00:30:43.680 --> 00:30:58.590
just show you a very quick demo before Phillip
can come in, so. Yeah, I know. Let me show

00:30:58.590 --> 00:31:06.279
you my console. So this is my, actually this
is my regular console. So that's my regular

00:31:06.279 --> 00:31:11.929
console for App Engine. That's what it looks
like here; I was looking at the logs. I actually

00:31:11.929 --> 00:31:20.450
deployed my first SQL App today. I've been
waitlisted last week. And I can show you the

00:31:20.450 --> 00:31:27.979
SQL App in--so this is just a servelet in
Java, so that's in Eclipse. So I have a servelet

00:31:27.979 --> 00:31:34.289
here. It's a very simple servelet. I just
register the new driver, SQL driver, that

00:31:34.289 --> 00:31:42.070
we have in there. So I get a connection to
my database. And then I can execute SQL commands,

00:31:42.070 --> 00:31:52.379
it's just a JDBC driver. So that's what I
did and I just deployed it before coming here.

00:31:52.379 --> 00:32:00.749
So it--yeah. Today, just insert the statement
in the database. I need to make that example

00:32:00.749 --> 00:32:06.960
a little bit better. I just wanted to show
you that that stuff works. But then I wanted

00:32:06.960 --> 00:32:12.059
to show you the admin console. So this is
the new domain console. I have it for my chanezon.com

00:32:12.059 --> 00:32:18.290
domain where I manage all my family's applications.
So let's say, I'm a small business and I have

00:32:18.290 --> 00:32:29.210
this console. And here you can see that I
have a few applications and I could create

00:32:29.210 --> 00:32:36.760
a new application, and it's an app engine
for business application, and it's going to

00:32:36.760 --> 00:32:43.979
be automatically in my X.chanezon.com domain
extension. And I created it there and I don't

00:32:43.979 --> 00:32:50.109
need to go to the regular app engine console.
Then the new admin console also lets me do

00:32:50.109 --> 00:33:00.440
things like specify who in my company is allowed
to do what. And then this is an example of

00:33:00.440 --> 00:33:06.590
an app engine for business application for
my domain where here you can see I have deployed,

00:33:06.590 --> 00:33:11.229
it's an open source blogging engine written
by Nick Johnson, one of my colleagues. It's

00:33:11.229 --> 00:33:16.519
called "blog art" and I deployed it in app
engine for business inside of my domain which

00:33:16.519 --> 00:33:23.349
means that if a user on the Internet who's
not logged in to my domain just tries to get

00:33:23.349 --> 00:33:31.539
there, so I'm just going to create a new incognito
window so I'm not logged in here. If I go

00:33:31.539 --> 00:33:36.269
there, he will ask me to login to the Chanezon
family. So I need to be part of the domain

00:33:36.269 --> 00:33:43.669
to use that. And just to deploy that you just
check out the code, put your app I.D. in there

00:33:43.669 --> 00:33:52.419
and deploy it, it takes five minutes. So on
that, I'm welcoming Phillip Klien from Predicta

00:33:52.419 --> 00:33:57.510
and BTBucket. He's going to tell us about
the technical aspect of how the user App Engine...

00:33:57.510 --> 00:34:06.940
&gt;&gt; KLIEN: Thank you.
&gt;&gt; CHANEZON: Thanks for coming, Phillip. He

00:34:06.940 --> 00:34:19.650
just comes back from the airport, so thanks
for coming today.

00:34:19.650 --> 00:34:30.451
&gt;&gt; KLIEN: Thank you. Hello. Hello. [SPEAKING
IN FOREIGN LANGUAGE] hosting [SPEAKING IN

00:34:30.451 --> 00:34:36.950
FOREIGN LANGUAGE] app engine [SPEAKING IN
FOREIGN LANGUAGE] app engine [SPEAKING IN

00:34:36.950 --> 00:34:44.140
FOREIGN LANGUAGE] Java [SPEAKING IN FOREIGN
LANGUAGE] Java [SPEAKING IN FOREIGN LANGUAGE]

00:34:44.140 --> 00:34:58.590
Python [SPEAKING IN FOREIGN LANGUAGE] app
engine [SPEAKING IN FOREIGN LANGUAGE] App

00:34:58.590 --> 00:35:11.060
Engine for business, so [INDISTINCT] get back
to follow a key [SPEAKING IN FOREIGN LANGUAGE]

00:35:11.060 --> 00:35:16.230
I just think [SPEAKING IN FOREIGN LANGUAGE]
app engine [SPEAKING IN FOREIGN LANGUAGE]

00:35:16.230 --> 00:35:20.440
Google [SPEAKING IN FOREIGN LANGUAGE].
&gt;&gt; CHANEZON: [SPEAKING IN FOREIGN LANGUAGE].

00:35:20.440 --> 00:35:30.080
Thanks, Phillip. And just to conclude, we
have Yara Senger from Globalcode.

00:35:30.080 --> 00:35:47.100
&gt;&gt; SENGER: Thank you very much. And since
he mentioned, I'll start the talk to the Globalcode.

00:35:47.100 --> 00:35:59.880
I'm going to start [SPEAKING IN FOREIGN LANGUAGE]
Java and [INDISTINCT] [SPEAKING IN FOREIGN

00:35:59.880 --> 00:36:18.830
LANGUAGE] Globalcode [SPEAKING
IN FOREIGN LANGUAGE] global [SPEAKING IN FOREIGN

00:36:18.830 --> 00:36:32.010
LANGUAGE] and also--and also [SPEAKING

00:36:32.010 --> 00:36:58.600
IN FOREIGN LANGUAGE] Google [SPEAKING IN FOREIGN
LANGUAGE] Google App Engine [SPEAKING IN FOREIGN

00:36:58.600 --> 00:37:43.800
LANGUAGE] Android [SPEAKING IN FOREIGN LANGUAGE]
the

00:37:43.800 --> 00:38:21.730
Google [SPEAKING IN FOREIGN LANGUAGE] Google
Technology User Group [SPEAKING IN FOREIGN

00:38:21.730 --> 00:38:42.270
LANGUAGE] Google App Engine [SPEAKING IN FOREIGN
LANGUAGE] Globalcodes [SPEAKING IN FOREIGN

00:38:42.270 --> 00:39:26.730
LANGUAGE] Google
App

00:39:26.730 --> 00:40:10.730
Engine

00:40:10.730 --> 00:40:48.710
[SPEAKING

00:40:48.710 --> 00:42:30.330
IN FOREIGN LANGUAGE] Google App Engine

00:42:30.330 --> 00:42:45.670
[SPEAKING

00:42:45.670 --> 00:49:12.560
IN FOREIGN LANGUAGE]

