WEBVTT
Kind: captions
Language: en

00:00:00.550 --> 00:00:03.360
So, what I want to do here is, take a

00:00:03.360 --> 00:00:06.950
look at how we would go about auditing our street

00:00:06.950 --> 00:00:10.720
names or our names for ways in such a way

00:00:10.720 --> 00:00:13.160
that we can get a sense for what's going to need

00:00:13.160 --> 00:00:16.440
to be fixed here? All right? So, let me walk

00:00:16.440 --> 00:00:19.340
you through this code in detail. This is a modified

00:00:19.340 --> 00:00:21.750
version of the code we looked at back in Lesson

00:00:21.750 --> 00:00:26.260
Three. And what we're doing here is using ElementTree, the C

00:00:26.260 --> 00:00:30.760
version, and if we scroll down, this is actually one

00:00:30.760 --> 00:00:33.410
of the more interesting parts of this code. So let's, let's

00:00:33.410 --> 00:00:35.560
take it one step at a time. So here, we're

00:00:35.560 --> 00:00:39.320
using iterparse, part of the ElementTree module. Okay. And a couple

00:00:39.320 --> 00:00:41.840
of things I want to point out here. Again, remember that

00:00:41.840 --> 00:00:46.030
this data set is enormous, almost 2 gigabytes. So, we can't

00:00:46.030 --> 00:00:48.550
read the whole thing into memory as an XML tree

00:00:48.550 --> 00:00:50.800
or an element tree. Rather, what we have to do is,

00:00:50.800 --> 00:00:54.970
iteratively parse it or parse it using event-based parsing

00:00:54.970 --> 00:00:57.160
and you can see some of that language coming

00:00:57.160 --> 00:01:00.950
out here. Essentially, the way iterparse works is, every

00:01:00.950 --> 00:01:03.300
time it sees one of the events that we've

00:01:03.300 --> 00:01:08.260
specified here, it is going to emit the event

00:01:08.260 --> 00:01:11.150
and the element that it found, okay? So, let

00:01:11.150 --> 00:01:13.190
me break that down in terms of the data

00:01:13.190 --> 00:01:16.140
specifically. The way I've set this code up is

00:01:16.140 --> 00:01:19.620
anytime it sees a start tag, okay, that's

00:01:19.620 --> 00:01:22.840
what this says here All right? And to events,

00:01:22.840 --> 00:01:25.250
we actually have to pass it a tuple.

00:01:25.250 --> 00:01:27.780
Okay? We can pass it any number of recognized

00:01:27.780 --> 00:01:30.530
events. But, in this case, I'm only concerned

00:01:30.530 --> 00:01:33.770
with getting start tag events. So I just want

00:01:33.770 --> 00:01:37.930
iterparse to generate the next item in its iteration

00:01:37.930 --> 00:01:41.890
when it sees a start tag. And in Python,

00:01:41.890 --> 00:01:44.100
we need to end tuples with the comma, okay, so make

00:01:44.100 --> 00:01:47.000
sure you do that if you're going to use code like this. Okay,

00:01:47.000 --> 00:01:49.920
and then what I'm saying here in the next line is, all

00:01:49.920 --> 00:01:53.060
right, if that element you kicked out to me, again remember, this

00:01:53.060 --> 00:01:55.820
is a tag, so this is going to be an object representation,

00:01:55.820 --> 00:02:00.310
a Python object that essentially represents some sort of start tag, a

00:02:00.310 --> 00:02:03.630
node, or a way, or a relation, or maybe member here. Okay.

00:02:03.630 --> 00:02:07.160
And then what I'm doing here is I'm filtering. I'm saying, okay.

00:02:07.160 --> 00:02:13.880
The tag property for this element object that you kicked out, has to be "way",

00:02:13.880 --> 00:02:18.810
that has to be the value of it. Okay, if that's the case, then what I want to do

00:02:18.810 --> 00:02:21.470
is for that element, I want to call

00:02:21.470 --> 00:02:25.180
the iter method, okay? Now, the iter method is

00:02:25.180 --> 00:02:28.350
designed so that it will return in an

00:02:28.350 --> 00:02:32.880
iteration all of the sub tags, the tags nested

00:02:32.880 --> 00:02:35.780
within this particular element, whatever that is. So,

00:02:35.780 --> 00:02:38.720
going back to the documentation here. It would give

00:02:38.720 --> 00:02:42.870
me back, for this particular start tag, each

00:02:42.870 --> 00:02:45.240
and every one of the tags that are nested

00:02:45.240 --> 00:02:50.190
within it. Okay? I can optionally specify to

00:02:50.190 --> 00:02:53.490
the iter method. The value of a particular tag

00:02:53.490 --> 00:02:55.050
that I would like to get back, and what

00:02:55.050 --> 00:02:57.790
this does then is modifies the behavior of iter.

00:02:57.790 --> 00:03:01.340
So that rather than giving me back all of the tags that are nested

00:03:01.340 --> 00:03:06.860
within a particular start tag, it will just give me those that, are named,

00:03:06.860 --> 00:03:08.620
according to the constraint that I've specified,

00:03:08.620 --> 00:03:10.650
so here, I've said, just give me

00:03:10.650 --> 00:03:14.540
back those that are "tag" tags. Okay? So I would just get back these.

