WEBVTT
Kind: captions
Language: en

00:00:00.190 --> 00:00:02.500
And we'll do that with a clustering properties quiz.

00:00:02.500 --> 00:00:03.771
&gt;&gt; Oh yeah.

00:00:03.771 --> 00:00:05.486
&gt;&gt; All right, so what I'm going to do, is I'm

00:00:05.486 --> 00:00:08.680
going to give you three different clustering algorithms. For each one,

00:00:08.680 --> 00:00:12.000
ask whether it has these properties. Does it have richness?

00:00:12.000 --> 00:00:15.630
Does it have scale-invariance? Does it have consistency? And so

00:00:15.630 --> 00:00:17.860
the algorithms are all going to be variations of the first

00:00:17.860 --> 00:00:21.150
clustering algorithm we talked about, single-link clustering. And so, what

00:00:21.150 --> 00:00:23.340
we're going to do is we're going to run single link clustering,

00:00:23.340 --> 00:00:26.060
but to make it a clustering algorithm we have to decide

00:00:26.060 --> 00:00:27.870
under what conditions are we going to stop

00:00:27.870 --> 00:00:31.035
building our clusters? And I've got three different conditions,

00:00:31.035 --> 00:00:32.790
then that defines our three different algorithms. So

00:00:32.790 --> 00:00:36.760
one is, we've got n items that we're clustering.

00:00:36.760 --> 00:00:38.150
I'm going to stop when I've got n over

00:00:38.150 --> 00:00:41.000
2 clusters. 'Kay? So just keep merging, keep building

00:00:41.000 --> 00:00:43.540
clusters until you've reached n over 2 clusters, and

00:00:43.540 --> 00:00:45.430
at that point, stop and return what you've got.

00:00:45.430 --> 00:00:46.666
&gt;&gt; Okay.

00:00:46.666 --> 00:00:47.530
&gt;&gt; Does that, does that make sense?

00:00:47.530 --> 00:00:47.892
&gt;&gt; Yes.

00:00:47.892 --> 00:00:51.170
&gt;&gt; All right, and you remember enough about single-link clustering for that

00:00:51.170 --> 00:00:53.410
to be meaningful, but that's, it's where were

00:00:53.410 --> 00:00:55.820
going to start off with everything in its own

00:00:55.820 --> 00:00:59.450
cluster, and then merge them together by whatever

00:00:59.450 --> 00:01:02.860
two clusters are closest together, and then iterate.

00:01:02.860 --> 00:01:03.350
&gt;&gt; Yes.

00:01:03.350 --> 00:01:06.540
&gt;&gt; Okay. All right, so that's algorithm one.

00:01:06.540 --> 00:01:08.060
We're going to stop at n over 2 clusters. The

00:01:08.060 --> 00:01:11.040
second one is we're going to have some parameter

00:01:11.040 --> 00:01:16.770
theta, and we're going to keep merging clusters until we'd

00:01:16.770 --> 00:01:18.700
have to merge clusters that are theta

00:01:18.700 --> 00:01:21.860
units apart. And once they're theta units apart,

00:01:21.860 --> 00:01:23.290
we're going to say, nope, that's too far to

00:01:23.290 --> 00:01:24.700
be part of the same cluster. We're done.

00:01:24.700 --> 00:01:25.190
&gt;&gt; Okay.

00:01:25.190 --> 00:01:28.070
&gt;&gt; Okay? So that, again, it's a clustering algorithm, right? It's

00:01:28.070 --> 00:01:30.310
going to take these distances, and it's going to turn it into groups.

00:01:30.310 --> 00:01:32.780
&gt;&gt; So that's like, only things that are within

00:01:32.780 --> 00:01:34.570
ten feet of each other could possibly be clusters.

00:01:36.040 --> 00:01:36.480
&gt;&gt; Exactly.

00:01:36.480 --> 00:01:36.690
&gt;&gt; Okay.

00:01:36.690 --> 00:01:39.550
&gt;&gt; Right. Theta is going to define that. And the

00:01:39.550 --> 00:01:42.060
last one is very, very similar. We're going to keep

00:01:42.060 --> 00:01:45.140
doing clusters until we'd have to merge clusters that

00:01:45.140 --> 00:01:49.610
are farther than theta over omega units apart. And omega

00:01:49.610 --> 00:01:50.970
in this case is going to be defined to

00:01:50.970 --> 00:01:55.440
be the largest pair-wise distance over the entire data set.

00:01:55.440 --> 00:01:55.970
&gt;&gt; That's an omega?

00:01:55.970 --> 00:01:57.540
&gt;&gt; Yes.

00:01:57.540 --> 00:01:59.232
&gt;&gt; Okay.

00:01:59.232 --> 00:02:02.364
&gt;&gt; And that's a capital D, at least now it is.

00:02:02.364 --> 00:02:04.524
&gt;&gt; [LAUGH] Okay.

00:02:04.524 --> 00:02:07.050
&gt;&gt; All right, good? So if you understand these algorithms, what,

00:02:07.050 --> 00:02:09.955
what I'd like you to do is say which of these have the

00:02:09.955 --> 00:02:11.200
richness property, which of them have

00:02:11.200 --> 00:02:13.250
scaling variants, which of them have consistency.

