WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.450
[MUSIC PLAYING]

00:00:05.890 --> 00:00:09.040
ADRIAN LUDWIG: Welcome
this afternoon to our talk

00:00:09.040 --> 00:00:10.070
on Android security.

00:00:10.070 --> 00:00:11.095
My name is Adrian.

00:00:11.095 --> 00:00:12.490
I work on Android security.

00:00:12.490 --> 00:00:15.770
Xiaowen will be joining us
in just a minute as well.

00:00:15.770 --> 00:00:18.010
It's going to be a bit
of a whirlwind tour.

00:00:18.010 --> 00:00:20.110
If I talk too fast
or Xiaowen talks too

00:00:20.110 --> 00:00:21.640
fast I apologize,
but there's really

00:00:21.640 --> 00:00:24.640
been a lot going on in the
world of security, on Android

00:00:24.640 --> 00:00:27.647
and Google Play, over the
last year, the last two years,

00:00:27.647 --> 00:00:28.480
the last five years.

00:00:28.480 --> 00:00:30.610
And so we're going to try to
touch on quite a bit of that

00:00:30.610 --> 00:00:32.276
as we go through here
today and give you

00:00:32.276 --> 00:00:34.720
the information that you
hopefully need and certainly

00:00:34.720 --> 00:00:35.400
seem to want.

00:00:35.400 --> 00:00:38.190
We've got a lot of people
here today-- pretty exciting.

00:00:38.190 --> 00:00:39.970
What we're going
to cover is we'll

00:00:39.970 --> 00:00:42.660
talk a little bit about
security services and from there

00:00:42.660 --> 00:00:45.310
hand off and begin talking
about the core operating system

00:00:45.310 --> 00:00:46.880
and app security.

00:00:46.880 --> 00:00:48.850
So we'll dive right in.

00:00:48.850 --> 00:00:51.700
Yesterday we heard mention
of something new, exciting--

00:00:51.700 --> 00:00:53.080
Google Play Protect.

00:00:53.080 --> 00:00:54.580
What is Google Play Protect?

00:00:54.580 --> 00:00:56.446
The core of it is
an engine that we've

00:00:56.446 --> 00:00:57.820
built over the
last several years

00:00:57.820 --> 00:01:00.790
to protect all of the devices
in the Android ecosystem.

00:01:00.790 --> 00:01:02.810
This slide has grown
year after year,

00:01:02.810 --> 00:01:04.780
and now we talk about
over 2 billion devices

00:01:04.780 --> 00:01:07.540
around the world that are
protected by those services,

00:01:07.540 --> 00:01:09.940
scanning over a billion
devices and checking

00:01:09.940 --> 00:01:14.590
over 50 billion devices and the
applications every single day--

00:01:14.590 --> 00:01:15.947
so incredible scale.

00:01:15.947 --> 00:01:17.530
And the reason that
we have that scale

00:01:17.530 --> 00:01:19.154
is because we need
it to be able to see

00:01:19.154 --> 00:01:22.450
what's going on an
ecosystem that's on a mass--

00:01:22.450 --> 00:01:24.940
really, almost the
majority of devices that

00:01:24.940 --> 00:01:26.230
are out there in the world.

00:01:26.230 --> 00:01:28.688
To be able to actually look at
all of that data, of course,

00:01:28.688 --> 00:01:30.190
requires computational
resources.

00:01:30.190 --> 00:01:32.030
Turns out Google has
quite a few of those.

00:01:32.030 --> 00:01:33.519
We use just a tiny
sliver of them

00:01:33.519 --> 00:01:34.810
to look at the data every day--

00:01:34.810 --> 00:01:37.090
over 20,000 dedicated
processors that

00:01:37.090 --> 00:01:38.660
are looking at that
application data,

00:01:38.660 --> 00:01:42.250
analyzing it, diving deep into
every single new application

00:01:42.250 --> 00:01:45.280
that we find over 500,000
new applications discovered

00:01:45.280 --> 00:01:47.260
every day, and
trying to understand

00:01:47.260 --> 00:01:49.045
how they behave in
our environment,

00:01:49.045 --> 00:01:51.340
and how they behave out
there in the real world,

00:01:51.340 --> 00:01:53.770
and what risks they
might pose for users.

00:01:53.770 --> 00:01:56.427
Now the reason we do that, of
course, is to protect users.

00:01:56.427 --> 00:01:58.510
And so one of the most
important things that we do

00:01:58.510 --> 00:02:01.270
is try to keep an eye on
what is the risk that users

00:02:01.270 --> 00:02:02.740
are being exposed to?

00:02:02.740 --> 00:02:05.110
Clearly, over the last few
years, what we've found

00:02:05.110 --> 00:02:08.259
is that users of Google Play
are in a much safer position.

00:02:08.259 --> 00:02:11.710
They're about 95% safer if
they're installing applications

00:02:11.710 --> 00:02:12.880
that come from Google Play.

00:02:12.880 --> 00:02:15.190
And the reason is we're
able to use data that's

00:02:15.190 --> 00:02:18.217
gathered outside of Google
Play and then analyze

00:02:18.217 --> 00:02:20.050
that in the context of
an environment that's

00:02:20.050 --> 00:02:20.990
much more controlled.

00:02:20.990 --> 00:02:23.500
And so applications at the
time that they're uploaded--

00:02:23.500 --> 00:02:25.870
we're able to analyze them,
understand what's in there,

00:02:25.870 --> 00:02:28.180
and then make good guidance, and
provide that kind of guidance.

00:02:28.180 --> 00:02:30.370
But we also provide
those protections outside

00:02:30.370 --> 00:02:31.620
of Google Play.

00:02:31.620 --> 00:02:33.370
And so that's what we
wanted to show here,

00:02:33.370 --> 00:02:34.660
is that over the
last few years we've

00:02:34.660 --> 00:02:36.909
been carefully tracking this,
keeping an eye on what's

00:02:36.909 --> 00:02:40.690
going on, and making sure that
users are being protected.

00:02:40.690 --> 00:02:43.900
From my perspective, it's
all about the graphs.

00:02:43.900 --> 00:02:47.050
But that's not really how most
people think about security.

00:02:47.050 --> 00:02:49.600
Because most people aren't
looking at the entire ecosystem

00:02:49.600 --> 00:02:50.280
at once.

00:02:50.280 --> 00:02:52.780
What they want to
know is, am I safe?

00:02:52.780 --> 00:02:55.690
And so that's really what the
announcement was yesterday,

00:02:55.690 --> 00:02:58.207
putting really in a
brand understanding

00:02:58.207 --> 00:03:00.790
that these protections are there
and making them more and more

00:03:00.790 --> 00:03:03.820
visible to users, but also
that Google is standing

00:03:03.820 --> 00:03:04.932
behind this protection.

00:03:04.932 --> 00:03:07.390
It's saying, Google is going
to protect you on your Android

00:03:07.390 --> 00:03:08.764
device and make
sure that we have

00:03:08.764 --> 00:03:11.170
the best protections in
place throughout the devices.

00:03:11.170 --> 00:03:14.650
And so that's really
what we're focusing on.

00:03:14.650 --> 00:03:15.400
How do we do that?

00:03:15.400 --> 00:03:17.290
Well, we do that a
variety of different ways.

00:03:17.290 --> 00:03:20.230
We're investing in increasing
the intelligence, the ability

00:03:20.230 --> 00:03:22.097
to analyze what's going
on on these devices,

00:03:22.097 --> 00:03:24.430
as well as what's going on
inside of these applications,

00:03:24.430 --> 00:03:27.460
expanding the scope of the types
of protections that we provide,

00:03:27.460 --> 00:03:28.510
and also--

00:03:28.510 --> 00:03:31.180
quite simply-- switching
from that graph mindset

00:03:31.180 --> 00:03:33.250
that I've latched
on to in my life

00:03:33.250 --> 00:03:35.560
into the user mindset,
where what they want to know

00:03:35.560 --> 00:03:37.720
is, am I being
protected right now?

00:03:37.720 --> 00:03:39.160
Am I being protected--

00:03:39.160 --> 00:03:40.810
what it is that
it is that Google

00:03:40.810 --> 00:03:42.070
is doing to look out for me.

00:03:42.070 --> 00:03:43.445
And so we've got
a lot that we're

00:03:43.445 --> 00:03:46.480
doing in terms of
increasing user visibility.

00:03:46.480 --> 00:03:49.420
When I talk about that
increased protection,

00:03:49.420 --> 00:03:52.120
one of the most important
things that we've learned

00:03:52.120 --> 00:03:55.570
is that we can't do it
all as humans, right?

00:03:55.570 --> 00:03:58.330
When you're talking about
500,000 new applications that

00:03:58.330 --> 00:04:00.470
are discovered and
analyzed every single day,

00:04:00.470 --> 00:04:03.610
more and more we have to
rely upon the intelligence

00:04:03.610 --> 00:04:06.262
of machines to be able to
do that type of analysis.

00:04:06.262 --> 00:04:08.470
One of the largest areas
that we've been investing in

00:04:08.470 --> 00:04:10.930
is what everybody refers
to as machine learning

00:04:10.930 --> 00:04:12.420
or artificial intelligence.

00:04:12.420 --> 00:04:15.730
And it's most
simplistic what it is

00:04:15.730 --> 00:04:19.060
is it's us working with
the machines to train them.

00:04:19.060 --> 00:04:22.330
This is a picture of a
clustering algorithm that's

00:04:22.330 --> 00:04:24.970
grouped different types of
malware based on the behaviors

00:04:24.970 --> 00:04:27.530
that those applications
exhibit out there in the world.

00:04:27.530 --> 00:04:29.860
And so when we're looking
at 500,000 new applications

00:04:29.860 --> 00:04:31.456
every day, a
clustering algorithm

00:04:31.456 --> 00:04:33.580
gives us the ability to
quickly hone in on the ones

00:04:33.580 --> 00:04:35.020
that we think are highest risk.

00:04:35.020 --> 00:04:37.240
Those may be applications
that are brand new,

00:04:37.240 --> 00:04:38.337
that no one has installed.

00:04:38.337 --> 00:04:40.420
Those may be applications
that have been out there

00:04:40.420 --> 00:04:42.044
for a while, that
we're starting to see

00:04:42.044 --> 00:04:43.540
a change in their behavior.

00:04:43.540 --> 00:04:46.810
The key is using these
systems to understand and make

00:04:46.810 --> 00:04:48.340
those kinds of
quick decisions so

00:04:48.340 --> 00:04:49.974
that a user doesn't
have to make them,

00:04:49.974 --> 00:04:52.390
so that you as a developer
don't have to make them either.

00:04:52.390 --> 00:04:54.056
And you don't have
to guess, because you

00:04:54.056 --> 00:04:55.840
can rely upon the
investments that we're

00:04:55.840 --> 00:04:58.060
making to analyze
all those data points

00:04:58.060 --> 00:04:59.680
and help make those
decisions for you,

00:04:59.680 --> 00:05:04.070
and inform you about what's
going on these devices.

00:05:04.070 --> 00:05:06.160
The other thing that
we've begun to recognize

00:05:06.160 --> 00:05:10.565
is sometimes we just
name things wrong.

00:05:10.565 --> 00:05:12.940
There is a feature that we
released a couple of years ago

00:05:12.940 --> 00:05:14.620
called Android Device Manager.

00:05:14.620 --> 00:05:17.830
How many people had Android
Device Manager installed?

00:05:17.830 --> 00:05:20.140
For this audience,
it's about 20%.

00:05:20.140 --> 00:05:21.850
So you're about an
order of magnitude

00:05:21.850 --> 00:05:24.352
higher than the overall user
base in terms of percentage

00:05:24.352 --> 00:05:26.560
of people that had Android
Device Manager installed--

00:05:26.560 --> 00:05:28.240
not shocking given who we are.

00:05:28.240 --> 00:05:30.960
And how many of
you are Googlers?

00:05:30.960 --> 00:05:32.830
No, OK.

00:05:32.830 --> 00:05:37.797
Find my Device-- a simple way
to take an existing technology,

00:05:37.797 --> 00:05:39.380
expose it to users,
and make it easier

00:05:39.380 --> 00:05:41.510
for them to understand how it
is that they can get to it.

00:05:41.510 --> 00:05:43.510
And of course, we've added
new features-- things

00:05:43.510 --> 00:05:46.130
like battery and Wi-Fi
status, tracking the device

00:05:46.130 --> 00:05:48.642
in the background, so that
if it gets turned off,

00:05:48.642 --> 00:05:50.600
you know where it was
before it was turned off.

00:05:50.600 --> 00:05:52.475
You don't have to do
the query in real time--

00:05:52.475 --> 00:05:54.170
a number of basic
usability features

00:05:54.170 --> 00:05:55.850
to make sure that
this functionality can

00:05:55.850 --> 00:05:58.490
be increasingly
valuable for users.

00:05:58.490 --> 00:06:00.950
Because after all, the
most significant security

00:06:00.950 --> 00:06:03.530
risks that the average person
is exposed to is actually

00:06:03.530 --> 00:06:07.266
this one, it's losing their
device, whether it's accidental

00:06:07.266 --> 00:06:09.140
or whether it's someone
taking the device out

00:06:09.140 --> 00:06:10.261
of their possession.

00:06:12.846 --> 00:06:14.470
The other thing we
wanted to do is just

00:06:14.470 --> 00:06:17.080
let people know that
this was happening.

00:06:17.080 --> 00:06:19.360
The number of times that
I've read the statement,

00:06:19.360 --> 00:06:22.110
Google doesn't look at the
applications in Google Play,

00:06:22.110 --> 00:06:24.119
just blows my mind.

00:06:24.119 --> 00:06:26.410
Every single application
that's uploaded to Google Play

00:06:26.410 --> 00:06:28.368
goes through a very
rigorous screening process,

00:06:28.368 --> 00:06:31.090
both at the time that the
application developer is

00:06:31.090 --> 00:06:34.855
enrolling to become a member of
Google Play publishing process

00:06:34.855 --> 00:06:36.730
and at the time the
application is published.

00:06:36.730 --> 00:06:38.860
And every single
day after that, we

00:06:38.860 --> 00:06:40.457
reanalyze all of
those applications.

00:06:40.457 --> 00:06:42.790
So there's absolutely a lot
of that kind of intelligence

00:06:42.790 --> 00:06:44.380
that's going on in the
background and analysis that's

00:06:44.380 --> 00:06:46.810
going on in the background
that simply wasn't exposed.

00:06:46.810 --> 00:06:48.935
And so a lot of the work
that we're doing right now

00:06:48.935 --> 00:06:51.400
is to just figure out how
to delicately indicate

00:06:51.400 --> 00:06:52.510
to the user--

00:06:52.510 --> 00:06:55.650
whether that be a consumer
or an enterprise--

00:06:55.650 --> 00:06:56.650
yeah, this is happening.

00:06:56.650 --> 00:06:57.830
We're checking these things.

00:06:57.830 --> 00:07:00.270
And we've got your back.

00:07:00.270 --> 00:07:02.550
But it's not just
about consumers.

00:07:02.550 --> 00:07:04.170
It's also about
application developers

00:07:04.170 --> 00:07:06.420
and making sure that they
have the ability to leverage

00:07:06.420 --> 00:07:07.980
these services as well.

00:07:07.980 --> 00:07:11.550
Right now, Google Play services
is rolling out a new version.

00:07:11.550 --> 00:07:13.380
And one of the
APIs that's exposed

00:07:13.380 --> 00:07:15.870
is what we refer to as
the Verify Apps API.

00:07:15.870 --> 00:07:17.760
In the past, we've
talked publicly

00:07:17.760 --> 00:07:20.310
about Verify Apps, which
is the mechanism that's

00:07:20.310 --> 00:07:24.750
used to evaluate on a device and
to check for a user on a device

00:07:24.750 --> 00:07:27.730
whether something is potentially
harmful or a piece of malware.

00:07:27.730 --> 00:07:29.830
What we've done with
the Verify Apps APIs

00:07:29.830 --> 00:07:32.709
is just made that available to
any application on the device.

00:07:32.709 --> 00:07:34.500
So if you're concerned
about whether or not

00:07:34.500 --> 00:07:37.380
your application should
be running, you can check.

00:07:37.380 --> 00:07:39.450
Are there any other
apps on this device

00:07:39.450 --> 00:07:40.770
that I should be worried about?

00:07:40.770 --> 00:07:42.550
What are those applications?

00:07:42.550 --> 00:07:43.720
Let me know what they are.

00:07:43.720 --> 00:07:45.180
And so then you can
evaluate whether or not

00:07:45.180 --> 00:07:47.721
you think it's an appropriate
environment, as the application

00:07:47.721 --> 00:07:50.820
developer, for your application
to continue to execute.

00:07:50.820 --> 00:07:52.560
That builds on
other technologies

00:07:52.560 --> 00:07:54.180
that we've provided in the past.

00:07:54.180 --> 00:07:56.600
Last year at Google I/O I
referenced the SafetyNet

00:07:56.600 --> 00:07:58.260
attestation API.

00:07:58.260 --> 00:08:00.720
This is an API that
we use to evaluate,

00:08:00.720 --> 00:08:03.270
in the context of Google's
understanding of a device,

00:08:03.270 --> 00:08:07.050
whether it is a certified
secure Android device.

00:08:07.050 --> 00:08:10.200
And we provide that literally
as a signed statement.

00:08:10.200 --> 00:08:12.510
So you invoke the
attestation API.

00:08:12.510 --> 00:08:14.590
It hits a round trip
off of a Google server.

00:08:14.590 --> 00:08:16.860
We do an evaluation of the
software integrity on that

00:08:16.860 --> 00:08:19.234
device, compare it to what we
know about what that device

00:08:19.234 --> 00:08:21.660
should look like, and then
make a statement back to you

00:08:21.660 --> 00:08:23.740
of, yep, this looks
good, or no, it doesn't.

00:08:23.740 --> 00:08:25.740
This is one of the critical
pieces of technology

00:08:25.740 --> 00:08:28.622
that allows for delivery of,
for example, Android Pay,

00:08:28.622 --> 00:08:31.080
where there's a requirement
that this be a certified device

00:08:31.080 --> 00:08:32.880
and that it be operating in
that kind of an environment.

00:08:32.880 --> 00:08:35.760
But it's an API that we've made
available to any application

00:08:35.760 --> 00:08:38.320
that wants to take
advantage of it.

00:08:38.320 --> 00:08:41.190
We're going to continue adding
these kinds of technologies.

00:08:41.190 --> 00:08:44.770
reCAPTCHA the technology
introduced almost 10 years ago

00:08:44.770 --> 00:08:47.680
in the context of the web to
do quick evaluation of whether

00:08:47.680 --> 00:08:51.220
or not the entity
interacting with your web UI

00:08:51.220 --> 00:08:53.530
was actually a human.

00:08:53.530 --> 00:08:56.450
That's now being provided
as a safety net API as well.

00:08:56.450 --> 00:08:58.270
So in the context
of your application,

00:08:58.270 --> 00:09:01.150
you can use a reCAPTCHA to
evaluate whether or not there's

00:09:01.150 --> 00:09:03.070
automation of your application.

00:09:03.070 --> 00:09:06.694
This is particularly valuable
for what I think of as low cost

00:09:06.694 --> 00:09:08.110
services that you
want to continue

00:09:08.110 --> 00:09:10.510
to make available for free,
but you want to cut down

00:09:10.510 --> 00:09:12.010
on the amount of
abuse that's coming

00:09:12.010 --> 00:09:14.290
through bot farms and
other types of automation--

00:09:14.290 --> 00:09:17.544
very valuable for large
scale web properties.

00:09:20.056 --> 00:09:21.430
One of the things
that's come out

00:09:21.430 --> 00:09:23.830
of us being able to
understand what's going on

00:09:23.830 --> 00:09:25.980
in the ecosystem is
the ability to revisit

00:09:25.980 --> 00:09:27.730
some of the technologies
that are actually

00:09:27.730 --> 00:09:29.650
baked into the core platform.

00:09:29.650 --> 00:09:33.400
Unknown sources was a flag that
was introduced when Android

00:09:33.400 --> 00:09:36.610
was launched, almost
eight years ago, that gave

00:09:36.610 --> 00:09:39.670
the individual the ability
to change where they wanted

00:09:39.670 --> 00:09:41.380
to install applications from.

00:09:41.380 --> 00:09:42.880
Over the last few
years, we've begun

00:09:42.880 --> 00:09:45.326
to understand what those
install patterns look like.

00:09:45.326 --> 00:09:47.200
We've been able to
analyze what the risks are

00:09:47.200 --> 00:09:48.610
that users are exposed to.

00:09:48.610 --> 00:09:50.260
We've certainly
come to appreciate

00:09:50.260 --> 00:09:52.120
that Google Play
is a safer place

00:09:52.120 --> 00:09:53.446
to install applications from.

00:09:53.446 --> 00:09:54.820
But we've also
come to appreciate

00:09:54.820 --> 00:09:57.361
that there are many other safe
places to install applications

00:09:57.361 --> 00:09:58.190
from as well.

00:09:58.190 --> 00:10:00.220
And so we want to
simplify for the user

00:10:00.220 --> 00:10:02.800
the ability to install from
those other safe places

00:10:02.800 --> 00:10:05.170
without introducing the
risk of installing from just

00:10:05.170 --> 00:10:06.710
anywhere that's out there.

00:10:06.710 --> 00:10:09.310
So one of the changes that
was introduced with Android O

00:10:09.310 --> 00:10:12.010
is a modification to how
unknown sources works.

00:10:12.010 --> 00:10:14.980
So now it's on a per
application basis.

00:10:14.980 --> 00:10:16.960
You decide, yep,
that app store--

00:10:16.960 --> 00:10:18.040
it can install.

00:10:18.040 --> 00:10:19.930
But that doesn't mean
everybody can install.

00:10:19.930 --> 00:10:21.550
And really, that's
targeted at making sure

00:10:21.550 --> 00:10:23.675
that apps are being installed
from more trustworthy

00:10:23.675 --> 00:10:26.050
places, where the user has
delegated that kind of trust

00:10:26.050 --> 00:10:27.487
to the specific entity.

00:10:27.487 --> 00:10:29.320
So that's an example
of the types of changes

00:10:29.320 --> 00:10:31.416
that we're making at
the platform level.

00:10:31.416 --> 00:10:33.790
I've got Xiaowen here, I think,
who's going to come on up

00:10:33.790 --> 00:10:34.960
and give you a
little bit of insight

00:10:34.960 --> 00:10:36.040
into some of the
other changes we're

00:10:36.040 --> 00:10:37.660
making to harden the
operating system.

00:10:37.660 --> 00:10:38.919
[APPLAUSE]

00:10:38.919 --> 00:10:40.210
XIAOWEN XIN: Thank you, Adrian.

00:10:43.720 --> 00:10:44.560
My name is Xiaowen.

00:10:44.560 --> 00:10:47.440
I'm the product manager for
Android Platform Security.

00:10:47.440 --> 00:10:50.170
And today, in the next
section of the talk,

00:10:50.170 --> 00:10:52.180
I'd like to give you an
overview of the changes

00:10:52.180 --> 00:10:55.300
that we've made to the operating
system to make it more secure

00:10:55.300 --> 00:10:56.650
as well as to harden it.

00:10:56.650 --> 00:11:00.010
We've collected a lot
of data on the impact

00:11:00.010 --> 00:11:02.060
and the adoption of
some of these features.

00:11:02.060 --> 00:11:04.490
So I'm excited to share
some of that with you.

00:11:04.490 --> 00:11:07.104
So let's dig in.

00:11:07.104 --> 00:11:08.270
We'll start with the basics.

00:11:11.470 --> 00:11:13.370
And that begins
with Verified Boot.

00:11:13.370 --> 00:11:17.030
So Verified Boot is Android's
secure boot mechanism,

00:11:17.030 --> 00:11:19.310
where we check the signature
of every stage of boot

00:11:19.310 --> 00:11:21.200
before running it.

00:11:21.200 --> 00:11:24.080
And that has come a long
way in the last few years.

00:11:24.080 --> 00:11:25.670
With Android
Marshmallow, we started

00:11:25.670 --> 00:11:29.540
requiring a Verified Boot
for all compatible devices.

00:11:29.540 --> 00:11:33.620
With Android Nougat, that
became Verified Boot is now

00:11:33.620 --> 00:11:35.510
strictly enforced.

00:11:35.510 --> 00:11:38.210
And that's required for
all compatible devices.

00:11:38.210 --> 00:11:42.410
And now, with Android O, we're
providing guidance to our OEM

00:11:42.410 --> 00:11:46.310
ecosystem to add a couple
more security enhancements

00:11:46.310 --> 00:11:49.160
to really round out the features
that have Verified Boot,

00:11:49.160 --> 00:11:52.090
starting with
rollback protection.

00:11:52.090 --> 00:11:54.920
On compatible
devices on Android O,

00:11:54.920 --> 00:11:58.690
Verified Boot will no longer
boot an operating system

00:11:58.690 --> 00:12:01.370
that's known to have been rolled
back to an older, potentially

00:12:01.370 --> 00:12:04.220
much more vulnerable version.

00:12:04.220 --> 00:12:07.280
Also with Verified
Boot, we have hardened

00:12:07.280 --> 00:12:10.490
the unlocking mechanism, the
bootloader unlocking mechanism.

00:12:10.490 --> 00:12:13.700
And what that means is
any bugs or any compromise

00:12:13.700 --> 00:12:17.480
of the Android operating system
cannot unlock the bootloader.

00:12:17.480 --> 00:12:20.360
Only you, by interacting
with the bootloader itself,

00:12:20.360 --> 00:12:21.710
can unlock the bootloader.

00:12:25.310 --> 00:12:29.360
So while Verified Boot
protects your operating system,

00:12:29.360 --> 00:12:33.160
Android uses encryption
to protect user data.

00:12:33.160 --> 00:12:36.740
And that has also come a long
way in the last few years.

00:12:36.740 --> 00:12:39.830
As of Android Marshmallow,
all compatible devices

00:12:39.830 --> 00:12:41.970
are now required to
support encryption

00:12:41.970 --> 00:12:46.400
and required to be enabled by
default. As of Android Nougat,

00:12:46.400 --> 00:12:49.700
we added a major upgrade
to the encryption story

00:12:49.700 --> 00:12:51.800
called file-based
encryption, where

00:12:51.800 --> 00:12:55.020
we encrypt different storage
areas with different keys.

00:12:55.020 --> 00:12:58.310
File-based encryption
may the user experience

00:12:58.310 --> 00:13:03.430
of encryption much, much better
without sacrificing security.

00:13:03.430 --> 00:13:05.800
As an app developer
in fact, if you're

00:13:05.800 --> 00:13:08.920
interested in running
your app before the user

00:13:08.920 --> 00:13:11.860
first signs in-- before the
user first unlocks their device,

00:13:11.860 --> 00:13:16.850
check out our FBE documentation
on our developer website.

00:13:16.850 --> 00:13:20.780
With Android O, we have
continued to improve on FBE

00:13:20.780 --> 00:13:25.170
and added in a few more
features such as key ejection.

00:13:25.170 --> 00:13:27.390
So how are we doing
with encryption?

00:13:27.390 --> 00:13:30.380
We looked into the data and see
that over the last few years,

00:13:30.380 --> 00:13:32.430
encryption on Android--

00:13:32.430 --> 00:13:35.010
we've seen a
significant adoption.

00:13:35.010 --> 00:13:37.560
While it was on Android
Lollipop devices,

00:13:37.560 --> 00:13:40.260
encryption was very, very low.

00:13:40.260 --> 00:13:42.974
On Marshmallow, that
jumped to about 25%.

00:13:42.974 --> 00:13:45.390
And now in Android Nougat,
we're seeing encryption support

00:13:45.390 --> 00:13:47.814
at around 80%.

00:13:47.814 --> 00:13:49.980
As a matter of fact, we
started requiring encryption

00:13:49.980 --> 00:13:53.190
on compatible devices as
of Android Marshmallow.

00:13:53.190 --> 00:13:56.340
The reason that number didn't
jump immediately to 100%

00:13:56.340 --> 00:13:58.390
is due to a couple of factors.

00:13:58.390 --> 00:14:00.990
One is a lot of
Marshmallow devices

00:14:00.990 --> 00:14:03.840
were upgrades from Lollipop
and so those devices were not

00:14:03.840 --> 00:14:06.930
required to be encrypted
when they first shipped.

00:14:06.930 --> 00:14:09.210
And also, because
of the wide variety

00:14:09.210 --> 00:14:12.180
of devices that are
supported by Android,

00:14:12.180 --> 00:14:15.300
we still see a lot of very
low performance devices

00:14:15.300 --> 00:14:17.970
that are not yet capable
of supporting encryption.

00:14:17.970 --> 00:14:21.490
Nevertheless, we can expect that
number to continue to increase.

00:14:21.490 --> 00:14:24.540
And we see that
encryption on Android

00:14:24.540 --> 00:14:26.727
is now the norm and no
longer the exception.

00:14:29.410 --> 00:14:31.930
Another way in which we
are protecting user data

00:14:31.930 --> 00:14:35.330
is to improve the secure
lock screen experience.

00:14:35.330 --> 00:14:38.410
With Android Marshmallow, we
introduced official support

00:14:38.410 --> 00:14:40.150
for fingerprint sensors.

00:14:40.150 --> 00:14:43.450
And that had a significant
impact on the adoption

00:14:43.450 --> 00:14:47.110
rate of a secure lock screen.

00:14:47.110 --> 00:14:50.740
Also, we have been
working with manufacturers

00:14:50.740 --> 00:14:55.030
to put on requirements to
make the implementation

00:14:55.030 --> 00:14:57.370
of a secure lock screen
much more secure over time.

00:14:57.370 --> 00:14:59.746
From the very beginning,
fingerprint implementation,

00:14:59.746 --> 00:15:01.120
the fingerprint
verification, was

00:15:01.120 --> 00:15:03.410
required to be implemented
in secure hardware,

00:15:03.410 --> 00:15:07.000
such as the Trusted Execution
Environment, the TEE.

00:15:07.000 --> 00:15:08.740
With Android Nougat,
we started requiring

00:15:08.740 --> 00:15:11.260
that pin pattern password
verification also

00:15:11.260 --> 00:15:13.910
take place in secure hardware.

00:15:13.910 --> 00:15:16.340
And now, with Android O,
we're adding in support

00:15:16.340 --> 00:15:18.950
for tamper resistant hardware.

00:15:18.950 --> 00:15:22.730
So similar to the chip that
you see in credit cards

00:15:22.730 --> 00:15:26.480
today, Android now supports
having that chip be embedded

00:15:26.480 --> 00:15:31.370
in the hardware and using that
chip to do pin pattern password

00:15:31.370 --> 00:15:33.110
verification.

00:15:33.110 --> 00:15:35.300
This significantly
raises the bar--

00:15:35.300 --> 00:15:38.270
makes it much, much
harder to perform

00:15:38.270 --> 00:15:40.580
a physical attack
against a device

00:15:40.580 --> 00:15:41.720
to bypass the lock screen.

00:15:45.690 --> 00:15:48.370
So how are we doing with
secure lock screen adoption?

00:15:48.370 --> 00:15:50.810
We see that that has also
increased quite a bit

00:15:50.810 --> 00:15:52.190
over the last few years.

00:15:52.190 --> 00:15:54.350
Whereas on Lollipop
devices, adoption

00:15:54.350 --> 00:15:59.200
was only about half and half,
that increased to almost 70%

00:15:59.200 --> 00:16:02.450
now on new Android
Nougat devices.

00:16:02.450 --> 00:16:04.520
And a lot of that was
probably driven by the fact

00:16:04.520 --> 00:16:07.640
that a lot of new devices now
have a fingerprint sensor.

00:16:07.640 --> 00:16:10.370
And we see from the data
that fingerprint devices

00:16:10.370 --> 00:16:12.260
are much more likely
to have a secure lock

00:16:12.260 --> 00:16:16.670
screen than across the
entire Android device

00:16:16.670 --> 00:16:19.310
system, device market.

00:16:19.310 --> 00:16:22.100
The other thing is that we do
see apps such as Android Pay

00:16:22.100 --> 00:16:25.670
and some enterprise apps
require enabling a secure lock

00:16:25.670 --> 00:16:26.910
screen to function properly.

00:16:26.910 --> 00:16:29.540
So that might also
have had an effect.

00:16:29.540 --> 00:16:33.530
As developers, you might want
to consider taking really

00:16:33.530 --> 00:16:35.219
really take advantage
of a lock screen

00:16:35.219 --> 00:16:37.260
and incorporating that
into your own application.

00:16:37.260 --> 00:16:40.430
So we see a lot of banking
apps, for example, incorporating

00:16:40.430 --> 00:16:41.809
fingerprint authentication.

00:16:46.600 --> 00:16:50.950
So while encryption and lock
screen protects user data,

00:16:50.950 --> 00:16:53.140
Android has a robust
permission model

00:16:53.140 --> 00:16:56.890
to give users control over
app access to their data.

00:16:56.890 --> 00:17:00.280
And that has also improved quite
a bit over the last few years.

00:17:00.280 --> 00:17:03.760
With Android Marshmallow, we
introduced runtime permissions.

00:17:03.760 --> 00:17:06.369
And we've seen great
adoption there.

00:17:06.369 --> 00:17:08.589
With Android Nougat
and Android O,

00:17:08.589 --> 00:17:10.839
we are continuing to update
the permissions model

00:17:10.839 --> 00:17:12.849
to make it more
usable by good apps

00:17:12.849 --> 00:17:15.190
and less abusable by bad apps.

00:17:15.190 --> 00:17:17.140
So before we go into
the details of that,

00:17:17.140 --> 00:17:21.130
let's check out how runtime
permissions are doing.

00:17:21.130 --> 00:17:25.480
We looked into
permission requests.

00:17:25.480 --> 00:17:28.900
And so for each
request for, let's say,

00:17:28.900 --> 00:17:34.690
the camera group of permissions,
we see that about 65%

00:17:34.690 --> 00:17:37.130
of those requests are
accepted by their users.

00:17:37.130 --> 00:17:39.820
So that's towards one
end of the spectrum.

00:17:39.820 --> 00:17:41.600
Towards the other
end of the spectrum,

00:17:41.600 --> 00:17:46.030
we see that for the phone group
of provisions, only about 44%

00:17:46.030 --> 00:17:49.370
of the permission requests
are accepted by the user.

00:17:49.370 --> 00:17:53.830
So users are actually very
judicious in controlling which

00:17:53.830 --> 00:17:56.620
apps have access to what data.

00:17:56.620 --> 00:17:59.855
So I think there are a couple
of takeaways here for apps.

00:17:59.855 --> 00:18:02.230
The big thing is, of course,
to follow a permissions best

00:18:02.230 --> 00:18:04.985
practices, so you
can really take

00:18:04.985 --> 00:18:07.360
advantage of runtime provisions
and provide the best user

00:18:07.360 --> 00:18:08.980
experience.

00:18:08.980 --> 00:18:10.810
As an example, you
should always make sure

00:18:10.810 --> 00:18:12.460
that users know
why you're asking

00:18:12.460 --> 00:18:14.009
for a particular
permission and be

00:18:14.009 --> 00:18:16.300
able to fail gracefully if
they decline that permission

00:18:16.300 --> 00:18:17.290
request.

00:18:17.290 --> 00:18:19.720
In some cases, you may not
need to ask for permission.

00:18:19.720 --> 00:18:22.810
For example, you may be able to
use the contacts picker instead

00:18:22.810 --> 00:18:24.647
of requesting the
contacts permission.

00:18:28.550 --> 00:18:31.010
Another way in which we are
updating our permissions model

00:18:31.010 --> 00:18:33.530
is to make it less
abusable by bad apps.

00:18:33.530 --> 00:18:36.350
So take ransomware
as an example.

00:18:36.350 --> 00:18:39.230
We've seen instances
of this type of malware

00:18:39.230 --> 00:18:43.640
that take over your device
and then demand payment

00:18:43.640 --> 00:18:45.590
before they let you back in.

00:18:45.590 --> 00:18:49.530
And they typically
abuse two permissions.

00:18:49.530 --> 00:18:51.530
First, they use a system
alert window permission

00:18:51.530 --> 00:18:54.830
to display an overlay on
top of your entire screen

00:18:54.830 --> 00:18:59.060
so that you can't interact
properly with your device.

00:18:59.060 --> 00:19:01.670
To address that, on Android
Oh, we have changed the system

00:19:01.670 --> 00:19:05.870
alert window permission
slightly so that app overlays

00:19:05.870 --> 00:19:08.802
can no longer cover up
critical system windows.

00:19:08.802 --> 00:19:10.760
So they can no longer
cover up the lock screen.

00:19:10.760 --> 00:19:12.259
They cannot cover
up the status bar.

00:19:12.259 --> 00:19:13.940
They cannot cover up the IME--

00:19:13.940 --> 00:19:16.010
as examples.

00:19:16.010 --> 00:19:19.616
Also, when there is an app
overlay that's being shown,

00:19:19.616 --> 00:19:20.990
there will also
be a notification

00:19:20.990 --> 00:19:25.840
that users can click on to
hide that overlay window.

00:19:25.840 --> 00:19:28.910
Ransomware also take advantage
of the device admin provision.

00:19:28.910 --> 00:19:32.140
That they use it to
prevent their own uninstall

00:19:32.140 --> 00:19:34.700
and they use it to
change your passcode

00:19:34.700 --> 00:19:36.790
to lock you out of your device.

00:19:36.790 --> 00:19:40.270
Over the last few years, we
have been continually descoping

00:19:40.270 --> 00:19:42.670
the device admin
permission and replacing it

00:19:42.670 --> 00:19:45.250
with a less abusable
alternative.

00:19:45.250 --> 00:19:47.920
In particular, in
Android Nougat,

00:19:47.920 --> 00:19:51.010
bad apps can now no longer use
the device admin permission

00:19:51.010 --> 00:19:53.710
to prevent their own
uninstall and they

00:19:53.710 --> 00:19:55.840
can't use it to change your
passcode if you already

00:19:55.840 --> 00:19:56.560
have one set.

00:19:59.150 --> 00:20:04.590
To learn more, we actually have
a talk one of our coworkers

00:20:04.590 --> 00:20:06.070
gave at a different conference.

00:20:06.070 --> 00:20:09.450
So check that out.

00:20:09.450 --> 00:20:12.360
Another way in which we've
updated the permissions model

00:20:12.360 --> 00:20:14.910
in order to protect users
is to take a stronger stance

00:20:14.910 --> 00:20:16.560
on privacy.

00:20:16.560 --> 00:20:18.960
Over the last few
releases of Android,

00:20:18.960 --> 00:20:21.840
we've been steadily removing
access to persistent device

00:20:21.840 --> 00:20:23.290
identifiers.

00:20:23.290 --> 00:20:26.400
So for example on Android
O, the Android ID property

00:20:26.400 --> 00:20:30.990
is now scoped per
user and per app.

00:20:30.990 --> 00:20:34.470
The net.hostname property, which
contains the network hostname

00:20:34.470 --> 00:20:38.090
of your device, is now empty.

00:20:38.090 --> 00:20:41.040
To learn more about the
changes in Android O regarding

00:20:41.040 --> 00:20:43.790
persistent device identifiers,
check out the blog post

00:20:43.790 --> 00:20:46.090
that's on the screen.

00:20:46.090 --> 00:20:49.110
That will tell you all the
changes as well as some best

00:20:49.110 --> 00:20:50.128
practices.

00:20:54.430 --> 00:20:56.530
So everything I've
talked about so far

00:20:56.530 --> 00:20:58.720
relates to installed apps.

00:20:58.720 --> 00:21:00.450
So what about Instant Apps?

00:21:00.450 --> 00:21:02.200
If you guys were here
in the last session,

00:21:02.200 --> 00:21:06.880
actually in this tent, there was
a session about Instant Apps.

00:21:06.880 --> 00:21:09.220
So Instant Apps, for
those who don't know,

00:21:09.220 --> 00:21:12.670
is a feature coming to Android,
where you can click on a URL

00:21:12.670 --> 00:21:14.920
and open it immediately
in an Android app,

00:21:14.920 --> 00:21:17.140
even if you don't have
the app installed.

00:21:17.140 --> 00:21:21.700
So that has the potential to
greatly improve user experience

00:21:21.700 --> 00:21:24.580
as well as increase an app's
user engagement and conversion

00:21:24.580 --> 00:21:26.170
numbers.

00:21:26.170 --> 00:21:30.070
On the other hand, opening
arbitrary URLs in apps

00:21:30.070 --> 00:21:33.400
also comes with associated
security and privacy risks.

00:21:33.400 --> 00:21:36.550
So how do we want
to address that?

00:21:36.550 --> 00:21:39.880
We are addressing that by
creating an updated provisions

00:21:39.880 --> 00:21:42.280
model that's really
tailored to the capabilities

00:21:42.280 --> 00:21:45.700
and characteristics of
an Android Instant App.

00:21:45.700 --> 00:21:48.850
In particular, Instant Apps
will have security and privacy

00:21:48.850 --> 00:21:51.010
best practices baked in.

00:21:51.010 --> 00:21:56.110
For example, Instant Apps
must use runtime provisions.

00:21:56.110 --> 00:22:01.237
And Instant Apps will use HTTPS
instead of HTTP, by default.

00:22:01.237 --> 00:22:03.570
There are a lot of Android
permissions that Instant Apps

00:22:03.570 --> 00:22:05.410
actually cannot access.

00:22:05.410 --> 00:22:10.240
They cannot access any
persistent device identifiers.

00:22:10.240 --> 00:22:13.260
And another example is that
they can't access the contacts

00:22:13.260 --> 00:22:14.200
permission.

00:22:14.200 --> 00:22:17.540
You must use the
contacts picker instead.

00:22:17.540 --> 00:22:19.610
As app developers, if
you make your normal app

00:22:19.610 --> 00:22:22.317
deployable as an
Instant App, it actually

00:22:22.317 --> 00:22:23.900
makes your normal
app much better too,

00:22:23.900 --> 00:22:26.566
because you're now automatically
using security and privacy best

00:22:26.566 --> 00:22:27.500
practices.

00:22:27.500 --> 00:22:29.990
And for users, if the
majority of your apps

00:22:29.990 --> 00:22:32.010
are now using these
best practices,

00:22:32.010 --> 00:22:34.530
then your device becomes
a little bit safer too.

00:22:34.530 --> 00:22:37.280
So we're very excited about
the Instant Apps model.

00:22:42.420 --> 00:22:44.670
So while permissions
is really a way

00:22:44.670 --> 00:22:48.180
to control app access to
data, within the operating

00:22:48.180 --> 00:22:51.120
system itself we
sandbox and isolate

00:22:51.120 --> 00:22:53.160
every process and
every app to limit

00:22:53.160 --> 00:22:57.720
the ways in which a compromise
in one can affect the others.

00:22:57.720 --> 00:23:01.890
For many years in Android, we
have been steadily improving

00:23:01.890 --> 00:23:06.000
the application sandbox
in force with SELinux.

00:23:06.000 --> 00:23:08.660
And we'll see how that's
doing in the next slide.

00:23:08.660 --> 00:23:10.980
In Android Nougat, we
apply these same sandboxing

00:23:10.980 --> 00:23:16.230
principles to the media server
to significantly harden it.

00:23:16.230 --> 00:23:19.570
And now in Android O,
with Project Trouble,

00:23:19.570 --> 00:23:21.730
we are taking isolation
to the next level

00:23:21.730 --> 00:23:25.000
by putting device
specific vendor components

00:23:25.000 --> 00:23:26.380
into their own sandboxes.

00:23:29.860 --> 00:23:31.960
So how are we doing there?

00:23:31.960 --> 00:23:34.420
We looked into the data, into
the Android security bulletin

00:23:34.420 --> 00:23:37.196
data from the first four
months of this year.

00:23:37.196 --> 00:23:38.570
We looked at all
the kernel bugs.

00:23:38.570 --> 00:23:41.050
And we see that about
1/2 of the kernel bugs--

00:23:41.050 --> 00:23:45.850
almost 1/2-- SELinux
actually reduced the severity

00:23:45.850 --> 00:23:48.370
of almost 1/2 of
those kernel bugs.

00:23:48.370 --> 00:23:53.410
By making parts of the kernel
unreachable by untrusted apps,

00:23:53.410 --> 00:23:56.170
we made it so that it's
much harder to exploit

00:23:56.170 --> 00:23:57.301
those parts of the kernel.

00:23:57.301 --> 00:23:59.050
And that's what SELinux
really helps with.

00:24:04.360 --> 00:24:06.900
As I mentioned earlier, we
took the same sandboxing

00:24:06.900 --> 00:24:10.400
and isolation techniques and
applied it to the media server.

00:24:10.400 --> 00:24:12.910
In older versions of
Android, the media server

00:24:12.910 --> 00:24:15.790
used to be this one giant,
monolithic, very complex

00:24:15.790 --> 00:24:19.150
process, that had access
to a lot of permissions.

00:24:19.150 --> 00:24:23.170
In Android N, we broke that
up into six different policies

00:24:23.170 --> 00:24:25.510
and put them into
individual sandboxes

00:24:25.510 --> 00:24:28.525
with much tighter permissions
so that a compromise

00:24:28.525 --> 00:24:30.970
to any one of them
only grants access

00:24:30.970 --> 00:24:32.760
to a small subset
of the provisions

00:24:32.760 --> 00:24:36.140
and not the permissions of
the entire media server.

00:24:36.140 --> 00:24:38.830
We also integrated integer
overflow sanitization

00:24:38.830 --> 00:24:40.690
into the media
server, where we're

00:24:40.690 --> 00:24:43.720
able to detect memory
corruption that

00:24:43.720 --> 00:24:46.870
results from integer overflows.

00:24:46.870 --> 00:24:49.720
This helped us find a lot more
bugs earlier in the development

00:24:49.720 --> 00:24:53.260
process and limited the
severity of any bugs that

00:24:53.260 --> 00:24:55.460
occur at runtime.

00:24:55.460 --> 00:24:57.850
So how did we do there?

00:24:57.850 --> 00:25:01.480
We looked into the bugs, the
Android security bulletin bugs,

00:25:01.480 --> 00:25:03.760
from the first four
months of this year.

00:25:03.760 --> 00:25:06.160
And we see that
of all media stack

00:25:06.160 --> 00:25:09.460
bugs that affected Android
Marshmallow, more than 20%

00:25:09.460 --> 00:25:13.870
of them, actually, are no longer
security issues in Android N.

00:25:13.870 --> 00:25:17.250
And a few more bugs on top of
that downgraded in severity

00:25:17.250 --> 00:25:22.980
from Marshmallow to N.

00:25:22.980 --> 00:25:25.470
And we're not done yet.

00:25:25.470 --> 00:25:30.600
So in Android O, we took
the sandboxing isolation

00:25:30.600 --> 00:25:33.870
to a whole new level
with Project Trouble.

00:25:33.870 --> 00:25:36.570
With Project Trouble, we're
putting the Android OS

00:25:36.570 --> 00:25:38.700
framework and the
vender implimentatino,

00:25:38.700 --> 00:25:40.680
the device-specific
vendor implementation,

00:25:40.680 --> 00:25:42.990
into different processes
that communicate

00:25:42.990 --> 00:25:46.750
with each other using a
standard vendor interface.

00:25:46.750 --> 00:25:49.470
This vendor interface will
be maintained from version

00:25:49.470 --> 00:25:52.590
to version, which means
a newer Android OS

00:25:52.590 --> 00:25:55.050
framework will run
with minimal changes

00:25:55.050 --> 00:25:58.230
on top of an older device.

00:25:58.230 --> 00:26:01.500
And that paves the way then for
us to release new Android OS

00:26:01.500 --> 00:26:04.500
framework versions with shiny
new features and new security

00:26:04.500 --> 00:26:09.240
enhancements and have it be
adopted much more quickly

00:26:09.240 --> 00:26:11.230
by the entire ecosystem.

00:26:11.230 --> 00:26:14.450
So that's very, very
exciting for security.

00:26:14.450 --> 00:26:16.880
Also, the vendor
interface allows

00:26:16.880 --> 00:26:20.690
us to enforce a boundary between
the framework and the vendor

00:26:20.690 --> 00:26:22.580
implementation so
that we can use

00:26:22.580 --> 00:26:24.906
it to limit the ways
in which a bug in one

00:26:24.906 --> 00:26:25.780
can affect the other.

00:26:29.810 --> 00:26:33.350
To take an example, let's
go back to the media server.

00:26:33.350 --> 00:26:37.070
As part of Project Trouble, we
have re-architected the media

00:26:37.070 --> 00:26:40.600
server again in Android O
and taken the audio, camera,

00:26:40.600 --> 00:26:42.879
and DRM hardware
abstraction layers

00:26:42.879 --> 00:26:44.420
and put them into
different processes

00:26:44.420 --> 00:26:46.080
and different sandboxes.

00:26:46.080 --> 00:26:50.570
What that lets us do is to say
the framework pieces actually

00:26:50.570 --> 00:26:53.150
now no longer need
access to the kernel

00:26:53.150 --> 00:26:56.780
components, the kernel drivers,
that control media playback.

00:26:56.780 --> 00:27:00.440
And so now we can put
the framework pieces also

00:27:00.440 --> 00:27:02.750
into tighter sandboxes
as well and make it so

00:27:02.750 --> 00:27:05.270
that an exploit in the kernel,
compromising the kernel--

00:27:05.270 --> 00:27:06.936
it's now much harder
for that compromise

00:27:06.936 --> 00:27:09.000
to exploit certain
areas of the--

00:27:09.000 --> 00:27:09.620
oh, sorry.

00:27:09.620 --> 00:27:11.965
It's now harder for
compromises in the framework

00:27:11.965 --> 00:27:13.590
to exploit certain
areas of the kernel.

00:27:17.580 --> 00:27:22.140
All right, so speaking
of the kernel,

00:27:22.140 --> 00:27:24.670
why is the kernel important?

00:27:24.670 --> 00:27:26.640
In the last year,
we have spent a lot

00:27:26.640 --> 00:27:29.220
of time hardening the kernel.

00:27:31.960 --> 00:27:35.170
And we did that for
one major reason.

00:27:35.170 --> 00:27:37.420
We see that kernel
bugs are becoming

00:27:37.420 --> 00:27:40.480
a much larger proportion
of Android security bugs.

00:27:40.480 --> 00:27:44.500
Whereas in 2014 about 4%
of Android security bugs

00:27:44.500 --> 00:27:48.145
were kernel bugs, that number
increased significantly,

00:27:48.145 --> 00:27:50.740
to about 44%.

00:27:50.740 --> 00:27:53.060
And there are probably a
couple of reasons for this.

00:27:53.060 --> 00:27:55.150
One is we've made
a lot of progress

00:27:55.150 --> 00:27:56.930
in hardening the user space.

00:27:56.930 --> 00:27:59.050
So for example, the
application sandbox--

00:27:59.050 --> 00:28:00.700
that's enforced by SELinux.

00:28:00.700 --> 00:28:02.720
That's gotten a lot
better over time.

00:28:02.720 --> 00:28:05.740
And in order to break out
of that application sandbox,

00:28:05.740 --> 00:28:08.020
in order to break out
of the SELinux sandbox,

00:28:08.020 --> 00:28:10.570
you have to
compromise the kernel.

00:28:10.570 --> 00:28:14.200
Also the kernel
is very powerful.

00:28:14.200 --> 00:28:16.690
It has a large attack surface.

00:28:16.690 --> 00:28:19.840
It's kind of like the king
piece in a game of chess.

00:28:19.840 --> 00:28:23.220
You take the kernel
and you win the game.

00:28:23.220 --> 00:28:26.230
And so we decided to spend
a lot more time thinking

00:28:26.230 --> 00:28:27.630
about how to harden the kernel.

00:28:30.530 --> 00:28:33.260
So we looked into what
causes kernel bugs.

00:28:33.260 --> 00:28:36.710
We looked into the
data from 2014 and 2016

00:28:36.710 --> 00:28:39.530
and categorized different kernel
bugs into different categories.

00:28:39.530 --> 00:28:42.500
And we see that the largest
category, accounting

00:28:42.500 --> 00:28:48.200
for about 45%, is this missing
and incorrect bounce check

00:28:48.200 --> 00:28:52.550
when we're copying data from
userspace to the kernel.

00:28:52.550 --> 00:28:54.800
So we presented
those exact same data

00:28:54.800 --> 00:28:59.600
to the Linux upstream
community and to ARM last year.

00:28:59.600 --> 00:29:01.970
And to their credit, they
were super responsive.

00:29:01.970 --> 00:29:03.680
Within a couple of
months, they gave us

00:29:03.680 --> 00:29:06.050
a feature called
harden user copy

00:29:06.050 --> 00:29:09.960
that addresses this entire
category of kernel bugs.

00:29:09.960 --> 00:29:13.820
So we have since then backported
harden user copy to the Android

00:29:13.820 --> 00:29:15.795
kernels, 318 and above.

00:29:15.795 --> 00:29:18.170
And we have also implemented
a few more security features

00:29:18.170 --> 00:29:19.310
on top of that.

00:29:19.310 --> 00:29:21.170
We have implemented
pan emulation.

00:29:21.170 --> 00:29:24.840
We have implemented
KASLR and many others.

00:29:24.840 --> 00:29:27.140
So all of these kernel
features, taken together--

00:29:27.140 --> 00:29:29.780
we expect that they will have
a huge impact on the number

00:29:29.780 --> 00:29:32.330
and severity of kernel
bugs in the future.

00:29:38.400 --> 00:29:41.720
Another way in which we
are protecting the kernel

00:29:41.720 --> 00:29:44.150
is to reduce its attack surface.

00:29:44.150 --> 00:29:46.370
We're using a technology
called seccomp

00:29:46.370 --> 00:29:49.220
to enforce a white
list of system calls

00:29:49.220 --> 00:29:52.970
that apps can use to
communicate with the kernel.

00:29:52.970 --> 00:29:56.570
Any system calls that are
not on that white list

00:29:56.570 --> 00:29:59.240
will be blocked by
the seccomp filter.

00:29:59.240 --> 00:30:01.340
So everything that's
on the white list--

00:30:01.340 --> 00:30:03.740
that includes system
calls that are

00:30:03.740 --> 00:30:08.480
made by all public libraries
that are supported in Android.

00:30:08.480 --> 00:30:10.970
And we have tested many
of the top apps, as well

00:30:10.970 --> 00:30:12.020
as Google Apps.

00:30:12.020 --> 00:30:17.810
So we expect that this actually
won't impact almost any app.

00:30:17.810 --> 00:30:22.310
But if you do have an app that
uses a lot of native code,

00:30:22.310 --> 00:30:25.664
we do encourage you to test
that up on an Android O device

00:30:25.664 --> 00:30:27.080
to make sure that
any system calls

00:30:27.080 --> 00:30:31.700
that you make are not affected
by the new seccomp filter.

00:30:31.700 --> 00:30:36.140
Having this white list
of kernel interfaces

00:30:36.140 --> 00:30:38.846
allows us to really
focus and concentrate

00:30:38.846 --> 00:30:40.220
our testing and
quality assurance

00:30:40.220 --> 00:30:42.890
efforts on this
well-defined white list

00:30:42.890 --> 00:30:44.990
and also be sure,
be more confident,

00:30:44.990 --> 00:30:48.290
that the rest of the
kernel is protected

00:30:48.290 --> 00:30:50.840
and that it's much harder to
exploit the rest of the kernel.

00:30:53.970 --> 00:30:56.940
Seccomp is actually
not new to Android.

00:30:56.940 --> 00:31:00.180
Chrome has been using it
for quite a while, in fact.

00:31:00.180 --> 00:31:04.135
So Chrome has their own
app-defined seccomp filter

00:31:04.135 --> 00:31:05.385
around their renderer process.

00:31:09.320 --> 00:31:12.500
They use this seccomp filter
to make a few guarantees.

00:31:12.500 --> 00:31:16.100
They want to guarantee that
the renderer process can

00:31:16.100 --> 00:31:19.990
read global states, but it
can not modify a global state.

00:31:19.990 --> 00:31:24.080
And in fact, this has been
quite useful quite a few times.

00:31:24.080 --> 00:31:26.600
Recently, we've seen a few
kernel bugs that were actually

00:31:26.600 --> 00:31:29.090
unreachable from the
Chrome renderer process,

00:31:29.090 --> 00:31:32.020
because the relevant system
calls were blocked by seccomp.

00:31:36.600 --> 00:31:41.050
OK, so that was a
really quick overview

00:31:41.050 --> 00:31:44.440
of the security relevant
updates in the Android OS.

00:31:44.440 --> 00:31:45.954
Let's now turn to app security.

00:31:45.954 --> 00:31:47.620
In particular, we'll
talk about a couple

00:31:47.620 --> 00:31:51.370
of features that improve
the security of your apps.

00:31:55.590 --> 00:31:57.220
First, let's go over WebView.

00:32:00.670 --> 00:32:05.500
So WebView has been with Android
since the very beginning.

00:32:05.500 --> 00:32:08.180
Up until KitKat, it shipped
with the operating system,

00:32:08.180 --> 00:32:10.510
which means that if there
were any bugs in WebView,

00:32:10.510 --> 00:32:13.090
it actually was not very
easy for us to fix those bugs

00:32:13.090 --> 00:32:15.640
and get them out
to users quickly.

00:32:15.640 --> 00:32:20.570
We addressed that with Android
Lollipop when we made WebView

00:32:20.570 --> 00:32:22.810
a separate APK
that is updateable

00:32:22.810 --> 00:32:25.500
every six weeks
by the Play store.

00:32:25.500 --> 00:32:29.410
And now, with Android O,
we've added quite a bit more--

00:32:29.410 --> 00:32:31.110
a few more security
features to WebView.

00:32:34.480 --> 00:32:37.020
In particular, the
WebView renderer process,

00:32:37.020 --> 00:32:38.940
similar to how it
works on Chrome,

00:32:38.940 --> 00:32:41.250
now runs as an isolated
process, separate

00:32:41.250 --> 00:32:42.870
from the rest of your app.

00:32:42.870 --> 00:32:45.480
This means that any crashes or
any compromises to the renderer

00:32:45.480 --> 00:32:48.660
process no longer
really affects your app.

00:32:48.660 --> 00:32:52.680
And any website that is able
to exploit the WebView process

00:32:52.680 --> 00:32:55.990
can't easily use that to
exploit the rest of your app.

00:32:55.990 --> 00:32:57.540
The renderer
process, in fact, is

00:32:57.540 --> 00:33:00.340
put into a very, very
tight sandbox, using

00:33:00.340 --> 00:33:02.040
seccomp and other technologies.

00:33:02.040 --> 00:33:04.800
For example, it can not write
to the network on its own,

00:33:04.800 --> 00:33:07.810
talk to the network on its own,
or write to disk on its own.

00:33:07.810 --> 00:33:09.270
And so that also
protects the rest

00:33:09.270 --> 00:33:12.051
of the operating system
from any exploits in WebView

00:33:12.051 --> 00:33:13.050
in the renderer process.

00:33:17.460 --> 00:33:20.620
Another cool feature coming
to WebView is Safe Browsing.

00:33:20.620 --> 00:33:22.640
So Safe Browsing has
been available on Chrome

00:33:22.640 --> 00:33:24.710
for quite a long time.

00:33:24.710 --> 00:33:28.100
When users visit a web site
that's known to be malicious,

00:33:28.100 --> 00:33:30.680
Safe Browsing will
show a warning

00:33:30.680 --> 00:33:34.020
and prompt the user
before continuing.

00:33:34.020 --> 00:33:37.860
Safe Browsing has been
showing useful warnings

00:33:37.860 --> 00:33:41.860
to users more than 250
million times per month.

00:33:41.860 --> 00:33:45.689
And now it's coming
to WebView on Android.

00:33:45.689 --> 00:33:47.230
Safe Browsing is
actually implemented

00:33:47.230 --> 00:33:49.054
within the WebView
APK that's updateable

00:33:49.054 --> 00:33:50.470
every six weeks
by the Play store.

00:33:50.470 --> 00:33:53.080
And so you can actually
change your app

00:33:53.080 --> 00:33:55.362
and protect your users
almost immediately.

00:33:59.430 --> 00:34:01.230
Another important
aspect of app security

00:34:01.230 --> 00:34:03.450
is the device and
user authentication.

00:34:06.450 --> 00:34:08.810
So why is device
authentication important?

00:34:08.810 --> 00:34:12.170
Well if you're using
your phone to buy things

00:34:12.170 --> 00:34:14.239
or to unlock your
home door, you want

00:34:14.239 --> 00:34:18.071
to make sure that no one can
pretend to be your phone.

00:34:18.071 --> 00:34:20.580
And so what you can do is you
can use the Android key store

00:34:20.580 --> 00:34:25.165
APIs to generate a key pair to
uniquely identify your device.

00:34:25.165 --> 00:34:26.789
The benefit of using
the key store APIs

00:34:26.789 --> 00:34:30.210
is that on new Android
devices, key store keys

00:34:30.210 --> 00:34:32.820
are protected by secure
hardware, such as the Trusted

00:34:32.820 --> 00:34:34.170
Execution Environment.

00:34:34.170 --> 00:34:36.630
And so even in the event
of a kernel compromise,

00:34:36.630 --> 00:34:39.120
no one can extract
out those keys

00:34:39.120 --> 00:34:42.520
and clone them onto
another device.

00:34:42.520 --> 00:34:45.760
There was always one
question remaining though,

00:34:45.760 --> 00:34:48.429
which is, how do you actually
know that those keys are

00:34:48.429 --> 00:34:49.630
properly protected?

00:34:49.630 --> 00:34:51.590
Let's say you're
on the server side.

00:34:51.590 --> 00:34:53.789
How does your server
verify that you're

00:34:53.789 --> 00:34:56.080
talking to a device that's
using keys that are properly

00:34:56.080 --> 00:34:58.900
protected by secure hardware?

00:34:58.900 --> 00:35:01.180
This is where key
attestation comes in.

00:35:01.180 --> 00:35:04.300
With Android O, we're
adding in an attestation

00:35:04.300 --> 00:35:07.820
API for compatible devices,
where at a high level

00:35:07.820 --> 00:35:11.440
your server can talk directly
to the secure hardware,

00:35:11.440 --> 00:35:14.770
the trusted execution
environment on the device,

00:35:14.770 --> 00:35:17.230
and ask it to give
you signed assertions

00:35:17.230 --> 00:35:20.080
about the properties of
the keys that it protects

00:35:20.080 --> 00:35:22.640
as well as about the
properties of the device.

00:35:22.640 --> 00:35:26.050
So for example, the
key attestation API

00:35:26.050 --> 00:35:30.130
can tell you whether the key
itself actually is protected

00:35:30.130 --> 00:35:31.484
by the secure hardware.

00:35:31.484 --> 00:35:32.900
It can also tell
you, for example,

00:35:32.900 --> 00:35:37.230
whether Verified Boot passed
on that particular device.

00:35:37.230 --> 00:35:40.170
The associated attestations
certificate chain

00:35:40.170 --> 00:35:41.550
on compatible
devices is actually

00:35:41.550 --> 00:35:42.930
rooted in a Google certificate.

00:35:42.930 --> 00:35:45.360
So that's how you know
that that device itself

00:35:45.360 --> 00:35:48.080
is known to Google and is
compatible with Google's

00:35:48.080 --> 00:35:49.060
standards.

00:35:53.290 --> 00:35:55.490
All right, so that was
device authorization.

00:35:55.490 --> 00:35:57.410
So what about user
authentication?

00:35:57.410 --> 00:36:00.860
We're happy to let everyone
know that with the next version

00:36:00.860 --> 00:36:04.120
of Google Play services, we're
also adding APIs to support

00:36:04.120 --> 00:36:06.410
FIDO U2F security keys.

00:36:06.410 --> 00:36:07.940
As you probably
know, security keys

00:36:07.940 --> 00:36:09.980
are second factor
tokens that are already

00:36:09.980 --> 00:36:12.200
accepted by many major
web sites such as Google,

00:36:12.200 --> 00:36:14.880
Facebook, GitHub.

00:36:14.880 --> 00:36:17.800
And security keys, as compared
to traditional second factor

00:36:17.800 --> 00:36:20.360
methods, are faster
to authenticate

00:36:20.360 --> 00:36:22.460
and harder to phish.

00:36:22.460 --> 00:36:24.761
So we know that
for a lot of users,

00:36:24.761 --> 00:36:26.510
one of the most important
things that they

00:36:26.510 --> 00:36:29.060
can do to secure
their user account

00:36:29.060 --> 00:36:31.940
is to enable second
factor authentication.

00:36:31.940 --> 00:36:34.066
So we're very excited
that security key support

00:36:34.066 --> 00:36:34.940
is coming to Android.

00:36:38.950 --> 00:36:41.920
So to wrap up, we covered
a lot of material.

00:36:41.920 --> 00:36:44.550
We talked about all
kinds of improvements

00:36:44.550 --> 00:36:45.550
in the operating system.

00:36:45.550 --> 00:36:47.251
We talked about app security.

00:36:49.900 --> 00:36:53.530
If you want to learn more about
making your app more secure,

00:36:53.530 --> 00:36:55.240
check out these
developer resources.

00:36:55.240 --> 00:36:57.724
We have a checklist as well
as some best practices.

00:36:57.724 --> 00:36:59.140
We also have a
couple of code labs

00:36:59.140 --> 00:37:03.307
here at I/O that you can
try out at the kiosks

00:37:03.307 --> 00:37:04.390
or you can try out online.

00:37:04.390 --> 00:37:07.250
So thank you for your attention.

00:37:07.250 --> 00:37:09.500
And if you have questions
or any comments,

00:37:09.500 --> 00:37:11.960
feel free to email us
at security@android.com.

00:37:11.960 --> 00:37:13.251
And we'll also be backstage.

00:37:13.251 --> 00:37:13.750
Thank you.

00:37:13.750 --> 00:37:16.080
[APPLAUSE]

00:37:16.080 --> 00:37:20.430
[MUSIC PLAYING]

