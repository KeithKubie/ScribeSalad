WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.020
Of course, there are certain problems that a computer can't solve.

00:00:02.020 --> 00:00:05.840
It can't appreciate the beauty of a painting for example.

00:00:05.840 --> 00:00:11.200
A computer cannot predict the outcome of a soccer match at least not accurately

00:00:11.200 --> 00:00:13.110
and of course, a computer also cannot see into the future

00:00:13.110 --> 00:00:16.000
and tell you the lottery numbers of next Saturday.

00:00:16.000 --> 00:00:18.930
So, at this point, we have to start off a little bit more formal

00:00:18.930 --> 00:00:22.140
and specify exactly what kind of problems we are talking about

00:00:22.140 --> 00:00:26.780
and what we mean when we say we want a computer to solve a problem for us

00:00:26.780 --> 00:00:28.870
And we will do this through three requirements.

00:00:28.870 --> 00:00:33.239
These requirements might seem very obvious to you but later on this unit you will see

00:00:33.239 --> 00:00:37.970
that these requirements actually has some very, very important consequences

00:00:37.970 --> 00:00:39.010
So, the laws of computer problems.

00:00:39.010 --> 00:00:42.550
Rule number one for a computer problem, the input must be given to us

00:00:42.550 --> 00:00:47.779
as a finite string using a constant number of symbols at each position in the string.

00:00:47.779 --> 00:00:51.940
The input for a computer problem could for example be a number of zeros and ones

00:00:51.940 --> 00:00:55.750
It's not infinite so it has a defined end

00:00:55.750 --> 00:01:00.310
and by constant number of symbols, I mean, constant number of symbols at each place

00:01:00.310 --> 00:01:04.670
So, in this case, at each place in the string, we either have a zero or one.

00:01:04.670 --> 00:01:07.540
Here, we could have a zero or one. Here we could have a zero or one and so on.

00:01:07.540 --> 00:01:11.870
You could also have a string like this. Again, its finite in length.

00:01:11.870 --> 00:01:14.190
And this time, we're using the real alphabet.

00:01:14.190 --> 00:01:18.870
So, it doesn't really matter what kind of symbols you use as long as the number is constant

00:01:18.870 --> 00:01:22.950
and that is basically the same requirement that we already have when we discussed the RAM.

00:01:22.950 --> 00:01:25.830
Because for the RAM, we also said that at each memory cell,

00:01:25.830 --> 00:01:31.770
we could only have a finite number of symbols so no variable can be arbitrarily large

00:01:31.770 --> 00:01:36.729
and the same thing as here, we cannot use an arbitrarily large alphabet at each point of the string,

00:01:36.729 --> 00:01:40.670
Rule number two is exactly the same as rule number one with one exception

00:01:40.670 --> 00:01:43.880
instead of input, we write output.

00:01:43.880 --> 00:01:48.180
So, we also want the output to be given as a finite string using a constant number of symbols.

00:01:48.180 --> 00:01:51.600
Actually, we could ever restrict ourselves to decision problems here,

00:01:51.600 --> 00:01:53.170
but we're going to keep it general.

00:01:53.170 --> 00:01:57.190
So, you get the computer a string and you expect it to out put a string

00:01:57.190 --> 00:01:59.390
and then finally rule number three.

00:01:59.390 --> 00:02:03.040
Is that going to be as surprising as rule number one and rule number two?

00:02:03.040 --> 00:02:08.020
Yes, it is. Because rule number three is going to be that if we get an output

00:02:08.020 --> 00:02:11.970
then we want that output to be a correct answer to our problem

00:02:11.970 --> 00:02:17.080
and that is one important point and answer where we can objectively say that it is correct

00:02:17.080 --> 00:02:19.600
The moment that is given to us and it is suppose to be definitive

00:02:19.600 --> 00:02:21.800
So, we do not want the computer to say

00:02:21.800 --> 00:02:24.769
Oh let me work on this for a little bit longer.

00:02:24.769 --> 99:59:59.000
When it produces the output that is suppose to be the answer.

