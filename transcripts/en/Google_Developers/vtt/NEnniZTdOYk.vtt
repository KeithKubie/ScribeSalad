WEBVTT
Kind: captions
Language: en

00:00:23.267 --> 00:00:25.767
Laforge: Okay, so,
welcome, everybody.

00:00:25.767 --> 00:00:29.601
Uh, my pleasure
to have you here in this room.

00:00:29.601 --> 00:00:32.801
And I'm going to speak
about Groovy,

00:00:32.801 --> 00:00:35.334
the Groovy dynamic language
and Grails,

00:00:35.334 --> 00:00:37.734
the web application framework.

00:00:37.734 --> 00:00:43.534
and how they work
on Google App Engine.

00:00:43.534 --> 00:00:45.367
I'm Guillaume Laforge.

00:00:45.367 --> 00:00:49.601
So excuse me, perhaps I have
got a little French accent.

00:00:49.601 --> 00:00:53.067
But I'm coming from France--
Paris.

00:00:53.067 --> 00:00:54.767
I'm leading the Groovy Project.

00:00:54.767 --> 00:00:56.434
I've been working
on that project

00:00:56.434 --> 00:00:59.534
for already
quite a number of years.

00:00:59.534 --> 00:01:04.133
I am also leading
the specification JSR-241

00:01:04.133 --> 00:01:07.400
for standardizing
the Groovy language

00:01:07.400 --> 00:01:09.734
inside the Java community
process.

00:01:09.734 --> 00:01:12.734
I work for SpringSource,

00:01:12.734 --> 00:01:17.334
so my "groovy" title
is head of Groovy Development.

00:01:17.334 --> 00:01:21.033
I initiated the creation
of the Grails framework

00:01:21.033 --> 00:01:23.767
back in 2005.

00:01:23.767 --> 00:01:27.300
And I also coauthored this book
"Groovy In Action."

00:01:27.300 --> 00:01:30.667
So if you want to make me rich
and buy the book,

00:01:30.667 --> 00:01:33.634
on each copy I will get,
like, 50 cents

00:01:33.634 --> 00:01:35.200
or something like that

00:01:35.200 --> 00:01:38.267
because I just wrote
like a couple of chapters.

00:01:38.267 --> 00:01:40.100
But you know,
you have to start small.

00:01:40.100 --> 00:01:45.567
If I sell 1 billion
or 1 million at least,

00:01:45.567 --> 00:01:47.968
maybe I'll get rich,
you know?

00:01:47.968 --> 00:01:51.100
And I'm usually speaking
at various conferences

00:01:51.100 --> 00:01:55.334
around the world.

00:01:55.334 --> 00:02:00.934
So first of all, let's start
with a small question.

00:02:00.934 --> 00:02:04.767
Who's familiar with Groovy?
Who's already used Groovy?

00:02:04.767 --> 00:02:09.534
Okay, so that's
a fair number of you.

00:02:09.534 --> 00:02:12.801
So the agenda,
I'm going to do a quick,

00:02:12.801 --> 00:02:15.400
very quick overview
of what Groovy is,

00:02:15.400 --> 00:02:17.667
its main features.

00:02:17.667 --> 00:02:21.801
And I'll introduce you
to things like Groovlets,

00:02:21.801 --> 00:02:26.067
our version of Groovy servlets,
Groovy templates.

00:02:26.067 --> 00:02:31.234
And...a little hidden gem
I'll be mentioning as well,

00:02:31.234 --> 00:02:34.033
but I didn't put it
in the agenda.

00:02:34.033 --> 00:02:36.834
Then I will have
a look as well

00:02:36.834 --> 00:02:41.467
at the Grails
web application framework

00:02:41.467 --> 00:02:44.667
and how you can use Grails
to deploy applications

00:02:44.667 --> 00:02:46.801
on Google App Engine.

00:02:46.801 --> 00:02:50.167
Just to tell you
a bit of the story

00:02:50.167 --> 00:02:55.167
behind the support of Groovy
on App Engine Java.

00:02:55.167 --> 00:02:57.367
So, first of all,
I think it's a bit misleading

00:02:57.367 --> 00:02:59.133
to say Google App Engine Java

00:02:59.133 --> 00:03:01.901
because it's not just Java
the language, actually.

00:03:01.901 --> 00:03:04.534
It's really Java
virtual machine basically.

00:03:04.534 --> 00:03:07.234
It's more App Engine
on the Java Virtual Machine

00:03:07.234 --> 00:03:09.801
because you can run
other languages.

00:03:09.801 --> 00:03:11.167
It's not just about Java.

00:03:11.167 --> 00:03:14.801
And back a few months ago,

00:03:14.801 --> 00:03:17.868
thanks to my good friend
Dick Wall,

00:03:17.868 --> 00:03:22.267
we got in touch
with the Java team,

00:03:22.267 --> 00:03:24.400
the Google App Engine
Java team,

00:03:24.400 --> 00:03:28.434
and we worked together
so that we could ensure

00:03:28.434 --> 00:03:32.634
that Groovy would be
a first-class citizen language

00:03:32.634 --> 00:03:35.467
for Google App Engine.

00:03:35.467 --> 00:03:41.400
And let me thank
especially Toby

00:03:41.400 --> 00:03:44.067
from the App Engine Java team
who really helped us,

00:03:44.067 --> 00:03:47.100
greatly ensuring
that Groovy would run well

00:03:47.100 --> 00:03:49.200
on that environment.

00:03:49.200 --> 00:03:52.234
Okay, so let's start
more concretely.

00:03:52.234 --> 00:03:53.901
So, a few words about Groovy.

00:03:53.901 --> 00:03:57.467
So Groovy's a dynamic language
for the Java Virtual Machine.

00:03:57.467 --> 00:04:01.167
Dynamic language
in the sense that

00:04:01.167 --> 00:04:05.200
it's not a statically
typed language.

00:04:05.200 --> 00:04:09.000
So it supports typing,
typing information,

00:04:09.000 --> 00:04:13.400
so you can say string name
so it's not just loosely typed.

00:04:13.400 --> 00:04:16.834
In that sense, it's not dynamic
because of typing

00:04:16.834 --> 00:04:19.567
but dynamic because of
the way it behaves.

00:04:19.567 --> 00:04:22.200
And there's a, what we call,
a Meta Object Protocol

00:04:22.200 --> 00:04:28.534
which is the run-time behavior
of your types and classes.

00:04:28.534 --> 00:04:32.901
And you can change the behavior
at run-time

00:04:32.901 --> 00:04:37.200
of, uh...let's say you've got
a class, a string class,

00:04:37.200 --> 00:04:40.033
and you can change
the behavior of strings

00:04:40.033 --> 00:04:42.567
because you have access
to that run-time

00:04:42.567 --> 00:04:45.067
Meta Object Protocol.

00:04:45.067 --> 00:04:46.767
And it's a language

00:04:46.767 --> 00:04:50.067
which combines
down directly to bicode,

00:04:50.067 --> 00:04:53.200
so you can put, you know,
everything--

00:04:53.200 --> 00:04:56.834
all those .class files
in a jar

00:04:56.834 --> 00:04:59.801
and put that
in your class path.

00:04:59.801 --> 00:05:02.667
It becomes kind
of an implementation detail

00:05:02.667 --> 00:05:05.000
if you're using Groovy
or Java.

00:05:05.000 --> 00:05:07.901
Also the nice aspect
of Groovy

00:05:07.901 --> 00:05:13.234
is that it's been designed
to be totally, seamlessly

00:05:13.234 --> 00:05:15.501
integrable with Java.

00:05:15.501 --> 00:05:17.634
So you could, for instance,
let's say you have

00:05:17.634 --> 00:05:19.434
a Java interface.

00:05:19.434 --> 00:05:22.434
You extend that--you implement
that interface in Groovy

00:05:22.434 --> 00:05:24.834
and extend that class
in Java and vice-versa.

00:05:24.834 --> 00:05:27.234
You exchange Groovy and Java
in that sentence,

00:05:27.234 --> 00:05:30.501
and basically
it will just work.

00:05:30.501 --> 00:05:33.200
Which is not always the case

00:05:33.200 --> 00:05:36.834
with other alternative
languages, unfortunately.

00:05:36.834 --> 00:05:39.467
Groovy is also,
I forgot to mention,

00:05:39.467 --> 00:05:42.234
an open source project
hosted at Codehaus.

00:05:42.234 --> 00:05:46.501
And one of the design goals
when we worked on Groovy

00:05:46.501 --> 00:05:49.601
in the first place
was that we wanted Groovy

00:05:49.601 --> 00:05:52.934
to be a language for Java
developers mainly.

00:05:52.934 --> 00:05:56.501
Although it's not just
for Java developers, obviously.

00:05:56.501 --> 00:06:00.701
But the idea is that
we wanted to have Groovy be

00:06:00.701 --> 00:06:02.534
as close as possible to Java,

00:06:02.534 --> 00:06:09.801
so we even took the Java 5
grammar and kind of evolved it

00:06:09.801 --> 00:06:13.901
to make it
a little bit more Groovy--

00:06:13.901 --> 00:06:16.067
sorry for the pun--

00:06:16.067 --> 00:06:18.601
because we were
a bit frustrated with Java,

00:06:18.601 --> 00:06:21.300
and there were many features
we liked in all the languages

00:06:21.300 --> 00:06:25.167
and we wanted to bring
those features to Java.

00:06:25.167 --> 00:06:30.167
So Groovy's kind of our own
version of Java.

00:06:30.167 --> 00:06:33.267
And also the fact
it derives from Java 5,

00:06:33.267 --> 00:06:36.567
we also support features
like annotations,

00:06:36.567 --> 00:06:41.567
generics, static imports,
varargs and so on.

00:06:41.567 --> 00:06:44.734
So it's pretty handy,
and it's one of those

00:06:44.734 --> 00:06:47.133
rail languages,
alternative languages,

00:06:47.133 --> 00:06:50.667
which allow you to interact
with, let's say,

00:06:50.667 --> 00:06:53.033
JDO, JPA, JB3,

00:06:53.033 --> 00:06:55.734
all those stuff with
annotations, for instance.

00:06:55.734 --> 00:06:59.267
So it's a nice choice
if you want to use those things

00:06:59.267 --> 00:07:05.167
and if you want to use
an alternative language.

00:07:05.167 --> 00:07:08.234
And we borrowed several ideas
from other languages.

00:07:08.234 --> 00:07:11.968
And it's a language
which is pretty easy to learn

00:07:11.968 --> 00:07:13.868
for Java developers.

00:07:13.868 --> 00:07:18.868
So, now a little overview
of existing features.

00:07:18.868 --> 00:07:21.234
So it's fully object-oriented.

00:07:21.234 --> 00:07:23.734
Even when you say "three."

00:07:23.734 --> 00:07:27.033
The number three,
it's really an object,

00:07:27.033 --> 00:07:30.367
so you can do three
to a string on whatever.

00:07:30.367 --> 00:07:34.167
When I mention seamless
Java integration, for instance,

00:07:34.167 --> 00:07:35.501
we've got a joint compiler

00:07:35.501 --> 00:07:38.734
which allows you to compile
everything in one go,

00:07:38.734 --> 00:07:40.868
so when you've got
secular references

00:07:40.868 --> 00:07:44.367
between Groovy and Java,
it's totally a transparence.

00:07:44.367 --> 00:07:47.667
We added closures, those...

00:07:47.667 --> 00:07:52.300
loosely defined definition
of closures,

00:07:52.300 --> 00:07:57.734
basically some reusable
assignable code blocks.

00:07:57.734 --> 00:08:00.167
We've got properties,
so you don't need

00:08:00.167 --> 00:08:03.667
to write those getters
and setters every time.

00:08:03.667 --> 00:08:06.534
We have optional typing,
so you decide

00:08:06.534 --> 00:08:10.567
whether you want to say
def name or string name.

00:08:10.567 --> 00:08:12.234
That's up to you.

00:08:12.234 --> 00:08:15.400
We've got some various
short notations,

00:08:15.400 --> 00:08:19.234
for instance, for accessing
getters and so on.

00:08:19.234 --> 00:08:22.567
And we provide handy wrappers
around existing APIs,

00:08:22.567 --> 00:08:25.267
for instance Groovlets
and template engines

00:08:25.267 --> 00:08:28.934
that we'll come to
in a few slides.

00:08:28.934 --> 00:08:32.901
And the syntax,
although it derives from Java,

00:08:32.901 --> 00:08:38.100
we evolved it so it's pretty
malleable and you can write--

00:08:38.100 --> 00:08:40.667
and also because of
the metaprogramming facilities,

00:08:40.667 --> 00:08:43.567
you can write domain-specific
languages with Groovy.

00:08:43.567 --> 00:08:45.868
Groovy's quite a good candidate

00:08:45.868 --> 00:08:50.267
for writing embedded
domain-specific languages.

00:08:50.267 --> 00:08:56.601
Okay, perhaps before showing
anything else,

00:08:56.601 --> 00:08:58.434
when I say--

00:08:58.434 --> 00:09:02.167
So, where's my...

00:09:02.167 --> 00:09:04.167
my console there.

00:09:04.167 --> 00:09:07.400
I'm going to increase
the font size.

00:09:07.400 --> 00:09:11.167
Can everybody read that
in the back of the room?

00:09:11.167 --> 00:09:12.968
Yeah? Okay.

00:09:12.968 --> 00:09:16.234
So, let's take a small,
you know,

00:09:16.234 --> 00:09:19.634
stupid
HelloWorld Java program.

00:09:19.634 --> 00:09:22.100
So here I'm using
one of the tools

00:09:22.100 --> 00:09:25.133
which comes with
when you download Groovy

00:09:25.133 --> 00:09:27.834
from groovy.codehaus.org.

00:09:27.834 --> 00:09:31.467
We've got a swing console.
We've got a shell as well.

00:09:31.467 --> 00:09:35.901
There's a Groovy C compiler,
a Groovy interpreter.

00:09:35.901 --> 00:09:38.267
So there are many tools
which comes with Groovy.

00:09:38.267 --> 00:09:41.834
And to make you
a bit more familiar

00:09:41.834 --> 00:09:44.100
for those who don't know Groovy
very much yet,

00:09:44.100 --> 00:09:47.100
basically this is
a valid Java program

00:09:47.100 --> 00:09:49.434
but I can actually run it.

00:09:49.434 --> 00:09:51.701
It's also a valid
Groovy program.

00:09:51.701 --> 00:09:54.267
But as you learn more and more
about Groovy,

00:09:54.267 --> 00:09:56.133
you can make that Groovy--

00:09:56.133 --> 00:10:00.067
Java program
more idiomatic Groovy.

00:10:00.067 --> 00:10:02.901
So for instance,
you can remove things like

00:10:02.901 --> 00:10:08.434
those boring
and ugly semicolons.

00:10:08.434 --> 00:10:10.567
Okay.

00:10:10.567 --> 00:10:14.100
And if I execute that,

00:10:14.100 --> 00:10:18.200
it's still going to print
Hello Groovy.

00:10:18.200 --> 00:10:20.901
What could I do?

00:10:20.901 --> 00:10:24.167
By default,
we chose to make classes

00:10:24.167 --> 00:10:26.033
and methods public
so you don't need

00:10:26.033 --> 00:10:29.968
to repeat and specify public
all the time.

00:10:29.968 --> 00:10:33.734
It can say
public string greet.

00:10:33.734 --> 00:10:38.667
And it's still going to print
Hello Groovy when I run it.

00:10:38.667 --> 00:10:43.300
Yeah, so I mentioned the fact
that we support properties.

00:10:43.300 --> 00:10:45.400
So if you just say
instead of specifying

00:10:45.400 --> 00:10:49.968
a visibility modifier,
if you just say String name,

00:10:49.968 --> 00:10:53.400
you can even completely remove
the getter and the setter.

00:10:53.400 --> 00:10:56.968
And the Ruby C compiler
is going to generate

00:10:56.968 --> 00:10:58.734
a getter and a setter for you.

00:10:58.734 --> 00:11:02.634
So if I run that again,
it's going to print Hello World.

00:11:02.634 --> 00:11:08.167
We support what is probably
the sexiest feature

00:11:08.167 --> 00:11:09.267
of the language.

00:11:09.267 --> 00:11:11.868
We support
what we call G-strings.

00:11:11.868 --> 00:11:15.834
So this is interpolated strings,
basically.

00:11:15.834 --> 00:11:18.100
So instead of doing the usual

00:11:18.100 --> 00:11:21.067
string + variable + string,
et cetera,

00:11:21.067 --> 00:11:24.000
you can just say
return "Hello name."

00:11:24.000 --> 00:11:27.000
It's going to refer
the $(name)

00:11:27.000 --> 00:11:29.868
will be replaced with
the value of the name property

00:11:29.868 --> 00:11:33.000
when the string
is going to be evaluated.

00:11:33.000 --> 00:11:37.200
We cancel, for instance,
for the latest statement

00:11:37.200 --> 00:11:40.567
of your methods
returning something.

00:11:40.567 --> 00:11:43.534
You can even omit
the written key word.

00:11:43.534 --> 00:11:47.100
So you can say just
Hello Groovy.

00:11:47.100 --> 00:11:48.567
I'm just going to
say Hello Groovy.

00:11:48.567 --> 00:11:49.801
What else?

00:11:49.801 --> 00:11:54.067
Yeah, back on properties,
we also allow you

00:11:54.067 --> 00:11:55.601
to use that shortcut notation

00:11:55.601 --> 00:11:59.834
so you can say
.name = "Groovy"

00:11:59.834 --> 00:12:01.734
And it prints Hello Groovy.

00:12:01.734 --> 00:12:06.968
We can use named arguments
in the constructor.

00:12:06.968 --> 00:12:09.934
Although there's no constructor
looking like that,

00:12:09.934 --> 00:12:12.000
you can say "Groovy."

00:12:12.000 --> 00:12:13.834
And what it's going to do,

00:12:13.834 --> 00:12:17.133
it's going to create
instant shift Hello World

00:12:17.133 --> 00:12:18.634
with the default constructor

00:12:18.634 --> 00:12:22.834
and then call the setter
set name afterwards.

00:12:22.834 --> 00:12:27.501
So it's a nice way
of initializing instances.

00:12:27.501 --> 00:12:31.033
We've got some other shortcuts
like println.

00:12:31.033 --> 00:12:35.067
You can also omit parentheses.

00:12:35.067 --> 00:12:39.734
So I mentioned you can choose
to not type your variables

00:12:39.734 --> 00:12:43.868
or your method parameters
and such.

00:12:43.868 --> 00:12:46.234
It can say helloWorld.

00:12:46.234 --> 00:12:51.501
And because Groovy's also
a scripting language,

00:12:51.501 --> 00:12:56.000
you can remove that main method

00:12:56.000 --> 00:12:59.968
and you can put some statements
outside of the class body,

00:12:59.968 --> 00:13:03.968
and it's actually
becoming a script.

00:13:03.968 --> 00:13:06.067
And, well,
now you've got something

00:13:06.067 --> 00:13:08.834
which looks a bit more
idiomatic Groovy.

00:13:08.834 --> 00:13:11.667
So progressively as you learn
more of Groovy,

00:13:11.667 --> 00:13:16.400
you get some shorter samples,

00:13:16.400 --> 00:13:19.868
some classes
which are way shorter.

00:13:19.868 --> 00:13:24.033
And if you want to play
also with Groovy

00:13:24.033 --> 00:13:26.968
without installing it
on your computer,

00:13:26.968 --> 00:13:29.400
there's a Groovy web console,

00:13:29.400 --> 00:13:32.901
which is actually
a Google App Engine,

00:13:32.901 --> 00:13:35.000
a Google App Engine application.

00:13:35.000 --> 00:13:39.067
So we can say, you know,
Hello Google IO.

00:13:39.067 --> 00:13:40.634
or something like that,

00:13:40.634 --> 00:13:43.868
and you can execute that
in the tile.

00:13:43.868 --> 00:13:45.334
So if I execute....

00:13:45.334 --> 00:13:48.534
okay, it's going to print
Hello Google IO.

00:13:48.534 --> 00:13:52.634
You can see result,
the output, stacktraces...

00:13:52.634 --> 00:13:54.767
if you've got stacktraces.

00:13:54.767 --> 00:13:56.067
Okay.

00:13:56.067 --> 00:14:01.434
So, back to the slides.

00:14:01.434 --> 00:14:04.734
So since Groovy is a language

00:14:04.734 --> 00:14:07.100
which is supported
on Google App Engine,

00:14:07.100 --> 00:14:10.000
you can write a normal servlet.

00:14:10.000 --> 00:14:12.501
But with all the tricks
we've learned,

00:14:12.501 --> 00:14:17.634
you can do things like remove
the public key word.

00:14:17.634 --> 00:14:23.167
You can...well,
you can remove the semicolons.

00:14:23.167 --> 00:14:25.534
Since the response,

00:14:25.534 --> 00:14:28.067
you've got
a set contentType method.

00:14:28.067 --> 00:14:29.701
You can use that
shortcut notation--

00:14:29.701 --> 00:14:33.367
resp.getcontentType=something.

00:14:33.367 --> 00:14:37.033
And same for get writer.
You can just say it.

00:14:37.033 --> 00:14:39.067
resp.writer.println
"Hello World!"

00:14:39.067 --> 00:14:42.734
and it's going to print
something.

00:14:42.734 --> 00:14:47.834
So if I have a look
at the--oops, sorry.

00:14:47.834 --> 00:14:51.567
If I have a look at, um...

00:14:51.567 --> 00:14:55.868
I put that there.

00:14:55.868 --> 00:14:58.300
No, it's not the window
I wanted to see.

00:14:58.300 --> 00:15:01.267
Where is it?

00:15:01.267 --> 00:15:03.701
[humming]

00:15:03.701 --> 00:15:05.868
Okay, open docs.

00:15:05.868 --> 00:15:07.834
Yep, that's it.

00:15:07.834 --> 00:15:11.801
So, if you look at basically
what it looks like,

00:15:11.801 --> 00:15:14.400
well, this was my Hello World
program.

00:15:14.400 --> 00:15:17.801
So I go to a small
more or less empty project

00:15:17.801 --> 00:15:20.667
with some sources I wrote.

00:15:20.667 --> 00:15:25.334
I'm going to open that
into TextMate for instance.

00:15:25.334 --> 00:15:31.234
I even wrote a small Groovy
script to call end task

00:15:31.234 --> 00:15:35.667
for doing things like
compilation and such.

00:15:38.200 --> 00:15:41.300
And here's my Hello servlet,

00:15:41.300 --> 00:15:46.534
the one you saw in the--oops--
in the slides.

00:15:46.534 --> 00:15:49.534
So it's pretty much the same,
and this I made.

00:15:49.534 --> 00:15:53.467
Yeah, I did a little additional
thing there

00:15:53.467 --> 00:15:58.400
where you can see
I print that string

00:15:58.400 --> 00:16:01.300
and inside, actually--
it's actually a G-string.

00:16:01.300 --> 00:16:04.000
And I can use
a shell object from Groovy

00:16:04.000 --> 00:16:05.734
to evaluate some expression.

00:16:05.734 --> 00:16:10.801
So I can just show you
how it returned some results.

00:16:10.801 --> 00:16:15.901
And then I've got
my App Engine file.

00:16:15.901 --> 00:16:19.067
I've got my Groovy jar.

00:16:19.067 --> 00:16:24.300
And in my web.xml
I've defined my servlet there,

00:16:24.300 --> 00:16:28.601
defined also servlet mapping,

00:16:28.601 --> 00:16:31.667
and to run that...

00:16:31.667 --> 00:16:35.000
I think I can increase
the font size as well.

00:16:35.000 --> 00:16:37.868
Okay, is it readable?

00:16:37.868 --> 00:16:40.801
Okay, cool.

00:16:44.801 --> 00:16:49.868
Okay, so we're there and
I'm going to that directory.

00:16:49.868 --> 00:16:55.367
And if I run that locally

00:16:55.367 --> 00:17:02.300
with the local App Engine

00:17:02.300 --> 00:17:07.067
and I go back there,

00:17:07.067 --> 00:17:10.534
and so it's I think the mapping.

00:17:10.534 --> 00:17:12.968
It's...no, or...

00:17:12.968 --> 00:17:14.400
yeah, it's help.

00:17:14.400 --> 00:17:17.634
So you see it's really
a dumb servlet.

00:17:17.634 --> 00:17:22.267
And the Groovy shell
evaluated the expression.

00:17:22.267 --> 00:17:27.100
That's great, so nothing
really complicated.

00:17:27.100 --> 00:17:34.501
But if you look back
at this example just there,

00:17:34.501 --> 00:17:37.367
basically in Java
you always have

00:17:37.367 --> 00:17:39.167
that kind of boiler-plate
technical code

00:17:39.167 --> 00:17:42.100
where you have to
define a class,

00:17:42.100 --> 00:17:43.801
you have to define methods,
and so on.

00:17:43.801 --> 00:17:47.100
And although what you really
just wanted to show

00:17:47.100 --> 00:17:50.734
was you wanted to print
Hello Google App Engine

00:17:50.734 --> 00:17:53.100
and to print some value there.

00:17:53.100 --> 00:17:57.734
So what if we were able
to just do that println

00:17:57.734 --> 00:18:02.367
Hello Google app engine
and println somebody there?

00:18:02.367 --> 00:18:06.467
Actually,
that's what Groovlets--

00:18:06.467 --> 00:18:08.634
Oh, the slides are there.

00:18:08.634 --> 00:18:11.033
That's what Groovlets
are for.

00:18:11.033 --> 00:18:16.334
And basically Groovlets
lets you just write

00:18:16.334 --> 00:18:19.801
what matters the most basically,
just println something.

00:18:19.801 --> 00:18:21.834
And we also got
some interesting feature

00:18:21.834 --> 00:18:25.534
which is called
the markup builder.

00:18:25.534 --> 00:18:29.033
With Groovy, we support
the builder pattern somehow

00:18:29.033 --> 00:18:30.667
at the syntax level.

00:18:30.667 --> 00:18:32.667
And that's that concept
that we're going to use.

00:18:32.667 --> 00:18:38.167
So for instance,
if I go back to my console...

00:18:40.968 --> 00:18:42.334
which is just there.

00:18:42.334 --> 00:18:47.801
If I import
groovy.xml.MarkupBuilder

00:18:47.801 --> 00:18:55.100
and I def mkp = 
new MarkupBuilder.

00:18:55.100 --> 00:18:59.901
And then I can do mkp.html,

00:18:59.901 --> 00:19:06.000
and let's say body.

00:19:06.000 --> 00:19:07.834
And inside the body

00:19:07.834 --> 00:19:12.334
I'm going to put some
paragraph "Hello,"

00:19:12.334 --> 00:19:16.667
and it's going
to create some HTML.

00:19:16.667 --> 00:19:20.434
And basically what you see here
is just a method call

00:19:20.434 --> 00:19:22.868
which takes
a closure as parameter.

00:19:22.868 --> 00:19:25.767
And inside that closure
you see another method call

00:19:25.767 --> 00:19:28.601
which is delegated
to the markup builder

00:19:28.601 --> 00:19:32.000
which takes another closure,
and inside that closure--

00:19:32.000 --> 00:19:37.067
so you see the nesting
of the note HTML body p.

00:19:37.067 --> 00:19:41.868
At the syntax level--
[stammers]

00:19:41.868 --> 00:19:44.567
And with nice
curly braces around

00:19:44.567 --> 00:19:47.834
and you say p "Hello"
and it's going to print p Hello.

00:19:47.834 --> 00:19:51.534
So if you use something
like that in a script,

00:19:51.534 --> 00:19:54.334
you could output some HTML
pretty easily.

00:19:54.334 --> 00:19:56.901
And that's what we're doing.

00:19:56.901 --> 00:20:05.300
So with this
second example there...

00:20:05.300 --> 00:20:07.901
I'm going to use TextMate again.

00:20:07.901 --> 00:20:14.300
So instead of the servlet class
that you saw earlier,

00:20:14.300 --> 00:20:16.634
so I'm going to do basically
the same since.

00:20:16.634 --> 00:20:18.133
So it's just a script,

00:20:18.133 --> 00:20:20.734
And I can use this nice
markup builder.

00:20:20.734 --> 00:20:26.167
I'm going to put that
a bit bigger.

00:20:26.167 --> 00:20:31.767
Okay, so you can use such
a structure in your script.

00:20:31.767 --> 00:20:37.133
And you can then run that.

00:20:37.133 --> 00:20:39.667
Okay, kind of close this one.

00:20:39.667 --> 00:20:42.300
You can then run that.

00:20:42.300 --> 00:20:45.467
Ah...where is it?

00:20:45.467 --> 00:20:48.200
2-groovlet

00:20:48.200 --> 00:20:53.968
dev_appserver war/

00:20:53.968 --> 00:20:57.701
and guess what
it's going to show you...

00:20:57.701 --> 00:21:02.100
So what's the name of that?

00:21:02.100 --> 00:21:05.234
Where is it?
I'm lost.

00:21:05.234 --> 00:21:09.501
Yeah, so it's called Hello,
so I have to say hello.groovy.

00:21:09.501 --> 00:21:13.133
And all the...Hello...

00:21:13.133 --> 00:21:16.067
so all the Groovy files

00:21:16.067 --> 00:21:18.767
are actually situated
in WEB-INF

00:21:18.767 --> 00:21:22.167
and you can put them under
Groovy or elsewhere.

00:21:22.167 --> 00:21:28.767
And the servlet there,
so I defined a Groovy servlet

00:21:28.767 --> 00:21:35.767
and mapping to coach
all the star.groovy URLs

00:21:35.767 --> 00:21:39.267
and redirect that
to this little groovlet.

00:21:39.267 --> 00:21:41.667
So you don't have
all the usual boiler-plate code

00:21:41.667 --> 00:21:45.067
of defining a class,
some methods and so on.

00:21:45.067 --> 00:21:47.200
But you can use that.

00:21:47.200 --> 00:21:51.767
Okay, back to the slides.

00:21:51.767 --> 00:21:55.067
So we can use
the markup builder,

00:21:55.067 --> 00:21:57.334
and basically you just need
to reference

00:21:57.334 --> 00:22:01.834
the GroovyServlet
and find the URL mapping.

00:22:01.834 --> 00:22:05.033
And we also have another
feature in Groovy

00:22:05.033 --> 00:22:09.200
which is we've got built-in
template engines, basically.

00:22:09.200 --> 00:22:12.467
So if you've got a string
which looks like that

00:22:12.467 --> 00:22:15.801
and where you can use
like in G-strings

00:22:15.801 --> 00:22:17.667
this $ (month) notation,

00:22:17.667 --> 00:22:21.200
or you can use like in JSB's

00:22:21.200 --> 00:22:27.267
this &lt; and % symbol.

00:22:27.267 --> 00:22:31.467
Or you can also use this
to insert some value.

00:22:31.467 --> 00:22:33.734
This is just a block of code

00:22:33.734 --> 00:22:38.100
that's going to be interleaved
in the string,

00:22:38.100 --> 00:22:40.400
so you can print to that string

00:22:40.400 --> 00:22:43.067
or you can directly insert
some value.

00:22:43.067 --> 00:22:45.300
And then you can also pass
some binding,

00:22:45.300 --> 00:22:49.100
some variables
inside that template.

00:22:49.100 --> 00:22:51.567
So you create
your TemplateEngine.

00:22:51.567 --> 00:22:54.133
You create the template,
the text,

00:22:54.133 --> 00:22:56.667
and you make--
you replace, actually,

00:22:56.667 --> 00:23:00.501
all those variables
on placeholders and such

00:23:00.501 --> 00:23:02.734
with the variables
from the binding,

00:23:02.734 --> 00:23:06.767
and then it's going to
create a template,

00:23:06.767 --> 00:23:09.367
and then you can output that.

00:23:09.367 --> 00:23:11.934
So we created
the Groovlet concept,

00:23:11.934 --> 00:23:14.133
and thanks to
the Groovy templates,

00:23:14.133 --> 00:23:17.067
we also created
a spatial template

00:23:17.067 --> 00:23:21.200
which takes templates as inputs.

00:23:21.200 --> 00:23:24.400
So instead of using
the markup builder,

00:23:24.400 --> 00:23:27.601
you can define some HTML

00:23:27.601 --> 00:23:31.868
and use things like
$(message) and so on.

00:23:31.868 --> 00:23:36.000
And you can have--
so if I show you that in--

00:23:36.000 --> 00:23:39.501
whoops--
my small example.

00:23:39.501 --> 00:23:43.467
Again...so I stop this one.

00:23:43.467 --> 00:23:47.667
I go in templates and...

00:23:47.667 --> 00:23:51.300
I'm going to open that...

00:23:51.300 --> 00:23:54.634
in TextMate again...

00:23:54.634 --> 00:23:57.934
and that's basically
the same thing, so...

00:23:57.934 --> 00:24:04.634
I defined the...

00:24:04.634 --> 00:24:07.701
I defined as in my slide
the TemplateServlet,

00:24:07.701 --> 00:24:10.734
and I kept also
the GroovyServlet from earlier.

00:24:10.734 --> 00:24:12.734
Here you can still use
the groovlet,

00:24:12.734 --> 00:24:16.868
but I defined this extension.

00:24:16.868 --> 00:24:18.300
So if you look on that,

00:24:18.300 --> 00:24:22.701
I did this *.gtpl,

00:24:22.701 --> 00:24:26.467
so all these files
are going to be...

00:24:26.467 --> 00:24:29.901
all these URLs are going to be
sent to the TemplateServlet.

00:24:29.901 --> 00:24:33.901
And you can look at
my index GTPL

00:24:33.901 --> 00:24:36.501
and, for instance,
just like, well...

00:24:36.501 --> 00:24:38.868
more or less like in JSPs
and such,

00:24:38.868 --> 00:24:40.701
you can say $(new Date)

00:24:40.701 --> 00:24:44.000
and it's going to replace
that placeholder with the date,

00:24:44.000 --> 00:24:48.567
or you can use things like...

00:24:48.567 --> 00:24:52.667
well, in Groovy, we added some
methods to things like numbers,

00:24:52.667 --> 00:24:56.367
and we added a times method
on numbers

00:24:56.367 --> 00:24:58.701
so that you can say
3.times.

00:24:58.701 --> 00:25:00.100
And three times,

00:25:00.100 --> 00:25:02.567
we are going to execute
the body of that closure.

00:25:02.567 --> 00:25:06.734
And it means that we'll be
printing Hello World

00:25:06.734 --> 00:25:08.734
in the output three times.

00:25:08.734 --> 00:25:12.234
And something
which is interesting also

00:25:12.234 --> 00:25:14.067
is that there are
some shortcut methods

00:25:14.067 --> 00:25:18.767
for doing things like
includes, redirect, forward.

00:25:18.767 --> 00:25:19.767
What else?

00:25:19.767 --> 00:25:21.434
I think that's all.

00:25:21.434 --> 00:25:25.234
So you can also do some
page composition, basically.

00:25:25.234 --> 00:25:27.834
And in my other template there,

00:25:27.834 --> 00:25:30.334
I've got a little div

00:25:30.334 --> 00:25:33.534
and I can say tomorrow =
new Date() + 1.

00:25:33.534 --> 00:25:36.067
And in Groovy, you can also do
operator loading,

00:25:36.067 --> 00:25:38.100
so if you do new Date() + 1,

00:25:38.100 --> 00:25:41.834
it's going to add one day
to the new date.

00:25:41.834 --> 00:25:46.334
And if I...
if I run that,

00:25:46.334 --> 00:25:50.267
so I'm changing again...

00:25:50.267 --> 00:25:54.601
No, I'm already
at the right place, so...

00:25:54.601 --> 00:25:56.434
[humming]

00:25:56.434 --> 00:26:04.734
Yes. 
dev_appserver war

00:26:04.734 --> 00:26:08.634
Okay. And if
I go back there and...

00:26:08.634 --> 00:26:13.467
so what was the index GTPL?

00:26:13.467 --> 00:26:17.667
And okay, it's going to say
today is this date.

00:26:17.667 --> 00:26:19.734
Three times,
I'm going to print Hello World,

00:26:19.734 --> 00:26:24.467
and tomorrow
is Friday the 29TH.

00:26:24.467 --> 00:26:26.467
And even with
the time zone difference,

00:26:26.467 --> 00:26:29.200
because for me it's still
somehow midnight.

00:26:29.200 --> 00:26:31.167
It just works.

00:26:31.167 --> 00:26:34.868
Okay. So, uh...what else?

00:26:34.868 --> 00:26:38.234
I think I've shown everything
for the template.

00:26:38.234 --> 00:26:41.033
So also what's interesting
is that

00:26:41.033 --> 00:26:45.334
usually Groovlets are probably
what you'd use for,

00:26:45.334 --> 00:26:48.300
you know, controllers
and templates for your views.

00:26:48.300 --> 00:26:49.968
So the best approach,

00:26:49.968 --> 00:26:52.534
although I'm mixing
everything there,

00:26:52.534 --> 00:26:54.634
but the best approach
usually is to have

00:26:54.634 --> 00:26:57.634
your controllers as Groovlets

00:26:57.634 --> 00:27:03.067
and then somewhere there
you can say forward--oops.

00:27:03.067 --> 00:27:08.934
You can say something like
forward to my view, okay?

00:27:08.934 --> 00:27:10.501
You can do things like that.

00:27:10.501 --> 00:27:15.334
And you can also put things
in the request that...

00:27:15.334 --> 00:27:19.834
so that you can pass
some values back to the view.

00:27:19.834 --> 00:27:22.367
Okay, that's the basic idea.

00:27:22.367 --> 00:27:25.400
Okay...

00:27:25.400 --> 00:27:28.901
.save? No.

00:27:31.300 --> 00:27:33.901
So this was the server template,

00:27:33.901 --> 00:27:36.868
and there's something...

00:27:36.868 --> 00:27:41.067
pretty new which is not
yet available on the Web.

00:27:41.067 --> 00:27:43.868
But I'll put that soon online.

00:27:43.868 --> 00:27:49.167
So all these things are provided
by Groovy out of the box

00:27:49.167 --> 00:27:51.434
so you can use Groovy servlet,
can use Groovy templates

00:27:51.434 --> 00:27:52.901
and so on.

00:27:52.901 --> 00:27:55.501
So you just need basically
the Groovy jar

00:27:55.501 --> 00:27:57.968
into your webbing INF/lib.

00:27:57.968 --> 00:28:03.133
But we thought that we could
add some additional sugar

00:28:03.133 --> 00:28:06.767
on top of the Groovy servlets
and the Groovy templates.

00:28:06.767 --> 00:28:10.767
And Gaelyk...
so there's a little pun.

00:28:10.767 --> 00:28:15.367
I tried to find a name with
a G--Google App Engine letters.

00:28:15.367 --> 00:28:18.834
The acronym.
Oh! [laughs]

00:28:18.834 --> 00:28:20.868
So basically,
it's just a very thin layer

00:28:20.868 --> 00:28:25.100
on top of the Groovlets
and the servlet templates

00:28:25.100 --> 00:28:27.300
plus some wrapper around

00:28:27.300 --> 00:28:30.801
the Google App Engine
Java SDK APIS.

00:28:30.801 --> 00:28:33.234
And for instance,
all those nice services

00:28:33.234 --> 00:28:35.701
which are provided
by Google App Engine

00:28:35.701 --> 00:28:39.534
like the image manipulation

00:28:39.534 --> 00:28:42.634
like the user service,

00:28:42.634 --> 00:28:44.701
like what else?

00:28:44.701 --> 00:28:47.467
The URL fetcher...

00:28:47.467 --> 00:28:51.968
all these handy services
are injected in Groovlets

00:28:51.968 --> 00:28:54.634
and Groovy templates.

00:28:54.634 --> 00:28:58.968
And we also started to add
some new additional methods

00:28:58.968 --> 00:29:01.934
to simplify the use of the SDK

00:29:01.934 --> 00:29:04.701
of the APIs
of Google App Engine, Java.

00:29:04.701 --> 00:29:09.601
So another very small demo
of that...

00:29:13.000 --> 00:29:15.267
which is...okay.

00:29:15.267 --> 00:29:21.033
Just so I stop this server
and I go to...

00:29:21.033 --> 00:29:23.067
Gaelyk.

00:29:23.067 --> 00:29:27.934
And I'm going to open that
in TextMate again.

00:29:27.934 --> 00:29:30.234
So...I created--

00:29:30.234 --> 00:29:33.601
so I've gone over
to the old template there

00:29:33.601 --> 00:29:37.734
where, actually--so all the
services are injected directly.

00:29:37.734 --> 00:29:39.934
So you don't
have to reference them

00:29:39.934 --> 00:29:42.501
or pass them in any way.

00:29:42.501 --> 00:29:45.300
But basically,
just do datastoreService

00:29:45.300 --> 00:29:48.868
or memcacheService, and you
can access those services.

00:29:48.868 --> 00:29:52.601
So here I'm just going to print
the two string of these services

00:29:52.601 --> 00:29:56.534
and I'll show you the...

00:29:56.534 --> 00:29:58.434
category sample afterwards.

00:29:58.434 --> 00:30:00.934
Now I'm going to show you
just that right now.

00:30:00.934 --> 00:30:04.501
So what we wanted to do is...

00:30:04.501 --> 00:30:08.834
so if you look on the low-level
datastore API...

00:30:08.834 --> 00:30:10.767
when you use--

00:30:10.767 --> 00:30:16.901
I can't even show you
like the...the API...

00:30:16.901 --> 00:30:19.300
the Java doc directly.

00:30:19.300 --> 00:30:21.767
So if you look at
the datastore--

00:30:21.767 --> 00:30:27.067
Oh, interesting.
Firefox, a bug perhaps.

00:30:27.067 --> 00:30:30.667
If you look at...

00:30:30.667 --> 00:30:32.267
where it is--
it is there--

00:30:32.267 --> 00:30:34.534
the entity--

00:30:34.534 --> 00:30:36.767
It keeps on doing that.

00:30:36.767 --> 00:30:38.868
That's not very nice.

00:30:38.868 --> 00:30:41.801
So if you look at the entity,
the low-level API

00:30:41.801 --> 00:30:43.901
and the entity class
in particular,

00:30:43.901 --> 00:30:47.100
you've got methods like...

00:30:47.100 --> 00:30:49.701
getProperty or setProperty.

00:30:49.701 --> 00:30:51.033
But for instance,

00:30:51.033 --> 00:30:54.701
if your entity represents
a concept like a person,

00:30:54.701 --> 00:30:57.667
you'd like to be able to say
a person.name

00:30:57.667 --> 00:31:00.133
or a person.age,

00:31:00.133 --> 00:31:02.400
but if you use
the low-level API,

00:31:02.400 --> 00:31:04.701
you'll have to say
the new entity,

00:31:04.701 --> 00:31:07.467
you define the kind,
like new Entity("person")

00:31:07.467 --> 00:31:14.834
And then my entity.setProperty
name, some value.

00:31:14.834 --> 00:31:17.968
But with Groovy, the fact
that it's a dynamic language

00:31:17.968 --> 00:31:21.100
we can use a shorter notation,

00:31:21.100 --> 00:31:23.501
and we somehow decorated

00:31:23.501 --> 00:31:27.434
some of the classes
of the Java SDK

00:31:27.434 --> 00:31:31.267
so as to add some syntax
sugar on top of that.

00:31:31.267 --> 00:31:36.000
So instead of the not very
friendly Java version,

00:31:36.000 --> 00:31:37.434
you can do something like that.

00:31:37.434 --> 00:31:42.000
For instance, you define
a new entity the same way.

00:31:42.000 --> 00:31:46.801
But you can say use either
the subscript notation.

00:31:46.801 --> 00:31:50.434
So the...with, you know,
those square brackets.

00:31:50.434 --> 00:31:53.434
So you can say entity
["name"] = something.

00:31:53.434 --> 00:31:56.934
Or you can also use
this other syntax,

00:31:56.934 --> 00:32:01.968
which is the normal getter,
shortcut notation.

00:32:01.968 --> 00:32:04.000
And you can access it.

00:32:04.000 --> 00:32:06.601
So I'm using again
the markup builder

00:32:06.601 --> 00:32:08.868
for printing something...

00:32:08.868 --> 00:32:12.367
and what other methods
we added.

00:32:12.367 --> 00:32:15.367
For instance, to on entity
we added a delete method

00:32:15.367 --> 00:32:18.667
because it's on
the datastore service.

00:32:18.667 --> 00:32:21.367
It's got a delete method,

00:32:21.367 --> 00:32:24.501
but the delete method
is not on the entity.

00:32:24.501 --> 00:32:28.334
So we added a delete method,
a save method.

00:32:28.334 --> 00:32:31.567
And some of the other
nice little things we did--

00:32:31.567 --> 00:32:34.367
you can say...

00:32:34.367 --> 00:32:37.634
we created a withTransaction
method

00:32:37.634 --> 00:32:40.434
which takes a closure
as parameter.

00:32:40.434 --> 00:32:42.734
And inside that closure,

00:32:42.734 --> 00:32:47.100
all the operations are going
to be done in that transaction.

00:32:47.100 --> 00:32:52.501
So there are getProperty...

00:32:52.501 --> 00:32:55.467
no, it's on the datastore.

00:32:55.467 --> 00:32:58.701
Datastore Service

00:32:58.701 --> 00:33:01.467
where you've got methods
like get...

00:33:01.467 --> 00:33:04.534
to get an NTT
from the datastore,

00:33:04.534 --> 00:33:07.133
you usually get by its key

00:33:07.133 --> 00:33:10.400
or you can pass a transaction,
getTransaction

00:33:10.400 --> 00:33:13.467
and all the keys.

00:33:13.467 --> 00:33:18.200
So we wanted to simplify a bit
those...

00:33:18.200 --> 00:33:21.234
those operations
to make things a bit nicer,

00:33:21.234 --> 00:33:23.133
a bit Groovier.

00:33:23.133 --> 00:33:27.067
And another example
of the little things we did...

00:33:27.067 --> 00:33:30.667
so if you look
at the mailService API,

00:33:30.667 --> 00:33:34.801
you have to create
a new mailService.message class

00:33:34.801 --> 00:33:39.100
called the getters and setters--
actually, the setters.

00:33:39.100 --> 00:33:45.567
So you say mailmessage.set to,
.set sender, et cetera.

00:33:45.567 --> 00:33:48.000
And we wanted to use
named arguments,

00:33:48.000 --> 00:33:49.701
which are supported in Groovy

00:33:49.701 --> 00:33:51.868
so that you could use
that syntax

00:33:51.868 --> 00:33:55.501
to easily write an email
to someone

00:33:55.501 --> 00:33:58.100
using the mailService API.

00:33:58.100 --> 00:34:01.834
So I can run
this little example.

00:34:01.834 --> 00:34:06.901
Nothing earth-shattering.

00:34:06.901 --> 00:34:10.300
Okay. Oh, I'm already
in the right place,

00:34:10.300 --> 00:34:15.567
dev_appserver war/

00:34:15.567 --> 00:34:20.601
And, okay,
if I go back there...

00:34:20.601 --> 00:34:25.100
so I think it's still
index GTPL, if I'm not wrong.

00:34:25.100 --> 00:34:29.567
Basically you can see that...

00:34:29.567 --> 00:34:33.701
we printed the two strings
of all the injected services.

00:34:33.701 --> 00:34:37.100
Oh, yeah, there's also a user
variable which is injected.

00:34:37.100 --> 00:34:39.234
So if there's a user
currently logged in,

00:34:39.234 --> 00:34:42.234
you're going to see
that user there.

00:34:42.234 --> 00:34:44.801
And then the various operations
I showed you

00:34:44.801 --> 00:34:47.634
like creating a new entity,
starting a transaction,

00:34:47.634 --> 00:34:49.734
and so on.

00:34:49.734 --> 00:34:51.534
And sending an email.

00:34:51.534 --> 00:34:57.934
Okay. So now that we
talked about...

00:34:57.934 --> 00:35:02.801
so I'm going to stop the server
before I forget.

00:35:02.801 --> 00:35:05.634
And I'm going to speak now

00:35:05.634 --> 00:35:09.767
about Grails.

00:35:09.767 --> 00:35:14.767
Okay. So Gaelyk
is going to be available

00:35:14.767 --> 00:35:17.534
on gaelyk.appsupport.com.

00:35:17.534 --> 00:35:19.167
I even put the URL

00:35:19.167 --> 00:35:21.968
because I have not deployed
anything there.

00:35:21.968 --> 00:35:24.934
But it's really something
completely new,

00:35:24.934 --> 00:35:27.334
so it's still pretty...

00:35:27.334 --> 00:35:31.334
there's not much yet available
apart from what I've shown you.

00:35:31.334 --> 00:35:34.367
But it's going to be there
sometime soon.

00:35:34.367 --> 00:35:36.100
[applause]

00:35:36.100 --> 00:35:39.501
Thank you.

00:35:39.501 --> 00:35:41.534
So now...

00:35:41.534 --> 00:35:44.734
so we worked with the Google
App Engine Java team

00:35:44.734 --> 00:35:47.634
to make Groovy
a first-class citizen

00:35:47.634 --> 00:35:50.467
in terms of language supported
on App Engine Java.

00:35:50.467 --> 00:35:52.534
But we also worked
pretty recently

00:35:52.534 --> 00:35:58.334
on the support of Grails,
the web application framework,

00:35:58.334 --> 00:36:01.767
which is actually
a small, simple equation.

00:36:01.767 --> 00:36:06.334
Grails is Groovy for writing
everything like controllers,

00:36:06.334 --> 00:36:08.534
domain classes, et cetera.

00:36:08.534 --> 00:36:10.801
It's also Spring,

00:36:10.801 --> 00:36:14.000
which everything is based
on top of Spring.

00:36:14.000 --> 00:36:18.534
And if you use it--
if you use it

00:36:18.534 --> 00:36:20.501
outside of App Engine, usually,

00:36:20.501 --> 00:36:23.133
you use Hibernate
for the persistence.

00:36:23.133 --> 00:36:25.801
So it's a mix of these things.

00:36:25.801 --> 00:36:27.868
And not just that.

00:36:27.868 --> 00:36:30.033
It's also a mix of...

00:36:30.033 --> 00:36:33.534
it's built on top of
really rock-solid

00:36:33.534 --> 00:36:35.701
and proven open source bricks,

00:36:35.701 --> 00:36:39.100
so Spring, and Spring MVC,
Spring WebFlow.

00:36:39.100 --> 00:36:42.968
You can do page composition
with SiteMesh.

00:36:42.968 --> 00:36:46.667
You can have Quartz jobs.

00:36:46.667 --> 00:36:50.968
And it comes bundled with
the Jetty servlet container

00:36:50.968 --> 00:36:55.200
and an in-memory
relational database, HSQLDB.

00:36:55.200 --> 00:37:01.267
And we put a small O-R-M layer
on top of Hibernate

00:37:01.267 --> 00:37:03.467
to simplify things...

00:37:03.467 --> 00:37:05.634
in a nice way.

00:37:05.634 --> 00:37:08.400
It provide its own
command line tools

00:37:08.400 --> 00:37:10.200
so it can say Grails,
run app,

00:37:10.200 --> 00:37:13.501
Grails, create domain class,
et cetera.

00:37:13.501 --> 00:37:15.701
So this is our command line
interface,

00:37:15.701 --> 00:37:18.434
and it's actually...

00:37:18.434 --> 00:37:21.567
you can call it so some
build commands,

00:37:21.567 --> 00:37:25.434
such as Grails war,
so it creates your war,

00:37:25.434 --> 00:37:28.434
and you can put that war
on any solid container

00:37:28.434 --> 00:37:30.300
very easily.

00:37:30.300 --> 00:37:32.501
And we took
some great inspiration

00:37:32.501 --> 00:37:36.534
from other frameworks like
Ruby on Rails, for instance.

00:37:36.534 --> 00:37:38.567
So we forward certain paradigms,

00:37:38.567 --> 00:37:42.100
certain principles like
convention of a configuration.

00:37:42.100 --> 00:37:46.033
So instead of--well, when you're
writing a Java application,

00:37:46.033 --> 00:37:48.934
you usually have to choose
all the bricks you want to,

00:37:48.934 --> 00:37:52.267
mix together, define,
configure together, et cetera,

00:37:52.267 --> 00:37:54.400
so you usually waste
a bit of time.

00:37:54.400 --> 00:37:59.501
Grails comes bundled
with those bricks preconfigured.

00:37:59.501 --> 00:38:02.734
Usually you have more time
to focus on what matters,

00:38:02.734 --> 00:38:04.334
the business concepts
and so on,

00:38:04.334 --> 00:38:07.734
rather than
a boring configuration.

00:38:07.734 --> 00:38:12.334
And we also provide
features like scaffolding

00:38:12.334 --> 00:38:14.067
to help you get started

00:38:14.067 --> 00:38:17.567
and have some, you know,
simple CRUD UIs

00:38:17.567 --> 00:38:19.634
on top of your domain classes.

00:38:19.634 --> 00:38:21.734
There's a nice extensible
plugin system,

00:38:21.734 --> 00:38:25.901
so you can extend
and expend Grails

00:38:25.901 --> 00:38:29.000
to provide different
view layers,

00:38:29.000 --> 00:38:33.000
different integrations

00:38:33.000 --> 00:38:35.901
with all their external APIs

00:38:35.901 --> 00:38:37.734
or, for instance,

00:38:37.734 --> 00:38:42.000
using security APIs
or using JMS, etcetera.

00:38:42.000 --> 00:38:44.567
So you can use plugins
on that kind of stuff.

00:38:44.567 --> 00:38:47.834
And you can have
pretty modular pages

00:38:47.834 --> 00:38:52.334
because you can use SiteMesh
for page composition.

00:38:52.334 --> 00:38:55.667
You can use taglibs for--
if you've got some UI widgets

00:38:55.667 --> 00:38:58.400
that you want to reuse
across your obligation,

00:38:58.400 --> 00:39:00.033
you can create taglibs
very easily,

00:39:00.033 --> 00:39:03.300
way more easily
than with JSP taglibs.

00:39:03.300 --> 00:39:07.167
We've got templates,
and so on.

00:39:07.167 --> 00:39:09.834
And this is
the overall big picture.

00:39:09.834 --> 00:39:13.467
So Grails's on top of all these
nice open source bricks,

00:39:13.467 --> 00:39:16.400
and Groovy on the side
for writing domain classes

00:39:16.400 --> 00:39:17.701
and so on.

00:39:17.701 --> 00:39:22.000
And if you look at,
when you create a new project--

00:39:22.000 --> 00:39:25.567
actually, I think I'm going
to show you that right after...

00:39:25.567 --> 00:39:30.267
Well, the fact it comes--
it follows certain conventions

00:39:30.267 --> 00:39:34.901
and the project structure
or the project layout

00:39:34.901 --> 00:39:37.534
is also part of
the conventions.

00:39:37.534 --> 00:39:42.601
So we follow
the MVC principles.

00:39:42.601 --> 00:39:44.467
So you've got controllers,

00:39:44.467 --> 00:39:47.300
your domain classes
are your model.

00:39:47.300 --> 00:39:49.968
You can put the views
in the views directory,

00:39:49.968 --> 00:39:51.834
and so on.

00:39:51.834 --> 00:39:54.167
You can put libraries,
additional libraries.

00:39:54.167 --> 00:39:57.501
You can put scripts
for the build system,

00:39:57.501 --> 00:40:01.467
additional sources,
your test classes, et cetera.

00:40:01.467 --> 00:40:08.801
And all your JavaScript
or images, CSS.

00:40:08.801 --> 00:40:11.934
You can put them
in the web-app and directory.

00:40:11.934 --> 00:40:15.033
So that's the Global
Project structure.

00:40:15.033 --> 00:40:18.634
And since Grails
provides a plugin system

00:40:18.634 --> 00:40:23.000
so as to make Grails
extensible,

00:40:23.000 --> 00:40:25.601
there are tons of fixes
in plugins,

00:40:25.601 --> 00:40:27.133
well over 100.

00:40:27.133 --> 00:40:30.367
I think it's like 130
or something like that.

00:40:30.367 --> 00:40:33.734
So if you don't like using--
I haven't shown you that yet,

00:40:33.734 --> 00:40:37.734
but the--we use GSPs,
Groovy Server Pages,

00:40:37.734 --> 00:40:41.601
which is kind of like the Groovy
templates you saw earlier.

00:40:41.601 --> 00:40:46.834
But if you prefer using GWT
for your view layer

00:40:46.834 --> 00:40:49.367
or Flex or any Ajax toolkit

00:40:49.367 --> 00:40:52.534
or this iPhone view layer,

00:40:52.534 --> 00:40:57.400
or if you want to use JMS
for communication

00:40:57.400 --> 00:40:59.100
or adding search capabilities,

00:40:59.100 --> 00:41:02.534
your Grails application
using JSecurity

00:41:02.534 --> 00:41:04.701
or Spring security

00:41:04.701 --> 00:41:08.400
you can choose the right
plugin for your needs.

00:41:08.400 --> 00:41:10.400
And there are many plugins
for your needs.

00:41:10.400 --> 00:41:11.868
And very recently,

00:41:11.868 --> 00:41:16.701
we created a specific
Google App Engine plugin.

00:41:16.701 --> 00:41:21.701
So that you are able
to quickly create applications

00:41:21.701 --> 00:41:24.701
which are going to work
on Google App Engine

00:41:24.701 --> 00:41:28.367
and provide some additional
command-line options

00:41:28.367 --> 00:41:31.834
for deploying your application,

00:41:31.834 --> 00:41:35.534
running your application locally
with the local JT container

00:41:35.534 --> 00:41:37.567
and so on.

00:41:37.567 --> 00:41:41.434
So here are the steps
we're going to follow,

00:41:41.434 --> 00:41:43.868
and I'm going to show you
just that...

00:41:43.868 --> 00:41:51.701
if I go back to
my console there.

00:41:51.701 --> 00:41:54.534
So I'm going to create
grails create app.

00:41:54.534 --> 00:41:58.667
I'm going to create...

00:41:58.667 --> 00:42:01.400
I'm going to create
a new application...

00:42:01.400 --> 00:42:04.400
demo2,
because I created demo1.

00:42:04.400 --> 00:42:08.534
Let's create a second demo.

00:42:08.534 --> 00:42:11.400
So I install Grails
on my machine...

00:42:11.400 --> 00:42:15.801
in some place on my machine,

00:42:15.801 --> 00:42:19.701
and I just created a Grails
home environment variable.

00:42:19.701 --> 00:42:21.801
I added Grails home bin
in my path

00:42:21.801 --> 00:42:25.634
And then I can use
all the Grails commands.

00:42:25.634 --> 00:42:29.901
So I created an application,
a blank application,

00:42:29.901 --> 00:42:33.400
so you see there the new
directory that it created.

00:42:33.400 --> 00:42:38.300
So I can go to demo2
cd in the directory.

00:42:38.300 --> 00:42:41.767
And if you look at
what's available...

00:42:41.767 --> 00:42:45.167
so I've got basically
the structure you saw earlier

00:42:45.167 --> 00:42:50.033
with...I can put my controllers,
my domain classes there.

00:42:50.033 --> 00:42:52.367
So this is taglibs, et cetera.

00:42:52.367 --> 00:42:56.000
So this is currently
just an empty application,

00:42:56.000 --> 00:42:58.100
but you can already run it.

00:42:58.100 --> 00:43:02.067
So you don't have
to configure anything to wire.

00:43:02.067 --> 00:43:05.400
Spring Hibernates
out of the box.

00:43:05.400 --> 00:43:07.133
You've got
a running application.

00:43:07.133 --> 00:43:11.300
So if I just run
that application...

00:43:11.300 --> 00:43:14.367
Running Grails application...

00:43:14.367 --> 00:43:19.534
it takes a few seconds
to start up on my machine.

00:43:19.534 --> 00:43:24.434
Okay, so if I go
to demo2 here,

00:43:24.434 --> 00:43:27.000
demo2...

00:43:27.000 --> 00:43:30.734
it created a small,
empty Grail application,

00:43:30.734 --> 00:43:32.300
so you've got a welcome string.

00:43:32.300 --> 00:43:34.667
Screen, not string.

00:43:34.667 --> 00:43:37.133
But that's all you have
right now.

00:43:37.133 --> 00:43:41.067
Okay, so I go back there.
I'm stopping there.

00:43:41.067 --> 00:43:43.801
I'm going to...

00:43:43.801 --> 00:43:47.000
first of all,
since we're not going to use

00:43:47.000 --> 00:43:48.334
a relational database,

00:43:48.334 --> 00:43:53.667
I'm going to uninstall
the hibernate plugin.

00:43:57.601 --> 00:44:03.334
Then I'm going to install...

00:44:03.334 --> 00:44:09.167
the app engine plugin.

00:44:09.167 --> 00:44:13.300
And it's going to ask me
a little question...

00:44:13.300 --> 00:44:14.901
in a second.

00:44:14.901 --> 00:44:17.567
Okay, so it's downloading.
Blah, blah, blah.

00:44:17.567 --> 00:44:20.901
DO you want to use JPA
or JDO for persistence?

00:44:20.901 --> 00:44:22.868
So we don't use
the low-level API,

00:44:22.868 --> 00:44:25.834
but we can use either JPA
or JDO,

00:44:25.834 --> 00:44:28.834
so let's say...
let's say JPA.

00:44:28.834 --> 00:44:31.067
Why not?

00:44:31.067 --> 00:44:33.033
Okay, so I created...

00:44:33.033 --> 00:44:35.434
I installed
the App Engine plugin.

00:44:35.434 --> 00:44:38.501
And now I'm going to create

00:44:38.501 --> 00:44:42.567
a domain class

00:44:42.567 --> 00:44:45.501
called Book.

00:44:45.501 --> 00:44:48.834
Why not?

00:44:48.834 --> 00:44:51.667
So what the plugin does also,

00:44:51.667 --> 00:44:55.133
we've got some templates
for generating things like

00:44:55.133 --> 00:44:57.400
the views, the controllers

00:44:57.400 --> 00:44:59.167
for the scaffolded views.

00:44:59.167 --> 00:45:02.734
And the plugin provides
new command-line options.

00:45:02.734 --> 00:45:05.100
That also provides
some new templates

00:45:05.100 --> 00:45:08.400
for creating, for instance,
the domain classes.

00:45:08.400 --> 00:45:14.100
So if you look at my Book
domain classes here...

00:45:16.467 --> 00:45:17.834
Okay.

00:45:17.834 --> 00:45:22.434
So it created a Book classes

00:45:22.434 --> 00:45:25.934
annotated with @Entity
Javax.persistence.

00:45:25.934 --> 00:45:30.067
And you can see the ID there.

00:45:30.067 --> 00:45:32.734
Grails provides
some nice constraints

00:45:32.734 --> 00:45:37.868
so you can put some constraints
on your, you know, your fields.

00:45:37.868 --> 00:45:40.801
So a Book...
basically a Book has got a title

00:45:40.801 --> 00:45:43.534
and we've got an author, okay?

00:45:43.534 --> 00:45:45.634
A very simple example.

00:45:45.634 --> 00:45:49.434
And now what I can do is

00:45:49.434 --> 00:45:53.534
grails generate all.

00:45:53.534 --> 00:45:55.300
Not something I wanted to do.

00:45:55.300 --> 00:45:58.901
Or in other words,
it's not going to work.

00:45:58.901 --> 00:46:02.968
I have to use a package,

00:46:02.968 --> 00:46:04.767
so I'm going to...

00:46:04.767 --> 00:46:06.300
mkdir.

00:46:06.300 --> 00:46:10.667
Because otherwise App Engine
doesn't like very much

00:46:10.667 --> 00:46:12.767
if you don't put
your domain classes,

00:46:12.767 --> 00:46:16.367
your JPA annotated classes
in the default package.

00:46:16.367 --> 00:46:19.267
So I always forget that step.

00:46:19.267 --> 00:46:22.067
So I have to forward
that step myself...

00:46:22.067 --> 00:46:25.367
domain, let's say...
demo package.

00:46:25.367 --> 00:46:28.067
I'm going to move my--

00:46:28.067 --> 00:46:29.868
so I should have done that
right away.

00:46:29.868 --> 00:46:31.968
Sorry for that.

00:46:31.968 --> 00:46:34.067
[humming]

00:46:34.067 --> 00:46:37.400
domain/demo.

00:46:37.400 --> 00:46:42.167
And I'm going to edit
my Book class again

00:46:42.167 --> 00:46:44.801
to add the package information.

00:46:44.801 --> 00:46:48.133
Should have done that
firsthand too.

00:46:48.133 --> 00:46:49.834
I don't need semicolons.

00:46:49.834 --> 00:46:51.868
Can even remove that.

00:46:51.868 --> 00:46:53.868
Okay, so I've got
a package demo.

00:46:53.868 --> 00:46:57.467
If I didn't make a mistake,
now I'm going to generate...

00:46:57.467 --> 00:46:59.868
generate...

00:46:59.868 --> 00:47:03.834
all Book.

00:47:03.834 --> 00:47:07.968
And it's going to create
some controller and some views

00:47:07.968 --> 00:47:11.667
for this Book domain class...

00:47:11.667 --> 00:47:13.300
using the new templates

00:47:13.300 --> 00:47:19.434
providing by the Google App
Engine plugin for Grails.

00:47:19.434 --> 00:47:24.601
Okay. Oh ho...
I made some mistakes, I guess.

00:47:24.601 --> 00:47:27.033
Interesting.

00:47:27.033 --> 00:47:31.501
No per system provided, um...

00:47:31.501 --> 00:47:33.601
what's wrong there?

00:47:33.601 --> 00:47:35.133
I don't know.

00:47:35.133 --> 00:47:36.634
man: [indistinct]

00:47:36.634 --> 00:47:38.467
Laforge: Sorry?
man: [indistinct]

00:47:38.467 --> 00:47:41.367
Laforge: Uh, yes,
looks like it's saved.

00:47:41.367 --> 00:47:43.868
Views...it didn't
generate anything.

00:47:43.868 --> 00:47:45.767
What could be wrong there?

00:47:45.767 --> 00:47:52.300
man: [indistinct]

00:47:52.300 --> 00:47:54.334
Laforge: Mm...

00:47:54.334 --> 00:47:56.033
I don't see...anything.

00:47:56.033 --> 00:47:57.567
Well, never mind.

00:47:57.567 --> 00:48:00.901
I'll show you the one
which is running.

00:48:00.901 --> 00:48:04.801
Must be something...stupid.

00:48:04.801 --> 00:48:07.234
Okay, so back there...

00:48:07.234 --> 00:48:11.400
So basically, you're right
at the exact same state there.

00:48:11.400 --> 00:48:14.234
So I open that again.

00:48:14.234 --> 00:48:16.400
So it should really be
the same thing.

00:48:16.400 --> 00:48:18.868
I don't know why...

00:48:18.868 --> 00:48:23.968
So my Book domain class
is there.

00:48:23.968 --> 00:48:25.901
So that's exactly
what I had written,

00:48:25.901 --> 00:48:27.534
if I'm not mistaken.

00:48:27.534 --> 00:48:29.300
Package demo.

00:48:29.300 --> 00:48:32.801
It created a controller here,
the Book controller.

00:48:32.801 --> 00:48:38.534
So we've got methods like
index, list, show, delete--

00:48:38.534 --> 00:48:40.901
all the usual CRUD operations.

00:48:40.901 --> 00:48:46.067
And it's using the...
the--where is it?

00:48:46.067 --> 00:48:47.334
For instance.

00:48:47.334 --> 00:48:50.033
Yeah, here you can see
that we injected

00:48:50.033 --> 00:48:53.734
Spring's transactionTemplate
or JPATemplate

00:48:53.734 --> 00:48:59.534
and then you can call
JPATemplate

00:48:59.534 --> 00:49:01.601
to execute some queries,
et cetera,

00:49:01.601 --> 00:49:04.033
forwarding
all the CRUD operations.

00:49:04.033 --> 00:49:06.501
And here we've got the view,

00:49:06.501 --> 00:49:11.767
so it created...create GSP,
edit, list, and so on.

00:49:11.767 --> 00:49:14.801
And you can see how,
for instance,

00:49:14.801 --> 00:49:19.501
we've got taglibs for...

00:49:19.501 --> 00:49:23.901
for creating some nice
tabular representation

00:49:23.901 --> 00:49:27.501
of all the instances of Book.

00:49:27.501 --> 00:49:29.767
And if I run that locally...

00:49:29.767 --> 00:49:33.367
so the...

00:49:33.367 --> 00:49:35.000
App Engine...

00:49:35.000 --> 00:49:36.968
so I forget about the commands.

00:49:36.968 --> 00:49:39.367
I never remember by heart.

00:49:39.367 --> 00:49:42.634
Okay, and for plugin
App Engine...

00:49:42.634 --> 00:49:43.901
App Engine run.

00:49:43.901 --> 00:49:45.801
That's App Engine run
that I have to call.

00:49:45.801 --> 00:49:46.801
App Engine...

00:49:46.801 --> 00:49:49.601
so app engine run command

00:49:49.601 --> 00:49:54.667
is added by the App Engine
plugin.

00:49:54.667 --> 00:49:56.501
And if I run that,

00:49:56.501 --> 00:50:01.801
I'm then able
to start my application...

00:50:05.801 --> 00:50:10.000
using the JDO enhancer class

00:50:10.000 --> 00:50:12.968
below the JPA implementation.

00:50:12.968 --> 00:50:15.067
And then
in a couple of seconds,

00:50:15.067 --> 00:50:18.701
it's going to be...running.

00:50:18.701 --> 00:50:21.934
Yes.

00:50:21.934 --> 00:50:24.901
Okay, I'm launching that.

00:50:24.901 --> 00:50:27.033
In the usual web welcome string,

00:50:27.033 --> 00:50:28.868
you can see the available
controller,

00:50:28.868 --> 00:50:31.534
so for instance,
the BookController.

00:50:31.534 --> 00:50:34.934
And, okay, it remembered
some entries.

00:50:34.934 --> 00:50:40.734
Let's say...
Andres Almiray...

00:50:40.734 --> 00:50:43.067
Griffen in Action.

00:50:43.067 --> 00:50:48.133
And I can create new instances,

00:50:48.133 --> 00:50:50.734
and you can see
there's a nice table

00:50:50.734 --> 00:50:53.767
and you can see, you know,
all the books and so on.

00:50:53.767 --> 00:50:58.868
I can edit again if I made
a typo or something.

00:50:58.868 --> 00:51:00.534
I can update, I can delete.

00:51:00.534 --> 00:51:02.467
So all the usual
CRUD applications--

00:51:02.467 --> 00:51:04.434
operations are there.

00:51:04.434 --> 00:51:13.067
So I don't think I configured
my App Engine HML properly.

00:51:13.067 --> 00:51:14.868
But if I had done so,

00:51:14.868 --> 00:51:19.767
I could just say
Grails App Engine

00:51:19.767 --> 00:51:22.801
to deploy on App Engine.

00:51:22.801 --> 00:51:25.734
So in just one single
simple command,

00:51:25.734 --> 00:51:27.701
I can show you.

00:51:27.701 --> 00:51:31.033
So I don't want to try
the connection,

00:51:31.033 --> 00:51:33.200
just in case it doesn't work.

00:51:33.200 --> 00:51:37.300
So basically,
some differences would be

00:51:37.300 --> 00:51:40.400
some conventions
that Grails usually follows.

00:51:40.400 --> 00:51:42.534
When you create
a Grails application,

00:51:42.534 --> 00:51:45.667
it starts with a 1.0 version--

00:51:45.667 --> 00:51:48.334
or 0.1, I always forget.

00:51:48.334 --> 00:51:51.267
But on App Engine
you have to use integers,

00:51:51.267 --> 00:51:54.300
so you can say
set-version 1.

00:51:54.300 --> 00:51:57.367
Then you can package
your application

00:51:57.367 --> 00:52:00.234
so that you can then use
app-engine deploy

00:52:00.234 --> 00:52:02.234
to deploy on App Engine.

00:52:02.234 --> 00:52:04.167
So I'm not going
to show you that,

00:52:04.167 --> 00:52:07.100
because there's like
20 megabytes of jars

00:52:07.100 --> 00:52:10.701
and it takes a while to download
on the first download--

00:52:10.701 --> 00:52:12.767
on the first upload, sorry.

00:52:12.767 --> 00:52:14.901
But what's nice
with App Engine

00:52:14.901 --> 00:52:16.133
is that with the command,

00:52:16.133 --> 00:52:17.767
afterwards
when you make changes,

00:52:17.767 --> 00:52:21.501
it's just divs
that are sent through the wire.

00:52:21.501 --> 00:52:23.667
So it's quite nice.

00:52:23.667 --> 00:52:27.567
But trust me, you can use
just that command line,

00:52:27.567 --> 00:52:30.234
and it's going to deploy
on App Engine.

00:52:30.234 --> 00:52:33.334
Okay. So that was the demo.

00:52:33.334 --> 00:52:38.133
Yeah, just before us
doing the little summary,

00:52:38.133 --> 00:52:42.067
just to mention some little
sample applications

00:52:42.067 --> 00:52:43.701
that are online.

00:52:43.701 --> 00:52:45.767
For instance...

00:52:45.767 --> 00:52:47.968
so I mentioned these--
where is it?

00:52:47.968 --> 00:52:50.434
The web console
that I created,

00:52:50.434 --> 00:52:52.634
Groovyconsole.appspot.com,

00:52:52.634 --> 00:52:55.167
or just to show you
another little example

00:52:55.167 --> 00:52:59.133
and why App Engine is...

00:52:59.133 --> 00:53:01.167
quite neat.

00:53:01.167 --> 00:53:05.801
I made a small mashup
of Google Maps,

00:53:05.801 --> 00:53:10.334
the Flickr API
for returning pictures

00:53:10.334 --> 00:53:15.501
and I also used the Google
geocoding service

00:53:15.501 --> 00:53:17.834
so that if I put some...

00:53:17.834 --> 00:53:21.133
let's say the Eiffel Tower
in Paris.

00:53:21.133 --> 00:53:27.534
I do this...
it's going to center the map...

00:53:27.534 --> 00:53:30.367
on Paris.

00:53:30.367 --> 00:53:34.868
Takes a while.
Don't know why.

00:53:34.868 --> 00:53:37.767
And...so it's--yeah.

00:53:37.767 --> 00:53:39.767
The Eiffel Tower
is right there,

00:53:39.767 --> 00:53:41.000
and it's going to show you

00:53:41.000 --> 00:53:42.601
some pictures
of the Eiffel Tower,

00:53:42.601 --> 00:53:45.901
some past searches from users.

00:53:45.901 --> 00:53:49.968
And just to show you what's
so nice with Groovy itself,

00:53:49.968 --> 00:53:53.601
for instance,
if you look at...

00:53:53.601 --> 00:53:55.167
so where is it--there.

00:53:55.167 --> 00:53:57.334
If you look at
this small application,

00:53:57.334 --> 00:54:00.267
I'm going to show you
the codes.

00:54:00.267 --> 00:54:03.067
Basically...

00:54:03.067 --> 00:54:06.968
one of the nice things I like
particularly with Groovy

00:54:06.968 --> 00:54:11.434
is for doing things
like accessing some URLs.

00:54:11.434 --> 00:54:15.434
I define a URL, then I get
the input stream on that URL.

00:54:15.434 --> 00:54:20.567
I can use the Groovy XML
facilities for parsing XML.

00:54:20.567 --> 00:54:23.767
And although--well,
you don't have to use

00:54:23.767 --> 00:54:26.100
the dumb API or anything.

00:54:26.100 --> 00:54:30.934
You can just say
node.Response.Status.code

00:54:30.934 --> 00:54:33.934
and it's going to fetch
the right node in your XML.

00:54:33.934 --> 00:54:39.067
So in just very simple,
you know, expressions like that,

00:54:39.067 --> 00:54:42.434
you can retrieve
the coordinates.

00:54:42.434 --> 00:54:45.934
So this is the part where
I'm using the geocoding service

00:54:45.934 --> 00:54:48.968
because I want to retrieve
the latitude and longitudes

00:54:48.968 --> 00:54:51.601
of some special address.

00:54:51.601 --> 00:54:55.367
Then I also call Flickr...

00:54:55.367 --> 00:55:00.367
with some key words using--
in the address

00:55:00.367 --> 00:55:03.868
so that I find pictures
which are related to that point.

00:55:03.868 --> 00:55:07.701
And again, I'm using XML Slurper
to retrieve from the response

00:55:07.701 --> 00:55:10.400
all the photos
that I'm creating,

00:55:10.400 --> 00:55:14.667
a list of photos
defining URLs of these photos.

00:55:14.667 --> 00:55:17.501
And then I'm using
the markup builder

00:55:17.501 --> 00:55:20.200
to create the HTML view
that you saw.

00:55:20.200 --> 00:55:24.601
So for instance,
I'm using the Ajax APIs

00:55:24.601 --> 00:55:27.334
for loading Google Maps.

00:55:27.334 --> 00:55:30.667
Then I've got a small form

00:55:30.667 --> 00:55:37.434
and I also use the NTT,
put stuff in the datastore.

00:55:37.434 --> 00:55:41.701
And basically in just--okay,
almost 90 lines of code,

00:55:41.701 --> 00:55:46.200
you've got a small mashup
of three different services.

00:55:46.200 --> 00:55:49.501
So it's pretty...
pretty funny.

00:55:49.501 --> 00:55:52.200
Okay...

00:55:52.200 --> 00:55:54.734
so to summar--everything--

00:55:54.734 --> 00:55:56.734
so Groovy is also
a first-class citizen

00:55:56.734 --> 00:55:58.200
on the Google App Engine.

00:55:58.200 --> 00:56:00.334
So you can use Java, but you
can use all the languages

00:56:00.334 --> 00:56:02.367
like Groovy, for instance.

00:56:02.367 --> 00:56:04.133
There are many
shortcuts notations

00:56:04.133 --> 00:56:05.968
which allow you, for instance,

00:56:05.968 --> 00:56:09.701
parsing XML
in a pretty neat way,

00:56:09.701 --> 00:56:13.067
accessing the DOM and so on
very easily.

00:56:13.067 --> 00:56:16.334
We provide servlets
and templates

00:56:16.334 --> 00:56:19.167
for controllers and views.

00:56:19.167 --> 00:56:22.167
And when it's going to be
officially released,

00:56:22.167 --> 00:56:25.000
the small Gaelyk model
will allow you

00:56:25.000 --> 00:56:27.033
to simplify even further

00:56:27.033 --> 00:56:31.033
the development
of small applications

00:56:31.033 --> 00:56:33.033
with role Groovy.

00:56:33.033 --> 00:56:36.767
But if you want to build
some more complex--oops.

00:56:36.767 --> 00:56:39.667
If you want to build
some more complex applications,

00:56:39.667 --> 00:56:44.067
you'd obviously
better use Grails

00:56:44.067 --> 00:56:46.534
because it really simplifies
and streamline

00:56:46.534 --> 00:56:48.767
the development
of web applications.

00:56:48.767 --> 00:56:51.601
And thanks to the App Engine
plugin,

00:56:51.601 --> 00:56:55.534
it's pretty easy to deploy--
develop and deploy applications

00:56:55.534 --> 00:56:58.667
on the App Engine clouds.

00:56:58.667 --> 00:57:01.834
A few links.

00:57:01.834 --> 00:57:05.267
So you'll find them on the
slides when you've got them.

00:57:05.267 --> 00:57:10.667
On the SpringSource blog,
I wrote a small example,

00:57:10.667 --> 00:57:13.801
a small tutorial
on developing Groovy web apps

00:57:13.801 --> 00:57:15.834
for App Engine.

00:57:15.834 --> 00:57:17.767
And my colleague,
Graeme Rocher,

00:57:17.767 --> 00:57:19.367
the leader of
the Grails project,

00:57:19.367 --> 00:57:22.968
also created
a nice Spring case study

00:57:22.968 --> 00:57:27.200
that shows something like
the demo I showed earlier.

00:57:27.200 --> 00:57:29.767
So I invite you
to look at that.

00:57:29.767 --> 00:57:33.901
And the App Engine plugin,
that's where you can find it.

00:57:33.901 --> 00:57:36.801
So thanks a lot
for your attention,

00:57:36.801 --> 00:57:38.467
and I think we've got
just three minutes left

00:57:38.467 --> 00:57:41.601
for some questions
and perhaps some answers.

00:57:41.601 --> 00:57:45.834
So please use the mic
if you want to ask questions.

00:57:45.834 --> 00:57:50.267
And also, don't forget
provide some feedback

00:57:50.267 --> 00:57:53.467
and go to haveasec.com/IO

00:57:53.467 --> 00:57:55.868
to provide feedback
on the presentations,

00:57:55.868 --> 00:57:57.167
speakers, and so on.

00:57:57.167 --> 00:57:58.167
Thanks.

00:57:58.167 --> 00:58:01.801
[applause]
Thank you.

00:58:04.434 --> 00:58:05.701
Yeah.

00:58:05.701 --> 00:58:07.901
man: Can we run Groovy
on top of

00:58:07.901 --> 00:58:11.167
the Dolphin Virtual Machine
on Android?

00:58:11.167 --> 00:58:13.534
Laforge: So Groovy on Android?
man: Yeah.

00:58:13.534 --> 00:58:16.601
Laforge: So far, we can't.
[chuckles]

00:58:16.601 --> 00:58:18.601
But we've got

00:58:18.601 --> 00:58:21.200
a Google-summer-of-code
student this year

00:58:21.200 --> 00:58:24.367
who's going to work on
supporting Groovy in Android.

00:58:24.367 --> 00:58:26.367
So hopefully--
fingers crossed--

00:58:26.367 --> 00:58:29.968
you may be able to develop
Android Apps and...

00:58:29.968 --> 00:58:32.567
using Groovy as language.

00:58:32.567 --> 00:58:35.200
Thank you.

00:58:35.200 --> 00:58:37.601
man: Hi. I saw that
you had mentioned

00:58:37.601 --> 00:58:39.934
the Google Web Toolkit...
Laforge: Yep.

00:58:39.934 --> 00:58:42.901
man: So--so far, all the apps
were developed here

00:58:42.901 --> 00:58:46.067
just using either just
Groovy or Grails.

00:58:46.067 --> 00:58:48.534
Where does the Google Web
Toolkit come in?

00:58:48.534 --> 00:58:50.567
And right now,
the Google Web Toolkit

00:58:50.567 --> 00:58:52.267
can only, as far as I know,
accepts Java.

00:58:52.267 --> 00:58:54.467
So how can you use Groovy in...

00:58:54.467 --> 00:58:57.534
Laforge: So the...so if you
install the GWT,

00:58:57.534 --> 00:58:59.501
the G-W-T plugin.

00:58:59.501 --> 00:59:02.801
So instead of using JSPs,

00:59:02.801 --> 00:59:06.167
like, you know, those templates
that I showed you,

00:59:06.167 --> 00:59:09.667
actually, you can use
normal G-W-T,

00:59:09.667 --> 00:59:11.200
you know,
Java classes and so on,

00:59:11.200 --> 00:59:13.100
for your view.

00:59:13.100 --> 00:59:14.667
And we've got some hooks

00:59:14.667 --> 00:59:17.868
so that you can call back
to the Grail services,

00:59:17.868 --> 00:59:20.801
which are exposed as,
you know,

00:59:20.801 --> 00:59:24.934
RPC servlets for GWT,
so you can interact,

00:59:24.934 --> 00:59:27.300
have your nice UI in GWT

00:59:27.300 --> 00:59:30.767
and talk to a back end service
built on Grails.

00:59:30.767 --> 00:59:33.267
man: So there's no getting
away from Java, though.

00:59:33.267 --> 00:59:34.801
Laforge: And obviously,

00:59:34.801 --> 00:59:37.200
the GWT part is developed
with Java, not with Groovy.

00:59:37.200 --> 00:59:38.567
man: Yeah. Okay.

00:59:38.567 --> 00:59:40.567
Laforge: We need to develop
a kind of special compiler

00:59:40.567 --> 00:59:42.968
which combines Groovy
into JavaScript,

00:59:42.968 --> 00:59:44.467
but we've not done that yet.

00:59:44.467 --> 00:59:45.467
man: Okay. Something
to wish for.

00:59:45.467 --> 00:59:48.100
Laforge: Thanks.
man: Thank you.

00:59:48.100 --> 00:59:50.000
Laforge: Any other question?

00:59:50.000 --> 00:59:52.267
One last?
We've got 30 seconds.

00:59:52.267 --> 00:59:53.534
You've got 28 seconds!

00:59:53.534 --> 00:59:56.267
man: Is there any plans
for a plugin for Wave?

00:59:56.267 --> 00:59:59.300
The Wave.
The robot part.

00:59:59.300 --> 01:00:00.801
Laforge: Ah!

01:00:00.801 --> 01:00:03.200
Not yet.
[laughs]

01:00:03.200 --> 01:00:06.434
It's a bit too soon, but
that would be interesting, yes.

01:00:06.434 --> 01:00:09.267
Okay, thanks again
for your attention.

01:00:09.267 --> 01:00:11.501
[applause]

