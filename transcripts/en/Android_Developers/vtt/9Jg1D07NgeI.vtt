WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.280
[MUSIC PLAYING]

00:00:06.280 --> 00:00:08.029
SHOBANA RAVI: Hi,
good afternoon.

00:00:08.029 --> 00:00:10.290
Welcome to our session on
building an Android Instant

00:00:10.290 --> 00:00:11.520
App.

00:00:11.520 --> 00:00:15.100
I'm Shobana, I'm the engineering
lead for developer experience

00:00:15.100 --> 00:00:16.329
of Instant Apps.

00:00:16.329 --> 00:00:18.870
I've been on the team
since the very beginning.

00:00:18.870 --> 00:00:21.730
So I'm very excited
to be here today

00:00:21.730 --> 00:00:27.040
to bring all of you, our Instant
Apps development experience.

00:00:27.040 --> 00:00:30.800
So today, I'm going to
talk to you about what

00:00:30.800 --> 00:00:34.600
Instant Apps are, give you
a quick overview of the user

00:00:34.600 --> 00:00:37.020
experiences that they enable.

00:00:37.020 --> 00:00:39.070
I'll then talk about
a few key principles

00:00:39.070 --> 00:00:43.550
to keep in mind as you
build your Instant App.

00:00:43.550 --> 00:00:45.790
I'll walk you through
the developer experience

00:00:45.790 --> 00:00:48.700
that we built that you
can expect when you start.

00:00:48.700 --> 00:00:52.720
And then finally, we'll work
through a specific example

00:00:52.720 --> 00:00:55.780
of building an Instant
App from an existing app.

00:00:55.780 --> 00:00:56.410
Sounds good?

00:00:56.410 --> 00:00:57.160
Let's get started.

00:01:01.820 --> 00:01:03.780
So what are Instant Apps?

00:01:03.780 --> 00:01:08.880
Instant Apps are Android apps
that run without installation.

00:01:08.880 --> 00:01:13.330
They provide users the ability
to have rich native experiences

00:01:13.330 --> 00:01:16.690
at the tap of a URL.

00:01:16.690 --> 00:01:19.120
In this example,
our colleague Joyce

00:01:19.120 --> 00:01:22.930
sent us a URL for the New
York Times crossword puzzle.

00:01:22.930 --> 00:01:25.210
You tap on the URL,
and it directly

00:01:25.210 --> 00:01:28.930
brings it up inside the New
York Times crossword app.

00:01:28.930 --> 00:01:31.330
No installation needed.

00:01:31.330 --> 00:01:34.750
Now as a result of this,
my product manager John,

00:01:34.750 --> 00:01:38.800
sends me a URL every
morning with his timings.

00:01:38.800 --> 00:01:40.410
Unfortunate consequence.

00:01:40.410 --> 00:01:47.780
Anyway, so-- now since Instant
Apps are launched from URLs,

00:01:47.780 --> 00:01:50.060
they are discoverable
from anywhere

00:01:50.060 --> 00:01:51.770
that you can put a URL.

00:01:51.770 --> 00:01:54.470
Whether that's a chat
session with a friend

00:01:54.470 --> 00:01:57.024
or link in your search result.

00:01:57.024 --> 00:01:58.940
Did you know that the
White House was actually

00:01:58.940 --> 00:02:01.850
listed on Zillow?

00:02:01.850 --> 00:02:04.250
Now with installable
apps, you're

00:02:04.250 --> 00:02:07.460
probably used to users coming
in through your front door.

00:02:07.460 --> 00:02:10.259
So your launcher activity
or your main activity.

00:02:10.259 --> 00:02:14.780
But with Instant Apps, you just
can launch into any experience

00:02:14.780 --> 00:02:17.490
that you have within your app.

00:02:17.490 --> 00:02:21.377
So that improves the
surface area for discovery.

00:02:25.193 --> 00:02:28.820
Instant Apps are a mode of your
existing app, not something

00:02:28.820 --> 00:02:30.410
separate.

00:02:30.410 --> 00:02:33.320
They allow you to provide
the exact same product

00:02:33.320 --> 00:02:38.640
experience that you provide in
your current installable app.

00:02:38.640 --> 00:02:42.256
They share the same package
name, they have the same icon,

00:02:42.256 --> 00:02:43.630
and they have the
same code bits.

00:02:47.180 --> 00:02:49.880
So now that you know
what Instant Apps are,

00:02:49.880 --> 00:02:53.000
and what user
experiences they enable,

00:02:53.000 --> 00:02:54.830
let's talk about a
few key principles

00:02:54.830 --> 00:02:59.390
to keep in mind as you start
building your Instant App.

00:02:59.390 --> 00:03:01.250
You'll see examples
of these principles

00:03:01.250 --> 00:03:02.680
throughout the
rest of this talk,

00:03:02.680 --> 00:03:05.070
and when you do it yourself.

00:03:05.070 --> 00:03:10.130
So I'll cover discoverability,
security, and privacy,

00:03:10.130 --> 00:03:11.671
and performance.

00:03:15.820 --> 00:03:18.490
Instant Apps are
launched from URLs.

00:03:18.490 --> 00:03:22.970
So the first step is to
consider the experiences

00:03:22.970 --> 00:03:27.460
within your app, and make
them URL addressable.

00:03:27.460 --> 00:03:31.420
You can do this very easily
with Android App Links.

00:03:31.420 --> 00:03:34.390
App Links allows you
to associate a domain

00:03:34.390 --> 00:03:37.660
with your app, and
support specific paths

00:03:37.660 --> 00:03:42.340
against that domain within
activities in your app.

00:03:42.340 --> 00:03:45.430
The more of these paths you
support, the more discoverable

00:03:45.430 --> 00:03:46.390
your app is.

00:03:50.200 --> 00:03:53.050
Let's talk about
security and privacy.

00:03:53.050 --> 00:03:57.970
With installable apps, apps
get access to the user's device

00:03:57.970 --> 00:03:59.860
when they go through
an explicit--

00:03:59.860 --> 00:04:03.340
when the user goes through an
explicit installation flow.

00:04:03.340 --> 00:04:06.160
At that point, the user is
granting your app access

00:04:06.160 --> 00:04:07.610
to your device.

00:04:07.610 --> 00:04:11.390
You also have the ability to
ask the user for permissions

00:04:11.390 --> 00:04:15.170
to access private
data, like location.

00:04:15.170 --> 00:04:17.890
Now with Instant Apps, they
just launch from a URL.

00:04:17.890 --> 00:04:21.459
So there's no explicit
installation flow, and hence

00:04:21.459 --> 00:04:23.500
no upfront consent.

00:04:26.340 --> 00:04:29.460
For Instant Apps to maintain
the same capabilities

00:04:29.460 --> 00:04:33.000
as installable apps, they
use the runtime permissions

00:04:33.000 --> 00:04:37.980
API that allows them to get
private data, like location

00:04:37.980 --> 00:04:40.370
or on-device resources
like the camera.

00:04:43.260 --> 00:04:46.500
We also provide
user-resettable identifiers

00:04:46.500 --> 00:04:49.380
for Ad ID and Android ID.

00:04:49.380 --> 00:04:52.470
But we limit Instant Apps
when querying unique device

00:04:52.470 --> 00:04:57.010
identifiers, like
IMEI and MAC address.

00:04:57.010 --> 00:04:59.250
We also limit Instant
Apps from querying

00:04:59.250 --> 00:05:02.190
what apps are installed
on a user's device,

00:05:02.190 --> 00:05:04.139
and listening to
system broadcast.

00:05:08.540 --> 00:05:10.980
Finally, let's talk
about performance.

00:05:10.980 --> 00:05:14.570
Instant apps are loaded
and drawn on demand.

00:05:14.570 --> 00:05:18.650
So the size of the binary
has a huge impact to the user

00:05:18.650 --> 00:05:21.080
visible startup latency.

00:05:21.080 --> 00:05:24.260
The smaller the binary,
the faster it loads,

00:05:24.260 --> 00:05:26.220
the better the user experience.

00:05:26.220 --> 00:05:31.010
So it's very important to have
small lightweight binaries

00:05:31.010 --> 00:05:35.270
to have a great
Instant App experience.

00:05:35.270 --> 00:05:40.220
We recommend starting your app
on a very strict diet, zero

00:05:40.220 --> 00:05:41.160
fat.

00:05:41.160 --> 00:05:44.870
Take out dead code,
unused resources.

00:05:44.870 --> 00:05:48.020
Look in your manifest
for unused permissions,

00:05:48.020 --> 00:05:51.740
and your Gradle file for
unnecessary libraries.

00:05:51.740 --> 00:05:54.680
Many of our partners
saw a huge improvement

00:05:54.680 --> 00:05:56.970
in their binary size
with just this stuff.

00:05:59.660 --> 00:06:03.620
You can then build your
application into modules.

00:06:03.620 --> 00:06:07.280
Remember, Instant Apps
support multiple entry points.

00:06:07.280 --> 00:06:11.090
So having modules that support
each of these entry points,

00:06:11.090 --> 00:06:13.760
allows us to only
load the module that's

00:06:13.760 --> 00:06:15.750
needed for a given entry point.

00:06:15.750 --> 00:06:17.990
With the ability to
load more as the user

00:06:17.990 --> 00:06:19.965
goes through different
flows within your app.

00:06:23.530 --> 00:06:27.010
So to quickly summarize,
three key principles

00:06:27.010 --> 00:06:30.690
to keep in mind while you
build your Instant App.

00:06:30.690 --> 00:06:33.970
Discoverability with
Android App Links,

00:06:33.970 --> 00:06:36.040
privacy and security
with the runtime

00:06:36.040 --> 00:06:41.120
permissions API, and performance
with small modular binaries.

00:06:45.360 --> 00:06:48.930
Now we worked with
over 50 Early Access

00:06:48.930 --> 00:06:52.890
partners, who really helped
us just define our developer

00:06:52.890 --> 00:06:54.750
experience.

00:06:54.750 --> 00:06:58.410
Their level of engagement and
their extremely valuable input

00:06:58.410 --> 00:07:01.890
is reflected in the quality of
all components of our developer

00:07:01.890 --> 00:07:03.200
experience.

00:07:03.200 --> 00:07:05.262
I'll walk you through
a few of these.

00:07:05.262 --> 00:07:09.150
I'll cover development tools,
some new constructs that we've

00:07:09.150 --> 00:07:12.720
introduced, the project
structure, as well

00:07:12.720 --> 00:07:14.480
as the publishing interface.

00:07:17.980 --> 00:07:20.870
Many of you develop
apps in Android Studio.

00:07:20.870 --> 00:07:25.480
Android Studio 3.0 comes
with Instant App support out

00:07:25.480 --> 00:07:26.980
of the box.

00:07:26.980 --> 00:07:30.790
You can install the Instant
Apps SDK through SDK manager.

00:07:30.790 --> 00:07:35.680
And then you can build, run,
test, and debug Instant Apps

00:07:35.680 --> 00:07:38.560
directly from the IDE.

00:07:38.560 --> 00:07:42.670
You can also easily add URL
entry points with the App Links

00:07:42.670 --> 00:07:47.830
Assistant that's built
directly in Android Studio.

00:07:47.830 --> 00:07:50.260
Apart from on-device
support, we've

00:07:50.260 --> 00:07:53.080
also enabled emulator
support for you

00:07:53.080 --> 00:07:55.772
to do fast and easy
local development.

00:07:59.080 --> 00:08:02.780
We've introduced a new construct
called the feature module.

00:08:02.780 --> 00:08:05.620
The feature module is
very similar to a library

00:08:05.620 --> 00:08:10.005
module in that it contains
code resources and a manifest.

00:08:10.005 --> 00:08:16.150
But feature modules build as
APKs for your Instant App.

00:08:16.150 --> 00:08:18.100
Our Gradle plugin
will automatically

00:08:18.100 --> 00:08:21.070
build them as libraries
for your installable app.

00:08:21.070 --> 00:08:25.040
So you can use the
exact same code base.

00:08:25.040 --> 00:08:28.430
Now Instant Apps are built
across multiple features.

00:08:28.430 --> 00:08:30.740
So we've also
introduced a Instant App

00:08:30.740 --> 00:08:36.049
module that builds the container
to hold your feature APKs.

00:08:36.049 --> 00:08:36.870
This is a zip file.

00:08:40.659 --> 00:08:47.230
Now, installable apps are built
as a single binary, the APK.

00:08:47.230 --> 00:08:52.040
So the project structure can
be done in a variety of ways.

00:08:52.040 --> 00:08:54.820
Many of us have worked on
apps that started small,

00:08:54.820 --> 00:08:57.260
and then it ended up being
large, monolithic code

00:08:57.260 --> 00:09:01.090
bases under a single module.

00:09:01.090 --> 00:09:03.790
I've always dreamed of the
perfect modular structure.

00:09:03.790 --> 00:09:05.470
And sometimes I've
done the work,

00:09:05.470 --> 00:09:09.760
but there's limited benefit
to the actual binary size.

00:09:09.760 --> 00:09:16.250
Now with Instant Apps, we need
to load binaries on demand.

00:09:16.250 --> 00:09:18.430
This is where our
feature module comes in.

00:09:18.430 --> 00:09:22.060
It allows you to extract
out specific features

00:09:22.060 --> 00:09:24.190
into their own modules.

00:09:24.190 --> 00:09:28.810
So you can set up your project
to take the common code

00:09:28.810 --> 00:09:31.900
from your existing
application module,

00:09:31.900 --> 00:09:34.150
and put it in a
base feature module.

00:09:34.150 --> 00:09:36.290
The base module
is always loaded.

00:09:36.290 --> 00:09:38.680
And then you can extract
out specific features

00:09:38.680 --> 00:09:40.480
into their own modules.

00:09:40.480 --> 00:09:43.120
That way, for a
given entry point,

00:09:43.120 --> 00:09:46.870
we only load the base module
and the corresponding feature

00:09:46.870 --> 00:09:48.850
module.

00:09:48.850 --> 00:09:50.650
As the user goes
through different flows

00:09:50.650 --> 00:09:53.920
within your app, we just load
more of the feature modules

00:09:53.920 --> 00:09:56.900
within the same
application context.

00:09:56.900 --> 00:09:59.710
So now, you can have
a project structure

00:09:59.710 --> 00:10:03.550
that builds both your Instant
App and your installable app

00:10:03.550 --> 00:10:06.520
directly from within a
single Studio project.

00:10:12.080 --> 00:10:14.910
Finally, when your
Instant App is ready,

00:10:14.910 --> 00:10:18.650
you can use the Google Play
console for publishing.

00:10:18.650 --> 00:10:21.300
We've been enabled 3
publishing tracks--

00:10:21.300 --> 00:10:24.020
development, pre-release,
and production-- for you

00:10:24.020 --> 00:10:26.810
to roll out your Instant
App in a phased manner.

00:10:29.690 --> 00:10:34.040
So to quickly summarize
our developer experience,

00:10:34.040 --> 00:10:39.650
you can set up Android Studio
3.0 with the Instant Apps SDK.

00:10:39.650 --> 00:10:42.050
You can then introduce
feature modules,

00:10:42.050 --> 00:10:44.750
and refactor your app
into these feature modules

00:10:44.750 --> 00:10:48.770
such that we have a feature
module for each entry point.

00:10:48.770 --> 00:10:50.510
You can create a
project structure

00:10:50.510 --> 00:10:52.330
that allows you to
build both your Instant

00:10:52.330 --> 00:10:56.930
App and your installable app
off the same Studio project.

00:10:56.930 --> 00:10:58.800
And finally, when
your app is ready,

00:10:58.800 --> 00:11:01.130
you can publish to the
Google Play console.

00:11:04.840 --> 00:11:08.130
So let's get our hands
dirty, and try this out.

00:11:08.130 --> 00:11:12.260
At this time, I'd like to invite
on stage, Anirudh Deawani.

00:11:12.260 --> 00:11:15.510
Anirudh is our lead developer
advocate for Instant Apps,

00:11:15.510 --> 00:11:17.760
and has worked with
many of our partners

00:11:17.760 --> 00:11:20.080
to enable their Instant
Apps experience.

00:11:20.080 --> 00:11:20.840
Welcome, Anirudh.

00:11:20.840 --> 00:11:22.340
ANIRUDH DEAWANI:
Thank you, Shobana.

00:11:22.340 --> 00:11:30.585
[APPLAUSE]

00:11:30.585 --> 00:11:32.040
SHOBANA RAVI: Next
slide, please.

00:11:35.440 --> 00:11:36.400
Still with the slides.

00:11:39.710 --> 00:11:41.660
Still with the slides.

00:11:41.660 --> 00:11:44.048
Can we switch back
to the slides?

00:11:44.048 --> 00:11:48.830
Sorry, so Anirudh has
an app called Banjara.

00:11:48.830 --> 00:11:52.230
Banjara is a Hindi
word for nomad.

00:11:52.230 --> 00:11:55.010
The Banjara app is a
tourist attractions app

00:11:55.010 --> 00:11:57.980
that gives you a list of
attractions around you.

00:11:57.980 --> 00:12:03.590
And for any given attraction,
it gives you details.

00:12:03.590 --> 00:12:06.950
Now the Banjara app is
structured this way.

00:12:06.950 --> 00:12:11.400
It has a top-level application
module with two activities--

00:12:11.400 --> 00:12:14.510
one for the attractions list,
and one for the details.

00:12:14.510 --> 00:12:17.210
Each of these activities
has their own fragments.

00:12:17.210 --> 00:12:20.390
There's some common code,
such as integration Glide,

00:12:20.390 --> 00:12:22.460
Maps, some utilities.

00:12:22.460 --> 00:12:27.560
The app also uses the runtime
permissions API for location.

00:12:27.560 --> 00:12:33.440
Now, today we'll work on
making Banjara Instant.

00:12:33.440 --> 00:12:36.290
So the first thing
to consider is

00:12:36.290 --> 00:12:39.980
what are the URL entry points
into Banjara that makes sense?

00:12:39.980 --> 00:12:44.480
We have two entry points, one
the list, and one the details.

00:12:44.480 --> 00:12:47.400
We want to make both
of them discoverable.

00:12:47.400 --> 00:12:50.420
So we'd add two
URL entry points.

00:12:50.420 --> 00:12:54.830
One for the attraction's
list, and one for the details.

00:12:54.830 --> 00:12:57.710
We'll then refactor the
existing application code

00:12:57.710 --> 00:13:00.560
into two feature modules.

00:13:00.560 --> 00:13:04.010
The base feature module would
contain the attraction's list

00:13:04.010 --> 00:13:05.660
and the common code.

00:13:05.660 --> 00:13:07.610
And the details feature
module would then

00:13:07.610 --> 00:13:09.260
have the details experience.

00:13:09.260 --> 00:13:11.390
Remember, the base
module is always loaded.

00:13:11.390 --> 00:13:13.310
And so the details
feature module

00:13:13.310 --> 00:13:17.070
only needs to have
the additional code.

00:13:17.070 --> 00:13:20.090
So this is our target
project structure.

00:13:20.090 --> 00:13:23.400
We'll get to it in three steps.

00:13:23.400 --> 00:13:26.660
Step one, we'll introduce
URL entry points

00:13:26.660 --> 00:13:28.940
into our application.

00:13:28.940 --> 00:13:32.090
We'll do this with the
App Links Assistant.

00:13:32.090 --> 00:13:35.780
Step two, we'll take our
existing application module,

00:13:35.780 --> 00:13:38.390
and make it a single
base feature module.

00:13:38.390 --> 00:13:41.610
All the code is encapsulated
within the feature module.

00:13:41.610 --> 00:13:44.990
We can then introduce an Instant
App module and an application

00:13:44.990 --> 00:13:49.580
module to build off this
base feature module.

00:13:49.580 --> 00:13:54.200
At this point, we'll have our
first functional Instant App.

00:13:54.200 --> 00:13:58.430
Then step three, we'll extract
out the details experience

00:13:58.430 --> 00:14:02.910
from the base future module,
and make it it's own module.

00:14:02.910 --> 00:14:05.270
So we've reach our
target project structure

00:14:05.270 --> 00:14:06.930
in three steps.

00:14:06.930 --> 00:14:09.840
Let's try this out.

00:14:09.840 --> 00:14:12.390
Step one, Anirudh,
if we're ready,

00:14:12.390 --> 00:14:14.190
can you show us our
project structure?

00:14:14.190 --> 00:14:15.840
And then walk us
through this step.

00:14:15.840 --> 00:14:17.940
ANIRUDH DEAWANI: Absolutely.

00:14:17.940 --> 00:14:21.060
So before we begin, let's make
sure we have the Instant App

00:14:21.060 --> 00:14:23.220
Development SDK installed.

00:14:23.220 --> 00:14:25.170
So I have the SDK manager open.

00:14:25.170 --> 00:14:28.980
And here you see, the
development SDK is installed.

00:14:28.980 --> 00:14:31.990
Just going to click OK.

00:14:31.990 --> 00:14:34.110
All right, so now
let's just set up

00:14:34.110 --> 00:14:36.330
URL entry points for our app.

00:14:36.330 --> 00:14:41.640
This is done by adding intent
filters to your manifest.

00:14:41.640 --> 00:14:43.140
To help us with
the process, we are

00:14:43.140 --> 00:14:45.850
going to use the Android
App Links Assistant tool.

00:14:49.460 --> 00:14:51.676
And there, it opens as
a panel on the right,

00:14:51.676 --> 00:14:53.050
and will guide us
for the process

00:14:53.050 --> 00:14:55.910
of creating our entry points.

00:14:55.910 --> 00:14:59.220
The first thing we want
to do is map some URLs

00:14:59.220 --> 00:15:02.270
to our activities.

00:15:02.270 --> 00:15:06.010
So let's set up some mappings.

00:15:06.010 --> 00:15:10.690
So I'm going to use
Banjaraapp.com as my host.

00:15:10.690 --> 00:15:15.388
And then setup main part from
my attractions list activity.

00:15:18.320 --> 00:15:21.001
I'll repeat the step for HTTPS.

00:15:25.920 --> 00:15:28.330
All right, now that we
have the main part set up,

00:15:28.330 --> 00:15:32.072
we also will now set up the
part for our details activity.

00:15:34.730 --> 00:15:37.100
So again, the same host.

00:15:37.100 --> 00:15:40.090
I use details, and
choose details activity

00:15:40.090 --> 00:15:42.940
from the drop down box.

00:15:42.940 --> 00:15:46.150
And then again, repeat
the same step for HTTPS.

00:15:53.200 --> 00:15:55.940
And there, we have
our mapping set now.

00:15:55.940 --> 00:15:57.440
There's a Preview
window here, which

00:15:57.440 --> 00:15:59.930
shows the manifest and
the changes that we just

00:15:59.930 --> 00:16:03.800
did using the mapping editor.

00:16:03.800 --> 00:16:06.770
All right, so the next
step is then to add logic

00:16:06.770 --> 00:16:08.055
to handle our intent.

00:16:08.055 --> 00:16:10.430
This is already done, because
we are using existing code.

00:16:13.260 --> 00:16:16.700
The next step is to create
a digital access link file.

00:16:16.700 --> 00:16:20.520
And then associate our
website with our app package.

00:16:20.520 --> 00:16:22.080
So I'm going to
bring up the tool.

00:16:22.080 --> 00:16:24.200
A couple of details, here.

00:16:24.200 --> 00:16:28.940
You enter your site domain,
you enter your application ID,

00:16:28.940 --> 00:16:30.585
and then you choose
your sign-in key.

00:16:30.585 --> 00:16:32.391
Now, I'm going to
use the debug key.

00:16:32.391 --> 00:16:33.890
But when you
productionize your app,

00:16:33.890 --> 00:16:37.268
you'll choose your
release key, here.

00:16:37.268 --> 00:16:39.260
I'll now click on Digital--

00:16:39.260 --> 00:16:42.080
to generate my digital
access link file.

00:16:42.080 --> 00:16:47.300
Now this file basically
tells us that our app is now

00:16:47.300 --> 00:16:49.010
mapped to our domain.

00:16:49.010 --> 00:16:53.750
This is very important to
claim ownership of your URLs.

00:16:53.750 --> 00:16:56.660
This file now needs to be
uploaded to a specific location

00:16:56.660 --> 00:16:57.980
on your server.

00:16:57.980 --> 00:16:59.710
The location is here.

00:16:59.710 --> 00:17:01.730
Once you are done
uploading the file,

00:17:01.730 --> 00:17:03.190
we'll click link and verify.

00:17:03.190 --> 00:17:06.020
And this will make the
association between your app

00:17:06.020 --> 00:17:08.489
and the domain.

00:17:08.489 --> 00:17:11.510
All right, back to you, Shobana.

00:17:11.510 --> 00:17:12.470
SHOBANA RAVI: OK.

00:17:12.470 --> 00:17:14.420
So we're done with step one.

00:17:14.420 --> 00:17:18.380
And we now have two experiences
within our app discoverable

00:17:18.380 --> 00:17:19.819
through URLs.

00:17:19.819 --> 00:17:21.740
Let's move on to step two.

00:17:21.740 --> 00:17:24.650
We'll now take our existing
application module,

00:17:24.650 --> 00:17:27.210
and then put it in a
base feature module.

00:17:27.210 --> 00:17:31.520
So we'd have to rename our
application to be a feature.

00:17:31.520 --> 00:17:35.140
We'll also change the Gradle
file to not be com Android--

00:17:35.140 --> 00:17:38.900
com.Android.application and
make it com.Android.feature.

00:17:38.900 --> 00:17:41.480
Now, since all the code will
be within the feature module,

00:17:41.480 --> 00:17:44.240
we can now introduce
an application module

00:17:44.240 --> 00:17:47.180
and an Instant App module to
build off the same feature

00:17:47.180 --> 00:17:48.080
module.

00:17:48.080 --> 00:17:50.810
Each of them don't need any code
because they're building off

00:17:50.810 --> 00:17:52.610
the existing model.

00:17:52.610 --> 00:17:53.570
Let's try that.

00:17:53.570 --> 00:17:54.720
ANIRUDH DEAWANI: Sure.

00:17:54.720 --> 00:17:56.810
So as you can see,
on the left side,

00:17:56.810 --> 00:17:59.110
my project currently
has one module.

00:17:59.110 --> 00:18:04.260
That's the Banjara-base, and
this is an application model.

00:18:04.260 --> 00:18:06.380
So what we are now trying
to do is convert this

00:18:06.380 --> 00:18:08.930
into a feature model so
all our code and resources

00:18:08.930 --> 00:18:10.250
are in this feature.

00:18:10.250 --> 00:18:12.960
And then create two
new top-level modules,

00:18:12.960 --> 00:18:16.010
an application model
and an instant module.

00:18:16.010 --> 00:18:17.810
And then we'll
include the feature

00:18:17.810 --> 00:18:22.440
as a dependency
for those modules.

00:18:22.440 --> 00:18:25.680
So I have my build Gradle file
for my Banjara base module

00:18:25.680 --> 00:18:26.180
open.

00:18:26.180 --> 00:18:29.480
It currently says
com.Android.application.

00:18:29.480 --> 00:18:32.332
I'm going to change this
to com.Android.feature,

00:18:32.332 --> 00:18:33.290
this is the new plugin.

00:18:36.940 --> 00:18:39.800
Now, all modular apps
using the feature plugin

00:18:39.800 --> 00:18:42.790
are organized around
the single base module.

00:18:42.790 --> 00:18:45.130
Now, since this is
our only module,

00:18:45.130 --> 00:18:48.406
we'll tell the Gradle build to's
that this is our base module.

00:18:48.406 --> 00:18:50.530
We are going to do this by
setting the base feature

00:18:50.530 --> 00:18:51.030
property.

00:18:58.290 --> 00:19:01.430
All right, now that we have
our base module, we'll create--

00:19:01.430 --> 00:19:03.590
let's first create the
application module.

00:19:07.160 --> 00:19:09.480
So I'll select New Module.

00:19:09.480 --> 00:19:10.540
Choose Phone and Tablet.

00:19:13.170 --> 00:19:14.810
And let's call this Banjara App.

00:19:21.089 --> 00:19:22.810
I'm just going to
choose a package

00:19:22.810 --> 00:19:24.730
name that's consistent
with my other modules.

00:19:29.740 --> 00:19:33.380
And I'll select Add No
Activity, because for now all

00:19:33.380 --> 00:19:36.550
our activities and all our
code is in the feature module.

00:19:45.940 --> 00:19:47.950
All right, the module
is now created.

00:19:52.410 --> 00:19:55.060
I'll remove the path sources
and resources for now.

00:20:02.740 --> 00:20:05.430
And then, in my
application manifest file,

00:20:05.430 --> 00:20:07.360
I'll remove the application
tag, because this

00:20:07.360 --> 00:20:09.320
is going to get merged
from our feature module.

00:20:18.920 --> 00:20:21.670
So now, let's look at the Gradle
file for our newly created

00:20:21.670 --> 00:20:23.000
application module.

00:20:23.000 --> 00:20:27.400
So the first thing I will do
is use the same compile SDK

00:20:27.400 --> 00:20:29.990
and build to version that I'm
using in my feature module.

00:20:37.320 --> 00:20:41.030
Then remove the
test dependencies.

00:20:41.030 --> 00:20:43.580
And now, we want to
include our feature module

00:20:43.580 --> 00:20:44.750
in our application module.

00:20:56.280 --> 00:20:58.630
So right, now we have the
feature module included.

00:20:58.630 --> 00:21:00.730
There's one final
thing we need to do.

00:21:00.730 --> 00:21:06.550
So let's head over to our
base build Gradle file again.

00:21:06.550 --> 00:21:09.910
Now the base module is
a very important module.

00:21:09.910 --> 00:21:12.130
The Gradle build to's
look into the base model

00:21:12.130 --> 00:21:13.840
to figure out all
of the features

00:21:13.840 --> 00:21:15.970
and the application
in your project.

00:21:15.970 --> 00:21:18.870
So we need to make our base
model aware of our application

00:21:18.870 --> 00:21:19.510
model.

00:21:19.510 --> 00:21:22.030
This will help with the
manifest merging process,

00:21:22.030 --> 00:21:26.820
and will pull up the application
ID to package the Instant App.

00:21:26.820 --> 00:21:29.979
So this is done by using the
application configuration.

00:21:44.170 --> 00:21:45.420
All right, this is synced now.

00:21:50.820 --> 00:21:51.810
Let's try to compile.

00:22:04.520 --> 00:22:08.190
I already have an emulator
running, and let's see,

00:22:08.190 --> 00:22:09.350
we got a little error here.

00:22:17.799 --> 00:22:19.290
I'll clean the project.

00:22:41.180 --> 00:22:43.650
All right, the build
is not successful.

00:22:43.650 --> 00:22:48.140
So I have an emulator,
here, running M. So

00:22:48.140 --> 00:22:51.920
let's try to run our app,
which is now using a feature

00:22:51.920 --> 00:22:56.690
module, which produces a feature
APK, which produces a library

00:22:56.690 --> 00:22:58.160
file for our app.

00:23:01.710 --> 00:23:06.410
So I'd select the app
configuration, and then run.

00:23:21.370 --> 00:23:23.170
There, our app is now running.

00:23:23.170 --> 00:23:26.020
It uses runtime
permissions for location.

00:23:26.020 --> 00:23:29.902
And this is our list activity
for a list of attractions.

00:23:32.680 --> 00:23:35.300
I'll bring up one of the details
for one of the attractions,

00:23:35.300 --> 00:23:37.288
here.

00:23:37.288 --> 00:23:39.840
All right, so now this
is an installed app,

00:23:39.840 --> 00:23:42.750
because we used com.Drive
Android.application.

00:23:42.750 --> 00:23:44.180
So I'll uninstall this app.

00:23:48.140 --> 00:23:49.920
And we'll now build
an Instant App.

00:23:56.220 --> 00:23:58.940
So to do that, I will
create a new module

00:23:58.940 --> 00:24:00.402
and choose Instant App.

00:24:05.130 --> 00:24:07.431
Let's call this
Banjara-InstantApp.

00:24:14.980 --> 00:24:16.180
The module is created.

00:24:16.180 --> 00:24:19.240
As you can see, on the left
from the project structure,

00:24:19.240 --> 00:24:21.010
this is a very
lightweight module.

00:24:21.010 --> 00:24:23.860
There is no source,
there are no resources.

00:24:23.860 --> 00:24:25.990
It just has a
build.Gradle file and it's

00:24:25.990 --> 00:24:29.230
going to build just a container
zip for our feature APKs.

00:24:32.950 --> 00:24:38.320
So using the same compile
and build tools as version.

00:24:38.320 --> 00:24:41.890
And now, just as we did
for our application model,

00:24:41.890 --> 00:24:44.738
I will include the feature
model as a dependency.

00:24:59.190 --> 00:25:02.230
Now, let's try to
build our Instant App.

00:25:16.170 --> 00:25:18.300
All right, the
compilation is successful.

00:25:18.300 --> 00:25:20.314
Now, before, we
run this app, let's

00:25:20.314 --> 00:25:22.480
take a look at our run
configuration for the Instant

00:25:22.480 --> 00:25:22.980
App.

00:25:28.050 --> 00:25:32.040
A habit here, as you can see
in the launch options here.

00:25:32.040 --> 00:25:34.860
Instead of using an activity,
this is now using a URL.

00:25:37.620 --> 00:25:39.420
So let's switch it to
the main, which maps

00:25:39.420 --> 00:25:41.951
to our list of attractions.

00:25:44.900 --> 00:25:45.840
Apply.

00:25:45.840 --> 00:25:47.280
OK.

00:25:47.280 --> 00:25:49.370
And now, let's run
our first Instant App.

00:26:00.170 --> 00:26:03.140
So this may take some
time for the first time,

00:26:03.140 --> 00:26:04.460
when you try to run this.

00:26:04.460 --> 00:26:06.230
Because it's now
setting up our device,

00:26:06.230 --> 00:26:09.260
it's setting up our emulator
for running Instant Apps.

00:26:12.010 --> 00:26:13.570
Now our Instant App is running.

00:26:13.570 --> 00:26:15.670
It uses the same runtime
permission model,

00:26:15.670 --> 00:26:19.080
we didn't make any
changes to the code yet.

00:26:19.080 --> 00:26:21.160
We have a list of attractions.

00:26:21.160 --> 00:26:24.160
And then I bring
up an attraction

00:26:24.160 --> 00:26:27.600
from the details activity.

00:26:27.600 --> 00:26:28.810
So before I give it back to--

00:26:28.810 --> 00:26:33.660
[APPLAUSE]

00:26:33.660 --> 00:26:36.027
Thank you.

00:26:36.027 --> 00:26:37.860
Before I hand it over
back to Shobana, let's

00:26:37.860 --> 00:26:39.510
quickly look at
our build artifact

00:26:39.510 --> 00:26:42.280
from the Instant App project.

00:26:42.280 --> 00:26:46.020
So here, as you can
see, this is a zip file.

00:26:46.020 --> 00:26:48.795
I'm going to use the APK
analyser to inspect the zip

00:26:48.795 --> 00:26:50.400
file.

00:26:50.400 --> 00:26:53.700
In the zip file, you can
see, I have one feature APK.

00:26:53.700 --> 00:26:56.520
It's our base APK.

00:26:56.520 --> 00:26:59.370
I can look down, and then drill
down and look at my resource

00:26:59.370 --> 00:27:02.160
usage using the APK analyzer.

00:27:02.160 --> 00:27:04.397
All right, back to you, Shobana.

00:27:04.397 --> 00:27:05.230
SHOBANA RAVI: Great.

00:27:05.230 --> 00:27:07.920
So we have our first
functional Instant App.

00:27:07.920 --> 00:27:10.360
10 minutes.

00:27:10.360 --> 00:27:13.770
So now, let's move
on to step three.

00:27:13.770 --> 00:27:16.230
We're going to extract
out the details experience

00:27:16.230 --> 00:27:19.170
into it's own feature module.

00:27:19.170 --> 00:27:21.720
We're doing this by introducing
a new feature module,

00:27:21.720 --> 00:27:25.140
and just refactoring out
of our existing base module

00:27:25.140 --> 00:27:26.520
into that feature module.

00:27:26.520 --> 00:27:28.290
We'll then have to
update the application

00:27:28.290 --> 00:27:30.030
module and the
Instant App module

00:27:30.030 --> 00:27:32.940
to now build from
two feature modules.

00:27:32.940 --> 00:27:35.370
So Anirudh can show
us how to do that.

00:27:43.597 --> 00:27:45.930
ANIRUDH DEAWANI: OK, let's
review our project structure.

00:27:45.930 --> 00:27:47.580
Right now, we have three models.

00:27:47.580 --> 00:27:49.890
Which is one is a feature
module, Banjar base.

00:27:49.890 --> 00:27:51.900
And then one application model.

00:27:51.900 --> 00:27:55.470
And then Instant App module
to wrap the feature model.

00:27:55.470 --> 00:27:57.720
So let's create a
new feature model

00:27:57.720 --> 00:28:00.870
and defactor some code
from our base model.

00:28:04.110 --> 00:28:06.270
So I now use the new
feature model template.

00:28:09.320 --> 00:28:10.850
And call this Banjara details.

00:28:17.890 --> 00:28:19.690
Following the same
project structure,

00:28:19.690 --> 00:28:21.760
and the package naming scheme.

00:28:21.760 --> 00:28:26.410
Now remember, feature modules
are built just like libraries.

00:28:26.410 --> 00:28:28.660
So they need to have a
different package name,

00:28:28.660 --> 00:28:30.670
it cannot be the same as
your application name.

00:28:36.220 --> 00:28:37.585
Again, no activity to add.

00:28:37.585 --> 00:28:39.520
We'll refactor
existing activities.

00:28:48.270 --> 00:28:51.660
All right, our details
model is now ready.

00:28:51.660 --> 00:28:54.240
Let's look at the
build Gradle file.

00:28:54.240 --> 00:28:57.500
So it automatically applied the
plug-in com.Android.feature.

00:29:00.110 --> 00:29:01.410
Let's switch to the build to's.

00:29:16.980 --> 00:29:18.920
Now, when we
created this module,

00:29:18.920 --> 00:29:22.560
Android Studio automatically
added a dependency.

00:29:22.560 --> 00:29:26.400
It says a dependency
to Banjara base.

00:29:26.400 --> 00:29:29.660
Remember what we said about
modules there, the base module.

00:29:29.660 --> 00:29:31.676
That all the feature
models are organized

00:29:31.676 --> 00:29:33.300
around the single
base module, and they

00:29:33.300 --> 00:29:35.490
need to extend the base module.

00:29:35.490 --> 00:29:38.280
So because we already
have a base model,

00:29:38.280 --> 00:29:41.310
Studio automatically applied the
dependency to our base module.

00:29:45.120 --> 00:29:48.670
And let's take a look at
our Gralde file for our base

00:29:48.670 --> 00:29:49.830
module.

00:29:49.830 --> 00:29:52.290
Now you remember, we added
the application configuration,

00:29:52.290 --> 00:29:55.470
here, to tell our base
module about our app.

00:29:55.470 --> 00:29:59.730
So it needs to pull
down the package ID.

00:29:59.730 --> 00:30:01.650
When we created the
new details module,

00:30:01.650 --> 00:30:05.130
Android Studio also added
a feature configuration,

00:30:05.130 --> 00:30:08.310
which tells our base module
about the other feature models

00:30:08.310 --> 00:30:09.570
in our project structure.

00:30:09.570 --> 00:30:11.820
This is very important
for manifest merging

00:30:11.820 --> 00:30:12.770
and the build process.

00:30:18.500 --> 00:30:22.250
All right, so now we have
two feature models created.

00:30:22.250 --> 00:30:25.130
But we need to go back to our
application and Instant App

00:30:25.130 --> 00:30:28.021
and include the new details
module in the build.

00:30:35.890 --> 00:30:38.410
I'm in my application right now.

00:30:38.410 --> 00:30:40.150
I'll add the details
module, here.

00:30:43.090 --> 00:30:45.392
And then the same
for my Instant App.

00:30:57.950 --> 00:31:01.040
All right, now that all the
dependencies have been set up,

00:31:01.040 --> 00:31:04.060
let's actually refactor some
code into the details module.

00:31:14.850 --> 00:31:18.120
So before we begin, I'll
create a package, where I

00:31:18.120 --> 00:31:19.605
need to place the new classes.

00:31:31.770 --> 00:31:33.590
I'll use the package
name UI, this

00:31:33.590 --> 00:31:35.580
is where our classes
are in the base module.

00:31:40.270 --> 00:31:43.750
OK, I'm going to remove
the path sources, again.

00:31:51.110 --> 00:31:55.360
All right, now let's actually
go and get our classes

00:31:55.360 --> 00:31:56.960
that we need to refactor.

00:31:56.960 --> 00:31:59.420
So we'll move the details
activity and the details

00:31:59.420 --> 00:32:01.281
fragment into the new module.

00:32:14.560 --> 00:32:16.630
All right, the new classes,
the details classes,

00:32:16.630 --> 00:32:20.530
are now on our details module.

00:32:20.530 --> 00:32:22.900
We also need to move
the activity declaration

00:32:22.900 --> 00:32:25.480
from the manifest file
of the base module,

00:32:25.480 --> 00:32:26.960
where the classes
were previously.

00:32:26.960 --> 00:32:29.320
And bring that, the
activity was previously,

00:32:29.320 --> 00:32:31.120
and then bring that
to our feature module.

00:32:36.350 --> 00:32:38.655
So this is my details activity.

00:32:45.930 --> 00:32:49.560
Let's add it to our manifest
file for our details module.

00:32:55.380 --> 00:32:57.160
We'll just create
an application tag

00:32:57.160 --> 00:33:01.258
to put the activities under it.

00:33:01.258 --> 00:33:04.660
And there, let's now
compile the project.

00:33:15.792 --> 00:33:19.000
All right, project compiled.

00:33:19.000 --> 00:33:21.310
Now before we run this,
let's quickly inspect

00:33:21.310 --> 00:33:24.550
the container file again.

00:33:24.550 --> 00:33:26.860
In my Banjara
Instant App module,

00:33:26.860 --> 00:33:31.070
it'll go to build outputs,
and my zip file is here.

00:33:31.070 --> 00:33:33.340
Now, when I inspect
this using APK analyzer,

00:33:33.340 --> 00:33:35.680
I see now two feature APKs--

00:33:35.680 --> 00:33:38.300
my base feature APK and
my details feature APK.

00:33:42.150 --> 00:33:45.940
Now lets use our Instant App
run configuration to run this.

00:34:12.110 --> 00:34:17.381
And my app with two
feature APKs is running.

00:34:17.381 --> 00:34:19.271
[APPLAUSE]

00:34:19.271 --> 00:34:19.771
Thank you.

00:34:23.130 --> 00:34:25.380
I'll bring up an attraction.

00:34:25.380 --> 00:34:27.659
Now this attraction
details, were

00:34:27.659 --> 00:34:30.570
loaded from a different APK.

00:34:30.570 --> 00:34:33.243
And before I hand
it over to Shobana,

00:34:33.243 --> 00:34:35.159
I just want to show you
in the launcher, here,

00:34:35.159 --> 00:34:37.860
we don't have the Banjara
app installed anymore,

00:34:37.860 --> 00:34:40.380
because we were running
it as an Instant App.

00:34:40.380 --> 00:34:42.389
But if we head over
to the recents,

00:34:42.389 --> 00:34:44.686
we can see our
Banjara app running.

00:34:44.686 --> 00:34:48.360
All right, back to you Shobana.

00:34:48.360 --> 00:34:49.726
SHOBANA RAVI: Thank you.

00:34:49.726 --> 00:34:54.610
[APPLAUSE]

00:34:54.610 --> 00:34:56.010
Thank you.

00:34:56.010 --> 00:34:58.360
So just to quickly
summarize, how

00:34:58.360 --> 00:35:00.310
did we make Banjara Instant.

00:35:00.310 --> 00:35:03.370
We enabled URL entry
points into our app.

00:35:03.370 --> 00:35:07.240
We then created a base feature
module with existing code.

00:35:07.240 --> 00:35:10.210
And we extracted features
out of the base module

00:35:10.210 --> 00:35:12.490
into their own feature module.

00:35:12.490 --> 00:35:15.760
At the end, we had a
single Studio project

00:35:15.760 --> 00:35:17.470
that you could build
both the Instant

00:35:17.470 --> 00:35:20.730
App and the installable app.

00:35:20.730 --> 00:35:23.880
Now, this was a
simple sample app.

00:35:23.880 --> 00:35:26.430
It's likely that you'll take a
little longer than 15 minutes

00:35:26.430 --> 00:35:30.600
to make your own Instant App
for a real world application.

00:35:30.600 --> 00:35:32.190
We've heard from
many of our partners

00:35:32.190 --> 00:35:34.260
as to how long it took.

00:35:34.260 --> 00:35:38.070
And we found that it's typical
to take four to six weeks

00:35:38.070 --> 00:35:40.050
to build your Instant App.

00:35:40.050 --> 00:35:42.690
You'll spend the first
part of that thinking

00:35:42.690 --> 00:35:44.700
through the product
experience that you want

00:35:44.700 --> 00:35:46.770
to build in your Instant App.

00:35:46.770 --> 00:35:50.490
Then identify the target
project structure that's

00:35:50.490 --> 00:35:52.980
perfect for your application.

00:35:52.980 --> 00:35:54.870
And then there's the
refactoring effort

00:35:54.870 --> 00:35:57.540
to put code inside your
base feature module,

00:35:57.540 --> 00:36:02.340
as well as into other
feature modules.

00:36:02.340 --> 00:36:04.770
And then you'll spend
some time trimming down

00:36:04.770 --> 00:36:10.470
each of these modules to be
light and small size so they

00:36:10.470 --> 00:36:12.250
can be downloaded
and run on the fly.

00:36:16.130 --> 00:36:20.210
We have 50 Instant
Apps live today.

00:36:20.210 --> 00:36:23.330
I see a few of our Early
Access partners over here.

00:36:23.330 --> 00:36:25.700
Thank you and congratulations.

00:36:25.700 --> 00:36:28.830
But we believe this
is just the beginning.

00:36:28.830 --> 00:36:32.220
We're very excited to see
what Instant Apps experiences

00:36:32.220 --> 00:36:35.240
you will build.

00:36:35.240 --> 00:36:37.220
But we're not done yet.

00:36:37.220 --> 00:36:40.700
In the coming weeks and months,
you'll see huge improvements

00:36:40.700 --> 00:36:42.860
to the developer experience.

00:36:42.860 --> 00:36:45.890
We're focused on
features that can

00:36:45.890 --> 00:36:50.900
enable additional
binary size reduction.

00:36:50.900 --> 00:36:52.880
That includes allowing
your app to be

00:36:52.880 --> 00:36:56.010
sliced along device
configurations, display

00:36:56.010 --> 00:36:58.250
densities.

00:36:58.250 --> 00:37:02.030
Allowing commonly used
libraries like app compact

00:37:02.030 --> 00:37:05.420
to be shared between
Instant Apps.

00:37:05.420 --> 00:37:08.930
And on the
compression techniques

00:37:08.930 --> 00:37:13.790
to reduce over the air
binary transmission.

00:37:13.790 --> 00:37:17.150
On the tooling side, we're
introducing a new factoring

00:37:17.150 --> 00:37:21.260
tool that will make it really
easy for you to modularize

00:37:21.260 --> 00:37:23.810
your code into features.

00:37:23.810 --> 00:37:26.690
Additionally, we're
expanding Instant Apps

00:37:26.690 --> 00:37:29.330
to more devices
and more countries

00:37:29.330 --> 00:37:32.780
to make sure your reach
reaches all of Android.

00:37:36.560 --> 00:37:38.880
Here's some resources
for you to get started.

00:37:38.880 --> 00:37:41.270
Our Instant Apps
web site has a lot

00:37:41.270 --> 00:37:43.930
of information around product.

00:37:43.930 --> 00:37:46.910
But especially, it has a
Getting Started guide for you

00:37:46.910 --> 00:37:51.470
to walk through the developer
experience by yourself.

00:37:51.470 --> 00:37:54.200
We're also in the
Instant Apps sandbox

00:37:54.200 --> 00:37:56.870
under Dome C, where
you can come by and see

00:37:56.870 --> 00:38:00.470
some demos of our Early Access
partners and their Instant Apps

00:38:00.470 --> 00:38:03.300
experience.

00:38:03.300 --> 00:38:05.070
Immediately after
this talk, we're

00:38:05.070 --> 00:38:08.550
going to have a fireside chat
with some of our Early Access

00:38:08.550 --> 00:38:11.520
partners so you can
hear from them what

00:38:11.520 --> 00:38:14.370
their experiences were
developing Instant Apps,

00:38:14.370 --> 00:38:19.650
and what benefits it's
brought to their applications.

00:38:19.650 --> 00:38:23.100
We hope this talk was useful in
jump starting your Instant App

00:38:23.100 --> 00:38:24.210
development.

00:38:24.210 --> 00:38:26.370
Thank you so much
for being here.

00:38:26.370 --> 00:38:31.320
[APPLAUSE]

00:38:31.320 --> 00:38:33.560
[MUSIC PLAYING]

