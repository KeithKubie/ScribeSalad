WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.341
 Android patterns for performance 

00:00:02.811 --> 00:00:06.112
 The biggest improvement your app can make is network performance 

00:00:06.112 --> 00:00:09.092
 Relates to the reduction of the absolute number of applications in progress. 

00:00:09.390 --> 00:00:11.880
 But instead of just avoiding syncing the entire data, 

00:00:11.880 --> 00:00:13.337
 How can you accomplish that exactly? 

00:00:13.337 --> 00:00:14.540
 My name is Colt McCannless. 

00:00:14.540 --> 00:00:17.300
 If you are looking for the best way to send orders in batches 

00:00:17.300 --> 00:00:19.200
 To reduce overall network traffic, 

00:00:19.200 --> 00:00:20.800
 Preposition is the solution. 

00:00:21.060 --> 00:00:22.160
 Think of it this way; 

00:00:22.160 --> 00:00:24.400
 Your application is applying for a specific piece of data, 

00:00:24.400 --> 00:00:28.230
 Then sometime in the future being asked for another part of the data, 

00:00:28.230 --> 00:00:29.940
 and so on. 

00:00:29.940 --> 00:00:33.590
 Each individual request has its own associated pressure. 

00:00:33.590 --> 00:00:37.470
 It may eventually lead to a strange pattern of wireless activation each time 

00:00:37.470 --> 00:00:38.770
 To make the request. 

00:00:39.530 --> 00:00:43.377
 Pre-assignment is to predict the type of data that may be contained in those future requests 

00:00:43.377 --> 00:00:46.850
 And capture all those data while there is an active wireless connection. 

00:00:47.190 --> 00:00:50.062
 It is useful here that every wireless request has some pressure 

00:00:50.062 --> 00:00:52.190
 In terms of the time it takes to activate the wireless connection 

00:00:52.190 --> 00:00:55.450
 And battery drain that occurs as a result of continued activation. 

00:00:56.030 --> 00:00:59.360
 Ability to package future orders together and do them now 

00:00:59.360 --> 00:01:01.490
 Means the ability to reduce those pressures 

00:01:01.490 --> 00:01:03.490
 Saving precious battery life. 

00:01:03.700 --> 00:01:06.320
 But prefabrication creates a difficult balancing problem. 

00:01:06.320 --> 00:01:07.960
 If prefetch is less than necessary, 

00:01:07.960 --> 00:01:10.380
 The result is that data transfer rates are not improved effectively. 

00:01:10.610 --> 00:01:12.170
 While prefabrication means too much 

00:01:12.170 --> 00:01:14.770
 The user will wait longer to get the results. 

00:01:15.120 --> 00:01:17.490
 This brings us to our simple question: 

00:01:17.490 --> 00:01:20.140
 How much data do you make up in advance? 

00:01:20.140 --> 00:01:23.510
 Well, the general rule states that on a 3G connection, 

00:01:23.510 --> 00:01:26.640
 Prefetch is good with about 1 megabyte to 5 megabytes of data. 

00:01:27.090 --> 00:01:28.680
 This is of course taking into account 

00:01:28.680 --> 00:01:31.660
 The data will be needed and used by the user. 

00:01:31.660 --> 00:01:33.290
 You can define this differently, 

00:01:33.290 --> 00:01:36.270
 Prefetch as much as the user may need the data 

00:01:36.270 --> 00:01:39.240
 In the next minute or two. 

00:01:39.460 --> 00:01:43.260
 But in fact, one of the most important things to improve is prefetch 

00:01:43.510 --> 00:01:46.080
 Is inevitably the speed of the device connection. 

00:01:46.300 --> 00:01:49.190
 For example, if the user is on a 4G connection, 

00:01:49.190 --> 00:01:52.020
 You may call and bring in 12 new photos, 

00:01:52.020 --> 00:01:54.850
 This takes the same time as pre-fetch 

00:01:54.850 --> 00:01:57.480
 For three images touch 2G. 

00:01:57.650 --> 00:01:59.386
 It is therefore an amendment to the prefetch code 

00:01:59.386 --> 00:02:01.570
 To take into account the quality of the user's connection 

00:02:01.570 --> 00:02:04.037
 It is the best way to make perfect bring cases. 

00:02:04.397 --> 00:02:07.980
 It should be noted that the easiest way to determine the status of the network 

00:02:07.980 --> 00:02:12.920
 Is simply calculating the time it takes to rewind a known piece of content after ordering it. 

00:02:12.920 --> 00:02:14.820
 And with a few simple calculations 

00:02:14.820 --> 00:02:17.020
 A practical research table of common network speeds, 

00:02:17.020 --> 00:02:20.000
 You can quickly determine which network type the user is connected to 

00:02:20.180 --> 00:02:22.640
 And the seizure of applications and applications respectively. 

00:02:22.950 --> 00:02:25.790
 It should also be noted that the greatest benefit here 

00:02:25.790 --> 00:02:28.170
 The execution of motions must be carried out 

00:02:28.170 --> 00:02:31.940
 Their release was delayed but was in the waiting cycle 

00:02:31.940 --> 00:02:33.130
 And future requests, 

00:02:33.130 --> 00:02:36.660
 Or pre-fetching into one active wireless connection window. 

00:02:37.030 --> 00:02:39.079
 And here wonderful things begin to happen. 

00:02:39.079 --> 00:02:42.058
 The good news is that you can update your app to use these styles 

00:02:42.058 --> 00:02:44.280
 Without having to write a huge amount of code. 

00:02:44.580 --> 00:02:47.700
 GCMNetworkManager is an API of Google Play services 

00:02:47.700 --> 00:02:49.890
 Which helps to schedule network-oriented tasks 

00:02:49.890 --> 00:02:51.400
 And manage the transmission in batches for you. 

00:02:51.400 --> 00:02:54.670
 This greatly facilitates the implementation of common patterns, 

00:02:54.670 --> 00:02:57.370
 Such as waiting to connect to the network and attempts to reconnect to the network 

00:02:57.370 --> 00:02:58.750
 And steady decline. 

00:02:58.750 --> 00:03:02.220
 All the wonderful things you need in one API interface are useful. 

00:03:02.496 --> 00:03:03.870
 When it comes to performance, 

00:03:03.870 --> 00:03:06.410
 You need all the APIs you can get 

00:03:06.410 --> 00:03:07.912
 The videos are also useful. 

00:03:07.912 --> 00:03:11.300
 Check out Android Performance Patterns content 

00:03:11.300 --> 00:03:13.900
 Do not miss joining the Google+ community as well. 

00:03:13.910 --> 00:03:16.160
 So keep calm, collect your code information 

00:03:16.160 --> 00:03:17.990
 Always remember that performance is important. 

