WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.969
&gt;&gt; ROGAL: Hi, everyone. So, my name is Adam
Rogal. And I'm a Developer Program Engineer

00:00:03.969 --> 00:00:11.990
at Google specifically for the AdWords API
along with everyone else in the room who is

00:00:11.990 --> 00:00:17.300
also either going to be a developer advocate
or a development program engineer. So, just

00:00:17.300 --> 00:00:22.550
to give you brief introduction about like
our job and what our core duties are. We try

00:00:22.550 --> 00:00:29.230
and help developers develop for our API. So,
that means writing code samples, writing documentation,

00:00:29.230 --> 00:00:33.460
writing client libraries, doing [INDISTINCT]
like these, and supporting our APIs through

00:00:33.460 --> 00:00:41.699
the forums and through email and phone calls.
&gt;&gt; Hey, Adam, can you use the mic? I'm sorry.

00:00:41.699 --> 00:00:44.530
&gt;&gt; ROGAL: Sure thing.
&gt;&gt; Thanks.

00:00:44.530 --> 00:00:53.330
&gt;&gt; ROGAL: Okay. So, what I'm going to be talking
about first today is Migrating from v13 to

00:00:53.330 --> 00:01:00.780
v2009. Just to show of hands, how many people
here have started migrating? Great, okay,

00:01:00.780 --> 00:01:07.200
so it looks like a few of you haven't. So
it should--this should be a good kind of introduction

00:01:07.200 --> 00:01:11.329
to it. But those of you who have, we're going
to reiterate on a few points and we'll have

00:01:11.329 --> 00:01:17.069
some best practices and, you know, as Aaron
(ph) said, if this seems all boring, there's

00:01:17.069 --> 00:01:25.479
Wi-Fi and you can start coding on your own
stuff or asking people in the back any questions.

00:01:25.479 --> 00:01:32.999
So first off is the timeline. And I'm sure
many of you have heard of this so far. But,

00:01:32.999 --> 00:01:38.990
there's going to be a sunset of our v13 services
on April 22nd 2010. So, what does this means?

00:01:38.990 --> 00:01:44.009
There's going to be two parts. The first part
that's going to be sunset is going to be all

00:01:44.009 --> 00:01:50.109
the campaign management stuff, InfoService,
and targeting idea of the services that equate

00:01:50.109 --> 00:01:55.491
to targeting idea services. So essentially,
you know, you can get started on all the--all

00:01:55.491 --> 00:01:59.889
the people who said that they've begun migrating.
That means that they've probably been migrating

00:01:59.889 --> 00:02:04.529
over the campaign management stuff. They've
been keeping their, you know, started migrating.

00:02:04.529 --> 00:02:09.410
Maybe they're targeting IT stuff or targeting
idea service, and maybe migrating over their

00:02:09.410 --> 00:02:14.930
InfoService as well as exploring like add
parameters [INDISTINCT] service. There will

00:02:14.930 --> 00:02:22.819
be a full v13 sunset. The way we're going
to approach this is every time a service is

00:02:22.819 --> 00:02:30.280
released that has feature parity of its v13
equivalent then we set a sunset clock at four

00:02:30.280 --> 00:02:38.109
to six months before that service is deprecated
and turned off--I'm sorry, sunset. It's deprecated

00:02:38.109 --> 00:02:43.329
one of feature parity version is released.
So for example, one on here that I don't have

00:02:43.329 --> 00:02:48.989
is report service. So, the v2009 version report
service is in the works, it's close to database.

00:02:48.989 --> 00:02:54.129
And when it does, what we're going to do is
make sure that its feature parity. We're going

00:02:54.129 --> 00:02:58.749
to get feedback and when we believe it's reached
feature parity, that's when we set the sunset

00:02:58.749 --> 00:03:04.810
clock. So we're just locating plenty of times
to migrate over the services that we haven't

00:03:04.810 --> 00:03:10.099
released yet. Okay. And if anyone has any
questions, feel free to ask questions as we

00:03:10.099 --> 00:03:19.620
go along. But, we'll have a likely Q&amp;A session
after this as well. So, some of the resources

00:03:19.620 --> 00:03:25.920
to upgrade to v2009, I think one of the greatest
resources is our client libraries. So, just

00:03:25.920 --> 00:03:30.870
a--you know, show of hands, how many people
in here used one of our client libraries?

00:03:30.870 --> 00:03:37.920
Okay, so roughly half the room saying, "They
do." My job today is to convert the other

00:03:37.920 --> 00:03:41.459
half. You know, whether or not, you know,
if you're not using the client library, do

00:03:41.459 --> 00:03:47.670
you really want to know why? You know--I think,
when we had one of these sessions in San Francisco

00:03:47.670 --> 00:03:53.749
a little bit ago. And the key feedback that
we got from there was, well, one, "I didn't

00:03:53.749 --> 00:03:59.829
know that client libraries existed." So we--you
know, today we're saying, "Here they are."

00:03:59.829 --> 00:04:02.150
The other one was, "I can't use it because
my system does X and X and X, and my environment

00:04:02.150 --> 00:04:07.170
is X and X and X." And we try and make sure
that the client libraries reach that nice

00:04:07.170 --> 00:04:12.989
little, you know, big part of the bell curve
in terms of compatibility with people's systems.

00:04:12.989 --> 00:04:17.900
So, please let us know, like, give us feedback,
you know, why can't you use it? I've used

00:04:17.900 --> 00:04:20.400
it before and didn't like it. You know, we
early--we care about all kinds of feedback.

00:04:20.400 --> 00:04:24.782
And we really want to make sure that people
use the library. Why do we want to make sure

00:04:24.782 --> 00:04:35.080
that people use the library? v2009 has a few
gotchas. You know, there's issues with namespacing.

00:04:35.080 --> 00:04:39.030
So I think, for some of you who have already
started migrating, you realize that there's

00:04:39.030 --> 00:04:44.139
many new namespaces now. There's basically
campaign management namespacing, there's the

00:04:44.139 --> 00:04:49.770
info namespace, there's the job namespace,
there's that like optimization namespace.

00:04:49.770 --> 00:04:53.560
All these namespace is playing together and
have a good [INDISTINCT] types and make sure

00:04:53.560 --> 00:04:57.479
that those are correct. And then even making
sure that your request header is under the

00:04:57.479 --> 00:05:01.889
CM namespace but it might, you know, the rest
of service might be the other Job Namespace.

00:05:01.889 --> 00:05:06.560
A lot of these things are very hard to keep
track off. And we make sure that our client

00:05:06.560 --> 00:05:13.060
libraries are 100% compatible with the API.
And other things we have lots of code examples.

00:05:13.060 --> 00:05:17.169
So we recently went back to our client libraries
and we said "What do people have the most

00:05:17.169 --> 00:05:22.860
trouble with?" And what we did is we made
pretty much one example for every piece of

00:05:22.860 --> 00:05:29.490
functionality in the API. So, you know, for
CampaignService, we have--someone's running

00:05:29.490 --> 00:05:37.110
Avast. I recognize that. So, for CampaignService,
we have, like, you know, AddCampaigns, getAllCampaigns,

00:05:37.110 --> 00:05:42.539
getAllPostCampaigns, UpdateCampaigns, [INDISTINCT]
for CampaignService. So pretty much every

00:05:42.539 --> 00:05:47.900
service we have a set of examples that cover
all functionality. So you could just use our

00:05:47.900 --> 00:05:53.599
examples like a toolkit and get started. So
this is great for, you know, beginners, it's

00:05:53.599 --> 00:05:56.950
great for intermediate who kind of like, you
know, saying, "Well, I don't want to remember

00:05:56.950 --> 00:06:01.710
how to do this." and it's really great for,
you know, maybe expert users who want to have

00:06:01.710 --> 00:06:07.000
another pair of eyes on how we're doing it.
All right, and you know, there's going to

00:06:07.000 --> 00:06:11.379
be a lot of links throughout these slides.
So, you know, if you want the copy to down,

00:06:11.379 --> 00:06:14.990
we gave you the link. Really, you know, use
these slides as you're going along in the

00:06:14.990 --> 00:06:21.919
future for, you know, just a reference back
to all the resources that we provide. So then,

00:06:21.919 --> 00:06:26.889
there's the ring part of all the resources.
And these include the articles and documentation

00:06:26.889 --> 00:06:34.819
and our blog post. So, I'm sorry for all the
show of hands, but how many people are reading

00:06:34.819 --> 00:06:38.729
our blog currently? Great, that's awesome.
So yeah, so you guys have seen that our blog

00:06:38.729 --> 00:06:43.379
is, you know a great resource of finding out
if one things are changed in the API, looking

00:06:43.379 --> 00:06:50.639
at downtime. You know, we have a new series
called Discover v2009 which kind of talks

00:06:50.639 --> 00:06:53.050
about all the new features. And, you know,
we've gotten some great feedback about how

00:06:53.050 --> 00:06:58.380
this is actually helping see all the new services
that we're offering. So, we're going to continue

00:06:58.380 --> 00:07:04.360
to do that as we release more services. We
also have lots of articles and documentation.

00:07:04.360 --> 00:07:08.970
The three that I think are most helpful for
migrating to 2009 is/are "What's changed in

00:07:08.970 --> 00:07:16.500
v2009?", our "Migrating v13 to v2009." and
our "Per-call migration guide." So, considering

00:07:16.500 --> 00:07:22.949
a lot of you had already start migrating,
I assumed that you guys have seen these documents.

00:07:22.949 --> 00:07:25.750
For those who haven't, you know, you could
take a look during today and let us know what

00:07:25.750 --> 00:07:30.290
you think of them and, you know, what else
might be a good idea to add to these? All

00:07:30.290 --> 00:07:37.819
right, so. Where to start? So, as I said earlier,
the services that are--we are sub-setting

00:07:37.819 --> 00:07:44.770
on "We're turning off on April 22nd, 2010"
is the campaign management stuff is everything

00:07:44.770 --> 00:07:50.599
under the CM namespace. The SiteSuggestionService
and the KeywordToolService which is being

00:07:50.599 --> 00:07:55.631
replaced by the TargetingIdeaService. We have
a blog post that kind of describes how you

00:07:55.631 --> 00:07:59.819
would migrate from one to the other. Just
specifically today, I won't show any code

00:07:59.819 --> 00:08:05.180
examples about migrating that. But it's fairly
straightforward. And then, we have the InfoService

00:08:05.180 --> 00:08:11.470
which has been completely rewritten. So, you
know, you might want to take a look at that

00:08:11.470 --> 00:08:14.919
if you have to do any kind of [INDISTINCT]
management or operation management. You know,

00:08:14.919 --> 00:08:20.169
mostly tracking like free events and stuff
like that. The services that aren't good,

00:08:20.169 --> 00:08:26.099
and that's AccountService, ReportService and
TrafficEstimatorService. All three of those

00:08:26.099 --> 00:08:31.379
are currently in the work for v2009. We haven't
reached the point where we want to release

00:08:31.379 --> 00:08:35.770
those yet. When we do release them, again,
we're going to get feedback. We're going to

00:08:35.770 --> 00:08:40.020
make sure that people are happy with them
that they have all the feature parity. And

00:08:40.020 --> 00:08:46.560
when we do get to the point that we realized
that they have feature parity, then we'll

00:08:46.560 --> 00:08:52.480
begin the sunset clock. Okay, so, we can get
into the coding part. The way that I recommend

00:08:52.480 --> 00:08:56.730
going about upgrading your code. And I think,
Aaron touched on this briefly when he was

00:08:56.730 --> 00:09:02.290
up here, is I really like the divide and conquer
method. So, there's really three steps of

00:09:02.290 --> 00:09:07.520
this. There's the breaking of the code into
the first service chunks. There's referencing

00:09:07.520 --> 00:09:11.090
objects by its primitive IDs. So that means,
you know, instead of passing around the campaign

00:09:11.090 --> 00:09:18.170
object, you know, passing around any of the
long campaign ID. And there's migrating the

00:09:18.170 --> 00:09:25.580
code chunks. So, you know, why do I choose
these three steps? Well, we have a lot of

00:09:25.580 --> 00:09:30.410
internal tools that we had to deal with. And
when we try to migrating them all just in

00:09:30.410 --> 00:09:37.420
one big kind of blog, we found that, you know,
maybe our stuff wasn't as decoupled as we

00:09:37.420 --> 00:09:43.310
want it to be. So, while we are breaking up
the code into first service chunks. And then,

00:09:43.310 --> 00:09:49.750
upgrading the primitive IDs, we also notice
that it's very easy to run co-version code.

00:09:49.750 --> 00:09:55.860
So, you know, right now, we don't actually
offer, you know, the ReportService for v2009.

00:09:55.860 --> 00:10:01.210
But when you break up the code into first
service chunks and these service chunks can

00:10:01.210 --> 00:10:06.750
either be in the same--in the same class or
different classes, you're able to like say,

00:10:06.750 --> 00:10:15.160
"Use AdGroups of v13 and Campaigns of v2009,"
by reference the primitive IDs. So this is

00:10:15.160 --> 00:10:20.871
a way that you could migrate your code in
steps rather than, you know, tackling all

00:10:20.871 --> 00:10:29.760
at once of adding, you know, lots of Red Xs
all over your Eclipse project. Okay, so I

00:10:29.760 --> 00:10:34.890
have--on the same thing that I've been showing
all along. There's also an example project

00:10:34.890 --> 00:10:40.210
that you guys can follow along with. I don't
think it's changed too much since I posted

00:10:40.210 --> 00:10:45.620
it there, but there might be a few differences.
But basically, it's kind of just an empty

00:10:45.620 --> 00:10:53.230
project--the couple of projects that you promote
into Eclipse and play along as I go along.

00:10:53.230 --> 00:11:05.060
Okay. So, I'm going to switch over to Eclipse
now. Can everyone see the code all right?

00:11:05.060 --> 00:11:11.020
Yup, okay. So, I have one--so, basically the
coding example I have here is the same one

00:11:11.020 --> 00:11:16.750
as on our article of migrating from v13 to
v2009. The goal of the example is to show

00:11:16.750 --> 00:11:24.000
that you can [INDISTINCT] use v13 code along
with v2009 code and how you would do that.

00:11:24.000 --> 00:11:29.360
Just a show of hands, how many people are
using the Java coder, Java [INDISTINCT]? Okay,

00:11:29.360 --> 00:11:35.990
so roughly half of you are Java programmers.
In the other languages, I'm guessing either

00:11:35.990 --> 00:11:38.190
".net", PHP, or Python, one of the--you know,
the other main ones. You know, it's very--it's

00:11:38.190 --> 00:11:47.890
going to be similar on to how you would do
co-working code. Obviously, ".net" would be

00:11:47.890 --> 00:11:54.960
very more similar than Python and PHP. We
only have v2009 right now. We're not--we really

00:11:54.960 --> 00:12:01.630
don't support APIlity or have that integrated
to v2009. We're suggesting to migrate it to

00:12:01.630 --> 00:12:08.560
our v2009 client library. And we can take
any questions about that going forward as

00:12:08.560 --> 00:12:14.930
well. So I'm going to do all of my examples
in Java, but that should be pretty easily

00:12:14.930 --> 00:12:18.360
transferred to any other languages. Okay,
so just to get started--I just want to look

00:12:18.360 --> 00:12:25.000
at my computer--we're going to start off by
just kind of reviewing what we do in Java

00:12:25.000 --> 00:12:30.100
to, you know, get a service. The first thing
you want to do is you want to create an AdWords

00:12:30.100 --> 00:12:36.620
user. And what this is doing is going to be
credentials from the--basically, my home directory

00:12:36.620 --> 00:12:46.080
on Windows and the properties file from it.
So, really briefly, we can talk about basically

00:12:46.080 --> 00:12:53.660
the credentials of v2009. The biggest change
is the authentication token. And this is a

00:12:53.660 --> 00:13:00.230
very radical change from v13. In v13, we had,
basically, email password. And we were expecting

00:13:00.230 --> 00:13:05.550
a lot of people to store that. And that's
not very secure. So what instead we're doing

00:13:05.550 --> 00:13:13.270
is we're moving to a token phased system.
And use the--use the client login API to generate

00:13:13.270 --> 00:13:17.870
this token. And then you can set the token
into your client library. And you don't have

00:13:17.870 --> 00:13:23.150
to worry about having any passwords lying
around. What I'll be doing going forward is

00:13:23.150 --> 00:13:28.230
just showing how to pull this properties file,
which does pull an email password and generate

00:13:28.230 --> 00:13:32.570
the client library, generates the token for
it if it needs it for v2009. But, all the

00:13:32.570 --> 00:13:35.870
client libraries have the functionality of--either
setting a token manually or pulling the email

00:13:35.870 --> 00:13:44.220
password and have it, the client library,
generate the token for you. All right, so

00:13:44.220 --> 00:13:50.430
this is my new user is just setup so that
it's just a client manager talking to a client.

00:13:50.430 --> 00:13:54.400
So basically, that client is setup with a
bunch of campaigns, a bunch of AdGroups keyword

00:13:54.400 --> 00:14:02.170
and whatnot. And the goal this piece of code
is to, one, get all the campaigns, then it

00:14:02.170 --> 00:14:08.520
iterates through each campaign, it gets every
AdGroup for the campaigns. So notice here,

00:14:08.520 --> 00:14:13.370
this is what I was talking about that AdGroup
service had a function called getActiveAdGroups,

00:14:13.370 --> 00:14:21.660
which is not consistent with anything on all
the other services. So again, this is just

00:14:21.660 --> 00:14:27.230
v13 code. This gets the AdGroups. It then
collects all the AdGroup IDs. It schedules

00:14:27.230 --> 00:14:34.220
are record job which is of type AdGroup. It's
we're going to call a campaign number, you

00:14:34.220 --> 00:14:38.061
know, a campaign number because it's all the
AdGroups that belong to that particular campaign

00:14:38.061 --> 00:14:46.030
that we're iterating there. It's going to
set the columns, it's going to set the columns

00:14:46.030 --> 00:14:53.071
as Campaign, AdGroup, Clicks, CPC, CTR. So
this might be a simple report if you might

00:14:53.071 --> 00:14:56.020
do the--you know, kind of give a performance,
you know, very, very huddle on the performance

00:14:56.020 --> 00:15:02.740
overview of that particular campaign. All
right, notice here that we're doing "setAdGroups(adGroupIDs)".

00:15:02.740 --> 00:15:08.060
So, this already is not expecting cognitive.
And then we just schedule a ReportJob and

00:15:08.060 --> 00:15:12.310
then move backwards. So again, we're going
through each campaign that we find, going

00:15:12.310 --> 00:15:16.950
through each AdGroup, we're collecting all
the adGroupIDs and then we're scheduling a

00:15:16.950 --> 00:15:24.850
ReportJob for all those adGroupIDs. So, if
you look back in my three steps, what we want

00:15:24.850 --> 00:15:30.350
to do is we want to do break up, then we want
to do primitive IDs, and then we want to migrate

00:15:30.350 --> 00:15:34.160
our code. So the first step that I would go
upon looking at this is saying "How can I

00:15:34.160 --> 00:15:39.260
get a general kind of way of dealing with
this outer structure?" So right now, everything's

00:15:39.260 --> 00:15:43.380
kind of blogged together in this one class.
What I want to do is maybe have, you know,

00:15:43.380 --> 00:15:49.520
maybe a new method that gets all the hours'
campaigns and maybe a new method that gets

00:15:49.520 --> 00:15:55.821
all the adGroupIDs, and then maybe a method
that that schedules as actual ReportJob. So,

00:15:55.821 --> 00:16:02.920
we go to our new code example, we're going
to call it Breakup. I'm going to copy the

00:16:02.920 --> 00:16:12.660
text over as I go to discuss--less typos,
but I'll walk through it. So, this is my new

00:16:12.660 --> 00:16:16.421
method. It's called--this is the same thing
as before which is monthlyReportCreator. And

00:16:16.421 --> 00:16:19.240
I'm--I'm sort of specking it out right now.
I'm saying that, "I'm going to have this new

00:16:19.240 --> 00:16:24.420
campaign called--I'm going to have this new
method called getAllAdWordsCampaignIds. It's

00:16:24.420 --> 00:16:32.640
going to return an int array of campaignIds,
which--where I'm going to show you, you have

00:16:32.640 --> 00:16:35.010
to upgrade because it's v2009. It's going
to go through each ID and it's then going

00:16:35.010 --> 00:16:39.470
to get all the active adGroupIds for each
ID. And that's going to schedule--it's going

00:16:39.470 --> 00:16:46.390
to schedule the CampaignReport for that campaignId
and those adGroupIds. So, the first thing

00:16:46.390 --> 00:16:50.130
I want to do is tackle that method called
getAllAdWordsCampaignIds and, again, this

00:16:50.130 --> 00:17:11.689
is just v13 code. All right, let me expand
that. All right. So, I have this method now

00:17:11.689 --> 00:17:15.199
called getAllAdWordsCampaignIds. Notice that
at the beginning of it, I'm creating the user.

00:17:15.199 --> 00:17:20.000
In all my methods, I'm just creating the user
and creating the service, and then sort of

00:17:20.000 --> 00:17:21.779
forgetting about them and letting the garbage
collector take care of it itself. I would

00:17:21.779 --> 00:17:25.780
suggest that you're going to need--using the
client library that, you know, you can keep

00:17:25.780 --> 00:17:35.070
track at these user, keep track at these services,
that's really a big feedback to us as to how

00:17:35.070 --> 00:17:38.850
you are using these client libraries. Are
you throwing away the object? Are you holding

00:17:38.850 --> 00:17:42.590
on to the object? What kind of memory performances
are you seeing, you know? If you're a reseller,

00:17:42.590 --> 00:17:46.740
you probably have tons and tons of clients
that you're creating. You know, if you're

00:17:46.740 --> 00:17:50.960
a home user, you probably only have maybe
three or four hours users that you're creating.

00:17:50.960 --> 00:17:56.270
But it's really important to us to make a
solution of, you know, that tells everyone's

00:17:56.270 --> 00:18:01.970
needs. All right, so, I'm getting the CampaignService
just by doing user.getService AdWordsService.v13.CAMPAIGN_SERVICE

00:18:01.970 --> 00:18:08.860
and this will vary depending on the client
library but it's all generally the same when

00:18:08.860 --> 00:18:14.370
you create this user and then you get the
service from the user. And then, getting the

00:18:14.370 --> 00:18:18.850
campaigns running getAllAdWordsCampaigns and
giving that dummy a variable, which is just

00:18:18.850 --> 00:18:24.940
one in this case. I then go through every
campaign and just pull out the IDs in this

00:18:24.940 --> 00:18:29.419
array, and then I return that array. So, it's
a nice little, you know, chunk of pill that

00:18:29.419 --> 00:18:34.311
only deals with the CampaignService. And I'm
not dealing with campaign objects after that

00:18:34.311 --> 00:18:38.179
part. So you can imagine that instead of just
returning maybe campaignIds, I could put them

00:18:38.179 --> 00:18:43.269
into a database. I could send them along with
some socket. I could do whatever I want. Having

00:18:43.269 --> 00:18:48.649
these primitive IDs really allows me to explore
my options and the APIs really setup to handle

00:18:48.649 --> 00:18:56.610
these primitive IDs as well. And the next
step that I want to do is make the AdGroup

00:18:56.610 --> 00:19:16.240
breakout. So, I'm going to copy the rest of
the code in there. Okay, and then, I have

00:19:16.240 --> 00:19:18.440
this getActiveAdGroupIds. And remember, this
is the next step in the loop. This is just

00:19:18.440 --> 00:19:21.409
pulling out all the AdGroups the same way
we pulled out the campaigns in collecting

00:19:21.409 --> 00:19:27.300
the IDs together. Notice that these AdGroupIDs
are long. So again, where were we? We had

00:19:27.300 --> 00:19:36.540
just generated the campaignIds and the AdGroupIds.
Going up to this top loop, we have campaignIds

00:19:36.540 --> 00:19:40.230
coming from getAllAdWordsCampaignIds, which
is what I make, which is what I've created.

00:19:40.230 --> 00:19:46.920
I go through each of those and I get all the
active AdGroupIds. I then, schedule this CampaignReport,

00:19:46.920 --> 00:19:50.919
which I'll now show you right now which takes
that one CampaignID that I'm iterating through

00:19:50.919 --> 00:19:56.550
and all the AdGroupIds that belong to that
campaign. So, going down here on the bottom,

00:19:56.550 --> 00:20:02.309
you notice the same little overhead every
time. I do--I get the user, I create the service,

00:20:02.309 --> 00:20:06.019
and then I just define the ReportJob and set
all of the fields that I've talked about before.

00:20:06.019 --> 00:20:12.740
So, I'm just taken that code of chunk that
was existing in the for loop before and moving

00:20:12.740 --> 00:20:20.350
into it's own method. All right, so, the key
thing that I want people to look at before

00:20:20.350 --> 00:20:25.289
we go to upgrading to v2009. Notice that this
is an integer array for campaignIds right

00:20:25.289 --> 00:20:31.029
now. In v2009, campaignIds moved to long values.
That's not because we ran out of integers

00:20:31.029 --> 00:20:36.530
for campaigns. It was more along the lines
of all of the other, all the other IDs were

00:20:36.530 --> 00:20:41.360
longs to begin with. And it just was kind
of a pain to have, you know, all the IDs being

00:20:41.360 --> 00:20:46.759
longs and then have the campaign begins. And
this was a direct feedback from everybody.

00:20:46.759 --> 00:20:53.260
So this is an example of feedback working
us all back in to the API group. All right,

00:20:53.260 --> 00:20:59.380
so we'll move to the upgrade section. So,
notice that I still have the same method now.

00:20:59.380 --> 00:21:04.999
I've just--I've just change campaignIds to
longs, instead of int. So that was the beauty

00:21:04.999 --> 00:21:11.799
of breaking out. My main logic part of the
code remains completely unchanged when I'm

00:21:11.799 --> 00:21:17.080
operating, because I'm only dealing with primitive
values. So now, I'm able to say, okay, I'm

00:21:17.080 --> 00:21:25.020
going to start by upgrading getAllAdWordsCampaignIds
to v2009. What I'll do is I'll copy over the

00:21:25.020 --> 00:21:42.419
upgrade part and then walk through it. Okay,
so notice I still have my getAllAdWordsCampaignIds.

00:21:42.419 --> 00:21:53.059
And this is my old example from v13--sorry,
I'm in the wrong file. So, I'm just going

00:21:53.059 --> 00:22:00.539
to paste this in here and what I'm going to
do now is--this part of the code is already

00:22:00.539 --> 00:22:07.149
now upgraded to v2009. So, notice it's the
same overhead. We have the user then we get

00:22:07.149 --> 00:22:12.399
the getService, and now we have the service
client for v2009. The only difference is before

00:22:12.399 --> 00:22:18.470
I had .v13 and now I have .v200909, so you
[INDISTINCT] to worry about imports and using

00:22:18.470 --> 00:22:32.639
these correct objects. So, it looks simple,
it's deceiving a little bit but if you notice

00:22:32.639 --> 00:22:37.059
up here, you'll see that I have a mixture
of v13 and v2009 objects. So, right now I

00:22:37.059 --> 00:22:42.630
have the v200909 campaign objects and I have
the v13 report objects sitting there. And

00:22:42.630 --> 00:22:47.450
no one's getting [INDISTINCT] each other because
you use primitive values. I wouldn't--I wouldn't,

00:22:47.450 --> 00:22:53.629
for example, be able to say add campaign in
v13 with the v2009 campaign. They wouldn't

00:22:53.629 --> 00:23:00.830
be able to fit. So this is why, you know,
we can do co-version code but we need to be

00:23:00.830 --> 00:23:06.220
careful about which version we're dealing
with when we build complex objects. Okay,

00:23:06.220 --> 00:23:12.250
so let's walk through the getAllAdWordsCampaigns
for v200909. So, the first part is I get the

00:23:12.250 --> 00:23:16.919
user, then I get the service. And at this
point because it's v200909, it's generating

00:23:16.919 --> 00:23:22.059
up indication token for me and it's setting
that in this CampaignService object in the

00:23:22.059 --> 00:23:29.080
request header, header's portion. The next
step is I want to create a selector. And this

00:23:29.080 --> 00:23:35.840
is where v200909 really differs from v13.
In v200909, we have selectors and getMethods

00:23:35.840 --> 00:23:41.000
as oppose to getAllMethods. So, these selectors
allow you to pull out individual campaigns

00:23:41.000 --> 00:23:48.499
by ID, maybe pullout a campaigns that only
have a certain status. It really depends on

00:23:48.499 --> 00:23:51.450
the selector for each service and it'd be
great if you guys told us, I mean, what do

00:23:51.450 --> 00:23:56.730
you want to see in those selectors. You know,
maybe someone wants to pullout all campaigns

00:23:56.730 --> 00:24:03.029
that have a certain click-through rate of
this or that, you know, like, things like

00:24:03.029 --> 00:24:08.690
that are really great feedback in terms of
what you want the selectors to do. Notice

00:24:08.690 --> 00:24:10.789
that I'm supplying an empty selector. When
you supply an empty selector through the API

00:24:10.789 --> 00:24:16.249
that just means getAll. So in this case, I'm
just sending in an empty selector. I get the

00:24:16.249 --> 00:24:23.070
campaign page back. And then, I'm going through
the campaignPage.entries, which is all those

00:24:23.070 --> 00:24:29.389
entries in the page and I'm just selecting
the campaignIds out of all those entries in

00:24:29.389 --> 00:24:36.220
the page, and putting them into an array.
So, just specifically right here, I do campaignPage.getEntries,

00:24:36.220 --> 00:24:41.600
which is an array of campaigns. I pick up
the one that I'm iterating through and then

00:24:41.600 --> 00:24:47.840
I just say .getID on it. So, this is a subject
that I don't think a lot of people grasp with

00:24:47.840 --> 00:24:52.960
the paging aspect. In some of our--in some
of our selectors not all just yet, but we're

00:24:52.960 --> 00:24:57.100
making sure that it get consistent, you're
able to page through objects. So, you're able

00:24:57.100 --> 00:25:02.759
to say, "Give me 500 objects at a time, and
then, offset by this and offset by this then

00:25:02.759 --> 00:25:14.509
offset by this." So, the start index changes
and the total results of that slide will determine

00:25:14.509 --> 00:25:45.694
how many pages that you want to get. So, you
would just have a wide opening that would

00:25:45.694 --> 00:25:48.179
go through it and say, "Give me 500, change
the start index, give me the next 500, change

00:25:48.179 --> 00:25:50.700
the start index, give me the next 500--oh,
I'm sorry, change the offset." It really depends

00:25:50.700 --> 00:25:51.700
on--I think I'm not--let me double check it
real quick. I'm not sure if it's start index

00:25:51.700 --> 00:25:52.700
or--right, so the paging object, pass. So,
you pass it in the new paging. And then now

00:25:52.700 --> 00:25:54.090
it takes the start index and a number of--yeah,
so, you would get a start index every time

00:25:54.090 --> 00:25:55.090
that you get a page. So, the paging object
has start index and then the number of results.

00:25:55.090 --> 00:25:56.909
So, if I want to do 500 at a time, I would
just say number of results 500 and I'll just

00:25:56.909 --> 00:25:58.500
change the start index from zero to then 500,
to then 1,000 and then I'll get 500 objects

00:25:58.500 --> 00:26:00.990
every time.
&gt;&gt; So, it's better the selector then to [INDISTINCT]

00:26:00.990 --> 00:26:04.809
I guess they're uploaded [INDISTINCT]. I was
thinking about that.

00:26:04.809 --> 00:26:16.539
&gt;&gt; ROGAL: Yeah, so I think that's one of the
things that's a little bit confusing as the

00:26:16.539 --> 00:26:21.909
whole paging aspects just because it's completely
new to v200909. You know, it's a very good

00:26:21.909 --> 00:26:23.809
feedback that there's no code examples for
it right now besides what we do in targeting

00:26:23.809 --> 00:26:25.639
idea service. I believe we do new paging in
that. But I think that's a good point and

00:26:25.639 --> 00:26:31.749
we'll be adding an examples all the time,
I'll raise the show paging through objects.

00:26:31.749 --> 00:26:43.039
But it's--and again, it's pretty simple, I'll
show you really quickly. Did you notice that

00:26:43.039 --> 00:26:47.610
CampaignSelector takes a number of things
like IDs, statuses that I want to select,

00:26:47.610 --> 00:26:52.059
I know it's a small font so I'm reading it.
Stats that you want to select and then the

00:26:52.059 --> 00:26:56.200
last one is paging. And then again, when you
send in your paging object, that's my last--it

00:26:56.200 --> 00:27:05.620
would be my last thing, so I do null for everything.
And then in my last one, I would send in a

00:27:05.620 --> 00:27:11.549
paging. This takes a start index, so I'll
give it zero and then 500, and this would

00:27:11.549 --> 00:27:18.779
take out the first 500 objects. And then,
for my next segregation through, I might choose

00:27:18.779 --> 00:27:27.909
start index of 500 and until 500 again, and
null for the next 500. So, at this point I'm

00:27:27.909 --> 00:27:34.539
now done migrating my--I'm now done migrating
my CampaignService stuff to v2009. If I still

00:27:34.539 --> 00:27:40.780
have my v13 stuff flying around for AdGroups,
it would then work in the same program. Because

00:27:40.780 --> 00:27:46.080
I have separated everything out of these services,
I'm dealing with just the primitive IDs. The

00:27:46.080 --> 00:27:50.409
objects don't collide with each other and
you're able to use the two different cell

00:27:50.409 --> 00:27:58.070
clients for both v13 and v2009. So, the next
step is then operating the Get All AdWords,

00:27:58.070 --> 00:28:11.029
Get All AdGroups. And I copy that portion
over.

00:28:11.029 --> 00:28:18.100
So, let's just walk through this way quickly.
I'm getting my user as always during the AdGroupService,

00:28:18.100 --> 00:28:23.389
which generates my authentication token. I'm
then creating a selector for AdGroups. Each

00:28:23.389 --> 00:28:31.980
selector is defined by a subject that's going
to be selecting. So, you would see something

00:28:31.980 --> 00:28:38.490
like--I'll just import everything to get rid
of these arrays. Every time that you create

00:28:38.490 --> 00:28:42.899
a selector, if you like AdGroupSelector, CampaignSelector
or targeting an ES selector, all of these

00:28:42.899 --> 00:28:50.619
different things defined the different selectors.
So, basically, AdGroupSelector is very specific

00:28:50.619 --> 00:28:56.470
to the AdGroupService. It has--a lot of different
things that you can set. One of this is the

00:28:56.470 --> 00:29:00.809
CampaignID. So, when I've given an AdGroupSelector
of CampaignID, that says getting all the AdGroups

00:29:00.809 --> 00:29:07.429
that exist underneath this campaign. So notice
now that our gets--our getMethod only have

00:29:07.429 --> 00:29:12.429
one object, which is the Selector. So now
on v13 where we are passing in all the different

00:29:12.429 --> 00:29:17.039
parameters to the method, which cause a lot
of bloat to the method sometimes, now we have

00:29:17.039 --> 00:29:22.649
a lot more dynamic selector objects which,
you know, you only have to set things that

00:29:22.649 --> 00:29:30.389
you care about. So it gives you a lot from
your code like I've shown you out. Okay, so,

00:29:30.389 --> 00:29:33.840
just following the same structure that I have
before, and I have this AdGroupPage. And,

00:29:33.840 --> 00:29:38.629
again, I can paste the results if I wanted
to. What I'm going to do is I, then, going

00:29:38.629 --> 00:29:44.320
to go through all the different AdGroups in
the entities. So, you know, basically this

00:29:44.320 --> 00:29:50.009
getEntries is just an array of AdGroups. I
go through all of them, and I just add these--I

00:29:50.009 --> 00:29:57.639
check to see if the AdGroupStatus is enabled.
If it is, then I add it to the list of active

00:29:57.639 --> 00:30:05.009
AdGroupIds. And then I just turn this into
a primitive long array and then return it

00:30:05.009 --> 00:30:10.619
back to the method. So, now, this method is
now upgraded to v2009. And the [INDISTINCT]

00:30:10.619 --> 00:30:16.690
were the only two methods that we're log on
by 2009. I have my old method of scheduled

00:30:16.690 --> 00:30:22.710
CampaignReport that needs to--that I don't
need to change. Because I broke up all the

00:30:22.710 --> 00:30:29.490
services into different methods, this one
only relied on having a CampaignID and then

00:30:29.490 --> 00:30:30.570
a list of AdGroupIds, which I've now upgraded
to my v2009. So, now, this little program

00:30:30.570 --> 00:30:42.460
is completely upgraded and ready to go. So,
that concludes the coding portion of today.

00:30:42.460 --> 00:30:53.260
S, I will open it up to any Q&amp;A now. And I'll
leave it on the slide right here. The main

00:30:53.260 --> 00:30:57.700
takeaways from today, again, are that April
22nd is fast approaching. And we think that

00:30:57.700 --> 00:31:01.679
client libraries are one of the better ways
of upgrading to v2009. If you can't use a

00:31:01.679 --> 00:31:07.210
client library, please let us know. I really
like the feedback so far in client libraries

00:31:07.210 --> 00:31:12.179
and, you know, we are going to be taking this
feedback and immediately integrating it into

00:31:12.179 --> 00:31:17.570
our [INDISTINCT] because the feedback that
you guys give today is extremely of high priority.

00:31:17.570 --> 00:31:23.369
It's direct feedback which traps all else.
You know, we're here to help. We have the

00:31:23.369 --> 00:31:29.889
forums which I think are the best way to get--get
the answers. Either you can search for forums

00:31:29.889 --> 00:31:35.679
or you can ask questions on there. And people
will either--or the forum members will answers

00:31:35.679 --> 00:31:40.460
them or we have a dedicated staff that will
answer the questions in the forum as well.

00:31:40.460 --> 00:31:43.859
We had the documentation researches. We have
the document resources like documentation,

00:31:43.859 --> 00:31:50.730
articles and blog post. And just, you know,
divide and conquer and jump in and take step

00:31:50.730 --> 00:31:51.939
and then let us know once you're having difficulty
with that so we can help.

