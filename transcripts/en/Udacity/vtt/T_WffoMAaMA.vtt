WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
This homework is to play the word game Boggle.

00:00:03.000 --> 00:00:11.000
Now, Boggle is played with a set of letters that are arranged into an n x n grid--here 4 x 4--

00:00:11.000 --> 00:00:15.000
but you should accept other size as well, and your task is to find all the words

00:00:15.000 --> 00:00:18.000
that can be found in this grid.

00:00:18.000 --> 00:00:23.000
Now, you can simply take ones across, so PLAY would be a word.

00:00:23.000 --> 00:00:27.000
They don't have to go all the way across.

00:00:27.000 --> 00:00:30.000
So LAY would be a word as well.

00:00:30.000 --> 00:00:35.000
They can turn corners and go in any direction.

00:00:35.000 --> 00:00:41.000
Starting at T we could go T-O-W.

00:00:41.000 --> 00:00:46.000
We can continue from there T-O-W-A-R-D-S,

00:00:46.000 --> 00:00:52.000
and in general we can go to any adjacent square horizontally, vertically, or diagonally.

00:00:52.000 --> 00:01:00.000
We can't duplicate, so H-I-S is a word, but we can't do H-I-S-S,

00:01:00.000 --> 00:01:06.000
because S is not a neighbor of S--so HIS but not HISS.

00:01:06.000 --> 00:01:14.000
We could do S-I-R, but not S-I-R-S, because each letter can be used only once.

00:01:14.000 --> 00:01:16.000
We can't come back and repeat on ourselves.

00:01:16.000 --> 00:01:19.000
Now I'm going to ask you to write the function boggle&lt;u&gt;words(),&lt;/u&gt;

00:01:19.000 --> 00:01:23.000
which takes as input a representation of the board, like this,

00:01:23.000 --> 00:01:27.000
and a minimum length of the words that count.

00:01:27.000 --> 00:01:31.000
Three-letter words at least. Two-letter words don't count, so don't both returning them.

00:01:31.000 --> 00:01:37.000
It returns a set of words, which again are taken out of our WORDS dictionary.

00:01:37.000 --> 00:01:41.000
Now, because I'm going to pass in the board, I have to give you the representation for that.

00:01:41.000 --> 00:01:45.000
I'm going to make a slightly different choice than I did for Scrabble boards,

00:01:45.000 --> 00:01:50.000
just to show you the range of options we have for representing two-dimensional objects like this.

00:01:50.000 --> 00:01:53.000
Now, we're trying to represent this two-dimensional array,

00:01:53.000 --> 00:01:59.000
and in Scrabble we chose a representation like this--a nested list of lists.

00:01:59.000 --> 00:02:06.000
If we assign board to this list, then we can access an element with two integers subscripts like that.

00:02:06.000 --> 00:02:09.000
In our representation of Scrabble, we also made a small change

00:02:09.000 --> 00:02:12.000
so that we didn't have to worry about going off the board,

00:02:12.000 --> 00:02:15.000
which is that we introduced these border markers--

00:02:15.000 --> 00:02:20.000
the vertical bars to mean a boarder at the ends of every row,

00:02:20.000 --> 00:02:25.000
and we also had a top row and a bottom row which consisted entirely of bordres.

00:02:25.000 --> 00:02:33.000
It's as if we took this game here, and we just extended it by making a border all the way around.

00:02:33.000 --> 00:02:36.000
This 2D representation would work fine in the Boggle case,

00:02:36.000 --> 00:02:39.000
but I just want to show you another possibility,

00:02:39.000 --> 00:02:47.000
which is a one-dimensional representation where instead of saying board[ j ][ i ] for position

00:02:47.000 --> 00:02:53.000
we only have to say board[ i ], and we get that representation just by concatenating together

00:02:53.000 --> 00:02:55.000
all the elements.

00:02:55.000 --> 00:02:58.000
We take all the elements in the first row and then add onto that list

00:02:58.000 --> 00:03:01.000
all the elements in the second row, all the elements in the third, and so on.

00:03:01.000 --> 00:03:04.000
Now we have a one-dimensional array. Why is that better?

00:03:04.000 --> 00:03:07.000
Why is it better to have a one-dimensional array

00:03:07.000 --> 00:03:11.000
to represent an inherently two-dimensional object? Seems like a step backwards.

00:03:11.000 --> 00:03:17.000
Well, one thing is that now we can have a position in the array represented by

00:03:17.000 --> 00:03:22.000
a single object, by an integer, rather than by a pair of integers

00:03:22.000 --> 00:03:25.000
that have to be broken up to subscript into the board. That's one advantage.

00:03:25.000 --> 00:03:28.000
Secondly, it's easier to enumerate over them.

00:03:28.000 --> 00:03:34.000
We can just say "for (i, s) in enumerate(board)"--remember enumerate takes

00:03:34.000 --> 00:03:38.000
a sequence and returns the elements of the sequence in turn.

00:03:38.000 --> 00:03:43.000
That would be the s's--the contents of each square, which would be the letters like P and L.

00:03:43.000 --> 00:03:51.000
And also an index into them--the integer i, which would be a integer 0, 1, 2, and so on.

00:03:51.000 --> 00:03:56.000
It's easier to enumerate over the entire board in this 1D representation

00:03:56.000 --> 00:03:58.000
rather than in the 2D.

00:03:58.000 --> 00:04:03.000
Both representations work fine, but I wanted to give you a little experience using this alternative.

00:04:03.000 --> 00:04:06.000
Let's do an example of this representation.

00:04:06.000 --> 00:04:09.000
Here's a simple board. It looks like that.

00:04:09.000 --> 00:04:14.000
Now we want to add on border cells, so we'll do that all around. It looks like that.

00:04:14.000 --> 00:04:17.000
Now, we just put that together into a string,

00:04:17.000 --> 00:04:21.000
and so the final string would look like this.

00:04:21.000 --> 00:04:24.000
Now, in terms of the indexes into the array,

00:04:24.000 --> 00:04:27.000
right here would be index number 0,

00:04:27.000 --> 00:04:29.000
and we could just enumerate them out.

00:04:29.000 --> 00:04:34.000
Since it's a 5 x 5 array, the indices go from 0 to 24.

00:04:34.000 --> 00:04:39.000
Now, let's say we want to find all the neighbors of this central square, the W.

00:04:39.000 --> 00:04:45.000
So the neighbors would include basically all the letters here would be a neighbor of W.

00:04:45.000 --> 00:04:48.000
The index of W is 12.

00:04:48.000 --> 00:04:56.000
If we say that the length of a side of this matrix--we'll call that N--is equal to 5,

00:04:56.000 --> 00:05:02.000
now we want to know all the neighbors of a cell.

00:05:02.000 --> 00:05:06.000
Let's say we're looking for the neighbors of i = 12,

00:05:06.000 --> 00:05:10.000
then it's 6, 7, 8, 11, 13, 16, 17, 18.

00:05:10.000 --> 00:05:17.000
Here is i--11 and 13 are easy. That's i - 1 and i + 1.

00:05:17.000 --> 00:05:24.000
The 7 is just i - N. The 17 is i + N. Then you can fill in the others.

00:05:24.000 --> 00:05:28.000
You see starting from i, it's easy to generate

00:05:28.000 --> 00:05:34.000
the eight neighbors just by adding and subtracting Ns and 1s.

00:05:34.000 --> 00:05:40.000
It's a little bit simpler doing it this way than it would with the two-dimensional representation.

00:05:40.000 --> 00:05:43.000
Here's what I'm asking you to write--this function boggle&lt;u&gt;words()&lt;/u&gt;

00:05:43.000 --> 00:05:47.000
given a board and a minimum length for each of the words returns a set of words.

00:05:47.000 --> 00:05:49.000
Here are some test  for you.

00:05:49.000 --> 00:05:54.000
First the board function, and I've written that so don't worry about it. We'll see it below.

00:05:54.000 --> 00:05:57.000
Here's a simple test--not many words you can find in there.

00:05:57.000 --> 00:05:59.000
That should be the whole set.

00:05:59.000 --> 00:06:04.000
I've defined for you a function neighbors, which takes a square location--

00:06:04.000 --> 00:06:09.000
square number 20 in a 6 x 6 board--and tells you want the neighbors are.

00:06:09.000 --> 00:06:12.000
Then here's an example of playing this word game.

00:06:12.000 --> 00:06:19.000
Here's the set of answers, and for this bigger board with more letters on it,

00:06:19.000 --> 00:06:23.000
there is 317 words in our small dictionary that was found.

00:06:23.000 --> 00:06:30.000
Here's our representation of board, using the single string representation that I talked about.

00:06:30.000 --> 00:06:32.000
Here's a simple function to display that.

00:06:32.000 --> 00:06:36.000
It doesn't actually print it, but returns a string, which is easily printable.

00:06:36.000 --> 00:06:41.000
Then this part--the words and prefixes--you might find very useful.

00:06:41.000 --> 99:59:59.000
That's unchanged from before.

