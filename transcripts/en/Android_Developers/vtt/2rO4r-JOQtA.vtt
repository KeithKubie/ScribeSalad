WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.850
[MUSIC PLAYING]

00:00:06.992 --> 00:00:08.950
JOSE ALCERRECA: Thanks
for coming to this talk.

00:00:08.950 --> 00:00:10.250
My name is Jose Alcerreca.

00:00:10.250 --> 00:00:12.550
I'm a developer relations
engineer at Google,

00:00:12.550 --> 00:00:13.421
working on Android.

00:00:13.421 --> 00:00:14.920
YIGIT BOYAR: My
name is Yigit Boyar.

00:00:14.920 --> 00:00:17.179
I'm an engineer in the
Android toolkit team.

00:00:17.179 --> 00:00:19.720
JOSE ALCERRECA: And today we're
going to talk about LiveData.

00:00:19.720 --> 00:00:23.170
LiveData is one of the first
architectural components

00:00:23.170 --> 00:00:25.430
that we released last year.

00:00:25.430 --> 00:00:28.942
And in this talk, we're
going to explain what it is.

00:00:28.942 --> 00:00:31.150
We're going to talk about
some of the transformations

00:00:31.150 --> 00:00:33.820
that you can do, how
to combine LiveDatas.

00:00:33.820 --> 00:00:36.100
And then we're going to
talk about some patterns

00:00:36.100 --> 00:00:39.480
and anti-patterns that
you might want to avoid.

00:00:39.480 --> 00:00:44.110
So LiveData is a simple
lifecycle-aware observable data

00:00:44.110 --> 00:00:44.860
holder.

00:00:44.860 --> 00:00:48.380
We're going to explain
all these characteristics.

00:00:48.380 --> 00:00:51.430
But first, we're going
to start with observable.

00:00:51.430 --> 00:00:52.830
What's an observable?

00:00:52.830 --> 00:00:57.820
So in our object oriented
world, probably the easiest way

00:00:57.820 --> 00:01:01.360
of communicating one
component and another

00:01:01.360 --> 00:01:05.370
is by having a reference
from one object to another,

00:01:05.370 --> 00:01:07.140
and just call it directly.

00:01:07.140 --> 00:01:11.706
However, in Android, this
might have some problems.

00:01:11.706 --> 00:01:13.690
As we all know,
components in Android

00:01:13.690 --> 00:01:17.830
have different lifecycles
and different lifespans.

00:01:17.830 --> 00:01:19.570
You might be familiar
with this diagram.

00:01:19.570 --> 00:01:22.275
It's the ViewModel
scope diagram.

00:01:22.275 --> 00:01:25.700
A simple thing like
device rotation

00:01:25.700 --> 00:01:28.310
can actually recreate
the activity.

00:01:28.310 --> 00:01:31.870
So you probably know
that having a reference

00:01:31.870 --> 00:01:34.280
to the activity in this
ViewModel would be a bad idea.

00:01:34.280 --> 00:01:36.780
Because it leads
to memory leaks,

00:01:36.780 --> 00:01:40.160
even crashes with null
pointer exceptions.

00:01:40.160 --> 00:01:42.450
So instead of having a
reference to the activity

00:01:42.450 --> 00:01:43.950
in the ViewModel,
we're going to try

00:01:43.950 --> 00:01:46.790
to have a reference to the
ViewModel in the activity.

00:01:46.790 --> 00:01:50.510
So how do we communicate, how do
we send data from the ViewModel

00:01:50.510 --> 00:01:51.270
to the activity?

00:01:51.270 --> 00:01:52.686
Well, instead of
doing that, we're

00:01:52.686 --> 00:01:56.730
going to let the activity
observe the ViewModel.

00:01:56.730 --> 00:02:00.592
And for that we're going
to use Observable LiveData.

00:02:00.592 --> 00:02:03.980
Let's see how this looks
with a little bit of code.

00:02:03.980 --> 00:02:08.240
In the ViewModel, we
expose our LiveData.

00:02:08.240 --> 00:02:11.570
You're going to see a lot
of examples of how to expose

00:02:11.570 --> 00:02:13.700
LiveData from a ViewModel.

00:02:13.700 --> 00:02:17.210
And then in our activity, we
make the actual subscription.

00:02:17.210 --> 00:02:19.460
And we do that by
calling the observed

00:02:19.460 --> 00:02:21.245
method on the Observable.

00:02:21.245 --> 00:02:24.230
The first parameter is something
called a lifecycle owner.

00:02:24.230 --> 00:02:28.010
Yigit is going to talk
about this in a second.

00:02:28.010 --> 00:02:30.430
And the second parameter
is an observer.

00:02:30.430 --> 00:02:35.540
This is what's called whenever
the Observable, the LiveData's

00:02:35.540 --> 00:02:36.635
value is changed.

00:02:41.020 --> 00:02:43.260
YIGIT BOYAR: So Jose
mentioned that you

00:02:43.260 --> 00:02:47.760
want to reference an
object in the larger scope,

00:02:47.760 --> 00:02:50.850
like a ViewModel, from an
object in a smaller scope,

00:02:50.850 --> 00:02:52.170
like an activity.

00:02:52.170 --> 00:02:55.050
But of course, when
you observe something

00:02:55.050 --> 00:02:58.110
it has to keep a reference back
to you to be able to call it.

00:02:58.110 --> 00:03:00.700
So there is a reference.

00:03:00.700 --> 00:03:03.180
But why is this not a
problem with LiveData?

00:03:03.180 --> 00:03:06.520
Well, LiveData is an
lifecycle-aware component.

00:03:06.520 --> 00:03:07.950
What do you mean by this?

00:03:07.950 --> 00:03:10.320
To able to observe
a LiveData, you

00:03:10.320 --> 00:03:12.290
have to provide the lifecycle.

00:03:12.290 --> 00:03:14.640
And when you provide
this lifecycle

00:03:14.640 --> 00:03:18.640
it basically maintains your
subscription for you for free.

00:03:18.640 --> 00:03:20.820
So if you're
observer's lifecycle

00:03:20.820 --> 00:03:23.340
is not in a good state, like
it's [INAUDIBLE] activity,

00:03:23.340 --> 00:03:25.230
it's not going to call you back.

00:03:25.230 --> 00:03:28.140
Or when your activity or
fragment is destroyed,

00:03:28.140 --> 00:03:30.750
it's going to remove the
subscription automatically

00:03:30.750 --> 00:03:31.630
for you.

00:03:31.630 --> 00:03:35.080
So you don't have the burden of
maintaining the subscription.

00:03:35.080 --> 00:03:37.470
So if you go back to
the previous graph,

00:03:37.470 --> 00:03:39.930
you're LiveData
observer will only

00:03:39.930 --> 00:03:42.990
be called if it
is between started

00:03:42.990 --> 00:03:45.150
and before it is stopped.

00:03:45.150 --> 00:03:47.700
This makes sure you don't
need to care about things

00:03:47.700 --> 00:03:49.510
like fragment transactions.

00:03:49.510 --> 00:03:52.560
Once you receive
an observer value,

00:03:52.560 --> 00:03:56.070
you know you're in a good state.

00:03:56.070 --> 00:04:00.750
Probably the most distinctive
property of LiveData

00:04:00.750 --> 00:04:02.670
is the data holder.

00:04:02.670 --> 00:04:03.730
So it's not a stream.

00:04:03.730 --> 00:04:04.750
We keep saying this.

00:04:04.750 --> 00:04:07.350
But what do I mean by that
like, it's not a stream,

00:04:07.350 --> 00:04:09.370
but it's a value holder?

00:04:09.370 --> 00:04:11.760
If you go back to our
previous graphs, on the right

00:04:11.760 --> 00:04:14.590
we have a LiveData
in our ViewModel.

00:04:14.590 --> 00:04:16.920
And on the left, we have
our activity, or fragment,

00:04:16.920 --> 00:04:19.332
that's observing this LiveData.

00:04:19.332 --> 00:04:22.079
Once you set a value
on the LiveData,

00:04:22.079 --> 00:04:24.430
just value is passed
to the activity.

00:04:24.430 --> 00:04:27.060
Similarly, if the value
changes, the activity

00:04:27.060 --> 00:04:29.020
receives the new updated value.

00:04:29.020 --> 00:04:32.480
Now, the difference happens
when you change the value,

00:04:32.480 --> 00:04:36.240
when the observer is not in an
active state, it has no idea.

00:04:36.240 --> 00:04:39.551
That value, C, is never
dispatched to the activity.

00:04:39.551 --> 00:04:41.300
And let's say while
your activity is still

00:04:41.300 --> 00:04:42.690
in a background thread--

00:04:42.690 --> 00:04:46.180
oh sorry, in a
background, not a thread--

00:04:46.180 --> 00:04:47.680
you set the new value.

00:04:47.680 --> 00:04:50.840
And you're activity
still doesn't see this.

00:04:50.840 --> 00:04:54.810
Now, the data holder
property comes in now.

00:04:54.810 --> 00:04:57.840
When your activity comes
back, that user, C,

00:04:57.840 --> 00:04:59.100
is in the foreground.

00:04:59.100 --> 00:05:03.570
It receives the latest
value from the ViewModel.

00:05:03.570 --> 00:05:06.450
As you can see, the value
C has no [? error ?]

00:05:06.450 --> 00:05:08.580
to the activity
because LiveData only

00:05:08.580 --> 00:05:11.000
cares about holding
a single value,

00:05:11.000 --> 00:05:12.530
and it's the latest value.

00:05:12.530 --> 00:05:15.060
This works perfect for
UI, because you only want

00:05:15.060 --> 00:05:17.610
to show what it is right now.

00:05:17.610 --> 00:05:20.500
But if you are trying to
process a stream of events,

00:05:20.500 --> 00:05:22.060
this is not what
you're looking for.

00:05:22.060 --> 00:05:24.285
Similarly, if you change
the value after activity

00:05:24.285 --> 00:05:28.390
is destroyed, nothing happens.

00:05:28.390 --> 00:05:31.480
JOSE ALCERRECA: OK, let's talk
about how to combine LiveDatas

00:05:31.480 --> 00:05:33.490
and talk about transformations.

00:05:33.490 --> 00:05:36.160
The library provides
two, map and switch map.

00:05:36.160 --> 00:05:40.060
But you can create your own
using [? mediator ?] LiveData.

00:05:40.060 --> 00:05:43.030
We already said that LiveData
is great to communicate

00:05:43.030 --> 00:05:44.810
a view and a ViewModel.

00:05:44.810 --> 00:05:48.310
But what if we have a third
component, maybe a repository,

00:05:48.310 --> 00:05:51.230
but it's also exposing LiveData?

00:05:51.230 --> 00:05:55.680
How do we make this
subscription from the ViewModel?

00:05:55.680 --> 00:05:57.480
We don't have a lifecycle there.

00:05:57.480 --> 00:05:59.220
What if the app is
even more complicated,

00:05:59.220 --> 00:06:02.280
and the repository is also
observing data sources,

00:06:02.280 --> 00:06:02.880
in this case?

00:06:05.628 --> 00:06:08.150
Well, Yigit once said
to me that if you

00:06:08.150 --> 00:06:11.120
need a lifecycle
in your ViewModel,

00:06:11.120 --> 00:06:12.710
you probably need
a transformation.

00:06:12.710 --> 00:06:16.550
But this is actually wrong.

00:06:16.550 --> 00:06:17.630
Sorry, Yigit.

00:06:17.630 --> 00:06:23.120
So you know, what I say
is that you definitely

00:06:23.120 --> 00:06:24.140
need a transformation.

00:06:24.140 --> 00:06:26.240
Don't ever use a lifecycle
in your ViewModel.

00:06:26.240 --> 00:06:31.220
YIGIT BOYAR: So
different, [? bravo. ?]

00:06:31.220 --> 00:06:32.960
JOSE ALCERRECA: OK,
how do we make--

00:06:32.960 --> 00:06:35.229
the first sample is a
bridge between the view

00:06:35.229 --> 00:06:36.020
and the repository.

00:06:36.020 --> 00:06:38.690
How do we get to that LiveData?

00:06:38.690 --> 00:06:40.430
We use a transformations
map, which

00:06:40.430 --> 00:06:43.850
is what I call a one-to-one
static transformation.

00:06:43.850 --> 00:06:47.220
In the ViewModel, we
expose a LiveData.

00:06:47.220 --> 00:06:49.340
In this case, it's
called ViewModel result.

00:06:49.340 --> 00:06:52.970
And it's the result of
a transformation's map.

00:06:52.970 --> 00:06:56.310
The first parameter is the
source, the LiveData source,

00:06:56.310 --> 00:06:59.420
which is the LiveData
exposed by the repository.

00:06:59.420 --> 00:07:02.150
And the second parameter is
the transformation function.

00:07:02.150 --> 00:07:05.810
In this case, it's simply
converting from the data layer

00:07:05.810 --> 00:07:07.960
model to the UI model.

00:07:07.960 --> 00:07:11.450
And this is how the signature
would look like in Kotlin.

00:07:11.450 --> 00:07:15.710
It has source, which
is a LiveData of X.

00:07:15.710 --> 00:07:20.720
And it returns a LiveData Y.
So it's a breach of LiveDatas.

00:07:20.720 --> 00:07:24.230
And then in the middle, we
have a transformation function

00:07:24.230 --> 00:07:28.280
that transforms from X to
Y. It doesn't know anything

00:07:28.280 --> 00:07:31.779
about LiveData.

00:07:31.779 --> 00:07:34.070
YIGIT BOYAR: So when you
establish that transformation,

00:07:34.070 --> 00:07:37.610
the key here is that the
lifecycle is automatically

00:07:37.610 --> 00:07:39.630
carried over for you.

00:07:39.630 --> 00:07:42.670
So say you run a transformation
of couple of LiveDatas.

00:07:42.670 --> 00:07:45.820
And at the end, it is a
LiveData that you hold onto.

00:07:45.820 --> 00:07:48.950
When someone subscribes
to it, that lifecycle

00:07:48.950 --> 00:07:53.060
is automatically propagated
to the inner LiveData elements

00:07:53.060 --> 00:07:54.650
without you doing anything.

00:07:54.650 --> 00:07:56.180
And it's completely
managed by us.

00:07:56.180 --> 00:07:59.180
So it's completely safe.

00:07:59.180 --> 00:08:02.550
Another transformation we
provide is switch maps.

00:08:02.550 --> 00:08:04.069
When do we need this?

00:08:04.069 --> 00:08:05.610
Imagine you have an
application where

00:08:05.610 --> 00:08:08.550
you have a user measure that
keeps the logged in user ID

00:08:08.550 --> 00:08:10.420
somewhere, like in a disk.

00:08:10.420 --> 00:08:14.100
And whenever that logged in
user ID, when you grab it,

00:08:14.100 --> 00:08:16.350
you need to talk to
your user repository

00:08:16.350 --> 00:08:18.300
to get the actual user object.

00:08:18.300 --> 00:08:21.750
And that probably goes to the
database and also the server

00:08:21.750 --> 00:08:23.620
to return you this user object.

00:08:23.620 --> 00:08:26.400
But that repository returns
your LiveData as well.

00:08:26.400 --> 00:08:28.590
Because user object
might change, right?

00:08:28.590 --> 00:08:30.570
It may return you the
cache one while it

00:08:30.570 --> 00:08:32.110
updates from the server.

00:08:32.110 --> 00:08:33.600
So you're in a
situation where you

00:08:33.600 --> 00:08:36.059
have a LiveData of
a logged in user ID

00:08:36.059 --> 00:08:37.530
and a LiveData of a user.

00:08:37.530 --> 00:08:39.480
And you need to
chain these things.

00:08:39.480 --> 00:08:44.070
So map works if you are
chaining from an ID to a user.

00:08:44.070 --> 00:08:47.740
But how do we change from an
ID to a LiveData of a user?

00:08:47.740 --> 00:08:49.456
That's switch map.

00:08:49.456 --> 00:08:53.730
So if you look at that example,
basically, we call switch map.

00:08:53.730 --> 00:08:55.980
We provided this
user ID LiveData.

00:08:55.980 --> 00:08:57.610
That's a LiveData.

00:08:57.610 --> 00:09:01.920
And then our function this
time returns the LiveData.

00:09:01.920 --> 00:09:03.640
So the signature
looks like this.

00:09:03.640 --> 00:09:04.770
You have a source.

00:09:04.770 --> 00:09:06.700
And then you have a LiveData.

00:09:06.700 --> 00:09:12.320
And you provide a function
that converts the value

00:09:12.320 --> 00:09:14.420
X to a LiveData.

00:09:14.420 --> 00:09:16.480
What this technically
does is, every time

00:09:16.480 --> 00:09:19.180
that user ID changes,
it calls your function.

00:09:19.180 --> 00:09:20.680
You give it a new LiveData.

00:09:20.680 --> 00:09:22.930
It unsubscribes from
the previous LiveData

00:09:22.930 --> 00:09:25.630
you returned, and then
subscribes to the new one.

00:09:25.630 --> 00:09:26.800
It's like switching tracks.

00:09:26.800 --> 00:09:29.960
Or it comes from
like switchboards.

00:09:29.960 --> 00:09:32.300
But it is completely
managed for you.

00:09:32.300 --> 00:09:33.760
And it's still lifecycle-aware.

00:09:33.760 --> 00:09:37.600
You get all the benefits
of using LiveData.

00:09:37.600 --> 00:09:39.940
Now, we only provide
map and switch map.

00:09:39.940 --> 00:09:42.310
We don't have a million
transformations,

00:09:42.310 --> 00:09:43.840
like some other libraries.

00:09:46.510 --> 00:09:48.400
But this is very limiting.

00:09:48.400 --> 00:09:50.890
And sometimes you may
want to write your own.

00:09:50.890 --> 00:09:52.750
And we actually don't
want to provide many.

00:09:52.750 --> 00:09:56.090
But if you want to write
your own, it's very easy.

00:09:56.090 --> 00:09:59.650
If I show you our like, little
the code we have for the map

00:09:59.650 --> 00:10:02.210
implementation that
was talked about,

00:10:02.210 --> 00:10:06.240
it doesn't see the source
and it returns the LiveData.

00:10:06.240 --> 00:10:07.990
And you give it a
function, right?

00:10:07.990 --> 00:10:11.920
All it does is create this
mediator LiveData class,

00:10:11.920 --> 00:10:15.100
and adds the given source as
a source for this mediator

00:10:15.100 --> 00:10:15.670
LiveData.

00:10:15.670 --> 00:10:16.690
What [INAUDIBLE]?

00:10:16.690 --> 00:10:20.110
It kind of tells us that the
value of this mediator LiveData

00:10:20.110 --> 00:10:23.200
is derived from
this other LiveData.

00:10:23.200 --> 00:10:27.480
So whenever that other LiveData
changes, call might callback.

00:10:27.480 --> 00:10:29.290
And in the callback,
we basically

00:10:29.290 --> 00:10:32.800
apply the function to the
value and set as a value

00:10:32.800 --> 00:10:34.120
on the mediator LiveData.

00:10:34.120 --> 00:10:36.110
This is like super
simple to write.

00:10:36.110 --> 00:10:38.800
And there is no lifecycle here.

00:10:38.800 --> 00:10:42.940
But all of this code
is lifecycle-aware.

00:10:42.940 --> 00:10:46.319
So if it's so easy,
let's create a new one.

00:10:46.319 --> 00:10:47.860
Let's say we want
to create something

00:10:47.860 --> 00:10:49.000
where users filling a form.

00:10:49.000 --> 00:10:50.166
You have a bunch of strings.

00:10:50.166 --> 00:10:52.810
And you want to have the total
column showing somewhere.

00:10:52.810 --> 00:10:55.830
So you have a LiveData
and another LiveData.

00:10:55.830 --> 00:10:58.690
And you basically have
a LiveData of integer

00:10:58.690 --> 00:11:01.570
that has the total number of
characters in those LiveData

00:11:01.570 --> 00:11:02.440
elements.

00:11:02.440 --> 00:11:06.670
And this integer updates if
any of those values update.

00:11:06.670 --> 00:11:09.040
So we called our
function totalLength.

00:11:09.040 --> 00:11:11.640
We receive a list of LiveDatas.

00:11:11.640 --> 00:11:13.690
And we return a LiveData.

00:11:13.690 --> 00:11:16.717
What we do here is we
have a sound function.

00:11:16.717 --> 00:11:17.800
It's actually very simple.

00:11:17.800 --> 00:11:19.480
It goes through all
of the LiveDatas

00:11:19.480 --> 00:11:21.640
and sums their are length.

00:11:21.640 --> 00:11:23.500
We need to account
for nulls here.

00:11:23.500 --> 00:11:25.470
Because LiveData allows nulls.

00:11:25.470 --> 00:11:27.750
So you need to be aware of it.

00:11:27.750 --> 00:11:28.750
But this is very simple.

00:11:28.750 --> 00:11:31.090
It's basically look at
all the LiveData values,

00:11:31.090 --> 00:11:33.070
and sum the total length.

00:11:33.070 --> 00:11:37.180
Once we did that, we
add each given LiveData

00:11:37.180 --> 00:11:39.060
as a source to our mediator.

00:11:39.060 --> 00:11:42.130
It basically says the
value of this mediator

00:11:42.130 --> 00:11:44.110
depends on these
other LiveDatas.

00:11:44.110 --> 00:11:47.050
So anytime any of them
changes, the framework

00:11:47.050 --> 00:11:49.630
calls back our doSum
function, which

00:11:49.630 --> 00:11:53.050
calculates the new value
for the mediator LiveData.

00:11:53.050 --> 00:11:53.720
And this is it.

00:11:53.720 --> 00:11:56.050
It's like four lines of code.

00:11:56.050 --> 00:11:58.720
And you have an operation,
a transformation

00:11:58.720 --> 00:12:01.590
on your LiveDatas.

00:12:01.590 --> 00:12:04.530
Now, there are some
common mistakes

00:12:04.530 --> 00:12:06.360
you can make while
using LiveData.

00:12:06.360 --> 00:12:10.370
And we want to touch
base on these things.

00:12:10.370 --> 00:12:14.070
One thing we see a lot is let's
say you make a web request.

00:12:14.070 --> 00:12:15.540
It returns you a giant JSON.

00:12:15.540 --> 00:12:18.000
And then you convert
it to your objects.

00:12:18.000 --> 00:12:20.640
Using your LiveData
transformation for doing that

00:12:20.640 --> 00:12:22.170
is not a good idea.

00:12:22.170 --> 00:12:24.730
Because LiveData
is a value holder.

00:12:24.730 --> 00:12:27.690
So the long string you
fetch from your server

00:12:27.690 --> 00:12:29.250
is going to stay in memory.

00:12:29.250 --> 00:12:30.630
It's going to hold onto that.

00:12:30.630 --> 00:12:33.630
So you probably don't want
to use LiveData for something

00:12:33.630 --> 00:12:34.260
like that.

00:12:34.260 --> 00:12:37.690
Just do it as a
one shot operation.

00:12:37.690 --> 00:12:39.290
JOSE ALCERRECA:
OK, the second item

00:12:39.290 --> 00:12:42.850
is about sharing
instances of LiveData.

00:12:42.850 --> 00:12:48.770
At one point, I was trying to
make an app with LiveDatas.

00:12:48.770 --> 00:12:51.230
And I had a repository
that was a Singleton.

00:12:51.230 --> 00:12:53.430
And there was only one
observer in the activity.

00:12:53.430 --> 00:12:56.420
So I said, OK, I can
just save some LiveDatas

00:12:56.420 --> 00:12:58.880
and share a single LiveData.

00:12:58.880 --> 00:13:00.080
I had something like this.

00:13:00.080 --> 00:13:03.440
A repository, it
takes a data source.

00:13:03.440 --> 00:13:05.690
And then the mutable
LiveData that we

00:13:05.690 --> 00:13:09.320
are returning in loadItem
is shared by everyone

00:13:09.320 --> 00:13:12.080
that calls loadItem.

00:13:12.080 --> 00:13:13.740
Now, this is fine.

00:13:13.740 --> 00:13:14.610
It works.

00:13:14.610 --> 00:13:16.520
But there is a very
interesting edge case.

00:13:16.520 --> 00:13:21.680
And this anti-pattern is about
you thinking which observers

00:13:21.680 --> 00:13:25.480
are going to be active.

00:13:25.480 --> 00:13:28.520
And the edge case is
activity transitions.

00:13:28.520 --> 00:13:32.510
There is this case in Android,
where two activities are going

00:13:32.510 --> 00:13:34.920
to be active at the same time.

00:13:34.920 --> 00:13:38.450
So imagine activity one observes
item number one and activity

00:13:38.450 --> 00:13:40.880
two observes item number two.

00:13:40.880 --> 00:13:44.240
When we load activity
two, it's going

00:13:44.240 --> 00:13:47.120
to load data for item two.

00:13:47.120 --> 00:13:49.760
But because they are
sharing the same LiveData,

00:13:49.760 --> 00:13:52.400
activity one is also going
to receive that data.

00:13:52.400 --> 00:13:54.624
And because it's in the
middle of an animation,

00:13:54.624 --> 00:13:55.790
you're going to see a flash.

00:13:55.790 --> 00:13:57.170
You're going to see a glitch.

00:13:57.170 --> 00:14:00.044
And obviously, that's a
very bad user experience.

00:14:00.044 --> 00:14:01.460
YIGIT BOYAR: Yeah,
basically like,

00:14:01.460 --> 00:14:02.770
if your class is a repository.

00:14:02.770 --> 00:14:06.410
And you created a field that's
an instance of LiveData,

00:14:06.410 --> 00:14:07.812
you're probably doing it wrong.

00:14:07.812 --> 00:14:09.270
JOSE ALCERRECA:
Yeah, the solution,

00:14:09.270 --> 00:14:12.480
obviously, is to create
a LiveData every time.

00:14:12.480 --> 00:14:13.430
It's very lightweight.

00:14:13.430 --> 00:14:16.670
You're not going to save
much by avoiding this.

00:14:16.670 --> 00:14:20.120
The third item is
about where and when

00:14:20.120 --> 00:14:22.490
to create your transformations.

00:14:22.490 --> 00:14:24.650
And this is all about wiring.

00:14:24.650 --> 00:14:27.650
It's similar to when
you create a circuit.

00:14:27.650 --> 00:14:28.910
You lay down your components.

00:14:28.910 --> 00:14:30.610
And you wire everything up.

00:14:30.610 --> 00:14:33.260
And for a known set
of inputs, you're

00:14:33.260 --> 00:14:35.720
going to have a
known set of outputs.

00:14:35.720 --> 00:14:38.420
But you don't unplug a wire
while it's in operation,

00:14:38.420 --> 00:14:39.680
and plug it somewhere else.

00:14:39.680 --> 00:14:40.460
Right?

00:14:40.460 --> 00:14:43.460
This is exactly what
this ViewModel is doing.

00:14:43.460 --> 00:14:46.520
Lots of horrible things
happening in this ViewModel,

00:14:46.520 --> 00:14:49.530
by the way.

00:14:49.530 --> 00:14:50.530
For starters--

00:14:50.530 --> 00:14:53.190
YIGIT BOYAR: We should have like
a don't do this in this slide.

00:14:53.190 --> 00:14:54.960
JOSE ALCERRECA: It says
don't do this literally.

00:14:54.960 --> 00:14:56.084
YIGIT BOYAR: That doesn't--

00:14:56.084 --> 00:14:57.590
OK.

00:14:57.590 --> 00:14:59.850
Because actually someone
will copy/paste it and then

00:14:59.850 --> 00:15:02.064
blame us for recommending it.

00:15:02.064 --> 00:15:04.230
JOSE ALCERRECA: That's the
standard way of doing it.

00:15:04.230 --> 00:15:08.370
So first, it's exposing
itemData, which is a variable.

00:15:08.370 --> 00:15:09.140
It's not a val.

00:15:09.140 --> 00:15:10.400
It's a var.

00:15:10.400 --> 00:15:15.060
And also, it's exposing
a mutable LiveData.

00:15:15.060 --> 00:15:17.930
You should almost never do this.

00:15:17.930 --> 00:15:20.940
To weigh data binding is
an exception to this maybe.

00:15:20.940 --> 00:15:22.440
You should always
expose something

00:15:22.440 --> 00:15:26.970
that is immutable, so that
your observers can change it.

00:15:26.970 --> 00:15:30.240
So after subscription,
we call loadData

00:15:30.240 --> 00:15:32.970
from our activity to
set the ID of the thing

00:15:32.970 --> 00:15:34.390
that we want to load.

00:15:34.390 --> 00:15:37.900
And then we are reassigning
itemData to something new.

00:15:37.900 --> 00:15:40.380
But the subscription
already happened.

00:15:40.380 --> 00:15:42.930
So the observer is not
going to know that you

00:15:42.930 --> 00:15:44.955
made this reassignment.

00:15:44.955 --> 00:15:46.459
The solution--

00:15:46.459 --> 00:15:48.000
YIGIT BOYAR: Actually,
even if you're

00:15:48.000 --> 00:15:52.145
returning the LiveData there and
your observer's resubscribing

00:15:52.145 --> 00:15:55.794
to the new LiveData, now it is
subscribed to the previous one

00:15:55.794 --> 00:15:56.460
and the new one.

00:15:56.460 --> 00:15:59.126
Because you never
removed the subscription.

00:15:59.126 --> 00:16:00.750
JOSE ALCERRECA: So
the solution to this

00:16:00.750 --> 00:16:04.020
requires a little
bit of planning.

00:16:04.020 --> 00:16:05.670
We have two LiveDatas.

00:16:05.670 --> 00:16:08.670
One is mutable and it's
private to this ViewModel.

00:16:08.670 --> 00:16:10.080
And the other one
is the one that

00:16:10.080 --> 00:16:14.460
is exposed to the view
from the ViewModel.

00:16:14.460 --> 00:16:16.650
And it is a
transformation switch map.

00:16:16.650 --> 00:16:20.160
The source of this switch map
is that immutable LiveData.

00:16:20.160 --> 00:16:24.270
So that every time
itemID changes, then

00:16:24.270 --> 00:16:26.550
the transformation function
is going to be called.

00:16:26.550 --> 00:16:29.580
And data source, which
returns the LiveData,

00:16:29.580 --> 00:16:32.930
is going to be called
with the appropriate ID.

00:16:32.930 --> 00:16:36.910
After the subscription to
this item data has happened,

00:16:36.910 --> 00:16:37.980
we call loadData.

00:16:37.980 --> 00:16:39.210
We pass the string.

00:16:39.210 --> 00:16:41.670
This ID might come from
an intent in the activity,

00:16:41.670 --> 00:16:42.510
or whatever.

00:16:42.510 --> 00:16:47.010
And then when we set the value,
then it triggers an update.

00:16:47.010 --> 00:16:51.465
And everything is going to
work as you expect it to work.

00:16:51.465 --> 00:16:53.920
YIGIT BOYAR: OK,
so [INAUDIBLE] like

00:16:53.920 --> 00:16:55.620
to think that
LiveData is awesome

00:16:55.620 --> 00:16:57.070
and it solves all the problems.

00:16:57.070 --> 00:16:58.120
It doesn't.

00:16:58.120 --> 00:17:01.280
It's designed for a
very specific use case.

00:17:01.280 --> 00:17:05.170
And we see people trying
to use it in other areas.

00:17:05.170 --> 00:17:06.430
And they struggle with it.

00:17:06.430 --> 00:17:08.640
So I want to make it clear.

00:17:08.640 --> 00:17:12.130
If you're writing an application
that has lots of like operators

00:17:12.130 --> 00:17:15.819
and streams, you totally
bought into this reactive idea,

00:17:15.819 --> 00:17:17.339
just use our Rx Java.

00:17:17.339 --> 00:17:20.770
Like don't try to add like a
million transformations on top

00:17:20.770 --> 00:17:21.940
of LiveData to make it.

00:17:21.940 --> 00:17:25.000
It's not designed for that.

00:17:25.000 --> 00:17:27.339
Just [INAUDIBLE].

00:17:27.339 --> 00:17:30.730
If you have things that are not
related to a lifecycle or a UI.

00:17:30.730 --> 00:17:34.150
Let's say you are trying to
synchronize the user's location

00:17:34.150 --> 00:17:36.490
to your backend service.

00:17:36.490 --> 00:17:37.454
There is no UI there.

00:17:37.454 --> 00:17:38.620
There is no lifecycle there.

00:17:38.620 --> 00:17:41.110
Like, there is no reason to
use LiveData for something

00:17:41.110 --> 00:17:41.800
like that.

00:17:41.800 --> 00:17:43.650
Either use a callback,
or if you're using

00:17:43.650 --> 00:17:46.020
Rx Java, that will still work.

00:17:46.020 --> 00:17:50.280
And other use case is having
these like one-shot operations,

00:17:50.280 --> 00:17:51.140
like mentioned.

00:17:51.140 --> 00:17:52.381
You fetch some data.

00:17:52.381 --> 00:17:53.380
And then you convert it.

00:17:53.380 --> 00:17:56.590
You write into your database,
load back, and return it.

00:17:56.590 --> 00:17:58.150
For those things,
if you are using

00:17:58.150 --> 00:18:00.220
[INAUDIBLE],,
coroutines are actually

00:18:00.220 --> 00:18:03.146
like a new, exciting area.

00:18:03.146 --> 00:18:05.370
Again, you might use
[INAUDIBLE] concurrent.

00:18:05.370 --> 00:18:07.240
Or you can use Rx Java.

00:18:07.240 --> 00:18:10.330
But don't use LiveData, because
we didn't design it for that.

00:18:10.330 --> 00:18:13.930
LiveData works very well as
the last layer for your UI,

00:18:13.930 --> 00:18:15.520
it's perfectly OK.

00:18:15.520 --> 00:18:17.360
It is kind of the best solution.

00:18:17.360 --> 00:18:22.250
But if you try to scale, it
is just not going to work.

00:18:22.250 --> 00:18:24.850
So many things we mentioned
in this talk-- actually,

00:18:24.850 --> 00:18:27.670
Jose has blog posts on the
Android Developers Medium

00:18:27.670 --> 00:18:29.010
publishing.

00:18:29.010 --> 00:18:30.500
You can go read them.

00:18:30.500 --> 00:18:32.740
Or check out our
samples on GitHub.

00:18:32.740 --> 00:18:34.720
We have simple
usages of LiveData,

00:18:34.720 --> 00:18:38.050
as well as like, a complete
application, the GitHub browser

00:18:38.050 --> 00:18:39.700
sample with like,
using [? Groom. ?]

00:18:39.700 --> 00:18:43.260
It has like multiple data
sources, transformations.

00:18:43.260 --> 00:18:46.390
And also you can look at the
source code for IO scheduler

00:18:46.390 --> 00:18:48.460
app, which is the same
app in Dev Summit.

00:18:48.460 --> 00:18:51.060
And if it has bugs,
you can blame this guy.

00:18:51.060 --> 00:18:54.160
He wrote it.

00:18:54.160 --> 00:18:55.940
Thank you very much for coming.

00:18:55.940 --> 00:18:57.130
I hope this was useful.

00:18:57.130 --> 00:18:58.272
And we will be in the--

00:18:58.272 --> 00:18:59.230
JOSE ALCERRECA: Around.

00:18:59.230 --> 00:19:01.551
YIGIT BOYAR: --area like,
around after the talks.

00:19:01.551 --> 00:19:02.050
Thank you.

00:19:02.050 --> 00:19:03.133
JOSE ALCERRECA: Thank you.

00:19:03.133 --> 00:19:05.910
[MUSIC PLAYING]

