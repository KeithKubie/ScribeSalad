WEBVTT
Kind: captions
Language: en

00:00:00.590 --> 00:00:03.700
IAN LAKE: So there I was,
building a great responsive UI,

00:00:03.700 --> 00:00:04.820
when it hit me.

00:00:04.820 --> 00:00:08.050
Multi-Window is going
to change everything.

00:00:08.050 --> 00:00:08.870
Well, OK.

00:00:08.870 --> 00:00:10.280
Maybe not everything.

00:00:10.280 --> 00:00:12.400
But there are some
special considerations

00:00:12.400 --> 00:00:14.280
when it comes to
building and designing

00:00:14.280 --> 00:00:17.050
for Split-Screen Multi-Window.

00:00:17.050 --> 00:00:19.140
Now, one thing
that hasn't changed

00:00:19.140 --> 00:00:21.790
is the importance
of a responsive UI.

00:00:21.790 --> 00:00:25.140
A responsive UI is one that's
able to adapt to the space

00:00:25.140 --> 00:00:26.080
available.

00:00:26.080 --> 00:00:29.390
So some of the same techniques
you've used before just

00:00:29.390 --> 00:00:33.530
become even more important
when users can resize your app.

00:00:33.530 --> 00:00:36.780
Check out our other video on the
basics of building a responsive

00:00:36.780 --> 00:00:40.580
UI and the patterns you can use
to adapt your layout to changes

00:00:40.580 --> 00:00:42.410
in size.

00:00:42.410 --> 00:00:44.710
Thankfully, building
a responsive app

00:00:44.710 --> 00:00:47.820
for your existing
users covers almost all

00:00:47.820 --> 00:00:51.060
of the configurations you'll see
in Split-Screen Multi-Window.

00:00:51.060 --> 00:00:54.530
But there are two relatively
unique configurations

00:00:54.530 --> 00:00:57.610
you might consider when
designing your app.

00:00:57.610 --> 00:01:02.670
First is the 16 by 9 layout
on mobile devices in portrait.

00:01:02.670 --> 00:01:05.500
Here it's important to keep in
mind the heavily constrained

00:01:05.500 --> 00:01:07.390
vertical space.

00:01:07.390 --> 00:01:10.990
Make sure users can
actually see some content

00:01:10.990 --> 00:01:14.040
between fixed navigation
elements, like an expanded app

00:01:14.040 --> 00:01:16.570
bar, and bottom navbar.

00:01:16.570 --> 00:01:20.890
The others is the 34.15%
layout on tablets.

00:01:20.890 --> 00:01:23.850
Here you have an extremely
wide aspect ratio

00:01:23.850 --> 00:01:25.730
on portrait devices.

00:01:25.730 --> 00:01:27.470
A technique we've
found useful is

00:01:27.470 --> 00:01:29.620
to start with your
mobile device layouts

00:01:29.620 --> 00:01:33.490
and stretch them to fit
this new configuration.

00:01:33.490 --> 00:01:35.860
Once you have a
fully responsive UI,

00:01:35.860 --> 00:01:40.420
now comes the fun part, taking
advantage of Multi-Window.

00:01:40.420 --> 00:01:43.680
By default,
Multi-Window is enabled.

00:01:43.680 --> 00:01:47.090
And it's enabled for
your entire task stack.

00:01:47.090 --> 00:01:50.150
That means if your root
activity supports Multi-Window,

00:01:50.150 --> 00:01:53.460
every activity started from
that root activity also

00:01:53.460 --> 00:01:55.732
needs to support Multi-Window.

00:01:55.732 --> 00:01:59.450
This also applies to any
exported activities you have.

00:01:59.450 --> 00:02:03.430
They'll inherit the Multi-Window
capabilities of the other app

00:02:03.430 --> 00:02:07.346
and therefore should always
support Multi-Window.

00:02:07.346 --> 00:02:10.729
Now, when in Multi-Window
mode, the minimal size

00:02:10.729 --> 00:02:13.980
is 220 by 220 dp.

00:02:13.980 --> 00:02:16.370
You can use minheight
and minwidth

00:02:16.370 --> 00:02:19.410
to set a larger minimum
size, but in Split-Screen

00:02:19.410 --> 00:02:22.820
Multi-Window, users can
still resize you smaller.

00:02:22.820 --> 00:02:24.390
You'll just get cropped off.

00:02:24.390 --> 00:02:27.460
And no one likes an
inaccessible button.

00:02:27.460 --> 00:02:29.420
So try removing as
much as possible

00:02:29.420 --> 00:02:32.720
to get down to
that minimum size.

00:02:32.720 --> 00:02:34.680
Now, beyond the
first priority of,

00:02:34.680 --> 00:02:36.765
does my app run in
Multi-Window mode,

00:02:36.765 --> 00:02:39.980
it should come as no surprise
that the best experience

00:02:39.980 --> 00:02:44.000
here for users is the
fast, smooth transition

00:02:44.000 --> 00:02:47.020
from the biggest screen
sizes, down to the smallest,

00:02:47.020 --> 00:02:49.200
and vice versa.

00:02:49.200 --> 00:02:52.170
If your tablet or mobile
layouts are very similar,

00:02:52.170 --> 00:02:55.130
you may find this to
already be the case.

00:02:55.130 --> 00:02:56.580
The important thing
to remember is

00:02:56.580 --> 00:03:00.980
you don't want the user to feel
lost when they resize your app.

00:03:00.980 --> 00:03:03.390
If your layouts are
vastly different,

00:03:03.390 --> 00:03:05.260
don't change between them.

00:03:05.260 --> 00:03:08.560
Instead, try scaling
your tablet UI down

00:03:08.560 --> 00:03:10.470
to fit the smaller space.

00:03:10.470 --> 00:03:15.360
That way your app will be
consistent on all sizes.

00:03:15.360 --> 00:03:18.600
Keep in mind that just like
any other configuration change,

00:03:18.600 --> 00:03:22.510
the default behavior is to kill
and recreate your activity when

00:03:22.510 --> 00:03:26.750
it's resized, reloading all
of your resources for you.

00:03:26.750 --> 00:03:29.980
Assuming you save your state
using onSaveInstanceState

00:03:29.980 --> 00:03:32.010
and use loaders or
other techniques

00:03:32.010 --> 00:03:34.580
to keep data across
configuration changes,

00:03:34.580 --> 00:03:37.150
this should be really fast.

00:03:37.150 --> 00:03:39.190
However, if you want
to take total control

00:03:39.190 --> 00:03:41.950
and reload only the
exact things you need,

00:03:41.950 --> 00:03:45.050
you can handle configuration
changes yourself

00:03:45.050 --> 00:03:48.510
by adding the configChanges
attribute to your activity

00:03:48.510 --> 00:03:51.980
and then applying the changes
in onConfigurationChanged.

00:03:51.980 --> 00:03:53.640
Not for the faint
of heart though.

00:03:53.640 --> 00:03:55.910
Test thoroughly.

00:03:55.910 --> 00:03:59.130
Now, if you're a fully immersive
experience like a game,

00:03:59.130 --> 00:03:59.910
I get it.

00:03:59.910 --> 00:04:02.990
Maybe you want to
disable Multi-Window.

00:04:02.990 --> 00:04:08.080
If you aren't targeting API
24, adding Android orientation

00:04:08.080 --> 00:04:10.570
or Android immersive
to your manifest

00:04:10.570 --> 00:04:13.220
will disable Multi-Window.

00:04:13.220 --> 00:04:16.029
And, of course, the new
resizableactivity attribute

00:04:16.029 --> 00:04:18.769
can be added to your application
or to your root activity

00:04:18.769 --> 00:04:21.040
to opt out of Multi-Window.

00:04:21.040 --> 00:04:23.140
Check out the blog post
linked in the description

00:04:23.140 --> 00:04:25.910
for all the details,
and some other patterns,

00:04:25.910 --> 00:04:28.820
like relying on edge swipes,
that should be avoided

00:04:28.820 --> 00:04:31.040
to best support Multi-Window.

00:04:31.040 --> 00:04:33.080
Build a great responsive UI.

00:04:33.080 --> 00:04:35.240
Build a great
Multi-Window experience.

00:04:35.240 --> 00:04:38.660
But most importantly, just
continue to build better apps.

00:04:38.660 --> 00:04:42.010
[MUSIC PLAYING]

