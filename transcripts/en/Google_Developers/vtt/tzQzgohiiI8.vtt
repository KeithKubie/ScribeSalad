WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:11.780
&gt;&gt; GREGORIO: All right. Welcome. So good morning.
Welcome. I thought I found a really good hiding

00:00:11.780 --> 00:00:18.560
spot for my talk. Apparently, you guys are
dedicated. So, my name is Joe Gregorio. I'm

00:00:18.560 --> 00:00:25.950
a software engineer. I work on the infrastructure
side for and--the client side actually, for

00:00:25.950 --> 00:00:33.070
the API infrastructure that Google uses to
deliver APIs, so. And we're here right--in

00:00:33.070 --> 00:00:39.330
direction to Google APIs, as Tim mentioned,
in his keynote, this is the speaker meter

00:00:39.330 --> 00:00:46.870
for this particular track, so if you want
to scan that. So, the talk's going to be,

00:00:46.870 --> 00:00:51.370
just like it says, introduction to APIs. We're
going to go very slow. We're going over a

00:00:51.370 --> 00:00:59.340
lot of the pieces that we have in place for
APIs. This is not the only talk going on about

00:00:59.340 --> 00:01:07.220
Google APIs and adjunct to this talk is the
lab this afternoon, hands on with the Google

00:01:07.220 --> 00:01:13.720
APIs where we'll be basically going over the
same exact talk but much slower and with a

00:01:13.720 --> 00:01:19.330
lot of hands on in between, hands on working
with the tools and with some programming.

00:01:19.330 --> 00:01:24.780
The write up is listed as Python. If you don't
know Python, do not be afraid to come. It's

00:01:24.780 --> 00:01:30.870
very simple language. We're not doing a lot
of complex Python programming in that track,

00:01:30.870 --> 00:01:38.090
so just that I pitch that session for later.
So, it's Boot Camp, let's dive right into

00:01:38.090 --> 00:01:44.170
the code, okay. This is Python code. I don't
expect you to understand it. And by the end

00:01:44.170 --> 00:01:51.530
of this talk, I don't really expect you to
understand it either. But, hopefully, you'll

00:01:51.530 --> 00:01:57.170
have a better idea of what's going in the
code by the end of this talk and more importantly,

00:01:57.170 --> 00:02:03.441
you will know where to go to learn the pieces
that you don't know. This is a, teach a person

00:02:03.441 --> 00:02:08.819
to fish rather than giving them a fish type
of talk. So, hopefully by the end of the talk,

00:02:08.819 --> 00:02:16.379
you'll know where to go. Before we start talking
about, you know, getting into to some of the

00:02:16.379 --> 00:02:22.170
meat, I want to give you a little history
how we got here. So, Google has a lot of APIs,

00:02:22.170 --> 00:02:30.939
all right. I think close to a hundred APIs
and we've been at this for awhile building

00:02:30.939 --> 00:02:42.769
APIs. Last year at I/O, we introduced some
new API infrastructure that we've been building

00:02:42.769 --> 00:02:48.139
and that allowed us to build APIs easier and
also to build client libraries easier. The

00:02:48.139 --> 00:02:54.329
reason we did that is because at Google scale,
we have, you know, an MxÃ³what's called an

00:02:54.329 --> 00:03:01.150
MxN problem, right? We have close to 100 APIs.
We also have at least five languages that

00:03:01.150 --> 00:03:07.299
we want to support on a regular basis. So,
every time we add either another language

00:03:07.299 --> 00:03:14.120
or another API, that's a lot of updates. That
MxN, you know, 100 APIs by five languages,

00:03:14.120 --> 00:03:19.980
that's 500 points you got to fill in; that
doesn't really scale very well. And so we

00:03:19.980 --> 00:03:26.099
came up with this new API infrastructure that,
again, we introduced that I/O last year that

00:03:26.099 --> 00:03:33.090
helps us. It builds, gives us some common
information on the backend and some common

00:03:33.090 --> 00:03:38.129
information on the client side that makes
it easier to build libraries or to add a new

00:03:38.129 --> 00:03:45.529
API to an existing library. So part of that
is discovery and that discovery document is

00:03:45.529 --> 00:03:51.599
a machine readable representation of what
an API looks like, all right? This is useful

00:03:51.599 --> 00:03:56.180
because it's useful for clients, if you're
running a client library you can consume that

00:03:56.180 --> 00:04:01.319
format and build the client using just the
data there. Or it's useful for building tools.

00:04:01.319 --> 00:04:06.739
I'm going to show you a few tools that are
built on top of Discovery. We use it ourselves.

00:04:06.739 --> 00:04:10.430
If you want--I'm not going to actually going
to go into the format or anything like that.

00:04:10.430 --> 00:04:14.969
If you're interested in it, we have a section
Building Custom Client Libraries for Google

00:04:14.969 --> 00:04:20.480
APIs at Google I/O proper. That would be going
at a very great detail. So, like I said, we

00:04:20.480 --> 00:04:28.260
support, you know, libraries in different
languages. Okay, but we have lots of APIs.

00:04:28.260 --> 00:04:33.910
These are the APIs that we have today that
are built on top of that new API infrastructure.

00:04:33.910 --> 00:04:38.990
Now you're at Google I/O, who knows during
an I/O this list may actually get longer.

00:04:38.990 --> 00:04:45.630
We won't go into that now. Look at these APIs.
So we've got Buzz, right, if you use Buzz,

00:04:45.630 --> 00:04:51.780
there's an API for Buzz. So if you want to
programmatically add things to your activity

00:04:51.780 --> 00:04:56.580
stream, add comments, things like that, that's
what that's for. Latitude API, that's our

00:04:56.580 --> 00:05:02.380
location API, you know where your phone. Search
API for shopping, just like it says, it allows

00:05:02.380 --> 00:05:07.140
you to programmatically look to the product
search. Google URL Shortener, this is actually

00:05:07.140 --> 00:05:11.370
the one we're going to focus on for this talk
to kind of get our feet wet looking at all

00:05:11.370 --> 00:05:17.250
the various APIs. It's a good API because
it's small. It's easy to understand but it

00:05:17.250 --> 00:05:21.620
covers, you know, some of the bases that we
want to talk about. So, it's good in that

00:05:21.620 --> 00:05:27.530
respect. Google Custom Search lets you set
up a search engine just for your narrow slice

00:05:27.530 --> 00:05:31.390
of the Internet that you want to search. Moderator
API is an API for the moderator that we introduced--I

00:05:31.390 --> 00:05:40.600
think it was last year. Moderator allows you
to--you know, people ask questions. Prediction

00:05:40.600 --> 00:05:48.110
API, probably one of my favorite APIs allows
you to take large gobs of data and apply machine

00:05:48.110 --> 00:05:52.530
learning to them. And--so, you're going to
apply machine learning to that data and then

00:05:52.530 --> 00:05:56.390
go back and use the prediction API a second
time to say, "Okay, I've got this one sample,

00:05:56.390 --> 00:06:00.840
what do you predict is, you know, going to
be? What's going to happen with that data?"

00:06:00.840 --> 00:06:06.830
So, that's really cool. And diacrities allows
you to pass in some foreign languages. A non

00:06:06.830 --> 00:06:13.140
English languages and get diacritical marks
for them on how to pronounce them. So, and

00:06:13.140 --> 00:06:18.590
like I said, possibly many more coming soon.
So, let's look at Google URL Shortener. If

00:06:18.590 --> 00:06:24.330
you haven't seen this before, this is a product
from Google, goo.gl. So, let's go there and

00:06:24.330 --> 00:06:33.930
look at goo.gl. And it's a shortener service.
You type in your long URL and it gives you

00:06:33.930 --> 00:06:44.010
a shortened version of that, http://www.google.com/IO,
that's actually not a terribly long URL but

00:06:44.010 --> 00:06:51.670
I can shorten that and now I get this shortened
URL over here. Useful for when you're using

00:06:51.670 --> 00:06:55.540
services that restrict the number of characters
you're going to be, you know, you're allowed

00:06:55.540 --> 00:07:02.020
to type. If you're limited to, say, 140 characters,
text messages or if it's up on a slide at

00:07:02.020 --> 00:07:07.230
a presentation and people need to type it
in by hand. All useful things for reasons

00:07:07.230 --> 00:07:12.480
you would want to shorten a URI. So this is
the product. The cool part is, it does more

00:07:12.480 --> 00:07:23.680
than just shortening. What I can do is I can
actually get analytics based on the following

00:07:23.680 --> 00:07:30.010
of those URIs. So here's the analytics page.
Here's a URL that was shortened. The long

00:07:30.010 --> 00:07:37.240
URL is just Google.com. The shortened URL
is the FPS--capital S and you can see how

00:07:37.240 --> 00:07:43.830
many people have clicked through or used that
shortened URL to go to the long URL over time.

00:07:43.830 --> 00:07:49.750
There's that the referrers where that actually
occurred. You get to know the countries, the

00:07:49.750 --> 00:07:54.150
browsers, the platforms, like that. So, nice,
useful information you can get. Those analytics

00:07:54.150 --> 00:08:02.889
over different time ranges, weeks, months,
all time. So, that's a useful service but

00:08:02.889 --> 00:08:06.930
as a software developer it's not a too useful
service to you, right? You may want to add

00:08:06.930 --> 00:08:12.350
a shortening service to your product, right?
That's where it comes in useful, right? So

00:08:12.350 --> 00:08:20.750
then we introduced the Google URL Shortener
API. This is an API to do that same exact

00:08:20.750 --> 00:08:27.730
service on Google URL Shortener. So, here
is the link to the documentation. And here's

00:08:27.730 --> 00:08:36.260
a shortened link to the documentation. It's
all right there. Before we go diving into

00:08:36.260 --> 00:08:41.660
that documentation though, I want to take
a little detour into REST. So, all of the

00:08:41.660 --> 00:08:49.209
APIs that we've introduced are RESTful. Now,
in short, you know, what does REST mean? It

00:08:49.209 --> 00:08:56.320
means we're using http and we're using it
in a nice way, right? We're using it, you

00:08:56.320 --> 00:09:04.699
know, we're using a lot of the capabilities
of http and--so, REST. Let's do a brief introduction

00:09:04.699 --> 00:09:08.441
to that. Once we get that brief introduction
down that will help us understand kind of,

00:09:08.441 --> 00:09:13.610
the documentation. It will give us a framework
for understanding the documentation for all

00:09:13.610 --> 00:09:21.410
these APIs. So, one of the common idioms in
REST is this idea of a collection, right?

00:09:21.410 --> 00:09:22.589
It's a collection. It's a bag. It's a set.
It's a grouping of similar things, right?

00:09:22.589 --> 00:09:31.971
And lots of things in the world fall into
this idea of collections. Here, a collection--everything

00:09:31.971 --> 00:09:38.639
in that collection is called a resource, right?
Resources have URIs. So there's URI, they

00:09:38.639 --> 00:09:46.260
live out on the web, there's URI for them.
If I, you know, send an http get to that URI,

00:09:46.260 --> 00:09:51.240
I'll get back a representation of whatever
that resource is. So, one collection could

00:09:51.240 --> 00:09:52.240
be my buzz activities, all right? Each activity
in my--each activity in that activity stream

00:09:52.240 --> 00:09:53.240
has a URI. I do a get on it and in this case
I get back Jason, Jason representation of

00:09:53.240 --> 00:09:54.240
what that is. Which is nice, easy, I can manipulate
that programmatically. It could be contacts

00:09:54.240 --> 00:09:55.819
in a contact list. It could be shortened URLs,
right? That collection could be all the URLs

00:09:55.819 --> 00:10:03.879
I've ever shortened. But the important point
is they have URIs you call "get" on them,

00:10:03.879 --> 00:10:12.899
you get back a representation. Now, I could
take that representation, JSON, modify it

00:10:12.899 --> 00:10:13.899
in some way, whatever is legal for the API.
Modify it, update it, change something about

00:10:13.899 --> 00:10:21.680
it and call "put" or HTTP PUT with that JSON
right back to that same exact URI. That updates

00:10:21.680 --> 00:10:31.879
it within the collection. So it's a very simple
yin-yang thing there. I get it, modify it,

00:10:31.879 --> 00:10:38.639
put it, it's always back to that same URI.
If I want to remove something from the collection

00:10:38.639 --> 00:10:40.110
with something appropriate, I'll call delete
and that removes it from my activity stream.

00:10:40.110 --> 00:10:43.110
Or I can post. I'd take some of that JSON
representation of what the resource is, I

00:10:43.110 --> 00:10:52.509
post it to the collection and that's it. [INDISTINCT]I
can call "get" on that and that returns me

00:10:52.509 --> 00:11:06.019
a list of all the things that are in that
collection. So, this is really simple. Like

00:11:06.019 --> 00:11:19.199
I said, it's a bag. It's a group of stuff
and there's some rules for how to manipulate

00:11:19.199 --> 00:11:30.720
it. In this case, all those rules go by what
is available on HTTP. So, now we can start

00:11:30.720 --> 00:11:34.990
diving in to the Google URL Shortener API.
And this is why I wanted to take that little

00:11:34.990 --> 00:11:41.860
detour into REST because you could now see
the Google URL Shortener is broken up into

00:11:41.860 --> 00:11:47.129
one collection, right? There's our thing.
There's a URL collection. It's just a bag

00:11:47.129 --> 00:11:54.199
of collections. And here's those methods that
we talked about. I can insert a long URL into

00:11:54.199 --> 00:12:00.300
that collection. When I insert that long URL
that creates its shortened equivalent. I can

00:12:00.300 --> 00:12:06.199
get, if I know a shortened URL, I can call
HTTP GET on it and I can get the long URL

00:12:06.199 --> 00:12:13.329
of it. And finally list, I can get a list
of all my shortened URLs out of that collection.

00:12:13.329 --> 00:12:19.550
So, obviously this is a very small API, right?
If you look at Buzz, there's going to be lots

00:12:19.550 --> 00:12:23.959
of collections in there. That is why I like
the Shortener API because it's small but it

00:12:23.959 --> 00:12:27.970
gets to the point that there's these collections
and this is how you manipulate it. So, we

00:12:27.970 --> 00:12:32.339
can now go look at the documentation for the
Google URL Shortener API. I can look at the

00:12:32.339 --> 00:12:39.480
docs and I can go here and look at the reference
guide. And you'll now see, let me blow this

00:12:39.480 --> 00:12:52.639
up so that it's actually visible on the screen,
right? There's that what I told you about

00:12:52.639 --> 00:12:59.290
before. There--it's a collection. Insert,
get and list. And finally, URL resource. This

00:12:59.290 --> 00:13:03.779
is going to be, what is that presentation?
What's that thing I'm sending across the wire

00:13:03.779 --> 00:13:09.420
that represents a shortened URL? A member
of that collection. So, in this case, it's

00:13:09.420 --> 00:13:16.600
a shortened URL. The long URL is obviously
going to have to be in there. The status when

00:13:16.600 --> 00:13:21.809
it was created, analyticsID is going to be
the shortened URL. And we'll actually see

00:13:21.809 --> 00:13:26.550
this. We'll play around with this a little
more. So, down here, it's going to tell you

00:13:26.550 --> 00:13:40.910
what all the different properties are on that
object that goes back and forth. So, all right.

00:13:40.910 --> 00:13:47.070
So, that documentation describes, right, what
the representations are, what the URIs that

00:13:47.070 --> 00:13:52.009
you're going to be getting to and from and
the methods that get applied and the description

00:13:52.009 --> 00:13:58.970
of that. So, at this point we can send you
off into the woods, right? Take your favorite

00:13:58.970 --> 00:14:04.139
programming language or HTTP library and your
JSON--your favorite JSON library and go to

00:14:04.139 --> 00:14:09.222
town. And you could do that, right? But we
have more help available to get you going

00:14:09.222 --> 00:14:16.829
and up to speed on that. So, but like I said,
we have client libraries and we'll go through

00:14:16.829 --> 00:14:20.709
the list of client libraries yourself. We'll
go to the list of client libraries later.

00:14:20.709 --> 00:14:25.339
But if you're using a programming language
that we aren't covering right now, you may

00:14:25.339 --> 00:14:31.709
have to give that HTTP client library and
JSON library. And start building a client

00:14:31.709 --> 00:14:35.850
library. And if you are, you might want to
attend that "Building Custom Client Library"

00:14:35.850 --> 00:14:44.199
section I talked about at I/O. I believe that
someone's [INDISTINCT]. Let's go back. So--but

00:14:44.199 --> 00:14:49.829
we have help. One of the bits of help is APIs
explorer. APIs explorer is built on top of

00:14:49.829 --> 00:15:03.129
that discovery document. So, here, code.google.com/apis/explorer.
This is a tool for helping you navigate around

00:15:03.129 --> 00:15:11.100
and learn about APIs. It's a web based application.
It has all the APIs that are build on this

00:15:11.100 --> 00:15:17.800
API infrastructure on it and allows you to
actually make live requests and manipulate

00:15:17.800 --> 00:15:22.319
these APIs yourself. So, you can look down
this list--this is the list I showed you before:

00:15:22.319 --> 00:15:27.399
buzz, customsearch, diacritize, moderator,
prediction, shopping, site verification, looks

00:15:27.399 --> 00:15:34.199
like this--are there anyone in there? Okay,
urlshortener. There's our urlshortener, V-1

00:15:34.199 --> 00:15:38.319
is the version--there's right now only one
version of the urlshortener API. If there

00:15:38.319 --> 00:15:43.139
is another one, you'd had multiples to choose
from and here's those methods that we talked

00:15:43.139 --> 00:15:50.279
about on that collection. Get, insert and
list. So, I can actually start playing with

00:15:50.279 --> 00:15:56.980
this URL API live and I'm going to have actually
shrink this down a bit so I can get in here.

00:15:56.980 --> 00:16:05.649
SO, on get, I have two parameters over here.
I have the short URL and I have the projection,

00:16:05.649 --> 00:16:09.559
right? Analytics_clicks and analytics_topstrings
and full. So let's go back look actually at

00:16:09.559 --> 00:16:14.860
the reference documentation for that, so we
can line these two things up. So I have url.get,

00:16:14.860 --> 00:16:19.429
alright. Url.get method--this like, should
be able to expand. Get back to here. All right,

00:16:19.429 --> 00:16:34.689
can you see that? Okay. So, method requires
two query parameters, your API key--we're

00:16:34.689 --> 00:16:42.290
not going to talk about that right now. It
also understands the optional query parameter,

00:16:42.290 --> 00:16:46.819
the projection. And so, remember I pointed
to you to that resource that had all that

00:16:46.819 --> 00:16:52.029
information about that URI was, the shortened
URI. You can actually get subsets of that

00:16:52.029 --> 00:16:56.310
information. You may not need it all. So,
there's some abilities to get shortened bits

00:16:56.310 --> 00:17:05.020
of it. So, let's go back to APIs explorer.
So, in order to do this, the first thing I

00:17:05.020 --> 00:17:12.000
need is the short URL. So, http://u.gl/fbsS,
that is our shortened URL that we're looking

00:17:12.000 --> 00:17:21.400
at earlier and I'm just going to execute this
because that's my only required field. And

00:17:21.400 --> 00:17:27.860
I execute it. And so now you see what happened,
and did I get on https:googleapi/urlshortener/v1

00:17:27.860 --> 00:17:38.250
pass in the short URL and what is it do? It
gives me back JSON. It tells me what kind

00:17:38.250 --> 00:17:43.841
it is, obviously it's a URL shortener resource
but there's the short URL and there's the

00:17:43.841 --> 00:17:50.830
long version. Obviously, shortening google.com
is not a terribly good use of the service

00:17:50.830 --> 00:17:58.160
but you get the idea and the status is okay.
Now, I can go back up and say what projection

00:17:58.160 --> 00:18:03.730
I want. Do I want the clicks? Do I want the
top string or do I want full? I'm going to

00:18:03.730 --> 00:18:08.530
get full. I'd run rerun, that same exact query.
This is running live. It's going through my

00:18:08.530 --> 00:18:15.310
browser but it is still using that same API
and now I get to look at what the response

00:18:15.310 --> 00:18:21.000
would be if I wanted a full projection. So,
I've got my status, when I created it and

00:18:21.000 --> 00:18:28.250
the analytics for all time. How many times
was that expanded, the counts, all of that

00:18:28.250 --> 00:18:32.960
information that you saw in that web interface
that was available in the product, is available

00:18:32.960 --> 00:18:45.370
here through this search, through this API.
So, all the parts of the API. So this is an

00:18:45.370 --> 00:18:51.200
important part of learning to, you know, in
using these APIs. First, go check out the

00:18:51.200 --> 00:18:55.140
documentation. Second, play around it with
the APIs explorer and make sure it can do

00:18:55.140 --> 00:18:59.640
what you want it to do and then, as we'll
get to in a bit, actually start, you know,

00:18:59.640 --> 00:19:04.880
picking a client library and manipulating
it that way. So there is get, here's insert.

00:19:04.880 --> 00:19:10.620
I want to add a request. So insert doesn't
take any parameters, right? But I have to

00:19:10.620 --> 00:19:18.280
give it a JSON body to send over. So I'm going
to go back over here and look at the insert.

00:19:18.280 --> 00:19:24.030
I'm going to post and its going to give me
an example of what the JSON should look like

00:19:24.030 --> 00:19:43.180
that I'm going to be posting to there. So,
I'll copy that and what's my long URL? http://google.com/il.

00:19:43.180 --> 00:19:52.790
All right. There's my body, I execute that,
and now that's what happened, right? So I

00:19:52.790 --> 00:20:01.100
post it to that URI. I posted this content
and it sends me backÃ³-here's my URL that

00:20:01.100 --> 00:20:06.090
I shortened for you. So, there's the long
URL and there's the shortened version of it.

00:20:06.090 --> 00:20:17.640
So I can manipulate all these APIs. Finally,
last step, list. So I can get a list and this

00:20:17.640 --> 00:20:22.060
doesn't have any required parameters. I can
get a list of all the APIs that I've created,

00:20:22.060 --> 00:20:29.640
shortened URLs that I've created. All right,
this failed. I wanted that to. So, this method

00:20:29.640 --> 00:20:35.720
requires you to be authenticated. So if we
go back and look at this reference, back at

00:20:35.720 --> 00:20:44.880
the top, you'll notice this column "access
authenticated" over here. This is user data.

00:20:44.880 --> 00:20:49.320
All right. All the other stuffs is kind of
public information, right? There's a shortened

00:20:49.320 --> 00:20:54.010
URL. It's been shortened. There's a short
version and a long version. This though, list

00:20:54.010 --> 00:21:00.660
is my shortened URLs, the ones that I've created.
So that being user specific data, I've got

00:21:00.660 --> 00:21:05.910
to log in to get that. Now, that is done using
OOF2. Here, on the API, I'm going to say switch

00:21:05.910 --> 00:21:17.130
to private access on the API's explorer and
it says I want to manipulate. This application

00:21:17.130 --> 00:21:21.020
which is API's explorer is requesting permission
to manage my short URLs. Yes?

00:21:21.020 --> 00:21:22.020
&gt;&gt; Let me know all the analytics in public
Google.

00:21:22.020 --> 00:21:31.190
&gt;&gt; GREGORIO: Yes, Google URL short term. So,
yes, you saw me full up those analytics that

00:21:31.190 --> 00:21:36.490
the FSSFB that goes to google.com, I didn't
create that one. So, and we'll go through

00:21:36.490 --> 00:21:40.710
and see that it isn't there. See? All the
analytics are there but you can't tie it to

00:21:40.710 --> 00:21:48.420
the person who actually created that short
URL. So, this flow here is an OOF flow. All

00:21:48.420 --> 00:21:52.780
right. It's very important that you'll notice
what isn't happening. What isn't happening

00:21:52.780 --> 00:21:57.700
is that the APIs explorer is not asking me
for my name and password, right? It's a very

00:21:57.700 --> 00:22:02.460
important thing that we're trying to get away
from. You don't want to get your users in

00:22:02.460 --> 00:22:07.140
the habit of entering their name and password
and things. So one of the things we're stressing

00:22:07.140 --> 00:22:15.740
is OOF2 in this case, for all these APIs.
OOF is a system that allows you to have a

00:22:15.740 --> 00:22:23.100
person give permission for an app; either
desktop app, mobile app, or a web app; access

00:22:23.100 --> 00:22:28.160
to an API without them having to type their
name and password into that application. And

00:22:28.160 --> 00:22:33.560
that's what's happening here. The APIs explorer
is asking me for permission to say that it

00:22:33.560 --> 00:22:39.910
can manipulate my shortened URLs. So, we're
going to go into this a little bit more but

00:22:39.910 --> 00:22:45.120
there are other talks if you're interested
to OOF2, I'll get to those on the slides,

00:22:45.120 --> 00:22:49.680
there are other talks that go into more detail
on OOF2. So I'm going to say yes. I'm going

00:22:49.680 --> 00:22:58.990
to give you access on that re-run, that request.
Now that API explorer is authorized and now

00:22:58.990 --> 00:23:07.820
you can see the shortened list, right? And
there's the one, there's the one I--yes, that's

00:23:07.820 --> 00:23:10.400
the one I just created right now. All right?
There's the shortened version, the long version,

00:23:10.400 --> 00:23:25.790
it's okay and that's when I created it. So
that is APIs explorer. So, there was this

00:23:25.790 --> 00:23:35.660
idea though that I had to log in. That's APIs
explorer. APIs Console. So OOF, I'm not going

00:23:35.660 --> 00:23:41.360
to go into a whole lot of detail into OOF
but there's a little bit you need to know.

00:23:41.360 --> 00:23:44.630
So, that leads us now into the next tool that
we have which is APIs Console. If--okay, yes.

00:23:44.630 --> 00:23:54.370
Here's also--like I said I'm going to go into
a little bit of OOF. If you want to learn

00:23:54.370 --> 00:24:01.580
more about OOF right now, there's the, unfortunately,
unshortened link to the OOF2 documentation.

00:24:01.580 --> 00:24:08.200
There's also two other talks coming off at
IO. There's the 'Life of a Google API Developer'

00:24:08.200 --> 00:24:16.310
and there's 'Client Log-in Fail', okay? Client
Log-in Fail--client log is actually a log-in

00:24:16.310 --> 00:24:22.310
system that requires end users to put in their
user's name and password. As you can see,

00:24:22.310 --> 00:24:27.470
we're trying to lead you away from that. So,
those are two of the talks you might want

00:24:27.470 --> 00:24:34.750
to check out. So, the APIs Console. So, you've
looked the documentation, you see an API that's

00:24:34.750 --> 00:24:38.680
going to work for you. You played around with
it in the APIs explorer, it does what you

00:24:38.680 --> 00:24:42.740
want it to do, you've got it worked in, you're
pretty happy. Okay. Now you're going to start

00:24:42.740 --> 00:24:49.010
building an application. For you to build
an application, first stop is going to be

00:24:49.010 --> 00:24:55.320
the APIs Console. All right? This is where
we're going to set up a correspondence between

00:24:55.320 --> 00:25:01.150
you, the person and the application you're
building. So, I'm going to come in to, that's

00:25:01.150 --> 00:25:05.450
API/console. I'm going to come in here and
I'm just going to create a new project. So,

00:25:05.450 --> 00:25:16.350
this is going to be my BootCamp Project. BootCamp,
example. I create that project and now you'll

00:25:16.350 --> 00:25:24.070
see here, I have the list of all the API's
that are available to me to use in that application.

00:25:24.070 --> 00:25:29.610
And right now, they're all off. Right? So,
if I'm going to build a URL Shortener, one,

00:25:29.610 --> 00:25:35.310
I'm going to have to turn that on. Now, I
may or may not have to read the terms of service.

00:25:35.310 --> 00:25:39.440
It actually did not pop up in this case because
I've actually already read it. But as you

00:25:39.440 --> 00:25:42.730
turn on these API's, you probably have to
read the terms of service and agree to them.

00:25:42.730 --> 00:25:47.040
That, "Yes, I'm building an app. I know what
the terms of service are for that API." I'm

00:25:47.040 --> 00:25:53.400
going to turn that on. You will see that I
have a courtesy limit of 1,000,000 queries

00:25:53.400 --> 00:26:02.920
per day. Okay? I think for my sample, almost
set, I don't think I'll run out of that. 

00:26:02.920 --> 00:26:08.400
We will also see though, that for some APIs,
like prediction, there is pricing. The courtesy

00:26:08.400 --> 00:26:15.670
limit is 100 queries a day. You might very
well run out of that. Pricing is you can buy

00:26:15.670 --> 00:26:25.450
more quota for that. And so, for each one
of those, there is going to be prices associated

00:26:25.450 --> 00:26:35.480
with those. Okay. So this is theÃ³you'll notice
like I said, Google has about a 100 APIs or

00:26:35.480 --> 00:26:44.970
so. This is not 100. [INDISTINCT] but it's
not. The other APIs of the Google Data APIs

00:26:44.970 --> 00:26:51.520
and they currently do not show up in here.
So, we're working on getting APIs move it

00:26:51.520 --> 00:27:06.784
over unto the new console and to the new API
infrastructure. So...

00:27:06.784 --> 00:27:08.030
&gt;&gt; [INDISTINCT]
&gt;&gt; I am scanning the back row looking for

00:27:08.030 --> 00:27:13.410
a product manager and are they different for
apps? I don't believe they're different for

00:27:13.410 --> 00:27:16.970
apps. Okay. The question was, "Are the courtesy
limits are different if you're using this

00:27:16.970 --> 00:27:17.970
against an apps--Google apps domain?
&gt;&gt; [INDISTINCT]

00:27:17.970 --> 00:27:28.030
&gt;&gt; Okay. And the answer is a [INDISTINCT]
limits are the same. Good question there.

00:27:28.030 --> 00:27:35.370
I thought of that. Okay. So, I'm going to
come in and I'm going to create a console

00:27:35.370 --> 00:27:43.040
here for that--an application. I turned on
just the APIs I want. All right? That's because

00:27:43.040 --> 00:27:48.200
I'm going to then go out and create--you know,
I could go here. I could go "Whoo." I'm going

00:27:48.200 --> 00:27:52.981
to go wild and then I turn on all the APIs
for this, right? Besides, accepting a lot

00:27:52.981 --> 00:27:57.680
of terms and service there's no real downside
to that. You don't want to do that though

00:27:57.680 --> 00:28:02.260
because you're going to be setting up a lot
of credentials for your application. And if

00:28:02.260 --> 00:28:06.150
you somehow lose those credentials, those
credentials are then good for every API you've

00:28:06.150 --> 00:28:09.730
turned on in here, right? So, you want to
actually pick as an arrow set as possible,

00:28:09.730 --> 00:28:17.490
just for the sake of safety. So, if I have
billing that I need to turn on, say for the

00:28:17.490 --> 00:28:24.550
prediction API; you would come down here.
Use your Google Checkout. Turn on billing,

00:28:24.550 --> 00:28:34.770
then we go down to API access. So, in order
to use OOF from within your application, you're

00:28:34.770 --> 00:28:40.419
going to need to create OOF client IDs for
that. So I come in here and I'm going to say,

00:28:40.419 --> 00:28:50.410
"This is my BootCamp Sample Application."
Remember when I authorized the APIs Explorer;

00:28:50.410 --> 00:28:55.680
up at the top I said Goggle APIs Explorer
wants access to, whatever you're getting access

00:28:55.680 --> 00:29:00.620
to, that's where this comes in. All right?
You're going to get this--your users are going

00:29:00.620 --> 00:29:02.630
to get a screen like that, it's going to go,
you know, "My app, blah, blah, blah." This

00:29:02.630 --> 00:29:07.450
is where you get to save that--what that shows
up there. You can also actually put a product

00:29:07.450 --> 00:29:14.190
logo up there. So people can be assured, "Yes.
I'm really, you know, authorizing access to

00:29:14.190 --> 00:29:20.510
what I think I'm authorizing access to." Next
step in creating those OOF credentials are

00:29:20.510 --> 00:29:23.650
creating the application type; either to web
application or it's an installed application.

00:29:23.650 --> 00:29:29.890
In this case we'll just go with installed
application. And there's going to be some

00:29:29.890 --> 00:29:35.480
differences, like I said, that will be covered
in the OOF tube talks later. Well, I create

00:29:35.480 --> 00:29:41.640
my client ID. The only thing you really need
to know about this is that I've got a client

00:29:41.640 --> 00:29:48.200
ID and a client secret. And those need to
be cut and paste and put over into your application

00:29:48.200 --> 00:29:53.810
using the OOF two client libraries for what
you're working with. That says then--when

00:29:53.810 --> 00:29:59.320
a person goes to authorize into that application,
it allowed pop up on the screen. They don't

00:29:59.320 --> 00:30:03.220
have to enter name or password and says, "This
application," which is now tied to you because

00:30:03.220 --> 00:30:11.510
you logged in to this console, "this application,
wants access to your data." So you're setting-up

00:30:11.510 --> 00:30:22.360
that trust there, so. If--though you have
an API, say you were just building an app

00:30:22.360 --> 00:30:28.410
that unshortened URLs. Remember that didn't
require authentication, right? That did not

00:30:28.410 --> 00:30:34.740
require authenticated access. It wasn't accessing
user data. If that's the case, then you don't

00:30:34.740 --> 00:30:39.450
need to use the--you don't need to use OOFF
but you're still going to need to use the

00:30:39.450 --> 00:30:43.470
API key. And all the client libraries have
this as an--as available and you saw that

00:30:43.470 --> 00:30:48.680
actually in the documentation, right? So,
when I go back to this reference documentation

00:30:48.680 --> 00:30:56.890
you'll see this key here, has this parameter.
That's what this is. This is the simple API

00:30:56.890 --> 00:31:03.240
access. So, you can't use this to access protected
user data but if you're accessing an API that

00:31:03.240 --> 00:31:08.170
doesn't need it, like the URL shortened of
Get, then you can just use this. The user

00:31:08.170 --> 00:31:12.990
then won't be thrown through that OOFF2 flow,
it'll just work. The nice part about this

00:31:12.990 --> 00:31:21.760
though is you then get lots of nice statistics,
whether you use OOFF2 or the API access. That

00:31:21.760 --> 00:31:27.690
APIs--you're used to that APIs tied to you
and we can now keep track of statistics, so

00:31:27.690 --> 00:31:36.590
you can get to know, you know, figure out
how much your API is actually used. So, that's

00:31:36.590 --> 00:31:40.190
the API access that gives me my credentials
that I'm going to put into my application

00:31:40.190 --> 00:31:44.920
and finally team. Once you've created this
project you can start adding other people

00:31:44.920 --> 00:31:53.320
into this. So it's tied to more than one person.
So, that's the developer console. Like I said,

00:31:53.320 --> 00:31:58.059
if you're interested in OOFF2 and how these
pieces tie together, there is two more talks

00:31:58.059 --> 00:32:04.830
coming up that'll go into this in much more
detail. Finally libraries, okay, like I said,

00:32:04.830 --> 00:32:09.670
we're not going to, you know, throw you off
into the woods with just http and JSON. So,

00:32:09.670 --> 00:32:19.880
we have client libraries available. We have
PYTHON and JAVA. Those libraries are in Beta.

00:32:19.880 --> 00:32:27.360
Beta for Google means that they are, obviously,
actively developed but at this point we're

00:32:27.360 --> 00:32:32.410
down to bug fixing and adding new features.
We don't expect major changes to the interfaces

00:32:32.410 --> 00:32:38.172
for these APIs. We really want you to start
building on top of these libraries. Alpha

00:32:38.172 --> 00:32:42.809
means actively under construction. We'd like
you to use them but they're actively in the

00:32:42.809 --> 00:32:46.730
construction. Stuff will break. Stuff will
break in--you know backward incompatible.

00:32:46.730 --> 00:32:52.340
We're experimenting, we're iterating on these
systems and they're under development. So,

00:32:52.340 --> 00:32:58.150
for Alpha, we have PHP, Ruby and DotNet libraries
and like I said, for the Beta versions we

00:32:58.150 --> 00:33:07.470
have PYTHON and JAVA. Above and beyond those
client libraries, we have specific documentations.

00:33:07.470 --> 00:33:15.890
So actually, let me just follow through and
look at the PYTHON client library. So here's

00:33:15.890 --> 00:33:21.370
the documentation for it. You go to there,
you'll be landed on it--their--obviously hosted

00:33:21.370 --> 00:33:28.641
on code.google.com. You've got documentation
for it. Each one of these client libraries

00:33:28.641 --> 00:33:34.420
will have a getting started guide. This will
walk you through how--what does the API look

00:33:34.420 --> 00:33:38.630
like? How was it used? How do you install
it? Plenty of documentation there. So you

00:33:38.630 --> 00:33:46.890
can see here on the side the different platforms
it works on, lots of OOFF2 documentation,

00:33:46.890 --> 00:33:53.721
advanced information on debugging, optimizing,
thread safety, things like that. So--and these

00:33:53.721 --> 00:34:00.880
are open source projects. You find a bug;
you can just report it in the Issue tracker.

00:34:00.880 --> 00:34:04.670
That would be great. If you find a bug and
know how to fix it, you can contribute to

00:34:04.670 --> 00:34:09.819
Patch. That would be even better. But they're
all open source, so you can see how they work.

00:34:09.819 --> 00:34:17.841
Download it, fiddle with it, get it to work
for you. So, that's the Python client library.

00:34:17.841 --> 00:34:24.200
Like I said, all of the client libraries are
going to have the same structure, developers

00:34:24.200 --> 00:34:28.389
guide, etc. Also, we start to see with this
is going to be more documentation. So, reference

00:34:28.389 --> 00:34:37.890
documentation here is--here is basically the
core of the library--for the Python library.

00:34:37.890 --> 00:34:44.310
Now, unless you program in Python, this looks
ugly. If you program on Python, it looks ugly

00:34:44.310 --> 00:34:50.500
too but you understand it, okay? So, this
is the standard the way of documenting Python

00:34:50.500 --> 00:34:58.940
client libraries. JAVA--the JAVA client library,
no surprise to those JAVA doc. So, but not

00:34:58.940 --> 00:35:09.680
only that there is documentation for the individual
s. So, this is going to be what those API

00:35:09.680 --> 00:35:17.190
surfaces look like in Python for particular
API. So, for example, urlshortener. Remember,

00:35:17.190 --> 00:35:24.270
we said it was a collection, right? It was
a collection. There's that URL collection.

00:35:24.270 --> 00:35:33.720
And here's those three methods associated
with that: get, insert and list. And you can

00:35:33.720 --> 00:35:39.350
see how this becomes if, you know, reading
the documentation. If I wanted to do a get

00:35:39.350 --> 00:35:45.680
on the urlshortener, my arguments are the
projection which is a string and has these

00:35:45.680 --> 00:35:50.470
values. Remember when I did it in the APIs
explorer, I used full--that got me my full

00:35:50.470 --> 00:35:55.140
analytics. And then I also have to pass in
as a parameter the shorturl. Insert, there's

00:35:55.140 --> 00:35:59.560
the body I have to insert. We did that. And
then list. And then I could also--the list

00:35:59.560 --> 00:36:06.740
actually took a projection which we didn't
put in either. So, this URL--remember we started

00:36:06.740 --> 00:36:11.900
back with, it was that RESTful interface.
It was this idea of collections. That whole

00:36:11.900 --> 00:36:18.490
collection idiom boils down into the API itself.
And now, as you can see, it's the same exact

00:36:18.490 --> 00:36:29.830
surface in the generated Python client library.
We'd covered PyDoc. We covered PyDoc for API.

00:36:29.830 --> 00:36:35.869
Obviously, like I said, there's Java Doc for
the Java client library. It should be familiar

00:36:35.869 --> 00:36:46.640
to you if you are a Java programmer. One of
the other tools is Google Plug-in for Eclipse.

00:36:46.640 --> 00:36:54.800
So, this is a plug-in that just recently added
APIs support into it. So, it's a plug-in for

00:36:54.800 --> 00:36:59.090
Eclipse if Eclipse is your editor. And this
will allow you easier access into these APIs.

00:36:59.090 --> 00:37:11.970
And actually going to demo this in just a
second. Apparently, I'm going to demo it right

00:37:11.970 --> 00:37:21.450
now, okay. So, let's fire-up Eclipse. So,
here's where I defy all common sense into

00:37:21.450 --> 00:37:36.010
a live demo and a live demo on Eclipse, nonetheless.
Where am I? Okay. So, all right. So, Google

00:37:36.010 --> 00:37:41.920
Plug-in for Eclipse is a plug-in originally
launched with this idea that you can create--that

00:37:41.920 --> 00:37:58.619
is not the one I wanted. It's not the Eclipse
I was looking for. So, all right. While we're

00:37:58.619 --> 00:38:07.170
waiting for Eclipse to launch, let's do Python.
Okay. So, we said--this is what Python is

00:38:07.170 --> 00:38:16.560
good for, for filling in the time. So, we
went and we wanted to do the urlshortener,

00:38:16.560 --> 00:38:20.630
right? And this is the documentation for the
urlshortener. We're going to presume Python.

00:38:20.630 --> 00:38:27.360
So, we will come in here. And in Python, I
want to import--[INDISTINCT] that even more.

00:38:27.360 --> 00:38:48.320
Edit preferences, fonts and colors. Sorry
about this, should have been bigger to begin

00:38:48.320 --> 00:38:58.311
with. Can you read that apiclient.discovery--no,
that's from--import build? Okay. So, I want

00:38:58.311 --> 00:39:04.930
to create a service interface, build. Now,
which API do I want to interact with? It's

00:39:04.930 --> 00:39:12.500
urlshortener. The name and the version need
to be passed in. Its urlshortener and ver--v1--shortener

00:39:12.500 --> 00:39:22.810
and v1. That gives me that service. Now, if
I go and look in here--look at the surface.

00:39:22.810 --> 00:39:30.220
One collection, that's URL. So, service.url.
And what are the methods that are available

00:39:30.220 --> 00:39:37.150
on that collection? Get, insert and list.
So, I'm going to do get. So, .get and where

00:39:37.150 --> 00:39:47.660
do I pass it? Shorturl is required. That's
the only thing I need. So, shorturl="http://goo.gl/fbsS").execute()

00:39:47.660 --> 00:40:10.280
I need a little more caffeine, all right.
And, I will now save this file, save as, save

00:40:10.280 --> 00:40:21.660
it to my desktop as "shorten2.py". I'm now
going to go to my desktop. There is "shorten2.py."

00:40:21.660 --> 00:40:32.810
No slight of hand. I really just did type
that, python shorten2.py, I run it and there

00:40:32.810 --> 00:40:38.920
it is. It's shorten.uri. You can see here
a status of okay, my shortened work. There's

00:40:38.920 --> 00:40:42.650
my ID of the shortened one that I had and
a long URL that I just unwrapped that from.

00:40:42.650 --> 00:40:55.190
So it's a very simple service. So, if we are
now lucky, eclipse has finished loading. I'm

00:40:55.190 --> 00:41:03.610
going to close that project. So, I'm going
to come in here and create a new web application

00:41:03.610 --> 00:41:08.119
project. So this is what Google plug-in for
eclipse initially launched with. It's got

00:41:08.119 --> 00:41:11.800
support for Google web tool kit and Google
app [INDISTINCT]. So it's for making Java

00:41:11.800 --> 00:41:16.980
applications with those. To keep things simple,
I'm going to turn off Google web tool kit

00:41:16.980 --> 00:41:33.609
for this example but I'm going to create an
app engine example. My project name is sample3

00:41:33.609 --> 00:41:39.970
com.google.sample3. So, this goes through,
blast out all the code I need in Java. So

00:41:39.970 --> 00:41:47.619
here's my source, comgoogle sample3. There's
my code. It just, you know, creates my little

00:41:47.619 --> 00:41:52.760
servelet which will run on app engine, right?
And it runs text plane. This is HelloWorld.

00:41:52.760 --> 00:42:02.880
So if I run that--now obviously this is an
app engine talk but we'll see in a second

00:42:02.880 --> 00:42:12.240
where this is going, local host 8888, there's
my sample free servelet and this is HelloWorld.

00:42:12.240 --> 00:42:19.890
Very tiny letters. [INDISTINCT] that in. This
is HelloWorld. Okay. Right. So, that's good.

00:42:19.890 --> 00:42:32.600
But I said we had help for APIs. Import, and
so add Google API. And this structure should

00:42:32.600 --> 00:42:45.860
look fairly simple to you. Code search, calendar,
books, buzz, moderator, spreadsheets, URL

00:42:45.860 --> 00:42:53.080
shortener. Here's your API. So, this will
add in support for the URL shortener API in

00:42:53.080 --> 00:42:58.700
Java into this project. So, I'm going to stop
running because I've made that mistake before.

00:42:58.700 --> 00:43:06.450
You will now notice over here in the left
hand side, Google URL shortener. Here is the

00:43:06.450 --> 00:43:13.340
base API client library which is that and
then there is this library that's been added

00:43:13.340 --> 00:43:21.270
in which has very specific code to the URL
shortener API. I may expand that out there

00:43:21.270 --> 00:43:26.700
a little bit. Okay. There's an http client
class. That's good. We're making request.

00:43:26.700 --> 00:43:31.060
There's a URL shortener class. That's good.
We're using URL shortener. And there is the

00:43:31.060 --> 00:43:41.140
model classes down here. So now we can start
using that API and all the goodness of Eclipse.

00:43:41.140 --> 00:43:53.770
So, I want to import URL shortener, that's
the correct one equals new URL shortener.

00:43:53.770 --> 00:44:02.060
Where are the parameters I am missing? My
string, my transport and my factory. So this

00:44:02.060 --> 00:44:10.880
is going to be my BootCamp sample. I need
a new net http transport. And a new Jackson

00:44:10.880 --> 00:44:31.290
factory. Those are for http and JSON. All
right. We're currently very happy. Let's expand

00:44:31.290 --> 00:44:54.240
this up so that we can actually see the whole
code. So, now I need to use this service later.

00:44:54.240 --> 00:45:01.100
So I'm going to say S dot--hey, there's URL.
Right? Remember? Same idiom. There's the collection.

00:45:01.100 --> 00:45:07.520
Put on the collection, I want to do a Get.
What do I want to get? Well, that's the shortened

00:45:07.520 --> 00:45:13.940
URL, right, http://google.gl/fesS and now
dream about that URL and I call--opps. Execute

00:45:13.940 --> 00:45:47.050
on that. That should give me back a URL and
that URL, I need to import from a model. And

00:45:47.050 --> 00:46:01.410
so, instead of here, down here, I'm going
to print out URL dot--long URL. So same thing

00:46:01.410 --> 00:46:09.850
we've known +the whole time. Right? So, again
come in idioms, we've got this API, it's a

00:46:09.850 --> 00:46:14.359
collection we call "get", but you notice now
I've got all the nice pieces of auto-complete.

00:46:14.359 --> 00:46:29.590
And now, I'm going to run my project again
and once we're running--blam, there's our

00:46:29.590 --> 00:46:40.700
long URL. So, cool. So, like I said at the
beginning of the talk, here's that Python

00:46:40.700 --> 00:46:47.700
code that we just did. Don't expect you to
understand every bit of it but I hope by now,

00:46:47.700 --> 00:46:52.801
by the end of the talk, you now know where
to go to get the information. All right? We

00:46:52.801 --> 00:46:57.260
know that this is a Python client library,
I gave you the link to that, Google API Python

00:46:57.260 --> 00:47:03.470
client. We know it's the URL shortener, API.
You know where to go for the docs for that.

00:47:03.470 --> 00:47:09.950
If we need a developer key, we know where
to go for that, that's the APIs console. We

00:47:09.950 --> 00:47:14.270
want to know what the actual calls are per
an API, that's API Python client doc, that's

00:47:14.270 --> 00:47:19.950
the API specific documentation for Python.
And finally, if I want to exercise and play

00:47:19.950 --> 00:47:26.630
around with this, that's the APIs explorer.
So we covered a lot--there's a lot of APIs

00:47:26.630 --> 00:47:31.920
out there. We're introducing more all the
time. You can see all the other APIs. So like

00:47:31.920 --> 00:47:36.171
I said, like the question came out before,
these are the APIs that we're talking about

00:47:36.171 --> 00:47:40.450
right now that are built on top of that new
infrastructure. We still have lots of other

00:47:40.450 --> 00:47:46.590
APIs on the older infrastructure, the Google
Data APIs. You want to see all the APIs we

00:47:46.590 --> 00:47:52.609
have available, code.google.com/more. If you
like this section and want to get a little

00:47:52.609 --> 00:47:57.230
more hands-on with it. If you wanted to, you
know, go to API explorer hands-on. Get some

00:47:57.230 --> 00:48:03.890
hands-on with some Python Code. We have a
lab this afternoon, 1:45 to 3:45 in Robertson

00:48:03.890 --> 00:48:07.460
2, "Hands on with Google APIs" lab. Like I
said before, we're just going to basically

00:48:07.460 --> 00:48:12.490
go through this presentation but in a lot
more detail, hands-on at every step, get into

00:48:12.490 --> 00:48:18.590
some code at the end. And finally, between
now and the hands-on on in the lab, actually

00:48:18.590 --> 00:48:26.000
for the rest of the day, folks from the APIs
team are going to be available in office hours.

00:48:26.000 --> 00:48:31.410
So here, this link should bring you to your
pre-requisites. If you are interested in the

00:48:31.410 --> 00:48:37.560
lab, you should've get an email that's said,
"Here's the pre-reqs to install," if you don't

00:48:37.560 --> 00:48:41.800
have those installed or you need help in installing
those, come to office hours, we'll give you

00:48:41.800 --> 00:48:53.230
a hand. Or if you just have questions on APIs,
again, come to office hours. That's it. Thanks.

00:48:53.230 --> 00:48:59.090
We got about ten minutes for questions.
&gt;&gt; I have a question though, the Java clients

00:48:59.090 --> 00:49:02.119
libraries, they don't click on Android [INDISTINCT]
or...

00:49:02.119 --> 00:49:06.380
&gt;&gt; GREGORIO: So the question was, so the question
was, "Are the Java client libraries optimized

00:49:06.380 --> 00:49:12.650
for Android?" Yes, the Java client libraries
use a tool which escapes me now but that restricts

00:49:12.650 --> 00:49:14.740
them down so that they'd--yes, they do run
on Android.

00:49:14.740 --> 00:49:15.740
&gt;&gt; So totally [INDISTINCT]
&gt;&gt; GREGORIO: Yes.

00:49:15.740 --> 00:49:18.270
&gt;&gt; Excuse me sir, perhaps the web search that
you're engaged on, do any of them that calls

00:49:18.270 --> 00:49:29.970
at least they have, I believe you can call
back "background review" like JSON P calls

00:49:29.970 --> 00:49:34.570
you.
&gt;&gt; GREGORIO: So the question was, can we do

00:49:34.570 --> 00:49:41.170
call backs. JSON P call backs for these APIs
and the answer is yes. They do accept that

00:49:41.170 --> 00:49:46.650
call back parameter.
&gt;&gt; [INDISTINCT]

00:49:46.650 --> 00:49:54.040
&gt;&gt; GREGORIO: Yes, the post is to add a new
one and there's a PUT to update. So, you actually

00:49:54.040 --> 00:49:59.770
don't see that in the URL shortened API but
you go to some of the other APIs. For example,

00:49:59.770 --> 00:50:04.960
the buzz has a PUT to update an activity,
for example.

00:50:04.960 --> 00:50:08.940
&gt;&gt; [INDISTINCT]
&gt;&gt; GREGORIO: Right. Yes?

00:50:08.940 --> 00:50:19.180
&gt;&gt; Is there like data [INDISTINCT] from [INDISTINCT]
of the data which are [INDISTINCT] about the

00:50:19.180 --> 00:50:20.180
data about that has been filed set and that
probably affects us--you [INDISTINCT]

00:50:20.180 --> 00:50:23.520
&gt;&gt; GREGORIO: Okay. So the question was, "Can
I restrict what comes back through that?"

00:50:23.520 --> 00:50:27.570
Yes. What we saw in the URL shortener, there's
this idea of a projection to restrict the

00:50:27.570 --> 00:50:33.920
set of the data that comes back per entry.
Lots of other APIs also support query parameters.

00:50:33.920 --> 00:50:37.980
So instead of getting everything that is in
the collection, you can get just the things

00:50:37.980 --> 00:50:43.570
that match that query. There is also an idea
of pagination, so you can set max results,

00:50:43.570 --> 00:50:50.960
you know, only return 25 and there's a way
to paginate and say get the next page of results.

00:50:50.960 --> 00:51:01.500
So, does that? Okay. All right, any other
questions? All right, thank you very much.

00:51:01.500 --> 00:51:03.480
Looking forward to see in office hours and
at the lab.

