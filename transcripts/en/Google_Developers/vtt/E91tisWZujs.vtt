WEBVTT
Kind: captions
Language: en

00:00:06.980 --> 00:00:12.430
Nick&gt;&gt;: Are we ready? All right. All right,
thanks everybody for waiting. I know the keynote

00:00:12.430 --> 00:00:17.330
was, went a little bit longer. So they said
that we can take our full hour. So we're gonna

00:00:17.330 --> 00:00:22.220
go through the presentation here, ask questions.
We really want to make this a interactive

00:00:22.220 --> 00:00:23.509
over Wave.

00:00:23.509 --> 00:00:29.960
So, there's this URL here, there's gonna be
a lot of content that I'm gonna be presenting

00:00:29.960 --> 00:00:34.400
today. If you have questions, we have a lot
of people who are gonna be answering the questions

00:00:34.400 --> 00:00:40.079
online. And then we'll go back up and I'll
ask the questions as well.

00:00:40.079 --> 00:00:46.730
So my name is Nick Mihailovski. Iâ€™m a lead
on our Developer Relations for Google Analytics.

00:00:46.730 --> 00:00:50.570
I've been, I was actually at Urchin Software
and I've been working on Google Analytics

00:00:50.570 --> 00:00:56.609
for five years. We're really excited to talk
about a lot of things that we're doing here

00:00:56.609 --> 00:01:02.010
for developers. This is our first year at
Google I/O, even though we've, we've had Analytics

00:01:02.010 --> 00:01:03.010
out for five years.

00:01:03.010 --> 00:01:08.190
So just, just to give a show of hands, how
many people here use Google Analytics today?

00:01:08.190 --> 00:01:15.060
All right, everybody uses it. Okay. So, so
a show of hands again, how many people feel

00:01:15.060 --> 00:01:19.470
like they use it in very sophisticated ways?
Like you, you guys think you're doing a lot

00:01:19.470 --> 00:01:26.030
and you're getting a lot of information out
of it? Okay, it's a lot fewer hands. Great.

00:01:26.030 --> 00:01:30.380
Well, you know, we heard earlier today in
the keynote. We heard Vic Gundotra talking

00:01:30.380 --> 00:01:35.570
about how important Analytics is. We heard
Eric talking about Analytics as well. And

00:01:35.570 --> 00:01:40.490
measuring the performance of your applications
is critical for you to be successful in your

00:01:40.490 --> 00:01:41.490
business.

00:01:41.490 --> 00:01:44.920
Now, traditionally in most presentations we
talk about the business side of how to use

00:01:44.920 --> 00:01:49.860
data, but here at Google I/O we're really
reaching out to developers. So I'm gonna talk

00:01:49.860 --> 00:01:55.000
you, talk to you a little bit about what we're
doing with the platform, what we're building

00:01:55.000 --> 00:01:59.080
to enable developers like you to do really
exciting new things that you've never been

00:01:59.080 --> 00:02:00.080
able to do before.

00:02:00.080 --> 00:02:01.810
[ pause ]

00:02:01.810 --> 00:02:08.110
So when we look at what are we really want
people to do with Analytics. There's really

00:02:08.110 --> 00:02:11.940
three areas. And I'm gonna talk through you
today throughout the presentation of what

00:02:11.940 --> 00:02:14.110
we're doing around this.

00:02:14.110 --> 00:02:19.760
Developers really want to know exactly what
data Google Analytics collects. How we process

00:02:19.760 --> 00:02:25.810
the data so they can interpret what is actually
going on in the reports that we show them.

00:02:25.810 --> 00:02:31.370
Developers want to take our code and extend
it to new environments like TV and mobile,

00:02:31.370 --> 00:02:37.380
as well as extend our reports so you can do
amazing, better, badder and exciting visualizations

00:02:37.380 --> 00:02:40.609
with the data you've never been able to do
before.

00:02:40.609 --> 00:02:44.230
And finally, developers want to take the data
that you can get out of Analytics, take the

00:02:44.230 --> 00:02:49.489
Web Analytics data and integrate that with
their Business Analytics data to get new insights

00:02:49.489 --> 00:02:54.659
and do innovative new things that again, we've
never been able to do before. This presentation's

00:02:54.659 --> 00:03:00.629
gonna walk you through how we're actually
accomplishing that today.

00:03:00.629 --> 00:03:04.959
So when most people think of Google Analytics
they think of just signing up for a brand

00:03:04.959 --> 00:03:09.659
new account, getting a piece of tracking code
that they slapped on the, the footer of their

00:03:09.659 --> 00:03:15.840
page and automagically you see really pretty
reports. And I'm sure everybody here has gone

00:03:15.840 --> 00:03:19.890
through that because you pretty much all raised
your hand when I said how many people use

00:03:19.890 --> 00:03:20.890
Google Analytics.

00:03:20.890 --> 00:03:26.069
So I want you today to not just think of that.
I want you to think today of four major components

00:03:26.069 --> 00:03:33.370
that we have: a core processing component,
a management component, a data collection

00:03:33.370 --> 00:03:39.389
component and a data exporting component.
These are the four main components. And we're

00:03:39.389 --> 00:03:43.091
gonna talk through exactly how we're enabling
developers to integrate through each of these

00:03:43.091 --> 00:03:45.390
pieces.

00:03:45.390 --> 00:03:53.489
So how many of you have seen pages and visits
data in your reports? All right. So how many

00:03:53.489 --> 00:03:59.060
of you actually know how we calculate those
metrics? All right [ laughter ]. Sort of,

00:03:59.060 --> 00:04:00.060
right?

00:04:00.060 --> 00:04:04.760
So the truth of the matter is businesses today
are using this data to justify the success

00:04:04.760 --> 00:04:09.079
of what they're doing online. But in truth,
very few people actually know how we're calculating

00:04:09.079 --> 00:04:14.160
this information. And for developers that's
really frustrating, because what you're trying

00:04:14.160 --> 00:04:17.780
to do is guess all the time of what's going
on and you're sending this data and you're

00:04:17.780 --> 00:04:21.320
seeing these results that you're really not
sure how they got there. And it's just really

00:04:21.320 --> 00:04:22.320
frustrating.

00:04:22.320 --> 00:04:26.390
So today I'm gonna give you a sneak peek.
We're gonna pull back the curtain of what

00:04:26.390 --> 00:04:29.691
we've always hidden of our core processing
engine. And we're gonna tell you exactly how

00:04:29.691 --> 00:04:33.690
Google Analytics collects data. I'm gonna
talk about a brand new model that we're just

00:04:33.690 --> 00:04:38.471
gonna start just touching on, on how we calculate
all the data. And it's gonna be really exciting

00:04:38.471 --> 00:04:44.120
because once you understand this it's gonna
make you understand how Analytics works.

00:04:44.120 --> 00:04:47.970
So when you log into your reports you typically
see a report that just looks like this. This

00:04:47.970 --> 00:04:54.380
can be broken down into a series of dimensions
and metrics. Where metrics are numeric values,

00:04:54.380 --> 00:04:59.300
for example like the number of pages. And
dimensions are a set of strings, for example

00:04:59.300 --> 00:05:05.940
like the page path. Now Google Analytics has
a ton of these metrics, over 175 metrics that

00:05:05.940 --> 00:05:07.160
we expose.

00:05:07.160 --> 00:05:11.780
But again, we don't really tell you how we
calculate them. You just look at the reports.

00:05:11.780 --> 00:05:15.940
You say we increase page views after we've
released the brand new product. Everybody's

00:05:15.940 --> 00:05:19.910
successful. They go to the bar and celebrate.
But we're really not sure what those page

00:05:19.910 --> 00:05:21.890
views really mean.

00:05:21.890 --> 00:05:27.160
So let's blow off the covers. Let's talk about
how Google Analytics works today. Here are

00:05:27.160 --> 00:05:33.380
four main components. When you log into Analytics
for the first time you get a piece of tracking

00:05:33.380 --> 00:05:38.530
code in the management section, which you
then put on your site and it sends this data

00:05:38.530 --> 00:05:43.620
in which you can think of as logs. We then
take all the configuration information from

00:05:43.620 --> 00:05:48.230
your account, your goal configuration, your
profile information. And we put that into

00:05:48.230 --> 00:05:52.910
a data structure.
And this is where the magic happens. We take

00:05:52.910 --> 00:05:57.370
all these data structures and pass them through
a series of functions where the return value

00:05:57.370 --> 00:06:02.930
of each function is the actual dimension of
the metric. This then gets stored in a table.

00:06:02.930 --> 00:06:08.720
And this processing happens 24 hours a day,
7 days a week all the time. We were just laughing

00:06:08.720 --> 00:06:12.490
yesterday at lunch. We were saying how many
times are we processing and collecting all

00:06:12.490 --> 00:06:16.910
the data from the people at Google I/O. Probably
a lot.

00:06:16.910 --> 00:06:19.950
So when you wake up tomorrow morning and you
look at your reports after the announcements

00:06:19.950 --> 00:06:25.790
you've made here, you, you'll log into your
reports or User Data Export API. You'll query

00:06:25.790 --> 00:06:30.930
your back end and you'll get a set of reports.
And the key thing here to know, that the main

00:06:30.930 --> 00:06:35.120
processing part is that where you're using
functions in each dimension and metric can

00:06:35.120 --> 00:06:40.380
be defined as a, as a actual function. And
that's it. I mean, isn't that easy? There's

00:06:40.380 --> 00:06:43.960
just six steps to all the data that we're
processing.

00:06:43.960 --> 00:06:52.080
So let's take a, a look through exactly how
this works in a little bit more detail. What

00:06:52.080 --> 00:06:55.400
we first want to understand is for all the
data that we're processing, what is this data

00:06:55.400 --> 00:06:59.940
we're actually looking at. And you could think
of it as a simple visitor interaction model

00:06:59.940 --> 00:07:06.940
where a visit, visitor visits a site and views
a bunch of pages. They might revisit the site

00:07:06.940 --> 00:07:11.770
and view a couple more pages, interact with
content-like events or actually make transactions

00:07:11.770 --> 00:07:19.370
on your site. In Google Analytics we call
this the visitor session and hit levels.

00:07:19.370 --> 00:07:22.710
Now, when a visitor visits a site that's being
tracked with GA, with the JavaScript tracking

00:07:22.710 --> 00:07:28.240
code, each time you make a tracking request
an invisible 1x1 pixel image sends data to

00:07:28.240 --> 00:07:34.530
Google Analytics. Now, all the tracking library's
doing is putting a bunch of query parameters

00:07:34.530 --> 00:07:38.930
at the end of this request. And as a visitor
comes to your site you'll see the queries

00:07:38.930 --> 00:07:43.900
being sent. And over time multiple queries
are being sent as well.

00:07:43.900 --> 00:07:49.430
Now, our tracking code has logic that persists
certain values across each of these requests

00:07:49.430 --> 00:07:57.520
to represent the visitor, the session and
the hit. Now your site sits on the World Wide

00:07:57.520 --> 00:08:03.720
Web, and so people are coming to it from exotic
places, places like Zanzibar, Bahrain. They're

00:08:03.720 --> 00:08:07.860
sending logs all the time. And so from our
side we just see a series of these requests

00:08:07.860 --> 00:08:10.430
all out of order.

00:08:10.430 --> 00:08:15.700
So our back end goes and reconstructs the
sessions and the hits based upon the values

00:08:15.700 --> 00:08:20.550
that we persisted in the tracking code. Now,
you could think of this as a session entity

00:08:20.550 --> 00:08:26.240
with an array of hits. Google Analytics will
then go through each session, and through

00:08:26.240 --> 00:08:31.700
each hit within each session, and pass the
session in the index of each hit to the series

00:08:31.700 --> 00:08:37.089
of functions that calculates dimensions and
metrics.

00:08:37.089 --> 00:08:42.159
Let's take a look at how visits are calculated.
Now, at the bottom we have four hits that

00:08:42.159 --> 00:08:46.810
were created for a session. A visitor came
to the page foo and then went to page bar,

00:08:46.810 --> 00:08:52.370
they then did an e-commerce transaction, and
finally they went back to page foo.

00:08:52.370 --> 00:08:56.830
So what we do is we pass this whole session
entity with each index, and we pass it to

00:08:56.830 --> 00:09:03.240
this function called visits. If the index
is 0 we return 1, otherwise we return 0. And

00:09:03.240 --> 00:09:10.540
so in the example below, we count 1 for all
these hits. What that means is visits count

00:09:10.540 --> 00:09:16.610
the number of session in Google Analytics.
And that's exactly what we're doing.

00:09:16.610 --> 00:09:22.199
Let's take a look at how we calculate dimensions.
Now, dimensions are strings like a, I told

00:09:22.199 --> 00:09:26.240
you earlier. Here across all the pages when
we pass it to this function we index into

00:09:26.240 --> 00:09:31.060
the hit. And there's a type called page. And
if there, if we hit a page we actually return

00:09:31.060 --> 00:09:37.759
the page path foo, bar or foo. Otherwise we
return an empty string. So for each dimension

00:09:37.759 --> 00:09:41.699
and metric the key part is that there's a
function that can be applied that explains

00:09:41.699 --> 00:09:43.380
exactly how that data's calculated.

00:09:43.380 --> 00:09:48.009
If you think back you could say hey, well
then there's probably a parameter in the queries

00:09:48.009 --> 00:09:54.490
that are being sent through our utm.gif request.
And that query's value is being set by a certain

00:09:54.490 --> 00:10:00.569
parameter in the browser, the URL. We think
this new model is really important because

00:10:00.569 --> 00:10:05.930
it's gonna explain exactly how the data's
being calculated, how it's being transmitted

00:10:05.930 --> 00:10:10.019
and you'll be able to interpret your reports
much more cleaner than you currently can today.

00:10:10.019 --> 00:10:15.149
Now that's all I'm gonna be talking about
functions, just a real sneak peek. If you

00:10:15.149 --> 00:10:19.351
have more questions now is a great time to
go to the Google Wave and we'll answer them

00:10:19.351 --> 00:10:25.870
after this session, after I'm done talking.
[ pause ]

00:10:25.870 --> 00:10:29.190
So we just talked a lot about what we're doing.
Now I want to talk about you. What are we

00:10:29.190 --> 00:10:33.149
doing for developers? We just talked about
this really powerful processing engine that

00:10:33.149 --> 00:10:36.850
we're uncovering and telling you how it's
working. How are you gonna integrate with

00:10:36.850 --> 00:10:45.630
that today? Well, across our four main components
we're exposing a set of data fields that you

00:10:45.630 --> 00:10:50.499
can send us information. We're exposing a
set of protocols that you can send and export

00:10:50.499 --> 00:10:55.180
your data. And we have a bunch of client libraries
that make it really simple for you to track.

00:10:55.180 --> 00:11:00.870
I'm gonna over this section really fast. All
of this data you probably already read on

00:11:00.870 --> 00:11:06.110
code.google.com/apis/analytics. You can go
there and, and learn more about it. But I

00:11:06.110 --> 00:11:11.329
just wanted to show you how powerful this
is, especially around the data collection.

00:11:11.329 --> 00:11:15.860
Here are all the types of data that you can
collect. Standard page views, event. We, we

00:11:15.860 --> 00:11:19.459
just released custom variables that, which
allow you to explain this information. All

00:11:19.459 --> 00:11:22.120
the data gets sent over the utm.gif request,
what we just looked at.

00:11:22.120 --> 00:11:27.121
What I really want to focus on is how many
client libraries that we have today. Most

00:11:27.121 --> 00:11:31.470
of you just think of the JavaScript tracking
code. We recently released the new hotlist

00:11:31.470 --> 00:11:35.920
to track the Android applications. So all
this stuff that Vic Gundotra talked about

00:11:35.920 --> 00:11:40.240
how exciting it is to build apps, you guys
need to measure how successful your apps are

00:11:40.240 --> 00:11:42.930
to make them better. You can use Google Analytics
to do that today.

00:11:42.930 --> 00:11:48.709
We released new codes so you can track mobile
websites that don't enable JavaScript for

00:11:48.709 --> 00:11:52.759
older WAP phones. So if you're targeting Asian
audiences or, or markets where they don't

00:11:52.759 --> 00:11:57.459
really have the smartphone technology yet,
you can still track that with Analytics.

00:11:57.459 --> 00:12:01.319
We heard in the keynote that, where Google
is really embracing Flash. We actually worked

00:12:01.319 --> 00:12:06.619
with Adobe two years ago to build a complete
tracking library for all Flash, that's native

00:12:06.619 --> 00:12:12.970
to ActionScript 3.0. It works in Flex, Flash,
Air. We even work with Microsoft to, to, to

00:12:12.970 --> 00:12:18.170
track Silverlight if you so choose to. A lot
of libraries. Most people donâ€™t know how

00:12:18.170 --> 00:12:21.809
much you can actually use Analytics.

00:12:21.809 --> 00:12:25.490
Let's take a look at account management. Now
this is the part that has all the configuration

00:12:25.490 --> 00:12:29.559
data in Google Analytics. This is really important
if you want to make sure that your account's

00:12:29.559 --> 00:12:34.749
configured. You're provided an API to export
all this information. It's currently read-only.

00:12:34.749 --> 00:12:39.069
We actually just, for all the libraries we
just released updates to the .net library

00:12:39.069 --> 00:12:44.410
so if you're a, a big .net shop you can start
using that. And we have three user contributed

00:12:44.410 --> 00:12:49.100
libraries for Ruby, Pearl and PHP. Now there's,
they're really powerful. There's some people

00:12:49.100 --> 00:12:52.189
that have been doing some amazing visualizations
using the Ruby library just because it's so

00:12:52.189 --> 00:12:53.189
simple.

00:12:53.189 --> 00:12:59.110
Now, the real exciting part is being able
to access all your data. So for that we have

00:12:59.110 --> 00:13:04.379
a Data Export API that exposes dimensions
and metrics. We just talked about how all

00:13:04.379 --> 00:13:08.170
of those are calculated. But what's really
interesting is the protocol that we're using

00:13:08.170 --> 00:13:13.470
to do this. The protocol uses Google data.
And the query language to access all your

00:13:13.470 --> 00:13:18.899
data is very rich. You pretty much have access
to about 90% of all the data in your reports.

00:13:18.899 --> 00:13:24.999
And it's so simple. You can make exotic queries,
for example, like show me the number of visits

00:13:24.999 --> 00:13:30.499
who spend more than five minutes, who come
from Nepal, who bought blue swimming trunks

00:13:30.499 --> 00:13:35.089
for more than a hundred dollars. Now, I don't
really know who in Nepal buys swimming trunks

00:13:35.089 --> 00:13:38.999
that are very expensive, but if they do you
can query for it and find it out in your own

00:13:38.999 --> 00:13:40.779
reports.

00:13:40.779 --> 00:13:45.329
Now, I'm just going to quickly show you a
quick demo on exactly how powerful our query

00:13:45.329 --> 00:13:55.420
language is. If you go on our code site we
provide a simple tool called a Query Explorer.

00:13:55.420 --> 00:14:00.750
Here's our code section. You can see it's
code.google.com/apis/analytics. It's over

00:14:00.750 --> 00:14:02.660
here under the feed reference in the Query
Explorer.

00:14:02.660 --> 00:14:08.360
And you guys can log into this right now and
play around with it. Everything has, there's

00:14:08.360 --> 00:14:13.439
nice drill downs that show me all the accounts
that I have. There's information of all the

00:14:13.439 --> 00:14:16.440
queries we have. We have all our metrics here
and you can see all the information.

00:14:16.440 --> 00:14:24.240
Let's just start looking at a couple queries
to show you what we can do. So let's just

00:14:24.240 --> 00:14:29.769
quickly look at visits. Here we're gonna quickly
get the data. There it is. That's how much

00:14:29.769 --> 00:14:34.959
visits we're getting to the Google store for
the period of May 6 through May 20.

00:14:34.959 --> 00:14:41.119
Now let's add a dimension to that. Let's take
a look at the number of the different cities

00:14:41.119 --> 00:14:48.680
across the globe. Here we're looking at dimensions
and metrics for all the different cities.

00:14:48.680 --> 00:14:56.839
Now we could specify different filters. Let's
say we want to say, we want to say the country

00:14:56.839 --> 00:15:05.079
equals, let's see, the country has a regular
expression that it starts with united.

00:15:05.079 --> 00:15:07.329
[ pause ]

00:15:07.329 --> 00:15:13.290
&gt;&gt;Nick: Here we're getting a list of all the
cities in the United States. And the filter

00:15:13.290 --> 00:15:18.100
expression we can use an n, we could say show
me all the cities that are, or the city is

00:15:18.100 --> 00:15:19.100
California.

00:15:19.100 --> 00:15:20.100
[ pause ]

00:15:20.100 --> 00:15:22.369
&gt;&gt;Nick: Oop.

00:15:22.369 --> 00:15:23.540
[ pause ]

00:15:23.540 --> 00:15:35.249
&gt;&gt;Nick: [ Laughs ] You're right. [ Audience
laughs ]. [ Laughs ] Oop. All right.

00:15:35.249 --> 00:15:36.420
&gt;&gt; [ inaudible ].

00:15:36.420 --> 00:15:48.970
&gt;&gt;Nick: All right. So we'll say city. [ Everybody
laughs ] We're really agile, we'll, we'll

00:15:48.970 --> 00:15:57.220
mix up the example over here. It starts with
M. Okay. So, here's all our countries that

00:15:57.220 --> 00:16:02.490
start with United, where the city starts with
M. Let's now take a look at, maybe we want

00:16:02.490 --> 00:16:07.379
to do this by, we want to take a look at the
different keywords. We could jump under here

00:16:07.379 --> 00:16:09.600
and take a look at keyword.

00:16:09.600 --> 00:16:10.600
[ pause ]

00:16:10.600 --> 00:16:16.119
&gt;&gt;Nick: Here's all the different keywords.
Maybe we want to take a look at the segment

00:16:16.119 --> 00:16:18.490
and only look at new visitors. Let's get that
data.

00:16:18.490 --> 00:16:23.759
[ pause ]

00:16:23.759 --> 00:16:33.509
&gt;Nick: And so what the, there it is. And here
we're looking at new visits. And then we could

00:16:33.509 --> 00:16:41.290
come in here, we can say, maybe we want to
sort by visits, descending. So you get the

00:16:41.290 --> 00:16:46.809
picture here. You can play with all your data.
This tool is available. It's really simple

00:16:46.809 --> 00:16:51.100
to use, and it just really shows you the power
of how quickly you can get access to all your

00:16:51.100 --> 00:16:57.100
data, how you can display it in new ways and
really have a, a quick way to, to start analyzing

00:16:57.100 --> 00:16:58.890
your data in, in new environments.

00:16:58.890 --> 00:17:03.149
[ pause ]

00:17:03.149 --> 00:17:10.459
&gt;Nick: So if you have any questions about
our platform and the core pieces of what we're

00:17:10.459 --> 00:17:15.439
providing please ask them on Wave, or ask
them after the question. Again, we just want

00:17:15.439 --> 00:17:18.600
to spend a short time. All this information,
you probably have already read it. If you

00:17:18.600 --> 00:17:22.449
haven't, you should go read it after, after
this session.

00:17:22.449 --> 00:17:28.580
So now I want to talk about what we're enabling
developers on it, what they can start building

00:17:28.580 --> 00:17:33.529
on this platform that we're building around
our core processing engine. So most people

00:17:33.529 --> 00:17:39.769
use Google Analytics to collect data so they
can analyze, make changes to their site and

00:17:39.769 --> 00:17:45.309
--perfor, perfor-- improve the performance
of what their website's doing today.

00:17:45.309 --> 00:17:50.470
Now, when most people do that they start running
into issues like there's too much data, they

00:17:50.470 --> 00:17:54.220
don't have enough time and finally for the
people who are able to actually great, get

00:17:54.220 --> 00:17:59.710
great insights and make changes and improvements,
that process really doesn't scale well. So

00:17:59.710 --> 00:18:04.799
what if you could build a program that automatically
improves the performance for you?

00:18:04.799 --> 00:18:10.429
This example will teach you exactly how to
do that using the GA platform. So let's take

00:18:10.429 --> 00:18:14.880
a example of a list of links. Here's somebody
who has a site map on their page. And they,

00:18:14.880 --> 00:18:19.950
they've organized them into some categories.
But are these really the best way to order

00:18:19.950 --> 00:18:24.580
this list of links? Who knows? This is more
of a gut feeling.

00:18:24.580 --> 00:18:27.890
Now, people are coming to this site every
day. They're clicking on the links of what

00:18:27.890 --> 00:18:34.760
interests them, what interests them the most.
So how about we use Google Analytics to track

00:18:34.760 --> 00:18:40.559
the number of time people click on each of
these links, and then order them into something

00:18:40.559 --> 00:18:43.409
that will be a lot more relevant than they
are today.

00:18:43.409 --> 00:18:49.070
This example will demonstrate exactly how
to do that. Now, from a technical example,

00:18:49.070 --> 00:18:53.520
from a technical perspective, what this example
is really showing you is how you can integrate

00:18:53.520 --> 00:18:59.130
Google Analytics with your content management,
e-commerce platform, with your business intelligence

00:18:59.130 --> 00:19:05.090
information. By passing in a common set of
IDs into Google Analytics, and then exporting

00:19:05.090 --> 00:19:09.690
all the performance data by those IDs so you
can do amazing new things with them that you

00:19:09.690 --> 00:19:13.770
couldn't have done before.

00:19:13.770 --> 00:19:17.981
Let's take a look at how a content management
would, site would display a set of links on

00:19:17.981 --> 00:19:22.929
a, a bunch of pages. Now you guys are all
really advanced developers at Google I/O,

00:19:22.929 --> 00:19:27.809
so we're not gonna show you the actual code
to do this. But simply, there's a table that

00:19:27.809 --> 00:19:29.419
has link URLs in text.

00:19:29.419 --> 00:19:33.820
Each of them have a primary key. Your content
management issues a SQL query that gets all

00:19:33.820 --> 00:19:36.690
the data and displays a list of links on the
pages.

00:19:36.690 --> 00:19:41.730
Now for the purpose of this example, the most
important part is that the primary key is

00:19:41.730 --> 00:19:47.240
being passed and set in the name attribute
of each link. That way when we track it later

00:19:47.240 --> 00:19:51.419
on we'll have that ID and we can pass it into
Google Analytics.

00:19:51.419 --> 00:20:00.480
So I have PHP running here with a, with a
MySQL database that I'm creating a list of

00:20:00.480 --> 00:20:05.919
links here on the site. You can take a look
at the source. Here's our name attribute that

00:20:05.919 --> 00:20:10.320
has the ID which is our primary key on our
database. And they're just a bunch of listed

00:20:10.320 --> 00:20:11.320
links. Pretty simple.

00:20:11.320 --> 00:20:13.970
[ pause ]

00:20:13.970 --> 00:20:22.429
&gt;&gt;Nick: So let's take a look at how we'll
pass that information into Google Analytics

00:20:22.429 --> 00:20:27.659
and how we start tracking. So here's our list
of links that we looked at before. [ Clears

00:20:27.659 --> 00:20:30.789
throat ] And there's three steps that we're
gonna do. We're gonna implement the tracking

00:20:30.789 --> 00:20:34.929
code. We're gonna use, set this ID in what
we call a custom variable, and we're gonna

00:20:34.929 --> 00:20:39.120
pass that data to Analytics using an event.

00:20:39.120 --> 00:20:44.160
Let's take a look at the code and see exactly
how that works. So the first part of the code,

00:20:44.160 --> 00:20:49.740
and here, here you can see just the top file.
The first part of the code is just imp, implementing

00:20:49.740 --> 00:20:53.700
the tracking code. Now, we recently released
something called asynchronous tracking.

00:20:53.700 --> 00:20:59.799
Now, Google is obsessed with making the Web
faster. And so the asynch speeds up your page.

00:20:59.799 --> 00:21:04.769
By default with our traditional snippet a
browser will, with traditional JavaScript

00:21:04.769 --> 00:21:09.450
the browser will make a request for JavaScript.
And it'll wait and it won't execute anything

00:21:09.450 --> 00:21:13.159
until the request comes back and starts executing
the tracking code.

00:21:13.159 --> 00:21:18.330
With our asynch you can make this request
for the Google Analytics tracking code in

00:21:18.330 --> 00:21:24.090
parallel, allowing your page to continue rendering.
And finally, when the request comes back we

00:21:24.090 --> 00:21:30.059
execute the script and go on. So what this
means is that you can start issuing commands

00:21:30.059 --> 00:21:34.380
of tracking before the script has even loaded.
And that allows you to put the script at the

00:21:34.380 --> 00:21:37.630
top of the page and make sure that you're
collecting all your data.

00:21:37.630 --> 00:21:41.850
So let's quickly walk through what's going
on in this script here. We're first creating

00:21:41.850 --> 00:21:46.850
an array so that we can save a lot of commands.
Now, the way that we're tracking here is we're

00:21:46.850 --> 00:21:51.559
pushing arrays onto the array where each,
the first parameter is the actual method that

00:21:51.559 --> 00:21:54.850
we're tracking. And all the parameters are
actually the values that get passed into those

00:21:54.850 --> 00:21:55.850
functions.

00:21:55.850 --> 00:22:01.290
This in and of itself doesn't do any tracking,
but allows us to say this is what we want

00:22:01.290 --> 00:22:06.300
to be tracked once our script is loaded. Now
down below we have a self-executing function

00:22:06.300 --> 00:22:12.309
that will asynchronously load this tracking
script onto the page. Once the script's loaded,

00:22:12.309 --> 00:22:16.659
it'll go back to the array, it'll pull out
all the commands, it'll replace the GAAC array

00:22:16.659 --> 00:22:22.179
with the GAAC tracking object, execute the
commands and for any subsequent request to

00:22:22.179 --> 00:22:27.210
Analytics it'll go directly and make those
utm.gif requests.

00:22:27.210 --> 00:22:33.149
And that's, and that's it. I mean, you pretty
much copy and paste. This is what you're doing.

00:22:33.149 --> 00:22:36.570
You know, we make this ridiculously easy.
I don't have much more to talk about it because

00:22:36.570 --> 00:22:40.060
we just make it that easy.

00:22:40.060 --> 00:22:43.680
So now let's go into the section where we're
actually sending events and customer variables

00:22:43.680 --> 00:22:49.010
into Google Analytics, which is this section
here. Now for each click we're doing two things.

00:22:49.010 --> 00:22:52.169
We're passing two commands, the set custom
variable and the track event.

00:22:52.169 --> 00:22:57.980
Before we get into each of these, how many
people here have used custom variables? Great.

00:22:57.980 --> 00:23:03.320
Custom variable is super powerful. What it
allows you to do is send two strings to Google

00:23:03.320 --> 00:23:09.010
Analytics to describe either a visitor, a
session or a hit level. So what that means

00:23:09.010 --> 00:23:13.159
is if you have a person who comes to your
site and you have some sort of a membership,

00:23:13.159 --> 00:23:17.059
you can assign them a customer variable for
the membership that specifies if they're a

00:23:17.059 --> 00:23:20.760
gold, bronze or silver customer.

00:23:20.760 --> 00:23:26.230
You can assign a custom variable to a page
level or a hit level. For example, in a content

00:23:26.230 --> 00:23:30.190
site where you're having a lot of different
articles maybe you want to group the different

00:23:30.190 --> 00:23:36.340
pages by author. In this case, the first string
you would send is the auth, the name author.

00:23:36.340 --> 00:23:40.470
And then actually the name of the author is
the value. What that means is when you look

00:23:40.470 --> 00:23:46.460
in your reports you can find out the total
number of pages by these custom groupings.

00:23:46.460 --> 00:23:52.980
So the way we send this information to Google
Analytics is we call a set custom variable

00:23:52.980 --> 00:23:58.110
method. The second parameter that we pass
is, there, there are five custom variables

00:23:58.110 --> 00:24:00.029
that you could send at any one given time.

00:24:00.029 --> 00:24:06.700
So here we'll use the first custom variable.
Here we'll use the name top links. And here

00:24:06.700 --> 00:24:11.970
we'll pass the name attribute, which in this
case is our link ID. Now this is the key part

00:24:11.970 --> 00:24:17.200
here, is that we're using a customer variable
to pass an ID which represents the primary

00:24:17.200 --> 00:24:22.830
key in our database. This is the magic, this
is the advanced way to use Analytics.

00:24:22.830 --> 00:24:26.960
The second part of this method is to track
an event. How many people here know about

00:24:26.960 --> 00:24:33.169
event tracking? Events allow you to track
interactions with your content. Traditionally

00:24:33.169 --> 00:24:38.500
we've only had page views, but with Web 2.0
we have a lot of rich applications that we

00:24:38.500 --> 00:24:42.929
want to track how many people click the poke
me now button on Facebook.

00:24:42.929 --> 00:24:47.440
This is why we came out with event tracking.
Not for just tracking poke me buttons, but

00:24:47.440 --> 00:24:52.009
to track any sort of interaction with your
content. If you have a mobile site you can

00:24:52.009 --> 00:24:56.049
use tracking, you can use event tracking to
track the number of times people do clicks.

00:24:56.049 --> 00:24:59.750
And it's a way you can send your own data
into Analytics.

00:24:59.750 --> 00:25:04.070
In this case we'll use events just to send
a custom variable. We pass one string as the

00:25:04.070 --> 00:25:09.850
top links. And we pass the inner HTML value,
which is the value within the link tag here.

00:25:09.850 --> 00:25:16.210
That makes it really easy for us to interpret
the reports. So when we take a look at this

00:25:16.210 --> 00:25:25.389
page that we're tracking, let's go back for
a second.

00:25:25.389 --> 00:25:26.750
[ pause ]

00:25:26.750 --> 00:25:29.480
&gt;&gt;Nick: Okay.

00:25:29.480 --> 00:25:30.840
[ pause ]

00:25:30.840 --> 00:25:35.259
&gt;&gt;Nick: Here we have all the commands that
are being added on here for each of the clicks.

00:25:35.259 --> 00:25:42.870
And finally, if we open up Firebug here, request
the page, here we see the utm.gif parameter

00:25:42.870 --> 00:25:46.660
for page view we're tracking. For each of
these you can now see these utm.gif parameters

00:25:46.660 --> 00:25:50.280
being sent to Google Analytics. So now we're
being, we're collecting data.

00:25:50.280 --> 00:25:53.940
And you can actually come into each of these
and you can actually see the actual data that

00:25:53.940 --> 00:25:59.530
we're tracking, this UTM E parameter has all
the information. And if you can see it if

00:25:59.530 --> 00:26:03.639
you have really good eyesight you can see
that we're tracking top links, we're tracking

00:26:03.639 --> 00:26:08.279
the string inside of it and we're tracking
the actual link ID, which is our primary key.

00:26:08.279 --> 00:26:13.809
Now what I've showed you is how to use Firebug.
You can use Developer Tools and Chrome, but

00:26:13.809 --> 00:26:19.250
tracking the actual request to Analytics is
a great way to troubleshoot your implementations.

00:26:19.250 --> 00:26:23.980
Instead of waiting 24 hours for your data
to be processed, you can be assured that if

00:26:23.980 --> 00:26:28.140
you're sending us data we'll be processing
your data. So use the tools like this to make

00:26:28.140 --> 00:26:34.589
sure that you're debugging and that your code
is actually working properly. All right.

00:26:34.589 --> 00:26:36.400
[ pause ]

00:26:36.400 --> 00:26:44.539
&gt;&gt;Nick: So we just talked about how we're
sending data into GA. Now what we want to

00:26:44.539 --> 00:26:50.980
do is export the times, all that information,
and store it in our database. So the process

00:26:50.980 --> 00:26:56.130
we're gonna do is this two step approach.
We're gonna create a Java application that's

00:26:56.130 --> 00:26:59.509
gonna be able to be rescheduled, and it's
gonna go out to Google Analytics using our

00:26:59.509 --> 00:27:04.860
Data Export API. It's gonna pull all the relevant
data for us and store it into a database.

00:27:04.860 --> 00:27:09.590
Then on the client's side when it makes requests
for this page of links we hit our server.

00:27:09.590 --> 00:27:11.780
It'll just hit our local database and return
that to the end user.

00:27:11.780 --> 00:27:18.559
Going through this process is, is really simple.
The main, the first part that I want to really

00:27:18.559 --> 00:27:23.100
talk about and focus on is how we map the
tracking code to our Data Export API Query.

00:27:23.100 --> 00:27:27.450
So we just talked about setting custom variables.
Where we set the first custom variable, we

00:27:27.450 --> 00:27:32.310
pass it two strings, the name of the custom
variable, top links, and the value is the

00:27:32.310 --> 00:27:33.340
ID which is our primary key.

00:27:33.340 --> 00:27:39.110
So when we look at the Data Export API Query
we first want to set a filter where we're

00:27:39.110 --> 00:27:44.789
only looking at data for the first custom
variable whose name is top links. We then

00:27:44.789 --> 00:27:48.669
want to set the dimensions to look at the
first custom variable value, which is our

00:27:48.669 --> 00:27:50.029
primary key.

00:27:50.029 --> 00:27:54.779
And finally, we want to look at total events.
So notice here that we're using custom variables

00:27:54.779 --> 00:28:01.139
to track the dimensions, but we're using event
tracking to track the number of metrics. How

00:28:01.139 --> 00:28:08.429
many people have a configuration set up like
this?

00:28:08.429 --> 00:28:14.750
Let's take a look at the code now, that it
shows us how we export our data into our database.

00:28:14.750 --> 00:28:20.870
Now here's a simple Java application. In our
main method we create a new example, and we

00:28:20.870 --> 00:28:26.080
run the main example by passing all the arguments.
There's five steps. There's, we're first gonna

00:28:26.080 --> 00:28:30.259
configure the data range so we can schedule
this as a cron job. We're then gonna create

00:28:30.259 --> 00:28:34.220
a MySQL database connection. You guys all
know how to do that with JDBC.

00:28:34.220 --> 00:28:38.070
We'll then use a, create a, retrieve a Google
Analytics service object. Now this is the

00:28:38.070 --> 00:28:43.620
object that allows you to access all the data
in Google Analytics. We'll then get the data

00:28:43.620 --> 00:28:48.620
and then we'll update the database with our
information. Now this code, we're gonna write

00:28:48.620 --> 00:28:51.879
an article, we'll, we'll open source the code.
You'll be able to take it and put it in your

00:28:51.879 --> 00:28:53.139
own environments.

00:28:53.139 --> 00:28:57.289
So today I'm only gonna talk about the most
important part that's relevant to GA, which

00:28:57.289 --> 00:29:01.549
is how we get the Analytics service object.
And we're gonna show you how ridiculously

00:29:01.549 --> 00:29:09.910
easy it is to actually make queries to our
API. So here's the method where we're getting

00:29:09.910 --> 00:29:15.221
the service object. This Analytics service
class is in our Java client library. You can

00:29:15.221 --> 00:29:20.049
get it online. You pass it, the name attribute
of your application, or name string, or string,

00:29:20.049 --> 00:29:22.629
and you get an object back.

00:29:22.629 --> 00:29:26.779
In this case you need authorized access to
the API, so we're gonna use a method called

00:29:26.779 --> 00:29:32.370
client login. Now this application's gonna
sit on our server, it's gonna be running every

00:29:32.370 --> 00:29:37.179
day, every week, every month. Nobody's gonna
be having to authenticate. So we just use

00:29:37.179 --> 00:29:42.539
client login to pass the user name and password.
And at that point we have an object that we

00:29:42.539 --> 00:29:47.169
can actually access our API. It's that simple.

00:29:47.169 --> 00:29:51.899
Let's now look at how we use the object to
get data. The first part is specifying a URL

00:29:51.899 --> 00:29:57.230
that defines the end point of Analytics. We
create a new query object by passing in the

00:29:57.230 --> 00:30:03.039
URL. We then specify which profile we want
to access to start an end data range. And

00:30:03.039 --> 00:30:07.529
here we set our filters, dimensions and metrics.
What we just looked at.

00:30:07.529 --> 00:30:12.940
Finally, we set the sort. And now for the
Analytics service object, we call it a get

00:30:12.940 --> 00:30:19.840
feed member. Let me just pull this up. We're
passing the query. We're passing the class.

00:30:19.840 --> 00:30:25.970
And boom, the feed result has all the data
from Analytics. It's that simple. Once we

00:30:25.970 --> 00:30:31.850
call this line magic happens, data's returned,
you guys can do amazing stuff.

00:30:31.850 --> 00:30:36.990
It's super easy to use. And the problem I
have explaining this it's so easy that I don't

00:30:36.990 --> 00:30:40.519
have that much, most of the time I'd speak
around how you can set this into the database.

00:30:40.519 --> 00:30:44.239
It's, it's hard to find really great examples
because it's just so easy.

00:30:44.239 --> 00:30:48.140
[ pause ]

00:30:48.140 --> 00:30:56.649
So now we have our data in the database. The
last step is to use that information. Here

00:30:56.649 --> 00:31:01.010
was the original table that we looked at that
had the primary key of the link ID. Our original

00:31:01.010 --> 00:31:07.629
query just got the link name, the URL and
the text. Our example just created a new table

00:31:07.629 --> 00:31:13.509
and uploaded total events by the primary key.
And now we can update the query to join on

00:31:13.509 --> 00:31:17.140
the ID and order results by the total events.

00:31:17.140 --> 00:31:23.190
Now this is a really simple example, but the
implications are powerful. What we were able

00:31:23.190 --> 00:31:27.170
to do is say for the number of times people
clicked on their site, we were able to track

00:31:27.170 --> 00:31:32.200
the user behavior and then present a brand
new experience to them based on what people

00:31:32.200 --> 00:31:33.899
have done the most on your site.

00:31:33.899 --> 00:31:38.190
Now imagine you have a e-commerce site that
has a list of products. What products should

00:31:38.190 --> 00:31:46.580
you show people? Would you order them by alphabetical
order, by color? What if you used the ordering

00:31:46.580 --> 00:31:51.960
by how many people go to certain product pages
when they search for the word shoes, and order

00:31:51.960 --> 00:31:55.940
a list of products based on what people visit
the most. That's what you can do with this

00:31:55.940 --> 00:31:56.940
information.

00:31:56.940 --> 00:32:02.780
[ pause ]

00:32:02.780 --> 00:32:07.070
So on top of all this stuff that we're building
for people, what I really am excited about

00:32:07.070 --> 00:32:11.159
is that we're really putting a lot of resources
to build out our developer ecosystem. We think

00:32:11.159 --> 00:32:13.220
there's amazing new things people can do.

00:32:13.220 --> 00:32:17.590
We're putting, we just released an app gallery
that shows the type of integrations that people

00:32:17.590 --> 00:32:22.190
have done. We're inviting our developers to
come speak at conferences. We have two people

00:32:22.190 --> 00:32:26.970
out in the sandbox. We have Juice Analytics
and ShufflePoint, who can walk you through

00:32:26.970 --> 00:32:29.889
all the exciting things that they've done
with the data and the type of integrations

00:32:29.889 --> 00:32:33.679
that they're able to do. We're doing blog
posts where I personally will write about

00:32:33.679 --> 00:32:37.779
your application and give it to our 50,000
readers on our blog.

00:32:37.779 --> 00:32:42.080
We really are excited about the new stuff
that you can do on how you can integrate Google

00:32:42.080 --> 00:32:49.941
Analytics data with your business data to
create brand new insights. So if you have

00:32:49.941 --> 00:32:54.619
any questions, feel free to come up to the
mic. I'll be happy to answer them.

00:32:54.619 --> 00:32:56.299
[ Audience claps ]

00:32:56.299 --> 00:32:57.970
&gt;&gt;Nick: Yep.

00:32:57.970 --> 00:33:06.409
&gt;&gt;[Male audience member #1 with Slavic accent]
Hi. So, it, it was very interesting when,

00:33:06.409 --> 00:33:13.620
when you walked through this whole process
of tracking, sending the tracking data to

00:33:13.620 --> 00:33:16.629
the Analytics there [ clears throat ], exporting
them, displaying them in the database. It's,

00:33:16.629 --> 00:33:24.519
it's so great. Now, I, I just, Iâ€™m just
wondering. If I just track those URLs on my

00:33:24.519 --> 00:33:30.430
site, just put them into a database and command
the counter and then use this as a result

00:33:30.430 --> 00:33:34.590
without just going all this around trips,
through the Analytics and back. Would that

00:33:34.590 --> 00:33:40.290
work? Probably yes. So why, why to do the
whole, the whole thing and what are the advantages

00:33:40.290 --> 00:33:41.290
of doing this?

00:33:41.290 --> 00:33:45.669
&gt;&gt;Nick: That's a great question. So, so the
question if I can, if I can repeat it. What

00:33:45.669 --> 00:33:50.120
you're asking is saying there's two ways to
export data. One of them is a two step approach

00:33:50.120 --> 00:33:53.659
by putting all this stuff into a local database.
And the other option is just querying our

00:33:53.659 --> 00:33:55.550
API directly for each request.

00:33:55.550 --> 00:33:56.550
&gt;&gt;[Male audience member #1] No.

00:33:56.550 --> 00:33:57.550
&gt;&gt;Nick: No.

00:33:57.550 --> 00:33:58.550
&gt;&gt;[Male audience member #1] My question is,
I own the data.

00:33:58.550 --> 00:33:59.550
&gt;&gt;Nick: Sure.

00:33:59.550 --> 00:34:01.670
&gt;&gt;[Male audience member #1] So I have it in
my database. So I can just calculate it in

00:34:01.670 --> 00:34:05.039
my database without going to Analytics, and
just present to my users.

00:34:05.039 --> 00:34:07.090
&gt;&gt;Nick: Exactly. So you have the data in your
database.

00:34:07.090 --> 00:34:08.090
&gt;&gt;[Male audience member #1] Yes.

00:34:08.090 --> 00:34:11.240
&gt;&gt;Nick: But what we have is the engine to
allow you to track how users interact with

00:34:11.240 --> 00:34:14.139
the content that your database is serving.
So for exampleâ€”

00:34:14.139 --> 00:34:15.450
&gt;&gt;[Male audience member #1] But I'm serving
the content.

00:34:15.450 --> 00:34:16.450
&gt;&gt;Nick: Sure.

00:34:16.450 --> 00:34:19.399
&gt;&gt;[Male audience member #1] With my applications.
So I know how, how I am serving the content.

00:34:19.399 --> 00:34:22.360
&gt;&gt;Nick: Right. But do you know how people
are interacting with, how many people are

00:34:22.360 --> 00:34:26.919
clicking on link A, how many people are going
to product B and how are, how many people

00:34:26.919 --> 00:34:31.179
from search keyword shoes are clicking on
those compared to people on search keyword

00:34:31.179 --> 00:34:36.050
t-shirts? So that kind of visibility into
being able to query against all these dimensions

00:34:36.050 --> 00:34:41.520
and metrics gives you new views into the data
that, which you can definitely build yourself.

00:34:41.520 --> 00:34:43.652
But why build it yourself when you can get
it for free?

00:34:43.652 --> 00:34:46.290
&gt;&gt;[Male audience member #1] Thanks.

00:34:46.290 --> 00:34:53.260
&gt;&gt;[Male audience member #2] I have two feature
requestee kind of questions. And of course

00:34:53.260 --> 00:34:58.470
I'm not expecting you to announce anything,
but I am sort of curious to hear your attitude

00:34:58.470 --> 00:35:02.000
about them and maybe gesture towards when
I might be likely to see them. The two features,

00:35:02.000 --> 00:35:09.720
first real-time analytics, or at least less
than 24 hours time analytics. And the second,

00:35:09.720 --> 00:35:14.040
data portability. I, I've given you guys a
lot of data, and I wish I could get it all

00:35:14.040 --> 00:35:16.849
out. I don't just want to query it. I want
to get my data back.

00:35:16.849 --> 00:35:20.930
&gt;&gt;Nick: No, those are great questions. So,
we're trying to reduce the time it takes to

00:35:20.930 --> 00:35:25.069
process data. And for smaller accounts you
generally, the data will be done faster. So

00:35:25.069 --> 00:35:28.940
we're always trying to improve that. And so
it really depends on the size of the account.

00:35:28.940 --> 00:35:32.400
So when we process YouTube it takes a little
bit more time than we process maybe like a

00:35:32.400 --> 00:35:37.099
smaller blog. So I would, so it really depends
on the size.

00:35:37.099 --> 00:35:40.890
And the other question you had is how do you
access all your data. So one is we, we, you

00:35:40.890 --> 00:35:44.990
know, before we didn't even have a Data Export
API. So now we have an Export API. And we're

00:35:44.990 --> 00:35:51.550
starting to allow you to access all that information.
We're reducing the quota more and more, so

00:35:51.550 --> 00:35:56.369
that way you can access all the information
account, export it out and present it. I,

00:35:56.369 --> 00:36:01.109
I guess the, the big challenge when we, when
we hear that is that it, it's not necessarily

00:36:01.109 --> 00:36:05.140
like a table that we store in Analytics, it's
more of a data queue. So the combinations

00:36:05.140 --> 00:36:09.260
of dimensions and metrics can be infinite.
You can say well show me how many, you know,

00:36:09.260 --> 00:36:13.579
show me the visits and dimen, you know, visits
and pages from cities that start with M, right.

00:36:13.579 --> 00:36:17.609
&gt;&gt;[male audience member #2] Well that's a
query. I mean I, you have raw data sitting

00:36:17.609 --> 00:36:21.569
somewhere. I don't care what format it's in.
You can give it to me in any format you like.

00:36:21.569 --> 00:36:22.569
&gt;&gt;Nick: Sure.

00:36:22.569 --> 00:36:25.980
&gt;&gt;[Male audience member #2] But I mean, the
Data Export API is not an export API, it's

00:36:25.980 --> 00:36:32.020
a query API. I can make any query I want,
but I can't get my, all my data back out again.

00:36:32.020 --> 00:36:33.020
And thatâ€”

00:36:33.020 --> 00:36:34.020
&gt;&gt;Nick: Yeah, no.

00:36:34.020 --> 00:36:35.020
&gt;&gt;[Male audience member #2] You know, like
a data dump.

00:36:35.020 --> 00:36:38.040
&gt;&gt;Nick: Sure. It's definitely something we've
heard a lot. Maybe we can talk about some

00:36:38.040 --> 00:36:42.960
more of your use cases after that. After this
session, so we can get, you know, we can help

00:36:42.960 --> 00:36:43.960
better understand it.

00:36:43.960 --> 00:36:44.960
&gt;&gt;[Male audience member #2] Okay, thanks.

00:36:44.960 --> 00:36:48.650
&gt;&gt;Nick: Sure. All the way in the back.

00:36:48.650 --> 00:36:50.960
&gt;&gt;[Male audience member #3] Yeah. So I've
been spending the past couple of days thinking

00:36:50.960 --> 00:36:57.670
about the asynch JavaScript code. And it looks
to me sort of like you've, you've moved into

00:36:57.670 --> 00:37:02.870
almost a declarative programming paradigm.
I, I sort of write out a list of things I

00:37:02.870 --> 00:37:08.170
want to do and I push them onto a stack and,
and then it gets executed somehow.

00:37:08.170 --> 00:37:09.170
&gt;&gt;Nick: Um-hum.

00:37:09.170 --> 00:37:13.960
&gt;&gt;[Male audience member #3] What was the design
philosophy behind that? Why did you go that

00:37:13.960 --> 00:37:14.960
way?

00:37:14.960 --> 00:37:18.790
&gt;&gt;Nick: It, it's a great question. So first
we wanted to do asynch, right, to make the

00:37:18.790 --> 00:37:22.680
Web faster so it could load on the majority
of browsers. The challenge though is that

00:37:22.680 --> 00:37:27.309
when we're telling people to track before
the object to track is even there, we needed

00:37:27.309 --> 00:37:33.250
a simple mechanism so that we, we can queue
up requests and then execute them later. So

00:37:33.250 --> 00:37:36.710
to keep it simple we just created an array
so that we can push these commands as a command

00:37:36.710 --> 00:37:37.710
array onto them.

00:37:37.710 --> 00:37:38.710
&gt;&gt;[Male audience member #3] Okay.

00:37:38.710 --> 00:37:42.330
&gt;&gt;Nick: So it's more of a, a function of how
do we allow you to track before you can even

00:37:42.330 --> 00:37:46.200
track. And then make it simple so you can
continue to track after you can really send

00:37:46.200 --> 00:37:47.200
data to our services.

00:37:47.200 --> 00:37:48.470
&gt;&gt;[Male audience member #3] Okay, thanks.

00:37:48.470 --> 00:37:49.470
&gt;&gt;Nick: Sure. Yeah.

00:37:49.470 --> 00:37:55.680
&gt;&gt;[Male audience member #4] I have a question,
also feature related to, we're sort of synchronized,

00:37:55.680 --> 00:37:58.470
synchronicity. If there, say for example I,
I have a Web application. It's a premium user

00:37:58.470 --> 00:38:09.390
application, user base, base for it. And I
add, I don't know, sort of like a, whatever,

00:38:09.390 --> 00:38:16.270
a calendar. Can I put event tracking codes
into every single of the buttons into my UI

00:38:16.270 --> 00:38:21.680
to track, and use the data, the Data Export
API to bring that information back down and

00:38:21.680 --> 00:38:26.750
sort of make a heat map of the application
as it's used? Can, can I query for each of

00:38:26.750 --> 00:38:32.059
the buttons, and each of the buttons be brought
back and sort of, even if it's copy and pasted,

00:38:32.059 --> 00:38:35.480
I don't care. I'm doing it once a day. I don't
need it in real-time. But can I do the, that?

00:38:35.480 --> 00:38:39.500
&gt;&gt;Nick: Yeah. You can, you can use events
tracking. There's one limitation on events.

00:38:39.500 --> 00:38:41.510
You can send 500 events per session currently.

00:38:41.510 --> 00:38:42.670
&gt;&gt;[Male audience member #4] Okay.

00:38:42.670 --> 00:38:45.490
&gt;&gt;Nick: And that's a limitation in, well that's
a restriction we have in the JavaScript.

00:38:45.490 --> 00:38:46.490
&gt;&gt;[Male audience member #4] Um-hum.

00:38:46.490 --> 00:38:49.720
&gt;&gt;Nick: But the way people would typically
track where people are interacting is like

00:38:49.720 --> 00:38:51.550
if you have an ID for each of those buttonsâ€”

00:38:51.550 --> 00:38:52.550
&gt;&gt;[Male audience member #4] Um-hum.

00:38:52.550 --> 00:38:53.550
&gt;&gt;Nick: That's like a DOM elementâ€”

00:38:53.550 --> 00:38:54.550
&gt;&gt;[Male audience member #4] Um-hum.

00:38:54.550 --> 00:38:55.550
&gt;&gt;Nick: that's defined as a ID attribute.

00:38:55.550 --> 00:38:56.550
&gt;&gt;[Male audience member #4] Um-hum.

00:38:56.550 --> 00:38:58.619
&gt;&gt;Nick: You can pass the ID as one of the
parameters to event tracking. So that way

00:38:58.619 --> 00:39:03.081
you'll know where to actually draw the, the,
the information on top of that.

00:39:03.081 --> 00:39:04.450
&gt;&gt;[Male audience member #4] Okay.

00:39:04.450 --> 00:39:05.540
&gt;&gt;Nick: It's definitely possible.

00:39:05.540 --> 00:39:06.911
&gt;&gt;[Male audience member #4] Thank you.

00:39:06.911 --> 00:39:07.911
&gt;&gt;Nick: Sure. Yep.

00:39:07.911 --> 00:39:09.620
&gt;&gt;[Male audience member #5 with Indian accent]
Hi. If I have an application like a Google

00:39:09.620 --> 00:39:13.210
Earth or Google Maps based application, would
it be able to track, like really use it as

00:39:13.210 --> 00:39:15.440
navigating, or you know, clicking on Google
Earth?

00:39:15.440 --> 00:39:22.620
&gt;&gt;Nick: That's a good question. So if you're
able to listen to the events of somebody interacting

00:39:22.620 --> 00:39:28.750
with the map, in the function handler you
can then issue tracking code, execute event

00:39:28.750 --> 00:39:29.750
tracking to Google Analytics.

00:39:29.750 --> 00:39:32.480
&gt;&gt;[Male audience member #5] Okay. Thanks.

00:39:32.480 --> 00:39:33.480
&gt;&gt;Nick: Sure.

00:39:33.480 --> 00:39:39.609
&gt;&gt;[Male audience member #6] Right now you
allow one account code per page, is that correct?

00:39:39.609 --> 00:39:45.970
&gt;&gt;Nick: So, the best practice is to use one
account code per page. But many people, I've

00:39:45.970 --> 00:39:50.069
seen up to five on a page. So, you can, you
can definitely add more. There are certain

00:39:50.069 --> 00:39:54.380
implications on doing that. So we don't, we
don't promote it because weird things could

00:39:54.380 --> 00:39:57.420
happen with the data. But it's definitely
possible.

00:39:57.420 --> 00:40:01.829
&gt;&gt;[Male audience member #6] Okay. By weird
things, well okay, the reason why I'm asking

00:40:01.829 --> 00:40:07.910
is what our application does is it modifies
a customer's Web page. So they have their

00:40:07.910 --> 00:40:09.720
own analytics that they want to do.

00:40:09.720 --> 00:40:10.720
&gt;&gt;Nick: Um-hum.

00:40:10.720 --> 00:40:15.460
&gt;&gt; And we want to be able to as part of our
verification, include our, our own code as

00:40:15.460 --> 00:40:16.460
well.

00:40:16.460 --> 00:40:17.460
&gt;&gt;Nick: Sure.

00:40:17.460 --> 00:40:20.850
&gt;&gt;[Male audience member #6] So that was, that's
the reason why it would be very valuable for

00:40:20.850 --> 00:40:21.850
us.

00:40:21.850 --> 00:40:22.850
&gt;&gt;Nick: Yeah.

00:40:22.850 --> 00:40:24.510
&gt;&gt;Nick: No, so a lot of people do that today.
The challenge is, is that our persistence

00:40:24.510 --> 00:40:28.680
to track the visitor session actually happens
in a cookie. And there's only one cookie name

00:40:28.680 --> 00:40:32.599
space that we use. So both tracking codes
are actually using the same cookie set. So

00:40:32.599 --> 00:40:37.359
what that means is that if you have, if the,
if the client is tracking a hundred pages

00:40:37.359 --> 00:40:42.150
and you're only tracking a subset of maybe
50 pages, you guys are still gonna be using

00:40:42.150 --> 00:40:44.290
the same session information.

00:40:44.290 --> 00:40:48.660
So a person can come to their tracking code
and be counted as a first time visitor. And

00:40:48.660 --> 00:40:53.079
then come to your tracking code and they'll
look like a brand new, they'll look like a

00:40:53.079 --> 00:40:56.500
return visitor even though it's the first
time they've, they're on your page.

00:40:56.500 --> 00:41:00.450
So it's more of an issue with the way the
cookies and the storage works. But it's definitely

00:41:00.450 --> 00:41:04.290
possible for like interaction information,
like pages, and visitor information 'cause

00:41:04.290 --> 00:41:05.290
the, the visitor never changes.

00:41:05.290 --> 00:41:10.000
&gt;&gt;[Male audience member #6] Well, it would
be nice if you could look at making that more,

00:41:10.000 --> 00:41:11.010
more possible.

00:41:11.010 --> 00:41:12.010
&gt;&gt;Nick: Sure.

00:41:12.010 --> 00:41:13.660
&gt;&gt;[Male audience member #6] Because I'm sure
I'm not the only one in here who does things

00:41:13.660 --> 00:41:14.660
like widgets and such like that.

00:41:14.660 --> 00:41:15.660
&gt;&gt;Nick: Sure.

00:41:15.660 --> 00:41:20.051
&gt;&gt;[Male audience member #6] And a related
question is, because our customers tend to

00:41:20.051 --> 00:41:28.290
be rather unsophisticated, have you thought
about connecting the analytics directly to

00:41:28.290 --> 00:41:29.750
a Google spreadsheet?

00:41:29.750 --> 00:41:35.201
&gt;&gt;Nick: That's a great question. We, we have.
We've talked to the spreadsheet team. Recently

00:41:35.201 --> 00:41:40.420
they released what's called Apps Script. And
there's actually a, a guy who's out in, in

00:41:40.420 --> 00:41:44.470
Europe who actually created scripts that actually
can do that today. So that, so that's actually

00:41:44.470 --> 00:41:52.299
available. Just search for Google Apps Scripts
analytics and it'll give you actually the

00:41:52.299 --> 00:41:53.299
code so you can start doing that today.

00:41:53.299 --> 00:42:00.260
&gt;&gt;[Male audience member #6] Okay. And the
last question I have, promise [ laughs ], is

00:42:00.260 --> 00:42:05.931
the world is not organized really around political
boundaries if you think about New York City,

00:42:05.931 --> 00:42:07.000
right next to New Jersey.

00:42:07.000 --> 00:42:08.000
&gt;&gt;Nick: Sure.

00:42:08.000 --> 00:42:11.349
&gt;&gt;[Male audience member #6] Like Upstate New
York is a whole lot different than New York

00:42:11.349 --> 00:42:18.270
City proper. And so being able to do a query
based upon urban region if you willâ€”

00:42:18.270 --> 00:42:19.270
&gt;&gt;Nick: Sure.

00:42:19.270 --> 00:42:21.280
&gt;&gt;[Male audience member #6] is really kind
of critical. 'Cause I mean, if you talk to

00:42:21.280 --> 00:42:25.700
someone who's from New York they talk about
The Bronx is different than Manhattan, for

00:42:25.700 --> 00:42:26.700
example.

00:42:26.700 --> 00:42:27.700
&gt;&gt;Nick: Right.

00:42:27.700 --> 00:42:29.770
&gt;&gt;[Male audience member #6] But even in the
Bay Area San Francisco, I'm sorry, San Jose,

00:42:29.770 --> 00:42:31.510
South San Jose is different than like closer
Mountain View and so on.

00:42:31.510 --> 00:42:32.510
&gt;&gt;Nick: Um-hum.

00:42:32.510 --> 00:42:37.530
&gt;&gt;[Male audience member #6] It depends upon
your target market, but being able to query

00:42:37.530 --> 00:42:40.260
based upon some sort of non-political boundary.

00:42:40.260 --> 00:42:45.930
&gt;&gt;Nick: Right. No, that's a good question.
So the standard report says continent, sub-continent,

00:42:45.930 --> 00:42:50.970
country, region or state and city. We also
expose the latitude and longitude through

00:42:50.970 --> 00:42:54.799
our Data Export API, so you're able to use
that. And you can actually see a demo of how

00:42:54.799 --> 00:42:59.520
people have integrated map data with Google
Earth outside in, in the sandbox. So we have

00:42:59.520 --> 00:43:03.319
some of that capability. But I, but I would
completely agree. It could be more flexible.

00:43:03.319 --> 00:43:05.490
&gt;&gt;[Male audience member #6] The U.S. Census
kind of codes things.

00:43:05.490 --> 00:43:06.490
&gt;&gt;Nick: Sure.

00:43:06.490 --> 00:43:07.490
&gt;&gt;[Male audience member #6] The U.S. departmentâ€”

00:43:07.490 --> 00:43:10.349
&gt;&gt;Nick: So that's a, that's actually a great
question. So there's certain IDs that you're

00:43:10.349 --> 00:43:14.820
probably accessing like the, the DMA ID or
the U.S. Census ID. We'd love to hear kind

00:43:14.820 --> 00:43:17.089
of what those would be great, mostly so for
you. Yep?

00:43:17.089 --> 00:43:22.650
&gt;&gt;[Male audience member #7] Are there any
plans to support more, I don't know if you

00:43:22.650 --> 00:43:27.380
addressed this earlier, but more page views?
I think you guys are capping out at like 30

00:43:27.380 --> 00:43:28.660
million or something like that.

00:43:28.660 --> 00:43:34.349
&gt;&gt;Nick: Right. So it, it really depends. So
there's two types of, for advertisers who

00:43:34.349 --> 00:43:41.230
link their analytics and, and add words of
counts we ask that they no, send no more than

00:43:41.230 --> 00:43:48.319
30 million pages per day. Now after and beyond
that it becomes hard to really understand

00:43:48.319 --> 00:43:52.530
like what's the additional value, because
you have such a great sample set. So we typically

00:43:52.530 --> 00:43:56.390
ask those people to enable what's called sampling.
So you would only get a percentage of those

00:43:56.390 --> 00:44:00.030
visitors. And, and generally when you're looking
at analytics none of the data is gonna be

00:44:00.030 --> 00:44:05.380
absolute. What you're really looking for are
more of relative trends. So today we are at

00:44:05.380 --> 00:44:09.920
a hundred. And then we launched a product
and now we're at 10,000. So that increase

00:44:09.920 --> 00:44:16.369
in traffic is the most important part. And
that's typically worked well. So currently,

00:44:16.369 --> 00:44:20.049
I mean those are the limits. You could, I
mean that's what we state. You can send more

00:44:20.049 --> 00:44:23.330
but it's not what we're looking for. Yep?

00:44:23.330 --> 00:44:28.400
&gt;&gt;[Male audience member #7] I have 200 or
300 insurance websites that all use Analytics.

00:44:28.400 --> 00:44:29.400
&gt;&gt;Nick: Um-hum.

00:44:29.400 --> 00:44:33.920
&gt;&gt;[Male audience member #7] On each of the
sites they link to another one of our servers

00:44:33.920 --> 00:44:37.990
that provides security for forms; auto, home,
coal form, stuff like that.

00:44:37.990 --> 00:44:38.990
&gt;&gt;Nick: Sure.

00:44:38.990 --> 00:44:43.530
&gt;&gt;[Male audience member #7] Is there a way,
or what is the best way to incorporate the

00:44:43.530 --> 00:44:48.690
analytics on my individual sites with their
specific forums on a separate server?

00:44:48.690 --> 00:44:53.630
&gt;&gt;Nick: That's a good question. So the, the
main issue, it depends, our persistence all,

00:44:53.630 --> 00:44:58.170
are based on cookies. So all the information
of where they came from, the visitor ID, all

00:44:58.170 --> 00:45:01.580
that information is in a cookie. So the, the
key thing is to make sure that you can read

00:45:01.580 --> 00:45:06.790
that information on these other sites. If
it's to some, if it's, if it's the same domain

00:45:06.790 --> 00:45:10.270
you're able to read the cookie. If it's a
different domain then what you have, we have

00:45:10.270 --> 00:45:13.780
a couple methods that allow you to serialize
all the cookie information and pass that to

00:45:13.780 --> 00:45:19.160
your server. And then there's a method which
when enabled, it'll look for the, the query

00:45:19.160 --> 00:45:22.530
parameter, the final page, to see if that
information is there. And if it is it'll reset

00:45:22.530 --> 00:45:26.151
the cookie instead of creating a new one.
So the idea is to pass all the cookie information

00:45:26.151 --> 00:45:27.151
through the query parameters.

00:45:27.151 --> 00:45:29.530
&gt;&gt;[Male audience member #7] Okay. And one
of the issues we have is some of the forms

00:45:29.530 --> 00:45:30.950
are four, five, six pages long.

00:45:30.950 --> 00:45:31.950
&gt;&gt;Nick: Um-hum.

00:45:31.950 --> 00:45:35.040
&gt;&gt;[Male audience member #7] And we're trying
to figure out which questions are getting

00:45:35.040 --> 00:45:36.530
people to stop filling the form out.

00:45:36.530 --> 00:45:37.530
&gt;&gt;Nick: Um-hum.

00:45:37.530 --> 00:45:41.190
&gt;&gt;[Male audience member #7] And that's, I
think I kind of understand what you're saying

00:45:41.190 --> 00:45:44.560
with the cookies to allow, because the, the
secure server all uses the same domain.

00:45:44.560 --> 00:45:45.560
&gt;&gt;Nick: Sure.

00:45:45.560 --> 00:45:48.059
&gt;&gt;[Male audience member #7] So each of those
sites use the same domain for that.

00:45:48.059 --> 00:45:49.059
&gt;&gt;Nick: Um-hum.

00:45:49.059 --> 00:45:52.834
&gt;&gt;[Male audience member #7] Now, is that a
setting I just change in the code that I embed

00:45:52.834 --> 00:45:53.834
into the sites, orâ€”

00:45:53.834 --> 00:45:55.600
&gt;&gt;Nick: Exactly. So everything we track is
based on the account ID that you put on the

00:45:55.600 --> 00:45:56.600
page.

00:45:56.600 --> 00:45:57.600
&gt;&gt;[Male audience member #7] Okay.

00:45:57.600 --> 00:46:03.240
&gt;&gt;Nick: Right? So what you want to do is say
this person came from site A, serialize the

00:46:03.240 --> 00:46:07.400
cookie, send it over to the new domain, reset
the cookies, make sure you're using the proper

00:46:07.400 --> 00:46:12.150
ID, track all the pages. From the Analytics
side it'll look like the same user was going

00:46:12.150 --> 00:46:17.220
across all the pages. On the final form you
set up funnel goals, funnel, goals and funnel

00:46:17.220 --> 00:46:21.059
abandonment. You can see where people drop
off. And then you can use our Export API.

00:46:21.059 --> 00:46:22.059
Yeah, it's exciting.

00:46:22.059 --> 00:46:25.500
&gt;&gt;[Male audience member #7] And one more question
real quick. Is there a way to have more than

00:46:25.500 --> 00:46:27.040
50 sites per account?

00:46:27.040 --> 00:46:33.220
&gt;&gt;Nick: Yeah. It's, it's generally 50, there's
certain, if you have like an account manager

00:46:33.220 --> 00:46:36.760
with Adwords you can work with them to try
to increase that. If you're reaching to the

00:46:36.760 --> 00:46:40.090
50 part, you probably, most likely you want
to start moving over to, starting to use new

00:46:40.090 --> 00:46:44.740
accounts. And so you can sign up for any account,
as, as many accounts as you want for free.

00:46:44.740 --> 00:46:48.559
&gt;&gt;[Male audience member #7] Which is what
I've done, it's just kind of hard to manage

00:46:48.559 --> 00:46:51.359
when I have six different sub-accounts. I
have to figure out which site is located on,

00:46:51.359 --> 00:46:52.359
in which one.

00:46:52.359 --> 00:46:53.880
&gt;&gt;Nick: Sure, sure. Okay.

00:46:53.880 --> 00:46:56.520
&gt;&gt;[Male audience member #7] Thank you.

00:46:56.520 --> 00:46:57.520
&gt;&gt;Nick: Okay.

00:46:57.520 --> 00:47:00.390
&gt;&gt;[Male audience member #8 with European accent]
I'd like to ask about getting notification

00:47:00.390 --> 00:47:02.950
in tracking of YouTube videos.

00:47:02.950 --> 00:47:03.950
&gt;&gt;Nick: Sure.

00:47:03.950 --> 00:47:08.160
&gt;&gt;[Male audience member #8] In two, two cases.
One case the video is embedded on my site.

00:47:08.160 --> 00:47:09.160
&gt;&gt;Nick: Um-hum.

00:47:09.160 --> 00:47:11.020
&gt;&gt;[Male audience member #8] The other one
that YouTube, is on YouTube.

00:47:11.020 --> 00:47:12.020
&gt;&gt;Nick: Right.

00:47:12.020 --> 00:47:15.609
&gt;&gt;[Male audience member #8] But I'd like to
find out for example click, stop, start, are

00:47:15.609 --> 00:47:20.440
they particularly watching. Like the time
spent on the video.

00:47:20.440 --> 00:47:25.490
&gt;&gt;Nick: Sure. So when the video is embedded
on YouTube there's currently no way for you

00:47:25.490 --> 00:47:30.490
to actually add tracking code to YouTube.
Right. So YouTube actually has their own product

00:47:30.490 --> 00:47:34.640
called YouTube Insights, which actually looks
at how many people drop off from your video

00:47:34.640 --> 00:47:37.789
when you're watching it. I would take a look
for that, because they have an API to also

00:47:37.789 --> 00:47:41.950
access their YouTube Insights information.
Now if you take that video and you embed it

00:47:41.950 --> 00:47:46.680
on your own site, YouTube has what's called
a JavaScript, there's two ways. There's one

00:47:46.680 --> 00:47:50.569
where you just do the embed code and it, but
you have no access to the interactions. YouTube

00:47:50.569 --> 00:47:54.404
also has an embed API, it's all JavaScript
based. What that means is you can listen to

00:47:54.404 --> 00:47:59.299
the events when people click on different
buttons. And so when you, when you actually

00:47:59.299 --> 00:48:05.599
set up an event handler you can actually track
events when people click a link. And the best

00:48:05.599 --> 00:48:09.661
practice is, is that you don't want to track
like every five seconds. You want to track

00:48:09.661 --> 00:48:12.750
percentages of views, right? So how many people
got 50% through, how many people got 20% through,

00:48:12.750 --> 00:48:13.750
that, that type of information.

00:48:13.750 --> 00:48:15.560
&gt;&gt;[Male audience member #8] Thank you.

00:48:15.560 --> 00:48:16.560
&gt;&gt;Nick: Sure. Yep?

00:48:16.560 --> 00:48:22.299
&gt;&gt;[Male audience member #9 with European accent]
What if you want to switch from, to Google

00:48:22.299 --> 00:48:24.059
Analytics from, from the old data?

00:48:24.059 --> 00:48:25.059
Nick: Sure.

00:48:25.059 --> 00:48:27.859
&gt;&gt;[Male audience member #9] So I have a lot
of old data in our database, and we want to

00:48:27.859 --> 00:48:29.190
switch to Google Analytics butâ€”

00:48:29.190 --> 00:48:30.190
Nick: Right.

00:48:30.190 --> 00:48:33.069
&gt;&gt;[Male audience member #9] Is it better off
to have everything on the same place and notâ€”

00:48:33.069 --> 00:48:36.329
&gt;&gt;Nick: That's a good question. Yeah. At this
time we don't have a way to import your historical

00:48:36.329 --> 00:48:37.329
aggregated data.

00:48:37.329 --> 00:48:38.329
&gt;&gt;[Male audience member #9] Um-hum.

00:48:38.329 --> 00:48:42.000
&gt;&gt;Nick: My recommendation is to just implement
Google Analytics today, and continue using

00:48:42.000 --> 00:48:47.660
the systems for a little while. What you'll
notice then is that the absolute numbers will

00:48:47.660 --> 00:48:52.400
be different, but the trends will be the same.
And so over time you can start relaying, hey

00:48:52.400 --> 00:48:57.130
we're using Google Analytics but this older
system is still in place in case we need the

00:48:57.130 --> 00:48:59.470
historical data. Eventually there'll become
a point where you're like, we don't need the

00:48:59.470 --> 00:49:02.450
older data. We can just, we'll keep it but
we don't need to keep on collecting it.

00:49:02.450 --> 00:49:03.530
&gt;&gt;[Male audience member #9] Um-hum.

00:49:03.530 --> 00:49:04.530
&gt;&gt;Nick: Sure.

00:49:04.530 --> 00:49:05.530
&gt;&gt;[Male audience member #9] Okay.

00:49:05.530 --> 00:49:13.670
&gt;&gt;[Male audience member #10] So for me fundamentally
the issue with Analytics is the signal to

00:49:13.670 --> 00:49:15.690
noise ratio. Sorry, I'll tilt it up a little
bit here.

00:49:15.690 --> 00:49:16.690
&gt;&gt;Nick: Okay.

00:49:16.690 --> 00:49:17.690
&gt;&gt;[Male audience member #10] One question
I have is why you don't offer the option to

00:49:17.690 --> 00:49:20.370
put in like the public facing IP address of
your company. One of the problems I have is

00:49:20.370 --> 00:49:23.900
our product people come up with a great idea,
they launch the product and then they spend

00:49:23.900 --> 00:49:27.289
all day looking at it. And our, we see a spike
in trafficâ€”

00:49:27.289 --> 00:49:28.289
&gt;&gt;Nick: Yeah.

00:49:28.289 --> 00:49:30.720
&gt;&gt;[Male audience member #10] It's all coming
from our office when I actuallyâ€”

00:49:30.720 --> 00:49:31.720
&gt;&gt;Nick: Sure.

00:49:31.720 --> 00:49:33.530
&gt;&gt;[Male audience member #10] dig into the
logs. So why not offer the ability to filter

00:49:33.530 --> 00:49:37.329
a, a set or a particular AP, IP address.

00:49:37.329 --> 00:49:41.080
&gt;&gt;Nick: Sure. So that's a great question.
And actually, that feature's available today.

00:49:41.080 --> 00:49:45.210
And so the way we track at Google is that
we have a site where if we tell people hey,

00:49:45.210 --> 00:49:49.559
if you want to set up internal analytics just
sign up for Google Analytics.

00:49:49.559 --> 00:49:53.890
And there's a place in the administrative
section which allows you to create filters.

00:49:53.890 --> 00:49:57.220
And filters, what happens if you remember
the, the part of the slides where I talked

00:49:57.220 --> 00:50:02.130
to how we process data. Right before we create,
right before we actually do the processing

00:50:02.130 --> 00:50:06.150
of the data we apply these filters to all
the data that's collected, which allow you

00:50:06.150 --> 00:50:07.150
to manipulate the data.

00:50:07.150 --> 00:50:11.520
For example, filter out anybody who comes
from this IP range. You can use a regular

00:50:11.520 --> 00:50:15.809
expression to do that. And when you do that,
that means if you know the, the bank of IPs

00:50:15.809 --> 00:50:19.291
that people are coming from your internal
network you can make sure that it doesn't

00:50:19.291 --> 00:50:21.190
get collected in the profile you view.

00:50:21.190 --> 00:50:25.579
So, so the best practice is you collect all
your data and you report it in one profile.

00:50:25.579 --> 00:50:29.870
You create a new profile that uses the same
data, but filters out all the internal traffic.

00:50:29.870 --> 00:50:33.750
So you have like what's called a clean profile.
And so that's available today. If you take

00:50:33.750 --> 00:50:37.349
a look in our help center about profile filters,
you'll see how, how that's done.

00:50:37.349 --> 00:50:41.500
&gt;&gt;[Male audience member #10] So, so, that's
the easy case. It seems like it should just

00:50:41.500 --> 00:50:44.960
be a part of config and, creating filters
is fine, that's doable butâ€”

00:50:44.960 --> 00:50:45.960
&gt;&gt;Nick: Sure.

00:50:45.960 --> 00:50:49.140
&gt;&gt;[Male audience member #10] that's just kind
of, it seems like usability that's kind of

00:50:49.140 --> 00:50:50.140
poor butâ€”

00:50:50.140 --> 00:50:52.220
&gt;&gt;Nick: Yeah. No, I mean it can be made a
lot easier and, and definitely that's something

00:50:52.220 --> 00:50:53.480
that we are addressing.

00:50:53.480 --> 00:50:55.360
&gt;&gt;[Male audience member #10] So one of the
things we've noticed this year is we've had

00:50:55.360 --> 00:50:58.530
an incredible spike in, let's call them bad
actor bots. We've seen a large number of crawlers

00:50:58.530 --> 00:51:06.430
that are not, they're using things like core
networks and other things to kind of spoof

00:51:06.430 --> 00:51:13.690
IPs and, or using zombie hosts to do crawling.
What are you guys doing to actively identify

00:51:13.690 --> 00:51:16.960
those and try and filter them out of the results?

00:51:16.960 --> 00:51:22.220
&gt;&gt;Nick: Yeah. No, that's a good question.
So we're, we're, we're enabling you to, to

00:51:22.220 --> 00:51:25.869
filter out the traffic that we collect. And
we're trying to give you more insight into

00:51:25.869 --> 00:51:31.319
how we're collecting and processing the data.
So that way if you guys find out these anomalies

00:51:31.319 --> 00:51:34.580
you can actually then set up your own filters
to, to filter them out.

00:51:34.580 --> 00:51:39.549
We recently released a feature called intelligence,
so if you do see a spike we'll alert you to

00:51:39.549 --> 00:51:42.530
the fact that that spike has happened. So
you don't have to spend all the time digging

00:51:42.530 --> 00:51:48.789
through the data. So it's definitely a challenge
for us to identify random people who create

00:51:48.789 --> 00:51:54.510
spikes on your site. But we're, we're trying.
Great. Does anybody have any other questions?

00:51:54.510 --> 00:51:55.510
Sure.

00:51:55.510 --> 00:52:02.119
&gt;&gt;[Male audience member #11] If we, if we
develop the asynch tracking code, is there

00:52:02.119 --> 00:52:07.160
an expected different in the numbers? Say
you had two parallel universes, one with the

00:52:07.160 --> 00:52:08.849
old tracking code and then one with the asynch
code.

00:52:08.849 --> 00:52:12.390
&gt;&gt;Nick: Yeah. That's a good question. I mean,
I think if you change anything in a site something's

00:52:12.390 --> 00:52:17.180
gonna probably be impacted. The traditional
way we told you to track with the original

00:52:17.180 --> 00:52:21.230
code was put, to put the code at the bottom
of the page because the, the code was loading

00:52:21.230 --> 00:52:25.849
synchronously and we didn't want it to, we
didn't want it to reduce user perceived latency.

00:52:25.849 --> 00:52:28.971
But now that we put the code at the top of
the page, it's more likely if you have like

00:52:28.971 --> 00:52:34.349
a lot of content and some of the tracking
that might have, if people were, if a lot

00:52:34.349 --> 00:52:37.690
of content was loading on the page and people
were clicking away potentially they might

00:52:37.690 --> 00:52:41.930
not have tracked. So by putting the code at
the top of the page we're guaranteeing that

00:52:41.930 --> 00:52:45.890
we're gonna collect more data. So usually
you might get a better picture with asynch.

00:52:45.890 --> 00:52:46.890
Cool. Yeah?

00:52:46.890 --> 00:52:51.619
&gt;&gt;[Male audience member #12] A couple, a couple
more questions. I'll be quick. So [ coughs

00:52:51.619 --> 00:52:58.539
 ] first question is, is there a way to simulate
the originating IP of the request so that

00:52:58.539 --> 00:53:05.020
I, I can sent, send the, collect the data
from, from some other host other than client's

00:53:05.020 --> 00:53:06.020
computer?

00:53:06.020 --> 00:53:09.650
&gt;&gt;Nick: Sure. Yeah, currently there's, there's
no publicly supported way to do that. But

00:53:09.650 --> 00:53:12.440
we've heard that from a lot of people and
we're looking at it. Yeah.

00:53:12.440 --> 00:53:14.637
&gt;&gt;[Male audience member #12] Okay. And the
second one, is there a way you can kind of

00:53:14.637 --> 00:53:15.950
open the code of the tracker? Because right
not it's kind of garbled.

00:53:15.950 --> 00:53:16.950
&gt;&gt;Nick: Yeah.

00:53:16.950 --> 00:53:17.950
&gt;&gt;[Male audience member #12] So is there a
way toâ€”

00:53:17.950 --> 00:53:18.950
&gt;&gt;Nick: That's a goodâ€”

00:53:18.950 --> 00:53:24.530
&gt;&gt;[Male audience member #12] Look at it, just
to, just to learn?

00:53:24.530 --> 00:53:29.770
&gt;&gt;Nick: Yeah. No, exact, that's a great question.
So currently no. It's closed. But as I mentioned,

00:53:29.770 --> 00:53:32.940
what we're trying to do really is to open
up the whole collection inside of the platform.

00:53:32.940 --> 00:53:36.910
We want to have a supported protocol that
will document so you'll know exactly what

00:53:36.910 --> 00:53:41.630
data is being sent, and that way you can create
your own kind of open libraries as well. So

00:53:41.630 --> 00:53:44.710
it, it's something we're currently not, or
not having today. But we definitely want to

00:53:44.710 --> 00:53:48.440
engage with the developer community to have
that type of open library.

00:53:48.440 --> 00:53:51.220
&gt;&gt;[Male audience member #12] So any idea as
to when?

00:53:51.220 --> 00:53:56.140
&gt;&gt;Nick: It's, yeah, it's a good question.
Because every time I try to say a date it

00:53:56.140 --> 00:53:59.760
always, or I hear a date it always gets pushed
date. So it's something we're, we're actively

00:53:59.760 --> 00:54:00.760
working on.

00:54:00.760 --> 00:54:01.849
&gt;&gt;[Male audience member #12] Thanks.

00:54:01.849 --> 00:54:02.849
&gt;&gt;Nick: Yep.

00:54:02.849 --> 00:54:04.511
&gt;&gt;[Male audience member #13] First off, Google
Analytics is awesome and I can't believe it's

00:54:04.511 --> 00:54:05.511
free. It's really cool.

00:54:05.511 --> 00:54:06.511
[ Audience laughter ]

00:54:06.511 --> 00:54:07.511
[ Audience clapping ]

00:54:07.511 --> 00:54:08.511
&gt;&gt;[Male audience member #13] But I was justâ€”

00:54:08.511 --> 00:54:12.609
&gt;&gt;Nick: So, so if you think it's awesome there's
a guy back there that you might want to just

00:54:12.609 --> 00:54:14.349
tell him how awesome it is.

00:54:14.349 --> 00:54:15.349
[ laughter ]

00:54:15.349 --> 00:54:19.270
&gt;&gt;[Male audience member #13] So my question
was, what's the delay from when a user visits

00:54:19.270 --> 00:54:21.710
the site to what, when that date is available
in the Dashboard.

00:54:21.710 --> 00:54:25.141
&gt;&gt;Nick: That's a great question. It really
depends on the size of the date we're processing.

00:54:25.141 --> 00:54:28.809
We're trying to reduce that time, reduce that
more and more. We don't publicly give out

00:54:28.809 --> 00:54:35.069
the exact information. In fact, for API we
say to be safe you'll get, after 24 hours

00:54:35.069 --> 00:54:39.319
you can be sure that the data won't be changing.
But we're, we're reducing it all the time.

00:54:39.319 --> 00:54:44.279
And so what I would recommend, if you have
a little, like a Google gadget or something

00:54:44.279 --> 00:54:48.470
that's querying your API you can always see
like when was the last time that data was

00:54:48.470 --> 00:54:51.270
updated. So it really depends on the size
of the account.

00:54:51.270 --> 00:54:54.160
&gt;&gt;[Male audience member #13] Okay, cool. And
my other question was, is there any trouble

00:54:54.160 --> 00:54:58.119
with like BlackOut SEO if you're using the
search data to modify what the page is serving

00:54:58.119 --> 00:55:03.070
out based on the queries that are coming in?
So for example, if someone comes in from a

00:55:03.070 --> 00:55:07.520
specific Google search you want to modify
the page based on the analytics data to give

00:55:07.520 --> 00:55:11.650
them something that's more appropriate. Does
like, does the SEO side of things, do they

00:55:11.650 --> 00:55:12.800
look down on that?

00:55:12.800 --> 00:55:15.700
&gt;&gt;Nick: That's a good question. You'd have
to talk to someone like Matt Cuttsâ€”

00:55:15.700 --> 00:55:16.700
&gt;&gt;[Male audience member #13] I'll catch him.

00:55:16.700 --> 00:55:20.920
&gt;&gt;Nick: To, to tell you the exact, how they're,
how they're doing stuff. But in the case of

00:55:20.920 --> 00:55:24.110
the example I was showing, we were just showing
dynamic pages based on data. It's a little

00:55:24.110 --> 00:55:26.240
bit more targeted. So if it's dynamic it shouldn't
be a problem.

00:55:26.240 --> 00:55:32.670
&gt;&gt;[Male audience member #13] Cool. Thank you
so much.

00:55:32.670 --> 00:55:34.550
&gt;&gt;Nick: Sure. Any other questions? Great,
thanks guys.

00:55:34.550 --> 00:55:34.609
[ Audience claps ]

