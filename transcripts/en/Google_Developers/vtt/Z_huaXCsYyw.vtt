WEBVTT
Kind: captions
Language: en

00:00:03.420 --> 00:00:05.950
While I'm normally opposed
to using puns in videos,

00:00:05.950 --> 00:00:08.260
this one's pretty
good, you gotta admit.

00:00:08.260 --> 00:00:09.620
Anyhow, my name is Colt McAnlis.

00:00:09.620 --> 00:00:11.869
And after posing a question
to the Android Performance

00:00:11.869 --> 00:00:14.290
Patterns Google+ Community,
we realized that it might be

00:00:14.290 --> 00:00:17.070
beneficial to cover a very
useful tool inside of Android

00:00:17.070 --> 00:00:17.571
Studio.

00:00:17.571 --> 00:00:19.903
See, one of the biggest
problems with fixing performance

00:00:19.903 --> 00:00:22.412
in your applications is that
it's mostly a reactive process.

00:00:22.412 --> 00:00:23.870
You build an app,
ship it to users,

00:00:23.870 --> 00:00:25.890
and only after they've started
complaining about it do you

00:00:25.890 --> 00:00:27.299
know where the problems are.

00:00:27.299 --> 00:00:28.840
It seems like it
would be tons easier

00:00:28.840 --> 00:00:30.840
to identify the
problems ahead of time

00:00:30.840 --> 00:00:33.220
rather than having to wait
for bad reviews to come in.

00:00:33.220 --> 00:00:35.210
Now historically,
the Android toolchain

00:00:35.210 --> 00:00:38.980
provided a tool named LINT, a
static code analysis tool which

00:00:38.980 --> 00:00:40.470
checks your Android
project source

00:00:40.470 --> 00:00:42.770
files for any potential
bugs alongside

00:00:42.770 --> 00:00:44.917
potential optimizations
for correctness, security,

00:00:44.917 --> 00:00:46.500
performance, usability,
accessibility,

00:00:46.500 --> 00:00:47.860
and internationalization.

00:00:47.860 --> 00:00:49.860
For example, if you're
allocating objects inside

00:00:49.860 --> 00:00:51.864
of the onDraw function
which, as we all know,

00:00:51.864 --> 00:00:53.780
can lead to excessive
amounts of memory churn,

00:00:53.780 --> 00:00:56.950
LINT can detect that and spit
out a nice warning for you,

00:00:56.950 --> 00:00:59.290
pinpointing the exact line
that the problem occurs at.

00:00:59.290 --> 00:01:00.790
Simply boot up your
favorite command

00:01:00.790 --> 00:01:03.490
prompt, run some commands,
and LINT will do the rest.

00:01:03.490 --> 00:01:05.950
Well, the good news is that
this handy tool, by default,

00:01:05.950 --> 00:01:08.710
is now integrated into
Android Studio 1.0,

00:01:08.710 --> 00:01:11.090
and it's useful in
a couple of ways.

00:01:11.090 --> 00:01:13.530
Firstly, anytime you want
to kick off a release build,

00:01:13.530 --> 00:01:15.580
LINT will run a
subset of its checks

00:01:15.580 --> 00:01:17.160
against your compiling code.

00:01:17.160 --> 00:01:19.540
Secondly, if you want feedback
on a more regular basis,

00:01:19.540 --> 00:01:22.580
you can configure Gradle to run
the full suite of LINT tests

00:01:22.580 --> 00:01:24.750
during any various random
build you may kick off

00:01:24.750 --> 00:01:25.950
during the day.

00:01:25.950 --> 00:01:28.360
And thirdly, if having
LINT run during your builds

00:01:28.360 --> 00:01:31.480
isn't really your thing, you
can kick off manual builds

00:01:31.480 --> 00:01:32.790
at your discretion.

00:01:32.790 --> 00:01:34.710
And just for the sake
of introductions,

00:01:34.710 --> 00:01:36.590
let's take a look at
that third step for now.

00:01:36.590 --> 00:01:39.790
To run LINT on your code
inside of Android Studio,

00:01:39.790 --> 00:01:42.230
open up your project, and
select Analyze, Inspect

00:01:42.230 --> 00:01:43.320
Code from the menu.

00:01:43.320 --> 00:01:45.670
This will kick off LINT
and present a handy suite

00:01:45.670 --> 00:01:48.060
of results that manifest
itself in a window

00:01:48.060 --> 00:01:49.440
at the bottom of the IDE.

00:01:49.440 --> 00:01:51.526
This bottom window has
two main components.

00:01:51.526 --> 00:01:53.900
On the left is a hierarchical
grouping of various errors,

00:01:53.900 --> 00:01:55.570
warnings, and potential issues.

00:01:55.570 --> 00:01:58.160
And when you select one of
the issues in that left pane,

00:01:58.160 --> 00:02:00.100
the right pane will be
filled in with details

00:02:00.100 --> 00:02:02.700
about what that problem means,
the line number that causes it,

00:02:02.700 --> 00:02:05.750
information on the test, and how
to potentially fix the problem.

00:02:05.750 --> 00:02:07.640
If you've noticed by
running this tool,

00:02:07.640 --> 00:02:09.754
there's a flood of tests
that LINT checks for.

00:02:09.754 --> 00:02:11.920
So if you want to control
the tsunami of information

00:02:11.920 --> 00:02:14.820
that LINT can spit out, you
can configure what analysis

00:02:14.820 --> 00:02:17.980
you're interested in by opening
File, Other Settings, Default

00:02:17.980 --> 00:02:19.930
Settings, and then
selecting Inspections.

00:02:19.930 --> 00:02:23.510
This will list all-- and I mean
all-- of the inspecting options

00:02:23.510 --> 00:02:24.740
for LINT.

00:02:24.740 --> 00:02:28.010
To specifically tune LINT
to find performance issues,

00:02:28.010 --> 00:02:30.546
you can search for the
"performance" keywords.

00:02:30.546 --> 00:02:31.920
From there, you
can click through

00:02:31.920 --> 00:02:34.086
and get a better sense of
what checks are being run,

00:02:34.086 --> 00:02:37.030
enable them, disable them,
and reassign their priority

00:02:37.030 --> 00:02:38.110
for performance.

00:02:38.110 --> 00:02:39.610
But even with that
search, there's

00:02:39.610 --> 00:02:41.040
lots of data that's
being listed.

00:02:41.040 --> 00:02:43.900
So here are Colt's personal
suggestions on which

00:02:43.900 --> 00:02:45.220
ones to keep an eye on.

00:02:45.220 --> 00:02:47.510
Firstly, make sure you
set memory allocations

00:02:47.510 --> 00:02:50.130
within drawing code
to throw an error.

00:02:50.130 --> 00:02:52.000
As we've seen with the
Memory Churn videos,

00:02:52.000 --> 00:02:54.060
this can quickly
cause a problem.

00:02:54.060 --> 00:02:56.720
And it's worth keeping an eye
on in order to avoid issues here

00:02:56.720 --> 00:02:57.640
in the future.

00:02:57.640 --> 00:03:00.510
The Layout Has Too Many
Views and Layout Hierarchy

00:03:00.510 --> 00:03:02.670
Is Too Deep are good
to keep an eye on.

00:03:02.670 --> 00:03:05.110
Although if your users are
running on modern devices,

00:03:05.110 --> 00:03:07.350
this may be fine to
just leave as a warning.

00:03:07.350 --> 00:03:10.060
And finally, I like to
leave the Overdraw check set

00:03:10.060 --> 00:03:12.400
to a warning, if anything,
just to keep an eye on what's

00:03:12.400 --> 00:03:13.900
changed between builds.

00:03:13.900 --> 00:03:15.470
But remember, at
the end of the day,

00:03:15.470 --> 00:03:18.290
these are suggestions based
upon what the tooling team has

00:03:18.290 --> 00:03:19.599
seen as common problems.

00:03:19.599 --> 00:03:21.640
Your code may get flagged
for a particular issue,

00:03:21.640 --> 00:03:24.551
but if it's not actually
eating into your frame rate,

00:03:24.551 --> 00:03:25.800
don't actually worry about it.

00:03:25.800 --> 00:03:28.049
So keep that in mind before
you run off into the weeds

00:03:28.049 --> 00:03:29.470
and start refactoring things.

00:03:29.470 --> 00:03:30.928
Now if you run this
tool and end up

00:03:30.928 --> 00:03:32.390
with a flood of
performance issues,

00:03:32.390 --> 00:03:34.580
then make sure you check out the
rest of the Android Performance

00:03:34.580 --> 00:03:36.340
Patterns content
for tips and tricks

00:03:36.340 --> 00:03:38.050
on how to address these issues.

00:03:38.050 --> 00:03:40.720
And of course, don't hesitate
to join our Google+ Community

00:03:40.720 --> 00:03:43.880
to get more information on tips
and tricks from people that are

00:03:43.880 --> 00:03:44.810
in the trenches.

00:03:44.810 --> 00:03:47.410
So keep calm, profile your
code, and always remember

00:03:47.410 --> 00:03:49.260
perf matters.

