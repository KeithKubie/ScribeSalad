WEBVTT
Kind: captions
Language: en

00:00:00.310 --> 00:00:01.310
&gt;&gt;Alex Danilo: Hello, everybody.

00:00:01.310 --> 00:00:02.310
And welcome here tonight.

00:00:02.310 --> 00:00:03.310
You have waited for the keynote act, I see.

00:00:03.310 --> 00:00:04.310
We're the last act of the day, best of the
day, of course.

00:00:04.310 --> 00:00:05.310
So I guess you're all wondering why Adobe
is here.

00:00:05.310 --> 00:00:06.540
The answer to that is they're a very valued
contributor to the WebKit project, and WebKit

00:00:06.540 --> 00:00:11.140
project is of course the core of Google Chrome
and a lot of other nice browsers out there.

00:00:11.140 --> 00:00:15.120
And of course, we like to share because of
course the Web is about sharing.

00:00:15.120 --> 00:00:17.140
And what I mean is I don't mean social media.

00:00:17.140 --> 00:00:22.880
I mean they're a bunch of mad scientists -- actually,
visionary physicists back in the early '90's

00:00:22.880 --> 00:00:28.279
-- and they decided they wanted to share physics
stuff, like scientific papers, so they built

00:00:28.279 --> 00:00:30.630
the first Web browser and Web server.

00:00:30.630 --> 00:00:33.730
And then a few years later Marc Andreesen
came along and said, Well, images would be

00:00:33.730 --> 00:00:36.410
cool and he added images to the browser.

00:00:36.410 --> 00:00:39.950
And then over the years, as you've seen, the
evolution of the Web has just gotten better

00:00:39.950 --> 00:00:43.870
and better and we have all these amazing features
today.

00:00:43.870 --> 00:00:48.160
So basically the Web is open and so Adobe
and Google we all work on Web technology,

00:00:48.160 --> 00:00:51.030
we work with a lot of other companies as well.

00:00:51.030 --> 00:00:52.730
So enough about that.

00:00:52.730 --> 00:00:55.460
Who are we?

00:00:55.460 --> 00:01:00.320
My name is Alex Danilo, and I'm a developer
advocate on Chrome.

00:01:00.320 --> 00:01:03.760
And with me I have Christian Cantrell, who
is a product manager, a developer himself,

00:01:03.760 --> 00:01:07.119
so he knows a lot of the stuff that you guys
do.

00:01:07.119 --> 00:01:09.520
And we also have Vincent Hardy, who is a principal
scientist.

00:01:09.520 --> 00:01:14.689
And Vincent and I have worked on CSS and SVG
for a number of years now.

00:01:14.689 --> 00:01:19.020
So the Web is evolving and that's a really
good thing because we don't really want the

00:01:19.020 --> 00:01:21.320
browser from the early '90's, do we?

00:01:21.320 --> 00:01:26.469
And the thing is what we're seeing now is
along the timeline of Web browser evolution

00:01:26.469 --> 00:01:31.790
all these new features have been coming in
and coming in and the feature set is accelerating.

00:01:31.790 --> 00:01:36.020
New features are not just accelerating, but
there an accelerating acceleration.

00:01:36.020 --> 00:01:38.560
So the thing is what do you do as a developer?

00:01:38.560 --> 00:01:41.170
It's like we want to help you.

00:01:41.170 --> 00:01:42.210
And that's why we built Chrome.

00:01:42.210 --> 00:01:46.329
Chrome is built for simplicity, security and
speed.

00:01:46.329 --> 00:01:48.259
And what's going to give you simplicity is
tools.

00:01:48.259 --> 00:01:52.759
It better tools to make your job easier and
that will give you more time because it will

00:01:52.759 --> 00:01:57.359
make your development job faster, so we give
you simplicity and speed, and that's what

00:01:57.359 --> 00:01:58.390
we're going to show you today.

00:01:58.390 --> 00:02:02.289
Now, what are you supposed to do as a Web
developer?

00:02:02.289 --> 00:02:06.859
Come to Google I/O. And the second thing is
go watch all the YouTube stuff, go watch it

00:02:06.859 --> 00:02:11.270
afterwards, enjoy it, get all the demo material,
experiment with it.

00:02:11.270 --> 00:02:15.260
And one thing I would really like everyone
in this room and everyone watching to do is

00:02:15.260 --> 00:02:16.480
to talk to us.

00:02:16.480 --> 00:02:20.690
The Web is about people, it's open, we share,
and we listen to you.

00:02:20.690 --> 00:02:25.940
So if you as a Web developer sit around and
you go like, "Oh, I wish CSS did that," come

00:02:25.940 --> 00:02:29.189
and tell us, we'll try and push it through
the standards bodies, we'll get the other

00:02:29.189 --> 00:02:32.540
browser makers to do it and we'll do it together.

00:02:32.540 --> 00:02:37.180
So anyway, this is the kind of thing we're
trying to promote today, more creative options.

00:02:37.180 --> 00:02:41.769
The old days used to muck up a wire frame,
give it to the Web developer who writes JavaScript

00:02:41.769 --> 00:02:43.830
and something pops out the other side.

00:02:43.830 --> 00:02:45.960
And we want to change that workflow.

00:02:45.960 --> 00:02:49.629
We want to, like, bring on the declarative
Renaissance.

00:02:49.629 --> 00:02:51.799
So we're putting features in the browser that
are declarative.

00:02:51.799 --> 00:02:52.939
They're not JavaScript.

00:02:52.939 --> 00:02:57.709
And we're providing tools so the designers
can come along and go, Well, I can build that

00:02:57.709 --> 00:02:58.709
page myself.

00:02:58.709 --> 00:03:01.590
I don't need to give it to a JavaScript programmer.

00:03:01.590 --> 00:03:07.120
And so Adobe, of course, had a rich history
in topography and fonts and graphics, so the

00:03:07.120 --> 00:03:12.530
stuff we'll see today is a whole lot of new
CSS features, from magazine style layouts,

00:03:12.530 --> 00:03:17.970
some cinematic effects and amazing graphic
type stuff, and of course we bring this all

00:03:17.970 --> 00:03:19.310
to you in Chrome.

00:03:19.310 --> 00:03:23.660
And if you're sitting there going, "Oh my
God, my users use IE, a really old version,

00:03:23.660 --> 00:03:28.230
what do we do about that," well, we give you
Chrome Frame as well so you can have Chrome

00:03:28.230 --> 00:03:31.859
and Chrome Frame and they provide the platform
on which you can make these incredible new

00:03:31.859 --> 00:03:33.299
apps.

00:03:33.299 --> 00:03:37.269
The other thing is we bring tools, we have
Chrome Developer Tools, and of course Adobe

00:03:37.269 --> 00:03:40.290
we're about to show you some new tools they
have been working on.

00:03:40.290 --> 00:03:44.549
And of course with their tools and our tools
it creates a synergy that makes your workflow

00:03:44.549 --> 00:03:46.730
so much easier and smoother.

00:03:46.730 --> 00:03:51.469
And of course, the one thing that I'll emphasize
yet one more time is that the Web is open,

00:03:51.469 --> 00:03:56.750
the Web is everybody's, and we both participate
in the W3C and a number of other standards

00:03:56.750 --> 00:03:57.750
organizations.

00:03:57.750 --> 00:04:03.150
In fact, there are over 370 companies who
are participating in the W3C and they steer

00:04:03.150 --> 00:04:04.200
the direction of the Web.

00:04:04.200 --> 00:04:08.159
So if you want a new feature, come to us,
we'll do it for you, okay?

00:04:08.159 --> 00:04:12.510
So on that note I'll pass it over to Christian
and he shall tell you all about these features.

00:04:12.510 --> 00:04:14.760
&gt;&gt;Christian Cantrell: Thank you, Alex.

00:04:14.760 --> 00:04:20.970
So I think probably the best way to understand
the perspective of Adobe when it comes to

00:04:20.970 --> 00:04:26.400
helping to move the Web forward is to look
at the Web platform team's official "Le Motto,"

00:04:26.400 --> 00:04:30.919
which is a better Web and awesome tools.

00:04:30.919 --> 00:04:37.310
So I'm going to be talking about three things
that are going to help us achieve that goal,

00:04:37.310 --> 00:04:39.449
the first of which is text.

00:04:39.449 --> 00:04:45.650
So the Web is already a very powerful platform
for text, so Adobe wanted to build on that

00:04:45.650 --> 00:04:49.449
because we really wanted to bring magazine-like
layout to the Web.

00:04:49.449 --> 00:04:54.330
And we want to do that -- we're doing that
in primarily two ways with two specifications

00:04:54.330 --> 00:05:00.020
and two implementations as well, CSS Regions
and CSS Exclusions.

00:05:00.020 --> 00:05:07.430
The example you see here is using CSS Exclusions
to have some text flow along the edge of this

00:05:07.430 --> 00:05:08.430
mountain.

00:05:08.430 --> 00:05:14.110
Here's another example where you see text
flowing between different regions, in this

00:05:14.110 --> 00:05:17.740
case to make columns, also flowing along these
images here.

00:05:17.740 --> 00:05:20.650
So this is combining CSS Regions and CSS Exclusions.

00:05:20.650 --> 00:05:24.770
Now, this is the kind of thing that you're
probably accustomed to seeing, we're all accustomed

00:05:24.770 --> 00:05:28.819
to seeing really in print and magazines or
something like that.

00:05:28.819 --> 00:05:30.319
Usually not something that you would see on
Web.

00:05:30.319 --> 00:05:32.710
Something like this the Web would typically
have been laid out in another application,

00:05:32.710 --> 00:05:37.039
a screen shot would have been taken or something
strange like that, which obviously we don't

00:05:37.039 --> 00:05:38.039
want.

00:05:38.039 --> 00:05:42.130
We really want true magazine-like layout with
the Web.

00:05:42.130 --> 00:05:47.610
So I'm going to start with the CSS Regions,
and this is just sort of a brief overview.

00:05:47.610 --> 00:05:50.800
The concept of CSS Regions is actually quite
simple.

00:05:50.800 --> 00:05:56.610
You have a block of text here, a flow, you
have some elements here which are your regions,

00:05:56.610 --> 00:06:02.139
and with a couple of lines of very simple
declarative CSS, that text can start flowing

00:06:02.139 --> 00:06:03.240
through those regions.

00:06:03.240 --> 00:06:04.389
It's that simple.

00:06:04.389 --> 00:06:09.350
I'm going to actually start with a couple
of demos to help illustrate the point.

00:06:09.350 --> 00:06:14.069
In addition to being a developer at Adobe
I'm also a science fiction writer.

00:06:14.069 --> 00:06:20.270
And I frequently write things and release
them under a creative comments license online.

00:06:20.270 --> 00:06:24.139
And when I release them they tend to look
something like this, which is to say ugly,

00:06:24.139 --> 00:06:25.139
right?

00:06:25.139 --> 00:06:30.539
So I put a lot of work into the story and
then I release it in a way that I'm not really

00:06:30.539 --> 00:06:31.539
that proud of.

00:06:31.539 --> 00:06:33.930
And the reason is because I want it to work
on as many devices as possible.

00:06:33.930 --> 00:06:37.850
I know people like to read on phones, they
like to read on tablets, they like to use

00:06:37.850 --> 00:06:44.990
all kinds of different types of browsers and
machines, so I try and make it sort of the

00:06:44.990 --> 00:06:47.150
lowest common denominator.

00:06:47.150 --> 00:06:50.810
But it honestly doesn't look that good, so
when I started working with CSS Regions I

00:06:50.810 --> 00:06:56.940
was really excited about what I could do with
my own work and how I could present it in

00:06:56.940 --> 00:06:58.320
a much more interesting fashion.

00:06:58.320 --> 00:07:02.020
So this is the same story which I've applied
some regions to.

00:07:02.020 --> 00:07:06.770
And you can see that I have a page count up
here, which is nice, and you can see that

00:07:06.770 --> 00:07:10.599
my text is flowing from region to region here
all automatically.

00:07:10.599 --> 00:07:14.120
I have some page numbers down here.

00:07:14.120 --> 00:07:18.530
If I were to resize my browser here you can
see the page count in the upper right-hand

00:07:18.530 --> 00:07:19.860
corner is changing.

00:07:19.860 --> 00:07:27.150
As the page count changes, if I drag it up
and decrease the height of the available space

00:07:27.150 --> 00:07:30.639
you can see the pages have automatically adjusted
themselves.

00:07:30.639 --> 00:07:35.409
So this is a much nicer experience and something
that I can be a little bit more proud of.

00:07:35.409 --> 00:07:39.610
I have a couple more prototypes, but I want
to go ahead and skip to the last one, which

00:07:39.610 --> 00:07:40.610
is my favorite.

00:07:40.610 --> 00:07:45.210
I call this the sort of adaptive or responsive
prototype.

00:07:45.210 --> 00:07:50.439
And this is unique because it's designed not
just to work on any size screen, it's designed

00:07:50.439 --> 00:07:53.780
to actually be optimized for any size screen.

00:07:53.780 --> 00:07:58.229
So this is the same story once again, but
it uses -- it has some gestures where you

00:07:58.229 --> 00:07:59.419
can turn pages.

00:07:59.419 --> 00:08:07.050
It uses some heuristics to determine the optimal
width for a column and the optimal -- the

00:08:07.050 --> 00:08:09.530
maximum number of columns it can fit.

00:08:09.530 --> 00:08:15.020
And you can see if you have much higher resolution,
it will automatically determine your column

00:08:15.020 --> 00:08:17.289
width for you and add more columns.

00:08:17.289 --> 00:08:23.550
Even the graphic here on the left-hand side
is scales as I change the column width because

00:08:23.550 --> 00:08:25.960
it's done with SVG.

00:08:25.960 --> 00:08:30.870
So this thing -- this layout is going to work
on a screen as big as a wall or something

00:08:30.870 --> 00:08:33.810
as small as just a phone.

00:08:33.810 --> 00:08:37.320
So I had a lot of fun working with my own
content with this.

00:08:37.320 --> 00:08:41.440
And I started thinking that I really wanted
to be able to consume other content on the

00:08:41.440 --> 00:08:45.040
Web in a really nice way as well.

00:08:45.040 --> 00:08:49.890
And you know, I really wanted to be able to
just sort of reflow content into sort of a

00:08:49.890 --> 00:08:54.380
magazine or book-like format really easily,
so I started experimenting with this Chrome

00:08:54.380 --> 00:08:56.620
extension that I call Qualify.

00:08:56.620 --> 00:09:03.320
And when I click on this extension up here
all the content on the page is just automatically

00:09:03.320 --> 00:09:08.980
reflowed using CSS Regions in a way that I
think is much nicer to consume, and it's all

00:09:08.980 --> 00:09:12.230
adjustable based on font size and all that.

00:09:12.230 --> 00:09:17.870
As an aside, if you guys went to any of these
shadow DOM sessions or Web component sessions,

00:09:17.870 --> 00:09:21.360
this is actually using the shadow DOM, so
it's not polluting the DOM at all.

00:09:21.360 --> 00:09:25.240
So as far as the DOM is concerned, you know,
if there are scripts running on the DOM or

00:09:25.240 --> 00:09:27.000
something, actually nothing has changed here
at all.

00:09:27.000 --> 00:09:29.810
It's all done behind the scenes on the shadow
DOM.

00:09:29.810 --> 00:09:32.760
If you have no idea what I'm talking about,
shadow DOM is awesome.

00:09:32.760 --> 00:09:35.790
Check it out.

00:09:35.790 --> 00:09:36.810
Okay.

00:09:36.810 --> 00:09:41.649
So since we're making contributions directly
to WebKit, any browser that leverages WebKit

00:09:41.649 --> 00:09:45.100
is going to receive the benefits of those
contributions.

00:09:45.100 --> 00:09:49.381
And in this case the Chrome beta -- actually,
I shouldn't say beta anymore, it's not in

00:09:49.381 --> 00:09:52.660
beta anymore since like yesterday, I guess.

00:09:52.660 --> 00:09:57.240
So Chrome on Android also has some CSS Regions
support, so this is the screen shot I took

00:09:57.240 --> 00:09:58.570
from my Galaxy Nexus.

00:09:58.570 --> 00:10:02.630
So let's look at some code.

00:10:02.630 --> 00:10:07.910
The first thing I want to point out here is
just a simple selector called content.

00:10:07.910 --> 00:10:10.980
And it has a property called flow-into here.

00:10:10.980 --> 00:10:15.570
And this flow-into property is creating a
named flow called article.

00:10:15.570 --> 00:10:22.290
And what's notable about this is that my content
is just going to be a big block of semantic

00:10:22.290 --> 00:10:23.290
text.

00:10:23.290 --> 00:10:29.279
So I'm not worried about, you know, creating
divs or some form of element that are regions

00:10:29.279 --> 00:10:31.649
and copying and pasting text into each one.

00:10:31.649 --> 00:10:32.980
Obviously that would defeat the whole purpose.

00:10:32.980 --> 00:10:33.980
That's not really flowing.

00:10:33.980 --> 00:10:36.580
You could have done that forever.

00:10:36.580 --> 00:10:40.990
So you have this semantic block of text which
is content and it knows nothing about the

00:10:40.990 --> 00:10:43.050
way it's going to be laid out.

00:10:43.050 --> 00:10:45.700
And then I have this class called region.

00:10:45.700 --> 00:10:52.630
And it has a flow-from property here, and
it's referring to this named flow article,

00:10:52.630 --> 00:10:54.500
which is defined up here.

00:10:54.500 --> 00:10:58.920
So with just that I'm able to get text flowing
between regions.

00:10:58.920 --> 00:11:04.980
Now, what about getting paging capabilities
and, you know, the swiping effects and the

00:11:04.980 --> 00:11:06.440
columns and the layout and all that?

00:11:06.440 --> 00:11:09.769
In order to do that you will have to write
some code.

00:11:09.769 --> 00:11:14.089
You're going to have to tap into the CSS object
model.

00:11:14.089 --> 00:11:15.089
And it's not a lot of code.

00:11:15.089 --> 00:11:17.630
It actually pretty straight forward, and I'll
just go through it.

00:11:17.630 --> 00:11:24.110
We started our layout with a function called
add region here, and I created a new region.

00:11:24.110 --> 00:11:27.470
And I'm going to set this attribute, the class
attribute, to region, which we saw in the

00:11:27.470 --> 00:11:29.470
previous slide is the named flow.

00:11:29.470 --> 00:11:32.970
And this is a really important line of code
right here, this region.addeventlistener.

00:11:32.970 --> 00:11:38.120
So we're gonna add this region.addeventlistener
to our region, and we're going to call this

00:11:38.120 --> 00:11:39.810
function called on layout update.

00:11:39.810 --> 00:11:44.540
Basically what this is saying is if the text
inside that region changes in any way, if

00:11:44.540 --> 00:11:48.740
text is added, if text is removed, if the
font size changes, if the element is resized

00:11:48.740 --> 00:11:54.959
for any reason, then call this on layout update
function so that I can run some -- you know,

00:11:54.959 --> 00:11:58.029
take a look at the page, figure out what happened
and update my layout.

00:11:58.029 --> 00:12:02.889
And then just add that region to the -- pin
that region to the body of the document.

00:12:02.889 --> 00:12:05.149
So let's look at this on layout update function.

00:12:05.149 --> 00:12:10.649
Again, this is called whenever my flow changes
within my regions, so I get a reference to

00:12:10.649 --> 00:12:13.829
the region from the event target, nice and
straightforward, and then I start looking

00:12:13.829 --> 00:12:16.920
at this region overflow property.

00:12:16.920 --> 00:12:21.160
And if the value of that property is overflow,
which is to say if there's more text than

00:12:21.160 --> 00:12:25.240
actually fits in that region, then I'm going
to need to add another region.

00:12:25.240 --> 00:12:29.420
So I sort of recursively call this add region
function, right?

00:12:29.420 --> 00:12:33.579
Otherwise if it fits, then call region layout
complete and you're done, you can do your

00:12:33.579 --> 00:12:35.260
layout and stuff.

00:12:35.260 --> 00:12:39.500
So what's missing from this is the code that
determines the width of your regions, the

00:12:39.500 --> 00:12:44.570
placement of your regions, the left, right,
top, bottom, and all of those kinds of things.

00:12:44.570 --> 00:12:48.760
It puts page numbers and the scrolling effects
and all that, but that stuff's actually not

00:12:48.760 --> 00:12:49.760
all that bad.

00:12:49.760 --> 00:12:53.620
And the very first prototype that I wrote,
I wrote that in, you know, a day.

00:12:53.620 --> 00:12:57.880
The last one, you know, I sort of built a
few prototypes, takes a couple of days.

00:12:57.880 --> 00:13:00.320
And these are the kinds of things that people
will write, they'll open source.

00:13:00.320 --> 00:13:03.860
I'll open source everything I've done here
along with a qualified plug-in so people can

00:13:03.860 --> 00:13:05.910
see how it's done.

00:13:05.910 --> 00:13:10.670
So it's not bad to do all this stuff yourself,
but we know that it has to be easier.

00:13:10.670 --> 00:13:14.600
We know that people want to do it in a declarative
way.

00:13:14.600 --> 00:13:17.960
And so we've proposed something called CSS
page templates.

00:13:17.960 --> 00:13:22.971
And CSS page templates really come from our
experience with tools like InDesign, which

00:13:22.971 --> 00:13:24.040
is what you're looking at here.

00:13:24.040 --> 00:13:28.120
This is a screen shot of InDesign where I've
created some master pages.

00:13:28.120 --> 00:13:31.589
One master page has an image in the upper
left-hand corner, another master page has

00:13:31.589 --> 00:13:35.730
an image in the center here with two columns
of text on either side.

00:13:35.730 --> 00:13:40.019
And what I can do is I can just add pages
to my document and just apply these master

00:13:40.019 --> 00:13:43.390
pages to those pages and they're automatically
formatted the way I want them.

00:13:43.390 --> 00:13:45.250
So it's really nice and easy.

00:13:45.250 --> 00:13:47.900
We've learned from building these kinds of
tools that, you know, people want easy ways

00:13:47.900 --> 00:13:49.949
of doing these kinds of things.

00:13:49.949 --> 00:13:51.690
So let's take a look at CSS page templates.

00:13:51.690 --> 00:13:53.750
We're going to look at it in two parts.

00:13:53.750 --> 00:13:55.670
The first one is the flow.

00:13:55.670 --> 00:14:00.060
And this is probably pretty familiar because
this is more or less what we just looked at,

00:14:00.060 --> 00:14:04.410
except for instead of creating one named flow,
I'm creating two.

00:14:04.410 --> 00:14:08.640
So I have a selector called article and a
selector called timeline and I'm creating

00:14:08.640 --> 00:14:13.459
two named flows here, the article flow and
the timeline flow.

00:14:13.459 --> 00:14:16.440
And then I have this selector here, combine
articles.

00:14:16.440 --> 00:14:19.010
And it has this interesting property called
overflow style.

00:14:19.010 --> 00:14:21.040
And I'm saying page X.

00:14:21.040 --> 00:14:26.550
So this line of code is basically saying "Don't
call my -- don't call my event handler and

00:14:26.550 --> 00:14:30.990
make me have to add regions and lay them out
and all that, just page X, page along the

00:14:30.990 --> 00:14:34.769
X axis," in other words, page horizontally.

00:14:34.769 --> 00:14:39.230
So the templates themselves, you use this
@ syntax to define them.

00:14:39.230 --> 00:14:44.040
So we have an outer definition of a template
here and then we have slots inside of the

00:14:44.040 --> 00:14:45.040
template.

00:14:45.040 --> 00:14:47.080
In this case we have a left template and a
right template.

00:14:47.080 --> 00:14:49.850
Both of these are getting their content from
this article flow.

00:14:49.850 --> 00:14:55.000
Then we have a center slot which is getting
its content from the timeline flow.

00:14:55.000 --> 00:14:59.100
So pretty straightforward, simple, declarative
stuff, CSS that everyone is comfortable with,

00:14:59.100 --> 00:15:01.230
and the result is something like this.

00:15:01.230 --> 00:15:05.840
We have some English text here which is flowing
from left column to the right column, and

00:15:05.840 --> 00:15:09.940
then we have this German text which constitutes
a timeline which is flowing along the center

00:15:09.940 --> 00:15:12.450
column.

00:15:12.450 --> 00:15:17.529
And it's paging along the X axis as we specified,
or in other words paging horizontally.

00:15:17.529 --> 00:15:20.139
There are seven pages total.

00:15:20.139 --> 00:15:23.660
And all of that was just with a few lines
of declarative CSS.

00:15:23.660 --> 00:15:30.220
Now, this is still a proposal; however, we
do have shims or polyfills, JavaScript polyfills

00:15:30.220 --> 00:15:34.550
or shims, that you can use to actually see
this stuff in action and actually see it work.

00:15:34.550 --> 00:15:36.769
And we'll have a URL on that at the end of
the presentation.

00:15:36.769 --> 00:15:41.850
It's not enough, though, just to be able to
flow text from region to region.

00:15:41.850 --> 00:15:45.890
If you really want true magazine-like layout
you need more powerful tools than that, or

00:15:45.890 --> 00:15:47.960
I should say additional tools.

00:15:47.960 --> 00:15:49.690
And this is a screen shot of InDesign.

00:15:49.690 --> 00:15:55.730
This is where somebody has flowed some text
around a clipping path here.

00:15:55.730 --> 00:15:56.810
Right?

00:15:56.810 --> 00:15:59.230
Again, that's something we're used to seeing
in print.

00:15:59.230 --> 00:16:00.860
We want this on the Web.

00:16:00.860 --> 00:16:02.819
This is an example of it happening on the
Web.

00:16:02.819 --> 00:16:07.750
Again, this is both CSS Regions, where text
is flowing between regions, and also the exclusions

00:16:07.750 --> 00:16:14.310
where text is flowing along the contours of
this image.

00:16:14.310 --> 00:16:17.170
So where are we with CSS Exclusions right
now?

00:16:17.170 --> 00:16:25.120
We're really focused on some of the low level
implementations which really involve the optimization

00:16:25.120 --> 00:16:29.060
of algorithms that flow text around polygons
and inside of polygons.

00:16:29.060 --> 00:16:33.480
I'll actually show you a quick demo here.

00:16:33.480 --> 00:16:36.290
This is something that one of our engineers
put together.

00:16:36.290 --> 00:16:42.220
And you can see that this is just sort of
an example of an algorithm that determines

00:16:42.220 --> 00:16:47.310
on the left side how a text should flow inside
of some arbitrary polygon.

00:16:47.310 --> 00:16:49.060
In this case it's a star shape.

00:16:49.060 --> 00:16:53.350
And on the left it's content flowing around
the polygon.

00:16:53.350 --> 00:16:59.350
And so this is stuff that has to be really
bulletproof and has to be really performing.

00:16:59.350 --> 00:17:01.630
So right now we're really focusing on optimizing
those algorithms.

00:17:01.630 --> 00:17:05.150
They're going to be contributing directly
to the WebKit, and that's going to be the

00:17:05.150 --> 00:17:07.890
foundation on top of which we build Exclusions.

00:17:07.890 --> 00:17:09.030
Okay.

00:17:09.030 --> 00:17:10.440
So this is a really busy slide.

00:17:10.440 --> 00:17:11.440
I'm not going to go over this.

00:17:11.440 --> 00:17:13.460
This would bore you guys all to death.

00:17:13.460 --> 00:17:19.930
It's too late in the day for that, but I wanted
to just point out one really important element

00:17:19.930 --> 00:17:20.930
of this timeline.

00:17:20.930 --> 00:17:24.330
This is basically the full timeline of everything
from when we first started thinking about

00:17:24.330 --> 00:17:27.550
Regions and Exclusions all the way up through
the present.

00:17:27.550 --> 00:17:30.530
I really want to focus on this bottom row
here, the blue row.

00:17:30.530 --> 00:17:38.880
I was at Google I/O last year and I was working
at the booth and I was demoing CSS Exclusions

00:17:38.880 --> 00:17:43.160
and Regions, and people would come up and
take a look at it -- and we had a prototype

00:17:43.160 --> 00:17:44.160
back then.

00:17:44.160 --> 00:17:45.160
It was just a prototype build.

00:17:45.160 --> 00:17:46.570
And they'd look at it and they immediately
got it, right?

00:17:46.570 --> 00:17:49.940
When you see text flowing around shapes and
everything it's awesome.

00:17:49.940 --> 00:17:51.960
And so they would say, Wait, what browser
is that?

00:17:51.960 --> 00:17:52.960
Are you using Firefox?

00:17:52.960 --> 00:17:53.960
Is that WebKit?

00:17:53.960 --> 00:17:54.960
Is that Chrome?

00:17:54.960 --> 00:17:55.960
Is that Safari?

00:17:55.960 --> 00:17:56.960
Like what is that?

00:17:56.960 --> 00:17:59.020
And I would say, Well, this is actually our
own prototype browser.

00:17:59.020 --> 00:18:01.660
This actually doesn't work anywhere.

00:18:01.660 --> 00:18:05.730
And they'd like walk away kind of crest fallen
and be like "Damn, I kind of wanted to do

00:18:05.730 --> 00:18:07.800
that."

00:18:07.800 --> 00:18:13.920
So a year later, almost exactly a year later,
all of the live demos that I showed you work

00:18:13.920 --> 00:18:17.620
in the version of Chrome that all of you have
on your computers right now, which is really

00:18:17.620 --> 00:18:18.770
remarkable to me.

00:18:18.770 --> 00:18:19.770
That's one year's time.

00:18:19.770 --> 00:18:23.830
80 percent of CSS Regions has implemented
and is in Chrome and is on your computer right

00:18:23.830 --> 00:18:25.410
now.

00:18:25.410 --> 00:18:27.370
So we're making really good progress.

00:18:27.370 --> 00:18:33.620
As far as other browsers, Mozilla has committed
to Exclusions and Regions in their 2012 road

00:18:33.620 --> 00:18:34.620
map.

00:18:34.620 --> 00:18:37.850
The preview version of IE 10 supports Regions
and Exclusions.

00:18:37.850 --> 00:18:42.160
And since the implementation is being done
directly in WebKit, we expect the next major

00:18:42.160 --> 00:18:44.630
version of Safari to pick it up as well.

00:18:44.630 --> 00:18:49.800
I'm going to change gears a little bit here
and I'm going to talk about the Web development

00:18:49.800 --> 00:18:51.370
workflow, something a little different.

00:18:51.370 --> 00:18:53.700
Actually, instead of talking about it, I think
I'll do a little demonstration.

00:18:53.700 --> 00:19:01.600
So I'm going to open up my text editor here
and I'm going to open up a little prototype

00:19:01.600 --> 00:19:05.380
website that I am going to pretend like I'm
working on.

00:19:05.380 --> 00:19:09.510
And I'm going to talk about the Web development
workflow, which typically looks something

00:19:09.510 --> 00:19:11.100
like this.

00:19:11.100 --> 00:19:12.600
You start off in your editor.

00:19:12.600 --> 00:19:14.170
You make some kind of a change.

00:19:14.170 --> 00:19:17.700
Maybe you wonder if this menu belongs at the
top or not.

00:19:17.700 --> 00:19:21.950
So you remove it, you save it, you alt tab
over to your browser and you hit command R

00:19:21.950 --> 00:19:22.950
to reload.

00:19:22.950 --> 00:19:24.890
You say nah, I really wanted that.

00:19:24.890 --> 00:19:29.260
You go back, you undo, you save, you go back,
you reload.

00:19:29.260 --> 00:19:32.560
And if you're a Web developer, which I'm assuming
that all of you have at least some Web development

00:19:32.560 --> 00:19:37.970
experience, if not many years of experience,
you do this thousands of times a day, right?

00:19:37.970 --> 00:19:41.420
It's completely ingrained in muscle memory,
and it's a pretty good workflow, right?

00:19:41.420 --> 00:19:43.680
There's no compilation process or anything
like that.

00:19:43.680 --> 00:19:44.950
It's pretty fast, pretty smooth.

00:19:44.950 --> 00:19:49.800
Maybe you use something like live reload,
which makes it even slicker.

00:19:49.800 --> 00:19:53.840
Now what happens when you add mobile into
that workflow, as we increasingly are.

00:19:53.840 --> 00:19:58.130
If you are building a website now, you are
probably thinking about mobile to some degree.

00:19:58.130 --> 00:20:02.880
Well, you still have this workflow that I
just described, but you have this entire additional

00:20:02.880 --> 00:20:10.020
workflow that's like -- pulls it down and
-- and really makes it much less efficient,

00:20:10.020 --> 00:20:11.020
right?

00:20:11.020 --> 00:20:12.570
So it looks a little something like this,
right?

00:20:12.570 --> 00:20:15.590
You go through that process I just described,
you go okay let me check on my device.

00:20:15.590 --> 00:20:18.350
So up pick up your device, and it's been a
while so it's locked.

00:20:18.350 --> 00:20:19.510
So you unlock it.

00:20:19.510 --> 00:20:22.871
And you are security conscious, because you
are a at Google conference so you have to

00:20:22.871 --> 00:20:28.040
enter your PIN, of course, then you have to
navigate to your browser, then you have to

00:20:28.040 --> 00:20:32.310
type in this URL, this long complex URL of
your development machine or whatever it is

00:20:32.310 --> 00:20:34.210
and you make at least one or two mistakes,
of course.

00:20:34.210 --> 00:20:37.150
Then you fix 'em and you check it out.

00:20:37.150 --> 00:20:39.560
Then when you are done with that, then you
can just pick it up and hit reload, but you're

00:20:39.560 --> 00:20:41.600
still picking it up, unlocking it hitting
reload.

00:20:41.600 --> 00:20:43.520
Picking up the next device,unlocking, hitting
reload.

00:20:43.520 --> 00:20:47.290
And on the very last one, you're going to
find a bug, right?

00:20:47.290 --> 00:20:49.760
And then you're going to go back to your desktop
and fix it and you're going to start all over

00:20:49.760 --> 00:20:50.760
again.

00:20:50.760 --> 00:20:54.170
So the really cool process that we're all
pretty very much accustomed to becomes really

00:20:54.170 --> 00:20:59.580
pretty terrible on mobile devices when you
incorporate mobile devices into this Web development

00:20:59.580 --> 00:21:01.600
workflow, but I guess I shouldn't say terrible.

00:21:01.600 --> 00:21:05.260
But it's not as efficient, let's put it that
way.

00:21:05.260 --> 00:21:09.410
So Adobe looked at that problem and thought
that maybe we could do something about it.

00:21:09.410 --> 00:21:14.450
So I'm going to switch over to -- to my browser
here.

00:21:14.450 --> 00:21:18.230
And assuming that I have an internet connection,
if I'm lucky, I'm going to go to the Boston

00:21:18.230 --> 00:21:19.230
Globe.

00:21:19.230 --> 00:21:20.230
I'm lucky.

00:21:20.230 --> 00:21:25.470
And the reason that I'm picking the Boston
Globe here is because this is sort of a famously

00:21:25.470 --> 00:21:31.390
responsive website which probably required
thousands and thousands of combined hours

00:21:31.390 --> 00:21:35.640
of testing on mobile devices so that people
who built this, very smart people, and they

00:21:35.640 --> 00:21:36.640
know the pain.

00:21:36.640 --> 00:21:44.020
Now, what I'm going to do is I'm going to
come over here and switch over to the ELMO.

00:21:44.020 --> 00:21:48.410
And I'm going to put my devices over here
on the left and I'm going to put my -- my

00:21:48.410 --> 00:21:53.010
left anyways -- and I'm going to put my desktop
over here on this screen.

00:21:53.010 --> 00:21:57.170
And what you are going to see is that they're
all synchronized, right?

00:21:57.170 --> 00:22:03.120
And I'm going to click on an article here,
and they all follow along, right?

00:22:03.120 --> 00:22:08.240
So that same Web development workflow that
I showed you earlier, now I can -- I can still

00:22:08.240 --> 00:22:10.910
do with all of my devices connected, right?

00:22:10.910 --> 00:22:12.280
I can just glance over and see.

00:22:12.280 --> 00:22:15.530
I don't have to pick them up, I don't have
to change URLs, I don't have to tap on links

00:22:15.530 --> 00:22:17.060
and all that kind of thing.

00:22:17.060 --> 00:22:22.620
There's no limit to the number of devices
that you can connect to here, by the way.

00:22:22.620 --> 00:22:27.010
Something else I want to point out here is
Adobe shadow, it's not like bundling up this

00:22:27.010 --> 00:22:30.600
content and pushing it out to the devices,
right?

00:22:30.600 --> 00:22:34.510
Rather it's telling the devices to go make
its own request for the content.

00:22:34.510 --> 00:22:37.620
And that's an important distinction because
that means that the user agent and the http

00:22:37.620 --> 00:22:40.710
headers and all of the information that the
server needs in order to determine the correct

00:22:40.710 --> 00:22:45.180
content to send to that particular device
is all present.

00:22:45.180 --> 00:22:48.390
So you can get, you know, smaller images if
you are on smaller screen or higher resolution

00:22:48.390 --> 00:22:51.940
images if you are on one of these nice new
modern screens or whatever it is, right?

00:22:51.940 --> 00:22:57.680
So you are seeing the real deal on these devices.

00:22:57.680 --> 00:23:03.880
So let's see here ... it's nice to be able
to, you know, just this much is sort of a

00:23:03.880 --> 00:23:05.410
big win, but there's even more we can do.

00:23:05.410 --> 00:23:11.050
If I click on the little shadow extension
up here in my browser, I can do some remote

00:23:11.050 --> 00:23:13.520
inspection of my device here.

00:23:13.520 --> 00:23:20.920
And so I've now connected to my iPad and you
can see that as I start to mouse over the

00:23:20.920 --> 00:23:28.890
content, in my Web Inspector on my desktop,
you can see this being highlighted on my iPad

00:23:28.890 --> 00:23:29.930
over there.

00:23:29.930 --> 00:23:34.240
So this is, you know, the kind of thing that
we're accustomed to doing, you know, on our

00:23:34.240 --> 00:23:40.702
-- when we're doing Web development on our
desktop and now it extends nicely to our devices.

00:23:40.702 --> 00:23:44.710
And we can do more than just highlight, we
can also change things so I can, you know,

00:23:44.710 --> 00:23:51.780
say something like -- I can change this headline
to be a little more relevant to me, right?

00:23:51.780 --> 00:23:53.810
So I just changed the headline over here.

00:23:53.810 --> 00:23:56.220
I prefer something like this.

00:23:56.220 --> 00:24:02.460
I can execute some JavaScript remotely on
any one of these devices.

00:24:02.460 --> 00:24:05.830
See I just popped up an alert here.

00:24:05.830 --> 00:24:08.130
So I will come over here and dismiss it.

00:24:08.130 --> 00:24:11.720
So after I've sufficiently messed up this
page by vandalizing it or whatever, I can

00:24:11.720 --> 00:24:14.990
just come over here, pull it down and refresh
it.

00:24:14.990 --> 00:24:17.720
If you guys have done development on a lot
of different mobile devices, you will know

00:24:17.720 --> 00:24:23.090
that clearing the cache is actually kind of
a pain, like getting a fresh copy of everything

00:24:23.090 --> 00:24:27.400
on all of these different devices, and so
shadow takes care of that for you by dumping

00:24:27.400 --> 00:24:28.840
the cache and making a fresh request.

00:24:28.840 --> 00:24:32.200
Or if I want to do it to all of my devices,
I will just come over here and I will tell

00:24:32.200 --> 00:24:35.650
them all to refresh, so I will click on that.

00:24:35.650 --> 00:24:39.810
I don't know if you saw, but they all just
refreshed, it's very quick.

00:24:39.810 --> 00:24:42.260
Also I can take screen shots of all of my
devices here.

00:24:42.260 --> 00:24:48.270
I'll just click on this icon, takes a little
bit of time, open up the directory here and

00:24:48.270 --> 00:24:55.450
you can see that I have -- this is the screen
shot from my iPad, so I can compare them all,

00:24:55.450 --> 00:24:58.250
sort of check out pixels next to each other.

00:24:58.250 --> 00:25:03.740
[ Applause ]
&gt;&gt;Christian Cantrell: Oh, thank you.

00:25:03.740 --> 00:25:04.740
Awesome.

00:25:04.740 --> 00:25:07.040
That is worthy of applause, I agree, thank
you.

00:25:07.040 --> 00:25:12.510
This is the Galaxy Nexus here, and also some
text files were created with some meta data

00:25:12.510 --> 00:25:17.930
so I can, you know, sort of get a good feel
for how something looked for the specific,

00:25:17.930 --> 00:25:23.180
you know, URL and LS version and stuff like
that.

00:25:23.180 --> 00:25:25.590
So -- so there's shadow.

00:25:25.590 --> 00:25:26.590
It's available right now.

00:25:26.590 --> 00:25:31.010
You can go to labs.adobe.com, download it,
see if it helps for your workflow.

00:25:31.010 --> 00:25:33.270
I'm a big fan myself.

00:25:33.270 --> 00:25:34.920
Okay.

00:25:34.920 --> 00:25:38.330
I'm going to change gears again and talk a
little bit about tooling.

00:25:38.330 --> 00:25:40.660
So tooling is something that Adobe is well
known for.

00:25:40.660 --> 00:25:44.680
We do a lot of tooling, so when we were looking
at ways we can contribute to the Web, tooling

00:25:44.680 --> 00:25:47.960
was something that seemed kind of obvious.

00:25:47.960 --> 00:25:52.380
But we didn't just want to go create sort
of the same old kinds of tools.

00:25:52.380 --> 00:25:58.580
We really wanted to take a fresh approach
and see what kind of innovation we could bring

00:25:58.580 --> 00:25:59.790
to tooling.

00:25:59.790 --> 00:26:05.320
So we decided to experiment with an open source
code editor for the Web written entirely with

00:26:05.320 --> 00:26:07.270
Web technologies.

00:26:07.270 --> 00:26:10.100
Just to see what would happen.

00:26:10.100 --> 00:26:12.150
And what happened was something called brackets.

00:26:12.150 --> 00:26:16.330
I'm going to go through a few bullet points
here and then I'll get to the demo, but I

00:26:16.330 --> 00:26:17.550
want to provide context here.

00:26:17.550 --> 00:26:18.700
First of all, it's open source.

00:26:18.700 --> 00:26:21.030
When I say it's open source, I mean it's open
source, right?

00:26:21.030 --> 00:26:23.910
Like a lot of companies, they used to say
something was open source and we'd all go

00:26:23.910 --> 00:26:27.420
oh cool it's open source, and you would look
at the license and be like wait a minute.

00:26:27.420 --> 00:26:30.500
Open source is actually kind of a useless
term.

00:26:30.500 --> 00:26:31.710
So really what license?

00:26:31.710 --> 00:26:36.460
And we are releasing under MIT license, and
that's a very, very liberal license.

00:26:36.460 --> 00:26:39.870
All of the codes on GitHub, even the backlog
is public.

00:26:39.870 --> 00:26:44.530
It's on a site called Trello, so you can actually
go see what the team is working on.

00:26:44.530 --> 00:26:46.030
So everything is being done in the public.

00:26:46.030 --> 00:26:50.340
There's also IRC channels and there's lists
and stuff like that that you can follow.

00:26:50.340 --> 00:26:55.150
This is something that we realized kind of
early on, which is kind of cool, this concept

00:26:55.150 --> 00:26:57.539
if you can use brackets, you can hack on brackets.

00:26:57.539 --> 00:27:01.100
If you need brackets, if you use brackets,
you can change brackets.

00:27:01.100 --> 00:27:05.730
This point was really driven home to me when
I was working on my Google I/O slides and

00:27:05.730 --> 00:27:11.470
I realized I wanted brackets to be able to
bump up the font size so that the audience

00:27:11.470 --> 00:27:15.380
could see the code while I was demoing it,
but it didn't have that feature.

00:27:15.380 --> 00:27:16.550
It's still very, very early.

00:27:16.550 --> 00:27:21.370
I should point out this is still very early
stages of development.

00:27:21.370 --> 00:27:23.910
So I emailed the product manager, Adam Leeman.

00:27:23.910 --> 00:27:26.860
I said, "Can you guys add this by Google I/O?"

00:27:26.860 --> 00:27:28.920
Or I said, "Are you planning on adding this
by Google I/O?"

00:27:28.920 --> 00:27:34.450
And he responds, he says, "Here's the link,"
you know, "here's a link to the public -- public

00:27:34.450 --> 00:27:40.070
backlog, you can check for yourself, it's
all public, you don't have to ask me."

00:27:40.070 --> 00:27:41.550
And actually he didn't say it like that because
he's a nice guy.

00:27:41.550 --> 00:27:44.980
But I went and I looked and it wasn't scheduled.

00:27:44.980 --> 00:27:45.980
I said, "Well, can you guys get it in?"

00:27:45.980 --> 00:27:47.580
He said, "No, but it's open source you can
get in."

00:27:47.580 --> 00:27:49.830
I thought, you know, that's true.

00:27:49.830 --> 00:27:52.960
Like that -- like, I'm really critical of
editors, right?

00:27:52.960 --> 00:27:53.960
We all are.

00:27:53.960 --> 00:27:55.400
Everyone in this room is really critical about
editors.

00:27:55.400 --> 00:27:58.900
And for the first time I just had the power
to make it how I wanted it.

00:27:58.900 --> 00:28:05.020
So I just forked it, I mean, I'm a good JavaScript
programmer, I forked it, you know, I cloned

00:28:05.020 --> 00:28:09.650
it, I branched it, and I built the feature
all in JavaScript and submitted a report request

00:28:09.650 --> 00:28:12.620
and it got merged and I added the feature.

00:28:12.620 --> 00:28:16.330
It was really empowering to be able to just
change things I didn't like about the editor

00:28:16.330 --> 00:28:18.330
that I use every day.

00:28:18.330 --> 00:28:24.850
I'm sorry, I forgot to change that back.

00:28:24.850 --> 00:28:26.490
Thank you.

00:28:26.490 --> 00:28:29.110
So brackets is intended to run outside of
the browser for now.

00:28:29.110 --> 00:28:30.110
Right?

00:28:30.110 --> 00:28:32.390
So we built it with Web technologies, we were
first thinking like wouldn't it be awesome

00:28:32.390 --> 00:28:36.790
to take this editor and actually run it inside
of a browser?

00:28:36.790 --> 00:28:40.470
We thought that might be really innovative
and cool and different.

00:28:40.470 --> 00:28:43.850
Then we thought, no, probably not.

00:28:43.850 --> 00:28:47.651
We want to focus on a more traditional development
experience right now and keep it outside of

00:28:47.651 --> 00:28:50.510
the browser, but we are definitely looking
at embedding it in the browser in the future

00:28:50.510 --> 00:28:52.570
and accessing various cloud serves with it.

00:28:52.570 --> 00:28:53.780
We are not trying to build an IDE.

00:28:53.780 --> 00:28:55.480
We are trying to build a streamlined editor.

00:28:55.480 --> 00:28:58.230
We are not trying to compete with Visual Studio,
Eclipse or something like that.

00:28:58.230 --> 00:29:00.460
We are trying to build something fast and
streamlined.

00:29:00.460 --> 00:29:02.490
We want it to be an editor.

00:29:02.490 --> 00:29:04.260
And so we have a good extension model.

00:29:04.260 --> 00:29:09.480
It's an evolving extension model, which is
really designed to help us keep a lot of the

00:29:09.480 --> 00:29:13.040
things that maybe everybody doesn't want out
of the core product and so that people can

00:29:13.040 --> 00:29:14.990
just bring in what they want.

00:29:14.990 --> 00:29:17.970
And the last thing that I want to say is that
the core editor is codemirror, which is a

00:29:17.970 --> 00:29:21.780
separate project which is something that we
are also actively contributing to.

00:29:21.780 --> 00:29:22.780
Okay.

00:29:22.780 --> 00:29:23.780
So enough talk.

00:29:23.780 --> 00:29:24.780
Let's take a look at it.

00:29:24.780 --> 00:29:28.150
In fact, you actually have already seen it,
so this is brackets.

00:29:28.150 --> 00:29:29.750
I was using it earlier.

00:29:29.750 --> 00:29:30.750
It's a very simple editor.

00:29:30.750 --> 00:29:34.490
I mean, I have my files over here on the left,
I have my code here on the right, and I can

00:29:34.490 --> 00:29:35.670
hide my files.

00:29:35.670 --> 00:29:36.700
You know, I have some menus up here.

00:29:36.700 --> 00:29:37.700
These are actually temporary.

00:29:37.700 --> 00:29:39.350
These menus are going to become native menus.

00:29:39.350 --> 00:29:42.200
They are just in here temporarily.

00:29:42.200 --> 00:29:43.200
But this is it.

00:29:43.200 --> 00:29:51.700
I mean it's a relatively straightforward and
simple experience, simple UI.

00:29:51.700 --> 00:29:56.110
And the point of brackets is to really sort
of get out of your way.

00:29:56.110 --> 00:30:01.170
And it's to sort of break down the barriers
between what it is that you intend to do and

00:30:01.170 --> 00:30:03.180
actually doing it.

00:30:03.180 --> 00:30:06.990
So if I'm looking at this piece of text right
here and I decide that I want to make some

00:30:06.990 --> 00:30:12.230
kind of a change to it, let's say I want to
tweak the line height of this text, then the

00:30:12.230 --> 00:30:16.160
first thing that I have to start doing is
dig through a bunch of CSS files, right?

00:30:16.160 --> 00:30:19.870
And, you know, I have to look at, you know,
I have to look for selector vision, I have

00:30:19.870 --> 00:30:23.420
to look for this ID, I have to look for main
content or maybe article, I have to look for,

00:30:23.420 --> 00:30:29.280
you know, maybe a container and I have to
try and find where, you know, which styles

00:30:29.280 --> 00:30:32.510
are actually applying to this piece of text.

00:30:32.510 --> 00:30:35.500
And if this is a big project, I could have
a dozen CSS files, right?

00:30:35.500 --> 00:30:39.640
They could be hundreds of lines long and it
could be a real pain, right?

00:30:39.640 --> 00:30:45.320
So as I'm foraging sort of around looking
for these rules, I'm not programming, I'm

00:30:45.320 --> 00:30:46.950
not doing what I'm intending to do.

00:30:46.950 --> 00:30:48.940
It's affecting my productivity.

00:30:48.940 --> 00:30:52.760
So instead what I want to do is I just want
my editor to do that for me.

00:30:52.760 --> 00:30:55.770
I want to hit command E, I just want to hit
a keystroke and I want to have my editor do

00:30:55.770 --> 00:30:56.770
that for me, right?

00:30:56.770 --> 00:30:58.550
I want to have it bring up this editor right
here.

00:30:58.550 --> 00:31:03.530
This is an inline editor, and it's telling
me exactly which rules apply to where my cursor

00:31:03.530 --> 00:31:04.530
was.

00:31:04.530 --> 00:31:08.570
If it's multiple documents, it will show me
the different documents right here on the

00:31:08.570 --> 00:31:10.600
right and I can just pick the right one.

00:31:10.600 --> 00:31:15.400
And I can go down here and I can make a change,
so maybe I change this to 33 -- now, this

00:31:15.400 --> 00:31:18.130
isn't just a few or perspective of my CSS.

00:31:18.130 --> 00:31:20.150
This is an actual editor.

00:31:20.150 --> 00:31:24.460
You can see I just made a change and now it's
this file is marked as dirty here and here

00:31:24.460 --> 00:31:25.460
and I can hit save.

00:31:25.460 --> 00:31:26.460
So I have saved it.

00:31:26.460 --> 00:31:31.790
I have actually edited the document, the CSS,
inline, directly in context, which is really

00:31:31.790 --> 00:31:33.470
nice.

00:31:33.470 --> 00:31:36.530
But it's not enough just to be able to edit
the CSS.

00:31:36.530 --> 00:31:40.600
We actually need to be able to see what we're
doing and see how it's affecting our document.

00:31:40.600 --> 00:31:44.700
So I'm going to go up here and click on this
lightning bolt, move this over to the side,

00:31:44.700 --> 00:31:48.180
and look at this, I'm going to bump up the
font size.

00:31:48.180 --> 00:31:49.890
It's awesome.

00:31:49.890 --> 00:31:51.600
[ Laughter ]
[ Applause ]

00:31:51.600 --> 00:31:55.020
&gt;&gt;Christian Cantrell: Well, thanks!

00:31:55.020 --> 00:31:56.740
Thank you.

00:31:56.740 --> 00:31:59.580
And then I'm going to put my browser over
here on the left and I'm going to go back

00:31:59.580 --> 00:32:02.410
down to this paragraph that I was talking
about before and I'm going to open up this

00:32:02.410 --> 00:32:06.960
editor, and go down to the line height, which
is what I intended to do and I'm going to

00:32:06.960 --> 00:32:08.970
start tweaking the line height.

00:32:08.970 --> 00:32:11.000
You can see that it's changing there on the
left, right?

00:32:11.000 --> 00:32:14.930
Let me do something a little more dramatic,
let me really change it.

00:32:14.930 --> 00:32:21.450
So while I'm actually changing it, I'm seeing
what I'm doing, right?

00:32:21.450 --> 00:32:23.980
Which is going to make my workflow much more
efficient.

00:32:23.980 --> 00:32:27.750
Maybe I want to change this margin down here
a little bit.

00:32:27.750 --> 00:32:33.280
So while I'm coding I'm actually seeing in
real-time what's going on here and I can just

00:32:33.280 --> 00:32:34.280
save it.

00:32:34.280 --> 00:32:40.420
Now, you -- you might be accustomed to doing
this kind of thing in -- in something like

00:32:40.420 --> 00:32:43.010
the -- like the WebKit devtools, right?

00:32:43.010 --> 00:32:46.380
Where you are able to tweak your CSS, but
the problem with that is that you are not

00:32:46.380 --> 00:32:49.090
doing that inside of your editor, so you make
all of these changes and there's no way to

00:32:49.090 --> 00:32:51.130
capture them back to your source files.

00:32:51.130 --> 00:32:58.770
Let me make this full screen, bring my files
out here and bring up my index page.

00:32:58.770 --> 00:33:00.650
Now, this also works with JavaScript, too.

00:33:00.650 --> 00:33:10.380
So I can scroll down to, you know, some function,
function call here, and drop my -- drop my

00:33:10.380 --> 00:33:11.600
cursor next to a function here.

00:33:11.600 --> 00:33:15.500
If I don't remember the method signature,
the function signature, I can just hit command

00:33:15.500 --> 00:33:19.400
D, it brings up another editor, I can read
the whole function so I know what's going

00:33:19.400 --> 00:33:20.400
on.

00:33:20.400 --> 00:33:21.400
Hopefully it's documented.

00:33:21.400 --> 00:33:23.000
In this case it's not.

00:33:23.000 --> 00:33:28.120
But you can see how, you know, how brackets
is really designed to get out of your way,

00:33:28.120 --> 00:33:33.330
to break down barriers, to let you do what
you intend to do and, you know, get your features

00:33:33.330 --> 00:33:37.300
implemented as quickly and smoothly as possible.

00:33:37.300 --> 00:33:38.370
Brackets is available now.

00:33:38.370 --> 00:33:39.970
You can start playing with it.

00:33:39.970 --> 00:33:44.090
You guys can start adding features, fixing
bugs, et cetera and we'll have the URL at

00:33:44.090 --> 00:33:47.070
the end of the presentation if you want to
learn more.

00:33:47.070 --> 00:33:51.600
So those are the things that Adobe has going
on around text, around Web development workflow

00:33:51.600 --> 00:33:54.630
and some things we have going on around tooling.

00:33:54.630 --> 00:33:59.530
We also have a lot more going on that focuses
more on graphics and for that I'm going to

00:33:59.530 --> 00:34:01.450
turn it over to Vincent.

00:34:01.450 --> 00:34:09.510
[ Applause ]
&gt;&gt;Vincent Hardy: Thanks, Christian.

00:34:09.510 --> 00:34:16.940
Yes, I'm going to talk about graphics and
cinematic effects for the Web.

00:34:16.940 --> 00:34:20.460
One thing that I want to point out is the
tool that we're using for the presentation

00:34:20.460 --> 00:34:24.780
is actually, you know, it's not a keynote
or not a PowerPoint or it's not one of the

00:34:24.780 --> 00:34:25.800
presentation tools.

00:34:25.800 --> 00:34:27.149
It's actually Chromium.

00:34:27.149 --> 00:34:32.139
Slightly tweaked version of Chromium, but
it's a Web browser running full screen and

00:34:32.139 --> 00:34:35.870
the whole presentation is written with HTML
with actually a library called (indiscernible)

00:34:35.870 --> 00:34:43.120
but all of the slides are put together using
HTML, so we're doing this in part because

00:34:43.120 --> 00:34:47.460
it's possible, of course, and also in part
to test out all of the things that we're working

00:34:47.460 --> 00:34:53.010
on and the type of new effects that we're
trying to bring to the platform or that are

00:34:53.010 --> 00:34:54.659
already available on the platform.

00:34:54.659 --> 00:34:57.250
So I'm going to start with an example.

00:34:57.250 --> 00:35:02.540
So what you're looking at here is actually
an SVG image embedded into an inline HTML

00:35:02.540 --> 00:35:04.630
document, that's something that you can do
today.

00:35:04.630 --> 00:35:11.380
It has a drop shadow, which is an SVG filter
applied to it, it's very subtle, so you might

00:35:11.380 --> 00:35:15.110
kind of see it around the edges of the logo.

00:35:15.110 --> 00:35:17.740
And it has a gray scale filter applied to
it as well.

00:35:17.740 --> 00:35:26.350
And when I hover on it, the gray scale filter
gets animated and the -- to restore the colors

00:35:26.350 --> 00:35:31.730
and you saw this kind of flag animation happening
on the content.

00:35:31.730 --> 00:35:37.620
So this is using all kinds of filter effects,
I will talk about the different kinds of filter

00:35:37.620 --> 00:35:41.100
effects that are applied here and how you
write this.

00:35:41.100 --> 00:35:52.460
Another thing that's more subtle on this is
the -- is the -- is happening in the interaction

00:35:52.460 --> 00:35:56.960
of the SVG MH with the background, you can
see there's a slightly textured background

00:35:56.960 --> 00:36:01.850
and the image actually blends in the background
in a way that you have not seen before.

00:36:01.850 --> 00:36:02.950
This is not opacity.

00:36:02.950 --> 00:36:05.030
This is actually a blind mode.

00:36:05.030 --> 00:36:13.570
And we're combining and having interaction
between the logo and the backdrop.

00:36:13.570 --> 00:36:16.700
How do we do this traditionally?

00:36:16.700 --> 00:36:19.500
So -- oops.

00:36:19.500 --> 00:36:20.890
Okay.

00:36:20.890 --> 00:36:23.690
All right.

00:36:23.690 --> 00:36:31.000
So traditionally, this is done with -- with
authoring tools, so we do this with tools

00:36:31.000 --> 00:36:39.370
like Photoshop, we do with tools like Illustrator,
or GIMP, we do this with tools like After

00:36:39.370 --> 00:36:40.370
Effects.

00:36:40.370 --> 00:36:43.930
Those tools combined let you create better
graphics, that let you define complex vector

00:36:43.930 --> 00:36:51.040
effects or filter effects or let you play
with, you know -- you know, measures of coordinates

00:36:51.040 --> 00:36:53.500
in a space to do effects like flags.

00:36:53.500 --> 00:36:57.290
How do you do this on the Web platform, though?

00:36:57.290 --> 00:36:59.050
So this is coming to the Web.

00:36:59.050 --> 00:37:03.780
The way it's coming is through a number of
filter effects.

00:37:03.780 --> 00:37:08.030
We have -- we have -- at the bottom in gray
we have the text shadow and box shadow, and

00:37:08.030 --> 00:37:10.220
I have a glitch in my rendering here.

00:37:10.220 --> 00:37:15.490
I apologize for that, but so text shadow and
box shadow are kind of the ancestors of the

00:37:15.490 --> 00:37:17.280
modern filter effects that are coming.

00:37:17.280 --> 00:37:22.970
They can do simple things, but they are available,
and they can be powerful.

00:37:22.970 --> 00:37:27.800
And we have the new filter property, and that
starts to be implemented in -- in the browser

00:37:27.800 --> 00:37:30.530
and starts to being -- using the browser.

00:37:30.530 --> 00:37:35.130
If you've seen the keynote this morning, the
Cirque du Soleil demo was using filter effects

00:37:35.130 --> 00:37:41.670
and they are now in Chromium and WebKit as
well, they are also in IE for -- for scale

00:37:41.670 --> 00:37:43.230
or vector graphics.

00:37:43.230 --> 00:37:47.500
The way you use filter effects is in one of
three ways.

00:37:47.500 --> 00:37:52.550
The -- this is one to start with is probably
filter graphs, those are filter defines as

00:37:52.550 --> 00:37:56.210
a set of nodes that you can combine to create
the effect that you would want, very much

00:37:56.210 --> 00:37:58.780
like you would do in a tool.

00:37:58.780 --> 00:38:04.530
The second way is through shorthands, so filter
shorthands are shorthands for filter graphs.

00:38:04.530 --> 00:38:09.190
So there are some filter types that are, you
know, very common that you might want to use.

00:38:09.190 --> 00:38:13.360
And instead of repeating the same filter graph
over and over again, the specification provides

00:38:13.360 --> 00:38:15.270
the shorthands for those.

00:38:15.270 --> 00:38:19.860
And then the third way is custom filters or
shaders, which gives you the full power and

00:38:19.860 --> 00:38:22.520
full access to the power of the GPU.

00:38:22.520 --> 00:38:23.560
It's a new proposal.

00:38:23.560 --> 00:38:29.070
It's being standardized right now and this
is what does the GPX like the waving effect

00:38:29.070 --> 00:38:30.640
that we saw.

00:38:30.640 --> 00:38:34.910
So the first -- the few effects about what's
possible today.

00:38:34.910 --> 00:38:39.070
This is just playing with text shadow and
combining multiple text shadows of different

00:38:39.070 --> 00:38:40.070
colors.

00:38:40.070 --> 00:38:45.730
You can do a neon-like effect and when I hover
on it, I get a nicer glow.

00:38:45.730 --> 00:38:52.520
It's very simple, and it's just combining
CSS animation and the filter property.

00:38:52.520 --> 00:38:56.180
The tech shadow property, sorry.

00:38:56.180 --> 00:39:01.180
Similarly you can use a box shadow, so the
box shadow will apply, (inaudible) of tech

00:39:01.180 --> 00:39:07.030
shadow, but to the box, the CSS box, and we
can use it for example, to track the user's

00:39:07.030 --> 00:39:14.640
attention on, you know, where the text entry
currently is, so here I have, you know, laser

00:39:14.640 --> 00:39:21.210
saber effect on the text entry, and that helps
the user, that helps the usability, and so

00:39:21.210 --> 00:39:23.240
it's pretty pleasant visually.

00:39:23.240 --> 00:39:27.660
So these are available today and people start
using those on Web pages.

00:39:27.660 --> 00:39:32.910
Now, let's turn to the new filter effects
and the ones that are starting to be available

00:39:32.910 --> 00:39:34.570
now.

00:39:34.570 --> 00:39:39.510
The -- the easiest way to use them is with
shorthands, so if you'll look at the way you

00:39:39.510 --> 00:39:43.010
would write this in your CSS, you would just
add the filter property, you would say colon,

00:39:43.010 --> 00:39:50.100
and then you'll invoke one of the filter functions,
so if we do this on this original image, and

00:39:50.100 --> 00:39:55.300
apply, for example, a gray scale filter, I
just have to say, you know, filter, Colin,

00:39:55.300 --> 00:40:00.830
gray scale one, and that applies a full gray
scale filter, and one of the beauties of this

00:40:00.830 --> 00:40:05.980
is that I can vary the parameter in the gray
scale function and that can be subjected to

00:40:05.980 --> 00:40:11.800
CSS animations and CSS transitions making
it extremely trivial to write, say, hover

00:40:11.800 --> 00:40:17.430
effect where, you know, the image will go
from gray scale to full color on hover.

00:40:17.430 --> 00:40:20.640
There's a bunch of those effects, not going
to go through all of them, but you can see

00:40:20.640 --> 00:40:26.720
that visually they provide, you know, already
a pretty nice variety of things you can do.

00:40:26.720 --> 00:40:29.440
Now, the -- oops.

00:40:29.440 --> 00:40:34.840
Having problems with my navigation.

00:40:34.840 --> 00:40:38.070
Sorry about this.

00:40:38.070 --> 00:40:45.530
As I said earlier, the shorthand filters are
actually shorthands for filter graphs, and

00:40:45.530 --> 00:40:46.890
filter graphs come from SVG.

00:40:46.890 --> 00:40:53.510
They are now being applied to not just SVG
element, but all of HTML, and I'm going to

00:40:53.510 --> 00:40:58.200
show you something that traditionally you
would do in Photoshop, remember, you know,

00:40:58.200 --> 00:41:02.280
many years ago I used to read those books
called Photoshop Wow! books, and there was

00:41:02.280 --> 00:41:06.821
one edition for each version of Photoshop,
and they would explain how to do those, you

00:41:06.821 --> 00:41:11.430
know, the combination of filter effects to
do something like a chiseled gold effect,

00:41:11.430 --> 00:41:15.520
and the way you would put this on your Web
page is you would do it in Photoshop, you'd

00:41:15.520 --> 00:41:20.530
do export this as a PNG or a JPEG and then
insert that into your Web page.

00:41:20.530 --> 00:41:25.780
Well, now, you can design your filter, but
you don't have to, you know, export as a PNG,

00:41:25.780 --> 00:41:30.340
it can still be text, so here I'm going to
filter a piece of text, which means that my

00:41:30.340 --> 00:41:35.559
content remains searchable, et cetera, and
accessible, and I can toggle that, you know,

00:41:35.559 --> 00:41:37.730
nice gold chiseled effect.

00:41:37.730 --> 00:41:43.590
And also since this is all declarative and
it's done in markup, I can manipulate it -- I

00:41:43.590 --> 00:41:49.480
can manipulate it dynamically in JavaScript,
so here I've done something, you know, fairly

00:41:49.480 --> 00:41:50.480
simple.

00:41:50.480 --> 00:41:55.380
I hooked up one of the lighting filters in
this filter graph to the position of the mouse,

00:41:55.380 --> 00:42:00.030
and as a result, when I move the mouse, the
light seems to come from a different direction,

00:42:00.030 --> 00:42:02.010
so that's, you know, pretty nice flexibility.

00:42:02.010 --> 00:42:08.250
So, you know, maybe you're not putting, you
know, chiseled gold on your page that often,

00:42:08.250 --> 00:42:12.800
but something that's more common is something
like this, curve shadows.

00:42:12.800 --> 00:42:19.680
So curve shadow is something you see on a
lot of Web pages today, and the way it's implemented,

00:42:19.680 --> 00:42:25.290
right now in the best case, because there
are sometimes horrible hacks, but the case

00:42:25.290 --> 00:42:32.500
use before and after elements boxes that are
moved to the side of the box and they're rotated,

00:42:32.500 --> 00:42:39.130
and they have a background box shadow on them,
but this is, you know, a little convoluted,

00:42:39.130 --> 00:42:42.080
this is really visual effect and belongs to
filters.

00:42:42.080 --> 00:42:48.130
That turns out to be fairly simple to write
in -- as a filter graph, and also the nice

00:42:48.130 --> 00:42:54.650
thing about it, it's very easy to remain place
for script or CSS, so here I can just manipulate

00:42:54.650 --> 00:43:01.050
one of the parameters of one of the nodes
in that filter graph and have varying effects.

00:43:01.050 --> 00:43:09.740
So to give you a feel of what this looks like,
here is a little code sample, and the thing

00:43:09.740 --> 00:43:12.690
that is important to note here is that I'm
not going to go through all the details of

00:43:12.690 --> 00:43:18.100
that filter graph, but things to remember
are you have a filter element, that's the

00:43:18.100 --> 00:43:22.680
top element here in the light blue color,
and that's what you would reference from your

00:43:22.680 --> 00:43:27.210
filter property, so the filter property will
point to it, and then you have a number of

00:43:27.210 --> 00:43:29.810
filter nodes that you can arrange and combine.

00:43:29.810 --> 00:43:31.830
They each produce a different effect.

00:43:31.830 --> 00:43:36.190
And at the end of the filter you can combine
and arrange those effects and stack them up

00:43:36.190 --> 00:43:37.190
in the way you want.

00:43:37.190 --> 00:43:42.310
So that's very similar again to what you would
do in an authoring tool, and all those operation

00:43:42.310 --> 00:43:48.100
and combinations can be captured in the markup,
and the nice thing again is that since this

00:43:48.100 --> 00:43:52.060
is markup, this is part of the DOM, and the
DOM is accessible for scripts, and you can

00:43:52.060 --> 00:43:53.830
make it all dynamic.

00:43:53.830 --> 00:43:59.780
So now let's move to the last type of shaders.

00:43:59.780 --> 00:44:06.530
So since the shaders are used for the filter
function again, except that you're using a

00:44:06.530 --> 00:44:10.550
new syntax for the value, instead of having
a shorthand or pointing to your filter graph,

00:44:10.550 --> 00:44:13.940
we use a custom function.

00:44:13.940 --> 00:44:18.170
Before we dive into this, this is what the
kind of things it does, so here you see when

00:44:18.170 --> 00:44:22.850
I hover, I start applying a filter -- custom
filter effect and the two things happening

00:44:22.850 --> 00:44:29.280
are first the rendering is distorted, it has
this nice curvy effect applied to it, and

00:44:29.280 --> 00:44:34.750
that's what vertex shaders do, so this is
about distorting geometry and moving vertices

00:44:34.750 --> 00:44:39.850
around, and the second thing you can notice
is there's a fairly subtle effect -- shading

00:44:39.850 --> 00:44:48.100
effect on the rendering, so the original element
that we're filtering is all white, and here

00:44:48.100 --> 00:44:51.570
you can see there're shades of gray, and that's
what (inaudible) shaders or pixel shaders

00:44:51.570 --> 00:44:53.530
do for you.

00:44:53.530 --> 00:44:58.380
The other thing that you mentioned is, you
know, shaders run on the GPU, so this is,

00:44:58.380 --> 00:45:01.880
you know, usually very fast.

00:45:01.880 --> 00:45:06.130
So the model says the shaders is that -- the
conceptual model, when you use it, you want

00:45:06.130 --> 00:45:13.280
to author it or just use it as a shader, is
that think of it as your content being rendered

00:45:13.280 --> 00:45:23.190
into an image, and then a mesh of points or
vertices is mapped on to this offscreen rendering,

00:45:23.190 --> 00:45:28.610
and what the vertex shader lets you do is
manipulate those -- those mesh points, or

00:45:28.610 --> 00:45:33.550
mesh vertices in a 3D space, and that gives
you the ability to do all kinds of, you know,

00:45:33.550 --> 00:45:36.170
extremely beautiful distortions in a 3D space.

00:45:36.170 --> 00:45:38.030
And that is the end of step 2.

00:45:38.030 --> 00:45:40.230
That is what the vertex shader produces.

00:45:40.230 --> 00:45:45.640
And then the last step is that you can manipulate
pixel values, so once you've distorted the

00:45:45.640 --> 00:45:52.480
geometry all you want, you can then apply
the values on the pixel colors, and more precisely

00:45:52.480 --> 00:45:58.730
can produce pixel colors that will be combined
with the rendered content.

00:45:58.730 --> 00:46:04.420
So let's look at how to use shaders step by
step, so again, very simple, use a custom

00:46:04.420 --> 00:46:07.500
function, and you pass parameters to it.

00:46:07.500 --> 00:46:12.960
If we zoom in to what the parameters are,
the only required parameter is the vertex

00:46:12.960 --> 00:46:13.960
shader.

00:46:13.960 --> 00:46:18.290
This is the only thing that's required, so
if you want to just pass the vertex shader,

00:46:18.290 --> 00:46:19.930
that's fine.

00:46:19.930 --> 00:46:26.070
There's an optional parameter which is a fragment
shader that will manipulate the pixel values,

00:46:26.070 --> 00:46:27.680
then you specify the vertex mesh.

00:46:27.680 --> 00:46:32.500
The vertex mesh is the granularity you want
for, you know, how many points you want to

00:46:32.500 --> 00:46:35.390
be able to manipulate that will be mapped
on top of your rendering.

00:46:35.390 --> 00:46:38.900
Depending on the effect, you may want more
or less of them.

00:46:38.900 --> 00:46:43.050
And then finally, and this is very powerful,
you can pass parameters to vertex shaders,

00:46:43.050 --> 00:46:54.630
and those parameters can then be animated
through CSS transitions and CSS animations,

00:46:54.630 --> 00:46:56.890
sorry.

00:46:56.890 --> 00:47:01.410
All right.

00:47:01.410 --> 00:47:06.640
So let's look at step by step, if I use only
a vertex shader and the size of the vertex

00:47:06.640 --> 00:47:12.480
mesh, here is how it looks, on the left-hand
side is the thing I want to filter.

00:47:12.480 --> 00:47:16.700
On top of it I've drawn the vortex mesh or
something that symbolizes the vertex mesh.

00:47:16.700 --> 00:47:22.600
This little gray square represents the vertex
mesh, so I've asked for a vertex mesh that

00:47:22.600 --> 00:47:28.740
is two rows and two chums, so I have, you
know, nine vertices to manipulate, and now

00:47:28.740 --> 00:47:32.720
on the right-hand side you can see that all
of those vertices have been moved -- have

00:47:32.720 --> 00:47:38.990
been moved by my vertex shader, and as a result,
I get this distortion that gives the impression

00:47:38.990 --> 00:47:42.350
that my element has been folded in two.

00:47:42.350 --> 00:47:47.700
Now, what if I wanted to do something a little
more sophisticated and give it a little more

00:47:47.700 --> 00:47:52.940
realistic look, like if I wanted the thing
to be darker at the -- you know, where the

00:47:52.940 --> 00:47:59.140
fold happens in the center, and just regular
coloring on the edges.

00:47:59.140 --> 00:48:05.560
Well, that's when I would use -- start using
a fragment shader, so here I've added this

00:48:05.560 --> 00:48:08.930
fragment shader, and what the fragment shader
does is that it looks at the current core

00:48:08.930 --> 00:48:16.190
unit of the rendering and will produce a darker
value in the center and a lighter value on

00:48:16.190 --> 00:48:19.810
the edges, and this gets combined with the
rendering and provides this very nice shading

00:48:19.810 --> 00:48:24.970
effect.

00:48:24.970 --> 00:48:30.370
And I mentioned earlier that passing parameter
was -- was a useful feature and a powerful

00:48:30.370 --> 00:48:36.619
feature in shaders, so here we have the same
-- the same shaders we had in the previous

00:48:36.619 --> 00:48:42.400
example, the one fold, and the vertex shader
and the fragment shader, but I'm now passing

00:48:42.400 --> 00:48:48.500
a parameter that controls the amount of folding
I do, and the more I fold, the more -- I mean,

00:48:48.500 --> 00:48:54.760
the bigger the amount, the bigger the effect,
and the bigger the shading in the center.

00:48:54.760 --> 00:48:58.880
So since this can be, you know, manipulated
through scripts, I have hooked up a little

00:48:58.880 --> 00:49:03.470
slider here, and if I go to the left, I'll
have less of the effect, and you see what

00:49:03.470 --> 00:49:09.380
-- how the code changes, and if I move to
the right, I'll go to the full extent of the

00:49:09.380 --> 00:49:10.480
-- of the effect.

00:49:10.480 --> 00:49:15.420
And there's no limit on which parameters you
pass and the type of parameters, the sophistication

00:49:15.420 --> 00:49:22.410
offers a wide variety of parameters, you can
pass, you know, matrices, colors, transforms,

00:49:22.410 --> 00:49:27.860
all kinds of things which can then be manipulated
through CSS and scripts as well, so it's pretty

00:49:27.860 --> 00:49:32.430
powerful things, and this is a simple example
but I'm hoping people will do real crazy things

00:49:32.430 --> 00:49:33.900
with the feature.

00:49:33.900 --> 00:49:41.700
I want to give a little taste of what the
code looks like.

00:49:41.700 --> 00:49:46.000
The syntax and the language that's used for
writing those little programs that will act

00:49:46.000 --> 00:49:52.230
on vertices or on pixel values, the language
is GLSL, so it's the same language that is

00:49:52.230 --> 00:49:55.040
used in Web GL for when you write shaders
for Web GL.

00:49:55.040 --> 00:50:00.080
The vertex shader, at the end of the day,
if you look at line 13, that is what a vertex

00:50:00.080 --> 00:50:01.100
shader does.

00:50:01.100 --> 00:50:07.310
The main function of the shader, which starts
on line 7, its whole role is to compute a

00:50:07.310 --> 00:50:15.580
GL position, and that's basically how you
want to displace the vertex that's being processed,

00:50:15.580 --> 00:50:19.210
and it's called once for every vertex.

00:50:19.210 --> 00:50:24.550
So if you want to learn more about GLSL, you
know, there are a lot of poll documentation

00:50:24.550 --> 00:50:30.760
on the Web for Web GL, but also for open GLES,
because that is the same exact language.

00:50:30.760 --> 00:50:31.860
It's -- you know, it's seal like.

00:50:31.860 --> 00:50:33.030
It's a little different.

00:50:33.030 --> 00:50:39.140
But it's not that hard, and there's lots of
examples to start from.

00:50:39.140 --> 00:50:45.360
Fragment shaders or pixel shaders, similarly
it's the same language as for GLSL.

00:50:45.360 --> 00:50:48.910
There's a slight difference -- actually not
that slight.

00:50:48.910 --> 00:50:56.010
There's a difference with regular fragment
shaders using Web GL or open GLES is the output

00:50:56.010 --> 00:50:59.070
of the filter is not a GL frag color.

00:50:59.070 --> 00:51:03.550
If you're a graphic expert, you're familiar
with that value, which is the typical role

00:51:03.550 --> 00:51:04.900
of a fragment shader.

00:51:04.900 --> 00:51:11.530
In our case, and for security reasons, what
we produce is a pixel value that is then combined

00:51:11.530 --> 00:51:13.500
with the rendered output.

00:51:13.500 --> 00:51:20.800
There has been a lot of work done on making
shaders secure, and the result of this was

00:51:20.800 --> 00:51:27.620
that with this modification we don't give
access to the rendered content to shaders,

00:51:27.620 --> 00:51:33.130
and as a result they are safe, and they can
still do all the, you know, the use cases

00:51:33.130 --> 00:51:35.140
that we've talked about so far.

00:51:35.140 --> 00:51:43.220
Now, we don't expect people to, you know,
write as many shaders as they will use shaders.

00:51:43.220 --> 00:51:47.770
We expect that, you know, we'll have, for
example, we plan to provide shaders that people

00:51:47.770 --> 00:51:50.250
can start experimenting with.

00:51:50.250 --> 00:51:56.830
We expect that experts will write nice shaders
with a set of well documented parameters that

00:51:56.830 --> 00:52:01.980
a lot of people can use, and one of the things
we've started to think about is, well, how

00:52:01.980 --> 00:52:07.020
can we make it easy for people to configure
a shader the way they want and make it look

00:52:07.020 --> 00:52:08.160
exactly right?

00:52:08.160 --> 00:52:13.260
So this is what the CSS shader studio does,
and I'll show you a few example of that--

00:52:13.260 --> 00:52:16.170
of that tool.

00:52:16.170 --> 00:52:19.369
So here we're in this prototype tool.

00:52:19.369 --> 00:52:25.590
It's not a -- it's not an application or a
tool that, you know, we would sell or anything.

00:52:25.590 --> 00:52:26.940
It's a demo tool.

00:52:26.940 --> 00:52:30.830
And on the left hand side you have a set of
shaders.

00:52:30.830 --> 00:52:36.130
When you select one, you -- the user interface
provides you the parameters that you can configure

00:52:36.130 --> 00:52:39.780
for the shader, so those are -- if you remember
the syntax, the parameters you pass at the

00:52:39.780 --> 00:52:42.060
end of the custom function.

00:52:42.060 --> 00:52:47.020
In the center you see a prototype like rendering
that's affected by the shader, and at the

00:52:47.020 --> 00:52:50.750
bottom, there's a time line that lets you
animate the different values for the shader.

00:52:50.750 --> 00:52:58.550
So, you know, before the presentation I prepared
one on the -- this warp shelter we have, and

00:52:58.550 --> 00:53:05.290
I set it up so that, you know, at time zero
I've set up the, you know, the warp the way

00:53:05.290 --> 00:53:12.900
I wanted with this little UI that lets me
move the vertices visually, and the end of

00:53:12.900 --> 00:53:15.070
the animation is restored to its state.

00:53:15.070 --> 00:53:19.970
Now, if I run it, you know, I will have kind
of a transition effect that -- I may want

00:53:19.970 --> 00:53:24.580
to put on my Web page when I'm shoring up
UP's of information, for example.

00:53:24.580 --> 00:53:29.540
There's all kinds of different effects you
could do.

00:53:29.540 --> 00:53:30.930
Scroll is one of my favorites.

00:53:30.930 --> 00:53:40.330
If I go back here, I pre-define it, if I move
the roll ratio, for example, I can do the

00:53:40.330 --> 00:53:46.770
effect I want, and again if I run it, it's
going to, you know, show me a preview of this

00:53:46.770 --> 00:53:48.460
type of effect I might want.

00:53:48.460 --> 00:53:53.970
I can also do things like shuffling tiles
for example.

00:53:53.970 --> 00:54:03.920
Here, where -- when I move, I can -- I can
kind of explode the content and that's because

00:54:03.920 --> 00:54:09.240
when I move the vertices of the -- you know,
on the vertex mash, I have the option of keeping

00:54:09.240 --> 00:54:14.690
them attached in which case it's like moving
a -- distorting a piece of rubber, but I have

00:54:14.690 --> 00:54:23.770
also the option of having detached tiles or
detached, you know, tiles on the rendering.

00:54:23.770 --> 00:54:29.430
And if I have many of them, I can have a nice
protocol effect like we're seeing here.

00:54:29.430 --> 00:54:34.640
So the idea here is to make it, you know,
a visual experience for, like you do when

00:54:34.640 --> 00:54:38.230
you're trying to create a grayed-in, except
it's a little more complicated in this case,

00:54:38.230 --> 00:54:42.210
and the tool will provide, you know, the nice
syntax that you can just cut and paste into

00:54:42.210 --> 00:54:50.010
your CSS page, your CSS file, and if you want
to do the animation effect itself, you can

00:54:50.010 --> 00:54:57.240
just grab it here, we export the exact syntax
that we need to go into the CSS file again.

00:54:57.240 --> 00:55:01.500
So hopefully that type of, you know, visual
tool will help.

00:55:01.500 --> 00:55:07.720
You know, people start using the feature,
and make it painless, and visually interesting

00:55:07.720 --> 00:55:08.720
to create them.

00:55:08.720 --> 00:55:14.310
So this tool is not yet available, but we're
planning to make it available later this year

00:55:14.310 --> 00:55:22.470
so that people can -- can look at it, and
experiment with shaders easily.

00:55:22.470 --> 00:55:25.550
All right.

00:55:25.550 --> 00:55:33.970
So another effect or visual effect that we're
working on is around texturing and blending.

00:55:33.970 --> 00:55:39.420
So blending is something that's very common
in graphic packages, like Photoshop or GIMP.

00:55:39.420 --> 00:55:47.740
The idea of texturing is to control how what
you draw blends or mixes with where you draw,

00:55:47.740 --> 00:55:51.870
so you draw something, and you want it to
interact with the backdrop.

00:55:51.870 --> 00:55:57.090
So currently we have opacity, so if I use
opacity on the menu like this, like at my

00:55:57.090 --> 00:56:02.770
"home, about, products" menu, I use opacity
and I kind of see the background behind, and

00:56:02.770 --> 00:56:07.830
that's nice, but it makes it a little washed
out, and it's not quite what you want.

00:56:07.830 --> 00:56:12.970
It's not quite what graphic designers want,
because they're used to those nice blend modes

00:56:12.970 --> 00:56:17.070
that they have in tools like Photoshop again.

00:56:17.070 --> 00:56:21.369
We're working on a new proposal -- it's actually
not that new proposal, it's a feature that

00:56:21.369 --> 00:56:27.320
has been in SVG for awhile, but it's now being
brought to the larger CSS and HTML, and it's

00:56:27.320 --> 00:56:33.109
CSS compositing and blending, and it can do
things like this, so now what I've done is

00:56:33.109 --> 00:56:39.990
I've turned on blend mode, it's a (inaudible)
mode, and the blue that I have now interacts

00:56:39.990 --> 00:56:44.320
in a different way with the background, and
just to show that this is not just images,

00:56:44.320 --> 00:56:48.840
you know, the way people do this kind of effect
today on the Web is that design it in Photoshop,

00:56:48.840 --> 00:56:53.660
they export a bunch of images and then they
put it on the -- on the page.

00:56:53.660 --> 00:56:59.890
Here I have the CSS animation on the color,
and you can see that the color animation happens

00:56:59.890 --> 00:57:05.820
and produces a new rendering for the menu
item, and that gets blended in with the background.

00:57:05.820 --> 00:57:10.980
I didn't have to scrub a thousand bit maps
to do so.

00:57:10.980 --> 00:57:16.710
Using, you know, blending and compositing
is made with two properties.

00:57:16.710 --> 00:57:17.710
It's extremely simple.

00:57:17.710 --> 00:57:19.690
I have two small demos.

00:57:19.690 --> 00:57:25.430
So what you see here in the backdrop is what
we're drawing on top of, and we're drawing

00:57:25.430 --> 00:57:29.180
this yellow bar on top of those three elements.

00:57:29.180 --> 00:57:31.090
The way you specify it is very straightforward.

00:57:31.090 --> 00:57:35.430
You have an alpha compositing property, and
by default it's source over, so a bit of a

00:57:35.430 --> 00:57:39.350
technical term; that just means draw what
I draw on top of the background.

00:57:39.350 --> 00:57:42.020
And that's -- you know, so far that's no surprise.

00:57:42.020 --> 00:57:48.020
But I have a bunch of options and, you know,
I can say I just want, you know -- sorry.

00:57:48.020 --> 00:57:55.460
Destination over, for example, will draw what
I'm drawing behind the backdrop.

00:57:55.460 --> 00:57:57.660
I can do source in, dust in.

00:57:57.660 --> 00:58:01.610
There's a bunch of different effects that
you can use that will combine in different

00:58:01.610 --> 00:58:06.620
ways with the background, so that's the first
of two properties.

00:58:06.620 --> 00:58:13.690
The second one is blend mode, so again, if
I'm trying to combine foreground and a background

00:58:13.690 --> 00:58:20.960
in various ways, I just use a blend mode property,
and by default it's normal, meaning that the

00:58:20.960 --> 00:58:22.520
colors don't interact.

00:58:22.520 --> 00:58:28.510
But I can change it to something like plus,
multiply, you know, color dodge or difference

00:58:28.510 --> 00:58:32.630
and have various effects, and those are exactly
the ones that you would find in graphic packages

00:58:32.630 --> 00:58:33.630
today.

00:58:33.630 --> 00:58:39.910
[ APPLAUSE ]
&gt;&gt;Vincent Hardy: Thank you.

00:58:39.910 --> 00:58:48.030
So, so far we've proposed all this and worked
with the community, the working groups in

00:58:48.030 --> 00:58:51.260
(inaudible) to bring this to CSS.

00:58:51.260 --> 00:58:57.020
We're working on possibly contributing this
or proposing this for canvas as well, and

00:58:57.020 --> 00:59:00.780
we've done a prototype of this I'll show quickly.

00:59:00.780 --> 00:59:09.300
It's in -- this is really blending edge prototype
we've done in FireFox, nicely build in FireFox,

00:59:09.300 --> 00:59:13.780
and what you see is basically the same concept
in canvas.

00:59:13.780 --> 00:59:20.130
At the bottom of the screen here, we have
the -- the code.

00:59:20.130 --> 00:59:26.270
I'm drawing two images, and the first one
is the background, which is a visual canvas,

00:59:26.270 --> 00:59:31.600
then I change the compositing operation to
be an overlay -- sorry, a multiply mode, blend

00:59:31.600 --> 00:59:37.700
mode, and I then draw this kind of colorful
graphics on top of it, and I get this better,

00:59:37.700 --> 00:59:42.070
nicer integration with my background, so this
is something that's, you know, again (inaudible)

00:59:42.070 --> 00:59:47.830
but we're considering offering this property
for different graphics model than canvas is.

00:59:47.830 --> 00:59:55.470
All right, so, the things we talked about
today is that the -- you know, the world of

00:59:55.470 --> 01:00:01.890
the Web developers and of creators has been
intersecting, you know, there's been features,

01:00:01.890 --> 01:00:06.440
but there's not been that many of them in
the past, and we're trying to increase that

01:00:06.440 --> 01:00:12.990
intersection between the two so that there's
a lot more happening on the Web and a lot

01:00:12.990 --> 01:00:17.590
more features available to developers, so
this is really the area we're focusing on

01:00:17.590 --> 01:00:24.359
now is, you know, trying to make this area
larger and try to provide more tools for this

01:00:24.359 --> 01:00:31.290
area, because we believe that if we do this,
we'll have a lot more exclusivity on the platform,

01:00:31.290 --> 01:00:37.030
meaning that you can express a lot more in
the markup in your CSS, or your HTML, that

01:00:37.030 --> 01:00:43.850
will make everybody more creative, and we
think there's an opportunity for a new generation

01:00:43.850 --> 01:00:49.650
of tools and new, you know, new ways of interacting
between creators and developers.

01:00:49.650 --> 01:00:51.440
So thank you very much for your attention.

01:00:51.440 --> 01:00:56.980
And if you have questions, we are probably
going to be able to take one or two, but we

01:00:56.980 --> 01:00:58.810
can also talk after the end of the sessions.

01:00:58.810 --> 01:00:59.810
Thank you very much.

01:00:59.810 --> 01:00:59.940
[ Applause ]

