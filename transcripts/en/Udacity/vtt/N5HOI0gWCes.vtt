WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
The easiest way to answer the quiz would just be to do that experiment.

00:00:04.000 --> 00:00:10.000
Let's try creating a set from the list where the element is the value 101,

00:00:10.000 --> 00:00:14.000
that's the number and that works okay.

00:00:14.000 --> 00:00:19.000
We'll do the second example as well, also, works okay.

00:00:19.000 --> 00:00:28.000
Now, we'll try the third one where the element of the set is itself a set.

00:00:28.000 --> 00:00:37.000
and now we get an error except for I got a different area than I expected which is that I called set here

00:00:37.000 --> 00:00:44.000
with three arguments and it expected at most 1, so let's try that again.

00:00:44.000 --> 00:00:53.000
We need to make a list of 1, 2, 3 as my set element and now I get a different kind of type error.

00:00:53.000 --> 00:00:59.000
This is that I've tried to use an unhashable type set as an element of my set

00:00:59.000 --> 00:01:02.000
and we can see that sets are unhashable.

00:01:02.000 --> 00:01:07.000
Another way to see that will be used the built-in hash operator.

00:01:07.000 --> 00:01:11.000
Hash takes an object and that's the 10 integer.

00:01:11.000 --> 00:01:24.000
For an integer, hash maps 101 to 101. If we hash hash browns, we get this big integer.

00:01:24.000 --> 00:01:28.000
If we hash some other string, we get a different one.

00:01:28.000 --> 00:01:31.000
There would be some other strings that would hash to the same value

00:01:31.000 --> 00:01:35.000
but it shouldn't be too easy to find.

00:01:35.000 --> 00:01:41.000
But when we do a hash on a set, we get an error because it's an unhashable type.

00:01:41.000 --> 00:01:49.000
It has no way to compute hash and since the value of a set can mutate,

00:01:49.000 --> 00:01:53.000
it will be dangerous to use them in a dictionary or in a set itself

00:01:53.000 --> 00:01:56.000
which is why we're not actually allowed to do that.

00:01:56.000 --> 00:02:01.000
The other two examples, we had a tuple which works okay.

00:02:01.000 --> 00:02:07.000
A tuple itself is immutable and we can see that t prints out as a tuple.

00:02:07.000 --> 00:02:15.000
We can access elements of it just like we could in a list, but we can't do assignment.

00:02:15.000 --> 00:02:19.000
As we solve the sets, well, that's not enough to know that it's immutable

00:02:19.000 --> 00:02:24.000
because set also doesn't allow item assignment but is mutable.

00:02:24.000 --> 00:02:30.000
The final one we had with set where the element is set itself.

00:02:30.000 --> 00:02:37.000
That's okay and we can see a printout telling us what set means here is the type set.

00:02:37.000 --> 00:02:42.000
Type is an object. We haven't talked about types in a formal way, in 101.

00:02:42.000 --> 00:02:45.000
They are very important part of understanding Python programs

00:02:45.000 --> 00:02:48.000
as you get to be a more advanced programmer.

00:02:48.000 --> 00:02:53.000
Everything in Python has a type. We can see that type by using type.

00:02:53.000 --> 00:03:04.000
So the type of a number is integer. The type of a string is the type string abbreviated str

00:03:04.000 --> 00:03:08.000
and the type of the result of set is a set.

00:03:08.000 --> 00:03:16.000
The type of set is the type type because set itself is a type and that's the type that set has.

00:03:16.000 --> 00:03:20.000
Things can get pretty confusing and we're getting a little bit sidetracked.

00:03:20.000 --> 00:03:23.000
So, we're going to go back to the question that we started with

00:03:23.000 --> 00:03:26.000
of figuring out what we can do with sets.

