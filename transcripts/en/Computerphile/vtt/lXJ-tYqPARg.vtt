WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:06.120
We have here an emulator for the
Cambridge EDSAC. It is a lot more

00:00:06.120 --> 00:00:11.160
user-friendly on this screen than it
would have been initially when, remember,

00:00:11.160 --> 00:00:15.030
you are dealing with five hole paper
tape. That's what your program went in on

00:00:15.030 --> 00:00:19.920
Your answers came back out on five-hole
paper tape, which it was your job to put

00:00:19.920 --> 00:00:23.850
through a teleprinter machine, which
chattered away, read your tape, and

00:00:23.850 --> 00:00:28.050
printed out the answers. Fortunately we
have the printed out answers shown in

00:00:28.050 --> 00:00:34.800
front of us. Here is the standard display
of this emulator, so handily written by

00:00:34.800 --> 00:00:39.090
our friend Martin Campbell-Kelly from
the University of Warwick. You can

00:00:39.090 --> 00:00:43.469
download this for yourself, it's free to
use, and just play with it to your

00:00:43.469 --> 00:00:45.840
heart's content.
And it's very nice to have the

00:00:45.840 --> 00:00:53.510
opportunity to play with a really
genuine early first-generation computer.

00:00:53.510 --> 00:00:58.859
&gt;&gt; Sean: We've been talking about John von
Neumann or Johnny von Neumann 
&gt;&gt; DFB: Call me Johnny!

00:00:58.859 --> 00:01:04.320
&gt;&gt; Sean: Call me Johnny. Yeah!
So EDSAC's being built in
Cambridge? But how does it end up getting

00:01:04.320 --> 00:01:08.580
connected to von Neumann? Is that what
we're going?
&gt;&gt; DFB: Yes, that's right. It's

00:01:08.580 --> 00:01:13.260
the other way around of course - that the
person who built EDSAC, Maurice

00:01:13.260 --> 00:01:17.490
Wilkes, exact contemporary of Alan Turing.
Both got first-class degrees in

00:01:17.490 --> 00:01:21.360
mathematics. He was the one, Maurice Wilkes, 
who went to

00:01:21.360 --> 00:01:27.750
John Von Neumann's Summer School, in 1946,
at the University of Pennsylvania, [in] the

00:01:27.750 --> 00:01:31.950
Moore School of Engineering.
Poor old Maurice had such difficulties with

00:01:31.950 --> 00:01:36.119
raising the money, with getting his
passport straight and all sorts of other

00:01:36.119 --> 00:01:42.600
issues, that he actually arrived four
weeks late, for a six-week course!  One has

00:01:42.600 --> 00:01:46.229
to remember, of course, in those days, it
was not straightforward. You were talking

00:01:46.229 --> 00:01:51.180
about ships, you know, going via Iceland,
and heaven knows where, and train

00:01:51.180 --> 00:01:55.140
journeys to finish off, down to
Pennsylvania. But anyway, I think he must

00:01:55.140 --> 00:02:00.840
have had - what was the technology? -  Roneo'd
or Cyclostyled notes - when he got

00:02:00.840 --> 00:02:06.299
there. He got copies of the notes and was
able to follow exactly what was going on,

00:02:06.299 --> 00:02:10.349
learned about the proposed 
von Neumann architecture, knew

00:02:10.349 --> 00:02:14.790
that there was going to be this thing
called EDVAC -  being built in Pennsylvania

00:02:14.790 --> 00:02:19.470
and he and all the other participants were
more or less I think, invited to go off, do your

00:02:19.470 --> 00:02:23.660
own thing, support the cause of general purpose,

00:02:23.660 --> 00:02:31.200
binary-based, digital computers; all
electronic, not electromechanical - for the

00:02:31.200 --> 00:02:38.220
inner electronics. And, in fact, it's worth
saying something about this whole

00:02:38.220 --> 00:02:43.650
business about "What did it cost you to
be all electronic in those days"? I would

00:02:43.650 --> 00:02:50.400
remind you that Tommy Flowers' decision,
with Max Newman, to build Colossus out of

00:02:50.400 --> 00:02:56.580
thermionic valves - that's vacuum tubes for
those of you still in North America ! -

00:02:56.580 --> 00:03:00.180
it did cost you. Yes, you could switch them on
and switch them off. You could use them as

00:03:00.180 --> 00:03:06.690
logic elements. But boy did they consume
electricity! And then, of course, you

00:03:06.690 --> 00:03:10.920
have to have air conditioning to get rid
of the heat that they'd produced!

00:03:10.920 --> 00:03:15.000
All the time what held things up was 
you wanted to use them as switching

00:03:15.000 --> 00:03:20.580
elements, but you really paid the price
in terms of power consumption. So Tommy

00:03:20.580 --> 00:03:27.150
Flowers and his special purpose Colossus
machine - six kilowatts. EDSAC, now  being

00:03:27.150 --> 00:03:33.690
rebuilt in Cambridge (correction: at Bletchley Park)
The EDSAC rebuild should go live this coming summer, 2018.

00:03:33.690 --> 00:03:38.160
Watch out for that. A good time to visit
the National Museum of Computing which

00:03:38.160 --> 00:03:43.950
is co-located on the Bletchley Park site.
Power consumption of EDSAC? 11 kilowatts.

00:03:43.950 --> 00:03:49.019
For comparison:  power consumption of
ENIAC the gunnery-trajectory 

00:03:49.019 --> 00:03:54.600
special-purpose computer 1946, University
of Pennsylvania, USA. I bet you can't

00:03:54.600 --> 00:04:01.380
remember the number, Sean! It's horrifying!
&gt;&gt; Sean: 20? 
&gt;&gt; DFB: 150 kilowatts! All of that using

00:04:01.380 --> 00:04:08.070
thermionic valves for the logic elements
inside your computer yes that could

00:04:08.070 --> 00:04:11.130
certainly be done. The big problem was memory.

00:04:11.130 --> 00:04:16.109
There was really no obvious technology
for memory. You get round it on the

00:04:16.109 --> 00:04:20.510
Colossus machine by saying well your
data, which you want to remember, just

00:04:20.510 --> 00:04:27.139
cycles around on a continuous loop [of paper tape]
The program - well that's easy, that's not

00:04:27.139 --> 00:04:32.360
on tape because that is such a
special purpose machine you key in the

00:04:32.360 --> 00:04:38.449
program on switches  -  uniselectors - so
your memory there (for your data)  was

00:04:38.449 --> 00:04:43.310
paper tape. But if you didn't want paper
tape whizzing round at 30 miles an hour

00:04:43.310 --> 00:04:48.740
what other options were available to you?
And the answer is - not many. And as we'll

00:04:48.740 --> 00:04:54.620
find out, on EDSAC, with Maurice Wilkes
coming out of a radar background, he knew

00:04:54.620 --> 00:04:59.900
that in the early days of radar, when
pulses came along - and these are

00:04:59.900 --> 00:05:04.789
interesting pulses could it be an
approaching German bomber - you wanted to

00:05:04.789 --> 00:05:08.930
not only get hold of the pulse but to
hang on to it, and remember it, so you

00:05:08.930 --> 00:05:12.530
could analyze its shape and  so on
And the way they did that is the most

00:05:12.530 --> 00:05:18.169
amazing technology. It's called mercury
delay lines. The bleep pulse that you get

00:05:18.169 --> 00:05:23.419
was put, basically, through a little
loudspeaker so it went "bleep". But instead

00:05:23.419 --> 00:05:27.680
of transmitting through air, so you could
hear it, it was transmitted down a column

00:05:27.680 --> 00:05:33.500
of mercury. Why? Because sound travels a
lot slower in mercury than it does in

00:05:33.500 --> 00:05:39.650
air and at the other end there was a
microphone, at the other end of your tube,

00:05:39.650 --> 00:05:45.380
which heard the bleep and displayed it
on an oscilloscope screen for you. But

00:05:45.380 --> 00:05:50.270
then recycled it - took it back to the
start of the mercury tube and sent it

00:05:50.270 --> 00:05:55.699
down again so you had a continuously
circulating system that showed you what

00:05:55.699 --> 00:06:01.820
your pulses were and the idea was to use
that same technology to represent the

00:06:01.820 --> 00:06:08.150
0s and 1s in computer memory, which
they did. It was not very satisfactory, in

00:06:08.150 --> 00:06:11.479
so many ways, but you just had to do your best.

00:06:11.479 --> 00:06:16.400
&gt;&gt; Sean: Presumably it deteriorate didn't it,
this sound ... ?
&gt;&gt; DFB: No, because when you 

00:06:16.400 --> 00:06:19.610
detected it, at the other end, you
amplified it before you fed it back

00:06:19.610 --> 00:06:24.530
again. So you could keep the purity of
the pulse going for as long as you

00:06:24.530 --> 00:06:30.259
wanted to. That was the idea. So, the story
continues. Maurice Wilkes came back to

00:06:30.259 --> 00:06:36.440
England and in a testament, really, to
Cambridge's being fairly well-heeled

00:06:36.440 --> 00:06:41.870
and to their faith in Maurice
and to their need to be at the forefront of all

00:06:41.870 --> 00:06:48.290
this stuff, they - by "they" I mean the
University and the Mathematics

00:06:48.290 --> 00:06:53.300
Department at Cambridge - agreed to
bankroll Maurice to build one of these

00:06:53.300 --> 00:06:58.220
new-fangled machines provided that when
it was completed it could offer a

00:06:58.220 --> 00:07:04.040
service to the University. This is very
different to what happened in most of

00:07:04.040 --> 00:07:09.070
the universities, where electronics
engineers were just allowed to build

00:07:09.070 --> 00:07:13.250
systems where you [the engineers] just played with them,
and didn't really offer a computing

00:07:13.250 --> 00:07:17.390
service to the community at all. They were
just pure research machines. Maurice found

00:07:17.390 --> 00:07:21.410
himself a very good hardware engineer
called Bill Renwick

00:07:21.410 --> 00:07:27.520
who was just excellent. You had to have
this. You had to have a real devoted

00:07:27.520 --> 00:07:31.220
electronics engineer, who knew what they
were doing, to get all of this working.

00:07:31.220 --> 00:07:34.940
When you look at it you've got this box
- it's hardware, you've got to get it

00:07:34.940 --> 00:07:39.110
working. You've got to get instructions
in it; you've got to make it work but you

00:07:39.110 --> 00:07:42.890
need a software person. And you need the
world's first ever system-software

00:07:42.890 --> 00:07:48.560
person - and they'd better be good! Somehow
these people seem to come along, as and

00:07:48.560 --> 00:07:52.160
when they're needed, I can never
understand quite why. And the answer at

00:07:52.160 --> 00:07:57.140
Cambridge was a really talented person
- who I did know but rather slightly -

00:07:57.140 --> 00:08:03.650
called David - David Wheeler. We can now
say that as part of the celebrations

00:08:03.650 --> 00:08:08.840
this summer, when the EDSAC rebuild is
switched on and works perfectly(!) ... To go

00:08:08.840 --> 00:08:12.920
along with that a very good friend of
ours on Computerphile, Professor Martin

00:08:12.920 --> 00:08:18.470
Campbell-Kelly, developed an emulation of
EDSAC and how it works. So, rather than

00:08:18.470 --> 00:08:22.850
talking in abstract about EDSAC let's
get stuck in and run some programs on

00:08:22.850 --> 00:08:28.460
EDSAC and see what you're up against
with a very genuine first-generation

00:08:28.460 --> 00:08:33.890
machine where you will program in the crudest

00:08:33.890 --> 00:08:38.960
and most brain damaging form of
assembler you can imagine. And you've got

00:08:38.960 --> 00:08:45.140
to get it right. It is not easy to debug
EDSAC programs. It can be done but you

00:08:45.140 --> 00:08:49.790
know it's hardcore stuff. You want to be a
pioneer? This is what you get! I think

00:08:49.790 --> 00:08:52.020
what I'll do is first of all, just for fun,

00:08:52.020 --> 00:08:56.790
let's run some programs and get the feeling
for how nice it is to mess about, even on

00:08:56.790 --> 00:09:00.990
a very early machine like that. For those
of you interested afterwards what is of

00:09:00.990 --> 00:09:06.060
great computer science technical
interest is: how on earth do you boot

00:09:06.060 --> 00:09:09.750
this thing up so it can read in your
program? In other words it's not got a

00:09:09.750 --> 00:09:14.610
BIOS - it's far too early for that. But
what was the equivalent of the BIOS? What

00:09:14.610 --> 00:09:18.150
was it that got you started? That you
had to have there even to be able to

00:09:18.150 --> 00:09:21.840
read in a paper tape - well that's called
Initial Orders - we'll do those later.

00:09:21.840 --> 00:09:29.510
For the moment we'll just accept that
Initial Orders version 2 is the one that

00:09:29.510 --> 00:09:37.590
is relevant here. And I've used Initial
Orders to load in a program that was

00:09:37.590 --> 00:09:41.910
written by an early pioneer called Sandy
Douglas. Here's his name A. S. Douglas

00:09:41.910 --> 00:09:52.980
If I load in that program now by "Start".
Here and this really is EDSAC but this

00:09:52.980 --> 00:09:58.860
was an oscilloscope screen. This is the
so called `display' of the Long Tank, with

00:09:58.860 --> 00:10:07.800
a long tank of mercury which held
roughly a kiloword -  1024 18-bit memory

00:10:07.800 --> 00:10:15.900
words were held in mercury. So it's like
1K words, a few Kbytes, that was

00:10:15.900 --> 00:10:21.180
your limit. OK, so once you got used to
reading these oscilloscope screens - and

00:10:21.180 --> 00:10:26.640
remember this oscilloscope screen is not
the memory itself it's `peeping' at the

00:10:26.640 --> 00:10:32.610
memory by having a little monitor, as it
were, checking the pulses in the mercury

00:10:32.610 --> 00:10:35.940
tank and displaying them on the
oscilloscope. And remember and give

00:10:35.940 --> 00:10:38.190
thanks for the fact that this 
LOADING PLEASE WAIT

00:10:38.190 --> 00:10:42.870
"EDSAC / User first Dial 0/1", now comes back at
you, courtesy of Martin [Campbell-Kelly] in a clearly

00:10:42.870 --> 00:10:46.320
visible screen. In the good old days
it would probably have come back to you on

00:10:46.320 --> 00:10:50.520
paper tape, or something, and you would
have to go and print it off to get your

00:10:50.520 --> 00:10:55.140
results. But this is pretty well
interactive. On this dial here, on the

00:10:55.140 --> 00:11:00.000
console, do we want EDSAC to go
first or User to go first? Well, the game

00:11:00.000 --> 00:11:04.050
we're playing here is one known in the
US and elsewhere as tic-tac-toe,

00:11:04.050 --> 00:11:10.230
known in the UK as noughts and crosses.
But simple. I think everybody knows the

00:11:10.230 --> 00:11:13.680
rules and I think everybody pretty well
knows that if you play optimally it's

00:11:13.680 --> 00:11:17.519
always a draw. 
&gt;&gt; Sean: I have a feeling there's a Numberphile
[video] on it somewhere ...

00:11:17.519 --> 00:11:21.540
&gt;&gt; DFB: There must be a Numberphile on it somewhere 
Yes, you can always force a draw so should we

00:11:21.540 --> 00:11:26.760
do ... first of all we'll take the lead and
force a draw? So EDSAC or User first?

00:11:26.760 --> 00:11:32.519
Well, we'll say User first so I dial 1.
Now, let's what see what happens.

00:11:32.519 --> 00:11:36.750
Oh! look at that! The cathode-ray tube
display has been altered by the

00:11:36.750 --> 00:11:40.430
program to actually show the grid that
we're going to play tic-tac-toe on. And

00:11:40.430 --> 00:11:46.769
because it's me, the User first, it's now
saying, to me, `dial my move'. Now, here's

00:11:46.769 --> 00:11:50.100
the key at the top [of the display]. Look, 
9 8 7 6 5 4 3 2 1. Those are

00:11:50.100 --> 00:11:55.170
the areas on the tic-tac-toe board and,
as we all know I think, optimal strategy

00:11:55.170 --> 00:12:01.680
is to grab the centre one first of all,
yeah, and then EDSAC's responded by putting

00:12:01.680 --> 00:12:07.950
a 0 in at the top left. I'm going to
respond by - knowing it's a number - to

00:12:07.950 --> 00:12:17.130
dial in 7.  Now I should ... you think
that's a slow response? Was EDSAC really

00:12:17.130 --> 00:12:24.089
that slow? Hmm!  that is six times faster than
EDSAC was. I've calibrated it. This

00:12:24.089 --> 00:12:29.790
emulator on this machine seems terribly
slow but it's running six times faster

00:12:29.790 --> 00:12:34.950
than EDSAC did. Right at the very end
I may allow myself, if you want to be

00:12:34.950 --> 00:12:39.029
shocked and horrified, to click the thing,
up here, that says "Real Time". That will

00:12:39.029 --> 00:12:43.350
slow it down so that it really is as
slow as EDSAC was ...  
&gt;&gt; Sean: Why don't we do that now?

00:12:43.350 --> 00:12:47.220
&gt;&gt; DFB: Let's do that now ...
&gt;&gt; Sean: After you make your move let's 
see how slowly there

00:12:47.220 --> 00:12:50.040
Would there have been one of those dials .... 
that looks like an old telephone dial?

00:12:50.040 --> 00:12:54.930
&gt;&gt; DFB: It is an old  telephone dial. And I think that 
was there for diagnostic purposes on the actual EDSAC, yes.

00:12:54.930 --> 00:12:57.480
We're trying to win this aren't we ?

00:12:57.480 --> 00:13:02.970
9 8 7 6 isn't it?  I put an X in there
Otherwise the wretched machine's gonna win.

00:13:02.970 --> 00:13:08.519
Was that slower? 
&gt;&gt; Sean: Oh yes!
&gt;&gt; DFB: I think it was, 
But look it's blocked me there. It's doing

00:13:08.519 --> 00:13:16.040
the right thing. So I put in an X at 8. 
There we go.

00:13:16.040 --> 00:13:21.830
&gt;&gt; Sean: It's definitely slower. 
&gt;&gt; DFB:  Definitely slower,
And good old Sandy's program has already

00:13:21.830 --> 00:13:27.860
told me, it's a drawn game. So let's
load up from the library .. ah!

00:13:27.860 --> 00:13:32.510
Conway! OK, well I think we all know
about Conway's game of "Life"? There are

00:13:32.510 --> 00:13:37.339
these sets of dots and there are various
rules about a dot in the middle either

00:13:37.339 --> 00:13:44.450
been overcrowded - with too many dots
around it - or getting all lonely and out

00:13:44.450 --> 00:13:48.649
on a limb, and dying off. But in the
middle, if it's just got the right number

00:13:48.649 --> 00:13:55.329
of friends then they breed and they
spawn off more things. It was a very popular

00:13:55.329 --> 00:13:59.660
invention by John Conway in ... was it the 70s 
or the 80s ? ... somewhere around there.

00:13:59.660 --> 00:14:04.610
And everybody was playing Life
using pencil and paper methods, or using

00:14:04.610 --> 00:14:09.890
computers latterly of course. Now this [program]
was not written actually at the time of EDSAC's

00:14:09.890 --> 00:14:15.860
unveiling in 49 - because `Life' hadn't been invented (!)
But somebody, later on, with this

00:14:15.860 --> 00:14:21.410
simulator in in mind, and in view, has
actually written Conway's `Life' to

00:14:21.410 --> 00:14:29.000
display here for us. So let us load this
thing in. It's by Ian Gillman, written in 1998,

00:14:29.000 --> 00:14:35.660
and the rule is on this emulator, for
those of you that download it, the program

00:14:35.660 --> 00:14:40.520
you are displaying is the one that will
get loaded, and run, when you press `Start'.

00:14:40.520 --> 00:14:45.079
So just keep your program windows in the
correct order, one on top of another, and

00:14:45.079 --> 00:14:49.640
the one at the top is the one that will
load. So, we'll load it up with Start

00:14:49.640 --> 00:14:55.610
Takes quite a while to load things. It's
quite a complicated program. Ah! now, it's

00:14:55.610 --> 00:15:01.670
started calculating now. This is the
initial configuration; it warns you here

00:15:01.670 --> 00:15:07.760
[that] each generation takes about five EDSAC
minutes. Now I have not put it onto real

00:15:07.760 --> 00:15:12.769
EDSAC slow time. I've put it on to six times
faster simulator time. Again, all

00:15:12.769 --> 00:15:21.589
according to Conway's rules it will ...
Look! It's gone! It's changed; new generation.

00:15:21.589 --> 00:15:27.580
So, I think my rule is about right. It is
roughly 5 to 6 times faster here,

00:15:27.580 --> 00:15:29.950
because it's taking around about a minute.

00:15:29.950 --> 00:15:36.310
I just daren't put it onto real time EDSAC
&gt;&gt; Sean: We'd run out of tape 
&gt;&gt; DFB: We'd run out of tape!

00:15:36.310 --> 00:15:39.610
But anyway so 
&gt;&gt; Sean: I can see a clock on the right that 
looks like it's going

00:15:39.610 --> 00:15:44.800
a bit fast is that ....
&gt;&gt; DFB: I think that's trying
to show you genuine EDSAC time. So, if on

00:15:44.800 --> 00:15:49.510
this simulator it's 5 or 6 times
faster than real EDSAC would be it's

00:15:49.510 --> 00:15:53.380
therefore making the clock go six
times faster, I think, to show you how

00:15:53.380 --> 00:15:57.730
many elapsed minutes it would have taken
on EDSAC 
&gt;&gt; Sean: Down at the bottom there I can see

00:15:57.730 --> 00:16:00.280
a lot of flickering and flashing that's
all the calculation? 
&gt;&gt; DFB: That's all the

00:16:00.280 --> 00:16:04.450
calculation. This is showing you - see, look -
you've got a multiplier register in your

00:16:04.450 --> 00:16:08.890
CPU, you've got the thing you're
multiplying by; you've got the answer

00:16:08.890 --> 00:16:13.210
which comes out in the accumulator. Even
modern chips have an accumulator for

00:16:13.210 --> 00:16:19.420
your current arithmetical answer. Right?
The SVT here is showing you the address

00:16:19.420 --> 00:16:23.950
of the current instruction and the
actual bit pattern for the current

00:16:23.950 --> 00:16:28.180
instruction, that has been decoded and
executed, is shown in the so-called order

00:16:28.180 --> 00:16:33.520
tank. So, that's the instruction register;
that's the pointer telling you where

00:16:33.520 --> 00:16:37.600
from memory you've taken that
instruction and it's a pretty minimal

00:16:37.600 --> 00:16:43.780
CPU. The thing we notice here is
there are virtually no general-purpose

00:16:43.780 --> 00:16:48.640
registers, which is what you're given in a
modern CPU. So I think that's a pretty

00:16:48.640 --> 00:16:54.250
good one actually to illustrate with. We
can stop it off now. So I hope this has

00:16:54.250 --> 00:16:57.790
convinced a fair number of you -
particularly those of you very keen on

00:16:57.790 --> 00:17:02.110
history of computing and low-level
programming in general - that it's a

00:17:02.110 --> 00:17:09.280
testament really to the very spartan
architecture of EDSAC - you know, cut

00:17:09.280 --> 00:17:12.700
everything down to the bare minimum; get
it working; it's got to give a service.

00:17:12.700 --> 00:17:18.820
And that means that it has stood the test of
time. It's worth rebuilding. People could

00:17:18.820 --> 00:17:23.530
finally ease relatively easy to do a
good emulator for it and that in a sense

00:17:23.530 --> 00:17:28.390
has made it worthwhile to rebuild at
Bletchley Park. So you can be part of

00:17:28.390 --> 00:17:32.890
this. Get hold of Martin's emulator. Enjoy
yourself. 

00:17:32.890 --> 00:17:38.820
Write ultra-low level programs for
EDSAC. Oh! and remember when you're

00:17:38.820 --> 00:17:44.280
doing it that the actual pseudo-tape you
type up in the end

00:17:44.280 --> 00:17:49.230
although on these program listings
you're allowed to put comments on -

00:17:49.230 --> 00:17:53.420
because you're a weak human who needs to
remind yourself of why you're doing that -

00:17:53.420 --> 00:18:00.390
when you actually key in the tape itself
that backs this up there must be no

00:18:00.390 --> 00:18:06.150
comments, no extraneous characters, only
white-space is permitted. So there you are,

00:18:06.150 --> 00:18:10.830
anyway enjoy yourselves. And the next
video is basically saying how on earth

00:18:10.830 --> 00:18:18.690
do we get this thing to boot ?!

