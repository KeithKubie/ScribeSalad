WEBVTT
Kind: captions
Language: en

00:00:08.320 --> 00:00:10.870
Hi, my name is Reto Meier, and
I'm the tech lead for Google's

00:00:10.870 --> 00:00:13.030
Android Developer
Relations team.

00:00:13.030 --> 00:00:15.090
In order to minimize the battery
drain associated data

00:00:15.090 --> 00:00:18.310
transfers, it's good practice to
use the big cookie model to

00:00:18.310 --> 00:00:20.780
batch and bundle transfers
using sync adaptors and

00:00:20.780 --> 00:00:24.190
eliminate unnecessary polling
with Google Cloud Messaging.

00:00:24.190 --> 00:00:26.550
Having moved all of your
transfers into as few batches

00:00:26.550 --> 00:00:29.110
as possible, this Dev Byte will
look at ways to reduce

00:00:29.110 --> 00:00:31.870
the overall size of the cookie,
that is, to transfer

00:00:31.870 --> 00:00:34.330
as little data as possible and
drain as little battery as

00:00:34.330 --> 00:00:37.410
possible each time we do
have to do a transfer.

00:00:37.410 --> 00:00:40.340
The most fundamental way to
reduce your downloads is to

00:00:40.340 --> 00:00:42.370
download only what you need.

00:00:42.370 --> 00:00:45.560
Start by using REST APIs that
let you perform filtering on

00:00:45.560 --> 00:00:48.240
the server using parameters
that allow you to indicate

00:00:48.240 --> 00:00:50.950
when your last update occurred
or what the last items you

00:00:50.950 --> 00:00:52.510
received were.

00:00:52.510 --> 00:00:55.390
This ensures that you only end
up downloading new stuff.

00:00:55.390 --> 00:00:57.770
Similarly, it's good practice
to reduce bandwidth by

00:00:57.770 --> 00:01:00.320
performing any operations likely
to shrink the size of

00:01:00.320 --> 00:01:02.450
your payload on the server.

00:01:02.450 --> 00:01:04.830
Techniques like GZIP compression
are one solution,

00:01:04.830 --> 00:01:07.340
as is server-side reduction
of image sizes.

00:01:07.340 --> 00:01:11.570
Why download a wallpaper, only
to shrink it into a thumbnail?

00:01:11.570 --> 00:01:13.870
It's also generally more
efficient to maximize your

00:01:13.870 --> 00:01:15.680
utilization of network
connections.

00:01:15.680 --> 00:01:17.610
So rather than creating
multiple simultaneous

00:01:17.610 --> 00:01:19.930
connections to download data,
or chaining multiple

00:01:19.930 --> 00:01:22.540
consecutive get requests, when
possible, you should bundle

00:01:22.540 --> 00:01:24.690
these requests into
a single get.

00:01:24.690 --> 00:01:27.430
When it comes to cell radio
transfers, a bazooka is more

00:01:27.430 --> 00:01:29.270
efficient than a shotgun.

00:01:29.270 --> 00:01:31.840
It's also best practice to
reuse existing network

00:01:31.840 --> 00:01:33.850
connections, rather than
initiating new ones.

00:01:33.850 --> 00:01:36.340
Reusing connections also allows
the network to more

00:01:36.340 --> 00:01:39.100
intelligently react to
congestion and related network

00:01:39.100 --> 00:01:40.300
data issues.

00:01:40.300 --> 00:01:42.860
Wireless radios need to be
active to transmit the

00:01:42.860 --> 00:01:44.800
termination and termination
acknowledgement packets

00:01:44.800 --> 00:01:47.170
associated with server
and client timeouts.

00:01:47.170 --> 00:01:49.350
So it's also good practice to
close your connections when

00:01:49.350 --> 00:01:51.480
they aren't in use, rather
than waiting for these

00:01:51.480 --> 00:01:54.140
timeouts to extinguish
by themselves.

00:01:54.140 --> 00:01:56.070
That said, closing a connection
too early can

00:01:56.070 --> 00:01:59.220
prevent it from being reused,
which then requires additional

00:01:59.220 --> 00:02:01.050
overhead for establishing
a new connection.

00:02:01.050 --> 00:02:03.670
A useful compromise is to
not close the connection

00:02:03.670 --> 00:02:05.840
immediately but to still
close it before the

00:02:05.840 --> 00:02:08.039
inherent timeout expires.

00:02:08.039 --> 00:02:09.320
Finally, cache aggressively.

00:02:09.320 --> 00:02:12.770
You can maintain a cache in
shared storage within the

00:02:12.770 --> 00:02:15.450
external cache directory or
manage a smaller cache in your

00:02:15.450 --> 00:02:17.460
application sandbox.

00:02:17.460 --> 00:02:19.330
Anything stored in the external
cache can be deleted

00:02:19.330 --> 00:02:21.720
by the system if it's running
low on space, whereas you are

00:02:21.720 --> 00:02:23.890
responsible for managing
the data stored in your

00:02:23.890 --> 00:02:25.600
application cache.

00:02:25.600 --> 00:02:28.170
In a lot of cases, you can
determine when you should

00:02:28.170 --> 00:02:31.440
perform your next update by
inspecting the HTTP response

00:02:31.440 --> 00:02:32.830
headers of your downloads.

00:02:32.830 --> 00:02:36.060
This is particularly useful
for the static, or almost

00:02:36.060 --> 00:02:38.230
static, resources like images.

00:02:38.230 --> 00:02:39.850
Looking at the header response,
you can determine

00:02:39.850 --> 00:02:42.210
the time the downloaded data was
changed and when it will

00:02:42.210 --> 00:02:45.090
expire, allowing you to schedule
your cache refreshes

00:02:45.090 --> 00:02:46.810
accordingly.

00:02:46.810 --> 00:02:50.190
To make your life easier,
Android 4.0 introduced a HTTP

00:02:50.190 --> 00:02:54.030
response cache to the HTTP URL
connection class that handles

00:02:54.030 --> 00:02:56.610
this caching for you, inspecting
headers and

00:02:56.610 --> 00:02:59.260
contacting the server only when
cache is expired or data

00:02:59.260 --> 00:03:01.490
doesn't exist locally.

00:03:01.490 --> 00:03:03.730
Throughout this series of Dev
Bytes on efficient data

00:03:03.730 --> 00:03:06.600
transfers, we've explored how
the cell radio works and how

00:03:06.600 --> 00:03:08.440
its state machine can
affect the battery

00:03:08.440 --> 00:03:10.510
efficiency of your apps.

00:03:10.510 --> 00:03:12.210
Armed with that knowledge, you
learned to analyze your

00:03:12.210 --> 00:03:14.510
network traffic and use
techniques like prefetching,

00:03:14.510 --> 00:03:17.100
batching, and bundling,
supported by sync adapters and

00:03:17.100 --> 00:03:19.890
Google Cloud Messaging, to make
your apps more efficient.

