WEBVTT
Kind: captions
Language: en

00:00:00.325 --> 00:00:04.225
So we've seen how to use recursive definitions to make words and to define concepts like ancestors

00:00:04.325 --> 00:00:08.541
Now we are gonna see how to use recursive definitions to define a procedure

00:00:08.541 --> 00:00:12.892
and we are gonna start with a procedure that we already defined in Unit 2

00:00:12.892 --> 00:00:14.525
We defined the factorial procedure

00:00:14.525 --> 00:00:20.743
and we defined factorial as the numbers of ways that we can order n items

00:00:20.743 --> 00:00:22.693
and the input is the number n

00:00:22.693 --> 00:00:29.844
and that could be calculated by multiplying n times n-1 times n-2 and so on

00:00:29.844 --> 00:00:31.776
until we get down to the 1

00:00:31.776 --> 00:00:36.859
So that definition is not very precise mathematically

00:00:36.859 --> 00:00:41.326
and the problem with this as a mathematical definition is it got these dot dot dot in it

00:00:41.326 --> 00:00:46.059
and human sort of understand that correctly what that dot dot dot means

00:00:46.059 --> 00:00:49.026
but it's not a very precise mathematical definition

00:00:49.026 --> 00:00:53.710
If we use a recursive definition, we can define factorial in a much more precise way

00:00:53.710 --> 00:00:56.825
and we need to do that by giving a base case

00:00:56.875 --> 00:01:01.475
So for the base case, we wanna think about the simplest input

00:01:01.475 --> 00:01:03.392
something that we already know the answer

00:01:03.392 --> 00:01:07.493
And for factorial and for many procedures that involve numbers

00:01:07.493 --> 00:01:09.909
the simplest input is the number 0

00:01:09.909 --> 00:01:12.275
So if we try factorial 0

00:01:12.275 --> 00:01:17.160
the number of ways to arrange 0 things is defined as 1

00:01:17.160 --> 00:01:19.026
So we know that result

00:01:19.026 --> 00:01:21.042
That's gonna be our base case

00:01:21.992 --> 00:01:25.659
Now all we need to do is define the recursive case

00:01:25.659 --> 00:01:30.708
where we want to define what's the meaning of factorial for any number n is

00:01:30.708 --> 00:01:34.574
where n is any integer greater than 0

00:01:34.574 --> 00:01:41.241
And we can define that in terms of the factorial of the smaller numbers

00:01:41.241 --> 00:01:44.725
So if you look at this definition with the dot dot dot

00:01:44.725 --> 00:01:51.709
where we see that the factorial of n is n times n-1 and so forth

00:01:51.709 --> 00:01:56.642
Well, this what we have here is actually the factorial of n-1

00:01:56.642 --> 00:02:03.261
So that means that we can define the factorial of n as n times the factorial of n-1

00:02:03.261 --> 00:02:05.993
and that's our recursive case

00:02:05.993 --> 00:02:09.810
And this definition matches our intuition well

00:02:09.810 --> 00:02:14.459
if we think about factorial meaning the number of ways to arrange n objects

00:02:14.459 --> 00:02:16.792
This corresponds exactly to the way we think about this

00:02:16.792 --> 00:02:18.808
that we have n ways to pick the first item

00:02:18.808 --> 00:02:23.375
and once we picked the first item, well we have n（actually he means n-1） items left

00:02:23.375 --> 00:02:28.926
and factorial n-1 gives us the number of ways to arrange the remaining n-1 items

00:02:28.926 --> 00:02:31.426
So that's the way to define this mathematically

00:02:31.426 --> 00:02:35.825
So now I will leave it to you as a quiz to figure out how to define a procedure

00:02:35.825 --> 00:02:39.025
that computes factorial without using a while loop

