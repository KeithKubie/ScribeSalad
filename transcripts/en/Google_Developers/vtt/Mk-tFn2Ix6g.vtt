WEBVTT
Kind: captions
Language: en

00:00:07.279 --> 00:00:08.960
&gt;&gt;Paul Irish: Cool.

00:00:08.960 --> 00:00:10.650
All right, guys.

00:00:10.650 --> 00:00:15.250
My name is Paul Irish and I am a developer
advocate on the Chrome team.

00:00:15.250 --> 00:00:17.930
I want to talk a little bit about tooling.

00:00:17.930 --> 00:00:23.630
So this is about building Web apps, finding
the right software to make your process of

00:00:23.630 --> 00:00:28.980
building Web apps fun, awesome, enjoyable,
less stressful, more productive, things like

00:00:28.980 --> 00:00:29.980
that.

00:00:29.980 --> 00:00:33.850
Now, I'm going to talk a little bit about
kind of how we're building Web apps today

00:00:33.850 --> 00:00:37.290
and how I think we can build them in the future,
but for a second I want to take a few steps

00:00:37.290 --> 00:00:44.070
back and walk back a few years, back to 2006
because this is the year that I wrote like

00:00:44.070 --> 00:00:50.120
my first website where I was like doing all
the right things when it came to Web standards.

00:00:50.120 --> 00:00:54.941
And I felt so good about the way that I was
doing it, so I was actually here and I did

00:00:54.941 --> 00:01:00.979
something probably like this, and I was doing
a little bit of this and then this and then

00:01:00.979 --> 00:01:04.690
that and then that and that, da, da...

00:01:04.690 --> 00:01:06.280
This is typical, right?

00:01:06.280 --> 00:01:11.180
[Laughter]
&gt;&gt;Paul Irish: Oh, there we go.

00:01:11.180 --> 00:01:12.180
Nice!

00:01:12.180 --> 00:01:13.180
Cool.

00:01:13.180 --> 00:01:16.079
[ Applause ]
&gt;&gt;Paul Irish: All right.

00:01:16.079 --> 00:01:18.800
I'm really glad we don't have to type that
out anymore.

00:01:18.800 --> 00:01:20.439
That's really nice.

00:01:20.439 --> 00:01:25.659
But this is like -- so what I actually did
is when I made this site, and it turned out

00:01:25.659 --> 00:01:30.320
to be really nice, I did the whole thing in
Notepad.

00:01:30.320 --> 00:01:39.149
And I think we consider it a little funny
now that I would write like pretty significant

00:01:39.149 --> 00:01:48.140
site in Notepad, but at the time I was like,
"I'm a craftsman over my markup and I will

00:01:48.140 --> 00:01:53.979
be one with it, and the closest I can be in
it is in Notepad exe."

00:01:53.979 --> 00:01:55.509
So I just used that.

00:01:55.509 --> 00:01:57.659
And it just seems kind of silly.

00:01:57.659 --> 00:02:03.299
I thought I was so close to it, but really
it's not really craftsmanship.

00:02:03.299 --> 00:02:04.299
That was handcraft.

00:02:04.299 --> 00:02:10.070
That was like the Web's development equivalent
to whittling a stick.

00:02:10.070 --> 00:02:17.120
And handcraft is more about choosing tools
well, finding the right tools to get the job

00:02:17.120 --> 00:02:19.769
done and assist you.

00:02:19.769 --> 00:02:26.470
And I noticed this too, I started at Google
about two years ago, and looking around when

00:02:26.470 --> 00:02:31.290
you're surrounded by really smart people,
and you notice what the really productive

00:02:31.290 --> 00:02:32.750
developers do.

00:02:32.750 --> 00:02:37.819
And they know their -- they have tools that
they use, they know them really well, and

00:02:37.819 --> 00:02:38.819
they embrace them.

00:02:38.819 --> 00:02:43.540
And so I kind of like noticed that there was
a theme going on here.

00:02:43.540 --> 00:02:45.850
And so I want to talk a little bit about tools.

00:02:45.850 --> 00:02:49.250
And this is not about, you know, Google development
tools.

00:02:49.250 --> 00:02:52.849
This is about -- you know, you don't have
to be building the next Gmail for this kind

00:02:52.849 --> 00:02:54.420
stuff to apply to you.

00:02:54.420 --> 00:02:56.069
It's for everyone.

00:02:56.069 --> 00:03:00.050
A lot of people have been noticing this recently.

00:03:00.050 --> 00:03:04.970
And I just want you to, like, think about
remember there was a point at which you didn't

00:03:04.970 --> 00:03:05.970
actually use version control.

00:03:05.970 --> 00:03:09.239
You might have been on a team and you're like,
Hey, I'm going to be editing, indexing HTML.

00:03:09.239 --> 00:03:10.939
Can you hold on just a second?

00:03:10.939 --> 00:03:13.180
Okay, you can do it now.

00:03:13.180 --> 00:03:14.180
Like source safe.

00:03:14.180 --> 00:03:22.370
It was, like, annoying, but version control
made it a lot better.

00:03:22.370 --> 00:03:27.569
And we can focus on development, not tiresome
debugging when you don't want to be doing

00:03:27.569 --> 00:03:28.569
it.

00:03:28.569 --> 00:03:32.640
And then how much time have you lost when
you actually had a colon where you were supposed

00:03:32.640 --> 00:03:38.180
to have a semi colon or an extra comma at
the end of your little object in JavaScript,

00:03:38.180 --> 00:03:39.400
and you were like ah!

00:03:39.400 --> 00:03:42.849
There's lots of funny things.

00:03:42.849 --> 00:03:43.930
I'm not going to click to it.

00:03:43.930 --> 00:03:49.610
It's a little not safe to work, commit logs
from last night, pulling in logs from GitHub

00:03:49.610 --> 00:03:55.390
where people happen to use expletives because
they're a bit frustrated.

00:03:55.390 --> 00:04:00.620
People that are making silly mistakes that
they probably don't need to.

00:04:00.620 --> 00:04:04.519
So we're seeing a little bit of shift towards
looking at tools assisting us.

00:04:04.519 --> 00:04:10.140
And Rebecca Murphy did a great post about
this sort of shift recently, and she said

00:04:10.140 --> 00:04:14.360
we're seeing us focus from valuing trivia
to valuing tools.

00:04:14.360 --> 00:04:18.810
And a similar thing was said a little bit
ago by Michael Lop, known by Rams online.

00:04:18.810 --> 00:04:20.780
He's an engineering manager at Apple.

00:04:20.780 --> 00:04:26.140
He said, There's a short list of tools that
you must be rabid about, rabid, foaming at

00:04:26.140 --> 00:04:28.210
the mouth crazy.

00:04:28.210 --> 00:04:34.550
And he went on to talk about how he used his
editor, his terminal and what made him productive.

00:04:34.550 --> 00:04:41.190
And I think this is important to really identify
what you feel great about.

00:04:41.190 --> 00:04:46.120
And so I've done a little bit of research
and it talks about this, and there's a lot

00:04:46.120 --> 00:04:47.120
of tools.

00:04:47.120 --> 00:04:49.460
When I say tools, it like covers a lot of
things.

00:04:49.460 --> 00:04:54.260
So this is a quick way of trying to visualize
from start to end what are all the tools that

00:04:54.260 --> 00:04:57.940
I use from the birth of a project to deploying
it out to the world.

00:04:57.940 --> 00:05:02.030
And we're going to kind of walk through a
little bit of this, but focusing on your developer

00:05:02.030 --> 00:05:03.670
workflow.

00:05:03.670 --> 00:05:09.040
So I'll just -- we're going to walk through
the current workflow for Web app developers.

00:05:09.040 --> 00:05:12.660
And really the way we'll start this off is
in your shell.

00:05:12.660 --> 00:05:17.330
In your shell -- I'll bring mine up right
now.

00:05:17.330 --> 00:05:19.210
Cool.

00:05:19.210 --> 00:05:23.419
The first thing is I think you should make
it sexy.

00:05:23.419 --> 00:05:25.729
Feel good about this terminal that you're
typing into.

00:05:25.729 --> 00:05:31.270
There's a really great community on GitHub
around dot files, configuration files for

00:05:31.270 --> 00:05:36.600
your bash prompt or your ZHS prompt, other
application configurations.

00:05:36.600 --> 00:05:40.710
So I encourage you to go check that out, see
what other people are doing and customize

00:05:40.710 --> 00:05:44.590
your shell and share your customizations with
other people.

00:05:44.590 --> 00:05:47.850
There's a few favorites that I have.

00:05:47.850 --> 00:05:52.220
One of them is a directory jumper called Z.

00:05:52.220 --> 00:05:53.760
I'll show that now.

00:05:53.760 --> 00:05:56.789
I can jump to any folder that I've been in
somewhat recently.

00:05:56.789 --> 00:05:59.270
I'll jump over to the modernizer project.

00:05:59.270 --> 00:06:02.610
You can type any portion of that word, hit
Z.

00:06:02.610 --> 00:06:04.039
We jump right into that.

00:06:04.039 --> 00:06:07.229
Now we'll actually go over to the HTML Please
project.

00:06:07.229 --> 00:06:13.770
Just type in "Z please," and we jump over
into that folder, nice and easy.

00:06:13.770 --> 00:06:14.770
Cool.

00:06:14.770 --> 00:06:22.710
Now, moving on past my shell -- actually,
first, the server alias.

00:06:22.710 --> 00:06:23.710
This is pretty cool.

00:06:23.710 --> 00:06:28.940
This alias, this is just a bit of bash.

00:06:28.940 --> 00:06:31.880
We are just firing up a simple Web server,
no big deal.

00:06:31.880 --> 00:06:35.729
At the same time we're opening up browser
tab.

00:06:35.729 --> 00:06:45.190
Configurable port if we want, but we'll default
to 8,000 if we want.

00:06:45.190 --> 00:06:47.319
I'll do that now, type in server.

00:06:47.319 --> 00:06:48.319
Cool.

00:06:48.319 --> 00:06:49.319
And refresh.

00:06:49.319 --> 00:06:50.319
Yeah, cool, awesome, good.

00:06:50.319 --> 00:06:52.599
So we have my local HTML5 Please running right
here.

00:06:52.599 --> 00:06:59.660
Now, coming back, the next part is the editor.

00:06:59.660 --> 00:07:03.289
And the editor, you might have your own preferences.

00:07:03.289 --> 00:07:09.270
That's fine, but the key to a good editor
is that it's an onion application, which is

00:07:09.270 --> 00:07:13.080
to say that there's a nice learning curve
where you can kind of peel back the layers

00:07:13.080 --> 00:07:20.479
of functionality and kind of grow from novice
to expert at a very easy pace.

00:07:20.479 --> 00:07:25.680
So the other thing with an editor is that
more than any other tool, this is where your

00:07:25.680 --> 00:07:30.030
investment in time and learning it well and
learning the features inside of it will pay

00:07:30.030 --> 00:07:31.810
off huge dividends.

00:07:31.810 --> 00:07:35.490
So I'll bring up mine right now.

00:07:35.490 --> 00:07:36.720
Let's see.

00:07:36.720 --> 00:07:44.681
I'm actually using Sublime text and we'll
bring this up and move it over here, and we're

00:07:44.681 --> 00:07:51.700
going to bring up actually my script for this
file.

00:07:51.700 --> 00:07:53.150
Nice.

00:07:53.150 --> 00:07:54.600
Cool.

00:07:54.600 --> 00:08:01.250
Now, one of the things that I've noticed developing
recently is that I've kind of, like, learned

00:08:01.250 --> 00:08:04.870
new tricks, I like some of the features in
this editor.

00:08:04.870 --> 00:08:10.199
And one of the things that I added to my editor
workflow recently was having linting.

00:08:10.199 --> 00:08:15.970
And code linting built-in write live.

00:08:15.970 --> 00:08:17.800
So I'll show you what I mean right now.

00:08:17.800 --> 00:08:21.100
So here I have these three variable declarations.

00:08:21.100 --> 00:08:22.100
It's cool.

00:08:22.100 --> 00:08:27.169
I didn't actually write these three lines,
but maybe I'll refactor them a little bit.

00:08:27.169 --> 00:08:28.389
Select them.

00:08:28.389 --> 00:08:31.430
I will align -- that's nice.

00:08:31.430 --> 00:08:32.650
Good thing.

00:08:32.650 --> 00:08:35.690
I'll do a multiline select.

00:08:35.690 --> 00:08:36.820
Move that over.

00:08:36.820 --> 00:08:37.820
That's cool.

00:08:37.820 --> 00:08:40.880
And then I'll go over and fix that.

00:08:40.880 --> 00:08:43.140
And good.

00:08:43.140 --> 00:08:47.810
Now, one of the things that it's helping me
out with here is I have this white box right

00:08:47.810 --> 00:08:54.750
here and this is linter plug-in that's running
inside Sublime and it's telling me I have

00:08:54.750 --> 00:08:55.750
a problem.

00:08:55.750 --> 00:09:01.110
Now, way down at the bottom it says "H2 is
not defined."

00:09:01.110 --> 00:09:03.730
And I'm like, but you're right here.

00:09:03.730 --> 00:09:04.730
Hmm.

00:09:04.730 --> 00:09:09.960
And what is the problem in this right here?

00:09:09.960 --> 00:09:16.330
Yes, my semi colon should be a comma and I
should be stringing my variable declarations.

00:09:16.330 --> 00:09:18.270
That's so nice.

00:09:18.270 --> 00:09:19.270
Yes.

00:09:19.270 --> 00:09:20.270
It's cool.

00:09:20.270 --> 00:09:21.500
All right.

00:09:21.500 --> 00:09:27.230
So yeah, I got lifing back and it was able
to, like, save me from an implied global variable,

00:09:27.230 --> 00:09:28.230
which we don't want.

00:09:28.230 --> 00:09:29.230
I probably would have caught that.

00:09:29.230 --> 00:09:32.910
It would have been a syntax error when I refresh
the page, but I'm getting it caught right

00:09:32.910 --> 00:09:34.580
here immediately.

00:09:34.580 --> 00:09:35.580
So I like this.

00:09:35.580 --> 00:09:39.900
In fact, I think code linting is your first
unit test.

00:09:39.900 --> 00:09:46.020
Typically the first unit test that you might
write is the global there, does this thing

00:09:46.020 --> 00:09:47.020
exist.

00:09:47.020 --> 00:09:50.440
And even before that you get feedback on if
it's available.

00:09:50.440 --> 00:09:52.720
And in JavaScript this is particularly important.

00:09:52.720 --> 00:09:57.200
Some of the languages have rich static analysis
features.

00:09:57.200 --> 00:10:02.090
JavaScript is a little hairy in that sort
of thing, but we have code linting.

00:10:02.090 --> 00:10:09.640
I'm using JS right here, and I can get immediate
feedback on is my code syntactically sound

00:10:09.640 --> 00:10:13.320
and is there anything that I should watch
out for, like what we just saw?

00:10:13.320 --> 00:10:18.350
So one of the parts of this is I really like
getting the realtime feedback.

00:10:18.350 --> 00:10:23.700
If you've seen the talk by Brett Victor, Invented
on Principle, one of the things that he talks

00:10:23.700 --> 00:10:30.260
about is having immediate feedback between
your code and your results and getting that

00:10:30.260 --> 00:10:31.260
feedback.

00:10:31.260 --> 00:10:36.920
And so I'm going to show a little bit of kind
of what kind of tools provide this sort of

00:10:36.920 --> 00:10:37.920
workflow these days.

00:10:37.920 --> 00:10:45.600
So I'll move this back over here and I'll
open up the style folder or the style sheet

00:10:45.600 --> 00:10:47.280
that we have.

00:10:47.280 --> 00:10:49.040
I think it's style.scss.

00:10:49.040 --> 00:10:57.600
So we're using Sass and Compass, and I'm going
to jump down to H1.

00:10:57.600 --> 00:11:05.170
So what I'm going to do is just make an edit
in the text shadow and we'll just change this

00:11:05.170 --> 00:11:10.850
part of the text shadow from this right here
up to 41 pixels and save it.

00:11:10.850 --> 00:11:12.420
Now, nothing happens.

00:11:12.420 --> 00:11:13.850
I refresh the page.

00:11:13.850 --> 00:11:15.030
Okay, cool.

00:11:15.030 --> 00:11:16.210
That's good.

00:11:16.210 --> 00:11:21.320
But I can turn on this library load extension,
which is just available inside Chrome.

00:11:21.320 --> 00:11:24.420
It communicates with the system application
back here.

00:11:24.420 --> 00:11:28.950
And now any changes that I make are in fact
live.

00:11:28.950 --> 00:11:30.560
So I make a change, I just hit save.

00:11:30.560 --> 00:11:33.630
I don't have to go over and hit refresh.

00:11:33.630 --> 00:11:35.140
That's good.

00:11:35.140 --> 00:11:37.990
So I'll actually just say that that sounds
pretty good.

00:11:37.990 --> 00:11:42.540
And I will go down here and add a little bit
more functionality.

00:11:42.540 --> 00:11:48.860
Let's see, I'll do a CSS transition that I
want to see .4 seconds.

00:11:48.860 --> 00:11:54.830
I'll apply that to all things.

00:11:54.830 --> 00:11:57.750
And then add a hover state to it.

00:11:57.750 --> 00:12:03.940
I think this time we'll do a transform.

00:12:03.940 --> 00:12:05.100
Nice.

00:12:05.100 --> 00:12:06.270
Okay.

00:12:06.270 --> 00:12:12.610
So I just hit saved, I come over here with
my mouse and -- nice.

00:12:12.610 --> 00:12:18.930
This is definitely an improvement and I will
be committing this to the repo right now.

00:12:18.930 --> 00:12:21.050
[Laughter]
&gt;&gt;Paul Irish: Or not.

00:12:21.050 --> 00:12:22.550
But that's cool.

00:12:22.550 --> 00:12:29.190
But I'm getting my immediate feedback, so
I'm getting my Sass immediately recompiled

00:12:29.190 --> 00:12:35.330
on the fly and then my CSS is being served
back to the browser.

00:12:35.330 --> 00:12:39.040
Without even the browser refreshing I can
change the page, my scroll position is maintained

00:12:39.040 --> 00:12:44.930
and just the style sheet is being swapped
in, which is really nice.

00:12:44.930 --> 00:12:46.140
All right.

00:12:46.140 --> 00:12:51.960
So I'm going to show a little bit of the browser
dev tools inside Chrome, some features that

00:12:51.960 --> 00:12:56.380
help especially with building applications
that you may not be aware of.

00:12:56.380 --> 00:12:58.320
The first is sourceURL.

00:12:58.320 --> 00:13:03.420
And this is a feature that's been in the browser
for quite awhile.

00:13:03.420 --> 00:13:11.340
This is a little demo set up by Ryan Sutton,
and so we have a little bit of Coffescript

00:13:11.340 --> 00:13:12.850
right here in the middle.

00:13:12.850 --> 00:13:18.260
I'm going to make a small little edit to this
Coffescript first.

00:13:18.260 --> 00:13:19.260
Nice.

00:13:19.260 --> 00:13:20.260
Cool.

00:13:20.260 --> 00:13:22.380
I'll bring up the Chrome dev tools.

00:13:22.380 --> 00:13:26.250
And -- that's pretty good.

00:13:26.250 --> 00:13:27.250
Nice.

00:13:27.250 --> 00:13:32.760
Now, normally I can take this Coffescript,
I can run it through Coffescript.js, compile

00:13:32.760 --> 00:13:38.080
it into its JavaScript form, and if I run
it, it goes through eval.

00:13:38.080 --> 00:13:43.320
And normally when you take text and run it
through eval, it evaluates, but it just kind

00:13:43.320 --> 00:13:45.060
of disappears into thin air.

00:13:45.060 --> 00:13:49.290
SourceURL is a way to basically treat that
as a file.

00:13:49.290 --> 00:13:56.210
So if you see down at the bottom I'm adding
googleio.js and adding to compile.

00:13:56.210 --> 00:13:59.310
Now you see it over here in the Chrome dev
tools.

00:13:59.310 --> 00:14:06.140
And if you look over here we have what I just
added in the Coffescript, now compiled to

00:14:06.140 --> 00:14:09.500
JavaScript, and at the side over here is the
sourceURL.

00:14:09.500 --> 00:14:13.150
So this little line is indicating, hey, dev
tools.

00:14:13.150 --> 00:14:17.930
I got this text, I threw it into eval, but
can you treat it as a file?

00:14:17.930 --> 00:14:20.250
Thanks very much, that would be great.

00:14:20.250 --> 00:14:23.120
So this is really nice, too.

00:14:23.120 --> 00:14:28.240
So not only is it a file, but I get all the
features that I would expect.

00:14:28.240 --> 00:14:31.010
So let's say break points.

00:14:31.010 --> 00:14:35.200
First I'll just make sure that my cube function
is working all nicely.

00:14:35.200 --> 00:14:36.200
Yes, good.

00:14:36.200 --> 00:14:37.450
Cube files 125.

00:14:37.450 --> 00:14:42.370
At a break point cube of five we break.

00:14:42.370 --> 00:14:45.080
I can't actually check the value of X right
now.

00:14:45.080 --> 00:14:47.460
We're looking good.

00:14:47.460 --> 00:14:50.640
Yes, sure, we'll continue.

00:14:50.640 --> 00:14:52.630
Or I can do a live edit.

00:14:52.630 --> 00:14:59.400
I can immediately change this file on the
fly, we'll return 2 from square so now let

00:14:59.400 --> 00:15:02.470
me ask for a cube and it should be 5 times
2.

00:15:02.470 --> 00:15:03.470
Cool.

00:15:03.470 --> 00:15:07.050
And we get our result, which is 10.

00:15:07.050 --> 00:15:13.490
So I'm getting live edit and break points
on some JavaScript which was compiled down

00:15:13.490 --> 00:15:14.840
from Coffescript all on the fly.

00:15:14.840 --> 00:15:17.430
I'm showing up as real files.

00:15:17.430 --> 00:15:20.510
That's pretty nice.

00:15:20.510 --> 00:15:27.310
Ember actually uses sourceURL to great effect
to -- Ember the JavaScript library, to emulate

00:15:27.310 --> 00:15:29.300
modules, which is really, really cool.

00:15:29.300 --> 00:15:33.950
Another feature I want to show real quick
is source maps.

00:15:33.950 --> 00:15:44.880
So if I bring back open my local HTML5 Please
and view the source, down at the bottom is

00:15:44.880 --> 00:15:47.850
my original sources for the project.

00:15:47.850 --> 00:15:53.910
Looks like we had some script tags pulling
in a few libraries and then this script.js

00:15:53.910 --> 00:15:59.770
that I did before, but what really gets served
to the browser is script.min.js, which is

00:15:59.770 --> 00:16:02.620
minified.

00:16:02.620 --> 00:16:09.960
My Chrome extension is critifying this for
me, but I really want you to see that it's

00:16:09.960 --> 00:16:10.960
minified.

00:16:10.960 --> 00:16:11.960
Okay, cool.

00:16:11.960 --> 00:16:13.360
Thank you, Chrome extension.

00:16:13.360 --> 00:16:15.480
All right.

00:16:15.480 --> 00:16:19.830
So the browser is actually receiving the minified
source, of course,

00:16:19.830 --> 00:16:25.800
But down at the very bottom of it is a little
indication similar to what we saw with sourceURL,

00:16:25.800 --> 00:16:28.690
only this time it's source mapping URL.

00:16:28.690 --> 00:16:30.600
And this points over to a map file.

00:16:30.600 --> 00:16:36.170
And this map file does -- basically takes
the identifiers in this compiled source and

00:16:36.170 --> 00:16:39.430
maps it back to my original sources and says
these are the files.

00:16:39.430 --> 00:16:41.610
And so what I can get are the results.

00:16:41.610 --> 00:16:50.370
I open up my dev tools and instead of seeing
script.min.js I see my original sources all

00:16:50.370 --> 00:16:51.370
in here.

00:16:51.370 --> 00:16:54.040
And the cool thing is that the same thing
works over here.

00:16:54.040 --> 00:16:58.420
Here's my nice edits that I made.

00:16:58.420 --> 00:17:05.620
I can apply break points and click on any
-- and now we're actually broken in my original

00:17:05.620 --> 00:17:09.569
source even though the browser is interpreting
the minified version.

00:17:09.569 --> 00:17:13.540
So this is great for an environment like production
where you're serving up the compiled sources,

00:17:13.540 --> 00:17:18.420
but you want to be able to debug the original
things you typed up.

00:17:18.420 --> 00:17:19.990
All right.

00:17:19.990 --> 00:17:20.990
Cool.

00:17:20.990 --> 00:17:24.430
Lastly, if you noticed, this might look a
little different to you.

00:17:24.430 --> 00:17:27.760
First of all, the dev tools are on the right-hand
side.

00:17:27.760 --> 00:17:33.370
If you open up the settings panel which is
down here in the bottom right, we have a few

00:17:33.370 --> 00:17:34.370
things in there.

00:17:34.370 --> 00:17:36.980
So doc to right, which moves it over there.

00:17:36.980 --> 00:17:40.410
Really like it in doc to right mode.

00:17:40.410 --> 00:17:46.300
We have our step to bugging on the right-hand
side and I can get that out of the way.

00:17:46.300 --> 00:17:51.450
My file's over here and I can get that out
of the way and view my scripts in their full

00:17:51.450 --> 00:17:52.450
glory.

00:17:52.450 --> 00:17:54.250
I can also jump to different scripts.

00:17:54.250 --> 00:18:01.160
Instead of using this menu I can kind of hit
Command O and see all those scripts that are

00:18:01.160 --> 00:18:02.160
available.

00:18:02.160 --> 00:18:06.170
It's kind of get completion there.

00:18:06.170 --> 00:18:12.150
Or Command Shift O and see all the functions
that are defined in this file, and now I'll

00:18:12.150 --> 00:18:16.140
just bind -- yes, the sort function is what
I'm looking for.

00:18:16.140 --> 00:18:18.530
I can jump immediately to that definition.

00:18:18.530 --> 00:18:23.500
So a lot of nice things to make dealing with
a large JavaScript code base a bit easier

00:18:23.500 --> 00:18:25.700
instead of the dev tools.

00:18:25.700 --> 00:18:27.680
All right.

00:18:27.680 --> 00:18:31.270
Now, I wonder about testing for a moment.

00:18:31.270 --> 00:18:38.360
And this right here is actually a picture
from a series that we have up in the bathrooms

00:18:38.360 --> 00:18:42.170
at the Googleplex in Mountain View, California.

00:18:42.170 --> 00:18:45.010
The series is called Testing on the Toilet.

00:18:45.010 --> 00:18:50.920
So each week there's a new sheet that gives
you some good tips for writing test against

00:18:50.920 --> 00:18:52.220
your software.

00:18:52.220 --> 00:18:54.400
Good reading material, too.

00:18:54.400 --> 00:18:59.010
But it's important to write unit tests, so
I have a few ideas here.

00:18:59.010 --> 00:19:03.900
First is that you should author your test
in whatever you feel most comfortable in,

00:19:03.900 --> 00:19:09.930
so these days for JavaScript it would probably
be Jasmine Q unit or mocha.

00:19:09.930 --> 00:19:16.031
They all have kind of different assertion
styles, and find whichever you like and you

00:19:16.031 --> 00:19:20.440
feel comfortable writing those assertions
in.

00:19:20.440 --> 00:19:26.000
Build up a large test suite and then it feels
so nice as a security blanket when you're

00:19:26.000 --> 00:19:27.000
doing refactoring.

00:19:27.000 --> 00:19:31.720
The other thing is you can execute these tests
that you've written in a variety of different

00:19:31.720 --> 00:19:33.240
sessions, so like -- settings.

00:19:33.240 --> 00:19:38.600
The first one is, of course, in the browser,
so this is the HTML5 test suite.

00:19:38.600 --> 00:19:40.750
Run inside Q unit, inside the browser.

00:19:40.750 --> 00:19:42.310
Pretty common.

00:19:42.310 --> 00:19:51.110
You can also run the same tests inside a headless
browser, on demand, on the command line, so

00:19:51.110 --> 00:19:56.520
I'll show that right now, I'll use grunt,
which is a node-based command line tool and

00:19:56.520 --> 00:20:01.140
type grunt Q unit.

00:20:01.140 --> 00:20:07.970
So this is actually going to fire up phantom.js,
which is a headless WebKit instance, toss

00:20:07.970 --> 00:20:12.780
in those Q unit test suite and then check
that those indeed five assertions did pass.

00:20:12.780 --> 00:20:18.030
So I'm able to run the exact same tests just
without leaving my command line here.

00:20:18.030 --> 00:20:24.350
I can also run this -- run tests after I push
it up to version control, and let something

00:20:24.350 --> 00:20:28.670
like continuous integration server test these
things, so we do this on the modernizer project.

00:20:28.670 --> 00:20:30.190
So this is Travis.

00:20:30.190 --> 00:20:37.050
Every time we put up a new commit on GitHub,
Travis comes in, pulls down the latest, and

00:20:37.050 --> 00:20:41.940
actually does a similar thing, it takes our
Q unit test, throws it into phantom.js, and

00:20:41.940 --> 00:20:44.350
then -- and then we're looking good.

00:20:44.350 --> 00:20:50.800
It tells us if we're indeed passing or had
a little bit where I made some commits and

00:20:50.800 --> 00:20:52.200
broke some things.

00:20:52.200 --> 00:20:53.600
We fixed that.

00:20:53.600 --> 00:20:54.600
It's good.

00:20:54.600 --> 00:20:55.600
Another cool one.

00:20:55.600 --> 00:20:57.380
This is really nice, again, from Ryan Setton.

00:20:57.380 --> 00:21:04.030
He wrote a tool where we can take tests, not
only get results on the command line, but

00:21:04.030 --> 00:21:12.010
be able to test browsers in the cloud, so
I'm going to take this same test suite that's

00:21:12.010 --> 00:21:18.950
in Q unit, and toss it to bunyup, and bunyup
will then take that and call up a browser

00:21:18.950 --> 00:21:21.980
static, which has a lot of browsers in the
cloud and also mobile emulators.

00:21:21.980 --> 00:21:28.170
I'm not going to wait for this finish, but
it just called up some IOS emulators, and

00:21:28.170 --> 00:21:33.930
it's gonna -- and it can check my test suite
against those and get the results back.

00:21:33.930 --> 00:21:35.690
So this is really nice.

00:21:35.690 --> 00:21:41.330
I can write my tests, be able to execute them,
in a number of different devices and browsers

00:21:41.330 --> 00:21:44.840
on the fly without ever leaving right here.

00:21:44.840 --> 00:21:46.060
All right.

00:21:46.060 --> 00:21:49.104
When you have a build system, you wrote all
this stuff, you need to get it out to production.

00:21:49.104 --> 00:21:56.260
A lot of things you need to do with a pretty
hefty Web app, and tackling all of these on

00:21:56.260 --> 00:22:00.780
your own every time -- every time you make
changes is not going to work out so well,

00:22:00.780 --> 00:22:02.030
so you're going to need some help.

00:22:02.030 --> 00:22:05.370
I'm going to get into a little bit of this
later.

00:22:05.370 --> 00:22:10.400
But after you deploy, one of the things that
I think that we often forget is keeping track

00:22:10.400 --> 00:22:13.040
of your errors that clients have.

00:22:13.040 --> 00:22:18.940
So this is a screen shot from errorception,
and it's showing my report from a Web app

00:22:18.940 --> 00:22:25.460
that I somewhat hastily put up with some friends,
and telling me that I actually have -- people

00:22:25.460 --> 00:22:33.170
are hitting some JavaScript errors in I9 and
Chrome, and, you know, I didn't hit any of

00:22:33.170 --> 00:22:37.770
these errors, and none of the other developers
did, but -- but real users in the field are

00:22:37.770 --> 00:22:42.611
hitting these, so I can get these reports
and make sure that I can fix all these for

00:22:42.611 --> 00:22:43.890
everyone.

00:22:43.890 --> 00:22:45.180
Okay.

00:22:45.180 --> 00:22:54.020
So that was a lot of stuff, and sorry, but
-- so I was showing a lot of things, and it

00:22:54.020 --> 00:22:58.400
was kind of like this is here, this is here,
and the feeling that I got was that this was

00:22:58.400 --> 00:23:01.900
kind of like -- I mean, there's a lot of tools,
and they're all useful, but they kind of didn't

00:23:01.900 --> 00:23:09.210
have this smooth integration, so me and some
people on my team thought about this and we

00:23:09.210 --> 00:23:13.810
thought maybe there's something that we could
do to kind of make this work flow a bit more

00:23:13.810 --> 00:23:14.810
smooth.

00:23:14.810 --> 00:23:19.310
And so I'm going to talk to you today about
a project that we're going to show off called

00:23:19.310 --> 00:23:21.000
Yeoman.

00:23:21.000 --> 00:23:26.930
So the ideas behind Yeoman is that we think
you should be able to go from your idea to

00:23:26.930 --> 00:23:28.510
a rough prototype in ten minutes.

00:23:28.510 --> 00:23:33.320
I say "rough", but I mean like a prototype
that you're actually going to continue developing,

00:23:33.320 --> 00:23:37.670
like you're using all the tools inside that
prototype that you would normally use in a

00:23:37.670 --> 00:23:40.690
Web app, and you're going to keep going from
that.

00:23:40.690 --> 00:23:43.750
We also want to make sure that we can reduce
friction from the things that you should be

00:23:43.750 --> 00:23:45.880
doing, such as testing.

00:23:45.880 --> 00:23:50.280
And now, you probably heard that you should
not repeat yourself when you're coding; same

00:23:50.280 --> 00:23:52.100
thing applies to your tools.

00:23:52.100 --> 00:23:59.059
You shouldn't have to type -- you shouldn't
have to run build.sh every single time you

00:23:59.059 --> 00:24:00.530
change a file.

00:24:00.530 --> 00:24:03.190
So these things should be automatic.

00:24:03.190 --> 00:24:09.710
So what Yeoman is is it's an open source set
of tools, frameworks, libraries, that accelerate

00:24:09.710 --> 00:24:11.170
building good Web apps.

00:24:11.170 --> 00:24:17.960
So has some things in it, so authoring abstractions,
linting, testing, build tools, these things

00:24:17.960 --> 00:24:23.180
that I've been talking about, but we've been
focusing on providing nice, smooth developer

00:24:23.180 --> 00:24:26.530
ergonomics so it feels good to use.

00:24:26.530 --> 00:24:28.460
So there's a few things inside of it.

00:24:28.460 --> 00:24:33.940
Things -- these names you should be familiar
with: Compass, sass, CoffeeScript, module

00:24:33.940 --> 00:24:37.170
support, by the way of AMD, and ecmascript
6.

00:24:37.170 --> 00:24:40.190
We'll get to that in a minute.

00:24:40.190 --> 00:24:46.110
Twitter bootstrap, stripped HTML5 boilerplate,
some testing things, Jasmine, phantom jas,

00:24:46.110 --> 00:24:47.150
image compression.

00:24:47.150 --> 00:24:49.059
All right.

00:24:49.059 --> 00:24:53.870
So I'm going to do a demo and I'm actually
going to skip the first step, the first step

00:24:53.870 --> 00:25:00.640
is a little shell script that gets your developer
environment all set and going, gets you installed

00:25:00.640 --> 00:25:03.120
with node and NPM and home brew.

00:25:03.120 --> 00:25:06.380
Get a few of the dependencies out of the way.

00:25:06.380 --> 00:25:09.510
You're going to want, because, you know, sometimes
I'll end up switching to a new machine, and

00:25:09.510 --> 00:25:12.520
getting your own developer environment going
takes awhile.

00:25:12.520 --> 00:25:17.270
So we wanted to make sure that you could get
rid of that -- an old set in a few minutes.

00:25:17.270 --> 00:25:18.270
All right.

00:25:18.270 --> 00:25:25.240
So I'm going to go to temp.

00:25:25.240 --> 00:25:26.240
Nice.

00:25:26.240 --> 00:25:27.980
All right.

00:25:27.980 --> 00:25:30.530
We're going to kick off a new project.

00:25:30.530 --> 00:25:35.840
So a lot of what we have in Yeoman is accessible
on the command line, and so I can just type

00:25:35.840 --> 00:25:40.900
Yeoman command, and we have a few things available
in here.

00:25:40.900 --> 00:25:47.020
We have init, build, server, test, and some
other stuff we're going to get to later.

00:25:47.020 --> 00:25:51.670
So what we're going to do here is we're going
to start a new project.

00:25:51.670 --> 00:25:53.490
I'll name this project IO app.

00:25:53.490 --> 00:25:59.090
And inside our app, we're going to type Yeoman
in it.

00:25:59.090 --> 00:26:00.090
Cool.

00:26:00.090 --> 00:26:02.640
So we're starting off a new project.

00:26:02.640 --> 00:26:03.640
Things are good.

00:26:03.640 --> 00:26:04.640
It's going to ask us a few questions.

00:26:04.640 --> 00:26:06.480
What's the name of the project.

00:26:06.480 --> 00:26:07.480
Description.

00:26:07.480 --> 00:26:13.140
It's going to pull a little bit of the get
metadata from my get config, so some of these

00:26:13.140 --> 00:26:15.580
defaults probably will make sense for me.

00:26:15.580 --> 00:26:16.580
And that's good.

00:26:16.580 --> 00:26:20.760
Now, it's going to take all of this and create
a nice little package .json file which I might

00:26:20.760 --> 00:26:21.760
want.

00:26:21.760 --> 00:26:24.290
Now there's a few things it's going to ask
me if I want.

00:26:24.290 --> 00:26:26.100
Do I want Twitter bootstrap?

00:26:26.100 --> 00:26:27.710
Yeah.

00:26:27.710 --> 00:26:28.710
Required JS?

00:26:28.710 --> 00:26:31.020
I'll pull that in for now.

00:26:31.020 --> 00:26:34.070
And experimental support for ecmascript 6
modules, let's do it.

00:26:34.070 --> 00:26:35.070
All right.

00:26:35.070 --> 00:26:38.810
I say yes, we get a bunch of files written
and we're good.

00:26:38.810 --> 00:26:43.790
Just to show kind of what this created, I'm
going to take a tree and pipe it through to

00:26:43.790 --> 00:26:53.040
Les, so let's see, we've got a good deal of
bootstrap here, and then bootstrap -- a little

00:26:53.040 --> 00:27:00.620
bit of HTML5 boilerplate going on here, some
more bootstrap, Jasmine going on down here.

00:27:00.620 --> 00:27:01.620
Cool.

00:27:01.620 --> 00:27:12.690
Now -- now, the next thing I'm just going
to open this up inside my text editor, and

00:27:12.690 --> 00:27:18.020
so we have here a little stripped version
of HTML5 boilerplate and I'll add in some

00:27:18.020 --> 00:27:26.120
text, and I'm actually just going to use a
little bit of zen coding to save some time.

00:27:26.120 --> 00:27:27.250
Nice.

00:27:27.250 --> 00:27:32.880
Hello I/O. Yeoman in action.

00:27:32.880 --> 00:27:37.170
Now, we have a server built into Yeoman.

00:27:37.170 --> 00:27:44.060
And the cool thing here is that we're actually
taking -- because when you run a server, you

00:27:44.060 --> 00:27:45.920
actually want to be able to watch your changes
too.

00:27:45.920 --> 00:27:47.420
So you set up a server.

00:27:47.420 --> 00:27:56.730
It immediately actually opens up that result
inside the browser as well, and you're off.

00:27:56.730 --> 00:27:59.470
So now I'm going to open up my style sheet.

00:27:59.470 --> 00:28:01.450
All right.

00:28:01.450 --> 00:28:07.490
And we have in here, we're going to pull in
Twitter bootstrap, and I'll bring that in

00:28:07.490 --> 00:28:12.960
here, and now watch as I hit save on this
file.

00:28:12.960 --> 00:28:14.080
Hit save.

00:28:14.080 --> 00:28:15.450
I'll watch task.

00:28:15.450 --> 00:28:17.850
Notice that it immediately changes.

00:28:17.850 --> 00:28:22.510
And then we run it through compass, we hit
the reload task and you saw that it changes

00:28:22.510 --> 00:28:23.510
up here.

00:28:23.510 --> 00:28:30.500
So I'm now able to add whatever I want inside
my text editor, and get immediate results

00:28:30.500 --> 00:28:34.160
down at the bottom, or in my browser.

00:28:34.160 --> 00:28:37.060
So do a little bit of styles here.

00:28:37.060 --> 00:28:38.060
Save.

00:28:38.060 --> 00:28:39.700
That looks pretty good.

00:28:39.700 --> 00:28:43.370
A little bit of color over here.

00:28:43.370 --> 00:28:44.370
Save.

00:28:44.370 --> 00:28:45.370
Nice.

00:28:45.370 --> 00:28:46.370
Cool.

00:28:46.370 --> 00:28:56.090
So I'm able to just go run all this immediately
through Coffee Script -- sorry, through compass,

00:28:56.090 --> 00:29:01.320
compile it down to my resulting CSS and then
get the results immediately showing over here.

00:29:01.320 --> 00:29:05.540
The cool thing is that we're actually not
even using any sort of Chrome extension to

00:29:05.540 --> 00:29:11.750
get the lab reload functionality inside -- inside
the view in my browser.

00:29:11.750 --> 00:29:17.370
Now, this is cool, and I wanted to bring up
testing, because I mentioned that before.

00:29:17.370 --> 00:29:25.230
We can just go over to slash test, and we
have our Jasmine test suite, all green, looking

00:29:25.230 --> 00:29:27.740
good, we see in the browser, looks good.

00:29:27.740 --> 00:29:32.390
Like I said before, I think it's really nice
to have this available at the command line

00:29:32.390 --> 00:29:34.500
two, so we'll type in Yeoman test.

00:29:34.500 --> 00:29:40.500
We're going to take that jasmine suite and
throw it into phantom.js and get our same

00:29:40.500 --> 00:29:42.240
passing results.

00:29:42.240 --> 00:29:43.240
Cool.

00:29:43.240 --> 00:29:50.500
I should mention here that we're using grunt
again to use a lot of this system level functionality.

00:29:50.500 --> 00:29:58.710
It's a great project for this sort of thing,
and we're leaning heavily on it.

00:29:58.710 --> 00:29:59.950
All right.

00:29:59.950 --> 00:30:00.950
Cool.

00:30:00.950 --> 00:30:04.010
Now, let's move over to another project.

00:30:04.010 --> 00:30:10.740
I want to bring up this application, and we'll
kick it off right now.

00:30:10.740 --> 00:30:14.480
Bring this up.

00:30:14.480 --> 00:30:15.720
Nice.

00:30:15.720 --> 00:30:18.220
All right.

00:30:18.220 --> 00:30:20.809
So this should look pretty familiar to you.

00:30:20.809 --> 00:30:25.040
This is your standard to-do app.

00:30:25.040 --> 00:30:30.220
Common -- a large portion of this came from
the to do MBC project where you can see a

00:30:30.220 --> 00:30:33.990
basic to do app built in a number of different
frameworks and libraries.

00:30:33.990 --> 00:30:42.080
So let's see, go to I/O, do a talk.

00:30:42.080 --> 00:30:43.080
Nice.

00:30:43.080 --> 00:30:44.080
Cool.

00:30:44.080 --> 00:30:46.130
So we've got this basic functionality, and
that's good.

00:30:46.130 --> 00:30:49.870
I want to show a little bit of how this was
built.

00:30:49.870 --> 00:30:55.429
So right inside here, we view source, and
we're pulling in required.js and the main

00:30:55.429 --> 00:30:58.230
module that we're pulling in is main.

00:30:58.230 --> 00:31:03.720
And so I'm actually going to take a quick
detour and talk about modules.

00:31:03.720 --> 00:31:04.980
All right.

00:31:04.980 --> 00:31:12.490
So modules, the quick elevator pitch on modules
is that the key to building a large Web app

00:31:12.490 --> 00:31:19.010
is to not construct a large Web app; it is
to break it up into small libraries and small

00:31:19.010 --> 00:31:20.010
parts.

00:31:20.010 --> 00:31:25.640
Writing code into small files feels good,
and we can do that when we use modules.

00:31:25.640 --> 00:31:31.190
With structured modules we can also define
what our dependencies are, and when we do

00:31:31.190 --> 00:31:35.570
this, we're actually able to just define our
dependencies a single time, so let's say we're

00:31:35.570 --> 00:31:41.470
not using modules, so you would probably have
your HTML file, you would have bunch of script

00:31:41.470 --> 00:31:45.380
tags in the order that they need to be in,
and then you have your build system which

00:31:45.380 --> 00:31:49.260
is going to, you know, concatenate all your
files, and you have to specify your order

00:31:49.260 --> 00:31:51.940
and your dependencies over there as well.

00:31:51.940 --> 00:31:58.180
Modules we can only -- we can just define
that structure just in one place.

00:31:58.180 --> 00:32:04.450
Another advantage is that as you develop,
you might stop using code, and in modules,

00:32:04.450 --> 00:32:09.040
code you stop using just gets stripped out
when it goes out to builds.

00:32:09.040 --> 00:32:13.820
So there's a few different ways to write modules,
and I'm going to show two of them here.

00:32:13.820 --> 00:32:18.680
The first is AMD modules, so these are asynchronous
modules.

00:32:18.680 --> 00:32:24.049
They have dependency resolution, help you
to not write global variables, and it has

00:32:24.049 --> 00:32:31.360
a very rich plug-in ecosystem that I'm going
to show as well as smart-build optimization.

00:32:31.360 --> 00:32:36.940
So this is an example of, let's say, a to
do controller, and we're going to pull in

00:32:36.940 --> 00:32:43.630
this file, and bring it in to our app as a
to do view, and then our to do controller

00:32:43.630 --> 00:32:48.350
is going to return an object that includes
some stuff and then a render method.

00:32:48.350 --> 00:32:49.350
All right.

00:32:49.350 --> 00:32:50.350
Cool.

00:32:50.350 --> 00:32:52.600
Now, on to the next module.

00:32:52.600 --> 00:32:59.260
This is ES 6 modules, ecmascript 6 also ecmascript
harmony.

00:32:59.260 --> 00:33:07.100
Now, this is actually coming from ecmascript
committee, TC39, who thought that, you know,

00:33:07.100 --> 00:33:10.260
people were kind of doing this in the JavaScript
world; let's find a way to make this actually

00:33:10.260 --> 00:33:14.450
happen in the language itself, so offering
a native solution.

00:33:14.450 --> 00:33:21.920
Has a flexible syntax, beyond what we have
just down here, so what we have is we're pulling

00:33:21.920 --> 00:33:28.520
in a module called "to do view", from this
file, and importing it into this file, we

00:33:28.520 --> 00:33:32.090
have some functionality, and then we can export
whatever we want, so in this case we're going

00:33:32.090 --> 00:33:35.460
to export a function called render where we
do some stuff.

00:33:35.460 --> 00:33:38.290
Actually point out I am saying ES 6.

00:33:38.290 --> 00:33:44.630
There is a little bit of conversation happening
like right now about if this is going to make

00:33:44.630 --> 00:33:51.250
it into ecmascript version 6 or the next version
after that, so we'll see how that goes.

00:33:51.250 --> 00:33:57.090
But we wanted to experiment with this, and
see if Yeoman could give us an ability to

00:33:57.090 --> 00:34:00.540
try out this style.

00:34:00.540 --> 00:34:04.350
So back to -- back to the code.

00:34:04.350 --> 00:34:13.210
I said that this was using required.js, so
I'm going to open up the -- our source of

00:34:13.210 --> 00:34:18.030
this app, and I'll open up main.js.

00:34:18.030 --> 00:34:23.570
So this is the module it's pulling in, and
looks like we're initializing an app right

00:34:23.570 --> 00:34:28.050
after we pull in the task app module, and
we have a little coffee script pre-filter

00:34:28.050 --> 00:34:34.970
on this, so looks like -- all right, cool.

00:34:34.970 --> 00:34:43.440
So this is indeed AMD, but it is of course
CoffeeScript.

00:34:43.440 --> 00:34:48.810
You can see at the top we're playing in a
few other modules into this file, and then

00:34:48.810 --> 00:34:54.879
we have our application set up where we're
defining our structure of our to dos.

00:34:54.879 --> 00:35:02.410
Now, one of these modules that we're pulling
this is this fun module, nice.

00:35:02.410 --> 00:35:06.150
And we're pulling it in with an HM pre-filter,
stands for harmony.

00:35:06.150 --> 00:35:10.320
So I'm going to go over to that real quick.

00:35:10.320 --> 00:35:11.320
Fun.

00:35:11.320 --> 00:35:12.390
All right.

00:35:12.390 --> 00:35:18.240
So this here is an ecmascript harmony module.

00:35:18.240 --> 00:35:21.000
We are pulling a few things into it.

00:35:21.000 --> 00:35:27.980
So we're pulling in speech, from -- from this
guy over here, and this is actually the E

00:35:27.980 --> 00:35:36.240
speak speech synthesizer client, and the cool
thing about this speech synthesizer is that

00:35:36.240 --> 00:35:42.619
it's actually written in C++, but it was run
through emscripten which is a research project

00:35:42.619 --> 00:35:49.760
by Mozilla that can port C++ into JavaScript,
and so now we're taking that and we're exposing

00:35:49.760 --> 00:35:57.520
it through ecmascript harmony modules and
bringing that out, so we pull in this module,

00:35:57.520 --> 00:36:03.180
and we also got this guy going on here, and
down here we're going to use this speech module

00:36:03.180 --> 00:36:07.830
at the bottom, and pull out this speak method.

00:36:07.830 --> 00:36:09.160
Cool.

00:36:09.160 --> 00:36:10.750
Coming back into our app.

00:36:10.750 --> 00:36:20.869
I can see down here when we create a new item,
I'm going to uncomment out this guy, and comment

00:36:20.869 --> 00:36:22.440
out this guy.

00:36:22.440 --> 00:36:23.440
Nice.

00:36:23.440 --> 00:36:24.890
Come back here, and refresh the page.

00:36:24.890 --> 00:36:25.890
Good.

00:36:25.890 --> 00:36:29.339
And now let's try this out.

00:36:29.339 --> 00:36:32.530
&gt;&gt;&gt; Remember to ace the demo.

00:36:32.530 --> 00:36:34.430
&gt;&gt;Paul Irish: Yeah.

00:36:34.430 --> 00:36:35.710
Nice, cool.

00:36:35.710 --> 00:36:38.000
So nailed it.

00:36:38.000 --> 00:36:39.140
Awesome.

00:36:39.140 --> 00:36:41.440
All right.

00:36:41.440 --> 00:36:46.900
So the cool thing here is that we have a C++
library that was ported into JavaScript via

00:36:46.900 --> 00:36:55.900
emscripten, exposed via ecmascript 6 module
into our CoffeeScript application compiled

00:36:55.900 --> 00:37:02.030
down into ecmascript 5 JavaScript, and now
we've got a (indiscernible), so I think we're

00:37:02.030 --> 00:37:03.850
in a good place.

00:37:03.850 --> 00:37:04.980
Cool.

00:37:04.980 --> 00:37:07.220
All right.

00:37:07.220 --> 00:37:12.400
One of the things that we wanted to do with
Yeoman is find out how we can iterate on it

00:37:12.400 --> 00:37:15.810
in a way that kind of was based on how people
are using it.

00:37:15.810 --> 00:37:22.320
So we have a thing in there that can report
exactly anonymous metrics around what are

00:37:22.320 --> 00:37:28.950
the commands that are typed in, so any kind
of Yeoman commands, and this way we can get

00:37:28.950 --> 00:37:34.040
a better idea on how people are using it,
so they can make good changes and really make

00:37:34.040 --> 00:37:36.990
sure that the tool fits its users.

00:37:36.990 --> 00:37:42.560
Another thing that it can do is answer questions
like what's the popularity difference between

00:37:42.560 --> 00:37:47.290
backbone and ember, or what's the adoption
rate of ES 6 modules?

00:37:47.290 --> 00:37:50.580
So I think this is really cool.

00:37:50.580 --> 00:37:54.180
And we also want to make sure that all this
-- all this data is accessible to anyone that

00:37:54.180 --> 00:37:56.660
wants to see it.

00:37:56.660 --> 00:38:01.950
I want to take a moment just to talk about
package management.

00:38:01.950 --> 00:38:09.040
So I don't know about you guys, but if I have
to update like a library that I depend on

00:38:09.040 --> 00:38:14.480
somewhere, the first thing that happens is
someone probably tells me, hey, that Jay creates

00:38:14.480 --> 00:38:16.609
1.5 up to 1.8 alpha.

00:38:16.609 --> 00:38:17.770
You should probably update.

00:38:17.770 --> 00:38:18.770
Okay, okay.

00:38:18.770 --> 00:38:21.510
I'll go to the site, I'll find the download
button, and I'll download that to my downloads,

00:38:21.510 --> 00:38:27.080
then I'll move that into the app folder, and
then I'll like fix the script tag because

00:38:27.080 --> 00:38:34.150
it's a new version file and fix that, and
that's -- that's not great, so why do we need

00:38:34.150 --> 00:38:36.740
package management for clientside JavaScript?

00:38:36.740 --> 00:38:39.530
Because what I just described is not fun.

00:38:39.530 --> 00:38:45.760
And then more like an Ecosystem level, common
code gets duplicated across a good size app,

00:38:45.760 --> 00:38:51.590
you probably have code to bind a function
to a scope like four times.

00:38:51.590 --> 00:38:53.160
Another thing that happens is that libraries
get fragmented.

00:38:53.160 --> 00:38:58.940
This is why we have things like the jQuery
empire and then the YUI and dojo and closure

00:38:58.940 --> 00:39:05.510
areas where things are not really interoperable,
and we have fragmented communities and libraries.

00:39:05.510 --> 00:39:12.270
So with package management, we can have something
like a longer dependency chain.

00:39:12.270 --> 00:39:17.740
A good example of this is the Chaplin project
which helps building applications in backbone.

00:39:17.740 --> 00:39:23.060
Chaplin depends on backbone and some other
libraries which depend on jQuery and underscore.

00:39:23.060 --> 00:39:25.110
That comes really easy.

00:39:25.110 --> 00:39:30.940
Better package management, we can define that
dependency tree which informs a build system

00:39:30.940 --> 00:39:35.340
to be really smart about building that out
for a very optimized output for production.

00:39:35.340 --> 00:39:40.680
Then as a library author, it's really nice
for your users to both consume your library

00:39:40.680 --> 00:39:44.340
as a regular old install and also as a dependency
of something else.

00:39:44.340 --> 00:39:49.910
How about instead of all of those steps, we
just have something Yeoman installed backbone,

00:39:49.910 --> 00:39:54.350
we have to update it instead of all of these
steps, Yeoman, very casually, hey, man, JavaScript

00:39:54.350 --> 00:39:59.880
library update, you have got to update your
backbone, it's the new thing.

00:39:59.880 --> 00:40:05.119
You're like, cool, cool, I got it, Yeoman,
update backbone.

00:40:05.119 --> 00:40:08.860
So I'm going to show you a quick look at Bower.

00:40:08.860 --> 00:40:16.040
Bower is a package manager, it's being built
by Jacob Thorton, who is one of the devs behind

00:40:16.040 --> 00:40:22.070
Twitter bootstrap and Alex MacCaw behind The
Spine (indiscernible).

00:40:22.070 --> 00:40:30.900
And what we did is we basically took Bower
and wrapped it right inside of Yeoman so that

00:40:30.900 --> 00:40:35.400
again this accesses through the same interface.

00:40:35.400 --> 00:40:44.500
So we're over here in the I/O app and we'll
do Yeoman install backbone.

00:40:44.500 --> 00:40:52.300
So right now, what it's doing, is Yeoman is
talking to Bower, Bower is going to go and

00:40:52.300 --> 00:40:56.400
talk to the registry, say, Hey, I need backbone,
cool.

00:40:56.400 --> 00:41:02.920
I just got the backbone package, it's dependent
-- my dependencies are underscore and jQuery,

00:41:02.920 --> 00:41:05.720
please get those, okay, cool, got those.

00:41:05.720 --> 00:41:12.370
And now we've installed into our app into
the js browser modules backbone jQuery and

00:41:12.370 --> 00:41:13.440
underscore.

00:41:13.440 --> 00:41:19.560
So if I go into js browser modules, we have
all of our files right there.

00:41:19.560 --> 00:41:23.630
So I'm saving a lot of time not going and
getting all of these things and keeping them

00:41:23.630 --> 00:41:24.630
up to date.

00:41:24.630 --> 00:41:28.410
I'm able to manage my dependencies from my
app right here on the command line, which

00:41:28.410 --> 00:41:30.830
is really nice.

00:41:30.830 --> 00:41:34.940
So this is -- this is where things are going
with that.

00:41:34.940 --> 00:41:40.840
So -- so in summary for Yeoman, we can start
out new projects really easily.

00:41:40.840 --> 00:41:45.140
We get a fast, iterative loop when we are
doing development.

00:41:45.140 --> 00:41:53.869
Understanding preprocessors like Sass and
CoffeeScript, module systems like AMD and

00:41:53.869 --> 00:41:54.869
ES6.

00:41:54.869 --> 00:42:01.330
I didn't show how we can run our files against
js hint.

00:42:01.330 --> 00:42:04.060
Or even the build script, which is pretty
robust.

00:42:04.060 --> 00:42:08.480
It's built actually on the original build
script for the HTML5 boilerplate.

00:42:08.480 --> 00:42:13.910
But we have done a lot of research into image
optimization and found the most effective

00:42:13.910 --> 00:42:17.950
loss list image compression we can do.

00:42:17.950 --> 00:42:23.580
So Yeoman is available on the dev val for
preview, if you go to Yeoman.io you can sign

00:42:23.580 --> 00:42:27.190
up and get notified when it's totally ready.

00:42:27.190 --> 00:42:32.030
We're just doing a little bit of buckling
to make sure that we're looking good.

00:42:32.030 --> 00:42:36.460
We also want to make sure that our package
manager has enough packages so that when you

00:42:36.460 --> 00:42:41.230
want to start an app and add things, everything
is there for you as you want it.

00:42:41.230 --> 00:42:46.040
So we're letting in a few people, just to
kind of kick the tires and we'll have it out

00:42:46.040 --> 00:42:48.030
available for everyone publicly soon.

00:42:48.030 --> 00:42:49.030
All right.

00:42:49.030 --> 00:42:50.030
So ... summary.

00:42:50.030 --> 00:42:53.640
Tools are your friends, they're good, they
increase your productivity, lower your stress,

00:42:53.640 --> 00:42:58.220
help you out when you use them in a work flow
that works really well for you.

00:42:58.220 --> 00:42:59.740
We're working on Yeoman.

00:42:59.740 --> 00:43:04.980
Tell -- make it easier to consume these smart
tooling choices and help you build compelling

00:43:04.980 --> 00:43:05.980
web apps.

00:43:05.980 --> 00:43:09.400
And thank you very much.

00:43:09.400 --> 00:43:19.990
[ Applause ]
&gt;&gt;Paul Irish: If you have any questions, go

00:43:19.990 --> 00:43:35.810
ahead and step up to the mics in the aisles
and that would be rad.

00:43:35.810 --> 00:43:38.410
&gt;&gt;&gt; Thanks, Paul.

00:43:38.410 --> 00:43:43.600
&gt;&gt;Paul Irish: You're welcome.

00:43:43.600 --> 00:43:44.600
&gt;&gt;&gt; So Paul.

00:43:44.600 --> 00:43:46.329
&gt;&gt;Paul Irish: Sir?

00:43:46.329 --> 00:43:51.080
&gt;&gt;&gt; I saw Jasmine, is there going to be other
testing like plug-ins or --

00:43:51.080 --> 00:43:58.750
&gt;&gt;Paul Irish: So since we are built on -- on
Grunt, if you are familiar with that, swapping

00:43:58.750 --> 00:44:06.700
it out for -- for a different testing suite
is as easy as editing the Grunt file.

00:44:06.700 --> 00:44:08.270
So it's not too bad.

00:44:08.270 --> 00:44:15.160
But we -- we made choices that -- we wanted
to have some smart defaults in there, so we

00:44:15.160 --> 00:44:19.240
went with Jasmine because we really like its
style.

00:44:19.240 --> 00:44:24.020
So it is configurable, but we wanted to have
something that gets you off and going from

00:44:24.020 --> 00:44:25.020
the start.

00:44:25.020 --> 00:44:26.020
&gt;&gt;&gt; Awesome.

00:44:26.020 --> 00:44:27.020
&gt;&gt;Paul Irish: Cool.

00:44:27.020 --> 00:44:28.380
&gt;&gt;&gt; Can I get an invite?

00:44:28.380 --> 00:44:31.060
[Laughter]
&gt;&gt;Paul Irish: Yeah, yeah.

00:44:31.060 --> 00:44:34.810
You talk to me, talk to me.

00:44:34.810 --> 00:44:40.930
&gt;&gt;&gt; Um, when you -- after you installed Yeoman
and you were making changes, changes were

00:44:40.930 --> 00:44:44.440
loading in the browser, was that live reload
or was that something in Yeoman?

00:44:44.440 --> 00:44:53.470
&gt;&gt;Paul Irish: So we are actually leveraging
the JavaScript shim that the live reload project

00:44:53.470 --> 00:44:57.230
used and we're injecting that into the page.

00:44:57.230 --> 00:45:02.130
And so we're using a portion of the live reload,
but it's really just JavaScript that's making

00:45:02.130 --> 00:45:03.190
that happen.

00:45:03.190 --> 00:45:04.190
&gt;&gt;&gt; Okay.

00:45:04.190 --> 00:45:06.360
So ensure one doesn't have to have live reload
to have that feature.

00:45:06.360 --> 00:45:07.360
&gt;&gt;Paul Irish: Right.

00:45:07.360 --> 00:45:13.359
That feature comes through Yeoman, so you
don't even have to have anything else installed

00:45:13.359 --> 00:45:14.359
yet.

00:45:14.359 --> 00:45:15.359
&gt;&gt;&gt; Okay, thanks.

00:45:15.359 --> 00:45:17.160
&gt;&gt;&gt; So you showed us the testing and the development
side.

00:45:17.160 --> 00:45:22.480
I'm guessing part of the build process that
you didn't have time to show us was building

00:45:22.480 --> 00:45:23.480
for deployment.

00:45:23.480 --> 00:45:28.890
Would that also include being able to use
the closure compiler to have source mapping?

00:45:28.890 --> 00:45:30.620
Um ... yeah.

00:45:30.620 --> 00:45:39.590
Right now, um -- right now our build step
goes through uglify, but we're looking at

00:45:39.590 --> 00:45:46.090
a nice way to run it through a closure compiler,
because I like source maps just as much as

00:45:46.090 --> 00:45:47.090
you do.

00:45:47.090 --> 00:45:52.490
So there's -- there's a few issues and discussions
open to get source mapping into Uglify and

00:45:52.490 --> 00:45:55.250
to CoffeeScript, neither of them have landed
yet.

00:45:55.250 --> 00:45:59.650
So we're waiting for that, but in the meantime,
yeah, I would really love to find a nice way

00:45:59.650 --> 00:46:01.430
to get source maps into the closure compiler.

00:46:01.430 --> 00:46:02.430
&gt;&gt;&gt; Right.

00:46:02.430 --> 00:46:07.280
And there was an issue around having multiple
source maps and trying to read from each other.

00:46:07.280 --> 00:46:12.260
I'll catch you at the code lab.
&gt;&gt;Paul Irish: Sure, yeah, sounds good.

00:46:12.260 --> 00:46:13.260
Sir?

00:46:13.260 --> 00:46:14.260
&gt;&gt;&gt; All right.

00:46:14.260 --> 00:46:22.710
What kind of requirements do I need -- for
my server when I want to deploy this Yeoman

00:46:22.710 --> 00:46:23.710
created app?

00:46:23.710 --> 00:46:27.040
&gt;&gt;Paul Irish: Um, no specific requirement.

00:46:27.040 --> 00:46:28.369
It's completely up to you.

00:46:28.369 --> 00:46:36.740
So -- so it's -- it's basically we don't make
any requirements as far as your back end.

00:46:36.740 --> 00:46:41.170
It stays completely client side only whereas
another solution might say this is your database

00:46:41.170 --> 00:46:45.369
on the backend or we're going to serve it
up to Engine X or something like that, but

00:46:45.369 --> 00:46:46.849
that is completely up to you.

00:46:46.849 --> 00:46:48.160
&gt;&gt;&gt; I see.

00:46:48.160 --> 00:46:49.160
Okay.

00:46:49.160 --> 00:46:52.759
&gt;&gt;Paul Irish: Yes, sir, one more.

00:46:52.759 --> 00:46:56.039
&gt;&gt;&gt; This one is for Louie.

00:46:56.039 --> 00:47:01.870
So how much do you know about like the Bower
package manager, how hard is it going to be

00:47:01.870 --> 00:47:05.730
to get a package into it?

00:47:05.730 --> 00:47:09.630
I noticed that it looked like it was cloning,
so if you push that back up to GitHub, like,

00:47:09.630 --> 00:47:12.260
is there like weird issues?

00:47:12.260 --> 00:47:20.030
&gt;&gt;Paul Irish: Um ... well, I can answer the
first part at least.

00:47:20.030 --> 00:47:24.990
So it was previously called nest and I'm accessing
it, this way.

00:47:24.990 --> 00:47:30.240
And registering a new package is as easy as
that.

00:47:30.240 --> 00:47:31.240
Bower.

00:47:31.240 --> 00:47:34.890
Register the name and the URL of the get repo.

00:47:34.890 --> 00:47:41.400
It's very, very easy and there's a package.json
file that has the meta data available for

00:47:41.400 --> 00:47:42.400
the package.

00:47:42.400 --> 00:47:50.310
There's no strict dependency on GitHub, but
there is a strict dependency on git, and clone

00:47:50.310 --> 00:47:55.020
each package, find out its dependencies and
the team is finding ways to optimize that

00:47:55.020 --> 00:48:01.900
and say, for instance, grab the zip download
if it's a GitHub situation instead of cloning

00:48:01.900 --> 00:48:07.760
the entire repo, finding out how to make that
really nice.

00:48:07.760 --> 00:48:08.760
Cool?

00:48:08.760 --> 00:48:09.760
All right.

00:48:09.760 --> 00:48:10.760
Thank you guys, appreciate it.

00:48:10.760 --> 00:48:10.761
[ Applause ]

