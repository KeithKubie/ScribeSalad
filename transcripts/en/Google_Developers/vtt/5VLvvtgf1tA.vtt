WEBVTT
Kind: captions
Language: en

00:00:03.180 --> 00:00:04.230
Hi everybody.

00:00:04.230 --> 00:00:06.310
I can't really see
you, but hello.

00:00:06.310 --> 00:00:07.940
My name is Krispy.

00:00:07.940 --> 00:00:10.050
I am a developer
advocate for Google.

00:00:10.050 --> 00:00:13.280
I work in probably one
of the coolest roles

00:00:13.280 --> 00:00:14.340
I think Google has.

00:00:14.340 --> 00:00:17.450
And that is, I am a
games developer advocate.

00:00:17.450 --> 00:00:20.350
I play video games, and I'm
paid to play video games.

00:00:20.350 --> 00:00:23.100
But not only that, I
get to help our partners

00:00:23.100 --> 00:00:25.180
build their video
games and release them.

00:00:25.180 --> 00:00:28.220
Basically, my role as--
it's an engineering role.

00:00:28.220 --> 00:00:31.400
It's to help our third party
game partners integrate Google

00:00:31.400 --> 00:00:34.220
technology into what they do.

00:00:34.220 --> 00:00:35.020
So why am I here?

00:00:35.020 --> 00:00:36.520
What am I going to
talk about today?

00:00:36.520 --> 00:00:40.020
Well, I am going to talk about
game development and Android

00:00:40.020 --> 00:00:43.430
TV, something that I'm actually
very, very passionate about.

00:00:43.430 --> 00:00:45.430
I'm going to talk about
the constraints involved

00:00:45.430 --> 00:00:48.810
and give my thoughts on how this
is a boom for game developers

00:00:48.810 --> 00:00:51.830
who are interested in making
an impact on the evolving era

00:00:51.830 --> 00:00:54.180
of new TV.

00:00:54.180 --> 00:00:55.970
I will also endeavor
to give you exposure

00:00:55.970 --> 00:00:58.970
to some helpful code that should
allow you to jump in quickly

00:00:58.970 --> 00:01:00.360
and experiment.

00:01:00.360 --> 00:01:03.664
You're all game
experts, I'm assuming.

00:01:03.664 --> 00:01:05.580
And it's my hope that
by the end of this talk,

00:01:05.580 --> 00:01:09.469
you'll be able to do what
you do already even better.

00:01:09.469 --> 00:01:11.260
And perhaps a good
place to start with this

00:01:11.260 --> 00:01:15.940
is maybe a discussion about
where video games first met TV.

00:01:15.940 --> 00:01:18.240
You know, the Nintendo
Entertainment System, right?

00:01:18.240 --> 00:01:20.480
You might be inclined to
think that the NES was

00:01:20.480 --> 00:01:21.400
groundbreaking.

00:01:21.400 --> 00:01:22.520
And it was.

00:01:22.520 --> 00:01:23.920
I'm not discounting that.

00:01:23.920 --> 00:01:25.210
It came out in 1987.

00:01:25.210 --> 00:01:27.519
And it was a phenomenal success.

00:01:27.519 --> 00:01:29.060
I mean, we still
talk about it today.

00:01:29.060 --> 00:01:31.221
I don't know if you
saw my belt buckle.

00:01:31.221 --> 00:01:31.720
Right?

00:01:31.720 --> 00:01:35.330
This has influenced my career.

00:01:35.330 --> 00:01:38.270
So why is this important?

00:01:38.270 --> 00:01:39.450
Because it was influential.

00:01:39.450 --> 00:01:42.660
But we actually have to go
back in time a little bit

00:01:42.660 --> 00:01:46.670
and look at the
Magnavox Odyssey.

00:01:46.670 --> 00:01:48.470
1972.

00:01:48.470 --> 00:01:49.650
All right?

00:01:49.650 --> 00:01:54.290
This is cited as the first
video game console for the home.

00:01:54.290 --> 00:01:57.850
And the Odyssey was initially
built with discrete components.

00:01:57.850 --> 00:02:00.180
This was before a deal
with Texas Instruments

00:02:00.180 --> 00:02:02.580
that led to more condensed
multi-chip design.

00:02:02.580 --> 00:02:05.820
Now, one side note here is that
National Semiconductor proposed

00:02:05.820 --> 00:02:11.240
a single chip design to go into
the Magnavox back in 1975--

00:02:11.240 --> 00:02:12.990
the first SOC, they
were proposing.

00:02:12.990 --> 00:02:15.880
But due to the existing
deal that Magnavox

00:02:15.880 --> 00:02:18.770
had with Texas Instruments,
the Odyssey 100 and 200

00:02:18.770 --> 00:02:21.030
ended up shipping with
Texas Instruments multi-chip

00:02:21.030 --> 00:02:21.920
solutions.

00:02:21.920 --> 00:02:26.440
But in 1976, the
Odyssey 300 came out.

00:02:26.440 --> 00:02:30.250
Now, this version was one of the
first game or TV game systems

00:02:30.250 --> 00:02:32.017
that included a
single chip design.

00:02:32.017 --> 00:02:34.100
It was the first one, but
it was one of the first.

00:02:34.100 --> 00:02:37.110
The owner of the first
SOC in a video game system

00:02:37.110 --> 00:02:41.350
goes to the Coleco Telstar,
which used the same chip

00:02:41.350 --> 00:02:42.760
as the Odyssey 300.

00:02:42.760 --> 00:02:45.480
And this chip was produced
by General Instruments,

00:02:45.480 --> 00:02:48.625
and it was the AY-5-8500 chip.

00:02:48.625 --> 00:02:50.750
I mean, I'm not going to
go into the specs of that.

00:02:50.750 --> 00:02:53.690
You can look that
up on the tubes.

00:02:53.690 --> 00:02:56.520
But the thing that's
amazing about this

00:02:56.520 --> 00:02:59.540
is General Instruments--
now defunct, by the way,

00:02:59.540 --> 00:03:01.640
they don't exist
anymore-- was based

00:03:01.640 --> 00:03:05.240
in Pennsylvania and
specialized in semiconductor

00:03:05.240 --> 00:03:08.090
and cable television
equipment manufacture.

00:03:08.090 --> 00:03:11.660
So what we have
here is a case where

00:03:11.660 --> 00:03:14.250
TV is influencing video games,
which is influencing TV, which

00:03:14.250 --> 00:03:15.474
is influencing video games.

00:03:15.474 --> 00:03:17.015
And they're sort of
ratcheting it up.

00:03:17.015 --> 00:03:18.380
All right.

00:03:18.380 --> 00:03:20.450
So I need to pause
here, or else this

00:03:20.450 --> 00:03:22.470
is really going to turn
into like a history

00:03:22.470 --> 00:03:23.650
lesson on video games.

00:03:23.650 --> 00:03:26.422
And that would be awesome,
but it's really not what

00:03:26.422 --> 00:03:27.630
I'm here to talk about today.

00:03:27.630 --> 00:03:30.720
So if you're interested
in this kind of thing,

00:03:30.720 --> 00:03:32.770
there's a great book I
would personally recommend

00:03:32.770 --> 00:03:34.050
to you called "Console Wars."

00:03:34.050 --> 00:03:35.383
Use your favorite search engine.

00:03:35.383 --> 00:03:36.370
Find a retailer.

00:03:36.370 --> 00:03:36.870
Pick it up.

00:03:36.870 --> 00:03:38.570
It's a great read.

00:03:38.570 --> 00:03:41.110
And I felt that you
would appreciate stuff

00:03:41.110 --> 00:03:44.980
like this, this level of
detail, given that you're

00:03:44.980 --> 00:03:47.560
interested in game development.

00:03:47.560 --> 00:03:49.460
Let's go back a little
farther in time.

00:03:49.460 --> 00:03:53.940
Let's shift gears a bit
and talk about old TV sets.

00:03:53.940 --> 00:03:57.710
For instance, did you know that
the first electromagnetic, or

00:03:57.710 --> 00:04:01.540
electromechanical,
television was demoed here

00:04:01.540 --> 00:04:05.789
in San Francisco on
September 7, 1927?

00:04:05.789 --> 00:04:06.580
That's pretty cool.

00:04:06.580 --> 00:04:10.370
We're in the same city this
stuff was first demoed in.

00:04:10.370 --> 00:04:14.160
Now, these TVs obviously
were very primitive.

00:04:14.160 --> 00:04:16.149
But we're looking at
it from the future.

00:04:16.149 --> 00:04:17.930
At the time, this
was groundbreaking.

00:04:17.930 --> 00:04:20.149
This was revolutionary.

00:04:20.149 --> 00:04:22.946
And also, the fact that we're
evaluating it as primitive

00:04:22.946 --> 00:04:25.070
kind of makes sense, given
the available technology

00:04:25.070 --> 00:04:26.320
of the time.

00:04:26.320 --> 00:04:27.986
Certainly video
games couldn't exist

00:04:27.986 --> 00:04:30.360
without the developments that
took place in early TV sets

00:04:30.360 --> 00:04:30.927
like this.

00:04:30.927 --> 00:04:32.510
And the thing I want
to highlight here

00:04:32.510 --> 00:04:34.820
is that the industry
evolution of TV hardware

00:04:34.820 --> 00:04:37.710
is actually markedly different
than that which took place

00:04:37.710 --> 00:04:39.150
in the computer industry.

00:04:39.150 --> 00:04:41.200
Simply put, the
TV hardware space

00:04:41.200 --> 00:04:43.260
did not evolve as
quickly as the computer

00:04:43.260 --> 00:04:46.550
industry did because of the
use cases that were involved.

00:04:46.550 --> 00:04:48.330
TV is markedly
different in a use case

00:04:48.330 --> 00:04:50.840
than a computer or a console.

00:04:50.840 --> 00:04:54.120
So if we just look at this
quickly on a spectrum timeline,

00:04:54.120 --> 00:04:58.635
we can see electromechanical
TVs hit retail shelves in 1928

00:04:58.635 --> 00:04:59.750
to 1934.

00:04:59.750 --> 00:05:01.810
That's when they
were really popular.

00:05:01.810 --> 00:05:06.790
And that technology evolved into
purely electronic televisions--

00:05:06.790 --> 00:05:09.800
yeah, they had transistors
through vacuum tubes

00:05:09.800 --> 00:05:12.630
and stuff-- in the mid 40s.

00:05:12.630 --> 00:05:16.260
And then we have the fast
forward like 25 years,

00:05:16.260 --> 00:05:18.300
almost 30 years, to
the Magnavox Odyssey

00:05:18.300 --> 00:05:21.770
before we see this next step
in evolution of interactivity

00:05:21.770 --> 00:05:22.437
with television.

00:05:22.437 --> 00:05:24.353
I mean, what you are
doing in these early days

00:05:24.353 --> 00:05:26.070
was like turning a
knob and maybe getting

00:05:26.070 --> 00:05:26.903
one or two channels.

00:05:26.903 --> 00:05:29.120
But the evolution proceeded.

00:05:29.120 --> 00:05:30.860
I didn't include
the modern stuff.

00:05:30.860 --> 00:05:33.920
I'm assuming all of you are more
familiar with things that took

00:05:33.920 --> 00:05:38.200
place in the 90s and so on.

00:05:38.200 --> 00:05:40.260
I've mentioned use
cases a number of times.

00:05:40.260 --> 00:05:43.320
Let's dive in there
just a little bit.

00:05:43.320 --> 00:05:47.290
Let's look at, say, a console
use case here on the left.

00:05:47.290 --> 00:05:50.110
With a video game console,
what are you doing?

00:05:50.110 --> 00:05:52.890
You've got maybe a
16 button controller.

00:05:52.890 --> 00:05:54.860
And you're pressing
those buttons probably

00:05:54.860 --> 00:05:55.680
pretty rapidly.

00:05:55.680 --> 00:05:57.344
And you're
internalizing, as a user,

00:05:57.344 --> 00:05:59.260
what's going on on the
screen in front of you.

00:05:59.260 --> 00:06:00.750
And you're building
a mental model,

00:06:00.750 --> 00:06:01.840
and you're reacting
very quickly.

00:06:01.840 --> 00:06:02.860
And you're pushing more buttons.

00:06:02.860 --> 00:06:04.790
And there's this cycle,
this repeated cycle,

00:06:04.790 --> 00:06:05.998
that goes very, very quickly.

00:06:05.998 --> 00:06:08.564
And you're leaned forward
when you're engaged with this.

00:06:08.564 --> 00:06:09.230
You're thinking.

00:06:09.230 --> 00:06:10.190
You're active.

00:06:10.190 --> 00:06:14.000
You're involved
directly in the action

00:06:14.000 --> 00:06:16.042
that's happening on the screen.

00:06:16.042 --> 00:06:17.500
Now if we contrast
that with what's

00:06:17.500 --> 00:06:20.100
going on when
you're chilling out,

00:06:20.100 --> 00:06:21.780
you're leaned back
on your couch.

00:06:21.780 --> 00:06:23.790
You have your 40
button remote control.

00:06:23.790 --> 00:06:26.340
I don't know why they have
40 buttons-- honestly,

00:06:26.340 --> 00:06:27.050
too many buttons.

00:06:27.050 --> 00:06:29.450
But they're also
super high latency.

00:06:29.450 --> 00:06:31.950
How many of you have experienced
the frustration of pressing

00:06:31.950 --> 00:06:33.408
a button, and you're
not quite sure

00:06:33.408 --> 00:06:36.350
if the TV really picked it up?

00:06:36.350 --> 00:06:37.320
Low latency.

00:06:37.320 --> 00:06:40.130
You're not going to be
making a lot of decisions

00:06:40.130 --> 00:06:41.470
very quickly with the TV.

00:06:41.470 --> 00:06:44.110
Usually it's, I want
to turn the volume up.

00:06:44.110 --> 00:06:45.880
I want to turn the volume down.

00:06:45.880 --> 00:06:47.910
I want to select
something to watch.

00:06:47.910 --> 00:06:49.130
And that's pretty much it.

00:06:49.130 --> 00:06:53.130
These are very different
use cases, right?

00:06:53.130 --> 00:06:54.704
So why is this important?

00:06:54.704 --> 00:06:55.870
Why am I talking about this?

00:06:55.870 --> 00:06:57.036
And actually, you know what?

00:06:57.036 --> 00:06:59.390
I haven't even talked
about phones yet.

00:06:59.390 --> 00:07:02.470
Phones need to enter
this discussion, I think.

00:07:02.470 --> 00:07:05.550
Now again, I don't
have time to go

00:07:05.550 --> 00:07:07.710
into the whole history of
phones with the telegraph

00:07:07.710 --> 00:07:09.010
and where all this came in.

00:07:09.010 --> 00:07:11.410
So I'm going to
just basically say

00:07:11.410 --> 00:07:13.650
the mobile game market is huge.

00:07:13.650 --> 00:07:14.150
All right?

00:07:14.150 --> 00:07:16.270
I feel I don't need to
make the case for this.

00:07:16.270 --> 00:07:17.720
It's self-evident.

00:07:17.720 --> 00:07:20.150
And given the successes
that have happened

00:07:20.150 --> 00:07:24.010
in the mobile space with
their evolution of technology,

00:07:24.010 --> 00:07:27.910
and engagement, and market
success for a lot of the game

00:07:27.910 --> 00:07:31.290
development companies, the
question naturally arises.

00:07:31.290 --> 00:07:33.970
Hey, can this be applied to TV?

00:07:33.970 --> 00:07:36.530
Can this whole model
work in the TV space?

00:07:38.370 --> 00:07:41.960
I think it can personally,
but with a caveat.

00:07:41.960 --> 00:07:46.980
And the caveat being, we need
to set the right expectations

00:07:46.980 --> 00:07:49.570
for both the development
communities and the consumer

00:07:49.570 --> 00:07:51.720
communities in order for
this to be successful.

00:07:51.720 --> 00:07:54.240
I feel that currently
a lot of expectations

00:07:54.240 --> 00:07:58.840
that come from other platforms,
and other devices that you're

00:07:58.840 --> 00:08:02.180
regularly using, both to
watch media and play games,

00:08:02.180 --> 00:08:04.910
are affecting what
your expectations are

00:08:04.910 --> 00:08:07.659
in the TV space.

00:08:07.659 --> 00:08:09.200
So I want to talk
about a constraint,

00:08:09.200 --> 00:08:12.230
or what constraints are here.

00:08:12.230 --> 00:08:16.870
I'll give you a second
to internalize that.

00:08:16.870 --> 00:08:21.080
So I'm going to state clearly
that Android TV is not trying

00:08:21.080 --> 00:08:22.534
to be a games console system.

00:08:22.534 --> 00:08:23.950
It's not a games
console platform,

00:08:23.950 --> 00:08:27.800
just like Android is not
a games console platform.

00:08:27.800 --> 00:08:29.920
But there are games
that run very well

00:08:29.920 --> 00:08:33.230
on both of these types of form
factors, the mobile and the TV

00:08:33.230 --> 00:08:35.184
space.

00:08:35.184 --> 00:08:36.559
I feel game
developers need to be

00:08:36.559 --> 00:08:39.230
mindful and self-aware about
targeting features that

00:08:39.230 --> 00:08:42.039
are specific to certain devices
when those features are maybe

00:08:42.039 --> 00:08:43.880
not compatible with a
broader set of devices

00:08:43.880 --> 00:08:46.295
within an Android
or mobile ecosystem.

00:08:46.295 --> 00:08:47.670
For example,
building a game that

00:08:47.670 --> 00:08:49.990
only works with a specific
type of controller,

00:08:49.990 --> 00:08:53.750
or uses a specific hardware
feature on a specific device,

00:08:53.750 --> 00:08:56.540
means that you're adding
your own constraints

00:08:56.540 --> 00:09:00.110
to your development process
when you shouldn't be.

00:09:00.110 --> 00:09:03.459
Don't pass on your
constraints to your users.

00:09:03.459 --> 00:09:05.250
I'm going to transition
here into something

00:09:05.250 --> 00:09:07.140
slightly different.

00:09:07.140 --> 00:09:11.040
Let's look at the spectrum of
current Android TV hardware

00:09:11.040 --> 00:09:13.530
and what exists out there,
because I don't feel this

00:09:13.530 --> 00:09:16.387
gets enough service when we're
talking about this space.

00:09:16.387 --> 00:09:18.470
There are really three
classifications of hardware

00:09:18.470 --> 00:09:19.928
that we should
consider, especially

00:09:19.928 --> 00:09:21.140
when developing games.

00:09:21.140 --> 00:09:23.540
There are operator boxes
that we see here on the left.

00:09:23.540 --> 00:09:28.610
These are lower
performance GPUs, CPUs.

00:09:28.610 --> 00:09:33.200
An operator box is
typically made and given

00:09:33.200 --> 00:09:36.390
to subscribers of a
cable operator's service.

00:09:36.390 --> 00:09:38.360
They are meant to
deliver the service

00:09:38.360 --> 00:09:42.520
value that is being promised
by the service provider.

00:09:42.520 --> 00:09:44.620
There is an incentive
for the service provider

00:09:44.620 --> 00:09:46.330
to produce something
that is cost

00:09:46.330 --> 00:09:48.140
effective for their business.

00:09:48.140 --> 00:09:50.670
Ergo, you're not going to
get high performance chips

00:09:50.670 --> 00:09:54.200
inside an operator box, OK?

00:09:54.200 --> 00:09:56.350
The refresh cycle for these
is completely dependent

00:09:56.350 --> 00:09:59.470
on the service operator and
can typically range anywhere

00:09:59.470 --> 00:10:01.160
from 2 to 10 years.

00:10:01.160 --> 00:10:02.080
It depends.

00:10:02.080 --> 00:10:04.496
You can get a lot of longevity
out of some of these boxes.

00:10:04.496 --> 00:10:06.420
And they're optimized
for video playback.

00:10:06.420 --> 00:10:08.770
Now if you look at the
middle here, integrated TVs.

00:10:08.770 --> 00:10:12.080
Integrated TVs are
televisions that are smart.

00:10:12.080 --> 00:10:13.660
And they have an
operating system.

00:10:13.660 --> 00:10:17.170
In the case of Android TVs,
I think the most prolific one

00:10:17.170 --> 00:10:20.210
right now is the Sony
Bravia line, which

00:10:20.210 --> 00:10:21.950
includes Android TV in it.

00:10:21.950 --> 00:10:23.087
These are great.

00:10:23.087 --> 00:10:23.920
I love these things.

00:10:23.920 --> 00:10:24.530
They're huge.

00:10:24.530 --> 00:10:25.280
The color's great.

00:10:25.280 --> 00:10:27.380
The experience is wonderful.

00:10:27.380 --> 00:10:31.340
They fit right in the middle
when it comes to performance.

00:10:31.340 --> 00:10:34.300
This doesn't mean
they're under-powered,

00:10:34.300 --> 00:10:36.190
but it also means
they're not overpowered.

00:10:36.190 --> 00:10:40.640
You're not going to be able
to have 100 different shaders

00:10:40.640 --> 00:10:44.490
operating on your
multi-dimensional BSD

00:10:44.490 --> 00:10:49.720
trees of tons of models
being rendered in real time,

00:10:49.720 --> 00:10:53.490
and adaptive physics with
physics-based rendering on top

00:10:53.490 --> 00:10:54.290
of that.

00:10:54.290 --> 00:10:54.820
No.

00:10:54.820 --> 00:10:56.653
You're going to be able
to get a good gaming

00:10:56.653 --> 00:10:59.750
experience like you would
on a mid to low range phone

00:10:59.750 --> 00:11:00.720
or tablet.

00:11:00.720 --> 00:11:03.670
That's the kind of performance
you can expect on that.

00:11:03.670 --> 00:11:06.260
OTT boxes, over the
top boxes-- which are

00:11:06.260 --> 00:11:07.710
different than operator boxes.

00:11:07.710 --> 00:11:12.200
Over the top boxes are more
console-esque in nature,

00:11:12.200 --> 00:11:15.050
in that they are hardware
that a consumer typically buys

00:11:15.050 --> 00:11:17.400
on their own and adds
to the TV in order

00:11:17.400 --> 00:11:20.980
to extend its functionality
in some manner.

00:11:20.980 --> 00:11:24.180
So I've just put the example
here of the NVIDIA Tegra.

00:11:24.180 --> 00:11:25.685
That's the SHIELD TV.

00:11:25.685 --> 00:11:26.560
This thing's a beast.

00:11:26.560 --> 00:11:28.690
It's got a lot of
performance characteristics.

00:11:28.690 --> 00:11:31.060
It's really powerful,
and it's definitely

00:11:31.060 --> 00:11:32.837
targeted towards gamers.

00:11:32.837 --> 00:11:34.420
I'll talk more about
that in a minute.

00:11:34.420 --> 00:11:37.460
Let me just go back to the
TVs, the integrated TVs.

00:11:37.460 --> 00:11:40.210
I didn't mention the
refresh cycle here.

00:11:40.210 --> 00:11:42.450
TVs are typically
refreshed, and this

00:11:42.450 --> 00:11:44.290
is sort of a global
average, anywhere

00:11:44.290 --> 00:11:46.920
between six and nine
years-- every six and nine

00:11:46.920 --> 00:11:48.960
years, typically.

00:11:48.960 --> 00:11:52.860
And there's not a lot of
refresh cycle generations

00:11:52.860 --> 00:11:54.180
in the modern TV sense.

00:11:54.180 --> 00:11:57.150
But you can expect the
user will upgrade their TV

00:11:57.150 --> 00:11:59.040
system every six to nine years.

00:11:59.040 --> 00:12:02.100
Different than a phone, which
is every one to two years.

00:12:02.100 --> 00:12:04.910
Over the top boxes, this kind
of fits in the middle ground.

00:12:04.910 --> 00:12:07.650
It could be anywhere from
two, to four, to six years,

00:12:07.650 --> 00:12:10.090
depending on the features
that it's offering

00:12:10.090 --> 00:12:12.720
and how quickly those change.

00:12:12.720 --> 00:12:14.097
So yeah, this is
really important

00:12:14.097 --> 00:12:15.430
to consider as a game developer.

00:12:15.430 --> 00:12:18.070
Because you should be
positioning yourself

00:12:18.070 --> 00:12:21.930
right in the middle for
the broad distribution

00:12:21.930 --> 00:12:25.860
that I think everybody wants
when they release a game.

00:12:25.860 --> 00:12:28.330
Let me just talk about the
SHIELD TV for a moment.

00:12:28.330 --> 00:12:30.970
I think the hardware that
NVIDIA's created is great.

00:12:30.970 --> 00:12:32.000
I'm a gamer.

00:12:32.000 --> 00:12:34.940
I've got every game
console under the sun.

00:12:34.940 --> 00:12:37.280
And I really enjoy
playing with this.

00:12:37.280 --> 00:12:40.220
I've got a few of these at home.

00:12:40.220 --> 00:12:45.370
And while this is great at
playing AAA content with a game

00:12:45.370 --> 00:12:50.890
controller, I'm
not sure that you

00:12:50.890 --> 00:12:54.129
want to tie yourself necessarily
to one specific vendor.

00:12:54.129 --> 00:12:55.920
The whole case that
I'm trying to make here

00:12:55.920 --> 00:12:58.560
is you need to consider
constraints in the broader

00:12:58.560 --> 00:13:01.610
sense of game design to allow
yourself to reach the biggest

00:13:01.610 --> 00:13:04.420
audience that you can.

00:13:04.420 --> 00:13:05.920
I'll let you read
this for a second.

00:13:09.910 --> 00:13:14.020
The larger market will be
with integrated screens,

00:13:14.020 --> 00:13:17.860
such as what I showed you
a couple of slides ago.

00:13:17.860 --> 00:13:20.230
This middle market
flavor of Android TV

00:13:20.230 --> 00:13:24.667
is the one that I'm
encouraging you to explore.

00:13:24.667 --> 00:13:26.250
In order for your
game to be available

00:13:26.250 --> 00:13:30.080
to all potential users in
the mid-range and above,

00:13:30.080 --> 00:13:33.390
the constraints are
a bit more strict.

00:13:33.390 --> 00:13:37.190
The SOCs, systems on a
chip, in the mid-range TVs

00:13:37.190 --> 00:13:40.520
were simply not
designed for AAA games.

00:13:40.520 --> 00:13:43.920
They were designed to create
great media experiences

00:13:43.920 --> 00:13:46.380
and game experiences
at a price point

00:13:46.380 --> 00:13:49.400
the middle market
consumers can accept.

00:13:49.400 --> 00:13:52.056
The blending of use cases
can be a little disorienting

00:13:52.056 --> 00:13:53.430
to game developers
who are coming

00:13:53.430 --> 00:13:55.440
at this from a different
experience model.

00:13:55.440 --> 00:13:57.820
Typically, you're
targeting a console.

00:13:57.820 --> 00:14:00.680
You are targeting
a computer spec.

00:14:00.680 --> 00:14:02.770
TV is a different space.

00:14:02.770 --> 00:14:03.760
There's a theme here.

00:14:03.760 --> 00:14:05.870
Now, if we talk about
porting for a second,

00:14:05.870 --> 00:14:09.100
porting games from the mobile
market into the TV market.

00:14:09.100 --> 00:14:11.254
This makes a lot of sense
because, well, there's

00:14:11.254 --> 00:14:12.920
a whole plethora of
libraries out there.

00:14:12.920 --> 00:14:14.010
There's code base there.

00:14:14.010 --> 00:14:16.050
There's a lot of
successful games

00:14:16.050 --> 00:14:18.380
that would make a lot
of sense running on TV.

00:14:18.380 --> 00:14:21.730
However-- however,
however, however-- I've

00:14:21.730 --> 00:14:24.310
seen this happen too many
times when I review games.

00:14:24.310 --> 00:14:29.460
I will get a submission, and the
simplest things throw me off.

00:14:29.460 --> 00:14:31.420
How many of you have
touch screen TVs?

00:14:31.420 --> 00:14:33.300
Or even if you did--
don't answer that.

00:14:33.300 --> 00:14:35.520
Even if you had
touchscreen TVs, would you

00:14:35.520 --> 00:14:38.150
want to get up from where
you're sitting on your couch,

00:14:38.150 --> 00:14:41.850
walk the 10 feet, and
mash your greasy palm

00:14:41.850 --> 00:14:43.800
on that beautiful,
slick glass screen?

00:14:43.800 --> 00:14:45.660
Probably not.

00:14:45.660 --> 00:14:46.210
OK?

00:14:46.210 --> 00:14:48.940
So make sure that
the games you're

00:14:48.940 --> 00:14:51.240
making embrace the
constraints of the TV

00:14:51.240 --> 00:14:53.700
and that they reflect
it in the user model

00:14:53.700 --> 00:14:55.680
that you're presenting.

00:14:55.680 --> 00:14:58.250
Now just to cap this off, I
want to talk about two games.

00:14:58.250 --> 00:15:00.260
These aren't TV
games, necessarily.

00:15:00.260 --> 00:15:02.320
Well, "Badland" actually
is on Android TV,

00:15:02.320 --> 00:15:05.600
but I'm calling these out
for a different reason.

00:15:05.600 --> 00:15:08.550
"Candy Crush," I'm sure you're
familiar with the name "Candy

00:15:08.550 --> 00:15:11.120
Crush," if you have
not played it yourself.

00:15:11.120 --> 00:15:12.890
"Candy Crush" is amazing.

00:15:12.890 --> 00:15:16.630
And it's amazing to me
for one simple fact.

00:15:16.630 --> 00:15:21.980
They embraced a constraint of
swipe and totally owned it.

00:15:21.980 --> 00:15:26.710
They made an experience that is
phenomenal on mobile devices,

00:15:26.710 --> 00:15:29.670
because all you
have to do is swipe.

00:15:29.670 --> 00:15:33.310
Everything else was
sort of not focused on.

00:15:33.310 --> 00:15:35.360
It was the swipe experience
and optimizing it

00:15:35.360 --> 00:15:36.600
for the most enjoyment.

00:15:36.600 --> 00:15:38.054
That was their constraint.

00:15:38.054 --> 00:15:39.470
In the case of
"Badland," what did

00:15:39.470 --> 00:15:41.970
they do that stood
out in my mind?

00:15:41.970 --> 00:15:46.120
They made a game that works
amazingly well with one button.

00:15:46.120 --> 00:15:48.940
You can do a single tap or
you can do a single click.

00:15:48.940 --> 00:15:51.790
That's why it works
on TV with a remote.

00:15:51.790 --> 00:15:54.960
And they totally owned the
experience around that.

00:15:54.960 --> 00:15:58.000
It's not overly complicated,
but it is highly engaging.

00:15:58.000 --> 00:16:01.130
And the important thing is
both of these games are played

00:16:01.130 --> 00:16:02.870
by people who are not gamers.

00:16:02.870 --> 00:16:04.560
They don't
self-identify as gamers.

00:16:04.560 --> 00:16:07.960
What they do is they
enjoy an experience.

00:16:07.960 --> 00:16:09.850
And again, this goes
back to why I'm talking

00:16:09.850 --> 00:16:11.530
about the middle market.

00:16:11.530 --> 00:16:12.140
All right.

00:16:12.140 --> 00:16:13.960
In the interest of
time I must move on.

00:16:13.960 --> 00:16:16.070
But now we're going
to talk about some

00:16:16.070 --> 00:16:19.450
of the technical bits.

00:16:19.450 --> 00:16:22.270
These aren't so much
constraints as pieces of advice

00:16:22.270 --> 00:16:25.440
that I hope to imbue
upon you to help you

00:16:25.440 --> 00:16:27.340
along your journey
in developing games

00:16:27.340 --> 00:16:29.710
that either target
TV first, or help you

00:16:29.710 --> 00:16:33.490
in porting your games
from the mobile space.

00:16:33.490 --> 00:16:35.270
So let's talk about
one that I think

00:16:35.270 --> 00:16:36.660
came up in the
last presentation,

00:16:36.660 --> 00:16:38.410
but I'm going to beat
on this point again.

00:16:38.410 --> 00:16:39.670
It has to do with this.

00:16:39.670 --> 00:16:42.750
Remember we talked about TVs
not having touch screens?

00:16:42.750 --> 00:16:44.400
Yeah.

00:16:44.400 --> 00:16:47.880
If you have a game that's,
say, in the Play store

00:16:47.880 --> 00:16:50.210
that needs a touch screen
when you're on mobile,

00:16:50.210 --> 00:16:52.690
but you're going to
adapt it to work on TV.

00:16:52.690 --> 00:16:54.900
What do you do so it
doesn't get filtered?

00:16:54.900 --> 00:16:56.100
You do this.

00:16:56.100 --> 00:17:00.150
You set uses feature for Android
hardware touchscreen required

00:17:00.150 --> 00:17:01.720
equals false.

00:17:01.720 --> 00:17:04.560
Now, why am I actually spending
more than just a sentence

00:17:04.560 --> 00:17:05.579
on this?

00:17:05.579 --> 00:17:07.950
Well there's one
important thing here.

00:17:07.950 --> 00:17:10.030
Android developers
haven't had to worry

00:17:10.030 --> 00:17:12.200
about this particular
uses feature before.

00:17:12.200 --> 00:17:12.720
Why?

00:17:12.720 --> 00:17:17.569
Because all Android applications
implicitly assume touchscreen

00:17:17.569 --> 00:17:19.710
exists and is required.

00:17:19.710 --> 00:17:24.040
So if you're going to build
for TV and support mobile,

00:17:24.040 --> 00:17:25.005
you need this.

00:17:25.005 --> 00:17:26.380
This is the most
important thing.

00:17:26.380 --> 00:17:27.752
Don't forget this.

00:17:27.752 --> 00:17:29.710
While we're at it, here's
a couple other things

00:17:29.710 --> 00:17:32.126
that TVs don't have that you
probably want to feature out.

00:17:34.680 --> 00:17:37.177
I don't know about you, but I
don't have a camera on my TV.

00:17:37.177 --> 00:17:38.760
And I don't think I
want one in my TV.

00:17:38.760 --> 00:17:42.560
So yeah, if you're integrating
middleware packages

00:17:42.560 --> 00:17:45.860
like some sort of ad library
or what have you, some of those

00:17:45.860 --> 00:17:47.520
require camera.

00:17:47.520 --> 00:17:50.560
Remember to set its uses
feature required false,

00:17:50.560 --> 00:17:52.620
or you're going to filter
yourself off of TV.

00:17:52.620 --> 00:17:55.590
I had a partner recently
run into this problem.

00:17:55.590 --> 00:17:57.960
They'd released the game,
Then they added an advertising

00:17:57.960 --> 00:17:59.686
package that required camera.

00:17:59.686 --> 00:18:01.060
And then they
couldn't figure out

00:18:01.060 --> 00:18:02.768
why their game wasn't
showing up anymore.

00:18:02.768 --> 00:18:05.817
So just quickly analyzing the
manifest revealed, hey guys,

00:18:05.817 --> 00:18:07.150
you've got a camera requirement.

00:18:07.150 --> 00:18:09.260
TVs don't have cameras.

00:18:09.260 --> 00:18:09.760
Location.

00:18:09.760 --> 00:18:11.190
GPS.

00:18:11.190 --> 00:18:13.830
Unless someone is actively
stealing your television,

00:18:13.830 --> 00:18:16.000
chances are it's
not going to move.

00:18:16.000 --> 00:18:19.690
So you probably want
to remove, or at least

00:18:19.690 --> 00:18:23.880
set the required
equals false for GPS.

00:18:23.880 --> 00:18:28.470
Microphones, I get a question
about microphones occasionally.

00:18:28.470 --> 00:18:32.630
Microphones exist in the remote
control, some remote controls.

00:18:32.630 --> 00:18:35.620
But believe it or not,
the remote control

00:18:35.620 --> 00:18:37.080
is not part of your Android TV.

00:18:37.080 --> 00:18:38.510
It is an accessory.

00:18:38.510 --> 00:18:40.152
And so the device
itself does not

00:18:40.152 --> 00:18:42.360
have a remote control, or
at least current generation

00:18:42.360 --> 00:18:43.790
devices don't have
a remote control.

00:18:43.790 --> 00:18:45.070
I don't know what the
future's going to bring.

00:18:45.070 --> 00:18:47.240
But again, going back
to that middle market,

00:18:47.240 --> 00:18:49.240
you want to reach as
many TVs as possible.

00:18:49.240 --> 00:18:52.410
It's a good idea to set
required equals false on this.

00:18:52.410 --> 00:18:53.870
NFC.

00:18:53.870 --> 00:18:54.760
I don't know.

00:18:54.760 --> 00:18:57.110
Again, why would you walk
up to your TV with something

00:18:57.110 --> 00:18:58.294
and touch it?

00:18:58.294 --> 00:19:00.460
Maybe there's a use case
there I haven't thought of.

00:19:00.460 --> 00:19:02.043
But again, you're
going to want to set

00:19:02.043 --> 00:19:06.790
required equals false for
NFC, and obviously telephony.

00:19:06.790 --> 00:19:09.840
Yeah, my TV doesn't
do phone calls.

00:19:09.840 --> 00:19:11.040
And I'm glad for that.

00:19:11.040 --> 00:19:13.290
And then touchscreen obviously
I talked about already.

00:19:13.290 --> 00:19:17.190
Now-- pardon me.

00:19:17.190 --> 00:19:20.640
Now that we've turned off
all these required features,

00:19:20.640 --> 00:19:23.240
what if I have code that
uses these features?

00:19:23.240 --> 00:19:24.220
What do I do now?

00:19:24.220 --> 00:19:25.850
Am I totally boned?

00:19:25.850 --> 00:19:27.160
Like, ugh!

00:19:27.160 --> 00:19:28.124
No, no.

00:19:28.124 --> 00:19:29.540
You just use a
little bit of code.

00:19:29.540 --> 00:19:31.440
Now, I'm showing you
Android code here,

00:19:31.440 --> 00:19:34.540
but this could be adapted
for other languages.

00:19:34.540 --> 00:19:38.850
Unity has facilities to
call into the Android stack

00:19:38.850 --> 00:19:41.665
and do these exact
things as well.

00:19:41.665 --> 00:19:43.290
So you want to get
the package manager.

00:19:43.290 --> 00:19:44.998
You want to ask the
package manager, hey,

00:19:44.998 --> 00:19:46.850
do you have this feature
that I think I want

00:19:46.850 --> 00:19:48.570
to use in this particular case?

00:19:48.570 --> 00:19:49.820
And you can branch from there.

00:19:49.820 --> 00:19:52.260
You can decide, hey, I'm
going to use this or I'm not.

00:19:52.260 --> 00:19:54.260
In this case, this example
that I'm showing you,

00:19:54.260 --> 00:19:57.050
we're actually doing sort
of a branch logic here.

00:19:57.050 --> 00:19:58.480
Hey, does it have
a touch screen?

00:19:58.480 --> 00:20:00.550
And if it has a touch screen,
does it have telephony?

00:20:00.550 --> 00:20:02.400
Then there's a good
chance this is a phone.

00:20:02.400 --> 00:20:04.233
If it has the touchscreen
but not telephony,

00:20:04.233 --> 00:20:06.290
there's a good chance
that it's a tablet.

00:20:06.290 --> 00:20:07.840
Well, what about the other
case where it doesn't even

00:20:07.840 --> 00:20:08.430
have a touchscreen?

00:20:08.430 --> 00:20:09.620
Does that mean it's a TV?

00:20:09.620 --> 00:20:10.330
No.

00:20:10.330 --> 00:20:12.430
It just means that it
doesn't have a touch screen.

00:20:12.430 --> 00:20:13.120
Uh-oh.

00:20:13.120 --> 00:20:14.390
Now what do we do?

00:20:14.390 --> 00:20:17.230
Well, what if you need to detect
if you're running on an Android

00:20:17.230 --> 00:20:18.620
TV or a mobile device?

00:20:18.620 --> 00:20:20.610
What is a reliable
way of doing this?

00:20:20.610 --> 00:20:22.780
The thing that we
recommend is actually

00:20:22.780 --> 00:20:26.760
going to the UI mode
manager and querying it

00:20:26.760 --> 00:20:28.960
for what UI mode
it's currently in,

00:20:28.960 --> 00:20:31.885
because Android TVs operate in
what's called lean back mode.

00:20:31.885 --> 00:20:33.260
You know, when
you're leaned back

00:20:33.260 --> 00:20:34.718
and you've got your
remote control,

00:20:34.718 --> 00:20:37.190
and you're just chilling
watching Netflix.

00:20:37.190 --> 00:20:42.320
So, yeah, again, very
easy, light code that you

00:20:42.320 --> 00:20:43.860
can apply to your game logic.

00:20:43.860 --> 00:20:45.200
You might want to take
a picture of this.

00:20:45.200 --> 00:20:45.950
This is important.

00:20:48.584 --> 00:20:50.500
With this check combined
with the other checks

00:20:50.500 --> 00:20:52.083
around using features,
you can quickly

00:20:52.083 --> 00:20:54.190
determine what the
capabilities are of the device

00:20:54.190 --> 00:20:55.960
that you're
currently running on.

00:20:55.960 --> 00:20:58.780
This could be important for a
multitude of reasons, inputs,

00:20:58.780 --> 00:21:00.700
or decisions about
what you're going

00:21:00.700 --> 00:21:03.370
to do with the UI,
how constrained it is.

00:21:03.370 --> 00:21:06.780
One side note here, this is
really useful for determining

00:21:06.780 --> 00:21:11.200
if you want to add
sort of a-- wow,

00:21:11.200 --> 00:21:12.440
my brain's drawing a blank.

00:21:12.440 --> 00:21:14.065
There's a border you
want to put around

00:21:14.065 --> 00:21:17.820
things to prevent overscan
from affecting your game UI.

00:21:17.820 --> 00:21:19.447
Because developing
for phone, you've

00:21:19.447 --> 00:21:20.530
got pixel perfect screens.

00:21:20.530 --> 00:21:23.670
You can push pixels right up
to the edges and it's fine.

00:21:23.670 --> 00:21:26.100
But on TVs, not all TVs
are created equal because

00:21:26.100 --> 00:21:27.580
of this thing called overscan.

00:21:27.580 --> 00:21:29.580
Again, I don't have a lot
of time to go into it.

00:21:29.580 --> 00:21:33.870
But it can eat up to 5%
around your entire border

00:21:33.870 --> 00:21:37.990
of your display space and
you have no control over it.

00:21:37.990 --> 00:21:40.460
So the best thing to do is
detect if you're running on TV.

00:21:40.460 --> 00:21:44.320
Either give the user the option
to adjust or scale the display

00:21:44.320 --> 00:21:46.004
area accordingly,
or if you don't

00:21:46.004 --> 00:21:48.170
want to provide that, you
don't want to build it in,

00:21:48.170 --> 00:21:50.920
just assume a 5%
margin for yourself.

00:21:50.920 --> 00:21:53.029
And put all the important
information more

00:21:53.029 --> 00:21:53.820
towards the center.

00:21:55.200 --> 00:21:59.710
While I'm on the topic of
things we should do with TV UIs,

00:21:59.710 --> 00:22:02.540
we should probably talk
about network state.

00:22:02.540 --> 00:22:04.930
This is more of a personal
gripe that I have around

00:22:04.930 --> 00:22:10.260
what I see in a lot of games
that I download on mobile.

00:22:10.260 --> 00:22:13.600
Games that require network
access and then only

00:22:13.600 --> 00:22:16.440
check for Wi-Fi make
me really angry,

00:22:16.440 --> 00:22:20.690
because I have very
high speed cell data

00:22:20.690 --> 00:22:24.290
plans that I could perfectly, or
I could for sure take advantage

00:22:24.290 --> 00:22:24.790
of.

00:22:24.790 --> 00:22:28.030
But the games that prevent me
from actually using it really

00:22:28.030 --> 00:22:28.830
bother me.

00:22:28.830 --> 00:22:30.590
On TV it's a different story.

00:22:30.590 --> 00:22:33.220
You might have
Ethernet or Wi-Fi.

00:22:33.220 --> 00:22:36.410
So now we've got this crossover
spectrum of, it could be 3G.

00:22:36.410 --> 00:22:37.450
It could be Wi-Fi.

00:22:37.450 --> 00:22:38.620
It could be Ethernet.

00:22:38.620 --> 00:22:39.614
What do we do now?

00:22:39.614 --> 00:22:41.280
You should really
just be checking, hey,

00:22:41.280 --> 00:22:42.670
am I connected to the internet?

00:22:42.670 --> 00:22:44.850
Do I have network access?

00:22:44.850 --> 00:22:46.070
This is the way to do it.

00:22:46.070 --> 00:22:47.020
Don't go after Wi-Fi.

00:22:47.020 --> 00:22:49.736
I mean, I'm not saying
don't ever check Wi-Fi.

00:22:49.736 --> 00:22:51.360
I'm saying for the
general connectivity

00:22:51.360 --> 00:22:55.040
to the broader world of the
internet, you should just do,

00:22:55.040 --> 00:22:56.180
am I connected?

00:22:56.180 --> 00:22:58.420
And then if you want
certain features to only

00:22:58.420 --> 00:23:02.080
be available in Wi-Fi, then
you can do a Wi-Fi check.

00:23:02.080 --> 00:23:05.480
Remember to always add the
user's permission, entry

00:23:05.480 --> 00:23:07.970
permission, access network
state when doing this, or this

00:23:07.970 --> 00:23:08.650
won't work.

00:23:08.650 --> 00:23:11.511
You need to put that bottom
part in your manifest.

00:23:11.511 --> 00:23:13.260
So what if you need
to check for Ethernet?

00:23:13.260 --> 00:23:17.040
That's actually not that much
more code at all, actually.

00:23:17.040 --> 00:23:20.070
You can just, again, get
the active network info

00:23:20.070 --> 00:23:22.180
and check it against
type Ethernet

00:23:22.180 --> 00:23:25.574
in the connectivity
manager constant.

00:23:25.574 --> 00:23:27.740
I'll give you a second to
take a picture or scribble

00:23:27.740 --> 00:23:30.891
anything because we're
going to shift gears again.

00:23:30.891 --> 00:23:31.890
I'm good at that, right?

00:23:31.890 --> 00:23:32.610
Shifting gears?

00:23:32.610 --> 00:23:33.870
No.

00:23:33.870 --> 00:23:37.560
Let's go back to the
infrared remotes.

00:23:37.560 --> 00:23:41.340
TV remotes have been around
for a long, long time.

00:23:41.340 --> 00:23:42.840
I think the first
ones were actually

00:23:42.840 --> 00:23:44.560
wired right into the TVs.

00:23:44.560 --> 00:23:48.680
And I believe, if memory
serves me, it was 1954.

00:23:48.680 --> 00:23:51.900
And NEC TV was
introduced in the US that

00:23:51.900 --> 00:23:54.600
had a long cable
with a channel up

00:23:54.600 --> 00:23:56.440
and channel down
that actually had

00:23:56.440 --> 00:24:00.060
a mechanical actuator
on the channel knob,

00:24:00.060 --> 00:24:02.597
and it would turn it to
the different channels.

00:24:02.597 --> 00:24:04.180
We've progressed a
long way from then.

00:24:04.180 --> 00:24:05.680
Most of the remotes
that you get now

00:24:05.680 --> 00:24:08.140
actually have an 8-bit
microcontroller in them

00:24:08.140 --> 00:24:10.380
to deal with the codes
and do the IR blasts.

00:24:10.380 --> 00:24:17.240
But infrared remotes
are a reality

00:24:17.240 --> 00:24:18.500
for today's TV environment.

00:24:18.500 --> 00:24:20.990
And you have to consider
that as a game developer.

00:24:20.990 --> 00:24:25.990
Maybe you want to have a game
that operates as a strategy

00:24:25.990 --> 00:24:27.570
game, something
that's less twitchy,

00:24:27.570 --> 00:24:30.960
that could take advantage of
being played with a simple IR

00:24:30.960 --> 00:24:31.480
remote.

00:24:31.480 --> 00:24:34.420
If you can do that, you're going
to be compatible with almost

00:24:34.420 --> 00:24:35.940
everything.

00:24:35.940 --> 00:24:39.730
So consider this an
optional design constraint,

00:24:39.730 --> 00:24:42.410
that if you can pull it off,
you could be very successful

00:24:42.410 --> 00:24:46.090
with people, again, who are
not labeling themselves gamers.

00:24:46.090 --> 00:24:47.139
All right?

00:24:47.139 --> 00:24:49.180
I'm going to quickly go
through these last parts,

00:24:49.180 --> 00:24:51.540
because I'm running
short on time.

00:24:51.540 --> 00:24:53.480
Likewise, maybe you want
to step it up a notch

00:24:53.480 --> 00:24:57.290
and consider just
regular remotes that

00:24:57.290 --> 00:24:58.210
come with Android TV.

00:24:58.210 --> 00:25:02.140
So you've got either Wi-Fi
direct or Bluetooth-connected

00:25:02.140 --> 00:25:03.910
remote controls.

00:25:03.910 --> 00:25:07.466
Or maybe you want to go to
the 16 button game controller.

00:25:07.466 --> 00:25:08.840
As we're stepping
up here though,

00:25:08.840 --> 00:25:11.470
we're cutting off chunks
of our potential audience.

00:25:11.470 --> 00:25:14.010
So just keep that in mind.

00:25:14.010 --> 00:25:17.170
I'm going to close out here, the
last technical piece before I

00:25:17.170 --> 00:25:19.510
bid you adieu.

00:25:19.510 --> 00:25:22.254
The game controllers that I
mentioned on the end there,

00:25:22.254 --> 00:25:23.420
you'd think this would work.

00:25:23.420 --> 00:25:27.420
Right, if you wanted to specify
that your game requires a game

00:25:27.420 --> 00:25:30.270
controller, this
makes sense, yeah?

00:25:30.270 --> 00:25:33.290
And it uses feature
Android hardware Gamepad.

00:25:33.290 --> 00:25:35.040
It follows the pattern
of everything else.

00:25:35.040 --> 00:25:37.320
Except you'd be wrong.

00:25:37.320 --> 00:25:39.420
This does not do what
you would assume it does.

00:25:39.420 --> 00:25:42.450
And I'm about to
break your brain.

00:25:42.450 --> 00:25:45.130
So we were talking before about
accessories and microphones

00:25:45.130 --> 00:25:45.630
and stuff.

00:25:45.630 --> 00:25:47.130
And so I got this
Android TV here.

00:25:47.130 --> 00:25:50.970
And I got my paired Bluetooth
16 button controller.

00:25:50.970 --> 00:25:55.660
And the reality
is the controller

00:25:55.660 --> 00:25:59.830
doesn't exist as far as Android
as a platform is concerned.

00:25:59.830 --> 00:26:02.760
So what you actually need
to do-- and I realized

00:26:02.760 --> 00:26:05.080
I'm missing the
slide for this now.

00:26:05.080 --> 00:26:06.500
Silly me.

00:26:06.500 --> 00:26:09.500
You actually need to specify
that if your game requires

00:26:09.500 --> 00:26:12.760
a Gamepad, you have to put uses
feature Android name, Android

00:26:12.760 --> 00:26:16.780
hardware Gamepad,
required equals false.

00:26:16.780 --> 00:26:18.970
So if you require a
Gamepad, the requirement

00:26:18.970 --> 00:26:21.030
has to be set to false.

00:26:21.030 --> 00:26:23.910
Does that make any sense?

00:26:23.910 --> 00:26:26.390
It's something that I want
you really just to remember.

00:26:26.390 --> 00:26:28.961
The reason for this has to
do with a lot of legacy stuff

00:26:28.961 --> 00:26:31.210
that went on with the way
the permissions system works

00:26:31.210 --> 00:26:32.320
and the filters work.

00:26:32.320 --> 00:26:34.320
But I want to
convey it on to you.

00:26:34.320 --> 00:26:37.360
Please, if you're going to
build a game for Android TV that

00:26:37.360 --> 00:26:40.290
requires a Gamepad,
set uses feature,

00:26:40.290 --> 00:26:42.670
Android hardware Gamepad,
required equals false.

00:26:42.670 --> 00:26:43.470
Just remember that.

00:26:43.470 --> 00:26:46.420
Because at the end
the day, it all

00:26:46.420 --> 00:26:48.420
comes down to the
experience that you're

00:26:48.420 --> 00:26:52.130
going to provide to those
in front of the screen.

00:26:52.130 --> 00:26:54.000
All right?

00:26:54.000 --> 00:26:56.110
Couple of resources
here for you.

00:26:56.110 --> 00:26:58.620
We've got a great site
on building TV games.

00:26:58.620 --> 00:27:00.430
Highly encourage you
to check this out.

00:27:00.430 --> 00:27:02.000
It's got a lot of
information that

00:27:02.000 --> 00:27:04.130
is valuable beyond
what I've talked about.

00:27:04.130 --> 00:27:06.800
And given that I've given
you a few history lessons,

00:27:06.800 --> 00:27:10.400
that stuff is not on this site.

00:27:10.400 --> 00:27:13.150
I did a Medium post
maybe six months ago

00:27:13.150 --> 00:27:16.630
just on how to detect
Android TV and Unity.

00:27:16.630 --> 00:27:18.300
That might be useful to you.

00:27:18.300 --> 00:27:20.540
And lastly, we have
an amazing site

00:27:20.540 --> 00:27:22.540
that's been put together
with a lot of hard work

00:27:22.540 --> 00:27:24.190
from our developer
advocacy group

00:27:24.190 --> 00:27:26.250
on making games with
Google technology

00:27:26.250 --> 00:27:28.500
that I'd love for you
to check out and see

00:27:28.500 --> 00:27:31.210
if there are things in
there that your games

00:27:31.210 --> 00:27:32.430
can benefit from.

00:27:32.430 --> 00:27:35.550
So I'm going to do
questions offline.

00:27:35.550 --> 00:27:37.400
But thank you very
much for your time,

00:27:37.400 --> 00:27:39.320
and I hope you
enjoyed this talk.

00:27:39.320 --> 00:27:42.670
[MUSIC PLAYING]

