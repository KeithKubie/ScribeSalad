WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.750
SPEAKER 1: There are a lot
of fantastic UI and component

00:00:03.750 --> 00:00:05.880
libraries out there
that work with Angular.

00:00:05.880 --> 00:00:07.770
And we are dedicated
to supporting them.

00:00:07.770 --> 00:00:11.220
But at the same time, Google
has a design philosophy

00:00:11.220 --> 00:00:12.750
called Material Design.

00:00:12.750 --> 00:00:15.630
And it was our goal to
encapsulate the best practices

00:00:15.630 --> 00:00:18.570
from Material Design and
make it easy for developers

00:00:18.570 --> 00:00:20.840
to take advantage
of those things.

00:00:20.840 --> 00:00:23.010
And to help demonstrate
and show some

00:00:23.010 --> 00:00:26.160
of the capabilities of Material
Design and the Material Design

00:00:26.160 --> 00:00:28.590
components, I'd like to
invite Kara Erickson up

00:00:28.590 --> 00:00:30.510
to the stage from
the Angular team.

00:00:30.510 --> 00:00:34.010
[APPLAUSE]

00:01:22.015 --> 00:01:24.366
KARA ERICKSON:
[SPEAKING CHINESE]

00:03:07.040 --> 00:03:10.710
OK, so this is going to be
kind of a lightning demo

00:03:10.710 --> 00:03:12.480
just to give you a
taste of what it's

00:03:12.480 --> 00:03:15.960
like to develop with Angular
and Angular Material.

00:03:15.960 --> 00:03:18.870
But all of the code will be
available online on GitHub

00:03:18.870 --> 00:03:21.840
after the demo on my
GitHub profile Kara--

00:03:21.840 --> 00:03:25.240
so GitHub.com/kara.

00:03:25.240 --> 00:03:28.080
OK, so since we use
the Angular CLI,

00:03:28.080 --> 00:03:31.780
we can go ahead and
serve right off the bat.

00:03:31.780 --> 00:03:35.040
And it will spin up a
local server for us.

00:03:35.040 --> 00:03:38.110
So let's just go ahead and
wait for that to spin up.

00:03:38.110 --> 00:03:43.900
And on localhost 4200,
we'll see boilerplate text

00:03:43.900 --> 00:03:45.370
that comes with the CLI.

00:03:45.370 --> 00:03:47.764
All right, so now that we have
everything kind of set up,

00:03:47.764 --> 00:03:49.930
let's talk about the
application that we'll actually

00:03:49.930 --> 00:03:51.410
be building.

00:03:51.410 --> 00:03:55.510
So it's a dating site for
dogs, as we mentioned.

00:03:55.510 --> 00:03:58.890
And so let's start by building
the application scaffold.

00:03:58.890 --> 00:04:01.390
So we'll need a toolbar at the
top that says the application

00:04:01.390 --> 00:04:04.660
name, navigation
menu on the left that

00:04:04.660 --> 00:04:07.540
can have our navigation
links for the site,

00:04:07.540 --> 00:04:09.630
and most importantly,
the dog profiles.

00:04:09.630 --> 00:04:13.390
That will be in the middle so
your dog can find their desired

00:04:13.390 --> 00:04:14.990
dog.

00:04:14.990 --> 00:04:19.279
So, let's put this over here.

00:04:19.279 --> 00:04:21.779
We're going be using Angular
Material to set this up.

00:04:21.779 --> 00:04:23.990
So let's start by setting
Angular Material up.

00:04:26.910 --> 00:04:29.970
When you use the CLI, it
generates a module definition

00:04:29.970 --> 00:04:31.890
file for you.

00:04:31.890 --> 00:04:36.120
So these modules kind of come
with it, these three modules.

00:04:36.120 --> 00:04:38.100
You'll also need to
import the Material module

00:04:38.100 --> 00:04:40.290
if you want to use Material.

00:04:40.290 --> 00:04:43.359
Let me make sure
that imported-- yeah.

00:04:43.359 --> 00:04:45.150
And then call for a
root on it to make sure

00:04:45.150 --> 00:04:48.120
that it comes with all the
providers that it needs.

00:04:48.120 --> 00:04:52.530
Next we need to add in the core
styles for Angular Material.

00:04:52.530 --> 00:04:55.830
So in our styles.css file,
which was also generated,

00:04:55.830 --> 00:04:58.950
we can go ahead and add
Angular Materials core styles

00:04:58.950 --> 00:05:00.870
from its npm package.

00:05:00.870 --> 00:05:03.620
And we chose the core styles
that are prebuilt with a theme

00:05:03.620 --> 00:05:04.120
here.

00:05:04.120 --> 00:05:06.780
So you can see it's indigo pink.

00:05:06.780 --> 00:05:09.460
And we want to import
the Material Design font.

00:05:09.460 --> 00:05:11.590
This will allow us to
add Material Design

00:05:11.590 --> 00:05:13.360
icons in a simple way.

00:05:13.360 --> 00:05:16.420
So normally we would just
include the link here.

00:05:16.420 --> 00:05:18.850
But since we have low
network connectivity,

00:05:18.850 --> 00:05:20.710
let's do it offline.

00:05:20.710 --> 00:05:23.470
So instead we're just going
to copy-paste the actual style

00:05:23.470 --> 00:05:28.340
sheet that we would
have loaded over HTTP.

00:05:28.340 --> 00:05:31.470
So now that we are
all done with setup,

00:05:31.470 --> 00:05:33.530
we can go ahead and
start changing the markup

00:05:33.530 --> 00:05:36.230
for our app component,
so our main component.

00:05:36.230 --> 00:05:38.084
So let's start by
building a toolbar.

00:05:38.084 --> 00:05:39.500
And we can use the
Material Design

00:05:39.500 --> 00:05:42.200
component called mdToolbar.

00:05:42.200 --> 00:05:43.970
And we're setting
the color to primary,

00:05:43.970 --> 00:05:46.280
which just means that
it's going to take

00:05:46.280 --> 00:05:48.720
the primary color from the
palette that we selected,

00:05:48.720 --> 00:05:53.530
so indigo, and put that into
the background of our toolbar.

00:05:53.530 --> 00:05:56.320
So let's wait for
this to refresh.

00:05:56.320 --> 00:05:59.280
You see we have this
nice puppy love toolbar.

00:05:59.280 --> 00:06:00.790
So next let's go
ahead and build out

00:06:00.790 --> 00:06:02.600
the sidenav menu on the left.

00:06:02.600 --> 00:06:04.180
So if you want to
open a sidenav,

00:06:04.180 --> 00:06:06.160
you probably need a
menu icon to let people

00:06:06.160 --> 00:06:08.710
know that they can click on it.

00:06:08.710 --> 00:06:12.370
So we have this lovely
component called mdIcon.

00:06:12.370 --> 00:06:15.890
And this allows you to use
the code for a specific icon,

00:06:15.890 --> 00:06:18.820
and it will use the font that
we loaded before to turn it

00:06:18.820 --> 00:06:20.350
into the actual icon.

00:06:20.350 --> 00:06:21.910
So you can see
that with that line

00:06:21.910 --> 00:06:24.590
we already have menu
items right there.

00:06:24.590 --> 00:06:27.190
You'll also notice that
there's no margin here.

00:06:27.190 --> 00:06:30.460
And that's because we don't have
margins for any of our Material

00:06:30.460 --> 00:06:31.799
Design components.

00:06:31.799 --> 00:06:33.340
And this is by design
because we know

00:06:33.340 --> 00:06:35.080
they will depend on
where you're actually

00:06:35.080 --> 00:06:36.480
going to be dropping it.

00:06:36.480 --> 00:06:38.909
So we let you set your
own margins yourself.

00:06:38.909 --> 00:06:40.450
So here we're setting
a custom margin

00:06:40.450 --> 00:06:42.160
for the icon and toolbar.

00:06:44.710 --> 00:06:46.210
Looks a little bit better.

00:06:46.210 --> 00:06:48.010
Next, let's make
this into a button

00:06:48.010 --> 00:06:50.200
so that we can open
up the sidenav.

00:06:50.200 --> 00:06:54.835
So, we're just going to wrap
the icon in button tags.

00:06:54.835 --> 00:06:56.960
And it's going to give it
the default button style.

00:06:56.960 --> 00:07:00.150
So we're also going to
tag it with mdIcon button,

00:07:00.150 --> 00:07:03.460
so that we get
overrides with those.

00:07:03.460 --> 00:07:06.610
So now we need the
actual sidenav.

00:07:06.610 --> 00:07:10.090
So we have a component
called mdSidenav.

00:07:10.090 --> 00:07:13.310
So if we create
a sidenav layout,

00:07:13.310 --> 00:07:17.490
and we put all of our
existing HTML in there,

00:07:17.490 --> 00:07:20.990
we go ahead and create the
sidenav with the sidenav tag.

00:07:20.990 --> 00:07:23.784
I'm just going to put some
boilerplate in there for now.

00:07:23.784 --> 00:07:25.200
And so we can use
this cool trick.

00:07:25.200 --> 00:07:29.000
So if we create a local template
variable called sidenav,

00:07:29.000 --> 00:07:33.050
when you click on the button
it can call sidenav.open.

00:07:33.050 --> 00:07:36.710
So all that means is when
you use the hash syntax,

00:07:36.710 --> 00:07:38.900
it's going to set
the sidenav variable

00:07:38.900 --> 00:07:40.850
to the sidenav directive.

00:07:40.850 --> 00:07:43.490
And then on click, it's
going to call the open method

00:07:43.490 --> 00:07:45.470
on that sidenav directive.

00:07:45.470 --> 00:07:48.260
So if we click on it, you can
see that we have the sidenav,

00:07:48.260 --> 00:07:49.540
but it's not full screen.

00:07:49.540 --> 00:07:51.490
So let's go ahead and
add the full screen.

00:07:51.490 --> 00:07:53.702
That should be here.

00:07:53.702 --> 00:07:54.605
Let that refresh.

00:07:59.730 --> 00:08:01.970
All right, so now
we have our sidenav.

00:08:01.970 --> 00:08:03.600
So that's cool.

00:08:03.600 --> 00:08:06.980
But obviously we don't want
this to be our content, right?

00:08:06.980 --> 00:08:09.500
We want a list of
navigation links.

00:08:09.500 --> 00:08:12.770
So we have a component for
that called mdSidenavList--

00:08:12.770 --> 00:08:14.900
or mdNavList, excuse me.

00:08:14.900 --> 00:08:17.692
And navlist takes
a list of anchors.

00:08:17.692 --> 00:08:19.460
So we can just add
an anchor here.

00:08:19.460 --> 00:08:21.780
And each anchor is
going to be a list item.

00:08:21.780 --> 00:08:24.680
So we're going two list items,
one for your account page

00:08:24.680 --> 00:08:27.170
and one for your dog profiles.

00:08:27.170 --> 00:08:31.027
So each list item is going
to have two lines, one

00:08:31.027 --> 00:08:32.110
with the name of the link.

00:08:32.110 --> 00:08:36.070
So in this case it's going to
be your account, so [CHINESE].

00:08:36.070 --> 00:08:40.690
And then we also want
a description here.

00:08:40.690 --> 00:08:43.299
And so we're just
going to see [CHINESE].

00:08:47.970 --> 00:08:52.050
So for our second list item, we
want our dog profiles, right?

00:08:52.050 --> 00:08:55.050
So we're just going
to say [CHINESE].

00:08:57.800 --> 00:08:59.985
And then here we're going
to have a call to action,

00:08:59.985 --> 00:09:01.994
so we're going to say [CHINESE].

00:09:07.170 --> 00:09:10.830
All right, so let's add
that description class

00:09:10.830 --> 00:09:11.512
that we started.

00:09:11.512 --> 00:09:13.470
So we're just going to
give it a separate color

00:09:13.470 --> 00:09:14.220
for some contrast.

00:09:18.560 --> 00:09:19.628
Wait for that to refresh.

00:09:23.300 --> 00:09:26.540
So now we have our two links,
which hopefully you can see.

00:09:26.540 --> 00:09:29.060
I think it's a little cut off.

00:09:29.060 --> 00:09:31.699
So let's add some icons to
the left of each of the link

00:09:31.699 --> 00:09:33.740
so you can see visually
kind of what each link is

00:09:33.740 --> 00:09:34.704
going to represent.

00:09:34.704 --> 00:09:37.430
So this is another thing
that you can do really easily

00:09:37.430 --> 00:09:39.950
with the navlist.

00:09:39.950 --> 00:09:43.190
So we can use mdIcon once again.

00:09:43.190 --> 00:09:44.990
And for a little
account icon, we

00:09:44.990 --> 00:09:47.632
can use the assignment end icon.

00:09:47.632 --> 00:09:50.030
And we're also going to
tag it with mdList icon

00:09:50.030 --> 00:09:53.884
so it's spaced appropriately
for that context.

00:09:53.884 --> 00:09:55.550
And then here, we
want a little pawprint

00:09:55.550 --> 00:09:57.622
so that we can see
that it's dogs.

00:09:57.622 --> 00:09:59.330
So we're just going
to use the pets icon.

00:10:05.824 --> 00:10:06.490
All right, cool.

00:10:06.490 --> 00:10:09.640
So we basically have our
application scaffold done.

00:10:09.640 --> 00:10:11.320
We have our toolbar.

00:10:11.320 --> 00:10:13.450
We have a sidenav that
opens with our links.

00:10:13.450 --> 00:10:16.790
But obviously we're missing all
the important parts, content.

00:10:16.790 --> 00:10:21.610
So let's start by
building our dog profiles.

00:10:21.610 --> 00:10:24.910
So we can create
a container here.

00:10:24.910 --> 00:10:27.900
And each dog profile is
going to be an mdCards.

00:10:27.900 --> 00:10:30.130
That's just like a little
container for information.

00:10:30.130 --> 00:10:33.250
And we're going to have a card
for each dog in our dogs array.

00:10:33.250 --> 00:10:36.030
So we're going to have to create
that dogs array in a moment.

00:10:36.030 --> 00:10:37.980
And then each
card, for now we're

00:10:37.980 --> 00:10:45.100
just going to interpolate the
dog's name-- oops, dog.name.

00:10:45.100 --> 00:10:47.970
And now we need to
create this dogs array.

00:10:47.970 --> 00:10:54.450
So in our component definition,
I've preloaded this dogs array.

00:10:54.450 --> 00:10:57.930
And it's just a list of
Angular team dog names.

00:10:57.930 --> 00:10:59.760
And the locations
of all of their dog

00:10:59.760 --> 00:11:02.810
pictures I already
pasted in here.

00:11:02.810 --> 00:11:06.290
And then in our
CSS, you'll recall

00:11:06.290 --> 00:11:07.850
that everything needs a margin.

00:11:07.850 --> 00:11:10.310
So I'm going to add
margins for the card.

00:11:10.310 --> 00:11:12.140
I'm going to give it a width.

00:11:12.140 --> 00:11:15.350
And then to ensure that
the cards are organized

00:11:15.350 --> 00:11:19.190
in a nice way, I'm just going
to make its container a flex

00:11:19.190 --> 00:11:21.620
container.

00:11:21.620 --> 00:11:23.970
So let's wait for that
to refresh, because none

00:11:23.970 --> 00:11:25.640
of the CSS is there.

00:11:25.640 --> 00:11:26.660
OK, there we go.

00:11:26.660 --> 00:11:28.570
All right, so now we
have all the dog cards.

00:11:28.570 --> 00:11:30.060
So that's cool.

00:11:30.060 --> 00:11:32.220
But you can't really tell
much about these dogs.

00:11:32.220 --> 00:11:34.790
Let's add a description
for each dog.

00:11:34.790 --> 00:11:39.440
So cards also have a
feature for card content.

00:11:39.440 --> 00:11:41.285
So we can add a card
content container here.

00:11:41.285 --> 00:11:43.160
And we're also going to
give it a description

00:11:43.160 --> 00:11:45.210
class for contrast.

00:11:45.210 --> 00:11:47.210
And we're just going to
do a generic description

00:11:47.210 --> 00:11:49.001
for all of these because
we don't have time

00:11:49.001 --> 00:11:50.690
to personalize it.

00:11:50.690 --> 00:11:53.665
OK, so we're going
to say [CHINESE].

00:11:53.665 --> 00:11:56.647
And we're going to interpolate
once again the dog's name.

00:11:56.647 --> 00:12:00.842
And then [CHINESE].

00:12:15.320 --> 00:12:17.050
It seems like dog stuff, right?

00:12:17.050 --> 00:12:18.580
OK, [CHINESE].

00:12:22.810 --> 00:12:24.580
So wait for that to refresh.

00:12:28.359 --> 00:12:30.400
OK, cool, and you'll notice
that each of the dogs

00:12:30.400 --> 00:12:32.900
has their name
interpolated, too.

00:12:32.900 --> 00:12:38.270
So what's a profile without an
image for your dog to examine?

00:12:38.270 --> 00:12:40.220
So we can easily
add images to these.

00:12:40.220 --> 00:12:41.990
So I'm just going
to get out of this.

00:12:41.990 --> 00:12:43.700
So, we'll add an image tag.

00:12:43.700 --> 00:12:45.290
We'll tag it with mdCardImage.

00:12:45.290 --> 00:12:49.046
That just lets the card know
to make it kind of full width.

00:12:49.046 --> 00:12:52.700
And then we're going to take the
source from our Assets folder,

00:12:52.700 --> 00:12:56.810
using the dog.image
thing in our array.

00:12:56.810 --> 00:12:58.460
And then our alt
text is just going

00:12:58.460 --> 00:13:01.238
to be the dog's name, [CHINESE].

00:13:07.560 --> 00:13:10.360
So hopefully the
image will show up.

00:13:10.360 --> 00:13:13.450
OK, nice, now we have
these lovely dogs.

00:13:13.450 --> 00:13:16.000
So next let's create
a way for your dog

00:13:16.000 --> 00:13:19.450
to interact with all
of these handsome dogs.

00:13:19.450 --> 00:13:22.760
So we can create a
card action section--

00:13:22.760 --> 00:13:26.106
card actions section.

00:13:26.106 --> 00:13:27.730
And we're going to
align it on the end.

00:13:27.730 --> 00:13:31.210
That just puts the
buttons on the right side.

00:13:31.210 --> 00:13:32.966
And we're going to
create two buttons.

00:13:32.966 --> 00:13:34.840
And they're going to be
style with mdButtons,

00:13:34.840 --> 00:13:37.690
make them look a little
nicer, with the primary color

00:13:37.690 --> 00:13:40.240
of your palette, which
is once again indigo.

00:13:40.240 --> 00:13:43.960
So we want your dog to be
able to sniff the other dog.

00:13:43.960 --> 00:13:45.570
This is going to be--

00:13:45.570 --> 00:13:48.170
oops, can't type right now.

00:13:48.170 --> 00:13:50.200
One second, I think it's frozen.

00:13:54.385 --> 00:13:56.430
All right, let me just--

00:13:56.430 --> 00:13:59.302
I may have to restart WebStorm.

00:13:59.302 --> 00:14:00.685
Hold on.

00:14:00.685 --> 00:14:03.920
There we go.

00:14:03.920 --> 00:14:06.960
All right, let's reopen this.

00:14:06.960 --> 00:14:09.480
Hope that I can type again.

00:14:09.480 --> 00:14:10.260
Still can't type.

00:14:15.661 --> 00:14:16.643
Come on.

00:14:20.090 --> 00:14:22.680
This is not good.

00:14:22.680 --> 00:14:25.500
OK, I may have to
restart this computer.

00:14:25.500 --> 00:14:27.110
I feel like this is not working.

00:14:29.790 --> 00:14:33.930
OK, let's go ahead
and quit WebStorm.

00:14:33.930 --> 00:14:37.236
I'm going to try one more thing.

00:14:37.236 --> 00:14:39.152
All right, let's restart this.

00:14:45.870 --> 00:14:47.417
Please let me type.

00:14:47.417 --> 00:14:49.375
I think I may just have
to restart my computer.

00:14:53.745 --> 00:14:55.790
Maybe I could try--

00:14:55.790 --> 00:14:56.942
let's open [INAUDIBLE].

00:14:56.942 --> 00:14:59.340
Yeah, nothing's working.

00:14:59.340 --> 00:15:02.010
OK, I'm going to restart.

00:15:02.010 --> 00:15:03.650
Yeah, why doesn't
Steven do the slides

00:15:03.650 --> 00:15:05.820
while I see if I can
get my computer to work?

00:15:05.820 --> 00:15:06.700
OK, one second.

00:15:16.419 --> 00:15:18.210
SPEAKER 1: That never
happens to any of us,

00:15:18.210 --> 00:15:19.956
does it, where
IDE stops working?

00:15:22.620 --> 00:15:24.939
So was anyone
impressed with Kara?

00:15:24.939 --> 00:15:26.230
That was pretty awesome, right?

00:15:26.230 --> 00:15:28.376
[APPLAUSE]

00:15:31.820 --> 00:15:33.652
So hopefully it's
making sense how easy

00:15:33.652 --> 00:15:36.110
it is to start using some of
these things like the Material

00:15:36.110 --> 00:15:37.693
Design components
that we're providing

00:15:37.693 --> 00:15:40.220
for you, to make it easy
to build applications

00:15:40.220 --> 00:15:41.840
with Angular.

00:15:41.840 --> 00:15:43.490
But one of the things
that-- once we've

00:15:43.490 --> 00:15:45.531
made it easy to build
applications that we really

00:15:45.531 --> 00:15:48.434
care about, is performance,
because performance

00:15:48.434 --> 00:15:50.600
is one of the things that
matters more for our users

00:15:50.600 --> 00:15:52.910
than for us as developers,
because we tend

00:15:52.910 --> 00:15:55.460
to have very powerful
machines, and our users tend

00:15:55.460 --> 00:15:58.760
to use mobile devices and
very underpowered machines.

00:15:58.760 --> 00:16:00.950
But how do we think
about performance?

00:16:00.950 --> 00:16:02.840
So we actually have
a few different ways

00:16:02.840 --> 00:16:04.140
of looking at this.

00:16:04.140 --> 00:16:05.600
The first is size.

00:16:05.600 --> 00:16:08.810
How do we make smaller
bundles, and how do we

00:16:08.810 --> 00:16:12.080
use lazy loading to load
them as late as possible?

00:16:12.080 --> 00:16:13.860
And then on the
speed side of things,

00:16:13.860 --> 00:16:16.100
how do we execute
our programs faster?

00:16:16.100 --> 00:16:18.969
How do we do less,
so run less code?

00:16:18.969 --> 00:16:20.510
How do we reduce
the amount of memory

00:16:20.510 --> 00:16:23.510
we take advantage of, and more.

00:16:23.510 --> 00:16:27.260
So when we look back at the
Angular 1.x way of thinking,

00:16:27.260 --> 00:16:29.870
we would take your HTML,
CSS, and JavaScript,

00:16:29.870 --> 00:16:31.904
and we would actually
have a template compiler.

00:16:31.904 --> 00:16:34.070
Most people didn't know
about this template compiler

00:16:34.070 --> 00:16:36.770
because it didn't have
much functionality.

00:16:36.770 --> 00:16:38.870
At some level we
relied on the browser,

00:16:38.870 --> 00:16:41.060
because we were not
DOM independent.

00:16:41.060 --> 00:16:43.980
And so we would say,
element.innerHTML,

00:16:43.980 --> 00:16:45.650
and we would pass
it a set of HTML

00:16:45.650 --> 00:16:47.390
to render it out to the user.

00:16:47.390 --> 00:16:49.850
And then you would end up
adding on top of that change

00:16:49.850 --> 00:16:51.590
detection, and then
it would all make it

00:16:51.590 --> 00:16:53.030
out to the renderer
in combination

00:16:53.030 --> 00:16:55.810
with kind of multiple run
times for dependency injection,

00:16:55.810 --> 00:16:59.450
change detection, and processing
the view and all those events

00:16:59.450 --> 00:17:01.760
that you would set
up by your template.

00:17:01.760 --> 00:17:04.410
But if we look at how
Angular 2 is different,

00:17:04.410 --> 00:17:07.637
we've pulled the compiler
out as a separate component.

00:17:07.637 --> 00:17:09.470
And what that allows
us to do is we actually

00:17:09.470 --> 00:17:11.270
generate views from that.

00:17:11.270 --> 00:17:15.170
And then those views contain
all of the necessary change

00:17:15.170 --> 00:17:19.869
detection code or any of the
event hooks or property hooks.

00:17:19.869 --> 00:17:22.160
And so the default mode
for Angular developers

00:17:22.160 --> 00:17:24.560
today is what we call
just in time compilation,

00:17:24.560 --> 00:17:27.170
where we ship the compiler
down to the browser,

00:17:27.170 --> 00:17:30.200
and then in real time,
on the user's device,

00:17:30.200 --> 00:17:33.890
we compile all of those HTML,
JavaScript, and CSS files

00:17:33.890 --> 00:17:36.450
into JavaScript.

00:17:36.450 --> 00:17:39.920
So what happens is you write
NG4 or you write a div tag,

00:17:39.920 --> 00:17:42.840
and that ends up becoming
a document.create element

00:17:42.840 --> 00:17:46.650
in the most VM optimized way
that we've found ways to.

00:17:46.650 --> 00:17:48.704
And so when we do this
sort of compilation,

00:17:48.704 --> 00:17:50.370
we're doing it in a
way that's optimized

00:17:50.370 --> 00:17:52.920
for all of the JavaScript
virtual machines,

00:17:52.920 --> 00:17:55.900
because they all
work very similarly.

00:17:55.900 --> 00:17:58.360
But then it's also a
massive improvement

00:17:58.360 --> 00:18:00.729
to change detection,
up to 10 times faster.

00:18:00.729 --> 00:18:02.520
One of the ways that
we measure performance

00:18:02.520 --> 00:18:04.470
is we have what we call
a deep tree benchmark.

00:18:04.470 --> 00:18:08.400
So you've got a large tree
with a lot of nodes on it.

00:18:08.400 --> 00:18:10.890
And so we built a version
of this application

00:18:10.890 --> 00:18:12.240
using pure JavaScript.

00:18:12.240 --> 00:18:15.174
And we call that
1.x performance.

00:18:15.174 --> 00:18:17.340
And then we went back and
built the same application

00:18:17.340 --> 00:18:21.150
using Angular 1, and it
took about 5.7 times as long

00:18:21.150 --> 00:18:24.240
to run the change section
and to run this application.

00:18:24.240 --> 00:18:26.860
And then we built the same
application in Angular 2,

00:18:26.860 --> 00:18:30.390
and it takes 1.5 times as
long as that hand-optimized

00:18:30.390 --> 00:18:34.020
JavaScript, without any sort of
optimization in the Angular 2

00:18:34.020 --> 00:18:35.794
world.

00:18:35.794 --> 00:18:37.710
Another thing that we
can do to take this even

00:18:37.710 --> 00:18:40.230
further is what we call
ahead of time compilation.

00:18:40.230 --> 00:18:43.440
So because the compiler is
now an independent component,

00:18:43.440 --> 00:18:46.350
you can actually do
all of the compilation

00:18:46.350 --> 00:18:48.995
at build time instead
of at runtime.

00:18:48.995 --> 00:18:50.370
And this is a very
powerful thing

00:18:50.370 --> 00:18:53.740
because when you look at
the bundle size of Angular,

00:18:53.740 --> 00:18:57.840
around 50% to 80% of
your bundle is actually

00:18:57.840 --> 00:18:59.040
the Angular compiler.

00:18:59.040 --> 00:19:02.160
And so by not shipping that
down to the browser and only

00:19:02.160 --> 00:19:04.740
shipping down that
optimized JavaScript

00:19:04.740 --> 00:19:06.570
and removing all of
the compilation steps

00:19:06.570 --> 00:19:10.880
from the user, you can get
huge performance increases.

00:19:10.880 --> 00:19:13.190
So in AOT it's still
optimized JavaScript

00:19:13.190 --> 00:19:15.920
for virtual machines, but
you're not relying on your users

00:19:15.920 --> 00:19:17.810
to do that compilation.

00:19:17.810 --> 00:19:20.250
And then you get to ship
less code because of it.

00:19:20.250 --> 00:19:22.190
And so from a load
time standpoint,

00:19:22.190 --> 00:19:24.590
when you compare just in
time compilation to ahead

00:19:24.590 --> 00:19:28.010
of time compilation, it
was about 335 milliseconds

00:19:28.010 --> 00:19:29.240
in just in time.

00:19:29.240 --> 00:19:30.932
It was down to 130.

00:19:30.932 --> 00:19:33.140
And we're seeing very similar
gains in terms of size,

00:19:33.140 --> 00:19:35.100
getting down to 49
kB in ahead of time

00:19:35.100 --> 00:19:38.000
a compilation for our benchmark.

00:19:38.000 --> 00:19:40.661
But, what does this actually
mean in the real world?

00:19:40.661 --> 00:19:42.410
So there's a company
called Lucidchart who

00:19:42.410 --> 00:19:44.201
builds diagramming software.

00:19:44.201 --> 00:19:46.700
And when they did the same just
in time compilation to ahead

00:19:46.700 --> 00:19:49.040
of time compilation, they
were able to eliminate

00:19:49.040 --> 00:19:50.640
the entire middle
part of the graph.

00:19:50.640 --> 00:19:53.420
So this is a flame chart from
the Chrome DevTools showing

00:19:53.420 --> 00:19:56.150
the processing that was
going on in the browser.

00:19:56.150 --> 00:19:58.290
And so by eliminating all
of that middle portion,

00:19:58.290 --> 00:20:01.400
the template compilation, the
user's time to interactivity

00:20:01.400 --> 00:20:03.960
was much lower.

00:20:03.960 --> 00:20:07.310
And so they were benchmarking
against their legacy editor.

00:20:07.310 --> 00:20:09.250
And when they added ahead
of time compilation,

00:20:09.250 --> 00:20:11.677
they almost always got
ahead of the legacy editor.

00:20:11.677 --> 00:20:14.260
But then when they combined the
ahead of time compilation with

00:20:14.260 --> 00:20:16.120
something called
Closure Compiler--

00:20:16.120 --> 00:20:18.580
and that's optimization
that comes from Closure--

00:20:18.580 --> 00:20:21.550
they were able to get
always consistently better

00:20:21.550 --> 00:20:23.260
than their legacy editor.

00:20:23.260 --> 00:20:25.660
And then they were also able
to get a bundle size down

00:20:25.660 --> 00:20:29.726
to about 27 kB for a small
Hello World application.

00:20:29.726 --> 00:20:31.600
Another way that we're
increasing performance

00:20:31.600 --> 00:20:34.390
is by lazy loading
components and modules

00:20:34.390 --> 00:20:36.460
for you using our router.

00:20:36.460 --> 00:20:39.280
Routers form a very
natural separation point

00:20:39.280 --> 00:20:41.280
between different parts
of your application.

00:20:41.280 --> 00:20:44.170
And so using the CLI and
using a webpack plugin

00:20:44.170 --> 00:20:45.550
that we've built,
we can actually

00:20:45.550 --> 00:20:48.579
code split for you
and only load routes,

00:20:48.579 --> 00:20:50.620
and the modules that
represent those routes, when

00:20:50.620 --> 00:20:52.300
the user navigates
to them, meaning

00:20:52.300 --> 00:20:55.450
huge increases in performance
by pulling things out

00:20:55.450 --> 00:20:58.070
of the critical
path for the user.

00:20:58.070 --> 00:21:01.090
We also allow you to take
control of change detection

00:21:01.090 --> 00:21:04.340
by leaving it always on,
which is the default.

00:21:04.340 --> 00:21:07.900
Or you can specify that you only
want to run the change section

00:21:07.900 --> 00:21:10.630
cycle on push when the
user's ready to do so.

00:21:10.630 --> 00:21:13.810
Or you can even detach entire
components or component trees

00:21:13.810 --> 00:21:15.760
from that change
detection process.

00:21:15.760 --> 00:21:17.260
And there's a number
of other things

00:21:17.260 --> 00:21:21.247
that we're doing to make Angular
much, much more performant.

00:21:21.247 --> 00:21:23.830
You can run 80% of Angular in a
web worker, which takes it off

00:21:23.830 --> 00:21:24.580
of the UI thread.

00:21:24.580 --> 00:21:26.110
So most JavaScript
is traditionally

00:21:26.110 --> 00:21:28.840
run on the UI thread, in
a single threaded manner.

00:21:28.840 --> 00:21:31.144
And this allows you to
access multithreading

00:21:31.144 --> 00:21:32.560
You can run it in
a service worker

00:21:32.560 --> 00:21:34.450
and do offline, which
means the user doesn't

00:21:34.450 --> 00:21:37.377
have to wait for a network round
trip to load your application.

00:21:37.377 --> 00:21:39.460
And we're working to get
faster than that baseline

00:21:39.460 --> 00:21:40.257
that we mentioned.

00:21:40.257 --> 00:21:42.340
And we're also working to
get the bundle size down

00:21:42.340 --> 00:21:43.630
to about 10k.

00:21:43.630 --> 00:21:46.360
And our director says that
if we get to about 10k,

00:21:46.360 --> 00:21:47.440
he will bake us a cake.

00:21:47.440 --> 00:21:50.220
So we're very motivated.

00:21:50.220 --> 00:21:52.610
Currently, web workers and
service workers are available.

00:21:52.610 --> 00:21:54.349
But we call them experimental.

00:21:54.349 --> 00:21:55.890
And we're still
working to get faster

00:21:55.890 --> 00:21:59.111
than that hand-optimized
JavaScript in that 10 kB Hello

00:21:59.111 --> 00:21:59.610
World.

00:22:02.970 --> 00:22:05.490
Unlike Angular 1 where
documentation came much later

00:22:05.490 --> 00:22:07.800
than the project, we
wanted to launch Angular 2

00:22:07.800 --> 00:22:09.810
with documentation day one.

00:22:09.810 --> 00:22:12.900
And we're very proud to have
our own Angular.cn domain

00:22:12.900 --> 00:22:14.730
name where we can
host and connect

00:22:14.730 --> 00:22:17.790
with the Chinese
community better.

00:22:17.790 --> 00:22:20.100
Lastly, community is very,
very important to us.

00:22:20.100 --> 00:22:23.430
And so on GitHub, we were
one of the top projects,

00:22:23.430 --> 00:22:25.480
by contributor numbers.

00:22:25.480 --> 00:22:27.210
And currently as
of October, we had

00:22:27.210 --> 00:22:29.280
about 1.2 million
developers looking

00:22:29.280 --> 00:22:31.410
at Angular 1 documentation.

00:22:31.410 --> 00:22:33.270
And we had about
600,000 developers

00:22:33.270 --> 00:22:35.250
looking at Angular
2 documentation,

00:22:35.250 --> 00:22:37.470
even only a month
after our release.

00:22:37.470 --> 00:22:39.210
So we're experiencing
rapid growth

00:22:39.210 --> 00:22:40.630
and we're very
excited about this.

00:22:40.630 --> 00:22:43.620
And we're going to continue
to invest in Angular 1

00:22:43.620 --> 00:22:46.260
until these graphs switch, until
the majority of the developers

00:22:46.260 --> 00:22:49.950
that we work with have
migrated to Angular 2.

00:22:49.950 --> 00:22:53.220
We're also very reliant on
a huge ecosystem of partners

00:22:53.220 --> 00:22:57.660
who train, who teach, and who
build components and libraries

00:22:57.660 --> 00:22:59.070
that are part of our ecosystem.

00:22:59.070 --> 00:23:01.403
So we're hugely thankful to
all these people, as well as

00:23:01.403 --> 00:23:04.322
the GDGs locally here in China,
as well as Google Developer

00:23:04.322 --> 00:23:06.030
Experts, which is a
program we're looking

00:23:06.030 --> 00:23:08.527
to expand across the globe.

00:23:08.527 --> 00:23:10.860
And then there's also a number
of different applications

00:23:10.860 --> 00:23:12.720
that are already
in production using

00:23:12.720 --> 00:23:17.850
Angular 2, such as Greentea,
which is a CRM within Google,

00:23:17.850 --> 00:23:20.990
Google Fiber, Azure
Functions for Microsoft,

00:23:20.990 --> 00:23:25.950
and companies like Capital
One and Fidelity Investments.

00:23:25.950 --> 00:23:28.695
So with that, Kara,
would like to continue?

00:23:28.695 --> 00:23:29.942
KARA ERICKSON: [INAUDIBLE].

00:23:33.420 --> 00:23:38.223
because his Chinese
is better than yours.

00:23:38.223 --> 00:23:41.181
SPEAKER 3: I will ask them
if they have any questions.

00:23:41.181 --> 00:23:44.560
KARA ERICKSON: No, no, ask them
if they want to see your demo.

00:23:44.560 --> 00:23:46.370
SPEAKER 3: [SPEAKING CHINESE]

00:23:55.810 --> 00:24:00.122
[APPLAUSE]

00:24:08.812 --> 00:24:09.770
KARA ERICKSON: Just go.

00:24:09.770 --> 00:24:10.440
Let's just go.

00:24:10.440 --> 00:24:11.042
Do it.

00:24:15.990 --> 00:24:21.840
All right, so I can type again,
something to be happy about.

00:24:21.840 --> 00:24:25.050
So where we were, just
to remind you guys,

00:24:25.050 --> 00:24:28.120
is we were thinking about action
buttons for our dogs to use.

00:24:28.120 --> 00:24:31.120
So the first one was for
your dog to sniff other dogs.

00:24:31.120 --> 00:24:33.570
So we wanted to say, [CHINESE].

00:24:33.570 --> 00:24:36.725
And then second one was for
your dog to bark at another dog.

00:24:36.725 --> 00:24:39.971
So we're going to say [CHINESE].

00:24:39.971 --> 00:24:41.720
And we're also going
to make these buttons

00:24:41.720 --> 00:24:44.776
just slightly bigger so
you can see them on stage.

00:24:44.776 --> 00:24:48.890
So very quickly, I'm going to
make the font size 20 pixels.

00:24:48.890 --> 00:24:50.710
Then we're going wait
for this to refresh.

00:24:50.710 --> 00:24:54.220
See, they're a little bit
small [INAUDIBLE] right now.

00:24:54.220 --> 00:24:55.690
OK, cool.

00:24:55.690 --> 00:24:57.790
All right, so now that we
have our action buttons,

00:24:57.790 --> 00:24:59.529
we have our dog
profiles, let's start

00:24:59.529 --> 00:25:01.570
playing with some of the
other APIs that we have,

00:25:01.570 --> 00:25:03.710
like forms and animations.

00:25:03.710 --> 00:25:06.970
So it would be really cool if
you could click on a dog name

00:25:06.970 --> 00:25:09.370
and it will turn into a text
field so you can edit it.

00:25:09.370 --> 00:25:13.251
So we're going to hook
that up right now.

00:25:13.251 --> 00:25:16.640
So if we go back to
the dog's title here,

00:25:16.640 --> 00:25:19.970
we can wrap that in a span.

00:25:19.970 --> 00:25:22.670
Oops, we want to close the tag.

00:25:22.670 --> 00:25:25.940
And when you click
this span, we want

00:25:25.940 --> 00:25:28.790
to put the dog into edit mode.

00:25:28.790 --> 00:25:31.100
And we only want to
show the dog title

00:25:31.100 --> 00:25:34.010
if the dog is not in edit mode.

00:25:34.010 --> 00:25:36.530
And now we want to
add our text field.

00:25:36.530 --> 00:25:39.050
So we can use something
called mdInput for this.

00:25:39.050 --> 00:25:42.390
And we only want to show it
if the dog is in edit mode.

00:25:42.390 --> 00:25:47.280
And when we blur the input,
we can set edit mode to false.

00:25:47.280 --> 00:25:49.400
And then in our
CSS, we want to make

00:25:49.400 --> 00:25:50.780
the transition pretty seamless.

00:25:50.780 --> 00:25:54.050
So we're going to make the font
size the same for the input.

00:25:54.050 --> 00:25:57.850
And we're going to
make its width 100%.

00:25:57.850 --> 00:26:00.760
And then since we're not
having a placeholder,

00:26:00.760 --> 00:26:03.310
we can set the margin
to zero on the wrapper

00:26:03.310 --> 00:26:05.710
so that it is the same height.

00:26:05.710 --> 00:26:09.040
And then lastly, since we're
overriding some core styles,

00:26:09.040 --> 00:26:13.294
we need to turn off
view encapsulation.

00:26:13.294 --> 00:26:14.710
It's there to help
you in case you

00:26:14.710 --> 00:26:16.090
have unintended side effects.

00:26:16.090 --> 00:26:18.100
But in this case,
we're intentionally

00:26:18.100 --> 00:26:21.380
overriding something, so
we want to turn it off.

00:26:21.380 --> 00:26:22.628
So wait for that to refresh.

00:26:25.840 --> 00:26:27.740
All right, so now when
you click on the name,

00:26:27.740 --> 00:26:29.780
it becomes a text field
you can type into.

00:26:29.780 --> 00:26:32.690
Obviously we haven't put the
form component in here yet.

00:26:32.690 --> 00:26:36.240
So if you remember in
Angular 1, there was ngModel.

00:26:36.240 --> 00:26:38.404
In Angular 2 we
also have ngModel.

00:26:38.404 --> 00:26:40.070
So if we use the
two-way binding syntax,

00:26:40.070 --> 00:26:43.232
we can just put
in dog.name here.

00:26:43.232 --> 00:26:44.690
And then as soon
as that refreshes,

00:26:44.690 --> 00:26:48.950
when we click on the name
it should prepopulate it.

00:26:48.950 --> 00:26:50.746
And it should be able to--

00:26:50.746 --> 00:26:52.370
you can see it filling
in on the bottom

00:26:52.370 --> 00:26:54.078
there because it's
updating in real time.

00:26:54.078 --> 00:26:57.390
So you can say Porter's
Magnificence, et cetera,

00:26:57.390 --> 00:26:58.310
et cetera.

00:26:58.310 --> 00:26:59.570
So that's a taste of forms.

00:26:59.570 --> 00:27:01.800
We don't have time to
do much more than that.

00:27:01.800 --> 00:27:03.830
We can also do a very
quick animations demo

00:27:03.830 --> 00:27:05.570
to make the cards fade in.

00:27:05.570 --> 00:27:07.220
It should only take a minute.

00:27:07.220 --> 00:27:10.460
So to do animation, you
want to name the animation

00:27:10.460 --> 00:27:12.232
on the element that
you'd like to animate.

00:27:12.232 --> 00:27:15.620
So this is going to be the
fade-in animation And then

00:27:15.620 --> 00:27:17.510
in our component
definition, we can

00:27:17.510 --> 00:27:19.720
set the animation's metadata.

00:27:19.720 --> 00:27:23.450
And so we want to trigger
an animation called fade-in.

00:27:23.450 --> 00:27:27.610
And we want it to
transition when it enters.

00:27:27.610 --> 00:27:29.680
We want it to start with a--

00:27:29.680 --> 00:27:32.590
oops, that's not what I want--

00:27:32.590 --> 00:27:36.140
a style of opacity zero.

00:27:36.140 --> 00:27:41.230
We want it to animate
for 750 milliseconds

00:27:41.230 --> 00:27:43.840
with an ease-out curve.

00:27:43.840 --> 00:27:47.410
And this did not come
in, so let's get that in.

00:27:47.410 --> 00:27:51.820
And then we want it to
start or to end on a state

00:27:51.820 --> 00:27:58.965
where the style is opacity one.

00:27:58.965 --> 00:28:01.610
So that was very quick.

00:28:01.610 --> 00:28:04.120
So let's hope that worked.

00:28:04.120 --> 00:28:07.300
So it's loading.

00:28:07.300 --> 00:28:11.200
There we go, so you can
see the dogs fade in.

00:28:11.200 --> 00:28:14.860
So we have our Material
Design components.

00:28:14.860 --> 00:28:15.660
We have some forms.

00:28:15.660 --> 00:28:16.660
We have some animations.

00:28:16.660 --> 00:28:18.250
Hopefully that gives you
kind of a sense of what it's

00:28:18.250 --> 00:28:19.660
like to develop in Angular.

00:28:19.660 --> 00:28:21.560
So that's it for the live demo.

00:28:21.560 --> 00:28:22.930
Thank you for watching.

00:28:22.930 --> 00:28:24.850
SPEAKER 3: [SPEAKING CHINESE]

00:28:31.836 --> 00:28:34.050
SPEAKER 1: And that
was the introduction

00:28:34.050 --> 00:28:36.400
to what's been new in Angular.

00:28:36.400 --> 00:28:37.267
[CHINESE]

00:28:42.514 --> 00:28:59.090
SPEAKER 4: [SPEAKING CHINESE]

00:28:59.090 --> 00:29:02.740
[MUSIC PLAYING]

