WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.930
&gt;&gt; BOYD: Hello, everyone. My name is Ryan
Boyd and this is Steve Bazyl...

00:00:07.930 --> 00:00:09.870
&gt;&gt; BAZYL: Hi.
&gt;&gt; BOYD: ...and we're here today to talk about

00:00:09.870 --> 00:00:15.719
"Integrating your app with the Google Apps
Marketplace." Before we get started, I do

00:00:15.719 --> 00:00:21.579
want to give you this URL: http://bit.ly/appswave,
where you can view live notes and ask questions

00:00:21.579 --> 00:00:24.789
you have about this session in Google Wave.
We'd probably be going through that a bit

00:00:24.789 --> 00:00:30.819
at the end, I'm sure you're used to this already,
so. The other thing before we start is I want

00:00:30.819 --> 00:00:34.600
to introduce two things to you here. I want
to talk first about the company called Smart

00:00:34.600 --> 00:00:39.170
Lawfirm. It's a lawfirm that uses Google Apps
for their business to do email encounter in

00:00:39.170 --> 00:00:44.140
docs and that sort of thing. And they use
this application called SaaSy Voice which

00:00:44.140 --> 00:00:46.730
is a sample application we wrote for small
and medium size businesses to do voicemail.

00:00:46.730 --> 00:00:52.620
It uses the toolio APIs which are awesome,
give a call to those folks. All right. The

00:00:52.620 --> 00:01:00.480
agenda; first of all, we want to give an overview
of the Google Apps Marketplace. How many of

00:01:00.480 --> 00:01:04.250
you already went to a kind of the business
session on the Google Apps Marketplace earlier

00:01:04.250 --> 00:01:10.220
today? Okay, there are some hands, but not
all of you. So, try not to fall asleep during

00:01:10.220 --> 00:01:13.380
that section, but there's going to be a little
bit of repeat material there for a couple

00:01:13.380 --> 00:01:17.560
of minutes. But then, we're going to get in
to actually launching the SaaSy Voice application

00:01:17.560 --> 00:01:21.100
on the marketplace, and go through each of
the steps that you need to do to launch the

00:01:21.100 --> 00:01:25.141
application on the marketplace, then talk
a little bit about the road map, and then

00:01:25.141 --> 00:01:32.510
go into the Q&amp;A period that we talked about.
Okay. So, the marketplace; well, Google Apps

00:01:32.510 --> 00:01:37.570
were focused on messaging and collaboration.
We have apps like the Gmail, the Calendar,

00:01:37.570 --> 00:01:42.250
the Docs, all sorts of different types of
apps that are really meant to provide businesses

00:01:42.250 --> 00:01:51.860
all of their messaging and collaboration tools
they need without the usual hassle of IT administration.

00:01:51.860 --> 00:01:57.380
But our customers want more great cloud applications.
They want applications which do things like

00:01:57.380 --> 00:02:04.740
CRM, or project management, types of applications
that we don't offer in the native Google Apps

00:02:04.740 --> 00:02:09.509
but we can work together with you as developers
to build those applications and offer them

00:02:09.509 --> 00:02:16.750
jointly to our customers. So here's the basic
steps for selling your application on the

00:02:16.750 --> 00:02:21.390
Google Apps Marketplace, and really, you know,
fulfilling the need for all those different

00:02:21.390 --> 00:02:26.640
types of applications. First of all, you build
your app. How many of actually already have

00:02:26.640 --> 00:02:32.470
a SAS application which you, you know, have
out there for sale already? Okay. How many

00:02:32.470 --> 00:02:38.180
of you are actually trying to launch a SAS
application that you're trying to sell? All

00:02:38.180 --> 00:02:42.920
right. So, it gives a little idea to breakdown
here. You can build your app using any tools

00:02:42.920 --> 00:02:47.250
and any hosting provider you want. I mean
you're at Google I/O, you're well aware of

00:02:47.250 --> 00:02:51.340
all the great tools that we provide for development
such as the Google Web Toolkit or the hosting

00:02:51.340 --> 00:02:55.739
of App Engine, but these aren't required.
I want to make sure that's clear, these aren't

00:02:55.739 --> 00:02:58.660
required to launch your application on the
Google Apps Marketplace, you can use whatever

00:02:58.660 --> 00:03:03.510
tools or hosting provider you want. The next
step is integrate your application with Google

00:03:03.510 --> 00:03:08.971
Apps. With the minimum point of integration
here is the single sign on by OpenID. We want

00:03:08.971 --> 00:03:13.330
to make sure that our, you know, customers
have a real seamless flow to get into your

00:03:13.330 --> 00:03:17.330
application and get using it without having
to create another username and password. But

00:03:17.330 --> 00:03:21.300
there all sorts of other different integration
points that are available for you as developers

00:03:21.300 --> 00:03:25.099
to offer greater value to your customers.
You can integrate with Docs, you can integrate

00:03:25.099 --> 00:03:29.420
Calendar, Contacts, all sorts of things and
we will be talking about some of those in

00:03:29.420 --> 00:03:33.410
the remaining part of this presentation. Of
course the next step is probably the most

00:03:33.410 --> 00:03:38.190
important step for most of you and that's
selling your application in the marketplace.

00:03:38.190 --> 00:03:43.629
There are over two million businesses which
use Google Apps, with over 25 million users

00:03:43.629 --> 00:03:48.700
in those businesses. And we're adding like
3,000 new businesses a day, so there's a huge

00:03:48.700 --> 00:03:52.370
audience to sell these applications to. You
can also work with our reseller channels,

00:03:52.370 --> 00:03:56.410
there's about thousand resellers on the ground
selling Google Apps and they would be happy

00:03:56.410 --> 00:04:01.379
to talk with you, I'm sure, if their--if your
solution offers value for their customers.

00:04:01.379 --> 00:04:05.810
And then, you basically get to go wherever
Google Apps goes. And for all of that, there's

00:04:05.810 --> 00:04:10.769
a one time listing fee of $100 and then a
20% rev share which is going to start in the

00:04:10.769 --> 00:04:15.110
second half of this year after we release
our billing APIs and we're going to be talking

00:04:15.110 --> 00:04:22.430
about those too. So now that you've built
and launched your application on the marketplace,

00:04:22.430 --> 00:04:26.780
our customers have everything that they need
in the cloud and your joint customers as well.

00:04:26.780 --> 00:04:30.830
So they have the project management app, they
have the sales and marketing apps, all of

00:04:30.830 --> 00:04:36.280
these in addition to the, you know, the native
messaging and communication apps that Google

00:04:36.280 --> 00:04:41.600
Apps provides. So now, we really want to dive
in to building the SaaSy Voice application.

00:04:41.600 --> 00:04:46.050
We're going to first start here talking about
the SaaSy Voice application as it existed

00:04:46.050 --> 00:04:50.500
prior to being listed on the marketplace.
We're going to show you the features of that

00:04:50.500 --> 00:04:54.810
application and then Steve is going to show
you diving into the integrations with Google

00:04:54.810 --> 00:05:00.560
Apps. So there are basic features; first of
all, you can create a new account as a business,

00:05:00.560 --> 00:05:06.470
you can provision phone numbers for the employees
of your business, and create and assign extensions,

00:05:06.470 --> 00:05:10.680
and then you can show the voicemails; every
employee can see their voicemails that came

00:05:10.680 --> 00:05:18.280
into the system. And hop over here to that
actual Web browser. So this looks like, you

00:05:18.280 --> 00:05:23.570
know, many applications you're already probably
familiar with; the login page, and then an

00:05:23.570 --> 00:05:27.900
option to create accounts. So if you're going
to create account or asked to type in some

00:05:27.900 --> 00:05:33.389
information here--I'm going to pretend I'm
a partner at the Smart Lawfirm--switching

00:05:33.389 --> 00:05:37.410
careers here a little bit but, type in passwords
here. My domain is Smart Lawfirm. The company

00:05:37.410 --> 00:05:45.860
name is Smart Lawfirm, the name of the card.
I'm going to actually steal Steve's credit

00:05:45.860 --> 00:05:53.310
card here and use that. Steve, what's your
credit card number? All right. I'll skip that

00:05:53.310 --> 00:06:00.060
part here. Head purchase. So now, I signed
out as a customer to--for the SaaSy Voice

00:06:00.060 --> 00:06:04.650
application, for my business, Smart Lawfirm.
And I can go through here and enter in all

00:06:04.650 --> 00:06:12.410
the different, you know, people in my company.
So, I can fill in Mary, John, Jane, Steve;

00:06:12.410 --> 00:06:18.150
I mean I can fill all these people and there's
like 20 people that work for my company. I'd

00:06:18.150 --> 00:06:20.650
actually have to remember all the first names
and last names and for those of you who know

00:06:20.650 --> 00:06:25.311
me, I'm a little bit bad with names so, this
will be very difficult for me to do. But we're

00:06:25.311 --> 00:06:31.289
going to show how that gets a lot easier when
this application is listed on the Google Apps

00:06:31.289 --> 00:06:36.090
Marketplace. So, after I fill out the list
of, you know, each of the employees at the

00:06:36.090 --> 00:06:40.070
Smart Lawfirm, then they'll probably each
receive an email that looks something like

00:06:40.070 --> 00:06:45.080
this. They're asked to click on that link
and create a password. So they clicked on

00:06:45.080 --> 00:06:51.090
that link, they enter their email address,
they enter a new password, and then, finally,

00:06:51.090 --> 00:06:55.240
after they do that, they're in to see their
voicemail. All of these can be, you know,

00:06:55.240 --> 00:06:59.090
drastically improved. We can really improve
the user experience here based off the information

00:06:59.090 --> 00:07:05.780
that we have with Google Apps. So now, Steve
is going to come up here and talk about integrating

00:07:05.780 --> 00:07:10.040
SaaSy Voice with Google Apps and go through
many of the APIs.

00:07:10.040 --> 00:07:13.960
&gt;&gt; BAZYL: Thanks, Ryan. I'd like to share
you the integrated version and we'll take

00:07:13.960 --> 00:07:19.449
a look at a demo of that application, followed
up by dive into the code itself for how we

00:07:19.449 --> 00:07:25.039
did various integrations. Before we do that,
I want to talk a little bit about the process

00:07:25.039 --> 00:07:29.550
of integrating. The first thing you need is
an application. Today, we're talking about

00:07:29.550 --> 00:07:34.300
SaaSy Voice but a few of you, you know, raised
your hand that you have an application that

00:07:34.300 --> 00:07:38.630
you think would be a good integration with
Google Apps. Once you have your application,

00:07:38.630 --> 00:07:45.100
Google Apps has a set of APIs that allow you
to access customer data. This includes things

00:07:45.100 --> 00:07:50.810
like Contacts, Calendars, your Documents,
even their email, and you can also things

00:07:50.810 --> 00:07:55.430
like single sign on with OpenID. Here you
have to write code, right. This is the developer

00:07:55.430 --> 00:07:59.580
conference where developers, you know, this
is what we get paid to do. You have to write

00:07:59.580 --> 00:08:03.870
a code to get and set data. You have to write
code to do something interesting with that

00:08:03.870 --> 00:08:09.259
data in your application. Once you have your
application integrated with Google Apps, you

00:08:09.259 --> 00:08:16.030
need to describe that integration in a simple
XML document that we call a manifest. Here,

00:08:16.030 --> 00:08:20.120
you would list the URLs for your application,
various entry points. You would also describe

00:08:20.120 --> 00:08:25.280
the APIs that you use. You upload this into
the marketplace and it allows Google to make

00:08:25.280 --> 00:08:29.980
sure all the write bits are set and the write
permissions are granted when an administrator

00:08:29.980 --> 00:08:34.709
installs your application. So we can actually
see this with the new version of Saasy Voice.

00:08:34.709 --> 00:08:42.539
I switched over here, and here we're actually
logged in into the marketplace as a vendor.

00:08:42.539 --> 00:08:47.709
We haven't published our application yet,
but we can still preview it and install it

00:08:47.709 --> 00:08:52.769
using the same process that any customer would
go through. So, we're going to click "add

00:08:52.769 --> 00:09:01.569
it now" button, and install it onto the same
domain that Ryan did before here. I need to

00:09:01.569 --> 00:09:07.000
be an administrator to install an app on my
domain, so I'm going to login. Fortunately,

00:09:07.000 --> 00:09:16.480
I do have administrator permissions, and we're
going to see step one of the installation.

00:09:16.480 --> 00:09:21.179
And here, which is asking us to agree to the
apps terms of service. It doesn't look too

00:09:21.179 --> 00:09:27.550
complicated. Don't need a lawyer to review
this for me, so I'm going to agree and continue

00:09:27.550 --> 00:09:33.420
with the installation. The second step is
probably the most important step of the installation

00:09:33.420 --> 00:09:37.690
process. And you have to make a critical decision
here about two things. One is do you trust

00:09:37.690 --> 00:09:43.790
the application developer? And two, is the
API usage that is asking for appropriate for

00:09:43.790 --> 00:09:48.600
the application? For the first question, do
I trust the developer? Yeah, Ryan looks pretty

00:09:48.600 --> 00:09:52.399
innocent. You know, I'm happy with him. I'm
not going to worry that he's going to steal

00:09:52.399 --> 00:09:56.480
any of my data. So let me just take a look
at, you know, the APIs that we're using. It's

00:09:56.480 --> 00:10:01.910
asking for the user provisioning API to help
us set up our accounts. It's seems reasonable.

00:10:01.910 --> 00:10:07.049
It wants to export information into our doc
list and it wants to use the context to display

00:10:07.049 --> 00:10:11.480
information about people who leave voicemail
messages. It seems like a reasonable set of

00:10:11.480 --> 00:10:19.529
APIs for the application. I trust Ryan. I'm
going to agree and grant him access. This

00:10:19.529 --> 00:10:25.850
next step is an optional step that not every
application in the marketplace offers. Because

00:10:25.850 --> 00:10:30.549
SaaSy Voice is, you know, we have to allocate
a new phone number for customers, we have

00:10:30.549 --> 00:10:34.319
to set up voicemail extensions and we want
to collect payment information, we want to

00:10:34.319 --> 00:10:40.149
do all those before we enable the application
for all the users on the domain. So, I'm going

00:10:40.149 --> 00:10:44.819
to click through here, and you're also going
see the first integration point which is a

00:10:44.819 --> 00:10:50.079
single sign on. So even though I don't have
an account with SaaSy Voice yet, as soon as

00:10:50.079 --> 00:10:53.740
I click that link, the application was able
to authenticate me and create a new account.

00:10:53.740 --> 00:10:59.970
So they can pair those to the first version
of the application that you saw, the installation

00:10:59.970 --> 00:11:04.769
process is already a lot easier. I don't have
to enter in my email address, I don't have

00:11:04.769 --> 00:11:10.160
to create a new password, I only need to supply
a little bit of information about our company,

00:11:10.160 --> 00:11:16.009
and then I can continue. And one thing I want
to know is, you know, while you're seeing

00:11:16.009 --> 00:11:21.810
this in the context of the administrator,
the real power is, this feature is available

00:11:21.810 --> 00:11:27.029
to every user for every application that they
purchase. Just like a user can switch seamlessly

00:11:27.029 --> 00:11:33.879
between Gmail, Calendar, Contacts, Docs; we
expect that they can switch between Gmail

00:11:33.879 --> 00:11:40.809
and a third party application just as easily.
So I'm going to continue here. And you'll

00:11:40.809 --> 00:11:46.279
see the second integration point which is
using the user provisioning API to get information

00:11:46.279 --> 00:11:50.439
about all the users in the domain. When Ryan
went through this earlier, he was presented

00:11:50.439 --> 00:11:54.939
with a big empty form, and it would have taken
him a lot of time to go and collect the information

00:11:54.939 --> 00:12:00.339
about all of his employees. Here, the application
has spurred enough to recognize I'm a Google

00:12:00.339 --> 00:12:04.959
Apps customer, let me go get that data for
you. So that was administrator, all I need

00:12:04.959 --> 00:12:10.259
to do is review the information, make sure
it looks okay and approve it. So, I'm really

00:12:10.259 --> 00:12:14.470
happy I got 10 minutes back. I'm going to
approve it and we're actually done with the

00:12:14.470 --> 00:12:25.880
setup and I can enable it for all the users
in my domain, really simple. So let's actually

00:12:25.880 --> 00:12:30.800
take a look at how this is done. So a single
sign on as I mentioned before is done with

00:12:30.800 --> 00:12:39.290
OpenID. OpenID is an open protocol for authentication
on the Web and it allows the user to authenticate

00:12:39.290 --> 00:12:46.029
with multiple websites but without sharing
sensitive information like their credentials.

00:12:46.029 --> 00:12:50.509
Unfortunately, we don't have a lot of time
to go very deep into OpenID, so you may hear

00:12:50.509 --> 00:12:56.009
or see things in the code that maybe a little
bit confusing. Don't worry about these. You

00:12:56.009 --> 00:13:00.209
don't need to understand all of the details
right now, and the reason is it's actually

00:13:00.209 --> 00:13:05.400
quite easy to implement OpenID, thanks to
a lot of good libraries. Most of these are

00:13:05.400 --> 00:13:10.980
open source. The code that we're going to
look at is from the PHP OpenID library, SaaSy

00:13:10.980 --> 00:13:16.369
Voice is a PHP app. And that library, it's
an open source library, developed by John

00:13:16.369 --> 00:13:20.619
Reign. And we're also using a small add-on
library that's available on code.google.com,

00:13:20.619 --> 00:13:27.939
that just makes it easier to work with Google
Apps. So let's look at the code and just broke

00:13:27.939 --> 00:13:32.290
this down into three simple steps, one is
you just to initialize the library; the second,

00:13:32.290 --> 00:13:35.749
to make the authentication request; and the
third, to hand all the request to response

00:13:35.749 --> 00:13:41.889
back and log the user in. So our first step
here is we need to, you know, get, build-up

00:13:41.889 --> 00:13:47.100
the library. So we're holding a consumer which
is our entry point into the library. And to

00:13:47.100 --> 00:13:52.089
do that, we need some storage. This is just
the storage information about the identity

00:13:52.089 --> 00:13:57.149
providers that we're talking to. We're using
memcache which is perfectly fine in this case.

00:13:57.149 --> 00:14:01.929
We create our consumer and then we have to
call one helper method. And what this does

00:14:01.929 --> 00:14:08.749
is it allows us to authenticate users for
Google Apps knowing just their domain. In

00:14:08.749 --> 00:14:12.739
this case from coming from smartlawfirm.com
it will know how to authenticate me based

00:14:12.739 --> 00:14:19.619
on that information. We return our consumer
and we're good to go. So now, we have a library

00:14:19.619 --> 00:14:26.009
and we could use that to authenticate a user
when we have our application. So first thing

00:14:26.009 --> 00:14:30.480
we need to do is actually, you know, make
an authentication request for that user's

00:14:30.480 --> 00:14:34.189
domain. There are a lot of OpenID providers
out there that you can authenticate to, so

00:14:34.189 --> 00:14:39.619
in order to do that, you need to say, "Who
am I going to authenticate it with?" For Google

00:14:39.619 --> 00:14:45.100
Apps, we use the domain name and there's two
ways I can get those information. In the demo,

00:14:45.100 --> 00:14:50.799
what you saw was that domain name being supplied
automatically in the URL. That is done with

00:14:50.799 --> 00:14:56.980
a very simple template mechanism that is available
to [INDISTINCT]. If somebody was coming straight

00:14:56.980 --> 00:15:01.579
to my website, I might want to display a form
that says, "Please entry your email address"

00:15:01.579 --> 00:15:06.910
or "Enter your Google Apps domain in order
to log in." So once we have their information,

00:15:06.910 --> 00:15:12.769
we can create a request but before we send
the user off to authenticate, we want to get

00:15:12.769 --> 00:15:16.499
a little bit more detail about them. We want
to get their email address and their names

00:15:16.499 --> 00:15:21.549
so we can get a little bit more personalization
in our app. OpenID has an extension called

00:15:21.549 --> 00:15:28.419
attribute exchange which allows for this.
So we're going to create that extension and

00:15:28.419 --> 00:15:34.669
we're going to add a couple lines to request
email, first name and last name. And then,

00:15:34.669 --> 00:15:38.229
we're going to add that extension entry request
and then we're good to go. We, but we still

00:15:38.229 --> 00:15:42.970
need to get the user over to the identity
provider and so we'll do that by rendering

00:15:42.970 --> 00:15:48.519
a form which in JavaScript so that it will
post the request over to Google. And the only

00:15:48.519 --> 00:15:53.600
reason we're doing the post here instead of
a redirect is simply because this request

00:15:53.600 --> 00:15:58.369
can get very large depending on how much data
you're asking for the length to the domain

00:15:58.369 --> 00:16:02.139
name. And this is just the safest way to deal
with some of the limitations that you might

00:16:02.139 --> 00:16:09.949
encounter with very long URLs. So, you know,
so far what we've done is, you know, we have

00:16:09.949 --> 00:16:15.459
our library, we sent it, you know, done a
request from the user, send a request, they're

00:16:15.459 --> 00:16:21.529
now over at their identity provider, in this
case, Google Apps, and they're being authenticated.

00:16:21.529 --> 00:16:25.399
Once that's done, they're going to come back
and we're going to get a post back from Google

00:16:25.399 --> 00:16:32.509
that has the details and the result of the
authentication so it handle the response.

00:16:32.509 --> 00:16:37.249
Very similar as before, we basically just
call a simple method to partial all the response

00:16:37.249 --> 00:16:42.069
data and the libraries make this really easy
and we just want to make sure everything was

00:16:42.069 --> 00:16:49.049
successful. In this case, this is our happy
path and where a user was authenticated and

00:16:49.049 --> 00:16:53.339
we'll pull out some information. The most
important piece of information we get here

00:16:53.339 --> 00:16:59.459
is their identifier. This is a stable unique
identifier that we can use to correlate, you

00:16:59.459 --> 00:17:03.230
know, all log-ons for that user. But it's
anonymous, it's doesn't really tell us who

00:17:03.230 --> 00:17:08.350
that person is. That's why we ask for things
like their email address or first name and

00:17:08.350 --> 00:17:15.270
their last name. So we'll pull this out from
the response, and now that we have all this

00:17:15.270 --> 00:17:19.939
information, we can map that user to somebody
on our database or create a new account if

00:17:19.939 --> 00:17:23.709
that's what we need to do. And once we have
that, we can add them to the session, let

00:17:23.709 --> 00:17:28.549
them log-in to the app and they're logged
in, they never enter their username or a password,

00:17:28.549 --> 00:17:37.860
it all just happens the OpenID. One last bit
of information that we need to provide is

00:17:37.860 --> 00:17:42.941
information in the manifest that describes
how people access our application and there

00:17:42.941 --> 00:17:47.480
are three things I want to point out in this
part of the manifest. The first is the URL

00:17:47.480 --> 00:17:53.049
that we saw during the setup process. And
here we can also see the template mechanism

00:17:53.049 --> 00:17:57.309
that I've mentioned earlier that allows you
to get the domain name that the users are

00:17:57.309 --> 00:18:03.850
coming from after they've installed. The two
extensions; one is actually for the place

00:18:03.850 --> 00:18:10.460
in navigation element in Google Apps. Installed
applications can get a menu link alongside

00:18:10.460 --> 00:18:14.659
all the links that you have in Google Apps
for Gmail, Calendar, Docs, and the other Google

00:18:14.659 --> 00:18:20.690
services. Third party applications are first-class
citizens, they get placed up there. The last

00:18:20.690 --> 00:18:26.980
of bit is the OpenID realm and this is actually
a very important thing. By declaring your

00:18:26.980 --> 00:18:33.070
OpenID realm, it allows Google Apps to recognize
authentication request from an installed application.

00:18:33.070 --> 00:18:38.169
This allows us to make the user experience
a little bit better because since the administrator

00:18:38.169 --> 00:18:42.950
installed the application and explicitly trusted
it, we don't need to ask each individual user

00:18:42.950 --> 00:18:50.870
to approve the OpenID request and, you know,
to approve the sharing of their personal information.

00:18:50.870 --> 00:18:57.120
Saasy manifest, we have this uploaded and
now app, we can do single sign on. The user

00:18:57.120 --> 00:19:02.450
experience as you saw earlier is very smooth.
Before we get into the data access, I just

00:19:02.450 --> 00:19:07.210
want to do a quick recap on single sign on.
You see, what you saw with this is with, you

00:19:07.210 --> 00:19:12.299
know, a little bit of code in PHP, you know,
not much more than, apparent less than a 100

00:19:12.299 --> 00:19:14.289
lines.
We were able to get, you know, authenticate

00:19:14.289 --> 00:19:19.909
the user. We were able to get their, you know,
their unique identity along with some personal

00:19:19.909 --> 00:19:24.570
information about them. One quick note is
on things like email--you still want to do

00:19:24.570 --> 00:19:30.120
things like, you know, send a confirmation
message to make sure that, you know, they

00:19:30.120 --> 00:19:33.730
really own that email address or you want
to do something like a white list trusted

00:19:33.730 --> 00:19:37.870
providers. Since Google Apps is managed, you
can actually trust the email addresses and

00:19:37.870 --> 00:19:41.880
it's very simple to add a line or code to
say if this, you know, if this response is

00:19:41.880 --> 00:19:48.930
from google.com, we don't need to actually
validate the message, we know it's good. So

00:19:48.930 --> 00:19:54.830
I'll switch gears a little bit to Data Access.
Data Access is done with the Google Data APIs.

00:19:54.830 --> 00:20:02.870
These are restful APIs built on the Atom Publishing
Protocol. And, you know, they're pretty easy

00:20:02.870 --> 00:20:07.380
to use basically because there's a lot of
great libraries out there. Libraries in most

00:20:07.380 --> 00:20:12.940
languages--today, we're looking at code with
this and, you know, GData library. First thing

00:20:12.940 --> 00:20:16.480
we have to worry about though is how do we
actually get access to the user's data? All

00:20:16.480 --> 00:20:21.210
right, we need to be authorized to do that.
And the way you do that with GData is with

00:20:21.210 --> 00:20:26.880
OAuth. And OAuth is simply it's an open standard
protocol for allowing a third, for basically

00:20:26.880 --> 00:20:33.429
delegating access to a third party in a secure
way. For marketplace, we use a variation called

00:20:33.429 --> 00:20:39.470
2-legged OAuth. In traditional OAuth that
approval in that delegation step is done on

00:20:39.470 --> 00:20:44.809
an individual user basis. So the first time
a user wants to grant your application access

00:20:44.809 --> 00:20:50.920
to context, you have to request that access,
the user will see a pop-up asking for authorization

00:20:50.920 --> 00:20:55.919
in which in that data establishes, you know
that everything is good to go. In 2-legged

00:20:55.919 --> 00:21:01.170
OAuth, we actually do that at the, at install
time and it's done by the administrator on

00:21:01.170 --> 00:21:06.840
behalf of all the users in the domain. The
way we do this is by listing the APIs or in

00:21:06.840 --> 00:21:11.559
this case the scopes that we want in the manifest.
And as you saw earlier during the install

00:21:11.559 --> 00:21:16.830
process, the administrator is then asked to
approve that. Once that approval is given,

00:21:16.830 --> 00:21:21.289
the application then come in to access the
APIs on behalf of all the users in that particular

00:21:21.289 --> 00:21:25.360
domain. They don't have to ask, you know,
each individual user to approve a request

00:21:25.360 --> 00:21:32.429
to open for them. So on the Data Access side,
we're actually, just going to break this down

00:21:32.429 --> 00:21:35.669
into two pretty simple steps. One, you know,
as we did an OpenID, let's just, you know,

00:21:35.669 --> 00:21:40.330
initialize the library. In this case, we're
just doing this just to establish our credentials

00:21:40.330 --> 00:21:46.429
for application. We need tidbits of information
here. We need to know our consumer key and

00:21:46.429 --> 00:21:53.630
our secret. These are the equivalents of our
applications, username and password. The rest

00:21:53.630 --> 00:21:58.220
here is just, you know, mostly boilerplate
codes and we're going to use, you know, a

00:21:58.220 --> 00:22:02.480
signature here to sign the request with our
key and secret. We're going to, you know,

00:22:02.480 --> 00:22:08.830
pass this as a request header and against
some more boilerplate codes to initialize

00:22:08.830 --> 00:22:14.240
the library. What this gives us now is we
now have an HttpClient that is initialized

00:22:14.240 --> 00:22:19.860
with our application credentials and we can
use that to access the data on behalf of the

00:22:19.860 --> 00:22:24.919
user that installed our application. So let's
take a look at how we did that with the Provisioning

00:22:24.919 --> 00:22:30.909
API. We start with our client that we just
created and, you know, create a service object

00:22:30.909 --> 00:22:36.139
around it. This is simply a helper object
that makes working with the Google APIs a

00:22:36.139 --> 00:22:41.860
little bit easier, and we make a query. So
for the Provisioning API, the query that we're

00:22:41.860 --> 00:22:47.269
making is get me the users for a particular
domain and that we're using the currently

00:22:47.269 --> 00:22:51.880
logged on users domain and this we can actually
get from the, you know, the URL, we can get

00:22:51.880 --> 00:22:57.650
it from their email address or from their
OpenID. We make that query and what we get

00:22:57.650 --> 00:23:03.630
back is a list of users and we can simply
iterate through these, extract out the key

00:23:03.630 --> 00:23:07.970
bits of information that we want, in this
case, we want username, their first last names

00:23:07.970 --> 00:23:13.830
whether or not they're administrator. And
now we can take this data and use it on our

00:23:13.830 --> 00:23:18.730
application in a meaningful way. In this case,
what you saw earlier was using it to pre-populate

00:23:18.730 --> 00:23:23.120
the database and pre-populate that form to
make the setup a lot easier for the administrator.

00:23:23.120 --> 00:23:29.331
So I'm going to switch over to the demo again
and show this from the user's perspective.

00:23:29.331 --> 00:23:39.110
So switch over to Gmail and here you can actually
see this navigation menu that I mentioned

00:23:39.110 --> 00:23:46.409
earlier where along with Mail, Calendar, Documents
and sites, we have a list of additional application

00:23:46.409 --> 00:23:50.679
that we installed, and these were actually
applications from the marketplace. Some of

00:23:50.679 --> 00:23:56.429
these are new, some of these are, were around
at launch but I care about SaaSy Voice. So

00:23:56.429 --> 00:24:04.269
got to click over and just like we were signed
in seamlessly before, as the administrator,

00:24:04.269 --> 00:24:08.240
I get the same experience as a user. Although,
right now, it seems to be acting a little

00:24:08.240 --> 00:24:17.179
bit slow--that's okay we can wait just a sec
for the demo. All right, there we go. So I

00:24:17.179 --> 00:24:21.850
didn't have to enter a username or password,
I just clicked the link, I'm signed in and

00:24:21.850 --> 00:24:32.499
I'm not seeing any data. There we go. So here
we actually have our voicemails for this user

00:24:32.499 --> 00:24:37.710
and already somebody left me a voicemail,
this is one from one of our favorite customers

00:24:37.710 --> 00:24:43.760
Litigious Larry. He's really, really good
business for the Lawfirm. See if I can actually

00:24:43.760 --> 00:24:48.840
play his message.
&gt;&gt; LARRY: Hey, Steve this is Larry, just want

00:24:48.840 --> 00:24:53.580
to follow-up about my most recent case in
[INDISTINCT] Hospital. Let me know how it's

00:24:53.580 --> 00:24:56.100
going. Thanks.
&gt;&gt; BAZYL: So there's Larry, getting, a really

00:24:56.100 --> 00:25:00.710
great customer for us. But one thing you'll
notice here is another integration point.

00:25:00.710 --> 00:25:05.249
Instead of just showing a caller ID information,
his phone number or just, you know, a simple

00:25:05.249 --> 00:25:11.520
name. What we're seeing here is information
from our contacts and so, you know, basically

00:25:11.520 --> 00:25:16.929
by joining that phone number against our contacts'
database from Google Apps, we can show more

00:25:16.929 --> 00:25:22.740
contacts in our voicemail. So if I want to
call Larry back on his cell phone, I see those

00:25:22.740 --> 00:25:27.769
here. If instead of calling him back, I just
want to send him a quick email. I can click

00:25:27.769 --> 00:25:34.159
that link and I get my Gmail compose window
and I can just send him a quick note, except,

00:25:34.159 --> 00:25:38.940
have a little bug in there that I hope that
you noticed. The other integration I want

00:25:38.940 --> 00:25:44.499
to show is on the call log. So as an administrator
I can see all the voicemails and all the calls

00:25:44.499 --> 00:25:52.669
that our domain received; our company. But
this isn't a really useful form for the data

00:25:52.669 --> 00:25:57.259
and, you know, maybe at some point, you know,
SaaSy Voice would implement some really great

00:25:57.259 --> 00:26:00.640
reporting features but, you know, that's a
lot of work to do. There's actually a really

00:26:00.640 --> 00:26:04.840
easy, you know, tool out there that a lot
of people know how to do reporting in and

00:26:04.840 --> 00:26:09.600
it's just spreadsheet. So, you know, rather
than building a lot of, you know, rich reporting

00:26:09.600 --> 00:26:16.720
features into the app, we just added a very
quick ability for a user to export the call

00:26:16.720 --> 00:26:21.470
log into Google Apps and that's done as a
spreadsheet. So we'll see that spreadsheet

00:26:21.470 --> 00:26:30.620
open up in a sec, and I'm just got to reformat
it a little bit just to make it prettier and

00:26:30.620 --> 00:26:35.980
let's do a little bit of quick analysis. I
want to find out who has the most phone calls.

00:26:35.980 --> 00:26:46.340
So, let's do employee and number of calls
and get all the unique users and let's get

00:26:46.340 --> 00:26:59.309
a count of their calls. There you go. So I
get how many calls everyone made, and let's

00:26:59.309 --> 00:27:07.210
just make a little chart out of this; to do
insert chart. The bar chart seems pretty reasonable,

00:27:07.210 --> 00:27:14.029
save it, and now I got the nice, you know,
a very quick, a very easy visualization of

00:27:14.029 --> 00:27:18.519
who's getting the most phone calls in our
domain and you can see here it's Joe, Billy

00:27:18.519 --> 00:27:24.289
and Steve, a very easy thing to do. So we'll
see, you know, how we did this last two integrations.

00:27:24.289 --> 00:27:29.470
This is actually very similar to what we did
with the Provisioning API. On the context,

00:27:29.470 --> 00:27:35.570
very similar again, we create our clients;
we request information about the contacts

00:27:35.570 --> 00:27:42.440
for that user, and here's one difference between
what you saw with the provisioning API because

00:27:42.440 --> 00:27:47.179
contacts are owned by an individual user.
In order to make the request, you need to

00:27:47.179 --> 00:27:51.850
specify which user you're acting on behalf
of. And the way you do that with tool like

00:27:51.850 --> 00:27:57.399
an OAuth is by including a query parameter
that is xoauth_requestor_id. The value of

00:27:57.399 --> 00:28:02.570
that is simply the email address of that user.
So basically say we get the, you know, get

00:28:02.570 --> 00:28:07.649
the email of the currently logged in user,
add that to our query and now we can go fetch

00:28:07.649 --> 00:28:14.009
the contacts. Just like we did with the Provisioning
API, we can simply iterate through those results,

00:28:14.009 --> 00:28:18.399
parse into a form that's more suitable for
application. We want to do some things like

00:28:18.399 --> 00:28:25.150
indexes by phone numbers. And, you know, now
we can use this. So now I can keep that in

00:28:25.150 --> 00:28:30.269
memory, I can keep that in memcache, and just
look up my phone number every time I get a

00:28:30.269 --> 00:28:37.809
voicemail, show the contact, much more useful
than just basic information from caller ID.

00:28:37.809 --> 00:28:42.210
The Docs integration is a little bit different.
The first thing we need to do is we actually

00:28:42.210 --> 00:28:47.770
need a file to upload. So, a little helper
method to write out at CSV file, not very

00:28:47.770 --> 00:28:52.159
interesting code to take a look at but, you
know, once we do this, we have a file that's

00:28:52.159 --> 00:28:57.799
on our, or just a temp file on disk. But,
you know, then we do what we did before. We

00:28:57.799 --> 00:29:04.710
create our client, on this case, gives us
a DocsClient that makes it easy. Like, Contacts,

00:29:04.710 --> 00:29:09.440
we also need to specify the requestor because
Docs are owned by individual users. We'll

00:29:09.440 --> 00:29:16.999
name it with the timestamp so users can know
when this log was generated and then upload

00:29:16.999 --> 00:29:22.389
the file as a CSV. By telling it it's a CSV
file, Google Apps will know how to convert

00:29:22.389 --> 00:29:27.570
that into a spreadsheet and the only reason
we're using this CSV file here is just because

00:29:27.570 --> 00:29:32.360
it's just a really simple way of getting data
into a spreadsheet. There actually is a Spreadsheet

00:29:32.360 --> 00:29:38.039
API that lets you work with individual cells.
But for something like a log file, it's just

00:29:38.039 --> 00:29:45.159
way too complicated when a CSV file will do
the same job. The last thing we want to do

00:29:45.159 --> 00:29:50.049
is once we've uploaded the doc is pull out
the edit URL for that so we can open up the

00:29:50.049 --> 00:29:55.080
spreadsheet for the administrator to actually
start using. Again, we just take resulting

00:29:55.080 --> 00:30:00.999
entry, iterate through the links to find the
alternate representation; we have this URL.

00:30:00.999 --> 00:30:05.950
And now, once the file is uploaded, we can
redirect the user over to the Google Apps

00:30:05.950 --> 00:30:13.029
or in a pop-up or in another tab and you know,
they can actually use the data and start analyzing

00:30:13.029 --> 00:30:18.580
it. So, before I hand it back to Ryan, just
talk bout gadgets, I just want to do a quick

00:30:18.580 --> 00:30:22.629
recap. What you saw is without adding a lot
of code to the application, we were able to

00:30:22.629 --> 00:30:27.690
significantly improve the user experience.
We were able to add single a sign on with

00:30:27.690 --> 00:30:33.090
OpenIDs, so a user has no longer had to expositely
create accounts or setup a new passwords.

00:30:33.090 --> 00:30:39.619
We were able to make the setup process for
the application a lot faster. As an administrator,

00:30:39.619 --> 00:30:44.550
I didn't have to enter a lot of information
to start using the applications. And then

00:30:44.550 --> 00:30:47.980
from the user's perspective, we were able
to add some features that made the application

00:30:47.980 --> 00:30:53.179
and the combination of Google Apps and SaaSy
Voice a better experience and if they were

00:30:53.179 --> 00:30:57.950
a stand alone application. We're able to use
the context to enrich the experience and we're

00:30:57.950 --> 00:31:03.799
able to export data from our application into
tools like Spreadsheets that the administrators

00:31:03.799 --> 00:31:09.720
are already familiar with. So that's all I
have. I'm going to hand it over to Ryan and

00:31:09.720 --> 00:31:20.879
he's going to talk to you about gadgets.
&gt;&gt; BOYD: Thanks, Steve. So what Steve talked

00:31:20.879 --> 00:31:25.619
about was really taking Google Apps data and
integrating that with your applications elsewhere

00:31:25.619 --> 00:31:30.039
on the Web to make them user experience a
lot easier. Gadgets are a way to do a little

00:31:30.039 --> 00:31:35.049
bit of the reverse. Many users spent a lot
of their day inside email. It's an unfortunate,

00:31:35.049 --> 00:31:40.210
I know, I really don't enjoy it that much
either but, they spent a lot of times inside

00:31:40.210 --> 00:31:44.090
email or inside Calendar, inside these other
applications that are part of Google Apps,

00:31:44.090 --> 00:31:49.739
and you want a way to take your application
put it inside those applications. This is

00:31:49.739 --> 00:31:55.999
what gadgets are all about. Gadgets are really
your real state inside Google Apps. So there

00:31:55.999 --> 00:32:00.309
are many different types of gadgets. I list
them here where we're talking about some of

00:32:00.309 --> 00:32:05.980
them. Two new types of gadgets were actually
announced this week. We have Gmail contextual

00:32:05.980 --> 00:32:10.480
gadgets, we just launched yesterday. I'm going
to show you examples of those, and then Wave

00:32:10.480 --> 00:32:12.759
gadgets. Well, Wave has been around for a
while and Wave gadgets have been around for

00:32:12.759 --> 00:32:17.960
a while but just this morning, they announced
the ability of Wave for Google Apps, so that's

00:32:17.960 --> 00:32:22.210
an exciting additional place that you can
integrate your applications into. All of these

00:32:22.210 --> 00:32:26.749
use the open social gadgets specification,
we're not going to get into details of that,

00:32:26.749 --> 00:32:29.991
really just showing you the different use-cases
for gadgets and hopefully will inspire you

00:32:29.991 --> 00:32:36.890
for your applications. Gmail contextual gadgets,
these are really awesome. These are perhaps

00:32:36.890 --> 00:32:41.039
one of my favorite launches that we've done
recently, that just happened yesterday and

00:32:41.039 --> 00:32:45.679
really, they like to detect the content of
email by regular expressions and display a

00:32:45.679 --> 00:32:49.590
gadget based off of that. The gadget gets
displayed right below the email, I'll show

00:32:49.590 --> 00:32:54.640
you one here, and basically it allows you
to put the business information that a user

00:32:54.640 --> 00:32:59.210
needs to have, right in front of them in the
context to their email where they can immediately

00:32:59.210 --> 00:33:05.370
take action on it without opening up a new
browser or tab to your application. So here

00:33:05.370 --> 00:33:10.340
is what a Gmail looks like and here, do you
see that red arrow pointing to a gadget? So

00:33:10.340 --> 00:33:17.080
this is an email from Steve to me saying,
"John would like us to incorporate his company,

00:33:17.080 --> 00:33:21.960
please let me know the next steps." And you
can see at the bottom here there's a gadget.

00:33:21.960 --> 00:33:27.050
This gadget is actually the Manymoon gadget.
Manymoon is a project management application

00:33:27.050 --> 00:33:31.460
that's available in the Google Apps marketplace.
And what this gadget allows you to do is immediately

00:33:31.460 --> 00:33:37.179
take action on that and create a project or
sign a task. So in this case the gadget actually

00:33:37.179 --> 00:33:42.429
automatically pulled in a subject of the message,
John Smith &amp; Company. I added the word incorporated

00:33:42.429 --> 00:33:48.440
on the front there, and then it has a place
for assigning members to these projects. So

00:33:48.440 --> 00:33:53.889
I want to sign it back to you, Steve, to work
on this project, and also invite an additional

00:33:53.889 --> 00:33:59.059
user Kim in my company and those things can
all be auto completed from the context API

00:33:59.059 --> 00:34:04.559
that Steve talked about. This is a really
awesome contextual gadget. You've seen some

00:34:04.559 --> 00:34:09.970
other demos, I don't know, how many of you
saw the Campfire 1, but Appareo there in the

00:34:09.970 --> 00:34:14.169
Campfire 1 demo showed there CRM sales force
application that looked up the sender's email

00:34:14.169 --> 00:34:19.619
and immediately looked up the information
about that sender in their sales where CRM

00:34:19.619 --> 00:34:25.579
system and made that available right in the
context of gadget, so it's really powerful.

00:34:25.579 --> 00:34:29.569
The next type of the gadget that I want to
talk about our Calendar sidebar gadgets. Calendar

00:34:29.569 --> 00:34:34.790
sidebar gadgets can detect the currently display
date range, can delete currently selected

00:34:34.790 --> 00:34:41.319
event and get lots of information about them
and even set information about them in the

00:34:41.319 --> 00:34:46.429
events. So why would you want to do this?
Well, the sidebar gadget exists on the sidebar

00:34:46.429 --> 00:34:51.149
very much like another gadget and you see
here soon, the Gmail sidebar gadgets but this

00:34:51.149 --> 00:34:57.321
time in Calendar. And this is an example of
the TripIt gadget. TripIt for those you who

00:34:57.321 --> 00:35:01.730
don't know is like a travel management application,
really make it easy for you to know where

00:35:01.730 --> 00:35:06.440
all you're traveling to and it actually integrate
your upcoming travel schedule right inside

00:35:06.440 --> 00:35:12.180
Google calendar. There's also another great
Calendar sidebar gadget that you guys should

00:35:12.180 --> 00:35:16.670
check out over in the Developer Sandbox that
I just saw this morning. Again, the folks

00:35:16.670 --> 00:35:21.770
at Appareo, they make a lot Web based meetings.
They use go-to meeting and they actually created

00:35:21.770 --> 00:35:27.660
a Calendar sidebar gadget that allows them
to create a go-to meeting directly from an

00:35:27.660 --> 00:35:30.720
event. So the text with the event is reading
all the information about the date and time

00:35:30.720 --> 00:35:35.500
of the event and gives them a one bond and
to click to create a go-to meeting. A really

00:35:35.500 --> 00:35:40.710
powerful stuff, I encourage you all to check
that out in the Sandbox. So now, I'm going

00:35:40.710 --> 00:35:43.770
to give you a demo to go back to the SaaSy
Voice application that we've been talking

00:35:43.770 --> 00:35:48.270
about and we demo the Gmail sidebar gadget.
I kind of alluded to that earlier but I want

00:35:48.270 --> 00:35:55.420
to show it to you for real here. So I hop
over my Web browser, run my Gmail log-in screen.

00:35:55.420 --> 00:36:02.160
I'm going to log in as Steve here, don't tell
anyone I have Steve's password. And you see

00:36:02.160 --> 00:36:08.210
on the left-hand side here is the SaaSy Voice
application and we see that voice mail from

00:36:08.210 --> 00:36:16.080
Litigious Larry. In theory, I can click on
this right here, I haven't tested this too

00:36:16.080 --> 00:36:20.270
much but, I guess I didn't test it quite enough.
But, you know, basically, I can display the

00:36:20.270 --> 00:36:26.150
content of my voicemails right alongside my
email. It's a really great way in order to

00:36:26.150 --> 00:36:33.170
take your application and integrate it into
Google Apps where a lot of users are spending

00:36:33.170 --> 00:36:41.990
a lot of their time. Okay, now, you may wonder
how these gadgets are distributed. They're

00:36:41.990 --> 00:36:47.010
two different types of gadgets for the marketplace
or for marketplace apps. The first one our

00:36:47.010 --> 00:36:52.460
admin installed gadgets. So, with the Gmail
contextual gadgets, if your application has

00:36:52.460 --> 00:36:57.641
a Gmail contextual gadget, just on the same
page where you grant access to things like

00:36:57.641 --> 00:37:02.170
the calendar and the context, the administrator
can also approve installing this contextual

00:37:02.170 --> 00:37:07.660
gadget to have access to the email. And this
is installed for every user in the company

00:37:07.660 --> 00:37:12.250
and then will trigger on the regular expression
for every user. The other types of gadgets

00:37:12.250 --> 00:37:17.230
are users installed. We're certainly looking
at and making more of this available to be

00:37:17.230 --> 00:37:22.260
installed, you know, as it, by an administrator.
But, many of this right now are user installed,

00:37:22.260 --> 00:37:26.050
and what that means you just provide some
simple instructions to your users, how to

00:37:26.050 --> 00:37:33.710
install the gadget in various places like
the Calendar or mail. Now, there's one important

00:37:33.710 --> 00:37:37.980
topic here with gadgets and there is another
sessions, actually two sessions tomorrow on

00:37:37.980 --> 00:37:42.599
gadgets that I'll get to here shortly but,
just a brief overview on this, the way that

00:37:42.599 --> 00:37:48.470
gadgets communicate. Well, gadgets use JavaScript,
using the open social gadget APIs, and they

00:37:48.470 --> 00:37:52.950
use JavaScript to request data from the application.
In this case, the application is requesting

00:37:52.950 --> 00:37:58.140
data from the SaaSy Voice--I am sorry, the
gadget is requesting data from the SaaSy Voice

00:37:58.140 --> 00:38:02.650
application. This data request is all proxy
through the container or Gmail in this case,

00:38:02.650 --> 00:38:08.780
and this is all to avoid cross-domain issues.
Gmail then adds information as the container

00:38:08.780 --> 00:38:15.130
adds information to this request includes
like the ID of the current viewer and signs

00:38:15.130 --> 00:38:20.119
all this information. The SaaSy Voice application
then verifies the signature, verifies its

00:38:20.119 --> 00:38:26.609
Google who signed the request and gets out
this open social ID number 34124561 or whatever

00:38:26.609 --> 00:38:32.780
it is; gets out that number. Now the next
things we'd like to do, we'd like to have

00:38:32.780 --> 00:38:36.339
that application to render the list of voicemails
and display them in the gadget that would

00:38:36.339 --> 00:38:44.280
be awesome. But the problem is, is we don't
know who this user is. Who is "34124561"?

00:38:44.280 --> 00:38:49.910
This is just their open social ID? Our application
SaaSy Voice is often accessed, you know, as

00:38:49.910 --> 00:38:55.450
a full Web application and we don't know with
their open social ID is. So you want to do

00:38:55.450 --> 00:39:00.910
open social, you want to do a mapping between
the open social ID and OpenID. And you could

00:39:00.910 --> 00:39:05.700
do the OpenID right for, within the gadget,
and I'm going to show you a little demo here

00:39:05.700 --> 00:39:10.369
of that. Keep in mind, there's a quick sample,
the user experience can definitely be improved,

00:39:10.369 --> 00:39:14.549
I'm sure you have many ways to do that. But
I go down here and this is the very first

00:39:14.549 --> 00:39:19.750
time, I, as a user, access this gadget. I
hit sign in, since the marketplace application

00:39:19.750 --> 00:39:23.220
it just goes right away, I don't enter grand
access; my administrator has already granted

00:39:23.220 --> 00:39:29.180
access for my identity to pass on that application
and the application signs me in. And what

00:39:29.180 --> 00:39:34.650
it does after it signs me in is actually stores
in the database table for the SaaSy Voice

00:39:34.650 --> 00:39:39.810
application, a mapping between my OpenID and
my open social ID. So from then on for the

00:39:39.810 --> 00:39:44.790
life of this user, I never have to do OpenID
in the gadget. OpenID, you know, at times

00:39:44.790 --> 00:39:49.040
can be a little slow that first time around
especially within a gadget, if you'd many

00:39:49.040 --> 00:39:53.620
different Apps doing at the same time. So
we really want to avoid doing it with every

00:39:53.620 --> 00:40:01.559
single time I visit this gadget and this is
the way that you can do that. So now, testing

00:40:01.559 --> 00:40:07.300
your application. As you saw, I didn't test
that gadget too well and playing the voicemail.

00:40:07.300 --> 00:40:10.490
So, you really want to make sure you test
your application. You guys know this, you're

00:40:10.490 --> 00:40:14.869
going to test application thoroughly, but
there are some things that you might want

00:40:14.869 --> 00:40:19.250
to keep in mind for testing the Google Apps
integrations of your application. And so there's

00:40:19.250 --> 00:40:24.069
a number of things that we've noticed. We
initially work with about, you know, 50 some

00:40:24.069 --> 00:40:28.059
odd people to launch on the marketplace when
the marketplace launched in March; 50 some

00:40:28.059 --> 00:40:33.260
odd vendors. And now, we have over a 100 vendors
in the marketplace, and so we've gained the

00:40:33.260 --> 00:40:39.450
collection of best practices and we put them
together as a checklist on [INDISTINCT]google.com.

00:40:39.450 --> 00:40:43.490
So before you submit your app to the marketplace,
please go through this checklist it makes

00:40:43.490 --> 00:40:47.930
it a lot easier to get you approved faster
on the marketplace. But there's a lot of great

00:40:47.930 --> 00:40:54.660
things here, I'm going to highlight a couple
of them. And, I'm going to back up here that--so

00:40:54.660 --> 00:41:00.240
realm mismatch. Realm mismatch, so OpenID,
has this concept of a realm. The realm is

00:41:00.240 --> 00:41:04.690
usually your website, usually the root of
your website and what this basically does

00:41:04.690 --> 00:41:10.930
is all OpenID request that happened with that
path involved, they're all grouped together,

00:41:10.930 --> 00:41:16.420
and you specify a realm in your manifest file.
That manifest XML file that Steve showed you,

00:41:16.420 --> 00:41:21.630
you specify the realm there, but you also
specify when you actually perform your OpenID

00:41:21.630 --> 00:41:26.569
request. This may all seemed like [INDISTINCT],
you know, got to you but you should recognize

00:41:26.569 --> 00:41:29.910
this when you go to launch your app on the
marketplace. Make sure that the value in your

00:41:29.910 --> 00:41:35.200
OpenID request, and in your manifest match
up because that allows this white listing

00:41:35.200 --> 00:41:41.200
to occur where I never have to, as a user,
authorize passing my identity to the web application

00:41:41.200 --> 00:41:46.251
because my administrator hasn't installed
it and already granted that privilege. The

00:41:46.251 --> 00:41:50.569
next thing is OpenID for Google Apps. As many
of you are probably aware, there are two different

00:41:50.569 --> 00:41:54.970
types of Google accounts. They are Google
consumer accounts, or oftentimes referred

00:41:54.970 --> 00:41:59.660
to as Gmail accounts so that they can be on
any domain. And then there are a Google Apps

00:41:59.660 --> 00:42:04.430
account which where businesses host their
email on their own custom domain, and Calendar,

00:42:04.430 --> 00:42:09.200
and Docs, and that sort of thing. Well, you'd
want to make sure you'd implement OpenID for

00:42:09.200 --> 00:42:13.320
Google Apps accounts. We've had some vendors
just to implement the consumer version of

00:42:13.320 --> 00:42:17.160
it, but you'd want to make sure you'd implement
for Google Apps accounts. There's only a slight

00:42:17.160 --> 00:42:20.420
difference in the discovery in the OpenID
discovery, and the library is actually take

00:42:20.420 --> 00:42:24.370
care of that for you, the library that Steve
pointed out. So, but you just really want

00:42:24.370 --> 00:42:30.309
to make sure that you actually implement that.
And third, and perhaps most important, support

00:42:30.309 --> 00:42:35.430
existing users, when you first launch your
app on the marketplace, I'm assuming you're

00:42:35.430 --> 00:42:39.240
going to tell all of your costumers because
your customers actually, you now, are the

00:42:39.240 --> 00:42:43.970
ones deprive in asking for this Google Apps
integrations because they use Google Apps

00:42:43.970 --> 00:42:49.640
and the user application. You want to make
sure to support those users. We had a couple

00:42:49.640 --> 00:42:54.720
apps launched first on the marketplace that
basically treated everyone as new customers.

00:42:54.720 --> 00:43:01.150
And, you know, the existing users had the
suboptimal flow through the application. So

00:43:01.150 --> 00:43:04.940
you really want to make sure support existing
user this basically means during that installed

00:43:04.940 --> 00:43:10.319
flow process, you want to ask, you know, the
person, are you an existing user? If so, enter

00:43:10.319 --> 00:43:14.230
your username and password once and we'll
linked that out to the OpenID, if you're not

00:43:14.230 --> 00:43:23.460
an existing user, click here and get started
right away. So, this is why you're all here,

00:43:23.460 --> 00:43:27.869
selling your application on the marketplace
and we're to go through the different steps

00:43:27.869 --> 00:43:32.210
for that. First of all, Steve talked to you
about the manifest file and the format of

00:43:32.210 --> 00:43:38.520
that. You want to get that all together in
to your copy buffer, and then you want to

00:43:38.520 --> 00:43:45.970
go visit the marketplace. So you go to google.com/appsmarketplace
and then at the top right, you click on sign

00:43:45.970 --> 00:43:50.520
in and then you'll be able to create a vendor
profile which is just a little bit of information

00:43:50.520 --> 00:43:54.850
about your company, name, and address and
that sort of thing, and then you got to create

00:43:54.850 --> 00:44:00.020
a new listing. And here's what the listing
page looks like. The listing page is mostly

00:44:00.020 --> 00:44:03.710
marketing information. So if you're developers
in the room, you don't care about most of

00:44:03.710 --> 00:44:07.940
that, you can ignore it. Send your marketing
folks an note, ask them for that information

00:44:07.940 --> 00:44:13.240
but its things like the name, description
of the application, some key benefits of the

00:44:13.240 --> 00:44:17.390
application, and some collateral like screen
chats and videos and that sort of thing. But

00:44:17.390 --> 00:44:21.920
the important part here, for as developer
audience are the manifest files. You already

00:44:21.920 --> 00:44:26.990
have that manifest there, you copy and paste
it into the manifest box here and then you're

00:44:26.990 --> 00:44:31.569
ready. You can then test your application
on as many domains as you want before you

00:44:31.569 --> 00:44:35.170
publish it. And when you're ready to publish
it after going through that testing checklist,

00:44:35.170 --> 00:44:40.420
of course, you click, I am ready submit this
listing for approval. And then this goes to

00:44:40.420 --> 00:44:46.760
a very simple approval process at Google and
we do a couple of things. One, verify that

00:44:46.760 --> 00:44:50.880
you've meet that minimum bar of implementing
OpenID. Two, verify that you've respected

00:44:50.880 --> 00:44:55.130
the Google brand appropriately and there are
few simple guidelines on that. And three,

00:44:55.130 --> 00:44:59.470
you're actually a business app, you're not
trying to launch a bunch of out of material

00:44:59.470 --> 00:45:05.520
on the marketplace. So very simple guidelines
for approval and we did that within a couple

00:45:05.520 --> 00:45:11.010
days. So now you're actually listed on the
marketplace and you're available for sale.

00:45:11.010 --> 00:45:14.910
And here's actually a quote from one of the
vendors that's in the marketplace. You guys

00:45:14.910 --> 00:45:20.369
can talk to them again out in the Sandbox
but, they noticed a large numbers of customers

00:45:20.369 --> 00:45:25.410
coming in from the Google Apps marketplace.
You can see the graph of that there. But the

00:45:25.410 --> 00:45:29.069
key thing I want to point out here is that
their customer site, they're really strong

00:45:29.069 --> 00:45:34.661
integration with the various data points as
a key feature of why the purchased the application.

00:45:34.661 --> 00:45:40.780
So, you want to make sure not to just have
that minimum bar but to actually do some additional

00:45:40.780 --> 00:45:48.289
integration in order to make the lives of
your customers a lot easier. Okay, so that's

00:45:48.289 --> 00:45:53.349
basically where we are today. I want to take
about the roadmap and as, you know, as you're

00:45:53.349 --> 00:45:57.710
probably all familiar with Google doesn't
often talk about the roadmap. So I want to

00:45:57.710 --> 00:46:02.060
talk first about some recent launches with
the Gmail contextual gadgets. We just launch

00:46:02.060 --> 00:46:07.940
yesterday as we mentioned. OAuth support for
Gmail's IMAP and SMTP services launched a

00:46:07.940 --> 00:46:12.579
couple of months ago and it's a great way
to get access to email whether approved by

00:46:12.579 --> 00:46:16.869
the individual user or approved by the domain
administrator. You can use the standard IMAP

00:46:16.869 --> 00:46:24.619
and SMTP protocols for that access. And as
you heard today, the launch of Wave for Google

00:46:24.619 --> 00:46:28.859
Apps and there are some developer opportunities
available there as well. So the big thing

00:46:28.859 --> 00:46:34.319
on the road map are the billing APIs. The
goals of the billing APIs, we didn't go too

00:46:34.319 --> 00:46:39.650
much into the administrator view of these
applications during the session. But when

00:46:39.650 --> 00:46:44.650
you install an application from the apps marketplace,
all the applications are listed alongside

00:46:44.650 --> 00:46:50.520
the other Goggle Apps in the Google Apps control
panel. So the administrator has one view where

00:46:50.520 --> 00:46:55.420
they can see all their cloud applications
and configure them and, you know, assign them

00:46:55.420 --> 00:46:59.809
appropriately and that sort of thing. Well,
we want to do the same thing for billing.

00:46:59.809 --> 00:47:05.740
We want to provide a really simplified invoicing
and payment system for billing so that Google

00:47:05.740 --> 00:47:10.079
Apps customers have one place to go to manage
the billing for all their cloud applications

00:47:10.079 --> 00:47:14.450
and they don't have to go to, you know, a
bunch of websites around the Web in order

00:47:14.450 --> 00:47:18.390
to configure this and enter their credit card
number a dozen times and that's sort of thing.

00:47:18.390 --> 00:47:23.460
So we're planning to launch our billing APIs
on the second half of this year. They required

00:47:23.460 --> 00:47:29.029
for installable Apps after a transition period
where you can integrate with them and the

00:47:29.029 --> 00:47:33.890
revenue sharing starts once the building APIs
are adapted. There's all sorts of different

00:47:33.890 --> 00:47:39.369
features in these billing APIs like I mentioned
we now have over a 100 apps in the marketplace

00:47:39.369 --> 00:47:43.950
and, you know, a 100 business focused application
that are there and they all have different

00:47:43.950 --> 00:47:49.750
billing models and different ways of collecting
payment from their customers. We're well aware

00:47:49.750 --> 00:47:53.960
of that and we're going to be working with
them as we design and implement these APIs

00:47:53.960 --> 00:48:02.390
to make sure that as many possible use-cases
of billing are met before we release these

00:48:02.390 --> 00:48:09.569
billing APIs. So to learn more about all of
this, there are numbers of different I/O sessions

00:48:09.569 --> 00:48:14.650
coming up. Tomorrow, I'm going to be doing
a session along with Dave Premer, a fellow

00:48:14.650 --> 00:48:20.681
engineer on OpenID and OAuth for Google Apps.
And this session is not going to dive into

00:48:20.681 --> 00:48:25.690
the details of the protocols, but he's really
going to help you understand when each of

00:48:25.690 --> 00:48:30.400
these flavors of OpenID and OAuth should be
used, for what types of applications and for

00:48:30.400 --> 00:48:35.349
what types of users scenarios. Then we're
going to follow those sessions with two sessions

00:48:35.349 --> 00:48:40.510
by Dan Holeyvolt on our gadgets team and he's
going to be talking about gadgets for Google

00:48:40.510 --> 00:48:44.530
Apps and then dive into the details of Gmail
contextual gadgets that launched yesterday.

00:48:44.530 --> 00:48:50.020
So I encourage you all to check those out
and then there are number of different online

00:48:50.020 --> 00:48:54.180
resources available. We have a site for our
business and marketing folks to learn about

00:48:54.180 --> 00:48:58.869
the value proposition of the Google Apps marketplace,
a site for the technical folks to learn how

00:48:58.869 --> 00:49:03.299
to code, their integration. If you all just
want to go shopping, I mean, I'd loved for

00:49:03.299 --> 00:49:06.829
you to all launch an app on the marketplace,
but if you just want to go shopping, I'm going

00:49:06.829 --> 00:49:10.660
to stop you there's the URL, go by a bunch
of apps, I'm sure your fellow developers will

00:49:10.660 --> 00:49:15.339
be happy with that. And if you don't have
Google Apps, I'm not quite sure why you're

00:49:15.339 --> 00:49:21.150
in this room currently but, you can go to
google.com/a and by Google Apps or use the

00:49:21.150 --> 00:49:26.690
phrase, [INDISTINCT] as well. So now we're
going to go over into our question and answer

00:49:26.690 --> 00:49:31.420
period. I'm going to open up moderator, but
before I do that I want to encourage all of

00:49:31.420 --> 00:49:35.980
you to stop by the Sandbox and see all the
different types of applications. Many of the

00:49:35.980 --> 00:49:42.910
Sandbox partners are actually in the marketplace
and they do also have t-shirts to hand out

00:49:42.910 --> 00:49:48.010
to you. You may to listen to, about their
application but I'm sure you'll enjoy it.

00:49:48.010 --> 00:49:53.970
To get a t-shirt, an awesome t-shirt for the
Google Apps marketplace, so stop by there

00:49:53.970 --> 00:49:57.920
and we'll also be around obviously overtime.
So you can step up to the mics and we can

00:49:57.920 --> 00:50:01.670
go over to the moderator. Well, I'm going
over to the moderator want to take the first

00:50:01.670 --> 00:50:05.193
question from the mic here. [INDISTINCT] your
moderator. Jared with AwayFind, we were one

00:50:05.193 --> 00:50:07.001
of your contextual gadgets; thank you, guys
for your help. I'm just curious if in the

00:50:07.001 --> 00:50:10.270
future, in the process of an admin installing
for the entire domain, if they'll have any

00:50:10.270 --> 00:50:18.760
ability to be kind of a little bit more granular
in terms of who they select to have a particular

00:50:18.760 --> 00:50:21.540
application of it as to be the kind of the
whole thing at once.

00:50:21.540 --> 00:50:27.720
&gt;&gt; BAZYL: Yeah, I mean, that's definitely
a request that we hear often and it's something

00:50:27.720 --> 00:50:31.000
that we're looking at doing. It's, basically,
right now, when the domain administrator installs

00:50:31.000 --> 00:50:34.780
an app on the Google Apps marketplace, it's
immediately available to all users in the

00:50:34.780 --> 00:50:39.830
domain. There are sometimes types of applications
where it's more relevant for the application

00:50:39.830 --> 00:50:43.539
to only be available to a subset of users
whether it'd be a particular group of people

00:50:43.539 --> 00:50:47.760
like the payroll department or things like
that. And so, yeah, it's definitely something

00:50:47.760 --> 00:50:51.500
that we're looking into. I don't have any
promises on dates or a promise that we'll

00:50:51.500 --> 00:50:55.989
do it but, it is something well aware of as
a constant mean.

00:50:55.989 --> 00:51:00.460
&gt;&gt; Thanks.
&gt;&gt; BAZYL: So, let's go through here on this

00:51:00.460 --> 00:51:06.760
presenter view. Is there a way to implement
setup authentication or--sorry, step up authentication

00:51:06.760 --> 00:51:10.170
even after a single sign on through OpenID.
Steve?

00:51:10.170 --> 00:51:15.369
&gt;&gt; BOYD: Who asked that question? Or...
&gt;&gt; BAZYL: Someone raised their hand.

00:51:15.369 --> 00:51:23.020
&gt;&gt; BOYD: I'm not quite sure what the feature
is asking for. There is an extension to OpenID

00:51:23.020 --> 00:51:27.970
for people that need to force authentication
if you want to make sure that, you know, user

00:51:27.970 --> 00:51:33.569
is, you know, really at their keyboard to
call the provider authentication policy extension.

00:51:33.569 --> 00:51:37.560
And you can basically say, you know, make
sure the user has been logged in within the

00:51:37.560 --> 00:51:42.950
last N seconds. So you can do, you know, 15
minutes or whatever and it's a way that you

00:51:42.950 --> 00:51:47.049
can make sure that the user is present. In
terms of things like strong authentication,

00:51:47.049 --> 00:51:52.059
that's not a feature that we have in Google
Apps at this time. But, you know, if whoever

00:51:52.059 --> 00:51:55.089
asked that question, if you can clarify what
you're looking for it would help.

00:51:55.089 --> 00:51:59.960
&gt;&gt; BAZYL: You know, come and see us after
the session as well. All right, another question

00:51:59.960 --> 00:52:07.520
at the mic.
&gt;&gt; Okay, in the presentation to get the data

00:52:07.520 --> 00:52:17.420
access from the user, we need to use 2-legged
OAuth, but I am wondering if we can use 3-legged

00:52:17.420 --> 00:52:22.709
OAuth as well.
&gt;&gt; BAZYL: Yes, you can you can--go ahead.

00:52:22.709 --> 00:52:26.920
&gt;&gt; Is it supported as well?
&gt;&gt; BAZYL: So 2-legged OAuth, we belief has

00:52:26.920 --> 00:52:31.740
some advantages for the administrators and
for the end-users. 2-legged OAuth basically

00:52:31.740 --> 00:52:35.720
has the advantage that the administrator is
granting access to the data and it's granted

00:52:35.720 --> 00:52:39.559
once by the administrator instead of by each
of the individual users, which is 3-legged

00:52:39.559 --> 00:52:44.460
OAuth is used for. We think this has a distinctive
advantage because the administrator is the

00:52:44.460 --> 00:52:49.900
one that often owns the data and has the rights
to grant access to it. Individual users maybe

00:52:49.900 --> 00:52:54.829
kind of confused as to whether it is okay
with their company security policies, but

00:52:54.829 --> 00:53:01.440
the administrators are the ones that can do
that. So that being said, we do actually have

00:53:01.440 --> 00:53:06.990
a number of apps in the marketplace that do
use 3-legged OAuth to access users' data and

00:53:06.990 --> 00:53:11.510
that they prompt individual users for access
to their data, and that's fine. There's a

00:53:11.510 --> 00:53:16.730
few little bits in the UI of the marketplace
that are automated based off like the 2-legged

00:53:16.730 --> 00:53:20.950
OAuth, and being in the manifest so won't
get those. But you can, you know, use 3-legged

00:53:20.950 --> 00:53:24.799
OAuth if you want in a marketplace application.
Just, you know, keep your users in mind and

00:53:24.799 --> 00:53:27.150
figure out what the best ways for them.
&gt;&gt; Yeah.

00:53:27.150 --> 00:53:34.539
&gt;&gt; BOYD: The only we'd discourage with 3-legged
is using the OpenID OAuth Hybrid mode that

00:53:34.539 --> 00:53:41.450
allows you to combine them because that will
break the white listing. And there's OpenID

00:53:41.450 --> 00:53:46.599
on premier domains is disabled by default,
so you can actually need a very bad user experience

00:53:46.599 --> 00:53:52.730
on premier domains if you use hybrid. But,
you can still do OpenID and OAuth separately

00:53:52.730 --> 00:53:57.020
and that will work fine.
&gt;&gt; BAZYL: Thanks. So next we'll take quickly

00:53:57.020 --> 00:54:02.599
is from the moderator. Is there a way to integrate
Google Talk like they did in JIRA Studio?

00:54:02.599 --> 00:54:10.349
So, Google Talk actually uses the open standard
XMPP for communication and the only issue

00:54:10.349 --> 00:54:15.270
with Google Talk right now is that it does
require the user's username and password to

00:54:15.270 --> 00:54:22.400
login to it. As I mentioned earlier, we've
launched OAuth support for our IMAP and SMTPs.

00:54:22.400 --> 00:54:27.441
So we're not opposed to extending standard
protocols and adding OAuth support to make

00:54:27.441 --> 00:54:32.859
it more secure. But, you know, we don't have
announced yet that the availability for that

00:54:32.859 --> 00:54:41.650
for XMPP or Google Talk, it's certainly something
that we're considering. So, next up. Do we

00:54:41.650 --> 00:54:47.559
have any other question at the mic? No? Okay,
so in the demonstration all the domains users

00:54:47.559 --> 00:54:51.730
were provisioned and charged once. Can the
administrator choose--so this was the same

00:54:51.730 --> 00:54:57.760
question from the folks at AwayFind. In terms
of, to clarify this is when you install a

00:54:57.760 --> 00:55:02.250
marketplace application as a domain administrator,
the application is installed and available

00:55:02.250 --> 00:55:07.560
in the universal navigation, the bar at the
top of email Calendar, et cetera. It's installed

00:55:07.560 --> 00:55:15.099
and available for all the different users
but you can actually as a vendor in the marketplace

00:55:15.099 --> 00:55:22.339
choose to bill however you want. So, you can
choose to say that, you know, only five users

00:55:22.339 --> 00:55:26.230
access this application this month even though
there are 50 people in the company so I'm

00:55:26.230 --> 00:55:31.359
only going to bill for five users. Or you
can actually do name the licenses where during

00:55:31.359 --> 00:55:35.440
the administrator flows, you actually ask
the administrator to list the people in their

00:55:35.440 --> 00:55:39.599
company that they want to have access to the
application and you can manage that yourself.

00:55:39.599 --> 00:55:43.309
We're just not doing it in automated fashion
yet on our side, but that, you know, again,

00:55:43.309 --> 00:55:50.920
this is something that we're definitely considering.
&gt;&gt; One quick question. What you're advising

00:55:50.920 --> 00:55:59.940
regarding Google Apps Engine application because
in Google Apps Engine you have users API,

00:55:59.940 --> 00:56:08.561
but in the Google Apps marketplace you are
pushing an OpenID flows so you have only one

00:56:08.561 --> 00:56:14.119
instance of your application. So, I don't
know what's the best practice there?

00:56:14.119 --> 00:56:18.309
&gt;&gt; BAZYL: Sure, so we do have a number of
different App Engine apps that are in the

00:56:18.309 --> 00:56:24.030
marketplace. Most of them don't use the user
API, they just use OpenID or have their method

00:56:24.030 --> 00:56:28.880
of authenticating against the Datastore and
things like that. You can certainly take that

00:56:28.880 --> 00:56:33.260
strategy. We are certainly looking at how
to make the development process easier for

00:56:33.260 --> 00:56:38.329
App Engine apps to hook in to things like
OpenID. There's nothing out there yet that

00:56:38.329 --> 00:56:43.720
does that exactly. But, so, my recommendation
at this point would be not to use the user's

00:56:43.720 --> 00:56:47.190
API instead use OpenID. I don't know if that's
practical if you already have launched that,

00:56:47.190 --> 00:56:57.180
but I'm happy to talk with you about it after
this session and we can go to details.

00:56:57.180 --> 00:56:58.180
&gt;&gt; Thanks.
&gt;&gt; BAZYL: Sure.

00:56:58.180 --> 00:57:00.990
&gt;&gt; So, on your demo you were able to setup
accounts for existing users. Can you hook

00:57:00.990 --> 00:57:07.890
up to the user creation event for, you know,
if you add new users to your domain?

00:57:07.890 --> 00:57:13.319
&gt;&gt; BAZYL: So, the Provisioning API when you
get access by 2-legged OAuth, if the domain

00:57:13.319 --> 00:57:18.760
administrator grants you access by a 2-legged
OAuth during the install process, you can

00:57:18.760 --> 00:57:22.980
actually then access that API offline. That's
one of the benefits of the 2-legged OAuth

00:57:22.980 --> 00:57:27.810
is that the user doesn't necessarily have
to be at the keyboard for you to access the

00:57:27.810 --> 00:57:33.269
API. So you could actually query the Provisioning
API and see if there are new users and set

00:57:33.269 --> 00:57:37.710
those users up. Or do a something like send
an email to the domain administrator and say,

00:57:37.710 --> 00:57:42.010
"Hey, we see the following new users. Click
on this link below to setup them up or use

00:57:42.010 --> 00:57:47.080
the contextual gadgets and do that all within
the concept." In the context of the email,

00:57:47.080 --> 00:57:50.640
all sorts of different ways that you can handle
that, but you could handle the users in a

00:57:50.640 --> 00:57:56.420
later flow. Like I was trying to allude to
it's not, as far as Google is concerned at

00:57:56.420 --> 00:58:01.230
this point, the apps installed for the entire
domain, as an application developer, you can

00:58:01.230 --> 00:58:04.089
choose how to restrict access and how to manage
that access at this point.

00:58:04.089 --> 00:58:09.260
&gt;&gt; BOYD: One other note on that. A lot of
the apps in the marketplace even though they

00:58:09.260 --> 00:58:13.849
may have a setup process in large of what
we showed, they don't actually create the

00:58:13.849 --> 00:58:17.640
user accounts until the first time the user
logs in that's one of the advantages with

00:58:17.640 --> 00:58:21.619
the OpenID and the attribute exchange is the
same information that we got with the Provisioning

00:58:21.619 --> 00:58:26.029
API. We just as easily could have got the
very first time that user hit the app and

00:58:26.029 --> 00:58:31.470
then just, you know, add them on demand.
&gt;&gt; BAZYL: So, the question here. Does that

00:58:31.470 --> 00:58:37.900
supply to Mobile Apps if one has an enterprise
mobile version? So right now, like the universal

00:58:37.900 --> 00:58:45.210
navigation flow and all isn't available on
the mobile versions of our applications. Although

00:58:45.210 --> 00:58:49.650
certainly if one of these users that has bought
the application through the Google Apps marketplace

00:58:49.650 --> 00:58:56.390
could access your mobile version and do OpenID
flow, you know, in a mobile browser just the

00:58:56.390 --> 00:59:03.849
same. And then the final question; is the
$100 onetime per application or per developer?

00:59:03.849 --> 00:59:09.980
It is per developer. So each vendor account
has a $100 one time fee and then you can list

00:59:09.980 --> 00:59:15.349
as many unique applications in the marketplace
as you want after paying that one time fee.

00:59:15.349 --> 00:59:18.849
And then will there be recurring billing?
Recurring billing is obviously a feature that

00:59:18.849 --> 00:59:23.329
a lot of apps in the marketplace use. That's
definitely something that we're considering

00:59:23.329 --> 00:59:29.200
for as we're designing the billing API. And
that's all. Feel free to catch-up with us

00:59:29.200 --> 00:59:34.151
after this session or we'll be in office hours
in the Sandbox and that sort of thing and

00:59:34.151 --> 00:59:37.849
ask any additional questions you have. And
don't forget to pickup your t-shirt after

00:59:37.849 --> 00:59:40.489
talking with the Sandbox partners. All right.

