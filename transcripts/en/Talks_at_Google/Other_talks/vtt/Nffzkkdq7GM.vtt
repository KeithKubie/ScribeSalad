WEBVTT
Kind: captions
Language: en

00:00:02.960 --> 00:00:07.390
BRAM ADAMS: Welcome, everybody,
on this relatively sunny day

00:00:07.390 --> 00:00:09.440
at the Releng 2014.

00:00:09.440 --> 00:00:12.830
So there will be lots of
people here, around 100.

00:00:12.830 --> 00:00:15.660
So this was a huge organization.

00:00:15.660 --> 00:00:17.855
So there's quite some
people who worked on this.

00:00:17.855 --> 00:00:19.230
Not everybody
could make it here.

00:00:19.230 --> 00:00:21.597
Chris and Kim, unfortunately,
could not be here.

00:00:21.597 --> 00:00:23.430
But there are some other
people in the room,

00:00:23.430 --> 00:00:27.060
like Foutse, for example,
Stephany, she's still,

00:00:27.060 --> 00:00:31.040
I think, outside, Boris
is just coming in.

00:00:31.040 --> 00:00:35.180
And then there's Akos as well,
who's probably also outside

00:00:35.180 --> 00:00:37.070
and coming in soon.

00:00:37.070 --> 00:00:38.370
And I'm Bram, Bram Adams.

00:00:38.370 --> 00:00:39.730
OK, cool.

00:00:39.730 --> 00:00:43.820
First of all, we're
at Google right now.

00:00:43.820 --> 00:00:46.700
And this would not have been
possible without some people

00:00:46.700 --> 00:00:48.860
internally who have
helped us quite a lot.

00:00:48.860 --> 00:00:50.397
That's one of them, Boris.

00:00:50.397 --> 00:00:51.480
And Akos is the other one.

00:00:51.480 --> 00:00:55.570
So I really would like to thank
them and people who are here,

00:00:55.570 --> 00:00:57.870
like Dominic and Eugene,
and so let's thank

00:00:57.870 --> 00:00:59.790
them first for helping
us set this up.

00:01:04.510 --> 00:01:05.680
Cool, OK.

00:01:05.680 --> 00:01:08.300
Now, Releng.

00:01:08.300 --> 00:01:10.820
A while ago, I did my
yearly chocolate pilgrimage

00:01:10.820 --> 00:01:11.560
in Belgium.

00:01:11.560 --> 00:01:14.610
And I ended up in Brussels at
some conference called Fosdem,

00:01:14.610 --> 00:01:16.720
which is about open
source development.

00:01:16.720 --> 00:01:18.070
And I wandered the corridors.

00:01:18.070 --> 00:01:20.230
I could hardly pass.

00:01:20.230 --> 00:01:23.170
So these are lined up--
more people lining up

00:01:23.170 --> 00:01:24.450
to go in the room.

00:01:24.450 --> 00:01:26.400
And the room was full
and blocked by somebody

00:01:26.400 --> 00:01:30.240
in the Puppet Lab t-shirt--
no correlation there.

00:01:30.240 --> 00:01:32.240
And then I was trembling
with trepidation there,

00:01:32.240 --> 00:01:34.940
and then I took a picture,
which is blurry on purpose.

00:01:34.940 --> 00:01:36.210
And it shows "Full".

00:01:36.210 --> 00:01:39.200
And this was a session on
configuration management.

00:01:39.200 --> 00:01:40.580
Now what was that?

00:01:40.580 --> 00:01:44.551
Well, this is a session about
all things release engineering,

00:01:44.551 --> 00:01:45.050
actually.

00:01:45.050 --> 00:01:49.280
They're talking about
deployment clouds, enterprise

00:01:49.280 --> 00:01:50.450
configuration management.

00:01:50.450 --> 00:01:51.320
It's full.

00:01:51.320 --> 00:01:53.920
And these are all people want
to learn these open source

00:01:53.920 --> 00:01:56.040
technologies supporting that.

00:01:56.040 --> 00:01:58.880
And then I said, yes this makes
sense, because I saw this blog

00:01:58.880 --> 00:02:02.210
post a bit earlier by this
gentleman here, who said,

00:02:02.210 --> 00:02:05.170
well, you know, continuous
delivery is mainstream.

00:02:05.170 --> 00:02:07.662
And he got a lot of backlash
there, which is weird

00:02:07.662 --> 00:02:09.620
because we just saw all
these people lining up.

00:02:09.620 --> 00:02:11.750
They want to use
continuous delivery and all

00:02:11.750 --> 00:02:14.320
these fancy [INAUDIBLE]
technologies.

00:02:14.320 --> 00:02:17.540
And this backlash
was like and update.

00:02:17.540 --> 00:02:20.480
And his point was
actually that since 2010,

00:02:20.480 --> 00:02:22.490
people like a Facebook,
Google, Amazon

00:02:22.490 --> 00:02:25.010
have been doing continuous
delivery-- all these things.

00:02:25.010 --> 00:02:27.880
So we're four years later,
so this should be mainstream

00:02:27.880 --> 00:02:29.090
right now.

00:02:29.090 --> 00:02:34.280
But he made some formulations
that caused some controversy.

00:02:34.280 --> 00:02:35.905
And later on, there
came this blog post

00:02:35.905 --> 00:02:38.230
that actually nailed
it down, exactly.

00:02:38.230 --> 00:02:41.230
And I want to zoom in exactly
on what this blog post said.

00:02:44.121 --> 00:02:45.620
What it says is
actually yes, people

00:02:45.620 --> 00:02:47.449
want to really apply
continuous delivery

00:02:47.449 --> 00:02:48.990
and all these
[INAUDIBLE] engineering

00:02:48.990 --> 00:02:51.650
techniques in their situation.

00:02:51.650 --> 00:02:53.305
And that's where the problem is.

00:02:53.305 --> 00:02:54.430
Because how do you do that?

00:02:54.430 --> 00:02:55.330
It works at Google.

00:02:55.330 --> 00:02:56.579
It works at Facebook.

00:02:56.579 --> 00:02:58.120
They did lots of
effort through this,

00:02:58.120 --> 00:03:00.310
and made some mistakes
along the way.

00:03:00.310 --> 00:03:03.040
How does their work
apply to other companies?

00:03:03.040 --> 00:03:03.720
OK.

00:03:03.720 --> 00:03:05.570
For example, how
can you actually get

00:03:05.570 --> 00:03:07.931
buy-in for your management
to spend effort to get there?

00:03:07.931 --> 00:03:09.680
All these kind of
thing-- other techniques

00:03:09.680 --> 00:03:11.570
you can use, what are the tools?

00:03:11.570 --> 00:03:16.250
So bottom line, you have a bunch
of people in the industry who

00:03:16.250 --> 00:03:18.300
want to apply
continuous delivery.

00:03:18.300 --> 00:03:21.590
Plus you have a whole bunch
of these guys-- researchers

00:03:21.590 --> 00:03:23.290
who want to help you,
who want to prove

00:03:23.290 --> 00:03:26.950
that continuous delivery
helps, it improves quality.

00:03:26.950 --> 00:03:28.855
So what happens if
you combine both?

00:03:28.855 --> 00:03:31.440
Then you're here, at Releng.

00:03:31.440 --> 00:03:33.950
That's the goal of this
workshop-- people talking

00:03:33.950 --> 00:03:36.980
about experiences, how they
can go to rapid release,

00:03:36.980 --> 00:03:38.505
and all these kind of things.

00:03:38.505 --> 00:03:41.400
We have researchers who want
to help, who show some results,

00:03:41.400 --> 00:03:43.530
want to get ideas
for further research.

00:03:43.530 --> 00:03:46.540
And that's basically
why we're here.

00:03:46.540 --> 00:03:47.533
Right here.

00:03:47.533 --> 00:03:48.570
OK, cool.

00:03:48.570 --> 00:03:50.580
So now the workshop.

00:03:50.580 --> 00:03:51.990
What will we see today?

00:03:51.990 --> 00:03:53.990
Well we had lots of submissions.

00:03:53.990 --> 00:03:58.490
We don't get to five, not
ten, not 15-- 18 submissions,

00:03:58.490 --> 00:04:00.050
which is quite cool.

00:04:00.050 --> 00:04:02.270
Even cooler, especially
given what I just said,

00:04:02.270 --> 00:04:05.550
is that half of them are from
industry and half of them

00:04:05.550 --> 00:04:08.480
are from research, exactly.

00:04:08.480 --> 00:04:11.760
So from these 18, 16
will be presented today.

00:04:11.760 --> 00:04:13.620
You'll be seeing them.

00:04:13.620 --> 00:04:16.070
And you can interact and discuss
and these kind of things.

00:04:16.070 --> 00:04:18.140
And now, we had a
very busy schedule.

00:04:18.140 --> 00:04:20.860
So we had one week for
people to actually review

00:04:20.860 --> 00:04:22.160
all these submissions.

00:04:22.160 --> 00:04:24.690
So some people read it like
huge effort here in one week.

00:04:24.690 --> 00:04:28.380
They do this thing and
even discuss things online.

00:04:28.380 --> 00:04:31.061
So really let's thank these
people for doing this work.

00:04:38.145 --> 00:04:39.520
BORIS DEBIC: All
right, everybody

00:04:39.520 --> 00:04:41.420
I want to welcome
you again, and I

00:04:41.420 --> 00:04:46.940
want to welcome our first
speaker today, Mr. Charles

00:04:46.940 --> 00:04:50.950
Chuck Rossi, off Facebook.

00:04:50.950 --> 00:04:53.010
I know him-- yes,
give him a hand.

00:04:53.010 --> 00:04:56.148
Give him a hand.

00:04:56.148 --> 00:04:58.820
He is already a release
engineering celebrity

00:04:58.820 --> 00:05:01.960
of sorts in Silicon
Valley for many reasons

00:05:01.960 --> 00:05:04.790
of which I won't
come and talk about.

00:05:04.790 --> 00:05:07.160
But I know Chuck from Google.

00:05:07.160 --> 00:05:08.580
He used to work at Google.

00:05:08.580 --> 00:05:12.820
In 2008, Chuck joined
Facebook, and he's

00:05:12.820 --> 00:05:14.910
working in the release
engineering group

00:05:14.910 --> 00:05:17.350
at Facebook ever since.

00:05:17.350 --> 00:05:24.020
As you probably know, Facebook's
application on iOS and Android

00:05:24.020 --> 00:05:27.650
is the most popular
application on the planet.

00:05:27.650 --> 00:05:31.220
And those guys who
work with Charles,

00:05:31.220 --> 00:05:34.570
they release this twice a day.

00:05:34.570 --> 00:05:40.320
So he has a lot of experience
in how to push change lists

00:05:40.320 --> 00:05:43.900
and bugs very fast
into production.

00:05:43.900 --> 00:05:48.610
I would like him to
share with this group

00:05:48.610 --> 00:05:53.060
some of the stories
and war stories

00:05:53.060 --> 00:05:55.390
and some of the
approaches that they

00:05:55.390 --> 00:05:57.780
take at Facebook to
make this a success.

00:05:57.780 --> 00:05:58.900
Chuck, please.

00:06:04.990 --> 00:06:06.240
CHUCK ROSSI: Thank you, Boris.

00:06:06.240 --> 00:06:08.350
I hired Boris at Google.

00:06:08.350 --> 00:06:10.350
I learned a lot about
hiring after that.

00:06:10.350 --> 00:06:13.660
Yeah, sorry for that.

00:06:13.660 --> 00:06:15.520
So I want to talk
a little bit mainly

00:06:15.520 --> 00:06:18.947
about what we're doing
lately at Facebook,

00:06:18.947 --> 00:06:20.030
and it's all about mobile.

00:06:20.030 --> 00:06:22.640
I've talked a lot about
the front end release

00:06:22.640 --> 00:06:26.670
process, the facebook.com
release process, which Boris

00:06:26.670 --> 00:06:28.992
says we're a little bit
famous for because we do it

00:06:28.992 --> 00:06:29.950
twice a day, every day.

00:06:29.950 --> 00:06:33.246
Facebook.com rolls on the new
code every day, twice a day.

00:06:33.246 --> 00:06:34.620
I'll give you
inside information.

00:06:34.620 --> 00:06:37.150
It's around 8:00 am
Pacific and around 4:00 pm

00:06:37.150 --> 00:06:40.470
Pacific is when the
whole site rolls.

00:06:40.470 --> 00:06:44.530
Anywhere between 30 and 300
cherry-picks go out per roll.

00:06:44.530 --> 00:06:46.290
It's a quasi-continuous
deployment,

00:06:46.290 --> 00:06:49.420
with well over 1,000
engineers touching it

00:06:49.420 --> 00:06:52.460
with over a billion people
being affected every time we

00:06:52.460 --> 00:06:54.060
push that button.

00:06:54.060 --> 00:06:56.100
Some of my release
engineers are in the back.

00:06:56.100 --> 00:06:57.260
They're a little
nervous because it's

00:06:57.260 --> 00:06:58.470
about time we should
be rolling it.

00:06:58.470 --> 00:06:59.530
Hopefully, everything's good.

00:06:59.530 --> 00:07:02.029
If you see Facebook go down,
somebody wave their hands like,

00:07:02.029 --> 00:07:03.450
it's not working.

00:07:03.450 --> 00:07:04.779
Let me know.

00:07:04.779 --> 00:07:07.070
The genesis of this talk of
and the talks I give really

00:07:07.070 --> 00:07:11.555
came-- I got to give credit to
John Allspaw and John Hammond.

00:07:11.555 --> 00:07:13.930
At that talk, I think we've
all seen it from the Velocity

00:07:13.930 --> 00:07:16.080
conference from--
when was it-- 2009,

00:07:16.080 --> 00:07:19.970
where they define
the dev/ops thing.

00:07:19.970 --> 00:07:22.260
And we had been doing this
organically at Facebook

00:07:22.260 --> 00:07:24.210
since I got there in 2008.

00:07:24.210 --> 00:07:26.749
And it gave me a
voice and name to call

00:07:26.749 --> 00:07:28.290
this thing and a
sledgehammer I could

00:07:28.290 --> 00:07:29.810
use for the developers
coming in saying,

00:07:29.810 --> 00:07:30.809
this is how we do stuff.

00:07:30.809 --> 00:07:32.750
It's been validated
by these guys.

00:07:32.750 --> 00:07:36.006
This is the way we're doing it.

00:07:36.006 --> 00:07:37.630
The thing I got from
that talk-- what's

00:07:37.630 --> 00:07:38.838
the take away from that talk?

00:07:38.838 --> 00:07:40.180
This slide.

00:07:40.180 --> 00:07:42.009
Right? "No."

00:07:42.009 --> 00:07:44.300
We're all going to look like
that as release engineers.

00:07:44.300 --> 00:07:46.790
That pretty much
summed up my experience

00:07:46.790 --> 00:07:48.810
up to that point of
being a release engineer

00:07:48.810 --> 00:07:51.750
and saying this is I operate.

00:07:51.750 --> 00:07:53.880
But it changed.

00:07:53.880 --> 00:07:57.874
And for mobile,
it changed a lot.

00:07:57.874 --> 00:08:00.290
So the dev/ops movement and
everything we learned at web--

00:08:00.290 --> 00:08:03.120
I consider web delivery
a solved problem.

00:08:03.120 --> 00:08:04.686
For Facebook, it is
a solved problem.

00:08:04.686 --> 00:08:06.060
We've whittled
down the team that

00:08:06.060 --> 00:08:08.200
supports pushing those
300 changes a day

00:08:08.200 --> 00:08:10.820
down to aspectively two people.

00:08:10.820 --> 00:08:13.280
Two people run facebook.com
from a release engineering

00:08:13.280 --> 00:08:16.000
point of view.

00:08:16.000 --> 00:08:18.490
Then we decided, OK,
we're a mobile company.

00:08:18.490 --> 00:08:20.470
And this became a problem,
because we threw out

00:08:20.470 --> 00:08:20.970
everything.

00:08:20.970 --> 00:08:24.170
All the good stuff
that we had learned,

00:08:24.170 --> 00:08:26.640
all the good things that
we had from so many years

00:08:26.640 --> 00:08:29.800
of building up to a continuous
delivery system and all

00:08:29.800 --> 00:08:31.660
this dev/ops crap was great.

00:08:31.660 --> 00:08:33.650
And then mobile came
along, and it's dumb.

00:08:33.650 --> 00:08:35.470
It threw away everything.

00:08:35.470 --> 00:08:38.770
We had to start again
mostly on the culture side

00:08:38.770 --> 00:08:40.470
and on the thinking side.

00:08:40.470 --> 00:08:41.700
And this was unfortunate.

00:08:41.700 --> 00:08:43.158
Now, what we're
dealing with here--

00:08:43.158 --> 00:08:46.140
and Boris alluded to this--
is a scale that is big.

00:08:46.140 --> 00:08:49.362
On IOS, we're the
number one app.

00:08:49.362 --> 00:08:50.820
And we are number
one because there

00:08:50.820 --> 00:08:53.070
are some percentage
of a billion people

00:08:53.070 --> 00:08:55.711
who run that app on their phone.

00:08:55.711 --> 00:08:57.460
I can't tell you the
exact split because I

00:08:57.460 --> 00:09:00.150
don't hurt anyone's feelings.

00:09:00.150 --> 00:09:02.140
Those are monthly active users.

00:09:02.140 --> 00:09:04.540
Think about this--
over 700 million people

00:09:04.540 --> 00:09:07.015
will use the app today, alone.

00:09:09.680 --> 00:09:12.350
There's about 300 plus
engineers working on it.

00:09:12.350 --> 00:09:13.746
There are many features.

00:09:13.746 --> 00:09:14.870
I will make this case here.

00:09:14.870 --> 00:09:17.830
I defy you to find a more
complex app on the platform

00:09:17.830 --> 00:09:18.780
than the Facebook app.

00:09:18.780 --> 00:09:21.490
I don't think there is an
application as complex that

00:09:21.490 --> 00:09:25.940
uses the full stack of the
phone as Facebook does.

00:09:25.940 --> 00:09:28.567
We got to support multiple
devices, even on iOS.

00:09:28.567 --> 00:09:30.150
And remember, there
is a web component

00:09:30.150 --> 00:09:34.180
to most mobile heavyweight apps.

00:09:34.180 --> 00:09:36.680
We are delivering web and
backend endpoints and web

00:09:36.680 --> 00:09:39.740
endpoints to deliver content
and experience to the phone.

00:09:39.740 --> 00:09:40.930
That's iOS.

00:09:40.930 --> 00:09:43.210
Same kind of story on Android.

00:09:43.210 --> 00:09:45.450
It's the number
one non-Google app.

00:09:45.450 --> 00:09:50.480
The number one app people
choose to install is Facebook.

00:09:50.480 --> 00:09:53.770
Again, it's some percentage
of the billion monthly

00:09:53.770 --> 00:09:56.960
in the 700 million daily users.

00:09:56.960 --> 00:09:59.900
Again, about 300 engineers
and again, the same problem.

00:09:59.900 --> 00:10:03.120
The multiple devices problem is
a bit more severe with Android.

00:10:03.120 --> 00:10:04.180
And I'll get into that.

00:10:04.180 --> 00:10:08.520
And again, web component,
you got to worry about.

00:10:08.520 --> 00:10:10.390
So fundamentally, the
thing that gets us

00:10:10.390 --> 00:10:12.730
is if we have problems
on the website,

00:10:12.730 --> 00:10:14.620
if you have a fatal
on facebook.com it

00:10:14.620 --> 00:10:15.940
looks like this.

00:10:15.940 --> 00:10:18.250
So you can't see, but there
is a fatal on that page.

00:10:18.250 --> 00:10:19.880
Something didn't render.

00:10:19.880 --> 00:10:22.255
And that's a php bug,
and I got to fix that.

00:10:22.255 --> 00:10:22.880
That's a fatal.

00:10:22.880 --> 00:10:23.963
I got to fix it right now.

00:10:23.963 --> 00:10:25.140
It's a rendering problem.

00:10:25.140 --> 00:10:27.500
But you pretty much
have an experience.

00:10:27.500 --> 00:10:30.222
If you crash on any mobile
thing, what's it look like?

00:10:30.222 --> 00:10:30.930
Boom, you're out.

00:10:30.930 --> 00:10:31.430
You're done.

00:10:31.430 --> 00:10:34.240
Your user experience is over.

00:10:34.240 --> 00:10:36.780
And you can crash for any
number of reasons on mobile.

00:10:36.780 --> 00:10:39.180
If you develop on mobile,
you know this very well.

00:10:39.180 --> 00:10:40.130
And it's miserable.

00:10:40.130 --> 00:10:41.270
And people hate mobile.

00:10:44.320 --> 00:10:48.369
The user satisfaction numbers
of web versus mobile, mobile's

00:10:48.369 --> 00:10:49.910
in the toilet,
because the experience

00:10:49.910 --> 00:10:51.540
is A, out of our
control many times.

00:10:51.540 --> 00:10:53.700
And B, we can't recover,
do exception handling,

00:10:53.700 --> 00:10:57.840
or gracefully exit
when things go wrong.

00:10:57.840 --> 00:11:01.741
So we're under much
more scrutiny on mobile.

00:11:01.741 --> 00:11:03.490
So we want to do,
though, with our release

00:11:03.490 --> 00:11:06.300
process-- the main thing
is as release engineers,

00:11:06.300 --> 00:11:08.510
we are here to make
the company successful.

00:11:08.510 --> 00:11:11.190
We have to maximize the rate
at which our company can

00:11:11.190 --> 00:11:13.300
do great things-- all of us.

00:11:13.300 --> 00:11:14.980
Our companies want
to do awesome things.

00:11:14.980 --> 00:11:16.900
Our developers want to
ship their cool code.

00:11:16.900 --> 00:11:18.360
We are there to facilitate that.

00:11:18.360 --> 00:11:20.410
We have to make it happen.

00:11:20.410 --> 00:11:23.604
At the same time,
we're also responsible.

00:11:23.604 --> 00:11:24.770
We're the adult supervision.

00:11:24.770 --> 00:11:28.260
There has to be some
sort of quality metric,

00:11:28.260 --> 00:11:31.450
some supervision, some idea
of, are things better or worse

00:11:31.450 --> 00:11:32.620
if I push this button?

00:11:32.620 --> 00:11:34.610
And we are all pushing
that button to say,

00:11:34.610 --> 00:11:37.530
I say this is
going to be better.

00:11:37.530 --> 00:11:40.460
We have key metrics on
mobile that cannot regress.

00:11:40.460 --> 00:11:45.480
TTI-- Time To Interaction,
crash rate, star rating,

00:11:45.480 --> 00:11:47.954
things like that
cannot go backwards.

00:11:47.954 --> 00:11:50.120
And that's important to us,
and as release engineers

00:11:50.120 --> 00:11:53.130
we pay attention to that.

00:11:53.130 --> 00:11:54.430
So mobile is different.

00:11:54.430 --> 00:11:56.680
Let me talk more about some
of the things that bite us

00:11:56.680 --> 00:11:58.510
in mobile that you're
not used to on web.

00:11:58.510 --> 00:12:00.062
There are no daily releases.

00:12:00.062 --> 00:12:02.270
Those of us who, if you want
to release your packaged

00:12:02.270 --> 00:12:04.040
software-- as I said,
I was at VMware,

00:12:04.040 --> 00:12:07.947
and we released stuff on decent
schedule as package software.

00:12:07.947 --> 00:12:09.280
It was up to us when we release.

00:12:09.280 --> 00:12:11.120
Web, we release
continuously, right?

00:12:11.120 --> 00:12:12.270
What do we do on mobile?

00:12:12.270 --> 00:12:12.840
Nothing.

00:12:12.840 --> 00:12:15.590
Pick up any iPhone in
this room, go home screen,

00:12:15.590 --> 00:12:19.770
and look at the home screen
at that stupid app store icon,

00:12:19.770 --> 00:12:22.390
there will be a double digit
red number in that box.

00:12:22.390 --> 00:12:25.600
Why do I, like a monkey, got to
go push that button every day?

00:12:25.600 --> 00:12:28.050
To get my little thing
back, and say, OK, do that,

00:12:28.050 --> 00:12:29.910
do that-- mindlessly
pushing that button

00:12:29.910 --> 00:12:30.785
to tell it to update.

00:12:30.785 --> 00:12:32.451
The worst thing in
the world, especially

00:12:32.451 --> 00:12:34.850
as a release engineer, because
you have no control when

00:12:34.850 --> 00:12:36.250
you're going to
push that button.

00:12:36.250 --> 00:12:38.083
My mother's is probably
a three-digit number

00:12:38.083 --> 00:12:39.780
in that thing.

00:12:39.780 --> 00:12:43.290
So this is a major, major crisis
for you as a release engineer.

00:12:43.290 --> 00:12:47.664
Now, iOS 7 got it right in that
you can turn on auto update.

00:12:47.664 --> 00:12:49.080
They didn't make
it on by default,

00:12:49.080 --> 00:12:51.496
which I think it was a mistake,
but maybe the next release

00:12:51.496 --> 00:12:52.310
will sneak that on.

00:12:52.310 --> 00:12:53.560
We have to get away from this.

00:12:53.560 --> 00:12:55.601
Android has a long way to
go to make this better.

00:12:59.300 --> 00:13:01.560
We release every
four weeks on mobile.

00:13:01.560 --> 00:13:03.690
And that is fast
for a mobile company

00:13:03.690 --> 00:13:05.520
with hundreds and
hundreds of developers

00:13:05.520 --> 00:13:09.120
working on a on
a billion people.

00:13:09.120 --> 00:13:11.410
I'll get into details of
what that flow looks like.

00:13:11.410 --> 00:13:13.900
But we can talk about what
your release schedules look

00:13:13.900 --> 00:13:15.800
like for your mobile
apps, but I think

00:13:15.800 --> 00:13:17.900
four weeks is relatively
quick for mobile.

00:13:20.760 --> 00:13:22.830
The other problem--
when we release software

00:13:22.830 --> 00:13:26.260
as release engineers, do we
build our bundle, our website,

00:13:26.260 --> 00:13:29.720
or web stack, whatever is-- push
a button, and 100% of everybody

00:13:29.720 --> 00:13:30.240
gets that?

00:13:30.240 --> 00:13:33.030
When I push the button
at facebook.com,

00:13:33.030 --> 00:13:37.741
do 1.25 billion people
instantly get my new binary?

00:13:37.741 --> 00:13:38.240
No.

00:13:38.240 --> 00:13:39.270
I do a slow rollout.

00:13:39.270 --> 00:13:42.110
I push the web to 2%.

00:13:42.110 --> 00:13:43.670
I get data, looks good.

00:13:43.670 --> 00:13:45.900
I push out the rest.

00:13:45.900 --> 00:13:46.930
In mobile, what do i d?

00:13:46.930 --> 00:13:47.660
I push a button.

00:13:47.660 --> 00:13:49.964
It goes to the app store,
the black hole that is Apple.

00:13:49.964 --> 00:13:52.130
And out comes, in some
indeterminate amount of time,

00:13:52.130 --> 00:13:53.780
my binary.

00:13:53.780 --> 00:13:56.144
A billion people, or some
percentage of a billion people

00:13:56.144 --> 00:13:58.060
are going to be slam
bam, you get this binary.

00:13:58.060 --> 00:13:59.685
If I have made a
mistake, or if there's

00:13:59.685 --> 00:14:01.660
a fatal, or something
silly an app, it's gone.

00:14:01.660 --> 00:14:03.100
That bullet has left the barrel.

00:14:03.100 --> 00:14:04.674
And I'm screwed.

00:14:04.674 --> 00:14:06.340
There is a little bit
of hope on Android

00:14:06.340 --> 00:14:09.110
in that people who do allow
automatic updating-- and this

00:14:09.110 --> 00:14:11.320
is a huge great
feature for Android--

00:14:11.320 --> 00:14:13.700
is I can say, update to 5%.

00:14:13.700 --> 00:14:15.130
We did a push yesterday.

00:14:15.130 --> 00:14:16.390
We released our Android app.

00:14:16.390 --> 00:14:18.684
And how we did it--
we said go out to 5%.

00:14:18.684 --> 00:14:19.350
And we get data.

00:14:19.350 --> 00:14:21.764
And we say it looks
good, ramp it up.

00:14:21.764 --> 00:14:23.430
But that's only people
who ops in and go

00:14:23.430 --> 00:14:24.900
through the nightmare
of checking off

00:14:24.900 --> 00:14:26.941
all these boxes that are
buried in various places

00:14:26.941 --> 00:14:28.540
in the Android operating system.

00:14:31.090 --> 00:14:33.570
We have to ask permission
to do something.

00:14:33.570 --> 00:14:38.121
So again, if I want a hotfix, I
have a crisis, the first thing

00:14:38.121 --> 00:14:39.620
you want to do as
release engineers,

00:14:39.620 --> 00:14:41.380
you fix that problem, right?

00:14:41.380 --> 00:14:43.020
You don't do that in mobile.

00:14:43.020 --> 00:14:44.120
You make a nice package.

00:14:44.120 --> 00:14:46.203
If it's Android, you have
hope that you can get it

00:14:46.203 --> 00:14:49.699
into the store if the stupid
thing will upload correctly.

00:14:49.699 --> 00:14:50.490
I'll get into that.

00:14:50.490 --> 00:14:52.630
And then if it does get
there, you can get it out.

00:14:52.630 --> 00:14:55.389
But then, even if you
got it out there quickly,

00:14:55.389 --> 00:14:56.430
what are you going to do?

00:14:56.430 --> 00:15:00.070
You just got to wait for people
to click the stupid button.

00:15:00.070 --> 00:15:01.820
And Apple, it's even
worse, because if you

00:15:01.820 --> 00:15:03.840
happen to have your hotfix
in the middle of Worldwide

00:15:03.840 --> 00:15:06.006
Developer Conference, when
the intern takes your app

00:15:06.006 --> 00:15:08.832
and puts on a USB sticks and
takes it somewhere does that.

00:15:08.832 --> 00:15:10.290
If it takes them
threes to do that,

00:15:10.290 --> 00:15:11.831
your hotfix will
sit for three weeks.

00:15:11.831 --> 00:15:13.000
Anyone work at Apple here?

00:15:13.000 --> 00:15:13.500
Good.

00:15:13.500 --> 00:15:14.291
I can keep talking.

00:15:17.900 --> 00:15:21.630
So as release engineers, these
are serious problems for us.

00:15:21.630 --> 00:15:24.090
And you have to keep this
in mind, because now,

00:15:24.090 --> 00:15:26.510
with continuous delivery,
you don't sweat these things.

00:15:26.510 --> 00:15:27.710
But now, it's the opposite.

00:15:27.710 --> 00:15:29.420
Like I said, you threw
that all the way now.

00:15:29.420 --> 00:15:30.980
And now, you have
these problems that

00:15:30.980 --> 00:15:32.380
are a real nightmare for you.

00:15:32.380 --> 00:15:36.970
Some idiot shipped the
wrong icon for the iOS app.

00:15:36.970 --> 00:15:39.642
I did that.

00:15:39.642 --> 00:15:41.850
So there's no worse feeling
knowing you did something

00:15:41.850 --> 00:15:44.580
globally that's in the news,
because of a stupid icon.

00:15:44.580 --> 00:15:46.580
And there's nothing you
can do to get that back.

00:15:46.580 --> 00:15:50.860
So keep that lesson in mind.

00:15:50.860 --> 00:15:53.337
Permanence-- all those
little bullets that you fired

00:15:53.337 --> 00:15:54.170
are still out there.

00:15:54.170 --> 00:15:56.590
This is a little slice of
what people are running.

00:15:56.590 --> 00:15:59.346
This is telemetry
from our Android apps.

00:15:59.346 --> 00:16:00.720
Those are the
versions of Android

00:16:00.720 --> 00:16:02.747
running in production on phones.

00:16:02.747 --> 00:16:04.330
What do I want
everyone to be running?

00:16:04.330 --> 00:16:06.769
I want them up in that
green section there,

00:16:06.769 --> 00:16:07.560
in the upper right.

00:16:07.560 --> 00:16:08.476
What are they running?

00:16:08.476 --> 00:16:11.869
A vertical slice of crap--
of 20 versions of old

00:16:11.869 --> 00:16:13.160
stuff I don't want them to run.

00:16:13.160 --> 00:16:16.550
My mom is somewhere in that
red line at the bottom there.

00:16:16.550 --> 00:16:18.640
And so they complain the
experience is terrible.

00:16:18.640 --> 00:16:20.181
Of course the
experience is terrible.

00:16:20.181 --> 00:16:24.820
You're on a version
literally 16 releases ago.

00:16:24.820 --> 00:16:26.920
So this, again, is going
to be your reality.

00:16:29.910 --> 00:16:33.380
Testing these things-- so I'll
talk a little bit about that

00:16:33.380 --> 00:16:37.170
but especially on
Android, you have this.

00:16:37.170 --> 00:16:40.690
This is a heat map of the
devices sending telemetry

00:16:40.690 --> 00:16:42.370
back for our Android app.

00:16:42.370 --> 00:16:45.560
There is a long tail of
crappy little Android devices

00:16:45.560 --> 00:16:47.460
that will never die.

00:16:47.460 --> 00:16:49.930
Technically, your app needs
to be tested and run on

00:16:49.930 --> 00:16:52.950
all these physical
hardware things.

00:16:52.950 --> 00:16:55.575
And again, out of your
control and something

00:16:55.575 --> 00:16:56.450
you need to consider.

00:16:56.450 --> 00:16:58.270
I'm not even giving
you the vector

00:16:58.270 --> 00:17:00.260
of which version
of Android they're

00:17:00.260 --> 00:17:05.680
running on these phones-- Froyo,
Gingerbread, KitKat, Jelly

00:17:05.680 --> 00:17:09.910
Bean, ICS-- all those, we could
put another matrix in there,

00:17:09.910 --> 00:17:11.349
and your head would explode.

00:17:11.349 --> 00:17:14.980
And you know darn well that
something that works in ICS

00:17:14.980 --> 00:17:16.605
is not going to do
well on Gingerbread

00:17:16.605 --> 00:17:18.910
and a million other
permutations of that.

00:17:18.910 --> 00:17:22.359
So this is something else
you need to worry about.

00:17:22.359 --> 00:17:24.200
It's nicer in the
iOS environment,

00:17:24.200 --> 00:17:27.971
because it is a bit more
unconstrained with devices

00:17:27.971 --> 00:17:28.470
and whatnot.

00:17:28.470 --> 00:17:33.390
But supporting the iPhone 4
is not as easy as you'd think.

00:17:33.390 --> 00:17:36.300
So we do need to worry about
how this works on older

00:17:36.300 --> 00:17:37.915
and different iPad
and iPhone devices.

00:17:40.700 --> 00:17:42.141
So how do we ship this code?

00:17:42.141 --> 00:17:44.390
So what's the process by
which we're getting this out?

00:17:44.390 --> 00:17:48.689
So like I said, the
web is well known here.

00:17:48.689 --> 00:17:50.230
Just one thing on
organization-- this

00:17:50.230 --> 00:17:51.970
is a big thing we
could talk a lot about.

00:17:51.970 --> 00:17:57.460
But the normal thing you do
is you have your normal web

00:17:57.460 --> 00:17:59.950
deployment world and your
development environment.

00:17:59.950 --> 00:18:03.590
And your engineers have
your desktop web guys.

00:18:03.590 --> 00:18:06.410
You got your product experts
for the product itself,

00:18:06.410 --> 00:18:10.096
and then the mobile guys tend
to be platform experts, right?

00:18:10.096 --> 00:18:12.720
So they're shoehorning stuff in
because they know the platform.

00:18:12.720 --> 00:18:14.650
But they don't know
what the messages,

00:18:14.650 --> 00:18:17.220
they don't know photos,
they don't know-- whatever

00:18:17.220 --> 00:18:19.000
functionality
they're working on,

00:18:19.000 --> 00:18:21.711
product feature, they
might not be the expert.

00:18:21.711 --> 00:18:24.210
We started out this way because
it's naturally what happens,

00:18:24.210 --> 00:18:25.070
right?

00:18:25.070 --> 00:18:27.320
What you've got to get
to is obviously this.

00:18:27.320 --> 00:18:31.090
So we have no more mobile group
and web group and all that.

00:18:31.090 --> 00:18:34.030
If you work on the chat group,
you work on the chat group

00:18:34.030 --> 00:18:37.950
for all platforms--
web, mobile, whatever.

00:18:37.950 --> 00:18:41.310
And there was a bit of
a organizational noise

00:18:41.310 --> 00:18:42.847
that went and shuffled around.

00:18:42.847 --> 00:18:45.180
But it was worth it in the
end, because when it settled,

00:18:45.180 --> 00:18:45.960
we had this.

00:18:45.960 --> 00:18:48.450
And we had less cloudiness
on the mobile side.

00:18:48.450 --> 00:18:50.360
And our mobile quality
improved greatly

00:18:50.360 --> 00:18:52.360
because the features were
done by the people who

00:18:52.360 --> 00:18:54.650
know the features, who know
that thing what they're

00:18:54.650 --> 00:18:58.810
trying to do,
regardless of platform.

00:18:58.810 --> 00:19:00.560
When we did that, the
number of developers

00:19:00.560 --> 00:19:03.340
we were supporting
on mobile kicked up.

00:19:03.340 --> 00:19:06.381
And this is an actual
graph of the number

00:19:06.381 --> 00:19:08.130
of unique individuals
checking in the code

00:19:08.130 --> 00:19:09.880
into the mobile code bases.

00:19:09.880 --> 00:19:12.060
And after the re-org, bam.

00:19:12.060 --> 00:19:13.980
So as release
engineers, we have just

00:19:13.980 --> 00:19:18.560
multiplied the volume of
stuff that we're dealing with.

00:19:18.560 --> 00:19:21.080
Just be aware of when
you go this model, that's

00:19:21.080 --> 00:19:23.030
what you have.

00:19:23.030 --> 00:19:26.260
So this fixed-date release
process-- Facebook uses it,

00:19:26.260 --> 00:19:30.250
Chrome, a bunch of other
people use this process.

00:19:30.250 --> 00:19:31.150
It's not ideal.

00:19:31.150 --> 00:19:33.230
You all know trying to
get software engineers

00:19:33.230 --> 00:19:36.120
to hit a date is like
trying to give a cat a bath.

00:19:36.120 --> 00:19:39.810
It's just not-- it's just
fighting the whole time,

00:19:39.810 --> 00:19:42.530
and they never hit the date.

00:19:42.530 --> 00:19:47.165
So while we don't love it, this
really works well for mobile.

00:19:47.165 --> 00:19:50.580
And we're trying to do
things to optimize that.

00:19:50.580 --> 00:19:53.250
When you have a
date-based release system,

00:19:53.250 --> 00:19:54.417
what are you trying to ship?

00:19:54.417 --> 00:19:55.874
You have three
things you're trying

00:19:55.874 --> 00:19:57.760
to worry about when
you're shipping software.

00:19:57.760 --> 00:20:00.477
You have the features,
the quality of the code,

00:20:00.477 --> 00:20:02.310
and the schedule that
you got to worry about

00:20:02.310 --> 00:20:04.010
because it's date-based system.

00:20:04.010 --> 00:20:06.420
When you're under this
kind of constraint,

00:20:06.420 --> 00:20:08.380
you got to pick two of these.

00:20:08.380 --> 00:20:10.130
Which two do you pick?

00:20:10.130 --> 00:20:12.110
You pick quality and schedule.

00:20:12.110 --> 00:20:14.450
Those are the two things,
as release engineers,

00:20:14.450 --> 00:20:16.660
that we focus on.

00:20:16.660 --> 00:20:20.790
Have we regressed anything, and
are we going to hit the date?

00:20:20.790 --> 00:20:24.301
If it's a feature issue,
it's not the priority.

00:20:24.301 --> 00:20:24.800
Why?

00:20:24.800 --> 00:20:26.630
Because we ship on time.

00:20:26.630 --> 00:20:29.440
And again, this is where
we have the most conflict

00:20:29.440 --> 00:20:31.540
with engineering
with developers,

00:20:31.540 --> 00:20:35.960
because they're crappy at
hitting time, hitting dates.

00:20:35.960 --> 00:20:37.700
The good news for
this is you don't

00:20:37.700 --> 00:20:40.120
have to wait if you
do get your stuff in.

00:20:40.120 --> 00:20:42.600
So if you do have a press
release, or a major feature

00:20:42.600 --> 00:20:44.120
announcement, or whatever
is you've got out the door,

00:20:44.120 --> 00:20:46.020
you know it's going
to go out that day,

00:20:46.020 --> 00:20:47.603
because we're going
to kick out anyone

00:20:47.603 --> 00:20:49.112
who doesn't fit the bill.

00:20:49.112 --> 00:20:51.320
So the good news is if you
do have your act together,

00:20:51.320 --> 00:20:54.010
and you do get in, you
will be in good shape.

00:20:54.010 --> 00:20:56.470
Your stuff will go out.

00:20:56.470 --> 00:20:58.450
We're like doctors-- do no harm.

00:20:58.450 --> 00:21:01.214
So if we do something, we
cannot make things worse.

00:21:01.214 --> 00:21:02.630
And that's the sum
of the criteria

00:21:02.630 --> 00:21:05.190
we judge every commit by.

00:21:05.190 --> 00:21:08.250
Are we making things better,
or is this just an iffy thing

00:21:08.250 --> 00:21:11.990
that will possibly
make things worse?

00:21:11.990 --> 00:21:14.350
To engineers, four weeks
seems like a lifetime.

00:21:14.350 --> 00:21:17.340
To PMs, four weeks
seems like a lifetime.

00:21:17.340 --> 00:21:19.690
Four weeks is not that long.

00:21:19.690 --> 00:21:22.230
And you know there's
another one coming.

00:21:22.230 --> 00:21:23.880
Those trains are always leaving.

00:21:23.880 --> 00:21:25.860
Do not freak out when
we throw your thing out.

00:21:25.860 --> 00:21:28.640
I had a team come to me at week
three of a four-week cycle.

00:21:28.640 --> 00:21:29.890
And they're like, this is big.

00:21:29.890 --> 00:21:30.806
We got to get this in.

00:21:30.806 --> 00:21:33.640
It was literally 15 changes
to the main photo flow

00:21:33.640 --> 00:21:34.910
in the mobile app.

00:21:34.910 --> 00:21:36.660
And we're like, no,
get that out of there.

00:21:36.660 --> 00:21:37.870
We're not taking this
at this late date.

00:21:37.870 --> 00:21:38.995
We're almost ready to ship.

00:21:38.995 --> 00:21:39.550
You're nuts.

00:21:39.550 --> 00:21:40.490
No, no it's a high priority.

00:21:40.490 --> 00:21:41.090
Zuck wants it.

00:21:41.090 --> 00:21:41.610
It's got to go in.

00:21:41.610 --> 00:21:42.295
And we escalate.

00:21:42.295 --> 00:21:43.300
Boom, boom, boom, boom, boom.

00:21:43.300 --> 00:21:43.950
All right, let's
get someone more

00:21:43.950 --> 00:21:46.050
important than you and
me to talk about this.

00:21:46.050 --> 00:21:48.430
And I eventually
get the thrown out.

00:21:48.430 --> 00:21:49.500
So we ship.

00:21:49.500 --> 00:21:50.210
We're good.

00:21:50.210 --> 00:21:51.400
The next cycle comes up.

00:21:51.400 --> 00:21:53.110
I go to that team
about two weeks in.

00:21:53.110 --> 00:21:54.480
I'm like, hey, you
guys get that stuff in?

00:21:54.480 --> 00:21:55.290
We're going to check it out.

00:21:55.290 --> 00:21:57.660
They're like, nah, we're going
to wait for the next one.

00:21:57.660 --> 00:21:59.096
So it was like,
you're killing me.

00:21:59.096 --> 00:21:59.970
You wanted to get in.

00:21:59.970 --> 00:22:00.950
It was the most important thing.

00:22:00.950 --> 00:22:03.240
You're going to wait another
cycle because it wasn't ready.

00:22:03.240 --> 00:22:04.656
So as a release
engineer, you have

00:22:04.656 --> 00:22:06.170
to have that sense
of-- these guys

00:22:06.170 --> 00:22:08.610
are not going to land this.

00:22:08.610 --> 00:22:10.972
And you've got to assert
yourself and say, like listen,

00:22:10.972 --> 00:22:11.930
there's the next train.

00:22:11.930 --> 00:22:12.830
You're on it.

00:22:12.830 --> 00:22:13.860
Get off my train now.

00:22:17.160 --> 00:22:18.599
Things that break aren't ready.

00:22:18.599 --> 00:22:19.140
Get them out.

00:22:19.140 --> 00:22:21.940
Don't waste time fixing
forward or taking more patches

00:22:21.940 --> 00:22:22.970
on top of more patches.

00:22:22.970 --> 00:22:24.270
Like, OK, I know I
gave you those three

00:22:24.270 --> 00:22:25.440
diffs and those
three cherry-picks,

00:22:25.440 --> 00:22:26.300
but take these three more.

00:22:26.300 --> 00:22:26.841
It'll fix it.

00:22:26.841 --> 00:22:27.910
I promise.

00:22:27.910 --> 00:22:28.880
Use your judgment.

00:22:28.880 --> 00:22:31.460
But literally, do not
let them walk over

00:22:31.460 --> 00:22:33.200
and keep dumping in
and fixing forward.

00:22:33.200 --> 00:22:34.379
Just like, no you're done.

00:22:34.379 --> 00:22:35.420
You're on the next train.

00:22:35.420 --> 00:22:36.086
Get out of here.

00:22:36.086 --> 00:22:38.380
I got more stuff to worry about.

00:22:38.380 --> 00:22:41.290
You're just annoying me now.

00:22:41.290 --> 00:22:46.722
Put your mean man face on
from slide number two there.

00:22:46.722 --> 00:22:48.430
OK, let's talk a bit
about the mechanics.

00:22:51.110 --> 00:22:53.470
This is our web
development cycle.

00:22:53.470 --> 00:22:57.810
So we have our source
control system.

00:22:57.810 --> 00:23:01.820
We use Mercurial, Subversion,
Git, I don't care what we use.

00:23:01.820 --> 00:23:05.080
I hit them all equally,
so it's not a big deal.

00:23:05.080 --> 00:23:07.790
You've seen developers screw
up source control many ways

00:23:07.790 --> 00:23:09.600
dealing with branches
and complex things.

00:23:09.600 --> 00:23:11.930
I think a couple guys
from VMware are here.

00:23:11.930 --> 00:23:14.850
I set up the system at
VMware back in the day.

00:23:14.850 --> 00:23:18.300
That was a hard problem--
many long-lived branches

00:23:18.300 --> 00:23:20.289
with dot releases
of many products.

00:23:20.289 --> 00:23:22.080
We had a really good
system under Perforce,

00:23:22.080 --> 00:23:23.250
that when you check
in, it asked you

00:23:23.250 --> 00:23:24.420
where you wanted
your stuff delivered.

00:23:24.420 --> 00:23:26.240
It would deliver it,
check in, build it,

00:23:26.240 --> 00:23:28.460
let you know it went
in, blah blah blah.

00:23:28.460 --> 00:23:30.830
It could not be
simpler at Facebook.

00:23:30.830 --> 00:23:33.170
No matter which crappy source
control system you use,

00:23:33.170 --> 00:23:35.150
you check in the
master, you're done.

00:23:35.150 --> 00:23:37.360
OK, that's all they have
to do as developers--

00:23:37.360 --> 00:23:41.020
get fricking code into master.

00:23:41.020 --> 00:23:43.830
What we do in web is after
a week of development,

00:23:43.830 --> 00:23:48.160
generally it's
Sunday at 6:00 pm,

00:23:48.160 --> 00:23:51.850
we cut a release branch,
a simple release branch.

00:23:51.850 --> 00:23:54.280
From Sunday to Tuesday,
during that blue period

00:23:54.280 --> 00:23:56.224
there in that blue
box, we stabilize.

00:23:56.224 --> 00:23:57.140
We test it internally.

00:23:57.140 --> 00:23:58.190
We make sure it's good.

00:23:58.190 --> 00:24:01.300
If everything's good, Tuesday at
around 4:00 pm, that goes out.

00:24:01.300 --> 00:24:03.860
That is between 4,000
to 6,000 changes

00:24:03.860 --> 00:24:07.460
that went into trunk that week.

00:24:07.460 --> 00:24:09.940
For the rest of the week,
that's my twice daily push,

00:24:09.940 --> 00:24:11.890
during that green box there.

00:24:11.890 --> 00:24:15.770
And that's where I take my
30 to 300 cherry-picks a day.

00:24:15.770 --> 00:24:18.140
That flow has been
the way at Facebook

00:24:18.140 --> 00:24:20.300
for six years-- has not changed.

00:24:23.680 --> 00:24:27.799
The big win for this is that we
ship twice a day, we're fast.

00:24:27.799 --> 00:24:30.090
That little blue box in there
is like internally, we're

00:24:30.090 --> 00:24:32.544
dogfooding before
anyone sees it.

00:24:32.544 --> 00:24:34.960
Again, we're not waiting for
anyone, because at that rate,

00:24:34.960 --> 00:24:36.690
it's like, if you don't hit
today, there's tomorrow.

00:24:36.690 --> 00:24:37.910
It's like hours away.

00:24:37.910 --> 00:24:40.499
It's not the end of the
world if you don't make it.

00:24:40.499 --> 00:24:42.540
The engineers are there
supporting their changes.

00:24:42.540 --> 00:24:43.370
It's true dev/ops.

00:24:43.370 --> 00:24:46.332
Your change doesn't go
out unless you are there.

00:24:46.332 --> 00:24:48.790
I won't push your web change
unless you show up and show me

00:24:48.790 --> 00:24:50.410
you're still alive.

00:24:50.410 --> 00:24:51.435
And there's clear rules.

00:24:51.435 --> 00:24:52.060
We all know it.

00:24:52.060 --> 00:24:54.310
There's an on-boarding where
I brainwash all the new hires.

00:24:54.310 --> 00:24:55.434
Like, this is how we do it.

00:24:55.434 --> 00:24:56.530
This is what you're doing.

00:24:56.530 --> 00:24:59.350
We're all on the same page.

00:24:59.350 --> 00:25:01.920
So let's take the desktop web.

00:25:01.920 --> 00:25:05.260
Let's overlay now
what we do on mobile.

00:25:05.260 --> 00:25:07.650
Not very different, the
time scale's changed.

00:25:07.650 --> 00:25:10.025
So now we have four weeks
of development in master.

00:25:10.025 --> 00:25:13.330
And at the end of four weeks, we
cut our simple release branch.

00:25:13.330 --> 00:25:16.530
And that release branch
lives for 3 and 1/2

00:25:16.530 --> 00:25:20.030
weeks under our eyes.

00:25:20.030 --> 00:25:23.330
And that's where we take more
cherry-picks, probably between,

00:25:23.330 --> 00:25:26.020
I want to say 120,
150 more cherry-picks

00:25:26.020 --> 00:25:29.390
will come in to stabilized
after three and a half weeks.

00:25:29.390 --> 00:25:31.620
And then that green
period of soaking-- like,

00:25:31.620 --> 00:25:33.910
don't change anything for
three days internally.

00:25:33.910 --> 00:25:35.240
Just dogfood it for three days.

00:25:35.240 --> 00:25:36.750
Let it accumulate state.

00:25:36.750 --> 00:25:39.160
See what breaks, and
see if we're good.

00:25:39.160 --> 00:25:41.790
At that point, that
green line is our fourth.

00:25:41.790 --> 00:25:43.830
The day of our fourth
week-- exactly four weeks

00:25:43.830 --> 00:25:48.105
from that first red line,
it goes out the door.

00:25:48.105 --> 00:25:49.980
What I want to keep at
Facebook, is no matter

00:25:49.980 --> 00:25:52.650
what group you're in,
front end, back end,

00:25:52.650 --> 00:25:55.700
mobile-- this little
picture is your life.

00:25:55.700 --> 00:25:58.000
And for the most part,
this is true at Facebook.

00:25:58.000 --> 00:25:59.590
No matter what
group you're with,

00:25:59.590 --> 00:26:03.952
you will release with a simple
branch cherry-pick system.

00:26:03.952 --> 00:26:06.160
The time scale will change,
and some of the mechanics

00:26:06.160 --> 00:26:07.030
will change.

00:26:07.030 --> 00:26:08.910
But I'm a big advocate for this.

00:26:08.910 --> 00:26:11.160
We can't do true continuous
where we can just

00:26:11.160 --> 00:26:13.740
deploy from trunk, but I
like this little buffer zone

00:26:13.740 --> 00:26:17.260
of having the cherry-pick
system with a release branch.

00:26:17.260 --> 00:26:19.802
It's worked very well.

00:26:19.802 --> 00:26:21.010
So we haven't changed things.

00:26:21.010 --> 00:26:22.970
Like I said, if you
changed from web to mobile,

00:26:22.970 --> 00:26:25.330
you have the same thing,
except now some of the times

00:26:25.330 --> 00:26:27.040
have changed.

00:26:27.040 --> 00:26:28.670
Otherwise, all the
same things you've

00:26:28.670 --> 00:26:31.330
learned, all the operational
awareness you've built up

00:26:31.330 --> 00:26:35.130
as a developer is
still with you.

00:26:35.130 --> 00:26:37.070
On Android, we have
one special tool.

00:26:37.070 --> 00:26:41.380
And God bless Google and
Android for doing this--

00:26:41.380 --> 00:26:44.120
is the alpha and beta program.

00:26:44.120 --> 00:26:46.910
So I want more eyes on my stuff.

00:26:46.910 --> 00:26:48.410
And I do this with facebook.com.

00:26:48.410 --> 00:26:51.190
The website, like I said,
I can leak out stuff

00:26:51.190 --> 00:26:53.700
to 2% of the user
base at any time

00:26:53.700 --> 00:26:56.300
to get feedback
of what I'm doing.

00:26:56.300 --> 00:26:59.940
But I have the beta
program on Android.

00:26:59.940 --> 00:27:02.930
My beta program is
a few million people

00:27:02.930 --> 00:27:04.920
who volunteered to get the beta.

00:27:04.920 --> 00:27:06.780
The beta comes
from the blue line,

00:27:06.780 --> 00:27:08.930
which is the release branch.

00:27:08.930 --> 00:27:13.090
I have more beta customers
than most people have users.

00:27:13.090 --> 00:27:15.850
Every Monday,
Wednesday, Friday, I

00:27:15.850 --> 00:27:19.359
ship whatever's in the
branch to these people.

00:27:19.359 --> 00:27:21.150
Obviously, auto update's
an important thing

00:27:21.150 --> 00:27:21.630
for these people.

00:27:21.630 --> 00:27:22.710
They all have it turned on.

00:27:22.710 --> 00:27:23.440
So bam, bam, bam.

00:27:23.440 --> 00:27:23.940
I get that.

00:27:23.940 --> 00:27:25.600
And I get telemetry
back immediately.

00:27:25.600 --> 00:27:27.701
So I can now
analyze what they're

00:27:27.701 --> 00:27:29.950
seeing, what crash rates,
what the logging looks like,

00:27:29.950 --> 00:27:33.400
what bugs they're reporting--
all this good stuff.

00:27:33.400 --> 00:27:35.440
We were really happy
with the beta program,

00:27:35.440 --> 00:27:39.380
and then Google announced
the alpha program.

00:27:39.380 --> 00:27:43.430
Wrap your head around
this-- I am shipping trunk

00:27:43.430 --> 00:27:48.664
to a few hundred thousand
people every night.

00:27:48.664 --> 00:27:49.580
That should scare you.

00:27:52.110 --> 00:27:55.130
So the Android app-- if
you're in the alpha program,

00:27:55.130 --> 00:27:58.770
you will get pushed every
night whatever's in trunk.

00:27:58.770 --> 00:28:03.240
There's some certain things we
do to ensure that nothing leaks

00:28:03.240 --> 00:28:04.590
and that we're in good shape.

00:28:04.590 --> 00:28:06.400
And I'll talk about
some of safeguards.

00:28:06.400 --> 00:28:08.960
But that's really cool.

00:28:12.157 --> 00:28:13.990
All right, let's get
in to the developments.

00:28:13.990 --> 00:28:15.360
What are we doing in
that 3 and 1/2 weeks?

00:28:15.360 --> 00:28:17.510
Because we take that
full time to figure out

00:28:17.510 --> 00:28:20.135
if this thing's going to ship or
not, or if we're in good shape

00:28:20.135 --> 00:28:21.380
or not.

00:28:21.380 --> 00:28:25.350
So let's talk about some
of the details there.

00:28:25.350 --> 00:28:30.670
These are more the philosophy
in that release branch.

00:28:30.670 --> 00:28:32.850
How do we keep that release
branch in good shape?

00:28:32.850 --> 00:28:35.235
The biggest thing, like
I said, is no features.

00:28:35.235 --> 00:28:38.614
If you take a feature, you're
basically resetting the clock.

00:28:38.614 --> 00:28:39.780
We've done all this testing.

00:28:39.780 --> 00:28:41.120
We've had all the dogfooding.

00:28:41.120 --> 00:28:44.310
Everything that comes in is
resetting in destabilizing

00:28:44.310 --> 00:28:45.200
what we've done.

00:28:45.200 --> 00:28:47.150
And honestly, if it
didn't make that cut,

00:28:47.150 --> 00:28:49.920
we're assuming it wasn't
ready when the cut came

00:28:49.920 --> 00:28:51.725
and you're not going
to cram it in later.

00:28:54.115 --> 00:28:55.740
You can't just worry
about native code.

00:28:55.740 --> 00:28:57.720
And it depends on your
app, but if any of you

00:28:57.720 --> 00:29:00.011
have any kind of at that does
anything of significance,

00:29:00.011 --> 00:29:02.960
you're going to
have these issues.

00:29:02.960 --> 00:29:05.230
We are very picky about design.

00:29:05.230 --> 00:29:07.540
And there's a design team
that in mobile, you just

00:29:07.540 --> 00:29:10.110
can't throw in an
element, or something,

00:29:10.110 --> 00:29:14.150
or change the UI without a
pretty heavyweight analysis

00:29:14.150 --> 00:29:16.840
of is this the way
that we want to go.

00:29:16.840 --> 00:29:17.840
Did we get logging data?

00:29:17.840 --> 00:29:19.210
Is your logging in there?

00:29:19.210 --> 00:29:20.680
Are we getting data
from dogfooding

00:29:20.680 --> 00:29:23.500
that your thing is working
and turned on and good?

00:29:23.500 --> 00:29:25.800
Are there server-side
endpoints, or updates

00:29:25.800 --> 00:29:27.300
to the website that
need to roll out

00:29:27.300 --> 00:29:29.410
before your thing
can be turned on?

00:29:29.410 --> 00:29:31.100
So make sure we coordinate that.

00:29:31.100 --> 00:29:32.580
The worst thing in the world
is pushing something out,

00:29:32.580 --> 00:29:34.955
where it starts hammering the
backend because they didn't

00:29:34.955 --> 00:29:36.994
realize the use was
going to be like,

00:29:36.994 --> 00:29:39.410
10x what they thought it was,
or the endpoint's not there,

00:29:39.410 --> 00:29:43.420
or it's not at the right level
to make the right response.

00:29:43.420 --> 00:29:46.880
We have big privacy and
legal issues, as we all do.

00:29:46.880 --> 00:29:49.800
There is a team for a release
that looks at what's going in,

00:29:49.800 --> 00:29:51.410
and says yes this is good.

00:29:51.410 --> 00:29:53.900
If you rush it, or you
take in late changes,

00:29:53.900 --> 00:29:55.490
you put that risk
because they could

00:29:55.490 --> 00:29:58.110
derail what they looked
at when they first said,

00:29:58.110 --> 00:30:01.840
OK, this is what's going
on for this release.

00:30:01.840 --> 00:30:06.430
And yeah, basically if you
are not testing in master,

00:30:06.430 --> 00:30:09.586
we want that-- we want it
vetted in master before it

00:30:09.586 --> 00:30:10.710
gets in the release branch.

00:30:10.710 --> 00:30:12.320
So if you're putting it
immediately into the release

00:30:12.320 --> 00:30:13.360
branch as soon as
you check it in,

00:30:13.360 --> 00:30:15.320
we don't have that
window to do our test

00:30:15.320 --> 00:30:17.620
to make sure that-- we
still run the tests,

00:30:17.620 --> 00:30:19.840
but I want it going
through master

00:30:19.840 --> 00:30:23.480
to release for more sanity.

00:30:23.480 --> 00:30:25.940
You are guilty until
proven innocent

00:30:25.940 --> 00:30:28.580
is a pretty much our motto here.

00:30:28.580 --> 00:30:30.350
So every time you do
ask for something,

00:30:30.350 --> 00:30:31.510
we need to approve it.

00:30:31.510 --> 00:30:33.460
And we use a cherry-pick
system, again,

00:30:33.460 --> 00:30:35.420
this is across all of Facebook.

00:30:35.420 --> 00:30:37.080
It's called Relief.

00:30:37.080 --> 00:30:40.850
It's part of Fabricator,
which is that our whole code

00:30:40.850 --> 00:30:45.120
review, our whole stack is
open sourced under the guise

00:30:45.120 --> 00:30:47.390
of Felicity, which
is a company that

00:30:47.390 --> 00:30:51.100
has all our internal tools.

00:30:51.100 --> 00:30:53.352
They've open sourced it
and they maintain it.

00:30:53.352 --> 00:30:55.310
Within Frabricator is
this thing called Relief.

00:30:55.310 --> 00:30:57.010
So if your diff is
accepted-- and this

00:30:57.010 --> 00:31:00.430
is a diff that was
accepted and is in master--

00:31:00.430 --> 00:31:02.650
that link shows up, and
it ways Relief Request.

00:31:02.650 --> 00:31:04.650
And what you're saying
is I want this to go out.

00:31:04.650 --> 00:31:07.040
I got it into master, but I
still want it in the release.

00:31:07.040 --> 00:31:08.414
And you're in week
two, or three,

00:31:08.414 --> 00:31:09.870
or whatever of the process.

00:31:09.870 --> 00:31:13.840
You click that
button, and out comes

00:31:13.840 --> 00:31:18.080
this page, where you tell
me why we taking this.

00:31:18.080 --> 00:31:19.580
And on the right
there, you're going

00:31:19.580 --> 00:31:21.413
to say, yeah, we're
taking this because this

00:31:21.413 --> 00:31:23.960
is a really bad bug with
display model blah blah, blah.

00:31:23.960 --> 00:31:24.462
Boom.

00:31:24.462 --> 00:31:26.420
My release engineers are
going to look at that,

00:31:26.420 --> 00:31:27.794
and say, yeah this
is legitimate,

00:31:27.794 --> 00:31:29.530
or this smells fishy.

00:31:29.530 --> 00:31:33.960
The other thing we have is over
here, we have these two lines.

00:31:33.960 --> 00:31:35.860
The top line says Size.

00:31:35.860 --> 00:31:37.310
It's the size of the diff.

00:31:37.310 --> 00:31:39.976
As that diff a big
diff-- number of changes,

00:31:39.976 --> 00:31:41.600
number one lines
added, deleted, moved,

00:31:41.600 --> 00:31:43.850
whatever-- that bar will grow.

00:31:43.850 --> 00:31:46.050
The bottom line is Churn.

00:31:46.050 --> 00:31:47.844
And that's the
amount of discussion

00:31:47.844 --> 00:31:48.760
there was in the diff.

00:31:48.760 --> 00:31:49.559
How's the diff go?

00:31:49.559 --> 00:31:51.350
You send out your diff,
hey here's my diff.

00:31:51.350 --> 00:31:52.800
And you go, you diff
sucks and so do you.

00:31:52.800 --> 00:31:54.370
They're like, no, you suck
and so does your mom--

00:31:54.370 --> 00:31:55.400
and back and forth
and back and forth.

00:31:55.400 --> 00:31:57.170
Maybe those are just my diffs.

00:31:57.170 --> 00:31:58.970
So that will get
bigger, and bigger,

00:31:58.970 --> 00:32:02.592
and bigger as there's
more rejections, changes,

00:32:02.592 --> 00:32:03.760
to that diff.

00:32:03.760 --> 00:32:06.650
So If i see big bars there, I
know there's some contention,

00:32:06.650 --> 00:32:08.320
and I want to take a look.

00:32:08.320 --> 00:32:11.280
The other thing which I've
blacked out is the Karma.

00:32:11.280 --> 00:32:13.940
And right under there are stars.

00:32:13.940 --> 00:32:16.400
And all engineers start
out with four stars.

00:32:16.400 --> 00:32:18.540
You can only see your own Karma.

00:32:18.540 --> 00:32:22.532
But if there is a bad thing
that happens, I push this.

00:32:22.532 --> 00:32:23.990
And I'm the only
person on Facebook

00:32:23.990 --> 00:32:27.120
who has this symbol, which
is the Dislike button.

00:32:27.120 --> 00:32:29.120
So if I push this, it
means we got a problem.

00:32:29.120 --> 00:32:30.900
And a box opens
up, I type in what

00:32:30.900 --> 00:32:32.850
happened, how we can
improve ourselves.

00:32:32.850 --> 00:32:34.160
I click Submit.

00:32:34.160 --> 00:32:34.940
It goes to me.

00:32:34.940 --> 00:32:35.750
It goes to you.

00:32:35.750 --> 00:32:36.749
It goes to your manager.

00:32:36.749 --> 00:32:39.902
And it goes to our work.com
performance review tool.

00:32:39.902 --> 00:32:41.360
So it's very much
a public shaming,

00:32:41.360 --> 00:32:42.510
not a private-- I'm sorry.

00:32:42.510 --> 00:32:45.274
It's very much a private
shaming, not a public shaming.

00:32:45.274 --> 00:32:46.940
You really want to
avoid public shaming.

00:32:49.885 --> 00:32:50.760
I do this in my head.

00:32:50.760 --> 00:32:52.340
You cannot stop me
from doing this.

00:32:52.340 --> 00:32:52.920
OK.

00:32:52.920 --> 00:32:54.720
When I was at Google, I
could walk down the hall

00:32:54.720 --> 00:32:57.219
and say like, two stars, three
stars, four stars, two stars,

00:32:57.219 --> 00:32:58.511
one star, zero star.

00:32:58.511 --> 00:32:59.010
Right.

00:32:59.010 --> 00:32:59.593
Where's Boris?

00:32:59.593 --> 00:33:01.470
There.

00:33:01.470 --> 00:33:03.761
So you know you do this
as release engineers.

00:33:03.761 --> 00:33:04.510
And it's your job.

00:33:04.510 --> 00:33:05.810
You've got to manage risk.

00:33:05.810 --> 00:33:08.200
And when you see a
room full of engineers,

00:33:08.200 --> 00:33:10.230
that's a room full of risk.

00:33:10.230 --> 00:33:12.490
So but when it got to
300, 600, 800 engineers,

00:33:12.490 --> 00:33:13.820
I couldn't do it anymore.

00:33:13.820 --> 00:33:15.000
So we made this system.

00:33:15.000 --> 00:33:16.930
Now, this is not like
some punishment system.

00:33:16.930 --> 00:33:19.180
Nobody's ever gotten fired
because they got two stars.

00:33:19.180 --> 00:33:20.750
But it will be really
valuable to you

00:33:20.750 --> 00:33:22.286
as you get to
people on your team,

00:33:22.286 --> 00:33:24.160
and as you start dealing
with different teams

00:33:24.160 --> 00:33:25.619
to remember-- you
look at this diff

00:33:25.619 --> 00:33:27.201
like why does that
guy have two stars?

00:33:27.201 --> 00:33:28.000
Oh, yeah.

00:33:28.000 --> 00:33:29.224
I remember now.

00:33:29.224 --> 00:33:31.390
So you're going to take a
little bit more extra care

00:33:31.390 --> 00:33:33.005
and see what's going on there.

00:33:33.005 --> 00:33:34.130
And that is part of Relief.

00:33:34.130 --> 00:33:38.220
You can download this
and use that as you wish.

00:33:40.970 --> 00:33:43.070
Again, we are risk averse
on the release branch.

00:33:43.070 --> 00:33:47.240
We need a reason to approve,
not a reason to reject.

00:33:47.240 --> 00:33:48.940
And then, like I
said, the main reasons

00:33:48.940 --> 00:33:52.490
here are there's pluses and
minuses for every change.

00:33:52.490 --> 00:33:55.530
You have to let your release
engineers have this flexibility

00:33:55.530 --> 00:33:59.280
to be able to make a judgmental
call, very subjective,

00:33:59.280 --> 00:34:01.752
to say like, this feels right,
this does not feel right.

00:34:01.752 --> 00:34:03.960
And there can be some criteria
that you can spell out

00:34:03.960 --> 00:34:06.450
for it-- help them with
that, or help publicize it.

00:34:06.450 --> 00:34:08.699
But we've been doing this
as release engineers for six

00:34:08.699 --> 00:34:11.330
years at Facebook, and
the push back is very low.

00:34:11.330 --> 00:34:13.380
We are very well-respected
as release engineers.

00:34:13.380 --> 00:34:14.880
And make sure, in
your organization,

00:34:14.880 --> 00:34:17.929
that you are respected for
what you do-- for your judgment

00:34:17.929 --> 00:34:19.870
and for your skill set.

00:34:19.870 --> 00:34:22.780
And given that, when release
engineering says it's not good,

00:34:22.780 --> 00:34:24.340
it doesn't go.

00:34:24.340 --> 00:34:28.429
So make sure your management,
your organization, your culture

00:34:28.429 --> 00:34:32.100
at your company
backs you on this.

00:34:32.100 --> 00:34:34.570
Finally, there's a great
quote in the movie "Ronan."

00:34:34.570 --> 00:34:36.690
Robert De Niro says,
"When there is any doubt,

00:34:36.690 --> 00:34:38.219
there is no doubt."

00:34:38.219 --> 00:34:40.300
And that's our motto.

00:34:40.300 --> 00:34:43.320
If we get queasy on anything
in that really branch,

00:34:43.320 --> 00:34:45.230
and we don't feel
right in mobile land,

00:34:45.230 --> 00:34:49.064
it goes out-- an
important thing.

00:34:49.064 --> 00:34:50.730
Let's talk a little
bit about the tools.

00:34:50.730 --> 00:34:51.604
Let me check my time.

00:34:54.949 --> 00:34:59.734
So the tools-- I need to
get master in better shape,

00:34:59.734 --> 00:35:01.150
especially because
on Android, I'm

00:35:01.150 --> 00:35:02.900
shipping the thing every night.

00:35:02.900 --> 00:35:05.650
So I need some tools that when
the developers land their code

00:35:05.650 --> 00:35:08.470
into trunk, they have
confidence that they're not

00:35:08.470 --> 00:35:09.742
going to burn themselves.

00:35:09.742 --> 00:35:11.200
Because they're
very attentive now.

00:35:11.200 --> 00:35:14.600
I think the developers have a
very good operation awareness.

00:35:14.600 --> 00:35:15.814
They want to do right.

00:35:15.814 --> 00:35:16.730
They want to be happy.

00:35:16.730 --> 00:35:17.880
They want to land that code.

00:35:17.880 --> 00:35:19.255
They don't want
to cause trouble.

00:35:19.255 --> 00:35:21.010
They don't want to
lose that precious star

00:35:21.010 --> 00:35:23.130
and their Push Karma, so
they will pay attention.

00:35:23.130 --> 00:35:27.124
Give them the tools
to do it for them.

00:35:27.124 --> 00:35:28.790
This is our continuous
integration stack

00:35:28.790 --> 00:35:31.300
time on mobile.

00:35:31.300 --> 00:35:32.130
We use Buildbot.

00:35:32.130 --> 00:35:33.380
You can use whatever you want.

00:35:33.380 --> 00:35:35.460
Buildbot works for us.

00:35:35.460 --> 00:35:36.860
But basically,
you have the build

00:35:36.860 --> 00:35:38.930
part, which is we
build everything.

00:35:38.930 --> 00:35:41.490
When you check in the mobile--
what is Facebook mobile?

00:35:41.490 --> 00:35:43.060
It's not just one app, right?

00:35:43.060 --> 00:35:46.100
It's the native app for the
platform, so iOS or Android.

00:35:46.100 --> 00:35:46.850
It's messenger.

00:35:46.850 --> 00:35:48.190
It's pages manager.

00:35:48.190 --> 00:35:49.147
It's Instagram.

00:35:49.147 --> 00:35:51.230
It's a bunch of other stuff
that's going to launch

00:35:51.230 --> 00:35:52.690
or has launched.

00:35:52.690 --> 00:35:53.780
It's new projects.

00:35:53.780 --> 00:35:57.000
There's a long list of those
little boxes of squares on top.

00:35:57.000 --> 00:36:01.210
For every commit, you might
break something across the way.

00:36:01.210 --> 00:36:02.910
We use a monolithic
code base, much

00:36:02.910 --> 00:36:04.950
like Google and other places.

00:36:04.950 --> 00:36:07.129
So you really need to
check all the builds

00:36:07.129 --> 00:36:08.170
when you check something.

00:36:08.170 --> 00:36:11.200
I just fixed something
in Facebook for Android,

00:36:11.200 --> 00:36:12.650
but you just broke messenger.

00:36:12.650 --> 00:36:14.990
So we do all those builds.

00:36:14.990 --> 00:36:16.880
On the way in,
there's a whole series

00:36:16.880 --> 00:36:19.285
of lint/static analysis--
things that check

00:36:19.285 --> 00:36:21.750
are our policies being followed?

00:36:21.750 --> 00:36:23.310
The easiest one
is the regex one.

00:36:23.310 --> 00:36:26.270
Anyone can write a regex to
say if you should do this,

00:36:26.270 --> 00:36:29.140
or you shouldn't do that, the
regex will catch it, throw it

00:36:29.140 --> 00:36:32.670
as a warning, throw it as a
fatal so they can't check in.

00:36:32.670 --> 00:36:33.460
That's simple.

00:36:33.460 --> 00:36:36.270
And anyone can contribute
to it with a simple regex.

00:36:36.270 --> 00:36:38.300
For more serious
stuff, we use Clang,

00:36:38.300 --> 00:36:40.760
which does the static
analysis and checks

00:36:40.760 --> 00:36:43.040
memory, or dead code,
or things like that.

00:36:43.040 --> 00:36:45.450
Android has some built in
linting that we use on that.

00:36:45.450 --> 00:36:47.640
This is both platforms,
iOS and Android together,

00:36:47.640 --> 00:36:48.642
so some go with some.

00:36:48.642 --> 00:36:49.600
Some go with the other.

00:36:49.600 --> 00:36:51.260
But you get the idea, right?

00:36:51.260 --> 00:36:54.600
So you have that layer
protecting your master code

00:36:54.600 --> 00:36:55.100
base.

00:36:55.100 --> 00:36:59.110
Nothing gets in unless it gets
through that red section there.

00:36:59.110 --> 00:37:03.480
And finally, the tests--
for each platform, there

00:37:03.480 --> 00:37:05.310
are various test
systems that go in.

00:37:05.310 --> 00:37:10.590
We also do WebDriver
from our UK offices

00:37:10.590 --> 00:37:12.900
that does also end-to-end
integration style testing

00:37:12.900 --> 00:37:14.230
as well.

00:37:14.230 --> 00:37:18.270
So that stack happens
all the time-- all of it.

00:37:18.270 --> 00:37:19.500
How often?

00:37:19.500 --> 00:37:20.750
So this often.

00:37:20.750 --> 00:37:24.300
So during each
step of the process

00:37:24.300 --> 00:37:26.530
that whole stack is
run-- every build,

00:37:26.530 --> 00:37:29.439
every test, everything done.

00:37:29.439 --> 00:37:30.980
If you're at Google
or Facebook, this

00:37:30.980 --> 00:37:32.870
does not impress you,
because basically, I

00:37:32.870 --> 00:37:35.600
say this kind of boldly.

00:37:35.600 --> 00:37:39.830
But there are no issues with
compute power or storage.

00:37:39.830 --> 00:37:44.550
Those are infinite
as far as we care.

00:37:44.550 --> 00:37:45.722
You need to get to that.

00:37:45.722 --> 00:37:47.930
Machine resources should
not be the thing keeping you

00:37:47.930 --> 00:37:51.210
from running this full stack
while the person's developing

00:37:51.210 --> 00:37:53.600
the diff, when they create
the diff to send it out

00:37:53.600 --> 00:37:57.060
to the other developers, when
they update it after getting

00:37:57.060 --> 00:38:00.330
feedback, when they land it in
the landing queue to check it

00:38:00.330 --> 00:38:03.320
out before it gets delivered,
and when it gets committed.

00:38:03.320 --> 00:38:06.562
Each step is going to
run through that stack.

00:38:06.562 --> 00:38:08.020
And machine resources
should not be

00:38:08.020 --> 00:38:10.710
the reason you can't do this.

00:38:10.710 --> 00:38:12.710
This is the number of
builds were doing per day.

00:38:12.710 --> 00:38:15.860
It averages around
20,000 to 30,000

00:38:15.860 --> 00:38:21.010
builds a day to give you the
scale for our couple dozen

00:38:21.010 --> 00:38:21.790
mobile apps.

00:38:24.370 --> 00:38:26.120
So this Async, when
it's built and tested,

00:38:26.120 --> 00:38:27.390
what's it look like?

00:38:27.390 --> 00:38:29.767
So when you do commit,
the reviewer-- actually,

00:38:29.767 --> 00:38:30.600
this isn't a commit.

00:38:30.600 --> 00:38:32.340
This is for a diff.

00:38:32.340 --> 00:38:36.245
The reviewer will see did
the stuff pass all the tests?

00:38:36.245 --> 00:38:37.750
Did it pass all the builds?

00:38:37.750 --> 00:38:38.930
That's in the diff itself.

00:38:38.930 --> 00:38:42.000
So the diff tool itself will
expose any dirty laundry

00:38:42.000 --> 00:38:43.630
that you have that
didn't pass test,

00:38:43.630 --> 00:38:46.130
didn't pass builds-- will be
there for the viewer to see it.

00:38:46.130 --> 00:38:48.730
They see that box is red, it's
an immediate go back, hey,

00:38:48.730 --> 00:38:53.230
go check that out
before I check it out.

00:38:53.230 --> 00:38:56.340
Shrubbery is the thing we put
on top of our build system.

00:38:56.340 --> 00:38:59.010
And this is basically showing
us across the whole matrix

00:38:59.010 --> 00:39:01.970
of builds that are running
where did they fail.

00:39:01.970 --> 00:39:04.890
So if you go there and
look, you can see exactly.

00:39:04.890 --> 00:39:06.970
Like, down there, that
red bar says, oh yeah,

00:39:06.970 --> 00:39:08.380
a test failed here.

00:39:08.380 --> 00:39:10.370
You can click through
and land at the test

00:39:10.370 --> 00:39:13.170
console to understand like,
OK, where did this go wrong?

00:39:13.170 --> 00:39:15.960
And the reviewer
will do that as well.

00:39:15.960 --> 00:39:18.040
Dogfooding-- we all know
the value of dogfooding.

00:39:18.040 --> 00:39:21.050
But dogfooding on mobile
is a different problem.

00:39:21.050 --> 00:39:23.730
Within Facebook, I force- if
you're on the Facebook network,

00:39:23.730 --> 00:39:26.650
or within the VPN, when
you go to facebook.com,

00:39:26.650 --> 00:39:28.430
you're never going
to facebook.com.

00:39:28.430 --> 00:39:30.940
We always redirect
you to what we're

00:39:30.940 --> 00:39:32.540
going to ship-- our dogfood.

00:39:32.540 --> 00:39:33.687
How do I do that on mobile?

00:39:33.687 --> 00:39:36.020
Well, I have a mobile builds
page that people will go to

00:39:36.020 --> 00:39:39.090
on their phone, and they can
download any version of master,

00:39:39.090 --> 00:39:41.300
or the release candidate,
or a previous release

00:39:41.300 --> 00:39:42.940
of the various products.

00:39:42.940 --> 00:39:45.560
And this page
scrolls down a bunch.

00:39:45.560 --> 00:39:47.357
There's one other thing though.

00:39:47.357 --> 00:39:48.440
People are lazy on mobile.

00:39:48.440 --> 00:39:49.690
They actually use
their mobile phones.

00:39:49.690 --> 00:39:50.981
They don't want to be bothered.

00:39:50.981 --> 00:39:53.054
On Android, I force
them into the dogfood.

00:39:53.054 --> 00:39:54.470
If you're a Facebook
employee, you

00:39:54.470 --> 00:39:57.550
will now download the Google
Play version of our app.

00:39:57.550 --> 00:40:03.430
It will always kick back
and download and use

00:40:03.430 --> 00:40:04.770
our dogfood version.

00:40:04.770 --> 00:40:06.890
On iOS, it's a harder
problem because we

00:40:06.890 --> 00:40:09.100
don't have the guts to do that.

00:40:09.100 --> 00:40:12.927
We wrote a wrapper around
the app for internal use.

00:40:12.927 --> 00:40:14.760
So the problem with iOS
is you'd fire it up.

00:40:14.760 --> 00:40:15.950
And you're in the
middle of the park,

00:40:15.950 --> 00:40:17.670
or Burger King, you want to
check in at Facebook-- hey,

00:40:17.670 --> 00:40:18.650
I'm having a burger.

00:40:18.650 --> 00:40:19.260
Boom.

00:40:19.260 --> 00:40:21.140
And it's going to come back and
say, hey, you're on the wrong

00:40:21.140 --> 00:40:21.450
build.

00:40:21.450 --> 00:40:22.140
Upgrade now.

00:40:22.140 --> 00:40:23.560
You're like, I'm in the
middle of Wisconsin.

00:40:23.560 --> 00:40:24.420
I don't have connectivity.

00:40:24.420 --> 00:40:25.539
I don't want to do it now.

00:40:25.539 --> 00:40:26.330
So it's a big pain.

00:40:26.330 --> 00:40:30.079
What we did is wrote a wrapper
that in the background,

00:40:30.079 --> 00:40:31.620
it knows when the
new package is out.

00:40:31.620 --> 00:40:34.597
It downloads it, so when
you fire up the app on iOS,

00:40:34.597 --> 00:40:36.430
it's going to just tell
you hey, by the way,

00:40:36.430 --> 00:40:37.980
I got the new app already
waiting for you here

00:40:37.980 --> 00:40:38.800
on the phone.

00:40:38.800 --> 00:40:40.130
Just click install.

00:40:40.130 --> 00:40:43.670
And that is going to boost
a lot of the dogfood usage

00:40:43.670 --> 00:40:44.760
for our internal people.

00:40:44.760 --> 00:40:46.500
So it'll be very seamless
for them to keep up

00:40:46.500 --> 00:40:48.540
to the latest, because that
changes every day, right?

00:40:48.540 --> 00:40:50.498
We're going to ship that
dogfood app every day.

00:40:52.720 --> 00:40:55.140
The test console--
if we click through

00:40:55.140 --> 00:40:57.160
in some of those
test failures, you're

00:40:57.160 --> 00:41:00.660
going to see basically
the history of what's

00:41:00.660 --> 00:41:03.104
passing, what's failing, and
specifically what failed.

00:41:03.104 --> 00:41:05.270
So you'll be notified when
this stuff fails for you.

00:41:05.270 --> 00:41:07.217
You're going to go
look for your commit.

00:41:07.217 --> 00:41:08.050
You see your commit.

00:41:08.050 --> 00:41:08.870
You click through.

00:41:08.870 --> 00:41:11.850
You're going to get
exactly which test failed.

00:41:11.850 --> 00:41:14.290
Our tests have an
automatic quality rating.

00:41:14.290 --> 00:41:16.810
So if we see tests
are failing or flaky,

00:41:16.810 --> 00:41:20.520
the star rating for tests--
tests have Karma as well.

00:41:20.520 --> 00:41:21.770
They will lose their Karma.

00:41:21.770 --> 00:41:24.740
And eventually they'll be
discarded if it's a flaky test.

00:41:24.740 --> 00:41:25.720
Click through here.

00:41:25.720 --> 00:41:28.270
Again, these are tools
that are kind of specific,

00:41:28.270 --> 00:41:30.140
but you can basically
see the history

00:41:30.140 --> 00:41:32.780
of how this thing failed,
exactly when it failed.

00:41:32.780 --> 00:41:35.970
Point being, you need to
have data that gets you down

00:41:35.970 --> 00:41:38.530
to the rev level of
when things went wrong.

00:41:38.530 --> 00:41:42.100
So again, every commit,
every test run every time,

00:41:42.100 --> 00:41:43.710
it's easy to
basically bisect down.

00:41:43.710 --> 00:41:45.471
And say, here's the
point which we failed.

00:41:45.471 --> 00:41:45.970
Here you go.

00:41:48.490 --> 00:41:50.110
With all this, we
still have breaks.

00:41:50.110 --> 00:41:51.693
And if you're
committing and something

00:41:51.693 --> 00:41:53.940
breaks but it's not
yours, you can always

00:41:53.940 --> 00:41:55.780
pull back to a stable point.

00:41:55.780 --> 00:41:59.140
So there's a
rolling stable label

00:41:59.140 --> 00:42:01.830
in master, where if
you're hopelessly broke

00:42:01.830 --> 00:42:05.820
at top of trunk, you
could say, listen,

00:42:05.820 --> 00:42:07.280
give me back
something I can build.

00:42:07.280 --> 00:42:09.200
You can always pull
that stable label back.

00:42:09.200 --> 00:42:11.184
And that automatically
updates as things pass.

00:42:11.184 --> 00:42:12.100
That's a simple thing.

00:42:12.100 --> 00:42:13.433
We've been doing that for years.

00:42:13.433 --> 00:42:15.090
I think all of us
have done that.

00:42:15.090 --> 00:42:17.360
Don't forget it on mobile.

00:42:17.360 --> 00:42:19.220
Test failure bot--
again, nobody likes

00:42:19.220 --> 00:42:21.950
tests because they can be noisy
and brittle and give you noise.

00:42:21.950 --> 00:42:23.783
The bot tries to take
care of a lot of this.

00:42:23.783 --> 00:42:25.740
It'll assign bugs it
sees that are unassigned

00:42:25.740 --> 00:42:28.080
by doing some analysis,
and says, nobody owns this.

00:42:28.080 --> 00:42:29.745
But I think this
guy should own it.

00:42:29.745 --> 00:42:31.670
Or if it sees things
that have been closed,

00:42:31.670 --> 00:42:34.020
or that the test is
working now, it'll

00:42:34.020 --> 00:42:35.930
go off and close the
test, saying like OK,

00:42:35.930 --> 00:42:38.740
this clearly works-- no
reason to keep this bug open.

00:42:38.740 --> 00:42:42.670
So get the bots to do a lot of
the crappy work of figuring out

00:42:42.670 --> 00:42:45.532
where tests should go, or
if it's open or closed.

00:42:45.532 --> 00:42:47.990
Because that's the part that
developers really fall down on

00:42:47.990 --> 00:42:49.770
is just responding to
this endless stream

00:42:49.770 --> 00:42:52.750
of noise about tests failing
or passing, and failing

00:42:52.750 --> 00:42:53.550
and passing.

00:42:53.550 --> 00:42:58.520
So mitigate that noise
to them as best you can.

00:42:58.520 --> 00:43:00.810
With all that, especially
with Mercurial and Git,

00:43:00.810 --> 00:43:03.890
when you rebase, you
could get in a bad state.

00:43:03.890 --> 00:43:06.190
We use this thing
called Landcastle.

00:43:06.190 --> 00:43:10.750
And what this means is
when you commit into master

00:43:10.750 --> 00:43:12.380
while that stuff's
all running, we

00:43:12.380 --> 00:43:16.210
worry about rebasing your
stuff into the latest--

00:43:16.210 --> 00:43:19.014
basically, the tip of the tree.

00:43:19.014 --> 00:43:20.930
So when you commit, this
thing's going to say,

00:43:20.930 --> 00:43:22.500
yes I've cued up your thing.

00:43:22.500 --> 00:43:23.542
Your change is in there.

00:43:23.542 --> 00:43:24.750
It's going through the stuff.

00:43:24.750 --> 00:43:27.980
I'll keep rebasing it
for you until it lands.

00:43:27.980 --> 00:43:30.160
If in the process of
rebasing it basically

00:43:30.160 --> 00:43:33.100
finds a problem or a conflict
because stuff is coming in,

00:43:33.100 --> 00:43:34.090
it'll send you a page.

00:43:34.090 --> 00:43:36.340
And say, listen I can't land
your change in the master

00:43:36.340 --> 00:43:39.240
because this guy just pulled
the rug out from underneath you.

00:43:39.240 --> 00:43:41.410
So go deal with him.

00:43:41.410 --> 00:43:43.770
So again, taking the
onus off the developer

00:43:43.770 --> 00:43:45.810
to worry about constantly
rebasing, constantly

00:43:45.810 --> 00:43:47.870
checking if that
thing gets in, it's

00:43:47.870 --> 00:43:50.930
much simpler if the system
takes care of that for you.

00:43:50.930 --> 00:43:53.270
I think at VMware we
had a similar system

00:43:53.270 --> 00:43:55.220
we had at VMware.

00:43:55.220 --> 00:43:58.137
With all this, we can
still break master.

00:43:58.137 --> 00:43:58.720
What do we do?

00:43:58.720 --> 00:44:01.610
We have the Sheriff.

00:44:01.610 --> 00:44:03.390
I do the same thing on web.

00:44:03.390 --> 00:44:06.180
Like I said, there's two
people essentially running web.

00:44:06.180 --> 00:44:09.940
There's 1,000 developers
against two release engineers,

00:44:09.940 --> 00:44:11.160
and we release in real-time.

00:44:11.160 --> 00:44:13.530
So we have on-calls, or Sheriff.

00:44:13.530 --> 00:44:17.520
I have a page with a
rotation for every group--

00:44:17.520 --> 00:44:21.210
all their on-calls for that week
for all the different groups.

00:44:21.210 --> 00:44:23.350
When things go bad,
and photos doesn't

00:44:23.350 --> 00:44:26.330
work on the new iOS build,
am I going to debug that?

00:44:26.330 --> 00:44:26.865
Not so much.

00:44:26.865 --> 00:44:28.990
I'm going to go to the
list, and it's going to say,

00:44:28.990 --> 00:44:32.309
this guy right here is the
photos on-call for the week.

00:44:32.309 --> 00:44:33.100
Here's the problem.

00:44:33.100 --> 00:44:33.600
Fix it now.

00:44:33.600 --> 00:44:35.850
Fix it real-time,
and get back to me.

00:44:35.850 --> 00:44:36.820
Get who you need.

00:44:36.820 --> 00:44:37.950
Back out what you need.

00:44:37.950 --> 00:44:39.750
Do something.

00:44:39.750 --> 00:44:41.370
And that's the job
of the Sheriff.

00:44:41.370 --> 00:44:43.890
This is ideal because
it gives the developers

00:44:43.890 --> 00:44:46.790
this operational burden that
really opens their eyes.

00:44:46.790 --> 00:44:48.079
They become allies of you.

00:44:48.079 --> 00:44:50.370
They feel they're part of
the release engineering team.

00:44:50.370 --> 00:44:51.670
We're part of the gang.

00:44:51.670 --> 00:44:53.820
And as you spread that--
as more people get

00:44:53.820 --> 00:44:56.692
to be Sheriff and on-calls,
they have this empathy for like,

00:44:56.692 --> 00:44:57.400
yeah, this sucks.

00:44:57.400 --> 00:44:59.020
We're really screwing you guys.

00:44:59.020 --> 00:45:02.660
So they will be better
engineers and better operational

00:45:02.660 --> 00:45:06.530
people if they have this role.

00:45:06.530 --> 00:45:09.490
Their main role on mobile--
get it working, man.

00:45:09.490 --> 00:45:10.310
Just revert.

00:45:10.310 --> 00:45:11.740
Just get me back.

00:45:11.740 --> 00:45:13.810
Get me back on my feet.

00:45:13.810 --> 00:45:15.302
They'll look through.

00:45:15.302 --> 00:45:17.760
I'll send them this link like,
hey these tests are failing.

00:45:17.760 --> 00:45:19.520
I can't figure out
what's going on.

00:45:19.520 --> 00:45:21.890
It looks like it's
related to photos.

00:45:21.890 --> 00:45:26.570
They'll go in, and they have the
special super confidential tag,

00:45:26.570 --> 00:45:29.020
where they can get
stuff in, bypassing

00:45:29.020 --> 00:45:34.170
some of the big stack of stuff,
because I want that fixed now.

00:45:34.170 --> 00:45:35.800
So as the Sheriff,
you get checked off

00:45:35.800 --> 00:45:37.260
in the database as a Sheriff.

00:45:37.260 --> 00:45:39.030
You get a special tag to commit.

00:45:39.030 --> 00:45:40.770
And you get your stuff in.

00:45:40.770 --> 00:45:42.980
Generally, reverts
go in immediately.

00:45:47.100 --> 00:45:49.910
Bisect too is cool.

00:45:49.910 --> 00:45:53.270
Basically, you can do a
live bisect on your phone,

00:45:53.270 --> 00:45:54.360
trying to find a problem.

00:45:54.360 --> 00:45:55.360
So you can go here.

00:45:55.360 --> 00:45:57.820
Tell us what bug
you're looking for,

00:45:57.820 --> 00:46:00.030
basically punch
in build numbers.

00:46:00.030 --> 00:46:02.360
And they'll just suck down
from the dogfood page,

00:46:02.360 --> 00:46:04.670
so you can try
different builds, bisect

00:46:04.670 --> 00:46:07.250
until you find that exact point
that things have gone bad.

00:46:09.830 --> 00:46:10.330
All right.

00:46:10.330 --> 00:46:11.880
Let me wrap up here.

00:46:11.880 --> 00:46:14.990
So the big shock for us at
mobile was we thought we had

00:46:14.990 --> 00:46:19.220
things solved as release
engineers, and we didn't.

00:46:19.220 --> 00:46:21.050
The process for us at
mobile was I went out

00:46:21.050 --> 00:46:25.050
and I hired Christian Legnitto,
in the back, from Mozilla.

00:46:25.050 --> 00:46:27.240
And I was busy with
the other guys.

00:46:27.240 --> 00:46:28.960
Just getting web--
was pretty good.

00:46:28.960 --> 00:46:30.550
I wanted to make sure
web stayed on its feet.

00:46:30.550 --> 00:46:31.780
I said, Christian, that
mobile thing's a mess.

00:46:31.780 --> 00:46:32.530
Go deal with that.

00:46:32.530 --> 00:46:37.970
I threw him in-- like one guy
into this big den of mobile.

00:46:37.970 --> 00:46:39.310
And he did a great job.

00:46:39.310 --> 00:46:41.680
But he had to come
back, and we all

00:46:41.680 --> 00:46:44.270
had to figure out we have
to change how we develop,

00:46:44.270 --> 00:46:45.850
how we ship, how we write code.

00:46:45.850 --> 00:46:48.140
All those things that
we had solved already

00:46:48.140 --> 00:46:49.990
had to be rethought.

00:46:49.990 --> 00:46:52.200
And the tools had to
be modified a bit.

00:46:52.200 --> 00:46:53.879
And new tools had
to be invented.

00:46:53.879 --> 00:46:55.420
But the important
thing is it was not

00:46:55.420 --> 00:46:59.720
a shock for any developer
going from the web world

00:46:59.720 --> 00:47:01.710
to the jarring cold
reality of mobile,

00:47:01.710 --> 00:47:03.770
because the culture
was the same.

00:47:03.770 --> 00:47:05.260
They all knew this
Dev/Ops culture.

00:47:05.260 --> 00:47:07.470
They all knew they had
the responsibility.

00:47:07.470 --> 00:47:09.970
It was very bearable.

00:47:09.970 --> 00:47:13.290
So I can say, quite confidently
now, Facebook is mobile.

00:47:13.290 --> 00:47:16.550
We are a big heavyweight
mobile company.

00:47:16.550 --> 00:47:18.820
We have many, many mobile apps.

00:47:18.820 --> 00:47:20.600
The team in the
back and myself are

00:47:20.600 --> 00:47:23.320
responsible for shipping
those mobile apps.

00:47:23.320 --> 00:47:26.879
We'd love to hear what other
people are doing with mobile.

00:47:26.879 --> 00:47:28.170
I think we have a lot to learn.

00:47:28.170 --> 00:47:29.128
We have a lot to share.

00:47:29.128 --> 00:47:32.290
We have to really lean on our
friends at Apple and at Google

00:47:32.290 --> 00:47:33.930
to help.

00:47:33.930 --> 00:47:37.430
I don't like to be critical,
but they're keeping us back.

00:47:37.430 --> 00:47:41.010
The systems have not
kept up with the reality

00:47:41.010 --> 00:47:43.420
of the mobile ecosystem.

00:47:43.420 --> 00:47:45.750
I promised I'd complain
about the Google Play Store.

00:47:45.750 --> 00:47:49.540
We have 17-- when we want to
release one version of Facebook

00:47:49.540 --> 00:47:51.640
for Android,
there's 17 packages.

00:47:51.640 --> 00:47:57.190
Because we build out APKs
for individual DPIs or chips,

00:47:57.190 --> 00:47:58.550
or whatever.

00:47:58.550 --> 00:48:00.680
It's no fun to go
into a web interface

00:48:00.680 --> 00:48:05.820
and uploading 17 packages every
four weeks with release notes.

00:48:05.820 --> 00:48:06.740
So this is silly.

00:48:06.740 --> 00:48:10.050
I mean, let's not
be amateurs here.

00:48:10.050 --> 00:48:10.940
Let's get an API.

00:48:10.940 --> 00:48:13.400
Let's get this thing
like industrial strength,

00:48:13.400 --> 00:48:15.800
so I can get things through.

00:48:15.800 --> 00:48:18.251
I promise you, I am not happy
with four weeks releasing

00:48:18.251 --> 00:48:18.750
stuff.

00:48:18.750 --> 00:48:20.790
I'm going to get to
two weeks, hopefully

00:48:20.790 --> 00:48:22.140
by the end of the half.

00:48:22.140 --> 00:48:22.640
All right.

00:48:22.640 --> 00:48:25.015
I want to ship both platforms
every two weeks, eventually

00:48:25.015 --> 00:48:27.940
every week shipping mobile.

00:48:27.940 --> 00:48:31.770
I can do that, but the
tools at Apple and Google

00:48:31.770 --> 00:48:34.420
are, right now, one of
my biggest hurdles--

00:48:34.420 --> 00:48:35.290
to get that cadence.

00:48:38.291 --> 00:48:38.790
All right.

00:48:38.790 --> 00:48:40.850
There's my contact information.

00:48:40.850 --> 00:48:42.373
I think we have
time for questions,

00:48:42.373 --> 00:48:43.905
if we have maybe a microphone.

00:48:51.260 --> 00:48:52.670
BORIS DEBIC: Thank you, Chuck.

00:48:52.670 --> 00:48:54.160
We have time for
a few questions.

00:48:54.160 --> 00:48:56.640
And we'll ask you
to speak to the mic,

00:48:56.640 --> 00:49:00.380
so we get the
questions on camera.

00:49:00.380 --> 00:49:02.630
AUDIENCE: So the
Karma stuff-- so A,

00:49:02.630 --> 00:49:04.450
Craig from Wikimedia
Foundation, we're

00:49:04.450 --> 00:49:07.280
actually seriously considering
moving to Fabricator right now.

00:49:07.280 --> 00:49:09.090
We're in a mix of
Gerrit and Bugzilla

00:49:09.090 --> 00:49:12.504
and it is hell-- on
Trello and Mingle

00:49:12.504 --> 00:49:14.170
and all the other
crap that's out there.

00:49:14.170 --> 00:49:16.461
But so, Fabricator, we've
been talking with Evan a lot,

00:49:16.461 --> 00:49:20.280
and we're thinking about--
oh, is it-- oh, there we go.

00:49:20.280 --> 00:49:23.040
Swallow the mic.

00:49:23.040 --> 00:49:23.540
All right.

00:49:23.540 --> 00:49:25.470
So right, so Wikimedia
Foundation-- we're

00:49:25.470 --> 00:49:26.970
thinking about
moving to Fabricator.

00:49:26.970 --> 00:49:29.429
And one of things that I
liked about the features

00:49:29.429 --> 00:49:30.970
that you mentioned
that it know about

00:49:30.970 --> 00:49:34.230
was the Karma thing, because
I'm the release manager there

00:49:34.230 --> 00:49:37.050
and I have those same
stars in my head.

00:49:37.050 --> 00:49:41.290
So the very basic question--
who all-- so you said you

00:49:41.290 --> 00:49:43.490
have that right to dislike.

00:49:43.490 --> 00:49:45.710
Is there anyone else
like your release team?

00:49:45.710 --> 00:49:47.168
CHUCK ROSSI: Right,
so the question

00:49:47.168 --> 00:49:49.110
is-- the Karma thing
can be sensitive.

00:49:49.110 --> 00:49:51.530
And I don't want to mean
is a mean-spirited thing.

00:49:51.530 --> 00:49:53.370
You can't use it as a club.

00:49:53.370 --> 00:49:56.060
But it could be a subtle
way that you can keep track.

00:49:56.060 --> 00:49:57.900
And the question is
who has access to that?

00:49:57.900 --> 00:49:59.530
Well, all my release engineers.

00:49:59.530 --> 00:50:01.200
So everyone in
release engineering

00:50:01.200 --> 00:50:07.130
is in the database as being
able to see that-- just

00:50:07.130 --> 00:50:10.100
the user themselves and
the release engineer.

00:50:10.100 --> 00:50:12.660
So it is, again,
a private thing.

00:50:12.660 --> 00:50:15.610
And I'll give you an example
of how it was used for good.

00:50:15.610 --> 00:50:19.440
We had a guy in web who
was just killing us.

00:50:19.440 --> 00:50:21.990
Like, every time he'd touch
code, [INAUDIBLE] would break,

00:50:21.990 --> 00:50:23.214
or something break.

00:50:23.214 --> 00:50:24.630
Something in
platform might break.

00:50:24.630 --> 00:50:25.970
And he was down to two stars.

00:50:25.970 --> 00:50:28.870
And our policy is when
you're down to two stars,

00:50:28.870 --> 00:50:30.410
we just don't take your change.

00:50:30.410 --> 00:50:34.100
Because clearly we've-- you
only lose half a star each time.

00:50:34.100 --> 00:50:35.726
So that's four times.

00:50:35.726 --> 00:50:37.100
And we only give
you a down Karma

00:50:37.100 --> 00:50:40.734
if you really-- things
had to stop working.

00:50:40.734 --> 00:50:42.150
So we're like,
this is ridiculous.

00:50:42.150 --> 00:50:43.977
This guy, we can't
take his change.

00:50:43.977 --> 00:50:44.810
And what's going on?

00:50:44.810 --> 00:50:47.070
So we were able to get
with him and his manager.

00:50:47.070 --> 00:50:47.880
We're like, what's going on?

00:50:47.880 --> 00:50:49.900
Well, it turns out, he'd
inherited this awful JavaScript

00:50:49.900 --> 00:50:51.733
code from 1,000 years
ago-- probably written

00:50:51.733 --> 00:50:54.360
by Zuck himself-- that
landed in his lap.

00:50:54.360 --> 00:50:57.570
And every time he touched it, it
was just a hopeless situation.

00:50:57.570 --> 00:50:59.520
He was just doomed.

00:50:59.520 --> 00:51:02.300
So we said, OK, we got to step
back, get proper resources

00:51:02.300 --> 00:51:04.730
on this, revamp what
we're doing here,

00:51:04.730 --> 00:51:07.750
get some real-- you
can't go on this way.

00:51:07.750 --> 00:51:09.930
So it really
flushed out an issue

00:51:09.930 --> 00:51:11.640
that was not this
person's fault.

00:51:11.640 --> 00:51:14.750
But something that wasn't
getting attention clearly

00:51:14.750 --> 00:51:18.167
showed up on the Karma
scores that helped.

00:51:18.167 --> 00:51:19.750
AUDIENCE: I'm Ryan
from Cloud Foundry,

00:51:19.750 --> 00:51:22.250
and one of the things that
really stand out to me

00:51:22.250 --> 00:51:25.620
was when you said that
we as release engineers

00:51:25.620 --> 00:51:29.430
need to make sure our
team is well-respected

00:51:29.430 --> 00:51:30.800
in the organization.

00:51:30.800 --> 00:51:34.060
So what are maybe one or two
of the most important things

00:51:34.060 --> 00:51:37.750
we could do to ensure that
when we say something important

00:51:37.750 --> 00:51:39.830
it is heard at the
highest levels?

00:51:39.830 --> 00:51:41.010
CHUCK ROSSI: Right.

00:51:41.010 --> 00:51:44.530
So the first thing is you've
got to have the attitude

00:51:44.530 --> 00:51:47.620
that you're not there
to hinder things.

00:51:47.620 --> 00:51:50.852
The push back you get is like,
if you guys get in control,

00:51:50.852 --> 00:51:52.810
everything is going to
stop, because you're not

00:51:52.810 --> 00:51:53.460
going to lay anything out.

00:51:53.460 --> 00:51:55.168
And you're going to
grumpy and like that.

00:51:55.168 --> 00:51:57.120
So you have to balance
the idea of like,

00:51:57.120 --> 00:51:59.700
I'm going to be
cautious, but I really

00:51:59.700 --> 00:52:00.990
want to make things happen.

00:52:00.990 --> 00:52:03.710
The team wants to enable the
company in the developers

00:52:03.710 --> 00:52:04.991
to get stuff going.

00:52:04.991 --> 00:52:06.490
But we're going to
be-- like I said,

00:52:06.490 --> 00:52:07.781
some sort of adult supervision.

00:52:07.781 --> 00:52:11.670
We're going to do a little
bit of sanity test for that.

00:52:11.670 --> 00:52:16.210
As far as how you can
build that, it's tough.

00:52:16.210 --> 00:52:21.170
You absolutely need an advocate
up the management chain.

00:52:21.170 --> 00:52:23.910
And I've been lucky here
at Google and at Facebook

00:52:23.910 --> 00:52:29.640
and pretty much everywhere that
the organization from usually

00:52:29.640 --> 00:52:33.070
the VP of engineering down,
understands the value of what

00:52:33.070 --> 00:52:35.080
we do-- of release
engineering and learns

00:52:35.080 --> 00:52:40.480
to trust the experience and
the judgment of these people.

00:52:40.480 --> 00:52:43.730
So I would really advocate
up your chain a bit

00:52:43.730 --> 00:52:48.500
and see if you can get
someone to back you.

00:52:48.500 --> 00:52:50.784
It helps if you have an
experienced release engineer

00:52:50.784 --> 00:52:51.700
on the team somewhere.

00:52:51.700 --> 00:52:53.359
Or even the other
one is-- and I'm

00:52:53.359 --> 00:52:54.650
sure you can find these people.

00:52:54.650 --> 00:52:57.660
Every group has a developer who
is like a frustrated releng.

00:52:59.659 --> 00:53:01.200
They're always
getting in your stuff.

00:53:01.200 --> 00:53:01.960
They're always pointing around.

00:53:01.960 --> 00:53:03.001
They always like to help.

00:53:03.001 --> 00:53:06.860
They're giving you great tools,
and they love this stuff.

00:53:06.860 --> 00:53:09.960
Get that person on your side
to help advocate for you.

00:53:09.960 --> 00:53:13.096
And those developers
who on your side

00:53:13.096 --> 00:53:15.720
are going to be a big boost for
your team and for your respect.

00:53:15.720 --> 00:53:17.678
The other thing, I"ll
just say one last thing--

00:53:17.678 --> 00:53:19.480
is do the thing I
said about on-calls.

00:53:19.480 --> 00:53:20.984
Get developers in
your little world.

00:53:20.984 --> 00:53:22.900
And say, hey, you're the
on-call for the week.

00:53:22.900 --> 00:53:24.670
And you will get
your circle of trust,

00:53:24.670 --> 00:53:26.610
and you'll get more respect that
way, because they'll be like,

00:53:26.610 --> 00:53:27.960
yeah, you guys do crazy work.

00:53:27.960 --> 00:53:28.990
I can't believe it.

00:53:28.990 --> 00:53:32.490
So those things will help.

00:53:32.490 --> 00:53:36.880
AUDIENCE: So one line that I use
that was very effective to get

00:53:36.880 --> 00:53:38.430
people to accept
what I was doing

00:53:38.430 --> 00:53:43.980
was to say, hey, you're going to
have to jump through a few more

00:53:43.980 --> 00:53:45.450
bureaucratic hoops,
but you're only

00:53:45.450 --> 00:53:46.600
going to do your work once.

00:53:46.600 --> 00:53:48.433
You're not going to
have to go back and deal

00:53:48.433 --> 00:53:50.550
with this craziness
of things breaking

00:53:50.550 --> 00:53:52.344
and having to be redone.

00:53:52.344 --> 00:53:53.760
CHUCK ROSSI:
Ultimately, the pitch

00:53:53.760 --> 00:53:55.910
is you're going
to help yourself.

00:53:55.910 --> 00:53:59.440
If you let me do
these things for you,

00:53:59.440 --> 00:54:01.327
I'm going to save you
a lot of pain and lot

00:54:01.327 --> 00:54:02.660
of redoing things down the road.

00:54:05.649 --> 00:54:07.940
AUDIENCE: Hey Chuck, you had
one of your diagrams ended

00:54:07.940 --> 00:54:10.230
with a soak period.

00:54:10.230 --> 00:54:13.890
So what happens if you get a
surprise in the soaking period.

00:54:13.890 --> 00:54:15.750
Does that effect that cycle?

00:54:15.750 --> 00:54:17.010
Does it affect the next cycle?

00:54:17.010 --> 00:54:17.843
What do you do then?

00:54:17.843 --> 00:54:19.450
CHUCK ROSSI: Yeah,
soak is not ideal.

00:54:19.450 --> 00:54:23.411
And in fact soak
doesn't work that well,

00:54:23.411 --> 00:54:25.910
because if you're a day into
soak, and you're like, oh yeah,

00:54:25.910 --> 00:54:27.369
that doesn't work.

00:54:27.369 --> 00:54:28.910
So you got to
cherry-pick, and you've

00:54:28.910 --> 00:54:29.860
got to push that out again.

00:54:29.860 --> 00:54:30.859
You got to collect edit.

00:54:30.859 --> 00:54:31.490
It stinks.

00:54:31.490 --> 00:54:32.970
You know what saves that 100%?

00:54:32.970 --> 00:54:34.340
The beta program.

00:54:34.340 --> 00:54:35.480
So I could be in soak.

00:54:35.480 --> 00:54:37.970
I'm in soak now the whole
stupid time that four weeks,

00:54:37.970 --> 00:54:40.260
because I have two, three,
whatever million people

00:54:40.260 --> 00:54:42.490
we have out there using the app.

00:54:42.490 --> 00:54:44.300
So when I find something,
and I'm in soak.

00:54:44.300 --> 00:54:47.490
And I cherry-pick, I don't
have just the 4,000 engineers

00:54:47.490 --> 00:54:49.014
of Facebook to go give this to.

00:54:49.014 --> 00:54:51.180
I have a couple million
people I can go give this to

00:54:51.180 --> 00:54:53.435
and an instantly
get some feedback.

00:54:53.435 --> 00:54:55.646
AUDIENCE: But then why do
you need the soak period?

00:54:55.646 --> 00:54:57.350
I mean, why have it?

00:54:57.350 --> 00:54:57.990
CHUCK ROSSI: The
question is why do we

00:54:57.990 --> 00:54:59.365
need the soak
period at all then?

00:54:59.365 --> 00:55:01.590
And in fact, it's
probably less of a thing

00:55:01.590 --> 00:55:04.090
now that the beta--
I need it on iOS,

00:55:04.090 --> 00:55:06.170
because there is no
beta program on iOS.

00:55:06.170 --> 00:55:08.211
Maybe if you can give the
microphone to Christian

00:55:08.211 --> 00:55:11.250
sitting behind you, who works.

00:55:11.250 --> 00:55:12.880
Can Christian just
grab the mic there.

00:55:12.880 --> 00:55:14.024
Christian works on mobile.

00:55:14.024 --> 00:55:15.940
CHRISTIAN LEGNITTO: Yeah,
so the original goal

00:55:15.940 --> 00:55:19.350
was-- the way we dogfood
and the way beta dogfood

00:55:19.350 --> 00:55:22.500
is, you're basically installing
an update every night,

00:55:22.500 --> 00:55:24.940
which is not the way our
users will actually run it.

00:55:24.940 --> 00:55:28.310
They'll install one update
and then run it for a month.

00:55:28.310 --> 00:55:30.000
So there's some
sort of bugs like,

00:55:30.000 --> 00:55:32.180
local caches growing
unbounded, or something

00:55:32.180 --> 00:55:34.070
like that, where
installing every day

00:55:34.070 --> 00:55:35.534
would hide those bugs.

00:55:35.534 --> 00:55:37.200
And of course, we
have to push out a new

00:55:37.200 --> 00:55:39.260
build every day
because we want to test

00:55:39.260 --> 00:55:41.270
the changes, the
cherry-picks we've taken.

00:55:41.270 --> 00:55:42.935
But at the end of
the day, we want

00:55:42.935 --> 00:55:44.810
to test how our users
are going to experience

00:55:44.810 --> 00:55:48.454
and they're not going to be
installing updates every day.

00:55:48.454 --> 00:55:49.870
CHUCK ROSSI: So
we did effectively

00:55:49.870 --> 00:55:51.010
get a soak through that.

00:55:51.010 --> 00:55:52.280
AUDIENCE: Hi, I'm
Fred from Google.

00:55:52.280 --> 00:55:54.446
I'm just wondering about
how you use that telemetry.

00:55:54.446 --> 00:55:56.630
What do you do with the
telemetry you get back,

00:55:56.630 --> 00:55:57.980
and how do you interpret it?

00:55:57.980 --> 00:55:59.688
CHUCK ROSSI: So the
telemetry coming back

00:55:59.688 --> 00:56:02.685
from those various channels
will be our graphing system,

00:56:02.685 --> 00:56:03.810
our data collection system.

00:56:03.810 --> 00:56:07.760
We'll basically graph it over
the current production values--

00:56:07.760 --> 00:56:15.200
so crash rates, TTI, app size,
bug rates, all those meta

00:56:15.200 --> 00:56:17.890
values will be
transposed over the known

00:56:17.890 --> 00:56:18.900
values for production.

00:56:18.900 --> 00:56:22.220
So if they vary, and we're
all very intimate with what

00:56:22.220 --> 00:56:23.940
those numbers are,
and we can see.

00:56:23.940 --> 00:56:27.100
The other thing we're getting
is individual results--

00:56:27.100 --> 00:56:31.824
specific logging data that
is only from those people.

00:56:31.824 --> 00:56:32.740
We do this on the web.

00:56:32.740 --> 00:56:34.340
It's fantastic.

00:56:34.340 --> 00:56:36.910
We have a page for all
the log data coming back.

00:56:36.910 --> 00:56:38.650
It's like, show
me only the stuff

00:56:38.650 --> 00:56:40.890
happening with the
new beta release.

00:56:40.890 --> 00:56:42.640
So it'll flush out
like, hey, these

00:56:42.640 --> 00:56:44.597
are new bearers I've
never seen before.

00:56:44.597 --> 00:56:46.430
So instantly like, oh,
that's all new stuff.

00:56:46.430 --> 00:56:49.710
We got go flush through that
and see what's going on.

00:56:49.710 --> 00:56:52.650
So those are the two main
ways we can get that telemetry

00:56:52.650 --> 00:56:55.650
and figure out if we're in
better shape or worse shape.

00:56:55.650 --> 00:56:56.340
AUDIENCE: Hello.

00:56:56.340 --> 00:56:57.655
My name is Armand from Mozilla.

00:57:01.220 --> 00:57:02.720
It was excellent
what you showed us.

00:57:02.720 --> 00:57:05.910
There's one question I have
with regards to the home

00:57:05.910 --> 00:57:10.940
page for each team
of developers.

00:57:10.940 --> 00:57:16.590
If you're backing out up
to the last stable state,

00:57:16.590 --> 00:57:22.510
why would you need a team of
sheriffs or on-call people?

00:57:22.510 --> 00:57:24.035
CHUCK ROSSI: Right.

00:57:24.035 --> 00:57:26.460
You're specifically like,
if master has trouble,

00:57:26.460 --> 00:57:28.480
why do you need a sheriff
to back it out, or--

00:57:28.480 --> 00:57:29.070
AUDIENCE: You back out.

00:57:29.070 --> 00:57:30.153
You get to a stable state.

00:57:30.153 --> 00:57:34.560
And why would you need
a list of people on call

00:57:34.560 --> 00:57:36.360
if you are back to
stable supposedly?

00:57:36.360 --> 00:57:39.250
BORIS DEBIC: Right Only one
part of the job of the Sheriff

00:57:39.250 --> 00:57:42.160
is to deal with
breakage and trunk.

00:57:42.160 --> 00:57:43.844
It's almost an easy
part of the job,

00:57:43.844 --> 00:57:45.010
because you can just revert.

00:57:45.010 --> 00:57:46.910
And a bot could almost
do that at some point

00:57:46.910 --> 00:57:48.570
if you get some
confidence in it.

00:57:48.570 --> 00:57:51.040
The real reason I need those
on-calls and sheriffs is

00:57:51.040 --> 00:57:53.690
operationally-- we
operate in real time.

00:57:53.690 --> 00:57:56.270
The data coming in
from production,

00:57:56.270 --> 00:57:58.120
the website going out
every day-- something

00:57:58.120 --> 00:58:00.210
is happening all the time.

00:58:00.210 --> 00:58:02.465
If something goes wrong,
if I look at my graph

00:58:02.465 --> 00:58:05.030
like Fred was talking about,
and I see the production

00:58:05.030 --> 00:58:08.234
graph for crashes just all
the sudden, bam-- goes up,

00:58:08.234 --> 00:58:09.275
and I look at the stacks.

00:58:09.275 --> 00:58:13.139
And I'm saying, why are group
messages suddenly fataling?

00:58:13.139 --> 00:58:14.930
I'm going to go right
to that on-call page,

00:58:14.930 --> 00:58:17.510
find the groups person
and say, you-- this

00:58:17.510 --> 00:58:19.011
is your life right now.

00:58:19.011 --> 00:58:20.510
You got to take
this, and you've got

00:58:20.510 --> 00:58:22.580
to figure out right
now what's going on.

00:58:22.580 --> 00:58:26.310
Now you guys at Google
championed the use of SREs

00:58:26.310 --> 00:58:30.200
to do this as the first line to
figure out mostly for web side,

00:58:30.200 --> 00:58:32.850
but when things go
wrong, SREs responded.

00:58:32.850 --> 00:58:35.500
We're less about that
and more about having

00:58:35.500 --> 00:58:37.660
it go right to the team.

00:58:37.660 --> 00:58:40.980
The operational people are
within the team itself.

00:58:40.980 --> 00:58:42.090
So that's the real reason.

00:58:42.090 --> 00:58:44.096
I need their expertise
as on-calls and sheriffs

00:58:44.096 --> 00:58:45.470
to be able to look
at a problem--

00:58:45.470 --> 00:58:47.396
a stack trace, a code path.

00:58:47.396 --> 00:58:48.770
They know what
went in that week.

00:58:48.770 --> 00:58:50.228
They're like, oh
shit yeah, we just

00:58:50.228 --> 00:58:53.149
updated that groups-- that
push went out yesterday.

00:58:53.149 --> 00:58:54.690
And all the sudden,
it's failing now.

00:58:54.690 --> 00:58:56.481
Somebody changed a gate
keeper, or somebody

00:58:56.481 --> 00:58:57.835
turned on that code.

00:58:57.835 --> 00:58:58.960
And now we've got to react.

00:58:58.960 --> 00:59:01.390
And he's the best person to do
it, because he's in that group,

00:59:01.390 --> 00:59:03.360
and can find-- they're
like, it was that guy.

00:59:03.360 --> 00:59:05.510
And then run down, you get
them, and then we do it.

00:59:05.510 --> 00:59:07.380
So that's the big win.

00:59:07.380 --> 00:59:08.880
AUDIENCE: Do you
have any challenges

00:59:08.880 --> 00:59:12.350
with the balance of power
between product owners

00:59:12.350 --> 00:59:16.670
and testing and then
the release management?

00:59:16.670 --> 00:59:20.910
Do you ever get overridden by
your decision-- get overridden

00:59:20.910 --> 00:59:23.820
by the product owner
saying, those testing,

00:59:23.820 --> 00:59:25.800
it's not relevant.

00:59:25.800 --> 00:59:29.070
The feature being delivered is
more important than that bug.

00:59:29.070 --> 00:59:30.180
Ship it anyway.

00:59:30.180 --> 00:59:32.930
BORIS DEBIC: Yeah, we probably
don't have it as much.

00:59:32.930 --> 00:59:35.880
But that's the natural
order things, right?

00:59:35.880 --> 00:59:37.940
So we don't have any QA groups.

00:59:37.940 --> 00:59:38.730
So there is no QA.

00:59:41.390 --> 00:59:43.190
That data is evident by itself.

00:59:43.190 --> 00:59:44.770
Tests pass, or they don't.

00:59:44.770 --> 00:59:47.510
So that pretty much
settles that argument.

00:59:47.510 --> 00:59:50.660
The last is the release
engineer versus development

00:59:50.660 --> 00:59:52.520
are more likely PMs.

00:59:52.520 --> 00:59:57.170
Because PMs-- I make the
picture of on the one side

00:59:57.170 --> 00:59:58.787
you have my team,
release engineering,

00:59:58.787 --> 00:59:59.995
trying to hold down the fort.

00:59:59.995 --> 01:00:02.370
On this side, you got Zuck
and the management staff

01:00:02.370 --> 01:00:03.500
wanting stuff to go.

01:00:03.500 --> 01:00:05.250
And in the middle you
have the developers.

01:00:05.250 --> 01:00:07.333
And we're like the rocks
that crush the blood that

01:00:07.333 --> 01:00:10.150
makes the stop go,
right-- the lubrication.

01:00:10.150 --> 01:00:11.610
So the poor
developer and the PMs

01:00:11.610 --> 01:00:13.770
are these little things
between these two rocks

01:00:13.770 --> 01:00:15.590
that are just grinding away.

01:00:15.590 --> 01:00:18.100
So yeah, you're going to have
issues where-- especially

01:00:18.100 --> 01:00:20.099
for the PM, because they
have the pressure like,

01:00:20.099 --> 01:00:22.110
you got to shift this thing x.

01:00:22.110 --> 01:00:25.586
And they're like, it's ready I
got to try to cram all of this

01:00:25.586 --> 01:00:26.710
past the release engineers.

01:00:26.710 --> 01:00:27.810
They're going to kill me.

01:00:27.810 --> 01:00:30.184
And they're like, if you don't,
Zuck's going to kill you.

01:00:30.184 --> 01:00:31.610
So what do you do?

01:00:31.610 --> 01:00:33.640
Those, you have to
resolve, I swear to god,

01:00:33.640 --> 01:00:34.680
on a case by case basis.

01:00:34.680 --> 01:00:38.460
And again, it comes down to a
subjective, judgmental thing.

01:00:38.460 --> 01:00:39.630
You look at who's involved.

01:00:39.630 --> 01:00:40.526
You look at the code.

01:00:40.526 --> 01:00:41.400
You look at the risk.

01:00:41.400 --> 01:00:42.405
You look at the benefit.

01:00:42.405 --> 01:00:44.420
And in our case, you
think, how many users

01:00:44.420 --> 01:00:46.510
are we going to
mess up with this?

01:00:46.510 --> 01:00:47.750
All right.

01:00:47.750 --> 01:00:49.480
And you make a decision.

01:00:49.480 --> 01:00:51.890
And if you still can't
pass, you go up the line

01:00:51.890 --> 01:00:54.250
until again, I give
a lot of credit

01:00:54.250 --> 01:00:58.030
to our executive team
with Mike [? Schrepp. ?]

01:00:58.030 --> 01:01:00.490
If it goes to him,
he'll make the call.

01:01:00.490 --> 01:01:02.010
And if he says it-- it goes.

01:01:02.010 --> 01:01:02.520
It'll go.

01:01:02.520 --> 01:01:04.890
I'll do it.

01:01:04.890 --> 01:01:07.820
So generally, you alleviate
a lot of this grief

01:01:07.820 --> 01:01:09.450
with a faster release cycle.

01:01:09.450 --> 01:01:11.350
So with four weeks,
we're just at the cusp

01:01:11.350 --> 01:01:12.850
where people freak out.

01:01:12.850 --> 01:01:13.660
They can wait.

01:01:13.660 --> 01:01:16.000
But they're like, if
they hit it really wrong,

01:01:16.000 --> 01:01:20.750
it could be weeks if they just
miss by the time they get in.

01:01:20.750 --> 01:01:23.210
So that's why I want to
get to that two-week cycle.

01:01:23.210 --> 01:01:25.200
All that pressure,
all that conflict,

01:01:25.200 --> 01:01:27.790
all the grinding of gears
and rocks goes away.

01:01:27.790 --> 01:01:28.525
I can say, relax.

01:01:28.525 --> 01:01:30.820
You can go out the next
day, the next week.

01:01:30.820 --> 01:01:32.140
No big deal.

01:01:32.140 --> 01:01:35.320
We never have these problems on
web if you can push every day.

01:01:39.090 --> 01:01:41.170
AUDIENCE: You had a
really nice diagram

01:01:41.170 --> 01:01:44.300
about how you integrate into
your continuous integration

01:01:44.300 --> 01:01:48.830
like, testing, statistical
analysis, all these kind

01:01:48.830 --> 01:01:51.900
of things in every state
of development cycle.

01:01:51.900 --> 01:01:55.410
You're doing it before the
commit, if I understand,

01:01:55.410 --> 01:01:57.880
before the devs are
being evaluated and such.

01:01:57.880 --> 01:02:02.690
So if you do have it in place,
why the question of Karma

01:02:02.690 --> 01:02:04.380
comes into existence?

01:02:04.380 --> 01:02:07.390
Because in theory-- I
mean, the specifically

01:02:07.390 --> 01:02:09.620
designed these steps
and integrate them

01:02:09.620 --> 01:02:13.130
to our cycle is to avoid
these breakages, or whatever.

01:02:13.130 --> 01:02:14.840
So if you can talk a little bit.

01:02:14.840 --> 01:02:18.040
I'm interested in theory--
how much we can actually

01:02:18.040 --> 01:02:21.610
prove in that process,
and what is the filter?

01:02:21.610 --> 01:02:22.930
I mean, what gets through?

01:02:22.930 --> 01:02:24.629
And why do you think
it gets through?

01:02:24.629 --> 01:02:25.420
CHUCK ROSSI: Right.

01:02:25.420 --> 01:02:27.300
So I don't want to paint
too rosy a picture here.

01:02:27.300 --> 01:02:28.800
All that-- the
slide that I put was

01:02:28.800 --> 01:02:30.680
very pretty with all the
steps that go through.

01:02:30.680 --> 01:02:31.770
Obviously-- and
we all know this,

01:02:31.770 --> 01:02:33.910
because we've all written tools
and have those things in place.

01:02:33.910 --> 01:02:35.690
They're not going
to catch everything.

01:02:35.690 --> 01:02:38.910
Human judgment is going to
enter into the equation.

01:02:38.910 --> 01:02:41.750
The thing that makes
Karma come into play

01:02:41.750 --> 01:02:45.472
is we're operating in
near real-time here.

01:02:45.472 --> 01:02:47.680
So when things have to
happen, and those cherry-picks

01:02:47.680 --> 01:02:52.860
have to come in for
production launch,

01:02:52.860 --> 01:02:55.320
that's where the judgment
counts, both for the developer

01:02:55.320 --> 01:02:56.528
and for the release engineer.

01:03:00.010 --> 01:03:03.020
The tests I have will really
flush out the obvious things.

01:03:03.020 --> 01:03:07.310
But if someone checks in
a new flow for messaging,

01:03:07.310 --> 01:03:09.090
or a new flow for
group update, you're

01:03:09.090 --> 01:03:10.470
not going to catch
up with tests.

01:03:10.470 --> 01:03:11.844
It's going to
pass, but when it's

01:03:11.844 --> 01:03:14.040
all together,
integrated the app,

01:03:14.040 --> 01:03:17.390
and you decide to take that
in week three of the release

01:03:17.390 --> 01:03:22.044
process, your tools
aren't going to catch it.

01:03:22.044 --> 01:03:23.210
That's where Karma comes in.

01:03:23.210 --> 01:03:24.980
And that's where you say,
you should have known better.

01:03:24.980 --> 01:03:27.390
Why did you even think you
could rewrite the messaging

01:03:27.390 --> 01:03:30.840
stack in week two of a release
cycle that somehow got by us,

01:03:30.840 --> 01:03:33.430
checked in, and
derailed the release.

01:03:33.430 --> 01:03:37.120
So it's more at a higher
level where Karma comes in.

01:03:37.120 --> 01:03:40.740
AUDIENCE: So the input I
take from that-- basically,

01:03:40.740 --> 01:03:42.850
just in the theory
of [INAUDIBLE],

01:03:42.850 --> 01:03:45.450
in a situation like that where
we have to update production

01:03:45.450 --> 01:03:48.410
every week or so, we're
always going to be behind

01:03:48.410 --> 01:03:51.860
on the quality of tests we
are putting into our system.

01:03:51.860 --> 01:03:54.730
So maybe we should
maybe concentrate more

01:03:54.730 --> 01:03:57.510
on exploring that
issue, as opposed

01:03:57.510 --> 01:04:00.170
to putting stars on engineers.

01:04:00.170 --> 01:04:03.400
Because it doesn't matter
how good the engineer is.

01:04:03.400 --> 01:04:06.370
If there's no test, he
won't be able to pinpoint

01:04:06.370 --> 01:04:08.440
all the problems, especially
if it's a huge code

01:04:08.440 --> 01:04:11.140
base, or a Legacy code
base, or whatever.

01:04:11.140 --> 01:04:16.345
So just in terms of the
[INAUDIBLE] and practices.

01:04:16.345 --> 01:04:17.720
CHUCK ROSSI: Yeah,
like I said, I

01:04:17.720 --> 01:04:22.850
don't want Karma to be used as
a-- everyone's losing stars.

01:04:22.850 --> 01:04:26.580
I don't think there's
anyone left with four stars.

01:04:26.580 --> 01:04:28.956
When you move like this, things
aren't going to go right.

01:04:28.956 --> 01:04:30.913
You're not born with this
operational awareness

01:04:30.913 --> 01:04:32.360
that's going to get you through.

01:04:32.360 --> 01:04:36.810
What we're really looking for
is really a neglect thing.

01:04:36.810 --> 01:04:38.080
You didn't follow process.

01:04:38.080 --> 01:04:41.350
You didn't really
think about this.

01:04:41.350 --> 01:04:44.050
You took off your
operational hat long enough

01:04:44.050 --> 01:04:45.270
to make this mess.

01:04:45.270 --> 01:04:46.870
AUDIENCE: But as
you noted yourself,

01:04:46.870 --> 01:04:49.150
the neglect thing
you're able to catch,

01:04:49.150 --> 01:04:50.780
because these are
obvious issues.

01:04:50.780 --> 01:04:51.780
CHUCK ROSSI: Not always.

01:04:51.780 --> 01:04:55.600
AUDIENCE: It's complicated new
features, which didn't roll out

01:04:55.600 --> 01:04:58.350
in your testing framework yet.

01:04:58.350 --> 01:05:00.050
This is what cause you grief.

01:05:00.050 --> 01:05:03.190
CHUCK ROSSI: Yeah and that's
where-- generally, those

01:05:03.190 --> 01:05:06.260
are caught because they're big
enough where they'll escalate,

01:05:06.260 --> 01:05:08.020
where we'll try to
discuss that and do

01:05:08.020 --> 01:05:10.140
the analysis of the big feature.

01:05:10.140 --> 01:05:11.190
We've had it many times.

01:05:11.190 --> 01:05:12.898
A big feature will
come in late, but it's

01:05:12.898 --> 01:05:15.080
really important, can't
wait the four weeks.

01:05:15.080 --> 01:05:16.850
The press release
is already set up.

01:05:16.850 --> 01:05:18.430
And that's not a Karma event.

01:05:18.430 --> 01:05:19.240
That's like--

01:05:19.240 --> 01:05:20.239
AUDIENCE: Yeah, exactly.

01:05:20.239 --> 01:05:22.940
That's what I'm trying to say.

01:05:22.940 --> 01:05:27.170
If you have a good suite of
tests to catch every change,

01:05:27.170 --> 01:05:30.250
all they neglect thing is going
to be caught before it even

01:05:30.250 --> 01:05:31.190
gets into the master.

01:05:36.210 --> 01:05:38.200
AUDIENCE: Hi, I am
Ramon from Twitter.

01:05:38.200 --> 01:05:40.370
I had a question
about the desktop web.

01:05:40.370 --> 01:05:44.880
So one of those scenarios we
hit often is more releases.

01:05:44.880 --> 01:05:50.862
We want to do more releases,
but our roll back process

01:05:50.862 --> 01:05:52.570
takes a long time to
roll back a release.

01:05:52.570 --> 01:05:55.153
And so that was the reason that
we don't do a lot of releases.

01:05:55.153 --> 01:05:56.800
So can you talk
a little bit more

01:05:56.800 --> 01:05:58.780
about how your roll
back process works

01:05:58.780 --> 01:06:01.620
and how much time it
usually takes to roll back

01:06:01.620 --> 01:06:03.760
if you already rolled
out to everyone?

01:06:03.760 --> 01:06:04.590
CHUCK ROSSI: Yeah.

01:06:04.590 --> 01:06:06.220
Obviously, on mobile, we
can't have this discussion

01:06:06.220 --> 01:06:07.780
because that's firing bullets.

01:06:07.780 --> 01:06:09.530
And bullets don't come back.

01:06:09.530 --> 01:06:11.792
So on web, it's a
much better situation.

01:06:11.792 --> 01:06:13.250
And we don't really
have this issue

01:06:13.250 --> 01:06:15.820
because-- think of
the number of machines

01:06:15.820 --> 01:06:17.440
it takes to serve facebook.com.

01:06:17.440 --> 01:06:20.340
It's a big number.

01:06:20.340 --> 01:06:22.590
When we push the
button to say, go.

01:06:22.590 --> 01:06:26.920
We've decided we're going to
go 100%, that binaries that

01:06:26.920 --> 01:06:30.620
is facebook.com is out in about
'15 minutes, which I've said

01:06:30.620 --> 01:06:32.580
is both awesome and terrifying.

01:06:32.580 --> 01:06:34.080
It's awesome, because
in 15 minutes,

01:06:34.080 --> 01:06:35.320
the fleet is on new code.

01:06:35.320 --> 01:06:37.720
It's terrifying because
if we've made a mistake,

01:06:37.720 --> 01:06:40.030
there's no time to
pull that red lever.

01:06:40.030 --> 01:06:42.410
The bus is already
going off the cliff.

01:06:42.410 --> 01:06:44.340
So what we do,
though, is obviously,

01:06:44.340 --> 01:06:48.980
we keep the previous
binaries on the fleet.

01:06:48.980 --> 01:06:51.900
So for us, it's a simple
matter of, oh, this looks bad.

01:06:51.900 --> 01:06:53.070
We hit another button.

01:06:53.070 --> 01:06:55.990
And the send command runs,
and it just symlinks back

01:06:55.990 --> 01:07:03.590
to the-- in our case right now,
it loads the previous byte code

01:07:03.590 --> 01:07:04.780
and brings up the servers.

01:07:04.780 --> 01:07:07.630
Now, that is not a pleasant
experience for the end user.

01:07:07.630 --> 01:07:09.800
It's a bit like
pulling the red cord.

01:07:09.800 --> 01:07:12.530
There's going to be a bump.

01:07:12.530 --> 01:07:14.050
And there will be
some disconnects.

01:07:14.050 --> 01:07:18.180
But we will, within 10 minutes,
revert that to new code.

01:07:18.180 --> 01:07:19.920
Now, the thing that
also makes this work

01:07:19.920 --> 01:07:22.650
is-- I make this very
clear to every developer.

01:07:22.650 --> 01:07:26.560
You will never, ever run in
a homogeneous environment

01:07:26.560 --> 01:07:27.530
on the front end.

01:07:27.530 --> 01:07:28.380
All right?

01:07:28.380 --> 01:07:30.782
So if you make that clear,
you don't have issues like,

01:07:30.782 --> 01:07:32.240
well, we've already
rolled forward.

01:07:32.240 --> 01:07:34.656
We can't roll back because
that new API blah, blah, blah--

01:07:34.656 --> 01:07:37.230
never happens, cannot happen.

01:07:37.230 --> 01:07:37.730
With

01:07:37.730 --> 01:07:40.271
a fleet as big as we have, with
as many backend systems as we

01:07:40.271 --> 01:07:42.877
have, you cannot guarantee
you will ever talk.

01:07:42.877 --> 01:07:45.210
You've always got to be forward
and backward compatible.

01:07:45.210 --> 01:07:47.080
If there's some
issue, there's always

01:07:47.080 --> 01:07:50.059
a gatekeeper that can be
turned on or off that turns

01:07:50.059 --> 01:07:52.600
on or off that new code that's
sitting out in production that

01:07:52.600 --> 01:07:54.190
may or may not be there yet.

01:07:54.190 --> 01:07:55.690
So we've really
solved that problem.

01:07:55.690 --> 01:07:57.564
In fact, if you want to
talk more about that,

01:07:57.564 --> 01:08:00.170
the guy who helped write that
system is Amir, in the back,

01:08:00.170 --> 01:08:03.170
is the a deployment
expert from Facebook.

01:08:03.170 --> 01:08:04.910
He can tell you
how that tool works

01:08:04.910 --> 01:08:08.720
to deal with getting that
code out and back in so fast.

01:08:08.720 --> 01:08:11.400
AUDIENCE: So I'm John
Oden, formerly Mozilla,

01:08:11.400 --> 01:08:13.104
and just recently
moved to Hortonworks.

01:08:13.104 --> 01:08:14.562
So when we were at
Mozilla, we were

01:08:14.562 --> 01:08:16.979
doing a lot of mobile stuff,
so a lot of these diagrams--

01:08:16.979 --> 01:08:18.149
I was like, oh yeah.

01:08:18.149 --> 01:08:21.660
And I want to plus one to thing
you said about a command line

01:08:21.660 --> 01:08:25.319
programmatic way to be able
to upload apps to the store.

01:08:25.319 --> 01:08:27.800
That was a recurring pain
in the blank-blank-blank

01:08:27.800 --> 01:08:29.279
having to do this by hand.

01:08:29.279 --> 01:08:33.550
The fact that we have to
upload it manually these days--

01:08:33.550 --> 01:08:35.569
I mean, I'm all for
secure encryption stuff.

01:08:35.569 --> 01:08:39.733
Is there anyone here who has
a sway in either the Google

01:08:39.733 --> 01:08:42.880
app or Apple app who can
make this happen, please?

01:08:42.880 --> 01:08:44.886
MALE SPEAKER: We
will make it happen.

01:08:44.886 --> 01:08:46.760
AUDIENCE: Programmatic,
sure encryption sign,

01:08:46.760 --> 01:08:49.390
whatever, but can we make
it that we can hit a button?

01:08:49.390 --> 01:08:52.660
And then I would ask for a
version of it, which is also,

01:08:52.660 --> 01:08:55.649
if we upload something, I know
it's like, then it's a bullet

01:08:55.649 --> 01:08:56.970
and users can start picking it.

01:08:56.970 --> 01:09:00.399
If we find out early
there's a problem,

01:09:00.399 --> 01:09:04.000
we've many times wanted to
go and hit an abort button,

01:09:04.000 --> 01:09:06.450
take down the thing
we just uploaded.

01:09:06.450 --> 01:09:08.710
And the only way we
found we could take down

01:09:08.710 --> 01:09:11.660
was to go find the
previous change set,

01:09:11.660 --> 01:09:15.255
generate a new build with a
newer number and upload a new.

01:09:15.255 --> 01:09:16.630
Whereas, if we
could go say there

01:09:16.630 --> 01:09:19.609
was a previous
one already there.

01:09:19.609 --> 01:09:21.200
We just upload a new one.

01:09:21.200 --> 01:09:24.300
Abandon the new one, and let
people see the previous one.

01:09:24.300 --> 01:09:25.550
Something like that pragmatic.

01:09:25.550 --> 01:09:27.819
So there's my two wishes.

01:09:27.819 --> 01:09:30.050
CHUCK ROSSI: Yeah, I
can't stress enough.

01:09:30.050 --> 01:09:31.330
It's not reasonable.

01:09:31.330 --> 01:09:33.080
One of my engineers,
Brad's, in the back.

01:09:33.080 --> 01:09:35.890
And he literally stayed up till
2:00 or 3:00 in the morning

01:09:35.890 --> 01:09:39.750
just fighting, pushing the
stupid upload button on a web

01:09:39.750 --> 01:09:43.898
page to upload the number
one app in the world,

01:09:43.898 --> 01:09:45.439
worth billions of
dollars of revenue,

01:09:45.439 --> 01:09:47.450
to try to make
this thing get out.

01:09:47.450 --> 01:09:49.149
And we can't do that.

01:09:49.149 --> 01:09:51.405
That's just silly.

01:09:51.405 --> 01:09:53.279
BORIS DEBIC: Chuck,
thank you very much for--

01:09:53.279 --> 01:09:54.529
CHUCK ROSSI: Thank you, Boris.

01:09:54.529 --> 01:09:56.260
BORIS DEBIC: --the keynote.

01:09:56.260 --> 01:09:58.400
We'll have much more
talking during the day.

01:09:58.400 --> 01:10:00.610
And we're going to move
on with the program.

01:10:00.610 --> 01:10:02.160
Bram.

