WEBVTT
Kind: captions
Language: en

00:00:00.520 --> 00:00:02.550
So this is phase one.

00:00:02.550 --> 00:00:05.040
The steps we have here
are the following.

00:00:05.040 --> 00:00:08.130
First of all, we're going to
decompose the system into components.

00:00:08.130 --> 00:00:11.350
Secondly, we're going to
allocate responsibilities.

00:00:11.350 --> 00:00:15.710
Those include event handling,
the delivery of the percepts and

00:00:15.710 --> 00:00:21.490
the guaranteeing of the properties
that the system is required to have.

00:00:21.490 --> 00:00:24.980
And third, we're going to specify
the component properties as OCL and

00:00:24.980 --> 00:00:27.110
variants, and preimposed conditions.

00:00:27.110 --> 00:00:32.220
&gt;&gt; So at this point in time can we
assume components to be objects,

00:00:32.220 --> 00:00:40.380
when we're using OCL the syntax looks
like we're referring to objects.

00:00:40.380 --> 00:00:42.850
&gt;&gt; So that's a good question.

00:00:42.850 --> 00:00:45.060
And it doesn't have an easy answer.

00:00:45.060 --> 00:00:47.080
Let me break it into pieces.

00:00:47.080 --> 00:00:52.130
So we're using to specify
architecture we're using UML and

00:00:52.130 --> 00:00:55.540
OCL which are object oriented notations.

00:00:55.540 --> 00:00:56.880
Okay so that's one answer.

00:00:56.880 --> 00:00:58.650
The other answer is that

00:01:00.030 --> 00:01:04.580
object oriented programming languages
have other features like inheritance.

00:01:04.580 --> 00:01:08.480
Okay and delegation of messages and so

00:01:08.480 --> 00:01:11.280
on, which we're not going to
be involved with here.

00:01:11.280 --> 00:01:12.970
We'll get to those later
when we talk about

00:01:12.970 --> 00:01:15.310
actually designing the objects, okay?

00:01:15.310 --> 00:01:19.010
But for now, we're thinking at
the architectural level and

00:01:19.010 --> 00:01:24.350
we're going to think of these components
insofar as UML and OCL are concerned.

00:01:24.350 --> 00:01:24.850
&gt;&gt; Okay.

