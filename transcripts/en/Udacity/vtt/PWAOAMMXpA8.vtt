WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:04.570
So the directory is a distributed
structure across the cores.

00:00:04.570 --> 00:00:08.500
It's not centralized in one place,
like the bus.

00:00:08.500 --> 00:00:12.730
So not all requests have to go to
the same part of the directory.

00:00:12.730 --> 00:00:16.830
Each slice of the directory
will serve a set of blocks,

00:00:16.830 --> 00:00:21.290
where a slice of the directory is the
part of the directory that is next to

00:00:21.290 --> 00:00:22.740
a particular core.

00:00:22.740 --> 00:00:25.740
And that means that different blocks

00:00:25.740 --> 00:00:29.240
will be served by slices that
are in different places.

00:00:29.240 --> 00:00:32.692
And that's how we achieve a higher
bandwidth because really each slice

00:00:32.692 --> 00:00:37.310
could operate independently because
it serves a disjoint set of blocks.

00:00:37.310 --> 00:00:38.880
What does a slice do?

00:00:38.880 --> 00:00:42.890
It has one entry for
each block served by that slice.

00:00:42.890 --> 00:00:48.630
And the entry for a block tracks
which caches in the system

00:00:48.630 --> 00:00:52.410
have this block in an non-invalid state,
of course,

00:00:52.410 --> 00:00:56.540
because the block in an invalid state
is like it's not in that cache at all.

00:00:56.540 --> 00:00:58.520
And the order of accesses for

00:00:58.520 --> 00:01:03.153
a particular block is determined
by the home slice for that block.

00:01:03.153 --> 00:01:05.892
That's the slice of the directory
that has the entry for this block.

00:01:05.892 --> 00:01:09.570
We call that the home
slice of the directory.

00:01:09.570 --> 00:01:12.810
So pretty much,
accesses that go to the same block

00:01:12.810 --> 00:01:17.060
are almost serialized in how
they can access their entry.

00:01:17.060 --> 00:01:20.130
And the order in which that happens

00:01:20.130 --> 00:01:24.320
is the order in which the accesses
are officially said to happen.

00:01:24.320 --> 00:01:26.400
Note that with a directory protocol,

00:01:26.400 --> 00:01:30.800
the caches still have the same
states they did with snooping.

00:01:30.800 --> 00:01:34.590
It's just now when we
send a request to read or

00:01:34.590 --> 00:01:38.080
write, that request no
longer goes on a bus.

00:01:38.080 --> 00:01:41.220
It gets sent via our
network to the directory.

00:01:41.220 --> 00:01:45.610
So we can have many requests
traveling to their individual slices.

00:01:45.610 --> 00:01:47.930
And then the directory
figures out what to do.

