WEBVTT
Kind: captions
Language: en

00:00:06.314 --> 00:00:07.230
JAKE ARCHIBALD: Hello.

00:00:09.790 --> 00:00:15.446
I've been wanting to try
this for a bit-- 6 billion.

00:00:15.446 --> 00:00:17.747
[APPLAUSE]

00:00:17.747 --> 00:00:19.830
OK, so I've been watching
that work in the keynote

00:00:19.830 --> 00:00:20.330
all morning.

00:00:20.330 --> 00:00:21.750
I didn't think it
actually worked.

00:00:21.750 --> 00:00:22.854
OK, just say a big number.

00:00:22.854 --> 00:00:23.770
People start clapping.

00:00:23.770 --> 00:00:25.030
That's terrific.

00:00:25.030 --> 00:00:26.910
OK, excellent, it
doesn't even have

00:00:26.910 --> 00:00:29.670
to have a unit or anything.

00:00:29.670 --> 00:00:30.670
ALEX RUSSELL: Hi, hello.

00:00:30.670 --> 00:00:32.509
I don't have a big number.

00:00:32.509 --> 00:00:35.020
He's Jake Archibald from the
Chrome Developer Relations

00:00:35.020 --> 00:00:35.520
team.

00:00:35.520 --> 00:00:37.478
JAKE ARCHIBALD: And he
is Alex Russell from off

00:00:37.478 --> 00:00:39.450
of the full-fat Chrome team.

00:00:39.450 --> 00:00:41.160
ALEX RUSSELL: Who
are you calling fat?

00:00:41.160 --> 00:00:44.450
We've been working on a new
web standard that gives you

00:00:44.450 --> 00:00:47.400
control over the network
stack in the browser.

00:00:47.400 --> 00:00:49.875
It opens a bunch of new doors
and exciting possibilities.

00:00:49.875 --> 00:00:51.225
And we're excited about them.

00:00:51.225 --> 00:00:53.100
JAKE ARCHIBALD: Yeah,
yeah, when you navigate

00:00:53.100 --> 00:00:55.932
to a URL in the browser,
a whole lot of stuff

00:00:55.932 --> 00:00:57.890
happens under the hood
deep within the browser.

00:00:57.890 --> 00:01:00.750
And we were going
to kind of show

00:01:00.750 --> 00:01:02.870
a big technical diagram
of how that happened.

00:01:02.870 --> 00:01:07.580
But instead, let's throw
dignity to the wind.

00:01:07.580 --> 00:01:10.920
And we will visit
the Browserlands,

00:01:10.920 --> 00:01:13.890
where over deep within
Interface Valley

00:01:13.890 --> 00:01:15.550
a new process has been created.

00:01:19.670 --> 00:01:21.690
ALEX RUSSELL: We must
create a window object.

00:01:21.690 --> 00:01:24.660
JAKE ARCHIBALD: But from where
should I get the markup, sire?

00:01:24.660 --> 00:01:29.320
ALEX RUSSELL: Travel on
foot toward the Browserlands

00:01:29.320 --> 00:01:30.399
to the HTTP cache.

00:01:30.399 --> 00:01:31.940
JAKE ARCHIBALD:
Shall I take the path

00:01:31.940 --> 00:01:34.010
through the haunted
forest of AppCache, sire?

00:01:34.010 --> 00:01:35.590
ALEX RUSSELL: No, you fool.

00:01:35.590 --> 00:01:37.860
We don't know what
evil lurks there.

00:01:41.280 --> 00:01:45.270
Go straight to the HTTP cache,
and ask the forgetful wizard

00:01:45.270 --> 00:01:46.760
for the materials that you seek.

00:01:46.760 --> 00:01:48.343
JAKE ARCHIBALD: But
what if he doesn't

00:01:48.343 --> 00:01:50.340
have them, because,
say, he forgot?

00:01:50.340 --> 00:01:52.854
He is known for that.

00:01:52.854 --> 00:01:54.270
ALEX RUSSELL: Then
you must travel

00:01:54.270 --> 00:01:58.570
across the Sea of Uncertainty
to the internet, where

00:01:58.570 --> 00:01:59.992
the kittens roam freely.

00:01:59.992 --> 00:02:02.450
JAKE ARCHIBALD: But that is a
treacherous journey, my lord.

00:02:02.450 --> 00:02:05.300
I've seen many
requests never return.

00:02:05.300 --> 00:02:08.170
ALEX RUSSELL: Nevertheless,
that is your quest.

00:02:12.465 --> 00:02:14.310
(WHISPERING) 800
milliseconds later.

00:02:14.310 --> 00:02:16.310
JAKE ARCHIBALD: I've
returned with markup riches

00:02:16.310 --> 00:02:19.630
fresh from the heart
of the internet.

00:02:19.630 --> 00:02:22.180
ALEX RUSSELL: Finally.

00:02:22.180 --> 00:02:24.650
Oh, we don't have
everything we need

00:02:24.650 --> 00:02:26.760
to construct this window object.

00:02:26.760 --> 00:02:30.920
I see here that we
need two cases of CSS,

00:02:30.920 --> 00:02:36.299
an entire silo of
JavaScript, and seven images.

00:02:36.299 --> 00:02:37.840
JAKE ARCHIBALD: Oh,
it's OK, my lord.

00:02:37.840 --> 00:02:39.390
I know the way.

00:02:39.390 --> 00:02:43.540
ALEX RUSSELL: No, no, some of
these are from another domain.

00:02:43.540 --> 00:02:46.385
You must take a different path.

00:02:46.385 --> 00:02:48.260
JAKE ARCHIBALD: And when
that CSS comes back,

00:02:48.260 --> 00:02:50.260
we'll probably find out
there's loads more stuff

00:02:50.260 --> 00:02:53.620
we need to fetch things like
the fonts and extra images.

00:02:53.620 --> 00:02:55.980
And every trip you
make to the internet

00:02:55.980 --> 00:02:57.760
is fraught with uncertainty.

00:02:57.760 --> 00:03:00.600
To go there, you're going for
your connection to the rooter,

00:03:00.600 --> 00:03:04.220
first off, then to the ISP
intermediate proxies, and then

00:03:04.220 --> 00:03:05.255
the destination server.

00:03:05.255 --> 00:03:06.130
You get the response.

00:03:06.130 --> 00:03:09.150
And then, you go back
through all of those things.

00:03:09.150 --> 00:03:13.050
And if any of that is slow, the
user experience will be slow.

00:03:13.050 --> 00:03:17.320
And if any of that fails,
the user experience fails.

00:03:17.320 --> 00:03:20.010
The platform didn't actually
give you any control over this.

00:03:20.010 --> 00:03:23.533
And for us, that
raised some red flags.

00:03:23.533 --> 00:03:26.900
ALEX RUSSELL: Yeah, it really
isn't an extensible place

00:03:26.900 --> 00:03:28.245
to be.

00:03:28.245 --> 00:03:30.620
We believe that the web
should be extensible,

00:03:30.620 --> 00:03:34.020
which is to say that if the
web decides to give you a car,

00:03:34.020 --> 00:03:35.985
it should let you
take it apart, mix it

00:03:35.985 --> 00:03:38.110
with all kinds of other
things, and build something

00:03:38.110 --> 00:03:40.170
truly unique if you want to.

00:03:40.170 --> 00:03:42.570
And we think this is
where AppCache went wrong.

00:03:42.570 --> 00:03:45.680
AppCache used a
declarative manifest format

00:03:45.680 --> 00:03:49.420
that you can control the network
with, but only a little bit.

00:03:49.420 --> 00:03:51.200
It was AppCache's
way or the highway.

00:03:51.200 --> 00:03:53.642
And if you didn't like
it AppCache's way,

00:03:53.642 --> 00:03:54.850
you were sort of out of luck.

00:03:54.850 --> 00:03:56.474
And it was never
quite what you wanted.

00:03:56.474 --> 00:03:57.550
JAKE ARCHIBALD: Mm, yeah.

00:03:57.550 --> 00:03:58.924
Also, it wasn't
really clear what

00:03:58.924 --> 00:04:00.780
behaviors you would
activate and get

00:04:00.780 --> 00:04:03.520
when you added a line
to this manifest format.

00:04:03.520 --> 00:04:07.620
It was basically like a grab
bag full of caching, rooting,

00:04:07.620 --> 00:04:10.920
versioning, but then topped up
with wasps and razor blades.

00:04:10.920 --> 00:04:13.300
And every time you
added a line to this,

00:04:13.300 --> 00:04:16.860
you were reaching inside there
and just pulling something out,

00:04:16.860 --> 00:04:18.360
usually a wasp full
of razor blades.

00:04:21.899 --> 00:04:24.037
ALEX RUSSELL: Yeah, the
problems with AppCache

00:04:24.037 --> 00:04:25.870
are something that I
think you've colorfully

00:04:25.870 --> 00:04:27.380
expounded upon in the past.

00:04:27.380 --> 00:04:30.061
But let's recap very quickly.

00:04:30.061 --> 00:04:35.360
[MUSIC PLAYING]

00:04:35.360 --> 00:04:39.080
Right, so I think we're
all up to date on AppCache.

00:04:39.080 --> 00:04:41.370
And it's kind of a shame
that it didn't work out.

00:04:41.370 --> 00:04:44.130
Because many of the features
inside of the black box that it

00:04:44.130 --> 00:04:48.742
presented are really valuable--
caching, routing, versioning.

00:04:48.742 --> 00:04:50.700
JAKE ARCHIBALD: Yeah,
yeah, it's no coincidence

00:04:50.700 --> 00:04:54.246
that some of the native apps
that I rely on day to day,

00:04:54.246 --> 00:04:55.620
they manage the
network to create

00:04:55.620 --> 00:04:58.780
an offline first experience
where connectivity

00:04:58.780 --> 00:05:00.280
is treated as an enhancement.

00:05:00.280 --> 00:05:02.190
And each app does this
slightly differently

00:05:02.190 --> 00:05:06.417
in a way that is best
for that particular app.

00:05:06.417 --> 00:05:08.250
ALEX RUSSELL: Wait, you
use Twitter offline?

00:05:08.250 --> 00:05:09.916
JAKE ARCHIBALD: Yeah,
yeah, yeah, right.

00:05:09.916 --> 00:05:11.940
So you get into an elevator.

00:05:11.940 --> 00:05:13.407
What do you do?

00:05:13.407 --> 00:05:14.740
ALEX RUSSELL: I talk to someone.

00:05:14.740 --> 00:05:18.160
JAKE ARCHIBALD: Right--
wait, you do what?

00:05:18.160 --> 00:05:20.620
ALEX RUSSELL: I talk
to another human being.

00:05:20.620 --> 00:05:23.810
JAKE ARCHIBALD: OK, so
I am English, right?

00:05:23.810 --> 00:05:26.690
Social engagement in an
enclosed space with nowhere

00:05:26.690 --> 00:05:28.840
to run-- no, no,
no, no, no, no, no.

00:05:28.840 --> 00:05:32.640
No, I hold up my phone
to my face as protection

00:05:32.640 --> 00:05:36.700
from your kind, you
elevator socializers.

00:05:36.700 --> 00:05:37.570
But it's great.

00:05:37.570 --> 00:05:40.310
Because Twitter still opens
even though there's hardly

00:05:40.310 --> 00:05:41.760
any signal in an
elevator, right?

00:05:41.760 --> 00:05:43.710
And it does it really quickly.

00:05:43.710 --> 00:05:46.250
It does offline first
really, really well.

00:05:46.250 --> 00:05:50.640
ALEX RUSSELL: Right, well a new
web standard brings all of that

00:05:50.640 --> 00:05:52.750
to your phone in the web.

00:05:52.750 --> 00:05:54.780
And that new standard
is the ServiceWorker.

00:05:54.780 --> 00:05:55.800
JAKE ARCHIBALD: Yay.

00:05:55.800 --> 00:05:56.550
ALEX RUSSELL: Yay?

00:05:56.550 --> 00:05:59.553
[APPLAUSE]

00:05:59.553 --> 00:06:01.386
JAKE ARCHIBALD: Oh,
that's easy-- brilliant.

00:06:01.386 --> 00:06:03.302
ALEX RUSSELL: I should
have used a big number.

00:06:03.302 --> 00:06:05.570
This is something we've been
working on with Mozilla,

00:06:05.570 --> 00:06:08.030
Samsung, and a load of
other third parties.

00:06:08.030 --> 00:06:11.050
And we've been collaborating
with them for a long time now.

00:06:11.050 --> 00:06:12.800
And we're really
excited about it.

00:06:12.800 --> 00:06:15.789
But enough chat-- let's
see what it actually does.

00:06:15.789 --> 00:06:16.580
JAKE ARCHIBALD: OK.

00:06:22.784 --> 00:06:24.950
ALEX RUSSELL: So here's the
QuizApp from the keynote

00:06:24.950 --> 00:06:26.350
that you might have
seen this morning.

00:06:26.350 --> 00:06:27.600
And it's all built on the web.

00:06:27.600 --> 00:06:30.430
And it has a URL just
like any other website.

00:06:30.430 --> 00:06:32.180
So I like this app a lot.

00:06:32.180 --> 00:06:33.560
I've been using it for a while.

00:06:33.560 --> 00:06:34.560
I'm not very good at it.

00:06:34.560 --> 00:06:37.018
But I'm just going to go ahead
and add it to my home screen

00:06:37.018 --> 00:06:40.020
so that when I relaunch
it, I have a nice shortcut.

00:06:40.020 --> 00:06:41.620
It's QuizApp, yeah, great.

00:06:41.620 --> 00:06:43.370
Oh, hey, it's even got
its own icon there.

00:06:43.370 --> 00:06:44.420
That's pretty great.

00:06:44.420 --> 00:06:47.650
So I'm going to
open that back up.

00:06:47.650 --> 00:06:50.780
And let's see-- cool.

00:06:50.780 --> 00:06:53.060
If I go to the
leader board, I can

00:06:53.060 --> 00:06:55.970
see that Jake is also
playing against me.

00:06:55.970 --> 00:06:58.260
We're both yellow cats, though.

00:06:58.260 --> 00:06:59.060
Anyhow--

00:06:59.060 --> 00:07:01.970
JAKE ARCHIBALD: Hm,
yeah, nice app, buddy.

00:07:01.970 --> 00:07:04.565
But you see, I'm not
really interested in you

00:07:04.565 --> 00:07:06.940
getting the same amount of
points as me or overtaking me.

00:07:06.940 --> 00:07:10.310
So what would happen if
someone were to-- can

00:07:10.310 --> 00:07:11.490
I close all of those?

00:07:11.490 --> 00:07:12.070
ALEX RUSSELL: I guess.

00:07:12.070 --> 00:07:12.945
JAKE ARCHIBALD: Yeah?

00:07:12.945 --> 00:07:15.900
And I'm going to break
your connectivity.

00:07:15.900 --> 00:07:17.900
What are you going to do now?

00:07:17.900 --> 00:07:21.060
ALEX RUSSELL: Well, I guess
I'm just going to keep playing?

00:07:21.060 --> 00:07:22.040
JAKE ARCHIBALD: Oh no.

00:07:24.980 --> 00:07:26.904
So maybe what we should
do at this point-- so

00:07:26.904 --> 00:07:28.320
we've been running
this live demo.

00:07:28.320 --> 00:07:30.225
And we've done it this
morning a few times.

00:07:30.225 --> 00:07:34.190
And that seem to happen like
once out of every five times.

00:07:34.190 --> 00:07:36.190
ALEX RUSSELL: So it is
actually working offline.

00:07:36.190 --> 00:07:37.210
JAKE ARCHIBALD: It is
actually working offline.

00:07:37.210 --> 00:07:37.510
ALEX RUSSELL: Yes.

00:07:37.510 --> 00:07:40.010
JAKE ARCHIBALD: Yeah, pretend
you didn't see that first bit.

00:07:40.010 --> 00:07:42.160
That's great.

00:07:42.160 --> 00:07:43.890
That means the next
demo that we do

00:07:43.890 --> 00:07:45.640
later on in the talk
will definitely work.

00:07:45.640 --> 00:07:46.550
Because this one failed, right?

00:07:46.550 --> 00:07:46.660
ALEX RUSSELL: Absolutely.

00:07:46.660 --> 00:07:49.270
JAKE ARCHIBALD: That's
absolutely brilliant, OK.

00:07:49.270 --> 00:07:51.520
So can you still use
the app in that state?

00:07:51.520 --> 00:07:53.770
ALEX RUSSELL: Yeah, I
just loaded this offline.

00:07:53.770 --> 00:07:55.550
And I'm going to keep going.

00:07:55.550 --> 00:07:59.220
Gorgonzola is a soft cheese
with blue veins in it.

00:07:59.220 --> 00:08:00.549
Yeah, hey, cool, great.

00:08:00.549 --> 00:08:02.340
JAKE ARCHIBALD: And
that worked all offline

00:08:02.340 --> 00:08:03.579
absolutely first time.

00:08:03.579 --> 00:08:04.370
ALEX RUSSELL: Yeah.

00:08:04.370 --> 00:08:04.790
JAKE ARCHIBALD: Brilliant.

00:08:04.790 --> 00:08:05.270
ALEX RUSSELL: I
mean second time.

00:08:05.270 --> 00:08:05.820
JAKE ARCHIBALD:
That's excellent.

00:08:05.820 --> 00:08:06.820
Good to hear, excellent.

00:08:06.820 --> 00:08:08.967
ALEX RUSSELL:
First, second time.

00:08:08.967 --> 00:08:10.550
JAKE ARCHIBALD: So
even though the app

00:08:10.550 --> 00:08:12.480
is an online social
experience, it

00:08:12.480 --> 00:08:14.850
was being protected from
bumps in the road using

00:08:14.850 --> 00:08:15.880
the ServiceWorker.

00:08:15.880 --> 00:08:18.400
Regardless of the connection
state, everything works.

00:08:18.400 --> 00:08:20.740
And it works really fast.

00:08:20.740 --> 00:08:23.351
So let's go back
to the slides here.

00:08:23.351 --> 00:08:26.380
And you want to put your
phone back on online mode.

00:08:26.380 --> 00:08:29.260
So the ServiceWorker spec
is still in development,

00:08:29.260 --> 00:08:32.940
as you can see from the
slightly-- first time,

00:08:32.940 --> 00:08:33.864
it didn't quite work.

00:08:33.864 --> 00:08:36.280
But Chrome and Firefox are hot
on the trail of development

00:08:36.280 --> 00:08:36.780
here.

00:08:36.780 --> 00:08:38.640
This little microsite
will tell you

00:08:38.640 --> 00:08:41.020
the status of various
parts of ServiceWorker.

00:08:41.020 --> 00:08:43.000
And if you're wanting
to play with it today,

00:08:43.000 --> 00:08:44.749
you'll need a copy of
Chrome Canary, which

00:08:44.749 --> 00:08:46.210
is our nightly build.

00:08:46.210 --> 00:08:49.000
You'll also need to enable some
flags, the details of which

00:08:49.000 --> 00:08:50.900
are all on that site.

00:08:50.900 --> 00:08:54.548
Anyway, how did we make this
QuizApp work offline first?

00:08:54.548 --> 00:08:56.173
Well, we started by
registering for one

00:08:56.173 --> 00:08:58.250
of these new
ServiceWorker things

00:08:58.250 --> 00:08:59.915
using just JavaScript
on our page.

00:08:59.915 --> 00:09:02.070
The behavior of
ServiceWorker is defined

00:09:02.070 --> 00:09:06.590
in this resource, which
is just JavaScript.

00:09:06.590 --> 00:09:09.020
ALEX RUSSELL: Right, and by
registering ServiceWorker,

00:09:09.020 --> 00:09:10.910
you kind of set up
a base of operations

00:09:10.910 --> 00:09:12.390
in the kingdom of
ServiceWorkers.

00:09:12.390 --> 00:09:15.200
It's not in Interface Valley.

00:09:15.200 --> 00:09:17.130
And it doesn't have a DOM.

00:09:17.130 --> 00:09:19.020
So it runs on its own thread.

00:09:19.020 --> 00:09:23.110
And once we get it set up, it
can manage requests for pages

00:09:23.110 --> 00:09:25.635
and handle resource
fetches, that sort of thing.

00:09:25.635 --> 00:09:27.010
JAKE ARCHIBALD:
Yes, but first we

00:09:27.010 --> 00:09:28.770
need to get it ready for action.

00:09:28.770 --> 00:09:30.480
So one of the huge
advantages of the web

00:09:30.480 --> 00:09:33.140
is that it doesn't have
an install process.

00:09:33.140 --> 00:09:35.890
You don't need to install a
website in order to use it.

00:09:35.890 --> 00:09:37.740
However, installation
is the point

00:09:37.740 --> 00:09:40.650
that native apps use to get
all the resources so they

00:09:40.650 --> 00:09:42.500
can use them offline.

00:09:42.500 --> 00:09:45.410
So we're going to have our
cake and eat it, right?

00:09:45.410 --> 00:09:47.040
The user is already on the site.

00:09:47.040 --> 00:09:48.530
They're using it uninterrupted.

00:09:48.530 --> 00:09:50.310
But the ServiceWorker,
which is all

00:09:50.310 --> 00:09:53.482
happening in the background,
does have an install process.

00:09:53.482 --> 00:09:55.440
ALEX RUSSELL: Right, and
you get to participate

00:09:55.440 --> 00:09:58.600
in that install process
using the Install event.

00:09:58.600 --> 00:10:01.620
It gets thrown to the
ServiceWorker script, which

00:10:01.620 --> 00:10:04.110
is downloaded and evaluated
the first time the browser sees

00:10:04.110 --> 00:10:05.980
that registration for
the ServiceWorker.

00:10:05.980 --> 00:10:08.120
It's your opportunity
to get everything ready

00:10:08.120 --> 00:10:10.430
before the ServiceWorker
begins to handle navigations

00:10:10.430 --> 00:10:11.580
and control pages.

00:10:11.580 --> 00:10:12.130
JAKE ARCHIBALD:
Yeah, and you get

00:10:12.130 --> 00:10:13.950
to pass a promise
into this function.

00:10:13.950 --> 00:10:15.550
This is an event.waitUntil.

00:10:15.550 --> 00:10:17.980
And that promise will define
the length and success

00:10:17.980 --> 00:10:19.269
of the installation process.

00:10:19.269 --> 00:10:20.810
Because a single
service worker could

00:10:20.810 --> 00:10:22.780
be handling many
connections at once,

00:10:22.780 --> 00:10:25.400
pretty much everything is async.

00:10:25.400 --> 00:10:29.490
To make this easier, promises
arrived in JavaScript in ES6

00:10:29.490 --> 00:10:31.440
largely thanks to this guy here.

00:10:31.440 --> 00:10:32.810
He did a lot of the work.

00:10:32.810 --> 00:10:35.230
And they're already in
Chrome, Firefox, Opera.

00:10:35.230 --> 00:10:39.130
And they're making their
way into Safari and IE.

00:10:39.130 --> 00:10:41.330
ALEX RUSSELL: Right,
so in synchronous code,

00:10:41.330 --> 00:10:43.624
you call a function,
you get a return value,

00:10:43.624 --> 00:10:45.040
and then you do
something with it.

00:10:45.040 --> 00:10:47.140
And if there are errors, you
can handle them with the try

00:10:47.140 --> 00:10:47.890
and catch block.

00:10:47.890 --> 00:10:50.950
But what if this doSomething
method was asynchronous?

00:10:50.950 --> 00:10:53.970
Well, if it returned a promise,
you could do the same stuff.

00:10:53.970 --> 00:10:56.080
The value comes back to
you in the first callback.

00:10:56.080 --> 00:10:58.019
And you can handle
errors in another call

00:10:58.019 --> 00:10:58.810
back if you'd like.

00:10:58.810 --> 00:10:59.890
JAKE ARCHIBALD: So
you can do loads

00:10:59.890 --> 00:11:01.390
more with promises
than just this.

00:11:01.390 --> 00:11:03.829
But to go for it would
require a session of its own.

00:11:03.829 --> 00:11:05.120
And we're not going to do that.

00:11:05.120 --> 00:11:07.780
For the sake of what we're
going to cover today,

00:11:07.780 --> 00:11:10.400
all you need to know is that
if something returns a promise,

00:11:10.400 --> 00:11:13.820
you can put .then at the end
and pass in a success callback

00:11:13.820 --> 00:11:15.090
and a failure callback.

00:11:15.090 --> 00:11:18.430
You can also chain these .thens
together to do async things

00:11:18.430 --> 00:11:19.624
in a sequence.

00:11:19.624 --> 00:11:22.040
And you don't need to provide
both callbacks for each one.

00:11:22.040 --> 00:11:24.350
In fact, if you do .catch
and provide a callback,

00:11:24.350 --> 00:11:28.287
that's exactly the same as .then
with just a failure callback.

00:11:28.287 --> 00:11:30.120
If you want to go into
detail with promises,

00:11:30.120 --> 00:11:31.860
and I recommend
you do, check out

00:11:31.860 --> 00:11:34.160
this article on HTML5 Rocks.

00:11:34.160 --> 00:11:36.070
Every hit that
article gets helps

00:11:36.070 --> 00:11:37.650
me justify my employment here.

00:11:37.650 --> 00:11:41.295
So do please give it a
few refreshes just for me.

00:11:41.295 --> 00:11:43.170
ALEX RUSSELL: (WHISPERING)
He could use them.

00:11:43.170 --> 00:11:46.817
So what do we want to do during
this installation process?

00:11:46.817 --> 00:11:48.400
Well, I guess we
need to do everything

00:11:48.400 --> 00:11:52.310
that we hope is going to be
done by the time our application

00:11:52.310 --> 00:11:54.420
gets started again, right?

00:11:54.420 --> 00:11:56.865
So because ServiceWorkers
install asynchronously,

00:11:56.865 --> 00:11:58.740
it's not preventing the
user from interacting

00:11:58.740 --> 00:11:59.840
with your site.

00:11:59.840 --> 00:12:01.780
So you can deploy
all the troops.

00:12:01.780 --> 00:12:04.250
This is the perfect time
to deal with the internet

00:12:04.250 --> 00:12:05.280
and uncertainty.

00:12:05.280 --> 00:12:08.150
And you can fetch everything
you need right there.

00:12:08.150 --> 00:12:10.170
And then, when you
get all the resources

00:12:10.170 --> 00:12:12.860
that you needed, send them
back to your data storage area,

00:12:12.860 --> 00:12:14.700
the data keep.

00:12:14.700 --> 00:12:17.390
The ServiceWorker has access
to the usual data stores

00:12:17.390 --> 00:12:21.900
like IndexedDB and a file system
API, but unfortunately not

00:12:21.900 --> 00:12:22.900
local storage.

00:12:22.900 --> 00:12:24.816
JAKE ARCHIBALD: Well,
you say "unfortunately,"

00:12:24.816 --> 00:12:27.110
but yeah, local
storage is synchronous.

00:12:27.110 --> 00:12:29.040
And reading from
disk synchronously

00:12:29.040 --> 00:12:30.500
is just a terrible idea.

00:12:30.500 --> 00:12:33.170
It was a real mistake
in the web platform

00:12:33.170 --> 00:12:35.440
that we have the API like that.

00:12:35.440 --> 00:12:38.160
Think about when
you're driving, and you

00:12:38.160 --> 00:12:40.660
get an itch on your arm.

00:12:40.660 --> 00:12:41.950
And it's fine, right?

00:12:41.950 --> 00:12:44.680
Because you can drive, and
you'll scratch your arm,

00:12:44.680 --> 00:12:46.270
and everything's OK.

00:12:46.270 --> 00:12:48.510
That's because human
beings are sort

00:12:48.510 --> 00:12:49.920
of asynchronous by default.

00:12:49.920 --> 00:12:52.920
We can do many things at once.

00:12:52.920 --> 00:12:56.250
One thing that humans do
which is largely synchronous

00:12:56.250 --> 00:12:58.340
is a sneeze.

00:12:58.340 --> 00:13:00.450
So once again, if
you're driving,

00:13:00.450 --> 00:13:05.590
and you need to sneeze, there's
a moment, a small moment,

00:13:05.590 --> 00:13:08.470
where all you can deal with is
the sneeze and nothing else.

00:13:08.470 --> 00:13:14.100
And you just have to kind of
hope that no one dies really.

00:13:14.100 --> 00:13:17.790
We must avoid code that
is sneezy for that reason.

00:13:17.790 --> 00:13:21.151
ALEX RUSSELL: Yeah, so less
sneezing and no local storage.

00:13:21.151 --> 00:13:22.650
It's banished from
the ServiceWorker

00:13:22.650 --> 00:13:25.010
Kingdom for everyone's safety.

00:13:25.010 --> 00:13:26.230
So don't worry, though.

00:13:26.230 --> 00:13:28.650
We have added a new
type of data storage

00:13:28.650 --> 00:13:31.950
to the platform to help you deal
with these sorts of resources.

00:13:31.950 --> 00:13:36.170
The Cache API lets you store
responses keyed by requests.

00:13:36.170 --> 00:13:40.555
It's like the HTTP cache, except
it's unique to your origin.

00:13:40.555 --> 00:13:42.550
And it's completely
programmable.

00:13:42.550 --> 00:13:45.580
Things are only added, removed,
or updated from these caches

00:13:45.580 --> 00:13:48.380
when you add, remove,
or update them.

00:13:48.380 --> 00:13:51.190
So in this instance, we're going
to create a named cache called

00:13:51.190 --> 00:13:52.190
Static-v1.

00:13:52.190 --> 00:13:54.680
And then, we're going to add
the files that we want to it.

00:13:54.680 --> 00:13:56.346
They can be from other
origins, so don't

00:13:56.346 --> 00:13:58.510
worry if you've put
resources out on the CDN.

00:13:58.510 --> 00:14:00.520
For the QuizApp, we
wanted every resource

00:14:00.520 --> 00:14:03.510
that it needs to display
to be in this cache--

00:14:03.510 --> 00:14:07.630
all the HTML, the CSS, the
JavaScript, and the images.

00:14:07.630 --> 00:14:10.630
JAKE ARCHIBALD: Yeah, and if
my slides change-- come on.

00:14:10.630 --> 00:14:13.870
Right, so the methods for doing
all of this, the create method

00:14:13.870 --> 00:14:16.020
and the add method,
they return promises.

00:14:16.020 --> 00:14:18.950
So they're ideal for passing
to this event.waitUntil method.

00:14:18.950 --> 00:14:22.130
So if any of these items in the
cache, if they fail to cache,

00:14:22.130 --> 00:14:23.370
the promise will reject.

00:14:23.370 --> 00:14:25.741
And therefore, our
installation rejects as well.

00:14:25.741 --> 00:14:27.490
And if that happens,
don't worry about it.

00:14:27.490 --> 00:14:29.300
You will get another
shot at it later on.

00:14:29.300 --> 00:14:31.320
But that means if
the install succeeds,

00:14:31.320 --> 00:14:32.980
then we know we
have these items.

00:14:32.980 --> 00:14:34.030
They're our dependencies.

00:14:34.030 --> 00:14:36.620
They're our installation
dependencies.

00:14:36.620 --> 00:14:39.590
So once installation
completes, the ServiceWorker

00:14:39.590 --> 00:14:42.990
will start
controlling new pages.

00:14:42.990 --> 00:14:46.760
So back in the Browserlands,
deep within Interface Valley,

00:14:46.760 --> 00:14:49.104
a new tab opens.

00:14:49.104 --> 00:14:51.145
ALEX RUSSELL: We must
create a new window object.

00:14:51.145 --> 00:14:53.900
JAKE ARCHIBALD: But from where
shall I get the markup, sire?

00:14:53.900 --> 00:14:57.260
ALEX RUSSELL: I don't know.

00:14:57.260 --> 00:15:00.550
Journey to our forces in
the ServiceWorker Kingdom.

00:15:00.550 --> 00:15:02.650
They'll know how to deal
with this conundrum.

00:15:02.650 --> 00:15:05.110
JAKE ARCHIBALD: And that
services as a Fetch event.

00:15:05.110 --> 00:15:07.290
You'll get one of these
for every page request

00:15:07.290 --> 00:15:08.730
within the ServiceWorker scope.

00:15:08.730 --> 00:15:11.990
But you'll also get it for every
request created by those pages.

00:15:11.990 --> 00:15:14.510
So the CSS, the
JavaScripts, the images,

00:15:14.510 --> 00:15:17.550
XHR fonts all go through
the ServiceWorker,

00:15:17.550 --> 00:15:20.234
even if those requests
are to other domains.

00:15:20.234 --> 00:15:22.400
ALEX RUSSELL: Right, and
you get as much information

00:15:22.400 --> 00:15:25.350
about those requests as
we can safely give you.

00:15:25.350 --> 00:15:28.440
But the really fun part is
being able to hijack the request

00:15:28.440 --> 00:15:30.660
and provide your own response.

00:15:30.660 --> 00:15:33.550
All you need to do is call the
respondWith method of the event

00:15:33.550 --> 00:15:36.530
and provide a response object or
a promise that will eventually

00:15:36.530 --> 00:15:38.390
resolve to a response object.

00:15:38.390 --> 00:15:40.810
You have absolute freedom
in how you do that.

00:15:40.810 --> 00:15:43.340
It's like having a
completely programmable proxy

00:15:43.340 --> 00:15:44.539
right there on the client.

00:15:44.539 --> 00:15:46.330
JAKE ARCHIBALD: Right,
so at your disposal,

00:15:46.330 --> 00:15:48.920
you have information
about the current request

00:15:48.920 --> 00:15:51.192
like the headers,
the URL, et cetera.

00:15:51.192 --> 00:15:52.650
You have access to
the data stores,

00:15:52.650 --> 00:15:56.680
so IDB file system and this
really helpful Cache API.

00:15:56.680 --> 00:15:58.180
You also have access
to Fetch, which

00:15:58.180 --> 00:16:00.300
will take a URL or
a request object.

00:16:00.300 --> 00:16:02.330
And it'll give you a
promise for a response.

00:16:02.330 --> 00:16:04.860
And it doesn't have to be
the same request that you're

00:16:04.860 --> 00:16:06.526
currently handling
in the ServiceWorker.

00:16:06.526 --> 00:16:09.000
It can be to
anywhere on the web.

00:16:09.000 --> 00:16:10.480
We've also got
event.default, which

00:16:10.480 --> 00:16:13.760
is a nice helper for just doing
what the browser would normally

00:16:13.760 --> 00:16:15.290
do in this instance.

00:16:15.290 --> 00:16:18.469
But you can also create
responses just manually

00:16:18.469 --> 00:16:19.760
using the response constructor.

00:16:19.760 --> 00:16:22.115
And you can pass in
text like we have here,

00:16:22.115 --> 00:16:26.347
or you can also pass in a
blob or an array buffer.

00:16:26.347 --> 00:16:28.430
ALEX RUSSELL: And I think
the best part about this

00:16:28.430 --> 00:16:31.380
is that you don't
have to pick just one.

00:16:31.380 --> 00:16:35.180
You can fall back from one
response type to another.

00:16:35.180 --> 00:16:37.280
Or you can even race
multiple requests

00:16:37.280 --> 00:16:38.995
across the network
to the local disk.

00:16:38.995 --> 00:16:40.370
Basically, you
can do whatever it

00:16:40.370 --> 00:16:43.080
is that you want to do that's
best for your application.

00:16:43.080 --> 00:16:45.900
So for the QuizApp, we
handled most requests

00:16:45.900 --> 00:16:50.607
by responding with something
that matches from the cache.

00:16:50.607 --> 00:16:52.690
Not everything has a
matching cache entry, though,

00:16:52.690 --> 00:16:55.630
such as posting answers
or analytics pings.

00:16:55.630 --> 00:16:58.560
So for those, we catch
things without a match.

00:16:58.560 --> 00:17:00.324
And then, we go to
the network instead.

00:17:00.324 --> 00:17:01.740
JAKE ARCHIBALD:
So that would work

00:17:01.740 --> 00:17:04.900
for the CSS, the JavaScript,
HTML, the image and things,

00:17:04.900 --> 00:17:07.640
assets that would
only change shape

00:17:07.640 --> 00:17:09.979
if we were making like a
new revision to the app,

00:17:09.979 --> 00:17:12.579
if we were sort of releasing
a new version of it.

00:17:12.579 --> 00:17:14.710
And there are many
exceptions to this.

00:17:14.710 --> 00:17:17.109
In our case, such as the
leader board that you saw,

00:17:17.109 --> 00:17:20.099
we wouldn't want to cache the
leader board as installation

00:17:20.099 --> 00:17:22.390
and then just always serve
it from the cache like this.

00:17:22.390 --> 00:17:23.639
Because it would never update.

00:17:23.639 --> 00:17:26.244
And it's a resource that's
going to constantly update.

00:17:26.244 --> 00:17:28.369
ALEX RUSSELL: Right, so
let's do something slightly

00:17:28.369 --> 00:17:30.280
different for the
leader board requests.

00:17:30.280 --> 00:17:34.140
First, we're going to parse
the URL from the ServiceWorker

00:17:34.140 --> 00:17:36.350
and the URL from the request.

00:17:36.350 --> 00:17:38.410
The URL constructor that
you're looking at there

00:17:38.410 --> 00:17:40.340
is fairly new in
the web platform.

00:17:40.340 --> 00:17:43.270
But it breaks up URLs into
their component parts,

00:17:43.270 --> 00:17:46.840
so no more nasty string
munging to try to match a URL.

00:17:46.840 --> 00:17:48.920
If the request URL
is to the same origin

00:17:48.920 --> 00:17:53.100
as our ServiceWorker, and
the path is leaderboard.json,

00:17:53.100 --> 00:17:56.030
we're going to defer handling
to some other method.

00:17:56.030 --> 00:17:57.702
So what should that method do?

00:17:57.702 --> 00:17:59.910
JAKE ARCHIBALD: So it's
really tempting at this point

00:17:59.910 --> 00:18:02.670
to flip things over
and go network first.

00:18:02.670 --> 00:18:04.650
Try and get the leader
board from the network.

00:18:04.650 --> 00:18:08.550
And if that fails, get
whatever we have in the cache.

00:18:08.550 --> 00:18:11.706
But that means showing
nothing to the user

00:18:11.706 --> 00:18:13.330
while we wait for
the network to return

00:18:13.330 --> 00:18:15.379
or we wait for it
to eventually fail.

00:18:15.379 --> 00:18:16.920
And that's a really
weird thing to do

00:18:16.920 --> 00:18:21.450
when we know we have information
sitting on the user's device.

00:18:21.450 --> 00:18:23.850
So instead, let's load
the shell of the page

00:18:23.850 --> 00:18:26.425
directly from the ServiceWorker
straight from the cache.

00:18:26.425 --> 00:18:27.530
And then, we're going
to start a spinner

00:18:27.530 --> 00:18:29.730
so it's letting the user
know that we haven't quite

00:18:29.730 --> 00:18:30.941
finished yet.

00:18:30.941 --> 00:18:32.440
And then, we're
going to look to see

00:18:32.440 --> 00:18:35.429
if we've got an old version of
the leader board in the cache.

00:18:35.429 --> 00:18:36.970
And if we do, we're
going to show it.

00:18:36.970 --> 00:18:38.180
And then, we'll
go to the network.

00:18:38.180 --> 00:18:39.700
We'll try and get
a fresher version.

00:18:39.700 --> 00:18:42.660
If we didn't have anything
in the cache, that's OK.

00:18:42.660 --> 00:18:45.280
We'll go just straight
to the network.

00:18:45.280 --> 00:18:47.240
And once the network
returns, well, we'll

00:18:47.240 --> 00:18:48.680
cache that new response.

00:18:48.680 --> 00:18:50.250
And we'll update
the page with it.

00:18:50.250 --> 00:18:52.860
And we'll stop the spinner,
because we're done.

00:18:52.860 --> 00:18:55.770
Now, if we fail to get
something from the cache,

00:18:55.770 --> 00:18:58.434
and the network failed to
return, that's a problem.

00:18:58.434 --> 00:18:59.350
We're showing nothing.

00:18:59.350 --> 00:19:02.000
In that case, we need to
show some kind of an error.

00:19:02.000 --> 00:19:06.360
But if the cache got something,
but the network failed,

00:19:06.360 --> 00:19:08.460
we'll just fail
silently at that point.

00:19:08.460 --> 00:19:11.850
This is a pretty good
offline experience.

00:19:11.850 --> 00:19:14.660
This requires the page
to make two requests, one

00:19:14.660 --> 00:19:17.730
that goes to the cache
only, and another one that

00:19:17.730 --> 00:19:19.660
goes to the network only.

00:19:19.660 --> 00:19:21.410
ALEX RUSSELL: Right,
so how do we do that?

00:19:21.410 --> 00:19:24.410
Back on our page, here
are the two requests.

00:19:24.410 --> 00:19:27.370
They're identical except
the cache request contains

00:19:27.370 --> 00:19:28.170
this magic header.

00:19:28.170 --> 00:19:29.690
It doesn't do
anything by default.

00:19:29.690 --> 00:19:31.689
We're just tagging the request.

00:19:31.689 --> 00:19:33.480
JAKE ARCHIBALD: And we
can pick up that tag

00:19:33.480 --> 00:19:35.070
over in our ServiceWorker.

00:19:35.070 --> 00:19:37.580
So we're going to see if
the request header has

00:19:37.580 --> 00:19:39.480
this magic header
that we applied.

00:19:39.480 --> 00:19:41.600
And if it's there, we're
going to respond just

00:19:41.600 --> 00:19:42.480
with a match from the cache.

00:19:42.480 --> 00:19:43.950
So if there's
nothing in the cache,

00:19:43.950 --> 00:19:45.680
that's going to get
a rejected promise,

00:19:45.680 --> 00:19:47.200
and the request will fail.

00:19:47.200 --> 00:19:49.070
But that's exactly what we want.

00:19:49.070 --> 00:19:50.780
If that header isn't
there, then we'll

00:19:50.780 --> 00:19:53.540
go and get our Static-v1 cache.

00:19:53.540 --> 00:19:55.030
And we're going
to ask it to fetch

00:19:55.030 --> 00:19:56.680
a fresh version of
the leader board

00:19:56.680 --> 00:19:58.040
and store it in the cache.

00:19:58.040 --> 00:19:59.790
And if that completes
successfully,

00:19:59.790 --> 00:20:01.415
we'll also pipe it
back to the browser.

00:20:01.415 --> 00:20:03.040
ALEX RUSSELL: This
is the sort of thing

00:20:03.040 --> 00:20:05.570
that you can't really do
with a non-extensible feature

00:20:05.570 --> 00:20:06.610
like AppCache.

00:20:06.610 --> 00:20:08.450
ServiceWorkers aren't
just a framework

00:20:08.450 --> 00:20:10.430
for building things
offline first.

00:20:10.430 --> 00:20:12.300
They're a series
of tools that you

00:20:12.300 --> 00:20:13.885
can do whatever
you need to with.

00:20:13.885 --> 00:20:16.040
JAKE ARCHIBALD: Yeah,
so I don't know, how

00:20:16.040 --> 00:20:18.320
about poly-filling
a new image format?

00:20:18.320 --> 00:20:19.510
Imagine we could do that.

00:20:19.510 --> 00:20:21.860
If the request is
for an image, we're

00:20:21.860 --> 00:20:23.570
going to make the
default request.

00:20:23.570 --> 00:20:26.810
And if what we get back has
this header, the content

00:20:26.810 --> 00:20:29.230
type for this new
amazing image format,

00:20:29.230 --> 00:20:31.680
then we'll transcode it to
PNG before sending it back

00:20:31.680 --> 00:20:34.080
to the browser to something
that it definitely

00:20:34.080 --> 00:20:35.315
already understands.

00:20:35.315 --> 00:20:37.440
ALEX RUSSELL: OK, OK, but
let's kick it up a notch.

00:20:37.440 --> 00:20:40.150
What about client
side templating?

00:20:40.150 --> 00:20:43.080
You could just import your
favorite templating engine

00:20:43.080 --> 00:20:47.620
and then look for navigation
requests where the URL contains

00:20:47.620 --> 00:20:49.390
/article/.

00:20:49.390 --> 00:20:53.130
Then you can fetch that URL with
.json added to the end instead,

00:20:53.130 --> 00:20:55.970
read it back as JSON, get
a template from the cache

00:20:55.970 --> 00:20:59.890
instead, read the
template as text,

00:20:59.890 --> 00:21:04.430
then serve up a custom response
as HTML once you've transformed

00:21:04.430 --> 00:21:07.510
the template with the JSON using
the templating engine that we

00:21:07.510 --> 00:21:09.150
already imported.

00:21:09.150 --> 00:21:12.280
JAKE ARCHIBALD:
Yeah, OK, or we could

00:21:12.280 --> 00:21:15.560
respond to every image request
with a picture of a kitten

00:21:15.560 --> 00:21:18.798
if, and only if,
it's a Thursday.

00:21:18.798 --> 00:21:19.774
ALEX RUSSELL: Huh.

00:21:19.774 --> 00:21:21.730
[APPLAUSE]

00:21:21.730 --> 00:21:24.580
JAKE ARCHIBALD: I got the clap.

00:21:24.580 --> 00:21:28.100
ALEX RUSSELL: You could even
post messages from your page

00:21:28.100 --> 00:21:29.532
back to the ServiceWorker.

00:21:29.532 --> 00:21:31.240
That makes it trivial
to implement things

00:21:31.240 --> 00:21:33.440
like a safer offline
viewing button.

00:21:33.440 --> 00:21:35.510
It lets you have
the user help you

00:21:35.510 --> 00:21:37.030
decide what they want to cache.

00:21:39.830 --> 00:21:42.044
When we got together and we
designed all these APIs--

00:21:42.044 --> 00:21:43.210
JAKE ARCHIBALD: Not my line.

00:21:43.210 --> 00:21:45.430
Sorry, I thought it
was my line next.

00:21:45.430 --> 00:21:46.330
Do carry on.

00:21:46.330 --> 00:21:47.038
ALEX RUSSELL: Oh.

00:21:50.994 --> 00:21:51.910
When we got together--

00:21:51.910 --> 00:21:53.618
JAKE ARCHIBALD: I like
speaking, you see.

00:21:53.618 --> 00:21:55.940
So it feels really natural
to just talk over you.

00:21:55.940 --> 00:21:58.340
ALEX RUSSELL: Sorry.

00:21:58.340 --> 00:22:02.470
When we got together and
we designed these APIs,

00:22:02.470 --> 00:22:05.250
one of the things we didn't
want to do was weld them down.

00:22:05.250 --> 00:22:07.050
It's a mistake
that AppCache made.

00:22:07.050 --> 00:22:09.410
It tried to be the shortcut
before really understanding

00:22:09.410 --> 00:22:10.820
what the destination was.

00:22:10.820 --> 00:22:14.060
So instead, what we're doing is
providing low level tools that

00:22:14.060 --> 00:22:16.670
give you the flexibility to
do lots of exciting things,

00:22:16.670 --> 00:22:18.697
hopefully stuff we
haven't even imagined yet.

00:22:18.697 --> 00:22:21.030
JAKE ARCHIBALD: And what's
more, if we look at something

00:22:21.030 --> 00:22:23.480
like the AppCache
manifest format,

00:22:23.480 --> 00:22:25.900
if you reach into
the AppCache grab bag

00:22:25.900 --> 00:22:28.600
and end up with a waspy hand,
which you will because it's

00:22:28.600 --> 00:22:31.900
terrible, there's not a lot you
can do other than go and read

00:22:31.900 --> 00:22:35.150
the specification and try and
find out why all of that stuff

00:22:35.150 --> 00:22:38.120
happened, or convince yourself
that it's actually a browser

00:22:38.120 --> 00:22:39.070
bug.

00:22:39.070 --> 00:22:41.640
If the ServiceWorker does
something you don't expect,

00:22:41.640 --> 00:22:44.950
if it does something you
don't understand, what then?

00:22:44.950 --> 00:22:46.160
Well, it's JavaScript, right?

00:22:46.160 --> 00:22:47.850
We know how to debug JavaScript.

00:22:47.850 --> 00:22:50.415
Even at this early stage,
you can go to Chrome Inspect,

00:22:50.415 --> 00:22:51.790
and you'll see
the ServiceWorkers

00:22:51.790 --> 00:22:53.922
there right next to
the shared workers.

00:22:53.922 --> 00:22:55.130
But you can dive even deeper.

00:22:55.130 --> 00:22:57.385
You can go into
ServiceWorker in Tunnels,

00:22:57.385 --> 00:22:59.510
which will show you that
all the ServiceWorkers are

00:22:59.510 --> 00:23:01.050
running across all the sites.

00:23:01.050 --> 00:23:02.670
So you can see
there, it logs there.

00:23:02.670 --> 00:23:04.940
But you can even launch
straight into DevTools.

00:23:04.940 --> 00:23:06.773
Are from there, you'll
see all console logs.

00:23:06.773 --> 00:23:09.942
You can set breakpoints, step
through code line by line,

00:23:09.942 --> 00:23:11.400
all the debugging
power that you've

00:23:11.400 --> 00:23:12.802
come to expect from DevTools.

00:23:12.802 --> 00:23:14.760
ALEX RUSSELL: Yeah, and
this is just the start.

00:23:14.760 --> 00:23:20.590
We're also in the process of
adding throttling and offline

00:23:20.590 --> 00:23:22.800
connection modes to
DevTools so that you'll

00:23:22.800 --> 00:23:25.510
be able to see how things work
with a flaky or nonexistent

00:23:25.510 --> 00:23:26.100
connection.

00:23:26.100 --> 00:23:30.860
JAKE ARCHIBALD: Yes, so we've
said a lot of exciting stuff.

00:23:30.860 --> 00:23:33.570
I think now is the
moment, really,

00:23:33.570 --> 00:23:37.350
to tell them about the thing.

00:23:37.350 --> 00:23:38.666
ALEX RUSSELL: What thing?

00:23:38.666 --> 00:23:42.560
JAKE ARCHIBALD: You know
the thing, the catch.

00:23:42.560 --> 00:23:44.850
ALEX RUSSELL: OK,
all right, so it

00:23:44.850 --> 00:23:47.260
turns out that being able to
control every single network

00:23:47.260 --> 00:23:48.996
request to your
origin and the request

00:23:48.996 --> 00:23:50.620
that your origin
makes to other origins

00:23:50.620 --> 00:23:52.700
is super powerful and awesome.

00:23:52.700 --> 00:23:54.240
It's also super
powerful and awesome

00:23:54.240 --> 00:23:56.580
for a middle man who might
subvert your ServiceWorker

00:23:56.580 --> 00:23:58.680
to do something awesomely
terrible with it.

00:23:58.680 --> 00:24:03.490
So yeah, for that
reason, you can only

00:24:03.490 --> 00:24:06.360
register for
ServiceWorkers for origins

00:24:06.360 --> 00:24:09.019
that are secure, that
are served over HTTPS.

00:24:09.019 --> 00:24:11.560
And that's the way that we know
that the ServiceWorker hasn't

00:24:11.560 --> 00:24:13.870
been messed with on its
way to your browser.

00:24:13.870 --> 00:24:15.953
JAKE ARCHIBALD: And this
is a theoretical concern.

00:24:15.953 --> 00:24:18.390
I got back from a trip to
Turkey a couple of weeks ago.

00:24:18.390 --> 00:24:22.560
And days after I go back,
when I was browsing the web,

00:24:22.560 --> 00:24:24.985
I was getting pop-ups
for Turkish sites.

00:24:24.985 --> 00:24:26.110
I assume they were adverts.

00:24:26.110 --> 00:24:28.090
But I couldn't understand them.

00:24:28.090 --> 00:24:30.420
But what had happened is
because I was over there,

00:24:30.420 --> 00:24:31.640
I didn't have data.

00:24:31.640 --> 00:24:32.830
I didn't have a SIM card.

00:24:32.830 --> 00:24:35.740
So I was using lots of free
Wi-Fi in pubs and restaurants.

00:24:35.740 --> 00:24:39.570
And at some point, and I don't
know when, some bad player

00:24:39.570 --> 00:24:42.790
there, some evil
ISP or evil rooter,

00:24:42.790 --> 00:24:46.880
injected pop-up scrips into
a popular CDN copy of jQuery.

00:24:46.880 --> 00:24:48.640
And the only way I
could get around that

00:24:48.640 --> 00:24:49.970
is to flush the cache.

00:24:49.970 --> 00:24:52.040
And that's pretty bad, right?

00:24:52.040 --> 00:24:56.770
But it's something I could
actually rescue myself

00:24:56.770 --> 00:24:58.730
from by flushing the cache.

00:24:58.730 --> 00:25:01.020
You do not want that happening
with the ServiceWorker.

00:25:01.020 --> 00:25:04.360
People would get instant control
over many origins at once.

00:25:04.360 --> 00:25:07.759
So the HTTPS restriction
is an absolute must.

00:25:07.759 --> 00:25:09.300
ALEX RUSSELL: Right,
so the good news

00:25:09.300 --> 00:25:11.550
is that local host is
exempt from this policy.

00:25:11.550 --> 00:25:14.210
And lots of project hosting
sites like GitHub and App

00:25:14.210 --> 00:25:17.970
Engine are providing SSL
hosting for free already.

00:25:17.970 --> 00:25:20.460
There's also some certificate
authorities like StartSSL

00:25:20.460 --> 00:25:23.220
that are starting
to hand out free SSL

00:25:23.220 --> 00:25:26.390
certificates for
your own servers.

00:25:26.390 --> 00:25:28.630
But I think the backdrop
here if we step back

00:25:28.630 --> 00:25:31.260
just a moment is that in
2014, it's really just

00:25:31.260 --> 00:25:33.650
the responsible thing to
do to be serving our users'

00:25:33.650 --> 00:25:35.160
data to them encrypted.

00:25:35.160 --> 00:25:37.272
So it's time to do that.

00:25:37.272 --> 00:25:38.480
JAKE ARCHIBALD: Yeah, indeed.

00:25:38.480 --> 00:25:40.780
So the ServiceWorker is
really powerful, as we said.

00:25:40.780 --> 00:25:42.890
But everything
we've shown so far

00:25:42.890 --> 00:25:46.350
has required the interface
to contact the ServiceWorker.

00:25:46.350 --> 00:25:49.120
And then, the ServiceWorker
can spring into action.

00:25:49.120 --> 00:25:52.970
But if I look at the native apps
that I rely upon day to day,

00:25:52.970 --> 00:25:55.290
these can synchronize
in the background.

00:25:55.290 --> 00:25:56.950
They can give me notifications.

00:25:56.950 --> 00:25:58.700
Well, we're going to
bring that to the web

00:25:58.700 --> 00:26:01.260
as well thanks to these
specifications-- background

00:26:01.260 --> 00:26:05.122
sync, Push API, and the
notification specification.

00:26:05.122 --> 00:26:06.330
ALEX RUSSELL: Cleverly named.

00:26:06.330 --> 00:26:09.581
[APPLAUSE]

00:26:09.581 --> 00:26:11.080
JAKE ARCHIBALD:
These are once again

00:26:11.080 --> 00:26:13.170
done by a lot of people
that aren't us, right?

00:26:13.170 --> 00:26:14.800
It feels like we're just
taking a lot of credit

00:26:14.800 --> 00:26:15.710
for other people's work.

00:26:15.710 --> 00:26:16.455
ALEX RUSSELL:
(WHISPERING) We might be.

00:26:16.455 --> 00:26:18.532
JAKE ARCHIBALD: It's
basically my career.

00:26:18.532 --> 00:26:20.990
So these allow the ServiceWorker
to start up on an interval

00:26:20.990 --> 00:26:23.740
or in response to a message
that comes from as far away

00:26:23.740 --> 00:26:24.415
as the internet.

00:26:24.415 --> 00:26:26.290
And when that happens,
then the ServiceWorker

00:26:26.290 --> 00:26:27.110
springs into life.

00:26:27.110 --> 00:26:28.990
It can go and fetch
multiple things.

00:26:28.990 --> 00:26:31.620
It can synchronize things with
the data keep, its caches,

00:26:31.620 --> 00:26:32.260
whether.

00:26:32.260 --> 00:26:34.950
And then, the ServiceWorker
can go to the interface

00:26:34.950 --> 00:26:38.510
and open a tab or show
something like a notification.

00:26:38.510 --> 00:26:41.950
Now, this stuff is
really, really new.

00:26:41.950 --> 00:26:43.960
And most of it
isn't in Canary yet.

00:26:43.960 --> 00:26:48.570
And despite that, and
despite all common sense,

00:26:48.570 --> 00:26:50.070
we're going to do
another live demo.

00:26:50.070 --> 00:26:52.400
And this one's going
to work, right?

00:26:52.400 --> 00:26:54.934
Let's see-- come on.

00:26:54.934 --> 00:26:56.100
This one's going to be fine.

00:26:56.100 --> 00:26:57.308
This one requires two phones.

00:26:57.308 --> 00:26:59.690
So the first one
had one phone fail.

00:26:59.690 --> 00:27:01.730
So two phones is going
to work definitely fine.

00:27:01.730 --> 00:27:03.890
ALEX RUSSELL: What
could go wrong?

00:27:03.890 --> 00:27:05.660
All right, I'm going
to be over here.

00:27:05.660 --> 00:27:07.760
And then-- yeah.

00:27:07.760 --> 00:27:11.680
So right, so I've
got the app open.

00:27:11.680 --> 00:27:12.940
And I've got connectivity.

00:27:12.940 --> 00:27:14.510
Let's say I've got connectivity.

00:27:14.510 --> 00:27:17.990
And I've got the
same number of points

00:27:17.990 --> 00:27:20.430
as Jake if I look in
the leader board now.

00:27:20.430 --> 00:27:22.420
Oh, someone else is playing.

00:27:22.420 --> 00:27:23.272
Ooh.

00:27:23.272 --> 00:27:27.480
JAKE ARCHIBALD: Ooh, this
is going to mess things up.

00:27:27.480 --> 00:27:30.150
So what we need to do
to make this demo work

00:27:30.150 --> 00:27:32.769
is I need to get
more than 24 points.

00:27:32.769 --> 00:27:35.018
ALEX RUSSELL: OK, so we're
going to need some audience

00:27:35.018 --> 00:27:35.510
help to get these answers.

00:27:35.510 --> 00:27:36.926
JAKE ARCHIBALD:
OK, let's do this.

00:27:36.926 --> 00:27:40.669
OK, so Alex here is
on his home screen.

00:27:40.669 --> 00:27:43.210
ALEX RUSSELL: Well, yeah, and
I'm going to close Chrome, too.

00:27:43.210 --> 00:27:43.776
JAKE ARCHIBALD: Oh, you're
going to close the app as well.

00:27:43.776 --> 00:27:44.650
We're going to close it.

00:27:44.650 --> 00:27:45.983
Thanks whoever was playing that.

00:27:45.983 --> 00:27:47.760
You've made things
really easy for us.

00:27:47.760 --> 00:27:48.520
Right, OK.

00:27:48.520 --> 00:27:49.540
ALEX RUSSELL: Food--
we can do food.

00:27:49.540 --> 00:27:50.210
JAKE ARCHIBALD: I
can do this, OK.

00:27:50.210 --> 00:27:50.820
ALEX RUSSELL: We can do food.

00:27:50.820 --> 00:27:51.780
JAKE ARCHIBALD: False.

00:27:51.780 --> 00:27:52.180
ALEX RUSSELL: False?

00:27:52.180 --> 00:27:53.310
JAKE ARCHIBALD: I know the
first question that comes up

00:27:53.310 --> 00:27:53.979
is false.

00:27:53.979 --> 00:27:55.270
I didn't even know what it was.

00:27:55.270 --> 00:27:57.084
OK, that's honey,
water, and yeast.

00:27:57.084 --> 00:27:58.500
ALEX RUSSELL:
Honey, water, yeast.

00:27:58.500 --> 00:27:59.320
JAKE ARCHIBALD:
No, no, no, no, no.

00:27:59.320 --> 00:28:00.680
ALEX RUSSELL: Oh, no, yes.

00:28:00.680 --> 00:28:01.340
JAKE ARCHIBALD: Yeah,
yeah, exit, right, go, go.

00:28:01.340 --> 00:28:02.450
ALEX RUSSELL: That one.

00:28:02.450 --> 00:28:02.950
Go.

00:28:02.950 --> 00:28:04.699
JAKE ARCHIBALD: So
I've got 24 points now.

00:28:04.699 --> 00:28:05.810
ALEX RUSSELL: Potatoes.

00:28:05.810 --> 00:28:06.730
JAKE ARCHIBALD: OK,
is that potatoes?

00:28:06.730 --> 00:28:07.230
Excellent.

00:28:07.230 --> 00:28:08.580
ALEX RUSSELL: Yeah, 32 points.

00:28:08.580 --> 00:28:10.413
JAKE ARCHIBALD: All
right, brilliant, right.

00:28:10.413 --> 00:28:13.820
Now come on, come on,
come on, come on, do this.

00:28:13.820 --> 00:28:15.030
You can really do this.

00:28:15.030 --> 00:28:17.196
So what we need, what we're
requiring at the moment,

00:28:17.196 --> 00:28:17.920
is connectivity.

00:28:17.920 --> 00:28:21.110
I know a lot of this was about
making things work offline.

00:28:21.110 --> 00:28:24.300
But this is the one bit that
requires network connectivity.

00:28:24.300 --> 00:28:25.590
Come on, you can do this.

00:28:25.590 --> 00:28:27.950
Please, we want
one demo to work.

00:28:27.950 --> 00:28:30.740
Come on, we can-- come
on, it's going to work.

00:28:30.740 --> 00:28:32.570
ALEX RUSSELL: Jake,
why are you not online?

00:28:32.570 --> 00:28:33.736
JAKE ARCHIBALD: I am online.

00:28:33.736 --> 00:28:36.992
But we've got conference Wi-Fi,
which is like being offline.

00:28:36.992 --> 00:28:39.895
[APPLAUSE]

00:28:39.895 --> 00:28:42.395
Maybe if I keep pressing this
button, something will happen.

00:28:42.395 --> 00:28:43.853
ALEX RUSSELL: So
are you suggesting

00:28:43.853 --> 00:28:46.110
that I shouldn't get
conference Wi-Fi for my house?

00:28:46.110 --> 00:28:47.526
JAKE ARCHIBALD:
There's a somewhat

00:28:47.526 --> 00:28:50.420
irony about a talk
devoted to making things

00:28:50.420 --> 00:28:53.885
work offline fine has failed
due to a lack of connectivity.

00:28:53.885 --> 00:28:57.014
ALEX RUSSELL: Mm, yeah,
we'll go with ironical.

00:28:57.014 --> 00:28:58.430
JAKE ARCHIBALD:
We can fight this.

00:28:58.430 --> 00:28:58.810
We can fight.

00:28:58.810 --> 00:28:59.890
We're going to give
it one more go.

00:28:59.890 --> 00:29:01.440
ALEX RUSSELL: One more go, yeah?

00:29:01.440 --> 00:29:02.730
JAKE ARCHIBALD: I mean, the
white screen is not great.

00:29:02.730 --> 00:29:04.630
I mean, that's not
what we intended.

00:29:04.630 --> 00:29:07.340
What time were you up to last
night making all of these work?

00:29:07.340 --> 00:29:08.000
ALEX RUSSELL: Let's
not talk about that.

00:29:08.000 --> 00:29:09.660
JAKE ARCHIBALD: OK, that's fine.

00:29:09.660 --> 00:29:10.580
Here we go.

00:29:10.580 --> 00:29:12.425
ALEX RUSSELL: Also,
let's not define "work."

00:29:12.425 --> 00:29:13.880
JAKE ARCHIBALD: Oh, oh,
something happened there.

00:29:13.880 --> 00:29:15.725
Right, OK, so we're
saying there's

00:29:15.725 --> 00:29:16.290
some kind of connection.

00:29:16.290 --> 00:29:16.900
ALEX RUSSELL: We're
not quite online.

00:29:16.900 --> 00:29:17.520
JAKE ARCHIBALD:
Not quite online.

00:29:17.520 --> 00:29:18.490
Is it half online?

00:29:18.490 --> 00:29:20.340
How does this app
work half online?

00:29:20.340 --> 00:29:22.000
ALEX RUSSELL: I'm not sure.

00:29:22.000 --> 00:29:23.170
I'm not sure what that is.

00:29:23.170 --> 00:29:24.212
We don't seem to be-- oh.

00:29:24.212 --> 00:29:26.003
JAKE ARCHIBALD: Oh,
no, no, don't touch it.

00:29:26.003 --> 00:29:27.650
Oh, that could have worked.

00:29:27.650 --> 00:29:30.882
I'm going to push
this button again.

00:29:30.882 --> 00:29:32.840
So we're worried about
our talk in the running.

00:29:32.840 --> 00:29:35.225
I think we've
solved that problem.

00:29:35.225 --> 00:29:36.100
Come on leader board.

00:29:36.100 --> 00:29:37.060
You can do it.

00:29:41.440 --> 00:29:42.940
I think we're going
to have to bail.

00:29:42.940 --> 00:29:44.310
We're going to have to
bail on the second demo.

00:29:44.310 --> 00:29:46.130
Maybe we can leave those there.

00:29:46.130 --> 00:29:48.920
And if it starts to work again,
we can sort of pick up on that.

00:29:48.920 --> 00:29:49.800
ALEX RUSSELL: We'll
leave those there.

00:29:49.800 --> 00:29:51.490
JAKE ARCHIBALD: And show
all of the magic happening,

00:29:51.490 --> 00:29:52.050
excellence.

00:29:52.050 --> 00:29:52.700
ALEX RUSSELL: This
is what we get

00:29:52.700 --> 00:29:53.940
for switching
Wi-Fi networks just

00:29:53.940 --> 00:29:54.710
the minute before the talk.

00:29:54.710 --> 00:29:55.100
JAKE ARCHIBALD: Exactly.

00:29:55.100 --> 00:29:57.362
What would happen if I
ditched off the Wi-Fi network?

00:29:57.362 --> 00:29:58.570
Do you think that would help?

00:29:58.570 --> 00:30:00.530
ALEX RUSSELL: I don't know.

00:30:00.530 --> 00:30:03.870
JAKE ARCHIBALD: Is the Wi-Fi
here worse than-- not Wi-Fi.

00:30:03.870 --> 00:30:05.370
Oh, well no one told us that.

00:30:05.370 --> 00:30:07.220
OK, let's--

00:30:07.220 --> 00:30:10.160
ALEX RUSSELL: So no conference
Wi-Fi for the house then.

00:30:10.160 --> 00:30:13.430
JAKE ARCHIBALD: Let's
go one more time.

00:30:13.430 --> 00:30:16.270
That seems to be loading better.

00:30:16.270 --> 00:30:17.510
Does the leader board load?

00:30:17.510 --> 00:30:18.510
That's the big question.

00:30:18.510 --> 00:30:19.370
It does.

00:30:19.370 --> 00:30:21.120
ALEX RUSSELL: You seem
to be winning, sir.

00:30:21.120 --> 00:30:24.650
JAKE ARCHIBALD: But what
happens on your phone?

00:30:24.650 --> 00:30:28.574
ALEX RUSSELL: That's a really
good question, isn't it?

00:30:28.574 --> 00:30:30.240
JAKE ARCHIBALD: Why
do you have no data?

00:30:30.240 --> 00:30:31.472
What network are you on?

00:30:31.472 --> 00:30:33.430
ALEX RUSSELL: Let's not
talk about that either.

00:30:36.720 --> 00:30:39.290
JAKE ARCHIBALD: You know,
I'm a very scientific person.

00:30:39.290 --> 00:30:43.350
But I am using all of my psychic
magic powers to make this work.

00:30:53.060 --> 00:30:54.430
Right, OK, I'm abandoning that.

00:30:54.430 --> 00:30:56.275
We'll come back to
that when it works.

00:30:56.275 --> 00:30:57.100
ALEX RUSSELL: When it works.

00:30:57.100 --> 00:30:58.450
JAKE ARCHIBALD: "When" is
the word I'm going to use.

00:30:58.450 --> 00:30:59.480
ALEX RUSSELL: When it works.

00:30:59.480 --> 00:31:00.660
JAKE ARCHIBALD:
Thank you, Wi-Fi.

00:31:00.660 --> 00:31:02.576
I have a whole session
in the sandbox tomorrow

00:31:02.576 --> 00:31:04.060
that depends on
the Wi-Fi working.

00:31:04.060 --> 00:31:04.885
Come along to that.

00:31:04.885 --> 00:31:06.510
ALEX RUSSELL: Jake
Archibald, everyone.

00:31:06.510 --> 00:31:10.622
[APPLAUSE]

00:31:10.622 --> 00:31:12.580
JAKE ARCHIBALD: As soon
as you see that change,

00:31:12.580 --> 00:31:14.520
we'll come back.

00:31:14.520 --> 00:31:19.541
OK, so what you saw there was
absolutely amazing, right?

00:31:19.541 --> 00:31:22.040
What we were hoping to demo for
you there is push messaging.

00:31:22.040 --> 00:31:25.306
Like when I got a higher
score than everyone else,

00:31:25.306 --> 00:31:26.680
it should have
told Alex about it

00:31:26.680 --> 00:31:28.960
even though he had
the web page closed,

00:31:28.960 --> 00:31:30.637
he had the browser closed.

00:31:30.637 --> 00:31:32.970
And also what we're hoping
to do is have background sync

00:31:32.970 --> 00:31:33.520
as well.

00:31:33.520 --> 00:31:35.480
So like we were seeing
before, playing the game

00:31:35.480 --> 00:31:37.560
without a connection,
that's fine.

00:31:37.560 --> 00:31:39.780
But that means that
when the phone tries

00:31:39.780 --> 00:31:42.960
to send the score to the server,
it's going to fail to do that.

00:31:42.960 --> 00:31:44.930
But background sync
means it can try and send

00:31:44.930 --> 00:31:47.160
that data later on.

00:31:47.160 --> 00:31:49.350
So say I'm playing the
game without a connection,

00:31:49.350 --> 00:31:52.857
and I improve my score,
the score updates request

00:31:52.857 --> 00:31:53.940
goes to the ServiceWorker.

00:31:53.940 --> 00:31:55.720
Because everything does.

00:31:55.720 --> 00:31:57.210
And then, the
ServiceWorker tries

00:31:57.210 --> 00:31:59.820
to forward that request
to the quiz server.

00:31:59.820 --> 00:32:02.625
But without a connection,
that doesn't go so well.

00:32:02.625 --> 00:32:04.700
Are you pulling a face there?

00:32:04.700 --> 00:32:08.180
ALEX RUSSELL: [GASP] Oh my god.

00:32:08.180 --> 00:32:10.224
Jake, Jake.

00:32:10.224 --> 00:32:11.890
JAKE ARCHIBALD: You
have a notification.

00:32:11.890 --> 00:32:13.090
That's amazing.

00:32:13.090 --> 00:32:15.818
Oh God, oh thank you, thank you.

00:32:15.818 --> 00:32:19.786
[APPLAUSE]

00:32:19.786 --> 00:32:22.305
And that's how you turn an
atheist into someone religious.

00:32:24.960 --> 00:32:27.430
OK, but is there another
part of that demo

00:32:27.430 --> 00:32:29.590
you would like to show me?

00:32:29.590 --> 00:32:32.220
ALEX RUSSELL:
Well, I don't know.

00:32:32.220 --> 00:32:35.070
I mean, I found out
about that finally

00:32:35.070 --> 00:32:38.528
working from my watch,
which is pretty good.

00:32:38.528 --> 00:32:41.640
[APPLAUSE]

00:32:41.640 --> 00:32:44.605
JAKE ARCHIBALD: All
using technology, right?

00:32:44.605 --> 00:32:46.480
That watch doesn't even
have a browser on it.

00:32:46.480 --> 00:32:48.730
But we're using web technology
to send messages to it.

00:32:48.730 --> 00:32:50.370
That's incredible.

00:32:50.370 --> 00:32:52.710
Right, whew, I didn't
realize this talk

00:32:52.710 --> 00:32:54.200
was going to be asynchronous.

00:32:54.200 --> 00:32:55.700
ALEX RUSSELL: Well,
I didn't realize

00:32:55.700 --> 00:32:57.890
it was going to nearly kill me.

00:32:57.890 --> 00:33:01.190
JAKE ARCHIBALD: So originally,
if we were offline,

00:33:01.190 --> 00:33:03.440
the score would fail
to go up to the server,

00:33:03.440 --> 00:33:05.940
even though it was going via
the ServiceWorker, just because

00:33:05.940 --> 00:33:07.300
of a failure in connectivity.

00:33:07.300 --> 00:33:10.560
But then, the page can
register for a background sync,

00:33:10.560 --> 00:33:13.040
say, hey, I want some time
later on to do some stuff.

00:33:13.040 --> 00:33:15.540
And then, even if
you close the page,

00:33:15.540 --> 00:33:18.580
even if you close the browser,
when the phone regains

00:33:18.580 --> 00:33:21.460
connectivity, even if I
close the page like that,

00:33:21.460 --> 00:33:23.442
the ServiceWorker will start up.

00:33:23.442 --> 00:33:25.260
And it will try again
to make the request.

00:33:25.260 --> 00:33:26.384
And this time, it succeeds.

00:33:26.384 --> 00:33:27.889
Because we've got connectivity.

00:33:27.889 --> 00:33:29.930
ALEX RUSSELL: Yeah, so
setting up that background

00:33:29.930 --> 00:33:32.220
sync is actually really
simple despite what

00:33:32.220 --> 00:33:33.930
the demos might look like.

00:33:33.930 --> 00:33:36.810
So first, from our
[INAUDIBLE] page,

00:33:36.810 --> 00:33:38.540
we try to post the user's score.

00:33:38.540 --> 00:33:40.670
And if that doesn't work,
we catch the failure.

00:33:40.670 --> 00:33:42.890
And so what we do is we
wait for the ServiceWorker

00:33:42.890 --> 00:33:45.220
to be installed if it
hasn't been already.

00:33:45.220 --> 00:33:48.670
From there, once we've got
a service worker registered,

00:33:48.670 --> 00:33:51.432
we register for a one-off
background synchronization.

00:33:51.432 --> 00:33:53.390
That'll happen some time
when the device thinks

00:33:53.390 --> 00:33:55.100
it has connectivity and power.

00:33:55.100 --> 00:33:58.080
You can also register
for synchronization

00:33:58.080 --> 00:34:00.910
that runs on an interval.

00:34:00.910 --> 00:34:04.070
The value you pass in
is the minimum interval.

00:34:04.070 --> 00:34:05.780
This one is set to an hour.

00:34:05.780 --> 00:34:09.210
But that means that it won't
happen any more frequently

00:34:09.210 --> 00:34:10.320
than once an hour.

00:34:10.320 --> 00:34:12.857
Heuristics are going to be
used in order to determine

00:34:12.857 --> 00:34:14.440
that the right time
for this to happen

00:34:14.440 --> 00:34:17.100
is based on how often
you use the application,

00:34:17.100 --> 00:34:19.659
whether or not there's power,
how often the user uses

00:34:19.659 --> 00:34:22.190
the site, when they
tend to use it,

00:34:22.190 --> 00:34:23.980
connections date, all
kinds of crazy stuff

00:34:23.980 --> 00:34:27.411
that we don't really have a
total easy to under formula

00:34:27.411 --> 00:34:27.910
for.

00:34:27.910 --> 00:34:30.243
JAKE ARCHIBALD: Yeah, and if
we know that two background

00:34:30.243 --> 00:34:32.560
syncs are sort of scheduled
for like 10 minutes apart,

00:34:32.560 --> 00:34:35.370
they'll coalesce
into one so we can

00:34:35.370 --> 00:34:38.489
reduce a lot of the battery
impact of these things.

00:34:38.489 --> 00:34:40.032
ALEX RUSSELL: Right,
so of course you

00:34:40.032 --> 00:34:42.115
don't get the background
synchronization for free.

00:34:42.115 --> 00:34:44.199
The user will have to
grant you permission

00:34:44.199 --> 00:34:45.310
to be able to do that.

00:34:45.310 --> 00:34:47.138
And they'll be able
to revoke it later.

00:34:47.138 --> 00:34:48.929
So it's a good thing
we guarded our request

00:34:48.929 --> 00:34:50.050
behind that registration.

00:34:50.050 --> 00:34:52.050
JAKE ARCHIBALD: But if
they do grant permission,

00:34:52.050 --> 00:34:55.440
over in your ServiceWorker, you
will start to get a sync event.

00:34:55.440 --> 00:34:57.250
And you'll get an
ID for those so you

00:34:57.250 --> 00:34:58.900
know which synchronization
you're dealing with.

00:34:58.900 --> 00:35:00.690
Because you could have
one on an interval.

00:35:00.690 --> 00:35:02.700
And you could have
a one-off one.

00:35:02.700 --> 00:35:06.235
And once you get those, you can
do whatever you want, really.

00:35:06.235 --> 00:35:07.610
Like in the
installation process,

00:35:07.610 --> 00:35:09.068
you get this
event.waitUntil thing.

00:35:09.068 --> 00:35:10.390
And you pass a promise into it.

00:35:10.390 --> 00:35:13.810
And that defines length and
success of the synchronization.

00:35:13.810 --> 00:35:15.520
If you give it back
a rejected promise,

00:35:15.520 --> 00:35:17.677
it treats that as the
synchronization failed.

00:35:17.677 --> 00:35:19.260
And it will be
rescheduled, even if it

00:35:19.260 --> 00:35:20.980
was a one-off one like
sending the score.

00:35:20.980 --> 00:35:22.680
If we signal that we
failed to do that,

00:35:22.680 --> 00:35:25.370
it'll reschedule that
for some time later.

00:35:25.370 --> 00:35:26.900
In terms of sending
the score, we're

00:35:26.900 --> 00:35:28.810
going to get the score
from a database, which

00:35:28.810 --> 00:35:30.340
could be IDB or whatever.

00:35:30.340 --> 00:35:32.440
And we're just going to
use Fetch to post it up

00:35:32.440 --> 00:35:33.760
to the server.

00:35:33.760 --> 00:35:35.620
And if that fails,
the promise rejects.

00:35:35.620 --> 00:35:38.472
And it will reschedule
the synchronization.

00:35:38.472 --> 00:35:39.930
If we do get a
response back, we're

00:35:39.930 --> 00:35:41.630
also going to look
at the status code.

00:35:41.630 --> 00:35:45.040
If the status code isn't 200,
we're going to throw an error.

00:35:45.040 --> 00:35:47.500
If you throw an error
within a promise chain,

00:35:47.500 --> 00:35:49.100
that rejects the promise.

00:35:49.100 --> 00:35:52.210
It does the same thing, which
will throw that rejection up

00:35:52.210 --> 00:35:53.960
the chain into waitUntil.

00:35:53.960 --> 00:35:56.140
And it will reschedule
the synchronization.

00:35:56.140 --> 00:35:57.900
And that's it.

00:35:57.900 --> 00:35:59.580
Using the Fetch API
makes this stuff

00:35:59.580 --> 00:36:02.150
so much more simple
than XML HTTP

00:36:02.150 --> 00:36:04.660
request, which is terrible.

00:36:04.660 --> 00:36:07.120
So now the score
has successfully

00:36:07.120 --> 00:36:08.270
reached the server.

00:36:08.270 --> 00:36:10.061
ALEX RUSSELL: And at
that point, the server

00:36:10.061 --> 00:36:11.980
knew that I had
lost first place.

00:36:11.980 --> 00:36:14.910
So it told Google
Cloud Messaging,

00:36:14.910 --> 00:36:18.440
which relayed it back
to the ServiceWorker

00:36:18.440 --> 00:36:21.850
on my device, which decided
to show me a notification.

00:36:21.850 --> 00:36:25.490
And I clicked that notification,
which sent a message back

00:36:25.490 --> 00:36:26.620
to the--

00:36:26.620 --> 00:36:27.870
JAKE ARCHIBALD: ServiceWorker.

00:36:27.870 --> 00:36:29.036
ALEX RUSSELL: ServiceWorker.

00:36:30.439 --> 00:36:32.230
JAKE ARCHIBALD: You
helped write this spec.

00:36:32.230 --> 00:36:34.600
You need to remember it.

00:36:34.600 --> 00:36:37.670
ALEX RUSSELL: Which responded by
opening up a page on my device.

00:36:37.670 --> 00:36:41.240
So how did we set up
the push messaging?

00:36:41.240 --> 00:36:42.220
JAKE ARCHIBALD: Alex.

00:36:42.220 --> 00:36:43.790
ALEX RUSSELL: Good
question, Alex.

00:36:43.790 --> 00:36:47.250
From that page, you
want the registration

00:36:47.250 --> 00:36:52.270
ID that you've been
sent from the server.

00:36:52.270 --> 00:36:54.360
Just have it be
included with the page

00:36:54.360 --> 00:36:57.100
or use an empty string if
it doesn't have one already.

00:36:57.100 --> 00:37:00.206
From there, you can register
for push notifications.

00:37:00.206 --> 00:37:01.580
If you've already
got one, you'll

00:37:01.580 --> 00:37:04.870
get back the details of your
previous registration right

00:37:04.870 --> 00:37:05.550
away.

00:37:05.550 --> 00:37:07.120
Otherwise, the
browser will probably

00:37:07.120 --> 00:37:09.140
ask the user for permission.

00:37:09.140 --> 00:37:10.850
Assuming the
permission is granted,

00:37:10.850 --> 00:37:14.620
you'll get back the registration
details from the promise

00:37:14.620 --> 00:37:17.290
that you register with.

00:37:17.290 --> 00:37:19.130
And then, the
registration details

00:37:19.130 --> 00:37:22.030
give you an ID and a URL
that you can send back

00:37:22.030 --> 00:37:23.867
to Google Cloud Messaging.

00:37:23.867 --> 00:37:26.450
But other vendors are going to
use different systems for this.

00:37:26.450 --> 00:37:27.265
JAKE ARCHIBALD:
Yes, it's not a lock

00:37:27.265 --> 00:37:28.431
into Google Cloud Messaging.

00:37:28.431 --> 00:37:30.970
Every other vendor will have
its own messaging platform.

00:37:30.970 --> 00:37:32.390
They're welcome to use Google's.

00:37:32.390 --> 00:37:35.290
But I doubt Apple
will, for instance.

00:37:35.290 --> 00:37:37.090
Now your server
can send messages

00:37:37.090 --> 00:37:40.145
to GCM, which will then be
sent to the user's devices.

00:37:40.145 --> 00:37:41.770
And this will wake
up the ServiceWorker

00:37:41.770 --> 00:37:44.181
and fire a push event,
as you can see here.

00:37:44.181 --> 00:37:45.930
And you'll get a little
bit of information

00:37:45.930 --> 00:37:48.120
with that, just a very
small amount of information.

00:37:48.120 --> 00:37:50.860
If you've done push messages
on native platforms before,

00:37:50.860 --> 00:37:52.527
it's a very small
amount of information.

00:37:52.527 --> 00:37:54.943
But it will be enough to tell
us that we've lost the lead.

00:37:54.943 --> 00:37:56.890
If we needed more
information at this point,

00:37:56.890 --> 00:37:59.098
we could go off to the
internet and fetch that stuff.

00:37:59.098 --> 00:38:02.039
But in this case, we're just
going to do a new notification.

00:38:02.039 --> 00:38:03.830
And this is a platform
native notification,

00:38:03.830 --> 00:38:06.590
meaning it will show up
on your watch or whatever

00:38:06.590 --> 00:38:08.160
as we saw in the demo.

00:38:08.160 --> 00:38:09.830
So to use a tap
set notification,

00:38:09.830 --> 00:38:12.430
you'll get another event inside
the ServiceWorker notification

00:38:12.430 --> 00:38:13.025
click.

00:38:13.025 --> 00:38:14.689
And in response to
this-- once again,

00:38:14.689 --> 00:38:15.730
you can do what you want.

00:38:15.730 --> 00:38:18.540
But we chose to navigate
to the leader board

00:38:18.540 --> 00:38:21.080
to encourage the user to
see who they're losing out

00:38:21.080 --> 00:38:23.060
to and by how much.

00:38:23.060 --> 00:38:25.030
All of this stuff is
just using primitives.

00:38:25.030 --> 00:38:27.820
You don't have to do
what we've shown today.

00:38:27.820 --> 00:38:28.860
Take it apart.

00:38:28.860 --> 00:38:31.086
Build something crazy with it.

00:38:31.086 --> 00:38:32.460
The ServiceWorker
blows the doors

00:38:32.460 --> 00:38:34.185
open to heaps of
new possibilities,

00:38:34.185 --> 00:38:36.060
more than what we've
just talked about today.

00:38:36.060 --> 00:38:39.200
I am genuinely really,
really excited about it.

00:38:39.200 --> 00:38:41.559
Can I use it in
production today?

00:38:41.559 --> 00:38:43.100
ALEX RUSSELL: Well,
if you check out,

00:38:43.100 --> 00:38:45.860
is ServiceWorker ready
yet, you will find out

00:38:45.860 --> 00:38:51.840
the clear and
unequivocal answer is no.

00:38:51.840 --> 00:38:53.550
But get ready.

00:38:53.550 --> 00:38:57.020
A lot of this stuff is in
Canary already in some form.

00:38:57.020 --> 00:39:00.364
And we're racing with Firefox
and other browser vendors

00:39:00.364 --> 00:39:02.530
to get implementations
shipping as soon as possible.

00:39:02.530 --> 00:39:04.570
But no matter who
wins that race,

00:39:04.570 --> 00:39:07.232
we expect that the web will win.

00:39:07.232 --> 00:39:09.690
And in fact, the network control
portions, the Fetch event,

00:39:09.690 --> 00:39:11.390
that sort of thing,
are going to land

00:39:11.390 --> 00:39:13.090
in a couple of months in Chrome.

00:39:13.090 --> 00:39:14.210
JAKE ARCHIBALD: And
that's Chrome stable.

00:39:14.210 --> 00:39:16.650
ALEX RUSSELL: Yeah, background
sync and push and those sorts

00:39:16.650 --> 00:39:17.920
of things are going to
take a little bit longer.

00:39:17.920 --> 00:39:20.100
But there's going to be a steady
drumbeat of those coming soon.

00:39:20.100 --> 00:39:21.440
JAKE ARCHIBALD:
And you want to be

00:39:21.440 --> 00:39:23.750
ready to start using these
things as soon as they land.

00:39:23.750 --> 00:39:26.580
Because the ServiceWorker is
best used as an enhancement

00:39:26.580 --> 00:39:27.439
to your site.

00:39:27.439 --> 00:39:29.480
Because the first time
the user visits your site,

00:39:29.480 --> 00:39:31.146
no one's going to
have a service worker,

00:39:31.146 --> 00:39:32.590
even if the browser
supports them.

00:39:32.590 --> 00:39:34.770
So they're very
much an enhancement.

00:39:34.770 --> 00:39:37.905
So as soon as it lands in
browsers, it's useful to you.

00:39:37.905 --> 00:39:40.280
Give its features just to the
browsers that support them.

00:39:40.280 --> 00:39:42.570
And if you use very
simple feature detection,

00:39:42.570 --> 00:39:43.945
your site will
work uninterrupted

00:39:43.945 --> 00:39:46.199
in browsers that don't
support ServiceWorker.

00:39:46.199 --> 00:39:47.990
ALEX RUSSELL: Right,
that's exactly what we

00:39:47.990 --> 00:39:50.736
did with QuizApp that was built
by the Polymer team, not us.

00:39:50.736 --> 00:39:52.360
JAKE ARCHIBALD: Yeah,
it didn't require

00:39:52.360 --> 00:39:54.252
heaps of re-architecture.

00:39:54.252 --> 00:39:55.710
I know when I was
at Lanyard, if we

00:39:55.710 --> 00:39:57.800
wanted to do the
AppCache stuff, we

00:39:57.800 --> 00:40:00.026
had to start a new m-dot site.

00:40:00.026 --> 00:40:01.900
Because you had to
re-architecture everything

00:40:01.900 --> 00:40:02.530
to use AppCache.

00:40:02.530 --> 00:40:03.850
That is not true
with ServiceWorker.

00:40:03.850 --> 00:40:04.650
ALEX RUSSELL: No,
they handed me an app.

00:40:04.650 --> 00:40:05.830
And I made it work offline.

00:40:05.830 --> 00:40:07.830
It was that easy.

00:40:07.830 --> 00:40:10.230
But the second that this stuff
lands in Chrome, millions

00:40:10.230 --> 00:40:12.229
of users are going to
have it accessible to them

00:40:12.229 --> 00:40:13.930
across tons of devices.

00:40:13.930 --> 00:40:17.070
And so now is the time
to start learning it.

00:40:17.070 --> 00:40:19.222
And try to figure out
how it can benefit you

00:40:19.222 --> 00:40:21.430
and your users and the sites
perhaps that you already

00:40:21.430 --> 00:40:21.995
have deployed.

00:40:21.995 --> 00:40:22.800
JAKE ARCHIBALD:
Yes, and if you're

00:40:22.800 --> 00:40:25.330
looking for some inspiration,
the W3 web mobile group

00:40:25.330 --> 00:40:27.329
are currently compiling
ServiceWorker patents.

00:40:27.329 --> 00:40:28.870
And they're looking
for contributors.

00:40:28.870 --> 00:40:31.890
So if you want to start writing
demos, come up with use cases,

00:40:31.890 --> 00:40:34.250
or see examples that
other people have made,

00:40:34.250 --> 00:40:37.120
this is an absolutely
great place to do it.

00:40:37.120 --> 00:40:39.944
ALEX RUSSELL: At Google, we
want the web to be first class.

00:40:39.944 --> 00:40:41.610
We want it to be an
application platform

00:40:41.610 --> 00:40:44.190
that you can use with
everything with a browser.

00:40:44.190 --> 00:40:47.100
The ServiceWorker opens up
a ton of new possibilities.

00:40:47.100 --> 00:40:49.160
And we've only shown
you a few of them today.

00:40:49.160 --> 00:40:50.987
But we're really most
excited about what

00:40:50.987 --> 00:40:52.570
you're going to go
out and do with it.

00:40:52.570 --> 00:40:54.352
We can't wait to see
what you build next.

00:40:54.352 --> 00:40:55.310
JAKE ARCHIBALD: Thanks.

00:40:55.310 --> 00:41:04.240
[APPLAUSE]

00:41:04.240 --> 00:41:06.480
I think we have a little
bit of time for questions

00:41:06.480 --> 00:41:08.960
if anyone has any.

00:41:08.960 --> 00:41:11.650
ALEX RUSSELL: Other than, how
did your demos go so well?

00:41:11.650 --> 00:41:13.740
AUDIENCE: How did
your demos go so well?

00:41:13.740 --> 00:41:15.295
ALEX RUSSELL: Practice.

00:41:15.295 --> 00:41:16.670
AUDIENCE: So I
noticed that there

00:41:16.670 --> 00:41:21.080
was no committed support
for IE and Safari yet.

00:41:21.080 --> 00:41:22.585
Do you know the
reasons for that?

00:41:22.585 --> 00:41:24.932
Are they working
on a separate spec?

00:41:24.932 --> 00:41:26.390
JAKE ARCHIBALD: So
the question is,

00:41:26.390 --> 00:41:28.220
what's the deal
with IE and Safari?

00:41:28.220 --> 00:41:30.480
Mozilla has quite
heavily bought into it.

00:41:30.480 --> 00:41:31.800
But where are the other guys?

00:41:31.800 --> 00:41:34.135
ALEX RUSSELL:
Yeah, so obviously,

00:41:34.135 --> 00:41:36.260
it's very difficult for me
to speak for my own team

00:41:36.260 --> 00:41:38.160
sometimes, let
alone other vendors.

00:41:38.160 --> 00:41:39.940
So what I can tell
you is that we've

00:41:39.940 --> 00:41:41.745
had positive signs
out of Microsoft.

00:41:41.745 --> 00:41:44.120
They've come and talked to us
at the public working group

00:41:44.120 --> 00:41:46.992
meetings about
ServiceWorker specifically.

00:41:46.992 --> 00:41:48.200
And we're encouraged by that.

00:41:48.200 --> 00:41:50.491
But obviously, it's a question
that you should probably

00:41:50.491 --> 00:41:51.100
ask them.

00:41:51.100 --> 00:41:52.590
The great news is that
it is progressive.

00:41:52.590 --> 00:41:54.690
So if you're building a thing
that works with ServiceWorkers,

00:41:54.690 --> 00:41:56.750
because it has to work
on that first page load,

00:41:56.750 --> 00:41:58.900
it's always going to
work across browsers.

00:41:58.900 --> 00:42:00.960
So you should just
not build your stuff

00:42:00.960 --> 00:42:02.902
to require ServiceWorkers
all the time.

00:42:02.902 --> 00:42:04.610
But if you have a
local data model that's

00:42:04.610 --> 00:42:06.290
doing synchronization
with a back-end,

00:42:06.290 --> 00:42:08.190
you'll be in a good position
to take advantage of it

00:42:08.190 --> 00:42:09.690
on all the browsers
that do have it.

00:42:09.690 --> 00:42:12.780
Our hope is that by
shipping quickly and having

00:42:12.780 --> 00:42:14.280
multi-browser
support, it's going

00:42:14.280 --> 00:42:15.863
to create a drumbeat
of amazing things

00:42:15.863 --> 00:42:18.340
that you build that will
sort of get everyone excited.

00:42:18.340 --> 00:42:20.850
We sort of saw this
work with WebGL.

00:42:20.850 --> 00:42:24.755
And I'm hoping for a similar
cadence, if not faster.

00:42:24.755 --> 00:42:27.620
AUDIENCE: Hey Alex, I was
thinking about the web

00:42:27.620 --> 00:42:29.700
component case specifically
and HTML imports.

00:42:29.700 --> 00:42:31.780
When you use the
Fetch API, are we

00:42:31.780 --> 00:42:34.260
going to provide affordances
so developers can granularly

00:42:34.260 --> 00:42:37.135
listen to the loads internal
to that HTML import document?

00:42:37.135 --> 00:42:38.635
JAKE ARCHIBALD: Oh,
can I take that?

00:42:38.635 --> 00:42:39.635
ALEX RUSSELL: Please do.

00:42:39.635 --> 00:42:42.142
JAKE ARCHIBALD: Yeah,
so the question is,

00:42:42.142 --> 00:42:44.000
currently, it looks
like in examples we've

00:42:44.000 --> 00:42:47.020
shown that you make a request
and you get the full response

00:42:47.020 --> 00:42:47.520
back.

00:42:47.520 --> 00:42:48.980
But we're wanting
to do something

00:42:48.980 --> 00:42:49.979
more granular than that.

00:42:49.979 --> 00:42:53.170
The stream spec is in process.

00:42:53.170 --> 00:42:55.130
We want to ship
before then, so we've

00:42:55.130 --> 00:42:57.240
detached them as a requirement.

00:42:57.240 --> 00:42:59.325
On the request object,
you've got .body.

00:42:59.325 --> 00:43:00.700
And at the moment,
it's this kind

00:43:00.700 --> 00:43:04.251
of empty object as JSON as text.

00:43:04.251 --> 00:43:06.125
But we're going to
convert that into a stream

00:43:06.125 --> 00:43:07.220
when streams land.

00:43:07.220 --> 00:43:09.011
And it's still going
to have those methods.

00:43:09.011 --> 00:43:12.260
But they're just a shortcut
to consuming the entire stream

00:43:12.260 --> 00:43:13.970
and converting it
to whatever format.

00:43:13.970 --> 00:43:15.530
So you'll have a stream.

00:43:15.530 --> 00:43:18.230
With the example with the
image, transcoding an image,

00:43:18.230 --> 00:43:21.510
we want to be able to do that
with video, a fully live video

00:43:21.510 --> 00:43:23.616
with no defined end point.

00:43:23.616 --> 00:43:26.240
We want you to be able to take
a new image, a new video format,

00:43:26.240 --> 00:43:27.823
transcode it within
the ServiceWorker,

00:43:27.823 --> 00:43:29.710
and pipe it to the
browser using streams,

00:43:29.710 --> 00:43:31.750
using transformation streams.

00:43:31.750 --> 00:43:33.197
ALEX RUSSELL: So
the answer is, we

00:43:33.197 --> 00:43:34.780
don't have a way to
do that right now.

00:43:34.780 --> 00:43:36.256
The good news is that
if you know enough

00:43:36.256 --> 00:43:37.200
about your
application structure,

00:43:37.200 --> 00:43:39.010
you can usually predict what
you're going to need and put it

00:43:39.010 --> 00:43:40.050
in caches preemptively.

00:43:40.050 --> 00:43:41.850
And that's what the install
stuff is really about,

00:43:41.850 --> 00:43:43.350
is making sure that
if there are things

00:43:43.350 --> 00:43:44.830
that you know that
are dependencies,

00:43:44.830 --> 00:43:46.079
you can capture them up front.

00:43:48.442 --> 00:43:50.900
AUDIENCE: I have a question on
what kind of push technology

00:43:50.900 --> 00:43:53.756
are you using to push the
asynchronous information back

00:43:53.756 --> 00:43:55.070
to the device.

00:43:55.070 --> 00:43:57.320
JAKE ARCHIBALD: So what push
technology were we using?

00:43:57.320 --> 00:44:00.020
ALEX RUSSELL: That's GCM,
Google Cloud Messaging.

00:44:00.020 --> 00:44:02.240
AUDIENCE: And that's
going to be the standard?

00:44:02.240 --> 00:44:03.781
ALEX RUSSELL: Google
Cloud Messaging,

00:44:03.781 --> 00:44:06.530
as part of the client
side being standardized,

00:44:06.530 --> 00:44:09.240
the push server team
here has-- we've

00:44:09.240 --> 00:44:10.990
been talking with them
about standardizing

00:44:10.990 --> 00:44:14.190
some of the
northbound API areas.

00:44:14.190 --> 00:44:16.570
That's an area that is
ripe for standardization.

00:44:16.570 --> 00:44:18.420
But no one has committed
to anything yet.

00:44:18.420 --> 00:44:22.190
If you talk to the other
push servers, what happens

00:44:22.190 --> 00:44:25.560
is that the protocol on the
wire between the phone and GCM

00:44:25.560 --> 00:44:27.810
is probably going
to remain something

00:44:27.810 --> 00:44:30.310
that is going to be tied
deeply into the operating

00:44:30.310 --> 00:44:33.540
systems of these devices in
order to maintain battery life.

00:44:33.540 --> 00:44:37.044
But northbound protocols
between your application server

00:44:37.044 --> 00:44:39.210
and your push messaging
server are the sort of thing

00:44:39.210 --> 00:44:41.209
where people are starting
to have conversations.

00:44:41.209 --> 00:44:44.125
And the API that exists
here on the phone

00:44:44.125 --> 00:44:45.750
is going to be
absolutely standardized.

00:44:45.750 --> 00:44:47.250
And that's something
that we've been

00:44:47.250 --> 00:44:48.850
pushing to get
done very quickly.

00:44:48.850 --> 00:44:51.869
AUDIENCE: Thank you.

00:44:51.869 --> 00:44:53.410
AUDIENCE: Hi, so I
know that you said

00:44:53.410 --> 00:44:55.310
earlier some of the
pitfalls with AppCache.

00:44:55.310 --> 00:44:57.799
But that does work in the
latest Internet Explorer

00:44:57.799 --> 00:44:59.590
and current versions
of Firefox, et cetera.

00:44:59.590 --> 00:45:02.430
So is there any way besides
user agent detection

00:45:02.430 --> 00:45:05.024
of kind of using AppCache
when it's available,

00:45:05.024 --> 00:45:07.190
and then using ServiceWorkers
when that's available?

00:45:07.190 --> 00:45:09.606
Whereas ServiceWorkers, you
can detect that in JavaScript,

00:45:09.606 --> 00:45:12.250
but you need to have the
AppCache header, which is--

00:45:12.250 --> 00:45:15.470
JAKE ARCHIBALD: So the
question is, can you

00:45:15.470 --> 00:45:17.217
use AppCache in
the browsers that

00:45:17.217 --> 00:45:19.300
don't support ServiceWorker,
and use ServiceWorker

00:45:19.300 --> 00:45:19.960
in the others?

00:45:19.960 --> 00:45:22.543
AUDIENCE: Yeah, is there any way
besides using user detection?

00:45:22.543 --> 00:45:25.460
JAKE ARCHIBALD: So if you have
a service worker registered,

00:45:25.460 --> 00:45:27.680
that effectively
clobbers the AppCache.

00:45:27.680 --> 00:45:30.530
So you can have both in use
on the page at the same time.

00:45:30.530 --> 00:45:32.135
You can have them
both on the page.

00:45:32.135 --> 00:45:34.260
But the ServiceWorker will
take over from AppCache,

00:45:34.260 --> 00:45:35.760
and it will become null.

00:45:35.760 --> 00:45:37.440
So yeah, you have
them both on the page.

00:45:37.440 --> 00:45:39.447
And AppCache will work
on the older browsers.

00:45:39.447 --> 00:45:41.280
AUDIENCE: OK, so it
just won't use AppCache,

00:45:41.280 --> 00:45:43.090
or will you have to
explicitly block the AppCache?

00:45:43.090 --> 00:45:43.700
JAKE ARCHIBALD: It
just won't work it.

00:45:43.700 --> 00:45:44.550
It just won't use it.

00:45:44.550 --> 00:45:45.925
AUDIENCE: OK,
awesome, thank you.

00:45:48.260 --> 00:45:51.180
AUDIENCE: I'm just wondering
about updating ServiceWorkers.

00:45:51.180 --> 00:45:53.910
ALEX RUSSELL: Yes, so there's
a very long, very complicated

00:45:53.910 --> 00:45:56.610
dance, which we didn't
do, either in the slides

00:45:56.610 --> 00:45:58.220
or in the code.

00:45:58.220 --> 00:46:00.420
But the basic idea
is that updating

00:46:00.420 --> 00:46:02.990
is the worst and nastiest bit
of pretty much any product that

00:46:02.990 --> 00:46:04.790
has to be always up to date.

00:46:04.790 --> 00:46:06.620
Chrome goes to extreme
lengths to make sure

00:46:06.620 --> 00:46:09.830
that you are always up to
date on the native client

00:46:09.830 --> 00:46:10.650
side of things.

00:46:10.650 --> 00:46:13.170
With regular websites, you
don't have that problem, right?

00:46:13.170 --> 00:46:14.440
You're always fetching
from the server

00:46:14.440 --> 00:46:16.606
as long as you haven't far
future expired something.

00:46:16.606 --> 00:46:18.162
So you're always up to date.

00:46:18.162 --> 00:46:19.745
So what we're doing
with ServiceWorker

00:46:19.745 --> 00:46:22.075
is we're making sure
that you do you cache

00:46:22.075 --> 00:46:24.080
the ServiceWorker in
all its dependencies.

00:46:24.080 --> 00:46:27.760
But we check usually
when you go to that site.

00:46:27.760 --> 00:46:32.200
And we request updates about the
freshness of the ServiceWorker

00:46:32.200 --> 00:46:34.299
behind the back of the
ServiceWorker itself.

00:46:34.299 --> 00:46:36.590
And we make sure that we do
that at least once every 24

00:46:36.590 --> 00:46:39.269
hours if you're using the
app on a consistent basis.

00:46:39.269 --> 00:46:41.560
JAKE ARCHIBALD: It will
generally be once every request

00:46:41.560 --> 00:46:45.892
unless you use HTTP caching
headers to push it longer.

00:46:45.892 --> 00:46:47.350
ALEX RUSSELL: The
general idea here

00:46:47.350 --> 00:46:50.100
is that you are going to
have an update model that

00:46:50.100 --> 00:46:51.690
looks very much
like Chrome's where

00:46:51.690 --> 00:46:53.229
if you close all
the tabs to a site,

00:46:53.229 --> 00:46:55.520
and the ServiceWorker has
been downloaded and installed

00:46:55.520 --> 00:46:57.867
behind you, the next
time you go to that site,

00:46:57.867 --> 00:46:59.200
you'll get the freshest version.

00:46:59.200 --> 00:47:01.658
And so there's a whole system
in place in the ServiceWorker

00:47:01.658 --> 00:47:04.110
specification to make sure
that that works that way.

00:47:04.110 --> 00:47:05.130
JAKE ARCHIBALD: But
like everything, it's

00:47:05.130 --> 00:47:05.838
fully extensible.

00:47:05.838 --> 00:47:07.360
So you can do what you want.

00:47:07.360 --> 00:47:09.600
If you're the next
version in waiting,

00:47:09.600 --> 00:47:12.010
the user can still use
the current version

00:47:12.010 --> 00:47:13.120
while tabs are open.

00:47:13.120 --> 00:47:14.980
But this new one does
have the opportunity

00:47:14.980 --> 00:47:17.070
to just go and kick
the other one out.

00:47:17.070 --> 00:47:19.886
Otherwise, it will wait
for-- but once you do that,

00:47:19.886 --> 00:47:21.610
you will now be in
control of pages that

00:47:21.610 --> 00:47:23.030
were loaded with
the old version.

00:47:23.030 --> 00:47:25.601
ALEX RUSSELL: Did I mention
this was very complicated?

00:47:25.601 --> 00:47:26.350
We can talk later.

00:47:26.350 --> 00:47:27.970
It's very complicated
in the sense

00:47:27.970 --> 00:47:30.150
that updating any live
code is very complicated.

00:47:30.150 --> 00:47:31.310
And we're trying
to make this easy

00:47:31.310 --> 00:47:32.630
and give you a
simple model for it.

00:47:32.630 --> 00:47:34.266
But we can describe
it at length later.

00:47:34.266 --> 00:47:35.200
AUDIENCE: Thank you.

00:47:35.200 --> 00:47:36.443
JAKE ARCHIBALD: All right,
and I think-- oh, we

00:47:36.443 --> 00:47:37.970
got one more from
the [INAUDIBLE].

00:47:37.970 --> 00:47:38.580
Make it quick.

00:47:38.580 --> 00:47:41.139
AUDIENCE: So for people
trying out ServiceWorkers,

00:47:41.139 --> 00:47:42.680
do you have a good
place where you're

00:47:42.680 --> 00:47:44.972
collecting all the feedback
and ideas and suggestions?

00:47:44.972 --> 00:47:46.430
ALEX RUSSELL: It's
a good question.

00:47:46.430 --> 00:47:49.610
So the specification
and a lot of the ideas

00:47:49.610 --> 00:47:52.570
that had been poured into it so
far-- sorry, the question was,

00:47:52.570 --> 00:47:54.970
how are we going to
be collecting feedback

00:47:54.970 --> 00:47:56.010
about ServiceWorkers?

00:47:56.010 --> 00:47:58.890
So a lot of the discussion has
moved to the public WebApps

00:47:58.890 --> 00:48:00.280
mailing list at the W3C.

00:48:00.280 --> 00:48:02.450
Because they're sort
of the organizing body

00:48:02.450 --> 00:48:05.610
that has decided to take on
the standardization effort.

00:48:05.610 --> 00:48:07.060
And that goes well.

00:48:07.060 --> 00:48:08.840
But a lot of the
action is happening

00:48:08.840 --> 00:48:10.085
on a GitHub repository.

00:48:10.085 --> 00:48:11.460
If you search for
ServiceWorkers,

00:48:11.460 --> 00:48:13.406
I think it might be the
first or second hit.

00:48:13.406 --> 00:48:14.780
JAKE ARCHIBALD:
So that first URL

00:48:14.780 --> 00:48:17.020
there is to the
status page that says

00:48:17.020 --> 00:48:18.682
which parts or which browsers.

00:48:18.682 --> 00:48:20.640
There is a link to the
spec from there as well.

00:48:20.640 --> 00:48:23.490
ALEX RUSSELL: Yeah, and
so file issues there.

00:48:23.490 --> 00:48:24.380
We do look at them.

00:48:24.380 --> 00:48:25.702
We are triaging them.

00:48:25.702 --> 00:48:27.160
Or send an email
to Public WebApps.

00:48:27.160 --> 00:48:28.870
And we will give it a look.

00:48:28.870 --> 00:48:30.430
JAKE ARCHIBALD:
Excellent, I think

00:48:30.430 --> 00:48:31.750
we're definitely out of time.

00:48:31.750 --> 00:48:33.160
So thank you very
much, everyone.

00:48:33.160 --> 00:48:33.660
Cheers.

00:48:33.660 --> 00:48:34.660
ALEX RUSSELL: Thank you.

00:48:34.660 --> 00:48:40.010
[APPLAUSE]

