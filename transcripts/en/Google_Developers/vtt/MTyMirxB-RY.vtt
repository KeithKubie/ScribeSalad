WEBVTT
Kind: captions
Language: en

00:00:08.460 --> 00:00:09.710
FELIPE HOFFA: Hello, everyone.

00:00:09.710 --> 00:00:13.260
I'm Felipe Hoffa from the
Google Cloud Platform team.

00:00:13.260 --> 00:00:17.176
Today we're going to review
the latest BigQuery news.

00:00:17.176 --> 00:00:18.520
Now we have streaming.

00:00:18.520 --> 00:00:23.370
And I'm here today with Aleem
Mawani, the founder of Streak.

00:00:23.370 --> 00:00:24.240
Hello, Aleem.

00:00:24.240 --> 00:00:24.990
How are you doing?

00:00:24.990 --> 00:00:26.448
ALEEM MAWANI: Thanks
for having me.

00:00:26.448 --> 00:00:28.530
FELIPE HOFFA: Oh, I'm
very happy to have you.

00:00:28.530 --> 00:00:30.379
You've been using
BigQuery for a long time.

00:00:30.379 --> 00:00:31.170
ALEEM MAWANI: Yeah.

00:00:31.170 --> 00:00:31.510
FELIPE HOFFA: Yeah.

00:00:31.510 --> 00:00:32.380
ALEEM MAWANI: About a
year and a half now.

00:00:32.380 --> 00:00:33.510
FELIPE HOFFA: Yeah.

00:00:33.510 --> 00:00:36.390
I know you met our
PM at a conference,

00:00:36.390 --> 00:00:38.469
and you asked him for
us to have streaming.

00:00:38.469 --> 00:00:39.260
ALEEM MAWANI: Yeah.

00:00:39.260 --> 00:00:42.650
That was the first feature
request I had from BigQuery--

00:00:42.650 --> 00:00:45.130
is once I saw how
powerful it was,

00:00:45.130 --> 00:00:48.289
I wanted to be able to throw
single rows of data at it.

00:00:48.289 --> 00:00:49.080
FELIPE HOFFA: Yeah.

00:00:49.080 --> 00:00:51.774
So you really wanted the
streaming, and now you have it.

00:00:51.774 --> 00:00:52.565
ALEEM MAWANI: Yeah.

00:00:52.565 --> 00:00:53.850
FELIPE HOFFA: Yeah.

00:00:53.850 --> 00:00:58.080
But before we go to see
how you're using it,

00:00:58.080 --> 00:00:58.840
what is Streak?

00:00:58.840 --> 00:00:59.120
ALEEM MAWANI: Sure.

00:00:59.120 --> 00:01:00.328
FELIPE HOFFA: Please tell us.

00:01:00.328 --> 00:01:02.820
ALEEM MAWANI: So
Streak is-- it lets

00:01:02.820 --> 00:01:05.540
you do business process
software right inside of Gmail.

00:01:05.540 --> 00:01:07.680
And so things like
sales processes,

00:01:07.680 --> 00:01:10.020
hiring, fundraising, deal flow.

00:01:10.020 --> 00:01:12.254
Even stuff like bug
tracking, we let

00:01:12.254 --> 00:01:13.670
you do that right
inside of Gmail.

00:01:13.670 --> 00:01:16.450
And we do that by having
a Chrome extension that

00:01:16.450 --> 00:01:19.920
injects our UI right
inside of Gmail.

00:01:19.920 --> 00:01:20.920
Yeah, and that's Streak.

00:01:20.920 --> 00:01:22.003
FELIPE HOFFA: That's cool.

00:01:22.003 --> 00:01:24.930
And I also know that once
you started using BigQuery,

00:01:24.930 --> 00:01:27.430
you did something
similar to Big Query?

00:01:27.430 --> 00:01:30.280
ALEEM MAWANI: Oh, yes.

00:01:30.280 --> 00:01:33.350
We're fans of taking existing
software and making it better.

00:01:33.350 --> 00:01:36.670
Like we're doing with Streak,
building on top of Gmail.

00:01:36.670 --> 00:01:39.210
And so for BigQuery we
wrote another extension

00:01:39.210 --> 00:01:40.850
that makes BigQuery better.

00:01:40.850 --> 00:01:43.310
And we called it the
BigQuery Developer Tools.

00:01:43.310 --> 00:01:45.740
And we put that on
the Chrome Web Store,

00:01:45.740 --> 00:01:48.280
and it basically adds a
few bells and whistles

00:01:48.280 --> 00:01:49.291
to the BigQuery UI.

00:01:49.291 --> 00:01:51.040
FELIPE HOFFA: And it's
available for free?

00:01:51.040 --> 00:01:52.170
ALEEM MAWANI: Yes,
yes, this is free.

00:01:52.170 --> 00:01:53.360
It's just for everyone to use.

00:01:53.360 --> 00:01:54.540
We open sourced it as well.

00:01:54.540 --> 00:01:54.850
FELIPE HOFFA: Oh,
that's wonderful.

00:01:54.850 --> 00:01:55.160
ALEEM MAWANI: Yeah.

00:01:55.160 --> 00:01:57.320
FELIPE HOFFA: So you
will be showing us how--

00:01:57.320 --> 00:01:58.695
ALEEM MAWANI:
Yeah, I'll show you

00:01:58.695 --> 00:02:01.190
a few examples of what it
can do and how we built it.

00:02:01.190 --> 00:02:01.500
FELIPE HOFFA: Awesome.

00:02:01.500 --> 00:02:02.960
What do you use BigQuery for?

00:02:04.949 --> 00:02:07.240
ALEEM MAWANI: The reason we
wanted streaming so much is

00:02:07.240 --> 00:02:10.340
because we use BigQuery
two main things, logging

00:02:10.340 --> 00:02:12.300
and event tracking.

00:02:12.300 --> 00:02:14.960
So application logging.

00:02:14.960 --> 00:02:16.410
Basically, all of
our server logs

00:02:16.410 --> 00:02:20.910
from App Engine are
pushed to BigQuery.

00:02:20.910 --> 00:02:25.800
So we use App Engine as our
server platform for Streak.

00:02:25.800 --> 00:02:28.850
And debugging errors,
seeing the performance

00:02:28.850 --> 00:02:31.670
of our application--
it's much better

00:02:31.670 --> 00:02:34.390
to view that log
data in BigQuery

00:02:34.390 --> 00:02:36.344
than it is in the App
Engine log console.

00:02:36.344 --> 00:02:37.260
FELIPE HOFFA: Oh, yes.

00:02:37.260 --> 00:02:38.760
Can you show me how you do it?

00:02:38.760 --> 00:02:38.980
ALEEM MAWANI: Sure.

00:02:38.980 --> 00:02:40.300
FELIPE HOFFA: Let's
do a demo, please.

00:02:40.300 --> 00:02:40.720
ALEEM MAWANI: Sure.

00:02:40.720 --> 00:02:42.290
So the first query
I want to show you

00:02:42.290 --> 00:02:48.020
guys is just a basic query
that shows the number of errors

00:02:48.020 --> 00:02:52.450
that we have on our server,
broken down by the endpoint.

00:02:52.450 --> 00:02:54.940
And so the great part
about using BigQuery

00:02:54.940 --> 00:02:57.590
to do log analysis
is that you can

00:02:57.590 --> 00:03:00.850
write a full on query,
and then group it,

00:03:00.850 --> 00:03:02.750
sort it, order by
whatever you want,

00:03:02.750 --> 00:03:07.440
as opposed to just doing regexes
in the App Engine log console.

00:03:07.440 --> 00:03:12.810
So to make this work, we
take our App Engine logs.

00:03:12.810 --> 00:03:15.970
And every minute
or two minutes, we

00:03:15.970 --> 00:03:18.290
parse the last two
minutes worth of logs.

00:03:18.290 --> 00:03:20.640
We split it up into
different columns,

00:03:20.640 --> 00:03:22.640
so we extract different
amounts of information--

00:03:22.640 --> 00:03:25.050
whether there was an error
at the host, the endpoint,

00:03:25.050 --> 00:03:26.100
the latency.

00:03:26.100 --> 00:03:27.940
Just all of the
relevant information,

00:03:27.940 --> 00:03:30.680
split it up into columns, and
then put it into BigQuery.

00:03:30.680 --> 00:03:34.160
And so this first query
that I'm showing you,

00:03:34.160 --> 00:03:39.350
we're basically taking all
the logs that have errors,

00:03:39.350 --> 00:03:42.920
grouping them by the
endpoint, and then sorting

00:03:42.920 --> 00:03:44.250
by how many errors there are.

00:03:44.250 --> 00:03:51.770
So if I run this
query-- and these errors

00:03:51.770 --> 00:03:54.430
are sort of streamed
right to BigQuery.

00:03:54.430 --> 00:03:57.260
So you'll see these are
a bunch of difference

00:03:57.260 --> 00:03:59.140
endpoints on our server.

00:03:59.140 --> 00:04:00.920
And then the number
of errors that we've

00:04:00.920 --> 00:04:05.901
received on those endpoints
since this table started

00:04:05.901 --> 00:04:06.400
logging.

00:04:06.400 --> 00:04:08.362
Now the good part is
I can restrict this.

00:04:08.362 --> 00:04:09.820
I can add another
WHERE clause that

00:04:09.820 --> 00:04:12.440
says in the last hour
or the last 24 hours.

00:04:12.440 --> 00:04:15.590
And we can also use decorators
as part of the streaming

00:04:15.590 --> 00:04:17.141
to make it even cheaper.

00:04:17.141 --> 00:04:19.640
So this is kind of stuff that
we do, just that a high level,

00:04:19.640 --> 00:04:22.102
to see-- monitoring
general application health.

00:04:22.102 --> 00:04:23.310
FELIPE HOFFA: That's awesome.

00:04:23.310 --> 00:04:26.930
So now you know what
errors are happening today,

00:04:26.930 --> 00:04:28.840
in the last hour,
whenever you want.

00:04:28.840 --> 00:04:30.700
What do you do next
if you have an error?

00:04:30.700 --> 00:04:31.491
ALEEM MAWANI: Yeah.

00:04:31.491 --> 00:04:33.490
So if we have an error,
then-- so for example,

00:04:33.490 --> 00:04:35.781
if we've noticed an error
that we've never seen before,

00:04:35.781 --> 00:04:38.570
or an endpoint that's
failing higher than normal,

00:04:38.570 --> 00:04:44.430
we'll run another query that
looks something like this one.

00:04:44.430 --> 00:04:49.350
Basically, this just says show
me all the details of the logs.

00:04:49.350 --> 00:04:52.110
Show me the full set of columns.

00:04:52.110 --> 00:04:55.210
Because in this case, we
want to see the actual log

00:04:55.210 --> 00:04:57.440
entries themselves and
not do any grouping.

00:04:57.440 --> 00:05:01.740
So in this case,
I'll run this query.

00:05:01.740 --> 00:05:03.450
It's just going to
take a second to load.

00:05:03.450 --> 00:05:05.400
The good part here
is that we can

00:05:05.400 --> 00:05:08.230
see a full application
stack trace inside

00:05:08.230 --> 00:05:12.100
of BigQuery because we
export the full log.

00:05:12.100 --> 00:05:13.750
We extract those
columns, but we also

00:05:13.750 --> 00:05:15.610
export the full stack trace.

00:05:15.610 --> 00:05:17.610
FELIPE HOFFA: Can you see
the stack trace there?

00:05:17.610 --> 00:05:18.401
ALEEM MAWANI: Yeah.

00:05:18.401 --> 00:05:21.630
So for example,
this first row here.

00:05:21.630 --> 00:05:22.360
We have the path.

00:05:22.360 --> 00:05:28.860
And the first line of the
stack trace is right here.

00:05:28.860 --> 00:05:30.900
Now BigQuery doesn't
like multi-line text.

00:05:30.900 --> 00:05:33.750
So as part of the extension
I mentioned earlier,

00:05:33.750 --> 00:05:37.560
we added this feature where you
could click on the row number,

00:05:37.560 --> 00:05:43.990
and it would let you see
multi-line text right inside

00:05:43.990 --> 00:05:44.780
of BigQuery.

00:05:44.780 --> 00:05:45.996
FELIPE HOFFA: On the web UI?

00:05:45.996 --> 00:05:47.370
ALEEM MAWANI: Yes,
in the web UI.

00:05:47.370 --> 00:05:48.270
Yes.

00:05:48.270 --> 00:05:53.360
So you can see here, this
is the full stack trace

00:05:53.360 --> 00:05:54.450
of the entire request.

00:05:54.450 --> 00:05:56.240
And then there's an error here.

00:05:56.240 --> 00:05:58.864
In this case, it happens to be
a concurrent modification error.

00:05:58.864 --> 00:06:01.769
So we can debug using BigQuery
as opposed to some other tool.

00:06:01.769 --> 00:06:03.310
FELIPE HOFFA: But
you were telling me

00:06:03.310 --> 00:06:05.405
you are getting
errors all the time.

00:06:05.405 --> 00:06:07.190
ALEEM MAWANI: Oh yeah.

00:06:07.190 --> 00:06:09.770
FELIPE HOFFA: How do you know
what is normal, what is--

00:06:09.770 --> 00:06:10.970
ALEEM MAWANI: I see.

00:06:10.970 --> 00:06:16.680
So one thing we do is we power
our dashboards-- our monitoring

00:06:16.680 --> 00:06:18.820
dashboards, and also
dashboards in our office--

00:06:18.820 --> 00:06:21.970
that show the error rates
of our server over time.

00:06:21.970 --> 00:06:25.910
So that's another query, the
number of errors at that time.

00:06:25.910 --> 00:06:32.650
And what this does is just
shows a time series of errors.

00:06:32.650 --> 00:06:35.260
And so you see this
query here breaks down

00:06:35.260 --> 00:06:38.360
the number of shares
by hour in the day.

00:06:38.360 --> 00:06:40.920
And not on this specific
path, but just in general.

00:06:40.920 --> 00:06:45.300
And so if we see a spike, then
we know to sort of take action.

00:06:45.300 --> 00:06:47.590
So we have a dashboard
that has that ability.

00:06:47.590 --> 00:06:50.090
But we also, as part of
the BigQuery extension,

00:06:50.090 --> 00:06:53.900
again, that we wrote,
we can graph this kind

00:06:53.900 --> 00:06:55.330
of stuff right
inside of BigQuery.

00:06:55.330 --> 00:06:57.660
So if you saw that
but I basically we

00:06:57.660 --> 00:06:59.840
had a button here called
the Timeseries Graph.

00:06:59.840 --> 00:07:03.780
And it takes whatever data
is in this result table

00:07:03.780 --> 00:07:05.660
and it makes a time
series out of it.

00:07:05.660 --> 00:07:09.157
So right here, we can see-- last
night, we had a ton of errors,

00:07:09.157 --> 00:07:10.740
and then they've
sort of settled down.

00:07:10.740 --> 00:07:13.360
And again this morning,
we saw a few more.

00:07:13.360 --> 00:07:15.112
And so we monitor
them on the dashboard,

00:07:15.112 --> 00:07:16.570
but also we can
see the graph here.

00:07:16.570 --> 00:07:18.760
FELIPE HOFFA: Oh,
that's so cool.

00:07:18.760 --> 00:07:21.689
Other than errors,
performance is important.

00:07:21.689 --> 00:07:22.480
ALEEM MAWANI: Yeah.

00:07:22.480 --> 00:07:22.710
FELIPE HOFFA: Yes.

00:07:22.710 --> 00:07:23.501
ALEEM MAWANI: Yeah.

00:07:23.501 --> 00:07:26.910
So we want to make sure our
application is fast for users.

00:07:26.910 --> 00:07:31.345
And so one way to do that
is just by hand, playing

00:07:31.345 --> 00:07:32.220
with the application.

00:07:32.220 --> 00:07:34.710
But another way is
obviously measurement.

00:07:34.710 --> 00:07:38.910
And so what we do in
all of our endpoints

00:07:38.910 --> 00:07:42.130
is we log to our App
Engine logs how long

00:07:42.130 --> 00:07:43.130
certain operations took.

00:07:43.130 --> 00:07:46.880
So for example, our
application queries

00:07:46.880 --> 00:07:48.482
a lot of data from
the data store.

00:07:48.482 --> 00:07:49.940
And then it has a
bunch of results,

00:07:49.940 --> 00:07:51.510
and it wants us to ship
it down to the client.

00:07:51.510 --> 00:07:53.800
In order to do that, it has
to serialize it to JSON.

00:07:53.800 --> 00:07:56.630
So that operation,
we measure the time

00:07:56.630 --> 00:07:58.800
it takes to do that
operation, and then

00:07:58.800 --> 00:08:00.470
we just output it to the logs.

00:08:00.470 --> 00:08:02.990
Now once it's outputed to the
logs, it ends up in BigQuery.

00:08:02.990 --> 00:08:05.580
And now we query over it and
do all sorts of stuff with it.

00:08:05.580 --> 00:08:08.000
You can find mins,
maxes, means, averages,

00:08:08.000 --> 00:08:09.150
all that kind of stuff.

00:08:09.150 --> 00:08:13.250
So in this case, what we're
doing is the serialization

00:08:13.250 --> 00:08:14.860
time, we output it to the logs.

00:08:14.860 --> 00:08:16.360
But it's just in a
plain text field.

00:08:16.360 --> 00:08:17.100
It's not in a column.

00:08:17.100 --> 00:08:18.550
So we're using
regular expressions

00:08:18.550 --> 00:08:20.820
to extract it from
one of the columns,

00:08:20.820 --> 00:08:24.683
convert it to an integer, and
then run some analysis over it.

00:08:24.683 --> 00:08:26.766
So you'll see that the
results in this case, there

00:08:26.766 --> 00:08:29.220
are a bunch of different
endpoints here.

00:08:29.220 --> 00:08:31.114
First we show the
number of times

00:08:31.114 --> 00:08:32.280
that endpoint was requested.

00:08:32.280 --> 00:08:34.900
But then the second one
is, how long on average

00:08:34.900 --> 00:08:36.570
it took to do that
stabilization.

00:08:36.570 --> 00:08:38.829
So right away, we see
1,400 milliseconds.

00:08:38.829 --> 00:08:41.039
It's a crazy long amount time.

00:08:41.039 --> 00:08:43.429
And then some are really
short, 11 milliseconds.

00:08:43.429 --> 00:08:46.030
And then some, on average,
are really, really long.

00:08:46.030 --> 00:08:48.690
So what should we focus
on Next what we really

00:08:48.690 --> 00:08:52.860
do is look at the number
of hits times the mean

00:08:52.860 --> 00:08:55.630
to know the total time spent.

00:08:55.630 --> 00:08:57.200
And that's where we
focus our efforts

00:08:57.200 --> 00:08:58.185
on performance optimization.

00:08:58.185 --> 00:08:58.590
FELIPE HOFFA: Yeah.

00:08:58.590 --> 00:09:00.340
So you don't want to
focus on slow things.

00:09:00.340 --> 00:09:02.580
You want to focus on slow
things that happen a lot.

00:09:02.580 --> 00:09:03.365
ALEEM MAWANI: Exactly, exactly.

00:09:03.365 --> 00:09:03.750
FELIPE HOFFA: That's cool.

00:09:03.750 --> 00:09:05.810
I also want to highlight
what you're doing here.

00:09:05.810 --> 00:09:09.920
The ability to run a regular
expression over a full table,

00:09:09.920 --> 00:09:11.600
and transforming
them to integers,

00:09:11.600 --> 00:09:12.960
and then doing all the math?

00:09:12.960 --> 00:09:13.280
ALEEM MAWANI: Exactly.

00:09:13.280 --> 00:09:15.110
FELIPE HOFFA: That's one of
the reasons I like BigQuery

00:09:15.110 --> 00:09:15.609
so much.

00:09:15.609 --> 00:09:16.870
ALEEM MAWANI: Yeah.

00:09:16.870 --> 00:09:18.820
Yeah, there's no
other way we could

00:09:18.820 --> 00:09:21.442
have done that using the typical
App Engine logging system.

00:09:21.442 --> 00:09:22.233
FELIPE HOFFA: Yeah.

00:09:22.233 --> 00:09:23.238
Oh, that's cool.

00:09:23.238 --> 00:09:26.474
Tell me, how many
customers do you have?

00:09:26.474 --> 00:09:28.390
ALEEM MAWANI: So we have
hundreds of thousands

00:09:28.390 --> 00:09:29.320
of users in Streak.

00:09:29.320 --> 00:09:30.880
FELIPE HOFFA: Users.

00:09:30.880 --> 00:09:32.900
ALEEM MAWANI: And
it's a lot users,

00:09:32.900 --> 00:09:34.380
and so there's a lot of traffic.

00:09:34.380 --> 00:09:36.010
And so the streaming
ingestion actually

00:09:36.010 --> 00:09:37.510
helps so much
because we can just

00:09:37.510 --> 00:09:40.040
push all this data to
BigQuery as it happens.

00:09:40.040 --> 00:09:41.930
FELIPE HOFFA: Yeah.

00:09:41.930 --> 00:09:44.492
To my needs, 100,000
users is not easy.

00:09:44.492 --> 00:09:45.200
ALEEM MAWANI: No.

00:09:45.200 --> 00:09:46.370
FELIPE HOFFA: You're
using BigQuery, then,

00:09:46.370 --> 00:09:47.760
to know what they're doing?

00:09:47.760 --> 00:09:48.870
ALEEM MAWANI: Yeah.

00:09:48.870 --> 00:09:51.210
The second use case
that we use BigQuery for

00:09:51.210 --> 00:09:55.550
is to understand what our users
are doing in the application.

00:09:55.550 --> 00:09:59.577
And so literally every click,
every page they go to-- I mean,

00:09:59.577 --> 00:10:00.910
this is typical analytics stuff.

00:10:00.910 --> 00:10:05.000
But instead of putting
the event tracking data

00:10:05.000 --> 00:10:07.090
into something like Google
Analytics or Mixpanel

00:10:07.090 --> 00:10:10.440
or some of these other
services, we actually

00:10:10.440 --> 00:10:11.897
put it straight into BigQuery.

00:10:11.897 --> 00:10:12.980
And there's a few reasons.

00:10:12.980 --> 00:10:15.540
One is we can write arbitrary
queries against our data.

00:10:15.540 --> 00:10:19.360
We're not limited to some UI
that doesn't do what we want.

00:10:19.360 --> 00:10:23.020
And then also, we can join
those event tracking tables

00:10:23.020 --> 00:10:26.390
to other tables that we have
in BigQuery, such as the logs.

00:10:26.390 --> 00:10:29.110
But also, we have a mirror
of our App Engine Datastore

00:10:29.110 --> 00:10:30.850
in BigQuery as well.

00:10:30.850 --> 00:10:33.630
So we can do a join across
that and see four users

00:10:33.630 --> 00:10:37.650
to meet this profile,
what's their behavior?

00:10:37.650 --> 00:10:40.752
Or for users who live in this
country, how do they perform?

00:10:40.752 --> 00:10:42.210
FELIPE HOFFA: Can
you show me that?

00:10:42.210 --> 00:10:44.261
ALEEM MAWANI: Sure.

00:10:44.261 --> 00:10:45.260
FELIPE HOFFA: I love it.

00:10:45.260 --> 00:10:46.080
ALEEM MAWANI: Yeah.

00:10:46.080 --> 00:10:49.740
I'll show you a little
bit of a toy example.

00:10:49.740 --> 00:10:54.660
So one thing we do is, because
we're inside of Gmail, we also

00:10:54.660 --> 00:10:57.310
record events that
Gmail users do.

00:10:57.310 --> 00:10:58.800
So when they go
to a conversation

00:10:58.800 --> 00:11:00.174
or when they go
to search or when

00:11:00.174 --> 00:11:03.600
they go to a label--
of course, anonymously.

00:11:03.600 --> 00:11:05.640
And so this query
I want to show you

00:11:05.640 --> 00:11:14.600
is how people use Gmail for
people who live in Boston

00:11:14.600 --> 00:11:15.980
versus people who live in Miami.

00:11:15.980 --> 00:11:18.670
Do they use Gmail
or any differently?

00:11:18.670 --> 00:11:20.720
And so I just did a query here.

00:11:20.720 --> 00:11:21.960
This is a very simple query.

00:11:21.960 --> 00:11:24.310
All it's doing is looking
at all of our Gmail events.

00:11:24.310 --> 00:11:27.390
So whether they open an
email, compose an email

00:11:27.390 --> 00:11:30.460
go to search, whatever--
for every hour

00:11:30.460 --> 00:11:32.590
of the day for
the last 24 hours.

00:11:32.590 --> 00:11:35.980
And then broken out
by Miami and Boston.

00:11:35.980 --> 00:11:39.820
And so here it is by hour.

00:11:39.820 --> 00:11:42.350
Actually, the graph
but didn't work.

00:11:42.350 --> 00:11:44.110
Let me just refresh that.

00:11:46.992 --> 00:11:48.200
Sorry, just give me a second.

00:11:52.312 --> 00:11:53.260
So I'll run it again.

00:11:56.572 --> 00:11:58.030
FELIPE HOFFA: I
see what it counts.

00:11:58.030 --> 00:12:00.842
Looking for people
between Boston and Miami

00:12:00.842 --> 00:12:02.064
during the same timezone.

00:12:02.064 --> 00:12:02.980
ALEEM MAWANI: Exactly.

00:12:02.980 --> 00:12:03.800
Same time zone.

00:12:03.800 --> 00:12:07.330
And we just want to see
how their usage differs.

00:12:07.330 --> 00:12:12.212
And so I have the results here,
broken out by hour of the day.

00:12:12.212 --> 00:12:13.670
And I can use the
time series graph

00:12:13.670 --> 00:12:15.580
that I showed you guys earlier.

00:12:15.580 --> 00:12:20.530
And the red line is Boston
and the blue line is Miami.

00:12:20.530 --> 00:12:24.200
And so in this case, we can see
that in Miami, people actually

00:12:24.200 --> 00:12:26.880
prefer working in the
mornings much more.

00:12:26.880 --> 00:12:31.950
In general, it follows
a pretty similar curve.

00:12:31.950 --> 00:12:33.950
But you'll notice that
around 8:00 or 9:00

00:12:33.950 --> 00:12:38.140
AM, people in Miami
actually work more than--

00:12:38.140 --> 00:12:41.230
or do more email than--
people in Boston.

00:12:41.230 --> 00:12:43.150
And that could be
for various reasons.

00:12:43.150 --> 00:12:46.610
Maybe the way people commute
in Boston is different.

00:12:46.610 --> 00:12:48.290
And so this kind
of stuff helps us

00:12:48.290 --> 00:12:51.490
find different usage
patterns of our users.

00:12:51.490 --> 00:12:53.920
This is a toy example,
but we use it quite--

00:12:53.920 --> 00:12:56.211
FELIPE HOFFA: So if you want
to call them, for example,

00:12:56.211 --> 00:12:58.080
you know when is the
best time to call them

00:12:58.080 --> 00:13:00.839
based on where they are-- even
if it's the same time zone?

00:13:00.839 --> 00:13:02.130
ALEEM MAWANI: Exactly, exactly.

00:13:02.130 --> 00:13:05.140
Right now, we're just using
the data to analyze our users.

00:13:05.140 --> 00:13:07.580
But eventually, we can give
the same data to our users

00:13:07.580 --> 00:13:10.532
to help them be more
effective in what they do.

00:13:10.532 --> 00:13:11.740
FELIPE HOFFA: That's perfect.

00:13:11.740 --> 00:13:12.695
ALEEM MAWANI: Yeah.

00:13:12.695 --> 00:13:14.278
FELIPE HOFFA: I have
another question,

00:13:14.278 --> 00:13:17.120
because I know you can do
this and I love how you do it.

00:13:17.120 --> 00:13:19.020
BigQuery queries can
get very complicated.

00:13:19.020 --> 00:13:20.560
That one is a very long run.

00:13:20.560 --> 00:13:21.544
ALEEM MAWANI: Yeah.

00:13:21.544 --> 00:13:23.460
FELIPE HOFFA: How do you
manage to write them?

00:13:23.460 --> 00:13:23.860
ALEEM MAWANI: Yes.

00:13:23.860 --> 00:13:25.830
So I want to show you
another query that's

00:13:25.830 --> 00:13:28.660
really complicated.

00:13:28.660 --> 00:13:32.680
And basically, what we did
here is build a funnel.

00:13:32.680 --> 00:13:35.520
So if I could just
show you our home page.

00:13:35.520 --> 00:13:36.910
This is the home
page for Streak.

00:13:36.910 --> 00:13:39.970
This is how our users
get started with streak.

00:13:39.970 --> 00:13:42.490
And basically, they
come to our site

00:13:42.490 --> 00:13:45.050
and they see one
big play button.

00:13:45.050 --> 00:13:46.920
And that Play button
basically takes

00:13:46.920 --> 00:13:49.720
them to watch various
different videos

00:13:49.720 --> 00:13:51.260
based on what their use case is.

00:13:51.260 --> 00:13:54.030
So our goal is, a user comes
our site, they watch a video.

00:13:54.030 --> 00:13:56.850
And then they like it, and
so they click this big orange

00:13:56.850 --> 00:13:58.700
install button.

00:13:58.700 --> 00:14:01.490
And so we want to know how
many people are making it

00:14:01.490 --> 00:14:05.746
through that funnel, and what
the drop off is at each stage.

00:14:05.746 --> 00:14:08.120
FELIPE HOFFA: You have to
visit your website to get the--

00:14:08.120 --> 00:14:09.036
ALEEM MAWANI: Exactly.

00:14:09.036 --> 00:14:12.120
FELIPE HOFFA: Once you get them
here, what should you show them

00:14:12.120 --> 00:14:12.900
what's the--

00:14:12.900 --> 00:14:13.816
ALEEM MAWANI: Exactly.

00:14:13.816 --> 00:14:17.090
What's the best way for them
to end up installing Streak.

00:14:17.090 --> 00:14:20.620
And so we wrote this query that
basically uses those events.

00:14:20.620 --> 00:14:23.809
So each one of those clicks
on the website-- whether they

00:14:23.809 --> 00:14:26.100
click on this, or the install
button, or a video-- each

00:14:26.100 --> 00:14:28.850
one of those clicks is an event
that we create, and we just

00:14:28.850 --> 00:14:30.740
stream it right to BigQuery.

00:14:30.740 --> 00:14:33.196
So we have all these
events inside of BigQuery.

00:14:33.196 --> 00:14:34.570
Now we have to
write a query that

00:14:34.570 --> 00:14:35.736
actually does that analysis.

00:14:35.736 --> 00:14:38.140
And that query is
actually nontrivial

00:14:38.140 --> 00:14:40.100
because it's kind
of like a funnel.

00:14:40.100 --> 00:14:41.980
And so we can run the query.

00:14:41.980 --> 00:14:43.730
And it's kind of
a pain to write.

00:14:43.730 --> 00:14:45.396
I mean, you can see
how long it is here.

00:14:45.396 --> 00:14:47.050
It doesn't even
fit on the screen.

00:14:47.050 --> 00:14:49.160
And so we wanted
to make it easier

00:14:49.160 --> 00:14:50.675
to write funnels, specifically.

00:14:53.520 --> 00:14:55.060
So first of all,
here's the results

00:14:55.060 --> 00:14:58.770
of the query, which is
if you watch this video,

00:14:58.770 --> 00:15:02.350
then here's the
percentage chance

00:15:02.350 --> 00:15:04.480
that you actually installed it.

00:15:04.480 --> 00:15:07.170
If you watch this video, then
here's the percentage chance.

00:15:07.170 --> 00:15:10.324
So it's clear that if
you watch this video--

00:15:10.324 --> 00:15:12.240
we want users to watch
this video because they

00:15:12.240 --> 00:15:14.800
have a higher chance installing.

00:15:14.800 --> 00:15:16.530
But this query a pain to write.

00:15:16.530 --> 00:15:20.490
And so we did something
else, which was we

00:15:20.490 --> 00:15:22.410
created a sort of mini syntax.

00:15:22.410 --> 00:15:25.640
A syntax that let us
write funnels easier.

00:15:25.640 --> 00:15:27.320
So I can just walk
you through it.

00:15:27.320 --> 00:15:28.930
The first line is funnel.

00:15:28.930 --> 00:15:31.340
So you're just telling
us that hey, you're

00:15:31.340 --> 00:15:33.430
going to be making
a final query.

00:15:33.430 --> 00:15:36.620
You tell us what table you
want to do this funnel over.

00:15:36.620 --> 00:15:40.420
And so in our case,
it's the events table.

00:15:40.420 --> 00:15:44.300
And then you give us a column
that specifies that session

00:15:44.300 --> 00:15:46.970
ID or some unique
identifier in the table,

00:15:46.970 --> 00:15:50.552
such that we can track
the same user over time.

00:15:50.552 --> 00:15:53.080
You give us a few other columns.

00:15:53.080 --> 00:15:55.430
And then the interesting
part is you just

00:15:55.430 --> 00:15:59.000
give us a comma- separated list
of the event names you want.

00:15:59.000 --> 00:16:02.020
So in this case it was a
user visited the home page

00:16:02.020 --> 00:16:03.430
without the extension installed.

00:16:03.430 --> 00:16:05.710
The next event was they
pressed the Download button.

00:16:05.710 --> 00:16:08.100
The next event was the
download was successful.

00:16:08.100 --> 00:16:11.027
And the next event
was they logged in

00:16:11.027 --> 00:16:13.110
and a new account was
created, was the file event.

00:16:13.110 --> 00:16:14.546
So that's our sign-up funnel.

00:16:14.546 --> 00:16:16.420
And so we want to see
how many people make it

00:16:16.420 --> 00:16:17.253
through that funnel.

00:16:17.253 --> 00:16:21.420
So instead of writing
this crazy nested query,

00:16:21.420 --> 00:16:23.537
we added a functionality
to the BigQuery extension

00:16:23.537 --> 00:16:25.620
that we wrote, where you
just specify it like this

00:16:25.620 --> 00:16:27.660
and then you press the
Expand Templates button.

00:16:27.660 --> 00:16:32.000
And now you can see it
auto-generated this giant query

00:16:32.000 --> 00:16:33.900
for you to do that funnel.

00:16:33.900 --> 00:16:37.210
And so now I can
just run the query,

00:16:37.210 --> 00:16:40.730
and I didn't have to write
this big, monstrous thing.

00:16:40.730 --> 00:16:42.260
So this is sort
of an alternative

00:16:42.260 --> 00:16:45.410
to making your own page
that has your own interface

00:16:45.410 --> 00:16:46.340
and stuff like that.

00:16:46.340 --> 00:16:48.524
We just used
BigQuery's interface,

00:16:48.524 --> 00:16:50.440
but added a little bit
of functionality to it.

00:16:50.440 --> 00:16:50.930
FELIPE HOFFA: I love that.

00:16:50.930 --> 00:16:51.721
ALEEM MAWANI: Yeah.

00:16:51.721 --> 00:16:53.676
FELIPE HOFFA: Oh, that's great.

00:16:53.676 --> 00:16:54.800
Thank you very much, Aleem.

00:16:54.800 --> 00:16:55.150
ALEEM MAWANI: No problem

00:16:55.150 --> 00:16:56.720
FELIPE HOFFA: I think we
will leave it here now.

00:16:56.720 --> 00:16:57.790
ALEEM MAWANI: Great.

00:16:57.790 --> 00:16:59.260
FELIPE HOFFA: If people
want to install the BigQuery

00:16:59.260 --> 00:16:59.779
extension--

00:16:59.779 --> 00:17:00.570
ALEEM MAWANI: Yeah.

00:17:00.570 --> 00:17:02.610
So the BigQuery
extension you can

00:17:02.610 --> 00:17:05.260
get in the Chrome Web Store.

00:17:05.260 --> 00:17:08.050
Just search for Streak
Developer Tools.

00:17:08.050 --> 00:17:09.627
If you want to use
Streak itself--

00:17:09.627 --> 00:17:11.710
it's great for bug tracking,
product development--

00:17:11.710 --> 00:17:13.751
you can get that in the
Chrome Web Store as well,

00:17:13.751 --> 00:17:15.736
and just search for Streak
or go to streak.com.

00:17:15.736 --> 00:17:17.152
FELIPE HOFFA: And
my last question

00:17:17.152 --> 00:17:20.450
is, how are you getting the
appending logs to BigQuery?

00:17:20.450 --> 00:17:23.560
ALEEM MAWANI: So we wrote
it in open source framework

00:17:23.560 --> 00:17:28.624
that pushes logs from App Engine
to BigQuery automatically.

00:17:28.624 --> 00:17:30.540
And you just have to
install this one library.

00:17:30.540 --> 00:17:31.720
It's really easy.

00:17:31.720 --> 00:17:34.100
And that's open
source, it's on GitHub.

00:17:34.100 --> 00:17:38.240
It's github.com/streakyc/mache.

00:17:38.240 --> 00:17:39.760
And I'm sure they'll
put up the URL.

00:17:39.760 --> 00:17:41.427
FELIPE HOFFA: Yes,
the URL will be here.

00:17:41.427 --> 00:17:42.218
ALEEM MAWANI: Yeah.

00:17:42.218 --> 00:17:43.320
FELIPE HOFFA: Yes.

00:17:43.320 --> 00:17:44.900
Well, thank you
very much, Aleem.

00:17:44.900 --> 00:17:45.230
ALEEM MAWANI: No problem.

00:17:45.230 --> 00:17:46.810
FELIPE HOFFA: Everybody,
please check out Streak.

00:17:46.810 --> 00:17:47.910
It's a great product.

00:17:47.910 --> 00:17:50.334
They take the extensions
they're writing--

00:17:50.334 --> 00:17:51.625
ALEEM MAWANI: And we're hiring.

00:17:51.625 --> 00:17:53.880
FELIPE HOFFA:
They're hiring, yes.

00:17:53.880 --> 00:17:57.419
It's a great time to be
a developer, so yeah.

00:17:57.419 --> 00:17:58.710
You are based in San Francisco?

00:17:58.710 --> 00:17:59.300
ALEEM MAWANI: Based
in San Francisco,

00:17:59.300 --> 00:18:00.970
and we love Google
Cloud Platform.

00:18:00.970 --> 00:18:03.410
And so if you're into
that, we're always hiring.

00:18:03.410 --> 00:18:03.800
FELIPE HOFFA: Awesome.

00:18:03.800 --> 00:18:04.240
ALEEM MAWANI: Yep.

00:18:04.240 --> 00:18:04.920
FELIPE HOFFA: Thank
you very much.

00:18:04.920 --> 00:18:07.910
I'm Felipe Hoffa, with Aleem
Mawani, the founder of Streak.

00:18:07.910 --> 00:18:09.460
ALEEM MAWANI: Thanks.

