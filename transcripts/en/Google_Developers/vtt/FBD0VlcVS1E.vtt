WEBVTT
Kind: captions
Language: en

00:00:03.864 --> 00:00:05.766
NICHOLAS JITKOFF: Good
afternoon, everybody.

00:00:05.766 --> 00:00:07.890
Thank you for joining us
for all of these sessions.

00:00:07.890 --> 00:00:10.020
This is the last of the
material design ones

00:00:10.020 --> 00:00:12.081
and we've saved
the best for last.

00:00:12.081 --> 00:00:14.205
Motion is a key part of
everything that we're doing

00:00:14.205 --> 00:00:16.930
and it deeply integrates into
many of the other disciplines

00:00:16.930 --> 00:00:18.712
that we're thinking about.

00:00:18.712 --> 00:00:21.170
I'm Nicholas, and I'm here with
a bunch of Motion designers

00:00:21.170 --> 00:00:22.060
from across Google.

00:00:22.060 --> 00:00:23.490
To start with, Ari
and I are going

00:00:23.490 --> 00:00:26.110
to talk about some foundational
aspects of motion design

00:00:26.110 --> 00:00:27.992
and then Helen,
Manuel, and Gus are

00:00:27.992 --> 00:00:30.200
going to talk about actually
applying Motion designed

00:00:30.200 --> 00:00:32.482
to different form
factors we've got.

00:00:32.482 --> 00:00:34.940
It's only recently that motion
has become deeply considered

00:00:34.940 --> 00:00:38.347
in user interfaces, despite
a long history of the media.

00:00:38.347 --> 00:00:40.680
In film, movement has always
been used for storytelling.

00:00:40.680 --> 00:00:43.260
NUIs that appear in
films will reflect this.

00:00:43.260 --> 00:00:46.680
They support overall story
arc but often lack substance.

00:00:46.680 --> 00:00:48.410
Video games have
a similar problem,

00:00:48.410 --> 00:00:50.950
in that they have these
very immersive stylized UIs,

00:00:50.950 --> 00:00:53.530
but they're very specialized
to a specific kind of task.

00:00:53.530 --> 00:00:55.482
Traditionally UIs
are more versatile

00:00:55.482 --> 00:00:57.190
and we see motion
applied there, but it's

00:00:57.190 --> 00:00:59.280
often like a superficial
layer applied very late

00:00:59.280 --> 00:01:00.272
in the process.

00:01:00.272 --> 00:01:02.730
So when we were thinking about
all this we asked ourselves,

00:01:02.730 --> 00:01:06.112
how can we use motion
to truly improve UX.

00:01:06.112 --> 00:01:07.570
In the session
yesterday, we talked

00:01:07.570 --> 00:01:09.510
about using motion
to provide meaning.

00:01:09.510 --> 00:01:11.090
Particularly,
taking user actions

00:01:11.090 --> 00:01:13.100
and connecting them with
the events that follow.

00:01:13.100 --> 00:01:14.380
And this is sort of
the nature of stories

00:01:14.380 --> 00:01:15.750
that show up in our UIs.

00:01:15.750 --> 00:01:17.660
Every app and
feature and action,

00:01:17.660 --> 00:01:21.490
tell a fragment of a story that
propagate throughout the day,

00:01:21.490 --> 00:01:24.360
and explain everything
that has happened.

00:01:24.360 --> 00:01:28.410
Interaction design is
also informed by motion.

00:01:28.410 --> 00:01:30.782
In this album
example you can see,

00:01:30.782 --> 00:01:32.990
this sliding up and down of
the album and the ability

00:01:32.990 --> 00:01:36.420
to pull on it, affords
the pull gestures

00:01:36.420 --> 00:01:38.637
that can show or dismiss it.

00:01:38.637 --> 00:01:40.970
For this reason, we would
like to try to consider motion

00:01:40.970 --> 00:01:43.303
as we're trying to do the
interaction design to say, how

00:01:43.303 --> 00:01:44.940
can motion be used
to indicate what

00:01:44.940 --> 00:01:47.810
is possible in these
places and refine it down

00:01:47.810 --> 00:01:51.114
so it doesn't have
to be as complicated.

00:01:51.114 --> 00:01:52.530
There's one other
variable we like

00:01:52.530 --> 00:01:54.800
to consider when we
do this-- the user.

00:01:54.800 --> 00:01:56.760
In all of our stories,
the user is the driver.

00:01:56.760 --> 00:01:58.551
For that reason we base
as many transitions

00:01:58.551 --> 00:02:01.350
as we can on the user's
touch, giving custom responses

00:02:01.350 --> 00:02:03.550
to every single gesture.

00:02:03.550 --> 00:02:07.000
This is why we liked the
notion of an advanced material

00:02:07.000 --> 00:02:11.230
as the thing that we
build all UIs out of.

00:02:11.230 --> 00:02:13.740
The touch ripples and the
magnetic attraction of it

00:02:13.740 --> 00:02:16.110
to your finger
reinforce the fact

00:02:16.110 --> 00:02:18.450
that the user is
causing these changes.

00:02:18.450 --> 00:02:21.561
We want to feel like you're
the one giving life to the UI.

00:02:21.561 --> 00:02:23.310
This isn't really only
to a single control

00:02:23.310 --> 00:02:25.226
but actually, to transitions
happen elsewhere.

00:02:25.226 --> 00:02:26.790
In this slowed-down
version, you can

00:02:26.790 --> 00:02:29.260
see that the touch can
affect other controls

00:02:29.260 --> 00:02:31.992
on the screen in a cascade
of different delays, that

00:02:31.992 --> 00:02:34.450
makes it feel like they're all
tied to that original event.

00:02:34.450 --> 00:02:36.590
And the purpose of this is
actually simplification.

00:02:36.590 --> 00:02:38.984
By hiding things inside
of this energy wave,

00:02:38.984 --> 00:02:41.150
you actually can have a lot
more detail in something

00:02:41.150 --> 00:02:44.674
that feels very simple and
has a very clear cause.

00:02:44.674 --> 00:02:46.590
This combination of
meaningful motion and user

00:02:46.590 --> 00:02:49.875
initiated change are two
core principles in our work.

00:02:49.875 --> 00:02:51.500
And they represent
a continual dialogue

00:02:51.500 --> 00:02:53.420
between the user and
the system, and a wave

00:02:53.420 --> 00:02:54.885
of teaching and training.

00:02:54.885 --> 00:02:57.410
It's really hard
to get this right.

00:02:57.410 --> 00:02:59.270
We really want the
essence of realism,

00:02:59.270 --> 00:03:00.644
but without all
the extra baggage

00:03:00.644 --> 00:03:02.020
that's associated with it.

00:03:02.020 --> 00:03:03.978
Ari's going to go into
a little bit more detail

00:03:03.978 --> 00:03:05.930
about how we accomplished
this taking elements

00:03:05.930 --> 00:03:09.651
of traditional animation
and building upon them.

00:03:09.651 --> 00:03:13.120
ARI SACHTER-ZELTZER: So Nicholas
talked about telling stories

00:03:13.120 --> 00:03:15.025
and the dialogue between
the system the user.

00:03:15.025 --> 00:03:16.400
There are really
three main areas

00:03:16.400 --> 00:03:19.220
that drive the motion
language for material design.

00:03:19.220 --> 00:03:20.990
The first is familiarity.

00:03:20.990 --> 00:03:23.520
So we all live in the physical
world and our grounded

00:03:23.520 --> 00:03:28.110
in reality, for the most part,
and motion is, in our UI,

00:03:28.110 --> 00:03:30.235
is really key to support
that material metaphor

00:03:30.235 --> 00:03:34.290
and bring that familiarity
to our user experiences.

00:03:34.290 --> 00:03:37.150
So our environment is a shared
stage and all of the action

00:03:37.150 --> 00:03:38.130
takes place there.

00:03:38.130 --> 00:03:39.630
They're visually
consistent shadows,

00:03:39.630 --> 00:03:42.050
across platforms, that
provide a visual indicator

00:03:42.050 --> 00:03:45.454
of the layering, as well as the
separation, between surfaces.

00:03:45.454 --> 00:03:47.370
And this environment is
proportional and bound

00:03:47.370 --> 00:03:49.400
to the device that you have.

00:03:49.400 --> 00:03:51.880
So for example, the
thickness of your phone.

00:03:51.880 --> 00:03:54.960
And to that end, we
want to make sure

00:03:54.960 --> 00:03:57.570
that we avoid extreme
motions like camera

00:03:57.570 --> 00:04:00.040
zooms or large rotations
that break that environment

00:04:00.040 --> 00:04:03.070
and take us out
of the experience.

00:04:03.070 --> 00:04:05.550
We also represent
surfaces as solid object

00:04:05.550 --> 00:04:07.370
that can be directly
manipulated.

00:04:07.370 --> 00:04:10.350
So we use motion to express
material special properties.

00:04:10.350 --> 00:04:13.690
Can split apart or join
back together without tape

00:04:13.690 --> 00:04:17.110
and dynamically
transform and re-scale.

00:04:17.110 --> 00:04:19.140
We can also use
changes in opacity

00:04:19.140 --> 00:04:21.500
when transitioning to,
or from, high speeds

00:04:21.500 --> 00:04:25.210
to imply motion blur, and
avoid fading in or out

00:04:25.210 --> 00:04:28.280
in static states, to maintain
the feeling that the paper is

00:04:28.280 --> 00:04:30.600
solid.

00:04:30.600 --> 00:04:33.170
We also really want to use
motion as an affordance,

00:04:33.170 --> 00:04:36.070
and express the transfer
of energy from the user

00:04:36.070 --> 00:04:38.640
into the system,
and use this motion

00:04:38.640 --> 00:04:42.200
to tell the story of how that
input propagates and results

00:04:42.200 --> 00:04:43.300
across the system.

00:04:43.300 --> 00:04:44.860
Whether there are
hard constraints

00:04:44.860 --> 00:04:46.710
or forgiving
boundaries, all of these

00:04:46.710 --> 00:04:48.280
are familiar
indicators that help

00:04:48.280 --> 00:04:52.940
us understand how objects
can be manipulated.

00:04:52.940 --> 00:04:55.400
Motion should also be
responsive and fast.

00:04:55.400 --> 00:04:57.860
There's no need to bounce,
because the material is precise

00:04:57.860 --> 00:05:01.490
and arrives precisely and
smoothly at the target.

00:05:01.490 --> 00:05:02.910
We have a set of
animation curves,

00:05:02.910 --> 00:05:05.210
that you've seen
across many examples,

00:05:05.210 --> 00:05:08.190
and those are incorporated
directly into the framework.

00:05:08.190 --> 00:05:10.040
And you can also
customize those curves

00:05:10.040 --> 00:05:14.440
with the new path
interpolator and Android L.

00:05:14.440 --> 00:05:17.030
Choreography is how
we guide our users

00:05:17.030 --> 00:05:19.420
through the experience with
thoughtful and consistent

00:05:19.420 --> 00:05:20.410
motion.

00:05:20.410 --> 00:05:22.850
When transitioning between
spaces or activities,

00:05:22.850 --> 00:05:24.460
we want to use
motion to complement

00:05:24.460 --> 00:05:26.750
the spatial model of
your app, and consider

00:05:26.750 --> 00:05:28.910
motion in the articulation
of these surfaces

00:05:28.910 --> 00:05:30.510
in the first place,
when designing

00:05:30.510 --> 00:05:34.880
how your app is put
together in space.

00:05:34.880 --> 00:05:37.780
Beyond the acceleration
and deceleration of objects

00:05:37.780 --> 00:05:40.140
we, can also express
character by the path

00:05:40.140 --> 00:05:44.730
that objects move along and
moving using curved paths.

00:05:44.730 --> 00:05:46.700
Natural motion tends
to follow an arc.

00:05:46.700 --> 00:05:49.820
For example, throwing a
baseball through the air,

00:05:49.820 --> 00:05:51.840
or the path of a skier
down the mountain.

00:05:51.840 --> 00:05:54.350
We can apply these ideas
into our transitions,

00:05:54.350 --> 00:05:57.300
to make them feel less
mechanical than when they are

00:05:57.300 --> 00:06:00.180
constrained along
a straight path.

00:06:00.180 --> 00:06:02.380
And here you can
see this dynamic arc

00:06:02.380 --> 00:06:05.480
and create fun paths to or from
any position on the screen.

00:06:05.480 --> 00:06:07.800
And you can do similar
things in Android L

00:06:07.800 --> 00:06:12.660
by now, supplying a path
into the Object Animator.

00:06:12.660 --> 00:06:15.510
So in addition to the path
objects take and the character

00:06:15.510 --> 00:06:18.830
of their acceleration,
thoughtful timing of actions

00:06:18.830 --> 00:06:21.320
is critical to building
meaningful transitions.

00:06:21.320 --> 00:06:23.860
We want to sequence actions
to guide user's attention

00:06:23.860 --> 00:06:27.480
around the screen or draw their
attention to promoted actions,

00:06:27.480 --> 00:06:29.910
build understanding of the
changes that are occurring,

00:06:29.910 --> 00:06:32.806
and indicate individuality
or grouping of elements

00:06:32.806 --> 00:06:33.930
through synchronize motion.

00:06:36.550 --> 00:06:38.550
And in addition to
familiar surfaces

00:06:38.550 --> 00:06:40.489
and coordinated
motion, craftsmanship

00:06:40.489 --> 00:06:42.780
is really the manner in which
all these principles come

00:06:42.780 --> 00:06:45.930
together to create a really
compelling experience.

00:06:45.930 --> 00:06:48.250
Attention to detail and
a well considered motion

00:06:48.250 --> 00:06:52.560
at all scales, can bring delight
and clarity to your users.

00:06:52.560 --> 00:06:54.000
So at the largest
scales, we want

00:06:54.000 --> 00:06:55.960
to create transitions
that connect the users

00:06:55.960 --> 00:06:58.060
action to the resulting change.

00:06:58.060 --> 00:07:00.769
Motion can bring clarity
to the changes in context

00:07:00.769 --> 00:07:02.810
and improve the understanding
of the relationship

00:07:02.810 --> 00:07:05.580
between different spaces.

00:07:05.580 --> 00:07:07.610
And animation at smaller
scales can tell a story

00:07:07.610 --> 00:07:08.952
when space is limited.

00:07:08.952 --> 00:07:10.410
For example these
micro transitions

00:07:10.410 --> 00:07:13.240
can give cues about
the changes in state

00:07:13.240 --> 00:07:16.470
or reinforce functionality
through motion or drive

00:07:16.470 --> 00:07:17.740
discoverability.

00:07:17.740 --> 00:07:20.614
And these principles around
familiarity, choreography,

00:07:20.614 --> 00:07:22.030
and craftsmanship
have really been

00:07:22.030 --> 00:07:23.571
the foundation of
a lot of the design

00:07:23.571 --> 00:07:25.660
work we've been doing recently.

00:07:25.660 --> 00:07:27.162
And now Helen,
Manuel, and Gus are

00:07:27.162 --> 00:07:28.870
going to talk a little
bit more about how

00:07:28.870 --> 00:07:31.410
we've put these to practice
in desktop, handsets,

00:07:31.410 --> 00:07:33.972
and wearables.

00:07:33.972 --> 00:07:35.900
HELENE PARK: I'll be
diving into detail

00:07:35.900 --> 00:07:38.050
about the ways we've been
exploring the loading

00:07:38.050 --> 00:07:41.230
experience, and ways that
alleviate the wait time.

00:07:41.230 --> 00:07:44.430
So loading, and often
overlooked, but an extremely

00:07:44.430 --> 00:07:46.580
common occurrence,
is an opportunity

00:07:46.580 --> 00:07:50.470
for consistent control
across different contexts.

00:07:50.470 --> 00:07:53.770
We started off by combining
a refresh icon and a loading

00:07:53.770 --> 00:07:57.620
spinner, for a seamless
and simple correlation.

00:07:57.620 --> 00:08:01.070
Spinner is the original activity
indicator, crafted in detail,

00:08:01.070 --> 00:08:03.870
with an organic pattern.

00:08:03.870 --> 00:08:06.810
Playing with how dynamic colors
can compliment the whole system

00:08:06.810 --> 00:08:08.870
and framework, and in
this scrolling instance,

00:08:08.870 --> 00:08:11.990
the spinner is paired with
an ink splash, inspired

00:08:11.990 --> 00:08:16.810
by the touch ripple effect
to indicate an initiation.

00:08:16.810 --> 00:08:18.960
Our suite of progress
and activity indicators,

00:08:18.960 --> 00:08:23.160
circular or linear, are designed
with a synchronized cadence.

00:08:23.160 --> 00:08:26.230
Whether it's a swipe down to
refresh on mobile, or opening

00:08:26.230 --> 00:08:28.960
a message on tablet,
acceleration curves

00:08:28.960 --> 00:08:30.980
and rotational rhythm
are choreographed

00:08:30.980 --> 00:08:34.549
to follow the same,
organic pattern.

00:08:34.549 --> 00:08:36.350
We've also thought
about how these

00:08:36.350 --> 00:08:39.250
can be tailored to
a variety of uses.

00:08:39.250 --> 00:08:41.305
In this Chrome OS
update instance,

00:08:41.305 --> 00:08:43.850
we thought about how the
indicators can behave

00:08:43.850 --> 00:08:47.360
like bookends, for
distinct, beginning and end.

00:08:47.360 --> 00:08:50.520
A field of color marks an
initiation and an equally

00:08:50.520 --> 00:08:53.715
dramatic ink splash punctuates
a marker of completion.

00:08:56.230 --> 00:08:59.920
On top of all this, we thought
about how an image would load,

00:08:59.920 --> 00:09:02.640
and we were inspired
by the way photographs

00:09:02.640 --> 00:09:04.910
are exposed onto paper and
developed in a dark room,

00:09:04.910 --> 00:09:08.010
for a natural and
familiar process.

00:09:08.010 --> 00:09:12.090
We've broken it down to
three basic phases; capacity,

00:09:12.090 --> 00:09:14.625
exposure, and saturation.

00:09:14.625 --> 00:09:18.030
The image would fade in at a
low-contrast exposure, followed

00:09:18.030 --> 00:09:21.300
by a full color saturation.

00:09:21.300 --> 00:09:23.550
Form factors with
larger surface areas

00:09:23.550 --> 00:09:25.720
are the ideal
places to pronounce

00:09:25.720 --> 00:09:29.280
this type of a new treatment,
such as logging into Chrome OS.

00:09:35.317 --> 00:09:36.400
MANUEL CLEMENT: Thank you.

00:09:36.400 --> 00:09:36.899
Hello.

00:09:36.899 --> 00:09:41.480
So Helene showed you
a Chrome OS example

00:09:41.480 --> 00:09:43.310
and I'm going to talk
to you about some

00:09:43.310 --> 00:09:46.050
of the ways we use motion
on Chrome, across desktop

00:09:46.050 --> 00:09:46.580
and mobile.

00:09:53.070 --> 00:09:57.300
OK so in the case of a
desktop or laptop OS,

00:09:57.300 --> 00:10:00.280
we're dealing with many
windows and screens

00:10:00.280 --> 00:10:03.480
and depth is key to ensuring
users feel in control

00:10:03.480 --> 00:10:07.430
of their experience, as they
change applications and manage

00:10:07.430 --> 00:10:09.000
their experience.

00:10:09.000 --> 00:10:11.930
So here, we're using
material shadows

00:10:11.930 --> 00:10:15.070
to communicate quite
a bit of depth there.

00:10:15.070 --> 00:10:16.300
Now see what's happening?

00:10:16.300 --> 00:10:18.560
The UI is actually
now being scaled up,

00:10:18.560 --> 00:10:21.430
even though it looks like
it's coming closer to you.

00:10:21.430 --> 00:10:27.790
Simply by using the right curves
and the appropriate durations,

00:10:27.790 --> 00:10:31.620
and the right
properties that shadow,

00:10:31.620 --> 00:10:35.260
you create this nice,
crafted, smooth transition.

00:10:35.260 --> 00:10:37.180
We've all seen
shadows like this.

00:10:37.180 --> 00:10:40.570
The fact that it's nicely
transitioning like this

00:10:40.570 --> 00:10:44.540
creates a great continuity
between those states.

00:10:44.540 --> 00:10:46.695
Moving on, this is Chrome OS.

00:10:46.695 --> 00:10:49.080
You guys know Chrome
OS, Chromebooks.

00:10:49.080 --> 00:10:51.120
In Chrome OS we
have an app launcher

00:10:51.120 --> 00:10:53.400
and this App Launcher
has this feature now,

00:10:53.400 --> 00:10:56.230
that allows you to
group applications.

00:10:56.230 --> 00:10:57.810
And Android, you
can do that too.

00:10:57.810 --> 00:11:00.730
Now on Chrome OS,
the app launcher's

00:11:00.730 --> 00:11:03.150
already a floating box.

00:11:03.150 --> 00:11:07.734
OK, a folder usually opens
up as a pop-up box as well.

00:11:07.734 --> 00:11:08.650
We don't want do that.

00:11:08.650 --> 00:11:11.820
We don't want to put a floating
box on top of a floating box.

00:11:11.820 --> 00:11:15.330
So in this case we're using
material Ink and material

00:11:15.330 --> 00:11:19.650
Response, where Ink is
shrinking and growing,

00:11:19.650 --> 00:11:25.090
and creating this nice ink
bubble metaphor for a folder.

00:11:25.090 --> 00:11:28.960
And so you see the same bubble
appearing, disappearing,

00:11:28.960 --> 00:11:31.600
and throughout the
different states

00:11:31.600 --> 00:11:33.860
that you are going
through as a user.

00:11:33.860 --> 00:11:35.410
It creates this
familiar thing there.

00:11:35.410 --> 00:11:38.390
It's really nice.

00:11:38.390 --> 00:11:41.890
Next, let's take a look at a
Chrome-for-mobile prototype.

00:11:45.750 --> 00:11:50.760
Here, when you're looking at
finding a way to transition

00:11:50.760 --> 00:11:53.310
and from very different
states-- see this right here?

00:11:53.310 --> 00:11:55.830
That's a very different
state from this one.

00:11:55.830 --> 00:11:58.110
All these icons are there,
and not there anymore,

00:11:58.110 --> 00:12:02.230
and if you just flip a bit
and you could hide show.

00:12:02.230 --> 00:12:04.119
It's not going to
look very good.

00:12:04.119 --> 00:12:06.410
In this case, imagine the
person's touching the screen.

00:12:06.410 --> 00:12:08.090
Boom.

00:12:08.090 --> 00:12:10.077
A circle of energy
flies out of there

00:12:10.077 --> 00:12:11.910
and pushes items,
[MAKES SWISHING NOISE] out

00:12:11.910 --> 00:12:15.940
of the way, back into the scene.

00:12:15.940 --> 00:12:19.200
It feels like you're creating
a story for the user,

00:12:19.200 --> 00:12:20.845
through choreography and motion.

00:12:26.390 --> 00:12:29.240
Finally, let's look at
the Chrome OS again.

00:12:29.240 --> 00:12:31.630
Large screens present
quite a bit of challenge.

00:12:31.630 --> 00:12:34.930
You've seen a lot of examples
of smaller mobile screens.

00:12:34.930 --> 00:12:36.610
Now making something
fly up and down

00:12:36.610 --> 00:12:39.095
that screen may not
be a huge issue.

00:12:39.095 --> 00:12:40.720
Imagine you're looking
at screen that's

00:12:40.720 --> 00:12:42.345
much bigger, like 20
inch, for example,

00:12:42.345 --> 00:12:45.390
or 17 inch, even
a 13 inch laptop.

00:12:45.390 --> 00:12:48.912
You want to avoid forcing your
users to scan around like,

00:12:48.912 --> 00:12:51.370
is my window coming to the
left, to the right, to the left,

00:12:51.370 --> 00:12:52.410
and it's just crazy.

00:12:52.410 --> 00:12:55.420
So one way to do
this is exploration.

00:12:55.420 --> 00:12:58.970
Looking at ways to go "whisp"--
like have very short animations

00:12:58.970 --> 00:13:02.310
to show, hey the window just
went toward the Close button.

00:13:02.310 --> 00:13:05.730
Or the window just flew from
the button on the task bar,

00:13:05.730 --> 00:13:08.070
therefore it probably
opened the application.

00:13:08.070 --> 00:13:09.100
Things like that.

00:13:09.100 --> 00:13:12.800
So even though those
animations are really short,

00:13:12.800 --> 00:13:15.106
because we're using the
right curves material

00:13:15.106 --> 00:13:17.480
and we're very thoughtful
about the way things are moving

00:13:17.480 --> 00:13:21.230
on the screen, you create
tangibility and familiarity

00:13:21.230 --> 00:13:26.510
to animations, and communicate
those states really well.

00:13:26.510 --> 00:13:29.340
Now, you've seen
really large screen now

00:13:29.340 --> 00:13:33.640
and challenges and
solutions we're exploring.

00:13:33.640 --> 00:13:36.990
Gus is going to show you
similar challenges and solutions

00:13:36.990 --> 00:13:41.454
for tiny screens, like this.

00:13:41.454 --> 00:13:44.510
GUS SONODA: Thank you, Manuel.

00:13:44.510 --> 00:13:47.730
I just love motion design.

00:13:47.730 --> 00:13:52.010
I think they are-- it's
a powerful design tool

00:13:52.010 --> 00:13:54.980
and still it can be subtle.

00:13:54.980 --> 00:13:58.770
And we use that a lot when
designing for wearables.

00:13:58.770 --> 00:14:04.120
So because of it's
small screen, we

00:14:04.120 --> 00:14:07.620
don't have space
for multiple panels

00:14:07.620 --> 00:14:09.650
or different buttons
for every action

00:14:09.650 --> 00:14:11.860
that we can take
in every screen.

00:14:11.860 --> 00:14:16.160
And nor do we have
space for white space.

00:14:16.160 --> 00:14:20.350
So in order to fully
express the material design

00:14:20.350 --> 00:14:23.170
language on such
a small screen, we

00:14:23.170 --> 00:14:25.460
needed to use a lot
of motion design,

00:14:25.460 --> 00:14:31.140
to cover for all those functions
and also to make the device fun

00:14:31.140 --> 00:14:32.130
and easy to use.

00:14:35.400 --> 00:14:42.360
So right from the
start, even before you

00:14:42.360 --> 00:14:43.980
start interacting
with the device,

00:14:43.980 --> 00:14:50.380
we have added a simple animation
that explains the structure

00:14:50.380 --> 00:14:52.480
navigation of the
wearable device.

00:14:52.480 --> 00:14:53.590
It's a pretty simple one.

00:14:53.590 --> 00:14:55.660
You scroll up and
down to navigate

00:14:55.660 --> 00:14:57.450
through different
pieces of content

00:14:57.450 --> 00:15:00.550
and you swipe right
to dismiss a content.

00:15:00.550 --> 00:15:02.910
So even though
it's pretty simple,

00:15:02.910 --> 00:15:05.610
it's just enough
to get you started,

00:15:05.610 --> 00:15:08.920
so you feel comfortable
using the device.

00:15:08.920 --> 00:15:11.800
As you start using the device
and you face situations

00:15:11.800 --> 00:15:13.740
we have never
encountered before,

00:15:13.740 --> 00:15:17.120
motion design is
there to suggest

00:15:17.120 --> 00:15:19.030
how to interact with it.

00:15:19.030 --> 00:15:21.080
So in this case,
incoming call, you

00:15:21.080 --> 00:15:24.390
swipe one side to accept
the call, or the other side

00:15:24.390 --> 00:15:25.647
to reject a call.

00:15:28.850 --> 00:15:34.030
We then end up with a very
simple stream of cards,

00:15:34.030 --> 00:15:36.710
where we show one
content at a time.

00:15:36.710 --> 00:15:39.140
And so we quickly
realized that it

00:15:39.140 --> 00:15:42.830
was very important to
work on the transitions

00:15:42.830 --> 00:15:44.640
between those contents.

00:15:44.640 --> 00:15:46.930
So we orchestrated
all elements present

00:15:46.930 --> 00:15:49.730
on both screens
and, for example,

00:15:49.730 --> 00:15:52.350
the acceleration of the
card, the cross-fade

00:15:52.350 --> 00:15:56.370
of the background, and
the parallax movement,

00:15:56.370 --> 00:15:59.170
in order to make these
transitions feel smooth.

00:15:59.170 --> 00:16:02.717
And actually, we want
it to feel invisible

00:16:02.717 --> 00:16:05.050
because you're going to
interact with it a lot of times.

00:16:09.630 --> 00:16:12.940
We have also brought
animations that we

00:16:12.940 --> 00:16:17.160
are used to in order
devices, to wearables.

00:16:17.160 --> 00:16:19.770
Not before making some
tweaks and improvements.

00:16:19.770 --> 00:16:22.500
Let's take, for example,
the nod animation.

00:16:22.500 --> 00:16:25.940
So nodding is something
that we do everyday

00:16:25.940 --> 00:16:27.640
when interacting
with other people.

00:16:27.640 --> 00:16:29.700
When we are talking
to them, we just

00:16:29.700 --> 00:16:31.580
nod to acknowledge
their presence,

00:16:31.580 --> 00:16:35.320
to give non-verbal feedback.

00:16:35.320 --> 00:16:39.140
And it help to create a friendly
environment for a conversation

00:16:39.140 --> 00:16:40.450
to take place.

00:16:40.450 --> 00:16:42.620
So we wanted to take
this environment

00:16:42.620 --> 00:16:44.360
and bring it to our UI.

00:16:44.360 --> 00:16:48.421
And we use that with the nod,
using a very simple motion

00:16:48.421 --> 00:16:48.920
design.

00:16:52.850 --> 00:16:57.520
We have also created a
full set of animations.

00:16:57.520 --> 00:17:01.510
That they all cover a very
specific function in the UI,

00:17:01.510 --> 00:17:05.250
but we have crafted those
animations in such detail,

00:17:05.250 --> 00:17:10.819
in order to make every micro
interaction feel rewarding.

00:17:10.819 --> 00:17:13.920
So lets take the sending
a message, for example.

00:17:13.920 --> 00:17:18.220
So you have just sent a
message using our new wearable,

00:17:18.220 --> 00:17:20.960
using our voice, without
even touch your phone.

00:17:20.960 --> 00:17:25.650
So that's a pretty amazing task
you have just accomplished.

00:17:25.650 --> 00:17:28.950
So we wanted the confirmation
animation for this task

00:17:28.950 --> 00:17:31.770
to be as awesome as a
task you have just done.

00:17:31.770 --> 00:17:39.090
So we crafted every animation
with a lot of detail.

00:17:39.090 --> 00:17:41.680
And the boot sequence.

00:17:41.680 --> 00:17:48.020
So we have done
at a boot sequence

00:17:48.020 --> 00:17:51.720
that, when you start looking
at it, as soon as you turn

00:17:51.720 --> 00:17:55.340
the device on, and you see
running at this high frame

00:17:55.340 --> 00:17:59.010
rate, in such a small
device, it immediately

00:17:59.010 --> 00:18:01.320
suggests how powerful
the device is.

00:18:01.320 --> 00:18:03.620
And it sets the
tone of how you're

00:18:03.620 --> 00:18:06.050
going to interact with
it, from that moment on.

00:18:09.210 --> 00:18:09.710
Nicholas.

00:18:09.710 --> 00:18:11.290
NICHOLAS JITKOFF: So
these guys gave you

00:18:11.290 --> 00:18:13.240
a good idea of a lot of
different applications

00:18:13.240 --> 00:18:13.740
of motion.

00:18:13.740 --> 00:18:16.260
And in each is tailored to
the specific form factor.

00:18:16.260 --> 00:18:18.010
I wanted to go into a
couple opportunities

00:18:18.010 --> 00:18:19.990
that we saw while
doing all this work.

00:18:19.990 --> 00:18:23.300
First, use motion to tell
your product's story.

00:18:23.300 --> 00:18:25.720
As Gus showed in that--
sending an email confirmation.

00:18:25.720 --> 00:18:28.570
It was a moment for
a lot of personality

00:18:28.570 --> 00:18:32.840
and it had a celebration for
an action that was, itself,

00:18:32.840 --> 00:18:34.740
pretty impressive.

00:18:34.740 --> 00:18:37.520
We want you to find moments
to make your apps truly shine

00:18:37.520 --> 00:18:40.130
and focus on those.

00:18:40.130 --> 00:18:41.500
Beyond that, use the frameworks.

00:18:41.500 --> 00:18:44.616
The elements will cover
many, many of the use cases

00:18:44.616 --> 00:18:45.990
are going to have
with animation,

00:18:45.990 --> 00:18:48.221
with a standard
set of behaviors.

00:18:48.221 --> 00:18:49.720
You want to build
on those, but then

00:18:49.720 --> 00:18:51.532
also pick moments to enhance.

00:18:51.532 --> 00:18:53.740
So using things like, the
shared element transitions,

00:18:53.740 --> 00:18:56.410
which allow you to
persist and element

00:18:56.410 --> 00:18:59.200
from a state to state,
or even between apps.

00:18:59.200 --> 00:19:00.830
Or refining an
existing component

00:19:00.830 --> 00:19:04.170
using theming or just
building upon it,

00:19:04.170 --> 00:19:06.555
is a much better approach
to doing this stuff.

00:19:06.555 --> 00:19:09.180
Where you are spending your time
on the most impactful portions

00:19:09.180 --> 00:19:11.249
of your app.

00:19:11.249 --> 00:19:13.790
And last, make motion part of
the process from the beginning.

00:19:13.790 --> 00:19:15.373
There's so much stuff
that has emerged

00:19:15.373 --> 00:19:18.720
from us working between motion
and visual, motion interaction,

00:19:18.720 --> 00:19:21.340
and seeing how those disciplines
can build off of each other

00:19:21.340 --> 00:19:23.080
and enhance each other.

00:19:23.080 --> 00:19:25.120
It's really critical to
get a polished result.

00:19:28.072 --> 00:19:30.280
Many of you have probably
already looked at the spec.

00:19:30.280 --> 00:19:32.240
The motion portion of
the spec is probably

00:19:32.240 --> 00:19:34.110
the richest and
most complicated.

00:19:34.110 --> 00:19:35.600
It's definitely
worth looking at.

00:19:35.600 --> 00:19:37.433
Ari and the others have
put a lot of thought

00:19:37.433 --> 00:19:40.380
into the underlying physics
and behavior these materials,

00:19:40.380 --> 00:19:43.250
and there's a lot
of detail in there.

00:19:43.250 --> 00:19:47.380
Also, please visit our design
site and also get in touch with

00:19:47.380 --> 00:19:51.234
us at the +Google design page.

00:19:51.234 --> 00:19:53.150
This has been a really
exciting project for us

00:19:53.150 --> 00:19:54.880
and we've been really
excited to share it with you,

00:19:54.880 --> 00:19:56.296
but really this
is the first step.

00:19:56.296 --> 00:20:00.675
And we have a lot of distance
to go before this is finalized

00:20:00.675 --> 00:20:03.800
and we really want to see how
it applies to all of your apps.

00:20:03.800 --> 00:20:05.011
Thank you very much.

00:20:05.011 --> 00:20:12.720
[APPLAUSE]

00:20:12.720 --> 00:20:14.220
So we're happy to take QA now.

00:20:14.220 --> 00:20:15.370
We'll also be up here
afterwards if you

00:20:15.370 --> 00:20:16.453
want to come chat with us.

00:20:19.230 --> 00:20:22.250
AUDIENCE: I had just a
really brief question.

00:20:22.250 --> 00:20:25.240
You're little refresh icon
spinner thing was awesome

00:20:25.240 --> 00:20:27.160
and is there any
way we can have it?

00:20:30.020 --> 00:20:32.747
Is that just something you
guys designed for this stuff,

00:20:32.747 --> 00:20:34.830
or is it somewhere in
Android, hiding in a folder?

00:20:34.830 --> 00:20:36.880
NICHOLAS JITKOFF: That is t
the standard Android progress

00:20:36.880 --> 00:20:37.270
indicator.

00:20:37.270 --> 00:20:39.280
So it should pick up theming
like any other element.

00:20:39.280 --> 00:20:39.992
AUDIENCE: Sweet.

00:20:39.992 --> 00:20:41.260
I hadn't seen the
arrow part on it.

00:20:41.260 --> 00:20:42.843
NICHOLAS JITKOFF:
The arrow transition

00:20:42.843 --> 00:20:45.239
is a customization of it.

00:20:45.239 --> 00:20:46.780
I'm not familiar
with how we actually

00:20:46.780 --> 00:20:48.524
go about doing
those things, but--

00:20:48.524 --> 00:20:50.690
AUDIENCE: All right, well,
it's sweet, so thank you.

00:20:50.690 --> 00:20:52.236
NICHOLAS JITKOFF: Thank you.

00:20:52.236 --> 00:20:54.050
AUDIENCE: Hi.

00:20:54.050 --> 00:20:58.690
We've seen all those animations
and they look really amazing.

00:20:58.690 --> 00:21:00.820
When I look at that
and try to think

00:21:00.820 --> 00:21:03.180
how I'll do that with
the current Android API,

00:21:03.180 --> 00:21:04.911
I feel like shooting myself.

00:21:04.911 --> 00:21:10.630
[LAUGHTER] I've seen some of the
presentations for the new APIs

00:21:10.630 --> 00:21:15.160
that are coming out and I
assume that all that animation

00:21:15.160 --> 00:21:20.130
is going to be much easier
to do now with the new APIs?

00:21:20.130 --> 00:21:21.730
ARI SACHTER-ZELTZER: Yes.

00:21:21.730 --> 00:21:24.180
Yeah, we're making a lot of
progress in that direction.

00:21:24.180 --> 00:21:27.990
So for example, moving things
along curve paths, the Object

00:21:27.990 --> 00:21:32.170
Animator-- I'm a designer so I
may not get it totally right--

00:21:32.170 --> 00:21:34.290
but the Object Animator
can accept a path,

00:21:34.290 --> 00:21:36.700
so you can animate x
and y concurrently,

00:21:36.700 --> 00:21:41.690
create a-- on a spine path, as
well as the path interpolator.

00:21:41.690 --> 00:21:46.610
So you can apply to customized
acceleration, deceleration

00:21:46.610 --> 00:21:50.820
curves with cubic-bezier--
pretty much the same format

00:21:50.820 --> 00:21:52.250
as you would with CSS.

00:21:52.250 --> 00:21:52.880
AUDIENCE: OK.

00:21:52.880 --> 00:21:55.230
Thank you.

00:21:55.230 --> 00:21:56.094
AUDIENCE: Hi.

00:21:56.094 --> 00:21:57.510
In the beginning
if your talk, you

00:21:57.510 --> 00:22:00.660
showed how elements don't need
to bounce because they just

00:22:00.660 --> 00:22:02.820
arrived at the destination
perfectly on time,

00:22:02.820 --> 00:22:04.320
but in the internet
wear, you showed

00:22:04.320 --> 00:22:07.430
how the red circle G, kind
of bounced down then out,

00:22:07.430 --> 00:22:08.850
like in it's nod animation.

00:22:08.850 --> 00:22:11.194
So how do you balance
those different animations

00:22:11.194 --> 00:22:12.360
and when to use them or not?

00:22:12.360 --> 00:22:13.230
GUS SONODA: OK.

00:22:13.230 --> 00:22:15.960
So I think the
bounce animation is

00:22:15.960 --> 00:22:21.150
this, is a different,
and specific animation

00:22:21.150 --> 00:22:30.010
to make you the user feel the
visual feedback for the user

00:22:30.010 --> 00:22:30.840
input.

00:22:30.840 --> 00:22:32.980
So for all other
animations, we do not

00:22:32.980 --> 00:22:34.420
encourage a bounce animation.

00:22:34.420 --> 00:22:37.820
I would not count the nod
animation as a bouncing

00:22:37.820 --> 00:22:40.990
animation, it's
simply a movement,

00:22:40.990 --> 00:22:44.440
a natural human movement that
we incorporated into the UI

00:22:44.440 --> 00:22:45.130
as a feedback.

00:22:45.130 --> 00:22:45.560
AUDIENCE: Got you.

00:22:45.560 --> 00:22:45.880
Thanks

00:22:45.880 --> 00:22:47.296
ARI SACHTER-ZELTZER:
I'll just add

00:22:47.296 --> 00:22:50.080
onto that, that for a lot of the
transitions that we're doing,

00:22:50.080 --> 00:22:51.970
we're really
perceptive to motion.

00:22:51.970 --> 00:22:57.070
So having secondary motion
or really bouncy stuff,

00:22:57.070 --> 00:22:58.950
sometimes can draw your
attention to things

00:22:58.950 --> 00:23:00.825
that you don't really
want people to look at.

00:23:00.825 --> 00:23:03.241
ARI SACHTER-ZELTZER: This is
a personal obsession of mine,

00:23:03.241 --> 00:23:05.320
so I'm going to go into
a little bit more detail.

00:23:05.320 --> 00:23:07.520
We like to think of this
technologically advanced

00:23:07.520 --> 00:23:12.500
material as something that
is driven by the system.

00:23:12.500 --> 00:23:13.840
And system understands physics.

00:23:13.840 --> 00:23:15.506
It can understand how
to place something

00:23:15.506 --> 00:23:17.070
exactly where it
needs to be, and not

00:23:17.070 --> 00:23:18.507
wobble as it gets there.

00:23:18.507 --> 00:23:21.090
But the same time, it needs to
be very responsive to the user.

00:23:21.090 --> 00:23:22.548
So if the user is
pulling something

00:23:22.548 --> 00:23:25.840
passed the bounds where it
needs to be, to just simply stop

00:23:25.840 --> 00:23:27.770
would be almost hostile.

00:23:27.770 --> 00:23:29.450
We want it to
accommodate the user,

00:23:29.450 --> 00:23:31.880
but in the times that
it's moving things,

00:23:31.880 --> 00:23:33.370
to also land them perfectly.

00:23:33.370 --> 00:23:35.410
So it's balancing the
two of those things

00:23:35.410 --> 00:23:38.030
to get the right feel, as well
as the right amount of, sort

00:23:38.030 --> 00:23:42.000
of, forgiveness, when
you pull past bounds.

00:23:42.000 --> 00:23:43.720
AUDIENCE: I'm a UX designer.

00:23:43.720 --> 00:23:47.595
When I saw your motion
design talk on the schedule,

00:23:47.595 --> 00:23:49.730
I was so happy.

00:23:49.730 --> 00:23:52.070
Not many conferences have
a motion design talk,

00:23:52.070 --> 00:23:54.711
so I'm so glad you had it.

00:23:54.711 --> 00:23:55.710
So I have two questions.

00:23:55.710 --> 00:24:00.580
One question is, what tools do
you use for prototyping motion?

00:24:00.580 --> 00:24:03.965
The second question is,
your decks are amazing.

00:24:06.550 --> 00:24:08.480
And I'm curious to
know what tools you

00:24:08.480 --> 00:24:11.391
are using for presentations.

00:24:11.391 --> 00:24:14.340
ARI SACHTER-ZELTZER: I think
well-- a lot of our motion

00:24:14.340 --> 00:24:18.610
designers use After Effects
for just some initial studies,

00:24:18.610 --> 00:24:21.580
but of course that
can only get so far

00:24:21.580 --> 00:24:23.910
when so much of this motion
is tied to the interaction

00:24:23.910 --> 00:24:25.490
and how it feels.

00:24:25.490 --> 00:24:31.050
So there's kind of
that diminishing return

00:24:31.050 --> 00:24:32.950
as you go past a point
to get an idea of,

00:24:32.950 --> 00:24:35.130
OK this is a direction
that feels good.

00:24:35.130 --> 00:24:38.430
And then we really try and
start working with engineers

00:24:38.430 --> 00:24:42.910
and prototyping to kind of
start seeing it on a device

00:24:42.910 --> 00:24:46.080
and feeling it, to
know if that's actually

00:24:46.080 --> 00:24:47.247
a right decision.

00:24:47.247 --> 00:24:49.580
MANUEL CLEMENT: I'll jump in
and just-- can you hear me?

00:24:49.580 --> 00:24:50.704
I'm going to add one point.

00:24:50.704 --> 00:24:53.060
All the examples I showed--
I'm really a designer,

00:24:53.060 --> 00:24:55.470
but I like to code
things to try them out.

00:24:55.470 --> 00:24:57.030
I love to kind of
push the browser,

00:24:57.030 --> 00:24:59.030
see how fast it
can render stuff.

00:24:59.030 --> 00:25:00.650
In any case, most
the stuff I showed

00:25:00.650 --> 00:25:04.510
were actually video, QuickTime,
like, screen recordings

00:25:04.510 --> 00:25:07.760
off interactive prototypes I
built, using just HTML stuff.

00:25:07.760 --> 00:25:10.185
Also, Polymer, I really
enjoy doing that.

00:25:10.185 --> 00:25:11.560
So like the window
control that's

00:25:11.560 --> 00:25:14.260
coming in now, that was a custom
element in Polymer I built.

00:25:14.260 --> 00:25:17.900
But, yeah, HTML I found
great, because then

00:25:17.900 --> 00:25:22.526
when you communicate these
animations to engineers,

00:25:22.526 --> 00:25:24.150
they can look to code
or you could just

00:25:24.150 --> 00:25:26.412
copy paste your variables,
and they're like, oh yeah,

00:25:26.412 --> 00:25:27.120
that's the curve.

00:25:27.120 --> 00:25:30.130
It talks to them really well.

00:25:30.130 --> 00:25:31.944
But different designers
work differently.

00:25:31.944 --> 00:25:33.360
[INAUDIBLE] effects
tool is really

00:25:33.360 --> 00:25:35.750
awesome for doing a
lot of things too.

00:25:35.750 --> 00:25:38.357
NICHOLAS JITKOFF: Even
basic blocking emotion,

00:25:38.357 --> 00:25:39.440
I think is very effective.

00:25:39.440 --> 00:25:41.370
Particularly if people are
using the standard curves.

00:25:41.370 --> 00:25:43.703
As long as they're explaining
how things move from state

00:25:43.703 --> 00:25:45.880
to state, it's more than
enough to understand.

00:25:45.880 --> 00:25:47.590
It's just, think
about state to state,

00:25:47.590 --> 00:25:50.522
rather than just assume that
it's gotten there on it's own.

00:25:50.522 --> 00:25:53.600
ARI SACHTER-ZELTZER: I'd also
add that motion design has

00:25:53.600 --> 00:25:58.500
been a really interesting point
in the process of developing

00:25:58.500 --> 00:26:01.070
the system and apps,
where it really

00:26:01.070 --> 00:26:05.450
forces UX designers to work
with engineers to kind of get

00:26:05.450 --> 00:26:08.060
these ideas and make sure
that those kind of concepts

00:26:08.060 --> 00:26:10.100
are carried over into
the final product.

00:26:10.100 --> 00:26:13.420
So it's a great opportunity
to increase collaboration

00:26:13.420 --> 00:26:17.150
and also helps to build some
understanding on each side.

00:26:17.150 --> 00:26:21.120
So as a designer I'm starting
to learn more about XML.

00:26:21.120 --> 00:26:23.960
So that way I can tweak
stuff myself and make sure

00:26:23.960 --> 00:26:27.199
I pass along the right
kind of information.

00:26:27.199 --> 00:26:28.990
Also, take the right
kind of considerations

00:26:28.990 --> 00:26:31.040
when I'm making designs.

00:26:31.040 --> 00:26:31.840
AUDIENCE: Thanks.

00:26:34.955 --> 00:26:35.850
AUDIENCE: Hi.

00:26:35.850 --> 00:26:38.810
You guys mentioned
using the frameworks.

00:26:38.810 --> 00:26:41.890
And so my question
is, if we're trying

00:26:41.890 --> 00:26:45.100
to design an app that works
in HTML and on Android,

00:26:45.100 --> 00:26:47.740
and trying to make
the look and feel be,

00:26:47.740 --> 00:26:49.950
obviously as close as we
can, say, loading an image

00:26:49.950 --> 00:26:53.380
or progress, like you guys
do examples you guys used.

00:26:53.380 --> 00:26:57.400
How much the framework is there?

00:26:57.400 --> 00:26:59.840
Are you guys focusing on
trying to put the same look

00:26:59.840 --> 00:27:03.440
and feel for motion into
these different frameworks?

00:27:03.440 --> 00:27:05.330
Or are we will at the
stage of, sort of,

00:27:05.330 --> 00:27:08.300
wire framing it in and handing
something overture HTML

00:27:08.300 --> 00:27:11.710
guy and our Java guy and
saying, figure this out.

00:27:11.710 --> 00:27:15.380
Or are you guys-- are the
frameworks working on giving us

00:27:15.380 --> 00:27:19.100
more common tools between this,
so that our image loading looks

00:27:19.100 --> 00:27:21.866
exactly the same between an
Android app and an HTML app.

00:27:21.866 --> 00:27:23.490
NICHOLAS JITKOFF: We
are doing our best

00:27:23.490 --> 00:27:26.400
to coordinate the
appearance and the behaviors

00:27:26.400 --> 00:27:28.820
across the platforms to be
highly consistent, if not

00:27:28.820 --> 00:27:30.250
identical.

00:27:30.250 --> 00:27:33.690
Things like standard controls,
stuff like the ripples

00:27:33.690 --> 00:27:36.480
that you see on stuff, or on
elements, of the tap them.

00:27:36.480 --> 00:27:38.230
We've been very concerned
with making sure

00:27:38.230 --> 00:27:41.247
that the same formula, or logic,
is used, for the way they move,

00:27:41.247 --> 00:27:42.830
so that they are as
close as possible.

00:27:42.830 --> 00:27:44.810
AUDIENCE: And we're talking
about Polymer framework here?

00:27:44.810 --> 00:27:46.302
NICHOLAS JITKOFF:
Apps and Polymer.

00:27:46.302 --> 00:27:47.114
AUDIENCE: OK.

00:27:47.114 --> 00:27:47.940
All right, great.

00:27:47.940 --> 00:27:50.586
Thanks.

00:27:50.586 --> 00:27:53.770
AUDIENCE: So you guys talked
about the continuous motion

00:27:53.770 --> 00:27:56.660
and things not stopping
immediately and things

00:27:56.660 --> 00:27:58.070
like that.

00:27:58.070 --> 00:28:00.740
Have you taken a look or
has it changed anything

00:28:00.740 --> 00:28:02.640
in Androids list
view, for example,

00:28:02.640 --> 00:28:04.180
when you reach the top?

00:28:04.180 --> 00:28:05.800
It's always just stopped.

00:28:05.800 --> 00:28:08.170
Is that something that
you're looking at changing?

00:28:08.170 --> 00:28:13.074
Or how do you look at that
from a motion perspective?

00:28:13.074 --> 00:28:14.740
NICHOLAS JITKOFF:
We're continuing later

00:28:14.740 --> 00:28:16.640
on that class of animation.

00:28:16.640 --> 00:28:18.740
We're looking at
how refreshing works

00:28:18.740 --> 00:28:22.265
and how the ends of controls
work with loading more content.

00:28:22.265 --> 00:28:23.640
That's something
that we're still

00:28:23.640 --> 00:28:25.056
working on for the
final L. Trying

00:28:25.056 --> 00:28:26.496
to get that all nailed down.

00:28:26.496 --> 00:28:27.585
AUDIENCE: Cool, thanks.

00:28:30.868 --> 00:28:32.240
AUDIENCE: Hi.

00:28:32.240 --> 00:28:36.320
My questions is
about the process.

00:28:36.320 --> 00:28:38.580
I'm just curious,
what kind of decisions

00:28:38.580 --> 00:28:42.040
do you have to make while
finalizing the design?

00:28:42.040 --> 00:28:43.920
And how difficult it is that?

00:28:43.920 --> 00:28:46.550
What are the possibilities
you're looking at?

00:28:46.550 --> 00:28:50.256
And how do you finally narrow
down the details of the motion

00:28:50.256 --> 00:28:51.130
that you're creating?

00:28:54.785 --> 00:28:56.480
ARI SACHTER-ZELTZER:
Well, I think

00:28:56.480 --> 00:28:58.020
I can answer part of that.

00:28:58.020 --> 00:29:02.216
But Nicholas talked a bit
about how motion design, really

00:29:02.216 --> 00:29:03.590
trying to promote
that, is appear

00:29:03.590 --> 00:29:07.300
to visual and interaction
design and really integrate that

00:29:07.300 --> 00:29:10.900
throughout the whole
development process.

00:29:10.900 --> 00:29:13.466
And I'm sure you've
found, many of us

00:29:13.466 --> 00:29:14.840
have been in
situations where you

00:29:14.840 --> 00:29:16.770
go from-- you get
some wire frames

00:29:16.770 --> 00:29:18.770
or you get some visual
designs, and these things

00:29:18.770 --> 00:29:23.357
have been done in sort
of a sequential process.

00:29:23.357 --> 00:29:25.440
And then you say, OK, we
need to make a transition

00:29:25.440 --> 00:29:26.606
from the state of the state.

00:29:26.606 --> 00:29:28.550
And you're like, well,
that might not actually

00:29:28.550 --> 00:29:32.077
work because this certain
transition, or kind of motion

00:29:32.077 --> 00:29:33.660
wasn't really
considered at the point.

00:29:33.660 --> 00:29:35.870
So you kind of get a
bit of churn there.

00:29:35.870 --> 00:29:38.800
So that's why we're really
trying to make sure that when

00:29:38.800 --> 00:29:40.730
you're thinking
about interaction--

00:29:40.730 --> 00:29:43.439
and it really helps with
the whole material metaphor,

00:29:43.439 --> 00:29:45.730
because sometimes you can
actually just take some paper

00:29:45.730 --> 00:29:47.570
and think about, how would
these surfaces actually

00:29:47.570 --> 00:29:48.850
articulate against each other?

00:29:48.850 --> 00:29:52.180
And how I get from
one place to another?

00:29:52.180 --> 00:29:55.370
Very, very lo-fi
prototyping ways.

00:29:55.370 --> 00:29:59.580
So trying to just
make sure that you're

00:29:59.580 --> 00:30:00.900
thinking about the motion.

00:30:00.900 --> 00:30:04.090
If that's part of the
transition or part of your app,

00:30:04.090 --> 00:30:05.600
throughout the whole process.

00:30:05.600 --> 00:30:08.110
NICHOLAS JITKOFF: And engaging
with engineering, early, too.

00:30:08.110 --> 00:30:09.740
That's one of the
things we realized.

00:30:09.740 --> 00:30:11.470
You need to sanity check
many of these things.

00:30:11.470 --> 00:30:13.440
These guys make some
crazy aspirational stuff

00:30:13.440 --> 00:30:15.710
that-- motion blurs
and other things

00:30:15.710 --> 00:30:17.200
that are just not feasible.

00:30:17.200 --> 00:30:19.470
So just getting a sense of
what is actually possible,

00:30:19.470 --> 00:30:22.020
and then refining
those animations

00:30:22.020 --> 00:30:24.206
within the bounds
of what is possible.

00:30:24.206 --> 00:30:27.850
GUS SONODA: Regarding the
part of your question of how

00:30:27.850 --> 00:30:31.110
she selected the best
motion, sometimes

00:30:31.110 --> 00:30:35.510
we make different versions
of every animation.

00:30:35.510 --> 00:30:39.540
And you might think
a lot about it,

00:30:39.540 --> 00:30:42.760
but once you it--
usually on the device--

00:30:42.760 --> 00:30:45.010
it just it just
starts to feel right.

00:30:45.010 --> 00:30:49.390
And there's a lot of
decisions that you simply

00:30:49.390 --> 00:30:52.710
feel that it is the correct
and more fluid and faster

00:30:52.710 --> 00:30:55.656
way to make a transition.

00:30:55.656 --> 00:30:58.745
AUDIENCE: So a lot of
testing involved I guess.

00:30:58.745 --> 00:31:02.766
MANUEL CLEMENT: If you have user
testing going on on your team,

00:31:02.766 --> 00:31:04.640
everybody can look at
that and their numbers.

00:31:04.640 --> 00:31:06.598
And see how it improves
as you reiterate stuff.

00:31:06.598 --> 00:31:08.880
But I like the point
of starting early.

00:31:08.880 --> 00:31:09.720
It's very important.

00:31:09.720 --> 00:31:11.480
The Chrome stuff
I was showing you.

00:31:11.480 --> 00:31:14.450
Visual layout, everybody was
talking together on the team.

00:31:14.450 --> 00:31:17.930
And very early on, stuff
started moving around

00:31:17.930 --> 00:31:20.300
and it-- oh this is too
much, this is too little--

00:31:20.300 --> 00:31:22.510
and we got a chance to
look at it earl early on.

00:31:22.510 --> 00:31:23.740
And just reiterating a lot.

00:31:23.740 --> 00:31:26.709
The communication flow between
the different people on the UX

00:31:26.709 --> 00:31:28.750
team, as well as engineering,
is super important.

00:31:28.750 --> 00:31:30.189
So they feel included too.

00:31:30.189 --> 00:31:31.730
You don't dump
something on their lap

00:31:31.730 --> 00:31:33.135
that's super outrageous.

00:31:33.135 --> 00:31:35.560
It may be the right
design but, you know--

00:31:35.560 --> 00:31:37.970
And that's more like team
dynamic type strategy stuff.

00:31:37.970 --> 00:31:39.015
Not really UX.

00:31:39.015 --> 00:31:41.970
ARI SACHTER-ZELTZER:
And also, when

00:31:41.970 --> 00:31:46.220
Gus was talking about the nod,
and even in the visual design

00:31:46.220 --> 00:31:49.599
talk, about thinking about the
brand and your color story.

00:31:49.599 --> 00:31:51.140
Think about that
the character, maybe

00:31:51.140 --> 00:31:52.810
the personality of your app.

00:31:52.810 --> 00:31:55.850
And if you kind of
understand that app

00:31:55.850 --> 00:31:58.930
as a person or
personality, then that's

00:31:58.930 --> 00:32:01.670
a really good bar to
keep your motion tied to.

00:32:01.670 --> 00:32:05.680
So if it's fun or familiar or
serious or quick or sort of--

00:32:05.680 --> 00:32:07.620
whatever it might be--
that something to help

00:32:07.620 --> 00:32:09.365
keep it consistent across.

00:32:09.365 --> 00:32:10.480
AUDIENCE: OK.

00:32:10.480 --> 00:32:13.630
So there is some logic to it,
the way you come to decisions.

00:32:17.435 --> 00:32:18.675
AUDIENCE: Hello.

00:32:18.675 --> 00:32:21.330
Do you show examples
of this material design

00:32:21.330 --> 00:32:24.490
may apply to phones,
watch, laptops?

00:32:24.490 --> 00:32:27.940
Have you also considered auto
and what could potentially

00:32:27.940 --> 00:32:29.380
be different they,
given the fact

00:32:29.380 --> 00:32:31.580
that they used to just
glance the screen of the car,

00:32:31.580 --> 00:32:34.150
and could potentially miss
some of the animations.

00:32:34.150 --> 00:32:36.260
Or maybe it's actually
better to highlight

00:32:36.260 --> 00:32:38.530
what are the most
important actions.

00:32:38.530 --> 00:32:40.235
Have you given any sort to auto?

00:32:40.235 --> 00:32:43.685
NICHOLAS JITKOFF: I don't think
any of us have worked on a car.

00:32:43.685 --> 00:32:46.510
ARI SACHTER-ZELTZER: No, I
think, well-- No, none of us

00:32:46.510 --> 00:32:49.090
have worked directly
on the auto stuff

00:32:49.090 --> 00:32:54.400
but I think what we're trying
to express with the principles,

00:32:54.400 --> 00:32:59.110
is that there's a real
range of possibilities.

00:32:59.110 --> 00:33:01.720
And really understanding
your target audience.

00:33:01.720 --> 00:33:04.800
Just like, the personality,
for example, on a car,

00:33:04.800 --> 00:33:06.550
you don't want to have
lots of motion that

00:33:06.550 --> 00:33:08.210
could be distracting.

00:33:08.210 --> 00:33:09.970
You want things to
be really concise.

00:33:09.970 --> 00:33:12.650
Same way on the wearable,
where you don't maybe, have

00:33:12.650 --> 00:33:15.790
a lot of real estate, motion
is really an affordance

00:33:15.790 --> 00:33:17.750
to indicate what
options there are.

00:33:17.750 --> 00:33:19.090
How to manipulate the interface.

00:33:19.090 --> 00:33:21.514
So there's-- Sorry, go ahead.

00:33:21.514 --> 00:33:23.180
NICHOLAS JITKOFF:
These are very focused

00:33:23.180 --> 00:33:25.410
on active, attentive interfaces.

00:33:25.410 --> 00:33:27.641
I think on car, the
tools you'll see used

00:33:27.641 --> 00:33:29.890
are going to be more focused
on using change blindness

00:33:29.890 --> 00:33:32.850
to actually have animations
that deliberately hide change,

00:33:32.850 --> 00:33:34.770
so people's attention
isn't drawn.

00:33:34.770 --> 00:33:37.410
Or are rarely are used
to explain hierarchy

00:33:37.410 --> 00:33:38.660
when you actually are engaged.

00:33:38.660 --> 00:33:40.409
But there's a whole
separate set of things

00:33:40.409 --> 00:33:42.100
that are probably
worth throwing talk.

00:33:42.100 --> 00:33:44.600
MANUEL CLEMENT: You've seen
back there the projections that,

00:33:44.600 --> 00:33:47.360
all these motion of the
UI for the hundred auto.

00:33:47.360 --> 00:33:48.520
It's pretty neat stuff.

00:33:48.520 --> 00:33:49.540
Maybe can talk to people there.

00:33:49.540 --> 00:33:50.600
They would answer questions.

00:33:50.600 --> 00:33:52.808
The one thing I would say,
having worked on car stuff

00:33:52.808 --> 00:33:55.814
before, is not only there's
a problem of not distracting

00:33:55.814 --> 00:33:57.230
the user, which
is very important,

00:33:57.230 --> 00:34:01.090
but also, the screens they use
in cars, the reason why they're

00:34:01.090 --> 00:34:04.300
not as fancy as tablets,
is because there are really

00:34:04.300 --> 00:34:08.440
rugged devices that are
there automotive grade.

00:34:08.440 --> 00:34:11.375
And so they have to deal with
a lower frame rate, often,

00:34:11.375 --> 00:34:13.500
and then the touch response
may be a little slower.

00:34:13.500 --> 00:34:15.707
So there's a lot of
challenges there.

00:34:15.707 --> 00:34:18.040
The animations have to be
designed a little differently.

00:34:18.040 --> 00:34:20.993
Although, what they show there's
pretty cool on the big screen.

00:34:20.993 --> 00:34:21.659
Go talk to them.

00:34:21.659 --> 00:34:22.690
AUDIENCE: Thank you.

00:34:25.558 --> 00:34:26.139
AUDIENCE: Hi.

00:34:26.139 --> 00:34:28.780
When it comes to actually,
practically implementing

00:34:28.780 --> 00:34:32.340
a lot of these animations, how
well-- two questions, one is,

00:34:32.340 --> 00:34:35.280
how do they gracefully
degrade down

00:34:35.280 --> 00:34:38.320
to something like a
Gingerbread device?

00:34:38.320 --> 00:34:40.030
And then, how
backwards-compatible

00:34:40.030 --> 00:34:42.889
are they with something down as
far as like, ICS or something?

00:34:46.821 --> 00:34:48.820
ARI SACHTER-ZELTZER: I
don't-- I wish we had one

00:34:48.820 --> 00:34:51.909
of our engineers to talk
about really about the full

00:34:51.909 --> 00:34:54.239
backward-compatibility story,
but I think there's a lot

00:34:54.239 --> 00:35:00.600
of new API is in L. Specifically
to enable this kind of stuff.

00:35:00.600 --> 00:35:06.290
For example, the native
shadows and the object animator

00:35:06.290 --> 00:35:10.530
with pass and the
path interpalator

00:35:10.530 --> 00:35:16.120
I think there's a similar
story to the visual design.

00:35:16.120 --> 00:35:19.320
If you design for the high
end it's easy to pare back

00:35:19.320 --> 00:35:23.560
and start thinking about, what
elements of this transition can

00:35:23.560 --> 00:35:27.740
we degrade for
devices that don't

00:35:27.740 --> 00:35:29.085
have had some of those features.

00:35:29.085 --> 00:35:31.210
NICHOLAS JITKOFF: I think
one other important point

00:35:31.210 --> 00:35:35.370
is too, be conscious of
the things that are only

00:35:35.370 --> 00:35:37.300
indicated or afforded by motion.

00:35:37.300 --> 00:35:39.680
It's often better to have
additional affordances

00:35:39.680 --> 00:35:42.560
We generally couple the
dimensionality with motion

00:35:42.560 --> 00:35:45.020
to indicate that this
thing is movable.

00:35:45.020 --> 00:35:47.530
Allow it to be capable
of falling back

00:35:47.530 --> 00:35:50.252
on something that's a
little bit more static.

00:35:50.252 --> 00:35:50.970
AUDIENCE: Thanks.

00:35:56.470 --> 00:35:59.580
AUDIENCE: I'm going to ask a
somewhat antagonistic question,

00:35:59.580 --> 00:36:03.050
just for the sake of discussion.

00:36:03.050 --> 00:36:07.130
In the last-- I don't
know-- since the 1970s,

00:36:07.130 --> 00:36:10.194
people have been talking about
escaping the metaphor of paper

00:36:10.194 --> 00:36:10.860
on the internet.

00:36:10.860 --> 00:36:13.630
And using more dynamically
generated content.

00:36:13.630 --> 00:36:16.280
And not being limited
by the real world.

00:36:16.280 --> 00:36:18.470
What are the weaknesses
of the paper metaphor?

00:36:18.470 --> 00:36:20.610
What are the weaknesses
of material design

00:36:20.610 --> 00:36:23.220
as people are trying to
push other ideas forward?

00:36:23.220 --> 00:36:25.720
NICHOLAS JITKOFF: I think the
things that we have run into,

00:36:25.720 --> 00:36:28.760
is when we over-apply elements.

00:36:28.760 --> 00:36:30.510
I think one examples
from visual design,

00:36:30.510 --> 00:36:32.395
was when everything's on a card.

00:36:32.395 --> 00:36:34.020
It's too easy to fall
into the trap of,

00:36:34.020 --> 00:36:38.140
want a great deal of contrast
between different elements.

00:36:38.140 --> 00:36:39.530
This is also true of motion.

00:36:39.530 --> 00:36:41.270
It's pretty easy to
try to animate things

00:36:41.270 --> 00:36:44.417
that aren't for the right thing.

00:36:44.417 --> 00:36:46.250
The key drivers of
emotion we've been doing,

00:36:46.250 --> 00:36:49.490
was deciding how you're going
to manage the user attention.

00:36:49.490 --> 00:36:52.050
You want to move things in such
a way that your eye catches

00:36:52.050 --> 00:36:55.700
the last or the first thing,
but very deliberately chosen.

00:36:55.700 --> 00:36:58.570
And that we avoid having
things moving counter to that

00:36:58.570 --> 00:37:01.085
or creating disturbances.

00:37:01.085 --> 00:37:02.013
AUDIENCE: [INAUDIBLE]

00:37:10.611 --> 00:37:12.610
NICHOLAS JITKOFF: She
asked about how the system

00:37:12.610 --> 00:37:14.185
itself might hold
back other ideas.

00:37:16.880 --> 00:37:19.355
I'm trying to think.

00:37:19.355 --> 00:37:20.730
Generally we've
been trying to be

00:37:20.730 --> 00:37:23.690
so flexible about the amount
of theming and structure

00:37:23.690 --> 00:37:26.780
in the stuff that it is actually
looser than any other systems.

00:37:26.780 --> 00:37:29.710
Even though there's a
lot of baseline elements

00:37:29.710 --> 00:37:30.420
you could use.

00:37:33.752 --> 00:37:34.704
Let me think.

00:37:39.980 --> 00:37:42.360
The thing is that,
generally when

00:37:42.360 --> 00:37:44.031
you run into a problem
with the system,

00:37:44.031 --> 00:37:45.530
these are intended
to be guidelines.

00:37:45.530 --> 00:37:48.840
They're not intended to be
end-all-be-alls of what it

00:37:48.840 --> 00:37:49.690
should be.

00:37:49.690 --> 00:37:50.732
They're starting points.

00:37:50.732 --> 00:37:52.190
And part of what
we're trying to do

00:37:52.190 --> 00:37:55.920
with Polymer and with Android,
is establish a baseline level

00:37:55.920 --> 00:37:58.239
of quality that you start
with and then can build upon.

00:37:58.239 --> 00:38:00.280
And as we see people
applying the brands to apps,

00:38:00.280 --> 00:38:02.280
or just sort of
building them out,

00:38:02.280 --> 00:38:05.106
we want, and encourage them
to take this, and build on it,

00:38:05.106 --> 00:38:06.980
and make something a
little bit more extreme,

00:38:06.980 --> 00:38:09.200
or tailored to whatever
their specific use cases is.

00:38:09.200 --> 00:38:12.280
But this is sort
of, the baseline set

00:38:12.280 --> 00:38:14.050
of elements you start with.

00:38:14.050 --> 00:38:15.880
ARI SACHTER-ZELTZER:
And also, we've

00:38:15.880 --> 00:38:20.200
tried to really be considered
in how broadly they

00:38:20.200 --> 00:38:21.264
can be applied.

00:38:21.264 --> 00:38:22.680
As you saw in the
keynote, there's

00:38:22.680 --> 00:38:24.660
a lot of different
platforms being announced,

00:38:24.660 --> 00:38:27.320
a lot of lot of
different form factors.

00:38:27.320 --> 00:38:30.250
And each one of them
has their own nuances

00:38:30.250 --> 00:38:33.555
for what kind of depth
and what kind of surfaces

00:38:33.555 --> 00:38:34.760
that we want to represent.

00:38:34.760 --> 00:38:39.320
So I think as we continue
to evolve those platforms,

00:38:39.320 --> 00:38:42.630
I feel like we've set up a
system that has enough, kind

00:38:42.630 --> 00:38:45.030
of, flexibility and dynamic
range that we can grow on it

00:38:45.030 --> 00:38:46.732
and expand it to
accommodate those.

00:38:46.732 --> 00:38:48.190
NICHOLAS JITKOFF:
I have something.

00:38:48.190 --> 00:38:51.872
If the illusion gets
broken, it is a big problem.

00:38:51.872 --> 00:38:53.580
And this could happen
in many, many ways.

00:38:53.580 --> 00:38:58.500
Like dropped frames due to
like-- if an animation should

00:38:58.500 --> 00:39:00.480
lose frames, or the
perception of this thing

00:39:00.480 --> 00:39:04.780
as being realistic is violated,
that is one of the ways.

00:39:04.780 --> 00:39:06.820
You recognize these
as failings in the UI.

00:39:06.820 --> 00:39:09.370
That's why we're trying to
avoid things like jump cuts.

00:39:09.370 --> 00:39:12.360
Or trying to focus on
very specific, tailored,

00:39:12.360 --> 00:39:14.690
animations that aren't part
of a larger system that's

00:39:14.690 --> 00:39:15.980
not totally resolved.

00:39:19.560 --> 00:39:23.400
Having people's primal
understanding of dimensionality

00:39:23.400 --> 00:39:27.370
and shape relies on it being
internally consistent and not

00:39:27.370 --> 00:39:28.270
overbearing.

00:39:28.270 --> 00:39:32.910
So trying to balance how much
to do and avoid the times when

00:39:32.910 --> 00:39:34.870
it is too much,
or it falls down.

00:39:37.960 --> 00:39:39.710
ARI SACHTER-ZELTZER:
And we'll hang around

00:39:39.710 --> 00:39:42.301
if you want to chat some more.

00:39:42.301 --> 00:39:45.636
NICHOLAS JITKOFF:
Any other questions?

00:39:45.636 --> 00:39:47.260
We'll be up here if
have anything else.

00:39:47.260 --> 00:39:48.420
It was good to see you all.

00:39:48.420 --> 00:39:49.630
Thank you very much.

00:39:49.630 --> 00:39:53.280
[APPLAUSE]

