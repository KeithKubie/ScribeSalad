WEBVTT
Kind: captions
Language: en

00:00:00.450 --> 00:00:09.110
&gt;&gt; NEUBERG: Hi, my name is Brad Neuberg. Today,
I want to talk about the SVG Web Toolkit and

00:00:09.110 --> 00:00:15.450
some of the work we're doing around Open Web
Advocacy. I want to remind everyone that this

00:00:15.450 --> 00:00:20.970
video is public, so make sure if you ask questions
not to say anything that might not be public.

00:00:20.970 --> 00:00:25.370
So, I want to keep the talk pretty short,
about 30 minutes, to leave a lot of time for

00:00:25.370 --> 00:00:29.660
Q&amp;A. I want to do a lot of demos. You're going
to need to see some interesting use cases

00:00:29.660 --> 00:00:35.260
of SVG plus being used with the SVG Web Toolkit.
We'll talk about sort of the Open Web strategy

00:00:35.260 --> 00:00:39.610
a little bit and why Google cares about SVG.
You know, why should be invest any time and

00:00:39.610 --> 00:00:43.240
energy into this? So the timeline of where
we are I'll briefly compare and contrast SVG

00:00:43.240 --> 00:00:45.239
with other things that are out there to kind
of figure out where does this is fit in. And

00:00:45.239 --> 00:00:54.329
I want to leave a lot of time for Q&amp;A, and
really depending on where the audience is,

00:00:54.329 --> 00:00:58.620
I can crack open the code editor and we can
start to see how you use this. I can talk

00:00:58.620 --> 00:01:04.339
about the internals if you want to know what's
going on in the inside of the system. So that's

00:01:04.339 --> 00:01:10.380
the general overview. And anytime, please
feel free again to raise your hand and ask

00:01:10.380 --> 00:01:15.810
questions. So one thing that's really important
to remember is that there's no plug-ins to

00:01:15.810 --> 00:01:20.209
download with this. This is a JavaScript toolkit.
We're kind of cleverly using facilities that

00:01:20.209 --> 00:01:26.090
are already present on around 95% of the existing
browsers, so we can instantly get coverage.

00:01:26.090 --> 00:01:34.909
And we've targeted a huge slew of browsers,
so IE6, 7 &amp; 8, Safari, Firefox. So you can

00:01:34.909 --> 00:01:41.409
start to deploy SVG content across most of
the installed base. And that's really important

00:01:41.409 --> 00:01:43.549
and that was really the focus, not to make
some kind of new technology but to really

00:01:43.549 --> 00:01:48.490
get to a point to develop this connection
and start using part of the technology to

00:01:48.490 --> 00:01:53.069
kind of get out of that chicken and egg problem,
to kind of induce some movement in the system

00:01:53.069 --> 00:01:58.369
. I want to say too that even though we've
been working on this, it's been a really amazing

00:01:58.369 --> 00:02:03.770
team. I've done a lot of open source, and
when we have anyone who shows up and can contribute

00:02:03.770 --> 00:02:09.890
it's amazing. I've had two the best people
I've ever worked with show up and really do

00:02:09.890 --> 00:02:13.079
a huge amount of project. James Hight and
Rick Masters, these guys are awesome. They've

00:02:13.079 --> 00:02:15.370
been hacking on their weekends. They contributed
a lot of the cool stuff. You'll see we've

00:02:15.370 --> 00:02:20.230
got basic font support, video and audio, a
lot of really cool stuff that they've done,

00:02:20.230 --> 00:02:36.980
and it's been really amazing. So I want to
start out by showing you...
This is Firefox, and this is the native Firefox

00:02:36.980 --> 00:02:45.299
support. And what we see here is just standard
SVG. We've got some images from Flickr. We

00:02:45.299 --> 00:02:49.629
can interact with them and scale them. If
you were to crack this open, you'd see pretty

00:02:49.629 --> 00:02:54.700
much JavaScript that looks and feels kind
of like the JavaScript when you write JavaScript

00:02:54.700 --> 00:03:06.920
for an HTML page. But then we can take this
and going in and out of Explorer. This is

00:03:06.920 --> 00:03:21.980
IE-7, and we see the same thing running with
the same degree of fidelity. So that's really

00:03:21.980 --> 00:03:26.959
cool, because the developer doesn't even really
know about this SVG Web Toolkit. You just

00:03:26.959 --> 00:03:31.329
add this into your page, and at that point
you could start to use the standard as if

00:03:31.329 --> 00:03:36.019
it is native and supported. If we were to
crack open this particular sample, what we

00:03:36.019 --> 00:03:41.469
would see is a bunch of JavaScript that is
sort of scripting SVG elements. When you use

00:03:41.469 --> 00:03:52.170
the SVG Web Toolkit, you'll still feel like
there's a native support. So if we were to

00:03:52.170 --> 00:03:57.400
crack this open, you'd see things like, you
know, familiar friends if you've done JavaScript

00:03:57.400 --> 00:04:01.499
DOM programming like getElementById. So in
that script for example it might grab a circle

00:04:01.499 --> 00:04:09.739
from the page and that just works createElement.
So in HTML you generally have to say createElement

00:04:09.739 --> 00:04:14.249
form for example. In this, you have to add
the name and space. We actually added a variable

00:04:14.249 --> 00:04:19.130
into the page to make it a little easier.
But there you are. We make a circle. You can

00:04:19.130 --> 00:04:23.510
even script the style, and again it looks
and feels like you have native support. So

00:04:23.510 --> 00:04:28.810
here we are changing the fill of the circle
to red, and so on. You'll see we have the

00:04:28.810 --> 00:04:33.260
DOM. You can manipulate through this at events.
So that's really unique. That's one of the

00:04:33.260 --> 00:04:37.660
big things. It not only does SVG support static
SVG but also dynamic because you can really

00:04:37.660 --> 00:04:46.740
start to do some interesting things with this.
By default, we only use kind of the magic

00:04:46.740 --> 00:04:51.770
that we're doing on Internet Explorer and
we use the native support on Firefox, Safari,

00:04:51.770 --> 00:04:56.820
and Chrome. However, you can optionally override
that and have SVG Web to do all of its magic

00:04:56.820 --> 00:05:05.500
on those browsers too. Now what's cool about
that is that you can go beyond. So here we

00:05:05.500 --> 00:05:19.440
are.

00:05:19.440 --> 00:05:26.670
So instead of photos now, now we have videos
that we can manipulate. And keep in mind,

00:05:26.670 --> 00:05:41.210
this is Internet Explorer 7. This is running
in a virtual machine. This is the Bruno Trailer

00:05:41.210 --> 00:05:46.980
and the new Star Trek Trailer. So that's pretty
cool. Now the video support, that's not natively

00:05:46.980 --> 00:05:54.280
supported by any browsers yet. So what's unique
is we can optionally override the native support

00:05:54.280 --> 00:06:11.780
in the browser, going away from the default
in order to get those extra features. Now

00:06:11.780 --> 00:06:20.000
that's really cool. That means that your project,
you can start by using the native support

00:06:20.000 --> 00:06:26.730
in all of those other browsers. But then if
you hit some bug that's in the native implementation

00:06:26.730 --> 00:06:31.150
or you want to use something that may not
be as widely supported yet, you can then toggle

00:06:31.150 --> 00:06:35.990
on the SVG Web and it will sort of start using
the same magic, and you'll see the same thing.

00:06:35.990 --> 00:06:39.590
The JavaScript will interact to the SVG and
it will look and feel like it's really a part

00:06:39.590 --> 00:06:45.850
of the browser. This becomes really cool,
because I want to show you fonts, SVG fonts.

00:06:45.850 --> 00:06:52.870
Those are natively supported by Safari but
not Firefox yet. So by, in that scenario turning

00:06:52.870 --> 00:06:58.040
this on, you can then get that same 95% coverage.
So that's really cool. So that can also act

00:06:58.040 --> 00:07:04.110
as a positive spur to help try out some of
the newer things, see how those gel with developers

00:07:04.110 --> 00:07:15.270
and then the other browsers can sort of natively
fill those in. Just before I jump on, any

00:07:15.270 --> 00:07:23.330
question so farm what you've seen? No questions?
Yes, Romy?

00:07:23.330 --> 00:07:23.360
&gt;&gt; ROMY: Does--is this using Flash?

00:07:23.360 --> 00:07:27.070
&gt;&gt; NEUBERG: Yes. So, Romy's question is, is
this using Flash? On the inside, we use a

00:07:27.070 --> 00:07:31.560
slew of different tricks. So we used Flash
to do the displaying. We used something called

00:07:31.560 --> 00:07:37.540
Microsoft Behaviors to actually kind of get
some of the magic around the JavaScript type

00:07:37.540 --> 00:07:43.860
of work. The reason we choose Flash is that
it has a 97% install base. So like I said,

00:07:43.860 --> 00:07:47.830
we kind of cleverly used various facilities
that are already present on the browser so

00:07:47.830 --> 00:07:52.270
the users don't have to install anything.
So right, the actual rendering when SVG Web

00:07:52.270 --> 00:07:59.880
does its magic is Flash. We used Flash 9 and
4 which was the one that has... We're not

00:07:59.880 --> 00:08:06.040
using Flash 10 yet because it doesn't have
as much coverage. Any question? So right,

00:08:06.040 --> 00:08:10.510
like I said, you can use this--this is the
whole reason we did this. Today, you can use

00:08:10.510 --> 00:08:19.240
this to deploy real content across 95% of
the existing web. So that was the goal. And

00:08:19.240 --> 00:08:22.990
it's as easy as dropping a script source into
your page. When we get to the Q&amp;A, I can go

00:08:22.990 --> 00:08:27.380
a little bit more into what configuration
of deployment looks like, but basically you

00:08:27.380 --> 00:08:33.150
add a script to your page. And at this point,
we're supporting a lot of the SVG 1.1 standard.

00:08:33.150 --> 00:08:36.370
There are some, you know, there are some areas
that aren't covered. And there's a few areas

00:08:36.370 --> 00:08:40.570
where you have to just slightly change what
you're doing. But in general, it's a tremendous

00:08:40.570 --> 00:08:47.240
amount of, it just feels like native support.
Now there's actually two ways to embed. We

00:08:47.240 --> 00:08:52.960
support using the object tag, it has a syntax
similar to this. And then we also support

00:08:52.960 --> 00:09:00.340
dropping directly into normal HTML. So you
could drop this in the normal HTML. It doesn't

00:09:00.340 --> 00:09:05.210
have to be XHTML. It could just be a normal
plain old, plain vanilla HTML. And the way

00:09:05.210 --> 00:09:09.230
you do that is we actually--an HTML file allows
this, by the way. You use a script tag and

00:09:09.230 --> 00:09:14.630
you set the mime type, and then you just drop
your SVG right into the page. So that can

00:09:14.630 --> 00:09:20.550
really be nice for certain scenarios because
you might have normal HTML. Your JavaScript

00:09:20.550 --> 00:09:25.040
in the page can still manipulate this. You
can integrate with HTML a little better. So

00:09:25.040 --> 00:09:30.820
those are the two deployment options we support
right now. So I want to show you a couple

00:09:30.820 --> 00:09:38.950
of cool demos. These Tetris demo is actually
written where it's embedded directly into

00:09:38.950 --> 00:09:46.730
a normal HTML page. And I'm going to show
this, this is a Safari, but it's actually

00:09:46.730 --> 00:09:57.600
overriding the native renderer, and we have
Tetris. This is fun debugging this actually,

00:09:57.600 --> 00:10:25.440
it's like I get to play Tetris while I'm working.
It's just nice. And here we are. So again,

00:10:25.440 --> 00:10:33.250
pretty straightforward stuff. That's just
great. It just looks and feels the same. This

00:10:33.250 --> 00:10:41.570
is a really cool one. One of the volunteers
in our community put this together. One of

00:10:41.570 --> 00:10:44.140
the unique things about SVG and I'll now go
over when do you want to use the SVG versus

00:10:44.140 --> 00:10:48.790
Canvas and where does it make sense? One of
the real nice things about SVG is it can make

00:10:48.790 --> 00:10:54.040
real sense for sort of when you want something
that's more than an image. And what you're

00:10:54.040 --> 00:10:58.120
going to see for this, this is a population
pyramid that's pulling population statistics

00:10:58.120 --> 00:11:04.029
for different countries. And in real time,
you can translate all the texts on the page

00:11:04.029 --> 00:11:07.529
to different languages, into Russian, into
Cyrillican, into German. That's really cool

00:11:07.529 --> 00:11:11.880
because at the end of the day SVG is just
text which is really nice too because it's

00:11:11.880 --> 00:11:23.110
really easy to make a PHP script or an App-engine
script that just shoots out SVG that might

00:11:23.110 --> 00:11:33.810
have data embedded into it. This is a nice
use case. This is actually Safari with its

00:11:33.810 --> 00:11:40.279
native support. We see the two different population
demographics. And I'll actually do all the

00:11:40.279 --> 00:12:02.960
toggling in IE so you can get to see how this
guy actually works. So the monitor is a little

00:12:02.960 --> 00:12:13.150
small but right here we have a language toggle.
Let's change this into Russian. You will see

00:12:13.150 --> 00:12:16.860
that it has now been translated into Russian.
Now what's really cool again because this

00:12:16.860 --> 00:12:19.839
is more than an image. It's text. You can
do things like that. You can also interact

00:12:19.839 --> 00:12:28.040
with it. So, outside of this is, is a normal
HTML page. And as we go over this, we have

00:12:28.040 --> 00:12:32.779
directly embedded SVG into the page using
that script tag approach you saw. So something

00:12:32.779 --> 00:12:41.790
like this. I know the volunteer who created
this, he used an existing kind of demo. He

00:12:41.790 --> 00:12:51.870
was able to put this together really fast.
So running in IE. I'd like to call this one,

00:12:51.870 --> 00:13:01.380
I'd like to call--this is the hello world
of vector graphics. If you've ever... Ray

00:13:01.380 --> 00:13:09.060
Flat, he knows this one. The reason I want
to show you this one is one of the things

00:13:09.060 --> 00:13:17.040
that makes SVG unique is the fact that it's
resolution independent. You are able to give

00:13:17.040 --> 00:13:22.490
one size. And whether you are looking at an
iPhone or you're looking at a 40-inch monitor,

00:13:22.490 --> 00:13:28.980
what you're dealing with can scale and still
stay beautiful and still stay legible. So,

00:13:28.980 --> 00:13:34.440
this is the tiger. This is the hello world
of vectors. I'm just showing you, we're going

00:13:34.440 --> 00:13:43.580
to zoom in. This is actually known as the
view box. By default, an SVG image will just

00:13:43.580 --> 00:13:48.380
display how it needs to display. But you can
have more control of it of what's called the

00:13:48.380 --> 00:13:51.730
view box to say, you know. Actually, fit it
into something really, really big so it's

00:13:51.730 --> 00:13:55.060
going to zoom out or something really, really
small. So you can actually animate that and

00:13:55.060 --> 00:13:58.800
do interesting things. Here right now, we'll
just toggle the button to change the view

00:13:58.800 --> 00:14:05.560
box. So notice as we zoom in, it doesn't pixelate.
It stays beautiful. So you can imagine on

00:14:05.560 --> 00:14:11.779
an iPhone which has good SVG support as the
user pinches and zooms in, the text, the images

00:14:11.779 --> 00:14:28.020
is going to stay legible and nice. So, fonts.
We've got basic font support. And what's really

00:14:28.020 --> 00:14:32.350
unique about SVG fonts is they're just text.
I like to call them, they're a cut and paste

00:14:32.350 --> 00:14:42.080
technology. And I'll show you a little snippet.
Safari natively supports them. Let me show

00:14:42.080 --> 00:14:49.560
what that looks like. This right here is actually
the DroidSans fonts which come on the Android

00:14:49.560 --> 00:14:53.589
phone, which is a nice font. It's actually
open source. And we just ran it through a

00:14:53.589 --> 00:14:58.000
little converter and turn into SVG font which
is just plain text you drop in your page just

00:14:58.000 --> 00:15:08.550
like you would an image. Here it is natively
supported. But then, we come over to IE. And

00:15:08.550 --> 00:15:20.710
we see the same thing with the same fidelity.
So what's really--again, when it comes--again,

00:15:20.710 --> 00:15:25.940
keep in the back of your mind, 95% coverage
drop a JavaScript library into the page. Now,

00:15:25.940 --> 00:15:35.950
this isn't just showing, "Hey, this is cool
stuff you can use five years from now," you

00:15:35.950 --> 00:15:42.380
know. Yes, Ray.

00:15:42.380 --> 00:15:58.990
&gt;&gt; RAY: Are those fonts rendered a sort of
shape fills or are they rendered using the

00:15:58.990 --> 00:16:11.149
full on rendering capability of the browser
with like clear typed on windows and so on

00:16:11.149 --> 00:16:19.270
and so forth?

00:16:19.270 --> 00:16:29.510
&gt;&gt; NEUBERG: So the question is are these fonts
being rendered as shape fills or are they

00:16:29.510 --> 00:16:37.820
going into the sort of full OS support? So
SVG fonts are interesting. They are--you can

00:16:37.820 --> 00:16:47.230
think of them more as the application letter.
They--you define a glyph. Like you say, "Here's

00:16:47.230 --> 00:16:56.690
the letter A." And then you say, "And here's
the SVG commands to draw that." So, it's not

00:16:56.690 --> 00:17:05.989
dropping down into a native OS support. And
we only support a subset, we only say, "You

00:17:05.989 --> 00:17:11.360
can have a path statement." So, right, you're
not going to get any sort of acceleration

00:17:11.360 --> 00:17:13.809
or other things that might be at the OS layer.

00:17:13.809 --> 00:17:18.639
&gt;&gt; RAY: This sub-pixel rendering that's really,
you know, that's really....

00:17:18.639 --> 00:17:21.419
&gt;&gt; NEUBERG: Right.

00:17:21.419 --> 00:17:46.279
&gt;&gt; RAY: You know, that's one of the--that's
one of the arguments for, I think, a Canvas.

00:17:46.279 --> 00:17:48.480
&gt;&gt; NEUBERG: Yeah.

00:17:48.480 --> 00:17:56.480
&gt;&gt; RAY: HTML 5, does have that kind of font
rendering fidelity?

00:17:56.480 --> 00:18:16.919
&gt;&gt; NEUBERG: So, the question is getting the
sub pixel rendering is one of the arguments

00:18:16.919 --> 00:18:49.409
for the HTML Canvas? Yeah. So there's pros
and cons. So the nice thing about this is

00:18:49.409 --> 00:19:04.929
it's something you can start using. Personally,
I really hope this sort of CSS way of importing

00:19:04.929 --> 00:19:14.789
a true-type file or open type file. I hope
that in the long run, it becomes the standard

00:19:14.789 --> 00:19:21.950
way to do things, but it could be--it could
be awhile. So, good question. I'd like to

00:19:21.950 --> 00:19:36.830
say, you know, when would you use this? I
want to you show you a sample of when this

00:19:36.830 --> 00:19:47.299
makes sense. One of the nice things about
SVG is you can start combining these things

00:19:47.299 --> 00:19:54.759
together. You'll see some animations, some
fonts, some filters, so whenever you want

00:19:54.759 --> 00:20:01.210
to start combining these things together,
that's when it makes sense. If you just want

00:20:01.210 --> 00:20:09.619
a nice headline, this is probably overkill.
And you probably want to use something called

00:20:09.619 --> 00:20:17.499
like Cipher or something like that. So when
you want to start doing fancy things, I'll

00:20:17.499 --> 00:20:29.759
show you a good demo in a little bit where
you're combining these things in an interesting

00:20:29.759 --> 00:20:48.669
way, then it--then it starts making sense.
Oh, and I also want to say of course the iPhone

00:20:48.669 --> 00:20:56.909
supports SVG fonts. Yes.

00:20:56.909 --> 00:21:07.389
&gt;&gt; You know, what about Android? Can it support
it?

00:21:07.389 --> 00:21:15.759
&gt;&gt; NEUBERG: Yeah, Android is an unfortunate
story. Android is something we can't support.

00:21:15.759 --> 00:21:27.450
It doesn't have--they use a Web Kit, but they've
clipped out a lot of Web Kit extensions. There's

00:21:27.450 --> 00:21:32.359
some cool stuff from Web Kit that's simply
clipped out. Plus, there's no Flash, so there's

00:21:32.359 --> 00:21:38.230
not much that we can do. It's an unfortunate
situation. So, I'm going to have this load

00:21:38.230 --> 00:21:46.739
up an SVG font demo on the iPhone. I guess
we don't have a camera. I might have to pass

00:21:46.739 --> 00:22:17.090
this around the audience, huh? I hope we can
keep this up on the screen. You probably can't

00:22:17.090 --> 00:22:22.940
see it. We kind of see exactly the same font.
And of course, this really does support as

00:22:22.940 --> 00:22:42.629
you zoom in and out. And so I want to give
this to you,

00:22:42.629 --> 00:22:58.109
so feel free to hand it around, and zoom it
in and out. So like I said, they're really

00:22:58.109 --> 00:23:10.909
straightforward, they're just text. They're
just a bunch of glyphs, right? If a glyph

00:23:10.909 --> 00:23:15.669
name equals "A", you need to find A, you give
your data. You can technically actually support

00:23:15.669 --> 00:23:20.809
full SVG, and it will really support the path
statement, which gets you pretty far right

00:23:20.809 --> 00:23:23.359
now. And right--if you're rendering a whole
document, or you want something with that

00:23:23.359 --> 00:23:31.159
kind of sub-pixel, you're not going to get
that right now. So, we fully support you scripting

00:23:31.159 --> 00:23:38.629
with JavaScript, but there's--there's a couple
of downsides with that that's really, really

00:23:38.629 --> 00:23:42.809
good for more experienced developers. We also
support basic animation. This is also known

00:23:42.809 --> 00:23:48.889
as Smile. But we support basic Smile. So this
is--this can be really nice for more beginner

00:23:48.889 --> 00:23:53.249
developers. It also actually allows us to
do some performance improvements when you're

00:23:53.249 --> 00:23:59.989
actually using SVG Web because we don't have
to do as much talking back and forth, so you

00:23:59.989 --> 00:24:02.350
can get better performance. But here's an
example of that. I'm going to show you a video,

00:24:02.350 --> 00:24:09.119
and you can actually add these, all sorts
of tags. So, right here, we're adding a video

00:24:09.119 --> 00:24:16.359
tag. I've kind of clipped off some of the
attributes so it can fit. And then we say

00:24:16.359 --> 00:24:26.659
animate and it's really straightforward. We're
saying animate the width from 400 to 300 pixels,

00:24:26.659 --> 00:24:31.169
start at two seconds after the document's
loaded. Go for five seconds. And then when

00:24:31.169 --> 00:24:38.100
it's done, freeze at the final state. It's--I
mean, you could do that with JavaScript. And

00:24:38.100 --> 00:24:47.679
that's--it's pretty nice to be able to do
with the simple tag especially again if you

00:24:47.679 --> 00:24:50.210
have some PHP, or an App Engine, that's spitting
out some code, that can just add it in for

00:24:50.210 --> 00:24:54.669
like animated menus or something. So this
one--this is actually combining those animation

00:24:54.669 --> 00:25:03.299
tags along with SVG audio. So there's no JavaScript,
you see a little, little scimitar shimmering

00:25:03.299 --> 00:25:14.019
things. So there's no JavaScript in this page,
it's just those animation tags. I didn't have

00:25:14.019 --> 00:25:24.269
the--I can--I think Rick Masters might have
added that--the music. I think it's like open-source

00:25:24.269 --> 00:25:37.149
music or something. So, again, if you were
to crack this one open, you could see a bunch

00:25:37.149 --> 00:25:45.570
of anime tags. You'd see--but one of the cool
things about SVG is you can group things together.

00:25:45.570 --> 00:25:54.460
Just like in Photoshop, you know, you can
grab all these things, group them together,

00:25:54.460 --> 00:26:03.879
treat them as a unit. Same thing in SVG, we
can actually have some quite complicated drawing

00:26:03.879 --> 00:26:11.190
commands for the scimitar which might have
been exported from Illustrator. And we can

00:26:11.190 --> 00:26:17.759
say as a group, you know, animate this from
this exposition to this exposition with a

00:26:17.759 --> 00:26:25.609
single tag and then start this music when
things happen. And again one of the cool things

00:26:25.609 --> 00:26:48.139
is you can animate all sorts of things. So
here we are. This is actually kind of a test

00:26:48.139 --> 00:26:55.289
page. You see various different things there
and then the jerkiness because I'm playing

00:26:55.289 --> 00:27:00.249
this in a virtual machine instead of Macro
SX (ph). So, you have those different squares

00:27:00.249 --> 00:27:08.379
that are moving based on the anime tags. Of
course, you can also say not just on duration,

00:27:08.379 --> 00:27:25.359
but you can say start or stop something when
you have an event that happened such as a

00:27:25.359 --> 00:27:35.529
clip. And we are restarting. So that's still
pretty experimental but we have quite a lot

00:27:35.529 --> 00:27:48.590
already in. Now remember, I mentioned how
some of this stuff comes together when you

00:27:48.590 --> 00:27:58.879
combine them together. We're hosting in the
fall the SVG open conference here at Google.

00:27:58.879 --> 00:28:13.049
And here's the banner that they have made.
And this is a really nice kind of showing

00:28:13.049 --> 00:28:20.330
everything coming together. This is IE7 again.
You'll see certain things fly in. The screen

00:28:20.330 --> 00:28:33.690
is a little dark. So the contrast isn't correct.
But over on the upper right, you see SVG open

00:28:33.690 --> 00:28:43.429
net, that's even more yellow on my screen.
That's a font with the blur filter on it.

00:28:43.429 --> 00:28:51.619
You see gradients. Everything that flew in
it's just these simple anime tags. And this

00:28:51.619 --> 00:28:58.239
was a great use case. This file was written
by someone who's another not a programmer,

00:28:58.239 --> 00:29:04.989
they're graphic designers. But they were able
to use Illustrator and Inkscape, put it together

00:29:04.989 --> 00:29:11.109
and then put these things together pretty
quickly. So, why SVG? Why does Google care

00:29:11.109 --> 00:29:18.149
about SVG? So one of the things that's important
is SVG is sort of a part of the HTML 5 family

00:29:18.149 --> 00:29:25.419
of technologies. I'll touch on that a little
bit more but HTML 5 talks about here's how

00:29:25.419 --> 00:29:33.840
you embed SVG into a normal HTML page. One
of the things I really respect about the HTML

00:29:33.840 --> 00:29:40.849
5 process is you need to show that there's
market demand. You need to show that there's

00:29:40.849 --> 00:29:44.109
some valid use cases for something to make
it an HTML 5. I like that process. So, the

00:29:44.109 --> 00:29:50.679
SVG folks showed, here are some valid use
cases, where this is important. So, it's--as

00:29:50.679 --> 00:30:00.340
a part of the HTML 5 initiative and Firefox
3.5 actually has support for this, it's not

00:30:00.340 --> 00:30:07.119
turned on by default yet. But it's probably
gonna come soon. What's exciting about that,

00:30:07.119 --> 00:30:16.779
in the past you had to use X HTML which like,
0.000001 percent might have used to use SVG

00:30:16.779 --> 00:30:28.789
and now you can drop it into the 99.9 repeating
bar that most of the content is under and

00:30:28.789 --> 00:30:38.539
that's nice, kind of freeze things up. One
of the really unique things about SVG is it

00:30:38.539 --> 00:30:45.799
is searchable, now this doesn't make sense
when you have a tiger illustration but when

00:30:45.799 --> 00:30:51.229
you have an electoral map of the U.S., with
all the states, such as Wikipedia, and I'll

00:30:51.229 --> 00:30:57.739
talk about Wikipedia in a bit. We're talking
about--it make sense when you got a medical

00:30:57.739 --> 00:31:08.590
diagram, you've now opened up a lot of interesting
content, especially expert oriented content,

00:31:08.590 --> 00:31:24.289
that can now be searched. And it's in our
interest to make sure the web doesn't become

00:31:24.289 --> 00:31:31.679
big binary blobs. And that makes sense for
certain use cases like video. But it's nice

00:31:31.679 --> 00:31:39.460
when we can prevent that, you know, and have
open searchable things. I already mentioned

00:31:39.460 --> 00:31:53.330
Market Demand. One of the unique things about
SVG that it uses existing web skills, so when

00:31:53.330 --> 00:32:08.009
we get to Q&amp;A I can crack open one of these
things, but again, it pretty much feels like

00:32:08.009 --> 00:32:15.119
you're interacting with a DOM and JavaScript,
HTML, and so on, CSS. What I like to say is,

00:32:15.119 --> 00:32:25.669
these are view source technologies; it's already
been great getting these things. I always

00:32:25.669 --> 00:32:34.340
look for test cases and I learned just by
view source, you know. That population demo,

00:32:34.340 --> 00:32:42.669
if that had been a big binary blob, I could
have been, like, "Hey, that's really cool,

00:32:42.669 --> 00:32:52.080
how did you that?" And they may not have told
me. But I was able to crack it open and say,

00:32:52.080 --> 00:33:03.080
wow, that's an interesting, and it's nice
and I learned. So, these are cut and paste

00:33:03.080 --> 00:33:11.159
technologies, just like the YouTube embed
script. So, if you see something that you

00:33:11.159 --> 00:33:25.849
like and of course, you always have to respect
Copyright but that's inherent in HTML already.

00:33:25.849 --> 00:33:38.149
Then you can learn and if some things open,
you could easily use it, like that open font.

00:33:38.149 --> 00:33:54.259
That DroidSans font is open source. So, if
you like it, you could cut and paste it, add

00:33:54.259 --> 00:33:57.090
it into your file and go forward. One of the
really cool things, is that--it's really server

00:33:57.090 --> 00:34:05.019
friendly. Yes, you can have PHP that spits
out some binary flash or something like that.

00:34:05.019 --> 00:34:12.980
It's not easy. It's really easy to do that.
Especially now, the way that we allow to directly

00:34:12.980 --> 00:34:21.000
embed into normal HTML. We use it, we use
it, for example, and presently, in Google

00:34:21.000 --> 00:34:30.869
maps and in our internal closure, we use it
as sort of one of our drawing surfaces when

00:34:30.869 --> 00:34:38.260
there's native support. And finally, one the
really key use cases, is import and export.

00:34:38.260 --> 00:34:45.379
When you're dealing with assets, when you
have like that map of the U.S. and I want

00:34:45.379 --> 00:34:53.819
to show you a really cool demo. This shows
Canvas being used with SVG. You don't want

00:34:53.819 --> 00:34:59.799
that to be 10,000 lines of JavaScript that
calls for drawing a map of the U.S., you know.

00:34:59.799 --> 00:35:12.230
What you want is you want to import that resource
to SVG and then add whatever magic on top

00:35:12.230 --> 00:35:18.910
of that, using Canvas. That's where that starts
to make sense. So, I wanted to quickly touch

00:35:18.910 --> 00:35:25.520
on the timeline, actually, there's couple
of details I didn't mention. One is the library

00:35:25.520 --> 00:35:33.920
of 60k. So, if you have native support, you
actually don't take that hit, but that's pretty

00:35:33.920 --> 00:35:49.440
nice. You have a lot of support in 60k. Right
now, we have an Alpha build, Wikipedia, they

00:35:49.440 --> 00:35:58.869
have a monster repository of SVG, they're
gonna use SVG web to present that stuff to

00:35:58.869 --> 00:36:06.200
Internet Explorer, I'm working with them on
a tool for that. The big focus right now is

00:36:06.200 --> 00:36:13.630
performance and bug fixes and community support;
sort of people are starting to use this. In

00:36:13.630 --> 00:36:19.180
the fall, the first week of October, we're
hosting the SVG open conference here at Google.

00:36:19.180 --> 00:36:28.369
There's gonna be lots of--the Raphael folks
are gonna be there, Jojo of GFX, and Gavin

00:36:28.369 --> 00:36:34.950
is involved with some of those folks. There's
gonna be a lot of really interesting presentations

00:36:34.950 --> 00:36:43.920
and we're also going to kind of more formally
unveil the work we've been doing with this

00:36:43.920 --> 00:36:48.539
along with others outside. And after that,
I originally wanted to have a date of release,

00:36:48.539 --> 00:37:02.190
I think it's gonna be more of an early access
release. And of course, more advocacy, in

00:37:02.190 --> 00:37:23.140
terms of the timeline. You know, so, I've
mentioned this open web strategy. When we

00:37:23.140 --> 00:37:29.230
started our open web advocacy group, we're
like, what the heck is this? What does it

00:37:29.230 --> 00:37:43.059
mean to do open web advocacy and we took as
our goal, we want to help accelerate the rate

00:37:43.059 --> 00:37:51.849
at which developers can actually use this
stuff. We saw ourselves as a bit more of sort

00:37:51.849 --> 00:38:06.650
of cross browser team, and one of the ways
we sort of mapped out that, how you do this

00:38:06.650 --> 00:38:33.369
is we came up with what we called, communication
credibility and capability. So, we said, capability

00:38:33.369 --> 00:38:50.869
is just actually being able to use something,
you know. Where can I use CSS 3 for example;

00:38:50.869 --> 00:39:03.990
like getting that capability across enough
browsers that developers feel comfortably

00:39:03.990 --> 00:39:18.869
using it? So, native browsers support all
the great work that the web kit and the Chrome

00:39:18.869 --> 00:39:30.569
teams have been doing, in terms of getting
good browser support and then JavaScript tool

00:39:30.569 --> 00:39:42.960
kit. That's my background and that's where
I can help contribute through JavaScript shims.

00:39:42.960 --> 00:40:01.609
They can help get the capability up faster,
so we don't have to wait so long. And then,

00:40:01.609 --> 00:40:13.799
credibility, this is something that more propriety
plug-ins have done very well. They'll make

00:40:13.799 --> 00:40:32.390
claims like, you can run this, you know, more
than 90% on the web. We wanted to come up

00:40:32.390 --> 00:40:54.490
with similar numbers and then use those JavaScript
tool kits to help that. So, we can now say,

00:40:54.490 --> 00:41:03.609
you can use this almost--almost on a 100%,
we say 95% to be conservative, that's up there.

00:41:03.609 --> 00:41:10.769
Without the JavaScript tool kit, it's more
like 30%. So, developers, when they numbers

00:41:10.769 --> 00:41:16.970
like that feel more comfortable starting to
use something. And then, getting traditional

00:41:16.970 --> 00:41:24.359
advocacy wins. And so, Wikipedia or folks
that embrace using this and says, "Hey, we've

00:41:24.359 --> 00:41:34.700
done this, and here's how we're doing it and
here is how you can do it too." And then,

00:41:34.700 --> 00:41:43.569
finally communication, blogging, articles,
presentations, so that's kind of how we think

00:41:43.569 --> 00:41:57.789
about what the heck we're doing on the open
web advocacy team when we started. So, before

00:41:57.789 --> 00:42:25.950
I jump on, any questions about what you've
seen so far? Any questions over VC? No questions?

00:42:25.950 --> 00:42:40.539
All right. So, I want to quickly compare and
contrast--I'm--I'm going to skip HTML 5, because

00:42:40.539 --> 00:42:51.779
I already spoke, about how this fits to HTML
5. It's--it's not necessarily a part of the

00:42:51.779 --> 00:43:03.869
spec, but the spec says, here's how you embed
SVG, in the normal HTML, and that is major

00:43:03.869 --> 00:43:09.619
new feature of the HTML 5. How does fit with
Canvas? Well, I want to show you a really,

00:43:09.619 --> 00:43:20.230
really cool nice shot of the Canvas and SVG
tags that Mozilla did. But I think really,

00:43:20.230 --> 00:43:28.029
it help shows the various strengths of the
two technologies. So, this is the--this doesn't

00:43:28.029 --> 00:43:32.039
use SVG web at all, this uses a native support.
This is a download tracker, for the Mozilla

00:43:32.039 --> 00:43:35.750
downloads. What you see on the left is a map
of the U.S.; on the right you see the browsers

00:43:35.750 --> 00:43:44.640
kept open at persistent connection over to
the server, in real time, to find out who's

00:43:44.640 --> 00:43:48.049
downloading something. And then you see, it
might be a little small unfortunately, do

00:43:48.049 --> 00:43:53.680
you see those little red dots that are appearing
on top? Do you see as I zoom in, do you see

00:43:53.680 --> 00:43:58.880
them appearing and disappearing? The map is
SVG. The red dots are Canvas. The red dots

00:43:58.880 --> 00:44:01.760
aren't interactive, SVG excels when you want
to do light interactivity, in a user interface

00:44:01.760 --> 00:44:11.289
oriented matter. Because we don't need that,
the Canvas dots, that's a really good use

00:44:11.289 --> 00:44:15.279
case of Canvas. So, this is a nice sort of
match up to show the technologies together,

00:44:15.279 --> 00:44:24.539
and so, one of the--of the strengths and which
also can be one of the weaknesses. You have

00:44:24.539 --> 00:44:35.119
to choose your battles, SVG is like HTML,
you get a DOM, when you add something, when

00:44:35.119 --> 00:44:59.950
you add a rectangle or a square, it's an object,
you have a rectangle or a square on the page.

00:44:59.950 --> 00:45:01.599
That could be really nice, because it means
that you can add event handling easily. It

00:45:01.599 --> 00:45:04.019
retains its identity; you can enumerate all
those things. You can really do interesting

00:45:04.019 --> 00:45:08.500
things with that. Things like this, for example,
adding an event handler is very straightforward.

00:45:08.500 --> 00:45:14.760
Now, if you're doing a side scrolling game
that has no mouse interactivity and uses the

00:45:14.760 --> 00:45:18.309
keyboard to jump back and forth, you don't
want that trait, you want Canvas; you want

00:45:18.309 --> 00:45:20.369
to just blip pixels. So, in graphics parlance
these are known as a retained API and an immediate

00:45:20.369 --> 00:45:25.849
mode API. And in general, you have, you choose
the right one for your project and you--if

00:45:25.849 --> 00:45:34.500
you choose an immediate mode API and you really
wanted the retain mode, that means you're

00:45:34.500 --> 00:45:38.880
rebuilding all event detection and hit detection,
you're building the tree yourself, that's

00:45:38.880 --> 00:45:42.109
a lot of code, it's a lot bugs, it's a lot
time spent. So, SVG has a retain mode API,

00:45:42.109 --> 00:45:44.150
yeah, and Canvas is immediate mode. And so,
here we see, SVG in that case is more high

00:45:44.150 --> 00:45:48.200
level, which depending on your needs, helps
you or hurts you and Canvas is more low level,

00:45:48.200 --> 00:45:54.470
and again, that can be a pro or a con. So,
when you start a project, you ask yourself

00:45:54.470 --> 00:45:59.089
things like, do I need import and export?
Am I dealing with assets? Do I have tiger

00:45:59.089 --> 00:46:01.700
illustrations? So I have, you know, things
like that, the SVG excels with that. It's

00:46:01.700 --> 00:46:10.700
very easy to make a user interface, if I had
to do the population demo that you saw, that

00:46:10.700 --> 00:46:17.619
would be challenging with Canvas, you can
do it. But it's not really a great use case.

00:46:17.619 --> 00:46:18.400
Interactive, especially when you start getting
lightly interactive, SVG really is good at

00:46:18.400 --> 00:46:23.730
that. Medium animation, and by the way, that's
also gonna be true for Canvas. Flash is fast,

00:46:23.730 --> 00:46:37.559
it's very fast. Both Canvas and SVG, there's--depending
on the implementation there's a performance

00:46:37.559 --> 00:46:43.380
differential of 10% to 30% between each other,
and that's probably, that's narrowing over

00:46:43.380 --> 00:46:49.869
time, to probably about 15%, but both of them,
if you throw a lots of objects on the page,

00:46:49.869 --> 00:46:52.720
ten thousand bouncing balls, you're gonna
bring both of them to their knees. So, choose

00:46:52.720 --> 00:46:53.410
your battles. And again, you have a tree of
objects. Canvas really excels when you're

00:46:53.410 --> 00:46:55.779
doing--when I say non-interactive, the keyboard--if
using the keyboard for a game, for example.

00:46:55.779 --> 00:47:02.140
That's not really interacting with the stuff
that's on the page. It's kind of outside of

00:47:02.140 --> 00:47:09.490
that and so that's a good use case. I want
to say SVG has accessibility written into

00:47:09.490 --> 00:47:14.430
it. It's a little bit more complicated of
a story, but you can make your file accessible.

00:47:14.430 --> 00:47:19.170
None of the screen readers yet read it, but
when they do, if you write your things right,

00:47:19.170 --> 00:47:25.589
they will be able to correctly say, this is
a scimitar, this a population graph. So, there

00:47:25.589 --> 00:47:29.369
you go. Any questions about pixel? I want
to say one thing that's really important is

00:47:29.369 --> 00:47:33.839
that both Flash and Silverlight have arrived
at the fact that they need both. Which is

00:47:33.839 --> 00:47:39.289
actually true, you know, sometimes in the
open source world we can have like Gnome versus

00:47:39.289 --> 00:47:40.740
KDE battles or you know, we always like civil
wars. But you actually need both. And personally,

00:47:40.740 --> 00:47:45.430
Canvas is very important and so is SVG. But
the corollaries are showing up on the other

00:47:45.430 --> 00:47:45.710
side, Flash 11, Flex 4, is going have something
called FXG which is basically SVG with, you

00:47:45.710 --> 00:47:47.930
know, global replace, change a couple of names.
And then of course, there's a Flash Drawing

00:47:47.930 --> 00:47:49.609
API. Which corresponds quite strongly to the
Canvas AP1; that's what we use internally,

00:47:49.609 --> 00:47:50.839
in order to do a lot of the work. Silverlight
of course has XAML, again which is mark-up.

00:47:50.839 --> 00:47:54.009
You have a circle tag and so on. And then
there's a Drawing API. So those are gonna

00:47:54.009 --> 00:47:54.349
have both, you know, we don't want to walk
around with just one arm, you know, we want

00:47:54.349 --> 00:47:54.559
to be able to have both in the open communities
as well. So, here's the project page. I'm

00:47:54.559 --> 00:47:54.750
gonna jump into Q&amp;A; we're going to do Q&amp;A,
one second. And I'll take questions, we've

00:47:54.750 --> 00:47:54.920
got about 15 minutes. So, depending where
the audience is at, maybe that's enough, maybe

00:47:54.920 --> 00:47:55.119
you want to crack open some code, know more
about the internals. Yeah, you have a question?

00:47:55.119 --> 00:47:55.210
So, the question is, it sounds like I said
that there's not much performance difference

00:47:55.210 --> 00:47:55.269
between Canvas and SVG. So, what would be
the benefits of Canvas? I didn't say that,

00:47:55.269 --> 00:47:55.410
there is a performance difference. Last I
saw, someone found about a 20% performance.

00:47:55.410 --> 00:47:55.500
I saw a study about a year and a half ago,
20% to 30% percent. Again, neither of them

00:47:55.500 --> 00:47:55.579
is a silver bullet. Like I said, you have
to choose what you're doing. If I were doing

00:47:55.579 --> 00:47:55.650
a side scrolling game--if I was doing a non-interactive
graphic visualization with 10,000 data points,

00:47:55.650 --> 00:47:55.960
I would use Canvas. It's exactly, it's exactly
when--it's when their benefits become their

00:47:55.960 --> 00:48:01.493
cons. So, when I have--if I wanted to have
an interactive population graph, with all

00:47:55.960 --> 00:47:56.839
those lines, that would be a nightmare to
build it on Canvas. I have to rebuild the

00:47:56.839 --> 00:47:57.900
whole bunch of facilities that I get for free.
Yeah. Yeah, when I don't need to interact

00:47:57.900 --> 00:48:01.470
with all the stuff on the screen and if you
have a tremendous data set, actually you're

00:48:01.470 --> 00:48:01.579
gonna bring both of them to their knees currently.
But if you have a very, very large data set,

00:48:01.579 --> 00:48:01.680
I probably wouldn't want the bookkeeping of
SVG with 10, 000 data nodes. But if I wanted

00:48:01.680 --> 00:48:01.779
something that's search engine friendly, spit
out by PHP, so and I think at this point developers

00:48:01.779 --> 00:48:01.940
need to know when to use either one or how
to do it. Any question? Oh, that's a good

00:48:01.940 --> 00:48:01.960
one.

00:48:01.960 --> 00:48:02.029
&gt;&gt; So, any hopes of shimming out Canvas for
us as well?

00:48:02.029 --> 00:48:02.349
&gt;&gt; NEUBERG: So, that's already handled by
the excellent Excanvas library, Emil Eklund,

00:48:02.349 --> 00:48:02.410
Erik Arvidsson, that's using VML under the
covers. I know they've been--they've been

00:48:02.410 --> 00:48:02.480
exploring other renderers, like Silverlight.
It's a mature project at this point; it's

00:48:02.480 --> 00:48:02.559
been out for a few years. They--they were
supporting a huge amount of the API. I know

00:48:02.559 --> 00:48:03.960
there's some newer things that--are you looking
at supporting those things or...? Actually

00:48:03.960 --> 00:48:04.579
do you want to answer the question? Why don't
you come? Because it's recorded. We've got

00:48:04.579 --> 00:48:04.799
one of the creators of the Excanvas library,
which is really is, like the sister project

00:48:04.799 --> 00:48:04.869
of SVG Web.

00:48:04.869 --> 00:48:05.059
&gt;&gt; So, Explorer Canvas currently supports
most of the Canvas specification, there are

00:48:05.059 --> 00:48:05.269
some newer additions though like saving image
data and clipping and a certain gradient support

00:48:05.269 --> 00:48:06.470
that is very hard for us to support with VML,
which is the back end of the Explorer Canvas

00:48:06.470 --> 00:48:06.700
emulation.

00:48:06.700 --> 00:48:08.769
&gt;&gt; Well, you know, rendering quality is kind
of crappy especially with like curved lines

00:48:08.769 --> 00:48:10.059
and things, so, I'm just wonder if we get
a higher fidelity Canvas by using different

00:48:10.059 --> 00:48:10.299
rendering technology?

00:48:10.299 --> 00:48:12.490
&gt;&gt; We've been exploring that and we currently
have an alternative renderer using Silverlights.

00:48:12.490 --> 00:48:12.750
We have not looked into using Flash at the
moment. But maybe we could combine our forces

00:48:12.750 --> 00:48:12.799
and do that in the future.

00:48:12.799 --> 00:48:12.890
&gt;&gt; NEUBERG: That--that's interesting. I know
that the Silverlight work is really interesting.

00:48:12.890 --> 00:48:12.990
Yeah, maybe, you know, especially we've done
a lot of work around eking out performance

00:48:12.990 --> 00:48:13.099
of the Flash JS Bridge, that might be useful.
And especially if you can combine, I know

00:48:13.099 --> 00:48:13.210
Ray Cromwell has done a lot of cool work,
if you can introduce batch operations, you

00:48:13.210 --> 00:48:13.299
know, maybe just slightly add a couple of
methods saying, you know, for example, last

00:48:13.299 --> 00:48:13.390
week, I implemented suspend withdraw which
has helped performance hugely and this week,

00:48:13.390 --> 00:48:13.480
I'm doing document fragment. So, these are
all essentially batch operations which would

00:48:13.480 --> 00:48:13.569
really help the performance. The Canvas AP
doesn't currently have those in them. But

00:48:13.569 --> 00:48:16.279
if you could add them [laughs]. You know,
start batch, end batch and then Ray Cromwell

00:48:16.279 --> 00:48:22.345
has done some good work and that could help
performance. Which you're right, there is--there

00:48:16.279 --> 00:48:16.569
is an impedance mismatch. We have that over
in the Flash line too, you know, we have Bezier

00:48:16.569 --> 00:48:17.500
curves, or some certain things, we've been
able to patch over a lot of those. There are

00:48:17.500 --> 00:48:18.210
a few things we can't support like smaller
than one pixel, line drawing and stuff. But

00:48:18.210 --> 00:48:18.230
it's, you know. Has that answered your question,
though? So, any other questions? Yeah, uh-huh.

00:48:18.230 --> 00:48:18.250
So, the question is how is the performance
over the Flash JS boundary for SVG web especially

00:48:18.250 --> 00:48:18.269
for event handling? The first thing to say
is a shim will never match a native performance.

00:48:18.269 --> 00:48:18.279
This is a temporary solution, unfortunately
on the web temporarily means like three years,

00:48:18.279 --> 00:48:19.180
you know, if you're lucky actually. So, you
know it will always be less. But I've been

00:48:19.180 --> 00:48:19.220
able--I mean, it's a real focus of mine and
I've had lots of performance sort of sessions

00:48:19.220 --> 00:48:19.269
where I focus on performance, one of the things
that I am looking at now. I've been able to--for

00:48:19.269 --> 00:48:19.309
the last two weeks, get a hundred percent-fold
speed improvement with some of the things

00:48:19.309 --> 00:48:20.670
I've been doing. And I'm hitting some other
things. So, it's okay right now. If you may

00:48:20.670 --> 00:48:23.220
have seen some of the samples loaded very
fast and some of them like the tiger and getting

00:48:23.220 --> 00:48:24.799
more complicated, it can take a little while.
But I don't think we hit the ceiling of--of--of

00:48:24.799 --> 00:48:26.319
how you can get performance faster and I'll
give one sample of that. The Flash JS boundary

00:48:26.319 --> 00:48:27.740
is always going to be slower, there are other
possibilities, one is when you batch things

00:48:27.740 --> 00:48:29.079
up. So, combining everything with the suspend
re-draw if I'm affecting 500 elements on the

00:48:29.079 --> 00:48:29.619
screen like the population graph, I turn that
into one Flash JS call, that says here's what's

00:48:29.619 --> 00:48:29.750
to change. Other things I'm exploring are
if you use Smile, if you programmatically

00:48:29.750 --> 00:48:29.900
create a Smile element, do the animation tags
and send them over. At that point, everything

00:48:29.900 --> 00:48:30.019
lives in the rendering engine and you could
potentially get very fast performance. So,

00:48:30.019 --> 00:48:30.410
there are all sorts of things I'm exploring
along this continuum. Is that--and I haven't

00:48:30.410 --> 00:48:30.430
yet had a use case that had tremendous numbers
of events arriving from the other side. So,

00:48:30.430 --> 00:48:30.460
I haven't seen a bottleneck yet on that one.
Yeah, I haven't seen a bottleneck yet on that

00:48:30.460 --> 00:48:30.480
but I'm always looking for good use cases
that help find bottlenecks because it helps

00:48:30.480 --> 00:48:30.490
me to optimize.

00:48:30.490 --> 00:48:30.509
&gt;&gt; Uh-huh, I got that right. Yeah, I had--one
of the question which was about normalizing

00:48:30.509 --> 00:48:30.529
SVG support across browsers, you know, for
all the browsers except for IE, actually we

00:48:30.529 --> 00:48:30.700
have SVG and you've done a lot work presenting
a normal API. Do you have this idea of like

00:48:30.700 --> 00:48:30.720
bridging? So, for example, if a browser doesn't
support Smile, can you, you know, implement

00:48:30.720 --> 00:48:36.320
Smile for that browser of it is just like
you wanted to drop into Flash as quickly as

00:48:30.720 --> 00:48:31.720
possible?

00:48:30.720 --> 00:48:30.730
&gt;&gt; NEUBERG: Yeah, I don't have it in that
fine grained, you know, I started out with

00:48:30.730 --> 00:48:36.530
the whole complicated capabilities type of
thing and I was like, "I'm going to make this

00:48:30.730 --> 00:48:30.740
the simplest as I can until I see actually
what developers want." So, at this point,

00:48:30.740 --> 00:48:37.006
it's the binary decision. You can drop a metatag
into your page and the metatag says, you know,

00:48:30.740 --> 00:48:36.473
"Name equals spg.render.forceflash," that's
true or false and that will force Flash for

00:48:30.740 --> 00:48:30.750
all browsers. You can also overwrite on URL
which can help when you're testing. I will

00:48:30.750 --> 00:48:36.416
probably at some point introduce the ability
to target some specific user agents. I've

00:48:30.750 --> 00:48:36.816
been surprised--Safari's SVG support is excellent,
so is Operas, Firefoxes, hmm. So, I might

00:48:30.750 --> 00:48:30.759
make it possible for you to say, use SVG web
on IE and Firefox and let Safari and Chrome

00:48:30.759 --> 00:48:36.425
do their thing natively in Opera. So, no,
the answer to your question right now is no.

00:48:30.759 --> 00:48:30.769
It's a binary decision. And again, remember,
I want to--I want to really avoid this--the

00:48:30.769 --> 00:48:36.635
laser focus, this provides dynamic and static
SVG support. I don't want this to turn this

00:48:30.769 --> 00:48:36.969
into an uber-tool kit that tries to be a complete
emulation of the entire standards based web.

00:48:30.769 --> 00:48:30.779
And even--I'm not even that wedded to standards,
it's more, you know, what--at this point,

00:48:30.779 --> 00:48:36.445
we're going to start experimenting for Java
with an extra add on library at some point

00:48:30.779 --> 00:48:31.289
to make using SVG much more terse. So, huh,
Ray?

00:48:31.289 --> 00:48:31.490
&gt;&gt; RAY: On the SVG text fonts what kind of
support is there for complex script?

00:48:31.490 --> 00:48:31.700
&gt;&gt; NEUBERG: That's a good question. So, the
question is when it comes to the SVG web fonts,

00:48:31.700 --> 00:48:31.880
what kind of support is there for complex
scripts? I didn't build the SVG font support,

00:48:31.880 --> 00:48:32.089
Rick Masters did. So, I'm not as like deep
into the details. SVG fonts have a lot of

00:48:32.089 --> 00:48:32.299
support for quite a lot of control over like
the curning, going pretty deep and it is internationalized.

00:48:32.299 --> 00:48:32.470
I would suspect--I don't--we obviously don't
have left or right to left control with what

00:48:32.470 --> 00:48:32.660
we have now. Since everything is just a path,
I'm sure you could define, you know, here's

00:48:32.660 --> 00:48:32.829
the--here's a Thai character. But I don't
think it would dynamically go right to left

00:48:32.829 --> 00:48:32.980
if that was needed. So, you could pro--you
could display internationalized glyphs because

00:48:32.980 --> 00:48:33.170
they're under your control but, you know,
top to bottom, right to left, is that kind

00:48:33.170 --> 00:48:33.259
of what you have in mind?

00:48:33.259 --> 00:48:33.450
&gt;&gt; RAY: Well, more things like automatic signatures
and like mixed tools and like that kind of

00:48:33.450 --> 00:48:33.509
things and stuff.

00:48:33.509 --> 00:48:33.680
&gt;&gt; NEUBERG: We--yeah, we--we--so, it comes
to the animation video, we hit the low hanging

00:48:33.680 --> 00:48:33.779
fruit on a lot of this.

00:48:33.779 --> 00:48:33.829
&gt;&gt; RAY: Sure.

00:48:33.829 --> 00:48:34.039
&gt;&gt; NEUBERG: The SVG 1.1 support of the core
is quite strong. But for those kinds of low

00:48:34.039 --> 00:48:34.210
hanging fruits we're like, [sighs] we're so
close and they're really cool. So, we hit

00:48:34.210 --> 00:48:34.410
probably like the 80%. But when it comes to
more advanced, that's going to have to grow

00:48:34.410 --> 00:48:34.609
over time. And by the way, I don't think if
you noticed, this is a very iterative approach,

00:48:34.609 --> 00:48:34.809
right? But when it get--that's always been
the idea. Can you get a usable set of this

00:48:34.809 --> 00:48:35.029
stuff that you can use in a production environment?
Just like what we did with CSS. You get enough,

00:48:35.029 --> 00:48:35.220
solve real use cases and you grow from there.
And you hit enough browsers that folks can

00:48:35.220 --> 00:48:35.390
actually use this stuff. Hey, let's take one
more question or not. Okay, everyone, thanks

00:48:35.390 --> 00:48:35.420
so much.

