WEBVTT
Kind: captions
Language: en

00:00:00.926 --> 00:00:03.050
If you're not saving your
user's game in the cloud,

00:00:03.050 --> 00:00:05.560
I can guarantee you
are losing players

00:00:05.560 --> 00:00:06.990
any time they get a new device.

00:00:06.990 --> 00:00:09.760
Because no matter how awesome
your game is-- and I'm sure

00:00:09.760 --> 00:00:12.540
it is-- nobody wants to start
all over again from level one

00:00:12.540 --> 00:00:13.739
when they reinstall it.

00:00:13.739 --> 00:00:16.030
I'm Todd Kerpelman, and while
there are many Cloud Save

00:00:16.030 --> 00:00:18.250
solutions out there, the
one I'm here to talk to you

00:00:18.250 --> 00:00:20.780
about today is the one you
get for free with Google Play

00:00:20.780 --> 00:00:22.290
game services.

00:00:22.290 --> 00:00:24.950
So the Play Games team has
upgraded their old Cloud Save

00:00:24.950 --> 00:00:26.550
featuring in a major way.

00:00:26.550 --> 00:00:28.400
Heck, it's such a big
update we have renamed

00:00:28.400 --> 00:00:33.370
this feature from Cloud Save
to Saved Games-- in the cloud.

00:00:33.370 --> 00:00:35.300
And we've got a fancy
new icon to go with it.

00:00:35.300 --> 00:00:36.960
It's got an arrow in
it and everything.

00:00:36.960 --> 00:00:38.960
But it doesn't just
have a new icon.

00:00:38.960 --> 00:00:41.080
This new Saved Games
feature includes a bunch

00:00:41.080 --> 00:00:43.330
of improvements over
the old Cloud Save.

00:00:43.330 --> 00:00:45.880
The biggest of which is that
you can now save blobs of data

00:00:45.880 --> 00:00:47.590
up to 3 meg large.

00:00:47.590 --> 00:00:49.290
That is a lot of game data.

00:00:49.290 --> 00:00:51.735
And while you were limited
to four slots earlier,

00:00:51.735 --> 00:00:53.950
now you can have as
many as you want.

00:00:53.950 --> 00:00:56.820
Your app will now have a Saved
Games badge in the Play Store

00:00:56.820 --> 00:00:58.320
so everybody will
know that they can

00:00:58.320 --> 00:01:00.590
save their progress
as they're playing.

00:01:00.590 --> 00:01:02.780
You can also add metadata
to your saved game,

00:01:02.780 --> 00:01:04.650
like a description
and a cover image.

00:01:04.650 --> 00:01:06.290
All of which will
make your saved game

00:01:06.290 --> 00:01:08.390
show up very nicely
in the Play Games app,

00:01:08.390 --> 00:01:10.210
or within your own game.

00:01:10.210 --> 00:01:11.960
I mean, look at that
beautiful saved game.

00:01:11.960 --> 00:01:13.210
Don't you want to click on it?

00:01:13.210 --> 00:01:13.711
I know I do.

00:01:13.711 --> 00:01:15.751
You know, players see this
in the Play Games app.

00:01:15.751 --> 00:01:16.930
They're reminded-- oh, yeah.

00:01:16.930 --> 00:01:17.790
I was at this level.

00:01:17.790 --> 00:01:19.373
I had just gotten
this cool new sword.

00:01:19.373 --> 00:01:21.560
I'm going to keep playing
from where I left off.

00:01:21.560 --> 00:01:24.550
So these features are great, but
along with these new features

00:01:24.550 --> 00:01:26.540
comes a new way of
handling the saved game

00:01:26.540 --> 00:01:28.942
data and new ways of
managing conflicts.

00:01:28.942 --> 00:01:31.150
And I always find that when
dealing with this stuff--

00:01:31.150 --> 00:01:33.189
particularly when it
comes to debugging-- it's

00:01:33.189 --> 00:01:35.230
best to have a decent
understanding of how things

00:01:35.230 --> 00:01:37.800
work under the hood instead
of it being some mystery

00:01:37.800 --> 00:01:38.740
black box.

00:01:38.740 --> 00:01:40.810
So let's take a peek
behind the scenes here.

00:01:40.810 --> 00:01:42.542
You just might learn something.

00:01:42.542 --> 00:01:44.250
So the first thing
you need to understand

00:01:44.250 --> 00:01:46.520
is that Saved Games are
represented internally

00:01:46.520 --> 00:01:49.060
as an object we call a snapshot.

00:01:49.060 --> 00:01:51.840
The snapshot contains the
metadata, including things

00:01:51.840 --> 00:01:54.460
like the description of a
file, a cover image, the amount

00:01:54.460 --> 00:01:57.330
of time you've played,
and a local timestamp,

00:01:57.330 --> 00:02:00.640
as well as the giant
blob of saved game data.

00:02:00.640 --> 00:02:02.880
Saved Games are powered
by Google Drive,

00:02:02.880 --> 00:02:04.430
and when you are
storing or loading

00:02:04.430 --> 00:02:06.390
these Saved Games to
the Cloud, the best way

00:02:06.390 --> 00:02:08.990
to picture what's going on is
that somewhere in the user's

00:02:08.990 --> 00:02:11.050
Google Drive account,
there is a hidden folder

00:02:11.050 --> 00:02:14.250
just for your application where
the snapshot is being stored.

00:02:14.250 --> 00:02:17.340
And as these snapshots are
being saved inside the folder,

00:02:17.340 --> 00:02:20.530
they're given a name
just like any other file.

00:02:20.530 --> 00:02:23.230
And just like in a
normal file, these names

00:02:23.230 --> 00:02:25.730
are the primary way we
identify these snapshots

00:02:25.730 --> 00:02:27.110
to your application.

00:02:27.110 --> 00:02:29.530
Your user, however,
never sees this name.

00:02:29.530 --> 00:02:32.050
They'll see your snapshot's
description, cover image,

00:02:32.050 --> 00:02:34.097
and maybe some other
metadata, but this name

00:02:34.097 --> 00:02:35.180
is never surfaced to them.

00:02:35.180 --> 00:02:38.860
It's really just an identifier
for your application to use.

00:02:38.860 --> 00:02:40.650
Now you can query
and examine any

00:02:40.650 --> 00:02:42.550
of the metadata
whenever you'd like.

00:02:42.550 --> 00:02:45.470
But it's important to know
that to read the saved data,

00:02:45.470 --> 00:02:48.020
or to write to it-- even if
you're writing to a brand

00:02:48.020 --> 00:02:51.110
new snapshot-- you must
open the snapshot first.

00:02:51.110 --> 00:02:53.390
Again, I guess it's kind
of analogous to accessing

00:02:53.390 --> 00:02:56.220
local files in a
language like say Python.

00:02:56.220 --> 00:02:58.515
You could find out the last
modified time of a file,

00:02:58.515 --> 00:03:00.140
but if you want to
read or write to it,

00:03:00.140 --> 00:03:01.764
you're going to need
to call open on it

00:03:01.764 --> 00:03:03.620
to get the file handle.

00:03:03.620 --> 00:03:05.370
Now most of this time,
this open command--

00:03:05.370 --> 00:03:06.814
it's not very exciting.

00:03:06.814 --> 00:03:08.230
What's happening
behind the scenes

00:03:08.230 --> 00:03:10.520
is that your device is
downloading all this game

00:03:10.520 --> 00:03:12.920
data associated with
your snapshot metadata

00:03:12.920 --> 00:03:15.120
if it hasn't done so yet,
and then tells your game

00:03:15.120 --> 00:03:15.844
when it's done.

00:03:15.844 --> 00:03:17.385
But this command
does get complicated

00:03:17.385 --> 00:03:20.069
when we handle
conflicts, so stay tuned.

00:03:20.069 --> 00:03:22.360
Now with that in mind, let's
look at a simple situation

00:03:22.360 --> 00:03:24.318
where we're going to load
an existing save game

00:03:24.318 --> 00:03:25.870
from the Cloud,
make some changes,

00:03:25.870 --> 00:03:28.220
and then save it again.

00:03:28.220 --> 00:03:30.030
Loading or opening
a saved game starts

00:03:30.030 --> 00:03:33.690
by opening up the snapshot
as identified by its name.

00:03:33.690 --> 00:03:36.170
Now if you're only ever
dealing with a single save game

00:03:36.170 --> 00:03:37.380
that you're going to
be saving and loading,

00:03:37.380 --> 00:03:39.254
you could get away with
hard coding this file

00:03:39.254 --> 00:03:41.300
name as a constant somewhere.

00:03:41.300 --> 00:03:44.310
Remember, these saved games are
being saved in the user's drive

00:03:44.310 --> 00:03:46.390
account in a folder
that is reserved just

00:03:46.390 --> 00:03:47.640
for your application.

00:03:47.640 --> 00:03:50.355
So you don't need to worry about
making these file names unique.

00:03:50.355 --> 00:03:52.105
You don't have to call
it com.example.myap

00:03:52.105 --> 00:03:52.896
p.savedGame.userId.

00:03:56.250 --> 00:03:58.660
You could just call it
something as unoriginal

00:03:58.660 --> 00:04:03.590
as like, SavedGame, or, I
don't know, Dan, I guess.

00:04:03.590 --> 00:04:06.150
In Android Java land, loading
and opening a snapshot

00:04:06.150 --> 00:04:09.671
is accomplished using the
Games.Snapshots.open method.

00:04:09.671 --> 00:04:11.170
In the iOS world,
you're going to be

00:04:11.170 --> 00:04:13.450
using the openWithFileName,
conflictPolicy,

00:04:13.450 --> 00:04:14.850
completionHandler method.

00:04:14.850 --> 00:04:17.500
And in the C++ world, you're
going to be using the snapshot

00:04:17.500 --> 00:04:19.160
manager's open command.

00:04:19.160 --> 00:04:21.329
The implementations
do vary slightly,

00:04:21.329 --> 00:04:22.800
but you'll notice
in all cases, you

00:04:22.800 --> 00:04:24.740
provide a name of the snapshot.

00:04:24.740 --> 00:04:26.290
And by the end of
the process, you're

00:04:26.290 --> 00:04:28.090
left with the snapshot
that has been opened

00:04:28.090 --> 00:04:30.934
and is now available
for reading or writing.

00:04:30.934 --> 00:04:32.350
Reading the contents
of a snapshot

00:04:32.350 --> 00:04:34.410
is accomplished by
calling a second command

00:04:34.410 --> 00:04:37.520
on the open snapshot, or
snapshot metadata object.

00:04:37.520 --> 00:04:39.090
In Android land,
this is readFully.

00:04:39.090 --> 00:04:41.400
In iOS, it's
readWithCompletionHandler.

00:04:41.400 --> 00:04:43.834
And in C++, it's
read or readBlocking.

00:04:43.834 --> 00:04:45.250
Again, this is a
separate command,

00:04:45.250 --> 00:04:47.790
because while we can load the
snapshot data into memory right

00:04:47.790 --> 00:04:49.290
away, we probably
don't want to have

00:04:49.290 --> 00:04:51.690
to do this for a 3
meg chunk of game data

00:04:51.690 --> 00:04:52.970
until we really have to.

00:04:52.970 --> 00:04:54.720
And in all cases,
you're going to get back

00:04:54.720 --> 00:04:57.062
a byte array, some
NSData, or a byte vector

00:04:57.062 --> 00:04:58.770
that you can then pass
along to your game

00:04:58.770 --> 00:05:01.170
and process as necessary.

00:05:01.170 --> 00:05:03.750
Now let's say that we've
gone and opened your snapshot

00:05:03.750 --> 00:05:06.372
and read in some data and
passed it along to our game.

00:05:06.372 --> 00:05:08.080
And now the player
has made some progress

00:05:08.080 --> 00:05:09.592
and wants to save their game.

00:05:09.592 --> 00:05:11.050
To do this in
Android, you're going

00:05:11.050 --> 00:05:12.730
to need to write
this game data back

00:05:12.730 --> 00:05:15.300
onto the same snapshot
you opened earlier.

00:05:15.300 --> 00:05:17.300
You're not going to
be creating a new one.

00:05:17.300 --> 00:05:20.190
What you are going to do is
create a new snapshot metadata

00:05:20.190 --> 00:05:21.340
change object.

00:05:21.340 --> 00:05:23.430
So let's ignore the
rest of the snapshot

00:05:23.430 --> 00:05:25.940
here and just look
at this new object.

00:05:25.940 --> 00:05:27.770
The metadata change
object is basically

00:05:27.770 --> 00:05:29.840
a list of elements
in the metadata,

00:05:29.840 --> 00:05:32.690
such as a description,
time plate, or cover image,

00:05:32.690 --> 00:05:35.340
that are different between
this version of the snapshot

00:05:35.340 --> 00:05:37.020
and what was up there before.

00:05:37.020 --> 00:05:39.930
Basically, the saved game API
will look at this change object

00:05:39.930 --> 00:05:42.690
and kind of overlay it on
top of your old metadata

00:05:42.690 --> 00:05:45.125
to create this new
metadata object.

00:05:45.125 --> 00:05:47.250
Once you've done this,
you'll call commit and close

00:05:47.250 --> 00:05:49.040
on Android devices
where you'll pass

00:05:49.040 --> 00:05:51.420
in the old snapshot
with the new data,

00:05:51.420 --> 00:05:55.590
and the metadata change
object right there.

00:05:55.590 --> 00:05:59.160
On iOS and C++, it's slightly
different in that you do create

00:05:59.160 --> 00:06:02.730
a new game data object instead
of writing over the old one,

00:06:02.730 --> 00:06:05.810
but you're still creating a
metadata change object as well.

00:06:05.810 --> 00:06:07.807
And then all that gets sent up.

00:06:07.807 --> 00:06:09.515
You'll take the current
snapshot metadata

00:06:09.515 --> 00:06:10.960
and call commitMethod on it.

00:06:10.960 --> 00:06:12.950
You'll do something
similar in C++.

00:06:12.950 --> 00:06:15.300
And in both cases, you can
see we have our currently

00:06:15.300 --> 00:06:17.610
open snapshot, our
metadata change

00:06:17.610 --> 00:06:21.090
object, and our new data.

00:06:21.090 --> 00:06:24.820
Once you've saved
all this information

00:06:24.820 --> 00:06:27.934
and committed your snapshot,
it is now considered closed.

00:06:27.934 --> 00:06:29.350
And you'll want
to reopen it again

00:06:29.350 --> 00:06:31.050
if you want to write
more data to it.

00:06:31.050 --> 00:06:32.560
So easy peasy, right?

00:06:32.560 --> 00:06:34.060
OK, so let's look
at some situations

00:06:34.060 --> 00:06:35.795
where things can
get a little funky.

00:06:35.795 --> 00:06:38.170
What do you do if this is a
brand new player, or somebody

00:06:38.170 --> 00:06:40.260
who's never signed in
to game services before,

00:06:40.260 --> 00:06:43.437
and they try to open a saved
game file that doesn't exist?

00:06:43.437 --> 00:06:45.020
Actually, this isn't
really a problem.

00:06:45.020 --> 00:06:48.060
On Android, one of the arguments
you pass to snapshots that open

00:06:48.060 --> 00:06:50.550
is a createIfNotFound Boolean.

00:06:50.550 --> 00:06:52.480
Set this to true,
and you're all set.

00:06:52.480 --> 00:06:55.010
You simply open up a
snapshot with no data in it.

00:06:55.010 --> 00:06:57.190
In iOS and C++, you don't
even need to do that.

00:06:57.190 --> 00:06:59.590
It'll create an empty
file by default.

00:06:59.590 --> 00:07:01.380
Then you simply treat
this empty snapshot

00:07:01.380 --> 00:07:02.520
like any other snapshot.

00:07:02.520 --> 00:07:05.250
It's just one that has no
data, and all of its metadata

00:07:05.250 --> 00:07:09.614
is set to default values and/or
null, or I guess nil on iOS.

00:07:09.614 --> 00:07:11.780
Simply by updating this
snapshot with your first set

00:07:11.780 --> 00:07:14.840
of game data and a reasonable
metadata change object,

00:07:14.840 --> 00:07:18.480
you can get this looking like
a real snapshot in no time.

00:07:18.480 --> 00:07:20.990
So up until now, we've
talked as though you're just

00:07:20.990 --> 00:07:24.100
loading and saving the same
game file over and over again.

00:07:24.100 --> 00:07:26.970
But let's say you want to manage
more than one saved game file.

00:07:26.970 --> 00:07:28.282
How do you do that?

00:07:28.282 --> 00:07:29.740
Well for starters,
you're not going

00:07:29.740 --> 00:07:31.594
to be hard coding
your snapshot name.

00:07:31.594 --> 00:07:33.010
You're going to
need to figure out

00:07:33.010 --> 00:07:35.421
which snapshot to save
and load at run time.

00:07:35.421 --> 00:07:36.920
And to do that,
you're going to need

00:07:36.920 --> 00:07:39.419
to give the player the ability
to pick which saved game they

00:07:39.419 --> 00:07:42.370
want to use, create a
saved game, and so on.

00:07:42.370 --> 00:07:43.990
Luckily, the UI
to handle all this

00:07:43.990 --> 00:07:46.772
is provided for you by the
game services libraries.

00:07:46.772 --> 00:07:49.230
When you want to present a user
with a list of saved games,

00:07:49.230 --> 00:07:50.644
you can call up our UI.

00:07:50.644 --> 00:07:53.060
Now there are several settings
you can tweak with this UI,

00:07:53.060 --> 00:07:55.350
either as parameters
in Android and C++,

00:07:55.350 --> 00:07:57.349
or as delegate methods
in Objective C.

00:07:57.349 --> 00:07:59.640
These settings will let you
decide how many saved games

00:07:59.640 --> 00:08:02.260
to show in this UI, whether
or not to give the user

00:08:02.260 --> 00:08:05.350
the ability to delete a saved
game, and most importantly,

00:08:05.350 --> 00:08:09.120
whether or not the user has the
ability to create a new save.

00:08:09.120 --> 00:08:12.080
Now if I'm a user, and I click
one of these existing saves,

00:08:12.080 --> 00:08:14.680
it'll hit a callback in your
game, and in that callback,

00:08:14.680 --> 00:08:17.210
you'll get back the name
of the snapshot to open.

00:08:17.210 --> 00:08:19.800
You can now just use this name
to open up the correct snapshot

00:08:19.800 --> 00:08:22.240
just like before, and
you're ready to go.

00:08:22.240 --> 00:08:24.880
But let's say I'm a user, and I
want to create a new save game.

00:08:24.880 --> 00:08:27.460
I would click the
Save New Game button,

00:08:27.460 --> 00:08:29.650
and your app then
gets a callback

00:08:29.650 --> 00:08:31.290
that this button was clicked.

00:08:31.290 --> 00:08:34.320
At this point, it's up to you to
basically create a new snapshot

00:08:34.320 --> 00:08:37.730
by asking to open a saved
game with a name that does not

00:08:37.730 --> 00:08:38.909
exist yet.

00:08:38.909 --> 00:08:40.567
So how do you decide
what to name it?

00:08:40.567 --> 00:08:41.525
It's kind of up to you.

00:08:41.525 --> 00:08:43.820
You could use a timestamp--
that's pretty good.

00:08:43.820 --> 00:08:45.570
You could use a
random number appended

00:08:45.570 --> 00:08:47.610
to a timestamp-- I guess
that's even better.

00:08:47.610 --> 00:08:49.840
You could query the names
of all the other snapshots,

00:08:49.840 --> 00:08:51.360
examine them all,
and then increment

00:08:51.360 --> 00:08:52.450
a number for the new one.

00:08:52.450 --> 00:08:53.199
That'd work too.

00:08:53.199 --> 00:08:54.740
The only trick is
that it needs to be

00:08:54.740 --> 00:08:56.480
unique for this
particular player.

00:08:56.480 --> 00:08:58.411
Doesn't need to be all
that memorable since,

00:08:58.411 --> 00:08:59.910
as you just saw,
you're always going

00:08:59.910 --> 00:09:02.960
to get that file name from the
UI that our library provides.

00:09:02.960 --> 00:09:04.590
It will never be
surfaced to the user.

00:09:04.590 --> 00:09:07.550
They're never going to need
to refer to it by name.

00:09:07.550 --> 00:09:10.150
However you do it, as soon
as you request a snapshot

00:09:10.150 --> 00:09:12.110
with a file name that
doesn't exist yet,

00:09:12.110 --> 00:09:14.500
you get back an empty
snapshot that you can then

00:09:14.500 --> 00:09:16.851
use as your new game.

00:09:16.851 --> 00:09:18.850
Keep in mind that the
intended flow for all this

00:09:18.850 --> 00:09:20.641
is like what you might
see at the beginning

00:09:20.641 --> 00:09:21.400
of a console game.

00:09:21.400 --> 00:09:23.700
I'm at the main menu,
I want to start a game,

00:09:23.700 --> 00:09:27.310
and the game lets me pick from
continuing from a previously

00:09:27.310 --> 00:09:30.520
saved slot or starting
a completely new game.

00:09:30.520 --> 00:09:33.350
It's not really intended to
let the user switch saved

00:09:33.350 --> 00:09:36.160
game slots mid-game or duplicate
their progress or anything

00:09:36.160 --> 00:09:36.930
like that.

00:09:36.930 --> 00:09:39.720
I mean, I suppose you could
hack it to work that way,

00:09:39.720 --> 00:09:42.220
but it's going to
feel a little clunky.

00:09:42.220 --> 00:09:43.500
OK, you've gotten this far.

00:09:43.500 --> 00:09:45.291
Give yourself a pat on
the back because you

00:09:45.291 --> 00:09:46.660
have completed level one!

00:09:46.660 --> 00:09:49.259
OK, stop patting because
this is all good background,

00:09:49.259 --> 00:09:50.800
but the real test
comes when you just

00:09:50.800 --> 00:09:53.780
start detecting and
resolving snapshot conflicts.

00:09:53.780 --> 00:09:55.580
And for that, you're
just going to need

00:09:55.580 --> 00:09:56.777
to watch our next video.

00:09:56.777 --> 00:09:58.610
Hopefully this link
will be live by the time

00:09:58.610 --> 00:10:00.651
you're watching this, but
if not, check back soon

00:10:00.651 --> 00:10:01.890
because it will be.

00:10:01.890 --> 00:10:03.170
So thanks for watching, gang.

00:10:03.170 --> 00:10:05.450
Feel free to follow
me on G+ or Twitter,

00:10:05.450 --> 00:10:07.500
and I will see you
soon for part two.

00:10:07.500 --> 00:10:08.850
Our exciting conclusion!

00:10:08.850 --> 00:10:10.350
Dun-dun-dun.

