WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.170
[MUSIC PLAYING]

00:00:04.170 --> 00:00:06.810
SVETOSLAV GANOV: So I'd like
to share a little bit how

00:00:06.810 --> 00:00:08.730
I got here today.

00:00:08.730 --> 00:00:12.420
I had to set up
an alarm at 5:30.

00:00:12.420 --> 00:00:17.400
I had to snooze it several
times before I woke up.

00:00:17.400 --> 00:00:20.630
After that, I took
my dog for a walk.

00:00:20.630 --> 00:00:24.330
And I like to listen to
some music while I do this.

00:00:24.330 --> 00:00:25.650
Huge trance fan, by the way.

00:00:29.130 --> 00:00:31.920
After I finished
walking my dog, I

00:00:31.920 --> 00:00:33.750
had to check my
calendar so I know

00:00:33.750 --> 00:00:38.130
exactly where I need to be so
I don't go on the wrong stage.

00:00:38.130 --> 00:00:42.230
And lastly, I had to
check my bus schedule.

00:00:42.230 --> 00:00:44.060
And I realized I was late.

00:00:44.060 --> 00:00:48.540
So I ran real fast
and I made it.

00:00:48.540 --> 00:00:51.270
It's funny-- my wife
still thinks I'm a runner.

00:00:51.270 --> 00:00:53.370
And actually I am.

00:00:53.370 --> 00:00:55.822
I run every day
to catch the bus.

00:00:55.822 --> 00:00:57.726
[LAUGHTER]

00:00:59.283 --> 00:01:01.200
CHARMAINE D'SILVA: And
good morning, everyone.

00:01:01.200 --> 00:01:03.560
My name is Charmaine
D'Silva, and I'm

00:01:03.560 --> 00:01:05.660
a product manager on Android.

00:01:05.660 --> 00:01:09.470
Like Svet, I spend my
days driving to meetings.

00:01:09.470 --> 00:01:12.610
Some days I get to
travel to meet all of you

00:01:12.610 --> 00:01:15.230
and find my way to new cities.

00:01:15.230 --> 00:01:17.600
And after all the
excitement of my days,

00:01:17.600 --> 00:01:19.910
I get to say good
night to my boys

00:01:19.910 --> 00:01:22.970
before I end my day with
my favorite TV shows.

00:01:22.970 --> 00:01:27.860
Of course, my favorite TV
shows have dragons these days.

00:01:27.860 --> 00:01:29.930
Now, pausing to think
about both our stories,

00:01:29.930 --> 00:01:32.090
you must have guessed
by now that all of this

00:01:32.090 --> 00:01:34.550
was achieved on our smartphones.

00:01:34.550 --> 00:01:38.990
But our stories are
in no way unique.

00:01:38.990 --> 00:01:42.110
Every day, billions of
people around the world

00:01:42.110 --> 00:01:44.540
use the applications
that you've built

00:01:44.540 --> 00:01:46.970
to connect with people
around the world

00:01:46.970 --> 00:01:49.640
and do incredible things.

00:01:49.640 --> 00:01:53.450
However, our users tell us that
they want more transparency

00:01:53.450 --> 00:01:56.780
and control over their data.

00:01:56.780 --> 00:01:59.090
They expect Android
as a platform

00:01:59.090 --> 00:02:03.620
to give them tools for that
transparency and control.

00:02:03.620 --> 00:02:06.440
This responsibility to
our users is something

00:02:06.440 --> 00:02:10.770
that you've all
taken very seriously.

00:02:10.770 --> 00:02:12.620
And that's why we're here today.

00:02:12.620 --> 00:02:15.140
We're here to talk to you
about the new privacy features

00:02:15.140 --> 00:02:17.930
in Android Q and how
you can leverage them

00:02:17.930 --> 00:02:19.760
to build privacy-forward apps.

00:02:23.340 --> 00:02:26.970
SVETOSLAV GANOV: Over the
years, Android has matured.

00:02:26.970 --> 00:02:29.670
We've added a wide
range of features

00:02:29.670 --> 00:02:34.350
to protect our users, like
file-based encryption,

00:02:34.350 --> 00:02:38.170
runtime permissions,
lockdown mode, Google Play

00:02:38.170 --> 00:02:41.100
Protect, and many more.

00:02:41.100 --> 00:02:45.380
On Android, we embrace
privacy as a way to innovate.

00:02:45.380 --> 00:02:48.480
And Android has always
been designed with security

00:02:48.480 --> 00:02:49.990
and privacy at its core.

00:02:53.450 --> 00:02:57.140
In Android Q, we
wanted to go further.

00:02:57.140 --> 00:02:59.570
We added almost 50
features related

00:02:59.570 --> 00:03:03.650
to privacy and security.

00:03:03.650 --> 00:03:07.540
So these features are designed
to provide more protection,

00:03:07.540 --> 00:03:09.830
user control, and transparency.

00:03:14.100 --> 00:03:16.860
To develop these features,
we worked very closely

00:03:16.860 --> 00:03:18.510
with many of you.

00:03:18.510 --> 00:03:23.610
We shared our ideas, our
designs, our prototypes.

00:03:23.610 --> 00:03:26.610
We heard your feedback
and we embedded this back

00:03:26.610 --> 00:03:29.640
into our products.

00:03:29.640 --> 00:03:31.870
We couldn't have done
this without you.

00:03:31.870 --> 00:03:33.480
So thank you all so much.

00:03:35.928 --> 00:03:37.470
CHARMAINE D'SILVA:
As Svet mentioned,

00:03:37.470 --> 00:03:39.900
you've spent countless
of hours with us

00:03:39.900 --> 00:03:43.890
through workshops, filing
bugs, and testing our betas,

00:03:43.890 --> 00:03:46.470
helping us understand
the issues you face

00:03:46.470 --> 00:03:49.110
and enabling us to
serve you better.

00:03:49.110 --> 00:03:51.467
We will continue to
build apps that matter.

00:03:51.467 --> 00:03:53.800
None of this could have been
possible without all of you

00:03:53.800 --> 00:03:54.310
all.

00:03:54.310 --> 00:03:55.602
Thank you all for your support.

00:03:58.482 --> 00:04:00.690
SVETOSLAV GANOV: We're so
grateful to have developers

00:04:00.690 --> 00:04:04.540
like you help us build
a better platform.

00:04:04.540 --> 00:04:09.240
So now we want to help you
build privacy-forward apps that

00:04:09.240 --> 00:04:10.310
delight your users.

00:04:12.623 --> 00:04:14.790
CHARMAINE D'SILVA: Through
the rest of this journey,

00:04:14.790 --> 00:04:16.709
we will share with
you best practices

00:04:16.709 --> 00:04:19.514
and introduce you to the
new features in Android Q.

00:04:19.514 --> 00:04:20.264
Let's get started.

00:04:22.830 --> 00:04:24.830
SVETOSLAV GANOV: So
starting with permissions.

00:04:24.830 --> 00:04:27.110
As you already
know, applications

00:04:27.110 --> 00:04:29.180
run in their own sandboxes.

00:04:29.180 --> 00:04:32.600
So your application
to access user data

00:04:32.600 --> 00:04:35.750
needs to request
specific permissions.

00:04:35.750 --> 00:04:38.740
In Android 6.0, we
introduced the concept

00:04:38.740 --> 00:04:40.670
of front-end permissions.

00:04:40.670 --> 00:04:44.300
This allows your application
at runtime to prompt the user

00:04:44.300 --> 00:04:46.430
[INAUDIBLE] private data.

00:04:46.430 --> 00:04:48.950
And the user can choose to
deny or approve the request.

00:04:52.028 --> 00:04:53.570
CHARMAINE D'SILVA:
As Svet mentioned,

00:04:53.570 --> 00:04:56.960
users have the ability to
approve or deny requests.

00:04:56.960 --> 00:04:58.670
We're always curious
to understand

00:04:58.670 --> 00:05:00.950
what users do with our devices.

00:05:00.950 --> 00:05:03.860
When we survey our users to
understand why they actually

00:05:03.860 --> 00:05:08.270
deny permission, these are
the top three reasons we see.

00:05:08.270 --> 00:05:11.750
One, the app should not
need the permission.

00:05:11.750 --> 00:05:16.100
Two, they expect the app to
still work without permission.

00:05:16.100 --> 00:05:20.090
And three, they feel like they
can grant permission later.

00:05:20.090 --> 00:05:22.070
All of this tells us one thing.

00:05:22.070 --> 00:05:25.190
Users who deny permissions
do not understand the value

00:05:25.190 --> 00:05:27.350
when the app is asking for it.

00:05:27.350 --> 00:05:29.180
With this in mind,
let's talk about how

00:05:29.180 --> 00:05:31.146
best to deal with permissions.

00:05:33.050 --> 00:05:35.090
OK, step 1.

00:05:35.090 --> 00:05:37.040
Determine if there
are alternate APIs

00:05:37.040 --> 00:05:39.290
to give you the
data that you need.

00:05:39.290 --> 00:05:41.810
If there are
alternate APIs, choose

00:05:41.810 --> 00:05:45.050
to use them instead of
asking for permission.

00:05:45.050 --> 00:05:48.230
Alternate APIs tend to be
narrow in scope, which makes

00:05:48.230 --> 00:05:50.242
them a better privacy choice.

00:05:50.242 --> 00:05:51.575
Let's go through a few examples.

00:05:55.000 --> 00:05:58.200
Let's assume the app needs
to do SMS verification.

00:05:58.200 --> 00:06:01.140
Instead of asking for the
SMS runtime permission,

00:06:01.140 --> 00:06:03.615
you could instead use
the SMS retriever API.

00:06:06.220 --> 00:06:07.980
SVETOSLAV GANOV:
SMS verification

00:06:07.980 --> 00:06:10.230
is a common use case
for which developers

00:06:10.230 --> 00:06:12.660
ask for the SMS permission.

00:06:12.660 --> 00:06:14.780
Fortunately, Google
Play services

00:06:14.780 --> 00:06:19.770
has dedicated API for
exactly this use case.

00:06:19.770 --> 00:06:23.100
The entry point is the SMS
Retriever Client and domain

00:06:23.100 --> 00:06:25.260
method is startSmsRetriever.

00:06:28.120 --> 00:06:30.110
CHARMAINE D'SILVA:
Here's another example.

00:06:30.110 --> 00:06:33.880
What if your app need to know
if the user was in a phone call?

00:06:33.880 --> 00:06:36.400
Instead of asking for the
READ_PHONE_STATE permission,

00:06:36.400 --> 00:06:39.910
you can instead call the Audio
Focus API to see call state.

00:06:41.945 --> 00:06:44.320
SVETOSLAV GANOV: Detecting
whether the user is in a phone

00:06:44.320 --> 00:06:47.110
call are common
reasons apps are asking

00:06:47.110 --> 00:06:48.550
for the phone permission.

00:06:48.550 --> 00:06:50.510
But there is a better way.

00:06:50.510 --> 00:06:53.050
You can use the Audio Focus API.

00:06:53.050 --> 00:06:55.090
If the user is currently
in a phone call,

00:06:55.090 --> 00:06:58.840
you will not be able
to gain Audio Focus.

00:06:58.840 --> 00:07:02.320
All you need to remember is to
use the audio manager compact

00:07:02.320 --> 00:07:03.940
and request Audio Focus method.

00:07:06.820 --> 00:07:08.380
CHARMAINE D'SILVA: Last example.

00:07:08.380 --> 00:07:11.222
What if your app needed
access to external storage?

00:07:11.222 --> 00:07:13.180
You do not necessarily
need to ask for the read

00:07:13.180 --> 00:07:15.190
external storage permission.

00:07:15.190 --> 00:07:18.190
You can instead leverage your
app's private app storage

00:07:18.190 --> 00:07:19.630
or use a system file picker.

00:07:22.033 --> 00:07:24.450
SVETOSLAV GANOV: Apps often
request the storage permission

00:07:24.450 --> 00:07:27.180
without taking advantage
of their dedicated folder

00:07:27.180 --> 00:07:30.935
on external storage, which does
not require holding the read

00:07:30.935 --> 00:07:33.420
and write storage permission.

00:07:33.420 --> 00:07:36.870
The way you get this
folder, you call

00:07:36.870 --> 00:07:40.650
context.getExternalFilesDir.

00:07:40.650 --> 00:07:42.780
Also, the system
provides ways for you

00:07:42.780 --> 00:07:45.510
to bring trusted
system UI for the user

00:07:45.510 --> 00:07:50.010
to pick a file or directory
so you can work with it.

00:07:50.010 --> 00:07:52.890
The way can bring the
chooser UI is to fire

00:07:52.890 --> 00:07:55.450
the ACTION_OPEN_DOCUMENT.

00:07:55.450 --> 00:07:57.950
And the way to bring
the UI to pick a folder

00:07:57.950 --> 00:08:02.100
is to fire the
ACTION_OPEN_DOCUMENT_TREE.

00:08:02.100 --> 00:08:06.500
These are just a few
examples how you can use APIs

00:08:06.500 --> 00:08:09.060
without asking for permissions
to provide better user

00:08:09.060 --> 00:08:10.410
experience.

00:08:10.410 --> 00:08:12.600
Please go to the Android
Developer website

00:08:12.600 --> 00:08:13.240
to learn more.

00:08:15.883 --> 00:08:16.800
CHARMAINE D'SILVA: OK.

00:08:16.800 --> 00:08:19.050
So now you've done your
research and realize

00:08:19.050 --> 00:08:21.090
there are no alternative
APIs to give you

00:08:21.090 --> 00:08:22.800
the data that you need.

00:08:22.800 --> 00:08:24.390
You're now at step two--

00:08:24.390 --> 00:08:26.190
determining the scope
for the permission

00:08:26.190 --> 00:08:28.410
and how you'd ask for it.

00:08:28.410 --> 00:08:30.960
In speaking to many
developers like yourself,

00:08:30.960 --> 00:08:34.020
you'll believe that you will get
higher acceptance rate if you

00:08:34.020 --> 00:08:36.090
ask for permissions upfront.

00:08:36.090 --> 00:08:41.940
However, when we poll our users,
we see that only 18% of users

00:08:41.940 --> 00:08:44.670
accept every permission
of the device.

00:08:44.670 --> 00:08:47.528
Most users make
deliberate choices.

00:08:47.528 --> 00:08:49.320
SVETOSLAV GANOV: Now
that I think about it,

00:08:49.320 --> 00:08:52.980
I'm one of those people that
always approves permissions.

00:08:52.980 --> 00:08:54.790
But if I think a
little bit more,

00:08:54.790 --> 00:08:57.000
I do it only if I
understand the use case

00:08:57.000 --> 00:08:59.650
and there is an immediate
value for me as a user

00:08:59.650 --> 00:09:01.014
if I grant a permission.

00:09:01.873 --> 00:09:03.540
CHARMAINE D'SILVA:
And Svet's experience

00:09:03.540 --> 00:09:05.790
is not unlike our users.

00:09:05.790 --> 00:09:09.140
When we ask a user why they
choose to give an app access

00:09:09.140 --> 00:09:12.030
or permission, the
top reason they say

00:09:12.030 --> 00:09:16.050
is because they wanted to use
a specific feature off an app.

00:09:16.050 --> 00:09:19.650
This tells us that they were
intentional with their choice.

00:09:19.650 --> 00:09:22.920
Users are more likely to give
your app access to permission

00:09:22.920 --> 00:09:26.010
if they understand the purpose
and the perceived benefits

00:09:26.010 --> 00:09:27.760
feels logical.

00:09:27.760 --> 00:09:29.330
Let's go through
examples of where

00:09:29.330 --> 00:09:31.800
the benefit of the granted
permission is very clear.

00:09:36.250 --> 00:09:39.290
SVETOSLAV GANOV: So, if
the context is clear,

00:09:39.290 --> 00:09:42.060
ask for permission directly.

00:09:42.060 --> 00:09:45.870
And this way users
will know exactly why

00:09:45.870 --> 00:09:47.428
the permission is needed.

00:09:47.428 --> 00:09:49.470
They have context and
there is an immediate value

00:09:49.470 --> 00:09:50.495
for the user.

00:09:50.495 --> 00:09:51.870
And there is a
higher probability

00:09:51.870 --> 00:09:55.230
of the user granting the
permission to the application,

00:09:55.230 --> 00:09:57.420
thus using your feature.

00:09:57.420 --> 00:10:01.230
For example, if you're
in a chat application

00:10:01.230 --> 00:10:04.470
and you want to share a photo,
and you click the Camera

00:10:04.470 --> 00:10:07.020
button, the user
will not be surprised

00:10:07.020 --> 00:10:09.392
if they're asked for
the camera permission.

00:10:09.392 --> 00:10:11.850
And they'll probably grant you
the permission, because they

00:10:11.850 --> 00:10:12.930
want to use your feature.

00:10:14.725 --> 00:10:16.350
CHARMAINE D'SILVA:
So, in this scenario

00:10:16.350 --> 00:10:19.540
that Svet ran you through, the
use case is pretty obvious.

00:10:19.540 --> 00:10:22.782
But that's not always the case.

00:10:22.782 --> 00:10:24.240
There are situations
where you need

00:10:24.240 --> 00:10:26.580
to educate the user of
your feature benefit

00:10:26.580 --> 00:10:29.340
before the runtime
prompt is shown.

00:10:29.340 --> 00:10:31.260
It's better to present
the use case right

00:10:31.260 --> 00:10:33.240
before the runtime prompt.

00:10:33.240 --> 00:10:36.600
Here's an example from Nest
Home/Away Assist feature.

00:10:36.600 --> 00:10:40.922
This dialog precedes the
location runtime prompt.

00:10:40.922 --> 00:10:44.190
In Android P, this is what
the location runtime prompt

00:10:44.190 --> 00:10:45.590
looks like.

00:10:45.590 --> 00:10:47.640
The user choice is binary.

00:10:47.640 --> 00:10:50.130
Users can choose to
either approve or deny

00:10:50.130 --> 00:10:52.260
the location request.

00:10:52.260 --> 00:10:55.390
If a user provides location
permission to an app,

00:10:55.390 --> 00:10:58.020
the app can now access
location in the foreground

00:10:58.020 --> 00:10:59.440
or in the background.

00:11:01.360 --> 00:11:04.210
In Android Q, we're introducing
more granular controls

00:11:04.210 --> 00:11:05.620
to the app.

00:11:05.620 --> 00:11:07.990
Users can give
the app the choice

00:11:07.990 --> 00:11:11.320
to have only foreground access
to the location or foreground

00:11:11.320 --> 00:11:13.930
and background
access to location.

00:11:13.930 --> 00:11:17.350
As an app developer, only
ask for background app access

00:11:17.350 --> 00:11:19.260
if you only have a
clear need for it.

00:11:21.848 --> 00:11:23.890
SVETOSLAV GANOV: Now that
the location permission

00:11:23.890 --> 00:11:27.365
can be requested while in
access and all the time,

00:11:27.365 --> 00:11:29.990
you need to choose the
right scope that best

00:11:29.990 --> 00:11:32.060
fits your feature.

00:11:32.060 --> 00:11:35.960
Our recommendation
is whenever possible,

00:11:35.960 --> 00:11:38.990
use while in use location.

00:11:38.990 --> 00:11:42.410
The way you ask for while in use
location is exactly the same.

00:11:42.410 --> 00:11:44.900
You ask for location, as always.

00:11:44.900 --> 00:11:48.930
You ask for the coarse or
fine location permission.

00:11:48.930 --> 00:11:53.600
However, if you want to access
location in the background,

00:11:53.600 --> 00:11:57.260
you need to add an additional
modifier permission called

00:11:57.260 --> 00:11:59.180
access background location.

00:11:59.180 --> 00:12:01.430
So this permission
needs to be combined

00:12:01.430 --> 00:12:05.030
with the existing fine and
coarse location permissions.

00:12:05.030 --> 00:12:08.660
And this is a signal to the
platform to show UI to the user

00:12:08.660 --> 00:12:14.145
where they have choices between
while in use, all the time,

00:12:14.145 --> 00:12:15.020
and deny the request.

00:12:18.280 --> 00:12:21.780
Scope is also
relevant to storage.

00:12:21.780 --> 00:12:26.950
In Android Q, we add in the
concept of scope storage.

00:12:26.950 --> 00:12:31.690
Scope storage provides better
application data isolation

00:12:31.690 --> 00:12:33.550
and also protects
the collections

00:12:33.550 --> 00:12:38.440
of videos and audio.

00:12:38.440 --> 00:12:43.270
Later today, we have another
talk which goes in details.

00:12:43.270 --> 00:12:44.310
And please attend that.

00:12:46.853 --> 00:12:47.770
CHARMAINE D'SILVA: OK.

00:12:47.770 --> 00:12:49.980
So now at this point,
you've got your app's

00:12:49.980 --> 00:12:51.720
get runtime permissions.

00:12:51.720 --> 00:12:54.780
You now have a responsibility
to use the data.

00:12:54.780 --> 00:12:59.460
Step three, ensure users are not
surprised with your data usage.

00:12:59.460 --> 00:13:01.910
Here are some best practices.

00:13:01.910 --> 00:13:05.670
One, collect only the
data that you need.

00:13:05.670 --> 00:13:10.620
Two, only share the data once
you get explicit user consent.

00:13:10.620 --> 00:13:13.740
Three, if you're transferring
data off the device,

00:13:13.740 --> 00:13:16.410
ensure that it is
encrypted and secure.

00:13:16.410 --> 00:13:20.250
Four, only keep data for
as long as you need it.

00:13:20.250 --> 00:13:22.203
By following these
best practices,

00:13:22.203 --> 00:13:24.120
your users will feel
more comfortable with how

00:13:24.120 --> 00:13:27.580
their data is being used
by your application.

00:13:27.580 --> 00:13:29.850
Now, this concludes our
section on permissions.

00:13:29.850 --> 00:13:32.705
Let's talk through other
areas in Android Q.

00:13:34.723 --> 00:13:37.140
SVETOSLAV GANOV: Now that we're
finished with permissions,

00:13:37.140 --> 00:13:39.030
another area we
focused our attention

00:13:39.030 --> 00:13:40.897
was device identifiers.

00:13:43.820 --> 00:13:47.720
In Android Q, we're locking
down hardware-based device

00:13:47.720 --> 00:13:49.710
identifiers.

00:13:49.710 --> 00:13:52.610
So, instead of hardware
device identifiers,

00:13:52.610 --> 00:13:55.940
you need to use software-based,
user-resettable device

00:13:55.940 --> 00:13:57.300
identifiers.

00:13:57.300 --> 00:14:00.185
This is a much more
privacy-friendly solution.

00:14:03.850 --> 00:14:06.630
We also randomize
the MAC address.

00:14:06.630 --> 00:14:09.720
This feature shift in Android
P, as an experimental feature

00:14:09.720 --> 00:14:13.320
under developer options, where
we use different random MAC

00:14:13.320 --> 00:14:17.490
address when the device
connects to different networks.

00:14:17.490 --> 00:14:20.520
Now we're bringing
this feature mainstream

00:14:20.520 --> 00:14:22.080
available to all
apps all the time.

00:14:26.075 --> 00:14:27.950
CHARMAINE D'SILVA:
Another area we focused on

00:14:27.950 --> 00:14:30.450
was app launching
and notifications.

00:14:30.450 --> 00:14:32.420
This area is important
to build user trust

00:14:32.420 --> 00:14:35.755
that users feel like they're
in control of their device.

00:14:35.755 --> 00:14:37.130
Apps launched into
the foreground

00:14:37.130 --> 00:14:39.920
can sometimes feel
intrusive and disruptive

00:14:39.920 --> 00:14:41.030
to the user experience.

00:14:43.400 --> 00:14:45.800
Notification APIs
can be used to notify

00:14:45.800 --> 00:14:48.590
the users without
interrupting their user flow.

00:14:48.590 --> 00:14:50.480
There are two main benefits.

00:14:50.480 --> 00:14:53.090
One, the users maintain context.

00:14:53.090 --> 00:14:57.250
And two, do not disturb rules
that are actually maintained.

00:14:57.250 --> 00:14:59.750
For cases of alarms
and incoming calls,

00:14:59.750 --> 00:15:02.990
you can ensure a full-screen
experience when the device is

00:15:02.990 --> 00:15:07.010
locked or heads-up notification,
like in this example, when

00:15:07.010 --> 00:15:09.080
the device is in use.

00:15:09.080 --> 00:15:11.953
This is why it's completely
interrupting the user.

00:15:11.953 --> 00:15:14.620
So I will explain to you how you
can implement this in your app.

00:15:16.980 --> 00:15:18.690
SVETOSLAV GANOV: So
the recommended way

00:15:18.690 --> 00:15:21.630
to involve the user is
to use a notification

00:15:21.630 --> 00:15:24.240
API you're all familiar with.

00:15:24.240 --> 00:15:29.130
The only thing to remember is
the setFullScreenIntent API,

00:15:29.130 --> 00:15:31.200
which allows you to
set an intent, which

00:15:31.200 --> 00:15:35.680
will be fired off if the user is
not actively using the device.

00:15:35.680 --> 00:15:37.320
So if the device
is locked, the user

00:15:37.320 --> 00:15:39.480
will see a full-screen
experience.

00:15:39.480 --> 00:15:41.850
If the user is currently
using the device,

00:15:41.850 --> 00:15:43.950
they will see the heads-up
notifications Charmaine

00:15:43.950 --> 00:15:45.220
mentioned.

00:15:45.220 --> 00:15:47.100
And this will not
interrupt the user flow

00:15:47.100 --> 00:15:49.890
while still letting the
user know there is something

00:15:49.890 --> 00:15:51.366
requiring their attention.

00:15:54.577 --> 00:15:56.910
CHARMAINE D'SILVA: An Android
Q background app launching

00:15:56.910 --> 00:15:58.440
will be blocked.

00:15:58.440 --> 00:16:00.450
Apps will no longer be
able to launch themselves

00:16:00.450 --> 00:16:02.490
from the background
to the foreground.

00:16:02.490 --> 00:16:05.610
This ensures that users are
appropriately interrupted

00:16:05.610 --> 00:16:08.070
and respects their context
and do not disturb settings.

00:16:10.620 --> 00:16:12.750
We're now on our last
leg of our journey--

00:16:12.750 --> 00:16:15.970
foreground services.

00:16:15.970 --> 00:16:17.940
Foreground services
are a lightweight way

00:16:17.940 --> 00:16:22.060
to run an application when it is
not visible in the foreground.

00:16:22.060 --> 00:16:24.630
But foreground
services can be noisy.

00:16:24.630 --> 00:16:27.000
Try to limit your use
of foreground services

00:16:27.000 --> 00:16:30.150
to tasks that are a continuation
of an ongoing activity,

00:16:30.150 --> 00:16:30.990
like navigation.

00:16:33.650 --> 00:16:36.910
SVETOSLAV GANOV: To improve the
user experience, in Android Q,

00:16:36.910 --> 00:16:40.760
we're introducing the
concept of service types.

00:16:40.760 --> 00:16:43.010
And we'll be limiting
permission usage

00:16:43.010 --> 00:16:44.190
based on the service type.

00:16:47.820 --> 00:16:51.870
For example, if your application
has while in use location

00:16:51.870 --> 00:16:55.560
permission and you want to
use location in a foreground

00:16:55.560 --> 00:16:58.500
service, you need to
annotate your service

00:16:58.500 --> 00:17:00.750
as being location type.

00:17:00.750 --> 00:17:04.920
The way you do this is using
the foreground service type

00:17:04.920 --> 00:17:09.480
attribute in the declaration in
the manifest of your service.

00:17:09.480 --> 00:17:11.730
And if you don't do
this, you will not

00:17:11.730 --> 00:17:13.990
get location delivered
to your application

00:17:13.990 --> 00:17:15.240
while this service is running.

00:17:19.740 --> 00:17:22.470
So, we've covered a lot of
privacy features and best

00:17:22.470 --> 00:17:23.369
practices.

00:17:23.369 --> 00:17:26.230
And there is a lot more you can
learn on the Android Developer

00:17:26.230 --> 00:17:26.730
website.

00:17:28.977 --> 00:17:30.810
CHARMAINE D'SILVA: If
you want to learn more

00:17:30.810 --> 00:17:33.102
about these features, please
attend these other privacy

00:17:33.102 --> 00:17:33.690
sessions.

00:17:33.690 --> 00:17:35.920
Or come talk to
us in the sandbox.

00:17:35.920 --> 00:17:37.920
Thank you all for joining
us today and giving us

00:17:37.920 --> 00:17:39.923
this opportunity
to work together.

00:17:39.923 --> 00:17:41.590
Let's continue the
conversation and keep

00:17:41.590 --> 00:17:43.390
building privacy-forward apps.

00:17:43.390 --> 00:17:44.620
Thank you, all.

00:17:44.620 --> 00:17:48.570
[MUSIC PLAYING]

