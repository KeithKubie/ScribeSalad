WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So now that we understand how these trees should work in theory,

00:00:04.000 --> 00:00:07.000
let's talk about how we might implement them in Python.

00:00:07.000 --> 00:00:12.000
Looking just at the top node of this tree, it has 3 important parts:

00:00:12.000 --> 00:00:15.000
the content--the number or name that I'm storing there--

00:00:15.000 --> 00:00:19.000
and then the left and the right children coming out.

00:00:19.000 --> 00:00:23.000
However, we can also see that some nodes have no children,

00:00:23.000 --> 00:00:25.000
may not have a left or a right child.

00:00:25.000 --> 00:00:29.000
Let's use a very simple and direct approach for encoding these trees

00:00:29.000 --> 00:00:31.000
or representing them in Python.

00:00:31.000 --> 00:00:33.000
We'll use tuples.

00:00:33.000 --> 00:00:39.000
We'll have a 3 tuple where the 3 parts correspond exactly to my value--

00:00:39.000 --> 00:00:43.000
the current content--the left child, and the right child.

00:00:43.000 --> 00:00:45.000
Some nodes have no children.

00:00:45.000 --> 00:00:49.000
We'll use None in Python to represent that.

00:00:49.000 --> 00:00:55.000
So this 7 node would look like this--a 7 with no left child and no right child--

00:00:55.000 --> 00:00:59.000
and this complete tree will be a much bigger nested tuple.

00:00:59.000 --> 00:01:03.000
At the top level it's 1 tuple with 3 parts:

00:01:03.000 --> 00:01:08.000
a big left child, 5--my current value--and a big right child.

00:01:08.000 --> 00:01:13.000
And the left child and the right child also follow exactly the same layout.

00:01:13.000 --> 00:01:15.000
We had suggested earlier that in computer science

00:01:15.000 --> 00:01:18.000
this is often called a recursive data structure.

00:01:18.000 --> 00:01:26.000
My tree, this 5, is made up of or contains smaller instances of itself--

00:01:26.000 --> 00:01:29.000
smaller instances that follow the same sort of pattern.

00:01:29.000 --> 00:01:32.000
So now let's get some concrete practice coding this up in Python.

00:01:32.000 --> 00:01:39.000
Let's try to write a procedure insert that takes 1 of these trees and a new element

00:01:39.000 --> 00:01:41.000
and returns a new tree including that element,

00:01:41.000 --> 00:01:43.000
just like you did in the quiz.

00:01:43.000 --> 00:01:46.000
I'll just set things up. Insert takes a tree and an element.

00:01:46.000 --> 00:01:50.000
This is going to be a recursive procedure. All the cool procedures are recursive.

00:01:50.000 --> 00:01:54.000
The base case is actually inserting into the empty tree.

00:01:54.000 --> 00:01:56.000
If you don't give me anything to work with,

00:01:56.000 --> 00:02:01.000
I'll just make a new singleton tree containing only this element. And that looks like this.

00:02:01.000 --> 00:02:06.000
A singleton tree, just a single branch, has no left child, no right child,

00:02:06.000 --> 00:02:08.000
and the element right in the center.

00:02:08.000 --> 00:02:14.000
If the tree is not None, then it has a left child, a current element, and a right child.

00:02:14.000 --> 00:02:17.000
And what we want to do is compare the element to be inserted

00:02:17.000 --> 00:02:19.000
against the element we found here,

00:02:19.000 --> 00:02:25.000
and that will tell us whether we should insert into the left or insert into the right.

00:02:25.000 --> 00:02:27.000
I'm going to do this in 2 steps.

00:02:27.000 --> 00:02:31.000
If the element to be inserted is less than or equal to what we're currently looking at,

00:02:31.000 --> 00:02:35.000
then we're going to call ourselves recursively going down and to the left.

00:02:35.000 --> 00:02:40.000
So I'm going to call insert on the left child and try to insert the same element into it.

00:02:40.000 --> 00:02:45.000
And that's going to return a new tree, a new--minor typo--left child.

00:02:45.000 --> 00:02:50.000
I'll just build up a new tree that has the new left child,

00:02:50.000 --> 00:02:54.000
this same element that was here already, and the old right child unchanged.

00:02:54.000 --> 00:02:56.000
We never even have to look in the right child.

00:02:56.000 --> 00:02:58.000
We can ignore that half of the tree.

00:02:58.000 --> 00:03:01.000
That's a phenomenal cosmic boost to speed.

00:03:01.000 --> 00:03:03.000
This is an efficient data structure when done well.

00:03:03.000 --> 00:03:05.000
Otherwise, we're going to do mostly the same thing on the right.

00:03:05.000 --> 09:59:59.000
So here's a quiz for you. What should go in this blank?

