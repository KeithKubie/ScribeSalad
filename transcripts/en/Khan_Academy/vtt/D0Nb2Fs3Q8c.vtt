WEBVTT
Kind: captions
Language: en

00:00:00.329 --> 00:00:02.120
What I want to do in
this video is show you

00:00:02.120 --> 00:00:05.567
that for loops aren't the only
types of loops you would use,

00:00:05.567 --> 00:00:07.400
although, they probably
are the most common.

00:00:07.400 --> 00:00:09.990
You could also use
something like a while loop.

00:00:09.990 --> 00:00:12.350
And maybe the while loop
might be more intuitive,

00:00:12.350 --> 00:00:14.020
at least maybe in
the Python context.

00:00:14.020 --> 00:00:14.595
You can pick.

00:00:14.595 --> 00:00:16.219
So I'm going to write
the same program.

00:00:16.219 --> 00:00:18.100
It's going to do the
exact same thing,

00:00:18.100 --> 00:00:21.270
but instead using a for loop,
I'm going to use a while loop.

00:00:21.270 --> 00:00:23.460
So I'm going to still start
with a sum equal to 0.

00:00:23.460 --> 00:00:26.880
But I'm also going to
start with i equal to 0.

00:00:26.880 --> 00:00:30.270
So the while loop isn't
going to automatically define

00:00:30.270 --> 00:00:32.180
what my i values are.

00:00:32.180 --> 00:00:34.200
And it's not going to
automatically change

00:00:34.200 --> 00:00:35.670
my i values for me.

00:00:35.670 --> 00:00:37.370
I'm going to have to
do that for myself.

00:00:37.370 --> 00:00:40.600
But I want to do the
exact same behavior.

00:00:40.600 --> 00:00:42.882
And I'm going to leave
my old code down here,

00:00:42.882 --> 00:00:44.340
so you can compare
it a little bit.

00:00:44.340 --> 00:00:45.756
But then I'll
delete it, because I

00:00:45.756 --> 00:00:47.540
don't want the same
thing to be run twice.

00:00:47.540 --> 00:00:49.630
So I'm going to
set i equal to 0.

00:00:49.630 --> 00:00:51.630
And this, in case you're
curious, the last time,

00:00:51.630 --> 00:00:54.270
in the for loop, i is only a
valid variable inside the loop.

00:00:54.270 --> 00:00:56.100
Now, I'm defining it
outside of the loop.

00:00:56.100 --> 00:00:58.070
So it's actually
a global variable.

00:00:58.070 --> 00:00:59.700
I'm defining at
the highest level.

00:00:59.700 --> 00:01:02.240
It can be used anywhere
inside of the program.

00:01:02.240 --> 00:01:06.460
And so over here, let's
define a while loop.

00:01:06.460 --> 00:01:08.240
So while-- so I'm
going to keep doing

00:01:08.240 --> 00:01:10.440
what's inside of
the loop clause.

00:01:10.440 --> 00:01:13.810
I'm going to do it
while i is less than 10.

00:01:13.810 --> 00:01:18.580
Remember, we want to do it for
i equals 0, 1, 2, 3, 4, 5, 6, 7,

00:01:18.580 --> 00:01:19.730
8, 9.

00:01:19.730 --> 00:01:22.530
Everything up to, but not
including 10, all of the 0

00:01:22.530 --> 00:01:24.260
through 9.

00:01:24.260 --> 00:01:26.979
So while i is less than 10.

00:01:26.979 --> 00:01:28.770
Do-- what I'm going to
put in this clause--

00:01:28.770 --> 00:01:31.620
once i is not less than
10, or essentially,

00:01:31.620 --> 00:01:33.819
once i is equal to 10,
don't do it anymore.

00:01:33.819 --> 00:01:35.485
So it's going to have
the same behaviors

00:01:35.485 --> 00:01:36.549
as this right over here.

00:01:36.549 --> 00:01:38.090
And what I'm going
to do is I'm going

00:01:38.090 --> 00:01:41.160
to say sum is equal
to sum plus i.

00:01:43.890 --> 00:01:45.910
And then I'm going to print sum.

00:01:45.910 --> 00:01:47.770
So this is the exact
same logic that I

00:01:47.770 --> 00:01:49.240
had when I wrote the for loop.

00:01:49.240 --> 00:01:51.240
But I'm going to have to
add one more line here,

00:01:51.240 --> 00:01:52.990
if I don't want this
thing to run forever.

00:01:52.990 --> 00:01:55.150
Because in the for
loop, you'll remember,

00:01:55.150 --> 00:01:57.560
every time we run this
clause here, as we get out

00:01:57.560 --> 00:02:01.390
of the clause, it'll assign i
to the next element in this list

00:02:01.390 --> 00:02:02.130
here.

00:02:02.130 --> 00:02:04.790
Over here, we haven't
defined how i should change.

00:02:04.790 --> 00:02:07.510
So what we have to
do is in every loop,

00:02:07.510 --> 00:02:09.360
we have to increase
the value of i.

00:02:09.360 --> 00:02:14.110
So we can say i is
equal to i plus 1.

00:02:14.110 --> 00:02:17.250
And I want you to really think
about how these are equivalent,

00:02:17.250 --> 00:02:20.440
how both of these are
equivalent things.

00:02:20.440 --> 00:02:24.360
i's started at 0 before I
even entered into this loop.

00:02:24.360 --> 00:02:27.930
And then sum started at
0 for either of these.

00:02:27.930 --> 00:02:29.780
These say sum is
equal to sum plus i.

00:02:29.780 --> 00:02:31.360
Well, that's the same print sum.

00:02:31.360 --> 00:02:34.060
Now, over here, i will then--
once we go through this loop,

00:02:34.060 --> 00:02:36.270
in the for loop-- i
will then be assigned

00:02:36.270 --> 00:02:39.916
to the next element in
this list, which is 1.

00:02:39.916 --> 00:02:41.790
Over here, there's
nothing to say to do that.

00:02:41.790 --> 00:02:43.289
So we're just going
to say, i is now

00:02:43.289 --> 00:02:45.637
going to be the previous i,
which is 0, and add 1 to it.

00:02:45.637 --> 00:02:47.220
And these are
equivalent, because each

00:02:47.220 --> 00:02:50.375
of these elements in this list,
in range of 10 that we define

00:02:50.375 --> 00:02:52.550
it, are just 1 more
than the previous one.

00:02:52.550 --> 00:02:54.040
So instead, we
could just say, i is

00:02:54.040 --> 00:02:56.710
going to be 1 more
than it was before.

00:02:56.710 --> 00:03:00.930
And so this should produce
the exact same result.

00:03:00.930 --> 00:03:03.180
And actually, if I don't
want to get rid of this code,

00:03:03.180 --> 00:03:05.054
if I want it there just
for future reference,

00:03:05.054 --> 00:03:07.580
but I don't want the
interpreter, the Python

00:03:07.580 --> 00:03:10.315
interpreter to run it, I
could comment them out.

00:03:10.315 --> 00:03:12.440
And you comment things out
by putting a little hash

00:03:12.440 --> 00:03:13.550
sign there.

00:03:13.550 --> 00:03:15.800
So a hash sign there,
that literally says, hey,

00:03:15.800 --> 00:03:18.152
interpreter, ignore
all of this stuff.

00:03:18.152 --> 00:03:20.360
And it could be useful if
you have some code in there

00:03:20.360 --> 00:03:22.430
that you want to just not
be interpreted for now

00:03:22.430 --> 00:03:24.150
and maybe you want
to save it for later.

00:03:24.150 --> 00:03:26.020
And it's also
useful, if you want

00:03:26.020 --> 00:03:28.020
to tell someone who's
actually reading the code,

00:03:28.020 --> 00:03:29.561
if you want to tell
a human being who

00:03:29.561 --> 00:03:32.180
is reading the code
what this code does.

00:03:32.180 --> 00:03:35.805
So for example, you could
write a little comment here.

00:03:35.805 --> 00:03:36.570
What did I do?

00:03:36.570 --> 00:03:37.680
What is that thing?

00:03:37.680 --> 00:03:40.425
You could write a little
comment here that says,

00:03:40.425 --> 00:03:51.570
this while loop calculates
the sum of 0 through 9.

00:03:51.570 --> 00:03:52.790
And you'd say including 9.

00:03:55.154 --> 00:03:57.070
So if someone were to
come back later, instead

00:03:57.070 --> 00:03:59.195
of them having to try to
figure out what this says,

00:03:59.195 --> 00:04:01.400
they could read your
comments, and say, OK.

00:04:01.400 --> 00:04:04.590
This part of the code right here
calculates the sum of 0 to 9.

00:04:04.590 --> 00:04:09.855
And I could say, and places it.

00:04:09.855 --> 00:04:11.230
So when you put
this hash tag, it

00:04:11.230 --> 00:04:12.830
essentially comments
out that line.

00:04:12.830 --> 00:04:14.288
So if I want to go
to another line,

00:04:14.288 --> 00:04:15.820
I have to put another
hashtag there.

00:04:15.820 --> 00:04:21.800
And places it in
the variable sum.

00:04:21.800 --> 00:04:24.090
So then people would know,
I know what it's doing.

00:04:24.090 --> 00:04:26.580
And I know that when
all is said and done,

00:04:26.580 --> 00:04:30.357
that the sum will be placed
in this variable called sum.

00:04:30.357 --> 00:04:32.190
But anyway, let's run
this program, and one,

00:04:32.190 --> 00:04:33.606
show that it ignores
these things.

00:04:33.606 --> 00:04:35.957
If you wrote this text
without a hashtag,

00:04:35.957 --> 00:04:37.790
the interpreter would
say, what is all this?

00:04:37.790 --> 00:04:38.749
This isn't Python code.

00:04:38.749 --> 00:04:40.706
But this is useful for
someone else reading it.

00:04:40.706 --> 00:04:42.610
And it will also
ignore this down here.

00:04:42.610 --> 00:04:47.150
So I can delete this.

00:04:47.150 --> 00:04:49.030
Delete that line
right over there.

00:04:49.030 --> 00:04:51.520
And then let's save it.

00:04:51.520 --> 00:04:52.560
And then let's run it.

00:04:52.560 --> 00:04:55.450
It gives you the exact same
results that we got before.

00:04:55.450 --> 00:04:56.197
So let me run it.

00:04:56.197 --> 00:04:58.030
So these are the results
that we got before.

00:04:58.030 --> 00:05:01.864
You might remember, 0, 1, 3,
6, 10, all the way up to 45.

00:05:01.864 --> 00:05:03.280
Now let's run this
thing, assuming

00:05:03.280 --> 00:05:05.970
that I haven't made any bugs.

00:05:05.970 --> 00:05:07.905
And I get the exact same thing.

00:05:07.905 --> 00:05:09.030
I get the exact same thing.

00:05:09.030 --> 00:05:11.810
So this while loop is
doing the exact same thing.

00:05:11.810 --> 00:05:13.864
It's more explicitly
defining i, I guess.

00:05:13.864 --> 00:05:16.030
And it takes you a little
bit more code to write it.

00:05:16.030 --> 00:05:18.541
But it's the exact
same behavior.

