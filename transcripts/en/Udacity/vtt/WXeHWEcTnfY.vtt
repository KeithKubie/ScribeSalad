WEBVTT
Kind: captions
Language: en

00:00:00.410 --> 00:00:04.350
All right, so we know about the first
two ideas in the acronym SPECS,

00:00:04.350 --> 00:00:07.280
simplify code and practice kindness.

00:00:07.280 --> 00:00:11.550
Let's talk about the third which
is explain why and with examples.

00:00:11.550 --> 00:00:14.570
We've found that some of our
best reviewers are folks

00:00:14.570 --> 00:00:18.370
who take the time to explain why they
are making the suggestions they are.

00:00:18.370 --> 00:00:20.600
They also write code snippets and

00:00:20.600 --> 00:00:23.880
provide working examples to
back up their recommendations.

00:00:23.880 --> 00:00:25.630
Let me give you an example there.

00:00:25.630 --> 00:00:29.720
A student in one of our Python courses
created a class called City and

00:00:29.720 --> 00:00:33.700
then added a bunch of instance
variables like name, latitude and

00:00:33.700 --> 00:00:35.470
longitude to that class.

00:00:35.470 --> 00:00:38.800
This student then cleared a method
called debug inside that class

00:00:38.800 --> 00:00:41.500
that printed all of
the instance variables.

00:00:41.500 --> 00:00:45.410
The student said that he used this
method for debugging purposes.

00:00:45.410 --> 00:00:50.120
Now this code was reviewed by Imran
Nasir who is a Udacity code reviewer.

00:00:50.120 --> 00:00:53.610
And we absolutely love what Imran
had to say about this code.

00:00:53.610 --> 00:00:55.130
Let's go through it together.

00:00:55.130 --> 00:00:57.690
Imran says that you created
a specific method for

00:00:57.690 --> 00:01:00.000
printing out the internals
of an instance.

00:01:00.000 --> 00:01:02.225
This showed foresight, well done.

00:01:02.225 --> 00:01:06.105
So Imran is identifying what
the student did well, that is good.

00:01:06.105 --> 00:01:09.205
He goes on to say that you could
also achieve the same thing

00:01:09.205 --> 00:01:10.755
with the vars() function.

00:01:10.755 --> 00:01:12.145
Now this is interesting.

00:01:12.145 --> 00:01:15.092
Imran is pointing
the student to a website.

00:01:15.092 --> 00:01:19.332
If we go to that site, we see
the documentation for the function vars.

00:01:19.332 --> 00:01:22.972
Now this function returns
the attribute for an instance.

00:01:22.972 --> 00:01:25.942
This by the way is exactly what
our student was trying to do with

00:01:25.942 --> 00:01:28.260
the function they had
written themselves.

00:01:28.260 --> 00:01:30.580
Okay, let's go back to the review.

00:01:30.580 --> 00:01:33.810
Imran goes on to say,
I have also created a code snippet for

00:01:33.810 --> 00:01:35.070
you to play with.

00:01:35.070 --> 00:01:38.090
Here, Imran is using a tool called Gist

00:01:38.090 --> 00:01:40.670
which is a simple way
to share code snippets.

00:01:40.670 --> 00:01:42.030
When I visit this page,

00:01:42.030 --> 00:01:46.290
I see that Imran wrote some code
on how to use the vars function.

00:01:46.290 --> 00:01:48.480
Now this is a really helpful tool for

00:01:48.480 --> 00:01:51.690
the student to understand
the recommendation Imran is making.

00:01:51.690 --> 00:01:54.890
We find that our best
reviewers provide examples to

00:01:54.890 --> 00:01:56.940
back up the recommendations
they are making.

00:01:56.940 --> 00:01:58.520
Let's see a few more instances of this.

