WEBVTT
Kind: captions
Language: en

00:00:04.600 --> 00:00:07.440
INSTRUCTOR 1: Welcome to
"Getting Started on Android."

00:00:07.440 --> 00:00:09.410
This is a crash course
in Android development,

00:00:09.410 --> 00:00:12.490
and this short video is meant
to show you exactly how easy

00:00:12.490 --> 00:00:14.180
it is to get started.

00:00:14.180 --> 00:00:17.060
Whether this is your 100th
startup or your first time

00:00:17.060 --> 00:00:19.540
coding, there's something
to learn for everyone.

00:00:19.540 --> 00:00:22.120
Before you build, you'll have
to make important decisions

00:00:22.120 --> 00:00:23.930
with your team, like
whether to build

00:00:23.930 --> 00:00:27.120
an app or a mobile website and
the kind of user experience

00:00:27.120 --> 00:00:28.475
you want to create.

00:00:28.475 --> 00:00:30.830
You should also ask
what you want your users

00:00:30.830 --> 00:00:33.150
to be able to do
with what you build.

00:00:33.150 --> 00:00:34.770
Once you've made
these decisions,

00:00:34.770 --> 00:00:37.300
bring your wireframes along
and let's get started.

00:00:37.300 --> 00:00:39.300
KATHERINE KUAN: If you
haven't installed it yet,

00:00:39.300 --> 00:00:42.300
take a moment to do that now
using the detailed instructions

00:00:42.300 --> 00:00:44.390
provided in the link below.

00:00:44.390 --> 00:00:46.565
Open up the Android
SDK Manager to see

00:00:46.565 --> 00:00:49.290
what tools, platform
versions, and components we

00:00:49.290 --> 00:00:50.280
have installed.

00:00:50.280 --> 00:00:52.710
At the time of this recording,
the Android L platform

00:00:52.710 --> 00:00:56.070
is available, but it's still
in Developer Preview Mode.

00:00:56.070 --> 00:00:57.600
That means it's
subject to change

00:00:57.600 --> 00:00:59.300
until the official release.

00:00:59.300 --> 00:01:01.390
And you can't upload
your app to Google Play

00:01:01.390 --> 00:01:04.019
if it's targeting this
L platform version.

00:01:04.019 --> 00:01:06.840
Hence we want to use the
latest stable platform version.

00:01:06.840 --> 00:01:09.000
Deselect all the other
packages and just choose

00:01:09.000 --> 00:01:11.120
the ones for API Level 19.

00:01:11.120 --> 00:01:14.234
We want the SDK, as well as the
system images for the emulator.

00:01:14.234 --> 00:01:15.900
We also want the
Android Support Library

00:01:15.900 --> 00:01:17.490
for backwards compatibility.

00:01:17.490 --> 00:01:20.970
We picked the latest version
of Gingerbread at API Level 10,

00:01:20.970 --> 00:01:24.590
because it contains bug fixes
that API Level 9 doesn't have.

00:01:24.590 --> 00:01:26.657
Then we go ahead and click Next.

00:01:26.657 --> 00:01:28.240
We're going to pick
the Blank Activity

00:01:28.240 --> 00:01:30.350
with Fragment template.

00:01:30.350 --> 00:01:32.425
For background
context, an activity

00:01:32.425 --> 00:01:35.470
serves as a presentation
layer for our UI.

00:01:35.470 --> 00:01:37.350
And the fragment
within it represents

00:01:37.350 --> 00:01:39.517
a behavior or portion
of the screen.

00:01:39.517 --> 00:01:41.100
Now for the moment
you've been waiting

00:01:41.100 --> 00:01:44.120
for-- let's run the app by
clicking on this button.

00:01:44.120 --> 00:01:46.510
It will prompt us
to choose a device.

00:01:46.510 --> 00:01:47.900
Without a physical
device, we can

00:01:47.900 --> 00:01:51.440
use the emulator, which is
included in the Android SDK.

00:01:51.440 --> 00:01:54.090
Currently, it says that there
are no Android virtual devices

00:01:54.090 --> 00:01:58.630
available, so let's open up
the AVD Manager to create one.

00:01:58.630 --> 00:02:00.200
Then click New.

00:02:00.200 --> 00:02:03.636
By creating an AVD, we can
configure an emulated device

00:02:03.636 --> 00:02:05.010
with the Android
platform version

00:02:05.010 --> 00:02:07.850
that we want to test on, as
well as hardware options.

00:02:07.850 --> 00:02:10.320
When it loads up, we see our
Sunshine app with the words,

00:02:10.320 --> 00:02:11.770
"Hello, world."

00:02:11.770 --> 00:02:14.590
And then we'll need to
enable USB debugging.

00:02:14.590 --> 00:02:18.550
This can be found in Developer
Options in the Settings app.

00:02:18.550 --> 00:02:22.770
To find the secret menu,
go to the Settings app.

00:02:22.770 --> 00:02:25.610
Scroll down to About phone.

00:02:25.610 --> 00:02:28.935
Then go down to Build number,
and tap on that seven times.

00:02:34.110 --> 00:02:35.860
Then, when you go
back to Settings,

00:02:35.860 --> 00:02:38.870
you'll see the Developer
Options menu appear.

00:02:38.870 --> 00:02:41.030
Now, in Android Studio,
you can hit the Play button

00:02:41.030 --> 00:02:42.980
to run the app on your device.

00:02:42.980 --> 00:02:44.780
In the Device
Chooser dialog, you

00:02:44.780 --> 00:02:46.310
should see your
connected device.

00:02:46.310 --> 00:02:48.220
To prevent the dialog
from popping up

00:02:48.220 --> 00:02:50.430
in future times, check this box.

00:02:50.430 --> 00:02:52.800
Then hit OK to continue.

00:02:52.800 --> 00:02:55.347
Within a few moments, you
should see it on your phone.

00:02:55.347 --> 00:02:57.180
IZABEL GREY: In design,
we have a technique.

00:02:57.180 --> 00:03:00.210
It's called wireframing,
or low-res wireframing.

00:03:00.210 --> 00:03:02.940
Imagine there's a task that
your user wants to complete.

00:03:02.940 --> 00:03:05.550
So for this example, it's--
I'm hungry for cookies.

00:03:05.550 --> 00:03:08.080
I want to get some and eat
the cookies, basically.

00:03:08.080 --> 00:03:09.740
So then you think
about, what steps

00:03:09.740 --> 00:03:12.390
does your user need to go
through to complete this task?

00:03:12.390 --> 00:03:15.300
So this is an easy example,
because we only have one task.

00:03:15.300 --> 00:03:20.300
So the steps would be sign in,
decide which cookies you want,

00:03:20.300 --> 00:03:23.174
pay for your cookies,
and then eat the cookies.

00:03:23.174 --> 00:03:24.840
So when we write out
each of these steps

00:03:24.840 --> 00:03:27.310
at a high level like
this, each of these steps

00:03:27.310 --> 00:03:29.514
is kind of like
a Java interface.

00:03:29.514 --> 00:03:30.430
NAZMUL IDRIS: Exactly.

00:03:30.430 --> 00:03:32.040
When you think about
a Java interface,

00:03:32.040 --> 00:03:33.820
it's something that doesn't
have any implementation.

00:03:33.820 --> 00:03:35.650
So you're not really thinking
about the low-level details.

00:03:35.650 --> 00:03:37.233
But you're thinking
about the contract

00:03:37.233 --> 00:03:39.560
that interface has with other
interfaces and classes--

00:03:39.560 --> 00:03:41.476
which, in this case, if
you look at the steps,

00:03:41.476 --> 00:03:44.140
it's how these steps
connect with each other.

00:03:44.140 --> 00:03:47.580
So instead of focusing on just
one step and nothing else,

00:03:47.580 --> 00:03:49.582
you're really thinking
about the big picture.

00:03:49.582 --> 00:03:51.290
KATHERINE KUAN: This
has the correct flow

00:03:51.290 --> 00:03:53.360
for how the user will
interact with the app,

00:03:53.360 --> 00:03:56.410
but it doesn't have the final
visual look and feel yet.

00:03:56.410 --> 00:03:58.050
We'll build this
up step by step,

00:03:58.050 --> 00:03:59.720
starting with the Main Activity.

00:03:59.720 --> 00:04:01.560
Then we'll move onto
the Detail Activity,

00:04:01.560 --> 00:04:03.800
and then later, build
up the tablet UI.

00:04:03.800 --> 00:04:05.600
INSTRUCTOR 2:
MainActivity is launched

00:04:05.600 --> 00:04:07.000
when you start the app.

00:04:07.000 --> 00:04:10.810
At the bottom of Main Activity,
we have PlaceholderFragment.

00:04:10.810 --> 00:04:12.180
PlaceholderFragment.

00:04:12.180 --> 00:04:15.660
was generated by the template we
used when creating our project.

00:04:15.660 --> 00:04:19.640
A fragment is a modular
container within your activity.

00:04:19.640 --> 00:04:21.649
In later lessons,
we'll look at how

00:04:21.649 --> 00:04:24.760
to use multiple fragments
in a single activity.

00:04:24.760 --> 00:04:28.660
And we'll actually explain
why we're using them at all.

00:04:28.660 --> 00:04:32.080
But for now, our activity
contains just this one

00:04:32.080 --> 00:04:33.130
fragment.

00:04:33.130 --> 00:04:34.910
So here, in
PlaceholderFragment, is

00:04:34.910 --> 00:04:39.186
where we reference our UI layout
resource, called fragment_main.

00:04:39.186 --> 00:04:43.360
This XML file lives in the
resources, res, directory

00:04:43.360 --> 00:04:45.170
of our project folder.

00:04:45.170 --> 00:04:48.590
You can see other kinds of
resources here besides layouts,

00:04:48.590 --> 00:04:53.440
such as design assets,
or drawables, or strings.

00:04:53.440 --> 00:04:55.670
When our activity
runs, it creates

00:04:55.670 --> 00:04:59.090
this PlaceholderFragment, which
then inflates the XML layout

00:04:59.090 --> 00:05:02.060
resource, converting
everything in the XML file

00:05:02.060 --> 00:05:04.990
to a hierarchy of view
objects in memory.

00:05:04.990 --> 00:05:08.270
By holding Control or Command,
depending on your operating

00:05:08.270 --> 00:05:12.160
system, and clicking on this
reference to fragment_main,

00:05:12.160 --> 00:05:15.190
Android Studio will drop us
right into the Visual Layout

00:05:15.190 --> 00:05:16.070
Editor.

00:05:16.070 --> 00:05:18.620
Once we're inside
a layout XML file,

00:05:18.620 --> 00:05:22.140
we can switch between the Design
tab, where we can drag and drop

00:05:22.140 --> 00:05:25.250
new UI elements and modify
the layout visually,

00:05:25.250 --> 00:05:27.840
and the Text tab, where
we can see and edit

00:05:27.840 --> 00:05:30.492
the XML that defines the
layout and UI elements.

00:05:30.492 --> 00:05:32.575
KATHERINE KUAN: In order
to build a UI in Android,

00:05:32.575 --> 00:05:34.025
we use views.

00:05:34.025 --> 00:05:36.180
View are rectangles
on the screen,

00:05:36.180 --> 00:05:39.210
and we may or may not see the
borders of that rectangle.

00:05:39.210 --> 00:05:42.080
Essentially, a view handles
drawing and event handling,

00:05:42.080 --> 00:05:43.750
and all the basic
widgets in Android

00:05:43.750 --> 00:05:45.620
extend from this base class.

00:05:45.620 --> 00:05:47.820
The Android Design Guide
has visual examples

00:05:47.820 --> 00:05:51.280
of these basic building
blocks of apps.

00:05:51.280 --> 00:05:52.820
INSTRUCTOR 2: Imagine
spending hours

00:05:52.820 --> 00:05:54.980
crafting the perfect layout.

00:05:54.980 --> 00:05:57.820
What happens to that layout
when you rotate the device

00:05:57.820 --> 00:06:00.170
into a landscape orientation?

00:06:00.170 --> 00:06:03.820
Or when it's run on a device
with a much larger screen?

00:06:03.820 --> 00:06:05.470
The good news is
that Android provides

00:06:05.470 --> 00:06:08.020
excellent tools to
help you with layouts.

00:06:08.020 --> 00:06:10.310
You'll want to understand
them to make your app look

00:06:10.310 --> 00:06:13.950
amazing across the wide
variety of phones, tablets,

00:06:13.950 --> 00:06:16.330
and other devices you'll
want your app to work on.

00:06:16.330 --> 00:06:20.230
Today, the lines between phones
and tablets are disappearing,

00:06:20.230 --> 00:06:22.510
so it's important to think
about how your UI will

00:06:22.510 --> 00:06:24.920
scale in our multi-screen world.

00:06:24.920 --> 00:06:26.460
Don't be overwhelmed.

00:06:26.460 --> 00:06:29.600
Just like designing responsive
layouts for the web,

00:06:29.600 --> 00:06:32.090
build your layouts to
be reasonably flexible,

00:06:32.090 --> 00:06:34.500
or within a common device size.

00:06:34.500 --> 00:06:37.730
Then you can set breakpoints,
providing alternative layouts

00:06:37.730 --> 00:06:40.090
for those various sizes.

00:06:40.090 --> 00:06:42.780
RETO MEIER: All externalized
Android resources, everything

00:06:42.780 --> 00:06:46.220
from strings, to layouts,
to drawables and animations,

00:06:46.220 --> 00:06:50.020
are all stored within
your project's res folder.

00:06:50.020 --> 00:06:53.010
You've already been putting your
strings in the strings.xml file

00:06:53.010 --> 00:06:54.900
stored in the values
folder, and you've

00:06:54.900 --> 00:06:58.104
been putting your layouts
into the layout folder.

00:06:58.104 --> 00:06:59.770
And you know to
reference your resources

00:06:59.770 --> 00:07:03.530
using @ notation within both
your XML or within the code.

00:07:03.530 --> 00:07:05.340
And then at run
time, Android will

00:07:05.340 --> 00:07:07.990
insert the appropriate
resource for you.

00:07:07.990 --> 00:07:09.430
So far, so good.

00:07:09.430 --> 00:07:12.240
And here's where things get
a little more interesting.

00:07:12.240 --> 00:07:14.530
Android allows you to
create alternative versions

00:07:14.530 --> 00:07:16.510
of every resource
by placing them

00:07:16.510 --> 00:07:19.450
into folders with
different qualifiers.

00:07:19.450 --> 00:07:22.780
We separate each of
those using a hyphen.

00:07:22.780 --> 00:07:25.060
And we can add those
qualifiers based on anything,

00:07:25.060 --> 00:07:29.580
from language and/or dialect to
whether the device is docked,

00:07:29.580 --> 00:07:32.660
the type of touchscreen, the
pixel density of the display,

00:07:32.660 --> 00:07:35.910
the orientation of the
screen, and most importantly

00:07:35.910 --> 00:07:38.560
for a responsive design in
particular, the smallest

00:07:38.560 --> 00:07:42.199
available screen with which
you can support that layout.

00:07:42.199 --> 00:07:44.240
INSTRUCTOR 1: This was a
lightweight introduction

00:07:44.240 --> 00:07:45.870
to Android development.

00:07:45.870 --> 00:07:48.100
You can learn more by
checking out our full Udacity

00:07:48.100 --> 00:07:51.240
course to get the full content,
or by visiting the Android

00:07:51.240 --> 00:07:52.520
developer site.

00:07:52.520 --> 00:07:54.350
If you're ready to
distribute and monetize,

00:07:54.350 --> 00:07:56.270
you should check out
our great resources,

00:07:56.270 --> 00:07:59.200
including quality guidelines
and go-to-market processes

00:07:59.200 --> 00:08:03.470
for startups at g.co/launch.

00:08:03.470 --> 00:08:06.080
All the best, and happy coding.

