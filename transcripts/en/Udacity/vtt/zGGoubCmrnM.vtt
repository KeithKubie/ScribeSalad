WEBVTT
Kind: captions
Language: en

00:00:00.170 --> 00:00:05.056
A point is a position and a vector describes a motion. We can combine points and

00:00:05.056 --> 00:00:08.808
vectors in various useful ways by adding or subtracting their coordinates from

00:00:08.808 --> 00:00:12.968
one another. To start with, if you subtract the location of point A from point

00:00:12.968 --> 00:00:17.013
B, you get a vector describing how to get from point A to point B. So B minus A

00:00:17.013 --> 00:00:21.754
is calculated by taking the coordinates and subtracting them from one another.

00:00:21.755 --> 00:00:27.300
And this gives you vector v. The reverse also holds true. A plus v equals B.

00:00:27.300 --> 00:00:31.381
While we can subtract points to get in a vector. Our system doesn't produce

00:00:31.381 --> 00:00:35.329
anything geometrically meaningful if you add the 2 points together. We can also

00:00:35.329 --> 00:00:41.491
add and subtract vectors themselves. For example, S plus T equals U. We can also

00:00:41.491 --> 00:00:47.994
reverse this process. For example, U minus T equals S. And we can go the other

00:00:47.994 --> 00:00:53.012
way around. For example, U minus S equals T. One way to think about vector

00:00:53.012 --> 00:00:56.245
subtraction is that you're, instead, adding a vector going the opposite

00:00:56.245 --> 00:01:00.365
direction, as shown here. The other thing commonly done with vectors and points

00:01:00.365 --> 00:01:04.433
is to multiply them by a scalar, that is, a number. Multiplying a vector by a

00:01:04.433 --> 00:01:08.266
scalar is clear enough. You want to describe moving further in a given

00:01:08.266 --> 00:01:15.562
direction. If you multiply by negative 1, you reverse the vector's direction.

00:01:15.562 --> 00:01:16.740
Multiply by a different negative number and you'll reverse the direction and

00:01:16.740 --> 00:01:19.803
change how far to move. Multiplying the point by a number is way to make an

00:01:19.803 --> 00:01:24.745
object look larger or smaller. This type if operations called scaling, we'll

00:01:24.745 --> 00:01:26.523
discuss in detail later.

