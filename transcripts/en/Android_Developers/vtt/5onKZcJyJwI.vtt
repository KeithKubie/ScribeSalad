WEBVTT
Kind: captions
Language: en

00:00:08.780 --> 00:00:10.050
RETO MEIER: Hi, my name
is Reto Meier.

00:00:10.050 --> 00:00:11.810
I'm the tech lead for
Google's Android

00:00:11.810 --> 00:00:13.760
Developer Relations team.

00:00:13.760 --> 00:00:16.000
Every time your app initiates
a data connection, no matter

00:00:16.000 --> 00:00:18.750
how much data it transfers,
you cause a typical 3G

00:00:18.750 --> 00:00:21.460
wireless radio to continue
drawing power for upwards of

00:00:21.460 --> 00:00:23.070
20 seconds.

00:00:23.070 --> 00:00:25.560
This efficient data transfer's
DevByte will look at how you

00:00:25.560 --> 00:00:27.610
can use tools like SyncAdapters
to batch and

00:00:27.610 --> 00:00:30.200
bundle your data transfers,
effectively phase shifting

00:00:30.200 --> 00:00:32.940
them to produce a highly
efficient, defragmented

00:00:32.940 --> 00:00:35.510
network traffic profile
like this one.

00:00:35.510 --> 00:00:37.710
The underlying philosophy is
to reduce the number of

00:00:37.710 --> 00:00:39.880
transfer sessions by designing
for a small

00:00:39.880 --> 00:00:41.580
number of large downloads.

00:00:41.580 --> 00:00:43.900
We can do that by batching up
all of our delay tolerant

00:00:43.900 --> 00:00:46.410
transfers and bundling them
together with time sensitive

00:00:46.410 --> 00:00:48.040
ones, potentially
even preempting

00:00:48.040 --> 00:00:50.160
planned future transfers.

00:00:50.160 --> 00:00:53.040
For example, if your app uses
analytics, rather than

00:00:53.040 --> 00:00:55.380
uploading data as it's collected
you can bundle the

00:00:55.380 --> 00:00:58.300
results together queuing them
for later upload when your app

00:00:58.300 --> 00:01:00.720
performs a time-sensitive
download.

00:01:00.720 --> 00:01:03.920
Similarly, any time sensitive
transfers should also preempt

00:01:03.920 --> 00:01:06.380
updates or prefetching
scheduled to

00:01:06.380 --> 00:01:08.400
occur in the near future.

00:01:08.400 --> 00:01:10.700
In each case you're attempting
to mitigate the cost of the

00:01:10.700 --> 00:01:14.370
transfer either with a delay
tolerant upload, or a planned

00:01:14.370 --> 00:01:17.050
future download by having them
piggyback on the time

00:01:17.050 --> 00:01:18.410
sensitive ones.

00:01:18.410 --> 00:01:21.050
So now let's look at some
techniques that you can use to

00:01:21.050 --> 00:01:22.980
implement these best
practices.

00:01:22.980 --> 00:01:25.840
You can start by creating a
batch queue to offset those

00:01:25.840 --> 00:01:28.120
delay tolerant uploads.

00:01:28.120 --> 00:01:31.770
This code snippet shows a simple
queue to which you can

00:01:31.770 --> 00:01:34.500
add either upload or download
transfers that should occur in

00:01:34.500 --> 00:01:35.410
the future.

00:01:35.410 --> 00:01:37.980
Then, whenever you execute a
time sensitive on-demand

00:01:37.980 --> 00:01:40.600
download, or the next periodic
update or prefetch is

00:01:40.600 --> 00:01:43.395
initiated, you can also execute
the transfer stored in

00:01:43.395 --> 00:01:44.420
your queue.

00:01:44.420 --> 00:01:46.850
This simple approach can be
effective but, implemented

00:01:46.850 --> 00:01:49.810
naively, it introduces the risk
of transfers being lost

00:01:49.810 --> 00:01:52.610
if your app is closed before
the queue is cleared.

00:01:52.610 --> 00:01:54.890
That's fine if your queue
transfers are only relevant to

00:01:54.890 --> 00:01:57.440
the current session, but for
things like analytics or user

00:01:57.440 --> 00:01:59.310
created data, you want
to make sure that

00:01:59.310 --> 00:02:01.040
you never lose anything.

00:02:01.040 --> 00:02:05.220
The best solution is using
a content provider.

00:02:05.220 --> 00:02:08.160
This skeleton implementation
shows the basic query, insert,

00:02:08.160 --> 00:02:09.930
delete, and update
methods that you

00:02:09.930 --> 00:02:11.420
would need to implement.

00:02:11.420 --> 00:02:13.710
A content provider can be backed
by any data store, but

00:02:13.710 --> 00:02:16.450
most commonly an SQLite
database.

00:02:16.450 --> 00:02:19.330
Now, rather than implementing a
batch queue, you can insert

00:02:19.330 --> 00:02:21.170
data into your content
provider.

00:02:21.170 --> 00:02:23.910
And then when your next transfer
begins, query it for

00:02:23.910 --> 00:02:26.650
pending transfers and remove
successfully transmitted data

00:02:26.650 --> 00:02:28.330
from that queue.

00:02:28.330 --> 00:02:31.030
In this example I'm querying
four queue check-ins, sending

00:02:31.030 --> 00:02:33.290
them to a server and removing
the successfully completed

00:02:33.290 --> 00:02:34.720
ones from the queue.

00:02:34.720 --> 00:02:37.140
I still need a technique to
bundle these delay tolerant

00:02:37.140 --> 00:02:39.860
transfers for the time sensitive
ones, or possibly

00:02:39.860 --> 00:02:42.540
also reschedule those transfers
periodically to

00:02:42.540 --> 00:02:44.990
ensure that they do
eventually happen.

00:02:44.990 --> 00:02:47.680
Most simply, I can revisit the
earlier approach of creating a

00:02:47.680 --> 00:02:50.560
series of methods to execute
each transfer and then ensure

00:02:50.560 --> 00:02:52.280
that each calls the other.

00:02:52.280 --> 00:02:56.380
A much neater alternative
is to use a SyncAdapter.

00:02:56.380 --> 00:02:59.130
That's going to execute each of
our transfers within its on

00:02:59.130 --> 00:03:00.850
perform sync method.

00:03:00.850 --> 00:03:02.920
It's important to note that
each of the methods called

00:03:02.920 --> 00:03:05.200
should contain its own logic for
determining whether or not

00:03:05.200 --> 00:03:07.940
it should actually perform an
update, potentially skipping

00:03:07.940 --> 00:03:10.830
transfer sessions if the radio
hasn't already been activated

00:03:10.830 --> 00:03:13.110
by a higher priority method.

00:03:13.110 --> 00:03:15.570
Using a SyncAdapter to manage
your transfers has a number of

00:03:15.570 --> 00:03:18.680
advantages, including making it
easy to centralize all of

00:03:18.680 --> 00:03:21.640
your app's data transfers in one
place so they all run at

00:03:21.640 --> 00:03:23.110
the same time.

00:03:23.110 --> 00:03:25.450
Your data transfers can also
be scheduled with transfers

00:03:25.450 --> 00:03:28.030
from other apps, all working
towards the goal of reducing

00:03:28.030 --> 00:03:31.300
the number of times the system
has to switch on the radio.

00:03:31.300 --> 00:03:34.530
SyncAdapter also implements data
transfer best practices

00:03:34.530 --> 00:03:37.150
for you, including checking
for network connectivity,

00:03:37.150 --> 00:03:39.610
retrying downloads when
connectivity returns, and

00:03:39.610 --> 00:03:41.850
automated batching and time
shifting on requests that

00:03:41.850 --> 00:03:44.140
occur within the same
time window.

00:03:44.140 --> 00:03:45.790
Creating a SyncAdapter
is actually pretty

00:03:45.790 --> 00:03:46.490
straightforward.

00:03:46.490 --> 00:03:49.480
Start by extending the abstract
threaded SyncAdapter

00:03:49.480 --> 00:03:52.280
class and implementing your own
data transfer code within

00:03:52.280 --> 00:03:56.500
the onPerformSync handler
as you can see here.

00:03:56.500 --> 00:03:59.510
When executing the SyncAdapter,
we'll spawn a

00:03:59.510 --> 00:04:01.890
thread to invoke sync
operations, so you don't need

00:04:01.890 --> 00:04:04.600
to worry about moving your code
into a background thread.

00:04:04.600 --> 00:04:07.220
Similarly, multiple executions
will be rejected so you can

00:04:07.220 --> 00:04:09.500
write your transfer code knowing
that it won't be run

00:04:09.500 --> 00:04:11.280
concurrently with itself.

00:04:11.280 --> 00:04:13.530
In order to run, the SyncAdapter
must be bound to a

00:04:13.530 --> 00:04:16.209
service, so you also need
to create a service that

00:04:16.209 --> 00:04:18.779
instantiates your SyncAdapter
and binds to it.

00:04:18.779 --> 00:04:20.850
SyncAdapters were originally
designed to support

00:04:20.850 --> 00:04:22.680
synchronization of a
content provider

00:04:22.680 --> 00:04:23.940
associated with an account.

00:04:23.940 --> 00:04:26.480
For example, Gmail.

00:04:26.480 --> 00:04:30.440
As a result, you also need to
associate each SyncAdapter

00:04:30.440 --> 00:04:33.190
with an account type and a
content provider authority.

00:04:33.190 --> 00:04:35.640
If you don't use accounts for
your application, you can

00:04:35.640 --> 00:04:38.370
create your own mock account
by extending the abstract

00:04:38.370 --> 00:04:39.900
account authenticator.

00:04:39.900 --> 00:04:43.185
In this boilerplate, you'll
notice that I'm overriding the

00:04:43.185 --> 00:04:44.210
add account method.

00:04:44.210 --> 00:04:46.260
Here you would typically ask
the user to enter their

00:04:46.260 --> 00:04:48.150
authentication details
for your service.

00:04:48.150 --> 00:04:50.680
But instead, you can just create
a new stub account and

00:04:50.680 --> 00:04:53.220
explicitly add it to the
Account Manager.

00:04:53.220 --> 00:04:56.320
Take particular note of the
account type you specify.

00:04:56.320 --> 00:04:58.550
Like the SyncAdapter, the
account authenticator also

00:04:58.550 --> 00:05:01.310
needs a service from which to
run, so create a new service

00:05:01.310 --> 00:05:03.520
that binds to your
implementation.

00:05:03.520 --> 00:05:05.700
Then create a metadata
file for your account

00:05:05.700 --> 00:05:07.100
authenticator.

00:05:07.100 --> 00:05:10.340
Note in particular the account
type, whic must match the one

00:05:10.340 --> 00:05:13.365
which you provided earlier
in your implementation.

00:05:13.365 --> 00:05:16.640
The SyncAdapter also requires
a content provider.

00:05:16.640 --> 00:05:19.120
As we described earlier, a
content provider is an

00:05:19.120 --> 00:05:21.130
effective and efficient way to
store the data that you're

00:05:21.130 --> 00:05:22.000
planning to transfer.

00:05:22.000 --> 00:05:24.720
But if you prefer not to use one
you can create a stubbed

00:05:24.720 --> 00:05:27.540
out implementation like this.

00:05:27.540 --> 00:05:29.970
Next, create the metadata file
for the SyncAdapter that will

00:05:29.970 --> 00:05:32.060
be used to associate a
content provider and

00:05:32.060 --> 00:05:33.630
account type with it.

00:05:33.630 --> 00:05:37.280
Note that here I am marking the
SyncAdapter as not user

00:05:37.280 --> 00:05:40.160
visible, so users won't be able
to disable syncing from

00:05:40.160 --> 00:05:41.830
their global settings.

00:05:41.830 --> 00:05:44.680
Finally, add the new services
and content providers to the

00:05:44.680 --> 00:05:47.060
application manifest,
associating the SyncAdapter

00:05:47.060 --> 00:05:49.950
metadata with the SyncAdapter
service, the account

00:05:49.950 --> 00:05:52.260
authenticator, metadata
with the account

00:05:52.260 --> 00:05:54.110
authenticator service.

00:05:54.110 --> 00:05:56.640
With your SyncAdapter complete
you can now start thinking

00:05:56.640 --> 00:05:58.390
about how to trigger your
synchronizations.

00:05:58.390 --> 00:06:01.030
And you can configure your
SyncAdapter to run when server

00:06:01.030 --> 00:06:03.820
data changes, when the data on
the device changes, when the

00:06:03.820 --> 00:06:07.230
framework sends a network Tcl,
or at predetermined intervals,

00:06:07.230 --> 00:06:08.860
or even on demand.

00:06:08.860 --> 00:06:11.150
To be as efficient as possible,
it's best practice

00:06:11.150 --> 00:06:14.000
to rely primarily on server
initiated synchronizations,

00:06:14.000 --> 00:06:16.530
and where possible, avoid
starting syncs as the direct

00:06:16.530 --> 00:06:18.690
result of a user action.

00:06:18.690 --> 00:06:21.880
Basically, try and eliminate
the Refresh button.

00:06:21.880 --> 00:06:24.250
The hardest part of the process
is determining which

00:06:24.250 --> 00:06:26.840
transfers are delay tolerant and
which will require a sync

00:06:26.840 --> 00:06:28.310
to be initiated.

00:06:28.310 --> 00:06:31.540
Now, this flow chart gives an
indication of the most common

00:06:31.540 --> 00:06:33.190
initiators for possible syncs.

00:06:33.190 --> 00:06:35.720
And I'll go through each flow
now demonstrating how to

00:06:35.720 --> 00:06:38.240
trigger a SyncAdapter
in each case.

00:06:38.240 --> 00:06:41.360
The best approach is to rely on
server pings notifying your

00:06:41.360 --> 00:06:44.040
app that there is new
data to download.

00:06:44.040 --> 00:06:46.220
Using Google Cloud Messaging--
which I'll explore in more

00:06:46.220 --> 00:06:47.860
detail in another DevByte--

00:06:47.860 --> 00:06:50.370
you can notify each installed
instance of your app that it

00:06:50.370 --> 00:06:52.550
needs to sync with the server.

00:06:52.550 --> 00:06:55.960
Simply listen for an incoming
GCM message notifying you of

00:06:55.960 --> 00:06:58.380
new data becoming available,
and call requests syncs

00:06:58.380 --> 00:07:01.390
specifying the appropriate
account and authority.

00:07:01.390 --> 00:07:03.930
This eliminates the need for any
client side polling while

00:07:03.930 --> 00:07:07.090
maintaining constantly
up-to-date client data.

00:07:07.090 --> 00:07:09.450
Conversely, you may want to
synchronize changes on the

00:07:09.450 --> 00:07:10.830
client side to the Cloud.

00:07:10.830 --> 00:07:13.150
Now, this could be anything
from analytics data to new

00:07:13.150 --> 00:07:15.490
emails, so you want to be
careful when deciding which

00:07:15.490 --> 00:07:19.070
changes are sufficient to
initiate an actual transfer.

00:07:19.070 --> 00:07:21.170
If you're using content
providers, you can configure

00:07:21.170 --> 00:07:23.790
your SyncAdapter to trigger
whenever the content provider

00:07:23.790 --> 00:07:26.080
changes by setting the
supports uploading

00:07:26.080 --> 00:07:27.720
attribute to true.

00:07:27.720 --> 00:07:29.440
Which happens to
be the default.

00:07:29.440 --> 00:07:31.830
Now, when this is set, an
upload only sync will be

00:07:31.830 --> 00:07:34.470
requested whenever your content
provider executes a

00:07:34.470 --> 00:07:37.840
notify change call with the sync
to network parameter set

00:07:37.840 --> 00:07:41.560
to true as shown here.

00:07:41.560 --> 00:07:44.500
Now within the onPerformSync
handler you can detect these

00:07:44.500 --> 00:07:48.140
upload only syncs by examining
the sync extras upload extra.

00:07:48.140 --> 00:07:50.140
This can be useful if you
want to rate limit

00:07:50.140 --> 00:07:53.020
client initiated transfers.

00:07:53.020 --> 00:07:55.530
You can also configure your
SyncAdapter to sync whenever

00:07:55.530 --> 00:07:58.170
the platform opens a connection
to keep the TCP/IP

00:07:58.170 --> 00:08:00.570
connection used for things like
Google Cloud Messaging or

00:08:00.570 --> 00:08:03.840
Live by setting it to
sync automatically.

00:08:03.840 --> 00:08:07.180
Now this approach ensures that
your app is regularly updated

00:08:07.180 --> 00:08:10.070
without having to schedule your
own client side polling.

00:08:10.070 --> 00:08:12.690
Now that said, the frequency of
network Tcls can lead to a

00:08:12.690 --> 00:08:15.210
large number of transfers, so
this should only be enabled

00:08:15.210 --> 00:08:16.980
when your app is in
the foreground.

00:08:16.980 --> 00:08:18.880
And even then, you may want
to artificially lower the

00:08:18.880 --> 00:08:23.060
frequency of syncs within your
onPerformSync method.

00:08:23.060 --> 00:08:25.190
Now, if you want to perform
regular syncs at a known

00:08:25.190 --> 00:08:28.630
frequency, you can use the
addPeriodicSync method.

00:08:28.630 --> 00:08:30.660
While you can set any frequency,
this approach is

00:08:30.660 --> 00:08:33.150
more typically used to ensure
at least one sync happens

00:08:33.150 --> 00:08:37.230
every 12 to 24 hours when the
app isn't already running.

00:08:37.230 --> 00:08:40.200
Typically with client and server
changes initiating most

00:08:40.200 --> 00:08:42.070
of those updates, particularly
when the app is in the

00:08:42.070 --> 00:08:43.110
foreground.

00:08:43.110 --> 00:08:46.040
Now finally, if you need to
initiate a time sensitive

00:08:46.040 --> 00:08:49.300
transfer, either when the app
launches, when the user

00:08:49.300 --> 00:08:51.450
browses something that you've
not prefetched, or just to

00:08:51.450 --> 00:08:54.630
prefetch additional data, you
can call requestSync.

00:08:54.630 --> 00:08:58.040
In cases where an update must
occur immediately, in order to

00:08:58.040 --> 00:09:00.560
avoid impacting the user
experience, you can force a

00:09:00.560 --> 00:09:04.100
manual expedited sync by
setting the manual and

00:09:04.100 --> 00:09:06.730
expedited flags within
the settings bundle.

00:09:06.730 --> 00:09:09.130
These settings will ignore any
back offs and sync settings

00:09:09.130 --> 00:09:11.100
that might delay the sync
in attempt to execute it

00:09:11.100 --> 00:09:12.800
immediately instead.

00:09:12.800 --> 00:09:14.890
Now you can find all the details
to creating and using

00:09:14.890 --> 00:09:18.150
SyncAdapters in this Android
training class.

00:09:18.150 --> 00:09:20.160
So, having learned how to
perform our updates

00:09:20.160 --> 00:09:22.830
efficiently, other DevBytes will
look at ways to adjust

00:09:22.830 --> 00:09:26.800
our update frequency, reducing
data payload sizes, and using

00:09:26.800 --> 00:09:28.620
Google Cloud Messaging
in more detail.

