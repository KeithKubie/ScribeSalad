WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:01.680
So, sometimes we find ourselves faced

00:00:01.680 --> 00:00:03.930
with, really hard software testing problems.

00:00:03.930 --> 00:00:06.330
Let me go over some of the characteristics of this problem. Lack

00:00:06.330 --> 00:00:09.410
of a specification is common, or perhaps only, lack of a good

00:00:09.410 --> 00:00:13.030
specification. If there are no comparable implementations of the kind of system

00:00:13.030 --> 00:00:14.780
we're implementing, that is to say of the first system of its

00:00:14.780 --> 00:00:17.830
sort, that makes testing quite hard. Because what it probably means is

00:00:17.830 --> 00:00:20.940
we are debugging the specification or even developing the specification as we

00:00:20.940 --> 00:00:25.600
go. Big systems are hard to test, large highly structured input spaces,

00:00:25.600 --> 00:00:28.060
like testing quite hard and so if you want to imagine sort

00:00:28.060 --> 00:00:31.230
of a hard testing problem with a large highly structured input space.

00:00:31.230 --> 00:00:33.830
Consider for example, the flight control computer is on a space craft

00:00:33.830 --> 00:00:37.080
or an airplane, these things take sort of an enormous variety of input

00:00:37.080 --> 00:00:40.460
from all sort of different redundant sensors. The time at which these inputs

00:00:40.460 --> 00:00:43.600
arrive is significant. The spacecraft or the airplane has all sorts of

00:00:43.600 --> 00:00:45.610
physical properties likes its altitude, its

00:00:45.610 --> 00:00:47.480
attitude, the positions of various control

00:00:47.480 --> 00:00:50.500
surfaces that all affected dynamics. These kind of systems are really, really,

00:00:50.500 --> 00:00:53.460
sort of truly hard to test. Non-determinism can make a system very hard

00:00:53.460 --> 00:00:55.920
to test. And, the issue here is that, we'll play a test case

00:00:55.920 --> 00:00:59.170
against the system once, and it succeeds. But then, at some later time,

00:00:59.170 --> 00:01:01.900
some variable that's not under our control will cause the system to fail on

00:01:01.900 --> 00:01:04.680
that same input. Lots of hidden statement make systems hard to test. Some

00:01:04.680 --> 00:01:07.990
systems that I've heard of either extremely hard to test or for example, Java

00:01:07.990 --> 00:01:09.850
Virtual Machine. That are run by,

00:01:09.850 --> 00:01:11.940
for example, financial organizations on lots of

00:01:11.940 --> 00:01:15.700
cores with huge amounts of memory. These things have so, so much internal state,

00:01:15.700 --> 00:01:17.200
that when something goes wrong, it's almost

00:01:17.200 --> 00:01:19.000
impossible to make any inferences about what

00:01:19.000 --> 00:01:21.520
was going on inside of it. And, you end up needing to try to

00:01:21.520 --> 00:01:22.990
reproduce the problem. But, of course, this

00:01:22.990 --> 00:01:24.990
is also extremely hard because the problem

00:01:24.990 --> 00:01:26.710
probably happened Three hours into some sort

00:01:26.710 --> 00:01:28.550
of a massive processing task. Finally, if

00:01:28.550 --> 00:01:30.380
we lack strong oracles testing can be

00:01:30.380 --> 00:01:32.260
really hard. And so, for example, something

00:01:32.260 --> 00:01:35.230
like a large molecular simulation might be very hard to test. So ,we have

00:01:35.230 --> 00:01:37.770
some sort of a new simulation code, we have no idea what the right

00:01:37.770 --> 00:01:40.760
answer is supposed to be probably. It's running on some sort of a large

00:01:40.760 --> 00:01:44.150
parallel machine, so we have a very hard time reproducing problems. Problems

00:01:44.150 --> 00:01:46.320
might take a long time to occur, something like an autopilot might be

00:01:46.320 --> 00:01:49.050
extremely hard to test, because the response of the thing is going to

00:01:49.050 --> 00:01:53.330
be inherently in terms of the stability. And good behavior of the airplane.

00:01:53.330 --> 00:01:56.310
And of course this is an incredibly large complex physical object that's

00:01:56.310 --> 00:01:58.870
very hard to model and simulate in a reliable fashion. If you think

00:01:58.870 --> 00:02:00.820
about picking a strong test for

00:02:00.820 --> 00:02:03.400
an autopilot, it's almost inconceivable. Okay, like

00:02:03.400 --> 00:02:05.860
I said, some sort of a giant JVM running with lots of cores

00:02:05.860 --> 00:02:08.538
for a long time using a huge amount of heat. Very, very hard to

00:02:08.538 --> 00:02:11.290
test the behavior of something in that kind of a state. So, the question we

00:02:11.290 --> 00:02:13.850
want to ask ourselves is, how do we get a handle on these situations?

00:02:13.850 --> 00:02:15.080
How should we test these things? And

00:02:15.080 --> 00:02:16.780
often, there aren't really any easy answers. But

00:02:16.780 --> 00:02:19.900
what we can do is, we can, leverage weak oracles to the maximum extent

00:02:19.900 --> 00:02:21.550
possible if any of these things, the

00:02:21.550 --> 00:02:23.960
simulation, the auto-pilot or the JVM actually crashes

00:02:23.960 --> 00:02:26.750
in a bad fashion. Then we definitely know something's gone wrong. We can try to

00:02:26.750 --> 00:02:28.350
bootstrap some degree of confidence in the

00:02:28.350 --> 00:02:30.860
software under test by taking small test inputs.

00:02:30.860 --> 00:02:34.110
For which we've hand-checked the output and trying to argue that, for example,

00:02:34.110 --> 00:02:38.150
somehow, the auto-pilot if it responds well for these inputs also responds well

00:02:38.150 --> 00:02:41.110
for other test inputs. And in the end, if we're thwarted in our

00:02:41.110 --> 00:02:44.080
attempts to do really good testing, we probably have to rely on non-testing

00:02:44.080 --> 00:02:46.930
methods. And so, of course we, we should be doing code inspections and

00:02:46.930 --> 00:02:49.620
using formal methods on our systems in any case, if we care about

00:02:49.620 --> 00:02:52.660
the reliability. But what's happening here, if we really can't test the system

00:02:52.660 --> 00:02:56.000
effectively, we might have to rely on these things more than we would've liked.

00:02:56.000 --> 00:02:57.680
Okay, so that's just a quick survey of,

00:02:57.680 --> 00:02:59.900
things that can make testing really hard in practice.

