WEBVTT
Kind: captions
Language: en

00:00:00.470 --> 00:00:03.290
So the simplest form of predication

00:00:03.290 --> 00:00:06.280
supporting hardware will be a conditional move

00:00:06.280 --> 00:00:09.986
instruction. In the MIPS instruction set, for

00:00:09.986 --> 00:00:12.938
example, there is a MOVZ instruction that

00:00:12.938 --> 00:00:19.608
takes two sources and the destination register. And the way this works is that

00:00:19.608 --> 00:00:25.992
this instructor compares Rt to 0. And if it is 0, then changes

00:00:25.992 --> 00:00:32.543
Rd to be equal to Rs, otherwise leaves Rd alone. Note that there is no branch

00:00:32.543 --> 00:00:35.200
here anymore because this is a single instruction.

00:00:35.200 --> 00:00:38.980
MIPS also has a MOVN instruction that works

00:00:38.980 --> 00:00:45.530
exactly the same way, except it moves Rs into Rd only if Rt is not 0. So, we

00:00:45.530 --> 00:00:51.650
would implement our x equals depending on condition x1 or x2 by doing something

00:00:51.650 --> 00:00:57.590
like using comparisons or whatever, to put the result of the condition into,

00:00:57.590 --> 00:01:03.740
let's say, R3. Then R1 would be our whatever x1 expression we wanted

00:01:03.740 --> 00:01:09.758
to implement. R2 would be our x2. And then we will do,

00:01:09.758 --> 00:01:15.410
MOVN x, R1, R3. MOVZ

00:01:15.410 --> 00:01:23.110
X, R2, R3. And this puts

00:01:23.110 --> 00:01:29.850
one of these two into X, depending on whether R3 was true or false. Which means,

00:01:29.850 --> 00:01:35.083
depending on the condition. The x86 instruction set has a whole

00:01:35.083 --> 00:01:39.883
set of so called CMOV instructions, so for example it has

00:01:39.883 --> 00:01:46.883
CMOVZ, CMOVNZ, CMOV greater than etc, where the condition here is determined by

00:01:46.883 --> 00:01:49.828
the flags. And all of these instructions

00:01:49.828 --> 00:01:53.084
effectively implement the, if the condition codes

00:01:53.084 --> 00:01:56.266
correspond to one of these conditions, depending

00:01:56.266 --> 00:01:59.522
on the instruction, then the destination register

00:01:59.522 --> 00:02:01.964
gets the value of the source register,

00:02:01.964 --> 00:02:05.368
otherwise the destination register is not modified.

00:02:05.368 --> 00:02:08.889
So, you can see how we can implement similar behavior here.

00:02:08.889 --> 00:02:11.466
Except maybe we don't even need to put the condition in

00:02:11.466 --> 00:02:14.490
a register because, probably we can just test the condition and

00:02:14.490 --> 00:02:16.981
then, do a greater than, less than and so on on it.

00:02:16.981 --> 00:02:17.989
[BLANK_AUDIO]

