WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:03.030
Defining methods is a handy way
to add custom functionality in

00:00:03.030 --> 00:00:04.640
any programming language.

00:00:04.640 --> 00:00:07.610
But writing methods for
everything doesn't scale very well.

00:00:07.610 --> 00:00:10.880
How can you guarantee that you'll only
call a method like drink water from

00:00:10.880 --> 00:00:13.250
bowl, using a dog hash as your argument?

00:00:14.320 --> 00:00:16.870
Probably isn't a great idea to
let your users pass the string,

00:00:16.870 --> 00:00:18.850
fire extinguisher, to that method.

00:00:19.870 --> 00:00:22.040
This method only really makes sense for
dogs.

00:00:23.050 --> 00:00:26.370
So what if instead of
representing our dog as a hash

00:00:26.370 --> 00:00:28.650
we create its own data structure.

00:00:28.650 --> 00:00:31.890
A dog data structure which
we'll call a dog object.

00:00:32.890 --> 00:00:34.430
Much like a string or an array or

00:00:34.430 --> 00:00:38.100
a symbol this dog object
can have its own methods.

00:00:38.100 --> 00:00:42.170
This dog might be able to bark,
wag its tail or drink from the bowl.

00:00:43.610 --> 00:00:46.560
This is a bit of a tricky concept
to wrap your head around at first.

00:00:46.560 --> 00:00:50.370
When I first started teaching myself to
code using online tutorials, this was

00:00:50.370 --> 00:00:53.610
often the point when I would just
throw my hands up and say that's it.

00:00:53.610 --> 00:00:54.110
I'm done.

00:00:55.120 --> 00:00:57.770
So if you get frustrated or feel like
this isn't coming quite naturally as

00:00:57.770 --> 00:01:00.090
the prior content, don't worry.

00:01:00.090 --> 00:01:02.910
Instead, lean on the community
resources we have available to you

00:01:02.910 --> 00:01:04.370
until it clicks.

00:01:04.370 --> 00:01:07.670
That moment, that aha moment,
will make everything worth it.

