WEBVTT
Kind: captions
Language: en

00:00:03.900 --> 00:00:05.400
PROFESSOR: Today
we're going to talk

00:00:05.400 --> 00:00:09.070
about protein folding and its
relation to linkage folding.

00:00:09.070 --> 00:00:13.200
We're going to look at a
mechanical model of proteins.

00:00:13.200 --> 00:00:16.160
This is an example of a
protein from lecture one.

00:00:16.160 --> 00:00:17.960
There's a ton out
there in this place

00:00:17.960 --> 00:00:21.200
called the protein data
bank, all freely available.

00:00:21.200 --> 00:00:23.734
It's really hard to
get pictures like this.

00:00:23.734 --> 00:00:25.150
But you get some
idea that there's

00:00:25.150 --> 00:00:27.250
a linkage embedded in here.

00:00:27.250 --> 00:00:31.040
You see various little
spheres and edges.

00:00:31.040 --> 00:00:32.350
That's, of course, not reality.

00:00:32.350 --> 00:00:34.270
Those spheres are
actually atoms and they're

00:00:34.270 --> 00:00:35.920
kind of amorphous blobs.

00:00:35.920 --> 00:00:38.500
The edges are chemical bonds.

00:00:38.500 --> 00:00:39.609
And those are connections.

00:00:39.609 --> 00:00:41.900
We don't know whether they're--
it's not really matter,

00:00:41.900 --> 00:00:43.365
but it's force.

00:00:46.190 --> 00:00:47.510
This is a rather messy picture.

00:00:47.510 --> 00:00:50.420
This is what a protein
folds into, some 3D shape.

00:00:50.420 --> 00:00:54.187
Most proteins fold
consistently into one shape.

00:00:54.187 --> 00:00:55.770
We don't really know
how that happens.

00:00:55.770 --> 00:00:58.450
We can't watch it happen.

00:00:58.450 --> 00:01:03.680
So the big challenge is
to know how proteins fold.

00:01:03.680 --> 00:01:06.150
Given a protein, what
does it fold into?

00:01:06.150 --> 00:01:07.780
That's the protein
folding problem.

00:01:07.780 --> 00:01:11.290
Major unsolved problem
in biology, biochemistry.

00:01:11.290 --> 00:01:14.440
The protein design problem is
I want to make a particular 3D

00:01:14.440 --> 00:01:17.570
shape so that it docks into
something, binds to a virus,

00:01:17.570 --> 00:01:23.140
whatever, what protein should
I synthesize in order for it

00:01:23.140 --> 00:01:25.070
to fold into that shape?

00:01:25.070 --> 00:01:27.440
That is potentially an easier
question algorithmically

00:01:27.440 --> 00:01:30.950
and it's the really useful one
from a drug design standpoint.

00:01:30.950 --> 00:01:33.620
Some new virus comes
along, you design a drug

00:01:33.620 --> 00:01:36.640
to attack it and only
it, you build it.

00:01:36.640 --> 00:01:39.340
Usually you would manufacture
some synthetic DNA,

00:01:39.340 --> 00:01:43.100
you feed it into the
cell, DNA goes to the RNA,

00:01:43.100 --> 00:01:46.240
goes to the mRNA,
goes to the protein.

00:01:46.240 --> 00:01:49.950
You all remember
biology 101, hopefully.

00:01:49.950 --> 00:01:52.130
We don't need to
know much about it.

00:01:52.130 --> 00:01:54.645
If you look at what's called
the backbone of the protein,

00:01:54.645 --> 00:01:57.980
a protein's basically a chain
and attached to the chain

00:01:57.980 --> 00:01:59.660
are various amino acids.

00:01:59.660 --> 00:02:02.190
Today I'm going to ignore
the amino acids, which

00:02:02.190 --> 00:02:06.270
is a little crazy, and just
think about the backbone chain.

00:02:06.270 --> 00:02:09.382
Backbone chain looks
something like this.

00:02:09.382 --> 00:02:11.590
One of the challenges of
video recording a class is I

00:02:11.590 --> 00:02:16.440
can only use copyright free
or Creative Commons images.

00:02:16.440 --> 00:02:20.180
This one, I couldn't get
one, so I had to draw it.

00:02:20.180 --> 00:02:21.590
There's various
measurements here

00:02:21.590 --> 00:02:23.330
in certain numbers of angstroms.

00:02:23.330 --> 00:02:24.720
Those are the chemical bonds.

00:02:24.720 --> 00:02:31.590
Various atoms here-- nitrogen,
carbon, and so on, hydrogen.

00:02:31.590 --> 00:02:34.260
But basically, it's a chain
that zigzags back and forth.

00:02:34.260 --> 00:02:35.670
You can also see
the angles here.

00:02:35.670 --> 00:02:38.045
They're not quite all the
same, but they're very similar.

00:02:38.045 --> 00:02:40.105
All the lengths in
the angles are close.

00:02:42.950 --> 00:02:44.951
It zigzags-- this is
really in three dimensions.

00:02:44.951 --> 00:02:47.200
I tried to draw the spheres
so you could see the three

00:02:47.200 --> 00:02:49.080
dimensionality, but
it's a little tricky.

00:02:49.080 --> 00:02:51.690
And then attached on the
sides are the amino acids.

00:02:51.690 --> 00:02:53.800
I'm going to focus
just on the backbone.

00:02:53.800 --> 00:02:57.600
The way this thing is allowed
to fold-- these lengths,

00:02:57.600 --> 00:02:59.594
as far as we know,
are pretty static.

00:02:59.594 --> 00:03:01.260
They probably would
jiggle a little bit.

00:03:01.260 --> 00:03:02.850
But you can think
of them as edges.

00:03:02.850 --> 00:03:05.210
So you can think of
this as a linkage.

00:03:05.210 --> 00:03:07.680
The catch is, also,
the angles are

00:03:07.680 --> 00:03:11.850
fixed because the way this atom
wants to bind to other things

00:03:11.850 --> 00:03:14.060
has very fixed angle patterns.

00:03:14.060 --> 00:03:17.080
If you ever played with a
chemistry construction set,

00:03:17.080 --> 00:03:18.150
that's how they work.

00:03:18.150 --> 00:03:21.520
They have holes at
just particular angles.

00:03:21.520 --> 00:03:23.310
So if you think of
like a robotic arm,

00:03:23.310 --> 00:03:27.590
normally-- like here, I have
it two edge robotic arm,

00:03:27.590 --> 00:03:28.330
let's say.

00:03:28.330 --> 00:03:30.913
Normally, you have two degrees
of freedom in three dimensions.

00:03:30.913 --> 00:03:36.430
You can change the angle and
you can spin around this edge.

00:03:36.430 --> 00:03:38.610
Now, it's saying the angle
is fixed-- for example,

00:03:38.610 --> 00:03:40.210
here it's, say, at 90 degrees.

00:03:40.210 --> 00:03:42.000
All I can do is spin.

00:03:42.000 --> 00:03:45.950
I'm not allowed to flex
my muscle in this way.

00:03:45.950 --> 00:03:46.920
So that is the model.

00:03:46.920 --> 00:03:50.280
All of-- in this case, we have
a tree-- all of the angles

00:03:50.280 --> 00:03:51.760
here are fixed.

00:03:51.760 --> 00:03:54.660
But you can still, for example,
take this entire sub chain

00:03:54.660 --> 00:03:56.680
and spin it around this edge.

00:03:56.680 --> 00:03:59.087
That'll preserve all the
angles and all the lengths.

00:03:59.087 --> 00:04:00.420
That's all you're allowed to do.

00:04:00.420 --> 00:04:02.300
You take an edge,
you spin it-- spin

00:04:02.300 --> 00:04:05.490
one half of the edge
relative to the other half.

00:04:05.490 --> 00:04:09.710
These are called
fixed angle linkages.

00:04:09.710 --> 00:04:12.130
And they have been studied
quite a lot because

00:04:12.130 --> 00:04:13.990
of their connection
to protein folding.

00:04:19.959 --> 00:04:21.706
So embedded in the
term linkage, we

00:04:21.706 --> 00:04:23.330
assume that the edge
lengths are fixed,

00:04:23.330 --> 00:04:28.420
and then we add the constraint
that the angles are fixed.

00:04:28.420 --> 00:04:30.460
And the motivation
is the backbone

00:04:30.460 --> 00:04:34.530
is something like-- the
backbone of a protein

00:04:34.530 --> 00:04:36.480
is something like
a fixed angle tree.

00:04:39.480 --> 00:04:40.950
Of course, it's
not much of a tree.

00:04:40.950 --> 00:04:42.210
Most of it is a chain.

00:04:42.210 --> 00:04:45.557
There's just small
objects hanging off,

00:04:45.557 --> 00:04:47.015
and if you add the
amino acid there

00:04:47.015 --> 00:04:49.979
are bigger things hanging
off, but still constant size.

00:04:49.979 --> 00:04:51.020
They'll have some cycles.

00:04:51.020 --> 00:04:52.170
They're not trees.

00:04:52.170 --> 00:04:57.000
But it's slightly
more approximately--

00:04:57.000 --> 00:04:59.760
I should draw wavier lines.

00:04:59.760 --> 00:05:01.770
It's a chain.

00:05:01.770 --> 00:05:04.580
Usually an open chain although
occasionally a closed chain.

00:05:11.410 --> 00:05:14.210
So we think a lot about fixed
angle chain and sometimes about

00:05:14.210 --> 00:05:15.920
fixed angle trees.

00:05:15.920 --> 00:05:19.310
Now, fixed angle linkages
are harder to think

00:05:19.310 --> 00:05:21.240
about than universal
joints-- that's

00:05:21.240 --> 00:05:24.070
the usual kind of linkage.

00:05:24.070 --> 00:05:27.020
So we know 3D linkages
are kind of tough.

00:05:27.020 --> 00:05:29.020
Nonetheless, we found
lots of really interesting

00:05:29.020 --> 00:05:30.820
mathematical problems
to solve here,

00:05:30.820 --> 00:05:33.280
and that is the topic of today.

00:05:33.280 --> 00:05:37.250
At some level, we are
thinking about the mechanics

00:05:37.250 --> 00:05:38.290
of protein folding.

00:05:38.290 --> 00:05:39.850
We're throwing away energy.

00:05:39.850 --> 00:05:42.750
We're throwing
away the actuators

00:05:42.750 --> 00:05:45.220
in real life that
make proteins fold.

00:05:45.220 --> 00:05:48.000
We're just imagining,
given this mechanical model

00:05:48.000 --> 00:05:51.690
of how a protein might
fold, what's possible.

00:05:51.690 --> 00:05:54.420
So in some sense, it's
broader than reality.

00:05:54.420 --> 00:05:57.300
And the hope is you find
an interesting algorithm

00:05:57.300 --> 00:05:59.920
for how to fold
these protein chains.

00:05:59.920 --> 00:06:03.410
And maybe that's the algorithm
that nature is implementing.

00:06:03.410 --> 00:06:05.420
That's the kind of
general picture.

00:06:05.420 --> 00:06:09.120
We're not constrained
by reality,

00:06:09.120 --> 00:06:11.930
and by how nature
actually folds things.

00:06:15.040 --> 00:06:22.632
So I'm going to talk today
about four main problems here.

00:06:22.632 --> 00:06:25.140
The first one's called span.

00:06:25.140 --> 00:06:26.515
Second one's called flattening.

00:06:29.170 --> 00:06:32.495
Third one is flat
state connectivity.

00:06:41.330 --> 00:06:46.770
And the fourth one is locked,
our good friend locked chains.

00:06:50.259 --> 00:06:51.800
And of course there
are locked chains

00:06:51.800 --> 00:06:54.444
because we're constraining
linkages even more than before.

00:06:54.444 --> 00:06:56.860
So you could take knitting
needles, it'll still be locked.

00:06:56.860 --> 00:06:58.690
So you add extra constraints.

00:06:58.690 --> 00:07:00.127
Makes it harder to fold.

00:07:00.127 --> 00:07:02.460
But there are actually some
interesting positive results

00:07:02.460 --> 00:07:05.800
we can give of chains that
are not locked in some sense.

00:07:05.800 --> 00:07:08.510
And flat state connectivity is
about the same kind of thing,

00:07:08.510 --> 00:07:10.130
where instead of worrying
about getting from anywhere

00:07:10.130 --> 00:07:11.580
to anywhere, we just
worry about getting

00:07:11.580 --> 00:07:13.510
from one flat state
to another flat state.

00:07:13.510 --> 00:07:15.500
Flat means lying in a plane.

00:07:15.500 --> 00:07:18.940
Flattening is about is
there such a configuration.

00:07:18.940 --> 00:07:22.730
And span is about
given robotic arm--

00:07:22.730 --> 00:07:26.200
like a more complicated one,
like with multiple edges-- how

00:07:26.200 --> 00:07:29.070
far apart can the endpoints
get, and how close

00:07:29.070 --> 00:07:30.470
can the endpoints get.

00:07:30.470 --> 00:07:32.690
The universal chain
is not very exciting.

00:07:32.690 --> 00:07:35.710
Farthest it can get is when
it's straight, and the least far

00:07:35.710 --> 00:07:37.290
it can get is when it's closed.

00:07:37.290 --> 00:07:40.720
You can always do that, I think.

00:07:40.720 --> 00:07:43.790
Well, no, I guess you
can't always close it up.

00:07:43.790 --> 00:07:46.330
That's a little nontrivial.

00:07:46.330 --> 00:07:47.950
But for fixed
angle linkages, you

00:07:47.950 --> 00:07:50.570
can't straighten out because
you have to preserve the angles.

00:07:50.570 --> 00:07:53.640
So it's kind of what is the
straightest like configuration,

00:07:53.640 --> 00:07:57.089
given that the angles are fixed.

00:07:57.089 --> 00:07:58.130
So let's start with span.

00:08:09.830 --> 00:08:15.004
So the span of a
configuration is the distance

00:08:15.004 --> 00:08:15.920
between the endpoints.

00:08:21.470 --> 00:08:28.380
And in general, you'll find
the max span and the min span.

00:08:28.380 --> 00:08:31.480
This search was
begun by a guy named

00:08:31.480 --> 00:08:35.890
Mike Soss, who was a
PhD student at McGill.

00:08:35.890 --> 00:08:40.039
And he proved that
if you want to find,

00:08:40.039 --> 00:08:43.049
for example, a flat
state that lives

00:08:43.049 --> 00:08:55.460
in two dimensions with the
minimum or the maximum span,

00:08:55.460 --> 00:08:56.440
this is NP-hard.

00:08:59.340 --> 00:09:02.860
This is in his PhD thesis.

00:09:02.860 --> 00:09:05.082
Question?

00:09:05.082 --> 00:09:07.552
AUDIENCE: If you have a
linkage or [INAUDIBLE]

00:09:07.552 --> 00:09:12.739
chain that actually loops
around, is there a span

00:09:12.739 --> 00:09:13.980
because there is no endpoint?

00:09:13.980 --> 00:09:16.350
PROFESSOR: Oh, here I'm
assuming open chain--

00:09:16.350 --> 00:09:23.750
I should say that--
which most proteins are.

00:09:23.750 --> 00:09:25.760
I've been talking
about trees and stuff.

00:09:25.760 --> 00:09:28.210
Here I mean chain, otherwise
there aren't two end points

00:09:28.210 --> 00:09:30.330
to think about.

00:09:30.330 --> 00:09:32.570
Good.

00:09:32.570 --> 00:09:35.040
So here are his
NP-hardness proofs.

00:09:35.040 --> 00:09:37.180
[INAUDIBLE] the problems
are NP-complete.

00:09:37.180 --> 00:09:39.880
They're pretty simple.

00:09:39.880 --> 00:09:42.759
The problem here we're
reducing from is partition.

00:09:42.759 --> 00:09:44.050
I give you a bunch of integers.

00:09:44.050 --> 00:09:47.660
I want to divide them into
two halves of equal sum.

00:09:47.660 --> 00:09:52.220
And the top example is
minimum flat span problem.

00:09:52.220 --> 00:09:56.240
So you make an orthogonal chain
where the horizontal edges are

00:09:56.240 --> 00:09:59.220
long and they're proportional
to the integers you're given,

00:09:59.220 --> 00:10:01.490
the vertical edges
are really tiny.

00:10:01.490 --> 00:10:05.230
And so what you'd like to do--
all you can do is sort of flip

00:10:05.230 --> 00:10:06.950
because you have to
stay in the plane,

00:10:06.950 --> 00:10:08.920
you can flip one of
the vertical edges,

00:10:08.920 --> 00:10:11.690
say, and make any of these
edges go left or right.

00:10:11.690 --> 00:10:14.300
You get that freedom.

00:10:14.300 --> 00:10:15.840
So each integer,
you get to choose.

00:10:15.840 --> 00:10:19.207
Do I go right by that amount and
or do I go left by that amount?

00:10:19.207 --> 00:10:21.540
And if the amount you go left
is equal to the amount you

00:10:21.540 --> 00:10:23.373
go right-- in other
words, is it partitioned

00:10:23.373 --> 00:10:26.250
into two equal sums-- then
those endpoints will be aligned,

00:10:26.250 --> 00:10:28.000
and then their distance
will be very tiny.

00:10:28.000 --> 00:10:29.374
Otherwise, it will
be quite large

00:10:29.374 --> 00:10:31.860
because the horizontal
distances are all big.

00:10:31.860 --> 00:10:36.160
So it's kind of a very
easy NP-hardness proof.

00:10:36.160 --> 00:10:39.910
To maximize your
flat span, instead

00:10:39.910 --> 00:10:41.550
of mapping your
integers on to lengths,

00:10:41.550 --> 00:10:43.690
you map them on to
angles-- return angles.

00:10:43.690 --> 00:10:46.170
I won't specify
that too precisely.

00:10:46.170 --> 00:10:49.260
But again, if you make
your total counterclockwise

00:10:49.260 --> 00:10:51.930
turn equal to your
total clockwise turn,

00:10:51.930 --> 00:10:55.230
then the two end edges,
which are super, super long,

00:10:55.230 --> 00:10:56.670
will be parallel.

00:10:56.670 --> 00:10:59.530
And to maximize the distance
between the endpoints,

00:10:59.530 --> 00:11:01.150
you want them to be parallel.

00:11:01.150 --> 00:11:06.690
If you make them go some
other angle, they're closer.

00:11:06.690 --> 00:11:11.890
Now, both of these proofs
rely on the requirement

00:11:11.890 --> 00:11:13.630
that you want a
flat configuration

00:11:13.630 --> 00:11:15.470
with minimum or maximum span.

00:11:15.470 --> 00:11:17.370
Now, there's a claim
that flat configurations

00:11:17.370 --> 00:11:22.300
matter for proteins, so
it's a natural constraint.

00:11:22.300 --> 00:11:23.800
But what about the
general problem?

00:11:23.800 --> 00:11:25.940
What about, I have something
in three dimensions,

00:11:25.940 --> 00:11:29.030
I want to maximize-- I have
a fixed angle chain in 3D,

00:11:29.030 --> 00:11:30.870
maximize or minimize the span?

00:11:34.530 --> 00:11:36.290
Both of those problems are open.

00:11:36.290 --> 00:11:39.010
Can you solve them
in polynomial time?

00:11:39.010 --> 00:11:52.710
For 3D max span, so the non flat
version just for maximization,

00:11:52.710 --> 00:11:53.940
there's been a lot of work.

00:11:53.940 --> 00:11:56.250
And there are two
papers on the subject.

00:11:56.250 --> 00:11:59.240
One of them is by
Nadia and Joe O'Rourke.

00:11:59.240 --> 00:12:02.830
Another one is by
Borcea and Streinu.

00:12:02.830 --> 00:12:06.410
And I just want to
quickly summarize

00:12:06.410 --> 00:12:08.840
that because there's
a lot of stuff there.

00:12:08.840 --> 00:12:13.430
But essentially, they find what
the structure of those spans

00:12:13.430 --> 00:12:13.930
look like.

00:12:13.930 --> 00:12:17.710
I have an early figure
that's in our book

00:12:17.710 --> 00:12:19.870
before all this work was done.

00:12:19.870 --> 00:12:25.330
The simple chain, this black guy
at 1, 2 3, 4 bars open chain,

00:12:25.330 --> 00:12:27.710
and in that black three
dimensional state,

00:12:27.710 --> 00:12:32.590
it maximizes the span,
the green span there.

00:12:32.590 --> 00:12:33.980
And if you look
from above, which

00:12:33.980 --> 00:12:37.400
is this picture-- of course,
the end points look much closer

00:12:37.400 --> 00:12:42.800
in projection-- and the red
configuration is the max span

00:12:42.800 --> 00:12:45.050
if you restrict to
flat configurations.

00:12:45.050 --> 00:12:47.790
So here, of course,
3D buys you something.

00:12:47.790 --> 00:12:49.870
In general, it always will.

00:12:49.870 --> 00:12:51.710
An interesting thing
is that this max

00:12:51.710 --> 00:12:56.740
span-- the green line--
passes through another vertex.

00:12:56.740 --> 00:12:58.340
It seems kind of weird.

00:12:58.340 --> 00:13:01.740
And in fact, there's a
general theorem there

00:13:01.740 --> 00:13:05.762
sort of characterizing the
structure of these chains.

00:13:05.762 --> 00:13:07.220
It's still not
known whether we can

00:13:07.220 --> 00:13:08.830
solve this problem
in polynomial time.

00:13:08.830 --> 00:13:23.820
But for orthogonal chains, where
all the angles are 90 degrees,

00:13:23.820 --> 00:13:27.580
we can solve that in
linear time, I guess.

00:13:31.490 --> 00:13:33.950
And here's what it looks like.

00:13:39.395 --> 00:13:41.020
Suppose you have some
orthogonal chain.

00:13:41.020 --> 00:13:43.186
Orthogonal chains are nice
because you can draw them

00:13:43.186 --> 00:13:44.890
in the plane as a staircase.

00:13:44.890 --> 00:13:46.805
So there's a nice
canonical configuration.

00:13:50.420 --> 00:13:56.830
One way to think about
how to find the max span

00:13:56.830 --> 00:14:00.040
configuration-- I'm just
going to give a high level

00:14:00.040 --> 00:14:02.390
overview here, this won't
be a complete algorithm--

00:14:02.390 --> 00:14:05.100
is you triangulated
that staircase

00:14:05.100 --> 00:14:07.034
in this sort of obvious
way of connecting

00:14:07.034 --> 00:14:08.575
every endpoint to
the one, two ahead.

00:14:12.290 --> 00:14:16.280
And think about this as like a
body that's hinging around here

00:14:16.280 --> 00:14:19.519
because I can spin-- if I spin
the left part of this chain

00:14:19.519 --> 00:14:21.560
around this edge, it's
like hinging that triangle

00:14:21.560 --> 00:14:22.780
around that hinge.

00:14:22.780 --> 00:14:23.564
Same thing.

00:14:23.564 --> 00:14:24.980
You could think
of these triangles

00:14:24.980 --> 00:14:27.520
as just being hinged together,
like in rigid origami.

00:14:30.070 --> 00:14:32.940
It's the same class of motions.

00:14:32.940 --> 00:14:36.100
And now you can--
what I'm going to do

00:14:36.100 --> 00:14:41.100
is compute a shortest path in
this surface from here to here.

00:14:41.100 --> 00:14:43.440
Confusingly, this is called
a geodesic shortest path

00:14:43.440 --> 00:14:45.390
although it's not really
related to geodesics

00:14:45.390 --> 00:14:47.870
from polyhedral surfaces.

00:14:47.870 --> 00:14:49.490
But if I compute
a shortest path,

00:14:49.490 --> 00:14:51.310
it's going to go
like to this vertex

00:14:51.310 --> 00:14:53.495
and then probably
to that vertex.

00:14:53.495 --> 00:14:56.020
But I'm constrained to
stay inside the union

00:14:56.020 --> 00:14:56.850
of those triangles.

00:14:56.850 --> 00:14:59.340
I want to go from one
endpoint to another.

00:14:59.340 --> 00:15:03.690
Then I claim that--
OK, these two edges

00:15:03.690 --> 00:15:07.300
will stay planar, of course
they form a triangle-- I claim

00:15:07.300 --> 00:15:10.270
these four edges
will stay planar,

00:15:10.270 --> 00:15:12.920
and in the orthogonal
case they'll stay zigzag.

00:15:12.920 --> 00:15:16.430
And then also these two guys
will stay in their own plane.

00:15:16.430 --> 00:15:19.740
And then I claim that actually
this wiggly line, which

00:15:19.740 --> 00:15:22.060
is not straight
because it bends here

00:15:22.060 --> 00:15:24.620
and it bends here, the total
length of that wiggly line

00:15:24.620 --> 00:15:26.180
is the max span.

00:15:26.180 --> 00:15:29.580
And you achieve that by folding
this planar part with respect

00:15:29.580 --> 00:15:32.190
to this planar part with
respect to this planar part

00:15:32.190 --> 00:15:36.532
so that the wiggly lines
become aligned and straight.

00:15:36.532 --> 00:15:37.740
And that's very hard to draw.

00:15:37.740 --> 00:15:39.720
But it can be done,
and that's what

00:15:39.720 --> 00:15:42.100
you do in the orthogonal
case and that gives you

00:15:42.100 --> 00:15:45.760
the answer in linear
time with enough work.

00:15:48.400 --> 00:15:50.680
For non orthogonal
though, it's open

00:15:50.680 --> 00:15:52.880
whether you can do this
in polynomial time.

00:15:52.880 --> 00:15:54.693
Maybe it's NP-hard, actually.

00:15:54.693 --> 00:15:55.234
I don't know.

00:16:05.960 --> 00:16:08.490
That's all I want
to say about span.

00:16:08.490 --> 00:16:09.785
Next, we go to flattening.

00:16:20.550 --> 00:16:22.640
The first question
about flattening,

00:16:22.640 --> 00:16:24.884
and the main one
we'll talk about here

00:16:24.884 --> 00:16:26.550
until we get to flat
state connectivity,

00:16:26.550 --> 00:16:32.740
is does a fixed angle chain
have a flat state at all?

00:16:32.740 --> 00:16:35.880
Can you even draw it in
the plane without crossing?

00:16:35.880 --> 00:16:40.480
So we're restricted here to
have no self intersections.

00:16:40.480 --> 00:16:47.180
We want flat state,
no self intersection.

00:16:50.812 --> 00:16:53.270
Then there would be a question
of given some configuration,

00:16:53.270 --> 00:16:55.660
can I actually continuously
get to a flat state?

00:16:55.660 --> 00:16:58.650
But the simplest question
is ignore getting there.

00:16:58.650 --> 00:17:01.140
Just, is there a flat state?

00:17:01.140 --> 00:17:04.290
And this problem is NP-hard.

00:17:04.290 --> 00:17:06.880
Again, Mike Soss and his
advisor Godfried Toussaint.

00:17:09.717 --> 00:17:11.800
It's a little more
complicated, but it's basically

00:17:11.800 --> 00:17:15.280
the same idea as that very
simple proof, which was just

00:17:15.280 --> 00:17:20.400
to map integers to a little
zigzag staircase here.

00:17:20.400 --> 00:17:23.554
So the goal is to
force x to end up

00:17:23.554 --> 00:17:25.470
being-- the two endpoints
of the green curve--

00:17:25.470 --> 00:17:26.480
to be aligned with each other.

00:17:26.480 --> 00:17:28.030
That will exist if
and only if there

00:17:28.030 --> 00:17:30.850
is a partition of
given integers.

00:17:30.850 --> 00:17:33.080
And there's all this
infrastructure that's

00:17:33.080 --> 00:17:37.100
sort of-- there's little
lock here and a key,

00:17:37.100 --> 00:17:39.470
and some structure on the left.

00:17:39.470 --> 00:17:43.990
Basically forces the
picture to look like that.

00:17:43.990 --> 00:17:46.200
So the first claim is
that the black stuff

00:17:46.200 --> 00:17:47.510
is basically unique.

00:17:47.510 --> 00:17:49.150
I think there's one
global reflection

00:17:49.150 --> 00:17:51.290
you can do that doesn't
affect anything.

00:17:51.290 --> 00:17:53.270
But you try any of
the other flips.

00:17:53.270 --> 00:17:55.190
Again, we're restricted
to flat states here.

00:17:55.190 --> 00:17:57.470
So there's only sort of a
bounded number of things

00:17:57.470 --> 00:17:59.760
you can do, a finite number
of things you can do.

00:17:59.760 --> 00:18:01.890
You try all of them,
they self intersect.

00:18:01.890 --> 00:18:03.980
So the black thing
is basically forced,

00:18:03.980 --> 00:18:06.050
and it forces the
endpoint-- this endpoint

00:18:06.050 --> 00:18:08.420
x-- from the black
side to be aligned

00:18:08.420 --> 00:18:10.970
with this very narrow spike.

00:18:10.970 --> 00:18:12.740
And because the
angles are preserved,

00:18:12.740 --> 00:18:14.240
that red guy's going
to be vertical.

00:18:14.240 --> 00:18:16.320
It can't go down
so it must go up.

00:18:16.320 --> 00:18:19.530
And so only if this thing is
aligned in the center, aligned

00:18:19.530 --> 00:18:21.770
with x-- in other
words, this problem

00:18:21.770 --> 00:18:26.580
has a partition-- will
this have a flat state.

00:18:26.580 --> 00:18:28.890
So it's not the most
exciting example.

00:18:28.890 --> 00:18:31.620
This is only a weak
NP-hardness proof.

00:18:31.620 --> 00:18:33.450
Lots of interesting
questions still

00:18:33.450 --> 00:18:37.950
open here, like if all the
links are the same, if they're

00:18:37.950 --> 00:18:41.270
all equal, then we don't know.

00:18:41.270 --> 00:18:43.760
Or if all the links are
even polynomially bounded,

00:18:43.760 --> 00:18:46.390
this needs really, really long
lengths verses really, really

00:18:46.390 --> 00:18:50.640
tiny links exponentially--
exponential in ratio.

00:18:50.640 --> 00:18:53.080
All these problems are open.

00:18:53.080 --> 00:18:54.680
And that's flattening.

00:18:54.680 --> 00:18:58.657
So we're going very quickly
because there isn't-- well,

00:18:58.657 --> 00:19:00.490
partly because I'm more
excited about this--

00:19:00.490 --> 00:19:03.420
but there's more work
in these two parts.

00:19:03.420 --> 00:19:05.220
So I'm going to focus on that.

00:19:05.220 --> 00:19:07.890
Next topic is flat
state connectivity.

00:19:21.540 --> 00:19:24.870
So the idea is to think
about the configuration

00:19:24.870 --> 00:19:28.272
space of these fixed
angle chains, let's say.

00:19:28.272 --> 00:19:29.730
And we kind of know
that it's going

00:19:29.730 --> 00:19:31.980
to be disconnected because
there are knitting needles,

00:19:31.980 --> 00:19:33.320
there are nasty things.

00:19:33.320 --> 00:19:36.505
So there's maybe various
connective components.

00:19:40.410 --> 00:19:44.475
But let's say that we really
care about flat states.

00:19:47.590 --> 00:19:51.080
And the question is, are
they connected to each other?

00:19:51.080 --> 00:19:53.350
So in other words, do
all the flat states--

00:19:53.350 --> 00:19:55.940
mark them with x's--
do they all appear?

00:19:55.940 --> 00:19:57.330
There's only finitely many.

00:19:57.330 --> 00:19:59.445
So configurations,
there's this continuum

00:19:59.445 --> 00:20:02.420
that there are these messy
blobs, semi algebraic sets.

00:20:02.420 --> 00:20:04.885
The flat states, those
are discrete things.

00:20:04.885 --> 00:20:06.260
Because we have
fixed angles, you

00:20:06.260 --> 00:20:07.737
can flip or not flip every edge.

00:20:07.737 --> 00:20:09.320
So [INAUDIBLE] most
exponentially many

00:20:09.320 --> 00:20:11.300
of them, so finite.

00:20:11.300 --> 00:20:12.930
Are they all in one component?

00:20:12.930 --> 00:20:16.400
So I can get-- if I pick two
of my favorite flat states,

00:20:16.400 --> 00:20:18.090
there's a path between them?

00:20:18.090 --> 00:20:21.560
Or are some of them in
multiple components?

00:20:21.560 --> 00:20:23.785
So in this case, we call
it flat state disconnected.

00:20:27.730 --> 00:20:32.530
And if they're all like this,
we call it flat state connected.

00:20:32.530 --> 00:20:35.420
And we'd just like to
know which chains, which

00:20:35.420 --> 00:20:39.050
fixed angle trees, whatever,
are flat state connected

00:20:39.050 --> 00:20:41.340
versus flat state disconnected.

00:20:41.340 --> 00:20:44.610
I would say, the
big open problem

00:20:44.610 --> 00:20:52.110
here is every fixed angle
chain, open chain flat state

00:20:52.110 --> 00:20:53.572
connected?

00:20:53.572 --> 00:20:54.910
That is still open.

00:20:54.910 --> 00:21:01.220
We have lots of results
in that direction.

00:21:01.220 --> 00:21:03.620
So the top four results
are about open chains,

00:21:03.620 --> 00:21:05.510
but they have an
extra constraint.

00:21:05.510 --> 00:21:08.730
For example, open chains that
have a monotone configuration,

00:21:08.730 --> 00:21:10.520
like the staircase.

00:21:10.520 --> 00:21:14.440
Those are flat state connected.

00:21:14.440 --> 00:21:17.210
In fact, whenever the
angles between the edges

00:21:17.210 --> 00:21:22.250
are either orthogonal
or obtuse, then they're

00:21:22.250 --> 00:21:24.030
flat state connected.

00:21:24.030 --> 00:21:26.400
When the angles are acute,
we're not really sure.

00:21:26.400 --> 00:21:29.760
If all the angles are equal
and acute, then we can do it.

00:21:29.760 --> 00:21:33.090
But if they're different
and acute, we don't know.

00:21:33.090 --> 00:21:36.310
Unless the edges
are all unit length

00:21:36.310 --> 00:21:39.210
and the angles are in this
funny range, then we can do it.

00:21:39.210 --> 00:21:42.020
So there's all these
special cases we can solve.

00:21:42.020 --> 00:21:45.770
The most relevant to proteins
is actually obtuse chains,

00:21:45.770 --> 00:21:48.470
so we've solved sort
of the main problem

00:21:48.470 --> 00:21:50.910
with this second result.

00:21:50.910 --> 00:21:52.680
But there's a natural
theoretical question

00:21:52.680 --> 00:21:55.970
here is, are all open
chains flat state connected

00:21:55.970 --> 00:21:57.590
or do we get disconnectivity?

00:21:57.590 --> 00:22:00.100
I will show you that-- I'll
show the orthogonal case

00:22:00.100 --> 00:22:01.692
in a little bit.

00:22:01.692 --> 00:22:03.900
We can do some stuff if you
have multiple chains that

00:22:03.900 --> 00:22:07.100
are attached to some
blob like a cell.

00:22:07.100 --> 00:22:13.490
Closed chains is a little
bit-- for disconnected,

00:22:13.490 --> 00:22:16.970
we don't have very interesting
examples, I would say.

00:22:16.970 --> 00:22:18.770
This is funny because
locked examples

00:22:18.770 --> 00:22:22.330
are easy to come by but flat
state disconnected examples are

00:22:22.330 --> 00:22:25.550
little trickier because
flat is so constrained.

00:22:25.550 --> 00:22:29.320
So let me just show
you these examples.

00:22:29.320 --> 00:22:33.740
This is what we call a partially
rigid fixed angle tree.

00:22:33.740 --> 00:22:36.510
So not only are
the angles fixed,

00:22:36.510 --> 00:22:41.120
but also the black
edges are not-- in fact,

00:22:41.120 --> 00:22:43.650
only the blue edges here
are allowed to spin.

00:22:43.650 --> 00:22:45.680
Everything else is held rigid.

00:22:45.680 --> 00:22:49.310
So these arms are somehow forced
to be in exactly that geometry.

00:22:49.310 --> 00:22:52.210
I can spin it
around this edge, so

00:22:52.210 --> 00:22:54.580
spin it up into 3D, for example.

00:22:54.580 --> 00:22:59.390
These are two different flat
states of the same linkage.

00:22:59.390 --> 00:23:02.160
The only difference between
these two-- I haven't rotated

00:23:02.160 --> 00:23:05.160
or anything-- is that I've
taken each of these arms

00:23:05.160 --> 00:23:08.740
and flipped it
around a blue axis.

00:23:08.740 --> 00:23:10.880
If I do all four of them,
I would get this picture.

00:23:10.880 --> 00:23:14.570
But the claim is, you cannot do
that without self intersection.

00:23:14.570 --> 00:23:17.170
The intuition is, when
there aren't very-- oh,

00:23:17.170 --> 00:23:20.152
one other thing that makes
it slightly more interesting.

00:23:20.152 --> 00:23:22.610
It's weird to say, well why
did you force some of the edges

00:23:22.610 --> 00:23:24.940
to be rigid and not others?

00:23:24.940 --> 00:23:28.150
One way to force that is
to use a general graph.

00:23:28.150 --> 00:23:30.350
If you add some extra
edges to sort of brace this

00:23:30.350 --> 00:23:32.750
and all these angles are
fixed, then this linkage

00:23:32.750 --> 00:23:35.340
will behave exactly
like that one.

00:23:35.340 --> 00:23:38.560
So that at least is
somewhat more natural,

00:23:38.560 --> 00:23:43.448
although what we really care
about are chains, maybe trees.

00:23:43.448 --> 00:23:44.822
But we don't know
whether there's

00:23:44.822 --> 00:23:48.450
a-- we also don't know
whether all fixed angle

00:23:48.450 --> 00:23:50.470
trees are flat state connected.

00:23:50.470 --> 00:23:54.100
These are the worst
examples we know.

00:23:54.100 --> 00:23:57.920
Let me give you an idea
of why it doesn't work.

00:23:57.920 --> 00:24:01.940
This is a little animation
of just a couple of moves

00:24:01.940 --> 00:24:06.690
attempted, and it's just
going cycle through that.

00:24:06.690 --> 00:24:12.910
And these are some static images
of the same kind of thing.

00:24:12.910 --> 00:24:15.480
So the intuition is the
following-- you have four arms.

00:24:15.480 --> 00:24:19.250
You have two sides to the
plane, there's up and down.

00:24:19.250 --> 00:24:23.000
The four arms and two
sides, at least two of them

00:24:23.000 --> 00:24:24.780
are going to have to
go to the same side.

00:24:24.780 --> 00:24:27.020
The best you can do is two
and two, or three and one.

00:24:27.020 --> 00:24:29.640
But in either case,
you have two sides

00:24:29.640 --> 00:24:32.700
go to the-- two arms
that go on the same side.

00:24:32.700 --> 00:24:35.400
Now, it could be,
like in this image,

00:24:35.400 --> 00:24:37.100
that they're opposite arms.

00:24:37.100 --> 00:24:41.260
So there's this arm here
and there's this arm here.

00:24:41.260 --> 00:24:44.260
So they're connected
by a 180 degree angle.

00:24:44.260 --> 00:24:46.460
And those guys,
when they fold up,

00:24:46.460 --> 00:24:50.160
actually these edges will
just hit each other dead on.

00:24:50.160 --> 00:24:53.395
So that's kind of obvious
from a geometric standpoint.

00:24:53.395 --> 00:24:55.520
Maybe you call it cheating
for them to hit dead on.

00:24:55.520 --> 00:24:57.978
You can twiddle the edge lengths
so that they will properly

00:24:57.978 --> 00:25:01.060
intersect without
dead on collision,

00:25:01.060 --> 00:25:04.040
without being
degenerate basically.

00:25:04.040 --> 00:25:05.624
The alternative
is that-- and this

00:25:05.624 --> 00:25:07.290
is a little harder
to see geometrically,

00:25:07.290 --> 00:25:13.450
and that's why we drew that
animation-- is that you have

00:25:13.450 --> 00:25:16.340
one arm and you have an adjacent
arm connected by a 90 degree

00:25:16.340 --> 00:25:17.410
angle.

00:25:17.410 --> 00:25:19.560
Now here, there's clearly
some collision going on.

00:25:19.560 --> 00:25:21.890
And if you happen to fold
it up 90 degrees like that

00:25:21.890 --> 00:25:24.170
and then fold the other guy,
obviously you get stuck.

00:25:24.170 --> 00:25:26.090
But maybe you fold it a
little bit and the other guy

00:25:26.090 --> 00:25:27.790
goes a little bit
more and there could

00:25:27.790 --> 00:25:30.650
be some dance between those two
degrees of freedom, those two

00:25:30.650 --> 00:25:34.410
arms, that somehow gets
them both to pass over

00:25:34.410 --> 00:25:35.290
to the other side.

00:25:35.290 --> 00:25:36.456
It's obviously not possible.

00:25:36.456 --> 00:25:37.830
How do you prove it?

00:25:37.830 --> 00:25:41.900
Well, you could prove it with
topology-- knot theory or link

00:25:41.900 --> 00:25:43.330
theory.

00:25:43.330 --> 00:25:45.390
So it's a very cute proof.

00:25:45.390 --> 00:25:48.650
You start with-- so
here's the full example,

00:25:48.650 --> 00:25:51.010
but I've highlighted
the two arms in red

00:25:51.010 --> 00:25:52.990
that are going to move.

00:25:52.990 --> 00:25:55.660
And I imagine
connecting the endpoints

00:25:55.660 --> 00:25:59.720
of each arm with these
little blue ropes

00:25:59.720 --> 00:26:01.870
underneath the plane.

00:26:01.870 --> 00:26:03.370
They're both going
on the same side.

00:26:03.370 --> 00:26:05.286
Let's say they somehow
pass through each other

00:26:05.286 --> 00:26:06.310
on the top side.

00:26:06.310 --> 00:26:08.220
Then I'm free to connect
stuff on the bottom,

00:26:08.220 --> 00:26:10.400
and I shouldn't
collide with that.

00:26:10.400 --> 00:26:12.930
So if somehow,
both of these guys

00:26:12.930 --> 00:26:18.350
flip over-- so arm on
the left, A3 flips over.

00:26:18.350 --> 00:26:21.080
A3 stays where it
is but now the arm

00:26:21.080 --> 00:26:24.580
is on the top, the north side
instead of the south side.

00:26:24.580 --> 00:26:30.490
And the other guy, from B
to B3, used to go like this

00:26:30.490 --> 00:26:31.800
and now it goes like this.

00:26:31.800 --> 00:26:34.560
If that happens somehow,
then these ropes

00:26:34.560 --> 00:26:36.450
could remain intact
during that whole motion.

00:26:36.450 --> 00:26:41.184
On the top, you have two closed
loops that are not interlocked.

00:26:41.184 --> 00:26:42.850
On the bottom, you
have two closed loops

00:26:42.850 --> 00:26:43.747
that are interlocked.

00:26:43.747 --> 00:26:45.580
So there's no way to
get from there to there

00:26:45.580 --> 00:26:47.050
without colliding somewhere.

00:26:47.050 --> 00:26:48.970
The blue stuff didn't
move, so the red stuff

00:26:48.970 --> 00:26:50.610
must have collided.

00:26:50.610 --> 00:26:52.770
So even just topologically,
you are screwed.

00:26:56.310 --> 00:26:59.130
That is their only
negative example.

00:26:59.130 --> 00:27:02.420
Lots of interesting
open questions here.

00:27:02.420 --> 00:27:06.690
On the positive
side, let me show you

00:27:06.690 --> 00:27:09.210
for orthogonal chains--
and the same algorithm

00:27:09.210 --> 00:27:11.300
works for obtuse
chains, all the angles

00:27:11.300 --> 00:27:15.310
are obtuse-- how they
are flat state connected.

00:27:15.310 --> 00:27:17.910
So in order to show it's
flat state connected,

00:27:17.910 --> 00:27:20.260
I want to think
about two flat states

00:27:20.260 --> 00:27:22.500
and show that I
can fold from one

00:27:22.500 --> 00:27:27.620
to the other via some
intermediate 3D stuff.

00:27:27.620 --> 00:27:30.650
Let's start with one
of the flat states.

00:27:30.650 --> 00:27:32.260
So it's orthogonal.

00:27:32.260 --> 00:27:34.959
So in two dimensions,
all the edges

00:27:34.959 --> 00:27:36.250
will be horizontal or vertical.

00:27:36.250 --> 00:27:39.929
In 3D, they can kind of be in
many, many different angles,

00:27:39.929 --> 00:27:41.345
many different
dihedral triangles.

00:27:41.345 --> 00:27:43.500
In 2D, it's pretty simple.

00:27:43.500 --> 00:27:46.006
And all I need to do is
sort of pick up that chain,

00:27:46.006 --> 00:27:48.130
and I'm going to try to
pick it up into a staircase

00:27:48.130 --> 00:27:49.750
because there's
only one staircase.

00:27:49.750 --> 00:27:52.690
If I can make it a
staircase, I make

00:27:52.690 --> 00:27:55.010
flat configuration A a
staircase, flat configuration B

00:27:55.010 --> 00:27:58.230
a staircase, and just
FedEx in the middle.

00:27:58.230 --> 00:28:00.300
Once they're both
staircases, I play one motion

00:28:00.300 --> 00:28:03.279
and the other one backwards,
get from anywhere to anywhere.

00:28:03.279 --> 00:28:04.320
So here's all you do you.

00:28:04.320 --> 00:28:06.170
You take the first
edge and you just

00:28:06.170 --> 00:28:13.126
rotate it up to the red line A.
And then you take the next edge

00:28:13.126 --> 00:28:14.500
and you take both
of those edges,

00:28:14.500 --> 00:28:16.930
and you just rotate
them like this,

00:28:16.930 --> 00:28:21.130
so you get that little
2-step staircase.

00:28:21.130 --> 00:28:22.950
Now I'd really like
to pick up this edge,

00:28:22.950 --> 00:28:24.750
but I want to
first get these two

00:28:24.750 --> 00:28:26.940
edges in a plane with that edge.

00:28:26.940 --> 00:28:32.740
So I rotate this flag over to
the left, I get those two guys.

00:28:32.740 --> 00:28:35.750
And now they're in a plane with
this, and I just lift that up.

00:28:35.750 --> 00:28:38.200
Then I'm going to
flip, then rotate up.

00:28:38.200 --> 00:28:40.600
Flip, rotate, flip, rotate.

00:28:40.600 --> 00:28:42.810
Here's some more examples.

00:28:42.810 --> 00:28:48.150
So if at this point, I have
this staircase-- sorry,

00:28:48.150 --> 00:28:52.650
I guess originally I have
from V3 to D up there.

00:28:52.650 --> 00:28:56.310
it's not in plane with this guy,
so I just rotate it like that.

00:28:56.310 --> 00:28:58.530
I'm spinning around this edge.

00:28:58.530 --> 00:29:01.790
So now I have from
B3 to #, and then I

00:29:01.790 --> 00:29:04.510
rotate it up along
that green arc.

00:29:04.510 --> 00:29:07.785
And I get a bigger
staircase above the chain

00:29:07.785 --> 00:29:09.410
and because everything's
staying above,

00:29:09.410 --> 00:29:10.950
it will never
penetrate the plane

00:29:10.950 --> 00:29:12.690
and will never hit anybody else.

00:29:12.690 --> 00:29:14.740
And I'm building a
staircase by design.

00:29:14.740 --> 00:29:16.550
I always rotate this--
there's actually

00:29:16.550 --> 00:29:18.500
two ways I could be in
plane-- but I always

00:29:18.500 --> 00:29:20.400
rotate it so that when
I pick an edge up,

00:29:20.400 --> 00:29:22.280
it'll be in a staircase.

00:29:22.280 --> 00:29:23.940
So this is actually really easy.

00:29:23.940 --> 00:29:27.310
And slight generalization
is to obtuse chains,

00:29:27.310 --> 00:29:34.336
then instead of making a
staircase, we make a monotone.

00:29:34.336 --> 00:29:35.455
Let me get this right.

00:29:38.580 --> 00:29:40.440
Yeah, sum z monotone state.

00:29:40.440 --> 00:29:43.550
So it goes monotone and z,
out of the plane, that's

00:29:43.550 --> 00:29:45.400
enough to avoid
collision, and you

00:29:45.400 --> 00:29:47.100
get a canonical configuration.

00:29:47.100 --> 00:29:51.620
Also, if you have acute angles
but all the angles are equal,

00:29:51.620 --> 00:29:54.240
then there's a
natural conical state,

00:29:54.240 --> 00:29:56.320
which is just like a
compressed staircase.

00:29:56.320 --> 00:29:57.830
And that will work here, too.

00:29:57.830 --> 00:29:58.902
That takes more effort.

00:29:58.902 --> 00:30:00.110
That was in a separate paper.

00:30:03.000 --> 00:30:06.140
But big open question is,
chains with arbitrary angles.

00:30:06.140 --> 00:30:07.620
We have no idea.

00:30:07.620 --> 00:30:11.176
It is very hard to do
an operation like this.

00:30:11.176 --> 00:30:12.550
Wow, we are burning
through this.

00:30:12.550 --> 00:30:13.140
This is fun.

00:30:15.670 --> 00:30:22.875
So the next topic is
about locked chains.

00:30:22.875 --> 00:30:24.860
Now as I said, you can
take a knitting needles

00:30:24.860 --> 00:30:28.580
example, which has five edges.

00:30:34.011 --> 00:30:35.510
And that will still
be locked if you

00:30:35.510 --> 00:30:37.840
force the angles to be
fixed because it was locked

00:30:37.840 --> 00:30:39.910
without the angles being fixed.

00:30:39.910 --> 00:30:44.540
Now, it required a length
ratio of 3:1, I think.

00:30:44.540 --> 00:30:46.980
This edge had to be longer
than the sum of those three.

00:30:50.440 --> 00:30:55.230
So let me put down
some open problems.

00:30:55.230 --> 00:31:00.180
So you may recall in the
case of universal chains--

00:31:00.180 --> 00:31:12.660
universal joints, I should
say-- the big open question was,

00:31:12.660 --> 00:31:16.250
can you lock a
universal joint 3D chain

00:31:16.250 --> 00:31:19.860
with unit edge lengths?

00:31:19.860 --> 00:31:24.900
So, equilateral-- every
edge is the same length.

00:31:24.900 --> 00:31:27.170
Is there a locked chain
like the knitting needles

00:31:27.170 --> 00:31:28.795
when all the edge
lengths are the same.

00:31:28.795 --> 00:31:31.420
And one of the motivations
for that is in proteins,

00:31:31.420 --> 00:31:35.390
the edge lengths are all
within like 50% of each other.

00:31:35.390 --> 00:31:38.900
So it's pretty
natural, of course.

00:31:38.900 --> 00:31:44.316
We don't have universal
joints with proteins.

00:31:44.316 --> 00:31:45.440
We have fixed angle joints.

00:31:48.560 --> 00:31:52.670
So the big open problem
for fixed angle joints--

00:31:52.670 --> 00:32:05.660
I guess we'll do this in parts--
is there a locked 3D fixed

00:32:05.660 --> 00:32:24.600
angle chain that's equilateral?

00:32:24.600 --> 00:32:26.200
I'm going to add
some conditions here.

00:32:30.910 --> 00:32:32.560
So that's the first
natural question.

00:32:32.560 --> 00:32:34.780
Knitting needles
doesn't suffice.

00:32:34.780 --> 00:32:36.900
We need a 3:1 length
ratio, as far as we know.

00:32:43.100 --> 00:32:45.180
Turns out that question's
not very interesting.

00:32:45.180 --> 00:32:48.600
I need to do slightly
nonlinear editing here.

00:32:48.600 --> 00:32:50.990
So you take your
knitting needles example,

00:32:50.990 --> 00:32:53.920
and you just subdivide the edges
into lots of little tiny bars.

00:32:53.920 --> 00:32:55.500
It doesn't have to
be this extreme.

00:32:55.500 --> 00:32:57.660
You could not subdivide
these edges at all,

00:32:57.660 --> 00:32:59.350
and make these
guys subdivide them

00:32:59.350 --> 00:33:01.350
into like three or four parts.

00:33:01.350 --> 00:33:04.310
Because the angles
are fixed, these guys

00:33:04.310 --> 00:33:06.360
act as a single [INAUDIBLE].

00:33:06.360 --> 00:33:08.010
There's really no difference.

00:33:08.010 --> 00:33:09.920
Maybe you make a
slight curve there

00:33:09.920 --> 00:33:14.100
and then they can bend a little
bit, but really not much.

00:33:14.100 --> 00:33:17.070
So if you just say, oh, I
want it to be unit length.

00:33:17.070 --> 00:33:20.720
I don't constrain what the
angles are but I fix them,

00:33:20.720 --> 00:33:23.570
then it's trivial to come
up with locked examples.

00:33:23.570 --> 00:33:27.000
So that's not very interesting.

00:33:27.000 --> 00:33:29.380
What if I make it not
only equilateral--

00:33:29.380 --> 00:33:31.740
the lengths are the same--
if I make it equiangular.

00:33:37.850 --> 00:33:41.750
Because, again, in proteins,
all the angles are similar.

00:33:41.750 --> 00:33:45.150
They're around 110, 108,
something like that.

00:33:45.150 --> 00:33:48.750
They're all pretty close,
I think within 10 to 20%

00:33:48.750 --> 00:33:50.450
of each other.

00:33:50.450 --> 00:33:52.580
Well, there's also
a locked example.

00:33:52.580 --> 00:33:56.120
And just to show you how
research was done back

00:33:56.120 --> 00:34:00.790
at the turn of the century,
this is pre-web 2.0, pre-Ajax

00:34:00.790 --> 00:34:02.380
and all that fancy stuff.

00:34:02.380 --> 00:34:04.800
We used Ascii Art.

00:34:04.800 --> 00:34:07.050
Email was the tool of choice.

00:34:07.050 --> 00:34:12.780
I know it's hard to imagine
a time-- 2002, so long ago.

00:34:12.780 --> 00:34:14.110
And I tracked this down.

00:34:14.110 --> 00:34:16.889
This is the original
claim it looks--

00:34:16.889 --> 00:34:18.630
we call this the
crossed legs example

00:34:18.630 --> 00:34:21.300
because it's like two legs
crossed around each other.

00:34:21.300 --> 00:34:24.760
And this is the first time
we thought, oh, maybe it

00:34:24.760 --> 00:34:26.210
could be done, unit length.

00:34:26.210 --> 00:34:29.300
This is Stefan Langerman.

00:34:29.300 --> 00:34:32.400
And here, for the
first time ever--

00:34:32.400 --> 00:34:35.270
this is not the first model,
but this is the first photograph

00:34:35.270 --> 00:34:39.420
of any model I'm aware of-- this
is the crossed legs example.

00:34:39.420 --> 00:34:41.590
This is made with a
construction toy that

00:34:41.590 --> 00:34:44.860
used to be sold around here
but is no longer in production.

00:34:44.860 --> 00:34:46.290
So they're pretty hard to get.

00:34:46.290 --> 00:34:50.090
It's straws-- nicely colored
straws-- and the cool part

00:34:50.090 --> 00:34:52.830
are these connectors.

00:34:52.830 --> 00:34:55.239
So the connectors force
particular angles.

00:34:55.239 --> 00:34:57.800
In this case, every
angle is 45 degrees.

00:34:57.800 --> 00:35:00.260
So this is equiangular
and equilateral

00:35:00.260 --> 00:35:02.560
because all the straws, I'm
told, are the same length.

00:35:02.560 --> 00:35:04.410
That's how they're sold.

00:35:04.410 --> 00:35:07.850
And you can do edge spins.

00:35:07.850 --> 00:35:11.640
Whoops, that's called cheating.

00:35:11.640 --> 00:35:15.400
It's not totally obvious
that this is locked.

00:35:15.400 --> 00:35:18.680
The problem with the model
is that the edges can bend.

00:35:18.680 --> 00:35:26.060
But if you treat it properly
and only spin around the edges,

00:35:26.060 --> 00:35:28.840
then you're stuck.

00:35:28.840 --> 00:35:32.260
Now, there is one
thing you can do.

00:35:32.260 --> 00:35:39.600
See if I-- yeah, like this.

00:35:39.600 --> 00:35:41.140
So here, I'm almost in a plane.

00:35:41.140 --> 00:35:44.820
I've got the purple edge
right against the pink one.

00:35:44.820 --> 00:35:46.070
Easier to see from that angle?

00:35:46.070 --> 00:35:47.370
I don't know.

00:35:47.370 --> 00:35:51.230
So here, this guy can
come out and this guy

00:35:51.230 --> 00:35:54.162
can barely go on the edge.

00:35:54.162 --> 00:35:56.370
So actually, this doesn't
quite work for equilateral.

00:35:56.370 --> 00:35:57.720
It works for one plus epsilon.

00:35:57.720 --> 00:36:01.420
That's why I added these
little nubs at the end.

00:36:01.420 --> 00:36:04.090
So if they're all
exactly equal length

00:36:04.090 --> 00:36:07.930
and you allow just
abrasion of the endpoint,

00:36:07.930 --> 00:36:09.550
then this could go
around like that

00:36:09.550 --> 00:36:11.950
and then you'd be unlocked.

00:36:11.950 --> 00:36:14.090
But if you just add
slightly-- either

00:36:14.090 --> 00:36:16.310
you change the angles
to be not quite equal,

00:36:16.310 --> 00:36:18.770
so make this a little smaller,
or you make the lengths

00:36:18.770 --> 00:36:21.159
a little bit longer
at the ends-- then

00:36:21.159 --> 00:36:22.200
the claim is it's locked.

00:36:22.200 --> 00:36:24.116
We don't actually have
a formal proof of this.

00:36:24.116 --> 00:36:26.750
We're just remembering, hey, we
should probably write this up.

00:36:26.750 --> 00:36:28.208
I was talking to
Stefan last night.

00:36:32.060 --> 00:36:34.260
So someday we'll prove
that this is locked.

00:36:34.260 --> 00:36:35.760
But it certainly looks like it.

00:36:35.760 --> 00:36:38.540
So this isn't open yet.

00:36:38.540 --> 00:36:41.180
I mean, modulo the
details of that proof.

00:36:41.180 --> 00:36:43.700
Equilateral and
equiangular seems

00:36:43.700 --> 00:36:46.370
easy to lock with
fixed angle chains.

00:36:46.370 --> 00:36:51.270
In fact, even easier, this
example only has four edges.

00:36:51.270 --> 00:36:54.060
So even less than
the knitting needles.

00:36:54.060 --> 00:37:01.410
Fixed angles make for
complicated motions, I guess.

00:37:01.410 --> 00:37:03.250
Make it hard to unlock things.

00:37:03.250 --> 00:37:05.140
So I need to add
one more constraint,

00:37:05.140 --> 00:37:08.780
and the constraint is obtuse.

00:37:08.780 --> 00:37:11.650
So again, all of
these properties

00:37:11.650 --> 00:37:15.170
are enjoyed by proteins.

00:37:15.170 --> 00:37:17.520
Protein backbones have
all these properties.

00:37:17.520 --> 00:37:20.430
Even if you looked
at fixed angle trees,

00:37:20.430 --> 00:37:22.610
is there something like
this that's locked?

00:37:22.610 --> 00:37:25.070
And now, we don't know.

00:37:25.070 --> 00:37:26.790
And this seems quite tricky.

00:37:26.790 --> 00:37:29.319
I guess the intuition is that
obtuse-- and usually we think

00:37:29.319 --> 00:37:30.985
about orthogonal,
just cause it's easier

00:37:30.985 --> 00:37:32.480
to draw the
pictures, but reality

00:37:32.480 --> 00:37:37.010
is more like 108 degrees--
the conjecture is

00:37:37.010 --> 00:37:41.062
obtuse fixed angle chains behave
kind of like universal joints.

00:37:41.062 --> 00:37:42.520
And with universal
joints, we don't

00:37:42.520 --> 00:37:45.370
know whether
equilateral is enough.

00:37:45.370 --> 00:37:49.026
So it's tricky.

00:37:49.026 --> 00:37:51.224
Yeah, question.

00:37:51.224 --> 00:37:52.640
AUDIENCE: In the
previous example,

00:37:52.640 --> 00:37:57.697
you showed the ribbon thing--

00:37:57.697 --> 00:37:58.780
PROFESSOR: The subdivided.

00:37:58.780 --> 00:38:01.238
AUDIENCE: Subdivided into a
bunch of little interconnecting

00:38:01.238 --> 00:38:02.098
pieces.

00:38:02.098 --> 00:38:07.000
What if you, instead,
made your ribbon lengths

00:38:07.000 --> 00:38:13.365
basically a bunch of little
unit obtuse angle connectors,

00:38:13.365 --> 00:38:16.850
and then when you hit
the big terms it's just

00:38:16.850 --> 00:38:18.540
obtuse, obtuse, obtuse, obtuse.

00:38:18.540 --> 00:38:20.630
PROFESSOR: Yeah, you
can make this example

00:38:20.630 --> 00:38:21.630
be entirely obtuse.

00:38:21.630 --> 00:38:23.040
You can make every angle obtuse.

00:38:23.040 --> 00:38:24.750
Here, you could
arc a little bit.

00:38:24.750 --> 00:38:27.550
Here, you could arc some
more, but not too sharp.

00:38:27.550 --> 00:38:29.200
And because here,
we actually know

00:38:29.200 --> 00:38:30.880
that this part can
be made a string.

00:38:30.880 --> 00:38:32.596
We don't really care
what it looks like.

00:38:32.596 --> 00:38:33.970
So you can make
it fairly obtuse.

00:38:33.970 --> 00:38:36.000
It's just that these guys
should not bend much.

00:38:36.000 --> 00:38:39.560
They have to be long no
matter how you fold them.

00:38:39.560 --> 00:38:45.890
So if you want equilateral
and obtuse, that's also easy.

00:38:45.890 --> 00:38:48.660
But to make all the
angles actually be equal,

00:38:48.660 --> 00:38:51.260
as far as we know you cannot
take that knitting needles

00:38:51.260 --> 00:38:52.202
subdivided.

00:38:52.202 --> 00:38:54.410
Make all the lengths equal,
and all the angles equal,

00:38:54.410 --> 00:38:56.370
and make them obtuse.

00:38:56.370 --> 00:38:57.300
That's open.

00:38:57.300 --> 00:38:59.040
But any two out of
the three, it's easy.

00:39:02.650 --> 00:39:05.090
Of course, in reality they're
not quite equilateral.

00:39:05.090 --> 00:39:06.690
They're not quite equiangular.

00:39:06.690 --> 00:39:07.940
But it's still open for those.

00:39:07.940 --> 00:39:09.900
If you have like a small
range for the lengths

00:39:09.900 --> 00:39:12.170
and a small range for
the angles, this is open.

00:39:12.170 --> 00:39:15.600
We pose it this way because
it's the cleanest geometrically.

00:39:15.600 --> 00:39:17.560
But the real question
you care about

00:39:17.560 --> 00:39:21.750
is when these are
fuzzy constraints.

00:39:21.750 --> 00:39:26.790
Obtuse is real, but
these guys are fuzzier.

00:39:26.790 --> 00:39:32.980
So if you think about proteins,
which fold very well in nature,

00:39:32.980 --> 00:39:36.190
there are a couple of
reasons they might fold well.

00:39:36.190 --> 00:39:39.150
We know, as far as
fixed angle chains go,

00:39:39.150 --> 00:39:41.650
it's actually quite easy
to find locked examples.

00:39:41.650 --> 00:39:45.089
And, this is somewhat
intuitive but bear with me,

00:39:45.089 --> 00:39:47.630
because they are locked examples
in this configuration space,

00:39:47.630 --> 00:39:51.860
we believe these configuration
spaces are really ugly nasty.

00:39:51.860 --> 00:39:55.430
So it would be very hard--
even if you know, oh I only

00:39:55.430 --> 00:39:58.560
need to fold something
in my component--

00:39:58.560 --> 00:40:00.120
if these guys are
highly disconnected

00:40:00.120 --> 00:40:02.040
and flat states are
all over the place,

00:40:02.040 --> 00:40:05.000
it's probably even within
this connected component,

00:40:05.000 --> 00:40:06.740
it looks really ugly.

00:40:06.740 --> 00:40:10.650
And so it's very hard to find a
path from one state to another.

00:40:10.650 --> 00:40:12.690
Probably pieced based
complete, although we

00:40:12.690 --> 00:40:15.840
don't know that for sure.

00:40:15.840 --> 00:40:16.940
But that's the intuition.

00:40:16.940 --> 00:40:19.384
Locked equals messy.

00:40:19.384 --> 00:40:21.050
When there are no
locked configurations,

00:40:21.050 --> 00:40:23.800
like carpenter's rules, we
get really nice algorithms.

00:40:23.800 --> 00:40:27.620
It's super easy to get from
state A to state B. Now,

00:40:27.620 --> 00:40:29.790
if you're nature or
you're designing nature,

00:40:29.790 --> 00:40:33.660
let's say, or you're building
your own virtual world, Second

00:40:33.660 --> 00:40:36.409
Life, and you want
to design proteins,

00:40:36.409 --> 00:40:38.200
you would like to design
them in such a way

00:40:38.200 --> 00:40:40.740
that they fold easily because
it happens all the time.

00:40:40.740 --> 00:40:44.500
Every thing that is being acted
on by our body, every living

00:40:44.500 --> 00:40:46.910
thing that we know has
tons of little proteins

00:40:46.910 --> 00:40:48.120
that are doing all the work.

00:40:48.120 --> 00:40:51.340
They are folded into their
shape and they do something.

00:40:51.340 --> 00:40:54.570
That's proteins plus
RNA, but mostly proteins.

00:40:54.570 --> 00:40:58.480
So to understand life, we
should understand proteins.

00:40:58.480 --> 00:41:02.000
Now, how to proteins
fold so well when we know

00:41:02.000 --> 00:41:04.480
there are all these
locked configurations?

00:41:04.480 --> 00:41:07.010
One possible answer is that
proteins have extra structure,

00:41:07.010 --> 00:41:09.240
namely these three
things, which somehow

00:41:09.240 --> 00:41:11.120
make it very easy to
algorithmically go

00:41:11.120 --> 00:41:16.370
from A to B. Notice I'm not
assuming anything about how

00:41:16.370 --> 00:41:21.450
proteins fold in terms of what
is the mechanism that drives

00:41:21.450 --> 00:41:25.760
them because we don't really
understand those mechanisms.

00:41:25.760 --> 00:41:28.730
There's hydrophobia, which we
don't really know how it works.

00:41:28.730 --> 00:41:35.052
So all these little forces
that we don't fully understand.

00:41:35.052 --> 00:41:36.760
We understand lots of
parts of the story,

00:41:36.760 --> 00:41:39.096
but not the whole story.

00:41:39.096 --> 00:41:41.220
And what's convenient about
these kinds of problems

00:41:41.220 --> 00:41:42.719
is you don't need
to assume anything

00:41:42.719 --> 00:41:44.746
about how it actually happens.

00:41:44.746 --> 00:41:46.620
All we're assuming is
the mechanical behavior

00:41:46.620 --> 00:41:50.140
of the proteins, and how
they could possibly fold.

00:41:50.140 --> 00:41:53.780
And the idea is if there's
locked configurations, that's

00:41:53.780 --> 00:41:56.530
probably the wrong model
because then everything's messy.

00:41:56.530 --> 00:41:58.420
Now there's also
evolution coming into play

00:41:58.420 --> 00:42:00.128
and maybe some proteins
are easy to fold,

00:42:00.128 --> 00:42:01.861
some proteins are hard to fold.

00:42:01.861 --> 00:42:03.360
That's an interesting
question which

00:42:03.360 --> 00:42:05.540
should be experimented with.

00:42:05.540 --> 00:42:08.782
But let's hope that
there's a model.

00:42:08.782 --> 00:42:09.990
Things are mutating randomly.

00:42:09.990 --> 00:42:12.570
You really like
everything to fold nicely.

00:42:12.570 --> 00:42:14.500
Maybe it's because
you have all three

00:42:14.500 --> 00:42:16.420
of these properties,
approximately,

00:42:16.420 --> 00:42:17.200
in real proteins.

00:42:19.950 --> 00:42:24.270
So general idea is that nature
has some extra constraints that

00:42:24.270 --> 00:42:27.180
make protein folding easy.

00:42:27.180 --> 00:42:29.510
Just have to figure
out what they are

00:42:29.510 --> 00:42:30.790
and why it makes them easy.

00:42:30.790 --> 00:42:32.190
Unfortunately, this is
still an open problem.

00:42:32.190 --> 00:42:34.690
If this had an algorithm, that
would be a natural candidate

00:42:34.690 --> 00:42:37.400
for what nature's doing
using its mechanical--

00:42:37.400 --> 00:42:42.420
or using it's energies
and forces, and so on.

00:42:42.420 --> 00:42:44.450
This would be a rather
unsatisfactory ending

00:42:44.450 --> 00:42:49.570
if this was-- if the
climax was an open problem.

00:42:49.570 --> 00:42:50.640
We have a theorem too.

00:42:53.150 --> 00:42:55.615
And this is what I'll
cover in most detail.

00:43:00.350 --> 00:43:04.620
And it's a paper called
producible protein chains.

00:43:04.620 --> 00:43:09.590
Protein chains just means fixed
angle chains, open chains.

00:43:09.590 --> 00:43:13.680
And the idea is well, yeah,
there are these constraints

00:43:13.680 --> 00:43:15.160
or there are these
extra features.

00:43:15.160 --> 00:43:16.576
We don't know how
to exploit them,

00:43:16.576 --> 00:43:18.300
so let's not even
worry about them.

00:43:18.300 --> 00:43:20.410
Suppose they don't even exist.

00:43:20.410 --> 00:43:23.525
Maybe I'm going to assume
obtuse, but none of the others.

00:43:26.220 --> 00:43:30.030
There's another
constraint in how proteins

00:43:30.030 --> 00:43:32.495
fold, or really how
proteins are created.

00:43:35.650 --> 00:43:38.990
They're created by a machine,
a molecular machine made up

00:43:38.990 --> 00:43:43.632
of a whole bunch of proteins
and RNA, called the ribosome.

00:43:43.632 --> 00:43:44.980
You may have heard of.

00:43:44.980 --> 00:43:48.520
It translates messenger
RNA into proteins.

00:43:48.520 --> 00:43:51.300
So there's some mRNA
around here, maybe.

00:43:51.300 --> 00:43:53.300
Don't know exactly how
this machine works.

00:43:53.300 --> 00:43:56.120
But there are actually very
accurate three dimensional

00:43:56.120 --> 00:43:58.370
reconstructions of the ribosome.

00:43:58.370 --> 00:43:59.970
With no copyright
free images, you're

00:43:59.970 --> 00:44:02.094
going to have to-- there's
a link on the slide that

00:44:02.094 --> 00:44:07.240
goes to the cool and 3D
models of the ribosome,

00:44:07.240 --> 00:44:08.320
with a slice away.

00:44:08.320 --> 00:44:11.010
So you can see there's
a tunnel down here,

00:44:11.010 --> 00:44:13.740
and the protein get
sort of created here.

00:44:13.740 --> 00:44:15.690
The background
gets created here.

00:44:15.690 --> 00:44:17.550
And it starts going
through this tunnel.

00:44:17.550 --> 00:44:19.120
There's a bend in
the tunnel around

00:44:19.120 --> 00:44:23.340
here, where it's conjectured
and an amino acid gets attached.

00:44:23.340 --> 00:44:25.910
And then it goes out the
tunnel and the protein

00:44:25.910 --> 00:44:28.460
starts spewing out here
and presumably folding

00:44:28.460 --> 00:44:29.180
at the same time.

00:44:29.180 --> 00:44:31.770
We don't really know.

00:44:31.770 --> 00:44:34.020
So this is how
proteins are created.

00:44:36.620 --> 00:44:39.030
The birds and bees,
I guess, of proteins.

00:44:39.030 --> 00:44:42.670
So what's interesting
about this is

00:44:42.670 --> 00:44:45.790
it's not like a protein
exists and then folds,

00:44:45.790 --> 00:44:48.120
which is how a lot
of people might

00:44:48.120 --> 00:44:50.499
think about it at first glance.

00:44:50.499 --> 00:44:52.540
That's the natural way to
model protein folding--

00:44:52.540 --> 00:44:55.270
start with a protein, say,
and just zigzag configuration.

00:44:55.270 --> 00:44:58.420
If it's obtuse, there's a nice
zigzag monotone configuration.

00:44:58.420 --> 00:45:00.750
Then you see what is
the best configuration

00:45:00.750 --> 00:45:02.580
I could fold into, for
some notion of best.

00:45:05.500 --> 00:45:07.500
And that's sort of what
this configuration space

00:45:07.500 --> 00:45:08.450
picture is about.

00:45:08.450 --> 00:45:10.950
It's if I already
have a protein, what

00:45:10.950 --> 00:45:13.000
configurations can
I reach by motions?

00:45:13.000 --> 00:45:14.000
And that is interesting.

00:45:14.000 --> 00:45:15.541
That's important
because you're still

00:45:15.541 --> 00:45:17.050
going to have to
reach by a motion.

00:45:17.050 --> 00:45:20.210
But, it's actually
more flexible than that

00:45:20.210 --> 00:45:23.720
because the protein could
just be partially built.

00:45:23.720 --> 00:45:26.720
The rest of the protein
hasn't been built.

00:45:26.720 --> 00:45:28.882
And it could start
folding already.

00:45:28.882 --> 00:45:30.340
It might be easier
to fold when you

00:45:30.340 --> 00:45:33.460
don't have the obstacles
of your existing protein.

00:45:33.460 --> 00:45:39.050
So that's both a worry, but
it's also a convenient structure

00:45:39.050 --> 00:45:43.160
because this ribosome
is a giant obstacle.

00:45:43.160 --> 00:45:45.550
Bigger than most proteins.

00:45:45.550 --> 00:45:48.110
If your protein's really long,
maybe it could go over here.

00:45:48.110 --> 00:45:52.300
But most the time, it's going to
stay on one side of this plane

00:45:52.300 --> 00:45:55.220
because locally, this thing
is basically flat, if you look

00:45:55.220 --> 00:45:59.330
at the real 3D pictures,
not the schematic.

00:45:59.330 --> 00:46:02.020
Now, this is good news for a
geometer because there's this

00:46:02.020 --> 00:46:05.340
giant obstacle-- think
of it as a half space--

00:46:05.340 --> 00:46:08.210
which the protein cannot
penetrate while it's being

00:46:08.210 --> 00:46:09.050
produced over here.

00:46:12.820 --> 00:46:14.010
That's it.

00:46:14.010 --> 00:46:18.030
That half space constraint
is enough to get

00:46:18.030 --> 00:46:21.100
really good algorithms
for folding your chain.

00:46:21.100 --> 00:46:24.140
It's weird because we've
made a problem both harder

00:46:24.140 --> 00:46:27.350
because the protein is only
partially produced at any time

00:46:27.350 --> 00:46:29.272
and it can fold,
which is part of it,

00:46:29.272 --> 00:46:30.730
but we've also made
our life easier

00:46:30.730 --> 00:46:32.900
because there's
this big obstacle.

00:46:32.900 --> 00:46:34.500
AUDIENCE: [INAUDIBLE]
makes sense

00:46:34.500 --> 00:46:37.710
why there's only obtuse
angles there, right?

00:46:37.710 --> 00:46:38.669
PROFESSOR: Yeah, right.

00:46:38.669 --> 00:46:41.293
Out of this, we're going to get
that the angles and the protein

00:46:41.293 --> 00:46:42.310
are constrained.

00:46:42.310 --> 00:46:48.430
And in particular, for
this angle-- it depends.

00:46:48.430 --> 00:46:54.536
I mean, in this picture because
it's perpendicular here, yeah,

00:46:54.536 --> 00:46:55.910
the sharpest angle
you could make

00:46:55.910 --> 00:46:58.870
is 90 degrees, more or less.

00:46:58.870 --> 00:47:00.760
That's a good point.

00:47:00.760 --> 00:47:04.390
So it's a convenient match
between the chemistry, which

00:47:04.390 --> 00:47:07.300
also forces the angles
to be obtuse, I guess.

00:47:07.300 --> 00:47:09.030
I don't know a ton of chemistry.

00:47:09.030 --> 00:47:11.380
But also, the ribosome
just geometrically forces.

00:47:11.380 --> 00:47:13.240
We're going to use a
property like that.

00:47:13.240 --> 00:47:17.150
Our model is going to be a
little bit more-- both more

00:47:17.150 --> 00:47:20.190
general and simpler.

00:47:20.190 --> 00:47:23.860
We're going to imagine that
the ribosome is a cone.

00:47:23.860 --> 00:47:25.800
It's part of the
upper come here.

00:47:25.800 --> 00:47:29.320
This is like a mirror image.

00:47:29.320 --> 00:47:32.400
And in reality, that
cone is actually

00:47:32.400 --> 00:47:34.202
a plane and everything
above the plane.

00:47:34.202 --> 00:47:35.660
But to be more
general, we're going

00:47:35.660 --> 00:47:37.944
to allow some angle alpha here.

00:47:37.944 --> 00:47:40.360
It's also just easier to think
about when alpha is smaller

00:47:40.360 --> 00:47:43.860
than 90, but everything I say
will work when alpha equals 90

00:47:43.860 --> 00:47:47.120
and that is sort of
the reality case.

00:47:47.120 --> 00:47:52.560
So the model is-- so
the ribosome is a cone.

00:47:52.560 --> 00:47:54.680
We call this the half
angle of the cone.

00:47:54.680 --> 00:47:58.511
From the vertical axis to the
edge of the cone is alpha.

00:47:58.511 --> 00:48:00.510
So if you were going from
one axis to the other,

00:48:00.510 --> 00:48:03.240
it would be 2 alpha.

00:48:03.240 --> 00:48:08.610
The model is, you start with
one link of your chain, which

00:48:08.610 --> 00:48:09.920
is inside the cone.

00:48:09.920 --> 00:48:14.960
It's spews out through the apex.

00:48:14.960 --> 00:48:16.850
That's the exit of the tunnel.

00:48:16.850 --> 00:48:19.930
Here, we're allowing the tunnel
to be actually quite free.

00:48:19.930 --> 00:48:23.920
Doesn't have to be
perpendicular to the apex

00:48:23.920 --> 00:48:25.860
or the plane of the apex.

00:48:25.860 --> 00:48:27.920
So the edge comes
out, and as soon

00:48:27.920 --> 00:48:31.850
as the endpoint of the
chain reaches here,

00:48:31.850 --> 00:48:33.430
then a new link is created.

00:48:33.430 --> 00:48:38.150
This is like a very simple model
for how a chain can come out

00:48:38.150 --> 00:48:40.050
of a cone without
worrying about what's

00:48:40.050 --> 00:48:41.940
happening inside the cone.

00:48:41.940 --> 00:48:44.277
Imagining everything's
totally free.

00:48:44.277 --> 00:48:46.110
This is like you can
allow self intersection

00:48:46.110 --> 00:48:47.472
in the cone, who knows what.

00:48:47.472 --> 00:48:48.930
But once you come
outside the cone,

00:48:48.930 --> 00:48:50.570
you're not allowed
to self intersect

00:48:50.570 --> 00:48:53.120
and you're not allowed
to intersect the cone.

00:48:53.120 --> 00:48:56.560
Once you come out,
you can't go back in.

00:48:56.560 --> 00:49:00.860
So that is a model of
producing protein chains.

00:49:00.860 --> 00:49:04.240
And if you have a
cone of angle alpha,

00:49:04.240 --> 00:49:07.270
we call this an alpha
producible chain.

00:49:10.090 --> 00:49:13.962
For whatever reason, we often
call it beta producible chain.

00:49:13.962 --> 00:49:15.260
Just change the variable.

00:49:40.660 --> 00:49:43.930
So if you think of the ribosome
as a cone with half angle beta,

00:49:43.930 --> 00:49:45.610
you can produce it like this.

00:49:45.610 --> 00:49:46.610
That is beta producible.

00:49:46.610 --> 00:49:48.540
Now this is a pretty
powerful model

00:49:48.540 --> 00:49:51.175
because you only have to
worry about it link by link.

00:49:51.175 --> 00:49:53.300
You don't have to worry
about the rest of the chain

00:49:53.300 --> 00:49:55.492
until it spews
outside of the cone.

00:49:55.492 --> 00:49:57.950
But it's restrictive in that
you cannot penetrate the cone.

00:50:01.560 --> 00:50:02.820
All right.

00:50:02.820 --> 00:50:06.810
One thing we can
talk about is angles.

00:50:06.810 --> 00:50:11.720
So I'm going to
write call a chain

00:50:11.720 --> 00:50:14.810
a less than or
equal to alpha chain

00:50:14.810 --> 00:50:18.005
if all the turn angles are
less than or equal to alpha.

00:50:22.420 --> 00:50:24.860
I don't know if I've used
turn angles in this class.

00:50:24.860 --> 00:50:26.900
Probably.

00:50:26.900 --> 00:50:31.270
If I have two edges,
the angle would be this.

00:50:31.270 --> 00:50:33.400
The turn angle would be
this, the supplement.

00:50:38.110 --> 00:50:38.610
Yeah.

00:50:38.610 --> 00:50:40.110
I guess we used
turn angles way back

00:50:40.110 --> 00:50:42.381
in origami land, Kawasaki's
theorem and so on.

00:50:42.381 --> 00:50:43.880
It's just, if you're
going straight,

00:50:43.880 --> 00:50:47.750
how much do you have to turn
to get to the next edge.

00:50:47.750 --> 00:50:50.430
So we'd like fairly
obtuse things.

00:50:50.430 --> 00:50:51.880
So alpha is going to be small.

00:50:51.880 --> 00:50:53.760
There isn't a ton of turn.

00:50:53.760 --> 00:50:56.870
But in general, less than or
equal to alpha chain for some

00:50:56.870 --> 00:50:57.440
alpha.

00:50:57.440 --> 00:50:59.570
Now there's a relation--
as Jason was mentioning,

00:50:59.570 --> 00:51:03.150
there's a relation between
alpha and beta in the ribosome

00:51:03.150 --> 00:51:04.970
because you always
exited orthogonally

00:51:04.970 --> 00:51:08.730
to the plane that was your cone.

00:51:08.730 --> 00:51:14.120
The sharpest angle you could
get was 90 degree turn angle.

00:51:14.120 --> 00:51:18.170
Here, we're a little freer
because this edge can wiggle

00:51:18.170 --> 00:51:20.950
around as long as
it touches the apex.

00:51:20.950 --> 00:51:24.237
So if you're up
against the cone,

00:51:24.237 --> 00:51:26.570
you have to slide out into
the complimentary cone-- that

00:51:26.570 --> 00:51:31.490
was the previous picture--
and as soon as you get there,

00:51:31.490 --> 00:51:34.310
you could create a new
edge which is like this.

00:51:34.310 --> 00:51:39.110
So the sharpest angle you can
get is actually twice beta.

00:51:39.110 --> 00:51:44.932
In general, we're going to
have alpha over 2 is less than

00:51:44.932 --> 00:51:45.640
or equal to beta.

00:51:45.640 --> 00:51:50.670
That is-- you can get up
to beta equals 2 alpha.

00:51:50.670 --> 00:51:51.420
Get that right.

00:51:56.940 --> 00:52:01.300
And also in the obtuse case,
this is not too exciting.

00:52:01.300 --> 00:52:01.980
But it's true.

00:52:05.640 --> 00:52:07.140
There's actually
some problems here.

00:52:07.140 --> 00:52:08.990
When you have that
full flexibility

00:52:08.990 --> 00:52:15.760
and you set alpha to two beta,
not the other way around.

00:52:15.760 --> 00:52:22.430
I'm going to assume here
that alpha equals beta.

00:52:22.430 --> 00:52:24.500
This will be convenient.

00:52:24.500 --> 00:52:28.080
And it's the interesting case
because, in reality, the cone

00:52:28.080 --> 00:52:29.860
has a half angle of 90 degrees.

00:52:29.860 --> 00:52:32.110
So beta is 90.

00:52:32.110 --> 00:52:33.890
And the sharpest angle
we're going to make

00:52:33.890 --> 00:52:35.020
was always obtuse.

00:52:35.020 --> 00:52:38.080
So saying that you have a
less than or equal to 90 chain

00:52:38.080 --> 00:52:39.510
is just fine.

00:52:39.510 --> 00:52:41.670
But on the mathematical
side, I think

00:52:41.670 --> 00:52:46.010
we saw the case when alpha is
less than or equal to beta,

00:52:46.010 --> 00:52:49.280
but not when alpha over 2 is
less than or equal to beta.

00:52:49.280 --> 00:52:51.520
That's a weaker constraint.

00:52:51.520 --> 00:52:54.380
So there is a range
where it's not so easy.

00:52:58.350 --> 00:53:01.270
Now, what do I claim
about these chains other

00:53:01.270 --> 00:53:05.240
than their angles
are not so sharp?

00:53:05.240 --> 00:53:10.580
I claim they're good
algorithms for folding them.

00:53:10.580 --> 00:53:12.450
What could I possibly mean?

00:53:12.450 --> 00:53:14.690
There are still
locked configurations.

00:53:14.690 --> 00:53:16.560
Is that true?

00:53:16.560 --> 00:53:22.010
Well, I mean presumably--
this is acute--

00:53:22.010 --> 00:53:25.267
but you take the obtuse
versions of this guy.

00:53:25.267 --> 00:53:27.600
Because I didn't constrain
the edge lengths or anything,

00:53:27.600 --> 00:53:30.640
I just said that the
angles are obtuse.

00:53:30.640 --> 00:53:33.540
So I could just sort of round
these corners, make it obtuse.

00:53:33.540 --> 00:53:36.050
You know, add lots of
dots just at the corners

00:53:36.050 --> 00:53:37.360
that would be obtuse.

00:53:37.360 --> 00:53:40.900
And a chain like this
will be producible.

00:53:40.900 --> 00:53:43.190
A chain with these angles
and these edge lengths

00:53:43.190 --> 00:53:45.040
can be produced from a cone.

00:53:45.040 --> 00:53:49.700
But this configuration of
this chain cannot be produced,

00:53:49.700 --> 00:53:50.760
I claim.

00:53:50.760 --> 00:53:53.760
I claim anything
that can be produced

00:53:53.760 --> 00:53:56.600
is in one connected component.

00:53:56.600 --> 00:53:58.815
So while I can make a
linkage that is locked

00:53:58.815 --> 00:54:00.940
and that there are bad
configurations you can't get

00:54:00.940 --> 00:54:03.080
out of, the things
you can actually make,

00:54:03.080 --> 00:54:05.220
you can always get out of.

00:54:05.220 --> 00:54:09.980
So there's going to be the space
of producible configurations.

00:54:13.367 --> 00:54:15.200
Maybe there's some stuff
that's unproducible

00:54:15.200 --> 00:54:16.800
but still connected to it.

00:54:16.800 --> 00:54:17.425
I don't know.

00:54:17.425 --> 00:54:18.550
It doesn't matter too much.

00:54:18.550 --> 00:54:20.460
I won't worry about this stuff.

00:54:20.460 --> 00:54:24.450
There's other bad locked
configurations that cannot

00:54:24.450 --> 00:54:25.330
reach here.

00:54:25.330 --> 00:54:28.000
But everything that's producible
is in one connected component

00:54:28.000 --> 00:54:29.510
of the configuration space.

00:54:29.510 --> 00:54:30.800
That's property one.

00:54:30.800 --> 00:54:32.420
That's kind of nice.

00:54:32.420 --> 00:54:36.912
Also, all the flat states
are going to be in here.

00:54:36.912 --> 00:54:38.120
This is actually pretty easy.

00:54:38.120 --> 00:54:40.570
I just need to prove that
flat states are producible,

00:54:40.570 --> 00:54:42.320
which we'll worry about later.

00:54:42.320 --> 00:54:45.930
So in particular, these guys
are flat state connected.

00:54:45.930 --> 00:54:47.740
All the producible
protein chains

00:54:47.740 --> 00:54:49.024
are flat state connected.

00:54:49.024 --> 00:54:50.690
That's interesting
because we don't even

00:54:50.690 --> 00:54:53.060
know that all chains are
flat state connected.

00:54:53.060 --> 00:54:55.730
But here-- I guess we know
that obtuse chains are

00:54:55.730 --> 00:55:01.350
flat state connected, so
maybe it's not so surprising.

00:55:01.350 --> 00:55:03.940
But what's important is not only
are the flat states connected

00:55:03.940 --> 00:55:05.520
to each other and
the producible states

00:55:05.520 --> 00:55:07.311
are connected to each
other, but producible

00:55:07.311 --> 00:55:09.170
is connected to flat states.

00:55:09.170 --> 00:55:10.400
Everything is together here.

00:55:12.912 --> 00:55:14.120
I might have more properties.

00:55:14.120 --> 00:55:15.536
But that's already
some good news.

00:55:15.536 --> 00:55:19.160
And there's algorithms
to do all of this.

00:55:19.160 --> 00:55:21.890
How do we prove it?

00:55:21.890 --> 00:55:31.890
Well, as usual we
use the FedEx method.

00:55:31.890 --> 00:55:34.690
And in some sense,
one of the challenges

00:55:34.690 --> 00:55:46.050
is what is the natural canonical
state for protein chains?

00:55:46.050 --> 00:55:50.596
In fact, we're just going to
assume that our chain is--

00:55:50.596 --> 00:55:51.970
in reality, we're
going to assume

00:55:51.970 --> 00:55:56.080
that it's an orthogonal chain--
an obtuse chain, I should say.

00:55:56.080 --> 00:55:59.040
But in general, for any
less than or equal to alpha

00:55:59.040 --> 00:56:01.300
chain, for whatever
alpha you like-- and it

00:56:01.300 --> 00:56:07.200
will be the half angle of the
cone, so alpha equals beta--

00:56:07.200 --> 00:56:09.135
we will define a
canonical configuration.

00:56:22.010 --> 00:56:23.765
I think we called
it the alpha CCC.

00:56:28.060 --> 00:56:32.440
So it's going to be
kind of like a helix.

00:56:32.440 --> 00:56:36.656
I think I have an example,
an actual computed example.

00:56:36.656 --> 00:56:38.280
That's not the best
picture because you

00:56:38.280 --> 00:56:39.821
can't see everything
that's going on.

00:56:39.821 --> 00:56:42.510
But this is an actual
canonical configuration

00:56:42.510 --> 00:56:44.080
of a particular chain.

00:56:47.980 --> 00:56:50.410
Let me tell you how
it works in general.

00:56:50.410 --> 00:56:54.990
So in general, we have
some chain, v1, v2-- sorry,

00:56:54.990 --> 00:56:58.560
starting at v0, v1, v2.

00:56:58.560 --> 00:57:00.470
I want to define a
canonical-- and there's

00:57:00.470 --> 00:57:02.310
defined lengths between the two.

00:57:02.310 --> 00:57:05.540
And there's defined angles
between every triple

00:57:05.540 --> 00:57:08.240
in sequence.

00:57:08.240 --> 00:57:11.079
So I'm going to start
with v0 somewhere.

00:57:11.079 --> 00:57:12.620
Doesn't really matter
by translation.

00:57:12.620 --> 00:57:15.870
Say, the origin of space.

00:57:15.870 --> 00:57:27.460
And what I'm going to do is draw
a cone whose apex is that v0.

00:57:27.460 --> 00:57:33.410
And the half angle here is
going to be alpha over two,

00:57:33.410 --> 00:57:34.710
not alpha.

00:57:34.710 --> 00:57:38.000
This is a smaller cone
than-- by a factor of two--

00:57:38.000 --> 00:57:40.160
than the ribosome.

00:57:40.160 --> 00:57:42.370
That's important.

00:57:42.370 --> 00:57:45.730
So there's this vertical line.

00:57:45.730 --> 00:57:50.080
And to pick v1, I'm just going
to use the right edge, which

00:57:50.080 --> 00:57:52.960
is-- let's say this
is the x direction.

00:57:52.960 --> 00:57:54.610
This is the z direction.

00:57:54.610 --> 00:57:56.694
Maximum x-coordinate.

00:57:56.694 --> 00:57:58.860
It's going to lie on the
cone, maximum x-coordinate.

00:57:58.860 --> 00:58:00.420
That's v1.

00:58:00.420 --> 00:58:05.560
Now, v1-- let me redraw
this picture a little lower.

00:58:05.560 --> 00:58:10.640
So there was v0, v1.

00:58:10.640 --> 00:58:12.780
Now I want to draw v2, and
I want to draw it above.

00:58:15.390 --> 00:58:20.960
So what I'll do is
draw a vertical column

00:58:20.960 --> 00:58:24.300
whose half angle here
is alpha over two.

00:58:27.270 --> 00:58:29.290
I want to draw v2
on the cone here.

00:58:29.290 --> 00:58:30.780
Of course, the
height of the cone

00:58:30.780 --> 00:58:35.200
is the length of the
edge, not the height.

00:58:35.200 --> 00:58:36.870
You could think of
the cone as infinite.

00:58:36.870 --> 00:58:40.240
And then I just clip this to
when it has the right length.

00:58:40.240 --> 00:58:42.970
So again, this might be
a different height cone.

00:58:42.970 --> 00:58:45.470
I clip it to whatever
the length v1, v2 is.

00:58:45.470 --> 00:58:48.040
I want it to be
somewhere on this cone,

00:58:48.040 --> 00:58:51.070
but now I'm constrained to
have the correct angle at v1.

00:58:51.070 --> 00:58:53.550
I can't just put it over here,
because then the angle here

00:58:53.550 --> 00:58:54.430
would be 180.

00:58:54.430 --> 00:58:57.630
Presumably, I don't want
to make a 180 degree angle.

00:58:57.630 --> 00:58:59.570
So in reality, what
happens is that there's

00:58:59.570 --> 00:59:09.580
a cone which is-- whose
axis is the edge v0, v1.

00:59:09.580 --> 00:59:13.400
So I extend v0 v1 out
here, which, in this case,

00:59:13.400 --> 00:59:15.410
happens to lie here.

00:59:15.410 --> 00:59:18.819
And I make a cone like that.

00:59:18.819 --> 00:59:20.485
Let me draw it slightly
more accurately.

00:59:26.810 --> 00:59:32.550
In this case, the
center axis of the cone

00:59:32.550 --> 00:59:37.990
would go right here, whatever
the extension of v0, v1 was.

00:59:37.990 --> 00:59:45.210
And to have the right angle at
v1, v2 must be on that cone.

00:59:45.210 --> 00:59:47.510
Conveniently, there are
two intersection points

00:59:47.510 --> 00:59:49.300
between those two cones.

00:59:49.300 --> 00:59:52.240
I could choose either
one of them to be v2.

00:59:52.240 --> 00:59:56.300
And I will choose the
counterclockwise most one,

00:59:56.300 --> 00:59:58.560
which is this one.

00:59:58.560 --> 01:00:00.692
This is going to be v2.

01:00:00.692 --> 01:00:03.880
So I draw that edge.

01:00:03.880 --> 01:00:06.090
Now I repeat.

01:00:06.090 --> 01:00:09.130
So for v2, I'm going to
draw a vertical cone whose

01:00:09.130 --> 01:00:12.940
half angle-- here, the half
angle is always alpha over two.

01:00:12.940 --> 01:00:14.930
Half angle is alpha over two.

01:00:14.930 --> 01:00:26.070
This cone had half angle,
whatever the angle v0, v1, v2

01:00:26.070 --> 01:00:27.840
was.

01:00:27.840 --> 01:00:29.460
Was that the half
angle or angle?

01:00:29.460 --> 01:00:30.504
The half angle.

01:00:30.504 --> 01:00:31.420
I think this is right.

01:00:34.080 --> 01:00:36.110
OK.

01:00:36.110 --> 01:00:38.910
And then I take the
intersection of those two cones,

01:00:38.910 --> 01:00:41.750
and that will give
me where v3 is.

01:00:41.750 --> 01:00:44.976
So I do the same thing
for v2, for v3, and so on.

01:00:44.976 --> 01:00:46.600
I have a unique choice
at every moment.

01:00:50.400 --> 01:00:52.890
Yeah, basically.

01:00:52.890 --> 01:00:54.810
And the only exception
was at the beginning

01:00:54.810 --> 01:00:57.340
here, when I had
a vertical line.

01:00:57.340 --> 01:00:59.300
These two cones could
actually be equal,

01:00:59.300 --> 01:01:01.766
and then the intersection
is the entire cone.

01:01:01.766 --> 01:01:03.140
And that case, I
guess I'd choose

01:01:03.140 --> 01:01:05.380
the maximum
x-coordinate one again.

01:01:05.380 --> 01:01:07.350
And then I have a
canonical choice

01:01:07.350 --> 01:01:09.080
of everything along the way.

01:01:09.080 --> 01:01:09.969
It will always go up.

01:01:09.969 --> 01:01:11.510
And it sort of
spinals around because

01:01:11.510 --> 01:01:14.180
of the counter
clockwise most choice.

01:01:14.180 --> 01:01:17.390
And the result is a
picture like this.

01:01:22.446 --> 01:01:23.820
Anything else I
need to say here?

01:01:26.380 --> 01:01:31.190
I claim this canonical
configuration

01:01:31.190 --> 01:01:37.550
lies in an alpha over
2 half angle cone.

01:01:41.270 --> 01:01:44.090
That's true by construction.

01:01:44.090 --> 01:01:47.410
The challenge is, does the
construction really work?

01:01:47.410 --> 01:01:49.445
So I start, obviously,
with one cone,

01:01:49.445 --> 01:01:51.820
and I can think of this as
actually an infinite cone that

01:01:51.820 --> 01:01:53.920
goes out to infinity here.

01:01:53.920 --> 01:01:55.700
And I claim the
entire construction

01:01:55.700 --> 01:01:58.090
will lie inside that cone.

01:01:58.090 --> 01:02:00.930
And it's kind of
obvious because v1--

01:02:00.930 --> 01:02:07.620
I chose v2 to lie in the
same cone, just translated up

01:02:07.620 --> 01:02:10.790
to start at v1 instead
of starting at v0.

01:02:10.790 --> 01:02:13.880
Of course, this cone is
contained in this bigger one.

01:02:13.880 --> 01:02:16.470
And by induction, in fact,
the entire rest of the chain

01:02:16.470 --> 01:02:18.730
will lie in this smaller cone.

01:02:18.730 --> 01:02:22.440
Therefore, it lies
in the big one, also.

01:02:22.440 --> 01:02:24.530
OK.

01:02:24.530 --> 01:02:25.540
Fine.

01:02:25.540 --> 01:02:28.630
So by construction it will
lie in alpha over two cone.

01:02:28.630 --> 01:02:30.825
The worry is that these
two cones don't intersect.

01:02:33.380 --> 01:02:35.100
Here we have an angle.

01:02:35.100 --> 01:02:37.040
The half angle of
the cone is whatever

01:02:37.040 --> 01:02:39.680
angle the angle is at v1.

01:02:39.680 --> 01:02:41.180
Sorry, this should
not be the angle.

01:02:41.180 --> 01:02:42.430
This should be the turn angle.

01:02:48.740 --> 01:02:52.310
That angle is how much
you turn from v0, v1.

01:02:52.310 --> 01:02:54.630
Now, we know that-- we're
assuming that-- the turn

01:02:54.630 --> 01:02:56.010
angles are all, at most, alpha.

01:02:58.700 --> 01:03:01.040
The turn angle
cone could actually

01:03:01.040 --> 01:03:04.620
be twice as big as the vertical
cone that we were always using.

01:03:04.620 --> 01:03:08.640
We always use a vertical cone,
half angle alpha over two.

01:03:08.640 --> 01:03:12.940
But it's OK because we
always keep these edges,

01:03:12.940 --> 01:03:17.750
like v0, v1, was on
the edge of the cone.

01:03:17.750 --> 01:03:19.680
And so when we
extend it, it lies

01:03:19.680 --> 01:03:22.470
on the edge of
this vertical cone.

01:03:22.470 --> 01:03:27.640
So its angle-- in the most
extreme case-- its half angle

01:03:27.640 --> 01:03:31.280
is alpha, which
would look like this.

01:03:31.280 --> 01:03:33.655
We'll go all the way over from
the right side of the cone

01:03:33.655 --> 01:03:34.860
to the left side of the cone.

01:03:34.860 --> 01:03:36.860
In general, it's not going
to be right and left,

01:03:36.860 --> 01:03:40.210
but it's going to be some
side and the antipodal point.

01:03:40.210 --> 01:03:44.610
And because the double
angle of the cone is alpha,

01:03:44.610 --> 01:03:45.700
it's still OK.

01:03:45.700 --> 01:03:49.600
You will intersect
somewhere on the cone.

01:03:49.600 --> 01:03:52.190
This is a subtle detail,
but it's really crucial

01:03:52.190 --> 01:03:54.050
because we start
with a chain that

01:03:54.050 --> 01:03:56.840
has relatively
large angles, alpha.

01:03:56.840 --> 01:03:58.600
And we get it
into-- we squeeze it

01:03:58.600 --> 01:04:01.820
into-- a cone that
still has double-- twice

01:04:01.820 --> 01:04:04.240
its angle is alpha,
but we kind of

01:04:04.240 --> 01:04:08.027
compress it into something
of half angle alpha over two.

01:04:08.027 --> 01:04:10.235
You might think, oh, I'm
just changing the definition

01:04:10.235 --> 01:04:11.454
and calling it half angle.

01:04:11.454 --> 01:04:13.120
Therefore, it gets
to an alpha over two.

01:04:13.120 --> 01:04:15.210
But it's a little
tricky to actually get

01:04:15.210 --> 01:04:18.520
it to fit in a vertical
alpha over two cone.

01:04:18.520 --> 01:04:20.730
Once we have this,
it's really easy

01:04:20.730 --> 01:04:23.470
to canonicalize a chain,
a producible chain.

01:04:23.470 --> 01:04:25.760
So let me tell you
how to do that.

01:04:52.380 --> 01:04:54.510
So we're going use
the FedEx method

01:04:54.510 --> 01:04:57.570
of taking some configuration
and canonicalizing it, and then

01:04:57.570 --> 01:04:59.910
uncanonicalizing
to something else.

01:04:59.910 --> 01:05:02.300
We're also going to use a
new method, which I just

01:05:02.300 --> 01:05:03.360
came up with the term.

01:05:03.360 --> 01:05:05.950
Is called the
momento method which

01:05:05.950 --> 01:05:10.370
is you play the
movie in reverse.

01:05:10.370 --> 01:05:14.130
So, I guess, also
the Merlin method.

01:05:14.130 --> 01:05:16.820
That's more complicated.

01:05:16.820 --> 01:05:21.670
So we have a movie
here in mind, which

01:05:21.670 --> 01:05:24.210
is how was the chain produced?

01:05:24.210 --> 01:05:26.840
So what I want to
show is that if-- I

01:05:26.840 --> 01:05:32.280
want to start with a producible
configuration and chain.

01:05:34.790 --> 01:05:37.180
Somehow, it got produced.

01:05:37.180 --> 01:05:41.440
So you had your
cone and the thing

01:05:41.440 --> 01:05:45.160
starts spewing out and
folding, and doing whatever.

01:05:45.160 --> 01:05:48.807
That's an animation, in some
sense, of one edge coming out

01:05:48.807 --> 01:05:50.390
and stuff is folding
at the same time.

01:05:50.390 --> 01:05:52.139
Then an edge is created,
then another edge

01:05:52.139 --> 01:05:53.250
comes out, and so on.

01:05:53.250 --> 01:05:55.570
What I want to do is play
that movie backwards.

01:05:55.570 --> 01:05:57.690
It's a pretty intuitive idea.

01:05:57.690 --> 01:06:01.310
I just want to start feeding
the edges back into the cone,

01:06:01.310 --> 01:06:03.000
and just keep stuffing them in.

01:06:03.000 --> 01:06:05.060
Now, what happens
out here is easy

01:06:05.060 --> 01:06:07.560
because we know it doesn't
penetrate the cone.

01:06:07.560 --> 01:06:08.960
That's the assumption.

01:06:08.960 --> 01:06:12.120
And we know whatever was
created here could be uncreated,

01:06:12.120 --> 01:06:16.850
as long as you can afford
to erase edges one by one.

01:06:16.850 --> 01:06:18.242
That's the tricky part.

01:06:18.242 --> 01:06:19.200
How do I erase an edge?

01:06:19.200 --> 01:06:21.590
And usually, I can't.

01:06:21.590 --> 01:06:23.950
But I don't have
to erase any edge.

01:06:23.950 --> 01:06:25.770
Like, if I had to
erase this one,

01:06:25.770 --> 01:06:27.950
that would be hard
because some motion here

01:06:27.950 --> 01:06:31.080
might penetrate where that
edge ought to have been.

01:06:31.080 --> 01:06:37.090
And erasing the
edge will make it--

01:06:37.090 --> 01:06:39.320
adding the edge makes
it harder to fold.

01:06:39.320 --> 01:06:41.880
So I can't erase it.

01:06:41.880 --> 01:06:43.630
But the edges I have
to erase are the ones

01:06:43.630 --> 01:06:45.610
that have been fully
inserted into the cone.

01:06:45.610 --> 01:06:52.070
So if I can somehow do something
inside the cone, I would be OK.

01:06:52.070 --> 01:06:55.610
All this work, defining a
canonical configuration,

01:06:55.610 --> 01:06:58.586
was about forcing a chain to
stay inside a cone-- and not

01:06:58.586 --> 01:07:00.210
only an alpha cone,
which is what we're

01:07:00.210 --> 01:07:03.800
going to have as the ribosome,
but an alpha over two cone.

01:07:03.800 --> 01:07:07.920
This is smaller than my
ribosome cone by factor of two.

01:07:07.920 --> 01:07:10.452
And I need that.

01:07:10.452 --> 01:07:11.820
Why do I need that?

01:07:11.820 --> 01:07:17.957
Because this thing, I have no
control over the outside chain.

01:07:17.957 --> 01:07:19.540
So the way that it
approaches the cone

01:07:19.540 --> 01:07:22.800
could be as sharp
as like this, where

01:07:22.800 --> 01:07:26.625
I have the first edge that
is-- the current edge that

01:07:26.625 --> 01:07:27.516
is-- inside the cone.

01:07:27.516 --> 01:07:28.890
As far as the
movie is concerned,

01:07:28.890 --> 01:07:30.140
there's only one edge.

01:07:30.140 --> 01:07:32.100
There's nothing up here.

01:07:32.100 --> 01:07:35.020
I want to put something up
here, in a cone, naturally.

01:07:38.030 --> 01:07:41.472
But I don't get to control
the first angle because that

01:07:41.472 --> 01:07:42.680
is controlled by this motion.

01:07:42.680 --> 01:07:45.247
Maybe it really needed
to go sharp like that

01:07:45.247 --> 01:07:47.330
so that it could make a
sharper angle or whatever.

01:07:52.720 --> 01:07:58.210
So you might say, well, of
course I can put it inside

01:07:58.210 --> 01:08:03.020
and alpha cone, which is
the same as this alpha.

01:08:03.020 --> 01:08:04.890
Sorry-- bad picture.

01:08:04.890 --> 01:08:07.910
This is alpha.

01:08:07.910 --> 01:08:10.970
This would be a problem because
I have this weird angle coming

01:08:10.970 --> 01:08:14.480
in, and now suddenly I have
to bend back like that.

01:08:14.480 --> 01:08:16.729
Maybe the turn angle here
is not so sharp as alpha.

01:08:16.729 --> 01:08:19.620
Maybe it's one degree.

01:08:19.620 --> 01:08:22.680
So I really can't force
the rest of my chain

01:08:22.680 --> 01:08:25.210
to lie in this cone.

01:08:25.210 --> 01:08:31.910
But I claim I can force
it to lie in this cone,

01:08:31.910 --> 01:08:35.140
with half angle alpha over two.

01:08:35.140 --> 01:08:38.800
This is a little more subtle.

01:08:38.800 --> 01:08:39.990
Oh, right.

01:08:39.990 --> 01:08:43.800
I wanted to mention that
helices appear in nature.

01:08:43.800 --> 01:08:45.870
They appear in
proteins, but they also

01:08:45.870 --> 01:08:49.063
appear in this
crazy climber plant.

01:08:49.063 --> 01:08:50.729
Marty, have you seen
this in Costa Rica?

01:08:50.729 --> 01:08:51.424
AUDIENCE: Yeah.

01:08:51.424 --> 01:08:52.090
PROFESSOR: Yeah.

01:08:52.090 --> 01:08:54.470
There's some really incredible
wildlife in Costa Rica.

01:08:54.470 --> 01:08:56.678
I've never been there, but
I've seen lots of pictures

01:08:56.678 --> 01:09:00.890
and this is spirals in practice.

01:09:00.890 --> 01:09:03.645
Also, proteins tend
to form these things.

01:09:03.645 --> 01:09:05.520
They call them out alpha
helices because they

01:09:05.520 --> 01:09:08.979
spin like an alpha, I guess.

01:09:08.979 --> 01:09:11.560
So it's kind of neat that the
canonical configuration, which

01:09:11.560 --> 01:09:13.840
is totally
geometrically motivated,

01:09:13.840 --> 01:09:16.591
also appears in biology.

01:09:16.591 --> 01:09:19.710
Not that kind of biology though.

01:09:19.710 --> 01:09:22.279
So here is the picture.

01:09:22.279 --> 01:09:24.430
I have the big cone.

01:09:24.430 --> 01:09:25.890
That is my ribosome,
and here I'm

01:09:25.890 --> 01:09:30.170
going to write beta for
the-- beta for big, I guess.

01:09:30.170 --> 01:09:34.240
And then we know that we
can canonicalize a chain,

01:09:34.240 --> 01:09:36.560
or there at least exists
a canonical configuration

01:09:36.560 --> 01:09:39.569
of the chain, where
everything lies

01:09:39.569 --> 01:09:43.830
inside a cone of half
angle alpha over two.

01:09:43.830 --> 01:09:48.560
Now the problem is that cone, we
want it to be at a funny angle.

01:09:51.399 --> 01:09:52.790
Let me draw a real picture.

01:09:59.780 --> 01:10:02.380
Here's a ribosome.

01:10:02.380 --> 01:10:05.110
It has a big angle here.

01:10:05.110 --> 01:10:08.120
We'll call alpha.

01:10:08.120 --> 01:10:11.020
Now, I'm going to do
the not extreme case,

01:10:11.020 --> 01:10:13.350
try to be a little more general.

01:10:13.350 --> 01:10:15.490
There's some edge that
is currently entering,

01:10:15.490 --> 01:10:20.040
and we have no control over that
edge or the rest of the chain.

01:10:20.040 --> 01:10:21.770
That's determined
by the movie which

01:10:21.770 --> 01:10:24.520
we're trying to play backwards.

01:10:24.520 --> 01:10:28.136
What we have to control, and
what we're free to control,

01:10:28.136 --> 01:10:29.760
is the rest of the
chain because as far

01:10:29.760 --> 01:10:32.051
as the movie is concerned,
that hasn't been created yet

01:10:32.051 --> 01:10:34.560
or it's already been destroyed,
depending on whether you're

01:10:34.560 --> 01:10:36.814
playing forwards or backwards.

01:10:36.814 --> 01:10:38.230
We need to say
what happens to it.

01:10:38.230 --> 01:10:41.180
And what I want to happen
is so that by the time

01:10:41.180 --> 01:10:45.100
this edge is inside,
that edge plus the rest

01:10:45.100 --> 01:10:47.250
is in the canonical
configuration.

01:10:47.250 --> 01:10:49.030
If I can achieve
that, then as edges

01:10:49.030 --> 01:10:50.685
come in they become
canonicalized,

01:10:50.685 --> 01:10:53.060
and then everything will be
canonical and inside the cone

01:10:53.060 --> 01:10:54.490
and we're done.

01:10:54.490 --> 01:10:56.370
That's our goal.

01:10:56.370 --> 01:10:57.120
Canonicalization.

01:10:57.120 --> 01:11:00.290
So, what's the deal?

01:11:00.290 --> 01:11:07.240
Well, in reality,
there's some cone-- yeah,

01:11:07.240 --> 01:11:09.430
it can penetrate
like that-- could

01:11:09.430 --> 01:11:11.550
penetrate the outside cone.

01:11:11.550 --> 01:11:13.230
This is getting messy.

01:11:15.790 --> 01:11:20.950
So if I extend this line,
there's a cone of half angle

01:11:20.950 --> 01:11:25.540
here, which is equal to
whatever the turn angle is

01:11:25.540 --> 01:11:28.780
at that vertex, which
is, again, specified.

01:11:28.780 --> 01:11:31.180
We're not free to set
it to whatever we want.

01:11:31.180 --> 01:11:33.810
We know the next edge
must lie on this cone.

01:11:36.460 --> 01:11:44.540
What I do-- now, on the
other hand, off to the side,

01:11:44.540 --> 01:11:46.940
I have in mind a
vertical cone whose

01:11:46.940 --> 01:11:48.900
half angle is alpha over two.

01:11:48.900 --> 01:11:51.310
So it's quite small.

01:11:51.310 --> 01:11:55.290
And I know-- how do
we do it-- initially,

01:11:55.290 --> 01:11:58.970
the first edge was along
the maximum x direction,

01:11:58.970 --> 01:12:00.670
and then it spirals
up from there.

01:12:03.151 --> 01:12:03.650
OK.

01:12:06.290 --> 01:12:07.880
Here's what I'm going to do.

01:12:07.880 --> 01:12:09.940
There are sort of
two situations.

01:12:09.940 --> 01:12:17.660
What I'd like to do is put a
cone here that is vertical.

01:12:17.660 --> 01:12:20.010
Something like that.

01:12:20.010 --> 01:12:21.590
Just like I have here.

01:12:21.590 --> 01:12:24.780
The trouble is, the
right side of this cone

01:12:24.780 --> 01:12:26.852
does not intersect the
boundary of this cone.

01:12:26.852 --> 01:12:29.060
And need it to in order to
form the right angle here.

01:12:29.060 --> 01:12:31.476
It's going to-- it might go
through the middle of the cone

01:12:31.476 --> 01:12:32.357
like it does here.

01:12:32.357 --> 01:12:34.690
So then what I do is I take
this canonical configuration

01:12:34.690 --> 01:12:41.240
and I rotate it so that--
this is hard to draw-- it'll

01:12:41.240 --> 01:12:42.445
be something like this.

01:12:45.180 --> 01:12:47.690
There's no hope of seeing this.

01:12:47.690 --> 01:12:49.420
So it's on the
surface of this cone.

01:12:49.420 --> 01:12:50.720
It's not on the far right edge.

01:12:50.720 --> 01:12:53.420
It's going to be some
intermediate point.

01:12:53.420 --> 01:12:55.690
And that's exactly where
it intersects this cone.

01:12:55.690 --> 01:12:58.890
It's just like the previous
picture, just harder to see.

01:12:58.890 --> 01:13:01.120
I'm taking the intersection
of these two cones.

01:13:01.120 --> 01:13:03.090
If I just rotate
the picture, then it

01:13:03.090 --> 01:13:06.480
will lie in the intersection--
if they intersect.

01:13:06.480 --> 01:13:07.700
But they might not intersect.

01:13:10.750 --> 01:13:14.900
So let me go here
and try it again.

01:13:19.270 --> 01:13:22.720
So the easy case is when
I can draw a vertical cone

01:13:22.720 --> 01:13:27.480
and it intersects the cone
that I need to intersect.

01:13:27.480 --> 01:13:33.950
The harder case is--
maybe it's more extreme.

01:13:33.950 --> 01:13:36.130
Maybe it's a very
tight angle here.

01:13:38.690 --> 01:13:41.390
So there's a very
small turn angle.

01:13:41.390 --> 01:13:42.740
I have to intersect this cone.

01:13:42.740 --> 01:13:44.590
Because the cone
that I'm working with

01:13:44.590 --> 01:13:50.415
is actually smaller--
it's half of this angle--

01:13:50.415 --> 01:13:51.790
it might not
intersect this cone.

01:13:51.790 --> 01:13:54.950
In that case, I'm going
to rotate the cone

01:13:54.950 --> 01:13:56.490
to fall over a little bit.

01:13:59.740 --> 01:14:02.265
So instead of being like that,
it's going to be like this.

01:14:07.870 --> 01:14:08.370
OK.

01:14:08.370 --> 01:14:10.780
So I want the intersection
of these two cones, which

01:14:10.780 --> 01:14:15.280
I've conveniently
made this edge here.

01:14:15.280 --> 01:14:17.040
So the first edge
will lie along here,

01:14:17.040 --> 01:14:18.920
and then it's going to
spiral out from there.

01:14:18.920 --> 01:14:20.753
So I still have the
canonical configuration.

01:14:20.753 --> 01:14:22.900
I've just tilted it.

01:14:22.900 --> 01:14:25.720
Tilting is going to be necessary
because I have this angle

01:14:25.720 --> 01:14:27.000
to match up.

01:14:27.000 --> 01:14:31.270
The convenient thing about
the canonical-- the alpha

01:14:31.270 --> 01:14:34.460
CCC, canonical
configuration-- is

01:14:34.460 --> 01:14:38.940
that I have this half
angle of alpha over two,

01:14:38.940 --> 01:14:43.800
so I can afford to tilt it
by up to alpha over two.

01:14:43.800 --> 01:14:46.040
It will still stay
within the ribosome,

01:14:46.040 --> 01:14:49.570
which is of half angle alpha.

01:14:49.570 --> 01:14:54.340
And all I need to show here--
and once you think about it

01:14:54.340 --> 01:14:57.770
for a while, it's
obvious-- that ideally, I

01:14:57.770 --> 01:14:58.860
don't tilt it at all.

01:14:58.860 --> 01:14:59.840
I've got tons of room.

01:14:59.840 --> 01:15:01.600
Huge amount of room here.

01:15:01.600 --> 01:15:04.330
But sometimes I'll have to
tilt it, but by at most alpha

01:15:04.330 --> 01:15:04.830
over two.

01:15:04.830 --> 01:15:07.300
So I will stay
inside the ribosome,

01:15:07.300 --> 01:15:11.210
because this apex was inside
the cone and the smaller cone,

01:15:11.210 --> 01:15:15.882
even if I tilt it all the
way to meet this edge,

01:15:15.882 --> 01:15:17.090
it will stay inside the cone.

01:15:17.090 --> 01:15:19.430
In fact, it'll stay
inside the big cone.

01:15:19.430 --> 01:15:22.220
In fact, this cone that
I tilt-- the one that

01:15:22.220 --> 01:15:24.560
contains the rest of the
canonical configuration--

01:15:24.560 --> 01:15:29.840
will always contain
the up direction.

01:15:29.840 --> 01:15:31.790
That's how to see it.

01:15:31.790 --> 01:15:34.950
If it always contains the
up direction, then at most,

01:15:34.950 --> 01:15:37.160
it's that big.

01:15:37.160 --> 01:15:42.380
And that will-- because that's
an angle of alpha because that

01:15:42.380 --> 01:15:44.370
was the half angle
of the big cone.

01:15:44.370 --> 01:15:46.850
So that will be a half
angle of alpha over two.

01:15:46.850 --> 01:15:49.630
As long as you contain the
up direction at all times,

01:15:49.630 --> 01:15:53.140
you will not fall
outside the big cone.

01:15:53.140 --> 01:15:56.810
So the rest is just momento.

01:15:56.810 --> 01:15:59.420
So you play this
movie backwards.

01:15:59.420 --> 01:16:02.690
As things come in
here, this cone

01:16:02.690 --> 01:16:04.250
is going to wiggle
back and forth,

01:16:04.250 --> 01:16:06.990
depending on how
this angle changes.

01:16:06.990 --> 01:16:09.200
Once the edge gets
all the way in,

01:16:09.200 --> 01:16:11.506
you absorb it into the
canonical configuration.

01:16:11.506 --> 01:16:13.630
Little bit of work there
but you just sort of twist

01:16:13.630 --> 01:16:16.749
the cone around
until that algorithm

01:16:16.749 --> 01:16:19.040
that we described for producing
canonical configuration

01:16:19.040 --> 01:16:21.370
would actually produce
what's inside the cone.

01:16:21.370 --> 01:16:23.952
Then the next edge comes
in, cone wiggles around

01:16:23.952 --> 01:16:25.410
until the edge gets
all the way in,

01:16:25.410 --> 01:16:29.370
then you canonicalize what's
inside the cone, and repeat.

01:16:29.370 --> 01:16:31.430
So if you had a
way to get it out,

01:16:31.430 --> 01:16:32.960
you could put it
back in and keep

01:16:32.960 --> 01:16:35.900
track of all the stuff
that happens on the inside.

01:16:35.900 --> 01:16:38.180
That's what this theorem says.

01:16:38.180 --> 01:16:43.290
And then there's just
slightly more to say.

01:16:43.290 --> 01:16:50.110
If you have a flat
state, we want

01:16:50.110 --> 01:16:52.680
to prove these things
are flat state connected.

01:16:52.680 --> 01:16:55.900
So take some flat
state-- I really

01:16:55.900 --> 01:16:59.220
should have only obtuse angles.

01:16:59.220 --> 01:17:01.340
I claim this flat
state can be produced

01:17:01.340 --> 01:17:05.210
using a cone of the
appropriate angle.

01:17:05.210 --> 01:17:07.370
If the sharpest turn
angle here is alpha,

01:17:07.370 --> 01:17:09.970
then you need an alpha cone.

01:17:09.970 --> 01:17:11.510
And the way to
think about that is

01:17:11.510 --> 01:17:17.041
to think of the cone moving
instead of as the chain moving.

01:17:17.041 --> 01:17:17.790
It's a lot easier.

01:17:17.790 --> 01:17:20.560
So you want the chain
to lie around here.

01:17:20.560 --> 01:17:27.500
So you start by moving the
cone, I guess like this.

01:17:27.500 --> 01:17:29.790
So that it just barely
touches the plane,

01:17:29.790 --> 01:17:33.197
and this edge spews out.

01:17:33.197 --> 01:17:34.863
Is that the right way
to think about it?

01:17:34.863 --> 01:17:35.650
I don't know.

01:17:35.650 --> 01:17:37.020
Should be like this.

01:17:37.020 --> 01:17:38.780
So you take the cone.

01:17:38.780 --> 01:17:41.740
This is like putting
frosting on a cake.

01:17:41.740 --> 01:17:43.480
So you move your cone like here.

01:17:43.480 --> 01:17:47.920
You squirt out some-- this edge.

01:17:47.920 --> 01:17:51.910
Then, you do it so
that when you're here

01:17:51.910 --> 01:17:56.120
and the new edge is created,
it's still in the plane.

01:17:56.120 --> 01:17:58.550
And then you just sort
of move around there.

01:17:58.550 --> 01:18:01.854
I'm just going to leave
it as a sketch like that.

01:18:01.854 --> 01:18:03.270
Once you know that
you can produce

01:18:03.270 --> 01:18:06.890
any flat state, of course,
you can reorient yourself

01:18:06.890 --> 01:18:10.860
by relativity so that the chain
is moving instead of the cone.

01:18:10.860 --> 01:18:13.410
So you can produce this
thing with a ribosome.

01:18:13.410 --> 01:18:16.210
Once you know all flat
states can be produced

01:18:16.210 --> 01:18:18.720
and you know all producible
configurations can

01:18:18.720 --> 01:18:21.390
be canonicalized, then you
know it's flat state connected

01:18:21.390 --> 01:18:24.010
and you know all canonical
things are flattenable and vice

01:18:24.010 --> 01:18:27.900
versa, by continuous motions
without self intersection.

01:18:27.900 --> 01:18:29.810
And all of this is algorithmic.

01:18:29.810 --> 01:18:33.550
It can tell you how to go
from one place to another.

01:18:33.550 --> 01:18:36.260
And so this is a
candidate algorithm,

01:18:36.260 --> 01:18:38.790
I would say, for how
nature folds proteins.

01:18:38.790 --> 01:18:40.410
Just thinking about
the mechanics,

01:18:40.410 --> 01:18:42.330
not worrying about
how it's implemented.

01:18:42.330 --> 01:18:45.100
Maybe you take
this model and then

01:18:45.100 --> 01:18:50.450
you try to make it
physical forces,

01:18:50.450 --> 01:18:52.220
and you get a way
to fold proteins.

01:18:52.220 --> 01:18:54.120
That, of course,
remains a mystery.

01:18:54.120 --> 01:18:58.800
But next time we will talk about
some very simple models that

01:18:58.800 --> 01:19:02.800
are motivated more closely via
biology of how proteins might

01:19:02.800 --> 01:19:05.340
actually fold, and talk
about the complexities

01:19:05.340 --> 01:19:07.570
that you get there.

