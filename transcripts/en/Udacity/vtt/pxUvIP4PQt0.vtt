WEBVTT
Kind: captions
Language: en

00:00:00.090 --> 00:00:05.060
Okay. let's do an exercise. Now, your task in this exercise is to look at the

00:00:05.060 --> 00:00:12.170
Chicago OSM data set and find all the top level tags in this data set. Now,

00:00:12.170 --> 00:00:14.310
what we mean top level tags are essentially

00:00:14.310 --> 00:00:18.530
all the distinct different types of tags that

00:00:18.530 --> 00:00:25.140
you are going to see in this data set. Okay, so osm, bounds, node, tag and

00:00:25.140 --> 00:00:27.970
so on. What I'd like you to do is

00:00:27.970 --> 00:00:32.110
loop through this data set and create a dictionary such

00:00:32.110 --> 00:00:35.110
that each time you see a particular tag, if

00:00:35.110 --> 00:00:39.370
that tag isn't already in your dictionary you add it.

00:00:39.370 --> 00:00:41.770
At the end, your dictionary should be populated by

00:00:41.770 --> 00:00:44.780
all of the different types of tags contained in this

00:00:44.780 --> 00:00:47.350
data set. Now the challenge here is that this file

00:00:47.350 --> 00:00:50.420
is huge. If we take a look at its size,

00:00:50.420 --> 00:00:52.750
I did that just a little bit ago. We can

00:00:52.750 --> 00:00:57.090
see that it's just under 2 gigabytes of data. Now

00:00:57.090 --> 00:00:59.180
we've talked about two different types of XML parsing in

00:00:59.180 --> 00:01:02.000
this course. One is tree-based parsing where we essentially read

00:01:02.000 --> 00:01:05.519
the entire document into memory, and then work with it

00:01:05.519 --> 00:01:07.960
as nodes on a tree. The other way we've talked

00:01:07.960 --> 00:01:12.030
about parsing XML is using a SAX parser or doing

00:01:12.030 --> 00:01:15.700
iterative parsing. We actually looked at the iterparse method for element

00:01:15.700 --> 00:01:18.900
tree back in lesson three. And that's what you

00:01:18.900 --> 00:01:22.570
are going to be doing here. So instead of reading this

00:01:22.570 --> 00:01:24.900
entire file into memory. What we are going to do

00:01:24.900 --> 00:01:29.690
with iterparse is parse it one tag at a time

00:01:29.690 --> 00:01:32.680
and so essentially what you are doing here is

00:01:32.680 --> 00:01:35.770
treating each time you see a tag as an event

00:01:35.770 --> 00:01:38.050
and for each one of those events, what we are

00:01:38.050 --> 00:01:41.430
going to be doing is checking to see from our dictionary

00:01:41.430 --> 00:01:45.890
whether we have seen a given tag. Before and I don't mean this specific tag.

00:01:45.890 --> 00:01:52.000
Rather what I mean is a tag with this name. So bounds, node, tag, et cetera.

00:01:52.000 --> 00:01:56.080
If you haven't seen it before, create a new key in the dictionary. And by the

00:01:56.080 --> 00:01:58.010
time you're done parsing the file you'll have

00:01:58.010 --> 00:01:59.820
all of the unique tag names. Good luck!

