WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.346
[MUSIC PLAYING]

00:00:05.260 --> 00:00:05.910
Hello.

00:00:05.910 --> 00:00:06.710
Welcome to my talk.

00:00:06.710 --> 00:00:08.950
We're going to go
over system sleep.

00:00:08.950 --> 00:00:10.980
I know you're all
really excited.

00:00:10.980 --> 00:00:13.347
And I'm excited, because you
all decided to come in here

00:00:13.347 --> 00:00:15.930
and spend an hour listening to
me as I try to convince you not

00:00:15.930 --> 00:00:19.040
to do anything, like, at all.

00:00:19.040 --> 00:00:20.380
Just don't even touch your app.

00:00:20.380 --> 00:00:20.910
OK.

00:00:20.910 --> 00:00:24.280
So I guess the
first question is,

00:00:24.280 --> 00:00:25.780
why should you listen to me?

00:00:25.780 --> 00:00:28.250
Here's a copy of my
bio from the website.

00:00:28.250 --> 00:00:31.270
You can read it
again if you want to.

00:00:31.270 --> 00:00:35.460
But not listed on this is I
work at Google, obviously.

00:00:35.460 --> 00:00:37.910
I am an Developer
Advocate for Android.

00:00:37.910 --> 00:00:40.260
And recently, I co-founded
this initiative called

00:00:40.260 --> 00:00:41.490
Android Development Patterns.

00:00:41.490 --> 00:00:42.610
We have a bunch
of videos online.

00:00:42.610 --> 00:00:44.090
We put out pro tips every week.

00:00:44.090 --> 00:00:46.610
And the intent here
is to teach people

00:00:46.610 --> 00:00:50.030
how to do best practices, how
to build better apps by knowing

00:00:50.030 --> 00:00:51.460
how to make a
decision as opposed

00:00:51.460 --> 00:00:53.380
to how to implement an
API, because we have

00:00:53.380 --> 00:00:56.050
a lot of coverage on the Java
docs, and in our documentation,

00:00:56.050 --> 00:00:57.900
and on our other videos
on how things work.

00:00:57.900 --> 00:01:00.190
And we want to teach
when and why things work,

00:01:00.190 --> 00:01:02.530
and then how to
make that decision.

00:01:02.530 --> 00:01:03.590
Am I talking too fast?

00:01:03.590 --> 00:01:04.870
Sorry.

00:01:04.870 --> 00:01:05.410
OK.

00:01:05.410 --> 00:01:07.539
And so that's what ADP is about.

00:01:07.539 --> 00:01:09.830
The other thing that I did
this year that's really cool

00:01:09.830 --> 00:01:12.520
is I created the Advanced
Android App Development

00:01:12.520 --> 00:01:13.540
course with Udacity.

00:01:13.540 --> 00:01:16.204
And so we have this super cool
Nanodegree, which is awesome.

00:01:16.204 --> 00:01:18.620
Teaches you everything you
need to know or just the pieces

00:01:18.620 --> 00:01:19.930
that you might have missed.

00:01:19.930 --> 00:01:22.972
And my course is the
second part of that.

00:01:22.972 --> 00:01:25.430
And once you've learned the
basics of the operating system,

00:01:25.430 --> 00:01:26.700
you want to learn
the fancier things,

00:01:26.700 --> 00:01:29.033
like maybe how to integrate
with Google Cloud Messenger.

00:01:29.033 --> 00:01:31.140
And so that's the kind
of stuff that we cover.

00:01:31.140 --> 00:01:33.600
And we're really trying
to help you build not just

00:01:33.600 --> 00:01:35.580
a simple sample
app, but to walk you

00:01:35.580 --> 00:01:37.760
through how something
works in its entirety,

00:01:37.760 --> 00:01:39.670
and when you have to go back
and iterate on the same app

00:01:39.670 --> 00:01:40.878
that you've already finished.

00:01:40.878 --> 00:01:43.400
We're trying to get more into
that developer experience

00:01:43.400 --> 00:01:45.108
when we're teaching,
and so that it feels

00:01:45.108 --> 00:01:47.700
more true to what your
life is and your experience

00:01:47.700 --> 00:01:49.470
is going to be.

00:01:49.470 --> 00:01:51.980
And then if it helps, I actually
started learning Android

00:01:51.980 --> 00:01:53.734
last February, 2014.

00:01:53.734 --> 00:01:55.400
And so I just want
to say that as, like,

00:01:55.400 --> 00:01:56.912
a point of, hopefully, comfort.

00:01:56.912 --> 00:01:59.370
You don't have to have been
doing this since the beginning,

00:01:59.370 --> 00:02:00.960
and you don't have to have been
doing this for a very long time

00:02:00.960 --> 00:02:03.590
to really pick it up and run
with it, because it does change

00:02:03.590 --> 00:02:04.090
every year.

00:02:04.090 --> 00:02:05.870
And you can really
get caught up quickly.

00:02:05.870 --> 00:02:06.380
OK.

00:02:06.380 --> 00:02:07.390
So maybe listen to me.

00:02:07.390 --> 00:02:09.289
But if you don't, that's OK.

00:02:09.289 --> 00:02:11.560
So today, the reason
we are all in this room

00:02:11.560 --> 00:02:14.060
is because battery
actually matters

00:02:14.060 --> 00:02:16.940
almost more than anything
else that we have.

00:02:16.940 --> 00:02:18.950
And there has been
tons of press on this.

00:02:18.950 --> 00:02:20.987
You see studies all
the time comparing

00:02:20.987 --> 00:02:23.070
this device to that device,
which one runs better,

00:02:23.070 --> 00:02:24.404
or this carrier to that carrier.

00:02:24.404 --> 00:02:25.986
This one's clearly
better for battery.

00:02:25.986 --> 00:02:27.140
It doesn't burn your radio.

00:02:27.140 --> 00:02:30.630
Or buy this new thing,
because this tablet will

00:02:30.630 --> 00:02:32.620
last all month, and
this other one will only

00:02:32.620 --> 00:02:33.650
last a couple of days.

00:02:33.650 --> 00:02:36.110
And everybody really
cares about getting power,

00:02:36.110 --> 00:02:38.057
but nobody wants
to give up using.

00:02:38.057 --> 00:02:39.390
And so it's kind of a trade-off.

00:02:39.390 --> 00:02:41.260
And this is this big
problem for users

00:02:41.260 --> 00:02:44.160
that everyone was
trying to solve.

00:02:44.160 --> 00:02:46.470
So what we're
going to talk about

00:02:46.470 --> 00:02:48.040
is how to solve
this by not making

00:02:48.040 --> 00:02:49.700
it worse with background tasks.

00:02:49.700 --> 00:02:51.545
And so clearly, you
know how this works.

00:02:51.545 --> 00:02:53.920
You've got your activity, it
kicks off a background task,

00:02:53.920 --> 00:02:54.930
your activity continues.

00:02:54.930 --> 00:02:57.160
This is good for users,
because you're not

00:02:57.160 --> 00:02:58.660
hanging up on the frame rate.

00:02:58.660 --> 00:03:01.312
But what this is bad
for is the device,

00:03:01.312 --> 00:03:03.020
because we get into
this situation, where

00:03:03.020 --> 00:03:06.145
every app kicks off its
own background sync or job.

00:03:06.145 --> 00:03:08.020
And none of them are
talking to anybody else,

00:03:08.020 --> 00:03:09.834
and nobody knows
what's going on.

00:03:09.834 --> 00:03:11.250
Everybody just
knows, like, I want

00:03:11.250 --> 00:03:13.870
to get this done at some
point, and it doesn't really

00:03:13.870 --> 00:03:18.280
matter when, so long as it's
done in time when I need it.

00:03:18.280 --> 00:03:20.530
And this is what's worse,
because all of these things,

00:03:20.530 --> 00:03:23.540
if you can't coalesce them,
you can't optimize for them.

00:03:23.540 --> 00:03:25.922
So we want to, at the end
of our talk, move to this.

00:03:25.922 --> 00:03:27.880
We want to be able to
say, three different apps

00:03:27.880 --> 00:03:30.510
need to run a sync by this
time or under these conditions.

00:03:30.510 --> 00:03:31.545
Run them all together.

00:03:31.545 --> 00:03:33.670
And then later on, another
app needs to run a sync.

00:03:33.670 --> 00:03:35.211
Like, let's run that
one when it can.

00:03:35.211 --> 00:03:38.560
We want to be able to do this
in bulk every time we can

00:03:38.560 --> 00:03:40.740
and not every 30 minutes
for somebody new.

00:03:40.740 --> 00:03:43.250
And this is what's going to
save device battery the most,

00:03:43.250 --> 00:03:46.200
because we can just not wake up
the CPU if it's not being used.

00:03:46.200 --> 00:03:48.340
And we can not
drain the power when

00:03:48.340 --> 00:03:52.900
nobody's even in the room,
which brings us to Doze mode.

00:03:52.900 --> 00:03:55.840
Doze mode was introduced
in Android Marshmallow.

00:03:55.840 --> 00:03:57.410
And the reason that
it was introduced

00:03:57.410 --> 00:04:00.660
was so that we could, as
a framework, take control.

00:04:00.660 --> 00:04:03.150
Other apps don't have insight
into what everyone is doing.

00:04:03.150 --> 00:04:05.220
And you can only go so
far to make your app OK.

00:04:05.220 --> 00:04:07.040
But if the framework
doesn't help,

00:04:07.040 --> 00:04:09.770
we can't ever get
to that ideal state.

00:04:09.770 --> 00:04:11.576
So unfortunately,
it doesn't really

00:04:11.576 --> 00:04:12.950
matter what API
you're targeting.

00:04:12.950 --> 00:04:14.616
If your user is on a
Marshmallow device,

00:04:14.616 --> 00:04:15.960
this is going to affect you.

00:04:15.960 --> 00:04:18.100
It goes back through all
SDKs for any device that

00:04:18.100 --> 00:04:19.470
actually supports Marshmallow.

00:04:19.470 --> 00:04:21.845
And that's why you need to
start thinking about it today,

00:04:21.845 --> 00:04:24.310
because you won't know if
your users are really affected

00:04:24.310 --> 00:04:26.560
or not.

00:04:26.560 --> 00:04:28.310
So with Doze, we released this.

00:04:28.310 --> 00:04:30.782
We got a lot of good press,
a lot of really good feedback

00:04:30.782 --> 00:04:31.990
from the developer community.

00:04:31.990 --> 00:04:34.090
So you would think we'd have
a really good list of goals

00:04:34.090 --> 00:04:34.930
for why we did it.

00:04:34.930 --> 00:04:35.667
But we don't.

00:04:35.667 --> 00:04:36.700
We only have one.

00:04:36.700 --> 00:04:38.450
We just want to preserve
the battery life,

00:04:38.450 --> 00:04:41.460
because by doing that,
we're creating a better user

00:04:41.460 --> 00:04:42.480
experience.

00:04:42.480 --> 00:04:45.000
And that's what everyone, when
you're creating an operating

00:04:45.000 --> 00:04:46.570
system, you need to emphasize.

00:04:46.570 --> 00:04:48.280
So this is our one
goal for Doze--

00:04:48.280 --> 00:04:50.490
do whatever we need
to to preserve battery

00:04:50.490 --> 00:04:51.870
when we're in an idle state.

00:04:51.870 --> 00:04:53.412
When the user's not
using it, we need

00:04:53.412 --> 00:04:55.495
to do everything we can
see so that when they pick

00:04:55.495 --> 00:04:57.690
their phone back up,
we're exactly at the 17%

00:04:57.690 --> 00:04:59.530
that they had left.

00:04:59.530 --> 00:05:01.210
But I have my own
goal for this talk.

00:05:01.210 --> 00:05:02.170
And here's that goal.

00:05:02.170 --> 00:05:06.860
I want you to learn to accept
that your user has a life.

00:05:06.860 --> 00:05:09.225
You're spending so long
building this great app

00:05:09.225 --> 00:05:11.850
that you're really invested in,
and you want your users to use.

00:05:11.850 --> 00:05:13.260
And that's great.

00:05:13.260 --> 00:05:14.909
You should keep doing that.

00:05:14.909 --> 00:05:16.950
But you should understand
what success means when

00:05:16.950 --> 00:05:18.920
we're talking about an app.

00:05:18.920 --> 00:05:22.185
At Google, we actually count
success-- like Larry Page

00:05:22.185 --> 00:05:23.560
will be super
proud of you if you

00:05:23.560 --> 00:05:25.450
can pass his toothbrush test.

00:05:25.450 --> 00:05:28.620
And that means if your user is
using your product two times

00:05:28.620 --> 00:05:30.730
a day for a couple
of minutes a day.

00:05:30.730 --> 00:05:32.077
That is successful.

00:05:32.077 --> 00:05:34.160
So we're going for, like,
what, five minutes here?

00:05:34.160 --> 00:05:37.650
Which means there's 23 hours
and 55 minutes in every day when

00:05:37.650 --> 00:05:39.740
your user is not
interacting with your app,

00:05:39.740 --> 00:05:42.217
but you're super
duper successful.

00:05:42.217 --> 00:05:43.800
And when you think
about it like that,

00:05:43.800 --> 00:05:46.008
it changes the way that you
actually design your app,

00:05:46.008 --> 00:05:48.340
because you're
not going for them

00:05:48.340 --> 00:05:49.707
using your app all day long.

00:05:49.707 --> 00:05:51.790
You're not going for
constant, glued to the thing,

00:05:51.790 --> 00:05:53.780
tripping over, getting
run over by a car.

00:05:53.780 --> 00:05:55.154
You're going for
something that's

00:05:55.154 --> 00:05:59.260
useful that they'll come back
and tell their friends about,

00:05:59.260 --> 00:06:01.819
which means you don't need to
be updating every 20 minutes.

00:06:01.819 --> 00:06:03.860
You just need to be ready
when they're using you,

00:06:03.860 --> 00:06:05.640
which goes into what is Doze?

00:06:05.640 --> 00:06:08.450
So Doze is when your
device is fully idle.

00:06:08.450 --> 00:06:10.130
And what does that
actually mean?

00:06:10.130 --> 00:06:13.369
So what we've got here is
network access is blocked.

00:06:13.369 --> 00:06:15.660
If the device is not being
used, if we're in idle mode,

00:06:15.660 --> 00:06:18.020
we don't allow network
access by anyone.

00:06:18.020 --> 00:06:19.470
We just turn off the radio.

00:06:19.470 --> 00:06:21.980
And that's going to
save us so much battery.

00:06:21.980 --> 00:06:23.590
We also ignore wakelocks.

00:06:23.590 --> 00:06:24.090
Sorry.

00:06:24.090 --> 00:06:24.765
We're in Doze mode.

00:06:24.765 --> 00:06:27.181
We don't really care that you
wanted to do something or go

00:06:27.181 --> 00:06:29.440
on any further.

00:06:29.440 --> 00:06:31.440
Any alarms that you set
with your Alarm Manager,

00:06:31.440 --> 00:06:32.875
those are going to be deferred.

00:06:32.875 --> 00:06:34.750
They're not going to
run while we're in Doze.

00:06:34.750 --> 00:06:36.260
But because we'll have
missed the time window,

00:06:36.260 --> 00:06:38.870
they'll all trigger as soon
as we exit out of Doze mode.

00:06:38.870 --> 00:06:41.832
And finally, your syncs and
jobs, they just won't run.

00:06:41.832 --> 00:06:43.790
They won't get deleted,
they won't get dropped.

00:06:43.790 --> 00:06:45.630
But they will not run
through Doze mode, which

00:06:45.630 --> 00:06:47.620
means when we exit Doze mode
and all those conditions

00:06:47.620 --> 00:06:49.780
are met again, we'll run
them as soon as we exit,

00:06:49.780 --> 00:06:51.150
unless, of course,
your time-to-life

00:06:51.150 --> 00:06:52.760
has expired, because
it's no longer relevant.

00:06:52.760 --> 00:06:55.490
But we're not just deleting
them because we're in Idle mode.

00:06:55.490 --> 00:06:58.270
And I know that this sounds
kind of frustrating and kind of

00:06:58.270 --> 00:06:59.919
scary, because as
a developer, you

00:06:59.919 --> 00:07:02.210
need to know the state that
your app is going to be in.

00:07:02.210 --> 00:07:04.490
And it seems like this
framework is standing up here,

00:07:04.490 --> 00:07:06.320
telling you, we
don't really care,

00:07:06.320 --> 00:07:07.430
we're deleting all
of your hard work.

00:07:07.430 --> 00:07:09.221
And that's really not
true, which goes back

00:07:09.221 --> 00:07:11.704
to my first point of
in 43 more minutes,

00:07:11.704 --> 00:07:13.370
I want you to walk
out of here thinking,

00:07:13.370 --> 00:07:15.840
I'm not going to change
my app, because I'm not

00:07:15.840 --> 00:07:17.210
being hurt or damaged.

00:07:17.210 --> 00:07:19.620
I'm just being maybe delayed.

00:07:19.620 --> 00:07:21.926
So let's talk about how
we get into Doze mode.

00:07:21.926 --> 00:07:25.290
Doze mode is triggered when
the device is not charging,

00:07:25.290 --> 00:07:27.060
and the screen is
off, and the device

00:07:27.060 --> 00:07:28.700
has not moved in a long while.

00:07:28.700 --> 00:07:31.960
So what that looks like with
your phone, I put it down,

00:07:31.960 --> 00:07:32.952
I kind of walk away.

00:07:32.952 --> 00:07:34.410
I'm doing something
more important,

00:07:34.410 --> 00:07:35.860
like talking to you guys.

00:07:35.860 --> 00:07:39.285
But when I come back over
there, I better still be at 58%.

00:07:39.285 --> 00:07:40.660
I'm going to be
really frustrated

00:07:40.660 --> 00:07:43.866
if I get back here at the end
of this hour and I'm down to 13,

00:07:43.866 --> 00:07:45.740
because I was playing
a game with my friends,

00:07:45.740 --> 00:07:48.527
and it kept updating
while I wasn't using it.

00:07:48.527 --> 00:07:50.360
That's just not a good
developer experience.

00:07:50.360 --> 00:07:52.800
We really need users to
trust that their device is

00:07:52.800 --> 00:07:55.320
in the state that they left it.

00:07:55.320 --> 00:07:58.460
So the trade-off, though, is
that as soon as I put it down,

00:07:58.460 --> 00:07:59.800
I'm not already dosing.

00:07:59.800 --> 00:08:02.570
It doesn't happen as soon
as basic conditions are met.

00:08:02.570 --> 00:08:05.070
We're actually going
to step into it.

00:08:05.070 --> 00:08:06.960
This is a timeline of
what Doze looks like.

00:08:06.960 --> 00:08:09.632
We start with--
like, everything that

00:08:09.632 --> 00:08:10.840
is required to get into Doze.

00:08:10.840 --> 00:08:12.920
And then you'll see that Doze
actually will give itself

00:08:12.920 --> 00:08:13.560
some maintenance windows.

00:08:13.560 --> 00:08:14.940
So we'll come back to that.

00:08:14.940 --> 00:08:17.040
But this image, which
lives in our docs,

00:08:17.040 --> 00:08:20.580
is kind of trying to
explain to you that we have

00:08:20.580 --> 00:08:22.450
these checkpoints that happen.

00:08:22.450 --> 00:08:24.760
We check for sensing,
we check for motion,

00:08:24.760 --> 00:08:27.250
we check for pattern, we
check for [INAUDIBLE],

00:08:27.250 --> 00:08:28.820
so that if you're
just walking away

00:08:28.820 --> 00:08:30.740
to wash your hands or whatever,
you're not going to come back

00:08:30.740 --> 00:08:32.299
and your phone's out of date.

00:08:32.299 --> 00:08:34.365
We're stepping into Doze
from an inactive state,

00:08:34.365 --> 00:08:38.100
so that we can be plenty
confident that the user is

00:08:38.100 --> 00:08:39.650
actually done right now.

00:08:39.650 --> 00:08:42.179
Like, they're doing
something else.

00:08:42.179 --> 00:08:42.770
OK.

00:08:42.770 --> 00:08:46.102
So those states are controlled
by DeviceIdleController.

00:08:46.102 --> 00:08:47.560
You can actually
look into the AOSP

00:08:47.560 --> 00:08:49.204
if you want to know
how this works.

00:08:49.204 --> 00:08:50.620
But all you need
to really believe

00:08:50.620 --> 00:08:54.150
me is that you've got a good
solid two hours of inactivity

00:08:54.150 --> 00:08:56.120
probably before we
get into Doze mode.

00:08:56.120 --> 00:08:58.450
So you won't end
up in a state where

00:08:58.450 --> 00:09:01.860
your app is just cut off in
the middle of doing something.

00:09:01.860 --> 00:09:04.280
So Active is where the device
is actually being used.

00:09:04.280 --> 00:09:05.700
That's pretty obvious, right?

00:09:05.700 --> 00:09:07.930
And Inactive is obviously
where it's not being used.

00:09:07.930 --> 00:09:09.840
The screen has been turned
off and there's no motion.

00:09:09.840 --> 00:09:10.950
We're not navigating.

00:09:10.950 --> 00:09:12.079
We're not playing a song.

00:09:12.079 --> 00:09:13.870
We don't have a foreground
process running.

00:09:13.870 --> 00:09:17.540
We're just chilling in
someone's purse, right?

00:09:17.540 --> 00:09:19.940
And then after half an
hour, DeviceIdleController

00:09:19.940 --> 00:09:22.220
kicks back up, kicks
into Idle Pending

00:09:22.220 --> 00:09:24.154
mode, because it saw
that we were inactive.

00:09:24.154 --> 00:09:24.820
Nothing changed.

00:09:24.820 --> 00:09:26.153
No other signals were processed.

00:09:26.153 --> 00:09:27.340
And now we're just pending.

00:09:27.340 --> 00:09:28.860
So we've been
inactive for a while.

00:09:28.860 --> 00:09:31.831
We may become idle, but we're
waiting to be confident.

00:09:31.831 --> 00:09:34.330
And once we're confident half
an hour later, we're like, OK,

00:09:34.330 --> 00:09:34.980
we're idle.

00:09:34.980 --> 00:09:36.050
This is Doze everybody.

00:09:36.050 --> 00:09:37.080
This is happening.

00:09:37.080 --> 00:09:38.879
Shut it down.

00:09:38.879 --> 00:09:40.670
And then you saw those
maintenance windows.

00:09:40.670 --> 00:09:42.378
That's measured by
Idle Maintenance mode.

00:09:42.378 --> 00:09:44.337
And we also have a Sensing
and a Locating mode.

00:09:44.337 --> 00:09:46.044
And if you want to
know more about those,

00:09:46.044 --> 00:09:48.640
you can actually go look
them up in the documentation.

00:09:48.640 --> 00:09:51.782
They just are with
getting to these states.

00:09:51.782 --> 00:09:53.490
So if you go back to
look at our picture,

00:09:53.490 --> 00:09:55.980
you'll see that we've moved
it through all of these states

00:09:55.980 --> 00:09:57.960
with all of our constant checks.

00:09:57.960 --> 00:10:00.640
And we have gotten to the
point where, OK, yeah, we

00:10:00.640 --> 00:10:03.119
were sensing, not sensing,
locating not locating.

00:10:03.119 --> 00:10:04.160
But we're still inactive.

00:10:04.160 --> 00:10:05.650
We've gotten to Idle.

00:10:05.650 --> 00:10:08.300
And so Idle Maintenance,
these other windows,

00:10:08.300 --> 00:10:11.355
is actually where we step out
of Doze, because we understand

00:10:11.355 --> 00:10:13.980
that you don't want to be out of
date when the user comes back,

00:10:13.980 --> 00:10:14.480
right?

00:10:14.480 --> 00:10:17.030
And so what we're going
to do is we're going to,

00:10:17.030 --> 00:10:19.050
every so often in
the Idle period,

00:10:19.050 --> 00:10:20.544
we'll just give
everyone a break--

00:10:20.544 --> 00:10:22.960
let them run their syncs, their
jobs, update any content--

00:10:22.960 --> 00:10:25.110
and then go straight
back into Idle mode.

00:10:25.110 --> 00:10:27.889
And this is clean,
because it's our goal.

00:10:27.889 --> 00:10:29.180
We got to a maintenance window.

00:10:29.180 --> 00:10:30.846
Now we get to run
everything in a batch.

00:10:30.846 --> 00:10:33.165
Everything that's pending
gets a chance to go.

00:10:33.165 --> 00:10:35.290
And the user still hasn't
come back to their phone.

00:10:35.290 --> 00:10:37.420
So there's really no actual
change to the device,

00:10:37.420 --> 00:10:41.240
but your app gets a chance to
update any potential conflicts

00:10:41.240 --> 00:10:43.250
or content that needs to go.

00:10:43.250 --> 00:10:46.400
So look, we're so close to
solving our battery problem.

00:10:46.400 --> 00:10:48.010
Like, we're there.

00:10:48.010 --> 00:10:51.414
We had our little--
I can't go backward.

00:10:51.414 --> 00:10:52.205
That's unfortunate.

00:10:56.070 --> 00:10:56.920
I am bad at slides.

00:10:59.630 --> 00:11:00.130
OK.

00:11:00.130 --> 00:11:01.275
So we had our window.

00:11:01.275 --> 00:11:02.460
We got to hit our window.

00:11:02.460 --> 00:11:03.960
We got to run all
of our batch jobs.

00:11:03.960 --> 00:11:05.740
And we hit our goal.

00:11:05.740 --> 00:11:08.240
So now that you understand
how these states work-- which,

00:11:08.240 --> 00:11:09.370
and the reason I went
into this background

00:11:09.370 --> 00:11:10.745
is so that you'll
understand what

00:11:10.745 --> 00:11:12.940
it means when I tell you
to test your app for Doze,

00:11:12.940 --> 00:11:15.110
because we have these super
great adb commands that

00:11:15.110 --> 00:11:16.820
will let you step
through all the states,

00:11:16.820 --> 00:11:19.460
so you can see what your
app is doing along the way.

00:11:19.460 --> 00:11:20.360
And you wouldn't
really understand

00:11:20.360 --> 00:11:21.840
what I meant by "step"
if you didn't understand

00:11:21.840 --> 00:11:23.050
what I meant by "stages."

00:11:23.050 --> 00:11:23.550
See?

00:11:23.550 --> 00:11:24.640
See how I did that?

00:11:24.640 --> 00:11:25.240
OK.

00:11:25.240 --> 00:11:27.492
So your focus is on
observing behavior

00:11:27.492 --> 00:11:28.450
when you're doing this.

00:11:28.450 --> 00:11:30.699
And you're seeing whether
your app recovers gracefully

00:11:30.699 --> 00:11:31.720
when Doze exits.

00:11:31.720 --> 00:11:33.270
Because remember,
we're aiming to not

00:11:33.270 --> 00:11:36.032
have to do any work as
a result of this mode.

00:11:36.032 --> 00:11:37.740
So when you're looking
at this adb thing,

00:11:37.740 --> 00:11:39.156
dumpsys is just a
binary that lets

00:11:39.156 --> 00:11:40.649
you access other tools by name.

00:11:40.649 --> 00:11:41.940
And then you've got deviceIdle.

00:11:41.940 --> 00:11:43.760
And this is a new
service that was

00:11:43.760 --> 00:11:46.440
introduced, so that
you could manage

00:11:46.440 --> 00:11:48.092
the DeviceIdleController.

00:11:48.092 --> 00:11:50.300
And then obviously, step
will let you do those steps.

00:11:50.300 --> 00:11:54.360
And h will show you all
the other options you have.

00:11:54.360 --> 00:11:56.410
And then the other
key to testing

00:11:56.410 --> 00:11:58.950
is you need to indicate that
the device has to be unplugged.

00:11:58.950 --> 00:12:00.730
Most likely, when you're testing
and running out your db cans,

00:12:00.730 --> 00:12:02.901
you've plugged in your
phone to the computer,

00:12:02.901 --> 00:12:03.900
and now you're charging.

00:12:03.900 --> 00:12:05.950
So you have to cancel that.

00:12:05.950 --> 00:12:09.110
But when you're stepping through
and you're testing your device,

00:12:09.110 --> 00:12:11.910
all you're seeing
here is whether or not

00:12:11.910 --> 00:12:14.390
you're surprised by
anything, whether or not

00:12:14.390 --> 00:12:18.190
that pause has actually broken
a part of your app behavior.

00:12:18.190 --> 00:12:20.220
And the idea here,
when we created this,

00:12:20.220 --> 00:12:23.890
is that it shouldn't,
because everything's on hold.

00:12:23.890 --> 00:12:24.952
Everything's been paused.

00:12:24.952 --> 00:12:26.660
The user's not anywhere
near their phone.

00:12:26.660 --> 00:12:29.230
And yet, you're getting
a chance to still update

00:12:29.230 --> 00:12:31.600
any potential content.

00:12:31.600 --> 00:12:34.860
So now the question is, how
do we get out of Doze mode?

00:12:34.860 --> 00:12:38.870
And what does it
really mean when we've

00:12:38.870 --> 00:12:40.680
called it quits and we're done?

00:12:40.680 --> 00:12:43.020
So the clear one here is that
the device is plugged in.

00:12:43.020 --> 00:12:46.049
We don't care anymore
about whether or not

00:12:46.049 --> 00:12:48.090
we're preserving battery,
because we're charging.

00:12:48.090 --> 00:12:51.880
Or if the device is picked
up-- I'm so bad at slides--

00:12:51.880 --> 00:12:54.377
then the user's clearly
interested in using it again.

00:12:54.377 --> 00:12:56.960
The other thing, though, is that
if there's an alarm-- and not

00:12:56.960 --> 00:13:00.334
an Alarm Manager alarm, but an
alarm, like an alarm clock--

00:13:00.334 --> 00:13:02.500
then we're going to exit
Doze mode well before that,

00:13:02.500 --> 00:13:04.916
so everyone has a chance to
sync before that user wakes up

00:13:04.916 --> 00:13:05.620
from their nap.

00:13:05.620 --> 00:13:07.720
Like, that's a really
key thing here.

00:13:07.720 --> 00:13:09.720
So we've built
this entire system

00:13:09.720 --> 00:13:12.000
with one goal, of
preserving the battery life.

00:13:12.000 --> 00:13:15.060
And then we built it around
making a great user experience,

00:13:15.060 --> 00:13:17.000
so they never know that
their device was idle.

00:13:17.000 --> 00:13:19.440
All they know is that they
were gone for two days,

00:13:19.440 --> 00:13:20.750
because they were hanging
out with their friends

00:13:20.750 --> 00:13:22.333
and going camping,
and they came back,

00:13:22.333 --> 00:13:23.750
and their tablet still works.

00:13:23.750 --> 00:13:24.940
They pick it up,
everything's great,

00:13:24.940 --> 00:13:25.900
and the tablet's still charged.

00:13:25.900 --> 00:13:27.040
Like, it didn't die.

00:13:27.040 --> 00:13:28.690
And that's a
phenomenal experience.

00:13:28.690 --> 00:13:30.190
And if we can nail
that, we're going

00:13:30.190 --> 00:13:33.200
to really, really make it so
that everything just is great.

00:13:33.200 --> 00:13:35.450
And it also means that your
app is no longer to blame,

00:13:35.450 --> 00:13:36.600
and the battery list,
and they come back,

00:13:36.600 --> 00:13:37.800
and their thing is
dead, and they're

00:13:37.800 --> 00:13:40.020
like, why was the news
running if I wasn't even here

00:13:40.020 --> 00:13:40.640
to read it?

00:13:40.640 --> 00:13:42.960
That doesn't make
any sense to me.

00:13:42.960 --> 00:13:45.182
So hopefully, you don't
have to do anything.

00:13:45.182 --> 00:13:47.640
You tested your app once, made
sure nothing wonky happened.

00:13:47.640 --> 00:13:50.007
And then you're just all, OK,
great, I'm good, I'm done.

00:13:50.007 --> 00:13:51.590
But if you actually
do have a use case

00:13:51.590 --> 00:13:54.380
and you want to adapt
your app for Doze,

00:13:54.380 --> 00:13:56.470
here's what you need to do.

00:13:56.470 --> 00:13:58.477
First step, consider
the flow of your app.

00:13:58.477 --> 00:13:59.560
Kind of talked about this.

00:13:59.560 --> 00:14:00.900
But will Doze affect it?

00:14:00.900 --> 00:14:03.222
If you think about how
your background syncs run

00:14:03.222 --> 00:14:04.930
and your jobs run,
how important are they

00:14:04.930 --> 00:14:08.170
to the core function of your
app when it's on a time schedule

00:14:08.170 --> 00:14:10.110
or what expectations
your app has

00:14:10.110 --> 00:14:12.016
for something
being done already,

00:14:12.016 --> 00:14:13.390
likely, this
shouldn't affect it.

00:14:13.390 --> 00:14:15.600
Because like I said, we
stepped into this carefully.

00:14:15.600 --> 00:14:18.000
We accounted for things like
alarm clocks and the user

00:14:18.000 --> 00:14:18.769
usage.

00:14:18.769 --> 00:14:21.310
But you know, if it does, you'll
want to take a look at that.

00:14:21.310 --> 00:14:23.740
So a common solution
here-- and this is actually

00:14:23.740 --> 00:14:26.360
just a general best practice--
is to use downstream messaging.

00:14:26.360 --> 00:14:29.124
If your server is expecting
your device to check in on it

00:14:29.124 --> 00:14:30.540
and it misses that
connection, you

00:14:30.540 --> 00:14:31.770
might think that
something's wrong.

00:14:31.770 --> 00:14:34.140
But if you've built your app
so that your server sends

00:14:34.140 --> 00:14:35.890
interesting information to
the device instead of having

00:14:35.890 --> 00:14:37.490
to have a call-in,
then you're going

00:14:37.490 --> 00:14:40.250
to have just a much better
user experience in general.

00:14:40.250 --> 00:14:42.630
And then if you're using
Google Cloud Messaging,

00:14:42.630 --> 00:14:45.421
you can take this further
and have a High Priority tag.

00:14:45.421 --> 00:14:46.420
It's really easy to add.

00:14:46.420 --> 00:14:48.930
You just add
priority-high to your data

00:14:48.930 --> 00:14:51.060
as you build your
object for your message.

00:14:51.060 --> 00:14:53.850
But a high-priority tag is
going to be given exceptions

00:14:53.850 --> 00:14:54.760
from Doze mode.

00:14:54.760 --> 00:14:58.364
It's going to be given a
chance to wake up a receiver,

00:14:58.364 --> 00:15:00.280
process that message,
potentially react to it.

00:15:00.280 --> 00:15:02.530
Maybe you need to generate
a notification off of that.

00:15:02.530 --> 00:15:04.794
And this gives you a
temporary reprieve from Doze.

00:15:04.794 --> 00:15:06.960
So most likely, you'll go
right back into Idle mode.

00:15:06.960 --> 00:15:09.420
But if that notification
draws the user's attention,

00:15:09.420 --> 00:15:11.793
then you're going to be able
to exit Doze mode entirely,

00:15:11.793 --> 00:15:13.080
because the device will
have been picked up.

00:15:13.080 --> 00:15:14.538
So you really get
a chance to react

00:15:14.538 --> 00:15:17.460
to anything that's critical,
like real-time messaging,

00:15:17.460 --> 00:15:20.040
and all kinds of apps like
that, or maybe a severe weather

00:15:20.040 --> 00:15:20.300
alert.

00:15:20.300 --> 00:15:22.800
I mean, it could be any kind
of thing that might drive them.

00:15:22.800 --> 00:15:23.965
But it's not everything.

00:15:23.965 --> 00:15:25.980
And I want to stress this,
because high-priority

00:15:25.980 --> 00:15:27.020
should be treated with care.

00:15:27.020 --> 00:15:28.590
And what high priority
really means--

00:15:28.590 --> 00:15:30.620
and it's very simple
to remember this--

00:15:30.620 --> 00:15:34.572
is if I have to get up,
walk across the room,

00:15:34.572 --> 00:15:37.030
pick up my phone when I was
doing something more important,

00:15:37.030 --> 00:15:38.770
like giving a talk,
and look at it,

00:15:38.770 --> 00:15:40.020
it better have been worth it.

00:15:40.020 --> 00:15:41.770
And if it's not worth
it, because you just

00:15:41.770 --> 00:15:43.980
wanted to tell me that I
got a poke from a friend,

00:15:43.980 --> 00:15:45.434
that's not the same thing.

00:15:45.434 --> 00:15:46.850
So not everything's
high priority,

00:15:46.850 --> 00:15:48.752
which is why you add
the tag to what counts.

00:15:48.752 --> 00:15:50.460
And then the rest of
the time, everything

00:15:50.460 --> 00:15:52.793
will be processed normally
as soon as the device is idle

00:15:52.793 --> 00:15:53.430
again.

00:15:53.430 --> 00:15:55.510
So we're really trying
to build overall

00:15:55.510 --> 00:16:00.551
just a great user experience
with this entire program.

00:16:00.551 --> 00:16:01.050
OK.

00:16:01.050 --> 00:16:04.200
The other thing is something's
legitimately are time-critical.

00:16:04.200 --> 00:16:07.030
You really do need it to trigger
at exactly the right moment.

00:16:07.030 --> 00:16:09.582
Maybe you have a
reminder app or maybe you

00:16:09.582 --> 00:16:11.710
have calendar invites going.

00:16:11.710 --> 00:16:15.360
And these, we actually built
an alternative for you.

00:16:15.360 --> 00:16:17.510
We created new
Alarm Manager calls.

00:16:17.510 --> 00:16:19.280
So instead of calling
set or setExact,

00:16:19.280 --> 00:16:21.630
you'll add AndAllowWhileIdle.

00:16:21.630 --> 00:16:23.950
The methods are actually
exactly the same.

00:16:23.950 --> 00:16:26.160
They take the same
parameters in the same order.

00:16:26.160 --> 00:16:27.420
They're identical to
their counterparts

00:16:27.420 --> 00:16:28.200
in all the calling.

00:16:28.200 --> 00:16:30.616
The only difference is that
they're honored whether or not

00:16:30.616 --> 00:16:31.430
you're in Doze.

00:16:31.430 --> 00:16:34.370
So it's a really easy
swap for any developer.

00:16:34.370 --> 00:16:36.320
But the one restriction
that we added

00:16:36.320 --> 00:16:39.104
is that it can only be triggered
once every 15 minutes, which

00:16:39.104 --> 00:16:41.020
is actually incredibly
reasonable if you think

00:16:41.020 --> 00:16:42.230
about a device in Idle mode.

00:16:42.230 --> 00:16:44.480
If you didn't get the user's
attention the first time,

00:16:44.480 --> 00:16:47.150
they probably don't
care two minutes later.

00:16:47.150 --> 00:16:49.150
15 minutes is actually a
very reasonable window.

00:16:49.150 --> 00:16:51.300
And it allows for things
like a calendar reminder

00:16:51.300 --> 00:16:55.600
without necessarily
triggering every 60 seconds,

00:16:55.600 --> 00:17:00.242
waking up and checking to
see if new content came in.

00:17:00.242 --> 00:17:02.200
And the final thing,
which I already mentioned,

00:17:02.200 --> 00:17:03.530
is you really need
to test your app.

00:17:03.530 --> 00:17:05.599
Like, make sure that you don't
get surprised by anything,

00:17:05.599 --> 00:17:07.329
because if you're
surprised, your user's

00:17:07.329 --> 00:17:08.245
going to be surprised.

00:17:08.245 --> 00:17:10.490
And then that's just going
to result in uninstalls,

00:17:10.490 --> 00:17:12.281
or not using your app,
or lower engagement,

00:17:12.281 --> 00:17:14.020
because they don't
know how to use it.

00:17:14.020 --> 00:17:17.440
So classic advice here all
around, not just for Doze.

00:17:17.440 --> 00:17:19.420
Just test the app and
make sure it works.

00:17:19.420 --> 00:17:20.920
The other thing is
I need to mention

00:17:20.920 --> 00:17:23.420
that there is a white list
for Doze as an exception.

00:17:23.420 --> 00:17:25.977
But it's only for a few
very special use cases

00:17:25.977 --> 00:17:28.060
and is subject to the Play
Store developer policy.

00:17:28.060 --> 00:17:30.285
So most of your apps
probably won't need this.

00:17:30.285 --> 00:17:31.660
But if you do have
questions, you

00:17:31.660 --> 00:17:32.910
can feel free to ask me later.

00:17:32.910 --> 00:17:35.530
Or check the documentation
on how that white list works.

00:17:35.530 --> 00:17:36.040
OK.

00:17:36.040 --> 00:17:36.873
So that's Doze mode.

00:17:36.873 --> 00:17:37.990
It has a counterpart.

00:17:37.990 --> 00:17:39.612
And that's called App Standby.

00:17:39.612 --> 00:17:41.445
And this was also
introduced in Marshmallow,

00:17:41.445 --> 00:17:43.194
also affects all M
devices, whether or not

00:17:43.194 --> 00:17:44.230
you're targeting it.

00:17:44.230 --> 00:17:47.460
But the difference here
is that App Standby

00:17:47.460 --> 00:17:49.860
was created for apps
while the device is still

00:17:49.860 --> 00:17:52.420
running while Doze shuts
down the entire device.

00:17:52.420 --> 00:17:54.660
So while Doze might result
in maybe everything being

00:17:54.660 --> 00:17:57.140
out of sync by about
four hours, App Standby

00:17:57.140 --> 00:17:59.380
could mean that your app
hasn't gotten any attention

00:17:59.380 --> 00:18:00.880
in a couple of days.

00:18:00.880 --> 00:18:03.950
And that's why you have to
think about this differently.

00:18:03.950 --> 00:18:06.710
But again, we have one goal--
preserving battery life.

00:18:06.710 --> 00:18:08.430
And so that's the
main thing to keep

00:18:08.430 --> 00:18:10.610
in mind as you go through this.

00:18:10.610 --> 00:18:12.460
So it's the exact
same problem before.

00:18:12.460 --> 00:18:14.327
We need to achieve
this as much as we can.

00:18:14.327 --> 00:18:15.785
And apps that aren't
being used are

00:18:15.785 --> 00:18:17.670
a drain on the battery
when they're syncing.

00:18:17.670 --> 00:18:19.650
And so we want to
batch all of those,

00:18:19.650 --> 00:18:22.430
and our maintenance windows
will let us do that.

00:18:22.430 --> 00:18:26.420
So kind of like why have both?

00:18:26.420 --> 00:18:28.100
And here's the main use case.

00:18:28.100 --> 00:18:31.240
So App Standby and Doze are
different in the main sense

00:18:31.240 --> 00:18:34.680
of what they affect-- an app
at a time or the entire device.

00:18:34.680 --> 00:18:36.260
They both restrict
network access,

00:18:36.260 --> 00:18:38.390
so that nobody can
access the radio

00:18:38.390 --> 00:18:39.700
while they're in this mode.

00:18:39.700 --> 00:18:41.910
They both halt all
jobs and syncs,

00:18:41.910 --> 00:18:44.040
because those are the
things we want to batch.

00:18:44.040 --> 00:18:46.870
But alarms and
wakelocks are both

00:18:46.870 --> 00:18:49.890
going to be honored while
we are in App Standby.

00:18:49.890 --> 00:18:52.480
And this is what's going to
make all of the difference.

00:18:52.480 --> 00:18:54.680
Because if your app hasn't
been used in a while

00:18:54.680 --> 00:18:56.800
but is put on the
standby list, and then

00:18:56.800 --> 00:18:59.886
your alarm is triggered because
you have maybe a daily reminder

00:18:59.886 --> 00:19:01.510
or you have something
that's important,

00:19:01.510 --> 00:19:03.020
and you need to present
that to the user

00:19:03.020 --> 00:19:04.728
and get their attention
back to your app,

00:19:04.728 --> 00:19:06.260
you're out of App Standby.

00:19:06.260 --> 00:19:08.581
Like, as soon as you
present a notification,

00:19:08.581 --> 00:19:09.330
you're good to go.

00:19:09.330 --> 00:19:10.680
So you're not forced
by the system.

00:19:10.680 --> 00:19:12.471
You're just kind of
halted while the system

00:19:12.471 --> 00:19:13.740
notices you're not being used.

00:19:13.740 --> 00:19:15.240
And then as soon as
you are being used,

00:19:15.240 --> 00:19:16.140
you're immediately released.

00:19:16.140 --> 00:19:17.720
And you have a
little bit of control

00:19:17.720 --> 00:19:19.960
over how that gets triggered.

00:19:19.960 --> 00:19:20.570
OK.

00:19:20.570 --> 00:19:22.490
So when your app is
actually put on standby,

00:19:22.490 --> 00:19:26.010
it's because the
user isn't using you.

00:19:26.010 --> 00:19:27.250
They haven't opened your app.

00:19:27.250 --> 00:19:28.620
They haven't interacted
with your app.

00:19:28.620 --> 00:19:30.210
They haven't really
kind of touched it

00:19:30.210 --> 00:19:33.010
at all in quite a long while.

00:19:33.010 --> 00:19:35.780
And you don't have a foreground
service, or activity,

00:19:35.780 --> 00:19:37.250
or another app
using a foreground

00:19:37.250 --> 00:19:38.220
service that you wrote.

00:19:38.220 --> 00:19:40.720
You're not playing any music,
you're not streaming anything.

00:19:40.720 --> 00:19:42.070
You're just kind of chilling.

00:19:42.070 --> 00:19:45.630
And then finally, you don't
have any pending notifications.

00:19:45.630 --> 00:19:47.464
So this is why honoring
wakelocks and alarms

00:19:47.464 --> 00:19:49.379
are so important, because
you do have a chance

00:19:49.379 --> 00:19:50.790
to get yourself out of standby.

00:19:50.790 --> 00:19:52.870
But for the most
part, you are only

00:19:52.870 --> 00:19:55.970
put on standby, because you
are actually just chilling.

00:19:55.970 --> 00:19:57.270
Like, nobody was using you.

00:19:57.270 --> 00:19:59.180
So it's not that you're
not a successful app.

00:19:59.180 --> 00:20:00.888
You're still passing
the toothbrush test.

00:20:00.888 --> 00:20:04.400
It's just the other
23 hours of the day.

00:20:04.400 --> 00:20:04.910
OK.

00:20:04.910 --> 00:20:08.100
So App Standby ends when
the user launches your app,

00:20:08.100 --> 00:20:10.180
obviously, or the
device is plugged in,

00:20:10.180 --> 00:20:12.300
when all apps are released
from Standby Mode,

00:20:12.300 --> 00:20:14.610
because we don't worry
about power anymore,

00:20:14.610 --> 00:20:16.460
or when any work that
you're doing based

00:20:16.460 --> 00:20:18.230
on your wakelock or
your Alarm Manager

00:20:18.230 --> 00:20:20.310
is creating a notification.

00:20:20.310 --> 00:20:22.850
Super, super easy.

00:20:22.850 --> 00:20:25.370
But I guess you were
kind of wondering,

00:20:25.370 --> 00:20:27.870
like, why really bother with
that if it's so much controlled

00:20:27.870 --> 00:20:29.110
by the developer?

00:20:29.110 --> 00:20:30.570
The main thing
about App Standby is

00:20:30.570 --> 00:20:31.780
when you're in App
Standby mode, we

00:20:31.780 --> 00:20:34.060
offer those periodic maintenance
windows, similar to Doze,

00:20:34.060 --> 00:20:36.393
and you have a guaranteed
maintenance window of at least

00:20:36.393 --> 00:20:38.100
once every 24 hours.

00:20:38.100 --> 00:20:40.540
So think about an app
that you don't use often,

00:20:40.540 --> 00:20:42.324
like maybe a movie
player, right?

00:20:42.324 --> 00:20:43.740
Like, you want it
to be ready when

00:20:43.740 --> 00:20:46.072
you're ready to buy, or
rent, or stream a movie.

00:20:46.072 --> 00:20:47.780
But you're not going
to open it every day

00:20:47.780 --> 00:20:49.350
or multiple times a day.

00:20:49.350 --> 00:20:51.880
However, all of that content
that it offers to you,

00:20:51.880 --> 00:20:53.162
that's licensed content.

00:20:53.162 --> 00:20:55.120
And if you don't update
that license regularly,

00:20:55.120 --> 00:20:57.510
you're legally obligated
to delete the content,

00:20:57.510 --> 00:20:59.730
because it's an
ownership question.

00:20:59.730 --> 00:21:01.880
And so in order to let
the content be refreshed,

00:21:01.880 --> 00:21:04.000
and change the list of
movies, and in order

00:21:04.000 --> 00:21:06.416
to make sure they're all valid
from the things you already

00:21:06.416 --> 00:21:09.130
paid for as a user, you need
a periodic maintenance window.

00:21:09.130 --> 00:21:12.180
But your app doesn't need
to be syncing all the time

00:21:12.180 --> 00:21:14.690
or like three times a day,
because you might not use it

00:21:14.690 --> 00:21:16.240
for two months at a time.

00:21:16.240 --> 00:21:19.015
But it doesn't mean it's
not one of your go-to apps.

00:21:19.015 --> 00:21:20.890
Similar to things like
buying a movie ticket,

00:21:20.890 --> 00:21:22.931
all of these things are
very useful applications.

00:21:22.931 --> 00:21:24.530
They're just not
used all day long.

00:21:24.530 --> 00:21:26.279
And that's why we
created this, because we

00:21:26.279 --> 00:21:28.740
want to empower those
applications while also trying

00:21:28.740 --> 00:21:32.324
to let them know that they're
not-- don't drain the battery.

00:21:32.324 --> 00:21:34.240
We'll put you together
with a bunch of others,

00:21:34.240 --> 00:21:36.784
and everyone will have
a much better time.

00:21:36.784 --> 00:21:38.450
But the trick here
is you probably still

00:21:38.450 --> 00:21:39.720
don't have to do anything.

00:21:39.720 --> 00:21:41.750
If you're reacting to a
broadcast or a message the way

00:21:41.750 --> 00:21:44.020
you normally would, then you're
going to produce a notification

00:21:44.020 --> 00:21:45.640
and get yourself out of standby.

00:21:45.640 --> 00:21:47.950
And if you're
building an app that

00:21:47.950 --> 00:21:50.310
runs a sync every so often,
it'll still run every day.

00:21:50.310 --> 00:21:53.040
Like, still committing my
goal from the beginning.

00:21:53.040 --> 00:21:55.440
We're not changing anything.

00:21:55.440 --> 00:21:57.780
But when you do need to
adapt for App Standby,

00:21:57.780 --> 00:21:59.740
it's exactly the same as before.

00:21:59.740 --> 00:22:02.606
A GCM high-priority message
will break through and give you

00:22:02.606 --> 00:22:04.730
network access, that you
can run a sync in response

00:22:04.730 --> 00:22:06.010
to some sort of message.

00:22:06.010 --> 00:22:08.620
And so really, all you have to
do is a couple of tweaks here,

00:22:08.620 --> 00:22:11.660
and then you're really
good to go, if anything.

00:22:11.660 --> 00:22:13.910
Like I said, maybe it
doesn't affect your app.

00:22:13.910 --> 00:22:16.540
But that CPU time,
that network access,

00:22:16.540 --> 00:22:18.980
you can get it in response
to something important.

00:22:18.980 --> 00:22:21.180
But keep in mind what
counts as high priority.

00:22:21.180 --> 00:22:23.020
If you don't want to get
up from writing some code,

00:22:23.020 --> 00:22:24.370
and go and check
your phone, probably

00:22:24.370 --> 00:22:26.703
don't want your user to have
to interrupt their day when

00:22:26.703 --> 00:22:28.620
they're not actually
on the device.

00:22:28.620 --> 00:22:29.180
OK.

00:22:29.180 --> 00:22:32.280
So this results
in a final list of

00:22:32.280 --> 00:22:34.351
like, why did you
tell me all this?

00:22:34.351 --> 00:22:35.600
What do I actually have to do?

00:22:35.600 --> 00:22:37.000
Do I have to test my app or not?

00:22:37.000 --> 00:22:38.670
And I mean, you do.

00:22:38.670 --> 00:22:39.574
That's true.

00:22:39.574 --> 00:22:40.990
Both App Standby
and Doze, they're

00:22:40.990 --> 00:22:42.604
going to be affecting your app.

00:22:42.604 --> 00:22:44.770
No matter what you do,
you're kind of stuck with it.

00:22:44.770 --> 00:22:46.144
It's part of
Marshmallow devices.

00:22:46.144 --> 00:22:46.870
It's coming.

00:22:46.870 --> 00:22:49.330
So you should be
considering this already.

00:22:49.330 --> 00:22:52.930
But we need to keep radio and
CPU off as long as possible,

00:22:52.930 --> 00:22:54.090
so the device can stay on.

00:22:54.090 --> 00:22:56.370
And you have to have
all apps participating

00:22:56.370 --> 00:22:58.602
in this to achieve this goal.

00:22:58.602 --> 00:23:01.060
Just a few active ones that
are exceptions but can actually

00:23:01.060 --> 00:23:05.300
undermine the entire purpose
of an Idle mode, right?

00:23:05.300 --> 00:23:07.640
So the key here is to
understand what has changed.

00:23:07.640 --> 00:23:10.320
You can't depend solely
on wakelocks and alarms,

00:23:10.320 --> 00:23:12.210
because their behavior
isn't exactly right.

00:23:12.210 --> 00:23:15.270
And if you have something
that is critical or sensitive,

00:23:15.270 --> 00:23:18.310
you're catching yourself here.

00:23:18.310 --> 00:23:21.400
However, you can count on the
fact that all of these things

00:23:21.400 --> 00:23:22.350
are going to trigger.

00:23:22.350 --> 00:23:23.930
They just might be deferred.

00:23:23.930 --> 00:23:26.830
So really, nothing changes
in the overall picture.

00:23:26.830 --> 00:23:28.430
Like I said, you may
be in a situation

00:23:28.430 --> 00:23:32.530
where Doze has put your device
a couple hours out of date.

00:23:32.530 --> 00:23:34.931
And you won't notice that
until the user picks it up.

00:23:34.931 --> 00:23:35.930
And then it runs a sync.

00:23:35.930 --> 00:23:37.575
So maybe there's a
long loading window.

00:23:37.575 --> 00:23:39.200
And if that's bad
for your application,

00:23:39.200 --> 00:23:40.991
you need to be considering
that when you're

00:23:40.991 --> 00:23:43.920
scheduling your jobs
and your syncs, which

00:23:43.920 --> 00:23:45.260
leads to my To Do list.

00:23:45.260 --> 00:23:46.264
Super duper hard.

00:23:46.264 --> 00:23:48.180
Like I said, considering
the flow of your app,

00:23:48.180 --> 00:23:50.292
you need to make sure
that everything behaves

00:23:50.292 --> 00:23:52.750
the way that it should behave
for the best user experience,

00:23:52.750 --> 00:23:55.769
with the potential of
being a couple hours late.

00:23:55.769 --> 00:23:57.560
You need to update any
time-critical alarms

00:23:57.560 --> 00:23:59.820
to include AndAllowWhileIdle.

00:23:59.820 --> 00:24:03.070
And you need to consider
any urgent or critical

00:24:03.070 --> 00:24:08.010
downstream messages as
high-priority with GCM.

00:24:08.010 --> 00:24:10.600
And finally, you really have
to actually test your app.

00:24:10.600 --> 00:24:12.954
You need to see how it
reacts to a sync or a job

00:24:12.954 --> 00:24:14.370
when it's delayed
because of Doze.

00:24:14.370 --> 00:24:15.920
And if you're not
happy, you have

00:24:15.920 --> 00:24:18.140
to return to step one and
do the whole thing again.

00:24:18.140 --> 00:24:20.435
But if you actually are
happy, then you're done.

00:24:20.435 --> 00:24:22.060
Like, that's all the
integration that's

00:24:22.060 --> 00:24:24.614
required for Doze, which
leads me up here to stand up

00:24:24.614 --> 00:24:26.780
here and stress again that
this sounds like a really

00:24:26.780 --> 00:24:28.070
frustrating thing,
because developers

00:24:28.070 --> 00:24:29.320
don't have any power here.

00:24:29.320 --> 00:24:31.450
But we actually designed
it so thoughtfully

00:24:31.450 --> 00:24:33.979
that you shouldn't have to
do hardly anything at all.

00:24:33.979 --> 00:24:36.520
There are a few special cases
that we really did think about.

00:24:36.520 --> 00:24:39.380
Like, you really do need
to know what's going

00:24:39.380 --> 00:24:40.920
on here, what's going on there.

00:24:40.920 --> 00:24:41.790
And then maybe
you're frustrated,

00:24:41.790 --> 00:24:43.873
because the 15-minute
window doesn't work for you.

00:24:43.873 --> 00:24:45.420
But you're also
considering the fact

00:24:45.420 --> 00:24:48.060
of if you can't get the
user's attention with an alarm

00:24:48.060 --> 00:24:49.830
every 15 minutes,
they might really

00:24:49.830 --> 00:24:51.770
be doing something
important, which goes back

00:24:51.770 --> 00:24:52.740
to my toothbrush test.

00:24:52.740 --> 00:24:54.295
Like, users do have lives.

00:24:54.295 --> 00:24:56.920
And it's hard to remember that,
because you get into this point

00:24:56.920 --> 00:24:58.336
where you've spent
your whole life

00:24:58.336 --> 00:25:00.700
kind of every day
building this thing that

00:25:00.700 --> 00:25:01.660
matters so much to you.

00:25:01.660 --> 00:25:04.640
But if you think about it from
a user perspective, how do

00:25:04.640 --> 00:25:06.910
you use it, and how
will your user use it,

00:25:06.910 --> 00:25:08.560
and what does it
do to the battery?

00:25:08.560 --> 00:25:10.850
We're all trying to make
a better system here, make

00:25:10.850 --> 00:25:12.270
a better ecosystem.

00:25:12.270 --> 00:25:15.520
And that's why we
have Doze mode.

00:25:15.520 --> 00:25:18.740
So test it, test it
thoroughly, test it using adb.

00:25:18.740 --> 00:25:19.610
It's pretty great.

00:25:19.610 --> 00:25:22.950
And we have a special one also
for App Standby with Inactive.

00:25:22.950 --> 00:25:26.036
And you can set Inactive
or not to put yourself

00:25:26.036 --> 00:25:28.410
on the standby list and see
how your app interacts there.

00:25:28.410 --> 00:25:30.339
All of this is documented
thoroughly online.

00:25:30.339 --> 00:25:32.130
We have a couple of
videos to help you out.

00:25:32.130 --> 00:25:34.740
And of course, you
can always message me

00:25:34.740 --> 00:25:37.190
with specific questions,
or any feedback,

00:25:37.190 --> 00:25:39.300
or anything you want to know.

00:25:39.300 --> 00:25:42.500
If you want to learn more about
how actually background tasks

00:25:42.500 --> 00:25:44.990
work in general, I'm going
to go over that at 4 o'clock,

00:25:44.990 --> 00:25:48.487
how to use Job Service, how
to build an intent service

00:25:48.487 --> 00:25:51.070
or use a broadcast receiver, how
to actually make a background

00:25:51.070 --> 00:25:53.236
task, because that's a
completely different problem.

00:25:53.236 --> 00:25:55.550
But as for saving your
tasks from Doze mode,

00:25:55.550 --> 00:25:58.346
you really, hopefully,
shouldn't have to worry.

00:25:58.346 --> 00:25:59.720
It shouldn't be
any work for you.

00:25:59.720 --> 00:26:02.070
And I hope that that's what
you discover with your app.

00:26:02.070 --> 00:26:02.610
OK.

00:26:02.610 --> 00:26:03.020
Cool.

00:26:03.020 --> 00:26:04.645
You're all done really
early, so if you

00:26:04.645 --> 00:26:07.430
want to ask me questions, I'll
just be, like, right here.

00:26:07.430 --> 00:26:10.430
We've got 15 minutes every
day back to go get lunch.

00:26:10.430 --> 00:26:12.530
[APPLAUSE]

00:26:14.330 --> 00:26:17.680
[MUSIC PLAYING]

