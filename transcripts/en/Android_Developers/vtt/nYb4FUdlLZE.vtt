WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.908
[MUSIC PLAYING]

00:00:05.444 --> 00:00:06.110
JOHN HOFORD: Hi.

00:00:06.110 --> 00:00:10.130
I'm John Hoford, and
this is Nicolas Roard.

00:00:10.130 --> 00:00:12.710
We both work on
ConstraintLayout,

00:00:12.710 --> 00:00:17.960
and the Android
Studio Design surface.

00:00:17.960 --> 00:00:20.420
Nicolas will give us
a little introduction

00:00:20.420 --> 00:00:22.160
to the whole thing.

00:00:24.469 --> 00:00:25.760
NICOLAS ROARD: So hi, everyone.

00:00:25.760 --> 00:00:27.970
So we're going to
talk a little bit

00:00:27.970 --> 00:00:30.880
about Android Studio in
general and a little more

00:00:30.880 --> 00:00:33.850
as well about ConstraintLayout.

00:00:33.850 --> 00:00:37.660
So quick summary about
what's our goal here, right,

00:00:37.660 --> 00:00:40.210
as far as Google Developers--

00:00:40.210 --> 00:00:43.090
what we want is, really,
to make your life much,

00:00:43.090 --> 00:00:44.476
much better, right?

00:00:44.476 --> 00:00:45.850
And we want to
listen to what you

00:00:45.850 --> 00:00:49.690
have to say, any feedback,
any ideas, requests.

00:00:49.690 --> 00:00:53.980
But anything, we really
are looking into that.

00:00:53.980 --> 00:00:56.020
And we try to move
fast, you know?

00:00:56.020 --> 00:00:58.320
Since last year
at I/O, we release

00:00:58.320 --> 00:01:01.990
the stabler version
Android Studio 2.2, 2.3,

00:01:01.990 --> 00:01:03.970
and we are now working on 3.0.

00:01:03.970 --> 00:01:07.330
And I strongly encourage
you to test 3.0.

00:01:07.330 --> 00:01:10.418
There is a lot of
improvements in the reality

00:01:10.418 --> 00:01:13.190
detail on the tablet.

00:01:13.190 --> 00:01:15.410
And specifically for
the reality detail

00:01:15.410 --> 00:01:19.310
for the visual designer
in Android Studio,

00:01:19.310 --> 00:01:21.040
our goals are relatively simple.

00:01:21.040 --> 00:01:24.550
Basic one, we want you to be
able to visualize your layout.

00:01:24.550 --> 00:01:27.320
I know, it's called
a visual designer.

00:01:27.320 --> 00:01:31.310
We want you to be able to create
those layouts very easily.

00:01:31.310 --> 00:01:32.990
And all of that being efficient.

00:01:32.990 --> 00:01:38.660
We don't want you to lose
your time for no reason.

00:01:38.660 --> 00:01:40.520
And on that note, John?

00:01:40.520 --> 00:01:42.440
JOHN HOFORD: OK, so we
want to just give you

00:01:42.440 --> 00:01:46.390
a brief overview, the lay
of the land of the designer

00:01:46.390 --> 00:01:48.590
to give you a idea of how
it all comes together.

00:01:51.350 --> 00:01:54.640
So one of the things you
can do is, in Darcula Mode--

00:01:54.640 --> 00:01:57.070
I'm sure a lot of people
like Darcula Mode.

00:02:00.430 --> 00:02:03.550
And we could go back
to the other one.

00:02:03.550 --> 00:02:07.930
Now, we have on the left-hand
side, the Palette that's

00:02:07.930 --> 00:02:11.620
basically where you can just
drag and drop your widgets

00:02:11.620 --> 00:02:14.020
onto your design surface.

00:02:14.020 --> 00:02:17.835
Then the component tree,
then comes the Inspector--

00:02:17.835 --> 00:02:19.585
and we'll have much
more about that later.

00:02:22.100 --> 00:02:29.180
Then the core design surface,
and there's a toolbar.

00:02:29.180 --> 00:02:31.170
We also have a right-click menu.

00:02:31.170 --> 00:02:34.190
So a lot of people kind
of forget that there's

00:02:34.190 --> 00:02:35.490
a right-click menu.

00:02:35.490 --> 00:02:38.390
If you select an object,
you can click on it,

00:02:38.390 --> 00:02:43.460
and right-click, you'll get
useful actions associated

00:02:43.460 --> 00:02:45.560
with what you've selected.

00:02:45.560 --> 00:02:49.620
The other thing that you can
switch to is Blueprint Mode.

00:02:49.620 --> 00:02:55.040
You could also switch
to two screens at once.

00:02:55.040 --> 00:02:59.180
The Blueprint Mode is
kind of a blueprint.

00:02:59.180 --> 00:03:03.910
It's a rough outline,
a sketch of your UI.

00:03:03.910 --> 00:03:07.670
The design surface
is actually being

00:03:07.670 --> 00:03:13.910
rendered in layout LIM, which is
a sort of emulator of Android.

00:03:13.910 --> 00:03:16.610
So one of the things
that we also can do

00:03:16.610 --> 00:03:23.040
is, use the designer
in the XML Editor Mode.

00:03:23.040 --> 00:03:29.000
So if you are in the XML editor
and you press the Preview,

00:03:29.000 --> 00:03:34.040
you get, essentially, a full
design mode right there.

00:03:34.040 --> 00:03:36.710
Notice if you select,
it'll actually

00:03:36.710 --> 00:03:40.070
navigate you to the
right element in the XML.

00:03:40.070 --> 00:03:44.510
You can switch to see
design or blueprint.

00:03:44.510 --> 00:03:50.540
You can also expand it a little
bit, pull out the palette,

00:03:50.540 --> 00:03:53.450
and you can actually just
drag an element right there

00:03:53.450 --> 00:03:55.660
on the screen.

00:03:55.660 --> 00:03:59.720
Notice it actually created
the XML at the bottom.

00:03:59.720 --> 00:04:02.330
And in fact, if
you edit the XML--

00:04:02.330 --> 00:04:04.110
in this case, I'll
just delete the XML--

00:04:06.980 --> 00:04:09.530
it goes from the design
surface instantly.

00:04:09.530 --> 00:04:13.190
So you get a real time
feedback in both directions,

00:04:13.190 --> 00:04:15.349
simply like that.

00:04:15.349 --> 00:04:17.640
NICOLAS ROARD: So that was
just brief introduction just

00:04:17.640 --> 00:04:19.500
to give you some
of the concepts,

00:04:19.500 --> 00:04:23.760
some of the vocabulary we
are going to use in the talk.

00:04:23.760 --> 00:04:26.310
And hopefully you have been
already familiar with this UI.

00:04:26.310 --> 00:04:31.840
If not, again, give it a
try, specifically with 3.0.

00:04:31.840 --> 00:04:34.260
Let me cover
ConstraintLayout now.

00:04:34.260 --> 00:04:37.740
So ConstraintLayout is a
library we announced last year

00:04:37.740 --> 00:04:40.560
at I/O in this very room.

00:04:40.560 --> 00:04:43.470
And the general idea
is to provide something

00:04:43.470 --> 00:04:46.650
that gives you all the
flexibility and the power

00:04:46.650 --> 00:04:48.390
to create any type
of layout that you

00:04:48.390 --> 00:04:53.485
want with a strong emphasis
on having flat layouts.

00:04:53.485 --> 00:04:55.860
If you have flat layout--
meaning you don't have a nested

00:04:55.860 --> 00:04:59.650
hierarchy of view in order
to create that layout--

00:04:59.650 --> 00:05:01.160
there's a lot of advantages.

00:05:01.160 --> 00:05:04.950
One often repeated
advantage is performance.

00:05:04.950 --> 00:05:08.940
Indeed, with nested layouts, you
could have [? corner ?] cases

00:05:08.940 --> 00:05:12.750
where there's an explosion
of computation necessary.

00:05:12.750 --> 00:05:16.420
So if everything is flat, you
tend to win in performance.

00:05:16.420 --> 00:05:17.310
So that's one reason.

00:05:17.310 --> 00:05:21.360
The other reason, which I think
is actually more interesting,

00:05:21.360 --> 00:05:24.630
is you got a lot
more flexibility.

00:05:24.630 --> 00:05:27.060
It's much better if you
want to limit contents.

00:05:27.060 --> 00:05:29.410
It's much better if you
want to modify the contents,

00:05:29.410 --> 00:05:32.122
upgrade it, modify, et cetera.

00:05:32.122 --> 00:05:33.830
The other big thing
with ConstraintLayout

00:05:33.830 --> 00:05:36.330
is, it's the same
team that works

00:05:36.330 --> 00:05:38.220
on ConstraintLayout
and on the Layout

00:05:38.220 --> 00:05:39.750
Editor in Android Studio.

00:05:39.750 --> 00:05:42.997
So it's deeply integrated
from the very beginning, which

00:05:42.997 --> 00:05:45.330
mean that we have some features
in ConstraintLayout that

00:05:45.330 --> 00:05:48.330
helps creating a great UI
designer, and vice versa.

00:05:48.330 --> 00:05:50.430
We have some features
in Studio that

00:05:50.430 --> 00:05:53.370
allows you to create much
better, and much more efficient

00:05:53.370 --> 00:05:55.230
layouts with ConstraintLayout.

00:05:55.230 --> 00:05:56.940
It's also an unbundled
library, which

00:05:56.940 --> 00:05:59.340
means we can push
any version any time.

00:05:59.340 --> 00:06:03.390
And in fact, we just
pushed a new version, like,

00:06:03.390 --> 00:06:05.280
five minutes ago.

00:06:05.280 --> 00:06:10.230
And it's compatible with
basically every device.

00:06:10.230 --> 00:06:13.590
So quick recap on the 1.0.

00:06:13.590 --> 00:06:15.490
Last year, when
we announced 1.0,

00:06:15.490 --> 00:06:20.010
we did a long series of alpha
releases, beta releases.

00:06:20.010 --> 00:06:23.866
And basically 17
releases since last year.

00:06:23.866 --> 00:06:26.490
When I told you we are trying to
move fast and iterate quickly,

00:06:26.490 --> 00:06:27.750
that's what we do.

00:06:27.750 --> 00:06:31.680
We did the final release
of 1.0 in February.

00:06:31.680 --> 00:06:34.410
Lots of performance increases,
particularly if you only

00:06:34.410 --> 00:06:36.450
try what ConstraintLayout
was last year,

00:06:36.450 --> 00:06:38.159
definitely give it a go.

00:06:38.159 --> 00:06:40.200
A bunch of new features
as well that we'll cover.

00:06:42.820 --> 00:06:45.950
And it's the default layout
now in Android Studio.

00:06:45.950 --> 00:06:48.050
So when you create a
new screen, by default,

00:06:48.050 --> 00:06:50.390
we put ConstraintLayout
where before we

00:06:50.390 --> 00:06:52.460
used to put RelativeLayout.

00:06:52.460 --> 00:06:54.260
And of course, Studio
is very flexible.

00:06:54.260 --> 00:06:56.090
If you want to
change that, you can.

00:06:56.090 --> 00:06:59.450
But we really believe
that it's a great layout

00:06:59.450 --> 00:07:00.920
to start your screen with.

00:07:00.920 --> 00:07:03.050
And that's what we want
to encourage you to do.

00:07:05.770 --> 00:07:07.810
And all of that
really should not

00:07:07.810 --> 00:07:10.770
have been possible without the
involvement of the community.

00:07:10.770 --> 00:07:13.320
There has been a flurry
of articles, talks,

00:07:13.320 --> 00:07:16.210
video on YouTube leading
to widespread adoption

00:07:16.210 --> 00:07:18.310
of the library.

00:07:18.310 --> 00:07:20.500
There's also a new
community-based

00:07:20.500 --> 00:07:24.140
ConstraintLayout website
that is launching this week,

00:07:24.140 --> 00:07:26.710
and you should check it out.

00:07:26.710 --> 00:07:30.610
So 1.0, what did we have
in terms of feature?

00:07:30.610 --> 00:07:32.860
What did we show you last year?

00:07:32.860 --> 00:07:35.290
Well, and what did we
add in the meantime?

00:07:35.290 --> 00:07:39.130
So we had the original idea of
having relative positioning.

00:07:39.130 --> 00:07:42.550
You can set up your
layout so that one button

00:07:42.550 --> 00:07:47.130
is going to be positioned
relative to another element.

00:07:47.130 --> 00:07:50.200
Very similar to
RelativeLayout with a couple

00:07:50.200 --> 00:07:53.020
of interesting tweaks.

00:07:53.020 --> 00:07:56.290
We also added a
center positioning.

00:07:56.290 --> 00:08:01.400
So if you create constraints
in between two targets,

00:08:01.400 --> 00:08:02.896
your elements will be centered.

00:08:02.896 --> 00:08:04.270
And you can actually
modify that.

00:08:04.270 --> 00:08:07.750
It's not just center,
you can apply a bias.

00:08:07.750 --> 00:08:12.310
So think about it as being able
to build much more flexible,

00:08:12.310 --> 00:08:16.690
reactive UI that will
position themself not simply

00:08:16.690 --> 00:08:20.330
in terms of an exact dimension.

00:08:20.330 --> 00:08:23.950
We also introduced the
concept of helpers object,

00:08:23.950 --> 00:08:25.450
like guidelines.

00:08:25.450 --> 00:08:27.670
And the idea with
guidelines is that it

00:08:27.670 --> 00:08:31.780
lets you create a UI in a
much, much more natural way.

00:08:31.780 --> 00:08:34.419
Particularly if you come
from a design background,

00:08:34.419 --> 00:08:36.100
or if you are working
with designers,

00:08:36.100 --> 00:08:40.140
they always think and create
their layout in terms of--

00:08:40.140 --> 00:08:43.210
they call it many names--
guidelines, keyline, redlines.

00:08:43.210 --> 00:08:45.190
Basically vertical
and horizontal lines

00:08:45.190 --> 00:08:48.490
to make sure that everything
is aligned correctly.

00:08:48.490 --> 00:08:50.680
Well, guidelines
in ConstraintLayout

00:08:50.680 --> 00:08:54.700
is just a first class concept
that you can use and create

00:08:54.700 --> 00:08:57.280
your layout with, but
ultimately on the device,

00:08:57.280 --> 00:09:01.919
it just results in the right
settings for the layout.

00:09:01.919 --> 00:09:03.460
We also introduced
chains, and that's

00:09:03.460 --> 00:09:07.420
a relatively late edition
in the 1.0 release cycle.

00:09:07.420 --> 00:09:11.650
Think about it as being able
to position a group of widgets

00:09:11.650 --> 00:09:12.190
as a group.

00:09:12.190 --> 00:09:15.070
So to, for example,
spread them apart.

00:09:15.070 --> 00:09:18.460
The interesting thing compared
to previous layouts on Android

00:09:18.460 --> 00:09:21.060
is that it only
works in one axis.

00:09:21.060 --> 00:09:24.310
So the other axis is not
constrained by a chain.

00:09:27.090 --> 00:09:28.830
Finally, we introduced ratio.

00:09:28.830 --> 00:09:32.130
I'm sure a lot of you had to
re-implement a custom view

00:09:32.130 --> 00:09:33.930
just to implement a ratio.

00:09:33.930 --> 00:09:35.754
Well, we just added
it in ConstraintLayout

00:09:35.754 --> 00:09:36.420
from the get-go.

00:09:39.970 --> 00:09:44.365
And last but not least, we
introduced ConstraintSet.

00:09:44.365 --> 00:09:48.090
The idea with ConstraintSet
is that now we

00:09:48.090 --> 00:09:50.130
have a layout that is flat.

00:09:50.130 --> 00:09:53.900
There is no hierarchy necessary
to create your layout.

00:09:53.900 --> 00:09:55.710
In a sense, you
end up with a bunch

00:09:55.710 --> 00:09:59.250
of widgets at the same level.

00:09:59.250 --> 00:10:01.760
And we apply that to
create the layout,

00:10:01.760 --> 00:10:05.910
to get the result that you want,
we apply those constraints.

00:10:05.910 --> 00:10:09.540
So ConstraintSet,
the idea is simply

00:10:09.540 --> 00:10:12.300
that we gather all
those constraints,

00:10:12.300 --> 00:10:16.080
and put them into that object,
into a ConstraintSet object.

00:10:16.080 --> 00:10:18.240
So you can create
a constraint set

00:10:18.240 --> 00:10:21.580
that embed all the
constraints of your layout.

00:10:21.580 --> 00:10:24.120
You can embed-- you can
create it from a layout file,

00:10:24.120 --> 00:10:27.270
from a live view hierarchy.

00:10:27.270 --> 00:10:28.770
And the fact that
you can do that

00:10:28.770 --> 00:10:31.320
is actually really,
really powerful.

00:10:31.320 --> 00:10:34.770
Because-- and just give
you a simple example,

00:10:34.770 --> 00:10:39.110
you can simply just toggle
one set of constraints

00:10:39.110 --> 00:10:40.360
with another one.

00:10:40.360 --> 00:10:44.340
So it's very easy to
tweak your UI at runtime.

00:10:44.340 --> 00:10:47.730
And even more, you can specify
and create your layouts

00:10:47.730 --> 00:10:51.810
in the comfort of the
layout editor, graphically.

00:10:51.810 --> 00:10:53.730
And at runtime in
your program, you

00:10:53.730 --> 00:10:55.980
can decide which
layout you want.

00:10:55.980 --> 00:10:57.540
So this is a very
powerful concept,

00:10:57.540 --> 00:10:59.860
and we'll come back to that.

00:10:59.860 --> 00:11:05.310
And finally, today, we
just released 1.1, beta 1.

00:11:05.310 --> 00:11:06.660
And it's available on Maven.

00:11:06.660 --> 00:11:11.140
So should be very easy for you
to integrate in your workflow.

00:11:11.140 --> 00:11:13.940
So what did we add in 1.1?

00:11:13.940 --> 00:11:17.070
We added, first, the
concept of barriers.

00:11:17.070 --> 00:11:19.470
And barrier, in
a sense, is a way

00:11:19.470 --> 00:11:22.420
to, say, just take,
on a set of widgets,

00:11:22.420 --> 00:11:27.780
takes the maximum or
the minimum of an edge.

00:11:27.780 --> 00:11:30.120
And that allows you
to create a lot of UI

00:11:30.120 --> 00:11:33.030
that previously, with
ConstraintLayout 1.0,

00:11:33.030 --> 00:11:36.250
would have been tricky to do.

00:11:36.250 --> 00:11:39.550
We also added another
[? hyperclass ?]

00:11:39.550 --> 00:11:42.750
that's called a group, which,
for now, is relatively limited.

00:11:42.750 --> 00:11:44.790
But we have some ideas
on how to improve it.

00:11:44.790 --> 00:11:46.560
But the concept
is basically, you

00:11:46.560 --> 00:11:52.050
can have a set of widgets that
are stored into that group,

00:11:52.050 --> 00:11:55.350
and you can set, for example,
the visibility of the group.

00:11:55.350 --> 00:11:58.050
So you don't have anymore
to maintain yourself

00:11:58.050 --> 00:12:01.280
a list of widgets just
so that you can toggle

00:12:01.280 --> 00:12:03.180
their visibility in one go.

00:12:03.180 --> 00:12:05.280
You can just
specify that in XML,

00:12:05.280 --> 00:12:10.920
and any visibility
state on the group

00:12:10.920 --> 00:12:16.030
will basically be applied
to the element in the group.

00:12:16.030 --> 00:12:19.770
We also have a new concept,
the placeholder concept.

00:12:19.770 --> 00:12:23.490
And we'll cover that
in more details later.

00:12:23.490 --> 00:12:25.470
But I think you'll like it.

00:12:25.470 --> 00:12:27.300
And finally, we added
a couple of tweaks

00:12:27.300 --> 00:12:30.460
in the way we deal with
constraints and dimensions.

00:12:30.460 --> 00:12:34.770
So if you ever wanted to
create a view whose width was

00:12:34.770 --> 00:12:37.290
30% of the screen,
you could do that,

00:12:37.290 --> 00:12:39.330
but it was a little
complex with guidelines--

00:12:39.330 --> 00:12:43.226
because guidelines doesn't
allow percent positioning.

00:12:43.226 --> 00:12:45.600
But now you can just do it
simply directly on the widget.

00:12:49.310 --> 00:12:52.550
And now we're going to cover
a little bit of new features

00:12:52.550 --> 00:12:54.130
the Android Studio itself.

00:12:54.130 --> 00:12:54.910
JOHN HOFORD: Yeah.

00:12:54.910 --> 00:12:59.320
So essentially,
to give you a kind

00:12:59.320 --> 00:13:02.590
of more detail inside
of Android Studios,

00:13:02.590 --> 00:13:05.230
we have a set of tools.

00:13:05.230 --> 00:13:09.080
Some of them we will talk a
little bit more about later.

00:13:09.080 --> 00:13:14.860
But we have a series of them
that are alignment-type tools,

00:13:14.860 --> 00:13:19.270
and arrangement-type tools.

00:13:19.270 --> 00:13:21.580
And we have some stuff
to add guidelines.

00:13:21.580 --> 00:13:23.670
And we'll see more on those.

00:13:23.670 --> 00:13:27.100
Here's also the
right-click menu,

00:13:27.100 --> 00:13:31.930
which is actually-- a lot
of them are existing tools.

00:13:31.930 --> 00:13:35.165
Now, here's a little example of
what you can do with the tools.

00:13:35.165 --> 00:13:39.340
So in this particular
example, I create a chain,

00:13:39.340 --> 00:13:42.730
I center align all
of them, and then

00:13:42.730 --> 00:13:45.910
I use the Inference to
automatically connect them.

00:13:45.910 --> 00:13:51.060
So in three clicks, I have just
essentially made a top layer

00:13:51.060 --> 00:13:53.770
layout.

00:13:53.770 --> 00:13:57.100
Now, one of the other things
that we've done a lot of work

00:13:57.100 --> 00:13:58.660
on is the Inspector.

00:13:58.660 --> 00:14:02.590
Those little pluses you
see I'm clicking on,

00:14:02.590 --> 00:14:06.160
they automatically
cast a ray, and connect

00:14:06.160 --> 00:14:08.860
to the adjacent surface.

00:14:08.860 --> 00:14:11.560
So it's a quick, handy way of
just making the connections

00:14:11.560 --> 00:14:14.750
without actually having
to drag out little lines.

00:14:14.750 --> 00:14:17.410
It can really speed up
a lot of connections.

00:14:17.410 --> 00:14:20.260
And then I'm playing with
all the other features

00:14:20.260 --> 00:14:21.370
of the Inspector.

00:14:21.370 --> 00:14:25.030
I can change the bias.

00:14:25.030 --> 00:14:27.940
I can then go and kill
connections all over again.

00:14:30.680 --> 00:14:32.930
And they both work together.

00:14:32.930 --> 00:14:37.010
So I just move it back over, and
the loop starts all over again.

00:14:37.010 --> 00:14:40.100
The Inference-- you saw me do
a little bit of the Inference

00:14:40.100 --> 00:14:42.080
before.

00:14:42.080 --> 00:14:45.770
It's essentially based on
a probabilistic model where

00:14:45.770 --> 00:14:50.750
we try to estimate what is
the most likely thing it

00:14:50.750 --> 00:14:53.120
would want to connect to.

00:14:53.120 --> 00:14:54.620
If they're lined
above each other,

00:14:54.620 --> 00:14:56.990
it's more likely it's
aligned that way.

00:14:56.990 --> 00:15:02.380
If it's directly on the
center, as the little icon is,

00:15:02.380 --> 00:15:04.580
it will want to connect it.

00:15:04.580 --> 00:15:07.160
One of the cool
things about it is

00:15:07.160 --> 00:15:09.770
that you'll notice I can
make connections, and then

00:15:09.770 --> 00:15:14.780
use Inference to finish it off
and essentially complete my UI.

00:15:14.780 --> 00:15:20.480
So the ones that I care about
a lot, I can do by hand.

00:15:20.480 --> 00:15:23.240
And Inference does
not currently create

00:15:23.240 --> 00:15:27.930
chains or some of the new
widgets that we talk about.

00:15:27.930 --> 00:15:31.370
They don't operate properly
with some of the newer design

00:15:31.370 --> 00:15:32.810
features.

00:15:32.810 --> 00:15:35.390
But as those features
become stable,

00:15:35.390 --> 00:15:39.560
I will work on putting them
into the Inference engine.

00:15:39.560 --> 00:15:40.980
So here is an example.

00:15:40.980 --> 00:15:42.270
It inferred.

00:15:42.270 --> 00:15:46.300
And as you can see, it
detected that it was centered,

00:15:46.300 --> 00:15:48.170
and it attached there.

00:15:48.170 --> 00:15:53.030
It changes some things
from wrap content

00:15:53.030 --> 00:15:55.820
to zero DP, things like that.

00:15:55.820 --> 00:15:57.496
It just tries to fix it.

00:15:57.496 --> 00:15:59.120
Now one of the other
things to remember

00:15:59.120 --> 00:16:01.280
here is, it's not a beautifier.

00:16:01.280 --> 00:16:06.520
It is not going to align
things for you, and arrange.

00:16:06.520 --> 00:16:10.340
It tries very hard to keep
exactly where you put things.

00:16:10.340 --> 00:16:13.640
So I've seen a few cases
where people just sloppy

00:16:13.640 --> 00:16:17.750
put things on the UI
and then hit Inference,

00:16:17.750 --> 00:16:23.450
and they get bad results
because it's not organized.

00:16:23.450 --> 00:16:27.290
So just remember to do that
when you're thinking about it.

00:16:27.290 --> 00:16:31.560
One of the things that we like
and we use is the Inspector.

00:16:31.560 --> 00:16:34.110
You just saw me use it.

00:16:34.110 --> 00:16:36.110
There's another mode
that you can get.

00:16:36.110 --> 00:16:37.980
If you hit the little
arrow at the top,

00:16:37.980 --> 00:16:42.290
which is this, which
is all the constraints.

00:16:42.290 --> 00:16:45.710
That's kind of a pain
to use, quite frankly.

00:16:45.710 --> 00:16:47.410
So we've been
working on something

00:16:47.410 --> 00:16:50.050
to try and make that a
little easier, and how

00:16:50.050 --> 00:16:53.970
you would use it, and how
you would interact with it.

00:16:53.970 --> 00:16:55.520
And we call it--

00:16:55.520 --> 00:16:57.065
internally, we call it Slice.

00:17:00.560 --> 00:17:03.130
So imagine, whenever
you have a layout,

00:17:03.130 --> 00:17:05.114
you will actually have--

00:17:05.114 --> 00:17:06.530
associated with
the layout, you'll

00:17:06.530 --> 00:17:10.910
have a dimensions, a
strings file, a few files.

00:17:10.910 --> 00:17:14.119
And the information
you're trying to work with

00:17:14.119 --> 00:17:18.390
is mapped across all of
these different files.

00:17:18.390 --> 00:17:21.079
So it becomes this sort of
hopping around game where

00:17:21.079 --> 00:17:24.230
you're trying to figure out,
oh, I've got to go and adjust

00:17:24.230 --> 00:17:25.520
the dimensions here.

00:17:25.520 --> 00:17:27.800
I've got to go and set
the string in this file,

00:17:27.800 --> 00:17:29.300
and I got to--

00:17:29.300 --> 00:17:33.300
and I have no easy,
simple navigation.

00:17:33.300 --> 00:17:39.870
So if we can take the
selected object in the layout,

00:17:39.870 --> 00:17:44.540
the percents, the dimensions
that uses, the strings it uses,

00:17:44.540 --> 00:17:47.540
and all the other things
it's referring to,

00:17:47.540 --> 00:17:51.290
and we sort of combine them
into one user interface.

00:17:51.290 --> 00:17:53.090
It appears on the right.

00:17:53.090 --> 00:17:57.630
And we gave it a look that
is kind of like an XML file.

00:17:57.630 --> 00:18:02.120
So if you're used to the XML,
you can understand what it does

00:18:02.120 --> 00:18:04.320
and how it works.

00:18:04.320 --> 00:18:07.130
You can sort of see the
files that are coming

00:18:07.130 --> 00:18:09.020
from all the other parameters.

00:18:09.020 --> 00:18:14.300
For example, the drawable
is a picture of me.

00:18:14.300 --> 00:18:19.500
The values is some number.

00:18:19.500 --> 00:18:21.800
And in fact, you can
go edit, and even

00:18:21.800 --> 00:18:26.130
create new elements directly
in that user interface.

00:18:26.130 --> 00:18:30.320
So it's a quick, fast way
to work within the designer,

00:18:30.320 --> 00:18:32.080
and do all the other
little things you

00:18:32.080 --> 00:18:35.329
would like to do typically.

00:18:35.329 --> 00:18:37.870
NICOLAS ROARD: So I want to talk
a little bit about the tools

00:18:37.870 --> 00:18:40.250
attributes.

00:18:40.250 --> 00:18:41.950
So the idea with
showing you all of this

00:18:41.950 --> 00:18:47.140
is also that you could, of
course, use all those layout

00:18:47.140 --> 00:18:48.460
in XML, right?

00:18:48.460 --> 00:18:50.380
I mean, they are
normal Android layouts.

00:18:50.380 --> 00:18:52.796
You can use the old layouts,
you can use ConstraintLayout.

00:18:52.796 --> 00:18:55.030
Everything is perfectly
usable in XML.

00:18:55.030 --> 00:18:57.040
But the idea-- and this
is what we strongly

00:18:57.040 --> 00:18:59.290
believe-- is that
with the designer,

00:18:59.290 --> 00:19:03.434
we've got a great opportunity
to really make your life easier.

00:19:03.434 --> 00:19:05.350
I think you could see
with some of those tools

00:19:05.350 --> 00:19:09.550
that we presented, doing the
same thing in XML line by line

00:19:09.550 --> 00:19:11.620
is certainly doable,
but I think you'll

00:19:11.620 --> 00:19:14.950
be much faster by
using those tools.

00:19:14.950 --> 00:19:18.421
So the tools attributes, it's
something you may know already,

00:19:18.421 --> 00:19:18.920
right?

00:19:18.920 --> 00:19:22.210
See, the general
problem is that we

00:19:22.210 --> 00:19:24.220
have something in
the editor that's not

00:19:24.220 --> 00:19:26.110
executing your code directly.

00:19:26.110 --> 00:19:29.810
So sometimes what we
show you in the layout

00:19:29.810 --> 00:19:33.310
editor is not going to be
exactly the same as what

00:19:33.310 --> 00:19:35.480
you have on your device.

00:19:35.480 --> 00:19:37.450
So because, for
example, some of it

00:19:37.450 --> 00:19:40.370
is just determined
by your program.

00:19:40.370 --> 00:19:42.080
It's things
completed at runtime.

00:19:42.080 --> 00:19:44.410
So we have this idea of
having tools attributes where

00:19:44.410 --> 00:19:46.960
you can specify behavior
that would only be

00:19:46.960 --> 00:19:49.160
applied in the layout editor.

00:19:49.160 --> 00:19:50.740
So those attributes
are not going

00:19:50.740 --> 00:19:52.864
to be there when you publish
your application, when

00:19:52.864 --> 00:19:53.950
you push it on a device.

00:19:53.950 --> 00:19:55.390
They are just stripped out.

00:19:55.390 --> 00:19:58.930
But in the designer, that allows
you quite a lot of flexibility

00:19:58.930 --> 00:20:02.360
in how you want
to render things.

00:20:02.360 --> 00:20:04.960
So we got-- showIn, for
instance, is pretty useful.

00:20:04.960 --> 00:20:08.380
Listitem to set up something
in a recycled view,

00:20:08.380 --> 00:20:10.370
and things like that.

00:20:10.370 --> 00:20:13.870
So that's just a
generic problem, right,

00:20:13.870 --> 00:20:18.160
of how do you want to show
layout when we don't really

00:20:18.160 --> 00:20:20.450
want to execute the code?

00:20:20.450 --> 00:20:23.870
And if you try to drag a
recycle view, all these view,

00:20:23.870 --> 00:20:26.320
in the layout editor, that's
probably what you saw.

00:20:26.320 --> 00:20:30.370
Because we automatically
generate a default adapter that

00:20:30.370 --> 00:20:32.130
is pretty limited, you know?

00:20:32.130 --> 00:20:33.690
And by default,
that's what you see.

00:20:33.690 --> 00:20:37.130
This is probably not how
your application looks like.

00:20:37.130 --> 00:20:39.970
So if you have some contents--
let's say I created a row--

00:20:39.970 --> 00:20:43.480
you can specify
it, and you'll be

00:20:43.480 --> 00:20:45.940
able to see that
being replicated.

00:20:45.940 --> 00:20:49.345
Better, but clearly not
what your application

00:20:49.345 --> 00:20:50.830
is going to look like, right?

00:20:50.830 --> 00:20:52.788
Of course, you're going
to have different data.

00:20:55.200 --> 00:20:57.310
And that's where our
sample data comes in.

00:20:57.310 --> 00:21:00.220
You could specify
new attributes--

00:21:00.220 --> 00:21:02.950
and this is going to
be available in 3.0--

00:21:02.950 --> 00:21:04.840
where, by default,
we have pre-baked

00:21:04.840 --> 00:21:08.080
attribute, like, for example,
names or phone numbers.

00:21:08.080 --> 00:21:10.090
And you'll be able
to reference that

00:21:10.090 --> 00:21:13.450
instead of other attribute.

00:21:13.450 --> 00:21:15.430
And that will be
replicated in the designer.

00:21:15.430 --> 00:21:17.770
So think about it as a
way to very quickly see

00:21:17.770 --> 00:21:20.110
how your layout is going
to look like without having

00:21:20.110 --> 00:21:23.590
to program anything.

00:21:23.590 --> 00:21:25.360
We actually do more
than just that.

00:21:25.360 --> 00:21:28.060
We have a new sample data
folder in the project

00:21:28.060 --> 00:21:30.640
that you'll be able to create.

00:21:30.640 --> 00:21:32.410
You could specify
things like colors--

00:21:32.410 --> 00:21:33.370
and that's trivial.

00:21:33.370 --> 00:21:38.080
Just create a text file,
put the colors on each line,

00:21:38.080 --> 00:21:38.830
and that's it.

00:21:38.830 --> 00:21:42.160
Every time that you
reference that element,

00:21:42.160 --> 00:21:45.550
we will pull the next
color, and we'll just loop.

00:21:45.550 --> 00:21:48.490
So you can very quickly
get something like that.

00:21:48.490 --> 00:21:52.090
And you have more sample
data capabilities.

00:21:52.090 --> 00:21:57.930
You can display Lorem Ipsum,
dates in the specific formats,

00:21:57.930 --> 00:21:58.960
colors.

00:21:58.960 --> 00:22:01.764
You can even specify
an entire JSON file

00:22:01.764 --> 00:22:03.430
if you want to use
more structured data.

00:22:06.020 --> 00:22:07.860
So we got baked-in data types.

00:22:07.860 --> 00:22:12.345
Oh, sorry, the clicker.

00:22:12.345 --> 00:22:14.236
Baked-in data type.

00:22:14.236 --> 00:22:15.980
The JSON files,
as I said, if you

00:22:15.980 --> 00:22:17.451
want to have more structure.

00:22:17.451 --> 00:22:19.700
And if you have any resources
into that sample folder,

00:22:19.700 --> 00:22:21.609
you can reference it,
and we'll pick them.

00:22:21.609 --> 00:22:23.150
So if you want a
collection of image,

00:22:23.150 --> 00:22:25.730
for instance, you put
them into a folder,

00:22:25.730 --> 00:22:30.560
and you reference that folder,
we'll pick the next one.

00:22:30.560 --> 00:22:33.770
And let's go on some
more advanced examples

00:22:33.770 --> 00:22:35.300
on ConstraintLayouts.

00:22:35.300 --> 00:22:42.410
So you may have seen in your
practice a program like that.

00:22:42.410 --> 00:22:44.790
I have some text on
the left of my button,

00:22:44.790 --> 00:22:47.750
and I want that text
to grow, but no more

00:22:47.750 --> 00:22:49.400
than what the button allows.

00:22:49.400 --> 00:22:52.340
And I want everything
to be centered left.

00:22:52.340 --> 00:22:54.950
So the way you would do
it in ConstraintLayouts--

00:22:54.950 --> 00:22:56.090
and it's a little--

00:22:56.090 --> 00:22:58.970
it can be a little tricky,
but fundamentally, we

00:22:58.970 --> 00:23:03.110
create a chain, make the
text being resizeable,

00:23:03.110 --> 00:23:06.020
and it will automatically
apply the constraint.

00:23:06.020 --> 00:23:07.470
So it won't go further.

00:23:07.470 --> 00:23:09.020
And so that's just
a quick example

00:23:09.020 --> 00:23:10.470
of how you can use chain.

00:23:10.470 --> 00:23:13.520
It's not just, oh, I want
to spread widgets apart.

00:23:13.520 --> 00:23:17.388
You can do much more complex
and powerful combinations.

00:23:20.880 --> 00:23:24.230
So there's another example as
well about the gone behavior.

00:23:24.230 --> 00:23:27.260
So by default, when you
set a widget to gone,

00:23:27.260 --> 00:23:28.800
we resolve it as a point.

00:23:28.800 --> 00:23:31.220
So in that case,
my center button

00:23:31.220 --> 00:23:34.170
gets collapsed basically
as a single point.

00:23:34.170 --> 00:23:36.120
And that behavior
looks fine to me.

00:23:36.120 --> 00:23:38.090
That's probably what I want.

00:23:38.090 --> 00:23:41.270
Sometimes it's not going
to work the same way.

00:23:41.270 --> 00:23:44.970
If I do that on the first
element, everything collapse

00:23:44.970 --> 00:23:48.560
to zero again, the
margin included, and then

00:23:48.560 --> 00:23:50.420
the rest of my
buttons are moving.

00:23:50.420 --> 00:23:52.790
So that we have
another attributes

00:23:52.790 --> 00:23:57.290
that you can specify when the
object you connect to is gone.

00:23:57.290 --> 00:24:00.020
And in that case, we'll use
those values for the margin.

00:24:00.020 --> 00:24:03.140
So the second button,
the original margin

00:24:03.140 --> 00:24:08.510
on the top of 0, and
now has a margin of 32,

00:24:08.510 --> 00:24:13.390
only if the first element
is marked as gone.

00:24:13.390 --> 00:24:15.600
And let's talk a little
about Placeholder,

00:24:15.600 --> 00:24:20.874
which is a new addition
in ConstraintLayout 1.1.

00:24:20.874 --> 00:24:25.800
JOHN HOFORD: Yeah, so
this is new to 1.1.

00:24:25.800 --> 00:24:32.700
Essentially, what it is you
can create a virtual view,

00:24:32.700 --> 00:24:39.720
and set its content to another
view within the constraint

00:24:39.720 --> 00:24:41.190
layout.

00:24:41.190 --> 00:24:47.010
So in this simple example,
it's grabbing whichever one you

00:24:47.010 --> 00:24:49.950
clicked on, whichever
view you clicked on,

00:24:49.950 --> 00:24:54.079
and warping it up to
the top of the screen.

00:24:54.079 --> 00:24:56.370
If you look at the text, it
might look a little strange

00:24:56.370 --> 00:24:59.790
if you're not
familiar with Kotlin.

00:24:59.790 --> 00:25:03.550
Check out Kotlin tomorrow.

00:25:03.550 --> 00:25:08.760
That's the total length of the
code inside of the Kotlin file.

00:25:08.760 --> 00:25:10.650
So the animation you're
seeing on the right

00:25:10.650 --> 00:25:14.580
is completely being generated
by the code you see on the left.

00:25:14.580 --> 00:25:19.000
Nothing else is being
used in an XML file.

00:25:19.000 --> 00:25:21.510
So as you can see, it's
randomly switching.

00:25:21.510 --> 00:25:23.790
But the fact that
you can actually

00:25:23.790 --> 00:25:27.860
have a placeholder, a place
where you can move a widget,

00:25:27.860 --> 00:25:32.450
may seem like, OK, what
else can you do with that?

00:25:32.450 --> 00:25:38.590
Well, if I design a
placeholder-based UI with

00:25:38.590 --> 00:25:43.090
a merge tag, essentially
I've defined--

00:25:43.090 --> 00:25:47.295
and in ConstraintLayout,
make sure to use the parent

00:25:47.295 --> 00:25:51.960
tag if you want to see the
UI while you're doing it.

00:25:51.960 --> 00:25:55.810
It essentially gives you a
fixed layout which you can then

00:25:55.810 --> 00:25:57.800
use in another file.

00:25:57.800 --> 00:26:02.590
So in this case, I've decided
to have one placeholder that's

00:26:02.590 --> 00:26:05.890
going to be my top image,
a big image and then

00:26:05.890 --> 00:26:09.490
a second placeholder that's
going to be my action button.

00:26:09.490 --> 00:26:12.940
But I can actually make
a second placeholder

00:26:12.940 --> 00:26:18.690
with now using for
landscape mode.

00:26:18.690 --> 00:26:20.920
And this one, I arranged
it a little bit different.

00:26:20.920 --> 00:26:25.540
I use a slightly different
set of constraints.

00:26:25.540 --> 00:26:29.620
And now in the main layout,
I just declare the two UI

00:26:29.620 --> 00:26:34.690
elements and include
the template.

00:26:34.690 --> 00:26:37.280
Essentially, it
produces a template

00:26:37.280 --> 00:26:41.170
that decides on how
you do your layout.

00:26:41.170 --> 00:26:47.140
And because there are, in fact,
two of these templates, one

00:26:47.140 --> 00:26:51.230
in different ones, when
I rotate the screen,

00:26:51.230 --> 00:26:55.040
it would actually take
the other template.

00:26:55.040 --> 00:26:58.600
So now I can lay out my
views and separate out

00:26:58.600 --> 00:27:00.580
the layout from it.

00:27:00.580 --> 00:27:04.420
But I can actually do
more than just that.

00:27:04.420 --> 00:27:08.410
One of the things that you
can do with this structure

00:27:08.410 --> 00:27:14.030
is, what if instead of
the second image button,

00:27:14.030 --> 00:27:17.020
I could decide to
put an entire include

00:27:17.020 --> 00:27:21.290
file with something else in it?

00:27:21.290 --> 00:27:23.640
So in this particular
case, I have--

00:27:23.640 --> 00:27:28.670
oh, I don't know why that--
in this particular case,

00:27:28.670 --> 00:27:32.320
I have an entire include with
a bunch of different layout

00:27:32.320 --> 00:27:34.290
elements.

00:27:34.290 --> 00:27:37.312
And it's actually being
warped into that space.

00:27:37.312 --> 00:27:39.520
So it's a ConstraintLayout
within a ConstraintLayout,

00:27:39.520 --> 00:27:43.030
so it's nested in that context.

00:27:43.030 --> 00:27:47.000
But this is a very simple,
and almost stupid example,

00:27:47.000 --> 00:27:49.690
but you could imagine
where you decide

00:27:49.690 --> 00:27:51.550
how you want the
top and the bottom

00:27:51.550 --> 00:27:54.250
and the left and the
right, and behaviors,

00:27:54.250 --> 00:27:57.280
and lay them out, and
design them as templates.

00:27:57.280 --> 00:28:03.610
And then, when you're ready
to produce your main stuff,

00:28:03.610 --> 00:28:07.240
you just go and do it in a
completely separate file.

00:28:07.240 --> 00:28:09.940
You can have designers
help you design templates,

00:28:09.940 --> 00:28:11.600
things like that.

00:28:11.600 --> 00:28:17.440
One of the things that we wanted
to do with ConstraintSet--

00:28:17.440 --> 00:28:21.580
and I'll talk a little bit about
how you use constraint sets--

00:28:21.580 --> 00:28:25.630
is, you can separate
the views completely

00:28:25.630 --> 00:28:27.790
from how you do the layouts.

00:28:27.790 --> 00:28:32.570
So essentially, another
way of doing things

00:28:32.570 --> 00:28:35.530
is to encapsulate
your entire layout

00:28:35.530 --> 00:28:40.730
as a separate ConstraintSet, and
then you apply it to a layout.

00:28:40.730 --> 00:28:44.980
So you might kind of
wonder, what would you

00:28:44.980 --> 00:28:45.940
want to do with that?

00:28:45.940 --> 00:28:48.100
Well, you can use-- you
can switch between two

00:28:48.100 --> 00:28:50.350
ConstraintSets on the fly.

00:28:50.350 --> 00:28:53.140
No views get reloaded.

00:28:53.140 --> 00:28:54.820
It's not like
switching a layout.

00:28:54.820 --> 00:28:57.490
You're actually just
moving the widgets

00:28:57.490 --> 00:29:00.710
around by applying different
sets of constraints.

00:29:00.710 --> 00:29:05.140
So in this example, I
create two ConstraintSets.

00:29:08.085 --> 00:29:15.390
And I grab a ConstraintSet
from a layout file,

00:29:15.390 --> 00:29:21.510
and I put another layout on
the screen with setContentView.

00:29:21.510 --> 00:29:25.560
Then I actually get that one,
and grab its ConstraintSet

00:29:25.560 --> 00:29:28.980
and this ConstraintSet too.

00:29:28.980 --> 00:29:31.980
Now, to switch between the
two ConstraintSets, all

00:29:31.980 --> 00:29:34.530
I have to do is call
the ConstraintSet,

00:29:34.530 --> 00:29:37.440
and apply to the
ConstraintLayout.

00:29:37.440 --> 00:29:39.870
And that will
allow me to switch.

00:29:39.870 --> 00:29:46.000
So I can produce lots of
clever animations that way.

00:29:46.000 --> 00:29:50.700
So one simple example
is, if I have a dialog--

00:29:50.700 --> 00:29:52.620
and this is a
normal ConstraintSet

00:29:52.620 --> 00:29:58.880
with my picture on it, and I
can do another one in landscape.

00:29:58.880 --> 00:30:03.870
Now, instead of creating
two separate layouts

00:30:03.870 --> 00:30:05.780
and inflating them
when you rotate,

00:30:05.780 --> 00:30:09.180
you can take over the
rotation yourself,

00:30:09.180 --> 00:30:14.250
and you can perform the
ConstraintSet switch yourself.

00:30:14.250 --> 00:30:20.370
And that way, you have a lot
less going on during rotation.

00:30:20.370 --> 00:30:24.240
So if you have an app that
likes to rotate a lot,

00:30:24.240 --> 00:30:26.880
you can do it that way,
and save some speed.

00:30:26.880 --> 00:30:28.380
NICOLAS ROARD: Well,
the other thing

00:30:28.380 --> 00:30:31.790
that's important to keep in mind
with a ConstraintSet is, the--

00:30:31.790 --> 00:30:34.920
and this example of
rotation is interesting.

00:30:34.920 --> 00:30:37.180
Of course, you can use the
normal system on Android,

00:30:37.180 --> 00:30:41.399
and let the resource
being loaded at runtime.

00:30:41.399 --> 00:30:43.440
The thing with ConstraintSet
is that you actually

00:30:43.440 --> 00:30:46.740
in complete control of when
you create the ConstraintSet.

00:30:46.740 --> 00:30:50.220
so often in mobile, it's
not so much about trying

00:30:50.220 --> 00:30:52.860
to not do the work
that you need to do,

00:30:52.860 --> 00:30:53.944
because you need to do it.

00:30:53.944 --> 00:30:55.401
So sometimes of
the work is costly,

00:30:55.401 --> 00:30:56.460
you still have to do it.

00:30:56.460 --> 00:31:00.540
It's more a matter of trying
to find the right time on when

00:31:00.540 --> 00:31:01.450
to do it.

00:31:01.450 --> 00:31:03.900
And to me, that's what
ConstraintSet allows you to do.

00:31:03.900 --> 00:31:07.350
You can basically pre-bake
all those constraints,

00:31:07.350 --> 00:31:10.170
and load them before,
and so you don't

00:31:10.170 --> 00:31:12.265
have to incur a stutter
or anything like that

00:31:12.265 --> 00:31:13.640
because suddenly
you have to pull

00:31:13.640 --> 00:31:17.410
your entire set of resources.

00:31:17.410 --> 00:31:21.270
So ConstraintSet is
also pretty useful

00:31:21.270 --> 00:31:24.060
when we want to do
motion in general.

00:31:24.060 --> 00:31:26.360
So one advantage
of ConstraintLayout

00:31:26.360 --> 00:31:29.130
and this focus on trying
to keep a flat hierarchy

00:31:29.130 --> 00:31:32.420
is that there's no
clipping issues.

00:31:32.420 --> 00:31:34.560
You can think about it as
a scene graph, you know?

00:31:34.560 --> 00:31:35.059
It's

00:31:35.059 --> 00:31:38.280
You just have all
the different objects

00:31:38.280 --> 00:31:39.640
you want to show on screen--

00:31:39.640 --> 00:31:42.289
your buttons, your
images, and et cetera.

00:31:42.289 --> 00:31:43.830
And you can think
about ConstraintSet

00:31:43.830 --> 00:31:46.020
in some ways as a keyframe.

00:31:46.020 --> 00:31:48.990
And the way you would
do that, if you remember

00:31:48.990 --> 00:31:53.940
that slide that we just saw,
you only need to add one line,

00:31:53.940 --> 00:31:55.050
and that's all.

00:31:55.050 --> 00:31:59.730
And that's simply using the
Android transition framework

00:31:59.730 --> 00:32:02.862
that also is available
on [? industry.lib. ?]

00:32:02.862 --> 00:32:04.320
And that will
automatically animate

00:32:04.320 --> 00:32:07.950
any type of layout changes.

00:32:07.950 --> 00:32:11.340
That also would apply even on
the individual view, right?

00:32:11.340 --> 00:32:14.100
So in that example, I have a--

00:32:14.100 --> 00:32:17.220
sorry, clicker is not happy.

00:32:17.220 --> 00:32:20.370
In that example,
we have a layout

00:32:20.370 --> 00:32:23.500
that's set with the
normal ConstraintLayout,

00:32:23.500 --> 00:32:25.420
but I can't change
the parameters

00:32:25.420 --> 00:32:27.140
of an individual view.

00:32:27.140 --> 00:32:29.550
The layout will automatically
resize accordingly

00:32:29.550 --> 00:32:31.800
to the constraints I set.

00:32:31.800 --> 00:32:34.590
And TransitionManager
will animate all of that.

00:32:34.590 --> 00:32:37.990
So you can do kind of complex
behavior like that very,

00:32:37.990 --> 00:32:39.900
very easily.

00:32:39.900 --> 00:32:42.960
And the code itself
is really trivial.

00:32:42.960 --> 00:32:45.716
You could do a lot further
than that, you know?

00:32:45.716 --> 00:32:46.840
And that's another example.

00:32:46.840 --> 00:32:51.060
You could create one
state of your screen

00:32:51.060 --> 00:32:53.880
in one layout, change--

00:32:53.880 --> 00:32:57.750
create a second state,
basically, and load that

00:32:57.750 --> 00:32:59.550
from ConstraintSet.

00:32:59.550 --> 00:33:02.790
Apply that at runtime, and
the transition framework

00:33:02.790 --> 00:33:04.680
will just do the rest.

00:33:04.680 --> 00:33:07.530
What's really cool is that
you do that graphically.

00:33:07.530 --> 00:33:11.710
You don't have to try to figure
out how much you need to do,

00:33:11.710 --> 00:33:12.910
what's the dimension.

00:33:12.910 --> 00:33:15.630
No, you have the
immediate result on screen

00:33:15.630 --> 00:33:19.840
without having to do a
round trip to your device.

00:33:19.840 --> 00:33:22.490
And that was purely
in ConstraintLayout.

00:33:22.490 --> 00:33:25.200
But ConstraintLayout
can to be also used

00:33:25.200 --> 00:33:28.830
by leveraging the
existing framework,

00:33:28.830 --> 00:33:30.970
and the existing widgets
in the framework.

00:33:30.970 --> 00:33:33.540
So here, this is
just a [? new view ?]

00:33:33.540 --> 00:33:36.120
of the ones used
in the draw layout.

00:33:36.120 --> 00:33:40.360
But I can simply reuse it
into a ConstraintLayout here.

00:33:40.360 --> 00:33:43.650
So here, this is a simple
subclass, that's apply that.

00:33:43.650 --> 00:33:46.390
What's nice is-- and
you know, I encourage

00:33:46.390 --> 00:33:48.660
you to think about
it in the link

00:33:48.660 --> 00:33:50.880
to the concept of
placeholders, is

00:33:50.880 --> 00:33:54.030
that you could basically
define a set of generic rules

00:33:54.030 --> 00:33:55.870
on how your UI behave.

00:33:55.870 --> 00:33:57.840
And so ConstraintLayout
become something

00:33:57.840 --> 00:34:02.460
a lot more than simply I just
want to position my buttons,

00:34:02.460 --> 00:34:05.050
and how do they interact
with each other.

00:34:05.050 --> 00:34:10.710
It can become more about, oh,
the entire UI moves around.

00:34:10.710 --> 00:34:13.290
And of course, you can apply
that with your custom widget

00:34:13.290 --> 00:34:14.190
if you want.

00:34:14.190 --> 00:34:15.434
That's as simple.

00:34:18.510 --> 00:34:22.969
So here's another example
of whole ConstraintSet slash

00:34:22.969 --> 00:34:24.380
transition animation.

00:34:24.380 --> 00:34:28.219
So we defined two states,
like the previous examples,

00:34:28.219 --> 00:34:32.239
and you see the shadows are
applied, the elevation changes.

00:34:32.239 --> 00:34:35.390
And all of that is
done graphically.

00:34:35.390 --> 00:34:36.889
The only problem
with this animation

00:34:36.889 --> 00:34:38.476
is that it's a little stale.

00:34:38.476 --> 00:34:40.100
I mean, it doesn't
do anything special.

00:34:40.100 --> 00:34:42.840
There's no movement.

00:34:42.840 --> 00:34:45.310
But we could do a
lot more than that.

00:34:45.310 --> 00:34:49.880
And with custom transitions,
you could simply

00:34:49.880 --> 00:34:51.060
define whatever you want.

00:34:51.060 --> 00:34:55.340
So recently, there was a
physics library being released.

00:34:55.340 --> 00:34:58.340
You could easily create
your own custom transition,

00:34:58.340 --> 00:35:01.580
plug them into the system,
and do whatever you want.

00:35:01.580 --> 00:35:04.670
I would not encourage you to
replicate this particular UI.

00:35:04.670 --> 00:35:07.160
This is a test example.

00:35:07.160 --> 00:35:11.480
But just to give you
the type of flexibility

00:35:11.480 --> 00:35:15.220
this approach can give you.

00:35:15.220 --> 00:35:17.890
And on that note, I
think we are done.

00:35:17.890 --> 00:35:22.950
We have a few minutes
for Q&amp;A. And please do

00:35:22.950 --> 00:35:25.120
file bugs, feature requests.

00:35:25.120 --> 00:35:27.419
You can contact
us pretty easily.

00:35:27.419 --> 00:35:28.960
The documentation
of ConstraintLayout

00:35:28.960 --> 00:35:31.350
is available online as well.

00:35:31.350 --> 00:35:34.395
And as I said, we
just released 1.1.

00:35:34.395 --> 00:35:35.270
Please give it a try.

00:35:36.755 --> 00:35:39.985
[MUSIC PLAYING]

