WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:04.140
So now that we know what ILP is, let's look at an example of computing the ILP

00:00:04.140 --> 00:00:09.270
just so we can be on the same page about that. First, we need a program. So

00:00:09.270 --> 00:00:12.330
let's say, we have this program. We have already renamed it so

00:00:12.330 --> 00:00:15.500
that only the true dependencies remain. So now let's look for

00:00:15.500 --> 00:00:21.550
those true dependencies. We write to P10. This instruction doesn't use P10.

00:00:21.550 --> 00:00:25.656
Actually, the first one that uses P10 is this one. We write to P6,

00:00:25.656 --> 00:00:30.300
nothing uses P6. We write to P5. This one uses P5.

00:00:30.300 --> 00:00:36.300
So there is a dependence basically here, and another one here and

00:00:36.300 --> 00:00:41.380
then here we produce P4. So we only have really these two true dependencies. So

00:00:41.380 --> 00:00:45.680
now, let's look at like what can execute in each cycle. To do that the best way

00:00:45.680 --> 00:00:48.500
is to just kind of check off instructions in counter cycles. So

00:00:48.500 --> 00:00:53.450
in the first cycle we can do this, this, this, and this because none of these

00:00:53.450 --> 00:00:57.520
instructions has an incoming dependencies yet. In the second cycle, okay, this

00:00:57.520 --> 00:01:00.990
one cannot be done in the first cycle because it has a dependence from this and

00:01:00.990 --> 00:01:03.747
this and that has not been done in the first cycle yet. So

00:01:03.747 --> 00:01:08.979
after the first cycle, all of these are done, so now we can do this. So

00:01:08.979 --> 00:01:14.238
what we have, what we get is now the ILP is equal to how many instructions, 5,

00:01:14.238 --> 00:01:19.150
over how many cycles, 2. We got an ILP of 2.5. Again, we then need to

00:01:19.150 --> 00:01:22.530
know what the process looks like. Now, some convenient tricks for

00:01:22.530 --> 00:01:27.660
computing the ILP. First, I didn't actually need to rename the program.

00:01:27.660 --> 00:01:32.790
If this program had real registers with some anti and output dependencies,

00:01:32.790 --> 00:01:37.260
I could just fake renaming by just looking at where the true dependencies are,

00:01:37.260 --> 00:01:39.980
and completely ignoring the anpi, anti and output dependencies. Why?

00:01:39.980 --> 00:01:42.480
Well, because the renaming would eliminate them anyway.

00:01:42.480 --> 00:01:45.530
All that would be left is the true dependency. So you actually,

00:01:45.530 --> 00:01:48.860
when you're computing the ILP, don't really need to look at a rename program.

00:01:48.860 --> 00:01:52.030
You can do it directly on the program as it was written.

00:01:52.030 --> 00:01:54.790
You just need to follow only the true dependencies and

00:01:54.790 --> 00:01:59.020
completely ignore the anti and output dependencies. Second, you know,

00:01:59.020 --> 00:02:03.860
when checking this off, be mindful to kind of remember how many cycles you're

00:02:03.860 --> 00:02:07.750
computing and also what has been done and so on. And then you know,

00:02:07.750 --> 00:02:10.770
just be careful also to kind of divide the right thing with the right thing.

00:02:10.770 --> 00:02:14.120
So it's 5 instructions over 2 cycles, not the other way around.

