WEBVTT
Kind: captions
Language: en

00:00:00.300 --> 00:00:03.890
So we're going to need one more
interesting property of this operator

00:00:03.890 --> 00:00:07.510
B1, but this one is specific to
the context of policy iteration.

00:00:07.510 --> 00:00:09.230
So let's think about it this way.

00:00:09.230 --> 00:00:12.530
Imagine we've got some policy, Pi1,
just like we've been saying, and

00:00:12.530 --> 00:00:15.530
associated with Pi1 is the operator B1.

00:00:15.530 --> 00:00:18.940
And let's say that Q1 Is
the fixed point of B1 and

00:00:18.940 --> 00:00:21.950
how do we know that it
has a unique fixed point?

00:00:21.950 --> 00:00:23.100
&gt;&gt; because you proved it earlier.

00:00:23.100 --> 00:00:25.611
&gt;&gt; Yeah,
it was the contraction property of B1.

00:00:25.611 --> 00:00:26.249
&gt;&gt; Yeah.

00:00:26.249 --> 00:00:27.970
&gt;&gt; So let's imagine that's happened.

00:00:27.970 --> 00:00:28.590
We have solved out Q1,

00:00:28.590 --> 00:00:30.990
and this is sort of how policy
iteration works too, right?

00:00:30.990 --> 00:00:34.640
You start off with the policy, you
get the value function of that policy

00:00:34.640 --> 00:00:38.240
then we're going to take the greedy
policy Pi2 with respect to Q1.

00:00:38.240 --> 00:00:42.534
So in the last slide or so Pi1 and
Pi2 were just arbitrary policies.

00:00:42.534 --> 00:00:45.460
Now Pi2 is specifically
the greedy policy

00:00:45.460 --> 00:00:48.750
with respect to the value
function defined by Pi1.

00:00:48.750 --> 00:00:52.240
So then let B2 be the operator
associated with Pi2 and

00:00:52.240 --> 00:00:54.090
this is the thing that we want to show.

00:00:54.090 --> 00:00:59.432
The Q function that comes from solving,
for the the fixed point of Pi1,

00:00:59.432 --> 00:01:04.788
so the value function for Pi1 is less
than or equal to B2 applied to Q1.

00:01:04.788 --> 00:01:05.600
Does that make sense?

00:01:05.600 --> 00:01:08.740
So if we take whatever we end
up with after we solve for

00:01:08.740 --> 00:01:14.300
the value function for Pi1, we take
Pi2s greedy policy and then we do one

00:01:14.300 --> 00:01:20.100
Bellman backup with respect to that and
we get value function that dominates Q1.

00:01:20.100 --> 00:01:23.120
&gt;&gt; Okay, and that's because
of other stuff on the slide.

00:01:23.120 --> 00:01:25.140
&gt;&gt; Yeah so we'll just work through that.

00:01:25.140 --> 00:01:29.730
So intuitively what we're saying is you
do policy evaluation on Pi1 we get some

00:01:29.730 --> 00:01:33.620
value function Q1 and
then we do one step of

00:01:33.620 --> 00:01:37.510
essentially value iteration using
the greedy policy with respect to Q1 and

00:01:37.510 --> 00:01:40.380
that's going to make it
no worse possibly better.

00:01:40.380 --> 00:01:42.610
And so the reason for
that is well what is Q1.

00:01:42.610 --> 00:01:45.260
Q1, it's the fixed point
of the B1 operator.

00:01:45.260 --> 00:01:49.270
So in this particular case it's
the reward plus the discounted

00:01:49.270 --> 00:01:54.100
expected value for taking action Pi1 and
ending up in some new state as prime and

00:01:54.100 --> 00:01:57.470
taking action Pi1 of S
prime from that state.

00:01:57.470 --> 00:01:59.400
But think about what Pi2 is.

00:01:59.400 --> 00:02:01.781
We can actually substitute Pi2 for

00:02:01.781 --> 00:02:04.890
Pi1 in here but Pi2 is the greedy
policy with respect to this.

00:02:04.890 --> 00:02:05.720
In other words,

00:02:05.720 --> 00:02:10.210
it is the policy that causes this
exact quantity to be maximized.

00:02:10.210 --> 00:02:12.600
That's what the greedy policy does.

00:02:12.600 --> 00:02:16.020
At every state either we're going to
do no worse than we did with Pi1, or

00:02:16.020 --> 00:02:18.290
we might actually do better
by switching to Pi2,

00:02:18.290 --> 00:02:20.910
the greedy policy with respect to Q1.

00:02:20.910 --> 00:02:26.860
So at each state action pair we're
doing no worse by doing one step of,

00:02:26.860 --> 00:02:30.610
well, one Bellman backup with B2 on Q1.

00:02:30.610 --> 00:02:32.625
So this is exactly
the result that we get.

00:02:32.625 --> 00:02:35.680
That the Q function that we
had before is less than or

00:02:35.680 --> 00:02:40.360
equal to the Q function that we had
before pushed through the B2 operator.

00:02:40.360 --> 00:02:45.060
The Bellman operator with respect to
the greedy policy with respect to Q1.

00:02:45.060 --> 00:02:48.120
Essentially the idea is if we are going
to do one more update on Q1, and

00:02:48.120 --> 00:02:51.810
we are going to do that update with
respect to a policy that we know is

00:02:51.810 --> 00:02:55.060
greedy with respect to Q1,
then we are moving up in the world.

00:02:55.060 --> 00:02:56.767
&gt;&gt; Oh, I see, I see, I see, okay.

00:02:56.767 --> 00:02:58.306
&gt;&gt; What?

00:02:58.306 --> 00:03:00.915
&gt;&gt; Well, no, I was sitting there
thinking well shouldn't this be greater

00:03:00.915 --> 00:03:02.365
than or equal to and
then I think, oh no,

00:03:02.365 --> 00:03:04.170
I see,
I was kind of reading it backward.

00:03:04.170 --> 00:03:07.310
&gt;&gt; Yeah, I wanted to write it as,
because domination up to this point we

00:03:07.310 --> 00:03:09.970
used greater than or equal to, but
it just didn't feel right to put it

00:03:09.970 --> 00:03:13.120
this way because it would have been
B2 applied to Q1 is greater than or

00:03:13.120 --> 00:03:17.060
equal to Q1, which is true, but
the ordering feels backwards to me.

00:03:17.060 --> 00:03:19.670
So this seems better,
that we're going to take Q1, we're

00:03:19.670 --> 00:03:22.540
going to apply the B2 operator to it,
and it's going to make things better.

00:03:22.540 --> 00:03:23.878
&gt;&gt; Write it the other way and
see what happens.

00:03:23.878 --> 00:03:24.840
&gt;&gt; Sure.

00:03:24.840 --> 00:03:29.140
&gt;&gt; So, when I look at that,
that says that applying the greedy

00:03:30.520 --> 00:03:34.252
operator to Q1 makes it
better than it was before.

00:03:34.252 --> 00:03:35.980
&gt;&gt; All right, so
that is more helpful for you read,

00:03:35.980 --> 00:03:37.420
that's really the same thing.

00:03:37.420 --> 00:03:37.983
So that's great.

00:03:37.983 --> 00:03:38.950
&gt;&gt; Oh no, it is the same thing.

00:03:38.950 --> 00:03:40.950
I just realized the whole time
you were talking I had been

00:03:40.950 --> 00:03:42.890
flipping the thing in my head.

00:03:42.890 --> 00:03:43.500
&gt;&gt; Sorry about that.

00:03:43.500 --> 00:03:44.850
&gt;&gt; Oh no, no, it's not your fault.

00:03:44.850 --> 00:03:47.750
&gt;&gt; So
now we have all the pieces we need.

00:03:47.750 --> 00:03:49.700
We had one property,
we called it monotonicity.

00:03:49.700 --> 00:03:51.970
What, we should call this
property something, too.

00:03:51.970 --> 00:03:53.110
Value improvement.

00:03:53.110 --> 00:03:56.652
&gt;&gt; Okay.
&gt;&gt; So now with value improvement and

00:03:56.652 --> 00:04:00.987
other stuff like definition of Pi2 and
B1 and

00:04:00.987 --> 00:04:05.765
B2 and Q1 and Q2 and
the monotonicity property,

00:04:05.765 --> 00:04:10.322
we should have all the things
we need to prove that

00:04:10.322 --> 00:04:14.902
policy iteration moves
in the right direction.

00:04:14.902 --> 00:04:16.959
That it actually improves the policy.

00:04:16.959 --> 00:04:19.440
Or, in the case where
the policy's already optimal,

00:04:19.440 --> 00:04:21.450
it can't improve it, but
it doesn't break it.

00:04:21.450 --> 00:04:22.510
It leaves it the same.

00:04:22.510 --> 00:04:24.540
&gt;&gt; It doesn't ever make it worse.

