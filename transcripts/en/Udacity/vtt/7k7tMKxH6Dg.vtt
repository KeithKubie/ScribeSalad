WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:02.848
So here's a way to define Fibonacci iteratively.

00:00:02.848 --> 00:00:04.152
[BLANK_AUDIO]

00:00:04.152 --> 00:00:07.700
We're going to avoid all the redundant computation by keeping track as we

00:00:07.700 --> 00:00:10.552
go. And we're going to have two variables. And I'm going to do this

00:00:10.552 --> 00:00:13.100
in a slightly strange way, and the reason for this will become

00:00:13.100 --> 00:00:15.490
clear soon. I want to make it so we can get the right

00:00:15.490 --> 00:00:18.630
answer when n is 0 and when n is 1, without having

00:00:18.630 --> 00:00:22.820
special cases. So instead of keeping track of the previous two, I'm

00:00:22.820 --> 00:00:26.500
going to keep track of the current one and the imaginary one that's

00:00:26.500 --> 00:00:29.170
going to be after that. And we know that the first two Fibonacci

00:00:29.170 --> 00:00:33.670
numbers are 0 and 1, so we'll use current is

00:00:33.670 --> 00:00:36.500
0, and the next one, we'll call after is 1.

00:00:36.500 --> 00:00:38.760
So that's the one after the one that we're currently

00:00:38.760 --> 00:00:41.880
doing, and now we have a loop, so we're going to

00:00:41.880 --> 00:00:44.110
go from i in the range from 0 to n.

00:00:44.110 --> 00:00:47.975
So we're looking for Fibonacci number n, that means we

00:00:47.975 --> 00:00:51.390
want to start at 0. The current value is the value

00:00:51.390 --> 00:00:54.590
for Fibonacci 0 and after is the value for Fibonacci

00:00:54.590 --> 00:00:57.140
1, and as we go through the loop, we'll keep

00:00:57.140 --> 00:01:00.820
updating those. And we want to update them by following the

00:01:00.820 --> 00:01:04.060
recursive rule and so that means that the new value

00:01:04.060 --> 00:01:07.270
of current, is the current value of after. And the new

00:01:07.270 --> 00:01:09.220
value of after, is the sum of those two lists;

00:01:09.220 --> 00:01:12.290
current plus after. We can do that with a multiple

00:01:12.290 --> 00:01:15.630
assignment, that'll save us from needing a temporary variable. We

00:01:15.630 --> 00:01:19.690
can assign current and after, to their new values. The new

00:01:19.690 --> 00:01:22.730
value of current, is the current value of after, and the

00:01:22.730 --> 00:01:28.930
new value of after is current plus after. So, this is

00:01:28.930 --> 00:01:31.920
the place where a multiple assignment comes in handy. If we

00:01:31.920 --> 00:01:34.380
didn't use a multiple assignment, we'd have to use a temporary

00:01:34.380 --> 00:01:36.230
value to keep track of one of these while we do

00:01:36.230 --> 00:01:39.570
the assignments. But with multiple assignment, we get both of these

00:01:39.570 --> 00:01:42.240
values first, and then we assign them to the two variables

00:01:42.240 --> 00:01:44.840
on the left side. So, that's all we need. And then

00:01:44.840 --> 00:01:47.690
after the loop, we should return the value of

00:01:47.690 --> 00:01:51.540
current, which is the current Fibonacci number if we're looking

00:01:51.540 --> 00:01:54.920
for Fibonacci N. So let's try that. So we

00:01:54.920 --> 00:01:59.830
should be able to see Fibonacci 0, and the result

00:01:59.830 --> 00:02:02.530
should be 0. And that's what we get, and,

00:02:02.530 --> 00:02:04.500
because that's the value of current, when the range is

00:02:04.500 --> 00:02:06.000
from 0 to 0, we don't go through the loop

00:02:06.000 --> 00:02:09.868
at all. So we get the value 1. Let's check

00:02:09.868 --> 00:02:16.510
Fibonacci 1, and we run this, we get the value 1, which is also

00:02:16.510 --> 00:02:20.790
what we expect. And we got that because we went through the loop once, assigning

00:02:20.790 --> 00:02:24.530
the value of after, which started as 1 to current and that's what we

00:02:24.530 --> 00:02:29.440
return as the value of current. And we can keep going, we'll try Fibonacci 2.

00:02:31.570 --> 00:02:36.064
And that's also 1, as we expect and Fibonacci 3

00:02:36.064 --> 00:02:40.136
should be 1 plus 1, gets us 2 and so forth.

00:02:40.136 --> 00:02:41.360
[BLANK_AUDIO].

00:02:43.430 --> 00:02:45.990
Okay, so this looks like it's working. We've tried

00:02:45.990 --> 00:02:48.904
a few simple ones. Let's try Fibonacci 33. So

00:02:48.904 --> 00:02:51.830
we estimated in the earlier quiz, in order to

00:02:51.830 --> 00:02:55.911
compute fibonacci 36, we would need Fibonacci 33 calls,

00:02:55.911 --> 00:03:00.550
using the previous recursive definition. So, why did it

00:03:00.550 --> 00:03:02.448
take so long for that code to run? So

00:03:02.448 --> 00:03:06.940
what's the value of Fibonacci 33? And that's what

00:03:06.940 --> 00:03:09.870
it is, it's 3 and a half million calls.

00:03:09.870 --> 00:03:12.895
And so even with a processor that's doing a billion instructions

00:03:12.895 --> 00:03:15.645
a second, doing 3 and a half million recursive calls takes

00:03:15.645 --> 00:03:18.598
quite a while. Each time through the call, is many more

00:03:18.598 --> 00:03:22.138
than just one instruction it's many thousands of instructions. So this

00:03:22.138 --> 00:03:24.930
starts to take enough time that we didn't see the result.

00:03:24.930 --> 00:03:29.890
And, it wasn't only those Fibonacci 33 calls to Fibonacci 2,

00:03:29.890 --> 00:03:31.680
we had all the other things that we had to do

00:03:31.680 --> 00:03:35.450
to get Fibonacci 36. But let's see that now we have

00:03:35.450 --> 00:03:40.450
our faster, internet definition of Fibonacci that isn't doing all that duplicate

00:03:40.450 --> 00:03:45.480
work, that we can compute Fibonacci 36. And so that gives us this value,

00:03:45.480 --> 00:03:50.456
so indicating that there would be about 15 million rabbits after 3 years

00:03:50.456 --> 00:03:55.310
using Fibonacci's model. Let's try what we'd have after 5

00:03:55.310 --> 00:04:00.700
years, passing in 60 months, and we

00:04:00.700 --> 00:04:03.060
get this starting to be quite a huge

00:04:03.060 --> 00:04:06.590
number. To try to relate to this, let's look

00:04:06.590 --> 00:04:09.120
at how long it would take for the mass

00:04:09.120 --> 00:04:12.410
of all the rabbits that are born to exceed

00:04:17.230 --> 00:04:23.376
the mass of the Earth. So the mass of the Earth is 5.9722 times 10 to the 24,

00:04:23.376 --> 00:04:26.902
and that's in kilograms, and I'm using the times

00:04:26.902 --> 00:04:30.370
time notation. This gives us a power, so this

00:04:30.370 --> 00:04:36.030
is 10 to the power 24. So that's one way to write 5.9 times 10 to the 24

00:04:36.030 --> 00:04:40.140
kilograms, just to demonstrate the power notation, this is

00:04:40.140 --> 00:04:42.520
2 to the power 10, so we'll see the result

00:04:42.520 --> 00:04:45.470
is 1,024. That's what we get by multiplying 2

00:04:45.470 --> 00:04:48.120
times 2 times 2 times 2 10 times. Here we're

00:04:48.120 --> 00:04:51.550
multiplying 10 by itself 24 times and that's a good

00:04:52.600 --> 00:04:55.910
estimate for the mass of the earth. So now to

00:04:55.910 --> 00:04:58.560
find out how many months it takes before the

00:04:58.560 --> 00:05:00.910
mass of the rabbits exceeds the mass of the earth,

00:05:00.910 --> 00:05:03.440
we're going to have a for loop. We're going to loop from

00:05:04.470 --> 00:05:07.720
Fibonacci numbers, until we get to a number that exceeds

00:05:07.720 --> 00:05:12.070
the mass of the Earth. We also need to decide what a mass of a rabbit is, and

00:05:12.070 --> 00:05:15.390
I'm going to assume that a rabbit weighs about 2

00:05:15.390 --> 00:05:20.090
kilograms. And, that's a pretty good guess for how heavy

00:05:20.090 --> 00:05:22.510
a rabbit is. That's assuming of course, a well

00:05:22.510 --> 00:05:25.490
fed rabbit like we have today, not if the rabbits

00:05:25.490 --> 00:05:28.510
spread as fast as Fibonacci's model would suggest that

00:05:28.510 --> 00:05:32.880
they do. So, we'll write a loop to see when

00:05:32.880 --> 00:05:35.640
the mass of the rabbits exceeds the mass

00:05:35.640 --> 00:05:38.140
of the earth. We'll start with n equals 1,

00:05:38.140 --> 00:05:43.120
and we're going to keep going until Fibonacci n

00:05:43.120 --> 00:05:46.680
exceeds the mass of the earth. So, we'll go

00:05:46.680 --> 00:05:51.690
while Fibonacci n times the mass of the

00:05:51.690 --> 00:05:53.870
rabbit. So Fibonacci n gives us the numbers of

00:05:53.870 --> 00:05:55.890
the rabbits in month end, times the mass of

00:05:55.890 --> 00:05:58.050
the rabbit and as long as that is less

00:05:58.050 --> 00:06:00.780
than the mass of the Earth, the Earth is

00:06:00.780 --> 00:06:03.640
still safe for humanity, or at least there's some space

00:06:03.640 --> 00:06:07.750
left for humans. And every time through the loop,

00:06:07.750 --> 00:06:10.210
we'll increase n by 1. And at the end of

00:06:10.210 --> 00:06:12.140
the loop, we'll print out the value of n,

00:06:12.140 --> 00:06:15.800
we'll see where we got, and let's also print out

00:06:15.800 --> 00:06:18.850
the value of Fibonacci n, to see how big the

00:06:18.850 --> 00:06:23.180
Fibonacci number of that n is. So we'll keep going

00:06:23.180 --> 00:06:26.170
through the loop, as long as the Fibonacci of n times

00:06:26.170 --> 00:06:28.000
the mass of the rabbit is less than the mass of the

00:06:28.000 --> 00:06:31.800
Earth. And once we stop the loop that means we've exceeded

00:06:31.800 --> 00:06:34.210
the mass of the Earth and we'll see what the results is.

00:06:34.210 --> 00:06:38.570
So let's try running that, and, we get this result. The

00:06:38.570 --> 00:06:41.880
value of n is 119, so it'll only take 119 months, or

00:06:41.880 --> 00:06:45.490
just less than 10 years, until the mass of the rabbits exceeds

00:06:45.490 --> 00:06:48.520
the mass of the Earth. And this is the number of rabbits

00:06:48.520 --> 00:06:51.428
we would have then. A pretty big number, you should

00:06:51.428 --> 00:06:54.160
be very afraid of all these rabbits. The good news

00:06:54.160 --> 00:06:57.580
is that Fibonacci's model, is not actually correct. That this

00:06:57.580 --> 00:06:59.440
was a mathematical abstraction for

00:06:59.440 --> 00:07:02.200
rabbit reproduction. Real rabbits actually die

00:07:02.200 --> 00:07:05.120
off after some point, and if there're too many rabbits,

00:07:05.120 --> 00:07:07.240
they don't have enough food, so they don't keep growing

00:07:07.240 --> 00:07:10.750
like the Fibonacci numbers and take over the entire planet.

00:07:10.750 --> 00:07:13.900
So we should be very afraid if Fibonacci's model is correct.

00:07:13.900 --> 00:07:17.810
It would only take 10 years for the rabbits to take over the entire planet,

00:07:17.810 --> 00:07:22.200
and weigh more than the earth does itself. The good news is, it's not a very

00:07:22.200 --> 00:07:24.720
accurate model of how rabbits reproduce, that

00:07:24.720 --> 00:07:26.530
they don't live forever, and once there're too

00:07:26.530 --> 00:07:27.940
many rabbits, they start to run out of

00:07:27.940 --> 00:07:30.750
food. So they stop reproducing, and stop surviving.

