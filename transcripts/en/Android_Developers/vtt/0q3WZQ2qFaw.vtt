WEBVTT
Kind: captions
Language: en

00:00:02.802 --> 00:00:04.010
ELLIE POWERS: Hi, everybody.

00:00:04.010 --> 00:00:06.500
I'm Ellie Powers, and I'm
a Product Manager here

00:00:06.500 --> 00:00:08.170
on the Google Play team.

00:00:08.170 --> 00:00:10.430
And as Shannon mentioned,
what I'm here to talk about

00:00:10.430 --> 00:00:13.850
is what's happening in
Android development in 2016.

00:00:13.850 --> 00:00:16.160
It's kind of amazing
to even say that.

00:00:16.160 --> 00:00:19.010
Because we talk about
the Android platform,

00:00:19.010 --> 00:00:20.344
and it feels so immediate to me.

00:00:20.344 --> 00:00:22.718
I've been at Google almost
five years, and when I joined,

00:00:22.718 --> 00:00:23.960
that platform was very new.

00:00:23.960 --> 00:00:26.297
It's come a huge way--
a very, very long way.

00:00:26.297 --> 00:00:28.130
And I'm excited today
to share with you some

00:00:28.130 --> 00:00:30.020
of the things that we're
most excited about,

00:00:30.020 --> 00:00:31.610
and some of the things
that we think that you need

00:00:31.610 --> 00:00:33.109
to know about as
developers in order

00:00:33.109 --> 00:00:35.930
to make the best apps possible.

00:00:35.930 --> 00:00:38.690
So Android development is a lot
more sophisticated this year

00:00:38.690 --> 00:00:40.560
than it was back in the past.

00:00:40.560 --> 00:00:42.410
And that's really important.

00:00:42.410 --> 00:00:45.290
And it's happening because users
have much higher expectations

00:00:45.290 --> 00:00:46.250
than ever.

00:00:46.250 --> 00:00:48.222
Users want apps
that are innovative,

00:00:48.222 --> 00:00:50.180
that are highly functional,
that are beautiful,

00:00:50.180 --> 00:00:52.910
and take advantage of all
the latest technologies.

00:00:52.910 --> 00:00:55.460
Now as a developer, you want
to give them all of that.

00:00:55.460 --> 00:00:57.530
You want to make those
great user experiences.

00:00:57.530 --> 00:01:01.850
But you want to have the least
amount of hassle possible.

00:01:01.850 --> 00:01:02.596
Totally.

00:01:02.596 --> 00:01:04.970
And that's why you need more
sophisticated tools that are

00:01:04.970 --> 00:01:06.630
going to bring you more power.

00:01:06.630 --> 00:01:08.990
So today, I'm going to talk
about four different areas

00:01:08.990 --> 00:01:10.490
of Android development.

00:01:10.490 --> 00:01:12.680
First, we're going to talk
about the latest Android

00:01:12.680 --> 00:01:14.257
dessert, Nougat.

00:01:14.257 --> 00:01:16.840
It's sticky, it's sweet, and it
might get stuck in your teeth.

00:01:16.840 --> 00:01:18.380
And it's got a lot
of great new features

00:01:18.380 --> 00:01:19.520
that users are going to love.

00:01:19.520 --> 00:01:20.936
We're going to
talk about what you

00:01:20.936 --> 00:01:22.130
need to know as a developer.

00:01:22.130 --> 00:01:23.796
Second, we're going
to talk about what's

00:01:23.796 --> 00:01:25.134
new with Material Design.

00:01:25.134 --> 00:01:26.550
It launched a
couple of years ago,

00:01:26.550 --> 00:01:28.950
and there are some new things
that you should know about.

00:01:28.950 --> 00:01:31.310
Third, we're going to
talk about Android Studio.

00:01:31.310 --> 00:01:33.819
That's another product that's
been progressing a lot.

00:01:33.819 --> 00:01:35.360
So we're going to
talk about how that

00:01:35.360 --> 00:01:37.070
can help you build better apps.

00:01:37.070 --> 00:01:39.140
And finally, we had a huge
announcement this year

00:01:39.140 --> 00:01:41.480
at Google I/O about Firebase.

00:01:41.480 --> 00:01:43.897
Firebase means a lot more this
year than it did last year.

00:01:43.897 --> 00:01:46.021
And we're going to go
through a lot of the features

00:01:46.021 --> 00:01:46.730
that it offers.

00:01:46.730 --> 00:01:48.210
It's all about building
and growing your apps

00:01:48.210 --> 00:01:50.150
cross-platform, so we're going
to talk a little bit more

00:01:50.150 --> 00:01:52.191
about how that can help
you with your overall app

00:01:52.191 --> 00:01:55.730
business-- including
Android, but also beyond it.

00:01:55.730 --> 00:01:58.040
So first, let's talk
about Android Nougat.

00:01:58.040 --> 00:02:00.580
Has anyone here tried
Android Nougat so far?

00:02:00.580 --> 00:02:02.420
Got a build on one
of your devices?

00:02:02.420 --> 00:02:03.680
That's great.

00:02:03.680 --> 00:02:05.570
So you may have a
favorite feature,

00:02:05.570 --> 00:02:07.454
but I'm going to tell
you a few of mine.

00:02:07.454 --> 00:02:08.870
One of my favorite
things about it

00:02:08.870 --> 00:02:10.820
is the improved battery life.

00:02:10.820 --> 00:02:14.415
And another one is, when
you upgrade to a new version

00:02:14.415 --> 00:02:15.790
and install an
update, it doesn't

00:02:15.790 --> 00:02:17.960
need to go back and optimize
all your apps anymore.

00:02:17.960 --> 00:02:19.334
That's one of my
favorite things,

00:02:19.334 --> 00:02:22.040
especially because I have
like 150 apps on my phone.

00:02:22.040 --> 00:02:24.220
So those are features
that are great for users.

00:02:24.220 --> 00:02:26.344
And now we're going to walk
through the things that

00:02:26.344 --> 00:02:29.000
are most important to
know about as a developer.

00:02:29.000 --> 00:02:31.070
So first up is multi-window.

00:02:31.070 --> 00:02:34.020
What this means is a user can
use their phone or tablet,

00:02:34.020 --> 00:02:36.980
or even TV, to do more than
one thing at the same time.

00:02:36.980 --> 00:02:38.780
Now this can be
great for users who

00:02:38.780 --> 00:02:40.400
like to do things
like maybe watching

00:02:40.400 --> 00:02:43.100
a video of the cooking
recipe demonstrating how

00:02:43.100 --> 00:02:46.340
to make an item while looking
at the recipe or the shopping

00:02:46.340 --> 00:02:47.660
list in another screen.

00:02:47.660 --> 00:02:50.651
So you can look at those two
activities at the same time.

00:02:50.651 --> 00:02:53.150
Maybe, if you're like me, when
you're doing your work email,

00:02:53.150 --> 00:02:55.460
you also like to watch cat
videos at the same time.

00:02:55.460 --> 00:02:58.480
And so multi-window
will help you do that.

00:02:58.480 --> 00:03:00.980
We find that mutli-window works
especially well with devices

00:03:00.980 --> 00:03:02.540
that have much larger screens.

00:03:02.540 --> 00:03:06.420
I use it on my Nexus 6P and
find it works pretty well there.

00:03:06.420 --> 00:03:08.690
And it's really easy
to have this work.

00:03:08.690 --> 00:03:11.660
It'll start working on your
apps automatically by default.

00:03:11.660 --> 00:03:13.350
You don't actually
have to do anything.

00:03:13.350 --> 00:03:15.016
But in order to make
sure it works well,

00:03:15.016 --> 00:03:17.300
you'll probably want to test
out your apps with Nougat

00:03:17.300 --> 00:03:18.950
in the multi-window
mode, and just

00:03:18.950 --> 00:03:21.560
make sure that everything is
working well and looking good.

00:03:21.560 --> 00:03:23.210
And the reason this
works so easily

00:03:23.210 --> 00:03:25.190
is that Android apps
and their layouts

00:03:25.190 --> 00:03:27.620
are so good at adjusting
anyway to take advantage

00:03:27.620 --> 00:03:29.330
of different screen
sizes, right?

00:03:29.330 --> 00:03:31.370
If you open your app on
a different size device,

00:03:31.370 --> 00:03:32.530
it'll adjust automatically.

00:03:32.530 --> 00:03:34.238
And so with multi-window,
a similar thing

00:03:34.238 --> 00:03:35.429
is happening here.

00:03:35.429 --> 00:03:37.970
Now after you've tested it, if
you want to make a few tweaks,

00:03:37.970 --> 00:03:40.640
there are certain parameters
that you can change-- things

00:03:40.640 --> 00:03:43.580
like default or minimum
sizing, if you want to make

00:03:43.580 --> 00:03:45.860
sure it works exactly right.

00:03:45.860 --> 00:03:47.420
So next up, notifications.

00:03:47.420 --> 00:03:49.870
Marshmallow had a big
notifications overhaul.

00:03:49.870 --> 00:03:51.620
And in Nougat, we still
weren't satisfied,

00:03:51.620 --> 00:03:54.020
so we decided to
do even more stuff.

00:03:54.020 --> 00:03:56.490
We're going to talk through a
few of the important changes.

00:03:56.490 --> 00:03:59.000
So first up, there's new
templates for notifications.

00:03:59.000 --> 00:04:00.380
Another really
important thing is

00:04:00.380 --> 00:04:02.380
there is an attribution marker.

00:04:02.380 --> 00:04:04.890
You can see up here
there's a green icon,

00:04:04.890 --> 00:04:06.140
and it says Hangouts.

00:04:06.140 --> 00:04:08.450
This way, a user can
be sure exactly which

00:04:08.450 --> 00:04:11.000
app sent that notification.

00:04:11.000 --> 00:04:13.460
Also, we offer
bundled notifications.

00:04:13.460 --> 00:04:16.124
I use this all the time because
I get a lot of Gmail messages.

00:04:16.124 --> 00:04:17.540
And so with bundled
notifications,

00:04:17.540 --> 00:04:19.880
they all come
together as one group,

00:04:19.880 --> 00:04:22.760
so it's easier for the user
to manage those notifications.

00:04:22.760 --> 00:04:26.060
But my favorite feature
with notifications in Nougat

00:04:26.060 --> 00:04:28.230
is actually these quick actions.

00:04:28.230 --> 00:04:30.470
If you look at the
screenshot in the right, what

00:04:30.470 --> 00:04:32.849
you can see here are these
quick action buttons.

00:04:32.849 --> 00:04:34.640
So if you get a message,
you don't actually

00:04:34.640 --> 00:04:36.710
have to open the
app to reply to it.

00:04:36.710 --> 00:04:38.930
For example, here, I could
just click on the Reply

00:04:38.930 --> 00:04:40.412
button or the Archive button.

00:04:40.412 --> 00:04:41.870
And so when I find
that I'm running

00:04:41.870 --> 00:04:43.870
from meeting to meeting,
it's really easy for me

00:04:43.870 --> 00:04:46.190
to send quick messages
to my colleagues

00:04:46.190 --> 00:04:49.660
or friends and family as
I'm going through my day.

00:04:49.660 --> 00:04:53.270
So does anyone here in this
room speak multiple languages?

00:04:53.270 --> 00:04:53.949
Yeah.

00:04:53.949 --> 00:04:56.240
I had a feeling that this
would be a big hit in Europe.

00:04:56.240 --> 00:04:59.150
I speak one language pretty
well, and then two languages

00:04:59.150 --> 00:05:00.200
pretty badly.

00:05:00.200 --> 00:05:02.210
And so we think, in
Europe, this is going

00:05:02.210 --> 00:05:04.040
to be a pretty popular feature.

00:05:04.040 --> 00:05:07.190
So the idea is that many people
don't speak just one language.

00:05:07.190 --> 00:05:08.350
They speak more.

00:05:08.350 --> 00:05:09.890
And so what we
allow the user to do

00:05:09.890 --> 00:05:12.850
is to specify their different
languages that they speak

00:05:12.850 --> 00:05:14.910
and put them in their
order of preference.

00:05:14.910 --> 00:05:17.980
So when a user tries
to open an app,

00:05:17.980 --> 00:05:20.000
Android will try to load
the app in the user's

00:05:20.000 --> 00:05:21.230
first-choice language.

00:05:21.230 --> 00:05:23.690
If that app translation isn't
available in that language,

00:05:23.690 --> 00:05:26.190
they'll load the second choice,
the third choice, and so on.

00:05:26.190 --> 00:05:28.374
So for example, in this
case, with this screen here,

00:05:28.374 --> 00:05:30.290
it would first try to
open the app in English.

00:05:30.290 --> 00:05:32.210
If that didn't work,
it would try Spanish.

00:05:32.210 --> 00:05:34.704
And then, as a last resort,
it would try French.

00:05:34.704 --> 00:05:36.620
So as a developer, there
shouldn't be anything

00:05:36.620 --> 00:05:38.420
that you have to do
to make this work.

00:05:38.420 --> 00:05:39.869
It should just
work automatically.

00:05:39.869 --> 00:05:42.410
But we think that you'll like
knowing that this is available,

00:05:42.410 --> 00:05:44.826
and that this will help users
be able to make sure they're

00:05:44.826 --> 00:05:48.870
seeing your app in the right
language that's right for them.

00:05:48.870 --> 00:05:51.080
So in Marshmallow,
we talked last year

00:05:51.080 --> 00:05:53.780
about a huge overhaul to
the permissions platform.

00:05:53.780 --> 00:05:56.335
Permissions are now
real-time as of Marshmallow.

00:05:56.335 --> 00:05:57.710
But there were a
couple of things

00:05:57.710 --> 00:05:59.961
that we wanted to tweak to
make them work even better.

00:05:59.961 --> 00:06:01.960
So has anyone ever had
to ask for the permission

00:06:01.960 --> 00:06:03.470
to access a user's
internal storage,

00:06:03.470 --> 00:06:05.330
and it used to pop up
a message about, hey,

00:06:05.330 --> 00:06:07.579
can I access your photos and
this and that and a bunch

00:06:07.579 --> 00:06:08.810
of different things?

00:06:08.810 --> 00:06:11.270
We had a lot of feedback from
developers that, sometimes,

00:06:11.270 --> 00:06:12.980
they would only need to
access one of these things,

00:06:12.980 --> 00:06:14.688
and gaining access to
all of these things

00:06:14.688 --> 00:06:16.280
was concerning to users.

00:06:16.280 --> 00:06:18.650
And we thought that that was
absolutely great feedback.

00:06:18.650 --> 00:06:20.350
So what we've done is
we've broken it down so

00:06:20.350 --> 00:06:22.475
that, as a developer, rather
than requesting access

00:06:22.475 --> 00:06:25.040
to all of the storage,
you can request access

00:06:25.040 --> 00:06:26.210
to a specific folder.

00:06:26.210 --> 00:06:29.210
So for example, in this case,
maybe this is a photo app.

00:06:29.210 --> 00:06:32.210
And so it's actually asking
to access just the Pictures

00:06:32.210 --> 00:06:32.990
folder.

00:06:32.990 --> 00:06:36.140
And so this means that a user
understands a lot better why

00:06:36.140 --> 00:06:38.350
what you're requesting
is necessary,

00:06:38.350 --> 00:06:40.580
and also, you're not gaining
access to other files

00:06:40.580 --> 00:06:43.940
that you may not need
to have access to.

00:06:43.940 --> 00:06:47.060
So does anyone here in
this room work on 3D games?

00:06:47.060 --> 00:06:48.140
Yeah, a couple of folks.

00:06:48.140 --> 00:06:49.460
That's really cool.

00:06:49.460 --> 00:06:52.160
So Vulkan is a new technology.

00:06:52.160 --> 00:06:56.210
It's a low-level, low-overhead
and cross-platform 3D API.

00:06:56.210 --> 00:06:58.710
And it's also available
in Android Nougat as well.

00:06:58.710 --> 00:07:00.410
So this is a really
great technology

00:07:00.410 --> 00:07:01.460
that helps if you're
trying to write

00:07:01.460 --> 00:07:02.930
games that work cross-platform.

00:07:02.930 --> 00:07:04.740
It works a lot more
similarly across

00:07:04.740 --> 00:07:06.104
these different platforms.

00:07:06.104 --> 00:07:08.270
And also, if you use a game
engine, a lot of engines

00:07:08.270 --> 00:07:10.520
are supporting it already,
or have a platform

00:07:10.520 --> 00:07:12.415
to be able to support
Vulkan in the future.

00:07:12.415 --> 00:07:14.540
So what this means now,
with Vulkan being supported

00:07:14.540 --> 00:07:16.430
in Nougat, is, if
you are using Vulkan,

00:07:16.430 --> 00:07:20.670
it'll start to work really well
on these devices right away.

00:07:20.670 --> 00:07:21.914
So that was Android Nougat.

00:07:21.914 --> 00:07:24.080
And now we're going to move
on and talk about what's

00:07:24.080 --> 00:07:26.390
new in Material Design.

00:07:26.390 --> 00:07:28.130
So first of all,
how many apps here

00:07:28.130 --> 00:07:31.940
are using Material
Design already?

00:07:31.940 --> 00:07:33.180
A good number of folks.

00:07:33.180 --> 00:07:34.815
So if you're using
Material Design,

00:07:34.815 --> 00:07:36.440
you're actually in
really good company.

00:07:36.440 --> 00:07:38.990
We noticed recently that we
have basically a million apps

00:07:38.990 --> 00:07:42.350
on the Play Store that
are using Material Design.

00:07:42.350 --> 00:07:44.765
And if you haven't heard of
it, what Material Design is

00:07:44.765 --> 00:07:48.770
is a set of principles
that govern how apps look,

00:07:48.770 --> 00:07:51.080
how they move, how they feel.

00:07:51.080 --> 00:07:52.970
And it's this set
of design principles

00:07:52.970 --> 00:07:56.900
that covers things like
tactile surfaces, rich imagery,

00:07:56.900 --> 00:08:00.587
bold colors, and my favorite,
which is meaningful motion.

00:08:00.587 --> 00:08:02.420
And why Material Design
is important for you

00:08:02.420 --> 00:08:04.460
as a developer is that,
when a person uses

00:08:04.460 --> 00:08:07.100
your app for the first
time, you want them

00:08:07.100 --> 00:08:08.554
to know how it works, right?

00:08:08.554 --> 00:08:10.970
And if you're already using
this Material Design framework

00:08:10.970 --> 00:08:13.700
that users understand, it
will be more intuitive to them

00:08:13.700 --> 00:08:15.701
to understand how to get
started with your app.

00:08:15.701 --> 00:08:17.450
You'll be less likely
to have a person who

00:08:17.450 --> 00:08:20.450
gets confused or lost and
doesn't know how to do it.

00:08:20.450 --> 00:08:22.610
And so if you're looking
to reach the over 1.4

00:08:22.610 --> 00:08:24.320
billion Android
users that are active

00:08:24.320 --> 00:08:26.780
today, using Material
Design can be

00:08:26.780 --> 00:08:28.880
a critical part of
the process in order

00:08:28.880 --> 00:08:31.296
to make sure that they're going
to know how to get started

00:08:31.296 --> 00:08:33.735
immediately and stay engaged.

00:08:33.735 --> 00:08:35.860
So we'll talk about a couple
examples of developers

00:08:35.860 --> 00:08:39.350
here in Europe that are
using Material Design.

00:08:39.350 --> 00:08:41.690
So first up is Bring!
from Switzerland.

00:08:41.690 --> 00:08:44.026
And they implemented
Material Design.

00:08:44.026 --> 00:08:45.650
Now if you haven't
used the Bring! app,

00:08:45.650 --> 00:08:49.130
it's all about being able to
manage multiple shopping lists.

00:08:49.130 --> 00:08:50.690
And it does things
like informing you

00:08:50.690 --> 00:08:52.750
about what items still
need to go in your cart.

00:08:52.750 --> 00:08:54.140
You can also share
your shopping list.

00:08:54.140 --> 00:08:56.420
So if you have a roommate or
spouse who's at the store,

00:08:56.420 --> 00:08:57.961
you can alert them
at the last minute

00:08:57.961 --> 00:09:00.490
if there's something that
they need to pick up for you.

00:09:00.490 --> 00:09:02.300
So Bring! has used
Material Design

00:09:02.300 --> 00:09:03.920
to implement a
consistent toolbar

00:09:03.920 --> 00:09:05.767
across the different
screens in their app.

00:09:05.767 --> 00:09:07.850
It allows them to keep
their most popular features

00:09:07.850 --> 00:09:09.760
accessible wherever you go.

00:09:09.760 --> 00:09:12.085
And so they've managed
to fit in search, the nav

00:09:12.085 --> 00:09:13.730
drawer, imagery,
and an invite button

00:09:13.730 --> 00:09:16.922
on this toolbar that's
visible throughout their app.

00:09:16.922 --> 00:09:18.380
And they were pretty
happy with how

00:09:18.380 --> 00:09:20.350
this went because,
when they launched it,

00:09:20.350 --> 00:09:23.630
they saw that they had a 66%
increase in session times

00:09:23.630 --> 00:09:27.470
in the six months following the
launch of the Material Design

00:09:27.470 --> 00:09:28.107
revamp.

00:09:28.107 --> 00:09:29.690
And they also managed
to get showcased

00:09:29.690 --> 00:09:33.260
on the materialup blog as well.

00:09:33.260 --> 00:09:34.460
Fabulous is another app.

00:09:34.460 --> 00:09:36.080
This one's based in Paris.

00:09:36.080 --> 00:09:38.270
And it's a science-based
app that encourages users

00:09:38.270 --> 00:09:40.176
to adopt a healthy lifestyle.

00:09:40.176 --> 00:09:42.050
And it does this by
developing a personalized

00:09:42.050 --> 00:09:44.244
step-by-step program
for each user.

00:09:44.244 --> 00:09:46.160
And so in this layout,
we can see that they're

00:09:46.160 --> 00:09:47.541
using cards as well.

00:09:47.541 --> 00:09:49.040
But in this case,
they're using this

00:09:49.040 --> 00:09:51.920
to help a user organize
their habits and their goals.

00:09:51.920 --> 00:09:54.069
And when you tap on these
cards, they elevate.

00:09:54.069 --> 00:09:55.610
And with the help
of icons, they make

00:09:55.610 --> 00:09:58.430
it really easy for the user to
see exactly what they're doing,

00:09:58.430 --> 00:10:00.842
and to understand every
action that they're taking.

00:10:00.842 --> 00:10:02.300
It's a very clear
layout, and users

00:10:02.300 --> 00:10:04.820
have responded really well.

00:10:04.820 --> 00:10:07.220
So since they did their
Material redesign in 2015,

00:10:07.220 --> 00:10:10.340
they've actually had a tenfold
increase in daily downloads.

00:10:10.340 --> 00:10:13.667
So they've been really happy
with this result as well.

00:10:13.667 --> 00:10:16.250
So let's talk about what's new
with Material Design this year.

00:10:16.250 --> 00:10:19.850
When we first introduced
it, we had some devices

00:10:19.850 --> 00:10:23.450
that were able to support a
lot of advanced, complicated

00:10:23.450 --> 00:10:24.080
things.

00:10:24.080 --> 00:10:25.400
But some devices weren't.

00:10:25.400 --> 00:10:28.147
The great news is that, in
2016, on average, devices

00:10:28.147 --> 00:10:30.230
are just so much more
powerful than they were when

00:10:30.230 --> 00:10:31.740
Material was first announced.

00:10:31.740 --> 00:10:33.740
So we're really encouraging
developers this year

00:10:33.740 --> 00:10:35.364
who want to really
set themselves apart

00:10:35.364 --> 00:10:38.240
from a design standpoint to
look at the use of motion.

00:10:38.240 --> 00:10:41.000
With the higher-end devices, you
can support a lot more motion

00:10:41.000 --> 00:10:44.090
than you could with lower-end
devices a couple of years ago.

00:10:44.090 --> 00:10:47.210
So motion is really powerful
because, not only can it

00:10:47.210 --> 00:10:49.910
be fun, can it be
amusing, can it really

00:10:49.910 --> 00:10:52.130
bring charm and
character to your brand,

00:10:52.130 --> 00:10:54.530
but it's also a real
usability feature.

00:10:54.530 --> 00:10:56.000
Using motion in
your app can help

00:10:56.000 --> 00:10:58.370
a user understand as
they transition from one

00:10:58.370 --> 00:11:00.560
screen in your app to the next.

00:11:00.560 --> 00:11:02.670
Really helps understand
the transitions.

00:11:02.670 --> 00:11:05.870
And as I mentioned, it's also
a great way to bring in fun,

00:11:05.870 --> 00:11:09.500
delight, and even
make your users laugh.

00:11:09.500 --> 00:11:12.686
So that was what's new with
Material Design in 2016.

00:11:12.686 --> 00:11:14.810
And now the question is,
how do I make this happen?

00:11:14.810 --> 00:11:16.910
If I want to support the
latest Nougat features,

00:11:16.910 --> 00:11:19.520
bring a great design, and
build a wonderful app that's

00:11:19.520 --> 00:11:21.690
really going to get
noticed, how do I do it?

00:11:21.690 --> 00:11:24.740
And let's talk about
Android Studio for that.

00:11:24.740 --> 00:11:28.610
So is anyone here using
Android Studio today?

00:11:28.610 --> 00:11:31.640
Is anyone not using
Android Studio?

00:11:31.640 --> 00:11:32.140
Cool.

00:11:32.140 --> 00:11:34.015
Every year, we're seeing
more and more people

00:11:34.015 --> 00:11:34.790
using the Studio.

00:11:34.790 --> 00:11:36.560
And the reason
for that, we hope,

00:11:36.560 --> 00:11:39.860
is that we wanted to build
a purpose-focused IDE.

00:11:39.860 --> 00:11:42.230
We wanted to have
something that really

00:11:42.230 --> 00:11:46.040
was tuned for the languages that
Android development is based on

00:11:46.040 --> 00:11:48.350
and really felt native
to the Android platform.

00:11:48.350 --> 00:11:51.110
And we've really been
shocked and humbled

00:11:51.110 --> 00:11:54.680
by the amount of momentum
we've seen on the Android

00:11:54.680 --> 00:11:56.912
Studio of adoption so far.

00:11:56.912 --> 00:11:59.120
So those of you who said
you're using Android Studio,

00:11:59.120 --> 00:12:00.770
you're in very good company.

00:12:00.770 --> 00:12:04.280
If we look at the top 125
apps and games on Play,

00:12:04.280 --> 00:12:07.040
actually 92% of them are
using Android Studio.

00:12:07.040 --> 00:12:08.337
That's been great to see.

00:12:08.337 --> 00:12:10.670
And of course, millions of
developers all over the world

00:12:10.670 --> 00:12:13.950
are using Android
Studio as well.

00:12:13.950 --> 00:12:16.579
So for those of you who maybe
didn't know Android Studio as

00:12:16.579 --> 00:12:18.870
well, let's take a little
bit of time to talk about it,

00:12:18.870 --> 00:12:22.070
and talk about what was
new in the past year.

00:12:22.070 --> 00:12:25.430
So at the beginning of the year,
we launched Android Studio 2.0.

00:12:25.430 --> 00:12:26.859
The major focus here was speed.

00:12:26.859 --> 00:12:28.400
That was a real key
piece of feedback

00:12:28.400 --> 00:12:29.358
we had from developers.

00:12:29.358 --> 00:12:31.760
They said, make it faster
if you do nothing else.

00:12:31.760 --> 00:12:33.480
Came back time and time again.

00:12:33.480 --> 00:12:35.930
So we introduced something
called Instant Run.

00:12:35.930 --> 00:12:38.900
Now the idea here is that
you can do swaps of code

00:12:38.900 --> 00:12:41.030
in real-time when you
go to run your app.

00:12:41.030 --> 00:12:42.500
There's not a lot of waiting.

00:12:42.500 --> 00:12:45.110
And it can push code and
resources directly into the app

00:12:45.110 --> 00:12:47.120
while it's running
on your computer.

00:12:47.120 --> 00:12:49.970
And this also included not
just Instant Run but also

00:12:49.970 --> 00:12:51.920
major improvements
to the emulators.

00:12:51.920 --> 00:12:56.690
It included a new emulator
UI, a GPU profiler view,

00:12:56.690 --> 00:13:00.530
search deep-linking, creation
and building of test cases.

00:13:00.530 --> 00:13:03.650
We'll talk about those
things a little bit later.

00:13:03.650 --> 00:13:06.470
And then, in 2.1, we built
that release side-by-side

00:13:06.470 --> 00:13:08.150
with the team working on Nougat.

00:13:08.150 --> 00:13:10.070
So this is all about
supporting Android Nougat

00:13:10.070 --> 00:13:13.280
so we have support for
the new features and APIs,

00:13:13.280 --> 00:13:15.990
new Nougat emulators to
test on, Jack compiler

00:13:15.990 --> 00:13:17.930
support so that you
can try N's Java 8

00:13:17.930 --> 00:13:21.485
support, and important
stability enhancements.

00:13:21.485 --> 00:13:24.110
That was something else we heard
from you is that every time we

00:13:24.110 --> 00:13:25.190
need to update it,
we need to make

00:13:25.190 --> 00:13:26.648
sure it's just
really high-quality,

00:13:26.648 --> 00:13:28.640
production-grade stuff.

00:13:28.640 --> 00:13:31.490
And then, in 2.1, we also
made an additional investment

00:13:31.490 --> 00:13:32.720
into Instant Run.

00:13:32.720 --> 00:13:34.760
We moved the decks
in-process, and that

00:13:34.760 --> 00:13:37.730
was a huge accelerator, allowing
Instant Run to get even faster

00:13:37.730 --> 00:13:40.610
than previous incarnations.

00:13:40.610 --> 00:13:43.730
So of course, now we're
looking at Android Studio 2.2.

00:13:43.730 --> 00:13:46.490
The main focuses there are
speed, smarts, and support

00:13:46.490 --> 00:13:47.660
for Nougat.

00:13:47.660 --> 00:13:50.390
And so we also have a ton
of updates in this release--

00:13:50.390 --> 00:13:52.910
everything from Firebase
integration to enhanced support

00:13:52.910 --> 00:13:53.512
from C .

00:13:53.512 --> 00:13:55.970
So I'm going to highlight a
few things that you should know

00:13:55.970 --> 00:13:58.950
about in this latest release.

00:13:58.950 --> 00:14:01.370
So as a developer, one of the
best feelings in the world

00:14:01.370 --> 00:14:02.550
is being in the flow.

00:14:02.550 --> 00:14:04.460
You know, you finally
sort of load up

00:14:04.460 --> 00:14:06.530
in your brain all of
the code that's running.

00:14:06.530 --> 00:14:07.710
You're working on it.

00:14:07.710 --> 00:14:09.971
And the last thing you
want is to get disrupted,

00:14:09.971 --> 00:14:12.470
to break that flow when you're
waiting for your app to build

00:14:12.470 --> 00:14:13.970
and run on your machine.

00:14:13.970 --> 00:14:16.155
So that's why we
introduced Instant Run.

00:14:16.155 --> 00:14:18.530
And we've made progressive
improvements since its launch.

00:14:18.530 --> 00:14:21.020
You can see a lot of the
updates here into the speed.

00:14:21.020 --> 00:14:22.910
And that's really been getting
a lot of good feedback.

00:14:22.910 --> 00:14:24.826
And we're going to keep
trying to work on that

00:14:24.826 --> 00:14:27.360
and improving it even further.

00:14:27.360 --> 00:14:29.940
We've also seen a big
development in the Android

00:14:29.940 --> 00:14:31.712
ecosystem around C .

00:14:31.712 --> 00:14:33.420
When we first started
working on Android,

00:14:33.420 --> 00:14:34.980
we thought that native
code was something that

00:14:34.980 --> 00:14:36.210
was going to be pretty rare.

00:14:36.210 --> 00:14:37.350
And it was.

00:14:37.350 --> 00:14:38.910
And then, as Android's
evolved, we've

00:14:38.910 --> 00:14:40.890
actually seen more
and more developers

00:14:40.890 --> 00:14:43.556
using C for more
and more reasons.

00:14:43.556 --> 00:14:45.930
Initially, it would just be
for things like maybe physics

00:14:45.930 --> 00:14:48.140
simulations, but
we've seen over time

00:14:48.140 --> 00:14:49.890
that more and more
types of apps and games

00:14:49.890 --> 00:14:50.970
are using native code.

00:14:50.970 --> 00:14:53.261
So we've realized we need to
enhance the support for it

00:14:53.261 --> 00:14:54.610
a lot more.

00:14:54.610 --> 00:14:58.811
So you can now actually do a
whole bunch of more things in C

00:14:58.811 --> 00:14:59.310
.

00:14:59.310 --> 00:15:01.000
And let's walk
through a few of them.

00:15:01.000 --> 00:15:03.420
So we've already supported
editing and debugging

00:15:03.420 --> 00:15:04.350
of native code.

00:15:04.350 --> 00:15:08.490
But with 2.2, we're bringing
you IntelliJ 2016.1.

00:15:08.490 --> 00:15:10.920
This includes a lot of
IntelliJ enhancements

00:15:10.920 --> 00:15:14.740
to C from the Sea
Lion 2016.1 release.

00:15:14.740 --> 00:15:18.030
And now you can also just run
the app like any normal Android

00:15:18.030 --> 00:15:19.230
app using the Run dialog.

00:15:19.230 --> 00:15:22.290
It's much more integrated
into the overall Build and Run

00:15:22.290 --> 00:15:23.296
experience.

00:15:23.296 --> 00:15:25.295
So now this is also
integrated with the debugger

00:15:25.295 --> 00:15:27.900
so that you can set the
breakpoint, then run the app,

00:15:27.900 --> 00:15:30.619
and the debugger will break
at the right place executing

00:15:30.619 --> 00:15:31.660
the code on your machine.

00:15:31.660 --> 00:15:34.440
It's just a much more
integrated, well-run test,

00:15:34.440 --> 00:15:37.080
run, and build cycle
on your machine.

00:15:37.080 --> 00:15:39.750
So next, I'd also want to
tell you a little bit more

00:15:39.750 --> 00:15:42.330
about the C debugger
enhancements.

00:15:42.330 --> 00:15:46.140
So in 2.2, you no longer have
to select explicitly whether you

00:15:46.140 --> 00:15:49.200
want a C , a Java,
or a hybrid debugger.

00:15:49.200 --> 00:15:51.390
You can just use
Auto, and then the IDE

00:15:51.390 --> 00:15:53.850
will automatically
select the right debugger

00:15:53.850 --> 00:15:55.257
for what you're trying to do.

00:15:55.257 --> 00:15:57.090
And if you're debugging
code in N and above,

00:15:57.090 --> 00:15:59.910
you can actually just use one
debugger for both of these,

00:15:59.910 --> 00:16:04.150
thanks to our
Java-aware C debugger.

00:16:04.150 --> 00:16:05.311
So let's talk about design.

00:16:05.311 --> 00:16:06.810
We talked a little
bit earlier about

00:16:06.810 --> 00:16:08.790
how users respond
so well when you've

00:16:08.790 --> 00:16:10.260
made your app look great.

00:16:10.260 --> 00:16:11.640
And Android Studio
has introduced

00:16:11.640 --> 00:16:14.380
a couple of new features to
really help you improve this.

00:16:14.380 --> 00:16:16.720
So first of all,
the Layout Editor.

00:16:16.720 --> 00:16:18.720
It's a new user
interface designer.

00:16:18.720 --> 00:16:20.850
It helps you quickly design
the layouts in your app

00:16:20.850 --> 00:16:23.507
and a much more visual way,
a much more interactive way.

00:16:23.507 --> 00:16:25.590
And so you don't have to
go back and forth so much

00:16:25.590 --> 00:16:28.109
between coding and previews.

00:16:28.109 --> 00:16:29.400
We also have some new features.

00:16:29.400 --> 00:16:32.400
Here you can see
the Blueprint Mode.

00:16:32.400 --> 00:16:33.630
It's really powerful.

00:16:33.630 --> 00:16:35.760
And we have a new
Properties panel also

00:16:35.760 --> 00:16:37.500
over there, which
allows you to quickly

00:16:37.500 --> 00:16:40.050
edit the layouts and
the widgets faster.

00:16:40.050 --> 00:16:42.280
We've also introduced
a new type of layout.

00:16:42.280 --> 00:16:43.530
It's called constraint layout.

00:16:43.530 --> 00:16:45.240
Previously, we'd see
a lot of developers,

00:16:45.240 --> 00:16:47.700
when they wanted to achieve
a very precise layout,

00:16:47.700 --> 00:16:50.370
they end up nesting a bunch
of different layout types

00:16:50.370 --> 00:16:51.630
inside of each other.

00:16:51.630 --> 00:16:54.120
It would be very hard
to debug, very clunky.

00:16:54.120 --> 00:16:55.620
We've all probably
spent a few hours

00:16:55.620 --> 00:16:57.703
fiddling with these things,
wondering why it never

00:16:57.703 --> 00:16:59.026
quite lines up right.

00:16:59.026 --> 00:17:00.900
And so what we've done
with constraint layout

00:17:00.900 --> 00:17:02.733
is it gives you a lot
more powerful language

00:17:02.733 --> 00:17:05.190
to express complex
UIs, but you don't

00:17:05.190 --> 00:17:08.069
have to do this horrible
layout nesting anymore.

00:17:08.069 --> 00:17:10.349
So we think this will really
simplify your experience

00:17:10.349 --> 00:17:12.301
for creating and
managing your apps.

00:17:12.301 --> 00:17:13.800
And together with
the Layout Editor,

00:17:13.800 --> 00:17:16.290
you'll be able to have a much
more powerful and simple way

00:17:16.290 --> 00:17:19.079
of modifying your layouts.

00:17:19.079 --> 00:17:20.520
Now if you do have
a tricky layout

00:17:20.520 --> 00:17:22.170
issue that you can't
really figure out,

00:17:22.170 --> 00:17:24.599
we also have something
called Layout Inspector.

00:17:24.599 --> 00:17:27.089
Now the idea here is that
you can debug a snapshot

00:17:27.089 --> 00:17:29.070
of your app's layout.

00:17:29.070 --> 00:17:31.500
You can have it running
on your Android emulator,

00:17:31.500 --> 00:17:34.110
on your computer, or
on your Android device.

00:17:34.110 --> 00:17:36.840
And it'll give you tools to
inspect the view hierarchy.

00:17:36.840 --> 00:17:39.090
And you can look at different
corresponding attributes

00:17:39.090 --> 00:17:41.640
to find and fix the layout
issues that you couldn't

00:17:41.640 --> 00:17:43.125
debug a little bit more easily.

00:17:45.314 --> 00:17:47.730
So another thing that a lot
of developers are trying to do

00:17:47.730 --> 00:17:49.480
is to get more efficient
with their apps--

00:17:49.480 --> 00:17:51.300
not just in how they
build them, but also

00:17:51.300 --> 00:17:54.240
in the binaries that are
delivered to users' devices.

00:17:54.240 --> 00:17:56.640
So the tool that you
have that's best for this

00:17:56.640 --> 00:17:58.159
is called the APK Analyzer.

00:17:58.159 --> 00:17:59.700
It's really designed
to help you keep

00:17:59.700 --> 00:18:01.790
your app small and efficient.

00:18:01.790 --> 00:18:03.540
And for those of you
who are building apps

00:18:03.540 --> 00:18:06.360
for emerging markets--
places like India, Brazil,

00:18:06.360 --> 00:18:08.580
and Indonesia-- this
becomes even more critical,

00:18:08.580 --> 00:18:10.380
as users don't have
a ton of storage,

00:18:10.380 --> 00:18:12.620
and also have limited
network connectivity.

00:18:12.620 --> 00:18:14.453
We'll give you a little
bit more information

00:18:14.453 --> 00:18:16.830
about that in the Building
for Billions exercise.

00:18:16.830 --> 00:18:19.214
So APK Inspector can
help you figure out

00:18:19.214 --> 00:18:20.880
which of the different
files in your APK

00:18:20.880 --> 00:18:22.410
are taking up a lot of space.

00:18:22.410 --> 00:18:25.710
It can also help you do things
like avoiding the 64K reference

00:18:25.710 --> 00:18:28.260
method limit issues
with your dex files.

00:18:28.260 --> 00:18:31.110
It can help you diagnose
ProGuard config issues

00:18:31.110 --> 00:18:33.600
and inspect complex
resources files.

00:18:33.600 --> 00:18:36.540
It's really to help you analyze
every aspect of your APK

00:18:36.540 --> 00:18:38.790
and get rid of the bloat.

00:18:38.790 --> 00:18:40.260
Now one of the
other things to note

00:18:40.260 --> 00:18:43.110
is that the APK Analyzer
actually shows you file size

00:18:43.110 --> 00:18:44.740
in a couple of different ways.

00:18:44.740 --> 00:18:46.950
First of all, you can
see the raw file size.

00:18:46.950 --> 00:18:49.140
But actually, you can
also see the download size

00:18:49.140 --> 00:18:51.332
of various components
in your APK.

00:18:51.332 --> 00:18:53.040
And what is the
difference between those?

00:18:53.040 --> 00:18:55.860
Well, the download size is
actually the estimated size

00:18:55.860 --> 00:18:58.460
that users would actually need
to download when the APK is

00:18:58.460 --> 00:18:59.460
served from Google Play.

00:18:59.460 --> 00:19:01.170
And that can actually be
different from the raw file

00:19:01.170 --> 00:19:01.980
size.

00:19:01.980 --> 00:19:03.570
So this information
should really

00:19:03.570 --> 00:19:06.840
help you prioritize where to
focus your efforts in reducing

00:19:06.840 --> 00:19:09.210
app size and make sure that
you're doing the highest

00:19:09.210 --> 00:19:11.810
return on investment there.

00:19:11.810 --> 00:19:14.120
So let's move on and talk
about testing, right?

00:19:14.120 --> 00:19:15.450
Testing is really critical.

00:19:15.450 --> 00:19:17.360
The most basic thing
that users want

00:19:17.360 --> 00:19:19.430
is they want your
app to work well.

00:19:19.430 --> 00:19:22.230
And so you know, writing UI
tests can be really tedious.

00:19:22.230 --> 00:19:24.230
And a lot of developers
have this as their least

00:19:24.230 --> 00:19:25.800
favorite thing to do.

00:19:25.800 --> 00:19:27.380
And we wanted to
make that easier,

00:19:27.380 --> 00:19:29.540
because testing is so
critical and so important

00:19:29.540 --> 00:19:32.170
when you're trying to get a
high star rating on Google Play,

00:19:32.170 --> 00:19:33.920
or trying to create
an app that users love

00:19:33.920 --> 00:19:35.492
and will want to come back to.

00:19:35.492 --> 00:19:36.950
So we created
something really new.

00:19:36.950 --> 00:19:39.530
We created something called
the Record Espresso Test

00:19:39.530 --> 00:19:41.660
UI in Android Studio.

00:19:41.660 --> 00:19:43.220
So here's what you can do.

00:19:43.220 --> 00:19:44.840
It's just as easy
as using your app.

00:19:44.840 --> 00:19:47.870
You can run your app, and then
Android Studio will actually

00:19:47.870 --> 00:19:50.210
capture all of your
UI interactions,

00:19:50.210 --> 00:19:53.780
and it'll convert them into a
fully reusable Espresso test.

00:19:53.780 --> 00:19:56.900
And then you can run this test
locally with Android Studio,

00:19:56.900 --> 00:19:58.190
maybe using the emulator.

00:19:58.190 --> 00:20:00.190
Or you can actually run
it against Firebase Test

00:20:00.190 --> 00:20:02.280
Lab, which we'll talk
about a little bit later.

00:20:02.280 --> 00:20:03.650
And so if you want
to use the recorder,

00:20:03.650 --> 00:20:05.358
you can just go to
the Run menu, and then

00:20:05.358 --> 00:20:08.310
select the Record
Espresso Test function.

00:20:08.310 --> 00:20:11.180
So if you have been sort of
procrastinating and putting off

00:20:11.180 --> 00:20:14.360
writing any tests because it's
a big pain-- which it is--

00:20:14.360 --> 00:20:16.760
I would highly encourage
you to use the Espresso Test

00:20:16.760 --> 00:20:17.967
Recorder to get started.

00:20:17.967 --> 00:20:20.300
If you just record a couple
of simple tests for the most

00:20:20.300 --> 00:20:22.970
common flows in your app, that
can pay off hugely when you're

00:20:22.970 --> 00:20:25.053
trying to make sure you
don't have any regressions

00:20:25.053 --> 00:20:27.350
of functionality.

00:20:27.350 --> 00:20:31.070
Also core to testing is having
a great local test solution.

00:20:31.070 --> 00:20:32.660
An emulator, right?

00:20:32.660 --> 00:20:34.160
And the Android
emulator didn't used

00:20:34.160 --> 00:20:35.660
to be as fast as
we wanted it to be.

00:20:35.660 --> 00:20:37.310
And so users would
tell me-- developers

00:20:37.310 --> 00:20:39.518
would tell me that they
spend a ton of time and money

00:20:39.518 --> 00:20:41.839
trying to source a whole
wide range of devices.

00:20:41.839 --> 00:20:43.880
When I'd go to visit
developers in their offices,

00:20:43.880 --> 00:20:46.340
they would show me a gigantic
drawer, or maybe even

00:20:46.340 --> 00:20:49.010
a full closet full of all
of the Android devices

00:20:49.010 --> 00:20:50.210
that they had to buy.

00:20:50.210 --> 00:20:53.150
Probably a lot of you have
one of those closets as well.

00:20:53.150 --> 00:20:56.540
So we've wanted to try to make
this unnecessary, or at least

00:20:56.540 --> 00:20:57.440
a lot less necessary.

00:20:57.440 --> 00:20:58.940
So what we've been
doing is focusing

00:20:58.940 --> 00:21:00.530
on improving the emulator.

00:21:00.530 --> 00:21:02.400
One of the biggest
concerns there was speed.

00:21:02.400 --> 00:21:04.400
We've now improved the
emulator so it's actually

00:21:04.400 --> 00:21:05.930
faster than a physical device.

00:21:05.930 --> 00:21:07.820
We're really excited about that.

00:21:07.820 --> 00:21:10.209
And we hope that being able
to use more of your testing

00:21:10.209 --> 00:21:11.750
on emulators will
mean that you don't

00:21:11.750 --> 00:21:13.250
have to spend as
much time and money

00:21:13.250 --> 00:21:15.530
managing your gigantic
drawer of Android devices.

00:21:15.530 --> 00:21:17.238
And you can spend more
of your time doing

00:21:17.238 --> 00:21:19.490
some of the funner parts.

00:21:19.490 --> 00:21:22.024
Finally, Android Studio
is also the easiest way

00:21:22.024 --> 00:21:23.690
to integrate the suite
of Firebase tools

00:21:23.690 --> 00:21:25.819
that I'm about to talk about.

00:21:25.819 --> 00:21:27.860
We want to make it easier
for you to add services

00:21:27.860 --> 00:21:31.720
like analytics, authentication,
notifications, and AdMob,

00:21:31.720 --> 00:21:33.830
with just a couple of
clicks in Android Studio.

00:21:33.830 --> 00:21:36.854
So we've made that a lot easier.

00:21:36.854 --> 00:21:39.020
OK, so I started talking a
little bit about Firebase

00:21:39.020 --> 00:21:41.000
and how it integrates
with Android Studio.

00:21:41.000 --> 00:21:43.820
But let's talk about
actually what Firebase is.

00:21:43.820 --> 00:21:46.370
So Firebase was a
company that Google

00:21:46.370 --> 00:21:47.960
acquired a couple of years ago.

00:21:47.960 --> 00:21:49.850
And when we acquired
them, they were actually

00:21:49.850 --> 00:21:52.160
mostly like backend services.

00:21:52.160 --> 00:21:54.470
And now at Google
I/O this year, we're

00:21:54.470 --> 00:21:56.720
really excited to announce
that Firebase is a lot more

00:21:56.720 --> 00:21:57.500
than that.

00:21:57.500 --> 00:21:59.930
Firebase is actually a
whole suite of technologies.

00:21:59.930 --> 00:22:01.460
We've tried to
bundle together all

00:22:01.460 --> 00:22:04.310
of the most important
Google Developer services

00:22:04.310 --> 00:22:07.034
and created one
cross-platform suite of tools.

00:22:07.034 --> 00:22:08.450
It used to be if
you wanted to use

00:22:08.450 --> 00:22:10.644
a bunch of different developer
services from Google,

00:22:10.644 --> 00:22:12.560
you had to go to a bunch
of different places--

00:22:12.560 --> 00:22:15.140
multiple SDKs, multiple
websites of documentation.

00:22:15.140 --> 00:22:17.150
It was more complicated
than we wanted.

00:22:17.150 --> 00:22:19.280
But with Firebase,
we've combined

00:22:19.280 --> 00:22:21.590
a bunch of the different
components together--

00:22:21.590 --> 00:22:24.470
you know, single
SDKs, centralized hubs

00:22:24.470 --> 00:22:25.670
of documentation, et cetera.

00:22:25.670 --> 00:22:27.920
So it's a lot easier for
you as a developer to use

00:22:27.920 --> 00:22:30.080
multiple Google tools together.

00:22:30.080 --> 00:22:31.430
And one key point to note.

00:22:31.430 --> 00:22:33.380
Firebase is cross-platform.

00:22:33.380 --> 00:22:35.150
It will work
fantastic on Android.

00:22:35.150 --> 00:22:36.950
But we know all of
you want to support

00:22:36.950 --> 00:22:38.600
your app on multiple
platforms as well,

00:22:38.600 --> 00:22:42.854
and so Firebase
also works on iOS.

00:22:42.854 --> 00:22:44.270
So let's talk about
the thing that

00:22:44.270 --> 00:22:46.019
brings together all
the different Firebase

00:22:46.019 --> 00:22:47.600
tools-- analytics.

00:22:47.600 --> 00:22:48.542
It's at the core.

00:22:48.542 --> 00:22:50.250
Everything you want
to do as a developer,

00:22:50.250 --> 00:22:53.570
you also want to measure and
see how it impacts users.

00:22:53.570 --> 00:22:56.150
So Firebase Analytics product
is great about giving you

00:22:56.150 --> 00:22:58.850
information about how users
behave, and also where they're

00:22:58.850 --> 00:23:00.960
coming from when they
go into your app.

00:23:00.960 --> 00:23:03.610
We built it from scratch
to support app developers

00:23:03.610 --> 00:23:04.406
cross-platform.

00:23:04.406 --> 00:23:05.780
And a lot of people
ask us, well,

00:23:05.780 --> 00:23:07.645
how is it different
from Google Analytics?

00:23:07.645 --> 00:23:09.020
And I think the
key thing to know

00:23:09.020 --> 00:23:10.936
about it is it was built
by the same team that

00:23:10.936 --> 00:23:12.080
built Google Analytics.

00:23:12.080 --> 00:23:14.720
Firebase Analytics is super
optimized for mobile apps.

00:23:14.720 --> 00:23:16.399
And we think it's a
great place to get

00:23:16.399 --> 00:23:18.440
started if you haven't
picked a solution already,

00:23:18.440 --> 00:23:20.523
or if you're looking at
getting a better analytics

00:23:20.523 --> 00:23:23.067
product for apps and games.

00:23:23.067 --> 00:23:25.400
So here's an example of what
Firebase Analytics can look

00:23:25.400 --> 00:23:27.620
like with a particular game.

00:23:27.620 --> 00:23:29.120
And then one of the
things we wanted

00:23:29.120 --> 00:23:31.130
to do with Firebase
Analytics is to make sure

00:23:31.130 --> 00:23:33.800
that, out of the box, you get
as much information as possible,

00:23:33.800 --> 00:23:35.680
so you don't have to spend
a bunch of time duplicating

00:23:35.680 --> 00:23:38.300
the sorts of things that every
developer would want to have.

00:23:38.300 --> 00:23:40.500
So it's a great way to
look at, for example,

00:23:40.500 --> 00:23:41.850
the usage from your app.

00:23:41.850 --> 00:23:43.961
You can also do
experiments with analytics.

00:23:43.961 --> 00:23:46.460
And in a lot of cases, you won't
even need to do any coding.

00:23:46.460 --> 00:23:49.014
So for those of you who work
at smaller companies, you know,

00:23:49.014 --> 00:23:50.930
it's really great to set
these sorts of things

00:23:50.930 --> 00:23:53.780
up so that people like product
managers and marketing folks

00:23:53.780 --> 00:23:56.030
can run experiments or get
data without always having

00:23:56.030 --> 00:24:00.640
to ask engineering teams to go
and add more code to the app.

00:24:00.640 --> 00:24:01.870
So that was analytics.

00:24:01.870 --> 00:24:03.280
And now we're going
to zoom in on a couple

00:24:03.280 --> 00:24:04.946
of different parts
of the Firebase suite

00:24:04.946 --> 00:24:06.670
to understand more about that.

00:24:06.670 --> 00:24:08.079
And we'll start with Develop.

00:24:08.079 --> 00:24:10.120
I've listed a bunch of
the different technologies

00:24:10.120 --> 00:24:11.260
here that Firebase offers.

00:24:11.260 --> 00:24:12.400
Unfortunately, I
don't have the time

00:24:12.400 --> 00:24:14.233
to talk about them all
today, so we're going

00:24:14.233 --> 00:24:16.340
to focus on a couple of things.

00:24:16.340 --> 00:24:17.904
First up is authentication.

00:24:17.904 --> 00:24:19.570
One of the most common
things developers

00:24:19.570 --> 00:24:22.630
want users to do in their app
is to sign in, because that way,

00:24:22.630 --> 00:24:24.790
you can offer the user a
personalized experience

00:24:24.790 --> 00:24:27.160
that evolves with them as
they keep using your app.

00:24:27.160 --> 00:24:28.840
And so Firebase
authentication gives you

00:24:28.840 --> 00:24:30.340
a bunch of different options.

00:24:30.340 --> 00:24:33.790
It supports email and password
login; it supports Google,

00:24:33.790 --> 00:24:36.280
Facebook, Twitter,
and GitHub sign-in;

00:24:36.280 --> 00:24:38.260
and if you already have
an existing system,

00:24:38.260 --> 00:24:41.830
it can integrate with those
existing user accounts.

00:24:41.830 --> 00:24:44.591
And Firebase authentication
has an open-source library.

00:24:44.591 --> 00:24:46.840
And it's fully integrated
with other Firebase features

00:24:46.840 --> 00:24:47.340
as well.

00:24:47.340 --> 00:24:50.650
So just as an example, if you
use Firebase authentication,

00:24:50.650 --> 00:24:52.660
you can also use it
to control access

00:24:52.660 --> 00:24:56.800
to user data in the
real-time database.

00:24:56.800 --> 00:24:58.960
So Firebase Cloud Messaging,
which was formerly

00:24:58.960 --> 00:25:01.240
known as Google Cloud
Messaging, is a cross-platform

00:25:01.240 --> 00:25:03.730
messaging solution that
lets you deliver messages

00:25:03.730 --> 00:25:07.300
to users in a reliable
way, with no cost,

00:25:07.300 --> 00:25:12.050
and also trying to minimize
impact on users' battery life.

00:25:12.050 --> 00:25:15.100
Firebase Test Lab for
Android is a great way

00:25:15.100 --> 00:25:18.015
to catch bugs before you
ship your code to users.

00:25:18.015 --> 00:25:19.390
We talked about
this a little bit

00:25:19.390 --> 00:25:22.720
before, how you can record
tests on Android Studio.

00:25:22.720 --> 00:25:25.030
And Firebase Test Lab,
it's really important

00:25:25.030 --> 00:25:26.950
to know that's actually
running your tests

00:25:26.950 --> 00:25:29.830
on real, physical devices that
are located in an data center

00:25:29.830 --> 00:25:31.404
at Google.

00:25:31.404 --> 00:25:33.820
Now if you want to get started
with our Firebase Test Lab,

00:25:33.820 --> 00:25:35.236
actually, the best
way to do it is

00:25:35.236 --> 00:25:37.137
to go into the Google
Play Developer Console.

00:25:37.137 --> 00:25:39.470
We have something in there
called the pre-launch report,

00:25:39.470 --> 00:25:41.636
which we're actually going
to hear a little bit more

00:25:41.636 --> 00:25:42.220
about later.

00:25:42.220 --> 00:25:44.840
We definitely encourage you
to try the pre-launch report

00:25:44.840 --> 00:25:46.840
in the Developer
Console, and to be

00:25:46.840 --> 00:25:49.540
able to use it with all of
your alpha and beta apps.

00:25:49.540 --> 00:25:53.410
Now while you may try to catch
most of your issues and bugs

00:25:53.410 --> 00:25:55.125
through testing
before the launch,

00:25:55.125 --> 00:25:56.500
we all know that
we're not always

00:25:56.500 --> 00:25:58.420
100% effective in this, right?

00:25:58.420 --> 00:26:00.467
So Firebase Crash
Reporting is a great way

00:26:00.467 --> 00:26:02.800
to find out about issues that
are occurring in the field

00:26:02.800 --> 00:26:04.210
after your launch.

00:26:04.210 --> 00:26:07.540
So whenever an app crashes,
it's reported by Firebase Crash,

00:26:07.540 --> 00:26:10.112
and the developer can
review these in a report.

00:26:10.112 --> 00:26:11.695
Again, this also
works cross-platform,

00:26:11.695 --> 00:26:15.520
so you can use it
across all of your apps.

00:26:15.520 --> 00:26:16.776
So that was developing an app.

00:26:16.776 --> 00:26:19.150
And now let's talk about some
of the technologies to help

00:26:19.150 --> 00:26:21.220
grow an app.

00:26:21.220 --> 00:26:23.770
First up is dynamic links.

00:26:23.770 --> 00:26:27.040
I was just talking to a
developer about this yesterday.

00:26:27.040 --> 00:26:29.770
A lot of us want to be able
to provide a single link that

00:26:29.770 --> 00:26:33.700
works cross-platform, and also
to be able to deep link someone

00:26:33.700 --> 00:26:36.730
to a page within an app,
even if that user had

00:26:36.730 --> 00:26:38.110
to go through the install flow.

00:26:38.110 --> 00:26:39.460
And this is really helpful.

00:26:39.460 --> 00:26:42.040
These links can work
across different platforms.

00:26:42.040 --> 00:26:44.470
And they do carry the
URL state after the user

00:26:44.470 --> 00:26:45.952
has completed the install.

00:26:45.952 --> 00:26:48.160
And also, they're integrated
with Firebase Analytics,

00:26:48.160 --> 00:26:50.201
so you can also see the
activity that's coming in

00:26:50.201 --> 00:26:52.970
through these dynamic links.

00:26:52.970 --> 00:26:54.695
And app indexing.

00:26:54.695 --> 00:26:56.950
This is something we launched
a couple of years ago.

00:26:56.950 --> 00:26:58.570
It's integrated with
Firebase as well.

00:26:58.570 --> 00:27:00.850
And this is a great way
to be able to take content

00:27:00.850 --> 00:27:05.461
for your app and service it
to users within Google Search.

00:27:05.461 --> 00:27:07.210
And also, as users
interact with your app,

00:27:07.210 --> 00:27:10.381
it can also boost your search
ranking in Google Search.

00:27:10.381 --> 00:27:12.880
It also provides things like
autocomplete in the search bar,

00:27:12.880 --> 00:27:14.920
bringing users into the
content for your app

00:27:14.920 --> 00:27:17.990
really easily and directly.

00:27:17.990 --> 00:27:18.890
And notifications.

00:27:18.890 --> 00:27:21.174
So Firebase Notifications
is a free service.

00:27:21.174 --> 00:27:23.590
A lot of developers ask me,
how can I manage these better?

00:27:23.590 --> 00:27:25.105
And this is a good
solution for it.

00:27:25.105 --> 00:27:27.730
It gives a simple UI for
generating notifications.

00:27:27.730 --> 00:27:30.110
A lot of the time, you don't
even need to write code.

00:27:30.110 --> 00:27:32.450
You can just use the Firebase
Notifications console.

00:27:32.450 --> 00:27:34.000
So again, this is
a great way where,

00:27:34.000 --> 00:27:36.000
if you have multiple
people working on your app,

00:27:36.000 --> 00:27:37.960
even folks who don't do
coding on a daily basis

00:27:37.960 --> 00:27:40.840
can still go in and set
up new notifications.

00:27:40.840 --> 00:27:42.910
So in the client for
Android, no coding

00:27:42.910 --> 00:27:44.662
is needed for background
notifications.

00:27:44.662 --> 00:27:46.120
And if you want to
do notifications

00:27:46.120 --> 00:27:48.490
on iOS or foreground
notifications,

00:27:48.490 --> 00:27:50.980
there's just a little bit
of coding required there.

00:27:50.980 --> 00:27:52.409
Also, you can
see-- you know, you

00:27:52.409 --> 00:27:53.950
want to be really
sure as a developer

00:27:53.950 --> 00:27:55.870
that you're not sending
too many notifications

00:27:55.870 --> 00:27:57.953
or having users feel like
they're getting spammed.

00:27:57.953 --> 00:27:59.495
So you can actually
look at analytics

00:27:59.495 --> 00:28:01.994
to be able to track conversion
rates on these notifications,

00:28:01.994 --> 00:28:04.060
so you can understand
which ones are effective

00:28:04.060 --> 00:28:07.390
and which ones might
not be as welcome.

00:28:07.390 --> 00:28:09.460
So that's how to build
and grow your app.

00:28:09.460 --> 00:28:13.450
Finally, the most important
part, perhaps, earning money.

00:28:13.450 --> 00:28:17.550
So AdMob is a popular way
to be able to monetize

00:28:17.550 --> 00:28:19.570
your mobile apps
through advertising.

00:28:19.570 --> 00:28:21.147
And now it's been
brought together

00:28:21.147 --> 00:28:23.230
in the same suite of tools
to make it a lot easier

00:28:23.230 --> 00:28:25.270
to integrate with in Firebase.

00:28:25.270 --> 00:28:27.050
There's a number of
different ad formats

00:28:27.050 --> 00:28:28.360
if you haven't tried AdMob yet.

00:28:28.360 --> 00:28:29.410
We have video ads.

00:28:29.410 --> 00:28:30.430
We have native ads.

00:28:30.430 --> 00:28:31.990
We have interstitial ads.

00:28:31.990 --> 00:28:36.280
And we're seeing over one
million apps using AdMob today.

00:28:36.280 --> 00:28:38.830
And again, it's fully
integrated with Firebase.

00:28:38.830 --> 00:28:40.960
But if you're already
using AdMob already,

00:28:40.960 --> 00:28:43.690
you can still start using
it without having to adjust

00:28:43.690 --> 00:28:47.740
or mess up your existing
AdMob configuration.

00:28:47.740 --> 00:28:49.580
OK, so that was my talk.

00:28:49.580 --> 00:28:51.610
Today, we talked about
what's new in Android

00:28:51.610 --> 00:28:53.590
development in 2016.

00:28:53.590 --> 00:28:55.300
First, we talked about Nougat.

00:28:55.300 --> 00:28:58.150
We talked about our latest
version of the Android release.

00:28:58.150 --> 00:29:02.020
We talked about improvements
to the user experience-- things

00:29:02.020 --> 00:29:06.670
like multi-window, multiple
languages, notifications,

00:29:06.670 --> 00:29:09.130
and a couple of tweaks
to the permissions flow.

00:29:09.130 --> 00:29:11.020
Next, we talked about
Material Design.

00:29:11.020 --> 00:29:13.450
It's very quickly
becoming the default

00:29:13.450 --> 00:29:15.040
in the user expectation.

00:29:15.040 --> 00:29:17.694
We have over a million
apps using it today.

00:29:17.694 --> 00:29:19.360
And actually, the
thing we want to focus

00:29:19.360 --> 00:29:21.776
on this year, if you're thinking
of refining your Material

00:29:21.776 --> 00:29:23.171
Design implementation,
is talking

00:29:23.171 --> 00:29:25.420
about bringing in more motion,
to make your app easier

00:29:25.420 --> 00:29:27.760
to use, and also to
make it a lot more fun

00:29:27.760 --> 00:29:29.860
and add personality.

00:29:29.860 --> 00:29:32.200
Third, we talked
about Android Studio.

00:29:32.200 --> 00:29:33.100
We have Instant Run.

00:29:33.100 --> 00:29:34.445
It's a lot faster to use.

00:29:34.445 --> 00:29:36.070
But we also have
important new features

00:29:36.070 --> 00:29:38.528
around the areas of design--
things like the new constraint

00:29:38.528 --> 00:29:41.530
layout to help you simplify
complex layouts, and also

00:29:41.530 --> 00:29:45.359
the emulator to help you do
testing a lot more quickly.

00:29:45.359 --> 00:29:47.650
So that's what we learned
about in Android development.

00:29:47.650 --> 00:29:49.750
But I think our biggest
announcement for this year

00:29:49.750 --> 00:29:50.900
was Firebase.

00:29:50.900 --> 00:29:52.497
This cross-platform
suite of tools

00:29:52.497 --> 00:29:54.580
is really powerful to help
you build great Android

00:29:54.580 --> 00:29:56.507
apps, and also great iOS apps.

00:29:56.507 --> 00:29:58.090
I think a lot of
developers are trying

00:29:58.090 --> 00:30:00.929
to manage multiple apps
across multiple platforms.

00:30:00.929 --> 00:30:02.470
And with Firebase,
it's a lot simpler

00:30:02.470 --> 00:30:04.761
to get all of the best things
that you want from Google

00:30:04.761 --> 00:30:06.730
with a lot less of the hassle.

00:30:06.730 --> 00:30:07.330
All right.

00:30:07.330 --> 00:30:08.530
[APPLAUSE]

00:30:09.730 --> 00:30:13.680
[MUSIC PLAYING]

