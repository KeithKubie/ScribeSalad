WEBVTT
Kind: captions
Language: en

00:00:01.970 --> 00:00:04.730
the single biggest improvement your app

00:00:04.730 --> 00:00:04.740
the single biggest improvement your app
 

00:00:04.740 --> 00:00:06.320
the single biggest improvement your app
can make for networking performance has

00:00:06.320 --> 00:00:06.330
can make for networking performance has
 

00:00:06.330 --> 00:00:08.030
can make for networking performance has
to do with reducing the sheer number of

00:00:08.030 --> 00:00:08.040
to do with reducing the sheer number of
 

00:00:08.040 --> 00:00:10.100
to do with reducing the sheer number of
requests made but rather than just

00:00:10.100 --> 00:00:10.110
requests made but rather than just
 

00:00:10.110 --> 00:00:11.959
requests made but rather than just
avoiding data syncing all together how

00:00:11.959 --> 00:00:11.969
avoiding data syncing all together how
 

00:00:11.969 --> 00:00:13.970
avoiding data syncing all together how
exactly do you pull that off my name is

00:00:13.970 --> 00:00:13.980
exactly do you pull that off my name is
 

00:00:13.980 --> 00:00:15.230
exactly do you pull that off my name is
Colt McAnlis and if you're looking for

00:00:15.230 --> 00:00:15.240
Colt McAnlis and if you're looking for
 

00:00:15.240 --> 00:00:17.359
Colt McAnlis and if you're looking for
the optimal way to batch request to

00:00:17.359 --> 00:00:17.369
the optimal way to batch request to
 

00:00:17.369 --> 00:00:19.519
the optimal way to batch request to
reduce overall network traffic then

00:00:19.519 --> 00:00:19.529
reduce overall network traffic then
 

00:00:19.529 --> 00:00:21.560
reduce overall network traffic then
prefetching is for you I think of it

00:00:21.560 --> 00:00:21.570
prefetching is for you I think of it
 

00:00:21.570 --> 00:00:23.450
prefetching is for you I think of it
this way your app makes a request for a

00:00:23.450 --> 00:00:23.460
this way your app makes a request for a
 

00:00:23.460 --> 00:00:25.340
this way your app makes a request for a
specific piece of data and then sometime

00:00:25.340 --> 00:00:25.350
specific piece of data and then sometime
 

00:00:25.350 --> 00:00:26.870
specific piece of data and then sometime
in the future it makes a request for

00:00:26.870 --> 00:00:26.880
in the future it makes a request for
 

00:00:26.880 --> 00:00:29.480
in the future it makes a request for
another piece of data and so on and so

00:00:29.480 --> 00:00:29.490
another piece of data and so on and so
 

00:00:29.490 --> 00:00:31.700
another piece of data and so on and so
forth each individual request has

00:00:31.700 --> 00:00:31.710
forth each individual request has
 

00:00:31.710 --> 00:00:33.830
forth each individual request has
specific overhead associated with it and

00:00:33.830 --> 00:00:33.840
specific overhead associated with it and
 

00:00:33.840 --> 00:00:36.170
specific overhead associated with it and
may end up in a weird pattern of waking

00:00:36.170 --> 00:00:36.180
may end up in a weird pattern of waking
 

00:00:36.180 --> 00:00:38.450
may end up in a weird pattern of waking
up the radio each time to make the

00:00:38.450 --> 00:00:38.460
up the radio each time to make the
 

00:00:38.460 --> 00:00:41.510
up the radio each time to make the
request prefetching is about predicting

00:00:41.510 --> 00:00:41.520
request prefetching is about predicting
 

00:00:41.520 --> 00:00:42.950
request prefetching is about predicting
what data would be in those future

00:00:42.950 --> 00:00:42.960
what data would be in those future
 

00:00:42.960 --> 00:00:44.690
what data would be in those future
requests and grabbing all that data now

00:00:44.690 --> 00:00:44.700
requests and grabbing all that data now
 

00:00:44.700 --> 00:00:46.670
requests and grabbing all that data now
while there's an active radio connection

00:00:46.670 --> 00:00:46.680
while there's an active radio connection
 

00:00:46.680 --> 00:00:48.619
while there's an active radio connection
the benefit here is that each radio

00:00:48.619 --> 00:00:48.629
the benefit here is that each radio
 

00:00:48.629 --> 00:00:50.600
the benefit here is that each radio
request has some overhead in terms of

00:00:50.600 --> 00:00:50.610
request has some overhead in terms of
 

00:00:50.610 --> 00:00:52.279
request has some overhead in terms of
time it takes to wake up the radio and

00:00:52.279 --> 00:00:52.289
time it takes to wake up the radio and
 

00:00:52.289 --> 00:00:54.410
time it takes to wake up the radio and
battery drain that's taken as a result

00:00:54.410 --> 00:00:54.420
battery drain that's taken as a result
 

00:00:54.420 --> 00:00:56.779
battery drain that's taken as a result
of its keep awake time being able to

00:00:56.779 --> 00:00:56.789
of its keep awake time being able to
 

00:00:56.789 --> 00:00:58.700
of its keep awake time being able to
bundle future requests together and do

00:00:58.700 --> 00:00:58.710
bundle future requests together and do
 

00:00:58.710 --> 00:01:00.889
bundle future requests together and do
them now means being able to reduce that

00:01:00.889 --> 00:01:00.899
them now means being able to reduce that
 

00:01:00.899 --> 00:01:03.319
them now means being able to reduce that
overhead and save precious battery life

00:01:03.319 --> 00:01:03.329
overhead and save precious battery life
 

00:01:03.329 --> 00:01:05.870
overhead and save precious battery life
but prefetching is a tricky balancing

00:01:05.870 --> 00:01:05.880
but prefetching is a tricky balancing
 

00:01:05.880 --> 00:01:08.030
but prefetching is a tricky balancing
problem prefetch too little and you'll

00:01:08.030 --> 00:01:08.040
problem prefetch too little and you'll
 

00:01:08.040 --> 00:01:09.710
problem prefetch too little and you'll
end up not optimizing your bandwidth

00:01:09.710 --> 00:01:09.720
end up not optimizing your bandwidth
 

00:01:09.720 --> 00:01:11.780
end up not optimizing your bandwidth
effectively and prefetching too much

00:01:11.780 --> 00:01:11.790
effectively and prefetching too much
 

00:01:11.790 --> 00:01:13.039
effectively and prefetching too much
means the user is going to be waiting

00:01:13.039 --> 00:01:13.049
means the user is going to be waiting
 

00:01:13.049 --> 00:01:16.070
means the user is going to be waiting
even longer for the results so now we

00:01:16.070 --> 00:01:16.080
even longer for the results so now we
 

00:01:16.080 --> 00:01:18.289
even longer for the results so now we
come to our simple question how much

00:01:18.289 --> 00:01:18.299
come to our simple question how much
 

00:01:18.299 --> 00:01:20.719
come to our simple question how much
data is in a good prefetch well the

00:01:20.719 --> 00:01:20.729
data is in a good prefetch well the
 

00:01:20.729 --> 00:01:22.969
data is in a good prefetch well the
general rule of thumb is that on a 3g

00:01:22.969 --> 00:01:22.979
general rule of thumb is that on a 3g
 

00:01:22.979 --> 00:01:24.950
general rule of thumb is that on a 3g
connection a quality prefetch is about

00:01:24.950 --> 00:01:24.960
connection a quality prefetch is about
 

00:01:24.960 --> 00:01:27.410
connection a quality prefetch is about
one to five megs of data of course

00:01:27.410 --> 00:01:27.420
one to five megs of data of course
 

00:01:27.420 --> 00:01:28.969
one to five megs of data of course
that's with the understanding that the

00:01:28.969 --> 00:01:28.979
that's with the understanding that the
 

00:01:28.979 --> 00:01:31.429
that's with the understanding that the
data will be needed and used by the user

00:01:31.429 --> 00:01:31.439
data will be needed and used by the user
 

00:01:31.439 --> 00:01:33.109
data will be needed and used by the user
so you could look at this another way

00:01:33.109 --> 00:01:33.119
so you could look at this another way
 

00:01:33.119 --> 00:01:35.450
so you could look at this another way
and say prefetch as much data as the

00:01:35.450 --> 00:01:35.460
and say prefetch as much data as the
 

00:01:35.460 --> 00:01:37.460
and say prefetch as much data as the
user might need in the next one to two

00:01:37.460 --> 00:01:37.470
user might need in the next one to two
 

00:01:37.470 --> 00:01:39.800
user might need in the next one to two
minutes of their active session but in

00:01:39.800 --> 00:01:39.810
minutes of their active session but in
 

00:01:39.810 --> 00:01:41.719
minutes of their active session but in
honesty one of the biggest things your

00:01:41.719 --> 00:01:41.729
honesty one of the biggest things your
 

00:01:41.729 --> 00:01:44.030
honesty one of the biggest things your
prefetch needs to optimize for has to be

00:01:44.030 --> 00:01:44.040
prefetch needs to optimize for has to be
 

00:01:44.040 --> 00:01:46.010
prefetch needs to optimize for has to be
for the speed of the device connection

00:01:46.010 --> 00:01:46.020
for the speed of the device connection
 

00:01:46.020 --> 00:01:48.590
for the speed of the device connection
for example if the user is on a 4G

00:01:48.590 --> 00:01:48.600
for example if the user is on a 4G
 

00:01:48.600 --> 00:01:50.149
for example if the user is on a 4G
connection you may be able to connect

00:01:50.149 --> 00:01:50.159
connection you may be able to connect
 

00:01:50.159 --> 00:01:53.090
connection you may be able to connect
and fetch 12 new photos which takes the

00:01:53.090 --> 00:01:53.100
and fetch 12 new photos which takes the
 

00:01:53.100 --> 00:01:55.490
and fetch 12 new photos which takes the
same amount of time as prefetching three

00:01:55.490 --> 00:01:55.500
same amount of time as prefetching three
 

00:01:55.500 --> 00:01:58.609
same amount of time as prefetching three
photos on a 2g connection so modifying

00:01:58.609 --> 00:01:58.619
photos on a 2g connection so modifying
 

00:01:58.619 --> 00:01:59.899
photos on a 2g connection so modifying
your prefetching code to take into

00:01:59.899 --> 00:01:59.909
your prefetching code to take into
 

00:01:59.909 --> 00:02:01.130
your prefetching code to take into
account the quality of the user's

00:02:01.130 --> 00:02:01.140
account the quality of the user's
 

00:02:01.140 --> 00:02:02.660
account the quality of the user's
connection is the best way to create

00:02:02.660 --> 00:02:02.670
connection is the best way to create
 

00:02:02.670 --> 00:02:04.850
connection is the best way to create
optimal fetch cases and it's worth

00:02:04.850 --> 00:02:04.860
optimal fetch cases and it's worth
 

00:02:04.860 --> 00:02:06.410
optimal fetch cases and it's worth
pointing out that the easiest way to

00:02:06.410 --> 00:02:06.420
pointing out that the easiest way to
 

00:02:06.420 --> 00:02:08.119
pointing out that the easiest way to
determine the health of the network is

00:02:08.119 --> 00:02:08.129
determine the health of the network is
 

00:02:08.129 --> 00:02:09.919
determine the health of the network is
simply to time how long it takes for

00:02:09.919 --> 00:02:09.929
simply to time how long it takes for
 

00:02:09.929 --> 00:02:11.839
simply to time how long it takes for
some known piece of content to return

00:02:11.839 --> 00:02:11.849
some known piece of content to return
 

00:02:11.849 --> 00:02:13.840
some known piece of content to return
from a request with a few

00:02:13.840 --> 00:02:13.850
from a request with a few
 

00:02:13.850 --> 00:02:15.640
from a request with a few
simple calculations and a handy lookup

00:02:15.640 --> 00:02:15.650
simple calculations and a handy lookup
 

00:02:15.650 --> 00:02:17.380
simple calculations and a handy lookup
table for common network speeds you can

00:02:17.380 --> 00:02:17.390
table for common network speeds you can
 

00:02:17.390 --> 00:02:18.850
table for common network speeds you can
quickly determine what type of network

00:02:18.850 --> 00:02:18.860
quickly determine what type of network
 

00:02:18.860 --> 00:02:21.010
quickly determine what type of network
the users connected to and adjust your

00:02:21.010 --> 00:02:21.020
the users connected to and adjust your
 

00:02:21.020 --> 00:02:23.020
the users connected to and adjust your
fetching and requests accordingly it's

00:02:23.020 --> 00:02:23.030
fetching and requests accordingly it's
 

00:02:23.030 --> 00:02:24.670
fetching and requests accordingly it's
also we're pointing out that the real

00:02:24.670 --> 00:02:24.680
also we're pointing out that the real
 

00:02:24.680 --> 00:02:26.950
also we're pointing out that the real
sweet spot here has to be executing

00:02:26.950 --> 00:02:26.960
sweet spot here has to be executing
 

00:02:26.960 --> 00:02:29.050
sweet spot here has to be executing
batched requests that you know we're

00:02:29.050 --> 00:02:29.060
batched requests that you know we're
 

00:02:29.060 --> 00:02:31.090
batched requests that you know we're
delayed to be issues but have been on

00:02:31.090 --> 00:02:31.100
delayed to be issues but have been on
 

00:02:31.100 --> 00:02:33.460
delayed to be issues but have been on
the weight cycle and future requests aka

00:02:33.460 --> 00:02:33.470
the weight cycle and future requests aka
 

00:02:33.470 --> 00:02:36.220
the weight cycle and future requests aka
prefetching into a single activity radio

00:02:36.220 --> 00:02:36.230
prefetching into a single activity radio
 

00:02:36.230 --> 00:02:38.020
prefetching into a single activity radio
window that's when things start to get

00:02:38.020 --> 00:02:38.030
window that's when things start to get
 

00:02:38.030 --> 00:02:40.060
window that's when things start to get
really awesome and the good news is that

00:02:40.060 --> 00:02:40.070
really awesome and the good news is that
 

00:02:40.070 --> 00:02:41.710
really awesome and the good news is that
you can update your app to adopt these

00:02:41.710 --> 00:02:41.720
you can update your app to adopt these
 

00:02:41.720 --> 00:02:43.120
you can update your app to adopt these
patterns without having to write a

00:02:43.120 --> 00:02:43.130
patterns without having to write a
 

00:02:43.130 --> 00:02:45.160
patterns without having to write a
massive amount of code GCM network

00:02:45.160 --> 00:02:45.170
massive amount of code GCM network
 

00:02:45.170 --> 00:02:47.500
massive amount of code GCM network
manager is a google play services API

00:02:47.500 --> 00:02:47.510
manager is a google play services API
 

00:02:47.510 --> 00:02:49.570
manager is a google play services API
which helps to schedule Network oriented

00:02:49.570 --> 00:02:49.580
which helps to schedule Network oriented
 

00:02:49.580 --> 00:02:51.730
which helps to schedule Network oriented
tasks and handle batching for you this

00:02:51.730 --> 00:02:51.740
tasks and handle batching for you this
 

00:02:51.740 --> 00:02:53.770
tasks and handle batching for you this
greatly simplifies the implementation of

00:02:53.770 --> 00:02:53.780
greatly simplifies the implementation of
 

00:02:53.780 --> 00:02:55.660
greatly simplifies the implementation of
common patterns such as waiting for

00:02:55.660 --> 00:02:55.670
common patterns such as waiting for
 

00:02:55.670 --> 00:02:57.550
common patterns such as waiting for
network connectivity Network retries and

00:02:57.550 --> 00:02:57.560
network connectivity Network retries and
 

00:02:57.560 --> 00:02:59.830
network connectivity Network retries and
exponential back-off basically it's all

00:02:59.830 --> 00:02:59.840
exponential back-off basically it's all
 

00:02:59.840 --> 00:03:01.720
exponential back-off basically it's all
the stuff you need with a single helpful

00:03:01.720 --> 00:03:01.730
the stuff you need with a single helpful
 

00:03:01.730 --> 00:03:04.090
the stuff you need with a single helpful
API and when it comes to performance you

00:03:04.090 --> 00:03:04.100
API and when it comes to performance you
 

00:03:04.100 --> 00:03:06.250
API and when it comes to performance you
need all the helpful api's you can get

00:03:06.250 --> 00:03:06.260
need all the helpful api's you can get
 

00:03:06.260 --> 00:03:08.560
need all the helpful api's you can get
and helpful videos too which is why you

00:03:08.560 --> 00:03:08.570
and helpful videos too which is why you
 

00:03:08.570 --> 00:03:09.700
and helpful videos too which is why you
should check out the rest of the Android

00:03:09.700 --> 00:03:09.710
should check out the rest of the Android
 

00:03:09.710 --> 00:03:11.680
should check out the rest of the Android
performance patterns content and don't

00:03:11.680 --> 00:03:11.690
performance patterns content and don't
 

00:03:11.690 --> 00:03:13.600
performance patterns content and don't
forget to join our Google+ community as

00:03:13.600 --> 00:03:13.610
forget to join our Google+ community as
 

00:03:13.610 --> 00:03:16.150
forget to join our Google+ community as
well so keep calm profile your code and

00:03:16.150 --> 00:03:16.160
well so keep calm profile your code and
 

00:03:16.160 --> 00:03:19.230
well so keep calm profile your code and
always remember perf matters

00:03:19.230 --> 00:03:19.240
always remember perf matters
 

00:03:19.240 --> 00:03:21.270
always remember perf matters
Oh

