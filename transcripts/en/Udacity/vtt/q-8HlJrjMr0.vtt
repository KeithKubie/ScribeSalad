WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:04.630
What we'd like to represent is that the cost of congestion increases in a

00:00:04.630 --> 00:00:07.780
quadratic manner as the loads on the

00:00:07.780 --> 00:00:12.955
links continue to increase. Ultimately becoming increasingly expensive

00:00:12.955 --> 00:00:16.570
as link utilization approaches one. Solving the

00:00:16.570 --> 00:00:19.560
optimization problem, however, is much easier if we

00:00:19.560 --> 00:00:22.540
use a piecewise linear cost function. We

00:00:22.540 --> 00:00:25.610
can define utilization as the amount of traffic

00:00:25.610 --> 00:00:28.500
on the link divided by the capacity and

00:00:28.500 --> 00:00:31.470
our objective might be to minimize the sum of

00:00:31.470 --> 00:00:35.300
this piecewise linear cost function over all the links

00:00:35.300 --> 00:00:38.405
in the network. Unfortunately, solving this optimization is still

00:00:38.405 --> 00:00:42.000
NP-complete, which means that there is no efficient algorithm

00:00:42.000 --> 00:00:45.080
to find the optimal setting of link weights, even

00:00:45.080 --> 00:00:48.410
for simple objective functions. The implications of this are

00:00:48.410 --> 00:00:50.869
that we have to resort to searching through a

00:00:50.869 --> 00:00:54.740
large set of combinations of link weight settings

00:00:54.740 --> 00:00:58.240
to ultimately find a good setting. So clearly searching

00:00:58.240 --> 00:01:01.540
through all the link weights is suboptimal. But

00:01:01.540 --> 00:01:03.460
the graphs turn out to be small enough in

00:01:03.460 --> 00:01:06.380
practice such that this approach is still reasonably

00:01:06.380 --> 00:01:10.400
effective. In practice, we also have other operational realities

00:01:10.400 --> 00:01:13.787
to worry about. For example, minimizing the number of

00:01:13.787 --> 00:01:16.180
changes to the network. Often just changing one or

00:01:16.180 --> 00:01:19.410
two link weights is enough to achieve a good

00:01:19.410 --> 00:01:22.840
traffic load balance solution. Whatever solution we come up

00:01:22.840 --> 00:01:25.270
with must be resistant to failure and it should

00:01:25.270 --> 00:01:27.870
be robust to measurement noise. We also want to limit

00:01:27.870 --> 00:01:30.050
the frequency of changes that we make to the

00:01:30.050 --> 00:01:33.750
network. This completes our overview of intradomain routing. And

00:01:33.750 --> 00:01:36.670
now we will take a look at interdomain routing.

00:01:36.670 --> 00:01:41.620
Intradomain routing and traffic engineering concerns traffic flow within

00:01:41.620 --> 00:01:45.270
a single domain, such as an ISP, a campus network,

00:01:45.270 --> 00:01:49.880
or a data center. In contrast, interdomain routing, and interdomain traffic

00:01:49.880 --> 00:01:54.850
engineering, concerns routing that ocurs between domains, something that we

00:01:54.850 --> 00:01:58.424
looked at before in the context of the Borda Gateway Protocol.

