WEBVTT
Kind: captions
Language: en

00:00:01.491 --> 00:00:06.470
[MUSIC PLAYING]

00:00:06.470 --> 00:00:07.860
FILIP: Hello, everyone.

00:00:07.860 --> 00:00:08.360
I'm Filip.

00:00:08.360 --> 00:00:11.011
This is the Flutter Boring
Show, and with me today is Ian.

00:00:11.011 --> 00:00:11.510
IAN: Hello.

00:00:11.510 --> 00:00:12.770
FILIP: Hi, Ian.

00:00:12.770 --> 00:00:14.710
So Ian, what do
you do in Flutter?

00:00:14.710 --> 00:00:15.741
IAN: I am the TL.

00:00:15.741 --> 00:00:17.240
FILIP: All right,
what does it mean?

00:00:17.240 --> 00:00:18.656
IAN: That means
I'm the tech lead.

00:00:18.656 --> 00:00:21.050
That means all the mistakes
we've made are my fault.

00:00:21.050 --> 00:00:23.540
FILIP: Right, yes.

00:00:23.540 --> 00:00:25.640
On GitHub, Ian is Hixie.

00:00:25.640 --> 00:00:28.550
So if you were
following the project,

00:00:28.550 --> 00:00:31.610
you've probably
seen Hixie a lot.

00:00:31.610 --> 00:00:34.190
So Ian, today
we're going to talk

00:00:34.190 --> 00:00:39.290
about Slivers, which is a
scary topic for many maybe.

00:00:39.290 --> 00:00:43.387
IAN: It's not the
simplest of our APIs.

00:00:43.387 --> 00:00:45.470
FILIP: On the other hand,
many people don't really

00:00:45.470 --> 00:00:47.090
need to know Slivers, right.

00:00:47.090 --> 00:00:50.030
Many things are done for
them, but, like, this

00:00:50.030 --> 00:00:51.520
is an advanced class.

00:00:54.230 --> 00:00:56.120
What is a Sliver?

00:00:56.120 --> 00:00:58.490
IAN: A Sliver-- maybe
just to take a step back,

00:00:58.490 --> 00:01:00.170
before we talk about
Slivers, we should

00:01:00.170 --> 00:01:04.550
talk about how Flutter
does the layout in general.

00:01:04.550 --> 00:01:08.420
So in Flutter, we
have render objects,

00:01:08.420 --> 00:01:10.640
and render objects are--
most of the render objects

00:01:10.640 --> 00:01:12.410
you'll see are render boxes.

00:01:12.410 --> 00:01:15.140
And so for example,
container and size boxes,

00:01:15.140 --> 00:01:16.820
they're all render boxes.

00:01:16.820 --> 00:01:20.120
Render boxes have
Cartesian corners.

00:01:20.120 --> 00:01:21.980
They have a width and a height.

00:01:21.980 --> 00:01:23.900
And the way they lay
out is you give them

00:01:23.900 --> 00:01:26.900
a minimum and maximum width and
a minimum and maximum height,

00:01:26.900 --> 00:01:28.990
and then they look
at their children.

00:01:28.990 --> 00:01:30.020
Then they lay out
the children that do

00:01:30.020 --> 00:01:30.860
whatever they want with them.

00:01:30.860 --> 00:01:32.360
And then they decide
I'm going to beat

00:01:32.360 --> 00:01:33.776
this width and
this height, and it

00:01:33.776 --> 00:01:36.650
has to be within the
constraints they were given.

00:01:36.650 --> 00:01:38.089
That works great for boxes.

00:01:38.089 --> 00:01:40.130
It doesn't work great for
scrolling, particularly

00:01:40.130 --> 00:01:43.460
when you do things like app
bars and other weird scrolling

00:01:43.460 --> 00:01:44.240
effects.

00:01:44.240 --> 00:01:47.504
And so, to do scrolling, we
have a different protocol

00:01:47.504 --> 00:01:48.920
that we call the
Sliver protocol--

00:01:48.920 --> 00:01:51.680
Sliver, as in a
slice of something,

00:01:51.680 --> 00:01:53.460
so a slice of
something that scrolls.

00:01:53.460 --> 00:01:58.970
And in the Sliver protocol,
there are many different axes.

00:01:58.970 --> 00:02:03.740
If we look at the
documentation for RenderSliver,

00:02:03.740 --> 00:02:09.976
you'll find the
protocol that it uses.

00:02:09.976 --> 00:02:12.110
FILIP: So, yes.

00:02:12.110 --> 00:02:18.690
IAN: So we, instead of using
the Min, Max, Height, and Width,

00:02:18.690 --> 00:02:20.535
we have Sliver constraints.

00:02:20.535 --> 00:02:22.160
And if you click on
Sliver constraints,

00:02:22.160 --> 00:02:23.660
you'll see there
are many axes here.

00:02:23.660 --> 00:02:25.130
There's literally the axis.

00:02:25.130 --> 00:02:27.254
That's the direction in
which it's scrolling--

00:02:27.254 --> 00:02:28.670
the access direction,
whether it's

00:02:28.670 --> 00:02:30.530
going backwards and forwards.

00:02:30.530 --> 00:02:32.490
We have the cross
axis direction,

00:02:32.490 --> 00:02:34.480
which is the other direction.

00:02:34.480 --> 00:02:36.980
If you have a grid, for example,
it's scrolling up and down,

00:02:36.980 --> 00:02:41.390
say, but it's then going left
and right in the cross axes.

00:02:41.390 --> 00:02:42.830
There are many other aspects.

00:02:42.830 --> 00:02:45.500
That's how much
we've scrolled, how

00:02:45.500 --> 00:02:48.000
much overlap there is with the
previous Sliver, and so on.

00:02:48.000 --> 00:02:51.410
And so, all of these are
the incoming constraints

00:02:51.410 --> 00:02:53.290
for a Sliver.

00:02:53.290 --> 00:02:55.310
And if we go to
SliverGeometry, you'll

00:02:55.310 --> 00:02:58.940
see the equivalent of size
on the render box side.

00:02:58.940 --> 00:03:02.900
On the RenderSliver
side is how big you are.

00:03:02.900 --> 00:03:04.670
That's the paint extent.

00:03:04.670 --> 00:03:09.890
Where the next Sliver should
be, that's the layout extent--

00:03:09.890 --> 00:03:10.800
and so forth.

00:03:10.800 --> 00:03:16.940
And again, there's a
whole number of values

00:03:16.940 --> 00:03:18.200
here that you can set.

00:03:18.200 --> 00:03:18.920
FILIP: Right.

00:03:18.920 --> 00:03:19.870
So, OK.

00:03:19.870 --> 00:03:23.710
So to summarize, for a
box, I only take, like,

00:03:23.710 --> 00:03:28.280
a offset and size, and I
give you-- or I'm sorry,

00:03:28.280 --> 00:03:30.050
constraints.

00:03:30.050 --> 00:03:31.907
And then I give you
offset and size.

00:03:31.907 --> 00:03:33.240
IAN: You give it the size, yeah.

00:03:33.240 --> 00:03:34.740
The offset officially
is technically

00:03:34.740 --> 00:03:36.170
part of the painting.

00:03:36.170 --> 00:03:38.270
You can think of it
as part of the layout.

00:03:38.270 --> 00:03:39.410
That's often how we do it.

00:03:39.410 --> 00:03:42.020
FILIP: But for Slivers,
you get all these things,

00:03:42.020 --> 00:03:43.730
and then you can
decide whatever.

00:03:43.730 --> 00:03:44.690
IAN: That's right.

00:03:44.690 --> 00:03:47.240
And the reason we do
that is, for example,

00:03:47.240 --> 00:03:51.110
to do one of the app bars
that stretches and grows,

00:03:51.110 --> 00:03:52.340
as you scroll--

00:03:52.340 --> 00:03:54.890
well, the AppBar needs to
know how far you've scrolled,

00:03:54.890 --> 00:03:56.870
so it knows how
big it should be.

00:03:56.870 --> 00:04:01.620
It needs to know where the
next Sliver, for example--

00:04:01.620 --> 00:04:02.540
a Sliver list--

00:04:02.540 --> 00:04:03.810
where that should be.

00:04:03.810 --> 00:04:07.010
We also use it to do things
like lazy loading of content

00:04:07.010 --> 00:04:10.640
in lists, so when you
have a ListView, you say,

00:04:10.640 --> 00:04:13.100
we don't actually instantiate
all of the boxes--

00:04:13.100 --> 00:04:15.020
you know, all the million
boxes of your list.

00:04:15.020 --> 00:04:17.240
We only instantiate the ones
on the screen, and a little

00:04:17.240 --> 00:04:18.823
before, and a little
after for caching

00:04:18.823 --> 00:04:20.510
purposes and accessibility.

00:04:20.510 --> 00:04:23.120
And we do that by
using this protocol,

00:04:23.120 --> 00:04:26.540
where we look at how
far we've scrolled.

00:04:26.540 --> 00:04:29.240
We're like, OK, we'll
start building boxes here.

00:04:29.240 --> 00:04:30.620
How far is left on the page?

00:04:30.620 --> 00:04:34.100
That's the remaining pane extent
on the Sliver constraints.

00:04:34.100 --> 00:04:36.210
And then we'll stop
rendering boxes,

00:04:36.210 --> 00:04:40.570
and so we only render the ones
that are actually necessary.

00:04:40.570 --> 00:04:43.450
FILIP: So, OK.

00:04:43.450 --> 00:04:47.400
So now that we kind of know
what Sliver is, and what's the--

00:04:47.400 --> 00:04:50.180
sorry, the Sliver protocol is--

00:04:50.180 --> 00:04:54.920
I thought we might want to try
one of the more advanced things

00:04:54.920 --> 00:04:55.940
that are using Slivers.

00:04:55.940 --> 00:04:58.450
And that is the SliverAppBar.

00:04:58.450 --> 00:05:01.130
But, like, to be clear,
you know, as you said,

00:05:01.130 --> 00:05:03.320
even ListView is
using Slivers, right.

00:05:03.320 --> 00:05:04.190
IAN: Yep.

00:05:04.190 --> 00:05:06.500
Pretty much everything
that scrolls in Flutter

00:05:06.500 --> 00:05:07.250
is using Slivers.

00:05:07.250 --> 00:05:08.280
There's one exception.

00:05:08.280 --> 00:05:10.880
We have the-- I forget what
it's called-- the One Box

00:05:10.880 --> 00:05:12.710
Viewport or something.

00:05:12.710 --> 00:05:16.535
That is a viewport that lets
you scroll a single item around.

00:05:16.535 --> 00:05:18.910
That's the exception, and that
one you don't usually use,

00:05:18.910 --> 00:05:20.180
because it's not lazy.

00:05:20.180 --> 00:05:21.886
It's only useful
if you have, say,

00:05:21.886 --> 00:05:23.510
the contents of a
dialog box, which are

00:05:23.510 --> 00:05:25.105
almost always on the screen.

00:05:25.105 --> 00:05:27.230
But you're worried that if
the screen is too small,

00:05:27.230 --> 00:05:29.150
or if the keyboard comes
up and shrinks the dialog,

00:05:29.150 --> 00:05:31.010
then it might not quite
fit, and so you'll

00:05:31.010 --> 00:05:32.399
want to scroll inside that.

00:05:32.399 --> 00:05:34.190
So there, it doesn't
matter if you're lazy,

00:05:34.190 --> 00:05:35.900
because you're going to have
everything instantiated anyway

00:05:35.900 --> 00:05:37.010
normally.

00:05:37.010 --> 00:05:38.630
But anytime you
have a list, where

00:05:38.630 --> 00:05:40.640
you don't know how many
things are in the list--

00:05:40.640 --> 00:05:43.340
you use ListView, you use
GridView, CustomScrollView,

00:05:43.340 --> 00:05:45.506
all of those that you think
Sliver's under the hood.

00:05:45.506 --> 00:05:47.030
FILIP: Right.

00:05:47.030 --> 00:05:51.620
OK, so what we're
going to do is, first

00:05:51.620 --> 00:05:54.590
of all, use the
SliverAppBar, right.

00:05:54.590 --> 00:06:03.500
So we have a small app here,
and it's just a list of randomly

00:06:03.500 --> 00:06:08.720
generated startup names
like massPin or floodWolf,

00:06:08.720 --> 00:06:13.160
and we want this
thing to be kind

00:06:13.160 --> 00:06:16.430
of a little more interesting
than just, like, you know,

00:06:16.430 --> 00:06:17.210
being there.

00:06:17.210 --> 00:06:19.370
Right now, it's
like a box, right.

00:06:19.370 --> 00:06:24.860
So here is this AppBar.

00:06:24.860 --> 00:06:26.390
It's a very simple API.

00:06:26.390 --> 00:06:29.510
What happens if we use the
SliverAppBar first of all?

00:06:29.510 --> 00:06:31.237
IAN: It's not going
to be happy at all.

00:06:31.237 --> 00:06:32.370
FILIP: Yeah.

00:06:32.370 --> 00:06:35.240
So what do I do?

00:06:35.240 --> 00:06:35.890
Oh no.

00:06:35.890 --> 00:06:37.150
OK.

00:06:37.150 --> 00:06:39.390
IAN: Yeah, the
SliverAppBar, it turns out,

00:06:39.390 --> 00:06:41.540
is not an AppBar for the
purposes of the scaffold.

00:06:41.540 --> 00:06:44.935
So the way to do a
SliverAppBar-- the way

00:06:44.935 --> 00:06:46.310
that I remember
how to do it-- is

00:06:46.310 --> 00:06:49.820
to go look up SliverAppBar
in the documentation.

00:06:49.820 --> 00:06:52.310
And if I remember correctly,
I put there an answer

00:06:52.310 --> 00:06:54.901
for how to actually do this.

00:06:54.901 --> 00:06:55.400
FILIP: OK.

00:06:57.980 --> 00:07:01.220
IAN: In fact, it'll be
the CustomScrollView,

00:07:01.220 --> 00:07:05.100
I believe is where the
actual example will be.

00:07:05.100 --> 00:07:09.127
FILIP: OK, so we
remove the scaffold?

00:07:09.127 --> 00:07:09.710
IAN: So, yeah.

00:07:09.710 --> 00:07:12.071
So we don't need-- well, we
can still have a scaffold,

00:07:12.071 --> 00:07:13.820
because if you have
like a floating action

00:07:13.820 --> 00:07:16.040
button or a draw,
you'll still use that.

00:07:16.040 --> 00:07:20.074
But instead of a ListView,
you'll use a CustomScrollView.

00:07:20.074 --> 00:07:22.240
You can also find this--
if you look at the ListView

00:07:22.240 --> 00:07:23.780
documentation,
there's an example

00:07:23.780 --> 00:07:27.530
there for how to go from
ListView to CustomScrollView.

00:07:27.530 --> 00:07:30.500
A ListView is really
just a wrapping

00:07:30.500 --> 00:07:34.820
around CustomScrollView that
forces you to use a SliverList,

00:07:34.820 --> 00:07:37.570
but CustomScrollView
is the real workhorse

00:07:37.570 --> 00:07:39.770
for viewports and then Slivers.

00:07:39.770 --> 00:07:45.770
FILIP: So yeah, Slivers get
into the CustomScrollView.

00:07:45.770 --> 00:07:49.400
So OK, let's go through this.

00:07:49.400 --> 00:07:51.860
IAN: So a CustomScrollView
takes many children.

00:07:51.860 --> 00:07:54.070
Normally, we use
the name children

00:07:54.070 --> 00:07:55.430
when we have any children.

00:07:55.430 --> 00:07:58.250
Because this is a
Sliver parent, we

00:07:58.250 --> 00:08:00.620
use the word Slivers
instead of children.

00:08:00.620 --> 00:08:02.210
That way, you know
that the children

00:08:02.210 --> 00:08:03.876
are going to be
Slivers, and they're not

00:08:03.876 --> 00:08:05.030
going to be random boxes.

00:08:05.030 --> 00:08:07.370
And I believe we
have successfully

00:08:07.370 --> 00:08:10.520
named all of our Silver
Widgets with the word Sliver

00:08:10.520 --> 00:08:11.540
at the start.

00:08:11.540 --> 00:08:14.580
So you can start typing
Sliver in your dropdown,

00:08:14.580 --> 00:08:16.580
and it'll tell you all
the ones that we can use.

00:08:16.580 --> 00:08:17.121
FILIP: Right.

00:08:17.121 --> 00:08:18.800
Wow, that's a lot.

00:08:18.800 --> 00:08:19.400
Good.

00:08:19.400 --> 00:08:22.150
So we can use SliverAppBar then.

00:08:22.150 --> 00:08:24.640
IAN: Yep, that's right.

00:08:24.640 --> 00:08:25.410
FILIP: And so--

00:08:25.410 --> 00:08:27.410
IAN: And so, SliverAppBar
works exactly the same

00:08:27.410 --> 00:08:31.170
as AppBar in term of
its arguments and so on.

00:08:31.170 --> 00:08:32.664
FILIP: So that would be--

00:08:32.664 --> 00:08:34.039
IAN: And the reason
we're putting

00:08:34.039 --> 00:08:37.460
this in the CustomScrollView
instead of the scaffold,

00:08:37.460 --> 00:08:39.049
it needs to scroll.

00:08:39.049 --> 00:08:41.809
And so, it needs to
be inside the view.

00:08:41.809 --> 00:08:45.110
If it was inside the scaffold,
the scaffold isn't scrolling,

00:08:45.110 --> 00:08:46.790
and so the scaffold
would have no idea

00:08:46.790 --> 00:08:47.789
what was going on there.

00:08:47.789 --> 00:08:48.610
FILIP: Right.

00:08:48.610 --> 00:08:49.160
IAN: Good.

00:08:49.160 --> 00:08:51.200
FILIP: So we already
have this, which I like.

00:08:51.200 --> 00:08:52.880
IAN: There you go.

00:08:52.880 --> 00:08:56.870
FILIP: Oh, it also
even removes the text.

00:08:56.870 --> 00:08:59.050
That's nice.

00:08:59.050 --> 00:09:03.290
And now what do I do if I
want to have my list here?

00:09:03.290 --> 00:09:05.420
IAN: So that's where
you use a SliverList.

00:09:05.420 --> 00:09:06.950
So again, this is
a list of Slivers,

00:09:06.950 --> 00:09:08.410
so you can put as many
things in here as you want.

00:09:08.410 --> 00:09:09.980
One of them could
be a SliverList.

00:09:09.980 --> 00:09:13.214
And SliverList has basically
the same arguments as ListView,

00:09:13.214 --> 00:09:14.630
because ListView
is literally just

00:09:14.630 --> 00:09:16.370
a wrapper around
CustomScrollView

00:09:16.370 --> 00:09:17.769
plus SliverList.

00:09:17.769 --> 00:09:19.310
So you can just pass
in your children

00:09:19.310 --> 00:09:20.240
that you were putting
before, and that

00:09:20.240 --> 00:09:21.449
should just work like before.

00:09:21.449 --> 00:09:22.698
FILIP: It just needs delegate.

00:09:22.698 --> 00:09:23.500
So right there--

00:09:23.500 --> 00:09:25.220
IAN: You want you want one
of the different constructors

00:09:25.220 --> 00:09:26.300
in the SliverList.

00:09:26.300 --> 00:09:27.918
We have many different
constructors.

00:09:27.918 --> 00:09:28.501
FILIP: Oh, OK.

00:09:31.710 --> 00:09:34.100
I have a new Mac book,
so I can't write.

00:09:34.100 --> 00:09:35.350
SliverList what?

00:09:35.350 --> 00:09:36.427
SliverList?

00:09:40.630 --> 00:09:42.580
I think it would be.

00:09:42.580 --> 00:09:43.872
I think maybe-- do we want to--

00:09:43.872 --> 00:09:45.788
IAN: Oh yes, we probably
have to provide that.

00:09:45.788 --> 00:09:47.650
So this is why I'll
go to the document.

00:09:47.650 --> 00:09:49.740
So if you go to the ListView
documentation again,

00:09:49.740 --> 00:09:52.439
you'll find that there is
a step-by-step instructions

00:09:52.439 --> 00:09:53.230
for how to do this.

00:09:53.230 --> 00:09:55.580
FILIP: Right, but
this is interactive,

00:09:55.580 --> 00:09:58.960
so we need to do
this the hard way.

00:09:58.960 --> 00:10:02.840
SliverList delegate, I think--

00:10:02.840 --> 00:10:04.120
so there are two, right?

00:10:04.120 --> 00:10:06.940
One of them is a builder
like ListViewBuilder,

00:10:06.940 --> 00:10:11.080
and this one is the List, where
we actually have the List.

00:10:11.080 --> 00:10:11.830
IAN: That's right.

00:10:11.830 --> 00:10:14.950
FILIP: And here we
have children, which

00:10:14.950 --> 00:10:16.390
I'll just steal from here.

00:10:20.410 --> 00:10:22.330
IAN: So as a general
rule, I would always

00:10:22.330 --> 00:10:24.940
encourage people to use the
Builder variant rather than

00:10:24.940 --> 00:10:28.240
the List variant, because
the List variant--

00:10:28.240 --> 00:10:29.710
both of them are
lazy in that they

00:10:29.710 --> 00:10:32.110
both don't render the render--

00:10:32.110 --> 00:10:36.970
they don't instantiate the
render boxes in advance,

00:10:36.970 --> 00:10:40.330
but the List version does
instantiate the Widgets,

00:10:40.330 --> 00:10:43.270
because you create the
whole list of the Widgets.

00:10:43.270 --> 00:10:45.200
When you have-- so in
this case, for example,

00:10:45.200 --> 00:10:48.760
you have your AllNamesList.

00:10:48.760 --> 00:10:52.120
You can actually use
the BuilderDelegate

00:10:52.120 --> 00:10:54.220
to just build just
the Widgets that it

00:10:54.220 --> 00:10:55.590
needs of that particular time.

00:10:55.590 --> 00:10:56.740
FILIP: Let's do that.

00:10:56.740 --> 00:11:05.030
So BuilderDelegate, and of
course we need the Builder.

00:11:05.030 --> 00:11:10.360
Oh, it actually-- so this would
probably be context and index.

00:11:15.390 --> 00:11:18.235
OK, we need to go to
[INAUDIBLE] for this.

00:11:25.350 --> 00:11:31.810
Yeah, IndexWidgetBuilder, which
is it gets context and index.

00:11:31.810 --> 00:11:34.420
And then I'm just going to--

00:11:37.310 --> 00:11:39.210
IAN: So you can
just call your build

00:11:39.210 --> 00:11:43.260
tile for the specific name that
is that index and its list.

00:11:46.570 --> 00:11:51.340
FILIP: So I'll call
Names, index, and then--

00:11:51.340 --> 00:11:58.170
but I need to tell
it to not do things

00:11:58.170 --> 00:11:59.610
that are out of bounds, right?

00:11:59.610 --> 00:12:02.310
IAN: So you can give it the
specific number of children.

00:12:02.310 --> 00:12:05.550
That's one of the other
arguments to build a Delegate.

00:12:05.550 --> 00:12:07.900
You actually don't necessarily
need to give that number.

00:12:07.900 --> 00:12:09.270
In this case, it's
the right thing to do.

00:12:09.270 --> 00:12:11.228
In general, you don't
need to give that number.

00:12:11.228 --> 00:12:13.170
If your builder
returns null, we'll

00:12:13.170 --> 00:12:15.360
assume that's the last child.

00:12:15.360 --> 00:12:18.690
The reason to give the
count is that will allow

00:12:18.690 --> 00:12:20.780
you to use the scroll bars.

00:12:20.780 --> 00:12:23.580
It'll be able to predict
the length of the list

00:12:23.580 --> 00:12:26.300
better and so forth.

00:12:26.300 --> 00:12:27.060
FILIP: OK, cool.

00:12:27.060 --> 00:12:29.780
And, yes.

00:12:29.780 --> 00:12:32.780
So let's create-- or let's play
around with the SliverAppBar

00:12:32.780 --> 00:12:33.750
just for a bit.

00:12:33.750 --> 00:12:36.104
So it has different options?

00:12:36.104 --> 00:12:37.270
IAN: It has lots of options.

00:12:37.270 --> 00:12:39.300
For example, you can set pinned.

00:12:39.300 --> 00:12:43.436
That will make it stay at
the top of the list always.

00:12:43.436 --> 00:12:44.310
FILIP: Kind of like--

00:12:44.310 --> 00:12:46.610
IAN: There is the shadow
appears when stuff goes on it.

00:12:46.610 --> 00:12:47.440
FILIP: Nice.

00:12:47.440 --> 00:12:49.500
IAN: That took me
days to implement.

00:12:53.400 --> 00:12:54.990
FILIP: What else is there?

00:12:54.990 --> 00:12:58.610
IAN: Floating is another
effect that people like,

00:12:58.610 --> 00:13:01.740
so that one will cover-- so I
don't know if you can be pinned

00:13:01.740 --> 00:13:03.330
and floating.

00:13:03.330 --> 00:13:04.050
FILIP: Oh, OK.

00:13:04.050 --> 00:13:08.950
IAN: But if you remove the
pinned, then it'll scroll away.

00:13:08.950 --> 00:13:11.310
And then when you come
back, it will scroll back.

00:13:11.310 --> 00:13:22.700
FILIP: Oh, it's-- my computer
just for some reason stopped.

00:13:22.700 --> 00:13:23.800
OK, I'm sorry.

00:13:23.800 --> 00:13:24.550
I need to rebuild.

00:13:27.430 --> 00:13:30.950
So again, new computer
things are weird.

00:13:34.394 --> 00:13:36.354
Come on.

00:13:36.354 --> 00:13:36.854
OK.

00:13:40.298 --> 00:13:42.860
IAN: Yeah, so it goes away,
but now if you pull back,

00:13:42.860 --> 00:13:43.984
it goes back straight away.

00:13:43.984 --> 00:13:48.199
FILIP: Yes, so we go to here
and then [INAUDIBLE] device.

00:13:48.199 --> 00:13:49.990
IAN: It was interesting
when you had pinned

00:13:49.990 --> 00:13:51.560
and floating, it
didn't complain,

00:13:51.560 --> 00:13:53.310
but then it made
the text disappear,

00:13:53.310 --> 00:13:55.552
which is an interesting
effect on the children.

00:13:55.552 --> 00:13:56.690
What's up with the--

00:13:56.690 --> 00:13:58.776
FILIP: Yeah, it also
maybe died at that point.

00:13:58.776 --> 00:13:59.650
IAN: It may be a bug.

00:13:59.650 --> 00:14:00.191
FILIP: Right.

00:14:00.191 --> 00:14:01.390
I think it just died.

00:14:01.390 --> 00:14:03.400
IAN: Yes.

00:14:03.400 --> 00:14:04.592
FILIP: So [INAUDIBLE].

00:14:04.592 --> 00:14:05.800
IAN: There are other effects.

00:14:05.800 --> 00:14:08.072
You can add a--

00:14:08.072 --> 00:14:08.780
what's it called?

00:14:08.780 --> 00:14:09.738
FILIP: A flexibleSpace?

00:14:09.738 --> 00:14:11.406
IAN: flexibleSpace, yeah.

00:14:11.406 --> 00:14:15.510
But I think you need to set
the expandedHeight, as well.

00:14:15.510 --> 00:14:16.450
FILIP: OK.

00:14:16.450 --> 00:14:17.770
IAN: flexibleSpace is what--

00:14:17.770 --> 00:14:19.353
so just at the
expandedHeight, I think

00:14:19.353 --> 00:14:22.750
that will do bigger
AppBar that then shrinks.

00:14:22.750 --> 00:14:27.896
The flexibleSpace is then
what will appear behind the--

00:14:27.896 --> 00:14:29.770
so if you go the other
way, it should shrink.

00:14:29.770 --> 00:14:30.649
There you go.

00:14:30.649 --> 00:14:31.190
FILIP: Right.

00:14:31.190 --> 00:14:34.000
I love it.

00:14:34.000 --> 00:14:36.310
IAN: And if you put something
in the flexibleSpace--

00:14:36.310 --> 00:14:39.720
I put a placeholder
in the flexibleSpace--

00:14:39.720 --> 00:14:44.290
it will show you where--
that [INAUDIBLE] the X there.

00:14:44.290 --> 00:14:47.700
So that's where the
placeholder-- the way

00:14:47.700 --> 00:14:49.390
the flexibleSpace
goes, so typically you

00:14:49.390 --> 00:14:53.120
put some sort of image there
or something like that.

00:14:53.120 --> 00:14:54.670
FILIP: Awesome.

00:14:54.670 --> 00:14:57.790
IAN: There's also-- we probably
shouldn't do this in this case,

00:14:57.790 --> 00:15:00.890
but there's also a way you can
put a bottom in the AppBar.

00:15:00.890 --> 00:15:04.549
And you put a tab strip
there or something like that.

00:15:04.549 --> 00:15:06.340
There's a bunch of
other features on there.

00:15:06.340 --> 00:15:07.820
FILIP: Yeah, this is great.

00:15:07.820 --> 00:15:09.490
So, SliverAppBar.

00:15:09.490 --> 00:15:14.260
And if you look at
the implementation,

00:15:14.260 --> 00:15:18.620
let me see if you can
get to build, right.

00:15:18.620 --> 00:15:21.770
IAN: So SliverAppBar uses
a Sliver persistent header,

00:15:21.770 --> 00:15:24.850
which is the underlying
render object to do

00:15:24.850 --> 00:15:29.842
this, except that's actually--

00:15:29.842 --> 00:15:32.050
there's a little bit of
complications around AppBars,

00:15:32.050 --> 00:15:34.050
because there's three
different types of AppBars.

00:15:34.050 --> 00:15:35.424
There's the pinned,
the floating,

00:15:35.424 --> 00:15:37.960
and the pinned floating, or,
well, the normal or something.

00:15:37.960 --> 00:15:41.110
There's a bunch of different
AppBars, and each one of those

00:15:41.110 --> 00:15:43.120
has a different render
object under the hood.

00:15:43.120 --> 00:15:46.380
But we wanted to, all,
expose that as one Widget,

00:15:46.380 --> 00:15:48.790
so you could just
set the flags on it.

00:15:48.790 --> 00:15:51.100
Because of this,
it gets a little

00:15:51.100 --> 00:15:53.410
tricky between the
Widget and the render

00:15:53.410 --> 00:15:56.500
object at the bottom.

00:15:56.500 --> 00:16:00.700
In most cases, if you were
to make your own RenderSliver

00:16:00.700 --> 00:16:02.380
with your own Widget
to go with it,

00:16:02.380 --> 00:16:04.600
you wouldn't have that
level of complexity.

00:16:04.600 --> 00:16:05.860
FILIP: Right.

00:16:05.860 --> 00:16:06.910
So this is great.

00:16:06.910 --> 00:16:10.160
So we have something
that's using Slivers.

00:16:10.160 --> 00:16:11.650
We can play around with it.

00:16:11.650 --> 00:16:13.540
We can, you know,
add things to it.

00:16:13.540 --> 00:16:14.559
We can see the code.

00:16:14.559 --> 00:16:16.350
IAN: One thing that
would be good to show--

00:16:16.350 --> 00:16:19.140
so, so far we've
done two Slivers--

00:16:19.140 --> 00:16:23.020
the AppBar one and
the SliverList one.

00:16:23.020 --> 00:16:26.560
Both of those are Slivers on
the outside, but on the inside

00:16:26.560 --> 00:16:27.670
they take boxes.

00:16:27.670 --> 00:16:29.740
Placeholder's a box, text
is a box, all of these,

00:16:29.740 --> 00:16:31.014
ListTiles are boxes.

00:16:31.014 --> 00:16:33.430
So there are also Slivers that
take Slivers on the outside

00:16:33.430 --> 00:16:35.440
and Slivers on the inside.

00:16:35.440 --> 00:16:37.720
The main example
is SliverPadding.

00:16:37.720 --> 00:16:40.120
So for example, you
could wrap the ListView

00:16:40.120 --> 00:16:44.550
or the AppBar in
a SliverPadding,

00:16:44.550 --> 00:16:46.330
and that works the same--

00:16:46.330 --> 00:16:47.750
FILIP: Like the SliverList?

00:16:47.750 --> 00:16:49.416
IAN: Yeah, you could
wrap the SliverList

00:16:49.416 --> 00:16:50.970
in the SliverPadding,
for example.

00:16:50.970 --> 00:16:53.410
And it works similarly
to a Padding Widget

00:16:53.410 --> 00:16:54.850
in the box world.

00:16:57.262 --> 00:16:58.720
Again, because this
is a Sliver, we

00:16:58.720 --> 00:17:00.850
call this a Sliver
instead of a child,

00:17:00.850 --> 00:17:03.100
just to remind you that it
takes a Sliver as a child.

00:17:03.100 --> 00:17:04.270
FILIP: And that padding--

00:17:04.270 --> 00:17:05.550
IAN: And then you set the
Padding, and that works

00:17:05.550 --> 00:17:06.800
the same as a regular Padding.

00:17:06.800 --> 00:17:08.619
So just an EdgeInsets.

00:17:08.619 --> 00:17:10.599
And then when you
reload, you'll find

00:17:10.599 --> 00:17:12.940
that your list is indented.

00:17:12.940 --> 00:17:16.150
FILIP: Oh, nice.

00:17:16.150 --> 00:17:19.329
IAN: And the tricky thing is you
can do the same to the AppBar.

00:17:19.329 --> 00:17:21.574
FILIP: OK, let's do that.

00:17:21.574 --> 00:17:22.990
IAN: It's not
clear, to me, what's

00:17:22.990 --> 00:17:26.619
going to happen when you do
that, because AppBars do not

00:17:26.619 --> 00:17:29.260
expect to be padded.

00:17:29.260 --> 00:17:31.230
FILIP: SliverPadding,
let's break this.

00:17:31.230 --> 00:17:42.019
So Sliver and then
Padding, let's do 24.

00:17:42.019 --> 00:17:47.320
IAN: Ooh, there it is.

00:17:47.320 --> 00:17:50.230
The padding doesn't
want it to be floating,

00:17:50.230 --> 00:17:52.106
so we're still trying
to make a SliverAppBar.

00:17:52.106 --> 00:17:53.480
The Padding doesn't
know how to--

00:17:53.480 --> 00:17:55.510
so the SliverPadding
doesn't know how to float,

00:17:55.510 --> 00:17:58.075
and so it's probably
adjusting the--

00:17:58.075 --> 00:17:59.950
remember how I said
we're passing constraints

00:17:59.950 --> 00:18:01.321
down and then geometry back up.

00:18:01.321 --> 00:18:03.070
The constraints get
passed to the Padding.

00:18:03.070 --> 00:18:05.620
The Padding then passes the
constraints to the AppBar.

00:18:05.620 --> 00:18:07.470
The AppBar is
returning constraints--

00:18:07.470 --> 00:18:09.479
the geometry that imply
that it should float.

00:18:09.479 --> 00:18:11.770
The patterns are like, oh
man, I don't have to do that.

00:18:11.770 --> 00:18:13.696
And so it, like,
rewraps the geometry

00:18:13.696 --> 00:18:15.070
into a different
sort of geometry

00:18:15.070 --> 00:18:17.730
that indents and everything
and then passes that up.

00:18:17.730 --> 00:18:20.760
And that's why, here, that
the AppBar is not floating.

00:18:20.760 --> 00:18:22.720
FILIP: Right.

00:18:22.720 --> 00:18:23.740
That's fine.

00:18:23.740 --> 00:18:25.450
What happens when
I put something

00:18:25.450 --> 00:18:27.965
above the SliverAppBar?

00:18:27.965 --> 00:18:29.190
IAN: You try it.

00:18:29.190 --> 00:18:34.390
Put a SliverList, or you can
put a SliverToBoxAdapter.

00:18:34.390 --> 00:18:38.180
That's the simplest Sliver,
a SliverToBoxAdapter.

00:18:38.180 --> 00:18:41.890
It is basically just a container
that is a Sliver on the outside

00:18:41.890 --> 00:18:45.520
and a box on the inside.

00:18:45.520 --> 00:18:47.710
FILIP: So let's do this.

00:18:47.710 --> 00:18:48.640
Sliver what?

00:18:48.640 --> 00:18:50.826
IAN: SliverToBoxAdapter.

00:18:50.826 --> 00:18:52.511
There you go.

00:18:52.511 --> 00:18:54.760
And then you can put whatever
child you want in there.

00:18:54.760 --> 00:18:58.510
This expects a box inside of
it, so you can put a Flutter

00:18:58.510 --> 00:19:01.360
logo, or a text, or whatever.

00:19:01.360 --> 00:19:03.360
FILIP: Yeah, let's
do the Flutter logo.

00:19:06.180 --> 00:19:09.510
IAN: I wonder what
size it will be.

00:19:09.510 --> 00:19:12.410
And then there it is.

00:19:12.410 --> 00:19:15.531
FILIP: OK, and now
it's actually--

00:19:15.531 --> 00:19:16.030
isn't it?

00:19:16.030 --> 00:19:16.670
Oh, yeah.

00:19:16.670 --> 00:19:19.280
It is trying to--

00:19:19.280 --> 00:19:22.539
you know, the AppBar is actually
trying to float over things?

00:19:22.539 --> 00:19:24.580
IAN: Yeah, the AppBar is
getting really confused,

00:19:24.580 --> 00:19:26.360
because the floating AppBar
doesn't expect anyone

00:19:26.360 --> 00:19:26.985
to be above it.

00:19:26.985 --> 00:19:32.300
If you remove the floating,
you'll see that it's doing--

00:19:32.300 --> 00:19:34.162
floating AppBars
do not like to--

00:19:34.162 --> 00:19:35.120
FILIP: Yeah, of course.

00:19:35.120 --> 00:19:37.270
No, I just wanted to
break it in, and I didn't.

00:19:37.270 --> 00:19:37.980
So, OK.

00:19:37.980 --> 00:19:39.540
Good.

00:19:39.540 --> 00:19:42.350
IAN: The other you can do
which is particularly fancy--

00:19:42.350 --> 00:19:45.050
so if you copy your entire
list above your AppBar,

00:19:45.050 --> 00:19:46.140
you can then--

00:19:46.140 --> 00:19:49.130
I forget how this works,
but you can set a center

00:19:49.130 --> 00:19:51.350
to your CustomScrollView.

00:19:51.350 --> 00:19:54.724
And then half of your list
will be above the center,

00:19:54.724 --> 00:19:56.390
and half of it will
be below the center.

00:19:56.390 --> 00:19:58.370
So right now, you just have a
list followed by the AppBar,

00:19:58.370 --> 00:19:59.480
followed by the list.

00:19:59.480 --> 00:20:01.371
But if we look at
CustomScrollView's

00:20:01.371 --> 00:20:03.620
documentation, there's a way
to set, like, the center.

00:20:07.642 --> 00:20:10.160
I forget how this works.

00:20:10.160 --> 00:20:12.470
Oh, maybe we never exposed
this on the Widget.

00:20:12.470 --> 00:20:16.600
Maybe this is only exposed
in the render object.

00:20:16.600 --> 00:20:19.690
Never mind, false alarm.

00:20:19.690 --> 00:20:23.260
The underlying logic knows how
to have double-ended lists that

00:20:23.260 --> 00:20:25.420
are infinite in both
directions and have

00:20:25.420 --> 00:20:29.910
a center in the middle, like
the AppBar, for example.

00:20:29.910 --> 00:20:31.570
But apparently, we
never exposed it.

00:20:31.570 --> 00:20:34.550
It will be a feature
for next year.

00:20:34.550 --> 00:20:39.610
FILIP: OK, so all right, I
think we covered SliverAppBar

00:20:39.610 --> 00:20:42.970
and, like, the crazy things
that you can do with Slivers.

00:20:42.970 --> 00:20:44.680
Let's create our own Sliver.

00:20:44.680 --> 00:20:45.790
IAN: Ooh.

00:20:45.790 --> 00:20:47.000
FILIP: Yes.

00:20:47.000 --> 00:20:52.320
Where is the-- do
you want, like--

00:20:52.320 --> 00:20:58.000
like, for example, here, do
you think between these two--

00:20:58.000 --> 00:20:59.980
between the AppBar
and the List, can we

00:20:59.980 --> 00:21:01.400
put, like, a weird Sliver?

00:21:01.400 --> 00:21:04.364
IAN: Sure, we can do whatever
we want anywhere we want.

00:21:04.364 --> 00:21:06.280
That's the beauty of
this composition approach

00:21:06.280 --> 00:21:08.260
is you can mix it up.

00:21:08.260 --> 00:21:10.889
FILIP: I just mean like in
terms of showing stuff off?

00:21:10.889 --> 00:21:11.680
IAN: Yeah, it's OK.

00:21:11.680 --> 00:21:12.450
FILIP: Yeah.

00:21:12.450 --> 00:21:14.620
OK, so would I do Sliver?

00:21:14.620 --> 00:21:16.930
IAN: So we have to create
our own render object first

00:21:16.930 --> 00:21:19.360
if you want to create
your own Sliver,

00:21:19.360 --> 00:21:22.240
so we need to create a
new render object class.

00:21:22.240 --> 00:21:23.740
FILIP: What's it
going to be called?

00:21:23.740 --> 00:21:26.270
IAN: Sliver Filip.

00:21:26.270 --> 00:21:28.020
I'm not sure whatever
you want to call it.

00:21:28.020 --> 00:21:31.520
And it's going to
extend Sliver--

00:21:31.520 --> 00:21:33.640
sorry, you're going to
extend RenderSliver.

00:21:33.640 --> 00:21:35.570
Extend the RenderSliver.

00:21:35.570 --> 00:21:37.270
Now I have to admit,
at this point,

00:21:37.270 --> 00:21:40.780
I very quickly-- it should
just be called RenderSliver.

00:21:40.780 --> 00:21:46.630
Oh, you might need to import
the Rendering Library.

00:21:46.630 --> 00:21:50.929
Now at this point, I rapidly
forget how any of this works,

00:21:50.929 --> 00:21:52.720
and every time I make
my own render object,

00:21:52.720 --> 00:21:54.541
I always look it up.

00:21:54.541 --> 00:21:55.915
FILIP: We can read
documentation.

00:21:55.915 --> 00:21:56.560
It's OK.

00:21:56.560 --> 00:21:57.976
IAN: So the first
thing to do-- we

00:21:57.976 --> 00:22:00.370
need to look at the
RenderSliver docs,

00:22:00.370 --> 00:22:02.670
and those are pretty extensive.

00:22:02.670 --> 00:22:05.230
And they were
written specifically,

00:22:05.230 --> 00:22:08.190
so that I would remember how to
write more RenderSlivers later.

00:22:10.940 --> 00:22:15.737
So the first part of this talks
about how the protocol works--

00:22:15.737 --> 00:22:16.570
[INTERPOSING VOICES]

00:22:16.570 --> 00:22:18.352
FILIP: We saw this before, yes.

00:22:18.352 --> 00:22:19.810
IAN: And then
there's a subsection.

00:22:19.810 --> 00:22:22.750
The subsection is specifically
about writing a RenderSliver

00:22:22.750 --> 00:22:26.210
sub class, so there's several
kinds of Slivers you can do.

00:22:26.210 --> 00:22:27.700
We've talked about them so far.

00:22:27.700 --> 00:22:29.920
FILIP: Just making
[INAUDIBLE] sorry.

00:22:29.920 --> 00:22:31.812
IAN: There are Sliver
to Slivers, right.

00:22:31.812 --> 00:22:34.270
So you have a Sliver on the
outside, a Sliver on the inside

00:22:34.270 --> 00:22:35.460
like SliverPadding.

00:22:35.460 --> 00:22:37.450
There is Sliver
to Box, where you

00:22:37.450 --> 00:22:39.650
have a Sliver on the
outside, but a box, like--

00:22:39.650 --> 00:22:42.490
a Sliver to a Box Adapter,
for example, or the AppBar.

00:22:42.490 --> 00:22:48.490
There's Sliver to many Slivers,
like SliverList or SliverGrid.

00:22:48.490 --> 00:22:50.170
And I suppose, in
principle, you could

00:22:50.170 --> 00:22:52.432
do something that isn't
a Sliver on the outside,

00:22:52.432 --> 00:22:53.890
and there's a Sliver
on the inside.

00:22:53.890 --> 00:22:56.130
That's basically
what a Viewport is.

00:22:56.130 --> 00:22:57.880
A custom ScrollView,
under the hood,

00:22:57.880 --> 00:23:01.000
uses a Viewport to actually
do all the Sliver logic.

00:23:01.000 --> 00:23:03.820
And it has to adapt from a
box, because on the outside

00:23:03.820 --> 00:23:05.930
we're using boxes, to
Slivers on the inside.

00:23:05.930 --> 00:23:07.600
And that's what a Viewport is.

00:23:07.600 --> 00:23:16.290
So the easiest one to do
is a SliverToBox Sliver.

00:23:16.290 --> 00:23:20.214
FILIP: Is it something that
I can render, SliverToBox?

00:23:20.214 --> 00:23:21.880
IAN: Yeah, we could
just copy and paste,

00:23:21.880 --> 00:23:23.463
render the
SliverToBoxAdapter and then

00:23:23.463 --> 00:23:25.570
adjust that one, if you want.

00:23:25.570 --> 00:23:27.440
That's what I would normally do.

00:23:27.440 --> 00:23:33.440
FILIP: OK, let's do this.

00:23:33.440 --> 00:23:34.490
What is it?

00:23:34.490 --> 00:23:37.532
IAN: You want
SliverToBoxAdapter.

00:23:37.532 --> 00:23:38.990
I think there is
a link just there.

00:23:38.990 --> 00:23:43.000
[INAUDIBLE]

00:23:43.000 --> 00:23:45.047
FILIP: OK, and I just do this?

00:23:45.047 --> 00:23:45.880
[INTERPOSING VOICES]

00:23:45.880 --> 00:23:47.360
IAN: So yeah, and
the performLayout

00:23:47.360 --> 00:23:51.814
is how-- basically, all render
objects have a Layout method,

00:23:51.814 --> 00:23:53.230
and then they have
a Paint method.

00:23:53.230 --> 00:23:54.688
And in the case of
Slivers, there's

00:23:54.688 --> 00:23:56.900
a few other methods
you have to implement,

00:23:56.900 --> 00:23:59.330
but we'll talk
about those later.

00:23:59.330 --> 00:24:01.792
So first, we have this--

00:24:01.792 --> 00:24:02.750
sorry, I just need to--

00:24:02.750 --> 00:24:04.490
FILIP: --structure.

00:24:04.490 --> 00:24:08.560
IAN: And in this case, you want
it to take a single box child,

00:24:08.560 --> 00:24:11.080
so you'll want to
also create a--

00:24:11.080 --> 00:24:15.770
you'll want to change
the declaration,

00:24:15.770 --> 00:24:21.399
so it's mixing in one
of the other classes.

00:24:21.399 --> 00:24:22.940
If you look at what
the other one is,

00:24:22.940 --> 00:24:26.150
you'll notice it's mixing in
RenderSliverSingleBoxAdaptor.

00:24:26.150 --> 00:24:29.290
And that is a nice mix in.

00:24:29.290 --> 00:24:30.750
FILIP: It's actually
extending it.

00:24:30.750 --> 00:24:31.916
IAN: Oh, is it extending it?

00:24:31.916 --> 00:24:34.450
Oh, even better.

00:24:34.450 --> 00:24:36.770
So that's a render
object that knows

00:24:36.770 --> 00:24:38.870
how to deal with
having a single child.

00:24:38.870 --> 00:24:40.925
It does things like adding
and removing a child.

00:24:40.925 --> 00:24:43.820
FILIP: So mostly, you
would want that, or like--

00:24:43.820 --> 00:24:46.060
well, in our case, we
would just want that.

00:24:46.060 --> 00:24:47.690
IAN: It really depends on the
effect you're trying to get.

00:24:47.690 --> 00:24:48.710
FILIP: Right, right.

00:24:48.710 --> 00:24:51.212
IAN: It's hard to
predict what effect.

00:24:51.212 --> 00:24:52.670
FILIP: And then I
just Copy, Paste.

00:24:52.670 --> 00:24:56.640
That's my favorite way
to implement anything.

00:24:56.640 --> 00:24:59.180
So if I can--

00:25:01.702 --> 00:25:03.410
IAN: So in this case,
this class actually

00:25:03.410 --> 00:25:06.530
doesn't have a paint method,
because the superclass

00:25:06.530 --> 00:25:08.240
automatically paints
the child at 0,

00:25:08.240 --> 00:25:16.640
0, which is the easiest
way to do the Sliver work.

00:25:16.640 --> 00:25:18.840
FILIP: So do we care?

00:25:18.840 --> 00:25:20.114
Let's-- OK, yeah.

00:25:20.114 --> 00:25:21.530
IAN: This is
perfectly reasonable.

00:25:21.530 --> 00:25:23.550
So if you use this
one now, you'll find--

00:25:23.550 --> 00:25:26.540
we still have to make
a Widget to wrap the--

00:25:26.540 --> 00:25:29.030
we really should call
this RenderSliverFilip,

00:25:29.030 --> 00:25:30.640
because this is
our render object.

00:25:30.640 --> 00:25:32.030
And then we'll create a--

00:25:34.690 --> 00:25:36.710
we'll create a
separate class called

00:25:36.710 --> 00:25:40.040
SliverFilip, which is our--

00:25:40.040 --> 00:25:42.014
FILIP: Stateless?

00:25:42.014 --> 00:25:43.930
IAN: Nope, it's actually
a RenderObjectWidget.

00:25:43.930 --> 00:25:44.471
FILIP: Right.

00:25:44.471 --> 00:25:45.800
All right.

00:25:45.800 --> 00:25:49.070
IAN: So we can-- you know,
class SliverFilip extends--

00:25:49.070 --> 00:25:51.290
I believe it will
extend a single child.

00:25:54.620 --> 00:25:57.810
No, none of those.

00:25:57.810 --> 00:25:58.850
Let's look it up again.

00:25:58.850 --> 00:26:02.450
Look up the children of
a RenderObjectWidget--

00:26:02.450 --> 00:26:04.074
the subclasses of
RenderObjectWidget.

00:26:04.074 --> 00:26:05.990
If you look up
RenderObjectWidget in the docs,

00:26:05.990 --> 00:26:08.367
you'll find the list
of all the subclasses.

00:26:11.170 --> 00:26:12.940
So up here where it
says Implementers,

00:26:12.940 --> 00:26:14.690
you'll see all the
different Implementers.

00:26:14.690 --> 00:26:16.370
And the one that
we care about is

00:26:16.370 --> 00:26:18.343
SingleChildRenderObjectWidget.

00:26:18.343 --> 00:26:20.487
There you go.

00:26:20.487 --> 00:26:21.570
FILIP: So that's what we--

00:26:21.570 --> 00:26:22.130
yeah.

00:26:22.130 --> 00:26:25.520
IAN: This again, much like the
other superclass we're using,

00:26:25.520 --> 00:26:27.254
knows how to handle
having a child.

00:26:27.254 --> 00:26:29.420
It doesn't really care
exactly how you deal with it.

00:26:29.420 --> 00:26:32.070
It just knows that--

00:26:32.070 --> 00:26:33.600
yeah.

00:26:33.600 --> 00:26:37.430
And then this has to
return a RenderSliverFilip

00:26:37.430 --> 00:26:39.733
in the Constructor.

00:26:43.517 --> 00:26:45.629
There we go.

00:26:45.629 --> 00:26:47.920
And then you don't have any
arguments except the child,

00:26:47.920 --> 00:26:50.336
and the child is
dealt with by the

00:26:50.336 --> 00:26:51.835
SingleChildRenderObjectWidget,
so we

00:26:51.835 --> 00:26:53.126
don't have to worry about that.

00:26:53.126 --> 00:26:55.735
We do have to add a
Constructor to take our child.

00:27:02.720 --> 00:27:03.220
FILIP: No?

00:27:03.220 --> 00:27:03.720
OK.

00:27:06.230 --> 00:27:08.450
IAN: And we normally
will also take a key.

00:27:08.450 --> 00:27:13.460
So normally we'll have two named
arguments, a Key of type key

00:27:13.460 --> 00:27:17.610
and a Child of type Widget.

00:27:17.610 --> 00:27:23.800
FILIP: OK, so Widget
child and Key key.

00:27:23.800 --> 00:27:25.520
IAN: And I think
both of those can

00:27:25.520 --> 00:27:26.780
be passed to the superclass.

00:27:26.780 --> 00:27:29.530
Although, it can-- this is
where I look it up every time.

00:27:32.370 --> 00:27:33.870
FILIP: Yeah.

00:27:33.870 --> 00:27:35.240
IAN: Excellent.

00:27:35.240 --> 00:27:36.440
FILIP: Wait, is it?

00:27:36.440 --> 00:27:36.940
Yes.

00:27:36.940 --> 00:27:38.030
OK.

00:27:38.030 --> 00:27:40.760
IAN: And then normally, we
would also have a UpdateRender

00:27:40.760 --> 00:27:42.397
object, but we
don't have anything

00:27:42.397 --> 00:27:44.730
to update because we don't
have any arguments right now.

00:27:44.730 --> 00:27:48.200
So there's nothing to do there.

00:27:48.200 --> 00:27:51.270
So now, if we try adding
that to our list, in theory,

00:27:51.270 --> 00:27:55.400
it should do the same as we
did before with the Render--

00:27:55.400 --> 00:27:57.700
with the SliverToBoxAdapter.

00:27:57.700 --> 00:28:03.350
FILIP: So we should
put it here, and we

00:28:03.350 --> 00:28:10.800
can give it the child of
Text hi, or something.

00:28:10.800 --> 00:28:12.320
IAN: Yeah, let's try it.

00:28:12.320 --> 00:28:15.020
This will probably fail,
because writing code never

00:28:15.020 --> 00:28:16.130
passes the first time.

00:28:16.130 --> 00:28:18.650
FILIP: Yeah, and
also I don't know

00:28:18.650 --> 00:28:21.650
what's going on
with my computer,

00:28:21.650 --> 00:28:24.080
but it's just froze again.

00:28:24.080 --> 00:28:25.130
So, sorry about that.

00:28:29.450 --> 00:28:31.690
IAN: If this happens to
you, please file the bug.

00:28:31.690 --> 00:28:35.370
FILIP: Yeah, I
will, but not now.

00:28:40.510 --> 00:28:41.010
Oh, hi.

00:28:41.010 --> 00:28:41.410
IAN: There you go.

00:28:41.410 --> 00:28:42.310
FILIP: OK, good.

00:28:42.310 --> 00:28:42.810
Good.

00:28:42.810 --> 00:28:43.393
This is great.

00:28:47.050 --> 00:28:49.550
So crazy things that
we can do with this?

00:28:49.550 --> 00:28:51.400
IAN: So let's put
something bigger in there

00:28:51.400 --> 00:28:52.810
to make it bigger.

00:28:52.810 --> 00:28:55.510
Like, we can add a container or
something with some big height.

00:28:55.510 --> 00:28:57.886
And then making it big will
make it much more obvious

00:28:57.886 --> 00:28:59.260
that we're doing
crazy stuff when

00:28:59.260 --> 00:29:00.429
we start doing crazy stuff.

00:29:00.429 --> 00:29:00.970
FILIP: Right.

00:29:00.970 --> 00:29:08.650
So let's do some colors
like red, of course,

00:29:08.650 --> 00:29:13.650
and then in it there
should be what?

00:29:13.650 --> 00:29:15.520
Text.

00:29:15.520 --> 00:29:18.250
IAN: And then probably,
also, you'd give it a height.

00:29:18.250 --> 00:29:18.910
FILIP: Right.

00:29:18.910 --> 00:29:22.500
And height of 50?

00:29:22.500 --> 00:29:23.650
IAN: Sure.

00:29:23.650 --> 00:29:24.730
How big is that?

00:29:24.730 --> 00:29:25.911
Let's make it 150.

00:29:25.911 --> 00:29:26.411
OK.

00:29:29.770 --> 00:29:31.770
So that will give us more
space to play with it.

00:29:31.770 --> 00:29:32.390
All right.

00:29:32.390 --> 00:29:34.430
So then if we look
at the RenderObject--

00:29:34.430 --> 00:29:36.800
if we look at the
RenderObject, now you'll

00:29:36.800 --> 00:29:39.710
notice somewhere we're
returning a geometry.

00:29:39.710 --> 00:29:42.710
So when we don't have a
child, we return zero.

00:29:42.710 --> 00:29:46.947
And SliverGeometry.zero
is a constant instance

00:29:46.947 --> 00:29:49.530
of SliverGeometry that just has
all the numbers that are zero,

00:29:49.530 --> 00:29:52.220
because there's nothing to show.

00:29:52.220 --> 00:29:53.870
FILIP: So like if--

00:29:53.870 --> 00:29:59.081
OK, so if I do this, this
will always just not exist?

00:29:59.081 --> 00:30:00.080
IAN: Yeah, there you go.

00:30:00.080 --> 00:30:00.910
FILIP: I mean, it's like one--

00:30:00.910 --> 00:30:01.380
OK.

00:30:01.380 --> 00:30:03.296
IAN: And as you see, it
doesn't show anything.

00:30:03.296 --> 00:30:04.310
FILIP: Yes.

00:30:04.310 --> 00:30:06.560
IAN: But we have a child,
so we don't want to do that.

00:30:06.560 --> 00:30:08.434
The next thing we do is
we lay out the child.

00:30:08.434 --> 00:30:10.450
Now the Sliver
constraints object

00:30:10.450 --> 00:30:13.480
has an asBoxConstraints
getter method.

00:30:13.480 --> 00:30:14.600
You can see it there.

00:30:14.600 --> 00:30:19.580
And we use that to very quickly
turn the Sliver constraints

00:30:19.580 --> 00:30:23.541
into the sort of
equivalent box constraints.

00:30:23.541 --> 00:30:25.040
It's usually the
box constraints you

00:30:25.040 --> 00:30:28.680
want in this kind of
single child case.

00:30:28.680 --> 00:30:32.570
And what it does is it looks
at what the cross extent is,

00:30:32.570 --> 00:30:35.810
the cross axis extent, and
that's going to be the width.

00:30:35.810 --> 00:30:37.820
And it figures out how
much room you have,

00:30:37.820 --> 00:30:40.195
which typically will be infinite
in the height direction.

00:30:40.195 --> 00:30:44.270
It will make that the
max extent in the height,

00:30:44.270 --> 00:30:46.250
but it knows about
the axis direction.

00:30:46.250 --> 00:30:47.774
It knows about the
growth direction.

00:30:47.774 --> 00:30:49.440
It knows about all
the different things,

00:30:49.440 --> 00:30:51.160
and so it picks the right ones.

00:30:51.160 --> 00:30:53.270
So if you actually
had a horizontal list,

00:30:53.270 --> 00:30:55.310
it would use the height
as the cross axis

00:30:55.310 --> 00:30:59.120
and the width as the
normal axis itself.

00:30:59.120 --> 00:31:01.905
It's a relatively simple
method, but it's so convenient

00:31:01.905 --> 00:31:04.609
when you're doing
this kind of stuff.

00:31:04.609 --> 00:31:06.900
So then next, we have to
figure out what we want to do.

00:31:06.900 --> 00:31:10.310
So we don't have the equivalent
for going the other way to find

00:31:10.310 --> 00:31:15.124
out what the child extent--
that's the height of the child

00:31:15.124 --> 00:31:17.540
if you are a vertical list,
or the width of a child if you

00:31:17.540 --> 00:31:18.590
are horizontal list.

00:31:18.590 --> 00:31:22.190
And so, we have this switch
here that does that for us.

00:31:22.190 --> 00:31:23.840
It figures out the
child extent, based

00:31:23.840 --> 00:31:26.420
on which axis the list is in.

00:31:26.420 --> 00:31:29.000
FILIP: So in our case, it's
going to be the height.

00:31:29.000 --> 00:31:32.420
IAN: Yeah, but you could easily
switch your CustomScrollView

00:31:32.420 --> 00:31:35.229
to be a horizontal
CustomScrollView.

00:31:35.229 --> 00:31:36.020
We should try that.

00:31:36.020 --> 00:31:37.290
What happens if you do that?

00:31:40.643 --> 00:31:44.396
Yeah, it had an axis
argument here that says--

00:31:44.396 --> 00:31:46.654
is it axis direction or
something along those lines?

00:31:46.654 --> 00:31:47.320
scrollDirection.

00:31:47.320 --> 00:31:48.560
FILIP: Oh, scrollDirection.

00:31:48.560 --> 00:31:48.940
Yes.

00:31:48.940 --> 00:31:50.481
IAN: And it takes
and axis direction,

00:31:50.481 --> 00:31:52.380
and I think there's like
four different-- oh,

00:31:52.380 --> 00:31:53.150
it takes an axis.

00:31:53.150 --> 00:31:53.950
Yeah, there you go.

00:31:53.950 --> 00:31:54.980
FILIP: Right, yeah.

00:31:54.980 --> 00:31:56.210
This is cool.

00:31:56.210 --> 00:31:58.760
We can have, like,
AppBar on the left.

00:31:58.760 --> 00:32:03.682
IAN: But notice how
now our container is--

00:32:03.682 --> 00:32:04.515
FILIP: --is correct.

00:32:04.515 --> 00:32:05.265
IAN: It's correct.

00:32:05.265 --> 00:32:06.590
I mean, like, it's all worked.

00:32:06.590 --> 00:32:08.060
And that's because of
that switch statement,

00:32:08.060 --> 00:32:10.570
where we're looking at the
width instead of the height.

00:32:10.570 --> 00:32:14.390
The Sliver-- the code here,
that we are setting the height

00:32:14.390 --> 00:32:15.614
to 150, that's being ignored.

00:32:15.614 --> 00:32:17.030
Because the height
is forced right

00:32:17.030 --> 00:32:19.010
at the height of the viewport.

00:32:21.650 --> 00:32:24.414
And we didn't set a
width, so we just shrink.

00:32:24.414 --> 00:32:26.330
So that's what that
switch statement is doing.

00:32:26.330 --> 00:32:28.330
After that, we're then
trying to figure out, OK,

00:32:28.330 --> 00:32:36.050
what is the size of the
child, essentially, in terms

00:32:36.050 --> 00:32:39.374
of the Sliver geometry?

00:32:39.374 --> 00:32:41.540
So this is where you start
calling these convenience

00:32:41.540 --> 00:32:42.040
methods.

00:32:44.374 --> 00:32:45.290
FILIP: Where are they?

00:32:45.290 --> 00:32:47.481
Is that the Sliver?

00:32:47.481 --> 00:32:47.980
OK.

00:32:47.980 --> 00:32:48.896
IAN: Yeah, the Sliver.

00:32:48.896 --> 00:32:51.170
I think it might be on the
RenderSliver helper class.

00:32:51.170 --> 00:32:53.420
There's a class that has a
bunch of these methods that

00:32:53.420 --> 00:32:55.250
help you do these
computations, but you

00:32:55.250 --> 00:32:56.250
don't have to use these.

00:32:56.250 --> 00:32:59.390
So we can delete those
entirely, and we'll

00:32:59.390 --> 00:33:02.716
see what happens when we
put in our own numbers.

00:33:02.716 --> 00:33:04.340
And we can remove
the asserts, as well,

00:33:04.340 --> 00:33:06.452
because don't want
to try and explain

00:33:06.452 --> 00:33:08.660
why each of these things
has to be true, necessarily,

00:33:08.660 --> 00:33:10.190
right now.

00:33:10.190 --> 00:33:12.020
So then here's the
geometry, and we

00:33:12.020 --> 00:33:17.190
can place, into these
numbers, whatever we want.

00:33:17.190 --> 00:33:19.539
So the first one that really
matters is the paintExtent.

00:33:19.539 --> 00:33:21.830
I believe that's the only
one you actually have to get.

00:33:21.830 --> 00:33:24.121
We should have a look at the
SliverGeometry constructor

00:33:24.121 --> 00:33:27.012
and see which ones it
really wants you to give.

00:33:29.664 --> 00:33:32.220
In fact, it has defaults
for pretty much everything,

00:33:32.220 --> 00:33:33.690
so you don't really have to--

00:33:33.690 --> 00:33:35.891
FILIP: Yeah, it looks like it.

00:33:35.891 --> 00:33:37.640
IAN: A lot of them
default to paintExtent,

00:33:37.640 --> 00:33:39.980
so like layoutExtent, I
believe will automatically

00:33:39.980 --> 00:33:41.990
use the paintExtent,
if you gave it.

00:33:41.990 --> 00:33:47.930
layoutExtent is how far
down the next child will be.

00:33:47.930 --> 00:33:50.180
paintExtent is how much
you're going to paint.

00:33:50.180 --> 00:33:53.510
There's also testExtent.
hitTestExtent, which

00:33:53.510 --> 00:33:56.000
is how big you are for taps.

00:33:56.000 --> 00:33:59.867
So you can make yourself bigger
than you're going to paint,

00:33:59.867 --> 00:34:02.200
so that you'll tap in an area
where you're not painting,

00:34:02.200 --> 00:34:04.450
and so on, and so forth.

00:34:04.450 --> 00:34:06.350
FILIP: What's cacheExtent?

00:34:06.350 --> 00:34:07.920
IAN: So cacheExtent.

00:34:07.920 --> 00:34:12.550
So the lists will render--

00:34:12.550 --> 00:34:14.050
I mean, we can go
to the whiteboard.

00:34:14.050 --> 00:34:14.989
FILIP: Yeah.

00:34:14.989 --> 00:34:23.567
IAN: So the lists will render
what's on the screen, right.

00:34:23.567 --> 00:34:25.150
I mentioned earlier
that they're lazy.

00:34:25.150 --> 00:34:28.260
So we have this is
what's on the screen,

00:34:28.260 --> 00:34:31.800
and we have a bunch of
items on the screen.

00:34:31.800 --> 00:34:33.179
But the user scrolls.

00:34:33.179 --> 00:34:35.550
And sometimes, like say
these things have an image

00:34:35.550 --> 00:34:38.130
like an avatar or something.

00:34:38.130 --> 00:34:40.800
If the user scrolls, we're
going to very quickly need

00:34:40.800 --> 00:34:43.170
to have this image
and this image ready.

00:34:43.170 --> 00:34:47.730
And so, instead what we do,
instead of just rendering it

00:34:47.730 --> 00:34:50.580
just at the last minute, is we
actually have a few pixels--

00:34:50.580 --> 00:34:51.719
I forget how many.

00:34:51.719 --> 00:34:53.760
Like, 200 or something
like that-- we

00:34:53.760 --> 00:34:55.920
have 200 pixels or something
like that of content

00:34:55.920 --> 00:34:58.430
below the list and
also above the list,

00:34:58.430 --> 00:35:02.530
that we have pre-rendered,
and we're ready to go.

00:35:02.530 --> 00:35:04.780
We also use this
for accessibility.

00:35:04.780 --> 00:35:07.260
So on iOS, in
particular, if this

00:35:07.260 --> 00:35:09.120
is selected with the
accessibility tools,

00:35:09.120 --> 00:35:11.490
and you say go to
the next one, we

00:35:11.490 --> 00:35:13.470
need to know where it is, right.

00:35:13.470 --> 00:35:14.880
On Android, the
API, you can just

00:35:14.880 --> 00:35:16.260
say, oh, I don't have it yet.

00:35:16.260 --> 00:35:19.430
Come tell me and scroll, then
I'll tell you what it is.

00:35:19.430 --> 00:35:21.610
But on iOS, you need
to have it already.

00:35:21.610 --> 00:35:24.240
And so, when we scroll
to the next one,

00:35:24.240 --> 00:35:27.600
we have it already, because we
pre-computed where it would be.

00:35:27.600 --> 00:35:29.650
And that's what the cache is.

00:35:29.650 --> 00:35:37.770
And so, in the API here,
you'll see on the constraints,

00:35:37.770 --> 00:35:39.720
and you'll see on the
geometry, that there's

00:35:39.720 --> 00:35:41.700
mentions of the cache.

00:35:41.700 --> 00:35:43.932
Now you don't actually have
to implement any of this,

00:35:43.932 --> 00:35:45.390
and if you just
leave it off you'll

00:35:45.390 --> 00:35:47.250
find it defaults to
reasonable values.

00:35:47.250 --> 00:35:47.792
FILIP: Right.

00:35:47.792 --> 00:35:49.583
IAN: In our case, it
really doesn't matter,

00:35:49.583 --> 00:35:50.880
because we have a single child.

00:35:50.880 --> 00:35:53.640
We're always going to lay
it out, because otherwise

00:35:53.640 --> 00:35:55.140
what would we do?

00:35:55.140 --> 00:35:57.360
And so, we can just ignore
all that cache there.

00:35:57.360 --> 00:35:59.610
FILIP: But like, what
would you put there?

00:35:59.610 --> 00:36:02.520
Is it like something's
bigger than--

00:36:02.520 --> 00:36:04.980
like a bigger number or--

00:36:04.980 --> 00:36:07.230
IAN: Yeah, so the cache
extent tells the system

00:36:07.230 --> 00:36:08.710
how much have you cached.

00:36:08.710 --> 00:36:14.150
So for example, say your list
is actually like this short,

00:36:14.150 --> 00:36:15.480
right.

00:36:15.480 --> 00:36:17.790
So you've reached
the end of your list.

00:36:17.790 --> 00:36:19.440
Your list goes up to
here, but then you

00:36:19.440 --> 00:36:20.874
reach the end of your list.

00:36:20.874 --> 00:36:22.290
There's nothing
else to pre-cache,

00:36:22.290 --> 00:36:24.000
because you don't
have any more content.

00:36:24.000 --> 00:36:26.760
And so, your cacheExtent
wouldn't extend past here.

00:36:26.760 --> 00:36:29.479
Whereas if you do
have content, and you

00:36:29.479 --> 00:36:31.020
have a bunch of
content, you can say,

00:36:31.020 --> 00:36:34.640
oh, I've cached
everything up to here.

00:36:34.640 --> 00:36:38.010
And that's what the
cacheExtent is about,

00:36:38.010 --> 00:36:39.150
if I remember correctly.

00:36:39.150 --> 00:36:41.640
FILIP: Right.

00:36:41.640 --> 00:36:45.880
So it looks like
we don't need this.

00:36:45.880 --> 00:36:48.780
We might not need this, because
it's a child that we're just--

00:36:48.780 --> 00:36:52.680
IAN: paintExtent, I think is
the one that we do need to give.

00:36:52.680 --> 00:36:53.767
FILIP: OK.

00:36:53.767 --> 00:36:55.350
IAN: Because otherwise,
it'll be zero,

00:36:55.350 --> 00:36:57.630
and if your paintExtent
is zero, then we're

00:36:57.630 --> 00:36:58.920
not showing anything.

00:36:58.920 --> 00:37:02.320
FILIP: So I can just
do, like, OK, 75.

00:37:02.320 --> 00:37:03.690
IAN: Yeah.

00:37:03.690 --> 00:37:05.850
FILIP: And then this
one, hitTestExtent?

00:37:05.850 --> 00:37:07.730
IAN: We can get rid of that one.

00:37:07.730 --> 00:37:10.860
maxPaintExtent is how much--

00:37:10.860 --> 00:37:13.500
what is the maximum
we could ever paint?

00:37:13.500 --> 00:37:15.430
FILIP: Right.

00:37:15.430 --> 00:37:16.590
OK.

00:37:16.590 --> 00:37:17.310
And then--

00:37:17.310 --> 00:37:20.160
IAN: And I believe that also
defaults to paintExtent.

00:37:20.160 --> 00:37:21.760
FILIP: Let's see.

00:37:21.760 --> 00:37:23.160
I just want to--

00:37:23.160 --> 00:37:23.970
IAN: No, maybe not.

00:37:26.741 --> 00:37:29.240
Yeah, the ones that default are
layoutExtent, hitTestExtent,

00:37:29.240 --> 00:37:31.250
and cacheExtent.

00:37:31.250 --> 00:37:35.170
So you do need to
give a maxPaintExtent.

00:37:35.170 --> 00:37:36.925
FILIP: And then is
hasVisualOverflow.

00:37:36.925 --> 00:37:39.050
IAN: Yeah, that one, you
don't have to worry about.

00:37:39.050 --> 00:37:43.264
That's about making certain
optimizations work later.

00:37:43.264 --> 00:37:43.930
FILIP: Oh, cool.

00:37:43.930 --> 00:37:44.650
Wait.

00:37:44.650 --> 00:37:46.760
Did it happen?

00:37:46.760 --> 00:37:49.880
What if I do 50?

00:37:49.880 --> 00:37:52.270
Oh.

00:37:52.270 --> 00:37:55.019
IAN: So here you can see one
of the first weird effects

00:37:55.019 --> 00:37:55.810
that we're getting.

00:37:55.810 --> 00:37:57.640
So notice how, when we got
to the top of the screen,

00:37:57.640 --> 00:37:59.140
it didn't go off straight away?

00:37:59.140 --> 00:38:00.974
FILIP: Yeah.

00:38:00.974 --> 00:38:02.890
IAN: Or the next list
didn't go straight away.

00:38:02.890 --> 00:38:06.250
That's because the paintExtent
is being fixed here,

00:38:06.250 --> 00:38:10.270
so we're always painting 50
regardless of where we are.

00:38:10.270 --> 00:38:12.970
FILIP: Also, it covers the--

00:38:12.970 --> 00:38:14.710
oh, because--

00:38:14.710 --> 00:38:17.830
IAN: So we're always
taking as much--

00:38:17.830 --> 00:38:22.600
we're always scrolling
as much as the child,

00:38:22.600 --> 00:38:25.720
so we're always taking
up as much of the scroll,

00:38:25.720 --> 00:38:27.265
if you like, as the child.

00:38:27.265 --> 00:38:28.900
But we're always painting 50.

00:38:32.560 --> 00:38:34.810
FILIP: So, OK.

00:38:34.810 --> 00:38:39.422
So what we can do is
like this, and then--

00:38:39.422 --> 00:38:42.600
that bug again.

00:38:42.600 --> 00:38:43.310
See?

00:38:43.310 --> 00:38:44.310
IAN: Yeah, that's weird.

00:38:49.377 --> 00:38:51.500
FILIP: OK, so we'll--

00:38:51.500 --> 00:38:52.130
what can we do?

00:38:52.130 --> 00:38:55.160
Like, can we, for example--

00:38:55.160 --> 00:38:57.350
something that
really makes it clear

00:38:57.350 --> 00:39:02.600
that this is done on
basically every frame for us,

00:39:02.600 --> 00:39:05.330
and we can do whatever--

00:39:05.330 --> 00:39:12.170
can we, like-- you know, if the
scrollOffset-- which we get,

00:39:12.170 --> 00:39:13.070
right?

00:39:13.070 --> 00:39:17.185
If the scrollOffset
is even, then we--

00:39:17.185 --> 00:39:19.440
IAN: Yeah, we could
totally do that.

00:39:19.440 --> 00:39:21.630
So when you look up the--

00:39:21.630 --> 00:39:24.820
you're given the
constraints as input here--

00:39:24.820 --> 00:39:26.600
the area of
constraints with axis--

00:39:26.600 --> 00:39:29.030
so you can use anything
on the Constraints object

00:39:29.030 --> 00:39:32.615
to determine what
the geometry will be.

00:39:32.615 --> 00:39:34.070
FILIP: OK.

00:39:34.070 --> 00:39:37.600
So, constraints.

00:39:40.471 --> 00:39:42.720
IAN: And then you'll see we
have a number of features.

00:39:42.720 --> 00:39:45.170
So scrollOffset is one of them.

00:39:45.170 --> 00:39:51.170
scrollOffset is the distance
from the top of your Sliver--

00:39:51.170 --> 00:39:53.600
not the viewport, the
top of your Sliver--

00:39:53.600 --> 00:39:59.010
to the top of the first thing
on the screen that is visible.

00:39:59.010 --> 00:40:02.990
So right now, it's zero,
right, because the text

00:40:02.990 --> 00:40:06.980
is the first thing inside
the Widget that's visible,

00:40:06.980 --> 00:40:09.170
and it also happens to be
at the top of your Widget.

00:40:09.170 --> 00:40:13.550
But if you scroll your Widget
halfway off the screen,

00:40:13.550 --> 00:40:15.350
then the scrollOffset
will be the distance

00:40:15.350 --> 00:40:18.740
from where the box
would be scrolled off

00:40:18.740 --> 00:40:21.930
to the top of the screen.

00:40:21.930 --> 00:40:22.700
FILIP: How do I--

00:40:22.700 --> 00:40:25.962
so that's like-- now
that would be changing.

00:40:25.962 --> 00:40:27.837
IAN: Yeah, so now it's
changing [INAUDIBLE]..

00:40:27.837 --> 00:40:29.060
FILIP: OK.

00:40:29.060 --> 00:40:37.370
Do I ever know, like, where I
am right now in the, you know--

00:40:37.370 --> 00:40:40.780
I just want-- I just want
to make changes even now.

00:40:40.780 --> 00:40:41.720
IAN: Oh, I see.

00:40:41.720 --> 00:40:44.807
So we actually just, like,
yesterday, added this feature.

00:40:44.807 --> 00:40:46.640
I don't know if the
version you have has it.

00:40:46.640 --> 00:40:49.172
FILIP: No.

00:40:49.172 --> 00:40:50.630
If it's not there
yet, that's fine.

00:40:50.630 --> 00:40:51.400
I was just--

00:40:51.400 --> 00:40:53.480
IAN: We literally just
added this feature.

00:40:53.480 --> 00:40:55.460
It may not have landed yet.

00:40:55.460 --> 00:40:57.622
But yes, we were
looking at adding that.

00:40:57.622 --> 00:40:58.580
It's useful for things.

00:40:58.580 --> 00:41:03.770
Like on iOS, there
are some weird-- what

00:41:03.770 --> 00:41:06.260
the special specific effect
we were trying to do?

00:41:06.260 --> 00:41:08.490
I forget what it was
we needed it for,

00:41:08.490 --> 00:41:11.120
but yeah, we've just
added this feature.

00:41:11.120 --> 00:41:14.900
FILIP: All right, so so
I think I can just do--

00:41:14.900 --> 00:41:18.760
so what doubles do I need to--

00:41:18.760 --> 00:41:19.260
can I--

00:41:19.260 --> 00:41:22.910
IAN: So scrollOffset is a
good one to base things on.

00:41:22.910 --> 00:41:25.770
FILIP: And then I can do--

00:41:25.770 --> 00:41:26.860
oh, yeah.

00:41:26.860 --> 00:41:30.850
toInt isOdd.

00:41:33.750 --> 00:41:35.119
This will be weird.

00:41:35.119 --> 00:41:36.160
IAN: It'll be very weird.

00:41:36.160 --> 00:41:39.480
FILIP: And then, what can we do?

00:41:39.480 --> 00:41:42.780
IAN: So you could,
for example, change

00:41:42.780 --> 00:41:45.540
how much has scrolled,
based on whether it's odd.

00:41:49.380 --> 00:41:54.990
FILIP: So like-- yeah,
so if it's odd, then

00:41:54.990 --> 00:41:56.889
50, and otherwise 100?

00:41:56.889 --> 00:41:59.180
IAN: That's going to be very
strange, but let's try it.

00:41:59.180 --> 00:41:59.971
[INAUDIBLE] try it.

00:42:06.990 --> 00:42:08.695
It just had the next
child is jumping.

00:42:08.695 --> 00:42:10.320
So the reason the
next child is jumping

00:42:10.320 --> 00:42:13.290
is, when you're at
an odd scrollOffset,

00:42:13.290 --> 00:42:17.280
your next child is 50
pixels farther down,

00:42:17.280 --> 00:42:19.320
but you still have--

00:42:19.320 --> 00:42:23.784
you've consumed 100 pixels,
basically, of the scrollOffset.

00:42:23.784 --> 00:42:25.200
And so, the next
child has already

00:42:25.200 --> 00:42:27.310
scrolled 50 more pixels.

00:42:27.310 --> 00:42:32.730
Whereas when you're even,
you've consumed 100 pixels

00:42:32.730 --> 00:42:36.040
of the scrollOffset even though
you're only painting 50 pixels.

00:42:36.040 --> 00:42:39.800
FILIP: So what happens here
if I say maxPaintExtent?

00:42:45.080 --> 00:42:49.050
Again, a weird bug that
I haven't seen before,

00:42:49.050 --> 00:42:50.420
so I don't know what's going on.

00:42:55.170 --> 00:42:59.990
If I use this, this should just
not change the ScrollExtent,

00:42:59.990 --> 00:43:02.280
but change the actual--

00:43:02.280 --> 00:43:05.840
IAN: I'm actually not
sure what this will do.

00:43:05.840 --> 00:43:07.784
[INAUDIBLE] Yeah.

00:43:07.784 --> 00:43:09.200
So if we look at
the documentation

00:43:09.200 --> 00:43:13.070
for a SliverGeometry, we can
look at-- see exactly what--

00:43:13.070 --> 00:43:14.640
FILIP: Let's go to
the actual docs.

00:43:14.640 --> 00:43:18.720
IAN: We can see exactly
what maxPaintExtent does.

00:43:18.720 --> 00:43:20.730
So a lot of the things
on SliverGeometry--

00:43:20.730 --> 00:43:23.450
SliverGeometry-- a lot of
the things on SliverGeometry

00:43:23.450 --> 00:43:27.800
are used for very
specific cases,

00:43:27.800 --> 00:43:30.810
and so, often, you won't
see a direct effect.

00:43:30.810 --> 00:43:33.440
But if we look at
the maxPaintExtent

00:43:33.440 --> 00:43:38.270
and then look at the
full documentation,

00:43:38.270 --> 00:43:42.249
the estimated
total paint extent.

00:43:42.249 --> 00:43:44.540
Yes, so this is actually only
used for shrink wrapping.

00:43:44.540 --> 00:43:45.110
That's right.

00:43:45.110 --> 00:43:47.480
So the CustomScrollView
has a flag,

00:43:47.480 --> 00:43:49.457
that you can set on it,
that will shrink wrap.

00:43:49.457 --> 00:43:50.540
FILIP: What's shrink wrap?

00:43:50.540 --> 00:43:52.910
IAN: Shrink wrap
means it will only

00:43:52.910 --> 00:43:55.590
be as high as its contents.

00:43:55.590 --> 00:43:58.280
This is very
expensive, because it

00:43:58.280 --> 00:44:02.510
means that you have to measure
everything in the ScrollView.

00:44:02.510 --> 00:44:06.319
So it can-- and it can only
do it in the scroll axis

00:44:06.319 --> 00:44:08.360
directions, so if we're
vertically scrolling one,

00:44:08.360 --> 00:44:09.401
that means in the height.

00:44:09.401 --> 00:44:11.420
And the reason for
that is we know

00:44:11.420 --> 00:44:16.340
to stop once we reach
the height of the parent,

00:44:16.340 --> 00:44:18.620
so we don't need to
actually measure everything.

00:44:18.620 --> 00:44:22.020
If we were to do shrink
wrapping in the cross axis,

00:44:22.020 --> 00:44:24.560
we would literally have to
measure everything in the list

00:44:24.560 --> 00:44:27.290
to figure out what
the widest thing was.

00:44:27.290 --> 00:44:31.442
And that would be
really expensive.

00:44:31.442 --> 00:44:33.650
In fact, it might be
impossible, because the list can

00:44:33.650 --> 00:44:36.380
be infinite, so you might have
to measure infinite [INAUDIBLE]

00:44:36.380 --> 00:44:38.400
just to figure it out.

00:44:38.400 --> 00:44:40.335
So this one's not
interesting in our case.

00:44:40.335 --> 00:44:41.960
The ones that are
interesting are often

00:44:41.960 --> 00:44:46.070
the layoutExtent
and paintExtent.

00:44:46.070 --> 00:44:47.900
PaintOrigin is also a fun one.

00:44:52.250 --> 00:44:55.490
Try changing the paintOrigin
and all the paintExtent.

00:44:55.490 --> 00:44:57.740
paintOrigin will
decide where the child

00:44:57.740 --> 00:45:02.720
is going to start
painting, relative to where

00:45:02.720 --> 00:45:04.829
it should start painting.

00:45:04.829 --> 00:45:06.620
You can remove the
maxPaintExtent entirely.

00:45:06.620 --> 00:45:11.390
I think it just defaults
to the paintExtent, or not.

00:45:11.390 --> 00:45:16.280
FILIP: Yeah, [INAUDIBLE]
before today [INAUDIBLE]

00:45:16.280 --> 00:45:17.520
So, paintOrigin.

00:45:17.520 --> 00:45:20.205
IAN: Yeah, let's try
[INAUDIBLE] paintOrigin.

00:45:20.205 --> 00:45:21.830
So you could do
something really crazy.

00:45:21.830 --> 00:45:23.950
Pass in just the
constraints.scrollOffset

00:45:23.950 --> 00:45:25.038
as the paintOrigin.

00:45:28.930 --> 00:45:29.430
FILIP: OK.

00:45:36.270 --> 00:45:36.970
It just--

00:45:36.970 --> 00:45:40.210
IAN: So now it's always
going to stay at the top,

00:45:40.210 --> 00:45:43.390
because as you scroll it
farther off the screen

00:45:43.390 --> 00:45:46.270
it's getting pushed
down more and more.

00:45:46.270 --> 00:45:48.730
That's essentially how
floating AppBars work.

00:45:48.730 --> 00:45:51.270
I'm sorry, the pinned
AppBars, not floating AppBars.

00:45:51.270 --> 00:45:54.080
FILIP: Can I do
a negative value?

00:45:54.080 --> 00:45:58.631
IAN: Yeah, you should get
really weird effects with that.

00:45:58.631 --> 00:45:59.130
FILIP: Yeah.

00:45:59.130 --> 00:46:01.430
IAN: Because now it's
going twice as fast.

00:46:01.430 --> 00:46:05.511
Now try doing, like, times
two instead of negative.

00:46:07.834 --> 00:46:08.500
FILIP: Oh, yeah.

00:46:08.500 --> 00:46:09.791
That's going to be interesting.

00:46:16.152 --> 00:46:18.144
I have no idea what's going on.

00:46:31.630 --> 00:46:33.880
OK, so we have times two now.

00:46:39.820 --> 00:46:41.100
I love it.

00:46:41.100 --> 00:46:45.880
OK, I think that this is
[INAUDIBLE] enough for me.

00:46:45.880 --> 00:46:50.466
IAN: And so, as you fiddle
with these different arguments

00:46:50.466 --> 00:46:52.090
on SliverGeometry--
particularly if you

00:46:52.090 --> 00:46:56.334
make them relative to some of
the values on scrollOffset--

00:46:56.334 --> 00:46:58.000
you know, multiplying
them, adding them,

00:46:58.000 --> 00:47:00.700
stuff like that-- you can
get some very odd effects.

00:47:00.700 --> 00:47:04.500
This was particular fun when I
was trying to implement AppBar,

00:47:04.500 --> 00:47:05.430
and I would--

00:47:05.430 --> 00:47:07.010
you know, I was just coming
up with these things,

00:47:07.010 --> 00:47:08.590
so I didn't know exactly
how they worked or anything.

00:47:08.590 --> 00:47:09.550
And I would, like, put them in.

00:47:09.550 --> 00:47:11.587
I still don't really know
exactly how they work.

00:47:11.587 --> 00:47:12.420
I would put them in.

00:47:12.420 --> 00:47:13.630
Like, I think I've
got the right math.

00:47:13.630 --> 00:47:15.130
And I would put in the
math, and I would scroll.

00:47:15.130 --> 00:47:16.900
And then, like, the
thing would go up.

00:47:16.900 --> 00:47:19.590
The AppBar would go down, and
then the AppBar would shrink.

00:47:19.590 --> 00:47:21.710
Like, what is happening?

00:47:21.710 --> 00:47:24.190
So you can definitely get
some very strange effects.

00:47:24.190 --> 00:47:24.960
FILIP: All right.

00:47:24.960 --> 00:47:27.670
Oh, I think that's
where we end unless you

00:47:27.670 --> 00:47:34.070
have any other crazy
examples, but I like that.

00:47:34.070 --> 00:47:36.460
So we've covered today--

00:47:36.460 --> 00:47:39.670
what we've got today
is many widgets

00:47:39.670 --> 00:47:44.260
that you, use like
GridView, ListView, AppBars,

00:47:44.260 --> 00:47:48.350
all somehow use
Slivers inside them.

00:47:48.350 --> 00:47:51.910
You don't need to understand
Slivers to use them,

00:47:51.910 --> 00:47:55.580
but then if you want to do
something crazy you can.

00:47:55.580 --> 00:48:02.290
And to do that, you
would typically extend,

00:48:02.290 --> 00:48:05.500
somehow, this RenderSliver--

00:48:05.500 --> 00:48:08.534
either this thing
or something else.

00:48:08.534 --> 00:48:10.450
IAN: My recommendation
would be literally just

00:48:10.450 --> 00:48:13.810
go to the RenderSliver docs, and
the RenderSliver docs will walk

00:48:13.810 --> 00:48:16.450
you through how to build these?

00:48:16.450 --> 00:48:18.292
What parts are important?

00:48:18.292 --> 00:48:19.750
And then as you
want to figure out,

00:48:19.750 --> 00:48:22.330
like, what the various
constraints and geometry

00:48:22.330 --> 00:48:25.380
attributes are,
go to the render--

00:48:25.380 --> 00:48:27.760
go to the SliverConstraints
and SliverGeometry docs

00:48:27.760 --> 00:48:28.510
and look at those.

00:48:28.510 --> 00:48:30.190
Like you for each
one, we've attempted

00:48:30.190 --> 00:48:33.894
to describe what
they actually do.

00:48:33.894 --> 00:48:36.310
If there any that don't make
any sense, please file a bug,

00:48:36.310 --> 00:48:37.852
and we'll try to improve it.

00:48:37.852 --> 00:48:38.560
FILIP: All right.

00:48:38.560 --> 00:48:39.830
Well, thanks for watching.

00:48:39.830 --> 00:48:43.570
If you have any questions,
use comments after the video,

00:48:43.570 --> 00:48:47.500
or I think we have a
hashtag #BoringShow.

00:48:47.500 --> 00:48:50.110
And yeah, see you next time.

00:48:50.110 --> 00:48:55.560
[MUSIC PLAYING]

