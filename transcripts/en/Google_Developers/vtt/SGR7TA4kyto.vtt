WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.832
[MUSIC PLAYING]

00:00:48.180 --> 00:00:49.200
BILL LUAN: --developer
community.

00:00:49.200 --> 00:00:50.030
SUSANNAH RAUB: I'm
glad somebody

00:00:50.030 --> 00:00:51.300
has asked this question.

00:00:51.300 --> 00:00:52.543
RETO MEIER: This is where
the magic happens.

00:00:52.543 --> 00:00:54.020
JENNY MURPHY: This is primarily
a question and

00:00:54.020 --> 00:00:55.520
answer show, so if any
of you out there

00:00:55.520 --> 00:00:56.770
would like to ask questions.

00:01:02.260 --> 00:01:04.550
ERIC GILMORE: Hello, I'm Eric
Gilmore, technical writer for

00:01:04.550 --> 00:01:06.450
the Google Drive SDK.

00:01:06.450 --> 00:01:08.850
And I'm here today
with Ali Afshar,

00:01:08.850 --> 00:01:11.100
engineer for Google Drive.

00:01:11.100 --> 00:01:12.230
We're going to talk
a little bit about

00:01:12.230 --> 00:01:14.310
downloads in Google Drive.

00:01:14.310 --> 00:01:14.890
Aren't we, Ali?

00:01:14.890 --> 00:01:15.870
ALI AFSHAR: Yeah,
that's right.

00:01:15.870 --> 00:01:21.100
So in my mind, downloads is one
of the two major use cases

00:01:21.100 --> 00:01:22.440
of the Google Drive SDK.

00:01:22.440 --> 00:01:25.570
Google Drive SDK allows
you to manage your

00:01:25.570 --> 00:01:27.250
files in Google Drive.

00:01:27.250 --> 00:01:28.500
It manages user files.

00:01:31.200 --> 00:01:32.640
Now, you can get them in.

00:01:32.640 --> 00:01:34.970
Downloading allows you
to get them out.

00:01:34.970 --> 00:01:39.700
And we have three different
ways of downloading files.

00:01:39.700 --> 00:01:42.420
And today, we're going to go
through, in a bit of an

00:01:42.420 --> 00:01:45.760
interactive way, using a Python
shell to make some of

00:01:45.760 --> 00:01:48.310
these requests, and have a look
at some of the responses,

00:01:48.310 --> 00:01:51.310
and see how to download files.

00:01:51.310 --> 00:01:52.455
ERIC GILMORE: Viewers, you
are in for a treat.

00:01:52.455 --> 00:01:55.630
Ali is going to weave some
Python spells for us.

00:01:55.630 --> 00:01:56.540
ALI AFSHAR: Yes.

00:01:56.540 --> 00:01:58.540
Something like that.

00:01:58.540 --> 00:02:01.290
So should we get started
straight away?

00:02:01.290 --> 00:02:01.710
ERIC GILMORE: Why not?

00:02:01.710 --> 00:02:02.780
ALI AFSHAR: OK, cool.

00:02:02.780 --> 00:02:06.680
So the first thing we're
going to do is the most

00:02:06.680 --> 00:02:08.000
standard use case.

00:02:08.000 --> 00:02:09.400
A file is in Google Drive.

00:02:09.400 --> 00:02:11.970
And we'd like to download
it with the API.

00:02:11.970 --> 00:02:14.840
So this is without any
user interaction.

00:02:14.840 --> 00:02:17.210
Now, I've got a Python
shell open here.

00:02:17.210 --> 00:02:18.380
I'm not sure you can see it.

00:02:18.380 --> 00:02:21.830
It uses bpython, which is
a bit nicer than Python.

00:02:21.830 --> 00:02:23.860
It gives you co-completion and
other things like that.

00:02:23.860 --> 00:02:25.585
I recommend you try it.

00:02:25.585 --> 00:02:27.890
It has a good history and
that kind of thing.

00:02:27.890 --> 00:02:30.560
So one thing you haven't
seen me do is I've

00:02:30.560 --> 00:02:33.410
created an auth molecule.

00:02:33.410 --> 00:02:38.360
And inside my auth molecule, I
perform all the authorization

00:02:38.360 --> 00:02:39.330
that's required for this.

00:02:39.330 --> 00:02:40.690
So I've done that in
the background.

00:02:40.690 --> 00:02:42.110
We're not going to deal
with any auth today.

00:02:45.030 --> 00:02:49.460
So I just import that, and that
HTTP is an instance which

00:02:49.460 --> 00:02:51.240
is already authorized.

00:02:51.240 --> 00:02:53.510
It's already got the correct
credentials.

00:02:53.510 --> 00:02:56.175
And I'm going to create a
drive service from this.

00:02:56.175 --> 00:03:02.235
So from API client, discovery
import build.

00:03:02.235 --> 00:03:29.845
[MUSIC PLAYING]

00:03:29.845 --> 00:03:31.590
ERIC GILMORE: Does Drive
service operate as one?

00:03:31.590 --> 00:03:32.870
ALI AFSHAR: That's exactly
what it is.

00:03:32.870 --> 00:03:33.310
ERIC GILMORE: OK.

00:03:33.310 --> 00:03:33.440
ALI AFSHAR: OK.

00:03:33.440 --> 00:03:36.730
Because we've passed in the
authorized HTTP instance and

00:03:36.730 --> 00:03:37.850
that's made it authorized.

00:03:37.850 --> 00:03:40.830
So all the future calls will
have the correct token

00:03:40.830 --> 00:03:43.360
associated there.

00:03:43.360 --> 00:03:45.535
Right, so should we make
a call to the API?

00:03:45.535 --> 00:03:46.600
ERIC GILMORE: Let's do.

00:03:46.600 --> 00:03:47.470
ALI AFSHAR: So Drive--

00:03:47.470 --> 00:03:48.190
ERIC GILMORE: But we're not
going to make one call,

00:03:48.190 --> 00:03:49.115
though, are we?

00:03:49.115 --> 00:03:50.560
ALI AFSHAR: Well, we'll
make a few.

00:03:50.560 --> 00:03:52.148
We'll make a few.

00:03:52.148 --> 00:04:28.704
[MUSIC PLAYING]

00:04:28.704 --> 00:04:30.680
ALI AFSHAR: So that's
my document.

00:04:30.680 --> 00:04:32.162
That's a good one for
me to download

00:04:32.162 --> 00:04:34.138
for our second example.

00:04:34.138 --> 00:04:37.100
And let's look at
the second file.

00:04:39.875 --> 00:04:42.290
And that's an image, so
another good one.

00:04:42.290 --> 00:04:44.222
We're going to use that
for our first example.

00:04:53.950 --> 00:04:56.600
ERIC GILMORE: So for the first
example, we're going to

00:04:56.600 --> 00:04:59.790
retrieve the download URL and
perform a simple download.

00:04:59.790 --> 00:05:00.550
Is that right, Ali?

00:05:00.550 --> 00:05:00.980
ALI AFSHAR: That's right.

00:05:00.980 --> 00:05:01.790
That's exactly right.

00:05:01.790 --> 00:05:05.060
So once we've got this thing,
we need to look at the

00:05:05.060 --> 00:05:08.670
download URL inside our file.

00:05:08.670 --> 00:05:12.810
And you can see there, that's
a reasonably long URL.

00:05:12.810 --> 00:05:16.170
It's important to know this
is not a permanent URL.

00:05:16.170 --> 00:05:19.000
This will not last forever.

00:05:19.000 --> 00:05:22.210
So each time you want to use it,
you should really get the

00:05:22.210 --> 00:05:25.640
metadata, find the download
URL from the metadata, and

00:05:25.640 --> 00:05:27.480
then use it from there.

00:05:27.480 --> 00:05:29.050
How long does it last?

00:05:29.050 --> 00:05:30.240
I'd say a few hours.

00:05:30.240 --> 00:05:33.200
But to be safe, I would make the
request, get the download

00:05:33.200 --> 00:05:34.800
URL, and then use it.

00:05:34.800 --> 00:05:40.760
So url=f2 downloadUrl.

00:05:40.760 --> 00:05:42.570
OK, and we've got
this URL here.

00:05:42.570 --> 00:05:43.380
Now how do we get it?

00:05:43.380 --> 00:05:45.340
We have to make an authorized
get request.

00:05:45.340 --> 00:05:48.030
So as I've told you, the HTTP
instance is already

00:05:48.030 --> 00:05:48.940
authorized.

00:05:48.940 --> 00:05:52.430
So I just need to pass
that to HTTP request.

00:05:52.430 --> 00:05:56.090
And that returns a two
pull of the response

00:05:56.090 --> 00:05:57.890
headers and the content.

00:05:57.890 --> 00:05:59.230
So we'll do that request.

00:05:59.230 --> 00:05:59.810
It's going away.

00:05:59.810 --> 00:06:00.910
It's downloaded.

00:06:00.910 --> 00:06:03.090
We can look at the
headers here.

00:06:03.090 --> 00:06:04.610
OK, it doesn't really
tell you much.

00:06:07.490 --> 00:06:09.410
The status header is
injected for you.

00:06:09.410 --> 00:06:12.210
So you see we've got a 200.

00:06:12.210 --> 00:06:14.680
You should have a file
name in there.

00:06:14.680 --> 00:06:21.260
So r content disposition
is there.

00:06:21.260 --> 00:06:25.520
So that tells you what the file
name should be and what

00:06:25.520 --> 00:06:27.100
the various content types are.

00:06:30.430 --> 00:06:32.310
Well, we can't actually
look at the

00:06:32.310 --> 00:06:33.660
binary data of the file.

00:06:33.660 --> 00:06:34.030
Why?

00:06:34.030 --> 00:06:36.960
Because that would mess
up this terminal.

00:06:36.960 --> 00:06:39.940
So let's look and see
how long it is.

00:06:39.940 --> 00:06:41.050
ERIC GILMORE: We have ways
of viewing it there.

00:06:41.050 --> 00:06:42.420
ALI AFSHAR: We have ways
of viewing it.

00:06:42.420 --> 00:06:47.000
So it's 316K, 317K big.

00:06:47.000 --> 00:06:48.510
So we're not going to pipe
that to a terminal.

00:06:48.510 --> 00:06:51.415
What we will do is
open a file.

00:06:54.175 --> 00:06:57.470
Let's open it in binary
right format,

00:06:57.470 --> 00:07:02.920
f.write(c) and f.close.

00:07:02.920 --> 00:07:06.000
Now, in the terminal, we
have limited options.

00:07:06.000 --> 00:07:09.090
So we'll just jump out of
that shell and have

00:07:09.090 --> 00:07:10.320
a look at the file.

00:07:10.320 --> 00:07:11.140
What do you think, Eric?

00:07:11.140 --> 00:07:11.990
Do you think that's
going to work?

00:07:11.990 --> 00:07:13.000
ERIC GILMORE: I would love
to look at the file.

00:07:13.000 --> 00:07:18.180
ALI AFSHAR: OK, image
to text, maybe?

00:07:18.180 --> 00:07:19.430
Img2txt.

00:07:26.950 --> 00:07:30.610
That's right, im2txt,
with no zero.

00:07:30.610 --> 00:07:33.230
So we look at that, and
there's the file.

00:07:33.230 --> 00:07:34.850
What does that look
like to you, Eric?

00:07:34.850 --> 00:07:36.550
ERIC GILMORE: That looks like
what I see after drinking a

00:07:36.550 --> 00:07:37.536
bottle of wine.

00:07:37.536 --> 00:07:38.450
ALI AFSHAR: [LAUGHS]

00:07:38.450 --> 00:07:39.890
OK, well.

00:07:39.890 --> 00:07:41.300
Let's go to Google Drive.

00:07:41.300 --> 00:07:43.300
And let's have a look at what
that file actually is.

00:07:43.300 --> 00:07:46.010
There you go, it's my neighbor's
dog, who's making a

00:07:46.010 --> 00:07:48.260
few appearances in
these Hangouts.

00:07:48.260 --> 00:07:48.790
But there you go.

00:07:48.790 --> 00:07:50.300
So that's the image.

00:07:50.300 --> 00:07:52.710
I've showed you how to download
it using the download

00:07:52.710 --> 00:07:55.970
URL, and then how to save it
just by opening a file in

00:07:55.970 --> 00:07:58.180
binary format, writing
that file, and then

00:07:58.180 --> 00:07:58.950
you can look at it.

00:07:58.950 --> 00:08:00.290
It's on your local system.

00:08:00.290 --> 00:08:02.342
OK, back to the shell.

00:08:02.342 --> 00:08:04.380
ERIC GILMORE: Can I say, just in
simplest terms, you've done

00:08:04.380 --> 00:08:05.110
two things.

00:08:05.110 --> 00:08:06.740
You've retrieved the
download URL.

00:08:06.740 --> 00:08:08.380
You've used it to retrieve
the file.

00:08:08.380 --> 00:08:09.210
ALI AFSHAR: Exactly right.

00:08:09.210 --> 00:08:10.920
ERIC GILMORE: To really boil
it down to the high level--

00:08:10.920 --> 00:08:11.330
ALI AFSHAR: Exactly.

00:08:11.330 --> 00:08:12.230
ERIC GILMORE: That's
what you did.

00:08:12.230 --> 00:08:14.310
ALI AFSHAR: Can you think of
any use cases for this?

00:08:14.310 --> 00:08:15.760
When would you use this?

00:08:15.760 --> 00:08:17.030
ERIC GILMORE: When would
you download a file?

00:08:17.030 --> 00:08:18.020
ALI AFSHAR: Yeah.

00:08:18.020 --> 00:08:19.850
ERIC GILMORE: Oh my word.

00:08:19.850 --> 00:08:22.390
I think we have a number of
drive apps that are doing this

00:08:22.390 --> 00:08:23.590
currently, don't we?

00:08:23.590 --> 00:08:24.840
ALI AFSHAR: Exactly right.

00:08:24.840 --> 00:08:27.660
But say, for example, you've got
a sync client, or you just

00:08:27.660 --> 00:08:29.930
want to make a backup
of your drive.

00:08:29.930 --> 00:08:31.690
That's the kind of time where
you would use that.

00:08:31.690 --> 00:08:33.190
ERIC GILMORE: To isolate
this use case.

00:08:33.190 --> 00:08:33.500
ALI AFSHAR: Exactly.

00:08:33.500 --> 00:08:34.000
ERIC GILMORE: Perfect,
perfect.

00:08:34.000 --> 00:08:34.929
ALI AFSHAR: Exactly.

00:08:34.929 --> 00:08:35.309
Right.

00:08:35.309 --> 00:08:36.679
On to the next use case.

00:08:36.679 --> 00:08:39.940
And that will be exporting
Google Docs files.

00:08:39.940 --> 00:08:43.480
Now, Google Docs files don't
have binary content.

00:08:43.480 --> 00:08:46.000
OK, that kind of makes sense.

00:08:46.000 --> 00:08:47.770
We don't expose the
binary formats.

00:08:47.770 --> 00:08:49.450
We don't expose the raw data.

00:08:49.450 --> 00:08:54.540
What you can do is download an
export of the Google Doc into

00:08:54.540 --> 00:08:56.710
one of the formats that you can
handle, and then you can

00:08:56.710 --> 00:08:58.800
understand, OK?

00:08:58.800 --> 00:09:04.450
So what we're going to use is
a Google Doc document, and

00:09:04.450 --> 00:09:07.420
we're going to export it as
plain text or text HTML.

00:09:07.420 --> 00:09:09.920
And we're going to have
a look at that here.

00:09:09.920 --> 00:09:12.160
So slightly different
procedure.

00:09:12.160 --> 00:09:14.470
The second part will be the
same, actually, downloading,

00:09:14.470 --> 00:09:18.060
but the first part, where
do you get the URL?

00:09:18.060 --> 00:09:29.900
Well, inside the metadata for
a Google Doc, you have a

00:09:29.900 --> 00:09:32.320
dictionary called
export links.

00:09:32.320 --> 00:09:34.930
And the keys of the dictionary
are the MIME types.

00:09:34.930 --> 00:09:37.690
And the values of the dictionary
are the URL where

00:09:37.690 --> 00:09:39.640
you can get the document
for that MIME type.

00:09:39.640 --> 00:09:41.440
So let's have a look.

00:09:41.440 --> 00:09:42.690
ExportLinks.keys.

00:09:45.980 --> 00:09:49.180
So you can see the various MIME
types that we support

00:09:49.180 --> 00:09:52.860
there-- text/html,
application/pdf, et cetera.

00:09:52.860 --> 00:09:58.130
And if you look at the values,
you'll see they are URLs

00:09:58.130 --> 00:10:00.110
almost similar to
each other, with

00:10:00.110 --> 00:10:01.940
exportFormat being different.

00:10:01.940 --> 00:10:04.250
OK, so in theory, you could
generate these URLs.

00:10:04.250 --> 00:10:06.210
We advise that you don't do
that because we make no

00:10:06.210 --> 00:10:08.790
guarantee that this
format will remain

00:10:08.790 --> 00:10:10.400
constant like this.

00:10:10.400 --> 00:10:12.750
So we're going to
use exportLinks.

00:10:12.750 --> 00:10:14.440
What should we go for, Eric?

00:10:14.440 --> 00:10:16.450
ERIC GILMORE: Did you want to
go for plain text or HTML?

00:10:16.450 --> 00:10:17.130
ALI AFSHAR: Let's go for HTML.

00:10:17.130 --> 00:10:17.810
ERIC GILMORE: OK.

00:10:17.810 --> 00:10:20.820
By the way, there's a table
describing all the mapping of

00:10:20.820 --> 00:10:24.750
the formats in our Downloads
topic on the Drive SDK

00:10:24.750 --> 00:10:25.540
documentation.

00:10:25.540 --> 00:10:28.020
So if you don't like the way
they're listed on Ali's

00:10:28.020 --> 00:10:29.950
screen, we have a prettier
list for you.

00:10:29.950 --> 00:10:30.590
ALI AFSHAR: Yeah.

00:10:30.590 --> 00:10:31.770
Yes, sorry about that.

00:10:31.770 --> 00:10:33.540
There is a nice list.

00:10:33.540 --> 00:10:37.340
One caveat, it's worth checking
the actual metadata

00:10:37.340 --> 00:10:40.900
of each file, because some
files specifically can or

00:10:40.900 --> 00:10:45.150
can't download in different
formats.

00:10:45.150 --> 00:10:46.750
ERIC GILMORE: And again, you'll
always have the very

00:10:46.750 --> 00:10:48.630
latest, up-to-date information
that way, too.

00:10:48.630 --> 00:10:51.560
ALI AFSHAR: Exactly.

00:10:51.560 --> 00:10:55.350
So there's the URL we're
going to use.

00:10:55.350 --> 00:11:02.190
And again, we're going to
http.request, the URL.

00:11:02.190 --> 00:11:06.680
And that returns a two pull, as
always, of the response and

00:11:06.680 --> 00:11:07.540
the content.

00:11:07.540 --> 00:11:08.750
And we've done that quickly.

00:11:08.750 --> 00:11:10.620
Let's have a look
at our response

00:11:10.620 --> 00:11:12.920
status, 200, fantastic.

00:11:12.920 --> 00:11:15.530
And the content, what
do you reckon?

00:11:15.530 --> 00:11:16.700
Should we just dump that
to the screen?

00:11:16.700 --> 00:11:20.420
We can this time because it's
just a text format, HTML.

00:11:20.420 --> 00:11:22.720
And there you go, a
big chunk of HTML.

00:11:22.720 --> 00:11:25.600
So as before, open(index).

00:11:28.720 --> 00:11:31.780
We're going to save the file
on the local machine.

00:11:31.780 --> 00:11:33.450
And we're going to have
a look at it.

00:11:33.450 --> 00:11:34.080
Does that sound good?

00:11:34.080 --> 00:11:34.520
ERIC GILMORE: Sure.

00:11:34.520 --> 00:11:38.120
Can you view it in
the shell here?

00:11:38.120 --> 00:11:39.000
ALI AFSHAR: We can try.

00:11:39.000 --> 00:11:43.810
I think we can find a text-based
browser here.

00:11:43.810 --> 00:11:51.230
So open that, f.write(c)
and f.close.

00:11:51.230 --> 00:11:51.940
OK, good.

00:11:51.940 --> 00:11:53.465
Let's jump out of the shell.

00:11:53.465 --> 00:11:54.320
Let's have a look.

00:11:54.320 --> 00:12:00.080
W3m index.hml and
there you go.

00:12:00.080 --> 00:12:01.410
So that's my document.

00:12:01.410 --> 00:12:03.140
It says, hello world.

00:12:03.140 --> 00:12:06.530
Just convince to the people who
are not convinced easily,

00:12:06.530 --> 00:12:09.130
I'm one of you, by the way.

00:12:09.130 --> 00:12:10.260
I don't convince easily.

00:12:10.260 --> 00:12:12.660
But there's my document.

00:12:12.660 --> 00:12:16.740
And as you see it, it's
exported it as HTML.

00:12:16.740 --> 00:12:21.180
So that's the second
way of doing this.

00:12:21.180 --> 00:12:22.990
It's the second type
of download.

00:12:22.990 --> 00:12:25.510
And when might you want
to use that, Eric?

00:12:25.510 --> 00:12:27.460
ERIC GILMORE: When would I want
to use an export URL?

00:12:27.460 --> 00:12:28.060
ALI AFSHAR: Yeah.

00:12:28.060 --> 00:12:30.660
ERIC GILMORE: Any time when I'd
like to have a Google Doc,

00:12:30.660 --> 00:12:33.430
spreadsheet, some supported
format in a different formats

00:12:33.430 --> 00:12:35.740
that's more appropriate
for my application.

00:12:35.740 --> 00:12:36.910
ALI AFSHAR: OK, brilliant.

00:12:36.910 --> 00:12:39.210
Or if you ever want to download
it or save it offline

00:12:39.210 --> 00:12:40.180
or anything like that.

00:12:40.180 --> 00:12:40.880
ERIC GILMORE: For saving
it offline.

00:12:40.880 --> 00:12:42.410
ALI AFSHAR: Yes.

00:12:42.410 --> 00:12:45.210
So that is using the
export links.

00:12:45.210 --> 00:12:47.360
Now, that's two of
our methods down.

00:12:47.360 --> 00:12:49.750
First one, download URL
for normal files.

00:12:49.750 --> 00:12:53.640
Second one, export links
for Google Docs.

00:12:53.640 --> 00:12:56.340
And the third way we're going
to show you how to download

00:12:56.340 --> 00:12:59.550
things is slightly different
from the other two.

00:12:59.550 --> 00:13:03.330
Now, this provides you with
a link, again, a URL

00:13:03.330 --> 00:13:04.180
that you can use.

00:13:04.180 --> 00:13:07.090
But instead of using it through
the API with API

00:13:07.090 --> 00:13:10.190
authorization, this link
can be given to a user.

00:13:10.190 --> 00:13:13.490
And the link uses the user's
own cookie auth, if they're

00:13:13.490 --> 00:13:18.010
signed into Google, to authorize
the file access.

00:13:18.010 --> 00:13:20.520
So they authenticate and
authorize differently.

00:13:20.520 --> 00:13:22.840
But this allows a user to
download it in the browser.

00:13:22.840 --> 00:13:24.050
When might that be useful?

00:13:24.050 --> 00:13:26.800
Well, you want to allow
a user to download

00:13:26.800 --> 00:13:28.570
one of their files.

00:13:28.570 --> 00:13:30.400
It's a huge video file.

00:13:30.400 --> 00:13:32.450
It may be a few gigabytes big.

00:13:32.450 --> 00:13:35.650
You don't want to download that
to your server and then

00:13:35.650 --> 00:13:36.450
send it to the user.

00:13:36.450 --> 00:13:37.950
You don't even want to
stream that across.

00:13:37.950 --> 00:13:39.940
You just give them
the right URL.

00:13:39.940 --> 00:13:41.220
And if they're logged
in, they download

00:13:41.220 --> 00:13:42.000
that to their browser.

00:13:42.000 --> 00:13:45.530
They may be using one of the
downloading utilities.

00:13:45.530 --> 00:13:46.610
So that all works there.

00:13:46.610 --> 00:13:49.460
So really useful, but
slightly different.

00:13:49.460 --> 00:13:52.870
It's when you want to provide
that option to the user.

00:13:52.870 --> 00:13:54.760
ERIC GILMORE: Sure, and it's
not correct to say that you

00:13:54.760 --> 00:13:57.250
can provide this to an
unauthorized user?

00:13:57.250 --> 00:13:59.690
ALI AFSHAR: So public files,
a file it doesn't need

00:13:59.690 --> 00:14:01.180
authorization, then
you can do that.

00:14:01.180 --> 00:14:01.870
ERIC GILMORE: Right, OK.

00:14:01.870 --> 00:14:02.680
ALI AFSHAR: OK.

00:14:02.680 --> 00:14:07.490
But I guess that's one of the
use cases, but not principally

00:14:07.490 --> 00:14:08.390
the use case here.

00:14:08.390 --> 00:14:09.760
ERIC GILMORE: Right, OK.

00:14:09.760 --> 00:14:11.600
ALI AFSHAR: This is better for
big files, or files where you

00:14:11.600 --> 00:14:14.050
just don't even want to get
involved in downloading it.

00:14:14.050 --> 00:14:18.540
The user just needs to be able
to download that themselves.

00:14:18.540 --> 00:14:20.210
So that's have a look at how
we're going to use that.

00:14:20.210 --> 00:14:22.410
So again, we're going
to use our image.

00:14:22.410 --> 00:14:23.690
Let's just check whether
it's the right one.

00:14:23.690 --> 00:14:25.520
Yep, 0.jpg.

00:14:25.520 --> 00:14:30.890
And in there, you will see
that there's an attribute

00:14:30.890 --> 00:14:34.470
called the web content link.

00:14:34.470 --> 00:14:36.420
So that's just another
attribute there.

00:14:36.420 --> 00:14:39.164
And we set that to that.

00:14:49.300 --> 00:14:51.786
ERIC GILMORE: If we were human
beings talking, or robots.

00:14:51.786 --> 00:14:54.130
MALE SPEAKER: And you
are back, Ali.

00:14:54.130 --> 00:14:54.890
ALI AFSHAR: I'm back.

00:14:54.890 --> 00:14:55.780
MALE SPEAKER: You're back.

00:14:55.780 --> 00:14:56.370
ALI AFSHAR: Hi, everyone.

00:14:56.370 --> 00:14:58.860
Sorry about that brief
interruption.

00:14:58.860 --> 00:15:00.990
But we're back.

00:15:00.990 --> 00:15:03.940
So I just showed you how to get
the web content link out

00:15:03.940 --> 00:15:05.420
of a file's metadata.

00:15:05.420 --> 00:15:07.720
And now I'm going to show
you how to use that.

00:15:07.720 --> 00:15:09.210
There we go, as if we haven't
put it on the

00:15:09.210 --> 00:15:10.660
screen enough times.

00:15:10.660 --> 00:15:12.960
There's the URL.

00:15:12.960 --> 00:15:15.960
And as I said, it's going
to use my browser's own

00:15:15.960 --> 00:15:17.410
authorization.

00:15:17.410 --> 00:15:18.480
You can see that
this browser--

00:15:18.480 --> 00:15:20.295
I'm already logged in.

00:15:20.295 --> 00:15:22.350
I'm already looking
at the file.

00:15:22.350 --> 00:15:25.190
So it won't ask me
to any further.

00:15:25.190 --> 00:15:30.240
So I do that, and it pops
up this download thing.

00:15:30.240 --> 00:15:31.770
And there we go.

00:15:31.770 --> 00:15:32.920
There's the picture
of the dog.

00:15:32.920 --> 00:15:36.350
So in that case, I download
it directly in my browser,

00:15:36.350 --> 00:15:38.640
because I was authorized,
and I have

00:15:38.640 --> 00:15:41.530
access to view the file.

00:15:41.530 --> 00:15:44.045
So those are our three methods
of downloading.

00:15:46.650 --> 00:15:47.720
Do you want to recap
them, Eric?

00:15:47.720 --> 00:15:48.050
ERIC GILMORE: Sure.

00:15:48.050 --> 00:15:50.690
They're download URL--

00:15:50.690 --> 00:15:52.840
just to make sure I
get this right--

00:15:52.840 --> 00:15:57.000
export links, and web
content link.

00:15:57.000 --> 00:15:58.180
ALI AFSHAR: That's
exactly right.

00:15:58.180 --> 00:16:03.520
So download URL, downloading
binary files in your browser,

00:16:03.520 --> 00:16:07.370
export links for downloading
exported versions of Google

00:16:07.370 --> 00:16:12.340
Docs using the API, and web
content link for downloading

00:16:12.340 --> 00:16:14.144
in the browser.

00:16:14.144 --> 00:16:15.630
ERIC GILMORE: It's a pretty
simple two-step dance.

00:16:15.630 --> 00:16:19.550
Retrieve the URL appropriately
for your use case, from those

00:16:19.550 --> 00:16:20.780
three that we just listed.

00:16:20.780 --> 00:16:22.720
And then get the content.

00:16:22.720 --> 00:16:23.300
ALI AFSHAR: Perfect.

00:16:23.300 --> 00:16:26.150
Now we have additional, slightly
advanced features in

00:16:26.150 --> 00:16:26.960
downloading.

00:16:26.960 --> 00:16:29.830
We support partial downloads,
if you want to split up the

00:16:29.830 --> 00:16:33.530
download into lots of chunks, or
you want to do half now and

00:16:33.530 --> 00:16:36.770
half later, or you fail halfway
through a download and

00:16:36.770 --> 00:16:37.720
you want to resume.

00:16:37.720 --> 00:16:39.440
We support these kind
of features.

00:16:39.440 --> 00:16:40.950
That's all in our
documentation.

00:16:40.950 --> 00:16:42.720
We advise you to
check that out.

00:16:42.720 --> 00:16:44.720
ERIC GILMORE: I have a couple of
questions about things that

00:16:44.720 --> 00:16:46.330
we support or don't, Ali.

00:16:46.330 --> 00:16:48.410
Would you like to field
a question?

00:16:48.410 --> 00:16:49.410
ALI AFSHAR: Sure.

00:16:49.410 --> 00:16:49.970
ERIC GILMORE: All right.

00:16:49.970 --> 00:16:52.330
I'm not sure what this
means, transloading.

00:16:52.330 --> 00:16:55.980
Let's talk about transloading.

00:16:55.980 --> 00:16:58.900
This individual wants a user to
click on a button on a page

00:16:58.900 --> 00:17:02.870
hosted by user y, which copies
the files from user y's drive

00:17:02.870 --> 00:17:04.369
to user x's drive.

00:17:04.369 --> 00:17:04.720
ALI AFSHAR: OK.

00:17:04.720 --> 00:17:05.380
ERIC GILMORE: And vice versa.

00:17:05.380 --> 00:17:06.630
OK, maybe I do understand it.

00:17:08.990 --> 00:17:10.440
Do we support that?

00:17:10.440 --> 00:17:12.060
ALI AFSHAR: Can you read the
question in its full?

00:17:12.060 --> 00:17:13.329
ERIC GILMORE: Sure.

00:17:13.329 --> 00:17:16.079
I want a user to click on a
button on a page hosted by

00:17:16.079 --> 00:17:20.230
user Y, which copies a file from
user y's drive to the x's

00:17:20.230 --> 00:17:21.890
drive, or user x's drive.

00:17:21.890 --> 00:17:25.829
ALI AFSHAR: OK, so currently,
yes, we support that.

00:17:25.829 --> 00:17:28.930
It's just a copy operation,
at the end the day.

00:17:28.930 --> 00:17:30.940
Your application can download
the file and

00:17:30.940 --> 00:17:32.900
then re-upload it.

00:17:32.900 --> 00:17:38.250
Or user y can copy the file into
their own drive, and then

00:17:38.250 --> 00:17:42.140
share that file, or make
the owner for the

00:17:42.140 --> 00:17:43.630
other user, user y.

00:17:43.630 --> 00:17:44.750
ERIC GILMORE: There'd be a
requirement that of both of

00:17:44.750 --> 00:17:46.830
those users would have to
be authorized for your

00:17:46.830 --> 00:17:47.600
application.

00:17:47.600 --> 00:17:50.400
ALI AFSHAR: OK, so that could
also be done in two steps, so

00:17:50.400 --> 00:17:51.770
both users for that flow.

00:17:51.770 --> 00:17:54.690
But imagine the situation where
you user y performs this

00:17:54.690 --> 00:17:58.670
authorization days or months,
even, in advance of user x.

00:17:58.670 --> 00:18:02.640
So there would have to be some
point where the user y says, I

00:18:02.640 --> 00:18:04.410
want to share my documents.

00:18:04.410 --> 00:18:06.330
I want to share this so
that it can be copied.

00:18:06.330 --> 00:18:08.010
So they will put that
into that state.

00:18:08.010 --> 00:18:10.070
That's their part of
the application.

00:18:10.070 --> 00:18:12.070
In the other part of the
application, the receiver

00:18:12.070 --> 00:18:17.140
part, the user who wants to
download that later, they will

00:18:17.140 --> 00:18:20.010
need to be authorized there.

00:18:20.010 --> 00:18:23.160
Or for that specific
case, you could use

00:18:23.160 --> 00:18:24.650
the web content link.

00:18:24.650 --> 00:18:27.980
Because as long as the user
has access, then you don't

00:18:27.980 --> 00:18:29.820
need to download that
file in the API.

00:18:29.820 --> 00:18:31.450
So you can copy the
file across it.

00:18:31.450 --> 00:18:33.601
And then they can download it.

00:18:33.601 --> 00:18:34.660
ERIC GILMORE: Terrific, Ali.

00:18:34.660 --> 00:18:39.180
ALI AFSHAR: So two steps,
copy then share.

00:18:39.180 --> 00:18:40.120
ERIC GILMORE: One
more question.

00:18:40.120 --> 00:18:42.630
I'm not sure we can answer in
the scope of today's talk.

00:18:42.630 --> 00:18:45.680
But can we get an example
of CORS for Drive?

00:18:45.680 --> 00:18:49.250
ALI AFSHAR: Yeah,
sure, we can.

00:18:49.250 --> 00:18:52.030
Actually, there are some, if
you look on Stack Overflow,

00:18:52.030 --> 00:18:56.020
there have been a few examples
there of how to do that.

00:18:56.020 --> 00:18:58.290
CORS works.

00:18:58.290 --> 00:18:59.870
ERIC GILMORE: That's the most
we can say about it.

00:18:59.870 --> 00:19:02.850
ALI AFSHAR: Well, I mean, CORS
is kind of, down to the

00:19:02.850 --> 00:19:04.480
browser, works out the
finer details.

00:19:04.480 --> 00:19:09.310
You make your HTTP, XHTTP
request in the browser.

00:19:09.310 --> 00:19:13.710
And then the browser will try
and see if the server has CORS

00:19:13.710 --> 00:19:16.130
by sending ahead,
ask the options

00:19:16.130 --> 00:19:17.510
which ones it supports.

00:19:17.510 --> 00:19:20.700
And if it can, then it will
make that request.

00:19:20.700 --> 00:19:22.580
So yes, we do support that.

00:19:22.580 --> 00:19:24.380
And yeah, please use it.

00:19:24.380 --> 00:19:25.820
And if you have problems,
get back to us.

00:19:25.820 --> 00:19:28.880
There are some examples
on Stack Overflow.

00:19:28.880 --> 00:19:31.660
If you can't find any, ask a
new question, and one of us

00:19:31.660 --> 00:19:34.610
will paste some code for you.

00:19:34.610 --> 00:19:36.310
We'd be happy to.

00:19:36.310 --> 00:19:37.230
ERIC GILMORE: That's an
interesting question, though,

00:19:37.230 --> 00:19:38.360
about transloading.

00:19:38.360 --> 00:19:39.730
Maybe we need to have
a session about

00:19:39.730 --> 00:19:41.280
sharing sometime soon.

00:19:41.280 --> 00:19:43.190
ALI AFSHAR: Yeah, I think
that's a good idea.

00:19:43.190 --> 00:19:45.870
And if any of you are still
watching by now, if you like

00:19:45.870 --> 00:19:51.290
the idea of us doing a sharing
session to complement our

00:19:51.290 --> 00:19:53.570
sharing Docs, check that out.

00:19:53.570 --> 00:19:55.595
This video will be available
in our download

00:19:55.595 --> 00:19:56.845
section for the Docs.

00:19:59.340 --> 00:19:59.800
ERIC GILMORE: All right.

00:19:59.800 --> 00:20:03.650
Well, I hope you've enjoyed
Ali's incredible shell

00:20:03.650 --> 00:20:06.060
real-time demo.

00:20:06.060 --> 00:20:09.190
I believe he has the ability
to copy it all into a paste

00:20:09.190 --> 00:20:09.620
bin for you.

00:20:09.620 --> 00:20:11.530
ALI AFSHAR: So that's what
I'm about to do now.

00:20:11.530 --> 00:20:12.530
It may or may not work.

00:20:12.530 --> 00:20:15.200
If it crashes, I'm sorry.

00:20:15.200 --> 00:20:18.610
So paste bin, yes.

00:20:18.610 --> 00:20:19.855
It may be too big.

00:20:19.855 --> 00:20:21.820
Oh, it worked.

00:20:21.820 --> 00:20:22.370
ERIC GILMORE: Did you know
you could do that?

00:20:22.370 --> 00:20:24.130
I didn't until this morning.

00:20:24.130 --> 00:20:25.380
ALI AFSHAR: It worked.

00:20:28.310 --> 00:20:32.745
We should add this URL to the
video description so that you

00:20:32.745 --> 00:20:33.480
can look at it.

00:20:33.480 --> 00:20:39.870
But if you can see that, it's
bpaste.net/show/49357.

00:20:39.870 --> 00:20:41.350
And it's got the entire
session that we

00:20:41.350 --> 00:20:43.280
went through there.

00:20:43.280 --> 00:20:45.030
ERIC GILMORE: I'll add that
before we leave the room, Ali.

00:20:45.030 --> 00:20:46.290
ALI AFSHAR: OK, thank
you, Eric.

00:20:46.290 --> 00:20:47.540
ERIC GILMORE: Thank you.

