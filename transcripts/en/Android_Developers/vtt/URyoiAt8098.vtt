WEBVTT
Kind: captions
Language: en

00:00:05.620 --> 00:00:06.030
JAN-FELIX SCHMAKEIT: Hello.

00:00:06.030 --> 00:00:07.190
And welcome to DEV.BYTES.

00:00:07.190 --> 00:00:09.080
My name is Jan-Felix Schmakeit,
and I'm from the

00:00:09.080 --> 00:00:10.860
Android Developer
Relations team.

00:00:10.860 --> 00:00:12.810
In this episode, we are looking
at the Hierarchy

00:00:12.810 --> 00:00:15.400
Viewer and how you can use
that tool to fix overdraw

00:00:15.400 --> 00:00:16.870
issues in your application.

00:00:16.870 --> 00:00:19.680
So let's have a look at our
demo application here.

00:00:19.680 --> 00:00:21.880
So this looks a bit like
an RSS reader.

00:00:21.880 --> 00:00:23.980
We're calling it the Bacon
Reader application.

00:00:23.980 --> 00:00:26.350
So you can select articles
here on the side.

00:00:26.350 --> 00:00:29.470
And you can read some text
here in this frame here.

00:00:29.470 --> 00:00:32.910
This is a quite standard
Android layout.

00:00:32.910 --> 00:00:35.660
Here we have a fragment here
for the list on the side.

00:00:35.660 --> 00:00:40.550
And we have one fragment here on
the right-hand side for the

00:00:40.550 --> 00:00:41.610
main content.

00:00:41.610 --> 00:00:43.200
So let's look at Hierarchy
Viewer.

00:00:43.200 --> 00:00:45.310
And I will show you how
this application--

00:00:45.310 --> 00:00:48.090
what the application looks
like in Hierarchy Viewer.

00:00:48.090 --> 00:00:50.600
So the Hierarchy Viewer
application is part of the

00:00:50.600 --> 00:00:52.200
Android device monitor.

00:00:52.200 --> 00:00:54.420
You can simply open it up by
clicking on the Hierarchy

00:00:54.420 --> 00:00:56.880
Viewer button up here.

00:00:56.880 --> 00:00:59.795
So once you've loaded in your
application, you've selected

00:00:59.795 --> 00:01:01.670
your activity.

00:01:01.670 --> 00:01:03.020
You get this tree up here.

00:01:03.020 --> 00:01:06.290
And this tree basically shows
you what you have used in your

00:01:06.290 --> 00:01:08.330
application actually
looks like.

00:01:08.330 --> 00:01:10.400
So in this case here, you can
see we have a linear layout.

00:01:10.400 --> 00:01:13.210
And this is where our entire
application lives.

00:01:13.210 --> 00:01:14.880
So we can drill down
a bit further.

00:01:14.880 --> 00:01:17.510
So you can see here,
we have a ListView.

00:01:17.510 --> 00:01:19.110
And this is coming from the
fragment that you have on the

00:01:19.110 --> 00:01:20.250
left-hand side.

00:01:20.250 --> 00:01:22.840
You can see here, this
is what we have.

00:01:22.840 --> 00:01:26.150
In this list, because this is
what's [? drawn ?] inside it.

00:01:26.150 --> 00:01:30.280
And you also notice that we have
these colored dots here.

00:01:30.280 --> 00:01:33.550
And these dots indicate how
quickly each of these views

00:01:33.550 --> 00:01:36.630
was drawn So green means
it was very fast.

00:01:36.630 --> 00:01:40.950
Yellow means it was faster
than 50% of the views.

00:01:40.950 --> 00:01:43.020
And the red means it's one
of the slowest views

00:01:43.020 --> 00:01:44.350
in your view hierarchy.

00:01:44.350 --> 00:01:46.570
So this is actually quite a nice
tool that allows you to

00:01:46.570 --> 00:01:49.650
drill down and see what your
application actually looks

00:01:49.650 --> 00:01:51.840
like when you run it, and in
particular when you use some

00:01:51.840 --> 00:01:52.740
more complicated layouts.

00:01:52.740 --> 00:01:54.716
This really helps you
troubleshoot some of the

00:01:54.716 --> 00:01:56.930
layout issues.

00:01:56.930 --> 00:01:59.220
So if you want to use the
Hierarchy Viewer in your own

00:01:59.220 --> 00:02:02.850
application, you have to include
the ViewServer class

00:02:02.850 --> 00:02:03.920
in your application.

00:02:03.920 --> 00:02:05.710
You can get it from this website
down here that's on

00:02:05.710 --> 00:02:06.530
the screen.

00:02:06.530 --> 00:02:08.490
And I'll show you what
that looks like.

00:02:08.490 --> 00:02:11.109
So you basically just drop
it into your application.

00:02:11.109 --> 00:02:12.910
In this case, here in
Android studio.

00:02:12.910 --> 00:02:15.410
And then you have add a few
calls inside your activity

00:02:15.410 --> 00:02:16.980
life cycle in the activity
you want to

00:02:16.980 --> 00:02:18.610
look at in more detail.

00:02:18.610 --> 00:02:21.990
So you have to add a call in
the onCreate method, and in

00:02:21.990 --> 00:02:24.520
onDestroy, and in onResume.

00:02:24.520 --> 00:02:27.890
And that allows the Hierarchy
Viewer to connect to your

00:02:27.890 --> 00:02:32.560
application and load in the
views just as we've seen.

00:02:32.560 --> 00:02:36.190
So let's see how we can use the
Hierarchy Viewer to de-bug

00:02:36.190 --> 00:02:38.110
one very common problem that
you often have in your

00:02:38.110 --> 00:02:38.660
application.

00:02:38.660 --> 00:02:40.350
And it's called overdraw.

00:02:40.350 --> 00:02:42.610
And overdraw means that you're
drawing the same pixel

00:02:42.610 --> 00:02:44.190
multiple times on the screen.

00:02:44.190 --> 00:02:46.970
And obviously that's really
bad for performance,

00:02:46.970 --> 00:02:49.090
especially if you define a
background multiple times and

00:02:49.090 --> 00:02:49.900
it's always the same color.

00:02:49.900 --> 00:02:51.390
It doesn't make much sense
to draw it multiple

00:02:51.390 --> 00:02:52.770
times on the screen.

00:02:52.770 --> 00:02:56.750
So if you go to the Developer
Options on your device,

00:02:56.750 --> 00:02:59.630
there's an option called
Show GPU Overdraw.

00:02:59.630 --> 00:03:01.840
And that gives you a nice vision
indication of which

00:03:01.840 --> 00:03:04.250
pixels you're drawing
multiple times.

00:03:04.250 --> 00:03:06.340
Red and green means you're
drawing it once or twice.

00:03:06.340 --> 00:03:08.920
And then light red and red means
you're drawing it more

00:03:08.920 --> 00:03:10.380
than three, four, five, times.

00:03:10.380 --> 00:03:12.560
That's obviously really bad
for your application.

00:03:12.560 --> 00:03:16.600
And if you look here at our app,
you can see that we have

00:03:16.600 --> 00:03:19.200
the background of each of the
ListView items is drawn

00:03:19.200 --> 00:03:20.070
multiple times.

00:03:20.070 --> 00:03:23.190
And then we also have a weird
rectangle behind our

00:03:23.190 --> 00:03:24.630
main body of text.

00:03:24.630 --> 00:03:26.280
And if you remember,
our application

00:03:26.280 --> 00:03:27.400
was completely white.

00:03:27.400 --> 00:03:29.580
We're not using any background
colors or anything else

00:03:29.580 --> 00:03:30.350
whatsoever.

00:03:30.350 --> 00:03:31.700
There's clearly something
going on that we

00:03:31.700 --> 00:03:33.290
can optimize here.

00:03:33.290 --> 00:03:35.860
So let's have a look at the
Hierarchy Viewer and see how

00:03:35.860 --> 00:03:39.810
we can use it to figure out what
exactly is going on here.

00:03:39.810 --> 00:03:42.480
So here's our Hierarchy
Viewer.

00:03:42.480 --> 00:03:45.430
Here's our linear layout that
defines the right-hand side of

00:03:45.430 --> 00:03:48.470
the application, the
details fragment.

00:03:48.470 --> 00:03:52.820
And you can see here that we
have a white background behind

00:03:52.820 --> 00:03:54.050
the main body of text.

00:03:54.050 --> 00:03:55.180
So that's a problem.

00:03:55.180 --> 00:03:57.230
Because we all ready have a main
background defined in the

00:03:57.230 --> 00:03:58.150
application.

00:03:58.150 --> 00:04:01.320
So this is something we should
investigate a bit further.

00:04:01.320 --> 00:04:02.830
If you click on the article
body down here, you can

00:04:02.830 --> 00:04:05.130
clearly see there's a white
background behind it.

00:04:05.130 --> 00:04:08.760
So that's one way you can see
what's being drawn on screen.

00:04:08.760 --> 00:04:11.360
Another really useful feature
is the option to export your

00:04:11.360 --> 00:04:14.360
entire view layers
as a PSD file.

00:04:14.360 --> 00:04:15.870
So that's this option up here.

00:04:15.870 --> 00:04:19.140
And if you click that, you can
save all window layers as a

00:04:19.140 --> 00:04:20.300
Photoshop file.

00:04:20.300 --> 00:04:21.290
And I've already
done this here.

00:04:21.290 --> 00:04:24.420
If you open up Photoshop, this
is what it looks like.

00:04:24.420 --> 00:04:27.410
And each of the layers in your
view that's visible on the

00:04:27.410 --> 00:04:31.660
screen is also visible in
your Photoshop file.

00:04:31.660 --> 00:04:33.340
So down here, we have
the DecorVew.

00:04:33.340 --> 00:04:34.820
And that's the main
window background.

00:04:34.820 --> 00:04:37.220
So if you turn it off, you
can see that there's

00:04:37.220 --> 00:04:38.370
still a lot of white.

00:04:38.370 --> 00:04:40.500
But the window background
already was white.

00:04:40.500 --> 00:04:41.740
That's a bit strange.

00:04:41.740 --> 00:04:44.110
And here, we have a linear
layout that has a white

00:04:44.110 --> 00:04:44.520
background.

00:04:44.520 --> 00:04:46.170
That's again a bit strange.

00:04:46.170 --> 00:04:47.260
We have another linear layout.

00:04:47.260 --> 00:04:50.050
See, this is coming from each
of our ListView items.

00:04:50.050 --> 00:04:52.690
And again, there's the
background right here.

00:04:52.690 --> 00:04:56.470
So this is one way that you can
use Hierarchy Viewer to

00:04:56.470 --> 00:05:01.940
see how your views are
drawn on the screen.

00:05:01.940 --> 00:05:03.570
Another really useful feature
I would like to

00:05:03.570 --> 00:05:05.730
show you is this here.

00:05:05.730 --> 00:05:09.730
So we have our preview here
that shows you what this

00:05:09.730 --> 00:05:11.770
particular view actually
draws to the screen.

00:05:11.770 --> 00:05:14.650
And if you double click on this,
you get a bigger view.

00:05:14.650 --> 00:05:17.960
But you can also change the
background color of the view.

00:05:17.960 --> 00:05:20.830
In this case, because we have
defined white as our

00:05:20.830 --> 00:05:23.460
background color for this
layout, this linear layout,

00:05:23.460 --> 00:05:25.000
you won't see any changes.

00:05:25.000 --> 00:05:29.030
But this can also help you to
see what's transparent and

00:05:29.030 --> 00:05:31.550
what's not transparent
in your application.

00:05:31.550 --> 00:05:32.580
So let's fix this.

00:05:32.580 --> 00:05:35.080
We don't need to define the
background multiple times.

00:05:35.080 --> 00:05:37.320
So if you look at our code--

00:05:37.320 --> 00:05:38.960
let's go to Android studio--

00:05:38.960 --> 00:05:42.380
and the first thing you want
to fix up is the main

00:05:42.380 --> 00:05:42.860
background.

00:05:42.860 --> 00:05:44.360
So we had our two panes.

00:05:44.360 --> 00:05:46.670
And if you remember, there was
a linear layout of all the

00:05:46.670 --> 00:05:46.890
backgrounds.

00:05:46.890 --> 00:05:50.290
So let's get rid of
that one first.

00:05:50.290 --> 00:05:55.610
So that's coming from the
activity two pane XML.

00:05:55.610 --> 00:05:57.970
And up here you can see
straightaway we are defining a

00:05:57.970 --> 00:05:59.200
background color.

00:05:59.200 --> 00:05:59.830
You don't need that.

00:05:59.830 --> 00:06:02.000
You can get rid of that.

00:06:02.000 --> 00:06:07.150
The next thing, we had a
background color in our

00:06:07.150 --> 00:06:08.260
article detail view.

00:06:08.260 --> 00:06:11.340
You know how you have the body
of text at the bottom?

00:06:11.340 --> 00:06:13.020
So let's get rid of
it here as well.

00:06:13.020 --> 00:06:13.960
Color, white--

00:06:13.960 --> 00:06:16.020
let's remove that.

00:06:16.020 --> 00:06:20.550
And then lastly, we also had
a background color for each

00:06:20.550 --> 00:06:24.990
ListView item, in the list of
bacon on the left-hand side.

00:06:24.990 --> 00:06:30.630
And our background is actually
select drawable.

00:06:30.630 --> 00:06:33.490
And you can see here, we have
different states, depending on

00:06:33.490 --> 00:06:35.440
if the particular
item is active.

00:06:35.440 --> 00:06:37.770
This is how we are indicating
which article you are looking

00:06:37.770 --> 00:06:40.000
at in the application.

00:06:40.000 --> 00:06:45.100
And down here, this drawable
down here is the one that's

00:06:45.100 --> 00:06:47.220
used by default when it's
in a neutral state.

00:06:47.220 --> 00:06:48.240
And again, it's white.

00:06:48.240 --> 00:06:51.530
But we can just make
that transparent.

00:06:51.530 --> 00:06:54.070
And there's actually a
transparent color that you can

00:06:54.070 --> 00:06:56.240
use, you can just-- from
the framework.

00:06:56.240 --> 00:06:58.320
So we can just make
that transparent.

00:06:58.320 --> 00:07:01.350
And if you run our application
again, you will see that we

00:07:01.350 --> 00:07:03.260
have much, much less overdraw.

00:07:03.260 --> 00:07:06.990
So if you go back to our
device-- let's just wait for

00:07:06.990 --> 00:07:09.750
it to compile.

00:07:09.750 --> 00:07:10.920
And here it is.

00:07:10.920 --> 00:07:13.790
The green rectangle
we had behind our

00:07:13.790 --> 00:07:15.180
caption text is gone.

00:07:15.180 --> 00:07:16.800
This is looking much,
much cleaner.

00:07:16.800 --> 00:07:18.190
There's no red.

00:07:18.190 --> 00:07:21.806
There's only a few blue spots
where we have text that we

00:07:21.806 --> 00:07:23.070
actually need to draw
[INAUDIBLE] the screen.

00:07:23.070 --> 00:07:26.250
So it's much, much better.

00:07:26.250 --> 00:07:28.950
So you've seen how you can use
the overdraw setting to

00:07:28.950 --> 00:07:31.790
develop options and the
Hierarchy Viewer to

00:07:31.790 --> 00:07:33.500
investigate overdraw issues
in your application.

00:07:33.500 --> 00:07:36.880
So I suggest you just enable the
setting and open up your

00:07:36.880 --> 00:07:39.020
own application to see how you
can optimize it further.

