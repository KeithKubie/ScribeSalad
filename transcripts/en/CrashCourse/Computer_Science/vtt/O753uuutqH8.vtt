WEBVTT
Kind: captions
Language: en

00:00:03.020 --> 00:00:05.720
Hi, I’m Carrie Anne, and welcome to CrashCourse
Computer Science!

00:00:05.720 --> 00:00:09.980
So we’ve talked a lot about sorting in this
series and often code to sort a list of numbers

00:00:09.980 --> 00:00:13.860
might only be ten lines long, which is easy
enough for a single programmer to write.

00:00:13.860 --> 00:00:16.910
Plus, it’s short enough that you don’t
need any special tools – you could do it

00:00:16.910 --> 00:00:17.910
in Notepad.

00:00:17.910 --> 00:00:18.910
Really!

00:00:18.910 --> 00:00:22.720
But, a sorting algorithm isn’t a program;
it’s likely only a small part of a much

00:00:22.720 --> 00:00:23.890
larger program.

00:00:23.890 --> 00:00:27.439
For example, Microsoft Office has roughly
40 millions lines of code.

00:00:27.439 --> 00:00:28.720
40 MILLION!

00:00:28.720 --> 00:00:32.050
That’s way too big for any one person to
figure out and write!

00:00:32.050 --> 00:00:36.250
To build huge programs like this, programmers
use a set of tools and practices.

00:00:36.250 --> 00:00:40.300
Taken together, these form the discipline
of Software Engineering – a term coined

00:00:40.300 --> 00:00:44.510
by engineer Margaret Hamilton, who helped
NASA prevent serious problems during the Apollo

00:00:44.510 --> 00:00:45.610
missions to the moon.

00:00:45.610 --> 00:00:49.149
She once explained it this way: “It’s
kind of like a root canal: you waited till

00:00:49.149 --> 00:00:51.820
the end, [but] there are things you could
have done beforehand.

00:00:51.820 --> 00:00:55.220
It’s like preventative healthcare, but it’s
preventative software.”

00:00:55.220 --> 00:01:04.340
INTRO

00:01:04.400 --> 00:01:08.420
As I mentioned in episode 12, breaking big
programs into smaller functions allows many

00:01:08.420 --> 00:01:10.280
people to work simultaneously.

00:01:10.280 --> 00:01:14.040
They don’t have to worry about the whole
thing, just the function they’re working on.

00:01:14.100 --> 00:01:18.040
So, if you’re tasked with writing a sort
algorithm, you only need to make sure it sorts

00:01:18.060 --> 00:01:19.380
properly and efficiently.

00:01:19.389 --> 00:01:22.429
However, even packing code up into functions
isn’t enough.

00:01:22.429 --> 00:01:25.380
Microsoft Office probably contains hundreds
of thousands of them.

00:01:25.380 --> 00:01:29.149
That’s better than dealing with 40 million
lines of code, but it’s still way too many

00:01:29.149 --> 00:01:31.229
“things” for one person or team to manage.

00:01:31.229 --> 00:01:35.570
The solution is to package functions into
hierarchies, pulling related code together

00:01:35.570 --> 00:01:36.740
into “objects”.

00:01:36.740 --> 00:01:40.719
For example, car’s software might have several
functions related to cruise control, like

00:01:40.719 --> 00:01:44.530
setting speed, nudging speed up or down, and
stopping cruise control altogether.

00:01:44.530 --> 00:01:48.459
Since they’re all related, we can wrap them
up into a unified cruise control object.

00:01:48.459 --> 00:01:52.119
But, we don’t have to stop there, cruise
control is just one part of the engine’s

00:01:52.119 --> 00:01:53.119
software.

00:01:53.119 --> 00:01:56.979
There might also be sets of functions that
control spark plug ignition, fuel pumps, and

00:01:56.979 --> 00:01:58.090
the radiator.

00:01:58.090 --> 00:02:01.810
So we can create a “parent” Engine Object
that contains all of these “children”

00:02:01.810 --> 00:02:02.420
objects.

00:02:02.420 --> 00:02:05.860
In addition to children *objects*, the engine
itself might have its *own* functions.

00:02:05.900 --> 00:02:08.420
You want to be able to stop and start it,
for example.

00:02:08.420 --> 00:02:12.150
It’ll also have its own variables, like
how many miles the car has traveled.

00:02:12.150 --> 00:02:15.860
In general, objects can contain other objects,
functions and variables.

00:02:15.860 --> 00:02:18.770
And of course, the engine is just one part
of a Car Object.

00:02:18.770 --> 00:02:21.780
There’s also the transmission, wheels, doors,
windows, and so on.

00:02:21.780 --> 00:02:25.849
Now, as a programmer, if I want to set the
cruise control, I navigate down the object

00:02:25.849 --> 00:02:29.819
hierarchy, from the outermost objects to more
and more deeply nested ones.

00:02:29.819 --> 00:02:33.940
Eventually, I reach the function I want to
trigger: “Car, then engine, then cruise

00:02:33.940 --> 00:02:36.340
control, then set cruise speed to 55”.

00:02:36.340 --> 00:02:39.940
Programming languages often use something
equivalent to the syntax shown here.

00:02:39.940 --> 00:02:44.560
The idea of packing up functional units into
nested objects is called Object Oriented Programming.

00:02:44.569 --> 00:02:49.120
This is very similar to what we’ve done
all series long: hide complexity by encapsulating

00:02:49.120 --> 00:02:52.020
low-level details in higher-order components.

00:02:52.020 --> 00:02:56.040
Before we packed up things like transistor
circuits into higher-level boolean gates.

00:02:56.080 --> 00:02:57.970
Now we’re doing the same thing with software.

00:02:57.970 --> 00:03:07.820
Yet again, it’s a way to move up a new level
of abstraction!

00:03:07.820 --> 00:03:11.800
Breaking up a big program, like a car’s
software, into functional units is perfect

00:03:11.829 --> 00:03:12.860
for teams.

00:03:12.870 --> 00:03:16.870
One team might be responsible for the cruise
control system, and a single programmer on

00:03:16.870 --> 00:03:19.270
that team tackles a handful of functions.

00:03:19.270 --> 00:03:22.189
This is similar to how big, physical things
are built, like skyscrapers.

00:03:22.189 --> 00:03:26.810
You’ll have electricians running wires,
plumbers fitting pipes, welders welding, painters

00:03:26.810 --> 00:03:29.879
painting, and hundreds of other people teeming
all over the hull.

00:03:29.879 --> 00:03:34.060
They work together on different parts simultaneously,
leveraging their different skills.

00:03:34.060 --> 00:03:36.620
Until one day, you’ve got a whole working
building!

00:03:36.620 --> 00:03:41.060
But, returning to our cruise control example…
its code is going to have to make use of functions

00:03:41.060 --> 00:03:45.269
in other parts of the engine’s software,
to, you know, keep the car at a constant speed.

00:03:45.269 --> 00:03:48.060
That code isn’t part of the cruise control
team’s responsibility.

00:03:48.060 --> 00:03:49.810
It’s another team’s code.

00:03:49.810 --> 00:03:53.400
Because the cruise control team didn’t write
that, they’re going to need good documentation

00:03:53.400 --> 00:03:57.549
about what each function in the code does,
and a well-defined Application Programming

00:03:57.549 --> 00:03:59.829
Interface -- or API for short.

00:03:59.829 --> 00:04:04.359
You can think of an API as the way that collaborating
programmers interact across various parts

00:04:04.360 --> 00:04:04.980
of the code.

00:04:04.980 --> 00:04:08.960
For example, in the IgnitionControl object,
there might be functions to set the RPM of

00:04:08.969 --> 00:04:12.840
the engine, check the spark plug voltage,
as well as fire the individual spark plugs.

00:04:12.840 --> 00:04:17.090
Being able to set the motor’s RPM is really
useful, the cruise control team is going to

00:04:17.090 --> 00:04:18.430
need to call that function.

00:04:18.430 --> 00:04:21.489
But, they don’t know much about how the
ignition system works.

00:04:21.489 --> 00:04:25.569
It’s not a good idea to let them call functions
that fire the individual spark plugs.

00:04:25.569 --> 00:04:26.780
Or the engine might explode!

00:04:26.780 --> 00:04:27.780
Maybe.

00:04:27.780 --> 00:04:31.340
The API allows the right people access to
the right functions and data.

00:04:31.340 --> 00:04:34.940
Object Oriented Programming languages do this
by letting you specify whether functions are

00:04:34.949 --> 00:04:36.420
public or private.

00:04:36.430 --> 00:04:40.120
If a function is marked as “private”,
it means only functions inside that object

00:04:40.120 --> 00:04:41.120
can call it.

00:04:41.120 --> 00:04:45.750
So, in this example, only other functions
inside of IgnitionControl, like the setRPM

00:04:45.750 --> 00:04:47.880
function, can fire the sparkplugs.

00:04:47.880 --> 00:04:52.870
On the other hand, because the setRPM function
is marked as public, other objects can call

00:04:52.870 --> 00:04:54.280
it, like cruise control.

00:04:54.280 --> 00:04:58.630
This ability to hide complexity, and selectively
reveal it, is the essence of Object Oriented

00:04:58.630 --> 00:05:03.280
Programming, and it’s a powerful and popular
way to tackle building large and complex programs.

00:05:03.280 --> 00:05:07.220
Pretty much every piece of software on your
computer, or game running on your console,

00:05:07.229 --> 00:05:12.759
was built using an Object Oriented Programming
Language, like C++, C# or Objective-C. Other

00:05:12.759 --> 00:05:15.569
popular “OO” languages you may have heard
of are Python and Java.

00:05:15.569 --> 00:05:19.150
It’s important to remember that code, before
being compiled, is just text.

00:05:19.150 --> 00:05:23.300
As I mentioned earlier, you could write code
in Notepad or any old word processor.

00:05:23.300 --> 00:05:24.300
Some people do.

00:05:24.300 --> 00:05:28.229
But generally, today’s software developers
use special-purpose applications for writing

00:05:28.229 --> 00:05:33.080
programs, ones that integrate many useful
tools for writing, organizing, compiling and

00:05:33.080 --> 00:05:34.280
testing code.

00:05:34.280 --> 00:05:38.040
Because they put everything you need in one
place, they’re called Integrated Development

00:05:38.040 --> 00:05:39.820
Environments, or IDEs for short.

00:05:39.900 --> 00:05:44.420
All IDEs provide a text editor for writing
code, often with useful features like automatic

00:05:44.420 --> 00:05:46.620
color-coding to improve readability.

00:05:46.629 --> 00:05:50.319
Many even check for syntax errors as you type,
like spell check for code.

00:05:50.319 --> 00:05:54.870
Big programs contain lots of individual source
files, so IDEs allow programmers to organize

00:05:54.870 --> 00:05:56.640
and efficiently navigate everything.

00:05:56.640 --> 00:06:00.700
Also built right into the IDE is the ability
to compile and run code.

00:06:00.700 --> 00:06:04.310
And if your program crashes, because it’s
still a work in progress, the IDE can take

00:06:04.310 --> 00:06:08.229
you back to the line of code where it happened,
and often provide additional information to

00:06:08.229 --> 00:06:11.800
help you track down and fix the bug, which
is a process called debugging.

00:06:11.800 --> 00:06:16.159
This is important because most programmers
spend 70 to 80% of their time testing and

00:06:16.159 --> 00:06:18.090
debugging, not writing new code.

00:06:18.090 --> 00:06:22.120
Good tools, contained in IDEs, can go a long
way when it comes to helping programmers prevent

00:06:22.120 --> 00:06:23.420
and find errors.

00:06:23.420 --> 00:06:27.600
Many computer programmers can be pretty loyal
to their IDEs though - but let’s be honest.

00:06:27.640 --> 00:06:29.080
VIM is where it’s at.

00:06:29.080 --> 00:06:30.080
Providing you know how to quit.

00:06:30.080 --> 00:06:34.289
In addition to coding and debugging, another
important part of a programmer's job is documenting

00:06:34.289 --> 00:06:35.289
their code.

00:06:35.289 --> 00:06:38.700
This can be done in standalone files called
“read-me’s” which tell other programmers

00:06:38.700 --> 00:06:40.750
to read that help file before diving in.

00:06:40.750 --> 00:06:43.810
It can also happen right in the code itself
with comments.

00:06:43.810 --> 00:06:46.919
These are specially-marked statements that
the program knows to ignore when the code

00:06:46.919 --> 00:06:47.919
is compiled.

00:06:47.919 --> 00:06:51.000
They exist only to help programmers figure
out what’s what in the source code.

00:06:51.000 --> 00:06:54.560
Good documentation helps programmers when
they revisit code they haven’t seen for

00:06:54.560 --> 00:06:57.849
awhile, but it’s also crucial for programmers
who are totally new to it.

00:06:57.849 --> 00:07:02.150
I just want to take a second here and reiterate
that it’s THE WORST when someone parachutes

00:07:02.150 --> 00:07:06.400
a load of uncommented and undocumented code
into your lap, and you literally have to go

00:07:06.400 --> 00:07:08.800
line by line to understand what the code is
doing.

00:07:08.800 --> 00:07:09.580
Seriously.

00:07:09.580 --> 00:07:10.860
Don’t be that person.

00:07:10.860 --> 00:07:13.360
Documentation also promotes code reuse.

00:07:13.380 --> 00:07:16.760
So, instead of having programmers constantly
write the same things over and over, they

00:07:16.761 --> 00:07:19.780
can track down someone else’s code that
does what they need.

00:07:19.780 --> 00:07:23.650
Then, thanks to documentation, they can put
it to work in their program, without ever

00:07:23.650 --> 00:07:25.050
having to read through the code.

00:07:25.050 --> 00:07:26.669
“Read the docs” as they say.

00:07:26.669 --> 00:07:30.740
In addition to IDEs, another important piece
of software that helps big teams work collaboratively

00:07:30.740 --> 00:07:36.480
on big coding projects is called Source Control, also known as version control or revision control.

00:07:36.480 --> 00:07:40.560
Most often, at a big software company like
Apple or Microsoft, code for projects is stored

00:07:40.560 --> 00:07:43.310
on centralized servers, called a code repository.

00:07:43.310 --> 00:07:47.041
When a programmer wants to work on a piece
of code, they can check it out, sort of like

00:07:47.041 --> 00:07:48.669
checking out a book out from a library.

00:07:48.669 --> 00:07:51.009
Often, this can be done right in an IDE.

00:07:51.009 --> 00:07:55.139
Then, they can edit this code all they want
on their personal computer, adding new features

00:07:55.139 --> 00:07:56.639
and testing if they work.

00:07:56.639 --> 00:08:00.290
When the programmer is confident their changes
are working and there are no loose ends, they

00:08:00.290 --> 00:08:04.500
can check the code back into the repository,
known as committing code, for everyone else

00:08:04.500 --> 00:08:05.500
to use.

00:08:05.500 --> 00:08:09.379
While a piece of code is checked out, and
presumably getting updated or modified, other

00:08:09.379 --> 00:08:10.479
programmers leave it alone.

00:08:10.479 --> 00:08:12.790
This prevents weird conflicts and duplicated
work.

00:08:12.790 --> 00:08:17.159
In this way, hundreds of programmers can be
simultaneously checking in and out pieces

00:08:17.159 --> 00:08:19.949
of code, iteratively building up huge systems.

00:08:19.949 --> 00:08:23.800
Critically, you don’t want someone committing
buggy code, because other people and teams

00:08:23.800 --> 00:08:25.169
may rely on it.

00:08:25.169 --> 00:08:27.949
Their code could crash, creating confusion
and lost time.

00:08:27.949 --> 00:08:31.439
The master version of the code, stored on
the server, should always compile without

00:08:31.440 --> 00:08:33.010
errors and run with minimal bugs.

00:08:33.010 --> 00:08:34.720
But sometimes bugs creep in.

00:08:34.720 --> 00:08:38.460
Fortunately, source control software keeps
track of all changes, and if a bug is found,

00:08:38.470 --> 00:08:42.410
the whole code, or just a piece, can be rolled
back to an earlier, stable version.

00:08:42.410 --> 00:08:47.700
It also keeps track of who made each change,
so coworkers can send nasty, I mean, helpful

00:08:47.700 --> 00:08:50.220
and encouraging emails to the offending person.

00:08:50.220 --> 00:08:54.120
Debugging goes hand in hand with writing code,
and it’s most often done by an individual

00:08:54.120 --> 00:08:55.290
or small team.

00:08:55.290 --> 00:08:59.030
The big picture version of debugging is Quality
Assurance testing, or QA.

00:08:59.030 --> 00:09:02.480
This is where a team rigorously tests out
a piece of software, attempting to create

00:09:02.480 --> 00:09:04.580
unforeseen conditions that might trip it up.

00:09:04.580 --> 00:09:06.440
Basically, they elicit bugs.

00:09:06.450 --> 00:09:10.740
Getting all the wrinkles out is a huge effort,
but vital in making sure the software works

00:09:10.740 --> 00:09:15.760
as intended for as many users in as many situations
as imaginable before it ships.

00:09:15.760 --> 00:09:19.970
You’ve probably heard of beta software This
is a version of software that’s mostly complete,

00:09:19.970 --> 00:09:21.720
but not 100% fully tested.

00:09:21.720 --> 00:09:25.660
Companies will sometimes release beta versions
to the public to help them identify issues,

00:09:25.660 --> 00:09:28.440
it’s essentially like getting a free QA
team.

00:09:28.440 --> 00:09:33.220
What you don’t hear about as much is the version that comes before the beta: the alpha version.

00:09:33.320 --> 00:09:36.140
This is usually so rough and buggy, it’s
only tested internally.

00:09:36.140 --> 00:09:39.860
So, that’s the tip of the iceberg in terms
of the tools, tricks and techniques that allow

00:09:39.860 --> 00:09:44.750
software engineers to construct the huge pieces
of software that we know and love today, like

00:09:44.750 --> 00:09:47.600
YouTube, Grand Theft Auto 5, and Powerpoint.

00:09:47.600 --> 00:09:50.940
As you might expect, all those millions of
lines of code needs some serious processing

00:09:50.940 --> 00:09:56.880
power to run at useful speeds, so next episode we’ll be talking about how computers got so incredibly fast.

00:09:56.920 --> 00:09:58.000
See you then.

