WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.505
 <i>Android patterns for performance</i> 

00:00:03.065 --> 00:00:06.690
 Sometimes, the cause of trouble is not obvious obvious performance problems, 

00:00:06.690 --> 00:00:08.730
 But a small trivial cost 

00:00:08.730 --> 00:00:11.080
 For small functions that are run repeatedly 

00:00:11.080 --> 00:00:12.700
 Which accumulate to become big problems. 

00:00:13.070 --> 00:00:14.160
 I'm Joanna Smith. 

00:00:14.160 --> 00:00:16.460
 Instead of allowing small things to develop into critical problems, 

00:00:16.460 --> 00:00:18.710
 You can configure payments to keep your app running. 

00:00:19.330 --> 00:00:23.740
 Almost everything in computing is accompanied by pressure in performance. 

00:00:23.970 --> 00:00:26.420
 This may include something great, such as removing image compression, 

00:00:26.420 --> 00:00:28.860
 Requiring a set of memory allocations 

00:00:28.860 --> 00:00:30.290
 To store the argument data. 

00:00:30.290 --> 00:00:33.580
 Or, it may be simple, such as copying additional memory 

00:00:33.580 --> 00:00:36.560
 And manage the index associated with recurring jobs. 

00:00:37.000 --> 00:00:40.040
 These performance pressures are not usually a major concern, 

00:00:40.040 --> 00:00:42.250
 But when executed several times 

00:00:42.250 --> 00:00:45.030
 I mean a great repetition, 

00:00:45.340 --> 00:00:48.990
 These pressures can become a huge burden on your application. 

00:00:49.530 --> 00:00:51.800
 Batch configuration is a useful procedure. 

00:00:52.070 --> 00:00:56.290
 Batch configuration is the process of grouping occurrences of a task. 

00:00:56.650 --> 00:01:00.950
 Thus the pressure occurs once and not once for each repetition. 

00:01:01.130 --> 00:01:04.830
 For example, if you show the same image twenty times, 

00:01:04.830 --> 00:01:06.750
 Try uploading them once before you start 

00:01:06.750 --> 00:01:08.570
 Instead of uploading them for each offer. 

00:01:08.850 --> 00:01:12.470
 Compiling your accounts together gives greater value. 

00:01:12.810 --> 00:01:13.820
 For Android, 

00:01:13.820 --> 00:01:17.960
 One of the most important areas of using batch configuration is with network requests. 

00:01:18.140 --> 00:01:22.167
 There are costs for each time you need to turn on the cellular connection of your phone. 

00:01:22.167 --> 00:01:24.590
 Therefore, if you send the package once every 30 seconds, 

00:01:24.590 --> 00:01:27.180
 You pay that cost with each package. 

00:01:27.180 --> 00:01:30.390
 Instead, you should compile accurate requests for two minutes together, 

00:01:30.390 --> 00:01:33.370
 Then turn on the wireless connection once and send all the requests 

00:01:33.370 --> 00:01:34.500
 At the same time. 

00:01:35.010 --> 00:01:37.790
 But the composition of payments is very useful in other cases as well, 

00:01:37.790 --> 00:01:39.460
 Such as custom views. 

00:01:39.460 --> 00:01:42.040
 Instead of computing a conversion matrix for each element, 

00:01:42.040 --> 00:01:43.350
 You can group them 

00:01:43.350 --> 00:01:46.190
 Make small changes to the larger conversion matrix, 

00:01:46.190 --> 00:01:47.910
 Saving your precious resources. 

00:01:48.250 --> 00:01:50.210
 Then the clearest case is to use batch configuration 

00:01:50.210 --> 00:01:51.680
 It happens when you need a job 

00:01:51.680 --> 00:01:54.020
 To computerize a search table before working on the data. 

00:01:54.420 --> 00:01:57.520
 Here, a batch copy is a collection of 20 bits of data 

00:01:57.520 --> 00:01:59.000
 To create a single search table 

00:01:59.000 --> 00:02:00.660
 Is a clear gain from batch configuration. 

00:02:01.030 --> 00:02:03.060
 It indicates the great importance of batch formation 

00:02:03.060 --> 00:02:04.460
 That all modern processors 

00:02:04.460 --> 00:02:06.910
 Now come equipped with sporty support for batch formation. 

00:02:07.260 --> 00:02:09.550
 Single-order functions allow you to access multiple data 

00:02:09.550 --> 00:02:11.620
 Perform the same sports functions 

00:02:11.620 --> 00:02:14.180
 On multiple pieces of data at the same time. 

00:02:14.610 --> 00:02:16.790
 So instead of consuming CPU cycles 

00:02:16.790 --> 00:02:20.050
 On each of the four parts of the data, you can consume one cycle 

00:02:20.050 --> 00:02:21.360
 And get the same results. 

00:02:21.670 --> 00:02:23.970
 This is the essence of the performance really. 

00:02:24.400 --> 00:02:28.130
 Discover every opportunity to minimize everything even the slightest pressure performance. 

00:02:28.350 --> 00:02:31.730
 Because the 16 millisecond pressures occur in one frame 

00:02:31.730 --> 00:02:34.170
 Is all it takes to destroy your frame rate. 

00:02:34.830 --> 00:02:37.510
 To see other improvements and more performance tips, 

00:02:37.510 --> 00:02:40.330
 Check out the rest of Android Performance Patterns, 

00:02:40.330 --> 00:02:43.550
 Think about joining the G + forum for tips, guidance, and help. 

00:02:43.550 --> 00:02:46.490
 But more importantly, keep calm, collect your code information 

00:02:46.490 --> 00:02:48.510
 Always remember that performance is important. 

