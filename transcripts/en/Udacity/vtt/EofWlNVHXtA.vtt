WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
This homework concerns anagrams.

00:00:02.000 --> 00:00:06.000
Now, an anagram is a rearrangement of letters in a word or phrase

00:00:06.000 --> 00:00:09.000
to form new words or phrases.

00:00:09.000 --> 00:00:15.000
For example, an anagram of the phrase ANAGRAMS could be--

00:00:15.000 --> 00:00:24.000
we'd start pulling out letters and we could say AN, and then maybe ARM,

00:00:24.000 --> 00:00:31.000
and then we're left with GAS--or we could write that as SAG.

00:00:31.000 --> 00:00:37.000
This phrase is an anagram of that one, because it uses all and no more of the letters.

00:00:37.000 --> 00:00:41.000
It's okay to have extra spaces in between the words here.

00:00:41.000 --> 00:00:43.000
There could have been extra spaces between the words here.

00:00:43.000 --> 00:00:49.000
It could have been a multi-word phrase. Spaces don't matter. Just that you use up all the letters.

00:00:49.000 --> 00:00:52.000
Your task is going to be to write the function anagrams(),

00:00:52.000 --> 00:00:57.000
which takes as input a phrase, which is a string like the string ANAGRAMS

00:00:57.000 --> 00:01:00.000
or it could be a string with multiple words separated by spaces,

00:01:00.000 --> 00:01:06.000
and then an optional argument saying what's the shortest word you're going to accept in the answer?

00:01:06.000 --> 00:01:10.000
Here we allow two-letter words and up.

00:01:10.000 --> 00:01:15.000
If we wanted we could say we'll only allow three letter words and up or so on.

00:01:15.000 --> 00:01:22.000
This is going to return a set of phrases which may be multi-word phrases like that.

00:01:22.000 --> 00:01:26.000
Now, we'll be generating all possibilities from the words in the dictionary,

00:01:26.000 --> 00:01:29.000
so these words are all in the dictionary.

00:01:29.000 --> 00:01:35.000
But notice that for these three words, they could appear in any of six possible orders--

00:01:35.000 --> 00:01:41.000
3! possible orders--and it would be kind of boring and repetitious to see all of those.

00:01:41.000 --> 00:01:45.000
We're only going to show out of each of those six possibilities--

00:01:45.000 --> 00:01:50.000
or N! possibilities for an N word phrase--

00:01:50.000 --> 00:01:53.000
only show the one that's in alphabetical order.

00:01:53.000 --> 00:01:57.000
Here the word AN is alphabetically before the word ARM,

00:01:57.000 --> 00:02:02.000
which is alphabetically before the word SAG, so that's the representation we've shown

00:02:02.000 --> 00:02:04.000
out of the six possibilities.

00:02:04.000 --> 00:02:08.000
I want you to generate that set, and you can use things that we've had before

00:02:08.000 --> 00:02:13.000
like the set of words and prefixes that we've already defined.

00:02:13.000 --> 00:02:17.000
You might find it useful to reuse functions such as find&lt;u&gt;words().&lt;/u&gt;

00:02:17.000 --> 00:02:21.000
Here's a skeleton of the function with its signature.

00:02:21.000 --> 00:02:25.000
It's going to return a set of words and here are some examples

00:02:25.000 --> 00:02:31.000
of calling anagrams(), checking to see some of the results are a member of the set,

00:02:31.000 --> 00:02:36.000
and here we've listed the complete set against our small dictionary of works

00:02:36.000 --> 00:02:39.000
for anagrams of the words PYTHONIC.

00:02:39.000 --> 00:02:44.000
I notice here that we have HYP NO TIC, but not HYPNOTIC,

00:02:44.000 --> 00:02:47.000
because HYPNOTIC happened not to be in our dictionary

00:02:47.000 --> 00:02:50.000
even though HYPNOTIC is an anagram of PYTHONIC.

00:02:50.000 --> 00:02:54.000
Go ahead and write your code here and feel free to copy and paste

00:02:54.000 --> 99:59:59.000
whatever previous code you need.

