WEBVTT
Kind: captions
Language: en

00:00:09.970 --> 00:00:10.670
STEVEN BAZYL: Hi, everyone.

00:00:10.670 --> 00:00:14.220
And welcome to this week's
"Google Developers Live" for

00:00:14.220 --> 00:00:15.280
Google Drive.

00:00:15.280 --> 00:00:18.070
I'm Steven Bazyl, joined
here with Ali Afshar.

00:00:18.070 --> 00:00:18.860
ALI AFSHAR: Hi.

00:00:18.860 --> 00:00:21.470
STEVEN BAZYL: And today we are
going to talk about a couple

00:00:21.470 --> 00:00:25.450
of tips that you can use to
increase the performance of

00:00:25.450 --> 00:00:27.810
your application and your
integration with Drive.

00:00:27.810 --> 00:00:30.810
These are going to be a couple
small things, but they are

00:00:30.810 --> 00:00:32.990
pretty important and can
actually have a pretty

00:00:32.990 --> 00:00:36.482
dramatic impact on how
your apps perform.

00:00:36.482 --> 00:00:39.150
Let's start with a really
simple one.

00:00:39.150 --> 00:00:41.390
We have in the API a couple of
the different operations, your

00:00:41.390 --> 00:00:43.230
standard RESTful API.

00:00:43.230 --> 00:00:46.130
And we have a verb for patch.

00:00:46.130 --> 00:00:49.465
And for those who don't know
what patch is, it's a way of

00:00:49.465 --> 00:00:52.070
doing partial updates for a
resource so you can only send

00:00:52.070 --> 00:00:55.210
the modified fields.

00:00:55.210 --> 00:00:56.540
Small bit of advice--

00:00:56.540 --> 00:00:58.020
don't use it.

00:00:58.020 --> 00:00:59.540
It's really simple.

00:00:59.540 --> 00:01:01.940
Actually, the way the Drive API
works, you can just do a

00:01:01.940 --> 00:01:04.920
regular update on a resource
with sparse fields, and it

00:01:04.920 --> 00:01:07.305
will work fine.

00:01:07.305 --> 00:01:11.290
Do you know why it actually ends
up being more efficient?

00:01:11.290 --> 00:01:15.330
ALI AFSHAR: So I have an idea,
but just to get it correct.

00:01:15.330 --> 00:01:19.190
You have files, and then you
only have a few of the values

00:01:19.190 --> 00:01:21.070
that you want to
update in the--

00:01:21.070 --> 00:01:22.030
STEVEN BAZYL: [LAUGHING]

00:01:22.030 --> 00:01:23.280
Sorry.

00:01:25.390 --> 00:01:26.440
Sorry, sorry.

00:01:26.440 --> 00:01:28.840
I'm just trolling Ali here.

00:01:28.840 --> 00:01:30.990
ALI AFSHAR: So you have a file
that you want to update to

00:01:30.990 --> 00:01:31.750
Google Drive.

00:01:31.750 --> 00:01:37.660
And you've only got some of
the parameters you want to

00:01:37.660 --> 00:01:38.280
actually update.

00:01:38.280 --> 00:01:39.345
So you've only got the title.

00:01:39.345 --> 00:01:40.730
You've only got the
description.

00:01:40.730 --> 00:01:42.180
You don't have everything.

00:01:42.180 --> 00:01:45.900
Now, that's what patch exists
for is so that you can send

00:01:45.900 --> 00:01:46.800
just a few of these.

00:01:46.800 --> 00:01:48.650
But actually, in the Drive
API, it doesn't make any

00:01:48.650 --> 00:01:49.020
difference.

00:01:49.020 --> 00:01:53.860
You may as well update with
an impartial or sparse

00:01:53.860 --> 00:01:54.690
file, as you say.

00:01:54.690 --> 00:01:56.190
STEVEN BAZYL: Right, and this
actually turns out to be kind

00:01:56.190 --> 00:01:59.660
of a small internal
implementation detail for how

00:01:59.660 --> 00:02:01.280
patches work because we actually
end up having to

00:02:01.280 --> 00:02:03.250
re-read the entry back.

00:02:03.250 --> 00:02:05.700
So it actually costs us
a little bit more.

00:02:05.700 --> 00:02:08.509
In terms of actual performance,
it's not going to

00:02:08.509 --> 00:02:10.680
make a huge difference
for your application.

00:02:10.680 --> 00:02:14.370
But it is a lot more
resource-efficient for us if

00:02:14.370 --> 00:02:15.960
you just do a regular update.

00:02:15.960 --> 00:02:19.685
And I'm glad that we'll have
some GDL bloopers for after.

00:02:19.685 --> 00:02:22.360
We're just in a very
giddy mood today.

00:02:22.360 --> 00:02:26.840
So anyway, the next one
is batching requests.

00:02:26.840 --> 00:02:29.520
So batch is a way that you can
bundle multiple requests

00:02:29.520 --> 00:02:33.550
together into a single
API request.

00:02:33.550 --> 00:02:36.200
You can use it for all sorts of
things, with the exception

00:02:36.200 --> 00:02:38.320
of uploads.

00:02:38.320 --> 00:02:41.590
But that aside, you actually
still have a lot of options.

00:02:41.590 --> 00:02:43.700
And there's a couple really
good use cases for things,

00:02:43.700 --> 00:02:48.160
like if you're listing the
contents of a folder, and you

00:02:48.160 --> 00:02:51.980
want to then expand things like
the custom properties or

00:02:51.980 --> 00:02:56.040
the ACLs on a file which
require separate calls.

00:02:56.040 --> 00:02:58.640
If you have, say, a page of
files, say 20 files for a

00:02:58.640 --> 00:03:00.770
page, you can then batch up
the subsequent request to

00:03:00.770 --> 00:03:04.360
expand out whatever additional
properties you want.

00:03:04.360 --> 00:03:07.670
And actually, it has a nice
benefit in that it does a

00:03:07.670 --> 00:03:08.640
couple things for you.

00:03:08.640 --> 00:03:12.330
So one is there's a little bit
less overhead in the HTTP

00:03:12.330 --> 00:03:16.260
requests, so all the headers
that you would normally send

00:03:16.260 --> 00:03:19.060
plus the fact that you're
usually setting up and tearing

00:03:19.060 --> 00:03:20.370
down a connection each time.

00:03:20.370 --> 00:03:22.720
There's a lot of overhead.

00:03:22.720 --> 00:03:24.780
The other one is, while
you can do the

00:03:24.780 --> 00:03:27.420
parallel request yourself--

00:03:27.420 --> 00:03:29.630
you can certainly do a whole
bunch of basic requests and

00:03:29.630 --> 00:03:31.280
then gather up the results--

00:03:31.280 --> 00:03:33.390
the batch actually just handles
all that for you.

00:03:33.390 --> 00:03:36.100
And this is implemented in our
client libraries in a way that

00:03:36.100 --> 00:03:38.570
makes it super easy to do a
whole bunch of parallel

00:03:38.570 --> 00:03:41.780
requests together.

00:03:41.780 --> 00:03:43.360
ALI AFSHAR: And that's
interesting, because in our

00:03:43.360 --> 00:03:45.930
old APIs, if you ever used the
Documents List API, for

00:03:45.930 --> 00:03:48.480
example, you could only
batch the same

00:03:48.480 --> 00:03:49.740
type of requests together.

00:03:49.740 --> 00:03:53.570
So you could say, I only want to
batch 50 Get requests in a

00:03:53.570 --> 00:03:54.300
single batch.

00:03:54.300 --> 00:03:57.260
But now with our newer Drive
API, you can actually batch

00:03:57.260 --> 00:03:58.850
different types of requests.

00:03:58.850 --> 00:03:59.280
STEVEN BAZYL: That's
true, right.

00:03:59.280 --> 00:04:03.260
You could actually update 20
files all at the same time.

00:04:03.260 --> 00:04:06.630
So if you wanted to add a
description or some properties

00:04:06.630 --> 00:04:09.280
to a set of files, you can
actually do those very

00:04:09.280 --> 00:04:11.110
efficiently.

00:04:11.110 --> 00:04:12.080
One catch--

00:04:12.080 --> 00:04:14.970
these do actually count as
separate requests from a quota

00:04:14.970 --> 00:04:16.709
perspective.

00:04:16.709 --> 00:04:20.550
And while you can certainly
do batches of up to 1,000

00:04:20.550 --> 00:04:23.590
requests, if you were to try to
do it, you'd actually start

00:04:23.590 --> 00:04:28.180
to run into your QPS limits
for an app and for a user.

00:04:28.180 --> 00:04:30.410
But still, it's a useful
technique for certain use

00:04:30.410 --> 00:04:32.380
cases where you know that you
need to do a whole bunch of

00:04:32.380 --> 00:04:36.490
the operations, and you need to
do them roughly at the same

00:04:36.490 --> 00:04:40.710
time and do that very quickly.

00:04:40.710 --> 00:04:43.670
So another one is
partial updates.

00:04:43.670 --> 00:04:44.980
This is something that
we did a blog post

00:04:44.980 --> 00:04:46.930
about just last week.

00:04:46.930 --> 00:04:50.980
And this actually has probably
the biggest impact on

00:04:50.980 --> 00:04:54.900
application, performance, and
your bandwidth utilization.

00:04:54.900 --> 00:05:00.510
So one of the things you can
do is, when you're calling

00:05:00.510 --> 00:05:04.960
Drive API, you can [? be ?] a
query parameter called Fields,

00:05:04.960 --> 00:05:08.000
list which fields that you
would like returned.

00:05:08.000 --> 00:05:12.730
And I did some testing on this
just using the common use case

00:05:12.730 --> 00:05:16.980
of listing the contents of a
folder and found that you

00:05:16.980 --> 00:05:19.280
could actually get about--

00:05:19.280 --> 00:05:22.820
for a common use case, about
90% reduction in bandwidth.

00:05:22.820 --> 00:05:26.400
And so that's huge.

00:05:26.400 --> 00:05:30.896
So it went from something
like 380 K down to 30.

00:05:30.896 --> 00:05:32.790
Actually, it was even
less of that.

00:05:32.790 --> 00:05:37.640
Throw in gzip compression, then
it goes from 30 K down to

00:05:37.640 --> 00:05:42.820
about 7, so it's actually
pretty important.

00:05:42.820 --> 00:05:45.230
And I've heard from a few people
in the community that

00:05:45.230 --> 00:05:49.680
this actually has a little bit
of a financial impact, for

00:05:49.680 --> 00:05:51.680
cases where you're buying
bandwidth and so on.

00:05:51.680 --> 00:05:53.040
ALI AFSHAR: I mean, that's
the whole point of this.

00:05:53.040 --> 00:05:55.400
Make fewer requests, that's
going to cost you less.

00:05:55.400 --> 00:05:57.800
Send less data, that's going
to cost you less.

00:05:57.800 --> 00:05:59.990
Receive less data, that's just
going to cost you less.

00:05:59.990 --> 00:06:02.550
So I mean, we don't want
you to pay more

00:06:02.550 --> 00:06:03.660
money for the stuff.

00:06:03.660 --> 00:06:04.580
That's the main thing.

00:06:04.580 --> 00:06:05.990
STEVEN BAZYL: And the
nice thing is--

00:06:05.990 --> 00:06:07.650
I mentioned gzip compression.

00:06:07.650 --> 00:06:10.820
Gzip compression has a cost
in terms of the CPU usage.

00:06:10.820 --> 00:06:12.620
We certainly still
encourage it.

00:06:12.620 --> 00:06:18.760
But if you are very sensitive to
CPU, then another way that

00:06:18.760 --> 00:06:21.370
you can reduce your bandwidth
is by limiting the amount of

00:06:21.370 --> 00:06:23.910
data that you send back
in the first place.

00:06:23.910 --> 00:06:27.645
There are some upcoming changes
we're working on in

00:06:27.645 --> 00:06:32.350
the backend that will actually
make this not just faster from

00:06:32.350 --> 00:06:36.030
a bandwidth perspective, but
actually faster from the

00:06:36.030 --> 00:06:37.670
amount of time that it takes
to actually execute the

00:06:37.670 --> 00:06:41.300
queries, to serialize the
data into a response.

00:06:41.300 --> 00:06:43.490
And so over time, this is
just going to get better

00:06:43.490 --> 00:06:44.700
and better for users.

00:06:44.700 --> 00:06:47.340
ALI AFSHAR: So right now on the
backend, we fetch all the

00:06:47.340 --> 00:06:49.210
data and then selectively
send you some back.

00:06:49.210 --> 00:06:49.930
And that's the problem there.

00:06:49.930 --> 00:06:50.740
STEVEN BAZYL: Exactly.

00:06:50.740 --> 00:06:53.810
And just the way things are
stored, it's actually very

00:06:53.810 --> 00:06:55.980
time-consuming to go and
assemble all that data.

00:06:55.980 --> 00:06:59.520
But now with these hints, we can
do a lot of optimizations

00:06:59.520 --> 00:07:01.430
to make sure that we get results
back to you as a

00:07:01.430 --> 00:07:03.380
developer a lot faster.

00:07:03.380 --> 00:07:05.730
ALI AFSHAR: So if you just want
to list the titles, the

00:07:05.730 --> 00:07:08.100
title of the files in a list,
you just ask for the title.

00:07:08.100 --> 00:07:08.370
STEVEN BAZYL: Exactly.

00:07:08.370 --> 00:07:14.200
If you did that, you'd probably
save about 95% of the

00:07:14.200 --> 00:07:14.660
actual data.

00:07:14.660 --> 00:07:17.450
It would just be completely
eliminated from the network.

00:07:17.450 --> 00:07:19.440
ALI AFSHAR: And to see how
to do that, check out

00:07:19.440 --> 00:07:19.740
Steve's blog post.

00:07:19.740 --> 00:07:21.260
STEVEN BAZYL: Yeah,
it's really easy.

00:07:21.260 --> 00:07:23.300
All the API clients
support it.

00:07:23.300 --> 00:07:24.920
And again, it's just
a query parameter.

00:07:24.920 --> 00:07:27.330
There's a little bit of an odd
syntax because these are

00:07:27.330 --> 00:07:29.450
structured responses.

00:07:29.450 --> 00:07:32.430
So if you have nested
collections or some syntax or

00:07:32.430 --> 00:07:35.100
how you would enumerate which
collections and which

00:07:35.100 --> 00:07:36.790
properties of those
collections.

00:07:36.790 --> 00:07:39.050
But this is all documented
pretty well on

00:07:39.050 --> 00:07:41.835
developers.google.com.

00:07:41.835 --> 00:07:45.490
The last one, which doesn't
necessarily connect back to

00:07:45.490 --> 00:07:52.080
performance quite as much, is
just proper error handling.

00:07:52.080 --> 00:07:55.740
So there's a couple different
cases for errors.

00:07:55.740 --> 00:07:57.740
So some of the common ones, you
get things like, you're

00:07:57.740 --> 00:07:59.140
unauthorized.

00:07:59.140 --> 00:08:03.100
You may be rate limited, so that
would be a 403 response.

00:08:03.100 --> 00:08:08.220
And you also run into occasional
500 errors.

00:08:08.220 --> 00:08:10.380
These aren't necessarily things
that you can control.

00:08:10.380 --> 00:08:13.190
When you hit a 500, it's usually
some intermittent

00:08:13.190 --> 00:08:16.640
error, a timeout, heavy
load on our side.

00:08:16.640 --> 00:08:21.030
But how you respond to those
errors can actually have an

00:08:21.030 --> 00:08:23.920
impact, particularly in the case
of high-load situations.

00:08:23.920 --> 00:08:26.870
So what are some of the
strategies people should use

00:08:26.870 --> 00:08:30.400
for retrying on errors?

00:08:30.400 --> 00:08:33.210
ALI AFSHAR: So in general,
retry on errors.

00:08:33.210 --> 00:08:35.370
I mean, I think that's
a general point.

00:08:35.370 --> 00:08:38.740
Because sometimes, as you
mentioned, intermittent errors

00:08:38.740 --> 00:08:39.480
and that kind of thing.

00:08:39.480 --> 00:08:41.500
But we, the API--

00:08:41.500 --> 00:08:42.980
it's a massive distributive
system.

00:08:42.980 --> 00:08:45.140
And we kind of expect
you to retry.

00:08:45.140 --> 00:08:45.650
STEVEN BAZYL: Right.

00:08:45.650 --> 00:08:47.390
But you don't want to just
retry immediately, right?

00:08:47.390 --> 00:08:48.100
ALI AFSHAR: No, no, exactly.

00:08:48.100 --> 00:08:49.240
STEVEN BAZYL: Because otherwise,
we're just going to

00:08:49.240 --> 00:08:52.210
hammer the server, and things
aren't going to improve.

00:08:52.210 --> 00:08:53.580
ALI AFSHAR: So as always,
you should use

00:08:53.580 --> 00:08:54.805
an exponential backoff.

00:08:54.805 --> 00:08:58.030
So try again, try again in an
exponentially increasing

00:08:58.030 --> 00:09:01.220
amount of time, add a little
jitter, of course.

00:09:01.220 --> 00:09:02.790
And yeah, just do it.

00:09:02.790 --> 00:09:04.650
Usually, it will succeed.

00:09:04.650 --> 00:09:07.600
And you'll see, if you check
out Stack Overflow,

00:09:07.600 --> 00:09:09.340
occasionally people do
get these errors.

00:09:09.340 --> 00:09:11.180
And they're fixed just
by retrying.

00:09:11.180 --> 00:09:13.120
STEVEN BAZYL: Yeah, exactly.

00:09:13.120 --> 00:09:14.650
One thing is, don't--

00:09:14.650 --> 00:09:17.110
on that initial retry, make
sure you put in a delay.

00:09:17.110 --> 00:09:19.550
It should be at least
a second.

00:09:19.550 --> 00:09:22.740
Obviously, if you're doing
things in user time, you don't

00:09:22.740 --> 00:09:24.680
want to go too long
of a delay.

00:09:24.680 --> 00:09:27.080
But if it's something more
programmatic, you're doing a

00:09:27.080 --> 00:09:29.640
background job, you can actually
even back off a

00:09:29.640 --> 00:09:32.990
little bit more aggressively
and give the

00:09:32.990 --> 00:09:35.840
system time to recover.

00:09:35.840 --> 00:09:38.010
And the jitter is actually
really important.

00:09:38.010 --> 00:09:40.470
And for those who don't know
this concept of jitter, it's

00:09:40.470 --> 00:09:43.070
basically adding in
some randomized

00:09:43.070 --> 00:09:44.450
value into that delay.

00:09:44.450 --> 00:09:49.560
So if you just did a fixed
exponential backoff, you might

00:09:49.560 --> 00:09:51.500
do a delay of 1 second,
then 2 seconds, then 4

00:09:51.500 --> 00:09:52.990
seconds, and so on.

00:09:52.990 --> 00:09:54.700
The problem is that if you have
a lot of threads doing

00:09:54.700 --> 00:09:57.040
this and they all happen to hit
the same error at the same

00:09:57.040 --> 00:09:59.730
time, well, they're all going
to retry at the same time.

00:09:59.730 --> 00:10:03.120
And you end up in this kind of
wave, the cycle of servers

00:10:03.120 --> 00:10:04.760
just getting hammered
by all of these

00:10:04.760 --> 00:10:07.060
clients acting in lockstep.

00:10:07.060 --> 00:10:10.230
Adding a little bit of
randomization gives those

00:10:10.230 --> 00:10:13.300
clients a little bit of time to
differentiate and get on to

00:10:13.300 --> 00:10:16.640
a different period for when
they're going to retry and

00:10:16.640 --> 00:10:18.410
start to smooth out the traffic
a little bit more.

00:10:18.410 --> 00:10:26.000
So a reasonable value
could be maybe 10%.

00:10:26.000 --> 00:10:30.690
Just pick a random value and
then add or subtract.

00:10:30.690 --> 00:10:33.700
But it'll make things recover a
lot faster if you have those

00:10:33.700 --> 00:10:35.510
types of things.

00:10:35.510 --> 00:10:39.000
So are there any other things
you can think of that would

00:10:39.000 --> 00:10:40.640
help people?

00:10:40.640 --> 00:10:43.690
So there's low-level things
like gzip and so on that

00:10:43.690 --> 00:10:44.230
people could do.

00:10:44.230 --> 00:10:48.460
But those are usually
taken automatically

00:10:48.460 --> 00:10:49.050
by the client libraries.

00:10:49.050 --> 00:10:51.200
ALI AFSHAR: So those
are the things--

00:10:51.200 --> 00:10:56.140
remember batch requests, catch
errors, and retry.

00:10:56.140 --> 00:10:58.500
Partial fetch here is really
important, so passing the

00:10:58.500 --> 00:11:00.470
fields parameter to just
get back what you want.

00:11:00.470 --> 00:11:04.800
And patch sounds like a good
idea, but it's probably better

00:11:04.800 --> 00:11:07.550
to just do an update, a partial
update at the time.

00:11:07.550 --> 00:11:08.290
But those are our things.

00:11:08.290 --> 00:11:09.710
And remember why you do this.

00:11:09.710 --> 00:11:10.530
It just saves you bandwidth.

00:11:10.530 --> 00:11:12.580
It saves you time.

00:11:12.580 --> 00:11:15.070
And sometimes it saves us time,
which obviously isn't

00:11:15.070 --> 00:11:15.650
your main concern.

00:11:15.650 --> 00:11:18.820
But it just means you get the
requests back quicker, which

00:11:18.820 --> 00:11:19.750
is obviously going to be good.

00:11:19.750 --> 00:11:21.980
You get better latency
in your application.

00:11:21.980 --> 00:11:22.530
So that's good.

00:11:22.530 --> 00:11:23.920
STEVEN BAZYL: Yep.

00:11:23.920 --> 00:11:25.830
So that's all for this week.

00:11:25.830 --> 00:11:28.040
Next week, I am not entirely
sure if we have

00:11:28.040 --> 00:11:29.780
our topics set for--

00:11:29.780 --> 00:11:32.680
that we may actually skip, but
we'll be back certainly the

00:11:32.680 --> 00:11:36.400
week after for our normal
schedule with Apps of the Week

00:11:36.400 --> 00:11:39.320
and hopefully, a few guests.

00:11:39.320 --> 00:11:41.930
We'll actually be
out next week.

00:11:41.930 --> 00:11:44.850
And yeah, until then--

00:11:44.850 --> 00:11:45.730
ALI AFSHAR: Thanks very much.

00:11:45.730 --> 00:11:46.990
STEVEN BAZYL: --thank
you all for coming.

00:11:46.990 --> 00:11:48.240
ALI AFSHAR: Bye.

