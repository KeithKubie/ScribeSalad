WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.710
An image filter is something that takes an image proaches it in some way and outputs an image in response

00:00:04.710 --> 00:00:07.469
So last time we talked about Kernel convolution

00:00:07.470 --> 00:00:08.410
And I did

00:00:08.410 --> 00:00:13.139
Gaussian Blur and mean Blur as a couple of examples of a sort of thing you can convey over an image today

00:00:13.139 --> 00:00:17.549
We're going to talk a little bit about a different type of Kernel convolution that is the edge detection

00:00:17.549 --> 00:00:19.549
 

00:00:19.810 --> 00:00:23.850
The process will be using in this video is still Kernel convolution like we used in the last video

00:00:23.859 --> 00:00:28.349
So if you haven't seen that video you might want to go back just to sort of make sure you absolutely know what's going on

00:00:28.349 --> 00:00:34.349
Edge Detection is simply a case of trying to find the regions in an image where we have a sharp change in intensity or a

00:00:34.350 --> 00:00:39.719
Sharp change in color a high value indicates a steep change and a low value indicates a shallow change

00:00:40.329 --> 00:00:41.620
A

00:00:41.620 --> 00:00:47.939
Very common operator for doing this is a sobel operator what it is is an approximation to a derivative of an image

00:00:47.940 --> 00:00:50.825
So there's its separate in the y and the

00:00:50.825 --> 00:00:51.690
x directions

00:00:51.690 --> 00:00:54.180
so if we look at the x direction then

00:00:54.370 --> 00:00:57.989
The gradient of an image in the x direction is equal to this operator here

00:00:57.989 --> 00:01:01.439
This is our Kernel 3 by 3 which is nice and small, so it's quite quick

00:01:01.449 --> 00:01:06.509
So we have minus numbers on the left hand side and positive numbers on the right hand side and we're sort of

00:01:06.850 --> 00:01:10.470
Preserving a little bit the center pixels because we've got these two values here

00:01:10.470 --> 00:01:12.470
Which is slightly higher waited for these ones?

00:01:12.520 --> 00:01:14.189
So what we're doing here

00:01:14.189 --> 00:01:19.979
Essentially is trying to find out the amount of difference between this region of our image and this region of our image here

00:01:20.500 --> 00:01:26.189
by simply taking one away from the other so we'll pass this just like before will pass this over every pixel of our image and

00:01:26.189 --> 00:01:29.039
It will give us a response for this location here

00:01:29.170 --> 00:01:32.729
Bearing in mind of pixels around it so because you've got zero down the middle

00:01:32.729 --> 00:01:34.380
It's not going to do anything up and down

00:01:34.380 --> 00:01:39.390
It's just looking yet to see if there is a if you like a vertical line with that view yeah

00:01:39.390 --> 00:01:45.390
This is symmetrical if vertically okay, so it's not going to do anything to do with Edges

00:01:45.390 --> 00:01:49.769
But orientated horizontally in the image, so if you've got a bit of image say, but looks a bit like this

00:01:49.770 --> 00:01:51.689
Let's draw a bit of image. These are my pixels

00:01:51.689 --> 00:01:55.589
They will not all the same size in the last video we use an image that had 50 in these

00:01:55.899 --> 00:01:57.840
values and a hundred over here

00:01:57.840 --> 00:02:01.259
So it was an edge right if this is our image right here is an edge

00:02:01.570 --> 00:02:06.839
Fairly obviously we can see that, but a computer can't, so if we put our sobel operator here

00:02:07.000 --> 00:02:10.379
Then what we essentially doing is doing 100 times 1 plus

00:02:11.110 --> 00:02:12.960
100 x 2 plus 100

00:02:12.960 --> 00:02:18.469
1 plus 50 x minus 1 plus 50 x minus 2 plus 50 x minus one and get gives us an output of

00:02:18.570 --> 00:02:20.010
200 which is

00:02:20.010 --> 00:02:24.890
Reasonable ok and you can imagine if all of these values [are] the same, so if they were all 50 throughout

00:02:24.890 --> 00:02:28.850
Then you just get 0 so this will provide a big response

00:02:29.040 --> 00:02:32.510
Where one side is bright or dark of any other side and yes?

00:02:32.510 --> 00:02:37.699
It's orientated light- left or left [is] right, but we'll get rid of that later at the actual Direction

00:02:37.710 --> 00:02:43.729
And we'll just so so the if you like the sign of the output it doesn't matter no for this. It doesn't ok

00:02:44.430 --> 00:02:45.600
now

00:02:45.600 --> 00:02:51.139
This is only half the battle right so we've only calculated the x direction we want to calculate the y direction

00:02:51.690 --> 00:02:55.520
You know people already managed to guess what the kernel for this is so g of y?

00:02:55.520 --> 00:02:56.070
 

00:02:56.070 --> 00:03:00.290
Ok and it's minus 1 minus 2 minus 1 1 to

00:03:01.110 --> 00:03:03.979
100 there we go ok so exactly the same

00:03:03.980 --> 00:03:09.380
But you have all tension ok so this will produce a response of 0 on this edge

00:03:09.959 --> 00:03:15.679
Because this row is the same as this rope so big in a cancel each other out in normal photographs

00:03:15.680 --> 00:03:20.209
This is never going to come up. There's going to be something going on right? It's that's interesting

00:03:20.760 --> 00:03:24.169
Which direction it is we don't know the output of either of these filters?

00:03:24.300 --> 00:03:27.139
Individually could be negative if one side is much bigger than the other

00:03:27.540 --> 00:03:31.069
Ok so what we're going to get if we put tourneys into an image. Let's imagine

00:03:31.070 --> 00:03:36.290
We stretch those negative and positive values to between or 255 and just out put it into a grayscale image

00:03:36.390 --> 00:03:38.929
Then what we'll have is an image of it's mostly gray

00:03:39.180 --> 00:03:42.590
with black on one side of each Edge and white on the other side

00:03:42.660 --> 00:03:45.290
Depending on the orientation of the Edge and the same for the y

00:03:45.290 --> 00:03:48.859
But what we really want to do is take both of those values and turn them into one

00:03:49.140 --> 00:03:50.790
How big is this Edge?

00:03:50.790 --> 00:03:54.769
So when you say about the black and the white that's because you get in a plus and a minus. Yes

00:03:54.840 --> 00:03:55.340
Yes

00:03:55.340 --> 00:04:00.110
so if you take if you take let's say a value of minus 1 to plus 1 and you scale if naught to

00:04:00.180 --> 00:04:06.200
255 and all the minus values are going to be the blacks and all the positive values of in a bid the whites up above

00:04:06.450 --> 00:04:10.489
128 so at the moment what we have is a set of values that represents

00:04:10.489 --> 00:04:15.619
How strong our gradient is vertically in how strong it is horizontally and what we really want is the total of those things?

00:04:15.780 --> 00:04:19.669
Ok so just like with a stand and kind of hypotenuse of a triangle

00:04:19.669 --> 00:04:25.038
We can basically square both these values add them together and square root it and that will give you the general magnitude

00:04:25.039 --> 00:04:27.169
So I'll write that down and then remove more sending

00:04:28.560 --> 00:04:31.339
so we've got a value of a gradient in the x-Direction and

00:04:31.560 --> 00:04:36.649
We've got a value of the gradient in the [y] [direction] and the total gradient the

00:04:36.930 --> 00:04:39.859
magnitude of a gradient is given by the square root of

00:04:40.529 --> 00:04:46.669
G x squared plus g y squared ok you'll see but what this does by squaring a man n

00:04:46.669 --> 00:04:49.938
Square Routine and we also remove a sign have you got an eye on the spot on numberphile?

00:04:49.939 --> 00:04:52.009
Is this is this why we're doing equation though?

00:04:52.009 --> 00:04:56.778
What don't put me on there because my maths is it looks good at but it falls down quick

00:04:57.870 --> 00:05:01.340
So you can see is from if we're squaring them at square rooting them then that removes the sign?

00:05:01.340 --> 00:05:07.819
So this magnitude is now positive all the time ok and a value of zero will be an absolutely consistent color

00:05:08.039 --> 00:05:10.039
so this is this is a

00:05:10.199 --> 00:05:15.528
Function to get rid of the sign and show the time yeah and now if the gradient in the x direction is big

00:05:15.529 --> 00:05:20.599
But a gradient in the y direction is small, you'll get to moderately large gradient if the gradient both directions is big

00:05:20.599 --> 00:05:21.800
You'll get a pretty large gradient

00:05:21.800 --> 00:05:25.159
And so it will basically be how big is the edge at this location?

00:05:25.650 --> 00:05:28.339
Ok and it will be a black and white image if we scale it up

00:05:28.469 --> 00:05:30.469
Another interesting thing is because we know the signed

00:05:30.479 --> 00:05:35.809
Gradient in the x and the y directions we can calculate the angle of the of the edge as well

00:05:35.810 --> 00:05:38.359
so the orientation of the edge is given by

00:05:39.089 --> 00:05:41.089
inverse tan Arc tan of

00:05:41.370 --> 00:05:48.319
Gui over g x so essentially if you take the gradient result from your gy and a great result from of Gx

00:05:48.569 --> 00:05:51.139
You divide them and then you calculate the inverse tan of that

00:05:51.139 --> 00:05:56.959
It will give you a value in Radians or degrees that says what orientation in the image is

00:05:57.180 --> 00:06:02.750
That particular pixel and that can be really useful for finding structures or finding objects and things like that

00:06:02.939 --> 00:06:08.088
It's unusual for so bell if ever to be run on color ok this is a grayscale operator

00:06:08.089 --> 00:06:14.299
So obviously you'll need to convert your image. If it's in color to greyscale first so that we're talking just about change in intensity

00:06:15.389 --> 00:06:20.898
Also sobel is very very it's not with her could you run it on color out of interest?

00:06:21.779 --> 00:06:22.620
you could

00:06:22.620 --> 00:06:28.189
Will it give you a wacky output it would get well you'd have three values of Edge Detection for the different color channels on what?

00:06:28.189 --> 00:06:30.189
entire short that would mean

00:06:31.080 --> 00:06:35.750
So but yes, you're suppose you could I don't tend to so

00:06:36.930 --> 00:06:38.930
The other thing is that so bills very

00:06:39.629 --> 00:06:43.639
It's been be noisy. Okay. We're using a small Kernel and

00:06:44.790 --> 00:06:45.960
images change a lot

00:06:45.960 --> 00:06:47.669
so you're going to see a [lot] of

00:06:47.669 --> 00:06:52.909
edges where it's not actually really an edge in our sense of the word another thing would be if you had a camera with a

00:06:52.910 --> 00:06:55.219
Fairly high iso settings you had a lot of Grainy noise

00:06:55.289 --> 00:06:56.820
that's going to produce the thought of

00:06:56.820 --> 00:07:02.539
Low-level Edge over everything which is not all we want so it's very common to use a gaussian Blur first

00:07:02.940 --> 00:07:09.619
Over sober , before sobel edge detector just to get rid of the low the high frequency stuff and keep the low frequency big Walls

00:07:09.720 --> 00:07:14.929
That we're looking for you would do color to greyscale conversion, then you would use a gaussian filter

00:07:15.539 --> 00:07:19.849
To blow it a small one not too big and then you would use a sober Edge detector

00:07:19.850 --> 00:07:25.369
And that will produce your nice black and white image where big white bright edges and dark everything else

00:07:29.240 --> 00:07:32.690
Written some quite cool code which has got loads of comments in so everyone who?

00:07:33.419 --> 00:07:35.419
Even if you don't code, you should better follow it along

00:07:36.090 --> 00:07:41.750
There'll be people who complain this in C-sharp. I don't care about those people okay, if you want we can record a nice

00:07:41.759 --> 00:07:44.799
Why I see Sharp rocks, rant, and you can provide no mushy

