WEBVTT
Kind: captions
Language: en

00:00:08.483 --> 00:00:09.481
METE ATAMEL: Hello.

00:00:09.481 --> 00:00:10.490
MARC COHEN: Hello.

00:00:10.490 --> 00:00:13.100
METE ATAMEL: It's great to
see so many of you here.

00:00:13.100 --> 00:00:14.230
My name is Mete Atamel.

00:00:14.230 --> 00:00:17.010
I am a developer advocate
at Google based in London.

00:00:17.010 --> 00:00:20.275
MARC COHEN: [NON-ENGLISH SPEECH]

00:00:26.144 --> 00:00:27.810
METE ATAMEL: I don't
know what you said,

00:00:27.810 --> 00:00:30.880
but hopefully it
was something good.

00:00:30.880 --> 00:00:34.570
MARC COHEN: I'm not totally
sure either but I think I said,

00:00:34.570 --> 00:00:35.260
good morning.

00:00:35.260 --> 00:00:38.020
I'm Marc, and I welcome
you to our session.

00:00:38.020 --> 00:00:39.160
METE ATAMEL: Great.

00:00:39.160 --> 00:00:41.830
So first of all, before
we start our talk,

00:00:41.830 --> 00:00:44.740
you might be wondering,
what's a developer advocate?

00:00:44.740 --> 00:00:47.120
One of my coworkers and a
good friend of mine, Philippe

00:00:47.120 --> 00:00:48.536
[? Hoffa-- ?] you
might know him--

00:00:48.536 --> 00:00:52.690
he basically says a developer
advocate is a software engineer

00:00:52.690 --> 00:00:54.852
who has license to speak.

00:00:54.852 --> 00:00:56.560
I think that kind of
captures what we do.

00:00:56.560 --> 00:00:59.212
We are software
engineers by experience,

00:00:59.212 --> 00:01:01.420
but we come to events like
this and talk about Google

00:01:01.420 --> 00:01:03.610
Cloud-related technologies.

00:01:03.610 --> 00:01:06.502
At the same time, we
want to get your feedback

00:01:06.502 --> 00:01:07.960
and bring that back
to engineering.

00:01:07.960 --> 00:01:10.955
So after this talk, we
have office hours Level 3.

00:01:10.955 --> 00:01:13.330
So if you have any questions
or any feedback about Google

00:01:13.330 --> 00:01:14.841
Cloud, please come and see us.

00:01:14.841 --> 00:01:16.840
So today, we're going to
talk about fundamentals

00:01:16.840 --> 00:01:19.180
of Google Cloud Platform.

00:01:19.180 --> 00:01:21.410
With have a bit.ly
for the slides.

00:01:21.410 --> 00:01:24.680
So if you want the slides,
just get it from there.

00:01:24.680 --> 00:01:27.160
And I've been with Google
for one and a half years,

00:01:27.160 --> 00:01:29.260
but Marc has been
around more than me.

00:01:29.260 --> 00:01:31.420
I think he has been
there since 2011.

00:01:31.420 --> 00:01:34.660
So, Marc, do you want to tell
us about those good old days

00:01:34.660 --> 00:01:36.617
in 2011, how it was?

00:01:36.617 --> 00:01:37.840
MARC COHEN: Sure.

00:01:37.840 --> 00:01:42.460
So back when I started, Google
Cloud Platform was quite a bit

00:01:42.460 --> 00:01:44.170
simpler.

00:01:44.170 --> 00:01:46.210
This is actually what
the Platform website

00:01:46.210 --> 00:01:48.130
looked like in 2012.

00:01:48.130 --> 00:01:49.780
There were four products--

00:01:49.780 --> 00:01:53.620
App Engine, Compute Engine,
Cloud Storage, and BigQuery.

00:01:53.620 --> 00:01:55.360
It was really nice and easy.

00:01:55.360 --> 00:01:58.060
You knew exactly which
tool to use for which job.

00:01:58.060 --> 00:02:00.910
You could really get your
head around the entire product

00:02:00.910 --> 00:02:02.080
offering.

00:02:02.080 --> 00:02:06.290
So those were kind of the
good old days, for me.

00:02:06.290 --> 00:02:07.930
This is what it's like nowadays.

00:02:07.930 --> 00:02:12.140
We have more than 60 Google
Cloud product services,

00:02:12.140 --> 00:02:16.990
and so many that I can't even
fit them all on one slide.

00:02:16.990 --> 00:02:18.920
So there's a lot of
choices out there.

00:02:18.920 --> 00:02:19.840
METE ATAMEL: Well,
that's good, right, Marc?

00:02:19.840 --> 00:02:22.280
I mean, more services,
more tools, more choice,

00:02:22.280 --> 00:02:24.124
that can be only good, right?

00:02:24.124 --> 00:02:26.290
MARC COHEN: Well, it's kind
of a mixed bag actually.

00:02:26.290 --> 00:02:29.230
The good news is we have
tons of capabilities.

00:02:29.230 --> 00:02:32.590
So you can build almost
anything you can imagine now,

00:02:32.590 --> 00:02:35.050
and it's a very
powerful platform.

00:02:35.050 --> 00:02:37.510
But the downside is there's
kind of a high cognitive

00:02:37.510 --> 00:02:39.097
load associated with
all that choice.

00:02:39.097 --> 00:02:40.930
You have to actually
think a little bit more

00:02:40.930 --> 00:02:42.846
and understand a little
bit more to figure out

00:02:42.846 --> 00:02:45.790
which tool to use, when to
use it, and how to use it.

00:02:49.000 --> 00:02:52.450
Greg Wilson came up with
this chart, which I think

00:02:52.450 --> 00:02:53.610
is a really nice reference.

00:02:53.610 --> 00:02:56.260
And by the way, for anybody
that is photographing,

00:02:56.260 --> 00:02:58.340
we do have these slides
online right now.

00:02:58.340 --> 00:03:00.030
So we'll share this
with you after.

00:03:00.030 --> 00:03:02.840
I mean, feel free to photograph,
but we'll share this with you.

00:03:02.840 --> 00:03:05.740
It's actually up now.

00:03:05.740 --> 00:03:10.060
But this chart summarizes every
cloud product, every Google

00:03:10.060 --> 00:03:12.220
Cloud product, in
four words or less.

00:03:12.220 --> 00:03:14.830
So it's a really nice synopsis.

00:03:14.830 --> 00:03:18.077
Today, we're going to focus
on the four highlighted areas.

00:03:18.077 --> 00:03:19.660
And even there, we're
not going to get

00:03:19.660 --> 00:03:22.360
to go too deeply because we
have 30 minutes to cover all

00:03:22.360 --> 00:03:24.100
this stuff, and each
of these products

00:03:24.100 --> 00:03:26.330
we could spend hours on it.

00:03:26.330 --> 00:03:28.810
But we'll focus on
those four areas.

00:03:28.810 --> 00:03:30.857
We'll probably touch
on a few others.

00:03:30.857 --> 00:03:32.440
And we'll try to
just kind of give you

00:03:32.440 --> 00:03:34.960
a high-level view,
essentially a roadmap,

00:03:34.960 --> 00:03:40.302
of all the capabilities
of Google Cloud Platform.

00:03:40.302 --> 00:03:41.260
METE ATAMEL: All right.

00:03:41.260 --> 00:03:42.764
First, let's talk about Compute.

00:03:42.764 --> 00:03:44.930
I heard that in Keynote
there was a Compute section,

00:03:44.930 --> 00:03:46.846
so this will be a bit
of a repetition of that.

00:03:46.846 --> 00:03:48.769
But hopefully there
will be some new stuff.

00:03:48.769 --> 00:03:51.310
So what we're trying to answer
here is, if you have some code

00:03:51.310 --> 00:03:53.851
and you want to run on Google
Cloud, what options do we have?

00:03:53.851 --> 00:03:56.470
That's what we are
trying to answer.

00:03:56.470 --> 00:03:58.840
At the high level, you
have three separate buckets

00:03:58.840 --> 00:04:00.700
when it comes to how
to deploy your code.

00:04:00.700 --> 00:04:02.350
The first one is
virtual machines.

00:04:02.350 --> 00:04:05.380
So you can think of these
as physical machines

00:04:05.380 --> 00:04:08.140
except they're virtualized
and they're running

00:04:08.140 --> 00:04:10.270
in someone else's data center.

00:04:10.270 --> 00:04:11.740
So you can pick
and choose the CPU

00:04:11.740 --> 00:04:13.630
you want, the memory
you want, and then

00:04:13.630 --> 00:04:15.463
you also get to choose
the operating system.

00:04:15.463 --> 00:04:17.170
It can be Linux-based
or Windows-based.

00:04:17.170 --> 00:04:18.670
And then, once you
have the machine,

00:04:18.670 --> 00:04:20.240
you can install
whatever you want.

00:04:20.240 --> 00:04:22.930
So you have full control,
but at the same time

00:04:22.930 --> 00:04:25.960
you have full responsibility
with virtual machines.

00:04:25.960 --> 00:04:27.850
So virtual machines
are great, but they're

00:04:27.850 --> 00:04:29.349
kind of heavyweight
because you need

00:04:29.349 --> 00:04:32.380
to virtualize the whole
operating system and everything

00:04:32.380 --> 00:04:34.150
that comes on top of that.

00:04:34.150 --> 00:04:36.871
So more recently, we have
something called containers.

00:04:36.871 --> 00:04:39.370
So the idea with containers is
that, instead of virtualizing

00:04:39.370 --> 00:04:42.016
the operating system, you're
virtualizing the actual process

00:04:42.016 --> 00:04:43.140
that your application runs.

00:04:43.140 --> 00:04:45.190
So you're virtualizing
your application

00:04:45.190 --> 00:04:48.580
and it's dependencies.

00:04:48.580 --> 00:04:50.830
And from there, you
create a container image,

00:04:50.830 --> 00:04:52.930
and this container image
is much more lightweight

00:04:52.930 --> 00:04:54.430
than virtual machines.

00:04:54.430 --> 00:04:56.600
So containers are really
easy to move around.

00:04:56.600 --> 00:04:58.690
They're really fast to start.

00:04:58.690 --> 00:05:00.970
So they're a much
quicker and agile way

00:05:00.970 --> 00:05:02.650
of running your applications.

00:05:02.650 --> 00:05:04.287
And if you're like
me, you usually

00:05:04.287 --> 00:05:05.620
don't care about infrastructure.

00:05:05.620 --> 00:05:07.100
You don't want to care
about virtual machines.

00:05:07.100 --> 00:05:08.530
You don't want to
care about containers.

00:05:08.530 --> 00:05:09.910
You just want to
deploy your code

00:05:09.910 --> 00:05:11.782
and let someone else
manage that for you.

00:05:11.782 --> 00:05:13.240
So that's when
serverless comes in.

00:05:13.240 --> 00:05:16.540
In serverless, literally
just create a function,

00:05:16.540 --> 00:05:19.805
deploy it, and let someone
else scale it for you,

00:05:19.805 --> 00:05:21.430
run it for you, all
that kind of stuff.

00:05:23.940 --> 00:05:25.570
MARC COHEN: So as
Mete just said,

00:05:25.570 --> 00:05:27.320
containers have really
changed everything.

00:05:27.320 --> 00:05:29.861
And that's another thing that
I've noticed over the last five

00:05:29.861 --> 00:05:32.960
years has had a huge impact
on the entire industry

00:05:32.960 --> 00:05:35.390
and the cloud in particular.

00:05:35.390 --> 00:05:37.460
It kind of really
picked up steam

00:05:37.460 --> 00:05:41.600
when Docker was
released in 2013.

00:05:41.600 --> 00:05:44.630
So containers really
enable a bunch of things

00:05:44.630 --> 00:05:47.630
that we didn't have before,
but containers by themselves

00:05:47.630 --> 00:05:48.350
are not enough.

00:05:48.350 --> 00:05:50.330
If you think about
deploying your applications

00:05:50.330 --> 00:05:52.250
in containers,
these are entirely

00:05:52.250 --> 00:05:54.410
self-contained
modular units that you

00:05:54.410 --> 00:05:57.770
can kind of scale incrementally,
it's all wonderful.

00:05:57.770 --> 00:06:00.410
But if you have a complex
application with, say,

00:06:00.410 --> 00:06:03.380
a bunch of front-end servers,
a bunch of back-end database

00:06:03.380 --> 00:06:06.140
servers, maybe some
middleware, it's

00:06:06.140 --> 00:06:08.570
complicated to get all that
stuff to work together,

00:06:08.570 --> 00:06:12.050
to monitor it, to restart
things when they fail.

00:06:12.050 --> 00:06:13.790
And that's where
orchestrators come in.

00:06:13.790 --> 00:06:16.010
So we've got a kind of
a new breed of software,

00:06:16.010 --> 00:06:19.070
container orchestration,
the most popular one

00:06:19.070 --> 00:06:20.840
being Kubernetes.

00:06:20.840 --> 00:06:23.000
And then another
piece that you kind of

00:06:23.000 --> 00:06:25.640
have to reinvent if
somebody hasn't created

00:06:25.640 --> 00:06:29.190
a nice pattern for you to reuse
is the service access layer.

00:06:29.190 --> 00:06:32.780
So if you want to apply
some security policies,

00:06:32.780 --> 00:06:37.130
telemetry, capture
analytics, customize

00:06:37.130 --> 00:06:38.720
how your service
is accessed, it's

00:06:38.720 --> 00:06:40.880
really nice to have a
service layer on top of it.

00:06:40.880 --> 00:06:44.390
And that's Istio is all
about as a service mesh.

00:06:44.390 --> 00:06:47.540
And so the combination of all
these innovations together--

00:06:47.540 --> 00:06:51.380
containers, orchestrators,
and a service mesh--

00:06:51.380 --> 00:06:54.560
really gives you a very powerful
way to manage and deploy

00:06:54.560 --> 00:06:56.772
your apps, especially
in the cloud.

00:06:56.772 --> 00:06:57.480
METE ATAMEL: Yep.

00:06:57.480 --> 00:07:00.020
So now let's look
at what you have

00:07:00.020 --> 00:07:04.066
on Google Cloud as products
to deploy applications.

00:07:04.066 --> 00:07:05.690
The first thing that
you want to decide

00:07:05.690 --> 00:07:08.005
is how much
customization you want

00:07:08.005 --> 00:07:09.380
and how much
management you want.

00:07:09.380 --> 00:07:10.730
So there is this spectrum.

00:07:10.730 --> 00:07:13.940
The more highly managed things
are, the less customizable

00:07:13.940 --> 00:07:14.660
they are usually.

00:07:14.660 --> 00:07:15.880
Or if you want
things to customized,

00:07:15.880 --> 00:07:17.240
then they are not
so highly managed

00:07:17.240 --> 00:07:19.110
because you have to
maintain that yourself.

00:07:19.110 --> 00:07:21.740
So if you want to have
things customizable,

00:07:21.740 --> 00:07:23.114
you have Compute Engine.

00:07:23.114 --> 00:07:24.530
So the idea of the
Compute Engine,

00:07:24.530 --> 00:07:26.300
as you heard before
at the Keynote,

00:07:26.300 --> 00:07:28.220
is that you got a
VM with an operating

00:07:28.220 --> 00:07:31.230
system with certain CPU
and memory that you choose.

00:07:31.230 --> 00:07:33.470
And then once you have
the VM, it's yours.

00:07:33.470 --> 00:07:35.040
You can do whatever
you want with it.

00:07:35.040 --> 00:07:36.940
So you only get the
machine and then

00:07:36.940 --> 00:07:39.950
the operating system with it.

00:07:39.950 --> 00:07:42.694
At some point, you might want
to put some software on it.

00:07:42.694 --> 00:07:44.360
So one way of doing
that is that you can

00:07:44.360 --> 00:07:46.490
install that yourself manually.

00:07:46.490 --> 00:07:49.430
But we also have something
called Cloud Launcher.

00:07:49.430 --> 00:07:52.310
It's kind of like a
marketplace for solutions

00:07:52.310 --> 00:07:54.020
to deploy to Google Cloud.

00:07:54.020 --> 00:07:58.377
So you can install things like
MongoDB, ASP.NET Framework,

00:07:58.377 --> 00:07:59.960
and there's a bunch
of other solutions

00:07:59.960 --> 00:08:01.760
from Google and
from outside Google.

00:08:01.760 --> 00:08:04.100
So the idea of Cloud Launcher
is that with one click

00:08:04.100 --> 00:08:06.200
you can get a solution
deployed to Compute Engine.

00:08:06.200 --> 00:08:10.700
So just let me show you
some of this quickly.

00:08:10.700 --> 00:08:12.430
So here I am in
Google Cloud Console.

00:08:12.430 --> 00:08:14.440
You've probably
seen this before.

00:08:14.440 --> 00:08:17.584
On the left, we have a bunch
of products on Google Cloud,

00:08:17.584 --> 00:08:19.000
but the one that
we are interested

00:08:19.000 --> 00:08:20.650
is in the Compute Engine.

00:08:20.650 --> 00:08:23.950
So on Compute Engine
instance, I can see my VMs,

00:08:23.950 --> 00:08:27.160
and then these are the VMs
that I have already running.

00:08:27.160 --> 00:08:30.760
If I want to create a VM, I just
do a Create Instance and this

00:08:30.760 --> 00:08:31.850
takes me to a new page.

00:08:31.850 --> 00:08:33.440
So I'll give you
my instance a name.

00:08:33.440 --> 00:08:36.880
So let's call this
instance GDD Krakow.

00:08:36.880 --> 00:08:38.440
And then you can
choose your zone.

00:08:38.440 --> 00:08:40.419
So we have zones
all over the world,

00:08:40.419 --> 00:08:43.362
but since we're in Europe
let's choose Europe West.

00:08:43.362 --> 00:08:45.177
So for machine type,
you can customize it.

00:08:45.177 --> 00:08:47.260
So you can pick and choose
how many cores you want

00:08:47.260 --> 00:08:50.210
and how much memory you
want all the way from one

00:08:50.210 --> 00:08:52.330
CPU to 64 CPUs.

00:08:52.330 --> 00:08:56.890
You can also choose already
preconfigured instances.

00:08:56.890 --> 00:08:59.560
So I'm just going to choose
an N1 standard, which has one

00:08:59.560 --> 00:09:01.187
CPU and four gigs of memory.

00:09:01.187 --> 00:09:03.520
After that, you can choose
what kind of operating system

00:09:03.520 --> 00:09:04.019
you want.

00:09:04.019 --> 00:09:09.310
So we have all different flavors
of Linux, from Debian, CoreOS,

00:09:09.310 --> 00:09:12.520
container-optimized operating
systems, even Windows servers--

00:09:12.520 --> 00:09:15.324
2008, 2012, 2016.

00:09:15.324 --> 00:09:16.740
You can even install
applications.

00:09:16.740 --> 00:09:18.700
So if you want to have
SQL Server for example,

00:09:18.700 --> 00:09:20.950
under Application Images
you can install that.

00:09:20.950 --> 00:09:22.930
So I'll just choose
a standard Linux

00:09:22.930 --> 00:09:24.980
instance-- let's say Debian 9.

00:09:24.980 --> 00:09:29.770
And then you can allow
HTTPS and Create.

00:09:29.770 --> 00:09:32.290
And this will give me a
VM within a few seconds.

00:09:32.290 --> 00:09:35.320
So I have a Linux
VM already running.

00:09:35.320 --> 00:09:36.820
You can easily SSH into that.

00:09:36.820 --> 00:09:39.740
Just click this button, and you
don't have to worry about keys.

00:09:39.740 --> 00:09:41.720
Everything is fully managed.

00:09:41.720 --> 00:09:43.480
So this will launch
within a few seconds,

00:09:43.480 --> 00:09:46.600
and you can get into it and you
can SSH and do all that stuff.

00:09:46.600 --> 00:09:49.090
But if you're a
Windows person, I

00:09:49.090 --> 00:09:51.310
have a Windows app running here.

00:09:51.310 --> 00:09:52.390
You can RDP into that.

00:09:52.390 --> 00:09:55.960
So right from the browser,
just RDP and enter my password.

00:09:58.520 --> 00:10:01.820
And then, boom, you're in,
and you can do all the Windows

00:10:01.820 --> 00:10:04.830
stuff that you need to do.

00:10:04.830 --> 00:10:06.427
So that's how you get VMs.

00:10:06.427 --> 00:10:08.510
But if you want to install
something on these VMs,

00:10:08.510 --> 00:10:09.676
then there's Cloud Launcher.

00:10:09.676 --> 00:10:13.430
So if you go here,
Cloud Launcher,

00:10:13.430 --> 00:10:15.395
this is, as I mentioned
before, a marketplace

00:10:15.395 --> 00:10:16.770
for different
kinds of solutions.

00:10:16.770 --> 00:10:19.640
So you can install LAMP stack,
WordPress with one click.

00:10:19.640 --> 00:10:23.630
So let's just search for ASP.NET
because I'm a .NET and I just

00:10:23.630 --> 00:10:26.460
want to install
ASP.NET framework.

00:10:26.460 --> 00:10:29.110
So this solution will
give you a Windows Server,

00:10:29.110 --> 00:10:32.420
an ASP.NET framework,
IIS, and SQL Express.

00:10:32.420 --> 00:10:35.055
So I'll just say launch
on Compute Engine,

00:10:35.055 --> 00:10:35.930
and give this a name.

00:10:35.930 --> 00:10:39.090
So let's say ASP.NET GDD Krakow.

00:10:39.090 --> 00:10:43.500
Choose my zone as
Europe West again.

00:10:43.500 --> 00:10:45.300
I'll keep my machine
type as it is.

00:10:45.300 --> 00:10:47.540
And then Windows server,
I'll choose latest one.

00:10:47.540 --> 00:10:49.850
And I just keep the
default, hit Deploy,

00:10:49.850 --> 00:10:51.920
and now this will
give me an Windows

00:10:51.920 --> 00:10:54.140
Server with ASP.NET
framework and IIS

00:10:54.140 --> 00:10:56.030
and SQL Server express deployed.

00:10:56.030 --> 00:10:59.420
So it will take a couple of
minutes, but it's right there.

00:10:59.420 --> 00:11:02.130
So that's that.

00:11:02.130 --> 00:11:04.980
But as we mentioned,
virtual machines,

00:11:04.980 --> 00:11:07.790
they're kind of old school
now, so we have containers.

00:11:07.790 --> 00:11:10.130
And how do you run
containers on Google Cloud?

00:11:10.130 --> 00:11:12.800
The easiest way to do
that is App Engine.

00:11:12.800 --> 00:11:15.980
So the idea with App Engine
is that you take your code,

00:11:15.980 --> 00:11:18.420
you deploy using G-Cloud.

00:11:18.420 --> 00:11:20.780
And then from then on,
we take that code, we

00:11:20.780 --> 00:11:23.660
create a container
for it in the cloud,

00:11:23.660 --> 00:11:25.940
and then we host it on
Container Repository,

00:11:25.940 --> 00:11:27.740
and then we deploy
it to App Engine.

00:11:27.740 --> 00:11:30.320
So with App Engine,
you get dashboards

00:11:30.320 --> 00:11:31.882
by default. You got versions.

00:11:31.882 --> 00:11:33.590
So every time you
deploy the application,

00:11:33.590 --> 00:11:35.512
you get different versions.

00:11:35.512 --> 00:11:36.720
You've got traffic splitting.

00:11:36.720 --> 00:11:37.820
So if you have
multiple versions,

00:11:37.820 --> 00:11:39.470
you can split the
traffic between them.

00:11:39.470 --> 00:11:40.595
And you've got autoscaling.

00:11:40.595 --> 00:11:42.260
So by default, it
starts on two VMs,

00:11:42.260 --> 00:11:44.720
but then it can autoscale
all the way to 20.

00:11:44.720 --> 00:11:45.490
So it's very easy.

00:11:45.490 --> 00:11:48.830
It's the easiest way to start
with containers on a cloud.

00:11:48.830 --> 00:11:51.530
But at some point, you
might need more control.

00:11:51.530 --> 00:11:55.160
Sometimes you want to be able
to define multiple containers,

00:11:55.160 --> 00:11:57.494
and you want to be able to
scale them independently.

00:11:57.494 --> 00:11:59.660
So you basically want to
create a container cluster.

00:11:59.660 --> 00:12:01.550
For that, we have
Container Engine.

00:12:01.550 --> 00:12:04.430
So Container Engine is
basically managed Kubernetes.

00:12:04.430 --> 00:12:07.790
So we manage the
Kubernetes Master for you.

00:12:07.790 --> 00:12:10.370
And with one command, you
can get a Kubernetes cluster

00:12:10.370 --> 00:12:11.840
with the Master
and with the nodes.

00:12:11.840 --> 00:12:15.100
And then you can just use the
Cube CTL command line tool

00:12:15.100 --> 00:12:17.074
to schedule containers.

00:12:17.074 --> 00:12:18.990
And we also have some
tools around containers.

00:12:18.990 --> 00:12:20.600
So we have Container
Builder, which

00:12:20.600 --> 00:12:24.590
is a way to build containers
in the cloud really fast.

00:12:24.590 --> 00:12:26.090
And then we have
Container Registry.

00:12:26.090 --> 00:12:27.710
So once you've built
your containers,

00:12:27.710 --> 00:12:30.200
they get hosted into this
private space for your project.

00:12:30.200 --> 00:12:32.570
And then from there, once
you have the container image,

00:12:32.570 --> 00:12:34.294
you can deploy it
to Compute Engine,

00:12:34.294 --> 00:12:35.960
and then you can
deploy it to App Engine

00:12:35.960 --> 00:12:39.384
or you can deploy to Container
Engine and Compute Engine,

00:12:39.384 --> 00:12:40.550
anywhere you want basically.

00:12:40.550 --> 00:12:43.400
So it's available to
everything you have.

00:12:43.400 --> 00:12:46.230
And then finally, my
favorite is Cloud Functions.

00:12:46.230 --> 00:12:49.340
So in Cloud Functions, you
create a node.js function

00:12:49.340 --> 00:12:51.330
that does some kind
of functionality,

00:12:51.330 --> 00:12:53.870
and then you define what
triggers that function.

00:12:53.870 --> 00:12:56.005
So it gets triggered
by HTTP calls,

00:12:56.005 --> 00:12:59.360
or it gets triggered
by pop-up messages.

00:12:59.360 --> 00:13:01.094
And then you just
deploy that and don't

00:13:01.094 --> 00:13:03.260
worry about containers or
VMs or anything like that.

00:13:03.260 --> 00:13:05.190
Everything is fully
managed for you.

00:13:05.190 --> 00:13:09.170
So let's take a quick
look of these as well.

00:13:09.170 --> 00:13:11.834
So I already deployed an
App Engine application,

00:13:11.834 --> 00:13:13.250
so let's just take
a look at that.

00:13:13.250 --> 00:13:17.170
So if you go to App Engine,
first I will click on Versions,

00:13:17.170 --> 00:13:19.990
and then you can see that I have
two versions already deployed.

00:13:19.990 --> 00:13:23.140
Let's say this Version 3 is
the one getting the traffic,

00:13:23.140 --> 00:13:25.720
and it's being run
on two instances.

00:13:25.720 --> 00:13:27.340
Version 4 is not
getting any traffic.

00:13:27.340 --> 00:13:28.550
I can easily change that.

00:13:28.550 --> 00:13:30.670
So I can come here,
do split traffic.

00:13:30.670 --> 00:13:33.140
I will do IP-based
traffic splitting.

00:13:33.140 --> 00:13:35.680
So I will just add
my version, and then

00:13:35.680 --> 00:13:37.210
let's say this will get 50%.

00:13:37.210 --> 00:13:40.540
So now each version will
get 50% of the traffic.

00:13:40.540 --> 00:13:43.220
So I can do my testing and make
sure that everything works.

00:13:43.220 --> 00:13:45.386
So if you go back here,
you'll see that they're both

00:13:45.386 --> 00:13:47.050
getting 50% of the traffic.

00:13:47.050 --> 00:13:50.439
If I go to Dashboard, this
app is not being used.

00:13:50.439 --> 00:13:52.480
So you don't see it much,
but then under here you

00:13:52.480 --> 00:13:53.890
see the different versions.

00:13:53.890 --> 00:13:55.420
And then I can click
on the version.

00:13:55.420 --> 00:13:57.503
And then from here, I can
see the latency traffic,

00:13:57.503 --> 00:13:58.090
VM traffic.

00:13:58.090 --> 00:14:00.689
So all this stuff
comes for free.

00:14:00.689 --> 00:14:01.980
You can even see the instances.

00:14:01.980 --> 00:14:05.530
So by default, the apps run
on two instances and these

00:14:05.530 --> 00:14:06.629
are regular VMs.

00:14:06.629 --> 00:14:08.420
You can add extensions
to them if you want,

00:14:08.420 --> 00:14:10.840
but you don't have to because
App Engine kind of manages

00:14:10.840 --> 00:14:11.800
this for you.

00:14:11.800 --> 00:14:16.450
And this will be autoscaled from
two to 20 if there's a need.

00:14:16.450 --> 00:14:17.710
So that's kind of App Engine.

00:14:17.710 --> 00:14:21.130
And then if we look
at Container Engine,

00:14:21.130 --> 00:14:22.870
I can take the same
container image

00:14:22.870 --> 00:14:24.970
and I can deploy it
to Container Engine

00:14:24.970 --> 00:14:26.840
and get that managed
by Kubernetes.

00:14:26.840 --> 00:14:29.530
So here I have a
cluster already defined.

00:14:29.530 --> 00:14:32.440
And if I look under
workloads, in Kubernetes

00:14:32.440 --> 00:14:33.820
you basically take
your container

00:14:33.820 --> 00:14:35.680
and put it in
what's called a pod.

00:14:35.680 --> 00:14:38.140
So I have a pod running
with the same app.

00:14:38.140 --> 00:14:39.640
And then once you
have your pod, you

00:14:39.640 --> 00:14:41.650
can expose that to
the outside world

00:14:41.650 --> 00:14:43.524
using something called Service.

00:14:43.524 --> 00:14:45.190
So with Service, you
get a load balancer

00:14:45.190 --> 00:14:46.660
and then you get a public IP.

00:14:46.660 --> 00:14:47.650
So here I have the IP.

00:14:47.650 --> 00:14:50.150
And if I click on it, I have
this Hello World, very exciting

00:14:50.150 --> 00:14:50.710
application.

00:14:50.710 --> 00:14:52.540
But the point is that
you can take the same app

00:14:52.540 --> 00:14:54.914
and basically move it around
from App Engine to Container

00:14:54.914 --> 00:14:56.500
Engine really easily.

00:14:56.500 --> 00:15:00.460
And finally, what I really
like is Cloud Functions.

00:15:00.460 --> 00:15:02.680
So here I have a Cloud
Function that I deployed.

00:15:02.680 --> 00:15:05.710
It's a Hello World
kind of Cloud Function.

00:15:05.710 --> 00:15:08.860
And if you click on it, it's
running somewhere in the cloud.

00:15:08.860 --> 00:15:11.890
I don't know where, but
I don't care anyway.

00:15:11.890 --> 00:15:13.540
I can see the
trigger, So this is

00:15:13.540 --> 00:15:15.640
a pops-up
topic-triggered function,

00:15:15.640 --> 00:15:18.141
Meaning that if there's
a topic, it listens.

00:15:18.141 --> 00:15:20.140
And if there's a message
that goes to the topic,

00:15:20.140 --> 00:15:21.457
it will be triggered.

00:15:21.457 --> 00:15:22.790
I can even see the source of it.

00:15:22.790 --> 00:15:25.420
So here, this is my function,
and basically it gets an event

00:15:25.420 --> 00:15:26.772
and displays the message.

00:15:26.772 --> 00:15:28.480
And you can even test
it right from here.

00:15:28.480 --> 00:15:30.730
So in here, I can send
that pops-up message,

00:15:30.730 --> 00:15:32.980
and let's say this is message.

00:15:32.980 --> 00:15:35.800
And then I'll say, Hello World.

00:15:35.800 --> 00:15:37.040
And then test the function.

00:15:37.040 --> 00:15:38.786
So this will invoke my function.

00:15:38.786 --> 00:15:40.660
And then, when it's
done, I can see the logs,

00:15:40.660 --> 00:15:42.493
I can see the output,
everything right here.

00:15:42.493 --> 00:15:45.220
It's very easy,
fully managed for me.

00:15:45.220 --> 00:15:46.420
So that's that.

00:15:46.420 --> 00:15:48.494
Let's go back.

00:15:48.494 --> 00:15:49.660
MARC COHEN: So thanks, Mete.

00:15:49.660 --> 00:15:52.150
I'd like to briefly
touch on something

00:15:52.150 --> 00:15:55.360
that I think is largely
invisible to most people

00:15:55.360 --> 00:15:58.870
when they're using
our Cloud Platform.

00:15:58.870 --> 00:16:01.330
When you deploy one
of computing elements

00:16:01.330 --> 00:16:03.790
that Mete just talked
about, the data

00:16:03.790 --> 00:16:06.100
that's moving around, either
from the outside world

00:16:06.100 --> 00:16:09.700
into Google's cloud or between
systems within our cloud,

00:16:09.700 --> 00:16:15.040
is riding on top of the same
network that powers these seven

00:16:15.040 --> 00:16:18.400
products, each with
a billion users.

00:16:18.400 --> 00:16:20.800
So we don't have
a separate network

00:16:20.800 --> 00:16:25.630
where we're transporting all
the information for your cloud

00:16:25.630 --> 00:16:27.700
compute elements
and another network

00:16:27.700 --> 00:16:29.800
that we make really good
for our own internal use.

00:16:29.800 --> 00:16:33.720
It's the same network fabric,
extremely high performance.

00:16:33.720 --> 00:16:36.430
And it's the same
network that's serving up

00:16:36.430 --> 00:16:41.200
all those YouTube videos, Gmail,
Google Search, Maps, et cetera.

00:16:41.200 --> 00:16:43.990
And the reason it's
so high performance

00:16:43.990 --> 00:16:48.580
is that Google has built
its own private network,

00:16:48.580 --> 00:16:51.340
massive internal
private network.

00:16:51.340 --> 00:16:55.540
It contains dedicated fiber
links around the world.

00:16:55.540 --> 00:16:57.735
We even own our own
undersea cables.

00:17:00.119 --> 00:17:01.660
I mean, it's not
just the facilities.

00:17:01.660 --> 00:17:03.430
A ton of engineering
work over the years

00:17:03.430 --> 00:17:06.190
has gone into making it
very high performance, very

00:17:06.190 --> 00:17:08.079
low latency.

00:17:08.079 --> 00:17:10.210
And you're taking
advantage of all that power

00:17:10.210 --> 00:17:14.650
when you're running your
applications in our cloud.

00:17:14.650 --> 00:17:17.619
Another kind of key design
piece of our network

00:17:17.619 --> 00:17:21.369
is that we've built it
so that when users want

00:17:21.369 --> 00:17:24.160
to access our cloud platform--

00:17:24.160 --> 00:17:27.160
App Engine apps or Compute
Engine or containers or any

00:17:27.160 --> 00:17:28.690
of that stuff--

00:17:28.690 --> 00:17:32.440
we've got it designed so that
we route their connections

00:17:32.440 --> 00:17:36.366
to the closest point of
presence to that user,

00:17:36.366 --> 00:17:37.990
the idea being that
we want to get them

00:17:37.990 --> 00:17:41.440
on this high-speed Google
backbone as fast as possible

00:17:41.440 --> 00:17:43.180
so that the bulk of
the communication

00:17:43.180 --> 00:17:47.020
is taking place over this
very optimized network.

00:17:47.020 --> 00:17:50.470
And as a, result we not only
get very high throughput and low

00:17:50.470 --> 00:17:55.390
latency, but we get very
predictable response time.

00:17:55.390 --> 00:18:00.722
And this is a little map of the
extension of our data centers

00:18:00.722 --> 00:18:01.430
around the world.

00:18:01.430 --> 00:18:03.096
As you can see, we're
in a lot of areas,

00:18:03.096 --> 00:18:05.500
but we're constantly trying
to expand the footprint

00:18:05.500 --> 00:18:09.980
to accommodate platform
needs all around the world.

00:18:09.980 --> 00:18:13.120
We also have several higher-end
networking capabilities

00:18:13.120 --> 00:18:14.830
which I'm not going
to go into today,

00:18:14.830 --> 00:18:16.810
but we'll have some
resources at the end

00:18:16.810 --> 00:18:21.260
so you can dive into those
if you're interested.

00:18:21.260 --> 00:18:25.030
So we've talked about
computing, and we've talked

00:18:25.030 --> 00:18:26.290
a little bit about networking.

00:18:26.290 --> 00:18:30.310
And now I want to turn to
how you store your data,

00:18:30.310 --> 00:18:34.640
something every
application has to do.

00:18:34.640 --> 00:18:36.980
And I'm going to try to
cover everything you can

00:18:36.980 --> 00:18:39.160
do in that domain in one slide.

00:18:39.160 --> 00:18:41.820
So it's going to get
a little bit busy.

00:18:41.820 --> 00:18:42.920
We have several products.

00:18:42.920 --> 00:18:45.050
It's really kind of like
tools in a tool kit.

00:18:45.050 --> 00:18:47.685
And it's just some
really powerful options,

00:18:47.685 --> 00:18:49.310
but it's just a matter
of knowing which

00:18:49.310 --> 00:18:50.930
one to use for which situation.

00:18:50.930 --> 00:18:52.870
The very first one
is in-memory storage.

00:18:52.870 --> 00:18:55.550
So this is simply caching
for your App Engine

00:18:55.550 --> 00:18:57.710
app or your Compute Engine app.

00:18:57.710 --> 00:19:00.710
Think of Redis or Memcache,
something along those lines

00:19:00.710 --> 00:19:02.210
as a service.

00:19:02.210 --> 00:19:04.840
Then we have the category
of relational databases.

00:19:04.840 --> 00:19:08.220
So traditional, SQL-based
relational databases.

00:19:08.220 --> 00:19:09.770
And we have Cloud
SQL, which you can

00:19:09.770 --> 00:19:13.160
think of as managed
MySQL or Postgres.

00:19:13.160 --> 00:19:17.150
So you end up with a bunch of
servers where the images are

00:19:17.150 --> 00:19:18.306
maintained for you.

00:19:18.306 --> 00:19:19.680
The latest software
is installed.

00:19:19.680 --> 00:19:20.304
It's backed up.

00:19:20.304 --> 00:19:22.310
But you're still thinking
about database servers

00:19:22.310 --> 00:19:23.630
at the end of the day.

00:19:23.630 --> 00:19:26.240
And then we have Spanner, which
kind of takes it up a level,

00:19:26.240 --> 00:19:28.730
and you really can think
about just the database

00:19:28.730 --> 00:19:30.080
independent of any server.

00:19:30.080 --> 00:19:32.630
So it's really
database as a service

00:19:32.630 --> 00:19:35.600
with a lot of other
nice features as well.

00:19:35.600 --> 00:19:38.490
Then on the NoSQL side,
we have Cloud Data Store.

00:19:38.490 --> 00:19:40.610
It's a hierarchical
key value store.

00:19:40.610 --> 00:19:42.350
It comes out of the
App Engine world

00:19:42.350 --> 00:19:44.720
but is now completely
generalized

00:19:44.720 --> 00:19:47.220
and can be used from anywhere.

00:19:47.220 --> 00:19:49.980
And we've got Cloud
Bigtable, which is also

00:19:49.980 --> 00:19:55.170
similarly schema-less and
NoSQL, particularly well suited

00:19:55.170 --> 00:19:59.970
for very high-capacity storage
jobs and for a very high-volume

00:19:59.970 --> 00:20:03.060
read and write scenarios
like an event log

00:20:03.060 --> 00:20:09.810
or page views, detailed
telemetry-type applications.

00:20:09.810 --> 00:20:12.750
We have an object store
called Google Cloud Storage.

00:20:12.750 --> 00:20:14.940
This was one of the
very first products

00:20:14.940 --> 00:20:17.270
that came out as part of
the Google Cloud Platform.

00:20:17.270 --> 00:20:20.130
It was the first product
I worked on back in 2011.

00:20:20.130 --> 00:20:23.580
It's a very powerful
binary object storage

00:20:23.580 --> 00:20:28.170
facility, global
scope replication,

00:20:28.170 --> 00:20:30.420
and strong consistency.

00:20:30.420 --> 00:20:32.550
Very nice features.

00:20:32.550 --> 00:20:35.080
And then we have
block storage device.

00:20:35.080 --> 00:20:36.690
So we call these
persistent disks.

00:20:36.690 --> 00:20:39.090
This is essentially a
network block device

00:20:39.090 --> 00:20:41.280
for attaching it to your VMs.

00:20:41.280 --> 00:20:43.260
And the idea is it's
network resident,

00:20:43.260 --> 00:20:45.330
and it lives kind of
its own lifecycle.

00:20:45.330 --> 00:20:49.530
So if your VM goes down
or you even delete the VM,

00:20:49.530 --> 00:20:52.330
your data is still
persistent on that disk.

00:20:52.330 --> 00:20:56.670
And you can get those in SSD
format or spinning disks.

00:20:56.670 --> 00:20:58.980
Lots more to say about
that, but I'm trying

00:20:58.980 --> 00:21:01.710
to for time get through it

00:21:01.710 --> 00:21:03.390
And then, of course
BigQuery, which will

00:21:03.390 --> 00:21:05.050
we'll see more in a minute.

00:21:05.050 --> 00:21:08.410
But that's really good
way to store data,

00:21:08.410 --> 00:21:10.722
as well as to analyze
it interactively.

00:21:10.722 --> 00:21:11.430
METE ATAMEL: Wow.

00:21:11.430 --> 00:21:13.300
That's a lot of storage options.

00:21:13.300 --> 00:21:15.210
But I keep hearing
about Spanner.

00:21:15.210 --> 00:21:17.520
Can you tell us what
special about Spanner?

00:21:17.520 --> 00:21:19.720
MARC COHEN: Funny
you should ask.

00:21:19.720 --> 00:21:23.910
I actually have a slide about
Spanner, Mete, thank you.

00:21:23.910 --> 00:21:28.770
And it would have been good if
I didn't advance to it early.

00:21:28.770 --> 00:21:32.810
So yeah, Cloud
Spanner, it's very new.

00:21:32.810 --> 00:21:34.530
It was announced
earlier this year.

00:21:34.530 --> 00:21:40.560
And it's a really interesting
new database type.

00:21:40.560 --> 00:21:46.500
It's basically a managed,
unlimited scale effectively,

00:21:46.500 --> 00:21:48.510
database as a
service in the cloud.

00:21:48.510 --> 00:21:51.390
Now, whereas traditional
relational databases

00:21:51.390 --> 00:21:55.080
are very strong in terms
of asset compliance

00:21:55.080 --> 00:21:58.380
and strong consistency
and data semantics,

00:21:58.380 --> 00:22:00.372
they are often
difficult to scale.

00:22:00.372 --> 00:22:01.830
A lot of times
you'll see companies

00:22:01.830 --> 00:22:05.440
having to shard multiple
concurrent instances

00:22:05.440 --> 00:22:07.590
of an RDBMS.

00:22:07.590 --> 00:22:13.050
And traditional NoSQL, rather,
is just the inverse of that.

00:22:13.050 --> 00:22:14.590
So it scales very easily.

00:22:14.590 --> 00:22:17.160
You just add additional
nodes to a cluster,

00:22:17.160 --> 00:22:19.290
but you often have
consistency challenges

00:22:19.290 --> 00:22:22.980
trying to make sure everything
is strongly consistent

00:22:22.980 --> 00:22:25.650
and updates are seen
everywhere at the same time.

00:22:25.650 --> 00:22:28.470
Spanner gives you the best of
both worlds in that it gives

00:22:28.470 --> 00:22:31.530
you the scalability
of a NoSQL system,

00:22:31.530 --> 00:22:36.090
and it gives you the semantics
of a traditional relational

00:22:36.090 --> 00:22:38.634
database management system.

00:22:38.634 --> 00:22:40.050
And I'd like to
actually just show

00:22:40.050 --> 00:22:45.920
you real quick what it looks
like to work with Spanner.

00:22:45.920 --> 00:22:49.180
So this is the same
platform, or same console

00:22:49.180 --> 00:22:51.970
rather, that Mete
was just showing you,

00:22:51.970 --> 00:22:54.370
but I'm in the Spanner domain.

00:22:54.370 --> 00:22:55.870
And when we're
working with Spanner,

00:22:55.870 --> 00:22:57.550
we create things
we call instances.

00:22:57.550 --> 00:23:00.160
And instances are simply
collections of databases,

00:23:00.160 --> 00:23:01.660
but they're completely abstract.

00:23:01.660 --> 00:23:05.200
I don't have to think about
how the software is configured

00:23:05.200 --> 00:23:07.240
or anything like that.

00:23:07.240 --> 00:23:09.610
Within the instance,
I create a database.

00:23:09.610 --> 00:23:12.940
So I'm going to take this
sort of imaginary example

00:23:12.940 --> 00:23:14.860
that I'm a university
administrator,

00:23:14.860 --> 00:23:17.650
and I need to keep track
of the database for all

00:23:17.650 --> 00:23:19.420
the students in the university.

00:23:19.420 --> 00:23:22.540
So I've created a database
I call University.

00:23:22.540 --> 00:23:25.840
And I have two tables in
that database, departments--

00:23:25.840 --> 00:23:27.910
so these are the
different subject areas,

00:23:27.910 --> 00:23:31.930
they have a department
ID, a budget, and a name--

00:23:31.930 --> 00:23:33.897
and student-- so these
are an enumeration

00:23:33.897 --> 00:23:34.730
of all the students.

00:23:34.730 --> 00:23:38.230
So I have a department
ID, which is inherited.

00:23:38.230 --> 00:23:40.660
So every student is
affiliated with a department.

00:23:40.660 --> 00:23:41.560
Then I have an SID.

00:23:41.560 --> 00:23:44.470
That's my student ID,
unique key for this table,

00:23:44.470 --> 00:23:46.370
and a student name.

00:23:46.370 --> 00:23:48.370
Now, one of the really
nice things about Spanner

00:23:48.370 --> 00:23:50.230
is I can dynamically
change the schema.

00:23:50.230 --> 00:23:54.830
Let's say I decide I want to
add a column to this table.

00:23:54.830 --> 00:23:56.650
So I'll say Edit Schema.

00:23:56.650 --> 00:23:58.780
Anybody have something
they would like

00:23:58.780 --> 00:24:01.600
to add to the student record?

00:24:01.600 --> 00:24:07.120
What's the attribute that
causes college students the most

00:24:07.120 --> 00:24:09.850
stress?

00:24:09.850 --> 00:24:11.340
METE ATAMEL: GPA

00:24:11.340 --> 00:24:13.299
MARC COHEN: Let's
add a GPA column.

00:24:13.299 --> 00:24:14.215
Let's make it a float.

00:24:17.930 --> 00:24:19.370
We'll add that and say Save.

00:24:23.080 --> 00:24:25.577
And it's now
updating the schema.

00:24:25.577 --> 00:24:26.910
There can be tons of data there.

00:24:26.910 --> 00:24:29.230
It's going to update all
the data that I have now

00:24:29.230 --> 00:24:32.950
as well as make it possible
for me to store new data.

00:24:32.950 --> 00:24:34.730
And the database is
continuing to run.

00:24:34.730 --> 00:24:35.840
There's no downtime.

00:24:35.840 --> 00:24:37.990
So it's not stopping
ongoing operations.

00:24:37.990 --> 00:24:41.440
It's continuing to serve
requests as we speak.

00:24:41.440 --> 00:24:44.140
And while it's doing
that schema update,

00:24:44.140 --> 00:24:46.240
I'm going to show
you another thing.

00:24:46.240 --> 00:24:49.210
Let's say I'm wildly successful
with my new database,

00:24:49.210 --> 00:24:51.640
and I have more load
than I can possibly take.

00:24:51.640 --> 00:24:54.100
And I just told you earlier
that it's really scalable.

00:24:54.100 --> 00:24:57.780
So what I can do is go
to the Instance page.

00:25:01.175 --> 00:25:01.930
There we go.

00:25:05.750 --> 00:25:07.520
And I can say Edit Instance.

00:25:07.520 --> 00:25:09.430
And I can simply change
the number of nodes

00:25:09.430 --> 00:25:11.675
from one to three.

00:25:11.675 --> 00:25:12.175
Save.

00:25:16.400 --> 00:25:19.130
And I now have tripled
my capacity that easily.

00:25:19.130 --> 00:25:22.640
I now have three times as
much database serving capacity

00:25:22.640 --> 00:25:25.160
as I did before.

00:25:25.160 --> 00:25:27.950
I think the schema
update is done.

00:25:27.950 --> 00:25:31.430
As you can see, being able
to just to turn that knob

00:25:31.430 --> 00:25:33.350
is really one of
the major advantages

00:25:33.350 --> 00:25:36.142
of Spanner's scalability.

00:25:36.142 --> 00:25:37.100
METE ATAMEL: All right.

00:25:40.040 --> 00:25:42.590
So now let's talk about big
data in the last four minutes

00:25:42.590 --> 00:25:44.150
that we have.

00:25:44.150 --> 00:25:47.900
So big data at Google
started with MapReduce.

00:25:47.900 --> 00:25:50.930
Back in the day, we were
trying to process lots of data,

00:25:50.930 --> 00:25:52.970
and then there was
a paper on MapReduce

00:25:52.970 --> 00:25:55.520
that basically explained
how to take lots of data

00:25:55.520 --> 00:25:57.830
and break that down
into small chunks then

00:25:57.830 --> 00:26:01.940
map them to different
machines, and then

00:26:01.940 --> 00:26:04.742
apply some kind of aggregation
and get a result back.

00:26:04.742 --> 00:26:06.200
So after MapReduce,
there was a lot

00:26:06.200 --> 00:26:07.670
of innovation within Google.

00:26:07.670 --> 00:26:10.640
So there were things like
Bigtable, Flume, and Spanner.

00:26:10.640 --> 00:26:14.440
So these were either papers
or internal implementations

00:26:14.440 --> 00:26:17.017
that people couldn't
use outside Google.

00:26:17.017 --> 00:26:19.100
Because of this, we had a
bunch of Apache projects

00:26:19.100 --> 00:26:20.900
that were influenced
by these papers.

00:26:20.900 --> 00:26:23.670
So we had a Hadoop, which
is the open source MapReduce

00:26:23.670 --> 00:26:24.410
implementation.

00:26:24.410 --> 00:26:27.140
We had things like
Spark and Pig and Hive.

00:26:27.140 --> 00:26:29.750
And because of this
split in innovation,

00:26:29.750 --> 00:26:31.430
we had two products
on Google Cloud.

00:26:31.430 --> 00:26:36.200
We had Dataflow, which is
basically the state-of-the-art

00:26:36.200 --> 00:26:39.200
data processing pipeline
that came up at Google,

00:26:39.200 --> 00:26:41.300
and now we are making
it available to people.

00:26:41.300 --> 00:26:43.190
But at the same time, if
you're already using Hadoop

00:26:43.190 --> 00:26:44.606
and if you're
already using Spark,

00:26:44.606 --> 00:26:46.970
there's something
else called Dataproc.

00:26:46.970 --> 00:26:50.120
It's a way to run your Spark
or other jobs on Google Cloud.

00:26:52.660 --> 00:26:56.440
MARC COHEN: So if we think
about the big data world,

00:26:56.440 --> 00:26:58.690
the typical kind of
thing we want to do

00:26:58.690 --> 00:27:01.170
is to have a
processing pipeline.

00:27:01.170 --> 00:27:03.670
And so I'm going to just briefly
walk through that pipeline.

00:27:03.670 --> 00:27:06.310
The first phase would
be capturing your data.

00:27:06.310 --> 00:27:08.419
And we'll come up
with an example

00:27:08.419 --> 00:27:09.460
of how you might do this.

00:27:09.460 --> 00:27:13.010
Imagine you wanted to track all
of the activity on Wikipedia.

00:27:13.010 --> 00:27:15.820
So imagine you had an event
firing, like an HTTP post

00:27:15.820 --> 00:27:18.070
or something like that,
every time somebody pulled up

00:27:18.070 --> 00:27:20.470
any article in Wikipedia.

00:27:20.470 --> 00:27:22.900
Cloud Pub/Sub would be a
perfect example of something

00:27:22.900 --> 00:27:26.890
to use for that because it's a
very high capacity repository.

00:27:26.890 --> 00:27:27.910
It's a message queue.

00:27:27.910 --> 00:27:29.740
And so it can then
publish those events

00:27:29.740 --> 00:27:34.000
to any number of
downstream consumers.

00:27:34.000 --> 00:27:37.810
We might feed that downstream
into data prep, which

00:27:37.810 --> 00:27:41.140
is a way to cleanse your
data, add semantic checking,

00:27:41.140 --> 00:27:43.080
and rearrange things.

00:27:43.080 --> 00:27:44.860
And that might
feed into Dataflow,

00:27:44.860 --> 00:27:49.210
which can be a very flexible
pipeline building tool.

00:27:49.210 --> 00:27:53.320
You can use Apache Beam to
program the processing there.

00:27:53.320 --> 00:27:56.800
And it can also operate
on either large batches

00:27:56.800 --> 00:27:58.520
of data or streaming data.

00:27:58.520 --> 00:28:02.320
So you could actually use it
in sort of a real-time fashion.

00:28:02.320 --> 00:28:04.450
The output of that would
be the processed data,

00:28:04.450 --> 00:28:06.574
and we might want to store
it in one of the storage

00:28:06.574 --> 00:28:08.020
facilities I mentioned earlier.

00:28:08.020 --> 00:28:11.480
We could do real-time
analysis on it using BigQuery,

00:28:11.480 --> 00:28:14.469
and I'll actually show you an
example of that in a second.

00:28:14.469 --> 00:28:16.510
And then we might want to
actually take that data

00:28:16.510 --> 00:28:20.300
and work on it interactively
in a more user-friendly way.

00:28:20.300 --> 00:28:22.960
So we have Cloud Datalab,
which gives us the ability

00:28:22.960 --> 00:28:27.430
to use Jupyter Notebooks
to interactively play

00:28:27.430 --> 00:28:28.040
with the data.

00:28:28.040 --> 00:28:30.550
And we also have
Data Studio, which

00:28:30.550 --> 00:28:33.610
is a very nice tool for
building interactive dashboards

00:28:33.610 --> 00:28:37.784
and other visualizations.

00:28:37.784 --> 00:28:41.460
So let's hop over to
the console again.

00:28:41.460 --> 00:28:43.200
This is a different
part of the console,

00:28:43.200 --> 00:28:45.240
but this is for
running BigQuery.

00:28:45.240 --> 00:28:49.560
And I've actually preloaded a
month's worth of Wikipedia page

00:28:49.560 --> 00:28:52.750
views into this
particular database.

00:28:52.750 --> 00:28:53.640
So here's my query.

00:28:53.640 --> 00:28:56.310
I can format it nicely.

00:28:56.310 --> 00:29:00.247
I'm going to turn off used
cache results because they

00:29:00.247 --> 00:29:01.080
don't want to cheat.

00:29:01.080 --> 00:29:04.079
It'll come back blindingly
fast, but it won't be true.

00:29:04.079 --> 00:29:05.370
So I'm going to run this query.

00:29:05.370 --> 00:29:08.040
What this is doing is
scanning every line

00:29:08.040 --> 00:29:10.740
in the table of this
database, and it's looking

00:29:10.740 --> 00:29:13.500
for occurrences of Krakow.

00:29:13.500 --> 00:29:18.600
Because the o can be
written in different ways

00:29:18.600 --> 00:29:21.600
depending on language, I've
used a regular expression

00:29:21.600 --> 00:29:23.440
to avoid that.

00:29:23.440 --> 00:29:26.520
So not only am I scanning
every row in the table.

00:29:26.520 --> 00:29:28.920
I'm running a regular
expression on every single row

00:29:28.920 --> 00:29:30.270
in this table.

00:29:30.270 --> 00:29:31.930
I get my output.

00:29:31.930 --> 00:29:37.530
And if we look at
the job information,

00:29:37.530 --> 00:29:41.630
we see that it's scanned
almost 50 gigabytes of data.

00:29:41.630 --> 00:29:44.090
And the query explanation
shows us the number of rows.

00:29:44.090 --> 00:29:48.010
It's scanned 1.8
billion with a B rows.

00:29:48.010 --> 00:29:49.220
It didn't just scan them all.

00:29:49.220 --> 00:29:51.530
It ran a regular
expression on them all.

00:29:51.530 --> 00:29:53.480
So I hope this
gives you a sense--

00:29:53.480 --> 00:29:55.430
and I didn't mention
the punchline is

00:29:55.430 --> 00:29:57.020
it was under five seconds.

00:29:57.020 --> 00:30:00.230
In under five seconds, we ran
regular expression queries

00:30:00.230 --> 00:30:02.432
on 1.8 billion rows of data.

00:30:02.432 --> 00:30:04.640
Hopefully that gives you a
sense of some of the power

00:30:04.640 --> 00:30:06.729
and speed you get with BigQuery.

00:30:06.729 --> 00:30:07.520
METE ATAMEL: Great.

00:30:10.100 --> 00:30:12.850
And then last but not
least, machine learning.

00:30:12.850 --> 00:30:16.040
So machine learning is big, and
I think this graph shows why.

00:30:16.040 --> 00:30:19.030
This is the amount
of machine learning

00:30:19.030 --> 00:30:21.674
at Google and all the
different products that

00:30:21.674 --> 00:30:22.590
uses machine learning.

00:30:22.590 --> 00:30:26.381
So you see an exponential
growth in the last few years.

00:30:26.381 --> 00:30:28.130
So when it comes to
using machine learning

00:30:28.130 --> 00:30:29.588
in your applications,
you basically

00:30:29.588 --> 00:30:31.670
have two ways of using
machine learning.

00:30:31.670 --> 00:30:35.360
The easy way is let someone
build a model, machine learning

00:30:35.360 --> 00:30:38.944
model, and give you an API
and use that machine learning

00:30:38.944 --> 00:30:39.860
from your application.

00:30:39.860 --> 00:30:42.390
So you're not really building
machine learning yourself.

00:30:42.390 --> 00:30:45.800
You're just consuming someone
else's machine learning model.

00:30:45.800 --> 00:30:47.930
And then in the other
model, sometimes

00:30:47.930 --> 00:30:51.732
the given model is not
good enough or maybe

00:30:51.732 --> 00:30:52.940
you want to customize things.

00:30:52.940 --> 00:30:56.060
So you need to actually create
your own machine learning

00:30:56.060 --> 00:30:56.690
model.

00:30:56.690 --> 00:30:59.080
So for that, you can create
and serve your own machine

00:30:59.080 --> 00:30:59.810
learning model.

00:30:59.810 --> 00:31:02.370
You're using things
like TensorFlow.

00:31:02.370 --> 00:31:04.382
So in terms of using
models at Google Cloud,

00:31:04.382 --> 00:31:05.840
we have a bunch of
machine learning

00:31:05.840 --> 00:31:07.970
APIs for different
kinds of models

00:31:07.970 --> 00:31:09.480
that we've built over the years.

00:31:09.480 --> 00:31:11.480
So we have Speech API
for speech recognition.

00:31:11.480 --> 00:31:13.800
We have Vision API
for image recognition,

00:31:13.800 --> 00:31:15.140
and a bunch of other things.

00:31:15.140 --> 00:31:18.240
So basically, we built these
models all these years,

00:31:18.240 --> 00:31:20.150
and we are just making
it available to you

00:31:20.150 --> 00:31:21.500
with an API call.

00:31:21.500 --> 00:31:23.350
And I just want to
show you really quickly

00:31:23.350 --> 00:31:24.870
a demo for the Vision API.

00:31:27.480 --> 00:31:30.020
So in Vision API,
you pass an image,

00:31:30.020 --> 00:31:32.222
and then you get
information about the image

00:31:32.222 --> 00:31:33.180
using machine learning.

00:31:33.180 --> 00:31:37.160
So here I have a
picture of a cute cat.

00:31:37.160 --> 00:31:38.660
Sorry for the dog lovers.

00:31:38.660 --> 00:31:39.860
I don't have a dog picture.

00:31:39.860 --> 00:31:43.430
But in this one, I passed
this image to Vision API,

00:31:43.430 --> 00:31:44.930
and then I got a JSON back.

00:31:44.930 --> 00:31:47.600
But if you look at the
JSON in a graphical way,

00:31:47.600 --> 00:31:49.616
the Vision API figured
out that this is a cat,

00:31:49.616 --> 00:31:50.990
and it even figured
out that this

00:31:50.990 --> 00:31:52.594
is a British short-haired cat.

00:31:52.594 --> 00:31:54.510
And then from there, it
can extract the color.

00:31:54.510 --> 00:31:56.660
It can extract whether
this is an adult image

00:31:56.660 --> 00:31:58.420
or a medical image.

00:31:58.420 --> 00:32:02.990
If you pass in more complicated
things, like a stadium,

00:32:02.990 --> 00:32:05.420
it figures that it's
a baseball stadium.

00:32:05.420 --> 00:32:08.130
It picks up the text
from different places.

00:32:08.130 --> 00:32:09.990
It even picks up
people's expressions.

00:32:09.990 --> 00:32:11.750
So it picked up this
guy and then the fact

00:32:11.750 --> 00:32:14.996
that he is joyful, and it even
knows where the location is.

00:32:14.996 --> 00:32:16.370
So you can see
the kind of things

00:32:16.370 --> 00:32:18.150
that you can get
from Vision API.

00:32:20.979 --> 00:32:21.770
MARC COHEN: Thanks.

00:32:21.770 --> 00:32:24.430
So underlying all
of those products

00:32:24.430 --> 00:32:27.850
that you saw, that exponential
curve that Mete showed,

00:32:27.850 --> 00:32:29.170
is TensorFlow.

00:32:29.170 --> 00:32:32.050
And for those who haven't
already encountered it,

00:32:32.050 --> 00:32:36.220
it's a framework for building
machine learning models

00:32:36.220 --> 00:32:39.980
that Google open sourced
almost two years ago.

00:32:39.980 --> 00:32:43.060
It's now become more of
an industry standard, kind

00:32:43.060 --> 00:32:45.610
of communal open
source project--

00:32:45.610 --> 00:32:49.160
tremendous contributions
and tremendous popularity.

00:32:49.160 --> 00:32:52.300
It's particularly
well-suited for building

00:32:52.300 --> 00:32:57.340
complex deep-learning
models and neural networks

00:32:57.340 --> 00:32:59.180
and those sorts of things.

00:32:59.180 --> 00:33:03.670
And when you start to
get into that domain,

00:33:03.670 --> 00:33:05.310
you really need power.

00:33:05.310 --> 00:33:07.091
You need computational power.

00:33:07.091 --> 00:33:08.590
A lot of those
models you can't just

00:33:08.590 --> 00:33:10.780
run on a laptop or something.

00:33:10.780 --> 00:33:14.470
And that's where Cloud Machine
Learning Engine comes in.

00:33:14.470 --> 00:33:16.150
So we've built this
product to make

00:33:16.150 --> 00:33:20.410
it really easy to build and
serve models, TensorFlow

00:33:20.410 --> 00:33:22.610
models, in the cloud.

00:33:22.610 --> 00:33:25.960
So the idea here is you get a
fully-managed infrastructure.

00:33:25.960 --> 00:33:28.210
You build your model,
prototype it perhaps

00:33:28.210 --> 00:33:30.640
on your workstation
or wherever, and then

00:33:30.640 --> 00:33:33.010
you upload it to the
cloud, and you'll

00:33:33.010 --> 00:33:36.040
benefit from very optimized
environment for training

00:33:36.040 --> 00:33:37.600
and for serving your requests.

00:33:40.380 --> 00:33:44.580
The other advantage you get is
the TensorFlow processing unit,

00:33:44.580 --> 00:33:46.950
which is optimized hardware
we've built ourselves,

00:33:46.950 --> 00:33:51.180
custom A6, that helps do the
Tensor math orders of magnitude

00:33:51.180 --> 00:33:55.020
faster than we've been
able to do in the past.

00:33:55.020 --> 00:33:57.120
The result of all
this is that we're

00:33:57.120 --> 00:34:01.050
making it easier for people
to build complex models so

00:34:01.050 --> 00:34:02.910
that you can really
focus on the model

00:34:02.910 --> 00:34:05.920
and not worry about things
like, where do I run it,

00:34:05.920 --> 00:34:09.330
how do I get all the CPUs I
need, how do I get the GPUs,

00:34:09.330 --> 00:34:12.400
how do I coordinate parallel
processing of models.

00:34:12.400 --> 00:34:14.730
A lot of that stuff is
being made really easy

00:34:14.730 --> 00:34:16.840
so that you can just focus
on what you care about,

00:34:16.840 --> 00:34:19.445
which is your own model.

00:34:19.445 --> 00:34:20.570
METE ATAMEL: And that's it.

00:34:20.570 --> 00:34:23.000
So that was a lot
of information.

00:34:23.000 --> 00:34:25.670
The main page that you want to
remember is cloud.google.com,

00:34:25.670 --> 00:34:28.770
but there's other links as well.

00:34:28.770 --> 00:34:31.889
We also have a free trial
if you want to try out.

00:34:31.889 --> 00:34:34.190
It's cloud.google.com/free.

00:34:34.190 --> 00:34:35.860
You get $300 for 12 months.

00:34:35.860 --> 00:34:37.190
So don't take our word for it.

00:34:37.190 --> 00:34:39.679
Try it out and see what you
like and what you don't like.

00:34:39.679 --> 00:34:39.860
MARC COHEN: Yeah.

00:34:39.860 --> 00:34:42.320
And I want to add that that's
really the best way to learn.

00:34:42.320 --> 00:34:43.880
I mean, we're doing
our best to tell you

00:34:43.880 --> 00:34:46.004
in a very short period of
time what it's all about,

00:34:46.004 --> 00:34:48.440
but I find learn by doing
is a great way to go.

00:34:48.440 --> 00:34:51.050
So avail yourself
of the free tier.

00:34:51.050 --> 00:34:51.980
Try some things out.

00:34:51.980 --> 00:34:53.030
Try building something.

00:34:53.030 --> 00:34:55.340
We think you'll
have a lot of fun,

00:34:55.340 --> 00:34:58.800
and maybe you'll build the
next amazing application.

00:34:58.800 --> 00:35:00.320
And with that,
thank you very much.

00:35:00.320 --> 00:35:01.278
METE ATAMEL: Thank you.

00:35:01.278 --> 00:35:03.910
MARC COHEN:
[NON-ENGLISH SPEECH]..

