WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.550
The Android App Sandbox
does a great job

00:00:02.550 --> 00:00:04.300
of keeping apps
separate by default.

00:00:04.300 --> 00:00:06.780
But what can you do when the
provided level of isolation

00:00:06.780 --> 00:00:09.170
doesn't match your
application's model?

00:00:09.170 --> 00:00:11.250
Hi, I'm Geremy Condra,
and in this video,

00:00:11.250 --> 00:00:13.750
we'll be talking about how you
can use the Android Platform

00:00:13.750 --> 00:00:16.040
Support for different
isolation models

00:00:16.040 --> 00:00:19.510
to make your app more
robust and more secure.

00:00:19.510 --> 00:00:21.440
What you see here is
a loose model of some

00:00:21.440 --> 00:00:23.390
of the most important
layers of isolation

00:00:23.390 --> 00:00:26.060
Android provides--
SELinux protections

00:00:26.060 --> 00:00:28.930
that separate applications
from system components.

00:00:28.930 --> 00:00:31.090
You see Linux User,
a UID separation,

00:00:31.090 --> 00:00:33.360
which keeps separate
apps separate.

00:00:33.360 --> 00:00:35.180
And you see the process
level separation

00:00:35.180 --> 00:00:37.320
between app components.

00:00:37.320 --> 00:00:40.800
So let's start off talking
about process separation.

00:00:40.800 --> 00:00:42.480
When Zygote spawns
an application,

00:00:42.480 --> 00:00:45.400
that application generally
gets its own process.

00:00:45.400 --> 00:00:47.860
This prevents other applications
from modifying its memory

00:00:47.860 --> 00:00:51.225
and isolates one app
against a crash in another.

00:00:51.225 --> 00:00:53.600
So the fact that your app and
someone else's terrible app

00:00:53.600 --> 00:00:57.970
are on the same phone doesn't
impact your app's experience.

00:00:57.970 --> 00:01:00.690
It also isolates the application
from system components

00:01:00.690 --> 00:01:03.690
and system components
from each other.

00:01:03.690 --> 00:01:05.349
Zooming in a little
bit, we can see

00:01:05.349 --> 00:01:07.330
that two apps which
don't share a process

00:01:07.330 --> 00:01:10.610
can still communicate in a
variety of ways, such as binder

00:01:10.610 --> 00:01:13.730
or the intent system, or over
legacy mechanisms like pipes

00:01:13.730 --> 00:01:14.992
or sockets.

00:01:14.992 --> 00:01:16.450
The thing to take
away from this is

00:01:16.450 --> 00:01:19.000
that process separation
isn't very restrictive.

00:01:19.000 --> 00:01:21.270
Since you can still talk
across these boundaries,

00:01:21.270 --> 00:01:24.449
it's easy to get good
isolation with little cost.

00:01:24.449 --> 00:01:26.740
And of course, when we're
talking about isolation here,

00:01:26.740 --> 00:01:29.370
what we really mean is that
if one process dies or gets

00:01:29.370 --> 00:01:33.580
compromised, other processes
can continue to run correctly.

00:01:33.580 --> 00:01:34.890
So that's the default model.

00:01:34.890 --> 00:01:37.612
And it's a good one for
a huge variety of apps.

00:01:37.612 --> 00:01:39.820
But what happens if that
basic model doesn't give you

00:01:39.820 --> 00:01:41.570
the isolation you need?

00:01:41.570 --> 00:01:44.270
What do you do when you want
to isolate one part of your app

00:01:44.270 --> 00:01:46.287
from another-- like,
say, a crashy service

00:01:46.287 --> 00:01:48.370
or a network-aware component--
from something that

00:01:48.370 --> 00:01:50.740
handles keys or
other sensitive data?

00:01:50.740 --> 00:01:53.410
Fortunately, Android's
got your back.

00:01:53.410 --> 00:01:55.230
Activities and
services both support

00:01:55.230 --> 00:01:57.280
the Android process attribute.

00:01:57.280 --> 00:01:59.470
This allows you to specify
exactly what process

00:01:59.470 --> 00:02:01.886
you want to run your code in
and getting a new one spawned

00:02:01.886 --> 00:02:04.560
for that component if it
doesn't already exist.

00:02:04.560 --> 00:02:06.060
In this example,
we have the service

00:02:06.060 --> 00:02:08.143
that we don't want taking
down the rest of our app

00:02:08.143 --> 00:02:09.119
if it crashes.

00:02:09.119 --> 00:02:11.660
By specifying that it should be
run in a process called colon

00:02:11.660 --> 00:02:14.490
crashy, we make sure that
Android will run the service

00:02:14.490 --> 00:02:18.130
in a new process created
explicitly for this purpose.

00:02:18.130 --> 00:02:19.970
Once you're done,
the set of processes

00:02:19.970 --> 00:02:22.120
looks a little more like this.

00:02:22.120 --> 00:02:25.050
Because colon crashy and the
app processor are separate,

00:02:25.050 --> 00:02:28.730
crashy can go down and not
take down the rest of the app.

00:02:28.730 --> 00:02:31.440
You can also use this to better
restrict your IPC endpoint.

00:02:31.440 --> 00:02:33.380
In this model, colon
crashy won't wind up

00:02:33.380 --> 00:02:36.010
indirectly talking to
the IPC endpoints needed

00:02:36.010 --> 00:02:38.660
by other components.

00:02:38.660 --> 00:02:40.880
So why do we need the
other layers of isolation?

00:02:40.880 --> 00:02:43.425
Why not just use
processes for everything?

00:02:43.425 --> 00:02:45.800
The reason we don't use process
separation for everything

00:02:45.800 --> 00:02:47.758
is because it doesn't
come with a different set

00:02:47.758 --> 00:02:49.204
of persistent credentials.

00:02:49.204 --> 00:02:50.620
So while another
process might not

00:02:50.620 --> 00:02:53.287
be able to modify your memory,
if it has the same UID,

00:02:53.287 --> 00:02:54.870
it'll have the same
permissions, it'll

00:02:54.870 --> 00:02:57.940
be able to read and write
the same files, et cetera.

00:02:57.940 --> 00:02:59.670
As a result, besides
being separated

00:02:59.670 --> 00:03:01.870
by process boundaries,
Android applications

00:03:01.870 --> 00:03:04.850
are also generally
run as their own user.

00:03:04.850 --> 00:03:06.800
This forms the basis
for the App Sandbox,

00:03:06.800 --> 00:03:09.010
as well as the separation
between application home

00:03:09.010 --> 00:03:10.330
directories.

00:03:10.330 --> 00:03:13.290
In this way, Android provides
a kernel-enforced guarantee

00:03:13.290 --> 00:03:14.980
that the application's
data can only

00:03:14.980 --> 00:03:17.890
be modified by that
application, unless the app

00:03:17.890 --> 00:03:19.255
decides otherwise.

00:03:19.255 --> 00:03:23.236
This gives a ton of flexibility
and control to the application.

00:03:23.236 --> 00:03:25.610
There are two exceptions to
this rule that every app gets

00:03:25.610 --> 00:03:29.410
its own UID-- shared UID
and isolated process.

00:03:29.410 --> 00:03:32.010
Let's talk about
shared UID first.

00:03:32.010 --> 00:03:35.060
In this diagram, apps B and
C are marked shared UID,

00:03:35.060 --> 00:03:36.940
while app A is not.

00:03:36.940 --> 00:03:39.060
Applications marked
shared UID and signed

00:03:39.060 --> 00:03:40.570
with the same keys
are able to do

00:03:40.570 --> 00:03:42.770
almost anything
the other can do.

00:03:42.770 --> 00:03:44.310
So from the security
perspective,

00:03:44.310 --> 00:03:46.510
marking two
applications shared UID

00:03:46.510 --> 00:03:50.040
means that they can be treated
as essentially the same app.

00:03:50.040 --> 00:03:52.600
And that's sometimes useful
to help break up applications

00:03:52.600 --> 00:03:55.210
or provide access to
resources in interesting ways.

00:03:55.210 --> 00:03:58.130
But in security, we more often
get the opposite question.

00:03:58.130 --> 00:04:00.990
What do I do if I want to break
one app into several security

00:04:00.990 --> 00:04:03.120
contexts instead?

00:04:03.120 --> 00:04:05.469
And that's where isolated
process comes in.

00:04:05.469 --> 00:04:07.010
To see why it's
valuable let's return

00:04:07.010 --> 00:04:09.160
to the example of
the crashy service.

00:04:09.160 --> 00:04:11.514
Especially for native code,
it may not make sense just

00:04:11.514 --> 00:04:13.180
to isolate yourself
from the possibility

00:04:13.180 --> 00:04:15.030
that your code will crash.

00:04:15.030 --> 00:04:17.860
If the code is really suspect,
like certain kinds of renderers

00:04:17.860 --> 00:04:19.490
or media codecs,
you may not want

00:04:19.490 --> 00:04:22.070
to have very much to do
with that code at all.

00:04:22.070 --> 00:04:24.440
In fact, you may want to run
it in a completely separate

00:04:24.440 --> 00:04:28.540
processing user-- essentially,
as its own separate app.

00:04:28.540 --> 00:04:31.392
And that's exactly what
isolated process does.

00:04:31.392 --> 00:04:33.100
The net result looks
something like this,

00:04:33.100 --> 00:04:35.720
with app A split
into two components.

00:04:35.720 --> 00:04:37.590
Each is in a different
user and process,

00:04:37.590 --> 00:04:40.030
meaning that the isolated
part of the application

00:04:40.030 --> 00:04:43.030
is as separate from app
A as other apps are.

00:04:43.030 --> 00:04:45.280
So when should you use
process, and when should you

00:04:45.280 --> 00:04:47.790
use isolated process?

00:04:47.790 --> 00:04:50.500
Use process when the isolated
code is pure Java, when

00:04:50.500 --> 00:04:52.700
it doesn't contain an
interpreter or similar,

00:04:52.700 --> 00:04:55.060
or when it needs to interact
with other processes

00:04:55.060 --> 00:04:56.590
on your behalf.

00:04:56.590 --> 00:04:58.900
Use isolated process
when the isolated code

00:04:58.900 --> 00:05:01.720
is native code, when it
performs complex operations

00:05:01.720 --> 00:05:03.960
like rendering or
encoding, when it contains

00:05:03.960 --> 00:05:06.010
an interpreter or
JIT, and when it

00:05:06.010 --> 00:05:08.530
doesn't need to
run as your user.

00:05:08.530 --> 00:05:11.270
That's it for isolation
for Android app developers.

00:05:11.270 --> 00:05:13.700
Be sure to check out the
other videos in this series,

00:05:13.700 --> 00:05:15.870
and thanks for watching.

