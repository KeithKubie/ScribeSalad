WEBVTT
Kind: captions
Language: en

00:00:00.350 --> 00:00:03.940
AFS passes the first test. It does address

00:00:03.940 --> 00:00:07.040
the issue of mutual suspicion from fellow users, as

00:00:07.040 --> 00:00:10.800
well as from the server. Unfortunately, AFS fails the

00:00:10.800 --> 00:00:14.630
second test and that is protecting the user from

00:00:14.630 --> 00:00:17.420
the system. There's no way to protect the

00:00:17.420 --> 00:00:19.740
user from the system because the user has to

00:00:19.740 --> 00:00:23.190
trust the system. Everything is stored on the system,

00:00:23.190 --> 00:00:25.700
so in that sense there is no protection for

00:00:25.700 --> 00:00:32.180
the user from the system itself. It also fails on the third attribute,

00:00:32.180 --> 00:00:38.790
confinement of resource usage. For instance, a given user can make a lot of

00:00:38.790 --> 00:00:44.590
calls on the server. In other words, they could consume a lot of network

00:00:44.590 --> 00:00:48.870
bandwidth. There's no way to confine resource

00:00:48.870 --> 00:00:51.760
usage in the Andrew File System. And

00:00:51.760 --> 00:00:58.200
this can also be the basis for Denial Of Service attacks. If one malicious user

00:00:58.200 --> 00:01:00.710
or an errant program that is running on

00:01:00.710 --> 00:01:04.330
the virtual workstation starts generating a whole bunch

00:01:04.330 --> 00:01:08.200
of network packets, genuine network packets, directed at

00:01:08.200 --> 00:01:11.260
the server, it can inundate the network and

00:01:11.260 --> 00:01:14.100
prevent others from getting useful work done. So,

00:01:14.100 --> 00:01:16.950
in other words, confinement of resource usage is

00:01:16.950 --> 00:01:20.140
not something that exists in the AFS

00:01:20.140 --> 00:01:23.620
system. It passes the authentication test. We can

00:01:23.620 --> 00:01:27.810
validate in both directions, the client and the server, so the answer is yes on

00:01:27.810 --> 00:01:29.800
that one. The last attribute is the

00:01:29.800 --> 00:01:32.400
integrity of the server, remember that in the

00:01:32.400 --> 00:01:37.630
Andrew system the assumption is that the clients

00:01:37.630 --> 00:01:42.510
running on the virtual work station, they communicate

00:01:42.510 --> 00:01:48.540
to vice using insecure links. On the other hand, the servers themselves

00:01:48.540 --> 00:01:55.730
are inside, in some sense, a firewall and therefore they don't need any

00:01:55.730 --> 00:02:01.100
secure communication. So their links that are inside the server network is

00:02:01.100 --> 00:02:03.290
assumed to be secure and therefore

00:02:03.290 --> 00:02:07.660
there is no authentication or encryption inside

00:02:07.660 --> 00:02:13.600
the server network. Therefore, if somebody were to somehow get into that

00:02:13.600 --> 00:02:21.520
firewall they can create havoc. So the only way you can give server integrity in

00:02:21.520 --> 00:02:27.470
the Andrew File System is by physically enforcing who can get into those

00:02:27.470 --> 00:02:33.610
walls of the server. So physical and social mores are the only way to secure

00:02:33.610 --> 00:02:36.500
the integrity of the servers themselves. So I'm going to

00:02:36.500 --> 00:02:40.090
give it not a passing mark on server integrity, because by

00:02:40.090 --> 00:02:44.990
design, the servers are assumed to be in a secure environment

00:02:44.990 --> 00:02:49.260
and that can be one of the biggest sources of vulnerabilities.

