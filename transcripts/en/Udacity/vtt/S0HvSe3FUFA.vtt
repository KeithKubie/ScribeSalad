WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
How do dependencies fit into our model of debugging?

00:00:04.000 --> 00:00:06.000
Well, that's fairly straight forward.

00:00:06.000 --> 00:00:11.000
When we see a failure, we see which part of the state is erroneous.

00:00:11.000 --> 00:00:15.000
Then we track back the dependencies to see

00:00:15.000 --> 00:00:19.000
which earlier states could possibly have caused that infection.

00:00:19.000 --> 00:00:23.000
We determine these possible states as well as the locations in the

00:00:23.000 --> 00:00:27.000
program where they would be caused through the dependencies.

00:00:27.000 --> 00:00:29.000
So, if we see an error down here, it could have come

00:00:29.000 --> 00:00:32.000
from here, from here, or from here.

00:00:32.000 --> 00:00:36.000
In one out of these three, or at least one out of these three,

00:00:36.000 --> 00:00:41.000
should contain the infection that we're looking for.

00:00:41.000 --> 00:00:44.000
So we use dependencies to find possible

00:00:44.000 --> 00:00:47.000
origins for each for each infection.

00:00:47.000 --> 00:00:49.000
In the second step we use the

00:00:49.000 --> 00:00:52.000
scientific method to track down infections.

00:00:52.000 --> 00:00:55.000
We have the choice between three possible origins here.

00:00:55.000 --> 00:00:58.000
So, we use the scientific method to find out

00:00:58.000 --> 00:01:01.000
which of these three parts of the state is at fault.

00:01:01.000 --> 00:01:03.000
We set up an experiment.

00:01:03.000 --> 00:01:06.000
We make up the appropriate observation,

00:01:06.000 --> 00:01:10.000
and we gradually refine or reject our hypothesis

00:01:10.000 --> 00:01:13.000
until we have come up with a diagnosis

00:01:13.000 --> 00:01:17.000
and figured out which part of the state is wrong.

00:01:17.000 --> 00:01:24.000
Then we repeat the whole thing back and back and back again.

00:01:24.000 --> 00:01:29.000
Again, choosing between multiple possible origins,

00:01:29.000 --> 00:01:32.000
following back the dependencies,

00:01:32.000 --> 00:01:36.000
and again using the scientific method to track down

00:01:36.000 --> 00:01:39.000
which of these actually is at fault.

00:01:39.000 --> 00:01:45.000
Instead of the scientific method, you can also use deduction

00:01:45.000 --> 00:01:48.000
to rule out specific possibilities.

00:01:48.000 --> 00:01:53.000
For instance, you may be able to show that neither this one nor this one

00:01:53.000 --> 00:01:57.000
can possibly have influenced the state under these circumstances.

00:01:57.000 --> 00:02:01.000
So, the only one that remains is the one up here.

00:02:01.000 --> 00:02:05.000
You repeat the process until you find a statement

00:02:05.000 --> 00:02:12.000
whose in-going state is all correct, but where the out-going state is infected.

00:02:12.000 --> 00:02:17.000
So, how do we call a statement whose in-going state is all correct,

00:02:17.000 --> 00:02:20.000
but its out-going state is infected?

00:02:20.000 --> 00:02:22.000
What is this?

00:02:22.000 --> 00:02:24.000
Is this a cause, a defect, or an infection?

