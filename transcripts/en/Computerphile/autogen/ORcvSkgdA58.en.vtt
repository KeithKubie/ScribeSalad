WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:05.600
So we did a video a while back on the SCP exploit in the secure copy, and I though it would be just a

00:00:05.660 --> 00:00:10.460
sort of interesting to talk/have a look in a bit more detail about how SSH works.

00:00:10.460 --> 00:00:20.200
SSH stands for 'Secure Shell' and it first appeared in the mid 90's as a sort of replacement for/way of connecting to a remote machine over the internet.

00:00:20.280 --> 00:00:27.740
Up until that time the technologies you had to connect to a remote machine, Telnet, rlogin, RSH and so on, worked fine

00:00:27.740 --> 00:00:32.820
but they transmitted all the data in the clear over the network.  So if you logged into a remote machine

00:00:32.900 --> 00:00:39.440
anyone with a packet sniffer between you and the remote machine could see everything you were doing on there.

00:00:39.920 --> 00:00:47.500
When these protocols first appeared that wasn't a problem because the machines were probably only networked within their computer department of a university

00:00:47.500 --> 00:00:54.740
or a company so the people that had access to do that were people who worked there and probably the system administrators who had access to these things.

00:00:54.740 --> 00:01:00.840
Anyway, but as the machines got networked to other networks and you started to build the internet, if you had access to the network

00:01:00.840 --> 00:01:04.380
Any network that the data was travelling over you could sniff the packets.

00:01:04.380 --> 00:01:08.120
And see any of the data that was being transmitted, including passwords and things.

00:01:08.120 --> 00:01:13.900
And so in 1995, Tatu Ylonen in Finland (I apologies if I pronounced that wrongly) was concerned about this

00:01:14.400 --> 00:01:24.160
so he developed a protocol SSH 'Secure Shell' to sort of encrypt the data so that you couldn't sort of see how/what was being sent over the wire

00:01:24.160 --> 00:01:28.660
You could see that data was being transmitted across, you could see how much data

00:01:28.660 --> 00:01:33.780
You could see the frequency of it to a certain extent, but you couldn't see what the data was, so you could do

00:01:33.780 --> 00:01:38.380
certain types of analysis to see whats happening, but you couldn't see the actual data.

00:01:38.380 --> 00:01:42.860
And so SSH was developed as a way of encrypting the connection between two machines

00:01:42.860 --> 00:01:47.720
but it actually does a lot more than that, because when you SSH to another machine

00:01:47.860 --> 00:01:53.900
The first thing that happens is that you open up a TCP connection between those two machines

00:01:53.900 --> 00:01:55.080
like any standard things.

00:01:55.240 --> 00:02:00.980
Although it doesn't have to be a TCP connection.  You can actually specify that SSH uses any sort of reliable

00:02:01.060 --> 00:02:06.240
network connection to make that, so you could theoretically run it over an RS-232 connection.

00:02:06.240 --> 00:02:09.580
You could run it over the top of web sockets and things like that.

00:02:09.580 --> 00:02:11.780
And I know people who have done that sort of thing.

00:02:11.940 --> 00:02:17.200
So you've got a reliable transport between the two machines and so SSH is sending data over there.

00:02:17.360 --> 00:02:22.940
And what SSH does is it breaks the data down into a series of packets.

00:02:22.940 --> 00:02:28.280
And just like any packet transfer, these things have a few fields at the beginning.

00:02:28.280 --> 00:02:33.700
So at the top you have something that tells you how big the packet is, so you have the packet

00:02:33.700 --> 00:02:41.880
length, there are 4 bytes saying the packet is 'this big'.  After that, you have another  byte, which tells you

00:02:41.880 --> 00:02:47.300
how much padding you've got.  So you've got the packet length.  You've got how much padding there is

00:02:47.420 --> 00:02:51.460
and then you've got the data you want - the payload.

00:02:51.460 --> 00:02:58.260
Then you have the padding that follows that, and so what you do, with each packet after the payload

00:02:58.260 --> 00:03:03.060
the data that you want to send that's part of the connection, you add a small amount of padding.

00:03:03.060 --> 00:03:08.400
Just random bytes.  They don't mean anything, but they sort of force the encryption to sort of make

00:03:08.440 --> 00:03:11.180
it harder to detect what's going on because you've got random data in there.

00:03:11.240 --> 00:03:15.500
[See some of Mike's videos, for more details on why you might want to do that]

00:03:15.520 --> 00:03:19.220
And then, you have some sort of message authentication code there, so that

00:03:19.220 --> 00:03:22.140
you know that the data here hasn't been 'monkied' around with

00:03:22.140 --> 00:03:23.240
and it's actually what has been sent.

00:03:23.240 --> 00:03:26.980
You can the apply compression if you want to - to the payload

00:03:26.980 --> 00:03:34.340
so you can compress the payload using standard compression algorithms, such as zlib, or something to compress the data.

00:03:34.340 --> 00:03:40.200
And then, the whole of that packet (excluding the length) is then encrypted.

00:03:40.200 --> 00:03:44.220
The algorithms used for the encryption and for the message authentication code

00:03:44.220 --> 00:03:48.740
are selected by the server and the client. They establish that at the beginning, which ones they offer

00:03:48.740 --> 00:03:55.680
which ones they want to use and things, so they are established by the client and the server, so vary from connection to connection.

00:03:55.680 --> 00:03:59.660
And you can offer many and you can choose the one that is perhaps best for that connection.

00:03:59.660 --> 00:04:02.380
We'll ignore that for the purposes of this video.

00:04:02.380 --> 00:04:06.060
So we leave the packet length unencrypted, because obviously we need to know how much data is coming.

00:04:06.060 --> 00:04:10.080
We encrypt the padding length.  We encrypt the payload. We encrypt the padding

00:04:10.080 --> 00:04:20.800
and we send the packet out over the network.  At the other end, that's decrypted by the server, and it then knows it's got the packet of data.

00:04:20.800 --> 00:04:22.200
And it can piece it back together.

00:04:22.260 --> 00:04:25.500
And then the same thing is done for this packet, and this packet, and every packet.

00:04:25.500 --> 00:04:28.040
And the encryption is done, so that it's continuous.

00:04:28.040 --> 00:04:33.920
You start encrypting this one with the vectors from this one, and so on, so it sort of encrypts it one after the other.

00:04:33.920 --> 00:04:40.120
At the server, or the client, which receives this you just reverse that process, so you decrypt the packets

00:04:40.120 --> 00:04:45.480
you decompress the payload, and you can extract the data and sort of stitch it back together.

00:04:45.480 --> 00:04:53.440
So you start off, you've got your TCP connection and that's unencrypted, and on top of that you've got these

00:04:53.520 --> 00:04:58.800
packets, which have been encrypted by the SSH protocol flowing on top of that.

00:04:58.800 --> 00:05:01.520
But that's not the end of the story.  That's just encrypting the packets.

00:05:01.520 --> 00:05:06.640
It's/that's not the connection that say if you're SSH and that's not you connection to the remote machine.

00:05:06.640 --> 00:05:12.820
On top of that, you then open a series of channels that you send the data over.

00:05:12.820 --> 00:05:17.960
And the reason for that is it enables you to multiplex multiple connections over that thing

00:05:18.000 --> 00:05:23.400
so when I start a connection to my machine, it's creating a channel on top of this.

00:05:23.400 --> 00:05:31.700
So if this is one computer over here, and this is another one over here, we're creating this channel here for

00:05:31.760 --> 00:05:35.080
our shell connection where we can communicate and control things.

00:05:35.080 --> 00:05:39.900
But this is actually being actually being represented by a connection through the SSH packets.

00:05:39.900 --> 00:05:45.140
And we could have multiple ones of these between the same machines.  Or we could have different types

00:05:45.140 --> 00:05:51.160
of connections, so for example SSH also allows you to forward any sort of TCP connection over there

00:05:51.160 --> 00:05:56.300
so you can connect to a remote service via the SSH tunnel, so you can tunnel that through

00:05:56.300 --> 00:06:02.160
and its encrypted and then sent out at the other end.  And if we make the connection with

00:06:02.180 --> 00:06:08.740
verbose mode on, we can actually see it's setting up that connection.  So what we've got here, it's reading the

00:06:08.740 --> 00:06:13.280
configuration data, its local protocol string is.

00:06:13.280 --> 00:06:18.400
So it connects to the remote machine. It sends back saying I support this version of SSH.

00:06:18.400 --> 00:06:24.680
I've sent what my version is.  We've then exchanged information about our compatibility

00:06:24.680 --> 00:06:30.580
what method it is we are going to use for encrypting the messages - the packets over the network. And so on.

00:06:30.580 --> 00:06:35.040
We've checked that we know the machine, and then we get down to here, we're now trying to authenticate

00:06:35.040 --> 00:06:40.080
so it's now establishing, ok this is this user on that machine so I can put my password in.

00:06:40.080 --> 00:06:45.100
And we're now connected, but if we look here 'Authentication succeeded'

00:06:45.100 --> 00:06:49.200
we are authenticated to the remote machine and you see here it has created a new channel.

00:06:49.200 --> 00:06:54.660
So it's creating a connection, which again is just going to be 'I send bytes down here' they appear at the other end.

00:06:54.740 --> 00:06:58.240
You send bytes the other way, they come back to us over this channel.

00:06:58.240 --> 00:07:02.280
And it's then setting up what type of connection it is.  It's setting environment variables and things.

00:07:02.280 --> 00:07:08.360
And this is done by sending packets of data wrapped up inside the SSH packets which establish that.

00:07:08.360 --> 00:07:12.620
Once that's done, we can then communicate and have our interactive session.

00:07:12.620 --> 00:07:19.060
So SSH is not just a sort of way of connecting your shell.  It's actually got layers of things on top of that

00:07:19.060 --> 00:07:20.920
which enable you to do lots of interesting things.

00:07:20.920 --> 00:07:25.660
So you can have multiple connections made over this thing.

00:07:25.660 --> 00:07:30.520
You don't just have to have one and there are ways you can set SSH up, so that actually, you make

00:07:30.560 --> 00:07:34.140
the connection, and it stays connected. When you've finished, so if you make then make another

00:07:34.280 --> 00:07:41.140
connection to the same server, it reuses that existing connection and multiplexes the two connections in between things.

00:07:41.340 --> 00:07:47.060
It can start and stop forwarded TCP connections to other addresses, in both directions

00:07:47.060 --> 00:07:50.880
while the connection is running, just by sending different things over this connection.

00:07:50.880 --> 00:07:53.580
The reason why it's got all this functionality is that often

00:07:53.700 --> 00:07:57.840
(particularly in the Unix environment, or the Linux environment) when you are connecting to to other

00:07:58.000 --> 00:08:02.960
machines, you may just want a remote shell connection, where you just want to type commands and things

00:08:02.980 --> 00:08:09.240
that's great. But also, the way the Unix X windows graphical user interface works

00:08:09.240 --> 00:08:17.340
is that has a/normally done over a connection usually TCP/IP to port 6000, although it can be done over other things as well

00:08:17.340 --> 00:08:22.140
and that could then be forwarded as another connection, so that you could login to another machine and send

00:08:22.140 --> 00:08:26.320
the graphics commands back encrypted as well.

00:08:26.320 --> 00:08:32.040
Occasionally you may want to connect to a service behind a firewall, and you can do that by tunnelling that

00:08:32.040 --> 00:08:36.260
tunnelling it through the SSH connection. So there's lots of reasons why it was built this way.

00:08:36.260 --> 00:08:44.380
But it's a nice feature, and I know I've been using this now for 20 odd years, 24 years probably now.

00:08:44.380 --> 00:08:48.080
But actually you're still discovering new things you can do with it. For example

00:08:48.080 --> 00:08:53.060
that you can keep a connection alive beyond when you've just disconnected from the shell

00:08:53.060 --> 00:08:58.980
so they can reuse that TCP connection. The lower level bits, when you create a new connection on top.

