WEBVTT
Kind: captions
Language: en

00:00:00.300 --> 00:00:05.100
Hey there, so I've got one more sort
of lingering question in my mind.

00:00:05.100 --> 00:00:08.004
I know we're using all these
Firebase UI classes for

00:00:08.004 --> 00:00:10.776
basically everything in
the app to do with lists.

00:00:10.776 --> 00:00:16.020
But I'm confused why Firebase array
doesn't just grab an array list.

00:00:17.340 --> 00:00:21.450
Hey, looks like J.P.'s texting me,
and he wants me to go to Google and

00:00:21.450 --> 00:00:23.350
talk to a Firebase expert.

00:00:23.350 --> 00:00:25.990
Well that's pretty cool,
but I'm not free.

00:00:25.990 --> 00:00:28.910
I told Kagure I'd cheer her on in
the finals of the Cheesy Flakes

00:00:28.910 --> 00:00:31.460
cheddar cheese cook off championships.

00:00:31.460 --> 00:00:33.500
Hm, but you're available right?

00:00:33.500 --> 00:00:36.430
Why don't you head over there right
now and report back what you learn.

00:00:36.430 --> 00:00:37.886
want to borrow the company bike?

00:00:37.886 --> 00:00:42.577
[MUSIC]

00:00:42.577 --> 00:00:45.450
&gt;&gt; So
how does Firebase treat lists in arrays?

00:00:45.450 --> 00:00:48.050
&gt;&gt; So, lists in Firebase

00:00:48.050 --> 00:00:52.530
deviate a little from the traditional
array concept you're used to.

00:00:52.530 --> 00:00:57.310
The big difference is in Firebase,
we always have these key value pairs.

00:00:57.310 --> 00:01:00.620
That value might be an object with more
keys so you can have this hierarchical

00:01:00.620 --> 00:01:03.410
structure, but
it's always a key and a value.

00:01:03.410 --> 00:01:07.010
An array in a traditional situation
is a key value pair where the key is

00:01:07.010 --> 00:01:10.300
an integer, and the pair is whatever
data is stored in that array.

00:01:10.300 --> 00:01:12.540
Firebase doesn't quite like that.

00:01:12.540 --> 00:01:14.280
You can put in integer keys,

00:01:14.280 --> 00:01:17.780
you can make an exact normal
array structure in your Firebase.

00:01:17.780 --> 00:01:20.920
But when you're building real time
applications that deal with information

00:01:20.920 --> 00:01:24.280
that's changing quickly, or a lot of
new information that's being added.

00:01:24.280 --> 00:01:26.890
There's a really good chance that
two people are going to try and

00:01:26.890 --> 00:01:29.080
add the same new integer
key at the same time.

00:01:29.080 --> 00:01:32.130
So if we have four items and
then somebody adds a fifth,

00:01:32.130 --> 00:01:34.770
and another person across the planet
adds a fifth, one of those people

00:01:34.770 --> 00:01:36.980
are going to win and the other
one's going to lose their data.

00:01:36.980 --> 00:01:37.990
That's why in Firebase,

00:01:37.990 --> 00:01:42.450
we use this concept of pushing
in with these unique push ids.

00:01:42.450 --> 00:01:46.650
These are pretty much globally unique
identifiers that will be sorted in

00:01:46.650 --> 00:01:51.540
the same way as integer keys, where if I
push in later it will appear later and

00:01:52.940 --> 00:01:55.350
they essentially function like an array.

00:01:55.350 --> 00:01:57.340
The only difference is
instead of having one, two,

00:01:57.340 --> 00:02:01.370
three, four as our keys,
we have these long complicated stings.

00:02:01.370 --> 00:02:04.620
But once it's in there you can pull
the data out, you can look through it,

00:02:04.620 --> 00:02:06.740
you can do everything you
would on a normal array.

00:02:06.740 --> 00:02:09.060
Especially if you're using
one of our helper libraries.

00:02:09.060 --> 00:02:12.790
It's just the structure looks a little
bit different in your Firebase.

00:02:12.790 --> 00:02:14.680
&gt;&gt; So
why did Firebase take this approach.

00:02:14.680 --> 00:02:17.830
&gt;&gt; It was mostly our concern for
the real time aspect.

00:02:17.830 --> 00:02:20.710
We wanted to make it really easy to
build data that multiple people were

00:02:20.710 --> 00:02:23.030
editing and
collaborating on at the same time.

00:02:23.030 --> 00:02:26.293
And like I said, you can run into these
race conditions where you have multiple

00:02:26.293 --> 00:02:27.988
people trying to add onto the same list.

00:02:27.988 --> 00:02:28.905
And the integers,

00:02:28.905 --> 00:02:32.312
it's just too likely that two people
will write to it at the same time.

00:02:32.312 --> 00:02:34.660
Using these unique keys,
we can guarantee that if two people, or

00:02:34.660 --> 00:02:38.490
100 people in the world will write
to this location at the same time,

00:02:38.490 --> 00:02:40.220
they're not,
no one's going to lose their data.

00:02:40.220 --> 00:02:42.008
No one's going to get
overwritten by someone else,

00:02:42.008 --> 00:02:44.070
they'll all be unique,
all the data will be there.

00:02:44.070 --> 00:02:47.575
And you can ensure that all your users
interactions will be safely stored in

00:02:47.575 --> 00:02:48.600
Firebase.

00:02:48.600 --> 00:02:51.510
&gt;&gt; So what are some of the pros and
cons of this approach?

00:02:51.510 --> 00:02:54.030
&gt;&gt; Well the con is that
it's a little unusual.

00:02:54.030 --> 00:02:56.670
People are used to dealing
with lists as arrays,

00:02:56.670 --> 00:02:58.580
they're used to those integer keys.

00:02:58.580 --> 00:03:01.990
And when people look at their data
in Firebase they see this familiar

00:03:01.990 --> 00:03:05.180
push method that comes
in any of our SDKs, and

00:03:05.180 --> 00:03:08.050
they assume it's going to
act like a normal array.

00:03:08.050 --> 00:03:10.110
Which for many reasons it does, but

00:03:10.110 --> 00:03:12.796
the big change is that
we use these unique IDs.

00:03:12.796 --> 00:03:16.955
So, that's probably the real
big difference that people see,

00:03:16.955 --> 00:03:19.660
is just that, it's a little unnatural.

00:03:19.660 --> 00:03:22.300
But as soon as you realize why
we make these decisions, and

00:03:22.300 --> 00:03:25.550
why we're helping you to make sure
that your application scales and

00:03:25.550 --> 00:03:29.920
runs efficiently at any size,
then it makes a lot of sense.

00:03:29.920 --> 00:03:32.690
&gt;&gt; Well, are there any times that
you need to use an array, and

00:03:32.690 --> 00:03:33.960
how would you do it?

00:03:33.960 --> 00:03:37.850
&gt;&gt; There are definitely times people
want to use arrays, and it typically has

00:03:37.850 --> 00:03:42.460
to do when you're integrating with
an older system, or some existing

00:03:42.460 --> 00:03:47.200
application that is very committed
to using these traditional arrays.

00:03:47.200 --> 00:03:52.100
And you can do that in Firebase, you
can use integer keys in your Firebase,

00:03:52.100 --> 00:03:53.540
it's completely fine.

00:03:53.540 --> 00:03:56.330
The important part to remember is
just that if you have a lot of people

00:03:56.330 --> 00:03:59.560
writing to this data at the same time,
trying to change that array,

00:03:59.560 --> 00:04:02.030
trying to add in new things,
you're going to run into issues.

00:04:02.030 --> 00:04:05.030
But if you have, for example,
a dot net application that

00:04:05.030 --> 00:04:09.390
every 24 hours it's pushing in a list
of your top 100 users into Firebase,

00:04:09.390 --> 00:04:14.335
you can use normal integer keys just
like a normal array, and that's fine.

00:04:14.335 --> 00:04:16.950
because you only have your one
server ever writing into Firebase.

00:04:16.950 --> 00:04:18.399
There's not going to be
any erase conditions,

00:04:18.399 --> 00:04:20.730
there's not going to
be anything like that.

00:04:20.730 --> 00:04:22.170
So that's completely okay.

00:04:22.170 --> 00:04:25.270
And Firebase does do some handling to
help transition that into a normal

00:04:25.270 --> 00:04:28.630
looking array, especially if you're
exporting JSON through our traditional

00:04:28.630 --> 00:04:32.110
rest API, which is what you would be
doing if you were using dot net or

00:04:32.110 --> 00:04:35.282
any PHP,
any of these more traditional stacks.

00:04:35.282 --> 00:04:37.750
So yeah, there are definitely
situations where you can do it, and

00:04:37.750 --> 00:04:40.820
we support those,
we just generally don't recommend it for

00:04:40.820 --> 00:04:43.670
any quickly changing,
quickly moving data.

00:04:43.670 --> 00:04:47.030
&gt;&gt; Now you mentioned push IDs,
how are push IDs generated, and

00:04:47.030 --> 00:04:48.340
what makes them so great?

00:04:48.340 --> 00:04:52.150
So push IDs can be thought
of as a globally unique ID,

00:04:52.150 --> 00:04:55.830
they're not a traditional GUid
that you've seen before, but for

00:04:55.830 --> 00:05:00.110
all intents and
purposes they are completely unique,

00:05:00.110 --> 00:05:04.110
and they're a little magical in that
they're lexigraphically sorted.

00:05:04.110 --> 00:05:08.400
Which means that if I push in now,
and I call it pushing in later,

00:05:08.400 --> 00:05:12.470
it will sort as you'd expect,
it'll come later in the list.

00:05:12.470 --> 00:05:15.970
We do that by basing it off of
the time of when you pushed in,

00:05:15.970 --> 00:05:17.250
we look at an apec.

00:05:17.250 --> 00:05:22.040
And we say, okay, what is a nice version
of this that we know will sort properly.

00:05:22.040 --> 00:05:24.770
And then we also add in some
extra logic on top of that to

00:05:24.770 --> 00:05:26.810
make sure there are no collisions.

00:05:26.810 --> 00:05:29.870
So if I have a server running
that's pushing in 10,000 items,

00:05:29.870 --> 00:05:32.650
we make sure that, even if you push
those all in on the exact same

00:05:32.650 --> 00:05:36.000
millisecond from the same machine,
there will be no collisions.

00:05:36.000 --> 00:05:40.050
So it is a lot of logic behind it,
but the important part is they're just

00:05:40.050 --> 00:05:43.430
strings that will lexographically
sort in the correct order.

00:05:43.430 --> 00:05:46.280
And they're so
great just because they avoid all

00:05:46.280 --> 00:05:49.420
your race condition problems that you
might have using traditional arrays.

00:05:49.420 --> 00:05:51.050
&gt;&gt; Well Abe, thanks a lot for your time.

00:05:51.050 --> 00:05:52.390
I think it's going to
really help my friend out.

00:05:52.390 --> 00:05:53.485
I think she's going to
be able to continue to

00:05:53.485 --> 00:05:56.020
developing your Firebase app,
and, yeah, appreciate it.

00:05:56.020 --> 00:05:57.020
&gt;&gt; Awesome, thanks so much.

