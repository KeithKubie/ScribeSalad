WEBVTT
Kind: captions
Language: en

00:00:02.501 --> 00:00:04.067
Ramsdale: Thanks for coming out.

00:00:04.067 --> 00:00:05.734
Welcome to day two
of Google I/O.

00:00:05.734 --> 00:00:08.968
I hope you enjoyed the, uh,
the great keynote on Chrome.

00:00:08.968 --> 00:00:11.133
Uh, and thanks for coming
to this session.

00:00:11.133 --> 00:00:13.467
Today, we're talking
about using GWT and Eclipse

00:00:13.467 --> 00:00:15.467
to build great mobile web apps.

00:00:15.467 --> 00:00:18.467
My name is Chris Ramsdale.
I'm the product manager for GWT

00:00:18.467 --> 00:00:20.801
and the Google Plugin
for Eclipse.

00:00:20.801 --> 00:00:23.801
So let's get right down to it.
Let's talk about why we're here,

00:00:23.801 --> 00:00:25.801
make sure you're actually
in the right room.

00:00:25.801 --> 00:00:28.300
I'm assuming so.
Um, by a show of hands,

00:00:28.300 --> 00:00:31.801
how many people actually have
a GWT application

00:00:31.801 --> 00:00:35.467
that they've built
or that is in production today?

00:00:35.467 --> 00:00:37.467
All right, great.

00:00:37.467 --> 00:00:39.467
So chances are,
there's plenty of people

00:00:39.467 --> 00:00:41.467
that are building web apps
in the audience today,

00:00:41.467 --> 00:00:43.000
and as many developers are,

00:00:43.000 --> 00:00:44.801
you're interested in doing
something in mobile.

00:00:44.801 --> 00:00:46.801
So actually, we'll do that, too.
So a show of hands--

00:00:46.801 --> 00:00:48.801
how many people are interested
in doing something in mobile

00:00:48.801 --> 00:00:50.634
or are doing something
mobile right now?

00:00:50.634 --> 00:00:52.133
Great, fantastic.

00:00:52.133 --> 00:00:53.634
So, um, as developers,

00:00:53.634 --> 00:00:55.634
we like to create
efficient applications, right?

00:00:55.634 --> 00:00:57.300
Ones that run fast.

00:00:57.300 --> 00:01:00.133
And also as developers, we like
to be efficient ourselves.

00:01:00.133 --> 00:01:02.033
So chances are,
you started with GWT.

00:01:02.033 --> 00:01:04.200
You have a web app that you've
built. You're happy with it.

00:01:04.200 --> 00:01:06.701
Maybe you have several of them.
You have a code base.

00:01:06.701 --> 00:01:08.534
You know,
you have several thousand,

00:01:08.534 --> 00:01:10.701
tens of thousands,
a million lines of code.

00:01:10.701 --> 00:01:12.701
Wouldn't you love to reuse
some of that code

00:01:12.701 --> 00:01:14.200
when you go to mobile?

00:01:14.200 --> 00:01:16.033
And also, wouldn't you
like to get around

00:01:16.033 --> 00:01:18.701
some of the friction of getting
to mobile in the first place?

00:01:18.701 --> 00:01:20.701
So let's talk about that.

00:01:20.701 --> 00:01:23.200
So some of the friction
or some of the problems

00:01:23.200 --> 00:01:25.534
associated with going
from, uh, say,

00:01:25.534 --> 00:01:27.200
a desktop web client

00:01:27.200 --> 00:01:30.033
to doing a mobile web app
are these.

00:01:30.033 --> 00:01:32.367
Mobile typically has
smaller screens, right?

00:01:32.367 --> 00:01:34.200
And not to mention,
not only are they smaller,

00:01:34.200 --> 00:01:35.868
but they actually are different.

00:01:35.868 --> 00:01:37.868
So you have tablets,
and you have phones,

00:01:37.868 --> 00:01:39.367
and you have TVs.

00:01:39.367 --> 00:01:41.200
And now you have, uh,
Android running

00:01:41.200 --> 00:01:43.534
on workout machines,
so who knows where it's going?

00:01:43.534 --> 00:01:45.701
Someday, you'll be running
an application on your toaster.

00:01:45.701 --> 00:01:48.033
They have smaller screens,
and they're different.

00:01:48.033 --> 00:01:49.868
You can break it down
even further,

00:01:49.868 --> 00:01:51.868
that while they have
different, smaller screens,

00:01:51.868 --> 00:01:53.701
they also have
different orientations.

00:01:53.701 --> 00:01:55.701
You see this most predominantly
with, uh, tablets.

00:01:55.701 --> 00:01:57.567
If you take a look
at GMAIL today,

00:01:57.567 --> 00:01:59.367
GMAIL in landscape--
uh, landscape mode

00:01:59.367 --> 00:02:01.767
looks different than GMAIL
in portrait mode.

00:02:01.767 --> 00:02:03.767
They typically have
slower processors.

00:02:03.767 --> 00:02:05.434
While they've been on the rise,

00:02:05.434 --> 00:02:07.434
tablets and phones still lag

00:02:07.434 --> 00:02:09.767
behind laptops and desktops.

00:02:09.767 --> 00:02:12.267
And then finally, the one that,
uh, concerns me the most

00:02:12.267 --> 00:02:14.100
is that there--
they can be disconnected.

00:02:14.100 --> 00:02:15.934
In fact, you expect them
to be disconnected.

00:02:15.934 --> 00:02:17.601
They--they are portable devices.

00:02:17.601 --> 00:02:19.267
I need to take them
wherever I go.

00:02:19.267 --> 00:02:21.100
I expect to be able to use them
wherever I go,

00:02:21.100 --> 00:02:22.934
whether I'm in a subway station,
a subway tunnel,

00:02:22.934 --> 00:02:24.434
in the middle of Kansas,

00:02:24.434 --> 00:02:26.267
on the flight I took
to Minneapolis to get here,

00:02:26.267 --> 00:02:27.934
where I had no Wi-Fi.

00:02:27.934 --> 00:02:29.767
I expect to be able to use
my applications.

00:02:29.767 --> 00:02:31.801
And typically, that's easy to do
with installable mobile apps.

00:02:31.801 --> 00:02:33.767
You don't see it as much
in mobile web apps,

00:02:33.767 --> 00:02:36.267
so we're gonna talk
about how to get past that.

00:02:36.267 --> 00:02:37.934
So those are the problems.

00:02:37.934 --> 00:02:39.767
So I wouldn't just leave you
with a bunch of problems.

00:02:39.767 --> 00:02:41.601
That's why you came
to this I/O session.

00:02:41.601 --> 00:02:43.434
I should give you
some solutions, too, right?

00:02:43.434 --> 00:02:45.267
That's the whole idea.
You want to learn.

00:02:45.267 --> 00:02:47.100
So today, uh,
as indicated by the title,

00:02:47.100 --> 00:02:48.934
we're gonna talk
about how to use GWT

00:02:48.934 --> 00:02:50.934
And Google Plugin for Eclipse
to build great mobile web apps

00:02:50.934 --> 00:02:52.601
for iPhones and Android devices.

00:02:52.601 --> 00:02:54.601
And specifically, we're gonna
focus on how to build

00:02:54.601 --> 00:02:56.434
great UIs for any form factor,

00:02:56.434 --> 00:02:58.601
and we're gonna talk about how
to optimize the user experience.

00:02:58.601 --> 00:03:00.601
We're gonna talk about how
to make it snappy, make it fast,

00:03:00.601 --> 00:03:03.000
right? 'Cause after all,
installable web apps--

00:03:03.000 --> 00:03:04.534
the one leg up
they have on you

00:03:04.534 --> 00:03:06.334
if you're developing
a mobile web app,

00:03:06.334 --> 00:03:08.000
is that they're really fast.

00:03:08.000 --> 00:03:09.834
They happen to run a little bit
closer to the metal

00:03:09.834 --> 00:03:11.667
than when building
a mobile web app.

00:03:11.667 --> 00:03:13.334
We can get around that.

00:03:13.334 --> 00:03:15.167
Then finally, we're gonna talk
about working

00:03:15.167 --> 00:03:17.000
without a connection--
how you would do that.

00:03:17.000 --> 00:03:18.501
[clears throat]

00:03:18.501 --> 00:03:20.501
So to--to drive us
through this session,

00:03:20.501 --> 00:03:22.167
um, we have a sample app,

00:03:22.167 --> 00:03:25.167
and it's available, um,
as part of the GWT 2.4 beta SDK

00:03:25.167 --> 00:03:26.834
that we announced yesterday.

00:03:26.834 --> 00:03:28.834
Um, and specifically,
it's--it's a--

00:03:28.834 --> 00:03:30.667
it's a standard application
that's web-based.

00:03:30.667 --> 00:03:32.667
It's a web-based
task management application.

00:03:32.667 --> 00:03:34.667
We have UIs for Android,
iPhone, and iPad

00:03:34.667 --> 00:03:36.334
and desktop browsers.

00:03:36.334 --> 00:03:38.667
We show you how to do
orientation change handling.

00:03:38.667 --> 00:03:40.501
We have offline support.

00:03:40.501 --> 00:03:42.501
And we're gonna run through
some of the key pieces

00:03:42.501 --> 00:03:44.501
of that application
in this presentation.

00:03:44.501 --> 00:03:46.334
And I'll keep bumping from code

00:03:46.334 --> 00:03:48.167
to actually running
on the device.

00:03:48.167 --> 00:03:50.467
Then we'll show it
pulling all together at the end.

00:03:50.467 --> 00:03:52.801
So let's jump right in.
[clears throat]

00:03:52.801 --> 00:03:56.133
Talking about building great UIs
for any form factor.

00:03:56.133 --> 00:03:58.801
So if you're gonna have

00:03:58.801 --> 00:04:00.801
all of these devices that
you're gonna support, right?

00:04:00.801 --> 00:04:03.200
Then you're gonna have to write
different UIs for them, right?

00:04:03.200 --> 00:04:05.200
And it's really not that--
that much coding.

00:04:05.200 --> 00:04:07.200
We'll get to that in a second,
but you're still gonna

00:04:07.200 --> 00:04:09.200
have to write different views,
different UIs for them.

00:04:09.200 --> 00:04:11.067
We should make it
as easy as possible.

00:04:11.067 --> 00:04:13.033
So the nice thing is
that with GWT--

00:04:13.033 --> 00:04:15.200
and these are
our existing features--

00:04:15.200 --> 00:04:17.701
But with GWT, we have---
if you choose to do it by hand,

00:04:17.701 --> 00:04:20.701
to code it by hand, we have
a feature called UiBinder,

00:04:20.701 --> 00:04:24.367
which makes it very easy to do
declarative UIs inside code.

00:04:24.367 --> 00:04:26.367
So what does that mean to you?
That means that writing UIs

00:04:26.367 --> 00:04:28.367
is no longer orthogonal
to what you're used to.

00:04:28.367 --> 00:04:31.033
So if you came
from a web-based background,

00:04:31.033 --> 00:04:33.868
ï¿½ la coding in HTML,
JavaScript, and CSS,

00:04:33.868 --> 00:04:36.868
you can use UiBinder,
and you feel warm and snuggly,

00:04:36.868 --> 00:04:38.868
like you're at home.

00:04:38.868 --> 00:04:42.033
Um, then if you choose
to not do it by hand,

00:04:42.033 --> 00:04:44.734
and you're a lover
of developer tools,

00:04:44.734 --> 00:04:46.367
like we are on the GWT team,

00:04:46.367 --> 00:04:48.033
um, you can use GWT Designer,

00:04:48.033 --> 00:04:49.868
which is now part of
the Google Plugin for Eclipse

00:04:49.868 --> 00:04:53.534
for doing, you know,
UIs in a WYSIWYG tool.

00:04:53.534 --> 00:04:55.534
So taking the UiBinder route,

00:04:55.534 --> 00:04:57.868
again, the focus here
is to how to make it easy

00:04:57.868 --> 00:05:00.701
to create multiple UIs
with very little friction.

00:05:00.701 --> 00:05:02.767
So here's an example
of a UiBinder template.

00:05:02.767 --> 00:05:04.601
I've stripped out
some of the code here

00:05:04.601 --> 00:05:07.100
for demo purposes, but again,
it's all available at the end.

00:05:07.100 --> 00:05:09.267
So we start looking
at a UiBinder template,

00:05:09.267 --> 00:05:11.601
and the first thing we see
is that, one, it's XML,

00:05:11.601 --> 00:05:14.100
so it kind of looks like HTML.
That's good.

00:05:14.100 --> 00:05:16.100
Um, and we immediately jump
into style.

00:05:16.100 --> 00:05:18.100
So in this case,
I'm highlighting the fact

00:05:18.100 --> 00:05:20.100
that we have a style
for addButton.

00:05:20.100 --> 00:05:21.934
So that's gonna be
the little plus icon

00:05:21.934 --> 00:05:23.767
that I'll show you
in just a second.

00:05:23.767 --> 00:05:25.767
Uh, some simple styling--
give it a color,

00:05:25.767 --> 00:05:28.267
a font size, a background,
border, so on and so forth.

00:05:28.267 --> 00:05:31.267
And that's all wrapped up
in that widget.

00:05:31.267 --> 00:05:33.267
So, one, it's easy to see.
So you just open up one file,

00:05:33.267 --> 00:05:35.100
and you can actually see
your styles

00:05:35.100 --> 00:05:37.100
along with your, uh,
the declaration of your UI.

00:05:37.100 --> 00:05:39.100
And then, two, those styles
are only for that widget.

00:05:39.100 --> 00:05:41.100
So you get no pollution
of the global namespace,

00:05:41.100 --> 00:05:42.934
which is, right, really nice.

00:05:42.934 --> 00:05:44.601
So now that
we've got our styling,

00:05:44.601 --> 00:05:46.934
let's jump into the actual
layout of our application.

00:05:46.934 --> 00:05:49.434
So what I'm walking through here
is the main screen

00:05:49.434 --> 00:05:51.801
of the--the task application.

00:05:51.801 --> 00:05:54.434
And, um, again,
it's a few details omitted,

00:05:54.434 --> 00:05:56.434
but you're gonna get
the general idea here

00:05:56.434 --> 00:05:58.434
that we're walking through
and we see first off

00:05:58.434 --> 00:06:01.501
that we have the header,
the title of the application.

00:06:01.501 --> 00:06:03.334
And the way we're laying
all of this out

00:06:03.334 --> 00:06:05.501
is using a DockLayoutPanel,
which is a GWT widget.

00:06:05.501 --> 00:06:08.000
And that gives you the north,
south, east, west region

00:06:08.000 --> 00:06:09.501
of your application.

00:06:09.501 --> 00:06:12.868
So in the north, we're gonna put
the title of the application.

00:06:12.868 --> 00:06:14.868
That's this.

00:06:14.868 --> 00:06:17.534
Then we're gonna drop down
into the left-hand side,

00:06:17.534 --> 00:06:19.534
the west side--
"west side"--

00:06:19.534 --> 00:06:22.534
which is gonna be the, uh,
the task list, right?

00:06:22.534 --> 00:06:24.667
It's the actual list of tasks
that you're gonna click on.

00:06:24.667 --> 00:06:26.334
That's this.

00:06:26.334 --> 00:06:28.834
And then finally we come, and we
give it the content, right?

00:06:28.834 --> 00:06:30.834
This is the content area.
It goes in the center,

00:06:30.834 --> 00:06:32.834
and that's gonna be this, right?

00:06:32.834 --> 00:06:34.501
So that's it.
That's how you--

00:06:34.501 --> 00:06:36.334
That's how you start
constructing this.

00:06:36.334 --> 00:06:39.167
Now then behind this is a bit of
Java that's gonna run it, right?

00:06:39.167 --> 00:06:40.834
That's gonna
actually feed it data

00:06:40.834 --> 00:06:42.834
and actually populate
all the UIs and everything.

00:06:42.834 --> 00:06:44.834
But when it comes
to constructing the UI,

00:06:44.834 --> 00:06:47.000
that's the bulk of your code
right there--

00:06:47.000 --> 00:06:48.667
to write this.

00:06:48.667 --> 00:06:50.334
So then let's say, again,

00:06:50.334 --> 00:06:52.167
that you don't want
to do it by hand,

00:06:52.167 --> 00:06:54.167
but instead, you're gonna
do it with tooling.

00:06:54.167 --> 00:06:56.667
What you can do is you can
drop into our GWT Designer.

00:06:56.667 --> 00:07:00.501
So this is the same, uh,
the same view,

00:07:00.501 --> 00:07:02.234
but brought up in GWT Designer.

00:07:02.234 --> 00:07:04.234
And what you can see
is that you've got the title.

00:07:04.234 --> 00:07:06.234
You've got your header, and
you've got your "add" button.

00:07:06.234 --> 00:07:08.234
And then on the left-hand side,
you have a list--

00:07:08.234 --> 00:07:09.901
you have a set of widgets.

00:07:09.901 --> 00:07:11.734
You have all of your panels
that you can drop in there.

00:07:11.734 --> 00:07:13.567
You have buttons.
You have lists. You have cells.

00:07:13.567 --> 00:07:15.567
You have tables. You have labels
all at your disposal

00:07:15.567 --> 00:07:17.567
to start editing this--
this UI.

00:07:17.567 --> 00:07:19.100
And then on the right-hand side,

00:07:19.100 --> 00:07:21.234
you have the properties,
for each of those widgets.

00:07:21.234 --> 00:07:22.901
If you want to change the color,

00:07:22.901 --> 00:07:24.734
if you want to change
the name of it,

00:07:24.734 --> 00:07:26.567
if you want to change
the class--

00:07:26.567 --> 00:07:28.400
the Java class that backs it,
you can do that here.

00:07:28.400 --> 00:07:30.734
So again, after doing this,
what you end up with

00:07:30.734 --> 00:07:32.734
is two different UIs, right?

00:07:32.734 --> 00:07:35.067
You've done it in a very,
very limited amount of time.

00:07:35.067 --> 00:07:36.901
So you have your ListView
for tablet,

00:07:36.901 --> 00:07:38.734
and you have a ListView
for phone.

00:07:38.734 --> 00:07:40.734
Notice they look different.
So this is just the beginning.

00:07:40.734 --> 00:07:42.734
This is just how you start
getting going, right?

00:07:42.734 --> 00:07:44.734
So you're basically--
we're starting at a ground zero,

00:07:44.734 --> 00:07:47.067
acknowledging that we need
to have different UIs

00:07:47.067 --> 00:07:50.567
for different devices, right?
For the best user experience.

00:07:50.567 --> 00:07:53.067
So, great, that's fantastic.
I probably haven't told you

00:07:53.067 --> 00:07:55.067
too much that you don't
already know,

00:07:55.067 --> 00:07:57.400
'cause you're already
writing UIs and using GWT.

00:07:57.400 --> 00:08:00.133
So let's move on
to the more meatier parts.

00:08:00.133 --> 00:08:03.200
So how do we optimize
the user experience?

00:08:03.200 --> 00:08:06.200
So now that we have
these different UIs,

00:08:06.200 --> 00:08:10.200
how do we pull the right one up
for the right device?

00:08:10.200 --> 00:08:12.200
[clears throat]

00:08:12.200 --> 00:08:13.868
So--and it's--
it's more than that.

00:08:13.868 --> 00:08:15.868
It's not only how do we pull
'em up for the right device,

00:08:15.868 --> 00:08:17.701
it's once we have pulled up
the right UI,

00:08:17.701 --> 00:08:19.534
how do we handle
orientation changes,

00:08:19.534 --> 00:08:21.367
if we're running on a tablet
or a phone--

00:08:21.367 --> 00:08:23.200
in this case, in the demo,
how to do it on a tablet.

00:08:23.200 --> 00:08:25.033
Um, and then we're
also gonna talk

00:08:25.033 --> 00:08:26.701
about the icing on the cake.

00:08:26.701 --> 00:08:28.534
So this is a--if you've gone
through this process,

00:08:28.534 --> 00:08:30.200
and you've created
different UIs,

00:08:30.200 --> 00:08:32.033
and you have a way
of selecting those UIs

00:08:32.033 --> 00:08:34.534
and serving them up, um,
and what--what you end up with

00:08:34.534 --> 00:08:38.067
is a--is a design pattern that
works very well for code reuse

00:08:38.067 --> 00:08:40.033
and actually looks
a lot like MVP.

00:08:40.033 --> 00:08:42.033
So we're gonna talk about how
you can get maximum code reuse

00:08:42.033 --> 00:08:44.367
when creating, uh, desktop,

00:08:44.367 --> 00:08:48.200
tablet, and phone applications.

00:08:48.200 --> 00:08:50.033
So let's jump in right here.

00:08:50.033 --> 00:08:51.868
So talking about,
uh, how to--

00:08:51.868 --> 00:08:53.701
how to select the right UI
per device,

00:08:53.701 --> 00:08:56.033
and we're gonna use deferred
binding to sort them out.

00:08:56.033 --> 00:08:58.033
Now if you aren't familiar
with GWT,

00:08:58.033 --> 00:09:01.033
or you haven't kinda dove in
a little bit deeper,

00:09:01.033 --> 00:09:03.267
you might not know exactly
what deferred binding is.

00:09:03.267 --> 00:09:04.934
We'll do a little recap.

00:09:04.934 --> 00:09:07.934
So at the heart of GWT
is this notion

00:09:07.934 --> 00:09:10.434
of being able to generate
a browser-specific version

00:09:10.434 --> 00:09:11.968
of your application,

00:09:11.968 --> 00:09:15.100
then serve that up when
that browser selects it, right?

00:09:15.100 --> 00:09:17.267
So you get
the optimal application.

00:09:17.267 --> 00:09:19.267
It's called deferred binding,
and what ends up happening

00:09:19.267 --> 00:09:21.767
is the browser makes a request,
and through some configuration,

00:09:21.767 --> 00:09:25.267
we end up picking out the best
UI for, say, IE or Firefox

00:09:25.267 --> 00:09:27.434
or Chrome or Safari.

00:09:27.434 --> 00:09:29.434
Well, lo and behold,
that works really, really well

00:09:29.434 --> 00:09:33.100
for mobile devices--
mobile devices, as well, right?

00:09:33.100 --> 00:09:34.934
So you can say,
Well, I want to--

00:09:34.934 --> 00:09:36.767
I want to serve up
an Android phone-specific

00:09:36.767 --> 00:09:38.767
or an Android tablet-specific
version of this application

00:09:38.767 --> 00:09:40.767
or a iPhone-specific
or an iPad-specific--

00:09:40.767 --> 00:09:42.767
You can get as fine-grained
as you want to.

00:09:42.767 --> 00:09:44.801
[clears throat]
But for the sake of this demo,

00:09:44.801 --> 00:09:46.767
let's just talk
about how we could serve up

00:09:46.767 --> 00:09:50.601
a phone versus a tablet view.
We'll dig into that.

00:09:50.601 --> 00:09:52.601
So I mentioned
this GWT module config file,

00:09:52.601 --> 00:09:54.601
and it's really just
an app configuration file

00:09:54.601 --> 00:09:57.267
for your, uh,
GWT-based application.

00:09:57.267 --> 00:10:00.601
In this case, I've got
CloudTasks.gwt.xml.

00:10:00.601 --> 00:10:03.434
And inside of that file is
a whole bunch of properties,

00:10:03.434 --> 00:10:05.100
um, that are
for your applications.

00:10:05.100 --> 00:10:07.434
So it's where you--you define
all your dependencies.

00:10:07.434 --> 00:10:10.434
It's where you might actually
define your entry point.

00:10:10.434 --> 00:10:12.434
And then the other thing you do
is you define

00:10:12.434 --> 00:10:14.601
some of your deferred
binding properties, right?

00:10:14.601 --> 00:10:17.767
So in this case,
what I'm saying is,

00:10:17.767 --> 00:10:21.267
um, as a developer,
I want a ViewFactory, right?

00:10:21.267 --> 00:10:23.267
I want a factory that's gonna
serve up my views,

00:10:23.267 --> 00:10:25.601
and that's an interface
that I define.

00:10:25.601 --> 00:10:27.601
Um, and I have different
implementations, right?

00:10:27.601 --> 00:10:29.934
So for mobile, I have
a mobile implementation of it,

00:10:29.934 --> 00:10:31.434
of that factory.

00:10:31.434 --> 00:10:33.434
For a tablet, I have a tablet
version of that factory.

00:10:33.434 --> 00:10:35.434
And then what ends up--
what ends up happening

00:10:35.434 --> 00:10:37.601
is that, um, those are
selected for me under the hood,

00:10:37.601 --> 00:10:39.767
and it's done with, uh,
deferred binding properties.

00:10:39.767 --> 00:10:42.100
And so in this case, it says
when the form factor is mobile,

00:10:42.100 --> 00:10:45.601
give me the mobile version
of this--of this ViewFactory.

00:10:45.601 --> 00:10:47.434
Then I can say give me
my ListView,

00:10:47.434 --> 00:10:49.434
and it's actually the ListView
that's optimized for the--

00:10:49.434 --> 00:10:51.467
for the mobile phone device.

00:10:51.467 --> 00:10:53.267
Subsequently, I can do that
with tablet, too.

00:10:53.267 --> 00:10:54.767
It says, okay, when I--

00:10:54.767 --> 00:10:56.601
when a tablet is requesting
my application,

00:10:56.601 --> 00:10:58.434
give me the ViewFactory
that's specific to that--

00:10:58.434 --> 00:11:00.267
you know, that type of device,
that form factor.

00:11:00.267 --> 00:11:02.334
Give me the tablet version
of the ViewFactory.

00:11:02.334 --> 00:11:04.000
[clears throat]
So this is great,

00:11:04.000 --> 00:11:05.834
pretty easy to understand
and to digest.

00:11:05.834 --> 00:11:07.834
But I keep saying
"when the form factor is,"

00:11:07.834 --> 00:11:09.501
"when the form factor is."

00:11:09.501 --> 00:11:11.667
So what actually is
going on there?

00:11:11.667 --> 00:11:15.334
So, uh, under the covers,
what's happening is, uh--

00:11:15.334 --> 00:11:17.000
if you've ever
written JavaScript,

00:11:17.000 --> 00:11:18.834
you've--you've seen this,
I'm sure.

00:11:18.834 --> 00:11:20.667
Uh, we're simply looking
at the user agent

00:11:20.667 --> 00:11:23.501
and looking for the existence
of, say, "ipad" in this case.

00:11:23.501 --> 00:11:25.534
And if we see "ipad,"
we're gonna pass back

00:11:25.534 --> 00:11:27.334
that it's a tablet.

00:11:27.334 --> 00:11:30.000
If we see that it's an iPhone,
we're gonna pass back "mobile."

00:11:30.000 --> 00:11:31.834
And then if we see "android,"

00:11:31.834 --> 00:11:33.834
there happens to be
a little more complex heuristic

00:11:33.834 --> 00:11:36.834
for figuring out whether it's
a phone or a tablet.

00:11:36.834 --> 00:11:38.834
but the fact of the matter is
as complicated

00:11:38.834 --> 00:11:40.834
and overly complex as that is,
we just hide behind--

00:11:40.834 --> 00:11:42.667
we hide it behind
this set of codes,

00:11:42.667 --> 00:11:45.167
so all your doing is writing
code that looks like this.

00:11:45.167 --> 00:11:47.167
Look--when it's a tablet,
let me know

00:11:47.167 --> 00:11:48.834
and give me the right--

00:11:48.834 --> 00:11:50.834
give me the right implementation
for this interface,

00:11:50.834 --> 00:11:52.667
and then I'll go call--
I'll go call and--

00:11:52.667 --> 00:11:56.501
I'll go make calls on that
implementation that I get back.

00:11:56.501 --> 00:12:00.167
Good. So now we have
this model sketched out

00:12:00.167 --> 00:12:02.067
to where our browser
can make a request,

00:12:02.067 --> 00:12:03.901
and we can get back
the right ViewFactory

00:12:03.901 --> 00:12:05.567
for the phone or the tablet,

00:12:05.567 --> 00:12:07.400
and now I can pull together
these views

00:12:07.400 --> 00:12:09.734
so that when I get back, say,
the tablet version

00:12:09.734 --> 00:12:11.234
of my ViewFactory,

00:12:11.234 --> 00:12:13.234
I'm gonna pull my ListView
tablet.ui.xml file.

00:12:13.234 --> 00:12:15.567
That's how I get to that file.
That's the path.

00:12:15.567 --> 00:12:18.400
Same goes for the phone.

00:12:18.400 --> 00:12:22.367
And so then we can actually
see this over here.

00:12:29.467 --> 00:12:31.400
Ramsdale: Can I get
both of 'em on here?

00:12:34.334 --> 00:12:35.667
Ramsdale: Good.

00:12:35.667 --> 00:12:38.667
I'm gonna have to change
my key combination after that.

00:12:38.667 --> 00:12:42.334
[laughter]
Ramsdale: [clears throat]

00:12:42.334 --> 00:12:45.167
All right.

00:12:45.167 --> 00:12:48.167
That's up. That's up.

00:12:48.167 --> 00:12:50.100
[clicks tongue]

00:12:54.334 --> 00:12:56.267
Ramsdale: Cool.
[clears throat]

00:12:56.267 --> 00:12:58.767
Um, I'll move 'em over
a little bit.

00:12:58.767 --> 00:13:00.767
But there you can see it
actually happening.

00:13:00.767 --> 00:13:02.667
So I just showed you
that those two devices

00:13:02.667 --> 00:13:04.334
actually selected
the same application.

00:13:04.334 --> 00:13:07.000
You can see the URL there

00:13:07.000 --> 00:13:09.334
and kinda there.

00:13:09.334 --> 00:13:11.667
But I get served
with two different UIs.

00:13:11.667 --> 00:13:13.334
I mean, they look similar,

00:13:13.334 --> 00:13:15.167
because my application
is doing similar things,

00:13:15.167 --> 00:13:17.100
but you actually get
different UIs.

00:13:21.934 --> 00:13:25.767
Ramsdale: All these clickers.

00:13:25.767 --> 00:13:28.267
Okay, so now that we've managed
to pull up

00:13:28.267 --> 00:13:30.434
a tablet-specific version
of the UI,

00:13:30.434 --> 00:13:33.100
how do we go from,
um, just that

00:13:33.100 --> 00:13:34.934
to responding to,
you know, orientation changes,

00:13:34.934 --> 00:13:37.501
so when I flip it from,
say, portrait mode

00:13:37.501 --> 00:13:39.334
to landscape mode?

00:13:39.334 --> 00:13:41.334
Um, and this is actually
much easier

00:13:41.334 --> 00:13:42.934
than you would imagine.

00:13:42.934 --> 00:13:45.100
So all you have to do

00:13:45.100 --> 00:13:47.934
is, uh, somewhere in
your initialization code

00:13:47.934 --> 00:13:49.934
you go back and say,
okay, uh, window--

00:13:49.934 --> 00:13:51.767
the window
that I'm attaching to--

00:13:51.767 --> 00:13:53.434
I want to add a resize handler.

00:13:53.434 --> 00:13:55.100
There's several ways
of doing this.

00:13:55.100 --> 00:13:57.601
This is hap--this is how
we happen to do it in GWT.

00:13:57.601 --> 00:13:59.601
And you're literally saying
when the window resizes,

00:13:59.601 --> 00:14:01.834
let me know, right?

00:14:01.834 --> 00:14:03.334
And inside of there,

00:14:03.334 --> 00:14:05.167
you're actually keeping
state of where you're at,

00:14:05.167 --> 00:14:07.000
like, am I portrait
or am I not?

00:14:07.000 --> 00:14:08.834
So if you go and you calculate,

00:14:08.834 --> 00:14:10.834
well, am I switching
from portrait to landscape,

00:14:10.834 --> 00:14:13.334
which is a very simple method
like this,

00:14:13.334 --> 00:14:16.501
is my client height greater
than my--my width, right?

00:14:16.501 --> 00:14:19.000
So if my client height
is greater than my width,

00:14:19.000 --> 00:14:20.834
then yes, I've gone
into portrait mode.

00:14:20.834 --> 00:14:22.834
And if--if the result of that
isn't what I've cached,

00:14:22.834 --> 00:14:26.334
then I've switched from portrait
to landscape or vice versa,

00:14:26.334 --> 00:14:28.501
in which case,
I do adjustOrientation.

00:14:28.501 --> 00:14:30.501
Now we could jump into
the adjustOrientation code here,

00:14:30.501 --> 00:14:32.334
but it's very
application-specific.

00:14:32.334 --> 00:14:34.000
But the net-net is

00:14:34.000 --> 00:14:37.000
inside of this code, you'd
simply, maybe hide a widget,

00:14:37.000 --> 00:14:39.000
right? So you might, when you go
from landscape to portrait--

00:14:39.000 --> 00:14:41.000
you might hide
the left-hand side--

00:14:41.000 --> 00:14:43.501
I'm sorry, you might hide
the content, right?

00:14:43.501 --> 00:14:45.200
And show just the list,

00:14:45.200 --> 00:14:47.701
and then vice versa when you go
from portrait to landscape.

00:14:47.701 --> 00:14:49.367
You would show the content

00:14:49.367 --> 00:14:51.200
and then minimize
the width of the list

00:14:51.200 --> 00:14:53.567
to adjust to the screen
real estate.

00:14:55.100 --> 00:14:57.100
Ramsdale: [clears throat]

00:14:57.100 --> 00:14:59.033
Then we see that happening here,
and it's actually quite fast,

00:14:59.033 --> 00:15:01.234
so I'm pretty impressed
with this.

00:15:04.501 --> 00:15:06.501
Ramsdale: Notice that they're
the same. [chuckles]

00:15:06.501 --> 00:15:09.167
All right, so here,
we have it in, um,

00:15:09.167 --> 00:15:11.167
here, we have it
in landscape mode.

00:15:11.167 --> 00:15:13.834
And then if I simply turn it,

00:15:13.834 --> 00:15:17.400
give it a little nudge,

00:15:17.400 --> 00:15:19.567
give it a little nudge.
There we go.

00:15:19.567 --> 00:15:21.567
So you can see that we pop
right back in there.

00:15:21.567 --> 00:15:24.067
And we literally--like, the--
the pause was not our app.

00:15:24.067 --> 00:15:25.734
The pause was the browser.

00:15:25.734 --> 00:15:27.667
So if I flip it around...

00:15:29.734 --> 00:15:31.667
Ramsdale: Come on, browser.

00:15:34.000 --> 00:15:36.200
Ramsdale: Do now?
There you go.

00:15:39.000 --> 00:15:41.000
Ramsdale: So once the browser
starts to switch,

00:15:41.000 --> 00:15:42.801
our application switches
quite fast.

00:15:42.801 --> 00:15:44.734
There's no delay
in the application.

00:15:53.067 --> 00:15:55.267
Ramsdale: All right,
so now that we've talked

00:15:55.267 --> 00:15:58.734
about how to, uh,
create various--

00:15:58.734 --> 00:16:01.133
create different UIs
for different devices,

00:16:01.133 --> 00:16:02.968
how to select those UIs,

00:16:02.968 --> 00:16:04.968
let's see some of the benefits
that we can get out of this,

00:16:04.968 --> 00:16:06.968
right? So this goes two ways.
If you've already--

00:16:06.968 --> 00:16:08.801
if you're starting
to go down this path,

00:16:08.801 --> 00:16:10.634
you're gonna end up
in probably a mode

00:16:10.634 --> 00:16:12.133
that looks like MVP.

00:16:12.133 --> 00:16:13.968
I'm gonna describe
what that is in a second.

00:16:13.968 --> 00:16:15.968
Or if you happen to be
an MVP developer already,

00:16:15.968 --> 00:16:18.300
you can take advantage
of these practices.

00:16:18.300 --> 00:16:21.300
But here's a little recap
of--of what MVP is.

00:16:21.300 --> 00:16:24.300
So...
[clears throat]

00:16:24.300 --> 00:16:26.000
Um, it's a--
it's a design pattern.

00:16:26.000 --> 00:16:27.801
So it's a Model-View--
Model-View-Presenter.

00:16:27.801 --> 00:16:29.801
That's what the "M" the "V"
and the "P" stand for.

00:16:29.801 --> 00:16:31.634
Design pattern--
it's very similar to MVC,

00:16:31.634 --> 00:16:34.300
Only you're gonna have a little
less logic in your view.

00:16:34.300 --> 00:16:36.133
Um, all your business logic's
gonna go

00:16:36.133 --> 00:16:38.801
to the model and the presenter.

00:16:38.801 --> 00:16:41.133
You want to keep the views
as simple as possible.

00:16:41.133 --> 00:16:43.634
And what we've been advocating
for the past year and a half,

00:16:43.634 --> 00:16:45.133
almost two years,

00:16:45.133 --> 00:16:47.634
uh, is that this leads
to faster test cycles, right?

00:16:47.634 --> 00:16:49.634
'Cause basically, what you
can do is you can run

00:16:49.634 --> 00:16:51.634
all of your tests and--
most of your tests

00:16:51.634 --> 00:16:53.801
as vanilla J or E/JUnit tests

00:16:53.801 --> 00:16:57.300
versus running in, say,
Selenium or using GWTTestCase

00:16:57.300 --> 00:16:59.300
to actually run your--
run your, uh, application

00:16:59.300 --> 00:17:01.367
in, say, like,
a headless browser.

00:17:01.367 --> 00:17:03.367
So this has been
what we've been advocating.

00:17:03.367 --> 00:17:05.200
Um, and this is really good.

00:17:05.200 --> 00:17:06.868
What I really like is
when you can take this pattern

00:17:06.868 --> 00:17:08.534
and apply it to mobile,

00:17:08.534 --> 00:17:10.367
because what ends up
happening is--

00:17:10.367 --> 00:17:12.200
so whether you have
a tablet versus a phone--

00:17:12.200 --> 00:17:14.200
and it could actually be tablet
versus phone versus desktop,

00:17:14.200 --> 00:17:16.200
right? The business logic
does the same.

00:17:16.200 --> 00:17:18.200
If I'm creating a ta--
a task application,

00:17:18.200 --> 00:17:20.701
like, that's really not
going to change that much

00:17:20.701 --> 00:17:23.200
if I'm talking about one device
or the other, right?

00:17:23.200 --> 00:17:25.033
If I'm doing an e-mail
application like GMAIL,

00:17:25.033 --> 00:17:26.868
I'm just still giving you
your e-mail.

00:17:26.868 --> 00:17:28.701
So that business logic
stays the same.

00:17:28.701 --> 00:17:30.367
All that changes are the views,

00:17:30.367 --> 00:17:32.234
which we've already
talked about.

00:17:32.234 --> 00:17:34.033
So what you end up with is a--
is a pattern

00:17:34.033 --> 00:17:35.534
that's ideal, right?

00:17:35.534 --> 00:17:37.367
You've already broken up,
like, what my model is,

00:17:37.367 --> 00:17:39.033
and then I've got my--
my presenters

00:17:39.033 --> 00:17:41.033
for a bit of my application
logic, my business logic.

00:17:41.033 --> 00:17:43.033
And then you've got these little
views over here that change,

00:17:43.033 --> 00:17:44.701
so it's an ideal design pattern

00:17:44.701 --> 00:17:47.534
for supporting multiple
form factors.

00:17:47.534 --> 00:17:49.534
[clears throat]
And if done right,

00:17:49.534 --> 00:17:52.033
what you end up with
is, uh, code--

00:17:52.033 --> 00:17:54.033
if you were looking at it
from a high level--

00:17:54.033 --> 00:17:56.200
that breaks down like this, and
I'm talking about size of code.

00:17:56.200 --> 00:17:58.033
So you have
all your business logic,

00:17:58.033 --> 00:17:59.534
which is your presenters.

00:17:59.534 --> 00:18:01.601
That--you know, the presenters
are driving the views.

00:18:01.601 --> 00:18:03.601
And then you have your model...
[speaking indistinctly]

00:18:03.601 --> 00:18:06.934
your DTOs, your RPC,
your caching, your validation.

00:18:06.934 --> 00:18:08.934
And then that little part
over there

00:18:08.934 --> 00:18:10.501
ends up being your views,

00:18:10.501 --> 00:18:12.501
literally ends up being
your factories, right?

00:18:12.501 --> 00:18:14.334
They can give you back
your ListView for a phone

00:18:14.334 --> 00:18:17.334
or your EditView for a phone
or your EditView for a tablet.

00:18:17.334 --> 00:18:19.667
[clears throat]

00:18:19.667 --> 00:18:21.501
And then to tie it
all back together,

00:18:21.501 --> 00:18:24.000
that little piece
is really just is what--

00:18:24.000 --> 00:18:27.167
what's changing in this deferred
binding property, right?

00:18:27.167 --> 00:18:29.667
So as you go and you say,
Okay, now a tablet has hit my--

00:18:29.667 --> 00:18:31.667
has hit my, uh,
my--my application,

00:18:31.667 --> 00:18:33.834
I'm going to give back
the tablet form--

00:18:33.834 --> 00:18:35.334
the tablet ViewFactory,

00:18:35.334 --> 00:18:37.334
and that is that little piece
down there

00:18:37.334 --> 00:18:39.667
that you're serving up.

00:18:39.667 --> 00:18:41.501
So you end up with--
and then that's the way

00:18:41.501 --> 00:18:43.334
you get past
the original problem,

00:18:43.334 --> 00:18:45.334
which was that I happen to have
a lot of code already,

00:18:45.334 --> 00:18:47.167
and it's for a web app,

00:18:47.167 --> 00:18:49.000
and I want to do
something on mobile.

00:18:49.000 --> 00:18:51.167
Boy, it would be nice if I could
use that code over again.

00:18:51.167 --> 00:18:52.834
This is how you do it.

00:18:52.834 --> 00:18:55.167
And how you go about doing MVP--
we won't get into that today.

00:18:55.167 --> 00:18:57.167
There's plenty of documentation,

00:18:57.167 --> 00:19:00.000
um, on the GWT code site.

00:19:00.000 --> 00:19:02.400
The community has been very,
very active about doing it.

00:19:02.400 --> 00:19:04.400
There's, I mean,
a handful of projects

00:19:04.400 --> 00:19:07.067
that actually, uh,
talk about how to do this.

00:19:07.067 --> 00:19:10.000
And so I'd advocate you go
out there and check those out.

00:19:14.501 --> 00:19:17.167
Ramsdale: So now let's talk
about how we can make it snappy,

00:19:17.167 --> 00:19:19.000
how we can make a mobile web app

00:19:19.000 --> 00:19:21.434
feel more like
an installable app.

00:19:26.167 --> 00:19:28.167
Ramsdale: [clears throat]

00:19:28.167 --> 00:19:30.167
So we look at it--
what is the problem

00:19:30.167 --> 00:19:32.000
that people that are
doing mob apps--

00:19:32.000 --> 00:19:34.334
mobile web apps--
what do they face?

00:19:34.334 --> 00:19:36.667
Um, well, the first problem
is that HTTP requests

00:19:36.667 --> 00:19:39.167
on a mobile device
are quite expensive, right?

00:19:39.167 --> 00:19:40.667
Even on 3G,

00:19:40.667 --> 00:19:42.501
and especially if you get
onto an edge connection,

00:19:42.501 --> 00:19:44.000
a degraded connection,

00:19:44.000 --> 00:19:46.033
there's a lot of overhead with
setting up the HTTP request,

00:19:46.033 --> 00:19:48.334
making it, waiting for it
to come back.

00:19:48.334 --> 00:19:49.934
We have to get around that.

00:19:49.934 --> 00:19:51.834
And then you want
to minimize startup time.

00:19:51.834 --> 00:19:53.834
And this goes back
to what I was talking about

00:19:53.834 --> 00:19:56.334
when you say that, um,
laptops and tablets

00:19:56.334 --> 00:19:58.501
have slower processors.

00:19:58.501 --> 00:20:01.334
What ends up happening
is you take a lot of, um,

00:20:01.334 --> 00:20:03.501
you take a lot of JavaScript,
you know,

00:20:03.501 --> 00:20:05.167
like 500k or a meg,

00:20:05.167 --> 00:20:06.834
and send it down the wire.

00:20:06.834 --> 00:20:09.167
Uh, it takes the--
the processor has to go through

00:20:09.167 --> 00:20:11.501
and parse
all that JavaScript, right?

00:20:11.501 --> 00:20:13.167
Load it up into memory,

00:20:13.167 --> 00:20:15.000
and what ends up happening
is that, you know,

00:20:15.000 --> 00:20:16.667
the parsing ends up taking time,

00:20:16.667 --> 00:20:18.701
which ends up degrading
the user experience,

00:20:18.701 --> 00:20:20.667
which ends up draining
the battery life--

00:20:20.667 --> 00:20:22.667
draining the battery, right?
On the device,

00:20:22.667 --> 00:20:24.667
'cause you're constantly
parsing JavaScript

00:20:24.667 --> 00:20:27.334
and--and, um,
and spinning that CPU.

00:20:27.334 --> 00:20:29.501
So there are
some solutions to this

00:20:29.501 --> 00:20:31.334
that are specific to GWT.

00:20:31.334 --> 00:20:33.834
So if you want
to increase responsiveness,

00:20:33.834 --> 00:20:35.667
um, what you can do
is you can minimize

00:20:35.667 --> 00:20:37.667
the number of HTTP requests
that you're making, right?

00:20:37.667 --> 00:20:39.667
You can--you can bundle
all of your resources together

00:20:39.667 --> 00:20:41.334
so that you go an fetch them,

00:20:41.334 --> 00:20:43.334
so it's one HTTP request
to get, like,

00:20:43.334 --> 00:20:44.434
let's say 20 images

00:20:44.434 --> 00:20:46.934
or 20 images and 5 CSS files

00:20:46.934 --> 00:20:48.434
and so on and so forth.

00:20:48.434 --> 00:20:51.601
You can minimize startup time
by using code-splitting,

00:20:51.601 --> 00:20:53.601
so that--code-splitting
is just basically

00:20:53.601 --> 00:20:55.267
lazy initialization
of JavaScript.

00:20:55.267 --> 00:20:57.100
So you can say
I have a big app,

00:20:57.100 --> 00:20:58.934
but when I get
to the "Settings" screen,

00:20:58.934 --> 00:21:00.767
then go fetch the view for
my "Settings" screen,

00:21:00.767 --> 00:21:02.667
but don't get it
on the front end,

00:21:02.667 --> 00:21:04.334
because I don't really need it.

00:21:04.334 --> 00:21:06.334
And then overall,
while you can kind of move

00:21:06.334 --> 00:21:08.000
the fetching
of JavaScript around,

00:21:08.000 --> 00:21:09.667
what you want to do is--

00:21:09.667 --> 00:21:11.667
overall, you want to reduce
the amount of JavaScript

00:21:11.667 --> 00:21:13.667
that you pull down
in the first place, right?

00:21:13.667 --> 00:21:15.834
And what's--this is where GWT

00:21:15.834 --> 00:21:17.834
becomes a perfect match
for doing mobile web apps,

00:21:17.834 --> 00:21:20.834
because, I mean,
we're built upon taking Java

00:21:20.834 --> 00:21:22.834
and compiling it down
to highly optimized JavaScript,

00:21:22.834 --> 00:21:24.667
right? And we'll talk
a little bit

00:21:24.667 --> 00:21:26.501
about some techniques
that we use

00:21:26.501 --> 00:21:29.167
to minimize
the overall output.

00:21:29.167 --> 00:21:31.000
[clears throat]

00:21:31.000 --> 00:21:33.200
So I've got a demo
to prove some of this.

00:21:35.801 --> 00:21:37.734
Ramsdale: [clicking tongue]

00:21:40.000 --> 00:21:42.033
Ramsdale: It didn't like that...

00:21:42.033 --> 00:21:43.868
at all.

00:21:43.868 --> 00:21:46.868
There we go.

00:21:46.868 --> 00:21:50.200
Okay. So this is not part
of the sample application

00:21:50.200 --> 00:21:51.868
that I've been building up,

00:21:51.868 --> 00:21:53.868
but I wanted to pull it out
for the--for the sake

00:21:53.868 --> 00:21:56.200
of, uh, sake of discussion
and to make a point here.

00:21:56.200 --> 00:21:58.400
Um, it's a simple application
that's running on, uh,

00:21:58.400 --> 00:22:00.033
on App Engine right now.

00:22:00.033 --> 00:22:02.100
And what it is
is, uh, an application

00:22:02.100 --> 00:22:03.767
with a title and a button.

00:22:03.767 --> 00:22:05.434
And when I click on the button,

00:22:05.434 --> 00:22:07.267
it's gonna go fetch
and bring up an image dialogue.

00:22:07.267 --> 00:22:09.100
So one could imagine
that if you were

00:22:09.100 --> 00:22:10.934
actually going to apply icons
to your tasks,

00:22:10.934 --> 00:22:12.767
or you want to tag them
with something like,

00:22:12.767 --> 00:22:14.434
"This is
the grocery store list,"

00:22:14.434 --> 00:22:15.934
or "This is the, uh,

00:22:15.934 --> 00:22:17.767
the lunch with, you know,
my colleagues,"

00:22:17.767 --> 00:22:20.267
you know, this is how you would
pull up that dialogue.

00:22:20.267 --> 00:22:23.434
And to give you an idea,
this is really what it does.

00:22:23.434 --> 00:22:25.267
So I will go through
what is going on

00:22:25.267 --> 00:22:26.934
on the bottom in a second.

00:22:26.934 --> 00:22:28.767
But as you can see,
it simply pulls up,

00:22:28.767 --> 00:22:30.767
in this case, 16 images.

00:22:30.767 --> 00:22:32.634
So let's do this.

00:22:32.634 --> 00:22:34.434
Let's clear this guy out.

00:22:34.434 --> 00:22:36.267
And what I'm gonna do
is I'm gonna

00:22:36.267 --> 00:22:38.100
walk through the waterfall
of HTTP requests

00:22:38.100 --> 00:22:39.601
in three different fashions.

00:22:39.601 --> 00:22:42.601
There's the "Okay,
almost subpar way of doing it,"

00:22:42.601 --> 00:22:44.434
where you don't do anything.

00:22:44.434 --> 00:22:46.767
There's the better, where you
start to bundle things,

00:22:46.767 --> 00:22:48.767
and then there's the best thing
you can do,

00:22:48.767 --> 00:22:50.601
which is bundle it
and then code-split it.

00:22:50.601 --> 00:22:52.434
If--if that doesn't
totally make sense,

00:22:52.434 --> 00:22:54.434
just bear with me here
as I walk through each piece,

00:22:54.434 --> 00:22:56.267
and I'll describe it
in more detail.

00:22:56.267 --> 00:22:57.934
So to make this real,

00:22:57.934 --> 00:23:00.501
let's go and clear out
my cache, right?

00:23:02.934 --> 00:23:04.934
Ramsdale: And if anybody's
asking why I'm using Firebug,

00:23:04.934 --> 00:23:06.601
it just happens
to have a better UI

00:23:06.601 --> 00:23:08.501
for showing off
what I'm about to show off.

00:23:08.501 --> 00:23:10.067
Feel free to use ChromeDevTools,

00:23:10.067 --> 00:23:12.067
but this really drives
the point home.

00:23:12.067 --> 00:23:14.801
Okay, so I'm completely clean,

00:23:14.801 --> 00:23:16.667
nothing in my cache.

00:23:16.667 --> 00:23:18.501
Um, no magic tricks going on.

00:23:18.501 --> 00:23:20.501
And what I want to do is
I want to refresh my app.

00:23:20.501 --> 00:23:22.334
So I'm gonna show you
what happens

00:23:22.334 --> 00:23:24.334
as you go from refresh
to button-click.

00:23:24.334 --> 00:23:27.000
All right.

00:23:27.000 --> 00:23:29.667
So, uh, a little bit
about what happens

00:23:29.667 --> 00:23:31.334
when you do a GWT application.

00:23:31.334 --> 00:23:34.334
So the first thing
you see is, um,

00:23:34.334 --> 00:23:36.167
we fetch the HTML page.

00:23:36.167 --> 00:23:38.000
And we look through it,
and then we go,

00:23:38.000 --> 00:23:39.834
and we see that, "Oh,
we need a style sheet."

00:23:39.834 --> 00:23:41.667
So we go fetch the style sheet.

00:23:41.667 --> 00:23:43.667
And then we see that
also in that HTML page,

00:23:43.667 --> 00:23:47.000
we--we need the actual, uh,
GWT-specific JavaScript

00:23:47.000 --> 00:23:49.000
which can go fetch
the right permutation.

00:23:49.000 --> 00:23:50.667
That's this nocache.js.

00:23:50.667 --> 00:23:53.667
Note that it's only 2.5k.
It's quite small.

00:23:53.667 --> 00:23:55.667
And then you see
this really weird md5 hash

00:23:55.667 --> 00:23:57.667
down here--
sorry, right there.

00:23:57.667 --> 00:23:59.667
md5.cache.html--

00:23:59.667 --> 00:24:01.734
that's actually
all of the JavaScript

00:24:01.734 --> 00:24:04.067
for your application
bundled up in there.

00:24:04.067 --> 00:24:06.234
And you can note that this is,
you know, 19k.

00:24:06.234 --> 00:24:08.234
So it's not huge. I'm not
showing you a huge application,

00:24:08.234 --> 00:24:10.567
but that's where all
my app logic's coming down.

00:24:10.567 --> 00:24:12.901
So that's not too bad.
I mean, that's pretty fast.

00:24:12.901 --> 00:24:15.067
Um, what ends up happening--

00:24:15.067 --> 00:24:17.067
let's pull this up.

00:24:17.067 --> 00:24:19.834
I'm gonna clear this, and then
when I click on the icon...

00:24:19.834 --> 00:24:22.267
Boom. All right.

00:24:22.267 --> 00:24:24.000
So again, I'm on
an Ethernet connection,

00:24:24.000 --> 00:24:26.000
so it's gonna be pretty fast,
but let's pay attention

00:24:26.000 --> 00:24:27.734
to the waterfall graph
on the bottom.

00:24:27.734 --> 00:24:29.801
You see that I go, and I fetch
every single image,

00:24:29.801 --> 00:24:32.067
one by one by one by one.

00:24:32.067 --> 00:24:33.901
Um, and it's really
not that bad.

00:24:33.901 --> 00:24:35.901
I mean, it was pretty snappy.
You probably saw

00:24:35.901 --> 00:24:37.901
a little bit of delay
as it kind of got one in

00:24:37.901 --> 00:24:39.734
and then put it up
on the screen.

00:24:39.734 --> 00:24:41.734
And you know, if you refresh it,
they're gonna be cached anyway,

00:24:41.734 --> 00:24:43.234
so it doesn't matter.

00:24:43.234 --> 00:24:45.100
But this is on
a desktop browser, right?

00:24:45.100 --> 00:24:47.067
And so you see--
I go fetch every image,

00:24:47.067 --> 00:24:48.901
and Fire--and Firebug does
a pretty good job

00:24:48.901 --> 00:24:50.734
of breaking down what is--
actually happens

00:24:50.734 --> 00:24:52.400
with each request.

00:24:52.400 --> 00:24:54.901
So you can see the purple
is waiting, right?

00:24:54.901 --> 00:24:58.067
And--and then the gray
actually is receiving.

00:24:58.067 --> 00:25:00.067
And then the--
the one on the left-hand side

00:25:00.067 --> 00:25:01.801
is when you're actually blocked.

00:25:01.801 --> 00:25:03.634
So I spend quite a bit of time

00:25:03.634 --> 00:25:06.467
just waiting
for the HTTP requests.

00:25:06.467 --> 00:25:09.267
To make matters worse--let's see
if I can pull this off.

00:25:09.267 --> 00:25:11.667
Switching around--

00:25:11.667 --> 00:25:13.167
yeah, great.

00:25:13.167 --> 00:25:16.167
So to make matters worse, um...
[clears throat]

00:25:16.167 --> 00:25:18.167
when you're on a mobile device--

00:25:18.167 --> 00:25:20.167
so here's the difference
between desktop browsers

00:25:20.167 --> 00:25:21.834
and--and mobile browsers.

00:25:21.834 --> 00:25:23.834
The number of
concurrent TCP connections

00:25:23.834 --> 00:25:26.000
great--is greatly different,
right?

00:25:26.000 --> 00:25:27.667
On--on modern browsers,

00:25:27.667 --> 00:25:29.667
you can get 10-plus
concurrent connections

00:25:29.667 --> 00:25:31.167
to the same domain.

00:25:31.167 --> 00:25:32.667
Um, on Android devices--

00:25:32.667 --> 00:25:34.667
and this came
from our page speed team--

00:25:34.667 --> 00:25:36.167
uh, great guys--

00:25:36.167 --> 00:25:38.000
you--you get four
concurrent TCP requests.

00:25:38.000 --> 00:25:39.834
Now that's changing.
It's getting better.

00:25:39.834 --> 00:25:41.834
With Honeycomb, they've--
they've upped the number,

00:25:41.834 --> 00:25:43.667
but, you know,
when you're still catering

00:25:43.667 --> 00:25:45.667
towards Froyo and Gingerbread,
2.2 and 2.3 devices,

00:25:45.667 --> 00:25:47.167
this is what you get.

00:25:47.167 --> 00:25:50.667
So, um, four at a time--
you--you're gonna start to see

00:25:50.667 --> 00:25:54.167
that graph that I just
showed you over here,

00:25:54.167 --> 00:25:56.000
you know, looks a lot worse,
because you see

00:25:56.000 --> 00:25:57.834
how I've done everything
concurrently down here.

00:25:57.834 --> 00:26:00.334
That gets broken up, so it gets
even worse for mobile devices.

00:26:00.334 --> 00:26:02.234
So how can we make that better?

00:26:02.234 --> 00:26:05.734
So I alluded to the idea of
bundling up all these resources,

00:26:05.734 --> 00:26:08.400
so we could take
these 16 resources here

00:26:08.400 --> 00:26:10.400
and bundle them up...
[clears throat]

00:26:10.400 --> 00:26:12.234
and then just go
fetch 'em at once.

00:26:12.234 --> 00:26:14.067
So let's see
what that looks like.

00:26:14.067 --> 00:26:16.400
So again,
let's clean everything up.

00:26:16.400 --> 00:26:19.734
No sleight of hand.
Clear.

00:26:19.734 --> 00:26:22.934
No, no, come back. Come back.

00:26:22.934 --> 00:26:24.501
Okay.

00:26:24.501 --> 00:26:27.334
So now I have
my snappy application.

00:26:27.334 --> 00:26:29.667
Okay, so what I've done here
is I've bundled all these up,

00:26:29.667 --> 00:26:31.601
and we'll--
we'll see the difference.

00:26:34.000 --> 00:26:36.000
Ramsdale: Okay,
so I go and fetch,

00:26:36.000 --> 00:26:39.501
and--and the--the mode
of getting the actual files

00:26:39.501 --> 00:26:41.501
and the files that I fetch
are exactly the same.

00:26:41.501 --> 00:26:43.334
I get my HTML page.

00:26:43.334 --> 00:26:45.334
I scan through it.
I get my style sheet.

00:26:45.334 --> 00:26:47.501
I go get my nocache.js,
and then I get my application,

00:26:47.501 --> 00:26:49.667
right? But now you can see
that the md5 hash,

00:26:49.667 --> 00:26:51.334
my actual application,

00:26:51.334 --> 00:26:54.167
went from 19k to 177k, right?

00:26:54.167 --> 00:26:56.167
'Cause it's got
all those images.

00:26:56.167 --> 00:26:58.667
Now to prove that out,
if I clear this--

00:26:58.667 --> 00:27:00.734
oh, sorry,
before I jump to that--

00:27:00.734 --> 00:27:02.400
so note that it's 177k.

00:27:02.400 --> 00:27:03.901
And let's see,

00:27:03.901 --> 00:27:06.901
The wait time
was 400 milliseconds, right?

00:27:06.901 --> 00:27:09.234
So it's--it's very similar to
what the wait time was before.

00:27:09.234 --> 00:27:12.567
So really what I'm paying for
is the receive time over here.

00:27:12.567 --> 00:27:15.567
Sorry. If you can see it...

00:27:15.567 --> 00:27:18.067
Receive time--
446 milliseconds,

00:27:18.067 --> 00:27:20.067
because it actually fetched
all those images.

00:27:20.067 --> 00:27:22.067
And to prove that it fetched
all those images,

00:27:22.067 --> 00:27:24.734
look what happens when hit
the "Select Icon" button.

00:27:24.734 --> 00:27:26.734
All I'm picking up--
and look at the sizes.

00:27:26.734 --> 00:27:28.734
They're very small.
But all I'm picking up

00:27:28.734 --> 00:27:30.400
are some--some artifacts

00:27:30.400 --> 00:27:32.767
that are used by, um,
our own styling,

00:27:32.767 --> 00:27:36.234
you know, like borders,
or clear.cache.gif file.

00:27:36.234 --> 00:27:37.901
Um... [clears throat]

00:27:37.901 --> 00:27:40.567
but you know, talking 433 bytes,
1.5k--nothing that big.

00:27:40.567 --> 00:27:42.400
And you saw how fast
it popped up, too,

00:27:42.400 --> 00:27:45.567
because it already had
all those images. It's great.

00:27:45.567 --> 00:27:47.901
So real quickly, let's look
at how we would do that.

00:27:51.167 --> 00:27:53.834
Ramsdale: So to do this, we--
we can enumerate

00:27:53.834 --> 00:27:55.834
all of our, um,

00:27:55.834 --> 00:27:58.167
we can enumerate
all of the resources

00:27:58.167 --> 00:28:00.667
in our application,
put those into an interface--

00:28:00.667 --> 00:28:02.734
the interface is something
that extends ClientBundle.

00:28:02.734 --> 00:28:04.567
Again, for
the complete documentation,

00:28:04.567 --> 00:28:06.767
definitely go check out
our dev guides in our Javadoc.

00:28:06.767 --> 00:28:08.734
But what we do
is we annotate this,

00:28:08.734 --> 00:28:10.734
and we provide a method,
so I can call, uh,

00:28:10.734 --> 00:28:12.234
you know, image0--

00:28:12.234 --> 00:28:14.067
so I can send
"resources.image0,"

00:28:14.067 --> 00:28:15.901
and I will get back
the image resource

00:28:15.901 --> 00:28:18.234
for my, uh, of my file.

00:28:18.234 --> 00:28:21.400
And I can do that
for all 16 of those images.

00:28:21.400 --> 00:28:23.234
And then when
the GWT Compiler runs,

00:28:23.234 --> 00:28:24.901
and the code generators run,

00:28:24.901 --> 00:28:26.734
we go and fetch
all those resources,

00:28:26.734 --> 00:28:28.567
we package them up
into one data file,

00:28:28.567 --> 00:28:30.400
and then we basically
do spriting

00:28:30.400 --> 00:28:33.400
over those data images.

00:28:33.400 --> 00:28:36.334
But the problem is--
let's see this again.

00:28:38.067 --> 00:28:40.067
Ramsdale: The problem is
that now that I've fetched

00:28:40.067 --> 00:28:41.567
all of my images,

00:28:41.567 --> 00:28:43.567
I've fetched them
on the actual app startup.

00:28:43.567 --> 00:28:45.067
So especially
on a mobile device,

00:28:45.067 --> 00:28:46.734
this--this is gonna be
a huge time-suck,

00:28:46.734 --> 00:28:48.234
because I'm gonna
have to go--

00:28:48.234 --> 00:28:50.234
and, like, when I initially
hit the application,

00:28:50.234 --> 00:28:51.801
there's gonna be latency there.

00:28:51.801 --> 00:28:53.501
So while the rest
of my application

00:28:53.501 --> 00:28:55.267
operates very smoothly--
and by the way,

00:28:55.267 --> 00:28:57.501
imagine this not with 16 images,
but with, like, 1,600 images

00:28:57.501 --> 00:28:59.501
or 160 images, something
more like a real app.

00:28:59.501 --> 00:29:01.567
And all of a sudden, it's gonna
take, like, ten seconds

00:29:01.567 --> 00:29:03.267
for your application
to load for a user,

00:29:03.267 --> 00:29:04.734
or 20 seconds
for the application to load,

00:29:04.734 --> 00:29:06.801
and that's just a real poor user
experience when they start up.

00:29:06.801 --> 00:29:09.501
Not to mention, you might not
even use any of those images.

00:29:09.501 --> 00:29:11.501
I may never actually use
your application

00:29:11.501 --> 00:29:13.267
and slipped on the button
that says

00:29:13.267 --> 00:29:15.000
"I want to add an icon
to my--my task."

00:29:15.000 --> 00:29:17.000
I just don't care.
[clears throat]

00:29:17.000 --> 00:29:19.000
So how can we make that better?

00:29:19.000 --> 00:29:21.300
What we can do is
we can code-split it.

00:29:21.300 --> 00:29:23.234
And again...

00:29:26.501 --> 00:29:29.000
Ramsdale: What I'm gonna do
is I'm gonna say,

00:29:29.000 --> 00:29:31.000
All right, I want to bundle
the images, but only fetch them

00:29:31.000 --> 00:29:33.000
when the user actually clicks
on the button.

00:29:33.000 --> 00:29:36.000
So we go and we refresh
the application.

00:29:36.000 --> 00:29:39.167
Again, everything looks
exactly the same,

00:29:39.167 --> 00:29:43.167
except for now when you look
down at my md5.cache.html,

00:29:43.167 --> 00:29:46.200
it's gone down to 12.5k,
which is fantastic.

00:29:46.200 --> 00:29:48.000
In fact, it's even better
than when we first did it,

00:29:48.000 --> 00:29:50.334
because when we first ran
the application, it was at 19k.

00:29:50.334 --> 00:29:52.734
So not only have I
code-split out all the images,

00:29:52.734 --> 00:29:55.000
I've code-split out the code
that actually loads the images,

00:29:55.000 --> 00:29:57.501
and so my--my startup time
is even faster.

00:29:57.501 --> 00:30:00.334
And... [clears throat]

00:30:00.334 --> 00:30:02.334
then when we go over here

00:30:02.334 --> 00:30:05.033
to do the selecting
of the icon...

00:30:07.400 --> 00:30:09.400
Ramsdale: Boom,
we get 'em right away.

00:30:09.400 --> 00:30:11.400
So now you can see
that I've fetched,

00:30:11.400 --> 00:30:13.400
so there's--
there's the fetch of the--

00:30:13.400 --> 00:30:15.234
of--of the data bundle,

00:30:15.234 --> 00:30:17.234
right? It's 167k.

00:30:17.234 --> 00:30:19.100
And I've deferred that
to when I clicked on it,

00:30:19.100 --> 00:30:20.901
but I've still--
I've still bundled it,

00:30:20.901 --> 00:30:22.567
so that I minimize
my HTTP requests,

00:30:22.567 --> 00:30:24.567
and I end up only waiting,
you know, again,

00:30:24.567 --> 00:30:26.234
358 milliseconds here,

00:30:26.234 --> 00:30:28.234
and my receive time
is 130 milliseconds.

00:30:28.234 --> 00:30:30.734
Again, very fast times,
but when you're on, uh,

00:30:30.734 --> 00:30:32.234
I'm on Ethernet.

00:30:32.234 --> 00:30:34.067
When you're on
degraded connections,

00:30:34.067 --> 00:30:35.567
say Edge, it matters.

00:30:35.567 --> 00:30:37.400
When you have more than 16
images, it matters, right?

00:30:37.400 --> 00:30:39.067
When you have an application

00:30:39.067 --> 00:30:40.801
like some of our
internal applications,

00:30:40.801 --> 00:30:42.334
some of your applications,
as well,

00:30:42.334 --> 00:30:44.334
where you're up to, like,
let's say, a meg or 2 megs

00:30:44.334 --> 00:30:46.501
or 3 megs
for your initial fragment,

00:30:46.501 --> 00:30:48.734
that's gonna result
in a very, very poor

00:30:48.734 --> 00:30:50.734
user experience
on a mobile device.

00:30:50.734 --> 00:30:53.000
So what you can do is
you can cut that out.

00:31:00.434 --> 00:31:02.334
Ramsdale: Oh, I skipped--
I skipped over a slide.

00:31:02.334 --> 00:31:04.167
So this one slide
will show you how you--

00:31:04.167 --> 00:31:06.000
how easy it is to actually
cut out that code.

00:31:06.000 --> 00:31:07.834
So all you have to do is--
in this case,

00:31:07.834 --> 00:31:11.334
in my application, I had a, uh,
a "Show Images" dialogue button,

00:31:11.334 --> 00:31:14.334
and all I had to do
was guard that

00:31:14.334 --> 00:31:16.667
with a GWT.runAsync
and give it a callback.

00:31:16.667 --> 00:31:18.501
And then the compiler knows
that it can see

00:31:18.501 --> 00:31:20.334
all these split points,
split 'em out,

00:31:20.334 --> 00:31:22.000
and you get separate JavaScript

00:31:22.000 --> 00:31:23.834
that it can go off
and fetch later on.

00:31:23.834 --> 00:31:25.667
And it's all magically
happening under the hood.

00:31:25.667 --> 00:31:27.601
You don't have to think
about it.

00:31:29.667 --> 00:31:32.033
Ramsdale: So if we look at it,
it's pretty staggering, though,

00:31:32.033 --> 00:31:34.200
the--the--the difference
in timing,

00:31:34.200 --> 00:31:36.534
so...

00:31:36.534 --> 00:31:38.868
when you have a non--

00:31:38.868 --> 00:31:41.200
this--so this is the amount
of time it's spent waiting.

00:31:41.200 --> 00:31:43.868
Um, if you have
a non-bundled application,

00:31:43.868 --> 00:31:46.367
you end up spending,
you know, 1.4 seconds

00:31:46.367 --> 00:31:47.868
or 1,400 milliseconds

00:31:47.868 --> 00:31:50.367
waiting for the request
to actually initiate, go,

00:31:50.367 --> 00:31:52.033
and then you start getting data.

00:31:52.033 --> 00:31:54.868
When you bundle it, you drop
that down to 594 milliseconds,

00:31:54.868 --> 00:31:56.534
but you actually are doing--

00:31:56.534 --> 00:31:58.367
you're incurring all of that
on the startup.

00:31:58.367 --> 00:32:00.067
So the blue is startup,

00:32:00.067 --> 00:32:02.100
and the green is actually
when you click the button.

00:32:02.100 --> 00:32:04.601
So you incur all of that latency
on startup.

00:32:04.601 --> 00:32:07.934
But when you bundle
and code-split, right,

00:32:07.934 --> 00:32:09.601
you get the best of both worlds.

00:32:09.601 --> 00:32:11.434
Uh, you have very minimal--
you have the--

00:32:11.434 --> 00:32:13.100
you have minimal startup time,

00:32:13.100 --> 00:32:14.934
and then you have
all of your bundling

00:32:14.934 --> 00:32:18.434
and all of your time spent
when you click the button.

00:32:18.434 --> 00:32:20.601
So it makes a big difference.

00:32:20.601 --> 00:32:23.100
Then finally, I mentioned--

00:32:23.100 --> 00:32:24.934
So now that we've--
we've gone through,

00:32:24.934 --> 00:32:26.934
and we've made it,
uh, optimized,

00:32:26.934 --> 00:32:29.267
and we've said, Okay, this is
how we can bundle the code.

00:32:29.267 --> 00:32:30.934
This is how we can defer it.

00:32:30.934 --> 00:32:32.801
What we've done is we've said,
Okay, there's a--

00:32:32.801 --> 00:32:34.601
there's a set amount
of JavaScript code

00:32:34.601 --> 00:32:36.100
that I have to use,

00:32:36.100 --> 00:32:38.100
and I'm gonna move it around
to when I actually need it.

00:32:38.100 --> 00:32:40.934
But let's see how we can,
uh, basically minimize

00:32:40.934 --> 00:32:42.934
the amount of overall JavaScript
that my application uses

00:32:42.934 --> 00:32:44.434
in the first place.

00:32:44.434 --> 00:32:46.267
Uh, and this is nothing
that you have to do.

00:32:46.267 --> 00:32:48.267
This just happens for you
magically when you use GWT.

00:32:48.267 --> 00:32:50.267
But this is the--
the task application

00:32:50.267 --> 00:32:52.100
that I've been showing you.

00:32:52.100 --> 00:32:54.100
And what I've done is
I've run it through the compiler

00:32:54.100 --> 00:32:55.767
using prettyprint,

00:32:55.767 --> 00:32:57.601
and so it's basically
what it would look like

00:32:57.601 --> 00:32:59.434
if you did
handwritten JavaScript.

00:32:59.434 --> 00:33:01.667
And you end up with a code size
of roughly about, uh,

00:33:01.667 --> 00:33:03.667
your initial fragment
is about a meg--

00:33:03.667 --> 00:33:05.501
1.1 megs.

00:33:05.501 --> 00:33:07.501
When you turn on
the typical optimizations

00:33:07.501 --> 00:33:09.334
that the GWT Compiler gives you,

00:33:09.334 --> 00:33:13.000
you're then hovering
around 400 and change

00:33:13.000 --> 00:33:15.000
in terms of overall output size,

00:33:15.000 --> 00:33:17.000
so it's a pretty significant
difference.

00:33:17.000 --> 00:33:18.667
You've cut it by more than 50%.

00:33:18.667 --> 00:33:21.667
And so again, the less
JavaScript that you have,

00:33:21.667 --> 00:33:24.000
the less parse time,
the less drain on the battery,

00:33:24.000 --> 00:33:26.634
the better user experience.

00:33:26.634 --> 00:33:28.634
So now that we've talked

00:33:28.634 --> 00:33:31.133
about how to build great UIs
for any form factor,

00:33:31.133 --> 00:33:33.133
we've talked about how
to optimize the user experience,

00:33:33.133 --> 00:33:35.133
we've talked about
how to make it snappier

00:33:35.133 --> 00:33:36.801
and actually make it run

00:33:36.801 --> 00:33:38.467
like an installable
mobile application,

00:33:38.467 --> 00:33:40.467
let's talk about how you can
work without a connection.

00:33:40.467 --> 00:33:42.133
'Cause again, like I said,

00:33:42.133 --> 00:33:43.968
these devices are meant
to be used on the go.

00:33:43.968 --> 00:33:45.801
They're meant to be used
anywhere I want to.

00:33:45.801 --> 00:33:47.801
And the fact that it's easy
to pull out of my pocket and use

00:33:47.801 --> 00:33:51.133
means that I'm more apt
to use it than, say, my laptop.

00:33:51.133 --> 00:33:54.300
So the problems
that were faced there

00:33:54.300 --> 00:33:56.300
are that you want to run
wherever, whenever, right?

00:33:56.300 --> 00:33:58.133
You want to basically launch
your application,

00:33:58.133 --> 00:33:59.968
and have it bring up something,

00:33:59.968 --> 00:34:02.033
some user interface
for you to use.

00:34:02.033 --> 00:34:04.033
For that, we can use
Application Cache

00:34:04.033 --> 00:34:06.200
to load resources locally.

00:34:06.200 --> 00:34:08.033
Then once you have
your application loaded,

00:34:08.033 --> 00:34:09.868
you want to be able
to use it, right?

00:34:09.868 --> 00:34:11.534
You need to interact with data.

00:34:11.534 --> 00:34:13.567
You need to be able to access
data wherever, whenever.

00:34:13.567 --> 00:34:15.667
And for that, we can use
Local Storage to attach RPCs.

00:34:17.734 --> 00:34:20.400
Ramsdale: So a little background
on Application Cache--

00:34:20.400 --> 00:34:22.400
Uh, it's part of the HTML5
feature set.

00:34:22.400 --> 00:34:24.934
It works with files like HTML,
CSS, and JavaScript.

00:34:24.934 --> 00:34:26.767
You can load those from disk.

00:34:26.767 --> 00:34:28.601
It works with iPhone
and Android.

00:34:28.601 --> 00:34:31.601
And then it also works for
Chrome, Safari, and Firefox.

00:34:31.601 --> 00:34:34.100
And to make this work
with your GWT application,

00:34:34.100 --> 00:34:36.100
there's a few things
you have to do.

00:34:36.100 --> 00:34:38.601
You end up declaring
an appcache.nocache.manifest,

00:34:38.601 --> 00:34:41.100
right? This is just a file
that you create.

00:34:41.100 --> 00:34:43.100
And then you go through,
and you list

00:34:43.100 --> 00:34:44.934
all of the permutations
that you have.

00:34:44.934 --> 00:34:47.300
You can leave out
all the RPC-generated ones.

00:34:47.300 --> 00:34:49.267
And the fact that you create--
you know, you call it "nocache"

00:34:49.267 --> 00:34:51.601
means that it will
always go fetch it.

00:34:51.601 --> 00:34:53.434
Then you go change
your web.xml file,

00:34:53.434 --> 00:34:55.434
and you actually add
this manifest file,

00:34:55.434 --> 00:34:57.267
and you actually add
the MIME type for it.

00:34:57.267 --> 00:34:59.267
And then you go through
and you update your HTML file

00:34:59.267 --> 00:35:01.767
to include this manifest file,
yada yada yada yada.

00:35:01.767 --> 00:35:04.367
Or you can just go check out
the 2.4 SDK...

00:35:04.367 --> 00:35:06.701
[laughs] where we--where we
started to make changes.

00:35:06.701 --> 00:35:08.534
Now it's in beta mode,
and it's--

00:35:08.534 --> 00:35:10.534
we're having to split it out,
and it's a little experimental.

00:35:10.534 --> 00:35:12.367
But, um, the idea is that,
you know,

00:35:12.367 --> 00:35:14.868
we know all of the files that
are part of your application.

00:35:14.868 --> 00:35:16.868
Well, let's be honest,
we know almost all of them.

00:35:16.868 --> 00:35:18.701
So we know all the permutations.

00:35:18.701 --> 00:35:20.534
We know
all the JavaScript files.

00:35:20.534 --> 00:35:22.367
We know the CSS files
that you're using.

00:35:22.367 --> 00:35:24.367
If you're doing resource
bundling like I just mentioned,

00:35:24.367 --> 00:35:26.200
we know all of those files,
as well.

00:35:26.200 --> 00:35:27.868
And so, uh, we have this process

00:35:27.868 --> 00:35:29.701
when you go through,
and you compile,

00:35:29.701 --> 00:35:31.534
and you have
all these artifacts.

00:35:31.534 --> 00:35:33.534
At the end we say, Okay,
pull it all together, right?

00:35:33.534 --> 00:35:35.200
We call that linking,

00:35:35.200 --> 00:35:37.033
very much like
a normal compiler does,

00:35:37.033 --> 00:35:38.868
part of the normal
compiler process.

00:35:38.868 --> 00:35:40.868
So what you can do is say, Okay,
well, typically when I link,

00:35:40.868 --> 00:35:42.701
I just spit out
an HTML file, right?

00:35:42.701 --> 00:35:44.701
I spit out
the special nocache.js,

00:35:44.701 --> 00:35:46.701
and then I have my permutations.

00:35:46.701 --> 00:35:49.534
What you can do is you can
specify a new App Cache linker.

00:35:49.534 --> 00:35:52.033
Um, and in this case,

00:35:52.033 --> 00:35:54.033
you would say, Okay...
[clears throat]

00:35:54.033 --> 00:35:56.033
Mr. GWT Compiler,
when you go and run,

00:35:56.033 --> 00:35:58.534
and when you're ready to link,
don't use your standard linker.

00:35:58.534 --> 00:36:01.100
Use the one I'm--
I'm suggesting here.

00:36:01.100 --> 00:36:02.934
Uh, and it's
an App Cache linker,

00:36:02.934 --> 00:36:04.601
and here's the path to it.

00:36:04.601 --> 00:36:06.601
And it knows how to handle
everything for you.

00:36:06.601 --> 00:36:08.601
And then you can say,
Okay, by the way,

00:36:08.601 --> 00:36:10.601
now that I've defined this,
use it in my application.

00:36:10.601 --> 00:36:13.601
And this code goes into your
CloudTask.gwt.xml, your--

00:36:13.601 --> 00:36:15.934
basically your GWT application
configuration file

00:36:15.934 --> 00:36:17.434
that I mentioned before.

00:36:17.434 --> 00:36:19.267
And then, uh, the reason
that it's specific

00:36:19.267 --> 00:36:21.267
to your app right now--
we're working through this--

00:36:21.267 --> 00:36:22.934
is that it knows that, Okay,

00:36:22.934 --> 00:36:24.934
these are the set of files
that I compiled.

00:36:24.934 --> 00:36:26.934
Do you have anything else
that you want to add to the--

00:36:26.934 --> 00:36:28.934
the caching?
If so, just let me know.

00:36:28.934 --> 00:36:30.934
And then you take care
of it from there.

00:36:30.934 --> 00:36:32.934
So it ends up being
about four lines of code

00:36:32.934 --> 00:36:34.767
instead of all of that stuff
that I mentioned

00:36:34.767 --> 00:36:36.434
in the previous slide.

00:36:36.434 --> 00:36:38.434
So at that point in time,
you can load your application

00:36:38.434 --> 00:36:40.434
from disk, even if you
don't have a connection.

00:36:40.434 --> 00:36:42.767
It pops up, not to mention
it's caching most of the files

00:36:42.767 --> 00:36:44.767
that you don't want
to fetch anyway,

00:36:44.767 --> 00:36:46.767
so your application just becomes
snappier to begin with,

00:36:46.767 --> 00:36:48.601
because it's--
again, it's saying, all--

00:36:48.601 --> 00:36:50.601
all the browser does is says,
Okay, I have a manifest file.

00:36:50.601 --> 00:36:52.434
Go off and grab it.
Has it changed?

00:36:52.434 --> 00:36:54.100
No, it hasn't changed.
Great.

00:36:54.100 --> 00:36:55.934
I have all the resources
that I need on disk.

00:36:55.934 --> 00:36:57.434
Load those up--

00:36:57.434 --> 00:37:00.267
Much faster than doing
an RPC back and forth.

00:37:00.267 --> 00:37:03.000
Okay, so now that I can
load my application,

00:37:03.000 --> 00:37:04.834
I want to be able
to read data from it

00:37:04.834 --> 00:37:06.667
and work with it.
So how do I do that?

00:37:06.667 --> 00:37:08.667
[clears throat]
So we can use local storage

00:37:08.667 --> 00:37:10.501
to--to, uh, to make that happen.

00:37:10.501 --> 00:37:12.667
And again, much like App Cache,

00:37:12.667 --> 00:37:14.667
it's part of the HTML5
feature set.

00:37:14.667 --> 00:37:17.000
Uh, if you don't know, it's a--
it's a local database

00:37:17.000 --> 00:37:18.667
for reading and writing data.

00:37:18.667 --> 00:37:20.167
It's very simple,

00:37:20.167 --> 00:37:21.834
just a key value
for your persistence.

00:37:21.834 --> 00:37:23.667
Um, again, it works
on iPhone, Android,

00:37:23.667 --> 00:37:25.501
and then Chrome, Safari,
and Firefox.

00:37:25.501 --> 00:37:27.334
Uh, and this is
already included.

00:37:27.334 --> 00:37:30.000
This shipped
with the GWT 2.3 SDK.

00:37:30.000 --> 00:37:32.501
So the way that we would
go about using this...

00:37:32.501 --> 00:37:34.334
[clears throat]
is in your application--

00:37:34.334 --> 00:37:36.167
anywhere you want to
in your application,

00:37:36.167 --> 00:37:38.000
you simply need to get in
an instance

00:37:38.000 --> 00:37:39.667
of the storage class.

00:37:39.667 --> 00:37:42.000
So you say "Storage.
getLocalStorageIfSupported."

00:37:42.000 --> 00:37:43.834
And if you end up--
and this is, uh,

00:37:43.834 --> 00:37:45.667
the "IfSupported" part
is a way of doing

00:37:45.667 --> 00:37:47.167
a run-time check.

00:37:47.167 --> 00:37:49.834
So if you're running
on Chrome or Safari,

00:37:49.834 --> 00:37:51.501
You'll get back local storage.

00:37:51.501 --> 00:37:55.167
If you're running
on IE6, 7, or 8, you won't.

00:37:55.167 --> 00:37:57.167
And then you can fork
your application from there

00:37:57.167 --> 00:37:58.834
and make the necessary changes,

00:37:58.834 --> 00:38:01.167
like maybe you just choose
not to do local storage.

00:38:01.167 --> 00:38:03.901
Like on IE6, you just happen
to always fetch data

00:38:03.901 --> 00:38:07.234
over the wire, so that's it.
They get a degraded performance.

00:38:07.234 --> 00:38:10.234
We want them to move
to IE9 anyway, so that's okay.

00:38:10.234 --> 00:38:13.234
Um, so let's say
that we actually do get

00:38:13.234 --> 00:38:15.234
the local storage class back.
We have an instance of it.

00:38:15.234 --> 00:38:17.567
We can start doing
some really cool stuff with it.

00:38:17.567 --> 00:38:19.234
One way you might use it,

00:38:19.234 --> 00:38:21.234
and the way that we use it
in this--this application is--

00:38:21.234 --> 00:38:23.234
well, okay, so your application,
somewhere in the code,

00:38:23.234 --> 00:38:25.400
says, uh, Hey, I need tasks.

00:38:25.400 --> 00:38:27.400
So you have a method
called getTasks,

00:38:27.400 --> 00:38:30.067
and what that would normally do
in--in a fully connected world,

00:38:30.067 --> 00:38:32.067
it would say, Oh,
just fire off an RPC,

00:38:32.067 --> 00:38:34.067
and when I get the tasks back,
I'll update the application.

00:38:34.067 --> 00:38:37.567
Um, and in this new kind
of potentially offline world

00:38:37.567 --> 00:38:39.267
where we have local storage,

00:38:39.267 --> 00:38:41.567
what we'll do is we'll--
in the method, we'll first say,

00:38:41.567 --> 00:38:43.901
Okay, well, let me grab them
from local storage.

00:38:43.901 --> 00:38:46.734
So let's say
I get back a string.

00:38:46.734 --> 00:38:49.067
Great. That's a string that's
representing my task list.

00:38:49.067 --> 00:38:52.067
Now I need to deserialize it.
So now I have a list of tasks.

00:38:52.067 --> 00:38:53.901
That's great.
These are the cached ones.

00:38:53.901 --> 00:38:55.901
And then I'll fire off
an async request.

00:38:55.901 --> 00:38:58.734
This is where the async nature
of the browser really helps out.

00:38:58.734 --> 00:39:00.734
You automatically fire off
an async request,

00:39:00.734 --> 00:39:02.467
and you return,
pass that task--

00:39:02.467 --> 00:39:04.968
that list of tasks back
to your application.

00:39:04.968 --> 00:39:07.801
It's none the wiser,
shows them, displays them.

00:39:07.801 --> 00:39:09.300
The RPC goes off.

00:39:09.300 --> 00:39:10.968
If it succeeds,
that's fantastic.

00:39:10.968 --> 00:39:14.167
It comes back,
and when it comes back,

00:39:14.167 --> 00:39:16.133
you say, Okay, well, I've been
waiting for that data.

00:39:16.133 --> 00:39:18.133
That's--I'm glad you--I'm glad
you could get it for me.

00:39:18.133 --> 00:39:19.801
Let me go ahead
and serialize it,

00:39:19.801 --> 00:39:21.467
get it into the string format.

00:39:21.467 --> 00:39:23.300
Let me persist it,
so that my cache is up to date

00:39:23.300 --> 00:39:24.968
for the next time I fetch it,

00:39:24.968 --> 00:39:26.801
and then you'll do
whatever you need to do

00:39:26.801 --> 00:39:28.300
in your application, right?

00:39:28.300 --> 00:39:30.133
So you might pass an event
on the event bus,

00:39:30.133 --> 00:39:31.968
saying, like, Hey,
if you're listening for, uh,

00:39:31.968 --> 00:39:33.801
task updates,
I've got one for you.

00:39:33.801 --> 00:39:37.200
Update the UI accordingly
and go on from there.

00:39:37.200 --> 00:39:39.634
And so now we've--
we've managed to go through

00:39:39.634 --> 00:39:42.300
and add the offline
support we needed

00:39:42.300 --> 00:39:43.801
to the application.

00:39:43.801 --> 00:39:45.801
We're kind of bringing it
all together.

00:39:45.801 --> 00:39:49.501
And what we'll do
to prove it out...

00:39:49.501 --> 00:39:52.334
is flip this off.

00:39:52.334 --> 00:39:54.000
And see, the nice thing is

00:39:54.000 --> 00:39:56.334
if the Wi-Fi completely
went down in this demo,

00:39:56.334 --> 00:39:59.000
since it works offline--
I was good to go.

00:39:59.000 --> 00:40:01.667
But let's force that
to happen anyways.

00:40:13.934 --> 00:40:16.167
Ramsdale: Great.
So we have the application

00:40:16.167 --> 00:40:18.000
we've been using all along up.

00:40:18.000 --> 00:40:20.033
Let's go ahead and add

00:40:20.033 --> 00:40:22.501
an, uh, icon to the home screen

00:40:22.501 --> 00:40:24.334
to give us the full effect.

00:40:24.334 --> 00:40:28.000
So "Add shortcut to home."

00:40:28.000 --> 00:40:30.000
Over here, let's see...

00:40:30.000 --> 00:40:33.501
"Bookmarks,"

00:40:33.501 --> 00:40:36.000
"Shortcut to home."

00:40:36.000 --> 00:40:38.000
All right.

00:40:38.000 --> 00:40:40.400
So note that we're connected.

00:40:40.400 --> 00:40:42.567
Let's go ahead and kill that.

00:40:42.567 --> 00:40:44.734
Now you can read my e-mail.

00:40:44.734 --> 00:40:47.734
[chuckles]

00:40:47.734 --> 00:40:49.734
[clears throat]
All right.

00:40:49.734 --> 00:40:51.400
So that's on.

00:40:51.400 --> 00:40:53.334
I have no connection.

00:40:59.267 --> 00:41:02.000
Ramsdale: All right.
Airplane mode for both.

00:41:03.934 --> 00:41:05.934
Ramsdale: Come back.

00:41:05.934 --> 00:41:08.467
Now there's a slight glitch
that you'll have to deal with.

00:41:08.467 --> 00:41:12.300
This is a weird browser quirk
we haven't got around.

00:41:12.300 --> 00:41:14.133
Okay, so the first time I do it,

00:41:14.133 --> 00:41:16.801
it says, uh, I-I--
it realizes that it's offline

00:41:16.801 --> 00:41:18.801
and just throws up the default.
Uh, I can't connect.

00:41:18.801 --> 00:41:22.133
But then what you see is that
my application is connected.

00:41:22.133 --> 00:41:25.133
If I keep hitting "refresh"
while I'm in airplane mode,

00:41:25.133 --> 00:41:27.300
I get it.

00:41:27.300 --> 00:41:29.133
I can actually see

00:41:29.133 --> 00:41:32.167
my task list.

00:41:32.167 --> 00:41:34.000
Right?

00:41:34.000 --> 00:41:35.934
I get back support.

00:41:37.501 --> 00:41:39.334
Ramsdale: Do the same thing
over here--

00:41:39.334 --> 00:41:42.334
I can go through,
and I can see.

00:41:42.334 --> 00:41:44.167
Click.

00:41:44.167 --> 00:41:45.934
Back support.

00:41:48.000 --> 00:41:51.167
Ramsdale: All right, and now,
see, I go away

00:41:51.167 --> 00:41:54.167
and leave my application.

00:41:54.167 --> 00:41:56.167
And then I'm--I'm driving
through the subway.

00:41:56.167 --> 00:41:58.167
I want to--I'm in the middle
of Kansas again.

00:41:58.167 --> 00:42:00.200
I'm on the plane.
I can just click on my icon.

00:42:00.200 --> 00:42:02.067
I've got my application here.

00:42:02.067 --> 00:42:04.067
I can select it.

00:42:04.067 --> 00:42:07.067
I can see all my data.

00:42:07.067 --> 00:42:09.567
We can go check out the,
you know,

00:42:09.567 --> 00:42:11.067
Blue Bottle coffee shop

00:42:11.067 --> 00:42:12.901
because I hear
they have great espresso.

00:42:12.901 --> 00:42:15.400
Same thing works on my phone.

00:42:15.400 --> 00:42:17.234
All my data's here.

00:42:17.234 --> 00:42:19.234
I can click on it,
and I can see it.

00:42:19.234 --> 00:42:21.067
So fully functioning
mobile web app.

00:42:21.067 --> 00:42:23.067
Now I'm not--I'm not connected
to the cloud at all.

00:42:23.067 --> 00:42:25.067
I have everything in my browser,
and it's actually operating

00:42:25.067 --> 00:42:28.067
like a real, true...

00:42:28.067 --> 00:42:30.234
installable application.

00:42:34.000 --> 00:42:36.000
Ramsdale: [clears throat]

00:42:36.000 --> 00:42:38.934
[applause]
Ramsdale: Oh, thanks.

00:42:41.834 --> 00:42:43.834
Ramsdale: So we've gone
through a lot.

00:42:43.834 --> 00:42:45.267
We've gone through
saying, okay--

00:42:45.267 --> 00:42:48.100
we've identified
that we're web developers.

00:42:48.100 --> 00:42:50.601
We know we want to do mobile.
It's the new hotness.

00:42:50.601 --> 00:42:53.601
Uh, we'd love to reuse our code.
We know there's friction.

00:42:53.601 --> 00:42:55.601
We've gone through
what those problems are.

00:42:55.601 --> 00:42:57.434
Um, and we've identified
that, you know,

00:42:57.434 --> 00:42:59.267
what you want to do is--
it's tough.

00:42:59.267 --> 00:43:01.334
You have to make UIs
that work on every device,

00:43:01.334 --> 00:43:03.334
so you need tools and frameworks
to make that easy to do,

00:43:03.334 --> 00:43:05.334
and that's what GWT provides--

00:43:05.334 --> 00:43:07.200
UiBinder and GWT Designer.

00:43:07.200 --> 00:43:10.501
Um, you need, uh, to optimize
for the user experience, right?

00:43:10.501 --> 00:43:12.501
You need to be able
to pick that UI very easily.

00:43:12.501 --> 00:43:14.501
And you need to have it happen
without you having to write,

00:43:14.501 --> 00:43:16.334
you know,
thousands of lines of code.

00:43:16.334 --> 00:43:18.167
You can do that
with deferred properties

00:43:18.167 --> 00:43:21.167
and actually using
built-in GWT features.

00:43:21.167 --> 00:43:23.000
And then finally,
you need to optimize

00:43:23.000 --> 00:43:24.667
for the user experience, right?

00:43:24.667 --> 00:43:26.501
You need to make it as small
as possible.

00:43:26.501 --> 00:43:28.334
So we can--we've shown
how we can bundle resources,

00:43:28.334 --> 00:43:30.167
how we can move them around
your application

00:43:30.167 --> 00:43:31.834
to when you
absolutely need them.

00:43:31.834 --> 00:43:33.667
And then we can ultimately,
using the compiler, right,

00:43:33.667 --> 00:43:36.167
to do obfuscation,
dead code analysis,

00:43:36.167 --> 00:43:37.667
method folding--

00:43:37.667 --> 00:43:39.501
you can actually reduce
the overall size

00:43:39.501 --> 00:43:42.501
of your JavaScript
by sometimes 50%, right?

00:43:42.501 --> 00:43:44.501
And then finally, we need--
we need APIs,

00:43:44.501 --> 00:43:46.501
good, easy-to-use APIs
for working offline.

00:43:46.501 --> 00:43:48.501
And we've demonstrated that
using App cache,

00:43:48.501 --> 00:43:51.667
GWT linkers,
and local storage support.

00:43:51.667 --> 00:43:53.501
So with these all in hand,
I hope that, uh,

00:43:53.501 --> 00:43:55.834
you can actually now go back
and look at your web app code

00:43:55.834 --> 00:43:57.501
and say, "This is great."

00:43:57.501 --> 00:43:59.501
I've got, you know,
30,000 lines of code,

00:43:59.501 --> 00:44:01.400
and there's a good chance
that I can go

00:44:01.400 --> 00:44:03.067
reuse 20,000 of them
or 25,000

00:44:03.067 --> 00:44:04.734
or however many it may be

00:44:04.734 --> 00:44:06.567
and easily get yourself
a mobile web app

00:44:06.567 --> 00:44:08.400
that actually runs
and can work offline

00:44:08.400 --> 00:44:10.734
and can work and have
a great user experience.

00:44:10.734 --> 00:44:12.567
So thanks.

00:44:12.567 --> 00:44:15.400
And so, uh, all of the code
that I mentioned

00:44:15.400 --> 00:44:18.400
is available now, um,
on our main code site.

00:44:18.400 --> 00:44:20.067
So you can just go download

00:44:20.067 --> 00:44:21.901
the 2.4 beta version
of our SDK,

00:44:21.901 --> 00:44:24.067
and you'll see this application
as well as the linker.

00:44:24.067 --> 00:44:26.567
And then other sessions that you
might want to check out.

00:44:26.567 --> 00:44:28.400
So the page speed guys
that helped me out

00:44:28.400 --> 00:44:30.901
with the graphs for what it
looks like on a mobile device,

00:44:30.901 --> 00:44:33.067
um--they gave a talk yesterday.

00:44:33.067 --> 00:44:35.067
So go--be sure to go back
and check out the YouTube link

00:44:35.067 --> 00:44:37.067
that we'll post
on our main site.

00:44:37.067 --> 00:44:38.901
And then, uh,
there's some great sessions

00:44:38.901 --> 00:44:40.400
that are happening today.

00:44:40.400 --> 00:44:42.067
So you have "Mobile Web App--

00:44:42.067 --> 00:44:43.901
Mobile Web Development:
From Zero to Hero."

00:44:43.901 --> 00:44:45.734
That's given by some
of the Chrome guys.

00:44:45.734 --> 00:44:47.434
That's at 12:30 today.

00:44:47.434 --> 00:44:49.400
Uh, and then a fantastic--and I
actually saw this rehearsed--

00:44:49.400 --> 00:44:51.067
A fantastic, uh, debate

00:44:51.067 --> 00:44:53.734
between the Chrome
and the Android guys

00:44:53.734 --> 00:44:55.400
called "HTML5 versus Android:

00:44:55.400 --> 00:44:57.234
Apps for Mobile
Web App Development."

00:44:57.234 --> 00:44:59.067
There's actually a fight
at the end.

00:44:59.067 --> 00:45:01.067
No, I'm just kidding. [laughs]
[laughter]

00:45:01.067 --> 00:45:03.634
Ramsdale: So, uh, that's it.
Thanks for joining.

00:45:03.634 --> 00:45:07.067
And I've got now around
ten minutes to take Q&amp;A.

00:45:07.067 --> 00:45:10.000
[applause]

00:45:12.467 --> 00:45:15.133
man: What about--is it working?
Ramsdale: Yep.

00:45:15.133 --> 00:45:17.300
man: What about
hardware acceleration--

00:45:17.300 --> 00:45:20.334
hardware acceleration
with GWT?

00:45:20.334 --> 00:45:23.300
And does GWT work with canvas,

00:45:23.300 --> 00:45:25.968
with HTML5 canvas?

00:45:25.968 --> 00:45:28.968
Ramsdale: Uh, yes. So GWT
does work with HTML5 canvas.

00:45:28.968 --> 00:45:31.300
It was one of the first APIs
that we, uh,

00:45:31.300 --> 00:45:32.968
that we started supporting.

00:45:32.968 --> 00:45:35.801
So the list is canvas,
audio and video,

00:45:35.801 --> 00:45:39.467
local storage, and now
the beginnings of App Cache.

00:45:39.467 --> 00:45:41.634
And then the first--
the first part of your question

00:45:41.634 --> 00:45:43.801
was, Does it work
with hardware acceleration?

00:45:43.801 --> 00:45:46.300
Like, so are you talking about,
Do we have APIs for WebGL?

00:45:46.300 --> 00:45:48.133
man: Yes, that's right.
Ramsdale: Uh, not yet.

00:45:48.133 --> 00:45:50.133
We've, uh, there's some
game development going on

00:45:50.133 --> 00:45:53.167
in some talks today,
so I would suggest, like,

00:45:53.167 --> 00:45:55.801
the "Kickass Game Programming
with, uh"--

00:45:55.801 --> 00:45:57.300
excuse me--"with GWT"--

00:45:57.300 --> 00:45:59.300
later on today--
that you should go check out,

00:45:59.300 --> 00:46:01.200
and they're starting
to talk about that.

00:46:01.200 --> 00:46:03.200
man: Okay, just one last--
uh, how do I write

00:46:03.200 --> 00:46:06.200
JavaScript code on the Java--
on the GWT--

00:46:06.200 --> 00:46:09.868
for example,
uh, JQuery and those?

00:46:09.868 --> 00:46:11.701
Ramsdale: Well,
if you're looking for--

00:46:11.701 --> 00:46:13.367
if you're interested in JQuery,

00:46:13.367 --> 00:46:15.200
I would suggest you look
at GwtQuery.

00:46:15.200 --> 00:46:16.868
It's kind of, uh, it's the--

00:46:16.868 --> 00:46:18.701
it's the parallel effort
in the GWT world.

00:46:18.701 --> 00:46:20.534
And then if you just want
to bump down

00:46:20.534 --> 00:46:22.033
and have handwritten JavaScript,

00:46:22.033 --> 00:46:24.033
I suggest you go back and look
at our--our main code site

00:46:24.033 --> 00:46:27.734
or just use our search engine
for looking up, uh, JSNI.

00:46:27.734 --> 00:46:29.534
So that's JavaScript
Native Interface,

00:46:29.534 --> 00:46:31.534
and it'll show you how to jump
from Java

00:46:31.534 --> 00:46:33.367
into native JavaScript.

00:46:33.367 --> 00:46:35.534
man: Okay, thank you.
Ramsdale: Yep.

00:46:35.534 --> 00:46:38.367
man: Yeah, I have a question
on, uh, scrolling.

00:46:38.367 --> 00:46:40.033
Could you talk a little bit

00:46:40.033 --> 00:46:42.033
about how we can handle
scrolling easily,

00:46:42.033 --> 00:46:44.200
uh, and detach--
and handling detached events?

00:46:44.200 --> 00:46:47.200
We have a system that we built
using GWT.

00:46:47.200 --> 00:46:49.868
And, uh, when you try
to use it on, uh,

00:46:49.868 --> 00:46:51.534
on an iPad, you know,

00:46:51.534 --> 00:46:53.534
it--it kind of was pretty
difficult to implement that.

00:46:53.534 --> 00:46:55.367
It had to detect
detached events,

00:46:55.367 --> 00:46:57.200
and the scrolling
was pretty bad.

00:46:57.200 --> 00:46:59.367
So--so is there any way--
like, can we just say,

00:46:59.367 --> 00:47:01.234
[speaking indistinctly]

00:47:01.234 --> 00:47:03.267
and then magically have it,
uh, scroll with a finger--

00:47:03.267 --> 00:47:04.767
a single finger?

00:47:04.767 --> 00:47:06.434
Ramsdale: Were you
using the, uh,

00:47:06.434 --> 00:47:08.100
so there's a new panel

00:47:08.100 --> 00:47:09.934
called, uh, touch panel
that implements that.

00:47:09.934 --> 00:47:11.767
Were you using the touch panel
to do that?

00:47:11.767 --> 00:47:13.934
I mean, was it recently?

00:47:13.934 --> 00:47:16.767
man: Uh, no, we didn't--
we did not use the touch panel.

00:47:16.767 --> 00:47:18.934
Ramsdale: Okay, so, um--

00:47:18.934 --> 00:47:21.100
and--and so what I was
showing you here

00:47:21.100 --> 00:47:24.100
was based on a panel
called touch panel

00:47:24.100 --> 00:47:27.100
that's part of the 2.4 beta SDK.

00:47:27.100 --> 00:47:29.434
Um, and while there still is
a tad bit--

00:47:29.434 --> 00:47:30.934
I'll be honest with you--

00:47:30.934 --> 00:47:32.934
There's still a tad bit
of flickering on the tablet.

00:47:32.934 --> 00:47:35.601
On the, uh, mobile device,
it's very, very clean.

00:47:35.601 --> 00:47:38.434
So I-I'd suggest trying it out
on--on an iPad,

00:47:38.434 --> 00:47:40.934
'cause I think that you'll see
some--some better performance.

00:47:40.934 --> 00:47:42.934
man: Okay, thanks.
Ramsdale: Yep.

00:47:42.934 --> 00:47:45.767
man: Um, I've got
a couple questions.

00:47:45.767 --> 00:47:48.601
But I guess, um, first,
is there just a good way

00:47:48.601 --> 00:47:51.601
to test GWT code
in a global browser?

00:47:51.601 --> 00:47:54.267
'Cause obviously, you can't
do development mode in there,

00:47:54.267 --> 00:47:57.934
and so the constant recompile
is sometimes annoying.

00:47:57.934 --> 00:48:00.434
Um, and then my other question
is, if I use--

00:48:00.434 --> 00:48:03.501
I mean, I've tried taking
some of the MVP design projects

00:48:03.501 --> 00:48:06.667
that we have using--
and they use GIN a lot.

00:48:06.667 --> 00:48:09.000
And the problem is

00:48:09.000 --> 00:48:11.000
sometimes
the deferred binding--

00:48:11.000 --> 00:48:14.000
or the--the configuration
that you would put

00:48:14.000 --> 00:48:16.834
in your module XML, uh,

00:48:16.834 --> 00:48:20.334
it's hard to say
if the form factor is tablet,

00:48:20.334 --> 00:48:23.334
then do a generator

00:48:23.334 --> 00:48:24.834
for this GIN thing.

00:48:24.834 --> 00:48:27.501
Do the--so generate
the tablet Ginjector

00:48:27.501 --> 00:48:31.334
or the desktop Ginjector
or the mobile Ginjector.

00:48:31.334 --> 00:48:33.000
I mean, so some of the--

00:48:33.000 --> 00:48:34.834
it seems like there's
a couple of--

00:48:34.834 --> 00:48:37.501
and GIN actually, I recall,
has an extend--

00:48:37.501 --> 00:48:39.334
you can extend
the configuration

00:48:39.334 --> 00:48:41.667
and introduce modules through--

00:48:41.667 --> 00:48:43.667
through the module XML,
as well,

00:48:43.667 --> 00:48:47.501
but it also doesn't always
like that

00:48:47.501 --> 00:48:50.834
of saying if this is a thing,
then extend this

00:48:50.834 --> 00:48:53.667
and add this special module--

00:48:53.667 --> 00:48:56.167
uh, desktop module
or mobile module, um...

00:48:56.167 --> 00:48:58.667
Ramsdale: So is your--
is your general question,

00:48:58.667 --> 00:49:01.400
How do you use deferred bindings
with GWT--with GIN?

00:49:01.400 --> 00:49:03.400
man: [clears throat]
Ramsdale: Easily?

00:49:03.400 --> 00:49:05.234
man: Yeah, sure.
Ramsdale: Yeah.

00:49:05.234 --> 00:49:07.067
man: [laughs]
Ramsdale: Um, so I'm--

00:49:07.067 --> 00:49:08.734
I'm not the expert on GIN.

00:49:08.734 --> 00:49:10.567
Um, I think there's one
in the audience

00:49:10.567 --> 00:49:12.400
that I can defer to
a little later.

00:49:12.400 --> 00:49:14.234
But why don't you
catch us afterwards,

00:49:14.234 --> 00:49:16.067
and if not, we'll--we can
exchange some e-mails...

00:49:16.067 --> 00:49:17.901
man: Okay.
Ramsdale: To get an answer

00:49:17.901 --> 00:49:19.400
on if it's possible

00:49:19.400 --> 00:49:21.400
or if it actually is
a very hairy route to go down.

00:49:21.400 --> 00:49:23.234
man: Okay.
Ramsdale: Yep, thanks.

00:49:23.234 --> 00:49:26.067
man: Hey, um, I haven't
used App Cache yet,

00:49:26.067 --> 00:49:28.067
so this isn't really
from personal experience.

00:49:28.067 --> 00:49:30.067
But from what I've read,
there have been a lot

00:49:30.067 --> 00:49:31.567
of, like, refresh issues,

00:49:31.567 --> 00:49:33.901
that browsers aren't actually
looking for new manifests

00:49:33.901 --> 00:49:36.400
and aren't gonna download
new resources.

00:49:36.400 --> 00:49:38.067
Um, have you noticed that?

00:49:38.067 --> 00:49:39.901
Does GWT do anything
to address that?

00:49:39.901 --> 00:49:43.234
Ramsdale: Um, you know, I'm--
I'll speak from, uh,

00:49:43.234 --> 00:49:45.234
these are some hot bits
that--that I'm try--

00:49:45.234 --> 00:49:47.100
man: Yeah.
Ramsdale: I'm testing out,

00:49:47.100 --> 00:49:48.901
so we've only really
tried it out on, uh,

00:49:48.901 --> 00:49:50.734
Android tablets
and Android phones.

00:49:50.734 --> 00:49:52.734
So far, we haven't had
any problems.

00:49:52.734 --> 00:49:56.067
Um, and I mean,
so, uh, optimistically,

00:49:56.067 --> 00:49:58.067
I think that it's gonna
work perfectly fine

00:49:58.067 --> 00:49:59.734
on, uh, iPhones and iPads,

00:49:59.734 --> 00:50:02.067
because they're both built
from the web kit base.

00:50:02.067 --> 00:50:03.734
And where they deviate,

00:50:03.734 --> 00:50:05.734
they don't deviate
at the part of the code

00:50:05.734 --> 00:50:08.734
that actually goes and fetches
the, like, App Cache manifest.

00:50:08.734 --> 00:50:11.234
So, um, so to answer
your question,

00:50:11.234 --> 00:50:13.734
uh, we haven't seen any problems
on Android devices.

00:50:13.734 --> 00:50:15.734
And I don't believe
we're gonna find any problems

00:50:15.734 --> 00:50:19.400
on iPhone or iPad,
but I do know that, um,

00:50:19.400 --> 00:50:22.067
there's inevitably a very strong
push for HTML5

00:50:22.067 --> 00:50:25.234
amongst those two browsers
and including Firefox.

00:50:25.234 --> 00:50:29.067
So I'm--any issues that we see,
I expect to be resolved.

00:50:29.067 --> 00:50:31.400
man: Okay, good enough. Thanks.
Ramsdale: Yep.

00:50:31.400 --> 00:50:35.067
man: Hi. Uh, is Xoom
in the offline mode--

00:50:35.067 --> 00:50:38.400
your application was read-only?
Like, you cannot add tasks?

00:50:38.400 --> 00:50:42.067
Ramsdale: Right.
man: So I was, uh, thinking

00:50:42.067 --> 00:50:44.234
if there's, uh,
any support in the works

00:50:44.234 --> 00:50:47.067
or any ideas about, uh,
you know, synching,

00:50:47.067 --> 00:50:49.067
um, any modifications
to the data?

00:50:49.067 --> 00:50:52.567
Ramsdale: Uh, so we've talked
extensively about this,

00:50:52.567 --> 00:50:55.734
and, um, in fact, we just
talked about it yesterday.

00:50:55.734 --> 00:50:58.400
We, uh, it would be
a great engineering problem

00:50:58.400 --> 00:50:59.901
to go solve.

00:50:59.901 --> 00:51:01.968
We have various ways
that we could do it,

00:51:01.968 --> 00:51:04.467
but, um, myself and Ray,
who's sitting right here,

00:51:04.467 --> 00:51:07.133
have--we've basically landed on
that right now, at least,

00:51:07.133 --> 00:51:09.801
it's best to leave that up
to the application developer,

00:51:09.801 --> 00:51:11.634
although it might be
a little bit tricky.

00:51:11.634 --> 00:51:14.968
Um, and--and--because
how you want to queue

00:51:14.968 --> 00:51:17.634
and how you want to be
aggressive with fetching

00:51:17.634 --> 00:51:19.634
or not aggressive--
you want a read-through cache

00:51:19.634 --> 00:51:21.467
or write-through cache,
you know, whatever--

00:51:21.467 --> 00:51:23.801
that--that's kind of left up
to the application developer.

00:51:23.801 --> 00:51:25.801
The one thing that I didn't show
that would be interesting

00:51:25.801 --> 00:51:28.167
is the ability to take--
like, I omitted

00:51:28.167 --> 00:51:30.968
the de--the serialization
and deserialization code there.

00:51:30.968 --> 00:51:33.634
But if you're using things like,
uh, RequestFactory,

00:51:33.634 --> 00:51:35.801
it becomes very easy to just--
there--all that code

00:51:35.801 --> 00:51:37.634
is already existing there.

00:51:37.634 --> 00:51:40.968
And so we could make it
easier for you via APIs

00:51:40.968 --> 00:51:42.968
to say, Here's my--
here's my object graph.

00:51:42.968 --> 00:51:45.300
Can you just give me back
a string, right?

00:51:45.300 --> 00:51:47.133
And we could give it
back to you,

00:51:47.133 --> 00:51:48.968
and then you could store
that away, right,

00:51:48.968 --> 00:51:50.634
and go from there.

00:51:50.634 --> 00:51:52.801
So the answer is that we're
not gonna tackle, um,

00:51:52.801 --> 00:51:55.467
queuing of reads and writes
for you yet,

00:51:55.467 --> 00:51:57.467
but we can provide APIs
that make it easier.

00:51:57.467 --> 00:51:59.467
That's--that's on
the short-term road map.

00:51:59.467 --> 00:52:02.200
man: Are there any examples
out there?

00:52:02.200 --> 00:52:03.701
Ramsdale: For...

00:52:03.701 --> 00:52:06.033
man: For this kind of operation?

00:52:06.033 --> 00:52:08.033
Ramsdale: Um, I-I--

00:52:08.033 --> 00:52:10.033
none that come off
from the top of mind.

00:52:10.033 --> 00:52:12.367
I-I would say just do
a quick search for--

00:52:12.367 --> 00:52:14.367
for it out there
and see what you can find.

00:52:14.367 --> 00:52:16.033
man: Okay.
Ramsdale: Or, you know,

00:52:16.033 --> 00:52:18.033
there's 26,000 members
on the GWT user group now.

00:52:18.033 --> 00:52:20.534
I would try maybe to ping them
and see if there's, uh,

00:52:20.534 --> 00:52:22.701
anybody that's given it a shot.
man: Okay, thank you.

00:52:22.701 --> 00:52:24.367
Ramsdale: Yeah.

00:52:24.367 --> 00:52:27.701
man: Hi. I think you
partially answered this,

00:52:27.701 --> 00:52:29.367
uh, on the previous question,

00:52:29.367 --> 00:52:31.367
but, um, with offline support--

00:52:31.367 --> 00:52:34.734
so I've tried without GWT,
just a plain HTML page--

00:52:34.734 --> 00:52:37.033
I've tried to do that, uh,
with the iPhone browser.

00:52:37.033 --> 00:52:39.367
And I got error messages
similar to the one

00:52:39.367 --> 00:52:41.367
that you just, uh, ran into,

00:52:41.367 --> 00:52:43.701
where it--it presented
an error message.

00:52:43.701 --> 00:52:45.701
And then I think
it continued to work

00:52:45.701 --> 00:52:47.868
after I dismissed the error,
but that almost feels

00:52:47.868 --> 00:52:50.200
like a showstopper to me
in terms of, um,

00:52:50.200 --> 00:52:53.701
deploying something
that I expect end users,

00:52:53.701 --> 00:52:56.033
you know, nontechnical users
to use.

00:52:56.033 --> 00:52:58.701
Uh, what else can you--
do you know about that error?

00:52:58.701 --> 00:53:01.434
It sounds like you haven't tried
it on iPhone yet, I guess.

00:53:01.434 --> 00:53:03.934
Uh, I don't know. Do you
know anything else about--

00:53:03.934 --> 00:53:06.601
about what's causing that,
or when it...

00:53:06.601 --> 00:53:08.434
Ramsdale: Uh, no,
at this time, I don't.

00:53:08.434 --> 00:53:10.267
man: Okay.
Ramsdale: I mean, we'll continue

00:53:10.267 --> 00:53:12.100
to look into it, because if I--
if I pop it up--

00:53:12.100 --> 00:53:13.934
well, if you want to see it,
I... [clears throat]

00:53:13.934 --> 00:53:15.767
there's another part of the demo
where you would show

00:53:15.767 --> 00:53:17.667
actually loading a page,
and the page--

00:53:17.667 --> 00:53:19.334
like, so for google.com,

00:53:19.334 --> 00:53:21.167
that does not have
App Cache in it--

00:53:21.167 --> 00:53:23.000
it literally would not
load up at all.

00:53:23.000 --> 00:53:25.834
So yes, I think that it's, uh,
I-I think it's a defect,

00:53:25.834 --> 00:53:28.667
and that's a browser one,
I believe.

00:53:28.667 --> 00:53:31.334
But, um, you know, we'll have
to work through that,

00:53:31.334 --> 00:53:33.834
and--and make it better
and get rid of that--

00:53:33.834 --> 00:53:35.667
that pop-up that you saw.

00:53:35.667 --> 00:53:37.667
And if there's something that we
can do in our--in the way

00:53:37.667 --> 00:53:39.667
that we're constructing
our App Cache manifest file

00:53:39.667 --> 00:53:42.834
to get around it, yeah,
we'll keep digging and find out.

00:53:42.834 --> 00:53:44.834
And then obviously, we'll make
that part of the linker

00:53:44.834 --> 00:53:47.501
that we're exposing.
man: Yep, okay. Thanks.

00:53:47.501 --> 00:53:51.000
man: Yeah, hi.
Um, I was wondering,

00:53:51.000 --> 00:53:53.000
uh, you talked about
resource bundling

00:53:53.000 --> 00:53:54.501
and form factor.

00:53:54.501 --> 00:53:58.167
Um, is there a plan
to support, uh,

00:53:58.167 --> 00:54:00.167
different network latencies

00:54:00.167 --> 00:54:02.400
or network congestion issues,

00:54:02.400 --> 00:54:04.901
so that I can have one UI

00:54:04.901 --> 00:54:07.234
for a low latency

00:54:07.234 --> 00:54:09.734
and another UI
for high latency

00:54:09.734 --> 00:54:11.234
in my applications?

00:54:11.234 --> 00:54:13.067
Ramsdale: Yeah, are you talking
about low latency

00:54:13.067 --> 00:54:14.601
versus high latency?

00:54:14.601 --> 00:54:16.567
man: Yeah, so that I can have
low-resolution images

00:54:16.567 --> 00:54:19.901
and, uh, a sort of
leaner application

00:54:19.901 --> 00:54:21.901
for hard cases.

00:54:21.901 --> 00:54:23.901
Ramsdale: Well, this might be
a little bit crazy,

00:54:23.901 --> 00:54:25.734
but, um, I-I don't think
that you would--

00:54:25.734 --> 00:54:27.734
you couldn't attack that from
a deferred binding standpoint,

00:54:27.734 --> 00:54:29.567
at least not off the top
of my head.

00:54:29.567 --> 00:54:31.567
Um, what you'd end up doing is
something a little more custom

00:54:31.567 --> 00:54:33.567
where you would, you know,
you would be doing--

00:54:33.567 --> 00:54:35.400
you could do timing
of your RPCs.

00:54:35.400 --> 00:54:37.067
And if you happen to notice

00:54:37.067 --> 00:54:38.567
that it's taking
over some threshold...

00:54:38.567 --> 00:54:40.067
man: Mm-hmm.
Ramsdale: You can kick

00:54:40.067 --> 00:54:41.567
your application
into a different mode.

00:54:41.567 --> 00:54:43.567
man: So I can hack it, but it's
not supported and built-in?

00:54:43.567 --> 00:54:45.567
Ramsdale: Well,
it's not that it's not--

00:54:45.567 --> 00:54:47.100
it's just not supported via
deferred binding.

00:54:47.100 --> 00:54:49.067
Like, deferred binding
is something that we make,

00:54:49.067 --> 00:54:51.067
uh, like, at the point
of request, right?

00:54:51.067 --> 00:54:53.067
We're deciding, um,

00:54:53.067 --> 00:54:55.901
we--we decide which--
which permutation to offer up.

00:54:55.901 --> 00:54:57.734
man: Mm-hmm.
Ramsdale: You could do a--

00:54:57.734 --> 00:54:59.567
you could potentially do
a custom one,

00:54:59.567 --> 00:55:01.467
where you do a--you could do
a check beforehand,

00:55:01.467 --> 00:55:03.300
um, and then you get
some timing.

00:55:03.300 --> 00:55:05.133
And then if it's based
on a threshold,

00:55:05.133 --> 00:55:06.801
you could pass
that property along

00:55:06.801 --> 00:55:08.467
and do your own custom
deferred binding.

00:55:08.467 --> 00:55:10.300
But at that point in time,
I think that you're using the--

00:55:10.300 --> 00:55:12.300
I think you're actually using
the feature incorrectly.

00:55:12.300 --> 00:55:14.300
And it might actually be
more code for you to write,

00:55:14.300 --> 00:55:16.200
rather than if you just picked
up on the fact that,

00:55:16.200 --> 00:55:17.801
Okay, my application
just switched

00:55:17.801 --> 00:55:19.801
into a very,
very high-latency mode.

00:55:19.801 --> 00:55:21.801
So I'm gonna tell--
I'm gonna--I'm gonna have a way

00:55:21.801 --> 00:55:23.634
to--the way I forked
for different devices.

00:55:23.634 --> 00:55:25.133
man: Mm-hmm.

00:55:25.133 --> 00:55:26.968
Ramsdale: You could do that
customly and--

00:55:26.968 --> 00:55:28.968
Actually, the way that I forked
for the orientation change,

00:55:28.968 --> 00:55:30.968
I didn't actually do that
via deferred binding.

00:55:30.968 --> 00:55:32.968
I did that
as a run-time check, right?

00:55:32.968 --> 00:55:34.968
And you could do the same thing,
and you could say,

00:55:34.968 --> 00:55:36.968
Okay, the--all those UiBinder
template files, forget those,

00:55:36.968 --> 00:55:39.634
because those are
very graphic-intensive.

00:55:39.634 --> 00:55:42.968
Let's go with my very, you know,
vanilla page over here

00:55:42.968 --> 00:55:44.968
until I--and then you have
in the background

00:55:44.968 --> 00:55:46.968
a thread that keeps waking up.
man: Mm-hmm.

00:55:46.968 --> 00:55:48.968
Ramsdale: I call it a thread,
but you just have

00:55:48.968 --> 00:55:50.801
some async code that's running

00:55:50.801 --> 00:55:52.634
that keeps checking
for the timing of RPCs,

00:55:52.634 --> 00:55:54.667
and when you see that you're
in a high-latency--

00:55:54.667 --> 00:55:56.467
a low-latency area,
do the switch again.

00:55:56.467 --> 00:55:57.968
man: I see.

00:55:57.968 --> 00:55:59.634
Ramsdale: That would be
my suggestion.

00:55:59.634 --> 00:56:01.701
man: Okay, thank you.
Ramsdale: Yep.

00:56:01.701 --> 00:56:03.534
woman: Go ahead.
man: Hey.

00:56:03.534 --> 00:56:06.701
I've got a question
for the offline manifest.

00:56:06.701 --> 00:56:09.367
I was wondering if it was
optimized for each browser.

00:56:09.367 --> 00:56:12.367
So--so if I'm in IE,
do I download

00:56:12.367 --> 00:56:14.033
only the five
that I need for IE?

00:56:14.033 --> 00:56:18.000
And if I am Firefox
or on iPhone...

00:56:18.000 --> 00:56:20.000
Ramsdale: [sighs]
That's a good point.

00:56:20.000 --> 00:56:21.801
We'll have to go back
and look at that.

00:56:21.801 --> 00:56:23.734
The--the...

00:56:26.501 --> 00:56:28.667
Ramsdale: There is something
that's a bit of a deficiency

00:56:28.667 --> 00:56:30.501
with App Cache
when you use it this way.

00:56:30.501 --> 00:56:32.334
Let me explain it,
and hear me out

00:56:32.334 --> 00:56:34.000
on the entire portion of it.

00:56:34.000 --> 00:56:36.000
With App Cache, um, right now,
at least the way we have it,

00:56:36.000 --> 00:56:38.000
and the way I demo'ed it,
you're pulling down

00:56:38.000 --> 00:56:41.000
all the permutations,
which is not optimal, right?

00:56:41.000 --> 00:56:43.334
But what you get in return--

00:56:43.334 --> 00:56:45.667
so it actually becomes
like an installable experience.

00:56:45.667 --> 00:56:47.834
Imagine that if you're--
you're downloading

00:56:47.834 --> 00:56:49.667
an application from
the Android Marketplace,

00:56:49.667 --> 00:56:51.501
you're kind of fine
with the fact

00:56:51.501 --> 00:56:53.334
that it takes five seconds
or ten seconds,

00:56:53.334 --> 00:56:55.334
or even if it takes a minute
to download, right?

00:56:55.334 --> 00:56:57.334
'Cause it's downloading
everything you need.

00:56:57.334 --> 00:56:59.334
So when you switch
to the App Cache mode,

00:56:59.334 --> 00:57:01.100
at least the way I demo'ed it,

00:57:01.100 --> 00:57:02.901
you're doing
the exact same thing.

00:57:02.901 --> 00:57:04.734
You're saying
I want this application,

00:57:04.734 --> 00:57:06.567
and you get all the files
associated with it.

00:57:06.567 --> 00:57:08.400
So right now,
it's not totally optimal,

00:57:08.400 --> 00:57:10.234
because you get all
those other permutations.

00:57:10.234 --> 00:57:12.234
We can work on that.
Um, but then once you have them,

00:57:12.234 --> 00:57:14.567
Right? You've "installed"
the application,

00:57:14.567 --> 00:57:17.567
and now it just runs from disk,
so it's much faster.

00:57:17.567 --> 00:57:19.400
So, uh, no,
not right off the bat,

00:57:19.400 --> 00:57:21.234
but I know that we're
hooking into the--

00:57:21.234 --> 00:57:23.400
the compilation system,
and so there might be a way

00:57:23.400 --> 00:57:25.901
to actually split out
and say, Okay, compiler,

00:57:25.901 --> 00:57:28.234
you're asking me
for the App Cache manifest,

00:57:28.234 --> 00:57:30.734
and I'm--I'm--you're asking
under these pretenses,

00:57:30.734 --> 00:57:34.267
which is Firefox or IE
or Chrome.

00:57:34.267 --> 00:57:36.934
man: Thank you.
Ramsdale: Yep.

00:57:39.501 --> 00:57:42.000
Ramsdale: All right, cool.
Thanks.

