WEBVTT
Kind: captions
Language: en

00:00:02.159 --> 00:00:03.950
JOANNA SMITH: Learning
performance patterns

00:00:03.950 --> 00:00:06.116
from the internet can make
it difficult to know what

00:00:06.116 --> 00:00:08.070
content to bother listening to.

00:00:08.070 --> 00:00:11.831
So here's the thought,
listen to your data.

00:00:11.831 --> 00:00:12.830
My name is Joanna Smith.

00:00:12.830 --> 00:00:15.580
And one of the most important
things that you can learn

00:00:15.580 --> 00:00:18.549
is how to trust your tools
over someone else's rules.

00:00:18.549 --> 00:00:20.590
Because talking about
performance on the internet

00:00:20.590 --> 00:00:22.829
can often sound prescriptive.

00:00:22.829 --> 00:00:25.370
Like, someone will run off and
write a huge benchmark that'll

00:00:25.370 --> 00:00:28.190
measure this and that, and
this too, and oh yeah that.

00:00:28.190 --> 00:00:30.540
But all of these findings
get boiled down to something

00:00:30.540 --> 00:00:32.530
like, we switch
from relative layout

00:00:32.530 --> 00:00:34.840
to linear layout
for performance.

00:00:34.840 --> 00:00:36.930
And then people hear this,
and they internalize it

00:00:36.930 --> 00:00:38.210
into a hard rule.

00:00:38.210 --> 00:00:40.870
If I see a relative layout,
I should use a linear one

00:00:40.870 --> 00:00:42.300
instead.

00:00:42.300 --> 00:00:44.620
But blindly following
prescriptive performance advice

00:00:44.620 --> 00:00:47.550
from bald guys on the
internet can be dangerous.

00:00:47.550 --> 00:00:51.010
The fact is, any performance
advice may or may not

00:00:51.010 --> 00:00:53.140
apply to your
particular situation.

00:00:53.140 --> 00:00:54.825
For example, your
core users could

00:00:54.825 --> 00:00:56.450
be on a different
device tier than what

00:00:56.450 --> 00:00:57.630
the tests were run on.

00:00:57.630 --> 00:00:59.400
Or the performance
problem might be

00:00:59.400 --> 00:01:01.540
fixed in a later
release of the platform.

00:01:01.540 --> 00:01:03.230
Or it might be a
performance problem,

00:01:03.230 --> 00:01:05.970
but in your application
it's just not an issue.

00:01:05.970 --> 00:01:10.190
This is why we like to
say, tools, not rules!

00:01:10.190 --> 00:01:12.690
That is, before you run off
and implement some performance

00:01:12.690 --> 00:01:14.890
patterns that you found
on the internet, make sure

00:01:14.890 --> 00:01:18.090
that your tools are confirming
it's even a problem.

00:01:18.090 --> 00:01:20.640
This is as simple as
running the performance

00:01:20.640 --> 00:01:22.480
tools on your
application, and then

00:01:22.480 --> 00:01:25.100
focusing your energy on
fixing the bottlenecks that

00:01:25.100 --> 00:01:27.140
eat away at your frame rate.

00:01:27.140 --> 00:01:29.430
For example, iterators
may be the slowest way

00:01:29.430 --> 00:01:30.726
to traverse a list.

00:01:30.726 --> 00:01:32.350
But if your tools
show that this is not

00:01:32.350 --> 00:01:34.350
a perf problem for
your frame rate,

00:01:34.350 --> 00:01:37.970
then there's no use changing
your existing iterator code.

00:01:37.970 --> 00:01:41.010
However, it's always
a good idea to know

00:01:41.010 --> 00:01:44.000
what could be a problem so
that when do run a tool,

00:01:44.000 --> 00:01:47.370
you know what all of
that fancy data means.

00:01:47.370 --> 00:01:50.690
Now, once you've made a routine
of relying on your tools

00:01:50.690 --> 00:01:52.990
to validate what perf
problems to focus on,

00:01:52.990 --> 00:01:54.680
the next big step
is figuring out

00:01:54.680 --> 00:01:57.560
how to do this on
a regular basis.

00:01:57.560 --> 00:02:00.160
Most people agree that
it is a smart idea

00:02:00.160 --> 00:02:02.730
to run tons of unit tests
before checking in code,

00:02:02.730 --> 00:02:05.040
or submitting new
builds to users.

00:02:05.040 --> 00:02:07.560
These tests help to make
sure that your code is

00:02:07.560 --> 00:02:09.180
generally stable.

00:02:09.180 --> 00:02:12.040
So finding ways to create
unit tests for performance

00:02:12.040 --> 00:02:13.680
will help you
identify areas where

00:02:13.680 --> 00:02:17.200
your code may have dropped in
terms of user-facing quality.

00:02:17.200 --> 00:02:18.720
To help you automate
this process,

00:02:18.720 --> 00:02:22.050
there are some great tools, like
MonkeyRunner or the Espresso

00:02:22.050 --> 00:02:23.070
Library.

00:02:23.070 --> 00:02:26.170
Combine these with a
process fueled by data, not

00:02:26.170 --> 00:02:28.610
prescriptions, and you can
identify the perf problems

00:02:28.610 --> 00:02:29.635
in your app.

00:02:29.635 --> 00:02:31.260
Now, if you want to
fix those problems,

00:02:31.260 --> 00:02:33.150
check out the rest of the
Android Performance Patterns

00:02:33.150 --> 00:02:33.980
Content.

00:02:33.980 --> 00:02:36.110
Or take a look at our G+
community for questions

00:02:36.110 --> 00:02:37.400
and advice.

00:02:37.400 --> 00:02:38.914
But keep calm,
profile your code,

00:02:38.914 --> 00:02:40.330
and always remember,
perf matters.

00:02:40.330 --> 00:02:42.780
[MUSIC PLAYING]

