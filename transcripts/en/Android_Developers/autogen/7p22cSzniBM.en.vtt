WEBVTT
Kind: captions
Language: en

00:00:02.659 --> 00:00:05.059
and read jetpack is a set of libraries

00:00:05.059 --> 00:00:05.069
and read jetpack is a set of libraries
 

00:00:05.069 --> 00:00:06.710
and read jetpack is a set of libraries
and guidance for modern Android

00:00:06.710 --> 00:00:06.720
and guidance for modern Android
 

00:00:06.720 --> 00:00:08.270
and guidance for modern Android
development now there are four

00:00:08.270 --> 00:00:08.280
development now there are four
 

00:00:08.280 --> 00:00:10.490
development now there are four
categories that make up jetpack this

00:00:10.490 --> 00:00:10.500
categories that make up jetpack this
 

00:00:10.500 --> 00:00:13.490
categories that make up jetpack this
video is all about architecture here are

00:00:13.490 --> 00:00:13.500
video is all about architecture here are
 

00:00:13.500 --> 00:00:15.169
video is all about architecture here are
the architecture component libraries

00:00:15.169 --> 00:00:15.179
the architecture component libraries
 

00:00:15.179 --> 00:00:17.230
the architecture component libraries
these libraries work great on their own

00:00:17.230 --> 00:00:17.240
these libraries work great on their own
 

00:00:17.240 --> 00:00:19.580
these libraries work great on their own
but they're also built with each other

00:00:19.580 --> 00:00:19.590
but they're also built with each other
 

00:00:19.590 --> 00:00:21.380
but they're also built with each other
in mind and can fit together like puzzle

00:00:21.380 --> 00:00:21.390
in mind and can fit together like puzzle
 

00:00:21.390 --> 00:00:24.019
in mind and can fit together like puzzle
pieces the documentation contains a

00:00:24.019 --> 00:00:24.029
pieces the documentation contains a
 

00:00:24.029 --> 00:00:25.910
pieces the documentation contains a
guide to app architecture which shows

00:00:25.910 --> 00:00:25.920
guide to app architecture which shows
 

00:00:25.920 --> 00:00:27.589
guide to app architecture which shows
one way that these puzzle pieces can

00:00:27.589 --> 00:00:27.599
one way that these puzzle pieces can
 

00:00:27.599 --> 00:00:29.210
one way that these puzzle pieces can
combined to create a testable and

00:00:29.210 --> 00:00:29.220
combined to create a testable and
 

00:00:29.220 --> 00:00:31.370
combined to create a testable and
maintainable app this architecture

00:00:31.370 --> 00:00:31.380
maintainable app this architecture
 

00:00:31.380 --> 00:00:32.870
maintainable app this architecture
revolves around the following principles

00:00:32.870 --> 00:00:32.880
revolves around the following principles
 

00:00:32.880 --> 00:00:35.120
revolves around the following principles
the separation of concerns loose

00:00:35.120 --> 00:00:35.130
the separation of concerns loose
 

00:00:35.130 --> 00:00:37.040
the separation of concerns loose
coupling the observer pattern and

00:00:37.040 --> 00:00:37.050
coupling the observer pattern and
 

00:00:37.050 --> 00:00:40.040
coupling the observer pattern and
inversion of control okay let's go ahead

00:00:40.040 --> 00:00:40.050
inversion of control okay let's go ahead
 

00:00:40.050 --> 00:00:42.799
inversion of control okay let's go ahead
and start at the bottom room is a sequel

00:00:42.799 --> 00:00:42.809
and start at the bottom room is a sequel
 

00:00:42.809 --> 00:00:45.170
and start at the bottom room is a sequel
light object mapping library it gives us

00:00:45.170 --> 00:00:45.180
light object mapping library it gives us
 

00:00:45.180 --> 00:00:47.180
light object mapping library it gives us
annotations to generate boilerplate code

00:00:47.180 --> 00:00:47.190
annotations to generate boilerplate code
 

00:00:47.190 --> 00:00:49.279
annotations to generate boilerplate code
for you you declare your sequel light

00:00:49.279 --> 00:00:49.289
for you you declare your sequel light
 

00:00:49.289 --> 00:00:51.709
for you you declare your sequel light
tables using entity objects entity

00:00:51.709 --> 00:00:51.719
tables using entity objects entity
 

00:00:51.719 --> 00:00:53.479
tables using entity objects entity
objects are just simple objects with a

00:00:53.479 --> 00:00:53.489
objects are just simple objects with a
 

00:00:53.489 --> 00:00:55.819
objects are just simple objects with a
few annotations for example I could take

00:00:55.819 --> 00:00:55.829
few annotations for example I could take
 

00:00:55.829 --> 00:00:58.760
few annotations for example I could take
this class representing a user and after

00:00:58.760 --> 00:00:58.770
this class representing a user and after
 

00:00:58.770 --> 00:01:00.979
this class representing a user and after
add a few annotations it becomes a

00:01:00.979 --> 00:01:00.989
add a few annotations it becomes a
 

00:01:00.989 --> 00:01:02.630
add a few annotations it becomes a
representation for this sequel like

00:01:02.630 --> 00:01:02.640
representation for this sequel like
 

00:01:02.640 --> 00:01:04.670
representation for this sequel like
table schema when defining the

00:01:04.670 --> 00:01:04.680
table schema when defining the
 

00:01:04.680 --> 00:01:06.289
table schema when defining the
operations you perform audio database

00:01:06.289 --> 00:01:06.299
operations you perform audio database
 

00:01:06.299 --> 00:01:08.539
operations you perform audio database
you essentially write annotated sequel

00:01:08.539 --> 00:01:08.549
you essentially write annotated sequel
 

00:01:08.549 --> 00:01:10.760
you essentially write annotated sequel
statements this is where rooms object

00:01:10.760 --> 00:01:10.770
statements this is where rooms object
 

00:01:10.770 --> 00:01:12.260
statements this is where rooms object
mapping capabilities come in

00:01:12.260 --> 00:01:12.270
mapping capabilities come in
 

00:01:12.270 --> 00:01:14.780
mapping capabilities come in
you can put entity objects directly into

00:01:14.780 --> 00:01:14.790
you can put entity objects directly into
 

00:01:14.790 --> 00:01:16.850
you can put entity objects directly into
your room database or have your database

00:01:16.850 --> 00:01:16.860
your room database or have your database
 

00:01:16.860 --> 00:01:18.950
your room database or have your database
return entities no conversion or

00:01:18.950 --> 00:01:18.960
return entities no conversion or
 

00:01:18.960 --> 00:01:21.200
return entities no conversion or
intermediates were needed compile type

00:01:21.200 --> 00:01:21.210
intermediates were needed compile type
 

00:01:21.210 --> 00:01:23.539
intermediates were needed compile type
checking is also included so if you mess

00:01:23.539 --> 00:01:23.549
checking is also included so if you mess
 

00:01:23.549 --> 00:01:25.460
checking is also included so if you mess
up your sequel like queries rule lets

00:01:25.460 --> 00:01:25.470
up your sequel like queries rule lets
 

00:01:25.470 --> 00:01:28.310
up your sequel like queries rule lets
you know right away room also supports

00:01:28.310 --> 00:01:28.320
you know right away room also supports
 

00:01:28.320 --> 00:01:30.679
you know right away room also supports
observable queries including arcs travel

00:01:30.679 --> 00:01:30.689
observable queries including arcs travel
 

00:01:30.689 --> 00:01:33.109
observable queries including arcs travel
flow bowls lists optionals and guava

00:01:33.109 --> 00:01:33.119
flow bowls lists optionals and guava
 

00:01:33.119 --> 00:01:35.719
flow bowls lists optionals and guava
classes migration between schemas and

00:01:35.719 --> 00:01:35.729
classes migration between schemas and
 

00:01:35.729 --> 00:01:38.690
classes migration between schemas and
testing another fundamental part of any

00:01:38.690 --> 00:01:38.700
testing another fundamental part of any
 

00:01:38.700 --> 00:01:40.640
testing another fundamental part of any
data layer is threading and background

00:01:40.640 --> 00:01:40.650
data layer is threading and background
 

00:01:40.650 --> 00:01:42.980
data layer is threading and background
work to make sense of background work in

00:01:42.980 --> 00:01:42.990
work to make sense of background work in
 

00:01:42.990 --> 00:01:44.810
work to make sense of background work in
modern android development we've created

00:01:44.810 --> 00:01:44.820
modern android development we've created
 

00:01:44.820 --> 00:01:47.030
modern android development we've created
the guide to background processing which

00:01:47.030 --> 00:01:47.040
the guide to background processing which
 

00:01:47.040 --> 00:01:49.730
the guide to background processing which
includes this handy table you'll notice

00:01:49.730 --> 00:01:49.740
includes this handy table you'll notice
 

00:01:49.740 --> 00:01:51.649
includes this handy table you'll notice
that there's this new library here work

00:01:51.649 --> 00:01:51.659
that there's this new library here work
 

00:01:51.659 --> 00:01:53.840
that there's this new library here work
manager the work manager library

00:01:53.840 --> 00:01:53.850
manager the work manager library
 

00:01:53.850 --> 00:01:56.300
manager the work manager library
provides a unified API for deferrable

00:01:56.300 --> 00:01:56.310
provides a unified API for deferrable
 

00:01:56.310 --> 00:01:58.370
provides a unified API for deferrable
one-off or recurring background tasks

00:01:58.370 --> 00:01:58.380
one-off or recurring background tasks
 

00:01:58.380 --> 00:02:01.010
one-off or recurring background tasks
that need guaranteed execution the

00:02:01.010 --> 00:02:01.020
that need guaranteed execution the
 

00:02:01.020 --> 00:02:02.749
that need guaranteed execution the
background tasks are work request

00:02:02.749 --> 00:02:02.759
background tasks are work request
 

00:02:02.759 --> 00:02:05.389
background tasks are work request
objects with work manager you can build

00:02:05.389 --> 00:02:05.399
objects with work manager you can build
 

00:02:05.399 --> 00:02:07.490
objects with work manager you can build
a complex processing and upload flow

00:02:07.490 --> 00:02:07.500
a complex processing and upload flow
 

00:02:07.500 --> 00:02:10.190
a complex processing and upload flow
like this using chains of work requests

00:02:10.190 --> 00:02:10.200
like this using chains of work requests
 

00:02:10.200 --> 00:02:12.710
like this using chains of work requests
as part of the chain you can define the

00:02:12.710 --> 00:02:12.720
as part of the chain you can define the
 

00:02:12.720 --> 00:02:13.730
as part of the chain you can define the
output of one

00:02:13.730 --> 00:02:13.740
output of one
 

00:02:13.740 --> 00:02:15.800
output of one
our requests as the input of another

00:02:15.800 --> 00:02:15.810
our requests as the input of another
 

00:02:15.810 --> 00:02:18.650
our requests as the input of another
worker crust you can also set conditions

00:02:18.650 --> 00:02:18.660
worker crust you can also set conditions
 

00:02:18.660 --> 00:02:21.290
worker crust you can also set conditions
on when the work request should run work

00:02:21.290 --> 00:02:21.300
on when the work request should run work
 

00:02:21.300 --> 00:02:23.240
on when the work request should run work
manager then performs the work requests

00:02:23.240 --> 00:02:23.250
manager then performs the work requests
 

00:02:23.250 --> 00:02:25.130
manager then performs the work requests
in the order that you specify it while

00:02:25.130 --> 00:02:25.140
in the order that you specify it while
 

00:02:25.140 --> 00:02:27.260
in the order that you specify it while
also taking care of compatibility issues

00:02:27.260 --> 00:02:27.270
also taking care of compatibility issues
 

00:02:27.270 --> 00:02:29.030
also taking care of compatibility issues
and best practices for battery and

00:02:29.030 --> 00:02:29.040
and best practices for battery and
 

00:02:29.040 --> 00:02:31.160
and best practices for battery and
system health as part of guaranteed

00:02:31.160 --> 00:02:31.170
system health as part of guaranteed
 

00:02:31.170 --> 00:02:33.650
system health as part of guaranteed
execution work manager handles continue

00:02:33.650 --> 00:02:33.660
execution work manager handles continue
 

00:02:33.660 --> 00:02:36.230
execution work manager handles continue
your work across device restarts and if

00:02:36.230 --> 00:02:36.240
your work across device restarts and if
 

00:02:36.240 --> 00:02:38.960
your work across device restarts and if
your process is for stopped finally work

00:02:38.960 --> 00:02:38.970
your process is for stopped finally work
 

00:02:38.970 --> 00:02:40.670
your process is for stopped finally work
manager can return the state of the work

00:02:40.670 --> 00:02:40.680
manager can return the state of the work
 

00:02:40.680 --> 00:02:42.530
manager can return the state of the work
request so that you can represent this

00:02:42.530 --> 00:02:42.540
request so that you can represent this
 

00:02:42.540 --> 00:02:45.500
request so that you can represent this
state in your UI okay let's go ahead and

00:02:45.500 --> 00:02:45.510
state in your UI okay let's go ahead and
 

00:02:45.510 --> 00:02:47.180
state in your UI okay let's go ahead and
take a look at the lifecycle libraries

00:02:47.180 --> 00:02:47.190
take a look at the lifecycle libraries
 

00:02:47.190 --> 00:02:49.430
take a look at the lifecycle libraries
the classes in this library help with

00:02:49.430 --> 00:02:49.440
the classes in this library help with
 

00:02:49.440 --> 00:02:50.680
the classes in this library help with
Android lifecycle management

00:02:50.680 --> 00:02:50.690
Android lifecycle management
 

00:02:50.690 --> 00:02:52.910
Android lifecycle management
specifically with avoiding memory leaks

00:02:52.910 --> 00:02:52.920
specifically with avoiding memory leaks
 

00:02:52.920 --> 00:02:55.640
specifically with avoiding memory leaks
when updating your apps UI here is one

00:02:55.640 --> 00:02:55.650
when updating your apps UI here is one
 

00:02:55.650 --> 00:02:56.210
when updating your apps UI here is one
example

00:02:56.210 --> 00:02:56.220
example
 

00:02:56.220 --> 00:02:58.490
example
have you ever rotated advice and had the

00:02:58.490 --> 00:02:58.500
have you ever rotated advice and had the
 

00:02:58.500 --> 00:03:01.370
have you ever rotated advice and had the
app crash or lose data well adding a

00:03:01.370 --> 00:03:01.380
app crash or lose data well adding a
 

00:03:01.380 --> 00:03:03.710
app crash or lose data well adding a
view model can help fix this unlike

00:03:03.710 --> 00:03:03.720
view model can help fix this unlike
 

00:03:03.720 --> 00:03:05.720
view model can help fix this unlike
activity objects a view model object

00:03:05.720 --> 00:03:05.730
activity objects a view model object
 

00:03:05.730 --> 00:03:06.950
activity objects a view model object
isn't destroyed when the device

00:03:06.950 --> 00:03:06.960
isn't destroyed when the device
 

00:03:06.960 --> 00:03:08.930
isn't destroyed when the device
configuration changes such as when the

00:03:08.930 --> 00:03:08.940
configuration changes such as when the
 

00:03:08.940 --> 00:03:11.510
configuration changes such as when the
screen is rotated this property of view

00:03:11.510 --> 00:03:11.520
screen is rotated this property of view
 

00:03:11.520 --> 00:03:13.880
screen is rotated this property of view
model makes it a good stable place to

00:03:13.880 --> 00:03:13.890
model makes it a good stable place to
 

00:03:13.890 --> 00:03:16.370
model makes it a good stable place to
put all of your UI data the view model

00:03:16.370 --> 00:03:16.380
put all of your UI data the view model
 

00:03:16.380 --> 00:03:18.170
put all of your UI data the view model
usually contains another lifecycle

00:03:18.170 --> 00:03:18.180
usually contains another lifecycle
 

00:03:18.180 --> 00:03:20.960
usually contains another lifecycle
object live data live data is built for

00:03:20.960 --> 00:03:20.970
object live data live data is built for
 

00:03:20.970 --> 00:03:23.090
object live data live data is built for
easy communication between the UI and

00:03:23.090 --> 00:03:23.100
easy communication between the UI and
 

00:03:23.100 --> 00:03:24.890
easy communication between the UI and
deeper layers of your apps architecture

00:03:24.890 --> 00:03:24.900
deeper layers of your apps architecture
 

00:03:24.900 --> 00:03:27.530
deeper layers of your apps architecture
life data is an observable data holder

00:03:27.530 --> 00:03:27.540
life data is an observable data holder
 

00:03:27.540 --> 00:03:29.060
life data is an observable data holder
for data that is meant to be showed on

00:03:29.060 --> 00:03:29.070
for data that is meant to be showed on
 

00:03:29.070 --> 00:03:31.520
for data that is meant to be showed on
screen basically it'll wrap around an

00:03:31.520 --> 00:03:31.530
screen basically it'll wrap around an
 

00:03:31.530 --> 00:03:33.080
screen basically it'll wrap around an
object like this user object over here

00:03:33.080 --> 00:03:33.090
object like this user object over here
 

00:03:33.090 --> 00:03:35.510
object like this user object over here
and allow the UI to automatically update

00:03:35.510 --> 00:03:35.520
and allow the UI to automatically update
 

00:03:35.520 --> 00:03:37.370
and allow the UI to automatically update
whatever properties of the user object

00:03:37.370 --> 00:03:37.380
whatever properties of the user object
 

00:03:37.380 --> 00:03:39.950
whatever properties of the user object
change live data is also life cycle

00:03:39.950 --> 00:03:39.960
change live data is also life cycle
 

00:03:39.960 --> 00:03:42.650
change live data is also life cycle
aware this means a live data object only

00:03:42.650 --> 00:03:42.660
aware this means a live data object only
 

00:03:42.660 --> 00:03:44.840
aware this means a live data object only
tells the UI to update if the UI is

00:03:44.840 --> 00:03:44.850
tells the UI to update if the UI is
 

00:03:44.850 --> 00:03:46.810
tells the UI to update if the UI is
lifecycle state is in the correct State

00:03:46.810 --> 00:03:46.820
lifecycle state is in the correct State
 

00:03:46.820 --> 00:03:49.460
lifecycle state is in the correct State
for example if your activity is not

00:03:49.460 --> 00:03:49.470
for example if your activity is not
 

00:03:49.470 --> 00:03:51.650
for example if your activity is not
unscreened then the live data will not

00:03:51.650 --> 00:03:51.660
unscreened then the live data will not
 

00:03:51.660 --> 00:03:54.140
unscreened then the live data will not
trigger updates also if the activity

00:03:54.140 --> 00:03:54.150
trigger updates also if the activity
 

00:03:54.150 --> 00:03:55.790
trigger updates also if the activity
gets destroyed then this observation

00:03:55.790 --> 00:03:55.800
gets destroyed then this observation
 

00:03:55.800 --> 00:03:57.230
gets destroyed then this observation
connection is cleaned up for you

00:03:57.230 --> 00:03:57.240
connection is cleaned up for you
 

00:03:57.240 --> 00:03:59.690
connection is cleaned up for you
automatically so as your data changes

00:03:59.690 --> 00:03:59.700
automatically so as your data changes
 

00:03:59.700 --> 00:04:01.790
automatically so as your data changes
you never accidentally trigger an

00:04:01.790 --> 00:04:01.800
you never accidentally trigger an
 

00:04:01.800 --> 00:04:03.710
you never accidentally trigger an
activity or fragment that is off-screen

00:04:03.710 --> 00:04:03.720
activity or fragment that is off-screen
 

00:04:03.720 --> 00:04:06.290
activity or fragment that is off-screen
or destroyed to redraw itself the

00:04:06.290 --> 00:04:06.300
or destroyed to redraw itself the
 

00:04:06.300 --> 00:04:07.670
or destroyed to redraw itself the
lifecycle libraries include other

00:04:07.670 --> 00:04:07.680
lifecycle libraries include other
 

00:04:07.680 --> 00:04:10.460
lifecycle libraries include other
powerful features for example live data

00:04:10.460 --> 00:04:10.470
powerful features for example live data
 

00:04:10.470 --> 00:04:12.830
powerful features for example live data
supports transformations as mentioned

00:04:12.830 --> 00:04:12.840
supports transformations as mentioned
 

00:04:12.840 --> 00:04:15.050
supports transformations as mentioned
before room can return live data objects

00:04:15.050 --> 00:04:15.060
before room can return live data objects
 

00:04:15.060 --> 00:04:17.330
before room can return live data objects
which allows your UI to observe objects

00:04:17.330 --> 00:04:17.340
which allows your UI to observe objects
 

00:04:17.340 --> 00:04:19.910
which allows your UI to observe objects
in the database view models and live

00:04:19.910 --> 00:04:19.920
in the database view models and live
 

00:04:19.920 --> 00:04:22.520
in the database view models and live
data also now support data binding you

00:04:22.520 --> 00:04:22.530
data also now support data binding you
 

00:04:22.530 --> 00:04:24.290
data also now support data binding you
can bind these classes to an element in

00:04:24.290 --> 00:04:24.300
can bind these classes to an element in
 

00:04:24.300 --> 00:04:26.570
can bind these classes to an element in
your apps XML layout definition that

00:04:26.570 --> 00:04:26.580
your apps XML layout definition that
 

00:04:26.580 --> 00:04:27.379
your apps XML layout definition that
lets you get rid

00:04:27.379 --> 00:04:27.389
lets you get rid
 

00:04:27.389 --> 00:04:29.929
lets you get rid
all of this boilerplate code the

00:04:29.929 --> 00:04:29.939
all of this boilerplate code the
 

00:04:29.939 --> 00:04:31.939
all of this boilerplate code the
lifecycles library also contains classes

00:04:31.939 --> 00:04:31.949
lifecycles library also contains classes
 

00:04:31.949 --> 00:04:33.950
lifecycles library also contains classes
at interfaces for quitting and observing

00:04:33.950 --> 00:04:33.960
at interfaces for quitting and observing
 

00:04:33.960 --> 00:04:37.010
at interfaces for quitting and observing
UI lifecycle states the paging library

00:04:37.010 --> 00:04:37.020
UI lifecycle states the paging library
 

00:04:37.020 --> 00:04:38.959
UI lifecycle states the paging library
integrates directly with rube and live

00:04:38.959 --> 00:04:38.969
integrates directly with rube and live
 

00:04:38.969 --> 00:04:41.149
integrates directly with rube and live
data now there's a common situation

00:04:41.149 --> 00:04:41.159
data now there's a common situation
 

00:04:41.159 --> 00:04:42.589
data now there's a common situation
where you have a lot of data that you

00:04:42.589 --> 00:04:42.599
where you have a lot of data that you
 

00:04:42.599 --> 00:04:44.839
where you have a lot of data that you
want to load in small manageable chunks

00:04:44.839 --> 00:04:44.849
want to load in small manageable chunks
 

00:04:44.849 --> 00:04:47.540
want to load in small manageable chunks
the paging library is built exactly for

00:04:47.540 --> 00:04:47.550
the paging library is built exactly for
 

00:04:47.550 --> 00:04:49.760
the paging library is built exactly for
this use case and it avoids tricky

00:04:49.760 --> 00:04:49.770
this use case and it avoids tricky
 

00:04:49.770 --> 00:04:51.730
this use case and it avoids tricky
sequel like cursor performance issues

00:04:51.730 --> 00:04:51.740
sequel like cursor performance issues
 

00:04:51.740 --> 00:04:53.839
sequel like cursor performance issues
the library offers the following

00:04:53.839 --> 00:04:53.849
the library offers the following
 

00:04:53.849 --> 00:04:55.939
the library offers the following
features it allows you to define the

00:04:55.939 --> 00:04:55.949
features it allows you to define the
 

00:04:55.949 --> 00:04:57.679
features it allows you to define the
data sources that you're going to use be

00:04:57.679 --> 00:04:57.689
data sources that you're going to use be
 

00:04:57.689 --> 00:04:59.600
data sources that you're going to use be
it data from the network a database or

00:04:59.600 --> 00:04:59.610
it data from the network a database or
 

00:04:59.610 --> 00:05:01.519
it data from the network a database or
another data source of your choice it

00:05:01.519 --> 00:05:01.529
another data source of your choice it
 

00:05:01.529 --> 00:05:03.439
another data source of your choice it
works out of the box with room and

00:05:03.439 --> 00:05:03.449
works out of the box with room and
 

00:05:03.449 --> 00:05:06.019
works out of the box with room and
recycler view it supports lists of any

00:05:06.019 --> 00:05:06.029
recycler view it supports lists of any
 

00:05:06.029 --> 00:05:08.209
recycler view it supports lists of any
size including lists of infinite length

00:05:08.209 --> 00:05:08.219
size including lists of infinite length
 

00:05:08.219 --> 00:05:11.209
size including lists of infinite length
it leverages live data to update your UI

00:05:11.209 --> 00:05:11.219
it leverages live data to update your UI
 

00:05:11.219 --> 00:05:13.730
it leverages live data to update your UI
as more data is loaded and it has

00:05:13.730 --> 00:05:13.740
as more data is loaded and it has
 

00:05:13.740 --> 00:05:16.429
as more data is loaded and it has
support for arcs Java finally there's

00:05:16.429 --> 00:05:16.439
support for arcs Java finally there's
 

00:05:16.439 --> 00:05:18.769
support for arcs Java finally there's
the navigation library the navigation

00:05:18.769 --> 00:05:18.779
the navigation library the navigation
 

00:05:18.779 --> 00:05:20.390
the navigation library the navigation
library and tooling simplify

00:05:20.390 --> 00:05:20.400
library and tooling simplify
 

00:05:20.400 --> 00:05:22.820
library and tooling simplify
implementation of complex but common

00:05:22.820 --> 00:05:22.830
implementation of complex but common
 

00:05:22.830 --> 00:05:24.709
implementation of complex but common
navigation requirements and help you

00:05:24.709 --> 00:05:24.719
navigation requirements and help you
 

00:05:24.719 --> 00:05:27.529
navigation requirements and help you
visualize your apps navigation graph now

00:05:27.529 --> 00:05:27.539
visualize your apps navigation graph now
 

00:05:27.539 --> 00:05:29.749
visualize your apps navigation graph now
for trivial apps navigation might seem

00:05:29.749 --> 00:05:29.759
for trivial apps navigation might seem
 

00:05:29.759 --> 00:05:31.430
for trivial apps navigation might seem
simple but when you add things like

00:05:31.430 --> 00:05:31.440
simple but when you add things like
 

00:05:31.440 --> 00:05:33.559
simple but when you add things like
fragment transactions the need to

00:05:33.559 --> 00:05:33.569
fragment transactions the need to
 

00:05:33.569 --> 00:05:35.480
fragment transactions the need to
implement proper back and up behavior

00:05:35.480 --> 00:05:35.490
implement proper back and up behavior
 

00:05:35.490 --> 00:05:38.480
implement proper back and up behavior
support deep linking at a bottom bar and

00:05:38.480 --> 00:05:38.490
support deep linking at a bottom bar and
 

00:05:38.490 --> 00:05:40.730
support deep linking at a bottom bar and
include animations between screens let's

00:05:40.730 --> 00:05:40.740
include animations between screens let's
 

00:05:40.740 --> 00:05:41.869
include animations between screens let's
just say that things get a little bit

00:05:41.869 --> 00:05:41.879
just say that things get a little bit
 

00:05:41.879 --> 00:05:44.300
just say that things get a little bit
messy the navigation library simplifies

00:05:44.300 --> 00:05:44.310
messy the navigation library simplifies
 

00:05:44.310 --> 00:05:46.339
messy the navigation library simplifies
all of this now the basic building

00:05:46.339 --> 00:05:46.349
all of this now the basic building
 

00:05:46.349 --> 00:05:47.869
all of this now the basic building
blocks for navigation are called

00:05:47.869 --> 00:05:47.879
blocks for navigation are called
 

00:05:47.879 --> 00:05:50.719
blocks for navigation are called
destinations destinations are specific

00:05:50.719 --> 00:05:50.729
destinations destinations are specific
 

00:05:50.729 --> 00:05:52.519
destinations destinations are specific
screens you can go to there's

00:05:52.519 --> 00:05:52.529
screens you can go to there's
 

00:05:52.529 --> 00:05:54.379
screens you can go to there's
out-of-the-box support for fragments and

00:05:54.379 --> 00:05:54.389
out-of-the-box support for fragments and
 

00:05:54.389 --> 00:05:56.450
out-of-the-box support for fragments and
activities as destinations but you can

00:05:56.450 --> 00:05:56.460
activities as destinations but you can
 

00:05:56.460 --> 00:05:58.550
activities as destinations but you can
also make your own the new guide to

00:05:58.550 --> 00:05:58.560
also make your own the new guide to
 

00:05:58.560 --> 00:06:00.230
also make your own the new guide to
navigation encourages you to have

00:06:00.230 --> 00:06:00.240
navigation encourages you to have
 

00:06:00.240 --> 00:06:01.999
navigation encourages you to have
activities as entry points for your app

00:06:01.999 --> 00:06:02.009
activities as entry points for your app
 

00:06:02.009 --> 00:06:04.820
activities as entry points for your app
they also contain global navigation such

00:06:04.820 --> 00:06:04.830
they also contain global navigation such
 

00:06:04.830 --> 00:06:06.950
they also contain global navigation such
as this bottom death now in comparison

00:06:06.950 --> 00:06:06.960
as this bottom death now in comparison
 

00:06:06.960 --> 00:06:08.779
as this bottom death now in comparison
fragments will be the actual destination

00:06:08.779 --> 00:06:08.789
fragments will be the actual destination
 

00:06:08.789 --> 00:06:11.839
fragments will be the actual destination
specific layouts this UI structure

00:06:11.839 --> 00:06:11.849
specific layouts this UI structure
 

00:06:11.849 --> 00:06:13.640
specific layouts this UI structure
allows you to share an activity view

00:06:13.640 --> 00:06:13.650
allows you to share an activity view
 

00:06:13.650 --> 00:06:15.079
allows you to share an activity view
model between all of the fragments

00:06:15.079 --> 00:06:15.089
model between all of the fragments
 

00:06:15.089 --> 00:06:17.899
model between all of the fragments
associated with that activity as the

00:06:17.899 --> 00:06:17.909
associated with that activity as the
 

00:06:17.909 --> 00:06:19.189
associated with that activity as the
user navigates from fragment to fragment

00:06:19.189 --> 00:06:19.199
user navigates from fragment to fragment
 

00:06:19.199 --> 00:06:21.379
user navigates from fragment to fragment
you don't need to serialize that shared

00:06:21.379 --> 00:06:21.389
you don't need to serialize that shared
 

00:06:21.389 --> 00:06:24.290
you don't need to serialize that shared
data the new navigation editor in

00:06:24.290 --> 00:06:24.300
data the new navigation editor in
 

00:06:24.300 --> 00:06:26.149
data the new navigation editor in
Android studio enables you to quickly

00:06:26.149 --> 00:06:26.159
Android studio enables you to quickly
 

00:06:26.159 --> 00:06:28.490
Android studio enables you to quickly
specify destinations and visualize your

00:06:28.490 --> 00:06:28.500
specify destinations and visualize your
 

00:06:28.500 --> 00:06:30.740
specify destinations and visualize your
apps navigation architecture the

00:06:30.740 --> 00:06:30.750
apps navigation architecture the
 

00:06:30.750 --> 00:06:32.329
apps navigation architecture the
connections here show the possible

00:06:32.329 --> 00:06:32.339
connections here show the possible
 

00:06:32.339 --> 00:06:33.740
connections here show the possible
navigation paths between each

00:06:33.740 --> 00:06:33.750
navigation paths between each
 

00:06:33.750 --> 00:06:36.680
navigation paths between each
destination this generates XML which you

00:06:36.680 --> 00:06:36.690
destination this generates XML which you
 

00:06:36.690 --> 00:06:39.620
destination this generates XML which you
can edit by hand the library uses this

00:06:39.620 --> 00:06:39.630
can edit by hand the library uses this
 

00:06:39.630 --> 00:06:41.120
can edit by hand the library uses this
new navigation graph resore

00:06:41.120 --> 00:06:41.130
new navigation graph resore
 

00:06:41.130 --> 00:06:43.550
new navigation graph resore
and a new nav controller object to move

00:06:43.550 --> 00:06:43.560
and a new nav controller object to move
 

00:06:43.560 --> 00:06:46.070
and a new nav controller object to move
your user through your app now this is

00:06:46.070 --> 00:06:46.080
your user through your app now this is
 

00:06:46.080 --> 00:06:47.450
your user through your app now this is
just scratching the surface of the

00:06:47.450 --> 00:06:47.460
just scratching the surface of the
 

00:06:47.460 --> 00:06:49.070
just scratching the surface of the
proverbial iceberg that is the

00:06:49.070 --> 00:06:49.080
proverbial iceberg that is the
 

00:06:49.080 --> 00:06:50.890
proverbial iceberg that is the
architecture components and jetpack

00:06:50.890 --> 00:06:50.900
architecture components and jetpack
 

00:06:50.900 --> 00:06:53.570
architecture components and jetpack
hopefully some or maybe all of these

00:06:53.570 --> 00:06:53.580
hopefully some or maybe all of these
 

00:06:53.580 --> 00:06:55.490
hopefully some or maybe all of these
libraries piqued your interest to learn

00:06:55.490 --> 00:06:55.500
libraries piqued your interest to learn
 

00:06:55.500 --> 00:06:55.910
libraries piqued your interest to learn
more

00:06:55.910 --> 00:06:55.920
more
 

00:06:55.920 --> 00:06:57.350
more
we've got dev bytes for all of the

00:06:57.350 --> 00:06:57.360
we've got dev bytes for all of the
 

00:06:57.360 --> 00:06:59.900
we've got dev bytes for all of the
stable components we also have code labs

00:06:59.900 --> 00:06:59.910
stable components we also have code labs
 

00:06:59.910 --> 00:07:01.490
stable components we also have code labs
for each component and of course

00:07:01.490 --> 00:07:01.500
for each component and of course
 

00:07:01.500 --> 00:07:04.340
for each component and of course
thorough documentation now if you find

00:07:04.340 --> 00:07:04.350
thorough documentation now if you find
 

00:07:04.350 --> 00:07:06.200
thorough documentation now if you find
yourself left with questions we've also

00:07:06.200 --> 00:07:06.210
yourself left with questions we've also
 

00:07:06.210 --> 00:07:08.270
yourself left with questions we've also
got Stack Overflow tags and an issue

00:07:08.270 --> 00:07:08.280
got Stack Overflow tags and an issue
 

00:07:08.280 --> 00:07:10.280
got Stack Overflow tags and an issue
tracker or you know you can yell at me

00:07:10.280 --> 00:07:10.290
tracker or you know you can yell at me
 

00:07:10.290 --> 00:07:12.050
tracker or you know you can yell at me
on Twitter actually don't yell at me in

00:07:12.050 --> 00:07:12.060
on Twitter actually don't yell at me in
 

00:07:12.060 --> 00:07:13.940
on Twitter actually don't yell at me in
Twitter happy coding

00:07:13.940 --> 00:07:13.950
Twitter happy coding
 

00:07:13.950 --> 00:07:16.290
Twitter happy coding
[Applause]

00:07:16.290 --> 00:07:16.300
[Applause]
 

00:07:16.300 --> 00:07:18.360
[Applause]
you

