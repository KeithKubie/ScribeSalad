WEBVTT
Kind: captions
Language: en

00:00:00.360 --> 00:00:02.443
SEAN MCQUILLAN: Retaining
users on mobile presents

00:00:02.443 --> 00:00:03.780
a unique challenge.

00:00:03.780 --> 00:00:05.970
Users enter their password
once and then stay

00:00:05.970 --> 00:00:08.652
logged in for years until
they get a new phone.

00:00:08.652 --> 00:00:10.860
To help your users out when
they upgrade their phone,

00:00:10.860 --> 00:00:12.810
the Account Transfer
API lets you

00:00:12.810 --> 00:00:16.290
copy credentials, such as
access tokens or passwords,

00:00:16.290 --> 00:00:17.640
from their old phone.

00:00:17.640 --> 00:00:19.170
No need for an internet server.

00:00:19.170 --> 00:00:22.200
The credentials move over an
encrypted bluetooth connection

00:00:22.200 --> 00:00:23.850
or a phone-to-phone cable.

00:00:23.850 --> 00:00:26.010
Accounts are transferred
between two phones

00:00:26.010 --> 00:00:27.690
with different requirements.

00:00:27.690 --> 00:00:30.660
The old phone must be running
a recent version of Google Play

00:00:30.660 --> 00:00:33.240
services on "Ice Cream
Sandwich" or higher.

00:00:33.240 --> 00:00:36.180
While the new one must be
running "Oreo" or higher.

00:00:36.180 --> 00:00:38.070
The Account Transfer
API requires

00:00:38.070 --> 00:00:39.750
your app provide
an authenticator

00:00:39.750 --> 00:00:41.220
for account manager.

00:00:41.220 --> 00:00:43.620
This will show your accounts
on the main Android settings

00:00:43.620 --> 00:00:44.160
screen.

00:00:44.160 --> 00:00:48.300
And it can help you securely
store account credentials.

00:00:48.300 --> 00:00:50.490
So how do you support
Account Transfer?

00:00:50.490 --> 00:00:52.500
The user starts an
Account Transfer when

00:00:52.500 --> 00:00:53.940
they set up their new phone.

00:00:53.940 --> 00:00:55.821
Your app will receive
three broadcasts.

00:00:55.821 --> 00:00:57.570
And you should create
a foreground service

00:00:57.570 --> 00:01:00.510
on both devices in response
to these broadcasts.

00:01:00.510 --> 00:01:03.600
The old phone gets an expert
data available broadcast.

00:01:03.600 --> 00:01:05.340
Then, from your
foreground service,

00:01:05.340 --> 00:01:08.310
you send account
details via Send Data.

00:01:08.310 --> 00:01:10.290
The API will send
any binary data.

00:01:10.290 --> 00:01:13.200
Though, we suggest creating
a versioned protocol,

00:01:13.200 --> 00:01:15.870
such as a "version" JSON
Dictionary or a protocol

00:01:15.870 --> 00:01:17.040
buffer.

00:01:17.040 --> 00:01:19.530
That way, older versions
will be able to communicate

00:01:19.530 --> 00:01:21.390
with your latest version.

00:01:21.390 --> 00:01:24.600
The new phone sees an import
data available broadcasts.

00:01:24.600 --> 00:01:27.360
You retrieve the account
details via Retrieve Data

00:01:27.360 --> 00:01:29.100
in your foreground service.

00:01:29.100 --> 00:01:30.990
Once you've parsed
the account details,

00:01:30.990 --> 00:01:33.780
call AccountManager.a
ddAccountExplicitly.

00:01:33.780 --> 00:01:35.179
to save the account.

00:01:35.179 --> 00:01:37.470
If your app does not ship
installed on their new phone,

00:01:37.470 --> 00:01:40.050
don't worry, you can
still get the data.

00:01:40.050 --> 00:01:41.500
It will be stored
on the new phone

00:01:41.500 --> 00:01:44.370
until Google Play
re-installs your app.

00:01:44.370 --> 00:01:47.550
On first launch, you can then
call Retrieve Data to fetch

00:01:47.550 --> 00:01:49.230
the account credentials.

00:01:49.230 --> 00:01:51.480
The API can show a
user challenge, though,

00:01:51.480 --> 00:01:53.599
this is not recommended.

00:01:53.599 --> 00:01:55.140
During an Account
Transfer, your user

00:01:55.140 --> 00:01:57.090
is excited to use
their new device

00:01:57.090 --> 00:01:59.120
and is not using your app.

00:01:59.120 --> 00:02:02.580
Instead, if you require more
verification of the phone,

00:02:02.580 --> 00:02:06.120
for example, two-factor auth,
we recommend prompting them

00:02:06.120 --> 00:02:07.800
on the next app launch.

00:02:07.800 --> 00:02:08.699
That's it.

00:02:08.699 --> 00:02:10.919
After the transfer
completes, the user's account

00:02:10.919 --> 00:02:12.030
will be ready.

00:02:12.030 --> 00:02:14.970
For the entire API, follow
the links in the description

00:02:14.970 --> 00:02:17.400
and look at the sample, which
has a working implementation

00:02:17.400 --> 00:02:19.444
to try on your phone.

00:02:19.444 --> 00:02:20.860
For other ways to
increase metrics

00:02:20.860 --> 00:02:23.110
for both new and
existing accounts,

00:02:23.110 --> 00:02:24.880
check out our earlier
video covering

00:02:24.880 --> 00:02:28.450
Google sign-in and Smart
Lock to optimize your logins.

00:02:28.450 --> 00:02:29.540
Thanks for watching.

00:02:29.540 --> 00:02:31.740
See you again next time.

