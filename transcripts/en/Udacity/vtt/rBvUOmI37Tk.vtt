WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.000
With this office hours we had a lot of questions about MySQL and PostgreSQL

00:00:06.000 --> 00:00:12.000
and why you prefer Postgres to MySQL, why other people MySQL a lot of the time.

00:00:12.000 --> 00:00:14.000
If you could answer some of those, it'd be great.

00:00:14.000 --> 00:00:19.000
Yes, yes. We'll start with the first question, which is why I prefer Postgres over MySQL.

00:00:19.000 --> 00:00:21.000
This is a two-part answer.

00:00:21.000 --> 00:00:25.000
Back in 2005 when we started Reddit, I was basically where you are now,

00:00:25.000 --> 00:00:29.000
which is just learning how web apps work.

00:00:29.000 --> 00:00:33.000
I was trying to install all this stuff on my computer, and I was trying to install MySQL and Postgres,

00:00:33.000 --> 00:00:39.000
and MySQL wouldn't compile on my Mac and Postgres would. &gt;&gt;That's a good reason.

00:00:39.000 --> 00:00:42.000
I mean, actually to be fair, it says a lot about a project.

00:00:42.000 --> 00:00:45.000
Like if it builds on my Mac it'll probably build just about anywhere,

00:00:45.000 --> 00:00:47.000
because at the time OSX was still fairly new.

00:00:47.000 --> 00:00:50.000
That's how we started with Postgres.

00:00:50.000 --> 00:00:55.000
MySQL at the time was still very popular--far more popular than Postgres,

00:00:55.000 --> 00:00:59.000
but it had a reputation for being a little lossy with data.

00:00:59.000 --> 00:01:02.000
This may be the right word--a little inconsistent.

00:01:02.000 --> 00:01:10.000
Postgres--the documentation was better, they would sacrifice functionality over stability

00:01:10.000 --> 00:01:15.000
and consistency and adherence to kind of the SQL standard.

00:01:15.000 --> 00:01:19.000
Some queries that we did on Reddit that kind of pushed the limits of these databases

00:01:19.000 --> 00:01:24.000
ran much, much faster in Postgres than in MySQL, so I've just been loyal ever since.

00:01:24.000 --> 00:01:27.000
These days feature-for-feature they're basically the same.

00:01:27.000 --> 00:01:33.000
MySQL is not nearly so cavalier with your data

00:01:33.000 --> 00:01:35.000
and a lot of people use MySQL.

00:01:35.000 --> 00:01:37.000
At this point, whichever you prefer.

00:01:37.000 --> 00:01:40.000
Maybe go back to whichever compiles easier on your computer is

00:01:40.000 --> 00:01:43.000
a perfectly acceptable reason these days, I think.

00:01:43.000 --> 00:01:46.000
We also had some questions about other types of databases,

00:01:46.000 --> 00:01:51.000
why NoSQL databases were popular, why a lot of companies are moving to that.

00:01:51.000 --> 00:01:54.000
You mentioned that Facebook uses MySQL, I believe,

00:01:54.000 --> 00:01:57.000
and we had some questions about them using NoSQL as well.

00:01:57.000 --> 00:02:05.000
Okay, sure. NoSQL is basically a reaction to the difficulties of developing with SQL databases.

00:02:05.000 --> 00:02:09.000
One of the challenges of SQL databases is you have define your tables ahead of time.

00:02:09.000 --> 00:02:12.000
You have to know your coms are going to be. You have to know what the type are.

00:02:12.000 --> 00:02:16.000
When you're writing web software, one of the advantages of writing web software

00:02:16.000 --> 00:02:18.000
is you don't have to think everything through in advance.

00:02:18.000 --> 00:02:21.000
You can get something working. You can put it online. You can see how users react to it.

00:02:21.000 --> 00:02:26.000
You can kind of iterate from there--add new features, take features away--whatever you want to do.

00:02:26.000 --> 00:02:30.000
The challenge is when you have databases and a large amount of data,

00:02:30.000 --> 00:02:37.000
you have to sometimes add a new column or add a new index or add a bunch of new datatypes.

00:02:37.000 --> 00:02:41.000
When you have a database in production that has thousands or millions of users,

00:02:41.000 --> 00:02:44.000
this can be really painful.

00:02:44.000 --> 00:02:47.000
These NoSQL databases--generally, they try to solve that problem.

00:02:47.000 --> 00:02:51.000
Another way to describe them would be schema-less databases.

00:02:51.000 --> 00:02:53.000
The databases don't have a schema.

00:02:53.000 --> 00:02:59.000
That is they don't have a formal description of columns and datatypes, and it's neat.

00:02:59.000 --> 00:03:03.000
On Reddit, we kind of built our own kind of schema-less system on top of Postgres.

00:03:03.000 --> 00:03:05.000
We actually do the same thing again at Hipmunk.

00:03:05.000 --> 00:03:07.000
It's a nice way of working.

00:03:07.000 --> 00:03:12.000
The challenge right now with a lot of these schema-less databases is they're not very good.

00:03:12.000 --> 00:03:17.000
They're brand new technology. Databases are really hard.

00:03:17.000 --> 00:03:24.000
They have stability problems. Documentation is lacking.

00:03:24.000 --> 00:03:27.000
Not very many of them are used in the wild in production,

00:03:27.000 --> 00:03:31.000
so you don't have good support and people to lean on and that sort of thing.

00:03:31.000 --> 00:03:35.000
In my opinion it's still wise, especially when it comes to data,

00:03:35.000 --> 00:03:38.000
especially if you care about your data, to stick with something that's proven, that works,

00:03:38.000 --> 00:03:41.000
that you know how to scale.

00:03:41.000 --> 00:03:44.000
Everybody has worked with Postgres and MySQL for a long time now,

00:03:44.000 --> 00:03:46.000
so those things work very, very well.

00:03:46.000 --> 00:03:52.000
Now, as for Facebook--I don't work at Facebook, so I'm not an authority on the subject--

00:03:52.000 --> 00:03:54.000
but I know they use a lot of MySQL.

00:03:54.000 --> 00:03:57.000
They've actually made a lot of improvements to MySQL.

00:03:57.000 --> 00:04:00.000
They also wrote their own NoSQL system, called Cassandra,

00:04:00.000 --> 00:04:05.000
which my understanding--although I don't know for sure--is they don't actually use anymore.

00:04:05.000 --> 00:04:09.000
Reddit uses Cassandra, incidentally. They started using that after I left, however.

00:04:09.000 --> 00:04:13.000
I can't say with a clear conscious that I condone that decision,

00:04:13.000 --> 00:04:16.000
but apparently it's working for them in production.

00:04:16.000 --> 00:04:19.000
Your mileage may vary. Personally, I'm happy with Postgres.

00:04:19.000 --> 00:04:24.000
I know how to scale it these days, and you can get away with kind of schema-less

00:04:24.000 --> 00:04:29.000
behaviors in Postgres by just storing one column that's like a big wad of JSON, for example.

00:04:29.000 --> 00:04:33.000
That actually works really well, depending on what problems you're solving.

00:04:33.000 --> 00:04:41.000
Anyway, that's a long answer to a simple question, but that's my opinion. &gt;&gt;Great.

