WEBVTT
Kind: captions
Language: en

00:00:00.690 --> 00:00:03.810
Sometimes when we code we have a typo.

00:00:03.810 --> 00:00:07.250
Or we forget the variable name
that we defined earlier, and

00:00:07.250 --> 00:00:10.150
we just had to trace back and

00:00:10.150 --> 00:00:15.570
use the console as a clue for us to go
back and figure out what's going on.

00:00:15.570 --> 00:00:17.262
&gt;&gt; And so,
to avoid problems like these too,

00:00:17.262 --> 00:00:19.481
it's helpful to have a text
editor that works with you.

00:00:19.481 --> 00:00:24.340
So Sublime Text for instance,
comes with a tab completion by default.

00:00:24.340 --> 00:00:29.266
That tab completion will use variable
names that you've used already to help

00:00:29.266 --> 00:00:29.880
you out.

00:00:29.880 --> 00:00:34.810
So definitely using all the tools at
your disposal is very, very helpful.

00:00:34.810 --> 00:00:39.891
&gt;&gt; So, I'll show you my auto completion,
I'm adding bio, bio's my object.

00:00:39.891 --> 00:00:42.870
I hit a dot, and here you go.

00:00:42.870 --> 00:00:46.694
And bio pic, I hit tab and then done.

00:00:46.694 --> 00:00:51.354
So it's very useful and
it's worth the time and

00:00:51.354 --> 00:00:55.000
effort to learn a good text editor.

00:00:55.000 --> 00:01:00.202
It could be any text editor, but
just make sure that this text

00:01:00.202 --> 00:01:05.610
editor has these capabilities
that will allow programmers and

00:01:05.610 --> 00:01:09.907
developers to quickly and
efficiently program.

00:01:09.907 --> 00:01:15.840
Such as Sublime Text, Atom, what
other text editors do you recommend?

00:01:15.840 --> 00:01:18.514
&gt;&gt; I use Vim, so
if you're willing to learn Vim,

00:01:18.514 --> 00:01:22.530
it's a bit of a steep learning curve,
but rewarding.

00:01:22.530 --> 00:01:23.240
&gt;&gt; It is rewarding.

00:01:23.240 --> 00:01:25.550
And also, if you're old school,

00:01:25.550 --> 00:01:29.415
you could use another type of
text editor, called Emacs.

00:01:29.415 --> 00:01:32.899
[LAUGH] Right, so there's there's
a lot of great, and free,

00:01:32.899 --> 00:01:35.250
text editors out there.

00:01:35.250 --> 00:01:38.605
I just recommend, just pick one and
stick with it and

00:01:38.605 --> 00:01:43.285
learn how to use the tools
that these editors come with.

00:01:43.285 --> 00:01:47.955
&gt;&gt; Yeah, because as a programmer you're
going to be spending hours of your day,

00:01:47.955 --> 00:01:49.385
every day, using it.

00:01:49.385 --> 00:01:51.875
So it helps to actually like
the program that you're using.

00:01:53.847 --> 00:01:57.997
&gt;&gt; And you can use the w3.org
validator for CSS.

00:01:57.997 --> 00:02:02.937
But something really cool that we,
here, at Udacity found was

00:02:02.937 --> 00:02:09.616
the csslint.net,
which is very cool in detecting errors.

00:02:09.616 --> 00:02:14.510
And so, this is how the website looks,
csslint.net.

00:02:14.510 --> 00:02:18.790
And this is where you paste your code,
CSS code here.

00:02:18.790 --> 00:02:21.920
And, so you can pick and
choose which errors and

00:02:21.920 --> 00:02:23.990
warnings you want to test for a below.

00:02:23.990 --> 00:02:25.270
So I would say,

00:02:25.270 --> 00:02:30.470
you can pick everything that is there
in our Udacity style-guide rules.

00:02:30.470 --> 00:02:33.740
And you can see if they match
with one of these errors and

00:02:33.740 --> 00:02:37.930
enable only those errors and
run your code through it.

00:02:37.930 --> 00:02:41.785
So, I have a very basic sample
of CSS code right here,

00:02:41.785 --> 00:02:44.150
that I'm just going to run it through.

00:02:45.430 --> 00:02:51.310
So, I just enabled all the errors here,
just to look at how I've been coding,

00:02:51.310 --> 00:02:56.390
and what are the best practices,
and just what errors it catches.

00:02:56.390 --> 00:03:01.340
So, I'm just going to go ahead and
run the linter.

00:03:01.340 --> 00:03:05.308
So it says CSS lint found one errors and
zero warnings, so

00:03:05.308 --> 00:03:07.720
let's see what this is.

00:03:07.720 --> 00:03:13.340
It says there is a parsing error expected
RBRACE at line three column eight.

00:03:13.340 --> 00:03:20.645
So it's pointing me to right here.

00:03:20.645 --> 00:03:25.600
&gt;&gt; So it looks like you're
missing a semicolon at the end

00:03:25.600 --> 00:03:28.050
of the font family rule.

00:03:28.050 --> 00:03:31.340
&gt;&gt; My god, yes,
I am indeed missing that.

00:03:31.340 --> 00:03:36.536
Ok, so let's go back and
add a semicolon here.

00:03:36.536 --> 00:03:39.188
Yeah, these errors can be very frustrating.

00:03:39.188 --> 00:03:41.880
I never catch them in time.

00:03:41.880 --> 00:03:46.780
Okay, so now it says CSS lint found
zero errors and zero warnings.

00:03:46.780 --> 00:03:50.495
So yeah, here,
looks like my code is clean now and

00:03:50.495 --> 00:03:53.955
I also checked it through CSS Lint,
done now.

00:03:53.955 --> 00:03:59.410
When you have a huge block of JSON
data just sitting inside one file and

00:03:59.410 --> 00:04:04.302
you are passing that data to display
render it in order

00:04:04.302 --> 00:04:06.960
paste it to our web page and so on.

00:04:06.960 --> 00:04:11.010
It can happen that yeah,
it might have a lot of errors in it,

00:04:11.010 --> 00:04:14.250
or you might be missing a comma or
a curly brace.

00:04:14.250 --> 00:04:18.000
And then curly brace,
which always happens to me.

00:04:18.000 --> 00:04:21.040
We actually have something
called JSONLint.

00:04:22.410 --> 00:04:26.599
JSONLint helps you
validate your JSON data.

00:04:26.599 --> 00:04:34.360
So I'm going to share my screen with
you, and take you to jsonlint.com.

00:04:34.360 --> 00:04:39.189
And so here,
on jsonlint.com you can see that I've

00:04:39.189 --> 00:04:42.607
pasted a very small bit of JSON data.

00:04:42.607 --> 00:04:47.482
This is basically my bio object
which you will be working on, and

00:04:47.482 --> 00:04:53.008
your resume created various objects for
bio, work and education.

00:04:53.008 --> 00:04:57.748
I can come back to that,
I'm drifting over here, from the topic.

00:04:57.748 --> 00:05:04.372
But yeah, so I have this JSON data
pasted inside the JSON validator.

00:05:04.372 --> 00:05:08.553
Now I'll let it validate, and
I see that I have an error.

00:05:08.553 --> 00:05:12.100
Here, under result,
it says parse error on line one.

00:05:13.160 --> 00:05:15.324
And it says varbio equals this.

00:05:15.324 --> 00:05:22.159
I think we have to separate
the variable from the object name.

00:05:22.159 --> 00:05:25.137
[LAUGH] We're just very
glad I found out, so

00:05:25.137 --> 00:05:29.953
I'm going to take just this page
right here, and then hit validate.

00:05:29.953 --> 00:05:35.385
[INAUDIBLE] I think they don't

00:05:35.385 --> 00:05:40.383
define object names inside

00:05:40.383 --> 00:05:44.517
your JSON Validator.

00:05:44.517 --> 00:05:51.540
So one can just give the JSON data
without assigning it to an object.

00:05:51.540 --> 00:05:54.397
And then that will just validate it
&gt;&gt; Yeah,

00:05:54.397 --> 00:05:57.470
I think that's what I
was doing wrong here.

00:05:57.470 --> 00:06:03.688
So, JSON objects,
don't put in the object name.

00:06:03.688 --> 00:06:07.709
&gt;&gt; Yeah, we can try that,
we can even try [CROSSTALK].

00:06:07.709 --> 00:06:11.788
&gt;&gt; It's still a.

00:06:11.788 --> 00:06:16.988
It's just the object,
no var no name for object.

00:06:16.988 --> 00:06:20.668
So it looks like this block is valid.

00:06:20.668 --> 00:06:22.640
It's a valid JSON file.

00:06:22.640 --> 00:06:25.410
It looks like my nesting is perfect.

00:06:25.410 --> 00:06:27.564
I have my name, I have my rule.

00:06:27.564 --> 00:06:31.732
My contacts has three
separate attributes, as well,

00:06:31.732 --> 00:06:34.550
the mobile, email, and location.

00:06:34.550 --> 00:06:38.340
So I can enclose it
with the curly braces.

00:06:38.340 --> 00:06:42.894
And then my skills are an array,
so I define it as an array and

00:06:42.894 --> 00:06:46.004
that way I have the square braces there.

00:06:46.004 --> 00:06:46.703
&gt;&gt; Awesome.

00:06:46.703 --> 00:06:47.503
&gt;&gt; Definitely.

00:06:47.503 --> 00:06:52.143
&gt;&gt; [LAUGH]
&gt;&gt; [LAUGH] Okay,

00:06:52.143 --> 00:06:54.675
so this is jsonlint.com.

00:06:54.675 --> 00:07:01.887
Whenever you find yourself getting
stuck being able to access JSON data,

00:07:01.887 --> 00:07:06.424
just ensure that
the structure is valid before

00:07:06.424 --> 00:07:11.212
you use that data inside
functions to render it.

00:07:11.212 --> 00:07:18.220
So, just like usual, I get small snippets
to make sure I validate something.

00:07:19.470 --> 00:07:24.915
&gt;&gt; It can get crazy when you have
a large amount of data that seems just

00:07:24.915 --> 00:07:30.970
like one JSON file, [INAUDIBLE] the data,
so it helps to validate those.

