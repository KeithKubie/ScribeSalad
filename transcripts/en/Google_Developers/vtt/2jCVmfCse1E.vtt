WEBVTT
Kind: captions
Language: en

00:00:01.404 --> 00:00:04.220
RICHARD NGO: Hi, everyone.

00:00:04.220 --> 00:00:06.540
My name is Richard,
I'm designer and I

00:00:06.540 --> 00:00:07.210
design Android apps.

00:00:07.210 --> 00:00:08.600
DANIEL LEHMANN: Hi, everyone.

00:00:08.600 --> 00:00:10.830
My name is Daniel, and
I build Android apps.

00:00:10.830 --> 00:00:12.390
TOR NORBYE: And I'm Tor Norbye,
I work on the tools

00:00:12.390 --> 00:00:14.260
for developing Android apps.

00:00:14.260 --> 00:00:16.040
So in this talk, we're going
to assume that you all know

00:00:16.040 --> 00:00:18.220
how to build Android apps.

00:00:18.220 --> 00:00:20.310
And we're also going to assume
that you're familiar with the

00:00:20.310 --> 00:00:21.220
Android design guide.

00:00:21.220 --> 00:00:23.050
There was a talk immediately
prior to this that, hopefully,

00:00:23.050 --> 00:00:24.110
most of you caught.

00:00:24.110 --> 00:00:25.920
And if not, you should
definitely go check out the

00:00:25.920 --> 00:00:27.920
YouTube recording of that.

00:00:27.920 --> 00:00:30.670
So while that talk focused on
the theory of the design

00:00:30.670 --> 00:00:35.820
guide, in this talk we're hoping
to focus on practical

00:00:35.820 --> 00:00:38.150
implications of how to implement
this and help you

00:00:38.150 --> 00:00:40.640
polish your apps.

00:00:40.640 --> 00:00:43.150
So assuming that you have this
beautiful design that we're

00:00:43.150 --> 00:00:46.740
going to show in the slides,
our goal is to help prevent

00:00:46.740 --> 00:00:49.165
you from ending up with
something like this.

00:00:49.165 --> 00:00:51.910
[SAD TROMBONE]

00:00:51.910 --> 00:00:54.120
TOR NORBYE: So Richard, are
you happy with how we

00:00:54.120 --> 00:00:54.890
implemented your design?

00:00:54.890 --> 00:00:56.390
RICHARD NGO: Definitely not.

00:00:59.620 --> 00:01:04.709
So, before I get started on the
spacing alignment details,

00:01:04.709 --> 00:01:08.720
I want to step back a little
bit and talk about screens.

00:01:08.720 --> 00:01:12.330
There's been an insane time
right now where mobile devices

00:01:12.330 --> 00:01:14.655
are just completely saturating
the spectrum of screens.

00:01:17.210 --> 00:01:21.800
It's really hard to get started
on where to begin

00:01:21.800 --> 00:01:23.050
designing for these things.

00:01:25.610 --> 00:01:29.460
As Nate mentioned, most people
usually start with whatever

00:01:29.460 --> 00:01:31.660
they have in their pocket.

00:01:31.660 --> 00:01:36.400
It's a really good way gain a
lot of momentum and energy

00:01:36.400 --> 00:01:39.350
towards thinking about
structuring your app and

00:01:39.350 --> 00:01:44.790
knowing how to structure
your content.

00:01:44.790 --> 00:01:49.770
So when you start there and you
have to go somewhere else

00:01:49.770 --> 00:01:53.320
with a different screen size and
density, that momentum can

00:01:53.320 --> 00:01:55.210
kind of slow down.

00:01:55.210 --> 00:01:59.730
So I'm going to go through a few
things that our team has

00:01:59.730 --> 00:02:02.880
gone through to go over
those hurdles.

00:02:02.880 --> 00:02:06.180
The first thing is to really
standardize a lot of this to

00:02:06.180 --> 00:02:08.550
some sort of standard measure.

00:02:11.190 --> 00:02:14.290
In Android, we actually have
something that's a standard

00:02:14.290 --> 00:02:15.660
unit of measure for screens.

00:02:15.660 --> 00:02:18.650
It's called DPs.

00:02:18.650 --> 00:02:22.160
A DP is basically a virtual
unit that describes

00:02:22.160 --> 00:02:23.100
dimensions.

00:02:23.100 --> 00:02:25.230
it's something that
you should use to

00:02:25.230 --> 00:02:27.585
define all of your layouts.

00:02:27.585 --> 00:02:30.260
And the frame [INAUDIBLE]
usually scales it up or down

00:02:30.260 --> 00:02:34.180
to the density bucket
of the device.

00:02:34.180 --> 00:02:37.520
This makes all of the physical
sizes of the UI consistent

00:02:37.520 --> 00:02:39.260
across, or approximately
consistent

00:02:39.260 --> 00:02:42.090
across, all the devices.

00:02:42.090 --> 00:02:46.520
So this is an example
I like to use.

00:02:46.520 --> 00:02:50.970
These three devices are
radically different and

00:02:50.970 --> 00:02:52.530
they're all different densities,
but they're

00:02:52.530 --> 00:02:55.620
approximately the
same resolution.

00:02:55.620 --> 00:02:58.850
And when you work on a computer
monitor, you can see

00:02:58.850 --> 00:03:02.370
that these things are completely
different because

00:03:02.370 --> 00:03:06.370
you're stuck on a specific
density and you have to hop

00:03:06.370 --> 00:03:07.250
back and forth.

00:03:07.250 --> 00:03:08.940
And it's really hard
to design for.

00:03:08.940 --> 00:03:11.800
So it's really important
to standardize

00:03:11.800 --> 00:03:13.130
your measurement here.

00:03:16.790 --> 00:03:20.100
This is how it works
on Android.

00:03:20.100 --> 00:03:25.050
Think of it kind of like the
Android metric system.

00:03:25.050 --> 00:03:27.170
It was really hard for me,
because I'm an American.

00:03:27.170 --> 00:03:28.495
DANIEL LEHMANN: Yay, metric!

00:03:28.495 --> 00:03:30.745
[LAUGHTER]

00:03:30.745 --> 00:03:34.060
RICHARD NGO: It's basically
a bunch of math.

00:03:34.060 --> 00:03:37.580
What you want to do is plot all
of your devices on there

00:03:37.580 --> 00:03:41.810
and bring it back to MDPI,
because MDPI is like the magic

00:03:41.810 --> 00:03:43.930
land of where one
pixel is one DP.

00:03:46.480 --> 00:03:49.860
An example of that is, the
Galaxy Nexus is an XHDPI

00:03:49.860 --> 00:03:53.750
advice and if you want to bring
it back to MDPI, it's

00:03:53.750 --> 00:03:57.310
that ratio of 4:8, so
it's 50% reduction.

00:03:57.310 --> 00:04:05.680
That's 1280 by 720
to 960, 640 DPs.

00:04:05.680 --> 00:04:08.200
So when you standardize all of
these things, you can kind of

00:04:08.200 --> 00:04:11.380
see the spatial relationships
between all of these.

00:04:11.380 --> 00:04:14.990
And what's great about this
is it's actually using the

00:04:14.990 --> 00:04:18.120
measure that the framework
is actually interpreting.

00:04:18.120 --> 00:04:22.290
It's really, really good to
engineers, developers, and

00:04:22.290 --> 00:04:24.700
designers because we can
all start talking and

00:04:24.700 --> 00:04:26.940
communicating in DPs.

00:04:26.940 --> 00:04:29.140
And that's really, really
good so that you

00:04:29.140 --> 00:04:30.390
don't really make mistakes.

00:04:33.220 --> 00:04:36.270
Something that we use is a
four DP grid on top of

00:04:36.270 --> 00:04:38.920
everything, once you've
standardized all that stuff.

00:04:42.070 --> 00:04:44.670
All of the Holo widgets are
actually designed on a really

00:04:44.670 --> 00:04:45.920
strict grid.

00:04:48.110 --> 00:04:50.840
It really makes it really
easy to see when

00:04:50.840 --> 00:04:53.960
things are out of whack.

00:04:53.960 --> 00:04:57.410
Here's an example of how you
would do this in Photoshop is

00:04:57.410 --> 00:05:00.560
just change the grid
lines to four.

00:05:00.560 --> 00:05:02.980
And the advantage of that is you
can actually snap a lot of

00:05:02.980 --> 00:05:06.384
these things to the
four DP grid.

00:05:06.384 --> 00:05:11.660
And you kind of see where
things fall into place.

00:05:11.660 --> 00:05:13.380
It's really easy to make things

00:05:13.380 --> 00:05:16.150
really uniform and nice.

00:05:16.150 --> 00:05:22.400
You can kind of see where all
the 48 DP rhythm lines land.

00:05:22.400 --> 00:05:24.670
The great thing about this is,
once you've standardized all

00:05:24.670 --> 00:05:27.550
this stuff in DPs, you
can use a stencil.

00:05:27.550 --> 00:05:29.660
If you haven't checked
it out, it's on the

00:05:29.660 --> 00:05:31.650
Android design site.

00:05:31.650 --> 00:05:33.210
There's a bunch of good
stuff in there.

00:05:33.210 --> 00:05:37.160
But once you get that set up you
can quickly make mockups.

00:05:37.160 --> 00:05:40.440
A lot of the flows and stuff are
really, really easy to do

00:05:40.440 --> 00:05:44.900
because you can just start
plopping things on the page.

00:05:44.900 --> 00:05:47.780
Once you get a lot of these
components together, you can

00:05:47.780 --> 00:05:48.820
start thinking about

00:05:48.820 --> 00:05:51.190
transitioning into other screens.

00:05:51.190 --> 00:05:55.790
It's really just an adjustment
of width and height.

00:05:55.790 --> 00:05:58.710
This is an example
I like to show.

00:05:58.710 --> 00:06:01.060
This is a G1 device.

00:06:01.060 --> 00:06:07.620
This is a Nexus S, Galaxy Nexus,
and a Galaxy Note.

00:06:07.620 --> 00:06:11.380
The white part is where your
content mostly lives in, and

00:06:11.380 --> 00:06:13.790
when you standardize in DPs you
can really see the spacial

00:06:13.790 --> 00:06:15.120
relationship between that.

00:06:18.400 --> 00:06:21.490
Now that you've standardized it
all in DPs, how do you make

00:06:21.490 --> 00:06:25.060
it full-res so that you can
see it on the device?

00:06:25.060 --> 00:06:29.650
If you use the stencils, you
can just blow it up.

00:06:29.650 --> 00:06:31.550
In even numbers it works
out pretty well.

00:06:31.550 --> 00:06:35.660
Everything turns out pretty
nice and sharp.

00:06:35.660 --> 00:06:38.350
If you use odd numbers, you
have to do a little bit of

00:06:38.350 --> 00:06:41.150
pixel hinting here and there.

00:06:41.150 --> 00:06:42.920
But a tool that we like
to use is the Android

00:06:42.920 --> 00:06:43.810
design preview tool.

00:06:43.810 --> 00:06:45.620
It's basically a
mirroring tool.

00:06:45.620 --> 00:06:47.950
So if you're on your desktop,
you can select a mirror

00:06:47.950 --> 00:06:51.600
region, connect your devices
through USB, and preview a lot

00:06:51.600 --> 00:06:53.980
of your designs on a device.

00:06:53.980 --> 00:06:55.690
You make a lot of quick
tweaks, color

00:06:55.690 --> 00:06:56.520
changes, and all that.

00:06:56.520 --> 00:06:58.650
TOR NORBYE: So a very common
pitfall when you're trying to

00:06:58.650 --> 00:07:02.570
implement a UI design into
actual layout XML file, is to

00:07:02.570 --> 00:07:04.960
attempt to do it with nested
linear layouts.

00:07:04.960 --> 00:07:08.380
So here I've added colors to a
bunch of nested linear layouts

00:07:08.380 --> 00:07:10.010
you can see here.

00:07:10.010 --> 00:07:12.050
The effect is a bit exaggerated,
but you can see

00:07:12.050 --> 00:07:14.540
here that, across these two
columns, these are not

00:07:14.540 --> 00:07:16.410
aligning properly.

00:07:16.410 --> 00:07:19.030
Even if they did align
perfectly, if I were to change

00:07:19.030 --> 00:07:22.130
the label of this check box
here in some other locale,

00:07:22.130 --> 00:07:23.720
suddenly they would
no longer line up.

00:07:23.720 --> 00:07:25.770
Likewise, you can see that we
don't actually have proper

00:07:25.770 --> 00:07:29.350
baseline alignment across these
two columns here that

00:07:29.350 --> 00:07:30.630
are separate linear layouts.

00:07:30.630 --> 00:07:33.180
So what you should do
instead is to use a

00:07:33.180 --> 00:07:34.610
more powerful layout.

00:07:34.610 --> 00:07:37.460
So, for example, a relative
layout lets you express these

00:07:37.460 --> 00:07:37.980
constraints.

00:07:37.980 --> 00:07:40.730
I'm just going to quickly drag
some things here to show you.

00:07:43.440 --> 00:07:45.900
I'm going to try to reproduce
what I have up here quickly.

00:07:45.900 --> 00:07:47.920
So we put a label down.

00:07:47.920 --> 00:07:49.790
And then I can place a
button next to it.

00:07:49.790 --> 00:07:52.360
And I can express that these
should be baseline aligned.

00:07:52.360 --> 00:07:54.720
Likewise, the check box next
to it is supposed to be

00:07:54.720 --> 00:07:58.500
baseline aligned with
the button.

00:07:58.500 --> 00:08:02.540
Then we have a radio button
right below it, and then

00:08:02.540 --> 00:08:07.000
there's a check box over here on
the left that's supposed to

00:08:07.000 --> 00:08:08.850
be below the radio button,
and so on.

00:08:08.850 --> 00:08:12.150
Basically, you can express,
across your whole layout,

00:08:12.150 --> 00:08:14.290
constraints, and the layout
manager will make sure that

00:08:14.290 --> 00:08:17.640
these things actually adjust
based on the labels and

00:08:17.640 --> 00:08:18.630
everything in the layout.

00:08:18.630 --> 00:08:20.780
This is also very good for
performance, by the way.

00:08:20.780 --> 00:08:23.910
So it's not the only reason
why you would do this.

00:08:23.910 --> 00:08:27.290
We're also working on a layout
called grid layout, which is

00:08:27.290 --> 00:08:29.440
shipping with Ice
Cream Sandwich.

00:08:29.440 --> 00:08:31.350
But it's also been backported
so you can use it in older

00:08:31.350 --> 00:08:33.350
applications.

00:08:33.350 --> 00:08:35.970
The advantage of grid layout is
that it's a very simple to

00:08:35.970 --> 00:08:37.059
understand user model.

00:08:37.059 --> 00:08:41.549
It's what newspaper editors
have used for centuries to

00:08:41.549 --> 00:08:44.280
basically layout the design
with rows and columns and

00:08:44.280 --> 00:08:46.360
column spans and everything.

00:08:46.360 --> 00:08:48.360
And this is used, I think, for
the lock screen and various

00:08:48.360 --> 00:08:52.420
other stuff in Android now.

00:08:52.420 --> 00:08:54.400
The tool support is not done,
but I just want to show you a

00:08:54.400 --> 00:08:57.110
few things that relate
to the design guide.

00:08:57.110 --> 00:09:00.145
So we're working on adding these
spacing guidelines so

00:09:00.145 --> 00:09:04.060
you can see that, hey, you
probably should have a margin.

00:09:04.060 --> 00:09:05.790
Likewise, we're trying
to offer you

00:09:05.790 --> 00:09:07.840
some suggested spacing.

00:09:07.840 --> 00:09:10.820
So what we want to do here is
to help you enforce that

00:09:10.820 --> 00:09:14.670
visual rhythm that the design
guide tells you to use.

00:09:14.670 --> 00:09:16.320
This is not done, but we're
going to try to put those red

00:09:16.320 --> 00:09:19.670
lines into all of our
existing layouts.

00:09:19.670 --> 00:09:23.040
So avoid linear layouts for any
kind of nesting of your

00:09:23.040 --> 00:09:23.690
large layouts.

00:09:23.690 --> 00:09:25.040
But they do have their place.

00:09:25.040 --> 00:09:28.180
If you are creating a button
bar, the linear layout is what

00:09:28.180 --> 00:09:28.810
you have to use.

00:09:28.810 --> 00:09:31.200
It's the only way to actually
get that correct proportional

00:09:31.200 --> 00:09:32.700
distribution of space.

00:09:32.700 --> 00:09:34.100
Another common area for
it is if you're

00:09:34.100 --> 00:09:35.190
doing a tablet layout.

00:09:35.190 --> 00:09:38.940
So you want to, say, put 30% of
the content on the left and

00:09:38.940 --> 00:09:40.460
then 70% for the remainder.

00:09:40.460 --> 00:09:42.300
That's when you [INAUDIBLE]
the layout.

00:09:42.300 --> 00:09:43.660
There is one pitfall, though,
and I'm going to

00:09:43.660 --> 00:09:44.860
show you that now.

00:09:44.860 --> 00:09:48.250
So here I have two buttons, A
and B. They are supposed to be

00:09:48.250 --> 00:09:50.830
distributed evenly, 50-50.

00:09:50.830 --> 00:09:52.120
Looks great, right?

00:09:52.120 --> 00:09:55.000
Well, turns out that weights
do not work the

00:09:55.000 --> 00:09:55.780
way you might think.

00:09:55.780 --> 00:09:58.460
They are not distributing the
space of the whole layout .

00:09:58.460 --> 00:10:02.120
They are distributing the space
of the remainder of the

00:10:02.120 --> 00:10:04.130
layout, after you've assigned
the intrinsic

00:10:04.130 --> 00:10:06.510
sizes of all the widgets.

00:10:06.510 --> 00:10:08.660
So right now, these buttons
happen to have the same

00:10:08.660 --> 00:10:11.010
intrinsic size, so the space
gets divided evenly.

00:10:11.010 --> 00:10:14.110
But look what happens if I
change the label of button B

00:10:14.110 --> 00:10:17.220
here to something longer.

00:10:17.220 --> 00:10:21.750
Suddenly, my even distribution
ends up not looking even.

00:10:21.750 --> 00:10:24.800
The reason for that, again,
is that we now have more

00:10:24.800 --> 00:10:26.430
intrinsic size on one of them.

00:10:26.430 --> 00:10:28.430
And the workaround
is very simple,

00:10:28.430 --> 00:10:29.980
but maybe not intuitive.

00:10:29.980 --> 00:10:32.460
What you do is you set
the width of all

00:10:32.460 --> 00:10:33.910
the children to zero.

00:10:33.910 --> 00:10:36.630
The width is only used for this
intrinsic computation.

00:10:36.630 --> 00:10:39.900
And when you have weight, it'll
use all of the weights

00:10:39.900 --> 00:10:42.220
for that remainder
of sum of zero.

00:10:42.220 --> 00:10:44.960
So if I click on our Distribute
Weights Evenly

00:10:44.960 --> 00:10:46.860
button, that's going to
do precisely that.

00:10:46.860 --> 00:10:49.820
It's going to actually set the
width to zero, as you can see.

00:10:52.920 --> 00:10:55.790
It's very subtle, but it's one
of those things that can look

00:10:55.790 --> 00:10:57.100
not exactly right.

00:10:57.100 --> 00:10:57.985
You thought it was 30%.

00:10:57.985 --> 00:11:00.370
Turns out it's wider because
something in there was wider.

00:11:00.370 --> 00:11:03.730
That's just a little, small
pitfall to look out for.

00:11:07.140 --> 00:11:10.840
RICHARD NGO: So, on the topic
of stencils, another great

00:11:10.840 --> 00:11:13.080
thing that this allows you
to do is to really

00:11:13.080 --> 00:11:16.940
make your app yours.

00:11:16.940 --> 00:11:21.120
Holo was always built to be
extensible with third parties.

00:11:21.120 --> 00:11:24.540
There's a lot of opportunities
to express through

00:11:24.540 --> 00:11:26.460
customization of
certain parts.

00:11:29.540 --> 00:11:32.110
Holo is really the bones to
start your application.

00:11:32.110 --> 00:11:35.080
It's really up to you
to make it special.

00:11:35.080 --> 00:11:38.510
It's really about spacing and
metrics and a few hints of

00:11:38.510 --> 00:11:41.580
color and character.

00:11:41.580 --> 00:11:43.680
A good place to start
is with themes.

00:11:43.680 --> 00:11:49.050
We have light, dark, and light
with a dark action bar.

00:11:49.050 --> 00:11:51.270
What I like to do is really
start out with the action bar,

00:11:51.270 --> 00:11:54.616
since it's the most prominent
bit of UI.

00:11:54.616 --> 00:11:58.520
And it has a lot
of impact here.

00:11:58.520 --> 00:12:02.230
I like to look at color and
the contrast and what that

00:12:02.230 --> 00:12:05.870
really sets the tone for
your application to be.

00:12:05.870 --> 00:12:11.250
So you can get a feel for, if
you pick a really dark thing,

00:12:11.250 --> 00:12:14.270
it's kind of more media-centric,
or white's like

00:12:14.270 --> 00:12:16.980
a productivity app.

00:12:16.980 --> 00:12:20.610
So here's some quick tweaks
on color alone.

00:12:20.610 --> 00:12:23.810
And it really changes the
feel of the application.

00:12:23.810 --> 00:12:26.620
There's a lot of other places
where you can do that.

00:12:26.620 --> 00:12:29.940
Of course, the split action bar
tabs and a bunch of other

00:12:29.940 --> 00:12:32.380
places and backgrounds.

00:12:32.380 --> 00:12:35.740
But when you look at the action
bar, this is kind of

00:12:35.740 --> 00:12:38.480
the easy thing to do is to
change the background color.

00:12:38.480 --> 00:12:41.470
But the thing that you need to
keep in mind is that there's a

00:12:41.470 --> 00:12:42.830
highlight and a shadow.

00:12:42.830 --> 00:12:46.130
You need to adjust that
accordingly to whatever color

00:12:46.130 --> 00:12:47.930
you've selected.

00:12:47.930 --> 00:12:51.700
You can play with material
qualities here a bit more, but

00:12:51.700 --> 00:12:53.510
just don't go too nuts.

00:12:56.260 --> 00:13:01.590
The action bar also allows you
to put a different app

00:13:01.590 --> 00:13:02.680
branded icon here.

00:13:02.680 --> 00:13:06.640
So you can use a longer logo
type, different shapes, and

00:13:06.640 --> 00:13:07.090
that stuff.

00:13:07.090 --> 00:13:09.080
You don't have to use
your app icon.

00:13:09.080 --> 00:13:11.730
But just make sure it doesn't
really clash with the action

00:13:11.730 --> 00:13:13.020
bar itself.

00:13:13.020 --> 00:13:17.120
A thing to note is, there's a
bunch of states associated

00:13:17.120 --> 00:13:18.760
when you press.

00:13:18.760 --> 00:13:21.100
Make sure that doesn't clash
with the color you've

00:13:21.100 --> 00:13:22.350
selected, too.

00:13:25.170 --> 00:13:30.270
We have this idea of making
users powerful with a lot of

00:13:30.270 --> 00:13:30.920
our states.

00:13:30.920 --> 00:13:35.340
So the pressed state is the
highest elevated color, and

00:13:35.340 --> 00:13:38.030
normal is just the bare
geometric form.

00:13:38.030 --> 00:13:39.830
And then there's stuff
in between.

00:13:39.830 --> 00:13:43.340
So if you do customize some of
these things, make sure to

00:13:43.340 --> 00:13:44.670
respect some of those rules.

00:13:49.400 --> 00:13:53.300
DANIEL LEHMANN: So Rich said
that you can recolor the whole

00:13:53.300 --> 00:13:54.460
application.

00:13:54.460 --> 00:13:57.520
And it can have a very
powerful effect.

00:13:57.520 --> 00:14:00.610
I did a little exercise, and
I changed the color of this

00:14:00.610 --> 00:14:03.000
application to red.

00:14:03.000 --> 00:14:05.650
And you can see, it immediately
feels like a

00:14:05.650 --> 00:14:07.105
completely different kind
of application.

00:14:07.105 --> 00:14:09.410
It has a very different
feel for it.

00:14:09.410 --> 00:14:11.250
You can do that with the
whole application.

00:14:11.250 --> 00:14:14.105
The problem, however, might be
that we have a lot of controls

00:14:14.105 --> 00:14:18.080
and if you forget one, it
might feel a little off.

00:14:18.080 --> 00:14:20.270
So this is an example of the
editor, and what I forgot to

00:14:20.270 --> 00:14:21.520
change is--

00:14:23.280 --> 00:14:26.910
the blue underline of the text
is not changed here and it

00:14:26.910 --> 00:14:30.250
sticks out a little bit.

00:14:30.250 --> 00:14:32.910
You can recolor everything in
your app, but it can be a

00:14:32.910 --> 00:14:35.780
little bit of work, especially
because we

00:14:35.780 --> 00:14:38.060
have a lot of controls.

00:14:38.060 --> 00:14:40.160
Multiply those by all the
different densities that we

00:14:40.160 --> 00:14:42.560
provide and all the
different states--

00:14:42.560 --> 00:14:43.580
can be a lot of work.

00:14:43.580 --> 00:14:44.830
It can certainly be done.

00:14:48.760 --> 00:14:53.560
What we recommend you to do is
to change the main screen of

00:14:53.560 --> 00:14:54.950
your application.

00:14:54.950 --> 00:14:56.860
YouTube is a very
good example.

00:14:56.860 --> 00:14:59.660
In this screen, it is mostly
the default style

00:14:59.660 --> 00:15:01.420
that we use in Holo.

00:15:01.420 --> 00:15:04.480
But there are three things
that were customized.

00:15:04.480 --> 00:15:08.570
The HD button has a red
underline, the thumb that's

00:15:08.570 --> 00:15:12.260
used to track in the video
is red, and also

00:15:12.260 --> 00:15:13.630
the tabs are red.

00:15:13.630 --> 00:15:16.090
So this makes the whole
application feel much, much

00:15:16.090 --> 00:15:19.260
more like a native YouTube app,
but it also feels like a

00:15:19.260 --> 00:15:21.800
native Android app, even though
not that much was

00:15:21.800 --> 00:15:23.050
really changed.

00:15:25.330 --> 00:15:28.650
Now when you get your designs
from your designer--

00:15:28.650 --> 00:15:30.480
I would hope you have
a designer--

00:15:30.480 --> 00:15:33.020
you usually get static images.

00:15:33.020 --> 00:15:35.450
But keep in mind, views
have states.

00:15:35.450 --> 00:15:37.700
And every time, when I touch
a view and it doesn't

00:15:37.700 --> 00:15:39.250
react in any way--

00:15:39.250 --> 00:15:41.940
kind of like the sad trombone
that you heard before, this is

00:15:41.940 --> 00:15:43.250
kind of what's playing
in my head every

00:15:43.250 --> 00:15:44.880
time when I see that.

00:15:44.880 --> 00:15:46.150
Keep in mind there are states.

00:15:46.150 --> 00:15:50.970
When I push an item, I want
to see a pressed state.

00:15:50.970 --> 00:15:52.500
I want to see that the
control is really

00:15:52.500 --> 00:15:54.200
responding to my touches.

00:15:54.200 --> 00:15:56.460
So you see, the tabs already
have two states.

00:15:56.460 --> 00:15:58.660
If you add the pressed states,
you have two states more.

00:15:58.660 --> 00:16:00.510
So we're already
at four states.

00:16:00.510 --> 00:16:03.670
Now if the user has a keyboard
and the user can focus the

00:16:03.670 --> 00:16:05.610
item, you have two additional
states.

00:16:05.610 --> 00:16:07.765
So we already have six different
states on an item.

00:16:10.490 --> 00:16:12.750
This is what those look like.

00:16:12.750 --> 00:16:17.660
We have normal, focused for
keyboard, and pressed.

00:16:17.660 --> 00:16:20.190
The focused, this design--
focused is an outline.

00:16:20.190 --> 00:16:23.470
When you push Enter on the
keyboard, it'll just fill out.

00:16:23.470 --> 00:16:26.800
So the combination of focused
and pressed looks exactly the

00:16:26.800 --> 00:16:27.880
same as pressed.

00:16:27.880 --> 00:16:30.220
So you might think we would need
eight states because we

00:16:30.220 --> 00:16:35.020
have three different flags,
but in fact it's only six.

00:16:35.020 --> 00:16:36.170
Now let's say you've
got all of those

00:16:36.170 --> 00:16:37.480
bitmaps from your designer--

00:16:37.480 --> 00:16:39.050
how do you tell Android
that you want to

00:16:39.050 --> 00:16:41.900
use those in a view?

00:16:41.900 --> 00:16:43.630
Let's see how we can
build a selector.

00:16:43.630 --> 00:16:46.540
This is what solves
this problem.

00:16:46.540 --> 00:16:49.500
A selector is a set of
conditions that is evaluated

00:16:49.500 --> 00:16:51.390
from top to bottom.

00:16:51.390 --> 00:16:52.640
Let's look at an example.

00:16:56.280 --> 00:16:59.000
We have pressed equals true,
and selected equals true.

00:16:59.000 --> 00:17:02.520
We say in that case, we want
to show this bitmap.

00:17:02.520 --> 00:17:05.660
Now, if that condition is not
met, Android will fall back to

00:17:05.660 --> 00:17:07.050
the next line.

00:17:07.050 --> 00:17:09.579
Pressed equals true, and
no test for selected is

00:17:09.579 --> 00:17:12.240
essentially a test for selected
equals false, because

00:17:12.240 --> 00:17:15.550
we already tested for selected
equals true.

00:17:15.550 --> 00:17:17.980
So now that we have the pressed
states, we can do the

00:17:17.980 --> 00:17:18.800
two focused states.

00:17:18.800 --> 00:17:21.599
Again, we have selected
and unselected.

00:17:21.599 --> 00:17:23.540
And notice how the order
here is important.

00:17:23.540 --> 00:17:27.010
If I moved the focused before
pressed, I would not get the

00:17:27.010 --> 00:17:30.130
right combination state, which
is focused and pressed

00:17:30.130 --> 00:17:32.420
together, which should
look like pressed.

00:17:32.420 --> 00:17:35.790
If I move them at the top and I
push Enter on my keyboard, I

00:17:35.790 --> 00:17:37.960
would not see any effect.

00:17:37.960 --> 00:17:39.965
So now with those, then
all that's left

00:17:39.965 --> 00:17:41.350
are the regular states.

00:17:41.350 --> 00:17:44.340
So selected equals true, and
the fallback case where no

00:17:44.340 --> 00:17:45.590
special condition is met.

00:17:48.630 --> 00:17:51.160
Now that you've identified those
conditions, you put that

00:17:51.160 --> 00:17:52.410
in an XML file.

00:17:54.880 --> 00:17:57.360
You create a selector file
and you store it in

00:17:57.360 --> 00:17:58.780
the drawable folder.

00:17:58.780 --> 00:18:01.530
And then you can use this
drawable just like you use a

00:18:01.530 --> 00:18:03.300
regular bitmap.

00:18:03.300 --> 00:18:05.110
I think we're also working
on getting those kinds of

00:18:05.110 --> 00:18:06.530
transitions into our tools.

00:18:11.540 --> 00:18:14.890
So now that we've talked about
the bitmaps, it's also

00:18:14.890 --> 00:18:17.330
important to keep the
shape of an item--

00:18:17.330 --> 00:18:19.180
you want to communicate
the shape.

00:18:19.180 --> 00:18:21.960
This is a screenshot of
the clock application.

00:18:21.960 --> 00:18:24.465
If you push that alarm on an Ice
Cream Sandwich phone, you

00:18:24.465 --> 00:18:26.145
will notice there is
no visual feedback.

00:18:30.390 --> 00:18:31.950
You don't get feedback
as a user when

00:18:31.950 --> 00:18:34.120
you're pushing the item.

00:18:34.120 --> 00:18:35.390
In Jellybean, we fixed that.

00:18:35.390 --> 00:18:36.890
There's a nice blue outline.

00:18:36.890 --> 00:18:38.670
And this has a couple
of advantages.

00:18:38.670 --> 00:18:41.550
The first one is you get
immediate touch feedback,

00:18:41.550 --> 00:18:43.730
because the item is only
responding when you release

00:18:43.730 --> 00:18:44.970
your finger.

00:18:44.970 --> 00:18:46.790
But now you already get
visual feedback when

00:18:46.790 --> 00:18:47.790
you touch the item.

00:18:47.790 --> 00:18:51.180
It makes the phone feel
more responsive.

00:18:51.180 --> 00:18:55.530
Another advantage is you see
the outline of the control.

00:18:55.530 --> 00:18:58.030
Next time, when the user pushes,
they have a little

00:18:58.030 --> 00:19:01.400
more confidence what exactly
the size of the item is,

00:19:01.400 --> 00:19:03.280
because you only see
the text otherwise.

00:19:03.280 --> 00:19:05.110
It's a little more
relaxed to tap.

00:19:05.110 --> 00:19:08.340
And the last one is, you know
exactly what you're actually

00:19:08.340 --> 00:19:10.890
pushing, because you see the
control and you see exactly

00:19:10.890 --> 00:19:12.860
this corresponds to set alarm.

00:19:12.860 --> 00:19:14.590
So this is something
very important.

00:19:14.590 --> 00:19:17.700
If the user just taps, nothing
is happening, it's always a

00:19:17.700 --> 00:19:19.820
little bit of a challenge
to figure out what

00:19:19.820 --> 00:19:22.840
the app will do next.

00:19:22.840 --> 00:19:25.390
So many cases, you don't want
to supply your own bitmaps.

00:19:25.390 --> 00:19:29.335
You just simply want to use
the systems default.

00:19:29.335 --> 00:19:32.030
But, if you have a button, you
don't have to set anything.

00:19:32.030 --> 00:19:33.730
Android will already do
the correct thing.

00:19:33.730 --> 00:19:35.800
But sometimes you have a more
complicated situation.

00:19:35.800 --> 00:19:38.000
You might have a nested view
hierarchy, and you maybe want

00:19:38.000 --> 00:19:41.440
to push the pressed states and
those kinds of things on a

00:19:41.440 --> 00:19:42.910
more higher level control.

00:19:42.910 --> 00:19:44.720
Or you build your
own custom view.

00:19:44.720 --> 00:19:47.130
In that case, this is what
you need to know.

00:19:47.130 --> 00:19:49.595
Selectable item background-- if
you set this on any view,

00:19:49.595 --> 00:19:53.610
it will get the system
standard behavior.

00:19:53.610 --> 00:19:54.970
So how can you test
all of this?

00:19:54.970 --> 00:19:58.070
It's actually very simple,
but I've seen many

00:19:58.070 --> 00:20:00.310
people do this wrong.

00:20:00.310 --> 00:20:02.390
When you push an item, actually
you should hold it.

00:20:02.390 --> 00:20:05.040
And you should have a look, what
is the real outline that

00:20:05.040 --> 00:20:06.600
you're seeing here?

00:20:06.600 --> 00:20:09.680
So if I touch the bitmap, I
should see a rectangle.

00:20:09.680 --> 00:20:11.890
Make sure the shape is correct,
make sure the color

00:20:11.890 --> 00:20:12.870
is correct.

00:20:12.870 --> 00:20:15.140
And also, if you have blue
on blue, it's usually

00:20:15.140 --> 00:20:17.690
very hard to see.

00:20:17.690 --> 00:20:20.590
So push and hold.

00:20:20.590 --> 00:20:21.800
How do you test keyboard
support?

00:20:21.800 --> 00:20:24.740
One option is, of course, you
get a device with a keyboard.

00:20:24.740 --> 00:20:26.790
There are a couple
on the market.

00:20:26.790 --> 00:20:29.570
If you don't have a keyboard,
there is a very useful thing

00:20:29.570 --> 00:20:32.060
that you can get, and that
is a Bluetooth keyboard.

00:20:32.060 --> 00:20:34.680
A Bluetooth keyboard works with
every Android device out

00:20:34.680 --> 00:20:36.940
there, almost every Android
device, and it's one of the

00:20:36.940 --> 00:20:39.870
most useful things that you
should have in your toolbox.

00:20:39.870 --> 00:20:41.490
You can use this with
every device.

00:20:41.490 --> 00:20:43.911
You can make sure that keyboard
support works.

00:20:43.911 --> 00:20:46.030
RICHARD NGO: On to icons.

00:20:46.030 --> 00:20:48.970
So, with iconography, it's
actually one of the most

00:20:48.970 --> 00:20:52.020
challenging things for
developers to do because it

00:20:52.020 --> 00:20:55.316
requires some artistic
ability.

00:20:55.316 --> 00:20:56.810
TOR NORBYE: What are
you trying to say?

00:20:56.810 --> 00:21:01.230
[LAUGHTER]

00:21:01.230 --> 00:21:05.290
DANIEL LEHMANN: So we have
actually kind of done a lot of

00:21:05.290 --> 00:21:08.330
stuff for you.

00:21:08.330 --> 00:21:13.750
And in the icon kit there's
actually all of the core icons

00:21:13.750 --> 00:21:16.675
and app menu icons in Holo
dark, Holo light and all

00:21:16.675 --> 00:21:18.480
resolutions.

00:21:18.480 --> 00:21:20.655
So if you've actually pulled
something from framework base

00:21:20.655 --> 00:21:24.970
core res, make sure you find the
equivalent in here and not

00:21:24.970 --> 00:21:26.220
some random thing.

00:21:28.710 --> 00:21:31.880
Also, really be aware of
our core system icons.

00:21:31.880 --> 00:21:36.140
There's a sheet inside the pack
that explains all of its

00:21:36.140 --> 00:21:38.360
uses and examples.

00:21:38.360 --> 00:21:41.535
Don't reinvent them.

00:21:41.535 --> 00:21:44.200
And if you're going off the
rails and need to do

00:21:44.200 --> 00:21:47.650
something, this is all of
our vector sources.

00:21:47.650 --> 00:21:49.490
It's also included
in the pack.

00:21:49.490 --> 00:21:52.030
And this is a good place to
start, because you can kind of

00:21:52.030 --> 00:21:56.380
see the form and the shapes
that we've used.

00:21:56.380 --> 00:22:00.660
A good place where I like to
start is to plot a bunch of

00:22:00.660 --> 00:22:03.970
stuff that we've already done
and draw kind of like these

00:22:03.970 --> 00:22:05.410
grade school lines, kind
of like learning

00:22:05.410 --> 00:22:08.280
cursive over again.

00:22:08.280 --> 00:22:12.530
It helps you, really, to
optically balance these things

00:22:12.530 --> 00:22:15.320
and see which one's
the odd one out.

00:22:15.320 --> 00:22:17.480
The idea here is to really
get most of mass

00:22:17.480 --> 00:22:18.650
in the center box.

00:22:18.650 --> 00:22:22.380
It's not really about getting
it mathematically

00:22:22.380 --> 00:22:25.630
perfect in the box.

00:22:25.630 --> 00:22:29.450
This is kind of a sample sheet
that we've done in Gmail.

00:22:29.450 --> 00:22:31.660
The good thing here is that if
you put everything together,

00:22:31.660 --> 00:22:36.270
you can spot inconsistencies and
other weird artifacts that

00:22:36.270 --> 00:22:37.520
you might have not
seen before.

00:22:40.330 --> 00:22:43.140
The general approach here is
kind of the opposite of

00:22:43.140 --> 00:22:44.130
laying stuff out.

00:22:44.130 --> 00:22:46.720
You want to get the highest
resolution that

00:22:46.720 --> 00:22:48.000
you possibly can.

00:22:48.000 --> 00:22:49.430
So fidelity matters.

00:22:49.430 --> 00:22:54.850
And then fill in the holes
downstream, when you can.

00:22:54.850 --> 00:22:58.050
The way it actually works in
the framework is it always

00:22:58.050 --> 00:22:59.930
tries to get the highest
possible.

00:22:59.930 --> 00:23:02.810
If you don't supply the target
density that your device is

00:23:02.810 --> 00:23:05.180
running on, it'll pull
the next one up.

00:23:05.180 --> 00:23:08.340
If there's none above that,
it takes the lower one

00:23:08.340 --> 00:23:09.280
and blows it up.

00:23:09.280 --> 00:23:12.521
And you don't want your
assets blown up.

00:23:12.521 --> 00:23:14.530
TOR NORBYE: All right, so we
have a few features in the

00:23:14.530 --> 00:23:16.900
tools to help you with
your icon work.

00:23:16.900 --> 00:23:19.420
So the first one is the
integrated assets studio.

00:23:19.420 --> 00:23:22.900
So if I go to create a new icon,
and/or icon set, you get

00:23:22.900 --> 00:23:23.740
into this wizard.

00:23:23.740 --> 00:23:27.920
So, for example, creating a
launch icon, you can go in,

00:23:27.920 --> 00:23:31.660
pull up a project logo,
and paste it in.

00:23:31.660 --> 00:23:34.870
And this lets you create
different shape treatments and

00:23:34.870 --> 00:23:36.510
things like that.

00:23:36.510 --> 00:23:39.600
If you already have an HDPI
version of your icon, you

00:23:39.600 --> 00:23:41.160
don't actually have to
provide all these

00:23:41.160 --> 00:23:42.360
other scaled versions.

00:23:42.360 --> 00:23:43.670
The platform will
do that for you.

00:23:43.670 --> 00:23:45.190
But this is more where you want
to make sure that you

00:23:45.190 --> 00:23:47.510
have the right shape, or
possibly if you have a really

00:23:47.510 --> 00:23:49.050
high resolution image.

00:23:49.050 --> 00:23:51.050
This is really useful when
you're trying to create other

00:23:51.050 --> 00:23:52.060
types of icons

00:23:52.060 --> 00:23:55.600
So let's take a look at
notification icons.

00:23:55.600 --> 00:23:58.550
So here I have a paste icon.

00:23:58.550 --> 00:24:00.190
Let's say this is my
notification icon.

00:24:00.190 --> 00:24:04.060
I want this to appear
as a notification.

00:24:04.060 --> 00:24:06.470
If I go through the
wizard now and I

00:24:06.470 --> 00:24:07.930
point it to this graphic--

00:24:13.470 --> 00:24:16.350
actually, I forgot
to do something.

00:24:16.350 --> 00:24:19.601
I have to select an
older project.

00:24:19.601 --> 00:24:22.520
Let me make sure that
I choose this one.

00:24:22.520 --> 00:24:24.720
This one's targeting
older platforms.

00:24:24.720 --> 00:24:27.660
This is a very important
point I want to make.

00:24:27.660 --> 00:24:30.445
So let's go create our
notification icon again.

00:24:30.445 --> 00:24:31.695
Going to choose an image.

00:24:34.380 --> 00:24:38.110
OK, I'm obviously making
a mistake here.

00:24:38.110 --> 00:24:41.920
What I wanted to show you
here, unfortunately--

00:24:41.920 --> 00:24:45.410
this will create an icon that
will look correct across the

00:24:45.410 --> 00:24:47.110
different platforms.

00:24:47.110 --> 00:24:50.960
So in pre-Gingerbread, your
notification icons needed to

00:24:50.960 --> 00:24:54.020
have a dark background and
a light foreground.

00:24:54.020 --> 00:24:55.970
In Gingerbread, they
turned gray.

00:24:55.970 --> 00:24:59.070
And as of Honeycomb, they're
supposed to be white.

00:24:59.070 --> 00:25:01.100
Now, because the products I'm
targeting here are only

00:25:01.100 --> 00:25:03.470
targeting Honeycomb, this wizard
knows to only generate

00:25:03.470 --> 00:25:04.500
the white version.

00:25:04.500 --> 00:25:07.250
But what I wanted to show, and
I don't know what mistake I

00:25:07.250 --> 00:25:07.710
made here--

00:25:07.710 --> 00:25:08.960
AUDIENCE: [INAUDIBLE].

00:25:11.330 --> 00:25:12.650
TOR NORBYE: Oh, that's right.

00:25:12.650 --> 00:25:13.900
I closed YouTube project.

00:25:13.900 --> 00:25:14.960
Duh.

00:25:14.960 --> 00:25:16.660
This was from my demo yesterday,
and I was like,

00:25:16.660 --> 00:25:17.720
I'll just clean this up.

00:25:17.720 --> 00:25:19.100
It'll start faster.

00:25:19.100 --> 00:25:20.590
All right.

00:25:20.590 --> 00:25:21.120
Let's try it again now.

00:25:21.120 --> 00:25:24.160
I'm sorry about this.

00:25:24.160 --> 00:25:27.760
Glad we have smart people
in the front row.

00:25:27.760 --> 00:25:28.310
Here we go.

00:25:28.310 --> 00:25:31.030
All right, now I'm just
choosing text.

00:25:31.030 --> 00:25:32.050
I'm not going to waste
more time on this.

00:25:32.050 --> 00:25:34.100
But you can see now, I get
different versions of the

00:25:34.100 --> 00:25:38.100
icons from version 9 and up,
version 11 and up, and the

00:25:38.100 --> 00:25:38.640
pre-version.

00:25:38.640 --> 00:25:40.700
So this is really useful,
because if you're just sitting

00:25:40.700 --> 00:25:42.080
in Photoshop, you might
not think of this.

00:25:42.080 --> 00:25:43.830
And then your icons could look
out of place if you're

00:25:43.830 --> 00:25:46.250
targeting older or newer
versions of Android.

00:25:46.250 --> 00:25:49.220
The other thing I want to show
you is that we have a lint

00:25:49.220 --> 00:25:51.410
tool, which will help you look
at your icons and make sure

00:25:51.410 --> 00:25:53.060
you're not making
big mistakes.

00:25:53.060 --> 00:25:57.380
So I run lint here, only
focusing on the icon things.

00:25:57.380 --> 00:25:59.160
And we can jump, for example,
down to the

00:25:59.160 --> 00:26:00.520
icon duplicates check.

00:26:00.520 --> 00:26:02.820
And here you can see, it's
saying that the following

00:26:02.820 --> 00:26:04.920
unrelated icon files have
identical content.

00:26:04.920 --> 00:26:06.950
So there's one called Droidman
closed and one

00:26:06.950 --> 00:26:08.020
called Droidman open.

00:26:08.020 --> 00:26:09.360
And they are identical.

00:26:09.360 --> 00:26:10.860
Clearly that was not
intentional, right?

00:26:10.860 --> 00:26:12.790
They should have probably had
a different state, and so

00:26:12.790 --> 00:26:15.100
either the graphic designer
checked in the wrong files, or

00:26:15.100 --> 00:26:18.220
maybe we made a mistake and we
put it into the repository.

00:26:18.220 --> 00:26:20.070
So the icon check let's
you look for that.

00:26:20.070 --> 00:26:22.750
It also looks for things
like the spacing.

00:26:22.750 --> 00:26:24.010
So you're supposed to have some

00:26:24.010 --> 00:26:25.410
padding around your icons.

00:26:25.410 --> 00:26:28.110
And we, for example, know that
dialog icons are supposed to

00:26:28.110 --> 00:26:30.920
be 48 by 48 DPs and here
they're 32 by 32 DPs.

00:26:30.920 --> 00:26:34.300
So this checks for a wide
variety of issues like putting

00:26:34.300 --> 00:26:37.460
bitmaps in the nodpi folder,
and things like that.

00:26:37.460 --> 00:26:41.500
I mean the drawable, not
drawable density folder.

00:26:41.500 --> 00:26:43.360
Lint is definitely useful for
checking your icons, as well

00:26:43.360 --> 00:26:45.130
as various other
polish issues.

00:26:45.130 --> 00:26:48.330
DANIEL LEHMANN: We saw the
dynamic behavior of selectors.

00:26:48.330 --> 00:26:50.170
We saw icons.

00:26:50.170 --> 00:26:52.180
We talked about spacing.

00:26:52.180 --> 00:26:55.230
Now at some point you want to
put all of this together.

00:26:55.230 --> 00:26:57.640
You might have heard about the
fragment API, and maybe never

00:26:57.640 --> 00:27:00.890
bothered to learn it, because
something that many people

00:27:00.890 --> 00:27:02.960
wonder is, why would
you learn it?

00:27:02.960 --> 00:27:04.990
You can simply use container
views, and they do a lot of

00:27:04.990 --> 00:27:08.610
the things that fragments
also do.

00:27:08.610 --> 00:27:11.570
I would like to show why using
the fragment API can be a

00:27:11.570 --> 00:27:13.180
really, really valuable tool.

00:27:13.180 --> 00:27:15.690
But before I do that, I want to
show how we use it in the

00:27:15.690 --> 00:27:17.940
systems context app to
make it aware of

00:27:17.940 --> 00:27:20.190
multiple screen sizes.

00:27:20.190 --> 00:27:22.010
So here we see the context
application on

00:27:22.010 --> 00:27:23.330
a 10 inch in portrait.

00:27:23.330 --> 00:27:25.360
You see there is a list
on the left and the

00:27:25.360 --> 00:27:26.510
details on the right.

00:27:26.510 --> 00:27:29.200
This is what we call
a two-pane UI.

00:27:29.200 --> 00:27:31.010
When we switch to seven
inch, we have

00:27:31.010 --> 00:27:32.180
essentially the same layout.

00:27:32.180 --> 00:27:34.420
It has a few tweaks, but again,
it's the list on the

00:27:34.420 --> 00:27:35.760
left and the details
on the right.

00:27:38.340 --> 00:27:40.020
Now, on phone it's a very
different layout.

00:27:40.020 --> 00:27:41.650
We show the list
in full screen.

00:27:41.650 --> 00:27:45.400
When I tap an item, I'm being
sent to the details screen.

00:27:45.400 --> 00:27:47.390
Now of course, as a programmer,
I don't want to

00:27:47.390 --> 00:27:49.140
reimplement my app twice.

00:27:49.140 --> 00:27:53.870
So what I want to do is, I want
to say that this and this

00:27:53.870 --> 00:27:56.210
part, that those
are equivalent.

00:27:56.210 --> 00:27:57.320
So how can I use that?

00:27:57.320 --> 00:27:58.090
How can I do that?

00:27:58.090 --> 00:28:00.390
So if I don't know about
the fragment API, a

00:28:00.390 --> 00:28:02.640
straightforward implementation
would be simply to use a

00:28:02.640 --> 00:28:04.390
container view and activities.

00:28:04.390 --> 00:28:06.990
So then it would look
something like this.

00:28:06.990 --> 00:28:09.530
So you have a list activity
and you put a very big

00:28:09.530 --> 00:28:10.800
ListView inside.

00:28:10.800 --> 00:28:13.920
You have a detail activity,
and you put the

00:28:13.920 --> 00:28:15.560
big DetailView inside.

00:28:15.560 --> 00:28:16.460
Now this is the phone.

00:28:16.460 --> 00:28:18.940
Now, once we go to tablets,
well, you

00:28:18.940 --> 00:28:20.310
reuse those two views.

00:28:20.310 --> 00:28:21.670
Put the ListView on
the left, put the

00:28:21.670 --> 00:28:23.010
DetailView on the right.

00:28:23.010 --> 00:28:25.070
And you put it all in
a common activity.

00:28:25.070 --> 00:28:27.230
You might reuse the list
activity or maybe you create a

00:28:27.230 --> 00:28:30.390
completely new activity, like
true pane activity.

00:28:30.390 --> 00:28:31.630
So this looks all fine.

00:28:31.630 --> 00:28:33.420
No need to learn about
fragments, right?

00:28:33.420 --> 00:28:35.240
Well, there's one problem.

00:28:35.240 --> 00:28:37.720
And that is, at some point you
want to add functionality.

00:28:37.720 --> 00:28:40.180
So let's say we want to
launch the camera.

00:28:40.180 --> 00:28:45.040
So when the user clicks this
icon, we want to send him over

00:28:45.040 --> 00:28:47.850
to the camera, allow him to snap
a picture, and then use

00:28:47.850 --> 00:28:48.910
the picture.

00:28:48.910 --> 00:28:51.520
Now, the picture comes back on
onActivityResult from the

00:28:51.520 --> 00:28:52.960
intent that we sent.

00:28:52.960 --> 00:28:56.810
Which is great, except that
onActivityResult is something

00:28:56.810 --> 00:28:59.240
that is implemented
by the activity.

00:28:59.240 --> 00:29:02.070
So detail activity has to
implement onActivityResult and

00:29:02.070 --> 00:29:06.420
then forward the result back to
DetailView, which is good.

00:29:06.420 --> 00:29:08.170
But we also have to do the
same thing now in list

00:29:08.170 --> 00:29:09.890
activity, because we're
not hosted by

00:29:09.890 --> 00:29:11.760
detail activity anymore.

00:29:11.760 --> 00:29:14.270
So we need a lot of boilerplate
code to

00:29:14.270 --> 00:29:16.010
just send this in.

00:29:16.010 --> 00:29:18.380
And activities are not
the only reason.

00:29:18.380 --> 00:29:19.290
There are a few more things.

00:29:19.290 --> 00:29:20.540
For example, option menus.

00:29:23.480 --> 00:29:25.970
You want them to be handled
inside of the view, because

00:29:25.970 --> 00:29:27.060
the view knows the state.

00:29:27.060 --> 00:29:29.480
So, for example, if you have a
Delete button or a delete menu

00:29:29.480 --> 00:29:30.990
item, you might want
to have this

00:29:30.990 --> 00:29:32.890
disabled in certain places.

00:29:32.890 --> 00:29:36.160
The view knows about this,
not the activity.

00:29:36.160 --> 00:29:40.670
Lifecycle, onResume, onPause,
data fetching.

00:29:40.670 --> 00:29:42.450
You want to load data
from a database, you

00:29:42.450 --> 00:29:43.770
want to process settings.

00:29:43.770 --> 00:29:46.470
Those kinds of things, they
all live in the activity.

00:29:46.470 --> 00:29:48.690
But they don't really
belong there.

00:29:48.690 --> 00:29:51.050
You want them to be
part of the view.

00:29:51.050 --> 00:29:53.100
So we actually tried this.

00:29:53.100 --> 00:29:54.380
In early Honeycomb, the context

00:29:54.380 --> 00:29:55.970
application is a good example.

00:29:55.970 --> 00:29:57.860
It was implemented like this.

00:29:57.860 --> 00:30:00.750
And it was a lot of
boilerplate code.

00:30:00.750 --> 00:30:02.840
We had to forward things
from the activity

00:30:02.840 --> 00:30:03.910
down into the views.

00:30:03.910 --> 00:30:06.030
And every activity had
to know what kind of

00:30:06.030 --> 00:30:06.840
things the view does.

00:30:06.840 --> 00:30:09.200
So if I add a new functionality
to the view, I

00:30:09.200 --> 00:30:13.010
have to change two different
activities to support that.

00:30:13.010 --> 00:30:15.040
We needed something better.

00:30:15.040 --> 00:30:18.240
And that is why fragments
were invented.

00:30:18.240 --> 00:30:20.070
So fragments, basically--

00:30:20.070 --> 00:30:22.400
if you think about them
visually, they basically take

00:30:22.400 --> 00:30:24.270
the place of the full
screen view.

00:30:24.270 --> 00:30:26.760
So in the phone layout, you
would use a full screen

00:30:26.760 --> 00:30:29.350
fragment for your panes.

00:30:29.350 --> 00:30:32.270
And on the tablet, again, one
pane is one fragment.

00:30:32.270 --> 00:30:34.370
Now this solves many
of those problems.

00:30:34.370 --> 00:30:37.140
So, for example, option menus
can be handled by fragments.

00:30:37.140 --> 00:30:39.660
You can get the result from the
activity that you called

00:30:39.660 --> 00:30:41.090
to get the camera result.

00:30:41.090 --> 00:30:43.840
You can get that back
in the fragment.

00:30:43.840 --> 00:30:45.530
Also, you have lifecycle
events.

00:30:45.530 --> 00:30:48.130
It is very much like
a simple activity.

00:30:48.130 --> 00:30:50.510
If you go through with this,
you will end up with

00:30:50.510 --> 00:30:52.360
activities that are
very, very thin.

00:30:52.360 --> 00:30:54.610
You probably have seen that
activities tend to get really

00:30:54.610 --> 00:30:56.450
messy and big.

00:30:56.450 --> 00:30:58.430
Once you do something like this,
your activities will be

00:30:58.430 --> 00:31:02.090
simple host fragments.

00:31:02.090 --> 00:31:04.690
They will configure fragments,
respond to intents, and

00:31:04.690 --> 00:31:07.250
coordinate how the fragments
communicate with each other.

00:31:07.250 --> 00:31:09.590
But apart from that, most of
your logic will live inside of

00:31:09.590 --> 00:31:11.170
the fragment.

00:31:11.170 --> 00:31:13.130
So this is not the only thing
that you can do with

00:31:13.130 --> 00:31:15.530
fragments, but I think it is
the most powerful and it

00:31:15.530 --> 00:31:18.790
really helps you to make
things easier.

00:31:18.790 --> 00:31:20.390
So great.

00:31:20.390 --> 00:31:22.790
So once we know how we can
use fragments to assemble

00:31:22.790 --> 00:31:25.220
different panes, you then
wonder what should

00:31:25.220 --> 00:31:27.490
the frames look like?

00:31:27.490 --> 00:31:32.710
Well, you probably all have
the Nexus 7 by now.

00:31:32.710 --> 00:31:34.510
The Nexus 7 is an interesting
device.

00:31:34.510 --> 00:31:36.160
A seven inch screen is
somewhere between

00:31:36.160 --> 00:31:37.520
a phone and a tablet.

00:31:37.520 --> 00:31:39.570
So you might wonder, what
should it look like?

00:31:39.570 --> 00:31:40.660
Should it behave more
like a phone?

00:31:40.660 --> 00:31:43.960
Or should it more behave
like a 10 inch tablet?

00:31:43.960 --> 00:31:45.740
So we tried both.

00:31:45.740 --> 00:31:50.950
Here is an example of what the
people application looks like

00:31:50.950 --> 00:31:53.240
if we make it behave
more like a phone.

00:31:53.240 --> 00:31:54.880
This is a full screen list.

00:31:54.880 --> 00:31:56.250
It actually looks decent.

00:31:56.250 --> 00:31:58.030
Could maybe tweak it a little
bit, make the pictures a

00:31:58.030 --> 00:32:01.260
little bigger, but it
mostly is good.

00:32:01.260 --> 00:32:03.970
Now, when we opened a contact,
it still looks pretty good,

00:32:03.970 --> 00:32:08.650
because the seven inch device
is very narrow and it feels

00:32:08.650 --> 00:32:11.700
very much like a phone
in portrait.

00:32:11.700 --> 00:32:14.530
Once we look at landscape,
things get a little uglier.

00:32:14.530 --> 00:32:18.190
So here, like 3/4 of the
screen are not used.

00:32:18.190 --> 00:32:20.240
Similar in the detail screen.

00:32:20.240 --> 00:32:21.680
This one could probably
be tweaked.

00:32:21.680 --> 00:32:29.860
But the list is really
a problem

00:32:29.860 --> 00:32:31.270
Let's try the other approach.

00:32:31.270 --> 00:32:33.940
So, this was the single
pane approach.

00:32:33.940 --> 00:32:35.710
Let's try the dual
pane approach.

00:32:35.710 --> 00:32:37.550
It looks really good
in landscape.

00:32:37.550 --> 00:32:40.040
But if we try to do the same
thing in portrait, things get

00:32:40.040 --> 00:32:40.860
very cramped.

00:32:40.860 --> 00:32:43.370
So, the left pane doesn't really
have a lot of space,

00:32:43.370 --> 00:32:44.210
and the right one either.

00:32:44.210 --> 00:32:48.350
So here's an example of a long
name, and it's clipped.

00:32:48.350 --> 00:32:49.680
So you can't really read it.

00:32:56.800 --> 00:32:59.380
Now at this point, you might
be tempted to say, hey, why

00:32:59.380 --> 00:33:00.670
don't we combine the two?

00:33:00.670 --> 00:33:06.340
So in portrait, we use the phone
layout, and in landscape

00:33:06.340 --> 00:33:08.420
we use a two pane UI.

00:33:08.420 --> 00:33:10.190
That's the problem with that.

00:33:10.190 --> 00:33:11.970
So let's look at the
portrait screen.

00:33:11.970 --> 00:33:15.010
And now we rotate it
into landscape.

00:33:15.010 --> 00:33:15.780
So this looks good.

00:33:15.780 --> 00:33:19.272
Now we rotate back.

00:33:19.272 --> 00:33:21.500
Rotate back, we're back
into the list.

00:33:21.500 --> 00:33:23.180
So this looks good so far.

00:33:23.180 --> 00:33:26.150
But if we start from the detail
view, we would rotate

00:33:26.150 --> 00:33:28.250
into the exact same screen.

00:33:28.250 --> 00:33:30.260
And now when the user rotates
back, what do

00:33:30.260 --> 00:33:31.640
you rotate back into?

00:33:31.640 --> 00:33:34.300
So, the naive implementation
would probably

00:33:34.300 --> 00:33:35.580
go back to the list.

00:33:35.580 --> 00:33:37.670
But now what happens is that
the user might even

00:33:37.670 --> 00:33:39.370
accidentally just rotate
the device, and

00:33:39.370 --> 00:33:40.730
you're suddenly lost.

00:33:40.730 --> 00:33:43.280
He's not in the same screen
anymore, and they have to

00:33:43.280 --> 00:33:45.930
navigate there again.

00:33:45.930 --> 00:33:47.260
Rotations can really be--

00:33:47.260 --> 00:33:50.340
like, you might be using
your tablet in the car.

00:33:50.340 --> 00:33:52.530
There's a little pothole, and
suddenly your device rotates

00:33:52.530 --> 00:33:53.430
for a second.

00:33:53.430 --> 00:33:56.260
So this is something that you
should try to prevent.

00:33:56.260 --> 00:33:59.680
What we try to achieve is, we
try to optimize the screens.

00:33:59.680 --> 00:34:03.820
For example, the left side in
the people application, we

00:34:03.820 --> 00:34:04.810
made it so that it works.

00:34:04.810 --> 00:34:07.730
We removed the pictures there,
but we keep the pane

00:34:07.730 --> 00:34:09.449
configuration.

00:34:09.449 --> 00:34:12.760
This is a concept that we call
rotational stability.

00:34:12.760 --> 00:34:15.300
So the number of panes should
not change while an

00:34:15.300 --> 00:34:16.469
application is running.

00:34:16.469 --> 00:34:19.345
It should only be based by the
physical size of the device.

00:34:21.989 --> 00:34:24.790
So that is rotational
stability.

00:34:24.790 --> 00:34:27.580
How can this all be tested?

00:34:27.580 --> 00:34:29.520
As you know, Android devices
come in a lot

00:34:29.520 --> 00:34:32.090
of different forms.

00:34:32.090 --> 00:34:36.889
One thing, obviously, is you
could buy all of them.

00:34:36.889 --> 00:34:39.969
First of all, thank you.

00:34:39.969 --> 00:34:43.239
It can get very expensive.

00:34:43.239 --> 00:34:47.080
We think there is a cheaper and,
in some ways, better way.

00:34:47.080 --> 00:34:50.400
So one thing that you can do is,
if you have a big device,

00:34:50.400 --> 00:34:53.330
you can always simulate a small
device inside of it.

00:34:53.330 --> 00:34:55.920
If you run this command, which
works on, I believe, Honeycomb

00:34:55.920 --> 00:35:00.300
and up, you can run
zoom in something

00:35:00.300 --> 00:35:02.660
like a nine inch mode.

00:35:02.660 --> 00:35:04.975
It is now suddenly
a 4:3 device.

00:35:04.975 --> 00:35:07.190
You have a different aspect
ratio, you have a different

00:35:07.190 --> 00:35:08.340
screen resolution.

00:35:08.340 --> 00:35:10.550
And you can do a lot of
development in there.

00:35:10.550 --> 00:35:13.375
We actually, at some point,
developed a lot of the seven

00:35:13.375 --> 00:35:17.570
inch work on a device like
this, on a modified Xoom.

00:35:17.570 --> 00:35:18.820
You can even go further.

00:35:18.820 --> 00:35:22.540
You can take a Nexus 7 and make
this run like a phone.

00:35:22.540 --> 00:35:25.250
You cannot make phone calls
with it, but it

00:35:25.250 --> 00:35:26.120
works like a phone.

00:35:26.120 --> 00:35:30.000
You get the single pane
UI, and so on.

00:35:30.000 --> 00:35:31.290
There's some limitations
to this.

00:35:31.290 --> 00:35:32.610
First of all, you cannot
change the

00:35:32.610 --> 00:35:33.530
density of a device.

00:35:33.530 --> 00:35:36.480
If you have a HTPI device
before, it'll still be an HTPI

00:35:36.480 --> 00:35:38.130
device afterwards.

00:35:38.130 --> 00:35:41.720
And also, Android does not
natively support changing the

00:35:41.720 --> 00:35:42.740
resolution at runtimes.

00:35:42.740 --> 00:35:46.000
So there's some caveats that
some applications might crash.

00:35:46.000 --> 00:35:49.600
The most common one that you run
into if you do something

00:35:49.600 --> 00:35:52.045
like this is actually
the system bar.

00:35:52.045 --> 00:35:56.920
So worst case, you lose access
to the Home button.

00:35:56.920 --> 00:35:58.080
There's some ways to
get around that.

00:35:58.080 --> 00:36:01.910
One is, you don't switch
between device buckets.

00:36:01.910 --> 00:36:03.760
If you change a 10 inch
device to a nine inch

00:36:03.760 --> 00:36:05.010
device, you'll be fine.

00:36:05.010 --> 00:36:08.090
If you change a 10 inch to a
phone, suddenly the system has

00:36:08.090 --> 00:36:11.430
to reconfigure so much that it
usually doesn't survive it.

00:36:11.430 --> 00:36:14.110
Another way is, if you have
a Bluetooth keyboard those

00:36:14.110 --> 00:36:15.560
keyboards have Back
and Home buttons.

00:36:15.560 --> 00:36:17.470
Then you can use your device
again, of course, for

00:36:17.470 --> 00:36:18.720
development.

00:36:20.440 --> 00:36:22.360
There's also a way out of this
which is pretty useful,

00:36:22.360 --> 00:36:23.740
because then you can use
your device again.

00:36:23.740 --> 00:36:25.800
TOR NORBYE: Another alternative
to buying hardware

00:36:25.800 --> 00:36:27.340
is to use the emulator.

00:36:27.340 --> 00:36:29.100
And hopefully you saw the tools
[INAUDIBLE] yesterday on

00:36:29.100 --> 00:36:33.400
some of the work we've done
to make it faster.

00:36:33.400 --> 00:36:36.150
With the emulator, you can
create virtual devices.

00:36:36.150 --> 00:36:38.390
So you can basically
create any hardware

00:36:38.390 --> 00:36:39.290
configuration you want.

00:36:39.290 --> 00:36:41.610
Pick the resolution, pick
the density, and then

00:36:41.610 --> 00:36:43.010
you can test it.

00:36:43.010 --> 00:36:45.800
And as we showed yesterday,
we're working on a feature

00:36:45.800 --> 00:36:48.310
where we also are pre-populating
the list with a

00:36:48.310 --> 00:36:49.500
bunch of existing hardware.

00:36:49.500 --> 00:36:51.690
So if you know you want them to
target a particular device,

00:36:51.690 --> 00:36:53.780
we can basically look up the
resolution for you and you can

00:36:53.780 --> 00:36:55.660
then test it.

00:36:55.660 --> 00:37:00.050
Now in many cases, you don't
even need to run the layout to

00:37:00.050 --> 00:37:01.140
see that there's a problem.

00:37:01.140 --> 00:37:02.870
You can actually do
some tweaking as

00:37:02.870 --> 00:37:04.000
you're designing it.

00:37:04.000 --> 00:37:07.020
So in the layout editor, we have
this configuration bar

00:37:07.020 --> 00:37:09.500
where you can very quickly see
how something is going to look

00:37:09.500 --> 00:37:12.630
in landscape mode, and you can
go and make tweaks to it.

00:37:12.630 --> 00:37:15.700
You can also check across
different languages, so you

00:37:15.700 --> 00:37:19.360
can see what something's going
to look like with a different

00:37:19.360 --> 00:37:22.010
message catalog, for example.

00:37:22.010 --> 00:37:24.440
So a feature we're working on
for an upcoming release is

00:37:24.440 --> 00:37:27.760
going to let you sort of get
to do this in parallel.

00:37:27.760 --> 00:37:30.530
So I can actually turn
on a preview of

00:37:30.530 --> 00:37:32.070
all the screen sizes.

00:37:32.070 --> 00:37:36.000
And as it's doing this, I can
then make edits and I can

00:37:36.000 --> 00:37:39.140
instantly see that, for example,
if I were to add this

00:37:39.140 --> 00:37:42.553
logo, this does not look good in
a two inch QVGA screen, but

00:37:42.553 --> 00:37:46.090
it looks OK from a
Nexus One and up.

00:37:46.090 --> 00:37:49.490
And I can use this to not just
check screen sizes, I can also

00:37:49.490 --> 00:37:53.670
check across locales, for
example, and see how this will

00:37:53.670 --> 00:37:57.610
look with different languages
and so on.

00:37:57.610 --> 00:37:59.540
When we're done with this, this
will hopefully be an even

00:37:59.540 --> 00:38:01.680
better way to very quickly make
sure that your layout

00:38:01.680 --> 00:38:04.650
doesn't have some big snafu
in a particular locale or

00:38:04.650 --> 00:38:06.460
hardware configuration
or orientation

00:38:06.460 --> 00:38:09.206
that you care about.

00:38:09.206 --> 00:38:10.822
DANIEL LEHMANN: Isn't
this awesome?

00:38:10.822 --> 00:38:16.958
[APPLAUSE]

00:38:16.958 --> 00:38:20.330
DANIEL LEHMANN: So the last
thing I want to mention is the

00:38:20.330 --> 00:38:22.060
targetSdkVersion.

00:38:22.060 --> 00:38:24.010
So targetSdkVersion is
an attribute that

00:38:24.010 --> 00:38:25.330
you set in your manifest.

00:38:25.330 --> 00:38:28.990
It's a very important number
to set, but we noticed some

00:38:28.990 --> 00:38:32.650
developers don't really
know what it is.

00:38:32.650 --> 00:38:35.130
A very common misconception is
that targetSdkVersion is the

00:38:35.130 --> 00:38:37.590
minimum version of
the SDK that your

00:38:37.590 --> 00:38:38.890
application needs to run.

00:38:38.890 --> 00:38:39.670
But it isn't.

00:38:39.670 --> 00:38:41.680
There is another one, and it's
called, surprisingly,

00:38:41.680 --> 00:38:43.670
minSdkVersion.

00:38:43.670 --> 00:38:45.480
That is the minimum version.

00:38:45.480 --> 00:38:48.890
There's also maxSdkVersion,
which is the maximum version,

00:38:48.890 --> 00:38:51.670
which we usually recommend not
to use, because if the user

00:38:51.670 --> 00:38:54.690
gets an update of their device
and they're really happy,

00:38:54.690 --> 00:38:56.590
suddenly they can't get
your app anymore.

00:38:56.590 --> 00:38:58.460
So what is targetSdk?

00:39:01.180 --> 00:39:04.460
TargetSdk is the highest version
of the SDK that you

00:39:04.460 --> 00:39:05.560
have tested against.

00:39:05.560 --> 00:39:07.540
The highest version that
you are aware of.

00:39:07.540 --> 00:39:10.380
If you set this to something
that is older, Android will

00:39:10.380 --> 00:39:12.950
put you in a compatibility mode
for all of the things

00:39:12.950 --> 00:39:13.780
that we change.

00:39:13.780 --> 00:39:16.310
So, for example, if we change
the color of notifications,

00:39:16.310 --> 00:39:19.140
there is a good chance that if
you set the target SDK version

00:39:19.140 --> 00:39:21.180
to something too low, that your
notifications will look

00:39:21.180 --> 00:39:24.030
out of place.

00:39:24.030 --> 00:39:27.970
I built a little application
here with targetSdkVersion=8.

00:39:27.970 --> 00:39:29.780
And you can see there are some
things that are wrong here.

00:39:29.780 --> 00:39:33.360
First of all, there's this
menu button that we don't

00:39:33.360 --> 00:39:35.150
really want any more.

00:39:35.150 --> 00:39:37.925
Also on the right corner,
there is a Zoom button

00:39:37.925 --> 00:39:39.980
because-- and zoom, with a z.

00:39:42.890 --> 00:39:44.340
So this is pixel
doubling mode.

00:39:44.340 --> 00:39:46.040
This is intended for
applications that are not

00:39:46.040 --> 00:39:48.350
aware of tablets.

00:39:48.350 --> 00:39:51.740
And lastly, the dialog
looks really old.

00:39:51.740 --> 00:39:52.950
This is Gingerbread style.

00:39:52.950 --> 00:39:55.910
And also, the Yes button is on
the left side, but it's a

00:39:55.910 --> 00:39:58.260
confirm button, which should be
on the right now, which we

00:39:58.260 --> 00:40:01.110
changed with Ice
Cream Sandwich.

00:40:01.110 --> 00:40:03.600
If I change the targetSdkVersion
of this

00:40:03.600 --> 00:40:06.100
application, it'll suddenly
look much, much better.

00:40:06.100 --> 00:40:07.400
The Menu button is gone.

00:40:07.400 --> 00:40:09.280
Instead we have an action bar.

00:40:09.280 --> 00:40:11.070
We have an Overflow
button up there.

00:40:11.070 --> 00:40:12.540
The Zoom button is gone.

00:40:12.540 --> 00:40:14.580
And also the dialog
looks much better.

00:40:14.580 --> 00:40:18.940
OK button is on the right,
Cancel is on the left.

00:40:18.940 --> 00:40:22.680
The one number that is important
that I would like to

00:40:22.680 --> 00:40:26.730
end with is your new friend,
this number.

00:40:26.730 --> 00:40:29.050
This is the targetSdkVersion
of Jellybean.

00:40:29.050 --> 00:40:34.860
If you set this, we will
not apply any kind of

00:40:34.860 --> 00:40:37.420
compatibility modes, and your
application will feel like a

00:40:37.420 --> 00:40:38.670
really new application.

00:40:41.740 --> 00:40:42.640
To wrap it up.

00:40:42.640 --> 00:40:45.030
RICHARD NGO: So to
close, for me--

00:40:45.030 --> 00:40:46.280
do the DPs.

00:40:49.030 --> 00:40:54.180
And really use the Holo widgets
and stencils as a

00:40:54.180 --> 00:40:57.820
building block to make your
application sing.

00:40:57.820 --> 00:41:02.500
DANIEL LEHMANN: Yeah, so from
my side, please make your UI

00:41:02.500 --> 00:41:04.120
items interactive.

00:41:04.120 --> 00:41:06.860
If you press an item, there
should be a pressed state.

00:41:06.860 --> 00:41:10.950
If not, think of the
[INAUDIBLE].

00:41:10.950 --> 00:41:12.210
Also, use the fragments.

00:41:12.210 --> 00:41:15.540
They really help you to turn
your application parts into

00:41:15.540 --> 00:41:17.640
components that you can
reuse and reassemble

00:41:17.640 --> 00:41:19.140
in different ways.

00:41:19.140 --> 00:41:21.091
And 16.

00:41:21.091 --> 00:41:23.120
TOR NORBYE: For me,
I would say, learn

00:41:23.120 --> 00:41:24.380
how to use the tools.

00:41:24.380 --> 00:41:27.230
We've only, I want to say,
scratched the tip of the

00:41:27.230 --> 00:41:28.620
iceberg, but I think I
mixed the metaphors.

00:41:28.620 --> 00:41:30.850
But I'm only showing the tip
of the iceberg in terms of

00:41:30.850 --> 00:41:32.690
what we have in the tools.

00:41:32.690 --> 00:41:34.370
Consider yourself
tradespeople.

00:41:34.370 --> 00:41:36.730
You want to really learn how
to use the tools, learn the

00:41:36.730 --> 00:41:38.590
key bindings, learn what
features are available.

00:41:38.590 --> 00:41:41.230
It's really going to come back
and pay off in spades.

00:41:41.230 --> 00:41:45.340
I think the thought I want
to leave you with is 16.

00:41:45.340 --> 00:41:47.490
So I think at this point we're
ready for questions?

00:41:47.490 --> 00:41:55.939
[APPLAUSE]

00:41:55.939 --> 00:41:57.950
TOR NORBYE: Yes?

00:41:57.950 --> 00:41:59.340
AUDIENCE: Thank you
for the lecture.

00:42:02.340 --> 00:42:04.635
I want to ask about the
[INAUDIBLE] attribute.

00:42:07.640 --> 00:42:11.080
I don't see anything in the
article complete when doing a

00:42:11.080 --> 00:42:15.310
question mark and then the
value of the attribute.

00:42:15.310 --> 00:42:18.005
You show an example
in the lecture?

00:42:18.005 --> 00:42:19.980
TOR NORBYE: You're asking about
code completion of theme

00:42:19.980 --> 00:42:21.412
attributes?

00:42:21.412 --> 00:42:24.610
AUDIENCE: Yeah, in XMLs.

00:42:24.610 --> 00:42:27.980
So there are attributes with a

00:42:27.980 --> 00:42:30.215
question mark at the beginning.

00:42:30.215 --> 00:42:32.410
TOR NORBYE: Yeah, those
are theme attributes.

00:42:32.410 --> 00:42:35.800
In ADT 20 we've added support
for navigating, but I don't

00:42:35.800 --> 00:42:37.190
think code completion
works with it yet.

00:42:37.190 --> 00:42:39.420
So hopefully we'll get that
into the next version.

00:42:39.420 --> 00:42:40.670
AUDIENCE: OK.

00:42:42.910 --> 00:42:43.330
Thank you.

00:42:43.330 --> 00:42:46.020
TOR NORBYE: Next question.

00:42:46.020 --> 00:42:47.330
AUDIENCE: Hi.

00:42:47.330 --> 00:42:50.130
Are the tools that you're
working on available in beta

00:42:50.130 --> 00:42:52.910
or current release or
anything like that?

00:42:52.910 --> 00:42:53.770
TOR NORBYE: Yes.

00:42:53.770 --> 00:42:55.410
We develop all the tools
in the open.

00:42:55.410 --> 00:42:59.560
So we have the adt-dev Google
group you can go to.

00:42:59.560 --> 00:43:00.610
You can see our discussions.

00:43:00.610 --> 00:43:03.520
And we are checking into the
external Garrett AOSP tree.

00:43:06.210 --> 00:43:07.680
This particular feature
that I showed from

00:43:07.680 --> 00:43:10.320
multi-configuration editing
is not checked in yet.

00:43:10.320 --> 00:43:12.010
It's sitting on this
hard drive.

00:43:12.010 --> 00:43:13.380
Hopefully it won't crash.

00:43:13.380 --> 00:43:15.340
But it'll be in soon.

00:43:15.340 --> 00:43:18.340
AUDIENCE: Thank you.

00:43:18.340 --> 00:43:21.320
AUDIENCE: My question is about
the revenue menu as seen in

00:43:21.320 --> 00:43:24.130
the Google+ application.

00:43:24.130 --> 00:43:26.040
I've done a simple
implementation of that, where

00:43:26.040 --> 00:43:29.680
I just have a frame layout and
two list views, and then I

00:43:29.680 --> 00:43:33.670
translate the top list view
to reveal the one below.

00:43:33.670 --> 00:43:37.540
My issue was with the action
bar, and how to get that to

00:43:37.540 --> 00:43:42.930
translate along with
the top list view.

00:43:42.930 --> 00:43:45.060
DANIEL LEHMANN: To be honest,
I'm not the right person to

00:43:45.060 --> 00:43:46.350
answer that question.

00:43:46.350 --> 00:43:49.358
Is Adam still in the
audience here?

00:43:49.358 --> 00:43:50.960
RICHARD NGO: Yeah,
Adam Powell would

00:43:50.960 --> 00:43:52.112
probably be the best person.

00:43:52.112 --> 00:43:54.120
TOR NORBYE: I think maybe you
can come up afterwards so we

00:43:54.120 --> 00:43:57.056
can put you in touch with the
right person to answer that.

00:43:57.056 --> 00:43:58.700
Because none of us actually
know the answer.

00:43:58.700 --> 00:44:00.668
AUDIENCE: He's in the
next session.

00:44:00.668 --> 00:44:02.060
TOR NORBYE: He's in
the next session.

00:44:02.060 --> 00:44:05.090
So apparently if you go to the
next talk-- is it here?

00:44:05.090 --> 00:44:06.030
It's here!

00:44:06.030 --> 00:44:10.470
All right, so you should ask
that question in an hour.

00:44:10.470 --> 00:44:14.700
AUDIENCE: Hi, I'm one of two
designers on a really big

00:44:14.700 --> 00:44:15.950
engineering team.

00:44:19.300 --> 00:44:23.350
I work with great guys, they're
super interested in

00:44:23.350 --> 00:44:25.440
putting out a great product.

00:44:25.440 --> 00:44:29.040
But I just want to know what
style of collaboration have

00:44:29.040 --> 00:44:34.030
you found is really valuable,
especially with some of these

00:44:34.030 --> 00:44:34.880
tools you've shown.

00:44:34.880 --> 00:44:37.340
Like, do you see these as
things that primarily

00:44:37.340 --> 00:44:38.770
engineers would use?

00:44:38.770 --> 00:44:41.760
Or kind of both of us?

00:44:41.760 --> 00:44:43.410
I don't like emailing
Photoshop files

00:44:43.410 --> 00:44:44.660
and just going outside.

00:44:47.412 --> 00:44:50.480
RICHARD NGO: For the most part,
we usually work really

00:44:50.480 --> 00:44:51.470
collaboratively.

00:44:51.470 --> 00:44:54.010
We sit really close to
each other and just

00:44:54.010 --> 00:44:55.660
show each other stuff.

00:44:55.660 --> 00:44:59.080
But most of our engineers
actually don't really know how

00:44:59.080 --> 00:45:01.700
to use Photoshop.

00:45:01.700 --> 00:45:03.815
DANIEL LEHMANN: And we have
[INAUDIBLE] machines.

00:45:03.815 --> 00:45:08.050
RICHARD NGO: And it's mostly
in GIMP, which you can see

00:45:08.050 --> 00:45:11.820
what the results are
out of GIMP.

00:45:11.820 --> 00:45:15.810
But it's really, really
beneficial to have everyone

00:45:15.810 --> 00:45:20.390
sit together and just work
together, and put most of the

00:45:20.390 --> 00:45:25.850
design work that's on your plate
and just really talk

00:45:25.850 --> 00:45:26.860
about it all the time.

00:45:26.860 --> 00:45:28.520
Because you'll get iteration
cycles that are

00:45:28.520 --> 00:45:30.200
just much more tighter.

00:45:30.200 --> 00:45:32.500
TOR NORBYE: And most of the
tools that the tools team is

00:45:32.500 --> 00:45:34.760
working on is primarily aimed
at developers, but we would

00:45:34.760 --> 00:45:39.470
like to bridge the gap a bit
more so that there isn't that

00:45:39.470 --> 00:45:42.150
hole between your Photoshop
assets and

00:45:42.150 --> 00:45:45.950
your nine patch files.

00:45:45.950 --> 00:45:49.730
DANIEL LEHMANN: The last thing
I would recommend is have a

00:45:49.730 --> 00:45:52.620
real process of how you get the
assets from the design to

00:45:52.620 --> 00:45:53.840
the developers.

00:45:53.840 --> 00:45:57.090
For example, the problem's now
have to give this back.

00:45:57.090 --> 00:45:59.240
You can use a version control
tool, which is very useful,

00:45:59.240 --> 00:46:01.080
but then the problem is you have
to tell the designers how

00:46:01.080 --> 00:46:02.020
to use GIMP.

00:46:02.020 --> 00:46:03.660
That turns out to be a
problem by itself.

00:46:03.660 --> 00:46:07.600
AUDIENCE: So we actually
use GIMP too.

00:46:07.600 --> 00:46:11.080
It's been a little rough at the
beginning, but it totally

00:46:11.080 --> 00:46:13.040
helps us out because we
actually can have some

00:46:13.040 --> 00:46:15.850
accountability from the
exchange of the

00:46:15.850 --> 00:46:17.890
files back and forth.

00:46:17.890 --> 00:46:19.220
AUDIENCE: Thank you.

00:46:19.220 --> 00:46:20.925
TOR NORBYE: Next question.

00:46:20.925 --> 00:46:21.360
AUDIENCE: Hi.

00:46:21.360 --> 00:46:24.380
Going back to the earlier part
of the talk, about the light

00:46:24.380 --> 00:46:25.610
and dark theming--

00:46:25.610 --> 00:46:28.410
I'm curious as to whether you've
done any usability

00:46:28.410 --> 00:46:32.730
testing on if an application
is meant to mainly be used

00:46:32.730 --> 00:46:37.940
outside, as to what the best
kind of theming is.

00:46:43.080 --> 00:46:46.550
RICHARD NGO: So the default
themes are pretty much in the

00:46:46.550 --> 00:46:49.990
middle the entire time.

00:46:49.990 --> 00:46:51.970
It's meant to be a foundational
point.

00:46:51.970 --> 00:46:57.265
So it'll look OK on LCDs,
and OLEDs, it's

00:46:57.265 --> 00:46:59.600
kind of already crushed.

00:46:59.600 --> 00:47:03.720
But to really crank that up, you
should really set your own

00:47:03.720 --> 00:47:05.405
styles and themes.

00:47:05.405 --> 00:47:06.655
AUDIENCE: Thank you.

00:47:09.320 --> 00:47:11.410
AUDIENCE: Hey, I was wondering
if you guys ever planned on

00:47:11.410 --> 00:47:17.480
releasing either stencils or
just general themes for the

00:47:17.480 --> 00:47:20.930
other primary colors that you
guys want in the style guide,

00:47:20.930 --> 00:47:22.970
like the red, the purple,
and the green.

00:47:22.970 --> 00:47:25.660
Because having to go through
and make that green

00:47:25.660 --> 00:47:28.032
highlighted button.

00:47:28.032 --> 00:47:30.730
RICHARD NGO: We can do that.

00:47:30.730 --> 00:47:35.740
We're really tight on just
getting the release out, but a

00:47:35.740 --> 00:47:40.680
good way to get a lot of that
work done is trying to push

00:47:40.680 --> 00:47:45.710
these guys to do it in code.

00:47:45.710 --> 00:47:47.600
But yeah, we'll work
on something

00:47:47.600 --> 00:47:49.670
in the future, hopefully.

00:47:49.670 --> 00:47:54.350
But for now, it's really
not that hard.

00:47:54.350 --> 00:47:56.880
Spend like an hour or two just
to get familiar with it.

00:47:56.880 --> 00:47:59.453
It will probably take you
two or three days.

00:47:59.453 --> 00:48:01.868
AUDIENCE: Thanks.

00:48:01.868 --> 00:48:03.340
AUDIENCE: Hey, guys.

00:48:03.340 --> 00:48:05.950
I got a selector question.

00:48:05.950 --> 00:48:11.070
My XML files work beautifully,
but when I create selectors in

00:48:11.070 --> 00:48:15.380
runtime, I'm just pulling down
three separate images--

00:48:15.380 --> 00:48:16.600
focused, normal, pressed--

00:48:16.600 --> 00:48:18.570
off the web.

00:48:18.570 --> 00:48:21.630
The only state that doesn't work
for me is the focused.

00:48:21.630 --> 00:48:24.040
I was wondering if that was
a known bug or something.

00:48:24.040 --> 00:48:27.880
DANIEL LEHMANN: I'm not aware
of any bug there.

00:48:27.880 --> 00:48:30.850
Are you sure it's not about the
problem of the ordering in

00:48:30.850 --> 00:48:31.470
the selector?

00:48:31.470 --> 00:48:34.405
AUDIENCE: I think I got it all
right, I did double, triple.

00:48:34.405 --> 00:48:35.070
TOR NORBYE: You're
saying you're

00:48:35.070 --> 00:48:36.370
constructing these at runtime?

00:48:36.370 --> 00:48:37.120
They're not XML files?

00:48:37.120 --> 00:48:37.795
AUDIENCE: Yeah.

00:48:37.795 --> 00:48:40.870
TOR NORBYE: I don't know
if we do a lot of that.

00:48:40.870 --> 00:48:43.865
Maybe you should file a
bug just to be safe.

00:48:43.865 --> 00:48:47.421
AUDIENCE: All right,
guys, thanks a lot.

00:48:47.421 --> 00:48:51.660
AUDIENCE: Hi, thank
you for lecture.

00:48:51.660 --> 00:48:53.870
Just a question about
the targetSdk.

00:48:53.870 --> 00:48:56.825
If I make it to the 16th and the
dialogues are compatible

00:48:56.825 --> 00:49:00.040
to the Jellybeans, what is this
version going to be on

00:49:00.040 --> 00:49:03.470
the Gingerbread, for instance,
where their buttons are in

00:49:03.470 --> 00:49:04.770
different order?

00:49:04.770 --> 00:49:09.320
DANIEL LEHMANN: So the dialog
will still look like

00:49:09.320 --> 00:49:12.050
Gingerbread on Gingerbread
because Gingerbread doesn't

00:49:12.050 --> 00:49:15.250
yet know about the fact that
the buttons were reversed.

00:49:15.250 --> 00:49:17.880
So the targetSdkVersion is
something that Android

00:49:17.880 --> 00:49:19.810
interprets at runtime.

00:49:19.810 --> 00:49:21.980
The IPK itself is basically
the same as before.

00:49:21.980 --> 00:49:23.550
TOR NORBYE: So what
you need to do if

00:49:23.550 --> 00:49:25.070
you're supporting both--

00:49:25.070 --> 00:49:26.395
we have a lint check
which tells you

00:49:26.395 --> 00:49:27.040
when this is the case.

00:49:27.040 --> 00:49:27.950
And it tells you what
you have to do.

00:49:27.950 --> 00:49:32.280
You have to create a v14
specific layout where you

00:49:32.280 --> 00:49:34.800
change the order so that you
can actually have both.

00:49:34.800 --> 00:49:37.620
There's no automatic reordering,
as far as I know,

00:49:37.620 --> 00:49:39.400
of your own dialogs.

00:49:39.400 --> 00:49:42.220
AUDIENCE: What would you
recommend to make them

00:49:42.220 --> 00:49:46.580
compatible, meaning what
is the priority?

00:49:46.580 --> 00:49:49.172
Setting the targetSdk?

00:49:49.172 --> 00:49:51.050
Or creating those
custom layouts.

00:49:51.050 --> 00:49:54.876
For instance, if I started
with the Gingerbread.

00:49:54.876 --> 00:49:57.040
TOR NORBYE: What you want to
do, is you want to try your

00:49:57.040 --> 00:49:59.310
application on the latest
available version.

00:49:59.310 --> 00:50:01.520
If it works, set the
thing to 16.

00:50:01.520 --> 00:50:03.400
That's going to be better in
many ways, even though there

00:50:03.400 --> 00:50:06.710
might be more tweaks you want to
do to take advantage of the

00:50:06.710 --> 00:50:09.610
Ice Cream Sandwich and
Holo look and feel.

00:50:09.610 --> 00:50:10.950
You're still going to be better
off, because it's going

00:50:10.950 --> 00:50:13.520
to get rid of some of the older
compatibility modes.

00:50:13.520 --> 00:50:16.130
The next step is then to go and
say OK, well what can I do

00:50:16.130 --> 00:50:17.080
to make this even better?

00:50:17.080 --> 00:50:18.760
And that would be where you
would do a custom layout if

00:50:18.760 --> 00:50:21.110
you want to, for example, change
the order of confirm

00:50:21.110 --> 00:50:22.335
buttons and things like that.

00:50:22.335 --> 00:50:23.350
AUDIENCE: I see.

00:50:23.350 --> 00:50:25.666
Thank you.

00:50:25.666 --> 00:50:26.970
AUDIENCE: Hi.

00:50:26.970 --> 00:50:28.120
Very simple question.

00:50:28.120 --> 00:50:31.660
Do you have an exact canvas size
that you use in Photoshop

00:50:31.660 --> 00:50:33.110
that you always start with?

00:50:33.110 --> 00:50:35.690
RICHARD NGO: I actually
make it super big.

00:50:35.690 --> 00:50:38.840
So I do 2560 by 1600.

00:50:38.840 --> 00:50:43.720
And then I actually have the
screen sizes all laid out and

00:50:43.720 --> 00:50:46.420
stacked up on top of each other,
just so that I can see

00:50:46.420 --> 00:50:48.395
the differences between
each kind of device.

00:50:48.395 --> 00:50:49.645
And I start that way.

00:50:52.162 --> 00:50:54.966
AUDIENCE: You design multiple
versions of a single layout?

00:50:54.966 --> 00:50:56.730
RICHARD NGO: Yeah.

00:50:56.730 --> 00:51:00.210
It's because we're working on
the entire platform release,

00:51:00.210 --> 00:51:01.800
so we're launching
on everything.

00:51:01.800 --> 00:51:04.955
So we have to design for
that entire spectrum.

00:51:04.955 --> 00:51:06.470
TOR NORBYE: So you have a
layer for each different

00:51:06.470 --> 00:51:07.200
device on top of each other?

00:51:07.200 --> 00:51:08.501
RICHARD NGO: Exactly.

00:51:08.501 --> 00:51:11.190
AUDIENCE: Do you start
with MDPI?

00:51:11.190 --> 00:51:14.520
RICHARD NGO: I usually start
there just to get the general

00:51:14.520 --> 00:51:15.560
layout right.

00:51:15.560 --> 00:51:19.460
If you are pretty experienced
you can actually do all of

00:51:19.460 --> 00:51:21.480
that math in your head.

00:51:21.480 --> 00:51:23.700
And it gets really natural
because they're all the same

00:51:23.700 --> 00:51:25.700
numbers over and over
and over again.

00:51:25.700 --> 00:51:29.770
So some of the team members
on our team start in XH.

00:51:29.770 --> 00:51:33.260
But as a beginner, you should
really start in MDPI, just to

00:51:33.260 --> 00:51:34.700
get the hang of it.

00:51:34.700 --> 00:51:38.190
Once you get pretty skilled, you
can move up to doing the

00:51:38.190 --> 00:51:40.965
native resolution of the device
you're working on.

00:51:40.965 --> 00:51:43.690
DANIEL LEHMANN: So the advantage
of MDPI is that one

00:51:43.690 --> 00:51:47.200
pixel is one DP, so you can
directly use the bitmap.

00:51:47.200 --> 00:51:49.580
Just put it on the device and
see how it looks like.

00:51:49.580 --> 00:51:51.730
AUDIENCE: Are you guys going
to upload some sort of

00:51:51.730 --> 00:51:53.820
template like that to
the design guide?

00:51:53.820 --> 00:51:56.170
RICHARD NGO: I actually worked
on something like that.

00:51:56.170 --> 00:51:57.770
I'm trying to push it out.

00:51:57.770 --> 00:52:00.565
So look for it in the future.

00:52:00.565 --> 00:52:01.410
AUDIENCE: Awesome.

00:52:01.410 --> 00:52:03.645
Thanks.

00:52:03.645 --> 00:52:05.050
AUDIENCE: Hi.

00:52:05.050 --> 00:52:08.530
The dot 3 or DPIs generally have
support for most of the

00:52:08.530 --> 00:52:12.720
resources, but is the
expectation for LDPI to get

00:52:12.720 --> 00:52:14.160
obscured by the framework?

00:52:14.160 --> 00:52:17.658
Or do you plan to update
them as well?

00:52:17.658 --> 00:52:19.420
DANIEL LEHMANN: Could you look
repeat the question, please?

00:52:19.420 --> 00:52:20.400
AUDIENCE: LDPI.

00:52:20.400 --> 00:52:22.240
Missing LDPI resources.

00:52:22.240 --> 00:52:23.970
DANIEL LEHMANN: LDPI.

00:52:23.970 --> 00:52:27.350
Yes, so the reason is that the
platform, the devices that we

00:52:27.350 --> 00:52:31.740
target, they are not targeting
an LDPI device at the moment.

00:52:31.740 --> 00:52:34.530
If you don't supply an LDPI,
Android will at runtime

00:52:34.530 --> 00:52:37.490
downscale the MDPI
asset for you.

00:52:37.490 --> 00:52:39.490
But in the platform,
we don't create

00:52:39.490 --> 00:52:40.970
customized version for LDPI.

00:52:40.970 --> 00:52:44.560
TOR NORBYE: We actually have a
screen, like a usage chart,

00:52:44.560 --> 00:52:47.000
that's based on, I think,
[INAUDIBLE]

00:52:47.000 --> 00:52:47.650
or check ins.

00:52:47.650 --> 00:52:49.190
I'm not sure exactly where
the data comes from.

00:52:49.190 --> 00:52:51.310
But it shows you the prevalence
of different screen

00:52:51.310 --> 00:52:52.750
sizes, and LDPI is a very small

00:52:52.750 --> 00:52:53.880
percentage at this point.

00:52:53.880 --> 00:52:56.590
I think it's like 2% or 4%.

00:52:56.590 --> 00:52:59.065
But it's pretty small.

00:52:59.065 --> 00:53:00.315
AUDIENCE: Thanks.

00:53:02.962 --> 00:53:05.910
AUDIENCE: I noticed that for the
buttons and the difference

00:53:05.910 --> 00:53:07.910
selected states, it seemed
like you were

00:53:07.910 --> 00:53:10.340
using images or PNGs.

00:53:10.340 --> 00:53:12.540
I know that you can also
create-- especially for simple

00:53:12.540 --> 00:53:16.570
backgrounds like that-- you can
create these through XML.

00:53:16.570 --> 00:53:19.090
I was always wondering about
the performance of that.

00:53:19.090 --> 00:53:21.020
Which would give you
better performance?

00:53:21.020 --> 00:53:23.730
Is there any preference
between the two?

00:53:23.730 --> 00:53:26.070
DANIEL LEHMANN: Usually
bitmaps.

00:53:26.070 --> 00:53:29.120
Simply because there are
less things that have

00:53:29.120 --> 00:53:30.290
to be done at runtime.

00:53:30.290 --> 00:53:33.340
But it might depend on the
concrete thing that you're

00:53:33.340 --> 00:53:34.020
trying to do.

00:53:34.020 --> 00:53:36.690
RICHARD NGO: Best person
to ask is Raman.

00:53:36.690 --> 00:53:38.730
TOR NORBYE: m his sidekick
is here.

00:53:38.730 --> 00:53:39.910
Did you hear the question?

00:53:39.910 --> 00:53:40.990
AUDIENCE: I didn't hear
the question.

00:53:40.990 --> 00:53:42.240
TOR NORBYE: OK, sorry.

00:53:45.524 --> 00:53:48.170
AUDIENCE: I'm a developer
and I want to play

00:53:48.170 --> 00:53:50.365
nicely with my designers.

00:53:50.365 --> 00:53:52.650
RICHARD NGO: That's
a good cause.

00:53:52.650 --> 00:53:56.430
AUDIENCE: I've showed them how
to use the layout editor in

00:53:56.430 --> 00:54:02.050
Android, but when they look at
my layout XML files, a lot of

00:54:02.050 --> 00:54:05.750
times they just see a lot of
nothing, because the text and

00:54:05.750 --> 00:54:09.170
images are layered at runtime.

00:54:09.170 --> 00:54:15.360
So is there a way that I can
provide placeholder stuff that

00:54:15.360 --> 00:54:16.080
won't [INAUDIBLE]

00:54:16.080 --> 00:54:19.770
my runtime APK or give
me lin errors about

00:54:19.770 --> 00:54:22.140
little text or things?

00:54:22.140 --> 00:54:23.250
TOR NORBYE: Yeah, that's
something we'd

00:54:23.250 --> 00:54:24.110
like to do more of.

00:54:24.110 --> 00:54:27.040
So what we do now with certain
widgets like list views and

00:54:27.040 --> 00:54:29.610
fragments, where we know it's
going to be populated at

00:54:29.610 --> 00:54:31.500
runtime, we put some
sample data in.

00:54:31.500 --> 00:54:33.480
But we have gotten some requests
for the ability to do

00:54:33.480 --> 00:54:35.693
this with, for example, labels
where the people don't want to

00:54:35.693 --> 00:54:37.280
see the text attribute, but
they want to have a design

00:54:37.280 --> 00:54:38.020
[INAUDIBLE].

00:54:38.020 --> 00:54:39.960
That's something we'd
like to work on.

00:54:39.960 --> 00:54:42.390
If this is important to you, one
simple thing you can do is

00:54:42.390 --> 00:54:44.500
to subclass the view.

00:54:44.500 --> 00:54:47.300
And then, basically, there's
actually a method you can call

00:54:47.300 --> 00:54:49.760
to see if you're running in a
tool or if you're not running

00:54:49.760 --> 00:54:50.620
in real runtime.

00:54:50.620 --> 00:54:52.680
I think it's view.isineditmode.

00:54:52.680 --> 00:54:54.760
So you can basically, like in
the paint method, just do

00:54:54.760 --> 00:54:57.320
something custom there, just
to work in the tools.

00:54:57.320 --> 00:54:59.260
But clearly that's not
a great solution.

00:54:59.260 --> 00:55:01.300
So we definitely want to try
to address that better.

00:55:04.590 --> 00:55:09.010
AUDIENCE: It comes up a
lot in views that are

00:55:09.010 --> 00:55:10.390
inside the list views.

00:55:10.390 --> 00:55:13.451
You know, the converter
things.

00:55:13.451 --> 00:55:16.120
TOR NORBYE: So you want to
preview your list views?

00:55:16.120 --> 00:55:18.630
AUDIENCE: I want to see my real
views that are going into

00:55:18.630 --> 00:55:19.940
my grid view or my list view.

00:55:19.940 --> 00:55:22.330
TOR NORBYE: One thing you can do
is, at design time, you can

00:55:22.330 --> 00:55:25.680
set up which layout to use
for the list view items.

00:55:25.680 --> 00:55:27.770
You can make your own layout
that is only meant for design

00:55:27.770 --> 00:55:29.770
time, and just do that as
a preview rendering.

00:55:34.018 --> 00:55:35.540
AUDIENCE: Hi.

00:55:35.540 --> 00:55:39.640
You guys earlier mentioned
something about problems you

00:55:39.640 --> 00:55:46.230
had with landscape orientation
for Peoples app.

00:55:46.230 --> 00:55:48.450
I noticed that launcher
supports

00:55:48.450 --> 00:55:50.340
portrait orientation only.

00:55:50.340 --> 00:55:51.590
Could you provide
an insight why?

00:55:54.235 --> 00:55:57.726
DANIEL LEHMANN: [INAUDIBLE] do
you have an answer to that?

00:55:57.726 --> 00:55:58.770
You heard the question?

00:55:58.770 --> 00:56:00.020
AUDIENCE: [INAUDIBLE].

00:56:04.880 --> 00:56:06.930
TOR NORBYE: I got the impression
that it had to do

00:56:06.930 --> 00:56:09.530
with usability, something about
sitting sideways and

00:56:09.530 --> 00:56:10.450
reading or something
like that.

00:56:10.450 --> 00:56:11.860
But I don't know the details.

00:56:11.860 --> 00:56:14.930
I'm kind of making it up.

00:56:14.930 --> 00:56:16.320
Sorry.

00:56:16.320 --> 00:56:20.190
We have people in the front
row-- but yeah, we don't have

00:56:20.190 --> 00:56:20.460
a good answer.

00:56:20.460 --> 00:56:22.080
AUDIENCE: OK, thanks.

00:56:22.080 --> 00:56:22.710
TOR NORBYE: All right,
so no more questions?

00:56:22.710 --> 00:56:25.300
DANIEL LEHMANN: Any
other questions?

00:56:25.300 --> 00:56:26.160
All right.

00:56:26.160 --> 00:56:27.210
TOR NORBYE: Thank you.

00:56:27.210 --> 00:56:29.922
[APPLAUSE]

