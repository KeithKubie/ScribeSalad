WEBVTT
Kind: captions
Language: en

00:00:00.580 --> 00:00:03.690
Let's look at a very simple implementation of a

00:00:03.690 --> 00:00:07.960
mutual exclusion lock. In terms of the instructions that the

00:00:07.960 --> 00:00:12.160
processor will execute in order to get this lock, will

00:00:12.160 --> 00:00:14.580
be to come in and check if the lock is

00:00:14.580 --> 00:00:18.140
currently available and that is done by this check.

00:00:18.140 --> 00:00:20.390
And if it is available then we're going to set it

00:00:20.390 --> 00:00:23.080
to one to indicate that, I've got the lock, nobody

00:00:23.080 --> 00:00:25.970
can get it. All right? That's the idea behind this

00:00:25.970 --> 00:00:28.430
check and then setting this to one. On the

00:00:28.430 --> 00:00:31.390
other hand, if somebody already has the lock L is

00:00:31.390 --> 00:00:34.950
going to be one and therefore I'm going to wait here

00:00:34.950 --> 00:00:39.040
until some the the lock is released. And once the

00:00:39.040 --> 00:00:42.340
lock is released, then I can go back and

00:00:42.340 --> 00:00:45.580
check again, to make sure that the lock is available

00:00:45.580 --> 00:00:47.350
and set it to one. So this is the basic

00:00:47.350 --> 00:00:51.030
idea. Very simple implementation of this lock. And, and how

00:00:51.030 --> 00:00:54.810
will I know that the lock has been released? Unlocking this is

00:00:54.810 --> 00:00:57.740
a very simple operation again. All that you have to do is

00:00:57.740 --> 00:01:02.210
reset this L to zero, and that'll indicate that the lock has

00:01:02.210 --> 00:01:05.209
been released. So, if I am waiting here, and somebody else has

00:01:05.209 --> 00:01:07.870
got the lock, they going to come and unlock it by setting it

00:01:07.870 --> 00:01:10.720
to zero. And that way, I will know that it has been

00:01:10.720 --> 00:01:13.260
released. I can go back. I double check to make sure it

00:01:13.260 --> 00:01:16.090
is still zero, because somebody else could have gotten in the middle.

00:01:16.090 --> 00:01:19.600
If nobody else has gotten it, then I can set it to one. So this is the idea of

00:01:19.600 --> 00:01:23.620
a simple, very simple minor implementation of, a lock

00:01:23.620 --> 00:01:28.770
algorithm. Is it possible to implement the simple minded implementation

00:01:28.770 --> 00:01:32.250
of the lock using atomic reads and writes alone?

00:01:32.250 --> 00:01:35.030
Let's talk thought this implementation here. Now, if you look

00:01:35.030 --> 00:01:37.650
at this set of instructions that the processor has

00:01:37.650 --> 00:01:41.180
to execute in order to acquire the lock. It has

00:01:41.180 --> 00:01:48.660
to first read L from memory, and then check if it is 0. And store that new

00:01:48.660 --> 00:01:51.530
value which is 1, into this memory location. That's

00:01:51.530 --> 00:01:54.180
a group of three instructions that the processor has

00:01:54.180 --> 00:01:57.110
to execute and the key thing is these three

00:01:57.110 --> 00:02:00.820
instructions have to be executed atomically in order to

00:02:00.820 --> 00:02:03.120
make sure that I got the lock and nobody

00:02:03.120 --> 00:02:06.740
else is going to interfere with my getting the lock.

00:02:06.740 --> 00:02:09.720
And as we know reads and writes instructions by

00:02:09.720 --> 00:02:12.760
themselves are atomic, but a group of reads and

00:02:12.760 --> 00:02:15.450
writes are not atomic and therefore. What we have

00:02:15.450 --> 00:02:18.050
here is a group of tree instructions and we need

00:02:18.050 --> 00:02:21.080
them to be atomic. What that means is we

00:02:21.080 --> 00:02:23.540
cannot have just reads and writes as the only

00:02:23.540 --> 00:02:27.480
atomic operations if we want to implement this lock

00:02:27.480 --> 00:02:32.090
algorithm. And we need a new semantic for an atomic

00:02:32.090 --> 00:02:36.670
instruction, and the semantic is what I call the read modify write operation.

00:02:36.670 --> 00:02:41.110
Meaning that I'm going to read from memory Modify the value and write it back to

00:02:41.110 --> 00:02:46.930
memory. So that's the kind of instruction that is needed in order to ensure that

00:02:46.930 --> 00:02:51.885
we can implement a lock algorithm. Now several flavors of

00:02:51.885 --> 00:02:57.760
read-modify-write instructions have been. Proposed, and

00:02:57.760 --> 00:03:00.850
or have been implemented in processor architectures. And

00:03:00.850 --> 00:03:02.880
we will look at a couple of them. The

00:03:02.880 --> 00:03:05.130
first one is what is called a test and

00:03:05.130 --> 00:03:08.830
set instruction. The idea here is, the test and

00:03:08.830 --> 00:03:12.700
set instruction takes on a memory location as an

00:03:12.700 --> 00:03:16.210
argument. And, what it does is, it returns the

00:03:16.210 --> 00:03:19.730
current value that is in this particular memory location.

00:03:19.730 --> 00:03:22.960
And also sets the memory location to a one.

00:03:22.960 --> 00:03:25.900
So, these two things that are being done.

00:03:25.900 --> 00:03:28.770
That is, getting the current value from memory

00:03:28.770 --> 00:03:30.640
and setting it to one, is being done

00:03:30.640 --> 00:03:33.210
atomically. That's the key thing. That it is

00:03:33.210 --> 00:03:37.640
testing the old value and setting it to this new value, atomically.

00:03:39.130 --> 00:03:44.070
Another atomic Read Modify Write instruction that has been imposed and/or

00:03:44.070 --> 00:03:49.220
implemented is what is called a fetch and increment instruction.

00:03:49.220 --> 00:03:52.330
And this takes on again, a memory location of an argument,

00:03:52.330 --> 00:03:54.150
and what it is gong to do is, it is going

00:03:54.150 --> 00:03:58.190
to fetch the old value of what was in the memory...

00:03:58.190 --> 00:04:01.640
And then incriment the current value that is in the emmory by

00:04:01.640 --> 00:04:04.810
one or whatever value. So it could be that this may

00:04:04.810 --> 00:04:07.440
take on an extra argument to indicate how much it is

00:04:07.440 --> 00:04:10.190
going to change it by. But in the simple version it

00:04:10.190 --> 00:04:15.020
might simply imple, increment, in the simple version it might simply incriment

00:04:15.020 --> 00:04:17.110
the current value that is in the memory location

00:04:17.110 --> 00:04:19.260
by one. As I said before, there have been

00:04:19.260 --> 00:04:22.570
several flavors of read modify write instructions that have

00:04:22.570 --> 00:04:28.620
been proposed in the literature. And often generically these

00:04:28.620 --> 00:04:32.650
read modify instructions are called fetch and phi instructions.

00:04:32.650 --> 00:04:34.280
Meaning that it is going to fetch an old

00:04:34.280 --> 00:04:37.550
value from memory. And do some operation on that

00:04:37.550 --> 00:04:39.940
fetched value and write it back to memory. So,

00:04:39.940 --> 00:04:41.650
for instance, fetch an increment is one flavor

00:04:41.650 --> 00:04:44.250
of that. There are other flavours like fetch

00:04:44.250 --> 00:04:48.150
and store, fetch and decrement compare and swap

00:04:48.150 --> 00:04:50.840
and so on. And you can read about that

00:04:50.840 --> 00:04:53.040
in the papers that we've identified for you.

00:04:54.200 --> 00:04:57.400
Okay, now that we have an atomic read modify

00:04:57.400 --> 00:05:01.620
write instruction available from the architecture, we can

00:05:01.620 --> 00:05:05.080
start looking at how to implement the mutual exclusion

00:05:05.080 --> 00:05:08.730
lock algorithems. Now, I gave you, of course,

00:05:08.730 --> 00:05:10.400
a very simple version of it, we'll talk

00:05:10.400 --> 00:05:12.660
more about that in a minute. And, and

00:05:12.660 --> 00:05:15.820
I'm sure that in the first project, when you

00:05:15.820 --> 00:05:19.700
implemented the mutual exclusion lock, you did not

00:05:19.700 --> 00:05:22.010
care too much about the scalability of your

00:05:22.010 --> 00:05:25.830
locking implementation. Now if you are implementing your

00:05:25.830 --> 00:05:30.155
mutual exclusion algorithm on a large scale shared memory

00:05:30.155 --> 00:05:32.440
multi-processor, let's say with 1000's of processes.

00:05:33.460 --> 00:05:37.000
You'll be very worried about making sure that,

00:05:37.000 --> 00:05:40.990
that your synchronization algorithm scale and scalability

00:05:40.990 --> 00:05:45.010
issues fundamental to the implementation of synchronization algorithms.

