WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.827
[MUSIC PLAYING]

00:00:01.827 --> 00:00:03.785
COLT MCANLIS: As developers,
there's nothing we

00:00:03.785 --> 00:00:06.160
like more than an amazing
activity that delights

00:00:06.160 --> 00:00:07.430
and entertains our users.

00:00:07.430 --> 00:00:10.360
But sadly, initializing all
the subsystems, resources,

00:00:10.360 --> 00:00:12.940
and layouts to provide that
experience takes a bit of time

00:00:12.940 --> 00:00:14.470
and memory, meaning
the users are

00:00:14.470 --> 00:00:16.839
going to have to wait for
their transcendent experience.

00:00:16.839 --> 00:00:19.380
My name is Colt McAnlis, and
one of the most important things

00:00:19.380 --> 00:00:21.296
that you can do for the
health and performance

00:00:21.296 --> 00:00:24.300
perception of your application
is optimizing the performance

00:00:24.300 --> 00:00:25.780
of loading your activities.

00:00:25.780 --> 00:00:27.760
Remember, when the
user launches your app,

00:00:27.760 --> 00:00:30.180
they'll be shown a start window
while your app is loading

00:00:30.180 --> 00:00:31.388
and getting ready to display.

00:00:31.388 --> 00:00:34.090
Now, most of the time, if your
user is spending too much time

00:00:34.090 --> 00:00:36.030
staring at the
screen, the problem

00:00:36.030 --> 00:00:39.350
is most likely to be in the
creation of your main activity.

00:00:39.350 --> 00:00:41.100
I mean, a bunch of
stuff happens here.

00:00:41.100 --> 00:00:43.540
You're setting the theme data,
inflating view hierarchy,

00:00:43.540 --> 00:00:45.660
loading bitmaps,
deserializing network fetches,

00:00:45.660 --> 00:00:47.290
writing user
preferences-- you know,

00:00:47.290 --> 00:00:49.834
all the stuff you need
to display your activity.

00:00:49.834 --> 00:00:52.250
But if you're not careful,
each of these little operations

00:00:52.250 --> 00:00:54.600
can fall into their own
performance pitfalls-- things

00:00:54.600 --> 00:00:56.225
like multiple garbage
collection events

00:00:56.225 --> 00:00:59.360
or waiting to inflate views or
blocking on network requests--

00:00:59.360 --> 00:01:01.070
all things which can
delay the time it

00:01:01.070 --> 00:01:04.209
takes for the first pixel
to be shown to the user.

00:01:04.209 --> 00:01:06.740
So if you'd like to streamline
your activity loading to give

00:01:06.740 --> 00:01:08.400
users the best
experience possible,

00:01:08.400 --> 00:01:10.230
here's what you need to do.

00:01:10.230 --> 00:01:11.910
First, figure out
if you actually

00:01:11.910 --> 00:01:14.741
have a problem, which you can
do with the method tracing tool.

00:01:14.741 --> 00:01:16.740
This will give you a
snapshot of your call stack

00:01:16.740 --> 00:01:18.364
and let you visually
see what functions

00:01:18.364 --> 00:01:19.680
are taking longer than others.

00:01:19.680 --> 00:01:21.930
If the onCreate function
of your activity

00:01:21.930 --> 00:01:24.190
is taking longer than
16 to 30 milliseconds,

00:01:24.190 --> 00:01:25.970
then it's worth exploring
more to see what

00:01:25.970 --> 00:01:27.400
might be causing the delay.

00:01:27.400 --> 00:01:29.920
And this can be done by
inserting trace commands

00:01:29.920 --> 00:01:31.670
at various parts of your code.

00:01:31.670 --> 00:01:33.690
When you do this, the
timing between the

00:01:33.690 --> 00:01:36.430
begin section and end sections
will be logged and then

00:01:36.430 --> 00:01:38.620
displayed in your
Systrace captures

00:01:38.620 --> 00:01:40.690
so that you can see more
information about where

00:01:40.690 --> 00:01:42.430
your time is going.

00:01:42.430 --> 00:01:45.545
Now, if you've found that your
load time is taking too long,

00:01:45.545 --> 00:01:47.170
hopefully you've been
able to narrow it

00:01:47.170 --> 00:01:48.860
down using the
inline tracing code.

00:01:48.860 --> 00:01:51.090
If not, here's a couple
of common problems

00:01:51.090 --> 00:01:52.500
and how to address them.

00:01:52.500 --> 00:01:56.060
Firstly, the most common problem
we see with slow activity loads

00:01:56.060 --> 00:02:00.150
has to be the time it takes
to inflate a view hierarchy.

00:02:00.150 --> 00:02:02.430
See, the larger your
hierarchy, the more time

00:02:02.430 --> 00:02:04.660
it's taken to inflate
it, and the more bitmaps

00:02:04.660 --> 00:02:08.590
or resources it requires to
load also adds to its load time.

00:02:08.590 --> 00:02:11.110
As such, anything you can
do to flatten the hierarchy,

00:02:11.110 --> 00:02:13.860
reduce complexity, or stub out
portions that aren't visible

00:02:13.860 --> 00:02:16.050
right now will help to
reduce the time spent

00:02:16.050 --> 00:02:18.740
doing this work at the
creation time of your activity.

00:02:18.740 --> 00:02:20.530
Secondly, try to
structure your code

00:02:20.530 --> 00:02:23.580
to rely on lazy loading
and async processing

00:02:23.580 --> 00:02:25.010
as much as possible.

00:02:25.010 --> 00:02:27.500
Commonly, the onCreate
method of your activity

00:02:27.500 --> 00:02:29.350
becomes a junk
drawer for all sorts

00:02:29.350 --> 00:02:31.160
of different
initialization routines.

00:02:31.160 --> 00:02:33.410
Some of those things do
need to happen right now.

00:02:33.410 --> 00:02:35.359
Others can be
delayed until later.

00:02:35.359 --> 00:02:37.650
This includes things like
doing initial minimal loading

00:02:37.650 --> 00:02:40.220
of your hierarchy, loading
all of your initial images

00:02:40.220 --> 00:02:42.840
in an async fashion, and
waiting to initialize

00:02:42.840 --> 00:02:46.580
heavy [INAUDIBLE] systems until
they are absolutely needed.

00:02:46.580 --> 00:02:49.110
Really, the lazier you
can make the creation

00:02:49.110 --> 00:02:51.630
and loading of your activity,
the better your performance

00:02:51.630 --> 00:02:52.250
will be.

00:02:52.250 --> 00:02:53.750
But that doesn't
mean you need to be

00:02:53.750 --> 00:02:56.025
lazy about the rest of your
application performance,

00:02:56.025 --> 00:02:58.400
which is why you should check
out the rest of the Android

00:02:58.400 --> 00:02:59.880
Performance Patterns videos.

00:02:59.880 --> 00:03:02.510
And don't forget to join
our Google+ community too.

00:03:02.510 --> 00:03:05.800
So keep calm, profile your
code, and always remember

00:03:05.800 --> 00:03:06.400
#perfmatters.

00:03:06.400 --> 00:03:09.450
[MUSIC PLAYING]

