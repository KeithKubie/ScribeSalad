WEBVTT
Kind: captions
Language: en

00:00:02.770 --> 00:00:03.770
Hi!

00:00:03.770 --> 00:00:07.440
My name is Colt MCAnlis, and I am a Developer
Advocate for Native Client.

00:00:07.440 --> 00:00:11.070
In this video, I am going to explain how you
can get started using Native Client to create

00:00:11.070 --> 00:00:12.730
applications.

00:00:12.730 --> 00:00:16.850
The first thing you need to do is get the
SDK and run naclsdk update.

00:00:16.850 --> 00:00:21.000
This downloads and unpacks the up-to-date
tools, headers and libraries that you’ll

00:00:21.000 --> 00:00:24.110
need to build Native Client applications.

00:00:24.110 --> 00:00:27.450
Then my recommendation is to become more familiar
with Pepper.

00:00:27.450 --> 00:00:32.090
Pepper is a set of bindings that expose the
power of the web platform to C and C++, giving

00:00:32.090 --> 00:00:34.970
your program the same capabilities that JavaScript
has.

00:00:34.970 --> 00:00:39.390
You can start by running some of the examples
and inspect their code.

00:00:39.390 --> 00:00:42.530
Understanding the build process is also critical.

00:00:42.530 --> 00:00:46.100
Start by running the SCons builders, and then
look at the output.

00:00:46.100 --> 00:00:49.750
Once you familiarized yourself with Native
Client’s basic architecture, then you are

00:00:49.750 --> 00:00:51.790
ready to build your project.

00:00:51.790 --> 00:00:55.329
If you are porting or building your app from
an existing code base, then you’ll need

00:00:55.329 --> 00:01:00.110
to make three key changes:
First you’ll need to make your C and C++

00:01:00.110 --> 00:01:06.220
source code portable; for that use only the
portable dialect of C and C++.

00:01:06.220 --> 00:01:11.810
Second you will need to use the Pepper interfaces
to access resources like graphics, audio,

00:01:11.810 --> 00:01:13.390
and input devices.

00:01:13.390 --> 00:01:17.539
This step makes the resulting application
OS-independent, because Pepper is an OS-independent

00:01:17.539 --> 00:01:18.979
API.

00:01:18.979 --> 00:01:23.161
Third if your application uses hardware accelerated
graphics, you will need to adapt it to use

00:01:23.161 --> 00:01:26.049
OpenGL ES 2.0.

00:01:26.049 --> 00:01:30.280
Once your project is done, then you need to
package it as a Chrome Web Store app - this

00:01:30.280 --> 00:01:34.299
way you will be able to reach more than 200
millions Chrome users.

00:01:34.299 --> 00:01:38.979
To learn more on how to use Native Client
check out our documentation at gonacl.com.

