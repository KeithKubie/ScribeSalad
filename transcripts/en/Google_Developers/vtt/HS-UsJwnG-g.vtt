WEBVTT
Kind: captions
Language: en

00:00:07.200 --> 00:00:09.370
MARTIN GORNER: Hello,
and welcome back

00:00:09.370 --> 00:00:10.870
on Root Access Berlin.

00:00:10.870 --> 00:00:16.280
I'm here today with Ignacio
Coloma, the CTO of Koliseo.

00:00:16.280 --> 00:00:20.400
IGNACIO COLOMA: Koliseo is a
start up that aims to make

00:00:20.400 --> 00:00:22.130
ticketing a pleasant
experience,

00:00:22.130 --> 00:00:23.600
as simple as possible.

00:00:23.600 --> 00:00:25.690
MARTIN GORNER: So let
us hear a demo.

00:00:25.690 --> 00:00:28.370
And here on the Koliseo website,
the nice thing is

00:00:28.370 --> 00:00:30.690
that you have implemented
sign ins with

00:00:30.690 --> 00:00:32.080
all possible accounts.

00:00:32.080 --> 00:00:35.060
I will sign in with
my Google account.

00:00:35.060 --> 00:00:38.930
And now, I want to
create an event.

00:00:38.930 --> 00:00:42.760
So the Factory will be opening
its doors for the first time

00:00:42.760 --> 00:00:44.430
in a couple of days.

00:00:44.430 --> 00:00:49.480
And I want to invite people
to the factory opening.

00:00:49.480 --> 00:00:54.100
In the next steps,
I can define the

00:00:54.100 --> 00:00:55.840
details of my event.

00:00:55.840 --> 00:01:00.670
I can also then create
tickets.

00:01:00.670 --> 00:01:05.330
And you have a platform for
handling all the flow,

00:01:05.330 --> 00:01:08.075
including registrations
on the venue itself.

00:01:08.075 --> 00:01:09.030
IGNACIO COLOMA: That's it.

00:01:09.030 --> 00:01:12.470
You can do can control how
the tickets are sold.

00:01:12.470 --> 00:01:13.630
You can set the prices.

00:01:13.630 --> 00:01:17.030
And you can also control the
access when the day comes.

00:01:17.030 --> 00:01:19.120
You can go and be in charge
of the event.

00:01:19.120 --> 00:01:21.190
And with your Android
device, you can just

00:01:21.190 --> 00:01:23.110
check out the tickets.

00:01:23.110 --> 00:01:23.970
MARTIN GORNER: All right.

00:01:23.970 --> 00:01:27.960
So now tell me, Ignacio,
why did you

00:01:27.960 --> 00:01:30.690
choose first App Engine?

00:01:30.690 --> 00:01:34.880
And then also, you chose to use
a NoSQL database, the App

00:01:34.880 --> 00:01:39.890
Engine Data Store, even if you
admitted that you had mostly

00:01:39.890 --> 00:01:41.680
SQL background before?

00:01:41.680 --> 00:01:42.170
IGNACIO COLOMA: That's right.

00:01:42.170 --> 00:01:45.570
We come from a company with
a lot of SQL experience.

00:01:45.570 --> 00:01:48.960
But for us, when we were
developing this project, we

00:01:48.960 --> 00:01:52.766
wanted something that could
scale, and that had--

00:01:52.766 --> 00:01:55.990
we wanted all the uptime,
but not the headaches.

00:01:55.990 --> 00:01:58.710
We didn't want to be answering
calls from our

00:01:58.710 --> 00:02:00.620
customers all day long.

00:02:00.620 --> 00:02:02.800
So we wanted to try
something new.

00:02:02.800 --> 00:02:04.790
MARTIN GORNER: And so yes, this
is something I hear a lot

00:02:04.790 --> 00:02:05.600
from start-ups.

00:02:05.600 --> 00:02:11.520
That they go with NoSQL because
it's fashionable.

00:02:11.520 --> 00:02:17.610
And here, I would like to hear
your expert opinion and help

00:02:17.610 --> 00:02:22.140
people decide rationally
between SQL and NoSQL.

00:02:22.140 --> 00:02:29.220
So maybe we can try to come up
with a list of checks that you

00:02:29.220 --> 00:02:32.040
can do against your project
requirements

00:02:32.040 --> 00:02:34.630
to help people decide.

00:02:34.630 --> 00:02:39.580
So the first thing to consider
is of course scalability.

00:02:39.580 --> 00:02:41.722
Can you tell us more
about that?

00:02:41.722 --> 00:02:44.410
IGNACIO COLOMA: When you're
talking about scalability in

00:02:44.410 --> 00:02:49.280
the SQL world, the things are
more already thought out.

00:02:49.280 --> 00:02:52.560
And the thing is you're
going to have,

00:02:52.560 --> 00:02:53.780
let's say, one server.

00:02:53.780 --> 00:02:55.890
Now, your server is going
to be scaling.

00:02:55.890 --> 00:02:58.260
And at some point, you
will have to put

00:02:58.260 --> 00:02:59.500
different servers as well.

00:02:59.500 --> 00:03:02.180
And you have to decide if you
want to do vertical sharding

00:03:02.180 --> 00:03:03.070
or horizontal sharding.

00:03:03.070 --> 00:03:05.340
You have to decide if you're
going to go with master

00:03:05.340 --> 00:03:06.430
replicates.

00:03:06.430 --> 00:03:12.040
When you want to make your
databases scale, you have to

00:03:12.040 --> 00:03:12.650
read a lot.

00:03:12.650 --> 00:03:15.590
You have to read about the
last 20 years of SQL

00:03:15.590 --> 00:03:18.680
databases, differentiate the
best practices from things

00:03:18.680 --> 00:03:20.820
that are more or less outdated
or something.

00:03:20.820 --> 00:03:23.880
With NoSQL, the thing is
you don't have this.

00:03:23.880 --> 00:03:26.020
You have a data store that's
going to work from the

00:03:26.020 --> 00:03:29.020
beginning and it's going to
scale for as many servers as

00:03:29.020 --> 00:03:31.020
you like automatically.

00:03:31.020 --> 00:03:32.470
Yes, you also have
a learning curve.

00:03:32.470 --> 00:03:33.710
But it's much shorter.

00:03:33.710 --> 00:03:36.330
It's more focused
on what matters.

00:03:36.330 --> 00:03:38.590
MARTIN GORNER: So actually,
the App Engine Data Store,

00:03:38.590 --> 00:03:42.260
which is one example of a NoSQL
database, what you say

00:03:42.260 --> 00:03:45.430
is that it's multi-server
from the start?

00:03:45.430 --> 00:03:45.790
IGNACIO COLOMA: Yeah.

00:03:45.790 --> 00:03:48.900
MARTIN GORNER: And it basically
hides from you all

00:03:48.900 --> 00:03:54.150
the multi-server complexity
that is powering it?

00:03:54.150 --> 00:03:56.730
IGNACIO COLOMA: High
availability, load balance,

00:03:56.730 --> 00:04:00.390
distribution of your data,
everything is taken care of

00:04:00.390 --> 00:04:01.000
automatically.

00:04:01.000 --> 00:04:02.370
You don't have to think
about that.

00:04:02.370 --> 00:04:03.790
You don't have to
configure that.

00:04:03.790 --> 00:04:05.100
It just works.

00:04:05.100 --> 00:04:07.850
MARTIN GORNER: The second point
that I hear a lot from

00:04:07.850 --> 00:04:15.110
people is that their feeling is
that NoSQL represents their

00:04:15.110 --> 00:04:17.970
data in a more natural way.

00:04:17.970 --> 00:04:21.430
Was that the case also
for Koliseo?

00:04:21.430 --> 00:04:24.980
IGNACIO COLOMA: When you're
talking about SQL databases,

00:04:24.980 --> 00:04:28.320
you have standard solutions
to standard problems.

00:04:28.320 --> 00:04:31.920
So you're always watching your
problems with the same lenses.

00:04:31.920 --> 00:04:33.150
Let's say for example
that you're talking

00:04:33.150 --> 00:04:34.430
about the user account.

00:04:34.430 --> 00:04:36.410
You have your user account.

00:04:36.410 --> 00:04:40.280
And as you have seen, you can
have multiple OAuth providers,

00:04:40.280 --> 00:04:42.120
so multiple credentials.

00:04:42.120 --> 00:04:45.150
How you do that with
a SQL database?

00:04:45.150 --> 00:04:50.240
MARTIN GORNER: So we tried to
represent on this slide here,

00:04:50.240 --> 00:04:52.350
and I think you need
two tables, right?

00:04:52.350 --> 00:04:53.080
IGNACIO COLOMA: Yes, right.

00:04:53.080 --> 00:04:57.110
You need a master
details table.

00:04:57.110 --> 00:04:59.650
And what you're going to do is
have a table with all your

00:04:59.650 --> 00:05:03.790
users, and another one with
all your OAuth IDs.

00:05:03.790 --> 00:05:06.430
And you're going to relate
one another.

00:05:06.430 --> 00:05:09.570
With NoSQL, it doesn't
have to be that way.

00:05:09.570 --> 00:05:11.690
You have other options.

00:05:11.690 --> 00:05:14.080
You have multi-valued fields.

00:05:14.080 --> 00:05:17.420
With multi-valued fields, the
same user can have multiple

00:05:17.420 --> 00:05:18.830
values for the same field.

00:05:18.830 --> 00:05:22.600
And you can handle that as
if it was a single value.

00:05:22.600 --> 00:05:26.630
So the same way you would have a
user with a single OAuth ID,

00:05:26.630 --> 00:05:29.270
for the same price, you can
have multiple values.

00:05:29.270 --> 00:05:32.060
And you don't need a separate
table for that.

00:05:32.060 --> 00:05:37.040
So for instance, here, my first
user, Bill K., has two

00:05:37.040 --> 00:05:40.580
accounts with which he can
log in on to Koliseo.

00:05:40.580 --> 00:05:44.930
And that means that any time I
want to return a user that has

00:05:44.930 --> 00:05:50.300
a given OAuth ID, in SQL,
I have to do a join.

00:05:50.300 --> 00:05:52.790
But also, whenever you
want to retrieve

00:05:52.790 --> 00:05:55.250
users by any criteria--

00:05:55.250 --> 00:06:00.460
let's say I want all my senior
users, like here, birth year

00:06:00.460 --> 00:06:02.830
less than 1950--

00:06:02.830 --> 00:06:09.420
then Bill K. will come up
twice in the results.

00:06:09.420 --> 00:06:12.210
Because the join actually
created two Bill K's, one Bill

00:06:12.210 --> 00:06:16.030
K. that has a Google provider,
and one Bill K. that had a

00:06:16.030 --> 00:06:17.290
Facebook provider.

00:06:17.290 --> 00:06:19.990
So now, when I handle those
users, I have to handle those

00:06:19.990 --> 00:06:20.770
duplicates.

00:06:20.770 --> 00:06:23.140
MARTIN GORNER: Yeah, that's
a common problem.

00:06:23.140 --> 00:06:27.440
And what I hear from people on
a philosophical level is that

00:06:27.440 --> 00:06:33.000
they like the fact that in a
NoSQL database, a user entity

00:06:33.000 --> 00:06:38.290
has its identity, it has its
key, and you know exactly

00:06:38.290 --> 00:06:40.080
where your user is.

00:06:40.080 --> 00:06:42.590
IGNACIO COLOMA: Yeah, it's
conceptually simpler because

00:06:42.590 --> 00:06:44.660
you have a single entity
with multiple values

00:06:44.660 --> 00:06:45.930
for the OAuth IDs.

00:06:45.930 --> 00:06:50.550
But you don't have to mix IDs
just because of the data store

00:06:50.550 --> 00:06:51.420
you're using.

00:06:51.420 --> 00:06:53.380
In that sense, it's
much simpler.

00:06:53.380 --> 00:06:56.450
MARTIN GORNER: So a brief
introduction about the code

00:06:56.450 --> 00:07:00.240
snippets that we will be seeing
during this episode.

00:07:00.240 --> 00:07:06.720
When making Koliseo, you also
made Simple DS, which is an

00:07:06.720 --> 00:07:11.230
access layer for the App Engine
database that allows

00:07:11.230 --> 00:07:15.740
you, correct me if I'm wrong,
that allows you to represent

00:07:15.740 --> 00:07:19.050
your database entities
using Java objects.

00:07:19.050 --> 00:07:20.460
IGNACIO COLOMA: Yeah,
that's right.

00:07:20.460 --> 00:07:24.620
You can get all the mapping
between Java and the data

00:07:24.620 --> 00:07:25.680
store into this.

00:07:25.680 --> 00:07:28.040
And you can match
and mix between.

00:07:28.040 --> 00:07:29.200
And you can use also a JSON

00:07:29.200 --> 00:07:31.880
representation, or nested objects.

00:07:31.880 --> 00:07:34.340
It takes care of all of that.

00:07:34.340 --> 00:07:35.900
It's a little bit
like Objectify.

00:07:35.900 --> 00:07:37.900
You also have that in
the Java world.

00:07:37.900 --> 00:07:41.440
It came out more less at the
same time as Simple DS.

00:07:41.440 --> 00:07:45.240
MARTIN GORNER: So on
scalability, NoSQL wins.

00:07:45.240 --> 00:07:49.910
On the way of representing
data, the philosophical

00:07:49.910 --> 00:07:53.840
argument is that NoSQL kind
of wins, although you

00:07:53.840 --> 00:07:55.140
can argue both ways.

00:07:55.140 --> 00:07:59.720
And now, the engineers designing
NoSQL databases also

00:07:59.720 --> 00:08:02.500
had to sacrifice some things.

00:08:02.500 --> 00:08:04.140
So let's talk about that.

00:08:04.140 --> 00:08:10.850
And first of all, maybe what is
really super nice about SQL

00:08:10.850 --> 00:08:13.490
databases is that they have
the SQL language.

00:08:13.490 --> 00:08:16.790
Anything I write that is
syntactically correct will

00:08:16.790 --> 00:08:21.410
execute, maybe slowly, maybe
using all of my memory.

00:08:21.410 --> 00:08:22.675
But it will execute.

00:08:22.675 --> 00:08:24.940
It will return results.

00:08:24.940 --> 00:08:26.480
IGNACIO COLOMA: Yeah,
I missed that a lot.

00:08:26.480 --> 00:08:27.440
I missed that a lot.

00:08:27.440 --> 00:08:29.670
You don't have that in NoSQL.

00:08:29.670 --> 00:08:32.780
Some of the queries that you
can imagine won't execute

00:08:32.780 --> 00:08:36.840
because you're using
incompatible ways of querying

00:08:36.840 --> 00:08:37.350
the data store.

00:08:37.350 --> 00:08:41.250
For example, you cannot query a
"different than." You cannot

00:08:41.250 --> 00:08:44.150
query values different than
two, for example.

00:08:44.150 --> 00:08:46.760
MARTIN GORNER: Even before
that, even if you want to

00:08:46.760 --> 00:08:52.040
query by inequality, value
equals something, you need an

00:08:52.040 --> 00:08:53.370
index on that value.

00:08:53.370 --> 00:08:55.950
IGNACIO COLOMA: Yeah.

00:08:55.950 --> 00:08:59.470
If you're going to launch a
query, you need an index for

00:08:59.470 --> 00:09:01.180
everything that is inside
of that query.

00:09:01.180 --> 00:09:05.390
For example, if you are querying
for a single value,

00:09:05.390 --> 00:09:07.440
then you need an index
for that value.

00:09:07.440 --> 00:09:10.200
If you need two values in the
same query, then you need a

00:09:10.200 --> 00:09:12.670
composite index for
these two values.

00:09:12.670 --> 00:09:16.310
Also, if you're sorting, sorting
by a value, querying

00:09:16.310 --> 00:09:19.460
by another value, you need a
composite index for that, too.

00:09:19.460 --> 00:09:22.280
And that's sometimes a problem
because every time you're

00:09:22.280 --> 00:09:24.930
inserting, you're inserting
the values, and also each

00:09:24.930 --> 00:09:26.600
index that you're adding.

00:09:26.600 --> 00:09:30.360
So sometimes, it's more the
effort of writing the indexes

00:09:30.360 --> 00:09:32.400
than it is writing
actual data.

00:09:32.400 --> 00:09:37.040
MARTIN GORNER: Yes, and also,
based on the queries that you

00:09:37.040 --> 00:09:41.510
want to run, you have to
organize your data in specific

00:09:41.510 --> 00:09:44.030
ways when you use a
NoSQL database.

00:09:44.030 --> 00:09:46.420
IGNACIO COLOMA: Yeah, sometimes
you have to plan in

00:09:46.420 --> 00:09:51.010
advance, how am I going to
query this data before

00:09:51.010 --> 00:09:53.440
you can design it.

00:09:53.440 --> 00:09:55.880
So how am I going to organize
my entities?

00:09:55.880 --> 00:09:57.710
Which indices am
I going to use?

00:09:57.710 --> 00:10:02.700
Sometimes, you have to
reorganize your data to be

00:10:02.700 --> 00:10:06.210
able to execute this other way
of querying this information,

00:10:06.210 --> 00:10:08.030
this feature or whatever.

00:10:08.030 --> 00:10:08.810
You need to do that.

00:10:08.810 --> 00:10:12.400
But that's also common
with SQL databases.

00:10:12.400 --> 00:10:13.960
At some point, they're
also refactored.

00:10:13.960 --> 00:10:16.640
So it's no news for any of us.

00:10:16.640 --> 00:10:20.670
MARTIN GORNER: But that is where
database schemas come in

00:10:20.670 --> 00:10:22.200
in SQL databases.

00:10:22.200 --> 00:10:25.780
When I want to add a new field,
I do one command, which

00:10:25.780 --> 00:10:31.360
is alter table, and I have
a new column in my table.

00:10:31.360 --> 00:10:34.330
If you want to do this in a
NoSQL database, it's slightly

00:10:34.330 --> 00:10:35.510
more complicated.

00:10:35.510 --> 00:10:36.130
IGNACIO COLOMA: Yeah.

00:10:36.130 --> 00:10:41.070
If you want to modify your
existing data in NoSQL

00:10:41.070 --> 00:10:44.550
databases, you have to iterate
over all the existing records,

00:10:44.550 --> 00:10:47.860
adding new fields, removing
existing fields, whatever, to

00:10:47.860 --> 00:10:51.490
get what you would do with
a single command with SQL

00:10:51.490 --> 00:10:54.090
databases that would be
alter table, and it's

00:10:54.090 --> 00:10:55.610
automatically there.

00:10:55.610 --> 00:11:02.260
MARTIN GORNER: And also, if I
have a large project based on

00:11:02.260 --> 00:11:08.820
SQL, usually I have a database
administrator who is the

00:11:08.820 --> 00:11:10.790
guardian of my schema.

00:11:10.790 --> 00:11:16.680
And he locks it down to prevent
random rogue engineers

00:11:16.680 --> 00:11:22.150
from adding random rogue fields
wherever they see that

00:11:22.150 --> 00:11:24.440
they would like to have them.

00:11:24.440 --> 00:11:28.050
IGNACIO COLOMA: Yeah, you won't
have that in NoSQL.

00:11:28.050 --> 00:11:30.760
For example, you wouldn't have
a referential integrity.

00:11:30.760 --> 00:11:36.190
So I can modify data by hand and
leave the data store in an

00:11:36.190 --> 00:11:37.320
inconsistent state.

00:11:37.320 --> 00:11:38.360
That can happen.

00:11:38.360 --> 00:11:42.240
You are not forced to have the
same structure in all your

00:11:42.240 --> 00:11:43.460
entities at all.

00:11:43.460 --> 00:11:47.390
And sometimes, that's good
because, for example, you have

00:11:47.390 --> 00:11:50.940
data that depends on the
kind that it has.

00:11:50.940 --> 00:11:53.490
I have one field, or I don't
have this field.

00:11:53.490 --> 00:11:54.300
I have a different field.

00:11:54.300 --> 00:11:56.700
You can use that to
your advantage.

00:11:56.700 --> 00:12:00.430
Or you can just use, in our
case, in Java, you have your

00:12:00.430 --> 00:12:01.420
persistent classes.

00:12:01.420 --> 00:12:06.080
And that defines the properties
that you have.

00:12:06.080 --> 00:12:08.800
You can use it, or
not, as you like.

00:12:08.800 --> 00:12:11.580
MARTIN GORNER: So that would
be another win for SQL, the

00:12:11.580 --> 00:12:13.290
presence of database schemas.

00:12:13.290 --> 00:12:16.490
And the last point that
I would like us

00:12:16.490 --> 00:12:18.590
to discuss is coherence.

00:12:18.590 --> 00:12:22.990
NoSQL being multi-server by
default, that is probably

00:12:22.990 --> 00:12:27.310
where the trade-offs
are the strongest.

00:12:27.310 --> 00:12:30.840
Let's distinguish two different
types of coherency,

00:12:30.840 --> 00:12:33.760
first the coherency
of transactions.

00:12:33.760 --> 00:12:37.190
On a transaction, you
want to be asset.

00:12:37.190 --> 00:12:39.040
And you always want
to be asset.

00:12:39.040 --> 00:12:40.560
There is no trade-off there.

00:12:40.560 --> 00:12:45.890
But to run a transaction on a
NoSQL database, you have to do

00:12:45.890 --> 00:12:47.630
something special.

00:12:47.630 --> 00:12:50.120
IGNACIO COLOMA: Yeah, concretely
in the App Engine

00:12:50.120 --> 00:12:52.630
Data Store, you have
entity groups.

00:12:52.630 --> 00:12:55.950
Entity groups are based
on that parent child

00:12:55.950 --> 00:12:57.260
relationship model.

00:12:57.260 --> 00:12:58.910
So you define your parent.

00:12:58.910 --> 00:13:01.890
And everything that is handing
from the parent, all of that

00:13:01.890 --> 00:13:03.485
shares the same transaction.

00:13:03.485 --> 00:13:08.040
MARTIN GORNER: And so you have
to put all your entities into

00:13:08.040 --> 00:13:12.050
one entity group before you can
run a transaction on that

00:13:12.050 --> 00:13:12.790
entity group?

00:13:12.790 --> 00:13:14.740
IGNACIO COLOMA: It's more
that you make clusters.

00:13:14.740 --> 00:13:17.490
All the entities are a cluster
are going to be part of that

00:13:17.490 --> 00:13:19.290
transaction.

00:13:19.290 --> 00:13:23.020
That was originally the only way
you had in App Engine to

00:13:23.020 --> 00:13:24.040
do transactions.

00:13:24.040 --> 00:13:27.510
Actually, now it's more
flexible, and now you can make

00:13:27.510 --> 00:13:32.630
cross-group transactions, XE
transactions that can put up

00:13:32.630 --> 00:13:35.440
to five different entity
groups in the same

00:13:35.440 --> 00:13:35.760
transaction.

00:13:35.760 --> 00:13:38.990
MARTIN GORNER: And also, the
fact that you put entities

00:13:38.990 --> 00:13:45.110
into one transaction group, that
severely limits the rate

00:13:45.110 --> 00:13:49.820
at which you can write to that
transaction group, right?

00:13:49.820 --> 00:13:50.430
IGNACIO COLOMA: Yup.

00:13:50.430 --> 00:13:56.190
You have a limited rate of, I
think, it's something like one

00:13:56.190 --> 00:13:58.330
to five writes per second.

00:13:58.330 --> 00:13:59.220
MARTIN GORNER: So that's
very long.

00:13:59.220 --> 00:14:00.220
IGNACIO COLOMA: Yeah,
actually.

00:14:00.220 --> 00:14:02.230
And you can create a
great [INAUDIBLE]

00:14:02.230 --> 00:14:02.800
there.

00:14:02.800 --> 00:14:06.700
If you have a lot of users
trying to push their

00:14:06.700 --> 00:14:09.280
transactions in the same
transaction group-- if it's

00:14:09.280 --> 00:14:11.090
different transaction
groups, it's fine.

00:14:11.090 --> 00:14:13.300
But if it's in the same
transaction group, you have a

00:14:13.300 --> 00:14:14.010
limitation there.

00:14:14.010 --> 00:14:16.160
MARTIN GORNER: Briefly, I would
like to mention a second

00:14:16.160 --> 00:14:20.040
type of coherency, which is
the read your own writes

00:14:20.040 --> 00:14:23.770
coherency, which in
the SQL world,

00:14:23.770 --> 00:14:26.090
again, is usually exact.

00:14:26.090 --> 00:14:31.530
And here in the NoSQL world,
it can happen that

00:14:31.530 --> 00:14:32.910
you send the right.

00:14:32.910 --> 00:14:37.190
And even reads that come after
it still see the old value

00:14:37.190 --> 00:14:40.990
until a certain point in time
where the new value will

00:14:40.990 --> 00:14:42.090
become visible.

00:14:42.090 --> 00:14:45.880
So it's called eventual
consistency.

00:14:45.880 --> 00:14:47.390
IGNACIO COLOMA: Yes,
that's right.

00:14:47.390 --> 00:14:49.620
MARTIN GORNER: Was that
a problem for you?

00:14:49.620 --> 00:14:52.280
IGNACIO COLOMA: Not usually.

00:14:52.280 --> 00:14:56.310
It's not usually a problem
because we are talking about

00:14:56.310 --> 00:15:00.740
one second of time between I
do the change, and all the

00:15:00.740 --> 00:15:03.670
queries in the world that are
going to see that change.

00:15:03.670 --> 00:15:05.230
There's always that small gap.

00:15:05.230 --> 00:15:08.780
Maybe your listing, your user
listing, is going to be one

00:15:08.780 --> 00:15:09.880
second outdated.

00:15:09.880 --> 00:15:11.490
That's not a big deal.

00:15:11.490 --> 00:15:12.180
MARTIN GORNER: So it's
something you

00:15:12.180 --> 00:15:13.620
have to know about.

00:15:13.620 --> 00:15:17.960
But in your opinion, that was
actually a good thing, a good

00:15:17.960 --> 00:15:20.140
constraint to relax?

00:15:20.140 --> 00:15:21.140
IGNACIO COLOMA: Yeah, yeah.

00:15:21.140 --> 00:15:25.050
MARTIN GORNER: Let's recap
here the five points.

00:15:25.050 --> 00:15:27.490
On scalability, NoSQL wins.

00:15:27.490 --> 00:15:30.990
I think we all agree on that.

00:15:30.990 --> 00:15:34.490
On the way you can structure
your data--

00:15:34.490 --> 00:15:36.670
IGNACIO COLOMA: Multiple
valued fields

00:15:36.670 --> 00:15:39.000
is a big win here.

00:15:39.000 --> 00:15:41.220
And I really don't miss
all those things.

00:15:41.220 --> 00:15:44.590
But yes, we were talking before,
maybe that's a problem

00:15:44.590 --> 00:15:47.180
for some heavy users.

00:15:47.180 --> 00:15:49.690
MARTIN GORNER: Yes, but on the
other hand, SQL is a great

00:15:49.690 --> 00:15:52.620
language if you have a DB admin

00:15:52.620 --> 00:15:54.610
enforcing strong schemas.

00:15:54.610 --> 00:15:58.070
That is something you will
miss in the NoSQL world.

00:15:58.070 --> 00:16:06.860
And the way you run transactions
in NoSQL involves

00:16:06.860 --> 00:16:10.090
slightly more work than
in the SQL world.

00:16:10.090 --> 00:16:10.690
IGNACIO COLOMA: Yeah.

00:16:10.690 --> 00:16:12.770
MARTIN GORNER: All right, thank
you very much, Ignacio.

00:16:12.770 --> 00:16:16.920
And we will be seeing you again
in the next episode.

00:16:16.920 --> 00:16:20.940
In the next episode, we'll have
tips and tricks to help

00:16:20.940 --> 00:16:24.520
you overcome some of those NoSQL
limitations so that you

00:16:24.520 --> 00:16:29.200
can take advantage of the power
of NoSQL and still work

00:16:29.200 --> 00:16:32.050
around the limitations.

00:16:32.050 --> 00:16:34.160
IGNACIO COLOMA: Yup,
that will be fun.

00:16:34.160 --> 00:16:35.640
MARTIN GORNER: So we'll
see you next time.

00:16:35.640 --> 00:16:37.840
Thank you very much, Ignacio,
for being with us.

00:16:37.840 --> 00:16:38.580
IGNACIO COLOMA: Thanks.

00:16:38.580 --> 00:16:41.130
MARTIN GORNER: Thank you for
watching Root Access Berlin.

00:16:41.130 --> 00:16:41.590
Goodbye.

00:16:41.590 --> 00:16:42.840
IGNACIO COLOMA: Bye.

