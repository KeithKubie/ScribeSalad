WEBVTT
Kind: captions
Language: en

00:00:02.639 --> 00:00:04.930
It's important for your app
to stay up to date in order

00:00:04.930 --> 00:00:07.570
to get the latest social feeds,
news, and weather reports

00:00:07.570 --> 00:00:10.310
to your users, but in
truth, syncing too often

00:00:10.310 --> 00:00:12.440
can be the worst idea
for the performance

00:00:12.440 --> 00:00:13.542
of your application.

00:00:13.542 --> 00:00:15.000
My name is Colt
McAnlis and there's

00:00:15.000 --> 00:00:17.220
one hard and fast rule
when it comes to syncing

00:00:17.220 --> 00:00:19.270
your data over the network.

00:00:19.270 --> 00:00:21.190
Do not over sync.

00:00:21.190 --> 00:00:22.600
It's a pretty common situation.

00:00:22.600 --> 00:00:24.524
The user has your
app active or maybe

00:00:24.524 --> 00:00:26.815
it was the last app they used
and you want to make sure

00:00:26.815 --> 00:00:29.026
that there's plenty of new
data available for them

00:00:29.026 --> 00:00:30.400
so that they won't
close your app

00:00:30.400 --> 00:00:32.810
or let their attention
wander elsewhere.

00:00:32.810 --> 00:00:33.750
So you sync.

00:00:33.750 --> 00:00:34.380
You sync a lot.

00:00:34.380 --> 00:00:36.130
You ping the server,
you ask for new data,

00:00:36.130 --> 00:00:39.340
and bring it down as often as
you can, but let's face it,

00:00:39.340 --> 00:00:41.540
this is a horrible idea.

00:00:41.540 --> 00:00:43.520
Firstly, this destroys
the user's battery

00:00:43.520 --> 00:00:45.280
and as we've said
before, networking

00:00:45.280 --> 00:00:47.770
is the single biggest
battery hog there is.

00:00:47.770 --> 00:00:51.190
Not only does it drain battery
just to initialize the chip,

00:00:51.190 --> 00:00:54.280
but then it keeps it awake for
an additional 20 to 60 seconds

00:00:54.280 --> 00:00:58.045
after you're done with your
request, also drawing power.

00:00:58.045 --> 00:01:00.170
In fact, you can fall into
a really bad place where

00:01:00.170 --> 00:01:01.670
each one of your
networking requests

00:01:01.670 --> 00:01:04.370
ends waking up the radio
and paying this cost.

00:01:04.370 --> 00:01:05.330
Not ideal.

00:01:05.330 --> 00:01:07.300
Secondly, consider the
sheer volume of bits

00:01:07.300 --> 00:01:09.530
that your app is now
responsible for requesting

00:01:09.530 --> 00:01:10.580
on the user's phone.

00:01:10.580 --> 00:01:13.010
Now, for users on
restricted usage data plans,

00:01:13.010 --> 00:01:15.350
this can be a make
or break crime.

00:01:15.350 --> 00:01:17.750
One app eating of a
month's worth of bandwidth

00:01:17.750 --> 00:01:20.510
simply because it keeps pinging
the server for new data?

00:01:20.510 --> 00:01:22.964
Not a good idea and this
is also a double whammy

00:01:22.964 --> 00:01:24.380
because the slower
the connection,

00:01:24.380 --> 00:01:27.110
the longer the radio stays on
to help transfer data, meaning

00:01:27.110 --> 00:01:29.360
that you're not only being
taxed for bits on the wire,

00:01:29.360 --> 00:01:31.870
but also draining more
battery as a result.

00:01:31.870 --> 00:01:34.310
So, OK, so syncing
too often is bad,

00:01:34.310 --> 00:01:36.224
but let's be realistic here.

00:01:36.224 --> 00:01:38.390
Your app needs the data in
order to provide the user

00:01:38.390 --> 00:01:39.580
with the best experience.

00:01:39.580 --> 00:01:42.320
We can't just cut syncing
out completely, right,

00:01:42.320 --> 00:01:44.390
and the truth is
you don't have to.

00:01:44.390 --> 00:01:45.930
There's a few handy
trick that you

00:01:45.930 --> 00:01:47.388
can employ which
will give the user

00:01:47.388 --> 00:01:49.710
the same sense of
functionality but require

00:01:49.710 --> 00:01:50.807
much fewer requests.

00:01:50.807 --> 00:01:53.140
The key to this solution is
understanding the difference

00:01:53.140 --> 00:01:55.370
between stuff that has
to happen right now

00:01:55.370 --> 00:01:56.970
and stuff that could be delayed.

00:01:56.970 --> 00:01:59.340
For example, if the user
takes an action requesting

00:01:59.340 --> 00:02:00.936
that the news feed
updates right now,

00:02:00.936 --> 00:02:03.310
well, then you pretty much
have to kick off that request,

00:02:03.310 --> 00:02:05.160
but really, the
second and third types

00:02:05.160 --> 00:02:07.720
are where you can actually
start improving performance.

00:02:07.720 --> 00:02:10.020
The requests that happen
on regular intervals that

00:02:10.020 --> 00:02:11.860
keep things up to
date but don't need

00:02:11.860 --> 00:02:13.787
to happen right this second.

00:02:13.787 --> 00:02:15.370
If it's not super
important right now,

00:02:15.370 --> 00:02:18.390
then you could be smarter
about how it's synced.

00:02:18.390 --> 00:02:19.240
Case in point.

00:02:19.240 --> 00:02:22.340
You should really never poll the
server regularly for updates.

00:02:22.340 --> 00:02:24.587
You're basically just
wasting bandwidth and battery

00:02:24.587 --> 00:02:26.670
for the server to tell you
that nothing's changed.

00:02:26.670 --> 00:02:29.230
Instead, it's better to
leverage other services

00:02:29.230 --> 00:02:31.290
like Google Cloud
Messaging, which

00:02:31.290 --> 00:02:34.040
will let the server signal the
app when there's new content.

00:02:34.040 --> 00:02:35.623
This will reduce the
amount of battery

00:02:35.623 --> 00:02:37.190
churn the phone is
doing and reduce

00:02:37.190 --> 00:02:38.970
the overall number
of server responses

00:02:38.970 --> 00:02:40.730
that you need to worry about.

00:02:40.730 --> 00:02:43.569
Now, if there's a situation
where you simply have to sync,

00:02:43.569 --> 00:02:46.110
then make sure that you're not
doing it on regular intervals.

00:02:46.110 --> 00:02:49.200
Remember, this wastes
resources and most the time,

00:02:49.200 --> 00:02:51.310
there won't be new
content waiting for you.

00:02:51.310 --> 00:02:54.340
Instead, adopt a back-off
pattern based on responses.

00:02:54.340 --> 00:02:57.540
For instance, if no new data
is available, double the length

00:02:57.540 --> 00:03:00.040
you wait until you check again
and if nothing's available

00:03:00.040 --> 00:03:02.707
the next time, double
your wait length again.

00:03:02.707 --> 00:03:04.790
This will still allow you
to sync against the data

00:03:04.790 --> 00:03:07.440
but we'll slowly back away
from higher activity based

00:03:07.440 --> 00:03:10.290
on how frequent the server
site information is updating.

00:03:10.290 --> 00:03:13.300
And don't forget, you can
also adjust seek frequency

00:03:13.300 --> 00:03:14.810
based on user activity.

00:03:14.810 --> 00:03:17.110
For example, if you can detect
that the user is driving

00:03:17.110 --> 00:03:19.647
or running or if the phone
has entered into sleep mode,

00:03:19.647 --> 00:03:21.980
you can make a good assumption
that they won't need data

00:03:21.980 --> 00:03:23.420
at the same rate.

00:03:23.420 --> 00:03:24.920
On the other side,
though, if you've

00:03:24.920 --> 00:03:26.780
noticed that the phone has
been asleep for eight hours

00:03:26.780 --> 00:03:28.660
and suddenly starts
getting moved around,

00:03:28.660 --> 00:03:30.940
then there's a good chance
the user has just woken up

00:03:30.940 --> 00:03:33.650
and it might be the right time
to kick off the sync request.

00:03:33.650 --> 00:03:36.660
And, finally don't hesitate
to adjust your sync frequency

00:03:36.660 --> 00:03:38.520
based on the state
of the device.

00:03:38.520 --> 00:03:40.780
Waiting for it to plugged
in or connected to Wi-Fi

00:03:40.780 --> 00:03:43.180
to do syncing helps
keep the battery happy

00:03:43.180 --> 00:03:45.980
while users are out and
about and the good news

00:03:45.980 --> 00:03:48.090
is that you can update
your app to adopt

00:03:48.090 --> 00:03:50.900
these patterns without having to
write a massive amount of code.

00:03:50.900 --> 00:03:54.440
GCM Network Manager is a
Google Play services API

00:03:54.440 --> 00:03:56.810
which helps to schedule
network-oriented tasks

00:03:56.810 --> 00:03:58.650
and handle batching for you.

00:03:58.650 --> 00:04:00.470
This greatly simplifies
the implementation

00:04:00.470 --> 00:04:02.070
of common patterns
such as waiting

00:04:02.070 --> 00:04:04.170
for network connectivity,
network retries,

00:04:04.170 --> 00:04:06.110
and exponential back-off.

00:04:06.110 --> 00:04:07.680
Basically all the
good stuff you need

00:04:07.680 --> 00:04:09.794
with one single helpful API.

00:04:09.794 --> 00:04:12.210
And if you're ever wondering
how your application is using

00:04:12.210 --> 00:04:15.230
the network, make sure to check
out the network traffic tool

00:04:15.230 --> 00:04:16.347
inside of Android Studio.

00:04:16.347 --> 00:04:18.430
It will easily show you
the frequency of your data

00:04:18.430 --> 00:04:20.529
transfers and the amount
of data transferred

00:04:20.529 --> 00:04:21.950
during each connection.

00:04:21.950 --> 00:04:24.210
Of course, that's what it
all comes down to, right?

00:04:24.210 --> 00:04:27.140
Watch some videos, improve your
app, make your users happier,

00:04:27.140 --> 00:04:28.717
but you're not done yet.

00:04:28.717 --> 00:04:31.050
That's why you need to check
out the rest of the Android

00:04:31.050 --> 00:04:33.716
Performance Patterns Content and
don't forget to join the Google

00:04:33.716 --> 00:04:35.280
Community as well.

00:04:35.280 --> 00:04:38.120
So keep calm, profile your
code, and always remember,

00:04:38.120 --> 00:04:38.720
perf matters.

00:04:38.720 --> 00:04:42.890
[MUSIC PLAYING]

