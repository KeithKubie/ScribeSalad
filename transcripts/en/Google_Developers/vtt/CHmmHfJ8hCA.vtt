WEBVTT
Kind: captions
Language: en

00:00:02.130 --> 00:00:03.910
MALE SPEAKER: In this video I'll
show how to make output

00:00:03.910 --> 00:00:06.550
invisible, which is helpful when
a function has a large

00:00:06.550 --> 00:00:09.140
output, and I'll also cover
how to use a function

00:00:09.140 --> 00:00:10.390
recursively.

00:00:12.230 --> 00:00:14.840
If your function returns a lot
of results, it might be a bit

00:00:14.840 --> 00:00:17.340
obnoxious when a person forgets
to assign the output

00:00:17.340 --> 00:00:19.290
to an R object.

00:00:19.290 --> 00:00:21.360
If you think your output is
likely to be annoying when

00:00:21.360 --> 00:00:24.190
it's printed out, you can use
the Invisible Function in

00:00:24.190 --> 00:00:27.160
place of the Return function.

00:00:27.160 --> 00:00:30.920
Then when a user fails to save
the result to an R object,

00:00:30.920 --> 00:00:33.790
their console will not be
flooded with output.

00:00:33.790 --> 00:00:36.090
And if they do assign the
output to an object, the

00:00:36.090 --> 00:00:38.240
object will store the result.

00:00:38.240 --> 00:00:42.020
That said, invisible output can
confuse users, so use this

00:00:42.020 --> 00:00:43.810
trick with caution.

00:00:43.810 --> 00:00:46.740
It's also worth noting that
using classes and methods

00:00:46.740 --> 00:00:50.240
inside of R is another way to
address this challenge.

00:00:50.240 --> 00:00:52.480
However, classes and methods
aren't topics I'll cover in

00:00:52.480 --> 00:00:55.230
this video.

00:00:55.230 --> 00:00:56.510
And one more tip before
we move on

00:00:56.510 --> 00:00:58.160
to recursive functions.

00:00:58.160 --> 00:01:00.600
If you happen to flood your
console screen, or if you

00:01:00.600 --> 00:01:03.580
simply want to clear the
council, if you're on a Mac,

00:01:03.580 --> 00:01:07.620
use Command Alt L, or if you're
on Windows, Control L,

00:01:07.620 --> 00:01:10.160
which will clear your
console screen.

00:01:10.160 --> 00:01:13.440
All right, on to recursive
functions.

00:01:13.440 --> 00:01:16.980
A recursive function as a
function that may call itself.

00:01:16.980 --> 00:01:20.240
For example, I can create a
function called LogMe, that

00:01:20.240 --> 00:01:23.020
takes the log of a value if the
value is larger than 1,

00:01:23.020 --> 00:01:24.910
and keeps doing this until
it gets a value

00:01:24.910 --> 00:01:26.730
that's less than 1.

00:01:26.730 --> 00:01:29.510
If the value is less than 1,
then the function simply

00:01:29.510 --> 00:01:32.010
returns the result.

00:01:32.010 --> 00:01:34.600
The way the code is written
works, but what if I happen to

00:01:34.600 --> 00:01:36.580
change the function's name?

00:01:36.580 --> 00:01:39.450
I would still want the function
to call itself.

00:01:39.450 --> 00:01:41.670
To make sure it does, I should
use the function called

00:01:41.670 --> 00:01:46.060
Recall, which automatically
calls the function it's in.

00:01:46.060 --> 00:01:49.210
In general, using Recall is
the preferred way to build

00:01:49.210 --> 00:01:54.360
recursive functions in R. In the
next video, we'll look at

00:01:54.360 --> 00:01:56.970
how to use a custom function
with the Apply function.

