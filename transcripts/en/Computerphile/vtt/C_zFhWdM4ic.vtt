WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:05.720
What I would understand to be a filter is perhaps slightly different from what people who use Instagram would describe as a filter.

00:00:05.720 --> 00:00:10.680
Usually in an app, or a camera phone app, or Facebook, or some other thing where you can apply some filter,

00:00:10.680 --> 00:00:13.960
it's gonna actually be a combination of lots of low level processing,

00:00:13.960 --> 00:00:19.000
of various types you know, blurs, contrast changes, colour changes.

00:00:19.360 --> 00:00:26.520
What I tend to use in my day to day work would be the low level things, Gaussian blurs, edge detection, this kind of stuff.

00:00:26.520 --> 00:00:31.320
But really they're all filters and they all take some image, process it and come up with some output.

00:00:33.720 --> 00:00:37.240
Today we're gonna look at a simple technique called kernel convolution,

00:00:37.240 --> 00:00:43.600
and that is kind of the core of Gaussian blurs and mean blurs and edge detection and lots of other things.

00:00:44.200 --> 00:00:49.600
And it's a fairly simple technique that we use a lot around here with computer vision work.

00:00:49.760 --> 00:00:55.720
Kernel convolution is just a process where we take a small grid of numbers and we pass them over the whole image,

00:00:55.720 --> 00:00:57.880
transforming it based on what those numbers are.

00:00:57.880 --> 00:01:03.760
And by using different numbers in the kernel, we can perform blurs, or edge detection or sharpen, unsharpen,

00:01:03.760 --> 00:01:05.760
basically any effect we like.

00:01:05.760 --> 00:01:12.720
So, I'll first describe kernel convolution and then we'll look at a couple of examples of what sort of kernels that we see a lot of.

00:01:12.720 --> 00:01:20.600
Kernel convolution works by, if this is our test image, it's 5x5 and this is our kernel which is 3x3.

00:01:20.600 --> 00:01:24.400
So, generally speaking the kernel will be smaller than the image, and usually actually quite small.

00:01:24.400 --> 00:01:27.680
And what we do, this is my movable kernel that we've come up with.

00:01:27.680 --> 00:01:34.080
What we do, basically, is for every pixel in our image, we put our kernel over it, so that the pixel is in the centre.

00:01:34.080 --> 00:01:38.280
So let's look at this pixel here, number 64, we put our kernel over it

00:01:38.280 --> 00:01:43.280
and then we are looking at the 3x3 grid, centred around that pixel.

00:01:43.280 --> 00:01:46.040
And we take whatever value is in our kernel,

00:01:46.800 --> 00:01:52.480
multiply it by 17, and then the top value, multiply it by 14, and the top corner value, multiply it by 13.

00:01:52.480 --> 00:01:59.200
So we take each corresponding image value and kernel value, we multiply them together, in pairs, and we sum the whole thing up.

00:01:59.680 --> 00:02:05.360
And then finally, we normalise by dividing by the total value of our kernel to make sure that it doesn't get brighter or darker.

00:02:05.360 --> 00:02:07.240
So it's a bit like averaging like we did in...

00:02:07.240 --> 00:02:09.600
It's exactly, it is averaging, yep.

00:02:09.600 --> 00:02:14.640
In a way, it's just a big weighted average, or if all the numbers are same, an actual average.

00:02:14.640 --> 00:02:17.560
So, in fact that's the first one we can look at.

00:02:17.560 --> 00:02:22.000
So, if all of our values in our kernel are 1, then that's a mean blur.

00:02:22.000 --> 00:02:29.040
So, if you go into Adobe Photoshop, or any other image processing package, and you go for blurs,

00:02:29.040 --> 00:02:32.120
blur filters, and mean, that's what it's gonna be doing.

00:02:32.120 --> 00:02:33.840
This is a kernel of size 3.

00:02:33.840 --> 00:02:39.240
Usually we'll do it, obviously, centred around a single pixel, so, odd sizes, so, 3, 5, 7 and so on.

00:02:40.000 --> 00:02:41.680
So, what we're gonna do here , is we're going to go

00:02:41.680 --> 00:02:49.920
17 multiplied by 1, plus 14 multiplied by 1, and so on, and divide the whole thing, by the sum of this, which is 9, and that will basically take an average.

00:02:49.920 --> 00:02:54.240
And then we'll overwrite that pixel with the output of that kernel convolution.

00:02:54.240 --> 00:03:01.400
The only thing to make clear is that we should output these to a different image, because if we overwrite them as we go, it's gonna mess up the maths as we go down.

00:03:01.400 --> 00:03:05.880
I use blurs to remove noise from images before I process them in other ways for my job.

00:03:05.880 --> 00:03:12.800
Some other people might try and remove noise from images just to make them look better, or you might try and blur the background out in a photograph or something like that.

00:03:12.800 --> 00:03:17.480
And you can achieve a lot of effects just by convolving a kernel over an image.

00:03:17.480 --> 00:03:21.920
You move it around for every pixel and when you look at whatever window, that is the size of your kernel.

00:03:21.920 --> 00:03:26.000
The only other thing is, that if you're at the edge, then you've gotta make some decision as to what you do here.

00:03:26.000 --> 00:03:33.240
So you could ignore those ones and they wouldn't contribute at all, or you could wrap the image around, or you could duplicate the edge ones, you could do lots of different things.

00:03:33.240 --> 00:03:38.080
Generally speaking, I would just ignore them, and then do a slightly smaller averaging for the corners.

00:03:38.080 --> 00:03:43.080
That'll mean that the blurring around the edges is ever so slightly less than the blurring elsewhere in the image.

00:03:43.080 --> 00:03:49.120
But, just in the last edge pixel in a 5 to 10 megapixel image, probably won't make much of a difference.

00:03:49.120 --> 00:03:55.480
So that's a very very simple kernel, if we go for a slightly more complicated kernel, we can go for the normal distribution of the Gaussian blur.

00:03:55.480 --> 00:03:59.400
So Gaussian blur is extremely common, probably, I suppose the most common blur.

00:03:59.680 --> 00:04:05.120
It's a little bit more controlled and edge preserving than a mean blur and so a lot of people like it.

00:04:05.760 --> 00:04:08.800
So a normal distribution is a bell curve.

00:04:08.800 --> 00:04:14.360
So, if we have our axes there and we draw a bell curve, and the standard deviation of this curve,

00:04:14.360 --> 00:04:18.920
So, a standard deviation is essentially the average distance from the mean of all the points,

00:04:18.920 --> 00:04:26.520
will determine how wide this bell curve is. So a really large standard deviation will have a really large bell curve.

00:04:26.520 --> 00:04:27.800
OK, it should be symmetrical.

00:04:27.800 --> 00:04:34.520
And a really small standard deviation will have a really tight bell curve, which is essentially really prioritizing the weights in the middle.

00:04:34.520 --> 00:04:42.360
Now, if we weight these numbers based on the values from our normal distribution then, we get a Gaussian blur.

00:04:42.360 --> 00:04:47.040
An example of a very small Gaussian kernel would be a 3x3.

00:04:47.040 --> 00:04:52.240
So these values are gonna be floating point decimal values, but we just simplify it a little bit.

00:04:52.240 --> 00:04:56.640
So 4, 2 on the edges and 1.

00:04:56.640 --> 00:05:01.400
Now the crucial difference between this and the mean blur is that we're really prioritising those in the middle.

00:05:01.400 --> 00:05:06.680
The further away you get from the pixel of interest, the less weight you have in the combined average.

00:05:06.680 --> 00:05:13.040
And that's important because it basically means that you're not gonna be blurring too much. Whereas an edge, let's say a sharp change in intensity,

00:05:13.040 --> 00:05:16.320
as you approach that edge, you're not gonna be taking too many of those pixels.

00:05:16.320 --> 00:05:18.320
And this Gaussian blur can obviously get a lot bigger.

00:05:18.520 --> 00:05:24.000
So, in your image processing program, you might have an option that says standard deviation or radius,

00:05:24.120 --> 00:05:29.560
And what that's really referring to, is the standard deviation of the normal distribution that produced this kernel.

00:05:29.560 --> 00:05:31.080
And also the width of the kernel.

00:05:31.080 --> 00:05:37.520
So, we have to increase the size of our kernel, as the radius of the Gaussian function increases.

00:05:37.520 --> 00:05:42.120
This is a very small normal distribution. If this was a bell curve, it's really steep.

00:05:42.120 --> 00:05:48.440
If we had a bigger standard deviation, then we're gonna need a bigger window to be able to hold enough information.

00:05:48.440 --> 00:05:49.640
This isn't near big enough.

00:05:49.640 --> 00:05:52.960
So let me draw a test image and then we'll do a blur on it and we'll see how it works.

00:05:52.960 --> 00:05:58.560
So, okay, so this is a good sized image. This image is pretty basic, it's an edge.

00:05:58.560 --> 00:06:02.160
So we've got an area of 50 intensity and an area of 100 intensity.

00:06:02.160 --> 00:06:05.320
So if we just put our mean one here as well just for comparison.

00:06:05.320 --> 00:06:10.320
So if we do our mean first, so we put that on let's say this 50 here which is a lot on the edge.

00:06:10.760 --> 00:06:13.560
Okay, so we put our kernel on there and we're gonna be doing

00:06:13.560 --> 00:06:17.680
50 times 1,  plus, 50 times 1, plus 100 times 1 and so on.

00:06:17.680 --> 00:06:21.440
So it's going to be *counting* 600.

00:06:21.440 --> 00:06:23.160
And then we divide that by nine,

00:06:23.480 --> 00:06:26.560
and that gives us 66.6.

00:06:26.560 --> 00:06:29.480
Okay,  and we'll round it to the nearest integer value.

00:06:29.480 --> 00:06:33.040
For a gaussian blur, with this gaussian blur here, we're gonna be doing

00:06:33.040 --> 00:06:38.040
50 times 1, plus, 50 times 2, plus, 100 times 1 and so on, okay.

00:06:38.040 --> 00:06:41.040
And that will be a value of, this is where we cut...

00:06:41.040 --> 00:06:45.840
So, it's 1000, these add up to 1000 divided by 16, which is 62.5.

00:06:45.840 --> 00:06:52.160
So, ever so slightly closer to these 50 values on this edge than perhaps the mean blur was.

00:06:52.160 --> 00:06:59.160
It's subtle, but the edge has been slightly preserved and generally speaking we're giving more weight to the numbers really really close to us.

00:06:59.160 --> 00:07:02.840
These are very low level filters, these are sort of filters I will use in my day

00:07:03.200 --> 00:07:07.040
day to day work to alter images that I need to analyse.

00:07:07.800 --> 00:07:12.840
But, on Facebook, and you know, on all these camera apps for your phone,

00:07:12.840 --> 00:07:16.920
You'll see a lot of other, perhaps more complicated filters, bloom, you know, sepia,

00:07:16.920 --> 00:07:20.600
vintage ones that make it look like some camera from the 1800 or something like that.

00:07:20.600 --> 00:07:26.480
And really what they're doing is nothing hugely complicated. The're just chaining together low level image processing.

00:07:26.480 --> 00:07:32.880
So, a grayscale filter, maybe a bit of blur, and then some kind of border to make it look good and things like this.

00:07:32.880 --> 00:07:36.480
So, really, these kinds of filters are at the core of a lot of the stuff that you see.

00:07:36.480 --> 00:07:37.760
Even of you might not know it.

