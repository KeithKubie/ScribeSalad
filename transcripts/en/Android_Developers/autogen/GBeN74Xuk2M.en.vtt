WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.165
 <i>Android patterns for performance</i> 

00:00:02.315 --> 00:00:04.730
 Do you know what determines the slowness of a given application? 

00:00:05.030 --> 00:00:07.970
 Those wheeling wheels are time consuming and annoying to the user 

00:00:07.970 --> 00:00:11.110
 While the background activity tries to load some user interface (UI) data. 

00:00:11.320 --> 00:00:12.440
 My name is Colt McCannless. 

00:00:12.440 --> 00:00:15.930
 I say this is the most annoying UI pattern on Android. 

00:00:15.930 --> 00:00:18.380
 This problem is actually easier to solve than your expectations. 

00:00:18.380 --> 00:00:19.670
 We are in 2015 now. 

00:00:19.670 --> 00:00:22.850
 Most modern applications derive all of their UI content 

00:00:22.850 --> 00:00:26.090
 Depending on information from some server resources. 

00:00:26.100 --> 00:00:27.560
 This is an easy process. 

00:00:27.560 --> 00:00:29.500
 Ask the server for updated data. 

00:00:29.500 --> 00:00:32.530
 When you receive it, update your UI to include the changes. 

00:00:32.810 --> 00:00:34.230
 It's easy, is not it? 

00:00:34.230 --> 00:00:36.920
 But the problem here is what the user sees 

00:00:36.920 --> 00:00:40.110
 While waiting for you to bring up updated information. 

00:00:40.350 --> 00:00:42.740
 Of course, if the user uses the application regularly, 

00:00:42.740 --> 00:00:45.180
 The screen is likely to be filled with data. 

00:00:45.490 --> 00:00:48.160
 But when you respond to an important contextual change 

00:00:48.160 --> 00:00:50.660
 Or download the application for the first time after a long time, 

00:00:50.920 --> 00:00:53.250
 No data to populate the preview screen. 

00:00:53.250 --> 00:00:56.220
 You must set a swivel wheel on a blank screen. 

00:00:56.910 --> 00:00:59.750
 The solution here is very simple, which is caching. 

00:01:00.120 --> 00:01:04.370
 In the past, I have actually brought in a valid block of UI information 

00:01:04.569 --> 00:01:06.360
 Except for the first time of course download. 

00:01:06.360 --> 00:01:09.170
 But in any case, despite the data provided, 

00:01:09.590 --> 00:01:12.410
 Your app can use that information in these situations 

00:01:12.410 --> 00:01:14.700
 Where new data is not fetched yet. 

00:01:14.700 --> 00:01:16.090
 So this is the case. 

00:01:16.090 --> 00:01:18.250
 After successfully fetching some UI data, 

00:01:18.250 --> 00:01:20.390
 Make a sequence with a steady storage 

00:01:20.390 --> 00:01:24.140
 At a certain time stamp so you can know the age of the information. 

00:01:24.560 --> 00:01:27.570
 In the case of normal startup, 

00:01:27.570 --> 00:01:30.790
 You can use the current UI interface data to start drawing the screen 

00:01:30.790 --> 00:01:33.020
 Start commanding your server 

00:01:33.020 --> 00:01:34.460
 To bring up the latest information. 

00:01:34.810 --> 00:01:36.810
 Of course, you still have to give a signal to the user 

00:01:36.810 --> 00:01:39.220
 And tell him what kind of new information is being brought. 

00:01:39.220 --> 00:01:41.600
 But at least looks at a real screen 

00:01:41.600 --> 00:01:44.770
 Instead of a blank UI with a trivial rotating wheel is not it? 

00:01:45.390 --> 00:01:47.490
 This is already easy. 

00:01:47.490 --> 00:01:49.041
 Temporarily store UI data 

00:01:49.041 --> 00:01:51.440
 So you can use it later when you have to wait 

00:01:51.440 --> 00:01:53.170
 So that the server gives you some updates. 

00:01:53.760 --> 00:01:56.557
 This is indeed an easy process. 

00:02:02.056 --> 00:02:05.240
 By the way, it should be noted that there is a correct and wrong method 

00:02:05.240 --> 00:02:06.990
 To store this data in disk. 

00:02:06.990 --> 00:02:10.130
 You must first use a binary sequence format 

00:02:10.130 --> 00:02:13.770
 Because it produces lower file sizes and faster performance 

00:02:13.770 --> 00:02:16.830
 From eye-readable artefacts such as JSON or XML. 

00:02:17.160 --> 00:02:18.610
 Second, it took some time 

00:02:18.610 --> 00:02:21.810
 To find the best way to temporarily store this information. 

00:02:21.810 --> 00:02:25.550
 One way to do this is to store it in a cluster 

00:02:25.750 --> 00:02:28.760
 But if the user interface is based on several complex queries 

00:02:28.760 --> 00:02:29.870
 Through that data, 

00:02:30.130 --> 00:02:33.280
 Canceling the download sequence may not be the best idea 

00:02:33.280 --> 00:02:35.570
 Compared to storage in the SQLite database 

00:02:35.570 --> 00:02:37.480
 Which may be a much faster solution. 

00:02:37.710 --> 00:02:38.930
 But in fact, 

00:02:38.930 --> 00:02:42.770
 Any of these options is better than displaying a blank screen with a swivel wheel. 

00:02:42.990 --> 00:02:45.050
 Even if you have the fastest application on our planet, 

00:02:45.400 --> 00:02:47.750
 Your employees will feel unreasonably slow. 

00:02:48.170 --> 00:02:50.075
 The user feeling is the main idea; 

00:02:50.335 --> 00:02:53.800
 Check out the remaining Android Performance Patterns videos. 

00:02:53.800 --> 00:02:55.830
 Do not miss joining the Google+ community 

00:02:55.830 --> 00:02:58.030
 To ask other questions as well. 

00:02:58.030 --> 00:03:00.129
 So keep calm, collect your code information 

00:03:00.129 --> 00:03:01.838
 Always remember that performance is important. 

