WEBVTT
Kind: captions
Language: en

00:00:02.120 --> 00:00:03.120
XAVIER BARRADE: We are
here to talk to you

00:00:03.120 --> 00:00:06.160
about JAM with Chrome.

00:00:06.160 --> 00:00:08.930
So when we started the project,
we wanted to make

00:00:08.930 --> 00:00:11.460
something that would allow
people to come together around

00:00:11.460 --> 00:00:13.240
the Chrome browser.

00:00:13.240 --> 00:00:16.300
But, of course, most people
don't treat the Chrome browser

00:00:16.300 --> 00:00:19.910
as a thing and they're
interested in things like

00:00:19.910 --> 00:00:22.990
food, sport, and in
this case, music.

00:00:22.990 --> 00:00:25.830
And we wondered if it would be
possible to let people go on

00:00:25.830 --> 00:00:28.470
the website, invite their
friends, and play music in

00:00:28.470 --> 00:00:31.260
real time instantly, so
kind of be a rockstar.

00:00:34.010 --> 00:00:36.680
So as you can see, there is a
URL on top of the slides, so

00:00:36.680 --> 00:00:39.160
you can have a play with the
website while we talk, but

00:00:39.160 --> 00:00:41.280
please keep a bit of your
attention for us.

00:00:41.280 --> 00:00:43.990
And in a few minutes, we will
make sure to demo, and at the

00:00:43.990 --> 00:00:47.830
end of the talk we will
jam with you.

00:00:47.830 --> 00:00:49.870
So when we started the project,
things looked quite

00:00:49.870 --> 00:00:56.230
simple, but as we progressed,
it got more exciting, but it

00:00:56.230 --> 00:00:57.380
also got bigger.

00:00:57.380 --> 00:01:00.160
So just so you know, there's
19 different instruments in

00:01:00.160 --> 00:01:01.660
JAM, and we have
[? to sample ?]

00:01:01.660 --> 00:01:05.700
more than 1,000 songs
from instruments.

00:01:05.700 --> 00:01:08.520
And as you can imagine, the
project had its fair share of

00:01:08.520 --> 00:01:11.580
complexity and challenges.

00:01:11.580 --> 00:01:14.126
So we're going to start to demo
the website so you know

00:01:14.126 --> 00:01:16.050
what we're talking about, and
then we will talk about the

00:01:16.050 --> 00:01:18.650
main challenges we faced
when we built it.

00:01:24.080 --> 00:01:25.810
So this is JAM with Chrome.

00:01:25.810 --> 00:01:27.060
I enter the website.

00:01:30.610 --> 00:01:34.840
[MUSIC PLAYING]

00:01:34.840 --> 00:01:36.260
XAVIER BARRADE: So as
I enter [INAUDIBLE]

00:01:36.260 --> 00:01:37.170
19 different instruments.

00:01:37.170 --> 00:01:40.055
You have drums, you have
drum machines.

00:01:46.750 --> 00:01:48.000
Different kind of keyboards.

00:01:55.070 --> 00:01:56.320
Bass guitars.

00:02:01.990 --> 00:02:03.240
And of course, electric
guitars.

00:02:06.670 --> 00:02:07.920
I'm going to start
with the drums.

00:02:17.320 --> 00:02:21.310
So a JAM room was just created
right now, and now I'm in it.

00:02:21.310 --> 00:02:23.117
And as you can see,
the drum is here.

00:02:23.117 --> 00:02:24.580
I can make noise.

00:02:24.580 --> 00:02:27.600
I can stop and play music
really quickly.

00:02:35.180 --> 00:02:38.600
So, of course, it wouldn't be
a jam if I'm alone, so I'm

00:02:38.600 --> 00:02:40.200
going to invite a friend.

00:02:40.200 --> 00:02:43.740
So I'm going to invite Oskar.

00:02:43.740 --> 00:02:47.430
So there's a shortcut that
you can send by instant

00:02:47.430 --> 00:02:48.765
messaging to anyone.

00:02:53.380 --> 00:02:56.560
So Oskar just entered the
shortcut on his computer, and

00:02:56.560 --> 00:02:59.870
as we see, we can already see
that he's going to come.

00:03:03.272 --> 00:03:08.480
OSKAR ERIKSSON: So I'm going to
play some guitar, because

00:03:08.480 --> 00:03:09.611
I'm cooler than you.

00:03:09.611 --> 00:03:10.560
XAVIER BARRADE: I like drums.

00:03:10.560 --> 00:03:11.600
So Oskar is here.

00:03:11.600 --> 00:03:13.820
I'm the drummer, he's the
guitarist, and we're going to

00:03:13.820 --> 00:03:16.747
give you a little demo.

00:03:16.747 --> 00:03:48.126
[ROCK AND ROLL MUSIC PLAYING]

00:03:48.126 --> 00:03:48.800
XAVIER BARRADE: Thank you.

00:03:48.800 --> 00:03:50.860
So because there's 19 different
instruments, you

00:03:50.860 --> 00:03:53.690
cannot only play rock and roll,
but you can play lots of

00:03:53.690 --> 00:03:54.650
different kinds of music.

00:03:54.650 --> 00:03:58.936
So for example, let's play
some tasty techno music.

00:03:58.936 --> 00:04:01.185
So I'm taking a keyboard.

00:04:01.185 --> 00:04:03.150
Oskar is going to get
a drum machine.

00:04:05.750 --> 00:04:06.671
Here we go.

00:04:06.671 --> 00:04:32.720
[TECHNO MUSIC PLAYING]

00:04:32.720 --> 00:04:34.530
XAVIER BARRADE: So this is
basically what JAM is.

00:04:34.530 --> 00:04:36.840
So this was the easy mode where
you play with patterns,

00:04:36.840 --> 00:04:38.140
and there's also play mode--

00:04:38.140 --> 00:04:41.020
Pro Mode where you can
play note by note.

00:04:41.020 --> 00:04:43.730
So as you can imagine, we had
lots of challenging building

00:04:43.730 --> 00:04:44.560
this project.

00:04:44.560 --> 00:04:47.340
So today, we're going to talk
about the two main we faced.

00:04:47.340 --> 00:04:50.590
So first, let's go to Backstage,
which is auto

00:04:50.590 --> 00:04:52.960
creator of virtual JAM room.

00:04:52.960 --> 00:04:53.920
[INAUDIBLE]

00:04:53.920 --> 00:04:57.810
it is possible and you allow
people to join it.

00:04:57.810 --> 00:05:00.430
And then there's the music,
which is, how do you create a

00:05:00.430 --> 00:05:03.280
music tool with 19 different
instruments.

00:05:03.280 --> 00:05:05.680
All the instrument a
full set of tones.

00:05:05.680 --> 00:05:11.210
They have different effects
just using web technology.

00:05:11.210 --> 00:05:13.280
So first, we serve
the application.

00:05:13.280 --> 00:05:17.040
So as you can see here, the
client is going to request

00:05:17.040 --> 00:05:20.770
files from app engine, so he's
going to get to the CSS or

00:05:20.770 --> 00:05:23.040
HTML and the Javascript.

00:05:23.040 --> 00:05:27.080
And notice the device which are
called from the HTML are

00:05:27.080 --> 00:05:29.540
served from cloud storage.

00:05:29.540 --> 00:05:32.500
And then each client creates or
joins a jam session, which

00:05:32.500 --> 00:05:36.280
is hosted on a Websocket
server.

00:05:36.280 --> 00:05:40.420
And this Websocket server in
different data centers across

00:05:40.420 --> 00:05:41.670
the world to optimize
the latency.

00:05:44.920 --> 00:05:47.680
The App Engine needs to know
what all these Websocket

00:05:47.680 --> 00:05:51.090
servers are up to, so what
happens is, every five seconds

00:05:51.090 --> 00:05:53.610
every Websocket server is going
to set an outbeat to App

00:05:53.610 --> 00:05:57.560
Engine, and this outbeat
contains the IP address, the

00:05:57.560 --> 00:06:00.490
zone, the CP load, the
number of game and

00:06:00.490 --> 00:06:03.450
the number of clients.

00:06:03.450 --> 00:06:06.580
And then, the client is going to
request this listed server

00:06:06.580 --> 00:06:07.600
to App Engine.

00:06:07.600 --> 00:06:10.820
So App Engine gives them the
free lowest latency server

00:06:10.820 --> 00:06:13.180
from each zone.

00:06:13.180 --> 00:06:15.980
Then the client is going to
ping the servers, so he's

00:06:15.980 --> 00:06:18.690
going to ping them five times
each and he's going to select

00:06:18.690 --> 00:06:21.600
the one with the best
performance, so which is the

00:06:21.600 --> 00:06:25.420
lowest ping and the least
amount of packets lost.

00:06:25.420 --> 00:06:28.530
And when the client selected a
server, informed App Engine of

00:06:28.530 --> 00:06:31.570
the selection, the jam
session is created.

00:06:31.570 --> 00:06:34.875
And the client gets a shortcut
URL which he an share to

00:06:34.875 --> 00:06:37.260
invite people to his session.

00:06:37.260 --> 00:06:39.210
And now, I'm going to let Oskar
talk to you about other

00:06:39.210 --> 00:06:40.460
client things.

00:06:42.980 --> 00:06:46.750
OSKAR ERIKSSON: So as any decent
musician will tell you,

00:06:46.750 --> 00:06:49.550
one of the most important things
when playing together

00:06:49.550 --> 00:06:53.320
is to play in sync for the
music not to stink.

00:06:53.320 --> 00:06:57.550
So this is one of the biggest
challenges we had in JAM.

00:06:57.550 --> 00:07:00.820
How do we enable people at
totally different locations

00:07:00.820 --> 00:07:03.390
across the globe to play
together and hear the same

00:07:03.390 --> 00:07:04.640
thing at the same time?

00:07:07.900 --> 00:07:10.915
Excuse me.

00:07:10.915 --> 00:07:13.740
And an audio system will always
have a certain amount

00:07:13.740 --> 00:07:18.690
of latency, and that is the time
from when you press a key

00:07:18.690 --> 00:07:20.730
until you actually
hear the notes.

00:07:20.730 --> 00:07:24.170
And we really especially have
a lot of latency when the

00:07:24.170 --> 00:07:26.020
audio system is distributed
across

00:07:26.020 --> 00:07:28.970
continents like in chat.

00:07:28.970 --> 00:07:32.950
So we did some experimentation
and we came up with some

00:07:32.950 --> 00:07:37.970
numbers, and we say that in the
Pro Mode, we can have up

00:07:37.970 --> 00:07:41.960
to 100 milliseconds of latency,
and in the easy mode,

00:07:41.960 --> 00:07:45.560
you can accept upwards of 600
milliseconds of latency before

00:07:45.560 --> 00:07:48.640
you start feeling like you're
losing control.

00:07:48.640 --> 00:07:51.240
And these are actually rather
high numbers when talking

00:07:51.240 --> 00:07:54.200
about audio, but the
mind adapts and

00:07:54.200 --> 00:07:56.760
compensates rather quickly.

00:07:56.760 --> 00:07:59.250
And also, these numbers aren't
impossible to achieve with

00:07:59.250 --> 00:08:00.250
Websockets.

00:08:00.250 --> 00:08:02.960
So what we had to do was just to
make sure that the clients

00:08:02.960 --> 00:08:05.580
are in perfect sync once
they start playing.

00:08:05.580 --> 00:08:08.950
So how did we do that?

00:08:08.950 --> 00:08:12.570
The first thing you need to
know is, no, we don't swim

00:08:12.570 --> 00:08:14.770
actual order files across
the network.

00:08:14.770 --> 00:08:16.630
We send events that
trigger play back

00:08:16.630 --> 00:08:18.810
on the local clients.

00:08:18.810 --> 00:08:21.420
And most of these events needs
to be handled at the exact

00:08:21.420 --> 00:08:23.660
same time at all times
for the players to

00:08:23.660 --> 00:08:25.110
hear the same thing.

00:08:25.110 --> 00:08:27.370
And for this to happen,
we need to have

00:08:27.370 --> 00:08:28.620
a common time reference.

00:08:31.720 --> 00:08:34.320
So to establish this common time
reference, we developed

00:08:34.320 --> 00:08:37.669
the sync algorithm that we run
each time a player leaves or

00:08:37.669 --> 00:08:40.039
joins the jam session.

00:08:40.039 --> 00:08:42.809
And each client has a local
time, but we need a common

00:08:42.809 --> 00:08:46.040
time that these local times
can be related to.

00:08:46.040 --> 00:08:49.720
So when we say play at this
time, everyone knows which

00:08:49.720 --> 00:08:51.820
time we mean.

00:08:51.820 --> 00:08:55.240
And before I move on, thinking
about time can be very

00:08:55.240 --> 00:08:57.870
confusing, but this will be
recorded and available

00:08:57.870 --> 00:08:58.340
afterwards.

00:08:58.340 --> 00:09:02.580
So don't sweat it if and
when you get lost.

00:09:02.580 --> 00:09:06.690
So to sync the clients, we start
off by making 10 sets of

00:09:06.690 --> 00:09:10.510
pings to the WebSocket
server, like so.

00:09:10.510 --> 00:09:13.510
First, the client sends a
message with its own local

00:09:13.510 --> 00:09:18.340
time, and the server receives
this and sends back the

00:09:18.340 --> 00:09:21.805
received time as well as the
local time on the server.

00:09:25.240 --> 00:09:28.330
And for each time we
do this, the client

00:09:28.330 --> 00:09:30.470
calculates two values.

00:09:30.470 --> 00:09:32.600
The time it took for the message
to go back and forth,

00:09:32.600 --> 00:09:35.590
which is the travel time.

00:09:35.590 --> 00:09:38.390
And the difference between the
local time and time on the

00:09:38.390 --> 00:09:41.680
server, which is the
time offset.

00:09:41.680 --> 00:09:44.860
And when we have done this 10
times, we calculate the mean

00:09:44.860 --> 00:09:47.980
value for the travel times,
which is this client's

00:09:47.980 --> 00:09:52.560
latency, and send that
value to the server.

00:09:52.560 --> 00:09:55.330
We then calculate the mean value
for the time offsets,

00:09:55.330 --> 00:09:57.100
which is the difference between
the local time and the

00:09:57.100 --> 00:09:59.040
server time.

00:09:59.040 --> 00:10:01.290
And when all the clients have
done this and sent their

00:10:01.290 --> 00:10:05.470
latency to the server, the
server sends out the highest

00:10:05.470 --> 00:10:08.740
latency reported for all
the clients to use.

00:10:08.740 --> 00:10:11.400
And this means that all clients
should be able to

00:10:11.400 --> 00:10:14.450
handle events at the exact same
time since they have the

00:10:14.450 --> 00:10:18.550
same latency as the client with
the poorest connection,

00:10:18.550 --> 00:10:22.300
and they all know the time of
their own local time in

00:10:22.300 --> 00:10:25.260
relation to the server time.

00:10:25.260 --> 00:10:28.140
So now that we have a common
time reference, we can start

00:10:28.140 --> 00:10:30.920
sending messages
back and forth.

00:10:30.920 --> 00:10:35.120
And so let's see how we
calculate these times.

00:10:35.120 --> 00:10:39.400
So when an event is to be
broadcasted over the network,

00:10:39.400 --> 00:10:43.150
we calculate a local event time,
it should happen now,

00:10:43.150 --> 00:10:46.270
and then we add the server
offset to that time, and then

00:10:46.270 --> 00:10:49.840
we have the event time expressed
in server time.

00:10:49.840 --> 00:10:52.760
And the server doesn't really
care what an event-- what it's

00:10:52.760 --> 00:10:54.440
all about, it just broadcasts
it to all

00:10:54.440 --> 00:10:56.280
the connected clients.

00:10:56.280 --> 00:10:59.410
And then, when it's received
on another client, that

00:10:59.410 --> 00:11:02.320
client's server offset is
subtracted and they have the

00:11:02.320 --> 00:11:05.500
event time expressed in that
client's local time.

00:11:05.500 --> 00:11:09.460
And that's where the
magic happen.

00:11:09.460 --> 00:11:12.850
On the client from which the
event originates, the event is

00:11:12.850 --> 00:11:16.380
scheduled locally using the same
calculations, but without

00:11:16.380 --> 00:11:19.400
sending the event over the
network, which makes sure that

00:11:19.400 --> 00:11:22.290
the time will always be
consistent for what the player

00:11:22.290 --> 00:11:26.740
does herself, even if
the network acts up.

00:11:26.740 --> 00:11:30.520
And if the player is alone in a
jam session, the application

00:11:30.520 --> 00:11:33.310
goes into a solo mode where no
events are sent across the

00:11:33.310 --> 00:11:37.520
network and the latency is set
as low as possible, which

00:11:37.520 --> 00:11:38.890
enables the users to play the

00:11:38.890 --> 00:11:40.470
instruments with great precision.

00:11:43.180 --> 00:11:45.020
XAVIER BARRADE: So one of the
things that was important for

00:11:45.020 --> 00:11:48.950
us when we worked on JAM was
that anybody could come and

00:11:48.950 --> 00:11:52.640
play instantly, and we also
wanted a real musician, who

00:11:52.640 --> 00:11:56.930
can play real music, to be
able to do it on JAM.

00:11:56.930 --> 00:12:01.280
So I'm going to demo easy mode
quickly, and then Oskar is

00:12:01.280 --> 00:12:04.550
going to explain to you
how we made it.

00:12:04.550 --> 00:12:06.870
So this is easy mode
work with patterns.

00:12:06.870 --> 00:12:10.560
Imagine the tracks and each time
you click on a different

00:12:10.560 --> 00:12:13.210
part of the drum, it's going
from one track to another.

00:12:13.210 --> 00:12:14.460
So for example--

00:12:29.990 --> 00:12:31.650
OSKAR ERIKSSON: So what you
just heard is not a

00:12:31.650 --> 00:12:34.560
prerecorded piece, it's
a sampler playing the

00:12:34.560 --> 00:12:36.540
notes in real time.

00:12:36.540 --> 00:12:39.200
And I'll talk about the sampler
in a bit, but first,

00:12:39.200 --> 00:12:42.560
let's talk about
these patterns.

00:12:42.560 --> 00:12:45.510
So the concept of a pattern
is really simple.

00:12:45.510 --> 00:12:48.430
It's just a collection of
events that contain

00:12:48.430 --> 00:12:51.040
information about what note
should we play that together

00:12:51.040 --> 00:12:53.270
make up a piece of music.

00:12:53.270 --> 00:12:57.020
And we used MIDI as the format
for expressing what these

00:12:57.020 --> 00:12:59.200
patterns should sound like.

00:12:59.200 --> 00:13:01.960
And by parsing these MIDI files,
the application got a

00:13:01.960 --> 00:13:04.740
collection of events, the
information about what notes

00:13:04.740 --> 00:13:08.700
should be played and when, and
any other meet data needed to

00:13:08.700 --> 00:13:11.620
make the sampler play
the notes properly.

00:13:11.620 --> 00:13:14.790
So we start by downloading these
MIDI files to the client

00:13:14.790 --> 00:13:19.400
and parse them there, and
keeping the patterns as MIDI

00:13:19.400 --> 00:13:22.140
gives us an easy workflow since
our music editors can

00:13:22.140 --> 00:13:24.900
use the tools that they
are already used to.

00:13:24.900 --> 00:13:29.160
And also MIDI is a lightweight
format when compared to

00:13:29.160 --> 00:13:32.650
keeping the patterns as
JSON for example.

00:13:32.650 --> 00:13:35.200
So when we have parsed these
patterns and we're ready to

00:13:35.200 --> 00:13:38.250
start playing, we thought a
pattern engine that loops,

00:13:38.250 --> 00:13:41.820
much like a game engine loops,
if that's more familiar to

00:13:41.820 --> 00:13:45.270
you, and then the engine looks
ahead into a point in the

00:13:45.270 --> 00:13:49.820
future, maybe 30 milliseconds
or so, for events in the

00:13:49.820 --> 00:13:52.770
pattern that we're playing that
will happen between now

00:13:52.770 --> 00:13:54.680
and that point in the future.

00:13:54.680 --> 00:13:57.630
And if there are any such
events, we send those to the

00:13:57.630 --> 00:14:00.850
sampler that are playing
the pattern.

00:14:00.850 --> 00:14:03.280
Now, we don't send all the
events that come from the

00:14:03.280 --> 00:14:06.440
pattern over the network.

00:14:06.440 --> 00:14:10.290
We'd rather just send events
that start playback on all the

00:14:10.290 --> 00:14:12.900
clients at the same
time instead.

00:14:12.900 --> 00:14:15.600
And when a player, for example,
changes the stream on

00:14:15.600 --> 00:14:20.100
the guitar, an event for that
interaction is sent to all the

00:14:20.100 --> 00:14:23.800
connected clients, and we have
a logic unit that calculates

00:14:23.800 --> 00:14:27.020
which pattern we should switch
to based on what sting and

00:14:27.020 --> 00:14:28.830
where on that string interaction
happened.

00:14:31.340 --> 00:14:34.880
So our pattern engine allows
us to find where we want to

00:14:34.880 --> 00:14:39.090
add the new pattern, be it the
next bar, next beat, or as in

00:14:39.090 --> 00:14:41.750
JAM, as soon as possible.

00:14:41.750 --> 00:14:44.980
And if you think of the pattern
engine as a musician,

00:14:44.980 --> 00:14:48.210
and the logic engine as the
conductor, one can imagine the

00:14:48.210 --> 00:14:50.690
logic engine replacing the sheet
music for the pattern

00:14:50.690 --> 00:14:53.820
engine from the old pattern to
the new one and the pattern

00:14:53.820 --> 00:14:56.610
engine is no more
wiser for it.

00:14:56.610 --> 00:14:59.030
So when the pattern engine then
looks into the future for

00:14:59.030 --> 00:15:02.190
upcoming events, it sees events
from the new pattern,

00:15:02.190 --> 00:15:04.440
and we get the seamless
transition

00:15:04.440 --> 00:15:05.690
between those patterns.

00:15:08.050 --> 00:15:11.490
XAVIER BARRADE: So as I said,
we wanted a good musician to

00:15:11.490 --> 00:15:13.540
be able to play what they wanted
so this was a really

00:15:13.540 --> 00:15:16.045
challenging part of the tour
because I need to demo the Pro

00:15:16.045 --> 00:15:17.740
Mode to you.

00:15:17.740 --> 00:15:22.370
So it's basically, like on
almost every music software,

00:15:22.370 --> 00:15:25.560
one key I get a one note, so I'm
going to play you a little

00:15:25.560 --> 00:15:26.945
non-copyrighted piece
of music.

00:15:26.945 --> 00:15:28.195
It may be really bad.

00:15:39.600 --> 00:15:41.980
OSKAR ERIKSSON: So as you heard
Pro Mode takes more

00:15:41.980 --> 00:15:47.360
skill from the user, but it's
much easier for the developer.

00:15:47.360 --> 00:15:51.610
So instead of having a logic
unit and a pattern engine, we

00:15:51.610 --> 00:15:54.460
simply create the same kind
of events based on user

00:15:54.460 --> 00:15:57.770
interaction with the
UI instead .

00:15:57.770 --> 00:16:01.490
And unlike the events that come
from the patterns, these

00:16:01.490 --> 00:16:03.710
interaction events are all
sent one by one over the

00:16:03.710 --> 00:16:06.800
network, but still scheduled
locally from the client from

00:16:06.800 --> 00:16:08.880
which it came.

00:16:08.880 --> 00:16:12.090
So let's talk about
the sampler.

00:16:12.090 --> 00:16:15.110
A sampler is an instrument
that plays

00:16:15.110 --> 00:16:17.220
prerecorded audio files.

00:16:17.220 --> 00:16:21.430
And in its most simple form, we
assign one sample per key

00:16:21.430 --> 00:16:24.350
on a keyboard.

00:16:24.350 --> 00:16:29.000
In JAM, we took this concept one
step further, and used the

00:16:29.000 --> 00:16:32.950
playback rates property of the
audio source nodes to pitch

00:16:32.950 --> 00:16:36.300
the samples, and this allows
us to use fewer samples to

00:16:36.300 --> 00:16:40.320
cover bigger frequency ranges.

00:16:40.320 --> 00:16:43.670
And this cuts the number of
samples we have to use by a

00:16:43.670 --> 00:16:46.420
lot and also the rate of the
application obviously.

00:16:49.140 --> 00:16:51.360
And the events for starting
notes that we've been sending

00:16:51.360 --> 00:16:54.290
back and forth over the network
and generated by a

00:16:54.290 --> 00:16:57.200
pattern, so user interaction,
all end up at the

00:16:57.200 --> 00:16:58.870
sampler in the end.

00:16:58.870 --> 00:17:03.130
And these events contain a start
time, a stop time, a

00:17:03.130 --> 00:17:06.710
velocity, and what
note to play.

00:17:06.710 --> 00:17:09.540
And when we get one of these
events, the sampler checks

00:17:09.540 --> 00:17:12.780
which sample relates to this
note that we're going to play.

00:17:12.780 --> 00:17:15.890
So in this case, we're looking
for an F note, and we can see

00:17:15.890 --> 00:17:19.470
that sample S3 is the
one we should play.

00:17:19.470 --> 00:17:22.140
We can then start it with the
proper playback rate setting

00:17:22.140 --> 00:17:24.460
at the given start time.

00:17:24.460 --> 00:17:28.874
And this method of feeding the
sampler events gives us a neat

00:17:28.874 --> 00:17:32.560
separation of code and
instant reusability.

00:17:32.560 --> 00:17:36.630
The sampler just smiles and
plays whatever it's told, just

00:17:36.630 --> 00:17:37.880
like a drummer.

00:17:40.140 --> 00:17:43.270
So, of course, we didn't
stop there in JAM.

00:17:43.270 --> 00:17:46.320
Since we get a velocity property
with our events, we

00:17:46.320 --> 00:17:50.500
can add another layer of realism
by having multiple

00:17:50.500 --> 00:17:53.630
variations of the same sample.

00:17:53.630 --> 00:17:56.370
So here we have three different
velocity levels of

00:17:56.370 --> 00:17:59.410
samples stacked on each other,
which means that when we

00:17:59.410 --> 00:18:02.440
recorded these instruments, we
had to make three samples for

00:18:02.440 --> 00:18:06.310
each note at different
velocities.

00:18:06.310 --> 00:18:09.370
So if you get a note with a low
velocity, we choose a soft

00:18:09.370 --> 00:18:13.610
sample, and a higher velocity,
we choose the harder sample.

00:18:13.610 --> 00:18:18.960
And to illustrate, we're going
to play you a piano, and what

00:18:18.960 --> 00:18:22.420
you're going to hear is first, a
low velocity note and then a

00:18:22.420 --> 00:18:25.620
high velocity note.

00:18:25.620 --> 00:18:28.410
As soon as Xavier finds
the right file.

00:18:39.790 --> 00:18:40.870
Here we go.

00:18:40.870 --> 00:18:42.230
XAVIER BARRADE: The piano
sounds like this.

00:18:45.520 --> 00:18:48.810
[PIANO MUSIC PLAYING]

00:18:48.810 --> 00:18:49.660
OSKAR ERIKSSON: So let's
play that again.

00:18:49.660 --> 00:18:51.773
First, the soft sample
then a hard sample.

00:18:51.773 --> 00:18:57.570
[PIANO MUSIC PLAYING]

00:18:57.570 --> 00:19:00.720
OSKAR ERIKSSON: So to give you
another example of the level

00:19:00.720 --> 00:19:02.830
of detail that went
into the project.

00:19:02.830 --> 00:19:05.990
Let's have a look at playing
the guitar in Pro Mode.

00:19:05.990 --> 00:19:09.650
So if you first play one note
on one string, and then play

00:19:09.650 --> 00:19:12.070
another note on the same string
while still keeping the

00:19:12.070 --> 00:19:16.050
first key pressed down, you get
another variation of the

00:19:16.050 --> 00:19:19.810
sample called a puller note if
there are any guitarists here,

00:19:19.810 --> 00:19:21.743
and it sounds like this.

00:19:21.743 --> 00:19:25.054
[GUITAR NOTES PLAYING]

00:19:25.054 --> 00:19:27.490
OSKAR ERIKSSON: So what you
first heard are two notes

00:19:27.490 --> 00:19:30.830
played normally, and then, on
the second round, it's one

00:19:30.830 --> 00:19:33.210
note played normally and
then a puller note.

00:19:33.210 --> 00:19:37.800
[GUITAR NOTES PLAYING]

00:19:37.800 --> 00:19:40.370
OSKAR ERIKSSON: And these are
the kind of nuances that are

00:19:40.370 --> 00:19:43.150
really important to create
realistic instruments, but

00:19:43.150 --> 00:19:46.430
it's also the kind of details
that eats up all of your

00:19:46.430 --> 00:19:48.240
developing time if you're
not careful.

00:19:48.240 --> 00:19:49.780
Take it from me.

00:19:49.780 --> 00:19:53.280
And so on top of this, each
instrument has two sets of

00:19:53.280 --> 00:19:58.010
effects that are generated with
Web Audio in real time, .

00:19:58.010 --> 00:20:00.660
And Xavier is going to give
you a demo of that.

00:20:00.660 --> 00:20:03.020
XAVIER BARRADE: Yeah, so the
effect is one of the coolest

00:20:03.020 --> 00:20:05.680
parts in JAM, especially if you
consider that it was done

00:20:05.680 --> 00:20:07.420
entirely using Web Audio.

00:20:07.420 --> 00:20:11.090
So to demonstrate, I'm going to
pick the best instrument of

00:20:11.090 --> 00:20:12.515
the website, which is
the metallic guitar.

00:20:16.820 --> 00:20:20.980
So if you play a metal guitar
without any effect, it doesn't

00:20:20.980 --> 00:20:22.960
sound very rock and roll.

00:20:22.960 --> 00:20:29.150
[GUITAR PLAYING]

00:20:29.150 --> 00:20:31.600
XAVIER BARRADE: But you can
see that I use a slight

00:20:31.600 --> 00:20:35.516
[INAUDIBLE] of distortion
up to the max, and now.

00:20:35.516 --> 00:20:44.390
[GUITAR PLAYING]

00:20:44.390 --> 00:20:46.700
XAVIER BARRADE: And if I want a
pretty good spacey feeling,

00:20:46.700 --> 00:20:48.640
I can just put the flanger up.

00:20:52.020 --> 00:21:02.840
[GUITAR PLAYING]

00:21:02.840 --> 00:21:07.010
OSKAR ERIKSSON: So first, let's
talk a bit basic about

00:21:07.010 --> 00:21:08.250
what it is.

00:21:08.250 --> 00:21:11.980
So to explain Web Audio for
someone who's never used it, I

00:21:11.980 --> 00:21:15.290
think that the concept of an
assembly line often brings the

00:21:15.290 --> 00:21:16.490
bird into nest.

00:21:16.490 --> 00:21:19.380
So you have an assembly line
with agents that produce and

00:21:19.380 --> 00:21:23.280
refine a product, and
in Web Audio, these

00:21:23.280 --> 00:21:25.450
agents are called nodes.

00:21:25.450 --> 00:21:28.440
And there are nodes for
generating the raw material,

00:21:28.440 --> 00:21:32.640
or audio that is, and nodes
for modifying the audio.

00:21:39.950 --> 00:21:47.900
And this is just like
the keynote.

00:21:47.900 --> 00:21:49.200
Sorry.

00:21:49.200 --> 00:21:53.730
And so there are quite a
manageable number of these

00:21:53.730 --> 00:21:57.520
nodes natively in Web Audio,
but for more advanced audio

00:21:57.520 --> 00:22:01.290
applications, you might want
to create your own.

00:22:01.290 --> 00:22:04.450
And to enable us to do this in
JAM, we created this model

00:22:04.450 --> 00:22:08.350
that we used, which allows us to
use our custom nodes, much

00:22:08.350 --> 00:22:09.600
like the native nodes.

00:22:15.340 --> 00:22:18.610
So we have an input and an
output property, and we have a

00:22:18.610 --> 00:22:20.200
connect and disconnect method.

00:22:20.200 --> 00:22:22.360
And that's it.

00:22:22.360 --> 00:22:26.480
So to use it, we do exactly the
same as we do with normal

00:22:26.480 --> 00:22:29.620
nodes , with the exception that
we need to connect to the

00:22:29.620 --> 00:22:35.110
custom nodes input properly
instead of the node itself.

00:22:35.110 --> 00:22:38.000
And the conception model
is really easy and

00:22:38.000 --> 00:22:41.540
it looks like this.

00:22:41.540 --> 00:22:44.780
So here we have a gain node
and another gain node, and

00:22:44.780 --> 00:22:47.870
then the custom node
in the middle.

00:22:47.870 --> 00:22:52.070
So using this model, we can
create our samplers or maybe,

00:22:52.070 --> 00:22:53.340
our own audio effects.

00:22:53.340 --> 00:22:57.810
So let's create a
delay effect.

00:22:57.810 --> 00:23:00.670
So the structure is really
similar to the basic model.

00:23:00.670 --> 00:23:04.790
We have just added a delay
node, and a wet level and

00:23:04.790 --> 00:23:07.050
feedback at gain nodes.

00:23:07.050 --> 00:23:11.620
So the delay node delays the
signal and sends it to the wet

00:23:11.620 --> 00:23:15.380
level gain node and the
feedback gain node.

00:23:15.380 --> 00:23:18.990
And the feedback sends back a
diminished version of the

00:23:18.990 --> 00:23:23.040
signal to the delay node, which
then delays it again,

00:23:23.040 --> 00:23:25.260
and we have a feedback loop.

00:23:25.260 --> 00:23:28.925
And the wet level node lets us
change how much of the delayed

00:23:28.925 --> 00:23:31.270
signal we want to send
to the output and mix

00:23:31.270 --> 00:23:34.140
with the clean signal.

00:23:34.140 --> 00:23:37.640
And the codes that implement
this, looks like this, and I

00:23:37.640 --> 00:23:39.690
don't expect you to
see what it says.

00:23:39.690 --> 00:23:43.940
But let's just say that it's
really condensed considering

00:23:43.940 --> 00:23:47.260
all the work that is being
done behind the scenes.

00:23:47.260 --> 00:23:50.380
So we simply create the nodes
and then set the values for

00:23:50.380 --> 00:23:53.440
the delay and feedback that we
want, and then we make sure

00:23:53.440 --> 00:23:55.010
that the routing looks
as it does in the

00:23:55.010 --> 00:23:56.690
model and that's it.

00:23:56.690 --> 00:23:59.540
No math needed.

00:23:59.540 --> 00:24:04.235
And the results sounds
like this.

00:24:04.235 --> 00:24:05.600
[GUITAR NOTE]

00:24:05.600 --> 00:24:06.780
OSKAR ERIKSSON: That's dry.

00:24:06.780 --> 00:24:07.590
[GUITAR NOTE]

00:24:07.590 --> 00:24:10.418
OSKAR ERIKSSON: And that's
with the delay.

00:24:10.418 --> 00:24:12.680
[GUITAR NOTE]

00:24:12.680 --> 00:24:14.350
OSKAR ERIKSSON: And it's a
really big room so I didn't

00:24:14.350 --> 00:24:16.570
really have a difference,
but the second

00:24:16.570 --> 00:24:19.210
one is a bit delayed.

00:24:19.210 --> 00:24:22.220
And this is a lengthy article
that I wrote on the subject

00:24:22.220 --> 00:24:25.940
that you can read at
age HTML5Rocks.com.

00:24:25.940 --> 00:24:29.620
But if you felt this was way too
much work, we release the

00:24:29.620 --> 00:24:33.300
effects that we use in
JAM as tuna JS for

00:24:33.300 --> 00:24:35.420
your comfort and pleasure.

00:24:35.420 --> 00:24:38.110
So please feel free to
hack away and give

00:24:38.110 --> 00:24:39.380
us more pulled requests.

00:24:39.380 --> 00:24:41.410
There are still many effects
that need to be made.

00:24:45.080 --> 00:24:48.810
And that's what I have to say.

00:24:48.810 --> 00:24:50.670
XAVIER BARRADE: So JAM was a
really interesting project to

00:24:50.670 --> 00:24:53.430
work on because when we started,
we were excited by

00:24:53.430 --> 00:24:57.690
Websockets, by Google Compute,
by Go, by Web Audio.

00:24:57.690 --> 00:25:02.230
And we already had people we
managed to take demo and make

00:25:02.230 --> 00:25:05.270
it something that lots of people
used and connected

00:25:05.270 --> 00:25:09.460
over, and used the web in
a pretty different way.

00:25:09.460 --> 00:25:12.170
So to give you an idea, we had
more than 3 million visits

00:25:12.170 --> 00:25:17.070
with an average visit duration
of more than 10 minutes, and

00:25:17.070 --> 00:25:19.660
we would like to conclude by
showing you a little movie we

00:25:19.660 --> 00:25:22.600
did when we launched
the application.

00:25:22.600 --> 00:25:25.410
And it features the most
famous musician on the

00:25:25.410 --> 00:25:29.578
internet, which is
Keyboard Cat.

00:25:29.578 --> 00:26:23.448
[MUSIC PLAYING]

00:26:28.500 --> 00:26:29.785
XAVIER BARRADE: Thank you.

00:26:33.590 --> 00:26:36.475
So if anybody has any questions,
you can go to the

00:26:36.475 --> 00:26:37.725
two microphones on the sides.

00:26:43.760 --> 00:26:44.700
AUDIENCE: Hi, guys.

00:26:44.700 --> 00:26:45.710
Is this on?

00:26:45.710 --> 00:26:46.710
XAVIER BARRADE: Yes.

00:26:46.710 --> 00:26:48.510
AUDIENCE: Thank you for that
really, really amazing

00:26:48.510 --> 00:26:51.340
application.

00:26:51.340 --> 00:26:55.670
The biggest question mark in
my mind are custom nodes in

00:26:55.670 --> 00:26:56.770
the Web Audio API.

00:26:56.770 --> 00:26:59.880
Now, I've seen it before,
including at last year's

00:26:59.880 --> 00:27:04.260
Google I/O, but it seems like
that's a really deep down

00:27:04.260 --> 00:27:06.610
magic kind of black box thing.

00:27:06.610 --> 00:27:09.820
How do I learn how
to start becoming

00:27:09.820 --> 00:27:11.510
proficient with those?

00:27:11.510 --> 00:27:14.360
OSKAR ERIKSSON: That's a
really good question.

00:27:14.360 --> 00:27:19.160
Well, as you said, it is a
black box and the audio

00:27:19.160 --> 00:27:21.500
communities--

00:27:21.500 --> 00:27:25.500
it's very technical, but there
is this one site, which I

00:27:25.500 --> 00:27:29.360
can't remember from my head that
has a lot of algorithms

00:27:29.360 --> 00:27:32.650
and structures ready to use.

00:27:32.650 --> 00:27:37.070
And if you follow me
on Google+, I will

00:27:37.070 --> 00:27:39.140
post a link for you.

00:27:39.140 --> 00:27:42.390
That's a good way to start.

00:27:42.390 --> 00:27:45.360
And I can post some books
too, I think.

00:27:45.360 --> 00:27:51.820
So that's the best I can
give you right now.

00:27:51.820 --> 00:27:53.760
AUDIENCE: Hi, I'm
James Hardik.

00:27:53.760 --> 00:27:57.040
I had a question, how long or
how often, I guess, are you

00:27:57.040 --> 00:27:59.070
doing the time syncing.

00:27:59.070 --> 00:28:00.950
I don't know if you
mentioned that.

00:28:00.950 --> 00:28:03.250
But if you do it just at the
beginning and for some reason,

00:28:03.250 --> 00:28:06.650
the latency of a person's
internet connection changes,

00:28:06.650 --> 00:28:09.480
how often do you do that and
keep that kind of up to date

00:28:09.480 --> 00:28:10.780
per client?

00:28:10.780 --> 00:28:13.530
OSKAR ERIKSSON: We actually
do two rounds of pings.

00:28:13.530 --> 00:28:17.090
First when we join a session,
and that has nothing to do

00:28:17.090 --> 00:28:19.780
with the syncing of the clients,
just rather selecting

00:28:19.780 --> 00:28:20.930
the servers.

00:28:20.930 --> 00:28:24.610
And then we do it again to
actually sync the clients, and

00:28:24.610 --> 00:28:27.120
we do this just once.

00:28:27.120 --> 00:28:30.100
But every time someone leaves or
joins the jam, and then we

00:28:30.100 --> 00:28:31.950
do it for all of the clients.

00:28:31.950 --> 00:28:36.330
So we just assume that the
latency will be consistent as

00:28:36.330 --> 00:28:39.370
long as the same players are in
the jam, and this actually

00:28:39.370 --> 00:28:41.930
works out rather well.

00:28:41.930 --> 00:28:46.280
We tested us into
that assumption.

00:28:46.280 --> 00:28:47.530
AUDIENCE: Thank you.

00:28:50.245 --> 00:28:53.540
OSKAR ERIKSSON: Did I do that?

00:28:53.540 --> 00:28:55.120
XAVIER BARRADE: Yeah,
I took a screenshot.

00:28:55.120 --> 00:28:58.340
So if there's not any more
questions, we are going to put

00:28:58.340 --> 00:29:01.890
a shortcut on the screen and
the three first people who

00:29:01.890 --> 00:29:03.410
enter the shortcut
will be able to

00:29:03.410 --> 00:29:04.670
jam live on the screen.

00:29:07.760 --> 00:29:09.955
If I can.

00:29:09.955 --> 00:29:11.710
The [? bell ?] is
not going up.

00:29:15.990 --> 00:29:17.540
OSKAR ERIKSSON: So only people
with really good

00:29:17.540 --> 00:29:18.590
eyesight can jam.

00:29:18.590 --> 00:29:20.801
XAVIER BARRADE: Interesting.

00:29:20.801 --> 00:29:22.051
I know.

00:29:26.360 --> 00:29:31.160
So this is the screenshot
I just--

00:29:31.160 --> 00:29:33.530
Now that I closed the website,
I have to take a new one.

00:29:33.530 --> 00:29:34.780
Sorry, guys.

00:29:39.200 --> 00:29:41.350
OSKAR ERIKSSON: So
you can still ask

00:29:41.350 --> 00:29:42.510
questions if you want.

00:29:42.510 --> 00:29:44.903
XAVIER BARRADE: Yeah, if you
have more questions while

00:29:44.903 --> 00:29:46.153
[INAUDIBLE].

00:30:09.630 --> 00:30:10.950
Ah, someone is joining
over there.

00:30:14.640 --> 00:30:16.400
OK, so I'm going to
zoom that in.

00:30:19.800 --> 00:30:21.520
It's case sensitive, yes.

00:30:21.520 --> 00:30:22.770
Extra challenge.

00:30:31.120 --> 00:30:34.910
So it's only going to work
if you have a laptop.

00:30:34.910 --> 00:30:38.124
Web Audio is not yet activated
on mobile.

00:30:38.124 --> 00:30:40.410
AUDIENCE: [INAUDIBLE].

00:30:40.410 --> 00:30:42.600
XAVIER BARRADE: Yeah, but we
haven't optimized the website

00:30:42.600 --> 00:30:45.090
for mobile yet, so it's going
to work better on laptop.

00:30:45.090 --> 00:30:49.760
OSKAR ERIKSSON: Give it
a try, you never know.

00:30:49.760 --> 00:30:51.140
XAVIER BARRADE: Yes.

00:30:51.140 --> 00:30:53.930
AUDIENCE: You went through
before how the sampling you

00:30:53.930 --> 00:30:55.940
needed to do for each of
these, you said 19

00:30:55.940 --> 00:30:58.700
instruments.

00:30:58.700 --> 00:31:02.390
What would the process be like
at some point in the future.

00:31:02.390 --> 00:31:05.140
Obviously, not a feature you
have right now, but at some

00:31:05.140 --> 00:31:09.290
point in the future, where you
might allow somebody to

00:31:09.290 --> 00:31:11.960
attempt to get a new instrument
into your system.

00:31:11.960 --> 00:31:15.410
What kinds of things would they
need to upload in order

00:31:15.410 --> 00:31:18.910
for that to be a possibility?

00:31:18.910 --> 00:31:19.490
XAVIER BARRADE: This
is one of--

00:31:19.490 --> 00:31:24.650
When we work on this project,
we had lots of things we--

00:31:24.650 --> 00:31:27.300
it was an experimental project
so there was lots of things we

00:31:27.300 --> 00:31:30.820
could have done or not, and this
is one of the things that

00:31:30.820 --> 00:31:32.410
we might investigate.

00:31:32.410 --> 00:31:34.900
So if you follow me on Google+,
if you'll search for

00:31:34.900 --> 00:31:37.800
Xavier Barrade on Google+, I can
come back to you on this

00:31:37.800 --> 00:31:39.480
question later.

00:31:39.480 --> 00:31:40.450
Thank you.

00:31:40.450 --> 00:31:44.420
AUDIENCE: Second, short--

00:31:44.420 --> 00:31:47.540
I was working on a similar
project but not with musical

00:31:47.540 --> 00:31:49.410
instruments, actually attempting
to do voice

00:31:49.410 --> 00:31:51.770
recording in a group.

00:31:51.770 --> 00:31:57.510
And of course, doing that we
can't rely on MIDI, to resolve

00:31:57.510 --> 00:31:59.830
the latency issues.

00:31:59.830 --> 00:32:03.000
The attempt was to actually do
dramatic recording with people

00:32:03.000 --> 00:32:06.050
hearing each other in remote
locations as opposed to

00:32:06.050 --> 00:32:07.990
everybody recording individually
not getting to

00:32:07.990 --> 00:32:11.770
hear each other when they
were doing their pieces.

00:32:11.770 --> 00:32:17.050
Did you try any other ways of
dealing with the latency, even

00:32:17.050 --> 00:32:21.070
ones you abandoned that might
help people trying to resolve

00:32:21.070 --> 00:32:23.190
the problem in other ways?

00:32:23.190 --> 00:32:26.720
OSKAR ERIKSSON: Well, actually,
when singing, it's

00:32:26.720 --> 00:32:28.090
even more--

00:32:28.090 --> 00:32:35.100
latency is even a bigger issue,
and I don't want to say

00:32:35.100 --> 00:32:40.470
it's not possible, but I would
say it's really hard today.

00:32:40.470 --> 00:32:44.510
I don't really have any
great ideas for you.

00:32:44.510 --> 00:32:48.740
It's a really good problem, and
a really good question.

00:32:48.740 --> 00:32:52.658
So let me know if you come
up with anything.

00:32:52.658 --> 00:32:56.795
XAVIER BARRADE: OK, so I think
the band is ready.

00:32:56.795 --> 00:32:58.615
Let's go.

00:32:58.615 --> 00:33:17.300
[MUSIC PLAYING]

00:33:17.300 --> 00:33:18.550
XAVIER BARRADE: [INAUDIBLE]

00:33:20.840 --> 00:33:21.095
guitar.

00:33:21.095 --> 00:34:00.840
[MUSIC PLAYING]

00:34:00.840 --> 00:34:02.950
OSKAR ERIKSSON: Yeah, I would
pay to hear that.

00:34:02.950 --> 00:34:03.870
That's a good one.

00:34:03.870 --> 00:34:04.710
XAVIER BARRADE: That's
pretty good.

00:34:04.710 --> 00:34:07.220
So as you see, even in easy
mode, it kind of requires a

00:34:07.220 --> 00:34:09.850
bit of skill to come to
a nice piece of music.

00:34:13.870 --> 00:34:14.690
So thank you, guys.

00:34:14.690 --> 00:34:17.199
I think we're done.

00:34:17.199 --> 00:34:17.889
Yes?

00:34:17.889 --> 00:34:21.370
AUDIENCE: Question, did you
check out Justin Frankel, the

00:34:21.370 --> 00:34:22.510
guy who did Winamp?

00:34:22.510 --> 00:34:26.800
He made a collaboration
program where it puts

00:34:26.800 --> 00:34:31.960
everybody like a bar ahead so
that you can jam in a groove

00:34:31.960 --> 00:34:35.310
instead of repeat like that so
you're actually always playing

00:34:35.310 --> 00:34:37.909
in real time with the music, so
is your latency for what's

00:34:37.909 --> 00:34:39.320
being recorded.

00:34:39.320 --> 00:34:43.860
But what you hear is everybody
else's previous bar or like

00:34:43.860 --> 00:34:45.540
four bars so it's
configurable.

00:34:45.540 --> 00:34:47.080
So I don't know if
you saw that?

00:34:47.080 --> 00:34:48.739
From your expression,
probably not, but

00:34:48.739 --> 00:34:51.060
that's also a cool approach.

00:34:51.060 --> 00:34:53.400
OSKAR ERIKSSON: That sounds
hard to play a

00:34:53.400 --> 00:34:55.330
real song though .

00:34:55.330 --> 00:34:57.840
If you have to play
one bar ahead.

00:34:57.840 --> 00:34:59.090
AUDIENCE: [INAUDIBLE].

00:35:01.580 --> 00:35:04.260
OSKAR ERIKSSON: Cool.

00:35:04.260 --> 00:35:05.220
So thank you.

00:35:05.220 --> 00:35:06.470
Thank you very much.

