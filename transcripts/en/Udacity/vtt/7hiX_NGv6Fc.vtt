WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.539
Generally, I would say that most computer scientist believe that P does not equal NP

00:00:04.539 --> 00:00:06.689
and there are basically two reasons for that.

00:00:06.689 --> 00:00:11.679
The first reason is the power of nondeterminism. The power of guessing correctly.

00:00:11.679 --> 00:00:16.790
It kind of seems strange that should be possible always on polynomial time

00:00:16.790 --> 00:00:20.639
and the second reason and unfortunately we'll only briefly touch that in this course

00:00:20.639 --> 00:00:26.180
is that there are problems that are believe to be even much harder than NP complete problems and

00:00:26.180 --> 00:00:32.719
P=NP will imply that also this much harder problems would be solvable in polynomial time.

00:00:32.719 --> 00:00:35.800
The high chances that P does not equal NP is of course what makes

00:00:35.800 --> 00:00:38.839
resolving the P versus NP question much harder

00:00:38.839 --> 00:00:41.699
because if we want to do show that P=NP

00:00:41.699 --> 00:00:45.749
then all we would have to find is one single polynomial time algorithm

00:00:45.749 --> 00:00:49.909
for an NP complete problem but if we want to show that P does not equal NP

00:00:49.909 --> 00:00:52.839
then we'll have to construct some mathematical proof

00:00:52.839 --> 00:00:55.829
that takes into account any conceivable algorithm

00:00:55.829 --> 00:00:59.609
no matter how sophisticated or thoughtful or advanced

00:00:59.609 --> 00:01:02.779
as long as that algorithm runs in polynomial time, we must show

00:01:02.779 --> 00:01:06.639
that it cannot solve an NP complete problem.

00:01:06.639 --> 00:01:10.819
Now as famous as the P versus NP question is there is some heated debate

00:01:10.819 --> 00:01:14.669
on whether that would actually have any practical consequences.

00:01:14.669 --> 00:01:18.000
On theoretical level of course, it would be a fantastic result

00:01:18.000 --> 00:01:22.668
and the person who manages to resolve P versus NP would become quite famous

00:01:22.668 --> 00:01:25.729
but on a practical level there is two things to consider.

00:01:25.729 --> 00:01:28.869
One is that polynomial time doesn't always mean efficiency.

00:01:28.869 --> 00:01:32.629
So as we have seen, that the NP completeness proof of SAT,

00:01:32.629 --> 00:01:38.629
the polynomials involved quickly get very large and of course a polynomial time algorithm with a time of

00:01:38.629 --> 00:01:42.749
say n²⁰ would not really be practical, and on the other hand

00:01:42.749 --> 00:01:45.909
because NP complete problems are so important in practice,

00:01:45.909 --> 00:01:49.789
there's lots of techniques that have been developed to actually deal with them

00:01:49.789 --> 00:01:52.707
and we'll learn some of them in this course of course.

00:01:52.707 --> 00:01:56.819
In any case if you want to spark a heated debate between theoretical computer scientist

00:01:56.819 --> 00:02:00.700
should you ever have the opportunity to do so then just ask them

00:02:00.700 --> 99:59:59.000
whether resolving P versus NP would have any practical consequences.

