WEBVTT
Kind: captions
Language: en

00:00:01.033 --> 00:00:01.834
Kragh: How's it going,
everyone?

00:00:01.834 --> 00:00:05.601
Welcome to the session
"Using AJAX APIs

00:00:05.601 --> 00:00:08.167
to Navigate
User-Generated Content."

00:00:08.167 --> 00:00:10.634
Thank you for coming out.

00:00:10.634 --> 00:00:13.901
Hopefully, we can learn
a lot of good things today.

00:00:13.901 --> 00:00:16.734
Most of what I've done
is I've built a website

00:00:16.734 --> 00:00:18.667
utilizing the Google APIs,

00:00:18.667 --> 00:00:20.100
and Google asked me
to come out here

00:00:20.100 --> 00:00:21.434
and share that with you.

00:00:21.434 --> 00:00:23.934
So...

00:00:23.934 --> 00:00:26.300
just to give you a little bit
of background about myself.

00:00:26.300 --> 00:00:28.100
Just one slide,
I promise here.

00:00:28.100 --> 00:00:31.133
I'm a software developer
and consultant.

00:00:31.133 --> 00:00:32.801
I started
a consulting company--

00:00:32.801 --> 00:00:36.534
Proactive Logic LLC--
in 2005.

00:00:36.534 --> 00:00:38.234
Before that, I worked
at a lot of online companies

00:00:38.234 --> 00:00:39.801
up and through the "bubble."

00:00:39.801 --> 00:00:42.634
Most notably,
I worked at barnesandnoble.com,

00:00:42.634 --> 00:00:45.167
which at the time was the fourth
largest online retailer

00:00:45.167 --> 00:00:47.501
and it was the number one
online retailer

00:00:47.501 --> 00:00:49.400
using a Microsoft stack.

00:00:49.400 --> 00:00:52.767
So my background--
as a developer,

00:00:52.767 --> 00:00:54.367
I've been developing
on the Microsoft stack

00:00:54.367 --> 00:00:56.968
for pretty much
my whole career.

00:00:56.968 --> 00:00:59.901
So I started to build
this site, Vast Rank,

00:00:59.901 --> 00:01:01.534
that I'm gonna show you
the components of

00:01:01.534 --> 00:01:04.167
and how I built them
utilizing a lot of

00:01:04.167 --> 00:01:06.701
the Google APIs,

00:01:06.701 --> 00:01:09.734
but I still use
a Microsoft back end.

00:01:09.734 --> 00:01:12.901
So at barnesandnoble.com,
I faced all of the challenges

00:01:12.901 --> 00:01:17.567
that you face at a popular site
with scaling

00:01:17.567 --> 00:01:21.033
and all of
the technical challenges

00:01:21.033 --> 00:01:24.033
that go on with
working at a large-scale site.

00:01:24.033 --> 00:01:27.000
So that's my background.

00:01:27.000 --> 00:01:28.834
An introduction
to Vast Rank:

00:01:28.834 --> 00:01:30.734
Vast Rank is a college rating
and review website

00:01:30.734 --> 00:01:32.868
that I built.

00:01:32.868 --> 00:01:35.167
And basically,
you can kind of think of it as

00:01:35.167 --> 00:01:38.501
a TripAdvisor type of site
for going to college.

00:01:38.501 --> 00:01:41.667
People post user reviews
on Vast Rank.

00:01:41.667 --> 00:01:44.234
They post the detailed
review notes,

00:01:44.234 --> 00:01:46.801
but there's also
statistical information

00:01:46.801 --> 00:01:49.067
that people post as well.

00:01:49.067 --> 00:01:51.534
I have an overall rating
for a college,

00:01:51.534 --> 00:01:53.133
but then also
it breaks it down

00:01:53.133 --> 00:01:54.834
on ten different criteria
that you'll see underneath

00:01:54.834 --> 00:01:57.667
on the user reviews
based on professors,

00:01:57.667 --> 00:02:02.968
academics, social life,
various different things

00:02:02.968 --> 00:02:05.601
that you might want to consider
when you go to school.

00:02:05.601 --> 00:02:09.634
So I launched Vast Rank
in September of 2008.

00:02:09.634 --> 00:02:12.367
And so far, it's a slow
organic growth from my side.

00:02:12.367 --> 00:02:14.334
It's not an overnight success,
where you'd see

00:02:14.334 --> 00:02:17.701
a lot of startups
that are probably here

00:02:17.701 --> 00:02:19.100
that do a lot better
than this.

00:02:19.100 --> 00:02:20.734
But I'm growing my site
slowly.

00:02:20.734 --> 00:02:24.033
I have 40,000 unique visitors
a month,

00:02:24.033 --> 00:02:27.567
which for me
I'm pretty happy about.

00:02:27.567 --> 00:02:30.634
The reason I'm happy about this
is that I have a day job.

00:02:30.634 --> 00:02:33.701
I've only created Vast Rank
on an hour-a-day programming.

00:02:33.701 --> 00:02:35.534
One of the big benefits

00:02:35.534 --> 00:02:37.968
is that I actually work
from home.

00:02:37.968 --> 00:02:40.434
So I took the first hour
of every day,

00:02:40.434 --> 00:02:43.634
at 6:00 in the morning to
7:00 in the morning every day,

00:02:43.634 --> 00:02:46.033
and I worked on this idea
that I had had for years.

00:02:46.033 --> 00:02:49.601
So that's basically
the background about Vast Rank.

00:02:49.601 --> 00:02:52.400
And while I built this,
again, the Google APIs

00:02:52.400 --> 00:02:55.667
helped create some really cool
tools for the website.

00:02:55.667 --> 00:02:59.200
So that's enough
for the background.

00:02:59.200 --> 00:03:00.834
What we're gonna dig into
today--

00:03:00.834 --> 00:03:02.300
I'm gonna show you
some creative ways

00:03:02.300 --> 00:03:05.033
to use the Google AJAX APIs.

00:03:05.033 --> 00:03:08.267
And one of the big components
of the site--

00:03:08.267 --> 00:03:09.567
there's a few that
I'll go through,

00:03:09.567 --> 00:03:11.634
but one of the big components
that I have

00:03:11.634 --> 00:03:13.834
is a ranking map.

00:03:13.834 --> 00:03:16.100
And I'm gonna switch over
to that right now

00:03:16.100 --> 00:03:18.200
to show you
what that's all about.

00:03:18.200 --> 00:03:21.601
If I go to VastRank.com,
you can see user reviews

00:03:21.601 --> 00:03:22.968
that have been posted here
and so forth

00:03:22.968 --> 00:03:26.400
and I have a Map tab.

00:03:26.400 --> 00:03:29.267
And what the ranking map is--

00:03:29.267 --> 00:03:32.801
it's a map that shows you
the highest rated colleges

00:03:32.801 --> 00:03:35.367
for the criteria
that you're interested in

00:03:35.367 --> 00:03:37.167
based on what's in view
on the map.

00:03:37.167 --> 00:03:39.634
So this is completely dynamic.

00:03:39.634 --> 00:03:41.968
Right now, I have Academics
selected,

00:03:41.968 --> 00:03:43.300
but you can pick
any of the criteria

00:03:43.300 --> 00:03:45.067
that people rate
the college on.

00:03:45.067 --> 00:03:48.601
So I can choose Social Life
or Professors.

00:03:48.601 --> 00:03:50.400
And this is right against
the live site.

00:03:50.400 --> 00:03:52.968
And as you can see,
I'm getting a different--

00:03:52.968 --> 00:03:55.734
different ratings on the left
hand side for the colleges,

00:03:55.734 --> 00:03:57.601
and then the markers
are being dropped

00:03:57.601 --> 00:03:59.534
to reflect those colleges.

00:03:59.534 --> 00:04:04.133
So the cool thing about this
is as you move the map,

00:04:04.133 --> 00:04:06.534
the ratings are completely
dynamic.

00:04:06.534 --> 00:04:10.601
So I'm going to move
across the United States.

00:04:10.601 --> 00:04:13.968
And you can see, based on
what the user has in view,

00:04:13.968 --> 00:04:15.434
the ratings
are completely dynamic

00:04:15.434 --> 00:04:16.667
and I'm drawing
the top rank colleges

00:04:16.667 --> 00:04:18.067
for what's in view.

00:04:18.067 --> 00:04:22.868
And it's--again,
I can change the criteria here.

00:04:22.868 --> 00:04:25.400
And I can change it
to say Academics.

00:04:25.400 --> 00:04:27.767
And you can see the top
for Academics.

00:04:27.767 --> 00:04:30.467
Say I wanted to see
Professors,

00:04:30.467 --> 00:04:32.334
and you could see that,

00:04:32.334 --> 00:04:35.234
and then you could zoom in

00:04:35.234 --> 00:04:37.400
and take that concept
even further.

00:04:37.400 --> 00:04:40.467
Now I could scroll across
the entire world.

00:04:40.467 --> 00:04:43.567
I have colleges
across the world,

00:04:43.567 --> 00:04:45.701
so I have international rankings
and so forth.

00:04:45.701 --> 00:04:49.534
So that's using, obviously,
the AJAX, the Google Maps API.

00:04:49.534 --> 00:04:50.701
Another thing that
I'm using here

00:04:50.701 --> 00:04:52.834
is the client location API.

00:04:52.834 --> 00:04:54.167
If you notice when
I brought up the map,

00:04:54.167 --> 00:04:57.901
it actually centered the map
in San Francisco,

00:04:57.901 --> 00:04:59.534
where we are right now.

00:04:59.534 --> 00:05:00.634
There was a lot of talk
about that.

00:05:00.634 --> 00:05:02.033
Even in the keynote today,

00:05:02.033 --> 00:05:04.167
they're bringing up client
location more and more.

00:05:04.167 --> 00:05:05.901
And that's, like,
a really easy API to use

00:05:05.901 --> 00:05:09.567
to tailor user experience,
to make their experience better.

00:05:09.567 --> 00:05:12.834
So another API here
that I use of Google's

00:05:12.834 --> 00:05:14.567
is the Client Locator.

00:05:14.567 --> 00:05:18.901
So if you look here
and I type in Stanford,

00:05:18.901 --> 00:05:21.267
it's gonna geocode Stanford.

00:05:21.267 --> 00:05:26.767
And if I zoom down here,

00:05:26.767 --> 00:05:29.167
I should have
Stanford University in view.

00:05:29.167 --> 00:05:31.667
As I mouse over the colleges
that are in view,

00:05:31.667 --> 00:05:33.367
on the left hand side
it's gonna just basically

00:05:33.367 --> 00:05:34.901
put a green little orb on it.

00:05:34.901 --> 00:05:38.300
So that's using
the client location API

00:05:38.300 --> 00:05:41.234
or the client geocoder
from Google.

00:05:41.234 --> 00:05:46.234
So let's go back here.

00:05:46.234 --> 00:05:48.200
Okay.

00:05:48.200 --> 00:05:49.934
So on the server side,

00:05:49.934 --> 00:05:52.167
I'm gonna go over some of
the concepts that I had to do

00:05:52.167 --> 00:05:54.033
to support that map as well.

00:05:54.033 --> 00:05:55.133
So there's concepts that--

00:05:55.133 --> 00:05:56.701
you know,
you have to learn the APIs.

00:05:56.701 --> 00:05:59.601
The Google APIs
are really simple to use, right?

00:05:59.601 --> 00:06:01.767
So when you're developing
the application,

00:06:01.767 --> 00:06:04.367
it's not really gonna be
the APIs that are the problem.

00:06:04.367 --> 00:06:06.000
It's gonna be the concepts
that go along with that.

00:06:06.000 --> 00:06:07.901
Like, what do I have to do
on the server,

00:06:07.901 --> 00:06:10.634
for instance, to support
these AJAX lookups and so forth?

00:06:10.634 --> 00:06:11.901
Those kind of design
decisions

00:06:11.901 --> 00:06:13.834
that you have to go through
as a developer.

00:06:13.834 --> 00:06:15.267
So I'm gonna go through
some of the things

00:06:15.267 --> 00:06:17.534
that I had to think through,
some of the gotchas that I faced

00:06:17.534 --> 00:06:21.467
and so forth, and show you
some of the strategies for that.

00:06:21.467 --> 00:06:23.400
And then the last section
of the site

00:06:23.400 --> 00:06:26.033
that I'm gonna show you
and how I built it

00:06:26.033 --> 00:06:28.267
and some of the concepts,
again, that go around it

00:06:28.267 --> 00:06:29.868
is personalization.

00:06:29.868 --> 00:06:31.100
And personalization for me

00:06:31.100 --> 00:06:33.467
is that when someone
comes to your site,

00:06:33.467 --> 00:06:34.868
how do you tailor
their experience

00:06:34.868 --> 00:06:39.767
when they come to your site
to make it more interesting

00:06:39.767 --> 00:06:42.033
and more valuable
to that user?

00:06:42.033 --> 00:06:45.667
So primarily the one piece
of personalization

00:06:45.667 --> 00:06:47.634
that I have on Vast Rank
right now

00:06:47.634 --> 00:06:50.634
is I have this section
called "Interesting for you."

00:06:50.634 --> 00:06:53.667
And if you notice
on the right hand side here,

00:06:53.667 --> 00:06:55.434
it's basically suggesting

00:06:55.434 --> 00:06:57.868
colleges that
I might be interested in

00:06:57.868 --> 00:07:00.067
based on my browsing habits
and so forth

00:07:00.067 --> 00:07:01.300
in my location.

00:07:01.300 --> 00:07:03.834
So I'm gonna go into that
in detail,

00:07:03.834 --> 00:07:05.601
and how that's designed
and how that's built

00:07:05.601 --> 00:07:08.601
utilizing the AJAX APIs
and so forth.

00:07:08.601 --> 00:07:11.367
So I'm gonna go back here.

00:07:11.367 --> 00:07:14.767
So just a little bit more
background on Vast Rank

00:07:14.767 --> 00:07:16.667
and how it's built.

00:07:16.667 --> 00:07:19.968
When I was a computer science
student at Rowan University,

00:07:19.968 --> 00:07:21.701
used to hang out and do
the normal things

00:07:21.701 --> 00:07:23.868
that a college student
would do.

00:07:23.868 --> 00:07:25.801
We would hang out after class,
play video games,

00:07:25.801 --> 00:07:27.701
go to parties,
all that kind of stuff.

00:07:27.701 --> 00:07:29.801
And I used to sit there
and say,

00:07:29.801 --> 00:07:32.100
you know, how many other kids
are doing the same thing

00:07:32.100 --> 00:07:33.567
as we're doing here?

00:07:33.567 --> 00:07:34.734
You know, there's gotta be

00:07:34.734 --> 00:07:36.601
thousands of colleges
and so forth.

00:07:36.601 --> 00:07:38.033
And being kind of
an entrepreneur and so forth

00:07:38.033 --> 00:07:40.667
I said, "I want to build the
website that caters to this."

00:07:40.667 --> 00:07:43.367
So my original idea
at that time

00:07:43.367 --> 00:07:45.434
being young and naive
was to create a site

00:07:45.434 --> 00:07:47.767
called partycolleges.com.

00:07:47.767 --> 00:07:49.501
And that never really
came into fruition

00:07:49.501 --> 00:07:51.901
'cause I didn't have
the time to build it.

00:07:51.901 --> 00:07:53.834
So eventually when
I got the time to build,

00:07:53.834 --> 00:07:56.000
as I started to build the site
more and more

00:07:56.000 --> 00:07:57.801
and it had these great
rating features and so forth

00:07:57.801 --> 00:07:59.634
and it became Vast Rank.

00:07:59.634 --> 00:08:02.200
And the initial idea
for Vast Rank--

00:08:02.200 --> 00:08:05.801
MySpace was probably
the biggest site,

00:08:05.801 --> 00:08:07.200
you know,
social networking-wise

00:08:07.200 --> 00:08:09.033
at the time that
I started to build this.

00:08:09.033 --> 00:08:11.300
So the initial idea
was to have a profile page

00:08:11.300 --> 00:08:13.200
for every college.

00:08:13.200 --> 00:08:14.667
Each college would have
their own profile page.

00:08:14.667 --> 00:08:16.801
They don't get to choose
to create it.

00:08:16.801 --> 00:08:17.968
I would create it for them.

00:08:17.968 --> 00:08:19.734
And then people could
post user reviews

00:08:19.734 --> 00:08:21.334
and ratings on that page.

00:08:21.334 --> 00:08:23.000
So you'd have comments
and so forth.

00:08:23.000 --> 00:08:25.000
Now one of the most
interesting things about

00:08:25.000 --> 00:08:28.534
a Facebook profile page
or a MySpace profile page

00:08:28.534 --> 00:08:29.868
is the profile picture.

00:08:29.868 --> 00:08:31.934
I know that when one of
my friends changes her picture,

00:08:31.934 --> 00:08:33.334
if it looks interesting
or something like that,

00:08:33.334 --> 00:08:35.367
I'll immediately click
on their profile.

00:08:35.367 --> 00:08:39.067
So what would I do
to take place of the picture?

00:08:39.067 --> 00:08:40.234
You know, it was hard enough
getting the data

00:08:40.234 --> 00:08:41.701
into my database,

00:08:41.701 --> 00:08:43.901
let alone getting
a picture of each college.

00:08:43.901 --> 00:08:46.834
So this is where I started
using the Google APIs,

00:08:46.834 --> 00:08:48.601
where I started
to dive into them.

00:08:48.601 --> 00:08:51.467
At the time,
I said, "Google Maps are cool,

00:08:51.467 --> 00:08:53.501
"and maybe I can put
a Google map in

00:08:53.501 --> 00:08:55.000
as the profile picture."

00:08:55.000 --> 00:08:57.868
So you can see here
that the equivalent on Vast Rank

00:08:57.868 --> 00:09:01.000
for a profile picture
on a social networking profile

00:09:01.000 --> 00:09:02.167
is the Google map.

00:09:02.167 --> 00:09:05.634
So I put that in place
of the profile picture.

00:09:05.634 --> 00:09:07.234
And that's the same kind
of concept

00:09:07.234 --> 00:09:08.667
that you have on YouTube
and so forth,

00:09:08.667 --> 00:09:10.300
where you have the comments
and ratings

00:09:10.300 --> 00:09:11.701
and reviews underneath.

00:09:11.701 --> 00:09:13.501
And then the video spots.

00:09:13.501 --> 00:09:14.934
So, you know,
I didn't have anything

00:09:14.934 --> 00:09:16.934
particularly interesting
to put there

00:09:16.934 --> 00:09:19.868
so I put the map.

00:09:19.868 --> 00:09:21.534
Along with the profile page,
there's other things on there

00:09:21.534 --> 00:09:23.767
like the ratings and reviews
and so forth.

00:09:23.767 --> 00:09:26.200
So that's where I started
to play around with

00:09:26.200 --> 00:09:28.367
the maps API.

00:09:28.367 --> 00:09:31.601
Now another design decision
that I made up front

00:09:31.601 --> 00:09:35.167
was that I had 10,000 colleges
in my database.

00:09:35.167 --> 00:09:36.701
And I wanted to look up--

00:09:36.701 --> 00:09:38.901
I wanted to have a clean
URL structure

00:09:38.901 --> 00:09:42.467
for navigating down
in a hierarchal fashion

00:09:42.467 --> 00:09:43.667
through the list of colleges.

00:09:43.667 --> 00:09:47.334
So I have 10,000 colleges
in memory

00:09:47.334 --> 00:09:51.501
and I want to have these
SEO or clean-looking URLs.

00:09:51.501 --> 00:09:53.400
Here you can see an example
of a URL

00:09:53.400 --> 00:09:56.801
which is VastRank.com/us.

00:09:56.801 --> 00:09:58.167
If you navigate that,

00:09:58.167 --> 00:10:00.300
you'll be able to page through
all of the colleges

00:10:00.300 --> 00:10:01.834
in the United States.

00:10:01.834 --> 00:10:05.901
Then it goes to California
and so on.

00:10:05.901 --> 00:10:09.501
So in order to support this,
in memory on the server,

00:10:09.501 --> 00:10:12.734
I had a cache
of college objects.

00:10:12.734 --> 00:10:15.501
It doesn't matter what
technology you use and so forth,

00:10:15.501 --> 00:10:18.567
but it's just a cache
of college objects.

00:10:18.567 --> 00:10:20.033
And what I would do
is I would--

00:10:20.033 --> 00:10:22.534
a URL would come in
and I would look in my cache

00:10:22.534 --> 00:10:26.067
and I would say, "Does this URL
map to one of my colleges?"

00:10:26.067 --> 00:10:27.701
I would then take
that college object

00:10:27.701 --> 00:10:31.100
and I'd draw the profile
from this cached object.

00:10:31.100 --> 00:10:32.534
Most of the stuff
that you see on there,

00:10:32.534 --> 00:10:33.734
the ratings and so forth,

00:10:33.734 --> 00:10:35.934
were all in memory
on the server.

00:10:35.934 --> 00:10:37.767
And I have basically
background jobs

00:10:37.767 --> 00:10:41.200
that recalculate that and reload
the cache periodically.

00:10:41.200 --> 00:10:45.033
So I had all of these pieces
in place.

00:10:45.033 --> 00:10:48.000
I had the Google Maps API

00:10:48.000 --> 00:10:49.400
integration with
the profile page

00:10:49.400 --> 00:10:50.667
and then this cache
of objects.

00:10:50.667 --> 00:10:54.567
So I had my "aha" moment
just playing around with

00:10:54.567 --> 00:10:55.734
these technologies,

00:10:55.734 --> 00:10:57.000
It was a side project.

00:10:57.000 --> 00:10:58.334
So I--you know, it's a time
to experiment.

00:10:58.334 --> 00:11:01.534
I said, "Wouldn't it be cool
if I could query

00:11:01.534 --> 00:11:03.667
"against the objects
that I have in memory

00:11:03.667 --> 00:11:05.167
with a Google Map?"

00:11:05.167 --> 00:11:08.067
So that's where the ranking map
came into play,

00:11:08.067 --> 00:11:10.701
which we saw in the beginning
where I demo--

00:11:10.701 --> 00:11:12.167
as you move the map across,

00:11:12.167 --> 00:11:14.200
basically it's making calls
to the server,

00:11:14.200 --> 00:11:16.834
figuring out what the user
has in view on the map,

00:11:16.834 --> 00:11:19.834
and then taking those colleges
that I figure out are in view

00:11:19.834 --> 00:11:23.334
and then returning that
back down to the client

00:11:23.334 --> 00:11:26.434
ordered by the ranking
for that school.

00:11:26.434 --> 00:11:28.501
So what I did with that--

00:11:28.501 --> 00:11:30.234
we're gonna get into
the details

00:11:30.234 --> 00:11:32.267
of some of the things
we needed to think through

00:11:32.267 --> 00:11:34.000
in figuring out
what the user's viewport is

00:11:34.000 --> 00:11:35.701
and so forth on this.

00:11:35.701 --> 00:11:38.667
So enough with
the background with that.

00:11:38.667 --> 00:11:40.267
Let's start to dig into
some actual real,

00:11:40.267 --> 00:11:42.801
concrete code here.

00:11:42.801 --> 00:11:45.567
So this is
the basic architecture

00:11:45.567 --> 00:11:49.000
of VastRank.com
from a client perspective.

00:11:49.000 --> 00:11:50.868
So of course in the Client,

00:11:50.868 --> 00:11:53.767
you have a couple different
pieces of code.

00:11:53.767 --> 00:11:55.567
I have just one chunk
of JavaScript

00:11:55.567 --> 00:11:56.734
that encapsulates all this.

00:11:56.734 --> 00:11:59.334
I call it MapModule.js.

00:11:59.334 --> 00:12:00.534
It handles
any of the events

00:12:00.534 --> 00:12:02.634
that come off of the map,
any of the--

00:12:02.634 --> 00:12:04.567
when the user selects the
drop-down list and so forth,

00:12:04.567 --> 00:12:06.868
and it handles drawing
all of the UI elements

00:12:06.868 --> 00:12:08.567
that you see on the screen.

00:12:08.567 --> 00:12:12.667
Any time that
any of those events happen,

00:12:12.667 --> 00:12:16.467
it basically makes callbacks
to two different servers.

00:12:16.467 --> 00:12:17.767
Right?

00:12:17.767 --> 00:12:21.300
You call Google for maps,
obviously,

00:12:21.300 --> 00:12:23.300
and some language
translation stuff

00:12:23.300 --> 00:12:24.634
that I'll get back to--

00:12:24.634 --> 00:12:27.567
get to at the end of
the slides here,

00:12:27.567 --> 00:12:31.534
and also callbacks to
my own server, AJAX callbacks.

00:12:31.534 --> 00:12:36.167
So that's
the basic architecture here.

00:12:36.167 --> 00:12:37.434
So moving on.

00:12:37.434 --> 00:12:40.400
I'm just gonna go through
from the beginning

00:12:40.400 --> 00:12:42.100
of when the client map
is drawn

00:12:42.100 --> 00:12:44.033
all the way through
the server and back down again

00:12:44.033 --> 00:12:45.534
with how I draw the markers.

00:12:45.534 --> 00:12:48.100
So in the keynote today,

00:12:48.100 --> 00:12:50.467
they spoke about
the client location

00:12:50.467 --> 00:12:52.334
which is gonna be built into
the browsers and so forth.

00:12:52.334 --> 00:12:54.968
And I know in the session
before this,

00:12:54.968 --> 00:12:56.801
Pamela talked about
the client location

00:12:56.801 --> 00:12:58.534
that's available today.

00:12:58.534 --> 00:12:59.767
I'm using the--

00:12:59.767 --> 00:13:02.200
so one of the first things
that you need to do

00:13:02.200 --> 00:13:06.033
for loading a map is to set
the center point on the map.

00:13:06.033 --> 00:13:07.767
And for a college,
it's easy.

00:13:07.767 --> 00:13:09.667
I have the latitude
and longitude for a college.

00:13:09.667 --> 00:13:12.834
And for a college profile,
I explicitly set the center.

00:13:12.834 --> 00:13:14.634
Right? So that's simple.

00:13:14.634 --> 00:13:16.634
What happens when someone
comes to the ranking map,

00:13:16.634 --> 00:13:18.133
which is not really
looking at

00:13:18.133 --> 00:13:21.767
any particular college
in particular?

00:13:21.767 --> 00:13:23.033
Where do I set the center?

00:13:23.033 --> 00:13:25.834
And basically,
if you're using the Google APIs,

00:13:25.834 --> 00:13:29.534
the Google loader has
a client location property on it

00:13:29.534 --> 00:13:32.968
and it may or may not,
for most times it will,

00:13:32.968 --> 00:13:35.267
have a client location
for the user

00:13:35.267 --> 00:13:36.767
of that as a latitude
and longitude,

00:13:36.767 --> 00:13:41.234
and also, there's city,
state, and country,

00:13:41.234 --> 00:13:42.901
if it's available.

00:13:42.901 --> 00:13:45.434
Again, it's based on
IP address.

00:13:45.434 --> 00:13:46.834
And that was touched on
in a previous talk.

00:13:46.834 --> 00:13:48.901
So sometimes
it's not the most accurate,

00:13:48.901 --> 00:13:51.200
but when you have
nothing else,

00:13:51.200 --> 00:13:52.534
it's a good thing to try

00:13:52.534 --> 00:13:55.501
for personalizing
your user experience.

00:13:55.501 --> 00:13:57.834
So for the ranking map,

00:13:57.834 --> 00:14:01.801
I attempt to center the map
on the client's location.

00:14:01.801 --> 00:14:03.200
Of course you have a backup
if you cannot get

00:14:03.200 --> 00:14:07.734
the client location
from the Google API.

00:14:07.734 --> 00:14:09.334
So when the map loads,

00:14:09.334 --> 00:14:11.200
you basically register
for key events.

00:14:11.200 --> 00:14:14.467
The map exposes
different events

00:14:14.467 --> 00:14:15.634
while the map moves around.

00:14:15.634 --> 00:14:19.300
The most important for me
is Mapstart--

00:14:19.300 --> 00:14:21.133
or moveSmart,
which is basically

00:14:21.133 --> 00:14:22.901
I clear all the markers
and all the detail nodes.

00:14:22.901 --> 00:14:24.734
And then as soon as
it drops,

00:14:24.734 --> 00:14:26.834
as soon as someone
stops moving the map,

00:14:26.834 --> 00:14:29.200
an event is fired,
moveend.

00:14:29.200 --> 00:14:31.667
And then at that point
is when I query the server,

00:14:31.667 --> 00:14:34.200
and then I take
the results back

00:14:34.200 --> 00:14:35.367
and I draw them on the map.

00:14:35.367 --> 00:14:37.601
There's also another one
that's move.

00:14:37.601 --> 00:14:41.033
That gets basically fired
as you're moving the map.

00:14:41.033 --> 00:14:42.834
And I tried to tie in that
originally,

00:14:42.834 --> 00:14:44.601
but it was just
way too much data

00:14:44.601 --> 00:14:46.734
going back and forth.

00:14:46.734 --> 00:14:48.467
So movestart and moveend
were the key events

00:14:48.467 --> 00:14:50.667
off of the map.

00:14:50.667 --> 00:14:53.234
So when one of these key events
happened,

00:14:53.234 --> 00:14:56.234
whether the filter changes
that the person is interested in

00:14:56.234 --> 00:14:59.667
or the map move ends,

00:14:59.667 --> 00:15:00.834
there's two pieces
of information

00:15:00.834 --> 00:15:03.167
that I send out to
the server.

00:15:03.167 --> 00:15:05.567
One is the ranking
that the person's interested in

00:15:05.567 --> 00:15:08.133
and then the current bounds
for the map.

00:15:08.133 --> 00:15:11.400
So the current bounds
of the map

00:15:11.400 --> 00:15:16.267
is made available by
the Map.getBounds() call.

00:15:16.267 --> 00:15:20.467
So if you have a reference
to a Google map from the API,

00:15:20.467 --> 00:15:22.334
you can call getBounds()
and it returns back

00:15:22.334 --> 00:15:25.334
an object called
GLatLngBounds.

00:15:25.334 --> 00:15:28.467
And what that is
is it basically has two points.

00:15:28.467 --> 00:15:31.133
It has a southwest point
and a northeast point.

00:15:31.133 --> 00:15:34.367
And those two points
are a latitude/longitude pair,

00:15:34.367 --> 00:15:36.701
which happens to be
a GLatLang object.

00:15:36.701 --> 00:15:38.667
So from these two points,
you have to determine

00:15:38.667 --> 00:15:41.634
what the user has in view
on their map.

00:15:41.634 --> 00:15:44.400
Okay, so I'm gonna go
deep into this right now

00:15:44.400 --> 00:15:46.100
because it's actually--

00:15:46.100 --> 00:15:48.167
if you're doing one of
these mash-ups and so forth,

00:15:48.167 --> 00:15:50.167
it's something that you--

00:15:50.167 --> 00:15:52.834
you're gonna have to take
into consideration.

00:15:52.834 --> 00:15:56.734
So just a brief review
of latitude and longitude here.

00:15:56.734 --> 00:15:58.834
One of the important things
to note

00:15:58.834 --> 00:16:01.234
is that the sign changes
from--

00:16:01.234 --> 00:16:03.234
when you look at
the equator there,

00:16:03.234 --> 00:16:05.000
north of the equator,
the latitude is positive,

00:16:05.000 --> 00:16:08.234
and south of the equator
latitude is negative.

00:16:08.234 --> 00:16:09.734
And then
the prime meridian--

00:16:09.734 --> 00:16:11.000
which isn't shown
in the map,

00:16:11.000 --> 00:16:14.033
but you can get it from
the boxes that are drawn there--

00:16:14.033 --> 00:16:15.701
longitude does the same thing.

00:16:15.701 --> 00:16:16.934
It goes from negative

00:16:16.934 --> 00:16:19.234
on the west side of
the prime meridian

00:16:19.234 --> 00:16:23.133
and it goes to positive
on the east side.

00:16:23.133 --> 00:16:25.033
So keeping this in mind,

00:16:25.033 --> 00:16:26.667
just gonna go through
a couple scenarios.

00:16:26.667 --> 00:16:29.067
So imagine your user
has just part of

00:16:29.067 --> 00:16:30.667
the United States in view.

00:16:30.667 --> 00:16:32.734
The signs don't change
at all.

00:16:32.734 --> 00:16:35.701
This is the simplest
scenario,

00:16:35.701 --> 00:16:37.767
the easiest one to get.

00:16:37.767 --> 00:16:39.767
And I'm gonna give you
just a hard data point here.

00:16:39.767 --> 00:16:43.133
So if you call that getBounds
for the map call,

00:16:43.133 --> 00:16:44.734
you'll get back two points.

00:16:44.734 --> 00:16:46.667
It actually--
these are real points

00:16:46.667 --> 00:16:47.934
that I got back
from the API here.

00:16:47.934 --> 00:16:51.133
As you see on the bottom
left hand side,

00:16:51.133 --> 00:16:54.334
you have 30.25 for latitude

00:16:54.334 --> 00:16:57.934
and then the north side
42.68.

00:16:57.934 --> 00:17:01.434
So that basically creates
a continuous range

00:17:01.434 --> 00:17:02.934
and then the same thing
for longitude there

00:17:02.934 --> 00:17:06.601
with a -125 and -102.

00:17:06.601 --> 00:17:08.234
And simply when
you pass that up to--

00:17:08.234 --> 00:17:09.634
when I pass that up
to the server,

00:17:09.634 --> 00:17:11.601
I'm able to loop through
all my colleges and say,

00:17:11.601 --> 00:17:15.200
"Is this latitude
between 30 and 42?"

00:17:15.200 --> 00:17:18.167
And then the same thing
for longitude.

00:17:18.167 --> 00:17:19.701
So for that,
it's very simple.

00:17:19.701 --> 00:17:21.868
It's a continuous range,
and anything that's--

00:17:21.868 --> 00:17:26.667
that it's in those ranges,
it's considered in view.

00:17:26.667 --> 00:17:30.767
So what happens when you cross
the prime meridian?

00:17:30.767 --> 00:17:34.701
Here, the longitude is gonna go
from negative to positive.

00:17:34.701 --> 00:17:37.534
So the actual call
to the API

00:17:37.534 --> 00:17:40.701
is gonna give you back--

00:17:40.701 --> 00:17:42.968
for this example here,
I'll show you a concrete example

00:17:42.968 --> 00:17:44.934
where it actually crosses
the prime meridian.

00:17:44.934 --> 00:17:48.934
We're getting a -128 back
on the southwest side

00:17:48.934 --> 00:17:52.701
and a +55.89 on
the northeast side.

00:17:52.701 --> 00:17:56.801
So for this,
it still actually works.

00:17:56.801 --> 00:18:00.434
As you get closer and closer
to the prime meridian,

00:18:00.434 --> 00:18:02.133
it's gonna get closer
and closer to zero.

00:18:02.133 --> 00:18:05.434
So that -128 that you see there
for longitude,

00:18:05.434 --> 00:18:07.367
as you get closer and closer,
it's gonna be, you know,

00:18:07.367 --> 00:18:11.901
-100, 90, and so forth
as the user moves their view

00:18:11.901 --> 00:18:14.334
closer and closer
to the prime meridian.

00:18:14.334 --> 00:18:16.567
So that's still
a continuous range

00:18:16.567 --> 00:18:20.133
between -128 and 0,
and then 0 to 55.

00:18:20.133 --> 00:18:22.701
So the algorithm still works.

00:18:22.701 --> 00:18:24.200
Now I'm gonna give you
a couple more examples

00:18:24.200 --> 00:18:25.734
that will not work
at a certain point,

00:18:25.734 --> 00:18:27.400
which is why
I'm going through this.

00:18:27.400 --> 00:18:29.501
So that still works.

00:18:29.501 --> 00:18:32.701
So I can still get this call
back up to my server,

00:18:32.701 --> 00:18:34.701
loop through
all of my colleges, say,

00:18:34.701 --> 00:18:38.133
"Is the latitude between
this range 8 and 78,

00:18:38.133 --> 00:18:40.968
and is it between
-128 and 55?"

00:18:40.968 --> 00:18:44.267
And I can say these colleges
that I have are in view

00:18:44.267 --> 00:18:45.801
if they're in those ranges.

00:18:45.801 --> 00:18:47.300
So that works.

00:18:47.300 --> 00:18:51.667
Going over the actual
equator here,

00:18:51.667 --> 00:18:54.400
the latitude's
gonna switch signs.

00:18:54.400 --> 00:18:58.167
So to give a concrete example
of this again,

00:18:58.167 --> 00:18:59.701
you're going to go from

00:18:59.701 --> 00:19:04.300
a latitude of -5.79
to negative--

00:19:04.300 --> 00:19:07.367
or to +23.72.

00:19:07.367 --> 00:19:09.567
So again,
that's a continuous range.

00:19:09.567 --> 00:19:11.367
That negative as it gets
closer to the equator

00:19:11.367 --> 00:19:12.701
is gonna be a zero.

00:19:12.701 --> 00:19:14.067
And then from the equator up,

00:19:14.067 --> 00:19:17.100
that's gonna go up
from 0 to 23.

00:19:17.100 --> 00:19:18.467
So that's still
a continuous range.

00:19:18.467 --> 00:19:20.868
Again you can loop through,
say, "Is the college

00:19:20.868 --> 00:19:23.267
LatLng within these bounds?"

00:19:23.267 --> 00:19:24.701
And if it is,

00:19:24.701 --> 00:19:28.868
then the college
is considered in view.

00:19:28.868 --> 00:19:33.033
So so far,
the variations that worked:

00:19:33.033 --> 00:19:36.734
simple, where the user's view
was just in one quadrant

00:19:36.734 --> 00:19:38.467
where it doesn't switch
signs,

00:19:38.467 --> 00:19:39.834
overlapping
the prime meridian.

00:19:39.834 --> 00:19:41.634
You can still do
this range check to figure

00:19:41.634 --> 00:19:43.567
if something is in view.

00:19:43.567 --> 00:19:46.334
And then going over
the actual--

00:19:46.334 --> 00:19:48.167
the equator there,
that also worked.

00:19:48.167 --> 00:19:49.334
Doing this range check

00:19:49.334 --> 00:19:50.667
worked for all of
those scenarios.

00:19:50.667 --> 00:19:53.367
So the "gotcha."

00:19:53.367 --> 00:19:54.534
As you're going through this

00:19:54.534 --> 00:19:56.434
and you're using
this type of logic to say,

00:19:56.434 --> 00:19:57.834
"I'm gonna take
the min and max point

00:19:57.834 --> 00:20:00.133
"and compare my latitude
and longitude

00:20:00.133 --> 00:20:02.334
for my object across these,"

00:20:02.334 --> 00:20:03.968
the one that doesn't work

00:20:03.968 --> 00:20:06.868
is that as you near
the international date line,

00:20:06.868 --> 00:20:11.434
you're going to get
closer and closer to--

00:20:11.434 --> 00:20:13.067
you're gonna get
closer and closer

00:20:13.067 --> 00:20:18.033
to 180 degrees longitude
and -180 degrees longitude.

00:20:18.033 --> 00:20:19.734
Right at the international
dateline,

00:20:19.734 --> 00:20:23.634
not 100% specific,
but around that area,

00:20:23.634 --> 00:20:26.067
it's going to make
this massive jump

00:20:26.067 --> 00:20:28.167
from one sign to another.

00:20:28.167 --> 00:20:32.200
So if you take this algorithm
that we were seeing before

00:20:32.200 --> 00:20:34.400
where we would take
the southwest point

00:20:34.400 --> 00:20:35.667
and the northeast point
and just see

00:20:35.667 --> 00:20:37.067
if it's in that range,

00:20:37.067 --> 00:20:39.634
it's actually not going to work
for this.

00:20:39.634 --> 00:20:43.501
So another look here.

00:20:43.501 --> 00:20:46.534
Here's an example
of this scenario.

00:20:46.534 --> 00:20:47.868
So right here on
the left hand side,

00:20:47.868 --> 00:20:49.501
you can see how I have
part of Japan in view

00:20:49.501 --> 00:20:50.834
and so forth.

00:20:50.834 --> 00:20:54.968
And the longitude is +116.

00:20:54.968 --> 00:21:00.801
The longitude in
the northeast part is -147.

00:21:00.801 --> 00:21:02.934
So we're looking at
this longitude range now.

00:21:02.934 --> 00:21:07.501
We have this huge range, right,
between -147 and +116.

00:21:07.501 --> 00:21:08.667
It's gigantic.

00:21:08.667 --> 00:21:10.100
Everything is gonna fall--

00:21:10.100 --> 00:21:11.267
practically everything
is gonna fall

00:21:11.267 --> 00:21:12.734
within that range.

00:21:12.734 --> 00:21:14.234
So you can no longer
take these two points

00:21:14.234 --> 00:21:18.501
that the client--
or the map's bounds give you

00:21:18.501 --> 00:21:21.467
and just check to see
if your point's within view.

00:21:21.467 --> 00:21:22.868
It doesn't work anymore.

00:21:22.868 --> 00:21:26.300
So for example,
Stanford University right here

00:21:26.300 --> 00:21:29.567
has a latitude of +37.43

00:21:29.567 --> 00:21:32.734
and a longitude of -122.17.

00:21:32.734 --> 00:21:35.267
That longitude point
falls within that massive range.

00:21:35.267 --> 00:21:37.634
And Stanford University,
which is in California,

00:21:37.634 --> 00:21:39.601
is not in view.

00:21:39.601 --> 00:21:42.501
We have only as far over
as Hawaii there.

00:21:42.501 --> 00:21:45.300
So the strategy is
you need to detect

00:21:45.300 --> 00:21:49.400
that your longitude
has changed signs.

00:21:49.400 --> 00:21:52.033
Once your longitude
has changed signs,

00:21:52.033 --> 00:21:54.667
you need to break it down.

00:21:54.667 --> 00:21:56.267
So just with any problem,

00:21:56.267 --> 00:21:58.167
as soon as something
gets difficult,

00:21:58.167 --> 00:21:59.667
I had to work through this
quite a bit

00:21:59.667 --> 00:22:01.300
and think through it
and draw it out and so forth.

00:22:01.300 --> 00:22:03.901
You just have to break it down
into simpler parts.

00:22:03.901 --> 00:22:08.133
So for this, when you detected
the sign changes,

00:22:08.133 --> 00:22:09.734
I actually--
this is what I do

00:22:09.734 --> 00:22:11.334
for my algorithm on
the server

00:22:11.334 --> 00:22:14.868
is I break it up into
two bounding boxes here.

00:22:14.868 --> 00:22:16.367
So as you can see,

00:22:16.367 --> 00:22:20.534
the longitude on
the southwest side is +116,

00:22:20.534 --> 00:22:25.234
and I just fabricate
and use a +180 degrees longitude

00:22:25.234 --> 00:22:28.601
for the northeast part
of that bounding box.

00:22:28.601 --> 00:22:31.834
Now for the bounding box
on the right hand side,

00:22:31.834 --> 00:22:34.200
I still keep the point
that was given to me

00:22:34.200 --> 00:22:39.400
by the client,
which is -147.3.

00:22:39.400 --> 00:22:41.300
And then, at that point,

00:22:41.300 --> 00:22:43.267
I fabricated the longitude
of -180.

00:22:43.267 --> 00:22:46.334
So I make these two ranges
that I can check.

00:22:46.334 --> 00:22:47.667
They don't overlap.

00:22:47.667 --> 00:22:49.901
They don't give me
that huge range.

00:22:49.901 --> 00:22:51.701
So it's actually fairly simple

00:22:51.701 --> 00:22:53.100
once you think through this
and see this.

00:22:53.100 --> 00:22:56.300
So now that you see this,
for your own maps,

00:22:56.300 --> 00:22:57.567
if you're doing
any kind of thing

00:22:57.567 --> 00:22:59.200
where you have to determine
what's in view

00:22:59.200 --> 00:23:01.767
on the user's map,
it's gonna be really simple.

00:23:01.767 --> 00:23:03.868
All that you had to do
was check the range--

00:23:03.868 --> 00:23:05.601
the max and min ranges
that were given to you

00:23:05.601 --> 00:23:07.067
by the client.

00:23:07.067 --> 00:23:10.667
And then if you detect that
the longitude crosses--

00:23:10.667 --> 00:23:13.334
crosses signs,

00:23:13.334 --> 00:23:16.667
you can simply break that down
into two ranges

00:23:16.667 --> 00:23:19.133
and check that to determine
what objects

00:23:19.133 --> 00:23:22.400
that you have geocoded
in your database are in view.

00:23:22.400 --> 00:23:26.467
So at that point,

00:23:26.467 --> 00:23:28.968
what was really surprising
to me--

00:23:28.968 --> 00:23:30.901
I'm doing all these calculations
on the server,

00:23:30.901 --> 00:23:32.734
I'm looping through
all of these colleges

00:23:32.734 --> 00:23:34.968
and so forth on the server--

00:23:34.968 --> 00:23:37.100
and something that was
completely surprising to me--

00:23:37.100 --> 00:23:39.367
again, what I was doing
with all of this stuff

00:23:39.367 --> 00:23:40.567
was a complete experiment.

00:23:40.567 --> 00:23:43.901
I had never seen this done
the way that

00:23:43.901 --> 00:23:46.701
the ranking map
particularly works.

00:23:46.701 --> 00:23:49.067
For me, it took only
12 milliseconds

00:23:49.067 --> 00:23:51.567
to do these calculations
on the server.

00:23:51.567 --> 00:23:53.434
I thought that
that was awesome.

00:23:53.434 --> 00:23:55.067
So I'm using .net
on the back end,

00:23:55.067 --> 00:23:56.834
but I don't think
it really matters.

00:23:56.834 --> 00:23:58.200
I think it's just--

00:23:58.200 --> 00:24:00.100
it's simple comparisons
between numbers and so forth.

00:24:00.100 --> 00:24:01.501
So if you loop through
and you're using Java

00:24:01.501 --> 00:24:04.434
or anything else,
I would think that

00:24:04.434 --> 00:24:06.334
you would have the same type
of performance

00:24:06.334 --> 00:24:08.200
as I'm seeing here.

00:24:08.200 --> 00:24:11.033
And this is on top of--
part of my algorithm as well

00:24:11.033 --> 00:24:13.934
is if someone doesn't have
anything in view on their map,

00:24:13.934 --> 00:24:17.601
I basically have
a calculation that calculates,

00:24:17.601 --> 00:24:19.200
for each one of
those colleges,

00:24:19.200 --> 00:24:21.434
the distance from
the center point on the map.

00:24:21.434 --> 00:24:24.434
So all of this calculation
and ordering

00:24:24.434 --> 00:24:26.901
then ordering by the rankings
and so forth,

00:24:26.901 --> 00:24:29.167
I would think it would take,
you know,

00:24:29.167 --> 00:24:31.000
longer than 12 milliseconds
myself.

00:24:31.000 --> 00:24:32.534
So this was a nice surprise.

00:24:32.534 --> 00:24:35.734
And the great thing for that
is that the user experience

00:24:35.734 --> 00:24:37.367
is really good.

00:24:37.367 --> 00:24:40.100
So oftentimes on mashups
and so forth, you see,

00:24:40.100 --> 00:24:41.734
you often have to press
a button

00:24:41.734 --> 00:24:46.400
or do something
to explicitly requery markers.

00:24:46.400 --> 00:24:47.634
You know, you have to do
a search,

00:24:47.634 --> 00:24:48.934
you have to click boxes,

00:24:48.934 --> 00:24:51.067
you have to do something
to trigger some kind of event.

00:24:51.067 --> 00:24:55.200
For me, all that I do
is on the map events

00:24:55.200 --> 00:24:59.400
that come from the maps API
on moveend,

00:24:59.400 --> 00:25:01.801
I automatically redo
the service.

00:25:01.801 --> 00:25:06.000
So I'm going against
the live site here, right?

00:25:06.000 --> 00:25:07.767
And we're at I/O,
and who the heck knows

00:25:07.767 --> 00:25:10.100
how good the network
connection is right now.

00:25:10.100 --> 00:25:13.334
But moveend--

00:25:13.334 --> 00:25:16.467
this is still pretty quick,

00:25:16.467 --> 00:25:18.767
considering all that
it's doing

00:25:18.767 --> 00:25:19.968
and considering the latency

00:25:19.968 --> 00:25:21.467
that we probably have
here at I/O

00:25:21.467 --> 00:25:24.267
with 3,000 developers
using the network right now.

00:25:24.267 --> 00:25:27.334
So I was pretty happy
about that.

00:25:27.334 --> 00:25:30.868
So again, I embrace
experimentation and so forth.

00:25:30.868 --> 00:25:33.100
I really like pushing
the edges and just

00:25:33.100 --> 00:25:34.434
not following
what other people do

00:25:34.434 --> 00:25:35.901
and just kind of come up
with your own thing.

00:25:35.901 --> 00:25:37.501
And it's nice when you get
these nice little surprises

00:25:37.501 --> 00:25:41.434
when things actually work,
and work quickly.

00:25:41.434 --> 00:25:44.501
So that was nice.

00:25:44.501 --> 00:25:45.767
A nice surprise for me.

00:25:45.767 --> 00:25:47.133
One of the--

00:25:47.133 --> 00:25:49.067
so I do all this querying
on the server and so forth,

00:25:49.067 --> 00:25:51.601
and at the end of it,
I return back

00:25:51.601 --> 00:25:54.367
a chunk of serialized
JSON objects

00:25:54.367 --> 00:25:56.667
back down to the client.

00:25:56.667 --> 00:25:58.534
And for each one of those
college objects

00:25:58.534 --> 00:26:01.501
that I return back
from my own service,

00:26:01.501 --> 00:26:03.200
I basically iterate through
all of those

00:26:03.200 --> 00:26:06.167
and I'll draw a marker
on the map

00:26:06.167 --> 00:26:07.634
with a marker manager.

00:26:07.634 --> 00:26:10.767
So I use the marker manager
that's available through Google

00:26:10.767 --> 00:26:13.567
through Google code.

00:26:13.567 --> 00:26:14.868
And I use that
to manage the markers

00:26:14.868 --> 00:26:16.934
on the right hand side,
and then on the left hand side

00:26:16.934 --> 00:26:21.534
I'm utilizing jQuery
to draw the actual detail nodes

00:26:21.534 --> 00:26:23.200
on the left hand side.

00:26:23.200 --> 00:26:25.400
And when I was invited
by Google

00:26:25.400 --> 00:26:27.601
to actually put together
this talk,

00:26:27.601 --> 00:26:30.801
I was originally just using
straight DOM manipulation myself

00:26:30.801 --> 00:26:32.601
and I moved over
to using jQuery.

00:26:32.601 --> 00:26:34.467
And the thing that
was cool about it was that

00:26:34.467 --> 00:26:37.801
it made things like
mouseover on DIVs

00:26:37.801 --> 00:26:39.167
and all this kind of stuff--

00:26:39.167 --> 00:26:40.601
I didn't even have
to worry about it.

00:26:40.601 --> 00:26:42.901
You just get those simple events
off of jQuery

00:26:42.901 --> 00:26:45.300
that just work.

00:26:45.300 --> 00:26:49.234
So when I draw the marker
on the right hand side,

00:26:49.234 --> 00:26:52.267
and I draw the details node
on the left hand side,

00:26:52.267 --> 00:26:54.067
they're kept in sync.

00:26:54.067 --> 00:26:56.367
There's events that--
for mouseover on the markers

00:26:56.367 --> 00:26:59.100
that are exposed
by the Google markers,

00:26:59.100 --> 00:27:00.400
and in the events
that I have from jQuery

00:27:00.400 --> 00:27:01.834
on the left hand side,

00:27:01.834 --> 00:27:03.167
and basically,
I keep the two in sync.

00:27:03.167 --> 00:27:06.167
So if someone actually
mouses over any of the nodes,

00:27:06.167 --> 00:27:09.167
they're kept in sync
with one another.

00:27:09.167 --> 00:27:11.601
So if I just go here,
I can mouse over

00:27:11.601 --> 00:27:13.601
and then the items
are highlighted on the map.

00:27:13.601 --> 00:27:14.767
So I can go here,

00:27:14.767 --> 00:27:16.701
and I'm just using
some jQuery plugins

00:27:16.701 --> 00:27:18.534
to do the scrolling
and so forth

00:27:18.534 --> 00:27:20.300
to make sure things
are scrolled in view.

00:27:20.300 --> 00:27:24.033
So you can get the whole details
for whatever you're, uh--

00:27:24.033 --> 00:27:25.501
whatever you're mousing over
and so forth.

00:27:25.501 --> 00:27:28.734
So...

00:27:32.100 --> 00:27:34.300
I have two versions
of the presentation open.

00:27:34.300 --> 00:27:37.601
Okay, so just another thing
that--

00:27:37.601 --> 00:27:39.267
I touched on this briefly
before with the performance

00:27:39.267 --> 00:27:41.133
of all of this.

00:27:41.133 --> 00:27:43.467
My algorithm for when
the user doesn't have anything

00:27:43.467 --> 00:27:44.901
that's ranked in view,

00:27:44.901 --> 00:27:47.033
I actually draw things
closer to the center.

00:27:47.033 --> 00:27:50.901
So, you know,
latitude/longitude calculation,

00:27:50.901 --> 00:27:54.667
distance calculations
are obviously

00:27:54.667 --> 00:27:56.334
well documented and so forth.

00:27:56.334 --> 00:27:58.367
And whatever your programming
language is of choice,

00:27:58.367 --> 00:28:00.167
I'm sure you can find
some sample code out there

00:28:00.167 --> 00:28:02.000
to find--
to do distance calculations.

00:28:02.000 --> 00:28:04.000
So when there's nothing
in view,

00:28:04.000 --> 00:28:05.968
I still want the user
to see colleges,

00:28:05.968 --> 00:28:08.133
so I just draw whatever's
closest to the center.

00:28:08.133 --> 00:28:09.934
I just added international
colleges,

00:28:09.934 --> 00:28:11.100
so I don't have any rankings

00:28:11.100 --> 00:28:14.167
for what's in view
in New Zealand.

00:28:14.167 --> 00:28:15.334
So it's just an example

00:28:15.334 --> 00:28:19.367
of what the user
would see here.

00:28:19.367 --> 00:28:21.367
So to move on here,

00:28:21.367 --> 00:28:23.434
what I used originally
out of the box

00:28:23.434 --> 00:28:25.901
was the original info window
supplied by

00:28:25.901 --> 00:28:28.901
the Google Maps API.

00:28:28.901 --> 00:28:31.634
So the problem that
I ran into with this

00:28:31.634 --> 00:28:34.467
was that the Google marker--

00:28:34.467 --> 00:28:36.801
the info window that they supply
out of the box,

00:28:36.801 --> 00:28:39.434
you can't control the direction
that it opens.

00:28:39.434 --> 00:28:40.667
And for me, this was
a big problem

00:28:40.667 --> 00:28:44.167
because the whole crux
of what my ranking map is

00:28:44.167 --> 00:28:46.868
is that it shows you rankings
based on what's in view.

00:28:46.868 --> 00:28:50.234
So the info marker
implementation out of the box,

00:28:50.234 --> 00:28:52.434
it will move your map
if you mouse over it.

00:28:52.434 --> 00:28:54.167
So it will move it
to make sure that

00:28:54.167 --> 00:28:56.501
the info window opens
in view,

00:28:56.501 --> 00:28:59.467
which for me would change
what the user has in view,

00:28:59.467 --> 00:29:00.901
which would make
more colleges in view

00:29:00.901 --> 00:29:02.434
and potentially change
the user's ranking.

00:29:02.434 --> 00:29:04.868
So a user would come
to the site.

00:29:04.868 --> 00:29:07.000
They would focus on the area
that they're interested in,

00:29:07.000 --> 00:29:08.501
and they want to see
the information

00:29:08.501 --> 00:29:11.133
and then they mouse over it,
and then boom,

00:29:11.133 --> 00:29:13.601
the map would move and then
all these markers would reload.

00:29:13.601 --> 00:29:17.367
So it was a terrible
user experience.

00:29:17.367 --> 00:29:20.067
Once option
that I found was that

00:29:20.067 --> 00:29:23.400
the info window has an option
to suppress the pan,

00:29:23.400 --> 00:29:26.767
but I'm not even sure
why that's actually there.

00:29:26.767 --> 00:29:28.801
It's not documented,
so maybe they didn't intend

00:29:28.801 --> 00:29:30.968
anybody to use it,
but I use that as well.

00:29:30.968 --> 00:29:32.133
But it doesn't really
make any sense

00:29:32.133 --> 00:29:34.267
because now you can't see
the information

00:29:34.267 --> 00:29:35.501
that's in view.

00:29:35.501 --> 00:29:39.000
So this implementation
didn't work for me.

00:29:39.000 --> 00:29:40.501
One of the things
that I like to do

00:29:40.501 --> 00:29:42.501
when I encountered
these kind of problems

00:29:42.501 --> 00:29:45.133
is say, "Can I just
get rid of it completely?"

00:29:45.133 --> 00:29:46.300
Like I was thinking about

00:29:46.300 --> 00:29:47.701
using a third party
implementation

00:29:47.701 --> 00:29:49.634
of the info windows
and so forth,

00:29:49.634 --> 00:29:51.067
but maybe if--

00:29:51.067 --> 00:29:52.400
what can I do to just
get rid of this problem

00:29:52.400 --> 00:29:53.567
and not even think about it?

00:29:53.567 --> 00:29:56.400
So when I changed
my implementation,

00:29:56.400 --> 00:29:58.901
I added this detail section
on the left hand side

00:29:58.901 --> 00:30:00.801
which shows all of
the information

00:30:00.801 --> 00:30:03.133
for what's in view

00:30:03.133 --> 00:30:04.467
or what markers are drawn
automatically.

00:30:04.467 --> 00:30:05.834
And I actually think
it turned out to be

00:30:05.834 --> 00:30:08.067
a better user experience.

00:30:08.067 --> 00:30:10.300
So you no longer
have to mouse over each marker

00:30:10.300 --> 00:30:11.601
to figure out what's going on

00:30:11.601 --> 00:30:13.133
or what those markers mean
and so forth.

00:30:13.133 --> 00:30:15.467
The details are returned
automatically

00:30:15.467 --> 00:30:16.934
on the left hand side.

00:30:16.934 --> 00:30:19.234
So I love when you can just
take something

00:30:19.234 --> 00:30:21.000
and it's not working for you,
and you can say,

00:30:21.000 --> 00:30:22.634
"Can I get rid of this?

00:30:22.634 --> 00:30:24.567
"Can I throw it away and do
something completely different?

00:30:24.567 --> 00:30:26.667
Let me think about it
from a totally different angle."

00:30:26.667 --> 00:30:30.634
So this was my strategy here
where you saw

00:30:30.634 --> 00:30:35.167
the synchronization
between all of that.

00:30:35.167 --> 00:30:36.801
And that's still improving.

00:30:36.801 --> 00:30:38.300
So that's the ranking map.

00:30:38.300 --> 00:30:40.667
I'm gonna go through
a little bit about geocoding

00:30:40.667 --> 00:30:42.767
and what I had to do
for geocoding.

00:30:42.767 --> 00:30:45.601
So ahead of time,
I had this college database

00:30:45.601 --> 00:30:47.701
which had address
information,

00:30:47.701 --> 00:30:50.534
name of the college,
and so forth.

00:30:50.534 --> 00:30:52.901
I needed to geocode all of
the colleges in my database

00:30:52.901 --> 00:30:54.234
ahead of time.

00:30:54.234 --> 00:30:57.667
So Google has an HTTP
geocoder they can use.

00:30:57.667 --> 00:31:00.634
It's very simple to use.

00:31:00.634 --> 00:31:01.934
The interesting thing here,
though,

00:31:01.934 --> 00:31:04.667
is when you start to use it--

00:31:04.667 --> 00:31:06.601
I had all of this college
information.

00:31:06.601 --> 00:31:09.267
Sometimes the address
information will be inaccurate.

00:31:09.267 --> 00:31:11.167
Sometimes Google
wouldn't know about

00:31:11.167 --> 00:31:12.834
the address information
and so forth.

00:31:12.834 --> 00:31:14.434
And then even in
the best case scenario,

00:31:14.434 --> 00:31:16.000
if I provided, like,
the name of the college

00:31:16.000 --> 00:31:18.200
and the address information
to the geocoder,

00:31:18.200 --> 00:31:23.267
it would at best give me
an accuracy backup of 8.

00:31:23.267 --> 00:31:26.133
And what 8 is
is address level--

00:31:26.133 --> 00:31:27.968
Google has an enumeration
that tells you

00:31:27.968 --> 00:31:30.534
the accuracy of the results
back from the geocoder.

00:31:30.534 --> 00:31:32.200
So 8 is actually
address level.

00:31:32.200 --> 00:31:34.267
So that would be
a point like

00:31:34.267 --> 00:31:36.767
888 Howard Street
in San Francisco.

00:31:36.767 --> 00:31:39.501
If you got an accuracy
of 8,

00:31:39.501 --> 00:31:41.701
it would drop a pin
right on that spot.

00:31:41.701 --> 00:31:45.300
If you were to use the map's API
to draw that address,

00:31:45.300 --> 00:31:47.934
it would draw it
right on the actual location.

00:31:47.934 --> 00:31:49.567
So that's pretty good, right?

00:31:49.567 --> 00:31:53.534
But even better--
I had all of this data.

00:31:53.534 --> 00:31:55.033
So I'd basically write
this little script.

00:31:55.033 --> 00:31:56.901
It would go against
the HTTP geocoder,

00:31:56.901 --> 00:31:58.200
geocode all my data.

00:31:58.200 --> 00:31:59.968
I'd look at it.
I'd say, "What do I get back?

00:31:59.968 --> 00:32:01.267
"That's not that accurate.

00:32:01.267 --> 00:32:02.834
What's wrong with
this information?"

00:32:02.834 --> 00:32:04.167
So I did a lot
of experimenting,

00:32:04.167 --> 00:32:07.167
and what I found was--

00:32:07.167 --> 00:32:09.834
really a great surprise to me
was that

00:32:09.834 --> 00:32:12.100
if I supply just
the college name

00:32:12.100 --> 00:32:15.634
and the town and the state,

00:32:15.634 --> 00:32:18.200
I would actually oftentimes
get back an accuracy of 9,

00:32:18.200 --> 00:32:22.667
which is premise accuracy,
I believe they term it.

00:32:22.667 --> 00:32:24.334
And the cool thing
about that is

00:32:24.334 --> 00:32:27.801
now I have this really,
really accurate location.

00:32:27.801 --> 00:32:30.000
As you can see here,
here's a county college.

00:32:30.000 --> 00:32:31.334
It's actually near
where I live.

00:32:31.334 --> 00:32:34.801
Ocean County College,
and it drops the pin--

00:32:34.801 --> 00:32:36.868
that's a pin drawing
on the latitude and longitude

00:32:36.868 --> 00:32:39.467
that it got back
from the geocoder,

00:32:39.467 --> 00:32:41.267
and it draws it right
in the center of the campus.

00:32:41.267 --> 00:32:43.701
So it knows about
this location,

00:32:43.701 --> 00:32:45.100
which is really cool.

00:32:45.100 --> 00:32:46.868
And then the user
gets to see this great outline

00:32:46.868 --> 00:32:48.934
of the campus and so forth.

00:32:48.934 --> 00:32:52.601
So the lesson here
that I learned was that

00:32:52.601 --> 00:32:55.601
you can actually try
to geocode place names

00:32:55.601 --> 00:32:57.167
and just give it
just enough information

00:32:57.167 --> 00:32:59.701
so that the geocoder
can figure out what it's doing.

00:32:59.701 --> 00:33:02.367
And it might actually
know the actual place

00:33:02.367 --> 00:33:04.200
of your geocoding locations.

00:33:04.200 --> 00:33:05.467
I'm not sure what else
this works for.

00:33:05.467 --> 00:33:07.100
I just did it for colleges,
but I would assume that

00:33:07.100 --> 00:33:09.067
there's other types
of locations

00:33:09.067 --> 00:33:10.767
that this works
pretty well for as well.

00:33:10.767 --> 00:33:13.367
Maybe you have data
that you're geocoding

00:33:13.367 --> 00:33:16.067
that would fall into that.

00:33:16.067 --> 00:33:18.834
So that's the HTTP geocoder
which is used ahead of time

00:33:18.834 --> 00:33:22.267
to geocode the address
information in my database.

00:33:22.267 --> 00:33:26.667
Now, I also used the client
geocoder on the client side.

00:33:26.667 --> 00:33:28.801
So what we saw before
in the demo was that

00:33:28.801 --> 00:33:31.934
I typed in "Stanford"
on the map

00:33:31.934 --> 00:33:34.367
and it geocoded Stanford
and center--

00:33:34.367 --> 00:33:37.901
and I used that information
to center the map.

00:33:37.901 --> 00:33:40.000
So here I just have
a simple call

00:33:40.000 --> 00:33:41.634
to the client geocoder.

00:33:41.634 --> 00:33:43.067
Again, as I said before,

00:33:43.067 --> 00:33:45.701
the Google APIs
are simple to use.

00:33:45.701 --> 00:33:46.834
It's not--

00:33:46.834 --> 00:33:49.033
the APIs are just
out of your way.

00:33:49.033 --> 00:33:51.334
They just make sense
to me, at least.

00:33:51.334 --> 00:33:53.634
So you call the API,
you geocode--

00:33:53.634 --> 00:33:56.467
you try to geocode
the point.

00:33:56.467 --> 00:33:58.133
And the cool thing about this
was that

00:33:58.133 --> 00:34:00.701
it's really amazing.

00:34:00.701 --> 00:34:03.434
You know, when I put
in Stanford into that,

00:34:03.434 --> 00:34:04.634
it's not calling my server

00:34:04.634 --> 00:34:06.267
and looking at my information
for Stanford.

00:34:06.267 --> 00:34:08.234
It's calling Google,
who has nothing--

00:34:08.234 --> 00:34:09.300
no knowledge of my website

00:34:09.300 --> 00:34:11.067
that it's a college
ranking website.

00:34:11.067 --> 00:34:12.801
And then boom,
it gives me back that point.

00:34:12.801 --> 00:34:15.801
So the client geocoder
is really powerful.

00:34:15.801 --> 00:34:17.467
It also works with
the normal use cases

00:34:17.467 --> 00:34:19.601
that you would think about
like addresses

00:34:19.601 --> 00:34:23.567
and state and city and so forth
and all that.

00:34:23.567 --> 00:34:25.434
That all works great as well.

00:34:25.434 --> 00:34:27.434
But again,
the client geocoder

00:34:27.434 --> 00:34:29.667
does some really cool things,
and it just surprises me.

00:34:29.667 --> 00:34:31.767
I don't think the document--
what it should do

00:34:31.767 --> 00:34:34.067
as far as like the accuracy
of things

00:34:34.067 --> 00:34:35.367
that you can put in there
and so forth--

00:34:35.367 --> 00:34:37.400
but from my experience
with just putting in, like,

00:34:37.400 --> 00:34:39.701
the well-known college names
and so forth,

00:34:39.701 --> 00:34:43.067
it geocodes those very well.

00:34:43.067 --> 00:34:45.400
So that's it
with the geocoding portion

00:34:45.400 --> 00:34:47.100
of the presentation.

00:34:47.100 --> 00:34:48.300
The next thing
I'm gonna go into

00:34:48.300 --> 00:34:50.167
is the personalization aspect
of Vast Rank,

00:34:50.167 --> 00:34:55.901
which is something
that I really love to work on

00:34:55.901 --> 00:34:58.267
because when I get visitors
at Vast Rank,

00:34:58.267 --> 00:34:59.634
they're looking
for college reviews

00:34:59.634 --> 00:35:00.901
of a certain college,
right?

00:35:00.901 --> 00:35:02.968
So since I have a profile page
of every college,

00:35:02.968 --> 00:35:06.934
they land on a college
profile page.

00:35:06.934 --> 00:35:08.701
And as that user goes through
Vast Rank,

00:35:08.701 --> 00:35:10.767
I want to, you know,

00:35:10.767 --> 00:35:12.300
we have all of this
information

00:35:12.300 --> 00:35:15.667
at our disposal to figure out
what the user's trying to do

00:35:15.667 --> 00:35:18.000
and try to make
the site experience better

00:35:18.000 --> 00:35:20.133
for that user.

00:35:20.133 --> 00:35:22.300
So I'm gonna go through
how I do personalization

00:35:22.300 --> 00:35:23.801
on Vast Rank.

00:35:23.801 --> 00:35:25.634
So here I'm just gonna
go through a scenario of:

00:35:25.634 --> 00:35:28.767
How do you suggest colleges
to users programmatically?

00:35:28.767 --> 00:35:31.834
So we have a user Kim here
that I want to subject--

00:35:31.834 --> 00:35:33.701
that the outcome
will be suggesting

00:35:33.701 --> 00:35:35.300
Brown University to her.

00:35:35.300 --> 00:35:38.801
So just to go through
what I do for Vast Rank,

00:35:38.801 --> 00:35:40.167
I'll go through this example

00:35:40.167 --> 00:35:43.033
where I have a previous visitor
Jamie.

00:35:43.033 --> 00:35:44.601
So Jamie came to the site.

00:35:44.601 --> 00:35:46.834
I anonymously track
information about users

00:35:46.834 --> 00:35:50.868
just using a name here
to give some context to this.

00:35:50.868 --> 00:35:52.701
So Jamie looked at
Rutgers University,

00:35:52.701 --> 00:35:55.467
Brown University,
and Florida State University.

00:35:55.467 --> 00:35:57.834
And I have a lot of this
user information

00:35:57.834 --> 00:35:59.334
in my database.

00:35:59.334 --> 00:36:01.467
So to just make it simple,

00:36:01.467 --> 00:36:05.567
we can go through this
and we have a new user Kim.

00:36:05.567 --> 00:36:07.634
So you can imagine
Kim types in--

00:36:07.634 --> 00:36:09.868
I'm looking for
Rutgers University reviews,

00:36:09.868 --> 00:36:12.667
or some other key word
that would potentially come up

00:36:12.667 --> 00:36:15.801
with Vast Rank--
a Vast Rank profile page.

00:36:15.801 --> 00:36:19.300
She clicks on the profile page.
She comes to Rutgers.

00:36:19.300 --> 00:36:23.234
Now I see that Kim is looking
at Rutgers, right?

00:36:23.234 --> 00:36:25.200
And I look back
in my historical data,

00:36:25.200 --> 00:36:27.567
which is more than
just one user.

00:36:27.567 --> 00:36:29.067
But just to keep with
this simple example,

00:36:29.067 --> 00:36:32.133
I can see that Jamie,
one of our previous users

00:36:32.133 --> 00:36:33.934
has also looked at Rutgers.

00:36:33.934 --> 00:36:35.734
She's also looked at
Brown University

00:36:35.734 --> 00:36:37.000
and Florida State University.

00:36:37.000 --> 00:36:40.601
So now I have two additional
possible suggestions

00:36:40.601 --> 00:36:43.701
to give to Kim based on
other user information.

00:36:43.701 --> 00:36:45.334
I also have additional
information

00:36:45.334 --> 00:36:47.400
in the Vast Rank database
that draws relations

00:36:47.400 --> 00:36:49.200
between colleges.

00:36:49.200 --> 00:36:51.000
But just strictly
user information here--

00:36:51.000 --> 00:36:53.667
I can take this,

00:36:53.667 --> 00:36:55.968
and using
the Client Location API,

00:36:55.968 --> 00:36:57.968
which has come up a lot
in this conference.

00:36:57.968 --> 00:36:59.067
It came up in the keynote.

00:36:59.067 --> 00:37:01.834
It came up in Pamela's talk
as well.

00:37:01.834 --> 00:37:04.000
What's really interesting
about this

00:37:04.000 --> 00:37:07.167
is I can take Kim's location,
right,

00:37:07.167 --> 00:37:09.434
and I can figure out
where she's located.

00:37:09.434 --> 00:37:12.200
Now using the API,
it's just down to IP address

00:37:12.200 --> 00:37:14.100
as far as accuracy
and so forth.

00:37:14.100 --> 00:37:16.067
But in general,
it works pretty well.

00:37:16.067 --> 00:37:19.601
So she comes to the site.
She lands on Rutgers University.

00:37:19.601 --> 00:37:21.868
I don't know anything else about
her other than her location

00:37:21.868 --> 00:37:24.200
and that she's looking
at Rutgers University.

00:37:24.200 --> 00:37:26.367
Now I have two possible
suggestions to give to her.

00:37:26.367 --> 00:37:28.634
I can either suggest to her
Brown University

00:37:28.634 --> 00:37:32.701
or I can suggest to her
Florida State University.

00:37:32.701 --> 00:37:35.934
So I make a call--
on the client side,

00:37:35.934 --> 00:37:37.667
it makes a call
to the client location.

00:37:37.667 --> 00:37:39.934
It gets the latitude for Kim.

00:37:39.934 --> 00:37:41.667
And from that,
I can tell that

00:37:41.667 --> 00:37:43.467
Kim lives in northern
New Jersey,

00:37:43.467 --> 00:37:46.100
which is obviously gonna get--
from a client location API,

00:37:46.100 --> 00:37:48.434
you're actually gonna get back
a latitude/longitude point.

00:37:48.434 --> 00:37:50.167
But just to give some context
to it,

00:37:50.167 --> 00:37:52.234
she lives in northern
New Jersey.

00:37:52.234 --> 00:37:54.667
Now, northern New Jersey
is closer to Rhode Island

00:37:54.667 --> 00:37:56.868
than it is to Florida,
right?

00:37:56.868 --> 00:37:58.701
So from this information,

00:37:58.701 --> 00:38:01.234
I can fine tune
my personalization algorithm

00:38:01.234 --> 00:38:03.467
using client location to say,

00:38:03.467 --> 00:38:07.000
"Here are the possible
suggestions out of

00:38:07.000 --> 00:38:09.067
"my whole database
of user information

00:38:09.067 --> 00:38:12.133
that I can suggest
to Kim here."

00:38:12.133 --> 00:38:13.968
But I'm gonna take
the client location information

00:38:13.968 --> 00:38:17.300
and fine tune that down
and give her at least

00:38:17.300 --> 00:38:19.567
the ones that
she may be interested in

00:38:19.567 --> 00:38:21.300
that are close to her.

00:38:21.300 --> 00:38:23.367
Now this is a very young
algorithm.

00:38:23.367 --> 00:38:24.801
We can--I can add
more to this,

00:38:24.801 --> 00:38:29.234
but at least as a first stab
I'm giving local colleges

00:38:29.234 --> 00:38:30.801
that are related
to the college

00:38:30.801 --> 00:38:34.601
that the person's looking at
to suggest to them.

00:38:34.601 --> 00:38:36.267
So that's the personalization
algorithm,

00:38:36.267 --> 00:38:39.267
and just--kind of a creative
way to use client location.

00:38:39.267 --> 00:38:41.000
Client location, again,
is so simple.

00:38:41.000 --> 00:38:42.601
All it is is API calling.

00:38:42.601 --> 00:38:44.167
You get back
a latitude/longitude point.

00:38:44.167 --> 00:38:46.033
So you can--
but with that information,

00:38:46.033 --> 00:38:49.200
you can do all kinds
of things.

00:38:49.200 --> 00:38:52.868
So here's an example
of that personalization working.

00:38:52.868 --> 00:38:55.667
So this is actually
an example from the live site.

00:38:55.667 --> 00:38:58.000
I have a picture
of Rutgers University,

00:38:58.000 --> 00:38:59.367
and I went through
this scenario

00:38:59.367 --> 00:39:01.300
and then backfilled
my slides

00:39:01.300 --> 00:39:04.067
from this scenario,
actually.

00:39:04.067 --> 00:39:06.033
So what we have here
is that someone's browsing

00:39:06.033 --> 00:39:09.267
Rutgers University
and suggesting Brown University.

00:39:09.267 --> 00:39:10.801
And on the fly
for these suggestions,

00:39:10.801 --> 00:39:12.534
I just do a quick distance
calculation--

00:39:12.534 --> 00:39:14.334
which, in your programming
language of choice,

00:39:14.334 --> 00:39:19.334
I'm sure that the algorithm
is freely out there--

00:39:19.334 --> 00:39:22.033
just to find the distance
from the user's client location

00:39:22.033 --> 00:39:24.767
that I used to tailor
the results to begin with.

00:39:24.767 --> 00:39:29.367
So that's the Vast Rank
client personalization.

00:39:29.367 --> 00:39:31.834
So one of the things
that I did

00:39:31.834 --> 00:39:35.133
right before I came to I/O
was tie in

00:39:35.133 --> 00:39:38.200
the translation part
to Vast Rank.

00:39:38.200 --> 00:39:40.501
So one of the pushes
that I've done for Vast Rank,

00:39:40.501 --> 00:39:42.734
I added international
colleges.

00:39:42.734 --> 00:39:44.968
Originally I started with
just colleges

00:39:44.968 --> 00:39:47.067
in the United States.

00:39:47.067 --> 00:39:48.634
It's what I was familiar with
and so forth.

00:39:48.634 --> 00:39:53.434
But for anybody who's worked
on websites in general,

00:39:53.434 --> 00:39:56.534
you realize that there's
a huge global audience, right?

00:39:56.534 --> 00:39:59.868
So I especially look at it
when I look at my own blog

00:39:59.868 --> 00:40:01.634
and look at
the usage statistics.

00:40:01.634 --> 00:40:05.601
You know, it's obvious
that targeting a global audience

00:40:05.601 --> 00:40:07.467
makes a lot of sense.

00:40:07.467 --> 00:40:12.400
So my first step was to add
the international colleges

00:40:12.400 --> 00:40:13.834
which was just a natural fit.

00:40:13.834 --> 00:40:16.367
But then, what do you do
for international users?

00:40:16.367 --> 00:40:18.300
There's a lot of
out of country users

00:40:18.300 --> 00:40:21.234
that are looking at colleges
in the United States,

00:40:21.234 --> 00:40:23.968
which I originally had and
then launched the site with.

00:40:23.968 --> 00:40:26.834
So what's really cool
is that the--

00:40:26.834 --> 00:40:28.534
Google has this languages API.

00:40:28.534 --> 00:40:30.334
It's just an API into
what you'd see

00:40:30.334 --> 00:40:31.767
for Google Translate, right?

00:40:31.767 --> 00:40:35.834
So what happens is I--
just to start off,

00:40:35.834 --> 00:40:38.834
to start simple
with Translation on my site,

00:40:38.834 --> 00:40:43.367
I basically look at the user's
languages accepts headers--

00:40:43.367 --> 00:40:44.968
the HTTP headers
I come across--

00:40:44.968 --> 00:40:46.167
and I figure out
what are the languages

00:40:46.167 --> 00:40:48.334
that this user accepts
for their browser.

00:40:48.334 --> 00:40:51.701
And from that,
if it's not English

00:40:51.701 --> 00:40:54.634
that they have for
their browser language,

00:40:54.634 --> 00:40:57.734
I'm going to emit
a JavaScript call

00:40:57.734 --> 00:41:01.868
for each one of my reviews
on the site.

00:41:01.868 --> 00:41:05.968
So basically I say, "Okay,
is this HTTP header English?"

00:41:05.968 --> 00:41:09.467
If it's not, then I'm gonna emit
this JavaScript call

00:41:09.467 --> 00:41:11.834
for each one of
my review nodes,

00:41:11.834 --> 00:41:14.033
Google that language
on Translate,

00:41:14.033 --> 00:41:16.667
and what that's showing there,
the second argument there

00:41:16.667 --> 00:41:18.734
is just saying "en"
'cause I'm assuming

00:41:18.734 --> 00:41:22.267
that all of my content
is in English right now--

00:41:22.267 --> 00:41:24.534
and then translate it
to the user's target language,

00:41:24.534 --> 00:41:26.334
which I figure out
on the server side

00:41:26.334 --> 00:41:29.033
based on their HTTP headers,
right?

00:41:29.033 --> 00:41:32.534
So--
and then at the end of that,

00:41:32.534 --> 00:41:33.834
I make a call.

00:41:33.834 --> 00:41:35.434
If I do use the Google
translation services,

00:41:35.434 --> 00:41:38.634
there's an API call
to get the branding that you--

00:41:38.634 --> 00:41:42.434
that I put underneath
of the user review.

00:41:42.434 --> 00:41:45.334
So in the future,
what I want to do

00:41:45.334 --> 00:41:47.234
is I want to detect
the actual language

00:41:47.234 --> 00:41:48.367
that the user's posting in

00:41:48.367 --> 00:41:49.968
at the time that
they post the review.

00:41:49.968 --> 00:41:52.501
Because the Languages API
actually gives you

00:41:52.501 --> 00:41:54.367
this detect function.

00:41:54.367 --> 00:41:56.634
So I can have someone
reviewing a college

00:41:56.634 --> 00:41:58.968
that's, say, in Germany,

00:41:58.968 --> 00:42:01.567
and when they post that review
I can have a little JavaScript

00:42:01.567 --> 00:42:04.267
that goes and interrogates
the text that they're posting.

00:42:04.267 --> 00:42:08.000
And I could say is this--and you
can call languages.detect

00:42:08.000 --> 00:42:10.801
and it will return
back to you its best--

00:42:10.801 --> 00:42:13.734
the best that it can determine
what that language is

00:42:13.734 --> 00:42:15.300
for what the user's posting.

00:42:15.300 --> 00:42:17.567
What I'm gonna do
is I'm gonna store that

00:42:17.567 --> 00:42:19.834
in a database so that I know
that I can translate.

00:42:19.834 --> 00:42:21.767
For instance,
if I'm an English user

00:42:21.767 --> 00:42:25.868
and I'm looking at colleges
in Germany for whatever reason,

00:42:25.868 --> 00:42:31.434
I can then on the server side
look at the browser,

00:42:31.434 --> 00:42:33.434
the HTTP accept headers,

00:42:33.434 --> 00:42:36.000
and then determine what
the translation should be

00:42:36.000 --> 00:42:39.734
rather than just think
that everything's in English

00:42:39.734 --> 00:42:41.534
on the site to begin with.

00:42:41.534 --> 00:42:43.934
So an example of this--

00:42:43.934 --> 00:42:46.300
this is actually
just screen shots out of a--

00:42:46.300 --> 00:42:47.901
out of me going to Vast Rank

00:42:47.901 --> 00:42:52.300
and setting my browser headers,
my languages.

00:42:52.300 --> 00:42:55.133
So here you just see
some English text.

00:42:55.133 --> 00:42:58.133
This is for, I believe,
Stanford University.

00:42:58.133 --> 00:43:00.901
And then I changed
the language to German

00:43:00.901 --> 00:43:03.367
as my primary language
in the site.

00:43:03.367 --> 00:43:05.667
And I refreshed the site.

00:43:05.667 --> 00:43:06.868
And then originally
for just a split second,

00:43:06.868 --> 00:43:09.801
you see the English text.

00:43:09.801 --> 00:43:11.567
But it will immediately
translate.

00:43:11.567 --> 00:43:13.133
It's very, very fast
considering how much text

00:43:13.133 --> 00:43:16.467
it translates on a page
and how inefficiently I did this

00:43:16.467 --> 00:43:17.901
to start off with.

00:43:17.901 --> 00:43:20.667
Because I do have batch APIs
that I have not made use of.

00:43:20.667 --> 00:43:22.501
But it's very quick.

00:43:22.501 --> 00:43:26.167
And it's a pretty cool way
to just on the cheap,

00:43:26.167 --> 00:43:29.767
really fast get translation
for your content on your site.

00:43:29.767 --> 00:43:32.968
So again, Vast Rank
has all of this user review data

00:43:32.968 --> 00:43:37.100
that could be useful to people
overseas and so forth.

00:43:37.100 --> 00:43:38.567
So this was just
a really quick way.

00:43:38.567 --> 00:43:39.801
And I can improve on this,
you know?

00:43:39.801 --> 00:43:43.167
I can start using
the batch APIs and so forth

00:43:43.167 --> 00:43:45.033
and being smarter about
what the original language is

00:43:45.033 --> 00:43:46.667
and so forth.

00:43:46.667 --> 00:43:48.300
But just as a first step,

00:43:48.300 --> 00:43:50.901
this took me 40 minutes
to implement on Vast Rank.

00:43:50.901 --> 00:43:52.400
You know, I just had
some controls on the server

00:43:52.400 --> 00:43:55.501
that I tied this logic into,
and it was very, very simple.

00:43:55.501 --> 00:43:57.868
So for 40 minutes,
that's not bad.

00:43:57.868 --> 00:44:01.200
You get translated content
in that amount of time.

00:44:01.200 --> 00:44:05.834
So just the additional APIs
that I used--

00:44:05.834 --> 00:44:09.000
the only other API
that I'm using right now

00:44:09.000 --> 00:44:10.801
is Libraries API from Google.

00:44:10.801 --> 00:44:12.167
And as I said,
when I got invited here

00:44:12.167 --> 00:44:14.467
to talk about Vast Rank,

00:44:14.467 --> 00:44:16.834
I wanted to revamp a little bit
of the JavaScript code,

00:44:16.834 --> 00:44:19.267
just make sure it was tight.

00:44:19.267 --> 00:44:22.601
I started to use jQuery,
which was really, really nice,

00:44:22.601 --> 00:44:24.834
and I just used
the hosted version at Google.

00:44:24.834 --> 00:44:27.767
So you can launch
the Languages API

00:44:27.767 --> 00:44:30.033
and load jQuery
directly from Google,

00:44:30.033 --> 00:44:32.200
and they take care
of the caching

00:44:32.200 --> 00:44:34.834
and the versioning
and so forth.

00:44:34.834 --> 00:44:38.667
So that's basically the APIs
that I've used on Vast Rank

00:44:38.667 --> 00:44:40.701
from Google, and some of
the thoughts that

00:44:40.701 --> 00:44:42.767
you have to think through
and the design thoughts

00:44:42.767 --> 00:44:45.934
that I had to think through
when building this site.

00:44:45.934 --> 00:44:50.167
So that's basically
the session

00:44:50.167 --> 00:44:51.601
that I have for you today.

00:44:51.601 --> 00:44:52.767
If there's any questions--

00:44:52.767 --> 00:44:55.501
feel free to come up
to a microphone and ask

00:44:55.501 --> 00:44:57.367
if anyone has
any questions.

00:44:57.367 --> 00:44:58.934
And I really thank you
for your time

00:44:58.934 --> 00:45:00.033
and coming out.

00:45:00.033 --> 00:45:02.734
I hope you learned
a few things today.

00:45:02.734 --> 00:45:09.868
[applause]

00:45:09.868 --> 00:45:12.634
So...any questions?

00:45:12.634 --> 00:45:13.801
[chuckles]

00:45:18.968 --> 00:45:20.167
Oh, could you come up
to the mic?

00:45:20.167 --> 00:45:21.968
They want me to have you
come up to the mic for--

00:45:21.968 --> 00:45:24.701
so it can get on the video.

00:45:30.267 --> 00:45:32.234
man: How many data points
have you had success

00:45:32.234 --> 00:45:34.501
drawing on the map
at a given point in time?

00:45:34.501 --> 00:45:35.767
Kragh: I'm sorry.

00:45:35.767 --> 00:45:38.267
man: How many points
were you able to draw on the map

00:45:38.267 --> 00:45:39.434
at a given point in time?

00:45:39.434 --> 00:45:40.434
Kragh: That's a good question.

00:45:40.434 --> 00:45:42.300
Right now, I give it a--

00:45:42.300 --> 00:45:44.334
right now on the map,
it's a user option

00:45:44.334 --> 00:45:46.133
on how many they want to see.

00:45:46.133 --> 00:45:48.868
It's something that
I want to get to.

00:45:48.868 --> 00:45:50.100
So if you see here,

00:45:50.100 --> 00:45:51.801
I just have them choose
the max results.

00:45:51.801 --> 00:45:54.868
So I can give them
up to 25 that are in view.

00:45:54.868 --> 00:45:57.067
But what I want to do
is I want to take--

00:45:57.067 --> 00:45:59.367
I want to actually
page through the data.

00:45:59.367 --> 00:46:02.434
I want to have it such
that you'll see a page result

00:46:02.434 --> 00:46:05.634
of what college was--
colleges would be in view

00:46:05.634 --> 00:46:08.067
and show the top ones first,
like in batches of ten

00:46:08.067 --> 00:46:09.400
like a paging-type algorithm.

00:46:09.400 --> 00:46:11.567
Then it would say,
as I get through the--

00:46:11.567 --> 00:46:13.968
so, "Show me the top ranked
schools for academics first

00:46:13.968 --> 00:46:15.367
out of the batch
that's in view."

00:46:15.367 --> 00:46:16.834
And then I want it
to be a paging

00:46:16.834 --> 00:46:19.467
so that you could go,
okay, I'm showing one of

00:46:19.467 --> 00:46:22.968
a thousand colleges in view,
page, page, page, page, page,

00:46:22.968 --> 00:46:24.701
and then the ordering
of those colleges

00:46:24.701 --> 00:46:28.267
would be in order from
top ranked to lowest ranked.

00:46:28.267 --> 00:46:30.033
And then from that point,

00:46:30.033 --> 00:46:31.767
I can do the distance-based
algorithm.

00:46:31.767 --> 00:46:35.067
So I can show from closest
to center point out.

00:46:35.067 --> 00:46:36.334
I actually wanted
to get that done for I/O.

00:46:36.334 --> 00:46:38.367
I just haven't had the time.

00:46:38.367 --> 00:46:40.234
'Cause I thought it would be
kind of a cool--

00:46:40.234 --> 00:46:41.634
it would be kind of
a cool demo to show

00:46:41.634 --> 00:46:43.267
the markers start to grow

00:46:43.267 --> 00:46:46.133
from the center point of
the map out and see it expand.

00:46:46.133 --> 00:46:47.634
So that's kind of
what I'm thinking.

00:46:47.634 --> 00:46:49.701
But right now,
it's a user option.

00:46:49.701 --> 00:46:51.534
And just from
a usability standpoint,

00:46:51.534 --> 00:46:52.968
the more that you can
take off of an application

00:46:52.968 --> 00:46:55.834
for the user to try
to do anything is good.

00:46:55.834 --> 00:47:00.501
So for--that's my plan on
improving this in the future.

00:47:00.501 --> 00:47:02.300
As you can see, though,
25 and so forth,

00:47:02.300 --> 00:47:04.701
it's fast, it's no problem
whatsoever.

00:47:04.701 --> 00:47:07.067
But Pamela showed
in the earlier section

00:47:07.067 --> 00:47:09.133
the clustering,

00:47:09.133 --> 00:47:12.901
which is a really cool option
as well.

00:47:12.901 --> 00:47:15.434
Any other questions at all?

00:47:15.434 --> 00:47:16.968
Nope.

00:47:16.968 --> 00:47:20.634
Back to the mic.
[chuckles]

00:47:24.067 --> 00:47:27.601
man: Have you experimented
with any techniques

00:47:27.601 --> 00:47:29.434
for centering the map

00:47:29.434 --> 00:47:32.367
based on the data
that's being displayed?

00:47:32.367 --> 00:47:33.667
Kragh: Centering the map
based on the data

00:47:33.667 --> 00:47:36.667
that's being displayed.

00:47:36.667 --> 00:47:38.067
Hmm.

00:47:38.067 --> 00:47:40.667
Well, I have not done that
personally, but it would be--

00:47:40.667 --> 00:47:42.200
it would be pretty easy
to figure it out.

00:47:42.200 --> 00:47:44.267
You know, you can just
take the data

00:47:44.267 --> 00:47:45.834
that's being displayed
and figure out

00:47:45.834 --> 00:47:48.400
what the max and min
latitude/longitude points are

00:47:48.400 --> 00:47:50.501
and then calculate
what the distance would be

00:47:50.501 --> 00:47:51.868
to the center point
to the center of the map.

00:47:51.868 --> 00:47:53.334
So if you have, like,
a set--

00:47:53.334 --> 00:47:56.100
if I understand correctly,
you'd have a set of data

00:47:56.100 --> 00:47:58.734
that you would have that--
fixed.

00:47:58.734 --> 00:48:00.434
It wouldn't be, like,
dynamic like this.

00:48:00.434 --> 00:48:02.067
And if you wanted
to calculate a center point,

00:48:02.067 --> 00:48:03.601
you know,
you just figure out

00:48:03.601 --> 00:48:05.234
what the max and min
center points are.

00:48:05.234 --> 00:48:07.767
I haven't thought through it
in detail,

00:48:07.767 --> 00:48:09.534
but you might have
to consider that thing

00:48:09.534 --> 00:48:13.300
that I did with overlapping
the international date line.

00:48:13.300 --> 00:48:15.033
But I would figure
you could take the max and mins,

00:48:15.033 --> 00:48:17.334
figure out what
the center point is from those,

00:48:17.334 --> 00:48:19.434
and then just set map center,

00:48:19.434 --> 00:48:22.901
which is just a call on
the GMap object

00:48:22.901 --> 00:48:25.200
or the map object from
the Google API to set centers.

00:48:25.200 --> 00:48:27.767
And from that,
you should be good to go.

00:48:27.767 --> 00:48:29.100
I would assume.

00:48:29.100 --> 00:48:31.767
I haven't tested it.

00:48:31.767 --> 00:48:34.534
Any other questions?

00:48:38.567 --> 00:48:40.834
Guess that's--

00:48:40.834 --> 00:48:42.434
well, thank you so much
for coming out

00:48:42.434 --> 00:48:43.667
and coming to the session.

00:48:43.667 --> 00:48:44.701
I really enjoyed it.

00:48:44.701 --> 00:48:46.100
Thank you.

00:48:46.100 --> 00:48:48.133
[applause]

