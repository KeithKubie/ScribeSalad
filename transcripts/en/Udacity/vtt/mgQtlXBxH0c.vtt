WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:02.960
So now that we understand how the FAT format works, let's

00:00:02.960 --> 00:00:05.910
consider its strengths and weaknesses. It is easy to create a

00:00:05.910 --> 00:00:09.940
new file, so we just need to adjust the directory table

00:00:09.940 --> 00:00:13.050
of the parent directory and set the busy bit in the

00:00:13.050 --> 00:00:16.190
FAT for the starting block. Growing a file is as easy

00:00:16.190 --> 00:00:19.790
as adjusting the next field of the FAT. Space usage is

00:00:19.790 --> 00:00:22.350
efficient too. If a block is free, then it can be

00:00:22.350 --> 00:00:25.100
used and it doesn't matter whether the adjacent blocks are being

00:00:25.100 --> 00:00:28.290
used or not. This means that the system won't suffer from what

00:00:28.290 --> 00:00:32.670
is called external fragmentation. As for access, it will behave much like

00:00:32.670 --> 00:00:36.300
a linked list. It will be great for sequential access, as we

00:00:36.300 --> 00:00:40.110
quickly find and follow the links. But poor for random access, since

00:00:40.110 --> 00:00:41.970
we have to walk through half the links to get to the

00:00:41.970 --> 00:00:44.000
middle of the file and all of the links to get to

00:00:44.000 --> 00:00:46.840
the end. This isn't as bad as it might seem at first,

00:00:46.840 --> 00:00:50.630
because we keep the FAT in memory. But it's still not ideal.

00:00:50.630 --> 00:00:54.500
Overall then, FAT is a poor choice for situations where random access to large

00:00:54.500 --> 00:00:58.640
files is necessary. Hence, it has fallen out of favor. It's still a good choice

00:00:58.640 --> 00:01:00.770
for removable storage, however, where one is

00:01:00.770 --> 00:01:02.800
mostly just copying data from one machine to

00:01:02.800 --> 00:01:06.410
another, and hence, only using sequential access.

00:01:06.410 --> 00:01:08.880
And its space efficiency makes it especially attractive.

