WEBVTT
Kind: captions
Language: en

00:00:00.247 --> 00:00:02.945
(narrator) With the Google Pay API
for Android,

00:00:02.945 --> 00:00:05.732
you can facilitate
payment transactions for your users,

00:00:05.732 --> 00:00:08.971
making the checkout experience
in your application more convenient.

00:00:09.409 --> 00:00:12.966
Join other businesses like yours
who are using Google Pay today

00:00:12.967 --> 00:00:15.903
to drive user growth,
increase conversions,

00:00:15.904 --> 00:00:19.093
and reduce data exposure
and transaction vulnerabilities.

00:00:20.467 --> 00:00:22.498
Here is how you can integrate Google Pay

00:00:22.499 --> 00:00:25.477
on your Android application
in four simple steps:

00:00:26.133 --> 00:00:27.808
configure your project;

00:00:27.808 --> 00:00:29.954
determine readiness to pay;

00:00:29.954 --> 00:00:32.187
show the Google Pay button;

00:00:32.187 --> 00:00:34.604
create a <i>PaymentDataRequest</i> object.

00:00:35.533 --> 00:00:38.700
First, add the Google Pay library
to the list of <i>dependencies</i>

00:00:38.700 --> 00:00:40.246
in your application module.

00:00:41.030 --> 00:00:44.685
Make sure to review our documentation
to check the latest version available.

00:00:45.409 --> 00:00:49.427
You also need to enable
the Google Pay API in your <i>manifest</i>.

00:00:49.878 --> 00:00:52.255
You can do that by adding
the following tag

00:00:52.255 --> 00:00:54.382
inside of your application node.

00:00:55.375 --> 00:00:56.883
As soon as you are ready,

00:00:56.883 --> 00:01:00.578
open the activity where you plan
to show the Google Pay button

00:01:00.578 --> 00:01:03.520
and obtain a new instance
of the <i>paymentsClient</i>

00:01:03.521 --> 00:01:05.995
inside of your <i>onCreate</i> method.

00:01:05.995 --> 00:01:10.942
Note that the <i>getPaymentsClient</i> method
takes a <i>walletOptions</i> parameter.

00:01:11.346 --> 00:01:14.999
Use the definitions in this class
to specify the environment

00:01:15.000 --> 00:01:16.852
in which you want to operate,

00:01:16.855 --> 00:01:18.740
<i>TEST</i> or <i>PRODUCTION</i>.

00:01:19.914 --> 00:01:23.721
For the <i>TEST</i> environment,
you don't need to register with Google.

00:01:24.239 --> 00:01:28.231
You can play with the API yourself
and integrate into your application.

00:01:29.268 --> 00:01:32.347
In this case, you can use
real payment information.

00:01:33.068 --> 00:01:38.225
However, whenever a selection is made,
we return you a non-chargeable token.

00:01:39.027 --> 00:01:44.059
Remember, your real card details
are never used when in <i>Environment</i> test,

00:01:44.446 --> 00:01:48.073
but you must add at least one
chargeable card to your Google account

00:01:48.073 --> 00:01:49.742
before you proceed.

00:01:50.202 --> 00:01:54.294
Once you complete the integration
and you are ready to handle real payments,

00:01:54.294 --> 00:01:57.328
come and register with us
through our self-service portal

00:01:57.329 --> 00:01:59.710
and then flip the environment
to <i>PRODUCTION</i>.

00:02:00.915 --> 00:02:03.064
You can apply for production access

00:02:03.065 --> 00:02:08.337
on <i>g.co/pay/sign-up</i>

00:02:09.146 --> 00:02:11.868
Now that you have
your <i>paymentsClient</i> constructed,

00:02:11.868 --> 00:02:15.914
the first API you need to call
is <i>IsReadyToPay</i>.

00:02:16.533 --> 00:02:18.327
With <i>IsReadyToPay</i>

00:02:18.328 --> 00:02:22.825
you can determine whether the user
has a valid payment method on file

00:02:22.826 --> 00:02:26.801
and is capable of completing
a transaction on a supported device.

00:02:27.524 --> 00:02:31.000
This request takes parameters
that specify the API version

00:02:31.000 --> 00:02:32.469
targeted in your call,

00:02:33.094 --> 00:02:36.158
as well as the payment methods
allowed for this transaction.

00:02:37.104 --> 00:02:40.247
At Google, we focus
on optimizing for conversions,

00:02:40.561 --> 00:02:43.497
so if <i>IsReadyToPay</i> returns false,

00:02:44.009 --> 00:02:45.228
we highly recommend

00:02:45.228 --> 00:02:47.588
that you do not show
the Google Pay button.

00:02:48.682 --> 00:02:52.332
Now that you know that the user is ready
to make a payment using Google Pay,

00:02:52.744 --> 00:02:55.005
you can make the button
visible to the user.

00:02:56.129 --> 00:03:00.153
We recommend that you use the graphic
shared in the developer documentation

00:03:00.509 --> 00:03:03.520
to ensure the Google Pay branding
is used correctly

00:03:03.520 --> 00:03:05.392
per our latest guidelines.

00:03:06.362 --> 00:03:07.409
In this bundle,

00:03:07.410 --> 00:03:09.841
you will find drawable
and layout resources

00:03:09.841 --> 00:03:12.793
that adapt to different screen sizes
and resolutions,

00:03:12.794 --> 00:03:15.326
as well as translations
into multiple languages

00:03:15.327 --> 00:03:16.830
for the text in the button.

00:03:17.573 --> 00:03:19.248
Once the user taps on the button,

00:03:19.554 --> 00:03:22.560
you call the <i>loadPaymentData(request)</i>

00:03:22.560 --> 00:03:24.497
to open up the payment sheet.

00:03:25.504 --> 00:03:28.393
You can construct 
the <i>PaymentDataRequest</i> object

00:03:28.394 --> 00:03:33.010
which is a set of payments configurations
used for this particular transaction.

00:03:33.881 --> 00:03:36.028
You can request additional information,

00:03:36.028 --> 00:03:38.880
like a shipping address and email address,

00:03:38.880 --> 00:03:40.984
in addition to the payment credentials.

00:03:41.936 --> 00:03:45.483
We recommend that you collect 
as little information as necessary

00:03:45.484 --> 00:03:48.395
to prevent users 
from typing additional information

00:03:48.396 --> 00:03:50.554
which might not be stored 
in their accounts.

00:03:51.509 --> 00:03:53.747
One more point to call out in this object

00:03:53.748 --> 00:03:57.141
is the <i>PaymentRequest</i>
tokenization parameters.

00:03:57.745 --> 00:04:01.006
Google encrypts information 
about a user's selected card

00:04:01.007 --> 00:04:03.967
for secure processing
by a merchant's gateway

00:04:03.968 --> 00:04:07.077
or directly on
a merchant's secured servers.

00:04:07.705 --> 00:04:11.427
Be sure to check
your processor's integration guidelines

00:04:11.428 --> 00:04:14.122
to find out what they need
to finalize the payment.

00:04:15.434 --> 00:04:17.680
Now that you've constructed
the <i>request</i> object,

00:04:17.680 --> 00:04:19.995
you can pass it to <i>loadPaymentData</i>--

00:04:20.411 --> 00:04:23.244
an asynchronous task 
which opens the payments sheet.

00:04:24.312 --> 00:04:26.161
Once the user makes a selection,

00:04:26.162 --> 00:04:29.583
we return to you a <i>PaymentData</i> object 
as an activity result,

00:04:30.165 --> 00:04:33.204
which consists of metadata
about the user's selection.

00:04:34.465 --> 00:04:36.755
It also includes the payment token

00:04:36.756 --> 00:04:39.025
which you can use 
to complete the transaction.

00:04:40.131 --> 00:04:43.655
Now you can send the final
production-ready application to Google

00:04:43.655 --> 00:04:45.113
for a final test.

00:04:46.086 --> 00:04:48.505
Google tests the app with real cards

00:04:48.506 --> 00:04:50.717
and informs you if everything is correct.

00:04:51.155 --> 00:04:53.242
The app is then cleared to launch.

00:04:54.754 --> 00:04:58.672
You can find additional information
in our developer documentation

00:04:58.673 --> 00:05:02.700
on <i>g.co/pay/api</i>

00:05:03.239 --> 00:05:06.759
Don't miss any future videos
about Google Pay and Android,

00:05:06.759 --> 00:05:09.329
and subscribe 
to the Android Developers channel.

00:05:10.031 --> 00:05:11.817
If you are watching on a mobile,

00:05:11.817 --> 00:05:15.171
tap the little bell 
to receive new upload notifications.

00:05:15.752 --> 00:05:16.982
See you soon!

