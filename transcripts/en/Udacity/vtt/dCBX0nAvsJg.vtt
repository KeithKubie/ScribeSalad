WEBVTT
Kind: captions
Language: en

00:00:00.310 --> 00:00:06.360
Now we'll look at some example code that
can fit a line to data that's given.

00:00:07.590 --> 00:00:12.190
Remember, we're using
a optimizer to do this.

00:00:12.190 --> 00:00:14.940
And first thing we have
to do is describe for

00:00:14.940 --> 00:00:19.410
the optimizer what is the function
it's trying to minimize.

00:00:19.410 --> 00:00:26.490
So we'll call this function error, and
it takes two parameters, line and data.

00:00:27.960 --> 00:00:33.220
Line is just two coefficients,
C0 and C1.

00:00:33.220 --> 00:00:36.709
And data is just a list of data,
of course.

00:00:37.820 --> 00:00:41.600
Well, we've got some nice comments
here that explain it, but

00:00:41.600 --> 00:00:47.260
really, our error is expressed
simply in this single equation.

00:00:47.260 --> 00:00:52.830
We have the value of the actual
data at each point here,

00:00:52.830 --> 00:00:56.880
minus the estimate that the line
we're currently looking at

00:00:56.880 --> 00:00:59.020
would give at that same point.

00:00:59.020 --> 00:01:02.360
So we use the 0 coefficient, and

00:01:02.360 --> 00:01:07.960
the 1 coefficient, times the x
value of the data at that point.

00:01:07.960 --> 00:01:13.580
So we take those differences and square
it, and that's our error function.

00:01:13.580 --> 00:01:15.750
And that's what we're
trying to minimize.

00:01:15.750 --> 00:01:18.490
We've added some code to illustrate

00:01:18.490 --> 00:01:22.330
how to use the minimizer to
find the equation of a line.

00:01:22.330 --> 00:01:28.840
We start with our original line
that the minimizer doesn't know.

00:01:28.840 --> 00:01:30.910
So, it's our secret, [LAUGH] but

00:01:30.910 --> 00:01:36.400
we're testing it to see if the minimizer
can discover the equation of this line.

00:01:36.400 --> 00:01:38.860
Here's the equation for our line.

00:01:38.860 --> 00:01:42.410
It's just a two element array.

00:01:42.410 --> 00:01:46.620
It'll have a slope of four so
coefficient zero is four.

00:01:46.620 --> 00:01:48.470
And Y intercept of two.

00:01:48.470 --> 00:01:50.880
So coefficient one of two.

00:01:50.880 --> 00:01:54.160
Here we generate X and Y values.

00:01:54.160 --> 00:01:58.300
Again keep in mind our minimizer doesn't
know these but we are just generating

00:01:58.300 --> 00:02:02.430
them so we can look at them and we are
plotting them for looking at it later.

00:02:02.430 --> 00:02:05.180
We take that original line and

00:02:05.180 --> 00:02:11.330
we use from numpie the random
function to add some noise to it.

00:02:11.330 --> 00:02:20.220
So at each point along the X-axis,
where we have data, we add some noise.

00:02:20.220 --> 00:02:24.240
So, now we've got our original line,
plus some noise, and

00:02:24.240 --> 00:02:29.030
we're going to challenge our
minimizer to find the equation for

00:02:29.030 --> 00:02:32.510
that original line,
even though there's noise.

00:02:32.510 --> 00:02:36.920
We wrote a separate function
fit_line that takes the data and

00:02:36.920 --> 00:02:42.000
the error function we defined and
finds the equation for that line.

00:02:42.000 --> 00:02:44.490
Here's fit_line it does that for us.

00:02:44.490 --> 00:02:50.690
Two parameters the data, remember this
is noisy data that is approximately

00:02:50.690 --> 00:02:54.310
a line and in other words we took our
original line and added noise to it.

00:02:54.310 --> 00:02:58.300
And the error function, or
the function we're trying to minimize.

00:02:58.300 --> 00:03:02.860
We have some nice comments here
that tell us what those are, but

00:03:02.860 --> 00:03:05.820
now we just follow the steps
like we've talked about before.

00:03:05.820 --> 00:03:07.910
We start with an initial guess.

00:03:07.910 --> 00:03:11.760
Here our initial guess
is a slope of zero, and

00:03:11.760 --> 00:03:16.330
a mean of the rest of
the data as our y intercept.

00:03:16.330 --> 00:03:19.960
It could be anything really,
but that is a reasonable guess.

00:03:19.960 --> 00:03:22.380
We plot the initial guess so
we have something to look at, and

00:03:22.380 --> 00:03:23.950
I'll show you that later.

00:03:23.950 --> 00:03:26.320
But here really is
the meat of the function.

00:03:28.120 --> 00:03:29.890
You've seen it before.

00:03:29.890 --> 00:03:34.360
So we call our minimize
function with the error_func.

00:03:34.360 --> 00:03:37.380
In other words, this is the function
we're trying to minimize.

00:03:37.380 --> 00:03:42.670
Our initial guess, and this is
a parameter you haven't seen before,

00:03:42.670 --> 00:03:50.420
but this is a way by which we can
pass the data to our error function.

00:03:50.420 --> 00:03:53.050
This is the method that
we're going to use.

00:03:53.050 --> 00:03:55.819
And finally although it
goes off the end here.

00:03:56.875 --> 00:03:58.900
We'll set display to true,

00:03:58.900 --> 00:04:02.390
which will mean we'll get to see
any information as it goes along.

00:04:03.890 --> 00:04:04.700
So that's it.

00:04:04.700 --> 00:04:10.210
I mean really the key here for this is,

00:04:10.210 --> 00:04:13.740
this minimize call right here and
then it returns the result.

00:04:15.180 --> 00:04:16.880
So let's run it and see what we get.

00:04:18.040 --> 00:04:23.700
There was some additional code that I
skipped over that generated this plot.

00:04:23.700 --> 00:04:26.500
You can look at that on your own,
of course.

00:04:26.500 --> 00:04:27.450
Okay, let's take a look.

00:04:28.770 --> 00:04:30.990
Our original line is this blue line.

00:04:32.100 --> 00:04:35.950
Of course the minimizer doesn't
know anything about that.

00:04:35.950 --> 00:04:38.900
These green dots are our noisy data

00:04:38.900 --> 00:04:43.900
where we just added noise
values to the blue line.

00:04:43.900 --> 00:04:46.720
Now we're asking our optimizer,

00:04:46.720 --> 00:04:51.290
okay find the equation of a line
that best fits this data.

00:04:52.980 --> 00:04:57.680
The metric you're trying
to minimize is error.

00:04:57.680 --> 00:05:04.350
So we passed it in an initial guess
here of this purple line and this data.

00:05:04.350 --> 00:05:07.260
So that's all it knows right now
is this initial guess of a purple

00:05:07.260 --> 00:05:08.990
line and this data.

00:05:08.990 --> 00:05:13.400
And then it iterates and tries different
slopes and different y intercepts.

00:05:13.400 --> 00:05:18.340
Until finally, it converges to this
red line and that's the solution.

00:05:18.340 --> 00:05:20.150
And I think it looks pretty decent.

00:05:21.270 --> 00:05:27.100
We can check it here, so
if you look in the code, you'll see that

00:05:27.100 --> 00:05:33.250
our real line had a slope of four and
a y intercept of 0.5.

00:05:33.250 --> 00:05:40.130
So we've got 4.17 and 0.64, not exactly.

00:05:40.130 --> 00:05:42.670
But if you look at
the data you can see that

00:05:42.670 --> 00:05:47.790
it's pretty hard to know exactly what
the underlying line would look like.

00:05:47.790 --> 00:05:50.560
So, I think our equation
solver did a pretty good job.

