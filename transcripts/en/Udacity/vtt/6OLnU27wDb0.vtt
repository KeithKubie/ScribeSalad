WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:02.760
This is the motivation for a memory

00:00:02.760 --> 00:00:06.870
consistency model, which is called release consistency. I'm

00:00:06.870 --> 00:00:12.020
sure just from the keyword release some of you may have already formed a mental

00:00:12.020 --> 00:00:15.810
model of what I'm going to say. Basically,

00:00:15.810 --> 00:00:18.140
we're going to look at the structure of the

00:00:18.140 --> 00:00:21.990
program As follows that the Peddler program

00:00:21.990 --> 00:00:25.580
consists of several different Peddler threads P1 is

00:00:25.580 --> 00:00:29.230
one such, and if it wants to mess with

00:00:29.230 --> 00:00:32.070
some shared data structures, it is going to acquire

00:00:32.070 --> 00:00:34.060
a lock, we'll call it A1, and in the

00:00:34.060 --> 00:00:37.220
mind of the programmer there is an association between this

00:00:37.220 --> 00:00:39.930
lock and the data structures governed by it. So,

00:00:39.930 --> 00:00:42.530
so long as they hold the lock, they can

00:00:42.530 --> 00:00:46.790
modify the data structure and r1 is the release

00:00:46.790 --> 00:00:50.800
of this lock. So every critical section you can think

00:00:50.800 --> 00:00:56.030
of as composed of and acquire followed by data accesses governed

00:00:56.030 --> 00:01:00.900
by the lock and then release. If the same lock is used

00:01:00.900 --> 00:01:06.060
by some other process at P2, and if the critical section

00:01:06.060 --> 00:01:10.900
of P1 preceded the critical section of P2 or in other

00:01:10.900 --> 00:01:16.250
words, P1's release operation P1, r1. The release

00:01:16.250 --> 00:01:21.910
operation and P1 happened before, this most be familiar to you from our

00:01:21.910 --> 00:01:30.630
discussion of Lampert's logical clock. P1 R1 happens before P2 R2, that

00:01:30.630 --> 00:01:35.980
is the acquire operation that is being done by P2 if this acquire operation

00:01:35.980 --> 00:01:41.160
for the same lock happened after the release by P1 R1.

00:01:42.180 --> 00:01:47.120
All we have to ensure is that all the coherence

00:01:47.120 --> 00:01:52.560
actions prior to this release of the lock by P1

00:01:52.560 --> 00:01:57.160
has to be complete before we allow P2 to

00:01:57.160 --> 00:02:02.430
acquire this lock before we allow P2 to acquire the same lock

00:02:02.430 --> 00:02:07.390
L. That's the idea of release consistency. So we take the synchronization

00:02:07.390 --> 00:02:11.850
operations that are provided by the system

00:02:11.850 --> 00:02:14.780
whether it is hardware or software And

00:02:14.780 --> 00:02:20.460
we label them as either an acquired operation or a release operation. So, it's

00:02:20.460 --> 00:02:22.200
very straight forward when you think about

00:02:22.200 --> 00:02:26.220
mutual explosion law, acquiring the log primitive

00:02:26.220 --> 00:02:33.180
is an acquire operation. And the un log primitive is a release operation. So if

00:02:33.180 --> 00:02:35.610
there is a lock primitive and there is

00:02:35.610 --> 00:02:38.790
a PCD unlock primitive, so we have to ensure

00:02:38.790 --> 00:02:42.420
that all the coherence actions happen before I

00:02:42.420 --> 00:02:45.190
do the unlock so that when this guy gets

00:02:45.190 --> 00:02:50.520
the lock and accesses the data, the data that he is going to see are going to

00:02:50.520 --> 00:02:54.020
be data that is consistent with whatever modifications may

00:02:54.020 --> 00:02:58.510
have been made over here. That's the idea behind

00:02:58.510 --> 00:03:02.430
the least consistent memory operation. Other synchronization operations

00:03:02.430 --> 00:03:04.630
can also be mapped to acquiring release. If

00:03:04.630 --> 00:03:07.400
you think about barrier, arriving at a barrier

00:03:07.400 --> 00:03:10.490
is equivalent to an acquire, and leaving the

00:03:10.490 --> 00:03:14.360
barrier is equivalent to a release. So, before

00:03:14.360 --> 00:03:16.910
leaving the barrier, we have to make sure

00:03:16.910 --> 00:03:20.510
that any changes that we made to shared

00:03:20.510 --> 00:03:24.310
data structures is reflected through all the other processes

00:03:24.310 --> 00:03:27.170
through the cache coherence mechanism. Then we can leave

00:03:27.170 --> 00:03:30.690
the barrier. So, leaving the barrier is a release

00:03:30.690 --> 00:03:34.020
operation, in the case of barrier synchronization. So, what

00:03:34.020 --> 00:03:36.850
that means is that, if I do a shared

00:03:36.850 --> 00:03:39.940
memory access within this group of sections, and that

00:03:39.940 --> 00:03:43.930
shared memory access would normally result in some coherence

00:03:43.930 --> 00:03:47.130
actions on the interconnect reaching to the other processes

00:03:47.130 --> 00:03:50.080
and so on, and if we use the SC

00:03:50.080 --> 00:03:53.110
memory model, you will block processes if you

00:03:53.110 --> 00:03:57.140
want until That particular memory access is complete

00:03:57.140 --> 00:03:58.900
with respect to all the processors and the

00:03:58.900 --> 00:04:02.040
shared memory machine. But if we use the least

00:04:02.040 --> 00:04:04.530
consistent memory model, we do not have to

00:04:04.530 --> 00:04:07.860
block P1 in order for coherence actions to be

00:04:07.860 --> 00:04:11.660
complete to let the processor continue on with

00:04:11.660 --> 00:04:15.760
its computation. We only have to block a processor

00:04:15.760 --> 00:04:18.260
at a release point to make sure that

00:04:18.260 --> 00:04:20.940
any coherent actions that may have been initiated

00:04:20.940 --> 00:04:24.210
up until this point, are all complete before

00:04:24.210 --> 00:04:27.230
we perform this release operation. That's the key

00:04:27.230 --> 00:04:31.820
point that I want you to get out of this release consistent memory model. So the

00:04:31.820 --> 00:04:36.570
least consistent memory model allows exploitation of computation

00:04:36.570 --> 00:04:40.980
on P1, with communication that may be happening through

00:04:40.980 --> 00:04:46.200
the coherence mechanism for completing the coherence actions corresponding to

00:04:46.200 --> 00:04:49.310
the memory accesses that you're making inside the critical section.

