WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:03.959
&gt;&gt; Sean: We've done a series of hardware videos
with Dr Bagley about various different

00:00:03.959 --> 00:00:08.280
parts of CPUs, and things like this. And
one of the things he'd mentioned during

00:00:08.280 --> 00:00:12.780
one of the videos is something that I
believe you want to tell us a bit more

00:00:12.780 --> 00:00:18.180
about --  the Wheeler Jump ?
&gt;&gt; DFB: Yes the Wheeler Jump 
David Wheeler [a]

00:00:18.180 --> 00:00:24.150
very very talented computer scientist. An
excellent lateral thinker. I didn't know

00:00:24.150 --> 00:00:29.400
him very well; I knew him very slightly.
Maybe met him four or five times but you

00:00:29.400 --> 00:00:36.120
just had to be impressed that he, as a
computer pioneer, had to grapple with the

00:00:36.120 --> 00:00:43.879
fact that very early computers did not
have enough registers in their CPUs.

00:00:43.879 --> 00:00:48.120
&gt;&gt; Sean: Registers are just like tiny bits of memory?
&gt;&gt; DFB: Yeah! tiny bits of memory, but within the

00:00:48.120 --> 00:00:52.890
central processor unit. They could be
built of much faster technology than

00:00:52.890 --> 00:00:57.120
main memory, so typically, you know, like
with the ARM chip at user level, you'd

00:00:57.120 --> 00:01:01.590
end up with 16 general-purpose registers.
One or two of those might be set aside

00:01:01.590 --> 00:01:07.650
to use for all sorts of useful things.
And one of the useful things was the

00:01:07.650 --> 00:01:12.540
idea of -- you're running through your program --
you want to jump into a subroutine to

00:01:12.540 --> 00:01:16.799
calculate a sine, or to print out "Hello
World", or something like that. You don't

00:01:16.799 --> 00:01:21.330
want it to be running linearly on your
program you want to jump into it and

00:01:21.330 --> 00:01:25.380
jump back out of it again.  So you could
use it several times in your program

00:01:25.380 --> 00:01:30.030
from several different places. You could
jump in and jump back out. Now David

00:01:30.030 --> 00:01:34.799
Wheeler is credited with this idea of
inventing the subroutine and say[ing]  "Well,

00:01:34.799 --> 00:01:39.540
yeah, when people want to calculate sine
of something they don't want to have to

00:01:39.540 --> 00:01:44.759
replicate, in their program, the coding
for sine in six different places". It might

00:01:44.759 --> 00:01:49.229
make it go faster - and of course some of
you will know that if you write macros

00:01:49.229 --> 00:01:55.110
you can force it [to create in-line code] to do
that. [You] sacrifice a lot more code for faster speed 
But no, to

00:01:55.110 --> 00:02:00.079
keep it clean you basically say "I want
this piece of code to be separate but

00:02:00.079 --> 00:02:07.409
"jumpable into" and "jump back outable
from", back to where you came from.

00:02:07.409 --> 00:02:11.489
So, before you jump in, at the moment of the
jump, you've got to say "Where am i coming

00:02:11.489 --> 00:02:14.230
from? Whose responsibility is it to remember

00:02:14.230 --> 00:02:20.230
that? And in modern CPUs you would have a
link register of some sort that

00:02:20.230 --> 00:02:25.030
remembers. You  didn't have that in the very
early days. But, boy, did it [soon] dawn on them

00:02:25.030 --> 00:02:31.840
that you needed it! So if you didn't have
a link register how on earth were you

00:02:31.840 --> 00:02:36.459
going to get into, and out of, your
subroutine? So let's say you're coming

00:02:36.459 --> 00:02:42.489
from 70 shall we say - location 70 -
something like that? Right, now, on this

00:02:42.489 --> 00:02:46.750
particular occasion therefore - when you
get back out of that subroutine - you

00:02:46.750 --> 00:02:50.590
don't want to go back to 70 itself
because you'd end up in an endless loop

00:02:50.590 --> 00:02:55.090
of jumping back into yourself you want
to go to the instruction just beyond 70.

00:02:55.090 --> 00:02:59.500
But you want to get back out! You want to
remember 70 [and] add -- depending on the

00:02:59.500 --> 00:03:04.389
architecture -- you add 1, 2, 4 ...  depending.
whetherWhen it's a byte machine, a word machine,

00:03:04.389 --> 00:03:08.829
whatever. But you add a small number on
to that address and say: "That's where I

00:03:08.829 --> 00:03:14.260
want to get back to -- the instruction
after where I jumped from". 
&gt;&gt; Sean: And the

00:03:14.260 --> 00:03:19.419
problem is that you've got nowhere tosave [it]?  
&gt;&gt; DFB: Well, on modern machines [address] 70 would be

00:03:19.419 --> 00:03:23.260
saved in a link register, maybe [on the ARM chip] 
register number 14, or something.

00:03:23.260 --> 00:03:26.230
You say: "Jump to subroutine". The moment
you say it, it automatically

00:03:26.230 --> 00:03:31.090
remembers where you're jumping from and
puts it in the link register. So when you

00:03:31.090 --> 00:03:35.980
want to come back out you say: "ere I am,
on this architecture, where's my link

00:03:35.980 --> 00:03:42.010
register? Number 14?. Let's look at its
content. Oh! it says "70" and I'm on a

00:03:42.010 --> 00:03:49.299
32-bit machine with 4 bytes to the word
so that's ... I want to jump 4 beyond 70".

00:03:49.299 --> 00:03:54.909
Or if it's, y' know, like EDSAC it might
be 1 or 2 beyond. But you want to

00:03:54.909 --> 00:03:59.319
just jump back to where you came from,
slightly adjusted, with a little amount

00:03:59.319 --> 00:04:05.440
added. And it is that link register that
saves you from going insane. Now back in

00:04:05.440 --> 00:04:10.620
the early days of David Wheeler and this
EDSAC machine he had to do this for ... 

00:04:10.620 --> 00:04:15.099
Oh golly! I wish I had an extra register but
I haven't

00:04:15.099 --> 00:04:20.250
Wat register have I got, that's in use all
the time, that might - if I'm very careful -

00:04:20.250 --> 00:04:24.570
serve me all right. And the answer is - the
Arithmetic Accumulator.

00:04:24.570 --> 00:04:30.510
Every time you loaded a number into the
accumulator, or did some arithmetic, the

00:04:30.510 --> 00:04:35.840
answer stays in the accumulator. OK, so
here's the deal: we're going to use the

00:04:35.840 --> 00:04:44.700
arithmetic accumulator as the means of
remembering where we came from. So here

00:04:44.700 --> 00:04:51.540
you are at location 70, in the early
EDSAC machine, what do you have to do ...

00:04:51.540 --> 00:04:56.640
&gt;&gt; Sean: So, you have to add 70 to 0, or something?
&gt;&gt; DFB: Yes! Basically "yes"! You're jumping

00:04:56.640 --> 00:05:01.560
from 70 -- OK 70 has got to be in the
accumulator at the moment of jump -- and

00:05:01.560 --> 00:05:05.670
then you do an unconditional branch
instruction to get to the start of the

00:05:05.670 --> 00:05:09.960
subroutine. Fine!
But you wake up in that subroutine your

00:05:09.960 --> 00:05:15.590
first job is to preserve your link to
get back! You must NOT do any arithmetic

00:05:15.590 --> 00:05:22.040
- because you [might] feel like it.  Duty calls!
You must save off your return link

00:05:22.040 --> 00:05:30.480
somewhere safe! Right?! Because, if you
don't, you won't be able to get back. 

00:05:30.480 --> 00:05:34.430
But you have no spare ...
&gt;&gt; Sean: So we've got nowhere to save ....
&gt;&gt; DFB: ... no spare registers to save it

00:05:34.430 --> 00:05:39.720
Yeah! you might think so, but how about
this: suppose at the bottom of your

00:05:39.720 --> 00:05:45.930
subroutine there is a branch instruction,
a dummy one, which is basically going to

00:05:45.930 --> 00:05:50.130
say branch, or jump, back to where I came
from. But "where I came from"

00:05:50.130 --> 00:05:57.810
must be a literal correct address. And in
the accumulator is 70. So what you that

00:05:57.810 --> 00:06:05.270
have to do is - knowing the length of your
subroutine and its addresses and knowing

00:06:05.270 --> 00:06:10.830
where the return instruction is planted
as a dummy - you've basically got to turn

00:06:10.830 --> 00:06:15.780
70 into 72, 74, whatever it is, to make it
go back to the next instruction after

00:06:15.780 --> 00:06:21.360
where you came from. And you must
literally plant that instruction and -

00:06:21.360 --> 00:06:28.260
shock! horror! -  overwrite your own program
code at the bottom of this subroutine, so

00:06:28.260 --> 00:06:33.570
that the dummy jump, which has probably
got zeros left in it by now, becomes jump

00:06:33.570 --> 00:06:38.570
back to location 72, shall we say. But you are actually

00:06:38.570 --> 00:06:44.100
altering memory. Now can you imagine if
that goes wrong,  how to debug a program

00:06:44.100 --> 00:06:48.270
that's trampling all over itself and
jumping back to the wrong address! you

00:06:48.270 --> 00:06:52.800
know 
&gt;&gt; Sean: Code gets altered all the time,
right?! Can you give us some sense of how

00:06:52.800 --> 00:06:57.750
sacrosanct these lines of code are when
it's running? 
&gt;&gt; DFB: Well, code may seem to alter

00:06:57.750 --> 00:07:01.440
itself all the time but it's usually
altering itself by manipulating

00:07:01.440 --> 00:07:07.320
registers in the CPU not physically
overwriting memory in your main memory store.

00:07:07.320 --> 00:07:11.400
&gt;&gt; Sean: So it's OK to obviously change
the value for variables, and and all of

00:07:11.400 --> 00:07:15.810
that, but actually changing those lines
of code should be ....
&gt;&gt; DFB: Changing variables is

00:07:15.810 --> 00:07:19.440
fine. That's data. You're allowed to
change data. What you're not allowed to

00:07:19.440 --> 00:07:24.210
do is to treat a program-instruction bit
pattern as if it was just a piece of

00:07:24.210 --> 00:07:30.270
data and to patch something on top of it
Now you can do this on Z80 chips, 

00:07:30.270 --> 00:07:33.930
I've tried doing it! If you go to very
simple chips there's no protection

00:07:33.930 --> 00:07:38.810
mechanisms. They'll let you do anything
you want and you just hang yourself! Fine.

00:07:38.810 --> 00:07:44.669
More advanced chips, now, and particularly
operating systems make use of this,  give

00:07:44.669 --> 00:07:49.139
you an ability to mark which pieces of
memory are read-only and are not to be

00:07:49.139 --> 00:07:52.770
overwritten. And that way you can stay
fairly sane.

00:07:52.770 --> 00:07:58.169
Although you've left behind a polluted
piece of code saying "jump back to 72" the

00:07:58.169 --> 00:08:02.610
next time you come into this routine -
maybe having jumped from 256, shall we

00:08:02.610 --> 00:08:07.949
say, you've now got to remember 256six in 
the accumulator. The moment you

00:08:07.949 --> 00:08:11.580
get in there you adjust it ever so
slightly to come back to 258,

00:08:11.580 --> 00:08:16.889
or whatever it is, and you plant that
instruction to overwrite the jump back

00:08:16.889 --> 00:08:22.770
to 72 which is still there, literally
inside your code. So, every single call

00:08:22.770 --> 00:08:26.789
you  make into that subroutine the
link back has to overwrite whatever

00:08:26.789 --> 00:08:33.270
usage you had before and plant it in
exactly the right place to get back. You

00:08:33.270 --> 00:08:39.330
can see now why the moment EDSAC II
came along - all  of a sudden this had link

00:08:39.330 --> 00:08:44.940
registers. All of this early experience
just showed the pioneers

00:08:44.940 --> 00:08:50.730
what the next generation of machinery
had to have. And that's how the

00:08:50.730 --> 00:08:55.470
importance of link registers became
obvious. It will have occured to you of

00:08:55.470 --> 00:08:59.940
course, Sean, I think I've got this right,
that doing it the day David Wheeler way

00:08:59.940 --> 00:09:06.120
with a Wheeler Junp, right, you
successively at the end of your routine

00:09:06.120 --> 00:09:09.590
of writing back and patching it with
your address you need to get back to,

00:09:09.590 --> 00:09:17.760
That's fine and it'll work. But what does
that NOT enable you to do? Begins with an "R". omen

00:09:17.760 --> 00:09:24.080
&gt;&gt; Sean: A further ... recursion oh yeah!
&gt;&gt; DFB: One of thereasons for wanting a more general

00:09:24.080 --> 00:09:28.140
mechanism for doing it is [that] you can't do
recursion with the Wheeler method

00:09:28.140 --> 00:09:32.210
because you've only got one place in
memory, at the end of the subroutine,

00:09:32.210 --> 00:09:37.170
where you patch back a new return
address. What you need with recursion is

00:09:37.170 --> 00:09:40.860
to have *several* return addresses all
waiting to be used

00:09:40.860 --> 00:09:45.660
queued up ... no not queued up ... stacked up on
tha stack. So, that's the other thing.

00:09:45.660 --> 00:09:49.110
&gt;&gt; Sean: Recursion is obviously a very particular
special case but does this Wheeler Jump

00:09:49.110 --> 00:09:54.000
not even allow you to do branches in
branches?
&gt;&gt; DFB: Oh! you can do that. Yes, yes, you

00:09:54.000 --> 00:10:01.260
can do that but but actually having, y'know 
a thing call itself, since you've 

00:10:01.260 --> 00:10:07.650
textually only got one copy of the
routine, just one, you're not able to

00:10:07.650 --> 00:10:12.270
replicate the text in any way, there's no
ability to do that. You can only damage

00:10:12.270 --> 00:10:18.390
that one return address, just the one.
That means that the next realization from

00:10:18.390 --> 00:10:23.160
being a pioneer is my golly we've gotta
be able to do recursion. My golly we need

00:10:23.160 --> 00:10:28.380
more general-purpose registers and
all this kind of stuff. And oh! also,

00:10:28.380 --> 00:10:32.370
wouldn't it be nice to put a marker on
memory saying: "Don't let anybody over-write

00:10:32.370 --> 00:10:39.350
this!" And actually have it hardware-
imposed not just by people's good nature.

