WEBVTT
Kind: captions
Language: en

00:00:00.364 --> 00:00:01.780
HOI LAM: Android
Wear is great for

00:00:01.780 --> 00:00:03.840
quick, glanceable
information that

00:00:03.840 --> 00:00:07.360
lets you stay in the present
whilst being connected,

00:00:07.360 --> 00:00:09.430
so naturally one of
the most requested

00:00:09.430 --> 00:00:13.680
functions is to display
locations on the map.

00:00:13.680 --> 00:00:17.710
I'm Hoi Lam, and with the latest
Google Play services update,

00:00:17.710 --> 00:00:21.220
Google Maps API has
arrived on Android Wear.

00:00:21.220 --> 00:00:24.650
This means best in class
mapping functionality is

00:00:24.650 --> 00:00:27.430
only a few lines of code away.

00:00:27.430 --> 00:00:30.420
In this Tech Byte, I'll run
you through some common use

00:00:30.420 --> 00:00:33.770
cases for the Maps
API on Android Wear,

00:00:33.770 --> 00:00:37.570
giving you a head start
on how to implement them.

00:00:37.570 --> 00:00:40.190
Before we begin, some good news.

00:00:40.190 --> 00:00:41.920
The Google Maps
API on Android Wear

00:00:41.920 --> 00:00:46.740
is based on the same APIs on
Android phones and tablets.

00:00:46.740 --> 00:00:49.850
As a result, if you have used
the Google Maps API on Android

00:00:49.850 --> 00:00:53.290
before, you'll
feel right at home.

00:00:53.290 --> 00:00:57.800
One of the most common use cases
is simply displaying a map.

00:00:57.800 --> 00:01:01.260
Your app might need to show
a marker to denote a landmark

00:01:01.260 --> 00:01:03.420
or display a running route.

00:01:03.420 --> 00:01:07.100
In this case, you can use to
Map Fragment, or Map View,

00:01:07.100 --> 00:01:10.370
and apply for a
Google Maps API key,

00:01:10.370 --> 00:01:15.040
adding markers and polylines
when they're needed.

00:01:15.040 --> 00:01:17.960
All of this functionality
is available to you

00:01:17.960 --> 00:01:20.490
using the same Maps
API you're already

00:01:20.490 --> 00:01:25.510
familiar with on Android,
with just one caveat though.

00:01:25.510 --> 00:01:27.680
Android Wear
reserves the gesture

00:01:27.680 --> 00:01:30.740
of swiping from left
to right for dismissing

00:01:30.740 --> 00:01:32.630
the current application.

00:01:32.630 --> 00:01:35.370
If you do not need
your map to pan around,

00:01:35.370 --> 00:01:37.720
this will continue to work.

00:01:37.720 --> 00:01:41.090
However, if you need your
map to move around and pan,

00:01:41.090 --> 00:01:44.290
we need to override this
particular dismiss gesture

00:01:44.290 --> 00:01:50.140
to reduce confusion and actually
let our user exit our apps.

00:01:50.140 --> 00:01:53.230
To do this, you need to
implement the Dismiss Overly

00:01:53.230 --> 00:01:57.190
View, this red
circle with a cross,

00:01:57.190 --> 00:02:00.540
and attach it to the
long click event.

00:02:00.540 --> 00:02:04.110
The view will handle
the dismiss action.

00:02:04.110 --> 00:02:08.360
Another common use case is to
select a location on the map

00:02:08.360 --> 00:02:13.130
so that your friend, or your
taxi, can meet you there.

00:02:13.130 --> 00:02:15.950
To implement this,
you can place a marker

00:02:15.950 --> 00:02:19.020
in the middle of the screen
and let your user pan around

00:02:19.020 --> 00:02:20.700
the map.

00:02:20.700 --> 00:02:24.080
This indicates the selected
location within a map fragment

00:02:24.080 --> 00:02:26.140
element.

00:02:26.140 --> 00:02:29.230
Then use the Google Map
onCameraChange listener

00:02:29.230 --> 00:02:33.170
to detect if the user has
panned around the map.

00:02:33.170 --> 00:02:35.240
You can access the
new location through

00:02:35.240 --> 00:02:39.290
the
cameraPosition.target.latitude

00:02:39.290 --> 00:02:41.600
and longitude.

00:02:41.600 --> 00:02:44.550
You can then send this
information to the recipient,

00:02:44.550 --> 00:02:47.960
be it a friend or a taxi driver.

00:02:47.960 --> 00:02:51.210
For more technical information
about how to implement the use

00:02:51.210 --> 00:02:53.450
case we described
in this Tech Byte,

00:02:53.450 --> 00:02:56.990
please head over to
our Maps API blog post.

00:02:56.990 --> 00:03:00.150
In addition, more in-depth
reference information

00:03:00.150 --> 00:03:02.020
is available on the
Google Developer

00:03:02.020 --> 00:03:04.836
portal via this second link.

00:03:04.836 --> 00:03:06.290
I'm Hoi Lam.

00:03:06.290 --> 00:03:08.020
Android Wear is
designed for a user

00:03:08.020 --> 00:03:11.540
to stay connected
whilst on the move.

00:03:11.540 --> 00:03:13.580
With the Google Maps
API on Android Wear,

00:03:13.580 --> 00:03:17.520
developers have a powerful
tool backed by Google Maps.

00:03:17.520 --> 00:03:21.490
So let's keep our users
moving in the real world.

