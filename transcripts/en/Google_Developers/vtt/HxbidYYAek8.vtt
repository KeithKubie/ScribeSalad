WEBVTT
Kind: captions
Language: en

00:00:00.700 --> 00:00:04.540
Did you know that one in four of
installed apps are never used.

00:00:04.540 --> 00:00:07.630
In fact, only 26% of
apps are used daily,

00:00:07.630 --> 00:00:10.290
which means that the majority
of apps just sit there.

00:00:10.290 --> 00:00:12.240
If your app is one
of the unlucky ones,

00:00:12.240 --> 00:00:13.635
I've got good news for you.

00:00:13.635 --> 00:00:16.600
You can improve user
engagement by reminding users

00:00:16.600 --> 00:00:19.240
to come back to your app
with Google Cloud Messaging

00:00:19.240 --> 00:00:20.550
notifications.

00:00:20.550 --> 00:00:22.870
In my experience, the
best way to learn GCM

00:00:22.870 --> 00:00:24.535
is by running the sample code.

00:00:24.535 --> 00:00:25.910
So in this video,
I will show you

00:00:25.910 --> 00:00:28.470
how you can use an open
source project called

00:00:28.470 --> 00:00:30.790
the GCM Playground to
get started quickly.

00:00:30.790 --> 00:00:34.066
[MUSIC PLAYING]

00:00:40.691 --> 00:00:41.190
Hi.

00:00:41.190 --> 00:00:42.350
I'm Jarek Wilkiewicz.

00:00:42.350 --> 00:00:44.190
In this series,
I'm covering things

00:00:44.190 --> 00:00:45.720
every developer
needs to understand

00:00:45.720 --> 00:00:48.260
to be successful-- user
acquisition, engagement,

00:00:48.260 --> 00:00:49.360
and earning money.

00:00:49.360 --> 00:00:52.190
In this episode, we'll
focus on user engagement.

00:00:52.190 --> 00:00:54.470
As you saw in the previous
video in this series,

00:00:54.470 --> 00:00:56.120
driving installs
is what developers

00:00:56.120 --> 00:00:57.520
need to focus on first.

00:00:57.520 --> 00:00:59.570
But you can do much
more than that.

00:00:59.570 --> 00:01:02.470
You see, users abandon
apps quite rapidly.

00:01:02.470 --> 00:01:05.730
When asked, 34% of them
report they stop using apps

00:01:05.730 --> 00:01:08.100
because they lost interest.

00:01:08.100 --> 00:01:12.190
So how can you entice your
users to get back into your app?

00:01:12.190 --> 00:01:16.470
User research shows that
notifications work very well.

00:01:16.470 --> 00:01:18.180
Sending a notification
to the user

00:01:18.180 --> 00:01:20.740
with a discount or a
coupon, a deep link

00:01:20.740 --> 00:01:24.640
to bonus content, a
friend or family update,

00:01:24.640 --> 00:01:26.280
or a cool new
feature announcement,

00:01:26.280 --> 00:01:28.950
are all great ways to
get continued engagement

00:01:28.950 --> 00:01:30.130
for your app.

00:01:30.130 --> 00:01:32.950
According to Localytics,
app users with notifications

00:01:32.950 --> 00:01:35.850
enabled used the app more often
than users with notifications

00:01:35.850 --> 00:01:36.910
disabled.

00:01:36.910 --> 00:01:39.390
This begs two questions--
how often can you

00:01:39.390 --> 00:01:40.750
pop a notification?

00:01:40.750 --> 00:01:43.280
And how do you
implement notifications?

00:01:43.280 --> 00:01:45.840
First of all, pick
the right frequency.

00:01:45.840 --> 00:01:49.780
Make sure your notifications
are relevant and targeted.

00:01:49.780 --> 00:01:52.450
Marketers from leading
brands send notifications

00:01:52.450 --> 00:01:54.500
somewhere between one
notification per month

00:01:54.500 --> 00:01:56.120
to one per week.

00:01:56.120 --> 00:01:58.920
Secondly, use a reliable
cloud infrastructure

00:01:58.920 --> 00:02:01.440
so your messages don't
get lost in transit.

00:02:01.440 --> 00:02:03.320
So how do you implement
notifications?

00:02:03.320 --> 00:02:05.070
There are three parts to it.

00:02:05.070 --> 00:02:06.490
First, you need
the business logic

00:02:06.490 --> 00:02:10.460
to decide what to send,
to which users and when.

00:02:10.460 --> 00:02:13.160
Typically, this runs in a
separate backend application

00:02:13.160 --> 00:02:16.010
server and is specific
to your application.

00:02:16.010 --> 00:02:18.020
Second, you need
the transport layer

00:02:18.020 --> 00:02:21.680
to efficiently push messages
to millions of devices.

00:02:21.680 --> 00:02:23.710
Third, your app should
handle processing

00:02:23.710 --> 00:02:25.650
of incoming notifications.

00:02:25.650 --> 00:02:28.360
The first part is something you
will need to build yourself.

00:02:28.360 --> 00:02:31.290
But later in the video I will
show you how to get started.

00:02:31.290 --> 00:02:34.224
Google Cloud Messaging takes
care of the middle part.

00:02:34.224 --> 00:02:35.640
You know, the one
that efficiently

00:02:35.640 --> 00:02:38.410
pushes messages to
millions of devices?

00:02:38.410 --> 00:02:41.340
For the third part, GCM can
display notifications for you

00:02:41.340 --> 00:02:43.910
automatically, or you can
implement your own display

00:02:43.910 --> 00:02:44.940
logic.

00:02:44.940 --> 00:02:47.980
Let's now talk about
message delivery.

00:02:47.980 --> 00:02:50.580
When you want to send app
notification to your users,

00:02:50.580 --> 00:02:53.670
with GCM, you don't have to
worry about managing client app

00:02:53.670 --> 00:02:55.580
connections to your app server.

00:02:55.580 --> 00:02:57.300
The message is sent
from your app server

00:02:57.300 --> 00:02:59.710
and received by GCM
connection servers,

00:02:59.710 --> 00:03:02.010
and reliably
delivered to your app.

00:03:02.010 --> 00:03:05.590
GCM supports server to device
messaging, subscription

00:03:05.590 --> 00:03:09.200
based topic messaging, and
even upstream messaging

00:03:09.200 --> 00:03:12.510
from the client back
to the app server.

00:03:12.510 --> 00:03:15.410
App stream messages can
be used for, for example,

00:03:15.410 --> 00:03:17.680
automatically
dismissing notifications

00:03:17.680 --> 00:03:20.460
on other devices belonging
to the same user.

00:03:20.460 --> 00:03:23.030
GCM supports notifications
for Android, iOS,

00:03:23.030 --> 00:03:24.820
and even Chrome clients.

00:03:24.820 --> 00:03:28.370
When a message from GCM
Connection server arrives,

00:03:28.370 --> 00:03:31.030
your app can display it
as an in-app notification,

00:03:31.030 --> 00:03:33.460
or, if the app is not
in the foreground,

00:03:33.460 --> 00:03:36.470
the notifications is displayed
in the notification tray.

00:03:36.470 --> 00:03:39.230
In my experience, the
best way to understand GCM

00:03:39.230 --> 00:03:41.430
is to take a look
at the sample code.

00:03:41.430 --> 00:03:43.290
We have provided
it and two examples

00:03:43.290 --> 00:03:45.820
in the GCM Playground
open source project, which

00:03:45.820 --> 00:03:47.590
you can clone from GitHub.

00:03:47.590 --> 00:03:49.420
The GCM Playground
comes with a web

00:03:49.420 --> 00:03:52.120
UI you can use to send
notifications from a sample

00:03:52.120 --> 00:03:55.540
Go backend app server to
Android, iOS, and Chrome

00:03:55.540 --> 00:03:56.300
clients.

00:03:56.300 --> 00:03:58.710
The GCM Playground
uses Docker containers

00:03:58.710 --> 00:04:01.000
to package the examples
with their dependencies.

00:04:01.000 --> 00:04:02.920
So it is easy to get started.

00:04:02.920 --> 00:04:04.520
Here is an example sequence.

00:04:04.520 --> 00:04:07.270
Once you've built and launched
the example Docker containers,

00:04:07.270 --> 00:04:10.160
go to the web UI to
send notification.

00:04:10.160 --> 00:04:13.430
The notification is delivered
to the sample application server

00:04:13.430 --> 00:04:15.390
and distributed to the
registered Android, iOS,

00:04:15.390 --> 00:04:18.320
and Chrome clients through
GCM connection servers.

00:04:18.320 --> 00:04:20.589
In a real life
application, the server

00:04:20.589 --> 00:04:23.040
is the component you would
integrate with your application

00:04:23.040 --> 00:04:25.030
specific targeting logic.

00:04:25.030 --> 00:04:26.770
The GCM Playground
makes it easier

00:04:26.770 --> 00:04:29.080
by providing most of
the application server

00:04:29.080 --> 00:04:33.570
GCM integration code as a part
of the GCM Go library, which

00:04:33.570 --> 00:04:36.190
you can use in your
own app server.

00:04:36.190 --> 00:04:37.190
Thank you for watching.

00:04:37.190 --> 00:04:40.450
[MUSIC PLAYING]

