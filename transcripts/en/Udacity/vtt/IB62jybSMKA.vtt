WEBVTT
Kind: captions
Language: en

00:00:00.170 --> 00:00:04.230
&gt;&gt; The rest of the notion of indexing,
let's go back to our navigation world.

00:00:04.230 --> 00:00:09.070
Imagine that we already have cases A,
B, C and D.

00:00:09.070 --> 00:00:12.466
We might use a very simple
indexing scheme to begin with.

00:00:12.466 --> 00:00:17.251
We might say well simply index each
case with its initial location and

00:00:17.251 --> 00:00:22.190
the initial location will have a X
coordinate and a Y coordinate.

00:00:22.190 --> 00:00:27.230
So the case A may be indexed by its
initial location, which is 3E and

00:00:27.230 --> 00:00:31.130
9N and similarly for B, C and D.

00:00:31.130 --> 00:00:32.980
Now imagine that we have a new case,

00:00:32.980 --> 00:00:36.140
X of going from the office
to the restaurant.

00:00:36.140 --> 00:00:41.130
Recall that we're indexing cases right
now very simply by the XY coordinates of

00:00:41.130 --> 00:00:42.626
the initial location.

00:00:42.626 --> 00:00:48.154
So in index case X by the XY coordinates
of the initial location here.

00:00:48.154 --> 00:00:48.989
Let me repeat,

00:00:48.989 --> 00:00:52.970
this is really a very simple
indexical scheme we are using here.

00:00:52.970 --> 00:00:55.274
As we learned in the lesson last time,

00:00:55.274 --> 00:00:59.163
we really should be using a more
complicated indexical scheme,

00:00:59.163 --> 00:01:03.640
which takes into account both the
initial location and final locations.

00:01:03.640 --> 00:01:06.640
Nevertheless, this can raise
the basic notion of an index.

00:01:06.640 --> 00:01:08.717
An index is like a tag.

00:01:08.717 --> 00:01:12.467
At least in principle, we could come
up with which index equals key for

00:01:12.467 --> 00:01:14.970
this particular class of problems?

00:01:14.970 --> 00:01:18.100
We don't have to limit our social
suggesting numerical coordinates of

00:01:18.100 --> 00:01:19.726
the initial and the goal locations.

00:01:19.726 --> 00:01:23.434
For example, in this navigation
MicroWorld, the indexes may include

00:01:23.434 --> 00:01:27.840
whether they are scenic or not scenic,
whether their route is fast or not fast.

00:01:27.840 --> 00:01:31.446
&gt;&gt; So going back to our programming
example we were working with file input

00:01:31.446 --> 00:01:35.354
and we could have a very rich indexical
structure for organizing cases of file

00:01:35.354 --> 00:01:38.743
input according to various
different parameters and variables.

00:01:38.743 --> 00:01:41.574
For example,
I might tag the individual cases

00:01:41.574 --> 00:01:45.502
of file input according to
whether I use Java, Python, C++.

00:01:45.502 --> 00:01:48.763
I might tag them according to whether
there were very fast or very slow and

00:01:48.763 --> 00:01:51.340
I tagged them according to what
kind of file they read in.

00:01:51.340 --> 00:01:52.248
Did they read text?

00:01:52.248 --> 00:01:53.252
Did they read XML?

00:01:53.252 --> 00:01:55.440
Did they read some other
kind of file format?

00:01:55.440 --> 00:01:59.011
Each of those value then becomes
a particular way of identifying each

00:01:59.011 --> 00:02:03.011
individual case, such that when I'm
given a new problem, I can find the most

00:02:03.011 --> 00:02:06.668
similar case by seeing which one
matches the most of those variables.

00:02:06.668 --> 00:02:08.180
&gt;&gt; That's an important point.

00:02:08.180 --> 00:02:12.020
We want to use an indexical structure,
which allows for effective and

00:02:12.020 --> 00:02:15.370
efficient retrieval,
because we are storing things only,

00:02:15.370 --> 00:02:18.110
because we want to retrieve
them at a later time.

00:02:18.110 --> 00:02:22.110
In case of design more generally, people
have developed indexical structures

00:02:22.110 --> 00:02:24.610
that have to do with functions,
with operating environment,

00:02:24.610 --> 00:02:26.460
with performance criteria and so on.

