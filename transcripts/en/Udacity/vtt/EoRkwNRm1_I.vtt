WEBVTT
Kind: captions
Language: en

00:00:00.210 --> 00:00:02.480
So far the cases that we considered are

00:00:02.480 --> 00:00:05.900
cases in which a page that we are faulting

00:00:05.900 --> 00:00:09.180
on is private to a process. So let's consider

00:00:09.180 --> 00:00:12.550
the case where a page is actively shared. That

00:00:12.550 --> 00:00:18.920
means that two hosts P and Q, and both of them are actively sharing a page X,

00:00:18.920 --> 00:00:23.040
and currently some processes on host Q, is using

00:00:23.040 --> 00:00:25.240
that page X so, is in the local part

00:00:25.240 --> 00:00:28.750
in the working set portion of host Q. And host

00:00:28.750 --> 00:00:33.470
P, the process is page faulting on the same page X.

00:00:33.470 --> 00:00:36.320
So when a page faults, GMS says, oh, let me find

00:00:36.320 --> 00:00:39.290
out what it is. Well, it finds that x is in

00:00:39.290 --> 00:00:43.130
the local part of host Q and because it is

00:00:43.130 --> 00:00:45.810
in the current working set of host Q. We want to leave

00:00:45.810 --> 00:00:47.920
it there. We don't want to yank it away from there. We

00:00:47.920 --> 00:00:50.570
want to leave it there. We want to make a copy of

00:00:50.570 --> 00:00:57.310
this page into the local part of host p so that the faulting process on host p

00:00:57.310 --> 00:01:00.310
will have access to the page x. Again,

00:01:00.310 --> 00:01:03.580
we have the same situation that the working set

00:01:03.580 --> 00:01:05.900
on host p is increasing. The local part

00:01:05.900 --> 00:01:10.430
has to allocate one more page. In physical memory

00:01:10.430 --> 00:01:13.020
for the active working set for the processes

00:01:13.020 --> 00:01:15.670
on B, so the global part has to shrink

00:01:15.670 --> 00:01:18.430
by one. So, this goes up by one, this goes down

00:01:18.430 --> 00:01:23.610
by one. Pick again some arbitrary page from the global part.

00:01:23.610 --> 00:01:26.380
It doesn't have to be the LRE page, because all, all

00:01:26.380 --> 00:01:27.940
that your going to do is you're going to put this into the

00:01:27.940 --> 00:01:31.150
peer memory somewhere. So in that sense, what we are doing

00:01:31.150 --> 00:01:34.920
is we're going to say well, take this y and host in

00:01:34.920 --> 00:01:37.490
some of the peer cache. So what are we, who are

00:01:37.490 --> 00:01:41.100
we going to send it to? Well, we're going to send it to

00:01:41.100 --> 00:01:44.730
the host R that happens to have. The

00:01:44.730 --> 00:01:48.350
globally oldest page. Remember that in this situation, the

00:01:48.350 --> 00:01:51.900
total memory pressure of the entire cluster is going

00:01:51.900 --> 00:01:54.890
up by one, not just this guy, because x

00:01:54.890 --> 00:01:57.410
is going to be still present in the working

00:01:57.410 --> 00:02:00.420
set of host Q, and x is also going to

00:02:00.420 --> 00:02:03.500
be present in the working set of host P.

00:02:03.500 --> 00:02:06.140
Which means the total memory impression in the entire

00:02:06.140 --> 00:02:08.380
cluster is going up by 1. And that is

00:02:08.380 --> 00:02:11.290
the case, then I have to necessarily pick a

00:02:11.290 --> 00:02:14.700
page from the entire cluster and throw it all

00:02:14.700 --> 00:02:17.460
under the desk, and that's what we're doing here. What

00:02:17.460 --> 00:02:20.750
we are saying is that host R happens to

00:02:20.750 --> 00:02:25.070
have the globally host stage, and this page that I

00:02:25.070 --> 00:02:28.280
am replacing from host P in order to accommodate

00:02:28.280 --> 00:02:31.960
The missing page and bring it into my local cache

00:02:31.960 --> 00:02:38.180
on host P is to throw out why over to host R and host R in order to

00:02:38.180 --> 00:02:41.230
make room for this guy in it's global cache

00:02:41.230 --> 00:02:45.870
has to necesarily pick a victim from it's physical memory

00:02:45.870 --> 00:02:48.230
and the victim it picks is going to be The

00:02:48.230 --> 00:02:51.220
LRU candidate, and that could come from the Local part

00:02:51.220 --> 00:02:54.020
or from the Global part. Again, if it comes

00:02:54.020 --> 00:02:56.960
from the Global part, we know it's private and we

00:02:56.960 --> 00:02:59.470
throw it away. if it comes from the Local part,

00:02:59.470 --> 00:03:02.590
it could be that this is a dirty copy, in

00:03:02.590 --> 00:03:04.880
which case we have to write all to the disc,

00:03:04.880 --> 00:03:06.520
or drop it on the floor if it is a clean

00:03:06.520 --> 00:03:12.010
copy because the disc always has. All the copies of the pages. In either case

00:03:12.010 --> 00:03:16.870
the important message is that if the LRU candidate that we're going to throw

00:03:16.870 --> 00:03:21.920
out onto the disc our drop on the floor comes from the local part

00:03:21.920 --> 00:03:29.110
of R. That means similar to the previous case, the working set on local R is

00:03:29.110 --> 00:03:32.900
shrinking. Is coming down by one. Which means

00:03:32.900 --> 00:03:35.080
are, host are, can do more community service

00:03:35.080 --> 00:03:41.650
in the future. And now the x is present in the working set of both host Q

00:03:41.650 --> 00:03:47.060
and host P which means actively some processor on host P, some process on host Q

00:03:47.060 --> 00:03:50.790
are accessing this page X. I mentioned earlier

00:03:50.790 --> 00:03:53.550
that this is not something that GSM worries

00:03:53.550 --> 00:03:57.140
about. If coherence is to be maintained for

00:03:57.140 --> 00:03:59.930
the copies of the same page existing on

00:03:59.930 --> 00:04:04.010
multiple nodes, that's not in the domain of

00:04:04.010 --> 00:04:08.610
GSM because GSM is simply a paging device.

00:04:08.610 --> 00:04:10.610
So it doesn't worry about coherence maintenance. There

00:04:10.610 --> 00:04:13.060
has to be something that the application or

00:04:13.060 --> 00:04:15.270
some higher level of the software has to worry

00:04:15.270 --> 00:04:19.450
about. So we can talk about the relative split between

00:04:19.450 --> 00:04:22.350
local and global. In this particular case, well, in

00:04:22.350 --> 00:04:25.790
this case host P local goes up by one, global

00:04:25.790 --> 00:04:29.290
goes down by one. In host Q Nothing changes

00:04:29.290 --> 00:04:33.120
because there is an actively shared page which may relieve

00:04:33.120 --> 00:04:35.340
the copy here, just give a copy over to

00:04:35.340 --> 00:04:39.710
P, so the balance between local and global doesn't change.

00:04:39.710 --> 00:04:42.130
On the other hand in host R if

00:04:42.130 --> 00:04:45.510
the replacement candidate came out of The global part,

00:04:45.510 --> 00:04:47.550
then then there is no change in the

00:04:47.550 --> 00:04:51.390
split between local and global and host R either.

00:04:51.390 --> 00:04:54.730
On the other hand, if the replacement candidate

00:04:54.730 --> 00:04:57.260
came from the local cache of host R, what

00:04:57.260 --> 00:04:59.720
that means is that the working set, memory

00:04:59.720 --> 00:05:05.520
pressure on host R is decreasing. And therefore L

00:05:05.520 --> 00:05:10.380
will go down by one and G will go up by one. I want you to think through

00:05:10.380 --> 00:05:14.000
all these four cases very carefully. The first three

00:05:14.000 --> 00:05:17.030
cases that we looked at were cases in which the

00:05:17.030 --> 00:05:19.210
pages were all private. And this is the only

00:05:19.210 --> 00:05:24.430
case where the page is potentially shared because it is

00:05:24.430 --> 00:05:25.468
in the [INAUDIBLE] It is in the local cache

00:05:25.468 --> 00:05:27.150
of Host Q and in the local cache of Host

00:05:30.220 --> 00:05:32.510
P as well, and now it is time for a quiz.

