WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:02.280
Did you hear about superfish this year?

00:00:02.440 --> 00:00:05.240
[Sean] Yes. This is the Lenovo laptop scandal, isn't it?

00:00:05.480 --> 00:00:11.840
Yeah this is the bit of software that was installed on pretty much every consumer Lenovo laptop.

00:00:12.100 --> 00:00:19.940
It was so bad that the US department of homeland security issued an advisory saying that this needs to be uninstalled.

00:00:20.080 --> 00:00:24.880
And to understand why it's so bad we need to understand Man In The Middle attacks.

00:00:26.920 --> 00:00:32.760
There have been a lot of techniques for intercepting traffic for a long long time.

00:00:32.960 --> 00:00:37.480
One of the earliest ones I remember was called ARP spoofing or ARP poisoning.

00:00:37.560 --> 00:00:43.880
You've got your router sitting in the middle.  Cause all routers have a little aerial and some lights on them.

00:00:44.000 --> 00:00:47.540
And you've got computers connected to this.

00:00:47.700 --> 00:00:52.640
And what you do is you bring your computer onto an open Wi-Fi network, something like that,

00:00:52.780 --> 00:00:57.420
connect your computer, and your computer just announces, "Hello!  I'm now the router."

00:00:57.560 --> 00:01:01.960
I'm simplifying massively here but basically the network is built on trust.

00:01:01.980 --> 00:01:04.680
And so the computers just kind of believe it.

00:01:04.840 --> 00:01:11.500
And so the computers and the router and sending all their packets to you first and then you're forwarding them on to the right locations.

00:01:11.720 --> 00:01:18.200
So everything's going through you.  10 or 15 years ago this was terrible because pretty much everything was sent in plain text.

00:01:18.200 --> 00:01:22.400
Email passwords, websites, everything was going through plain text.

00:01:22.400 --> 00:01:24.180
So you could just sit there

00:01:24.460 --> 00:01:27.680
and provided your computer was fast enough, your network card was good enough,

00:01:27.780 --> 00:01:32.380
you could see every bit of traffic on this network and just kind of slurp all the password out.

00:01:32.380 --> 00:01:38.060
Obviously massively illegal without the consent of everyone on the network so Don't do that!

00:01:38.060 --> 00:01:42.260
Umm, but the solution to that is SSL.

00:01:42.380 --> 00:01:49.620
Your computer sitting here, and the server out here.  As all servers look like computers from the 1990s.

00:01:49.620 --> 00:01:53.700
Your computer sends requests saying "Hello, I would like to talk securely."

00:01:53.720 --> 00:01:56.460
"These are the protocols I can support. These are my details."

00:01:56.460 --> 00:01:59.400
And the server comes back, "Yeah, okay.  Here's my public key."

00:01:59.400 --> 00:02:06.980
I know Computerphile has done, you've done public and private key before.
-Yeah, he's sat behind me.

00:02:09.520 --> 00:02:14.420
So yeah, go watch his video about public and private key cryptography if you want to know the details about that.

00:02:14.420 --> 00:02:21.360
Basically the server sends back a long series of numbers.  Your computer can sign messages with these and encrypt messages with these.

00:02:21.360 --> 00:02:27.180
And they can only be unlocked by that server because maths.

00:02:27.180 --> 00:02:29.900
I'm not going to try to explain more than that.

00:02:29.900 --> 00:02:32.340
You can lock messages, only they can unlock them.

00:02:32.340 --> 00:02:38.240
Which is great because your attacker, who is sitting in the middle here, and reading everything will just see noise.

00:02:38.240 --> 00:02:42.600
Except all we've really done is just moved the problem back a stage

00:02:42.600 --> 00:02:50.560
because that first bit, that "Hello, I would like to talk securely." "Yeah okay. Here's my private (sic. meant "public") key."  That has to go in plain text.

00:02:51.040 --> 00:02:53.940
And someone in the middle can change that.

00:02:53.940 --> 00:02:57.660
They can take that public key that was sent by the server and just go,

00:02:57.660 --> 00:03:04.580
"Um, no.  I'm going to have that! Here's my public key instead."  You're actually going here, and then here.

00:03:04.580 --> 00:03:06.580
Your computer here doesn't know the difference.

00:03:06.580 --> 00:03:11.140
It then encrypts the message with the attacker's public key. Sends it back here.

00:03:11.140 --> 00:03:14.300
Attacker opens it. Decrypts it.  Reads it.

00:03:14.300 --> 00:03:19.460
Goes "okay." and then sends the message that should have been sent from your computer all properly encrypted.

00:03:19.460 --> 00:03:24.020
Server goes, "All right, we've got an encrypted connection going on here." Sends the encrypted packet.

00:03:24.160 --> 00:03:29.600
The attacker, who can do this now, unlocks it, goes "yeah, all right,"

00:03:29.600 --> 00:03:36.560
and then re-encrypts it with their key, sends it on to you and now every single communication is going through the attacker.

00:03:36.560 --> 00:03:41.320
No one knows anything is wrong. That is your classic Man In The Middle attack.

00:03:41.320 --> 00:03:45.040
The solution to this is something called signed certificates.

00:03:45.040 --> 00:03:49.220
This is why setting up a secure server on the web costs a little bit of money right now.

00:03:49.220 --> 00:03:51.220
I mean it may not in the future.

00:03:51.220 --> 00:03:56.820
The Electronic Frontier Foundation and Mozilla and trying to set up a thing to make this free.

00:03:56.820 --> 00:03:57.940
Hopefully by the end of the year it will be.

00:03:57.940 --> 00:04:05.320
But the idea is that there's a third party vouching for the set of the public keys you're exchanging.

00:04:05.320 --> 00:04:06.360
I've had to do this.

00:04:06.500 --> 00:04:10.240
I set up a secure server about a year ago now.

00:04:10.240 --> 00:04:17.300
What I had to do when I was setting it up I had to write "It's going to run this website, it's going to be on this address, it's going to use these protocols"

00:04:17.300 --> 00:04:21.780
and they would generate this set of public and private keys.

00:04:21.780 --> 00:04:29.880
And then over an existing secure connection, one that I knew to be good, I send that private key off to something that is called a certifi-

00:04:29.880 --> 00:04:31.880
How do I draw a certificate authority?

00:04:31.880 --> 00:04:37.880
[Sean] I think it's going to be a faceless office.  Or why don't we do a factory then we know that's kind of indus...

00:04:37.880 --> 00:04:40.580
Haha, we're going to the Internet factory, there we go.

00:04:40.580 --> 00:04:45.380
Factory of the Internet, all right, there we go, we got a padlock factory there.

00:04:45.500 --> 00:04:47.840
No no, it's not a padlock.  I've drawn a padlock here, it's not.

00:04:47.940 --> 00:04:49.940
It's a set of keys.  It's what we call public and private keys.

00:04:49.940 --> 00:04:56.100
I generate my keys. I make them. And I send them over a connection I know to be secure to this company.

00:04:56.100 --> 00:05:01.020
There's like half a dozen big ones in the world. Maybe 50 or 100 or so small regional ones.

00:05:01.020 --> 00:05:06.180
And what they do is they check, all right these keys we've got.  Are they definitely from this server? Yes.

00:05:06.180 --> 00:05:10.440
And if you want one of the green padlocks with your company name on it they ask you to,

00:05:10.440 --> 00:05:15.160
I don't know, fax something on headed paper, something like that. It's probably still a fax machine actually,

00:05:15.160 --> 00:05:18.860
which is why it's so expensive, know you, to keep the fax machine running.

00:05:19.900 --> 00:05:22.480
They get this.  They check it's coming from the right server.

00:05:22.480 --> 00:05:24.020
They check it's the right keys.

00:05:24.020 --> 00:05:26.020
And then they do maths to them.

00:05:26.020 --> 00:05:32.300
And now those keys are now signed by that company with their own private key, which no one else has.

00:05:32.300 --> 00:05:40.520
So now, when I do that initial back and worth, so person comes along, they talk to my server, and they say "Hello. I would like to talk securely."

00:05:40.520 --> 00:05:47.200
And my server says, "All right. Here is my public key. It's been signed by those folks over there."

00:05:47.200 --> 00:05:52.120
And the company says, "Ah! Oh yeah, okay! That's great."

00:05:52.120 --> 00:06:00.880
And if the attacker changes one bit of those keys, - in the computer sense -, one 1 or 0 in there, the maths doesn't add up any more.

00:06:00.880 --> 00:06:08.880
And more than that, not only does the maths not add up, they can't generate any new keys and sign them because they don't have the private key for any of these big companies.

00:06:08.880 --> 00:06:10.880
So the attacker's completely out of luck.

00:06:10.880 --> 00:06:18.640
If they change it, it'd be like when you try logging into a public wi-fi network, it pops up "Hey! You need to log in.  We need your details."

00:06:18.640 --> 00:06:20.640
Sometimes that's a man in the middle attack

00:06:20.640 --> 00:06:26.680
and they are taking stuff you are trying to send to the server. And they're getting in the way and sending, "no we're going to send back our page instead."

00:06:26.780 --> 00:06:33.640
This warning will pop up and say "we're meant to be on a secure connection to Gmail but we're not! YWAA! &lt;panic sound&gt;. Panic everyone run. Big red screen."

00:06:33.660 --> 00:06:37.400
Which of course now most people have now trained themselves to click through, but you know, you try.

00:06:37.400 --> 00:06:44.180
Okay, the attacker can't intercept the keys any more. Not without sending up all sorts of red flags, which is fine.

00:06:44.180 --> 00:06:51.400
But again all we've done is we've moved the problem back a stage because how do you know which certificate authorities to trust?

00:06:51.400 --> 00:06:57.540
And that's when for end users, for people like you and me web browsing, when you do have to take it on trust.

00:06:57.540 --> 00:07:01.340
Because when you bought your smart phone- when I bought this I trusted Apple.

00:07:01.340 --> 00:07:09.100
They installed a list of maybe probably about 100 certificate authorities, those factories on there.

00:07:09.340 --> 00:07:11.560
They installed their public keys on there.

00:07:11.560 --> 00:07:16.680
So they don't really go over the air to start with. They're pre-installed with your device.

00:07:16.680 --> 00:07:27.360
If you install a web browser, that would be over a connection you know to be secure or hopefully. And you install that and say "Right, I'm trusting these companies because my browser manufacturer trusts them."

00:07:27.360 --> 00:07:36.200
It's okay, we now have keys on this server signed by the factory here.

00:07:36.200 --> 00:07:40.740
And that factory is trusted by whoever made your browser or your device.

00:07:40.740 --> 00:07:44.980
So we have this complete network of trust that's set up.

00:07:44.980 --> 00:07:51.240
That means the attacker can't change the keys. And there are two obvious weak points there.

00:07:51.240 --> 00:07:53.240
One is the certificate authority.

00:07:53.240 --> 00:08:00.480
If you can get them to fraudulently sign keys then all the people who trust them are completely out of luck.

00:08:00.480 --> 00:08:05.760
And that happened, that happened to a Dutch certificate authority that is now bankrupt because no one trusts them.

00:08:05.760 --> 00:08:17.960
Somehow they got conned, coerced, bribed, no one knows, but they generated a completely valid, signed certificate for Google.

00:08:17.960 --> 00:08:25.600
They had no right to do that, no permission to do that but they generated a certificate for the whole of Google with their signature on it saying, "We trust this."

00:08:25.760 --> 00:08:33.380
And that somehow made it to Iran where someone manage a massive man in the middle attack on enormous numbers of Iranian web users.

00:08:33.380 --> 00:08:38.900
So they were all seeing a big green padlock with "Google" written in it.

00:08:38.900 --> 00:08:45.180
If they looked at the details, which a couple of people - if you're paranoid, you check the details on this.

00:08:45.320 --> 00:08:55.560
And someone is asking "Why is this certificate for Google signed by someone in the Netherlands? That doesn't make sense." And that was how it was found out.

00:08:55.760 --> 00:08:58.560
That wasn't a genuine Google certificate.

00:08:58.920 --> 00:09:00.200
But most people wouldn't know that.

00:09:00.440 --> 00:09:05.120
They're talking to Gmail. They're seeing a big green Google certificate in there. They think all's well.

00:09:05.120 --> 00:09:10.000
- So they're basically looking at their Gmail emails, but it's all going through somewhere else.

00:09:10.000 --> 00:09:17.240
It's all going through an attacker.  The keys that are being replace, they couldn't do it for every website, but they've done it for this one, they've done it for Google.

00:09:17.240 --> 00:09:21.840
So every bit of Google traffic that went through them, they were swapping out the keys.

00:09:21.840 --> 00:09:30.440
They were opening everything, looking at it, all this is all happening in milliseconds obviously. Open it.  Store it. Put the new keys on it that you've got. Send it onwards.

00:09:30.440 --> 00:09:33.880
And it's terrible. It's a devastating attack if you can pull it off.

00:09:33.880 --> 00:09:38.560
And there is a genuine concern that governments can do this.

00:09:38.560 --> 00:09:48.120
That governments can go to certificate authorities and say, "Right. This is the government here. We need you to generate some fake certificates."

00:09:48.120 --> 00:09:50.560
Or they can just steal the private keys.

00:09:50.560 --> 00:09:57.440
If they can steal the certificate authority's private keys, they can generate their own keys without even the authority knowing.

00:09:57.440 --> 00:10:00.520
I mean, it's a devastating attack if they can pull it off.

00:10:00.720 --> 00:10:02.000
Can they?

00:10:02.240 --> 00:10:06.040
I'd be surprised if the NSA couldn't do that somehow.

00:10:06.320 --> 00:10:09.480
Whether they actually choose to do it is another matter.

00:10:09.480 --> 00:10:17.480
Because if they do, and it gets found out, not only have they bankrupted a fairly major company, that no one trusts any more, but they've blown their cover.

00:10:17.480 --> 00:10:23.560
So I suspect that yeah they can do it, but they use it in very very rare situations where they haven't got another option.

00:10:23.560 --> 00:10:27.280
Whether they should, I'm not getting into that debate.

00:10:27.280 --> 00:10:34.320
That's one weak spot.  The other is the list of trusted authorities on your phone or on your computer.

00:10:34.320 --> 00:10:45.360
Because if an attacker can get an extra entry in there, if they can get themselves in there, then they can just generate new keys on the fly and every single connection would be intercepted.

00:10:45.360 --> 00:10:48.200
So that's what Superfish did.

00:10:48.200 --> 00:10:50.560
They wanted to insert advertising.

00:10:50.560 --> 00:10:58.440
Superfish was a program that took your Google searches and added a little bit more advertising in it for them, which is a terrible idea!

00:10:58.440 --> 00:11:01.520
But Google switched to secure searching for everyone.

00:11:01.520 --> 00:11:09.880
So Superfish, which is such a bad idea, they installed themselves as a trusted certificate provider.

00:11:09.880 --> 00:11:18.920
And it wasn't even sitting out in the networks, it was this little program sitting on your own computer looking at all your traffic and doing a man in the middle attack on it and inserting their own adverts.

00:11:18.920 --> 00:11:22.760
That authority is sitting on your computer signing keys on the fly.

00:11:22.760 --> 00:11:27.640
Which means that the private key, the numbers that should never ever be seen,

00:11:27.640 --> 00:11:29.640
is sitting on your computer and can be extracted.

00:11:29.640 --> 00:11:42.280
It was the same on every single computer so as soon as one attacker pulled it off one computer, every single installation is vulnerable, because every single computer that has superfish trusts superfish.

00:11:42.280 --> 00:11:48.200
So if someone in the middle pretends to be superfish, which they can do because they have that private key,

00:11:48.200 --> 00:11:54.760
then that attacker can man in the middle every single secure website out there.

00:11:54.760 --> 00:12:00.520
And they know you've got it because they can see Lenovo on the back of your computer in the coffee shop.

00:12:00.520 --> 00:12:10.920
There's ways, there's uninstallers out there now. Lenovo promised not to do it again. Superfish, as far as I know, does not exist as a bit of software any more.

00:12:10.920 --> 00:12:22.640
But it's one short-sighted company that used every ignorant shortcut in the book to try to make a few adverts appear.

00:12:22.640 --> 00:12:31.120
Just because of that, tens of thousands maybe hundreds of thousands of computers, I don't know, perhaps a million, I don't know how many they make in a year.

00:12:31.120 --> 00:12:38.040
But all those were made vulnerable to a really really terrible attack

00:12:38.040 --> 00:12:41.640
just because one company wanted to sell a few ads.

00:12:44.400 --> 00:12:52.280
And it's very very difficult for people who go into a bad place and use a card because if you complain to your bank then the strip club owner will just say,

00:12:52.280 --> 00:12:57.000
"He was with four girls all night, and four thousand pounds is what that costs at our place."

00:12:57.520 --> 00:12:58.720
How long have we not been recording?

00:12:58.720 --> 00:12:59.660
That's a really good question.

00:12:59.660 --> 00:13:01.320
This is because I'm an idiot.

00:13:03.200 --> 00:13:08.400
I love it. We're three quarters of the way through and he says, "Why are we not recording?"

00:13:08.400 --> 00:13:17.000
We did that for the drone footage in Chernobyl. We had a monitor on the drone footage with a remote link.

00:13:17.000 --> 00:13:19.540
And we're getting our shots.  And I look in and go

00:13:19.540 --> 00:13:24.460
"Our GoPro is not rolling. Oh!"

00:13:24.460 --> 00:13:28.080
Bring the drone back down. Change the battery in the drone. Oh man!

