WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
We're going to finish up this unit with the summary of how to use coverage

00:00:02.000 --> 00:00:04.000
to help us build better sotfware.

00:00:04.000 --> 00:00:07.000
We're going to have to start off doing a good job testing and there's no way around that.

00:00:07.000 --> 00:00:10.000
The next step is to measure the coverage of the test using some coverage metric

00:00:10.000 --> 00:00:12.000
that is appropriate for the software that you're testing.

00:00:12.000 --> 00:00:16.000
If the coverage was pretty high, let's say 80% or 90%, then what we should do

00:00:16.000 --> 00:00:20.000
is use the feedback from the coverage tool this feedback to improve our test suite

00:00:20.000 --> 00:00:23.000
then measure coverage again and if the coverage results were poor, 

00:00:23.000 --> 00:00:26.000
let's say maybe we've only covered 20% of the statements in our code base,

00:00:26.000 --> 00:00:29.000
that's the signal that we need to rethink our testing charting.

00:00:29.000 --> 00:00:31.000
Of course, if should be the case that we're perfectly happy with poor coverage. 

00:00:31.000 --> 00:00:34.000
There are plenty of scenarios and for example, web application with element. 

00:00:34.000 --> 00:00:37.000
We don't need good coverage because our users are going to test the code for us, 

00:00:37.000 --> 00:00:40.000
and for breaks, we'll detect it by looking at error logs and we'll be able to fix it on the fly.

00:00:40.000 --> 00:00:44.000
On the other hand, if we have poor coverage results for some sort of Avionics software,

00:00:44.000 --> 00:00:47.000
or automotive software, it's going to be deployed and that's extremely hard to update, 

00:00:47.000 --> 00:00:50.000
we probably need to rethink our plan in a really serious way 

00:00:50.000 --> 00:00:53.000
and try to come up with a much better test suite in order to get a higher level of coverage.

00:00:53.000 --> 00:00:56.000
If coverage is used in the fashion that I've outlined here, it can give us a pretty significant

00:00:56.000 --> 00:01:01.000
amount of bang for the buck, regardless of the result, regardless of whether it's giving us a little bit of feedback

00:01:01.000 --> 00:01:04.000
to get the last 5% or 10% of improvement and coverage or whether it's saying that

00:01:04.000 --> 00:01:07.000
our testing strategy really isn't very good, it's telling us a useful information. 

00:01:07.000 --> 00:01:09.000
It's telling us a useful information we probably need to know

00:01:09.000 --> 00:01:11.000
if we're going to create a high quality software.

00:01:11.000 --> 00:01:14.000
And finally, I just want to finish up with a reminder, so we strongly believe

00:01:14.000 --> 00:01:18.000
that if we have a good test suite, and we measure it's coverage, the coverage will be good.

00:01:18.000 --> 00:01:20.000
We do not believe, on the other hand, but if we have a test suite

00:01:20.000 --> 00:01:22.000
that gets good coverage, it must be a good test suite.

00:01:22.000 --> 00:01:26.000
And the reason that, that it's not true, is that it's really easy to take a test suite 

00:01:26.000 --> 00:01:30.000
and tweak it until it gets good coverage without actually improving the quality of it very much.

00:01:30.000 --> 00:01:34.000
To finish up, used in the right way, coverage can be a relatively low cost way  

00:01:34.000 --> 00:01:37.000
to improve the testing that we do for a piece of software. 

00:01:37.000 --> 00:01:41.000
Used incorrectly, it can waste our time, and perhaps worst, lead to a false sense of security. 

