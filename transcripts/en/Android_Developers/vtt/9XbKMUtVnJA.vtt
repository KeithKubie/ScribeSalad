WEBVTT
Kind: captions
Language: en

00:00:05.390 --> 00:00:07.980
Hi, I'm Chet Haase,
an engineer on the

00:00:07.980 --> 00:00:10.010
Android team at Google.

00:00:10.010 --> 00:00:11.245
I work on graphics
and animation.

00:00:11.245 --> 00:00:14.980
Today I want to just talk about
a way of using a class

00:00:14.980 --> 00:00:20.252
called View Property Animator,
which was introduced in the

00:00:20.252 --> 00:00:21.900
3.2 release.

00:00:21.900 --> 00:00:25.190
And this is a way to animate
properties of views

00:00:25.190 --> 00:00:27.120
in a very easy way.

00:00:27.120 --> 00:00:29.840
It's kind of like setting the
value of one of the properties

00:00:29.840 --> 00:00:32.759
on the view but having it
animate to that value instead

00:00:32.759 --> 00:00:35.150
of just atomically
switch to it.

00:00:35.150 --> 00:00:37.630
So there's much more I could
go into about View Property

00:00:37.630 --> 00:00:38.920
Animator in general.

00:00:38.920 --> 00:00:42.150
What we're going to see today is
an effect where we can use

00:00:42.150 --> 00:00:44.830
View Property Animator to cross
fade between different

00:00:44.830 --> 00:00:47.080
images in a picture viewer.

00:00:47.080 --> 00:00:50.550
So let's take a look
at the demo.

00:00:50.550 --> 00:00:53.350
So we saw another demo in a
previous episode where we used

00:00:53.350 --> 00:00:55.200
transition Drawable to
do something similar.

00:00:55.200 --> 00:00:59.160
Although that particular
Drawable animation is about

00:00:59.160 --> 00:01:01.360
switching just between
two images.

00:01:01.360 --> 00:01:03.330
This one's a little bit more
general purpose, where we have

00:01:03.330 --> 00:01:05.810
a set of images in here that
we've loaded and we're going

00:01:05.810 --> 00:01:08.690
to cross fade as we
go between them.

00:01:08.690 --> 00:01:09.910
And we'll just keep
going through the

00:01:09.910 --> 00:01:11.310
entire set of images.

00:01:11.310 --> 00:01:13.040
A little bit more
general purpose.

00:01:13.040 --> 00:01:16.500
So as we click on the image we
get a nice fading effect as we

00:01:16.500 --> 00:01:19.030
go to the next image and
on and on and then

00:01:19.030 --> 00:01:20.670
we just cycle around.

00:01:20.670 --> 00:01:23.700
I only have four images
loaded in here for the

00:01:23.700 --> 00:01:25.530
purposes of this demo.

00:01:25.530 --> 00:01:27.690
So, pretty pictures.

00:01:27.690 --> 00:01:29.040
Not a terribly interesting
demo.

00:01:29.040 --> 00:01:31.090
But let's take a look
at the code.

00:01:31.090 --> 00:01:34.350
So we have this class called
Picture Viewer and in it--

00:01:34.350 --> 00:01:35.880
I'm just hard coding these.

00:01:35.880 --> 00:01:38.750
I'm just loading in these
small images that I had.

00:01:38.750 --> 00:01:40.710
Not the way to go for a general
picture viewing

00:01:40.710 --> 00:01:42.780
application, obviously.

00:01:42.780 --> 00:01:45.910
But it does for this purpose,
which is to demonstrate using

00:01:45.910 --> 00:01:48.060
View Property Animator
and cross fading

00:01:48.060 --> 00:01:49.750
between these things.

00:01:49.750 --> 00:01:53.450
So we have two image views
that we're going to fade

00:01:53.450 --> 00:01:56.510
between, where we're going
to put these resources.

00:01:56.510 --> 00:02:00.760
And we're going to first of all
set up the View Property

00:02:00.760 --> 00:02:03.590
Animator on these views to
have a duration of 1,000.

00:02:03.590 --> 00:02:05.980
One thing to be aware of with
View Property Animator is the

00:02:05.980 --> 00:02:09.050
way that you use it is by
calling view.animate and that

00:02:09.050 --> 00:02:12.810
returns you a reference to the
View Property Animator which

00:02:12.810 --> 00:02:14.120
all views have.

00:02:14.120 --> 00:02:17.110
So they only have that one
instance inside them, although

00:02:17.110 --> 00:02:18.680
it's unique to that view.

00:02:18.680 --> 00:02:21.490
So if you want to change the
[INAUDIBLE] properties on a

00:02:21.490 --> 00:02:24.990
View Property Animator, such as
the duration, then you call

00:02:24.990 --> 00:02:27.170
.animate and then
call the setter.

00:02:27.170 --> 00:02:29.890
In this case we're setting
the duration to be 1,000.

00:02:29.890 --> 00:02:31.680
I should point out that
is too long for a

00:02:31.680 --> 00:02:33.460
general purpose UI animation.

00:02:33.460 --> 00:02:35.930
But for the purposes of actually
demonstrating this

00:02:35.930 --> 00:02:39.540
today, in this video I tend to
use longer durations so you

00:02:39.540 --> 00:02:41.150
can actually see the animation
depending on the

00:02:41.150 --> 00:02:42.620
frame rate of the video.

00:02:42.620 --> 00:02:46.050
Then we create bit map Drawables
from these hard

00:02:46.050 --> 00:02:50.140
coded images, these Drawables
that I defined above.

00:02:50.140 --> 00:02:52.050
Nothing very interesting
going on there.

00:02:52.050 --> 00:02:55.440
And then for the previous and
the next image view we

00:02:55.440 --> 00:02:58.890
populate them with the first
and second Drawable there.

00:02:58.890 --> 00:03:01.250
And then when we click-- this
is where all the interesting

00:03:01.250 --> 00:03:02.130
stuff happened--

00:03:02.130 --> 00:03:04.870
we basically performed two
animations in parallel.

00:03:04.870 --> 00:03:07.820
We're going to animate the
existing image that everybody

00:03:07.820 --> 00:03:11.030
can see out and we're going to
animate and we're going to

00:03:11.030 --> 00:03:14.210
fade the new image, the
next image, in.

00:03:14.210 --> 00:03:17.420
And then when it's done we're
going to restore some values

00:03:17.420 --> 00:03:21.650
and then we're going to set up
the references to which images

00:03:21.650 --> 00:03:23.580
we're currently showing so
that we can keep cycling

00:03:23.580 --> 00:03:25.420
through the set of images
that we have.

00:03:25.420 --> 00:03:28.680
So here we're going to animate
the alpha property, which is

00:03:28.680 --> 00:03:31.600
the translucency property
of the previous image.

00:03:31.600 --> 00:03:34.900
It is currently 1 because that's
the image that the user

00:03:34.900 --> 00:03:35.680
is currently seeing.

00:03:35.680 --> 00:03:38.490
And we're going to animate it
by saying animate, which

00:03:38.490 --> 00:03:42.580
returns as View Property
Animator object .alpha 0.

00:03:42.580 --> 00:03:45.220
So this is basically saying,
I want you to animate.

00:03:45.220 --> 00:03:48.220
I want to set the alpha property
to 0, but I want you

00:03:48.220 --> 00:03:50.840
to animate it there over
whatever your duration is.

00:03:50.840 --> 00:03:53.680
And we're going to call
withLayer and I'll explain

00:03:53.680 --> 00:03:54.260
that in a moment.

00:03:54.260 --> 00:03:57.080
This is sort of an important
element to understand for

00:03:57.080 --> 00:03:59.170
performance tuning.

00:03:59.170 --> 00:04:01.450
And then Next Image View,
instead of fading that out

00:04:01.450 --> 00:04:02.890
like the previous one, we're
going to fade it in.

00:04:02.890 --> 00:04:05.270
So as the old one fades
out we're going to

00:04:05.270 --> 00:04:06.620
fade the new one in.

00:04:06.620 --> 00:04:08.670
So you can think of them as sort
of sitting on top of one

00:04:08.670 --> 00:04:11.730
another and we're going to cross
fade them by fading one

00:04:11.730 --> 00:04:14.710
out and fading the other one
in all at the same time.

00:04:14.710 --> 00:04:17.279
And then there's a new
API that was added.

00:04:17.279 --> 00:04:21.390
I believe this is in Jelly
Bean and it's called

00:04:21.390 --> 00:04:22.630
withEndAction.

00:04:22.630 --> 00:04:26.130
And you can mimic this in
prior releases simply by

00:04:26.130 --> 00:04:28.400
setting a listener on a View
Property Animator and doing

00:04:28.400 --> 00:04:29.420
the same exact thing.

00:04:29.420 --> 00:04:32.600
This is just a little bit more
terse way of doing that.

00:04:32.600 --> 00:04:36.120
You can say when this animation
is done, then I want

00:04:36.120 --> 00:04:37.480
you to perform the following
actions.

00:04:37.480 --> 00:04:39.780
We're going to update our
references so that we know

00:04:39.780 --> 00:04:43.220
which images we're actually
looking at right now, and then

00:04:43.220 --> 00:04:44.670
we're going to restore some
alpha properties.

00:04:44.670 --> 00:04:47.880
So we're going to set the alpha
property of 1 to 0 and

00:04:47.880 --> 00:04:51.350
set the other alpha property to
1 so that they're at a good

00:04:51.350 --> 00:04:54.690
state to animate from for the
next transition that we do.

00:04:54.690 --> 00:04:56.570
Now I want to get back to
this withLayer thing.

00:04:56.570 --> 00:04:57.510
This is important.

00:04:57.510 --> 00:05:00.360
When you're animating a complex
view or complex view

00:05:00.360 --> 00:05:04.710
hierarchy, it's important to
use a layer on that object,

00:05:04.710 --> 00:05:07.490
especially if you've noticed a
frame rate problem because the

00:05:07.490 --> 00:05:10.420
system can't keep up with
redrawing that thing from

00:05:10.420 --> 00:05:12.400
scratch every time during
the animation.

00:05:12.400 --> 00:05:14.610
An easy way to do that
is to set a layer

00:05:14.610 --> 00:05:16.100
type on that object.

00:05:16.100 --> 00:05:19.080
So you simply call
view.setLayerType and set it

00:05:19.080 --> 00:05:22.100
to a hardware layer,
for example.

00:05:22.100 --> 00:05:28.310
And this API that we have here
as of Jelly Bean the withLayer

00:05:28.310 --> 00:05:30.750
API is a way for us to
do that for you.

00:05:30.750 --> 00:05:33.250
So you could do that when
you run the animation.

00:05:33.250 --> 00:05:37.100
You could say set layer type on
the View and then you could

00:05:37.100 --> 00:05:39.710
put some more code in here with
your end action, or you

00:05:39.710 --> 00:05:42.780
could set a listener for the end
of the animation and then

00:05:42.780 --> 00:05:45.570
reset that layer or
remove that layer.

00:05:45.570 --> 00:05:47.480
But we'll do that automatically
for you if you

00:05:47.480 --> 00:05:49.060
call the withLayer method.

00:05:49.060 --> 00:05:53.480
So today's episode was about
View Property Animator and

00:05:53.480 --> 00:05:55.480
specifically using View Property
Animator to get a

00:05:55.480 --> 00:05:58.310
very easy cross fade operation
between different

00:05:58.310 --> 00:06:00.050
representations of views.

00:06:00.050 --> 00:06:01.300
Thanks.

