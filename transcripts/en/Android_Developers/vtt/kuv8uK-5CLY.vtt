WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.410
[MUSIC PLAYING]

00:00:04.410 --> 00:00:07.620
VINIT MODI: Welcome everyone,
to this session on CameraX.

00:00:07.620 --> 00:00:10.800
My name is Vinit Modi, and
I'm the product manager

00:00:10.800 --> 00:00:14.250
on the Android
camera platform team.

00:00:14.250 --> 00:00:17.640
Today we'll show you how to
minimize the camera development

00:00:17.640 --> 00:00:22.560
time with a consistent and
easy to use camera API.

00:00:22.560 --> 00:00:24.450
We'll have some
code walkthroughs,

00:00:24.450 --> 00:00:26.640
a lot of fun demos,
and we'll end

00:00:26.640 --> 00:00:31.630
by showing how you can elevate
your in-app experiences.

00:00:31.630 --> 00:00:33.610
Now, many of you know this--

00:00:33.610 --> 00:00:36.700
camera development is hard.

00:00:36.700 --> 00:00:39.290
Why is that?

00:00:39.290 --> 00:00:44.760
Within your apps, you need
to account for various OSes.

00:00:44.760 --> 00:00:48.700
Second, you have to provide
a consistent experience

00:00:48.700 --> 00:00:54.250
across a range of devices,
from entry level to flagships.

00:00:54.250 --> 00:00:58.330
And finally, the camera
APIs are very powerful,

00:00:58.330 --> 00:01:01.860
but difficult to master.

00:01:01.860 --> 00:01:04.620
So we're excited to give
you this first glimpse

00:01:04.620 --> 00:01:06.210
into CameraX.

00:01:06.210 --> 00:01:09.630
This [INAUDIBLE] library is
launching as part of Jetpack

00:01:09.630 --> 00:01:11.340
in Alpha.

00:01:11.340 --> 00:01:15.330
We develop completely in
the open, part of an Android

00:01:15.330 --> 00:01:17.010
open-source project.

00:01:17.010 --> 00:01:19.990
We update multiple times a year.

00:01:19.990 --> 00:01:22.600
So let's learn more.

00:01:22.600 --> 00:01:27.100
So CameraX is backwards
compatible to Android L.

00:01:27.100 --> 00:01:30.540
This works with 90% of
devices in the market today.

00:01:33.140 --> 00:01:36.910
So when your target SDK
is API 21 or higher,

00:01:36.910 --> 00:01:38.540
you'll be able to use CameraX.

00:01:41.320 --> 00:01:46.830
Under the hood, CameraX uses
the public Camera2 APIs.

00:01:46.830 --> 00:01:48.930
Now we know what you're
thinking, what about

00:01:48.930 --> 00:01:53.400
the old deprecated Camera1 API?

00:01:53.400 --> 00:01:56.100
So we provide the
same consistency

00:01:56.100 --> 00:01:59.680
as Camera1 via the
Camera2 Legacy Layer.

00:01:59.680 --> 00:02:04.590
We've tested, identified,
and fixed a number of issues

00:02:04.590 --> 00:02:05.805
across these older devices.

00:02:08.509 --> 00:02:11.770
So how do we achieve
this consistent behavior?

00:02:11.770 --> 00:02:15.490
Last summer, I was in China
at the Android GDD event,

00:02:15.490 --> 00:02:18.460
and was shocked to learn
that several developers are

00:02:18.460 --> 00:02:23.180
running manual testing
across hundreds of devices.

00:02:23.180 --> 00:02:25.780
So we understand
your pain, and felt

00:02:25.780 --> 00:02:29.660
that the best way is to invest
in an automated CameraX test

00:02:29.660 --> 00:02:31.180
lab.

00:02:31.180 --> 00:02:35.590
This test lab has devices
from Android L all the way

00:02:35.590 --> 00:02:39.830
through Q, has devices
from various manufacturers,

00:02:39.830 --> 00:02:45.250
and it runs 24 hours a
day, seven days a week.

00:02:45.250 --> 00:02:48.850
By providing an automated
testing experience,

00:02:48.850 --> 00:02:53.230
we're able to guarantee a high
quality camera performance

00:02:53.230 --> 00:02:55.180
across all your apps.

00:02:55.180 --> 00:02:59.620
We've tested hundreds of devices
across all OS layers to date.

00:02:59.620 --> 00:03:02.980
And we do basic testing
like orientation, rotation,

00:03:02.980 --> 00:03:06.180
taking a picture.

00:03:06.180 --> 00:03:08.510
One of this test suite is
the latency test suite.

00:03:08.510 --> 00:03:11.180
And we're open-sourcing
that test suite.

00:03:11.180 --> 00:03:14.300
With this test, you'll be
able to start benchmarking

00:03:14.300 --> 00:03:17.930
your camera start-stop
latencies, your latencies

00:03:17.930 --> 00:03:19.250
for photo capture.

00:03:19.250 --> 00:03:21.500
This is a very powerful
tool that we've

00:03:21.500 --> 00:03:25.298
used very recently with a lot
of the top Android applications.

00:03:27.930 --> 00:03:30.020
Here's just a list
of example issues

00:03:30.020 --> 00:03:35.217
that we've tackled with CameraX,
and we solved on your behalf.

00:03:35.217 --> 00:03:36.800
For example, the
front and back camera

00:03:36.800 --> 00:03:39.620
crashes, optimizing
camera closures,

00:03:39.620 --> 00:03:43.770
or just making sure
that the flash works.

00:03:43.770 --> 00:03:47.080
Now this is our season
premiere of CameraX.

00:03:47.080 --> 00:03:49.770
There are lots and lots
of devices out there.

00:03:49.770 --> 00:03:52.710
So we really hope that
you try out this season--

00:03:52.710 --> 00:03:54.150
you try out this alpha version.

00:03:54.150 --> 00:03:55.650
Give us your feedback.

00:03:55.650 --> 00:03:58.740
And then as we improve, it
will just keep getting better.

00:04:01.850 --> 00:04:04.180
Finally, I want to
talk about how CameraX

00:04:04.180 --> 00:04:06.730
is incredibly easy to use.

00:04:06.730 --> 00:04:10.480
The current Camera2 API gives
you very fine-grain control

00:04:10.480 --> 00:04:12.740
over all the sensors.

00:04:12.740 --> 00:04:15.430
What we have done is
abstracted away the hard bits,

00:04:15.430 --> 00:04:19.029
and provide a use
case based API that

00:04:19.029 --> 00:04:22.570
simply lets you get a
display up on screen,

00:04:22.570 --> 00:04:28.180
gives you high quality frames
so you can do amazing analysis,

00:04:28.180 --> 00:04:32.200
and simply take a
picture or a video.

00:04:32.200 --> 00:04:36.070
Finally, we bind all these use
cases to the app's activity

00:04:36.070 --> 00:04:39.910
lifecycle, making sure that
CameraX is lifecycle aware,

00:04:39.910 --> 00:04:42.820
and you don't have to start
and stop the camera separately

00:04:42.820 --> 00:04:45.176
anymore.

00:04:45.176 --> 00:04:46.154
Awesome.

00:04:50.405 --> 00:04:51.780
So here's the
typical walkthrough

00:04:51.780 --> 00:04:54.540
of the camera app architecture.

00:04:54.540 --> 00:04:57.270
Today your camera app might be
talking to the public Camera2

00:04:57.270 --> 00:04:58.590
API.

00:04:58.590 --> 00:05:00.860
And under the hood, it's
talking to the Device

00:05:00.860 --> 00:05:03.540
HAL, or the hardware
abstraction layer.

00:05:03.540 --> 00:05:06.420
In this case, all the
device-specific quirks

00:05:06.420 --> 00:05:10.450
have to be accounted for
within your application.

00:05:10.450 --> 00:05:13.410
Now let's imagine
you're using CameraX.

00:05:13.410 --> 00:05:17.580
In this case, CameraX
hides all that from you.

00:05:17.580 --> 00:05:21.850
We just give you consistent,
reliable performance.

00:05:21.850 --> 00:05:24.600
Now, there are a lot
of advanced use cases.

00:05:24.600 --> 00:05:27.360
And for that we have an
experimental version,

00:05:27.360 --> 00:05:32.430
where you can inter-operate
between Camera2 and CameraX.

00:05:32.430 --> 00:05:35.640
So let me welcome
Trevor up here on stage.

00:05:35.640 --> 00:05:38.760
We're going to do a demo
on the Camera360 app.

00:05:43.700 --> 00:05:46.400
Now Camera360 is based in China.

00:05:46.400 --> 00:05:49.910
They have hundreds of millions
of installs across Android.

00:05:49.910 --> 00:05:52.190
And only on this stage,
you'll see a demo

00:05:52.190 --> 00:05:55.940
on a 2016 Samsung J7.

00:05:55.940 --> 00:05:59.750
This device is running
Android 6.0 Marshmallow.

00:05:59.750 --> 00:06:03.440
And under the hood, CameraX is
talking to the Camera2 Legacy

00:06:03.440 --> 00:06:04.850
Layer.

00:06:04.850 --> 00:06:06.980
He's able to change
all the effects.

00:06:06.980 --> 00:06:11.280
All this is done using CameraX.

00:06:11.280 --> 00:06:15.810
Now Camera360 is using
all the three use cases--

00:06:15.810 --> 00:06:19.920
preview, image analysis,
and image capture.

00:06:19.920 --> 00:06:22.350
They're using image analysis
to track Trevor's face,

00:06:22.350 --> 00:06:24.160
and draw the effects around it.

00:06:24.160 --> 00:06:27.420
And whenever Trevor is happy
with the picture he likes,

00:06:27.420 --> 00:06:29.390
he clicks the button
and takes a picture.

00:06:33.780 --> 00:06:34.800
It's so easy and fun.

00:06:34.800 --> 00:06:36.480
I want to get in on
the next picture.

00:06:36.480 --> 00:06:37.230
Thank you, Trevor.

00:06:44.250 --> 00:06:48.300
So Camera360 had a number
of benefits with CameraX.

00:06:48.300 --> 00:06:51.630
They were able to reduce
their device-specific testing,

00:06:51.630 --> 00:06:56.580
and saw a 75% reduction in lines
of code compared to Camera2.

00:06:56.580 --> 00:06:59.820
This is in addition to making
the code easier to read,

00:06:59.820 --> 00:07:03.500
and a smaller APK size.

00:07:03.500 --> 00:07:05.140
So let's summarize.

00:07:05.140 --> 00:07:08.650
CameraX is backwards compatible
to Android L, working

00:07:08.650 --> 00:07:11.260
on 90% of devices today.

00:07:11.260 --> 00:07:14.650
We provide a consistent
experience across devices.

00:07:14.650 --> 00:07:18.250
And we test using the
automated CameraX test lab.

00:07:18.250 --> 00:07:21.280
And the API is
incredibly easy to use

00:07:21.280 --> 00:07:23.900
with a use case based approach.

00:07:23.900 --> 00:07:27.380
So up next is James Fung, who
will deep dive into this API.

00:07:27.380 --> 00:07:27.880
Thank you.

00:07:33.378 --> 00:07:34.420
JAMES FUNG: Thanks Vinit.

00:07:34.420 --> 00:07:35.450
My name is James.

00:07:35.450 --> 00:07:39.490
I'm a software engineer
on the CameraX team.

00:07:39.490 --> 00:07:41.270
We talked briefly
about use cases.

00:07:41.270 --> 00:07:46.600
So these were the preview image
analysis and image capture.

00:07:46.600 --> 00:07:48.280
When we sat down
to design CameraX,

00:07:48.280 --> 00:07:51.490
we realized we had to balance
a few design constraints.

00:07:51.490 --> 00:07:55.430
We want to make an API
that's simple to use.

00:07:55.430 --> 00:07:57.610
We want to create an
abstraction level that lets

00:07:57.610 --> 00:08:00.970
us hide device-specific issues.

00:08:00.970 --> 00:08:03.340
We also want to make sure
that the API is flexible

00:08:03.340 --> 00:08:06.978
enough so that you can create
fully featured applications.

00:08:06.978 --> 00:08:08.270
So how did we think about this?

00:08:08.270 --> 00:08:09.270
How do we go about this?

00:08:12.430 --> 00:08:16.060
We figured about creating
a programming model, where

00:08:16.060 --> 00:08:20.300
we really are capturing the
intent of the developer,

00:08:20.300 --> 00:08:22.930
but also providing the
right amount of flexibility.

00:08:22.930 --> 00:08:24.377
So really we have an API--

00:08:24.377 --> 00:08:25.960
and we'll walk through
some examples--

00:08:25.960 --> 00:08:29.380
where we're really asking three
things from the application.

00:08:29.380 --> 00:08:32.870
First, what's the
intended usage?

00:08:32.870 --> 00:08:35.860
Which of the use cases, one or
multiple, do you want to use--

00:08:35.860 --> 00:08:39.429
preview, image analysis,
and image capture.

00:08:39.429 --> 00:08:41.890
Secondly, where
should the output go?

00:08:41.890 --> 00:08:43.688
When you get the
frames, how does that

00:08:43.688 --> 00:08:45.730
hook up to your application
so that you can write

00:08:45.730 --> 00:08:48.350
the code that you need to do?

00:08:48.350 --> 00:08:51.190
And finally, when
should the camera start?

00:08:51.190 --> 00:08:52.998
When should the camera stop?

00:08:52.998 --> 00:08:54.790
So I'm going to walk
through some code now.

00:08:54.790 --> 00:08:56.332
And these examples
will be in Kotlin.

00:08:59.050 --> 00:09:01.420
Say you have a device
at your workstation,

00:09:01.420 --> 00:09:04.540
and you're starting to use
a camera for the first time.

00:09:04.540 --> 00:09:08.410
One of the things you might want
to do is start up that camera,

00:09:08.410 --> 00:09:11.710
and see those live frames
directly on screen.

00:09:11.710 --> 00:09:13.450
We call that preview.

00:09:13.450 --> 00:09:17.610
Let's take a look at what
the code looks like for that.

00:09:17.610 --> 00:09:20.680
We start by
configuring a preview.

00:09:20.680 --> 00:09:26.260
So here I build a preview
config using a builder.

00:09:26.260 --> 00:09:30.370
I'm showing it here, in
its default configuration.

00:09:30.370 --> 00:09:32.950
The default configuration
is actually fairly powerful.

00:09:32.950 --> 00:09:35.960
What this is going to do is
on that particular device,

00:09:35.960 --> 00:09:38.560
it's going to understand
the available resolutions.

00:09:38.560 --> 00:09:41.290
It's also going to understand
the resolution of the display.

00:09:41.290 --> 00:09:43.457
And it's going to try and
make a reasonable decision

00:09:43.457 --> 00:09:45.080
based on that for you.

00:09:45.080 --> 00:09:48.467
It will default also
to the back camera.

00:09:48.467 --> 00:09:50.800
And making sure that the
default configuration runs well

00:09:50.800 --> 00:09:55.090
is an example of something that
we're able to test in our lab.

00:09:55.090 --> 00:09:58.030
Now at this point, you
could set additional options

00:09:58.030 --> 00:09:59.170
if you needed them.

00:09:59.170 --> 00:10:01.500
We'll show some
examples coming up.

00:10:03.757 --> 00:10:05.340
Now that we've
configured the preview,

00:10:05.340 --> 00:10:09.870
we can actually create a
preview use case, simply

00:10:09.870 --> 00:10:11.580
by handing it the config.

00:10:11.580 --> 00:10:13.740
And we'll see if these
use cases actually

00:10:13.740 --> 00:10:15.965
have API specific methods.

00:10:20.680 --> 00:10:25.683
The preview provides a
method to set a listener.

00:10:25.683 --> 00:10:27.100
What's going to
happen now is when

00:10:27.100 --> 00:10:29.420
the preview becomes
active, it's going

00:10:29.420 --> 00:10:33.660
to output a preview output.

00:10:33.660 --> 00:10:36.270
The current version outputs--

00:10:36.270 --> 00:10:37.830
within the preview
output-- a surface

00:10:37.830 --> 00:10:41.520
texture that's
configured and ready.

00:10:41.520 --> 00:10:44.970
You can use a surface texture
to attach to a texture view,

00:10:44.970 --> 00:10:48.330
or use this with a GL renderer.

00:10:48.330 --> 00:10:50.850
Future versions may
interact with surface view,

00:10:50.850 --> 00:10:54.870
or accept the surface
texture from the application.

00:10:54.870 --> 00:10:58.710
Now with this code,
CameraX is configured.

00:10:58.710 --> 00:11:00.960
We just need to be able to
turn it on and turn it off.

00:11:04.570 --> 00:11:06.120
So the third step--

00:11:06.120 --> 00:11:07.800
when should the camera start?

00:11:07.800 --> 00:11:10.410
When should the camera stop?

00:11:10.410 --> 00:11:12.810
We do this by binding
the preview use

00:11:12.810 --> 00:11:16.630
case to an activity lifecycle.

00:11:16.630 --> 00:11:19.155
Now what this means is,
when the activity starts,

00:11:19.155 --> 00:11:21.030
the preview is going to
start, and the camera

00:11:21.030 --> 00:11:22.440
is going to start to stream.

00:11:22.440 --> 00:11:25.200
When the activity stops, the
preview is going to stop.

00:11:25.200 --> 00:11:27.360
The camera's going to shut down.

00:11:27.360 --> 00:11:29.260
Other life cycles
can also be used.

00:11:29.260 --> 00:11:31.290
For example, a
fragment lifecycle

00:11:31.290 --> 00:11:33.030
could be used here instead.

00:11:33.030 --> 00:11:36.150
And in this way, we're able to
hide the complexity of start

00:11:36.150 --> 00:11:36.870
and stop.

00:11:36.870 --> 00:11:39.570
In particular, shutting down
things in the right order

00:11:39.570 --> 00:11:40.530
can be kind of tricky.

00:11:44.840 --> 00:11:49.510
So here, we can see all three
steps being done together.

00:11:49.510 --> 00:11:52.800
Now a real camera application
will have additional code.

00:11:52.800 --> 00:11:54.550
There would need to
be code for setting up

00:11:54.550 --> 00:11:59.470
permission, attaching to
views, and managing the surface

00:11:59.470 --> 00:12:01.050
texture.

00:12:01.050 --> 00:12:02.620
But what we do show
here is actually

00:12:02.620 --> 00:12:05.560
sufficient to get the
camera system setup.

00:12:05.560 --> 00:12:07.930
We've hidden many of
the details of Camera2.

00:12:07.930 --> 00:12:12.040
For example, opening the
camera, creating the session,

00:12:12.040 --> 00:12:16.390
preparing the correct surfaces,
selecting the resolutions,

00:12:16.390 --> 00:12:18.400
and the careful shutdown
that you sometimes

00:12:18.400 --> 00:12:22.060
have to do to make sure that
everything works just right.

00:12:22.060 --> 00:12:23.980
I'll pause here
just for a second,

00:12:23.980 --> 00:12:25.188
so you can look at the slide.

00:12:35.170 --> 00:12:38.372
So let's say you have that
first preview streaming now.

00:12:38.372 --> 00:12:39.830
Maybe the next
thing you want to do

00:12:39.830 --> 00:12:41.850
is be able to access
that camera data

00:12:41.850 --> 00:12:45.052
so you can do some analysis
or image processing on it.

00:12:45.052 --> 00:12:47.510
So for this, we have something
called image analysis, which

00:12:47.510 --> 00:12:50.950
provides easy access to the
buffers from the camera,

00:12:50.950 --> 00:12:52.700
so that you can perform
your own analysis.

00:12:55.382 --> 00:12:56.340
What does it look like?

00:12:56.340 --> 00:12:58.740
It really follows the
same steps that we

00:12:58.740 --> 00:13:00.750
showed with the preview.

00:13:00.750 --> 00:13:04.750
First, we're going to go
ahead and create a config.

00:13:04.750 --> 00:13:06.750
Here I'm going to show
what it looks like to set

00:13:06.750 --> 00:13:09.300
an option on the config.

00:13:09.300 --> 00:13:13.270
In this case, we're going
to request a resolution.

00:13:13.270 --> 00:13:15.240
Now let's say your
processing requires

00:13:15.240 --> 00:13:18.400
some minimum resolution
for it to succeed.

00:13:18.400 --> 00:13:21.750
This is where you
can specify that.

00:13:21.750 --> 00:13:24.300
What CameraX then
is going to do, is

00:13:24.300 --> 00:13:27.330
it's going to balance the
requests from your application

00:13:27.330 --> 00:13:30.100
with the device capability.

00:13:30.100 --> 00:13:32.520
So it's going to look at your
target resolution request

00:13:32.520 --> 00:13:34.140
from the image analysis.

00:13:34.140 --> 00:13:37.530
It's also going to understand
if you have a preview running

00:13:37.530 --> 00:13:38.510
the requirements there.

00:13:38.510 --> 00:13:41.430
And it's going to balance all
that by looking, also, at what

00:13:41.430 --> 00:13:43.432
the device is capable of.

00:13:43.432 --> 00:13:45.390
So if you're able to get
the target resolution,

00:13:45.390 --> 00:13:46.840
you'll get it.

00:13:46.840 --> 00:13:48.990
If not, we'll try next
higher resolution,

00:13:48.990 --> 00:13:51.930
so that you can get
some guaranteed minimum.

00:13:51.930 --> 00:13:54.420
Failing that, we will
fall back to a 640

00:13:54.420 --> 00:13:58.560
by 480 resolution, which is
guaranteed across all devices.

00:13:58.560 --> 00:14:00.540
The key thing here
being that CameraX

00:14:00.540 --> 00:14:02.550
is doing everything
it can to make sure

00:14:02.550 --> 00:14:04.963
on that particular device,
it's setting up a session

00:14:04.963 --> 00:14:05.880
that will run for you.

00:14:09.113 --> 00:14:11.530
Once we have the config, again,
we can go ahead and create

00:14:11.530 --> 00:14:12.810
the use case, object itself.

00:14:18.590 --> 00:14:22.470
Step two-- what do we
do with the output?

00:14:22.470 --> 00:14:24.500
Now in the case
of image analysis,

00:14:24.500 --> 00:14:29.140
it lets your application
set an analyzer.

00:14:29.140 --> 00:14:33.270
The analyzer is
provided an image proxy.

00:14:33.270 --> 00:14:35.270
This is a CameraX abstraction.

00:14:35.270 --> 00:14:38.850
But basically is wrapping an
Android and media image class.

00:14:38.850 --> 00:14:42.800
So you have the same access
to the same data there.

00:14:42.800 --> 00:14:45.440
You'll notice we also have
a rotation parameter that's

00:14:45.440 --> 00:14:46.850
set here.

00:14:46.850 --> 00:14:48.350
We understand
rotation can be really

00:14:48.350 --> 00:14:51.070
important for image analysis.

00:14:51.070 --> 00:14:53.600
Now CameraX is not going to
rotate the data internally

00:14:53.600 --> 00:14:56.510
because we know if you're
going to do an analysis pass,

00:14:56.510 --> 00:14:58.700
maybe you're doing a
per pixel pass already.

00:14:58.700 --> 00:15:00.290
And it might be more
efficient for you

00:15:00.290 --> 00:15:03.110
to do the rotation in
place, if you wanted.

00:15:03.110 --> 00:15:04.825
Rather, what we mean
by rotation here,

00:15:04.825 --> 00:15:06.950
is we're going to make it
easy for your application

00:15:06.950 --> 00:15:10.370
to understand which way
is up in that image buffer

00:15:10.370 --> 00:15:13.280
that you've received.

00:15:13.280 --> 00:15:15.480
Knowing which way is
up can be important.

00:15:15.480 --> 00:15:17.570
For example, if you're
doing a face detection.

00:15:17.570 --> 00:15:19.010
Perhaps your face
detection model

00:15:19.010 --> 00:15:24.860
requires knowledge of which way
is up for it to work correctly.

00:15:24.860 --> 00:15:26.460
And it's inside
the analyzer then

00:15:26.460 --> 00:15:28.020
that you have all
this information.

00:15:28.020 --> 00:15:30.760
You have the image
available to you.

00:15:30.760 --> 00:15:32.520
And you can actually
insert the code

00:15:32.520 --> 00:15:34.240
that you need to
get your job done.

00:15:37.820 --> 00:15:41.390
Finally, step three--
when to start and stop.

00:15:41.390 --> 00:15:43.680
Here again, we buy
into a life cycle.

00:15:43.680 --> 00:15:47.870
So this is an example, now, of
finding both an image analysis

00:15:47.870 --> 00:15:49.910
and a preview at the same time.

00:15:49.910 --> 00:15:54.020
Now what this means is, when
the activity becomes active,

00:15:54.020 --> 00:15:56.720
both image analysis
and preview will

00:15:56.720 --> 00:15:58.730
be running at the
same time and ready.

00:16:01.890 --> 00:16:04.490
So here we have, again, all
three of the steps together

00:16:04.490 --> 00:16:06.290
for the image analysis.

00:16:06.290 --> 00:16:09.470
What's going to happen now is
when the camera system sets up,

00:16:09.470 --> 00:16:11.180
that preview is
going to come up.

00:16:11.180 --> 00:16:12.710
But also your
analyzer function is

00:16:12.710 --> 00:16:15.707
going to start to receive
images at the camera frame rate,

00:16:15.707 --> 00:16:17.540
and your analysis is
going to start running.

00:16:21.930 --> 00:16:25.600
I'm really proud to say
that we partnered with Lens.

00:16:25.600 --> 00:16:29.910
And CameraX is being used
inside Lens in Google Go.

00:16:29.910 --> 00:16:31.750
Lens in Google Go
is a version of Lens

00:16:31.750 --> 00:16:33.880
intended to target
low-end devices that

00:16:33.880 --> 00:16:37.460
helps users understand text.

00:16:37.460 --> 00:16:39.610
Some of the benefits
they expressed to us

00:16:39.610 --> 00:16:42.700
was that it allowed them
to focus on their core

00:16:42.700 --> 00:16:44.890
competency--
understanding the text,

00:16:44.890 --> 00:16:48.340
and creating a really
great user experience.

00:16:48.340 --> 00:16:51.640
They were able to spend less
time worried about the camera

00:16:51.640 --> 00:16:52.420
stack.

00:16:52.420 --> 00:16:54.910
They were happy that they
found that CameraX just

00:16:54.910 --> 00:16:58.950
worked on a diversity
of low-end devices.

00:16:58.950 --> 00:17:03.940
Lens in Google Go also has
a tight APK budget size.

00:17:03.940 --> 00:17:05.915
With one of our
early builds, they

00:17:05.915 --> 00:17:07.540
were able to integrate
the camera stack

00:17:07.540 --> 00:17:10.774
into their application for
less than 30 kilobytes.

00:17:17.230 --> 00:17:20.200
Image capture allows you
to take a high quality

00:17:20.200 --> 00:17:23.150
picture with the camera.

00:17:23.150 --> 00:17:25.069
Inside image
capture, we do things

00:17:25.069 --> 00:17:29.750
like implement focus control,
handle auto exposure,

00:17:29.750 --> 00:17:31.460
and handle auto white balance--

00:17:31.460 --> 00:17:33.890
sometimes called 3A.

00:17:33.890 --> 00:17:35.840
Additionally, within
image capture,

00:17:35.840 --> 00:17:39.320
we're able to optimize capture
requests on a per device

00:17:39.320 --> 00:17:42.288
basis, if necessary.

00:17:42.288 --> 00:17:43.995
Let's take a look
at how that looks.

00:17:43.995 --> 00:17:46.370
It's going to follow the same
pattern as our previous use

00:17:46.370 --> 00:17:48.510
cases.

00:17:48.510 --> 00:17:51.290
So first, we create a config.

00:17:54.760 --> 00:17:59.650
Now we know getting rotation
on devices can be tricky.

00:17:59.650 --> 00:18:01.510
Getting portrait
mode and landscape

00:18:01.510 --> 00:18:05.290
mode just right on a
variety of devices is hard.

00:18:05.290 --> 00:18:07.900
What we've done here
is reduce the problem

00:18:07.900 --> 00:18:10.720
to having the application
specify its current display

00:18:10.720 --> 00:18:12.080
rotation.

00:18:12.080 --> 00:18:14.768
What's going to happen now
is internally inside CameraX,

00:18:14.768 --> 00:18:16.810
we're going to look at
the rest of the transforms

00:18:16.810 --> 00:18:19.270
on the device, and make
sure that our output is

00:18:19.270 --> 00:18:21.590
doing the right thing
for your application.

00:18:21.590 --> 00:18:23.688
For example, in the
case of image capture,

00:18:23.688 --> 00:18:25.730
we're going to have a
standard set of transforms,

00:18:25.730 --> 00:18:28.147
and we're going to make sure
that the [INAUDIBLE] metadata

00:18:28.147 --> 00:18:29.302
is set correctly.

00:18:32.417 --> 00:18:34.250
Then we go ahead and
create the actual image

00:18:34.250 --> 00:18:36.530
capture use case itself.

00:18:39.230 --> 00:18:41.557
Then we bind to the
lifecycle, as before.

00:18:41.557 --> 00:18:43.640
Now here's an example of
binding all the three use

00:18:43.640 --> 00:18:46.882
cases together-- preview,
image analysis, and now

00:18:46.882 --> 00:18:47.465
image capture.

00:18:50.630 --> 00:18:53.490
Again, here's the code to
set up the image capture.

00:18:53.490 --> 00:18:55.610
And so now when the
activity starts,

00:18:55.610 --> 00:18:57.810
the preview is going
to come on screen.

00:18:57.810 --> 00:18:59.960
If you have any analysis,
it'll be running.

00:18:59.960 --> 00:19:03.790
And your application is
ready to take a picture.

00:19:03.790 --> 00:19:05.590
But what about step two?

00:19:05.590 --> 00:19:09.020
What about attaching
that output?

00:19:09.020 --> 00:19:13.630
It's another example of the
use case specific method.

00:19:13.630 --> 00:19:16.960
So for taking a picture,
it might be pretty common

00:19:16.960 --> 00:19:19.330
that the user would
tap on screen.

00:19:19.330 --> 00:19:20.920
That would activate
a button click.

00:19:20.920 --> 00:19:23.760
And perhaps that button click
would call into some function.

00:19:23.760 --> 00:19:26.158
Let's say, onClick.

00:19:26.158 --> 00:19:27.700
So when the user
clicks a button now,

00:19:27.700 --> 00:19:28.825
this can invoke a function.

00:19:28.825 --> 00:19:30.700
And within that
function, you can simply

00:19:30.700 --> 00:19:33.790
call imageCapture takePicture.

00:19:33.790 --> 00:19:36.110
Here, I show first
preparing a file.

00:19:36.110 --> 00:19:38.313
And this will be the
destination of the image.

00:19:38.313 --> 00:19:40.480
And then simply calling the
imageCapture takePicture

00:19:40.480 --> 00:19:40.980
function.

00:19:44.040 --> 00:19:45.540
With that take
picture function, you

00:19:45.540 --> 00:19:49.390
can then specify the target
destination-- the file itself.

00:19:49.390 --> 00:19:52.380
You can also specify what to
do after the image is captured

00:19:52.380 --> 00:19:53.850
by specifying a listener.

00:19:53.850 --> 00:19:55.860
You can specify
what to do on error,

00:19:55.860 --> 00:19:58.260
or what to do after the
image has been saved.

00:20:03.180 --> 00:20:07.830
Really happy that we've been
able to partner with a company

00:20:07.830 --> 00:20:11.050
called Snow, and we'll be
able to demo that today.

00:20:11.050 --> 00:20:13.712
So Snow is an application.

00:20:13.712 --> 00:20:14.670
They're based in Korea.

00:20:14.670 --> 00:20:17.640
And have a really large
multi-million user

00:20:17.640 --> 00:20:19.640
install base.

00:20:19.640 --> 00:20:22.080
So Trevor is going to
help us demo this again.

00:20:25.920 --> 00:20:29.523
So Snow is a really fun
app for taking selfies.

00:20:29.523 --> 00:20:30.940
And we're going
to show this demo.

00:20:30.940 --> 00:20:34.420
This is running
on a Samsung S10+.

00:20:34.420 --> 00:20:36.180
And we're showing
all the different use

00:20:36.180 --> 00:20:37.530
cases we talked about.

00:20:37.530 --> 00:20:40.670
We're showing preview to
get the image on screen.

00:20:40.670 --> 00:20:44.910
We're showing image
analysis to detect the face.

00:20:44.910 --> 00:20:46.797
And then also
render an overlay--

00:20:46.797 --> 00:20:48.630
and then the whole gang
is going to come up.

00:20:48.630 --> 00:20:50.240
And finally, when we're ready--

00:20:50.240 --> 00:20:52.260
and see if we can get
a picture of that we

00:20:52.260 --> 00:20:55.150
like with all the foxes.

00:20:55.150 --> 00:20:58.230
When we're ready,
we can even go ahead

00:20:58.230 --> 00:20:59.760
and use the image capture.

00:20:59.760 --> 00:21:02.750
And that'll take a photo.

00:21:02.750 --> 00:21:04.944
Thanks, guys.

00:21:04.944 --> 00:21:09.654
[APPLAUSE]

00:21:11.070 --> 00:21:13.490
So this is a great example
with what we have today--

00:21:13.490 --> 00:21:15.480
of using all these
three use cases together

00:21:15.480 --> 00:21:18.467
to create a fully
featured application

00:21:18.467 --> 00:21:19.425
for taking fun selfies.

00:21:22.583 --> 00:21:24.000
Working with Snow--
they expressed

00:21:24.000 --> 00:21:25.583
some of the benefits
of CameraX to us.

00:21:25.583 --> 00:21:28.640
They found it was easy to use.

00:21:28.640 --> 00:21:31.900
They appreciated that we
managed the camera lifecycle.

00:21:31.900 --> 00:21:34.180
They also appreciated that
we handled camera threading

00:21:34.180 --> 00:21:37.630
internally to CameraX, without
the need for them to have

00:21:37.630 --> 00:21:39.207
that in their application.

00:21:41.830 --> 00:21:44.880
So in summary, we've talked
about the use cases-- preview,

00:21:44.880 --> 00:21:48.070
image analysis, image capture.

00:21:48.070 --> 00:21:52.660
We talked about our program
model built around three steps.

00:21:52.660 --> 00:21:55.090
And with just preview
and image analysis,

00:21:55.090 --> 00:21:57.890
we talked about how that
can make things easier.

00:21:57.890 --> 00:22:01.480
For example, for ML--
hooking up to ML--

00:22:01.480 --> 00:22:05.570
by showing an example
using Lens in Google Go.

00:22:05.570 --> 00:22:07.615
And finally, we've shown
that what we have today

00:22:07.615 --> 00:22:09.490
is actually flexible
enough to create a fully

00:22:09.490 --> 00:22:12.890
featured camera-based
application.

00:22:12.890 --> 00:22:15.320
Now what I've shown today
is a starting point.

00:22:15.320 --> 00:22:16.870
This is a glimpse
into the direction

00:22:16.870 --> 00:22:19.090
we're taking with camera API.

00:22:19.090 --> 00:22:21.190
But it's available
today, and I'm really

00:22:21.190 --> 00:22:23.230
happy to have you
guys try it out.

00:22:23.230 --> 00:22:23.730
Thanks.

00:22:32.270 --> 00:22:33.800
VINIT MODI: Thanks James.

00:22:33.800 --> 00:22:36.340
So we have one more
thing to talk about.

00:22:36.340 --> 00:22:39.740
There are many new camera
capabilities that are typically

00:22:39.740 --> 00:22:42.080
part of the native camera app.

00:22:42.080 --> 00:22:50.750
For example, Portrait,
Night, HDR, and Beauty.

00:22:50.750 --> 00:22:54.320
We've heard from many of you
wanting access to these device

00:22:54.320 --> 00:22:56.090
specific capabilities.

00:22:56.090 --> 00:23:00.080
And we're excited to share
that CameraX extensions enables

00:23:00.080 --> 00:23:00.650
just that.

00:23:03.440 --> 00:23:06.260
We've partnered with some
of the top manufacturers

00:23:06.260 --> 00:23:07.670
across the world--

00:23:07.670 --> 00:23:12.320
from Samsung, Huawei,
LG, and Motorola.

00:23:12.320 --> 00:23:15.590
And you'll start seeing devices
supporting these extensions

00:23:15.590 --> 00:23:18.140
this summer.

00:23:18.140 --> 00:23:22.910
With Huawei, you'll be able
to see the HDR and Portrait

00:23:22.910 --> 00:23:26.510
effects on four existing
device models that

00:23:26.510 --> 00:23:30.520
will be upgrading this summer.

00:23:30.520 --> 00:23:33.580
And best of all, it's
two lines of code.

00:23:33.580 --> 00:23:37.240
If a device doesn't support
any specific functionality,

00:23:37.240 --> 00:23:40.900
then the Boolean returns
us false, and it's a no-op.

00:23:40.900 --> 00:23:45.280
There's no manufacturer specific
coding required on your part.

00:23:45.280 --> 00:23:47.770
CameraX handles all
of that for you.

00:23:54.030 --> 00:23:58.990
So we're excited to show you
a demo on the Samsung S10+.

00:23:58.990 --> 00:24:01.040
So I'll welcome Franklin
back up on stage.

00:24:06.150 --> 00:24:08.250
So this app that
Franklin is running,

00:24:08.250 --> 00:24:11.730
is the CameraX sample app.

00:24:11.730 --> 00:24:15.300
What Franklin is going to
do is take two images--

00:24:15.300 --> 00:24:18.150
a picture with the normal
mode, and a picture

00:24:18.150 --> 00:24:20.090
with the HDR mode.

00:24:20.090 --> 00:24:21.465
And let's compare
the two images.

00:24:23.990 --> 00:24:28.870
So in the HDR image, you'll
see that the light that's

00:24:28.870 --> 00:24:31.990
coming out of the glass
door is actually better.

00:24:31.990 --> 00:24:37.360
The podium here is quite
dark in the normal picture,

00:24:37.360 --> 00:24:41.020
but it's more lighted
up in the HDR picture.

00:24:41.020 --> 00:24:44.800
So all of these functionalities
can be added very simply

00:24:44.800 --> 00:24:45.947
within your application.

00:24:45.947 --> 00:24:46.780
Thank you, Franklin.

00:24:55.450 --> 00:25:01.030
So here's a picture comparison
of images taken using CameraX.

00:25:01.030 --> 00:25:03.130
On the left, you'll see HDR off.

00:25:03.130 --> 00:25:06.260
And on the right,
you'll see HDR on.

00:25:06.260 --> 00:25:07.720
And we have one more.

00:25:07.720 --> 00:25:10.120
Samsung will be the
first manufacturer

00:25:10.120 --> 00:25:12.910
to bring night mode
images to developers.

00:25:16.720 --> 00:25:20.860
On the left, you'll see an
image in low light conditions.

00:25:20.860 --> 00:25:22.000
And it's grainy.

00:25:22.000 --> 00:25:24.400
But on the right, with
the night mode enabled,

00:25:24.400 --> 00:25:25.900
that image is sharp.

00:25:25.900 --> 00:25:27.790
The colors are more vivid.

00:25:27.790 --> 00:25:31.090
And imagine the experiences
that you can bring to your users

00:25:31.090 --> 00:25:35.380
when you enable
these extensions.

00:25:35.380 --> 00:25:38.360
So we have one more demo.

00:25:38.360 --> 00:25:42.220
This demo is the
app YouCam Perfect.

00:25:42.220 --> 00:25:46.030
It's a camera-first application
based in Taiwan with hundreds

00:25:46.030 --> 00:25:49.060
of millions of installs.

00:25:49.060 --> 00:25:53.200
This demo is on the
Huawei Mate 20 Pro.

00:25:53.200 --> 00:25:55.300
And it's running the
camera extensions

00:25:55.300 --> 00:25:59.330
both in the viewfinder,
and in an image capture.

00:25:59.330 --> 00:26:03.470
So let's jump to the phone mode.

00:26:03.470 --> 00:26:04.780
Oh, it's showing the desktop.

00:26:11.267 --> 00:26:12.265
There you go.

00:26:14.770 --> 00:26:16.450
Perfect.

00:26:16.450 --> 00:26:21.880
So in the app, all it's using
is two lines of code for CameraX

00:26:21.880 --> 00:26:24.610
to enable the extensions.

00:26:24.610 --> 00:26:27.520
And you'll see that behind
me, the effect is actually

00:26:27.520 --> 00:26:28.630
blurred out.

00:26:28.630 --> 00:26:30.360
So let's try a glam shot.

00:26:35.170 --> 00:26:37.460
Cool.

00:26:37.460 --> 00:26:43.010
So underneath, it's
using all the device

00:26:43.010 --> 00:26:44.310
specific capabilities.

00:26:44.310 --> 00:26:47.210
There's no computational
photography

00:26:47.210 --> 00:26:48.750
that YouCam had to do.

00:26:48.750 --> 00:26:51.860
So this type of
behavior can be enabled

00:26:51.860 --> 00:26:54.900
in all your applications.

00:26:54.900 --> 00:26:55.400
Thank you.

00:27:03.310 --> 00:27:05.770
So here are some of the
benefits that YouCam expressed

00:27:05.770 --> 00:27:07.730
to us when using CameraX.

00:27:07.730 --> 00:27:10.300
They get access to a
lot of new features

00:27:10.300 --> 00:27:12.830
that are the same as
the native camera app.

00:27:12.830 --> 00:27:17.060
And the best of all, it still
reduces the lines of code.

00:27:17.060 --> 00:27:20.680
It's 70% fewer lines of
code compared to Camera2--

00:27:20.680 --> 00:27:24.700
all of this on top of getting
a consistent experience

00:27:24.700 --> 00:27:27.040
across devices, and
an easy to use API.

00:27:29.750 --> 00:27:32.540
So let's recap what we've talked
about in this session today.

00:27:35.060 --> 00:27:38.510
CameraX is backwards compatible
to Android L, working

00:27:38.510 --> 00:27:42.980
with 90% of devices on market,
provides a consistent behavior

00:27:42.980 --> 00:27:44.990
across a number
of devices, and we

00:27:44.990 --> 00:27:48.500
do a lot of the testing for you
with an automated CameraX test

00:27:48.500 --> 00:27:49.940
lab.

00:27:49.940 --> 00:27:54.590
The API is easy to use
and lifecycle aware.

00:27:54.590 --> 00:27:57.780
And finally, with the new
extensions capabilities,

00:27:57.780 --> 00:28:01.880
you'll be able to try a lot of
new effects on newer devices.

00:28:01.880 --> 00:28:04.880
We sincerely hope that this
is the API and the changes

00:28:04.880 --> 00:28:06.050
that you're looking for.

00:28:06.050 --> 00:28:10.260
And we really value and look
forward to your feedback.

00:28:10.260 --> 00:28:12.710
I want to thank some of the
early developers that are

00:28:12.710 --> 00:28:14.810
partnered with us on CameraX.

00:28:14.810 --> 00:28:18.140
And they've provided us a lot
of guidance and constructive

00:28:18.140 --> 00:28:20.880
feedback.

00:28:20.880 --> 00:28:24.000
So you can download
CameraX today.

00:28:24.000 --> 00:28:25.830
You can add it into
your application,

00:28:25.830 --> 00:28:27.990
just like other
Jetpack libraries.

00:28:27.990 --> 00:28:30.000
And please share your
feedback with us,

00:28:30.000 --> 00:28:31.920
either by joining
the Google Group,

00:28:31.920 --> 00:28:34.710
or tagging us on Stack Overflow.

00:28:34.710 --> 00:28:36.660
You can meet us in the Sandbox.

00:28:36.660 --> 00:28:39.420
You'll be able to see some of
the live demos that we did,

00:28:39.420 --> 00:28:41.220
also in the Sandbox.

00:28:41.220 --> 00:28:44.550
Or you can reach us in
office hours tomorrow.

00:28:44.550 --> 00:28:46.470
So thank you very
much for attending.

00:28:46.470 --> 00:28:51.020
[MUSIC PLAYING]

