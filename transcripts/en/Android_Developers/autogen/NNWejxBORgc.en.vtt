WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.610
[Music]

00:00:06.610 --> 00:00:06.620
[Music]
 

00:00:06.620 --> 00:00:09.650
[Music]
hello everyone my name is Reina Montanez

00:00:09.650 --> 00:00:09.660
hello everyone my name is Reina Montanez
 

00:00:09.660 --> 00:00:11.180
hello everyone my name is Reina Montanez
Khan and I'm on a developer advocate at

00:00:11.180 --> 00:00:11.190
Khan and I'm on a developer advocate at
 

00:00:11.190 --> 00:00:13.879
Khan and I'm on a developer advocate at
Google so in the last few months

00:00:13.879 --> 00:00:13.889
Google so in the last few months
 

00:00:13.889 --> 00:00:15.289
Google so in the last few months
together with three of my colleagues

00:00:15.289 --> 00:00:15.299
together with three of my colleagues
 

00:00:15.299 --> 00:00:17.390
together with three of my colleagues
we've been working on bringing plants

00:00:17.390 --> 00:00:17.400
we've been working on bringing plants
 

00:00:17.400 --> 00:00:21.140
we've been working on bringing plants
back in fashion so more precisely plan

00:00:21.140 --> 00:00:21.150
back in fashion so more precisely plan
 

00:00:21.150 --> 00:00:22.820
back in fashion so more precisely plan
is an application that was initially

00:00:22.820 --> 00:00:22.830
is an application that was initially
 

00:00:22.830 --> 00:00:24.980
is an application that was initially
developed by my colleague Nick butcher

00:00:24.980 --> 00:00:24.990
developed by my colleague Nick butcher
 

00:00:24.990 --> 00:00:27.500
developed by my colleague Nick butcher
as a way of showcasing material design

00:00:27.500 --> 00:00:27.510
as a way of showcasing material design
 

00:00:27.510 --> 00:00:29.929
as a way of showcasing material design
and what you see here is actually the

00:00:29.929 --> 00:00:29.939
and what you see here is actually the
 

00:00:29.939 --> 00:00:32.840
and what you see here is actually the
state of the app in 2016 when was pretty

00:00:32.840 --> 00:00:32.850
state of the app in 2016 when was pretty
 

00:00:32.850 --> 00:00:36.799
state of the app in 2016 when was pretty
much as iPods glory days so Nick used

00:00:36.799 --> 00:00:36.809
much as iPods glory days so Nick used
 

00:00:36.809 --> 00:00:38.690
much as iPods glory days so Nick used
here a lot of the API is from the

00:00:38.690 --> 00:00:38.700
here a lot of the API is from the
 

00:00:38.700 --> 00:00:41.060
here a lot of the API is from the
animations transitions animated vector

00:00:41.060 --> 00:00:41.070
animations transitions animated vector
 

00:00:41.070 --> 00:00:43.430
animations transitions animated vector
drawables so all of these really made

00:00:43.430 --> 00:00:43.440
drawables so all of these really made
 

00:00:43.440 --> 00:00:45.680
drawables so all of these really made
the app shine they really improved the

00:00:45.680 --> 00:00:45.690
the app shine they really improved the
 

00:00:45.690 --> 00:00:46.970
the app shine they really improved the
user experience

00:00:46.970 --> 00:00:46.980
user experience
 

00:00:46.980 --> 00:00:50.240
user experience
so what integrates data from three

00:00:50.240 --> 00:00:50.250
so what integrates data from three
 

00:00:50.250 --> 00:00:53.930
so what integrates data from three
different sources and well these sources

00:00:53.930 --> 00:00:53.940
different sources and well these sources
 

00:00:53.940 --> 00:00:57.500
different sources and well these sources
from 2016 until now well some of them

00:00:57.500 --> 00:00:57.510
from 2016 until now well some of them
 

00:00:57.510 --> 00:01:01.220
from 2016 until now well some of them
were deprecated so that meant that out

00:01:01.220 --> 00:01:01.230
were deprecated so that meant that out
 

00:01:01.230 --> 00:01:03.619
were deprecated so that meant that out
of three sources we were left with one

00:01:03.619 --> 00:01:03.629
of three sources we were left with one
 

00:01:03.629 --> 00:01:07.160
of three sources we were left with one
and a little bit so from all these nice

00:01:07.160 --> 00:01:07.170
and a little bit so from all these nice
 

00:01:07.170 --> 00:01:10.789
and a little bit so from all these nice
fancy UI features that we had well we

00:01:10.789 --> 00:01:10.799
fancy UI features that we had well we
 

00:01:10.799 --> 00:01:13.310
fancy UI features that we had well we
were left with almost nothing we were

00:01:13.310 --> 00:01:13.320
were left with almost nothing we were
 

00:01:13.320 --> 00:01:15.429
were left with almost nothing we were
left with a pretty boring application

00:01:15.429 --> 00:01:15.439
left with a pretty boring application
 

00:01:15.439 --> 00:01:17.330
left with a pretty boring application
somebody aside we didn't wanna leave it

00:01:17.330 --> 00:01:17.340
somebody aside we didn't wanna leave it
 

00:01:17.340 --> 00:01:19.730
somebody aside we didn't wanna leave it
like this and we said that we wanted to

00:01:19.730 --> 00:01:19.740
like this and we said that we wanted to
 

00:01:19.740 --> 00:01:23.810
like this and we said that we wanted to
fix this broken functionality but apart

00:01:23.810 --> 00:01:23.820
fix this broken functionality but apart
 

00:01:23.820 --> 00:01:26.120
fix this broken functionality but apart
from this we also knew that we wanted to

00:01:26.120 --> 00:01:26.130
from this we also knew that we wanted to
 

00:01:26.130 --> 00:01:28.240
from this we also knew that we wanted to
go towards something that's modular and

00:01:28.240 --> 00:01:28.250
go towards something that's modular and
 

00:01:28.250 --> 00:01:30.350
go towards something that's modular and
extensible from the architecture point

00:01:30.350 --> 00:01:30.360
extensible from the architecture point
 

00:01:30.360 --> 00:01:33.410
extensible from the architecture point
of view but the thing is that plant was

00:01:33.410 --> 00:01:33.420
of view but the thing is that plant was
 

00:01:33.420 --> 00:01:36.710
of view but the thing is that plant was
developed as a UI sample not not as an

00:01:36.710 --> 00:01:36.720
developed as a UI sample not not as an
 

00:01:36.720 --> 00:01:39.590
developed as a UI sample not not as an
architecture sample so you won't be

00:01:39.590 --> 00:01:39.600
architecture sample so you won't be
 

00:01:39.600 --> 00:01:41.390
architecture sample so you won't be
surprised to see all the tied

00:01:41.390 --> 00:01:41.400
surprised to see all the tied
 

00:01:41.400 --> 00:01:44.830
surprised to see all the tied
dependencies in the in the code and well

00:01:44.830 --> 00:01:44.840
dependencies in the in the code and well
 

00:01:44.840 --> 00:01:47.990
dependencies in the in the code and well
code that was actually a bit behind

00:01:47.990 --> 00:01:48.000
code that was actually a bit behind
 

00:01:48.000 --> 00:01:50.450
code that was actually a bit behind
because Nick started building this in

00:01:50.450 --> 00:01:50.460
because Nick started building this in
 

00:01:50.460 --> 00:01:53.990
because Nick started building this in
2014 at that time we didn't had the guy

00:01:53.990 --> 00:01:54.000
2014 at that time we didn't had the guy
 

00:01:54.000 --> 00:01:55.819
2014 at that time we didn't had the guy
to help architects sure that we released

00:01:55.819 --> 00:01:55.829
to help architects sure that we released
 

00:01:55.829 --> 00:01:58.310
to help architects sure that we released
last year and also although we have

00:01:58.310 --> 00:01:58.320
last year and also although we have
 

00:01:58.320 --> 00:02:00.770
last year and also although we have
caught him we didn't really use it so we

00:02:00.770 --> 00:02:00.780
caught him we didn't really use it so we
 

00:02:00.780 --> 00:02:03.230
caught him we didn't really use it so we
knew that I wanted to rebuild plants but

00:02:03.230 --> 00:02:03.240
knew that I wanted to rebuild plants but
 

00:02:03.240 --> 00:02:04.959
knew that I wanted to rebuild plants but
we wanted to rebuild it in the right way

00:02:04.959 --> 00:02:04.969
we wanted to rebuild it in the right way
 

00:02:04.969 --> 00:02:07.639
we wanted to rebuild it in the right way
to have it in a good state for any

00:02:07.639 --> 00:02:07.649
to have it in a good state for any
 

00:02:07.649 --> 00:02:09.639
to have it in a good state for any
future changes that we wanted to build

00:02:09.639 --> 00:02:09.649
future changes that we wanted to build
 

00:02:09.649 --> 00:02:12.680
future changes that we wanted to build
so in this talk I want to tell you what

00:02:12.680 --> 00:02:12.690
so in this talk I want to tell you what
 

00:02:12.690 --> 00:02:13.460
so in this talk I want to tell you what
we've

00:02:13.460 --> 00:02:13.470
we've
 

00:02:13.470 --> 00:02:15.680
we've
and also how we were managed how we

00:02:15.680 --> 00:02:15.690
and also how we were managed how we
 

00:02:15.690 --> 00:02:18.820
and also how we were managed how we
managed to leverage causing in our app

00:02:18.820 --> 00:02:18.830
managed to leverage causing in our app
 

00:02:18.830 --> 00:02:22.430
managed to leverage causing in our app
so we release this opinionated guy to

00:02:22.430 --> 00:02:22.440
so we release this opinionated guy to
 

00:02:22.440 --> 00:02:24.800
so we release this opinionated guy to
the of architecture but if you read it

00:02:24.800 --> 00:02:24.810
the of architecture but if you read it
 

00:02:24.810 --> 00:02:26.900
the of architecture but if you read it
you'll see that it's also still quite

00:02:26.900 --> 00:02:26.910
you'll see that it's also still quite
 

00:02:26.910 --> 00:02:30.050
you'll see that it's also still quite
vague so we have these like main classes

00:02:30.050 --> 00:02:30.060
vague so we have these like main classes
 

00:02:30.060 --> 00:02:31.910
vague so we have these like main classes
some idea of how we should architect our

00:02:31.910 --> 00:02:31.920
some idea of how we should architect our
 

00:02:31.920 --> 00:02:34.520
some idea of how we should architect our
app but we decided we want to create

00:02:34.520 --> 00:02:34.530
app but we decided we want to create
 

00:02:34.530 --> 00:02:37.250
app but we decided we want to create
some clear guidelines so we defined some

00:02:37.250 --> 00:02:37.260
some clear guidelines so we defined some
 

00:02:37.260 --> 00:02:39.980
some clear guidelines so we defined some
main types of classes in our app and we

00:02:39.980 --> 00:02:39.990
main types of classes in our app and we
 

00:02:39.990 --> 00:02:42.470
main types of classes in our app and we
also define a set of rules for each of

00:02:42.470 --> 00:02:42.480
also define a set of rules for each of
 

00:02:42.480 --> 00:02:44.390
also define a set of rules for each of
these classes so let's see which ones

00:02:44.390 --> 00:02:44.400
these classes so let's see which ones
 

00:02:44.400 --> 00:02:47.480
these classes so let's see which ones
these were so we define a remote data

00:02:47.480 --> 00:02:47.490
these were so we define a remote data
 

00:02:47.490 --> 00:02:49.850
these were so we define a remote data
source whose role is actually to just

00:02:49.850 --> 00:02:49.860
source whose role is actually to just
 

00:02:49.860 --> 00:02:52.160
source whose role is actually to just
construct the request data fetch the

00:02:52.160 --> 00:02:52.170
construct the request data fetch the
 

00:02:52.170 --> 00:02:54.380
construct the request data fetch the
data from the from the API service and

00:02:54.380 --> 00:02:54.390
data from the from the API service and
 

00:02:54.390 --> 00:02:57.050
data from the from the API service and
that's it if it only request the

00:02:57.050 --> 00:02:57.060
that's it if it only request the
 

00:02:57.060 --> 00:02:59.240
that's it if it only request the
information and return the response

00:02:59.240 --> 00:02:59.250
information and return the response
 

00:02:59.250 --> 00:03:02.780
information and return the response
received next we would have a local data

00:03:02.780 --> 00:03:02.790
received next we would have a local data
 

00:03:02.790 --> 00:03:05.210
received next we would have a local data
source whose role is just to store data

00:03:05.210 --> 00:03:05.220
source whose role is just to store data
 

00:03:05.220 --> 00:03:07.850
source whose role is just to store data
on this so it would either do this and

00:03:07.850 --> 00:03:07.860
on this so it would either do this and
 

00:03:07.860 --> 00:03:11.020
on this so it would either do this and
share preferences or in the database

00:03:11.020 --> 00:03:11.030
share preferences or in the database
 

00:03:11.030 --> 00:03:14.600
share preferences or in the database
next I would have the repository whose

00:03:14.600 --> 00:03:14.610
next I would have the repository whose
 

00:03:14.610 --> 00:03:18.190
next I would have the repository whose
role is to fetch ants and store data and

00:03:18.190 --> 00:03:18.200
role is to fetch ants and store data and
 

00:03:18.200 --> 00:03:20.750
role is to fetch ants and store data and
optionally it could also do in-memory

00:03:20.750 --> 00:03:20.760
optionally it could also do in-memory
 

00:03:20.760 --> 00:03:23.330
optionally it could also do in-memory
cache so the repository will be the

00:03:23.330 --> 00:03:23.340
cache so the repository will be the
 

00:03:23.340 --> 00:03:25.610
cache so the repository will be the
class that mediates between the local

00:03:25.610 --> 00:03:25.620
class that mediates between the local
 

00:03:25.620 --> 00:03:30.470
class that mediates between the local
and the remote data source because the

00:03:30.470 --> 00:03:30.480
and the remote data source because the
 

00:03:30.480 --> 00:03:32.990
and the remote data source because the
business logic was quite complex we

00:03:32.990 --> 00:03:33.000
business logic was quite complex we
 

00:03:33.000 --> 00:03:35.210
business logic was quite complex we
decided to add another layer we decided

00:03:35.210 --> 00:03:35.220
decided to add another layer we decided
 

00:03:35.220 --> 00:03:38.000
decided to add another layer we decided
to add use cases so the role of the use

00:03:38.000 --> 00:03:38.010
to add use cases so the role of the use
 

00:03:38.010 --> 00:03:40.610
to add use cases so the role of the use
cases is just to process data based on

00:03:40.610 --> 00:03:40.620
cases is just to process data based on
 

00:03:40.620 --> 00:03:42.710
cases is just to process data based on
business logic this would be small

00:03:42.710 --> 00:03:42.720
business logic this would be small
 

00:03:42.720 --> 00:03:44.870
business logic this would be small
lightweight classes that could be also

00:03:44.870 --> 00:03:44.880
lightweight classes that could be also
 

00:03:44.880 --> 00:03:47.750
lightweight classes that could be also
reused so the use cases with depend on

00:03:47.750 --> 00:03:47.760
reused so the use cases with depend on
 

00:03:47.760 --> 00:03:52.970
reused so the use cases with depend on
repositories and or other use cases next

00:03:52.970 --> 00:03:52.980
repositories and or other use cases next
 

00:03:52.980 --> 00:03:55.340
repositories and or other use cases next
we would have a view model so the view

00:03:55.340 --> 00:03:55.350
we would have a view model so the view
 

00:03:55.350 --> 00:03:57.949
we would have a view model so the view
models role is to expose data to be

00:03:57.949 --> 00:03:57.959
models role is to expose data to be
 

00:03:57.959 --> 00:04:00.470
models role is to expose data to be
displayed by the UI and also to trigger

00:04:00.470 --> 00:04:00.480
displayed by the UI and also to trigger
 

00:04:00.480 --> 00:04:03.259
displayed by the UI and also to trigger
actions based on the user's actions and

00:04:03.259 --> 00:04:03.269
actions based on the user's actions and
 

00:04:03.269 --> 00:04:05.479
actions based on the user's actions and
the view model would depend on use cases

00:04:05.479 --> 00:04:05.489
the view model would depend on use cases
 

00:04:05.489 --> 00:04:08.720
the view model would depend on use cases
as an input the view model would get

00:04:08.720 --> 00:04:08.730
as an input the view model would get
 

00:04:08.730 --> 00:04:11.360
as an input the view model would get
maybe IDs so it would get IDs in the

00:04:11.360 --> 00:04:11.370
maybe IDs so it would get IDs in the
 

00:04:11.370 --> 00:04:13.040
maybe IDs so it would get IDs in the
case where it's a view model for a

00:04:13.040 --> 00:04:13.050
case where it's a view model for a
 

00:04:13.050 --> 00:04:15.530
case where it's a view model for a
detailed screen for example and of

00:04:15.530 --> 00:04:15.540
detailed screen for example and of
 

00:04:15.540 --> 00:04:17.360
detailed screen for example and of
course it would get the user actions as

00:04:17.360 --> 00:04:17.370
course it would get the user actions as
 

00:04:17.370 --> 00:04:20.180
course it would get the user actions as
an input and as an output it would

00:04:20.180 --> 00:04:20.190
an input and as an output it would
 

00:04:20.190 --> 00:04:24.170
an input and as an output it would
return a live data next in the UI we

00:04:24.170 --> 00:04:24.180
return a live data next in the UI we
 

00:04:24.180 --> 00:04:26.720
return a live data next in the UI we
would work with activities and examine

00:04:26.720 --> 00:04:26.730
would work with activities and examine
 

00:04:26.730 --> 00:04:28.760
would work with activities and examine
so the role of these is to just display

00:04:28.760 --> 00:04:28.770
so the role of these is to just display
 

00:04:28.770 --> 00:04:31.580
so the role of these is to just display
the data and to forward actions to the

00:04:31.580 --> 00:04:31.590
the data and to forward actions to the
 

00:04:31.590 --> 00:04:34.580
the data and to forward actions to the
view model as an input they will get the

00:04:34.580 --> 00:04:34.590
view model as an input they will get the
 

00:04:34.590 --> 00:04:39.950
view model as an input they will get the
optional ID and the user's actions so we

00:04:39.950 --> 00:04:39.960
optional ID and the user's actions so we
 

00:04:39.960 --> 00:04:41.780
optional ID and the user's actions so we
looked at our application or at our

00:04:41.780 --> 00:04:41.790
looked at our application or at our
 

00:04:41.790 --> 00:04:43.280
looked at our application or at our
architecture and we divided it into

00:04:43.280 --> 00:04:43.290
architecture and we divided it into
 

00:04:43.290 --> 00:04:46.040
architecture and we divided it into
three layers day time domain and the UI

00:04:46.040 --> 00:04:46.050
three layers day time domain and the UI
 

00:04:46.050 --> 00:04:48.230
three layers day time domain and the UI
layer when I started to go one step

00:04:48.230 --> 00:04:48.240
layer when I started to go one step
 

00:04:48.240 --> 00:04:50.090
layer when I started to go one step
further and be a bit more opinionated in

00:04:50.090 --> 00:04:50.100
further and be a bit more opinionated in
 

00:04:50.100 --> 00:04:52.730
further and be a bit more opinionated in
the way we're using that the or in the

00:04:52.730 --> 00:04:52.740
the way we're using that the or in the
 

00:04:52.740 --> 00:04:54.440
the way we're using that the or in the
libraries that were using so we knew

00:04:54.440 --> 00:04:54.450
libraries that were using so we knew
 

00:04:54.450 --> 00:04:58.130
libraries that were using so we knew
that the live day time really shines

00:04:58.130 --> 00:04:58.140
that the live day time really shines
 

00:04:58.140 --> 00:05:00.230
that the live day time really shines
when it's used together with an activity

00:05:00.230 --> 00:05:00.240
when it's used together with an activity
 

00:05:00.240 --> 00:05:02.480
when it's used together with an activity
or a fragment so we decided to really

00:05:02.480 --> 00:05:02.490
or a fragment so we decided to really
 

00:05:02.490 --> 00:05:04.640
or a fragment so we decided to really
keep the live data only between the view

00:05:04.640 --> 00:05:04.650
keep the live data only between the view
 

00:05:04.650 --> 00:05:08.480
keep the live data only between the view
model and the UI and that's it and even

00:05:08.480 --> 00:05:08.490
model and the UI and that's it and even
 

00:05:08.490 --> 00:05:10.310
model and the UI and that's it and even
more because of the nice integration

00:05:10.310 --> 00:05:10.320
more because of the nice integration
 

00:05:10.320 --> 00:05:12.560
more because of the nice integration
between live data and data binding we

00:05:12.560 --> 00:05:12.570
between live data and data binding we
 

00:05:12.570 --> 00:05:15.170
between live data and data binding we
decided to also use data binding in our

00:05:15.170 --> 00:05:15.180
decided to also use data binding in our
 

00:05:15.180 --> 00:05:19.250
decided to also use data binding in our
XML but again still with all these

00:05:19.250 --> 00:05:19.260
XML but again still with all these
 

00:05:19.260 --> 00:05:20.900
XML but again still with all these
constraints and all of these guidelines

00:05:20.900 --> 00:05:20.910
constraints and all of these guidelines
 

00:05:20.910 --> 00:05:23.360
constraints and all of these guidelines
that we've set there are so many ways in

00:05:23.360 --> 00:05:23.370
that we've set there are so many ways in
 

00:05:23.370 --> 00:05:24.920
that we've set there are so many ways in
which we can actually implement this

00:05:24.920 --> 00:05:24.930
which we can actually implement this
 

00:05:24.930 --> 00:05:27.830
which we can actually implement this
kind of architecture and we knew that

00:05:27.830 --> 00:05:27.840
kind of architecture and we knew that
 

00:05:27.840 --> 00:05:29.900
kind of architecture and we knew that
Coughlin's and the coding language

00:05:29.900 --> 00:05:29.910
Coughlin's and the coding language
 

00:05:29.910 --> 00:05:32.690
Coughlin's and the coding language
features will help us improve this even

00:05:32.690 --> 00:05:32.700
features will help us improve this even
 

00:05:32.700 --> 00:05:34.520
features will help us improve this even
more and more precisely what we

00:05:34.520 --> 00:05:34.530
more and more precisely what we
 

00:05:34.530 --> 00:05:36.560
more and more precisely what we
particularly like are the functional

00:05:36.560 --> 00:05:36.570
particularly like are the functional
 

00:05:36.570 --> 00:05:39.400
particularly like are the functional
constructs that coffin supports so

00:05:39.400 --> 00:05:39.410
constructs that coffin supports so
 

00:05:39.410 --> 00:05:42.170
constructs that coffin supports so
actually one of the first decisions that

00:05:42.170 --> 00:05:42.180
actually one of the first decisions that
 

00:05:42.180 --> 00:05:44.390
actually one of the first decisions that
we have to make was how do we handle

00:05:44.390 --> 00:05:44.400
we have to make was how do we handle
 

00:05:44.400 --> 00:05:47.540
we have to make was how do we handle
asynchronous operations and we decided

00:05:47.540 --> 00:05:47.550
asynchronous operations and we decided
 

00:05:47.550 --> 00:05:49.700
asynchronous operations and we decided
to work with coroutines as the pretty

00:05:49.700 --> 00:05:49.710
to work with coroutines as the pretty
 

00:05:49.710 --> 00:05:51.890
to work with coroutines as the pretty
much backbone of our app because with

00:05:51.890 --> 00:05:51.900
much backbone of our app because with
 

00:05:51.900 --> 00:05:54.470
much backbone of our app because with
qualities it's easy to just launch a

00:05:54.470 --> 00:05:54.480
qualities it's easy to just launch a
 

00:05:54.480 --> 00:05:57.410
qualities it's easy to just launch a
core routine and handle the response and

00:05:57.410 --> 00:05:57.420
core routine and handle the response and
 

00:05:57.420 --> 00:06:00.290
core routine and handle the response and
more precisely what we like this the

00:06:00.290 --> 00:06:00.300
more precisely what we like this the
 

00:06:00.300 --> 00:06:02.750
more precisely what we like this the
fact that core teams have a scope so for

00:06:02.750 --> 00:06:02.760
fact that core teams have a scope so for
 

00:06:02.760 --> 00:06:04.790
fact that core teams have a scope so for
example let's say that you're opening

00:06:04.790 --> 00:06:04.800
example let's say that you're opening
 

00:06:04.800 --> 00:06:06.650
example let's say that you're opening
the activity you're triggering a network

00:06:06.650 --> 00:06:06.660
the activity you're triggering a network
 

00:06:06.660 --> 00:06:08.540
the activity you're triggering a network
request you want to make sure that when

00:06:08.540 --> 00:06:08.550
request you want to make sure that when
 

00:06:08.550 --> 00:06:10.430
request you want to make sure that when
you're pressing back and exiting that

00:06:10.430 --> 00:06:10.440
you're pressing back and exiting that
 

00:06:10.440 --> 00:06:11.180
you're pressing back and exiting that
activity

00:06:11.180 --> 00:06:11.190
activity
 

00:06:11.190 --> 00:06:13.370
activity
you're also cancelling that Network

00:06:13.370 --> 00:06:13.380
you're also cancelling that Network
 

00:06:13.380 --> 00:06:16.160
you're also cancelling that Network
request so this scope scoping of the

00:06:16.160 --> 00:06:16.170
request so this scope scoping of the
 

00:06:16.170 --> 00:06:18.920
request so this scope scoping of the
proteins was something that we liked so

00:06:18.920 --> 00:06:18.930
proteins was something that we liked so
 

00:06:18.930 --> 00:06:21.050
proteins was something that we liked so
this meant that we'll excited that in

00:06:21.050 --> 00:06:21.060
this meant that we'll excited that in
 

00:06:21.060 --> 00:06:22.790
this meant that we'll excited that in
the view model would be the place where

00:06:22.790 --> 00:06:22.800
the view model would be the place where
 

00:06:22.800 --> 00:06:24.740
the view model would be the place where
we're launching and we're canceling

00:06:24.740 --> 00:06:24.750
we're launching and we're canceling
 

00:06:24.750 --> 00:06:25.430
we're launching and we're canceling
coroutines

00:06:25.430 --> 00:06:25.440
coroutines
 

00:06:25.440 --> 00:06:26.990
coroutines
and we're also making that transition

00:06:26.990 --> 00:06:27.000
and we're also making that transition
 

00:06:27.000 --> 00:06:30.140
and we're also making that transition
between coroutines and live data but

00:06:30.140 --> 00:06:30.150
between coroutines and live data but
 

00:06:30.150 --> 00:06:32.210
between coroutines and live data but
then for all the other layers above the

00:06:32.210 --> 00:06:32.220
then for all the other layers above the
 

00:06:32.220 --> 00:06:34.520
then for all the other layers above the
view model we would just use suspension

00:06:34.520 --> 00:06:34.530
view model we would just use suspension
 

00:06:34.530 --> 00:06:37.700
view model we would just use suspension
functions but the suspension functions

00:06:37.700 --> 00:06:37.710
functions but the suspension functions
 

00:06:37.710 --> 00:06:40.130
functions but the suspension functions
would return a result

00:06:40.130 --> 00:06:40.140
would return a result
 

00:06:40.140 --> 00:06:44.090
would return a result
class so more precisely this result will

00:06:44.090 --> 00:06:44.100
class so more precisely this result will
 

00:06:44.100 --> 00:06:47.810
class so more precisely this result will
have two times success or error and this

00:06:47.810 --> 00:06:47.820
have two times success or error and this
 

00:06:47.820 --> 00:06:49.370
have two times success or error and this
is because I wanted to make sure that

00:06:49.370 --> 00:06:49.380
is because I wanted to make sure that
 

00:06:49.380 --> 00:06:51.170
is because I wanted to make sure that
we're not throwing exceptions here and

00:06:51.170 --> 00:06:51.180
we're not throwing exceptions here and
 

00:06:51.180 --> 00:06:53.300
we're not throwing exceptions here and
there but rather that these exceptions

00:06:53.300 --> 00:06:53.310
there but rather that these exceptions
 

00:06:53.310 --> 00:06:57.080
there but rather that these exceptions
those errors represent a state so what's

00:06:57.080 --> 00:06:57.090
those errors represent a state so what's
 

00:06:57.090 --> 00:06:58.730
those errors represent a state so what's
uh what's interesting in cotton is that

00:06:58.730 --> 00:06:58.740
uh what's interesting in cotton is that
 

00:06:58.740 --> 00:07:02.630
uh what's interesting in cotton is that
if you want to be able to extend the

00:07:02.630 --> 00:07:02.640
if you want to be able to extend the
 

00:07:02.640 --> 00:07:05.330
if you want to be able to extend the
class you have to mark it as open so

00:07:05.330 --> 00:07:05.340
class you have to mark it as open so
 

00:07:05.340 --> 00:07:07.550
class you have to mark it as open so
this means that classes are final by

00:07:07.550 --> 00:07:07.560
this means that classes are final by
 

00:07:07.560 --> 00:07:09.590
this means that classes are final by
default and you have to be intentional

00:07:09.590 --> 00:07:09.600
default and you have to be intentional
 

00:07:09.600 --> 00:07:12.620
default and you have to be intentional
when using inheritance so this means

00:07:12.620 --> 00:07:12.630
when using inheritance so this means
 

00:07:12.630 --> 00:07:14.840
when using inheritance so this means
that cotton really supports this idea

00:07:14.840 --> 00:07:14.850
that cotton really supports this idea
 

00:07:14.850 --> 00:07:16.760
that cotton really supports this idea
this best practices of a favoring

00:07:16.760 --> 00:07:16.770
this best practices of a favoring
 

00:07:16.770 --> 00:07:20.990
this best practices of a favoring
composition versus inheritance but we

00:07:20.990 --> 00:07:21.000
composition versus inheritance but we
 

00:07:21.000 --> 00:07:24.020
composition versus inheritance but we
can do better than using open classes we

00:07:24.020 --> 00:07:24.030
can do better than using open classes we
 

00:07:24.030 --> 00:07:26.450
can do better than using open classes we
can use a sealed class because with the

00:07:26.450 --> 00:07:26.460
can use a sealed class because with the
 

00:07:26.460 --> 00:07:28.760
can use a sealed class because with the
seal class we can restrict the class

00:07:28.760 --> 00:07:28.770
seal class we can restrict the class
 

00:07:28.770 --> 00:07:31.430
seal class we can restrict the class
here keys means that we can't extend the

00:07:31.430 --> 00:07:31.440
here keys means that we can't extend the
 

00:07:31.440 --> 00:07:36.080
here keys means that we can't extend the
class outside this file so a lot of

00:07:36.080 --> 00:07:36.090
class outside this file so a lot of
 

00:07:36.090 --> 00:07:37.550
class outside this file so a lot of
times when we would use this resolved

00:07:37.550 --> 00:07:37.560
times when we would use this resolved
 

00:07:37.560 --> 00:07:40.310
times when we would use this resolved
class we will typically use it inside a

00:07:40.310 --> 00:07:40.320
class we will typically use it inside a
 

00:07:40.320 --> 00:07:43.340
class we will typically use it inside a
when so first of all when support

00:07:43.340 --> 00:07:43.350
when so first of all when support
 

00:07:43.350 --> 00:07:45.830
when so first of all when support
smartcasts so this man that it was easy

00:07:45.830 --> 00:07:45.840
smartcasts so this man that it was easy
 

00:07:45.840 --> 00:07:48.860
smartcasts so this man that it was easy
to do when result is success if

00:07:48.860 --> 00:07:48.870
to do when result is success if
 

00:07:48.870 --> 00:07:51.260
to do when result is success if
something when resolve is error do

00:07:51.260 --> 00:07:51.270
something when resolve is error do
 

00:07:51.270 --> 00:07:54.800
something when resolve is error do
something else but because every time we

00:07:54.800 --> 00:07:54.810
something else but because every time we
 

00:07:54.810 --> 00:07:56.300
something else but because every time we
were using it we wanted to make sure

00:07:56.300 --> 00:07:56.310
were using it we wanted to make sure
 

00:07:56.310 --> 00:07:59.210
were using it we wanted to make sure
that we're always handling every case I

00:07:59.210 --> 00:07:59.220
that we're always handling every case I
 

00:07:59.220 --> 00:08:01.280
that we're always handling every case I
want you to make sure that if I know by

00:08:01.280 --> 00:08:01.290
want you to make sure that if I know by
 

00:08:01.290 --> 00:08:03.470
want you to make sure that if I know by
mistake were not handling something we

00:08:03.470 --> 00:08:03.480
mistake were not handling something we
 

00:08:03.480 --> 00:08:05.960
mistake were not handling something we
wanted the compiler to tell us that hey

00:08:05.960 --> 00:08:05.970
wanted the compiler to tell us that hey
 

00:08:05.970 --> 00:08:08.030
wanted the compiler to tell us that hey
you forgot something you forgot to

00:08:08.030 --> 00:08:08.040
you forgot something you forgot to
 

00:08:08.040 --> 00:08:11.390
you forgot something you forgot to
handle the error case so this month at

00:08:11.390 --> 00:08:11.400
handle the error case so this month at
 

00:08:11.400 --> 00:08:14.390
handle the error case so this month at
the one needs to be exhaustive but one

00:08:14.390 --> 00:08:14.400
the one needs to be exhaustive but one
 

00:08:14.400 --> 00:08:17.000
the one needs to be exhaustive but one
is exhaustive only when used as an

00:08:17.000 --> 00:08:17.010
is exhaustive only when used as an
 

00:08:17.010 --> 00:08:20.840
is exhaustive only when used as an
expression so we added we created the

00:08:20.840 --> 00:08:20.850
expression so we added we created the
 

00:08:20.850 --> 00:08:24.770
expression so we added we created the
exhaustive property so more precisely we

00:08:24.770 --> 00:08:24.780
exhaustive property so more precisely we
 

00:08:24.780 --> 00:08:27.380
exhaustive property so more precisely we
created an extension property on T where

00:08:27.380 --> 00:08:27.390
created an extension property on T where
 

00:08:27.390 --> 00:08:32.540
created an extension property on T where
we're just returning the object here's

00:08:32.540 --> 00:08:32.550
we're just returning the object here's
 

00:08:32.550 --> 00:08:35.390
we're just returning the object here's
another problem that we had so we had a

00:08:35.390 --> 00:08:35.400
another problem that we had so we had a
 

00:08:35.400 --> 00:08:38.150
another problem that we had so we had a
comment class and a comment with replies

00:08:38.150 --> 00:08:38.160
comment class and a comment with replies
 

00:08:38.160 --> 00:08:40.580
comment class and a comment with replies
so the difference between these two is

00:08:40.580 --> 00:08:40.590
so the difference between these two is
 

00:08:40.590 --> 00:08:42.920
so the difference between these two is
in the fact that the comment also hosts

00:08:42.920 --> 00:08:42.930
in the fact that the comment also hosts
 

00:08:42.930 --> 00:08:45.380
in the fact that the comment also hosts
the information about the user that

00:08:45.380 --> 00:08:45.390
the information about the user that
 

00:08:45.390 --> 00:08:47.030
the information about the user that
posted the comment so it will have the

00:08:47.030 --> 00:08:47.040
posted the comment so it will have the
 

00:08:47.040 --> 00:08:48.710
posted the comment so it will have the
display name and the portrait Arara

00:08:48.710 --> 00:08:48.720
display name and the portrait Arara
 

00:08:48.720 --> 00:08:51.290
display name and the portrait Arara
whereas the comment with replies is

00:08:51.290 --> 00:08:51.300
whereas the comment with replies is
 

00:08:51.300 --> 00:08:53.720
whereas the comment with replies is
pretty much a tree structure that holds

00:08:53.720 --> 00:08:53.730
pretty much a tree structure that holds
 

00:08:53.730 --> 00:08:54.020
pretty much a tree structure that holds
the

00:08:54.020 --> 00:08:54.030
the
 

00:08:54.030 --> 00:08:55.460
the
twice of the comment and the replies of

00:08:55.460 --> 00:08:55.470
twice of the comment and the replies of
 

00:08:55.470 --> 00:08:58.940
twice of the comment and the replies of
the replies and so but what we had to do

00:08:58.940 --> 00:08:58.950
the replies and so but what we had to do
 

00:08:58.950 --> 00:09:01.730
the replies and so but what we had to do
was to build a comment out of the

00:09:01.730 --> 00:09:01.740
was to build a comment out of the
 

00:09:01.740 --> 00:09:04.150
was to build a comment out of the
comment with replies and a user object

00:09:04.150 --> 00:09:04.160
comment with replies and a user object
 

00:09:04.160 --> 00:09:06.830
comment with replies and a user object
so you say okay that's easy we will just

00:09:06.830 --> 00:09:06.840
so you say okay that's easy we will just
 

00:09:06.840 --> 00:09:08.720
so you say okay that's easy we will just
create a new constructor that gets as

00:09:08.720 --> 00:09:08.730
create a new constructor that gets as
 

00:09:08.730 --> 00:09:10.820
create a new constructor that gets as
parameters the user and the comment were

00:09:10.820 --> 00:09:10.830
parameters the user and the comment were
 

00:09:10.830 --> 00:09:14.630
parameters the user and the comment were
replies and that's it but the thing is

00:09:14.630 --> 00:09:14.640
replies and that's it but the thing is
 

00:09:14.640 --> 00:09:16.250
replies and that's it but the thing is
that we don't really like this because

00:09:16.250 --> 00:09:16.260
that we don't really like this because
 

00:09:16.260 --> 00:09:19.070
that we don't really like this because
the classes were in two different layers

00:09:19.070 --> 00:09:19.080
the classes were in two different layers
 

00:09:19.080 --> 00:09:22.310
the classes were in two different layers
and why should the comments know about

00:09:22.310 --> 00:09:22.320
and why should the comments know about
 

00:09:22.320 --> 00:09:24.500
and why should the comments know about
the comment with replies why should it

00:09:24.500 --> 00:09:24.510
the comment with replies why should it
 

00:09:24.510 --> 00:09:26.720
the comment with replies why should it
know necessarily about the user maybe

00:09:26.720 --> 00:09:26.730
know necessarily about the user maybe
 

00:09:26.730 --> 00:09:28.940
know necessarily about the user maybe
the data comes from somewhere else why

00:09:28.940 --> 00:09:28.950
the data comes from somewhere else why
 

00:09:28.950 --> 00:09:32.770
the data comes from somewhere else why
should we need to change this this API

00:09:32.770 --> 00:09:32.780
should we need to change this this API
 

00:09:32.780 --> 00:09:35.720
should we need to change this this API
so what we ended up using is an

00:09:35.720 --> 00:09:35.730
so what we ended up using is an
 

00:09:35.730 --> 00:09:37.820
so what we ended up using is an
extension function so more precise will

00:09:37.820 --> 00:09:37.830
extension function so more precise will
 

00:09:37.830 --> 00:09:39.590
extension function so more precise will
be built an extension function to the

00:09:39.590 --> 00:09:39.600
be built an extension function to the
 

00:09:39.600 --> 00:09:41.900
be built an extension function to the
comment with replies that based on the

00:09:41.900 --> 00:09:41.910
comment with replies that based on the
 

00:09:41.910 --> 00:09:45.110
comment with replies that based on the
user object it would create a comment so

00:09:45.110 --> 00:09:45.120
user object it would create a comment so
 

00:09:45.120 --> 00:09:47.870
user object it would create a comment so
this when you're building an extension

00:09:47.870 --> 00:09:47.880
this when you're building an extension
 

00:09:47.880 --> 00:09:51.200
this when you're building an extension
function you only have access to the to

00:09:51.200 --> 00:09:51.210
function you only have access to the to
 

00:09:51.210 --> 00:09:54.110
function you only have access to the to
the public fields so this means that

00:09:54.110 --> 00:09:54.120
the public fields so this means that
 

00:09:54.120 --> 00:09:56.240
the public fields so this means that
we're not by mistake accessing or

00:09:56.240 --> 00:09:56.250
we're not by mistake accessing or
 

00:09:56.250 --> 00:09:58.730
we're not by mistake accessing or
changing any private implementation data

00:09:58.730 --> 00:09:58.740
changing any private implementation data
 

00:09:58.740 --> 00:10:01.490
changing any private implementation data
and it allows us to keep our classes

00:10:01.490 --> 00:10:01.500
and it allows us to keep our classes
 

00:10:01.500 --> 00:10:03.829
and it allows us to keep our classes
focused focused on what they do without

00:10:03.829 --> 00:10:03.839
focused focused on what they do without
 

00:10:03.839 --> 00:10:07.760
focused focused on what they do without
extending them so it meant that we

00:10:07.760 --> 00:10:07.770
extending them so it meant that we
 

00:10:07.770 --> 00:10:09.890
extending them so it meant that we
didn't have to change the public API and

00:10:09.890 --> 00:10:09.900
didn't have to change the public API and
 

00:10:09.900 --> 00:10:11.570
didn't have to change the public API and
we would avoid accessing private

00:10:11.570 --> 00:10:11.580
we would avoid accessing private
 

00:10:11.580 --> 00:10:16.190
we would avoid accessing private
implementation details so what I like

00:10:16.190 --> 00:10:16.200
implementation details so what I like
 

00:10:16.200 --> 00:10:18.170
implementation details so what I like
about data classes is the fact that

00:10:18.170 --> 00:10:18.180
about data classes is the fact that
 

00:10:18.180 --> 00:10:20.030
about data classes is the fact that
their value objects and this actually

00:10:20.030 --> 00:10:20.040
their value objects and this actually
 

00:10:20.040 --> 00:10:22.700
their value objects and this actually
shines in when used in tests so for

00:10:22.700 --> 00:10:22.710
shines in when used in tests so for
 

00:10:22.710 --> 00:10:25.610
shines in when used in tests so for
example we had an upvote flag in the

00:10:25.610 --> 00:10:25.620
example we had an upvote flag in the
 

00:10:25.620 --> 00:10:27.860
example we had an upvote flag in the
comment someone we'd build a test to

00:10:27.860 --> 00:10:27.870
comment someone we'd build a test to
 

00:10:27.870 --> 00:10:29.780
comment someone we'd build a test to
check whether a comment is about it it

00:10:29.780 --> 00:10:29.790
check whether a comment is about it it
 

00:10:29.790 --> 00:10:31.340
check whether a comment is about it it
would create our comment with the

00:10:31.340 --> 00:10:31.350
would create our comment with the
 

00:10:31.350 --> 00:10:33.950
would create our comment with the
uploaded flag to force would avoid a

00:10:33.950 --> 00:10:33.960
uploaded flag to force would avoid a
 

00:10:33.960 --> 00:10:36.020
uploaded flag to force would avoid a
comment and then we would check whether

00:10:36.020 --> 00:10:36.030
comment and then we would check whether
 

00:10:36.030 --> 00:10:39.380
comment and then we would check whether
the expected result is similar to the

00:10:39.380 --> 00:10:39.390
the expected result is similar to the
 

00:10:39.390 --> 00:10:41.570
the expected result is similar to the
comment initial comment but with that

00:10:41.570 --> 00:10:41.580
comment initial comment but with that
 

00:10:41.580 --> 00:10:44.540
comment initial comment but with that
uploaded flag to true but the thing is

00:10:44.540 --> 00:10:44.550
uploaded flag to true but the thing is
 

00:10:44.550 --> 00:10:46.910
uploaded flag to true but the thing is
that especially in our case because the

00:10:46.910 --> 00:10:46.920
that especially in our case because the
 

00:10:46.920 --> 00:10:49.310
that especially in our case because the
comment has so many fields it was easy

00:10:49.310 --> 00:10:49.320
comment has so many fields it was easy
 

00:10:49.320 --> 00:10:51.380
comment has so many fields it was easy
to make mistakes and it was easy to miss

00:10:51.380 --> 00:10:51.390
to make mistakes and it was easy to miss
 

00:10:51.390 --> 00:10:53.900
to make mistakes and it was easy to miss
what's actually important here the fact

00:10:53.900 --> 00:10:53.910
what's actually important here the fact
 

00:10:53.910 --> 00:10:56.900
what's actually important here the fact
that the avoided flag has changed with

00:10:56.900 --> 00:10:56.910
that the avoided flag has changed with
 

00:10:56.910 --> 00:10:59.180
that the avoided flag has changed with
Coughlin you can use the copy method and

00:10:59.180 --> 00:10:59.190
Coughlin you can use the copy method and
 

00:10:59.190 --> 00:11:02.510
Coughlin you can use the copy method and
there we would just create a copy of the

00:11:02.510 --> 00:11:02.520
there we would just create a copy of the
 

00:11:02.520 --> 00:11:06.230
there we would just create a copy of the
object and that is called on and we're

00:11:06.230 --> 00:11:06.240
object and that is called on and we're
 

00:11:06.240 --> 00:11:07.790
object and that is called on and we're
setting the flag the flag

00:11:07.790 --> 00:11:07.800
setting the flag the flag
 

00:11:07.800 --> 00:11:10.340
setting the flag the flag
that we're actually changing and that's

00:11:10.340 --> 00:11:10.350
that we're actually changing and that's
 

00:11:10.350 --> 00:11:12.920
that we're actually changing and that's
it the code ends up being more concise

00:11:12.920 --> 00:11:12.930
it the code ends up being more concise
 

00:11:12.930 --> 00:11:18.040
it the code ends up being more concise
and more readable more comprehensible so

00:11:18.040 --> 00:11:18.050
and more readable more comprehensible so
 

00:11:18.050 --> 00:11:20.389
and more readable more comprehensible so
let's take another example so we had

00:11:20.389 --> 00:11:20.399
let's take another example so we had
 

00:11:20.399 --> 00:11:22.639
let's take another example so we had
another in our app we were working with

00:11:22.639 --> 00:11:22.649
another in our app we were working with
 

00:11:22.649 --> 00:11:25.900
another in our app we were working with
a remote data source to post a comment

00:11:25.900 --> 00:11:25.910
a remote data source to post a comment
 

00:11:25.910 --> 00:11:28.250
a remote data source to post a comment
to post a comment and here we would

00:11:28.250 --> 00:11:28.260
to post a comment and here we would
 

00:11:28.260 --> 00:11:30.560
to post a comment and here we would
expose a suspension function that will

00:11:30.560 --> 00:11:30.570
expose a suspension function that will
 

00:11:30.570 --> 00:11:34.430
expose a suspension function that will
return I resolved and inside this method

00:11:34.430 --> 00:11:34.440
return I resolved and inside this method
 

00:11:34.440 --> 00:11:36.740
return I resolved and inside this method
we will create a new comment request

00:11:36.740 --> 00:11:36.750
we will create a new comment request
 

00:11:36.750 --> 00:11:39.259
we will create a new comment request
with trigger that requested the back end

00:11:39.259 --> 00:11:39.269
with trigger that requested the back end
 

00:11:39.269 --> 00:11:42.170
with trigger that requested the back end
we would await for the response and then

00:11:42.170 --> 00:11:42.180
we would await for the response and then
 

00:11:42.180 --> 00:11:44.269
we would await for the response and then
we would handle the response building

00:11:44.269 --> 00:11:44.279
we would handle the response building
 

00:11:44.279 --> 00:11:46.639
we would handle the response building
either result success or a result of

00:11:46.639 --> 00:11:46.649
either result success or a result of
 

00:11:46.649 --> 00:11:50.000
either result success or a result of
error depending on what's needed but if

00:11:50.000 --> 00:11:50.010
error depending on what's needed but if
 

00:11:50.010 --> 00:11:52.069
error depending on what's needed but if
you look at this code this is actually

00:11:52.069 --> 00:11:52.079
you look at this code this is actually
 

00:11:52.079 --> 00:11:55.550
you look at this code this is actually
not enough because in the case when your

00:11:55.550 --> 00:11:55.560
not enough because in the case when your
 

00:11:55.560 --> 00:11:57.910
not enough because in the case when your
device is offline this code will crash

00:11:57.910 --> 00:11:57.920
device is offline this code will crash
 

00:11:57.920 --> 00:12:01.190
device is offline this code will crash
so what we actually had to do is to wrap

00:12:01.190 --> 00:12:01.200
so what we actually had to do is to wrap
 

00:12:01.200 --> 00:12:04.639
so what we actually had to do is to wrap
every request inside a try-catch and we

00:12:04.639 --> 00:12:04.649
every request inside a try-catch and we
 

00:12:04.649 --> 00:12:07.250
every request inside a try-catch and we
have a lot of requests so we saw that we

00:12:07.250 --> 00:12:07.260
have a lot of requests so we saw that we
 

00:12:07.260 --> 00:12:09.650
have a lot of requests so we saw that we
kept on adding and adding this try-catch

00:12:09.650 --> 00:12:09.660
kept on adding and adding this try-catch
 

00:12:09.660 --> 00:12:13.120
kept on adding and adding this try-catch
everywhere and then our methods were

00:12:13.120 --> 00:12:13.130
everywhere and then our methods were
 

00:12:13.130 --> 00:12:16.610
everywhere and then our methods were
bolted bloated so we couldn't really

00:12:16.610 --> 00:12:16.620
bolted bloated so we couldn't really
 

00:12:16.620 --> 00:12:18.380
bolted bloated so we couldn't really
focus on what really mattered on

00:12:18.380 --> 00:12:18.390
focus on what really mattered on
 

00:12:18.390 --> 00:12:20.329
focus on what really mattered on
building of the response triggering the

00:12:20.329 --> 00:12:20.339
building of the response triggering the
 

00:12:20.339 --> 00:12:23.360
building of the response triggering the
request so what we did is create a

00:12:23.360 --> 00:12:23.370
request so what we did is create a
 

00:12:23.370 --> 00:12:25.670
request so what we did is create a
top-level function so this would be a

00:12:25.670 --> 00:12:25.680
top-level function so this would be a
 

00:12:25.680 --> 00:12:27.620
top-level function so this would be a
suspension function that would get as a

00:12:27.620 --> 00:12:27.630
suspension function that would get as a
 

00:12:27.630 --> 00:12:30.260
suspension function that would get as a
parameter a suspending lambda and the

00:12:30.260 --> 00:12:30.270
parameter a suspending lambda and the
 

00:12:30.270 --> 00:12:32.420
parameter a suspending lambda and the
error message so here it would just

00:12:32.420 --> 00:12:32.430
error message so here it would just
 

00:12:32.430 --> 00:12:34.460
error message so here it would just
trigger the call wrap it inside a

00:12:34.460 --> 00:12:34.470
trigger the call wrap it inside a
 

00:12:34.470 --> 00:12:36.920
trigger the call wrap it inside a
try-catch and then we would build in

00:12:36.920 --> 00:12:36.930
try-catch and then we would build in
 

00:12:36.930 --> 00:12:38.930
try-catch and then we would build in
case of an exception a result of error

00:12:38.930 --> 00:12:38.940
case of an exception a result of error
 

00:12:38.940 --> 00:12:41.290
case of an exception a result of error
based on the error message with pass 10

00:12:41.290 --> 00:12:41.300
based on the error message with pass 10
 

00:12:41.300 --> 00:12:44.600
based on the error message with pass 10
so that this means that in our mode data

00:12:44.600 --> 00:12:44.610
so that this means that in our mode data
 

00:12:44.610 --> 00:12:47.389
so that this means that in our mode data
source we could just create a safe API

00:12:47.389 --> 00:12:47.399
source we could just create a safe API
 

00:12:47.399 --> 00:12:49.699
source we could just create a safe API
call and then put the call that actually

00:12:49.699 --> 00:12:49.709
call and then put the call that actually
 

00:12:49.709 --> 00:12:51.550
call and then put the call that actually
matters for us inside another function

00:12:51.550 --> 00:12:51.560
matters for us inside another function
 

00:12:51.560 --> 00:12:54.199
matters for us inside another function
like this the code became more readable

00:12:54.199 --> 00:12:54.209
like this the code became more readable
 

00:12:54.209 --> 00:12:59.360
like this the code became more readable
more easy to understand so this safe API

00:12:59.360 --> 00:12:59.370
more easy to understand so this safe API
 

00:12:59.370 --> 00:13:01.850
more easy to understand so this safe API
call I was saying that has the call as a

00:13:01.850 --> 00:13:01.860
call I was saying that has the call as a
 

00:13:01.860 --> 00:13:03.019
call I was saying that has the call as a
first parameter and then the error

00:13:03.019 --> 00:13:03.029
first parameter and then the error
 

00:13:03.029 --> 00:13:06.380
first parameter and then the error
message is a second one but in Portland

00:13:06.380 --> 00:13:06.390
message is a second one but in Portland
 

00:13:06.390 --> 00:13:09.650
message is a second one but in Portland
if you if the last parameter of a method

00:13:09.650 --> 00:13:09.660
if you if the last parameter of a method
 

00:13:09.660 --> 00:13:12.259
if you if the last parameter of a method
is a lambda it means that you can use

00:13:12.259 --> 00:13:12.269
is a lambda it means that you can use
 

00:13:12.269 --> 00:13:15.199
is a lambda it means that you can use
this as a trailing lambda so that meant

00:13:15.199 --> 00:13:15.209
this as a trailing lambda so that meant
 

00:13:15.209 --> 00:13:17.720
this as a trailing lambda so that meant
that when you're calling this instead of

00:13:17.720 --> 00:13:17.730
that when you're calling this instead of
 

00:13:17.730 --> 00:13:20.300
that when you're calling this instead of
passing these two parameters we can just

00:13:20.300 --> 00:13:20.310
passing these two parameters we can just
 

00:13:20.310 --> 00:13:21.140
passing these two parameters we can just
pass the

00:13:21.140 --> 00:13:21.150
pass the
 

00:13:21.150 --> 00:13:22.550
pass the
our message as a parameter of the

00:13:22.550 --> 00:13:22.560
our message as a parameter of the
 

00:13:22.560 --> 00:13:25.430
our message as a parameter of the
function and then use the training I'm

00:13:25.430 --> 00:13:25.440
function and then use the training I'm
 

00:13:25.440 --> 00:13:29.180
function and then use the training I'm
the syntax to call the method so like

00:13:29.180 --> 00:13:29.190
the syntax to call the method so like
 

00:13:29.190 --> 00:13:32.330
the syntax to call the method so like
this the code becomes more concise but

00:13:32.330 --> 00:13:32.340
this the code becomes more concise but
 

00:13:32.340 --> 00:13:34.640
this the code becomes more concise but
is it really more readable so when we

00:13:34.640 --> 00:13:34.650
is it really more readable so when we
 

00:13:34.650 --> 00:13:36.380
is it really more readable so when we
looked at this it felt like what matters

00:13:36.380 --> 00:13:36.390
looked at this it felt like what matters
 

00:13:36.390 --> 00:13:40.130
looked at this it felt like what matters
here the most is the error message which

00:13:40.130 --> 00:13:40.140
here the most is the error message which
 

00:13:40.140 --> 00:13:42.290
here the most is the error message which
is not really the case what matters for

00:13:42.290 --> 00:13:42.300
is not really the case what matters for
 

00:13:42.300 --> 00:13:44.210
is not really the case what matters for
us a lot is that the method that gets

00:13:44.210 --> 00:13:44.220
us a lot is that the method that gets
 

00:13:44.220 --> 00:13:47.300
us a lot is that the method that gets
called is this post comment so we

00:13:47.300 --> 00:13:47.310
called is this post comment so we
 

00:13:47.310 --> 00:13:50.060
called is this post comment so we
decided that although the code is more

00:13:50.060 --> 00:13:50.070
decided that although the code is more
 

00:13:50.070 --> 00:13:50.930
decided that although the code is more
concise

00:13:50.930 --> 00:13:50.940
concise
 

00:13:50.940 --> 00:13:54.080
concise
it doesn't mean more readable so brevity

00:13:54.080 --> 00:13:54.090
it doesn't mean more readable so brevity
 

00:13:54.090 --> 00:13:56.810
it doesn't mean more readable so brevity
isn't necessarily a good thing so even

00:13:56.810 --> 00:13:56.820
isn't necessarily a good thing so even
 

00:13:56.820 --> 00:13:58.910
isn't necessarily a good thing so even
if cotton offers all of these kind of

00:13:58.910 --> 00:13:58.920
if cotton offers all of these kind of
 

00:13:58.920 --> 00:14:01.700
if cotton offers all of these kind of
options and features be mindful and

00:14:01.700 --> 00:14:01.710
options and features be mindful and
 

00:14:01.710 --> 00:14:03.920
options and features be mindful and
think whether you actually need all of

00:14:03.920 --> 00:14:03.930
think whether you actually need all of
 

00:14:03.930 --> 00:14:06.310
think whether you actually need all of
these or use them in the right places

00:14:06.310 --> 00:14:06.320
these or use them in the right places
 

00:14:06.320 --> 00:14:09.160
these or use them in the right places
here's another example

00:14:09.160 --> 00:14:09.170
here's another example
 

00:14:09.170 --> 00:14:12.380
here's another example
so as soon as we were switching to

00:14:12.380 --> 00:14:12.390
so as soon as we were switching to
 

00:14:12.390 --> 00:14:14.540
so as soon as we were switching to
Coughlin especially in our activities

00:14:14.540 --> 00:14:14.550
Coughlin especially in our activities
 

00:14:14.550 --> 00:14:16.520
Coughlin especially in our activities
the first thing that we did is make all

00:14:16.520 --> 00:14:16.530
the first thing that we did is make all
 

00:14:16.530 --> 00:14:18.290
the first thing that we did is make all
of our views late in it because we

00:14:18.290 --> 00:14:18.300
of our views late in it because we
 

00:14:18.300 --> 00:14:20.120
of our views late in it because we
didn't want to handle all of this Nullah

00:14:20.120 --> 00:14:20.130
didn't want to handle all of this Nullah
 

00:14:20.130 --> 00:14:22.790
didn't want to handle all of this Nullah
bility but then we looked again at our

00:14:22.790 --> 00:14:22.800
bility but then we looked again at our
 

00:14:22.800 --> 00:14:24.890
bility but then we looked again at our
code and we saw that we shouldn't do

00:14:24.890 --> 00:14:24.900
code and we saw that we shouldn't do
 

00:14:24.900 --> 00:14:28.700
code and we saw that we shouldn't do
this that some views for example are no

00:14:28.700 --> 00:14:28.710
this that some views for example are no
 

00:14:28.710 --> 00:14:31.250
this that some views for example are no
result views were only inflated when

00:14:31.250 --> 00:14:31.260
result views were only inflated when
 

00:14:31.260 --> 00:14:35.150
result views were only inflated when
specific conditions are met so actually

00:14:35.150 --> 00:14:35.160
specific conditions are met so actually
 

00:14:35.160 --> 00:14:38.060
specific conditions are met so actually
no ability was good no ability can be

00:14:38.060 --> 00:14:38.070
no ability was good no ability can be
 

00:14:38.070 --> 00:14:40.490
no ability was good no ability can be
meaningful no ability was telling us

00:14:40.490 --> 00:14:40.500
meaningful no ability was telling us
 

00:14:40.500 --> 00:14:42.320
meaningful no ability was telling us
that something is missing and we should

00:14:42.320 --> 00:14:42.330
that something is missing and we should
 

00:14:42.330 --> 00:14:47.990
that something is missing and we should
really handle it so overall we saw how

00:14:47.990 --> 00:14:48.000
really handle it so overall we saw how
 

00:14:48.000 --> 00:14:49.910
really handle it so overall we saw how
all of these features from coffin-like

00:14:49.910 --> 00:14:49.920
all of these features from coffin-like
 

00:14:49.920 --> 00:14:53.120
all of these features from coffin-like
Cortines and imitability and functions

00:14:53.120 --> 00:14:53.130
Cortines and imitability and functions
 

00:14:53.130 --> 00:14:55.280
Cortines and imitability and functions
as first-class citizens can help us

00:14:55.280 --> 00:14:55.290
as first-class citizens can help us
 

00:14:55.290 --> 00:14:57.710
as first-class citizens can help us
shape our app and together with a guy to

00:14:57.710 --> 00:14:57.720
shape our app and together with a guy to
 

00:14:57.720 --> 00:14:59.800
shape our app and together with a guy to
app architecture helped us build this

00:14:59.800 --> 00:14:59.810
app architecture helped us build this
 

00:14:59.810 --> 00:15:02.600
app architecture helped us build this
maintainable this safer and faster to

00:15:02.600 --> 00:15:02.610
maintainable this safer and faster to
 

00:15:02.610 --> 00:15:04.910
maintainable this safer and faster to
develop architecture that we wanted to

00:15:04.910 --> 00:15:04.920
develop architecture that we wanted to
 

00:15:04.920 --> 00:15:07.690
develop architecture that we wanted to
have thank you

00:15:07.690 --> 00:15:07.700
have thank you
 

00:15:07.700 --> 00:15:11.840
have thank you
[Applause]

00:15:11.840 --> 00:15:11.850
[Applause]
 

00:15:11.850 --> 00:15:28.019
[Applause]
[Music]

