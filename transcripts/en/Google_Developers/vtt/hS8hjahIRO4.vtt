WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.450
[MUSIC PLAYING]

00:00:08.450 --> 00:00:10.240
MALE SPEAKER: Shanghai
GDG is a very

00:00:10.240 --> 00:00:12.320
interesting developer community.

00:00:12.320 --> 00:00:13.150
FEMALE SPEAKER: I'm
glad somebody

00:00:13.150 --> 00:00:14.390
has asked this question.

00:00:14.390 --> 00:00:15.990
MALE SPEAKER: This is where
the magic happens.

00:00:15.990 --> 00:00:16.780
FEMALE SPEAKER: This is
primarily a question and

00:00:16.780 --> 00:00:18.720
answer show, so if any
of you out there

00:00:18.720 --> 00:00:19.970
would like to ask questions.

00:00:28.590 --> 00:00:29.990
IEIN VALDEZ: We're live?

00:00:29.990 --> 00:00:30.260
Awesome.

00:00:30.260 --> 00:00:31.440
Hey, everyone.

00:00:31.440 --> 00:00:34.280
This is Iein Valdez, with the
Google App Engine developer

00:00:34.280 --> 00:00:35.340
relations team.

00:00:35.340 --> 00:00:36.800
And we're here today
to talk about

00:00:36.800 --> 00:00:38.280
Cloud SQL and App Engine.

00:00:38.280 --> 00:00:42.140
And we're pretty excited
about Cloud SQL for

00:00:42.140 --> 00:00:43.300
a variety of reasons.

00:00:43.300 --> 00:00:45.390
In particular we had the
DataStore, which was a great,

00:00:45.390 --> 00:00:52.430
non-relational data store--
super scalable, really, really

00:00:52.430 --> 00:00:54.190
great way to persist
your data.

00:00:54.190 --> 00:00:55.970
But we had a lot of developers
that wanted to use

00:00:55.970 --> 00:00:57.760
traditional, relational
databases.

00:00:57.760 --> 00:01:02.100
And so late last year we
announced Cloud SQL.

00:01:02.100 --> 00:01:03.520
And so we're here to talk
about Cloud SQL.

00:01:03.520 --> 00:01:05.489
I've got a couple of my
colleagues from Google.

00:01:05.489 --> 00:01:08.620
I have Joe Faith, who's the
product manager for Cloud SQL.

00:01:08.620 --> 00:01:12.520
I have Wally, who's also on
the engineering team.

00:01:12.520 --> 00:01:14.410
So we're going to
talk about it.

00:01:14.410 --> 00:01:15.980
And why don't we get started?

00:01:15.980 --> 00:01:18.410
We have some slides that Wally's
going to put up, and

00:01:18.410 --> 00:01:20.330
then Joe's going to give us a
quick introduction to what

00:01:20.330 --> 00:01:22.430
Cloud SQL is, some of
the highlights.

00:01:22.430 --> 00:01:25.200
And then we're going to talk
a little bit about--

00:01:25.200 --> 00:01:27.800
we have a presentation to show
you some of the strengths,

00:01:27.800 --> 00:01:29.170
some of the interesting tidbits,
and then we're

00:01:29.170 --> 00:01:30.630
actually going to go into
some code samples.

00:01:30.630 --> 00:01:33.470
And then we'll come back to Q&amp;A.
So go to the moderator

00:01:33.470 --> 00:01:34.460
link as we go through.

00:01:34.460 --> 00:01:36.830
If you have questions about
anything, just go ahead and

00:01:36.830 --> 00:01:39.030
put the questions in the
moderator, and then I'll come

00:01:39.030 --> 00:01:41.460
back and make sure that
we answer them all.

00:01:41.460 --> 00:01:42.590
All right, why don't
we kick it off?

00:01:42.590 --> 00:01:43.910
Joe?

00:01:43.910 --> 00:01:46.140
JOE FAITH: So we know that
Google's got this phenomenal

00:01:46.140 --> 00:01:46.920
infrastructure--

00:01:46.920 --> 00:01:51.090
the infrastructure we built up
for Gmail, and for search.

00:01:51.090 --> 00:01:53.720
And the question that we've
always been asking ourselves

00:01:53.720 --> 00:01:56.260
on the Cloud team is, how
do we take that awesome

00:01:56.260 --> 00:01:59.350
infrastructure and package it
in such a way so that you

00:01:59.350 --> 00:02:01.740
guys-- external developers-- can
make the best use of it?

00:02:01.740 --> 00:02:06.720
We want you guys to share the
infrastructure that we take

00:02:06.720 --> 00:02:08.940
advantage of every day.

00:02:08.940 --> 00:02:13.030
App Engine has been a great
success in how to do that.

00:02:13.030 --> 00:02:16.920
It packages up the power of the
infrastructure we've got.

00:02:16.920 --> 00:02:22.020
So that it's scalable, but built
on standard languages--

00:02:22.020 --> 00:02:23.470
like Java and Python--

00:02:23.470 --> 00:02:27.010
which makes it a lot easier for
you guys to get started.

00:02:27.010 --> 00:02:29.990
As Iein mentioned, the data
store has been a key part of

00:02:29.990 --> 00:02:33.030
the success of App Engine.

00:02:33.030 --> 00:02:35.930
You just find it so easy to
get started, with the

00:02:35.930 --> 00:02:36.680
scalability.

00:02:36.680 --> 00:02:38.840
You just don't have to worry
about some of the scalability

00:02:38.840 --> 00:02:41.780
issues you do with some of
the other data sources.

00:02:41.780 --> 00:02:45.800
But we heard you guys
saying, we want SQL.

00:02:45.800 --> 00:02:49.210
It's familiar, we've built so
many applications on it.

00:02:49.210 --> 00:02:51.910
And it's got some key features
that you just can't get with

00:02:51.910 --> 00:02:53.270
another SQL data store.

00:02:53.270 --> 00:02:56.020
It's got your robust schemas.

00:02:56.020 --> 00:02:58.320
It's got your generalized
queries.

00:02:58.320 --> 00:03:02.050
You've got your transactions,
and of course DataStore does a

00:03:02.050 --> 00:03:03.020
certain amount of that.

00:03:03.020 --> 00:03:05.210
But there's always stuff that
you want out of SQL.

00:03:05.210 --> 00:03:09.860
We listened, and we thought very
carefully about how to

00:03:09.860 --> 00:03:14.050
package up a true relational
database to take advantage of

00:03:14.050 --> 00:03:17.195
Google's infrastructure, and
which fit in with the App

00:03:17.195 --> 00:03:19.320
Engine ecosystem.

00:03:19.320 --> 00:03:22.120
And Cloud SQL is what
we came up with.

00:03:22.120 --> 00:03:24.060
We had a few key
design choices.

00:03:24.060 --> 00:03:26.090
The first was, which database.

00:03:26.090 --> 00:03:28.990
There's an awful lot
of them out there.

00:03:28.990 --> 00:03:32.090
We went and initially
with MySQL.

00:03:32.090 --> 00:03:34.420
It's the most popular open
source one out there.

00:03:34.420 --> 00:03:38.040
So many of you are familiar with
it, and it's matured a

00:03:38.040 --> 00:03:38.760
great deal.

00:03:38.760 --> 00:03:43.980
It is now a robust enterprise
class database.

00:03:43.980 --> 00:03:45.355
In some ways, it was
the obvious choice.

00:03:48.610 --> 00:03:51.690
The other choices we wanted to
make were we wanted to get

00:03:51.690 --> 00:03:56.330
very nice integration with the
existing App Engine ecosystem.

00:03:56.330 --> 00:04:00.390
That meant using standard
drivers from

00:04:00.390 --> 00:04:01.460
Java, and from Python--

00:04:01.460 --> 00:04:04.560
JDBC, Python DB-API--

00:04:04.560 --> 00:04:07.060
but at the same time
make it managed.

00:04:07.060 --> 00:04:09.470
We know what a headache
managing any kind of

00:04:09.470 --> 00:04:10.550
database can be.

00:04:10.550 --> 00:04:13.780
You've got your security
updates, your versions,

00:04:13.780 --> 00:04:16.510
managing access.

00:04:16.510 --> 00:04:17.540
We've all been there.

00:04:17.540 --> 00:04:19.700
We've all carried the pager.

00:04:19.700 --> 00:04:23.120
Basically we're now carrying
the pager for you guys.

00:04:23.120 --> 00:04:27.480
No more calls at 2 o'clock
in the morning.

00:04:27.480 --> 00:04:31.860
We also thought very carefully
about replication model.

00:04:31.860 --> 00:04:37.310
We care a great deal
about your data.

00:04:37.310 --> 00:04:40.160
Over the years at Google, we've
learned an awful lot

00:04:40.160 --> 00:04:43.510
about replication, about data
durability, and the

00:04:43.510 --> 00:04:44.630
importance of it.

00:04:44.630 --> 00:04:48.920
When you're carrying people's
data at the scale that we are

00:04:48.920 --> 00:04:52.910
in Google, it becomes
second nature.

00:04:52.910 --> 00:04:54.930
You don't take any risks
with the data.

00:04:54.930 --> 00:04:59.200
That's why we went with the
decision to, as standard, make

00:04:59.200 --> 00:05:03.920
your data multiply replicated
across multiple data centers.

00:05:03.920 --> 00:05:05.350
There's two underlying
reasons for that.

00:05:05.350 --> 00:05:07.800
And they often get conflated
and confused.

00:05:07.800 --> 00:05:10.460
The first one is data
durability.

00:05:10.460 --> 00:05:14.840
When you insert data into a
Cloud SQL database, and you

00:05:14.840 --> 00:05:17.100
return the call with an
[INAUDIBLE], saying yes, we've

00:05:17.100 --> 00:05:20.880
got your data, we have got your
data in multiple places,

00:05:20.880 --> 00:05:25.370
in multiple systems, in
multiple locations.

00:05:25.370 --> 00:05:28.170
This is synchronous
replication.

00:05:28.170 --> 00:05:33.990
We're then at a position where
we're robust against very,

00:05:33.990 --> 00:05:35.650
very large outages.

00:05:35.650 --> 00:05:40.160
If a farmer plows up a main
network cable, or hunters

00:05:40.160 --> 00:05:42.680
shoot down the cable-- and
they have done this.

00:05:42.680 --> 00:05:45.580
Hunters seem to take great
delight in shooting down

00:05:45.580 --> 00:05:46.540
network cable.

00:05:46.540 --> 00:05:50.040
Even if that happens, your
data will be safe.

00:05:50.040 --> 00:05:51.400
Not only will it be safe--

00:05:51.400 --> 00:05:54.310
and we're all familiar with the
idea of taking backups, as

00:05:54.310 --> 00:05:57.060
our grandfathers and
grandmothers tell us, keep

00:05:57.060 --> 00:05:58.560
taking backups.

00:05:58.560 --> 00:06:01.470
Not only do we have to take
backups, but this also means

00:06:01.470 --> 00:06:03.660
that your data is available.

00:06:03.660 --> 00:06:08.680
If a hunter gets trigger happy
somewhere in the United

00:06:08.680 --> 00:06:12.800
States, there'll be another data
center that can take up

00:06:12.800 --> 00:06:15.900
the load with no loss
of availability.

00:06:15.900 --> 00:06:17.700
So it's durability and

00:06:17.700 --> 00:06:21.220
availability built in a standard.

00:06:21.220 --> 00:06:26.100
That was a very important
design principle for us.

00:06:26.100 --> 00:06:28.660
We've noticed that
organizations, enterprises,

00:06:28.660 --> 00:06:33.010
businesses, put the data they
really care about in the

00:06:33.010 --> 00:06:36.580
relational database because of
the aspects like transaction

00:06:36.580 --> 00:06:37.110
processing.

00:06:37.110 --> 00:06:41.110
That's obviously why safe
financial institutions opt for

00:06:41.110 --> 00:06:43.790
relational data stores.

00:06:43.790 --> 00:06:47.136
So the last issue
is over pricing.

00:06:49.790 --> 00:06:54.070
And we wanted to work out, how
can we make best advantage of

00:06:54.070 --> 00:06:58.900
our durable, available,
distributed, replicated

00:06:58.900 --> 00:07:01.030
architecture.

00:07:01.030 --> 00:07:06.340
But then make that available to
you in the way that you'd

00:07:06.340 --> 00:07:07.620
be happy with.

00:07:07.620 --> 00:07:12.130
And a key aspect is what we
call per use pricing.

00:07:12.130 --> 00:07:18.710
Now often, when you're buying
up a relational database

00:07:18.710 --> 00:07:20.930
service, you're paying from
the moment you create that

00:07:20.930 --> 00:07:24.540
database to the moment that
you delete it and

00:07:24.540 --> 00:07:25.940
lose all your data.

00:07:25.940 --> 00:07:28.640
In the case of Cloud SQL,
we've got what we

00:07:28.640 --> 00:07:30.350
call per use pricing.

00:07:30.350 --> 00:07:32.880
That means you're only paying
for the time when your

00:07:32.880 --> 00:07:36.290
database is actually
being accessed.

00:07:36.290 --> 00:07:39.350
If a database is cold, and
you're not using it, then

00:07:39.350 --> 00:07:42.650
you're not paying
for that access.

00:07:42.650 --> 00:07:44.930
And that was a key
decision for us.

00:07:44.930 --> 00:07:49.100
It means that if you're just
trying out a system, if you

00:07:49.100 --> 00:07:50.910
want to see it's going to be
suitable for a particular

00:07:50.910 --> 00:07:54.380
project, create your database,
play around with it--

00:07:54.380 --> 00:07:56.510
don't have to delete your data,
don't have to get rid of

00:07:56.510 --> 00:07:59.050
it-- but if you're not using
it, you won't be paying.

00:07:59.050 --> 00:08:01.050
That's per use pricing.

00:08:01.050 --> 00:08:03.750
We've also got packages if
you've decided, yes, that

00:08:03.750 --> 00:08:06.690
Cloud SQL is going to fit for
your application, then we've

00:08:06.690 --> 00:08:09.350
got packages which make
it cheaper to use on

00:08:09.350 --> 00:08:12.050
a persistent basis.

00:08:12.050 --> 00:08:16.420
But those are some of the key
design decisions we took when

00:08:16.420 --> 00:08:17.990
making Cloud SQL.

00:08:17.990 --> 00:08:21.810
And I think it's worked
out quite well.

00:08:21.810 --> 00:08:23.200
IEIN VALDEZ: What I think is
really great about the way

00:08:23.200 --> 00:08:25.570
Cloud SQL is implemented, was
that it's very similar to the

00:08:25.570 --> 00:08:27.840
App Engine model, which is sort
of easy to use, easy to

00:08:27.840 --> 00:08:29.690
manage, easy to scale.

00:08:29.690 --> 00:08:31.790
And that ease of use
from a SQL--

00:08:31.790 --> 00:08:33.090
because I remember
managing a SQL

00:08:33.090 --> 00:08:35.039
database was always painful.

00:08:35.039 --> 00:08:37.669
And I think the managed service
part of Cloud SQL is

00:08:37.669 --> 00:08:39.580
actually super important.

00:08:39.580 --> 00:08:42.090
And as we kind of go through and
show you some of the-- we

00:08:42.090 --> 00:08:43.510
made it really easy to manage.

00:08:43.510 --> 00:08:46.706
But I think it is important to
also think about, you can

00:08:46.706 --> 00:08:47.920
actually mix and match
these models.

00:08:47.920 --> 00:08:50.650
So you may need DataStore for
certain things, but you also

00:08:50.650 --> 00:08:51.970
may need a relational
database.

00:08:51.970 --> 00:08:53.830
And we can use the
two together.

00:08:53.830 --> 00:08:54.720
JOE FAITH: In some ways--

00:08:54.720 --> 00:08:56.260
that's a very good point.

00:08:56.260 --> 00:08:57.900
We've had quite a
few questions.

00:08:57.900 --> 00:08:59.590
Well, which should I use?

00:08:59.590 --> 00:09:02.880
And there are advantages and
disadvantages of both.

00:09:05.850 --> 00:09:08.270
IEIN VALDEZ: There's a good
Google I/O talk on this.

00:09:08.270 --> 00:09:09.820
I think it's from
the Battle of--

00:09:09.820 --> 00:09:11.395
JOE FAITH: Battle
of the Backends.

00:09:11.395 --> 00:09:12.720
IEIN VALDEZ: Battle of the
Backends, where it compares

00:09:12.720 --> 00:09:13.890
Cloud SQL and SQL.

00:09:13.890 --> 00:09:16.190
It's got two engineering teams
competing with each other.

00:09:16.190 --> 00:09:17.600
JOE FAITH: It's actually
funny.

00:09:17.600 --> 00:09:18.620
IEIN VALDEZ: Yeah, it
is a comedy routine.

00:09:18.620 --> 00:09:21.000
JOE FAITH: You may not believe
me, but a debate about no SQL

00:09:21.000 --> 00:09:24.260
versus SQL relational data
models can be funny.

00:09:24.260 --> 00:09:25.930
IEIN VALDEZ: It's definitely
worthwhile to look at.

00:09:25.930 --> 00:09:28.420
But it is easy to mix and match
the two and use them.

00:09:28.420 --> 00:09:29.480
I've done it before.

00:09:29.480 --> 00:09:31.655
I think the last thing you might
want to point out is

00:09:31.655 --> 00:09:35.110
that the other nice thing is,
it's super easy to make them

00:09:35.110 --> 00:09:36.770
talk to each other.

00:09:36.770 --> 00:09:37.950
Maybe Wally will talk
about this.

00:09:37.950 --> 00:09:39.400
We'll see in the code.

00:09:39.400 --> 00:09:41.500
But I think the authentication
part is actually--

00:09:41.500 --> 00:09:43.700
it's really easy to connect
your App Engine app

00:09:43.700 --> 00:09:44.500
right into Cloud SQL.

00:09:44.500 --> 00:09:47.940
You don't have to manage
a bunch of nonsense.

00:09:47.940 --> 00:09:48.610
You connect them.

00:09:48.610 --> 00:09:49.380
JOE FAITH: No more nonsense.

00:09:49.380 --> 00:09:49.900
IEIN VALDEZ: Yes.

00:09:49.900 --> 00:09:51.940
Nonsense is no good.

00:09:51.940 --> 00:09:53.500
So maybe let's switch over.

00:09:53.500 --> 00:09:57.000
Wally, do you want to kind of
walk us through a couple

00:09:57.000 --> 00:09:58.970
different slides you can talk
a little bit about?

00:09:58.970 --> 00:09:59.350
WALLY YAU: Sure.

00:09:59.350 --> 00:10:02.260
Let me go through
this slide here.

00:10:02.260 --> 00:10:05.350
The first slide I'm going
over is Getting Started.

00:10:05.350 --> 00:10:09.350
How do you start using
the Cloud SQL.

00:10:09.350 --> 00:10:11.540
So to sign in actually is
really straightforward.

00:10:11.540 --> 00:10:16.220
What you do is you go to the
Google API console, and once

00:10:16.220 --> 00:10:18.280
you log onto the console,
you go to the services.

00:10:18.280 --> 00:10:20.890
Then you will see there's
an option for

00:10:20.890 --> 00:10:22.210
turning on Cloud SQL.

00:10:22.210 --> 00:10:26.200
So maybe I can step through
real quick here.

00:10:26.200 --> 00:10:29.050
So here I have an account that
I logged on already.

00:10:29.050 --> 00:10:33.820
So I go to code.google.com
API's console here.

00:10:36.950 --> 00:10:39.030
So this is my console here.

00:10:39.030 --> 00:10:42.390
So if you click on the services
tab here, then you

00:10:42.390 --> 00:10:45.880
will be able to see
the Cloud SQL.

00:10:45.880 --> 00:10:48.370
IEIN VALDEZ: And it's likely,
Wally, that if you've written

00:10:48.370 --> 00:10:50.540
against any Google APIs, you
probably already have access

00:10:50.540 --> 00:10:52.280
to the console today.

00:10:52.280 --> 00:10:54.100
So it should be familiar.

00:10:54.100 --> 00:10:56.520
WALLY YAU: So here, if you have
pricing defined already,

00:10:56.520 --> 00:10:59.880
then you can just click on
and turn it on here.

00:11:02.380 --> 00:11:05.990
Once you turn on your Cloud SQL,
then all you have to do

00:11:05.990 --> 00:11:10.520
is to install the Google
App Engine SDK.

00:11:10.520 --> 00:11:13.910
And install the Google
plug-in for Eclipse.

00:11:13.910 --> 00:11:14.930
And you're all set to go.

00:11:14.930 --> 00:11:16.850
And that's all you have to do.

00:11:16.850 --> 00:11:18.970
IEIN VALDEZ: And there's
a good tutorial online

00:11:18.970 --> 00:11:21.080
for that, as well.

00:11:21.080 --> 00:11:26.380
WALLY YAU: So once you went from
the API console, you can

00:11:26.380 --> 00:11:30.280
actually create a Cloud
SQL instance.

00:11:30.280 --> 00:11:33.560
So from here, in this screen
shot here, you can see that I

00:11:33.560 --> 00:11:36.140
have three instances
created here.

00:11:36.140 --> 00:11:38.890
And there's a way to save
new instance right here.

00:11:38.890 --> 00:11:42.310
And then when you select a new
instance, it allows you to

00:11:42.310 --> 00:11:46.510
select four different sizes,
ranging from D1

00:11:46.510 --> 00:11:48.750
all the way to D4.

00:11:48.750 --> 00:11:52.810
On the screen you can see the
differences between D1 and D4.

00:11:52.810 --> 00:11:56.900
So for D1, it's the smaller one
that gives you 0.5GB of

00:11:56.900 --> 00:11:59.650
ram and 1GB of storage.

00:11:59.650 --> 00:12:04.190
All the way up to D4, which
gives you 4GB of ram and 10GB

00:12:04.190 --> 00:12:05.440
of storage here.

00:12:09.510 --> 00:12:13.030
So once you set up all the
database instance, then you

00:12:13.030 --> 00:12:14.600
can configure access.

00:12:14.600 --> 00:12:18.920
In one of the access control, it
allows you to specify which

00:12:18.920 --> 00:12:24.660
Google App Engine application
you can allow to access that

00:12:24.660 --> 00:12:27.690
particular MySQL instance.

00:12:27.690 --> 00:12:33.590
So let me see if I can go to.

00:12:33.590 --> 00:12:38.220
So this is one of the Cloud SQL
database that I have here.

00:12:38.220 --> 00:12:42.590
And if I go back to this
instance here, if you scroll

00:12:42.590 --> 00:12:46.670
down here, then you
can see this

00:12:46.670 --> 00:12:47.990
authorize application here.

00:12:47.990 --> 00:12:52.410
You just select, and it allows
you to specify the Google App

00:12:52.410 --> 00:12:56.030
Engine application that you
allow to access that instance

00:12:56.030 --> 00:12:57.450
of the database.

00:12:57.450 --> 00:12:59.640
IEIN VALDEZ: And you can have
multiple App Engine apps

00:12:59.640 --> 00:13:00.580
share, right?

00:13:00.580 --> 00:13:04.490
WALLY YAU: From here, you can
see here, that you can

00:13:04.490 --> 00:13:06.590
associate more than one
application here.

00:13:06.590 --> 00:13:09.980
So you can see on the [? data ?]
box, you have one

00:13:09.980 --> 00:13:11.650
here and then you
have two here.

00:13:11.650 --> 00:13:15.610
So you can associate multiple
instances of the app to each

00:13:15.610 --> 00:13:20.380
instance of the MySQL
database.

00:13:20.380 --> 00:13:20.960
IEIN VALDEZ: Cool.

00:13:20.960 --> 00:13:24.980
WALLY YAU: So the next I want to
show is a live application.

00:13:24.980 --> 00:13:27.560
So this is actually a
Google App Engine

00:13:27.560 --> 00:13:30.875
application that I wrote.

00:13:30.875 --> 00:13:35.830
[TYPING]

00:13:35.830 --> 00:13:38.170
So at Google, we
have a problem.

00:13:38.170 --> 00:13:42.240
We actually allow people to ride
bikes between buildings,

00:13:42.240 --> 00:13:45.160
and a lot of times the
bike will be broken.

00:13:45.160 --> 00:13:48.740
But there's no good way to
report the broken bike.

00:13:48.740 --> 00:13:52.766
So what people do is they just
take out their seat and then

00:13:52.766 --> 00:13:54.620
they just put it in
the bike basket.

00:13:54.620 --> 00:13:57.050
But I have this idea of writing
an app that allow

00:13:57.050 --> 00:13:58.500
people to take a picture.

00:13:58.500 --> 00:14:01.910
And when they take a picture,
the broken bike

00:14:01.910 --> 00:14:04.780
will go to App Engine.

00:14:04.780 --> 00:14:07.980
And then the App Engine will
store in the MySQL database.

00:14:07.980 --> 00:14:10.670
So here, you can have some
sample data that you can see

00:14:10.670 --> 00:14:11.680
on the screen.

00:14:11.680 --> 00:14:13.840
So each marker represents
a broken bike.

00:14:13.840 --> 00:14:17.030
So if you click on the marker
here, and then just pull out

00:14:17.030 --> 00:14:22.320
the picture of the broken bike,
and then you will see

00:14:22.320 --> 00:14:24.360
who reports it and
the data report,

00:14:24.360 --> 00:14:25.965
the day of the incident.

00:14:28.660 --> 00:14:30.945
IEIN VALDEZ: Did you build
this in Java or Python?

00:14:30.945 --> 00:14:31.940
WALLY YAU: I built
this in Java.

00:14:31.940 --> 00:14:33.155
So I'm going to show
you some code here.

00:14:33.155 --> 00:14:34.870
IEIN VALDEZ: Okay, cool.

00:14:34.870 --> 00:14:37.150
WALLY YAU: So the code is very
straightforward here.

00:14:37.150 --> 00:14:40.670
I have a JSP page called
Gbike.jsp.

00:14:40.670 --> 00:14:48.580
So in the Gbike.jsp here, this
is the page that actually gets

00:14:48.580 --> 00:14:53.510
the list of broken bikes and
then display on the map.

00:14:53.510 --> 00:15:00.160
So I wrap the database in Java
technology based GIDB, and

00:15:00.160 --> 00:15:01.410
here is really important.

00:15:01.410 --> 00:15:04.660
I create a connection first.

00:15:04.660 --> 00:15:07.920
I used the standard Java manager
to get a connection to

00:15:07.920 --> 00:15:08.990
the database.

00:15:08.990 --> 00:15:12.700
And then I call my database
object, and then get the list

00:15:12.700 --> 00:15:14.360
of broken bikes.

00:15:14.360 --> 00:15:18.080
JOE FAITH: So all that's
just vanilla JSP?

00:15:18.080 --> 00:15:19.510
WALLY YAU: Yes, vanilla
JSP, yeah.

00:15:19.510 --> 00:15:21.560
JOE FAITH: So that could
be running on anything?

00:15:21.560 --> 00:15:22.430
WALLY YAU: Right.

00:15:22.430 --> 00:15:29.180
So if you look at the method
to get a broken bike, it's

00:15:29.180 --> 00:15:30.910
really just straightforward.

00:15:30.910 --> 00:15:33.240
It's just select statement right
here, and then prepare

00:15:33.240 --> 00:15:34.155
the statement, and then execute

00:15:34.155 --> 00:15:36.360
it against the database.

00:15:36.360 --> 00:15:40.340
IEIN VALDEZ: So anyone that's
built JSPs or JDBCs, it should

00:15:40.340 --> 00:15:41.840
be second nature to
be able to use it.

00:15:41.840 --> 00:15:42.920
JOE FAITH: It'd be
trivial to pull

00:15:42.920 --> 00:15:44.610
stuff over to the platform.

00:15:44.610 --> 00:15:47.170
WALLY YAU: So there's something
that I want to point

00:15:47.170 --> 00:15:50.440
out right here, is
the connection.

00:15:50.440 --> 00:15:54.000
So it is recommend that you
create a connection at the

00:15:54.000 --> 00:15:56.880
beginning of the servlet, and
then after you're done with

00:15:56.880 --> 00:15:58.900
it, you close the connection.

00:15:58.900 --> 00:16:00.460
And there's a reason for it.

00:16:00.460 --> 00:16:03.250
Because the way the MySQL
database that's running on the

00:16:03.250 --> 00:16:06.470
Cloud is very different than the
MySQL that you run on the

00:16:06.470 --> 00:16:07.890
local instance.

00:16:07.890 --> 00:16:11.310
So when you set up a local box,
you install your local

00:16:11.310 --> 00:16:12.550
MySQL instance.

00:16:12.550 --> 00:16:15.000
That instance will always
run as long as your

00:16:15.000 --> 00:16:16.590
box is up and running.

00:16:16.590 --> 00:16:19.880
But in the case of MySQL running
on the Cloud, if

00:16:19.880 --> 00:16:24.130
you're instance is idol, we will
conserve it, and we'll

00:16:24.130 --> 00:16:25.850
take it down and put
it to sleep.

00:16:25.850 --> 00:16:29.280
So say if you try to hold onto
a connection for too long,

00:16:29.280 --> 00:16:32.280
your instance of the MySQL
running on the Cloud may not

00:16:32.280 --> 00:16:34.010
be up anymore.

00:16:34.010 --> 00:16:36.530
So if you try to use the
connection again, you will get

00:16:36.530 --> 00:16:39.070
an invalid connection
in that case.

00:16:39.070 --> 00:16:41.620
JOE FAITH: It's worth pointing
out that this idea of not

00:16:41.620 --> 00:16:44.600
using connection pooling, a
pattern that we've all been

00:16:44.600 --> 00:16:47.230
familiar with.

00:16:47.230 --> 00:16:49.440
If you're using connection
pooling, you'd still have to

00:16:49.440 --> 00:16:50.950
test every connection.

00:16:50.950 --> 00:16:54.170
Now on MySQL, it takes as long
to test a connection as it

00:16:54.170 --> 00:16:55.270
does to create one.

00:16:55.270 --> 00:16:58.840
So this method is just as fast
as connection pooling.

00:16:58.840 --> 00:17:00.960
You're not losing
any performance.

00:17:00.960 --> 00:17:03.650
IEIN VALDEZ: I think it's even
a little bit faster.

00:17:03.650 --> 00:17:05.800
Just a tiny bit.

00:17:05.800 --> 00:17:07.990
It's just so much faster just
to open a brand new

00:17:07.990 --> 00:17:09.849
connection.

00:17:09.849 --> 00:17:12.030
JOE FAITH: It then makes
the application so

00:17:12.030 --> 00:17:13.019
much easier to manage.

00:17:13.019 --> 00:17:14.550
You can take it up
and take it down.

00:17:14.550 --> 00:17:15.849
IEIN VALDEZ: Well and your
data center may go away

00:17:15.849 --> 00:17:19.329
somewhere, and your applications
seamlessly work

00:17:19.329 --> 00:17:20.329
somewhere else.

00:17:20.329 --> 00:17:24.109
That is the benefit of Cloud,
you just don't know.

00:17:24.109 --> 00:17:27.170
Very cool.

00:17:27.170 --> 00:17:28.140
Now, did you have to put in--

00:17:28.140 --> 00:17:29.990
I can't see the screen
from here-- but did

00:17:29.990 --> 00:17:30.940
you have to put a--

00:17:30.940 --> 00:17:31.840
you don't have to put
a username and

00:17:31.840 --> 00:17:33.350
password in there right--

00:17:33.350 --> 00:17:33.950
WALLY YAU: No, I don't.

00:17:33.950 --> 00:17:34.080
IEIN VALDEZ: --to connect?

00:17:34.080 --> 00:17:35.540
Because that's part of
when you initially

00:17:35.540 --> 00:17:37.220
created that link.

00:17:37.220 --> 00:17:38.830
It makes it really
easy to use.

00:17:38.830 --> 00:17:40.920
JOE FAITH: It's a very robust
security model actually,

00:17:40.920 --> 00:17:42.835
directly authorized from
that application.

00:17:45.680 --> 00:17:48.250
IEIN VALDEZ: Now what
about users?

00:17:48.250 --> 00:17:49.990
You can give it to
applications,

00:17:49.990 --> 00:17:51.570
right, in this case?

00:17:51.570 --> 00:17:53.110
But we can also give
it to users, right?

00:17:53.110 --> 00:17:54.520
If you want to be able to
use maybe some of the

00:17:54.520 --> 00:17:57.700
command line tools.

00:17:57.700 --> 00:17:59.920
JOE FAITH: On that G-byte thing,
it's worth pointing

00:17:59.920 --> 00:18:03.830
out, that we're using Cloud
SQL widely internally.

00:18:03.830 --> 00:18:07.420
We're using it all over the
place within Google.

00:18:07.420 --> 00:18:11.840
The Org Chart is in Cloud SQL.

00:18:11.840 --> 00:18:14.900
So Larry Page is CEO because of
Cloud SQL, I like to think.

00:18:14.900 --> 00:18:16.630
IEIN VALDEZ: Well yeah, we like
to use our own technology

00:18:16.630 --> 00:18:19.940
stuff, and we do have a need
for relational databases

00:18:19.940 --> 00:18:22.330
inside of Google as well.

00:18:22.330 --> 00:18:25.340
WALLY YAU: OK, so the other
thing I'd like to show is how

00:18:25.340 --> 00:18:29.305
easy it is to use a command
prompt to log onto the

00:18:29.305 --> 00:18:30.250
instance of the MySQL.

00:18:30.250 --> 00:18:31.100
IEIN VALDEZ: There
we go, cool.

00:18:31.100 --> 00:18:35.980
WALLY YAU: So here, Google
actually provided a command

00:18:35.980 --> 00:18:37.790
show utility that you can use.

00:18:37.790 --> 00:18:41.610
To use it, all you have to do
is to download the package,

00:18:41.610 --> 00:18:45.060
and then specify the name of
your database instance.

00:18:45.060 --> 00:18:48.940
So on the screen, I have
that all ready to go.

00:18:54.960 --> 00:18:57.840
IEIN VALDEZ: The instance
is waking up maybe.

00:18:57.840 --> 00:19:03.460
WALLY YAU: OK, so once the
command comes back, this is

00:19:03.460 --> 00:19:04.850
very familiar--

00:19:04.850 --> 00:19:07.660
SQL, greater-than sign here.

00:19:07.660 --> 00:19:09.570
So you can say, show database.

00:19:15.652 --> 00:19:19.760
OK, so these are very,
very familiar to you.

00:19:19.760 --> 00:19:22.960
It's just a standard SQL syntax
that you can use.

00:19:25.590 --> 00:19:27.080
IEIN VALDEZ: And you can use
this command tool for

00:19:27.080 --> 00:19:29.160
scripting as well, right?

00:19:29.160 --> 00:19:32.340
Like if you want to write
scripts to export things.

00:19:32.340 --> 00:19:34.525
I remember in my old SQL days
I used to do a lot of

00:19:34.525 --> 00:19:37.870
scripting, and have to get
things in and out.

00:19:37.870 --> 00:19:40.020
JOE FAITH: You'll end up doing
a lot less of that.

00:19:40.020 --> 00:19:42.270
Because there are tools for,
say, importing and

00:19:42.270 --> 00:19:43.260
exporting the data.

00:19:43.260 --> 00:19:48.250
And they enter into
Cloud storage.

00:19:48.250 --> 00:19:53.210
WALLY YAU: OK, so just to show
you how I can import the

00:19:53.210 --> 00:19:57.490
database very easily, I have
here a database schema, a

00:19:57.490 --> 00:19:59.180
sample database schema.

00:19:59.180 --> 00:20:00.790
So in this sample database
schema, I have

00:20:00.790 --> 00:20:03.570
about close to 80 tables.

00:20:03.570 --> 00:20:05.760
And you can see the
schema here.

00:20:05.760 --> 00:20:08.220
So one thing I want to point
out here-- if you look

00:20:08.220 --> 00:20:09.420
carefully here--

00:20:09.420 --> 00:20:14.780
when I do a MySQL dump on the
original database schema that

00:20:14.780 --> 00:20:18.830
I have, the engine is
all set to MyISAM.

00:20:18.830 --> 00:20:20.890
So I took the care--

00:20:20.890 --> 00:20:24.180
I actually changed all of MyISAM
table into the InnoDB

00:20:24.180 --> 00:20:26.370
table, and there's
a reason for it.

00:20:26.370 --> 00:20:30.620
The reason is that MyISAM
performance is very, very slow

00:20:30.620 --> 00:20:33.720
compared to InnoDB
on the Cloud SQL.

00:20:33.720 --> 00:20:36.040
So you have to make sure
that you use InnoDB.

00:20:36.040 --> 00:20:39.060
JOE FAITH: And you don't have
the same referential integrity

00:20:39.060 --> 00:20:40.730
constraints.

00:20:40.730 --> 00:20:44.780
For a whole bunch of reasons,
stick with InnoDB.

00:20:44.780 --> 00:20:50.080
WALLY YAU: So, in order to
import this database schema

00:20:50.080 --> 00:20:55.740
into the Cloud SQL, all I have
to do is to do the same thing.

00:21:00.800 --> 00:21:08.910
So I run my Cloud SQL command
prompt, specify my instance,

00:21:08.910 --> 00:21:15.910
and then just redirect my
SQL schema in there.

00:21:15.910 --> 00:21:16.910
And then they'll be chunking.

00:21:16.910 --> 00:21:19.650
Because there's close to 80
tables, it's going to take

00:21:19.650 --> 00:21:22.840
about a few minutes.

00:21:22.840 --> 00:21:24.070
IEIN VALDEZ: Very cool.

00:21:24.070 --> 00:21:25.700
I'm sorry, I can't see
from here, but what

00:21:25.700 --> 00:21:28.530
exactly are you importing?

00:21:28.530 --> 00:21:31.570
WALLY YAU: It's the database
schema that I exported from.

00:21:31.570 --> 00:21:32.460
IEIN VALDEZ: OK, from
another database.

00:21:32.460 --> 00:21:34.490
So you're just importing it.

00:21:34.490 --> 00:21:37.110
Now can you--

00:21:37.110 --> 00:21:39.700
let's say I'm a developer and
I have MySQL on my desktop--

00:21:39.700 --> 00:21:44.950
can I import my MySQL backup
into Cloud SQL?

00:21:44.950 --> 00:21:50.040
JOE FAITH: Yeah, you can take
a dump from your local

00:21:50.040 --> 00:21:54.310
machine, and import it-- upload
into Cloud Storage.

00:21:54.310 --> 00:21:55.230
IEIN VALDEZ: And actually
it's worth

00:21:55.230 --> 00:21:57.130
pointing out Cloud Storage.

00:21:57.130 --> 00:21:58.430
I don't know if we talked
about that.

00:21:58.430 --> 00:22:03.100
But it may or may not be
apparent, but one of the nice

00:22:03.100 --> 00:22:04.820
things is this is also linked
into Cloud Storage.

00:22:04.820 --> 00:22:09.870
You can use Cloud Storage to
take backups of your data, and

00:22:09.870 --> 00:22:11.880
dump them in there so you
can pull them later.

00:22:11.880 --> 00:22:13.870
JOE FAITH: Yeah, you can take
an import and export

00:22:13.870 --> 00:22:14.600
any time you like.

00:22:14.600 --> 00:22:18.275
We've also got managed backups,
which we take, and

00:22:18.275 --> 00:22:18.840
you take them--

00:22:18.840 --> 00:22:25.940
might be included as part of
seven backups stored, which

00:22:25.940 --> 00:22:28.460
are done in a scheduled
manner.

00:22:28.460 --> 00:22:31.320
You can restore from any of
those, as well as getting your

00:22:31.320 --> 00:22:32.570
data in and out.

00:22:32.570 --> 00:22:32.790
IEIN VALDEZ: In and out.

00:22:32.790 --> 00:22:34.190
Yeah, it's a good mechanism
for moving

00:22:34.190 --> 00:22:35.090
data back and forth.

00:22:35.090 --> 00:22:40.017
JOE FAITH: It tends to be a
little bit quicker than doing

00:22:40.017 --> 00:22:41.570
it from the command line.

00:22:41.570 --> 00:22:43.264
WALLY YAU: Oh yeah, because of
the network traffic that you

00:22:43.264 --> 00:22:45.650
have to go through.

00:22:45.650 --> 00:22:48.250
JOE FAITH: That's a nice use of
how you can just use your

00:22:48.250 --> 00:22:51.030
standard MySQL scripting.

00:22:51.030 --> 00:22:52.290
IEIN VALDEZ: Yeah, so if you
have scripts that you've

00:22:52.290 --> 00:22:54.680
already built to get certain
stats out, or data out, or

00:22:54.680 --> 00:22:57.470
import/export stuff, you
can sort of reuse that.

00:22:57.470 --> 00:22:59.290
WALLY YAU: So the import
process just finished.

00:22:59.290 --> 00:23:01.010
IEIN VALDEZ: OK, cool.

00:23:01.010 --> 00:23:02.790
So we can check it out?

00:23:02.790 --> 00:23:03.730
WALLY YAU: Yeah, we
can check it out.

00:23:03.730 --> 00:23:05.320
IEIN VALDEZ: We don't have
to, I believe you.

00:23:05.320 --> 00:23:06.350
JOE FAITH: I believe him.

00:23:06.350 --> 00:23:07.600
I believe him.

00:23:09.510 --> 00:23:10.730
IEIN VALDEZ: Cool.

00:23:10.730 --> 00:23:14.140
The other thing that's actually
worth pointing out--

00:23:14.140 --> 00:23:17.690
there's a tutorial for this, as
well-- but you can also, if

00:23:17.690 --> 00:23:22.670
you have Java tools
that use JDBC.

00:23:22.670 --> 00:23:26.790
So for instance, SQL scroll,
what is it called?

00:23:26.790 --> 00:23:28.040
JOE FAITH: Yeah, there's
a bunch of SQL scroll.

00:23:28.040 --> 00:23:30.440
IEIN VALDEZ: Anything that uses
a JDBC driver, you can

00:23:30.440 --> 00:23:33.310
basically, if you have a tool
that you use to manage your

00:23:33.310 --> 00:23:37.510
data, and it has the ability to
use a standard JDBC driver,

00:23:37.510 --> 00:23:38.760
we can basically plug that in.

00:23:38.760 --> 00:23:40.870
JOE FAITH: Crystal report,
full standard [INAUDIBLE]

00:23:40.870 --> 00:23:41.430
and report.

00:23:41.430 --> 00:23:43.560
IEIN VALDEZ: So that's another
nice benefit, I think, that

00:23:43.560 --> 00:23:46.730
maybe doesn't come
across a lot.

00:23:46.730 --> 00:23:47.010
Cool.

00:23:47.010 --> 00:23:48.060
Did you have anything
else, Wally, you

00:23:48.060 --> 00:23:49.010
wanted to talk about?

00:23:49.010 --> 00:23:50.350
WALLY YAU: I think that's
all I have.

00:23:50.350 --> 00:23:51.960
IEIN VALDEZ: OK, great.

00:23:51.960 --> 00:23:53.520
This is awesome.

00:23:53.520 --> 00:23:55.490
Let's go ahead and take a look
at some of the questions

00:23:55.490 --> 00:23:57.260
people have.

00:23:57.260 --> 00:24:00.950
I have our Google
Moderator here.

00:24:00.950 --> 00:24:04.750
It looks like we have nine
questions from the audience.

00:24:04.750 --> 00:24:07.940
So we'll go ahead and
go through these.

00:24:07.940 --> 00:24:09.210
I'll just ask the question
out loud and you

00:24:09.210 --> 00:24:10.050
guys can jump at it.

00:24:10.050 --> 00:24:12.950
So the first question is,
considering a scenario that

00:24:12.950 --> 00:24:16.440
one has a website serving an
application using Java MySQL

00:24:16.440 --> 00:24:20.690
and it's not being migrated, how
will MySQL go in the App

00:24:20.690 --> 00:24:21.400
Engine database?

00:24:21.400 --> 00:24:23.000
I think this is just
an export question.

00:24:23.000 --> 00:24:23.480
JOE FAITH: Yes.

00:24:23.480 --> 00:24:26.020
I think there might be slight
confusion when talking about

00:24:26.020 --> 00:24:27.030
App Engine database.

00:24:27.030 --> 00:24:28.700
Do they mean DataStore?

00:24:28.700 --> 00:24:29.320
IEIN VALDEZ: DataStore, OK.

00:24:29.320 --> 00:24:30.320
JOE FAITH: Yeah.

00:24:30.320 --> 00:24:32.610
DataStore is your
no SQL database.

00:24:32.610 --> 00:24:36.400
Cloud SQL is a SQL database,
hence the name.

00:24:36.400 --> 00:24:38.800
So the MySQL wouldn't go
into the DataStore.

00:24:38.800 --> 00:24:40.400
IEIN VALDEZ: It would go
into the Cloud SQL.

00:24:40.400 --> 00:24:43.900
Yeah, so it would go from MySQL,
your server, into the

00:24:43.900 --> 00:24:46.460
Cloud SQL, which
is equivalent.

00:24:46.460 --> 00:24:48.280
WALLY YAU: I hope the demo that
I just did will answer

00:24:48.280 --> 00:24:51.190
his question as well.

00:24:51.190 --> 00:24:52.780
Just to show you how easy
it is to import

00:24:52.780 --> 00:24:54.130
the data from SQL.

00:24:54.130 --> 00:24:56.700
JOE FAITH: If you go to the
Cloud SQL homepage, click

00:24:56.700 --> 00:24:58.070
under tools and resources.

00:24:58.070 --> 00:25:00.520
There's a page on how to import

00:25:00.520 --> 00:25:01.240
and export your database.

00:25:01.240 --> 00:25:02.720
It's very straightforward.

00:25:02.720 --> 00:25:03.760
IEIN VALDEZ: Very cool.

00:25:03.760 --> 00:25:04.470
OK, great.

00:25:04.470 --> 00:25:06.330
The next question
is from Hector.

00:25:06.330 --> 00:25:09.270
It's triggers and stored
procedures, is it supported?

00:25:09.270 --> 00:25:11.780
If so, what kind of interaction
can we implement

00:25:11.780 --> 00:25:13.590
within the App Engine code?

00:25:13.590 --> 00:25:15.620
I have some thoughts on
this, but maybe you

00:25:15.620 --> 00:25:16.120
guys have some more.

00:25:16.120 --> 00:25:17.290
JOE FAITH: I'm just thinking
Hector's in Martinique.

00:25:17.290 --> 00:25:20.320
If he invites us out
there, then we'll

00:25:20.320 --> 00:25:21.840
demonstrate it in person.

00:25:21.840 --> 00:25:24.385
IEIN VALDEZ: Exactly.

00:25:24.385 --> 00:25:26.740
JOE FAITH: So triggers and
stored procedures, yes,

00:25:26.740 --> 00:25:27.210
they're supported.

00:25:27.210 --> 00:25:29.890
We don't support user
defined functions.

00:25:29.890 --> 00:25:32.360
There's a couple of things like
that which, purely for

00:25:32.360 --> 00:25:34.260
Cloud security, were
implemented.

00:25:34.260 --> 00:25:38.410
But triggers and stored
procedures are.

00:25:38.410 --> 00:25:40.000
What kind of interaction can we

00:25:40.000 --> 00:25:42.410
implement within App Engine?

00:25:42.410 --> 00:25:45.490
I'm just tempted to say all the
standard stuff you do from

00:25:45.490 --> 00:25:47.940
an application in
Java and Python.

00:25:47.940 --> 00:25:51.710
IEIN VALDEZ: It should work

00:25:51.710 --> 00:25:54.780
JOE FAITH: Cascade deletes,
auto updates.

00:25:54.780 --> 00:25:57.560
IEIN VALDEZ: Yeah, anything you
would open a connection to

00:25:57.560 --> 00:25:59.500
the database and execute
a query, right?

00:25:59.500 --> 00:26:03.780
The same thing should work
here, so that's cool.

00:26:03.780 --> 00:26:06.620
A slightly unrelated question,
from [? Levee ?], which is

00:26:06.620 --> 00:26:08.110
would you please consider
adding a pricing

00:26:08.110 --> 00:26:09.250
calculator for GAE.

00:26:09.250 --> 00:26:10.930
And I think this is a
really great idea.

00:26:10.930 --> 00:26:13.940
I think we've been wanting
to do this for a while.

00:26:13.940 --> 00:26:16.050
I'll go back and talk to
the team about it.

00:26:16.050 --> 00:26:18.570
It probably would be good to
have a pricing calculator for

00:26:18.570 --> 00:26:20.360
Cloud SQL, potentially,
though it seems pretty

00:26:20.360 --> 00:26:21.710
straightforward to me.

00:26:21.710 --> 00:26:22.980
JOE FAITH: Yes.

00:26:22.980 --> 00:26:25.220
It's a slightly different
pricing model, because we

00:26:25.220 --> 00:26:28.150
listened to how people are
wanting to use it.

00:26:28.150 --> 00:26:30.750
The preference within
App Engine--

00:26:30.750 --> 00:26:33.980
everything managed, you
want your quotas.

00:26:33.980 --> 00:26:37.200
Within Cloud SQL, you don't
particularly want your

00:26:37.200 --> 00:26:39.245
instance to be turned off
by [INTERPOSING VOICES].

00:26:39.245 --> 00:26:41.530
So it's a slightly different
pricing model because that's

00:26:41.530 --> 00:26:44.210
how people were using
it differently.

00:26:44.210 --> 00:26:45.180
IEIN VALDEZ: OK, cool.

00:26:45.180 --> 00:26:47.900
We have a question from
Muhammed, which is, I want to

00:26:47.900 --> 00:26:50.600
use Jango on App Engine
with Cloud SQL.

00:26:50.600 --> 00:26:53.210
What's the maximum number of
concurrent requests that can

00:26:53.210 --> 00:26:55.460
be serviced?

00:26:55.460 --> 00:26:56.360
Let's start there.

00:26:56.360 --> 00:26:58.100
I have some thoughts
on this, but do you

00:26:58.100 --> 00:26:59.900
guys have any thoughts?

00:26:59.900 --> 00:27:00.270
JOE FAITH: Firstly, yes.

00:27:00.270 --> 00:27:04.230
There's an article on using
Jango on App Engine.

00:27:04.230 --> 00:27:05.630
IEIN VALDEZ: The getting
started guide, yes.

00:27:05.630 --> 00:27:07.580
JOE FAITH: Yes.

00:27:07.580 --> 00:27:12.530
And Jango is a really nice
framework for Python.

00:27:12.530 --> 00:27:16.110
But whenever you start using a
framework, you get a trade off

00:27:16.110 --> 00:27:20.910
between performance and
productivity and ease of use.

00:27:20.910 --> 00:27:23.730
And there is that trade
off with Jango.

00:27:23.730 --> 00:27:28.460
It adds extra overhead.

00:27:28.460 --> 00:27:30.890
To the maximum concurrent
requests that can be

00:27:30.890 --> 00:27:32.330
responsibly served--

00:27:32.330 --> 00:27:34.040
how long is a piece of string?

00:27:34.040 --> 00:27:38.290
It depends so much on the
particular application.

00:27:38.290 --> 00:27:42.260
I really suggest trying it
out with your particular

00:27:42.260 --> 00:27:44.030
application.

00:27:44.030 --> 00:27:45.500
IEIN VALDEZ: Yeah, I would say
benchmark it, for sure, and

00:27:45.500 --> 00:27:46.880
just see what ceiling you hit.

00:27:46.880 --> 00:27:48.780
And there's a bunch of
strategies to sort of get

00:27:48.780 --> 00:27:49.240
around that.

00:27:49.240 --> 00:27:50.670
You can add more instances.

00:27:50.670 --> 00:27:52.470
You're not just tied to a
single instance, right?

00:27:52.470 --> 00:27:54.280
You can actually shard
instances.

00:27:54.280 --> 00:27:55.330
I've seen people
do this before.

00:27:55.330 --> 00:27:56.830
Wally might have some
other thoughts.

00:27:56.830 --> 00:27:58.800
WALLY YAU: Isn't there a maximum
connections that we

00:27:58.800 --> 00:28:01.440
can have for My SQL?

00:28:01.440 --> 00:28:03.603
JOE FAITH: Yes.

00:28:03.603 --> 00:28:05.450
Around a hundred.

00:28:05.450 --> 00:28:10.150
But that's more of a question
of performance rather than

00:28:10.150 --> 00:28:14.630
just the concurrent connections,
I think.

00:28:14.630 --> 00:28:15.990
IEIN VALDEZ: I would say
to try to benchmark.

00:28:15.990 --> 00:28:17.400
I think that's probably
the best way.

00:28:17.400 --> 00:28:21.020
And then if you do run into
issues, there's a couple

00:28:21.020 --> 00:28:22.190
different ways you
can interact.

00:28:22.190 --> 00:28:23.670
We have a discussion
group, and we

00:28:23.670 --> 00:28:25.980
also use stack overflow.

00:28:25.980 --> 00:28:29.200
So there's a Cloud SQL tag on
stack overflow and an App

00:28:29.200 --> 00:28:29.890
Engine tag.

00:28:29.890 --> 00:28:32.560
So if you definitely have
questions, or you're running

00:28:32.560 --> 00:28:35.750
into problems, post to the
community or back to the

00:28:35.750 --> 00:28:37.540
discussion group.

00:28:37.540 --> 00:28:40.910
JOE FAITH: I think there's a
wider point in general about

00:28:40.910 --> 00:28:44.970
the different philosophies
between no SQL and SQL.

00:28:44.970 --> 00:28:48.140
In some ways, people have made a
little sport with DataStore,

00:28:48.140 --> 00:28:49.380
because it is so scalable.

00:28:49.380 --> 00:28:54.680
You can just throw queries out
at it, and you just won't see

00:28:54.680 --> 00:28:56.160
any difference.

00:28:56.160 --> 00:28:58.540
Cloud SQL, because it's a
relation, because it has

00:28:58.540 --> 00:29:02.250
robust acid transactions, it's
more of a fixed pipe.

00:29:02.250 --> 00:29:05.950
In order to maintain those
acidic transactions, there are

00:29:05.950 --> 00:29:08.820
more limits on what it can do.

00:29:08.820 --> 00:29:15.350
Therefore, it's always
advisable, during load testing

00:29:15.350 --> 00:29:17.050
with any new application.

00:29:17.050 --> 00:29:20.570
Especially if you're expecting
a big peak in traffic.

00:29:20.570 --> 00:29:25.910
We wouldn't want to get you
slashdotted and hurt.

00:29:25.910 --> 00:29:29.870
It also reflects the type of
applications that each one is

00:29:29.870 --> 00:29:31.290
more suitable for.

00:29:31.290 --> 00:29:34.860
If you've got an application
where you want to do some kind

00:29:34.860 --> 00:29:38.530
of locking, you're just dumping
data, very, very fast

00:29:38.530 --> 00:29:41.980
reads, to a data store,
DataStore

00:29:41.980 --> 00:29:43.240
would be a better fit.

00:29:43.240 --> 00:29:46.670
If you've got much more
structured data that you want

00:29:46.670 --> 00:29:51.680
to do many more generalized
queries on, but don't want to

00:29:51.680 --> 00:29:54.980
worry about maintaining your own
indexes, Cloud SQL would

00:29:54.980 --> 00:29:57.070
be more suitable.

00:29:57.070 --> 00:30:02.690
Think carefully about what's
going to be the most suitable

00:30:02.690 --> 00:30:03.990
way of storing your data.

00:30:03.990 --> 00:30:06.880
As I mentioned, there's that
great talk from Google I/O. If

00:30:06.880 --> 00:30:08.570
you go to the Google I/O
videos, look for

00:30:08.570 --> 00:30:10.060
Battle of the Backends.

00:30:10.060 --> 00:30:14.280
They go through a few
key use cases there.

00:30:14.280 --> 00:30:15.970
IEIN VALDEZ: The one other
interesting part of this

00:30:15.970 --> 00:30:19.920
question, which is asking about
if the app was database

00:30:19.920 --> 00:30:22.630
read or write intensive,
or read intensive.

00:30:22.630 --> 00:30:24.764
But I think the crux of the
question was sort of toward

00:30:24.764 --> 00:30:28.510
the end, which is what happens
if traffic exceeds that limit?

00:30:28.510 --> 00:30:31.910
Do we throw exceptions, or how
do we throttle that back?

00:30:31.910 --> 00:30:38.600
JOE FAITH: It will degrade
gracefully up to the point at

00:30:38.600 --> 00:30:43.460
which your App Engine responses
are timing out.

00:30:43.460 --> 00:30:45.210
IEIN VALDEZ: Okay, cool.

00:30:45.210 --> 00:30:48.770
All right, we have another
question here from

00:30:48.770 --> 00:30:49.090
[? Castoob. ?]

00:30:49.090 --> 00:30:51.970
I apologize if I didn't
say your name right.

00:30:51.970 --> 00:30:55.530
The question is, considering
a scenario where there's a

00:30:55.530 --> 00:30:59.010
website serving an application
using Java MySQL and it now

00:30:59.010 --> 00:31:01.220
needs to be migrated
to App Engine--

00:31:01.220 --> 00:31:07.380
oh this seems a duplicate
question, or it moved.

00:31:07.380 --> 00:31:08.250
OK, this is real time.

00:31:08.250 --> 00:31:09.070
So there we go.

00:31:09.070 --> 00:31:10.960
It's humor for the day.

00:31:10.960 --> 00:31:13.905
How do I implement parallel
authorization for my App

00:31:13.905 --> 00:31:18.330
Engine app with Google ID along
with my website ID?

00:31:18.330 --> 00:31:19.520
How does that concept work?

00:31:19.520 --> 00:31:23.220
I think the question here
is about using the

00:31:23.220 --> 00:31:24.533
Google users service--

00:31:27.550 --> 00:31:31.410
the user API-- to basically
authorize a Gmail user, or a

00:31:31.410 --> 00:31:35.250
Google Apps domain, with
the application.

00:31:35.250 --> 00:31:38.690
But I don't think that concept
falls down into the database,

00:31:38.690 --> 00:31:41.120
unless you want to explicitly
authorize.

00:31:41.120 --> 00:31:43.620
JOE FAITH: As with the rest of
the console, you can authorize

00:31:43.620 --> 00:31:47.510
individual users to
read or write.

00:31:47.510 --> 00:31:49.270
IEIN VALDEZ: Yeah, I don't think
it makes sense to say

00:31:49.270 --> 00:31:51.620
all 100 people in the domain
would get access.

00:31:51.620 --> 00:31:55.390
You would have to manually
authorize it, I think, if I

00:31:55.390 --> 00:31:57.010
understand the question
correctly.

00:31:57.010 --> 00:32:00.250
But there's good documentation
on the users' API for both

00:32:00.250 --> 00:32:01.540
Python and Java.

00:32:01.540 --> 00:32:04.630
And then you can also look at
the section on authorization

00:32:04.630 --> 00:32:05.280
for Cloud SQL.

00:32:05.280 --> 00:32:10.630
It does talk about per app, as
well as individual users.

00:32:10.630 --> 00:32:13.770
Is it possible to integrate
an app running on AWS

00:32:13.770 --> 00:32:14.900
to use Cloud SQL.

00:32:14.900 --> 00:32:17.290
JOE FAITH: Yes.

00:32:17.290 --> 00:32:20.590
We've got JDBC, and
that will work.

00:32:20.590 --> 00:32:23.330
Always bear in mind that if
you're running applications on

00:32:23.330 --> 00:32:27.920
a different network to, or
remotely from, the database,

00:32:27.920 --> 00:32:30.420
the new latency, you'll
take a hit there.

00:32:30.420 --> 00:32:31.940
But yes, certainly possible.

00:32:31.940 --> 00:32:32.800
IEIN VALDEZ: OK, cool.

00:32:32.800 --> 00:32:34.990
So you can use Cloud SQL from
other Cloud services.

00:32:34.990 --> 00:32:37.020
JOE FAITH: Yeah, from
anywhere else.

00:32:37.020 --> 00:32:38.620
IEIN VALDEZ: OK, great.

00:32:38.620 --> 00:32:42.100
OK, let's see.

00:32:42.100 --> 00:32:43.710
What do you call--

00:32:43.710 --> 00:32:47.490
I'm trying to intuiting this
question here-- which is what

00:32:47.490 --> 00:32:49.970
do you call a product developed
on App Engine as a

00:32:49.970 --> 00:32:52.330
whole, in terms of Cloud--
infrastructure as a service,

00:32:52.330 --> 00:32:54.170
platform as a service, or
software as a service?

00:32:54.170 --> 00:32:57.010
I think this is generically
talking about App Engine.

00:32:57.010 --> 00:32:59.100
App Engine's platform
is a service, right?

00:32:59.100 --> 00:33:00.780
So there's no infrastructure
you run or manage.

00:33:00.780 --> 00:33:01.760
You write your code.

00:33:01.760 --> 00:33:05.250
And Cloud SQL fits into
that bucket as well.

00:33:05.250 --> 00:33:05.391
JOE FAITH: Yes.

00:33:05.391 --> 00:33:07.120
It takes away that layer
of headache.

00:33:07.120 --> 00:33:08.540
IEIN VALDEZ: Yeah, you're
not managing a Cloud

00:33:08.540 --> 00:33:10.820
SQL server or instance.

00:33:10.820 --> 00:33:14.020
You're not backing it up, you're
not starting, stopping,

00:33:14.020 --> 00:33:15.600
maintenance.

00:33:15.600 --> 00:33:18.030
These are all part of in the
platform as a service sweep,

00:33:18.030 --> 00:33:19.820
where it's really focused on
developer productivity.

00:33:19.820 --> 00:33:21.560
WALLY YAU: Isn't there a term
called DBS service?

00:33:21.560 --> 00:33:23.590
IEIN VALDEZ: There is also
database as a service.

00:33:23.590 --> 00:33:25.400
I've heard that as well.

00:33:25.400 --> 00:33:26.380
Yeah, exactly.

00:33:26.380 --> 00:33:30.840
I think they're all in
the platform layer.

00:33:30.840 --> 00:33:32.020
OK, great.

00:33:32.020 --> 00:33:35.370
Totally unrelated question
about four Nexus devices

00:33:35.370 --> 00:33:36.700
showed up in my Gmail account.

00:33:36.700 --> 00:33:37.810
I'm not sure what
this is about.

00:33:37.810 --> 00:33:39.570
So we're just going
skip over it.

00:33:39.570 --> 00:33:41.620
He's asking for an option
to troubleshoot.

00:33:41.620 --> 00:33:45.370
I would say, take a look at the
Android developers page.

00:33:45.370 --> 00:33:48.980
I'm sure there's some support
forums there somewhere.

00:33:48.980 --> 00:33:50.500
And this last one doesn't--

00:33:50.500 --> 00:33:51.610
it's just a website link.

00:33:51.610 --> 00:33:55.430
So I think we have got
all of the questions.

00:33:55.430 --> 00:33:59.570
I'm going to double check that
nothing popped up here.

00:33:59.570 --> 00:33:59.600
JOE FAITH: Triggers,
stored procedures.

00:33:59.600 --> 00:34:01.050
Good to go.

00:34:01.050 --> 00:34:03.430
Pricing calculator,
good suggestion.

00:34:03.430 --> 00:34:06.000
Jango, yes.

00:34:06.000 --> 00:34:07.705
It's a very nice framework,
but you might take a

00:34:07.705 --> 00:34:08.800
performance hit.

00:34:08.800 --> 00:34:11.510
You should try it out
for yourself.

00:34:11.510 --> 00:34:13.409
IEIN VALDEZ: Oh, OK,
here's a new one.

00:34:13.409 --> 00:34:17.250
How will multiple requests be
handled on the same database

00:34:17.250 --> 00:34:19.120
and table in Cloud SQL?

00:34:19.120 --> 00:34:25.870
JOE FAITH: It's the same as
standard MySQL, so that

00:34:25.870 --> 00:34:28.920
they're mutually exclusive
[INAUDIBLE] box.

00:34:28.920 --> 00:34:30.760
IEIN VALDEZ: Cool.

00:34:30.760 --> 00:34:35.270
I think we got all of
the questions here.

00:34:35.270 --> 00:34:35.810
This is great.

00:34:35.810 --> 00:34:37.820
I'm really happy.

00:34:37.820 --> 00:34:44.040
People can go to learn more at
developers.google.com/cloudsql.

00:34:44.040 --> 00:34:46.120
There's an active developer
forum, as well as the App

00:34:46.120 --> 00:34:49.690
Engine forum, you can
post as well.

00:34:49.690 --> 00:34:52.380
The last question I have for
you, Joe, and I don't know

00:34:52.380 --> 00:34:54.320
what you have cooking.

00:34:54.320 --> 00:34:56.710
Do you have any glimpse of the
future of Cloud SQL, any new

00:34:56.710 --> 00:34:57.870
stuff coming out?

00:34:57.870 --> 00:35:01.190
If not, that's cool, but I just
always like to ask for

00:35:01.190 --> 00:35:02.010
the audience.

00:35:02.010 --> 00:35:03.900
JOE FAITH: The main thing our
guys have been working on for

00:35:03.900 --> 00:35:06.640
the last few months have been
performance, performance,

00:35:06.640 --> 00:35:07.310
performance.

00:35:07.310 --> 00:35:11.790
And you should see some good
improvement, including things

00:35:11.790 --> 00:35:14.540
like making backups
a lot faster.

00:35:14.540 --> 00:35:17.400
We've got some interesting
stuff in the works, just

00:35:17.400 --> 00:35:17.940
around the corner.

00:35:17.940 --> 00:35:20.646
I was really hoping to be
able to talk more about

00:35:20.646 --> 00:35:23.560
them, but not yet.

00:35:23.560 --> 00:35:26.770
IEIN VALDEZ: All right,
well cool.

00:35:26.770 --> 00:35:28.500
We love Hangouts.

00:35:28.500 --> 00:35:30.600
It's a great vehicle to
communicate with people.

00:35:30.600 --> 00:35:33.930
And so we'll have you on again
as a special guest host.

00:35:33.930 --> 00:35:35.040
JOE FAITH: Especially when
we go to Martinique.

00:35:35.040 --> 00:35:37.220
I think we should take the
road show to Martinique.

00:35:37.220 --> 00:35:39.770
IEIN VALDEZ: Yes, OK, awesome.

00:35:39.770 --> 00:35:40.600
I agree with you.

00:35:40.600 --> 00:35:42.020
We need to do these
things remotely.

00:35:42.020 --> 00:35:44.940
And we'll have to bring our
illustrious studio here.

00:35:44.940 --> 00:35:45.676
JOE FAITH: That'd be a good
demonstration of the

00:35:45.676 --> 00:35:45.750
technology.

00:35:45.750 --> 00:35:47.720
IEIN VALDEZ: Yes, exactly.

00:35:47.720 --> 00:35:49.930
I guess with that we'll go ahead
and wrap up and close

00:35:49.930 --> 00:35:51.330
this GDL session.

00:35:51.330 --> 00:35:52.960
I want to thank everyone,
and our guests

00:35:52.960 --> 00:35:54.310
here, Wally and Joe.

00:35:54.310 --> 00:35:58.800
Thank you for making some
time and stay tuned.

00:35:58.800 --> 00:35:59.180
Keep an eye out.

00:35:59.180 --> 00:36:01.115
We'll have some more App Engine
Hangouts coming on in

00:36:01.115 --> 00:36:01.960
the next couple of weeks.

00:36:01.960 --> 00:36:03.860
So thanks everyone, and
I'm going to sign off.

00:36:03.860 --> 00:36:05.110
So long.

00:36:07.827 --> 00:36:25.600
[MUSIC PLAYING]

