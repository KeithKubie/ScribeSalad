WEBVTT
Kind: captions
Language: en

00:00:00.032 --> 00:00:03.403
So what limits the number of thread blocks than an SM can run?

00:00:03.403 --> 00:00:09.181
Let me digress a bit to answer this question, which leads into the related topic of occupancy.

00:00:09.181 --> 00:00:12.930
You'll hear this term a lot if you pay attention to the CUDA forums,

00:00:12.930 --> 00:00:17.274
or if you watch presentations on optimizing CUDA code.

00:00:17.274 --> 00:00:20.551
Each SM has a limited number of resources.

00:00:20.551 --> 00:00:26.057
There's a maximum number of thread blocks allowed on an SM--turns out to be 8 on current GPUs.

00:00:26.057 --> 00:00:31.963
There's a maximum number of threads that a single SM can run across all of the thread blocks on it.

00:00:31.978 --> 00:00:39.163
This number ranges on modern GPUs from about 1500 threads on, for example,

00:00:39.163 --> 00:00:41.602
the Fermi-based GPU's that you use on Amazon,

00:00:41.602 --> 00:00:47.256
or up to 2048 threads on the Kepler GPU in my laptop.

00:00:47.286 --> 00:00:50.888
Every thread running a given kernel takes a certain number of registers.

00:00:50.888 --> 00:00:59.956
And there's a total number of registers for all of the threads on the SM equal to 64 K on most GPUs.

00:00:59.956 --> 00:01:03.385
And finally there is limited number of bytes of shared memory.

00:01:03.385 --> 00:01:09.602
This is going to be either 16K or 48K on modern GPUs.

00:01:09.602 --> 00:01:15.000
As at maximum number of 8 thread blocks usually one of these other things is going to get in the way first--

00:01:15.000 --> 00:01:18.437
the total number of threads that you want to run across all the thread blocks,

00:01:18.437 --> 00:01:23.035
the total number registers that each thread is going to take,

00:01:23.035 --> 00:01:27.956
and the total number of bytes of shared memory that each thread block wants to use.

00:01:27.956 --> 00:01:35.972
So for example, if I am running on a GPU with 48 kilobytes of shared memory and a single thread block

00:01:35.972 --> 00:01:42.578
in my kernel requires 16 kilobytes of shared memory, then I can run at most 3 blocks on that SM.

00:01:42.578 --> 00:01:49.039
Now if that same GPU has a maximum number of threads of 1536,

00:01:49.039 --> 00:01:53.950
but my kernel takes 1024 threads then I can only run 1 block per SM.

00:01:53.950 --> 00:01:58.174
So in this case, even though my kernel to little enough shared memory that I'd be able

00:01:58.174 --> 00:02:02.128
to get 3 blocks per SM, the share number of threads in my kernel is preventing

00:02:02.128 --> 00:02:04.312
me from running more 1 block per SM.

