WEBVTT
Kind: captions
Language: en

00:12:19.872 --> 00:24:38.640
Hi, I'm Jeff Fisher and if 
you're watching this 

00:00:04.304 --> 00:00:06.206
then you're a developer
interested in working with 

00:00:06.206 --> 00:00:07.907
google products using their APIs.

00:00:07.907 --> 00:00:11.878
More specifically, their APIs 
that use google data protocal.

00:00:11.878 --> 00:00:14.814
So what is the google data 
protocol you might ask me.

00:00:14.814 --> 00:00:17.317
Well before I can answer that I 
have to go through 

00:00:17.317 --> 00:00:19.085
some background information.

00:00:19.085 --> 00:00:21.621
I'm assuming here you're familiar 
already with 

00:00:21.621 --> 00:00:24.357
the technologies of HTTP and XML.

00:00:24.357 --> 00:00:26.526
Now for a long time, 
websites have been looking at 
 

00:00:26.526 --> 00:00:28.628
an alternative way of 
distributing their content 

00:00:28.628 --> 00:00:30.630
in a more computer 
friendly way.

00:00:30.630 --> 00:00:32.766
Computers are not very bright 
so they need 

00:00:32.766 --> 00:00:36.369
a little help understanding 
our information as we see it.

00:00:36.369 --> 00:00:39.873
So, let's look at a simple 
example, such as a blog site.

00:00:39.873 --> 00:00:42.742
So a blog site has a number of 
news articles that 

00:00:42.742 --> 00:00:45.345
are displayed in a big list 
and they have a summary, 

00:00:45.345 --> 00:00:48.081
a title, who wrote them, 
when they wrote it.

00:00:48.081 --> 00:00:49.549
So it's basic information.

00:00:49.549 --> 00:00:52.552
How might we represent this 
in a computer friendly way?

00:00:52.552 --> 00:00:55.455
Well, the first attempt to 
solve this problem was RSS

00:00:55.455 --> 00:00:57.490
but the thing I'm talking 
about today is 

00:00:57.490 --> 00:00:59.592
the atom syndication format.

00:00:59.592 --> 00:01:02.462
Atom is a XML based approach 
to describing the data 

00:01:02.462 --> 00:01:05.265
on these websites and making it 
easy for computers 

00:01:05.265 --> 00:01:07.500
to parse this information out.

00:01:07.500 --> 00:01:11.304
So at the basic level 
you have a feed element 

00:01:11.304 --> 00:01:14.574
that contains multiple entries 
and each entry will have all 

00:01:14.574 --> 00:01:18.311
the metadata associated with 
the post on this blogsite.

00:01:18.311 --> 00:01:21.047
Well that's great because now 
we have a compact way of 

00:01:21.047 --> 00:01:23.583
describing all the content 
on this blog.

00:01:23.583 --> 00:01:26.586
But what if I want to create 
a program that edits this blog 

00:01:26.586 --> 00:01:28.721
and not just reads it

00:01:28.721 --> 00:01:31.691
well i could create an 
entirely new mechanism to do 

00:01:31.691 --> 00:01:34.594
this and have it be drastically 
different than this feed 

00:01:34.594 --> 00:01:36.729
mechanism we've already 
described or 

00:01:36.729 --> 00:01:38.298
I could try and re-use it.

00:01:38.298 --> 00:01:40.233
Well if i'm going to re-use 
this format 

00:01:40.233 --> 00:01:44.170
that describes my post all 
nicely in XML.

00:01:44.170 --> 00:01:46.372
How would I transmit this data 
to the server?

00:01:46.372 --> 00:01:49.242
Since these posts are already 
retrieved using HTTP, 

00:01:49.242 --> 00:01:52.712
we can just use HTTP to edit 
and delete this content 

00:01:52.712 --> 00:01:54.848
as well as create 
new content as well.

00:01:54.848 --> 00:01:59.152
So great we can reuse what we 
already have and just make use 

00:01:59.152 --> 00:02:03.990
of other verbs in HTTP like 
put, post, and delete

00:02:03.990 --> 00:02:07.927
and we have now a full cycle 
way of managing blog content 

00:02:07.927 --> 00:02:10.396
by just editing 
the feed basically.

00:02:10.396 --> 00:02:14.000
Well what if it doesn't 
have blog entries?

00:02:14.000 --> 00:02:16.436
What if it's not a blog? 
What if it's something like 

00:02:16.436 --> 00:02:20.740
a calendar or a spreadsheet
how would i represent that data?

00:02:20.740 --> 00:02:22.175
Well 

00:02:22.175 --> 00:02:24.444
you could try 
and do it in a new way

00:02:24.444 --> 00:02:27.914
Or you could try 
and use this atom method again.

00:02:27.914 --> 00:02:29.349
And if you 
use the atom method,

00:02:29.349 --> 00:02:32.919
that's what google data 
tries to do.

00:02:32.919 --> 00:02:35.155
So,

00:02:35.155 --> 00:02:37.423
let me show you 
an example of  

00:02:37.423 --> 00:02:39.125
what an atom feed looks like.

00:02:39.125 --> 00:02:41.294
Atom feed is XML 

00:02:41.294 --> 00:02:44.898
like what we said before 
and it contains entries. 

00:02:44.898 --> 00:02:49.636
Each feed has its own metadata 
as well as each entry.

00:02:49.636 --> 00:02:53.239
You'll also notice that each 
entry has a unique identifier 

00:02:53.239 --> 00:02:56.476
that makes it distinct from all 
other entries on the site.  

00:02:56.476 --> 00:03:01.314
As well as some information 
used to edit it.

00:03:01.314 --> 00:03:03.316
So, 

00:03:03.316 --> 00:03:06.519
once we take this 
and make it into 

00:03:06.519 --> 00:03:08.054
an editable form 
we call we call this 

00:03:08.054 --> 00:03:09.822
the atom publishing protocol.  

00:03:09.822 --> 00:03:13.459
And the atom publishing protocol 
extracts each of these entries 

00:03:13.459 --> 00:03:15.495
and turns them into resources.

00:03:15.495 --> 00:03:19.365
Now these resources can either 
be a traditional text resource 

00:03:19.365 --> 00:03:24.103
or they could be a media resource 
such as an image file and video.

00:03:24.103 --> 00:03:27.640
It also uses reuses the HTTP 
requests that we've already 

00:03:27.640 --> 00:03:30.843
discussed to manipulate this 
data and then it uses 

00:03:30.843 --> 00:03:32.579
the HTTP response codes 
in order to 

00:03:32.579 --> 00:03:35.114
tell if this operation was 
successful or had errors 

00:03:35.114 --> 00:03:37.517
or requires authentication.

00:03:37.517 --> 00:03:39.986
Now this is what's 
usually referred to as 

00:03:39.986 --> 00:03:44.791
a restful protocol 
that uses the restful semantics

00:03:44.791 --> 00:03:48.061
in order to modify these resources
and each request is therefore 

00:03:48.061 --> 00:03:51.631
independently of each request 
and doesn't require 

00:03:51.631 --> 00:03:55.535
any additional context like a 
session to know what to do.

00:03:55.535 --> 00:03:59.205
So here we have an example post 
of what it is to create 

00:03:59.205 --> 00:04:02.108
an entry on the blog 
using AtomPub

00:04:02.108 --> 00:04:04.210
and you'll notice there is 
some authorization, 

00:04:04.210 --> 00:04:06.946
there is some other bits of 
metadata but basically 

00:04:06.946 --> 00:04:08.781
all we're posting is 
the atom entry 

00:04:08.781 --> 00:04:10.683
just like what we would get 
on the atom feed.

00:04:10.683 --> 00:04:14.487
Once we have posted this, 
this bit of data we have created 

00:04:14.487 --> 00:04:16.990
this entry and we get back 
the entry as we created it 

00:04:16.990 --> 00:04:19.325
with some additional members 
such as an edit link 

00:04:19.325 --> 00:04:22.128
in case you want to modify it
and we also get back 

00:04:22.128 --> 00:04:23.463
some kind of version string.

00:04:23.463 --> 00:04:25.331
in this case, 
you see there is an "Etag" 

00:04:25.331 --> 00:04:29.402
which uniquely identifies the 
specific revision of this post

00:04:29.402 --> 00:04:32.005
The 201 response code 
is used to indicate that 

00:04:32.005 --> 00:04:35.642
this content was successfully 
created on the server.

00:04:35.642 --> 00:04:40.046
So now what is google data?  
How do I use it?  

00:04:40.046 --> 00:04:43.716
This abstract way of looking 
at atom feeds.

00:04:43.716 --> 00:04:45.485
Well, what would you need 
if you wanted to represent 

00:04:45.485 --> 00:04:47.654
something that wasn't 
a blog post in atom?

00:04:47.654 --> 00:04:50.690
Probably some custom XML 
that describes these entities.  

00:04:50.690 --> 00:04:54.556
And that's where kines comes in.  
Gdata kines are used to 

00:04:50.690 --> 00:04:59.532
represent abstract ideas that 
come across many APIs such as 

00:04:59.532 --> 00:05:01.668
what is a location? 
what is a time? 

00:05:01.668 --> 00:05:04.304
what is a contact?  Things you 
don't want to have to 

00:05:04.304 --> 00:05:06.506
reinvent each time you're 
specifying a new API 

00:05:06.506 --> 00:05:08.708
or working with 
a different product.

00:05:08.708 --> 00:05:11.678
So once we have this XML 
that fits nicely 

00:05:11.678 --> 00:05:13.579
into the Atom model.
Since atom allows you 

00:05:13.579 --> 00:05:17.050
to extend its XML.
What else might you need?

00:05:17.050 --> 00:05:22.088
Well, there are some things 
like a query language 

00:05:22.088 --> 00:05:25.387
or authentication that we 
have added to atom pub 

00:05:22.055 --> 00:05:24.757
as part of google data.
Google data basically allows us

00:05:24.757 --> 00:05:29.629
to fill in the cracks between 
what atom pub tries to accomplish 

00:05:29.629 --> 00:05:32.999
and what we would like to 
accomplish using them as APIs.

00:05:32.999 --> 00:05:34.667
So as I already mentioned, 
there is some form of 

00:05:34.667 --> 00:05:36.602
authentication that we already 
need to have in order to work 

00:05:36.602 --> 00:05:39.405
with google services and 
tie in to google accounts 

00:05:39.405 --> 00:05:43.209
and we also have some way of 
restricting what kind of content 

00:05:43.209 --> 00:05:47.613
that you are trying to 
access using this feed 

00:05:47.613 --> 00:05:51.050
and then we need some way 
to handle conflicts just in case 

00:05:51.050 --> 00:05:52.819
two people are trying to add 
the same information 

00:05:52.819 --> 00:05:53.952
at the same time.

00:05:52.819 --> 00:05:56.022
And then we have these 
common elements to express 

00:05:56.022 --> 00:05:58.091
what this information is 
that we're working with.

00:05:58.091 --> 00:05:59.659
And we had some other 
niceties as well 

00:05:59.659 --> 00:06:02.261
that are not part of 
the atom specifications 

00:06:02.261 --> 00:06:05.031
such as batch processing 
and media support.

00:06:05.031 --> 00:06:07.567
So when we're making 
a query on an atom feed 

00:06:07.567 --> 00:06:10.937
or google data feed 
in this case, what is it?

00:06:10.937 --> 00:06:14.140
Well basically it's just 
a URL that contains 

00:06:14.140 --> 00:06:16.909
enough information to 
tell us what kind of entries 

00:06:16.909 --> 00:06:17.910
we are to expect.

00:06:17.910 --> 00:06:22.348
So first here, 
we have a URL that describes 

00:06:22.348 --> 00:06:23.850
all of the documents  

00:06:23.850 --> 00:06:26.452
in someone's docs 
and spreadsheets account.

00:06:26.452 --> 00:06:28.621
And maybe all we really 
care about is 

00:06:28.621 --> 00:06:29.822
what spreadsheets they have.

00:06:29.822 --> 00:06:32.692
so the second URL here 
is very similar to the first 

00:06:32.692 --> 00:06:35.595
but it uses a category query 
to restrict only 

00:06:35.595 --> 00:06:38.931
the spreadsheet document 
types in the result set.

00:06:38.931 --> 00:06:40.666
and lastly of course 
we can retrieve just each 

00:06:40.666 --> 00:06:43.536
individual entry and the 
information associated with them 

00:06:43.536 --> 00:06:47.573
by passing a URL that contains 
some sort of document key.

00:06:47.573 --> 00:06:49.041
The nice thing about 
google data  

00:06:49.041 --> 00:06:52.078
is that it has consistent 
features across all of 

00:06:52.078 --> 00:06:54.447
our API such as 
alternative output formats 

00:06:54.447 --> 00:06:57.083
like Json and RSS 
in case the software you're 

00:06:57.083 --> 00:06:59.218
working with natively 
consumes those formats.

00:06:59.218 --> 00:07:01.821
It also has this 
Authentication model 

00:07:01.821 --> 00:07:03.823
that we'll talk about  
that allows you to 

00:07:03.823 --> 00:07:06.025
authenticate users to 
their google account 

00:07:06.025 --> 00:07:08.294
and securely access 
their data.

00:07:08.294 --> 00:07:10.763
We have created 
a number of client libraries 

00:07:10.763 --> 00:07:14.600
for many languages that 
parse all this XML and

00:07:14.600 --> 00:07:18.171
atom data into an easy to 
use object orientated model 

00:07:18.171 --> 00:07:20.006
that you can manipulate 
directly in the 

00:07:20.006 --> 00:07:21.574
language you are 
comfortable with.

00:07:21.574 --> 00:07:24.410
and we also provide some 
protocol customizations like 

00:07:24.410 --> 00:07:26.479
I've said for things 
that atom hasn't tackled yet 

00:07:26.479 --> 00:07:27.647
such as batch processing.

00:07:27.647 --> 00:07:30.183
In case you want to do 
a number of operations at once. 

00:07:30.183 --> 00:07:33.853
So as you can see, there are 
a number of google data APIs 

00:07:33.853 --> 00:07:36.055
out there for a number of 
popular google products 

00:07:36.055 --> 00:07:39.592
such as google calendar, google 
spreadsheets, picasa and youtube.

00:07:39.592 --> 00:07:42.695
So you can now access data 
in any one of those products 

00:07:42.695 --> 00:07:47.133
using the same semantics 
that I'm describing to you.

00:07:47.133 --> 00:07:49.302
So for example, 
lets go through 

00:07:49.302 --> 00:07:51.904
a simple way that 
I might as a programmer 

00:07:51.904 --> 00:07:55.775
interact with 
the google calendar API 

00:07:55.775 --> 00:07:58.578
so first I'm going to 
need some way of authenticating 

00:07:58.578 --> 00:08:00.780
this request that 
I'm going to be making.

00:08:00.780 --> 00:08:02.482
So I have two options here.  

00:08:02.482 --> 00:08:05.618
One is AuthSub and 
the other is ClientLogin.

00:08:05.618 --> 00:08:09.288
ClientLogin is meant for 
desktop based applications 

00:08:09.288 --> 00:08:13.326
that can have the user input 
their credentials directly 

00:08:13.326 --> 00:08:15.294
and then make their request 
to google's servers 

00:08:15.294 --> 00:08:18.498
where as AuthSub is intended to 
allow third party websites 

00:08:18.498 --> 00:08:22.602
to re-direct users to google's 
login page and then 

00:08:22.602 --> 00:08:27.273
re-direct back to 
the website in question 

00:08:27.273 --> 00:08:29.809
so both of these are going 
to give your program 

00:08:29.809 --> 00:08:31.611
some kind of token that 
you can pass along with 

00:08:31.611 --> 00:08:35.214
your request and make it 
an authenticated request.

00:08:35.214 --> 00:08:37.183
So first let's see what 
we would have to do 

00:08:37.183 --> 00:08:39.385
to retrieve all the events 
in someone's calendar.

00:08:39.385 --> 00:08:40.987
well it's very simple, 
all we are doing is 

00:08:40.987 --> 00:08:43.456
pulling down a feed passing 
along our credentials 

00:08:43.456 --> 00:08:47.159
and making this 
authenticated request.

00:08:47.159 --> 00:08:49.529
So when we get it back, 
we get a two hundred okayed, 

00:08:49.529 --> 00:08:50.963
it means this 
request was successful

00:08:50.963 --> 00:08:53.966
and we get back an atom feed 
that says some information 

00:08:53.966 --> 00:08:57.503
about the calendar such as 
this Mr. Test User's calendar 

00:08:57.503 --> 00:09:02.074
and he is based out of 
the Pacific time zone

00:09:02.074 --> 00:09:05.645
But as you notice in this feed, 
he didn't have any calendar 

00:09:05.645 --> 00:09:08.714
events currently on his calendar
so he is a very lonely person

00:09:08.714 --> 00:09:10.449
and so maybe we should 
invite him to lunch.

00:09:10.449 --> 00:09:13.653
Well here I am demonstrating how 
we can create an event 

00:09:13.653 --> 00:09:14.787
on his calendar, 

00:09:14.787 --> 00:09:17.924
by using the 
post semantics of HTTP.

00:09:17.924 --> 00:09:20.927
So all we're really doing is 
creating an Atom entry 

00:09:20.927 --> 00:09:23.529
and then sending it to the feed.

00:09:23.529 --> 00:09:25.998
So as you can see, 
we set the start time, 

00:09:25.998 --> 00:09:28.668
eleven-thirty is time for 
lunch at google

00:09:28.668 --> 00:09:31.070
we set some information 
about it in description

00:09:31.070 --> 00:09:35.374
and we're using this category, 
this kind of event

00:09:35.374 --> 00:09:37.343
so people know this is 
an atom entry 

00:09:37.343 --> 00:09:40.913
representing a calendar event.
so once we create it great, 

00:09:40.913 --> 00:09:42.515
we get a 201 
created response

00:09:42.515 --> 00:09:44.450
which means it was added to 
his calendar successfully

00:09:44.450 --> 00:09:47.386
and we get back that 
same entry except now 

00:09:47.386 --> 00:09:51.757
you'll notice there is an edit 
link inside of the atom entry

00:09:51.757 --> 00:09:54.126
which allows us to go back 
and make modifications

00:09:54.126 --> 00:09:58.364
and there is a long ID there 
in red which distinctly 

00:09:58.364 --> 00:10:00.866
identifies this specific event 
and then you'll notice there 

00:10:00.866 --> 00:10:02.635
is a version string in blue 
which represents 

00:10:02.635 --> 00:10:04.804
this revision of this event 
which is of course 

00:10:04.804 --> 00:10:06.739
the first one since 
we just created it.

00:10:06.739 --> 00:10:10.443
But you notice in this 
we forgot to set 

00:10:10.443 --> 00:10:12.211
where this location 
is occurring in,

00:10:12.211 --> 00:10:14.413
Mr. Test User isn't 
always very bright, 

00:10:14.413 --> 00:10:15.448
so we had better tell him where 
it is 

00:10:15.448 --> 00:10:17.283
we had better 
edit this thing.

00:10:17.283 --> 00:10:19.585
So now we are going to 
use put to edit 

00:10:19.585 --> 00:10:21.220
the event we just created.

00:10:21.220 --> 00:10:23.556
You notice we are 
putting to the edit link 

00:10:23.556 --> 00:10:25.891
that we just saw in 
the previous slide

00:10:25.891 --> 00:10:28.527
So here we are making this 
request to the edit link 

00:10:28.527 --> 00:10:30.963
with that specific revision 
string that we just used 

00:10:30.963 --> 00:10:33.366
and then we are passing our 
authentication information 

00:10:33.366 --> 00:10:36.769
and all we're doing is 
putting the same Atom entry 

00:10:36.769 --> 00:10:39.005
except now we are adding 
the bottom here in blue

00:10:39.005 --> 00:10:42.341
the where element of specifying 
that google is

00:10:42.341 --> 00:10:45.311
based out of Mountain View 
in California

00:10:45.311 --> 00:10:48.314
So now that request has gone 
through, we get an ok back

00:10:48.314 --> 00:10:51.684
and now you can see the 
latest form of the event 

00:10:51.684 --> 00:10:53.219
as on his calendar

00:10:53.219 --> 00:10:55.554
and it has all the details 
he needs to find us 

00:10:55.554 --> 00:10:57.523
and he can come eat 
lunch with us, that's great

00:10:57.523 --> 00:11:01.227
but maybe we don't really like 
Mr. Test User, 

00:11:01.227 --> 00:11:02.361
he kind of talks to much 

00:11:02.361 --> 00:11:05.231
and there is a reason that no 
one ever invites him to things 

00:11:05.231 --> 00:11:07.833
so we are going 
to delete that event on him 

00:11:07.833 --> 00:11:09.368
before he sees it hopefully.

00:11:09.368 --> 00:11:12.972
And so here, to delete the event 
all we really need to do  

00:11:12.972 --> 00:11:15.041
is issue a delete request 
with the edit URL 

00:11:15.041 --> 00:11:17.476
we just got back from 
the updated form

00:11:17.476 --> 00:11:20.379
Now notice I said the edit URL 
from  the one we just got back

00:11:20.379 --> 00:11:24.417
If we use the original edit URL 
that we edited the event with, 

00:11:24.417 --> 00:11:26.952
then that would already not 
work anymore since that 

00:11:26.952 --> 00:11:28.788
blue string at the end, 
that version ID would be 

00:11:28.788 --> 00:11:30.389
different than it is now.

00:11:30.389 --> 00:11:33.926
But since it is the correct 
one, we get back a 200 OK.

00:11:33.926 --> 00:11:35.461
Now if we had used the 
previous one, 

00:11:35.461 --> 00:11:38.030
you would see a 409 conflict 
error there 

00:11:38.030 --> 00:11:40.499
instead of a 200 OK. Which 
meant that there is now

00:11:40.499 --> 00:11:43.069
now a newer version of event 
on the server than the one 

00:11:43.069 --> 00:11:44.570
that we are trying to delete.

00:11:44.570 --> 00:11:48.474
So now that we have seen the 
fifteen minute rapid fire 

00:11:48.474 --> 00:11:51.410
walk through of how to use google
data using specific things 

00:11:51.410 --> 00:11:54.380
you've got the basic idea of 
what google data is 

00:11:54.380 --> 00:11:58.284
and how it works on the basic 
level of XML and using HTTP 

00:11:58.284 --> 00:12:01.220
But perhaps like most people 
you don't want to construct  

00:12:01.220 --> 00:12:03.823
all this XML yourself. 
You might be more interested in 

00:12:03.823 --> 00:12:07.727
the high level client libraries 
we support in your language of choice.

00:12:07.727 --> 00:12:13.332
So now what you should do is 
go to code.google.com/apis/gdata 

00:12:13.332 --> 00:12:17.598
to find out more and download 
the client library of your choice 

