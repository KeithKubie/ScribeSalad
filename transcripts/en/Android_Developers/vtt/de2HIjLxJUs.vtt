WEBVTT
Kind: captions
Language: en

00:00:08.838 --> 00:00:09.820
TREVOR JOHNS: Hello.

00:00:09.820 --> 00:00:11.860
Welcome to Android Developer
Office Hours

00:00:11.860 --> 00:00:13.910
for October 17, 2012.

00:00:13.910 --> 00:00:15.120
I'm pretty sure I have
that date right.

00:00:15.120 --> 00:00:15.980
ALEX LUCAS: Yeah.

00:00:15.980 --> 00:00:17.270
TREVOR JOHNS: Good.

00:00:17.270 --> 00:00:18.470
Sorry for the delayed start.

00:00:18.470 --> 00:00:20.100
For those of you who are
watching like, we've had a few

00:00:20.100 --> 00:00:22.590
technical difficulties in
our studio this morning.

00:00:22.590 --> 00:00:24.070
But we're ready to go.

00:00:24.070 --> 00:00:26.640
So for those of you who are
joining us for the first time

00:00:26.640 --> 00:00:30.420
this week, we're going to spend
the next 30 minutes or

00:00:30.420 --> 00:00:32.840
hour or however long it takes
to go and answer your

00:00:32.840 --> 00:00:37.180
questions on Android
development topics.

00:00:37.180 --> 00:00:39.250
We have a Moderator queue,
where people have been

00:00:39.250 --> 00:00:40.760
submitting questions
before the show.

00:00:40.760 --> 00:00:42.910
We'll be going through
those questions.

00:00:42.910 --> 00:00:46.060
But if you are watching live,
feel free to jump onto our

00:00:46.060 --> 00:00:48.460
Google+ Hangout, where you
can go ahead and ask

00:00:48.460 --> 00:00:50.880
us questions live.

00:00:50.880 --> 00:00:53.280
And we'll go ahead and interleaf
live questions in

00:00:53.280 --> 00:00:56.690
between the prerecorded
questions on Google Moderator.

00:00:56.690 --> 00:01:00.080
So with that in mind, let's go
ahead and get started on the

00:01:00.080 --> 00:01:01.870
first question on
Moderator today.

00:01:01.870 --> 00:01:05.470
So this question is
from Australia.

00:01:05.470 --> 00:01:08.720
And I think the name
there is J. Dixon.

00:01:08.720 --> 00:01:10.990
You'll have to forgive me if
I got that name wrong.

00:01:10.990 --> 00:01:13.800
"It seems impossible to query my
in-app purchase prices from

00:01:13.800 --> 00:01:15.670
the store using the API.

00:01:15.670 --> 00:01:18.090
Ideally, I want to display
localized prices for my in-app

00:01:18.090 --> 00:01:19.720
purchases to my users.

00:01:19.720 --> 00:01:21.960
How can I do this without
creating a lot of mess and

00:01:21.960 --> 00:01:24.222
bundling prices for each--"

00:01:24.222 --> 00:01:25.480
ALEX LUCAS: Each locale.

00:01:25.480 --> 00:01:28.050
TREVOR JOHNS: --locale."
Thank you.

00:01:28.050 --> 00:01:31.076
All right, so Alex, do you have
any thoughts on this one?

00:01:31.076 --> 00:01:33.660
ALEX LUCAS: Unfortunately, from
what I remember, it's not

00:01:33.660 --> 00:01:37.620
possible to query localized
prices.

00:01:37.620 --> 00:01:41.280
Part of the reason for that is
the currency exchange rates

00:01:41.280 --> 00:01:46.750
are constantly fluctuating, and
we don't want to create a

00:01:46.750 --> 00:01:51.470
situation where you display one
price in your application,

00:01:51.470 --> 00:01:55.040
and then when we go through
the purchase flow through

00:01:55.040 --> 00:01:58.943
Google Play, the currency
exchange shift happens, and

00:01:58.943 --> 00:02:00.800
they get charged
a higher price.

00:02:00.800 --> 00:02:02.930
TREVOR JOHNS: Well, I think,
actually, you can record

00:02:02.930 --> 00:02:05.480
per-country prices.

00:02:05.480 --> 00:02:07.530
So if you are recording--

00:02:07.530 --> 00:02:09.610
I think the old model would do
live currency conversion,

00:02:09.610 --> 00:02:11.540
while in the new one, you set
all your prices for every

00:02:11.540 --> 00:02:12.305
product simultaneously.

00:02:12.305 --> 00:02:13.240
ALEX LUCAS: Right.

00:02:13.240 --> 00:02:14.950
I think what they wanted--

00:02:14.950 --> 00:02:17.650
at least from what I'm reading
from the question, they want

00:02:17.650 --> 00:02:21.270
to set it once for one locale
and sort of pull in live data

00:02:21.270 --> 00:02:24.740
on the price for each locale.

00:02:24.740 --> 00:02:28.740
But like Trevor said, I think
what you can do is set the

00:02:28.740 --> 00:02:31.730
price individually for each
locale, which is what I think

00:02:31.730 --> 00:02:33.540
you'd have to do in this case.

00:02:33.540 --> 00:02:37.090
If you want to create a
situation where you are

00:02:37.090 --> 00:02:41.180
updating the price over time,
say, in-app gold or potions or

00:02:41.180 --> 00:02:44.320
something cost $1, and you
want to drop to $0.50, or

00:02:44.320 --> 00:02:47.080
however you want to do that,
what you would have to do then

00:02:47.080 --> 00:02:49.110
is set the pricing up
on your own server.

00:02:49.110 --> 00:02:53.340
And on an application start,
just have it ping the server,

00:02:53.340 --> 00:02:56.210
check for new prices, display
within the app, or use

00:02:56.210 --> 00:03:00.940
something like Google Cloud
Messaging to ping the

00:03:00.940 --> 00:03:03.270
application whenever there's a
price change, and then it can

00:03:03.270 --> 00:03:04.790
pull that data down
off the server.

00:03:04.790 --> 00:03:07.600
TREVOR JOHNS: We do have a batch
upload API for prices.

00:03:07.600 --> 00:03:10.400
So if you take all of your
prices in put them into a CSV

00:03:10.400 --> 00:03:14.590
file, you can send those to
the Google Play Developer

00:03:14.590 --> 00:03:16.907
console, and then you
can serve that

00:03:16.907 --> 00:03:17.950
same CSV to your app.

00:03:17.950 --> 00:03:19.370
And then they'd both
be working off the

00:03:19.370 --> 00:03:20.250
same pricing data.

00:03:20.250 --> 00:03:21.484
ALEX LUCAS: Yeah.

00:03:21.484 --> 00:03:22.440
TREVOR JOHNS: All right.

00:03:22.440 --> 00:03:24.980
So let's move on to
the next question.

00:03:24.980 --> 00:03:29.030
This one is from Reto Meier,
our own Reto Meier here in

00:03:29.030 --> 00:03:30.370
Mountain View, California.

00:03:30.370 --> 00:03:32.365
We were going to go and try and
do a video question for

00:03:32.365 --> 00:03:35.500
this, but I don't think it's
going to work too well.

00:03:35.500 --> 00:03:39.270
So we're just going
to go ahead and--

00:03:39.270 --> 00:03:40.890
unless Louis over here
wants to go and try

00:03:40.890 --> 00:03:42.130
and pull it up live.

00:03:42.130 --> 00:03:42.905
But I think we're just going to
go ahead and read this one

00:03:42.905 --> 00:03:44.280
out this week.

00:03:44.280 --> 00:03:48.110
So the question is, DicePlayer,
which was an app

00:03:48.110 --> 00:03:53.005
that was featured last week,
actually, on one of the app

00:03:53.005 --> 00:03:55.580
review shows, displays a pop-out
window, and it plays

00:03:55.580 --> 00:04:01.380
video even when the app's
running in the background.

00:04:01.380 --> 00:04:02.460
And you can sort of
drag it around.

00:04:02.460 --> 00:04:04.160
It's actually a really
interesting effect, if you

00:04:04.160 --> 00:04:05.760
want to go ahead and download
the app on your own to take a

00:04:05.760 --> 00:04:06.450
look at it.

00:04:06.450 --> 00:04:07.730
But the question is, "How
does that work?

00:04:07.730 --> 00:04:09.180
And is it something that's
going to break in future

00:04:09.180 --> 00:04:14.300
releases?" And I believe, Alex,
you found a library that

00:04:14.300 --> 00:04:14.970
actually lets you do this.

00:04:14.970 --> 00:04:17.360
ALEX LUCAS: Yeah, so there's
a library available.

00:04:17.360 --> 00:04:20.990
It's an open-source library
called StandOut.

00:04:20.990 --> 00:04:23.260
It's a third-party library that
lets you create little

00:04:23.260 --> 00:04:28.060
floating windows you can drag
around on your home screen.

00:04:28.060 --> 00:04:30.760
It's a pretty nifty-looking,
always-on-top functionality,

00:04:30.760 --> 00:04:33.490
where you can even open other
apps, and the StandOut window

00:04:33.490 --> 00:04:36.590
will sort of float
on top of it.

00:04:36.590 --> 00:04:37.900
So this actually works--

00:04:37.900 --> 00:04:40.150
so DicePlayer is using this
library, StandOut.

00:04:40.150 --> 00:04:42.350
And StandOut actually
works by using the

00:04:42.350 --> 00:04:44.250
system alert dialogue.

00:04:44.250 --> 00:04:50.380
In terms of will this break
in future releases, we

00:04:50.380 --> 00:04:51.360
can't say for sure.

00:04:51.360 --> 00:04:53.740
But the system alert dialogue
wasn't designed

00:04:53.740 --> 00:04:55.390
with video in mind.

00:04:55.390 --> 00:04:58.760
So it's sort of an odd use of
the system dialogue, and I

00:04:58.760 --> 00:05:05.220
wouldn't expect that to work
without some update perversion

00:05:05.220 --> 00:05:08.260
from the developer
of the library.

00:05:08.260 --> 00:05:12.210
Especially difficult would be
the context of actually using

00:05:12.210 --> 00:05:16.370
it to play video the way
that DicePlayer does.

00:05:16.370 --> 00:05:19.600
I expect that to break in all
sorts of corner cases unless

00:05:19.600 --> 00:05:21.290
the developers have been
really careful about

00:05:21.290 --> 00:05:22.440
that kind of thing.

00:05:22.440 --> 00:05:27.400
For instance, playing a floating
video window on top

00:05:27.400 --> 00:05:30.510
of an application that's
playing other video.

00:05:30.510 --> 00:05:32.810
There's serious resource
allocation

00:05:32.810 --> 00:05:35.160
considerations there.

00:05:35.160 --> 00:05:39.050
TREVOR JOHNS: Yeah, I think that
pretty much covers it.

00:05:39.050 --> 00:05:40.310
From a UI perspective,
it's definitely

00:05:40.310 --> 00:05:41.420
an interesting effect.

00:05:41.420 --> 00:05:44.445
But it's not really the Android
way of doing things.

00:05:44.445 --> 00:05:46.590
ALEX LUCAS: Right.

00:05:46.590 --> 00:05:50.280
Having a window that you can
drag around sort of breaks the

00:05:50.280 --> 00:05:53.970
only in one application at a
time UI paradigm that we go

00:05:53.970 --> 00:05:55.610
for with Android.

00:05:55.610 --> 00:05:59.930
It is a neat effect, and the
StandOut library is impressive

00:05:59.930 --> 00:06:01.620
in terms of what they've
accomplished.

00:06:01.620 --> 00:06:04.450
But I would say it should
be used with care.

00:06:04.450 --> 00:06:07.540
TREVOR JOHNS: Right.

00:06:07.540 --> 00:06:09.570
Let's move on to our
third question.

00:06:09.570 --> 00:06:14.100
So another question from
J. Dixon in Australia.

00:06:14.100 --> 00:06:17.640
And so the question is, "With
in-app purchases on Google

00:06:17.640 --> 00:06:20.760
Play, is there an easy way to
offer discounts for a Play

00:06:20.760 --> 00:06:23.490
account across all of our
in-app purchases?

00:06:23.490 --> 00:06:25.790
Or would I have to write
and manage this?"

00:06:25.790 --> 00:06:29.110
So we don't really have
a way to go and--

00:06:29.110 --> 00:06:30.510
actually, we really don't have
much of a way to offer

00:06:30.510 --> 00:06:31.660
discounts, period.

00:06:31.660 --> 00:06:35.130
You could go and upload a
different set of prices if you

00:06:35.130 --> 00:06:38.810
were, say, applying discounts
to every in-app product in

00:06:38.810 --> 00:06:40.230
your in-app catalog.

00:06:40.230 --> 00:06:41.340
Just update all the prices.

00:06:41.340 --> 00:06:42.650
It should take effect live.

00:06:42.650 --> 00:06:45.770
But if you only want to target
one specific user, we really

00:06:45.770 --> 00:06:47.170
don't have any way to
do that on our end.

00:06:47.170 --> 00:06:49.290
You'd have to add some code into
your application, which

00:06:49.290 --> 00:06:53.750
is responsible for selecting a
different in-app product based

00:06:53.750 --> 00:06:54.840
on that user.

00:06:54.840 --> 00:06:58.670
Now that said, I'm going to give
you a big caution here.

00:06:58.670 --> 00:07:02.310
And that is part of reason why
we have the concept of an

00:07:02.310 --> 00:07:05.620
in-app product and why you have
to upload all your prices

00:07:05.620 --> 00:07:08.090
to the server is to make sure
that if somebody tampers with

00:07:08.090 --> 00:07:12.450
your APK, they can't go and
purchase one product at a

00:07:12.450 --> 00:07:14.490
different price.

00:07:14.490 --> 00:07:16.485
Imagine that if we put the
prices into your application

00:07:16.485 --> 00:07:18.695
as code, and you just sent them
to Google Play, it would

00:07:18.695 --> 00:07:20.910
be trivial to go and find that
string and replace it with a

00:07:20.910 --> 00:07:25.170
different price and then get
all your content for $0.99,

00:07:25.170 --> 00:07:27.490
regardless of what you
want to buy it for.

00:07:27.490 --> 00:07:30.550
So, in this case, it's a little
different in that

00:07:30.550 --> 00:07:33.080
you're still using an
in-app product.

00:07:33.080 --> 00:07:36.510
But if somebody discovers that
you're doing this, they could

00:07:36.510 --> 00:07:39.430
just go and modify the APK to
go and select that different

00:07:39.430 --> 00:07:43.120
product ID, regardless of
what user is actually

00:07:43.120 --> 00:07:44.740
logged into the phone.

00:07:44.740 --> 00:07:48.180
So from a security perspective,

00:07:48.180 --> 00:07:51.070
this is a bit sketchy.

00:07:51.070 --> 00:07:53.270
So that's the one thing I really
do want to warn you

00:07:53.270 --> 00:07:56.242
about here if you do
decide to do this.

00:07:56.242 --> 00:07:57.830
ALEX LUCAS: One alternative
might--

00:07:57.830 --> 00:08:00.510
I don't know if this would work,
but just playing through

00:08:00.510 --> 00:08:02.910
the scenario in my head, one
thing that might work is to

00:08:02.910 --> 00:08:07.580
not store the item ID for the
discounted version of the item

00:08:07.580 --> 00:08:08.940
on the device.

00:08:08.940 --> 00:08:11.060
Just have it on your server and
have the user authenticate

00:08:11.060 --> 00:08:11.760
to the server.

00:08:11.760 --> 00:08:13.510
The server sends down the
discount item ID.

00:08:13.510 --> 00:08:14.280
TREVOR JOHNS: Yeah,
that would work.

00:08:14.280 --> 00:08:16.300
I mean, there is still a risk.

00:08:16.300 --> 00:08:18.430
If somebody just finds that
product ID, there's nothing

00:08:18.430 --> 00:08:20.600
stopping somebody from going
and plugging it in there.

00:08:20.600 --> 00:08:22.085
But you'd have to actually
discover it exists.

00:08:22.085 --> 00:08:23.040
ALEX LUCAS: Right.

00:08:23.040 --> 00:08:24.510
You'd have to discover it
exists, and you'd have to

00:08:24.510 --> 00:08:26.860
maybe mimic the user packets
for something to

00:08:26.860 --> 00:08:27.645
get the item ID.

00:08:27.645 --> 00:08:30.180
TREVOR JOHNS: Yeah, it is
obfuscation, and so all the

00:08:30.180 --> 00:08:32.160
caveats that come
with that apply.

00:08:32.160 --> 00:08:35.240
But if it's just a small
discount, you might not really

00:08:35.240 --> 00:08:36.799
care that much.

00:08:36.799 --> 00:08:39.760
And that being said, the
user is still going

00:08:39.760 --> 00:08:40.440
to have to pay something.

00:08:40.440 --> 00:08:44.304
So I don't think it's going
to be a big difference.

00:08:47.580 --> 00:08:49.740
So let's see here.

00:08:49.740 --> 00:08:53.340
"is there any way to do a route
between two points with

00:08:53.340 --> 00:08:58.770
the Android Map API?" And this
is coming from Brazil.

00:08:58.770 --> 00:09:02.210
So this is essentially driving
directions, I believe, in

00:09:02.210 --> 00:09:07.410
which case the answer is if
you're using MapView, no.

00:09:07.410 --> 00:09:12.200
But if you're using an intent
to fire-- to load Maps, I

00:09:12.200 --> 00:09:14.540
believe it's possible by
just using a Maps URL.

00:09:14.540 --> 00:09:15.630
ALEX LUCAS: I think so, yeah.

00:09:15.630 --> 00:09:17.970
You could just fire an intent
with the destination--

00:09:17.970 --> 00:09:19.230
TREVOR JOHNS: It's an
undocumented feature of Maps,

00:09:19.230 --> 00:09:20.120
essentially.

00:09:20.120 --> 00:09:23.570
But if you have a URL for
driving directions, like you'd

00:09:23.570 --> 00:09:26.480
get from the desktop version
of Maps, there's a query

00:09:26.480 --> 00:09:29.360
parameter for source address
and a query parameter for

00:09:29.360 --> 00:09:30.810
destination address.

00:09:30.810 --> 00:09:34.860
And if you fire off the intent
that looks just like the URL

00:09:34.860 --> 00:09:38.360
built on the desktop, the Maps
application will offer to

00:09:38.360 --> 00:09:40.120
intercept that and will
go and calculate

00:09:40.120 --> 00:09:43.620
driving directions locally.

00:09:43.620 --> 00:09:45.675
Again, not possible
with MapView, but

00:09:45.675 --> 00:09:46.925
possible with an intent.

00:09:49.460 --> 00:09:53.320
So this question is coming
from Andrew in Romania.

00:09:53.320 --> 00:09:56.680
The question is, with Android
Awesome player, which is part

00:09:56.680 --> 00:09:58.925
of the video framework, the
media playback framework,

00:09:58.925 --> 00:10:02.670
they're getting an unexpected
abort prepare, notify listener

00:10:02.670 --> 00:10:07.400
of error, which is preventing
them from playing an MP4.

00:10:07.400 --> 00:10:10.380
They're getting this error on
Android 2.3.4, and it sounded

00:10:10.380 --> 00:10:12.560
like it was across several
different devices, looking at

00:10:12.560 --> 00:10:14.220
their Stack Overflow question.

00:10:14.220 --> 00:10:18.370
And the file, also,
interestingly enough, it works

00:10:18.370 --> 00:10:21.350
fine when they're playing
off of the SD card.

00:10:21.350 --> 00:10:23.710
So that's really interesting.

00:10:23.710 --> 00:10:25.570
Normally, when you see those
types of errors, it's because

00:10:25.570 --> 00:10:28.960
you've encoded your video
to use the wrong format.

00:10:28.960 --> 00:10:32.750
And I think in this case, what's
most likely happening,

00:10:32.750 --> 00:10:35.090
if you look very carefully at
their source, they're actually

00:10:35.090 --> 00:10:38.640
retrieving the file from
an HTTPS server.

00:10:38.640 --> 00:10:40.730
I can't say this for sure
without actually having the

00:10:40.730 --> 00:10:43.380
real URL, which is not present
in your question.

00:10:43.380 --> 00:10:44.780
So if do have that, feel
free to ping us.

00:10:44.780 --> 00:10:46.460
We can take a closer
look at it.

00:10:46.460 --> 00:10:48.980
But my guess is it's probably
an SSL error, like the

00:10:48.980 --> 00:10:50.060
certificate's not trusted.

00:10:50.060 --> 00:10:53.160
ALEX LUCAS: But why would that
happen on the SD card and not

00:10:53.160 --> 00:10:53.705
in the private search?

00:10:53.705 --> 00:10:55.870
TREVOR JOHNS: No, if it's on the
SD card, there's no SSL.

00:10:55.870 --> 00:10:57.210
ALEX LUCAS: Oh, OK.

00:10:57.210 --> 00:10:58.620
So the other way around.

00:10:58.620 --> 00:11:00.760
It works except on
the SD card.

00:11:00.760 --> 00:11:02.000
TREVOR JOHNS: No, other
way around.

00:11:02.000 --> 00:11:03.100
It works on the SD card.

00:11:03.100 --> 00:11:04.690
It does not work when they
stream from their server.

00:11:04.690 --> 00:11:09.230
ALEX LUCAS: OK, so it's an SSL
error, and they bypass SSL

00:11:09.230 --> 00:11:10.690
because it's going
to the SD card?

00:11:10.690 --> 00:11:11.380
TREVOR JOHNS: Right.

00:11:11.380 --> 00:11:13.130
ALEX LUCAS: OK.

00:11:13.130 --> 00:11:15.040
TREVOR JOHNS: Well, yeah.

00:11:15.040 --> 00:11:17.050
That said, there's nothing
in the logs that actually

00:11:17.050 --> 00:11:18.570
indicates this is
an SSL error.

00:11:18.570 --> 00:11:22.926
This is just my best guess based
on the limited logs we

00:11:22.926 --> 00:11:24.090
have available.

00:11:24.090 --> 00:11:26.000
Again, if you can actually give
us the actual URL to the

00:11:26.000 --> 00:11:28.450
file, we can do a little
bit more diagnostics.

00:11:28.450 --> 00:11:32.145
But just based on the limited
information available, that's

00:11:32.145 --> 00:11:35.140
our best guess.

00:11:35.140 --> 00:11:38.180
Next question comes from
Ryan E. in Utah.

00:11:38.180 --> 00:11:40.720
"I'm developing a resource app,
but I have partners that

00:11:40.720 --> 00:11:42.930
only want to have the customers
use a specific

00:11:42.930 --> 00:11:46.710
version until they've QAed
that application.

00:11:46.710 --> 00:11:48.610
Is there any way to restrict
what version is downloaded

00:11:48.610 --> 00:11:49.914
from Google Play?"

00:11:49.914 --> 00:11:51.840
ALEX LUCAS: I'm a little
confused by what they mean by

00:11:51.840 --> 00:11:52.520
resource app.

00:11:52.520 --> 00:11:55.570
TREVOR JOHNS: Yeah, that was a
little unclear to me, too.

00:11:55.570 --> 00:11:59.830
My guess is it's essentially an
APK that provides services

00:11:59.830 --> 00:12:00.800
to other APKs.

00:12:00.800 --> 00:12:03.240
So the example, like,
Open Table, right?

00:12:03.240 --> 00:12:07.510
It has an intent that you
can fire off to go and--

00:12:07.510 --> 00:12:10.900
actually, to go and make a
reservation, or actually quite

00:12:10.900 --> 00:12:12.130
possibly something like
a theme, right?

00:12:12.130 --> 00:12:14.770
It could be an APK that just
contains resources, which

00:12:14.770 --> 00:12:16.240
actually would make sense.

00:12:16.240 --> 00:12:18.070
And then they're going and
looking inside that to load it

00:12:18.070 --> 00:12:19.200
to re-theme their app.

00:12:19.200 --> 00:12:21.180
ALEX LUCAS: OK.

00:12:21.180 --> 00:12:23.860
Interesting.

00:12:23.860 --> 00:12:26.270
So to their question, "Is there
a way to restrict what

00:12:26.270 --> 00:12:31.050
version is downloadable for
a given user?" Not really.

00:12:31.050 --> 00:12:34.730
I mean, you can't say,
bob@gmail.com only gets to see

00:12:34.730 --> 00:12:37.382
version 3 and not version
4, anything like that.

00:12:37.382 --> 00:12:39.140
TREVOR JOHNS: Well, I think even
more generally, you can't

00:12:39.140 --> 00:12:41.640
restrict the version, period.

00:12:41.640 --> 00:12:44.020
When you download an app from
Google Play, you always get

00:12:44.020 --> 00:12:44.690
the latest version.

00:12:44.690 --> 00:12:46.460
ALEX LUCAS: Sort of.

00:12:46.460 --> 00:12:49.710
You do have the option of
using a multiple APK.

00:12:49.710 --> 00:12:52.220
And what that would let
you do is restrict per

00:12:52.220 --> 00:12:55.670
user based on the--

00:12:55.670 --> 00:12:57.290
like let's say the platform
version or

00:12:57.290 --> 00:12:58.900
the size of the screen.

00:12:58.900 --> 00:13:01.620
So what you would then do is
break your APK into like three

00:13:01.620 --> 00:13:02.800
different versions.

00:13:02.800 --> 00:13:05.360
For instance, let's call
them 9, 10, and 11.

00:13:05.360 --> 00:13:11.760
And say Version 10 only works
with phone devices, and

00:13:11.760 --> 00:13:16.110
Version 11 is compatible with
x large devices, which would

00:13:16.110 --> 00:13:17.280
include tablets.

00:13:17.280 --> 00:13:19.155
Then when the user went to
market, they would see Version

00:13:19.155 --> 00:13:21.520
11 if they were on a tablet, and
they would see Version 10

00:13:21.520 --> 00:13:23.390
if they were on a phone.

00:13:23.390 --> 00:13:27.370
Multiple APKs, they don't work
for every situation.

00:13:27.370 --> 00:13:30.230
They will only let you
restrict based on the

00:13:30.230 --> 00:13:31.970
platform SDK on--

00:13:31.970 --> 00:13:36.590
let's see, platform SDK, screen
size, and GL texture.

00:13:36.590 --> 00:13:40.700
So you can't do a thing, like
I said before, like, say,

00:13:40.700 --> 00:13:43.830
bob@gmail.com gets to see
Version 11, and everyone else

00:13:43.830 --> 00:13:45.880
gets to see Version 10.

00:13:45.880 --> 00:13:50.690
So it depends on what criteria
you would want to restrict on.

00:13:50.690 --> 00:13:53.620
I'm guessing from the content of
the question that you would

00:13:53.620 --> 00:13:57.910
want to restrict on the version
of the other app.

00:13:57.910 --> 00:14:00.960
So the other version of
application A that's installed

00:14:00.960 --> 00:14:02.810
on the user's system would
define what version of

00:14:02.810 --> 00:14:04.800
application B was visible.

00:14:04.800 --> 00:14:07.770
And that's not really
currently possible.

00:14:07.770 --> 00:14:11.310
Google Play wasn't really
designed to work like that.

00:14:11.310 --> 00:14:16.600
You would probably have to
either implement some sort of

00:14:16.600 --> 00:14:19.940
very well-defined interface
between the two applications

00:14:19.940 --> 00:14:22.750
and just test the living crap
out of it until you're

00:14:22.750 --> 00:14:25.960
reasonably confident that you
can upgrade one of those

00:14:25.960 --> 00:14:28.040
without breaking
the other one.

00:14:28.040 --> 00:14:33.670
Or you would have to release
them in tandem or maybe have a

00:14:33.670 --> 00:14:35.450
side loading thing where--

00:14:35.450 --> 00:14:37.830
actually, no, I take
that back.

00:14:37.830 --> 00:14:41.750
It is against the Google Play
TOC to have an application

00:14:41.750 --> 00:14:44.670
that downloads other
applications.

00:14:44.670 --> 00:14:46.500
So you wouldn't be able to
do anything like that.

00:14:46.500 --> 00:14:49.560
It would really have to be
a very well-defined and

00:14:49.560 --> 00:14:54.305
thoroughly tested interface
between the two applications.

00:14:54.305 --> 00:14:56.710
TREVOR JOHNS: So just one
last reminder here.

00:14:56.710 --> 00:14:58.380
We are getting to the end
of our prerecorded

00:14:58.380 --> 00:14:59.470
questions for this week.

00:14:59.470 --> 00:15:01.930
So if you have any questions
that you want to ask us live,

00:15:01.930 --> 00:15:04.260
feel free to hop onto Google+.

00:15:04.260 --> 00:15:05.740
Even if you don't have a
webcam, we can accept

00:15:05.740 --> 00:15:07.030
questions via chat.

00:15:07.030 --> 00:15:10.430
But you have about, probably,
two minutes before we're out

00:15:10.430 --> 00:15:12.540
of questions, and we'll be
signing off for the day.

00:15:12.540 --> 00:15:16.180
So this question comes from Andy
C. in Perth, Australia,

00:15:16.180 --> 00:15:19.310
who says, "I have a requirement
to convert PCM

00:15:19.310 --> 00:15:21.960
files to MPEG4 files.

00:15:24.470 --> 00:15:30.626
Can we have some demo code for
MOD codec encoding, please."

00:15:30.626 --> 00:15:35.880
That's a pretty big
question there.

00:15:35.880 --> 00:15:37.375
You want to go and
convert from one

00:15:37.375 --> 00:15:40.520
file format to another.

00:15:40.520 --> 00:15:43.010
I don't think we have any
published sample code that

00:15:43.010 --> 00:15:44.080
demonstrates how to do this.

00:15:44.080 --> 00:15:45.560
ALEX LUCAS: No.

00:15:45.560 --> 00:15:51.680
Generally, when we write sample
code and we publish

00:15:51.680 --> 00:15:57.160
official Android sample code,
it's for general-purpose stuff

00:15:57.160 --> 00:16:00.600
that's specific to the Android
framework, that there's a

00:16:00.600 --> 00:16:03.240
reasonable assumption that a lot
of Android developers are

00:16:03.240 --> 00:16:07.640
going to want, and it's
something specific to Android.

00:16:07.640 --> 00:16:11.490
This is pretty independent of
the fact that it would be

00:16:11.490 --> 00:16:13.230
running on Android.

00:16:13.230 --> 00:16:16.160
Generally, what you would want
to do is find a good

00:16:16.160 --> 00:16:17.690
transcoding Java library.

00:16:17.690 --> 00:16:20.200
TREVOR JOHNS: They did mention
they'd looked at FFmpeg, which

00:16:20.200 --> 00:16:21.420
is actually a pretty
good choice.

00:16:21.420 --> 00:16:22.455
ALEX LUCAS: It is a
good choice, yeah.

00:16:22.455 --> 00:16:24.925
TREVOR JOHNS: It's actually
LGPL licensed, too, so--

00:16:24.925 --> 00:16:25.965
ALEX LUCAS: OK.

00:16:25.965 --> 00:16:27.290
TREVOR JOHNS: Actually, I
believe it's dual licensed--

00:16:27.290 --> 00:16:29.220
LGPL and GPL.

00:16:29.220 --> 00:16:31.940
There were some licensing
concerns from the developer.

00:16:31.940 --> 00:16:34.410
I'm afraid we can't actually
speak to those since we're not

00:16:34.410 --> 00:16:36.010
legal experts.

00:16:36.010 --> 00:16:39.531
But usually, LGPL is pretty
permissive of--

00:16:39.531 --> 00:16:41.490
it's designed to be
used as a library.

00:16:41.490 --> 00:16:43.710
So you can usually include
it in other code.

00:16:43.710 --> 00:16:45.690
I think there were some cases,
depending on which codec you

00:16:45.690 --> 00:16:48.690
used, the licensing
status changed.

00:16:48.690 --> 00:16:50.595
ALEX LUCAS: From what I remember
with LGPL, the rule

00:16:50.595 --> 00:16:53.670
was you could include
it with your code.

00:16:53.670 --> 00:16:57.270
It wouldn't force you to GPL
your code if you didn't make

00:16:57.270 --> 00:16:59.380
changes to the LGPL library.

00:16:59.380 --> 00:17:01.370
TREVOR JOHNS: I think there are
some specific cases here

00:17:01.370 --> 00:17:02.660
where it's only GPL licensed.

00:17:02.660 --> 00:17:03.400
ALEX LUCAS: Oh, OK.

00:17:03.400 --> 00:17:06.079
TREVOR JOHNS: So if you do use
FFmpeg, be a bit careful with

00:17:06.079 --> 00:17:07.249
the license there.

00:17:07.249 --> 00:17:10.609
The FFmpeg developers do have a
page dedicated to discussing

00:17:10.609 --> 00:17:12.020
the license.

00:17:12.020 --> 00:17:14.569
So they explained it
in great detail.

00:17:14.569 --> 00:17:18.099
But outside of that, another
option you could do would be

00:17:18.099 --> 00:17:20.460
to go and set up a web service
that's responsible for

00:17:20.460 --> 00:17:21.040
transcoding.

00:17:21.040 --> 00:17:24.349
That way, you just have a copy
of FFmpeg or whatever service

00:17:24.349 --> 00:17:27.234
you need that'll do the
transcoding on your server and

00:17:27.234 --> 00:17:29.530
then give back the
resulting file.

00:17:29.530 --> 00:17:32.060
Which is actually an interesting
question there

00:17:32.060 --> 00:17:37.380
because you're trading off
on-device CPU to do it versus

00:17:37.380 --> 00:17:40.390
network bandwidth, right?

00:17:40.390 --> 00:17:42.830
Does it make more sense to use
the device's limited CPU to do

00:17:42.830 --> 00:17:45.030
the transcoding or to upload
it somewhere else

00:17:45.030 --> 00:17:45.790
and have it do both?

00:17:45.790 --> 00:17:48.640
Now, doing transcoding on the
device will waste battery.

00:17:48.640 --> 00:17:51.910
But a lot of users also have
limited networking capability.

00:17:51.910 --> 00:17:53.660
ALEX LUCAS: But also, depending
on the size of the

00:17:53.660 --> 00:17:57.520
file, you could also burn
through the battery.

00:17:57.520 --> 00:18:00.785
The issue with uploading and
then downloading is that you

00:18:00.785 --> 00:18:03.400
would be paying the price
in bandwidth twice.

00:18:03.400 --> 00:18:05.592
You'd only transcode once, but
you'd have to upload a giant

00:18:05.592 --> 00:18:05.960
file and download.

00:18:05.960 --> 00:18:07.126
TREVOR JOHNS: Yeah, I think
transcoding on the device

00:18:07.126 --> 00:18:08.150
probably does make the
most sense here.

00:18:08.150 --> 00:18:08.790
ALEX LUCAS: Probably.

00:18:08.790 --> 00:18:12.180
I think with this kind of
question, I would say just run

00:18:12.180 --> 00:18:14.770
some tests.

00:18:14.770 --> 00:18:16.280
Part of it depends on
the common use case.

00:18:16.280 --> 00:18:23.080
Like are you transcoding a
3-second video of a kitten

00:18:23.080 --> 00:18:26.740
playing with a ball of yarn
or a full-length movie?

00:18:26.740 --> 00:18:29.860
Because in different cases,
you're going to have different

00:18:29.860 --> 00:18:31.170
ideal ways to handle them.

00:18:31.170 --> 00:18:33.270
TREVOR JOHNS: Yeah.

00:18:33.270 --> 00:18:36.110
And we still don't have anybody
on our live Hangout.

00:18:36.110 --> 00:18:38.830
So with that, that's the end
of our questions for today.

00:18:38.830 --> 00:18:40.140
Thank you to everyone
who wrote in.

00:18:40.140 --> 00:18:42.800
We're here every Wednesday
at 2:00 PM Pacific time,

00:18:42.800 --> 00:18:45.010
answering your questions.

00:18:45.010 --> 00:18:47.310
Please, if you do have a
question, submit it to

00:18:47.310 --> 00:18:48.320
Moderator ahead of time.

00:18:48.320 --> 00:18:52.110
We can go and get you the best
answers if the questions don't

00:18:52.110 --> 00:18:54.490
come in an hour before
the show.

00:18:54.490 --> 00:18:57.030
Also, we're trying to
do something new.

00:18:57.030 --> 00:18:58.610
We tried to do it with Reto's
video this week.

00:18:58.610 --> 00:19:00.590
We'll be doing it next
week, as well, too.

00:19:00.590 --> 00:19:02.010
Next week, we'll actually be
able to show the video.

00:19:02.010 --> 00:19:04.660
But we want to go ahead and have
as many of the questions

00:19:04.660 --> 00:19:07.260
in Moderator have videos
attached to them as possible.

00:19:07.260 --> 00:19:09.400
So when you do submit your
questions, it's now a new

00:19:09.400 --> 00:19:11.580
field in Moderator that says
"attach YouTube video," and

00:19:11.580 --> 00:19:14.550
you just paste a URL to
a prerecorded video

00:19:14.550 --> 00:19:15.600
from YouTube there.

00:19:15.600 --> 00:19:16.560
It's not required.

00:19:16.560 --> 00:19:18.550
You're still welcome to submit
questions the old-fashioned

00:19:18.550 --> 00:19:20.100
way with text.

00:19:20.100 --> 00:19:22.980
But if you do have a webcam and
want to take 30 seconds to

00:19:22.980 --> 00:19:24.950
go and record your question,
we'd love to see

00:19:24.950 --> 00:19:26.200
your face on the air.

00:19:26.200 --> 00:19:27.910
So please give it a try.

00:19:27.910 --> 00:19:30.900
And as always, let us
know how it works.

00:19:30.900 --> 00:19:33.820
You can reach us via our Google+
page, which is Android

00:19:33.820 --> 00:19:36.680
Developers, or
developers.android.com/+ is

00:19:36.680 --> 00:19:39.320
the shortcut URL to get there.

00:19:39.320 --> 00:19:41.450
And with that, I think that's
it for this week.

00:19:41.450 --> 00:19:42.440
ALEX LUCAS: Yep.

00:19:42.440 --> 00:19:44.510
TREVOR JOHNS: So thanks,
everyone, for joining us.

00:19:44.510 --> 00:19:47.040
And again, we'll be back
next Wednesday.

00:19:47.040 --> 00:19:48.290
Happy coding.

