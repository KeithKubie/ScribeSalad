WEBVTT
Kind: captions
Language: en

00:00:03.850 --> 00:00:04.000
Hi.

00:00:04.000 --> 00:00:05.110
I'm JJ Behrens.

00:00:05.110 --> 00:00:06.950
I'm a developer advocate
at Google.

00:00:06.950 --> 00:00:09.640
And I'm here to talk about
using Ruby on Rails and

00:00:09.640 --> 00:00:12.310
YouTube for educational
applications.

00:00:12.310 --> 00:00:13.420
So here's my goal.

00:00:13.420 --> 00:00:14.990
I want to talk about
four things.

00:00:14.990 --> 00:00:16.710
I want to talk about
Ruby on Rails.

00:00:16.710 --> 00:00:18.500
I want to talk about YouTube.

00:00:18.500 --> 00:00:20.340
I want to talk about
education.

00:00:20.340 --> 00:00:23.130
And I want to talk about
test-driven development.

00:00:23.130 --> 00:00:26.000
And I want to do it all
at the same time.

00:00:26.000 --> 00:00:27.670
This is what I call
a peanut butter,

00:00:27.670 --> 00:00:29.870
banana, and honey sandwich.

00:00:29.870 --> 00:00:32.490
YouTube is of course the
honey because videos

00:00:32.490 --> 00:00:34.180
make everything sweeter.

00:00:34.180 --> 00:00:36.510
Education is the banana because
everyone knows that

00:00:36.510 --> 00:00:39.160
education is bananas.

00:00:39.160 --> 00:00:41.470
Ruby on Rails is the peanut
butter because it holds

00:00:41.470 --> 00:00:42.390
everything together.

00:00:42.390 --> 00:00:44.390
And then test-driven development
is the bread.

00:00:44.390 --> 00:00:46.700
Because without the bread
holding things together,

00:00:46.700 --> 00:00:49.220
everything just falls apart.

00:00:49.220 --> 00:00:52.160
Let me talk about YouTube EDU
first. I promise I'll get to

00:00:52.160 --> 00:00:54.730
some more technical content
in a minute.

00:00:54.730 --> 00:00:59.300
The goal of YouTube EDU is to
engage, educate, and inspire.

00:00:59.300 --> 00:01:05.239
As of 2011, we had 700
educational channels, 500,000

00:01:05.239 --> 00:01:08.120
educational videos,
and 3 billion

00:01:08.120 --> 00:01:10.360
educational video views.

00:01:10.360 --> 00:01:14.270
The vision of YouTube EDU is
to provide a vibrant global

00:01:14.270 --> 00:01:17.080
platform where anyone, anywhere,
can obtain a

00:01:17.080 --> 00:01:18.710
world-class education.

00:01:18.710 --> 00:01:21.220
Whether you are a student,
teacher, or gifted

00:01:21.220 --> 00:01:24.250
storyteller, our hope is that
you'll be able to continually

00:01:24.250 --> 00:01:26.830
discover, create, and
share educational

00:01:26.830 --> 00:01:28.440
videos with the world.

00:01:28.440 --> 00:01:30.720
I know this is a technical talk,
but I hope you won't

00:01:30.720 --> 00:01:33.460
mind if I show you this one
really great video about

00:01:33.460 --> 00:01:35.080
YouTube EDU.

00:01:35.080 --> 00:01:37.727
It's a video about YouTube
for schools.

00:01:37.727 --> 00:02:16.493
[VIDEO PLAYBACK]

00:02:16.493 --> 00:02:16.990
[POPPING SOUND]

00:02:16.990 --> 00:02:18.481
[SOUNDS OF EXCITEMENT
FROM CLASS]

00:02:18.481 --> 00:02:21.412
-If this does not
blow your mind--

00:02:21.412 --> 00:02:21.865
-Hola.

00:02:21.865 --> 00:02:23.326
Buenos dias.

00:02:23.326 --> 00:02:25.336
[INAUDIBLE]

00:02:25.336 --> 00:02:28.755
-It is a dream deeply rooted
in the American dream.

00:02:39.124 --> 00:02:41.674
-And we eventually
broke the code.

00:02:41.674 --> 00:02:44.070
-Today, students, we're going
to learn about oxygen.

00:03:03.050 --> 00:03:03.540
[END VIDEO PLAYBACK]

00:03:03.540 --> 00:03:06.520
So let's talk about using
Ruby with YouTube APIs.

00:03:06.520 --> 00:03:08.680
First of all, some
brutal honesty.

00:03:08.680 --> 00:03:11.400
Let's face it, Ruby developers
are a lot more likely to talk

00:03:11.400 --> 00:03:15.670
about Amazon APIs than they are
to talk about Google APIs.

00:03:15.670 --> 00:03:18.400
And Google job postings are a
lot more likely to talk about

00:03:18.400 --> 00:03:20.980
Python than they are
to talk about Ruby.

00:03:20.980 --> 00:03:23.670
But there are a lot of us here
at Google who love Ruby.

00:03:23.670 --> 00:03:26.380
And I want to help you overcome
the hurdles that Ruby

00:03:26.380 --> 00:03:29.100
developers face when they start
using Google APIs in

00:03:29.100 --> 00:03:32.400
general and YouTube
APIs specifically.

00:03:32.400 --> 00:03:35.360
In order to pave the way, I
wrote a sample application.

00:03:35.360 --> 00:03:38.360
Quizzimoto is a Ruby on Rails
application that I wrote for

00:03:38.360 --> 00:03:39.600
this presentation.

00:03:39.600 --> 00:03:42.880
It uses the YouTube APIs as
well as the Google+ APIs.

00:03:42.880 --> 00:03:46.270
And I'm hoping to open source
it as soon as possible.

00:03:46.270 --> 00:03:48.250
Let me show you an example
of using it.

00:03:48.250 --> 00:03:50.280
Here we are at the
welcome screen.

00:03:50.280 --> 00:03:51.440
And it says, Quizzimoto.

00:03:51.440 --> 00:03:52.650
Welcome to Quizzimoto.

00:03:52.650 --> 00:03:55.500
This application lets you build
video-based quizzes.

00:03:55.500 --> 00:03:58.630
I'm going to hit Login
to continue.

00:03:58.630 --> 00:04:01.220
It says, Quizzimoto is
requesting permission to

00:04:01.220 --> 00:04:04.490
manage your YouTube account,
know who you are on Google,

00:04:04.490 --> 00:04:07.100
and perform these operations
while I'm not using this

00:04:07.100 --> 00:04:08.250
application.

00:04:08.250 --> 00:04:11.490
And notice, I'm on
accounts.google.com.

00:04:11.490 --> 00:04:12.870
I'm going to go ahead
and allow access.

00:04:19.149 --> 00:04:21.370
So here we are at the homepage
for Quizzimoto.

00:04:21.370 --> 00:04:22.840
It says, welcome
to Quizzimoto.

00:04:22.840 --> 00:04:25.405
This application lets you build
video-based quizzes.

00:04:25.405 --> 00:04:28.140
And it shows me the
available quizzes.

00:04:28.140 --> 00:04:30.185
Each of these has a title,
a thumbnail,

00:04:30.185 --> 00:04:31.630
an age, and a country.

00:04:31.630 --> 00:04:34.700
So let's click on Basic
Trigonometry.

00:04:34.700 --> 00:04:37.740
Here we have a quiz on the
left and a YouTube

00:04:37.740 --> 00:04:38.830
video on the right.

00:04:38.830 --> 00:04:41.910
And you could click to play the
video and then answer the

00:04:41.910 --> 00:04:42.990
questions in the quiz.

00:04:42.990 --> 00:04:45.050
It's a pretty simple mashup.

00:04:45.050 --> 00:04:46.990
So let's go ahead and
edit this quiz.

00:04:46.990 --> 00:04:50.150
We could change the name, the
minimum age, and the country.

00:04:50.150 --> 00:04:52.170
We could select a new video.

00:04:52.170 --> 00:04:53.600
And we could pick a new form.

00:04:53.600 --> 00:04:55.540
I'll go ahead and search
for a video.

00:04:55.540 --> 00:04:58.540
So this time I want to
search for geometry.

00:04:58.540 --> 00:05:01.690
GData is used to get search
results from YouTube.

00:05:01.690 --> 00:05:03.620
And you could pick any one
of these videos to

00:05:03.620 --> 00:05:05.270
use with your quiz.

00:05:05.270 --> 00:05:07.530
Now, let me show you the form.

00:05:07.530 --> 00:05:10.150
This is actually a
Google Docs form.

00:05:10.150 --> 00:05:12.550
And you can see here the
title of the quiz

00:05:12.550 --> 00:05:14.300
and a bunch of questions.

00:05:14.300 --> 00:05:17.530
The idea is that anyone could
use this form to add new

00:05:17.530 --> 00:05:21.240
questions by clicking here on
Add Item and adding a new type

00:05:21.240 --> 00:05:24.230
of question, such as checkboxes,
and then filling

00:05:24.230 --> 00:05:28.340
in the question title, the
help text, and so forth.

00:05:28.340 --> 00:05:32.040
Now, when the user completes the
quiz, all of the answers

00:05:32.040 --> 00:05:34.540
will automatically get saved
to a spreadsheet.

00:05:34.540 --> 00:05:36.170
And here is the spreadsheet
that the

00:05:36.170 --> 00:05:37.570
teacher could look at.

00:05:37.570 --> 00:05:40.260
And so we have one answer here
with the timestamp, the length

00:05:40.260 --> 00:05:42.670
of the hypotenuse,
and so forth.

00:05:42.670 --> 00:05:45.130
And so immediately, the teacher
could see all of the

00:05:45.130 --> 00:05:47.940
responses that students have
filled out when they were

00:05:47.940 --> 00:05:49.880
answering the quiz.

00:05:49.880 --> 00:05:53.180
Now let me give you an overview
of YouTube APIs.

00:05:53.180 --> 00:05:56.600
With GData APIs, you could
perform searches, upload

00:05:56.600 --> 00:05:59.810
videos, create playlists,
and more.

00:05:59.810 --> 00:06:02.450
With Player APIs, you could
control the player using

00:06:02.450 --> 00:06:05.500
either ActionScript
3 or JavaScript.

00:06:05.500 --> 00:06:09.020
If you'd like to learn more,
go to youtube.com/dev.

00:06:09.020 --> 00:06:11.830
So let me give you some advice
concerning client libraries.

00:06:11.830 --> 00:06:14.520
And I'm going to get a little
bit opinionated here.

00:06:14.520 --> 00:06:16.020
Be skeptical of client
libraries.

00:06:16.020 --> 00:06:18.610
They're often poorly documented
or out of date.

00:06:18.610 --> 00:06:22.030
I think you should understand
and embrace REST APIs.

00:06:22.030 --> 00:06:23.860
They're often very
well documented,

00:06:23.860 --> 00:06:25.590
especially at Google.

00:06:25.590 --> 00:06:27.760
Understand what the client
library does.

00:06:27.760 --> 00:06:30.240
Read the documentation
and the samples.

00:06:30.240 --> 00:06:31.890
And don't be afraid to
skim the source,

00:06:31.890 --> 00:06:33.690
especially the tests.

00:06:33.690 --> 00:06:36.120
I think you should use client
libraries when they make your

00:06:36.120 --> 00:06:37.370
life easier.

00:06:37.370 --> 00:06:40.200
Now let me share a note
about API versions.

00:06:40.200 --> 00:06:44.040
The current version of the Data
API for YouTube is 2.1.

00:06:44.040 --> 00:06:47.560
It's based on the GData
API infrastructure.

00:06:47.560 --> 00:06:50.290
When the newer version of the
Data API for YouTube comes

00:06:50.290 --> 00:06:52.590
out, it'll be version 3.

00:06:52.590 --> 00:06:55.700
And it'll be based on a newer
API infrastructure.

00:06:55.700 --> 00:06:58.930
Other Google APIs, such as
Google+, already use this

00:06:58.930 --> 00:07:01.560
newer API infrastructure.

00:07:01.560 --> 00:07:03.060
Different client libraries
support

00:07:03.060 --> 00:07:04.670
different YouTube API versions.

00:07:04.670 --> 00:07:07.070
So it's important that you pick
the right client library

00:07:07.070 --> 00:07:09.410
for the right API version.

00:07:09.410 --> 00:07:12.020
When version 3 comes out, we'll
all be able to switch to

00:07:12.020 --> 00:07:14.720
the much nicer, more modern
client libraries that are

00:07:14.720 --> 00:07:17.890
already in use by projects
such as Google+.

00:07:17.890 --> 00:07:19.970
Now let me talk about the
various Google client

00:07:19.970 --> 00:07:22.340
libraries for Ruby.

00:07:22.340 --> 00:07:25.490
First of all, there's
google-api-ruby-client.

00:07:25.490 --> 00:07:28.030
This automatically creates
bindings for the

00:07:28.030 --> 00:07:30.420
newer Google APIs.

00:07:30.420 --> 00:07:32.840
Signet is a client library
that's used by

00:07:32.840 --> 00:07:34.880
google-api-ruby-client.

00:07:34.880 --> 00:07:36.800
It handles things like OAuth2.

00:07:36.800 --> 00:07:38.540
And it's also useful
for working with

00:07:38.540 --> 00:07:41.120
older Google APIs.

00:07:41.120 --> 00:07:44.850
Gdata-ruby-util was a client
library used for older

00:07:44.850 --> 00:07:47.380
Gdata-based Google APIs.

00:07:47.380 --> 00:07:49.790
It has a little bit of
YouTube-specific code.

00:07:49.790 --> 00:07:52.380
But it doesn't include support
for OAuth2, and

00:07:52.380 --> 00:07:54.150
it's no longer necessary.

00:07:54.150 --> 00:07:57.190
YOUTUBE_IT is a fairly modern
third-party library.

00:07:57.190 --> 00:07:59.360
But unfortunately, it
doesn't include

00:07:59.360 --> 00:08:01.740
support for OAuth2 either.

00:08:01.740 --> 00:08:04.530
Here's what Quizzimoto needed
from a client library.

00:08:04.530 --> 00:08:06.870
First of all, I needed OAuth2.

00:08:06.870 --> 00:08:09.740
And I needed the ability to pass
the YouTube developer key

00:08:09.740 --> 00:08:11.440
as a custom header.

00:08:11.440 --> 00:08:14.990
I needed support for both older
and newer Google APIs.

00:08:14.990 --> 00:08:15.950
Here's what I used.

00:08:15.950 --> 00:08:18.490
I used the
google-api-ruby-client for

00:08:18.490 --> 00:08:21.430
talking to newer APIs
such as Google+.

00:08:21.430 --> 00:08:24.540
And I used Signet for doing
OAuth2 and talking to older

00:08:24.540 --> 00:08:28.060
APIs such as YouTube's
GData API.

00:08:28.060 --> 00:08:30.710
So let me talk about OAuth2
because it's one of the

00:08:30.710 --> 00:08:33.630
biggest hurdles that Ruby
developers face when they want

00:08:33.630 --> 00:08:36.530
to build an application
for YouTube.

00:08:36.530 --> 00:08:39.230
So you might be wondering
why you need OAuth2.

00:08:39.230 --> 00:08:41.940
OAuth2 is an authorization
system.

00:08:41.940 --> 00:08:45.860
Using OAuth2, you could access
an API on the user's behalf

00:08:45.860 --> 00:08:47.810
and do things with
his account.

00:08:47.810 --> 00:08:49.650
OAuth2 supports different
flows for

00:08:49.650 --> 00:08:51.100
different types of apps.

00:08:51.100 --> 00:08:54.000
There is even a flow for
non-web-enabled devices such

00:08:54.000 --> 00:08:55.575
as Xbox 360.

00:08:55.575 --> 00:08:57.770
Let me share with you
the bigger picture.

00:08:57.770 --> 00:08:59.740
The user uses your app.

00:08:59.740 --> 00:09:02.360
Your app redirects the
user to Google.

00:09:02.360 --> 00:09:05.230
Google asks the user if your
app can access certain

00:09:05.230 --> 00:09:07.210
services on his behalf.

00:09:07.210 --> 00:09:09.590
Then Google redirects your app
with some information.

00:09:09.590 --> 00:09:12.450
And your app talks to Google to
verify the authenticity of

00:09:12.450 --> 00:09:13.930
that information.

00:09:13.930 --> 00:09:16.840
Next, your app can use that
information to access certain

00:09:16.840 --> 00:09:19.270
services on the user's behalf.

00:09:19.270 --> 00:09:21.530
The important thing here is
that the user never has to

00:09:21.530 --> 00:09:23.380
share his username and
password with your

00:09:23.380 --> 00:09:24.450
application.

00:09:24.450 --> 00:09:27.320
Now, the great thing about using
OAuth2 for Quizzimoto is

00:09:27.320 --> 00:09:29.810
that I don't need to create
my own login system.

00:09:29.810 --> 00:09:32.480
I could use OAuth2 to get
authorization to load the

00:09:32.480 --> 00:09:36.800
user's Google+ identity, ask
the user for read access to

00:09:36.800 --> 00:09:39.890
his Google+, and read/write
access to his YouTube.

00:09:39.890 --> 00:09:43.440
So obviously, OAuth2 is too
large of a subject for me to

00:09:43.440 --> 00:09:44.610
cover in 10 minutes.

00:09:44.610 --> 00:09:47.490
But let me show you where
you can learn more.

00:09:47.490 --> 00:09:51.495
At oauthssodemo.appspot.com, we
have a sample application

00:09:51.495 --> 00:09:54.040
that integrates with
OpenID, which is

00:09:54.040 --> 00:09:56.400
very related to OAuth2.

00:09:56.400 --> 00:09:58.720
The nice thing about this
application is that it shows

00:09:58.720 --> 00:10:01.440
you each step along the process,
along with the

00:10:01.440 --> 00:10:02.760
parameters involved.

00:10:02.760 --> 00:10:05.310
So here are the URLs involved.

00:10:05.310 --> 00:10:07.640
And here are the parameters
involved.

00:10:07.640 --> 00:10:11.800
Now let me go ahead and
click Connect Me.

00:10:11.800 --> 00:10:13.220
So I'm going to go ahead
and sign in.

00:10:16.860 --> 00:10:19.130
And now I'm logged in.

00:10:19.130 --> 00:10:22.320
And it shows my profile picture,
which I decided to be

00:10:22.320 --> 00:10:24.400
inverse, and it shows my name.

00:10:24.400 --> 00:10:27.540
The next thing that I'd like
to show off is the OAuth2

00:10:27.540 --> 00:10:29.670
documentation for YouTube.

00:10:29.670 --> 00:10:31.340
Here's the URL.

00:10:31.340 --> 00:10:34.870
And here's what it looks like.

00:10:34.870 --> 00:10:38.030
When I first wanted to learn
about OAuth2, I knew it was a

00:10:38.030 --> 00:10:39.950
bit of an intimidating
subject.

00:10:39.950 --> 00:10:42.970
So I was very happy to see
documentation on it.

00:10:42.970 --> 00:10:45.780
The documentation for YouTube
API tends to be excellent

00:10:45.780 --> 00:10:47.830
because we have really
good tech writers.

00:10:47.830 --> 00:10:50.190
So I read through this
from top to bottom.

00:10:50.190 --> 00:10:53.910
And at the end, everything
just made sense.

00:10:53.910 --> 00:10:55.810
The next thing that I'd like
to show you is the

00:10:55.810 --> 00:10:58.300
google-api-ruby-client.

00:10:58.300 --> 00:11:02.770
This is a library that's
on code.google.com.

00:11:02.770 --> 00:11:05.840
Most importantly, I'd like to
show you the source code.

00:11:05.840 --> 00:11:08.800
This is a small Sinatra
application that integrates

00:11:08.800 --> 00:11:10.680
with OAuth2.

00:11:10.680 --> 00:11:13.430
It's actually fairly short,
which is really nice because

00:11:13.430 --> 00:11:16.070
it makes it easy to integrate
with your own Ruby on Rails

00:11:16.070 --> 00:11:19.270
application or Sinatra
application.

00:11:19.270 --> 00:11:20.570
First, let me open
up routes.rb.

00:11:23.520 --> 00:11:26.060
We have three routes here--

00:11:26.060 --> 00:11:30.860
oauth2_authorize,
oauth2_callback, and logout.

00:11:30.860 --> 00:11:32.750
And these correspond
to the three steps

00:11:32.750 --> 00:11:34.550
that you need in OAuth2.

00:11:34.550 --> 00:11:39.470
Each of these are based on
the OAuth2 controller.

00:11:39.470 --> 00:11:42.590
Now let me show you application
controller.

00:11:42.590 --> 00:11:45.580
There's a lot going on in this
file, but the most important

00:11:45.580 --> 00:11:48.435
thing is the setup
OAuth2 method.

00:11:51.330 --> 00:11:54.110
This method was taken from the
earlier example I showed you

00:11:54.110 --> 00:11:55.920
from the Sinatra application.

00:11:55.920 --> 00:11:58.640
I took it and modified
it slightly.

00:11:58.640 --> 00:12:02.150
So here we're setting up a
Google API client, with all

00:12:02.150 --> 00:12:05.760
the authorization and HTTP
adapter stuff we need.

00:12:05.760 --> 00:12:07.760
And basically, I just
tweaked the code

00:12:07.760 --> 00:12:10.260
that was there earlier.

00:12:10.260 --> 00:12:12.700
Now let me show you the
OAuth2 controller.

00:12:12.700 --> 00:12:14.440
This class is actually
fairly short.

00:12:14.440 --> 00:12:15.570
We have three methods--

00:12:15.570 --> 00:12:19.100
authorize, callback,
and logout.

00:12:19.100 --> 00:12:21.820
Authorize sets up an
authorization URI.

00:12:21.820 --> 00:12:25.170
Callback initializes the Signet
client by fetching the

00:12:25.170 --> 00:12:28.490
access token and then does some
work with the session,

00:12:28.490 --> 00:12:30.130
and then redirects.

00:12:30.130 --> 00:12:32.830
Logout basically resets
the session.

00:12:32.830 --> 00:12:35.460
Now let me talk about doing
test-driven development with

00:12:35.460 --> 00:12:37.170
RESTful web APIs.

00:12:37.170 --> 00:12:39.340
You might be asking yourself,
why bother?

00:12:39.340 --> 00:12:41.190
Well, the fact of the matter
is code without

00:12:41.190 --> 00:12:43.050
tests tends to break.

00:12:43.050 --> 00:12:46.020
Whereas robust, well-tested code
is better than fragile,

00:12:46.020 --> 00:12:47.730
once-tested code.

00:12:47.730 --> 00:12:49.710
It's not really reasonable
to use a RESTful

00:12:49.710 --> 00:12:51.390
web API in your tests.

00:12:51.390 --> 00:12:53.670
First of all, it'd
be too slow.

00:12:53.670 --> 00:12:56.060
It's not very easy to
reset the state on

00:12:56.060 --> 00:12:57.990
the third-party server.

00:12:57.990 --> 00:12:59.770
There might be quota
issues involved.

00:12:59.770 --> 00:13:03.250
And it's hard to cause certain
error conditions to happen.

00:13:03.250 --> 00:13:05.450
Last of all, I like to code
on BART, which is

00:13:05.450 --> 00:13:07.870
our local train system.

00:13:07.870 --> 00:13:09.760
I like integration tests.

00:13:09.760 --> 00:13:12.610
That means I'm going to load
pages in my tests that make

00:13:12.610 --> 00:13:14.450
use of RESTful web APIs.

00:13:14.450 --> 00:13:16.700
So here are some common
reactions I've heard.

00:13:16.700 --> 00:13:20.090
Some people say, oh, but doing
test-driven development with

00:13:20.090 --> 00:13:22.340
RESTful web APIs is
just too hard.

00:13:22.340 --> 00:13:26.220
Or how do you write a stub for
something that you barely even

00:13:26.220 --> 00:13:26.990
understand?

00:13:26.990 --> 00:13:29.940
Or my favorite, I work
at Pivotal Labs.

00:13:29.940 --> 00:13:31.480
I've been doing test-driven
development

00:13:31.480 --> 00:13:33.170
since the second grade.

00:13:33.170 --> 00:13:35.120
Hurry up and show me
some JavaScript.

00:13:35.120 --> 00:13:37.610
Here's my approach to doing
test-driven development with

00:13:37.610 --> 00:13:38.980
RESTful web APIs.

00:13:38.980 --> 00:13:42.300
IRB is the standard interactive
shell for Ruby.

00:13:42.300 --> 00:13:44.710
Pry is an IRB replacement.

00:13:44.710 --> 00:13:47.020
I use Pry to start a shell
from within the right

00:13:47.020 --> 00:13:49.110
application context.

00:13:49.110 --> 00:13:52.070
Play with your app until you
have all the context setup.

00:13:52.070 --> 00:13:55.360
And then add binding.pry
somewhere in the code,

00:13:55.360 --> 00:13:57.490
probably in a controller
action.

00:13:57.490 --> 00:13:59.810
Load the page, and it'll hang.

00:13:59.810 --> 00:14:02.630
Now go play around with Pry in
the terminal where you started

00:14:02.630 --> 00:14:04.420
rails server.

00:14:04.420 --> 00:14:07.270
Use Pry to play around with
the client library.

00:14:07.270 --> 00:14:09.030
Make a request and get
a response that

00:14:09.030 --> 00:14:10.240
you're looking for.

00:14:10.240 --> 00:14:12.640
Then save the output
for later.

00:14:12.640 --> 00:14:15.210
Now, as usual with test-driven
development, the goal is to

00:14:15.210 --> 00:14:17.350
write some tests and
write some code.

00:14:17.350 --> 00:14:20.400
It can be either a functional
or an integration test. Add

00:14:20.400 --> 00:14:22.860
just enough code to your
controller or whatever so that

00:14:22.860 --> 00:14:25.430
it tries to use the
RESTful web API.

00:14:25.430 --> 00:14:28.320
Now do something in your tests
so that it exercises the

00:14:28.320 --> 00:14:29.390
controller.

00:14:29.390 --> 00:14:30.520
I use WebMock.

00:14:30.520 --> 00:14:33.670
WebMock is a library for
stubbing RESTful web APIs.

00:14:33.670 --> 00:14:36.440
It'll intercept and prevent your
test from actually making

00:14:36.440 --> 00:14:37.620
web requests.

00:14:37.620 --> 00:14:41.350
It'll give you a snippet of code
to stub out your request.

00:14:41.350 --> 00:14:43.800
Merge that snippet of code with
the real response that

00:14:43.800 --> 00:14:46.780
you saved from earlier, And
put it into your test.

00:14:46.780 --> 00:14:49.140
Let me share some other
random tricks.

00:14:49.140 --> 00:14:51.460
I tend to save the real response
in a file with a

00:14:51.460 --> 00:14:55.820
realistic name based on the
original URL that I requested.

00:14:55.820 --> 00:14:58.260
You should use these same
techniques to handle all of

00:14:58.260 --> 00:15:01.500
your error cases, such as when
your OAuth2 access token

00:15:01.500 --> 00:15:05.810
expires or when you don't
get any search results.

00:15:05.810 --> 00:15:07.450
Wrap your stubs in functions.

00:15:07.450 --> 00:15:10.100
That way you can reuse them
for multiple functional or

00:15:10.100 --> 00:15:12.360
integration tests.

00:15:12.360 --> 00:15:16.130
In order to simulate an OAuth2
login, look at the tests that

00:15:16.130 --> 00:15:18.520
come with the Signet
client library.

00:15:18.520 --> 00:15:22.650
Finally, you can use vcr to
automate this whole process.

00:15:22.650 --> 00:15:25.180
Now let me demonstrate all the
techniques that I've talked

00:15:25.180 --> 00:15:26.460
about so far.

00:15:26.460 --> 00:15:28.830
First of all, I have to admit
that there's actually a bug in

00:15:28.830 --> 00:15:29.940
my application.

00:15:29.940 --> 00:15:33.720
If I search for a video
with a random name,

00:15:33.720 --> 00:15:35.010
the application crashes.

00:15:35.010 --> 00:15:37.060
It said, no method error.

00:15:37.060 --> 00:15:40.220
You have a nil object when
you didn't expect it.

00:15:40.220 --> 00:15:42.320
This is the Ruby programmer's
nightmare.

00:15:42.320 --> 00:15:44.550
This is a typical bug.

00:15:44.550 --> 00:15:46.460
So I'm looking at the code.

00:15:46.460 --> 00:15:50.450
And it says, if search_results
sub data, sub items,

00:15:50.450 --> 00:15:51.600
.length equals 0.

00:15:51.600 --> 00:15:53.490
And it's crashing right there.

00:15:53.490 --> 00:15:56.180
Well, obviously, that's
not quite right.

00:15:56.180 --> 00:15:59.150
I know that search results is
defined in Quizzes Controller.

00:15:59.150 --> 00:16:02.380
So let's go look at that code.

00:16:02.380 --> 00:16:05.390
Here in Quizzes Controller, at
the bottom, we have a method

00:16:05.390 --> 00:16:07.480
called video_search.

00:16:07.480 --> 00:16:09.810
And it defines search results.

00:16:09.810 --> 00:16:13.010
Here's the call to fetch
YouTube resource.

00:16:13.010 --> 00:16:17.260
I added a binding.pry so that we
could interrupt the request

00:16:17.260 --> 00:16:19.340
to see what's going on.

00:16:19.340 --> 00:16:23.360
So let's go over here and
back in the browser.

00:16:23.360 --> 00:16:25.470
And I'll reload the page.

00:16:25.470 --> 00:16:28.150
You'll notice that it hangs.

00:16:28.150 --> 00:16:30.800
Back in the terminal where I
started the server, I see that

00:16:30.800 --> 00:16:32.900
it stopped on binding.pry.

00:16:32.900 --> 00:16:36.110
I'm going to go a little bit
further in code and grab this,

00:16:36.110 --> 00:16:36.320
fetch_youtube_resource.

00:16:36.320 --> 00:16:40.560
YouTube I'm going to copy that,
go back to the terminal,

00:16:40.560 --> 00:16:41.810
and paste it.

00:16:44.000 --> 00:16:46.710
Here's the response.

00:16:46.710 --> 00:16:47.600
It's a lot of stuff.

00:16:47.600 --> 00:16:50.160
But you'll see that there's a
body where it's talking about

00:16:50.160 --> 00:16:51.510
the API version.

00:16:51.510 --> 00:16:53.630
And we see some data.

00:16:53.630 --> 00:16:55.840
I'm going to quit
out of there.

00:16:55.840 --> 00:16:57.090
I'm going to type
response.body.

00:16:59.850 --> 00:17:02.630
And here's the body that we're
getting from YouTube.

00:17:02.630 --> 00:17:05.240
So this is nice because I could
see exactly what YouTube

00:17:05.240 --> 00:17:06.810
is returning to me.

00:17:06.810 --> 00:17:08.060
I'm going to copy this.

00:17:10.690 --> 00:17:12.380
And I'll paste this
into a new file.

00:17:18.380 --> 00:17:21.630
Back in quizzes_controller.rb,
there's also a call to

00:17:21.630 --> 00:17:24.450
JSON.parse(response.body).

00:17:24.450 --> 00:17:25.480
I want to try that out, too.

00:17:25.480 --> 00:17:27.200
Because I want to see what
the body looks like

00:17:27.200 --> 00:17:28.850
once it's been parsed.

00:17:28.850 --> 00:17:29.830
So I'll copy that.

00:17:29.830 --> 00:17:33.990
And I'll paste that
into my terminal.

00:17:33.990 --> 00:17:37.200
Here we see API version 2.1.

00:17:37.200 --> 00:17:40.880
And we see total items. And
notice that we don't see

00:17:40.880 --> 00:17:43.820
anything about items, so there
can't be a length.

00:17:43.820 --> 00:17:46.990
All we see is total
items is 0.

00:17:46.990 --> 00:17:49.300
I'm going to copy and paste
that, too, just because it'll

00:17:49.300 --> 00:17:50.970
remind me of what I'm
playing with.

00:17:57.160 --> 00:18:00.650
Now I'm going to come
to quizzes_spec.rb.

00:18:00.650 --> 00:18:04.040
And I'm going to write a test
that simulates the bug.

00:18:04.040 --> 00:18:05.990
So I already have it written
here, but I have

00:18:05.990 --> 00:18:07.810
it commented out.

00:18:07.810 --> 00:18:11.960
So we have a test that says,
it gracefully handles no

00:18:11.960 --> 00:18:13.920
search results.

00:18:13.920 --> 00:18:15.700
And this is our spec.

00:18:15.700 --> 00:18:16.920
So I'm going to comment
this out.

00:18:16.920 --> 00:18:21.230
It says, quiz equals factory
quiz, login, visit

00:18:21.230 --> 00:18:23.930
quiz_video_search_url
for the quiz.

00:18:23.930 --> 00:18:27.150
Fill in the q with this
random query.

00:18:27.150 --> 00:18:28.500
Click the button Search.

00:18:28.500 --> 00:18:31.250
And then the page should have
content your search did not

00:18:31.250 --> 00:18:32.720
match any videos.

00:18:32.720 --> 00:18:35.720
I'm going to go ahead
and save this.

00:18:35.720 --> 00:18:40.410
Now, back in the terminal, I'm
going to type rake spec.

00:18:40.410 --> 00:18:42.500
You'll see some warnings because
the versions of the

00:18:42.500 --> 00:18:46.970
libraries that I'm using don't
perfectly match up.

00:18:46.970 --> 00:18:51.540
Now let's look at the
test failure.

00:18:51.540 --> 00:18:54.130
It says, quizzes
edit gracefully

00:18:54.130 --> 00:18:55.410
handles no search results.

00:18:55.410 --> 00:18:57.390
OK, that's the right test.

00:18:57.390 --> 00:19:00.930
It says, WebMock, net connection
not allowed error.

00:19:00.930 --> 00:19:04.390
Real HTTP connections
are disabled.

00:19:04.390 --> 00:19:06.470
This is a sign that WebMock
is doing its job.

00:19:06.470 --> 00:19:08.040
It didn't allow my
application to

00:19:08.040 --> 00:19:10.000
actually talk to the internet.

00:19:10.000 --> 00:19:12.740
The nice thing is it gives me
this little snippet of code.

00:19:12.740 --> 00:19:15.060
It says, you could stub
this request with

00:19:15.060 --> 00:19:16.370
the following snippet--

00:19:16.370 --> 00:19:17.400
stub_request--

00:19:17.400 --> 00:19:19.160
and it has a bunch of code.

00:19:19.160 --> 00:19:21.180
I'm going to grab that.

00:19:21.180 --> 00:19:22.860
Copy.

00:19:22.860 --> 00:19:28.600
I'm going to take that back to
my scratch file over here.

00:19:28.600 --> 00:19:31.220
And so it says,
stub_request(:get.

00:19:31.220 --> 00:19:34.270
And here's the URL that
I was requesting.

00:19:34.270 --> 00:19:36.070
And here's the body
that I got.

00:19:36.070 --> 00:19:37.490
It shows an empty
body right now.

00:19:37.490 --> 00:19:39.550
So I'm going to take that.

00:19:39.550 --> 00:19:43.140
And here's the actual body
that I got from YouTube.

00:19:43.140 --> 00:19:46.820
I'm going to copy that
and paste it here.

00:19:46.820 --> 00:19:49.580
And then I'll do some other
massaging to get rid of the

00:19:49.580 --> 00:19:51.560
stuff that I don't care
about, such as

00:19:51.560 --> 00:19:53.720
cache control, et cetera.

00:19:53.720 --> 00:19:57.520
Back in Quizzes Spec, I have
an edited version of what I

00:19:57.520 --> 00:20:00.210
just showed you.

00:20:00.210 --> 00:20:02.500
Here's the stub request
for Get.

00:20:02.500 --> 00:20:04.360
And here's the URL.

00:20:04.360 --> 00:20:07.090
And here's the body
that I expect.

00:20:07.090 --> 00:20:11.070
So now we've stubbed out
the request completely.

00:20:11.070 --> 00:20:11.550
OK.

00:20:11.550 --> 00:20:13.140
Now I'm going to go back
to my terminal.

00:20:16.500 --> 00:20:20.070
I type rake spec again.

00:20:20.070 --> 00:20:22.000
This time, I get another
failure.

00:20:22.000 --> 00:20:24.610
It says, action view
template error.

00:20:24.610 --> 00:20:27.720
You have a nil object when
you didn't expect it.

00:20:27.720 --> 00:20:31.260
The funny thing is that's
exactly what I wanted to see.

00:20:31.260 --> 00:20:33.210
Because I haven't actually
fixed the bug.

00:20:33.210 --> 00:20:36.240
I've only written a test
that shows the bug.

00:20:36.240 --> 00:20:39.460
Now that we have a test that
exercises the behavior I'm

00:20:39.460 --> 00:20:42.170
interested in, I could
go fix the bug.

00:20:42.170 --> 00:20:43.420
Now let's look at
videosearch.html.erb.

00:20:46.020 --> 00:20:48.530
This is where the original
bug happened.

00:20:48.530 --> 00:20:52.770
It says, if search_results,
data, items, .length equals 0.

00:20:52.770 --> 00:20:54.510
So this code's wrong.

00:20:54.510 --> 00:20:56.115
Instead, let's delete this.

00:21:03.470 --> 00:21:06.530
And here's the correct code, if
search_results, sub data,

00:21:06.530 --> 00:21:11.970
sub totalItems, .to_i
equals 0.

00:21:11.970 --> 00:21:13.220
Let's try running that.

00:21:16.110 --> 00:21:18.660
It says, your search did
not match any videos.

00:21:18.660 --> 00:21:21.280
So now we know this bug
has been fixed.

00:21:21.280 --> 00:21:23.040
But has it been fixed
in our tests?

00:21:23.040 --> 00:21:25.020
Let's try that next.

00:21:25.020 --> 00:21:26.910
We run rake spec again.

00:21:30.470 --> 00:21:34.010
All green, 69 examples,
zero failures.

00:21:34.010 --> 00:21:35.550
This bug has been fixed.

00:21:35.550 --> 00:21:38.100
And now that my bug is fixed,
my talk is done.

00:21:38.100 --> 00:21:39.720
So I'd like to thank
you for listening.

00:21:39.720 --> 00:21:43.860
If you'd like to learn more,
go to youtube.com/dev. If

00:21:43.860 --> 00:21:46.570
you'd like to follow us on
Twitter, our Twitter handle is

00:21:46.570 --> 00:21:48.000
YouTubeDev.

00:21:48.000 --> 00:21:49.210
And I'm on Google+.

00:21:49.210 --> 00:21:53.340
So you could find me
at gplus.to/jjinux.

00:21:53.340 --> 00:21:54.590
Thanks for watching.

