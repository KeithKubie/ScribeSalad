WEBVTT
Kind: captions
Language: en

00:00:00.310 --> 00:00:03.930
So, at this point, what I want to do is open a second text buffer,

00:00:03.930 --> 00:00:07.360
a second file, which I'm going to save as Library.

00:00:07.360 --> 00:00:11.200
And, the idea with this is, I want to write code that's going to make it

00:00:11.200 --> 00:00:14.880
simpler for me to write this code later down the line.

00:00:14.880 --> 00:00:19.160
I want to write some generalized code that I can consume here in the consumption

00:00:19.160 --> 00:00:23.500
case, such that when I want to increment the location of any car object,

00:00:23.500 --> 00:00:25.110
I can use the code that's written here,

00:00:25.110 --> 00:00:28.160
that's supposed to be general and useful across many situations.

00:00:28.160 --> 00:00:31.680
I'm going to start by writing a function, then I'm going to edit it,

00:00:31.680 --> 00:00:35.220
so that it's capable of moving a car input object for us.

00:00:35.220 --> 00:00:39.330
So now, by simply calling that function on our two car objects,

00:00:39.330 --> 00:00:41.690
we have the same effect as we had before, but

00:00:41.690 --> 00:00:45.090
without typing out the incrementation logic each time.

00:00:45.090 --> 00:00:48.610
So now, we don't just have these two car objects being stored in amy and

00:00:48.610 --> 00:00:52.290
ben, we have yet another variable, storing yet another object.

00:00:52.290 --> 00:00:54.820
And, this object happens to be a function object.

00:00:54.820 --> 00:00:59.780
That function object is what operates on these two simple car objects and

00:00:59.780 --> 00:01:02.180
modifies their .loc property.

00:01:02.180 --> 00:01:02.890
At this point,

00:01:02.890 --> 00:01:05.920
it would be very reasonable to wonder what we've actually improved.

00:01:05.920 --> 00:01:08.650
It really seems as though there is more code in total here than

00:01:08.650 --> 00:01:12.600
there was a minute ago, and the lines that call, the helper function,

00:01:12.600 --> 00:01:14.860
are just as long as the ones that they replaced.

00:01:14.860 --> 00:01:18.350
There are two important differences that I can think of as to why it's valuable

00:01:18.350 --> 00:01:21.670
to factor repeated code like that out into a function.

