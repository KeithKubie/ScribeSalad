WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:10.970
&gt;&gt; CHAO: Hello, my name is Gerald Chao. I'm
the founder and CTO of Lingospot. This is

00:00:10.970 --> 00:00:17.220
our Homepage. So, let me tell you a little
about Lingospot and how we use Google App

00:00:17.220 --> 00:00:22.511
Engine to help us deliver our services across
the Web. So, here is an example, a publisher

00:00:22.511 --> 00:00:28.270
of ours. This is the Sacramento B. This is
a newspaper in the Sacramento, California

00:00:28.270 --> 00:00:36.149
area. What we do is we will give for any given
article, we’ll analyze this text. For example,

00:00:36.149 --> 00:00:41.590
this is a CDC article about Swine Flu, and
we’ll determine what the interesting topics

00:00:41.590 --> 00:00:48.219
within this are. What page? So, for example,
we identify that Swine Flu and CDC is an interesting

00:00:48.219 --> 00:00:54.320
topic and we’ll turn them automatically
into links. So additionally, we also created

00:00:54.320 --> 00:01:00.609
this related articles we get so, a reader
of this article can find out more about related

00:01:00.609 --> 00:01:06.409
Swine Flu articles from Sac B. So, let’s
say, if I’m a reader and I’m interested

00:01:06.409 --> 00:01:16.229
to find out more about Swine Flu, I can click
on that link and I will be taken to a page

00:01:16.229 --> 00:01:23.759
about, we call this topic page all about Swine
Flu. So, related articles, images, Twitter,

00:01:23.759 --> 00:01:32.219
Wikipedia, trend charts, videos, etc. So,
the way we’re using App Engine is to allow

00:01:32.219 --> 00:01:38.899
us to surf traffic across the Web for any
given publisher that we signed up. So, we

00:01:38.899 --> 00:01:47.090
are working with Sac B Forbes dot com, and
a large advocate news aggregator called paper.com.

00:01:47.090 --> 00:01:53.300
So, we also have publishers all around the
world, in Japan, in Singapore, India and some

00:01:53.300 --> 00:01:59.620
in the U.K. So, App Engine allows us to be
able to deliver our services like these widgets

00:01:59.620 --> 00:02:06.229
and these links, as well as the topic portals,
or all around the world instantaneously. And

00:02:06.229 --> 00:02:14.760
we don't have to worry about sealing out our
services. So, we also have a console that

00:02:14.760 --> 00:02:20.830
a publisher can be able to configure their
topic portals so they can move things around

00:02:20.830 --> 00:02:25.820
and be able to determine what goes into each
one of these content boxes and we can then

00:02:25.820 --> 00:02:33.150
targeted the content of a given article to
that particular related article. So, this

00:02:33.150 --> 00:02:37.661
means that we have a lot of dynamic content
we have to deliver. So, Google App Engine

00:02:37.661 --> 00:02:43.500
allows us to very easily deliver a lot of
different dynamic content across the globe

00:02:43.500 --> 00:02:49.210
very efficiently. So, we’ve been very happy
with Google App Engine. We pretty much started

00:02:49.210 --> 00:02:55.160
looking at it when it first came out about
10 months ago and at that time we’re comparing

00:02:55.160 --> 00:03:00.830
them with Amazon. And Amazon just didn't do
it for us because we have custom logics and

00:03:00.830 --> 00:03:05.920
we need to develop as far as the cash expiration
policy and how we wanted to deliver the quality

00:03:05.920 --> 00:03:10.900
of service. So, when App Engine came along
and we’re a Python shop, so the, all of

00:03:10.900 --> 00:03:16.680
our console and services were in Jangle. So
Power App Engine and Python was a perfect

00:03:16.680 --> 00:03:25.850
fit for us. So, we started using initially
the memo cash API, the EOL Fetch API within,

00:03:25.850 --> 00:03:32.900
we added data source API, so, it has worked
out really well for us. And then we are trying

00:03:32.900 --> 00:03:38.030
to migrate more and more of our Jangle logic
into App Engine because then we don't have

00:03:38.030 --> 00:03:42.900
to worry about scaling out the application
letter which is our Jangle and we’re just

00:03:42.900 --> 00:03:47.320
focusing on delivering it and then some of
our back end which is the analysis engine

00:03:47.320 --> 00:03:52.630
which we host ourselves. So, there is hybrid
approach right now, works really well for

00:03:52.630 --> 00:03:59.150
us and then we’ll migrate as many pieces
as we can away from our data center into App

00:03:59.150 --> 00:04:07.630
Engine. All right so, I’m here at Google
I/O 2009 and I just heard about all the great

00:04:07.630 --> 00:04:15.320
things that Google App Engine is introducing
today or tomorrow. One of it is essentially

00:04:15.320 --> 00:04:20.719
a background task where you can add task to
your Q and it will be processed in the background.

00:04:20.719 --> 00:04:25.620
So, that's one of the limitations that we
have before, is that some requests especially

00:04:25.620 --> 00:04:31.680
that’s maybe CPU or I/O intensive, we cannot
guarantee within the number of seconds that

00:04:31.680 --> 00:04:37.139
we have to return. So, these background Qs
are perfect for us to process these things

00:04:37.139 --> 00:04:43.199
in the background. So that’s to introduce
here at Google I/O and then also large file

00:04:43.199 --> 00:04:49.199
delivery, and so, in case we have large images
or video files even, we can just have store—upload

00:04:49.199 --> 00:04:53.259
it to Google App Engine and they’ll have
it delivered around the world. So, these are

00:04:53.259 --> 00:05:00.060
just examples where App Engine is adding new
features as we also have been moving and migrating

00:05:00.060 --> 00:05:05.389
more and more of our pieces into App Engine
and we really look forward to growing with

00:05:05.389 --> 00:05:08.910
App Engine as we grow our service in the future.

