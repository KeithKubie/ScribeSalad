WEBVTT
Kind: captions
Language: en

00:00:00.110 --> 00:00:02.780
 
in terms of designing confident

00:00:02.780 --> 00:00:02.790
in terms of designing confident
 

00:00:02.790 --> 00:00:04.670
in terms of designing confident
architectures one of the ideas that

00:00:04.670 --> 00:00:04.680
architectures one of the ideas that
 

00:00:04.680 --> 00:00:07.639
architectures one of the ideas that
really hopes is using a one by one

00:00:07.639 --> 00:00:07.649
really hopes is using a one by one
 

00:00:07.649 --> 00:00:10.180
really hopes is using a one by one
convolution now you might be wondering

00:00:10.180 --> 00:00:10.190
convolution now you might be wondering
 

00:00:10.190 --> 00:00:12.919
convolution now you might be wondering
what is the one by one convolution do

00:00:12.919 --> 00:00:12.929
what is the one by one convolution do
 

00:00:12.929 --> 00:00:14.749
what is the one by one convolution do
isn't that just multiplying by a number

00:00:14.749 --> 00:00:14.759
isn't that just multiplying by a number
 

00:00:14.759 --> 00:00:16.369
isn't that just multiplying by a number
is that it seems like a funny thing to

00:00:16.369 --> 00:00:16.379
is that it seems like a funny thing to
 

00:00:16.379 --> 00:00:18.320
is that it seems like a funny thing to
do turns out it's not quite like that

00:00:18.320 --> 00:00:18.330
do turns out it's not quite like that
 

00:00:18.330 --> 00:00:21.769
do turns out it's not quite like that
let's take a look you see one by one

00:00:21.769 --> 00:00:21.779
let's take a look you see one by one
 

00:00:21.779 --> 00:00:25.340
let's take a look you see one by one
filter put the number two there and if

00:00:25.340 --> 00:00:25.350
filter put the number two there and if
 

00:00:25.350 --> 00:00:28.700
filter put the number two there and if
you take this 6x6 image 6 by 6 by 1 and

00:00:28.700 --> 00:00:28.710
you take this 6x6 image 6 by 6 by 1 and
 

00:00:28.710 --> 00:00:30.470
you take this 6x6 image 6 by 6 by 1 and
convolve it with this one by one by one

00:00:30.470 --> 00:00:30.480
convolve it with this one by one by one
 

00:00:30.480 --> 00:00:32.840
convolve it with this one by one by one
filter you end up just taking the image

00:00:32.840 --> 00:00:32.850
filter you end up just taking the image
 

00:00:32.850 --> 00:00:36.290
filter you end up just taking the image
and multiplying by 2 so 1 2 3 ends up

00:00:36.290 --> 00:00:36.300
and multiplying by 2 so 1 2 3 ends up
 

00:00:36.300 --> 00:00:41.000
and multiplying by 2 so 1 2 3 ends up
being 2 4 6 and so on and so a

00:00:41.000 --> 00:00:41.010
being 2 4 6 and so on and so a
 

00:00:41.010 --> 00:00:43.610
being 2 4 6 and so on and so a
convolution by a 1 by 1 filter it

00:00:43.610 --> 00:00:43.620
convolution by a 1 by 1 filter it
 

00:00:43.620 --> 00:00:45.680
convolution by a 1 by 1 filter it
doesn't seem totally useful you just

00:00:45.680 --> 00:00:45.690
doesn't seem totally useful you just
 

00:00:45.690 --> 00:00:48.319
doesn't seem totally useful you just
multiply it by some number but that's

00:00:48.319 --> 00:00:48.329
multiply it by some number but that's
 

00:00:48.329 --> 00:00:52.220
multiply it by some number but that's
the case of 6 by 6 by 1 channel

00:00:52.220 --> 00:00:52.230
the case of 6 by 6 by 1 channel
 

00:00:52.230 --> 00:00:56.959
the case of 6 by 6 by 1 channel
images if you have a 6 by 6 by 32

00:00:56.959 --> 00:00:56.969
images if you have a 6 by 6 by 32
 

00:00:56.969 --> 00:01:00.470
images if you have a 6 by 6 by 32
instead of by 1 then a convolution with

00:01:00.470 --> 00:01:00.480
instead of by 1 then a convolution with
 

00:01:00.480 --> 00:01:03.139
instead of by 1 then a convolution with
a 1 by 1 filter can do something that

00:01:03.139 --> 00:01:03.149
a 1 by 1 filter can do something that
 

00:01:03.149 --> 00:01:05.509
a 1 by 1 filter can do something that
makes much more sense and in particular

00:01:05.509 --> 00:01:05.519
makes much more sense and in particular
 

00:01:05.519 --> 00:01:08.750
makes much more sense and in particular
what a 1 by 1 convolution will do is it

00:01:08.750 --> 00:01:08.760
what a 1 by 1 convolution will do is it
 

00:01:08.760 --> 00:01:11.660
what a 1 by 1 convolution will do is it
will look at each of the 36 different

00:01:11.660 --> 00:01:11.670
will look at each of the 36 different
 

00:01:11.670 --> 00:01:14.719
will look at each of the 36 different
positions here and it will take the

00:01:14.719 --> 00:01:14.729
positions here and it will take the
 

00:01:14.729 --> 00:01:17.749
positions here and it will take the
element wise product between 32 numbers

00:01:17.749 --> 00:01:17.759
element wise product between 32 numbers
 

00:01:17.759 --> 00:01:20.570
element wise product between 32 numbers
on the left and the 32 numbers in the

00:01:20.570 --> 00:01:20.580
on the left and the 32 numbers in the
 

00:01:20.580 --> 00:01:24.010
on the left and the 32 numbers in the
filter and then apply a value

00:01:24.010 --> 00:01:24.020
filter and then apply a value
 

00:01:24.020 --> 00:01:26.539
filter and then apply a value
non-linearity to it after that so to

00:01:26.539 --> 00:01:26.549
non-linearity to it after that so to
 

00:01:26.549 --> 00:01:29.660
non-linearity to it after that so to
look at one of the 36 positions maybe

00:01:29.660 --> 00:01:29.670
look at one of the 36 positions maybe
 

00:01:29.670 --> 00:01:33.380
look at one of the 36 positions maybe
one slice through this volume you take

00:01:33.380 --> 00:01:33.390
one slice through this volume you take
 

00:01:33.390 --> 00:01:37.370
one slice through this volume you take
these 36 numbers multiply it by you know

00:01:37.370 --> 00:01:37.380
these 36 numbers multiply it by you know
 

00:01:37.380 --> 00:01:40.760
these 36 numbers multiply it by you know
one by one slice through the volume like

00:01:40.760 --> 00:01:40.770
one by one slice through the volume like
 

00:01:40.770 --> 00:01:44.749
one by one slice through the volume like
that and you end up with a single real

00:01:44.749 --> 00:01:44.759
that and you end up with a single real
 

00:01:44.759 --> 00:01:48.289
that and you end up with a single real
number which then gets plotted in one of

00:01:48.289 --> 00:01:48.299
number which then gets plotted in one of
 

00:01:48.299 --> 00:01:51.319
number which then gets plotted in one of
the outputs like that and in fact one

00:01:51.319 --> 00:01:51.329
the outputs like that and in fact one
 

00:01:51.329 --> 00:01:53.600
the outputs like that and in fact one
way to think about the 32 numbers you

00:01:53.600 --> 00:01:53.610
way to think about the 32 numbers you
 

00:01:53.610 --> 00:01:56.120
way to think about the 32 numbers you
have in this one but 1 by 32 filter is

00:01:56.120 --> 00:01:56.130
have in this one but 1 by 32 filter is
 

00:01:56.130 --> 00:01:58.910
have in this one but 1 by 32 filter is
that is as if you have one neuron that

00:01:58.910 --> 00:01:58.920
that is as if you have one neuron that
 

00:01:58.920 --> 00:02:03.249
that is as if you have one neuron that
is taking us input 32 numbers

00:02:03.249 --> 00:02:03.259
is taking us input 32 numbers
 

00:02:03.259 --> 00:02:06.590
is taking us input 32 numbers
multiplying each of these 32 numbers in

00:02:06.590 --> 00:02:06.600
multiplying each of these 32 numbers in
 

00:02:06.600 --> 00:02:09.650
multiplying each of these 32 numbers in
one slice in the same position height

00:02:09.650 --> 00:02:09.660
one slice in the same position height
 

00:02:09.660 --> 00:02:12.220
one slice in the same position height
and width but these 32 different channel

00:02:12.220 --> 00:02:12.230
and width but these 32 different channel
 

00:02:12.230 --> 00:02:15.100
and width but these 32 different channel
multiplying them by 32 weights and then

00:02:15.100 --> 00:02:15.110
multiplying them by 32 weights and then
 

00:02:15.110 --> 00:02:17.350
multiplying them by 32 weights and then
applying a really non-linearity to it

00:02:17.350 --> 00:02:17.360
applying a really non-linearity to it
 

00:02:17.360 --> 00:02:19.480
applying a really non-linearity to it
and then outputting the corresponding

00:02:19.480 --> 00:02:19.490
and then outputting the corresponding
 

00:02:19.490 --> 00:02:24.430
and then outputting the corresponding
thing over there and more generally if

00:02:24.430 --> 00:02:24.440
thing over there and more generally if
 

00:02:24.440 --> 00:02:29.380
thing over there and more generally if
you have not just one filter but if you

00:02:29.380 --> 00:02:29.390
you have not just one filter but if you
 

00:02:29.390 --> 00:02:31.810
you have not just one filter but if you
have multiple filters then it's as if

00:02:31.810 --> 00:02:31.820
have multiple filters then it's as if
 

00:02:31.820 --> 00:02:35.110
have multiple filters then it's as if
you have not just one unit but multiple

00:02:35.110 --> 00:02:35.120
you have not just one unit but multiple
 

00:02:35.120 --> 00:02:38.860
you have not just one unit but multiple
units that are taking as input all the

00:02:38.860 --> 00:02:38.870
units that are taking as input all the
 

00:02:38.870 --> 00:02:42.490
units that are taking as input all the
numbers in one slice and then building

00:02:42.490 --> 00:02:42.500
numbers in one slice and then building
 

00:02:42.500 --> 00:02:46.480
numbers in one slice and then building
them up into an output there the 66 by

00:02:46.480 --> 00:02:46.490
them up into an output there the 66 by
 

00:02:46.490 --> 00:02:50.170
them up into an output there the 66 by
six by number of filters so one way to

00:02:50.170 --> 00:02:50.180
six by number of filters so one way to
 

00:02:50.180 --> 00:02:52.180
six by number of filters so one way to
think about the one by one convolution

00:02:52.180 --> 00:02:52.190
think about the one by one convolution
 

00:02:52.190 --> 00:02:56.800
think about the one by one convolution
is that it is basically having a fully

00:02:56.800 --> 00:02:56.810
is that it is basically having a fully
 

00:02:56.810 --> 00:03:00.610
is that it is basically having a fully
connected neural network that applies to

00:03:00.610 --> 00:03:00.620
connected neural network that applies to
 

00:03:00.620 --> 00:03:03.940
connected neural network that applies to
each of the 62 different positions and

00:03:03.940 --> 00:03:03.950
each of the 62 different positions and
 

00:03:03.950 --> 00:03:05.560
each of the 62 different positions and
what does fully fermented neural network

00:03:05.560 --> 00:03:05.570
what does fully fermented neural network
 

00:03:05.570 --> 00:03:09.610
what does fully fermented neural network
does is it inputs 32 numbers and outputs

00:03:09.610 --> 00:03:09.620
does is it inputs 32 numbers and outputs
 

00:03:09.620 --> 00:03:13.449
does is it inputs 32 numbers and outputs
you know number of filters outputs so I

00:03:13.449 --> 00:03:13.459
you know number of filters outputs so I
 

00:03:13.459 --> 00:03:15.070
you know number of filters outputs so I
guess the pinyin notation this is really

00:03:15.070 --> 00:03:15.080
guess the pinyin notation this is really
 

00:03:15.080 --> 00:03:17.949
guess the pinyin notation this is really
a NC of L plus 1 if that's the next

00:03:17.949 --> 00:03:17.959
a NC of L plus 1 if that's the next
 

00:03:17.959 --> 00:03:21.190
a NC of L plus 1 if that's the next
layer and by doing this at each of the

00:03:21.190 --> 00:03:21.200
layer and by doing this at each of the
 

00:03:21.200 --> 00:03:23.620
layer and by doing this at each of the
36 positions each of the 6 by 6

00:03:23.620 --> 00:03:23.630
36 positions each of the 6 by 6
 

00:03:23.630 --> 00:03:25.390
36 positions each of the 6 by 6
positions you end up with an output that

00:03:25.390 --> 00:03:25.400
positions you end up with an output that
 

00:03:25.400 --> 00:03:29.380
positions you end up with an output that
is 6 by 6 by the number of filters and

00:03:29.380 --> 00:03:29.390
is 6 by 6 by the number of filters and
 

00:03:29.390 --> 00:03:32.250
is 6 by 6 by the number of filters and
this can carry out a pretty non-trivial

00:03:32.250 --> 00:03:32.260
this can carry out a pretty non-trivial
 

00:03:32.260 --> 00:03:35.650
this can carry out a pretty non-trivial
computation on your input volume and

00:03:35.650 --> 00:03:35.660
computation on your input volume and
 

00:03:35.660 --> 00:03:39.460
computation on your input volume and
this idea is often called a 1 by 1

00:03:39.460 --> 00:03:39.470
this idea is often called a 1 by 1
 

00:03:39.470 --> 00:03:42.240
this idea is often called a 1 by 1
convolution but is sometimes also called

00:03:42.240 --> 00:03:42.250
convolution but is sometimes also called
 

00:03:42.250 --> 00:03:48.220
convolution but is sometimes also called
Network in network and is described in

00:03:48.220 --> 00:03:48.230
Network in network and is described in
 

00:03:48.230 --> 00:03:51.850
Network in network and is described in
this paper by Midland champion and

00:03:51.850 --> 00:03:51.860
this paper by Midland champion and
 

00:03:51.860 --> 00:03:54.520
this paper by Midland champion and
shriek and yam and even though the

00:03:54.520 --> 00:03:54.530
shriek and yam and even though the
 

00:03:54.530 --> 00:03:56.380
shriek and yam and even though the
details of the architecture in this

00:03:56.380 --> 00:03:56.390
details of the architecture in this
 

00:03:56.390 --> 00:03:58.270
details of the architecture in this
paper are used widely

00:03:58.270 --> 00:03:58.280
paper are used widely
 

00:03:58.280 --> 00:04:01.090
paper are used widely
this idea of a one-by-one convolution of

00:04:01.090 --> 00:04:01.100
this idea of a one-by-one convolution of
 

00:04:01.100 --> 00:04:03.190
this idea of a one-by-one convolution of
this sometimes called network of network

00:04:03.190 --> 00:04:03.200
this sometimes called network of network
 

00:04:03.200 --> 00:04:05.380
this sometimes called network of network
idea has been very influential has

00:04:05.380 --> 00:04:05.390
idea has been very influential has
 

00:04:05.390 --> 00:04:07.150
idea has been very influential has
influenced many other neural network

00:04:07.150 --> 00:04:07.160
influenced many other neural network
 

00:04:07.160 --> 00:04:09.250
influenced many other neural network
architectures including the inception

00:04:09.250 --> 00:04:09.260
architectures including the inception
 

00:04:09.260 --> 00:04:10.930
architectures including the inception
network which we'll see in the next

00:04:10.930 --> 00:04:10.940
network which we'll see in the next
 

00:04:10.940 --> 00:04:13.840
network which we'll see in the next
video but to give you an example of

00:04:13.840 --> 00:04:13.850
video but to give you an example of
 

00:04:13.850 --> 00:04:15.880
video but to give you an example of
where one by one convolution is useful

00:04:15.880 --> 00:04:15.890
where one by one convolution is useful
 

00:04:15.890 --> 00:04:18.240
where one by one convolution is useful
here's something you could do of it

00:04:18.240 --> 00:04:18.250
here's something you could do of it
 

00:04:18.250 --> 00:04:21.250
here's something you could do of it
let's say you have a Tony by Tony 8 by

00:04:21.250 --> 00:04:21.260
let's say you have a Tony by Tony 8 by
 

00:04:21.260 --> 00:04:24.550
let's say you have a Tony by Tony 8 by
192 volume if you want to shrink the

00:04:24.550 --> 00:04:24.560
192 volume if you want to shrink the
 

00:04:24.560 --> 00:04:25.140
192 volume if you want to shrink the
height

00:04:25.140 --> 00:04:25.150
height
 

00:04:25.150 --> 00:04:27.600
height
with you can use a pooling layer so we

00:04:27.600 --> 00:04:27.610
with you can use a pooling layer so we
 

00:04:27.610 --> 00:04:29.550
with you can use a pooling layer so we
know how to do that but what if the

00:04:29.550 --> 00:04:29.560
know how to do that but what if the
 

00:04:29.560 --> 00:04:32.400
know how to do that but what if the
number of channels has gotten too big

00:04:32.400 --> 00:04:32.410
number of channels has gotten too big
 

00:04:32.410 --> 00:04:34.890
number of channels has gotten too big
and you want to shrink that how do you

00:04:34.890 --> 00:04:34.900
and you want to shrink that how do you
 

00:04:34.900 --> 00:04:38.120
and you want to shrink that how do you
string ker into a 28 by 28 by 32

00:04:38.120 --> 00:04:38.130
string ker into a 28 by 28 by 32
 

00:04:38.130 --> 00:04:41.909
string ker into a 28 by 28 by 32
dimensional volume well what you can do

00:04:41.909 --> 00:04:41.919
dimensional volume well what you can do
 

00:04:41.919 --> 00:04:47.310
dimensional volume well what you can do
is use 32 filters that are one by one

00:04:47.310 --> 00:04:47.320
is use 32 filters that are one by one
 

00:04:47.320 --> 00:04:49.980
is use 32 filters that are one by one
and technically each filter would be of

00:04:49.980 --> 00:04:49.990
and technically each filter would be of
 

00:04:49.990 --> 00:04:54.450
and technically each filter would be of
dimension one by one by 192 because the

00:04:54.450 --> 00:04:54.460
dimension one by one by 192 because the
 

00:04:54.460 --> 00:04:56.670
dimension one by one by 192 because the
number of channels in your filter has to

00:04:56.670 --> 00:04:56.680
number of channels in your filter has to
 

00:04:56.680 --> 00:04:58.110
number of channels in your filter has to
match the number of channels in your

00:04:58.110 --> 00:04:58.120
match the number of channels in your
 

00:04:58.120 --> 00:05:02.580
match the number of channels in your
input volume but you use 32 filters and

00:05:02.580 --> 00:05:02.590
input volume but you use 32 filters and
 

00:05:02.590 --> 00:05:05.640
input volume but you use 32 filters and
the output of this process will be a 28

00:05:05.640 --> 00:05:05.650
the output of this process will be a 28
 

00:05:05.650 --> 00:05:08.939
the output of this process will be a 28
by 28 by 32 volume so this is a way to

00:05:08.939 --> 00:05:08.949
by 28 by 32 volume so this is a way to
 

00:05:08.949 --> 00:05:13.740
by 28 by 32 volume so this is a way to
let your shrink and see as well where as

00:05:13.740 --> 00:05:13.750
let your shrink and see as well where as
 

00:05:13.750 --> 00:05:16.620
let your shrink and see as well where as
pooling layers I use just a shrink 1/8

00:05:16.620 --> 00:05:16.630
pooling layers I use just a shrink 1/8
 

00:05:16.630 --> 00:05:19.200
pooling layers I use just a shrink 1/8
and NW the height and width of these

00:05:19.200 --> 00:05:19.210
and NW the height and width of these
 

00:05:19.210 --> 00:05:22.230
and NW the height and width of these
volumes and we'll see later how this

00:05:22.230 --> 00:05:22.240
volumes and we'll see later how this
 

00:05:22.240 --> 00:05:24.900
volumes and we'll see later how this
idea of one-by-one convolutions allows

00:05:24.900 --> 00:05:24.910
idea of one-by-one convolutions allows
 

00:05:24.910 --> 00:05:28.260
idea of one-by-one convolutions allows
you to shrink the number channels and

00:05:28.260 --> 00:05:28.270
you to shrink the number channels and
 

00:05:28.270 --> 00:05:30.420
you to shrink the number channels and
therefore save on computation and some

00:05:30.420 --> 00:05:30.430
therefore save on computation and some
 

00:05:30.430 --> 00:05:32.760
therefore save on computation and some
networks but of course if you want to

00:05:32.760 --> 00:05:32.770
networks but of course if you want to
 

00:05:32.770 --> 00:05:35.219
networks but of course if you want to
keep the number of channels to the 192

00:05:35.219 --> 00:05:35.229
keep the number of channels to the 192
 

00:05:35.229 --> 00:05:38.580
keep the number of channels to the 192
that's fine too and the effect of a 1 by

00:05:38.580 --> 00:05:38.590
that's fine too and the effect of a 1 by
 

00:05:38.590 --> 00:05:40.379
that's fine too and the effect of a 1 by
1 convolution is it just has

00:05:40.379 --> 00:05:40.389
1 convolution is it just has
 

00:05:40.389 --> 00:05:42.750
1 convolution is it just has
non-linearity it allows you to learn the

00:05:42.750 --> 00:05:42.760
non-linearity it allows you to learn the
 

00:05:42.760 --> 00:05:45.060
non-linearity it allows you to learn the
more complex function of your network by

00:05:45.060 --> 00:05:45.070
more complex function of your network by
 

00:05:45.070 --> 00:05:48.510
more complex function of your network by
adding another layer the inputs 20 by 20

00:05:48.510 --> 00:05:48.520
adding another layer the inputs 20 by 20
 

00:05:48.520 --> 00:05:52.950
adding another layer the inputs 20 by 20
by 192 and output is 20 by 20 by 192 so

00:05:52.950 --> 00:05:52.960
by 192 and output is 20 by 20 by 192 so
 

00:05:52.960 --> 00:05:55.920
by 192 and output is 20 by 20 by 192 so
that's how a 1 by 1 convolutional layer

00:05:55.920 --> 00:05:55.930
that's how a 1 by 1 convolutional layer
 

00:05:55.930 --> 00:05:57.540
that's how a 1 by 1 convolutional layer
is actually doing something pretty

00:05:57.540 --> 00:05:57.550
is actually doing something pretty
 

00:05:57.550 --> 00:05:59.939
is actually doing something pretty
non-trivial and it has non-linearity to

00:05:59.939 --> 00:05:59.949
non-trivial and it has non-linearity to
 

00:05:59.949 --> 00:06:01.950
non-trivial and it has non-linearity to
in your network and allow you to

00:06:01.950 --> 00:06:01.960
in your network and allow you to
 

00:06:01.960 --> 00:06:04.469
in your network and allow you to
decrease or keep the same or if you want

00:06:04.469 --> 00:06:04.479
decrease or keep the same or if you want
 

00:06:04.479 --> 00:06:07.219
decrease or keep the same or if you want
increase the number of channels in your

00:06:07.219 --> 00:06:07.229
increase the number of channels in your
 

00:06:07.229 --> 00:06:10.469
increase the number of channels in your
volumes next you see that this is

00:06:10.469 --> 00:06:10.479
volumes next you see that this is
 

00:06:10.479 --> 00:06:12.180
volumes next you see that this is
actually very useful for building the

00:06:12.180 --> 00:06:12.190
actually very useful for building the
 

00:06:12.190 --> 00:06:15.420
actually very useful for building the
inception Network let's go on to that in

00:06:15.420 --> 00:06:15.430
inception Network let's go on to that in
 

00:06:15.430 --> 00:06:18.540
inception Network let's go on to that in
the next video so you've now seen how a

00:06:18.540 --> 00:06:18.550
the next video so you've now seen how a
 

00:06:18.550 --> 00:06:21.210
the next video so you've now seen how a
one by one convolution operation is

00:06:21.210 --> 00:06:21.220
one by one convolution operation is
 

00:06:21.220 --> 00:06:23.159
one by one convolution operation is
actually doing a pretty non-trivial

00:06:23.159 --> 00:06:23.169
actually doing a pretty non-trivial
 

00:06:23.169 --> 00:06:26.399
actually doing a pretty non-trivial
operation and allows you to shrink the

00:06:26.399 --> 00:06:26.409
operation and allows you to shrink the
 

00:06:26.409 --> 00:06:28.230
operation and allows you to shrink the
number of channels in your volumes or

00:06:28.230 --> 00:06:28.240
number of channels in your volumes or
 

00:06:28.240 --> 00:06:30.600
number of channels in your volumes or
keep it the same or even increase it if

00:06:30.600 --> 00:06:30.610
keep it the same or even increase it if
 

00:06:30.610 --> 00:06:33.629
keep it the same or even increase it if
you want in the next vid video you see

00:06:33.629 --> 00:06:33.639
you want in the next vid video you see
 

00:06:33.639 --> 00:06:36.240
you want in the next vid video you see
that this can be used to help build up

00:06:36.240 --> 00:06:36.250
that this can be used to help build up
 

00:06:36.250 --> 00:06:37.589
that this can be used to help build up
to the inception

00:06:37.589 --> 00:06:37.599
to the inception
 

00:06:37.599 --> 00:06:41.669
to the inception
Network let's go onto the next video

