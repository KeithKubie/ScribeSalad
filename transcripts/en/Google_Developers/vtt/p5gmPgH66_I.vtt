WEBVTT
Kind: captions
Language: en

00:00:00.090 --> 00:00:01.131
SAM DUTTON: --Sam Dutton.

00:00:01.131 --> 00:00:03.590
I'm a developer advocate based--

00:00:03.590 --> 00:00:08.710
I am actually Australian,
but based in London.

00:00:08.710 --> 00:00:12.750
I do a lot of work on
progressive web apps.

00:00:12.750 --> 00:00:17.610
One thing, by the way, before I
get started, I work quite a lot

00:00:17.610 --> 00:00:20.640
with audio and video APIs.

00:00:20.640 --> 00:00:23.650
And I've worked with the WebRTC
team in the past as well.

00:00:23.650 --> 00:00:26.160
So if you have
particular questions

00:00:26.160 --> 00:00:30.740
about video on the web, WebRTC,
real time communication,

00:00:30.740 --> 00:00:33.019
please feel free to
come and chat to me.

00:00:33.019 --> 00:00:34.560
I'll be here for
the rest of the day.

00:00:34.560 --> 00:00:38.640
I'd love to hear the kind
of things you're working on.

00:00:38.640 --> 00:00:42.870
So we've heard a lot today
about the core principles

00:00:42.870 --> 00:00:46.260
of progressive web app design.

00:00:46.260 --> 00:00:47.790
They need to be fast.

00:00:47.790 --> 00:00:50.250
And they need to be reliable.

00:00:50.250 --> 00:00:52.620
The core idea here is
that we're building

00:00:52.620 --> 00:00:55.020
things that work
really well no matter

00:00:55.020 --> 00:00:58.610
what the state of the
network or the conditions,

00:00:58.610 --> 00:01:02.730
the type of the device that
your users are working on.

00:01:02.730 --> 00:01:05.010
We need to better
handle flaky networks.

00:01:05.010 --> 00:01:11.400
And we need really great,
smooth interactions and seamless

00:01:11.400 --> 00:01:14.670
navigation, no matter what the
conditions are, no matter what

00:01:14.670 --> 00:01:16.020
the device is.

00:01:16.020 --> 00:01:18.870
And what we're talking
about, in a way,

00:01:18.870 --> 00:01:25.500
is developing trust, the trust
that the user has for your app.

00:01:25.500 --> 00:01:28.920
We're talking about that kind of
engagement you get with an app.

00:01:28.920 --> 00:01:31.710
You know when you use
a really good app,

00:01:31.710 --> 00:01:35.340
you feel that real connection
right from the start?

00:01:35.340 --> 00:01:39.600
So I'd like to talk a little
bit more about that part of it,

00:01:39.600 --> 00:01:43.620
the way that you build that
engagement with your user

00:01:43.620 --> 00:01:48.670
right from the moment when they
install and first use your app.

00:01:48.670 --> 00:01:51.720
So I'd like to begin
that by looking

00:01:51.720 --> 00:01:55.410
at the center of
the world for users

00:01:55.410 --> 00:01:58.830
on mobile, which
is the home screen.

00:01:58.830 --> 00:02:03.900
And the core idea here
is that your web apps

00:02:03.900 --> 00:02:08.699
must have visibility on
the user's home screen.

00:02:08.699 --> 00:02:10.530
And of course, we've
had this for a while.

00:02:10.530 --> 00:02:13.320
We've had the Add
to Home Screen item

00:02:13.320 --> 00:02:15.540
in the menu, which was great.

00:02:15.540 --> 00:02:19.620
It was a way, essentially, of
bookmarking a link to your site

00:02:19.620 --> 00:02:23.410
and adding an icon for that
on the user's home screen.

00:02:23.410 --> 00:02:25.690
Now that's been
around for some time.

00:02:25.690 --> 00:02:28.770
And it works pretty well.

00:02:28.770 --> 00:02:32.860
But there were several
problems with this.

00:02:32.860 --> 00:02:37.500
The first, most obvious problem
is that most users never

00:02:37.500 --> 00:02:38.490
discovered this.

00:02:38.490 --> 00:02:41.990
Most users never went to
the menu and found that.

00:02:41.990 --> 00:02:46.260
And what we found is that
really only a very small number

00:02:46.260 --> 00:02:49.140
of users actually
use the menu item.

00:02:49.140 --> 00:02:49.980
It's buried.

00:02:49.980 --> 00:02:52.050
People don't find it.

00:02:52.050 --> 00:02:57.630
Secondly, it functions as a way
of adding a bookmark to a page.

00:02:57.630 --> 00:03:01.410
So if the user is on a
page deep within your site,

00:03:01.410 --> 00:03:03.780
and they select
Add to Home Screen,

00:03:03.780 --> 00:03:07.140
well that adds a
link to that page.

00:03:07.140 --> 00:03:09.900
Whereas you probably
want your users

00:03:09.900 --> 00:03:14.940
to start with the index
page for the site.

00:03:14.940 --> 00:03:18.810
The third problem that we've
had with the old fashioned Add

00:03:18.810 --> 00:03:22.170
to Home Screen is
simply that when

00:03:22.170 --> 00:03:26.520
users see an icon on
their home screen,

00:03:26.520 --> 00:03:30.540
they expect that
app to work offline.

00:03:30.540 --> 00:03:33.630
And when you add your icons
to the user's home screen,

00:03:33.630 --> 00:03:36.780
you're making a
contract with the user

00:03:36.780 --> 00:03:40.350
that when they click on that
icon, when they tap that icon,

00:03:40.350 --> 00:03:43.660
that something will happen,
even when they're offline.

00:03:43.660 --> 00:03:48.000
So the first way that
we've improved this

00:03:48.000 --> 00:03:51.870
is through the web app manifest.

00:03:51.870 --> 00:03:53.670
People in the room
here, could you

00:03:53.670 --> 00:03:59.760
put up your hand if you use a
web app manifest on your site?

00:03:59.760 --> 00:04:03.780
Does anyone use a
web app manifest?

00:04:03.780 --> 00:04:05.490
That's pretty good.

00:04:05.490 --> 00:04:06.900
That's good.

00:04:06.900 --> 00:04:09.060
This is a really,
really simple way

00:04:09.060 --> 00:04:12.570
to give the browser
information about your site.

00:04:12.570 --> 00:04:16.980
If you do nothing else, this
can take you five minutes

00:04:16.980 --> 00:04:19.380
to add this to
your site and give

00:04:19.380 --> 00:04:22.680
the browser better
information about how

00:04:22.680 --> 00:04:23.910
to work with your site.

00:04:23.910 --> 00:04:26.260
So it's really straightforward.

00:04:26.260 --> 00:04:28.170
You create a
manifest file, which

00:04:28.170 --> 00:04:31.500
is simple JSON that
describes your app.

00:04:31.500 --> 00:04:35.250
And then you add a link to
that manifest in the head

00:04:35.250 --> 00:04:38.590
element of your document,
of the HTML file.

00:04:38.590 --> 00:04:41.160
If we look at the
kind of details here,

00:04:41.160 --> 00:04:44.280
you'll see, for example,
we have a short name there,

00:04:44.280 --> 00:04:47.280
which corresponds to
the name up here that's

00:04:47.280 --> 00:04:49.260
displayed on the home screen.

00:04:49.260 --> 00:04:52.230
And then we have some
values for icons.

00:04:52.230 --> 00:04:56.700
This gives you the ability to
add icons for different screen.

00:04:56.700 --> 00:04:58.470
So in this example,
you could just

00:04:58.470 --> 00:05:01.560
see the one that's
48 by 48 pixels.

00:05:01.560 --> 00:05:05.040
But you can add icons that
work on different viewport

00:05:05.040 --> 00:05:09.830
sizes, so different devices
like tablets or whatever.

00:05:09.830 --> 00:05:11.860
And then this is
kind of a simple one.

00:05:11.860 --> 00:05:14.560
You can add a
background color value.

00:05:14.560 --> 00:05:19.100
Now what this does is gives
you a splash screen effect.

00:05:19.100 --> 00:05:21.910
So when the app is
starting up, you

00:05:21.910 --> 00:05:26.680
see that color displayed
onscreen with the icon

00:05:26.680 --> 00:05:28.960
and the name displayed as well.

00:05:28.960 --> 00:05:31.600
Now the purpose of
this is a simple thing.

00:05:31.600 --> 00:05:34.930
But it gives the user
that instant effect

00:05:34.930 --> 00:05:38.620
and that engagement they
get, that sense of trust,

00:05:38.620 --> 00:05:42.220
because they get that
instant startup when they tap

00:05:42.220 --> 00:05:44.140
on the icon on the home screen.

00:05:44.140 --> 00:05:47.470
So just a simple way to make a
big improvement and keep the,

00:05:47.470 --> 00:05:51.280
in some ways, the branding
of your app consistent.

00:05:51.280 --> 00:05:55.770
Now I mentioned before the
problem with Add to Home Screen

00:05:55.770 --> 00:05:59.320
from the menu, the
problem of where to start.

00:05:59.320 --> 00:06:04.480
Well in the web app manifest,
you can specify a start URL.

00:06:04.480 --> 00:06:07.370
So what we're saying
here is simply

00:06:07.370 --> 00:06:11.080
that the start URL
is the index page.

00:06:11.080 --> 00:06:13.130
A little thing you can
do with that, by the way,

00:06:13.130 --> 00:06:16.150
is that you could add a
hash, a fragment, that

00:06:16.150 --> 00:06:20.050
would specify that
for analytics,

00:06:20.050 --> 00:06:23.140
that the user started
at an address, which

00:06:23.140 --> 00:06:26.660
came from tapping on the
icon on the home screen.

00:06:26.660 --> 00:06:28.360
So you could add
something like--

00:06:28.360 --> 00:06:32.290
I don't know-- hash UMA
source = homescreen,

00:06:32.290 --> 00:06:34.570
something like that,
just a simple way

00:06:34.570 --> 00:06:37.510
to check how many of
your users are actually

00:06:37.510 --> 00:06:40.700
getting to your app
via the home screen.

00:06:40.700 --> 00:06:44.320
The other thing you'll see
here is display standalone.

00:06:44.320 --> 00:06:48.220
What that means is that
the web app will have

00:06:48.220 --> 00:06:50.710
an appearance very like an app.

00:06:50.710 --> 00:06:56.080
If you have display browser,
for example, the app

00:06:56.080 --> 00:07:02.470
will have much more of the
browser UI and UX components.

00:07:02.470 --> 00:07:04.930
So they'll have the
ability to navigate

00:07:04.930 --> 00:07:07.540
as if they were on a web page.

00:07:07.540 --> 00:07:09.670
The last one here, kind
of straightforward,

00:07:09.670 --> 00:07:13.540
is the orientation that
the app will start at.

00:07:13.540 --> 00:07:19.090
If you think about, for example,
you built a keyboard app,

00:07:19.090 --> 00:07:22.540
you would always want that
to start up in landscape.

00:07:22.540 --> 00:07:24.820
And it would be
confusing to the user

00:07:24.820 --> 00:07:26.590
if it didn't start up like that.

00:07:26.590 --> 00:07:28.280
So in this case, it's portrait.

00:07:28.280 --> 00:07:31.250
But for that keyboard app,
you'd make that landscape.

00:07:31.250 --> 00:07:35.380
And that would make much
more sense to the user

00:07:35.380 --> 00:07:40.240
than if it tried to start up
the keyboard in portrait made.

00:07:40.240 --> 00:07:43.330
The theme color
defines how the app

00:07:43.330 --> 00:07:48.700
is displayed in things like
the App Launcher by the system.

00:07:48.700 --> 00:07:52.360
And in this case, it's
black to suit the branding,

00:07:52.360 --> 00:07:54.790
in this case of the
Washington Post.

00:07:54.790 --> 00:07:58.720
Again, another simple
way to keep that app-like

00:07:58.720 --> 00:08:01.900
experience without
much effort at all.

00:08:01.900 --> 00:08:04.510
That's just really easy.

00:08:04.510 --> 00:08:05.800
So this is all good stuff.

00:08:05.800 --> 00:08:09.310
It gives the user a more
consistent experience,

00:08:09.310 --> 00:08:12.520
allows you to add that
branding and instant startup.

00:08:12.520 --> 00:08:14.890
But we still had this
problem where users had

00:08:14.890 --> 00:08:17.890
to install by going to a menu.

00:08:17.890 --> 00:08:21.350
And that just wasn't happening.

00:08:21.350 --> 00:08:25.300
So what the browser
vendors realized was

00:08:25.300 --> 00:08:28.270
it would be better if
there was an automated

00:08:28.270 --> 00:08:34.360
prompt for the user to install,
if the browser understood

00:08:34.360 --> 00:08:36.970
that the user was
engaged with your app.

00:08:36.970 --> 00:08:39.435
Now there are some conditions
for this, of course.

00:08:39.435 --> 00:08:42.669
It doesn't just
happen immediately.

00:08:42.669 --> 00:08:46.450
Firstly, like I said, when
you have an icon on the home

00:08:46.450 --> 00:08:52.870
screen, it's like a contract
that the app will work offline.

00:08:52.870 --> 00:08:57.190
So the first condition to
get a prompt from the browser

00:08:57.190 --> 00:09:01.960
to install the screen is your
app must use Service Worker.

00:09:01.960 --> 00:09:04.390
That's crucial, because
there is no other way

00:09:04.390 --> 00:09:06.520
that you could be
providing a good offline

00:09:06.520 --> 00:09:10.960
experience unless there was
Service Worker implemented.

00:09:10.960 --> 00:09:13.830
Secondly the app has
to have a manifest.

00:09:13.830 --> 00:09:16.540
So you get this
consistent experience,

00:09:16.540 --> 00:09:18.500
like I was describing before.

00:09:18.500 --> 00:09:21.680
And the third part of this
depends on the browser,

00:09:21.680 --> 00:09:25.030
depends on different
rules, heuristics.

00:09:25.030 --> 00:09:29.230
But essentially the idea is
that the user must show signs

00:09:29.230 --> 00:09:30.920
of engagement with your app.

00:09:30.920 --> 00:09:33.310
So that they've
been, for example,

00:09:33.310 --> 00:09:37.790
using the app several times
over a certain amount of time.

00:09:37.790 --> 00:09:41.710
So when those three
conditions are met,

00:09:41.710 --> 00:09:45.340
the browser will prompt
the user to install

00:09:45.340 --> 00:09:47.290
your app to home screen.

00:09:47.290 --> 00:09:49.510
By the way, I won't go
into the details here.

00:09:49.510 --> 00:09:53.530
But you can catch
the prompt event

00:09:53.530 --> 00:09:56.860
and then defer that to
another time or, for example,

00:09:56.860 --> 00:10:01.930
do something like add a
button to your site to install

00:10:01.930 --> 00:10:03.430
this app to home screen.

00:10:03.430 --> 00:10:05.700
So you have some
control at that point

00:10:05.700 --> 00:10:11.990
over how the user is prompted
to install to home screen.

00:10:11.990 --> 00:10:14.430
Now you might think, well,
why don't we just give

00:10:14.430 --> 00:10:17.850
all this control to developers?

00:10:17.850 --> 00:10:23.940
Like I say, the crucial part of
this is it must not be spammy.

00:10:23.940 --> 00:10:28.560
It must feel like a
high quality experience.

00:10:28.560 --> 00:10:30.750
It must be something
that a user trusts.

00:10:30.750 --> 00:10:34.920
In other words, like I say,
an app must work offline.

00:10:34.920 --> 00:10:36.840
You must get this
consistent experience

00:10:36.840 --> 00:10:40.590
when the user taps on
the home screen icon.

00:10:40.590 --> 00:10:44.370
And of course, if we
allowed developers

00:10:44.370 --> 00:10:48.990
to pop the prompt to
install button immediately

00:10:48.990 --> 00:10:53.200
that the user got to a website,
that's really frustrating.

00:10:53.200 --> 00:10:55.560
You know those websites
you go to and as

00:10:55.560 --> 00:10:57.210
soon as you go to
the website, you

00:10:57.210 --> 00:11:00.630
get something popping up
saying install our app

00:11:00.630 --> 00:11:04.290
or buy this or do something.

00:11:04.290 --> 00:11:07.320
Users need to show
signs of engagement

00:11:07.320 --> 00:11:12.870
before it's a good time
to prompt them to install.

00:11:12.870 --> 00:11:16.860
So that's a great way to start
engaging your users, just

00:11:16.860 --> 00:11:20.070
simply by having that
presence on the home screen

00:11:20.070 --> 00:11:25.800
and also having a really good
install and startup experience.

00:11:25.800 --> 00:11:28.590
Now I want to talk
a bit more about how

00:11:28.590 --> 00:11:31.200
you can build on
engagement with users

00:11:31.200 --> 00:11:34.080
and reengage with
users using something

00:11:34.080 --> 00:11:36.390
called push notifications.

00:11:36.390 --> 00:11:42.000
We've had some kind of push
notifications for many years,

00:11:42.000 --> 00:11:49.620
various kinds of hacks or using
techniques with long polling

00:11:49.620 --> 00:11:55.140
or whatever to be able
to push content to users.

00:11:55.140 --> 00:11:59.220
But the nice thing is we
now have a standardized API

00:11:59.220 --> 00:12:00.690
for doing push.

00:12:00.690 --> 00:12:06.660
And the best part of this
is that the browser does not

00:12:06.660 --> 00:12:10.530
need to be open for a push
message to be received.

00:12:10.530 --> 00:12:14.210
In other words, you can send
a push message to a user

00:12:14.210 --> 00:12:16.710
if they don't even
have the browser open.

00:12:16.710 --> 00:12:19.170
As you can see here,
they will still

00:12:19.170 --> 00:12:22.800
get a notification saying
that they have a push message.

00:12:22.800 --> 00:12:24.930
This is hugely powerful.

00:12:24.930 --> 00:12:28.320
And this is a fantastic
feature for engagement

00:12:28.320 --> 00:12:32.420
that's been missing
from the web until now.

00:12:32.420 --> 00:12:34.040
This is great for
you, the developer.

00:12:34.040 --> 00:12:35.140
It makes life easier.

00:12:35.140 --> 00:12:37.400
And we hope this is
good for users as well.

00:12:37.400 --> 00:12:41.870
But actually it's good
for business as well.

00:12:41.870 --> 00:12:45.560
I think Dion showed
this example before.

00:12:45.560 --> 00:12:48.620
If you haven't seen this,
big e-commerce company

00:12:48.620 --> 00:12:55.310
Jumia had a real problem with
abandoned shopping carts, where

00:12:55.310 --> 00:12:58.160
users got partway
through a transaction

00:12:58.160 --> 00:13:01.760
then gave up, and
then never came back

00:13:01.760 --> 00:13:04.190
to complete transactions.

00:13:04.190 --> 00:13:08.250
Now, Jumia tried various
methods to get around this.

00:13:08.250 --> 00:13:11.420
They tried to get
users' email addresses.

00:13:11.420 --> 00:13:13.940
And then if they abandoned
the shopping cart,

00:13:13.940 --> 00:13:16.230
well they emailed
the users and say,

00:13:16.230 --> 00:13:19.040
hey you abandoned
your shopping cart.

00:13:19.040 --> 00:13:21.170
Do you want to
complete that purchase?

00:13:21.170 --> 00:13:22.880
What they found
was they actually

00:13:22.880 --> 00:13:28.010
got very poor results from that,
very low rate of conversions.

00:13:28.010 --> 00:13:29.780
And of course, a
lot of users don't

00:13:29.780 --> 00:13:32.120
like handing over
their email address

00:13:32.120 --> 00:13:35.480
and getting email from
companies like that.

00:13:35.480 --> 00:13:39.290
When they implemented push
notifications to do the same,

00:13:39.290 --> 00:13:43.260
they got a much better
result. In general,

00:13:43.260 --> 00:13:45.260
what we're finding
with push notifications

00:13:45.260 --> 00:13:49.876
is that you get a really
high engagement level.

00:13:49.876 --> 00:13:53.300
They're great for provoking
action in the user,

00:13:53.300 --> 00:13:56.760
for getting the user
to do something.

00:13:56.760 --> 00:13:58.820
In lots of different
scenarios, we're

00:13:58.820 --> 00:14:02.270
finding the same effect,
not just for Jumia.

00:14:02.270 --> 00:14:05.480
For them, it meant
a really big deal

00:14:05.480 --> 00:14:07.850
in terms of their business.

00:14:07.850 --> 00:14:10.550
But the core idea
here too is that it's

00:14:10.550 --> 00:14:15.530
a way of engaging with users
individually without needing

00:14:15.530 --> 00:14:19.700
them to give you, say, their
email address or some other

00:14:19.700 --> 00:14:21.770
means to contact them.

00:14:21.770 --> 00:14:24.950
They can get notifications
right in the browser

00:14:24.950 --> 00:14:29.610
without any kind of asking
for extra information.

00:14:29.610 --> 00:14:30.869
So let's have a look at that.

00:14:30.869 --> 00:14:32.410
I'm going to get
onto the code later.

00:14:32.410 --> 00:14:35.200
But I really first
wanted to take you

00:14:35.200 --> 00:14:38.740
through some of the scenarios
of the user experience,

00:14:38.740 --> 00:14:43.600
because this is a really
crucial part of making sure

00:14:43.600 --> 00:14:46.450
that notifications work well.

00:14:46.450 --> 00:14:50.200
Users are very
sensitive to this.

00:14:50.200 --> 00:14:54.340
Users are very happy to
receive good notifications.

00:14:54.340 --> 00:14:57.460
But of course,
users don't like it

00:14:57.460 --> 00:15:02.110
when they get notifications that
feel like they're a nuisance.

00:15:02.110 --> 00:15:03.610
They're being
spammed, and all that.

00:15:03.610 --> 00:15:06.160
So I wanted to talk about some
of the principles of this.

00:15:06.160 --> 00:15:10.360
And the first one is that
a notification absolutely

00:15:10.360 --> 00:15:13.270
has to come at the right time.

00:15:13.270 --> 00:15:15.650
I'll show you some
examples of that later.

00:15:15.650 --> 00:15:18.730
But the message in
the notification

00:15:18.730 --> 00:15:23.250
needs to matter to the
user right here, right now.

00:15:23.250 --> 00:15:29.490
Secondly what you want is for
a notification to be specific.

00:15:29.490 --> 00:15:30.660
I'll show examples of this.

00:15:30.660 --> 00:15:33.430
But you want
specific information

00:15:33.430 --> 00:15:36.900
in the notification, not
something vague or general,

00:15:36.900 --> 00:15:39.930
but a specific action
that the user can take

00:15:39.930 --> 00:15:44.550
or specific information that's
useful to the user right now.

00:15:44.550 --> 00:15:47.670
Thirdly, of course, it has
to be relevant to the user.

00:15:47.670 --> 00:15:51.920
This is part of the whole
business of it being personal.

00:15:51.920 --> 00:15:59.580
I'd say as a general, rule avoid
sending just general messages

00:15:59.580 --> 00:16:00.720
to all your users.

00:16:00.720 --> 00:16:02.890
That's generally
not a good idea.

00:16:02.890 --> 00:16:05.940
You need to send stuff that's
relevant to that person,

00:16:05.940 --> 00:16:07.070
that user.

00:16:07.070 --> 00:16:10.020
And I'll talk through
some ways to do that.

00:16:10.020 --> 00:16:13.980
The core idea here is that when
you get a push notification,

00:16:13.980 --> 00:16:15.260
you are being interrupted.

00:16:15.260 --> 00:16:16.260
You know what it's like.

00:16:16.260 --> 00:16:18.240
You're working or
you with friends.

00:16:18.240 --> 00:16:20.310
And you get a
notification of some type.

00:16:20.310 --> 00:16:21.690
It's an interruption.

00:16:21.690 --> 00:16:24.810
So whatever you send
in a notification,

00:16:24.810 --> 00:16:27.630
it has to be worth
it to the user

00:16:27.630 --> 00:16:29.040
that they get that interruption.

00:16:29.040 --> 00:16:32.100
That's a really simple idea.

00:16:32.100 --> 00:16:35.610
My friend Pete here took
this fantastic photograph

00:16:35.610 --> 00:16:38.190
in Antarctica, I believe.

00:16:38.190 --> 00:16:40.920
He wants to do a developer
day there, as well.

00:16:40.920 --> 00:16:43.980
Maybe one day in Antarctica
we'll have a developer day.

00:16:43.980 --> 00:16:47.100
Anyway the point
of this image is

00:16:47.100 --> 00:16:51.990
that these little cute penguins
here have been walking along,

00:16:51.990 --> 00:16:53.550
going for a stroll.

00:16:53.550 --> 00:16:57.130
And someone notified them and
said watch out, watch out.

00:16:57.130 --> 00:16:59.820
There's this giant
leopard seal here.

00:16:59.820 --> 00:17:03.990
And for the penguins, that
is relevant, and it's timely.

00:17:03.990 --> 00:17:05.640
And it's personal for them.

00:17:05.640 --> 00:17:06.880
It has meaning to them.

00:17:06.880 --> 00:17:13.420
This is a kind of symbol of what
amounts to a good notification.

00:17:13.420 --> 00:17:16.839
So let's try it out
with some real examples.

00:17:16.839 --> 00:17:18.839
Remember these three ideas--

00:17:18.839 --> 00:17:20.310
precise, timely, relevant.

00:17:20.310 --> 00:17:23.440
Well this is a classic,
good, notification.

00:17:23.440 --> 00:17:25.800
You get a notification
like this.

00:17:25.800 --> 00:17:28.950
It tells you a particular
flight is delayed.

00:17:28.950 --> 00:17:31.440
It even gives you the
new departure time.

00:17:31.440 --> 00:17:33.390
You don't need to
do anything more.

00:17:33.390 --> 00:17:36.540
This is all the
information you need.

00:17:36.540 --> 00:17:39.150
This is actually a
pattern we've seen

00:17:39.150 --> 00:17:42.930
with really good notifications
that you actually

00:17:42.930 --> 00:17:46.080
can build a notification
that has everything right

00:17:46.080 --> 00:17:48.070
there in the notification.

00:17:48.070 --> 00:17:51.960
We often think of
notifications as a way

00:17:51.960 --> 00:17:55.770
to get users to follow a
link and open a web page.

00:17:55.770 --> 00:17:58.830
But you can also use
notifications to give

00:17:58.830 --> 00:18:00.690
information right there.

00:18:00.690 --> 00:18:03.420
So the user has
all the information

00:18:03.420 --> 00:18:07.690
they need without having
to look anywhere else.

00:18:07.690 --> 00:18:10.750
Now this is not so good.

00:18:10.750 --> 00:18:14.860
So we've got a notification
that your credit

00:18:14.860 --> 00:18:16.480
card has been compromised.

00:18:16.480 --> 00:18:19.090
But you don't know
anything else.

00:18:19.090 --> 00:18:21.400
It's too vague.

00:18:21.400 --> 00:18:23.830
It's really hard to
know what's going on.

00:18:23.830 --> 00:18:26.380
From that, you have
no idea what it means.

00:18:26.380 --> 00:18:30.340
Now something like this
would be much better.

00:18:30.340 --> 00:18:32.870
In this example, we've
got a similar message.

00:18:32.870 --> 00:18:36.730
But it actually says what's
happened, what's gone wrong,

00:18:36.730 --> 00:18:41.710
and why you need
to think about what

00:18:41.710 --> 00:18:42.880
happened on the credit card.

00:18:42.880 --> 00:18:46.822
And in this case, we've actually
got these two buttons here.

00:18:46.822 --> 00:18:48.280
I'll show you how
to do this later.

00:18:48.280 --> 00:18:50.860
But you can actually add
buttons to notifications.

00:18:50.860 --> 00:18:55.550
So you can do stuff like
respond to a simple requests.

00:18:55.550 --> 00:18:58.450
Confirm a reservation at
a restaurant or something

00:18:58.450 --> 00:19:00.490
like that.

00:19:00.490 --> 00:19:03.119
Google+, that's not so good.

00:19:03.119 --> 00:19:03.910
Anyone use Google+?

00:19:03.910 --> 00:19:04.870
I don't think so.

00:19:07.650 --> 00:19:11.927
This is an OK message.

00:19:11.927 --> 00:19:13.010
But there's nothing there.

00:19:13.010 --> 00:19:14.290
There's no information.

00:19:14.290 --> 00:19:17.400
Something like that
is much better.

00:19:17.400 --> 00:19:20.920
It's personal, because it's
got the face of my friend.

00:19:20.920 --> 00:19:24.100
And it's actually got a message
from them telling me what

00:19:24.100 --> 00:19:26.900
I need to know, which is great.

00:19:26.900 --> 00:19:30.720
Now imagine a company
like Google started

00:19:30.720 --> 00:19:33.450
a self-driving taxi company.

00:19:33.450 --> 00:19:35.740
You might call it Goober.

00:19:35.740 --> 00:19:36.610
That would be good.

00:19:36.610 --> 00:19:38.880
And this is another
good notification.

00:19:38.880 --> 00:19:39.970
It's specific.

00:19:39.970 --> 00:19:41.890
All the information
I need is right there

00:19:41.890 --> 00:19:43.960
in the notification.

00:19:43.960 --> 00:19:46.510
Do not do this.

00:19:46.510 --> 00:19:50.680
If you implement
notifications, do not

00:19:50.680 --> 00:19:54.870
use them to tell the user that
they've installed your app.

00:19:54.870 --> 00:19:57.500
That is of no value to the user.

00:19:57.500 --> 00:20:00.070
The notification has
to have something

00:20:00.070 --> 00:20:01.920
that's of value to the user.

00:20:01.920 --> 00:20:06.640
And that-- just don't do
it, nothing good about that.

00:20:06.640 --> 00:20:09.160
Something like this
is kind of fine,

00:20:09.160 --> 00:20:13.060
could be a bit better, but
yeah, a little more information,

00:20:13.060 --> 00:20:16.540
perhaps, would work.

00:20:16.540 --> 00:20:18.820
So I'd like to
just talk through,

00:20:18.820 --> 00:20:21.490
before I get to the
code, actually give you

00:20:21.490 --> 00:20:24.050
an overview of how
the process works

00:20:24.050 --> 00:20:26.460
of subscribing users,
sending messages,

00:20:26.460 --> 00:20:32.150
and then on the receiving side
how messages are displayed.

00:20:32.150 --> 00:20:37.220
The nice thing about
the push API that it's

00:20:37.220 --> 00:20:39.290
built on Service Worker.

00:20:39.290 --> 00:20:41.990
Now as you've seen,
Service Workers

00:20:41.990 --> 00:20:45.460
can be used to intercept
outgoing requests, so

00:20:45.460 --> 00:20:48.490
to intercept a fetch request.

00:20:48.490 --> 00:20:52.040
And this example, we're
getting a request there.

00:20:52.040 --> 00:20:56.180
And then looking in the cache,
seeing if we've got something,

00:20:56.180 --> 00:20:58.700
and if not, we go out to
the network and get it.

00:20:58.700 --> 00:21:00.950
Now the cool thing
about Service Worker

00:21:00.950 --> 00:21:06.830
is that it can also
handle incoming events.

00:21:06.830 --> 00:21:11.570
So events from the operating
system or the network,

00:21:11.570 --> 00:21:12.710
something like push.

00:21:12.710 --> 00:21:16.550
So in this example, we
get a push event that's

00:21:16.550 --> 00:21:19.110
handled by the Service Worker.

00:21:19.110 --> 00:21:22.230
It you can say that it's just
responding to a push event

00:21:22.230 --> 00:21:24.960
there that comes
from a push service.

00:21:24.960 --> 00:21:28.590
And then we get the data
about the push events

00:21:28.590 --> 00:21:33.870
from the data that's in the body
and icon and so on the JSON.

00:21:33.870 --> 00:21:36.840
I'll talk more about
that in a moment.

00:21:36.840 --> 00:21:43.200
The good thing about that is
that we have this ability for,

00:21:43.200 --> 00:21:46.560
like I say, the Service
Worker to be woken up

00:21:46.560 --> 00:21:47.490
when it's been asleep.

00:21:47.490 --> 00:21:49.860
So you don't need to
have a process running

00:21:49.860 --> 00:21:51.990
to receive push messages.

00:21:51.990 --> 00:21:53.210
I'll talk more about that.

00:21:53.210 --> 00:21:55.450
So here's the process
for subscribing users.

00:21:55.450 --> 00:21:57.450
Well of course, the first
thing you've got to do

00:21:57.450 --> 00:22:00.810
is check if the
user is subscribed.

00:22:00.810 --> 00:22:04.140
If they're not subscribed,
you ask them to subscribe.

00:22:04.140 --> 00:22:07.320
And then they go through
a subscription process.

00:22:07.320 --> 00:22:10.650
They get subscription
data that identifies them

00:22:10.650 --> 00:22:11.970
from the browser.

00:22:11.970 --> 00:22:13.830
I'll show you how that works.

00:22:13.830 --> 00:22:17.850
You then send that subscription
data to your server

00:22:17.850 --> 00:22:21.910
and store it on the
server, on your server

00:22:21.910 --> 00:22:26.060
so you can then contact that
user later to send a message.

00:22:26.060 --> 00:22:28.430
Now on the send
side, you generate

00:22:28.430 --> 00:22:30.280
a message on your server.

00:22:30.280 --> 00:22:32.420
It needs to be encrypted.

00:22:32.420 --> 00:22:35.240
You send, then, to
the push service.

00:22:35.240 --> 00:22:38.540
And the push service
associated with the browser

00:22:38.540 --> 00:22:42.890
then sends that
message to the user.

00:22:42.890 --> 00:22:47.270
And then on the browser side,
we handle the incoming message.

00:22:47.270 --> 00:22:50.736
Like I say, from
the server, we're

00:22:50.736 --> 00:22:52.110
then generating
the message which

00:22:52.110 --> 00:22:54.930
is sent to the individual user.

00:22:54.930 --> 00:22:59.900
And then on the endpoint,
as in the device,

00:22:59.900 --> 00:23:03.240
the operating system will
send a message to the browser.

00:23:03.240 --> 00:23:04.770
The browser will wake up.

00:23:04.770 --> 00:23:06.840
The Service Worker will wake up.

00:23:06.840 --> 00:23:10.290
And then as the
push event happens,

00:23:10.290 --> 00:23:11.880
the Service Worker starts.

00:23:11.880 --> 00:23:16.660
And then the Service Worker
can display a notification

00:23:16.660 --> 00:23:18.140
like we saw before.

00:23:18.140 --> 00:23:21.730
Now the great thing about
this is that, like I say,

00:23:21.730 --> 00:23:24.220
the Service Worker
doesn't have to be awake

00:23:24.220 --> 00:23:26.020
to handle the message.

00:23:26.020 --> 00:23:30.400
The Service Worker is woken up
when a push message arrives.

00:23:30.400 --> 00:23:34.340
So just to give you a picture
of the whole setup again,

00:23:34.340 --> 00:23:40.900
so for each browser, the browser
has its own push service.

00:23:40.900 --> 00:23:44.440
So when you want to send
a message to the user,

00:23:44.440 --> 00:23:47.710
you send a request
to the push service

00:23:47.710 --> 00:23:50.890
with information that
identifies the user.

00:23:50.890 --> 00:23:54.850
Then the push service sends
the message to the user.

00:23:54.850 --> 00:23:58.930
And the endpoint then wakes
up the Service Worker.

00:23:58.930 --> 00:24:02.480
And a notification
can be displayed.

00:24:02.480 --> 00:24:06.550
So this might sound
a little unwebby,

00:24:06.550 --> 00:24:11.050
because this idea that
we have a different push

00:24:11.050 --> 00:24:12.970
service for each browser.

00:24:12.970 --> 00:24:15.280
What's nice is
that this has been

00:24:15.280 --> 00:24:20.590
standardized with something
called the Web Push Protocol.

00:24:20.590 --> 00:24:23.590
What this means is
that no matter what

00:24:23.590 --> 00:24:26.620
push service the
browser uses, you

00:24:26.620 --> 00:24:29.440
write the same code, the
same JavaScript on the client

00:24:29.440 --> 00:24:32.320
side, the same code
on the server side,

00:24:32.320 --> 00:24:36.112
to be able to send
and handle messages.

00:24:36.112 --> 00:24:38.320
This is really nice, because
I don't know if people--

00:24:38.320 --> 00:24:42.450
has anyone in the past
used push notifications?

00:24:42.450 --> 00:24:46.100
Has anyone built push
notifications in their apps?

00:24:46.100 --> 00:24:47.350
A few people.

00:24:47.350 --> 00:24:49.240
People may have
noticed before, you

00:24:49.240 --> 00:24:52.120
had to set up
individual IDs and so

00:24:52.120 --> 00:24:53.470
on to use push notifications.

00:24:53.470 --> 00:24:57.520
Well the nice thing now is
that push notifications work

00:24:57.520 --> 00:24:59.350
the same way in every browser.

00:24:59.350 --> 00:25:02.580
And what that means
is as you may know,

00:25:02.580 --> 00:25:05.530
push is not
supported by iOS yet,

00:25:05.530 --> 00:25:07.720
like Safari running on iOS.

00:25:07.720 --> 00:25:11.740
But when it is, your
code will work on iOS

00:25:11.740 --> 00:25:14.740
exactly as it will now
on browsers running

00:25:14.740 --> 00:25:17.930
on Android, which is great.

00:25:17.930 --> 00:25:23.210
So we also need to
authenticate the transactions,

00:25:23.210 --> 00:25:26.990
the communication between
the user and your server

00:25:26.990 --> 00:25:29.780
and between your
server and the user.

00:25:29.780 --> 00:25:34.250
You need to be able to
trust that a request

00:25:34.250 --> 00:25:36.740
for a subscription
comes from the user

00:25:36.740 --> 00:25:39.020
that you think it does.

00:25:39.020 --> 00:25:41.390
And the other way
around, the user

00:25:41.390 --> 00:25:44.810
must be able to trust
that a message received

00:25:44.810 --> 00:25:48.270
is actually from the site
that they think they're

00:25:48.270 --> 00:25:49.590
getting the message from.

00:25:49.590 --> 00:25:54.170
Now the protocol we have
for this is called VAPID.

00:25:54.170 --> 00:25:56.210
I won't go into the
details, particularly.

00:25:56.210 --> 00:26:01.640
But the core idea here
is that the communication

00:26:01.640 --> 00:26:06.410
between the user and your
web service is authenticated.

00:26:06.410 --> 00:26:09.710
And the communication
between your web server

00:26:09.710 --> 00:26:13.740
via the Push service to
the user is authenticated.

00:26:13.740 --> 00:26:15.770
So the user can trust you.

00:26:15.770 --> 00:26:17.760
And you can trust the user.

00:26:17.760 --> 00:26:20.050
This is absolutely crucial.

00:26:20.050 --> 00:26:25.310
You can do a lot of this work to
set up push messaging yourself.

00:26:25.310 --> 00:26:28.550
What I would say
is that have a look

00:26:28.550 --> 00:26:32.420
at our libraries for web push.

00:26:32.420 --> 00:26:35.570
These are maintained
by the Chrome team.

00:26:35.570 --> 00:26:37.310
They're really well-written.

00:26:37.310 --> 00:26:42.600
And even if you're rolling your
own push messaging service.

00:26:42.600 --> 00:26:46.360
I would recommend that
you use these libraries.

00:26:46.360 --> 00:26:51.380
It's just like, for example,
a server using nodes.

00:26:51.380 --> 00:26:54.200
It's a really, really
straightforward way

00:26:54.200 --> 00:26:59.120
to generate and send messages
just using the library.

00:26:59.120 --> 00:27:01.250
And we have code labs
for that as well.

00:27:01.250 --> 00:27:03.530
So you can try that out.

00:27:03.530 --> 00:27:07.280
So I do want to run through
the actual code for this,

00:27:07.280 --> 00:27:11.480
beginning by talking about
subscribing and unsubscribing.

00:27:11.480 --> 00:27:13.770
So the first thing
you need to do,

00:27:13.770 --> 00:27:15.240
this is a progressive web app.

00:27:15.240 --> 00:27:18.320
So we need to actually
check that Service Worker is

00:27:18.320 --> 00:27:22.700
implemented, by seeing if we
can see that in Navigator.

00:27:22.700 --> 00:27:27.680
And then once the Service Worker
is registered successfully,

00:27:27.680 --> 00:27:31.850
we can then get at
the push manager API.

00:27:31.850 --> 00:27:34.370
Now the push manager
API is what we use

00:27:34.370 --> 00:27:36.740
to manage subscription data.

00:27:36.740 --> 00:27:39.770
And in this example, we're
getting a subscription.

00:27:39.770 --> 00:27:43.940
So that subscription
object, like this bit,

00:27:43.940 --> 00:27:47.960
is what has the information
about the identity of the end

00:27:47.960 --> 00:27:49.190
user.

00:27:49.190 --> 00:27:52.640
That's the data that enables
you, your web server,

00:27:52.640 --> 00:27:55.610
to be able to send a
message to the right user.

00:27:55.610 --> 00:28:00.030
And I'll show you how we
go on with that later.

00:28:00.030 --> 00:28:02.720
So if we need to
subscribe the user,

00:28:02.720 --> 00:28:04.520
if they hadn't
subscribed already,

00:28:04.520 --> 00:28:06.060
it's kind of a similar process.

00:28:06.060 --> 00:28:09.140
We get the Service
Worker registration.

00:28:09.140 --> 00:28:11.300
And then we subscribe the user.

00:28:11.300 --> 00:28:14.700
Now you'll see a
couple of options here.

00:28:14.700 --> 00:28:19.070
The first one here,
userVisibleOnly:true,

00:28:19.070 --> 00:28:20.690
this is really crucial.

00:28:20.690 --> 00:28:26.300
If you're receiving push
messages in your application,

00:28:26.300 --> 00:28:29.600
you must show a notification.

00:28:29.600 --> 00:28:33.170
This is not an API.

00:28:33.170 --> 00:28:35.990
This is not a way to push data.

00:28:35.990 --> 00:28:39.950
This is specifically an
API for sending messages

00:28:39.950 --> 00:28:42.380
to be displayed
in notifications.

00:28:42.380 --> 00:28:45.050
If you don't show
a notification when

00:28:45.050 --> 00:28:50.210
you receive a push
message, pop a notification

00:28:50.210 --> 00:28:53.090
from your Service
Worker, the system,

00:28:53.090 --> 00:28:57.890
the browser will pop up
a dialog saying that it

00:28:57.890 --> 00:28:59.840
received a notification.

00:28:59.840 --> 00:29:02.780
The idea of this is
that otherwise, it

00:29:02.780 --> 00:29:06.110
would be possible
for a malicious site

00:29:06.110 --> 00:29:08.870
to just continually
send thousands

00:29:08.870 --> 00:29:11.190
of messages to the end user.

00:29:11.190 --> 00:29:14.340
And that's just a
simple way to stop that.

00:29:14.340 --> 00:29:18.030
The application server key
has encryption data for,

00:29:18.030 --> 00:29:23.010
like I say, making sure that the
communication is authenticated

00:29:23.010 --> 00:29:25.350
all the way from the
user to your web server

00:29:25.350 --> 00:29:29.540
and by the push service
back to the user.

00:29:29.540 --> 00:29:32.760
And in this example, it
shows that then once we've

00:29:32.760 --> 00:29:37.290
got the subscription object,
what we're doing in this case

00:29:37.290 --> 00:29:41.070
is calling a function
that then would actually

00:29:41.070 --> 00:29:45.150
send the subscription
data to your server.

00:29:45.150 --> 00:29:50.010
And in other words, that's the
identifying data for the user

00:29:50.010 --> 00:29:52.380
that you would send to your
server that enables you then

00:29:52.380 --> 00:29:56.250
to send a message to that
particular user, what's

00:29:56.250 --> 00:29:58.750
called the endpoint data.

00:29:58.750 --> 00:30:01.300
And then obviously
in all of this,

00:30:01.300 --> 00:30:03.000
we just have console logs here.

00:30:03.000 --> 00:30:06.490
But make sure if you're
implementing push notifications

00:30:06.490 --> 00:30:09.610
that you work well
with UI and UX

00:30:09.610 --> 00:30:12.400
to ensure that the
user understands

00:30:12.400 --> 00:30:17.424
when they subscribed and when
that happened successfully.

00:30:17.424 --> 00:30:19.340
So let's look at that
in a little more detail.

00:30:19.340 --> 00:30:21.620
Like I said, this
subscription object

00:30:21.620 --> 00:30:23.930
is what identifies the user.

00:30:23.930 --> 00:30:25.660
This is what you
save on your server,

00:30:25.660 --> 00:30:29.900
so that when you make a
request to the push service

00:30:29.900 --> 00:30:32.150
to send the user
a message that you

00:30:32.150 --> 00:30:33.876
have some way of
identifying which user

00:30:33.876 --> 00:30:35.000
it is you're talking about.

00:30:35.000 --> 00:30:38.120
So that's that bit
at the top there.

00:30:38.120 --> 00:30:40.250
This represents
the push service.

00:30:40.250 --> 00:30:45.590
And this bit here is identifier
for the individual user.

00:30:45.590 --> 00:30:49.070
And then we've got
the keys to ensure

00:30:49.070 --> 00:30:53.350
that that process is secure.

00:30:53.350 --> 00:30:59.360
Little diversion here
about user experience.

00:30:59.360 --> 00:31:02.590
It's really important that,
like Add to Home Screen,

00:31:02.590 --> 00:31:08.230
that you choose the right moment
to prompt a user if they would

00:31:08.230 --> 00:31:11.390
like to receive push messages.

00:31:11.390 --> 00:31:15.280
Now what we have
seen in some apps

00:31:15.280 --> 00:31:18.980
is that as soon as you go to
the website, you get a message.

00:31:18.980 --> 00:31:20.440
A dialog popped up.

00:31:20.440 --> 00:31:23.890
Would you like to
subscribe to push messages?

00:31:23.890 --> 00:31:26.950
In general, that
is not a good time.

00:31:26.950 --> 00:31:31.570
You need to wait until the user
is showing signs of engagement

00:31:31.570 --> 00:31:33.640
before you actually
prompt them if they would

00:31:33.640 --> 00:31:35.950
like to receive push messaging.

00:31:35.950 --> 00:31:37.930
Alternatively you
can just let them

00:31:37.930 --> 00:31:40.250
do that you know interactively.

00:31:40.250 --> 00:31:42.800
And I'll show an
example of that.

00:31:42.800 --> 00:31:49.090
If you do pop up a prompt
to receive push messages,

00:31:49.090 --> 00:31:51.610
make sure it's really
clear what's going on.

00:31:51.610 --> 00:31:54.190
Make sure that the
user understands

00:31:54.190 --> 00:31:57.650
what they're being asked
and what the process is.

00:31:57.650 --> 00:32:00.730
A really nice
example of people who

00:32:00.730 --> 00:32:03.820
are doing a really
good job of prompting

00:32:03.820 --> 00:32:07.600
for push notifications
is the Weather Channel.

00:32:07.600 --> 00:32:12.820
What they have is
very clear UI, UX

00:32:12.820 --> 00:32:16.950
for subscribing to
push notifications.

00:32:16.950 --> 00:32:22.620
And what's nice is that
it's clear for the user

00:32:22.620 --> 00:32:24.920
that what's happening,
in the first place,

00:32:24.920 --> 00:32:28.330
but also that they
then have the ability

00:32:28.330 --> 00:32:31.840
to choose different
types of notifications,

00:32:31.840 --> 00:32:35.360
so for different
sections of the site.

00:32:35.360 --> 00:32:36.590
This is really important.

00:32:39.370 --> 00:32:41.950
If you're not sure
what users might

00:32:41.950 --> 00:32:45.040
want from your site in
terms of notifications,

00:32:45.040 --> 00:32:48.460
then think about sending
different notifications

00:32:48.460 --> 00:32:50.060
for different subjects.

00:32:50.060 --> 00:32:54.010
So in this example,
the Weather Channel

00:32:54.010 --> 00:32:58.030
gives the user the option to
subscribe to breaking news,

00:32:58.030 --> 00:32:59.230
whatever that means.

00:32:59.230 --> 00:33:02.890
Or they can just
subscribe to alerts that

00:33:02.890 --> 00:33:05.060
are issued by the government.

00:33:05.060 --> 00:33:06.550
So give the user options.

00:33:06.550 --> 00:33:11.380
If you think you have more
than one kind of push message,

00:33:11.380 --> 00:33:13.250
then give the user
options to choose.

00:33:17.380 --> 00:33:19.450
Unsubscribing--
obviously, you have

00:33:19.450 --> 00:33:23.500
to give users a nice
interface for unsubscribing.

00:33:23.500 --> 00:33:27.220
Some users may
unsubscribe, resubscribe.

00:33:27.220 --> 00:33:29.380
Make sure that process
of unsubscribing

00:33:29.380 --> 00:33:31.630
is really seamless.

00:33:31.630 --> 00:33:32.500
And it works well.

00:33:32.500 --> 00:33:34.150
Here's the code for that.

00:33:34.150 --> 00:33:38.410
Again we're getting the Service
Worker registration object.

00:33:38.410 --> 00:33:42.010
And then once we get
the subscription object,

00:33:42.010 --> 00:33:45.850
it's as simple as calling
the unsubscribe method.

00:33:45.850 --> 00:33:49.240
And that means the user is
then unsubscribed to push

00:33:49.240 --> 00:33:54.260
messages for that domain.

00:33:54.260 --> 00:33:59.060
Now, like I said, we have
the Web Push Protocol,

00:33:59.060 --> 00:34:02.330
which is really nice, because
it standardizes the process

00:34:02.330 --> 00:34:04.160
of sending messages.

00:34:04.160 --> 00:34:09.710
The core part of this is that
messages must be encrypted.

00:34:09.710 --> 00:34:13.429
We need the whole
communication flow

00:34:13.429 --> 00:34:15.920
to be encrypted from
start to finish.

00:34:15.920 --> 00:34:18.590
So when you send a message
from your web server

00:34:18.590 --> 00:34:23.110
to the push service, that
message must be encrypted.

00:34:23.110 --> 00:34:26.810
Let's actually have a look
at the payload for that.

00:34:26.810 --> 00:34:29.540
Remember, that was the
subscription object

00:34:29.540 --> 00:34:33.050
identifies the user.

00:34:33.050 --> 00:34:36.090
This is given to
us by the browser.

00:34:36.090 --> 00:34:41.210
So at the start here, we have
the URL for the push service.

00:34:41.210 --> 00:34:43.480
And the last part of
this is the identifier

00:34:43.480 --> 00:34:45.320
for the individual user.

00:34:45.320 --> 00:34:49.310
So when you want to send
a message to a user,

00:34:49.310 --> 00:34:53.690
it's as simple as making
a put request to the push

00:34:53.690 --> 00:34:55.940
service, which looks like that.

00:34:55.940 --> 00:34:57.890
Let's break this down a bit.

00:34:57.890 --> 00:35:01.130
The first part is
the actual domain

00:35:01.130 --> 00:35:05.000
of the origin of
the push service.

00:35:05.000 --> 00:35:07.730
And then the path,
which includes

00:35:07.730 --> 00:35:09.330
what we call the endpoint.

00:35:09.330 --> 00:35:14.150
So this, again, is the bit
that identifies the user.

00:35:14.150 --> 00:35:17.180
Did anyone see this
last-- this was crazy--

00:35:17.180 --> 00:35:19.060
I think last year?

00:35:19.060 --> 00:35:21.290
There was a video
of a shark eating

00:35:21.290 --> 00:35:24.200
through an internet cable.

00:35:24.200 --> 00:35:26.530
Unbelievable, I
think in Vietnam.

00:35:26.530 --> 00:35:29.210
It's incredible, just
destroying an internet cable.

00:35:29.210 --> 00:35:34.010
Anyway the point of this is that
you cannot rely on your user

00:35:34.010 --> 00:35:35.930
being online.

00:35:35.930 --> 00:35:39.290
So what we have in the
payload or the headers,

00:35:39.290 --> 00:35:43.400
rather, for the request to
the service is a Time to Live,

00:35:43.400 --> 00:35:45.910
TTL, Time to Live.

00:35:45.910 --> 00:35:49.160
What this one specifies
is for the push service

00:35:49.160 --> 00:35:55.460
to keep trying for 120 seconds
to send a message to the end

00:35:55.460 --> 00:35:56.790
user.

00:35:56.790 --> 00:36:01.370
Now if you think about it, there
are some messages which have

00:36:01.370 --> 00:36:02.870
to be received immediately .

00:36:02.870 --> 00:36:06.380
If they're not received
within, say, one minute then

00:36:06.380 --> 00:36:07.770
they are irrelevant.

00:36:07.770 --> 00:36:09.830
There are other
messages that might

00:36:09.830 --> 00:36:12.080
be valid to send
for several hours.

00:36:12.080 --> 00:36:16.010
So you know that TTL value
is really handy for sending

00:36:16.010 --> 00:36:18.140
different types of messages.

00:36:18.140 --> 00:36:20.960
Like I say, it is
the number of seconds

00:36:20.960 --> 00:36:24.410
that the push service
will keep trying to send

00:36:24.410 --> 00:36:26.660
a message to the end user.

00:36:26.660 --> 00:36:29.900
And then we've got some
other necessary headers there

00:36:29.900 --> 00:36:33.700
for content type and encoding
and encryption values

00:36:33.700 --> 00:36:35.990
and the authorization value.

00:36:35.990 --> 00:36:40.250
Like I say, we have
this exchange of keys

00:36:40.250 --> 00:36:44.510
so that we can be
sure that the user is

00:36:44.510 --> 00:36:47.240
who we think they are, and
for the users' point of view

00:36:47.240 --> 00:36:51.620
that they're receiving the
message, the actual message

00:36:51.620 --> 00:36:55.550
that you sent and from the
site that they think they're

00:36:55.550 --> 00:36:57.830
getting that message from.

00:36:57.830 --> 00:37:00.000
And then we have an
authorization header

00:37:00.000 --> 00:37:01.350
there as well.

00:37:01.350 --> 00:37:03.270
And this last bit is
meant to represent

00:37:03.270 --> 00:37:06.330
the actual encrypted payload.

00:37:06.330 --> 00:37:08.520
The cool thing is now,
just to repeat that,

00:37:08.520 --> 00:37:12.780
that you can send a
payload in a notification.

00:37:12.780 --> 00:37:15.120
At the very start
of this, it wasn't

00:37:15.120 --> 00:37:17.760
actually possible to
send a payload all

00:37:17.760 --> 00:37:20.330
you could do was notify
the end user that there

00:37:20.330 --> 00:37:21.580
was a notification.

00:37:21.580 --> 00:37:26.070
But just to be clear, it's now
possible to send a payload.

00:37:26.070 --> 00:37:27.960
And I'll talk a bit
more about that now.

00:37:27.960 --> 00:37:30.940
Like I say, check out
the Web Push libraries,

00:37:30.940 --> 00:37:33.380
because this is
much the easiest way

00:37:33.380 --> 00:37:37.810
to send push messaging
from your server.

00:37:37.810 --> 00:37:42.730
We'll have some URLs at the end,
too, that we'll share with you.

00:37:42.730 --> 00:37:46.480
So on the incoming side, this
is pretty straightforward.

00:37:46.480 --> 00:37:49.840
In the Service Worker, you're
listening out for a message.

00:37:49.840 --> 00:37:53.530
Like I say the browser doesn't
even have to be opening.

00:37:53.530 --> 00:37:56.380
The system will wake up
the browser, will wake up

00:37:56.380 --> 00:37:57.670
the Service Worker.

00:37:57.670 --> 00:38:00.890
And the Service Worker
will get a push event.

00:38:00.890 --> 00:38:03.700
Then from the push event,
just look at the data.

00:38:03.700 --> 00:38:05.920
Get the JSON from that.

00:38:05.920 --> 00:38:10.330
And in this case, showering
a simple notification

00:38:10.330 --> 00:38:14.350
with a title, some body
text, the icon data.

00:38:14.350 --> 00:38:18.730
And then this last
part, the tag value,

00:38:18.730 --> 00:38:23.980
now what this does is allows you
to send multiple notifications

00:38:23.980 --> 00:38:27.130
on the same subject.

00:38:27.130 --> 00:38:30.280
What that means is that
the browser will not

00:38:30.280 --> 00:38:33.340
pop up different notifications.

00:38:33.340 --> 00:38:35.640
It won't keep popping
up new notifications.

00:38:35.640 --> 00:38:38.770
It will understand that
you're sending, maybe,

00:38:38.770 --> 00:38:42.160
a different message but
using the same notification.

00:38:42.160 --> 00:38:46.780
So it's just a way, in a sense,
of grouping notifications

00:38:46.780 --> 00:38:51.370
to avoid sending push messages
that result in more and more

00:38:51.370 --> 00:38:55.380
and more notification dialogs.

00:38:55.380 --> 00:38:59.480
Here's an example of a pattern
we're seeing a lot now.

00:38:59.480 --> 00:39:03.630
Like I say, one of the nice
things about push notifications

00:39:03.630 --> 00:39:08.040
is that you can actually get the
whole experience for the user

00:39:08.040 --> 00:39:09.540
in the notification.

00:39:09.540 --> 00:39:11.140
No need to go to a web page.

00:39:11.140 --> 00:39:13.280
No need to--

00:39:13.280 --> 00:39:15.490
I don't know-- go
anywhere, do anything.

00:39:15.490 --> 00:39:18.660
They can actually complete
their task right there

00:39:18.660 --> 00:39:19.890
in the notification.

00:39:19.890 --> 00:39:22.680
So in this example, they're
just confirming a restaurant

00:39:22.680 --> 00:39:25.300
booking, really simple.

00:39:25.300 --> 00:39:26.550
All the information is there.

00:39:26.550 --> 00:39:27.390
It's precise.

00:39:27.390 --> 00:39:28.020
It's relevant.

00:39:28.020 --> 00:39:29.130
It's timely.

00:39:29.130 --> 00:39:32.340
And all the action happens
right there in the notification,

00:39:32.340 --> 00:39:34.560
a really nice pattern
we're seeing in lots

00:39:34.560 --> 00:39:38.260
and lots of different contexts.

00:39:38.260 --> 00:39:41.110
So for that example
to get those buttons,

00:39:41.110 --> 00:39:44.890
you have this bit here, which
is the action stuff here.

00:39:44.890 --> 00:39:50.241
So to have a button
displayed in a notification,

00:39:50.241 --> 00:39:52.320
you give the action name.

00:39:52.320 --> 00:39:54.870
And you give it a title,
what's actually displayed,

00:39:54.870 --> 00:39:59.730
and then an icon, the image
that's displayed next to it.

00:39:59.730 --> 00:40:02.180
And then I'll show
you how that works.

00:40:02.180 --> 00:40:06.330
So once the user actually
clicks on the notification,

00:40:06.330 --> 00:40:09.720
you'll get a notification click
event that you can handle.

00:40:09.720 --> 00:40:13.560
And then you listen
out for the event,

00:40:13.560 --> 00:40:16.630
and then check the
name of the action--

00:40:16.630 --> 00:40:19.500
or the action, rather.

00:40:19.500 --> 00:40:21.840
In this case, we're
looking for one called like

00:40:21.840 --> 00:40:24.460
and then acting accordingly.

00:40:24.460 --> 00:40:27.810
So we can make a
fetch request that

00:40:27.810 --> 00:40:30.520
shows that that user
clicked on a like button.

00:40:30.520 --> 00:40:33.480
Or we could do some
other stuff too.

00:40:33.480 --> 00:40:38.460
We could open a window
or lots of other actions.

00:40:38.460 --> 00:40:45.660
So I think these notifications
are really, really powerful.

00:40:45.660 --> 00:40:48.420
The core idea is
that we're seeing

00:40:48.420 --> 00:40:53.220
users are very active in
response to notifications.

00:40:53.220 --> 00:40:56.330
They are a great way of
keeping this connection,

00:40:56.330 --> 00:40:59.700
building this engagement
with users, without--

00:40:59.700 --> 00:41:02.780
if you get it right--
without being intrusive.

00:41:02.780 --> 00:41:05.580
There are lots of great
things we're seeing.

00:41:05.580 --> 00:41:07.290
We're really
interested to see what

00:41:07.290 --> 00:41:11.310
you do with push notifications,
really interesting stuff

00:41:11.310 --> 00:41:15.220
that people are doing with that,
maybe not what we've expected.

00:41:15.220 --> 00:41:19.830
We have a lot of
information online.

00:41:19.830 --> 00:41:21.870
Please take a look
at this stuff.

00:41:21.870 --> 00:41:25.830
There's a stack of stuff
on our web fundamentals

00:41:25.830 --> 00:41:30.870
site about push notifications,
a lot of information there.

00:41:30.870 --> 00:41:35.790
And we're regularly
writing updates as well,

00:41:35.790 --> 00:41:40.260
as changes come in and
new features are built

00:41:40.260 --> 00:41:42.990
and we see more implementations.

00:41:42.990 --> 00:41:44.460
Like I say, really
looking forward

00:41:44.460 --> 00:41:46.970
to what you make of
push notifications.

00:41:46.970 --> 00:41:50.850
All I can say, we would
love to hear from you.

00:41:50.850 --> 00:41:52.380
So thank you very much.

00:41:52.380 --> 00:41:55.290
And yeah, if you're doing
something great with push

00:41:55.290 --> 00:41:57.840
notifications, please email me.

00:41:57.840 --> 00:42:01.230
If you have questions,
come and talk to us.

00:42:01.230 --> 00:42:04.470
We'd love to find out more about
what people are doing with push

00:42:04.470 --> 00:42:07.301
notifications and if you're
coming up against problems as

00:42:07.301 --> 00:42:07.800
well.

00:42:07.800 --> 00:42:09.788
So thank you.

00:42:09.788 --> 00:42:12.208
[APPLAUSE]

00:42:16.570 --> 00:42:18.150
SPEAKER 1: [SPEAKING MANDARIN]

00:42:25.870 --> 00:42:26.920
AUDIENCE: Hi.

00:42:26.920 --> 00:42:30.750
In my opinion, the
[? people ?] want

00:42:30.750 --> 00:42:37.510
to improve the user experience
at mobile available,

00:42:37.510 --> 00:42:40.410
at web in the Chrome.

00:42:40.410 --> 00:42:46.530
But I want to know the
PWA and hybrid apps,

00:42:46.530 --> 00:42:51.100
can you compare
between two things?

00:42:51.100 --> 00:42:57.590
And when the first question,
and the second question

00:42:57.590 --> 00:43:05.910
is with user, just phones,
the push notification,

00:43:05.910 --> 00:43:11.970
can I call the Android
[? relay ?] table notification?

00:43:11.970 --> 00:43:16.830
Or can I call Android telephone?

00:43:16.830 --> 00:43:21.720
Maybe this [? relay ?]
table actually can I do.

00:43:21.720 --> 00:43:24.990
That's two questions.

00:43:24.990 --> 00:43:27.450
SAM DUTTON: So the first
question I wasn't sure about.

00:43:27.450 --> 00:43:30.900
The second question, you
could, I guess, fire an intent,

00:43:30.900 --> 00:43:31.980
call an intent URL.

00:43:31.980 --> 00:43:33.720
Would that work?

00:43:33.720 --> 00:43:34.791
I'm not sure that would.

00:43:34.791 --> 00:43:35.790
I don't think that will.

00:43:35.790 --> 00:43:37.470
So I'm not sure
that there's a way

00:43:37.470 --> 00:43:41.640
to make a-- like you're
asking to make a telephone

00:43:41.640 --> 00:43:44.910
call in response
to a notification?

00:43:48.095 --> 00:43:50.490
AUDIENCE: Pardon?

00:43:50.490 --> 00:43:55.860
SAM DUTTON: For the user
would make a telephone call

00:43:55.860 --> 00:43:58.480
in response to a notification.

00:43:58.480 --> 00:44:03.880
AUDIENCE: When people want
to respond to the push

00:44:03.880 --> 00:44:10.180
notification, maybe the
people want to call,

00:44:10.180 --> 00:44:14.100
want to [INAUDIBLE]
Android, Android [? relay ?]

00:44:14.100 --> 00:44:15.820
table notification.

00:44:15.820 --> 00:44:19.920
Will Android [? relay ?]
table telephone message.

00:44:19.920 --> 00:44:26.540
And maybe the push notification
can call Android [? relay ?]

00:44:26.540 --> 00:44:29.272
table application.

00:44:29.272 --> 00:44:30.980
SAM DUTTON: I don't
think there's any way

00:44:30.980 --> 00:44:39.860
to access the Android telephone,
so to speak, from a push

00:44:39.860 --> 00:44:40.730
notification.

00:44:40.730 --> 00:44:41.430
No.

00:44:41.430 --> 00:44:46.070
AUDIENCE: Just the
only push notification,

00:44:46.070 --> 00:44:51.471
not cannot call
[? relay ?] table

00:44:51.471 --> 00:44:52.970
SAM DUTTON: No I
don't think there's

00:44:52.970 --> 00:44:58.220
any way that you could access
the telephone functionality so

00:44:58.220 --> 00:44:58.767
to speak.

00:45:01.839 --> 00:45:03.380
Maybe come and chat
to me afterwards.

00:45:03.380 --> 00:45:05.862
I'll see if I can
give more information.

00:45:05.862 --> 00:45:07.320
What was the first
question though?

00:45:07.320 --> 00:45:10.030
It was the difference between--

00:45:10.030 --> 00:45:13.010
AUDIENCE: The first
question, I want

00:45:13.010 --> 00:45:20.360
to know can you compare
PWA and hybrid apps?

00:45:20.360 --> 00:45:23.640
This two protection--

00:45:27.330 --> 00:45:30.020
SAM DUTTON: So PWA
and hybrid apps?

00:45:32.810 --> 00:45:36.020
SAM DUTTON: Well there
may be contexts where

00:45:36.020 --> 00:45:37.820
a hybrid app works really well.

00:45:37.820 --> 00:45:38.950
It depends.

00:45:38.950 --> 00:45:40.400
It depends on your need.

00:45:40.400 --> 00:45:44.840
If you need an app that
must appear in an app store,

00:45:44.840 --> 00:45:49.220
then you might want
to build a hybrid app.

00:45:49.220 --> 00:45:52.250
Otherwise there are lots
of good reasons for,

00:45:52.250 --> 00:45:54.520
I would say, for using
progressive web apps.

00:45:54.520 --> 00:45:58.220
The biggest reason
from my perspective

00:45:58.220 --> 00:46:03.710
is that you reduce the barrier
to users actually getting

00:46:03.710 --> 00:46:04.730
at your app.

00:46:04.730 --> 00:46:07.340
I think Dion's
example was fantastic,

00:46:07.340 --> 00:46:11.690
where he could send his
father a link to a page.

00:46:11.690 --> 00:46:14.930
And he's not asking
his father to install

00:46:14.930 --> 00:46:17.370
an app or anything like that.

00:46:17.370 --> 00:46:23.210
So I think it depends on your
requirements as a developer.

00:46:23.210 --> 00:46:27.241
I think my advice would be to
try using a progressive web

00:46:27.241 --> 00:46:27.740
app.

00:46:27.740 --> 00:46:32.870
And then if you feel a need to
have an app in an app store,

00:46:32.870 --> 00:46:35.600
then maybe consider hybrid apps.

00:46:35.600 --> 00:46:38.880
I don't think it's clear cut.

00:46:38.880 --> 00:46:40.760
It's not never use hybrid apps.

00:46:43.730 --> 00:46:46.580
I don't think there are specific
scenarios where necessarily

00:46:46.580 --> 00:46:48.060
one is better than the other.

00:46:54.824 --> 00:46:56.240
AUDIENCE: I have
a little question

00:46:56.240 --> 00:47:00.640
about the manifest
is setting, in fact,

00:47:00.640 --> 00:47:02.710
my [? paging ?] strategy.

00:47:02.710 --> 00:47:09.490
So if I installed my
website on the desktop.

00:47:09.490 --> 00:47:12.190
And I update my
resources or assets

00:47:12.190 --> 00:47:16.390
where the icon
refresh are renewed.

00:47:16.390 --> 00:47:19.870
SAM DUTTON: OK, no.

00:47:19.870 --> 00:47:22.360
At the moment, no.

00:47:22.360 --> 00:47:26.130
But I believe there's
some work to fix that.

00:47:26.130 --> 00:47:28.390
You mean if you
update the icon, you

00:47:28.390 --> 00:47:32.290
want the home screen
icon to be updated.

00:47:32.290 --> 00:47:34.020
At the moment, no.

00:47:34.020 --> 00:47:37.367
But we want to see
that in future.

00:47:37.367 --> 00:47:38.200
AUDIENCE: Thank you.

00:47:38.200 --> 00:47:39.870
Thank you.

00:47:39.870 --> 00:47:42.790
SAM DUTTON: That's a really good
point, because it's crucial--

00:47:42.790 --> 00:47:44.550
if your brand changes and so on.

00:47:47.900 --> 00:47:52.700
AUDIENCE: Will Android Web View
plan to support push service?

00:47:55.440 --> 00:47:57.210
SAM DUTTON: Sorry,
say that again.

00:47:57.210 --> 00:48:01.810
AUDIENCE: Will Android Web View
plan to support push service?

00:48:01.810 --> 00:48:04.820
SAM DUTTON: So how
does, not good.

00:48:12.620 --> 00:48:15.030
Yeah, Pete's making the point
that if you were working

00:48:15.030 --> 00:48:20.210
with a the hybrid app, you
would probably be implementing

00:48:20.210 --> 00:48:23.075
push natively anyway.

00:48:23.075 --> 00:48:25.200
SPEAKER 2: At that point,
you've got a native app.

00:48:25.200 --> 00:48:29.300
So why not just use the
typical native stuff?

00:48:29.300 --> 00:48:31.640
And that is the smarter,
more efficient way.

00:48:31.640 --> 00:48:34.160
If you already
have a native app,

00:48:34.160 --> 00:48:37.590
it's no need to put push
notifications in a web view.

00:48:40.480 --> 00:48:43.280
AUDIENCE:
[? Third party ?] browser,

00:48:43.280 --> 00:48:47.415
in [INAUDIBLE] and push
service or other app?

00:48:50.474 --> 00:48:51.265
SPEAKER 2: That's--

00:48:51.265 --> 00:48:54.970
SAM DUTTON: Like for other apps?

00:48:54.970 --> 00:48:57.070
SPEAKER 2: So you're
saying for somebody

00:48:57.070 --> 00:49:00.190
who's building a browser
that just wraps a web view,

00:49:00.190 --> 00:49:03.850
so you've got your own, your
browser vendor without actually

00:49:03.850 --> 00:49:05.500
building a browser.

00:49:05.500 --> 00:49:06.116
Is that right?

00:49:09.820 --> 00:49:13.060
SAM DUTTON: There's no
reason why you can't, why--

00:49:13.060 --> 00:49:16.300
say you had a browser that
was within a hybrid app.

00:49:16.300 --> 00:49:19.780
There's no reason why
the hybrid app can't

00:49:19.780 --> 00:49:25.810
receive push notifications
and then notify the browser as

00:49:25.810 --> 00:49:32.530
if the browser had been outside
of a hybrid app, so to speak.

00:49:32.530 --> 00:49:34.600
SPEAKER 2: I think
the key piece there--

00:49:34.600 --> 00:49:36.880
and I don't have
the answer to this--

00:49:36.880 --> 00:49:41.920
is I don't know if Service
Workers work in web view.

00:49:41.920 --> 00:49:46.450
And my guess is that they don't.

00:49:46.450 --> 00:49:48.790
But I'm not positive on that.

00:49:48.790 --> 00:49:52.812
So that would be the
whole gating factor.

00:49:52.812 --> 00:49:53.770
AUDIENCE: OK thank you.

00:49:56.402 --> 00:49:57.610
SPEAKER 1: One last question?

00:50:02.460 --> 00:50:05.417
AUDIENCE: Hello, sir, a
very wonderful speech.

00:50:10.020 --> 00:50:18.360
My question is the web push
notifications based on the GCN?

00:50:18.360 --> 00:50:24.240
SAM DUTTON: OK, yeah, so
on Chrome on Android, yes.

00:50:24.240 --> 00:50:30.480
But the crucial thing about
the push API and the Web Push

00:50:30.480 --> 00:50:33.150
Protocol is that
you can implement

00:50:33.150 --> 00:50:36.570
with different browsers,
can implement web push

00:50:36.570 --> 00:50:39.375
notifications with a
different push service.

00:50:43.400 --> 00:50:48.036
AUDIENCE: And do you think
it will work well in China

00:50:48.036 --> 00:50:50.250
based on the GCM?

00:50:50.250 --> 00:50:52.530
SAM DUTTON: Well it
depends on the browser.

00:50:52.530 --> 00:50:55.620
It depends on, say, like if--

00:50:55.620 --> 00:50:58.950
I mean I know actually UC use
a different system for push

00:50:58.950 --> 00:51:00.440
notifications.

00:51:00.440 --> 00:51:04.450
But if UC or QQ
or other browsers

00:51:04.450 --> 00:51:07.080
want to implement
push notifications,

00:51:07.080 --> 00:51:11.680
they can certainly do that
using their own Push service.

00:51:11.680 --> 00:51:15.480
It's up to the browser vendor
to choose a push service

00:51:15.480 --> 00:51:17.850
that they interact with.

00:51:17.850 --> 00:51:20.670
The nice thing about
the standardization

00:51:20.670 --> 00:51:26.730
is that as a developer, you
don't need to change your code.

00:51:26.730 --> 00:51:30.330
The point of that is that
you would write the same code

00:51:30.330 --> 00:51:34.590
on the client, same JavaScript,
same code on the server side.

00:51:34.590 --> 00:51:38.640
And it would just work,
given the standardization

00:51:38.640 --> 00:51:40.020
of the APIs.

00:51:40.020 --> 00:51:43.050
So it's up to the
browser vendors

00:51:43.050 --> 00:51:46.410
to choose what push
service they use.

00:51:46.410 --> 00:51:51.780
But the actual underlying
APIs will just work.

00:51:51.780 --> 00:51:55.820
AUDIENCE: One last
question, would you

00:51:55.820 --> 00:52:01.170
explain a little bit of GCM?

00:52:01.170 --> 00:52:09.710
I really wonder how does
this work, the theory?

00:52:09.710 --> 00:52:15.080
SAM DUTTON: So well,
the core idea is that--

00:52:15.080 --> 00:52:20.550
I actually don't know the
real detail of how it works.

00:52:20.550 --> 00:52:22.940
But the core concept
is that there

00:52:22.940 --> 00:52:27.480
is the minimal possible
traffic between the push

00:52:27.480 --> 00:52:30.920
service and the endpoint.

00:52:30.920 --> 00:52:34.610
Some things I do know
is that some messages

00:52:34.610 --> 00:52:39.440
can be bundled together so
that you know that the end user

00:52:39.440 --> 00:52:45.290
device isn't constantly being
woken up and using radio.

00:52:45.290 --> 00:52:51.210
So services like GCM
running with Android

00:52:51.210 --> 00:52:55.640
use a lot of clever
algorithms to make sure

00:52:55.640 --> 00:53:00.650
that there's the minimal
traffic between the two sockets,

00:53:00.650 --> 00:53:08.570
so to speak, between the service
and the end user, the operating

00:53:08.570 --> 00:53:11.191
system on the device.

00:53:11.191 --> 00:53:12.357
AUDIENCE: Thank you.

00:53:12.357 --> 00:53:13.440
SAM DUTTON: It's nothing--

00:53:13.440 --> 00:53:15.700
what we've had in the
past is stuff which,

00:53:15.700 --> 00:53:19.750
like long polling,
which essentially you're

00:53:19.750 --> 00:53:23.950
constantly making requests
and refreshing those.

00:53:23.950 --> 00:53:25.900
The nice thing
about push messaging

00:53:25.900 --> 00:53:29.420
like this, standardized, is
that it uses the underlying

00:53:29.420 --> 00:53:36.100
operating system features to
minimize the battery, CPU,

00:53:36.100 --> 00:53:38.320
memory usage.

00:53:38.320 --> 00:53:41.160
AUDIENCE: Thank you very much.

00:53:41.160 --> 00:53:41.890
SPEAKER 1: OK.

00:53:41.890 --> 00:53:43.090
Thanks, Sam.

00:53:43.090 --> 00:53:44.640
SAM DUTTON: Thank you.

