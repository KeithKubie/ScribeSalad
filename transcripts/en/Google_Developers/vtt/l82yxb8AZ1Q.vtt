WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:02:19.918
[MUSIC PLAYING]

00:02:30.250 --> 00:02:33.510
Hi everyone, and welcome to this
week's Google Developers

00:02:33.510 --> 00:02:35.160
Live for the Google Drive SDK.

00:02:35.160 --> 00:02:36.930
I'm Steve Bazyl.

00:02:36.930 --> 00:02:40.150
Today I want to talk about a
new feature that is rolling

00:02:40.150 --> 00:02:44.020
out for the Drive SDK that is
particularly of interest to

00:02:44.020 --> 00:02:46.180
people who are writing
JavaScript client side

00:02:46.180 --> 00:02:47.080
applications.

00:02:47.080 --> 00:02:49.390
And this is improved
CORS Support.

00:02:49.390 --> 00:02:53.750
The Drive SDK has had CORS
Support for most of the API

00:02:53.750 --> 00:02:55.580
for a while now.

00:02:55.580 --> 00:02:58.900
Certainly things like using
the RESTful API, and even

00:02:58.900 --> 00:03:02.990
downloading resources has
been working fine.

00:03:02.990 --> 00:03:04.230
But one piece has
been missing.

00:03:04.230 --> 00:03:05.905
And that's support
for uploads.

00:03:05.905 --> 00:03:07.970
And of course, since we want
to encourage you to store

00:03:07.970 --> 00:03:10.710
files in Drive, that's a
very important part.

00:03:10.710 --> 00:03:13.510
But starting just actually the
past couple of days, and still

00:03:13.510 --> 00:03:16.550
rolling out, is CORS Support
for uploads.

00:03:16.550 --> 00:03:17.770
And I want to show you
how that works.

00:03:17.770 --> 00:03:20.160
And then take a look
at the code.

00:03:20.160 --> 00:03:22.340
I built a little sample
up last night just

00:03:22.340 --> 00:03:23.120
to show this off.

00:03:23.120 --> 00:03:24.410
And it's really simple.

00:03:24.410 --> 00:03:26.900
It's got a Google+ sign-in
button and we'll do a little

00:03:26.900 --> 00:03:29.910
drag and drop to upload
some files.

00:03:29.910 --> 00:03:32.420
So I want to switch
over to that.

00:03:32.420 --> 00:03:35.580
And you can see here we just
have a sign-in button.

00:03:35.580 --> 00:03:38.730
I'm going to sign in
really quick here.

00:03:38.730 --> 00:03:41.540
You may not be able to see the
whole approval screen, but

00:03:41.540 --> 00:03:44.050
it's just standard
Google+ sign in.

00:03:44.050 --> 00:03:46.045
And then we have a nice
little drop zone.

00:03:46.045 --> 00:03:47.850
So I'm going to just drag--

00:03:47.850 --> 00:03:51.930
I have a couple of files
here, some PNG.

00:03:51.930 --> 00:03:55.640
We'll drag that on, and then we
can see here that we have

00:03:55.640 --> 00:03:57.600
the metadata from that file.

00:03:57.600 --> 00:03:59.880
You can see that
it was created.

00:03:59.880 --> 00:04:01.600
And if I go into Drive,
you see I have

00:04:01.600 --> 00:04:03.130
this untitled document.

00:04:03.130 --> 00:04:04.180
And we'll talk about
why we don't have a

00:04:04.180 --> 00:04:06.452
title in just a moment.

00:04:06.452 --> 00:04:08.480
But I want to switch over
to the code and

00:04:08.480 --> 00:04:10.040
show what this is.

00:04:10.040 --> 00:04:13.350
So you can see here the
page is very simple.

00:04:13.350 --> 00:04:17.310
We have just a Google+ sign-in
button, our drop zone, and

00:04:17.310 --> 00:04:20.160
actually this upload button
isn't even used anymore.

00:04:20.160 --> 00:04:23.690
And of course, just an
area for results.

00:04:23.690 --> 00:04:27.350
And then the rest of the
script is our code.

00:04:27.350 --> 00:04:30.950
One thing you'll notice is the
only external script that I'm

00:04:30.950 --> 00:04:33.500
loading here is the +1 button.

00:04:33.500 --> 00:04:37.980
And that's really just out of
expediency because the plus

00:04:37.980 --> 00:04:39.990
sign-in button is just a really
easy way to add OAuth

00:04:39.990 --> 00:04:42.080
support to an application.

00:04:42.080 --> 00:04:44.590
But if I didn't want to have
any dependencies, we can

00:04:44.590 --> 00:04:46.590
certainly just implement that
function ourselves.

00:04:46.590 --> 00:04:47.870
It's quite easy to do.

00:04:50.680 --> 00:04:52.190
The rest of the code
is pretty simple.

00:04:52.190 --> 00:04:54.740
We'll just start with just
the drag and drop.

00:04:54.740 --> 00:04:59.840
We add some drag overs
and drop targets.

00:04:59.840 --> 00:05:02.260
Handle the file selection.

00:05:02.260 --> 00:05:03.820
And then we have this
media uploader.

00:05:03.820 --> 00:05:06.490
This is just a small helper
class that I wrote to show how

00:05:06.490 --> 00:05:07.230
to do this.

00:05:07.230 --> 00:05:10.660
And we're going to do a simple
upload and show the results.

00:05:10.660 --> 00:05:13.560
So pretty straightforward in
terms of just how the app

00:05:13.560 --> 00:05:14.450
itself works.

00:05:14.450 --> 00:05:17.860
Of course, the interesting part
is what happens in that

00:05:17.860 --> 00:05:23.330
media uploader function itself
and the upload simple.

00:05:23.330 --> 00:05:25.750
And before I show that, the
reason why this is so

00:05:25.750 --> 00:05:28.230
important really comes
down two things.

00:05:28.230 --> 00:05:31.790
So one, there's just a lot of
people out there who just

00:05:31.790 --> 00:05:34.960
really prefer to write
vanilla JavaScript.

00:05:34.960 --> 00:05:36.750
And they don't want to have
too many dependencies on

00:05:36.750 --> 00:05:40.640
libraries, particularly the
Google APIs, which they have

00:05:40.640 --> 00:05:43.580
their own script loader, it does
some dynamic loading to

00:05:43.580 --> 00:05:44.830
actually get the client.

00:05:47.520 --> 00:05:49.780
It can make testing a little
bit more difficult when you

00:05:49.780 --> 00:05:52.920
have those kind of runtime
dependencies for

00:05:52.920 --> 00:05:53.960
loading your scripts.

00:05:53.960 --> 00:05:57.250
The other issue is when you're
doing things like a Chrome

00:05:57.250 --> 00:06:00.890
packaged app, you have very
strict content security

00:06:00.890 --> 00:06:03.950
policy, which actually prevents
you from including

00:06:03.950 --> 00:06:05.080
external resources.

00:06:05.080 --> 00:06:07.460
All the scripts need to be
packaged as part of the

00:06:07.460 --> 00:06:10.320
application itself, which makes
using things like the

00:06:10.320 --> 00:06:12.730
Google API client problematic.

00:06:12.730 --> 00:06:16.360
There are ways around it in
terms of sandboxing content

00:06:16.360 --> 00:06:21.220
and then using a post message to
communicate in between your

00:06:21.220 --> 00:06:24.440
application and the
sandboxed frames.

00:06:24.440 --> 00:06:26.510
But that's a lot of overhead
that you have to go through,

00:06:26.510 --> 00:06:29.910
both from development and also
just in terms of how your app

00:06:29.910 --> 00:06:34.010
functions and how easy
it is to debug.

00:06:34.010 --> 00:06:35.610
It's just a lot of work.

00:06:35.610 --> 00:06:38.200
So the nice thing of having CORS
Support for upload now is

00:06:38.200 --> 00:06:40.360
if you are building something
like a Chrome packaged app,

00:06:40.360 --> 00:06:42.200
you can use vanilla
JavaScript.

00:06:42.200 --> 00:06:45.060
You can use the APIs that are
built in and fully supported

00:06:45.060 --> 00:06:49.080
in that environment to work
with the Drive API.

00:06:49.080 --> 00:06:51.694
So let's actually take a look
at this upload simple.

00:06:51.694 --> 00:06:53.520
Let me just scroll up here.

00:06:53.520 --> 00:06:56.990
You have a couple different
implementations of upload that

00:06:56.990 --> 00:06:58.220
we'll talk about.

00:06:58.220 --> 00:07:01.290
But this first one is pretty
straighforward.

00:07:01.290 --> 00:07:04.210
What we're is we're using the
file APIs that are now part of

00:07:04.210 --> 00:07:05.720
most modern browsers.

00:07:05.720 --> 00:07:09.090
And we use that to read the file
that we dragged on there.

00:07:09.090 --> 00:07:10.600
We just read it as
an array buffer.

00:07:10.600 --> 00:07:11.910
So it could be binary content.

00:07:11.910 --> 00:07:14.380
It really doesn't make
a difference.

00:07:14.380 --> 00:07:18.350
And then to upload it, we just
use XML HTTP request.

00:07:18.350 --> 00:07:22.720
It's a post to the Drive
upload endpoint.

00:07:22.720 --> 00:07:28.690
It's a little bit different
than the normal RESTful

00:07:28.690 --> 00:07:31.650
endpoint, which is
/drive/v2/files.

00:07:31.650 --> 00:07:35.190
In this case, we just prefix
that with /upload.

00:07:35.190 --> 00:07:36.970
Tell it that we're
doing media.

00:07:36.970 --> 00:07:39.820
Media just indicates that we're
just posting the raw

00:07:39.820 --> 00:07:40.750
file itself.

00:07:40.750 --> 00:07:42.110
We're not giving it
any metadata.

00:07:42.110 --> 00:07:43.870
And we're not specifying
titles or anything.

00:07:43.870 --> 00:07:46.620
It's just here's the
bytes for the file.

00:07:46.620 --> 00:07:50.030
And of course, set the content
type appropriately.

00:07:50.030 --> 00:07:52.440
But other than that this
is vanilla JavaScript.

00:07:52.440 --> 00:07:54.970
Again, no external libraries.

00:07:54.970 --> 00:07:57.110
Just using the features that are
built into the browser in

00:07:57.110 --> 00:07:58.410
order to do this.

00:07:58.410 --> 00:08:00.300
And we saw on the demo that
that worked fine.

00:08:03.310 --> 00:08:05.530
Of course, the problem with
media is you don't really get

00:08:05.530 --> 00:08:08.840
to specify that much control
over how the file is

00:08:08.840 --> 00:08:10.310
represented in Drive.

00:08:10.310 --> 00:08:13.300
You certainly could, once the
upload is complete, take the

00:08:13.300 --> 00:08:16.390
ID of that file and update
the metadata.

00:08:16.390 --> 00:08:19.900
It's not quite as efficient as
just giving us the metadata

00:08:19.900 --> 00:08:21.350
and the file up front.

00:08:21.350 --> 00:08:23.290
And to do that, we have a
different upload protocol

00:08:23.290 --> 00:08:24.770
called multipart.

00:08:24.770 --> 00:08:27.810
And we'll actually just do
a quick demo of that.

00:08:27.810 --> 00:08:30.260
I'm going to scroll
over to here.

00:08:34.870 --> 00:08:36.209
I'll say upload multipart.

00:08:36.209 --> 00:08:39.799
I'm going reload this page.

00:08:39.799 --> 00:08:42.970
I did set my approval prompt to
[? force, ?] which is why

00:08:42.970 --> 00:08:46.120
this button keeps showing up.

00:08:46.120 --> 00:08:50.240
But normally, you would just get
signed in automatically.

00:08:50.240 --> 00:08:54.790
And then this time let's
drag a PDF over.

00:08:54.790 --> 00:08:56.070
So again, it works.

00:08:56.070 --> 00:08:57.900
But you notice this
time, we actually

00:08:57.900 --> 00:08:59.200
have the correct title.

00:08:59.200 --> 00:09:03.490
You can see it here in the
metadata returned.

00:09:03.490 --> 00:09:06.680
And if we switch over to Drive,
we see we actually have

00:09:06.680 --> 00:09:09.550
the correct title
here as well.

00:09:09.550 --> 00:09:12.130
So let's switch back over to the
implementation for that.

00:09:12.130 --> 00:09:14.820
So again, we have this upload
multipart method, which is a

00:09:14.820 --> 00:09:20.690
little bit different than
our upload simple.

00:09:20.690 --> 00:09:22.860
And here we have to do
a little bit of work.

00:09:22.860 --> 00:09:26.120
We have to actually be able to
assemble the multipart body.

00:09:26.120 --> 00:09:30.540
So for those who are familiar
with doing multipart uploads,

00:09:30.540 --> 00:09:31.680
this is going to be familiar.

00:09:31.680 --> 00:09:33.770
If you're not, don't
worry too much.

00:09:33.770 --> 00:09:35.080
It's actually not
that difficult.

00:09:35.080 --> 00:09:39.280
But basically, we just create
a boundary to indicate the

00:09:39.280 --> 00:09:41.350
different parts.

00:09:41.350 --> 00:09:42.890
We create some metadata.

00:09:42.890 --> 00:09:45.710
In this case, the file API in
the browser actually gives us

00:09:45.710 --> 00:09:48.360
access to the title and the MIME
type that the operating

00:09:48.360 --> 00:09:50.430
system, or the browser,
detects.

00:09:50.430 --> 00:09:52.795
And we use that to populate the
metadata that we give to

00:09:52.795 --> 00:09:53.980
the Drive API.

00:09:53.980 --> 00:09:56.160
In this case, we really only
care about those two fields,

00:09:56.160 --> 00:09:58.290
title and MIME type.

00:09:58.290 --> 00:10:01.240
And then again, just like
before, we read the file.

00:10:01.240 --> 00:10:05.780
Except this time, rather than
just posting the raw bytes of

00:10:05.780 --> 00:10:07.660
the file, we're actually
going to build up

00:10:07.660 --> 00:10:09.250
this multipart body.

00:10:09.250 --> 00:10:13.680
And the nice thing is, if you
looked at the QuickStart that

00:10:13.680 --> 00:10:18.810
we've had in our Docs
for JavaScript, this

00:10:18.810 --> 00:10:20.085
code may look familiar.

00:10:20.085 --> 00:10:24.430
In fact, we've had, using the
Java API client and some

00:10:24.430 --> 00:10:27.240
tricks it uses with iFrame
proxies, you actually have

00:10:27.240 --> 00:10:28.480
been able to do uploads
from JavaScript.

00:10:28.480 --> 00:10:31.750
But again, it's been subject to
some restrictions in terms

00:10:31.750 --> 00:10:36.430
of requiring our script, not
quite being incompatible with

00:10:36.430 --> 00:10:39.790
packaged app CSP.

00:10:39.790 --> 00:10:41.930
But the code for building the
multipart is actually already

00:10:41.930 --> 00:10:42.790
in that QuickStart.

00:10:42.790 --> 00:10:44.380
And so I took that and modified
it a little bit just

00:10:44.380 --> 00:10:47.480
to make it a little bit cleaner
and take advantage of

00:10:47.480 --> 00:10:53.490
some of the features that we can
now do by exploiting APIs

00:10:53.490 --> 00:10:54.860
in modern browsers.

00:10:54.860 --> 00:10:57.810
Specifically, building
up [INAUDIBLE].

00:10:57.810 --> 00:11:00.350
So we can actually, rather than
just doing a giant string

00:11:00.350 --> 00:11:03.620
concatenation, we could actually
just give an array of

00:11:03.620 --> 00:11:04.700
all the different parts.

00:11:04.700 --> 00:11:09.010
In this case, it's the
delimiters, content tapes, the

00:11:09.010 --> 00:11:13.160
metadata for the file, which
is just a stringify JSON.

00:11:13.160 --> 00:11:17.450
And then, our next section,
which is the file.

00:11:17.450 --> 00:11:20.360
And one nice thing is that
when we do this, we can

00:11:20.360 --> 00:11:21.390
actually mix content.

00:11:21.390 --> 00:11:23.610
So we can mix text, and
we can mix binary.

00:11:23.610 --> 00:11:27.320
So whereas in the QuickStart
example we were forced to do

00:11:27.320 --> 00:11:30.610
base-64-encoding of the
content in order to be

00:11:30.610 --> 00:11:33.330
compatible with how the
JavaScript client worked, in

00:11:33.330 --> 00:11:35.660
this case, we could actually
just use the raw binary.

00:11:35.660 --> 00:11:39.990
It saves us a little bit of
bandwidth in terms of how the

00:11:39.990 --> 00:11:41.450
file is sent over the wire.

00:11:41.450 --> 00:11:43.310
It's also a little bit less
processing, because we don't

00:11:43.310 --> 00:11:45.980
have to do anything with
the content itself.

00:11:45.980 --> 00:11:50.850
We can just assemble this part,
give it the raw binary,

00:11:50.850 --> 00:11:55.160
along with the correct content
type, and send that.

00:11:55.160 --> 00:11:58.910
Other than actually how the body
is formatted, the rest of

00:11:58.910 --> 00:12:01.860
the code is the same as we did
with the media upload, which

00:12:01.860 --> 00:12:04.670
is we do a post to the
upload endpoint.

00:12:04.670 --> 00:12:08.930
The difference is we do
multipart instead of media.

00:12:08.930 --> 00:12:11.980
We also change the content type
to indicate that this is

00:12:11.980 --> 00:12:13.440
a multipart request.

00:12:13.440 --> 00:12:15.050
Tell it the boundary.

00:12:15.050 --> 00:12:16.910
And send the body.

00:12:16.910 --> 00:12:19.160
And of course, the onComplete
and onError are just call

00:12:19.160 --> 00:12:21.610
backs to let us know when
that request is done.

00:12:21.610 --> 00:12:23.410
And that's where we're
updating the

00:12:23.410 --> 00:12:25.920
UI to show the media.

00:12:25.920 --> 00:12:29.320
There's a third upload protocol,
which is actually

00:12:29.320 --> 00:12:31.580
really interesting,
and the preferred

00:12:31.580 --> 00:12:32.540
way for doing uploads.

00:12:32.540 --> 00:12:34.590
And it's called resumable
uploads.

00:12:34.590 --> 00:12:37.420
Unfortunately, I didn't quite
get around to writing all the

00:12:37.420 --> 00:12:39.030
code for it.

00:12:39.030 --> 00:12:42.980
But I do promise that I will
clean up the examples that we

00:12:42.980 --> 00:12:44.090
have in here today.

00:12:44.090 --> 00:12:48.580
We'll add them to the GitHub
repository on Google Drive.

00:12:48.580 --> 00:12:52.330
And we'll show you how to do all
three variants of uploads

00:12:52.330 --> 00:12:53.400
in JavaScript.

00:12:53.400 --> 00:12:56.940
And hopefully make the code
pretty reusable, so you can

00:12:56.940 --> 00:13:00.480
just take that into your app and
use it yourself or adapt

00:13:00.480 --> 00:13:01.650
it to your needs.

00:13:01.650 --> 00:13:04.680
But you can get a little bit
of a flavor for it here in

00:13:04.680 --> 00:13:07.830
some commented out code.

00:13:07.830 --> 00:13:13.170
It's very similar to multipart
in that you supply both the

00:13:13.170 --> 00:13:17.780
metadata for the file, as well
as the content itself.

00:13:17.780 --> 00:13:20.900
It's just that you actually do
this across several requests.

00:13:20.900 --> 00:13:23.920
So in the first request,
we do a post with

00:13:23.920 --> 00:13:26.280
upload type as resumable.

00:13:26.280 --> 00:13:28.990
But the content type, in this
case, is just the metadata.

00:13:28.990 --> 00:13:32.050
It's just JSON with the body.

00:13:32.050 --> 00:13:34.070
And we give it a couple of
little bits of extra

00:13:34.070 --> 00:13:38.520
information via headers, just
to tell it about the content

00:13:38.520 --> 00:13:41.190
that we're going to upload, what
its type is, and what the

00:13:41.190 --> 00:13:42.590
expected file size is.

00:13:42.590 --> 00:13:45.670
And that's via these
upload headers.

00:13:45.670 --> 00:13:49.220
And once we do that, we're going
to get a redirect to

00:13:49.220 --> 00:13:54.660
just a ephemeral URL, which
represents our upload session.

00:13:54.660 --> 00:13:56.510
Again, this is the part that I
haven't quite gotten around to

00:13:56.510 --> 00:13:57.850
implementing.

00:13:57.850 --> 00:13:59.720
But then once we do that,
we can start to

00:13:59.720 --> 00:14:02.290
upload the file in chunks.

00:14:02.290 --> 00:14:05.610
The preferred approach, when
doing resumable uploads, is to

00:14:05.610 --> 00:14:08.650
actually try and upload the
entire file at once and then

00:14:08.650 --> 00:14:11.100
resume if the connection
fails.

00:14:11.100 --> 00:14:14.550
In the case of a browser,
because there are limits on

00:14:14.550 --> 00:14:17.960
how much memory you can have,
how much of a file you can

00:14:17.960 --> 00:14:22.530
actually read into the browser
at one point in time, chunking

00:14:22.530 --> 00:14:24.290
is actually a good
option here.

00:14:24.290 --> 00:14:28.590
And so if you wanted to say, for
example, implement video

00:14:28.590 --> 00:14:31.740
upload in your application to
Drive where you have a video

00:14:31.740 --> 00:14:33.560
that could be several gigabytes
large that you might

00:14:33.560 --> 00:14:37.600
be uploading from a desktop,
it's probably something that

00:14:37.600 --> 00:14:39.410
you're going to want chunk
into smaller bits.

00:14:39.410 --> 00:14:41.560
And you can do any size chunk.

00:14:41.560 --> 00:14:45.430
The minimum is 256K.

00:14:45.430 --> 00:14:48.190
But any multiple of
that is fine.

00:14:48.190 --> 00:14:53.780
So you can do whatever
it is, two megabytes

00:14:53.780 --> 00:14:54.750
at a time per chunk.

00:14:54.750 --> 00:14:56.750
And then just incrementally
upload.

00:14:56.750 --> 00:15:00.380
And the nice thing is if it
fails, or somebody's on their

00:15:00.380 --> 00:15:01.760
laptop and they lose
their internet

00:15:01.760 --> 00:15:02.630
connection, it's fine.

00:15:02.630 --> 00:15:06.450
You actually have the course
of about 24 hours or so to

00:15:06.450 --> 00:15:08.190
actually resume that upload.

00:15:08.190 --> 00:15:12.240
And so that actually works
really nice for packaged apps.

00:15:12.240 --> 00:15:13.860
You're on a Chromebook, and you
just happen to be going

00:15:13.860 --> 00:15:17.030
around and maybe you're in
and out of connectivity.

00:15:17.030 --> 00:15:21.240
But you can get that really,
really nice upload experience

00:15:21.240 --> 00:15:25.730
into your app just using built
in browser features.

00:15:25.730 --> 00:15:28.570
So again, I'll actually finish
this implementation hopefully

00:15:28.570 --> 00:15:29.150
later today.

00:15:29.150 --> 00:15:33.020
Get that up on GitHub for
everyone to take a look at.

00:15:33.020 --> 00:15:34.510
And hopefully this is of use.

00:15:34.510 --> 00:15:37.980
I know we've seen a lot of
interest on this in Stack

00:15:37.980 --> 00:15:41.020
Overflow, a lot of questions
about how do you do upload in

00:15:41.020 --> 00:15:42.810
JavaScript with CORS.

00:15:42.810 --> 00:15:47.620
Great news is, starting today,
you can do that.

00:15:47.620 --> 00:15:50.970
It's actually pretty
easy to do.

00:15:50.970 --> 00:15:53.140
So that's all I really
have for CORS.

00:15:53.140 --> 00:15:56.830
For next week, [INAUDIBLE]
is going to be in.

00:15:56.830 --> 00:15:59.620
And she will be talking about
a recent sample that she

00:15:59.620 --> 00:16:04.560
posted also on our
github.com/googledrive

00:16:04.560 --> 00:16:09.130
repositories, which is a really
cool cross client

00:16:09.130 --> 00:16:11.080
authentication and authorization
example that

00:16:11.080 --> 00:16:15.770
shows how to do sign in on
mobile devices, and have that

00:16:15.770 --> 00:16:17.600
identity and your authorization
propagate back

00:16:17.600 --> 00:16:21.120
to your backend server, so you
can use APIs like Drive.

00:16:21.120 --> 00:16:23.070
It's really a cool sample.

00:16:23.070 --> 00:16:27.710
It's definitely a topic that
is a little tricky

00:16:27.710 --> 00:16:29.390
to do and get right.

00:16:29.390 --> 00:16:30.860
But again, she'll give
you a nice walk

00:16:30.860 --> 00:16:32.150
through of how that works.

00:16:32.150 --> 00:16:35.420
We'll be back with hopefully
a new app of the week.

00:16:35.420 --> 00:16:38.330
And that's about it.

00:16:38.330 --> 00:16:43.391
Again, if you have any
questions, come find us on the

00:16:43.391 --> 00:16:45.940
Google Drive SDK developers
community or Stack

00:16:45.940 --> 00:16:48.850
Overflow, of course.

00:16:48.850 --> 00:16:50.640
We'd love to get
your feedback.

00:16:50.640 --> 00:16:53.080
How you're using some of
these new features.

00:16:53.080 --> 00:16:55.360
And of course, always want to
know what you're building.

00:16:55.360 --> 00:16:57.210
So that's all for me today.

00:16:57.210 --> 00:16:58.460
Thank you very much.

00:17:08.090 --> 00:17:59.820
[MUSIC PLAYING]

