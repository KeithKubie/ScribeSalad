WEBVTT
Kind: captions
Language: en

00:00:06.462 --> 00:00:08.693
Paco has evolutionalized
his application

00:00:08.693 --> 00:00:10.330
with more features.

00:00:10.330 --> 00:00:12.924
In the process,
he has structured

00:00:12.924 --> 00:00:14.990
and organized the code
using the WebApp2 framework.

00:00:15.495 --> 00:00:18.297
Until now, all his work
has been concentrated

00:00:18.297 --> 00:00:20.594
in Python root code files,

00:00:20.627 --> 00:00:23.165
where there are
also html fragments

00:00:23.165 --> 00:00:25.330
in the form
of embedded chain text.

00:00:26.066 --> 00:00:29.495
As a result, the html content
mixed with root code

00:00:29.495 --> 00:00:31.330
tends to easily
become disorganized

00:00:31.330 --> 00:00:34.033
and makes application
maintenance difficult.

00:00:34.132 --> 00:00:36.231
This problem is solved
by incorporating

00:00:36.231 --> 00:00:37.792
a template engine.

00:00:38.660 --> 00:00:40.297
This will help us to maintain

00:00:40.297 --> 00:00:42.429
an organized file structure

00:00:42.429 --> 00:00:45.363
as well as providing us
with friendly syntax

00:00:45.363 --> 00:00:48.924
for interacting with html
content variables and blocks.

00:00:49.792 --> 00:00:52.363
It will also help us
to separate responsibilities.

00:00:52.363 --> 00:00:54.858
For example,
Paco's team designer

00:00:54.858 --> 00:00:56.858
will only have access
to the templates,

00:00:56.858 --> 00:00:58.198
but not the source code.

00:00:58.627 --> 00:01:00.264
He will be able to use
familiar tools

00:01:00.264 --> 00:01:02.495
to edit and design html.

00:01:03.561 --> 00:01:06.033
There are many
template engines for Python.

00:01:06.132 --> 00:01:08.198
Jinja2 is one of the most used.

00:01:08.363 --> 00:01:11.231
It's syntax is simple, clear
and also expressive.

00:01:11.231 --> 00:01:14.858
And it comes included
with Google App Engine SDK.

00:01:15.924 --> 00:01:18.693
In this lesson,
we will incorporate

00:01:18.693 --> 00:01:20.561
the census application
with Jinja2 templates,

00:01:20.627 --> 00:01:22.660
and we will change
the structure of existing code

00:01:22.660 --> 00:01:25.231
to separate
the visual presentation

00:01:25.231 --> 00:01:26.726
and the functional logic
into levels.

00:01:31.825 --> 00:01:34.363
Since Jinja 2
is an included library,

00:01:34.363 --> 00:01:38.198
Paco modifies the library section
in the file app.yaml,

00:01:38.198 --> 00:01:40.858
adding the latest version
of Jinja2.

00:01:41.132 --> 00:01:43.231
With this addition,
Paco will be able to call

00:01:43.231 --> 00:01:44.627
the classes and functions

00:01:44.627 --> 00:01:46.825
of the latest available version
of Jinja2

00:01:46.825 --> 00:01:49.594
directly from
his application code.

00:01:50.099 --> 00:01:53.726
In Jinja2 there's
a central environment object

00:01:53.726 --> 00:01:56.297
that will indicate
the configuration total objects

00:01:56.297 --> 00:01:57.825
and that will be used to upload

00:01:57.858 --> 00:02:00.363
file system templates to memory.

00:02:00.594 --> 00:02:03.693
Paco creates this object
by starting the file main.py

00:02:03.924 --> 00:02:07.066
before defining the handlers
since they will be used.

00:02:07.066 --> 00:02:09.099
As a good safety procedure,

00:02:09.099 --> 00:02:10.594
upon starting
the environment,

00:02:10.594 --> 00:02:13.858
an extension will be prepared
to activate the autoescape

00:02:13.858 --> 00:02:15.363
upon rendering values.

00:02:16.099 --> 00:02:18.528
On occasions the textual value
of a variable

00:02:18.528 --> 00:02:19.957
needs to be modified.

00:02:19.990 --> 00:02:22.396
For example, the use
of uppercase and lowercase

00:02:22.396 --> 00:02:23.495
in chains of text,

00:02:23.495 --> 00:02:25.132
or the format
of numerical values.

00:02:25.495 --> 00:02:27.825
For this,
Jinja2 provides the filters.

00:02:32.924 --> 00:02:35.792
Paco modifies the handler
identitypage.get

00:02:36.132 --> 00:02:38.660
by moving the text that
was printing in the response

00:02:38.660 --> 00:02:41.099
to a new separate html file

00:02:41.099 --> 00:02:43.594
called identity_form.html

00:02:43.594 --> 00:02:46.528
in the template directory
where, from now on,

00:02:46.528 --> 00:02:48.099
templates will be found.

00:02:48.264 --> 00:02:50.033
This template
contains the format

00:02:50.033 --> 00:02:51.693
for identifying users.

00:02:51.693 --> 00:02:54.495
But Paco also wants
to show the current date

00:02:54.495 --> 00:02:56.660
and the list
of types of documents

00:02:56.693 --> 00:02:58.264
that he defined as a constant.

00:02:58.726 --> 00:03:01.924
To do this, Paco needs to
upload the environment template

00:03:01.924 --> 00:03:03.957
calling the method Get Template,

00:03:03.957 --> 00:03:06.495
passing as a parameter

00:03:06.495 --> 00:03:07.594
the name of the recently
created file.

00:03:07.858 --> 00:03:10.396
Paco will combine the template
that defines two variables

00:03:10.396 --> 00:03:12.693
with the dynamic data
generated by the application,

00:03:13.099 --> 00:03:15.462
calling the render method
and passing a dictionary

00:03:15.462 --> 00:03:17.429
with the pairs as parameter.

00:03:17.429 --> 00:03:19.429
The dictionary defines
the names of the variables

00:03:19.429 --> 00:03:21.858
in they keys
and their respective values.

00:03:21.891 --> 00:03:22.990
In our case,

00:03:22.990 --> 00:03:25.198
the current date calculated
with the standard library

00:03:25.198 --> 00:03:27.726
and the constant
with the types of documents.

00:03:32.396 --> 00:03:36.099
The templates in Jija2 not only
have ordinary html,

00:03:36.099 --> 00:03:39.330
they also have instructions
using a special syntax

00:03:39.330 --> 00:03:41.528
that Paco needs
to become familiar with.

00:03:41.858 --> 00:03:43.924
The variables found
between double brackets

00:03:43.924 --> 00:03:46.561
are going to be transformed
to their textual value.

00:03:46.759 --> 00:03:48.594
So, upon adding this expression,

00:03:48.594 --> 00:03:50.264
the date will be displayed

00:03:50.264 --> 00:03:52.924
that previously passed
to the template as a variable.

00:03:53.198 --> 00:03:55.396
As for the dictionary
with the types of documents,

00:03:55.396 --> 00:03:58.627
it's different, since it needs
to run each of the items,

00:03:58.693 --> 00:04:00.891
showing them as options
on the list.

00:04:01.561 --> 00:04:03.924
The control structure For
included in Jina2

00:04:03.924 --> 00:04:05.297
allows this.

00:04:05.462 --> 00:04:06.858
The syntax in this case

00:04:06.858 --> 00:04:08.957
consists in surrounding
the whole sentence

00:04:08.957 --> 00:04:11.066
between blocks
with this structure.

00:04:11.429 --> 00:04:13.924
The interaction
of the dictionary is similar

00:04:13.924 --> 00:04:15.759
to how code
would be done in Python.

00:04:16.099 --> 00:04:18.759
There are also
conditional control structures

00:04:18.759 --> 00:04:20.693
with If and Else.

00:04:20.693 --> 00:04:22.891
To show one section or another

00:04:22.891 --> 00:04:25.528
depending
on the expression value,

00:04:25.957 --> 00:04:28.825
Paco will use it to show
a message of success

00:04:28.825 --> 00:04:31.891
confirming the entered data
when the checkbox is selected,

00:04:31.891 --> 00:04:34.660
and a message of error
when not selected.

00:04:40.891 --> 00:04:42.726
The filters are applied
to the variables

00:04:42.726 --> 00:04:45.429
separated by
the backslash character

00:04:45.429 --> 00:04:48.033
and can have parameters
between parentheses.

00:04:48.297 --> 00:04:50.528
Multiple filters
can be linked together,

00:04:50.528 --> 00:04:52.198
applying one filter

00:04:52.198 --> 00:04:53.924
to the next.

00:04:54.297 --> 00:04:58.264
Jinja2 includes various useful
filters that are commonly used,

00:04:58.594 --> 00:05:00.693
however, it is also possible

00:05:00.693 --> 00:05:02.594
to create personalized filters

00:05:02.594 --> 00:05:04.594
according to our needs.

00:05:04.627 --> 00:05:07.363
Paco notices that the items
on the document type list

00:05:07.363 --> 00:05:10.198
are not in order,
so he decides to apply

00:05:10.198 --> 00:05:11.693
the dicsort filter to do it.

00:05:17.759 --> 00:05:19.957
With the template
files finished,

00:05:19.957 --> 00:05:21.429
Paco begins to realize

00:05:21.429 --> 00:05:23.726
that they all have
sections in common,

00:05:23.759 --> 00:05:25.693
such as the heading
and the footer.

00:05:25.693 --> 00:05:27.627
To make changes
in these sections

00:05:27.660 --> 00:05:29.924
he needs to update
each one of the files

00:05:29.924 --> 00:05:31.528
with the new information.

00:05:31.528 --> 00:05:33.693
This proves to be inefficient,
prone to errors

00:05:33.693 --> 00:05:36.396
and tends to lose consistency
throughout the site.

00:05:36.396 --> 00:05:38.891
To avoid this scenario,
Jinja2 offers Paco

00:05:38.891 --> 00:05:40.396
template inheritance,

00:05:40.396 --> 00:05:43.363
which allows him to build
a base skeleton template

00:05:43.363 --> 00:05:45.726
that contains the common
elements of the site

00:05:45.726 --> 00:05:47.858
and defines blocks
that the younger templates

00:05:47.858 --> 00:05:49.198
can write over.

00:05:49.198 --> 00:05:52.627
Paco creates a new file that
will serve as the base template

00:05:52.660 --> 00:05:55.099
with the name base.html.

00:05:55.429 --> 00:05:58.198
There the html skeleton
structure is defined

00:05:58.198 --> 00:06:00.528
that all the templates
have in common,

00:06:00.561 --> 00:06:03.891
as well as the sections or
blocks that can be overwritten

00:06:03.891 --> 00:06:05.957
defined with
the block directive.

00:06:08.165 --> 00:06:10.363
Existing templates
now need to be inherited

00:06:10.363 --> 00:06:11.825
from this base template.

00:06:11.891 --> 00:06:14.693
To do this, they start
with the extense directive

00:06:14.693 --> 00:06:17.726
and for each one of the sections
to be overwritten

00:06:17.726 --> 00:06:20.495
the same directive block
will be used again

00:06:20.495 --> 00:06:22.297
with the appropriate content.

00:06:22.759 --> 00:06:25.429
In case it's not provided,
the content written

00:06:25.429 --> 00:06:27.495
on the base template
will be used as default.

00:06:29.033 --> 00:06:31.231
By using templates,
Paco's team

00:06:31.231 --> 00:06:32.528
is even more productive.

00:06:32.528 --> 00:06:35.363
It's easier to work as a team
and make less mistakes

00:06:35.363 --> 00:06:37.429
by having the visual presentation

00:06:37.429 --> 00:06:38.660
separated from
the functional logic.

00:06:39.066 --> 00:06:41.627
For example, the designer
will be exclusively in charge of

00:06:41.627 --> 00:06:44.462
editing the template html files

00:06:44.462 --> 00:06:46.495
while Paco
and the other developers

00:06:46.495 --> 00:06:48.561
will be in charge
of the Python code.

00:06:48.924 --> 00:06:51.627
However, the price model
for Google App Engine

00:06:51.627 --> 00:06:53.660
functions as
a low demand scheme,

00:06:53.660 --> 00:06:57.033
meaning, only the resources
consumed are charged.

00:06:58.231 --> 00:07:00.891
We have covered the basic
sections of Google App Engine.

00:07:00.891 --> 00:07:03.759
With what you have learned
in this version of Hackademy

00:07:03.792 --> 00:07:05.396
you will be able to create
simple applications

00:07:05.396 --> 00:07:06.891
on this platform.

00:07:07.033 --> 00:07:09.264
We invite you to explore
the official documents

00:07:09.264 --> 00:07:10.924
and you will discover

00:07:10.924 --> 00:07:12.528
that they will allow you
to bring your application

00:07:12.528 --> 00:07:13.891
to the next level.

00:07:14.297 --> 00:07:16.495
Thank you for joining us
in this course.

00:07:16.528 --> 00:07:17.825
We are David and Maciek,

00:07:17.825 --> 00:07:19.825
experts in web application
development.

00:07:19.858 --> 00:07:21.330
We'll see you next time.

00:07:21.363 --> 00:07:22.462
Keep programming!

