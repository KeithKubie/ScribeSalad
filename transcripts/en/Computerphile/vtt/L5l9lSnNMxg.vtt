WEBVTT
Kind: captions
Language: en

00:00:01.100 --> 00:00:06.240
Cross site scripting is the number one vulnerability on the web today.

00:00:07.320 --> 00:00:11.420
If you are writing any kind of web software, and you don't know about this,

00:00:12.020 --> 00:00:13.200
you should know this!

00:00:13.200 --> 00:00:18.040
And if you are the kind of person who likes to play about with websites, and break them,

00:00:18.040 --> 00:00:22.020
in a definitely legal manner, you should know this.

00:00:24.880 --> 00:00:28.140
To explain it, we have to go back to the early days of the internet.

00:00:28.140 --> 00:00:33.880
We have to go back to Tim Berners-Lee sitting at CERN, making up how the web will work.

00:00:33.880 --> 00:00:38.960
The web is based on something called HTML, HyperText Markup Language.

00:00:38.960 --> 00:00:42.500
Most people who are watching this, I think, will know how this works,

00:00:42.500 --> 00:00:45.460
but just very quickly, it means that you have tags.

00:00:45.460 --> 00:00:49.540
An HTML document starts with angle brackets like this,

00:00:49.540 --> 00:00:51.960
and closes with angle brackets like this.

00:00:51.960 --> 00:00:55.800
Anything between angle brackets is read as an instruction.

00:00:55.800 --> 00:00:57.300
So if I wanna put some text in bold,

00:00:57.300 --> 00:01:04.760
I put a &lt;b&gt; tag and a close &lt;/b&gt; tag, and I put some text in the middle, and that becomes bold.

00:01:04.760 --> 00:01:07.520
This is why, and I know you've been getting comments about this,

00:01:07.520 --> 00:01:12.220
the ending graphic on Computerphile should have a little slash like this one here,

00:01:12.220 --> 00:01:16.420
to make it over. Otherwise you're kind of saying that you're starting a new one.

00:01:16.420 --> 00:01:19.520
And, no doubt, all sorts of pedantic people have been emailing you about that.

00:01:19.520 --> 00:01:23.740
Those angle brackets, wherever they are in the document, mean "an instruction is coming here."

00:01:23.740 --> 00:01:28.240
So, what do you do if you want to put an angle bracket, which is basically a less-than sign,

00:01:28.240 --> 00:01:31.560
into your document? Well, you do something called escaping.

00:01:31.560 --> 00:01:36.880
Instead of sending the angle bracket, you send an ampersand, and then "lt" for less than,

00:01:36.880 --> 00:01:43.300
and then a semicolon. And that means, when the user actually reads it, it will become an angle bracket.

00:01:43.300 --> 00:01:47.200
Great. Wonderful. And that works fine.

00:01:47.200 --> 00:01:50.160
It means in the old days of the world wide web, you could send a request,

00:01:50.160 --> 00:01:53.520
and the document would come back, and the angle brackets would not mess everything up.

00:01:53.520 --> 00:01:59.860
Then we move on a bit, and we start coming back with more interactive things.

00:01:59.860 --> 00:02:03.460
Someone comes along and invents JavaScript.

00:02:03.460 --> 00:02:08.120
And JavaScript is a programming language that sits in the middle of web pages.

00:02:08.120 --> 00:02:13.560
You start with a tag in the middle of your document. So you've already got your HTML here and here.

00:02:15.420 --> 00:02:20.040
You start with a &lt;script&gt; tag. And then everything stops.

00:02:20.040 --> 00:02:26.360
You've got a closing &lt;/script&gt; tag down here. Nothing in this section will actually appear on the user's screen.

00:02:26.360 --> 00:02:31.100
What you have here is a completely separate programming language.

00:02:31.100 --> 00:02:36.360
You can declare variables. You can do calculations. That's vaguely sensible.

00:02:36.360 --> 00:02:41.420
You can create an entire language there, and that language can affect the document.

00:02:41.420 --> 00:02:46.340
So you can take the output from that, and you can put it into the rest of the text.

00:02:46.340 --> 00:02:52.660
So if you have, for example, an email client. Gmail uses this. Gmail uses incredible amounts of this.

00:02:52.660 --> 00:02:56.180
Because when you type in things, it sends it to the server.

00:02:56.180 --> 00:02:59.680
You don't have to send "save" like in the early days of the web.

00:02:59.680 --> 00:03:02.740
And then it would take a second to go there and a second to come back.

00:03:02.740 --> 00:03:07.100
It just quietly does it all in the background. It's really really powerful.

00:03:07.100 --> 00:03:12.000
It's the way that everything big, everything interactive, works on the web now.

00:03:12.000 --> 00:03:16.980
You can design entire games in JavaScript. And all it's doing is creating a web page,

00:03:16.980 --> 00:03:21.340
and then just moving bits about. The trouble is that JavaScript is dangerous.

00:03:21.340 --> 00:03:26.440
It can do anything to the web page. And rightly so - that's how Gmail works.

00:03:26.440 --> 00:03:31.340
But imagine if you could get whatever JavaScript you wanted to do anything with, say,

00:03:31.340 --> 00:03:37.440
the login page of an online bank. You could tell it that, instead of just taking the username and password

00:03:37.440 --> 00:03:42.600
and sending them to the bank's servers, first, it should send them to someone else.

00:03:42.600 --> 00:03:47.000
And when they've got them, and the user won't know that's happened, then it should log people into the bank.

00:03:47.000 --> 00:03:53.780
Or you could, say, instead of sending the words people are actually typing to the web,

00:03:53.780 --> 00:03:59.240
ignore them. Just send Rick Astley instead. This is how MySpace worms spread,

00:03:59.240 --> 00:04:03.240
because you would type in the code, and it would appear,

00:04:03.240 --> 00:04:06.220
because MySpace hadn't quite filtered JavaScript properly,

00:04:06.220 --> 00:04:08.660
and that's the cross site scripting bug I'll get to in a minute.

00:04:08.660 --> 00:04:12.860
You could write anything you wanted in there, and every time someone looked at that MySpace page,

00:04:12.860 --> 00:04:18.640
the code would run! And it would say, hey, go do stuff with their profile instead.

00:04:18.640 --> 00:04:23.740
And it would. JavaScript is dangerous because it lets you do anything on a web page.

00:04:23.740 --> 00:04:25.680
So, how do you get it in there?

00:04:25.680 --> 00:04:31.060
Let's go to, say, Google. Here's Google, here's a search bar.

00:04:31.060 --> 00:04:38.480
Whatever I type in that search bar, "test", will probably appear on the next page here: "test".

00:04:38.480 --> 00:04:40.480
And it'll also appear here a couple of times, and here.

00:04:40.480 --> 00:04:45.360
Whatever I type in here, appears on this web page. That's fine.

00:04:45.360 --> 00:04:50.960
What happens if, instead, I type in an italic tag?

00:04:50.960 --> 00:04:56.160
Well, what won't happen is that Google will send the whole page in italics.

00:04:57.440 --> 00:05:02.880
Because what they have done is they have converted it into this less-than. Which is great.

00:05:02.880 --> 00:05:07.840
Let's imagine that instead of typing "test", or instead of typing that,

00:05:07.840 --> 00:05:15.080
instead I type in &lt;script&gt; and then some code. And as long as I write valid code there,

00:05:15.080 --> 00:05:18.400
and as long as the box is big enough, and there's a few other hacks you can do to make that work,

00:05:18.400 --> 00:05:23.560
if, as a web developer, you forget to do that little trick

00:05:23.560 --> 00:05:28.240
that changes them from less-than signs to that code that means "put a less-than sign in there,"

00:05:28.240 --> 00:05:33.460
your web server puts the page out, and the web browser looks at that and goes,

00:05:33.460 --> 00:05:38.780
"That is JavaScript code! I'm gonna run that!" And it does.

00:05:38.780 --> 00:05:46.020
And you can use that for entertainment. I have previously used that at least one place I shouldn't.

00:05:46.020 --> 00:05:49.120
And of course it doesn't do any lasting damage.

00:05:49.120 --> 00:05:54.040
All it does is, in that case, change a load of the words in the web site.

00:05:54.040 --> 00:05:57.120
It's only visible to the one person I've sent it to.

00:05:57.120 --> 00:06:05.480
Which is, you know, not technically entirely legal under the Computer Misuse Act, but no one pressed charges.

00:06:05.480 --> 00:06:10.520
All I'm doing there is playing about. But the more sinister stuff you can do with JavaScript,

00:06:10.520 --> 00:06:14.740
quietly stealing passwords and user information and letting you log in as other people,

00:06:14.740 --> 00:06:21.820
all of these things are entirely possible by just letting unescaped JavaScript get into your web page.

00:06:21.820 --> 00:06:24.520
And here's the thing. Here's the really important thing.

00:06:24.520 --> 00:06:29.760
All you need to do is mess up once, anywhere on your site,

00:06:29.760 --> 00:06:33.840
with any user input. Something that you think is completely innocuous

00:06:33.840 --> 00:06:36.620
because someone is just typing in their age.

00:06:36.620 --> 00:06:41.340
If you forget to escape that, and someone types in a little bit of code there instead,

00:06:41.340 --> 00:06:45.320
well, congratulations, your web site is now completely vulnerable.

00:06:45.320 --> 00:06:50.740
And this has happened regularly, in Google, in Facebook, in every single big site,

00:06:50.740 --> 00:06:55.640
because it's so easy to forget. Even when every single framework out there,

00:06:55.640 --> 00:07:00.400
every single tool to help web developers, has something that goes, "Guys! You've missed this!"

00:07:00.400 --> 00:07:04.780
"You've missed this! Do you really mean to do that? Are you sure you really mean to do that?"

00:07:04.780 --> 00:07:10.600
You can still mess it up. Even the big guys mess this up. And they have what are known as "bug bounties."

00:07:10.600 --> 00:07:16.340
They will pay you money if you find something like this and then responsibly tell them.

00:07:16.340 --> 00:07:21.840
You don't go and tell the world. If you can do that, I think someone earned something like $12,000

00:07:21.840 --> 00:07:27.680
for finding a bug in Facebook that let people do this. So, rather than try and break things,

00:07:27.680 --> 00:07:30.800
try and mend them. Try and find something like this.

00:07:30.800 --> 00:07:33.940
If this is your thing, if this is your, something that you look at and go,

00:07:33.940 --> 00:07:37.220
"Oh, I can try and break things with this!", do it.

00:07:37.220 --> 00:07:40.680
And then look at the big guys, and try and earn some money with it instead.

00:07:40.680 --> 00:07:44.320
Cause they will thank you, they will put your name in lights on your site,

00:07:44.320 --> 00:07:45.500
on their site,

00:07:45.500 --> 00:07:51.500
and they will pay you money. Because the alternative is the bad guys getting this,

00:07:51.500 --> 00:07:55.640
and the next time you log in to Google, your password not going where it's supposed to.

00:08:01.200 --> 00:08:04.720
We'd like to thank audible.com for their support of this video.

00:08:04.720 --> 00:08:07.980
And if you'd like to download one of their vast range of audio books,

00:08:07.980 --> 00:08:12.620
you can go to audible.com/computerphile and get one for free.

00:08:12.620 --> 00:08:15.800
We always like to recommend a book that you could use for your freebie,

00:08:15.800 --> 00:08:18.660
and I asked Sean who makes our videos what he'd like to recommend,

00:08:18.660 --> 00:08:24.620
and today he's gone for "Flat Earth News" by Nick Davies, which is an excellent book, well worth a listen.

00:08:24.620 --> 00:08:30.200
So, audible.com/computerphile, check it out, get your free book, and thank you so much to them

00:08:30.200 --> 00:08:32.480
for their support of our films.

