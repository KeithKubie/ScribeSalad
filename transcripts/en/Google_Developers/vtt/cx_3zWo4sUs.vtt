WEBVTT
Kind: captions
Language: en

00:00:01.790 --> 00:00:04.120
There are two other functions
I'll consider that provide a

00:00:04.120 --> 00:00:06.910
brief overview of
a data frame.

00:00:06.910 --> 00:00:09.010
But first, I'll load
in data set--

00:00:09.010 --> 00:00:11.670
this time, stock market data.

00:00:11.670 --> 00:00:14.130
I've already navigated to the
proper folder, and I can see

00:00:14.130 --> 00:00:16.490
the file in my current working
directory if I use the

00:00:16.490 --> 00:00:18.740
list.files function.

00:00:18.740 --> 00:00:21.460
This particular data set is
saved as a tab-delimited text

00:00:21.460 --> 00:00:24.500
file, so to import it into
R, I'm going to use the

00:00:24.500 --> 00:00:27.130
read.delim function.

00:00:27.130 --> 00:00:29.630
In the last video, we saw how
to load in CSV files, and in

00:00:29.630 --> 00:00:31.240
this video we've seen
now how to load in

00:00:31.240 --> 00:00:33.530
tab-delimited files.

00:00:33.530 --> 00:00:35.950
If you aren't sure how to load
in your particular data set,

00:00:35.950 --> 00:00:37.540
Google your question.

00:00:37.540 --> 00:00:39.360
There are many online resources
about loading data

00:00:39.360 --> 00:00:42.790
into R that are likely
to be very useful.

00:00:42.790 --> 00:00:44.460
All right, back to
the data set.

00:00:44.460 --> 00:00:47.130
I'll take a look at the first
and the last three rows.

00:00:47.130 --> 00:00:49.440
I can also get a better overview
of the data set by

00:00:49.440 --> 00:00:52.680
using the STR function that
provides a breakdown of the

00:00:52.680 --> 00:00:54.650
object structure.

00:00:54.650 --> 00:00:57.530
Here, I can see that stocks is
an object with over 70,000

00:00:57.530 --> 00:01:00.020
rows and eight variables.

00:01:00.020 --> 00:01:02.450
I can also see each of the names
of each of the variables

00:01:02.450 --> 00:01:04.480
and the first several
observations to get a sense of

00:01:04.480 --> 00:01:06.210
what each contains.

00:01:06.210 --> 00:01:08.930
Note that observations for
factor variables may look like

00:01:08.930 --> 00:01:11.180
numerical variables.

00:01:11.180 --> 00:01:13.310
Another helpful function to get
an alternative look at an

00:01:13.310 --> 00:01:16.520
R object is the summary
function.

00:01:16.520 --> 00:01:19.190
In the case of a data frame, the
summary object returns a

00:01:19.190 --> 00:01:21.260
summary of each column.

00:01:21.260 --> 00:01:23.650
Notice that there are NA values
represented in some of

00:01:23.650 --> 00:01:24.615
the columns.

00:01:24.615 --> 00:01:28.700
In R, NA means that there's a
missing observation, and here

00:01:28.700 --> 00:01:30.370
it lists a number of missing
observations for

00:01:30.370 --> 00:01:32.810
each of these columns.

00:01:32.810 --> 00:01:35.490
Note that the STR and summary
functions are not specific to

00:01:35.490 --> 00:01:36.750
data frames.

00:01:36.750 --> 00:01:38.970
They can be applied to any R
object to get a quick peek

00:01:38.970 --> 00:01:42.140
about the object and its
characteristics.

00:01:42.140 --> 00:01:43.790
You might have noticed that one
of the variables in the

00:01:43.790 --> 00:01:45.090
stock data set is a date.

00:01:45.090 --> 00:01:47.830
I'm going to take a closer look
at the date and print out

00:01:47.830 --> 00:01:51.120
the first 20 values.

00:01:51.120 --> 00:01:53.320
If I look carefully, I can
see there's also a levels

00:01:53.320 --> 00:01:56.160
attribute associated
with these dates.

00:01:56.160 --> 00:01:58.220
That means that R has
interpreted this field as

00:01:58.220 --> 00:01:59.325
being a factor.

00:01:59.325 --> 00:02:01.230
It would be much more useful
to keep this as

00:02:01.230 --> 00:02:03.370
an actual date object.

00:02:03.370 --> 00:02:06.560
In this case, the dates are
formatted as day, month, and

00:02:06.560 --> 00:02:10.330
year, and in such cases, I want
to examine this variable

00:02:10.330 --> 00:02:13.760
as a date object using
the as_Date function.

00:02:13.760 --> 00:02:18.290
I also need to specify the
format of the date.

00:02:18.290 --> 00:02:21.060
There are many different ways
to format dates, so you may

00:02:21.060 --> 00:02:24.730
need to look up how to specify
the date formats you run into.

00:02:24.730 --> 00:02:27.110
For this purpose, you'll
probably want to look in the

00:02:27.110 --> 00:02:30.390
STRP time function help file.

00:02:30.390 --> 00:02:36.440
You can do this by typing
?strptime and hitting enter.

00:02:36.440 --> 00:02:38.500
I'm going to save the formatted
dates in an object

00:02:38.500 --> 00:02:39.750
called s.date.

00:02:41.560 --> 00:02:43.750
While having this date object
is helpful, I really would

00:02:43.750 --> 00:02:46.820
like to replace the original
date object with this one.

00:02:46.820 --> 00:02:48.660
In fact, it actually would have
been much easier had I

00:02:48.660 --> 00:02:51.500
just skipped the step of
creating s.date and just saved

00:02:51.500 --> 00:02:53.430
the modified version over
the date object

00:02:53.430 --> 00:02:55.270
right from the start.

00:02:55.270 --> 00:02:57.460
Now if I look at the stock
objects again with the head

00:02:57.460 --> 00:03:00.220
function, I can see that the
date variable is now formatted

00:03:00.220 --> 00:03:03.300
in the standard way, starting
with all four digits of the

00:03:03.300 --> 00:03:06.980
year, then the next two digits
for the month, and then the

00:03:06.980 --> 00:03:10.290
last two digits being
the days.

00:03:10.290 --> 00:03:12.430
You might wonder, why go
to all this trouble

00:03:12.430 --> 00:03:13.710
to format the date?

00:03:13.710 --> 00:03:15.430
Why not just leave
it as a factor or

00:03:15.430 --> 00:03:17.950
just set it as a character?

00:03:17.950 --> 00:03:20.050
First, you might like to examine
the differences of

00:03:20.050 --> 00:03:21.610
dates to learn the
proximity of two

00:03:21.610 --> 00:03:23.470
observations to each other.

00:03:23.470 --> 00:03:26.200
Second, if you generate a time
series plot that makes use of

00:03:26.200 --> 00:03:28.810
the date object, R will do
its part to help make

00:03:28.810 --> 00:03:30.780
the plot look nice.

00:03:30.780 --> 00:03:32.950
For example, here I'll plot the
time series of the stock

00:03:32.950 --> 00:03:34.940
price for Google.

00:03:34.940 --> 00:03:36.710
I'm specifying the date
as a variable for

00:03:36.710 --> 00:03:38.320
the horizontal axis.

00:03:38.320 --> 00:03:41.210
And since this formatted as
a date, R will use this

00:03:41.210 --> 00:03:44.420
information and plot the years
all along the axes.

00:03:44.420 --> 00:03:47.240
Had I not converted the date
over to a date object, the

00:03:47.240 --> 00:03:50.360
plot wouldn't have looked
nearly as nice.

00:03:50.360 --> 00:03:52.440
There are several other reasons
to properly process

00:03:52.440 --> 00:03:56.050
and format dates in R, but the
general reason is that doing

00:03:56.050 --> 00:03:58.825
so communicates the data
structure accurately, and this

00:03:58.825 --> 00:04:01.440
will make it easier for
you and others to use

00:04:01.440 --> 00:04:05.350
and reuse your code.

00:04:05.350 --> 00:04:08.380
In the next video, we'll talk
about if statements and also

00:04:08.380 --> 00:04:09.630
the which function.

