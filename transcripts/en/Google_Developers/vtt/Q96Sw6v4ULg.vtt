WEBVTT
Kind: captions
Language: en

00:00:06.547 --> 00:00:07.380
WAYNE PIEKARSKI: Hi.

00:00:07.380 --> 00:00:08.880
Did you know that
developers can now

00:00:08.880 --> 00:00:11.540
add Android Auto support
to their applications?

00:00:11.540 --> 00:00:14.015
I'm Wayne Piekarski from
Google, and in this Devbyte,

00:00:14.015 --> 00:00:15.390
I'm going to show
you how easy it

00:00:15.390 --> 00:00:18.670
is to modify your existing
audio application to work

00:00:18.670 --> 00:00:22.330
with the new media APIs that'll
make it work with Android Auto.

00:00:22.330 --> 00:00:25.910
Your application, with its audio
content, will run on the phone,

00:00:25.910 --> 00:00:27.420
but it'll be heard
and controlled

00:00:27.420 --> 00:00:30.720
by the sound system
built into your car.

00:00:30.720 --> 00:00:32.860
The Android Auto software
runs on your phone

00:00:32.860 --> 00:00:35.400
and is responsible for drawing
the user interface that

00:00:35.400 --> 00:00:37.350
appears on the
vehicle's display.

00:00:37.350 --> 00:00:40.925
The phone controls the vehicle
display via a USB cable.

00:00:40.925 --> 00:00:43.300
And you should check out the
Introduction to Android Auto

00:00:43.300 --> 00:00:46.409
Devbyte to find out more
about how this works.

00:00:46.409 --> 00:00:48.700
I'm going to show you how to
extend your existing music

00:00:48.700 --> 00:00:50.971
application to work
with Android Auto.

00:00:50.971 --> 00:00:52.470
Let's say you've
got a music playing

00:00:52.470 --> 00:00:55.750
app that runs on the phone that
contains a library of music.

00:00:55.750 --> 00:00:59.210
You would want your users to be
able to select and play music

00:00:59.210 --> 00:01:02.550
from the car controls without
having to use their phone,

00:01:02.550 --> 00:01:05.280
even though the phone is
where everything is processed.

00:01:05.280 --> 00:01:08.260
Your app needs to tell Android
Auto about this music library

00:01:08.260 --> 00:01:10.460
so that it can present
the media information

00:01:10.460 --> 00:01:12.810
onto the screen along
with the album artwork.

00:01:12.810 --> 00:01:14.360
And your app needs
to be able, also,

00:01:14.360 --> 00:01:16.610
to respond to controls
on the steering wheel,

00:01:16.610 --> 00:01:19.862
such as Play, Stop, Next
Track, and so forth.

00:01:19.862 --> 00:01:21.320
Let me show you a
quick demo of how

00:01:21.320 --> 00:01:23.740
this looks like from
the user's perspective.

00:01:23.740 --> 00:01:25.240
What we're going
to do now is launch

00:01:25.240 --> 00:01:30.370
the music app, which then allows
us to pick it from a playlist,

00:01:30.370 --> 00:01:33.380
go to the genre, and
then we can pick the song

00:01:33.380 --> 00:01:36.350
from one of these
categories here.

00:01:36.350 --> 00:01:38.250
[MUSIC PLAYING]

00:01:41.504 --> 00:01:43.920
Let's head back to the studio,
and let's look at some code

00:01:43.920 --> 00:01:46.080
so I can show you how it's done.

00:01:46.080 --> 00:01:47.830
To implement all this
cool functionality,

00:01:47.830 --> 00:01:51.100
the first step is we need to
set up the AndroidManifest.xml

00:01:51.100 --> 00:01:53.990
to tell Android Auto that your
application provides services

00:01:53.990 --> 00:01:55.630
for cars.

00:01:55.630 --> 00:01:57.620
You need to provide an
XML file like this one

00:01:57.620 --> 00:02:01.090
here with an automotive app tag,
along with a media attribute

00:02:01.090 --> 00:02:03.920
since we're implementing a
music playing application.

00:02:03.920 --> 00:02:07.090
You also need to declare a
media browser service, which

00:02:07.090 --> 00:02:09.900
tells Android Auto that your
application is able to expose

00:02:09.900 --> 00:02:13.320
information about
available media.

00:02:13.320 --> 00:02:16.620
Next, you need to implement
the media browser service.

00:02:16.620 --> 00:02:19.450
First, you implement
the onGetRoot method,

00:02:19.450 --> 00:02:22.600
which returns back the top level
node of the media hierarchy.

00:02:22.600 --> 00:02:24.610
And it's not shown in the UI.

00:02:24.610 --> 00:02:26.260
This is where you
should also implement

00:02:26.260 --> 00:02:28.510
checks to prevent anything
except Android Auto

00:02:28.510 --> 00:02:30.620
from querying your
application by checking

00:02:30.620 --> 00:02:33.830
that the incoming client package
name matches the Android Auto

00:02:33.830 --> 00:02:35.920
package name.

00:02:35.920 --> 00:02:38.860
The next step is to
provide onLoadChildren,

00:02:38.860 --> 00:02:41.970
which generates a list of
media items, given the media ID

00:02:41.970 --> 00:02:43.500
of a parent node.

00:02:43.500 --> 00:02:46.830
Each item returned can be either
browsable, like subfolders,

00:02:46.830 --> 00:02:48.960
or playable, like a song.

00:02:48.960 --> 00:02:50.460
And you can indicate
the difference

00:02:50.460 --> 00:02:55.070
by passing one of these flags
in the Media Items Constructor.

00:02:55.070 --> 00:02:58.450
Inside onLoadChildren, you
should spawn off an async task,

00:02:58.450 --> 00:03:00.680
and then call the detach method.

00:03:00.680 --> 00:03:02.950
When the result is
ready, the async task

00:03:02.950 --> 00:03:06.410
can return back the
results using send result.

00:03:06.410 --> 00:03:09.280
Using an async task here
ensures that the user interface

00:03:09.280 --> 00:03:12.160
is responsive and is not
blocked while your code is

00:03:12.160 --> 00:03:14.202
querying your media library.

00:03:14.202 --> 00:03:16.170
Now, since the user
will be in a car,

00:03:16.170 --> 00:03:17.760
it's important that
you present items

00:03:17.760 --> 00:03:20.306
in a way that minimizes
user interaction.

00:03:20.306 --> 00:03:21.930
So you should put
frequently used items

00:03:21.930 --> 00:03:25.120
like Playlist, Channels,
and other popular content

00:03:25.120 --> 00:03:26.790
at the top.

00:03:26.790 --> 00:03:29.800
And you should avoid showing
unbounded broad categories

00:03:29.800 --> 00:03:31.760
like All Artists,
because these lists will

00:03:31.760 --> 00:03:34.660
be too hard for users to
navigate through easily.

00:03:34.660 --> 00:03:37.450
Instead, you should try to
create bounded content that

00:03:37.450 --> 00:03:40.460
is going to be what
the user wants.

00:03:40.460 --> 00:03:42.860
Next, we need to
create a media session.

00:03:42.860 --> 00:03:45.270
This acts as the glue that
allows Android Auto to tell

00:03:45.270 --> 00:03:47.930
our music application
what media to play.

00:03:47.930 --> 00:03:50.400
The media session is
aware of our apps playback

00:03:50.400 --> 00:03:54.320
status, the queue,
and other metadata.

00:03:54.320 --> 00:03:57.640
We then need to tie this media
session to the media browser

00:03:57.640 --> 00:04:00.900
service by using the
setSessionToken method.

00:04:00.900 --> 00:04:03.726
And make sure that you call
setActive here as well,

00:04:03.726 --> 00:04:06.100
because it indicates that the
session is ready to receive

00:04:06.100 --> 00:04:08.610
commands, and it's
very important.

00:04:08.610 --> 00:04:10.730
With the SessionToken,
Android Auto

00:04:10.730 --> 00:04:13.620
is now able to instantiate
a media controller that

00:04:13.620 --> 00:04:17.529
can remotely control our media
session via the media session

00:04:17.529 --> 00:04:19.117
callback methods.

00:04:19.117 --> 00:04:21.700
So here's a diagram that shows
a bit more about how everything

00:04:21.700 --> 00:04:22.880
fits together.

00:04:22.880 --> 00:04:25.650
You can see your media app
interacting with the Android

00:04:25.650 --> 00:04:29.400
Auto app on the phone, and how
this then appears in the car.

00:04:29.400 --> 00:04:32.400
This interface is not specific
to Android Auto, by the way.

00:04:32.400 --> 00:04:34.590
Android Auto is
actually just a client

00:04:34.590 --> 00:04:36.270
that uses the media controller.

00:04:36.270 --> 00:04:39.430
And the big win here is that any
other application for which you

00:04:39.430 --> 00:04:43.390
give access to your SessionToken
can also control the same media

00:04:43.390 --> 00:04:46.490
session by creating a
new media controller.

00:04:46.490 --> 00:04:50.290
For example, your normal audio
playing activity for the phone

00:04:50.290 --> 00:04:51.980
should also be one
of these clients,

00:04:51.980 --> 00:04:54.920
delegating the media library
handling and media playback

00:04:54.920 --> 00:04:59.760
control to the same media
browser service used for Auto.

00:04:59.760 --> 00:05:02.960
To test your application, we
have provided a media browser

00:05:02.960 --> 00:05:06.300
simulator that looks similar
to the car experience.

00:05:06.300 --> 00:05:09.360
So you can run the simulator
on your phone or the Android

00:05:09.360 --> 00:05:13.150
Emulator to test that you're
using the API correctly.

00:05:13.150 --> 00:05:15.560
It uses the same media
controller interface and media

00:05:15.560 --> 00:05:19.100
browser service as Android Auto
to present similar controls

00:05:19.100 --> 00:05:20.790
as to what you'd
experience in a car.

00:05:20.790 --> 00:05:24.020
So this is great for testing at
your desk during development.

00:05:24.020 --> 00:05:24.520
All right.

00:05:24.520 --> 00:05:25.061
So that's it.

00:05:25.061 --> 00:05:28.430
So let's get back to the
car and get out of here.

00:05:28.430 --> 00:05:30.810
You can find out more about
Android Auto by visiting

00:05:30.810 --> 00:05:34.540
the documentation site and also
joining the Google+ community

00:05:34.540 --> 00:05:37.054
where you can share your
ideas with everybody else.

00:05:37.054 --> 00:05:38.970
Thanks very much for
watching this intro video

00:05:38.970 --> 00:05:40.080
to Android Auto.

00:05:40.080 --> 00:05:43.380
I'm Wayne Piekarski, and
I'll see you next time.

