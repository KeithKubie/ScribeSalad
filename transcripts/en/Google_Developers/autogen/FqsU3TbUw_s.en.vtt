WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.260
 
so back in 1995 javascript was created

00:00:03.260 --> 00:00:03.270
so back in 1995 javascript was created
 

00:00:03.270 --> 00:00:05.150
so back in 1995 javascript was created
by Brendan Eich right and he did it in

00:00:05.150 --> 00:00:05.160
by Brendan Eich right and he did it in
 

00:00:05.160 --> 00:00:07.579
by Brendan Eich right and he did it in
10 days which is pretty crazy the other

00:00:07.579 --> 00:00:07.589
10 days which is pretty crazy the other
 

00:00:07.589 --> 00:00:10.310
10 days which is pretty crazy the other
is what most the web is built of now so

00:00:10.310 --> 00:00:10.320
is what most the web is built of now so
 

00:00:10.320 --> 00:00:12.620
is what most the web is built of now so
javascript is 18 years old now so it's

00:00:12.620 --> 00:00:12.630
javascript is 18 years old now so it's
 

00:00:12.630 --> 00:00:15.589
javascript is 18 years old now so it's
like legal to drink in some countries I

00:00:15.589 --> 00:00:15.599
like legal to drink in some countries I
 

00:00:15.599 --> 00:00:18.590
like legal to drink in some countries I
saw someone on Twitter saying that they

00:00:18.590 --> 00:00:18.600
saw someone on Twitter saying that they
 

00:00:18.600 --> 00:00:20.599
saw someone on Twitter saying that they
think they've seen JavaScript drunk many

00:00:20.599 --> 00:00:20.609
think they've seen JavaScript drunk many
 

00:00:20.609 --> 00:00:23.269
think they've seen JavaScript drunk many
years ago a lot of the time quite like

00:00:23.269 --> 00:00:23.279
years ago a lot of the time quite like
 

00:00:23.279 --> 00:00:26.810
years ago a lot of the time quite like
that but in 2010 another team set about

00:00:26.810 --> 00:00:26.820
that but in 2010 another team set about
 

00:00:26.820 --> 00:00:29.120
that but in 2010 another team set about
like you know making a new language and

00:00:29.120 --> 00:00:29.130
like you know making a new language and
 

00:00:29.130 --> 00:00:30.679
like you know making a new language and
you know from what we know now of the

00:00:30.679 --> 00:00:30.689
you know from what we know now of the
 

00:00:30.689 --> 00:00:33.229
you know from what we know now of the
web we know how they the whole web spot

00:00:33.229 --> 00:00:33.239
web we know how they the whole web spot
 

00:00:33.239 --> 00:00:34.729
web we know how they the whole web spot
together and the kind of tools we need

00:00:34.729 --> 00:00:34.739
together and the kind of tools we need
 

00:00:34.739 --> 00:00:36.410
together and the kind of tools we need
and that team is the dart team and his

00:00:36.410 --> 00:00:36.420
and that team is the dart team and his
 

00:00:36.420 --> 00:00:38.630
and that team is the dart team and his
talk about it big warm welcome to

00:00:38.630 --> 00:00:38.640
talk about it big warm welcome to
 

00:00:38.640 --> 00:00:45.410
talk about it big warm welcome to
cephalad and Kasper lund ok thanks Jake

00:00:45.410 --> 00:00:45.420
cephalad and Kasper lund ok thanks Jake
 

00:00:45.420 --> 00:00:48.020
cephalad and Kasper lund ok thanks Jake
so we won't be playing the Kenny G we

00:00:48.020 --> 00:00:48.030
so we won't be playing the Kenny G we
 

00:00:48.030 --> 00:00:50.060
so we won't be playing the Kenny G we
don't want you guys to fall asleep this

00:00:50.060 --> 00:00:50.070
don't want you guys to fall asleep this
 

00:00:50.070 --> 00:00:52.250
don't want you guys to fall asleep this
is start for the modern web developer my

00:00:52.250 --> 00:00:52.260
is start for the modern web developer my
 

00:00:52.260 --> 00:00:53.270
is start for the modern web developer my
name is Seth Ladd I'm a developer

00:00:53.270 --> 00:00:53.280
name is Seth Ladd I'm a developer
 

00:00:53.280 --> 00:00:55.010
name is Seth Ladd I'm a developer
advocate with the chrome and dart team

00:00:55.010 --> 00:00:55.020
advocate with the chrome and dart team
 

00:00:55.020 --> 00:00:57.619
advocate with the chrome and dart team
and I'm cast Bolin diamond engineer here

00:00:57.619 --> 00:00:57.629
and I'm cast Bolin diamond engineer here
 

00:00:57.629 --> 00:00:59.779
and I'm cast Bolin diamond engineer here
at Google I work as a tech lead on the

00:00:59.779 --> 00:00:59.789
at Google I work as a tech lead on the
 

00:00:59.789 --> 00:01:02.330
at Google I work as a tech lead on the
dark platform and before I ventured into

00:01:02.330 --> 00:01:02.340
dark platform and before I ventured into
 

00:01:02.340 --> 00:01:04.810
dark platform and before I ventured into
doctorate or I spend a lot years on

00:01:04.810 --> 00:01:04.820
doctorate or I spend a lot years on
 

00:01:04.820 --> 00:01:07.250
doctorate or I spend a lot years on
optimizing v8 and the optimizing

00:01:07.250 --> 00:01:07.260
optimizing v8 and the optimizing
 

00:01:07.260 --> 00:01:10.580
optimizing v8 and the optimizing
compiler in there ok so many of you know

00:01:10.580 --> 00:01:10.590
compiler in there ok so many of you know
 

00:01:10.590 --> 00:01:12.770
compiler in there ok so many of you know
dart as a language and sure it's a

00:01:12.770 --> 00:01:12.780
dart as a language and sure it's a
 

00:01:12.780 --> 00:01:14.480
dart as a language and sure it's a
structured scalable familiar language

00:01:14.480 --> 00:01:14.490
structured scalable familiar language
 

00:01:14.490 --> 00:01:16.640
structured scalable familiar language
but it's also I like to think of it as a

00:01:16.640 --> 00:01:16.650
but it's also I like to think of it as a
 

00:01:16.650 --> 00:01:18.140
but it's also I like to think of it as a
batteries included platform there's a

00:01:18.140 --> 00:01:18.150
batteries included platform there's a
 

00:01:18.150 --> 00:01:20.990
batteries included platform there's a
great core set of libraries things like

00:01:20.990 --> 00:01:21.000
great core set of libraries things like
 

00:01:21.000 --> 00:01:22.670
great core set of libraries things like
collections things like a stinkers

00:01:22.670 --> 00:01:22.680
collections things like a stinkers
 

00:01:22.680 --> 00:01:24.920
collections things like a stinkers
programming futures streams things like

00:01:24.920 --> 00:01:24.930
programming futures streams things like
 

00:01:24.930 --> 00:01:27.770
programming futures streams things like
numbers bullion's dates times we also

00:01:27.770 --> 00:01:27.780
numbers bullion's dates times we also
 

00:01:27.780 --> 00:01:29.870
numbers bullion's dates times we also
ship a collection of productive tools a

00:01:29.870 --> 00:01:29.880
ship a collection of productive tools a
 

00:01:29.880 --> 00:01:32.450
ship a collection of productive tools a
dart editor and analyzer to give you

00:01:32.450 --> 00:01:32.460
dart editor and analyzer to give you
 

00:01:32.460 --> 00:01:34.760
dart editor and analyzer to give you
warnings and errors a package manager

00:01:34.760 --> 00:01:34.770
warnings and errors a package manager
 

00:01:34.770 --> 00:01:36.649
warnings and errors a package manager
we've actually called pub because you

00:01:36.649 --> 00:01:36.659
we've actually called pub because you
 

00:01:36.659 --> 00:01:39.200
we've actually called pub because you
played darts in a pub we also ship a

00:01:39.200 --> 00:01:39.210
played darts in a pub we also ship a
 

00:01:39.210 --> 00:01:40.700
played darts in a pub we also ship a
virtual machine which runs dart code

00:01:40.700 --> 00:01:40.710
virtual machine which runs dart code
 

00:01:40.710 --> 00:01:42.319
virtual machine which runs dart code
natively you can run that vm on the

00:01:42.319 --> 00:01:42.329
natively you can run that vm on the
 

00:01:42.329 --> 00:01:44.630
natively you can run that vm on the
command line or on the server and you

00:01:44.630 --> 00:01:44.640
command line or on the server and you
 

00:01:44.640 --> 00:01:46.880
command line or on the server and you
can also embed it in client browsers but

00:01:46.880 --> 00:01:46.890
can also embed it in client browsers but
 

00:01:46.890 --> 00:01:49.490
can also embed it in client browsers but
probably most importantly we ship a

00:01:49.490 --> 00:01:49.500
probably most importantly we ship a
 

00:01:49.500 --> 00:01:51.950
probably most importantly we ship a
compiler to javascript so the dart code

00:01:51.950 --> 00:01:51.960
compiler to javascript so the dart code
 

00:01:51.960 --> 00:01:53.899
compiler to javascript so the dart code
you see here today and the dart the dart

00:01:53.899 --> 00:01:53.909
you see here today and the dart the dart
 

00:01:53.909 --> 00:01:55.010
you see here today and the dart the dart
apps that you'll be writing you can

00:01:55.010 --> 00:01:55.020
apps that you'll be writing you can
 

00:01:55.020 --> 00:01:56.990
apps that you'll be writing you can
compiled it down to essentially equi

00:01:56.990 --> 00:01:57.000
compiled it down to essentially equi
 

00:01:57.000 --> 00:01:59.240
compiled it down to essentially equi
script 5 and run it across modern

00:01:59.240 --> 00:01:59.250
script 5 and run it across modern
 

00:01:59.250 --> 00:02:03.050
script 5 and run it across modern
browsers desktop and laptop you might

00:02:03.050 --> 00:02:03.060
browsers desktop and laptop you might
 

00:02:03.060 --> 00:02:04.490
browsers desktop and laptop you might
have heard recently we launched dart one

00:02:04.490 --> 00:02:04.500
have heard recently we launched dart one
 

00:02:04.500 --> 00:02:05.990
have heard recently we launched dart one
point oh so a big milestone for us

00:02:05.990 --> 00:02:06.000
point oh so a big milestone for us
 

00:02:06.000 --> 00:02:08.150
point oh so a big milestone for us
hopefully exciting for you guys the big

00:02:08.150 --> 00:02:08.160
hopefully exciting for you guys the big
 

00:02:08.160 --> 00:02:10.270
hopefully exciting for you guys the big
point of this really yeah thank you

00:02:10.270 --> 00:02:10.280
point of this really yeah thank you
 

00:02:10.280 --> 00:02:14.410
point of this really yeah thank you
okay the journey starts here really

00:02:14.410 --> 00:02:14.420
okay the journey starts here really
 

00:02:14.420 --> 00:02:16.750
okay the journey starts here really
frozen for you the big point here they

00:02:16.750 --> 00:02:16.760
frozen for you the big point here they
 

00:02:16.760 --> 00:02:18.970
frozen for you the big point here they
take aways it's now stability you can

00:02:18.970 --> 00:02:18.980
take aways it's now stability you can
 

00:02:18.980 --> 00:02:20.980
take aways it's now stability you can
count on we've been open source since

00:02:20.980 --> 00:02:20.990
count on we've been open source since
 

00:02:20.990 --> 00:02:22.720
count on we've been open source since
about october two thousand eleven and

00:02:22.720 --> 00:02:22.730
about october two thousand eleven and
 

00:02:22.730 --> 00:02:24.640
about october two thousand eleven and
gotten tons of feedback from internal

00:02:24.640 --> 00:02:24.650
gotten tons of feedback from internal
 

00:02:24.650 --> 00:02:25.990
gotten tons of feedback from internal
developers external developers

00:02:25.990 --> 00:02:26.000
developers external developers
 

00:02:26.000 --> 00:02:28.690
developers external developers
hackathons code labs and we've collected

00:02:28.690 --> 00:02:28.700
hackathons code labs and we've collected
 

00:02:28.700 --> 00:02:30.699
hackathons code labs and we've collected
at all and launched what is now a stable

00:02:30.699 --> 00:02:30.709
at all and launched what is now a stable
 

00:02:30.709 --> 00:02:32.710
at all and launched what is now a stable
language stable core libraries for you

00:02:32.710 --> 00:02:32.720
language stable core libraries for you
 

00:02:32.720 --> 00:02:34.960
language stable core libraries for you
to build Production apps on so now is

00:02:34.960 --> 00:02:34.970
to build Production apps on so now is
 

00:02:34.970 --> 00:02:37.930
to build Production apps on so now is
the right time to try it okay so when I

00:02:37.930 --> 00:02:37.940
the right time to try it okay so when I
 

00:02:37.940 --> 00:02:40.120
the right time to try it okay so when I
said you can use dart today I I think

00:02:40.120 --> 00:02:40.130
said you can use dart today I I think
 

00:02:40.130 --> 00:02:41.740
said you can use dart today I I think
actually mean you can use dart like in

00:02:41.740 --> 00:02:41.750
actually mean you can use dart like in
 

00:02:41.750 --> 00:02:43.360
actually mean you can use dart like in
the next hour so we're going to do a

00:02:43.360 --> 00:02:43.370
the next hour so we're going to do a
 

00:02:43.370 --> 00:02:45.250
the next hour so we're going to do a
lightning tour the syntax structure and

00:02:45.250 --> 00:02:45.260
lightning tour the syntax structure and
 

00:02:45.260 --> 00:02:47.350
lightning tour the syntax structure and
semantics to show you how familien easy

00:02:47.350 --> 00:02:47.360
semantics to show you how familien easy
 

00:02:47.360 --> 00:02:51.040
semantics to show you how familien easy
it is to get started so dart a by design

00:02:51.040 --> 00:02:51.050
it is to get started so dart a by design
 

00:02:51.050 --> 00:02:53.320
it is to get started so dart a by design
is very easy to learn we have semicolons

00:02:53.320 --> 00:02:53.330
is very easy to learn we have semicolons
 

00:02:53.330 --> 00:02:54.970
is very easy to learn we have semicolons
we have curly braces in fact we got a

00:02:54.970 --> 00:02:54.980
we have curly braces in fact we got a
 

00:02:54.980 --> 00:02:56.979
we have curly braces in fact we got a
little flak when we first launched dark

00:02:56.979 --> 00:02:56.989
little flak when we first launched dark
 

00:02:56.989 --> 00:02:58.750
little flak when we first launched dark
people like why do you make the next big

00:02:58.750 --> 00:02:58.760
people like why do you make the next big
 

00:02:58.760 --> 00:03:00.070
people like why do you make the next big
Haskell and we're like we want more than

00:03:00.070 --> 00:03:00.080
Haskell and we're like we want more than
 

00:03:00.080 --> 00:03:02.080
Haskell and we're like we want more than
five users and so we wanted to make sure

00:03:02.080 --> 00:03:02.090
five users and so we wanted to make sure
 

00:03:02.090 --> 00:03:04.000
five users and so we wanted to make sure
that you guys can totally understand

00:03:04.000 --> 00:03:04.010
that you guys can totally understand
 

00:03:04.010 --> 00:03:06.100
that you guys can totally understand
this code we've run hackathons and code

00:03:06.100 --> 00:03:06.110
this code we've run hackathons and code
 

00:03:06.110 --> 00:03:08.670
this code we've run hackathons and code
labs people get it so familiar classes

00:03:08.670 --> 00:03:08.680
labs people get it so familiar classes
 

00:03:08.680 --> 00:03:10.509
labs people get it so familiar classes
but just because it's a familiar

00:03:10.509 --> 00:03:10.519
but just because it's a familiar
 

00:03:10.519 --> 00:03:12.340
but just because it's a familiar
language you can dive into in about an

00:03:12.340 --> 00:03:12.350
language you can dive into in about an
 

00:03:12.350 --> 00:03:13.540
language you can dive into in about an
hour doesn't mean we can't take this

00:03:13.540 --> 00:03:13.550
hour doesn't mean we can't take this
 

00:03:13.550 --> 00:03:15.280
hour doesn't mean we can't take this
opportunity to introduce new features

00:03:15.280 --> 00:03:15.290
opportunity to introduce new features
 

00:03:15.290 --> 00:03:17.500
opportunity to introduce new features
for instance with constructors what are

00:03:17.500 --> 00:03:17.510
for instance with constructors what are
 

00:03:17.510 --> 00:03:19.090
for instance with constructors what are
we always doing constructors this that x

00:03:19.090 --> 00:03:19.100
we always doing constructors this that x
 

00:03:19.100 --> 00:03:21.039
we always doing constructors this that x
equals x this type y equals y this is

00:03:21.039 --> 00:03:21.049
equals x this type y equals y this is
 

00:03:21.049 --> 00:03:23.170
equals x this type y equals y this is
getting boring so dart says hey if the

00:03:23.170 --> 00:03:23.180
getting boring so dart says hey if the
 

00:03:23.180 --> 00:03:24.789
getting boring so dart says hey if the
name of the field is the same as the

00:03:24.789 --> 00:03:24.799
name of the field is the same as the
 

00:03:24.799 --> 00:03:26.530
name of the field is the same as the
constructor parameter just say this dot

00:03:26.530 --> 00:03:26.540
constructor parameter just say this dot
 

00:03:26.540 --> 00:03:28.180
constructor parameter just say this dot
strength in this case and that would be

00:03:28.180 --> 00:03:28.190
strength in this case and that would be
 

00:03:28.190 --> 00:03:29.890
strength in this case and that would be
sugar to a disk strength equal strength

00:03:29.890 --> 00:03:29.900
sugar to a disk strength equal strength
 

00:03:29.900 --> 00:03:31.690
sugar to a disk strength equal strength
just those nice addition to make this

00:03:31.690 --> 00:03:31.700
just those nice addition to make this
 

00:03:31.700 --> 00:03:35.440
just those nice addition to make this
feel more terse more scripty speaking of

00:03:35.440 --> 00:03:35.450
feel more terse more scripty speaking of
 

00:03:35.450 --> 00:03:37.870
feel more terse more scripty speaking of
scripty a dart has operator overriding

00:03:37.870 --> 00:03:37.880
scripty a dart has operator overriding
 

00:03:37.880 --> 00:03:40.030
scripty a dart has operator overriding
to plus minus etc that's in this

00:03:40.030 --> 00:03:40.040
to plus minus etc that's in this
 

00:03:40.040 --> 00:03:42.670
to plus minus etc that's in this
language we also named optional

00:03:42.670 --> 00:03:42.680
language we also named optional
 

00:03:42.680 --> 00:03:45.099
language we also named optional
parameters again it's a structured

00:03:45.099 --> 00:03:45.109
parameters again it's a structured
 

00:03:45.109 --> 00:03:46.509
parameters again it's a structured
language may look like the structured

00:03:46.509 --> 00:03:46.519
language may look like the structured
 

00:03:46.519 --> 00:03:47.740
language may look like the structured
language you've been using but it has

00:03:47.740 --> 00:03:47.750
language you've been using but it has
 

00:03:47.750 --> 00:03:49.300
language you've been using but it has
those features that allow you to write

00:03:49.300 --> 00:03:49.310
those features that allow you to write
 

00:03:49.310 --> 00:03:50.590
those features that allow you to write
have a tourist programming experience

00:03:50.590 --> 00:03:50.600
have a tourist programming experience
 

00:03:50.600 --> 00:03:52.390
have a tourist programming experience
that you might be more familiar with in

00:03:52.390 --> 00:03:52.400
that you might be more familiar with in
 

00:03:52.400 --> 00:03:54.039
that you might be more familiar with in
scripting languages in fact this case

00:03:54.039 --> 00:03:54.049
scripting languages in fact this case
 

00:03:54.049 --> 00:03:56.020
scripting languages in fact this case
here hands is an optional parameter but

00:03:56.020 --> 00:03:56.030
here hands is an optional parameter but
 

00:03:56.030 --> 00:03:58.870
here hands is an optional parameter but
also as a default value of one so say

00:03:58.870 --> 00:03:58.880
also as a default value of one so say
 

00:03:58.880 --> 00:04:01.539
also as a default value of one so say
more without typing more we also support

00:04:01.539 --> 00:04:01.549
more without typing more we also support
 

00:04:01.549 --> 00:04:03.280
more without typing more we also support
one line functions this is critical a

00:04:03.280 --> 00:04:03.290
one line functions this is critical a
 

00:04:03.290 --> 00:04:04.569
one line functions this is critical a
lot of callbacks going on in web

00:04:04.569 --> 00:04:04.579
lot of callbacks going on in web
 

00:04:04.579 --> 00:04:05.979
lot of callbacks going on in web
programming a lot of times you want to

00:04:05.979 --> 00:04:05.989
programming a lot of times you want to
 

00:04:05.989 --> 00:04:09.580
programming a lot of times you want to
do really small inline function literals

00:04:09.580 --> 00:04:09.590
do really small inline function literals
 

00:04:09.590 --> 00:04:11.170
do really small inline function literals
we support that with the fat arrow

00:04:11.170 --> 00:04:11.180
we support that with the fat arrow
 

00:04:11.180 --> 00:04:13.330
we support that with the fat arrow
syntax and we also have string

00:04:13.330 --> 00:04:13.340
syntax and we also have string
 

00:04:13.340 --> 00:04:14.920
syntax and we also have string
interpolation making a very easy and

00:04:14.920 --> 00:04:14.930
interpolation making a very easy and
 

00:04:14.930 --> 00:04:16.810
interpolation making a very easy and
quick to create strings just dollar sign

00:04:16.810 --> 00:04:16.820
quick to create strings just dollar sign
 

00:04:16.820 --> 00:04:19.089
quick to create strings just dollar sign
variable or expression and it's right

00:04:19.089 --> 00:04:19.099
variable or expression and it's right
 

00:04:19.099 --> 00:04:20.199
variable or expression and it's right
there's a lot easier than doing string

00:04:20.199 --> 00:04:20.209
there's a lot easier than doing string
 

00:04:20.209 --> 00:04:22.390
there's a lot easier than doing string
builders or string concatenation

00:04:22.390 --> 00:04:22.400
builders or string concatenation
 

00:04:22.400 --> 00:04:26.150
builders or string concatenation
okay so dart is its own language it's

00:04:26.150 --> 00:04:26.160
okay so dart is its own language it's
 

00:04:26.160 --> 00:04:28.580
okay so dart is its own language it's
not just the syntax that masks and other

00:04:28.580 --> 00:04:28.590
not just the syntax that masks and other
 

00:04:28.590 --> 00:04:31.190
not just the syntax that masks and other
syntax we we have our own clean

00:04:31.190 --> 00:04:31.200
syntax we we have our own clean
 

00:04:31.200 --> 00:04:33.020
syntax we we have our own clean
semantics so we want to turn more of

00:04:33.020 --> 00:04:33.030
semantics so we want to turn more of
 

00:04:33.030 --> 00:04:35.090
semantics so we want to turn more of
these wat moments which I'm not even

00:04:35.090 --> 00:04:35.100
these wat moments which I'm not even
 

00:04:35.100 --> 00:04:36.710
these wat moments which I'm not even
sure what's going on here into the

00:04:36.710 --> 00:04:36.720
sure what's going on here into the
 

00:04:36.720 --> 00:04:38.390
sure what's going on here into the
totally awesome atomic dinosaur nucular

00:04:38.390 --> 00:04:38.400
totally awesome atomic dinosaur nucular
 

00:04:38.400 --> 00:04:40.070
totally awesome atomic dinosaur nucular
rocks we want you to have more on the

00:04:40.070 --> 00:04:40.080
rocks we want you to have more on the
 

00:04:40.080 --> 00:04:43.550
rocks we want you to have more on the
right less on the left okay so some

00:04:43.550 --> 00:04:43.560
right less on the left okay so some
 

00:04:43.560 --> 00:04:45.230
right less on the left okay so some
examples of the cleaned-up Samantha's

00:04:45.230 --> 00:04:45.240
examples of the cleaned-up Samantha's
 

00:04:45.240 --> 00:04:46.850
examples of the cleaned-up Samantha's
give you a more logical programming

00:04:46.850 --> 00:04:46.860
give you a more logical programming
 

00:04:46.860 --> 00:04:49.250
give you a more logical programming
experience and dart only true is truth

00:04:49.250 --> 00:04:49.260
experience and dart only true is truth
 

00:04:49.260 --> 00:04:50.900
experience and dart only true is truth
II there you go now you know the truth

00:04:50.900 --> 00:04:50.910
II there you go now you know the truth
 

00:04:50.910 --> 00:04:53.270
II there you go now you know the truth
you rules good job okay there is no

00:04:53.270 --> 00:04:53.280
you rules good job okay there is no
 

00:04:53.280 --> 00:04:57.320
you rules good job okay there is no
undefined only null yes totally cleaned

00:04:57.320 --> 00:04:57.330
undefined only null yes totally cleaned
 

00:04:57.330 --> 00:05:01.010
undefined only null yes totally cleaned
up okay no type coercion with like

00:05:01.010 --> 00:05:01.020
up okay no type coercion with like
 

00:05:01.020 --> 00:05:02.600
up okay no type coercion with like
things like double equals and plus so

00:05:02.600 --> 00:05:02.610
things like double equals and plus so
 

00:05:02.610 --> 00:05:04.010
things like double equals and plus so
when you try to do something funky we're

00:05:04.010 --> 00:05:04.020
when you try to do something funky we're
 

00:05:04.020 --> 00:05:08.060
when you try to do something funky we're
gonna tell you okay pop quiz time here's

00:05:08.060 --> 00:05:08.070
gonna tell you okay pop quiz time here's
 

00:05:08.070 --> 00:05:10.040
gonna tell you okay pop quiz time here's
a string hello we call dot missing which

00:05:10.040 --> 00:05:10.050
a string hello we call dot missing which
 

00:05:10.050 --> 00:05:11.960
a string hello we call dot missing which
obviously does not exist on string what

00:05:11.960 --> 00:05:11.970
obviously does not exist on string what
 

00:05:11.970 --> 00:05:14.590
obviously does not exist on string what
would you want to happen at this point

00:05:14.590 --> 00:05:14.600
would you want to happen at this point
 

00:05:14.600 --> 00:05:17.360
would you want to happen at this point
undefined you I don't want them to find

00:05:17.360 --> 00:05:17.370
undefined you I don't want them to find
 

00:05:17.370 --> 00:05:19.130
undefined you I don't want them to find
I want to be told that there's no

00:05:19.130 --> 00:05:19.140
I want to be told that there's no
 

00:05:19.140 --> 00:05:21.470
I want to be told that there's no
missing method on string and sure enough

00:05:21.470 --> 00:05:21.480
missing method on string and sure enough
 

00:05:21.480 --> 00:05:23.270
missing method on string and sure enough
at run time when you hit code like this

00:05:23.270 --> 00:05:23.280
at run time when you hit code like this
 

00:05:23.280 --> 00:05:25.370
at run time when you hit code like this
the program tells you with a very clean

00:05:25.370 --> 00:05:25.380
the program tells you with a very clean
 

00:05:25.380 --> 00:05:27.620
the program tells you with a very clean
error so much more logical programming

00:05:27.620 --> 00:05:27.630
error so much more logical programming
 

00:05:27.630 --> 00:05:29.240
error so much more logical programming
experience okay if you were to compare

00:05:29.240 --> 00:05:29.250
experience okay if you were to compare
 

00:05:29.250 --> 00:05:31.820
experience okay if you were to compare
at hello which is a string is a greater

00:05:31.820 --> 00:05:31.830
at hello which is a string is a greater
 

00:05:31.830 --> 00:05:34.400
at hello which is a string is a greater
than one I think this returns false but

00:05:34.400 --> 00:05:34.410
than one I think this returns false but
 

00:05:34.410 --> 00:05:37.400
than one I think this returns false but
actually I'm not really sure why so what

00:05:37.400 --> 00:05:37.410
actually I'm not really sure why so what
 

00:05:37.410 --> 00:05:40.219
actually I'm not really sure why so what
would you want this to happen right you

00:05:40.219 --> 00:05:40.229
would you want this to happen right you
 

00:05:40.229 --> 00:05:41.840
would you want this to happen right you
want you want an heir you want to be hey

00:05:41.840 --> 00:05:41.850
want you want an heir you want to be hey
 

00:05:41.850 --> 00:05:43.640
want you want an heir you want to be hey
man string does not have an instance

00:05:43.640 --> 00:05:43.650
man string does not have an instance
 

00:05:43.650 --> 00:05:45.350
man string does not have an instance
method greater than you get told at

00:05:45.350 --> 00:05:45.360
method greater than you get told at
 

00:05:45.360 --> 00:05:46.969
method greater than you get told at
runtime exactly where the problem

00:05:46.969 --> 00:05:46.979
runtime exactly where the problem
 

00:05:46.979 --> 00:05:48.980
runtime exactly where the problem
happened much more logical programming

00:05:48.980 --> 00:05:48.990
happened much more logical programming
 

00:05:48.990 --> 00:05:51.200
happened much more logical programming
experience okay variable scope this

00:05:51.200 --> 00:05:51.210
experience okay variable scope this
 

00:05:51.210 --> 00:05:52.550
experience okay variable scope this
one's a little bit longer so take a look

00:05:52.550 --> 00:05:52.560
one's a little bit longer so take a look
 

00:05:52.560 --> 00:05:54.920
one's a little bit longer so take a look
at this we have a main function if true

00:05:54.920 --> 00:05:54.930
at this we have a main function if true
 

00:05:54.930 --> 00:05:57.080
at this we have a main function if true
there's foo and then print foo but

00:05:57.080 --> 00:05:57.090
there's foo and then print foo but
 

00:05:57.090 --> 00:05:59.060
there's foo and then print foo but
there's also a top-level foo so the

00:05:59.060 --> 00:05:59.070
there's also a top-level foo so the
 

00:05:59.070 --> 00:06:00.290
there's also a top-level foo so the
question I have for you is when i run

00:06:00.290 --> 00:06:00.300
question I have for you is when i run
 

00:06:00.300 --> 00:06:04.310
question I have for you is when i run
this what will it print and you say yes

00:06:04.310 --> 00:06:04.320
this what will it print and you say yes
 

00:06:04.320 --> 00:06:08.060
this what will it print and you say yes
it's 50-50 chance top top level right

00:06:08.060 --> 00:06:08.070
it's 50-50 chance top top level right
 

00:06:08.070 --> 00:06:10.100
it's 50-50 chance top top level right
this prints top level and dart no

00:06:10.100 --> 00:06:10.110
this prints top level and dart no
 

00:06:10.110 --> 00:06:12.260
this prints top level and dart no
variable hoisting it's a totally logical

00:06:12.260 --> 00:06:12.270
variable hoisting it's a totally logical
 

00:06:12.270 --> 00:06:15.440
variable hoisting it's a totally logical
lexical scope lexical analysis of what's

00:06:15.440 --> 00:06:15.450
lexical scope lexical analysis of what's
 

00:06:15.450 --> 00:06:17.630
lexical scope lexical analysis of what's
going on you hand most developers is

00:06:17.630 --> 00:06:17.640
going on you hand most developers is
 

00:06:17.640 --> 00:06:18.980
going on you hand most developers is
code they will be able to understand

00:06:18.980 --> 00:06:18.990
code they will be able to understand
 

00:06:18.990 --> 00:06:21.650
code they will be able to understand
what's going on here speaking of lexical

00:06:21.650 --> 00:06:21.660
what's going on here speaking of lexical
 

00:06:21.660 --> 00:06:24.140
what's going on here speaking of lexical
scope even this is lexically scoped in

00:06:24.140 --> 00:06:24.150
scope even this is lexically scoped in
 

00:06:24.150 --> 00:06:25.070
scope even this is lexically scoped in
dar this is the one of the things that

00:06:25.070 --> 00:06:25.080
dar this is the one of the things that
 

00:06:25.080 --> 00:06:26.990
dar this is the one of the things that
totally tripped me up earlier here's a

00:06:26.990 --> 00:06:27.000
totally tripped me up earlier here's a
 

00:06:27.000 --> 00:06:28.670
totally tripped me up earlier here's a
class awesome button and in its

00:06:28.670 --> 00:06:28.680
class awesome button and in its
 

00:06:28.680 --> 00:06:30.040
class awesome button and in its
constructor you set up a click handler

00:06:30.040 --> 00:06:30.050
constructor you set up a click handler
 

00:06:30.050 --> 00:06:32.300
constructor you set up a click handler
and when the button is clicked called

00:06:32.300 --> 00:06:32.310
and when the button is clicked called
 

00:06:32.310 --> 00:06:34.100
and when the button is clicked called
this line atomic dinosaur rock well what

00:06:34.100 --> 00:06:34.110
this line atomic dinosaur rock well what
 

00:06:34.110 --> 00:06:35.510
this line atomic dinosaur rock well what
is this at this point the

00:06:35.510 --> 00:06:35.520
is this at this point the
 

00:06:35.520 --> 00:06:37.369
is this at this point the
I secretly scope this that is an

00:06:37.369 --> 00:06:37.379
I secretly scope this that is an
 

00:06:37.379 --> 00:06:39.200
I secretly scope this that is an
instance of Awesome button you give most

00:06:39.200 --> 00:06:39.210
instance of Awesome button you give most
 

00:06:39.210 --> 00:06:40.700
instance of Awesome button you give most
people this code and they will tell you

00:06:40.700 --> 00:06:40.710
people this code and they will tell you
 

00:06:40.710 --> 00:06:43.640
people this code and they will tell you
what method this is calling on which is

00:06:43.640 --> 00:06:43.650
what method this is calling on which is
 

00:06:43.650 --> 00:06:46.189
what method this is calling on which is
I think a pretty big improvement okay so

00:06:46.189 --> 00:06:46.199
I think a pretty big improvement okay so
 

00:06:46.199 --> 00:06:48.110
I think a pretty big improvement okay so
that's a little bit on the semantics and

00:06:48.110 --> 00:06:48.120
that's a little bit on the semantics and
 

00:06:48.120 --> 00:06:51.170
that's a little bit on the semantics and
and a little bit on the syntax but dart

00:06:51.170 --> 00:06:51.180
and a little bit on the syntax but dart
 

00:06:51.180 --> 00:06:52.790
and a little bit on the syntax but dart
is also designed to scale from just a

00:06:52.790 --> 00:06:52.800
is also designed to scale from just a
 

00:06:52.800 --> 00:06:54.110
is also designed to scale from just a
couple lines of code you can certainly

00:06:54.110 --> 00:06:54.120
couple lines of code you can certainly
 

00:06:54.120 --> 00:06:55.520
couple lines of code you can certainly
write a 10 line dart script and have a

00:06:55.520 --> 00:06:55.530
write a 10 line dart script and have a
 

00:06:55.530 --> 00:06:57.649
write a 10 line dart script and have a
look very scripty but you can scale all

00:06:57.649 --> 00:06:57.659
look very scripty but you can scale all
 

00:06:57.659 --> 00:06:59.779
look very scripty but you can scale all
the way up to millions of lines of code

00:06:59.779 --> 00:06:59.789
the way up to millions of lines of code
 

00:06:59.789 --> 00:07:02.300
the way up to millions of lines of code
now we saw functions we saw classes we

00:07:02.300 --> 00:07:02.310
now we saw functions we saw classes we
 

00:07:02.310 --> 00:07:04.309
now we saw functions we saw classes we
have mix-ins we have interfaces I want

00:07:04.309 --> 00:07:04.319
have mix-ins we have interfaces I want
 

00:07:04.319 --> 00:07:05.779
have mix-ins we have interfaces I want
to talk about libraries which is a nice

00:07:05.779 --> 00:07:05.789
to talk about libraries which is a nice
 

00:07:05.789 --> 00:07:07.460
to talk about libraries which is a nice
piece that help you modularize your code

00:07:07.460 --> 00:07:07.470
piece that help you modularize your code
 

00:07:07.470 --> 00:07:09.379
piece that help you modularize your code
dart libraries are very flexible you

00:07:09.379 --> 00:07:09.389
dart libraries are very flexible you
 

00:07:09.389 --> 00:07:11.240
dart libraries are very flexible you
simply define a file as a library you

00:07:11.240 --> 00:07:11.250
simply define a file as a library you
 

00:07:11.250 --> 00:07:13.430
simply define a file as a library you
can import libraries from the core SDK

00:07:13.430 --> 00:07:13.440
can import libraries from the core SDK
 

00:07:13.440 --> 00:07:14.809
can import libraries from the core SDK
you can import libraries you know from

00:07:14.809 --> 00:07:14.819
you can import libraries you know from
 

00:07:14.819 --> 00:07:16.640
you can import libraries you know from
other people or other files and then you

00:07:16.640 --> 00:07:16.650
other people or other files and then you
 

00:07:16.650 --> 00:07:18.460
other people or other files and then you
can define any number of top-level

00:07:18.460 --> 00:07:18.470
can define any number of top-level
 

00:07:18.470 --> 00:07:20.629
can define any number of top-level
constructs in the library so no more

00:07:20.629 --> 00:07:20.639
constructs in the library so no more
 

00:07:20.639 --> 00:07:22.790
constructs in the library so no more
like one public class profile thing if

00:07:22.790 --> 00:07:22.800
like one public class profile thing if
 

00:07:22.800 --> 00:07:24.830
like one public class profile thing if
you come from Java so in this case two

00:07:24.830 --> 00:07:24.840
you come from Java so in this case two
 

00:07:24.840 --> 00:07:26.870
you come from Java so in this case two
classes and even a top-level function

00:07:26.870 --> 00:07:26.880
classes and even a top-level function
 

00:07:26.880 --> 00:07:27.890
classes and even a top-level function
and dart you don't have to wrap

00:07:27.890 --> 00:07:27.900
and dart you don't have to wrap
 

00:07:27.900 --> 00:07:29.180
and dart you don't have to wrap
everything in a class if you don't want

00:07:29.180 --> 00:07:29.190
everything in a class if you don't want
 

00:07:29.190 --> 00:07:31.700
everything in a class if you don't want
to so nice scalable structure fee to

00:07:31.700 --> 00:07:31.710
to so nice scalable structure fee to
 

00:07:31.710 --> 00:07:35.119
to so nice scalable structure fee to
grow so hopefully you guys saw that this

00:07:35.119 --> 00:07:35.129
grow so hopefully you guys saw that this
 

00:07:35.129 --> 00:07:36.589
grow so hopefully you guys saw that this
is a language you can start using right

00:07:36.589 --> 00:07:36.599
is a language you can start using right
 

00:07:36.599 --> 00:07:39.110
is a language you can start using right
away but of course we use dart to get

00:07:39.110 --> 00:07:39.120
away but of course we use dart to get
 

00:07:39.120 --> 00:07:40.939
away but of course we use dart to get
onto the web and to get on the web you

00:07:40.939 --> 00:07:40.949
onto the web and to get on the web you
 

00:07:40.949 --> 00:07:42.680
onto the web and to get on the web you
have to compile dart to JavaScript and

00:07:42.680 --> 00:07:42.690
have to compile dart to JavaScript and
 

00:07:42.690 --> 00:07:44.510
have to compile dart to JavaScript and
to do yet and just show you how it works

00:07:44.510 --> 00:07:44.520
to do yet and just show you how it works
 

00:07:44.520 --> 00:07:46.580
to do yet and just show you how it works
I'll turn over to Casper to tell you all

00:07:46.580 --> 00:07:46.590
I'll turn over to Casper to tell you all
 

00:07:46.590 --> 00:07:49.339
I'll turn over to Casper to tell you all
about dart to J's oh thank you seth so

00:07:49.339 --> 00:07:49.349
about dart to J's oh thank you seth so
 

00:07:49.349 --> 00:07:51.170
about dart to J's oh thank you seth so
finally now i can say something that's

00:07:51.170 --> 00:07:51.180
finally now i can say something that's
 

00:07:51.180 --> 00:07:53.059
finally now i can say something that's
wonderful so i'm going to say a little

00:07:53.059 --> 00:07:53.069
wonderful so i'm going to say a little
 

00:07:53.069 --> 00:07:54.589
wonderful so i'm going to say a little
bit about how we compile to efficient

00:07:54.589 --> 00:07:54.599
bit about how we compile to efficient
 

00:07:54.599 --> 00:07:56.600
bit about how we compile to efficient
javascript and it's very very important

00:07:56.600 --> 00:07:56.610
javascript and it's very very important
 

00:07:56.610 --> 00:07:58.850
javascript and it's very very important
to us to make sure the dark runs really

00:07:58.850 --> 00:07:58.860
to us to make sure the dark runs really
 

00:07:58.860 --> 00:08:01.159
to us to make sure the dark runs really
well on all modern browsers so we put a

00:08:01.159 --> 00:08:01.169
well on all modern browsers so we put a
 

00:08:01.169 --> 00:08:03.769
well on all modern browsers so we put a
lot of effort into that that area so our

00:08:03.769 --> 00:08:03.779
lot of effort into that that area so our
 

00:08:03.779 --> 00:08:05.510
lot of effort into that that area so our
goals are fairly simple we want to

00:08:05.510 --> 00:08:05.520
goals are fairly simple we want to
 

00:08:05.520 --> 00:08:07.070
goals are fairly simple we want to
generate small code we want generate

00:08:07.070 --> 00:08:07.080
generate small code we want generate
 

00:08:07.080 --> 00:08:09.050
generate small code we want generate
fast code and we want to make sure that

00:08:09.050 --> 00:08:09.060
fast code and we want to make sure that
 

00:08:09.060 --> 00:08:11.450
fast code and we want to make sure that
we retain the nice clean proper dot

00:08:11.450 --> 00:08:11.460
we retain the nice clean proper dot
 

00:08:11.460 --> 00:08:14.059
we retain the nice clean proper dot
semantics by a while doing so so simple

00:08:14.059 --> 00:08:14.069
semantics by a while doing so so simple
 

00:08:14.069 --> 00:08:16.700
semantics by a while doing so so simple
goals is a good starting point but to do

00:08:16.700 --> 00:08:16.710
goals is a good starting point but to do
 

00:08:16.710 --> 00:08:18.409
goals is a good starting point but to do
this and do it efficiently we need a

00:08:18.409 --> 00:08:18.419
this and do it efficiently we need a
 

00:08:18.419 --> 00:08:20.779
this and do it efficiently we need a
real optimizing compiler something that

00:08:20.779 --> 00:08:20.789
real optimizing compiler something that
 

00:08:20.789 --> 00:08:23.149
real optimizing compiler something that
doesn't just do like a one-to-one

00:08:23.149 --> 00:08:23.159
doesn't just do like a one-to-one
 

00:08:23.159 --> 00:08:24.769
doesn't just do like a one-to-one
translation in a simple way we actually

00:08:24.769 --> 00:08:24.779
translation in a simple way we actually
 

00:08:24.779 --> 00:08:27.439
translation in a simple way we actually
need a lot of the meet modern kampala

00:08:27.439 --> 00:08:27.449
need a lot of the meet modern kampala
 

00:08:27.449 --> 00:08:29.719
need a lot of the meet modern kampala
techniques we've learned to love from

00:08:29.719 --> 00:08:29.729
techniques we've learned to love from
 

00:08:29.729 --> 00:08:33.019
techniques we've learned to love from
other see more involved projects like v8

00:08:33.019 --> 00:08:33.029
other see more involved projects like v8
 

00:08:33.029 --> 00:08:35.659
other see more involved projects like v8
so we need function inlining we need

00:08:35.659 --> 00:08:35.669
so we need function inlining we need
 

00:08:35.669 --> 00:08:37.219
so we need function inlining we need
loop invariant code motion we need

00:08:37.219 --> 00:08:37.229
loop invariant code motion we need
 

00:08:37.229 --> 00:08:38.959
loop invariant code motion we need
global layer number and we need a lot of

00:08:38.959 --> 00:08:38.969
global layer number and we need a lot of
 

00:08:38.969 --> 00:08:41.149
global layer number and we need a lot of
these things ty propagation we unload

00:08:41.149 --> 00:08:41.159
these things ty propagation we unload
 

00:08:41.159 --> 00:08:42.920
these things ty propagation we unload
elimination dead code elimination and

00:08:42.920 --> 00:08:42.930
elimination dead code elimination and
 

00:08:42.930 --> 00:08:44.810
elimination dead code elimination and
much much more so we need a lot of

00:08:44.810 --> 00:08:44.820
much much more so we need a lot of
 

00:08:44.820 --> 00:08:46.490
much much more so we need a lot of
things in this compiler we want to do a

00:08:46.490 --> 00:08:46.500
things in this compiler we want to do a
 

00:08:46.500 --> 00:08:48.560
things in this compiler we want to do a
good job and optimizing your code so you

00:08:48.560 --> 00:08:48.570
good job and optimizing your code so you
 

00:08:48.570 --> 00:08:49.600
good job and optimizing your code so you
don't have to worry

00:08:49.600 --> 00:08:49.610
don't have to worry
 

00:08:49.610 --> 00:08:52.040
don't have to worry
so let's take a look at a very simple

00:08:52.040 --> 00:08:52.050
so let's take a look at a very simple
 

00:08:52.050 --> 00:08:53.390
so let's take a look at a very simple
dark message just to give you an

00:08:53.390 --> 00:08:53.400
dark message just to give you an
 

00:08:53.400 --> 00:08:55.220
dark message just to give you an
impression of what we actually translate

00:08:55.220 --> 00:08:55.230
impression of what we actually translate
 

00:08:55.230 --> 00:08:57.140
impression of what we actually translate
the code to here's a main method that

00:08:57.140 --> 00:08:57.150
the code to here's a main method that
 

00:08:57.150 --> 00:08:58.760
the code to here's a main method that
allocates a few points and then we

00:08:58.760 --> 00:08:58.770
allocates a few points and then we
 

00:08:58.770 --> 00:08:59.840
allocates a few points and then we
compute the distance between these

00:08:59.840 --> 00:08:59.850
compute the distance between these
 

00:08:59.850 --> 00:09:02.870
compute the distance between these
points very simple code luckily a simple

00:09:02.870 --> 00:09:02.880
points very simple code luckily a simple
 

00:09:02.880 --> 00:09:04.100
points very simple code luckily a simple
dark method actually compiled a

00:09:04.100 --> 00:09:04.110
dark method actually compiled a
 

00:09:04.110 --> 00:09:06.500
dark method actually compiled a
relatively simple JavaScript too so you

00:09:06.500 --> 00:09:06.510
relatively simple JavaScript too so you
 

00:09:06.510 --> 00:09:08.120
relatively simple JavaScript too so you
will allocate points to simply the same

00:09:08.120 --> 00:09:08.130
will allocate points to simply the same
 

00:09:08.130 --> 00:09:10.010
will allocate points to simply the same
way as you would expect it to the only

00:09:10.010 --> 00:09:10.020
way as you would expect it to the only
 

00:09:10.020 --> 00:09:11.570
way as you would expect it to the only
real difference here is that when you

00:09:11.570 --> 00:09:11.580
real difference here is that when you
 

00:09:11.580 --> 00:09:13.700
real difference here is that when you
call the distance to method we actually

00:09:13.700 --> 00:09:13.710
call the distance to method we actually
 

00:09:13.710 --> 00:09:15.980
call the distance to method we actually
encode the D arity the number of

00:09:15.980 --> 00:09:15.990
encode the D arity the number of
 

00:09:15.990 --> 00:09:18.440
encode the D arity the number of
parameters passed in the method name now

00:09:18.440 --> 00:09:18.450
parameters passed in the method name now
 

00:09:18.450 --> 00:09:20.300
parameters passed in the method name now
why don't we do that the reason why we

00:09:20.300 --> 00:09:20.310
why don't we do that the reason why we
 

00:09:20.310 --> 00:09:21.860
why don't we do that the reason why we
do that is because in JavaScript were

00:09:21.860 --> 00:09:21.870
do that is because in JavaScript were
 

00:09:21.870 --> 00:09:23.750
do that is because in JavaScript were
allowed to pass any number of arguments

00:09:23.750 --> 00:09:23.760
allowed to pass any number of arguments
 

00:09:23.760 --> 00:09:25.310
allowed to pass any number of arguments
too few or too many it doesn't really

00:09:25.310 --> 00:09:25.320
too few or too many it doesn't really
 

00:09:25.320 --> 00:09:28.340
too few or too many it doesn't really
matter but usually it leads to weird and

00:09:28.340 --> 00:09:28.350
matter but usually it leads to weird and
 

00:09:28.350 --> 00:09:30.110
matter but usually it leads to weird and
surprising behavior at runtime if you do

00:09:30.110 --> 00:09:30.120
surprising behavior at runtime if you do
 

00:09:30.120 --> 00:09:31.220
surprising behavior at runtime if you do
that so we want to be little bit

00:09:31.220 --> 00:09:31.230
that so we want to be little bit
 

00:09:31.230 --> 00:09:34.100
that so we want to be little bit
stricter there so to live by darts

00:09:34.100 --> 00:09:34.110
stricter there so to live by darts
 

00:09:34.110 --> 00:09:35.780
stricter there so to live by darts
proper semantics rules there we actually

00:09:35.780 --> 00:09:35.790
proper semantics rules there we actually
 

00:09:35.790 --> 00:09:37.010
proper semantics rules there we actually
have to check that you're calling with

00:09:37.010 --> 00:09:37.020
have to check that you're calling with
 

00:09:37.020 --> 00:09:38.210
have to check that you're calling with
the right number of parameters and the

00:09:38.210 --> 00:09:38.220
the right number of parameters and the
 

00:09:38.220 --> 00:09:39.410
the right number of parameters and the
fastest way of doing that is just

00:09:39.410 --> 00:09:39.420
fastest way of doing that is just
 

00:09:39.420 --> 00:09:41.390
fastest way of doing that is just
encoding in the method name if you call

00:09:41.390 --> 00:09:41.400
encoding in the method name if you call
 

00:09:41.400 --> 00:09:43.250
encoding in the method name if you call
with too many parameters you'll get an

00:09:43.250 --> 00:09:43.260
with too many parameters you'll get an
 

00:09:43.260 --> 00:09:46.730
with too many parameters you'll get an
error that that method does not exist so

00:09:46.730 --> 00:09:46.740
error that that method does not exist so
 

00:09:46.740 --> 00:09:49.640
error that that method does not exist so
when you have large applications and you

00:09:49.640 --> 00:09:49.650
when you have large applications and you
 

00:09:49.650 --> 00:09:51.590
when you have large applications and you
need some sort of tool to make sure that

00:09:51.590 --> 00:09:51.600
need some sort of tool to make sure that
 

00:09:51.600 --> 00:09:53.150
need some sort of tool to make sure that
you're not actually shipping too much

00:09:53.150 --> 00:09:53.160
you're not actually shipping too much
 

00:09:53.160 --> 00:09:54.830
you're not actually shipping too much
code to your clients in particular in a

00:09:54.830 --> 00:09:54.840
code to your clients in particular in a
 

00:09:54.840 --> 00:09:56.540
code to your clients in particular in a
setup where you have a nice rich set of

00:09:56.540 --> 00:09:56.550
setup where you have a nice rich set of
 

00:09:56.550 --> 00:09:58.550
setup where you have a nice rich set of
core libraries and a nice set of third

00:09:58.550 --> 00:09:58.560
core libraries and a nice set of third
 

00:09:58.560 --> 00:10:00.320
core libraries and a nice set of third
pile average you can include you want to

00:10:00.320 --> 00:10:00.330
pile average you can include you want to
 

00:10:00.330 --> 00:10:01.700
pile average you can include you want to
make sure that whatever you ship to your

00:10:01.700 --> 00:10:01.710
make sure that whatever you ship to your
 

00:10:01.710 --> 00:10:03.590
make sure that whatever you ship to your
clients is only the needed bits not all

00:10:03.590 --> 00:10:03.600
clients is only the needed bits not all
 

00:10:03.600 --> 00:10:05.770
clients is only the needed bits not all
the other stuff to do that we have an

00:10:05.770 --> 00:10:05.780
the other stuff to do that we have an
 

00:10:05.780 --> 00:10:07.670
the other stuff to do that we have an
implementation of an algorithm called

00:10:07.670 --> 00:10:07.680
implementation of an algorithm called
 

00:10:07.680 --> 00:10:10.190
implementation of an algorithm called
tree shaking in the compiler it works a

00:10:10.190 --> 00:10:10.200
tree shaking in the compiler it works a
 

00:10:10.200 --> 00:10:11.950
tree shaking in the compiler it works a
little something like this if you have a

00:10:11.950 --> 00:10:11.960
little something like this if you have a
 

00:10:11.960 --> 00:10:14.150
little something like this if you have a
application that has a main method and

00:10:14.150 --> 00:10:14.160
application that has a main method and
 

00:10:14.160 --> 00:10:16.910
application that has a main method and
perhaps a few other methods close by foo

00:10:16.910 --> 00:10:16.920
perhaps a few other methods close by foo
 

00:10:16.920 --> 00:10:18.890
perhaps a few other methods close by foo
and bass but it's only calling the foo

00:10:18.890 --> 00:10:18.900
and bass but it's only calling the foo
 

00:10:18.900 --> 00:10:21.470
and bass but it's only calling the foo
method and and maybe the foo method in

00:10:21.470 --> 00:10:21.480
method and and maybe the foo method in
 

00:10:21.480 --> 00:10:23.390
method and and maybe the foo method in
returns calls code pulled in from

00:10:23.390 --> 00:10:23.400
returns calls code pulled in from
 

00:10:23.400 --> 00:10:25.310
returns calls code pulled in from
another library the bar method on the on

00:10:25.310 --> 00:10:25.320
another library the bar method on the on
 

00:10:25.320 --> 00:10:27.500
another library the bar method on the on
the right the library might actually

00:10:27.500 --> 00:10:27.510
the right the library might actually
 

00:10:27.510 --> 00:10:29.690
the right the library might actually
have unused parts to like the boo

00:10:29.690 --> 00:10:29.700
have unused parts to like the boo
 

00:10:29.700 --> 00:10:31.730
have unused parts to like the boo
function here we want the dark J's

00:10:31.730 --> 00:10:31.740
function here we want the dark J's
 

00:10:31.740 --> 00:10:36.080
function here we want the dark J's
compiler and to actually take this set

00:10:36.080 --> 00:10:36.090
compiler and to actually take this set
 

00:10:36.090 --> 00:10:37.970
compiler and to actually take this set
of methods like the transitive closure

00:10:37.970 --> 00:10:37.980
of methods like the transitive closure
 

00:10:37.980 --> 00:10:39.920
of methods like the transitive closure
of everything that you you have

00:10:39.920 --> 00:10:39.930
of everything that you you have
 

00:10:39.930 --> 00:10:41.810
of everything that you you have
available to you and shake it real good

00:10:41.810 --> 00:10:41.820
available to you and shake it real good
 

00:10:41.820 --> 00:10:43.280
available to you and shake it real good
and get all the stuff that you actually

00:10:43.280 --> 00:10:43.290
and get all the stuff that you actually
 

00:10:43.290 --> 00:10:45.140
and get all the stuff that you actually
not using out of the system it's a

00:10:45.140 --> 00:10:45.150
not using out of the system it's a
 

00:10:45.150 --> 00:10:46.580
not using out of the system it's a
process called tree shaking we do that

00:10:46.580 --> 00:10:46.590
process called tree shaking we do that
 

00:10:46.590 --> 00:10:49.310
process called tree shaking we do that
and the result is a lot smaller it only

00:10:49.310 --> 00:10:49.320
and the result is a lot smaller it only
 

00:10:49.320 --> 00:10:51.200
and the result is a lot smaller it only
contains main foo and bar the needed

00:10:51.200 --> 00:10:51.210
contains main foo and bar the needed
 

00:10:51.210 --> 00:10:53.930
contains main foo and bar the needed
parts so to implement this in the

00:10:53.930 --> 00:10:53.940
parts so to implement this in the
 

00:10:53.940 --> 00:10:55.460
parts so to implement this in the
compiler we actually go through a few

00:10:55.460 --> 00:10:55.470
compiler we actually go through a few
 

00:10:55.470 --> 00:10:57.920
compiler we actually go through a few
steps first we read all your dark

00:10:57.920 --> 00:10:57.930
steps first we read all your dark
 

00:10:57.930 --> 00:11:00.070
steps first we read all your dark
sources we don't actually parse them a

00:11:00.070 --> 00:11:00.080
sources we don't actually parse them a
 

00:11:00.080 --> 00:11:02.690
sources we don't actually parse them a
fully we don't look into all the message

00:11:02.690 --> 00:11:02.700
fully we don't look into all the message
 

00:11:02.700 --> 00:11:02.960
fully we don't look into all the message
which

00:11:02.960 --> 00:11:02.970
which
 

00:11:02.970 --> 00:11:05.030
which
look at the structure of your code find

00:11:05.030 --> 00:11:05.040
look at the structure of your code find
 

00:11:05.040 --> 00:11:06.860
look at the structure of your code find
all the imports look at the libraries

00:11:06.860 --> 00:11:06.870
all the imports look at the libraries
 

00:11:06.870 --> 00:11:08.990
all the imports look at the libraries
that you you pen down and read those

00:11:08.990 --> 00:11:09.000
that you you pen down and read those
 

00:11:09.000 --> 00:11:10.850
that you you pen down and read those
into when we have everything read in

00:11:10.850 --> 00:11:10.860
into when we have everything read in
 

00:11:10.860 --> 00:11:12.050
into when we have everything read in
that way and we know the structure of

00:11:12.050 --> 00:11:12.060
that way and we know the structure of
 

00:11:12.060 --> 00:11:15.769
that way and we know the structure of
your code we can actually start in doing

00:11:15.769 --> 00:11:15.779
your code we can actually start in doing
 

00:11:15.779 --> 00:11:18.230
your code we can actually start in doing
this first level of tree shaking we have

00:11:18.230 --> 00:11:18.240
this first level of tree shaking we have
 

00:11:18.240 --> 00:11:19.879
this first level of tree shaking we have
two levels this is the first one and

00:11:19.879 --> 00:11:19.889
two levels this is the first one and
 

00:11:19.889 --> 00:11:21.379
two levels this is the first one and
this actually is what we call the

00:11:21.379 --> 00:11:21.389
this actually is what we call the
 

00:11:21.389 --> 00:11:23.569
this actually is what we call the
resolution tree shaking and resolution

00:11:23.569 --> 00:11:23.579
resolution tree shaking and resolution
 

00:11:23.579 --> 00:11:25.189
resolution tree shaking and resolution
is the process of not really compiling

00:11:25.189 --> 00:11:25.199
is the process of not really compiling
 

00:11:25.199 --> 00:11:27.079
is the process of not really compiling
code but just trying to figure out what

00:11:27.079 --> 00:11:27.089
code but just trying to figure out what
 

00:11:27.089 --> 00:11:28.400
code but just trying to figure out what
we're referring to at certain points in

00:11:28.400 --> 00:11:28.410
we're referring to at certain points in
 

00:11:28.410 --> 00:11:29.929
we're referring to at certain points in
the code so it actually starts by

00:11:29.929 --> 00:11:29.939
the code so it actually starts by
 

00:11:29.939 --> 00:11:31.790
the code so it actually starts by
looking at the main function and look at

00:11:31.790 --> 00:11:31.800
looking at the main function and look at
 

00:11:31.800 --> 00:11:33.559
looking at the main function and look at
what kind of flashy or instances of

00:11:33.559 --> 00:11:33.569
what kind of flashy or instances of
 

00:11:33.569 --> 00:11:34.910
what kind of flashy or instances of
which classes you allocate in there and

00:11:34.910 --> 00:11:34.920
which classes you allocate in there and
 

00:11:34.920 --> 00:11:36.889
which classes you allocate in there and
which other message you're calling all

00:11:36.889 --> 00:11:36.899
which other message you're calling all
 

00:11:36.899 --> 00:11:38.509
which other message you're calling all
those methods needs going to accuse that

00:11:38.509 --> 00:11:38.519
those methods needs going to accuse that
 

00:11:38.519 --> 00:11:40.460
those methods needs going to accuse that
we can process them parse them get them

00:11:40.460 --> 00:11:40.470
we can process them parse them get them
 

00:11:40.470 --> 00:11:42.319
we can process them parse them get them
resolved and you just keep doing that

00:11:42.319 --> 00:11:42.329
resolved and you just keep doing that
 

00:11:42.329 --> 00:11:44.119
resolved and you just keep doing that
until nothing new is added to the queue

00:11:44.119 --> 00:11:44.129
until nothing new is added to the queue
 

00:11:44.129 --> 00:11:46.220
until nothing new is added to the queue
and then you're done it's relatively

00:11:46.220 --> 00:11:46.230
and then you're done it's relatively
 

00:11:46.230 --> 00:11:47.929
and then you're done it's relatively
simple to do this and it gives us a good

00:11:47.929 --> 00:11:47.939
simple to do this and it gives us a good
 

00:11:47.939 --> 00:11:49.639
simple to do this and it gives us a good
approximation of like cutting down

00:11:49.639 --> 00:11:49.649
approximation of like cutting down
 

00:11:49.649 --> 00:11:51.740
approximation of like cutting down
everything but only based on method

00:11:51.740 --> 00:11:51.750
everything but only based on method
 

00:11:51.750 --> 00:11:53.569
everything but only based on method
names we can do a little bit better so

00:11:53.569 --> 00:11:53.579
names we can do a little bit better so
 

00:11:53.579 --> 00:11:54.679
names we can do a little bit better so
once you're done with that we actually

00:11:54.679 --> 00:11:54.689
once you're done with that we actually
 

00:11:54.689 --> 00:11:56.840
once you're done with that we actually
stop the process all over again in the

00:11:56.840 --> 00:11:56.850
stop the process all over again in the
 

00:11:56.850 --> 00:11:58.639
stop the process all over again in the
compilation queue and this is where we

00:11:58.639 --> 00:11:58.649
compilation queue and this is where we
 

00:11:58.649 --> 00:12:00.800
compilation queue and this is where we
actually will start looking at what you

00:12:00.800 --> 00:12:00.810
actually will start looking at what you
 

00:12:00.810 --> 00:12:03.139
actually will start looking at what you
really put inside your inside your

00:12:03.139 --> 00:12:03.149
really put inside your inside your
 

00:12:03.149 --> 00:12:05.480
really put inside your inside your
methods and do data flow analysis and we

00:12:05.480 --> 00:12:05.490
methods and do data flow analysis and we
 

00:12:05.490 --> 00:12:06.949
methods and do data flow analysis and we
will track how types flows through that

00:12:06.949 --> 00:12:06.959
will track how types flows through that
 

00:12:06.959 --> 00:12:08.840
will track how types flows through that
code and that gives us more information

00:12:08.840 --> 00:12:08.850
code and that gives us more information
 

00:12:08.850 --> 00:12:10.850
code and that gives us more information
about what you're actually needing it so

00:12:10.850 --> 00:12:10.860
about what you're actually needing it so
 

00:12:10.860 --> 00:12:13.009
about what you're actually needing it so
it submit and we do the last level of

00:12:13.009 --> 00:12:13.019
it submit and we do the last level of
 

00:12:13.019 --> 00:12:15.139
it submit and we do the last level of
the treating at that point the result is

00:12:15.139 --> 00:12:15.149
the treating at that point the result is
 

00:12:15.149 --> 00:12:17.269
the treating at that point the result is
that we do a really good job in making

00:12:17.269 --> 00:12:17.279
that we do a really good job in making
 

00:12:17.279 --> 00:12:18.170
that we do a really good job in making
sure that the things that you really

00:12:18.170 --> 00:12:18.180
sure that the things that you really
 

00:12:18.180 --> 00:12:19.730
sure that the things that you really
don't need are not pulled into your

00:12:19.730 --> 00:12:19.740
don't need are not pulled into your
 

00:12:19.740 --> 00:12:22.340
don't need are not pulled into your
application finally we actually emit the

00:12:22.340 --> 00:12:22.350
application finally we actually emit the
 

00:12:22.350 --> 00:12:25.490
application finally we actually emit the
code to a single jas file so you can run

00:12:25.490 --> 00:12:25.500
code to a single jas file so you can run
 

00:12:25.500 --> 00:12:27.619
code to a single jas file so you can run
it in your browser fairly simple stuff I

00:12:27.619 --> 00:12:27.629
it in your browser fairly simple stuff I
 

00:12:27.629 --> 00:12:28.910
it in your browser fairly simple stuff I
love this because this is the tools

00:12:28.910 --> 00:12:28.920
love this because this is the tools
 

00:12:28.920 --> 00:12:30.379
love this because this is the tools
helping me I mean I don't need to be

00:12:30.379 --> 00:12:30.389
helping me I mean I don't need to be
 

00:12:30.389 --> 00:12:32.030
helping me I mean I don't need to be
crafting my application I just let the

00:12:32.030 --> 00:12:32.040
crafting my application I just let the
 

00:12:32.040 --> 00:12:34.009
crafting my application I just let the
tool analyze my program take care of it

00:12:34.009 --> 00:12:34.019
tool analyze my program take care of it
 

00:12:34.019 --> 00:12:36.949
tool analyze my program take care of it
that's the way it should be so let's

00:12:36.949 --> 00:12:36.959
that's the way it should be so let's
 

00:12:36.959 --> 00:12:38.360
that's the way it should be so let's
take a look at how this actually works

00:12:38.360 --> 00:12:38.370
take a look at how this actually works
 

00:12:38.370 --> 00:12:40.309
take a look at how this actually works
in practice just to give you a feel for

00:12:40.309 --> 00:12:40.319
in practice just to give you a feel for
 

00:12:40.319 --> 00:12:42.949
in practice just to give you a feel for
how dark jas does it's magic I'm going

00:12:42.949 --> 00:12:42.959
how dark jas does it's magic I'm going
 

00:12:42.959 --> 00:12:46.400
how dark jas does it's magic I'm going
to dive into a well-known and algorithm

00:12:46.400 --> 00:12:46.410
to dive into a well-known and algorithm
 

00:12:46.410 --> 00:12:48.170
to dive into a well-known and algorithm
it's a constraint solving algorithm the

00:12:48.170 --> 00:12:48.180
it's a constraint solving algorithm the
 

00:12:48.180 --> 00:12:49.369
it's a constraint solving algorithm the
right the reason why I'm choosing this

00:12:49.369 --> 00:12:49.379
right the reason why I'm choosing this
 

00:12:49.379 --> 00:12:51.579
right the reason why I'm choosing this
one is that it's a well-understood and

00:12:51.579 --> 00:12:51.589
one is that it's a well-understood and
 

00:12:51.589 --> 00:12:53.960
one is that it's a well-understood and
piece of code it's been used to

00:12:53.960 --> 00:12:53.970
piece of code it's been used to
 

00:12:53.970 --> 00:12:55.670
piece of code it's been used to
benchmark lots of different language

00:12:55.670 --> 00:12:55.680
benchmark lots of different language
 

00:12:55.680 --> 00:12:57.410
benchmark lots of different language
limitations over the years it's actually

00:12:57.410 --> 00:12:57.420
limitations over the years it's actually
 

00:12:57.420 --> 00:12:59.960
limitations over the years it's actually
part of the the octane benchmark Linus

00:12:59.960 --> 00:12:59.970
part of the the octane benchmark Linus
 

00:12:59.970 --> 00:13:01.579
part of the the octane benchmark Linus
mentioned this morning so it's a

00:13:01.579 --> 00:13:01.589
mentioned this morning so it's a
 

00:13:01.589 --> 00:13:02.990
mentioned this morning so it's a
well-known piece of code it is

00:13:02.990 --> 00:13:03.000
well-known piece of code it is
 

00:13:03.000 --> 00:13:05.660
well-known piece of code it is
structured it has inheritance and

00:13:05.660 --> 00:13:05.670
structured it has inheritance and
 

00:13:05.670 --> 00:13:08.420
structured it has inheritance and
classes and and everything we need to do

00:13:08.420 --> 00:13:08.430
classes and and everything we need to do
 

00:13:08.430 --> 00:13:09.799
classes and and everything we need to do
I should do a good job and making your

00:13:09.799 --> 00:13:09.809
I should do a good job and making your
 

00:13:09.809 --> 00:13:11.419
I should do a good job and making your
code run fast so let's take a look at it

00:13:11.419 --> 00:13:11.429
code run fast so let's take a look at it
 

00:13:11.429 --> 00:13:13.309
code run fast so let's take a look at it
Delta blues a constraint solver what

00:13:13.309 --> 00:13:13.319
Delta blues a constraint solver what
 

00:13:13.319 --> 00:13:15.350
Delta blues a constraint solver what
does that mean well basically it's a

00:13:15.350 --> 00:13:15.360
does that mean well basically it's a
 

00:13:15.360 --> 00:13:16.930
does that mean well basically it's a
fairly abstract thing

00:13:16.930 --> 00:13:16.940
fairly abstract thing
 

00:13:16.940 --> 00:13:20.140
fairly abstract thing
works on and constraints on variables

00:13:20.140 --> 00:13:20.150
works on and constraints on variables
 

00:13:20.150 --> 00:13:22.810
works on and constraints on variables
constraints can be like one or a one-way

00:13:22.810 --> 00:13:22.820
constraints can be like one or a one-way
 

00:13:22.820 --> 00:13:24.730
constraints can be like one or a one-way
or two-way their binary or unary

00:13:24.730 --> 00:13:24.740
or two-way their binary or unary
 

00:13:24.740 --> 00:13:27.070
or two-way their binary or unary
constraints of different kinds and they

00:13:27.070 --> 00:13:27.080
constraints of different kinds and they
 

00:13:27.080 --> 00:13:28.780
constraints of different kinds and they
can be used to post for instance model

00:13:28.780 --> 00:13:28.790
can be used to post for instance model
 

00:13:28.790 --> 00:13:30.580
can be used to post for instance model
the constraints involved in laying out

00:13:30.580 --> 00:13:30.590
the constraints involved in laying out
 

00:13:30.590 --> 00:13:32.440
the constraints involved in laying out
something on your screen I'm pretty sure

00:13:32.440 --> 00:13:32.450
something on your screen I'm pretty sure
 

00:13:32.450 --> 00:13:34.030
something on your screen I'm pretty sure
that some of the things you just heard

00:13:34.030 --> 00:13:34.040
that some of the things you just heard
 

00:13:34.040 --> 00:13:36.160
that some of the things you just heard
about from Eric actually uses constraint

00:13:36.160 --> 00:13:36.170
about from Eric actually uses constraint
 

00:13:36.170 --> 00:13:37.720
about from Eric actually uses constraint
and think that that internally one when

00:13:37.720 --> 00:13:37.730
and think that that internally one when
 

00:13:37.730 --> 00:13:39.610
and think that that internally one when
building layout so Delta blues an

00:13:39.610 --> 00:13:39.620
building layout so Delta blues an
 

00:13:39.620 --> 00:13:41.830
building layout so Delta blues an
implementation of such a beast it uses

00:13:41.830 --> 00:13:41.840
implementation of such a beast it uses
 

00:13:41.840 --> 00:13:43.450
implementation of such a beast it uses
constraints and there's a nice hierarchy

00:13:43.450 --> 00:13:43.460
constraints and there's a nice hierarchy
 

00:13:43.460 --> 00:13:44.470
constraints and there's a nice hierarchy
of them with unary and binary

00:13:44.470 --> 00:13:44.480
of them with unary and binary
 

00:13:44.480 --> 00:13:47.140
of them with unary and binary
constraints and and variables let me

00:13:47.140 --> 00:13:47.150
constraints and and variables let me
 

00:13:47.150 --> 00:13:48.400
constraints and and variables let me
show you a piece of code from this thing

00:13:48.400 --> 00:13:48.410
show you a piece of code from this thing
 

00:13:48.410 --> 00:13:51.280
show you a piece of code from this thing
to make a little bit more concrete this

00:13:51.280 --> 00:13:51.290
to make a little bit more concrete this
 

00:13:51.290 --> 00:13:53.170
to make a little bit more concrete this
is a function from the from the Delta

00:13:53.170 --> 00:13:53.180
is a function from the from the Delta
 

00:13:53.180 --> 00:13:55.750
is a function from the from the Delta
blue algorithm it's fairly simple you

00:13:55.750 --> 00:13:55.760
blue algorithm it's fairly simple you
 

00:13:55.760 --> 00:13:57.010
blue algorithm it's fairly simple you
don't have to understand all the details

00:13:57.010 --> 00:13:57.020
don't have to understand all the details
 

00:13:57.020 --> 00:13:59.860
don't have to understand all the details
here but just note that the way work

00:13:59.860 --> 00:13:59.870
here but just note that the way work
 

00:13:59.870 --> 00:14:02.620
here but just note that the way work
series that you take a variable V and

00:14:02.620 --> 00:14:02.630
series that you take a variable V and
 

00:14:02.630 --> 00:14:03.850
series that you take a variable V and
you try to figure out all the

00:14:03.850 --> 00:14:03.860
you try to figure out all the
 

00:14:03.860 --> 00:14:05.470
you try to figure out all the
constraints that actually consume that

00:14:05.470 --> 00:14:05.480
constraints that actually consume that
 

00:14:05.480 --> 00:14:08.140
constraints that actually consume that
variable and put them in a list that

00:14:08.140 --> 00:14:08.150
variable and put them in a list that
 

00:14:08.150 --> 00:14:09.390
variable and put them in a list that
it's also passed in as a parameter

00:14:09.390 --> 00:14:09.400
it's also passed in as a parameter
 

00:14:09.400 --> 00:14:11.830
it's also passed in as a parameter
hopefully this code is reasonably

00:14:11.830 --> 00:14:11.840
hopefully this code is reasonably
 

00:14:11.840 --> 00:14:14.980
hopefully this code is reasonably
readable to you and it's dart code and

00:14:14.980 --> 00:14:14.990
readable to you and it's dart code and
 

00:14:14.990 --> 00:14:17.590
readable to you and it's dart code and
to me this looks like what I represented

00:14:17.590 --> 00:14:17.600
to me this looks like what I represented
 

00:14:17.600 --> 00:14:19.780
to me this looks like what I represented
a code a lot of us would write yeah so

00:14:19.780 --> 00:14:19.790
a code a lot of us would write yeah so
 

00:14:19.790 --> 00:14:22.060
a code a lot of us would write yeah so
am in Dart we have an optional static

00:14:22.060 --> 00:14:22.070
am in Dart we have an optional static
 

00:14:22.070 --> 00:14:24.010
am in Dart we have an optional static
type system so you do not have to write

00:14:24.010 --> 00:14:24.020
type system so you do not have to write
 

00:14:24.020 --> 00:14:25.720
type system so you do not have to write
the types if you do they don't want to

00:14:25.720 --> 00:14:25.730
the types if you do they don't want to
 

00:14:25.730 --> 00:14:27.670
the types if you do they don't want to
sometimes it's nicely with the document

00:14:27.670 --> 00:14:27.680
sometimes it's nicely with the document
 

00:14:27.680 --> 00:14:29.350
sometimes it's nicely with the document
what a pair under means which you I

00:14:29.350 --> 00:14:29.360
what a pair under means which you I
 

00:14:29.360 --> 00:14:31.090
what a pair under means which you I
didn't done it here but it's important

00:14:31.090 --> 00:14:31.100
didn't done it here but it's important
 

00:14:31.100 --> 00:14:34.120
didn't done it here but it's important
to us to to make it clear that the the

00:14:34.120 --> 00:14:34.130
to us to to make it clear that the the
 

00:14:34.130 --> 00:14:35.860
to us to to make it clear that the the
types that you put in are not actually

00:14:35.860 --> 00:14:35.870
types that you put in are not actually
 

00:14:35.870 --> 00:14:37.660
types that you put in are not actually
used for optimization purposes because

00:14:37.660 --> 00:14:37.670
used for optimization purposes because
 

00:14:37.670 --> 00:14:40.810
used for optimization purposes because
we don't really know if you want to type

00:14:40.810 --> 00:14:40.820
we don't really know if you want to type
 

00:14:40.820 --> 00:14:41.950
we don't really know if you want to type
them in so we don't want to force you

00:14:41.950 --> 00:14:41.960
them in so we don't want to force you
 

00:14:41.960 --> 00:14:43.570
them in so we don't want to force you
into typing them in the place where you

00:14:43.570 --> 00:14:43.580
into typing them in the place where you
 

00:14:43.580 --> 00:14:45.070
into typing them in the place where you
don't want to so I can go ahead and

00:14:45.070 --> 00:14:45.080
don't want to so I can go ahead and
 

00:14:45.080 --> 00:14:46.720
don't want to so I can go ahead and
remove them and they might have to be

00:14:46.720 --> 00:14:46.730
remove them and they might have to be
 

00:14:46.730 --> 00:14:48.480
remove them and they might have to be
incorrect they could be incorrect yeah

00:14:48.480 --> 00:14:48.490
incorrect they could be incorrect yeah
 

00:14:48.490 --> 00:14:50.560
incorrect they could be incorrect yeah
anyway I've gone ahead and removed the

00:14:50.560 --> 00:14:50.570
anyway I've gone ahead and removed the
 

00:14:50.570 --> 00:14:53.230
anyway I've gone ahead and removed the
types the semantics of this algorithm is

00:14:53.230 --> 00:14:53.240
types the semantics of this algorithm is
 

00:14:53.240 --> 00:14:54.790
types the semantics of this algorithm is
exactly the same no differences at all

00:14:54.790 --> 00:14:54.800
exactly the same no differences at all
 

00:14:54.800 --> 00:14:57.100
exactly the same no differences at all
it's just a little bit shorter and maybe

00:14:57.100 --> 00:14:57.110
it's just a little bit shorter and maybe
 

00:14:57.110 --> 00:14:58.420
it's just a little bit shorter and maybe
a little bit harder to understand but

00:14:58.420 --> 00:14:58.430
a little bit harder to understand but
 

00:14:58.430 --> 00:15:00.550
a little bit harder to understand but
anyway the code is there it's the same

00:15:00.550 --> 00:15:00.560
anyway the code is there it's the same
 

00:15:00.560 --> 00:15:01.450
anyway the code is there it's the same
thing and this is what we're going to

00:15:01.450 --> 00:15:01.460
thing and this is what we're going to
 

00:15:01.460 --> 00:15:05.500
thing and this is what we're going to
try to optimize so first attempt

00:15:05.500 --> 00:15:05.510
try to optimize so first attempt
 

00:15:05.510 --> 00:15:06.820
try to optimize so first attempt
actually compound this code to

00:15:06.820 --> 00:15:06.830
actually compound this code to
 

00:15:06.830 --> 00:15:10.300
actually compound this code to
javascript is somewhat large so this is

00:15:10.300 --> 00:15:10.310
javascript is somewhat large so this is
 

00:15:10.310 --> 00:15:11.770
javascript is somewhat large so this is
the unoptimized version of the the

00:15:11.770 --> 00:15:11.780
the unoptimized version of the the
 

00:15:11.780 --> 00:15:14.860
the unoptimized version of the the
method you just saw it it compiled two

00:15:14.860 --> 00:15:14.870
method you just saw it it compiled two
 

00:15:14.870 --> 00:15:16.660
method you just saw it it compiled two
out of five hundred and something

00:15:16.660 --> 00:15:16.670
out of five hundred and something
 

00:15:16.670 --> 00:15:18.550
out of five hundred and something
characters it's a little bit too long I

00:15:18.550 --> 00:15:18.560
characters it's a little bit too long I
 

00:15:18.560 --> 00:15:19.420
characters it's a little bit too long I
don't know I'm not even sure you can

00:15:19.420 --> 00:15:19.430
don't know I'm not even sure you can
 

00:15:19.430 --> 00:15:21.579
don't know I'm not even sure you can
read it in the back of the other hand of

00:15:21.579 --> 00:15:21.589
read it in the back of the other hand of
 

00:15:21.589 --> 00:15:24.820
read it in the back of the other hand of
the whole here but it works it has the

00:15:24.820 --> 00:15:24.830
the whole here but it works it has the
 

00:15:24.830 --> 00:15:26.560
the whole here but it works it has the
right semantics everything works as

00:15:26.560 --> 00:15:26.570
right semantics everything works as
 

00:15:26.570 --> 00:15:29.680
right semantics everything works as
specified and it runs reasonably well

00:15:29.680 --> 00:15:29.690
specified and it runs reasonably well
 

00:15:29.690 --> 00:15:30.519
specified and it runs reasonably well
but it

00:15:30.519 --> 00:15:30.529
but it
 

00:15:30.529 --> 00:15:32.559
but it
I hope you agree it's simply not good

00:15:32.559 --> 00:15:32.569
I hope you agree it's simply not good
 

00:15:32.569 --> 00:15:34.300
I hope you agree it's simply not good
enough like we want to do a lot better

00:15:34.300 --> 00:15:34.310
enough like we want to do a lot better
 

00:15:34.310 --> 00:15:36.939
enough like we want to do a lot better
so let's try to dive into how we

00:15:36.939 --> 00:15:36.949
so let's try to dive into how we
 

00:15:36.949 --> 00:15:39.249
so let's try to dive into how we
actually do better than just this blob

00:15:39.249 --> 00:15:39.259
actually do better than just this blob
 

00:15:39.259 --> 00:15:40.629
actually do better than just this blob
of code even though the semantics is

00:15:40.629 --> 00:15:40.639
of code even though the semantics is
 

00:15:40.639 --> 00:15:42.100
of code even though the semantics is
really important to us we also really

00:15:42.100 --> 00:15:42.110
really important to us we also really
 

00:15:42.110 --> 00:15:45.309
really important to us we also really
care about performance so what makes

00:15:45.309 --> 00:15:45.319
care about performance so what makes
 

00:15:45.319 --> 00:15:47.379
care about performance so what makes
this big well this is just one of

00:15:47.379 --> 00:15:47.389
this big well this is just one of
 

00:15:47.389 --> 00:15:49.360
this big well this is just one of
examples one of the examples of why this

00:15:49.360 --> 00:15:49.370
examples one of the examples of why this
 

00:15:49.370 --> 00:15:50.739
examples one of the examples of why this
code is a little bit bigger what we'd

00:15:50.739 --> 00:15:50.749
code is a little bit bigger what we'd
 

00:15:50.749 --> 00:15:53.920
code is a little bit bigger what we'd
like so SF mentioned we have strict

00:15:53.920 --> 00:15:53.930
like so SF mentioned we have strict
 

00:15:53.930 --> 00:15:55.509
like so SF mentioned we have strict
cement is about how what you can compare

00:15:55.509 --> 00:15:55.519
cement is about how what you can compare
 

00:15:55.519 --> 00:15:57.460
cement is about how what you can compare
two numbers for instance so we don't

00:15:57.460 --> 00:15:57.470
two numbers for instance so we don't
 

00:15:57.470 --> 00:15:59.530
two numbers for instance so we don't
want to run into issues when you end up

00:15:59.530 --> 00:15:59.540
want to run into issues when you end up
 

00:15:59.540 --> 00:16:01.210
want to run into issues when you end up
emitting JavaScript code that just ends

00:16:01.210 --> 00:16:01.220
emitting JavaScript code that just ends
 

00:16:01.220 --> 00:16:02.799
emitting JavaScript code that just ends
up comparing numbers and strengths for

00:16:02.799 --> 00:16:02.809
up comparing numbers and strengths for
 

00:16:02.809 --> 00:16:04.809
up comparing numbers and strengths for
instance because we don't really want to

00:16:04.809 --> 00:16:04.819
instance because we don't really want to
 

00:16:04.819 --> 00:16:06.879
instance because we don't really want to
rely on that behavior so in this case

00:16:06.879 --> 00:16:06.889
rely on that behavior so in this case
 

00:16:06.889 --> 00:16:09.639
rely on that behavior so in this case
we're reading see if I can get this to

00:16:09.639 --> 00:16:09.649
we're reading see if I can get this to
 

00:16:09.649 --> 00:16:11.860
we're reading see if I can get this to
progress there we go so we're reading

00:16:11.860 --> 00:16:11.870
progress there we go so we're reading
 

00:16:11.870 --> 00:16:13.449
progress there we go so we're reading
the length of something that that

00:16:13.449 --> 00:16:13.459
the length of something that that
 

00:16:13.459 --> 00:16:14.710
the length of something that that
probably isn't array we're not quite

00:16:14.710 --> 00:16:14.720
probably isn't array we're not quite
 

00:16:14.720 --> 00:16:16.119
probably isn't array we're not quite
sure so we don't know that the link is

00:16:16.119 --> 00:16:16.129
sure so we don't know that the link is
 

00:16:16.129 --> 00:16:19.389
sure so we don't know that the link is
actually a number so before we continue

00:16:19.389 --> 00:16:19.399
actually a number so before we continue
 

00:16:19.399 --> 00:16:21.579
actually a number so before we continue
to actually compare this length against

00:16:21.579 --> 00:16:21.589
to actually compare this length against
 

00:16:21.589 --> 00:16:23.739
to actually compare this length against
a real number we have to make sure that

00:16:23.739 --> 00:16:23.749
a real number we have to make sure that
 

00:16:23.749 --> 00:16:26.590
a real number we have to make sure that
it actually is a number so we enter

00:16:26.590 --> 00:16:26.600
it actually is a number so we enter
 

00:16:26.600 --> 00:16:28.269
it actually is a number so we enter
insert an explicit check in the code

00:16:28.269 --> 00:16:28.279
insert an explicit check in the code
 

00:16:28.279 --> 00:16:30.249
insert an explicit check in the code
that makes sure that we don't end up

00:16:30.249 --> 00:16:30.259
that makes sure that we don't end up
 

00:16:30.259 --> 00:16:33.429
that makes sure that we don't end up
relying on this somewhat surprising

00:16:33.429 --> 00:16:33.439
relying on this somewhat surprising
 

00:16:33.439 --> 00:16:34.629
relying on this somewhat surprising
behavior of JavaScript where you can

00:16:34.629 --> 00:16:34.639
behavior of JavaScript where you can
 

00:16:34.639 --> 00:16:36.040
behavior of JavaScript where you can
compare numbers against strings and get

00:16:36.040 --> 00:16:36.050
compare numbers against strings and get
 

00:16:36.050 --> 00:16:38.860
compare numbers against strings and get
some result out so this adds code more

00:16:38.860 --> 00:16:38.870
some result out so this adds code more
 

00:16:38.870 --> 00:16:41.439
some result out so this adds code more
checks so our challenge is fairly simple

00:16:41.439 --> 00:16:41.449
checks so our challenge is fairly simple
 

00:16:41.449 --> 00:16:43.740
checks so our challenge is fairly simple
we want to have clean semantics

00:16:43.740 --> 00:16:43.750
we want to have clean semantics
 

00:16:43.750 --> 00:16:45.999
we want to have clean semantics
unsurprising behavior but we do not

00:16:45.999 --> 00:16:46.009
unsurprising behavior but we do not
 

00:16:46.009 --> 00:16:47.319
unsurprising behavior but we do not
really want those extra checks when

00:16:47.319 --> 00:16:47.329
really want those extra checks when
 

00:16:47.329 --> 00:16:48.549
really want those extra checks when
you're compiling to JavaScript so how

00:16:48.549 --> 00:16:48.559
you're compiling to JavaScript so how
 

00:16:48.559 --> 00:16:51.850
you're compiling to JavaScript so how
can we go about doing that the trick is

00:16:51.850 --> 00:16:51.860
can we go about doing that the trick is
 

00:16:51.860 --> 00:16:54.850
can we go about doing that the trick is
right behind me global optimizations so

00:16:54.850 --> 00:16:54.860
right behind me global optimizations so
 

00:16:54.860 --> 00:16:58.360
right behind me global optimizations so
we really need to do better and we need

00:16:58.360 --> 00:16:58.370
we really need to do better and we need
 

00:16:58.370 --> 00:17:00.069
we really need to do better and we need
to do like more aggressive optimization

00:17:00.069 --> 00:17:00.079
to do like more aggressive optimization
 

00:17:00.079 --> 00:17:01.629
to do like more aggressive optimization
from the code to make it end up being

00:17:01.629 --> 00:17:01.639
from the code to make it end up being
 

00:17:01.639 --> 00:17:04.389
from the code to make it end up being
very fast and very good so let's look at

00:17:04.389 --> 00:17:04.399
very fast and very good so let's look at
 

00:17:04.399 --> 00:17:08.500
very fast and very good so let's look at
that first up dart is structured it has

00:17:08.500 --> 00:17:08.510
that first up dart is structured it has
 

00:17:08.510 --> 00:17:11.500
that first up dart is structured it has
classes it has methods it has a good

00:17:11.500 --> 00:17:11.510
classes it has methods it has a good
 

00:17:11.510 --> 00:17:13.000
classes it has methods it has a good
structure we can actually do whole

00:17:13.000 --> 00:17:13.010
structure we can actually do whole
 

00:17:13.010 --> 00:17:15.069
structure we can actually do whole
program analysis so when we compile the

00:17:15.069 --> 00:17:15.079
program analysis so when we compile the
 

00:17:15.079 --> 00:17:16.990
program analysis so when we compile the
program we can look at every single bit

00:17:16.990 --> 00:17:17.000
program we can look at every single bit
 

00:17:17.000 --> 00:17:18.340
program we can look at every single bit
in it and we can actually understand

00:17:18.340 --> 00:17:18.350
in it and we can actually understand
 

00:17:18.350 --> 00:17:20.289
in it and we can actually understand
what's going on that's a huge win for us

00:17:20.289 --> 00:17:20.299
what's going on that's a huge win for us
 

00:17:20.299 --> 00:17:22.389
what's going on that's a huge win for us
this allows us to actually do code

00:17:22.389 --> 00:17:22.399
this allows us to actually do code
 

00:17:22.399 --> 00:17:24.039
this allows us to actually do code
navigation and great refactoring tools

00:17:24.039 --> 00:17:24.049
navigation and great refactoring tools
 

00:17:24.049 --> 00:17:27.039
navigation and great refactoring tools
but maybe even more and more dear to my

00:17:27.039 --> 00:17:27.049
but maybe even more and more dear to my
 

00:17:27.049 --> 00:17:28.960
but maybe even more and more dear to my
heart is that we can also do a global

00:17:28.960 --> 00:17:28.970
heart is that we can also do a global
 

00:17:28.970 --> 00:17:30.760
heart is that we can also do a global
comparison optimizations so we can

00:17:30.760 --> 00:17:30.770
comparison optimizations so we can
 

00:17:30.770 --> 00:17:32.590
comparison optimizations so we can
actually analyze your code understand

00:17:32.590 --> 00:17:32.600
actually analyze your code understand
 

00:17:32.600 --> 00:17:34.960
actually analyze your code understand
the dependence between things may be so

00:17:34.960 --> 00:17:34.970
the dependence between things may be so
 

00:17:34.970 --> 00:17:36.130
the dependence between things may be so
certain extent better than what you

00:17:36.130 --> 00:17:36.140
certain extent better than what you
 

00:17:36.140 --> 00:17:37.299
certain extent better than what you
actually care to do yourself as a

00:17:37.299 --> 00:17:37.309
actually care to do yourself as a
 

00:17:37.309 --> 00:17:39.220
actually care to do yourself as a
developer and then we can optimize based

00:17:39.220 --> 00:17:39.230
developer and then we can optimize based
 

00:17:39.230 --> 00:17:42.460
developer and then we can optimize based
on that it's pretty powerful one of the

00:17:42.460 --> 00:17:42.470
on that it's pretty powerful one of the
 

00:17:42.470 --> 00:17:43.690
on that it's pretty powerful one of the
things that we do and one of things that

00:17:43.690 --> 00:17:43.700
things that we do and one of things that
 

00:17:43.700 --> 00:17:44.230
things that we do and one of things that
really were

00:17:44.230 --> 00:17:44.240
really were
 

00:17:44.240 --> 00:17:45.730
really were
well for something like delta blue and

00:17:45.730 --> 00:17:45.740
well for something like delta blue and
 

00:17:45.740 --> 00:17:47.770
well for something like delta blue and
for most applications in general is that

00:17:47.770 --> 00:17:47.780
for most applications in general is that
 

00:17:47.780 --> 00:17:50.500
for most applications in general is that
we infer types we compute what types we

00:17:50.500 --> 00:17:50.510
we infer types we compute what types we
 

00:17:50.510 --> 00:17:52.810
we infer types we compute what types we
actually will see at runtime at

00:17:52.810 --> 00:17:52.820
actually will see at runtime at
 

00:17:52.820 --> 00:17:54.910
actually will see at runtime at
different points in the code in the way

00:17:54.910 --> 00:17:54.920
different points in the code in the way
 

00:17:54.920 --> 00:17:57.070
different points in the code in the way
that works is here's a simple example of

00:17:57.070 --> 00:17:57.080
that works is here's a simple example of
 

00:17:57.080 --> 00:17:59.290
that works is here's a simple example of
how that works main function calls foo

00:17:59.290 --> 00:17:59.300
how that works main function calls foo
 

00:17:59.300 --> 00:18:02.110
how that works main function calls foo
that cause a bar that calls foo again

00:18:02.110 --> 00:18:02.120
that cause a bar that calls foo again
 

00:18:02.120 --> 00:18:03.880
that cause a bar that calls foo again
basically so a bunch of function is

00:18:03.880 --> 00:18:03.890
basically so a bunch of function is
 

00:18:03.890 --> 00:18:05.410
basically so a bunch of function is
calling each other so how do we infer

00:18:05.410 --> 00:18:05.420
calling each other so how do we infer
 

00:18:05.420 --> 00:18:06.760
calling each other so how do we infer
types for the parameters of these things

00:18:06.760 --> 00:18:06.770
types for the parameters of these things
 

00:18:06.770 --> 00:18:08.230
types for the parameters of these things
how do we get the compiler more

00:18:08.230 --> 00:18:08.240
how do we get the compiler more
 

00:18:08.240 --> 00:18:10.330
how do we get the compiler more
information well we start by looking at

00:18:10.330 --> 00:18:10.340
information well we start by looking at
 

00:18:10.340 --> 00:18:12.400
information well we start by looking at
main so it's very simple and by

00:18:12.400 --> 00:18:12.410
main so it's very simple and by
 

00:18:12.410 --> 00:18:14.020
main so it's very simple and by
analyzing main we can see that foo is

00:18:14.020 --> 00:18:14.030
analyzing main we can see that foo is
 

00:18:14.030 --> 00:18:15.340
analyzing main we can see that foo is
actually called with a ninja 2 parameter

00:18:15.340 --> 00:18:15.350
actually called with a ninja 2 parameter
 

00:18:15.350 --> 00:18:17.799
actually called with a ninja 2 parameter
ok so far so good so we analyze foo

00:18:17.799 --> 00:18:17.809
ok so far so good so we analyze foo
 

00:18:17.809 --> 00:18:19.510
ok so far so good so we analyze foo
under the assumption that is called with

00:18:19.510 --> 00:18:19.520
under the assumption that is called with
 

00:18:19.520 --> 00:18:20.650
under the assumption that is called with
an inch of parameter do we learn

00:18:20.650 --> 00:18:20.660
an inch of parameter do we learn
 

00:18:20.660 --> 00:18:22.630
an inch of parameter do we learn
something from that sure bar is so

00:18:22.630 --> 00:18:22.640
something from that sure bar is so
 

00:18:22.640 --> 00:18:23.980
something from that sure bar is so
apparently also called one entry

00:18:23.980 --> 00:18:23.990
apparently also called one entry
 

00:18:23.990 --> 00:18:26.260
apparently also called one entry
parameter so far so good we can continue

00:18:26.260 --> 00:18:26.270
parameter so far so good we can continue
 

00:18:26.270 --> 00:18:27.970
parameter so far so good we can continue
this game a little bit so we end up in

00:18:27.970 --> 00:18:27.980
this game a little bit so we end up in
 

00:18:27.980 --> 00:18:30.910
this game a little bit so we end up in
bar and we realize that if bar is called

00:18:30.910 --> 00:18:30.920
bar and we realize that if bar is called
 

00:18:30.920 --> 00:18:32.290
bar and we realize that if bar is called
with an initiative parameter then it

00:18:32.290 --> 00:18:32.300
with an initiative parameter then it
 

00:18:32.300 --> 00:18:33.970
with an initiative parameter then it
ends up calling foo with a string

00:18:33.970 --> 00:18:33.980
ends up calling foo with a string
 

00:18:33.980 --> 00:18:35.830
ends up calling foo with a string
interpolated version of that parameter

00:18:35.830 --> 00:18:35.840
interpolated version of that parameter
 

00:18:35.840 --> 00:18:38.530
interpolated version of that parameter
which is a string so foods now call with

00:18:38.530 --> 00:18:38.540
which is a string so foods now call with
 

00:18:38.540 --> 00:18:40.090
which is a string so foods now call with
the string too so we have to go back and

00:18:40.090 --> 00:18:40.100
the string too so we have to go back and
 

00:18:40.100 --> 00:18:42.370
the string too so we have to go back and
iterate so who is now apparently also

00:18:42.370 --> 00:18:42.380
iterate so who is now apparently also
 

00:18:42.380 --> 00:18:44.230
iterate so who is now apparently also
called a string that means bar is called

00:18:44.230 --> 00:18:44.240
called a string that means bar is called
 

00:18:44.240 --> 00:18:46.630
called a string that means bar is called
referring to and finally inside the bar

00:18:46.630 --> 00:18:46.640
referring to and finally inside the bar
 

00:18:46.640 --> 00:18:48.580
referring to and finally inside the bar
method we realize that that means the

00:18:48.580 --> 00:18:48.590
method we realize that that means the
 

00:18:48.590 --> 00:18:50.770
method we realize that that means the
print is caught with a string so far so

00:18:50.770 --> 00:18:50.780
print is caught with a string so far so
 

00:18:50.780 --> 00:18:52.840
print is caught with a string so far so
good all in all the compiler can

00:18:52.840 --> 00:18:52.850
good all in all the compiler can
 

00:18:52.850 --> 00:18:56.530
good all in all the compiler can
actually conclude that x and y are both

00:18:56.530 --> 00:18:56.540
actually conclude that x and y are both
 

00:18:56.540 --> 00:18:59.049
actually conclude that x and y are both
either integers or strings this is a

00:18:59.049 --> 00:18:59.059
either integers or strings this is a
 

00:18:59.059 --> 00:19:01.180
either integers or strings this is a
very very simple example but their works

00:19:01.180 --> 00:19:01.190
very very simple example but their works
 

00:19:01.190 --> 00:19:02.680
very very simple example but their works
really well in practice for for large

00:19:02.680 --> 00:19:02.690
really well in practice for for large
 

00:19:02.690 --> 00:19:06.580
really well in practice for for large
apps too so let's look at Delta blue and

00:19:06.580 --> 00:19:06.590
apps too so let's look at Delta blue and
 

00:19:06.590 --> 00:19:07.990
apps too so let's look at Delta blue and
see how that actually works there it's

00:19:07.990 --> 00:19:08.000
see how that actually works there it's
 

00:19:08.000 --> 00:19:09.760
see how that actually works there it's
pretty simple so there are a couple of

00:19:09.760 --> 00:19:09.770
pretty simple so there are a couple of
 

00:19:09.770 --> 00:19:12.010
pretty simple so there are a couple of
things do we want to infer tax for for

00:19:12.010 --> 00:19:12.020
things do we want to infer tax for for
 

00:19:12.020 --> 00:19:14.380
things do we want to infer tax for for
instance the two parameters a B and call

00:19:14.380 --> 00:19:14.390
instance the two parameters a B and call
 

00:19:14.390 --> 00:19:17.440
instance the two parameters a B and call
and the the infer actually does that by

00:19:17.440 --> 00:19:17.450
and the the infer actually does that by
 

00:19:17.450 --> 00:19:18.820
and the the infer actually does that by
looking at all the call sites that call

00:19:18.820 --> 00:19:18.830
looking at all the call sites that call
 

00:19:18.830 --> 00:19:20.560
looking at all the call sites that call
at constraints consuming too and we

00:19:20.560 --> 00:19:20.570
at constraints consuming too and we
 

00:19:20.570 --> 00:19:22.360
at constraints consuming too and we
actually learn that V is either null or

00:19:22.360 --> 00:19:22.370
actually learn that V is either null or
 

00:19:22.370 --> 00:19:26.260
actually learn that V is either null or
a variable and that call cannot be no it

00:19:26.260 --> 00:19:26.270
a variable and that call cannot be no it
 

00:19:26.270 --> 00:19:28.540
a variable and that call cannot be no it
always is a JavaScript array containing

00:19:28.540 --> 00:19:28.550
always is a JavaScript array containing
 

00:19:28.550 --> 00:19:30.430
always is a JavaScript array containing
only subclass the front of the class

00:19:30.430 --> 00:19:30.440
only subclass the front of the class
 

00:19:30.440 --> 00:19:32.740
only subclass the front of the class
constraint that's pretty powerful so

00:19:32.740 --> 00:19:32.750
constraint that's pretty powerful so
 

00:19:32.750 --> 00:19:35.799
constraint that's pretty powerful so
that's good to know for us the rest of

00:19:35.799 --> 00:19:35.809
that's good to know for us the rest of
 

00:19:35.809 --> 00:19:37.540
that's good to know for us the rest of
the method you can also be analyzed and

00:19:37.540 --> 00:19:37.550
the method you can also be analyzed and
 

00:19:37.550 --> 00:19:38.799
the method you can also be analyzed and
we can learn something about all these

00:19:38.799 --> 00:19:38.809
we can learn something about all these
 

00:19:38.809 --> 00:19:40.870
we can learn something about all these
concerts in there so we can actually get

00:19:40.870 --> 00:19:40.880
concerts in there so we can actually get
 

00:19:40.880 --> 00:19:42.700
concerts in there so we can actually get
a pretty full picture of what the types

00:19:42.700 --> 00:19:42.710
a pretty full picture of what the types
 

00:19:42.710 --> 00:19:44.830
a pretty full picture of what the types
in here are so I've just listed them

00:19:44.830 --> 00:19:44.840
in here are so I've just listed them
 

00:19:44.840 --> 00:19:46.240
in here are so I've just listed them
here you don't have to look at all the

00:19:46.240 --> 00:19:46.250
here you don't have to look at all the
 

00:19:46.250 --> 00:19:47.260
here you don't have to look at all the
details but this is very good

00:19:47.260 --> 00:19:47.270
details but this is very good
 

00:19:47.270 --> 00:19:48.850
details but this is very good
information for our compiler to have and

00:19:48.850 --> 00:19:48.860
information for our compiler to have and
 

00:19:48.860 --> 00:19:50.290
information for our compiler to have and
it does is without running a program to

00:19:50.290 --> 00:19:50.300
it does is without running a program to
 

00:19:50.300 --> 00:19:51.790
it does is without running a program to
statically analyze just looking at the

00:19:51.790 --> 00:19:51.800
statically analyze just looking at the
 

00:19:51.800 --> 00:19:53.680
statically analyze just looking at the
program this is a global analysis at

00:19:53.680 --> 00:19:53.690
program this is a global analysis at
 

00:19:53.690 --> 00:19:57.260
program this is a global analysis at
compile time so let's make this

00:19:57.260 --> 00:19:57.270
compile time so let's make this
 

00:19:57.270 --> 00:20:00.800
compile time so let's make this
and play to our advantage so here's the

00:20:00.800 --> 00:20:00.810
and play to our advantage so here's the
 

00:20:00.810 --> 00:20:03.110
and play to our advantage so here's the
code again without type inferencing 526

00:20:03.110 --> 00:20:03.120
code again without type inferencing 526
 

00:20:03.120 --> 00:20:05.900
code again without type inferencing 526
characters so first thing up like we

00:20:05.900 --> 00:20:05.910
characters so first thing up like we
 

00:20:05.910 --> 00:20:07.970
characters so first thing up like we
know B is either Nala or a variable so

00:20:07.970 --> 00:20:07.980
know B is either Nala or a variable so
 

00:20:07.980 --> 00:20:09.110
know B is either Nala or a variable so
we can we can do a little bit better

00:20:09.110 --> 00:20:09.120
we can we can do a little bit better
 

00:20:09.120 --> 00:20:10.940
we can we can do a little bit better
than just calling the scatter on it so

00:20:10.940 --> 00:20:10.950
than just calling the scatter on it so
 

00:20:10.950 --> 00:20:12.320
than just calling the scatter on it so
we can actually see that it always has a

00:20:12.320 --> 00:20:12.330
we can actually see that it always has a
 

00:20:12.330 --> 00:20:14.360
we can actually see that it always has a
property determined by we just fetch it

00:20:14.360 --> 00:20:14.370
property determined by we just fetch it
 

00:20:14.370 --> 00:20:16.850
property determined by we just fetch it
simple stuff there are the things that

00:20:16.850 --> 00:20:16.860
simple stuff there are the things that
 

00:20:16.860 --> 00:20:18.560
simple stuff there are the things that
we can win even more about recognising

00:20:18.560 --> 00:20:18.570
we can win even more about recognising
 

00:20:18.570 --> 00:20:20.870
we can win even more about recognising
for instance be the variable constraints

00:20:20.870 --> 00:20:20.880
for instance be the variable constraints
 

00:20:20.880 --> 00:20:22.580
for instance be the variable constraints
since these are variables the

00:20:22.580 --> 00:20:22.590
since these are variables the
 

00:20:22.590 --> 00:20:24.110
since these are variables the
constraints in there is always an array

00:20:24.110 --> 00:20:24.120
constraints in there is always an array
 

00:20:24.120 --> 00:20:27.260
constraints in there is always an array
of constraints so we don't have to go

00:20:27.260 --> 00:20:27.270
of constraints so we don't have to go
 

00:20:27.270 --> 00:20:29.120
of constraints so we don't have to go
through this I calling a lengths getter

00:20:29.120 --> 00:20:29.130
through this I calling a lengths getter
 

00:20:29.130 --> 00:20:30.920
through this I calling a lengths getter
and calling an index operator we can

00:20:30.920 --> 00:20:30.930
and calling an index operator we can
 

00:20:30.930 --> 00:20:32.780
and calling an index operator we can
just do like the the real JavaScript way

00:20:32.780 --> 00:20:32.790
just do like the the real JavaScript way
 

00:20:32.790 --> 00:20:34.640
just do like the the real JavaScript way
just fetch the length and just index

00:20:34.640 --> 00:20:34.650
just fetch the length and just index
 

00:20:34.650 --> 00:20:38.120
just fetch the length and just index
into the array simple stuff even better

00:20:38.120 --> 00:20:38.130
into the array simple stuff even better
 

00:20:38.130 --> 00:20:39.590
into the array simple stuff even better
we know that we did constraints that

00:20:39.590 --> 00:20:39.600
we know that we did constraints that
 

00:20:39.600 --> 00:20:42.740
we know that we did constraints that
length is is actually an integer so this

00:20:42.740 --> 00:20:42.750
length is is actually an integer so this
 

00:20:42.750 --> 00:20:43.910
length is is actually an integer so this
whole notion of checking whether or not

00:20:43.910 --> 00:20:43.920
whole notion of checking whether or not
 

00:20:43.920 --> 00:20:47.630
whole notion of checking whether or not
is a number goes away so that is a

00:20:47.630 --> 00:20:47.640
is a number goes away so that is a
 

00:20:47.640 --> 00:20:50.620
is a number goes away so that is a
helpful thing it's starting to improve

00:20:50.620 --> 00:20:50.630
helpful thing it's starting to improve
 

00:20:50.630 --> 00:20:52.760
helpful thing it's starting to improve
now the condition that we have in the

00:20:52.760 --> 00:20:52.770
now the condition that we have in the
 

00:20:52.770 --> 00:20:54.770
now the condition that we have in the
loop is turning simpler we can change

00:20:54.770 --> 00:20:54.780
loop is turning simpler we can change
 

00:20:54.780 --> 00:20:56.930
loop is turning simpler we can change
the while loop into a for loop and at

00:20:56.930 --> 00:20:56.940
the while loop into a for loop and at
 

00:20:56.940 --> 00:20:59.360
the while loop into a for loop and at
that point we're already down to thirty

00:20:59.360 --> 00:20:59.370
that point we're already down to thirty
 

00:20:59.370 --> 00:21:00.830
that point we're already down to thirty
three percent smaller than the original

00:21:00.830 --> 00:21:00.840
three percent smaller than the original
 

00:21:00.840 --> 00:21:02.420
three percent smaller than the original
code I showed you we have more to go but

00:21:02.420 --> 00:21:02.430
code I showed you we have more to go but
 

00:21:02.430 --> 00:21:05.300
code I showed you we have more to go but
it's pretty simple stuff call is an

00:21:05.300 --> 00:21:05.310
it's pretty simple stuff call is an
 

00:21:05.310 --> 00:21:07.850
it's pretty simple stuff call is an
array so this calling add on it and in a

00:21:07.850 --> 00:21:07.860
array so this calling add on it and in a
 

00:21:07.860 --> 00:21:09.770
array so this calling add on it and in a
weird way is not really necessary so we

00:21:09.770 --> 00:21:09.780
weird way is not really necessary so we
 

00:21:09.780 --> 00:21:11.120
weird way is not really necessary so we
can just use the JavaScript push method

00:21:11.120 --> 00:21:11.130
can just use the JavaScript push method
 

00:21:11.130 --> 00:21:14.180
can just use the JavaScript push method
do that for you looks good even further

00:21:14.180 --> 00:21:14.190
do that for you looks good even further
 

00:21:14.190 --> 00:21:17.030
do that for you looks good even further
the t1 is initialized in a simple way so

00:21:17.030 --> 00:21:17.040
the t1 is initialized in a simple way so
 

00:21:17.040 --> 00:21:18.710
the t1 is initialized in a simple way so
that can just move into the for loop and

00:21:18.710 --> 00:21:18.720
that can just move into the for loop and
 

00:21:18.720 --> 00:21:20.360
that can just move into the for loop and
we're down to 41 percent smaller than

00:21:20.360 --> 00:21:20.370
we're down to 41 percent smaller than
 

00:21:20.370 --> 00:21:22.160
we're down to 41 percent smaller than
the original JS output it's likely to

00:21:22.160 --> 00:21:22.170
the original JS output it's likely to
 

00:21:22.170 --> 00:21:25.310
the original JS output it's likely to
get there see is known to be a subclass

00:21:25.310 --> 00:21:25.320
get there see is known to be a subclass
 

00:21:25.320 --> 00:21:26.600
get there see is known to be a subclass
of constraint and it cannot be null

00:21:26.600 --> 00:21:26.610
of constraint and it cannot be null
 

00:21:26.610 --> 00:21:28.520
of constraint and it cannot be null
we've inferred that so this whole notion

00:21:28.520 --> 00:21:28.530
we've inferred that so this whole notion
 

00:21:28.530 --> 00:21:30.020
we've inferred that so this whole notion
of checking whether or not see is now

00:21:30.020 --> 00:21:30.030
of checking whether or not see is now
 

00:21:30.030 --> 00:21:31.940
of checking whether or not see is now
before doing a comparison this is

00:21:31.940 --> 00:21:31.950
before doing a comparison this is
 

00:21:31.950 --> 00:21:33.500
before doing a comparison this is
necessary because of knowledge undefined

00:21:33.500 --> 00:21:33.510
necessary because of knowledge undefined
 

00:21:33.510 --> 00:21:35.450
necessary because of knowledge undefined
in JavaScript by the way we don't have

00:21:35.450 --> 00:21:35.460
in JavaScript by the way we don't have
 

00:21:35.460 --> 00:21:37.400
in JavaScript by the way we don't have
to worry about that because at least see

00:21:37.400 --> 00:21:37.410
to worry about that because at least see
 

00:21:37.410 --> 00:21:39.460
to worry about that because at least see
canopy know so we can simplify the code

00:21:39.460 --> 00:21:39.470
canopy know so we can simplify the code
 

00:21:39.470 --> 00:21:43.010
canopy know so we can simplify the code
it's a good thing finally we know that

00:21:43.010 --> 00:21:43.020
it's a good thing finally we know that
 

00:21:43.020 --> 00:21:44.780
it's a good thing finally we know that
calling is satisfied on c actually

00:21:44.780 --> 00:21:44.790
calling is satisfied on c actually
 

00:21:44.790 --> 00:21:48.020
calling is satisfied on c actually
always return a boolean and into is the

00:21:48.020 --> 00:21:48.030
always return a boolean and into is the
 

00:21:48.030 --> 00:21:49.790
always return a boolean and into is the
only truth you value in dark so usually

00:21:49.790 --> 00:21:49.800
only truth you value in dark so usually
 

00:21:49.800 --> 00:21:51.290
only truth you value in dark so usually
we have to compare against true before

00:21:51.290 --> 00:21:51.300
we have to compare against true before
 

00:21:51.300 --> 00:21:53.540
we have to compare against true before
we branch on it but because a boolean is

00:21:53.540 --> 00:21:53.550
we branch on it but because a boolean is
 

00:21:53.550 --> 00:21:55.460
we branch on it but because a boolean is
always either true or false it's just

00:21:55.460 --> 00:21:55.470
always either true or false it's just
 

00:21:55.470 --> 00:21:57.170
always either true or false it's just
fine we can get rid of that last thing

00:21:57.170 --> 00:21:57.180
fine we can get rid of that last thing
 

00:21:57.180 --> 00:22:00.590
fine we can get rid of that last thing
and there you have it and an optimized

00:22:00.590 --> 00:22:00.600
and there you have it and an optimized
 

00:22:00.600 --> 00:22:02.180
and there you have it and an optimized
version of this method that runs fast

00:22:02.180 --> 00:22:02.190
version of this method that runs fast
 

00:22:02.190 --> 00:22:03.860
version of this method that runs fast
it's much smaller but it still has

00:22:03.860 --> 00:22:03.870
it's much smaller but it still has
 

00:22:03.870 --> 00:22:05.780
it's much smaller but it still has
exactly the same semantics it's just

00:22:05.780 --> 00:22:05.790
exactly the same semantics it's just
 

00:22:05.790 --> 00:22:07.130
exactly the same semantics it's just
we've proven that we didn't need some of

00:22:07.130 --> 00:22:07.140
we've proven that we didn't need some of
 

00:22:07.140 --> 00:22:11.170
we've proven that we didn't need some of
these checks so what's the do before

00:22:11.170 --> 00:22:11.180
these checks so what's the do before
 

00:22:11.180 --> 00:22:13.240
these checks so what's the do before
well here's the graph of that over time

00:22:13.240 --> 00:22:13.250
well here's the graph of that over time
 

00:22:13.250 --> 00:22:16.570
well here's the graph of that over time
so the top line is the native dart VM

00:22:16.570 --> 00:22:16.580
so the top line is the native dart VM
 

00:22:16.580 --> 00:22:19.570
so the top line is the native dart VM
running the Delta blue algorithm so you

00:22:19.570 --> 00:22:19.580
running the Delta blue algorithm so you
 

00:22:19.580 --> 00:22:20.860
running the Delta blue algorithm so you
see that that's the best performance we

00:22:20.860 --> 00:22:20.870
see that that's the best performance we
 

00:22:20.870 --> 00:22:22.210
see that that's the best performance we
have and it really comes from the fact

00:22:22.210 --> 00:22:22.220
have and it really comes from the fact
 

00:22:22.220 --> 00:22:23.920
have and it really comes from the fact
that dart is designed from the get go to

00:22:23.920 --> 00:22:23.930
that dart is designed from the get go to
 

00:22:23.930 --> 00:22:25.540
that dart is designed from the get go to
be an efficient language so we have a

00:22:25.540 --> 00:22:25.550
be an efficient language so we have a
 

00:22:25.550 --> 00:22:27.160
be an efficient language so we have a
very good implementation of that the

00:22:27.160 --> 00:22:27.170
very good implementation of that the
 

00:22:27.170 --> 00:22:28.360
very good implementation of that the
next two lines might be more interesting

00:22:28.360 --> 00:22:28.370
next two lines might be more interesting
 

00:22:28.370 --> 00:22:30.550
next two lines might be more interesting
in this context the yellowish line is

00:22:30.550 --> 00:22:30.560
in this context the yellowish line is
 

00:22:30.560 --> 00:22:32.800
in this context the yellowish line is
actually a v8 running a handwritten

00:22:32.800 --> 00:22:32.810
actually a v8 running a handwritten
 

00:22:32.810 --> 00:22:34.300
actually a v8 running a handwritten
version of a delta blue benchmark this

00:22:34.300 --> 00:22:34.310
version of a delta blue benchmark this
 

00:22:34.310 --> 00:22:35.980
version of a delta blue benchmark this
is the octane version of the delta blue

00:22:35.980 --> 00:22:35.990
is the octane version of the delta blue
 

00:22:35.990 --> 00:22:37.840
is the octane version of the delta blue
benchmark that you where you might have

00:22:37.840 --> 00:22:37.850
benchmark that you where you might have
 

00:22:37.850 --> 00:22:39.730
benchmark that you where you might have
seen in other places as you can see v8

00:22:39.730 --> 00:22:39.740
seen in other places as you can see v8
 

00:22:39.740 --> 00:22:41.620
seen in other places as you can see v8
improves on that over time slowly and

00:22:41.620 --> 00:22:41.630
improves on that over time slowly and
 

00:22:41.630 --> 00:22:43.270
improves on that over time slowly and
that's that's a very good thing for the

00:22:43.270 --> 00:22:43.280
that's that's a very good thing for the
 

00:22:43.280 --> 00:22:45.670
that's that's a very good thing for the
entire web may be more interesting to me

00:22:45.670 --> 00:22:45.680
entire web may be more interesting to me
 

00:22:45.680 --> 00:22:47.770
entire web may be more interesting to me
at least is that the dart2js generated

00:22:47.770 --> 00:22:47.780
at least is that the dart2js generated
 

00:22:47.780 --> 00:22:49.300
at least is that the dart2js generated
co has improved a lot on this benchmark

00:22:49.300 --> 00:22:49.310
co has improved a lot on this benchmark
 

00:22:49.310 --> 00:22:51.280
co has improved a lot on this benchmark
it's still the same v8 that runs it it's

00:22:51.280 --> 00:22:51.290
it's still the same v8 that runs it it's
 

00:22:51.290 --> 00:22:52.690
it's still the same v8 that runs it it's
just that the code we generate is

00:22:52.690 --> 00:22:52.700
just that the code we generate is
 

00:22:52.700 --> 00:22:54.400
just that the code we generate is
actually a little bit faster than the

00:22:54.400 --> 00:22:54.410
actually a little bit faster than the
 

00:22:54.410 --> 00:22:56.050
actually a little bit faster than the
handwritten version how could that be

00:22:56.050 --> 00:22:56.060
handwritten version how could that be
 

00:22:56.060 --> 00:22:58.120
handwritten version how could that be
well basically we do optimization that

00:22:58.120 --> 00:22:58.130
well basically we do optimization that
 

00:22:58.130 --> 00:22:59.440
well basically we do optimization that
you probably don't want to do by hand

00:22:59.440 --> 00:22:59.450
you probably don't want to do by hand
 

00:22:59.450 --> 00:23:01.720
you probably don't want to do by hand
because we know the entire structure of

00:23:01.720 --> 00:23:01.730
because we know the entire structure of
 

00:23:01.730 --> 00:23:03.730
because we know the entire structure of
the app we can do some inlining for you

00:23:03.730 --> 00:23:03.740
the app we can do some inlining for you
 

00:23:03.740 --> 00:23:07.240
the app we can do some inlining for you
and some sometimes in code motion things

00:23:07.240 --> 00:23:07.250
and some sometimes in code motion things
 

00:23:07.250 --> 00:23:08.530
and some sometimes in code motion things
like that for your loops that you

00:23:08.530 --> 00:23:08.540
like that for your loops that you
 

00:23:08.540 --> 00:23:10.270
like that for your loops that you
probably don't care to do by hand so

00:23:10.270 --> 00:23:10.280
probably don't care to do by hand so
 

00:23:10.280 --> 00:23:12.070
probably don't care to do by hand so
it's a little bit faster in general what

00:23:12.070 --> 00:23:12.080
it's a little bit faster in general what
 

00:23:12.080 --> 00:23:13.420
it's a little bit faster in general what
we see is that we're very close to

00:23:13.420 --> 00:23:13.430
we see is that we're very close to
 

00:23:13.430 --> 00:23:15.070
we see is that we're very close to
handwritten jobs with performance on and

00:23:15.070 --> 00:23:15.080
handwritten jobs with performance on and
 

00:23:15.080 --> 00:23:17.440
handwritten jobs with performance on and
everything so there are cases where

00:23:17.440 --> 00:23:17.450
everything so there are cases where
 

00:23:17.450 --> 00:23:18.640
everything so there are cases where
we're faster and of course there're case

00:23:18.640 --> 00:23:18.650
we're faster and of course there're case
 

00:23:18.650 --> 00:23:20.590
we're faster and of course there're case
where a little bit small bit slower so

00:23:20.590 --> 00:23:20.600
where a little bit small bit slower so
 

00:23:20.600 --> 00:23:22.390
where a little bit small bit slower so
anyway the performance looks really

00:23:22.390 --> 00:23:22.400
anyway the performance looks really
 

00:23:22.400 --> 00:23:23.680
anyway the performance looks really
promising and it's nice to be able to

00:23:23.680 --> 00:23:23.690
promising and it's nice to be able to
 

00:23:23.690 --> 00:23:25.720
promising and it's nice to be able to
write in a very clean language and get

00:23:25.720 --> 00:23:25.730
write in a very clean language and get
 

00:23:25.730 --> 00:23:28.630
write in a very clean language and get
good performance so let's let's take a

00:23:28.630 --> 00:23:28.640
good performance so let's let's take a
 

00:23:28.640 --> 00:23:30.400
good performance so let's let's take a
look at how you actually go about using

00:23:30.400 --> 00:23:30.410
look at how you actually go about using
 

00:23:30.410 --> 00:23:32.920
look at how you actually go about using
this dark thing in a real setting yeah

00:23:32.920 --> 00:23:32.930
this dark thing in a real setting yeah
 

00:23:32.930 --> 00:23:35.410
this dark thing in a real setting yeah
thanks Casper so that start to Jess a

00:23:35.410 --> 00:23:35.420
thanks Casper so that start to Jess a
 

00:23:35.420 --> 00:23:37.060
thanks Casper so that start to Jess a
little bit about the workflow how and

00:23:37.060 --> 00:23:37.070
little bit about the workflow how and
 

00:23:37.070 --> 00:23:38.950
little bit about the workflow how and
when do you apply that compiling

00:23:38.950 --> 00:23:38.960
when do you apply that compiling
 

00:23:38.960 --> 00:23:40.180
when do you apply that compiling
JavaScript of course is great but I

00:23:40.180 --> 00:23:40.190
JavaScript of course is great but I
 

00:23:40.190 --> 00:23:41.830
JavaScript of course is great but I
don't want to do that every time I want

00:23:41.830 --> 00:23:41.840
don't want to do that every time I want
 

00:23:41.840 --> 00:23:45.310
don't want to do that every time I want
this quick iterations that that the web

00:23:45.310 --> 00:23:45.320
this quick iterations that that the web
 

00:23:45.320 --> 00:23:47.440
this quick iterations that that the web
is known for so what does it look like

00:23:47.440 --> 00:23:47.450
is known for so what does it look like
 

00:23:47.450 --> 00:23:49.540
is known for so what does it look like
well we have a build of chromium with

00:23:49.540 --> 00:23:49.550
well we have a build of chromium with
 

00:23:49.550 --> 00:23:50.980
well we have a build of chromium with
the dart virtual machine embedded in it

00:23:50.980 --> 00:23:50.990
the dart virtual machine embedded in it
 

00:23:50.990 --> 00:23:52.690
the dart virtual machine embedded in it
we've actually called dartium and that's

00:23:52.690 --> 00:23:52.700
we've actually called dartium and that's
 

00:23:52.700 --> 00:23:53.980
we've actually called dartium and that's
where you spend most of your time those

00:23:53.980 --> 00:23:53.990
where you spend most of your time those
 

00:23:53.990 --> 00:23:56.530
where you spend most of your time those
your quick edit reload cycles so let's

00:23:56.530 --> 00:23:56.540
your quick edit reload cycles so let's
 

00:23:56.540 --> 00:23:58.180
your quick edit reload cycles so let's
look at what that what that feels like

00:23:58.180 --> 00:23:58.190
look at what that what that feels like
 

00:23:58.190 --> 00:24:00.970
look at what that what that feels like
here's a build of dart editor you don't

00:24:00.970 --> 00:24:00.980
here's a build of dart editor you don't
 

00:24:00.980 --> 00:24:02.470
here's a build of dart editor you don't
have to use dart editor but it does ship

00:24:02.470 --> 00:24:02.480
have to use dart editor but it does ship
 

00:24:02.480 --> 00:24:03.730
have to use dart editor but it does ship
with a project that's a stripped-down

00:24:03.730 --> 00:24:03.740
with a project that's a stripped-down
 

00:24:03.740 --> 00:24:05.890
with a project that's a stripped-down
version of eclipse in fact I like to

00:24:05.890 --> 00:24:05.900
version of eclipse in fact I like to
 

00:24:05.900 --> 00:24:07.210
version of eclipse in fact I like to
show this I showed this screen to

00:24:07.210 --> 00:24:07.220
show this I showed this screen to
 

00:24:07.220 --> 00:24:08.200
show this I showed this screen to
somebody and they're like oh you have a

00:24:08.200 --> 00:24:08.210
somebody and they're like oh you have a
 

00:24:08.210 --> 00:24:09.820
somebody and they're like oh you have a
bug you're missing like 78 more

00:24:09.820 --> 00:24:09.830
bug you're missing like 78 more
 

00:24:09.830 --> 00:24:11.200
bug you're missing like 78 more
preferences in there like no no actually

00:24:11.200 --> 00:24:11.210
preferences in there like no no actually
 

00:24:11.210 --> 00:24:14.770
preferences in there like no no actually
we took those out so it's optimized for

00:24:14.770 --> 00:24:14.780
we took those out so it's optimized for
 

00:24:14.780 --> 00:24:16.720
we took those out so it's optimized for
writing dart code probably the best way

00:24:16.720 --> 00:24:16.730
writing dart code probably the best way
 

00:24:16.730 --> 00:24:18.310
writing dart code probably the best way
to get started is let's just create a

00:24:18.310 --> 00:24:18.320
to get started is let's just create a
 

00:24:18.320 --> 00:24:20.760
to get started is let's just create a
sample app so luckily Eric showed us

00:24:20.760 --> 00:24:20.770
sample app so luckily Eric showed us
 

00:24:20.770 --> 00:24:22.950
sample app so luckily Eric showed us
polymer before

00:24:22.950 --> 00:24:22.960
polymer before
 

00:24:22.960 --> 00:24:25.150
polymer before
dart has been porting polymer polymer

00:24:25.150 --> 00:24:25.160
dart has been porting polymer polymer
 

00:24:25.160 --> 00:24:27.490
dart has been porting polymer polymer
dard so we were totally in bed with this

00:24:27.490 --> 00:24:27.500
dard so we were totally in bed with this
 

00:24:27.500 --> 00:24:28.780
dard so we were totally in bed with this
web components thing we think it's the

00:24:28.780 --> 00:24:28.790
web components thing we think it's the
 

00:24:28.790 --> 00:24:31.660
web components thing we think it's the
bee's knees here is a sample application

00:24:31.660 --> 00:24:31.670
bee's knees here is a sample application
 

00:24:31.670 --> 00:24:33.220
bee's knees here is a sample application
you get all the skeleton for you you've

00:24:33.220 --> 00:24:33.230
you get all the skeleton for you you've
 

00:24:33.230 --> 00:24:35.230
you get all the skeleton for you you've
got HTML you've got the custom elements

00:24:35.230 --> 00:24:35.240
got HTML you've got the custom elements
 

00:24:35.240 --> 00:24:37.960
got HTML you've got the custom elements
the CSS so let's just run this here to

00:24:37.960 --> 00:24:37.970
the CSS so let's just run this here to
 

00:24:37.970 --> 00:24:39.850
the CSS so let's just run this here to
see what it's like it's very simple here

00:24:39.850 --> 00:24:39.860
see what it's like it's very simple here
 

00:24:39.860 --> 00:24:42.070
see what it's like it's very simple here
but we're going to run it in dartium see

00:24:42.070 --> 00:24:42.080
but we're going to run it in dartium see
 

00:24:42.080 --> 00:24:44.130
but we're going to run it in dartium see
it pops right up no compiles time needed

00:24:44.130 --> 00:24:44.140
it pops right up no compiles time needed
 

00:24:44.140 --> 00:24:47.320
it pops right up no compiles time needed
click me ok button click on ok cool so

00:24:47.320 --> 00:24:47.330
click me ok button click on ok cool so
 

00:24:47.330 --> 00:24:48.490
click me ok button click on ok cool so
it gives you just the core to get

00:24:48.490 --> 00:24:48.500
it gives you just the core to get
 

00:24:48.500 --> 00:24:51.190
it gives you just the core to get
started with let's look a little bit how

00:24:51.190 --> 00:24:51.200
started with let's look a little bit how
 

00:24:51.200 --> 00:24:53.860
started with let's look a little bit how
this application is written hopefully

00:24:53.860 --> 00:24:53.870
this application is written hopefully
 

00:24:53.870 --> 00:24:56.830
this application is written hopefully
you can see this so the polymer element

00:24:56.830 --> 00:24:56.840
you can see this so the polymer element
 

00:24:56.840 --> 00:24:58.600
you can see this so the polymer element
looks pretty much like what eric was

00:24:58.600 --> 00:24:58.610
looks pretty much like what eric was
 

00:24:58.610 --> 00:25:00.640
looks pretty much like what eric was
showing you earlier so the HTML aspects

00:25:00.640 --> 00:25:00.650
showing you earlier so the HTML aspects
 

00:25:00.650 --> 00:25:02.800
showing you earlier so the HTML aspects
of building highly declarative apps with

00:25:02.800 --> 00:25:02.810
of building highly declarative apps with
 

00:25:02.810 --> 00:25:04.570
of building highly declarative apps with
dart are very similar to the JavaScript

00:25:04.570 --> 00:25:04.580
dart are very similar to the JavaScript
 

00:25:04.580 --> 00:25:06.370
dart are very similar to the JavaScript
side the difference though instead of

00:25:06.370 --> 00:25:06.380
side the difference though instead of
 

00:25:06.380 --> 00:25:07.840
side the difference though instead of
implementing the custom element with

00:25:07.840 --> 00:25:07.850
implementing the custom element with
 

00:25:07.850 --> 00:25:09.220
implementing the custom element with
JavaScript you can implement it with

00:25:09.220 --> 00:25:09.230
JavaScript you can implement it with
 

00:25:09.230 --> 00:25:11.320
JavaScript you can implement it with
dart dart has classes so it makes a ton

00:25:11.320 --> 00:25:11.330
dart dart has classes so it makes a ton
 

00:25:11.330 --> 00:25:13.420
dart dart has classes so it makes a ton
of sense to be able to say one class for

00:25:13.420 --> 00:25:13.430
of sense to be able to say one class for
 

00:25:13.430 --> 00:25:16.390
of sense to be able to say one class for
one custom element so this is cool and

00:25:16.390 --> 00:25:16.400
one custom element so this is cool and
 

00:25:16.400 --> 00:25:17.320
one custom element so this is cool and
I'll show you a couple other features

00:25:17.320 --> 00:25:17.330
I'll show you a couple other features
 

00:25:17.330 --> 00:25:19.090
I'll show you a couple other features
because Dardis structure and this editor

00:25:19.090 --> 00:25:19.100
because Dardis structure and this editor
 

00:25:19.100 --> 00:25:20.530
because Dardis structure and this editor
gives you some nice productivity

00:25:20.530 --> 00:25:20.540
gives you some nice productivity
 

00:25:20.540 --> 00:25:23.470
gives you some nice productivity
benefits let's say I want to add a reset

00:25:23.470 --> 00:25:23.480
benefits let's say I want to add a reset
 

00:25:23.480 --> 00:25:28.690
benefits let's say I want to add a reset
count and then a method here ok code

00:25:28.690 --> 00:25:28.700
count and then a method here ok code
 

00:25:28.700 --> 00:25:29.980
count and then a method here ok code
completion because we can statically

00:25:29.980 --> 00:25:29.990
completion because we can statically
 

00:25:29.990 --> 00:25:31.690
completion because we can statically
analyze your program we know what you

00:25:31.690 --> 00:25:31.700
analyze your program we know what you
 

00:25:31.700 --> 00:25:34.090
analyze your program we know what you
can call right here and it's real time

00:25:34.090 --> 00:25:34.100
can call right here and it's real time
 

00:25:34.100 --> 00:25:35.890
can call right here and it's real time
so that's pretty awesome and also going

00:25:35.890 --> 00:25:35.900
so that's pretty awesome and also going
 

00:25:35.900 --> 00:25:38.440
so that's pretty awesome and also going
in for the local stuff as well ok that's

00:25:38.440 --> 00:25:38.450
in for the local stuff as well ok that's
 

00:25:38.450 --> 00:25:40.450
in for the local stuff as well ok that's
pretty cool now the other neat thing

00:25:40.450 --> 00:25:40.460
pretty cool now the other neat thing
 

00:25:40.460 --> 00:25:42.430
pretty cool now the other neat thing
about statically analyzable language is

00:25:42.430 --> 00:25:42.440
about statically analyzable language is
 

00:25:42.440 --> 00:25:44.860
about statically analyzable language is
it can understand your program so let's

00:25:44.860 --> 00:25:44.870
it can understand your program so let's
 

00:25:44.870 --> 00:25:47.230
it can understand your program so let's
look at this field count notice how it

00:25:47.230 --> 00:25:47.240
look at this field count notice how it
 

00:25:47.240 --> 00:25:49.180
look at this field count notice how it
only highlights the uses of that field

00:25:49.180 --> 00:25:49.190
only highlights the uses of that field
 

00:25:49.190 --> 00:25:51.190
only highlights the uses of that field
it's not doing a string search and

00:25:51.190 --> 00:25:51.200
it's not doing a string search and
 

00:25:51.200 --> 00:25:53.020
it's not doing a string search and
replace here so it leaves out some of

00:25:53.020 --> 00:25:53.030
replace here so it leaves out some of
 

00:25:53.030 --> 00:25:54.070
replace here so it leaves out some of
the other accounts even though obviously

00:25:54.070 --> 00:25:54.080
the other accounts even though obviously
 

00:25:54.080 --> 00:25:56.800
the other accounts even though obviously
it's the same string so we can do we can

00:25:56.800 --> 00:25:56.810
it's the same string so we can do we can
 

00:25:56.810 --> 00:25:59.440
it's the same string so we can do we can
rename we could say my account and it

00:25:59.440 --> 00:25:59.450
rename we could say my account and it
 

00:25:59.450 --> 00:26:01.450
rename we could say my account and it
only renames actual usage as a field

00:26:01.450 --> 00:26:01.460
only renames actual usage as a field
 

00:26:01.460 --> 00:26:02.800
only renames actual usage as a field
again the power of a statically

00:26:02.800 --> 00:26:02.810
again the power of a statically
 

00:26:02.810 --> 00:26:04.540
again the power of a statically
analyzable language i'm going to undo

00:26:04.540 --> 00:26:04.550
analyzable language i'm going to undo
 

00:26:04.550 --> 00:26:08.920
analyzable language i'm going to undo
that scared of bugs ok cool let's once

00:26:08.920 --> 00:26:08.930
that scared of bugs ok cool let's once
 

00:26:08.930 --> 00:26:10.270
that scared of bugs ok cool let's once
you're in an editor and you have an

00:26:10.270 --> 00:26:10.280
you're in an editor and you have an
 

00:26:10.280 --> 00:26:11.680
you're in an editor and you have an
actual virtual machine you can set

00:26:11.680 --> 00:26:11.690
actual virtual machine you can set
 

00:26:11.690 --> 00:26:14.320
actual virtual machine you can set
breakpoints so let's go back we set a

00:26:14.320 --> 00:26:14.330
breakpoints so let's go back we set a
 

00:26:14.330 --> 00:26:15.610
breakpoints so let's go back we set a
breakpoint there we're going to rerun

00:26:15.610 --> 00:26:15.620
breakpoint there we're going to rerun
 

00:26:15.620 --> 00:26:17.980
breakpoint there we're going to rerun
the app and if I click the button and it

00:26:17.980 --> 00:26:17.990
the app and if I click the button and it
 

00:26:17.990 --> 00:26:20.920
the app and if I click the button and it
all works yes ok great so it jumps back

00:26:20.920 --> 00:26:20.930
all works yes ok great so it jumps back
 

00:26:20.930 --> 00:26:22.420
all works yes ok great so it jumps back
to the editor and you're in a familiar

00:26:22.420 --> 00:26:22.430
to the editor and you're in a familiar
 

00:26:22.430 --> 00:26:23.950
to the editor and you're in a familiar
editing environment with full

00:26:23.950 --> 00:26:23.960
editing environment with full
 

00:26:23.960 --> 00:26:26.740
editing environment with full
breakpoints you can inspect this is

00:26:26.740 --> 00:26:26.750
breakpoints you can inspect this is
 

00:26:26.750 --> 00:26:28.540
breakpoints you can inspect this is
really cool I can jump in here on

00:26:28.540 --> 00:26:28.550
really cool I can jump in here on
 

00:26:28.550 --> 00:26:30.760
really cool I can jump in here on
inspect this instance I don't know if

00:26:30.760 --> 00:26:30.770
inspect this instance I don't know if
 

00:26:30.770 --> 00:26:33.220
inspect this instance I don't know if
you guys can see this actually trust me

00:26:33.220 --> 00:26:33.230
you guys can see this actually trust me
 

00:26:33.230 --> 00:26:35.200
you guys can see this actually trust me
that's his count and then five to live

00:26:35.200 --> 00:26:35.210
that's his count and then five to live
 

00:26:35.210 --> 00:26:36.220
that's his count and then five to live
object in space

00:26:36.220 --> 00:26:36.230
object in space
 

00:26:36.230 --> 00:26:39.520
object in space
dur so that's really cool so the let's

00:26:39.520 --> 00:26:39.530
dur so that's really cool so the let's
 

00:26:39.530 --> 00:26:41.980
dur so that's really cool so the let's
move on this app was kind of neat but

00:26:41.980 --> 00:26:41.990
move on this app was kind of neat but
 

00:26:41.990 --> 00:26:44.740
move on this app was kind of neat but
it's also kind of boring so I think we

00:26:44.740 --> 00:26:44.750
it's also kind of boring so I think we
 

00:26:44.750 --> 00:26:45.880
it's also kind of boring so I think we
can do a little bit better in fact that

00:26:45.880 --> 00:26:45.890
can do a little bit better in fact that
 

00:26:45.890 --> 00:26:48.280
can do a little bit better in fact that
that grey button I want to make fancier

00:26:48.280 --> 00:26:48.290
that grey button I want to make fancier
 

00:26:48.290 --> 00:26:50.470
that grey button I want to make fancier
so this is where a package management

00:26:50.470 --> 00:26:50.480
so this is where a package management
 

00:26:50.480 --> 00:26:52.360
so this is where a package management
system comes in if our package manage

00:26:52.360 --> 00:26:52.370
system comes in if our package manage
 

00:26:52.370 --> 00:26:58.169
system comes in if our package manage
system pub let's see if we can go here

00:26:58.169 --> 00:26:58.179
 
 

00:26:58.179 --> 00:27:01.060
 
has over 500 packages and are ready from

00:27:01.060 --> 00:27:01.070
has over 500 packages and are ready from
 

00:27:01.070 --> 00:27:02.470
has over 500 packages and are ready from
our open source community everything

00:27:02.470 --> 00:27:02.480
our open source community everything
 

00:27:02.480 --> 00:27:03.970
our open source community everything
from server side stuff to client side

00:27:03.970 --> 00:27:03.980
from server side stuff to client side
 

00:27:03.980 --> 00:27:06.750
from server side stuff to client side
stuff the game crypto you name it oh

00:27:06.750 --> 00:27:06.760
stuff the game crypto you name it oh
 

00:27:06.760 --> 00:27:09.940
stuff the game crypto you name it oh
look at this fancy button ok so our pub

00:27:09.940 --> 00:27:09.950
look at this fancy button ok so our pub
 

00:27:09.950 --> 00:27:11.470
look at this fancy button ok so our pub
package management system also has

00:27:11.470 --> 00:27:11.480
package management system also has
 

00:27:11.480 --> 00:27:13.960
package management system also has
custom elements in it so if you like web

00:27:13.960 --> 00:27:13.970
custom elements in it so if you like web
 

00:27:13.970 --> 00:27:15.789
custom elements in it so if you like web
components you want to reuse them a

00:27:15.789 --> 00:27:15.799
components you want to reuse them a
 

00:27:15.799 --> 00:27:17.560
components you want to reuse them a
package managed system is a great way to

00:27:17.560 --> 00:27:17.570
package managed system is a great way to
 

00:27:17.570 --> 00:27:19.630
package managed system is a great way to
do that so let's make our button a

00:27:19.630 --> 00:27:19.640
do that so let's make our button a
 

00:27:19.640 --> 00:27:22.390
do that so let's make our button a
little fancy let's load up the pub

00:27:22.390 --> 00:27:22.400
little fancy let's load up the pub
 

00:27:22.400 --> 00:27:24.789
little fancy let's load up the pub
specta llamo file this defines my

00:27:24.789 --> 00:27:24.799
specta llamo file this defines my
 

00:27:24.799 --> 00:27:26.980
specta llamo file this defines my
application and its dependencies and

00:27:26.980 --> 00:27:26.990
application and its dependencies and
 

00:27:26.990 --> 00:27:28.900
application and its dependencies and
certainly I depend on polymer let's

00:27:28.900 --> 00:27:28.910
certainly I depend on polymer let's
 

00:27:28.910 --> 00:27:33.130
certainly I depend on polymer let's
depend on fancy button ok great so now

00:27:33.130 --> 00:27:33.140
depend on fancy button ok great so now
 

00:27:33.140 --> 00:27:34.810
depend on fancy button ok great so now
the editor is kicking off pub he's going

00:27:34.810 --> 00:27:34.820
the editor is kicking off pub he's going
 

00:27:34.820 --> 00:27:36.520
the editor is kicking off pub he's going
to go download it and install it and

00:27:36.520 --> 00:27:36.530
to go download it and install it and
 

00:27:36.530 --> 00:27:38.110
to go download it and install it and
make sure I'll worse my app I'm a little

00:27:38.110 --> 00:27:38.120
make sure I'll worse my app I'm a little
 

00:27:38.120 --> 00:27:39.520
make sure I'll worse my app I'm a little
impatient so I'm going to go over here

00:27:39.520 --> 00:27:39.530
impatient so I'm going to go over here
 

00:27:39.530 --> 00:27:41.980
impatient so I'm going to go over here
and show you what that looks like we're

00:27:41.980 --> 00:27:41.990
and show you what that looks like we're
 

00:27:41.990 --> 00:27:43.750
and show you what that looks like we're
going to win a quick click whoops click

00:27:43.750 --> 00:27:43.760
going to win a quick click whoops click
 

00:27:43.760 --> 00:27:46.299
going to win a quick click whoops click
counter and just like regular web

00:27:46.299 --> 00:27:46.309
counter and just like regular web
 

00:27:46.309 --> 00:27:48.400
counter and just like regular web
components and HTML imports you can

00:27:48.400 --> 00:27:48.410
components and HTML imports you can
 

00:27:48.410 --> 00:27:50.289
components and HTML imports you can
import the definition of fancy button

00:27:50.289 --> 00:27:50.299
import the definition of fancy button
 

00:27:50.299 --> 00:27:53.380
import the definition of fancy button
you can say that this button is a fancy

00:27:53.380 --> 00:27:53.390
you can say that this button is a fancy
 

00:27:53.390 --> 00:27:55.330
you can say that this button is a fancy
button now this is all backed by Dart

00:27:55.330 --> 00:27:55.340
button now this is all backed by Dart
 

00:27:55.340 --> 00:27:57.850
button now this is all backed by Dart
it's a real web component and it came to

00:27:57.850 --> 00:27:57.860
it's a real web component and it came to
 

00:27:57.860 --> 00:27:59.260
it's a real web component and it came to
us from that package management system

00:27:59.260 --> 00:27:59.270
us from that package management system
 

00:27:59.270 --> 00:28:01.720
us from that package management system
let's see if I indeed made it a little

00:28:01.720 --> 00:28:01.730
let's see if I indeed made it a little
 

00:28:01.730 --> 00:28:04.630
let's see if I indeed made it a little
fancier so run in dartium and yes

00:28:04.630 --> 00:28:04.640
fancier so run in dartium and yes
 

00:28:04.640 --> 00:28:08.320
fancier so run in dartium and yes
awesome ok pink ok so it's a nice just

00:28:08.320 --> 00:28:08.330
awesome ok pink ok so it's a nice just
 

00:28:08.330 --> 00:28:09.730
awesome ok pink ok so it's a nice just
demonstration how you can use a package

00:28:09.730 --> 00:28:09.740
demonstration how you can use a package
 

00:28:09.740 --> 00:28:11.020
demonstration how you can use a package
for instance package management system

00:28:11.020 --> 00:28:11.030
for instance package management system
 

00:28:11.030 --> 00:28:13.630
for instance package management system
and reuse code finally we need to get

00:28:13.630 --> 00:28:13.640
and reuse code finally we need to get
 

00:28:13.640 --> 00:28:15.370
and reuse code finally we need to get
this out into the wild it's one thing to

00:28:15.370 --> 00:28:15.380
this out into the wild it's one thing to
 

00:28:15.380 --> 00:28:17.380
this out into the wild it's one thing to
iterate very quickly in dartium but it's

00:28:17.380 --> 00:28:17.390
iterate very quickly in dartium but it's
 

00:28:17.390 --> 00:28:19.810
iterate very quickly in dartium but it's
another thing to be able to find my

00:28:19.810 --> 00:28:19.820
another thing to be able to find my
 

00:28:19.820 --> 00:28:24.580
another thing to be able to find my
original slides beep ok do your final

00:28:24.580 --> 00:28:24.590
original slides beep ok do your final
 

00:28:24.590 --> 00:28:26.169
original slides beep ok do your final
testing and production browsers like

00:28:26.169 --> 00:28:26.179
testing and production browsers like
 

00:28:26.179 --> 00:28:29.140
testing and production browsers like
Firefox and stable chrome and this is

00:28:29.140 --> 00:28:29.150
Firefox and stable chrome and this is
 

00:28:29.150 --> 00:28:30.850
Firefox and stable chrome and this is
where a pub build system comes in so

00:28:30.850 --> 00:28:30.860
where a pub build system comes in so
 

00:28:30.860 --> 00:28:32.650
where a pub build system comes in so
iterate very fast with dartium and the

00:28:32.650 --> 00:28:32.660
iterate very fast with dartium and the
 

00:28:32.660 --> 00:28:34.720
iterate very fast with dartium and the
editor and then run a nice build process

00:28:34.720 --> 00:28:34.730
editor and then run a nice build process
 

00:28:34.730 --> 00:28:36.220
editor and then run a nice build process
now more and more web developers are

00:28:36.220 --> 00:28:36.230
now more and more web developers are
 

00:28:36.230 --> 00:28:38.320
now more and more web developers are
moving to a build process it does really

00:28:38.320 --> 00:28:38.330
moving to a build process it does really
 

00:28:38.330 --> 00:28:40.299
moving to a build process it does really
nice optimizations for one ours runs

00:28:40.299 --> 00:28:40.309
nice optimizations for one ours runs
 

00:28:40.309 --> 00:28:41.890
nice optimizations for one ours runs
start to jsu saw some of the nice

00:28:41.890 --> 00:28:41.900
start to jsu saw some of the nice
 

00:28:41.900 --> 00:28:43.539
start to jsu saw some of the nice
optimizations can actually do with your

00:28:43.539 --> 00:28:43.549
optimizations can actually do with your
 

00:28:43.549 --> 00:28:45.760
optimizations can actually do with your
code tree shaking it can minify your app

00:28:45.760 --> 00:28:45.770
code tree shaking it can minify your app
 

00:28:45.770 --> 00:28:47.740
code tree shaking it can minify your app
if it totally knows your entire

00:28:47.740 --> 00:28:47.750
if it totally knows your entire
 

00:28:47.750 --> 00:28:49.270
if it totally knows your entire
application you do a really smart job

00:28:49.270 --> 00:28:49.280
application you do a really smart job
 

00:28:49.280 --> 00:28:49.990
application you do a really smart job
minification

00:28:49.990 --> 00:28:50.000
minification
 

00:28:50.000 --> 00:28:51.730
minification
and you can also do concatenation you

00:28:51.730 --> 00:28:51.740
and you can also do concatenation you
 

00:28:51.740 --> 00:28:53.560
and you can also do concatenation you
can take all your dependencies all your

00:28:53.560 --> 00:28:53.570
can take all your dependencies all your
 

00:28:53.570 --> 00:28:55.210
can take all your dependencies all your
custom elements and jam them all

00:28:55.210 --> 00:28:55.220
custom elements and jam them all
 

00:28:55.220 --> 00:28:57.520
custom elements and jam them all
together into one single file making the

00:28:57.520 --> 00:28:57.530
together into one single file making the
 

00:28:57.530 --> 00:28:59.950
together into one single file making the
deployment and performance very very

00:28:59.950 --> 00:28:59.960
deployment and performance very very
 

00:28:59.960 --> 00:29:01.330
deployment and performance very very
good in fact in this particular example

00:29:01.330 --> 00:29:01.340
good in fact in this particular example
 

00:29:01.340 --> 00:29:03.280
good in fact in this particular example
I mean you saw ate a lot of dependencies

00:29:03.280 --> 00:29:03.290
I mean you saw ate a lot of dependencies
 

00:29:03.290 --> 00:29:05.290
I mean you saw ate a lot of dependencies
third-party stuff custom libraries core

00:29:05.290 --> 00:29:05.300
third-party stuff custom libraries core
 

00:29:05.300 --> 00:29:07.300
third-party stuff custom libraries core
libraries this app compiles down and G

00:29:07.300 --> 00:29:07.310
libraries this app compiles down and G
 

00:29:07.310 --> 00:29:09.040
libraries this app compiles down and G
zips down to smaller than some CSS

00:29:09.040 --> 00:29:09.050
zips down to smaller than some CSS
 

00:29:09.050 --> 00:29:10.930
zips down to smaller than some CSS
frameworks you guys use so I think it's

00:29:10.930 --> 00:29:10.940
frameworks you guys use so I think it's
 

00:29:10.940 --> 00:29:12.420
frameworks you guys use so I think it's
kind of cool and just to show you that

00:29:12.420 --> 00:29:12.430
kind of cool and just to show you that
 

00:29:12.430 --> 00:29:14.770
kind of cool and just to show you that
that all works here we have it in

00:29:14.770 --> 00:29:14.780
that all works here we have it in
 

00:29:14.780 --> 00:29:17.890
that all works here we have it in
Firefox and it's the same this is dark

00:29:17.890 --> 00:29:17.900
Firefox and it's the same this is dark
 

00:29:17.900 --> 00:29:19.510
Firefox and it's the same this is dark
compile the JavaScript using web

00:29:19.510 --> 00:29:19.520
compile the JavaScript using web
 

00:29:19.520 --> 00:29:21.280
compile the JavaScript using web
components deployable to a production

00:29:21.280 --> 00:29:21.290
components deployable to a production
 

00:29:21.290 --> 00:29:23.410
components deployable to a production
browser today this stuff is real and you

00:29:23.410 --> 00:29:23.420
browser today this stuff is real and you
 

00:29:23.420 --> 00:29:28.030
browser today this stuff is real and you
can use it ok and then when you're

00:29:28.030 --> 00:29:28.040
can use it ok and then when you're
 

00:29:28.040 --> 00:29:29.380
can use it ok and then when you're
finally ready to go you have a nice

00:29:29.380 --> 00:29:29.390
finally ready to go you have a nice
 

00:29:29.390 --> 00:29:31.360
finally ready to go you have a nice
build directory which has just the

00:29:31.360 --> 00:29:31.370
build directory which has just the
 

00:29:31.370 --> 00:29:33.610
build directory which has just the
assets just those minified files in a

00:29:33.610 --> 00:29:33.620
assets just those minified files in a
 

00:29:33.620 --> 00:29:35.080
assets just those minified files in a
very nice director you could pick up and

00:29:35.080 --> 00:29:35.090
very nice director you could pick up and
 

00:29:35.090 --> 00:29:37.180
very nice director you could pick up and
put onto the web all that concatenation

00:29:37.180 --> 00:29:37.190
put onto the web all that concatenation
 

00:29:37.190 --> 00:29:39.850
put onto the web all that concatenation
all the minification done for you nice

00:29:39.850 --> 00:29:39.860
all the minification done for you nice
 

00:29:39.860 --> 00:29:42.490
all the minification done for you nice
and simple nice and simple so how do you

00:29:42.490 --> 00:29:42.500
and simple nice and simple so how do you
 

00:29:42.500 --> 00:29:44.200
and simple nice and simple so how do you
get started well we relaunch the website

00:29:44.200 --> 00:29:44.210
get started well we relaunch the website
 

00:29:44.210 --> 00:29:45.730
get started well we relaunch the website
we have a really nice code lab takes

00:29:45.730 --> 00:29:45.740
we have a really nice code lab takes
 

00:29:45.740 --> 00:29:48.460
we have a really nice code lab takes
under an hour wat SI through 0 to 60 you

00:29:48.460 --> 00:29:48.470
under an hour wat SI through 0 to 60 you
 

00:29:48.470 --> 00:29:50.020
under an hour wat SI through 0 to 60 you
get to build a really cool pirate name

00:29:50.020 --> 00:29:50.030
get to build a really cool pirate name
 

00:29:50.030 --> 00:29:51.880
get to build a really cool pirate name
badge generator so a really nice way to

00:29:51.880 --> 00:29:51.890
badge generator so a really nice way to
 

00:29:51.890 --> 00:29:53.350
badge generator so a really nice way to
try dart build for if you don't know

00:29:53.350 --> 00:29:53.360
try dart build for if you don't know
 

00:29:53.360 --> 00:29:55.630
try dart build for if you don't know
anything about dart and I want to leave

00:29:55.630 --> 00:29:55.640
anything about dart and I want to leave
 

00:29:55.640 --> 00:29:57.400
anything about dart and I want to leave
you with reminder that dart one point o

00:29:57.400 --> 00:29:57.410
you with reminder that dart one point o
 

00:29:57.410 --> 00:30:00.160
you with reminder that dart one point o
is for the modern web it's a platform

00:30:00.160 --> 00:30:00.170
is for the modern web it's a platform
 

00:30:00.170 --> 00:30:02.950
is for the modern web it's a platform
you can use today it's easy to get

00:30:02.950 --> 00:30:02.960
you can use today it's easy to get
 

00:30:02.960 --> 00:30:04.870
you can use today it's easy to get
started go to dartlang.org with api's

00:30:04.870 --> 00:30:04.880
started go to dartlang.org with api's
 

00:30:04.880 --> 00:30:07.480
started go to dartlang.org with api's
code labs articles tutorials and

00:30:07.480 --> 00:30:07.490
code labs articles tutorials and
 

00:30:07.490 --> 00:30:09.880
code labs articles tutorials and
everything you saw here even the web

00:30:09.880 --> 00:30:09.890
everything you saw here even the web
 

00:30:09.890 --> 00:30:11.680
everything you saw here even the web
component stuff all compiles to

00:30:11.680 --> 00:30:11.690
component stuff all compiles to
 

00:30:11.690 --> 00:30:13.300
component stuff all compiles to
JavaScript so you can write dart take

00:30:13.300 --> 00:30:13.310
JavaScript so you can write dart take
 

00:30:13.310 --> 00:30:14.560
JavaScript so you can write dart take
advantage of those great semantics

00:30:14.560 --> 00:30:14.570
advantage of those great semantics
 

00:30:14.570 --> 00:30:16.450
advantage of those great semantics
language and tools and still deploy

00:30:16.450 --> 00:30:16.460
language and tools and still deploy
 

00:30:16.460 --> 00:30:19.030
language and tools and still deploy
across the modern web so I think with

00:30:19.030 --> 00:30:19.040
across the modern web so I think with
 

00:30:19.040 --> 00:30:21.730
across the modern web so I think with
that whoops I think we're all ready to

00:30:21.730 --> 00:30:21.740
that whoops I think we're all ready to
 

00:30:21.740 --> 00:30:26.290
that whoops I think we're all ready to
go okay thank you very much

