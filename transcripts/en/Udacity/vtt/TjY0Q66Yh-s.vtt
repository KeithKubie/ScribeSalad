WEBVTT
Kind: captions
Language: en

00:00:00.200 --> 00:00:03.410
So far, we've looked at a number of visualizations to examine

00:00:03.410 --> 00:00:06.340
the distribution of a single variable. And, we also looked at

00:00:06.340 --> 00:00:09.700
transforming a variable to get a better look at the data.

00:00:09.700 --> 00:00:12.490
Now, there are other ways that we can transform a variable,

00:00:12.490 --> 00:00:15.352
beside using something like the square root or a log. You

00:00:15.352 --> 00:00:19.150
often want to convert variables that have a lot of zero values

00:00:19.150 --> 00:00:22.700
to a new binary variable that has only true or false.

00:00:22.700 --> 00:00:25.310
This is helpful because we may want to know whether a user

00:00:25.310 --> 00:00:28.110
has used a certain feature at all, instead of the number

00:00:28.110 --> 00:00:31.230
of times that the user has actually used that feature. For

00:00:31.230 --> 00:00:34.020
example, it may not matter how many times a person checked

00:00:34.020 --> 00:00:37.324
in using a mobile device. But, whether the person has ever

00:00:37.324 --> 00:00:40.870
used mobile check-in. Here's what I mean. Here's a summary of

00:00:40.870 --> 00:00:44.470
the mobile likes in our dataset. The median is four, which

00:00:44.470 --> 00:00:47.110
means we have a lot of zeroes in our dataset. If

00:00:47.110 --> 00:00:50.402
I run this summary, I'm going to get a different type of table.

00:00:50.402 --> 00:00:53.120
Notice that in the table I get logical counts, because I

00:00:53.120 --> 00:00:56.400
use this comparison operator. I wanted to see whether or not

00:00:56.400 --> 00:00:59.870
someone had actually checked in. So, instead of tracking the count

00:00:59.870 --> 00:01:03.055
of mobile likes, let's create a new variable that tracks mobile

00:01:03.055 --> 00:01:06.720
check-ins. We'll call this variable, mobile_check_in. The first thing I'll do

00:01:06.720 --> 00:01:09.810
is assign it a bunch of NA values. Next, we can

00:01:09.810 --> 00:01:12.810
use the if/else function to assign a value of one if

00:01:12.810 --> 00:01:15.420
the user has checked in using mobile and a value of

00:01:15.420 --> 00:01:18.080
zero if the user has not checked in. So in

00:01:18.080 --> 00:01:21.120
this if/else statement, if this condition is true, we'll assign our

00:01:21.120 --> 00:01:23.660
user a value of 1. Otherwise, we'll give them a

00:01:23.660 --> 00:01:26.390
value of 0. And the last thing I'll do is convert

00:01:26.390 --> 00:01:29.180
it to a factor variable. Running this code, I get

00:01:29.180 --> 00:01:32.270
my new variable saved. And then taking a summary of the

00:01:32.270 --> 00:01:36.020
results, I can see that about 64,000 just shy of

00:01:36.020 --> 00:01:40.230
that, have checked in using mobile while 35,000 have not. So,

00:01:40.230 --> 00:01:42.708
using this data can you tell me what percent of users

00:01:42.708 --> 00:01:46.540
check-in using mobile. Try to use actual code here instead of

00:01:46.540 --> 00:01:49.930
using these wrong numbers. Round your answer to the nearest percent

00:01:49.930 --> 00:01:52.060
and don't include the percent sign when you enter it here.

