WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
At the end of the TLS handshake protocol,

00:00:03.000 --> 00:00:06.000
the server and the client have agreed on three keys,

00:00:06.000 --> 00:00:09.000
which they've extracted from the master secret--

00:00:09.000 --> 00:00:14.000
a key for a symmetric encryption function, an initialization vector for that encryption,

00:00:14.000 --> 00:00:16.000
and a key for a hash function.

00:00:16.000 --> 00:00:20.000
The goal now is to protect the traffic between the server and the client.

00:00:20.000 --> 00:00:23.000
This will be in the form of requests for webpages.

00:00:23.000 --> 00:00:27.000
A typical HTTP request is to get some webpage.

00:00:27.000 --> 00:00:30.000
Then the server will send a response.

00:00:30.000 --> 00:00:33.000
I should reiterate that TLS protects many kinds of traffic.

00:00:33.000 --> 00:00:35.000
The protocol is not specific to HTTP.

00:00:35.000 --> 00:00:38.000
What I'm really talking about here is HTTPS,

00:00:38.000 --> 00:00:43.000
but the record protocol is the same regardless of how we're actually requesting the traffic.

00:00:43.000 --> 00:00:46.000
So this response is the contents of some webpage,

00:00:46.000 --> 00:00:50.000
which can be quite long. This could be many kilobytes of data.

00:00:50.000 --> 00:00:55.000
We need a way to encrypt that response and send it back to the client.

00:00:55.000 --> 00:00:58.000
The responses will call M.

00:00:58.000 --> 00:01:02.000
We want both confidentiality and integrity checking,

00:01:02.000 --> 00:01:08.000
so we're also going to include a MAC, using the hash function,

00:01:08.000 --> 00:01:11.000
so that's going to be HMAC(M).

00:01:11.000 --> 00:01:15.000
This uses kh to key the hash function for HMAC.

00:01:15.000 --> 00:01:18.000
This is similar to what we talked about in Unit 2

00:01:18.000 --> 00:01:21.000
where we're hashing the message, but because it's a keyed hash function,

00:01:21.000 --> 00:01:23.000
it depends on the key as well.

00:01:23.000 --> 00:01:27.000
Finally, we're going to have some padding to fill up the block size.

00:01:27.000 --> 00:01:29.000
Now we want to send this whole response--the result of concatenating

00:01:29.000 --> 00:01:34.000
all of these--over the secure channel. We'll call this R.

00:01:34.000 --> 00:01:38.000
The way this is done with the TLS record protocol is to use CBC--

00:01:38.000 --> 00:01:42.000
that's cipher block chaining mode of operation and some encryption function.

00:01:42.000 --> 00:01:45.000
We talked about CBC mode in Unit 2.

00:01:45.000 --> 00:01:48.000
As a reminder, this is the way CBC works.

00:01:48.000 --> 00:01:50.000
There's an initialization vector.

00:01:50.000 --> 00:01:58.000
We break the message into blocks. We'll call those blocks m0, m1, up to m(m - 1).

00:01:58.000 --> 00:02:01.000
The first message block is XORed with initialization vector.

00:02:01.000 --> 00:02:04.000
The output of that is encrypted using a key.

00:02:04.000 --> 00:02:08.000
The key that's used is a key that resulted from the handshake protocol.

00:02:08.000 --> 00:02:10.000
This results in the first ciphertext block.

00:02:10.000 --> 00:02:14.000
That becomes the input to the next XOR.

00:02:14.000 --> 00:02:17.000
That's the way the first response is done,

00:02:17.000 --> 00:02:20.000
but in a session there might be multiple responses.

00:02:20.000 --> 00:02:25.000
When the next response is done, we don't want to do the whole handshake protocol again.

00:02:25.000 --> 00:02:29.000
What happens in the next response, whatever the next message block is--

00:02:29.000 --> 00:02:34.000
that's going to be m'0--will be encrypted using CBC mode again

00:02:34.000 --> 00:02:37.000
that will produce the ciphertext block at the beginning of the next message.

00:02:37.000 --> 00:02:39.000
What we need is an IV here.

00:02:39.000 --> 00:02:42.000
We don't want to use the same IV again.

00:02:42.000 --> 00:02:45.000
That would make it clear if m0 equals m0'.

00:02:45.000 --> 00:02:52.000
The approach that is taken by TLS is to use the last ciphertext block of the previous message

00:02:52.000 --> 00:02:55.000
as the IV for the first block of the next message.

00:02:55.000 --> 00:02:58.000
This effectively makes it seem like it's one long message.

00:02:58.000 --> 00:03:01.000
It seems like this is a good idea.

00:03:01.000 --> 00:03:04.000
It's certainly better than reusing the original IV.

00:03:04.000 --> 00:03:07.000
It's better than having to do the handshake protocol all over again.

00:03:07.000 --> 00:03:09.000
The handshake is quite expensive.

00:03:09.000 --> 00:03:12.000
It involves asymmetric cryptographic operations, which are very expensive

00:03:12.000 --> 00:03:15.000
compared to the symmetric ones we're using here.

00:03:15.000 --> 00:03:18.000
This message does raise an interesting vulnerability.

00:03:18.000 --> 00:03:22.000
Let's see if you can figure out what it is using a quiz.

00:03:22.000 --> 00:03:25.000
The question is suppose an adversary intercepts the first message.

00:03:25.000 --> 00:03:28.000
The adversary learns all the encrypted blocks.

00:03:28.000 --> 00:03:31.000
It doesn't learn anything else. It doesn't know the k value of the IV value.

00:03:31.000 --> 00:03:33.000
The handshake worked fine.

00:03:33.000 --> 00:03:37.000
The question is whether the adversary can learn whether some block is

00:03:37.000 --> 00:03:39.000
equal to some guess for that block.

00:03:39.000 --> 00:03:44.000
To make this more concrete, suppose the blocks are all 8 bits.

00:03:44.000 --> 00:03:49.000
The adversary has intercepted all the ciphertext blocks, but I'll only tell you three of them.

00:03:49.000 --> 00:03:58.000
C3 was 10101010. C4 was 01010101. C(n-1)--that's the last ciphertext block--was 11110000,

00:03:58.000 --> 00:04:04.000
and what the adversary wants to learn is if the value of m4 was equal to all zeroes.

00:04:04.000 --> 00:04:08.000
To do this, the adversary can set the value of m0',

00:04:08.000 --> 00:04:12.000
figure out how to make the server give a particular response,

00:04:12.000 --> 00:04:15.000
and examine the first ciphertext block.

