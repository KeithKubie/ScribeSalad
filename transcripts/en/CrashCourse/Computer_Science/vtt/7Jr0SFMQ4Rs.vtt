WEBVTT
Kind: captions
Language: en

00:00:02.900 --> 00:00:05.960
Hi, I’m Carrie Anne, and welcome to CrashCourse
Computer Science!

00:00:05.960 --> 00:00:10.230
This 1960 PDP-1 is a great example of early
computing with graphics.

00:00:10.230 --> 00:00:14.381
You can see a cabinet-sized computer on the
left, an electromechanical teletype machine

00:00:14.381 --> 00:00:17.020
in the middle, and a round screen on the right.

00:00:17.020 --> 00:00:18.370
Note how they’re separated.

00:00:18.370 --> 00:00:22.260
That’s because text-based tasks and graphical
tasks were often distinct back then.

00:00:22.260 --> 00:00:27.100
In fact, these early computer screens had
a very hard time rendering crisp text, whereas

00:00:27.100 --> 00:00:30.340
typed paper offered much higher contrast and
resolution.

00:00:30.340 --> 00:00:34.739
The most typical use for early computer screens
was to keep track of a program's operation,

00:00:34.739 --> 00:00:36.359
like values in registers.

00:00:36.359 --> 00:00:39.780
It didn’t make sense to have a teletype
machine print this on paper over and over

00:00:39.780 --> 00:00:43.500
and over again -- that’d waste a lot of
paper, and it was slow.

00:00:43.500 --> 00:00:48.429
On the other hand, screens were dynamic and
quick to update -- perfect for temporary values.

00:00:48.429 --> 00:00:51.170
Computer screens were rarely considered for
program output, though.

00:00:51.170 --> 00:00:55.069
Instead, any results from a computation were
typically written to paper or some other more

00:00:55.069 --> 00:00:56.160
permanent medium.

00:00:56.160 --> 00:01:00.920
But, screens were so darn useful that by the
early 1960s, people started to use them for

00:01:00.920 --> 00:01:02.020
awesome things.

00:01:02.020 --> 00:01:10.840
INTRO

00:01:10.840 --> 00:01:14.800
A lot of different display technologies have
been created over the decades, but the most

00:01:14.800 --> 00:01:19.300
influential, and also the earliest, were Cathode
Ray Tubes, or CRTs.

00:01:19.300 --> 00:01:23.560
These work by shooting electrons out of an
emitter at a phosphor-coated screen.

00:01:23.560 --> 00:01:26.920
When electrons hit the coating, it glows for
a fraction of a second.

00:01:26.920 --> 00:01:31.680
Because electrons are charged particles, their
paths can be manipulated with electromagnetic

00:01:31.680 --> 00:01:32.680
fields.

00:01:32.680 --> 00:01:37.630
Plates or coils are used inside to steer electrons
to a desired position, both left-right and

00:01:37.630 --> 00:01:38.420
up-down.

00:01:38.420 --> 00:01:40.800
With this control, there are two ways you
can draw graphics.

00:01:40.810 --> 00:01:44.220
The first option is to direct the electron
beam to trace out shapes.

00:01:44.230 --> 00:01:45.940
This is called Vector Scanning.

00:01:45.940 --> 00:01:49.340
Because the glow persists for a little bit,
if you repeat the path quickly enough, you

00:01:49.340 --> 00:01:50.610
create a solid image.

00:01:50.610 --> 00:01:55.310
The other option is to repeatedly follow a
fixed path, scanning line by line, from top

00:01:55.310 --> 00:01:58.330
left to bottom right, and looping over and
over again.

00:01:58.330 --> 00:02:01.860
You only turn on the electron beam at certain
points to create graphics.

00:02:01.860 --> 00:02:03.510
This is called Raster Scanning.

00:02:03.510 --> 00:02:08.210
With this approach, you can display shapes...
and even text... all made of little line segments.

00:02:08.210 --> 00:02:12.040
Eventually, as display technologies improved,
it was possible to render crisp dots onto

00:02:12.040 --> 00:02:14.590
the screen, aka pixels.

00:02:14.590 --> 00:02:19.260
The Liquid Crystal Displays, or LCDs, that
we use today are quite a different technology.

00:02:19.260 --> 00:02:23.610
But, they use raster scanning too, updating
the brightness of little tiny red, green and

00:02:23.610 --> 00:02:25.790
blue pixels many times a second.

00:02:25.790 --> 00:02:29.939
Interestingly, most early computers didn’t
use pixels -- not because they couldn’t

00:02:29.940 --> 00:02:34.090
physically, but because it consumed way too
much memory for computers of the time.

00:02:34.090 --> 00:02:38.260
A 200 by 200 pixel image contains 40,000 pixels.

00:02:38.260 --> 00:02:43.499
Even if you use just one bit of data for each
pixel, that’s black OR white -- not grayscale!

00:02:43.499 --> 00:02:45.780
-- the image would consume 40,000 bits of
memory.

00:02:45.780 --> 00:02:50.000
That would have gobbled up more than half
of a PDP-1’s entire RAM.

00:02:50.000 --> 00:02:54.359
So, computer scientists and engineers had
to come up with clever tricks to render graphics

00:02:54.359 --> 00:02:57.650
until memory sizes caught up to our pixelicious
ambitions.

00:02:57.650 --> 00:03:01.439
Instead of storing tens of thousands of pixels,
early computers stored a much smaller grid

00:03:01.439 --> 00:03:05.319
of letters, most typically 80 by 25 characters.

00:03:05.319 --> 00:03:07.620
That’s 2000 characters in total.

00:03:07.620 --> 00:03:12.230
And if each is encoded in 8 bits, using something
like ASCII, it would consume 16,000 bits of

00:03:12.230 --> 00:03:15.940
memory for an entire screen full of text,
which is way more reasonable.

00:03:15.940 --> 00:03:19.579
To pull this off, computers needed an extra
piece of hardware that could read characters

00:03:19.579 --> 00:03:23.719
out of RAM, and convert them into raster graphics
to be drawn onto the screen.

00:03:23.719 --> 00:03:27.739
This was called a character generator, and
they were basically the first graphics cards.

00:03:27.739 --> 00:03:32.629
Inside, they had a little piece of Read Only
Memory, a ROM, that stored graphics for each

00:03:32.629 --> 00:03:34.819
character, called a dot matrix pattern.

00:03:34.819 --> 00:03:38.530
If the graphics card saw the 8-bit code for
the letter “K”, then it would raster scan

00:03:38.530 --> 00:03:41.739
the 2D pattern for the letter K onto the screen,
in the appropriate position.

00:03:41.739 --> 00:03:45.489
To do this, the character generator had special
access to a portion of a computer's memory

00:03:45.489 --> 00:03:48.840
reserved for graphics, a region called the
screen buffer.

00:03:48.840 --> 00:03:53.140
Computer programs wishing to render text to
the screen simply manipulated the values stored

00:03:53.140 --> 00:03:56.389
in this region, just as they could with any
other data in RAM.

00:03:56.389 --> 00:03:59.840
This scheme required much less memory, but
it also meant the only thing you could draw

00:03:59.840 --> 00:04:01.099
was text.

00:04:01.099 --> 00:04:04.109
Even still, people got pretty inventive with
ASCII art!

00:04:04.109 --> 00:04:09.590
People also tried to make rudimentary, pseudo-graphical
interfaces out of this basic set of characters,

00:04:09.590 --> 00:04:13.900
using things like underscores and plus signs
to create boxes, lines and other primitive

00:04:13.900 --> 00:04:14.440
shapes.

00:04:14.440 --> 00:04:18.360
But, the character set was really too small
to do anything terribly sophisticated.

00:04:18.360 --> 00:04:22.750
So, various extensions to ASCII were made
that added new semigraphical characters, like

00:04:22.750 --> 00:04:27.240
IBM’s CP437 character set, seen here, which
was used in DOS.

00:04:27.240 --> 00:04:31.410
On some systems, the text color and background
color could be defined with a few extra bits.

00:04:31.410 --> 00:04:35.599
That allowed glorious interfaces like this
DOS example, which is built entirely out the

00:04:35.599 --> 00:04:37.490
character set you just saw.

00:04:37.490 --> 00:04:39.780
Character generators were a clever way to
save memory.

00:04:39.780 --> 00:04:42.180
But, they didn’t provide any way to draw
arbitrary shapes.

00:04:42.180 --> 00:04:46.430
And that’s important if you want to draw
content like electrical circuits, architectural

00:04:46.430 --> 00:04:49.110
plans, maps, and... well… pretty much everything
that isn’t text!

00:04:49.110 --> 00:04:53.120
To do this, without resorting to memory-gobbling
pixels, computer scientists used the vector

00:04:53.120 --> 00:04:55.169
mode available on CRTs.

00:04:55.169 --> 00:04:59.850
The idea is pretty straightforward: all content
to be drawn on screen is defined by a series

00:04:59.850 --> 00:05:00.850
of lines.

00:05:00.850 --> 00:05:01.850
There’s no text.

00:05:01.850 --> 00:05:04.690
If you need to draw text, you have to draw
it out of lines.

00:05:04.690 --> 00:05:05.960
Don’t read between the lines here.

00:05:05.960 --> 00:05:07.370
There is only lines!

00:05:07.370 --> 00:05:08.370
Got it?

00:05:08.370 --> 00:05:09.470
Alright, no more word play.

00:05:09.470 --> 00:05:10.520
I’m drawing the line here.

00:05:10.520 --> 00:05:15.509
Let’s pretend this video is a cartesian
plane, 200 units wide and 100 tall, with the

00:05:15.509 --> 00:05:19.090
origin – that’s the zero-zero point – in
the upper left corner.

00:05:19.090 --> 00:05:23.060
We can draw a shape with the following vector
commands, which we’ve borrowed from the

00:05:23.060 --> 00:05:25.090
Vectrex, an early vector display system.

00:05:25.090 --> 00:05:29.150
First, we reset, which clears the screen,
moves the drawing point of the electron gun

00:05:29.150 --> 00:05:32.500
to zero-zero, and sets the brightness of lines
to zero.

00:05:32.500 --> 00:05:37.630
Then we move the drawing point down to 50
50, and set the line intensity to 100%.

00:05:37.630 --> 00:05:43.220
With the intensity up, now we move to 100,
50, then 60, 75 and then back to 50,50.

00:05:43.220 --> 00:05:47.260
The last thing to do is set our line intensity
back to 0%.

00:05:47.260 --> 00:05:47.760
Cool!

00:05:47.770 --> 00:05:49.030
We’ve got a triangle!

00:05:49.030 --> 00:05:53.190
This sequence of commands would consume on
the order of 160 bits, which is way more efficient

00:05:53.190 --> 00:05:55.599
than keeping a huge matrix of pixel values!

00:05:55.599 --> 00:05:59.819
Just like how characters were stored in memory
and turned into graphics by a character generator,

00:05:59.819 --> 00:06:03.510
these vector instructions were also stored
in memory, and rendered to a screen using

00:06:03.510 --> 00:06:05.229
a vector graphics card.

00:06:05.229 --> 00:06:09.419
Hundreds of commands could be packed together,
sequentially, in the screen buffer, and used

00:06:09.419 --> 00:06:11.229
to build up complex graphics.

00:06:11.229 --> 00:06:12.699
All made of lines!

00:06:12.699 --> 00:06:17.320
Because all these vectors are stored in memory,
computer programs can update the values freely,

00:06:17.320 --> 00:06:20.379
allowing for graphics that change over time
-- Animation!

00:06:20.379 --> 00:06:26.069
One of the very earliest video games, Spacewar!,
was built on a PDP-1 in 1962 using vector

00:06:26.069 --> 00:06:27.069
graphics.

00:06:27.069 --> 00:06:31.009
It’s credited with inspiring many later
games, like Asteroids, and even the first

00:06:31.009 --> 00:06:34.130
commercial arcade video game: Computer Space.

00:06:34.130 --> 00:06:38.949
1962 was also a huge milestone because of
Sketchpad, an interactive graphical interface

00:06:38.949 --> 00:06:42.180
that offered Computer-Aided Design -- called
CAD Software today.

00:06:42.180 --> 00:06:46.340
It’s widely considered the earliest example
of a complete graphical application.

00:06:46.340 --> 00:06:50.539
And its inventor, Ivan Sutherland, later won
the Turing Award for this breakthrough.

00:06:50.539 --> 00:06:54.060
To interact with graphics, Sketchpad used
a recently invented input device called a

00:06:54.060 --> 00:06:57.889
light pen, which was a stylus tethered to
a computer with a wire.

00:06:57.889 --> 00:07:02.520
By using a light sensor in the tip, the pen
detected the refresh of the computer monitor.

00:07:02.520 --> 00:07:06.480
Using the timing of the refresh, the computer
could actually figure out the pen’s position

00:07:06.480 --> 00:07:07.479
on the screen!

00:07:07.479 --> 00:07:11.470
With this light pen, and various buttons on
a gigantic computer, users could draw lines

00:07:11.470 --> 00:07:13.219
and other simple shapes.

00:07:13.219 --> 00:07:17.659
Sketchpad could do things like make lines
perfectly parallel, the same length, straighten

00:07:17.659 --> 00:07:23.199
corners into perfect 90 degree intersections,
and even scale shapes up and down dynamically.

00:07:23.199 --> 00:07:27.030
These things that were laborious on paper,
a computer now did with a press of a button!

00:07:27.030 --> 00:07:32.120
Users were also able to save complex designs
they created, and then paste them into later

00:07:32.120 --> 00:07:34.460
designs, and even share with other people.

00:07:34.460 --> 00:07:38.409
You could have whole libraries of shapes,
like electronic components and pieces of furniture

00:07:38.409 --> 00:07:41.419
that you could just plop in and manipulate
in your creations.

00:07:41.419 --> 00:07:44.069
This might all sound pretty routine from today’s
perspective.

00:07:44.069 --> 00:07:49.789
But in 1962, when computers were still cabinet-sized
behemoths chugging through punch cards, Sketchpad

00:07:49.789 --> 00:07:53.199
and light pens were equal parts eye opening
and brain melting.

00:07:53.199 --> 00:07:56.840
They represented a key turning point in how
computers could be used.

00:07:56.840 --> 00:08:00.580
They were no longer just number crunching
math machines that hummed along behind closed

00:08:00.580 --> 00:08:01.580
doors.

00:08:01.580 --> 00:08:05.319
Now, they were potential assistants, interactively
augmenting human tasks.

00:08:05.320 --> 00:08:10.280
The earliest computers and displays with true
pixel graphics emerged in the late 1960s.

00:08:10.280 --> 00:08:15.220
Bits in memory directly “mapped” to pixels
on the screen, what are called bitmapped displays.

00:08:15.220 --> 00:08:18.000
With full pixel control, totally arbitrary
graphics were possible.

00:08:18.009 --> 00:08:22.860
You can think of a screen’s graphics as
a huge matrix of pixel values . As before,

00:08:22.860 --> 00:08:27.110
computers reserve a special region of memory
for pixel data, called the frame buffer.

00:08:27.110 --> 00:08:30.610
In the early days, the computer’s RAM was
used, but later systems used special high

00:08:30.610 --> 00:08:35.579
speed Video RAM, or VRAM, which was located
on the graphics card itself for high speed

00:08:35.579 --> 00:08:36.579
access.

00:08:36.579 --> 00:08:37.810
This is how it’s done today.

00:08:37.810 --> 00:08:43.990
On an 8-bit grayscale screen, we can set values
from 0 intensity, which is black, to 255 intensity,

00:08:43.990 --> 00:08:44.990
which is white.

00:08:44.990 --> 00:08:48.740
Well actually, it might be green... or orange,
as many early displays couldn’t do white.

00:08:48.740 --> 00:08:52.839
Let’s pretend this video is a really low
resolution bitmapped screen, with a resolution

00:08:52.839 --> 00:08:54.740
of 60 by 35 pixels.

00:08:54.740 --> 00:08:58.899
If we wanted to set the pixel at 10 10 to
be white, we could do it with a piece of code

00:08:58.899 --> 00:08:59.899
like this.

00:08:59.899 --> 00:09:05.150
If we wanted to draw a line, let’s say from
30, 0 to 30, 35, we can use a loop, like so….

00:09:05.150 --> 00:09:07.680
….And this changes a whole line of pixels
to white.

00:09:07.680 --> 00:09:12.320
If we want to draw something more complicated,
let’s say a rectangle, we need to know four

00:09:12.320 --> 00:09:13.320
values.

00:09:13.320 --> 00:09:16.560
The X and Y coordinate of its starting corner,
and its width and height.

00:09:16.560 --> 00:09:21.180
So far, we’ve drawn everything in white,
so let’s specify this rectangle to be grey.

00:09:21.180 --> 00:09:26.150
Grey is halfway between 0 and 255, so that’s
a color value of 127.

00:09:26.150 --> 00:09:30.510
Then, with two loops – one nested in the
other, so that the inner loop runs once for

00:09:30.510 --> 00:09:34.390
every iteration of the outer loop – we can
draw a rectangle.

00:09:34.390 --> 00:09:37.740
When the computer executes our code as part
of its draw routine, it colors in all the

00:09:37.740 --> 00:09:38.950
pixels we specified.

00:09:38.950 --> 00:09:42.079
Let’s wrap this up into a “draw rectangle
function”, like this:

00:09:42.079 --> 00:09:46.520
Now, to draw a second rectangle on the other
side of the screen, maybe in black this time,

00:09:46.520 --> 00:09:48.779
we can just call our rectangle drawing function.

00:09:48.779 --> 00:09:49.779
Voila!!

00:09:49.779 --> 00:09:53.380
Just like the other graphics schemes we’ve
discussed, programs can manipulate pixel data

00:09:53.380 --> 00:09:56.610
in the framebuffer, creating interactive graphics.

00:09:56.610 --> 00:09:57.610
Pong time!

00:09:57.610 --> 00:10:01.810
Of course, programmers aren’t wasting time
writing drawing functions from scratch.

00:10:01.810 --> 00:10:06.230
They use graphics libraries with ready-to-go
functions for drawing lines, curves, shapes,

00:10:06.230 --> 00:10:07.950
text, and other cool stuff.

00:10:07.950 --> 00:10:15.510
Just a new level of abstraction!

00:10:15.510 --> 00:10:19.290
The flexibility of bitmapped graphics opened
up a whole new world of possibilities for

00:10:19.290 --> 00:10:23.110
interactive computing, but it remained expensive
for decades.

00:10:23.110 --> 00:10:28.690
As I mentioned last episode, by as late as
1971, it was estimated there were around 70,000

00:10:28.690 --> 00:10:33.839
electro-mechanical teletype machines and 70,000
terminals in use, in the United States.

00:10:33.839 --> 00:10:39.709
Amazingly, there were only around 1,000 computers
in the US that had interactive graphical screens.

00:10:39.709 --> 00:10:40.890
That’s not a lot!

00:10:40.890 --> 00:10:45.670
But the stage was set – helped along by
pioneering efforts like Sketchpad and Spacewars

00:10:45.670 --> 00:10:50.550
– for computer displays to become ubiquitous,
and with them, the dawn of graphical user

00:10:50.550 --> 00:10:52.860
interfaces, which we’ll cover in a few episodes!

00:10:52.880 --> 00:10:53.920
I’ll see you next week.

