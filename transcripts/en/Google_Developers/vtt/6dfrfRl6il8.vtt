WEBVTT
Kind: captions
Language: en

00:00:02.889 --> 00:00:07.700
Hi I’m Rachel and I am a software engineer
on the Google Accessibility Engineering team.

00:00:07.700 --> 00:00:11.220
In this video I want to talk to you about
how you can develop extensions for Chrome

00:00:11.220 --> 00:00:14.170
that can be useful for users with disabilities.

00:00:14.170 --> 00:00:19.480
For users with disabilities such as blindness,
low vision, deafness, or limited dexterity,

00:00:19.480 --> 00:00:23.779
the web can be difficult or even impossible
to navigate. From interfaces that don’t

00:00:23.779 --> 00:00:28.380
allow keyboard navigation to text that is
too small to read, users with special needs

00:00:28.380 --> 00:00:33.040
can find a lot of obstacles in front of them
and their favorite content. Chrome browser

00:00:33.040 --> 00:00:41.530
extensions can help by enabling users to customize
many aspects of the browser and the web.

00:00:41.530 --> 00:00:45.150
One extension that I’ve been working on
for a while is called ChromeVis. &nbsp;It’s

00:00:45.150 --> 00:00:49.600
an extension that gives you the ability to
magnify any selected text on a webpage.

00:00:49.600 --> 00:00:55.300
ChromeVis displays the magnified text inside
of a floating lens, so the original page layout

00:00:55.300 --> 00:00:56.870
is preserved.

00:00:56.870 --> 00:01:01.809
This extension is intended for users with
low vision, and I have included some key features

00:01:01.809 --> 00:01:04.140
that are important to this user group.

00:01:04.140 --> 00:01:07.750
First, the extension is completely keyboard
navigable.

00:01:07.750 --> 00:01:12.130
You can move the selection around the page
without ever touching the mouse. You can use

00:01:12.130 --> 00:01:17.130
keyboard shortcuts to specify whether you
want to move the selection by paragraph, sentence,

00:01:17.130 --> 00:01:19.229
word, or even character.

00:01:19.229 --> 00:01:24.700
Second, both the lens text color and the lens
background color can be changed.

00:01:24.700 --> 00:01:29.570
This is also done through keyboard shortcuts.
This way, you can adjust the lens to achieve

00:01:29.570 --> 00:01:34.730
your desired contrast between foreground and
background. And you can save several different

00:01:34.730 --> 00:01:37.399
combinations of foreground and background
color.

00:01:37.399 --> 00:01:41.290
Finally, we included two layout options for
the lens display.

00:01:41.290 --> 00:01:44.900
You can keep the lens anchored at the top
of the window while scrolling the page underneath

00:01:44.900 --> 00:01:50.509
it. Or, you can make the lens appear directly
above the selected text, enabling you to see

00:01:50.509 --> 00:01:53.070
the magnified text in its original context.

00:01:53.070 --> 00:01:57.710
The ChromeVis options page is an important
part of the extension. Here, you can change

00:01:57.710 --> 00:02:01.710
the lens colors as well as specify your own
keyboard shortcuts.

00:02:01.710 --> 00:02:05.510
This is especially important for users who
might be using screen reading software that

00:02:05.510 --> 00:02:09.630
reserves its own keyboard shortcuts, or when
a user is using a web application like GMail

00:02:09.630 --> 00:02:14.170
that reserves additional shortcuts.

00:02:14.170 --> 00:02:18.360
Any developer can integrate features like
those found in ChromeVis into their extension

00:02:18.360 --> 00:02:22.660
because we’re releasing the code as open
source. There are a few features that I think

00:02:22.660 --> 00:02:24.670
could be particularly interesting:

00:02:24.670 --> 00:02:29.879
To move a selection around a web page automatically,
I relied upon the WebKit selection API. I

00:02:29.879 --> 00:02:34.780
call selection.modify whenever I want to move
a selection forward or backward in the page,

00:02:34.780 --> 00:02:37.840
and wrapped this call into the functions nextElement
and prevElement.

00:02:37.840 --> 00:02:42.420
I also did some additional work to clean up
the selections that selection.modify produces

00:02:42.420 --> 00:02:46.870
to ensure logical movement between &lt;div&gt; blocks
and so that blank text nodes or spacer nodes

00:02:46.870 --> 00:02:49.099
are not included in a selection.

00:02:49.099 --> 00:02:53.659
It was actually a non-trivial problem to determine
the position of selected text, because text

00:02:53.659 --> 00:02:58.430
nodes do not have position attributes. I ended
up calculating the position by inserting a

00:02:58.430 --> 00:03:02.610
span at the beginning of the selection range,
determining the position of that span, and

00:03:02.610 --> 00:03:03.900
then deleting the span.

00:03:03.900 --> 00:03:07.420
If you think these functions would be useful,
please feel free to include our selection

00:03:07.420 --> 00:03:09.920
JavaScript libraries inside your own extension.

00:03:09.920 --> 00:03:15.670
Including keyboard navigation, text size options,
and color options are some simple ways to

00:03:15.670 --> 00:03:20.140
make your extensions more accessible to users
and give the browser more flexibility in how

00:03:20.140 --> 00:03:25.610
content is displayed. If you want more specific
information on writing accessible extensions,

00:03:25.610 --> 00:03:29.840
please see the new Accessibility implementation
guide in the Chrome Extensions Developer’s

00:03:29.840 --> 00:03:35.210
Guide at code.google.com/chrome/extensions

