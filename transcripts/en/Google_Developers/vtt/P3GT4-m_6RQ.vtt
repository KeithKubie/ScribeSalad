WEBVTT
Kind: captions
Language: en

00:00:02.501 --> 00:00:04.067
Hi, I'm Andrew Bowers,

00:00:04.067 --> 00:00:06.434
product manager for developer
products at Google.

00:00:06.434 --> 00:00:08.334
Today I'm going
to give you an early look

00:00:08.334 --> 00:00:10.234
at Java language support
on App Engine.

00:00:10.234 --> 00:00:11.834
I'll guide you
through the development

00:00:11.834 --> 00:00:13.534
of a simple guestbook
application,

00:00:13.534 --> 00:00:15.167
from creation to deployment.

00:00:15.167 --> 00:00:17.834
Let's get started.

00:00:17.834 --> 00:00:20.601
I'll start by opening up
the Eclipse IDE.

00:00:20.601 --> 00:00:22.701
Here I have the standard Java
perspective,

00:00:22.701 --> 00:00:26.167
and you can see a few extra
toolbar icons at the top left.

00:00:26.167 --> 00:00:27.634
We've extended
the environment

00:00:27.634 --> 00:00:29.534
with a Google plugin
for Eclipse,

00:00:29.534 --> 00:00:31.267
providing support
for Google Web Toolkit

00:00:31.267 --> 00:00:32.367
and App Engine.

00:00:32.367 --> 00:00:33.934
Of course,
you can also develop

00:00:33.934 --> 00:00:37.234
using another IDE, or from
the command line if you wish.

00:00:37.234 --> 00:00:39.334
To create a new project,
I'm going to click

00:00:39.334 --> 00:00:40.901
on the blue "g"
in the top left.

00:00:40.901 --> 00:00:43.901
This brings up the new
web application project wizard.

00:00:43.901 --> 00:00:46.968
I'll enter in a project name
and a package for my project.

00:00:46.968 --> 00:00:49.467
I can also choose whether
to use App Engine

00:00:49.467 --> 00:00:51.934
or Google Web Toolkit
with the project.

00:00:51.934 --> 00:00:54.367
Choosing these will configure
the starter project differently,

00:00:54.367 --> 00:00:55.968
depending on what you pick.

00:00:55.968 --> 00:00:57.667
For this example
I'm going to create

00:00:57.667 --> 00:00:59.467
a simple JSP servlet,

00:00:59.467 --> 00:01:01.267
so I'll uncheck
Google Web Toolkit

00:01:01.267 --> 00:01:03.000
and click, "okay."

00:01:03.000 --> 00:01:05.534
The project wizard has now
created a template project

00:01:05.534 --> 00:01:07.133
that I can edit and run.

00:01:07.133 --> 00:01:09.000
Taking a look
inside the project,

00:01:09.000 --> 00:01:11.667
you'll notice that
it's a standard J2EE Type

00:01:11.667 --> 00:01:15.701
servlet project that can
be run on any J2EE container.

00:01:15.701 --> 00:01:17.434
There's a source directory,
which contains

00:01:17.434 --> 00:01:20.133
our Java source files,
like you'd expect.

00:01:20.133 --> 00:01:23.901
The App Engine and Java Virtual
Machine SDK libraries.

00:01:23.901 --> 00:01:27.100
And finally, a web archive,
or war directory.

00:01:27.100 --> 00:01:30.133
App Engine uses a standard Java
web archive directory

00:01:30.133 --> 00:01:31.968
as its deployment directory.

00:01:31.968 --> 00:01:34.000
You put the files you want
to deploy to App Engine

00:01:34.000 --> 00:01:36.300
into this directory,
including static files,

00:01:36.300 --> 00:01:40.167
JSPs, and your compiled
class files.

00:01:40.167 --> 00:01:42.100
Going back
to the source directory,

00:01:42.100 --> 00:01:44.968
you'll notice that there is
a standard Java servlet file.

00:01:44.968 --> 00:01:47.601
This file responds
to an HTTP request,

00:01:47.601 --> 00:01:49.200
and outputs, "Hello, world."

00:01:49.200 --> 00:01:51.067
Let's try it out locally.

00:01:51.067 --> 00:01:53.601
In order to do that,
I need a server.

00:01:53.601 --> 00:01:56.067
Luckily, App Engine ships
with a development web server

00:01:56.067 --> 00:01:57.968
that mimics
the production environment.

00:01:57.968 --> 00:02:00.300
This enables you
to download the SDK

00:02:00.300 --> 00:02:03.100
and immediately start developing
on your local machine.

00:02:03.100 --> 00:02:05.033
I'll start the local server
by choosing,

00:02:05.033 --> 00:02:06.501
"debug web application."

00:02:06.501 --> 00:02:09.133
This starts the server
on port 8080.

00:02:09.133 --> 00:02:13.367
Navigating to this URL,
I see, "Hello, world."

00:02:13.367 --> 00:02:15.300
We now have the foundation
for our project.

00:02:15.300 --> 00:02:16.968
Let's add the source files
that we need

00:02:16.968 --> 00:02:18.701
for a guestbook application.

00:02:18.701 --> 00:02:20.400
This application
is going to consist

00:02:20.400 --> 00:02:22.200
of three basic source files.

00:02:22.200 --> 00:02:24.567
First, we'll have
a guestbook.jsp file

00:02:24.567 --> 00:02:27.767
that contains the HTML form
for creating a new entry.

00:02:27.767 --> 00:02:29.868
That will post
to a GuestBookServlet,

00:02:29.868 --> 00:02:31.701
which will accept
the form variables

00:02:31.701 --> 00:02:33.868
and create
a GuestBookEntry object.

00:02:33.868 --> 00:02:36.267
We'll then save that object
to the datastore,

00:02:36.267 --> 00:02:38.467
and redirect back
to the JSP page.

00:02:38.467 --> 00:02:40.968
Finally, the JSP page
will list out

00:02:40.968 --> 00:02:43.167
all of the GuestBook entries
in the datastore.

00:02:43.167 --> 00:02:46.033
I've already written most of
the code for those three files.

00:02:46.033 --> 00:02:49.734
I'll import them
into my project.

00:02:49.734 --> 00:02:53.767
And I'll drag the JSP file
into the web archive directory.

00:02:53.767 --> 00:02:57.534
Finally, I want to modify
the web.xml configuration file

00:02:57.534 --> 00:02:59.334
to point to my new JSP.

00:02:59.334 --> 00:03:01.400
I'll do that
by opening up the web.xml,

00:03:01.400 --> 00:03:03.934
and changing
the welcome file entry.

00:03:03.934 --> 00:03:05.734
Let's run this again,
and you'll see

00:03:05.734 --> 00:03:08.133
that I have a simple
HTML form that submits,

00:03:08.133 --> 00:03:10.868
but it doesn't store anything
to the datastore yet.

00:03:10.868 --> 00:03:13.000
Let's take care of that next.

00:03:13.000 --> 00:03:15.434
App Engine's datastore is built
on top of Big Table,

00:03:15.434 --> 00:03:18.033
a scalable, distributed
storage platform.

00:03:18.033 --> 00:03:20.634
In addition
to low-level datastore APIs,

00:03:20.634 --> 00:03:22.801
we provide standards-based
APIs in the form

00:03:22.801 --> 00:03:25.934
of Java Data Objects
and Java Persistence API.

00:03:25.934 --> 00:03:28.601
JDO and JPA are Java standards
for persisting

00:03:28.601 --> 00:03:30.901
plain Java objects
to a datastore.

00:03:30.901 --> 00:03:34.434
They're datastore agnostic,
mapping to relational databases,

00:03:34.434 --> 00:03:37.167
XML, or in our case,
the App Engine datastore.

00:03:37.167 --> 00:03:39.133
This means that I can
write a Java class

00:03:39.133 --> 00:03:41.868
and persist those objects
directly to the datastore

00:03:41.868 --> 00:03:43.567
without having to read
and write specific fields

00:03:43.567 --> 00:03:45.501
to and from a table.

00:03:45.501 --> 00:03:47.667
In this example,
we'll use JDO.

00:03:47.667 --> 00:03:50.033
I'd like to store the
GuestBookEntry objects.

00:03:50.033 --> 00:03:53.100
In order to do that,
I simply annotate the class.

00:03:53.100 --> 00:03:55.501
JDO then performs a step called,
"enhancement,"

00:03:55.501 --> 00:03:57.534
where it will modify
the bytecode of the class

00:03:57.534 --> 00:04:00.501
so that it can persist
to the datastore.

00:04:00.501 --> 00:04:03.167
First, I'll import
the annotation classes.

00:04:03.167 --> 00:04:05.567
Next, I'll add an annotation
to the class

00:04:05.567 --> 00:04:10.100
that indicates it is capable
of persistence.

00:04:10.100 --> 00:04:13.367
Third, I'll annotate the fields
I wish to save

00:04:13.367 --> 00:04:19.834
with a Persistent annotation
from JDO.

00:04:19.834 --> 00:04:22.367
And finally,
every object in JDO must have

00:04:22.367 --> 00:04:24.100
a unique primary key.

00:04:24.100 --> 00:04:26.033
So I'll set the primary key
in the class.

00:04:26.033 --> 00:04:28.901
I want the datastore to allocate
a unique key for me,

00:04:28.901 --> 00:04:31.300
so I'll ask it to do that
in the annotation.

00:04:31.300 --> 00:04:34.000
Saving the file causes
the DataNucleus enhancer

00:04:34.000 --> 00:04:36.567
to run in the background,
making my class capable

00:04:36.567 --> 00:04:38.534
of being saved to the datastore.

00:04:38.534 --> 00:04:43.334
Now we need to actually save
to and query from the datastore.

00:04:43.334 --> 00:04:46.434
JDO uses something called
the PersistenceManager

00:04:46.434 --> 00:04:48.634
to interact with the datastore.

00:04:48.634 --> 00:04:50.467
You get a JDO
PersistenceManager

00:04:50.467 --> 00:04:53.300
using a
PersistenceManagerFactory.

00:04:53.300 --> 00:04:55.968
Now, a PersistenceManagerFactory
is analogous

00:04:55.968 --> 00:04:58.567
to a database connection pool,
and it has some overhead

00:04:58.567 --> 00:05:00.467
associated with creating it.

00:05:00.467 --> 00:05:02.567
In order to be efficient
in our application,

00:05:02.567 --> 00:05:04.767
we want to create a singleton
instance of the factory,

00:05:04.767 --> 00:05:06.868
and only create it once.

00:05:06.868 --> 00:05:09.601
If you remember,
our JSP posts to the servlet,

00:05:09.601 --> 00:05:12.100
which then creates
a GuestBookEntry object,

00:05:12.100 --> 00:05:13.968
and should store it
to the datastore.

00:05:13.968 --> 00:05:17.067
We create a PersistenceManager
from our factory.

00:05:17.067 --> 00:05:22.234
Next, we save the object by
calling makePersistent.

00:05:22.234 --> 00:05:25.367
Then we close our JDO
PersistenceManager.

00:05:25.367 --> 00:05:26.901
That's it.

00:05:26.901 --> 00:05:31.367
Now let's go to our JSP,
and query for all the entries.

00:05:31.367 --> 00:05:34.667
We get
the PersistenceManager again.

00:05:34.667 --> 00:05:37.267
I create a query
with SQL-like constructs,

00:05:37.267 --> 00:05:39.467
and tell it which object
I'm looking for.

00:05:39.467 --> 00:05:42.801
Finally, I execute the query
and assign the results

00:05:42.801 --> 00:05:45.467
to a list
which I can iterate through.

00:05:45.467 --> 00:05:48.067
Now, with our JDO
datastore code in place,

00:05:48.067 --> 00:05:49.634
let's try it out.

00:05:49.634 --> 00:05:51.501
I go back to my local server,

00:05:51.501 --> 00:05:54.434
enter in an entry,
and voila.

00:05:54.434 --> 00:05:56.534
The JSP posts to the servlet,

00:05:56.534 --> 00:05:58.667
the servlet creates
a new entry object,

00:05:58.667 --> 00:06:00.601
persists to our datastore,

00:06:00.601 --> 00:06:02.767
and then redirects back
to the JSP.

00:06:02.767 --> 00:06:04.634
The JSP then queries
the datastore

00:06:04.634 --> 00:06:06.767
and lists out the entries.

00:06:06.767 --> 00:06:09.701
I now have a fully functioning
guest book application.

00:06:09.701 --> 00:06:11.601
I want to share that
with the world

00:06:11.601 --> 00:06:13.400
by deploying to App Engine.

00:06:13.400 --> 00:06:16.000
So I go back to Eclipse, and
click on the deploy icon

00:06:16.000 --> 00:06:18.067
in the top-left corner.

00:06:18.067 --> 00:06:20.200
This brings
the deploy dialogue box.

00:06:20.200 --> 00:06:22.367
You'll notice there's
an error at the moment.

00:06:22.367 --> 00:06:25.367
That's because I've not yet set
the application I.D.

00:06:25.367 --> 00:06:28.200
I click on project settings,
and then click on the link

00:06:28.200 --> 00:06:31.701
to the right, which takes me
to the App Engine console.

00:06:31.701 --> 00:06:33.567
Every application
on App Engine must have

00:06:33.567 --> 00:06:37.100
a unique application I.D.
to identify it.

00:06:37.100 --> 00:06:40.801
I create a new I.D.

00:06:40.801 --> 00:06:44.501
And then I go back to Eclipse
and set the I.D. in my project.

00:06:44.501 --> 00:06:48.334
Now all I have to do is enter
my account I.D. and password.

00:06:48.334 --> 00:06:51.367
App Engine will now compile my
Java source code, if needed,

00:06:51.367 --> 00:06:54.000
then package everything up
in my web archive folder

00:06:54.000 --> 00:06:56.100
and send it up to the cloud.

00:06:56.100 --> 00:06:57.968
I can go back to my browser
and navigate

00:06:57.968 --> 00:07:02.300
to my new guest book application
in the cloud.

00:07:02.300 --> 00:07:04.868
You've just seen how easy
it is to go from creating

00:07:04.868 --> 00:07:07.133
a new project to deploying
a working application

00:07:07.133 --> 00:07:08.534
on App Engine.

00:07:08.534 --> 00:07:10.767
But there's a lot more to the
App Engine environment

00:07:10.767 --> 00:07:13.634
than we've demoed here,
including authentication,

00:07:13.634 --> 00:07:16.067
mail, and the memcache API.

00:07:16.067 --> 00:07:18.400
You can also easily
use Google Web Toolkit

00:07:18.400 --> 00:07:21.634
to create modern AJAX frontends
entirely in Java.

00:07:21.634 --> 00:07:23.667
Now, our Java language support

00:07:23.667 --> 00:07:25.601
isn't yet feature complete.

00:07:25.601 --> 00:07:27.868
We're giving developers early
access to the product

00:07:27.868 --> 00:07:30.501
in order to solicit feedback
as soon as possible

00:07:30.501 --> 00:07:33.334
and insure that the
end result meets your needs.

00:07:33.334 --> 00:07:36.667
To learn more,
go to code.google.com/appengine.

