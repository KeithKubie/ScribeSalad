WEBVTT
Kind: captions
Language: en

00:00:01.420 --> 00:00:03.690 align:start position:0%
 
[Music]

00:00:03.690 --> 00:00:03.700 align:start position:0%
[Music]
 

00:00:03.700 --> 00:00:07.090 align:start position:0%
[Music]
hello<00:00:04.700><c> everyone</c><00:00:05.569><c> and</c><00:00:05.600><c> welcome</c><00:00:05.990><c> to</c><00:00:06.529><c> cotton</c>

00:00:07.090 --> 00:00:07.100 align:start position:0%
hello everyone and welcome to cotton
 

00:00:07.100 --> 00:00:10.780 align:start position:0%
hello everyone and welcome to cotton
under<00:00:07.870><c> the</c><00:00:08.870><c> covers</c><00:00:09.260><c> under</c><00:00:09.560><c> the</c><00:00:09.830><c> hood</c><00:00:10.010><c> we've</c>

00:00:10.780 --> 00:00:10.790 align:start position:0%
under the covers under the hood we've
 

00:00:10.790 --> 00:00:13.120 align:start position:0%
under the covers under the hood we've
called<00:00:11.030><c> it</c><00:00:11.150><c> many</c><00:00:11.390><c> many</c><00:00:12.020><c> names</c><00:00:12.350><c> we'll</c><00:00:12.830><c> call</c><00:00:13.010><c> it</c>

00:00:13.120 --> 00:00:13.130 align:start position:0%
called it many many names we'll call it
 

00:00:13.130 --> 00:00:15.310 align:start position:0%
called it many many names we'll call it
this<00:00:13.280><c> one</c><00:00:13.430><c> right</c><00:00:13.580><c> now</c><00:00:13.820><c> we</c><00:00:14.540><c> want</c><00:00:14.780><c> to</c><00:00:14.870><c> look</c><00:00:14.990><c> at</c>

00:00:15.310 --> 00:00:15.320 align:start position:0%
this one right now we want to look at
 

00:00:15.320 --> 00:00:17.650 align:start position:0%
this one right now we want to look at
the<00:00:16.190><c> way</c><00:00:16.340><c> some</c><00:00:16.730><c> of</c><00:00:16.820><c> the</c><00:00:16.880><c> futures</c><00:00:17.150><c> in</c><00:00:17.180><c> Colin</c>

00:00:17.650 --> 00:00:17.660 align:start position:0%
the way some of the futures in Colin
 

00:00:17.660 --> 00:00:19.720 align:start position:0%
the way some of the futures in Colin
work<00:00:17.840><c> I'm</c><00:00:18.020><c> Chet</c><00:00:18.320><c> Haase</c><00:00:18.530><c> and</c><00:00:19.100><c> I'm</c><00:00:19.250><c> all</c><00:00:19.400><c> Maggie</c>

00:00:19.720 --> 00:00:19.730 align:start position:0%
work I'm Chet Haase and I'm all Maggie
 

00:00:19.730 --> 00:00:22.480 align:start position:0%
work I'm Chet Haase and I'm all Maggie
and<00:00:20.710><c> let's</c><00:00:21.710><c> do</c><00:00:21.860><c> this</c><00:00:22.010><c> thing</c>

00:00:22.480 --> 00:00:22.490 align:start position:0%
and let's do this thing
 

00:00:22.490 --> 00:00:24.400 align:start position:0%
and let's do this thing
yeah<00:00:22.850><c> and</c><00:00:23.030><c> we</c><00:00:23.090><c> gave</c><00:00:23.240><c> this</c><00:00:23.390><c> talk</c><00:00:23.600><c> before</c><00:00:23.840><c> or</c>

00:00:24.400 --> 00:00:24.410 align:start position:0%
yeah and we gave this talk before or
 

00:00:24.410 --> 00:00:26.290 align:start position:0%
yeah and we gave this talk before or
like<00:00:24.440><c> a</c><00:00:24.560><c> few</c><00:00:24.830><c> weeks</c><00:00:24.890><c> ago</c><00:00:25.130><c> in</c><00:00:25.580><c> France</c><00:00:26.060><c> the</c>

00:00:26.290 --> 00:00:26.300 align:start position:0%
like a few weeks ago in France the
 

00:00:26.300 --> 00:00:27.970 align:start position:0%
like a few weeks ago in France the
difference<00:00:26.630><c> is</c><00:00:26.810><c> today</c><00:00:27.230><c> we</c><00:00:27.440><c> have</c><00:00:27.530><c> people</c><00:00:27.860><c> from</c>

00:00:27.970 --> 00:00:27.980 align:start position:0%
difference is today we have people from
 

00:00:27.980 --> 00:00:30.820 align:start position:0%
difference is today we have people from
JetBrains<00:00:28.490><c> in</c><00:00:28.700><c> the</c><00:00:28.820><c> audience</c><00:00:29.320><c> so</c><00:00:30.320><c> a</c><00:00:30.350><c> polygon</c><00:00:30.710><c> I</c>

00:00:30.820 --> 00:00:30.830 align:start position:0%
JetBrains in the audience so a polygon I
 

00:00:30.830 --> 00:00:32.350 align:start position:0%
JetBrains in the audience so a polygon I
said<00:00:30.980><c> something</c><00:00:31.280><c> very</c><00:00:31.310><c> stupid</c><00:00:31.760><c> so</c><00:00:32.150><c> feel</c><00:00:32.329><c> free</c>

00:00:32.350 --> 00:00:32.360 align:start position:0%
said something very stupid so feel free
 

00:00:32.360 --> 00:00:35.130 align:start position:0%
said something very stupid so feel free
to<00:00:32.509><c> yell</c><00:00:32.780><c> at</c><00:00:32.900><c> us</c><00:00:32.930><c> it's</c><00:00:33.380><c> fine</c>

00:00:35.130 --> 00:00:35.140 align:start position:0%
to yell at us it's fine
 

00:00:35.140 --> 00:00:37.300 align:start position:0%
to yell at us it's fine
yeah<00:00:36.140><c> so</c><00:00:36.410><c> we'll</c><00:00:36.590><c> see</c><00:00:36.770><c> if</c><00:00:36.860><c> we</c><00:00:37.040><c> were</c><00:00:37.160><c> actually</c>

00:00:37.300 --> 00:00:37.310 align:start position:0%
yeah so we'll see if we were actually
 

00:00:37.310 --> 00:00:40.090 align:start position:0%
yeah so we'll see if we were actually
correct<00:00:37.850><c> when</c><00:00:38.060><c> we</c><00:00:38.180><c> wrote</c><00:00:38.360><c> the</c><00:00:38.510><c> talks</c><00:00:38.720><c> so</c><00:00:39.100><c> Colin</c>

00:00:40.090 --> 00:00:40.100 align:start position:0%
correct when we wrote the talks so Colin
 

00:00:40.100 --> 00:00:42.280 align:start position:0%
correct when we wrote the talks so Colin
very<00:00:40.399><c> awesome</c><00:00:40.820><c> language</c><00:00:41.180><c> very</c><00:00:41.420><c> cool</c><00:00:41.690><c> lots</c><00:00:42.170><c> of</c>

00:00:42.280 --> 00:00:42.290 align:start position:0%
very awesome language very cool lots of
 

00:00:42.290 --> 00:00:43.870 align:start position:0%
very awesome language very cool lots of
interesting<00:00:42.710><c> features</c><00:00:43.190><c> you're</c><00:00:43.460><c> doing</c><00:00:43.730><c> it</c>

00:00:43.870 --> 00:00:43.880 align:start position:0%
interesting features you're doing it
 

00:00:43.880 --> 00:00:44.139 align:start position:0%
interesting features you're doing it
again

00:00:44.139 --> 00:00:44.149 align:start position:0%
again
 

00:00:44.149 --> 00:00:46.569 align:start position:0%
again
you're<00:00:44.420><c> taking</c><00:00:44.750><c> my</c><00:00:44.870><c> slide</c><00:00:45.140><c> are</c><00:00:45.890><c> you</c><00:00:46.010><c> gonna</c><00:00:46.100><c> go</c>

00:00:46.569 --> 00:00:46.579 align:start position:0%
you're taking my slide are you gonna go
 

00:00:46.579 --> 00:00:48.580 align:start position:0%
you're taking my slide are you gonna go
Chet<00:00:47.300><c> has</c><00:00:47.420><c> this</c><00:00:47.540><c> issue</c><00:00:47.720><c> in</c><00:00:48.050><c> the</c><00:00:48.140><c> speaker</c><00:00:48.440><c> notes</c>

00:00:48.580 --> 00:00:48.590 align:start position:0%
Chet has this issue in the speaker notes
 

00:00:48.590 --> 00:00:50.500 align:start position:0%
Chet has this issue in the speaker notes
right<00:00:48.829><c> here</c><00:00:48.860><c> it</c><00:00:49.130><c> says</c><00:00:49.309><c> my</c><00:00:49.520><c> name</c><00:00:49.550><c> and</c><00:00:50.030><c> he</c><00:00:50.180><c> starts</c>

00:00:50.500 --> 00:00:50.510 align:start position:0%
right here it says my name and he starts
 

00:00:50.510 --> 00:00:52.479 align:start position:0%
right here it says my name and he starts
talking<00:00:50.690><c> and</c><00:00:51.469><c> he</c><00:00:51.590><c> keeps</c><00:00:51.739><c> telling</c><00:00:52.010><c> my</c><00:00:52.219><c> slide</c>

00:00:52.479 --> 00:00:52.489 align:start position:0%
talking and he keeps telling my slide
 

00:00:52.489 --> 00:00:54.220 align:start position:0%
talking and he keeps telling my slide
every<00:00:52.910><c> time</c><00:00:53.180><c> all</c><00:00:53.870><c> right</c>

00:00:54.220 --> 00:00:54.230 align:start position:0%
every time all right
 

00:00:54.230 --> 00:00:55.870 align:start position:0%
every time all right
so<00:00:54.500><c> cartoon</c><00:00:54.829><c> is</c><00:00:54.950><c> awesome</c><00:00:55.160><c> who's</c><00:00:55.280><c> using</c><00:00:55.460><c> cut</c><00:00:55.700><c> in</c>

00:00:55.870 --> 00:00:55.880 align:start position:0%
so cartoon is awesome who's using cut in
 

00:00:55.880 --> 00:00:58.990 align:start position:0%
so cartoon is awesome who's using cut in
here<00:00:56.800><c> all</c><00:00:57.800><c> right</c><00:00:57.980><c> so</c><00:00:58.190><c> we</c><00:00:58.430><c> don't</c><00:00:58.460><c> really</c><00:00:58.820><c> have</c>

00:00:58.990 --> 00:00:59.000 align:start position:0%
here all right so we don't really have
 

00:00:59.000 --> 00:01:00.639 align:start position:0%
here all right so we don't really have
to<00:00:59.210><c> convince</c><00:00:59.540><c> you</c><00:00:59.780><c> that</c><00:00:59.809><c> cutting</c><00:01:00.260><c> is</c><00:01:00.379><c> great</c>

00:01:00.639 --> 00:01:00.649 align:start position:0%
to convince you that cutting is great
 

00:01:00.649 --> 00:01:03.130 align:start position:0%
to convince you that cutting is great
but<00:01:01.219><c> just</c><00:01:01.460><c> in</c><00:01:01.670><c> case</c><00:01:01.700><c> it's</c><00:01:02.270><c> concise</c><00:01:02.809><c> you</c><00:01:03.050><c> have</c>

00:01:03.130 --> 00:01:03.140 align:start position:0%
but just in case it's concise you have
 

00:01:03.140 --> 00:01:05.049 align:start position:0%
but just in case it's concise you have
less<00:01:03.320><c> boilerplate</c><00:01:03.950><c> you</c><00:01:04.549><c> get</c><00:01:04.729><c> powerful</c>

00:01:05.049 --> 00:01:05.059 align:start position:0%
less boilerplate you get powerful
 

00:01:05.059 --> 00:01:06.760 align:start position:0%
less boilerplate you get powerful
extension<00:01:05.449><c> libraries</c><00:01:06.049><c> we</c><00:01:06.229><c> write</c><00:01:06.439><c> our</c><00:01:06.619><c> own</c>

00:01:06.760 --> 00:01:06.770 align:start position:0%
extension libraries we write our own
 

00:01:06.770 --> 00:01:08.859 align:start position:0%
extension libraries we write our own
there's<00:01:07.039><c> a</c><00:01:07.100><c> bunch</c><00:01:07.280><c> of</c><00:01:07.429><c> Android</c><00:01:08.090><c> X</c><00:01:08.270><c> or</c><00:01:08.479><c> jetpack</c>

00:01:08.859 --> 00:01:08.869 align:start position:0%
there's a bunch of Android X or jetpack
 

00:01:08.869 --> 00:01:10.870 align:start position:0%
there's a bunch of Android X or jetpack
extension<00:01:09.380><c> libraries</c><00:01:09.709><c> for</c><00:01:09.950><c> various</c><00:01:10.520><c> api</c><00:01:10.789><c> is</c>

00:01:10.870 --> 00:01:10.880 align:start position:0%
extension libraries for various api is
 

00:01:10.880 --> 00:01:13.419 align:start position:0%
extension libraries for various api is
platform<00:01:11.389><c> or</c><00:01:11.509><c> not</c><00:01:11.770><c> fully</c><00:01:12.770><c> compatible</c><00:01:13.009><c> with</c>

00:01:13.419 --> 00:01:13.429 align:start position:0%
platform or not fully compatible with
 

00:01:13.429 --> 00:01:14.679 align:start position:0%
platform or not fully compatible with
the<00:01:13.520><c> java</c><00:01:13.700><c> programming</c><00:01:14.060><c> language</c><00:01:14.179><c> and</c>

00:01:14.679 --> 00:01:14.689 align:start position:0%
the java programming language and
 

00:01:14.689 --> 00:01:16.779 align:start position:0%
the java programming language and
therefore<00:01:15.350><c> the</c><00:01:15.469><c> android</c><00:01:15.709><c> api</c><00:01:16.009><c> s</c><00:01:16.130><c> which</c><00:01:16.579><c> makes</c>

00:01:16.779 --> 00:01:16.789 align:start position:0%
therefore the android api s which makes
 

00:01:16.789 --> 00:01:18.160 align:start position:0%
therefore the android api s which makes
it<00:01:16.939><c> very</c><00:01:17.060><c> easy</c><00:01:17.149><c> for</c><00:01:17.299><c> you</c><00:01:17.569><c> to</c><00:01:17.689><c> adapt</c><00:01:17.929><c> in</c><00:01:18.049><c> your</c>

00:01:18.160 --> 00:01:18.170 align:start position:0%
it very easy for you to adapt in your
 

00:01:18.170 --> 00:01:20.080 align:start position:0%
it very easy for you to adapt in your
application<00:01:18.619><c> and</c><00:01:18.799><c> it</c><00:01:19.249><c> has</c><00:01:19.369><c> a</c><00:01:19.399><c> lot</c><00:01:19.670><c> of</c><00:01:19.700><c> modern</c>

00:01:20.080 --> 00:01:20.090 align:start position:0%
application and it has a lot of modern
 

00:01:20.090 --> 00:01:21.879 align:start position:0%
application and it has a lot of modern
language<00:01:20.420><c> features</c><00:01:20.779><c> like</c><00:01:20.990><c> co-routines</c><00:01:21.560><c> check</c>

00:01:21.879 --> 00:01:21.889 align:start position:0%
language features like co-routines check
 

00:01:21.889 --> 00:01:26.639 align:start position:0%
language features like co-routines check
what<00:01:22.159><c> our</c><00:01:22.279><c> core</c><00:01:22.459><c> routines</c><00:01:23.319><c> things</c><00:01:25.090><c> alright</c>

00:01:26.639 --> 00:01:26.649 align:start position:0%
what our core routines things alright
 

00:01:26.649 --> 00:01:31.870 align:start position:0%
what our core routines things alright
and<00:01:27.649><c> it's</c><00:01:27.950><c> always</c><00:01:28.189><c> evolving</c><00:01:30.039><c> but</c><00:01:31.039><c> some</c><00:01:31.670><c> of</c>

00:01:31.870 --> 00:01:31.880 align:start position:0%
and it's always evolving but some of
 

00:01:31.880 --> 00:01:35.019 align:start position:0%
and it's always evolving but some of
these<00:01:32.149><c> magical</c><00:01:33.079><c> things</c><00:01:33.409><c> in</c><00:01:33.740><c> Kotlin</c><00:01:34.609><c> really</c>

00:01:35.019 --> 00:01:35.029 align:start position:0%
these magical things in Kotlin really
 

00:01:35.029 --> 00:01:37.239 align:start position:0%
these magical things in Kotlin really
are<00:01:35.299><c> magical</c><00:01:35.899><c> and</c><00:01:36.049><c> mysterious</c><00:01:36.229><c> how</c><00:01:36.770><c> do</c><00:01:36.829><c> those</c>

00:01:37.239 --> 00:01:37.249 align:start position:0%
are magical and mysterious how do those
 

00:01:37.249 --> 00:01:39.370 align:start position:0%
are magical and mysterious how do those
things<00:01:37.579><c> work</c><00:01:37.880><c> especially</c><00:01:38.179><c> since</c><00:01:38.749><c> we're</c>

00:01:39.370 --> 00:01:39.380 align:start position:0%
things work especially since we're
 

00:01:39.380 --> 00:01:41.289 align:start position:0%
things work especially since we're
compiling<00:01:39.770><c> down</c><00:01:40.159><c> to</c><00:01:40.429><c> the</c><00:01:40.579><c> same</c><00:01:40.759><c> byte</c><00:01:41.029><c> code</c>

00:01:41.289 --> 00:01:41.299 align:start position:0%
compiling down to the same byte code
 

00:01:41.299 --> 00:01:43.839 align:start position:0%
compiling down to the same byte code
that<00:01:41.509><c> runs</c><00:01:41.689><c> other</c><00:01:42.649><c> languages</c><00:01:43.399><c> that</c><00:01:43.669><c> don't</c>

00:01:43.839 --> 00:01:43.849 align:start position:0%
that runs other languages that don't
 

00:01:43.849 --> 00:01:45.159 align:start position:0%
that runs other languages that don't
have<00:01:44.090><c> these</c><00:01:44.240><c> features</c><00:01:44.450><c> so</c><00:01:44.779><c> how</c><00:01:44.929><c> does</c><00:01:45.049><c> that</c>

00:01:45.159 --> 00:01:45.169 align:start position:0%
have these features so how does that
 

00:01:45.169 --> 00:01:47.169 align:start position:0%
have these features so how does that
stuff<00:01:45.409><c> work</c><00:01:45.469><c> so</c><00:01:46.429><c> that's</c><00:01:46.609><c> the</c><00:01:46.729><c> whole</c><00:01:46.880><c> point</c><00:01:47.119><c> of</c>

00:01:47.169 --> 00:01:47.179 align:start position:0%
stuff work so that's the whole point of
 

00:01:47.179 --> 00:01:49.359 align:start position:0%
stuff work so that's the whole point of
the<00:01:47.299><c> talk</c><00:01:47.479><c> take</c><00:01:47.749><c> a</c><00:01:47.779><c> look</c><00:01:47.990><c> on</c><00:01:48.229><c> the</c><00:01:48.439><c> inside</c><00:01:48.649><c> and</c>

00:01:49.359 --> 00:01:49.369 align:start position:0%
the talk take a look on the inside and
 

00:01:49.369 --> 00:01:50.589 align:start position:0%
the talk take a look on the inside and
see<00:01:49.609><c> what's</c><00:01:49.759><c> going</c><00:01:49.969><c> on</c><00:01:50.060><c> we're</c><00:01:50.270><c> gonna</c><00:01:50.359><c> take</c><00:01:50.569><c> a</c>

00:01:50.589 --> 00:01:50.599 align:start position:0%
see what's going on we're gonna take a
 

00:01:50.599 --> 00:01:53.190 align:start position:0%
see what's going on we're gonna take a
look<00:01:50.840><c> at</c><00:01:51.139><c> two</c><00:01:51.979><c> different</c><00:01:52.340><c> things</c><00:01:52.729><c> right</c><00:01:52.999><c> now</c>

00:01:53.190 --> 00:01:53.200 align:start position:0%
look at two different things right now
 

00:01:53.200 --> 00:01:55.089 align:start position:0%
look at two different things right now
today<00:01:54.200><c> we're</c><00:01:54.319><c> going</c><00:01:54.409><c> to</c><00:01:54.499><c> look</c><00:01:54.649><c> at</c><00:01:54.709><c> how</c><00:01:54.919><c> these</c>

00:01:55.089 --> 00:01:55.099 align:start position:0%
today we're going to look at how these
 

00:01:55.099 --> 00:01:56.529 align:start position:0%
today we're going to look at how these
things<00:01:55.159><c> work</c><00:01:55.609><c> and</c><00:01:55.729><c> we're</c><00:01:55.909><c> also</c><00:01:56.029><c> going</c><00:01:56.239><c> to</c><00:01:56.299><c> show</c>

00:01:56.529 --> 00:01:56.539 align:start position:0%
things work and we're also going to show
 

00:01:56.539 --> 00:01:58.359 align:start position:0%
things work and we're also going to show
you<00:01:56.599><c> some</c><00:01:56.929><c> tools</c><00:01:57.139><c> to</c><00:01:57.409><c> use</c><00:01:57.619><c> to</c><00:01:58.099><c> get</c><00:01:58.249><c> this</c>

00:01:58.359 --> 00:01:58.369 align:start position:0%
you some tools to use to get this
 

00:01:58.369 --> 00:02:00.129 align:start position:0%
you some tools to use to get this
information<00:01:58.700><c> basically</c><00:01:59.329><c> the</c><00:01:59.509><c> tools</c><00:01:59.749><c> that</c><00:01:59.899><c> we</c>

00:02:00.129 --> 00:02:00.139 align:start position:0%
information basically the tools that we
 

00:02:00.139 --> 00:02:02.109 align:start position:0%
information basically the tools that we
use<00:02:00.169><c> to</c><00:02:00.560><c> discover</c><00:02:00.889><c> this</c><00:02:01.159><c> stuff</c><00:02:01.369><c> we're</c><00:02:02.060><c> not</c>

00:02:02.109 --> 00:02:02.119 align:start position:0%
use to discover this stuff we're not
 

00:02:02.119 --> 00:02:03.370 align:start position:0%
use to discover this stuff we're not
going<00:02:02.299><c> to</c><00:02:02.359><c> do</c><00:02:02.450><c> it</c><00:02:02.569><c> in</c><00:02:02.689><c> that</c><00:02:02.810><c> order</c><00:02:03.049><c> we're</c><00:02:03.259><c> going</c>

00:02:03.370 --> 00:02:03.380 align:start position:0%
going to do it in that order we're going
 

00:02:03.380 --> 00:02:05.289 align:start position:0%
going to do it in that order we're going
to<00:02:03.439><c> do</c><00:02:03.560><c> it</c><00:02:03.679><c> in</c><00:02:03.739><c> this</c><00:02:03.829><c> order</c><00:02:04.039><c> instead</c><00:02:04.459><c> so</c><00:02:04.969><c> first</c>

00:02:05.289 --> 00:02:05.299 align:start position:0%
to do it in this order instead so first
 

00:02:05.299 --> 00:02:06.639 align:start position:0%
to do it in this order instead so first
we'll<00:02:05.450><c> talk</c><00:02:05.599><c> about</c><00:02:05.659><c> the</c><00:02:05.959><c> tools</c><00:02:06.139><c> and</c><00:02:06.349><c> then</c>

00:02:06.639 --> 00:02:06.649 align:start position:0%
we'll talk about the tools and then
 

00:02:06.649 --> 00:02:10.550 align:start position:0%
we'll talk about the tools and then
we'll<00:02:06.739><c> talk</c><00:02:06.889><c> about</c><00:02:07.039><c> the</c><00:02:07.249><c> features</c><00:02:07.609><c> so</c><00:02:08.649><c> tools</c>

00:02:10.550 --> 00:02:10.560 align:start position:0%
we'll talk about the features so tools
 

00:02:10.560 --> 00:02:12.590 align:start position:0%
we'll talk about the features so tools
alright<00:02:11.190><c> so</c><00:02:11.730><c> there</c><00:02:11.880><c> are</c><00:02:11.940><c> two</c><00:02:12.090><c> tools</c><00:02:12.270><c> you</c><00:02:12.420><c> can</c>

00:02:12.590 --> 00:02:12.600 align:start position:0%
alright so there are two tools you can
 

00:02:12.600 --> 00:02:14.059 align:start position:0%
alright so there are two tools you can
use<00:02:12.630><c> the</c><00:02:12.930><c> first</c><00:02:13.140><c> one</c><00:02:13.380><c> is</c><00:02:13.620><c> looking</c><00:02:13.770><c> at</c><00:02:14.010><c> the</c>

00:02:14.059 --> 00:02:14.069 align:start position:0%
use the first one is looking at the
 

00:02:14.069 --> 00:02:15.559 align:start position:0%
use the first one is looking at the
cutting<00:02:14.400><c> byte</c><00:02:14.550><c> code</c><00:02:14.790><c> there's</c><00:02:14.970><c> a</c><00:02:15.030><c> special</c><00:02:15.390><c> tool</c>

00:02:15.559 --> 00:02:15.569 align:start position:0%
cutting byte code there's a special tool
 

00:02:15.569 --> 00:02:17.600 align:start position:0%
cutting byte code there's a special tool
for<00:02:15.600><c> that</c><00:02:15.900><c> in</c><00:02:16.350><c> IntelliJ</c><00:02:16.920><c> and</c><00:02:17.040><c> Android</c><00:02:17.400><c> studio</c>

00:02:17.600 --> 00:02:17.610 align:start position:0%
for that in IntelliJ and Android studio
 

00:02:17.610 --> 00:02:19.790 align:start position:0%
for that in IntelliJ and Android studio
and<00:02:17.910><c> the</c><00:02:18.300><c> second</c><00:02:18.660><c> one</c><00:02:18.810><c> part</c><00:02:19.140><c> of</c><00:02:19.260><c> the</c><00:02:19.350><c> same</c><00:02:19.590><c> tool</c>

00:02:19.790 --> 00:02:19.800 align:start position:0%
and the second one part of the same tool
 

00:02:19.800 --> 00:02:21.410 align:start position:0%
and the second one part of the same tool
is<00:02:20.010><c> you</c><00:02:20.160><c> can</c><00:02:20.310><c> convert</c><00:02:20.610><c> the</c><00:02:20.760><c> byte</c><00:02:20.910><c> code</c><00:02:20.940><c> back</c><00:02:21.360><c> to</c>

00:02:21.410 --> 00:02:21.420 align:start position:0%
is you can convert the byte code back to
 

00:02:21.420 --> 00:02:23.210 align:start position:0%
is you can convert the byte code back to
the<00:02:21.720><c> Java</c><00:02:21.900><c> programming</c><00:02:22.290><c> language</c><00:02:22.440><c> which</c>

00:02:23.210 --> 00:02:23.220 align:start position:0%
the Java programming language which
 

00:02:23.220 --> 00:02:25.340 align:start position:0%
the Java programming language which
sometimes<00:02:23.640><c> is</c><00:02:23.790><c> very</c><00:02:23.970><c> helpful</c><00:02:24.209><c> to</c><00:02:24.569><c> understand</c>

00:02:25.340 --> 00:02:25.350 align:start position:0%
sometimes is very helpful to understand
 

00:02:25.350 --> 00:02:26.630 align:start position:0%
sometimes is very helpful to understand
what's<00:02:25.530><c> going</c><00:02:25.620><c> on</c><00:02:25.890><c> so</c><00:02:25.950><c> you</c><00:02:26.220><c> don't</c><00:02:26.400><c> have</c><00:02:26.459><c> to</c>

00:02:26.630 --> 00:02:26.640 align:start position:0%
what's going on so you don't have to
 

00:02:26.640 --> 00:02:29.750 align:start position:0%
what's going on so you don't have to
decipher<00:02:27.000><c> byte</c><00:02:27.360><c> code</c><00:02:27.569><c> yourself</c><00:02:28.100><c> finally</c><00:02:29.100><c> the</c>

00:02:29.750 --> 00:02:29.760 align:start position:0%
decipher byte code yourself finally the
 

00:02:29.760 --> 00:02:31.670 align:start position:0%
decipher byte code yourself finally the
memory<00:02:30.030><c> profiler</c><00:02:30.420><c> so</c><00:02:30.750><c> not</c><00:02:31.200><c> about</c><00:02:31.410><c> the</c><00:02:31.530><c> byte</c>

00:02:31.670 --> 00:02:31.680 align:start position:0%
memory profiler so not about the byte
 

00:02:31.680 --> 00:02:33.199 align:start position:0%
memory profiler so not about the byte
code<00:02:31.709><c> itself</c><00:02:32.160><c> but</c><00:02:32.370><c> sometimes</c><00:02:32.790><c> you</c><00:02:32.880><c> know</c><00:02:32.970><c> some</c>

00:02:33.199 --> 00:02:33.209 align:start position:0%
code itself but sometimes you know some
 

00:02:33.209 --> 00:02:34.850 align:start position:0%
code itself but sometimes you know some
of<00:02:33.239><c> those</c><00:02:33.420><c> languages</c><00:02:33.780><c> features</c><00:02:34.290><c> may</c><00:02:34.620><c> create</c>

00:02:34.850 --> 00:02:34.860 align:start position:0%
of those languages features may create
 

00:02:34.860 --> 00:02:36.800 align:start position:0%
of those languages features may create
allocations<00:02:35.489><c> which</c><00:02:35.940><c> may</c><00:02:36.209><c> or</c><00:02:36.330><c> may</c><00:02:36.450><c> not</c><00:02:36.480><c> matter</c>

00:02:36.800 --> 00:02:36.810 align:start position:0%
allocations which may or may not matter
 

00:02:36.810 --> 00:02:38.330 align:start position:0%
allocations which may or may not matter
depending<00:02:37.319><c> on</c><00:02:37.410><c> what</c><00:02:37.590><c> you're</c><00:02:37.739><c> doing</c><00:02:37.770><c> what</c><00:02:38.160><c> kind</c>

00:02:38.330 --> 00:02:38.340 align:start position:0%
depending on what you're doing what kind
 

00:02:38.340 --> 00:02:39.890 align:start position:0%
depending on what you're doing what kind
of<00:02:38.400><c> code</c><00:02:38.580><c> you're</c><00:02:38.730><c> writing</c><00:02:38.760><c> which</c><00:02:39.450><c> is</c><00:02:39.630><c> a</c><00:02:39.720><c> useful</c>

00:02:39.890 --> 00:02:39.900 align:start position:0%
of code you're writing which is a useful
 

00:02:39.900 --> 00:02:41.690 align:start position:0%
of code you're writing which is a useful
tool<00:02:40.200><c> to</c><00:02:40.260><c> know</c><00:02:40.470><c> about</c><00:02:40.590><c> in</c><00:02:40.920><c> general</c><00:02:41.160><c> not</c><00:02:41.670><c> just</c>

00:02:41.690 --> 00:02:41.700 align:start position:0%
tool to know about in general not just
 

00:02:41.700 --> 00:02:44.870 align:start position:0%
tool to know about in general not just
in<00:02:41.970><c> the</c><00:02:42.030><c> context</c><00:02:42.390><c> of</c><00:02:42.480><c> this</c><00:02:42.630><c> talk</c><00:02:43.459><c> so</c><00:02:44.459><c> here's</c><00:02:44.790><c> an</c>

00:02:44.870 --> 00:02:44.880 align:start position:0%
in the context of this talk so here's an
 

00:02:44.880 --> 00:02:47.870 align:start position:0%
in the context of this talk so here's an
example<00:02:45.560><c> primitive</c><00:02:46.560><c> types</c><00:02:46.800><c> are</c><00:02:47.430><c> handled</c><00:02:47.790><c> a</c>

00:02:47.870 --> 00:02:47.880 align:start position:0%
example primitive types are handled a
 

00:02:47.880 --> 00:02:50.090 align:start position:0%
example primitive types are handled a
little<00:02:48.150><c> bit</c><00:02:48.269><c> differently</c><00:02:48.660><c> so</c><00:02:49.380><c> in</c><00:02:49.739><c> cutting</c>

00:02:50.090 --> 00:02:50.100 align:start position:0%
little bit differently so in cutting
 

00:02:50.100 --> 00:02:52.490 align:start position:0%
little bit differently so in cutting
when<00:02:50.280><c> you</c><00:02:50.370><c> say</c><00:02:50.580><c> this</c><00:02:50.880><c> VAR</c><00:02:51.239><c> i</c><00:02:51.360><c> 0</c><00:02:51.480><c> equals</c><00:02:52.200><c> 5</c>

00:02:52.490 --> 00:02:52.500 align:start position:0%
when you say this VAR i 0 equals 5
 

00:02:52.500 --> 00:02:55.160 align:start position:0%
when you say this VAR i 0 equals 5
obviously<00:02:53.340><c> you'd</c><00:02:53.489><c> occurring</c><00:02:53.910><c> in</c><00:02:54.150><c> int</c><00:02:54.720><c> so</c>

00:02:55.160 --> 00:02:55.170 align:start position:0%
obviously you'd occurring in int so
 

00:02:55.170 --> 00:02:57.440 align:start position:0%
obviously you'd occurring in int so
capital<00:02:55.530><c> I</c><00:02:55.709><c> ain't</c><00:02:56.040><c> it's</c><00:02:56.430><c> not</c><00:02:56.730><c> knowable</c><00:02:57.180><c> so</c><00:02:57.390><c> it</c>

00:02:57.440 --> 00:02:57.450 align:start position:0%
capital I ain't it's not knowable so it
 

00:02:57.450 --> 00:02:59.870 align:start position:0%
capital I ain't it's not knowable so it
cannot<00:02:57.720><c> be</c><00:02:57.840><c> no</c><00:02:57.989><c> and</c><00:02:58.260><c> it's</c><00:02:59.100><c> equivalent</c><00:02:59.400><c> to</c><00:02:59.700><c> the</c>

00:02:59.870 --> 00:02:59.880 align:start position:0%
cannot be no and it's equivalent to the
 

00:02:59.880 --> 00:03:02.420 align:start position:0%
cannot be no and it's equivalent to the
lower<00:03:00.120><c> case</c><00:03:00.420><c> in</c><00:03:00.920><c> the</c><00:03:01.920><c> Java</c><00:03:02.130><c> programming</c>

00:03:02.420 --> 00:03:02.430 align:start position:0%
lower case in the Java programming
 

00:03:02.430 --> 00:03:04.009 align:start position:0%
lower case in the Java programming
language<00:03:02.519><c> so</c><00:03:02.910><c> it</c><00:03:03.030><c> is</c><00:03:03.150><c> still</c><00:03:03.390><c> a</c><00:03:03.450><c> primitive</c><00:03:03.630><c> type</c>

00:03:04.009 --> 00:03:04.019 align:start position:0%
language so it is still a primitive type
 

00:03:04.019 --> 00:03:06.170 align:start position:0%
language so it is still a primitive type
now<00:03:04.800><c> if</c><00:03:04.950><c> you</c><00:03:05.040><c> specify</c><00:03:05.280><c> the</c><00:03:05.459><c> type</c><00:03:05.730><c> yourself</c>

00:03:06.170 --> 00:03:06.180 align:start position:0%
now if you specify the type yourself
 

00:03:06.180 --> 00:03:08.420 align:start position:0%
now if you specify the type yourself
same<00:03:06.600><c> thing</c><00:03:06.870><c> it's</c><00:03:07.140><c> an</c><00:03:07.350><c> int</c><00:03:07.560><c> it's</c><00:03:07.890><c> a</c><00:03:08.010><c> primitive</c>

00:03:08.420 --> 00:03:08.430 align:start position:0%
same thing it's an int it's a primitive
 

00:03:08.430 --> 00:03:10.210 align:start position:0%
same thing it's an int it's a primitive
type<00:03:08.610><c> in</c><00:03:08.850><c> the</c><00:03:09.030><c> java</c><00:03:09.180><c> programming</c><00:03:09.600><c> language</c>

00:03:10.210 --> 00:03:10.220 align:start position:0%
type in the java programming language
 

00:03:10.220 --> 00:03:13.100 align:start position:0%
type in the java programming language
but<00:03:11.220><c> if</c><00:03:11.459><c> you</c><00:03:11.610><c> declare</c><00:03:11.880><c> it</c><00:03:12.030><c> as</c><00:03:12.209><c> knowable</c><00:03:12.780><c> the</c>

00:03:13.100 --> 00:03:13.110 align:start position:0%
but if you declare it as knowable the
 

00:03:13.110 --> 00:03:14.600 align:start position:0%
but if you declare it as knowable the
only<00:03:13.440><c> way</c><00:03:13.560><c> we</c><00:03:13.680><c> can</c><00:03:13.860><c> handle</c><00:03:14.160><c> that</c><00:03:14.310><c> with</c><00:03:14.519><c> the</c>

00:03:14.600 --> 00:03:14.610 align:start position:0%
only way we can handle that with the
 

00:03:14.610 --> 00:03:15.410 align:start position:0%
only way we can handle that with the
current<00:03:14.790><c> runtimes</c>

00:03:15.410 --> 00:03:15.420 align:start position:0%
current runtimes
 

00:03:15.420 --> 00:03:17.660 align:start position:0%
current runtimes
is<00:03:15.510><c> that</c><00:03:15.720><c> it</c><00:03:16.079><c> has</c><00:03:16.290><c> to</c><00:03:16.440><c> become</c><00:03:16.769><c> the</c><00:03:17.070><c> in</c><00:03:17.250><c> question</c>

00:03:17.660 --> 00:03:17.670 align:start position:0%
is that it has to become the in question
 

00:03:17.670 --> 00:03:19.370 align:start position:0%
is that it has to become the in question
mark<00:03:17.850><c> type</c><00:03:18.030><c> in</c><00:03:18.269><c> Catalan</c><00:03:18.660><c> which</c><00:03:18.840><c> becomes</c><00:03:19.200><c> the</c>

00:03:19.370 --> 00:03:19.380 align:start position:0%
mark type in Catalan which becomes the
 

00:03:19.380 --> 00:03:21.440 align:start position:0%
mark type in Catalan which becomes the
capital<00:03:19.590><c> I</c><00:03:19.920><c> integer</c><00:03:20.489><c> type</c><00:03:20.700><c> in</c><00:03:21.090><c> the</c><00:03:21.299><c> Java</c>

00:03:21.440 --> 00:03:21.450 align:start position:0%
capital I integer type in the Java
 

00:03:21.450 --> 00:03:23.030 align:start position:0%
capital I integer type in the Java
programming<00:03:21.810><c> language</c><00:03:21.930><c> and</c><00:03:22.380><c> certainly</c><00:03:22.920><c> it's</c>

00:03:23.030 --> 00:03:23.040 align:start position:0%
programming language and certainly it's
 

00:03:23.040 --> 00:03:24.500 align:start position:0%
programming language and certainly it's
not<00:03:23.100><c> a</c><00:03:23.190><c> primitive</c><00:03:23.400><c> type</c><00:03:23.760><c> anymore</c><00:03:24.030><c> it's</c><00:03:24.360><c> a</c>

00:03:24.500 --> 00:03:24.510 align:start position:0%
not a primitive type anymore it's a
 

00:03:24.510 --> 00:03:24.949 align:start position:0%
not a primitive type anymore it's a
full-blown

00:03:24.949 --> 00:03:24.959 align:start position:0%
full-blown
 

00:03:24.959 --> 00:03:28.009 align:start position:0%
full-blown
object<00:03:25.440><c> and</c><00:03:25.620><c> this</c><00:03:25.920><c> can</c><00:03:26.130><c> have</c><00:03:26.340><c> consequences</c><00:03:27.019><c> so</c>

00:03:28.009 --> 00:03:28.019 align:start position:0%
object and this can have consequences so
 

00:03:28.019 --> 00:03:29.479 align:start position:0%
object and this can have consequences so
how<00:03:28.230><c> do</c><00:03:28.290><c> we</c><00:03:28.380><c> find</c><00:03:28.650><c> out</c><00:03:28.829><c> stuff</c><00:03:29.070><c> like</c><00:03:29.250><c> that</c><00:03:29.430><c> as</c>

00:03:29.479 --> 00:03:29.489 align:start position:0%
how do we find out stuff like that as
 

00:03:29.489 --> 00:03:31.850 align:start position:0%
how do we find out stuff like that as
well<00:03:29.640><c> as</c><00:03:29.940><c> he</c><00:03:30.540><c> said</c><00:03:30.989><c> one</c><00:03:31.230><c> of</c><00:03:31.260><c> the</c><00:03:31.410><c> ways</c><00:03:31.530><c> that</c><00:03:31.769><c> we</c>

00:03:31.850 --> 00:03:31.860 align:start position:0%
well as he said one of the ways that we
 

00:03:31.860 --> 00:03:33.319 align:start position:0%
well as he said one of the ways that we
can<00:03:32.010><c> do</c><00:03:32.100><c> that</c><00:03:32.220><c> is</c><00:03:32.370><c> by</c><00:03:32.519><c> looking</c><00:03:32.820><c> at</c><00:03:32.940><c> byte</c><00:03:33.090><c> code</c>

00:03:33.319 --> 00:03:33.329 align:start position:0%
can do that is by looking at byte code
 

00:03:33.329 --> 00:03:38.010 align:start position:0%
can do that is by looking at byte code
so<00:03:33.540><c> let's</c><00:03:33.720><c> look</c><00:03:33.840><c> at</c><00:03:33.989><c> some</c><00:03:34.140><c> now</c>

00:03:38.010 --> 00:03:38.020 align:start position:0%
 
 

00:03:38.020 --> 00:03:40.030 align:start position:0%
 
that's<00:03:39.020><c> pretty</c><00:03:39.350><c> self-explanatory</c>

00:03:40.030 --> 00:03:40.040 align:start position:0%
that's pretty self-explanatory
 

00:03:40.040 --> 00:03:43.120 align:start position:0%
that's pretty self-explanatory
so<00:03:40.850><c> let's</c><00:03:41.030><c> move</c><00:03:41.210><c> on</c><00:03:41.390><c> to</c><00:03:41.510><c> something</c><00:03:41.720><c> else</c><00:03:41.990><c> so</c><00:03:42.830><c> in</c>

00:03:43.120 --> 00:03:43.130 align:start position:0%
so let's move on to something else so in
 

00:03:43.130 --> 00:03:45.100 align:start position:0%
so let's move on to something else so in
IntelliJ<00:03:44.120><c> there</c><00:03:44.360><c> are</c><00:03:44.450><c> different</c><00:03:44.810><c> ways</c><00:03:44.930><c> to</c>

00:03:45.100 --> 00:03:45.110 align:start position:0%
IntelliJ there are different ways to
 

00:03:45.110 --> 00:03:46.660 align:start position:0%
IntelliJ there are different ways to
look<00:03:45.230><c> at</c><00:03:45.320><c> byte</c><00:03:45.530><c> code</c><00:03:45.770><c> but</c><00:03:45.980><c> fortunately</c><00:03:46.520><c> we</c>

00:03:46.660 --> 00:03:46.670 align:start position:0%
look at byte code but fortunately we
 

00:03:46.670 --> 00:03:49.050 align:start position:0%
look at byte code but fortunately we
have<00:03:46.850><c> tools</c><00:03:47.120><c> integrated</c><00:03:47.690><c> directly</c><00:03:48.410><c> into</c>

00:03:49.050 --> 00:03:49.060 align:start position:0%
have tools integrated directly into
 

00:03:49.060 --> 00:03:52.120 align:start position:0%
have tools integrated directly into
Android<00:03:50.060><c> studio</c><00:03:50.330><c> into</c><00:03:50.870><c> the</c><00:03:50.960><c> IDE</c><00:03:51.290><c> if</c><00:03:51.650><c> you</c><00:03:51.830><c> go</c><00:03:51.980><c> up</c>

00:03:52.120 --> 00:03:52.130 align:start position:0%
Android studio into the IDE if you go up
 

00:03:52.130 --> 00:03:53.920 align:start position:0%
Android studio into the IDE if you go up
in<00:03:52.280><c> the</c><00:03:52.310><c> menu</c><00:03:52.670><c> you</c><00:03:52.970><c> can</c><00:03:53.060><c> say</c><00:03:53.300><c> yeah</c><00:03:53.630><c> show</c><00:03:53.900><c> me</c>

00:03:53.920 --> 00:03:53.930 align:start position:0%
in the menu you can say yeah show me
 

00:03:53.930 --> 00:03:55.720 align:start position:0%
in the menu you can say yeah show me
that<00:03:54.230><c> byte</c><00:03:54.440><c> code</c><00:03:54.710><c> and</c><00:03:54.950><c> then</c><00:03:55.370><c> you</c><00:03:55.460><c> get</c><00:03:55.610><c> this</c>

00:03:55.720 --> 00:03:55.730 align:start position:0%
that byte code and then you get this
 

00:03:55.730 --> 00:03:57.400 align:start position:0%
that byte code and then you get this
viewer<00:03:56.030><c> over</c><00:03:56.240><c> here</c><00:03:56.600><c> so</c><00:03:56.810><c> if</c><00:03:57.080><c> you</c><00:03:57.200><c> look</c>

00:03:57.400 --> 00:03:57.410 align:start position:0%
viewer over here so if you look
 

00:03:57.410 --> 00:03:58.990 align:start position:0%
viewer over here so if you look
carefully<00:03:57.650><c> in</c><00:03:58.010><c> the</c><00:03:58.130><c> editor</c><00:03:58.430><c> on</c><00:03:58.610><c> the</c><00:03:58.640><c> left</c>

00:03:58.990 --> 00:03:59.000 align:start position:0%
carefully in the editor on the left
 

00:03:59.000 --> 00:04:00.880 align:start position:0%
carefully in the editor on the left
you'll<00:03:59.600><c> see</c><00:03:59.690><c> that</c><00:03:59.990><c> the</c><00:04:00.140><c> cursor</c><00:04:00.350><c> is</c><00:04:00.560><c> on</c><00:04:00.830><c> a</c>

00:04:00.880 --> 00:04:00.890 align:start position:0%
you'll see that the cursor is on a
 

00:04:00.890 --> 00:04:02.350 align:start position:0%
you'll see that the cursor is on a
particular<00:04:01.430><c> line</c><00:04:01.640><c> of</c><00:04:01.820><c> code</c><00:04:02.000><c> and</c><00:04:02.180><c> then</c><00:04:02.270><c> it</c>

00:04:02.350 --> 00:04:02.360 align:start position:0%
particular line of code and then it
 

00:04:02.360 --> 00:04:04.450 align:start position:0%
particular line of code and then it
highlights<00:04:02.870><c> the</c><00:04:03.380><c> equivalent</c><00:04:03.890><c> byte</c><00:04:04.040><c> code</c><00:04:04.310><c> on</c>

00:04:04.450 --> 00:04:04.460 align:start position:0%
highlights the equivalent byte code on
 

00:04:04.460 --> 00:04:06.040 align:start position:0%
highlights the equivalent byte code on
the<00:04:04.580><c> right</c><00:04:04.760><c> to</c><00:04:05.210><c> show</c><00:04:05.390><c> you</c><00:04:05.450><c> what's</c><00:04:05.660><c> going</c><00:04:05.720><c> on</c>

00:04:06.040 --> 00:04:06.050 align:start position:0%
the right to show you what's going on
 

00:04:06.050 --> 00:04:07.420 align:start position:0%
the right to show you what's going on
some<00:04:06.320><c> of</c><00:04:06.410><c> the</c><00:04:06.470><c> information</c><00:04:06.620><c> in</c><00:04:07.160><c> the</c><00:04:07.250><c> byte</c><00:04:07.400><c> code</c>

00:04:07.420 --> 00:04:07.430 align:start position:0%
some of the information in the byte code
 

00:04:07.430 --> 00:04:09.700 align:start position:0%
some of the information in the byte code
it<00:04:08.060><c> gets</c><00:04:08.210><c> a</c><00:04:08.300><c> little</c><00:04:08.420><c> noisy</c><00:04:08.660><c> in</c><00:04:09.020><c> there</c><00:04:09.230><c> there's</c>

00:04:09.700 --> 00:04:09.710 align:start position:0%
it gets a little noisy in there there's
 

00:04:09.710 --> 00:04:11.410 align:start position:0%
it gets a little noisy in there there's
metadata<00:04:10.160><c> to</c><00:04:10.430><c> tell</c><00:04:10.670><c> you</c><00:04:10.790><c> what</c><00:04:10.940><c> line</c><00:04:11.180><c> that's</c>

00:04:11.410 --> 00:04:11.420 align:start position:0%
metadata to tell you what line that's
 

00:04:11.420 --> 00:04:13.600 align:start position:0%
metadata to tell you what line that's
associated<00:04:12.080><c> with</c><00:04:12.260><c> a</c><00:04:12.920><c> little</c><00:04:13.400><c> extra</c>

00:04:13.600 --> 00:04:13.610 align:start position:0%
associated with a little extra
 

00:04:13.610 --> 00:04:15.190 align:start position:0%
associated with a little extra
information<00:04:14.000><c> but</c><00:04:14.540><c> there's</c><00:04:14.720><c> a</c><00:04:14.780><c> couple</c><00:04:14.990><c> of</c>

00:04:15.190 --> 00:04:15.200 align:start position:0%
information but there's a couple of
 

00:04:15.200 --> 00:04:17.380 align:start position:0%
information but there's a couple of
instructions<00:04:15.860><c> in</c><00:04:16.220><c> particular</c><00:04:16.700><c> which</c><00:04:16.910><c> are</c><00:04:17.209><c> the</c>

00:04:17.380 --> 00:04:17.390 align:start position:0%
instructions in particular which are the
 

00:04:17.390 --> 00:04:19.780 align:start position:0%
instructions in particular which are the
actual<00:04:17.600><c> byte</c><00:04:18.020><c> code</c><00:04:18.230><c> instructions</c><00:04:18.799><c> so</c><00:04:19.070><c> for</c><00:04:19.670><c> the</c>

00:04:19.780 --> 00:04:19.790 align:start position:0%
actual byte code instructions so for the
 

00:04:19.790 --> 00:04:21.190 align:start position:0%
actual byte code instructions so for the
stuff<00:04:20.060><c> oh</c><00:04:20.270><c> yeah</c><00:04:20.540><c> then</c><00:04:20.750><c> then</c><00:04:20.900><c> there's</c><00:04:21.049><c> another</c>

00:04:21.190 --> 00:04:21.200 align:start position:0%
stuff oh yeah then then there's another
 

00:04:21.200 --> 00:04:23.080 align:start position:0%
stuff oh yeah then then there's another
way<00:04:21.470><c> of</c><00:04:21.590><c> doing</c><00:04:21.680><c> this</c><00:04:21.890><c> on</c><00:04:22.100><c> the</c><00:04:22.580><c> command</c><00:04:22.880><c> line</c>

00:04:23.080 --> 00:04:23.090 align:start position:0%
way of doing this on the command line
 

00:04:23.090 --> 00:04:24.970 align:start position:0%
way of doing this on the command line
you<00:04:23.120><c> can</c><00:04:23.480><c> use</c><00:04:23.660><c> Java</c><00:04:23.930><c> P</c><00:04:24.200><c> instead</c><00:04:24.590><c> and</c><00:04:24.740><c> that</c><00:04:24.860><c> will</c>

00:04:24.970 --> 00:04:24.980 align:start position:0%
you can use Java P instead and that will
 

00:04:24.980 --> 00:04:27.700 align:start position:0%
you can use Java P instead and that will
spit<00:04:25.910><c> out</c><00:04:25.940><c> a</c><00:04:26.060><c> file</c><00:04:26.390><c> you</c><00:04:26.990><c> can</c><00:04:27.140><c> take</c><00:04:27.320><c> a</c><00:04:27.350><c> look</c><00:04:27.590><c> at</c>

00:04:27.700 --> 00:04:27.710 align:start position:0%
spit out a file you can take a look at
 

00:04:27.710 --> 00:04:29.830 align:start position:0%
spit out a file you can take a look at
nicely<00:04:28.100><c> formatted</c><00:04:28.430><c> bytecode</c><00:04:29.000><c> different</c><00:04:29.780><c> way</c>

00:04:29.830 --> 00:04:29.840 align:start position:0%
nicely formatted bytecode different way
 

00:04:29.840 --> 00:04:31.330 align:start position:0%
nicely formatted bytecode different way
to<00:04:29.900><c> do</c><00:04:30.080><c> it</c><00:04:30.200><c> that's</c><00:04:30.350><c> not</c><00:04:30.500><c> integrated</c><00:04:31.040><c> into</c><00:04:31.220><c> the</c>

00:04:31.330 --> 00:04:31.340 align:start position:0%
to do it that's not integrated into the
 

00:04:31.340 --> 00:04:33.850 align:start position:0%
to do it that's not integrated into the
IDE<00:04:31.610><c> so</c><00:04:32.300><c> for</c><00:04:32.780><c> the</c><00:04:33.140><c> code</c><00:04:33.290><c> that</c><00:04:33.440><c> we're</c><00:04:33.530><c> looking</c>

00:04:33.850 --> 00:04:33.860 align:start position:0%
IDE so for the code that we're looking
 

00:04:33.860 --> 00:04:35.980 align:start position:0%
IDE so for the code that we're looking
at<00:04:33.950><c> before</c><00:04:34.250><c> you</c><00:04:34.280><c> have</c><00:04:34.670><c> this</c><00:04:34.820><c> far</c><00:04:35.090><c> Iza</c><00:04:35.750><c> we</c>

00:04:35.980 --> 00:04:35.990 align:start position:0%
at before you have this far Iza we
 

00:04:35.990 --> 00:04:37.390 align:start position:0%
at before you have this far Iza we
haven't<00:04:36.260><c> told</c><00:04:36.440><c> it</c><00:04:36.590><c> it's</c><00:04:36.740><c> going</c><00:04:36.830><c> to</c><00:04:36.890><c> use</c><00:04:37.070><c> type</c>

00:04:37.390 --> 00:04:37.400 align:start position:0%
haven't told it it's going to use type
 

00:04:37.400 --> 00:04:39.130 align:start position:0%
haven't told it it's going to use type
inference<00:04:37.820><c> but</c><00:04:38.390><c> it's</c><00:04:38.540><c> set</c><00:04:38.720><c> to</c><00:04:38.840><c> be</c><00:04:38.960><c> this</c>

00:04:39.130 --> 00:04:39.140 align:start position:0%
inference but it's set to be this
 

00:04:39.140 --> 00:04:41.410 align:start position:0%
inference but it's set to be this
integer<00:04:39.500><c> value</c><00:04:40.010><c> so</c><00:04:40.220><c> what's</c><00:04:40.400><c> going</c><00:04:40.640><c> on</c><00:04:40.790><c> we</c><00:04:41.330><c> have</c>

00:04:41.410 --> 00:04:41.420 align:start position:0%
integer value so what's going on we have
 

00:04:41.420 --> 00:04:42.820 align:start position:0%
integer value so what's going on we have
a<00:04:41.450><c> little</c><00:04:41.690><c> bit</c><00:04:41.840><c> of</c><00:04:41.930><c> metadata</c><00:04:42.260><c> about</c><00:04:42.440><c> the</c><00:04:42.590><c> line</c>

00:04:42.820 --> 00:04:42.830 align:start position:0%
a little bit of metadata about the line
 

00:04:42.830 --> 00:04:45.070 align:start position:0%
a little bit of metadata about the line
numbers<00:04:43.160><c> and</c><00:04:43.370><c> then</c><00:04:43.460><c> it</c><00:04:43.580><c> says</c><00:04:43.790><c> byte</c><00:04:44.450><c> push</c><00:04:44.840><c> of</c>

00:04:45.070 --> 00:04:45.080 align:start position:0%
numbers and then it says byte push of
 

00:04:45.080 --> 00:04:47.530 align:start position:0%
numbers and then it says byte push of
the<00:04:45.260><c> value</c><00:04:45.560><c> of</c><00:04:45.710><c> 25</c><00:04:46.220><c> so</c><00:04:46.880><c> it's</c><00:04:47.060><c> going</c><00:04:47.210><c> to</c><00:04:47.360><c> take</c>

00:04:47.530 --> 00:04:47.540 align:start position:0%
the value of 25 so it's going to take
 

00:04:47.540 --> 00:04:49.510 align:start position:0%
the value of 25 so it's going to take
that<00:04:47.690><c> value</c><00:04:47.840><c> of</c><00:04:48.080><c> 25</c><00:04:48.530><c> extend</c><00:04:48.980><c> it</c><00:04:49.100><c> to</c><00:04:49.190><c> an</c><00:04:49.310><c> integer</c>

00:04:49.510 --> 00:04:49.520 align:start position:0%
that value of 25 extend it to an integer
 

00:04:49.520 --> 00:04:51.340 align:start position:0%
that value of 25 extend it to an integer
push<00:04:49.940><c> it</c><00:04:50.120><c> onto</c><00:04:50.240><c> the</c><00:04:50.360><c> stack</c><00:04:50.450><c> then</c><00:04:51.080><c> it's</c><00:04:51.260><c> gonna</c>

00:04:51.340 --> 00:04:51.350 align:start position:0%
push it onto the stack then it's gonna
 

00:04:51.350 --> 00:04:53.140 align:start position:0%
push it onto the stack then it's gonna
pull<00:04:51.680><c> it</c><00:04:51.830><c> back</c><00:04:52.010><c> off</c><00:04:52.310><c> the</c><00:04:52.520><c> stack</c><00:04:52.760><c> and</c><00:04:53.030><c> it's</c>

00:04:53.140 --> 00:04:53.150 align:start position:0%
pull it back off the stack and it's
 

00:04:53.150 --> 00:04:55.300 align:start position:0%
pull it back off the stack and it's
gonna<00:04:53.270><c> store</c><00:04:53.660><c> an</c><00:04:53.780><c> integer</c><00:04:53.930><c> into</c><00:04:54.860><c> the</c><00:04:55.010><c> first</c>

00:04:55.300 --> 00:04:55.310 align:start position:0%
gonna store an integer into the first
 

00:04:55.310 --> 00:04:58.990 align:start position:0%
gonna store an integer into the first
variable<00:04:55.910><c> so</c><00:04:56.900><c> integer</c><00:04:57.800><c> store</c><00:04:58.130><c> and</c><00:04:58.460><c> then</c><00:04:58.730><c> we</c><00:04:58.850><c> go</c>

00:04:58.990 --> 00:04:59.000 align:start position:0%
variable so integer store and then we go
 

00:04:59.000 --> 00:05:00.850 align:start position:0%
variable so integer store and then we go
on<00:04:59.030><c> the</c><00:04:59.300><c> second</c><00:04:59.660><c> line</c><00:04:59.810><c> we're</c><00:05:00.200><c> not</c><00:05:00.320><c> using</c><00:05:00.530><c> type</c>

00:05:00.850 --> 00:05:00.860 align:start position:0%
on the second line we're not using type
 

00:05:00.860 --> 00:05:02.500 align:start position:0%
on the second line we're not using type
inference<00:05:01.280><c> we've</c><00:05:01.520><c> actually</c><00:05:01.910><c> said</c><00:05:02.090><c> no</c><00:05:02.210><c> no</c><00:05:02.360><c> we</c>

00:05:02.500 --> 00:05:02.510 align:start position:0%
inference we've actually said no no we
 

00:05:02.510 --> 00:05:04.690 align:start position:0%
inference we've actually said no no we
want<00:05:02.780><c> you</c><00:05:02.930><c> to</c><00:05:03.110><c> be</c><00:05:03.230><c> an</c><00:05:03.500><c> int</c><00:05:03.770><c> we're</c><00:05:04.280><c> gonna</c><00:05:04.400><c> assign</c>

00:05:04.690 --> 00:05:04.700 align:start position:0%
want you to be an int we're gonna assign
 

00:05:04.700 --> 00:05:07.000 align:start position:0%
want you to be an int we're gonna assign
you<00:05:04.760><c> the</c><00:05:04.940><c> value</c><00:05:05.210><c> 78</c><00:05:05.810><c> same</c><00:05:06.380><c> thing</c><00:05:06.620><c> happens</c>

00:05:07.000 --> 00:05:07.010 align:start position:0%
you the value 78 same thing happens
 

00:05:07.010 --> 00:05:08.980 align:start position:0%
you the value 78 same thing happens
we're<00:05:07.220><c> gonna</c><00:05:07.280><c> push</c><00:05:07.640><c> a</c><00:05:07.670><c> 78</c><00:05:08.300><c> extend</c><00:05:08.690><c> it</c><00:05:08.780><c> to</c><00:05:08.870><c> an</c>

00:05:08.980 --> 00:05:08.990 align:start position:0%
we're gonna push a 78 extend it to an
 

00:05:08.990 --> 00:05:10.240 align:start position:0%
we're gonna push a 78 extend it to an
integer<00:05:09.200><c> onto</c><00:05:09.590><c> the</c><00:05:09.680><c> stack</c><00:05:09.860><c> we're</c><00:05:10.070><c> going</c><00:05:10.190><c> to</c>

00:05:10.240 --> 00:05:10.250 align:start position:0%
integer onto the stack we're going to
 

00:05:10.250 --> 00:05:12.340 align:start position:0%
integer onto the stack we're going to
pull<00:05:10.430><c> that</c><00:05:10.580><c> off</c><00:05:10.760><c> store</c><00:05:11.360><c> it</c><00:05:11.480><c> into</c><00:05:11.630><c> the</c><00:05:11.960><c> second</c>

00:05:12.340 --> 00:05:12.350 align:start position:0%
pull that off store it into the second
 

00:05:12.350 --> 00:05:15.340 align:start position:0%
pull that off store it into the second
integer<00:05:13.280><c> variable</c><00:05:13.940><c> and</c><00:05:14.120><c> then</c><00:05:14.600><c> for</c><00:05:14.930><c> the</c><00:05:15.080><c> third</c>

00:05:15.340 --> 00:05:15.350 align:start position:0%
integer variable and then for the third
 

00:05:15.350 --> 00:05:17.410 align:start position:0%
integer variable and then for the third
case<00:05:15.620><c> where</c><00:05:15.980><c> we</c><00:05:16.160><c> have</c><00:05:16.280><c> is</c><00:05:16.400><c> knowable</c><00:05:16.730><c> type</c>

00:05:17.410 --> 00:05:17.420 align:start position:0%
case where we have is knowable type
 

00:05:17.420 --> 00:05:20.050 align:start position:0%
case where we have is knowable type
we've<00:05:17.690><c> got</c><00:05:17.980><c> got</c><00:05:18.980><c> I</c><00:05:19.190><c> -</c><00:05:19.250><c> that's</c><00:05:19.730><c> going</c><00:05:19.820><c> to</c><00:05:19.880><c> be</c><00:05:19.970><c> a</c>

00:05:20.050 --> 00:05:20.060 align:start position:0%
we've got got I - that's going to be a
 

00:05:20.060 --> 00:05:22.900 align:start position:0%
we've got got I - that's going to be a
nullable<00:05:20.540><c> int</c><00:05:20.810><c> of</c><00:05:21.080><c> the</c><00:05:21.320><c> value</c><00:05:21.650><c> of</c><00:05:21.740><c> 14</c><00:05:22.190><c> first</c>

00:05:22.900 --> 00:05:22.910 align:start position:0%
nullable int of the value of 14 first
 

00:05:22.910 --> 00:05:24.250 align:start position:0%
nullable int of the value of 14 first
step<00:05:23.210><c> is</c><00:05:23.360><c> going</c><00:05:23.510><c> to</c><00:05:23.570><c> be</c><00:05:23.690><c> the</c><00:05:23.780><c> same</c><00:05:23.990><c> we're</c><00:05:24.170><c> gonna</c>

00:05:24.250 --> 00:05:24.260 align:start position:0%
step is going to be the same we're gonna
 

00:05:24.260 --> 00:05:26.710 align:start position:0%
step is going to be the same we're gonna
push<00:05:24.560><c> byte</c><00:05:25.460><c> extended</c><00:05:25.970><c> integer</c>

00:05:26.710 --> 00:05:26.720 align:start position:0%
push byte extended integer
 

00:05:26.720 --> 00:05:29.170 align:start position:0%
push byte extended integer
onto<00:05:27.350><c> the</c><00:05:27.470><c> stack</c><00:05:27.710><c> but</c><00:05:28.010><c> then</c><00:05:28.250><c> we're</c><00:05:28.850><c> gonna</c><00:05:28.910><c> call</c>

00:05:29.170 --> 00:05:29.180 align:start position:0%
onto the stack but then we're gonna call
 

00:05:29.180 --> 00:05:31.210 align:start position:0%
onto the stack but then we're gonna call
a<00:05:29.240><c> method</c><00:05:29.660><c> we're</c><00:05:29.750><c> gonna</c><00:05:29.870><c> call</c><00:05:30.110><c> integer</c><00:05:30.560><c> value</c>

00:05:31.210 --> 00:05:31.220 align:start position:0%
a method we're gonna call integer value
 

00:05:31.220 --> 00:05:33.910 align:start position:0%
a method we're gonna call integer value
of<00:05:31.370><c> which</c><00:05:31.640><c> looks</c><00:05:31.880><c> like</c><00:05:31.970><c> this</c><00:05:32.420><c> it</c><00:05:33.230><c> takes</c><00:05:33.500><c> in</c><00:05:33.710><c> an</c>

00:05:33.910 --> 00:05:33.920 align:start position:0%
of which looks like this it takes in an
 

00:05:33.920 --> 00:05:36.400 align:start position:0%
of which looks like this it takes in an
int<00:05:34.190><c> a</c><00:05:34.460><c> primitive</c><00:05:34.970><c> int</c><00:05:35.180><c> type</c><00:05:35.480><c> and</c><00:05:35.690><c> it</c><00:05:36.020><c> returns</c>

00:05:36.400 --> 00:05:36.410 align:start position:0%
int a primitive int type and it returns
 

00:05:36.410 --> 00:05:38.410 align:start position:0%
int a primitive int type and it returns
an<00:05:36.620><c> integer</c><00:05:36.860><c> so</c><00:05:37.280><c> in</c><00:05:37.550><c> the</c><00:05:37.670><c> middle</c><00:05:37.850><c> of</c><00:05:38.000><c> that</c><00:05:38.210><c> it's</c>

00:05:38.410 --> 00:05:38.420 align:start position:0%
an integer so in the middle of that it's
 

00:05:38.420 --> 00:05:40.060 align:start position:0%
an integer so in the middle of that it's
going<00:05:38.540><c> to</c><00:05:38.600><c> box</c><00:05:38.930><c> it</c><00:05:39.140><c> into</c><00:05:39.380><c> an</c><00:05:39.500><c> integer</c><00:05:39.650><c> type</c>

00:05:40.060 --> 00:05:40.070 align:start position:0%
going to box it into an integer type
 

00:05:40.070 --> 00:05:42.490 align:start position:0%
going to box it into an integer type
creating<00:05:40.760><c> that</c><00:05:40.850><c> object</c><00:05:41.330><c> on</c><00:05:41.450><c> the</c><00:05:41.570><c> fly</c><00:05:41.780><c> and</c><00:05:42.080><c> then</c>

00:05:42.490 --> 00:05:42.500 align:start position:0%
creating that object on the fly and then
 

00:05:42.500 --> 00:05:44.650 align:start position:0%
creating that object on the fly and then
return<00:05:42.920><c> the</c><00:05:43.070><c> integer</c><00:05:43.250><c> type</c><00:05:43.640><c> and</c><00:05:43.850><c> then</c><00:05:44.300><c> instead</c>

00:05:44.650 --> 00:05:44.660 align:start position:0%
return the integer type and then instead
 

00:05:44.660 --> 00:05:46.510 align:start position:0%
return the integer type and then instead
of<00:05:44.720><c> storing</c><00:05:45.229><c> an</c><00:05:45.350><c> integer</c><00:05:45.680><c> into</c><00:05:46.100><c> a</c><00:05:46.130><c> variable</c>

00:05:46.510 --> 00:05:46.520 align:start position:0%
of storing an integer into a variable
 

00:05:46.520 --> 00:05:48.550 align:start position:0%
of storing an integer into a variable
it's<00:05:46.729><c> going</c><00:05:46.880><c> to</c><00:05:46.940><c> store</c><00:05:47.150><c> a</c><00:05:47.180><c> reference</c><00:05:47.930><c> to</c><00:05:48.440><c> the</c>

00:05:48.550 --> 00:05:48.560 align:start position:0%
it's going to store a reference to the
 

00:05:48.560 --> 00:05:50.640 align:start position:0%
it's going to store a reference to the
object<00:05:48.590><c> that</c><00:05:49.040><c> we've</c><00:05:49.190><c> curry</c>

00:05:50.640 --> 00:05:50.650 align:start position:0%
object that we've curry
 

00:05:50.650 --> 00:05:54.070 align:start position:0%
object that we've curry
so<00:05:51.650><c> if</c><00:05:52.550><c> you</c><00:05:52.729><c> don't</c><00:05:52.970><c> enjoy</c><00:05:53.360><c> reading</c><00:05:53.599><c> bytecode</c>

00:05:54.070 --> 00:05:54.080 align:start position:0%
so if you don't enjoy reading bytecode
 

00:05:54.080 --> 00:05:55.629 align:start position:0%
so if you don't enjoy reading bytecode
it's<00:05:54.259><c> really</c><00:05:54.500><c> not</c><00:05:54.650><c> that</c><00:05:54.710><c> complicated</c><00:05:55.190><c> doing</c>

00:05:55.629 --> 00:05:55.639 align:start position:0%
it's really not that complicated doing
 

00:05:55.639 --> 00:05:57.309 align:start position:0%
it's really not that complicated doing
it<00:05:55.759><c> again</c><00:05:56.030><c> what's</c><00:05:56.599><c> that</c><00:05:56.720><c> my</c><00:05:56.870><c> name</c><00:05:57.050><c> on</c><00:05:57.229><c> the</c>

00:05:57.309 --> 00:05:57.319 align:start position:0%
it again what's that my name on the
 

00:05:57.319 --> 00:05:58.540 align:start position:0%
it again what's that my name on the
speaker<00:05:57.680><c> notes</c><00:05:57.830><c> that's</c><00:05:58.129><c> why</c><00:05:58.310><c> I</c><00:05:58.340><c> was</c>

00:05:58.540 --> 00:05:58.550 align:start position:0%
speaker notes that's why I was
 

00:05:58.550 --> 00:06:00.249 align:start position:0%
speaker notes that's why I was
introducing<00:05:59.120><c> you</c><00:05:59.270><c> my</c><00:05:59.449><c> mouse</c><00:05:59.750><c> I'm</c><00:05:59.930><c> gonna</c><00:06:00.050><c> tell</c>

00:06:00.249 --> 00:06:00.259 align:start position:0%
introducing you my mouse I'm gonna tell
 

00:06:00.259 --> 00:06:01.510 align:start position:0%
introducing you my mouse I'm gonna tell
you<00:06:00.409><c> what</c><00:06:00.560><c> to</c><00:06:00.680><c> do</c>

00:06:01.510 --> 00:06:01.520 align:start position:0%
you what to do
 

00:06:01.520 --> 00:06:05.140 align:start position:0%
you what to do
keep<00:06:02.090><c> going</c><00:06:02.509><c> you</c><00:06:02.720><c> started</c><00:06:03.169><c> it</c><00:06:03.759><c> so</c><00:06:04.759><c> if</c><00:06:05.030><c> you</c>

00:06:05.140 --> 00:06:05.150 align:start position:0%
keep going you started it so if you
 

00:06:05.150 --> 00:06:06.820 align:start position:0%
keep going you started it so if you
don't<00:06:05.330><c> want</c><00:06:05.539><c> to</c><00:06:05.659><c> read</c><00:06:05.810><c> all</c><00:06:06.110><c> of</c><00:06:06.139><c> that</c><00:06:06.319><c> bytecode</c>

00:06:06.820 --> 00:06:06.830 align:start position:0%
don't want to read all of that bytecode
 

00:06:06.830 --> 00:06:07.899 align:start position:0%
don't want to read all of that bytecode
it's<00:06:07.009><c> actually</c><00:06:07.310><c> pretty</c><00:06:07.580><c> straightforward</c>

00:06:07.899 --> 00:06:07.909 align:start position:0%
it's actually pretty straightforward
 

00:06:07.909 --> 00:06:09.879 align:start position:0%
it's actually pretty straightforward
there's<00:06:08.539><c> some</c><00:06:08.720><c> simple</c><00:06:09.080><c> reference</c><00:06:09.259><c> Docs</c><00:06:09.650><c> out</c>

00:06:09.879 --> 00:06:09.889 align:start position:0%
there's some simple reference Docs out
 

00:06:09.889 --> 00:06:11.140 align:start position:0%
there's some simple reference Docs out
there<00:06:10.069><c> that</c><00:06:10.220><c> you</c><00:06:10.280><c> can</c><00:06:10.400><c> take</c><00:06:10.550><c> a</c><00:06:10.580><c> look</c><00:06:10.819><c> at</c><00:06:10.940><c> you're</c>

00:06:11.140 --> 00:06:11.150 align:start position:0%
there that you can take a look at you're
 

00:06:11.150 --> 00:06:13.689 align:start position:0%
there that you can take a look at you're
pushing<00:06:11.509><c> your</c><00:06:11.599><c> pop</c><00:06:11.810><c> in</c><00:06:12.020><c> your</c><00:06:12.139><c> setting</c><00:06:12.500><c> but</c><00:06:13.460><c> if</c>

00:06:13.689 --> 00:06:13.699 align:start position:0%
pushing your pop in your setting but if
 

00:06:13.699 --> 00:06:14.800 align:start position:0%
pushing your pop in your setting but if
you<00:06:13.819><c> don't</c><00:06:14.030><c> want</c><00:06:14.150><c> to</c><00:06:14.240><c> deal</c><00:06:14.360><c> with</c><00:06:14.389><c> that</c><00:06:14.659><c> there</c>

00:06:14.800 --> 00:06:14.810 align:start position:0%
you don't want to deal with that there
 

00:06:14.810 --> 00:06:16.450 align:start position:0%
you don't want to deal with that there
is<00:06:14.930><c> an</c><00:06:15.050><c> easier</c><00:06:15.409><c> way</c><00:06:15.470><c> especially</c><00:06:15.979><c> a</c><00:06:16.280><c> more</c>

00:06:16.450 --> 00:06:16.460 align:start position:0%
is an easier way especially a more
 

00:06:16.460 --> 00:06:18.189 align:start position:0%
is an easier way especially a more
concise<00:06:16.849><c> way</c><00:06:17.120><c> to</c><00:06:17.180><c> see</c><00:06:17.479><c> what's</c><00:06:17.659><c> actually</c><00:06:17.780><c> going</c>

00:06:18.189 --> 00:06:18.199 align:start position:0%
concise way to see what's actually going
 

00:06:18.199 --> 00:06:21.730 align:start position:0%
concise way to see what's actually going
on<00:06:18.610><c> and</c><00:06:19.610><c> for</c><00:06:20.030><c> that</c><00:06:20.120><c> you</c><00:06:20.360><c> would</c><00:06:20.509><c> use</c><00:06:20.750><c> the</c><00:06:21.530><c> byte</c>

00:06:21.730 --> 00:06:21.740 align:start position:0%
on and for that you would use the byte
 

00:06:21.740 --> 00:06:25.029 align:start position:0%
on and for that you would use the byte
code<00:06:22.870><c> you</c><00:06:23.870><c> want</c><00:06:23.960><c> me</c><00:06:24.080><c> to</c><00:06:24.169><c> keep</c><00:06:24.259><c> going</c><00:06:24.319><c> all</c><00:06:24.919><c> right</c>

00:06:25.029 --> 00:06:25.039 align:start position:0%
code you want me to keep going all right
 

00:06:25.039 --> 00:06:27.070 align:start position:0%
code you want me to keep going all right
rest<00:06:25.250><c> of</c><00:06:25.400><c> the</c><00:06:25.460><c> presentation</c><00:06:26.030><c> is</c><00:06:26.150><c> mine</c><00:06:26.330><c> here</c><00:06:26.990><c> we</c>

00:06:27.070 --> 00:06:27.080 align:start position:0%
rest of the presentation is mine here we
 

00:06:27.080 --> 00:06:28.469 align:start position:0%
rest of the presentation is mine here we
go<00:06:27.229><c> I'll</c><00:06:27.470><c> stop</c><00:06:27.680><c> over</c><00:06:27.830><c> there</c>

00:06:28.469 --> 00:06:28.479 align:start position:0%
go I'll stop over there
 

00:06:28.479 --> 00:06:30.969 align:start position:0%
go I'll stop over there
what's<00:06:29.479><c> that</c><00:06:29.569><c> I'll</c><00:06:29.840><c> be</c><00:06:29.990><c> over</c><00:06:30.169><c> there</c><00:06:30.380><c> all</c><00:06:30.530><c> right</c>

00:06:30.969 --> 00:06:30.979 align:start position:0%
what's that I'll be over there all right
 

00:06:30.979 --> 00:06:34.480 align:start position:0%
what's that I'll be over there all right
so<00:06:31.310><c> let's</c><00:06:32.240><c> say</c><00:06:32.389><c> you've</c><00:06:32.569><c> got</c><00:06:32.979><c> this</c><00:06:33.979><c> code</c><00:06:34.280><c> could</c>

00:06:34.480 --> 00:06:34.490 align:start position:0%
so let's say you've got this code could
 

00:06:34.490 --> 00:06:36.370 align:start position:0%
so let's say you've got this code could
you<00:06:34.610><c> go</c><00:06:34.729><c> a</c><00:06:34.759><c> little</c><00:06:34.940><c> bit</c><00:06:35.150><c> further</c><00:06:35.389><c> actually</c><00:06:35.659><c> so</c>

00:06:36.370 --> 00:06:36.380 align:start position:0%
you go a little bit further actually so
 

00:06:36.380 --> 00:06:38.529 align:start position:0%
you go a little bit further actually so
you've<00:06:36.500><c> got</c><00:06:36.650><c> this</c><00:06:36.889><c> code</c><00:06:37.190><c> you</c><00:06:38.090><c> have</c><00:06:38.270><c> the</c><00:06:38.389><c> byte</c>

00:06:38.529 --> 00:06:38.539 align:start position:0%
you've got this code you have the byte
 

00:06:38.539 --> 00:06:40.089 align:start position:0%
you've got this code you have the byte
code<00:06:38.569><c> representation</c><00:06:39.229><c> over</c><00:06:39.770><c> there</c><00:06:39.889><c> and</c><00:06:40.039><c> if</c>

00:06:40.089 --> 00:06:40.099 align:start position:0%
code representation over there and if
 

00:06:40.099 --> 00:06:41.529 align:start position:0%
code representation over there and if
you<00:06:40.220><c> look</c><00:06:40.430><c> at</c><00:06:40.550><c> the</c><00:06:40.669><c> top</c><00:06:40.909><c> of</c><00:06:40.940><c> that</c><00:06:41.180><c> window</c>

00:06:41.529 --> 00:06:41.539 align:start position:0%
you look at the top of that window
 

00:06:41.539 --> 00:06:42.520 align:start position:0%
you look at the top of that window
you've<00:06:41.780><c> got</c><00:06:41.810><c> this</c><00:06:42.050><c> button</c><00:06:42.289><c> that</c><00:06:42.409><c> says</c>

00:06:42.520 --> 00:06:42.530 align:start position:0%
you've got this button that says
 

00:06:42.530 --> 00:06:45.370 align:start position:0%
you've got this button that says
decompile<00:06:43.370><c> so</c><00:06:44.060><c> you</c><00:06:44.120><c> click</c><00:06:44.569><c> on</c><00:06:44.719><c> that</c><00:06:44.930><c> thing</c><00:06:45.169><c> and</c>

00:06:45.370 --> 00:06:45.380 align:start position:0%
decompile so you click on that thing and
 

00:06:45.380 --> 00:06:47.350 align:start position:0%
decompile so you click on that thing and
then<00:06:45.770><c> you'll</c><00:06:45.949><c> in</c><00:06:46.190><c> your</c><00:06:46.430><c> editor</c><00:06:46.789><c> window</c><00:06:47.120><c> you'll</c>

00:06:47.350 --> 00:06:47.360 align:start position:0%
then you'll in your editor window you'll
 

00:06:47.360 --> 00:06:49.839 align:start position:0%
then you'll in your editor window you'll
be<00:06:47.479><c> shown</c><00:06:47.840><c> some</c><00:06:48.229><c> some</c><00:06:49.190><c> java</c><00:06:49.460><c> programming</c>

00:06:49.839 --> 00:06:49.849 align:start position:0%
be shown some some java programming
 

00:06:49.849 --> 00:06:51.640 align:start position:0%
be shown some some java programming
language<00:06:49.969><c> code</c><00:06:50.449><c> that</c><00:06:50.629><c> looks</c><00:06:50.840><c> more</c><00:06:51.379><c> like</c><00:06:51.440><c> this</c>

00:06:51.640 --> 00:06:51.650 align:start position:0%
language code that looks more like this
 

00:06:51.650 --> 00:06:54.399 align:start position:0%
language code that looks more like this
right<00:06:52.580><c> so</c><00:06:52.759><c> you</c><00:06:52.819><c> got</c><00:06:53.210><c> the</c><00:06:53.360><c> byte</c><00:06:53.509><c> code</c><00:06:53.539><c> fairly</c>

00:06:54.399 --> 00:06:54.409 align:start position:0%
right so you got the byte code fairly
 

00:06:54.409 --> 00:06:56.439 align:start position:0%
right so you got the byte code fairly
verbose<00:06:54.919><c> all</c><00:06:55.219><c> the</c><00:06:55.460><c> things</c><00:06:55.639><c> going</c><00:06:56.000><c> on</c><00:06:56.120><c> you</c><00:06:56.360><c> know</c>

00:06:56.439 --> 00:06:56.449 align:start position:0%
verbose all the things going on you know
 

00:06:56.449 --> 00:06:58.450 align:start position:0%
verbose all the things going on you know
each<00:06:56.659><c> of</c><00:06:56.840><c> the</c><00:06:56.960><c> lines</c><00:06:57.530><c> of</c><00:06:57.740><c> Kotlin</c><00:06:58.069><c> code</c><00:06:58.280><c> may</c>

00:06:58.450 --> 00:06:58.460 align:start position:0%
each of the lines of Kotlin code may
 

00:06:58.460 --> 00:07:00.430 align:start position:0%
each of the lines of Kotlin code may
expand<00:06:58.789><c> to</c><00:06:58.940><c> several</c><00:06:59.210><c> lines</c><00:06:59.389><c> about</c><00:06:59.630><c> byte</c><00:07:00.169><c> code</c>

00:07:00.430 --> 00:07:00.440 align:start position:0%
expand to several lines about byte code
 

00:07:00.440 --> 00:07:02.499 align:start position:0%
expand to several lines about byte code
along<00:07:00.740><c> with</c><00:07:00.919><c> the</c><00:07:01.039><c> metadata</c><00:07:01.430><c> or</c><00:07:01.940><c> you</c><00:07:02.180><c> can</c><00:07:02.330><c> see</c>

00:07:02.499 --> 00:07:02.509 align:start position:0%
along with the metadata or you can see
 

00:07:02.509 --> 00:07:05.290 align:start position:0%
along with the metadata or you can see
this<00:07:02.690><c> fairly</c><00:07:03.349><c> terse</c><00:07:03.650><c> Java</c><00:07:03.979><c> code</c><00:07:04.280><c> instead</c><00:07:04.639><c> you</c>

00:07:05.290 --> 00:07:05.300 align:start position:0%
this fairly terse Java code instead you
 

00:07:05.300 --> 00:07:07.029 align:start position:0%
this fairly terse Java code instead you
see<00:07:05.509><c> basically</c><00:07:06.050><c> straightforward</c><00:07:06.860><c> things</c>

00:07:07.029 --> 00:07:07.039 align:start position:0%
see basically straightforward things
 

00:07:07.039 --> 00:07:08.769 align:start position:0%
see basically straightforward things
going<00:07:07.370><c> on</c><00:07:07.430><c> there</c><00:07:07.729><c> you</c><00:07:07.849><c> have</c><00:07:08.029><c> some</c><00:07:08.210><c> int</c><00:07:08.389><c> values</c>

00:07:08.769 --> 00:07:08.779 align:start position:0%
going on there you have some int values
 

00:07:08.779 --> 00:07:10.390 align:start position:0%
going on there you have some int values
you<00:07:08.960><c> have</c><00:07:09.139><c> some</c><00:07:09.440><c> integer</c><00:07:09.800><c> values</c><00:07:10.130><c> that</c><00:07:10.310><c> got</c>

00:07:10.390 --> 00:07:10.400 align:start position:0%
you have some integer values that got
 

00:07:10.400 --> 00:07:12.790 align:start position:0%
you have some integer values that got
Auto<00:07:10.639><c> boxed</c><00:07:11.150><c> and</c><00:07:12.050><c> then</c><00:07:12.259><c> we're</c><00:07:12.440><c> printing</c><00:07:12.710><c> out</c>

00:07:12.790 --> 00:07:12.800 align:start position:0%
Auto boxed and then we're printing out
 

00:07:12.800 --> 00:07:18.309 align:start position:0%
Auto boxed and then we're printing out
the<00:07:12.889><c> values</c><00:07:13.190><c> there</c><00:07:14.620><c> just</c><00:07:15.620><c> like</c><00:07:16.219><c> that</c><00:07:17.169><c> you</c><00:07:18.169><c> want</c>

00:07:18.309 --> 00:07:18.319 align:start position:0%
the values there just like that you want
 

00:07:18.319 --> 00:07:19.510 align:start position:0%
the values there just like that you want
to<00:07:18.380><c> talk</c><00:07:18.500><c> about</c><00:07:18.529><c> the</c><00:07:18.770><c> memory</c><00:07:19.039><c> profile</c><00:07:19.400><c> where</c>

00:07:19.510 --> 00:07:19.520 align:start position:0%
to talk about the memory profile where
 

00:07:19.520 --> 00:07:21.999 align:start position:0%
to talk about the memory profile where
it<00:07:19.639><c> says</c><00:07:20.150><c> you'll</c><00:07:20.330><c> name</c><00:07:20.479><c> it</c><00:07:20.690><c> does</c><00:07:20.990><c> I'm</c><00:07:21.830><c> going</c><00:07:21.919><c> to</c>

00:07:21.999 --> 00:07:22.009 align:start position:0%
it says you'll name it does I'm going to
 

00:07:22.009 --> 00:07:23.290 align:start position:0%
it says you'll name it does I'm going to
talk<00:07:22.130><c> about</c><00:07:22.340><c> the</c><00:07:22.430><c> memory</c><00:07:22.699><c> profile</c><00:07:23.150><c> where</c>

00:07:23.290 --> 00:07:23.300 align:start position:0%
talk about the memory profile where
 

00:07:23.300 --> 00:07:25.269 align:start position:0%
talk about the memory profile where
there<00:07:23.479><c> the</c><00:07:23.990><c> third</c><00:07:24.349><c> approach</c><00:07:24.740><c> that</c><00:07:25.159><c> we</c><00:07:25.250><c> have</c>

00:07:25.269 --> 00:07:25.279 align:start position:0%
there the third approach that we have
 

00:07:25.279 --> 00:07:27.490 align:start position:0%
there the third approach that we have
using<00:07:26.210><c> the</c><00:07:26.300><c> tools</c><00:07:26.509><c> to</c><00:07:26.779><c> find</c><00:07:26.960><c> out</c><00:07:27.139><c> what's</c><00:07:27.289><c> going</c>

00:07:27.490 --> 00:07:27.500 align:start position:0%
using the tools to find out what's going
 

00:07:27.500 --> 00:07:29.050 align:start position:0%
using the tools to find out what's going
on<00:07:27.620><c> is</c><00:07:27.800><c> to</c><00:07:27.830><c> actually</c><00:07:28.279><c> see</c><00:07:28.490><c> what's</c><00:07:28.669><c> going</c><00:07:28.909><c> on</c>

00:07:29.050 --> 00:07:29.060 align:start position:0%
on is to actually see what's going on
 

00:07:29.060 --> 00:07:30.790 align:start position:0%
on is to actually see what's going on
with<00:07:29.210><c> allocations</c><00:07:29.870><c> and</c><00:07:30.020><c> collections</c><00:07:30.560><c> in</c><00:07:30.710><c> the</c>

00:07:30.790 --> 00:07:30.800 align:start position:0%
with allocations and collections in the
 

00:07:30.800 --> 00:07:34.059 align:start position:0%
with allocations and collections in the
system<00:07:31.159><c> so</c><00:07:31.819><c> one</c><00:07:32.389><c> of</c><00:07:32.509><c> my</c><00:07:32.630><c> favorite</c><00:07:33.050><c> tools</c><00:07:33.319><c> when</c>

00:07:34.059 --> 00:07:34.069 align:start position:0%
system so one of my favorite tools when
 

00:07:34.069 --> 00:07:35.260 align:start position:0%
system so one of my favorite tools when
I<00:07:34.099><c> joined</c><00:07:34.340><c> the</c><00:07:34.460><c> team</c><00:07:34.490><c> and</c><00:07:34.819><c> for</c><00:07:34.909><c> many</c><00:07:35.060><c> years</c>

00:07:35.260 --> 00:07:35.270 align:start position:0%
I joined the team and for many years
 

00:07:35.270 --> 00:07:38.499 align:start position:0%
I joined the team and for many years
after<00:07:35.630><c> that</c><00:07:35.659><c> was</c><00:07:36.380><c> oh</c><00:07:36.800><c> is</c><00:07:37.490><c> this</c><00:07:37.580><c> proof</c><00:07:37.909><c> I'm</c>

00:07:38.499 --> 00:07:38.509 align:start position:0%
after that was oh is this proof I'm
 

00:07:38.509 --> 00:07:39.310 align:start position:0%
after that was oh is this proof I'm
gonna<00:07:38.719><c> tweet</c><00:07:38.960><c> that</c>

00:07:39.310 --> 00:07:39.320 align:start position:0%
gonna tweet that
 

00:07:39.320 --> 00:07:41.540 align:start position:0%
gonna tweet that
[Laughter]

00:07:41.540 --> 00:07:41.550 align:start position:0%
[Laughter]
 

00:07:41.550 --> 00:07:44.279 align:start position:0%
[Laughter]
allocation<00:07:42.550><c> tracker</c><00:07:43.169><c> allocation</c><00:07:44.169><c> tracker</c>

00:07:44.279 --> 00:07:44.289 align:start position:0%
allocation tracker allocation tracker
 

00:07:44.289 --> 00:07:46.109 align:start position:0%
allocation tracker allocation tracker
was<00:07:44.619><c> a</c><00:07:44.649><c> tool</c><00:07:44.889><c> that</c><00:07:44.949><c> you</c><00:07:45.099><c> would</c><00:07:45.219><c> run</c><00:07:45.399><c> in</c><00:07:45.550><c> DDMS</c>

00:07:46.109 --> 00:07:46.119 align:start position:0%
was a tool that you would run in DDMS
 

00:07:46.119 --> 00:07:48.839 align:start position:0%
was a tool that you would run in DDMS
and<00:07:46.389><c> you</c><00:07:46.809><c> would</c><00:07:46.960><c> start</c><00:07:47.259><c> it</c><00:07:47.379><c> at</c><00:07:48.039><c> some</c><00:07:48.490><c> point</c><00:07:48.729><c> in</c>

00:07:48.839 --> 00:07:48.849 align:start position:0%
and you would start it at some point in
 

00:07:48.849 --> 00:07:50.219 align:start position:0%
and you would start it at some point in
time<00:07:48.879><c> and</c><00:07:49.270><c> you</c><00:07:49.330><c> would</c><00:07:49.509><c> use</c><00:07:49.659><c> the</c><00:07:49.839><c> app</c><00:07:49.959><c> for</c><00:07:50.199><c> a</c>

00:07:50.219 --> 00:07:50.229 align:start position:0%
time and you would use the app for a
 

00:07:50.229 --> 00:07:51.359 align:start position:0%
time and you would use the app for a
while<00:07:50.409><c> and</c><00:07:50.589><c> then</c><00:07:50.679><c> you</c><00:07:50.709><c> would</c><00:07:50.889><c> stop</c><00:07:51.129><c> it</c><00:07:51.249><c> and</c><00:07:51.339><c> it</c>

00:07:51.359 --> 00:07:51.369 align:start position:0%
while and then you would stop it and it
 

00:07:51.369 --> 00:07:52.919 align:start position:0%
while and then you would stop it and it
would<00:07:51.520><c> say</c><00:07:51.639><c> here</c><00:07:52.089><c> are</c><00:07:52.179><c> all</c><00:07:52.270><c> the</c><00:07:52.449><c> objects</c><00:07:52.839><c> that</c>

00:07:52.919 --> 00:07:52.929 align:start position:0%
would say here are all the objects that
 

00:07:52.929 --> 00:07:55.649 align:start position:0%
would say here are all the objects that
were<00:07:53.080><c> allocated</c><00:07:53.709><c> on</c><00:07:53.860><c> the</c><00:07:54.039><c> fly</c><00:07:54.249><c> and</c><00:07:55.149><c> then</c><00:07:55.360><c> you</c>

00:07:55.649 --> 00:07:55.659 align:start position:0%
were allocated on the fly and then you
 

00:07:55.659 --> 00:07:56.909 align:start position:0%
were allocated on the fly and then you
could<00:07:55.839><c> click</c><00:07:55.959><c> on</c><00:07:56.050><c> any</c><00:07:56.349><c> of</c><00:07:56.529><c> those</c><00:07:56.649><c> instances</c>

00:07:56.909 --> 00:07:56.919 align:start position:0%
could click on any of those instances
 

00:07:56.919 --> 00:07:58.559 align:start position:0%
could click on any of those instances
and<00:07:57.490><c> it</c><00:07:57.550><c> would</c><00:07:57.639><c> show</c><00:07:57.819><c> you</c><00:07:57.879><c> the</c><00:07:58.119><c> call</c><00:07:58.300><c> stack</c>

00:07:58.559 --> 00:07:58.569 align:start position:0%
and it would show you the call stack
 

00:07:58.569 --> 00:08:00.570 align:start position:0%
and it would show you the call stack
really<00:07:58.899><c> powerful</c><00:07:59.349><c> really</c><00:07:59.529><c> useful</c><00:07:59.979><c> wasn't</c>

00:08:00.570 --> 00:08:00.580 align:start position:0%
really powerful really useful wasn't
 

00:08:00.580 --> 00:08:02.249 align:start position:0%
really powerful really useful wasn't
integrated<00:08:00.819><c> in</c><00:08:01.209><c> with</c><00:08:01.389><c> any</c><00:08:01.629><c> of</c><00:08:01.809><c> the</c><00:08:01.929><c> rest</c><00:08:02.110><c> of</c>

00:08:02.249 --> 00:08:02.259 align:start position:0%
integrated in with any of the rest of
 

00:08:02.259 --> 00:08:04.079 align:start position:0%
integrated in with any of the rest of
the<00:08:02.349><c> tools</c><00:08:02.559><c> so</c><00:08:03.129><c> kind</c><00:08:03.399><c> of</c><00:08:03.459><c> a</c><00:08:03.520><c> pain</c><00:08:03.669><c> to</c><00:08:03.699><c> get</c><00:08:03.909><c> to</c><00:08:04.059><c> a</c>

00:08:04.079 --> 00:08:04.089 align:start position:0%
the tools so kind of a pain to get to a
 

00:08:04.089 --> 00:08:05.279 align:start position:0%
the tools so kind of a pain to get to a
lot<00:08:04.300><c> of</c><00:08:04.389><c> people</c><00:08:04.599><c> didn't</c><00:08:04.809><c> even</c><00:08:04.899><c> know</c><00:08:05.020><c> it</c><00:08:05.259><c> was</c>

00:08:05.279 --> 00:08:05.289 align:start position:0%
lot of people didn't even know it was
 

00:08:05.289 --> 00:08:07.679 align:start position:0%
lot of people didn't even know it was
there<00:08:05.589><c> because</c><00:08:06.059><c> actually</c><00:08:07.059><c> finding</c><00:08:07.389><c> it</c><00:08:07.539><c> was</c><00:08:07.659><c> a</c>

00:08:07.679 --> 00:08:07.689 align:start position:0%
there because actually finding it was a
 

00:08:07.689 --> 00:08:10.169 align:start position:0%
there because actually finding it was a
little<00:08:07.929><c> bit</c><00:08:08.050><c> tricky</c><00:08:08.349><c> so</c><00:08:08.740><c> now</c><00:08:08.919><c> we</c><00:08:08.979><c> have</c><00:08:09.279><c> memory</c>

00:08:10.169 --> 00:08:10.179 align:start position:0%
little bit tricky so now we have memory
 

00:08:10.179 --> 00:08:12.540 align:start position:0%
little bit tricky so now we have memory
profiling<00:08:10.899><c> directly</c><00:08:11.800><c> integrated</c><00:08:12.189><c> into</c><00:08:12.399><c> the</c>

00:08:12.540 --> 00:08:12.550 align:start position:0%
profiling directly integrated into the
 

00:08:12.550 --> 00:08:14.730 align:start position:0%
profiling directly integrated into the
ID<00:08:12.789><c> with</c><00:08:13.449><c> the</c><00:08:13.599><c> rest</c><00:08:13.809><c> of</c><00:08:13.930><c> the</c><00:08:13.990><c> profilers</c><00:08:14.559><c> that</c>

00:08:14.730 --> 00:08:14.740 align:start position:0%
ID with the rest of the profilers that
 

00:08:14.740 --> 00:08:16.320 align:start position:0%
ID with the rest of the profilers that
have<00:08:14.830><c> come</c><00:08:15.009><c> online</c><00:08:15.159><c> in</c><00:08:15.520><c> studio</c><00:08:15.879><c> in</c><00:08:16.089><c> the</c><00:08:16.149><c> last</c>

00:08:16.320 --> 00:08:16.330 align:start position:0%
have come online in studio in the last
 

00:08:16.330 --> 00:08:19.260 align:start position:0%
have come online in studio in the last
few<00:08:16.539><c> years</c><00:08:16.800><c> so</c><00:08:17.800><c> this</c><00:08:18.279><c> also</c><00:08:18.610><c> allows</c><00:08:19.029><c> you</c><00:08:19.240><c> to</c>

00:08:19.260 --> 00:08:19.270 align:start position:0%
few years so this also allows you to
 

00:08:19.270 --> 00:08:21.149 align:start position:0%
few years so this also allows you to
track<00:08:19.539><c> memory</c><00:08:19.839><c> usage</c><00:08:20.199><c> over</c><00:08:20.349><c> time</c><00:08:20.469><c> you</c><00:08:20.830><c> can</c><00:08:20.979><c> see</c>

00:08:21.149 --> 00:08:21.159 align:start position:0%
track memory usage over time you can see
 

00:08:21.159 --> 00:08:23.249 align:start position:0%
track memory usage over time you can see
how<00:08:21.339><c> big</c><00:08:21.490><c> the</c><00:08:21.610><c> keep</c><00:08:21.819><c> is</c><00:08:22.029><c> at</c><00:08:22.270><c> any</c><00:08:22.719><c> given</c><00:08:22.959><c> time</c>

00:08:23.249 --> 00:08:23.259 align:start position:0%
how big the keep is at any given time
 

00:08:23.259 --> 00:08:25.019 align:start position:0%
how big the keep is at any given time
you<00:08:23.319><c> can</c><00:08:23.619><c> see</c><00:08:23.860><c> when</c><00:08:24.129><c> garbage</c><00:08:24.550><c> collections</c>

00:08:25.019 --> 00:08:25.029 align:start position:0%
you can see when garbage collections
 

00:08:25.029 --> 00:08:26.909 align:start position:0%
you can see when garbage collections
happen<00:08:25.419><c> and</c><00:08:25.569><c> what</c><00:08:26.050><c> happened</c><00:08:26.409><c> because</c><00:08:26.770><c> of</c>

00:08:26.909 --> 00:08:26.919 align:start position:0%
happen and what happened because of
 

00:08:26.919 --> 00:08:29.339 align:start position:0%
happen and what happened because of
those<00:08:27.099><c> and</c><00:08:27.399><c> you</c><00:08:27.849><c> can</c><00:08:27.879><c> catch</c><00:08:28.270><c> leaks</c><00:08:28.629><c> which</c><00:08:29.199><c> is</c>

00:08:29.339 --> 00:08:29.349 align:start position:0%
those and you can catch leaks which is
 

00:08:29.349 --> 00:08:30.809 align:start position:0%
those and you can catch leaks which is
really<00:08:29.589><c> powerful</c><00:08:29.740><c> this</c><00:08:30.159><c> is</c><00:08:30.339><c> another</c><00:08:30.610><c> thing</c>

00:08:30.809 --> 00:08:30.819 align:start position:0%
really powerful this is another thing
 

00:08:30.819 --> 00:08:32.699 align:start position:0%
really powerful this is another thing
that<00:08:30.879><c> yes</c><00:08:31.300><c> we</c><00:08:31.509><c> allowed</c><00:08:31.749><c> you</c><00:08:31.779><c> to</c><00:08:31.959><c> do</c><00:08:32.139><c> it</c><00:08:32.319><c> on</c>

00:08:32.699 --> 00:08:32.709 align:start position:0%
that yes we allowed you to do it on
 

00:08:32.709 --> 00:08:35.100 align:start position:0%
that yes we allowed you to do it on
Android<00:08:33.310><c> but</c><00:08:33.550><c> oh</c><00:08:33.789><c> man</c><00:08:34.209><c> did</c><00:08:34.419><c> we</c><00:08:34.539><c> require</c><00:08:34.870><c> you</c><00:08:35.079><c> to</c>

00:08:35.100 --> 00:08:35.110 align:start position:0%
Android but oh man did we require you to
 

00:08:35.110 --> 00:08:37.620 align:start position:0%
Android but oh man did we require you to
jump<00:08:35.409><c> through</c><00:08:35.560><c> a</c><00:08:35.589><c> lot</c><00:08:35.649><c> of</c><00:08:35.909><c> Hoops</c><00:08:36.909><c> a</c><00:08:37.149><c> lot</c><00:08:37.509><c> of</c>

00:08:37.620 --> 00:08:37.630 align:start position:0%
jump through a lot of Hoops a lot of
 

00:08:37.630 --> 00:08:40.559 align:start position:0%
jump through a lot of Hoops a lot of
heaps<00:08:37.870><c> you</c><00:08:38.860><c> would</c><00:08:39.069><c> you</c><00:08:39.550><c> know</c><00:08:39.669><c> dump</c><00:08:39.969><c> a</c><00:08:40.089><c> heap</c><00:08:40.329><c> and</c>

00:08:40.559 --> 00:08:40.569 align:start position:0%
heaps you would you know dump a heap and
 

00:08:40.569 --> 00:08:41.699 align:start position:0%
heaps you would you know dump a heap and
you<00:08:40.659><c> would</c><00:08:40.779><c> transcode</c><00:08:41.229><c> that</c><00:08:41.409><c> into</c><00:08:41.680><c> a</c>

00:08:41.699 --> 00:08:41.709 align:start position:0%
you would transcode that into a
 

00:08:41.709 --> 00:08:43.139 align:start position:0%
you would transcode that into a
different<00:08:41.889><c> format</c><00:08:42.399><c> you</c><00:08:42.639><c> would</c><00:08:42.729><c> use</c><00:08:42.940><c> some</c>

00:08:43.139 --> 00:08:43.149 align:start position:0%
different format you would use some
 

00:08:43.149 --> 00:08:45.449 align:start position:0%
different format you would use some
external<00:08:43.479><c> tool</c><00:08:43.839><c> and</c><00:08:44.199><c> then</c><00:08:44.319><c> you</c><00:08:44.649><c> walk</c><00:08:45.250><c> through</c>

00:08:45.449 --> 00:08:45.459 align:start position:0%
external tool and then you walk through
 

00:08:45.459 --> 00:08:47.429 align:start position:0%
external tool and then you walk through
this<00:08:45.579><c> amazingly</c><00:08:46.149><c> complex</c><00:08:46.720><c> set</c><00:08:47.410><c> of</c>

00:08:47.429 --> 00:08:47.439 align:start position:0%
this amazingly complex set of
 

00:08:47.439 --> 00:08:49.650 align:start position:0%
this amazingly complex set of
information<00:08:48.100><c> now</c><00:08:48.850><c> all</c><00:08:49.120><c> of</c><00:08:49.209><c> that</c><00:08:49.329><c> stuff</c><00:08:49.540><c> is</c>

00:08:49.650 --> 00:08:49.660 align:start position:0%
information now all of that stuff is
 

00:08:49.660 --> 00:08:51.499 align:start position:0%
information now all of that stuff is
integrated<00:08:50.139><c> directly</c><00:08:50.259><c> and</c><00:08:50.680><c> in</c><00:08:50.740><c> the</c><00:08:50.860><c> ID</c><00:08:51.069><c> and</c>

00:08:51.499 --> 00:08:51.509 align:start position:0%
integrated directly and in the ID and
 

00:08:51.509 --> 00:08:53.939 align:start position:0%
integrated directly and in the ID and
after<00:08:52.509><c> all</c><00:08:52.630><c> of</c><00:08:52.660><c> this</c><00:08:52.899><c> it</c><00:08:53.139><c> allows</c><00:08:53.350><c> you</c><00:08:53.620><c> to</c><00:08:53.709><c> track</c>

00:08:53.939 --> 00:08:53.949 align:start position:0%
after all of this it allows you to track
 

00:08:53.949 --> 00:08:55.350 align:start position:0%
after all of this it allows you to track
allocations<00:08:54.579><c> and</c><00:08:54.730><c> that's</c><00:08:54.880><c> what</c><00:08:55.029><c> we</c><00:08:55.149><c> care</c>

00:08:55.350 --> 00:08:55.360 align:start position:0%
allocations and that's what we care
 

00:08:55.360 --> 00:08:58.920 align:start position:0%
allocations and that's what we care
about<00:08:55.389><c> today</c><00:08:55.870><c> so</c><00:08:56.529><c> I</c><00:08:56.740><c> wrote</c><00:08:57.310><c> this</c><00:08:57.490><c> code</c><00:08:57.730><c> all</c><00:08:58.269><c> by</c>

00:08:58.920 --> 00:08:58.930 align:start position:0%
about today so I wrote this code all by
 

00:08:58.930 --> 00:09:02.129 align:start position:0%
about today so I wrote this code all by
myself<00:09:00.089><c> really</c><00:09:01.089><c> simple</c><00:09:01.540><c> thing</c><00:09:01.779><c> we've</c><00:09:01.990><c> got</c>

00:09:02.129 --> 00:09:02.139 align:start position:0%
myself really simple thing we've got
 

00:09:02.139 --> 00:09:03.960 align:start position:0%
myself really simple thing we've got
this<00:09:02.290><c> nullable</c><00:09:02.800><c> int</c><00:09:02.980><c> value</c><00:09:03.430><c> you've</c><00:09:03.759><c> got</c><00:09:03.939><c> a</c>

00:09:03.960 --> 00:09:03.970 align:start position:0%
this nullable int value you've got a
 

00:09:03.970 --> 00:09:05.670 align:start position:0%
this nullable int value you've got a
tight<00:09:04.269><c> loop</c><00:09:04.449><c> in</c><00:09:04.660><c> there</c><00:09:04.839><c> in</c><00:09:05.050><c> the</c><00:09:05.139><c> method</c><00:09:05.470><c> we're</c>

00:09:05.670 --> 00:09:05.680 align:start position:0%
tight loop in there in the method we're
 

00:09:05.680 --> 00:09:08.129 align:start position:0%
tight loop in there in the method we're
going<00:09:05.949><c> G</c><00:09:06.189><c> Rho</c><00:09:06.250><c> to</c><00:09:06.399><c> 10,000</c><00:09:07.000><c> so</c><00:09:07.180><c> 10,000</c><00:09:07.839><c> and</c><00:09:07.959><c> 1</c>

00:09:08.129 --> 00:09:08.139 align:start position:0%
going G Rho to 10,000 so 10,000 and 1
 

00:09:08.139 --> 00:09:09.269 align:start position:0%
going G Rho to 10,000 so 10,000 and 1
times<00:09:08.439><c> it's</c><00:09:08.620><c> going</c><00:09:08.740><c> to</c><00:09:08.800><c> whip</c><00:09:08.980><c> through</c><00:09:09.100><c> the</c>

00:09:09.269 --> 00:09:09.279 align:start position:0%
times it's going to whip through the
 

00:09:09.279 --> 00:09:11.970 align:start position:0%
times it's going to whip through the
loop<00:09:09.399><c> and</c><00:09:09.550><c> it's</c><00:09:09.670><c> going</c><00:09:09.819><c> to</c><00:09:09.910><c> set</c><00:09:10.560><c> we</c><00:09:11.560><c> know</c><00:09:11.769><c> that</c>

00:09:11.970 --> 00:09:11.980 align:start position:0%
loop and it's going to set we know that
 

00:09:11.980 --> 00:09:13.710 align:start position:0%
loop and it's going to set we know that
that's<00:09:12.160><c> going</c><00:09:12.310><c> to</c><00:09:12.370><c> end</c><00:09:12.519><c> up</c><00:09:12.670><c> being</c><00:09:12.939><c> a</c><00:09:13.120><c> capital</c><00:09:13.630><c> I</c>

00:09:13.710 --> 00:09:13.720 align:start position:0%
that's going to end up being a capital I
 

00:09:13.720 --> 00:09:17.600 align:start position:0%
that's going to end up being a capital I
integer<00:09:14.199><c> value</c><00:09:14.620><c> set</c><00:09:15.370><c> from</c><00:09:15.579><c> the</c><00:09:15.699><c> primitive</c><00:09:15.910><c> I</c>

00:09:17.600 --> 00:09:17.610 align:start position:0%
integer value set from the primitive I
 

00:09:17.610 --> 00:09:21.360 align:start position:0%
integer value set from the primitive I
loop<00:09:18.990><c> value</c><00:09:19.990><c> that</c><00:09:20.110><c> we've</c><00:09:20.259><c> got</c><00:09:20.470><c> so</c><00:09:20.920><c> we</c><00:09:21.220><c> can</c>

00:09:21.360 --> 00:09:21.370 align:start position:0%
loop value that we've got so we can
 

00:09:21.370 --> 00:09:23.189 align:start position:0%
loop value that we've got so we can
click<00:09:21.550><c> on</c><00:09:21.610><c> this</c><00:09:22.120><c> in</c><00:09:22.389><c> the</c><00:09:22.480><c> lower</c><00:09:22.660><c> left</c><00:09:23.019><c> of</c><00:09:23.139><c> the</c>

00:09:23.189 --> 00:09:23.199 align:start position:0%
click on this in the lower left of the
 

00:09:23.199 --> 00:09:25.040 align:start position:0%
click on this in the lower left of the
IDE<00:09:23.649><c> you've</c><00:09:24.009><c> got</c><00:09:24.189><c> this</c><00:09:24.310><c> little</c>

00:09:25.040 --> 00:09:25.050 align:start position:0%
IDE you've got this little
 

00:09:25.050 --> 00:09:27.480 align:start position:0%
IDE you've got this little
toolbar<00:09:26.050><c> of</c><00:09:26.259><c> little</c><00:09:26.649><c> tools</c><00:09:26.889><c> you</c><00:09:27.040><c> can</c><00:09:27.189><c> run</c><00:09:27.370><c> if</c>

00:09:27.480 --> 00:09:27.490 align:start position:0%
toolbar of little tools you can run if
 

00:09:27.490 --> 00:09:28.530 align:start position:0%
toolbar of little tools you can run if
you<00:09:27.550><c> click</c><00:09:27.759><c> on</c><00:09:27.850><c> the</c><00:09:27.970><c> profiler</c>

00:09:28.530 --> 00:09:28.540 align:start position:0%
you click on the profiler
 

00:09:28.540 --> 00:09:30.360 align:start position:0%
you click on the profiler
you'll<00:09:28.990><c> get</c><00:09:29.139><c> something</c><00:09:29.439><c> that</c><00:09:29.769><c> looks</c><00:09:30.040><c> like</c>

00:09:30.360 --> 00:09:30.370 align:start position:0%
you'll get something that looks like
 

00:09:30.370 --> 00:09:32.910 align:start position:0%
you'll get something that looks like
this<00:09:30.880><c> it</c><00:09:31.420><c> shows</c><00:09:31.689><c> you</c><00:09:31.839><c> all</c><00:09:32.050><c> the</c><00:09:32.079><c> profilers</c><00:09:32.769><c> that</c>

00:09:32.910 --> 00:09:32.920 align:start position:0%
this it shows you all the profilers that
 

00:09:32.920 --> 00:09:34.829 align:start position:0%
this it shows you all the profilers that
we<00:09:33.009><c> currently</c><00:09:33.189><c> offer</c><00:09:33.399><c> you've</c><00:09:33.939><c> got</c><00:09:34.120><c> CPU</c><00:09:34.600><c> you</c>

00:09:34.829 --> 00:09:34.839 align:start position:0%
we currently offer you've got CPU you
 

00:09:34.839 --> 00:09:36.840 align:start position:0%
we currently offer you've got CPU you
got<00:09:34.990><c> the</c><00:09:35.110><c> memory</c><00:09:35.410><c> that</c><00:09:35.560><c> woke</c><00:09:35.769><c> into</c><00:09:36.160><c> you've</c><00:09:36.639><c> got</c>

00:09:36.840 --> 00:09:36.850 align:start position:0%
got the memory that woke into you've got
 

00:09:36.850 --> 00:09:38.340 align:start position:0%
got the memory that woke into you've got
networking<00:09:37.360><c> and</c><00:09:37.509><c> you</c><00:09:37.569><c> give</c><00:09:37.689><c> out</c><00:09:37.810><c> battery</c>

00:09:38.340 --> 00:09:38.350 align:start position:0%
networking and you give out battery
 

00:09:38.350 --> 00:09:40.829 align:start position:0%
networking and you give out battery
power<00:09:39.069><c> usage</c><00:09:39.519><c> so</c><00:09:39.970><c> if</c><00:09:40.209><c> you</c><00:09:40.300><c> click</c><00:09:40.600><c> on</c><00:09:40.720><c> the</c>

00:09:40.829 --> 00:09:40.839 align:start position:0%
power usage so if you click on the
 

00:09:40.839 --> 00:09:42.509 align:start position:0%
power usage so if you click on the
memory<00:09:41.110><c> one</c><00:09:41.319><c> it</c><00:09:41.439><c> expands</c><00:09:41.769><c> to</c><00:09:41.889><c> take</c><00:09:42.160><c> over</c><00:09:42.339><c> the</c>

00:09:42.509 --> 00:09:42.519 align:start position:0%
memory one it expands to take over the
 

00:09:42.519 --> 00:09:44.309 align:start position:0%
memory one it expands to take over the
whole<00:09:42.610><c> screen</c><00:09:42.939><c> there</c><00:09:43.209><c> and</c><00:09:43.420><c> you</c><00:09:43.689><c> can</c><00:09:43.839><c> see</c><00:09:44.050><c> heap</c>

00:09:44.309 --> 00:09:44.319 align:start position:0%
whole screen there and you can see heap
 

00:09:44.319 --> 00:09:46.050 align:start position:0%
whole screen there and you can see heap
usage<00:09:44.709><c> over</c><00:09:44.949><c> time</c><00:09:45.160><c> now</c><00:09:45.310><c> what</c><00:09:45.490><c> we</c><00:09:45.610><c> really</c><00:09:45.880><c> care</c>

00:09:46.050 --> 00:09:46.060 align:start position:0%
usage over time now what we really care
 

00:09:46.060 --> 00:09:48.480 align:start position:0%
usage over time now what we really care
about<00:09:46.089><c> here</c><00:09:46.480><c> is</c><00:09:46.660><c> what</c><00:09:47.199><c> happened</c><00:09:47.649><c> there</c><00:09:47.949><c> right</c>

00:09:48.480 --> 00:09:48.490 align:start position:0%
about here is what happened there right
 

00:09:48.490 --> 00:09:50.129 align:start position:0%
about here is what happened there right
I<00:09:48.519><c> don't</c><00:09:48.880><c> care</c><00:09:49.059><c> when</c><00:09:49.240><c> it's</c><00:09:49.389><c> not</c><00:09:49.540><c> changing</c><00:09:49.990><c> what</c>

00:09:50.129 --> 00:09:50.139 align:start position:0%
I don't care when it's not changing what
 

00:09:50.139 --> 00:09:52.139 align:start position:0%
I don't care when it's not changing what
I<00:09:50.199><c> care</c><00:09:50.470><c> is</c><00:09:50.649><c> what</c><00:09:50.860><c> caused</c><00:09:51.370><c> it</c><00:09:51.610><c> to</c><00:09:51.790><c> actually</c>

00:09:52.139 --> 00:09:52.149 align:start position:0%
I care is what caused it to actually
 

00:09:52.149 --> 00:09:53.310 align:start position:0%
I care is what caused it to actually
bump<00:09:52.389><c> up</c>

00:09:53.310 --> 00:09:53.320 align:start position:0%
bump up
 

00:09:53.320 --> 00:09:56.730 align:start position:0%
bump up
and<00:09:54.010><c> keep</c><00:09:54.190><c> usage</c><00:09:54.610><c> and</c><00:09:54.820><c> why</c><00:09:55.360><c> was</c><00:09:55.630><c> that</c><00:09:55.660><c> so</c><00:09:56.320><c> you</c>

00:09:56.730 --> 00:09:56.740 align:start position:0%
and keep usage and why was that so you
 

00:09:56.740 --> 00:09:58.530 align:start position:0%
and keep usage and why was that so you
can<00:09:56.920><c> drag</c><00:09:57.250><c> the</c><00:09:57.430><c> cursor</c><00:09:57.820><c> along</c><00:09:58.090><c> there</c><00:09:58.270><c> you</c><00:09:58.420><c> can</c>

00:09:58.530 --> 00:09:58.540 align:start position:0%
can drag the cursor along there you can
 

00:09:58.540 --> 00:10:00.180 align:start position:0%
can drag the cursor along there you can
select<00:09:58.750><c> this</c><00:09:59.050><c> window</c><00:09:59.350><c> of</c><00:09:59.500><c> time</c><00:09:59.710><c> to</c><00:09:59.890><c> see</c><00:10:00.010><c> what's</c>

00:10:00.180 --> 00:10:00.190 align:start position:0%
select this window of time to see what's
 

00:10:00.190 --> 00:10:01.950 align:start position:0%
select this window of time to see what's
going<00:10:00.430><c> on</c><00:10:00.610><c> and</c><00:10:00.790><c> just</c><00:10:00.820><c> like</c><00:10:01.360><c> allocation</c>

00:10:01.950 --> 00:10:01.960 align:start position:0%
going on and just like allocation
 

00:10:01.960 --> 00:10:03.480 align:start position:0%
going on and just like allocation
tracker<00:10:02.110><c> you</c><00:10:02.530><c> can</c><00:10:02.560><c> see</c><00:10:02.890><c> all</c><00:10:03.100><c> of</c><00:10:03.130><c> the</c><00:10:03.460><c> things</c>

00:10:03.480 --> 00:10:03.490 align:start position:0%
tracker you can see all of the things
 

00:10:03.490 --> 00:10:06.420 align:start position:0%
tracker you can see all of the things
that<00:10:03.940><c> were</c><00:10:04.030><c> allocated</c><00:10:04.630><c> down</c><00:10:05.440><c> below</c><00:10:05.800><c> and</c><00:10:06.130><c> you</c>

00:10:06.420 --> 00:10:06.430 align:start position:0%
that were allocated down below and you
 

00:10:06.430 --> 00:10:08.550 align:start position:0%
that were allocated down below and you
can<00:10:06.580><c> see</c><00:10:06.790><c> that</c><00:10:07.090><c> in</c><00:10:07.210><c> fact</c><00:10:07.450><c> there</c><00:10:07.750><c> are</c><00:10:08.050><c> a</c><00:10:08.110><c> bunch</c>

00:10:08.550 --> 00:10:08.560 align:start position:0%
can see that in fact there are a bunch
 

00:10:08.560 --> 00:10:10.770 align:start position:0%
can see that in fact there are a bunch
of<00:10:08.770><c> capital</c><00:10:09.190><c> I</c><00:10:09.280><c> integers</c><00:10:09.760><c> they</c><00:10:09.940><c> got</c><00:10:10.120><c> allocated</c>

00:10:10.770 --> 00:10:10.780 align:start position:0%
of capital I integers they got allocated
 

00:10:10.780 --> 00:10:13.890 align:start position:0%
of capital I integers they got allocated
in<00:10:11.620><c> fact</c><00:10:12.310><c> there</c><00:10:12.550><c> are</c><00:10:12.700><c> exactly</c><00:10:13.000><c> nine</c><00:10:13.420><c> thousand</c>

00:10:13.890 --> 00:10:13.900 align:start position:0%
in fact there are exactly nine thousand
 

00:10:13.900 --> 00:10:16.170 align:start position:0%
in fact there are exactly nine thousand
eight<00:10:14.050><c> hundred</c><00:10:14.380><c> and</c><00:10:14.410><c> seventy-three</c><00:10:14.970><c> which</c><00:10:15.970><c> is</c>

00:10:16.170 --> 00:10:16.180 align:start position:0%
eight hundred and seventy-three which is
 

00:10:16.180 --> 00:10:18.600 align:start position:0%
eight hundred and seventy-three which is
weird<00:10:16.630><c> we're</c><00:10:17.290><c> in</c><00:10:17.470><c> a</c><00:10:17.560><c> loop</c><00:10:17.770><c> going</c><00:10:18.040><c> through</c><00:10:18.370><c> ten</c>

00:10:18.600 --> 00:10:18.610 align:start position:0%
weird we're in a loop going through ten
 

00:10:18.610 --> 00:10:20.550 align:start position:0%
weird we're in a loop going through ten
thousand<00:10:19.030><c> and</c><00:10:19.120><c> one</c><00:10:19.300><c> times</c><00:10:19.690><c> why</c><00:10:20.080><c> do</c><00:10:20.140><c> we</c><00:10:20.410><c> not</c>

00:10:20.550 --> 00:10:20.560 align:start position:0%
thousand and one times why do we not
 

00:10:20.560 --> 00:10:22.440 align:start position:0%
thousand and one times why do we not
have<00:10:20.770><c> ten</c><00:10:21.070><c> thousand</c><00:10:21.520><c> and</c><00:10:21.580><c> one</c><00:10:21.730><c> allocations</c>

00:10:22.440 --> 00:10:22.450 align:start position:0%
have ten thousand and one allocations
 

00:10:22.450 --> 00:10:26.960 align:start position:0%
have ten thousand and one allocations
going<00:10:22.750><c> on</c><00:10:22.900><c> so</c><00:10:24.150><c> there's</c><00:10:25.150><c> the</c><00:10:25.360><c> loop</c><00:10:25.540><c> and</c><00:10:25.780><c> that</c>

00:10:26.960 --> 00:10:26.970 align:start position:0%
going on so there's the loop and that
 

00:10:26.970 --> 00:10:29.970 align:start position:0%
going on so there's the loop and that
for<00:10:27.970><c> some</c><00:10:28.240><c> reason</c><00:10:28.270><c> didn't</c><00:10:29.200><c> equal</c><00:10:29.650><c> ten</c>

00:10:29.970 --> 00:10:29.980 align:start position:0%
for some reason didn't equal ten
 

00:10:29.980 --> 00:10:31.770 align:start position:0%
for some reason didn't equal ten
thousand<00:10:30.370><c> and</c><00:10:30.490><c> one</c><00:10:30.610><c> allocations</c><00:10:31.300><c> and</c><00:10:31.600><c> it's</c>

00:10:31.770 --> 00:10:31.780 align:start position:0%
thousand and one allocations and it's
 

00:10:31.780 --> 00:10:33.720 align:start position:0%
thousand and one allocations and it's
because<00:10:32.140><c> of</c><00:10:32.320><c> the</c><00:10:32.440><c> value</c><00:10:32.830><c> of</c><00:10:33.070><c> more</c>

00:10:33.720 --> 00:10:33.730 align:start position:0%
because of the value of more
 

00:10:33.730 --> 00:10:35.310 align:start position:0%
because of the value of more
particularly<00:10:34.210><c> because</c><00:10:34.390><c> of</c><00:10:34.540><c> this</c><00:10:34.720><c> caching</c>

00:10:35.310 --> 00:10:35.320 align:start position:0%
particularly because of this caching
 

00:10:35.320 --> 00:10:37.140 align:start position:0%
particularly because of this caching
logic<00:10:36.070><c> that</c><00:10:36.190><c> we</c><00:10:36.280><c> have</c><00:10:36.430><c> when</c><00:10:36.670><c> the</c><00:10:36.760><c> run</c><00:10:36.910><c> time</c>

00:10:37.140 --> 00:10:37.150 align:start position:0%
logic that we have when the run time
 

00:10:37.150 --> 00:10:39.500 align:start position:0%
logic that we have when the run time
starts<00:10:37.540><c> up</c><00:10:37.690><c> it</c><00:10:38.080><c> knows</c><00:10:38.470><c> that</c><00:10:38.920><c> most</c>

00:10:39.500 --> 00:10:39.510 align:start position:0%
starts up it knows that most
 

00:10:39.510 --> 00:10:41.430 align:start position:0%
starts up it knows that most
applications<00:10:40.510><c> are</c><00:10:40.660><c> going</c><00:10:40.690><c> to</c><00:10:40.990><c> need</c><00:10:41.200><c> some</c>

00:10:41.430 --> 00:10:41.440 align:start position:0%
applications are going to need some
 

00:10:41.440 --> 00:10:44.490 align:start position:0%
applications are going to need some
manager<00:10:41.740><c> values</c><00:10:42.100><c> and</c><00:10:42.280><c> so</c><00:10:42.430><c> it</c><00:10:42.580><c> caches</c><00:10:43.500><c> values</c>

00:10:44.490 --> 00:10:44.500 align:start position:0%
manager values and so it caches values
 

00:10:44.500 --> 00:10:48.570 align:start position:0%
manager values and so it caches values
from<00:10:44.860><c> negative</c><00:10:45.750><c> 128</c><00:10:46.750><c> up</c><00:10:47.050><c> to</c><00:10:47.290><c> 127</c><00:10:47.950><c> puts</c><00:10:48.370><c> them</c><00:10:48.490><c> in</c>

00:10:48.570 --> 00:10:48.580 align:start position:0%
from negative 128 up to 127 puts them in
 

00:10:48.580 --> 00:10:50.220 align:start position:0%
from negative 128 up to 127 puts them in
a<00:10:48.640><c> cache</c><00:10:48.880><c> and</c><00:10:49.120><c> now</c><00:10:49.360><c> when</c><00:10:49.540><c> everybody</c><00:10:49.900><c> anybody</c>

00:10:50.220 --> 00:10:50.230 align:start position:0%
a cache and now when everybody anybody
 

00:10:50.230 --> 00:10:52.560 align:start position:0%
a cache and now when everybody anybody
asks<00:10:50.830><c> for</c><00:10:50.890><c> a</c><00:10:51.010><c> value</c><00:10:51.220><c> of</c><00:10:51.370><c> for</c><00:10:52.090><c> one</c><00:10:52.240><c> of</c><00:10:52.360><c> those</c>

00:10:52.560 --> 00:10:52.570 align:start position:0%
asks for a value of for one of those
 

00:10:52.570 --> 00:10:54.630 align:start position:0%
asks for a value of for one of those
it's<00:10:52.870><c> just</c><00:10:53.080><c> gonna</c><00:10:53.230><c> return</c><00:10:53.410><c> that</c><00:10:53.800><c> it's</c><00:10:54.250><c> already</c>

00:10:54.630 --> 00:10:54.640 align:start position:0%
it's just gonna return that it's already
 

00:10:54.640 --> 00:10:56.370 align:start position:0%
it's just gonna return that it's already
been<00:10:54.760><c> created</c><00:10:55.030><c> as</c><00:10:55.360><c> not</c><00:10:55.600><c> integer</c><00:10:56.050><c> it's</c><00:10:56.230><c> not</c>

00:10:56.370 --> 00:10:56.380 align:start position:0%
been created as not integer it's not
 

00:10:56.380 --> 00:10:58.140 align:start position:0%
been created as not integer it's not
being<00:10:56.590><c> boxed</c><00:10:57.070><c> and</c><00:10:57.160><c> allocated</c><00:10:57.670><c> on</c><00:10:57.790><c> the</c><00:10:57.820><c> fly</c>

00:10:58.140 --> 00:10:58.150 align:start position:0%
being boxed and allocated on the fly
 

00:10:58.150 --> 00:11:00.090 align:start position:0%
being boxed and allocated on the fly
which<00:10:58.780><c> means</c><00:10:59.020><c> the</c><00:10:59.230><c> only</c><00:10:59.470><c> values</c><00:10:59.830><c> that</c><00:10:59.980><c> are</c>

00:11:00.090 --> 00:11:00.100 align:start position:0%
which means the only values that are
 

00:11:00.100 --> 00:11:02.010 align:start position:0%
which means the only values that are
going<00:11:00.580><c> to</c><00:11:00.670><c> be</c><00:11:00.760><c> allocator</c><00:11:01.240><c> are</c><00:11:01.450><c> outside</c><00:11:01.990><c> of</c>

00:11:02.010 --> 00:11:02.020 align:start position:0%
going to be allocator are outside of
 

00:11:02.020 --> 00:11:04.680 align:start position:0%
going to be allocator are outside of
that<00:11:02.170><c> region</c><00:11:02.440><c> which</c><00:11:03.220><c> turns</c><00:11:03.790><c> out</c><00:11:03.970><c> ten</c><00:11:04.270><c> thousand</c>

00:11:04.680 --> 00:11:04.690 align:start position:0%
that region which turns out ten thousand
 

00:11:04.690 --> 00:11:07.800 align:start position:0%
that region which turns out ten thousand
and<00:11:04.780><c> one</c><00:11:04.960><c> minus</c><00:11:05.790><c> 128</c><00:11:06.790><c> is</c><00:11:07.120><c> going</c><00:11:07.420><c> to</c><00:11:07.510><c> be</c><00:11:07.600><c> nine</c>

00:11:07.800 --> 00:11:07.810 align:start position:0%
and one minus 128 is going to be nine
 

00:11:07.810 --> 00:11:10.680 align:start position:0%
and one minus 128 is going to be nine
thousand<00:11:08.260><c> 873</c><00:11:09.220><c> has</c><00:11:09.640><c> nothing</c><00:11:10.120><c> to</c><00:11:10.150><c> do</c><00:11:10.360><c> with</c><00:11:10.390><c> this</c>

00:11:10.680 --> 00:11:10.690 align:start position:0%
thousand 873 has nothing to do with this
 

00:11:10.690 --> 00:11:14.190 align:start position:0%
thousand 873 has nothing to do with this
talk<00:11:10.930><c> I</c><00:11:11.200><c> thought</c><00:11:11.650><c> it</c><00:11:11.770><c> was</c><00:11:11.890><c> interesting</c><00:11:12.160><c> so</c><00:11:13.200><c> the</c>

00:11:14.190 --> 00:11:14.200 align:start position:0%
talk I thought it was interesting so the
 

00:11:14.200 --> 00:11:16.470 align:start position:0%
talk I thought it was interesting so the
one<00:11:14.410><c> that</c><00:11:14.560><c> we</c><00:11:14.650><c> care</c><00:11:15.220><c> about</c><00:11:15.370><c> are</c><00:11:15.790><c> the</c><00:11:16.030><c> capital</c><00:11:16.390><c> I</c>

00:11:16.470 --> 00:11:16.480 align:start position:0%
one that we care about are the capital I
 

00:11:16.480 --> 00:11:19.140 align:start position:0%
one that we care about are the capital I
integer<00:11:16.900><c> allocations</c><00:11:17.620><c> so</c><00:11:18.370><c> we're</c><00:11:19.000><c> going</c><00:11:19.090><c> to</c>

00:11:19.140 --> 00:11:19.150 align:start position:0%
integer allocations so we're going to
 

00:11:19.150 --> 00:11:20.700 align:start position:0%
integer allocations so we're going to
click<00:11:19.420><c> on</c><00:11:19.600><c> that</c><00:11:19.780><c> and</c><00:11:20.050><c> that</c><00:11:20.170><c> brings</c><00:11:20.200><c> up</c><00:11:20.590><c> another</c>

00:11:20.700 --> 00:11:20.710 align:start position:0%
click on that and that brings up another
 

00:11:20.710 --> 00:11:22.080 align:start position:0%
click on that and that brings up another
window<00:11:21.070><c> that</c><00:11:21.340><c> shows</c><00:11:21.580><c> each</c><00:11:21.850><c> of</c><00:11:22.000><c> those</c>

00:11:22.080 --> 00:11:22.090 align:start position:0%
window that shows each of those
 

00:11:22.090 --> 00:11:24.450 align:start position:0%
window that shows each of those
individual<00:11:22.750><c> allocations</c><00:11:23.500><c> when</c><00:11:24.010><c> they</c><00:11:24.160><c> happen</c>

00:11:24.450 --> 00:11:24.460 align:start position:0%
individual allocations when they happen
 

00:11:24.460 --> 00:11:26.070 align:start position:0%
individual allocations when they happen
in<00:11:24.550><c> what</c><00:11:24.760><c> was</c><00:11:24.910><c> going</c><00:11:24.940><c> on</c><00:11:25.330><c> we</c><00:11:25.540><c> can</c><00:11:25.690><c> click</c><00:11:25.900><c> on</c><00:11:26.020><c> one</c>

00:11:26.070 --> 00:11:26.080 align:start position:0%
in what was going on we can click on one
 

00:11:26.080 --> 00:11:27.840 align:start position:0%
in what was going on we can click on one
of<00:11:26.380><c> those</c><00:11:26.560><c> and</c><00:11:26.860><c> just</c><00:11:27.100><c> like</c><00:11:27.220><c> allocation</c>

00:11:27.840 --> 00:11:27.850 align:start position:0%
of those and just like allocation
 

00:11:27.850 --> 00:11:30.000 align:start position:0%
of those and just like allocation
tracker<00:11:27.970><c> it</c><00:11:28.390><c> pops</c><00:11:28.900><c> up</c><00:11:29.110><c> the</c><00:11:29.260><c> call</c><00:11:29.470><c> stack</c><00:11:29.770><c> and</c>

00:11:30.000 --> 00:11:30.010 align:start position:0%
tracker it pops up the call stack and
 

00:11:30.010 --> 00:11:32.100 align:start position:0%
tracker it pops up the call stack and
from<00:11:30.580><c> that</c><00:11:30.730><c> we</c><00:11:30.940><c> determined</c><00:11:31.540><c> that</c><00:11:31.600><c> in</c><00:11:31.840><c> fact</c>

00:11:32.100 --> 00:11:32.110 align:start position:0%
from that we determined that in fact
 

00:11:32.110 --> 00:11:33.960 align:start position:0%
from that we determined that in fact
that<00:11:32.320><c> was</c><00:11:32.500><c> being</c><00:11:32.710><c> allocated</c><00:11:33.130><c> because</c><00:11:33.640><c> of</c><00:11:33.910><c> the</c>

00:11:33.960 --> 00:11:33.970 align:start position:0%
that was being allocated because of the
 

00:11:33.970 --> 00:11:35.520 align:start position:0%
that was being allocated because of the
boxing<00:11:34.360><c> operation</c><00:11:34.870><c> that</c><00:11:35.020><c> was</c><00:11:35.110><c> happening</c><00:11:35.410><c> in</c>

00:11:35.520 --> 00:11:35.530 align:start position:0%
boxing operation that was happening in
 

00:11:35.530 --> 00:11:38.010 align:start position:0%
boxing operation that was happening in
that<00:11:35.620><c> tight</c><00:11:35.860><c> loop</c><00:11:36.600><c> let's</c><00:11:37.600><c> talk</c><00:11:37.810><c> about</c>

00:11:38.010 --> 00:11:38.020 align:start position:0%
that tight loop let's talk about
 

00:11:38.020 --> 00:11:41.020 align:start position:0%
that tight loop let's talk about
language<00:11:38.350><c> feature</c>

00:11:41.020 --> 00:11:41.030 align:start position:0%
 
 

00:11:41.030 --> 00:11:44.200 align:start position:0%
 
I<00:11:42.130><c> appreciate</c><00:11:43.130><c> this</c><00:11:43.310><c> thank</c><00:11:43.610><c> you</c><00:11:43.880><c> for</c><00:11:43.970><c> the</c>

00:11:44.200 --> 00:11:44.210 align:start position:0%
I appreciate this thank you for the
 

00:11:44.210 --> 00:11:46.680 align:start position:0%
I appreciate this thank you for the
cheers<00:11:44.540><c> but</c><00:11:44.840><c> maybe</c><00:11:45.530><c> you</c><00:11:45.650><c> wait</c><00:11:45.830><c> until</c><00:11:46.160><c> the</c><00:11:46.250><c> end</c>

00:11:46.680 --> 00:11:46.690 align:start position:0%
cheers but maybe you wait until the end
 

00:11:46.690 --> 00:11:49.750 align:start position:0%
cheers but maybe you wait until the end
do<00:11:47.690><c> you</c><00:11:47.750><c> mind</c><00:11:47.930><c> if</c><00:11:48.020><c> I</c><00:11:48.110><c> take</c><00:11:48.320><c> this</c><00:11:48.440><c> one</c><00:11:48.620><c> yeah</c><00:11:49.580><c> I</c><00:11:49.610><c> do</c>

00:11:49.750 --> 00:11:49.760 align:start position:0%
do you mind if I take this one yeah I do
 

00:11:49.760 --> 00:11:50.530 align:start position:0%
do you mind if I take this one yeah I do
actually

00:11:50.530 --> 00:11:50.540 align:start position:0%
actually
 

00:11:50.540 --> 00:11:53.050 align:start position:0%
actually
I<00:11:50.650><c> can</c><00:11:51.650><c> just</c><00:11:51.830><c> leave</c><00:11:52.010><c> if</c><00:11:52.130><c> you</c><00:11:52.250><c> want</c><00:11:52.520><c> anyway</c>

00:11:53.050 --> 00:11:53.060 align:start position:0%
I can just leave if you want anyway
 

00:11:53.060 --> 00:11:54.130 align:start position:0%
I can just leave if you want anyway
enums

00:11:54.130 --> 00:11:54.140 align:start position:0%
enums
 

00:11:54.140 --> 00:11:56.950 align:start position:0%
enums
your<00:11:54.650><c> favorite</c><00:11:54.980><c> topic</c><00:11:55.340><c> so</c><00:11:56.060><c> please</c><00:11:56.090><c> using</c><00:11:56.810><c> them</c>

00:11:56.950 --> 00:11:56.960 align:start position:0%
your favorite topic so please using them
 

00:11:56.960 --> 00:11:58.030 align:start position:0%
your favorite topic so please using them
but<00:11:57.140><c> we're</c><00:11:57.290><c> going</c><00:11:57.410><c> to</c><00:11:57.470><c> talk</c><00:11:57.620><c> about</c><00:11:57.650><c> them</c>

00:11:58.030 --> 00:11:58.040 align:start position:0%
but we're going to talk about them
 

00:11:58.040 --> 00:12:00.670 align:start position:0%
but we're going to talk about them
anyway<00:11:58.370><c> so</c><00:11:58.580><c> here's</c><00:11:59.450><c> an</c><00:11:59.570><c> enum</c><00:11:59.930><c> our</c><00:12:00.080><c> roads</c><00:12:00.350><c> all</c>

00:12:00.670 --> 00:12:00.680 align:start position:0%
anyway so here's an enum our roads all
 

00:12:00.680 --> 00:12:02.680 align:start position:0%
anyway so here's an enum our roads all
by<00:12:00.920><c> myself</c><00:12:01.100><c> as</c><00:12:01.460><c> well</c><00:12:01.640><c> called</c><00:12:02.090><c> blend</c><00:12:02.300><c> mode</c><00:12:02.480><c> we</c>

00:12:02.680 --> 00:12:02.690 align:start position:0%
by myself as well called blend mode we
 

00:12:02.690 --> 00:12:03.970 align:start position:0%
by myself as well called blend mode we
have<00:12:02.780><c> some</c><00:12:02.960><c> values</c><00:12:03.260><c> doesn't</c><00:12:03.650><c> really</c><00:12:03.770><c> matter</c>

00:12:03.970 --> 00:12:03.980 align:start position:0%
have some values doesn't really matter
 

00:12:03.980 --> 00:12:06.250 align:start position:0%
have some values doesn't really matter
what<00:12:04.190><c> they</c><00:12:04.340><c> are</c><00:12:04.370><c> in</c><00:12:04.970><c> here</c><00:12:05.330><c> I'm</c><00:12:05.540><c> how</c><00:12:05.900><c> I'm</c><00:12:06.050><c> using</c>

00:12:06.250 --> 00:12:06.260 align:start position:0%
what they are in here I'm how I'm using
 

00:12:06.260 --> 00:12:08.410 align:start position:0%
what they are in here I'm how I'm using
the<00:12:06.470><c> UNAM</c><00:12:06.710><c> I'm</c><00:12:06.920><c> using</c><00:12:07.160><c> a</c><00:12:07.370><c> when</c><00:12:07.640><c> statement</c><00:12:08.180><c> and</c>

00:12:08.410 --> 00:12:08.420 align:start position:0%
the UNAM I'm using a when statement and
 

00:12:08.420 --> 00:12:10.330 align:start position:0%
the UNAM I'm using a when statement and
effectively<00:12:09.410><c> the</c><00:12:09.590><c> equivalent</c><00:12:09.980><c> of</c><00:12:10.010><c> a</c><00:12:10.100><c> switch</c>

00:12:10.330 --> 00:12:10.340 align:start position:0%
effectively the equivalent of a switch
 

00:12:10.340 --> 00:12:12.730 align:start position:0%
effectively the equivalent of a switch
in<00:12:10.760><c> the</c><00:12:10.910><c> Java</c><00:12:11.150><c> programming</c><00:12:11.510><c> language</c><00:12:11.630><c> and</c><00:12:12.200><c> for</c>

00:12:12.730 --> 00:12:12.740 align:start position:0%
in the Java programming language and for
 

00:12:12.740 --> 00:12:14.260 align:start position:0%
in the Java programming language and for
every<00:12:12.890><c> value</c><00:12:13.100><c> of</c><00:12:13.160><c> genome</c><00:12:13.520><c> I</c><00:12:13.670><c> call</c><00:12:13.850><c> function</c>

00:12:14.260 --> 00:12:14.270 align:start position:0%
every value of genome I call function
 

00:12:14.270 --> 00:12:16.090 align:start position:0%
every value of genome I call function
that<00:12:14.450><c> doesn't</c><00:12:14.600><c> remember</c><00:12:14.900><c> what</c><00:12:15.170><c> we</c><00:12:15.320><c> do</c><00:12:15.500><c> what's</c>

00:12:16.090 --> 00:12:16.100 align:start position:0%
that doesn't remember what we do what's
 

00:12:16.100 --> 00:12:17.650 align:start position:0%
that doesn't remember what we do what's
interesting<00:12:16.340><c> is</c><00:12:16.730><c> what</c><00:12:16.910><c> happens</c><00:12:17.270><c> when</c><00:12:17.390><c> we</c><00:12:17.540><c> look</c>

00:12:17.650 --> 00:12:17.660 align:start position:0%
interesting is what happens when we look
 

00:12:17.660 --> 00:12:19.480 align:start position:0%
interesting is what happens when we look
at<00:12:17.780><c> the</c><00:12:17.930><c> jarred</c><00:12:18.230><c> byte</c><00:12:18.440><c> code</c><00:12:18.710><c> so</c><00:12:19.040><c> here's</c><00:12:19.310><c> what</c>

00:12:19.480 --> 00:12:19.490 align:start position:0%
at the jarred byte code so here's what
 

00:12:19.490 --> 00:12:22.630 align:start position:0%
at the jarred byte code so here's what
it<00:12:19.520><c> looks</c><00:12:19.730><c> like</c><00:12:20.680><c> the</c><00:12:21.680><c> first</c><00:12:21.830><c> thing</c><00:12:21.950><c> it</c><00:12:22.160><c> does</c><00:12:22.340><c> is</c>

00:12:22.630 --> 00:12:22.640 align:start position:0%
it looks like the first thing it does is
 

00:12:22.640 --> 00:12:25.030 align:start position:0%
it looks like the first thing it does is
called<00:12:22.970><c> this</c><00:12:23.150><c> this</c><00:12:23.780><c> gets</c><00:12:23.960><c> tagged</c><00:12:24.290><c> static</c><00:12:24.830><c> up</c>

00:12:25.030 --> 00:12:25.040 align:start position:0%
called this this gets tagged static up
 

00:12:25.040 --> 00:12:28.540 align:start position:0%
called this this gets tagged static up
code<00:12:25.340><c> it</c><00:12:25.910><c> accesses</c><00:12:26.420><c> a</c><00:12:27.160><c> interest</c><00:12:28.160><c> so</c><00:12:28.370><c> that's</c>

00:12:28.540 --> 00:12:28.550 align:start position:0%
code it accesses a interest so that's
 

00:12:28.550 --> 00:12:30.850 align:start position:0%
code it accesses a interest so that's
the<00:12:28.790><c> square</c><00:12:29.510><c> bracket</c><00:12:29.810><c> with</c><00:12:29.990><c> the</c><00:12:30.080><c> capital</c><00:12:30.440><c> I</c><00:12:30.620><c> at</c>

00:12:30.850 --> 00:12:30.860 align:start position:0%
the square bracket with the capital I at
 

00:12:30.860 --> 00:12:33.970 align:start position:0%
the square bracket with the capital I at
the<00:12:31.010><c> end</c><00:12:31.960><c> so</c><00:12:32.960><c> it's</c><00:12:33.050><c> a</c><00:12:33.170><c> field</c><00:12:33.380><c> in</c><00:12:33.650><c> a</c><00:12:33.740><c> class</c>

00:12:33.970 --> 00:12:33.980 align:start position:0%
the end so it's a field in a class
 

00:12:33.980 --> 00:12:36.850 align:start position:0%
the end so it's a field in a class
called<00:12:34.010><c> bling</c><00:12:34.490><c> link</c><00:12:34.760><c> $80</c><00:12:35.720><c> when</c><00:12:36.020><c> mappings</c><00:12:36.440><c> dot</c>

00:12:36.850 --> 00:12:36.860 align:start position:0%
called bling link $80 when mappings dot
 

00:12:36.860 --> 00:12:39.190 align:start position:0%
called bling link $80 when mappings dot
dollar<00:12:37.400><c> enum</c><00:12:37.820><c> switch</c><00:12:38.060><c> mapping</c><00:12:38.450><c> dollar</c><00:12:38.660><c> zero</c><00:12:38.720><c> I</c>

00:12:39.190 --> 00:12:39.200 align:start position:0%
dollar enum switch mapping dollar zero I
 

00:12:39.200 --> 00:12:41.710 align:start position:0%
dollar enum switch mapping dollar zero I
never<00:12:39.500><c> wrote</c><00:12:39.800><c> a</c><00:12:39.830><c> class</c><00:12:40.190><c> called</c><00:12:40.460><c> code</c><00:12:40.910><c> this</c><00:12:41.090><c> in</c>

00:12:41.710 --> 00:12:41.720 align:start position:0%
never wrote a class called code this in
 

00:12:41.720 --> 00:12:42.880 align:start position:0%
never wrote a class called code this in
my<00:12:41.870><c> code</c><00:12:42.080><c> but</c><00:12:42.230><c> there</c><00:12:42.440><c> it</c><00:12:42.590><c> is</c>

00:12:42.880 --> 00:12:42.890 align:start position:0%
my code but there it is
 

00:12:42.890 --> 00:12:44.440 align:start position:0%
my code but there it is
and<00:12:43.070><c> then</c><00:12:43.400><c> what's</c><00:12:43.580><c> interesting</c><00:12:43.730><c> is</c><00:12:44.090><c> after</c><00:12:44.360><c> it</c>

00:12:44.440 --> 00:12:44.450 align:start position:0%
and then what's interesting is after it
 

00:12:44.450 --> 00:12:46.720 align:start position:0%
and then what's interesting is after it
gets<00:12:44.660><c> disarray</c><00:12:45.140><c> it</c><00:12:45.650><c> invokes</c><00:12:46.070><c> the</c><00:12:46.220><c> ordinal</c>

00:12:46.720 --> 00:12:46.730 align:start position:0%
gets disarray it invokes the ordinal
 

00:12:46.730 --> 00:12:49.600 align:start position:0%
gets disarray it invokes the ordinal
method<00:12:47.210><c> on</c><00:12:47.420><c> the</c><00:12:47.870><c> in</c><00:12:47.990><c> value</c><00:12:48.440><c> itself</c><00:12:48.800><c> and</c><00:12:49.130><c> then</c>

00:12:49.600 --> 00:12:49.610 align:start position:0%
method on the in value itself and then
 

00:12:49.610 --> 00:12:52.180 align:start position:0%
method on the in value itself and then
it<00:12:49.790><c> does</c><00:12:49.940><c> an</c><00:12:50.060><c> eye</c><00:12:50.360><c> a</c><00:12:50.390><c> load</c><00:12:50.870><c> so</c><00:12:51.110><c> I</c><00:12:51.140><c> allowed</c><00:12:51.680><c> text</c>

00:12:52.180 --> 00:12:52.190 align:start position:0%
it does an eye a load so I allowed text
 

00:12:52.190 --> 00:12:54.280 align:start position:0%
it does an eye a load so I allowed text
the<00:12:52.310><c> output</c><00:12:52.640><c> of</c><00:12:52.670><c> the</c><00:12:52.910><c> ordinal</c><00:12:53.330><c> method</c><00:12:53.960><c> call</c>

00:12:54.280 --> 00:12:54.290 align:start position:0%
the output of the ordinal method call
 

00:12:54.290 --> 00:12:56.950 align:start position:0%
the output of the ordinal method call
and<00:12:54.589><c> then</c><00:12:55.400><c> use</c><00:12:55.550><c> that</c><00:12:55.580><c> as</c><00:12:55.940><c> an</c><00:12:56.060><c> index</c><00:12:56.390><c> in</c><00:12:56.690><c> the</c>

00:12:56.950 --> 00:12:56.960 align:start position:0%
and then use that as an index in the
 

00:12:56.960 --> 00:12:59.650 align:start position:0%
and then use that as an index in the
array<00:12:56.990><c> that</c><00:12:57.200><c> we</c><00:12:57.440><c> just</c><00:12:57.650><c> fetched</c><00:12:58.240><c> so</c><00:12:59.240><c> and</c>

00:12:59.650 --> 00:12:59.660 align:start position:0%
array that we just fetched so and
 

00:12:59.660 --> 00:13:01.300 align:start position:0%
array that we just fetched so and
finally<00:13:00.110><c> does</c><00:13:00.290><c> the</c><00:13:00.320><c> actual</c><00:13:00.830><c> switch</c><00:13:01.070><c> so</c><00:13:01.220><c> it</c>

00:13:01.300 --> 00:13:01.310 align:start position:0%
finally does the actual switch so it
 

00:13:01.310 --> 00:13:02.829 align:start position:0%
finally does the actual switch so it
doesn't<00:13:01.550><c> switch</c><00:13:01.730><c> on</c><00:13:01.880><c> the</c><00:13:02.000><c> enum</c><00:13:02.180><c> value</c><00:13:02.450><c> itself</c>

00:13:02.829 --> 00:13:02.839 align:start position:0%
doesn't switch on the enum value itself
 

00:13:02.839 --> 00:13:04.960 align:start position:0%
doesn't switch on the enum value itself
it<00:13:03.110><c> first</c><00:13:03.440><c> goes</c><00:13:03.650><c> through</c><00:13:03.890><c> another</c><00:13:04.220><c> array</c><00:13:04.700><c> and</c>

00:13:04.960 --> 00:13:04.970 align:start position:0%
it first goes through another array and
 

00:13:04.970 --> 00:13:06.640 align:start position:0%
it first goes through another array and
intermediate<00:13:05.450><c> array</c><00:13:05.750><c> and</c><00:13:06.200><c> we're</c><00:13:06.320><c> gonna</c><00:13:06.410><c> look</c>

00:13:06.640 --> 00:13:06.650 align:start position:0%
intermediate array and we're gonna look
 

00:13:06.650 --> 00:13:09.070 align:start position:0%
intermediate array and we're gonna look
at<00:13:06.890><c> what</c><00:13:07.100><c> this</c><00:13:07.250><c> already</c><00:13:07.460><c> looks</c><00:13:07.550><c> like</c><00:13:07.930><c> and</c><00:13:08.930><c> then</c>

00:13:09.070 --> 00:13:09.080 align:start position:0%
at what this already looks like and then
 

00:13:09.080 --> 00:13:10.450 align:start position:0%
at what this already looks like and then
that's<00:13:09.230><c> our</c><00:13:09.350><c> code</c><00:13:09.560><c> so</c><00:13:09.920><c> here's</c><00:13:10.160><c> what</c><00:13:10.310><c> the</c><00:13:10.430><c> code</c>

00:13:10.450 --> 00:13:10.460 align:start position:0%
that's our code so here's what the code
 

00:13:10.460 --> 00:13:12.579 align:start position:0%
that's our code so here's what the code
what<00:13:11.150><c> the</c><00:13:11.600><c> jury</c><00:13:11.750><c> could</c><00:13:11.990><c> looks</c><00:13:12.170><c> like</c><00:13:12.350><c> so</c><00:13:12.500><c> what</c>

00:13:12.579 --> 00:13:12.589 align:start position:0%
what the jury could looks like so what
 

00:13:12.589 --> 00:13:14.320 align:start position:0%
what the jury could looks like so what
is<00:13:12.740><c> interesting</c><00:13:13.520><c> here</c><00:13:13.700><c> is</c><00:13:13.760><c> that</c><00:13:13.790><c> this</c><00:13:14.030><c> is</c><00:13:14.210><c> not</c>

00:13:14.320 --> 00:13:14.330 align:start position:0%
is interesting here is that this is not
 

00:13:14.330 --> 00:13:16.720 align:start position:0%
is interesting here is that this is not
specific<00:13:14.780><c> to</c><00:13:14.810><c> cut</c><00:13:15.110><c> in</c><00:13:15.260><c> the</c><00:13:15.890><c> java</c><00:13:16.160><c> programming</c>

00:13:16.720 --> 00:13:16.730 align:start position:0%
specific to cut in the java programming
 

00:13:16.730 --> 00:13:18.370 align:start position:0%
specific to cut in the java programming
language<00:13:17.030><c> compiler</c><00:13:17.540><c> will</c><00:13:17.750><c> also</c><00:13:18.080><c> do</c><00:13:18.230><c> the</c><00:13:18.260><c> same</c>

00:13:18.370 --> 00:13:18.380 align:start position:0%
language compiler will also do the same
 

00:13:18.380 --> 00:13:20.350 align:start position:0%
language compiler will also do the same
thing<00:13:18.770><c> but</c><00:13:19.400><c> you</c><00:13:19.550><c> know</c><00:13:19.670><c> it's</c><00:13:20.150><c> still</c>

00:13:20.350 --> 00:13:20.360 align:start position:0%
thing but you know it's still
 

00:13:20.360 --> 00:13:21.820 align:start position:0%
thing but you know it's still
interesting<00:13:20.510><c> to</c><00:13:20.780><c> look</c><00:13:20.870><c> at</c><00:13:21.020><c> it</c><00:13:21.140><c> so</c><00:13:21.560><c> the</c><00:13:21.680><c> code</c>

00:13:21.820 --> 00:13:21.830 align:start position:0%
interesting to look at it so the code
 

00:13:21.830 --> 00:13:23.200 align:start position:0%
interesting to look at it so the code
that<00:13:21.860><c> gets</c><00:13:22.100><c> generated</c><00:13:22.160><c> is</c><00:13:22.640><c> this</c><00:13:22.820><c> there's</c><00:13:23.089><c> this</c>

00:13:23.200 --> 00:13:23.210 align:start position:0%
that gets generated is this there's this
 

00:13:23.210 --> 00:13:25.390 align:start position:0%
that gets generated is this there's this
special<00:13:23.420><c> mapping</c><00:13:23.960><c> class</c><00:13:24.140><c> that</c><00:13:24.800><c> contains</c><00:13:25.190><c> an</c>

00:13:25.390 --> 00:13:25.400 align:start position:0%
special mapping class that contains an
 

00:13:25.400 --> 00:13:27.640 align:start position:0%
special mapping class that contains an
array<00:13:25.580><c> that</c><00:13:26.030><c> has</c><00:13:26.150><c> the</c><00:13:26.240><c> same</c><00:13:26.420><c> length</c><00:13:26.720><c> as</c><00:13:26.930><c> the</c>

00:13:27.640 --> 00:13:27.650 align:start position:0%
array that has the same length as the
 

00:13:27.650 --> 00:13:29.410 align:start position:0%
array that has the same length as the
number<00:13:28.160><c> of</c><00:13:28.190><c> enums</c><00:13:28.610><c> that</c><00:13:28.790><c> you're</c><00:13:29.000><c> Indian</c>

00:13:29.410 --> 00:13:29.420 align:start position:0%
number of enums that you're Indian
 

00:13:29.420 --> 00:13:30.579 align:start position:0%
number of enums that you're Indian
values<00:13:29.720><c> that</c><00:13:29.839><c> we</c><00:13:29.990><c> have</c><00:13:30.080><c> in</c><00:13:30.110><c> the</c><00:13:30.350><c> ingham</c>

00:13:30.579 --> 00:13:30.589 align:start position:0%
values that we have in the ingham
 

00:13:30.589 --> 00:13:32.290 align:start position:0%
values that we have in the ingham
classic<00:13:30.950><c> to</c><00:13:31.040><c> declare</c><00:13:31.400><c> and</c><00:13:31.610><c> then</c><00:13:32.120><c> in</c><00:13:32.240><c> the</c>

00:13:32.290 --> 00:13:32.300 align:start position:0%
classic to declare and then in the
 

00:13:32.300 --> 00:13:35.590 align:start position:0%
classic to declare and then in the
static<00:13:32.660><c> initialization</c><00:13:33.050><c> code</c><00:13:33.740><c> this</c><00:13:34.520><c> array</c><00:13:35.420><c> is</c>

00:13:35.590 --> 00:13:35.600 align:start position:0%
static initialization code this array is
 

00:13:35.600 --> 00:13:37.840 align:start position:0%
static initialization code this array is
populated<00:13:36.230><c> with</c><00:13:36.560><c> the</c><00:13:36.710><c> values</c><00:13:37.010><c> of</c><00:13:37.160><c> genomes</c><00:13:37.580><c> and</c>

00:13:37.840 --> 00:13:37.850 align:start position:0%
populated with the values of genomes and
 

00:13:37.850 --> 00:13:39.820 align:start position:0%
populated with the values of genomes and
some<00:13:38.210><c> special</c><00:13:38.570><c> constants</c><00:13:39.290><c> generated</c><00:13:39.710><c> by</c><00:13:39.770><c> the</c>

00:13:39.820 --> 00:13:39.830 align:start position:0%
some special constants generated by the
 

00:13:39.830 --> 00:13:43.150 align:start position:0%
some special constants generated by the
compiler<00:13:40.990><c> so</c><00:13:41.990><c> what</c><00:13:42.380><c> happens</c><00:13:42.650><c> if</c><00:13:42.770><c> we</c><00:13:42.890><c> create</c>

00:13:43.150 --> 00:13:43.160 align:start position:0%
compiler so what happens if we create
 

00:13:43.160 --> 00:13:44.740 align:start position:0%
compiler so what happens if we create
another<00:13:43.550><c> method</c><00:13:43.790><c> in</c><00:13:44.150><c> our</c><00:13:44.240><c> code</c><00:13:44.480><c> that</c><00:13:44.630><c> does</c>

00:13:44.740 --> 00:13:44.750 align:start position:0%
another method in our code that does
 

00:13:44.750 --> 00:13:47.800 align:start position:0%
another method in our code that does
another<00:13:45.050><c> when</c><00:13:45.800><c> on</c><00:13:46.070><c> the</c><00:13:46.490><c> enum</c><00:13:46.760><c> so</c><00:13:47.180><c> we</c><00:13:47.330><c> do</c><00:13:47.480><c> a</c><00:13:47.510><c> when</c>

00:13:47.800 --> 00:13:47.810 align:start position:0%
another when on the enum so we do a when
 

00:13:47.810 --> 00:13:49.870 align:start position:0%
another when on the enum so we do a when
in<00:13:47.990><c> the</c><00:13:48.080><c> same</c><00:13:48.260><c> order</c><00:13:48.500><c> we</c><00:13:48.530><c> we</c><00:13:49.100><c> switch</c><00:13:49.339><c> over</c><00:13:49.550><c> all</c>

00:13:49.870 --> 00:13:49.880 align:start position:0%
in the same order we we switch over all
 

00:13:49.880 --> 00:13:50.230 align:start position:0%
in the same order we we switch over all
the

00:13:50.230 --> 00:13:50.240 align:start position:0%
the
 

00:13:50.240 --> 00:13:52.299 align:start position:0%
the
of<00:13:50.449><c> Jinan</c><00:13:50.809><c> if</c><00:13:51.259><c> we</c><00:13:51.470><c> go</c><00:13:51.619><c> back</c><00:13:51.769><c> to</c><00:13:51.800><c> the</c><00:13:52.009><c> giant</c>

00:13:52.299 --> 00:13:52.309 align:start position:0%
of Jinan if we go back to the giant
 

00:13:52.309 --> 00:13:53.739 align:start position:0%
of Jinan if we go back to the giant
class<00:13:52.490><c> we</c><00:13:52.670><c> can</c><00:13:52.759><c> see</c><00:13:52.939><c> there's</c><00:13:53.089><c> a</c><00:13:53.149><c> second</c><00:13:53.569><c> array</c>

00:13:53.739 --> 00:13:53.749 align:start position:0%
class we can see there's a second array
 

00:13:53.749 --> 00:13:55.780 align:start position:0%
class we can see there's a second array
that<00:13:53.899><c> was</c><00:13:53.990><c> generated</c><00:13:54.499><c> and</c><00:13:54.589><c> also</c><00:13:55.279><c> populated</c>

00:13:55.780 --> 00:13:55.790 align:start position:0%
that was generated and also populated
 

00:13:55.790 --> 00:13:57.519 align:start position:0%
that was generated and also populated
with<00:13:56.240><c> enum</c><00:13:56.569><c> values</c><00:13:56.929><c> and</c><00:13:57.199><c> some</c><00:13:57.379><c> magic</c>

00:13:57.519 --> 00:13:57.529 align:start position:0%
with enum values and some magic
 

00:13:57.529 --> 00:13:59.439 align:start position:0%
with enum values and some magic
constants<00:13:58.040><c> by</c><00:13:58.160><c> the</c><00:13:58.220><c> compiler</c><00:13:58.519><c> and</c><00:13:58.999><c> actually</c>

00:13:59.439 --> 00:13:59.449 align:start position:0%
constants by the compiler and actually
 

00:13:59.449 --> 00:14:01.389 align:start position:0%
constants by the compiler and actually
you<00:13:59.509><c> can</c><00:13:59.660><c> see</c><00:13:59.959><c> that</c><00:14:00.170><c> those</c><00:14:00.559><c> two</c><00:14:00.589><c> arrays</c><00:14:01.189><c> are</c>

00:14:01.389 --> 00:14:01.399 align:start position:0%
you can see that those two arrays are
 

00:14:01.399 --> 00:14:02.799 align:start position:0%
you can see that those two arrays are
exactly<00:14:01.879><c> the</c><00:14:02.059><c> same</c><00:14:02.089><c> they</c><00:14:02.449><c> are</c><00:14:02.480><c> the</c><00:14:02.600><c> same</c>

00:14:02.799 --> 00:14:02.809 align:start position:0%
exactly the same they are the same
 

00:14:02.809 --> 00:14:04.509 align:start position:0%
exactly the same they are the same
length<00:14:03.019><c> and</c><00:14:03.230><c> they</c><00:14:03.589><c> contain</c><00:14:03.860><c> exactly</c><00:14:04.249><c> the</c><00:14:04.399><c> same</c>

00:14:04.509 --> 00:14:04.519 align:start position:0%
length and they contain exactly the same
 

00:14:04.519 --> 00:14:07.869 align:start position:0%
length and they contain exactly the same
mappings<00:14:05.769><c> but</c><00:14:06.769><c> if</c><00:14:06.889><c> we</c><00:14:07.040><c> generate</c><00:14:07.309><c> if</c><00:14:07.519><c> we</c><00:14:07.699><c> used</c>

00:14:07.869 --> 00:14:07.879 align:start position:0%
mappings but if we generate if we used
 

00:14:07.879 --> 00:14:10.119 align:start position:0%
mappings but if we generate if we used
in<00:14:08.059><c> once</c><00:14:08.629><c> again</c><00:14:08.839><c> in</c><00:14:09.110><c> a</c><00:14:09.199><c> when</c><00:14:09.410><c> and</c><00:14:09.679><c> this</c><00:14:09.800><c> time</c><00:14:09.980><c> we</c>

00:14:10.119 --> 00:14:10.129 align:start position:0%
in once again in a when and this time we
 

00:14:10.129 --> 00:14:12.160 align:start position:0%
in once again in a when and this time we
used<00:14:10.369><c> we</c><00:14:10.610><c> declare</c><00:14:10.999><c> the</c><00:14:11.209><c> enum</c><00:14:11.749><c> values</c><00:14:11.990><c> in</c><00:14:12.110><c> a</c>

00:14:12.160 --> 00:14:12.170 align:start position:0%
used we declare the enum values in a
 

00:14:12.170 --> 00:14:13.660 align:start position:0%
used we declare the enum values in a
different<00:14:12.499><c> order</c><00:14:12.649><c> and</c><00:14:13.249><c> we</c><00:14:13.339><c> look</c><00:14:13.459><c> at</c><00:14:13.579><c> the</c>

00:14:13.660 --> 00:14:13.670 align:start position:0%
different order and we look at the
 

00:14:13.670 --> 00:14:15.429 align:start position:0%
different order and we look at the
generate<00:14:13.939><c> code</c><00:14:13.970><c> we</c><00:14:14.540><c> have</c><00:14:14.660><c> a</c><00:14:14.689><c> third</c><00:14:14.959><c> array</c><00:14:15.230><c> as</c>

00:14:15.429 --> 00:14:15.439 align:start position:0%
generate code we have a third array as
 

00:14:15.439 --> 00:14:17.499 align:start position:0%
generate code we have a third array as
expected<00:14:15.920><c> also</c><00:14:16.279><c> the</c><00:14:16.490><c> same</c><00:14:16.670><c> length</c><00:14:16.879><c> but</c><00:14:17.420><c> the</c>

00:14:17.499 --> 00:14:17.509 align:start position:0%
expected also the same length but the
 

00:14:17.509 --> 00:14:20.319 align:start position:0%
expected also the same length but the
mappings<00:14:17.869><c> are</c><00:14:17.990><c> different</c><00:14:18.439><c> I</c><00:14:19.279><c> believe</c><00:14:20.149><c> the</c>

00:14:20.319 --> 00:14:20.329 align:start position:0%
mappings are different I believe the
 

00:14:20.329 --> 00:14:22.269 align:start position:0%
mappings are different I believe the
reason<00:14:20.509><c> the</c><00:14:20.869><c> compilers</c><00:14:21.290><c> do</c><00:14:21.499><c> this</c><00:14:21.679><c> is</c><00:14:21.920><c> that</c><00:14:22.100><c> if</c>

00:14:22.269 --> 00:14:22.279 align:start position:0%
reason the compilers do this is that if
 

00:14:22.279 --> 00:14:25.179 align:start position:0%
reason the compilers do this is that if
you<00:14:22.399><c> change</c><00:14:22.699><c> the</c><00:14:23.209><c> enum</c><00:14:23.809><c> the</c><00:14:24.230><c> code</c><00:14:24.499><c> that</c><00:14:24.800><c> that</c>

00:14:25.179 --> 00:14:25.189 align:start position:0%
you change the enum the code that that
 

00:14:25.189 --> 00:14:26.499 align:start position:0%
you change the enum the code that that
was<00:14:25.309><c> compiled</c><00:14:25.670><c> before</c><00:14:25.819><c> with</c><00:14:26.179><c> the</c><00:14:26.269><c> old</c><00:14:26.449><c> version</c>

00:14:26.499 --> 00:14:26.509 align:start position:0%
was compiled before with the old version
 

00:14:26.509 --> 00:14:28.720 align:start position:0%
was compiled before with the old version
of<00:14:26.839><c> genome</c><00:14:27.170><c> will</c><00:14:27.470><c> still</c><00:14:27.740><c> work</c><00:14:27.980><c> so</c><00:14:28.189><c> they</c><00:14:28.550><c> need</c>

00:14:28.720 --> 00:14:28.730 align:start position:0%
of genome will still work so they need
 

00:14:28.730 --> 00:14:29.559 align:start position:0%
of genome will still work so they need
this<00:14:28.879><c> indirection</c>

00:14:29.559 --> 00:14:29.569 align:start position:0%
this indirection
 

00:14:29.569 --> 00:14:31.150 align:start position:0%
this indirection
but<00:14:30.050><c> what</c><00:14:30.319><c> becomes</c><00:14:30.619><c> interesting</c><00:14:31.069><c> is</c>

00:14:31.150 --> 00:14:31.160 align:start position:0%
but what becomes interesting is
 

00:14:31.160 --> 00:14:32.559 align:start position:0%
but what becomes interesting is
obviously<00:14:31.670><c> most</c><00:14:32.029><c> of</c><00:14:32.119><c> the</c><00:14:32.209><c> time</c><00:14:32.360><c> you</c><00:14:32.480><c> will</c>

00:14:32.559 --> 00:14:32.569 align:start position:0%
obviously most of the time you will
 

00:14:32.569 --> 00:14:34.449 align:start position:0%
obviously most of the time you will
never<00:14:32.779><c> need</c><00:14:33.019><c> to</c><00:14:33.050><c> care</c><00:14:33.350><c> about</c><00:14:33.379><c> this</c><00:14:33.740><c> if</c><00:14:34.279><c> you</c>

00:14:34.449 --> 00:14:34.459 align:start position:0%
never need to care about this if you
 

00:14:34.459 --> 00:14:36.340 align:start position:0%
never need to care about this if you
have<00:14:34.579><c> a</c><00:14:34.610><c> lot</c><00:14:34.939><c> of</c><00:14:35.119><c> wounds</c><00:14:35.509><c> on</c><00:14:35.629><c> enums</c><00:14:36.079><c> in</c>

00:14:36.340 --> 00:14:36.350 align:start position:0%
have a lot of wounds on enums in
 

00:14:36.350 --> 00:14:38.079 align:start position:0%
have a lot of wounds on enums in
performance-critical<00:14:36.980><c> code</c><00:14:37.550><c> you're</c><00:14:37.970><c> gonna</c>

00:14:38.079 --> 00:14:38.089 align:start position:0%
performance-critical code you're gonna
 

00:14:38.089 --> 00:14:39.939 align:start position:0%
performance-critical code you're gonna
have<00:14:38.300><c> extra</c><00:14:38.600><c> code</c><00:14:38.929><c> that</c><00:14:39.079><c> gets</c><00:14:39.259><c> initialized</c>

00:14:39.939 --> 00:14:39.949 align:start position:0%
have extra code that gets initialized
 

00:14:39.949 --> 00:14:42.579 align:start position:0%
have extra code that gets initialized
that<00:14:40.730><c> runs</c><00:14:41.029><c> at</c><00:14:41.149><c> initialization</c><00:14:41.929><c> time</c><00:14:42.110><c> and</c><00:14:42.410><c> you</c>

00:14:42.579 --> 00:14:42.589 align:start position:0%
that runs at initialization time and you
 

00:14:42.589 --> 00:14:44.679 align:start position:0%
that runs at initialization time and you
have<00:14:42.679><c> this</c><00:14:42.769><c> extra</c><00:14:43.160><c> help</c><00:14:43.339><c> in</c><00:14:43.519><c> memory</c><00:14:43.819><c> but</c><00:14:44.300><c> most</c>

00:14:44.679 --> 00:14:44.689 align:start position:0%
have this extra help in memory but most
 

00:14:44.689 --> 00:14:45.999 align:start position:0%
have this extra help in memory but most
of<00:14:44.779><c> the</c><00:14:44.869><c> time</c><00:14:44.990><c> you</c><00:14:45.230><c> don't</c><00:14:45.439><c> need</c><00:14:45.619><c> to</c><00:14:45.769><c> care</c><00:14:45.980><c> about</c>

00:14:45.999 --> 00:14:46.009 align:start position:0%
of the time you don't need to care about
 

00:14:46.009 --> 00:14:47.850 align:start position:0%
of the time you don't need to care about
this<00:14:46.369><c> usiness</c>

00:14:47.850 --> 00:14:47.860 align:start position:0%
this usiness
 

00:14:47.860 --> 00:14:50.530 align:start position:0%
this usiness
all<00:14:48.860><c> right</c><00:14:48.980><c> let's</c><00:14:49.429><c> talk</c><00:14:49.550><c> about</c><00:14:49.610><c> laziness</c><00:14:50.149><c> I</c>

00:14:50.530 --> 00:14:50.540 align:start position:0%
all right let's talk about laziness I
 

00:14:50.540 --> 00:14:52.749 align:start position:0%
all right let's talk about laziness I
know<00:14:50.720><c> a</c><00:14:50.749><c> lot</c><00:14:50.990><c> about</c><00:14:51.019><c> this</c><00:14:51.410><c> very</c><00:14:52.399><c> common</c>

00:14:52.749 --> 00:14:52.759 align:start position:0%
know a lot about this very common
 

00:14:52.759 --> 00:14:55.359 align:start position:0%
know a lot about this very common
pattern<00:14:53.240><c> in</c><00:14:53.389><c> software</c><00:14:53.749><c> to</c><00:14:53.959><c> say</c><00:14:54.139><c> I</c><00:14:54.439><c> may</c><00:14:54.980><c> need</c><00:14:55.189><c> to</c>

00:14:55.359 --> 00:14:55.369 align:start position:0%
pattern in software to say I may need to
 

00:14:55.369 --> 00:14:57.069 align:start position:0%
pattern in software to say I may need to
allocate<00:14:55.790><c> this</c><00:14:55.910><c> thing</c><00:14:56.209><c> but</c><00:14:56.480><c> it's</c><00:14:56.629><c> gonna</c><00:14:56.749><c> cause</c>

00:14:57.069 --> 00:14:57.079 align:start position:0%
allocate this thing but it's gonna cause
 

00:14:57.079 --> 00:14:58.689 align:start position:0%
allocate this thing but it's gonna cause
a<00:14:57.110><c> lot</c><00:14:57.290><c> of</c><00:14:57.559><c> work</c><00:14:57.709><c> and</c><00:14:57.980><c> maybe</c><00:14:58.040><c> I</c><00:14:58.189><c> don't</c><00:14:58.309><c> want</c>

00:14:58.689 --> 00:14:58.699 align:start position:0%
a lot of work and maybe I don't want
 

00:14:58.699 --> 00:15:00.340 align:start position:0%
a lot of work and maybe I don't want
those<00:14:58.819><c> allocations</c><00:14:59.540><c> in</c><00:14:59.749><c> the</c><00:14:59.779><c> background</c><00:15:00.199><c> work</c>

00:15:00.340 --> 00:15:00.350 align:start position:0%
those allocations in the background work
 

00:15:00.350 --> 00:15:02.530 align:start position:0%
those allocations in the background work
to<00:15:00.529><c> to</c><00:15:01.069><c> happen</c><00:15:01.429><c> to</c><00:15:01.519><c> do</c><00:15:01.670><c> that</c><00:15:01.879><c> because</c><00:15:02.089><c> maybe</c>

00:15:02.530 --> 00:15:02.540 align:start position:0%
to to happen to do that because maybe
 

00:15:02.540 --> 00:15:04.840 align:start position:0%
to to happen to do that because maybe
the<00:15:03.110><c> code</c><00:15:03.379><c> won't</c><00:15:03.649><c> need</c><00:15:03.860><c> it</c><00:15:03.889><c> so</c><00:15:04.189><c> we'll</c><00:15:04.399><c> we'll</c><00:15:04.670><c> do</c>

00:15:04.840 --> 00:15:04.850 align:start position:0%
the code won't need it so we'll we'll do
 

00:15:04.850 --> 00:15:06.220 align:start position:0%
the code won't need it so we'll we'll do
it<00:15:04.999><c> lazily</c><00:15:05.299><c> we'll</c><00:15:05.569><c> do</c><00:15:05.689><c> it</c><00:15:05.809><c> sometime</c><00:15:06.199><c> later</c>

00:15:06.220 --> 00:15:06.230 align:start position:0%
it lazily we'll do it sometime later
 

00:15:06.230 --> 00:15:09.609 align:start position:0%
it lazily we'll do it sometime later
right<00:15:07.160><c> so</c><00:15:07.449><c> manual</c><00:15:08.449><c> approach</c><00:15:08.600><c> looks</c><00:15:09.019><c> like</c><00:15:09.230><c> this</c>

00:15:09.609 --> 00:15:09.619 align:start position:0%
right so manual approach looks like this
 

00:15:09.619 --> 00:15:12.639 align:start position:0%
right so manual approach looks like this
so<00:15:10.240><c> caveat</c><00:15:11.240><c> really</c><00:15:11.720><c> stupid</c><00:15:12.049><c> example</c><00:15:12.319><c> nobody</c>

00:15:12.639 --> 00:15:12.649 align:start position:0%
so caveat really stupid example nobody
 

00:15:12.649 --> 00:15:14.169 align:start position:0%
so caveat really stupid example nobody
should<00:15:12.949><c> ever</c><00:15:12.980><c> do</c><00:15:13.369><c> this</c><00:15:13.579><c> just</c><00:15:13.850><c> to</c><00:15:13.910><c> avoid</c>

00:15:14.169 --> 00:15:14.179 align:start position:0%
should ever do this just to avoid
 

00:15:14.179 --> 00:15:16.150 align:start position:0%
should ever do this just to avoid
allocating<00:15:14.480><c> and</c><00:15:15.139><c> no</c><00:15:15.410><c> matter</c><00:15:15.559><c> how</c><00:15:15.920><c> it's</c>

00:15:16.150 --> 00:15:16.160 align:start position:0%
allocating and no matter how it's
 

00:15:16.160 --> 00:15:17.980 align:start position:0%
allocating and no matter how it's
implemented<00:15:16.519><c> on</c><00:15:16.759><c> a</c><00:15:16.790><c> very</c><00:15:17.089><c> stupid</c><00:15:17.389><c> example</c><00:15:17.869><c> it</c>

00:15:17.980 --> 00:15:17.990 align:start position:0%
implemented on a very stupid example it
 

00:15:17.990 --> 00:15:19.960 align:start position:0%
implemented on a very stupid example it
is<00:15:18.079><c> a</c><00:15:18.110><c> very</c><00:15:18.410><c> stupid</c><00:15:18.619><c> example</c><00:15:19.040><c> there</c><00:15:19.549><c> is</c><00:15:19.699><c> a</c><00:15:19.730><c> very</c>

00:15:19.960 --> 00:15:19.970 align:start position:0%
is a very stupid example there is a very
 

00:15:19.970 --> 00:15:22.269 align:start position:0%
is a very stupid example there is a very
real<00:15:20.209><c> example</c><00:15:20.420><c> that</c><00:15:20.929><c> is</c><00:15:21.079><c> almost</c><00:15:21.679><c> as</c><00:15:21.920><c> stupid</c>

00:15:22.269 --> 00:15:22.279 align:start position:0%
real example that is almost as stupid
 

00:15:22.279 --> 00:15:24.639 align:start position:0%
real example that is almost as stupid
which<00:15:22.490><c> is</c><00:15:22.790><c> code</c><00:15:23.420><c> that</c><00:15:23.569><c> we</c><00:15:23.660><c> actually</c><00:15:24.139><c> saw</c><00:15:24.350><c> which</c>

00:15:24.639 --> 00:15:24.649 align:start position:0%
which is code that we actually saw which
 

00:15:24.649 --> 00:15:27.369 align:start position:0%
which is code that we actually saw which
I<00:15:24.769><c> which</c><00:15:25.249><c> did</c><00:15:25.519><c> lazy</c><00:15:25.759><c> allocation</c><00:15:26.689><c> for</c><00:15:26.959><c> a</c><00:15:26.990><c> rect</c>

00:15:27.369 --> 00:15:27.379 align:start position:0%
I which did lazy allocation for a rect
 

00:15:27.379 --> 00:15:30.309 align:start position:0%
I which did lazy allocation for a rect
object<00:15:27.529><c> which</c><00:15:28.309><c> is</c><00:15:28.459><c> just</c><00:15:28.819><c> four</c><00:15:29.149><c> times</c><00:15:29.420><c> less</c>

00:15:30.309 --> 00:15:30.319 align:start position:0%
object which is just four times less
 

00:15:30.319 --> 00:15:33.129 align:start position:0%
object which is just four times less
stupid<00:15:30.619><c> than</c><00:15:30.949><c> this</c><00:15:31.129><c> right</c><00:15:31.730><c> so</c><00:15:32.329><c> allocating</c><00:15:32.959><c> for</c>

00:15:33.129 --> 00:15:33.139 align:start position:0%
stupid than this right so allocating for
 

00:15:33.139 --> 00:15:35.049 align:start position:0%
stupid than this right so allocating for
integers<00:15:33.559><c> but</c><00:15:33.769><c> for</c><00:15:34.009><c> some</c><00:15:34.129><c> reason</c><00:15:34.429><c> they</c><00:15:34.790><c> wanted</c>

00:15:35.049 --> 00:15:35.059 align:start position:0%
integers but for some reason they wanted
 

00:15:35.059 --> 00:15:36.939 align:start position:0%
integers but for some reason they wanted
to<00:15:35.209><c> do</c><00:15:35.299><c> it</c><00:15:35.449><c> lazily</c><00:15:35.809><c> because</c><00:15:36.199><c> why</c><00:15:36.379><c> allocate</c><00:15:36.829><c> if</c>

00:15:36.939 --> 00:15:36.949 align:start position:0%
to do it lazily because why allocate if
 

00:15:36.949 --> 00:15:39.069 align:start position:0%
to do it lazily because why allocate if
you<00:15:37.069><c> don't</c><00:15:37.249><c> need</c><00:15:37.399><c> to</c><00:15:37.459><c> write</c><00:15:37.999><c> so</c><00:15:38.600><c> bear</c><00:15:38.839><c> with</c><00:15:38.869><c> me</c>

00:15:39.069 --> 00:15:39.079 align:start position:0%
you don't need to write so bear with me
 

00:15:39.079 --> 00:15:41.499 align:start position:0%
you don't need to write so bear with me
so<00:15:39.769><c> we</c><00:15:40.160><c> have</c><00:15:40.369><c> this</c><00:15:40.490><c> inch</c><00:15:40.759><c> we're</c><00:15:41.119><c> gonna</c><00:15:41.209><c> set</c><00:15:41.480><c> it</c>

00:15:41.499 --> 00:15:41.509 align:start position:0%
so we have this inch we're gonna set it
 

00:15:41.509 --> 00:15:44.769 align:start position:0%
so we have this inch we're gonna set it
equal<00:15:41.929><c> to</c><00:15:42.410><c> 573</c><00:15:43.369><c> but</c><00:15:43.579><c> maybe</c><00:15:43.790><c> nobody's</c><00:15:44.660><c> gonna</c>

00:15:44.769 --> 00:15:44.779 align:start position:0%
equal to 573 but maybe nobody's gonna
 

00:15:44.779 --> 00:15:46.569 align:start position:0%
equal to 573 but maybe nobody's gonna
need<00:15:45.079><c> this</c><00:15:45.230><c> so</c><00:15:45.499><c> we're</c><00:15:45.889><c> gonna</c><00:15:46.009><c> make</c><00:15:46.220><c> it</c><00:15:46.369><c> lazy</c>

00:15:46.569 --> 00:15:46.579 align:start position:0%
need this so we're gonna make it lazy
 

00:15:46.579 --> 00:15:47.919 align:start position:0%
need this so we're gonna make it lazy
instead<00:15:47.059><c> so</c><00:15:47.209><c> we're</c><00:15:47.299><c> gonna</c><00:15:47.420><c> have</c><00:15:47.629><c> a</c><00:15:47.660><c> private</c>

00:15:47.919 --> 00:15:47.929 align:start position:0%
instead so we're gonna have a private
 

00:15:47.929 --> 00:15:50.199 align:start position:0%
instead so we're gonna have a private
member<00:15:48.410><c> variable</c><00:15:48.860><c> that's</c><00:15:49.220><c> knowable</c><00:15:49.699><c> now</c><00:15:49.970><c> part</c>

00:15:50.199 --> 00:15:50.209 align:start position:0%
member variable that's knowable now part
 

00:15:50.209 --> 00:15:51.730 align:start position:0%
member variable that's knowable now part
of<00:15:50.269><c> the</c><00:15:50.329><c> problem</c><00:15:50.629><c> here</c><00:15:50.809><c> is</c><00:15:50.990><c> we</c><00:15:51.199><c> know</c><00:15:51.379><c> from</c><00:15:51.559><c> the</c>

00:15:51.730 --> 00:15:51.740 align:start position:0%
of the problem here is we know from the
 

00:15:51.740 --> 00:15:53.650 align:start position:0%
of the problem here is we know from the
earlier<00:15:52.069><c> example</c><00:15:52.579><c> is</c><00:15:52.699><c> well</c><00:15:53.240><c> now</c><00:15:53.449><c> we</c><00:15:53.509><c> have</c>

00:15:53.650 --> 00:15:53.660 align:start position:0%
earlier example is well now we have
 

00:15:53.660 --> 00:15:54.789 align:start position:0%
earlier example is well now we have
something<00:15:54.079><c> that</c><00:15:54.350><c> could</c><00:15:54.529><c> have</c><00:15:54.679><c> been</c><00:15:54.709><c> a</c>

00:15:54.789 --> 00:15:54.799 align:start position:0%
something that could have been a
 

00:15:54.799 --> 00:15:56.679 align:start position:0%
something that could have been a
primitive<00:15:55.309><c> but</c><00:15:55.759><c> now</c><00:15:55.939><c> all</c><00:15:56.179><c> of</c><00:15:56.209><c> a</c><00:15:56.329><c> sudden</c><00:15:56.360><c> we've</c>

00:15:56.679 --> 00:15:56.689 align:start position:0%
primitive but now all of a sudden we've
 

00:15:56.689 --> 00:15:58.329 align:start position:0%
primitive but now all of a sudden we've
made<00:15:56.839><c> it</c><00:15:56.959><c> an</c><00:15:57.079><c> object</c><00:15:57.290><c> type</c><00:15:57.679><c> instead</c><00:15:58.040><c> just</c>

00:15:58.329 --> 00:15:58.339 align:start position:0%
made it an object type instead just
 

00:15:58.339 --> 00:16:00.150 align:start position:0%
made it an object type instead just
because<00:15:58.490><c> we</c><00:15:58.639><c> want</c><00:15:58.819><c> to</c><00:15:58.879><c> set</c><00:15:59.089><c> it</c><00:15:59.179><c> to</c><00:15:59.299><c> no</c><00:15:59.449><c> but</c>

00:16:00.150 --> 00:16:00.160 align:start position:0%
because we want to set it to no but
 

00:16:00.160 --> 00:16:02.860 align:start position:0%
because we want to set it to no but
anyway<00:16:01.160><c> you've</c><00:16:01.970><c> got</c><00:16:02.089><c> this</c><00:16:02.209><c> private</c><00:16:02.569><c> member</c>

00:16:02.860 --> 00:16:02.870 align:start position:0%
anyway you've got this private member
 

00:16:02.870 --> 00:16:04.000 align:start position:0%
anyway you've got this private member
variable

00:16:04.000 --> 00:16:04.010 align:start position:0%
variable
 

00:16:04.010 --> 00:16:05.290 align:start position:0%
variable
and<00:16:04.160><c> then</c><00:16:04.310><c> you</c><00:16:04.430><c> have</c><00:16:04.610><c> the</c><00:16:04.700><c> actual</c><00:16:05.060><c> thing</c><00:16:05.270><c> that</c>

00:16:05.290 --> 00:16:05.300 align:start position:0%
and then you have the actual thing that
 

00:16:05.300 --> 00:16:08.080 align:start position:0%
and then you have the actual thing that
they're<00:16:05.480><c> gonna</c><00:16:05.600><c> access</c><00:16:06.140><c> and</c><00:16:06.610><c> you</c><00:16:07.610><c> say</c><00:16:07.790><c> okay</c>

00:16:08.080 --> 00:16:08.090 align:start position:0%
they're gonna access and you say okay
 

00:16:08.090 --> 00:16:09.580 align:start position:0%
they're gonna access and you say okay
when<00:16:08.300><c> they</c><00:16:08.450><c> actually</c><00:16:08.810><c> call</c><00:16:09.020><c> the</c><00:16:09.140><c> getter</c><00:16:09.320><c> we'll</c>

00:16:09.580 --> 00:16:09.590 align:start position:0%
when they actually call the getter we'll
 

00:16:09.590 --> 00:16:10.990 align:start position:0%
when they actually call the getter we'll
see<00:16:09.800><c> if</c><00:16:09.890><c> it's</c><00:16:10.070><c> null</c><00:16:10.280><c> and</c><00:16:10.520><c> that's</c><00:16:10.640><c> the</c><00:16:10.790><c> trigger</c>

00:16:10.990 --> 00:16:11.000 align:start position:0%
see if it's null and that's the trigger
 

00:16:11.000 --> 00:16:12.880 align:start position:0%
see if it's null and that's the trigger
to<00:16:11.180><c> say</c><00:16:11.330><c> okay</c><00:16:11.630><c> now</c><00:16:11.660><c> actually</c><00:16:12.290><c> set</c><00:16:12.500><c> the</c><00:16:12.620><c> value</c>

00:16:12.880 --> 00:16:12.890 align:start position:0%
to say okay now actually set the value
 

00:16:12.890 --> 00:16:14.320 align:start position:0%
to say okay now actually set the value
to<00:16:12.920><c> this</c><00:16:13.130><c> thing</c><00:16:13.340><c> and</c><00:16:13.460><c> return</c><00:16:13.610><c> the</c><00:16:13.850><c> value</c><00:16:14.150><c> and</c>

00:16:14.320 --> 00:16:14.330 align:start position:0%
to this thing and return the value and
 

00:16:14.330 --> 00:16:16.510 align:start position:0%
to this thing and return the value and
you're<00:16:15.110><c> done</c><00:16:15.290><c> next</c><00:16:15.560><c> time</c><00:16:15.740><c> they</c><00:16:15.890><c> ask</c><00:16:16.100><c> for</c><00:16:16.190><c> it's</c>

00:16:16.510 --> 00:16:16.520 align:start position:0%
you're done next time they ask for it's
 

00:16:16.520 --> 00:16:17.950 align:start position:0%
you're done next time they ask for it's
already<00:16:16.790><c> allocated</c><00:16:16.970><c> and</c><00:16:17.360><c> set</c><00:16:17.450><c> and</c><00:16:17.720><c> you</c><00:16:17.780><c> don't</c>

00:16:17.950 --> 00:16:17.960 align:start position:0%
already allocated and set and you don't
 

00:16:17.960 --> 00:16:19.300 align:start position:0%
already allocated and set and you don't
have<00:16:18.050><c> to</c><00:16:18.200><c> worry</c><00:16:18.350><c> about</c><00:16:18.440><c> it</c><00:16:18.650><c> that's</c><00:16:19.010><c> the</c>

00:16:19.300 --> 00:16:19.310 align:start position:0%
have to worry about it that's the
 

00:16:19.310 --> 00:16:20.920 align:start position:0%
have to worry about it that's the
general<00:16:19.610><c> approach</c><00:16:19.850><c> I'm</c><00:16:20.210><c> sure</c><00:16:20.450><c> we've</c><00:16:20.630><c> all</c><00:16:20.750><c> done</c>

00:16:20.920 --> 00:16:20.930 align:start position:0%
general approach I'm sure we've all done
 

00:16:20.930 --> 00:16:22.840 align:start position:0%
general approach I'm sure we've all done
this<00:16:21.050><c> hundreds</c><00:16:21.440><c> of</c><00:16:21.560><c> times</c><00:16:21.620><c> hopefully</c><00:16:22.580><c> for</c><00:16:22.820><c> a</c>

00:16:22.840 --> 00:16:22.850 align:start position:0%
this hundreds of times hopefully for a
 

00:16:22.850 --> 00:16:24.880 align:start position:0%
this hundreds of times hopefully for a
less<00:16:23.030><c> stupid</c><00:16:23.240><c> examples</c><00:16:23.810><c> than</c><00:16:23.990><c> this</c><00:16:24.110><c> one</c><00:16:24.320><c> all</c>

00:16:24.880 --> 00:16:24.890 align:start position:0%
less stupid examples than this one all
 

00:16:24.890 --> 00:16:27.880 align:start position:0%
less stupid examples than this one all
right<00:16:25.010><c> this</c><00:16:26.000><c> is</c><00:16:26.150><c> what</c><00:16:26.300><c> it</c><00:16:26.390><c> looks</c><00:16:26.570><c> like</c><00:16:26.660><c> at</c><00:16:27.080><c> Java</c>

00:16:27.880 --> 00:16:27.890 align:start position:0%
right this is what it looks like at Java
 

00:16:27.890 --> 00:16:29.800 align:start position:0%
right this is what it looks like at Java
level<00:16:28.370><c> like</c><00:16:28.640><c> this</c><00:16:28.790><c> is</c><00:16:29.000><c> essentially</c><00:16:29.570><c> what</c><00:16:29.690><c> it</c>

00:16:29.800 --> 00:16:29.810 align:start position:0%
level like this is essentially what it
 

00:16:29.810 --> 00:16:31.540 align:start position:0%
level like this is essentially what it
compiles<00:16:30.170><c> to</c><00:16:30.230><c> if</c><00:16:30.470><c> we</c><00:16:30.590><c> look</c><00:16:30.800><c> at</c><00:16:30.890><c> the</c><00:16:30.980><c> decompiled</c>

00:16:31.540 --> 00:16:31.550 align:start position:0%
compiles to if we look at the decompiled
 

00:16:31.550 --> 00:16:34.120 align:start position:0%
compiles to if we look at the decompiled
bytecode<00:16:32.030><c> it</c><00:16:32.840><c> looks</c><00:16:33.050><c> exactly</c><00:16:33.320><c> as</c><00:16:33.830><c> what</c><00:16:34.070><c> you</c>

00:16:34.120 --> 00:16:34.130 align:start position:0%
bytecode it looks exactly as what you
 

00:16:34.130 --> 00:16:35.950 align:start position:0%
bytecode it looks exactly as what you
would<00:16:34.250><c> expect</c><00:16:34.670><c> it</c><00:16:34.790><c> to</c><00:16:34.820><c> you've</c><00:16:35.510><c> got</c><00:16:35.660><c> the</c><00:16:35.780><c> same</c>

00:16:35.950 --> 00:16:35.960 align:start position:0%
would expect it to you've got the same
 

00:16:35.960 --> 00:16:37.480 align:start position:0%
would expect it to you've got the same
thing<00:16:36.440><c> going</c><00:16:36.830><c> on</c>

00:16:37.480 --> 00:16:37.490 align:start position:0%
thing going on
 

00:16:37.490 --> 00:16:40.030 align:start position:0%
thing going on
with<00:16:37.970><c> in</c><00:16:38.360><c> some</c><00:16:38.720><c> integers</c><00:16:39.260><c> and</c><00:16:39.560><c> it's</c><00:16:39.710><c> doing</c><00:16:39.980><c> the</c>

00:16:40.030 --> 00:16:40.040 align:start position:0%
with in some integers and it's doing the
 

00:16:40.040 --> 00:16:42.280 align:start position:0%
with in some integers and it's doing the
right<00:16:40.070><c> thing</c><00:16:40.400><c> there</c><00:16:40.640><c> okay</c><00:16:41.300><c> but</c><00:16:41.690><c> there's</c><00:16:42.200><c> a</c>

00:16:42.280 --> 00:16:42.290 align:start position:0%
right thing there okay but there's a
 

00:16:42.290 --> 00:16:44.050 align:start position:0%
right thing there okay but there's a
better<00:16:42.680><c> way</c><00:16:42.890><c> to</c><00:16:42.920><c> do</c><00:16:43.250><c> this</c><00:16:43.430><c> with</c><00:16:43.670><c> Kotlin</c>

00:16:44.050 --> 00:16:44.060 align:start position:0%
better way to do this with Kotlin
 

00:16:44.060 --> 00:16:45.550 align:start position:0%
better way to do this with Kotlin
there's<00:16:44.240><c> an</c><00:16:44.330><c> automatic</c><00:16:44.720><c> approach</c><00:16:45.140><c> that</c><00:16:45.380><c> takes</c>

00:16:45.550 --> 00:16:45.560 align:start position:0%
there's an automatic approach that takes
 

00:16:45.560 --> 00:16:48.010 align:start position:0%
there's an automatic approach that takes
exactly<00:16:45.770><c> one</c><00:16:46.280><c> line</c><00:16:46.430><c> of</c><00:16:46.610><c> code</c><00:16:46.640><c> isn't</c><00:16:47.630><c> that</c><00:16:47.810><c> much</c>

00:16:48.010 --> 00:16:48.020 align:start position:0%
exactly one line of code isn't that much
 

00:16:48.020 --> 00:16:51.250 align:start position:0%
exactly one line of code isn't that much
better<00:16:48.290><c> to</c><00:16:48.440><c> use</c><00:16:48.920><c> say</c><00:16:49.580><c> bye</c><00:16:49.820><c> lazy</c><00:16:50.180><c> will</c><00:16:50.960><c> set</c><00:16:51.170><c> it</c>

00:16:51.250 --> 00:16:51.260 align:start position:0%
better to use say bye lazy will set it
 

00:16:51.260 --> 00:16:53.890 align:start position:0%
better to use say bye lazy will set it
to<00:16:51.520><c> 574</c><00:16:52.520><c> so</c><00:16:52.760><c> it</c><00:16:52.880><c> doesn't</c><00:16:53.180><c> get</c><00:16:53.240><c> set</c><00:16:53.480><c> to</c><00:16:53.600><c> anything</c>

00:16:53.890 --> 00:16:53.900 align:start position:0%
to 574 so it doesn't get set to anything
 

00:16:53.900 --> 00:16:55.570 align:start position:0%
to 574 so it doesn't get set to anything
until<00:16:54.230><c> someone</c><00:16:54.680><c> asked</c><00:16:54.920><c> for</c><00:16:54.950><c> the</c><00:16:55.190><c> first</c><00:16:55.370><c> time</c>

00:16:55.570 --> 00:16:55.580 align:start position:0%
until someone asked for the first time
 

00:16:55.580 --> 00:16:58.270 align:start position:0%
until someone asked for the first time
and<00:16:55.820><c> then</c><00:16:56.180><c> it</c><00:16:56.270><c> goes</c><00:16:56.390><c> through</c><00:16:56.470><c> some</c><00:16:57.470><c> operations</c>

00:16:58.270 --> 00:16:58.280 align:start position:0%
and then it goes through some operations
 

00:16:58.280 --> 00:17:00.400 align:start position:0%
and then it goes through some operations
to<00:16:58.520><c> actually</c><00:16:59.120><c> allocate</c><00:16:59.330><c> and</c><00:16:59.810><c> return</c><00:17:00.290><c> this</c>

00:17:00.400 --> 00:17:00.410 align:start position:0%
to actually allocate and return this
 

00:17:00.410 --> 00:17:02.800 align:start position:0%
to actually allocate and return this
value<00:17:00.740><c> of</c><00:17:00.860><c> 574</c><00:17:01.700><c> and</c><00:17:01.820><c> the</c><00:17:01.880><c> question</c><00:17:02.180><c> is</c><00:17:02.330><c> what</c>

00:17:02.800 --> 00:17:02.810 align:start position:0%
value of 574 and the question is what
 

00:17:02.810 --> 00:17:06.060 align:start position:0%
value of 574 and the question is what
operations<00:17:03.350><c> does</c><00:17:03.620><c> it</c><00:17:03.740><c> go</c><00:17:03.830><c> through</c><00:17:04.120><c> so</c><00:17:05.120><c> I</c>

00:17:06.060 --> 00:17:06.070 align:start position:0%
operations does it go through so I
 

00:17:06.070 --> 00:17:09.280 align:start position:0%
operations does it go through so I
should<00:17:07.070><c> explain</c><00:17:07.850><c> first</c><00:17:08.180><c> lazy</c><00:17:08.510><c> is</c><00:17:08.750><c> implemented</c>

00:17:09.280 --> 00:17:09.290 align:start position:0%
should explain first lazy is implemented
 

00:17:09.290 --> 00:17:12.610 align:start position:0%
should explain first lazy is implemented
using<00:17:09.520><c> property</c><00:17:10.520><c> delegates</c><00:17:10.970><c> in</c><00:17:11.720><c> Kotlin</c><00:17:12.440><c> and</c>

00:17:12.610 --> 00:17:12.620 align:start position:0%
using property delegates in Kotlin and
 

00:17:12.620 --> 00:17:15.040 align:start position:0%
using property delegates in Kotlin and
it's<00:17:12.800><c> at</c><00:17:12.950><c> this</c><00:17:13.190><c> generic</c><00:17:13.580><c> mechanism</c><00:17:13.880><c> they</c><00:17:14.480><c> have</c>

00:17:15.040 --> 00:17:15.050 align:start position:0%
it's at this generic mechanism they have
 

00:17:15.050 --> 00:17:17.770 align:start position:0%
it's at this generic mechanism they have
for<00:17:15.560><c> delegating</c><00:17:16.310><c> logic</c><00:17:16.730><c> somewhere</c><00:17:17.120><c> else</c><00:17:17.270><c> so</c><00:17:17.570><c> I</c>

00:17:17.770 --> 00:17:17.780 align:start position:0%
for delegating logic somewhere else so I
 

00:17:17.780 --> 00:17:19.810 align:start position:0%
for delegating logic somewhere else so I
want<00:17:18.380><c> when</c><00:17:18.590><c> someone</c><00:17:18.860><c> asks</c><00:17:19.160><c> for</c><00:17:19.190><c> this</c><00:17:19.370><c> variable</c>

00:17:19.810 --> 00:17:19.820 align:start position:0%
want when someone asks for this variable
 

00:17:19.820 --> 00:17:21.490 align:start position:0%
want when someone asks for this variable
I<00:17:20.000><c> want</c><00:17:20.150><c> you</c><00:17:20.300><c> to</c><00:17:20.420><c> run</c><00:17:20.570><c> this</c><00:17:20.660><c> logic</c><00:17:21.050><c> over</c><00:17:21.260><c> here</c>

00:17:21.490 --> 00:17:21.500 align:start position:0%
I want you to run this logic over here
 

00:17:21.500 --> 00:17:23.530 align:start position:0%
I want you to run this logic over here
and<00:17:21.620><c> return</c><00:17:21.890><c> other</c><00:17:22.460><c> information</c><00:17:23.150><c> from</c><00:17:23.330><c> there</c>

00:17:23.530 --> 00:17:23.540 align:start position:0%
and return other information from there
 

00:17:23.540 --> 00:17:25.030 align:start position:0%
and return other information from there
the<00:17:23.900><c> other</c><00:17:24.110><c> background</c><00:17:24.680><c> piece</c><00:17:24.890><c> of</c>

00:17:25.030 --> 00:17:25.040 align:start position:0%
the other background piece of
 

00:17:25.040 --> 00:17:27.790 align:start position:0%
the other background piece of
information<00:17:25.340><c> is</c><00:17:25.880><c> properties</c><00:17:26.750><c> properties</c><00:17:27.620><c> in</c>

00:17:27.790 --> 00:17:27.800 align:start position:0%
information is properties properties in
 

00:17:27.800 --> 00:17:30.370 align:start position:0%
information is properties properties in
Kotlin<00:17:28.220><c> do</c><00:17:28.430><c> much</c><00:17:28.940><c> more</c><00:17:29.270><c> than</c><00:17:29.330><c> properties</c><00:17:30.170><c> in</c>

00:17:30.370 --> 00:17:30.380 align:start position:0%
Kotlin do much more than properties in
 

00:17:30.380 --> 00:17:32.080 align:start position:0%
Kotlin do much more than properties in
the<00:17:30.470><c> java</c><00:17:30.650><c> programming</c><00:17:30.890><c> language</c><00:17:31.280><c> which</c>

00:17:32.080 --> 00:17:32.090 align:start position:0%
the java programming language which
 

00:17:32.090 --> 00:17:33.520 align:start position:0%
the java programming language which
means<00:17:32.330><c> if</c><00:17:32.810><c> you're</c><00:17:32.960><c> going</c><00:17:33.020><c> to</c><00:17:33.170><c> access</c>

00:17:33.520 --> 00:17:33.530 align:start position:0%
means if you're going to access
 

00:17:33.530 --> 00:17:35.350 align:start position:0%
means if you're going to access
information<00:17:33.770><c> on</c><00:17:34.370><c> a</c><00:17:34.400><c> property</c><00:17:34.850><c> using</c>

00:17:35.350 --> 00:17:35.360 align:start position:0%
information on a property using
 

00:17:35.360 --> 00:17:37.150 align:start position:0%
information on a property using
reflection<00:17:35.750><c> well</c><00:17:36.500><c> how</c><00:17:36.800><c> does</c><00:17:36.860><c> that</c><00:17:36.980><c> work</c>

00:17:37.150 --> 00:17:37.160 align:start position:0%
reflection well how does that work
 

00:17:37.160 --> 00:17:39.130 align:start position:0%
reflection well how does that work
through<00:17:37.640><c> the</c><00:17:37.760><c> bytecode</c><00:17:37.940><c> since</c><00:17:38.510><c> Java</c>

00:17:39.130 --> 00:17:39.140 align:start position:0%
through the bytecode since Java
 

00:17:39.140 --> 00:17:40.810 align:start position:0%
through the bytecode since Java
programming<00:17:39.560><c> language</c><00:17:39.740><c> doesn't</c><00:17:40.310><c> have</c><00:17:40.460><c> that</c>

00:17:40.810 --> 00:17:40.820 align:start position:0%
programming language doesn't have that
 

00:17:40.820 --> 00:17:41.470 align:start position:0%
programming language doesn't have that
capability

00:17:41.470 --> 00:17:41.480 align:start position:0%
capability
 

00:17:41.480 --> 00:17:43.360 align:start position:0%
capability
all<00:17:41.990><c> right</c><00:17:42.110><c> well</c><00:17:42.320><c> colin</c><00:17:42.830><c> needed</c><00:17:43.130><c> to</c><00:17:43.220><c> add</c>

00:17:43.360 --> 00:17:43.370 align:start position:0%
all right well colin needed to add
 

00:17:43.370 --> 00:17:45.100 align:start position:0%
all right well colin needed to add
capabilities<00:17:44.180><c> so</c><00:17:44.390><c> that</c><00:17:44.540><c> when</c><00:17:44.690><c> you</c><00:17:44.870><c> use</c><00:17:45.080><c> a</c>

00:17:45.100 --> 00:17:45.110 align:start position:0%
capabilities so that when you use a
 

00:17:45.110 --> 00:17:47.050 align:start position:0%
capabilities so that when you use a
reflection<00:17:45.740><c> it</c><00:17:46.160><c> will</c><00:17:46.340><c> go</c><00:17:46.550><c> through</c><00:17:46.820><c> there</c>

00:17:47.050 --> 00:17:47.060 align:start position:0%
reflection it will go through there
 

00:17:47.060 --> 00:17:49.720 align:start position:0%
reflection it will go through there
extra<00:17:47.870><c> or</c><00:17:48.080><c> additional</c><00:17:48.860><c> stuff</c><00:17:49.130><c> to</c><00:17:49.580><c> actually</c>

00:17:49.720 --> 00:17:49.730 align:start position:0%
extra or additional stuff to actually
 

00:17:49.730 --> 00:17:51.790 align:start position:0%
extra or additional stuff to actually
get<00:17:50.120><c> that</c><00:17:50.360><c> extra</c><00:17:50.780><c> bit</c><00:17:50.900><c> of</c><00:17:51.050><c> information</c><00:17:51.290><c> from</c>

00:17:51.790 --> 00:17:51.800 align:start position:0%
get that extra bit of information from
 

00:17:51.800 --> 00:17:53.290 align:start position:0%
get that extra bit of information from
their<00:17:52.040><c> property</c><00:17:52.430><c> so</c><00:17:52.610><c> they</c><00:17:52.790><c> created</c><00:17:53.150><c> this</c>

00:17:53.290 --> 00:17:53.300 align:start position:0%
their property so they created this
 

00:17:53.300 --> 00:17:56.110 align:start position:0%
their property so they created this
class<00:17:53.480><c> called</c><00:17:53.840><c> kay</c><00:17:54.110><c> property</c><00:17:54.650><c> and</c><00:17:54.860><c> now</c><00:17:55.670><c> if</c><00:17:55.940><c> you</c>

00:17:56.110 --> 00:17:56.120 align:start position:0%
class called kay property and now if you
 

00:17:56.120 --> 00:17:58.240 align:start position:0%
class called kay property and now if you
use<00:17:56.270><c> reflection</c><00:17:56.780><c> on</c><00:17:56.960><c> a</c><00:17:56.990><c> colin</c><00:17:57.440><c> property</c><00:17:57.890><c> it</c>

00:17:58.240 --> 00:17:58.250 align:start position:0%
use reflection on a colin property it
 

00:17:58.250 --> 00:18:00.310 align:start position:0%
use reflection on a colin property it
can<00:17:58.880><c> go</c><00:17:59.060><c> through</c><00:17:59.240><c> the</c><00:17:59.330><c> kay</c><00:17:59.540><c> property</c><00:18:00.020><c> and</c><00:18:00.170><c> get</c>

00:18:00.310 --> 00:18:00.320 align:start position:0%
can go through the kay property and get
 

00:18:00.320 --> 00:18:02.220 align:start position:0%
can go through the kay property and get
that<00:18:00.410><c> extra</c><00:18:00.920><c> information</c><00:18:01.310><c> that</c><00:18:01.610><c> it</c><00:18:01.790><c> needs</c><00:18:01.970><c> so</c>

00:18:02.220 --> 00:18:02.230 align:start position:0%
that extra information that it needs so
 

00:18:02.230 --> 00:18:04.330 align:start position:0%
that extra information that it needs so
that's<00:18:03.230><c> the</c><00:18:03.440><c> background</c><00:18:03.650><c> here's</c><00:18:04.160><c> what's</c>

00:18:04.330 --> 00:18:04.340 align:start position:0%
that's the background here's what's
 

00:18:04.340 --> 00:18:06.280 align:start position:0%
that's the background here's what's
going<00:18:04.580><c> on</c><00:18:04.730><c> inside</c><00:18:05.000><c> of</c><00:18:05.240><c> lazy</c><00:18:05.540><c> first</c><00:18:05.990><c> of</c><00:18:06.140><c> all</c>

00:18:06.280 --> 00:18:06.290 align:start position:0%
going on inside of lazy first of all
 

00:18:06.290 --> 00:18:08.620 align:start position:0%
going on inside of lazy first of all
when<00:18:06.830><c> you</c><00:18:06.950><c> say</c><00:18:06.980><c> by</c><00:18:07.400><c> lazy</c><00:18:07.730><c> it</c><00:18:08.060><c> automatically</c>

00:18:08.620 --> 00:18:08.630 align:start position:0%
when you say by lazy it automatically
 

00:18:08.630 --> 00:18:11.560 align:start position:0%
when you say by lazy it automatically
creates<00:18:08.930><c> an</c><00:18:09.290><c> array</c><00:18:10.120><c> allocation</c><00:18:11.120><c> brain</c><00:18:11.360><c> should</c>

00:18:11.560 --> 00:18:11.570 align:start position:0%
creates an array allocation brain should
 

00:18:11.570 --> 00:18:12.549 align:start position:0%
creates an array allocation brain should
say<00:18:11.750><c> oh</c><00:18:11.780><c> there's</c><00:18:12.200><c> a</c><00:18:12.260><c> now</c>

00:18:12.549 --> 00:18:12.559 align:start position:0%
say oh there's a now
 

00:18:12.559 --> 00:18:14.739 align:start position:0%
say oh there's a now
ocation<00:18:12.980><c> so</c><00:18:13.429><c> you've</c><00:18:13.730><c> got</c><00:18:13.879><c> this</c><00:18:13.999><c> K</c><00:18:14.269><c> property</c>

00:18:14.739 --> 00:18:14.749 align:start position:0%
ocation so you've got this K property
 

00:18:14.749 --> 00:18:16.029 align:start position:0%
ocation so you've got this K property
array<00:18:15.019><c> where</c><00:18:15.230><c> it's</c><00:18:15.320><c> going</c><00:18:15.440><c> to</c><00:18:15.499><c> set</c><00:18:15.799><c> up</c><00:18:15.919><c> the</c>

00:18:16.029 --> 00:18:16.039 align:start position:0%
array where it's going to set up the
 

00:18:16.039 --> 00:18:18.310 align:start position:0%
array where it's going to set up the
information<00:18:16.340><c> for</c><00:18:17.149><c> getting</c><00:18:17.480><c> things</c><00:18:17.690><c> from</c><00:18:18.019><c> this</c>

00:18:18.310 --> 00:18:18.320 align:start position:0%
information for getting things from this
 

00:18:18.320 --> 00:18:20.320 align:start position:0%
information for getting things from this
Kotlin<00:18:18.799><c> specific</c><00:18:19.309><c> property</c><00:18:19.789><c> reflection</c>

00:18:20.320 --> 00:18:20.330 align:start position:0%
Kotlin specific property reflection
 

00:18:20.330 --> 00:18:21.999 align:start position:0%
Kotlin specific property reflection
mechanism<00:18:20.779><c> that</c><00:18:20.929><c> they</c><00:18:21.049><c> have</c><00:18:21.230><c> so</c><00:18:21.710><c> we've</c><00:18:21.860><c> got</c>

00:18:21.999 --> 00:18:22.009 align:start position:0%
mechanism that they have so we've got
 

00:18:22.009 --> 00:18:23.860 align:start position:0%
mechanism that they have so we've got
the<00:18:22.159><c> array</c><00:18:22.429><c> and</c><00:18:22.759><c> the</c><00:18:22.879><c> array</c><00:18:22.909><c> consists</c><00:18:23.570><c> of</c><00:18:23.629><c> one</c>

00:18:23.860 --> 00:18:23.870 align:start position:0%
the array and the array consists of one
 

00:18:23.870 --> 00:18:25.869 align:start position:0%
the array and the array consists of one
item<00:18:24.200><c> which</c><00:18:24.620><c> is</c><00:18:24.830><c> this</c><00:18:24.980><c> K</c><00:18:25.220><c> property</c><00:18:25.730><c> that</c>

00:18:25.869 --> 00:18:25.879 align:start position:0%
item which is this K property that
 

00:18:25.879 --> 00:18:27.759 align:start position:0%
item which is this K property that
they've<00:18:26.059><c> set</c><00:18:26.299><c> up</c><00:18:26.350><c> specifically</c><00:18:27.350><c> for</c><00:18:27.470><c> this</c>

00:18:27.759 --> 00:18:27.769 align:start position:0%
they've set up specifically for this
 

00:18:27.769 --> 00:18:29.350 align:start position:0%
they've set up specifically for this
lazy<00:18:28.039><c> property</c><00:18:28.580><c> that</c><00:18:28.639><c> you've</c><00:18:28.759><c> told</c><00:18:28.970><c> it</c><00:18:29.149><c> about</c>

00:18:29.350 --> 00:18:29.360 align:start position:0%
lazy property that you've told it about
 

00:18:29.360 --> 00:18:31.060 align:start position:0%
lazy property that you've told it about
you've<00:18:29.749><c> got</c><00:18:29.899><c> the</c><00:18:30.019><c> class</c><00:18:30.230><c> name</c><00:18:30.559><c> you've</c><00:18:30.799><c> got</c><00:18:30.919><c> the</c>

00:18:31.060 --> 00:18:31.070 align:start position:0%
you've got the class name you've got the
 

00:18:31.070 --> 00:18:34.029 align:start position:0%
you've got the class name you've got the
type<00:18:31.279><c> and</c><00:18:32.240><c> that's</c><00:18:32.899><c> basically</c><00:18:33.529><c> it</c><00:18:33.740><c> you've</c><00:18:33.919><c> got</c>

00:18:34.029 --> 00:18:34.039 align:start position:0%
type and that's basically it you've got
 

00:18:34.039 --> 00:18:35.499 align:start position:0%
type and that's basically it you've got
the<00:18:34.159><c> name</c><00:18:34.340><c> of</c><00:18:34.490><c> the</c><00:18:34.580><c> thing</c><00:18:34.759><c> right</c><00:18:34.970><c> so</c><00:18:35.179><c> it</c><00:18:35.330><c> sets</c>

00:18:35.499 --> 00:18:35.509 align:start position:0%
the name of the thing right so it sets
 

00:18:35.509 --> 00:18:35.950 align:start position:0%
the name of the thing right so it sets
this<00:18:35.629><c> up</c>

00:18:35.950 --> 00:18:35.960 align:start position:0%
this up
 

00:18:35.960 --> 00:18:38.169 align:start position:0%
this up
array<00:18:36.200><c> plus</c><00:18:36.889><c> an</c><00:18:37.039><c> allocation</c><00:18:37.460><c> of</c><00:18:37.789><c> the</c><00:18:37.999><c> K</c>

00:18:38.169 --> 00:18:38.179 align:start position:0%
array plus an allocation of the K
 

00:18:38.179 --> 00:18:40.840 align:start position:0%
array plus an allocation of the K
property<00:18:38.570><c> inside</c><00:18:38.929><c> of</c><00:18:39.049><c> it</c><00:18:39.279><c> then</c><00:18:40.279><c> it</c><00:18:40.429><c> sets</c><00:18:40.669><c> up</c>

00:18:40.840 --> 00:18:40.850 align:start position:0%
property inside of it then it sets up
 

00:18:40.850 --> 00:18:42.460 align:start position:0%
property inside of it then it sets up
this<00:18:41.029><c> call</c><00:18:41.299><c> internally</c><00:18:41.929><c> this</c><00:18:42.080><c> is</c><00:18:42.230><c> sort</c><00:18:42.409><c> of</c>

00:18:42.460 --> 00:18:42.470 align:start position:0%
this call internally this is sort of
 

00:18:42.470 --> 00:18:44.320 align:start position:0%
this call internally this is sort of
initialization<00:18:43.039><c> time</c><00:18:43.580><c> code</c><00:18:43.820><c> it</c><00:18:43.940><c> says</c><00:18:44.059><c> okay</c>

00:18:44.320 --> 00:18:44.330 align:start position:0%
initialization time code it says okay
 

00:18:44.330 --> 00:18:45.999 align:start position:0%
initialization time code it says okay
there's<00:18:44.600><c> this</c><00:18:44.749><c> lazy</c><00:18:45.289><c> thing</c><00:18:45.619><c> that's</c><00:18:45.830><c> going</c><00:18:45.950><c> to</c>

00:18:45.999 --> 00:18:46.009 align:start position:0%
there's this lazy thing that's going to
 

00:18:46.009 --> 00:18:48.489 align:start position:0%
there's this lazy thing that's going to
return<00:18:46.190><c> a</c><00:18:46.580><c> class</c><00:18:46.820><c> of</c><00:18:47.059><c> type</c><00:18:47.240><c> lazy</c><00:18:47.539><c> and</c><00:18:47.899><c> from</c>

00:18:48.489 --> 00:18:48.499 align:start position:0%
return a class of type lazy and from
 

00:18:48.499 --> 00:18:51.430 align:start position:0%
return a class of type lazy and from
that<00:18:48.769><c> we</c><00:18:49.460><c> can</c><00:18:49.639><c> get</c><00:18:49.850><c> the</c><00:18:50.059><c> value</c><00:18:50.659><c> so</c><00:18:50.990><c> when</c><00:18:51.259><c> you</c>

00:18:51.430 --> 00:18:51.440 align:start position:0%
that we can get the value so when you
 

00:18:51.440 --> 00:18:53.919 align:start position:0%
that we can get the value so when you
call<00:18:51.679><c> together</c><00:18:52.100><c> on</c><00:18:52.369><c> that</c><00:18:52.970><c> property</c><00:18:53.480><c> it's</c>

00:18:53.919 --> 00:18:53.929 align:start position:0%
call together on that property it's
 

00:18:53.929 --> 00:18:55.299 align:start position:0%
call together on that property it's
going<00:18:54.080><c> to</c><00:18:54.169><c> call</c><00:18:54.320><c> into</c><00:18:54.559><c> this</c><00:18:54.679><c> code</c><00:18:54.950><c> which</c><00:18:55.159><c> is</c>

00:18:55.299 --> 00:18:55.309 align:start position:0%
going to call into this code which is
 

00:18:55.309 --> 00:18:57.190 align:start position:0%
going to call into this code which is
going<00:18:55.429><c> to</c><00:18:55.490><c> call</c><00:18:55.669><c> a</c><00:18:55.700><c> get</c><00:18:55.999><c> value</c><00:18:56.360><c> on</c><00:18:56.539><c> that</c><00:18:56.960><c> lazy</c>

00:18:57.190 --> 00:18:57.200 align:start position:0%
going to call a get value on that lazy
 

00:18:57.200 --> 00:18:58.690 align:start position:0%
going to call a get value on that lazy
object<00:18:57.710><c> and</c><00:18:57.860><c> then</c><00:18:57.980><c> it's</c><00:18:58.100><c> going</c><00:18:58.190><c> to</c><00:18:58.249><c> call</c><00:18:58.460><c> in</c>

00:18:58.690 --> 00:18:58.700 align:start position:0%
object and then it's going to call in
 

00:18:58.700 --> 00:19:02.200 align:start position:0%
object and then it's going to call in
value<00:18:59.059><c> on</c><00:18:59.210><c> that</c><00:18:59.450><c> all</c><00:19:00.289><c> of</c><00:19:00.619><c> this</c><00:19:00.799><c> could</c><00:19:01.730><c> bottom</c>

00:19:02.200 --> 00:19:02.210 align:start position:0%
value on that all of this could bottom
 

00:19:02.210 --> 00:19:04.989 align:start position:0%
value on that all of this could bottom
out<00:19:02.330><c> in</c><00:19:02.629><c> reflection</c><00:19:03.259><c> code</c><00:19:03.740><c> to</c><00:19:04.249><c> go</c><00:19:04.429><c> get</c><00:19:04.700><c> it</c><00:19:04.820><c> from</c>

00:19:04.989 --> 00:19:04.999 align:start position:0%
out in reflection code to go get it from
 

00:19:04.999 --> 00:19:07.239 align:start position:0%
out in reflection code to go get it from
K<00:19:05.269><c> property</c><00:19:05.749><c> which</c><00:19:05.899><c> is</c><00:19:06.080><c> like</c><00:19:06.259><c> even</c><00:19:06.769><c> worse</c><00:19:07.009><c> than</c>

00:19:07.239 --> 00:19:07.249 align:start position:0%
K property which is like even worse than
 

00:19:07.249 --> 00:19:09.430 align:start position:0%
K property which is like even worse than
the<00:19:07.399><c> allocations</c><00:19:07.970><c> we've</c><00:19:08.149><c> seen</c><00:19:08.389><c> so</c><00:19:08.600><c> far</c><00:19:08.629><c> like</c>

00:19:09.430 --> 00:19:09.440 align:start position:0%
the allocations we've seen so far like
 

00:19:09.440 --> 00:19:12.009 align:start position:0%
the allocations we've seen so far like
at<00:19:09.649><c> at</c><00:19:09.980><c> the</c><00:19:10.279><c> end</c><00:19:10.610><c> of</c><00:19:10.970><c> all</c><00:19:11.119><c> of</c><00:19:11.149><c> this</c><00:19:11.330><c> you</c><00:19:11.509><c> may</c><00:19:11.840><c> end</c>

00:19:12.009 --> 00:19:12.019 align:start position:0%
at at the end of all of this you may end
 

00:19:12.019 --> 00:19:13.749 align:start position:0%
at at the end of all of this you may end
up<00:19:12.169><c> in</c><00:19:12.320><c> reflection</c><00:19:12.740><c> code</c><00:19:13.070><c> just</c><00:19:13.369><c> to</c><00:19:13.490><c> get</c><00:19:13.639><c> an</c>

00:19:13.749 --> 00:19:13.759 align:start position:0%
up in reflection code just to get an
 

00:19:13.759 --> 00:19:15.850 align:start position:0%
up in reflection code just to get an
integer<00:19:13.999><c> value</c><00:19:14.389><c> however</c><00:19:15.259><c> because</c><00:19:15.830><c> of</c>

00:19:15.850 --> 00:19:15.860 align:start position:0%
integer value however because of
 

00:19:15.860 --> 00:19:17.350 align:start position:0%
integer value however because of
extension<00:19:16.399><c> methods</c><00:19:16.759><c> they're</c><00:19:16.940><c> more</c><00:19:17.119><c> clever</c>

00:19:17.350 --> 00:19:17.360 align:start position:0%
extension methods they're more clever
 

00:19:17.360 --> 00:19:19.119 align:start position:0%
extension methods they're more clever
than<00:19:17.450><c> that</c><00:19:17.600><c> and</c><00:19:17.960><c> they</c><00:19:18.350><c> actually</c><00:19:18.559><c> spit</c><00:19:19.100><c> out</c>

00:19:19.119 --> 00:19:19.129 align:start position:0%
than that and they actually spit out
 

00:19:19.129 --> 00:19:22.239 align:start position:0%
than that and they actually spit out
this<00:19:19.840><c> extension</c><00:19:20.840><c> method</c><00:19:21.139><c> that</c><00:19:21.289><c> says</c><00:19:21.470><c> oh</c><00:19:21.710><c> if</c>

00:19:22.239 --> 00:19:22.249 align:start position:0%
this extension method that says oh if
 

00:19:22.249 --> 00:19:24.340 align:start position:0%
this extension method that says oh if
it's<00:19:22.519><c> a</c><00:19:22.610><c> lazy</c><00:19:22.879><c> thing</c><00:19:23.269><c> if</c><00:19:23.539><c> they're</c><00:19:23.990><c> using</c><00:19:24.200><c> the</c>

00:19:24.340 --> 00:19:24.350 align:start position:0%
it's a lazy thing if they're using the
 

00:19:24.350 --> 00:19:25.810 align:start position:0%
it's a lazy thing if they're using the
lazy<00:19:24.619><c> class</c><00:19:24.950><c> then</c><00:19:25.190><c> we're</c><00:19:25.309><c> just</c><00:19:25.340><c> going</c><00:19:25.549><c> to</c><00:19:25.610><c> call</c>

00:19:25.810 --> 00:19:25.820 align:start position:0%
lazy class then we're just going to call
 

00:19:25.820 --> 00:19:27.730 align:start position:0%
lazy class then we're just going to call
this<00:19:25.999><c> function</c><00:19:26.269><c> instead</c><00:19:26.779><c> so</c><00:19:27.230><c> no</c><00:19:27.529><c> need</c><00:19:27.679><c> for</c>

00:19:27.730 --> 00:19:27.740 align:start position:0%
this function instead so no need for
 

00:19:27.740 --> 00:19:29.830 align:start position:0%
this function instead so no need for
reflection<00:19:28.490><c> even</c><00:19:28.820><c> though</c><00:19:28.940><c> K</c><00:19:29.149><c> property</c><00:19:29.600><c> stuff</c>

00:19:29.830 --> 00:19:29.840 align:start position:0%
reflection even though K property stuff
 

00:19:29.840 --> 00:19:31.930 align:start position:0%
reflection even though K property stuff
was<00:19:30.019><c> set</c><00:19:30.230><c> up</c><00:19:30.259><c> and</c><00:19:30.619><c> has</c><00:19:31.369><c> reflection</c>

00:19:31.930 --> 00:19:31.940 align:start position:0%
was set up and has reflection
 

00:19:31.940 --> 00:19:33.850 align:start position:0%
was set up and has reflection
capabilities<00:19:32.690><c> we're</c><00:19:32.869><c> not</c><00:19:32.990><c> using</c><00:19:33.259><c> that</c><00:19:33.409><c> aspect</c>

00:19:33.850 --> 00:19:33.860 align:start position:0%
capabilities we're not using that aspect
 

00:19:33.860 --> 00:19:35.889 align:start position:0%
capabilities we're not using that aspect
of<00:19:34.009><c> it</c><00:19:34.129><c> instead</c><00:19:34.549><c> it'll</c><00:19:35.149><c> just</c><00:19:35.389><c> call</c><00:19:35.539><c> into</c><00:19:35.779><c> this</c>

00:19:35.889 --> 00:19:35.899 align:start position:0%
of it instead it'll just call into this
 

00:19:35.899 --> 00:19:38.249 align:start position:0%
of it instead it'll just call into this
method<00:19:36.230><c> and</c><00:19:36.320><c> get</c><00:19:36.440><c> the</c><00:19:36.559><c> value</c><00:19:36.919><c> which</c><00:19:37.700><c> is</c><00:19:37.879><c> this</c>

00:19:38.249 --> 00:19:38.259 align:start position:0%
method and get the value which is this
 

00:19:38.259 --> 00:19:41.080 align:start position:0%
method and get the value which is this
simpler<00:19:39.259><c> than</c><00:19:39.440><c> reflection</c><00:19:39.980><c> however</c><00:19:40.220><c> a</c><00:19:40.669><c> couple</c>

00:19:41.080 --> 00:19:41.090 align:start position:0%
simpler than reflection however a couple
 

00:19:41.090 --> 00:19:42.580 align:start position:0%
simpler than reflection however a couple
of<00:19:41.179><c> conditions</c><00:19:41.330><c> to</c><00:19:41.809><c> check</c><00:19:42.049><c> and</c><00:19:42.259><c> a</c>

00:19:42.580 --> 00:19:42.590 align:start position:0%
of conditions to check and a
 

00:19:42.590 --> 00:19:44.680 align:start position:0%
of conditions to check and a
synchronized<00:19:43.129><c> Block</c><00:19:43.429><c> in</c><00:19:43.639><c> there</c><00:19:43.820><c> just</c><00:19:44.389><c> to</c><00:19:44.570><c> get</c>

00:19:44.680 --> 00:19:44.690 align:start position:0%
synchronized Block in there just to get
 

00:19:44.690 --> 00:19:46.480 align:start position:0%
synchronized Block in there just to get
this<00:19:44.809><c> int</c><00:19:45.080><c> value</c><00:19:45.499><c> from</c><00:19:45.710><c> this</c><00:19:45.889><c> very</c><00:19:46.100><c> stupid</c>

00:19:46.480 --> 00:19:46.490 align:start position:0%
this int value from this very stupid
 

00:19:46.490 --> 00:19:48.310 align:start position:0%
this int value from this very stupid
example<00:19:46.759><c> I've</c><00:19:46.940><c> written</c><00:19:47.119><c> in</c><00:19:47.600><c> addition</c><00:19:48.049><c> to</c><00:19:48.139><c> that</c>

00:19:48.310 --> 00:19:48.320 align:start position:0%
example I've written in addition to that
 

00:19:48.320 --> 00:19:50.909 align:start position:0%
example I've written in addition to that
when<00:19:48.980><c> all</c><00:19:49.220><c> of</c><00:19:49.249><c> this</c><00:19:49.460><c> is</c><00:19:49.639><c> set</c><00:19:49.850><c> up</c><00:19:49.879><c> we</c><00:19:50.119><c> go</c><00:19:50.269><c> through</c>

00:19:50.909 --> 00:19:50.919 align:start position:0%
when all of this is set up we go through
 

00:19:50.919 --> 00:19:52.869 align:start position:0%
when all of this is set up we go through
initialization<00:19:51.919><c> code</c><00:19:52.100><c> which</c><00:19:52.340><c> in</c><00:19:52.490><c> bytecode</c>

00:19:52.869 --> 00:19:52.879 align:start position:0%
initialization code which in bytecode
 

00:19:52.879 --> 00:19:54.430 align:start position:0%
initialization code which in bytecode
looks<00:19:53.119><c> something</c><00:19:53.629><c> like</c><00:19:53.899><c> this</c><00:19:54.110><c> so</c><00:19:54.320><c> basically</c>

00:19:54.430 --> 00:19:54.440 align:start position:0%
looks something like this so basically
 

00:19:54.440 --> 00:19:56.859 align:start position:0%
looks something like this so basically
whenever<00:19:55.369><c> you</c><00:19:55.610><c> get</c><00:19:55.970><c> into</c><00:19:56.210><c> this</c><00:19:56.360><c> and</c>

00:19:56.859 --> 00:19:56.869 align:start position:0%
whenever you get into this and
 

00:19:56.869 --> 00:19:59.259 align:start position:0%
whenever you get into this and
initialize<00:19:57.769><c> this</c><00:19:57.980><c> object</c><00:19:58.460><c> this</c><00:19:58.700><c> is</c><00:19:58.879><c> what</c><00:19:59.059><c> gets</c>

00:19:59.259 --> 00:19:59.269 align:start position:0%
initialize this object this is what gets
 

00:19:59.269 --> 00:20:01.060 align:start position:0%
initialize this object this is what gets
emitted<00:19:59.629><c> on</c><00:19:59.809><c> your</c><00:20:00.080><c> behalf</c><00:20:00.409><c> under</c><00:20:00.740><c> the</c><00:20:00.860><c> hood</c>

00:20:01.060 --> 00:20:01.070 align:start position:0%
emitted on your behalf under the hood
 

00:20:01.070 --> 00:20:03.369 align:start position:0%
emitted on your behalf under the hood
just<00:20:01.789><c> to</c><00:20:01.999><c> save</c><00:20:02.240><c> an</c><00:20:02.389><c> allocation</c><00:20:02.840><c> of</c><00:20:03.049><c> an</c><00:20:03.139><c> integer</c>

00:20:03.369 --> 00:20:03.379 align:start position:0%
just to save an allocation of an integer
 

00:20:03.379 --> 00:20:05.830 align:start position:0%
just to save an allocation of an integer
object<00:20:03.860><c> as</c><00:20:04.009><c> I</c><00:20:04.100><c> said</c><00:20:04.309><c> stupid</c><00:20:04.549><c> example</c><00:20:04.970><c> but</c><00:20:05.600><c> real</c>

00:20:05.830 --> 00:20:05.840 align:start position:0%
object as I said stupid example but real
 

00:20:05.840 --> 00:20:07.659 align:start position:0%
object as I said stupid example but real
example<00:20:06.350><c> is</c><00:20:06.470><c> people</c><00:20:06.860><c> doing</c><00:20:07.009><c> it</c><00:20:07.220><c> for</c><00:20:07.399><c> small</c>

00:20:07.659 --> 00:20:07.669 align:start position:0%
example is people doing it for small
 

00:20:07.669 --> 00:20:10.119 align:start position:0%
example is people doing it for small
data<00:20:07.820><c> structures</c><00:20:08.360><c> like</c><00:20:08.419><c> rep</c><00:20:08.869><c> so</c><00:20:09.529><c> lazy</c><00:20:09.860><c> is</c>

00:20:10.119 --> 00:20:10.129 align:start position:0%
data structures like rep so lazy is
 

00:20:10.129 --> 00:20:11.950 align:start position:0%
data structures like rep so lazy is
awesome<00:20:10.669><c> it's</c><00:20:10.879><c> really</c><00:20:11.269><c> cool</c><00:20:11.450><c> that</c><00:20:11.659><c> you</c><00:20:11.720><c> can</c><00:20:11.840><c> do</c>

00:20:11.950 --> 00:20:11.960 align:start position:0%
awesome it's really cool that you can do
 

00:20:11.960 --> 00:20:13.840 align:start position:0%
awesome it's really cool that you can do
this<00:20:12.110><c> in</c><00:20:12.230><c> one</c><00:20:12.259><c> line</c><00:20:12.619><c> of</c><00:20:12.769><c> code</c><00:20:12.919><c> and</c><00:20:13.039><c> if</c><00:20:13.460><c> you</c><00:20:13.580><c> have</c>

00:20:13.840 --> 00:20:13.850 align:start position:0%
this in one line of code and if you have
 

00:20:13.850 --> 00:20:16.119 align:start position:0%
this in one line of code and if you have
a<00:20:13.879><c> complicated</c><00:20:14.480><c> data</c><00:20:14.779><c> structure</c><00:20:15.320><c> or</c><00:20:15.470><c> a</c><00:20:15.769><c> lot</c><00:20:16.009><c> of</c>

00:20:16.119 --> 00:20:16.129 align:start position:0%
a complicated data structure or a lot of
 

00:20:16.129 --> 00:20:17.649 align:start position:0%
a complicated data structure or a lot of
complicated<00:20:16.549><c> object</c><00:20:16.999><c> when</c><00:20:17.179><c> it</c><00:20:17.269><c> gets</c><00:20:17.419><c> set</c><00:20:17.629><c> up</c>

00:20:17.649 --> 00:20:17.659 align:start position:0%
complicated object when it gets set up
 

00:20:17.659 --> 00:20:19.090 align:start position:0%
complicated object when it gets set up
and<00:20:17.960><c> if</c><00:20:18.200><c> it's</c><00:20:18.409><c> not</c><00:20:18.470><c> going</c><00:20:18.590><c> to</c><00:20:18.679><c> be</c><00:20:18.769><c> used</c><00:20:18.950><c> very</c>

00:20:19.090 --> 00:20:19.100 align:start position:0%
and if it's not going to be used very
 

00:20:19.100 --> 00:20:19.509 align:start position:0%
and if it's not going to be used very
often

00:20:19.509 --> 00:20:19.519 align:start position:0%
often
 

00:20:19.519 --> 00:20:22.450 align:start position:0%
often
totally<00:20:20.210><c> worth</c><00:20:20.360><c> considering</c><00:20:21.350><c> for</c><00:20:21.500><c> avoiding</c>

00:20:22.450 --> 00:20:22.460 align:start position:0%
totally worth considering for avoiding
 

00:20:22.460 --> 00:20:24.520 align:start position:0%
totally worth considering for avoiding
the<00:20:22.490><c> allocation</c><00:20:23.179><c> of</c><00:20:23.330><c> a</c><00:20:23.419><c> simple</c><00:20:23.720><c> int</c>

00:20:24.520 --> 00:20:24.530 align:start position:0%
the allocation of a simple int
 

00:20:24.530 --> 00:20:27.430 align:start position:0%
the allocation of a simple int
why<00:20:24.650><c> not</c><00:20:25.600><c> so</c><00:20:26.600><c> now</c><00:20:26.720><c> let's</c><00:20:26.900><c> take</c><00:20:27.050><c> a</c><00:20:27.110><c> look</c><00:20:27.320><c> at</c>

00:20:27.430 --> 00:20:27.440 align:start position:0%
why not so now let's take a look at
 

00:20:27.440 --> 00:20:28.990 align:start position:0%
why not so now let's take a look at
unsigned<00:20:27.920><c> numbers</c><00:20:28.250><c> so</c><00:20:28.490><c> this</c><00:20:28.640><c> is</c><00:20:28.760><c> a</c><00:20:28.790><c> new</c>

00:20:28.990 --> 00:20:29.000 align:start position:0%
unsigned numbers so this is a new
 

00:20:29.000 --> 00:20:30.820 align:start position:0%
unsigned numbers so this is a new
experimental<00:20:29.390><c> features</c><00:20:30.320><c> that</c><00:20:30.680><c> was</c>

00:20:30.820 --> 00:20:30.830 align:start position:0%
experimental features that was
 

00:20:30.830 --> 00:20:35.440 align:start position:0%
experimental features that was
introduced<00:20:31.790><c> in</c><00:20:31.970><c> curtain</c><00:20:32.570><c> 1.3</c><00:20:33.350><c> so</c><00:20:34.100><c> Java</c><00:20:34.450><c> has</c>

00:20:35.440 --> 00:20:35.450 align:start position:0%
introduced in curtain 1.3 so Java has
 

00:20:35.450 --> 00:20:39.250 align:start position:0%
introduced in curtain 1.3 so Java has
mostly<00:20:35.870><c> signed</c><00:20:36.320><c> numbers</c><00:20:37.060><c> and</c><00:20:38.060><c> kirtland</c><00:20:38.990><c> is</c>

00:20:39.250 --> 00:20:39.260 align:start position:0%
mostly signed numbers and kirtland is
 

00:20:39.260 --> 00:20:41.080 align:start position:0%
mostly signed numbers and kirtland is
finally<00:20:39.620><c> bringing</c><00:20:39.920><c> unsigned</c><00:20:40.700><c> numbers</c><00:20:40.940><c> which</c>

00:20:41.080 --> 00:20:41.090 align:start position:0%
finally bringing unsigned numbers which
 

00:20:41.090 --> 00:20:43.060 align:start position:0%
finally bringing unsigned numbers which
can<00:20:41.120><c> be</c><00:20:41.270><c> very</c><00:20:41.540><c> useful</c><00:20:41.600><c> when</c><00:20:41.900><c> you</c><00:20:42.170><c> do</c><00:20:42.290><c> graphics</c>

00:20:43.060 --> 00:20:43.070 align:start position:0%
can be very useful when you do graphics
 

00:20:43.070 --> 00:20:44.380 align:start position:0%
can be very useful when you do graphics
code<00:20:43.250><c> for</c><00:20:43.490><c> instance</c><00:20:43.700><c> when</c><00:20:43.850><c> you</c><00:20:43.940><c> have</c><00:20:44.060><c> a</c><00:20:44.090><c> width</c>

00:20:44.380 --> 00:20:44.390 align:start position:0%
code for instance when you have a width
 

00:20:44.390 --> 00:20:46.480 align:start position:0%
code for instance when you have a width
and<00:20:44.540><c> a</c><00:20:44.600><c> height</c><00:20:44.770><c> you</c><00:20:45.770><c> want</c><00:20:45.980><c> them</c><00:20:46.130><c> to</c><00:20:46.340><c> be</c>

00:20:46.480 --> 00:20:46.490 align:start position:0%
and a height you want them to be
 

00:20:46.490 --> 00:20:48.340 align:start position:0%
and a height you want them to be
unsigned<00:20:47.060><c> it's</c><00:20:47.270><c> very</c><00:20:47.420><c> useful</c><00:20:47.780><c> as</c><00:20:47.900><c> you</c><00:20:48.050><c> know</c><00:20:48.200><c> as</c>

00:20:48.340 --> 00:20:48.350 align:start position:0%
unsigned it's very useful as you know as
 

00:20:48.350 --> 00:20:50.020 align:start position:0%
unsigned it's very useful as you know as
a<00:20:48.380><c> type</c><00:20:48.680><c> check</c><00:20:48.980><c> that</c><00:20:49.520><c> you're</c><00:20:49.670><c> not</c><00:20:49.790><c> going</c><00:20:49.940><c> to</c>

00:20:50.020 --> 00:20:50.030 align:start position:0%
a type check that you're not going to
 

00:20:50.030 --> 00:20:51.430 align:start position:0%
a type check that you're not going to
get<00:20:50.120><c> a</c><00:20:50.150><c> negative</c><00:20:50.600><c> value</c><00:20:50.660><c> which</c><00:20:50.840><c> will</c><00:20:51.110><c> make</c><00:20:51.290><c> no</c>

00:20:51.430 --> 00:20:51.440 align:start position:0%
get a negative value which will make no
 

00:20:51.440 --> 00:20:53.830 align:start position:0%
get a negative value which will make no
sense<00:20:51.620><c> for</c><00:20:51.860><c> dimension</c><00:20:52.400><c> so</c><00:20:52.820><c> if</c><00:20:53.390><c> you</c><00:20:53.570><c> enable</c>

00:20:53.830 --> 00:20:53.840 align:start position:0%
sense for dimension so if you enable
 

00:20:53.840 --> 00:20:55.390 align:start position:0%
sense for dimension so if you enable
this<00:20:54.110><c> experimental</c><00:20:54.530><c> feature</c><00:20:54.920><c> here's</c><00:20:55.220><c> how</c><00:20:55.340><c> you</c>

00:20:55.390 --> 00:20:55.400 align:start position:0%
this experimental feature here's how you
 

00:20:55.400 --> 00:20:58.060 align:start position:0%
this experimental feature here's how you
can<00:20:55.640><c> use</c><00:20:55.880><c> the</c><00:20:56.060><c> unsigned</c><00:20:56.750><c> numbers</c><00:20:56.990><c> you</c><00:20:57.800><c> can</c><00:20:57.920><c> use</c>

00:20:58.060 --> 00:20:58.070 align:start position:0%
can use the unsigned numbers you can use
 

00:20:58.070 --> 00:21:01.240 align:start position:0%
can use the unsigned numbers you can use
the<00:20:58.220><c> U</c><00:20:58.490><c> suffix</c><00:20:59.360><c> to</c><00:21:00.020><c> declare</c><00:21:00.380><c> a</c><00:21:00.410><c> type</c><00:21:00.980><c> to</c><00:21:01.130><c> be</c>

00:21:01.240 --> 00:21:01.250 align:start position:0%
the U suffix to declare a type to be
 

00:21:01.250 --> 00:21:03.280 align:start position:0%
the U suffix to declare a type to be
unsigned<00:21:01.670><c> and</c><00:21:01.820><c> under</c><00:21:02.420><c> the</c><00:21:02.480><c> hood</c><00:21:02.660><c> they</c><00:21:03.230><c> are</c>

00:21:03.280 --> 00:21:03.290 align:start position:0%
unsigned and under the hood they are
 

00:21:03.290 --> 00:21:04.750 align:start position:0%
unsigned and under the hood they are
implemented<00:21:03.740><c> using</c><00:21:03.860><c> another</c><00:21:04.220><c> experimental</c>

00:21:04.750 --> 00:21:04.760 align:start position:0%
implemented using another experimental
 

00:21:04.760 --> 00:21:06.340 align:start position:0%
implemented using another experimental
feature<00:21:04.970><c> called</c><00:21:05.270><c> inline</c><00:21:05.630><c> classes</c><00:21:06.080><c> and</c><00:21:06.230><c> we're</c>

00:21:06.340 --> 00:21:06.350 align:start position:0%
feature called inline classes and we're
 

00:21:06.350 --> 00:21:07.540 align:start position:0%
feature called inline classes and we're
going<00:21:06.470><c> to</c><00:21:06.500><c> take</c><00:21:06.650><c> a</c><00:21:06.680><c> closer</c><00:21:06.980><c> look</c><00:21:07.160><c> at</c><00:21:07.340><c> the</c><00:21:07.430><c> nine</c>

00:21:07.540 --> 00:21:07.550 align:start position:0%
going to take a closer look at the nine
 

00:21:07.550 --> 00:21:09.340 align:start position:0%
going to take a closer look at the nine
classes<00:21:07.790><c> in</c><00:21:08.030><c> a</c><00:21:08.120><c> little</c><00:21:08.330><c> bit</c><00:21:08.450><c> but</c><00:21:08.930><c> first</c><00:21:09.140><c> let's</c>

00:21:09.340 --> 00:21:09.350 align:start position:0%
classes in a little bit but first let's
 

00:21:09.350 --> 00:21:10.750 align:start position:0%
classes in a little bit but first let's
take<00:21:09.500><c> a</c><00:21:09.560><c> look</c><00:21:09.740><c> at</c><00:21:09.800><c> this</c><00:21:09.920><c> example</c><00:21:10.190><c> so</c><00:21:10.430><c> I</c><00:21:10.460><c> declare</c>

00:21:10.750 --> 00:21:10.760 align:start position:0%
take a look at this example so I declare
 

00:21:10.760 --> 00:21:13.120 align:start position:0%
take a look at this example so I declare
two<00:21:11.030><c> unsigned</c><00:21:11.450><c> numbers</c><00:21:11.750><c> and</c><00:21:12.560><c> then</c><00:21:12.770><c> then</c><00:21:12.950><c> and</c>

00:21:13.120 --> 00:21:13.130 align:start position:0%
two unsigned numbers and then then and
 

00:21:13.130 --> 00:21:16.690 align:start position:0%
two unsigned numbers and then then and
then<00:21:13.400><c> I</c><00:21:13.520><c> just</c><00:21:13.700><c> add</c><00:21:13.910><c> them</c><00:21:14.180><c> so</c><00:21:15.140><c> what</c><00:21:15.290><c> happens</c><00:21:15.700><c> so</c>

00:21:16.690 --> 00:21:16.700 align:start position:0%
then I just add them so what happens so
 

00:21:16.700 --> 00:21:19.360 align:start position:0%
then I just add them so what happens so
every<00:21:17.240><c> unsigned</c><00:21:17.780><c> number</c><00:21:18.050><c> is</c><00:21:18.260><c> just</c><00:21:18.650><c> an</c><00:21:19.010><c> integer</c>

00:21:19.360 --> 00:21:19.370 align:start position:0%
every unsigned number is just an integer
 

00:21:19.370 --> 00:21:21.010 align:start position:0%
every unsigned number is just an integer
that's<00:21:19.700><c> pushed</c><00:21:19.970><c> on</c><00:21:20.090><c> the</c><00:21:20.180><c> stack</c><00:21:20.210><c> and</c><00:21:20.600><c> store</c><00:21:20.930><c> in</c>

00:21:21.010 --> 00:21:21.020 align:start position:0%
that's pushed on the stack and store in
 

00:21:21.020 --> 00:21:22.500 align:start position:0%
that's pushed on the stack and store in
a<00:21:21.080><c> variable</c><00:21:21.110><c> so</c><00:21:21.710><c> here</c><00:21:21.890><c> there's</c><00:21:22.070><c> nothing</c>

00:21:22.500 --> 00:21:22.510 align:start position:0%
a variable so here there's nothing
 

00:21:22.510 --> 00:21:24.970 align:start position:0%
a variable so here there's nothing
interesting<00:21:23.510><c> to</c><00:21:23.540><c> see</c><00:21:23.870><c> and</c><00:21:24.080><c> when</c><00:21:24.470><c> we</c><00:21:24.590><c> add</c><00:21:24.740><c> them</c>

00:21:24.970 --> 00:21:24.980 align:start position:0%
interesting to see and when we add them
 

00:21:24.980 --> 00:21:27.460 align:start position:0%
interesting to see and when we add them
we<00:21:25.250><c> just</c><00:21:25.790><c> load</c><00:21:26.030><c> those</c><00:21:26.240><c> two</c><00:21:26.360><c> variables</c><00:21:26.840><c> we</c><00:21:27.260><c> call</c>

00:21:27.460 --> 00:21:27.470 align:start position:0%
we just load those two variables we call
 

00:21:27.470 --> 00:21:30.430 align:start position:0%
we just load those two variables we call
the<00:21:27.650><c> I</c><00:21:27.710><c> add</c><00:21:28.070><c> operation</c><00:21:28.820><c> code</c><00:21:29.630><c> embed</c><00:21:30.230><c> code</c>

00:21:30.430 --> 00:21:30.440 align:start position:0%
the I add operation code embed code
 

00:21:30.440 --> 00:21:32.580 align:start position:0%
the I add operation code embed code
which<00:21:30.470><c> is</c><00:21:30.770><c> just</c><00:21:31.010><c> the</c><00:21:31.160><c> addition</c><00:21:31.910><c> of</c><00:21:32.060><c> two</c>

00:21:32.580 --> 00:21:32.590 align:start position:0%
which is just the addition of two
 

00:21:32.590 --> 00:21:35.800 align:start position:0%
which is just the addition of two
integers<00:21:33.590><c> which</c><00:21:33.800><c> are</c><00:21:33.920><c> normally</c><00:21:34.520><c> sign</c><00:21:34.760><c> but</c><00:21:35.690><c> gel</c>

00:21:35.800 --> 00:21:35.810 align:start position:0%
integers which are normally sign but gel
 

00:21:35.810 --> 00:21:36.970 align:start position:0%
integers which are normally sign but gel
rounds<00:21:36.050><c> that</c><00:21:36.110><c> were</c><00:21:36.230><c> very</c><00:21:36.380><c> clever</c><00:21:36.650><c> and</c><00:21:36.920><c> they</c>

00:21:36.970 --> 00:21:36.980 align:start position:0%
rounds that were very clever and they
 

00:21:36.980 --> 00:21:38.890 align:start position:0%
rounds that were very clever and they
realized<00:21:37.340><c> that</c><00:21:37.460><c> because</c><00:21:38.270><c> of</c><00:21:38.510><c> the</c><00:21:38.600><c> way</c><00:21:38.750><c> that</c>

00:21:38.890 --> 00:21:38.900 align:start position:0%
realized that because of the way that
 

00:21:38.900 --> 00:21:40.330 align:start position:0%
realized that because of the way that
sine<00:21:39.200><c> numbers</c><00:21:39.500><c> and</c><00:21:39.710><c> signed</c><00:21:39.860><c> integers</c><00:21:40.190><c> are</c>

00:21:40.330 --> 00:21:40.340 align:start position:0%
sine numbers and signed integers are
 

00:21:40.340 --> 00:21:42.430 align:start position:0%
sine numbers and signed integers are
encoded<00:21:40.700><c> it</c><00:21:41.090><c> actually</c><00:21:41.600><c> works</c><00:21:41.840><c> with</c><00:21:42.050><c> unsigned</c>

00:21:42.430 --> 00:21:42.440 align:start position:0%
encoded it actually works with unsigned
 

00:21:42.440 --> 00:21:43.600 align:start position:0%
encoded it actually works with unsigned
as<00:21:42.560><c> well</c><00:21:42.770><c> so</c><00:21:42.950><c> they</c><00:21:43.040><c> didn't</c><00:21:43.250><c> have</c><00:21:43.340><c> to</c><00:21:43.460><c> create</c>

00:21:43.600 --> 00:21:43.610 align:start position:0%
as well so they didn't have to create
 

00:21:43.610 --> 00:21:46.570 align:start position:0%
as well so they didn't have to create
any<00:21:44.380><c> anything</c><00:21:45.380><c> new</c><00:21:45.770><c> you</c><00:21:45.920><c> can</c><00:21:46.070><c> just</c><00:21:46.310><c> use</c><00:21:46.460><c> the</c>

00:21:46.570 --> 00:21:46.580 align:start position:0%
any anything new you can just use the
 

00:21:46.580 --> 00:21:48.130 align:start position:0%
any anything new you can just use the
existing<00:21:46.760><c> byte</c><00:21:47.150><c> code</c><00:21:47.360><c> everything</c><00:21:47.600><c> happens</c><00:21:48.050><c> at</c>

00:21:48.130 --> 00:21:48.140 align:start position:0%
existing byte code everything happens at
 

00:21:48.140 --> 00:21:49.810 align:start position:0%
existing byte code everything happens at
the<00:21:48.200><c> language</c><00:21:48.500><c> level</c><00:21:48.680><c> the</c><00:21:49.310><c> only</c><00:21:49.340><c> thing</c><00:21:49.700><c> that</c>

00:21:49.810 --> 00:21:49.820 align:start position:0%
the language level the only thing that
 

00:21:49.820 --> 00:21:51.490 align:start position:0%
the language level the only thing that
so<00:21:49.940><c> do</c><00:21:50.060><c> bizarre</c><00:21:50.450><c> here</c><00:21:50.690><c> is</c><00:21:50.810><c> that</c><00:21:50.960><c> we</c><00:21:51.110><c> invoke</c><00:21:51.470><c> a</c>

00:21:51.490 --> 00:21:51.500 align:start position:0%
so do bizarre here is that we invoke a
 

00:21:51.500 --> 00:21:53.790 align:start position:0%
so do bizarre here is that we invoke a
static<00:21:51.920><c> function</c><00:21:52.100><c> called</c><00:21:53.000><c> you</c><00:21:53.300><c> int</c><00:21:53.480><c> that</c>

00:21:53.790 --> 00:21:53.800 align:start position:0%
static function called you int that
 

00:21:53.800 --> 00:21:56.470 align:start position:0%
static function called you int that
constructor<00:21:54.800><c> -</c><00:21:55.070><c> in</c><00:21:55.310><c> pole</c><00:21:55.550><c> you</c><00:21:56.030><c> can</c><00:21:56.210><c> see</c><00:21:56.330><c> that</c>

00:21:56.470 --> 00:21:56.480 align:start position:0%
constructor - in pole you can see that
 

00:21:56.480 --> 00:21:58.360 align:start position:0%
constructor - in pole you can see that
it<00:21:56.660><c> takes</c><00:21:56.870><c> an</c><00:21:57.050><c> integer</c><00:21:57.320><c> and</c><00:21:57.710><c> returns</c><00:21:57.770><c> an</c>

00:21:58.360 --> 00:21:58.370 align:start position:0%
it takes an integer and returns an
 

00:21:58.370 --> 00:22:01.060 align:start position:0%
it takes an integer and returns an
integer<00:21:58.870><c> so</c><00:21:59.870><c> if</c><00:21:59.930><c> we</c><00:22:00.050><c> look</c><00:22:00.200><c> at</c><00:22:00.380><c> this</c><00:22:00.920><c> particular</c>

00:22:01.060 --> 00:22:01.070 align:start position:0%
integer so if we look at this particular
 

00:22:01.070 --> 00:22:03.250 align:start position:0%
integer so if we look at this particular
function<00:22:01.700><c> to</c><00:22:02.060><c> see</c><00:22:02.240><c> what</c><00:22:02.390><c> it</c><00:22:02.480><c> does</c><00:22:02.720><c> that's</c>

00:22:03.250 --> 00:22:03.260 align:start position:0%
function to see what it does that's
 

00:22:03.260 --> 00:22:05.170 align:start position:0%
function to see what it does that's
where<00:22:03.500><c> things</c><00:22:03.650><c> get</c><00:22:03.860><c> a</c><00:22:03.920><c> real</c><00:22:04.130><c> surprising</c><00:22:04.760><c> and</c>

00:22:05.170 --> 00:22:05.180 align:start position:0%
where things get a real surprising and
 

00:22:05.180 --> 00:22:07.180 align:start position:0%
where things get a real surprising and
I'm<00:22:05.360><c> sure</c><00:22:05.570><c> the</c><00:22:06.050><c> JetBrains</c><00:22:06.380><c> folks</c><00:22:06.620><c> we</c><00:22:06.770><c> know</c><00:22:06.920><c> why</c>

00:22:07.180 --> 00:22:07.190 align:start position:0%
I'm sure the JetBrains folks we know why
 

00:22:07.190 --> 00:22:10.150 align:start position:0%
I'm sure the JetBrains folks we know why
it<00:22:07.520><c> does</c><00:22:08.300><c> this</c><00:22:08.330><c> I</c><00:22:08.780><c> have</c><00:22:08.960><c> no</c><00:22:09.170><c> idea</c><00:22:09.470><c> so</c><00:22:09.950><c> we</c><00:22:10.070><c> have</c>

00:22:10.150 --> 00:22:10.160 align:start position:0%
it does this I have no idea so we have
 

00:22:10.160 --> 00:22:12.340 align:start position:0%
it does this I have no idea so we have
this<00:22:10.250><c> function</c><00:22:10.460><c> takes</c><00:22:11.030><c> an</c><00:22:11.240><c> integer</c><00:22:11.510><c> returns</c>

00:22:12.340 --> 00:22:12.350 align:start position:0%
this function takes an integer returns
 

00:22:12.350 --> 00:22:14.050 align:start position:0%
this function takes an integer returns
an<00:22:12.500><c> integer</c><00:22:12.740><c> and</c><00:22:13.100><c> here's</c><00:22:13.730><c> the</c><00:22:13.850><c> implementation</c>

00:22:14.050 --> 00:22:14.060 align:start position:0%
an integer and here's the implementation
 

00:22:14.060 --> 00:22:16.270 align:start position:0%
an integer and here's the implementation
it<00:22:14.660><c> loads</c><00:22:15.050><c> the</c><00:22:15.200><c> parameter</c><00:22:15.680><c> that</c><00:22:15.830><c> you</c><00:22:15.890><c> give</c><00:22:16.130><c> it</c>

00:22:16.270 --> 00:22:16.280 align:start position:0%
it loads the parameter that you give it
 

00:22:16.280 --> 00:22:20.710 align:start position:0%
it loads the parameter that you give it
and<00:22:16.490><c> then</c><00:22:17.210><c> it</c><00:22:17.540><c> returns</c><00:22:17.960><c> it</c><00:22:18.140><c> and</c><00:22:18.680><c> that's</c><00:22:18.890><c> it</c><00:22:19.720><c> so</c>

00:22:20.710 --> 00:22:20.720 align:start position:0%
and then it returns it and that's it so
 

00:22:20.720 --> 00:22:23.560 align:start position:0%
and then it returns it and that's it so
I<00:22:21.140><c> don't</c><00:22:21.590><c> know</c><00:22:21.680><c> why</c><00:22:21.860><c> why</c><00:22:22.340><c> it's</c><00:22:22.550><c> there</c><00:22:22.790><c> it's</c>

00:22:23.560 --> 00:22:23.570 align:start position:0%
I don't know why why it's there it's
 

00:22:23.570 --> 00:22:25.420 align:start position:0%
I don't know why why it's there it's
maybe<00:22:23.990><c> for</c><00:22:24.230><c> the</c><00:22:24.320><c> debugger</c><00:22:24.620><c> so</c><00:22:24.950><c> you</c><00:22:25.040><c> can</c><00:22:25.190><c> break</c>

00:22:25.420 --> 00:22:25.430 align:start position:0%
maybe for the debugger so you can break
 

00:22:25.430 --> 00:22:28.390 align:start position:0%
maybe for the debugger so you can break
on<00:22:25.580><c> it</c><00:22:25.730><c> but</c><00:22:26.570><c> other</c><00:22:26.870><c> than</c><00:22:27.020><c> that</c><00:22:27.130><c> you</c><00:22:28.130><c> know</c><00:22:28.220><c> I</c>

00:22:28.390 --> 00:22:28.400 align:start position:0%
on it but other than that you know I
 

00:22:28.400 --> 00:22:30.130 align:start position:0%
on it but other than that you know I
know<00:22:28.490><c> the</c><00:22:28.730><c> digits</c><00:22:29.120><c> or</c><00:22:29.300><c> the</c><00:22:29.630><c> ahead</c><00:22:29.870><c> of</c><00:22:29.990><c> time</c>

00:22:30.130 --> 00:22:30.140 align:start position:0%
know the digits or the ahead of time
 

00:22:30.140 --> 00:22:31.690 align:start position:0%
know the digits or the ahead of time
compiler<00:22:30.440><c> will</c><00:22:30.710><c> get</c><00:22:30.890><c> rid</c><00:22:31.070><c> of</c><00:22:31.100><c> it</c><00:22:31.280><c> or</c><00:22:31.430><c> probably</c>

00:22:31.690 --> 00:22:31.700 align:start position:0%
compiler will get rid of it or probably
 

00:22:31.700 --> 00:22:33.040 align:start position:0%
compiler will get rid of it or probably
all<00:22:31.880><c> right</c><00:22:32.030><c> so</c><00:22:32.480><c> you</c><00:22:32.570><c> don't</c><00:22:32.600><c> need</c><00:22:32.840><c> to</c><00:22:32.929><c> worry</c>

00:22:33.040 --> 00:22:33.050 align:start position:0%
all right so you don't need to worry
 

00:22:33.050 --> 00:22:34.210 align:start position:0%
all right so you don't need to worry
about<00:22:33.110><c> this</c><00:22:33.380><c> it's</c><00:22:33.620><c> just</c><00:22:33.800><c> a</c><00:22:33.860><c> little</c><00:22:33.980><c> strange</c>

00:22:34.210 --> 00:22:34.220 align:start position:0%
about this it's just a little strange
 

00:22:34.220 --> 00:22:36.340 align:start position:0%
about this it's just a little strange
that<00:22:34.460><c> we</c><00:22:34.580><c> have</c><00:22:34.670><c> this</c><00:22:34.790><c> extra</c><00:22:35.150><c> byte</c><00:22:35.330><c> code</c><00:22:35.540><c> for</c><00:22:36.260><c> no</c>

00:22:36.340 --> 00:22:36.350 align:start position:0%
that we have this extra byte code for no
 

00:22:36.350 --> 00:22:37.090 align:start position:0%
that we have this extra byte code for no
reason

00:22:37.090 --> 00:22:37.100 align:start position:0%
reason
 

00:22:37.100 --> 00:22:38.440 align:start position:0%
reason
so<00:22:37.190><c> if</c><00:22:37.280><c> you</c><00:22:37.370><c> look</c><00:22:37.490><c> at</c><00:22:37.580><c> the</c><00:22:37.669><c> other</c><00:22:37.760><c> operators</c><00:22:38.270><c> we</c>

00:22:38.440 --> 00:22:38.450 align:start position:0%
so if you look at the other operators we
 

00:22:38.450 --> 00:22:39.940 align:start position:0%
so if you look at the other operators we
saw<00:22:38.630><c> that</c><00:22:38.809><c> the</c><00:22:39.020><c> addition</c><00:22:39.620><c> is</c><00:22:39.770><c> just</c>

00:22:39.940 --> 00:22:39.950 align:start position:0%
saw that the addition is just
 

00:22:39.950 --> 00:22:41.620 align:start position:0%
saw that the addition is just
implemented<00:22:40.400><c> with</c><00:22:40.580><c> the</c><00:22:40.669><c> existing</c><00:22:41.000><c> opcode</c><00:22:41.390><c> add</c>

00:22:41.620 --> 00:22:41.630 align:start position:0%
implemented with the existing opcode add
 

00:22:41.630 --> 00:22:43.720 align:start position:0%
implemented with the existing opcode add
same<00:22:42.110><c> thing</c><00:22:42.289><c> for</c><00:22:42.440><c> the</c><00:22:42.530><c> subtraction</c><00:22:42.890><c> something</c>

00:22:43.720 --> 00:22:43.730 align:start position:0%
same thing for the subtraction something
 

00:22:43.730 --> 00:22:45.430 align:start position:0%
same thing for the subtraction something
with<00:22:43.850><c> the</c><00:22:43.940><c> multiplication</c><00:22:44.630><c> it's</c><00:22:45.140><c> only</c><00:22:45.260><c> when</c>

00:22:45.430 --> 00:22:45.440 align:start position:0%
with the multiplication it's only when
 

00:22:45.440 --> 00:22:47.890 align:start position:0%
with the multiplication it's only when
you<00:22:45.530><c> do</c><00:22:45.620><c> a</c><00:22:45.650><c> division</c><00:22:46.130><c> that</c><00:22:47.059><c> Katrina</c><00:22:47.480><c> has</c><00:22:47.660><c> to</c>

00:22:47.890 --> 00:22:47.900 align:start position:0%
you do a division that Katrina has to
 

00:22:47.900 --> 00:22:50.980 align:start position:0%
you do a division that Katrina has to
invoke<00:22:48.770><c> a</c><00:22:48.830><c> special</c><00:22:49.309><c> static</c><00:22:49.640><c> method</c><00:22:50.030><c> because</c>

00:22:50.980 --> 00:22:50.990 align:start position:0%
invoke a special static method because
 

00:22:50.990 --> 00:22:53.650 align:start position:0%
invoke a special static method because
the<00:22:51.080><c> dajun's</c><00:22:51.470><c> works</c><00:22:52.340><c> differently</c><00:22:52.700><c> so</c><00:22:53.480><c> there's</c>

00:22:53.650 --> 00:22:53.660 align:start position:0%
the dajun's works differently so there's
 

00:22:53.660 --> 00:22:54.970 align:start position:0%
the dajun's works differently so there's
more<00:22:53.840><c> code</c><00:22:54.020><c> that</c><00:22:54.140><c> runs</c><00:22:54.260><c> here</c><00:22:54.470><c> so</c><00:22:54.650><c> most</c><00:22:54.799><c> of</c><00:22:54.890><c> the</c>

00:22:54.970 --> 00:22:54.980 align:start position:0%
more code that runs here so most of the
 

00:22:54.980 --> 00:22:56.830 align:start position:0%
more code that runs here so most of the
time<00:22:55.130><c> you</c><00:22:55.250><c> know</c><00:22:55.340><c> the</c><00:22:55.730><c> unsigned</c><00:22:56.299><c> numbers</c><00:22:56.660><c> are</c>

00:22:56.830 --> 00:22:56.840 align:start position:0%
time you know the unsigned numbers are
 

00:22:56.840 --> 00:22:59.140 align:start position:0%
time you know the unsigned numbers are
basically<00:22:57.230><c> free</c><00:22:57.559><c> so</c><00:22:57.919><c> if</c><00:22:58.039><c> you</c><00:22:58.520><c> should</c><00:22:58.730><c> feel</c>

00:22:59.140 --> 00:22:59.150 align:start position:0%
basically free so if you should feel
 

00:22:59.150 --> 00:23:01.630 align:start position:0%
basically free so if you should feel
free<00:22:59.299><c> to</c><00:22:59.390><c> use</c><00:22:59.510><c> them</c><00:22:59.980><c> now</c><00:23:00.980><c> let's</c><00:23:01.130><c> look</c><00:23:01.309><c> at</c><00:23:01.429><c> what</c>

00:23:01.630 --> 00:23:01.640 align:start position:0%
free to use them now let's look at what
 

00:23:01.640 --> 00:23:03.010 align:start position:0%
free to use them now let's look at what
happens<00:23:01.940><c> when</c><00:23:02.030><c> you</c><00:23:02.150><c> try</c><00:23:02.330><c> to</c><00:23:02.390><c> print</c><00:23:02.690><c> one</c><00:23:02.900><c> of</c>

00:23:03.010 --> 00:23:03.020 align:start position:0%
happens when you try to print one of
 

00:23:03.020 --> 00:23:04.270 align:start position:0%
happens when you try to print one of
those<00:23:03.140><c> numbers</c><00:23:03.470><c> basically</c><00:23:03.860><c> when</c><00:23:03.980><c> you</c><00:23:04.070><c> try</c><00:23:04.220><c> to</c>

00:23:04.270 --> 00:23:04.280 align:start position:0%
those numbers basically when you try to
 

00:23:04.280 --> 00:23:05.950 align:start position:0%
those numbers basically when you try to
call<00:23:04.490><c> to</c><00:23:04.669><c> string</c><00:23:04.880><c> on</c><00:23:05.000><c> it</c><00:23:05.030><c> so</c><00:23:05.299><c> here</c><00:23:05.510><c> I</c><00:23:05.539><c> have</c><00:23:05.780><c> a</c>

00:23:05.950 --> 00:23:05.960 align:start position:0%
call to string on it so here I have a
 

00:23:05.960 --> 00:23:08.049 align:start position:0%
call to string on it so here I have a
signed<00:23:06.320><c> number</c><00:23:06.559><c> and</c><00:23:06.919><c> an</c><00:23:07.100><c> unsigned</c><00:23:07.520><c> number</c><00:23:07.880><c> and</c>

00:23:08.049 --> 00:23:08.059 align:start position:0%
signed number and an unsigned number and
 

00:23:08.059 --> 00:23:10.659 align:start position:0%
signed number and an unsigned number and
I<00:23:08.390><c> print</c><00:23:08.660><c> them</c><00:23:08.780><c> both</c><00:23:08.990><c> so</c><00:23:09.650><c> first</c><00:23:09.950><c> let's</c><00:23:10.340><c> look</c><00:23:10.429><c> at</c>

00:23:10.659 --> 00:23:10.669 align:start position:0%
I print them both so first let's look at
 

00:23:10.669 --> 00:23:12.730 align:start position:0%
I print them both so first let's look at
the<00:23:10.760><c> sign</c><00:23:11.000><c> number</c><00:23:11.360><c> so</c><00:23:12.110><c> we</c><00:23:12.350><c> have</c><00:23:12.440><c> this</c><00:23:12.500><c> variable</c>

00:23:12.730 --> 00:23:12.740 align:start position:0%
the sign number so we have this variable
 

00:23:12.740 --> 00:23:14.590 align:start position:0%
the sign number so we have this variable
called<00:23:13.039><c> Z</c><00:23:13.250><c> is</c><00:23:13.309><c> equal</c><00:23:13.580><c> to</c><00:23:13.700><c> 42</c><00:23:14.030><c> and</c><00:23:14.330><c> we</c><00:23:14.390><c> call</c>

00:23:14.590 --> 00:23:14.600 align:start position:0%
called Z is equal to 42 and we call
 

00:23:14.600 --> 00:23:18.730 align:start position:0%
called Z is equal to 42 and we call
println<00:23:15.470><c> on</c><00:23:15.710><c> it</c><00:23:16.720><c> so</c><00:23:17.720><c> that's</c><00:23:17.929><c> exactly</c><00:23:18.380><c> what</c><00:23:18.530><c> we</c>

00:23:18.730 --> 00:23:18.740 align:start position:0%
println on it so that's exactly what we
 

00:23:18.740 --> 00:23:20.140 align:start position:0%
println on it so that's exactly what we
expect<00:23:19.100><c> but</c><00:23:19.309><c> when</c><00:23:19.429><c> we</c><00:23:19.549><c> use</c><00:23:19.669><c> the</c><00:23:19.760><c> unsigned</c>

00:23:20.140 --> 00:23:20.150 align:start position:0%
expect but when we use the unsigned
 

00:23:20.150 --> 00:23:22.299 align:start position:0%
expect but when we use the unsigned
number<00:23:20.510><c> instead</c><00:23:21.169><c> of</c><00:23:21.260><c> printing</c><00:23:21.710><c> it</c><00:23:21.830><c> directly</c>

00:23:22.299 --> 00:23:22.309 align:start position:0%
number instead of printing it directly
 

00:23:22.309 --> 00:23:25.419 align:start position:0%
number instead of printing it directly
because<00:23:23.299><c> the</c><00:23:24.200><c> default</c><00:23:24.440><c> print</c><00:23:24.799><c> a</c><00:23:24.860><c> line</c><00:23:25.039><c> in</c><00:23:25.250><c> the</c>

00:23:25.419 --> 00:23:25.429 align:start position:0%
because the default print a line in the
 

00:23:25.429 --> 00:23:27.279 align:start position:0%
because the default print a line in the
run<00:23:25.580><c> time</c><00:23:25.730><c> does</c><00:23:25.970><c> not</c><00:23:26.179><c> know</c><00:23:26.390><c> about</c><00:23:26.419><c> unsigned</c>

00:23:27.279 --> 00:23:27.289 align:start position:0%
run time does not know about unsigned
 

00:23:27.289 --> 00:23:29.110 align:start position:0%
run time does not know about unsigned
numbers<00:23:27.620><c> we</c><00:23:28.070><c> have</c><00:23:28.280><c> to</c><00:23:28.309><c> go</c><00:23:28.549><c> through</c><00:23:28.760><c> something</c>

00:23:29.110 --> 00:23:29.120 align:start position:0%
numbers we have to go through something
 

00:23:29.120 --> 00:23:29.440 align:start position:0%
numbers we have to go through something
else

00:23:29.440 --> 00:23:29.450 align:start position:0%
else
 

00:23:29.450 --> 00:23:31.270 align:start position:0%
else
and<00:23:29.570><c> because</c><00:23:30.260><c> the</c><00:23:30.500><c> unsigned</c><00:23:30.799><c> numbers</c><00:23:31.130><c> are</c>

00:23:31.270 --> 00:23:31.280 align:start position:0%
and because the unsigned numbers are
 

00:23:31.280 --> 00:23:33.010 align:start position:0%
and because the unsigned numbers are
implemented<00:23:31.490><c> using</c><00:23:31.789><c> in</c><00:23:32.240><c> line</c><00:23:32.390><c> classes</c><00:23:32.840><c> we</c>

00:23:33.010 --> 00:23:33.020 align:start position:0%
implemented using in line classes we
 

00:23:33.020 --> 00:23:34.930 align:start position:0%
implemented using in line classes we
have<00:23:33.110><c> to</c><00:23:33.260><c> box</c><00:23:33.559><c> so</c><00:23:34.159><c> because</c><00:23:34.490><c> call</c><00:23:34.850><c> this</c>

00:23:34.930 --> 00:23:34.940 align:start position:0%
have to box so because call this
 

00:23:34.940 --> 00:23:37.149 align:start position:0%
have to box so because call this
function<00:23:35.150><c> called</c><00:23:35.510><c> box</c><00:23:35.809><c> -</c><00:23:36.080><c> in</c><00:23:36.320><c> pole</c><00:23:36.500><c> it</c><00:23:36.860><c> takes</c>

00:23:37.149 --> 00:23:37.159 align:start position:0%
function called box - in pole it takes
 

00:23:37.159 --> 00:23:39.610 align:start position:0%
function called box - in pole it takes
our<00:23:37.309><c> unsigned</c><00:23:37.730><c> integers</c><00:23:38.240><c> and</c><00:23:38.480><c> wrap</c><00:23:39.049><c> it</c><00:23:39.230><c> into</c>

00:23:39.610 --> 00:23:39.620 align:start position:0%
our unsigned integers and wrap it into
 

00:23:39.620 --> 00:23:41.620 align:start position:0%
our unsigned integers and wrap it into
an<00:23:39.710><c> instance</c><00:23:40.100><c> of</c><00:23:40.280><c> a</c><00:23:40.400><c> class</c><00:23:40.580><c> called</c><00:23:40.700><c> EWTN's</c><00:23:41.360><c> and</c>

00:23:41.620 --> 00:23:41.630 align:start position:0%
an instance of a class called EWTN's and
 

00:23:41.630 --> 00:23:44.080 align:start position:0%
an instance of a class called EWTN's and
that<00:23:42.230><c> gets</c><00:23:42.470><c> passed</c><00:23:42.830><c> to</c><00:23:43.010><c> println</c><00:23:43.460><c> because</c><00:23:43.909><c> you</c>

00:23:44.080 --> 00:23:44.090 align:start position:0%
that gets passed to println because you
 

00:23:44.090 --> 00:23:45.789 align:start position:0%
that gets passed to println because you
int<00:23:44.270><c> has</c><00:23:44.600><c> a</c><00:23:44.630><c> two</c><00:23:44.900><c> string</c><00:23:45.169><c> method</c><00:23:45.620><c> that's</c>

00:23:45.789 --> 00:23:45.799 align:start position:0%
int has a two string method that's
 

00:23:45.799 --> 00:23:47.470 align:start position:0%
int has a two string method that's
implementing<00:23:46.370><c> and</c><00:23:46.610><c> then</c><00:23:46.760><c> there's</c><00:23:47.240><c> the</c><00:23:47.330><c> right</c>

00:23:47.470 --> 00:23:47.480 align:start position:0%
implementing and then there's the right
 

00:23:47.480 --> 00:23:49.240 align:start position:0%
implementing and then there's the right
thing<00:23:47.690><c> so</c><00:23:48.230><c> even</c><00:23:48.260><c> if</c><00:23:48.620><c> you</c><00:23:48.740><c> use</c><00:23:48.799><c> unsigned</c>

00:23:49.240 --> 00:23:49.250 align:start position:0%
thing so even if you use unsigned
 

00:23:49.250 --> 00:23:51.039 align:start position:0%
thing so even if you use unsigned
numbers<00:23:49.580><c> and</c><00:23:50.240><c> there</c><00:23:50.419><c> are</c><00:23:50.480><c> most</c><00:23:50.659><c> of</c><00:23:50.780><c> the</c><00:23:50.870><c> time</c>

00:23:51.039 --> 00:23:51.049 align:start position:0%
numbers and there are most of the time
 

00:23:51.049 --> 00:23:52.990 align:start position:0%
numbers and there are most of the time
free<00:23:51.409><c> you</c><00:23:51.679><c> can</c><00:23:51.830><c> end</c><00:23:51.980><c> up</c><00:23:52.070><c> doing</c><00:23:52.309><c> boxing</c><00:23:52.820><c> and</c>

00:23:52.990 --> 00:23:53.000 align:start position:0%
free you can end up doing boxing and
 

00:23:53.000 --> 00:23:55.149 align:start position:0%
free you can end up doing boxing and
therefore<00:23:53.270><c> allocation</c><00:23:53.900><c> fairly</c><00:23:54.590><c> easily</c><00:23:54.799><c> if</c>

00:23:55.149 --> 00:23:55.159 align:start position:0%
therefore allocation fairly easily if
 

00:23:55.159 --> 00:23:56.770 align:start position:0%
therefore allocation fairly easily if
you<00:23:55.190><c> just</c><00:23:55.490><c> add</c><00:23:55.700><c> them</c><00:23:55.940><c> to</c><00:23:56.179><c> a</c><00:23:56.210><c> string</c><00:23:56.510><c> for</c>

00:23:56.770 --> 00:23:56.780 align:start position:0%
you just add them to a string for
 

00:23:56.780 --> 00:23:59.710 align:start position:0%
you just add them to a string for
instance<00:23:57.429><c> talk</c><00:23:58.429><c> about</c><00:23:58.580><c> ranges</c><00:23:59.059><c> one</c><00:23:59.419><c> of</c><00:23:59.539><c> the</c>

00:23:59.710 --> 00:23:59.720 align:start position:0%
instance talk about ranges one of the
 

00:23:59.720 --> 00:24:02.049 align:start position:0%
instance talk about ranges one of the
curious<00:24:00.559><c> things</c><00:24:00.650><c> that</c><00:24:01.250><c> a</c><00:24:01.460><c> lot</c><00:24:01.549><c> of</c><00:24:01.669><c> programmers</c>

00:24:02.049 --> 00:24:02.059 align:start position:0%
curious things that a lot of programmers
 

00:24:02.059 --> 00:24:03.789 align:start position:0%
curious things that a lot of programmers
hit<00:24:02.360><c> when</c><00:24:02.539><c> they</c><00:24:02.659><c> see</c><00:24:02.960><c> Colin</c><00:24:03.320><c> for</c><00:24:03.559><c> the</c><00:24:03.620><c> first</c>

00:24:03.789 --> 00:24:03.799 align:start position:0%
hit when they see Colin for the first
 

00:24:03.799 --> 00:24:05.890 align:start position:0%
hit when they see Colin for the first
time<00:24:04.010><c> is</c><00:24:04.190><c> -</c><00:24:04.340><c> for</c><00:24:04.580><c> loops</c><00:24:04.850><c> they</c><00:24:05.059><c> kind</c><00:24:05.690><c> of</c><00:24:05.720><c> look</c>

00:24:05.890 --> 00:24:05.900 align:start position:0%
time is - for loops they kind of look
 

00:24:05.900 --> 00:24:07.390 align:start position:0%
time is - for loops they kind of look
for<00:24:06.080><c> the</c><00:24:06.169><c> syntax</c><00:24:06.590><c> that</c><00:24:06.679><c> they</c><00:24:06.890><c> always</c><00:24:07.220><c> knew</c>

00:24:07.390 --> 00:24:07.400 align:start position:0%
for the syntax that they always knew
 

00:24:07.400 --> 00:24:10.240 align:start position:0%
for the syntax that they always knew
from<00:24:07.429><c> Java</c><00:24:08.059><c> or</c><00:24:08.330><c> C</c><00:24:08.510><c> or</c><00:24:08.539><c> C++</c><00:24:09.020><c> or</c><00:24:09.559><c> other</c><00:24:09.740><c> languages</c>

00:24:10.240 --> 00:24:10.250 align:start position:0%
from Java or C or C++ or other languages
 

00:24:10.250 --> 00:24:13.060 align:start position:0%
from Java or C or C++ or other languages
and<00:24:10.460><c> it's</c><00:24:11.330><c> not</c><00:24:11.600><c> that</c><00:24:11.929><c> instead</c><00:24:12.350><c> all</c><00:24:12.590><c> of</c><00:24:12.620><c> the</c><00:24:12.830><c> for</c>

00:24:13.060 --> 00:24:13.070 align:start position:0%
and it's not that instead all of the for
 

00:24:13.070 --> 00:24:16.330 align:start position:0%
and it's not that instead all of the for
loops<00:24:13.600><c> work</c><00:24:14.600><c> with</c><00:24:14.870><c> ranges</c><00:24:15.500><c> and</c><00:24:15.740><c> there</c><00:24:16.220><c> are</c>

00:24:16.330 --> 00:24:16.340 align:start position:0%
loops work with ranges and there are
 

00:24:16.340 --> 00:24:18.399 align:start position:0%
loops work with ranges and there are
many<00:24:16.520><c> ways</c><00:24:16.850><c> to</c><00:24:17.179><c> do</c><00:24:17.330><c> this</c><00:24:17.510><c> so</c><00:24:17.780><c> you</c><00:24:17.840><c> could</c><00:24:18.169><c> say</c>

00:24:18.399 --> 00:24:18.409 align:start position:0%
many ways to do this so you could say
 

00:24:18.409 --> 00:24:21.610 align:start position:0%
many ways to do this so you could say
for<00:24:18.440><c> I</c><00:24:18.710><c> in</c><00:24:18.830><c> this</c><00:24:19.760><c> range</c><00:24:20.090><c> of</c><00:24:20.330><c> 0</c><00:24:20.570><c> to</c><00:24:20.720><c> 10</c><00:24:20.870><c> inclusive</c>

00:24:21.610 --> 00:24:21.620 align:start position:0%
for I in this range of 0 to 10 inclusive
 

00:24:21.620 --> 00:24:25.000 align:start position:0%
for I in this range of 0 to 10 inclusive
or<00:24:22.130><c> exclusive</c><00:24:22.750><c> until</c><00:24:23.750><c> you</c><00:24:23.900><c> get</c><00:24:24.080><c> to</c><00:24:24.230><c> 10</c><00:24:24.260><c> or</c><00:24:24.679><c> you</c>

00:24:25.000 --> 00:24:25.010 align:start position:0%
or exclusive until you get to 10 or you
 

00:24:25.010 --> 00:24:26.289 align:start position:0%
or exclusive until you get to 10 or you
could<00:24:25.130><c> just</c><00:24:25.159><c> say</c><00:24:25.429><c> repeat</c><00:24:25.820><c> the</c><00:24:25.970><c> following</c>

00:24:26.289 --> 00:24:26.299 align:start position:0%
could just say repeat the following
 

00:24:26.299 --> 00:24:28.659 align:start position:0%
could just say repeat the following
operation<00:24:26.990><c> give</c><00:24:27.679><c> it</c><00:24:27.799><c> the</c><00:24:27.919><c> lambda</c><00:24:28.280><c> there</c><00:24:28.460><c> or</c>

00:24:28.659 --> 00:24:28.669 align:start position:0%
operation give it the lambda there or
 

00:24:28.669 --> 00:24:30.250 align:start position:0%
operation give it the lambda there or
you<00:24:28.820><c> could</c><00:24:29.000><c> put</c><00:24:29.210><c> the</c><00:24:29.330><c> range</c><00:24:29.510><c> on</c><00:24:29.870><c> the</c><00:24:30.020><c> front</c>

00:24:30.250 --> 00:24:30.260 align:start position:0%
you could put the range on the front
 

00:24:30.260 --> 00:24:32.919 align:start position:0%
you could put the range on the front
these<00:24:30.559><c> all</c><00:24:30.770><c> look</c><00:24:31.190><c> the</c><00:24:31.549><c> same</c><00:24:31.580><c> to</c><00:24:31.820><c> me</c><00:24:32.090><c> modulo</c>

00:24:32.919 --> 00:24:32.929 align:start position:0%
these all look the same to me modulo
 

00:24:32.929 --> 00:24:34.779 align:start position:0%
these all look the same to me modulo
that<00:24:33.169><c> off</c><00:24:33.409><c> by</c><00:24:33.710><c> one</c><00:24:33.919><c> error</c><00:24:34.159><c> that</c><00:24:34.429><c> we</c><00:24:34.520><c> have</c><00:24:34.669><c> in</c>

00:24:34.779 --> 00:24:34.789 align:start position:0%
that off by one error that we have in
 

00:24:34.789 --> 00:24:38.020 align:start position:0%
that off by one error that we have in
the<00:24:34.880><c> second</c><00:24:35.179><c> one</c><00:24:35.270><c> right</c><00:24:35.299><c> so</c><00:24:36.580><c> it</c><00:24:37.580><c> turns</c><00:24:37.850><c> out</c>

00:24:38.020 --> 00:24:38.030 align:start position:0%
the second one right so it turns out
 

00:24:38.030 --> 00:24:39.610 align:start position:0%
the second one right so it turns out
they're<00:24:38.240><c> kind</c><00:24:38.570><c> of</c><00:24:38.630><c> different</c><00:24:39.020><c> under</c><00:24:39.320><c> the</c><00:24:39.350><c> hood</c>

00:24:39.610 --> 00:24:39.620 align:start position:0%
they're kind of different under the hood
 

00:24:39.620 --> 00:24:41.260 align:start position:0%
they're kind of different under the hood
so<00:24:39.650><c> that</c><00:24:39.919><c> first</c><00:24:40.159><c> one</c><00:24:40.370><c> works</c><00:24:40.640><c> the</c><00:24:40.850><c> way</c><00:24:40.940><c> that</c><00:24:41.179><c> we</c>

00:24:41.260 --> 00:24:41.270 align:start position:0%
so that first one works the way that we
 

00:24:41.270 --> 00:24:43.060 align:start position:0%
so that first one works the way that we
would<00:24:41.450><c> think</c><00:24:41.480><c> it's</c><00:24:41.840><c> basically</c><00:24:42.230><c> equivalent</c><00:24:42.950><c> of</c>

00:24:43.060 --> 00:24:43.070 align:start position:0%
would think it's basically equivalent of
 

00:24:43.070 --> 00:24:46.180 align:start position:0%
would think it's basically equivalent of
the<00:24:43.549><c> for</c><00:24:43.789><c> loop</c><00:24:44.000><c> we</c><00:24:44.179><c> would</c><00:24:44.360><c> expect</c><00:24:44.690><c> in</c><00:24:45.470><c> Java</c>

00:24:46.180 --> 00:24:46.190 align:start position:0%
the for loop we would expect in Java
 

00:24:46.190 --> 00:24:48.130 align:start position:0%
the for loop we would expect in Java
second<00:24:46.880><c> ones</c><00:24:47.000><c> same</c><00:24:47.299><c> thing</c><00:24:47.540><c> except</c><00:24:47.929><c> we're</c><00:24:48.020><c> not</c>

00:24:48.130 --> 00:24:48.140 align:start position:0%
second ones same thing except we're not
 

00:24:48.140 --> 00:24:49.539 align:start position:0%
second ones same thing except we're not
going<00:24:48.409><c> all</c><00:24:48.559><c> the</c><00:24:48.679><c> way</c><00:24:48.770><c> to</c><00:24:48.830><c> the</c><00:24:48.980><c> last</c><00:24:49.130><c> value</c>

00:24:49.539 --> 00:24:49.549 align:start position:0%
going all the way to the last value
 

00:24:49.549 --> 00:24:50.220 align:start position:0%
going all the way to the last value
there

00:24:50.220 --> 00:24:50.230 align:start position:0%
there
 

00:24:50.230 --> 00:24:51.600 align:start position:0%
there
same<00:24:50.350><c> thing</c><00:24:50.590><c> for</c><00:24:50.620><c> the</c><00:24:50.919><c> third</c><00:24:51.100><c> like</c><00:24:51.429><c> all</c>

00:24:51.600 --> 00:24:51.610 align:start position:0%
same thing for the third like all
 

00:24:51.610 --> 00:24:53.789 align:start position:0%
same thing for the third like all
straightforward<00:24:52.150><c> iterations</c><00:24:52.630><c> but</c><00:24:52.870><c> the</c><00:24:53.650><c> way</c>

00:24:53.789 --> 00:24:53.799 align:start position:0%
straightforward iterations but the way
 

00:24:53.799 --> 00:24:56.640 align:start position:0%
straightforward iterations but the way
the<00:24:54.010><c> last</c><00:24:54.309><c> one</c><00:24:54.490><c> is</c><00:24:55.200><c> implemented</c><00:24:56.200><c> is</c><00:24:56.290><c> a</c><00:24:56.320><c> little</c>

00:24:56.640 --> 00:24:56.650 align:start position:0%
the last one is implemented is a little
 

00:24:56.650 --> 00:24:58.320 align:start position:0%
the last one is implemented is a little
different<00:24:57.010><c> instead</c><00:24:57.190><c> we're</c><00:24:57.730><c> gonna</c><00:24:57.850><c> create</c><00:24:58.179><c> an</c>

00:24:58.320 --> 00:24:58.330 align:start position:0%
different instead we're gonna create an
 

00:24:58.330 --> 00:25:00.180 align:start position:0%
different instead we're gonna create an
iterable<00:24:58.660><c> object</c><00:24:59.169><c> we're</c><00:24:59.320><c> gonna</c><00:24:59.410><c> create</c><00:24:59.770><c> an</c><00:24:59.980><c> in</c>

00:25:00.180 --> 00:25:00.190 align:start position:0%
iterable object we're gonna create an in
 

00:25:00.190 --> 00:25:01.770 align:start position:0%
iterable object we're gonna create an in
range<00:25:00.490><c> object</c><00:25:00.970><c> and</c><00:25:01.150><c> then</c><00:25:01.510><c> we're</c><00:25:01.600><c> gonna</c><00:25:01.690><c> use</c>

00:25:01.770 --> 00:25:01.780 align:start position:0%
range object and then we're gonna use
 

00:25:01.780 --> 00:25:04.260 align:start position:0%
range object and then we're gonna use
the<00:25:01.990><c> iteration</c><00:25:02.650><c> mechanism</c><00:25:03.250><c> which</c><00:25:03.700><c> seems</c><00:25:04.120><c> a</c>

00:25:04.260 --> 00:25:04.270 align:start position:0%
the iteration mechanism which seems a
 

00:25:04.270 --> 00:25:05.940 align:start position:0%
the iteration mechanism which seems a
little<00:25:04.299><c> bit</c><00:25:04.540><c> heavyweight</c><00:25:05.049><c> for</c><00:25:05.410><c> just</c><00:25:05.770><c> having</c>

00:25:05.940 --> 00:25:05.950 align:start position:0%
little bit heavyweight for just having
 

00:25:05.950 --> 00:25:08.789 align:start position:0%
little bit heavyweight for just having
flips<00:25:06.490><c> the</c><00:25:07.270><c> range</c><00:25:07.450><c> to</c><00:25:07.690><c> the</c><00:25:07.720><c> front</c><00:25:08.020><c> they're</c><00:25:08.260><c> not</c>

00:25:08.789 --> 00:25:08.799 align:start position:0%
flips the range to the front they're not
 

00:25:08.799 --> 00:25:10.620 align:start position:0%
flips the range to the front they're not
a<00:25:08.830><c> big</c><00:25:09.040><c> deal</c><00:25:09.280><c> but</c><00:25:09.549><c> kind</c><00:25:09.940><c> of</c><00:25:09.970><c> curious</c><00:25:10.330><c> that</c>

00:25:10.620 --> 00:25:10.630 align:start position:0%
a big deal but kind of curious that
 

00:25:10.630 --> 00:25:12.390 align:start position:0%
a big deal but kind of curious that
they're<00:25:11.350><c> all</c><00:25:11.470><c> quite</c><00:25:11.770><c> different</c><00:25:11.799><c> under</c><00:25:12.309><c> the</c>

00:25:12.390 --> 00:25:12.400 align:start position:0%
they're all quite different under the
 

00:25:12.400 --> 00:25:17.640 align:start position:0%
they're all quite different under the
hood<00:25:14.130><c> yes</c><00:25:15.130><c> so</c><00:25:15.520><c> in</c><00:25:16.419><c> the</c><00:25:16.840><c> traditional</c><00:25:17.230><c> for</c><00:25:17.500><c> loop</c>

00:25:17.640 --> 00:25:17.650 align:start position:0%
hood yes so in the traditional for loop
 

00:25:17.650 --> 00:25:19.110 align:start position:0%
hood yes so in the traditional for loop
with<00:25:17.830><c> other</c><00:25:17.980><c> languages</c><00:25:18.549><c> you</c><00:25:18.760><c> can</c><00:25:18.910><c> easily</c>

00:25:19.110 --> 00:25:19.120 align:start position:0%
with other languages you can easily
 

00:25:19.120 --> 00:25:21.299 align:start position:0%
with other languages you can easily
increment<00:25:19.900><c> the</c><00:25:19.960><c> counter</c><00:25:20.320><c> by</c><00:25:20.530><c> more</c><00:25:20.950><c> than</c><00:25:21.070><c> one</c>

00:25:21.299 --> 00:25:21.309 align:start position:0%
increment the counter by more than one
 

00:25:21.309 --> 00:25:22.799 align:start position:0%
increment the counter by more than one
so<00:25:21.490><c> doing</c><00:25:21.730><c> plus</c><00:25:21.940><c> plus</c><00:25:22.179><c> you</c><00:25:22.299><c> can</c><00:25:22.450><c> say</c><00:25:22.570><c> plus</c>

00:25:22.799 --> 00:25:22.809 align:start position:0%
so doing plus plus you can say plus
 

00:25:22.809 --> 00:25:24.480 align:start position:0%
so doing plus plus you can say plus
equal<00:25:23.110><c> to</c><00:25:23.260><c> and</c><00:25:23.740><c> the</c><00:25:23.860><c> way</c><00:25:23.950><c> you</c><00:25:24.010><c> do</c><00:25:24.160><c> this</c><00:25:24.280><c> in</c>

00:25:24.480 --> 00:25:24.490 align:start position:0%
equal to and the way you do this in
 

00:25:24.490 --> 00:25:27.480 align:start position:0%
equal to and the way you do this in
cutting<00:25:24.850><c> is</c><00:25:25.059><c> you</c><00:25:25.210><c> can</c><00:25:25.360><c> use</c><00:25:25.480><c> the</c><00:25:25.720><c> step</c><00:25:26.490><c> operator</c>

00:25:27.480 --> 00:25:27.490 align:start position:0%
cutting is you can use the step operator
 

00:25:27.490 --> 00:25:29.610 align:start position:0%
cutting is you can use the step operator
or<00:25:27.700><c> in</c><00:25:28.120><c> fixed</c><00:25:28.450><c> function</c><00:25:28.570><c> so</c><00:25:29.230><c> in</c><00:25:29.320><c> that</c><00:25:29.410><c> case</c>

00:25:29.610 --> 00:25:29.620 align:start position:0%
or in fixed function so in that case
 

00:25:29.620 --> 00:25:31.890 align:start position:0%
or in fixed function so in that case
we're<00:25:29.830><c> going</c><00:25:29.980><c> to</c><00:25:30.100><c> go</c><00:25:30.309><c> from</c><00:25:30.640><c> 0</c><00:25:30.940><c> to</c><00:25:31.150><c> 10</c><00:25:31.360><c> inclusive</c>

00:25:31.890 --> 00:25:31.900 align:start position:0%
we're going to go from 0 to 10 inclusive
 

00:25:31.900 --> 00:25:33.960 align:start position:0%
we're going to go from 0 to 10 inclusive
and<00:25:32.290><c> we</c><00:25:32.770><c> inclusive</c><00:25:33.460><c> and</c><00:25:33.580><c> we</c><00:25:33.669><c> want</c><00:25:33.850><c> it</c><00:25:33.910><c> to</c>

00:25:33.960 --> 00:25:33.970 align:start position:0%
and we inclusive and we want it to
 

00:25:33.970 --> 00:25:36.090 align:start position:0%
and we inclusive and we want it to
increment<00:25:34.450><c> by</c><00:25:34.540><c> 2</c><00:25:34.570><c> it</c><00:25:34.990><c> says</c><00:25:35.200><c> step</c><00:25:35.470><c> through</c><00:25:35.799><c> and</c>

00:25:36.090 --> 00:25:36.100 align:start position:0%
increment by 2 it says step through and
 

00:25:36.100 --> 00:25:38.310 align:start position:0%
increment by 2 it says step through and
I<00:25:36.669><c> would</c><00:25:36.790><c> expect</c><00:25:37.179><c> the</c><00:25:37.299><c> code</c><00:25:37.660><c> to</c><00:25:37.900><c> look</c><00:25:37.990><c> exactly</c>

00:25:38.310 --> 00:25:38.320 align:start position:0%
I would expect the code to look exactly
 

00:25:38.320 --> 00:25:40.169 align:start position:0%
I would expect the code to look exactly
the<00:25:38.500><c> same</c><00:25:38.590><c> as</c><00:25:38.860><c> before</c><00:25:38.890><c> but</c><00:25:39.610><c> we</c><00:25:39.790><c> get</c><00:25:39.940><c> this</c>

00:25:40.169 --> 00:25:40.179 align:start position:0%
the same as before but we get this
 

00:25:40.179 --> 00:25:43.590 align:start position:0%
the same as before but we get this
instead<00:25:40.720><c> so</c><00:25:41.290><c> just</c><00:25:41.530><c> by</c><00:25:41.650><c> adding</c><00:25:41.860><c> step</c><00:25:42.600><c> an</c>

00:25:43.590 --> 00:25:43.600 align:start position:0%
instead so just by adding step an
 

00:25:43.600 --> 00:25:45.090 align:start position:0%
instead so just by adding step an
optimization<00:25:44.200><c> the</c><00:25:44.320><c> compiler</c><00:25:44.620><c> basically</c>

00:25:45.090 --> 00:25:45.100 align:start position:0%
optimization the compiler basically
 

00:25:45.100 --> 00:25:47.250 align:start position:0%
optimization the compiler basically
disappears<00:25:45.669><c> and</c><00:25:46.090><c> said</c><00:25:46.480><c> we</c><00:25:46.600><c> have</c><00:25:46.840><c> to</c><00:25:46.870><c> create</c><00:25:47.230><c> a</c>

00:25:47.250 --> 00:25:47.260 align:start position:0%
disappears and said we have to create a
 

00:25:47.260 --> 00:25:48.990 align:start position:0%
disappears and said we have to create a
range<00:25:47.559><c> we</c><00:25:48.160><c> have</c><00:25:48.280><c> to</c><00:25:48.400><c> create</c><00:25:48.610><c> this</c><00:25:48.730><c> in</c>

00:25:48.990 --> 00:25:49.000 align:start position:0%
range we have to create this in
 

00:25:49.000 --> 00:25:50.850 align:start position:0%
range we have to create this in
progression<00:25:49.630><c> and</c><00:25:49.780><c> then</c><00:25:50.080><c> the</c><00:25:50.169><c> compiler</c><00:25:50.410><c> calls</c>

00:25:50.850 --> 00:25:50.860 align:start position:0%
progression and then the compiler calls
 

00:25:50.860 --> 00:25:53.130 align:start position:0%
progression and then the compiler calls
get<00:25:51.250><c> first</c><00:25:51.520><c> get</c><00:25:51.790><c> less</c><00:25:52.000><c> and</c><00:25:52.270><c> get</c><00:25:52.450><c> step</c><00:25:52.720><c> which</c>

00:25:53.130 --> 00:25:53.140 align:start position:0%
get first get less and get step which
 

00:25:53.140 --> 00:25:55.049 align:start position:0%
get first get less and get step which
are<00:25:53.350><c> in</c><00:25:53.500><c> dispatcher</c><00:25:53.919><c> paste</c><00:25:54.160><c> constant</c><00:25:54.730><c> so</c><00:25:54.940><c> it's</c>

00:25:55.049 --> 00:25:55.059 align:start position:0%
are in dispatcher paste constant so it's
 

00:25:55.059 --> 00:25:57.090 align:start position:0%
are in dispatcher paste constant so it's
not<00:25:55.210><c> entirely</c><00:25:55.690><c> necessary</c><00:25:55.900><c> and</c><00:25:56.650><c> then</c><00:25:56.830><c> we</c><00:25:57.010><c> have</c>

00:25:57.090 --> 00:25:57.100 align:start position:0%
not entirely necessary and then we have
 

00:25:57.100 --> 00:25:58.770 align:start position:0%
not entirely necessary and then we have
a<00:25:57.130><c> while</c><00:25:57.400><c> loop</c><00:25:57.669><c> that</c><00:25:58.090><c> makes</c><00:25:58.299><c> sure</c><00:25:58.419><c> that</c><00:25:58.450><c> we</c>

00:25:58.770 --> 00:25:58.780 align:start position:0%
a while loop that makes sure that we
 

00:25:58.780 --> 00:26:00.539 align:start position:0%
a while loop that makes sure that we
iterate<00:25:59.110><c> the</c><00:25:59.200><c> right</c><00:25:59.320><c> number</c><00:25:59.590><c> of</c><00:25:59.620><c> times</c><00:25:59.890><c> and</c><00:26:00.190><c> it</c>

00:26:00.539 --> 00:26:00.549 align:start position:0%
iterate the right number of times and it
 

00:26:00.549 --> 00:26:02.730 align:start position:0%
iterate the right number of times and it
also<00:26:00.730><c> happens</c><00:26:01.030><c> if</c><00:26:01.330><c> you</c><00:26:01.450><c> said</c><00:26:01.630><c> step</c><00:26:01.900><c> 1</c>

00:26:02.730 --> 00:26:02.740 align:start position:0%
also happens if you said step 1
 

00:26:02.740 --> 00:26:04.440 align:start position:0%
also happens if you said step 1
which<00:26:03.160><c> makes</c><00:26:03.669><c> no</c><00:26:03.760><c> sense</c><00:26:03.850><c> to</c><00:26:04.179><c> me</c><00:26:04.210><c> without</c>

00:26:04.440 --> 00:26:04.450 align:start position:0%
which makes no sense to me without
 

00:26:04.450 --> 00:26:05.970 align:start position:0%
which makes no sense to me without
zooming<00:26:04.720><c> so</c><00:26:04.960><c> missing</c><00:26:05.230><c> optimization</c><00:26:05.770><c> in</c><00:26:05.890><c> the</c>

00:26:05.970 --> 00:26:05.980 align:start position:0%
zooming so missing optimization in the
 

00:26:05.980 --> 00:26:08.460 align:start position:0%
zooming so missing optimization in the
compiler<00:26:06.309><c> that</c><00:26:06.549><c> first</c><00:26:07.090><c> step</c><00:26:07.450><c> is</c><00:26:07.660><c> a</c><00:26:07.720><c> doozy</c>

00:26:08.460 --> 00:26:08.470 align:start position:0%
compiler that first step is a doozy
 

00:26:08.470 --> 00:26:10.799 align:start position:0%
compiler that first step is a doozy
right<00:26:09.010><c> so</c><00:26:09.309><c> in</c><00:26:09.549><c> nine</c><00:26:09.669><c> classes</c><00:26:09.880><c> I</c><00:26:10.150><c> touched</c><00:26:10.630><c> on</c>

00:26:10.799 --> 00:26:10.809 align:start position:0%
right so in nine classes I touched on
 

00:26:10.809 --> 00:26:12.390 align:start position:0%
right so in nine classes I touched on
those<00:26:11.049><c> a</c><00:26:11.320><c> little</c><00:26:11.710><c> bit</c><00:26:11.890><c> when</c><00:26:12.070><c> I</c><00:26:12.130><c> talked</c><00:26:12.340><c> about</c>

00:26:12.390 --> 00:26:12.400 align:start position:0%
those a little bit when I talked about
 

00:26:12.400 --> 00:26:14.400 align:start position:0%
those a little bit when I talked about
unsigned<00:26:12.850><c> numbers</c><00:26:13.150><c> so</c><00:26:13.630><c> in</c><00:26:13.780><c> line</c><00:26:13.900><c> classes</c><00:26:14.140><c> are</c>

00:26:14.400 --> 00:26:14.410 align:start position:0%
unsigned numbers so in line classes are
 

00:26:14.410 --> 00:26:16.799 align:start position:0%
unsigned numbers so in line classes are
where<00:26:14.710><c> to</c><00:26:14.950><c> wrap</c><00:26:15.220><c> a</c><00:26:15.580><c> type</c><00:26:16.150><c> one</c><00:26:16.540><c> field</c>

00:26:16.799 --> 00:26:16.809 align:start position:0%
where to wrap a type one field
 

00:26:16.809 --> 00:26:19.110 align:start position:0%
where to wrap a type one field
effectively<00:26:17.410><c> and</c><00:26:17.590><c> the</c><00:26:18.549><c> point</c><00:26:18.820><c> of</c><00:26:18.910><c> needing</c>

00:26:19.110 --> 00:26:19.120 align:start position:0%
effectively and the point of needing
 

00:26:19.120 --> 00:26:20.909 align:start position:0%
effectively and the point of needing
classes<00:26:19.480><c> as</c><00:26:19.630><c> the</c><00:26:19.780><c> name</c><00:26:19.929><c> suggests</c><00:26:20.410><c> is</c><00:26:20.590><c> that</c><00:26:20.650><c> the</c>

00:26:20.909 --> 00:26:20.919 align:start position:0%
classes as the name suggests is that the
 

00:26:20.919 --> 00:26:22.530 align:start position:0%
classes as the name suggests is that the
disappear<00:26:21.460><c> at</c><00:26:21.580><c> compile</c><00:26:21.910><c> time</c><00:26:21.940><c> we</c><00:26:22.299><c> saw</c><00:26:22.450><c> that</c>

00:26:22.530 --> 00:26:22.540 align:start position:0%
disappear at compile time we saw that
 

00:26:22.540 --> 00:26:24.390 align:start position:0%
disappear at compile time we saw that
with<00:26:22.690><c> unsigned</c><00:26:23.230><c> numbers</c><00:26:23.559><c> there</c><00:26:23.830><c> are</c><00:26:23.860><c> class</c>

00:26:24.390 --> 00:26:24.400 align:start position:0%
with unsigned numbers there are class
 

00:26:24.400 --> 00:26:26.039 align:start position:0%
with unsigned numbers there are class
called<00:26:24.640><c> EWTN's</c><00:26:25.000><c> but</c><00:26:25.450><c> really</c><00:26:25.660><c> when</c><00:26:25.809><c> you</c><00:26:25.900><c> look</c>

00:26:26.039 --> 00:26:26.049 align:start position:0%
called EWTN's but really when you look
 

00:26:26.049 --> 00:26:27.480 align:start position:0%
called EWTN's but really when you look
at<00:26:26.169><c> the</c><00:26:26.230><c> bytecode</c><00:26:26.410><c> all</c><00:26:26.860><c> you</c><00:26:27.010><c> see</c><00:26:27.220><c> in</c><00:26:27.280><c> the</c><00:26:27.400><c> end</c>

00:26:27.480 --> 00:26:27.490 align:start position:0%
at the bytecode all you see in the end
 

00:26:27.490 --> 00:26:29.580 align:start position:0%
at the bytecode all you see in the end
is<00:26:27.640><c> just</c><00:26:27.850><c> an</c><00:26:27.970><c> integer</c><00:26:28.210><c> so</c><00:26:28.540><c> here</c><00:26:29.049><c> I</c><00:26:29.110><c> created</c><00:26:29.410><c> my</c>

00:26:29.580 --> 00:26:29.590 align:start position:0%
is just an integer so here I created my
 

00:26:29.590 --> 00:26:32.130 align:start position:0%
is just an integer so here I created my
own<00:26:29.620><c> in</c><00:26:30.100><c> nine</c><00:26:30.280><c> class</c><00:26:30.610><c> called</c><00:26:30.970><c> color</c><00:26:31.179><c> and</c><00:26:31.480><c> it</c>

00:26:32.130 --> 00:26:32.140 align:start position:0%
own in nine class called color and it
 

00:26:32.140 --> 00:26:33.690 align:start position:0%
own in nine class called color and it
could<00:26:32.350><c> it</c><00:26:32.500><c> writes</c><00:26:32.740><c> it</c><00:26:33.010><c> perhaps</c><00:26:33.220><c> an</c><00:26:33.460><c> integer</c>

00:26:33.690 --> 00:26:33.700 align:start position:0%
could it writes it perhaps an integer
 

00:26:33.700 --> 00:26:35.430 align:start position:0%
could it writes it perhaps an integer
because<00:26:34.030><c> colors</c><00:26:34.450><c> are</c><00:26:34.570><c> often</c><00:26:34.900><c> defined</c><00:26:35.200><c> as</c><00:26:35.290><c> an</c>

00:26:35.430 --> 00:26:35.440 align:start position:0%
because colors are often defined as an
 

00:26:35.440 --> 00:26:37.230 align:start position:0%
because colors are often defined as an
integer<00:26:35.679><c> on</c><00:26:36.040><c> Android</c><00:26:36.429><c> and</c><00:26:36.850><c> I've</c><00:26:37.000><c> created</c>

00:26:37.230 --> 00:26:37.240 align:start position:0%
integer on Android and I've created
 

00:26:37.240 --> 00:26:39.810 align:start position:0%
integer on Android and I've created
custom<00:26:37.750><c> properties</c><00:26:38.740><c> to</c><00:26:39.040><c> be</c><00:26:39.130><c> able</c><00:26:39.309><c> to</c><00:26:39.429><c> extract</c>

00:26:39.810 --> 00:26:39.820 align:start position:0%
custom properties to be able to extract
 

00:26:39.820 --> 00:26:41.340 align:start position:0%
custom properties to be able to extract
the<00:26:39.970><c> right</c><00:26:40.240><c> green</c><00:26:40.540><c> blue</c><00:26:40.809><c> and</c><00:26:40.840><c> alpha</c><00:26:41.110><c> channels</c>

00:26:41.340 --> 00:26:41.350 align:start position:0%
the right green blue and alpha channels
 

00:26:41.350 --> 00:26:43.650 align:start position:0%
the right green blue and alpha channels
from<00:26:41.860><c> the</c><00:26:41.919><c> int</c><00:26:42.220><c> without</c><00:26:42.850><c> having</c><00:26:43.120><c> to</c><00:26:43.270><c> do</c><00:26:43.419><c> that</c>

00:26:43.650 --> 00:26:43.660 align:start position:0%
from the int without having to do that
 

00:26:43.660 --> 00:26:47.070 align:start position:0%
from the int without having to do that
that<00:26:43.960><c> dense</c><00:26:44.140><c> myself</c><00:26:44.559><c> every</c><00:26:44.799><c> time</c><00:26:45.390><c> so</c><00:26:46.390><c> now</c><00:26:46.540><c> if</c>

00:26:47.070 --> 00:26:47.080 align:start position:0%
that dense myself every time so now if
 

00:26:47.080 --> 00:26:49.140 align:start position:0%
that dense myself every time so now if
you<00:26:47.200><c> try</c><00:26:47.320><c> to</c><00:26:47.440><c> use</c><00:26:47.620><c> that</c><00:26:47.860><c> that</c><00:26:48.580><c> inline</c><00:26:48.910><c> class</c>

00:26:49.140 --> 00:26:49.150 align:start position:0%
you try to use that that inline class
 

00:26:49.150 --> 00:26:50.610 align:start position:0%
you try to use that that inline class
ourselves<00:26:49.330><c> I</c><00:26:49.750><c> created</c><00:26:50.020><c> a</c><00:26:50.140><c> print</c><00:26:50.470><c> function</c>

00:26:50.610 --> 00:26:50.620 align:start position:0%
ourselves I created a print function
 

00:26:50.620 --> 00:26:52.740 align:start position:0%
ourselves I created a print function
that<00:26:51.040><c> just</c><00:26:51.190><c> you</c><00:26:51.309><c> know</c><00:26:51.340><c> formats</c><00:26:51.850><c> a</c><00:26:52.179><c> string</c>

00:26:52.740 --> 00:26:52.750 align:start position:0%
that just you know formats a string
 

00:26:52.750 --> 00:26:54.390 align:start position:0%
that just you know formats a string
using<00:26:53.260><c> the</c><00:26:53.410><c> different</c><00:26:53.799><c> channels</c><00:26:54.010><c> of</c><00:26:54.309><c> the</c>

00:26:54.390 --> 00:26:54.400 align:start position:0%
using the different channels of the
 

00:26:54.400 --> 00:26:56.640 align:start position:0%
using the different channels of the
color<00:26:54.720><c> create</c><00:26:55.720><c> an</c><00:26:55.809><c> instance</c><00:26:56.140><c> at</c><00:26:56.290><c> the</c><00:26:56.320><c> bottom</c>

00:26:56.640 --> 00:26:56.650 align:start position:0%
color create an instance at the bottom
 

00:26:56.650 --> 00:26:58.409 align:start position:0%
color create an instance at the bottom
in<00:26:56.799><c> my</c><00:26:56.919><c> main</c><00:26:57.070><c> function</c><00:26:57.490><c> I</c><00:26:57.610><c> call</c><00:26:57.790><c> the</c><00:26:57.880><c> print</c><00:26:58.150><c> the</c>

00:26:58.409 --> 00:26:58.419 align:start position:0%
in my main function I call the print the
 

00:26:58.419 --> 00:27:00.899 align:start position:0%
in my main function I call the print the
print<00:26:59.110><c> collection</c><00:26:59.590><c> I</c><00:26:59.650><c> just</c><00:26:59.860><c> declare</c><00:27:00.159><c> and</c>

00:27:00.899 --> 00:27:00.909 align:start position:0%
print collection I just declare and
 

00:27:00.909 --> 00:27:02.339 align:start position:0%
print collection I just declare and
the<00:27:01.149><c> bytecode</c><00:27:01.330><c> looks</c><00:27:01.690><c> like</c><00:27:01.869><c> in</c><00:27:02.080><c> the</c><00:27:02.200><c> main</c>

00:27:02.339 --> 00:27:02.349 align:start position:0%
the bytecode looks like in the main
 

00:27:02.349 --> 00:27:04.320 align:start position:0%
the bytecode looks like in the main
function<00:27:02.559><c> so</c><00:27:02.919><c> first</c><00:27:03.159><c> we</c><00:27:03.460><c> push</c><00:27:03.669><c> a</c><00:27:03.700><c> consent</c><00:27:04.210><c> on</c>

00:27:04.320 --> 00:27:04.330 align:start position:0%
function so first we push a consent on
 

00:27:04.330 --> 00:27:07.080 align:start position:0%
function so first we push a consent on
the<00:27:04.419><c> stack</c><00:27:04.659><c> is</c><00:27:05.649><c> that</c><00:27:05.859><c> weird</c><00:27:06.099><c> long</c><00:27:06.580><c> number</c><00:27:06.909><c> that</c>

00:27:07.080 --> 00:27:07.090 align:start position:0%
the stack is that weird long number that
 

00:27:07.090 --> 00:27:08.759 align:start position:0%
the stack is that weird long number that
comes<00:27:07.210><c> corresponds</c><00:27:07.869><c> to</c><00:27:07.929><c> the</c><00:27:08.139><c> hexadecimal</c>

00:27:08.759 --> 00:27:08.769 align:start position:0%
comes corresponds to the hexadecimal
 

00:27:08.769 --> 00:27:10.799 align:start position:0%
comes corresponds to the hexadecimal
value<00:27:09.070><c> that</c><00:27:09.190><c> you</c><00:27:09.340><c> saw</c><00:27:09.519><c> in</c><00:27:09.639><c> the</c><00:27:09.729><c> code</c><00:27:09.940><c> and</c><00:27:10.210><c> then</c>

00:27:10.799 --> 00:27:10.809 align:start position:0%
value that you saw in the code and then
 

00:27:10.809 --> 00:27:12.810 align:start position:0%
value that you saw in the code and then
we<00:27:10.989><c> invoke</c><00:27:11.259><c> that</c><00:27:11.470><c> color</c><00:27:11.769><c> that</c><00:27:12.039><c> constructor</c><00:27:12.609><c> -</c>

00:27:12.810 --> 00:27:12.820 align:start position:0%
we invoke that color that constructor -
 

00:27:12.820 --> 00:27:14.430 align:start position:0%
we invoke that color that constructor -
import<00:27:13.269><c> function</c><00:27:13.659><c> and</c><00:27:13.869><c> you</c><00:27:14.019><c> can</c><00:27:14.169><c> see</c><00:27:14.320><c> it's</c>

00:27:14.430 --> 00:27:14.440 align:start position:0%
import function and you can see it's
 

00:27:14.440 --> 00:27:16.139 align:start position:0%
import function and you can see it's
signature<00:27:14.830><c> it</c><00:27:15.070><c> takes</c><00:27:15.279><c> an</c><00:27:15.460><c> int</c><00:27:15.669><c> which</c><00:27:15.999><c> is</c>

00:27:16.139 --> 00:27:16.149 align:start position:0%
signature it takes an int which is
 

00:27:16.149 --> 00:27:18.210 align:start position:0%
signature it takes an int which is
expected<00:27:16.629><c> because</c><00:27:16.809><c> we</c><00:27:16.960><c> wrap</c><00:27:17.289><c> an</c><00:27:17.590><c> integer</c><00:27:17.859><c> and</c>

00:27:18.210 --> 00:27:18.220 align:start position:0%
expected because we wrap an integer and
 

00:27:18.220 --> 00:27:20.430 align:start position:0%
expected because we wrap an integer and
it<00:27:18.639><c> returns</c><00:27:18.970><c> an</c><00:27:19.119><c> integer</c><00:27:19.330><c> so</c><00:27:19.720><c> it's</c><00:27:20.019><c> exactly</c>

00:27:20.430 --> 00:27:20.440 align:start position:0%
it returns an integer so it's exactly
 

00:27:20.440 --> 00:27:22.619 align:start position:0%
it returns an integer so it's exactly
what<00:27:20.619><c> was</c><00:27:20.769><c> happening</c><00:27:21.159><c> with</c><00:27:21.309><c> unsigned</c><00:27:21.700><c> before</c>

00:27:22.619 --> 00:27:22.629 align:start position:0%
what was happening with unsigned before
 

00:27:22.629 --> 00:27:24.299 align:start position:0%
what was happening with unsigned before
we<00:27:23.080><c> saw</c><00:27:23.229><c> that</c><00:27:23.349><c> this</c><00:27:23.499><c> constructor</c><00:27:24.009><c> actually</c>

00:27:24.299 --> 00:27:24.309 align:start position:0%
we saw that this constructor actually
 

00:27:24.309 --> 00:27:26.190 align:start position:0%
we saw that this constructor actually
doesn't<00:27:24.580><c> do</c><00:27:24.700><c> anything</c><00:27:25.059><c> just</c><00:27:25.359><c> text</c><00:27:25.659><c> the</c><00:27:25.779><c> input</c>

00:27:26.190 --> 00:27:26.200 align:start position:0%
doesn't do anything just text the input
 

00:27:26.200 --> 00:27:27.779 align:start position:0%
doesn't do anything just text the input
and<00:27:26.440><c> returns</c><00:27:26.919><c> it</c><00:27:27.039><c> directly</c><00:27:27.309><c> so</c><00:27:27.399><c> there's</c>

00:27:27.779 --> 00:27:27.789 align:start position:0%
and returns it directly so there's
 

00:27:27.789 --> 00:27:29.460 align:start position:0%
and returns it directly so there's
nothing<00:27:28.090><c> to</c><00:27:28.299><c> see</c><00:27:28.450><c> here</c><00:27:28.479><c> what's</c><00:27:29.229><c> interesting</c>

00:27:29.460 --> 00:27:29.470 align:start position:0%
nothing to see here what's interesting
 

00:27:29.470 --> 00:27:30.869 align:start position:0%
nothing to see here what's interesting
is<00:27:29.710><c> what</c><00:27:29.859><c> happened</c><00:27:30.159><c> to</c><00:27:30.249><c> my</c><00:27:30.340><c> print</c><00:27:30.669><c> color</c>

00:27:30.869 --> 00:27:30.879 align:start position:0%
is what happened to my print color
 

00:27:30.879 --> 00:27:33.089 align:start position:0%
is what happened to my print color
function<00:27:31.119><c> so</c><00:27:31.809><c> in</c><00:27:32.019><c> my</c><00:27:32.139><c> source</c><00:27:32.379><c> code</c><00:27:32.440><c> it</c><00:27:32.830><c> takes</c>

00:27:33.089 --> 00:27:33.099 align:start position:0%
function so in my source code it takes
 

00:27:33.099 --> 00:27:35.129 align:start position:0%
function so in my source code it takes
the<00:27:33.220><c> color</c><00:27:33.399><c> instance</c><00:27:33.999><c> but</c><00:27:34.509><c> you</c><00:27:34.629><c> can</c><00:27:34.749><c> see</c><00:27:34.929><c> here</c>

00:27:35.129 --> 00:27:35.139 align:start position:0%
the color instance but you can see here
 

00:27:35.139 --> 00:27:37.259 align:start position:0%
the color instance but you can see here
now<00:27:35.229><c> it's</c><00:27:35.379><c> called</c><00:27:35.590><c> print</c><00:27:35.859><c> color</c><00:27:36.070><c> -</c><00:27:36.429><c> some</c><00:27:37.029><c> weird</c>

00:27:37.259 --> 00:27:37.269 align:start position:0%
now it's called print color - some weird
 

00:27:37.269 --> 00:27:38.849 align:start position:0%
now it's called print color - some weird
name<00:27:37.509><c> it's</c><00:27:37.749><c> a</c><00:27:37.899><c> it's</c><00:27:38.139><c> probably</c><00:27:38.289><c> a</c><00:27:38.470><c> hash</c><00:27:38.649><c> of</c>

00:27:38.849 --> 00:27:38.859 align:start position:0%
name it's a it's probably a hash of
 

00:27:38.859 --> 00:27:40.769 align:start position:0%
name it's a it's probably a hash of
something<00:27:39.220><c> instead</c><00:27:39.879><c> of</c><00:27:40.059><c> taking</c><00:27:40.330><c> an</c><00:27:40.450><c> instance</c>

00:27:40.769 --> 00:27:40.779 align:start position:0%
something instead of taking an instance
 

00:27:40.779 --> 00:27:43.349 align:start position:0%
something instead of taking an instance
of<00:27:40.929><c> color</c><00:27:41.169><c> it</c><00:27:41.649><c> takes</c><00:27:41.859><c> an</c><00:27:41.979><c> integer</c><00:27:42.190><c> directly</c><00:27:42.849><c> so</c>

00:27:43.349 --> 00:27:43.359 align:start position:0%
of color it takes an integer directly so
 

00:27:43.359 --> 00:27:45.210 align:start position:0%
of color it takes an integer directly so
the<00:27:43.570><c> compiler</c><00:27:43.809><c> rewrote</c><00:27:44.289><c> the</c><00:27:44.440><c> function</c><00:27:44.830><c> to</c>

00:27:45.210 --> 00:27:45.220 align:start position:0%
the compiler rewrote the function to
 

00:27:45.220 --> 00:27:47.039 align:start position:0%
the compiler rewrote the function to
work<00:27:45.489><c> to</c><00:27:45.669><c> work</c><00:27:45.849><c> dark</c><00:27:46.239><c> beyond</c><00:27:46.570><c> the</c><00:27:46.659><c> primitive</c>

00:27:47.039 --> 00:27:47.049 align:start position:0%
work to work dark beyond the primitive
 

00:27:47.049 --> 00:27:49.979 align:start position:0%
work to work dark beyond the primitive
type<00:27:47.259><c> type</c><00:27:47.769><c> I</c><00:27:47.919><c> was</c><00:27:48.039><c> rapping</c><00:27:48.720><c> that</c><00:27:49.720><c> said</c>

00:27:49.979 --> 00:27:49.989 align:start position:0%
type type I was rapping that said
 

00:27:49.989 --> 00:27:52.169 align:start position:0%
type type I was rapping that said
sometimes<00:27:50.440><c> in</c><00:27:51.070><c> our</c><00:27:51.190><c> classes</c><00:27:51.580><c> are</c><00:27:51.729><c> not</c><00:27:51.879><c> free</c><00:27:52.149><c> we</c>

00:27:52.169 --> 00:27:52.179 align:start position:0%
sometimes in our classes are not free we
 

00:27:52.179 --> 00:27:54.299 align:start position:0%
sometimes in our classes are not free we
saw<00:27:52.450><c> that</c><00:27:52.539><c> with</c><00:27:52.720><c> two</c><00:27:52.960><c> string</c><00:27:53.259><c> earlier</c><00:27:53.649><c> and</c><00:27:53.919><c> the</c>

00:27:54.299 --> 00:27:54.309 align:start position:0%
saw that with two string earlier and the
 

00:27:54.309 --> 00:27:56.009 align:start position:0%
saw that with two string earlier and the
same<00:27:54.489><c> thing</c><00:27:54.700><c> can</c><00:27:54.849><c> happen</c><00:27:55.059><c> with</c><00:27:55.389><c> the</c><00:27:55.690><c> equal</c>

00:27:56.009 --> 00:27:56.019 align:start position:0%
same thing can happen with the equal
 

00:27:56.019 --> 00:27:58.169 align:start position:0%
same thing can happen with the equal
equal<00:27:56.080><c> operator</c><00:27:56.649><c> so</c><00:27:57.309><c> here</c><00:27:57.519><c> are</c><00:27:57.639><c> create</c><00:27:57.940><c> two</c>

00:27:58.169 --> 00:27:58.179 align:start position:0%
equal operator so here are create two
 

00:27:58.179 --> 00:28:00.989 align:start position:0%
equal operator so here are create two
instances<00:27:58.359><c> of</c><00:27:59.139><c> my</c><00:27:59.379><c> color</c><00:27:59.619><c> class</c><00:27:59.710><c> and</c><00:28:00.249><c> I</c><00:28:00.970><c> just</c>

00:28:00.989 --> 00:28:00.999 align:start position:0%
instances of my color class and I just
 

00:28:00.999 --> 00:28:02.489 align:start position:0%
instances of my color class and I just
called<00:28:01.389><c> you</c><00:28:01.570><c> know</c><00:28:01.690><c> I</c><00:28:01.720><c> want</c><00:28:01.989><c> to</c><00:28:02.019><c> print</c><00:28:02.320><c> whether</c>

00:28:02.489 --> 00:28:02.499 align:start position:0%
called you know I want to print whether
 

00:28:02.499 --> 00:28:04.440 align:start position:0%
called you know I want to print whether
or<00:28:02.649><c> not</c><00:28:02.739><c> they</c><00:28:02.859><c> are</c><00:28:02.889><c> equal</c><00:28:03.309><c> and</c><00:28:03.489><c> I</c><00:28:03.700><c> do</c><00:28:03.759><c> it</c><00:28:03.999><c> in</c><00:28:04.239><c> two</c>

00:28:04.440 --> 00:28:04.450 align:start position:0%
or not they are equal and I do it in two
 

00:28:04.450 --> 00:28:06.149 align:start position:0%
or not they are equal and I do it in two
different<00:28:04.539><c> ways</c><00:28:04.749><c> first</c><00:28:05.139><c> we</c><00:28:05.409><c> use</c><00:28:05.529><c> equal</c><00:28:05.889><c> equal</c>

00:28:06.149 --> 00:28:06.159 align:start position:0%
different ways first we use equal equal
 

00:28:06.159 --> 00:28:08.219 align:start position:0%
different ways first we use equal equal
and<00:28:06.369><c> then</c><00:28:06.849><c> we</c><00:28:06.970><c> do</c><00:28:07.090><c> dot</c><00:28:07.359><c> equals</c><00:28:07.779><c> and</c><00:28:07.989><c> those</c>

00:28:08.219 --> 00:28:08.229 align:start position:0%
and then we do dot equals and those
 

00:28:08.229 --> 00:28:10.589 align:start position:0%
and then we do dot equals and those
should<00:28:08.440><c> be</c><00:28:08.639><c> equivalent</c><00:28:09.639><c> there</c><00:28:10.269><c> should</c><00:28:10.450><c> be</c><00:28:10.509><c> the</c>

00:28:10.589 --> 00:28:10.599 align:start position:0%
should be equivalent there should be the
 

00:28:10.599 --> 00:28:12.839 align:start position:0%
should be equivalent there should be the
same<00:28:10.840><c> thing</c><00:28:11.049><c> however</c><00:28:11.529><c> when</c><00:28:12.340><c> we</c><00:28:12.460><c> look</c><00:28:12.609><c> at</c><00:28:12.729><c> the</c>

00:28:12.839 --> 00:28:12.849 align:start position:0%
same thing however when we look at the
 

00:28:12.849 --> 00:28:14.729 align:start position:0%
same thing however when we look at the
bytecode<00:28:13.059><c> here's</c><00:28:13.539><c> what</c><00:28:13.690><c> happens</c><00:28:14.019><c> so</c><00:28:14.559><c> when</c><00:28:14.619><c> I</c>

00:28:14.729 --> 00:28:14.739 align:start position:0%
bytecode here's what happens so when I
 

00:28:14.739 --> 00:28:17.639 align:start position:0%
bytecode here's what happens so when I
do<00:28:14.830><c> a</c><00:28:15.099><c> equal</c><00:28:15.519><c> equals</c><00:28:15.820><c> B</c><00:28:16.059><c> first</c><00:28:16.570><c> we</c><00:28:16.749><c> load</c><00:28:16.960><c> one</c><00:28:17.559><c> of</c>

00:28:17.639 --> 00:28:17.649 align:start position:0%
do a equal equals B first we load one of
 

00:28:17.649 --> 00:28:18.239 align:start position:0%
do a equal equals B first we load one of
the<00:28:17.739><c> variables</c>

00:28:18.239 --> 00:28:18.249 align:start position:0%
the variables
 

00:28:18.249 --> 00:28:21.749 align:start position:0%
the variables
I<00:28:18.340><c> think</c><00:28:18.789><c> it's</c><00:28:18.940><c> B</c><00:28:19.289><c> then</c><00:28:20.289><c> we</c><00:28:20.440><c> call</c><00:28:20.649><c> boxed</c><00:28:21.159><c> at</c><00:28:21.279><c> -</c>

00:28:21.749 --> 00:28:21.759 align:start position:0%
I think it's B then we call boxed at -
 

00:28:21.759 --> 00:28:23.369 align:start position:0%
I think it's B then we call boxed at -
in<00:28:21.999><c> pole</c><00:28:22.210><c> and</c><00:28:22.450><c> you</c><00:28:22.749><c> can</c><00:28:22.899><c> see</c><00:28:23.049><c> that</c><00:28:23.200><c> we</c><00:28:23.320><c> are</c>

00:28:23.369 --> 00:28:23.379 align:start position:0%
in pole and you can see that we are
 

00:28:23.379 --> 00:28:26.369 align:start position:0%
in pole and you can see that we are
generating<00:28:23.769><c> a</c><00:28:24.039><c> color</c><00:28:24.639><c> instance</c><00:28:25.330><c> from</c><00:28:26.109><c> that</c>

00:28:26.369 --> 00:28:26.379 align:start position:0%
generating a color instance from that
 

00:28:26.379 --> 00:28:28.889 align:start position:0%
generating a color instance from that
integer<00:28:26.710><c> then</c><00:28:27.489><c> we</c><00:28:27.609><c> do</c><00:28:27.729><c> the</c><00:28:27.849><c> same</c><00:28:28.149><c> thing</c><00:28:28.450><c> again</c>

00:28:28.889 --> 00:28:28.899 align:start position:0%
integer then we do the same thing again
 

00:28:28.899 --> 00:28:31.139 align:start position:0%
integer then we do the same thing again
for<00:28:29.349><c> the</c><00:28:29.440><c> a</c><00:28:29.470><c> variable</c><00:28:30.220><c> and</c><00:28:30.399><c> then</c><00:28:30.639><c> finally</c><00:28:30.970><c> we</c>

00:28:31.139 --> 00:28:31.149 align:start position:0%
for the a variable and then finally we
 

00:28:31.149 --> 00:28:32.999 align:start position:0%
for the a variable and then finally we
invoke<00:28:31.450><c> a</c><00:28:31.659><c> static</c><00:28:32.049><c> function</c><00:28:32.229><c> called</c><00:28:32.769><c> are</c>

00:28:32.999 --> 00:28:33.009 align:start position:0%
invoke a static function called are
 

00:28:33.009 --> 00:28:35.639 align:start position:0%
invoke a static function called are
equal<00:28:33.700><c> that's</c><00:28:33.909><c> part</c><00:28:34.149><c> of</c><00:28:34.269><c> that</c><00:28:34.929><c> that's</c><00:28:35.529><c> an</c>

00:28:35.639 --> 00:28:35.649 align:start position:0%
equal that's part of that that's an
 

00:28:35.649 --> 00:28:37.619 align:start position:0%
equal that's part of that that's an
intrinsic<00:28:36.129><c> in</c><00:28:36.429><c> the</c><00:28:36.460><c> cut</c><00:28:36.849><c> in</c><00:28:36.970><c> standard</c><00:28:37.330><c> library</c>

00:28:37.619 --> 00:28:37.629 align:start position:0%
intrinsic in the cut in standard library
 

00:28:37.629 --> 00:28:39.539 align:start position:0%
intrinsic in the cut in standard library
so<00:28:38.169><c> just</c><00:28:38.559><c> to</c><00:28:38.649><c> be</c><00:28:38.739><c> able</c><00:28:38.769><c> to</c><00:28:38.919><c> compare</c><00:28:39.309><c> our</c><00:28:39.519><c> two</c>

00:28:39.539 --> 00:28:39.549 align:start position:0%
so just to be able to compare our two
 

00:28:39.549 --> 00:28:41.639 align:start position:0%
so just to be able to compare our two
integers<00:28:40.179><c> that</c><00:28:40.720><c> we</c><00:28:40.899><c> know</c><00:28:41.019><c> are</c><00:28:41.200><c> there</c><00:28:41.229><c> because</c>

00:28:41.639 --> 00:28:41.649 align:start position:0%
integers that we know are there because
 

00:28:41.649 --> 00:28:42.989 align:start position:0%
integers that we know are there because
we<00:28:41.769><c> saw</c><00:28:41.950><c> that</c><00:28:41.979><c> the</c><00:28:42.159><c> compiler</c><00:28:42.369><c> sometimes</c><00:28:42.849><c> it's</c>

00:28:42.989 --> 00:28:42.999 align:start position:0%
we saw that the compiler sometimes it's
 

00:28:42.999 --> 00:28:44.729 align:start position:0%
we saw that the compiler sometimes it's
smart<00:28:43.179><c> enough</c><00:28:43.239><c> to</c><00:28:43.479><c> get</c><00:28:43.599><c> rid</c><00:28:43.629><c> of</c><00:28:43.779><c> the</c><00:28:43.960><c> class</c><00:28:44.139><c> we</c>

00:28:44.729 --> 00:28:44.739 align:start position:0%
smart enough to get rid of the class we
 

00:28:44.739 --> 00:28:46.979 align:start position:0%
smart enough to get rid of the class we
just<00:28:44.950><c> boxed</c><00:28:45.429><c> it</c><00:28:45.549><c> back</c><00:28:45.820><c> into</c><00:28:46.149><c> actual</c><00:28:46.629><c> objects</c>

00:28:46.979 --> 00:28:46.989 align:start position:0%
just boxed it back into actual objects
 

00:28:46.989 --> 00:28:48.810 align:start position:0%
just boxed it back into actual objects
we<00:28:47.080><c> created</c><00:28:47.379><c> two</c><00:28:47.470><c> allocations</c><00:28:48.070><c> just</c><00:28:48.639><c> to</c><00:28:48.729><c> be</c>

00:28:48.810 --> 00:28:48.820 align:start position:0%
we created two allocations just to be
 

00:28:48.820 --> 00:28:51.109 align:start position:0%
we created two allocations just to be
able<00:28:48.970><c> to</c><00:28:49.090><c> compare</c><00:28:49.419><c> those</c><00:28:49.539><c> two</c><00:28:49.720><c> integer</c><00:28:50.049><c> values</c>

00:28:51.109 --> 00:28:51.119 align:start position:0%
able to compare those two integer values
 

00:28:51.119 --> 00:28:54.690 align:start position:0%
able to compare those two integer values
if<00:28:52.119><c> you</c><00:28:52.269><c> call</c><00:28:52.479><c> a</c><00:28:52.690><c> dot</c><00:28:52.960><c> equals</c><00:28:53.289><c> B</c><00:28:53.590><c> things</c><00:28:54.549><c> are</c><00:28:54.669><c> a</c>

00:28:54.690 --> 00:28:54.700 align:start position:0%
if you call a dot equals B things are a
 

00:28:54.700 --> 00:28:55.469 align:start position:0%
if you call a dot equals B things are a
little<00:28:54.820><c> different</c>

00:28:55.469 --> 00:28:55.479 align:start position:0%
little different
 

00:28:55.479 --> 00:28:58.200 align:start position:0%
little different
we<00:28:55.720><c> load</c><00:28:55.989><c> one</c><00:28:56.470><c> of</c><00:28:56.499><c> the</c><00:28:56.590><c> variables</c><00:28:57.070><c> and</c><00:28:57.909><c> we</c>

00:28:58.200 --> 00:28:58.210 align:start position:0%
we load one of the variables and we
 

00:28:58.210 --> 00:29:00.570 align:start position:0%
we load one of the variables and we
bucks<00:28:58.629><c> the</c><00:28:59.200><c> other</c><00:28:59.409><c> one</c><00:28:59.679><c> so</c><00:28:59.979><c> instead</c><00:29:00.190><c> of</c><00:29:00.249><c> in</c><00:29:00.399><c> two</c>

00:29:00.570 --> 00:29:00.580 align:start position:0%
bucks the other one so instead of in two
 

00:29:00.580 --> 00:29:02.279 align:start position:0%
bucks the other one so instead of in two
locations<00:29:00.909><c> we</c><00:29:01.239><c> have</c><00:29:01.269><c> only</c><00:29:01.450><c> one</c><00:29:01.720><c> allocation</c>

00:29:02.279 --> 00:29:02.289 align:start position:0%
locations we have only one allocation
 

00:29:02.289 --> 00:29:04.320 align:start position:0%
locations we have only one allocation
and<00:29:02.470><c> instead</c><00:29:03.129><c> here</c><00:29:03.399><c> we're</c><00:29:03.549><c> calling</c><00:29:03.849><c> a</c><00:29:03.999><c> method</c>

00:29:04.320 --> 00:29:04.330 align:start position:0%
and instead here we're calling a method
 

00:29:04.330 --> 00:29:06.749 align:start position:0%
and instead here we're calling a method
called<00:29:04.749><c> equals</c><00:29:05.289><c> -</c><00:29:05.529><c> in</c><00:29:05.739><c> pull</c><00:29:05.919><c> on</c><00:29:06.099><c> the</c><00:29:06.549><c> color</c>

00:29:06.749 --> 00:29:06.759 align:start position:0%
called equals - in pull on the color
 

00:29:06.759 --> 00:29:08.669 align:start position:0%
called equals - in pull on the color
class<00:29:06.970><c> and</c><00:29:07.239><c> you</c><00:29:07.599><c> can</c><00:29:07.749><c> see</c><00:29:07.929><c> takes</c><00:29:08.200><c> an</c><00:29:08.379><c> integer</c>

00:29:08.669 --> 00:29:08.679 align:start position:0%
class and you can see takes an integer
 

00:29:08.679 --> 00:29:11.369 align:start position:0%
class and you can see takes an integer
and<00:29:09.070><c> an</c><00:29:09.249><c> object</c><00:29:09.429><c> so</c><00:29:10.179><c> if</c><00:29:10.659><c> you're</c><00:29:10.869><c> gonna</c><00:29:10.989><c> use</c><00:29:11.259><c> the</c>

00:29:11.369 --> 00:29:11.379 align:start position:0%
and an object so if you're gonna use the
 

00:29:11.379 --> 00:29:13.379 align:start position:0%
and an object so if you're gonna use the
nine<00:29:11.529><c> classes</c><00:29:11.979><c> and</c><00:29:12.609><c> you</c><00:29:12.729><c> don't</c><00:29:12.909><c> care</c><00:29:13.089><c> about</c><00:29:13.299><c> in</c>

00:29:13.379 --> 00:29:13.389 align:start position:0%
nine classes and you don't care about in
 

00:29:13.389 --> 00:29:13.900 align:start position:0%
nine classes and you don't care about in
a<00:29:13.419><c> liability</c>

00:29:13.900 --> 00:29:13.910 align:start position:0%
a liability
 

00:29:13.910 --> 00:29:16.090 align:start position:0%
a liability
in<00:29:14.900><c> the</c><00:29:15.050><c> doctor</c><00:29:15.380><c> in</c><00:29:15.500><c> Central</c><00:29:15.890><c> Connecticut</c>

00:29:16.090 --> 00:29:16.100 align:start position:0%
in the doctor in Central Connecticut
 

00:29:16.100 --> 00:29:18.310 align:start position:0%
in the doctor in Central Connecticut
half<00:29:16.610><c> as</c><00:29:16.760><c> many</c><00:29:16.910><c> objects</c><00:29:17.450><c> if</c><00:29:17.540><c> you</c><00:29:17.660><c> say</c><00:29:17.840><c> a</c><00:29:18.050><c> dot</c>

00:29:18.310 --> 00:29:18.320 align:start position:0%
half as many objects if you say a dot
 

00:29:18.320 --> 00:29:20.790 align:start position:0%
half as many objects if you say a dot
equals<00:29:18.650><c> B</c><00:29:18.800><c> instead</c><00:29:19.010><c> of</c><00:29:19.100><c> a</c><00:29:19.280><c> equals</c><00:29:19.640><c> equals</c><00:29:19.880><c> me</c>

00:29:20.790 --> 00:29:20.800 align:start position:0%
equals B instead of a equals equals me
 

00:29:20.800 --> 00:29:24.010 align:start position:0%
equals B instead of a equals equals me
take<00:29:21.800><c> a</c><00:29:21.830><c> quick</c><00:29:22.190><c> look</c><00:29:22.400><c> at</c><00:29:22.610><c> arrays</c><00:29:23.060><c> the</c>

00:29:24.010 --> 00:29:24.020 align:start position:0%
take a quick look at arrays the
 

00:29:24.020 --> 00:29:27.600 align:start position:0%
take a quick look at arrays the
implementation<00:29:24.830><c> depends</c><00:29:26.020><c> very</c><00:29:27.020><c> much</c><00:29:27.170><c> on</c>

00:29:27.600 --> 00:29:27.610 align:start position:0%
implementation depends very much on
 

00:29:27.610 --> 00:29:29.740 align:start position:0%
implementation depends very much on
little<00:29:28.610><c> subtle</c><00:29:28.910><c> differences</c><00:29:29.390><c> in</c><00:29:29.450><c> how</c><00:29:29.690><c> you</c>

00:29:29.740 --> 00:29:29.750 align:start position:0%
little subtle differences in how you
 

00:29:29.750 --> 00:29:31.840 align:start position:0%
little subtle differences in how you
declare<00:29:29.990><c> things</c><00:29:30.410><c> so</c><00:29:30.650><c> here</c><00:29:31.400><c> we're</c><00:29:31.520><c> gonna</c><00:29:31.610><c> call</c>

00:29:31.840 --> 00:29:31.850 align:start position:0%
declare things so here we're gonna call
 

00:29:31.850 --> 00:29:34.090 align:start position:0%
declare things so here we're gonna call
int<00:29:32.090><c> array</c><00:29:32.240><c> of</c><00:29:32.600><c> and</c><00:29:32.960><c> we</c><00:29:33.200><c> pass</c><00:29:33.410><c> in</c><00:29:33.620><c> these</c><00:29:33.770><c> things</c>

00:29:34.090 --> 00:29:34.100 align:start position:0%
int array of and we pass in these things
 

00:29:34.100 --> 00:29:36.280 align:start position:0%
int array of and we pass in these things
and<00:29:35.060><c> it's</c><00:29:35.300><c> gonna</c><00:29:35.480><c> say</c><00:29:35.690><c> yep</c><00:29:35.900><c> here's</c><00:29:36.230><c> a</c>

00:29:36.280 --> 00:29:36.290 align:start position:0%
and it's gonna say yep here's a
 

00:29:36.290 --> 00:29:37.810 align:start position:0%
and it's gonna say yep here's a
primitive<00:29:36.710><c> array</c><00:29:36.920><c> that</c><00:29:37.190><c> contains</c><00:29:37.310><c> those</c>

00:29:37.810 --> 00:29:37.820 align:start position:0%
primitive array that contains those
 

00:29:37.820 --> 00:29:40.690 align:start position:0%
primitive array that contains those
things<00:29:38.150><c> or</c><00:29:38.750><c> we</c><00:29:39.050><c> could</c><00:29:39.200><c> say</c><00:29:39.410><c> array</c><00:29:40.190><c> of</c><00:29:40.400><c> and</c>

00:29:40.690 --> 00:29:40.700 align:start position:0%
things or we could say array of and
 

00:29:40.700 --> 00:29:41.890 align:start position:0%
things or we could say array of and
we're<00:29:40.790><c> gonna</c><00:29:40.880><c> pass</c><00:29:41.120><c> these</c><00:29:41.330><c> things</c><00:29:41.570><c> and</c><00:29:41.840><c> we</c>

00:29:41.890 --> 00:29:41.900 align:start position:0%
we're gonna pass these things and we
 

00:29:41.900 --> 00:29:43.300 align:start position:0%
we're gonna pass these things and we
know<00:29:42.020><c> that</c><00:29:42.200><c> Kotlin</c><00:29:42.530><c> is</c><00:29:42.650><c> really</c><00:29:42.890><c> good</c><00:29:43.010><c> at</c><00:29:43.130><c> type</c>

00:29:43.300 --> 00:29:43.310 align:start position:0%
know that Kotlin is really good at type
 

00:29:43.310 --> 00:29:45.640 align:start position:0%
know that Kotlin is really good at type
inference<00:29:43.670><c> and</c><00:29:43.880><c> these</c><00:29:44.060><c> are</c><00:29:44.180><c> obviously</c><00:29:44.650><c> int</c>

00:29:45.640 --> 00:29:45.650 align:start position:0%
inference and these are obviously int
 

00:29:45.650 --> 00:29:47.560 align:start position:0%
inference and these are obviously int
and<00:29:46.040><c> it</c><00:29:46.220><c> says</c><00:29:46.430><c> yep</c><00:29:46.700><c> here's</c><00:29:47.000><c> your</c><00:29:47.150><c> integer</c>

00:29:47.560 --> 00:29:47.570 align:start position:0%
and it says yep here's your integer
 

00:29:47.570 --> 00:29:50.830 align:start position:0%
and it says yep here's your integer
array<00:29:48.310><c> or</c><00:29:49.310><c> we</c><00:29:49.520><c> could</c><00:29:49.670><c> say</c><00:29:49.880><c> give</c><00:29:50.390><c> me</c><00:29:50.420><c> an</c><00:29:50.570><c> int</c>

00:29:50.830 --> 00:29:50.840 align:start position:0%
array or we could say give me an int
 

00:29:50.840 --> 00:29:53.200 align:start position:0%
array or we could say give me an int
array<00:29:50.990><c> and</c><00:29:51.320><c> actually</c><00:29:51.680><c> ask</c><00:29:52.580><c> for</c><00:29:52.790><c> this</c><00:29:52.970><c> thing</c>

00:29:53.200 --> 00:29:53.210 align:start position:0%
array and actually ask for this thing
 

00:29:53.210 --> 00:29:57.460 align:start position:0%
array and actually ask for this thing
specifically<00:29:53.720><c> and</c><00:29:55.120><c> then</c><00:29:56.120><c> it</c><00:29:56.600><c> does</c><00:29:57.020><c> the</c><00:29:57.320><c> right</c>

00:29:57.460 --> 00:29:57.470 align:start position:0%
specifically and then it does the right
 

00:29:57.470 --> 00:29:58.900 align:start position:0%
specifically and then it does the right
thing<00:29:57.740><c> with</c><00:29:57.890><c> a</c><00:29:57.920><c> little</c><00:29:58.160><c> bit</c><00:29:58.280><c> more</c><00:29:58.430><c> code</c>

00:29:58.900 --> 00:29:58.910 align:start position:0%
thing with a little bit more code
 

00:29:58.910 --> 00:30:00.580 align:start position:0%
thing with a little bit more code
we're<00:29:59.120><c> basically</c><00:29:59.300><c> initializing</c><00:30:00.170><c> it</c><00:30:00.260><c> inside</c>

00:30:00.580 --> 00:30:00.590 align:start position:0%
we're basically initializing it inside
 

00:30:00.590 --> 00:30:02.800 align:start position:0%
we're basically initializing it inside
the<00:30:00.770><c> lambda</c><00:30:01.340><c> there</c><00:30:01.520><c> and</c><00:30:01.760><c> it</c><00:30:02.330><c> creates</c><00:30:02.630><c> the</c>

00:30:02.800 --> 00:30:02.810 align:start position:0%
the lambda there and it creates the
 

00:30:02.810 --> 00:30:04.890 align:start position:0%
the lambda there and it creates the
primitive<00:30:03.230><c> int</c><00:30:03.410><c> array</c><00:30:03.530><c> to</c><00:30:03.710><c> whip</c><00:30:04.220><c> through</c><00:30:04.400><c> that</c>

00:30:04.890 --> 00:30:04.900 align:start position:0%
primitive int array to whip through that
 

00:30:04.900 --> 00:30:08.260 align:start position:0%
primitive int array to whip through that
alright<00:30:05.900><c> so</c><00:30:06.140><c> we'd</c><00:30:06.950><c> land</c><00:30:07.160><c> us</c><00:30:07.310><c> there's</c><00:30:07.580><c> a</c><00:30:07.880><c> one</c>

00:30:08.260 --> 00:30:08.270 align:start position:0%
alright so we'd land us there's a one
 

00:30:08.270 --> 00:30:09.640 align:start position:0%
alright so we'd land us there's a one
party<00:30:08.630><c> release</c><00:30:08.900><c> case</c><00:30:09.200><c> that</c><00:30:09.440><c> can</c><00:30:09.590><c> be</c>

00:30:09.640 --> 00:30:09.650 align:start position:0%
party release case that can be
 

00:30:09.650 --> 00:30:11.620 align:start position:0%
party release case that can be
definitely<00:30:10.580><c> of</c><00:30:10.730><c> tricky</c><00:30:11.060><c> and</c><00:30:11.270><c> we</c><00:30:11.420><c> just</c>

00:30:11.620 --> 00:30:11.630 align:start position:0%
definitely of tricky and we just
 

00:30:11.630 --> 00:30:13.090 align:start position:0%
definitely of tricky and we just
recorded<00:30:11.960><c> the</c><00:30:12.080><c> podcast</c><00:30:12.470><c> this</c><00:30:12.590><c> morning</c><00:30:12.950><c> with</c>

00:30:13.090 --> 00:30:13.100 align:start position:0%
recorded the podcast this morning with
 

00:30:13.100 --> 00:30:15.940 align:start position:0%
recorded the podcast this morning with
the<00:30:13.220><c> pocket</c><00:30:13.670><c> casts</c><00:30:13.910><c> folks</c><00:30:14.300><c> and</c><00:30:15.050><c> tour</c><00:30:15.590><c> mention</c>

00:30:15.940 --> 00:30:15.950 align:start position:0%
the pocket casts folks and tour mention
 

00:30:15.950 --> 00:30:17.290 align:start position:0%
the pocket casts folks and tour mention
that<00:30:16.070><c> you</c><00:30:16.490><c> just</c><00:30:16.670><c> like</c><00:30:16.880><c> that</c>

00:30:17.290 --> 00:30:17.300 align:start position:0%
that you just like that
 

00:30:17.300 --> 00:30:19.270 align:start position:0%
that you just like that
yeah<00:30:17.540><c> so</c><00:30:17.960><c> what</c><00:30:18.500><c> you're</c><00:30:18.620><c> gonna</c><00:30:18.680><c> see</c><00:30:19.010><c> is</c><00:30:19.250><c> a</c>

00:30:19.270 --> 00:30:19.280 align:start position:0%
yeah so what you're gonna see is a
 

00:30:19.280 --> 00:30:21.070 align:start position:0%
yeah so what you're gonna see is a
possible<00:30:19.670><c> programming</c><00:30:20.060><c> mistake</c><00:30:20.420><c> thankfully</c>

00:30:21.070 --> 00:30:21.080 align:start position:0%
possible programming mistake thankfully
 

00:30:21.080 --> 00:30:22.840 align:start position:0%
possible programming mistake thankfully
we<00:30:21.230><c> have</c><00:30:21.320><c> a</c><00:30:21.350><c> lint</c><00:30:21.680><c> check</c><00:30:21.920><c> in</c><00:30:22.190><c> androids</c><00:30:22.640><c> view</c>

00:30:22.840 --> 00:30:22.850 align:start position:0%
we have a lint check in androids view
 

00:30:22.850 --> 00:30:25.120 align:start position:0%
we have a lint check in androids view
that<00:30:23.060><c> wants</c><00:30:23.360><c> you</c><00:30:23.450><c> against</c><00:30:23.780><c> it</c><00:30:23.870><c> so</c><00:30:24.500><c> here's</c><00:30:25.100><c> a</c>

00:30:25.120 --> 00:30:25.130 align:start position:0%
that wants you against it so here's a
 

00:30:25.130 --> 00:30:27.370 align:start position:0%
that wants you against it so here's a
for<00:30:25.700><c> instance</c><00:30:25.790><c> a</c><00:30:26.150><c> class</c><00:30:26.660><c> written</c><00:30:27.050><c> in</c><00:30:27.170><c> the</c><00:30:27.260><c> Java</c>

00:30:27.370 --> 00:30:27.380 align:start position:0%
for instance a class written in the Java
 

00:30:27.380 --> 00:30:29.500 align:start position:0%
for instance a class written in the Java
programming<00:30:27.530><c> language</c><00:30:27.980><c> it's</c><00:30:28.430><c> a</c><00:30:28.520><c> widget</c><00:30:29.360><c> of</c>

00:30:29.500 --> 00:30:29.510 align:start position:0%
programming language it's a widget of
 

00:30:29.510 --> 00:30:31.600 align:start position:0%
programming language it's a widget of
some<00:30:29.690><c> kind</c><00:30:29.990><c> and</c><00:30:30.170><c> you</c><00:30:30.260><c> can</c><00:30:30.710><c> register</c><00:30:30.890><c> listener</c>

00:30:31.600 --> 00:30:31.610 align:start position:0%
some kind and you can register listener
 

00:30:31.610 --> 00:30:33.130 align:start position:0%
some kind and you can register listener
so<00:30:31.790><c> we</c><00:30:31.910><c> have</c><00:30:32.030><c> this</c><00:30:32.150><c> interface</c><00:30:32.690><c> it</c><00:30:32.960><c> has</c><00:30:33.110><c> a</c>

00:30:33.130 --> 00:30:33.140 align:start position:0%
so we have this interface it has a
 

00:30:33.140 --> 00:30:36.130 align:start position:0%
so we have this interface it has a
single<00:30:33.470><c> abstract</c><00:30:34.010><c> method</c><00:30:34.370><c> -</c><00:30:34.730><c> Sam</c><00:30:35.000><c> you</c><00:30:35.810><c> can</c><00:30:35.960><c> add</c>

00:30:36.130 --> 00:30:36.140 align:start position:0%
single abstract method - Sam you can add
 

00:30:36.140 --> 00:30:37.780 align:start position:0%
single abstract method - Sam you can add
a<00:30:36.170><c> listener</c><00:30:36.500><c> you</c><00:30:36.800><c> can</c><00:30:36.950><c> remove</c><00:30:37.310><c> the</c><00:30:37.490><c> listener</c>

00:30:37.780 --> 00:30:37.790 align:start position:0%
a listener you can remove the listener
 

00:30:37.790 --> 00:30:40.270 align:start position:0%
a listener you can remove the listener
and<00:30:38.180><c> you</c><00:30:38.360><c> can</c><00:30:38.540><c> ask</c><00:30:39.050><c> how</c><00:30:39.440><c> many</c><00:30:39.500><c> listeners</c><00:30:39.830><c> are</c>

00:30:40.270 --> 00:30:40.280 align:start position:0%
and you can ask how many listeners are
 

00:30:40.280 --> 00:30:42.910 align:start position:0%
and you can ask how many listeners are
registered<00:30:40.820><c> now</c><00:30:41.540><c> let's</c><00:30:41.720><c> try</c><00:30:41.840><c> to</c><00:30:41.870><c> use</c><00:30:42.050><c> this</c><00:30:42.260><c> fun</c>

00:30:42.910 --> 00:30:42.920 align:start position:0%
registered now let's try to use this fun
 

00:30:42.920 --> 00:30:44.710 align:start position:0%
registered now let's try to use this fun
cutting<00:30:43.400><c> so</c><00:30:43.610><c> first</c><00:30:43.820><c> of</c><00:30:43.910><c> all</c><00:30:44.000><c> we</c><00:30:44.300><c> instantiate</c>

00:30:44.710 --> 00:30:44.720 align:start position:0%
cutting so first of all we instantiate
 

00:30:44.720 --> 00:30:47.170 align:start position:0%
cutting so first of all we instantiate
our<00:30:45.080><c> widgets</c><00:30:45.500><c> then</c><00:30:46.130><c> I</c><00:30:46.220><c> create</c><00:30:46.490><c> my</c><00:30:46.610><c> listener</c><00:30:46.910><c> as</c>

00:30:47.170 --> 00:30:47.180 align:start position:0%
our widgets then I create my listener as
 

00:30:47.180 --> 00:30:49.750 align:start position:0%
our widgets then I create my listener as
well<00:30:47.360><c> lambda</c><00:30:47.750><c> and</c><00:30:48.620><c> it</c><00:30:48.770><c> follows</c><00:30:49.130><c> the</c><00:30:49.430><c> if</c><00:30:49.640><c> we</c><00:30:49.730><c> go</c>

00:30:49.750 --> 00:30:49.760 align:start position:0%
well lambda and it follows the if we go
 

00:30:49.760 --> 00:30:52.450 align:start position:0%
well lambda and it follows the if we go
back<00:30:50.000><c> our</c><00:30:50.750><c> single</c><00:30:51.500><c> abstract</c><00:30:51.740><c> method</c><00:30:52.070><c> taxi</c>

00:30:52.450 --> 00:30:52.460 align:start position:0%
back our single abstract method taxi
 

00:30:52.460 --> 00:30:54.970 align:start position:0%
back our single abstract method taxi
widget<00:30:52.730><c> instance</c><00:30:53.180><c> as</c><00:30:53.390><c> a</c><00:30:53.450><c> parameter</c><00:30:53.750><c> so</c><00:30:54.470><c> we</c>

00:30:54.970 --> 00:30:54.980 align:start position:0%
widget instance as a parameter so we
 

00:30:54.980 --> 00:30:56.530 align:start position:0%
widget instance as a parameter so we
create<00:30:55.220><c> a</c><00:30:55.250><c> lambda</c><00:30:55.520><c> that</c><00:30:55.880><c> matches</c><00:30:56.360><c> this</c>

00:30:56.530 --> 00:30:56.540 align:start position:0%
create a lambda that matches this
 

00:30:56.540 --> 00:30:59.110 align:start position:0%
create a lambda that matches this
signature<00:30:57.230><c> text</c><00:30:57.770><c> text</c><00:30:58.430><c> widget</c><00:30:58.790><c> and</c><00:30:58.940><c> then</c><00:30:59.000><c> we</c>

00:30:59.110 --> 00:30:59.120 align:start position:0%
signature text text widget and then we
 

00:30:59.120 --> 00:31:01.330 align:start position:0%
signature text text widget and then we
do<00:30:59.270><c> something</c><00:30:59.510><c> with</c><00:30:59.690><c> it</c><00:30:59.750><c> we</c><00:30:59.990><c> print</c><00:31:00.260><c> it</c><00:31:00.350><c> then</c><00:31:01.220><c> I</c>

00:31:01.330 --> 00:31:01.340 align:start position:0%
do something with it we print it then I
 

00:31:01.340 --> 00:31:03.280 align:start position:0%
do something with it we print it then I
call<00:31:01.520><c> add</c><00:31:01.730><c> listener</c><00:31:02.210><c> on</c><00:31:02.420><c> my</c><00:31:02.630><c> widget</c><00:31:02.990><c> and</c><00:31:03.200><c> I</c>

00:31:03.280 --> 00:31:03.290 align:start position:0%
call add listener on my widget and I
 

00:31:03.290 --> 00:31:05.920 align:start position:0%
call add listener on my widget and I
print<00:31:03.650><c> the</c><00:31:03.920><c> number</c><00:31:04.340><c> of</c><00:31:04.580><c> listeners</c><00:31:05.540><c> that</c><00:31:05.810><c> are</c>

00:31:05.920 --> 00:31:05.930 align:start position:0%
print the number of listeners that are
 

00:31:05.930 --> 00:31:09.040 align:start position:0%
print the number of listeners that are
registered<00:31:06.700><c> and</c><00:31:07.700><c> finally</c><00:31:08.030><c> I</c><00:31:08.090><c> try</c><00:31:08.630><c> to</c><00:31:08.690><c> remove</c>

00:31:09.040 --> 00:31:09.050 align:start position:0%
registered and finally I try to remove
 

00:31:09.050 --> 00:31:10.480 align:start position:0%
registered and finally I try to remove
that<00:31:09.110><c> listener</c><00:31:09.590><c> and</c><00:31:09.740><c> a</c><00:31:09.860><c> print</c><00:31:10.100><c> the</c><00:31:10.160><c> number</c><00:31:10.400><c> of</c>

00:31:10.480 --> 00:31:10.490 align:start position:0%
that listener and a print the number of
 

00:31:10.490 --> 00:31:12.580 align:start position:0%
that listener and a print the number of
listeners<00:31:10.880><c> that</c><00:31:11.150><c> are</c><00:31:11.270><c> registered</c><00:31:11.780><c> what's</c>

00:31:12.580 --> 00:31:12.590 align:start position:0%
listeners that are registered what's
 

00:31:12.590 --> 00:31:16.360 align:start position:0%
listeners that are registered what's
gonna<00:31:12.710><c> happen</c><00:31:13.100><c> is</c><00:31:14.170><c> sorry</c><00:31:15.170><c> let</c><00:31:15.530><c> me</c><00:31:15.560><c> do</c><00:31:15.740><c> yeah</c><00:31:16.040><c> so</c>

00:31:16.360 --> 00:31:16.370 align:start position:0%
gonna happen is sorry let me do yeah so
 

00:31:16.370 --> 00:31:17.590 align:start position:0%
gonna happen is sorry let me do yeah so
what's<00:31:16.550><c> gonna</c><00:31:16.670><c> happen</c><00:31:17.000><c> is</c><00:31:17.090><c> that</c><00:31:17.120><c> when</c><00:31:17.450><c> we</c>

00:31:17.590 --> 00:31:17.600 align:start position:0%
what's gonna happen is that when we
 

00:31:17.600 --> 00:31:18.760 align:start position:0%
what's gonna happen is that when we
print<00:31:17.840><c> the</c><00:31:17.900><c> number</c><00:31:18.110><c> of</c><00:31:18.170><c> listeners</c><00:31:18.410><c> after</c>

00:31:18.760 --> 00:31:18.770 align:start position:0%
print the number of listeners after
 

00:31:18.770 --> 00:31:20.320 align:start position:0%
print the number of listeners after
adding<00:31:19.070><c> it</c><00:31:19.190><c> it's</c><00:31:19.340><c> gonna</c><00:31:19.460><c> set</c><00:31:19.700><c> this</c><00:31:19.790><c> one</c><00:31:20.000><c> inner</c>

00:31:20.320 --> 00:31:20.330 align:start position:0%
adding it it's gonna set this one inner
 

00:31:20.330 --> 00:31:21.790 align:start position:0%
adding it it's gonna set this one inner
that's<00:31:20.570><c> completely</c><00:31:20.900><c> expected</c><00:31:21.410><c> but</c><00:31:21.590><c> after</c>

00:31:21.790 --> 00:31:21.800 align:start position:0%
that's completely expected but after
 

00:31:21.800 --> 00:31:23.620 align:start position:0%
that's completely expected but after
calling<00:31:22.070><c> remove</c><00:31:22.370><c> the</c><00:31:22.940><c> number</c><00:31:23.090><c> of</c><00:31:23.270><c> listeners</c>

00:31:23.620 --> 00:31:23.630 align:start position:0%
calling remove the number of listeners
 

00:31:23.630 --> 00:31:24.880 align:start position:0%
calling remove the number of listeners
is<00:31:23.840><c> still</c><00:31:24.110><c> 1</c>

00:31:24.880 --> 00:31:24.890 align:start position:0%
is still 1
 

00:31:24.890 --> 00:31:27.070 align:start position:0%
is still 1
to<00:31:24.950><c> remove</c><00:31:25.250><c> did</c><00:31:25.460><c> not</c><00:31:25.610><c> work</c><00:31:25.850><c> and</c><00:31:26.270><c> to</c><00:31:26.750><c> understand</c>

00:31:27.070 --> 00:31:27.080 align:start position:0%
to remove did not work and to understand
 

00:31:27.080 --> 00:31:28.960 align:start position:0%
to remove did not work and to understand
why<00:31:27.290><c> doesn't</c><00:31:27.710><c> work</c><00:31:27.890><c> we</c><00:31:28.280><c> have</c><00:31:28.370><c> to</c><00:31:28.430><c> look</c><00:31:28.640><c> at</c><00:31:28.850><c> the</c>

00:31:28.960 --> 00:31:28.970 align:start position:0%
why doesn't work we have to look at the
 

00:31:28.970 --> 00:31:30.790 align:start position:0%
why doesn't work we have to look at the
code<00:31:29.180><c> that's</c><00:31:29.360><c> generated</c><00:31:29.480><c> by</c><00:31:29.780><c> the</c><00:31:29.870><c> compiler</c><00:31:30.170><c> so</c>

00:31:30.790 --> 00:31:30.800 align:start position:0%
code that's generated by the compiler so
 

00:31:30.800 --> 00:31:32.890 align:start position:0%
code that's generated by the compiler so
here's<00:31:30.980><c> what</c><00:31:31.100><c> it</c><00:31:31.340><c> looks</c><00:31:31.460><c> like</c><00:31:31.670><c> we</c><00:31:32.120><c> create</c><00:31:32.570><c> our</c>

00:31:32.890 --> 00:31:32.900 align:start position:0%
here's what it looks like we create our
 

00:31:32.900 --> 00:31:34.990 align:start position:0%
here's what it looks like we create our
listener<00:31:33.500><c> because</c><00:31:33.710><c> it's</c><00:31:33.980><c> a</c><00:31:34.070><c> lambda</c><00:31:34.280><c> it</c>

00:31:34.990 --> 00:31:35.000 align:start position:0%
listener because it's a lambda it
 

00:31:35.000 --> 00:31:37.390 align:start position:0%
listener because it's a lambda it
becomes<00:31:35.300><c> a</c><00:31:35.450><c> function</c><00:31:35.690><c> one</c><00:31:36.110><c> type</c><00:31:36.410><c> internally</c>

00:31:37.390 --> 00:31:37.400 align:start position:0%
becomes a function one type internally
 

00:31:37.400 --> 00:31:38.800 align:start position:0%
becomes a function one type internally
and<00:31:37.490><c> a</c><00:31:37.520><c> function</c><00:31:37.850><c> one</c><00:31:38.030><c> is</c><00:31:38.240><c> effectively</c><00:31:38.720><c> your</c>

00:31:38.800 --> 00:31:38.810 align:start position:0%
and a function one is effectively your
 

00:31:38.810 --> 00:31:41.170 align:start position:0%
and a function one is effectively your
lambda<00:31:39.020><c> that</c><00:31:39.200><c> has</c><00:31:39.440><c> one</c><00:31:39.740><c> parameter</c><00:31:40.180><c> but</c>

00:31:41.170 --> 00:31:41.180 align:start position:0%
lambda that has one parameter but
 

00:31:41.180 --> 00:31:42.850 align:start position:0%
lambda that has one parameter but
because<00:31:41.480><c> that</c><00:31:41.690><c> that</c><00:31:41.960><c> type</c><00:31:42.140><c> is</c><00:31:42.290><c> function</c><00:31:42.650><c> one</c>

00:31:42.850 --> 00:31:42.860 align:start position:0%
because that that type is function one
 

00:31:42.860 --> 00:31:44.770 align:start position:0%
because that that type is function one
it<00:31:43.070><c> is</c><00:31:43.220><c> not</c><00:31:43.520><c> the</c><00:31:43.760><c> listener</c><00:31:44.090><c> type</c><00:31:44.360><c> data</c><00:31:44.510><c> which</c>

00:31:44.770 --> 00:31:44.780 align:start position:0%
it is not the listener type data which
 

00:31:44.780 --> 00:31:46.840 align:start position:0%
it is not the listener type data which
it<00:31:44.900><c> expects</c><00:31:45.350><c> so</c><00:31:45.650><c> the</c><00:31:45.740><c> compiler</c><00:31:45.980><c> generates</c>

00:31:46.840 --> 00:31:46.850 align:start position:0%
it expects so the compiler generates
 

00:31:46.850 --> 00:31:48.460 align:start position:0%
it expects so the compiler generates
this<00:31:47.060><c> extra</c><00:31:47.480><c> class</c><00:31:47.750><c> called</c><00:31:48.050><c> widget</c>

00:31:48.460 --> 00:31:48.470 align:start position:0%
this extra class called widget
 

00:31:48.470 --> 00:31:50.710 align:start position:0%
this extra class called widget
underscore<00:31:49.070><c> listener</c><00:31:49.490><c> that</c><00:31:49.700><c> is</c><00:31:50.270><c> of</c><00:31:50.450><c> the</c><00:31:50.540><c> type</c>

00:31:50.710 --> 00:31:50.720 align:start position:0%
underscore listener that is of the type
 

00:31:50.720 --> 00:31:53.650 align:start position:0%
underscore listener that is of the type
listener<00:31:51.230><c> that</c><00:31:51.710><c> we</c><00:31:51.890><c> expect</c><00:31:52.280><c> and</c><00:31:52.550><c> it</c><00:31:53.090><c> passes</c><00:31:53.510><c> it</c>

00:31:53.650 --> 00:31:53.660 align:start position:0%
listener that we expect and it passes it
 

00:31:53.660 --> 00:31:56.290 align:start position:0%
listener that we expect and it passes it
our<00:31:53.870><c> function</c><00:31:54.410><c> one</c><00:31:54.620><c> our</c><00:31:54.890><c> lambda</c><00:31:55.310><c> so</c><00:31:55.880><c> it</c><00:31:55.970><c> wraps</c>

00:31:56.290 --> 00:31:56.300 align:start position:0%
our function one our lambda so it wraps
 

00:31:56.300 --> 00:31:58.810 align:start position:0%
our function one our lambda so it wraps
it<00:31:56.570><c> into</c><00:31:57.260><c> something</c><00:31:57.500><c> else</c><00:31:57.770><c> and</c><00:31:57.980><c> it's</c><00:31:58.580><c> that</c>

00:31:58.810 --> 00:31:58.820 align:start position:0%
it into something else and it's that
 

00:31:58.820 --> 00:32:01.000 align:start position:0%
it into something else and it's that
other<00:31:59.000><c> object</c><00:31:59.660><c> that</c><00:31:59.870><c> gets</c><00:32:00.380><c> passed</c><00:32:00.680><c> to</c><00:32:00.860><c> add</c>

00:32:01.000 --> 00:32:01.010 align:start position:0%
other object that gets passed to add
 

00:32:01.010 --> 00:32:02.710 align:start position:0%
other object that gets passed to add
listener<00:32:01.430><c> and</c><00:32:01.640><c> you</c><00:32:02.060><c> can</c><00:32:02.180><c> probably</c><00:32:02.420><c> guess</c>

00:32:02.710 --> 00:32:02.720 align:start position:0%
listener and you can probably guess
 

00:32:02.720 --> 00:32:04.540 align:start position:0%
listener and you can probably guess
what's<00:32:02.960><c> coming</c><00:32:03.290><c> up</c><00:32:03.350><c> next</c><00:32:03.410><c> when</c><00:32:04.250><c> we</c><00:32:04.370><c> could</c>

00:32:04.540 --> 00:32:04.550 align:start position:0%
what's coming up next when we could
 

00:32:04.550 --> 00:32:07.000 align:start position:0%
what's coming up next when we could
remove<00:32:04.880><c> listener</c><00:32:05.300><c> with</c><00:32:05.840><c> our</c><00:32:05.990><c> lambda</c><00:32:06.230><c> it</c><00:32:06.770><c> gets</c>

00:32:07.000 --> 00:32:07.010 align:start position:0%
remove listener with our lambda it gets
 

00:32:07.010 --> 00:32:09.100 align:start position:0%
remove listener with our lambda it gets
wrapped<00:32:07.220><c> again</c><00:32:07.730><c> it's</c><00:32:08.240><c> a</c><00:32:08.360><c> different</c><00:32:08.600><c> instance</c>

00:32:09.100 --> 00:32:09.110 align:start position:0%
wrapped again it's a different instance
 

00:32:09.110 --> 00:32:10.630 align:start position:0%
wrapped again it's a different instance
so<00:32:09.440><c> we're</c><00:32:09.590><c> trying</c><00:32:09.740><c> to</c><00:32:09.860><c> remove</c><00:32:10.160><c> a</c><00:32:10.280><c> different</c>

00:32:10.630 --> 00:32:10.640 align:start position:0%
so we're trying to remove a different
 

00:32:10.640 --> 00:32:12.730 align:start position:0%
so we're trying to remove a different
listener<00:32:11.060><c> and</c><00:32:11.240><c> so</c><00:32:11.660><c> we</c><00:32:11.810><c> actually</c><00:32:12.170><c> leaked</c><00:32:12.470><c> our</c>

00:32:12.730 --> 00:32:12.740 align:start position:0%
listener and so we actually leaked our
 

00:32:12.740 --> 00:32:14.350 align:start position:0%
listener and so we actually leaked our
listener<00:32:13.130><c> and</c><00:32:13.430><c> this</c><00:32:13.700><c> is</c><00:32:13.820><c> the</c><00:32:13.910><c> kind</c><00:32:14.090><c> of</c><00:32:14.120><c> stuff</c>

00:32:14.350 --> 00:32:14.360 align:start position:0%
listener and this is the kind of stuff
 

00:32:14.360 --> 00:32:17.020 align:start position:0%
listener and this is the kind of stuff
that<00:32:14.890><c> Android</c><00:32:15.890><c> Co</c><00:32:16.160><c> will</c><00:32:16.340><c> warn</c><00:32:16.550><c> you</c><00:32:16.700><c> against</c>

00:32:17.020 --> 00:32:17.030 align:start position:0%
that Android Co will warn you against
 

00:32:17.030 --> 00:32:19.360 align:start position:0%
that Android Co will warn you against
and<00:32:17.870><c> the</c><00:32:17.960><c> fix</c><00:32:18.170><c> is</c><00:32:18.290><c> fairly</c><00:32:18.500><c> easy</c><00:32:18.620><c> you</c><00:32:19.130><c> just</c><00:32:19.160><c> have</c>

00:32:19.360 --> 00:32:19.370 align:start position:0%
and the fix is fairly easy you just have
 

00:32:19.370 --> 00:32:21.640 align:start position:0%
and the fix is fairly easy you just have
to<00:32:19.670><c> be</c><00:32:19.880><c> specific</c><00:32:20.480><c> about</c><00:32:20.690><c> the</c><00:32:21.110><c> type</c><00:32:21.410><c> of</c><00:32:21.440><c> your</c>

00:32:21.640 --> 00:32:21.650 align:start position:0%
to be specific about the type of your
 

00:32:21.650 --> 00:32:23.440 align:start position:0%
to be specific about the type of your
lambda<00:32:21.830><c> just</c><00:32:22.100><c> say</c><00:32:22.250><c> it</c><00:32:22.670><c> is</c><00:32:22.850><c> a</c><00:32:22.880><c> widget</c><00:32:23.180><c> that</c>

00:32:23.440 --> 00:32:23.450 align:start position:0%
lambda just say it is a widget that
 

00:32:23.450 --> 00:32:25.390 align:start position:0%
lambda just say it is a widget that
listener<00:32:23.840><c> and</c><00:32:24.110><c> don't</c><00:32:24.530><c> just</c><00:32:24.770><c> use</c><00:32:24.950><c> the</c><00:32:25.070><c> naked</c>

00:32:25.390 --> 00:32:25.400 align:start position:0%
listener and don't just use the naked
 

00:32:25.400 --> 00:32:28.210 align:start position:0%
listener and don't just use the naked
lambda<00:32:25.970><c> form</c><00:32:26.380><c> so</c><00:32:27.380><c> let's</c><00:32:27.530><c> take</c><00:32:27.680><c> a</c><00:32:27.710><c> look</c><00:32:27.950><c> at</c><00:32:28.040><c> how</c>

00:32:28.210 --> 00:32:28.220 align:start position:0%
lambda form so let's take a look at how
 

00:32:28.220 --> 00:32:30.640 align:start position:0%
lambda form so let's take a look at how
extension<00:32:28.790><c> functions</c><00:32:29.300><c> actually</c><00:32:29.960><c> work</c><00:32:30.200><c> under</c>

00:32:30.640 --> 00:32:30.650 align:start position:0%
extension functions actually work under
 

00:32:30.650 --> 00:32:33.190 align:start position:0%
extension functions actually work under
the<00:32:30.770><c> hood</c><00:32:31.010><c> so</c><00:32:31.220><c> you</c><00:32:31.730><c> have</c><00:32:32.300><c> this</c><00:32:32.630><c> simple</c><00:32:32.990><c> class</c>

00:32:33.190 --> 00:32:33.200 align:start position:0%
the hood so you have this simple class
 

00:32:33.200 --> 00:32:34.930 align:start position:0%
the hood so you have this simple class
that<00:32:33.440><c> I've</c><00:32:33.560><c> defined</c><00:32:33.860><c> again</c><00:32:34.310><c> I</c><00:32:34.460><c> wrote</c><00:32:34.760><c> this</c>

00:32:34.930 --> 00:32:34.940 align:start position:0%
that I've defined again I wrote this
 

00:32:34.940 --> 00:32:37.360 align:start position:0%
that I've defined again I wrote this
code<00:32:35.210><c> all</c><00:32:35.420><c> by</c><00:32:35.690><c> myself</c><00:32:35.930><c> we</c><00:32:36.740><c> have</c><00:32:36.890><c> a</c><00:32:36.920><c> superclass</c>

00:32:37.360 --> 00:32:37.370 align:start position:0%
code all by myself we have a superclass
 

00:32:37.370 --> 00:32:38.920 align:start position:0%
code all by myself we have a superclass
and<00:32:37.700><c> then</c><00:32:37.850><c> we</c><00:32:37.940><c> have</c><00:32:38.060><c> a</c><00:32:38.090><c> subclass</c><00:32:38.510><c> which</c>

00:32:38.920 --> 00:32:38.930 align:start position:0%
and then we have a subclass which
 

00:32:38.930 --> 00:32:41.950 align:start position:0%
and then we have a subclass which
extends<00:32:39.560><c> that</c><00:32:39.680><c> superclass</c><00:32:40.220><c> awesome</c><00:32:41.180><c> then</c><00:32:41.570><c> we</c>

00:32:41.950 --> 00:32:41.960 align:start position:0%
extends that superclass awesome then we
 

00:32:41.960 --> 00:32:43.750 align:start position:0%
extends that superclass awesome then we
have<00:32:42.200><c> a</c><00:32:42.470><c> couple</c><00:32:42.830><c> of</c><00:32:42.920><c> extension</c><00:32:43.370><c> methods</c><00:32:43.700><c> that</c>

00:32:43.750 --> 00:32:43.760 align:start position:0%
have a couple of extension methods that
 

00:32:43.760 --> 00:32:45.400 align:start position:0%
have a couple of extension methods that
we've<00:32:43.910><c> defined</c><00:32:44.240><c> one</c><00:32:44.450><c> on</c><00:32:44.570><c> the</c><00:32:44.660><c> superclass</c><00:32:45.050><c> one</c>

00:32:45.400 --> 00:32:45.410 align:start position:0%
we've defined one on the superclass one
 

00:32:45.410 --> 00:32:47.290 align:start position:0%
we've defined one on the superclass one
of<00:32:45.500><c> the</c><00:32:45.590><c> subclass</c><00:32:45.980><c> and</c><00:32:46.310><c> they</c><00:32:46.820><c> print</c><00:32:47.090><c> out</c><00:32:47.180><c> this</c>

00:32:47.290 --> 00:32:47.300 align:start position:0%
of the subclass and they print out this
 

00:32:47.300 --> 00:32:48.970 align:start position:0%
of the subclass and they print out this
value<00:32:47.480><c> or</c><00:32:47.870><c> they</c><00:32:48.020><c> return</c><00:32:48.380><c> the</c><00:32:48.530><c> string</c><00:32:48.830><c> value</c>

00:32:48.970 --> 00:32:48.980 align:start position:0%
value or they return the string value
 

00:32:48.980 --> 00:32:51.640 align:start position:0%
value or they return the string value
that<00:32:49.310><c> indicates</c><00:32:49.490><c> which</c><00:32:50.420><c> one</c><00:32:50.660><c> was</c><00:32:51.500><c> actually</c>

00:32:51.640 --> 00:32:51.650 align:start position:0%
that indicates which one was actually
 

00:32:51.650 --> 00:32:53.950 align:start position:0%
that indicates which one was actually
called<00:32:52.130><c> so</c><00:32:52.610><c> the</c><00:32:52.730><c> super</c><00:32:53.000><c> instance</c><00:32:53.360><c> we</c><00:32:53.540><c> say</c><00:32:53.720><c> yep</c>

00:32:53.950 --> 00:32:53.960 align:start position:0%
called so the super instance we say yep
 

00:32:53.960 --> 00:32:55.630 align:start position:0%
called so the super instance we say yep
give<00:32:54.170><c> me</c><00:32:54.260><c> one</c><00:32:54.410><c> of</c><00:32:54.440><c> those</c><00:32:54.590><c> super</c><00:32:54.920><c> class</c><00:32:55.100><c> objects</c>

00:32:55.630 --> 00:32:55.640 align:start position:0%
give me one of those super class objects
 

00:32:55.640 --> 00:32:57.400 align:start position:0%
give me one of those super class objects
subclass<00:32:56.360><c> give</c><00:32:56.630><c> me</c><00:32:56.720><c> one</c><00:32:56.840><c> of</c><00:32:56.870><c> those</c><00:32:56.990><c> subclass</c>

00:32:57.400 --> 00:32:57.410 align:start position:0%
subclass give me one of those subclass
 

00:32:57.410 --> 00:33:00.370 align:start position:0%
subclass give me one of those subclass
objects<00:32:57.950><c> and</c><00:32:58.100><c> then</c><00:32:58.520><c> we</c><00:32:58.700><c> have</c><00:32:58.940><c> one</c><00:32:59.630><c> where</c><00:32:59.900><c> it</c><00:33:00.200><c> is</c>

00:33:00.370 --> 00:33:00.380 align:start position:0%
objects and then we have one where it is
 

00:33:00.380 --> 00:33:02.800 align:start position:0%
objects and then we have one where it is
a<00:33:00.410><c> subclass</c><00:33:00.890><c> but</c><00:33:01.370><c> we</c><00:33:01.880><c> cast</c><00:33:02.450><c> it</c><00:33:02.660><c> to</c><00:33:02.690><c> a</c>

00:33:02.800 --> 00:33:02.810 align:start position:0%
a subclass but we cast it to a
 

00:33:02.810 --> 00:33:05.710 align:start position:0%
a subclass but we cast it to a
superclass<00:33:03.380><c> and</c><00:33:04.100><c> then</c><00:33:04.670><c> the</c><00:33:04.880><c> question</c><00:33:05.240><c> is</c><00:33:05.390><c> what</c>

00:33:05.710 --> 00:33:05.720 align:start position:0%
superclass and then the question is what
 

00:33:05.720 --> 00:33:07.690 align:start position:0%
superclass and then the question is what
happens<00:33:06.050><c> when</c><00:33:06.230><c> we</c><00:33:06.380><c> call</c><00:33:06.560><c> get</c><00:33:06.860><c> identifier</c><00:33:07.490><c> on</c>

00:33:07.690 --> 00:33:07.700 align:start position:0%
happens when we call get identifier on
 

00:33:07.700 --> 00:33:09.940 align:start position:0%
happens when we call get identifier on
each<00:33:08.060><c> of</c><00:33:08.240><c> these</c><00:33:08.360><c> things</c><00:33:08.630><c> and</c><00:33:09.560><c> then</c><00:33:09.740><c> we</c><00:33:09.770><c> have</c>

00:33:09.940 --> 00:33:09.950 align:start position:0%
each of these things and then we have
 

00:33:09.950 --> 00:33:11.290 align:start position:0%
each of these things and then we have
one<00:33:10.130><c> more</c><00:33:10.310><c> example</c><00:33:10.610><c> where</c><00:33:10.910><c> instead</c><00:33:11.240><c> of</c>

00:33:11.290 --> 00:33:11.300 align:start position:0%
one more example where instead of
 

00:33:11.300 --> 00:33:13.090 align:start position:0%
one more example where instead of
precasting<00:33:12.140><c> it</c><00:33:12.290><c> we're</c><00:33:12.410><c> casting</c><00:33:12.770><c> it</c><00:33:12.860><c> at</c><00:33:12.950><c> run</c>

00:33:13.090 --> 00:33:13.100 align:start position:0%
precasting it we're casting it at run
 

00:33:13.100 --> 00:33:15.220 align:start position:0%
precasting it we're casting it at run
time<00:33:13.130><c> to</c><00:33:13.490><c> a</c><00:33:13.520><c> superclass</c><00:33:14.030><c> so</c><00:33:14.600><c> the</c><00:33:14.720><c> question</c><00:33:15.050><c> is</c>

00:33:15.220 --> 00:33:15.230 align:start position:0%
time to a superclass so the question is
 

00:33:15.230 --> 00:33:17.710 align:start position:0%
time to a superclass so the question is
when<00:33:15.560><c> we</c><00:33:15.680><c> call</c><00:33:15.860><c> the</c><00:33:16.130><c> get</c><00:33:16.760><c> identifier</c><00:33:17.330><c> on</c><00:33:17.360><c> the</c>

00:33:17.710 --> 00:33:17.720 align:start position:0%
when we call the get identifier on the
 

00:33:17.720 --> 00:33:22.550 align:start position:0%
when we call the get identifier on the
super<00:33:17.990><c> Val</c><00:33:18.170><c> we</c><00:33:18.410><c> get</c><00:33:20.470><c> anybody</c><00:33:21.470><c> awake</c>

00:33:22.550 --> 00:33:22.560 align:start position:0%
super Val we get anybody awake
 

00:33:22.560 --> 00:33:25.250 align:start position:0%
super Val we get anybody awake
there<00:33:23.280><c> we</c><00:33:23.580><c> go</c><00:33:23.760><c> what</c><00:33:24.090><c> a</c><00:33:24.120><c> super</c><00:33:24.510><c> answer</c><00:33:24.870><c> all</c>

00:33:25.250 --> 00:33:25.260 align:start position:0%
there we go what a super answer all
 

00:33:25.260 --> 00:33:28.580 align:start position:0%
there we go what a super answer all
right<00:33:25.440><c> how</c><00:33:25.620><c> about</c><00:33:25.650><c> the</c><00:33:25.920><c> next</c><00:33:26.070><c> one</c><00:33:27.110><c> all</c><00:33:28.110><c> right</c>

00:33:28.580 --> 00:33:28.590 align:start position:0%
right how about the next one all right
 

00:33:28.590 --> 00:33:33.680 align:start position:0%
right how about the next one all right
thank<00:33:28.890><c> you</c><00:33:29.010><c> and</c><00:33:29.280><c> number</c><00:33:29.640><c> three</c><00:33:31.160><c> wrong</c><00:33:32.690><c> sorry</c>

00:33:33.680 --> 00:33:33.690 align:start position:0%
thank you and number three wrong sorry
 

00:33:33.690 --> 00:33:35.780 align:start position:0%
thank you and number three wrong sorry
super<00:33:34.560><c> so</c><00:33:34.800><c> this</c><00:33:34.980><c> is</c><00:33:35.130><c> the</c><00:33:35.220><c> one</c><00:33:35.370><c> that's</c><00:33:35.550><c> a</c><00:33:35.610><c> little</c>

00:33:35.780 --> 00:33:35.790 align:start position:0%
super so this is the one that's a little
 

00:33:35.790 --> 00:33:37.730 align:start position:0%
super so this is the one that's a little
bit<00:33:35.940><c> surprising</c><00:33:36.510><c> and</c><00:33:36.750><c> finally</c><00:33:37.200><c> the</c><00:33:37.350><c> last</c><00:33:37.500><c> one</c>

00:33:37.730 --> 00:33:37.740 align:start position:0%
bit surprising and finally the last one
 

00:33:37.740 --> 00:33:40.280 align:start position:0%
bit surprising and finally the last one
is<00:33:37.800><c> the</c><00:33:38.040><c> same</c><00:33:38.280><c> so</c><00:33:38.520><c> it</c><00:33:38.910><c> is</c><00:33:39.120><c> a</c><00:33:39.150><c> subclass</c><00:33:39.690><c> what</c><00:33:40.170><c> is</c>

00:33:40.280 --> 00:33:40.290 align:start position:0%
is the same so it is a subclass what is
 

00:33:40.290 --> 00:33:41.930 align:start position:0%
is the same so it is a subclass what is
actually<00:33:40.710><c> going</c><00:33:40.890><c> on</c><00:33:41.160><c> like</c><00:33:41.490><c> shouldn't</c><00:33:41.820><c> it</c><00:33:41.910><c> be</c>

00:33:41.930 --> 00:33:41.940 align:start position:0%
actually going on like shouldn't it be
 

00:33:41.940 --> 00:33:44.960 align:start position:0%
actually going on like shouldn't it be
calling<00:33:42.390><c> that</c><00:33:42.780><c> method</c><00:33:42.810><c> on</c><00:33:43.410><c> the</c><00:33:43.530><c> subclass</c><00:33:43.980><c> it's</c>

00:33:44.960 --> 00:33:44.970 align:start position:0%
calling that method on the subclass it's
 

00:33:44.970 --> 00:33:47.660 align:start position:0%
calling that method on the subclass it's
because<00:33:45.450><c> of</c><00:33:45.690><c> these</c><00:33:46.020><c> the</c><00:33:46.920><c> implementation</c><00:33:47.610><c> of</c>

00:33:47.660 --> 00:33:47.670 align:start position:0%
because of these the implementation of
 

00:33:47.670 --> 00:33:48.890 align:start position:0%
because of these the implementation of
these<00:33:47.730><c> things</c><00:33:48.060><c> so</c><00:33:48.240><c> if</c><00:33:48.390><c> we</c><00:33:48.510><c> look</c><00:33:48.750><c> at</c><00:33:48.840><c> the</c>

00:33:48.890 --> 00:33:48.900 align:start position:0%
these things so if we look at the
 

00:33:48.900 --> 00:33:50.990 align:start position:0%
these things so if we look at the
decompiled<00:33:49.410><c> bytecode</c><00:33:49.860><c> this</c><00:33:50.490><c> is</c><00:33:50.670><c> what</c><00:33:50.850><c> we've</c>

00:33:50.990 --> 00:33:51.000 align:start position:0%
decompiled bytecode this is what we've
 

00:33:51.000 --> 00:33:51.170 align:start position:0%
decompiled bytecode this is what we've
got

00:33:51.170 --> 00:33:51.180 align:start position:0%
got
 

00:33:51.180 --> 00:33:53.180 align:start position:0%
got
get<00:33:51.420><c> identifier</c><00:33:51.960><c> is</c><00:33:52.170><c> now</c><00:33:52.290><c> a</c><00:33:52.320><c> static</c><00:33:52.980><c> method</c>

00:33:53.180 --> 00:33:53.190 align:start position:0%
get identifier is now a static method
 

00:33:53.190 --> 00:33:56.360 align:start position:0%
get identifier is now a static method
and<00:33:53.520><c> it</c><00:33:53.940><c> takes</c><00:33:54.240><c> an</c><00:33:54.510><c> instance</c><00:33:55.230><c> of</c><00:33:55.380><c> superclass</c>

00:33:56.360 --> 00:33:56.370 align:start position:0%
and it takes an instance of superclass
 

00:33:56.370 --> 00:33:59.870 align:start position:0%
and it takes an instance of superclass
same<00:33:57.120><c> thing</c><00:33:57.360><c> for</c><00:33:57.600><c> sub</c><00:33:58.100><c> the</c><00:33:59.100><c> get</c><00:33:59.340><c> identifier</c><00:33:59.850><c> on</c>

00:33:59.870 --> 00:33:59.880 align:start position:0%
same thing for sub the get identifier on
 

00:33:59.880 --> 00:34:01.730 align:start position:0%
same thing for sub the get identifier on
the<00:34:00.090><c> subclass</c><00:34:00.480><c> object</c><00:34:00.960><c> so</c><00:34:01.110><c> that</c><00:34:01.140><c> means</c><00:34:01.500><c> that</c>

00:34:01.730 --> 00:34:01.740 align:start position:0%
the subclass object so that means that
 

00:34:01.740 --> 00:34:04.340 align:start position:0%
the subclass object so that means that
when<00:34:01.920><c> we</c><00:34:01.950><c> call</c><00:34:02.280><c> it</c><00:34:02.490><c> with</c><00:34:03.090><c> a</c><00:34:03.360><c> superclass</c><00:34:03.990><c> object</c>

00:34:04.340 --> 00:34:04.350 align:start position:0%
when we call it with a superclass object
 

00:34:04.350 --> 00:34:06.830 align:start position:0%
when we call it with a superclass object
we<00:34:05.010><c> end</c><00:34:05.250><c> up</c><00:34:05.460><c> in</c><00:34:05.640><c> the</c><00:34:06.090><c> one</c><00:34:06.270><c> that</c><00:34:06.510><c> takes</c><00:34:06.660><c> a</c>

00:34:06.830 --> 00:34:06.840 align:start position:0%
we end up in the one that takes a
 

00:34:06.840 --> 00:34:07.910 align:start position:0%
we end up in the one that takes a
superclass<00:34:07.260><c> type</c>

00:34:07.910 --> 00:34:07.920 align:start position:0%
superclass type
 

00:34:07.920 --> 00:34:10.640 align:start position:0%
superclass type
same<00:34:08.340><c> thing</c><00:34:08.610><c> for</c><00:34:08.640><c> sub</c><00:34:09.210><c> and</c><00:34:09.419><c> same</c><00:34:10.169><c> thing</c><00:34:10.440><c> for</c>

00:34:10.640 --> 00:34:10.650 align:start position:0%
same thing for sub and same thing for
 

00:34:10.650 --> 00:34:12.860 align:start position:0%
same thing for sub and same thing for
sub<00:34:10.890><c> cast</c><00:34:11.250><c> as</c><00:34:11.460><c> super</c><00:34:11.850><c> we</c><00:34:12.000><c> have</c><00:34:12.210><c> told</c><00:34:12.540><c> the</c><00:34:12.630><c> type</c>

00:34:12.860 --> 00:34:12.870 align:start position:0%
sub cast as super we have told the type
 

00:34:12.870 --> 00:34:14.990 align:start position:0%
sub cast as super we have told the type
system<00:34:13.140><c> this</c><00:34:13.800><c> is</c><00:34:13.950><c> a</c><00:34:13.980><c> superclass</c><00:34:14.550><c> no</c><00:34:14.850><c> matter</c>

00:34:14.990 --> 00:34:15.000 align:start position:0%
system this is a superclass no matter
 

00:34:15.000 --> 00:34:17.270 align:start position:0%
system this is a superclass no matter
how<00:34:15.240><c> we</c><00:34:15.300><c> actually</c><00:34:15.659><c> created</c><00:34:16.320><c> it</c><00:34:16.440><c> so</c><00:34:16.860><c> it's</c><00:34:17.040><c> going</c>

00:34:17.270 --> 00:34:17.280 align:start position:0%
how we actually created it so it's going
 

00:34:17.280 --> 00:34:19.100 align:start position:0%
how we actually created it so it's going
to<00:34:17.400><c> call</c><00:34:17.640><c> the</c><00:34:17.790><c> get</c><00:34:17.909><c> identifier</c><00:34:18.510><c> that</c><00:34:18.750><c> takes</c><00:34:18.960><c> a</c>

00:34:19.100 --> 00:34:19.110 align:start position:0%
to call the get identifier that takes a
 

00:34:19.110 --> 00:34:20.990 align:start position:0%
to call the get identifier that takes a
superclass<00:34:19.470><c> instead</c><00:34:19.980><c> and</c><00:34:20.220><c> same</c><00:34:20.730><c> thing</c><00:34:20.760><c> for</c>

00:34:20.990 --> 00:34:21.000 align:start position:0%
superclass instead and same thing for
 

00:34:21.000 --> 00:34:23.860 align:start position:0%
superclass instead and same thing for
the<00:34:21.240><c> thing</c><00:34:21.510><c> that's</c><00:34:21.720><c> passed</c><00:34:22.020><c> at</c><00:34:22.230><c> runtime</c>

00:34:23.860 --> 00:34:23.870 align:start position:0%
the thing that's passed at runtime
 

00:34:23.870 --> 00:34:26.360 align:start position:0%
the thing that's passed at runtime
default<00:34:24.870><c> parameters</c><00:34:25.320><c> it's</c><00:34:25.620><c> a</c><00:34:25.740><c> very</c><00:34:25.980><c> handy</c>

00:34:26.360 --> 00:34:26.370 align:start position:0%
default parameters it's a very handy
 

00:34:26.370 --> 00:34:28.100 align:start position:0%
default parameters it's a very handy
function<00:34:26.760><c> in</c><00:34:26.970><c> Kirkland</c><00:34:27.450><c> you</c><00:34:27.570><c> can</c><00:34:27.720><c> specify</c><00:34:27.929><c> a</c>

00:34:28.100 --> 00:34:28.110 align:start position:0%
function in Kirkland you can specify a
 

00:34:28.110 --> 00:34:29.330 align:start position:0%
function in Kirkland you can specify a
default<00:34:28.260><c> value</c><00:34:28.470><c> for</c><00:34:28.649><c> your</c><00:34:28.919><c> parameters</c><00:34:29.310><c> and</c>

00:34:29.330 --> 00:34:29.340 align:start position:0%
default value for your parameters and
 

00:34:29.340 --> 00:34:31.040 align:start position:0%
default value for your parameters and
then<00:34:29.610><c> you</c><00:34:29.730><c> can</c><00:34:29.880><c> use</c><00:34:30.030><c> either</c><00:34:30.060><c> name</c><00:34:30.570><c> parameters</c>

00:34:31.040 --> 00:34:31.050 align:start position:0%
then you can use either name parameters
 

00:34:31.050 --> 00:34:32.300 align:start position:0%
then you can use either name parameters
to<00:34:31.169><c> invoke</c><00:34:31.440><c> them</c><00:34:31.590><c> or</c><00:34:31.770><c> just</c><00:34:31.950><c> omit</c><00:34:32.220><c> the</c>

00:34:32.300 --> 00:34:32.310 align:start position:0%
to invoke them or just omit the
 

00:34:32.310 --> 00:34:34.340 align:start position:0%
to invoke them or just omit the
parameters<00:34:32.760><c> and</c><00:34:32.970><c> rely</c><00:34:33.330><c> on</c><00:34:33.540><c> the</c><00:34:33.960><c> compiler</c><00:34:34.200><c> to</c>

00:34:34.340 --> 00:34:34.350 align:start position:0%
parameters and rely on the compiler to
 

00:34:34.350 --> 00:34:36.200 align:start position:0%
parameters and rely on the compiler to
do<00:34:34.530><c> the</c><00:34:34.649><c> right</c><00:34:34.770><c> thing</c><00:34:34.950><c> so</c><00:34:35.370><c> here</c><00:34:35.550><c> I</c><00:34:35.580><c> have</c><00:34:35.850><c> a</c><00:34:35.940><c> very</c>

00:34:36.200 --> 00:34:36.210 align:start position:0%
do the right thing so here I have a very
 

00:34:36.210 --> 00:34:38.210 align:start position:0%
do the right thing so here I have a very
useful<00:34:36.360><c> method</c><00:34:36.659><c> it</c><00:34:37.230><c> takes</c><00:34:37.290><c> two</c><00:34:37.710><c> floats</c><00:34:37.980><c> and</c>

00:34:38.210 --> 00:34:38.220 align:start position:0%
useful method it takes two floats and
 

00:34:38.220 --> 00:34:40.250 align:start position:0%
useful method it takes two floats and
you<00:34:38.490><c> just</c><00:34:38.730><c> adds</c><00:34:38.970><c> them</c><00:34:39.390><c> and</c><00:34:39.659><c> returns</c><00:34:40.050><c> the</c>

00:34:40.250 --> 00:34:40.260 align:start position:0%
you just adds them and returns the
 

00:34:40.260 --> 00:34:44.659 align:start position:0%
you just adds them and returns the
results<00:34:43.470><c> where</c><00:34:43.740><c> did</c><00:34:43.950><c> the</c><00:34:44.100><c> rest</c><00:34:44.280><c> of</c><00:34:44.520><c> the</c>

00:34:44.659 --> 00:34:44.669 align:start position:0%
results where did the rest of the
 

00:34:44.669 --> 00:34:49.490 align:start position:0%
results where did the rest of the
oh<00:34:44.909><c> sorry</c><00:34:46.220><c> wrong</c><00:34:47.220><c> sighs</c><00:34:47.780><c> all</c><00:34:48.780><c> right</c><00:34:48.929><c> so</c><00:34:49.230><c> here's</c>

00:34:49.490 --> 00:34:49.500 align:start position:0%
oh sorry wrong sighs all right so here's
 

00:34:49.500 --> 00:34:51.290 align:start position:0%
oh sorry wrong sighs all right so here's
the<00:34:49.560><c> code</c><00:34:49.830><c> that</c><00:34:50.010><c> get</c><00:34:50.340><c> generated</c><00:34:50.669><c> so</c><00:34:50.940><c> from</c><00:34:51.179><c> that</c>

00:34:51.290 --> 00:34:51.300 align:start position:0%
the code that get generated so from that
 

00:34:51.300 --> 00:34:52.700 align:start position:0%
the code that get generated so from that
code<00:34:51.540><c> that</c><00:34:51.659><c> we</c><00:34:51.810><c> have</c><00:34:51.990><c> that</c><00:34:52.169><c> takes</c><00:34:52.380><c> default</c>

00:34:52.700 --> 00:34:52.710 align:start position:0%
code that we have that takes default
 

00:34:52.710 --> 00:34:55.070 align:start position:0%
code that we have that takes default
parameter<00:34:53.070><c> values</c><00:34:53.520><c> we</c><00:34:54.210><c> have</c><00:34:54.419><c> a</c><00:34:54.600><c> new</c><00:34:54.780><c> static</c>

00:34:55.070 --> 00:34:55.080 align:start position:0%
parameter values we have a new static
 

00:34:55.080 --> 00:34:56.360 align:start position:0%
parameter values we have a new static
function<00:34:55.470><c> that</c><00:34:55.620><c> was</c><00:34:55.710><c> created</c><00:34:56.159><c> that</c><00:34:56.280><c> the</c>

00:34:56.360 --> 00:34:56.370 align:start position:0%
function that was created that the
 

00:34:56.370 --> 00:34:58.460 align:start position:0%
function that was created that the
stakes<00:34:56.640><c> are</c><00:34:56.730><c> two</c><00:34:57.270><c> floats</c><00:34:57.570><c> without</c><00:34:58.110><c> default</c>

00:34:58.460 --> 00:34:58.470 align:start position:0%
stakes are two floats without default
 

00:34:58.470 --> 00:35:00.320 align:start position:0%
stakes are two floats without default
values<00:34:58.800><c> because</c><00:34:59.190><c> no</c><00:34:59.370><c> we</c><00:34:59.520><c> generated</c><00:34:59.910><c> bytecode</c>

00:35:00.320 --> 00:35:00.330 align:start position:0%
values because no we generated bytecode
 

00:35:00.330 --> 00:35:02.420 align:start position:0%
values because no we generated bytecode
and<00:35:00.840><c> just</c><00:35:01.140><c> returns</c><00:35:01.440><c> it</c><00:35:01.740><c> just</c><00:35:01.920><c> adds</c><00:35:02.070><c> them</c><00:35:02.280><c> and</c>

00:35:02.420 --> 00:35:02.430 align:start position:0%
and just returns it just adds them and
 

00:35:02.430 --> 00:35:05.060 align:start position:0%
and just returns it just adds them and
returns<00:35:02.700><c> the</c><00:35:02.820><c> result</c><00:35:03.050><c> but</c><00:35:04.050><c> here's</c><00:35:04.470><c> there's</c>

00:35:05.060 --> 00:35:05.070 align:start position:0%
returns the result but here's there's
 

00:35:05.070 --> 00:35:07.040 align:start position:0%
returns the result but here's there's
another<00:35:05.310><c> method</c><00:35:05.550><c> that</c><00:35:05.820><c> was</c><00:35:05.940><c> created</c><00:35:06.390><c> so</c><00:35:06.900><c> it</c>

00:35:07.040 --> 00:35:07.050 align:start position:0%
another method that was created so it
 

00:35:07.050 --> 00:35:09.110 align:start position:0%
another method that was created so it
takes<00:35:07.290><c> two</c><00:35:07.560><c> floats</c><00:35:07.860><c> as</c><00:35:08.100><c> we</c><00:35:08.340><c> expect</c><00:35:08.760><c> and</c><00:35:08.970><c> then</c>

00:35:09.110 --> 00:35:09.120 align:start position:0%
takes two floats as we expect and then
 

00:35:09.120 --> 00:35:10.910 align:start position:0%
takes two floats as we expect and then
it<00:35:09.240><c> also</c><00:35:09.390><c> takes</c><00:35:09.660><c> an</c><00:35:09.900><c> integer</c><00:35:10.170><c> and</c><00:35:10.590><c> an</c><00:35:10.770><c> object</c>

00:35:10.910 --> 00:35:10.920 align:start position:0%
it also takes an integer and an object
 

00:35:10.920 --> 00:35:13.070 align:start position:0%
it also takes an integer and an object
as<00:35:11.700><c> far</c><00:35:11.940><c> as</c><00:35:12.000><c> I</c><00:35:12.090><c> can</c><00:35:12.240><c> tell</c><00:35:12.420><c> the</c><00:35:12.660><c> object</c><00:35:12.990><c> is</c>

00:35:13.070 --> 00:35:13.080 align:start position:0%
as far as I can tell the object is
 

00:35:13.080 --> 00:35:14.600 align:start position:0%
as far as I can tell the object is
always<00:35:13.350><c> said</c><00:35:13.530><c> to</c><00:35:13.710><c> know</c><00:35:13.860><c> so</c><00:35:14.100><c> I'm</c><00:35:14.160><c> natural</c><00:35:14.460><c> white</c>

00:35:14.600 --> 00:35:14.610 align:start position:0%
always said to know so I'm natural white
 

00:35:14.610 --> 00:35:16.310 align:start position:0%
always said to know so I'm natural white
stairs<00:35:14.910><c> probably</c><00:35:15.090><c> to</c><00:35:15.360><c> tag</c><00:35:15.540><c> those</c><00:35:15.750><c> methods</c><00:35:16.170><c> in</c>

00:35:16.310 --> 00:35:16.320 align:start position:0%
stairs probably to tag those methods in
 

00:35:16.320 --> 00:35:17.630 align:start position:0%
stairs probably to tag those methods in
a<00:35:16.380><c> way</c><00:35:16.560><c> or</c><00:35:16.620><c> another</c><00:35:16.800><c> I</c><00:35:17.040><c> should</c><00:35:17.310><c> I</c><00:35:17.400><c> straight</c>

00:35:17.630 --> 00:35:17.640 align:start position:0%
a way or another I should I straight
 

00:35:17.640 --> 00:35:18.650 align:start position:0%
a way or another I should I straight
brains<00:35:17.880><c> they</c><00:35:18.060><c> will</c><00:35:18.180><c> probably</c><00:35:18.450><c> know</c><00:35:18.540><c> the</c>

00:35:18.650 --> 00:35:18.660 align:start position:0%
brains they will probably know the
 

00:35:18.660 --> 00:35:21.350 align:start position:0%
brains they will probably know the
answer<00:35:18.960><c> and</c><00:35:19.110><c> the</c><00:35:19.740><c> integer</c><00:35:20.250><c> is</c><00:35:20.460><c> actually</c><00:35:20.910><c> a</c><00:35:20.940><c> big</c>

00:35:21.350 --> 00:35:21.360 align:start position:0%
answer and the integer is actually a big
 

00:35:21.360 --> 00:35:25.070 align:start position:0%
answer and the integer is actually a big
field<00:35:21.630><c> where</c><00:35:22.290><c> every</c><00:35:22.710><c> bit</c><00:35:22.920><c> tells</c><00:35:23.760><c> the</c><00:35:24.630><c> method</c>

00:35:25.070 --> 00:35:25.080 align:start position:0%
field where every bit tells the method
 

00:35:25.080 --> 00:35:27.470 align:start position:0%
field where every bit tells the method
which<00:35:25.560><c> parameters</c><00:35:26.130><c> you</c><00:35:26.310><c> did</c><00:35:26.490><c> not</c><00:35:26.700><c> specify</c><00:35:27.000><c> at</c>

00:35:27.470 --> 00:35:27.480 align:start position:0%
which parameters you did not specify at
 

00:35:27.480 --> 00:35:29.540 align:start position:0%
which parameters you did not specify at
the<00:35:27.630><c> call</c><00:35:27.840><c> site</c><00:35:28.080><c> so</c><00:35:28.650><c> you</c><00:35:28.680><c> can</c><00:35:28.860><c> see</c><00:35:29.070><c> here</c><00:35:29.370><c> when</c>

00:35:29.540 --> 00:35:29.550 align:start position:0%
the call site so you can see here when
 

00:35:29.550 --> 00:35:30.990 align:start position:0%
the call site so you can see here when
we<00:35:29.580><c> check</c><00:35:29.880><c> the</c><00:35:30.000><c> first</c><00:35:30.030><c> bit</c>

00:35:30.990 --> 00:35:31.000 align:start position:0%
we check the first bit
 

00:35:31.000 --> 00:35:33.630 align:start position:0%
we check the first bit
two<00:35:31.180><c> and</c><00:35:31.480><c> one</c><00:35:31.840><c> if</c><00:35:32.320><c> it's</c><00:35:32.590><c> set</c><00:35:32.890><c> that</c><00:35:33.340><c> means</c><00:35:33.520><c> that</c>

00:35:33.630 --> 00:35:33.640 align:start position:0%
two and one if it's set that means that
 

00:35:33.640 --> 00:35:36.480 align:start position:0%
two and one if it's set that means that
we<00:35:33.790><c> did</c><00:35:34.150><c> not</c><00:35:34.330><c> specify</c><00:35:34.570><c> a</c><00:35:35.109><c> value</c><00:35:35.320><c> so</c><00:35:36.010><c> we</c><00:35:36.160><c> use</c><00:35:36.310><c> the</c>

00:35:36.480 --> 00:35:36.490 align:start position:0%
we did not specify a value so we use the
 

00:35:36.490 --> 00:35:37.950 align:start position:0%
we did not specify a value so we use the
default<00:35:36.609><c> value</c><00:35:37.030><c> that</c><00:35:37.150><c> we</c><00:35:37.300><c> specified</c><00:35:37.780><c> on</c><00:35:37.930><c> the</c>

00:35:37.950 --> 00:35:37.960 align:start position:0%
default value that we specified on the
 

00:35:37.960 --> 00:35:39.359 align:start position:0%
default value that we specified on the
cutting<00:35:38.320><c> side</c><00:35:38.470><c> and</c><00:35:38.710><c> then</c><00:35:38.800><c> we</c><00:35:38.920><c> do</c><00:35:39.040><c> this</c><00:35:39.160><c> for</c>

00:35:39.359 --> 00:35:39.369 align:start position:0%
cutting side and then we do this for
 

00:35:39.369 --> 00:35:41.400 align:start position:0%
cutting side and then we do this for
every<00:35:39.430><c> parameters</c><00:35:40.060><c> parameter</c><00:35:40.869><c> and</c><00:35:41.140><c> at</c><00:35:41.290><c> the</c>

00:35:41.400 --> 00:35:41.410 align:start position:0%
every parameters parameter and at the
 

00:35:41.410 --> 00:35:43.890 align:start position:0%
every parameters parameter and at the
end<00:35:41.560><c> we</c><00:35:41.710><c> invoke</c><00:35:42.010><c> the</c><00:35:42.190><c> actual</c><00:35:42.730><c> function</c><00:35:43.210><c> that's</c>

00:35:43.890 --> 00:35:43.900 align:start position:0%
end we invoke the actual function that's
 

00:35:43.900 --> 00:35:46.290 align:start position:0%
end we invoke the actual function that's
at<00:35:44.050><c> the</c><00:35:44.140><c> top</c>

00:35:46.290 --> 00:35:46.300 align:start position:0%
at the top
 

00:35:46.300 --> 00:35:48.960 align:start position:0%
at the top
what's<00:35:46.869><c> interesting</c><00:35:47.550><c> because</c><00:35:48.550><c> it's</c><00:35:48.849><c> an</c>

00:35:48.960 --> 00:35:48.970 align:start position:0%
what's interesting because it's an
 

00:35:48.970 --> 00:35:50.910 align:start position:0%
what's interesting because it's an
integer<00:35:49.210><c> I</c><00:35:49.630><c> was</c><00:35:50.020><c> wondering</c><00:35:50.380><c> you</c><00:35:50.500><c> know</c><00:35:50.619><c> there's</c>

00:35:50.910 --> 00:35:50.920 align:start position:0%
integer I was wondering you know there's
 

00:35:50.920 --> 00:35:52.920 align:start position:0%
integer I was wondering you know there's
only<00:35:51.010><c> 32</c><00:35:51.460><c> bits</c><00:35:51.490><c> so</c><00:35:52.030><c> what</c><00:35:52.210><c> happens</c><00:35:52.599><c> when</c><00:35:52.780><c> you</c>

00:35:52.920 --> 00:35:52.930 align:start position:0%
only 32 bits so what happens when you
 

00:35:52.930 --> 00:35:54.960 align:start position:0%
only 32 bits so what happens when you
have<00:35:53.080><c> 33</c><00:35:53.710><c> parameters</c><00:35:54.369><c> and</c><00:35:54.640><c> we're</c><00:35:54.820><c> going</c><00:35:54.940><c> to</c>

00:35:54.960 --> 00:35:54.970 align:start position:0%
have 33 parameters and we're going to
 

00:35:54.970 --> 00:35:56.370 align:start position:0%
have 33 parameters and we're going to
take<00:35:55.119><c> a</c><00:35:55.180><c> look</c><00:35:55.359><c> at</c><00:35:55.570><c> that</c><00:35:55.690><c> in</c><00:35:55.869><c> a</c><00:35:55.930><c> moment</c>

00:35:56.370 --> 00:35:56.380 align:start position:0%
take a look at that in a moment
 

00:35:56.380 --> 00:35:58.440 align:start position:0%
take a look at that in a moment
but<00:35:56.650><c> just</c><00:35:56.800><c> here</c><00:35:57.040><c> are</c><00:35:57.130><c> some</c><00:35:57.280><c> examples</c><00:35:57.760><c> of</c><00:35:57.910><c> how</c>

00:35:58.440 --> 00:35:58.450 align:start position:0%
but just here are some examples of how
 

00:35:58.450 --> 00:35:59.970 align:start position:0%
but just here are some examples of how
it<00:35:58.599><c> works</c><00:35:58.869><c> so</c><00:35:59.020><c> if</c><00:35:59.140><c> I</c><00:35:59.230><c> called</c><00:35:59.470><c> my</c><00:35:59.619><c> function</c>

00:35:59.970 --> 00:35:59.980 align:start position:0%
it works so if I called my function
 

00:35:59.980 --> 00:36:01.859 align:start position:0%
it works so if I called my function
directly<00:36:00.160><c> without</c><00:36:00.520><c> specific</c><00:36:00.940><c> specifically</c>

00:36:01.859 --> 00:36:01.869 align:start position:0%
directly without specific specifically
 

00:36:01.869 --> 00:36:03.810 align:start position:0%
directly without specific specifically
any<00:36:02.050><c> values</c><00:36:02.349><c> the</c><00:36:03.099><c> curtain</c><00:36:03.400><c> compiler</c><00:36:03.640><c> would</c>

00:36:03.810 --> 00:36:03.820 align:start position:0%
any values the curtain compiler would
 

00:36:03.820 --> 00:36:05.700 align:start position:0%
any values the curtain compiler would
just<00:36:04.030><c> use</c><00:36:04.180><c> the</c><00:36:04.300><c> default</c><00:36:04.570><c> value</c><00:36:04.780><c> 0</c><00:36:05.080><c> and</c><00:36:05.290><c> then</c>

00:36:05.700 --> 00:36:05.710 align:start position:0%
just use the default value 0 and then
 

00:36:05.710 --> 00:36:07.589 align:start position:0%
just use the default value 0 and then
for<00:36:05.859><c> the</c><00:36:05.980><c> bit</c><00:36:06.130><c> field</c><00:36:06.369><c> it</c><00:36:06.550><c> will</c><00:36:06.760><c> set</c><00:36:06.970><c> 3</c><00:36:07.270><c> so</c><00:36:07.480><c> the</c>

00:36:07.589 --> 00:36:07.599 align:start position:0%
for the bit field it will set 3 so the
 

00:36:07.599 --> 00:36:09.810 align:start position:0%
for the bit field it will set 3 so the
bit<00:36:07.750><c> 1</c><00:36:08.080><c> and</c><00:36:08.320><c> 2</c><00:36:08.530><c> are</c><00:36:08.710><c> set</c><00:36:09.010><c> and</c><00:36:09.369><c> it's</c><00:36:09.640><c> going</c><00:36:09.730><c> to</c>

00:36:09.810 --> 00:36:09.820 align:start position:0%
bit 1 and 2 are set and it's going to
 

00:36:09.820 --> 00:36:11.550 align:start position:0%
bit 1 and 2 are set and it's going to
use<00:36:09.940><c> the</c><00:36:10.060><c> default</c><00:36:10.180><c> values</c><00:36:10.359><c> if</c><00:36:10.930><c> I</c><00:36:11.050><c> specify</c><00:36:11.260><c> the</c>

00:36:11.550 --> 00:36:11.560 align:start position:0%
use the default values if I specify the
 

00:36:11.560 --> 00:36:14.220 align:start position:0%
use the default values if I specify the
first<00:36:11.950><c> parameter</c><00:36:12.130><c> we</c><00:36:13.119><c> see</c><00:36:13.330><c> our</c><00:36:13.420><c> value</c><00:36:13.780><c> as</c><00:36:14.020><c> the</c>

00:36:14.220 --> 00:36:14.230 align:start position:0%
first parameter we see our value as the
 

00:36:14.230 --> 00:36:15.690 align:start position:0%
first parameter we see our value as the
first<00:36:14.440><c> parameter</c><00:36:14.619><c> which</c><00:36:15.010><c> is</c><00:36:15.040><c> 0</c><00:36:15.430><c> for</c><00:36:15.640><c> the</c>

00:36:15.690 --> 00:36:15.700 align:start position:0%
first parameter which is 0 for the
 

00:36:15.700 --> 00:36:17.430 align:start position:0%
first parameter which is 0 for the
second<00:36:16.030><c> one</c><00:36:16.150><c> the</c><00:36:16.420><c> bid</c><00:36:16.570><c> field</c><00:36:16.780><c> is</c><00:36:16.930><c> set</c><00:36:17.080><c> to</c><00:36:17.200><c> 2</c>

00:36:17.430 --> 00:36:17.440 align:start position:0%
second one the bid field is set to 2
 

00:36:17.440 --> 00:36:19.260 align:start position:0%
second one the bid field is set to 2
because<00:36:17.650><c> the</c><00:36:17.890><c> second</c><00:36:18.280><c> parameter</c><00:36:18.580><c> is</c><00:36:18.880><c> not</c><00:36:19.030><c> set</c>

00:36:19.260 --> 00:36:19.270 align:start position:0%
because the second parameter is not set
 

00:36:19.270 --> 00:36:21.300 align:start position:0%
because the second parameter is not set
same<00:36:20.140><c> thing</c><00:36:20.320><c> when</c><00:36:20.500><c> you</c><00:36:20.590><c> specify</c><00:36:20.770><c> only</c><00:36:20.980><c> the</c>

00:36:21.300 --> 00:36:21.310 align:start position:0%
same thing when you specify only the
 

00:36:21.310 --> 00:36:23.099 align:start position:0%
same thing when you specify only the
second<00:36:21.640><c> parameter</c><00:36:21.760><c> and</c><00:36:22.210><c> then</c><00:36:22.570><c> of</c><00:36:22.720><c> course</c><00:36:22.930><c> if</c>

00:36:23.099 --> 00:36:23.109 align:start position:0%
second parameter and then of course if
 

00:36:23.109 --> 00:36:24.750 align:start position:0%
second parameter and then of course if
you<00:36:23.200><c> specify</c><00:36:23.440><c> the</c><00:36:23.770><c> two</c><00:36:23.980><c> parameters</c><00:36:24.490><c> we</c><00:36:24.609><c> call</c>

00:36:24.750 --> 00:36:24.760 align:start position:0%
you specify the two parameters we call
 

00:36:24.760 --> 00:36:26.460 align:start position:0%
you specify the two parameters we call
directly<00:36:25.240><c> the</c><00:36:25.690><c> function</c><00:36:26.050><c> that</c><00:36:26.170><c> does</c><00:36:26.349><c> the</c>

00:36:26.460 --> 00:36:26.470 align:start position:0%
directly the function that does the
 

00:36:26.470 --> 00:36:27.990 align:start position:0%
directly the function that does the
actual<00:36:26.740><c> work</c><00:36:26.950><c> and</c><00:36:27.130><c> we</c><00:36:27.310><c> skip</c><00:36:27.550><c> all</c><00:36:27.670><c> those</c><00:36:27.760><c> checks</c>

00:36:27.990 --> 00:36:28.000 align:start position:0%
actual work and we skip all those checks
 

00:36:28.000 --> 00:36:30.750 align:start position:0%
actual work and we skip all those checks
so<00:36:28.510><c> we</c><00:36:28.960><c> have</c><00:36:29.080><c> only</c><00:36:29.230><c> 32</c><00:36:29.590><c> bits</c><00:36:29.859><c> what</c><00:36:30.310><c> happened</c><00:36:30.670><c> we</c>

00:36:30.750 --> 00:36:30.760 align:start position:0%
so we have only 32 bits what happened we
 

00:36:30.760 --> 00:36:32.310 align:start position:0%
so we have only 32 bits what happened we
will<00:36:30.880><c> create</c><00:36:31.090><c> a</c><00:36:31.180><c> function</c><00:36:31.599><c> that</c><00:36:31.630><c> has</c><00:36:31.750><c> 33</c>

00:36:32.310 --> 00:36:32.320 align:start position:0%
will create a function that has 33
 

00:36:32.320 --> 00:36:34.920 align:start position:0%
will create a function that has 33
parameters<00:36:33.090><c> you</c><00:36:34.090><c> should</c><00:36:34.300><c> probably</c><00:36:34.540><c> not</c><00:36:34.750><c> do</c>

00:36:34.920 --> 00:36:34.930 align:start position:0%
parameters you should probably not do
 

00:36:34.930 --> 00:36:36.930 align:start position:0%
parameters you should probably not do
that<00:36:35.080><c> in</c><00:36:35.230><c> your</c><00:36:35.349><c> code</c><00:36:35.619><c> but</c><00:36:36.250><c> just</c><00:36:36.490><c> in</c><00:36:36.609><c> case</c><00:36:36.790><c> that</c>

00:36:36.930 --> 00:36:36.940 align:start position:0%
that in your code but just in case that
 

00:36:36.940 --> 00:36:38.370 align:start position:0%
that in your code but just in case that
double<00:36:37.210><c> check</c><00:36:37.390><c> for</c><00:36:37.420><c> you</c><00:36:37.780><c> what</c><00:36:38.020><c> happened</c>

00:36:38.370 --> 00:36:38.380 align:start position:0%
double check for you what happened
 

00:36:38.380 --> 00:36:39.810 align:start position:0%
double check for you what happened
honestly<00:36:38.980><c> I</c><00:36:39.010><c> was</c><00:36:39.130><c> waiting</c><00:36:39.430><c> for</c><00:36:39.580><c> I</c><00:36:39.700><c> was</c>

00:36:39.810 --> 00:36:39.820 align:start position:0%
honestly I was waiting for I was
 

00:36:39.820 --> 00:36:41.370 align:start position:0%
honestly I was waiting for I was
expecting<00:36:40.240><c> the</c><00:36:40.330><c> compiler</c><00:36:40.660><c> to</c><00:36:40.869><c> just</c><00:36:41.050><c> send</c><00:36:41.230><c> up</c>

00:36:41.370 --> 00:36:41.380 align:start position:0%
expecting the compiler to just send up
 

00:36:41.380 --> 00:36:43.770 align:start position:0%
expecting the compiler to just send up
too<00:36:41.560><c> many</c><00:36:41.740><c> parameters</c><00:36:41.920><c> I</c><00:36:42.310><c> can</c><00:36:42.520><c> do</c><00:36:42.670><c> that</c><00:36:42.820><c> what</c>

00:36:43.770 --> 00:36:43.780 align:start position:0%
too many parameters I can do that what
 

00:36:43.780 --> 00:36:46.079 align:start position:0%
too many parameters I can do that what
it<00:36:43.869><c> does</c><00:36:44.050><c> it</c><00:36:44.320><c> creates</c><00:36:44.710><c> two</c><00:36:45.280><c> integers</c><00:36:45.820><c> so</c><00:36:46.000><c> it</c>

00:36:46.079 --> 00:36:46.089 align:start position:0%
it does it creates two integers so it
 

00:36:46.089 --> 00:36:48.060 align:start position:0%
it does it creates two integers so it
just<00:36:46.330><c> adds</c><00:36:46.510><c> a</c><00:36:46.720><c> second</c><00:36:47.109><c> bit</c><00:36:47.260><c> field</c><00:36:47.530><c> and</c><00:36:47.800><c> going</c>

00:36:48.060 --> 00:36:48.070 align:start position:0%
just adds a second bit field and going
 

00:36:48.070 --> 00:36:49.980 align:start position:0%
just adds a second bit field and going
to<00:36:48.160><c> look</c><00:36:48.310><c> at</c><00:36:48.430><c> the</c><00:36:48.970><c> bits</c><00:36:49.150><c> in</c><00:36:49.300><c> both</c><00:36:49.510><c> bit</c><00:36:49.720><c> fields</c>

00:36:49.980 --> 00:36:49.990 align:start position:0%
to look at the bits in both bit fields
 

00:36:49.990 --> 00:36:52.040 align:start position:0%
to look at the bits in both bit fields
because<00:36:50.470><c> what's</c><00:36:50.680><c> better</c><00:36:50.920><c> than</c><00:36:51.099><c> a</c><00:36:51.160><c> bit</c><00:36:51.369><c> field</c>

00:36:52.040 --> 00:36:52.050 align:start position:0%
because what's better than a bit field
 

00:36:52.050 --> 00:36:55.890 align:start position:0%
because what's better than a bit field
two<00:36:53.050><c> bit</c><00:36:53.290><c> fields</c><00:36:54.420><c> all</c><00:36:55.420><c> right</c><00:36:55.540><c> finally</c>

00:36:55.890 --> 00:36:55.900 align:start position:0%
two bit fields all right finally
 

00:36:55.900 --> 00:36:57.000 align:start position:0%
two bit fields all right finally
co-routines<00:36:56.380><c> we</c><00:36:56.500><c> only</c><00:36:56.619><c> have</c><00:36:56.770><c> three</c><00:36:56.920><c> minutes</c>

00:36:57.000 --> 00:36:57.010 align:start position:0%
co-routines we only have three minutes
 

00:36:57.010 --> 00:36:58.320 align:start position:0%
co-routines we only have three minutes
left<00:36:57.220><c> so</c><00:36:57.520><c> we're</c><00:36:57.640><c> gonna</c><00:36:57.730><c> go</c><00:36:57.910><c> through</c><00:36:58.060><c> this</c><00:36:58.180><c> very</c>

00:36:58.320 --> 00:36:58.330 align:start position:0%
left so we're gonna go through this very
 

00:36:58.330 --> 00:37:00.589 align:start position:0%
left so we're gonna go through this very
quickly<00:36:58.510><c> how</c><00:36:58.930><c> many</c><00:36:59.080><c> of</c><00:36:59.170><c> you</c><00:36:59.260><c> use</c><00:36:59.410><c> co-routines</c>

00:37:00.589 --> 00:37:00.599 align:start position:0%
quickly how many of you use co-routines
 

00:37:00.599 --> 00:37:03.750 align:start position:0%
quickly how many of you use co-routines
okay<00:37:01.599><c> so</c><00:37:01.660><c> sorry</c><00:37:02.440><c> for</c><00:37:02.650><c> the</c><00:37:02.770><c> for</c><00:37:03.369><c> those</c><00:37:03.490><c> of</c><00:37:03.640><c> you</c>

00:37:03.750 --> 00:37:03.760 align:start position:0%
okay so sorry for the for those of you
 

00:37:03.760 --> 00:37:05.160 align:start position:0%
okay so sorry for the for those of you
who<00:37:03.880><c> don't</c><00:37:04.030><c> know</c><00:37:04.089><c> how</c><00:37:04.330><c> proteins</c><00:37:04.780><c> work</c><00:37:04.839><c> without</c>

00:37:05.160 --> 00:37:05.170 align:start position:0%
who don't know how proteins work without
 

00:37:05.170 --> 00:37:06.420 align:start position:0%
who don't know how proteins work without
I'm<00:37:05.410><c> gonna</c><00:37:05.589><c> gonna</c><00:37:05.770><c> explain</c><00:37:06.070><c> that</c><00:37:06.130><c> too</c><00:37:06.339><c> much</c>

00:37:06.420 --> 00:37:06.430 align:start position:0%
I'm gonna gonna explain that too much
 

00:37:06.430 --> 00:37:08.010 align:start position:0%
I'm gonna gonna explain that too much
but<00:37:06.609><c> basically</c><00:37:07.000><c> so</c><00:37:07.420><c> you</c><00:37:07.450><c> have</c><00:37:07.570><c> a</c><00:37:07.599><c> suspend</c>

00:37:08.010 --> 00:37:08.020 align:start position:0%
but basically so you have a suspend
 

00:37:08.020 --> 00:37:09.510 align:start position:0%
but basically so you have a suspend
function<00:37:08.440><c> that</c><00:37:08.890><c> means</c><00:37:09.010><c> you</c><00:37:09.130><c> can</c><00:37:09.280><c> do</c><00:37:09.369><c> heavy</c>

00:37:09.510 --> 00:37:09.520 align:start position:0%
function that means you can do heavy
 

00:37:09.520 --> 00:37:12.690 align:start position:0%
function that means you can do heavy
work<00:37:09.640><c> in</c><00:37:09.970><c> there</c><00:37:10.150><c> and</c><00:37:11.050><c> here</c><00:37:11.650><c> I</c><00:37:11.710><c> call</c><00:37:11.920><c> a</c><00:37:11.950><c> function</c>

00:37:12.690 --> 00:37:12.700 align:start position:0%
work in there and here I call a function
 

00:37:12.700 --> 00:37:14.730 align:start position:0%
work in there and here I call a function
called<00:37:12.880><c> delay</c><00:37:13.150><c> we're</c><00:37:13.810><c> simulating</c><00:37:14.080><c> heavy</c><00:37:14.440><c> work</c>

00:37:14.730 --> 00:37:14.740 align:start position:0%
called delay we're simulating heavy work
 

00:37:14.740 --> 00:37:17.220 align:start position:0%
called delay we're simulating heavy work
then<00:37:15.369><c> I'll</c><00:37:15.580><c> launch</c><00:37:15.820><c> a</c><00:37:16.000><c> curve</c><00:37:16.210><c> routine</c><00:37:16.540><c> so</c><00:37:17.200><c> we</c>

00:37:17.220 --> 00:37:17.230 align:start position:0%
then I'll launch a curve routine so we
 

00:37:17.230 --> 00:37:19.200 align:start position:0%
then I'll launch a curve routine so we
print<00:37:17.589><c> that</c><00:37:17.710><c> I'm</c><00:37:17.859><c> launching</c><00:37:18.520><c> a</c><00:37:18.760><c> curry</c><00:37:18.970><c> team</c>

00:37:19.200 --> 00:37:19.210 align:start position:0%
print that I'm launching a curry team
 

00:37:19.210 --> 00:37:21.300 align:start position:0%
print that I'm launching a curry team
then<00:37:19.480><c> I</c><00:37:19.599><c> call</c><00:37:19.839><c> launch</c><00:37:20.080><c> I</c><00:37:20.349><c> call</c><00:37:20.770><c> my</c><00:37:20.920><c> suspend</c>

00:37:21.300 --> 00:37:21.310 align:start position:0%
then I call launch I call my suspend
 

00:37:21.310 --> 00:37:23.070 align:start position:0%
then I call launch I call my suspend
function<00:37:21.640><c> twice</c><00:37:21.790><c> so</c><00:37:22.150><c> compute</c><00:37:22.570><c> and</c><00:37:22.690><c> compute</c>

00:37:23.070 --> 00:37:23.080 align:start position:0%
function twice so compute and compute
 

00:37:23.080 --> 00:37:25.140 align:start position:0%
function twice so compute and compute
and<00:37:23.440><c> finally</c><00:37:23.770><c> I</c><00:37:23.800><c> print</c><00:37:24.130><c> exiting</c><00:37:24.670><c> crow</c><00:37:24.849><c> routine</c>

00:37:25.140 --> 00:37:25.150 align:start position:0%
and finally I print exiting crow routine
 

00:37:25.150 --> 00:37:27.450 align:start position:0%
and finally I print exiting crow routine
so<00:37:25.750><c> if</c><00:37:26.109><c> we</c><00:37:26.290><c> don't</c><00:37:26.410><c> run</c><00:37:26.740><c> this</c><00:37:26.890><c> program</c><00:37:27.099><c> we're</c>

00:37:27.450 --> 00:37:27.460 align:start position:0%
so if we don't run this program we're
 

00:37:27.460 --> 00:37:28.380 align:start position:0%
so if we don't run this program we're
gonna<00:37:27.580><c> see</c><00:37:27.790><c> the</c><00:37:27.910><c> following</c><00:37:28.240><c> output</c>

00:37:28.380 --> 00:37:28.390 align:start position:0%
gonna see the following output
 

00:37:28.390 --> 00:37:30.450 align:start position:0%
gonna see the following output
relaunching<00:37:29.109><c> the</c><00:37:29.230><c> recording</c><00:37:29.800><c> we're</c>

00:37:30.450 --> 00:37:30.460 align:start position:0%
relaunching the recording we're
 

00:37:30.460 --> 00:37:32.250 align:start position:0%
relaunching the recording we're
computing<00:37:30.790><c> that</c><00:37:31.420><c> our</c><00:37:31.630><c> suspend</c><00:37:31.960><c> function</c>

00:37:32.250 --> 00:37:32.260 align:start position:0%
computing that our suspend function
 

00:37:32.260 --> 00:37:33.690 align:start position:0%
computing that our suspend function
we're<00:37:32.410><c> computing</c><00:37:32.650><c> again</c><00:37:33.010><c> that's</c><00:37:33.250><c> our</c><00:37:33.369><c> suspend</c>

00:37:33.690 --> 00:37:33.700 align:start position:0%
we're computing again that's our suspend
 

00:37:33.700 --> 00:37:36.329 align:start position:0%
we're computing again that's our suspend
function<00:37:34.000><c> wigs</c><00:37:34.180><c> it's</c><00:37:35.190><c> curtains</c><00:37:36.190><c> are</c>

00:37:36.329 --> 00:37:36.339 align:start position:0%
function wigs it's curtains are
 

00:37:36.339 --> 00:37:38.190 align:start position:0%
function wigs it's curtains are
implemented<00:37:36.550><c> using</c><00:37:36.790><c> state</c><00:37:37.359><c> machines</c><00:37:37.750><c> so</c><00:37:38.140><c> if</c>

00:37:38.190 --> 00:37:38.200 align:start position:0%
implemented using state machines so if
 

00:37:38.200 --> 00:37:39.950 align:start position:0%
implemented using state machines so if
you<00:37:38.349><c> look</c><00:37:38.530><c> at</c><00:37:38.770><c> the</c><00:37:38.950><c> code</c><00:37:39.220><c> that's</c><00:37:39.640><c> generated</c>

00:37:39.950 --> 00:37:39.960 align:start position:0%
you look at the code that's generated
 

00:37:39.960 --> 00:37:42.630 align:start position:0%
you look at the code that's generated
it's<00:37:40.960><c> gonna</c><00:37:41.109><c> look</c><00:37:41.800><c> something</c><00:37:42.160><c> like</c><00:37:42.400><c> this</c>

00:37:42.630 --> 00:37:42.640 align:start position:0%
it's gonna look something like this
 

00:37:42.640 --> 00:37:43.260 align:start position:0%
it's gonna look something like this
there's<00:37:42.880><c> going</c><00:37:42.970><c> to</c><00:37:43.030><c> be</c>

00:37:43.260 --> 00:37:43.270 align:start position:0%
there's going to be
 

00:37:43.270 --> 00:37:44.970 align:start position:0%
there's going to be
vogue<00:37:43.570><c> suspend</c><00:37:44.020><c> function</c><00:37:44.470><c> generates</c>

00:37:44.970 --> 00:37:44.980 align:start position:0%
vogue suspend function generates
 

00:37:44.980 --> 00:37:47.490 align:start position:0%
vogue suspend function generates
somewhere<00:37:45.430><c> in</c><00:37:45.670><c> at</c><00:37:46.330><c> the</c><00:37:46.420><c> top</c><00:37:46.570><c> does</c><00:37:46.869><c> a</c><00:37:46.900><c> switch</c><00:37:47.260><c> on</c>

00:37:47.490 --> 00:37:47.500 align:start position:0%
somewhere in at the top does a switch on
 

00:37:47.500 --> 00:37:49.290 align:start position:0%
somewhere in at the top does a switch on
an<00:37:47.710><c> intro</c><00:37:47.980><c> field</c><00:37:48.369><c> so</c><00:37:48.700><c> that</c><00:37:48.850><c> function</c><00:37:49.000><c> is</c>

00:37:49.290 --> 00:37:49.300 align:start position:0%
an intro field so that function is
 

00:37:49.300 --> 00:37:51.359 align:start position:0%
an intro field so that function is
inside<00:37:49.630><c> the</c><00:37:49.750><c> class</c><00:37:49.930><c> and</c><00:37:50.380><c> it</c><00:37:50.830><c> switches</c><00:37:51.070><c> on</c><00:37:51.340><c> the</c>

00:37:51.359 --> 00:37:51.369 align:start position:0%
inside the class and it switches on the
 

00:37:51.369 --> 00:37:53.700 align:start position:0%
inside the class and it switches on the
field<00:37:51.700><c> code</c><00:37:51.940><c> label</c><00:37:52.330><c> and</c><00:37:52.570><c> ylabel</c><00:37:52.960><c> is</c><00:37:53.320><c> basically</c>

00:37:53.700 --> 00:37:53.710 align:start position:0%
field code label and ylabel is basically
 

00:37:53.710 --> 00:37:56.130 align:start position:0%
field code label and ylabel is basically
where<00:37:54.130><c> you</c><00:37:54.340><c> are</c><00:37:54.610><c> in</c><00:37:55.210><c> the</c><00:37:55.480><c> current</c><00:37:55.900><c> state</c>

00:37:56.130 --> 00:37:56.140 align:start position:0%
where you are in the current state
 

00:37:56.140 --> 00:37:58.020 align:start position:0%
where you are in the current state
machine<00:37:56.500><c> so</c><00:37:56.530><c> every</c><00:37:57.160><c> suspend</c><00:37:57.580><c> function</c><00:37:57.910><c> you</c>

00:37:58.020 --> 00:37:58.030 align:start position:0%
machine so every suspend function you
 

00:37:58.030 --> 00:38:00.420 align:start position:0%
machine so every suspend function you
call<00:37:58.240><c> in</c><00:37:58.510><c> the</c><00:37:58.630><c> core</c><00:37:58.810><c> routine</c><00:37:59.050><c> will</c><00:37:59.710><c> be</c><00:37:59.890><c> a</c><00:38:00.040><c> state</c>

00:38:00.420 --> 00:38:00.430 align:start position:0%
call in the core routine will be a state
 

00:38:00.430 --> 00:38:02.609 align:start position:0%
call in the core routine will be a state
in<00:38:00.730><c> a</c><00:38:00.880><c> state</c><00:38:00.910><c> machine</c><00:38:01.300><c> so</c><00:38:01.660><c> here</c><00:38:02.200><c> you</c><00:38:02.290><c> can</c><00:38:02.380><c> see</c>

00:38:02.609 --> 00:38:02.619 align:start position:0%
in a state machine so here you can see
 

00:38:02.619 --> 00:38:06.000 align:start position:0%
in a state machine so here you can see
we<00:38:02.740><c> switch</c><00:38:02.980><c> on</c><00:38:03.130><c> label</c><00:38:03.430><c> and</c><00:38:03.640><c> in</c><00:38:04.060><c> the</c><00:38:04.150><c> case</c><00:38:04.360><c> 0</c><00:38:05.010><c> we</c>

00:38:06.000 --> 00:38:06.010 align:start position:0%
we switch on label and in the case 0 we
 

00:38:06.010 --> 00:38:07.620 align:start position:0%
we switch on label and in the case 0 we
set<00:38:06.250><c> the</c><00:38:06.369><c> label</c><00:38:06.490><c> to</c><00:38:06.730><c> 1</c><00:38:06.910><c> that</c><00:38:07.030><c> means</c><00:38:07.090><c> we</c><00:38:07.360><c> advance</c>

00:38:07.620 --> 00:38:07.630 align:start position:0%
set the label to 1 that means we advance
 

00:38:07.630 --> 00:38:10.170 align:start position:0%
set the label to 1 that means we advance
to<00:38:07.810><c> the</c><00:38:07.900><c> next</c><00:38:08.170><c> state</c><00:38:08.350><c> and</c><00:38:09.070><c> we</c><00:38:09.550><c> call</c><00:38:09.730><c> our</c><00:38:09.880><c> first</c>

00:38:10.170 --> 00:38:10.180 align:start position:0%
to the next state and we call our first
 

00:38:10.180 --> 00:38:12.120 align:start position:0%
to the next state and we call our first
instance<00:38:10.570><c> of</c><00:38:10.660><c> the</c><00:38:10.780><c> compute</c><00:38:11.170><c> function</c><00:38:11.530><c> when</c>

00:38:12.120 --> 00:38:12.130 align:start position:0%
instance of the compute function when
 

00:38:12.130 --> 00:38:14.280 align:start position:0%
instance of the compute function when
those<00:38:12.280><c> suspend</c><00:38:12.880><c> functions</c><00:38:13.270><c> return</c><00:38:13.600><c> a</c><00:38:13.780><c> magic</c>

00:38:14.280 --> 00:38:14.290 align:start position:0%
those suspend functions return a magic
 

00:38:14.290 --> 00:38:16.530 align:start position:0%
those suspend functions return a magic
value<00:38:14.619><c> called</c><00:38:14.830><c> suspended</c><00:38:15.460><c> we</c><00:38:15.910><c> return</c><00:38:16.360><c> from</c>

00:38:16.530 --> 00:38:16.540 align:start position:0%
value called suspended we return from
 

00:38:16.540 --> 00:38:18.180 align:start position:0%
value called suspended we return from
the<00:38:16.630><c> state</c><00:38:16.930><c> machine</c><00:38:17.350><c> that</c><00:38:17.830><c> means</c><00:38:17.980><c> that</c><00:38:18.100><c> the</c>

00:38:18.180 --> 00:38:18.190 align:start position:0%
the state machine that means that the
 

00:38:18.190 --> 00:38:19.560 align:start position:0%
the state machine that means that the
core<00:38:18.369><c> routine</c><00:38:18.580><c> has</c><00:38:18.790><c> to</c><00:38:18.940><c> be</c><00:38:19.030><c> paused</c><00:38:19.270><c> and</c><00:38:19.450><c> will</c>

00:38:19.560 --> 00:38:19.570 align:start position:0%
core routine has to be paused and will
 

00:38:19.570 --> 00:38:21.330 align:start position:0%
core routine has to be paused and will
have<00:38:19.690><c> to</c><00:38:19.840><c> come</c><00:38:19.990><c> back</c><00:38:20.170><c> later</c><00:38:20.770><c> when</c><00:38:21.040><c> we</c><00:38:21.190><c> cannot</c>

00:38:21.330 --> 00:38:21.340 align:start position:0%
have to come back later when we cannot
 

00:38:21.340 --> 00:38:23.520 align:start position:0%
have to come back later when we cannot
resume<00:38:21.610><c> execution</c><00:38:21.760><c> and</c><00:38:22.690><c> again</c><00:38:22.990><c> if</c><00:38:23.140><c> you</c><00:38:23.290><c> look</c>

00:38:23.520 --> 00:38:23.530 align:start position:0%
resume execution and again if you look
 

00:38:23.530 --> 00:38:25.140 align:start position:0%
resume execution and again if you look
at<00:38:23.680><c> the</c><00:38:23.800><c> other</c><00:38:23.920><c> state</c><00:38:24.220><c> so</c><00:38:24.430><c> when</c><00:38:24.640><c> the</c><00:38:24.760><c> state</c><00:38:25.119><c> is</c>

00:38:25.140 --> 00:38:25.150 align:start position:0%
at the other state so when the state is
 

00:38:25.150 --> 00:38:27.510 align:start position:0%
at the other state so when the state is
1<00:38:25.540><c> we</c><00:38:25.900><c> advance</c><00:38:26.140><c> the</c><00:38:26.290><c> state</c><00:38:26.500><c> to</c><00:38:26.619><c> 2</c><00:38:26.860><c> we</c><00:38:27.340><c> call</c>

00:38:27.510 --> 00:38:27.520 align:start position:0%
1 we advance the state to 2 we call
 

00:38:27.520 --> 00:38:29.040 align:start position:0%
1 we advance the state to 2 we call
compute<00:38:27.850><c> sorry</c><00:38:28.060><c> we</c><00:38:28.180><c> call</c><00:38:28.330><c> computer</c><00:38:28.570><c> set</c><00:38:28.869><c> a</c>

00:38:29.040 --> 00:38:29.050 align:start position:0%
compute sorry we call computer set a
 

00:38:29.050 --> 00:38:30.359 align:start position:0%
compute sorry we call computer set a
second<00:38:29.440><c> time</c><00:38:29.560><c> in</c><00:38:29.650><c> a</c><00:38:29.710><c> return</c><00:38:30.040><c> if</c><00:38:30.220><c> you're</c>

00:38:30.359 --> 00:38:30.369 align:start position:0%
second time in a return if you're
 

00:38:30.369 --> 00:38:32.970 align:start position:0%
second time in a return if you're
suspended<00:38:30.850><c> so</c><00:38:31.420><c> what</c><00:38:31.750><c> I</c><00:38:31.780><c> did</c><00:38:31.869><c> is</c><00:38:32.200><c> I</c><00:38:32.530><c> took</c><00:38:32.590><c> the</c>

00:38:32.970 --> 00:38:32.980 align:start position:0%
suspended so what I did is I took the
 

00:38:32.980 --> 00:38:35.430 align:start position:0%
suspended so what I did is I took the
bytecode<00:38:33.160><c> of</c><00:38:33.460><c> that</c><00:38:33.640><c> and</c><00:38:34.420><c> the</c><00:38:34.810><c> bytecode</c><00:38:34.990><c> starts</c>

00:38:35.430 --> 00:38:35.440 align:start position:0%
bytecode of that and the bytecode starts
 

00:38:35.440 --> 00:38:38.130 align:start position:0%
bytecode of that and the bytecode starts
like<00:38:35.560><c> this</c><00:38:35.590><c> and</c><00:38:35.920><c> I</c><00:38:36.070><c> hacked</c><00:38:36.310><c> it</c><00:38:36.550><c> to</c><00:38:36.760><c> add</c><00:38:37.240><c> this</c>

00:38:38.130 --> 00:38:38.140 align:start position:0%
like this and I hacked it to add this
 

00:38:38.140 --> 00:38:39.480 align:start position:0%
like this and I hacked it to add this
you<00:38:38.530><c> don't</c><00:38:38.740><c> need</c><00:38:38.830><c> to</c><00:38:38.920><c> understand</c><00:38:39.220><c> what</c><00:38:39.369><c> it's</c>

00:38:39.480 --> 00:38:39.490 align:start position:0%
you don't need to understand what it's
 

00:38:39.490 --> 00:38:40.890 align:start position:0%
you don't need to understand what it's
doing<00:38:39.760><c> but</c><00:38:39.790><c> basically</c><00:38:40.270><c> all</c><00:38:40.420><c> I</c><00:38:40.480><c> wanted</c><00:38:40.720><c> to</c><00:38:40.810><c> do</c>

00:38:40.890 --> 00:38:40.900 align:start position:0%
doing but basically all I wanted to do
 

00:38:40.900 --> 00:38:43.290 align:start position:0%
doing but basically all I wanted to do
was<00:38:41.080><c> print</c><00:38:41.470><c> the</c><00:38:41.980><c> current</c><00:38:42.340><c> state</c><00:38:42.550><c> of</c><00:38:42.700><c> the</c><00:38:43.060><c> of</c>

00:38:43.290 --> 00:38:43.300 align:start position:0%
was print the current state of the of
 

00:38:43.300 --> 00:38:45.000 align:start position:0%
was print the current state of the of
the<00:38:43.540><c> coding</c><00:38:43.990><c> of</c><00:38:44.080><c> the</c><00:38:44.200><c> state</c><00:38:44.440><c> machine</c><00:38:44.770><c> and</c>

00:38:45.000 --> 00:38:45.010 align:start position:0%
the coding of the state machine and
 

00:38:45.010 --> 00:38:46.950 align:start position:0%
the coding of the state machine and
rerun<00:38:45.640><c> the</c><00:38:45.670><c> program</c><00:38:45.820><c> to</c><00:38:46.300><c> see</c><00:38:46.480><c> what's</c><00:38:46.630><c> going</c><00:38:46.869><c> on</c>

00:38:46.950 --> 00:38:46.960 align:start position:0%
rerun the program to see what's going on
 

00:38:46.960 --> 00:38:49.530 align:start position:0%
rerun the program to see what's going on
so<00:38:47.500><c> this</c><00:38:47.650><c> was</c><00:38:47.830><c> the</c><00:38:47.980><c> original</c><00:38:48.070><c> output</c><00:38:48.520><c> and</c><00:38:49.060><c> when</c>

00:38:49.530 --> 00:38:49.540 align:start position:0%
so this was the original output and when
 

00:38:49.540 --> 00:38:51.810 align:start position:0%
so this was the original output and when
I<00:38:49.570><c> print</c><00:38:49.930><c> this</c><00:38:50.200><c> label</c><00:38:50.590><c> field</c><00:38:50.890><c> this</c><00:38:51.310><c> is</c><00:38:51.369><c> what</c><00:38:51.670><c> it</c>

00:38:51.810 --> 00:38:51.820 align:start position:0%
I print this label field this is what it
 

00:38:51.820 --> 00:38:52.230 align:start position:0%
I print this label field this is what it
looks<00:38:52.000><c> like</c>

00:38:52.230 --> 00:38:52.240 align:start position:0%
looks like
 

00:38:52.240 --> 00:38:54.540 align:start position:0%
looks like
so<00:38:52.990><c> we</c><00:38:53.109><c> launch</c><00:38:53.290><c> the</c><00:38:53.440><c> Karoo</c><00:38:53.650><c> teen</c><00:38:53.890><c> we</c><00:38:54.220><c> enter</c>

00:38:54.540 --> 00:38:54.550 align:start position:0%
so we launch the Karoo teen we enter
 

00:38:54.550 --> 00:38:56.670 align:start position:0%
so we launch the Karoo teen we enter
that<00:38:54.670><c> state</c><00:38:54.790><c> machine</c><00:38:55.270><c> the</c><00:38:55.720><c> state</c><00:38:55.930><c> is</c><00:38:56.080><c> 0</c><00:38:56.320><c> we</c>

00:38:56.670 --> 00:38:56.680 align:start position:0%
that state machine the state is 0 we
 

00:38:56.680 --> 00:38:58.440 align:start position:0%
that state machine the state is 0 we
call<00:38:56.859><c> compute</c><00:38:57.310><c> our</c><00:38:57.490><c> first</c><00:38:57.730><c> suspend</c><00:38:58.090><c> function</c>

00:38:58.440 --> 00:38:58.450 align:start position:0%
call compute our first suspend function
 

00:38:58.450 --> 00:39:00.780 align:start position:0%
call compute our first suspend function
where<00:38:59.020><c> we</c><00:38:59.050><c> return</c><00:38:59.470><c> because</c><00:39:00.100><c> we're</c><00:39:00.250><c> suspended</c>

00:39:00.780 --> 00:39:00.790 align:start position:0%
where we return because we're suspended
 

00:39:00.790 --> 00:39:03.810 align:start position:0%
where we return because we're suspended
and<00:39:00.940><c> then</c><00:39:01.450><c> at</c><00:39:01.990><c> some</c><00:39:02.230><c> point</c><00:39:02.260><c> later</c><00:39:02.650><c> we</c><00:39:03.220><c> re-enter</c>

00:39:03.810 --> 00:39:03.820 align:start position:0%
and then at some point later we re-enter
 

00:39:03.820 --> 00:39:05.670 align:start position:0%
and then at some point later we re-enter
the<00:39:03.940><c> state</c><00:39:04.150><c> machine</c><00:39:04.540><c> now</c><00:39:04.930><c> the</c><00:39:04.990><c> state</c><00:39:05.290><c> is</c><00:39:05.320><c> 1</c>

00:39:05.670 --> 00:39:05.680 align:start position:0%
the state machine now the state is 1
 

00:39:05.680 --> 00:39:07.980 align:start position:0%
the state machine now the state is 1
when<00:39:06.160><c> we</c><00:39:06.310><c> compute</c><00:39:06.760><c> we</c><00:39:07.000><c> return</c><00:39:07.300><c> again</c><00:39:07.330><c> we</c><00:39:07.810><c> come</c>

00:39:07.980 --> 00:39:07.990 align:start position:0%
when we compute we return again we come
 

00:39:07.990 --> 00:39:09.210 align:start position:0%
when we compute we return again we come
back<00:39:08.140><c> into</c><00:39:08.410><c> the</c><00:39:08.530><c> state</c><00:39:08.710><c> machine</c><00:39:08.980><c> with</c><00:39:09.130><c> the</c>

00:39:09.210 --> 00:39:09.220 align:start position:0%
back into the state machine with the
 

00:39:09.220 --> 00:39:10.740 align:start position:0%
back into the state machine with the
live<00:39:09.369><c> state</c><00:39:09.640><c> and</c><00:39:09.880><c> the</c><00:39:10.000><c> finally</c><00:39:10.300><c> we</c><00:39:10.390><c> exit</c><00:39:10.630><c> the</c>

00:39:10.740 --> 00:39:10.750 align:start position:0%
live state and the finally we exit the
 

00:39:10.750 --> 00:39:12.930 align:start position:0%
live state and the finally we exit the
origin<00:39:11.170><c> so</c><00:39:11.770><c> again</c><00:39:12.040><c> you</c><00:39:12.280><c> shouldn't</c><00:39:12.580><c> worry</c><00:39:12.670><c> not</c>

00:39:12.930 --> 00:39:12.940 align:start position:0%
origin so again you shouldn't worry not
 

00:39:12.940 --> 00:39:14.280 align:start position:0%
origin so again you shouldn't worry not
worry<00:39:13.150><c> about</c><00:39:13.210><c> this</c><00:39:13.480><c> too</c><00:39:13.690><c> much</c><00:39:13.720><c> in</c><00:39:13.990><c> your</c><00:39:14.109><c> code</c>

00:39:14.280 --> 00:39:14.290 align:start position:0%
worry about this too much in your code
 

00:39:14.290 --> 00:39:16.140 align:start position:0%
worry about this too much in your code
use<00:39:14.619><c> co-routines</c><00:39:15.130><c> they</c><00:39:15.340><c> are</c><00:39:15.400><c> amazing</c><00:39:15.790><c> it</c><00:39:15.970><c> was</c>

00:39:16.140 --> 00:39:16.150 align:start position:0%
use co-routines they are amazing it was
 

00:39:16.150 --> 00:39:17.490 align:start position:0%
use co-routines they are amazing it was
very<00:39:16.359><c> interesting</c><00:39:16.570><c> to</c><00:39:16.780><c> go</c><00:39:17.020><c> look</c><00:39:17.170><c> at</c><00:39:17.290><c> the</c><00:39:17.380><c> byte</c>

00:39:17.490 --> 00:39:17.500 align:start position:0%
very interesting to go look at the byte
 

00:39:17.500 --> 00:39:19.170 align:start position:0%
very interesting to go look at the byte
code<00:39:17.530><c> at</c><00:39:18.100><c> the</c><00:39:18.280><c> generate</c><00:39:18.550><c> code</c><00:39:18.609><c> to</c><00:39:18.940><c> better</c>

00:39:19.170 --> 00:39:19.180 align:start position:0%
code at the generate code to better
 

00:39:19.180 --> 00:39:20.940 align:start position:0%
code at the generate code to better
understand<00:39:19.630><c> how</c><00:39:19.869><c> they</c><00:39:20.020><c> work</c><00:39:20.200><c> how</c><00:39:20.440><c> old</c><00:39:20.830><c> that</c>

00:39:20.940 --> 00:39:20.950 align:start position:0%
understand how they work how old that
 

00:39:20.950 --> 00:39:22.980 align:start position:0%
understand how they work how old that
what<00:39:21.460><c> looks</c><00:39:21.580><c> magical</c><00:39:21.940><c> how</c><00:39:22.420><c> it</c><00:39:22.540><c> works</c><00:39:22.750><c> under</c>

00:39:22.980 --> 00:39:22.990 align:start position:0%
what looks magical how it works under
 

00:39:22.990 --> 00:39:26.340 align:start position:0%
what looks magical how it works under
the<00:39:23.020><c> hood</c><00:39:23.670><c> and</c><00:39:24.670><c> with</c><00:39:25.300><c> that</c><00:39:25.510><c> you</c><00:39:26.020><c> have</c><00:39:26.109><c> 30</c>

00:39:26.340 --> 00:39:26.350 align:start position:0%
the hood and with that you have 30
 

00:39:26.350 --> 00:39:28.830 align:start position:0%
the hood and with that you have 30
seconds<00:39:26.740><c> Chet</c><00:39:26.950><c> so</c><00:39:27.160><c> wrap</c><00:39:27.910><c> up</c><00:39:28.119><c> so</c><00:39:28.330><c> the</c><00:39:28.480><c> question</c>

00:39:28.830 --> 00:39:28.840 align:start position:0%
seconds Chet so wrap up so the question
 

00:39:28.840 --> 00:39:31.080 align:start position:0%
seconds Chet so wrap up so the question
is<00:39:28.990><c> should</c><00:39:29.260><c> you</c><00:39:29.710><c> actually</c><00:39:30.130><c> care</c><00:39:30.700><c> about</c><00:39:30.730><c> this</c>

00:39:31.080 --> 00:39:31.090 align:start position:0%
is should you actually care about this
 

00:39:31.090 --> 00:39:32.940 align:start position:0%
is should you actually care about this
stuff<00:39:31.270><c> we've</c><00:39:31.510><c> given</c><00:39:31.930><c> a</c><00:39:32.200><c> couple</c><00:39:32.500><c> of</c><00:39:32.590><c> talks</c><00:39:32.800><c> in</c>

00:39:32.940 --> 00:39:32.950 align:start position:0%
stuff we've given a couple of talks in
 

00:39:32.950 --> 00:39:34.080 align:start position:0%
stuff we've given a couple of talks in
the<00:39:33.010><c> last</c><00:39:33.160><c> couple</c><00:39:33.400><c> of</c><00:39:33.430><c> years</c><00:39:33.490><c> and</c><00:39:33.820><c> said</c><00:39:33.970><c> you</c>

00:39:34.080 --> 00:39:34.090 align:start position:0%
the last couple of years and said you
 

00:39:34.090 --> 00:39:35.400 align:start position:0%
the last couple of years and said you
know<00:39:34.180><c> what</c><00:39:34.330><c> the</c><00:39:34.450><c> run</c><00:39:34.600><c> time</c><00:39:34.780><c> has</c><00:39:34.930><c> gotten</c><00:39:35.230><c> so</c>

00:39:35.400 --> 00:39:35.410 align:start position:0%
know what the run time has gotten so
 

00:39:35.410 --> 00:39:37.530 align:start position:0%
know what the run time has gotten so
much<00:39:35.530><c> better</c><00:39:35.740><c> stop</c><00:39:36.520><c> worrying</c><00:39:36.970><c> about</c><00:39:37.060><c> all</c><00:39:37.390><c> the</c>

00:39:37.530 --> 00:39:37.540 align:start position:0%
much better stop worrying about all the
 

00:39:37.540 --> 00:39:40.050 align:start position:0%
much better stop worrying about all the
allocation<00:39:38.170><c> and</c><00:39:38.320><c> de-allocation</c><00:39:38.650><c> stuff</c><00:39:39.520><c> we</c>

00:39:40.050 --> 00:39:40.060 align:start position:0%
allocation and de-allocation stuff we
 

00:39:40.060 --> 00:39:42.120 align:start position:0%
allocation and de-allocation stuff we
told<00:39:40.300><c> you</c><00:39:40.420><c> early</c><00:39:41.050><c> days</c><00:39:41.230><c> of</c><00:39:41.410><c> Android</c><00:39:41.859><c> avoid</c>

00:39:42.120 --> 00:39:42.130 align:start position:0%
told you early days of Android avoid
 

00:39:42.130 --> 00:39:44.670 align:start position:0%
told you early days of Android avoid
allocations<00:39:42.850><c> now</c><00:39:43.119><c> do</c><00:39:44.020><c> the</c><00:39:44.140><c> right</c><00:39:44.290><c> thing</c><00:39:44.500><c> for</c>

00:39:44.670 --> 00:39:44.680 align:start position:0%
allocations now do the right thing for
 

00:39:44.680 --> 00:39:46.800 align:start position:0%
allocations now do the right thing for
your<00:39:44.800><c> code</c><00:39:45.040><c> in</c><00:39:45.220><c> your</c><00:39:45.250><c> API</c><00:39:45.609><c> so</c><00:39:46.300><c> the</c><00:39:46.390><c> question</c><00:39:46.690><c> is</c>

00:39:46.800 --> 00:39:46.810 align:start position:0%
your code in your API so the question is
 

00:39:46.810 --> 00:39:48.870 align:start position:0%
your code in your API so the question is
did<00:39:47.020><c> we</c><00:39:47.050><c> lie</c><00:39:47.380><c> to</c><00:39:47.440><c> you</c><00:39:47.650><c> and</c><00:39:47.830><c> the</c><00:39:48.280><c> answer</c><00:39:48.580><c> is</c><00:39:48.730><c> no</c>

00:39:48.870 --> 00:39:48.880 align:start position:0%
did we lie to you and the answer is no
 

00:39:48.880 --> 00:39:50.550 align:start position:0%
did we lie to you and the answer is no
actually<00:39:49.210><c> we</c><00:39:49.750><c> were</c><00:39:49.780><c> telling</c><00:39:50.200><c> the</c><00:39:50.290><c> truth</c><00:39:50.320><c> that</c>

00:39:50.550 --> 00:39:50.560 align:start position:0%
actually we were telling the truth that
 

00:39:50.560 --> 00:39:54.630 align:start position:0%
actually we were telling the truth that
is<00:39:50.890><c> still</c><00:39:51.100><c> good</c><00:39:51.280><c> advice</c><00:39:51.550><c> however</c><00:39:52.020><c> oh</c><00:39:53.430><c> yeah</c><00:39:54.430><c> and</c>

00:39:54.630 --> 00:39:54.640 align:start position:0%
is still good advice however oh yeah and
 

00:39:54.640 --> 00:39:56.359 align:start position:0%
is still good advice however oh yeah and
there's<00:39:54.850><c> the</c><00:39:55.000><c> advice</c><00:39:55.210><c> yep</c><00:39:55.540><c> yep</c><00:39:55.840><c> alakay</c>

00:39:56.359 --> 00:39:56.369 align:start position:0%
there's the advice yep yep alakay
 

00:39:56.369 --> 00:39:58.220 align:start position:0%
there's the advice yep yep alakay
and<00:39:56.490><c> Collections</c><00:39:56.880><c> always</c><00:39:57.150><c> fine</c><00:39:57.329><c> but</c><00:39:57.599><c> it's</c>

00:39:58.220 --> 00:39:58.230 align:start position:0%
and Collections always fine but it's
 

00:39:58.230 --> 00:39:59.870 align:start position:0%
and Collections always fine but it's
good<00:39:58.470><c> to</c><00:39:58.619><c> actually</c><00:39:58.740><c> understand</c><00:39:59.490><c> what's</c><00:39:59.670><c> going</c>

00:39:59.870 --> 00:39:59.880 align:start position:0%
good to actually understand what's going
 

00:39:59.880 --> 00:40:01.370 align:start position:0%
good to actually understand what's going
on<00:39:59.999><c> in</c><00:40:00.150><c> the</c><00:40:00.240><c> hood</c><00:40:00.359><c> if</c><00:40:00.569><c> you</c><00:40:00.720><c> are</c><00:40:00.900><c> trying</c><00:40:01.140><c> to</c><00:40:01.230><c> be</c>

00:40:01.370 --> 00:40:01.380 align:start position:0%
on in the hood if you are trying to be
 

00:40:01.380 --> 00:40:03.559 align:start position:0%
on in the hood if you are trying to be
lazy<00:40:01.650><c> about</c><00:40:01.799><c> allocating</c><00:40:02.640><c> even</c><00:40:03.119><c> a</c><00:40:03.210><c> rect</c><00:40:03.420><c> object</c>

00:40:03.559 --> 00:40:03.569 align:start position:0%
lazy about allocating even a rect object
 

00:40:03.569 --> 00:40:06.410 align:start position:0%
lazy about allocating even a rect object
that's<00:40:04.440><c> not</c><00:40:04.769><c> the</c><00:40:05.069><c> right</c><00:40:05.190><c> approach</c><00:40:05.249><c> right</c><00:40:05.970><c> it</c>

00:40:06.410 --> 00:40:06.420 align:start position:0%
that's not the right approach right it
 

00:40:06.420 --> 00:40:08.569 align:start position:0%
that's not the right approach right it
probably<00:40:06.450><c> doesn't</c><00:40:07.259><c> matter</c><00:40:07.559><c> but</c><00:40:08.069><c> isn't</c><00:40:08.490><c> it</c>

00:40:08.569 --> 00:40:08.579 align:start position:0%
probably doesn't matter but isn't it
 

00:40:08.579 --> 00:40:09.980 align:start position:0%
probably doesn't matter but isn't it
nice<00:40:08.730><c> to</c><00:40:08.910><c> actually</c><00:40:09.029><c> know</c><00:40:09.390><c> what's</c><00:40:09.569><c> going</c><00:40:09.839><c> on</c>

00:40:09.980 --> 00:40:09.990 align:start position:0%
nice to actually know what's going on
 

00:40:09.990 --> 00:40:13.309 align:start position:0%
nice to actually know what's going on
and<00:40:10.950><c> especially</c><00:40:11.640><c> if</c><00:40:12.089><c> you're</c><00:40:12.809><c> in</c><00:40:13.049><c> an</c><00:40:13.170><c> inner</c>

00:40:13.309 --> 00:40:13.319 align:start position:0%
and especially if you're in an inner
 

00:40:13.319 --> 00:40:15.140 align:start position:0%
and especially if you're in an inner
loop<00:40:13.589><c> somewhere</c><00:40:14.069><c> maybe</c><00:40:14.339><c> you</c><00:40:14.549><c> actually</c><00:40:14.730><c> don't</c>

00:40:15.140 --> 00:40:15.150 align:start position:0%
loop somewhere maybe you actually don't
 

00:40:15.150 --> 00:40:16.400 align:start position:0%
loop somewhere maybe you actually don't
want<00:40:15.329><c> that</c><00:40:15.480><c> overhead</c><00:40:15.839><c> maybe</c><00:40:16.079><c> it</c><00:40:16.230><c> doesn't</c>

00:40:16.400 --> 00:40:16.410 align:start position:0%
want that overhead maybe it doesn't
 

00:40:16.410 --> 00:40:18.349 align:start position:0%
want that overhead maybe it doesn't
matter<00:40:16.680><c> on</c><00:40:16.950><c> the</c><00:40:16.980><c> other</c><00:40:17.130><c> hand</c><00:40:17.400><c> if</c><00:40:17.759><c> you</c><00:40:17.970><c> can</c><00:40:18.119><c> save</c>

00:40:18.349 --> 00:40:18.359 align:start position:0%
matter on the other hand if you can save
 

00:40:18.359 --> 00:40:19.880 align:start position:0%
matter on the other hand if you can save
it<00:40:18.509><c> in</c><00:40:18.690><c> a</c><00:40:18.779><c> case</c><00:40:18.960><c> where</c><00:40:19.200><c> it</c><00:40:19.230><c> actually</c><00:40:19.410><c> matters</c>

00:40:19.880 --> 00:40:19.890 align:start position:0%
it in a case where it actually matters
 

00:40:19.890 --> 00:40:22.099 align:start position:0%
it in a case where it actually matters
in<00:40:19.920><c> an</c><00:40:20.190><c> inner</c><00:40:20.369><c> loop</c><00:40:20.519><c> that's</c><00:40:21.299><c> probably</c><00:40:21.809><c> a</c><00:40:21.900><c> good</c>

00:40:22.099 --> 00:40:22.109 align:start position:0%
in an inner loop that's probably a good
 

00:40:22.109 --> 00:40:25.610 align:start position:0%
in an inner loop that's probably a good
thing<00:40:22.319><c> and</c><00:40:22.650><c> that</c><00:40:23.640><c> is</c><00:40:24.029><c> it</c><00:40:24.269><c> thank</c><00:40:24.690><c> you</c>

00:40:25.610 --> 00:40:25.620 align:start position:0%
thing and that is it thank you
 

00:40:25.620 --> 00:40:43.269 align:start position:0%
thing and that is it thank you
[Music]

00:40:43.269 --> 00:40:43.279 align:start position:0%
[Music]
 

00:40:43.279 --> 00:40:43.980 align:start position:0%
[Music]
you

00:40:43.980 --> 00:40:43.990 align:start position:0%
you
 

00:40:43.990 --> 00:40:47.000 align:start position:0%
you
[Music]

