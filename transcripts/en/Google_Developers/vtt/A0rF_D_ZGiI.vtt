WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:02.146
ALEXIS MOUSSINE-POUCHKINE:
Hi, everyone.

00:00:02.146 --> 00:00:05.130
We're here at Devoxx in
Antwerp, Belgium 2014,

00:00:05.130 --> 00:00:06.960
and I'm here with
the Guava team.

00:00:06.960 --> 00:00:08.419
Can I call you guys
the Guava team?

00:00:08.419 --> 00:00:10.001
GREGORY KICK: Certainly
members of it.

00:00:10.001 --> 00:00:12.320
There are seven of us in
total, but just the two today.

00:00:12.320 --> 00:00:13.903
ALEXIS MOUSSINE-POUCHKINE:
Just seven.

00:00:13.903 --> 00:00:14.910
Not one more.

00:00:14.910 --> 00:00:17.530
So do you guys want to
introduce yourselves

00:00:17.530 --> 00:00:19.417
and say what you
focus on in Guava?

00:00:19.417 --> 00:00:20.500
And there's more to Guava.

00:00:20.500 --> 00:00:23.950
I introduced you as Guava, but
you're the Java Google team.

00:00:23.950 --> 00:00:25.660
You do a number of projects.

00:00:25.660 --> 00:00:27.386
Define what you do, really.

00:00:27.386 --> 00:00:28.391
KURT KLUEVER: Sure.

00:00:28.391 --> 00:00:30.890
GREGORY KICK: We are officially
Google's Java Core Libraries

00:00:30.890 --> 00:00:33.425
Team, but even that's
becoming a little less

00:00:33.425 --> 00:00:34.550
than what we do these days.

00:00:34.550 --> 00:00:38.060
We work on tools and
all sorts of things.

00:00:38.060 --> 00:00:39.570
I'm Greg Kick.

00:00:39.570 --> 00:00:41.500
Been a member of the
Java Core Libraries Team

00:00:41.500 --> 00:00:45.450
for two or three years
now and a Googler for six,

00:00:45.450 --> 00:00:48.510
and been contributing
to Guava since even

00:00:48.510 --> 00:00:50.624
before I worked there.

00:00:50.624 --> 00:00:51.915
KURT KLUEVER: I'm Kurt Kluever.

00:00:51.915 --> 00:00:55.920
I'm the sole member
New York, and I've

00:00:55.920 --> 00:00:58.770
been on the team for about the
same time as Greg, two or three

00:00:58.770 --> 00:01:01.340
years, and at Google
also for six years.

00:01:01.340 --> 00:01:03.090
ALEXIS MOUSSINE-POUCHKINE:
A lot of people

00:01:03.090 --> 00:01:08.590
use Guava because it seems
to fit a need that innovates

00:01:08.590 --> 00:01:10.710
and creates things
that people could not

00:01:10.710 --> 00:01:12.280
find in the default
class libraries.

00:01:12.280 --> 00:01:15.330
Eventually, Java evolves.

00:01:15.330 --> 00:01:18.500
Tell me more about why
people use Guava today,

00:01:18.500 --> 00:01:22.140
and maybe with Java 8
being out, lambda streams,

00:01:22.140 --> 00:01:24.675
how things might be changing.

00:01:24.675 --> 00:01:27.050
KURT KLUEVER: Guava is going
to pretty drastically change

00:01:27.050 --> 00:01:29.350
when we eventually
switch to Java 8.

00:01:29.350 --> 00:01:32.010
A lot of stuff has been
obsoleted and a lot of stuff

00:01:32.010 --> 00:01:33.420
needs to change.

00:01:33.420 --> 00:01:36.670
Actually, we haven't even
made the jump to Java 8

00:01:36.670 --> 00:01:39.950
yet at Google, so
we've got a lot

00:01:39.950 --> 00:01:42.570
to work on to restructure
all the libraries

00:01:42.570 --> 00:01:46.180
and get rid of stuff that's
been obsoleted and whatnot.

00:01:46.180 --> 00:01:48.910
There's going to be a
lot of change coming.

00:01:48.910 --> 00:01:50.820
GREGORY KICK: There's
two sides to that coin.

00:01:50.820 --> 00:01:53.970
For Android specifically and
supporting legacy platforms,

00:01:53.970 --> 00:01:59.187
we are going to be in a pre-Java
8 world for a very long time.

00:01:59.187 --> 00:02:01.770
ALEXIS MOUSSINE-POUCHKINE: You
still have a Java 6 requirement

00:02:01.770 --> 00:02:03.910
today and you'll keep
that for a long while.

00:02:03.910 --> 00:02:04.310
GREGORY KICK: Right.

00:02:04.310 --> 00:02:06.559
We're not going to drop our
Android users on the floor

00:02:06.559 --> 00:02:08.622
anytime soon.

00:02:08.622 --> 00:02:12.300
We plan to support them
for as long as practical.

00:02:12.300 --> 00:02:16.197
But on the other side of
that, looking towards Java 8,

00:02:16.197 --> 00:02:18.280
the library as it stands,
a lot of the things that

00:02:18.280 --> 00:02:20.800
are included-- the
function interface,

00:02:20.800 --> 00:02:23.300
the predicate interface--
those are all single method

00:02:23.300 --> 00:02:25.890
interfaces that are perfectly
compatible with lambdas

00:02:25.890 --> 00:02:28.640
and those types of things,
and that's no accident.

00:02:28.640 --> 00:02:30.900
Java 8 was designed with
some of those legacy

00:02:30.900 --> 00:02:32.150
compatibilities in mind.

00:02:32.150 --> 00:02:34.640
A lot of the things will just
work straight out of the box,

00:02:34.640 --> 00:02:37.100
but we have another
teammate, Louis Wasserman,

00:02:37.100 --> 00:02:41.160
who's been doing nothing
but working on figuring out

00:02:41.160 --> 00:02:44.720
how to make streams fit
into Guava and lambdas fit

00:02:44.720 --> 00:02:47.350
into Guava and make sure that
all of the collections that we

00:02:47.350 --> 00:02:49.940
provide are compatible.

00:02:49.940 --> 00:02:52.409
I believe that those are
available in the open source?

00:02:52.409 --> 00:02:53.200
KURT KLUEVER: Yeah.

00:02:53.200 --> 00:02:55.380
I think he has a project
on Git Hub already

00:02:55.380 --> 00:02:57.080
that has Guava
building with Java 8

00:02:57.080 --> 00:02:59.347
and actually has a lot of
inter-op working already.

00:02:59.347 --> 00:03:00.180
GREGORY KICK: Right.

00:03:00.180 --> 00:03:03.160
So I'm sure that some
combination of "Louis Wasserman

00:03:03.160 --> 00:03:05.380
GitHub Guava,"
that Google search

00:03:05.380 --> 00:03:08.080
will get you to some new
content if you're interested.

00:03:08.080 --> 00:03:12.479
ALEXIS MOUSSINE-POUCHKINE: Just
use your favorite search tool.

00:03:12.479 --> 00:03:14.270
I read somewhere that
you guys are actually

00:03:14.270 --> 00:03:16.680
removing deprecated
methods, which

00:03:16.680 --> 00:03:18.910
seems very awkward and
different for people that

00:03:18.910 --> 00:03:20.630
are used to the
classic Java libraries.

00:03:20.630 --> 00:03:23.539
Tell me more about how it's
working for you and your users.

00:03:23.539 --> 00:03:24.330
KURT KLUEVER: Sure.

00:03:24.330 --> 00:03:25.746
At least internally,
we are pretty

00:03:25.746 --> 00:03:29.537
aggressive about removing
bad APIs or legacy APIs.

00:03:29.537 --> 00:03:31.370
And actually, with a
lot of the stuff that's

00:03:31.370 --> 00:03:34.465
going into Java these days with
Java 7 and Java 8 especially,

00:03:34.465 --> 00:03:36.340
there's a lot of stuff
that's been obsoleted.

00:03:36.340 --> 00:03:38.900
So we do pretty
aggressively remove stuff.

00:03:38.900 --> 00:03:42.470
At least our policy in
the open source Guava

00:03:42.470 --> 00:03:45.090
is if it's a non-beta
API, we give it

00:03:45.090 --> 00:03:48.440
18 months to just leave
it in the deprecated state

00:03:48.440 --> 00:03:51.030
to get users to
switch off of it.

00:03:51.030 --> 00:03:55.530
If it's a beta API,
the beta annotation

00:03:55.530 --> 00:03:57.040
really just means non-frozen.

00:03:57.040 --> 00:04:00.360
So if it's a non-frozen API,
we typically say one release,

00:04:00.360 --> 00:04:02.510
but it typically ends up
being two or three that

00:04:02.510 --> 00:04:04.630
will give you time
to move off of it.

00:04:04.630 --> 00:04:04.960
ALEXIS MOUSSINE-POUCHKINE:
And have you

00:04:04.960 --> 00:04:06.660
had people complain about it?

00:04:06.660 --> 00:04:10.284
How does it work for
your users, really?

00:04:10.284 --> 00:04:11.950
GREGORY KICK: This
isn't, oh, we decided

00:04:11.950 --> 00:04:12.991
we don't like this thing.

00:04:12.991 --> 00:04:15.000
We're deleting it.

00:04:15.000 --> 00:04:16.860
The best example
that I can think of

00:04:16.860 --> 00:04:20.010
is we used to have for a long
time a class called char sets.

00:04:20.010 --> 00:04:22.860
People work with char sets
to read files into text

00:04:22.860 --> 00:04:25.280
all the time, and we made
it convenient to have

00:04:25.280 --> 00:04:27.830
constants for things like UTF 8.

00:04:27.830 --> 00:04:30.490
Java 7, I believe, introduce
standard char sets,

00:04:30.490 --> 00:04:33.740
and now the exact same
equivalent functionality

00:04:33.740 --> 00:04:36.590
was in the JDK, so it
didn't make sense for us

00:04:36.590 --> 00:04:40.290
to keep our entirely
functionally equivalent version

00:04:40.290 --> 00:04:43.700
around in Guava if the JDK is
already providing it for you.

00:04:43.700 --> 00:04:47.080
So that was a case where it
was clear to start the removal

00:04:47.080 --> 00:04:50.700
process just to give people
one option rather than two.

00:04:50.700 --> 00:04:54.382
Decisions like that are
usually pretty uncontroversial.

00:04:54.382 --> 00:04:56.590
KURT KLUEVER: Actually, one
of the more controversial

00:04:56.590 --> 00:04:59.530
decisions we've had is
all the static factory

00:04:59.530 --> 00:05:00.830
methods for collections.

00:05:00.830 --> 00:05:02.910
We have list.newArrayList,
which people

00:05:02.910 --> 00:05:07.260
love to use to thwart the
necessity for generics

00:05:07.260 --> 00:05:10.060
on the right hand side
of the assignment.

00:05:10.060 --> 00:05:13.810
Of course, that's been
obsoleted with the dot operator,

00:05:13.810 --> 00:05:16.170
so we've had this
really tough decision

00:05:16.170 --> 00:05:19.390
to make internally whether we
just leave those methods there

00:05:19.390 --> 00:05:21.590
and let people
continue to use those

00:05:21.590 --> 00:05:23.550
or if we just force
them to use the diamond

00:05:23.550 --> 00:05:25.850
operator with the collections.

00:05:25.850 --> 00:05:27.474
I think that's still in flux.

00:05:27.474 --> 00:05:29.390
I don't know what the
final decision there is.

00:05:29.390 --> 00:05:31.181
ALEXIS MOUSSINE-POUCHKINE:
Cast your votes.

00:05:31.181 --> 00:05:33.990
GREGORY KICK: But we always
try to listen to user feedback,

00:05:33.990 --> 00:05:35.640
whether it's internally
or externally,

00:05:35.640 --> 00:05:38.160
and make the decisions
that make people happiest.

00:05:40.502 --> 00:05:42.960
ALEXIS MOUSSINE-POUCHKINE:
Let's switch gears a little bit.

00:05:42.960 --> 00:05:45.452
So Guava is lots
of different things

00:05:45.452 --> 00:05:46.660
for lots of different people.

00:05:46.660 --> 00:05:50.930
Let's not get into how we
modularize Guava discussion.

00:05:50.930 --> 00:05:56.000
There's plenty of things you
can read online about it.

00:05:56.000 --> 00:05:57.010
Dagger.

00:05:57.010 --> 00:06:01.720
So Dagger and dependency
injection, not something new.

00:06:01.720 --> 00:06:03.790
The concept has been
around for a long time,

00:06:03.790 --> 00:06:09.190
whether it's Pico,
Spring, and Dagger now,

00:06:09.190 --> 00:06:11.260
Dagger 2, even, I hear.

00:06:11.260 --> 00:06:14.294
Tell me how we got
to this and why

00:06:14.294 --> 00:06:15.710
did we have all
these generations,

00:06:15.710 --> 00:06:17.750
and what is the problem
you're trying to solve?

00:06:17.750 --> 00:06:19.125
GREGORY KICK:
First of all, kudos

00:06:19.125 --> 00:06:20.469
for remembering PicoContainer.

00:06:20.469 --> 00:06:22.010
ALEXIS MOUSSINE-POUCHKINE:
I'm sorry.

00:06:22.010 --> 00:06:24.990
GREGORY KICK: Not too
many people do these days.

00:06:24.990 --> 00:06:27.150
I just recently
gave a presentation.

00:06:27.150 --> 00:06:31.764
There's a good history
on how we arrived.

00:06:31.764 --> 00:06:33.430
Dependency injection
is great, and we've

00:06:33.430 --> 00:06:35.480
used it to great effect.

00:06:35.480 --> 00:06:39.230
Juice is probably one of the
most widely used frameworks

00:06:39.230 --> 00:06:42.340
within Google, has
tons of adoption

00:06:42.340 --> 00:06:45.910
and lets us make very large
apps very effectively.

00:06:45.910 --> 00:06:47.790
But the chief
complaint has always

00:06:47.790 --> 00:06:50.780
been that because you
do all the configuration

00:06:50.780 --> 00:06:53.250
of your dependency
injection at runtime,

00:06:53.250 --> 00:06:57.480
it can be a bit of a mystery
how your application lays out.

00:06:57.480 --> 00:07:00.920
When you build up very,
very large applications,

00:07:00.920 --> 00:07:04.090
like Google Docs and
things like that,

00:07:04.090 --> 00:07:05.920
debugging can be
a bit of a trick.

00:07:05.920 --> 00:07:07.420
When you see an
issue in production

00:07:07.420 --> 00:07:09.586
and you don't really know
why things were configured

00:07:09.586 --> 00:07:13.300
the way that they are, reasoning
about why that may or may not

00:07:13.300 --> 00:07:14.790
be from your code
can be difficult

00:07:14.790 --> 00:07:17.350
if all your configuration
happens at runtime.

00:07:17.350 --> 00:07:20.820
So Dagger 1 was a step in
the right direction where

00:07:20.820 --> 00:07:26.060
it used code generation rather
than reflection to statically

00:07:26.060 --> 00:07:29.060
configure some of these
different dependency injection

00:07:29.060 --> 00:07:33.140
options, and you could start
to inspect more and more, just

00:07:33.140 --> 00:07:37.060
in your code base at compile
time, rather than at runtime.

00:07:37.060 --> 00:07:39.470
Dagger 2 is the next evolution.

00:07:39.470 --> 00:07:41.500
Dagger 1 was originally
developed by Square

00:07:41.500 --> 00:07:43.240
with contributions from Google.

00:07:43.240 --> 00:07:45.690
Now Dagger 2 is mostly
developed at Google

00:07:45.690 --> 00:07:50.290
with contributions from Square,
and it is a fully compile time

00:07:50.290 --> 00:07:51.470
solution.

00:07:51.470 --> 00:07:54.150
Everything about your
dependency injection graph

00:07:54.150 --> 00:07:56.290
is all written down statically.

00:07:56.290 --> 00:07:58.840
From the very high
level entry point

00:07:58.840 --> 00:08:01.900
to your application, all the way
through the graph to the very

00:08:01.900 --> 00:08:04.190
lowest level node,
you can navigate

00:08:04.190 --> 00:08:07.070
using things like find
usages and open declaration

00:08:07.070 --> 00:08:08.530
in Eclipse.

00:08:08.530 --> 00:08:10.880
So for the first
time ever, we've

00:08:10.880 --> 00:08:12.810
gotten rid of all
the dynamism that

00:08:12.810 --> 00:08:15.290
was causing a lot of
issues, and we now

00:08:15.290 --> 00:08:17.610
have an entire
application laid out

00:08:17.610 --> 00:08:19.580
at compile time
that survives things

00:08:19.580 --> 00:08:25.080
like ProGuard in your mobile
environments and obfuscation

00:08:25.080 --> 00:08:28.440
because you have the entire
application written down

00:08:28.440 --> 00:08:29.732
as just pure, simple Java code.

00:08:29.732 --> 00:08:31.648
ALEXIS MOUSSINE-POUCHKINE:
So from a developer

00:08:31.648 --> 00:08:33.770
perspective, does
that change anything?

00:08:33.770 --> 00:08:36.845
You have injection points.

00:08:36.845 --> 00:08:38.970
Do you have additional
features, or do you actually

00:08:38.970 --> 00:08:41.880
have less features, maybe?

00:08:41.880 --> 00:08:43.230
Maybe compare that with Juice.

00:08:43.230 --> 00:08:45.188
GREGORY KICK: Absolutely,
there is a trade off.

00:08:45.188 --> 00:08:47.440
We don't have a lot
of features that

00:08:47.440 --> 00:08:50.310
were solely reflection based.

00:08:50.310 --> 00:08:52.500
We're viewing that is a
good thing because there's

00:08:52.500 --> 00:08:56.350
a lot fewer places where you
might get a little confused,

00:08:56.350 --> 00:08:59.161
but some people that
used heavy use of AOP,

00:08:59.161 --> 00:09:01.660
the aspect-oriented programming,
where you could dynamically

00:09:01.660 --> 00:09:05.240
change behavior at runtime,
there's no support for that.

00:09:05.240 --> 00:09:08.440
Anything where you were changing
the shape of your dependencies

00:09:08.440 --> 00:09:13.060
based on a runtime flag,
there's no support for that.

00:09:13.060 --> 00:09:15.680
We've got a lot of
work alike solutions

00:09:15.680 --> 00:09:20.140
for many of the patterns that
people found that they needed,

00:09:20.140 --> 00:09:25.880
and we've been able to run
large search applications.

00:09:25.880 --> 00:09:27.760
Large portions of
the search stack

00:09:27.760 --> 00:09:30.460
have been fully
implemented using Dagger 2,

00:09:30.460 --> 00:09:32.840
so we're confident
that there are

00:09:32.840 --> 00:09:34.240
solutions to all
of the problems.

00:09:34.240 --> 00:09:36.380
They might just not
look exactly the same

00:09:36.380 --> 00:09:38.120
as they did with Juice.

00:09:38.120 --> 00:09:40.078
ALEXIS MOUSSINE-POUCHKINE:
You mentioned Square

00:09:40.078 --> 00:09:42.650
as the initial
writers and developers

00:09:42.650 --> 00:09:45.060
of the first version of Dagger.

00:09:45.060 --> 00:09:48.740
Is this whole thing really
mobile driven and mobile only

00:09:48.740 --> 00:09:51.080
as a solution, or
could you see Dagger 2

00:09:51.080 --> 00:09:54.180
specifically elsewhere,
and maybe supporting

00:09:54.180 --> 00:09:55.410
things like servlets?

00:09:55.410 --> 00:09:56.584
Does it make any sense.

00:09:56.584 --> 00:09:57.625
GREGORY KICK: Absolutely.

00:09:57.625 --> 00:09:58.540
ALEXIS MOUSSINE POUCHKINE:
I mean, fast startup

00:09:58.540 --> 00:10:00.050
is one of the
things you also get.

00:10:00.050 --> 00:10:02.460
Because of that, you're
not doing all that class

00:10:02.460 --> 00:10:06.540
scanning and generating code
at startup or at runtime,

00:10:06.540 --> 00:10:09.520
so I'm sure that works
well in the cloud, too.

00:10:09.520 --> 00:10:11.050
Everybody likes fast startups.

00:10:11.050 --> 00:10:12.758
GREGORY KICK: Yeah,
nobody ever complains

00:10:12.758 --> 00:10:14.670
about good performance.

00:10:14.670 --> 00:10:17.700
While we have,
certainly within Google,

00:10:17.700 --> 00:10:21.900
a lot of mobile applications
running Dagger, like I said,

00:10:21.900 --> 00:10:24.640
Dagger 2 specifically powers
a pretty large portion

00:10:24.640 --> 00:10:27.380
of the search stack.

00:10:27.380 --> 00:10:30.750
When we transitioned from
Dagger 1 to Dagger 2,

00:10:30.750 --> 00:10:35.710
we actually saw a 13%
improvement on per request CPU.

00:10:35.710 --> 00:10:37.440
Fast search results
is what we do,

00:10:37.440 --> 00:10:39.720
and Dagger 2 is now
part of that solution,

00:10:39.720 --> 00:10:41.290
and that's been
pretty rewarding.

00:10:41.290 --> 00:10:42.640
ALEXIS MOUSSINE POUCHKINE:
Where's Dagger 2 now?

00:10:42.640 --> 00:10:44.120
Can you give us a status?

00:10:44.120 --> 00:10:46.864
GREGORY KICK: Dagger
2 is still building

00:10:46.864 --> 00:10:48.030
from head for the most part.

00:10:48.030 --> 00:10:51.230
We haven't had quite
the 2.0 release yet.

00:10:51.230 --> 00:10:57.230
We expect to have a feature
complete, bug more or less free

00:10:57.230 --> 00:11:00.330
beta version coming soon,
but right now, you just

00:11:00.330 --> 00:11:03.570
have to pull it down from
GitHub and built from head.

00:11:03.570 --> 00:11:05.720
ALEXIS MOUSSINE
POUCHKINE: Sounds good.

00:11:05.720 --> 00:11:09.590
Switching gears once again, how
about we talk about something

00:11:09.590 --> 00:11:10.520
called Truth?

00:11:10.520 --> 00:11:13.150
I've heard about
it, but really, you

00:11:13.150 --> 00:11:15.010
need to tell me and
probably everybody

00:11:15.010 --> 00:11:16.169
else what this is about.

00:11:16.169 --> 00:11:16.960
KURT KLUEVER: Sure.

00:11:16.960 --> 00:11:22.230
So it's a fluent assertion
library based on JUnit

00:11:22.230 --> 00:11:24.690
that we've been using for
a couple years now inside

00:11:24.690 --> 00:11:26.790
of Google.

00:11:26.790 --> 00:11:30.520
We've been focusing on it
for about six months now,

00:11:30.520 --> 00:11:34.960
and we've really been driving
the adoption and change

00:11:34.960 --> 00:11:38.520
in the API from a bunch of
legacy assertion libraries

00:11:38.520 --> 00:11:39.920
that we had inside of Google.

00:11:39.920 --> 00:11:45.610
So we had this one, maybe
200 different static assert

00:11:45.610 --> 00:11:48.610
methods, assert blasts or all
these different assert methods.

00:11:48.610 --> 00:11:51.490
It was just a big grab
bag of assertion methods

00:11:51.490 --> 00:11:55.180
that users just
couldn't navigate

00:11:55.180 --> 00:11:57.400
because it was just way
too big and complex.

00:11:57.400 --> 00:11:59.860
So we have evolved
the Truth library

00:11:59.860 --> 00:12:02.560
to fit the needs
for these users.

00:12:02.560 --> 00:12:05.210
We've been, like I said,
focusing on it for probably

00:12:05.210 --> 00:12:08.360
about six months now, and
driving the adoption of Truth

00:12:08.360 --> 00:12:10.690
by migrating those
legacy users to this API.

00:12:10.690 --> 00:12:11.940
ALEXIS MOUSSINE-POUCHKINE: OK.

00:12:11.940 --> 00:12:14.380
So that's yet another project
that you're working on.

00:12:14.380 --> 00:12:15.702
Where is that at today?

00:12:15.702 --> 00:12:17.410
KURT KLUEVER: That's
open source is well.

00:12:17.410 --> 00:12:20.680
We haven't really even
set goals for when

00:12:20.680 --> 00:12:23.060
we're going to do a 1.0
release or anything like that,

00:12:23.060 --> 00:12:26.670
but we've been doing snapshot
releases and stuff like that.

00:12:26.670 --> 00:12:28.580
It's all being synced
up to GitHub as well.

00:12:28.580 --> 00:12:30.704
ALEXIS MOUSSINE-POUCHKINE:
Any external committers,

00:12:30.704 --> 00:12:32.155
external interest?

00:12:32.155 --> 00:12:34.280
KURT KLUEVER: There's
certainly interest out there.

00:12:34.280 --> 00:12:35.190
I don't know that
we've had a whole lot

00:12:35.190 --> 00:12:37.010
of external committers, but--

00:12:37.010 --> 00:12:38.930
ALEXIS MOUSSINE-POUCHKINE:
Any call to action?

00:12:38.930 --> 00:12:40.732
What should people
expect and look at?

00:12:40.732 --> 00:12:42.940
KURT KLUEVER: I mean, they
can certainly test it out,

00:12:42.940 --> 00:12:44.010
and if they have any
feature requests,

00:12:44.010 --> 00:12:45.420
submit those as issues.

00:12:45.420 --> 00:12:47.080
We've had a handful
of good ideas come

00:12:47.080 --> 00:12:48.600
from external
contributors as well.

00:12:48.600 --> 00:12:50.600
ALEXIS MOUSSINE-POUCHKINE:
So just ideas and you

00:12:50.600 --> 00:12:51.308
implement, right?

00:12:51.308 --> 00:12:52.320
You do the work.

00:12:52.320 --> 00:12:53.860
KURT KLUEVER:
Typically, that's--

00:12:53.860 --> 00:12:56.300
GREGORY KICK: And I'm going
to give a little sales pitch

00:12:56.300 --> 00:12:58.350
on Kurt's behalf.

00:12:58.350 --> 00:13:01.340
A lot of people will
ask, assertion libraries

00:13:01.340 --> 00:13:02.420
have been around forever.

00:13:02.420 --> 00:13:04.080
Why don't I just
use JUnit to search?

00:13:04.080 --> 00:13:07.119
Why don't I use AspectJ or--

00:13:07.119 --> 00:13:08.035
KURT KLUEVER: AssertJ.

00:13:08.035 --> 00:13:08.951
GREGORY KICK: AssertJ.

00:13:08.951 --> 00:13:10.000
That's the one.

00:13:10.000 --> 00:13:14.130
AssertJ or Fest or Hamcrest
or whatever it may be.

00:13:14.130 --> 00:13:18.990
The big selling point of Truth
is that its fluent assertion

00:13:18.990 --> 00:13:22.130
library is also very
pluggable, very modular.

00:13:22.130 --> 00:13:24.336
For Dagger, we've
been using Truth

00:13:24.336 --> 00:13:25.710
to be able to test
our annotation

00:13:25.710 --> 00:13:29.180
processors because we
were able to build in,

00:13:29.180 --> 00:13:32.260
just spun a quick little project
called Compile Testing that

00:13:32.260 --> 00:13:35.730
lets us now hook into the
fluent chain assertions

00:13:35.730 --> 00:13:37.900
about annotation
processors and the results

00:13:37.900 --> 00:13:39.230
of your compilation.

00:13:39.230 --> 00:13:43.400
And because you can very
quickly and easily add new bits

00:13:43.400 --> 00:13:46.030
to the chain for
your specific types,

00:13:46.030 --> 00:13:48.230
we found Truth to
be really powerful.

00:13:48.230 --> 00:13:50.530
So whether it's things
like protocol buffers,

00:13:50.530 --> 00:13:53.880
or your new fancy collection,
the Guava collections

00:13:53.880 --> 00:13:56.810
like Multimap and
Multiset, we can now

00:13:56.810 --> 00:13:59.880
build in extra
assertions as we go

00:13:59.880 --> 00:14:03.100
rather than having to
recompile a whole new version

00:14:03.100 --> 00:14:05.470
of the library and make a
new static method somewhere.

00:14:05.470 --> 00:14:07.890
KURT KLUEVER: And those
custom assertions, like Greg

00:14:07.890 --> 00:14:11.180
alluded to, people on
their own smaller projects,

00:14:11.180 --> 00:14:14.060
they can make these
domain specific languages

00:14:14.060 --> 00:14:17.590
and make the assertions
exactly how they

00:14:17.590 --> 00:14:19.990
would read it in fluent English.

00:14:19.990 --> 00:14:21.650
So we've had teams
all over Google

00:14:21.650 --> 00:14:25.100
making their own
plug-ins to Truth

00:14:25.100 --> 00:14:28.410
to make their assertions
read a lot better.

00:14:28.410 --> 00:14:30.350
But inside of core
Truth, we basically

00:14:30.350 --> 00:14:32.510
have assertions about
a lot of the JDK types,

00:14:32.510 --> 00:14:35.380
and also a lot of the
Guava types as well.

00:14:35.380 --> 00:14:38.120
It has a dependency
on Guava, so we're

00:14:38.120 --> 00:14:43.050
adding custom subjects for
all those Guava types as well.

00:14:43.050 --> 00:14:46.040
ALEXIS MOUSSINE
POUCHKINE: Sounds good.

00:14:46.040 --> 00:14:48.710
Before we close-- we
only have so much time.

00:14:48.710 --> 00:14:49.560
We could go on.

00:14:49.560 --> 00:14:54.330
I have a lot of questions,
but maybe one final question.

00:14:54.330 --> 00:14:59.300
You've been living and breathing
Java for years, it seems.

00:14:59.300 --> 00:15:01.700
Where do you see
Java in five years?

00:15:03.947 --> 00:15:05.530
GREGORY KICK: That's
a tricky question

00:15:05.530 --> 00:15:08.590
because, at least
as far as the things

00:15:08.590 --> 00:15:14.310
we've seen, the things that
I've personally worked on,

00:15:14.310 --> 00:15:18.270
we've been very satisfied with
the state of the libraries.

00:15:18.270 --> 00:15:21.060
We've settled to a pretty
decent, steady state

00:15:21.060 --> 00:15:23.200
with just contributing
new libraries

00:15:23.200 --> 00:15:25.710
and having people
consume them that way,

00:15:25.710 --> 00:15:32.320
but a big increase in tool
driven pseudo libraries.

00:15:32.320 --> 00:15:35.430
Dagger 2 is entirely
annotation processor based.

00:15:35.430 --> 00:15:37.720
AutoValue, which
is a great project,

00:15:37.720 --> 00:15:40.170
and some of the
other Auto projects

00:15:40.170 --> 00:15:43.220
that generate code based
on annotations for you

00:15:43.220 --> 00:15:45.820
and take out a lot of
that boilerplate, that's

00:15:45.820 --> 00:15:49.190
been very quickly becoming
the go to solution

00:15:49.190 --> 00:15:52.140
for a lot of problems that
were left unsolved previously.

00:15:52.140 --> 00:15:56.140
So I see more and more people
writing less and less code,

00:15:56.140 --> 00:15:59.330
and lambdas and streams
seem to be in that vein,

00:15:59.330 --> 00:16:00.870
too, where you used
to have to write

00:16:00.870 --> 00:16:02.750
big, bulky anonymous
inner classes, where

00:16:02.750 --> 00:16:05.400
now nice, convenient
cheap lambdas.

00:16:05.400 --> 00:16:08.390
KURT KLUEVER: Java is no longer
this ceremonious language.

00:16:08.390 --> 00:16:09.890
GREGORY KICK: Less
and less of that.

00:16:09.890 --> 00:16:12.380
So I frankly expect
that in five years,

00:16:12.380 --> 00:16:16.665
we will be writing the same type
of code, just much less of it.

00:16:16.665 --> 00:16:18.040
ALEXIS MOUSSINE
POUCHKINE: Sounds

00:16:18.040 --> 00:16:19.850
like a bright future to me.

00:16:19.850 --> 00:16:22.740
Thanks, guys, for doing this,
and enjoy the conference.

00:16:22.740 --> 00:16:23.040
GREGORY KICK: Excellent.

00:16:23.040 --> 00:16:23.540
Thanks.

00:16:23.540 --> 00:16:24.890
KURT KLUEVER: Thank you.

