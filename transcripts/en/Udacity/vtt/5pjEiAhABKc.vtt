WEBVTT
Kind: captions
Language: en

00:00:00.090 --> 00:00:04.970
Let's look at the solution to our
performance versus number of cores quiz.

00:00:04.970 --> 00:00:10.130
If chip power is 100 watts and
we can operate 1 core if that's the only

00:00:10.130 --> 00:00:15.190
on on the chip at 5 GHz,
how many GHz do we get for 2 cores?

00:00:15.190 --> 00:00:19.590
And the answer is that each of
the 2 cores now gets 50 watts.

00:00:19.590 --> 00:00:21.700
That's half the power.

00:00:21.700 --> 00:00:26.086
The frequency in that case is going to
be the cubic root of that one-half, or

00:00:26.086 --> 00:00:32.549
0.8 times the original frequency,
so we get 4 GHz here.

00:00:32.549 --> 00:00:37.447
The frequency with another doubling
of the number of cores is that each

00:00:37.447 --> 00:00:39.523
gets half the power of these.

00:00:39.523 --> 00:00:45.050
So it's going to be 0.8 times this,
which is going to be 3.2.

00:00:45.050 --> 00:00:50.940
Or, we could do cubic root of
one-quarter of the original 5 GHz and

00:00:50.940 --> 00:00:52.005
get the same answer here.

00:00:52.005 --> 00:00:55.398
For execution time,
we need to account for

00:00:55.398 --> 00:01:00.308
the change in frequency as well
as the change in parallelism.

00:01:00.308 --> 00:01:01.898
So, this is what we get.

00:01:01.898 --> 00:01:11.125
We get 100 seconds when we run all of
these pieces at just 1 core at 5 GHz.

00:01:11.125 --> 00:01:17.545
If we ignore the frequency and have a 2
core chip, then what we get is that for

00:01:17.545 --> 00:01:21.940
20% of the time,
we get a parallelism of only 1.

00:01:21.940 --> 00:01:27.030
With 2 cores, for
the remaining 80% of the execution time,

00:01:27.030 --> 00:01:30.150
we now have a speed up of 2.

00:01:30.150 --> 00:01:32.550
So that time is cut in half, so

00:01:32.550 --> 00:01:37.680
we get 0.6 times the original
time if we ignore the frequency.

00:01:37.680 --> 00:01:41.986
So it will be 60 seconds without
the change in frequency.

00:01:41.986 --> 00:01:45.312
Unfortunately, there is
a change in frequency.

00:01:45.312 --> 00:01:49.528
60 seconds at 5 GHz, would translate so

00:01:49.528 --> 00:01:54.329
we get 60 seconds x 5
billion cycles per second

00:01:54.329 --> 00:01:59.720
is 75 seconds x 4 billion
cycles per second.

00:01:59.720 --> 00:02:02.850
So the answer here is 75 seconds.

00:02:02.850 --> 00:02:06.943
We would get 60 if we
operated at 5 gigahertz but

00:02:06.943 --> 00:02:10.261
because we operate at 4, we need 75.

00:02:10.261 --> 00:02:15.123
And then for a 4 core execution,
we get that out of the 100 seconds,

00:02:15.123 --> 00:02:19.610
for 20 seconds we can't improve
by running on more cores.

00:02:19.610 --> 00:02:24.750
For 30 seconds, we get the speed up
of 2 because we can use 2 cores.

00:02:24.750 --> 00:02:29.910
For 40 seconds the speed up is 3,
because we can use 3 of the 4 cores.

00:02:29.910 --> 00:02:34.360
And finally, for
10 seconds we get a speed up of 4.

00:02:34.360 --> 00:02:37.570
Keep in mind that this is
without the change in frequency.

00:02:37.570 --> 00:02:41.950
So what we get is 50.8 seconds.

00:02:41.950 --> 00:02:49.660
Now we have to account for the change
in frequency from 5 GHz to 3.2 GHz.

00:02:49.660 --> 00:02:52.020
Once we get the 50.8 seconds,

00:02:52.020 --> 00:02:56.990
that's without the change in frequency,
and we get from 5 to 3.2.

00:02:56.990 --> 00:03:02.282
When we compute the speed up relative
to this because of a lower frequency,

00:03:02.282 --> 00:03:06.734
which is actually a slow down,
and we multiply that with this,

00:03:06.734 --> 00:03:11.620
we get 79.4, which is actually
slower than a 2 core execution.

00:03:11.620 --> 00:03:12.580
So as you can see,

00:03:12.580 --> 00:03:17.160
although the 4 core execution gets
some more parallelism exploited,

00:03:17.160 --> 00:03:21.200
it's not enough to make up for the loss
in performance due to frequency change.

