WEBVTT
Kind: captions
Language: en

00:00:15.210 --> 00:00:16.950
JOANNA SMITH: Hey, everybody,
and welcome to "Google+

00:00:16.950 --> 00:00:17.830
Developers Live--

00:00:17.830 --> 00:00:20.850
Come Auth with Us." I'm Joanna
Smith, and I'm a developer

00:00:20.850 --> 00:00:22.890
programs engineer for Google+.

00:00:22.890 --> 00:00:24.910
SILVANO LUCIANI: And I'm Silvano
Luciani, and I'm as

00:00:24.910 --> 00:00:27.690
well a developer programs
engineer on Google+.

00:00:27.690 --> 00:00:30.040
And this week, we are
exceptionally coming to you

00:00:30.040 --> 00:00:33.260
from our studio in New York
City, where we are for our

00:00:33.260 --> 00:00:35.250
Google+ Sign-In boot camps.

00:00:35.250 --> 00:00:36.650
JOANNA SMITH: We're very excited
to be on our global

00:00:36.650 --> 00:00:39.860
tour for these Sign-In boot
camps, but even more exciting

00:00:39.860 --> 00:00:42.420
is that today we actually get to
have our special guest with

00:00:42.420 --> 00:00:46.660
us live, breathing here in the
room, and not by Hangout.

00:00:46.660 --> 00:00:49.300
So everyone please welcome our
Google+ developer expert Allen

00:00:49.300 --> 00:00:50.080
Firstenberg.

00:00:50.080 --> 00:00:50.550
ALLEN FIRSTENBERG: Hi, Joanna.

00:00:50.550 --> 00:00:51.510
It's great to be here.

00:00:51.510 --> 00:00:52.130
Thank you very much.

00:00:52.130 --> 00:00:55.070
It's great to see you guys
in the New York office.

00:00:55.070 --> 00:00:58.860
Glad to see you over on this
side of the country.

00:00:58.860 --> 00:01:01.510
And I'm Allen Firstenberg,
I'm a Google

00:01:01.510 --> 00:01:04.120
developer expert with Google+.

00:01:04.120 --> 00:01:08.030
And I'm glad to be helping
out on today's show.

00:01:08.030 --> 00:01:09.110
JOANNA SMITH: Fantastic.

00:01:09.110 --> 00:01:12.840
So last week we showed you how
easy it is to add Google+

00:01:12.840 --> 00:01:17.160
Sign-In to your website
using JavaScript.

00:01:17.160 --> 00:01:20.730
And basically what you can do is
by adding Google+ Sign-In,

00:01:20.730 --> 00:01:22.530
you bring the power of
Google to your site.

00:01:22.530 --> 00:01:25.630
And when a user is signed in,
you get this OAuth token so

00:01:25.630 --> 00:01:28.080
that you can make calls on their
behalf to the API while

00:01:28.080 --> 00:01:29.690
they're active in your site.

00:01:29.690 --> 00:01:31.410
But that's when you're
using client-side.

00:01:31.410 --> 00:01:33.780
But there's more to it, and to
better understand your user

00:01:33.780 --> 00:01:35.430
and what's right for you, we're
going to go over the

00:01:35.430 --> 00:01:39.430
different possible flows
for authentication.

00:01:39.430 --> 00:01:41.490
So there's three
of them, right?

00:01:41.490 --> 00:01:42.230
SILVANO LUCIANI: Yes, Joanna.

00:01:42.230 --> 00:01:42.840
Spot on.

00:01:42.840 --> 00:01:45.670
We have three different options,
and today we are

00:01:45.670 --> 00:01:47.740
going to do a work through
of all the

00:01:47.740 --> 00:01:48.900
three different options.

00:01:48.900 --> 00:01:50.390
And we will use different
tools.

00:01:50.390 --> 00:01:53.410
We will use a sample-- it's
a very small sample--

00:01:53.410 --> 00:01:56.030
we will use the Google OAuth
2.0 Playground, and we will

00:01:56.030 --> 00:01:59.230
show you some of the source
code from one of our

00:01:59.230 --> 00:02:00.080
quick-starts--

00:02:00.080 --> 00:02:02.210
the PHP quick-starts.

00:02:02.210 --> 00:02:02.930
JOANNA SMITH: So what
do you think, Allen?

00:02:02.930 --> 00:02:04.140
How's that sound?

00:02:04.140 --> 00:02:04.890
ALLEN FIRSTENBERG: I think
it sounds good.

00:02:04.890 --> 00:02:07.530
I think one of the important
things that people should take

00:02:07.530 --> 00:02:10.660
away from this is that what
we're covering today isn't

00:02:10.660 --> 00:02:14.130
just applicable to Google+
Sign-In, it's applicable to

00:02:14.130 --> 00:02:17.450
everything across the board
of all of Google's APIs.

00:02:17.450 --> 00:02:21.150
So if you understand the OAuth
flow from this, you'll be able

00:02:21.150 --> 00:02:24.480
to apply it in a wide variety
of other tools that are

00:02:24.480 --> 00:02:25.980
available from Google.

00:02:25.980 --> 00:02:26.950
JOANNA SMITH: That's a
really good point.

00:02:26.950 --> 00:02:28.140
Thank you.

00:02:28.140 --> 00:02:31.180
Sometimes it's hard for us to
remember that for developers

00:02:31.180 --> 00:02:33.050
there's more than
just our API.

00:02:33.050 --> 00:02:35.940
So it's good to have
reminders of that.

00:02:35.940 --> 00:02:37.430
So let's get started with
the client-side flow.

00:02:37.430 --> 00:02:40.240
And this is what we showed you
guys last week in particular.

00:02:40.240 --> 00:02:42.360
And when you're using our
Google+ Sign-In button, you

00:02:42.360 --> 00:02:44.570
basically get this
flow for free.

00:02:44.570 --> 00:02:46.885
And it's really simple
and straightforward.

00:02:46.885 --> 00:02:49.100
But the key to remember is
that when you're using

00:02:49.100 --> 00:02:51.800
client-side authentication,
you're able to get an access

00:02:51.800 --> 00:02:54.980
token that allows you to make
calls on behalf of the user

00:02:54.980 --> 00:02:56.830
while they are active
in your app.

00:02:56.830 --> 00:02:58.970
And that's the key piece-- as
long as they're in your app,

00:02:58.970 --> 00:03:00.710
you're good to go.

00:03:00.710 --> 00:03:03.440
SILVANO LUCIANI: So we
can show an example.

00:03:03.440 --> 00:03:06.830
It's our big red
Sign-In button.

00:03:06.830 --> 00:03:11.330
We showed you last week how to
place it in your web page and

00:03:11.330 --> 00:03:14.400
how to integrate it
in your website.

00:03:14.400 --> 00:03:17.120
What we want to show you
this week is what

00:03:17.120 --> 00:03:18.900
is the OAuth result.

00:03:18.900 --> 00:03:22.440
What is the object that
it's returned after--

00:03:22.440 --> 00:03:24.720
when the Sign-In call
back is called after

00:03:24.720 --> 00:03:27.210
a successful login.

00:03:27.210 --> 00:03:32.250
So when I click Sign-In, in this
case we are seeing our

00:03:32.250 --> 00:03:35.090
familiar content dialogue.

00:03:35.090 --> 00:03:36.810
It's full screen.

00:03:36.810 --> 00:03:39.220
It went already to that
page because I'm full

00:03:39.220 --> 00:03:41.130
screen on my monitor.

00:03:41.130 --> 00:03:44.520
When I click Accept,
I'm back to my app.

00:03:44.520 --> 00:03:48.640
And what I'm doing in this
sample is just dumping the

00:03:48.640 --> 00:03:52.060
content of the object that is
returned to our call back.

00:03:52.060 --> 00:03:54.610
That's a lot of stuff, as
you can see in there.

00:03:54.610 --> 00:03:56.620
But I want to focus on
just two values.

00:03:56.620 --> 00:03:59.600
The first one I want to focus
on is the access token.

00:03:59.600 --> 00:04:01.100
So this one.

00:04:01.100 --> 00:04:04.490
And as you can see, this is what
the client library will

00:04:04.490 --> 00:04:08.440
use to sign the request that
you do to our API.

00:04:08.440 --> 00:04:11.780
This token will be valid
for one hour.

00:04:11.780 --> 00:04:15.565
When you use this flow, what
happens is that we have a

00:04:15.565 --> 00:04:18.280
Sign-in mode that is called
Immediate Mode, which means

00:04:18.280 --> 00:04:19.940
that if you already
gave content--

00:04:19.940 --> 00:04:22.610
if the user has already given
content to your app--

00:04:22.610 --> 00:04:24.190
when the user will be back.

00:04:24.190 --> 00:04:27.520
If their access token has
expired, we will go to an

00:04:27.520 --> 00:04:28.610
automatic flow.

00:04:28.610 --> 00:04:31.370
We will give you another access
token, and then you

00:04:31.370 --> 00:04:36.270
will be able to start again
making requests to the Google+

00:04:36.270 --> 00:04:40.190
API, or any other API,
as Allen pointed.

00:04:40.190 --> 00:04:42.440
The second thing I want to
show you is the code.

00:04:42.440 --> 00:04:47.490
So this code, remember about
this because we will see this

00:04:47.490 --> 00:04:49.640
in a while in the other
two flows that we

00:04:49.640 --> 00:04:52.750
will present to you.

00:04:52.750 --> 00:04:55.440
ALLEN FIRSTENBERG: So I think
one of the important things to

00:04:55.440 --> 00:04:57.420
understand about when you're
going to be using this sort of

00:04:57.420 --> 00:05:02.230
thing is primarily when you're
working with the JavaScript

00:05:02.230 --> 00:05:05.640
libraries, and you're
restricting all of your access

00:05:05.640 --> 00:05:09.010
from the client where you want
to be displaying things from

00:05:09.010 --> 00:05:11.790
JavaScript, controlling things
from JavaScript, and you're

00:05:11.790 --> 00:05:13.600
essentially going to be letting
the user connect

00:05:13.600 --> 00:05:17.990
directly from the page that's
presented back to Google's

00:05:17.990 --> 00:05:21.200
servers and contacting the
Google servers for that data.

00:05:21.200 --> 00:05:23.470
So I think this is where you're
going to be seeing the

00:05:23.470 --> 00:05:26.090
most use for this
particular flow.

00:05:26.090 --> 00:05:26.490
SILVANO LUCIANI: True.

00:05:26.490 --> 00:05:29.930
JOANNA SMITH: So Allen, you use
client-side a lot, right?

00:05:29.930 --> 00:05:31.550
ALLEN FIRSTENBERG: It's
primarily most of what I do

00:05:31.550 --> 00:05:35.880
these days is I tend to create
a lot of JavaScript mock-ups

00:05:35.880 --> 00:05:39.290
and keep all of the work inside
JavaScript itself,

00:05:39.290 --> 00:05:41.920
bothering my server as
little as possible.

00:05:41.920 --> 00:05:44.110
JOANNA SMITH: And do you do that
because it's simpler or

00:05:44.110 --> 00:05:46.255
faster, or is it just
your favorite?

00:05:46.255 --> 00:05:46.870
ALLEN FIRSTENBERG: It depends.

00:05:46.870 --> 00:05:48.830
It really depends on the project
that I'm working on at

00:05:48.830 --> 00:05:50.170
any given time.

00:05:50.170 --> 00:05:53.440
So most of the work that I'm
doing these days pretty much

00:05:53.440 --> 00:05:55.940
is staying within
the client-side.

00:05:55.940 --> 00:05:57.670
There is no need to
talk to my server.

00:05:57.670 --> 00:06:00.510
My server doesn't need to get a
lot of information, doesn't

00:06:00.510 --> 00:06:03.160
need to control a lot of
what the user is doing.

00:06:03.160 --> 00:06:06.590
I just want the user to be
communicating with Google as

00:06:06.590 --> 00:06:08.085
much as possible, as directly
as possible.

00:06:08.085 --> 00:06:08.750
JOANNA SMITH: That
makes sense.

00:06:08.750 --> 00:06:08.930
ALLEN FIRSTENBERG: And

00:06:08.930 --> 00:06:11.020
communicating with me far less.

00:06:11.020 --> 00:06:11.100
JOANNA SMITH: OK.

00:06:11.100 --> 00:06:13.190
That makes a lot of sense.

00:06:13.190 --> 00:06:15.500
And so that was client-side,
which you've now

00:06:15.500 --> 00:06:16.460
seen several times.

00:06:16.460 --> 00:06:18.450
But the second flow we wanted
to talk to you about is the

00:06:18.450 --> 00:06:21.290
server-side flow for web
server applications.

00:06:21.290 --> 00:06:23.686
And these may access a Google
API while the user is present

00:06:23.686 --> 00:06:26.760
in the application or after
the user has left.

00:06:26.760 --> 00:06:28.540
And that's what's really
beneficial about the

00:06:28.540 --> 00:06:32.765
server-side flow is that you
get this additional refresh

00:06:32.765 --> 00:06:34.910
token, and so you have the
ability to [? meet ?]

00:06:34.910 --> 00:06:35.520
somewhere else.

00:06:35.520 --> 00:06:37.440
But it requires that the server
is able to keep a

00:06:37.440 --> 00:06:39.575
secret, and that's what's
really key here.

00:06:39.575 --> 00:06:42.620
SILVANO LUCIANI: Yeah, keeping
the client's secret secret.

00:06:42.620 --> 00:06:45.940
A non-secret client's secret
doesn't sound very good.

00:06:45.940 --> 00:06:48.570
To show you some of the details,
we are going to use

00:06:48.570 --> 00:06:52.660
this wonderful tool, which is
the OAuth 2.0 Playground,

00:06:52.660 --> 00:06:55.370
which will allow you to inspect
all the different

00:06:55.370 --> 00:06:58.720
steps of the different
OAuth flows.

00:06:58.720 --> 00:07:02.930
And by using this gear, you
can configure the type of

00:07:02.930 --> 00:07:05.270
OAuth flow that you
want to inspect.

00:07:05.270 --> 00:07:05.400
JOANNA SMITH: [INAUDIBLE].

00:07:05.400 --> 00:07:07.010
SILVANO LUCIANI: In this
case, it will be the

00:07:07.010 --> 00:07:09.240
server-side for us.

00:07:09.240 --> 00:07:13.480
And the thing that we want to
show to you is how you will

00:07:13.480 --> 00:07:14.730
get the refresh token.

00:07:14.730 --> 00:07:17.940
And the refresh token is
a long-lived token.

00:07:17.940 --> 00:07:22.040
It will actually never expire
until the user revokes the

00:07:22.040 --> 00:07:24.380
token or disconnects your app.

00:07:24.380 --> 00:07:28.200
And what you can do with the
refresh token is request a new

00:07:28.200 --> 00:07:31.700
access token when the access
token that you're using has

00:07:31.700 --> 00:07:34.810
expired, which means
after one hour.

00:07:34.810 --> 00:07:38.210
So in the first step, we
are asked to select and

00:07:38.210 --> 00:07:39.430
authorize an API.

00:07:39.430 --> 00:07:43.650
And given that our + API is way
down the list, I already

00:07:43.650 --> 00:07:45.330
added the scope.

00:07:45.330 --> 00:07:48.110
But this shows you that you
can actually try this with

00:07:48.110 --> 00:07:50.170
your own custom scopes.

00:07:50.170 --> 00:07:54.910
So when I click Authorize API,
I'm redirected to the full

00:07:54.910 --> 00:07:57.830
screen authorization server.

00:07:57.830 --> 00:08:00.420
In this case, it's important
to understand that for the

00:08:00.420 --> 00:08:03.549
server-side flow this
will always happen.

00:08:03.549 --> 00:08:06.179
And that's the reason why when
you configure this type of

00:08:06.179 --> 00:08:08.970
flow, you will also need
the redirect URI.

00:08:08.970 --> 00:08:11.919
Because after this redirect to
the Google authorization

00:08:11.919 --> 00:08:14.570
server, the Google authorization
server will

00:08:14.570 --> 00:08:18.120
redirect back the user to your
app, to the redirect URI that

00:08:18.120 --> 00:08:21.250
you have specified in the
configuration of the project

00:08:21.250 --> 00:08:22.920
on the API consult.

00:08:22.920 --> 00:08:27.030
And after I click Accept, in
this case, we go back to the

00:08:27.030 --> 00:08:29.430
OAuth Playground with this
because that's what is

00:08:29.430 --> 00:08:32.830
configured as redirect
URI for this project.

00:08:32.830 --> 00:08:37.620
Now if you can see, in the URL
it's not very big, but the

00:08:37.620 --> 00:08:41.380
last part is a code which is
similar to the code that I was

00:08:41.380 --> 00:08:47.310
showing to you before returned
by the Sign-In button.

00:08:47.310 --> 00:08:51.190
We can use this code to make
an exchange with the Google

00:08:51.190 --> 00:08:55.080
authorization server and get
back a new pair of an access

00:08:55.080 --> 00:08:57.310
token and the refresh token.

00:08:57.310 --> 00:09:00.410
The code is here as well,
and it's more visible.

00:09:00.410 --> 00:09:02.300
And I can do the exchange
by clicking

00:09:02.300 --> 00:09:03.690
this big blue button--

00:09:03.690 --> 00:09:06.050
Exchange Authorization Code.

00:09:06.050 --> 00:09:09.810
When I do it, if you want you
can analyze on the right side

00:09:09.810 --> 00:09:12.920
what the request was and
what the response is.

00:09:12.920 --> 00:09:16.310
But the most important thing
is that I got this pair--

00:09:16.310 --> 00:09:20.240
access token and
refresh token.

00:09:20.240 --> 00:09:23.650
Now, it's important to
understand that you will get

00:09:23.650 --> 00:09:27.060
the refresh token only once and
only after the user has

00:09:27.060 --> 00:09:28.800
given consent to your
application.

00:09:28.800 --> 00:09:32.610
So given that you are doing
these because you want offline

00:09:32.610 --> 00:09:37.620
access to the user data, you
need to store it along with

00:09:37.620 --> 00:09:42.850
the user data in your database
or wherever you store data for

00:09:42.850 --> 00:09:45.250
your application and
don't lose it.

00:09:45.250 --> 00:09:50.030
If you lose it for any reason,
you can force the user to

00:09:50.030 --> 00:09:53.420
reauthenticate using the
approval prompt parameter and

00:09:53.420 --> 00:09:56.780
setting it to false, but this
will cause the consent

00:09:56.780 --> 00:09:59.190
dialogue to be displayed
again to the user,

00:09:59.190 --> 00:10:01.980
which could be confusing.

00:10:01.980 --> 00:10:06.090
Now, I can use the List Possible
Operations to get all

00:10:06.090 --> 00:10:08.940
the operations that the Google+
API, which is the one

00:10:08.940 --> 00:10:12.310
that we authorized in this
demo, available.

00:10:12.310 --> 00:10:16.150
The other thing that I can do
is go back to step two.

00:10:16.150 --> 00:10:18.180
Let me close this.

00:10:18.180 --> 00:10:19.840
Go back to the second step.

00:10:19.840 --> 00:10:22.810
And there's another gray button,
which is Refresh

00:10:22.810 --> 00:10:23.670
Access Token.

00:10:23.670 --> 00:10:27.040
And if I click it, you can see
what happens when you want to

00:10:27.040 --> 00:10:30.690
actually use a refresh token to
get a new access token that

00:10:30.690 --> 00:10:34.340
will last another hour.

00:10:34.340 --> 00:10:35.990
ALLEN FIRSTENBERG: And I think
one of the things that's

00:10:35.990 --> 00:10:38.540
important to understand about
this is when you would use

00:10:38.540 --> 00:10:40.620
this over the client-side one.

00:10:40.620 --> 00:10:43.800
And primarily I use this the
most under one of two

00:10:43.800 --> 00:10:45.160
circumstances.

00:10:45.160 --> 00:10:49.300
The first is when what I'm doing
on the client-side isn't

00:10:49.300 --> 00:10:52.500
very much related to what's
going on with Google itself.

00:10:52.500 --> 00:10:55.380
So if my client is almost
exclusively talking to my

00:10:55.380 --> 00:10:58.460
server, or if I'm getting some
static information back from

00:10:58.460 --> 00:11:00.560
the server, this is when
I would be doing it.

00:11:00.560 --> 00:11:02.920
My server's doing all of
the heavy lifting.

00:11:02.920 --> 00:11:04.820
The other case when it's doing
it is when I don't have a

00:11:04.820 --> 00:11:05.980
client at all.

00:11:05.980 --> 00:11:09.800
When basically I need my server
to be able to do things

00:11:09.800 --> 00:11:10.920
on my behalf.

00:11:10.920 --> 00:11:14.150
So looking outside Google+,
for example, I might be

00:11:14.150 --> 00:11:17.450
wanting to write something into
a spreadsheet that's in

00:11:17.450 --> 00:11:18.090
Google Drive.

00:11:18.090 --> 00:11:20.390
Or I might want to be creating
Google Drive documents for me

00:11:20.390 --> 00:11:21.950
to look at later.

00:11:21.950 --> 00:11:26.080
Or using the new API, I might
be wanting to create new

00:11:26.080 --> 00:11:28.710
moments and have those moments
show up as part

00:11:28.710 --> 00:11:32.260
of my Google+ history.

00:11:32.260 --> 00:11:35.340
These are cases where there's no
direct client interaction,

00:11:35.340 --> 00:11:37.940
so the server needs that refresh
token and needs to be

00:11:37.940 --> 00:11:41.744
able to use that refresh
token at any time.

00:11:41.744 --> 00:11:42.690
JOANNA SMITH: That's true.

00:11:42.690 --> 00:11:45.290
And the other thing is, this
OAuth Playground has been

00:11:45.290 --> 00:11:47.730
available on our documentation,
and it's a

00:11:47.730 --> 00:11:50.360
really great resource for
you to follow the flow.

00:11:50.360 --> 00:11:52.730
So if you're ever a little
confused about OAuth and its

00:11:52.730 --> 00:11:55.420
complexities, definitely take
a moment to really step

00:11:55.420 --> 00:11:57.230
through and see everything that
happens at each stage,

00:11:57.230 --> 00:11:59.670
because this is honestly how I
learned OAuth when I first

00:11:59.670 --> 00:12:01.540
started at Google, and I
think it'll be really

00:12:01.540 --> 00:12:03.315
good for you too.

00:12:03.315 --> 00:12:04.225
SILVANO LUCIANI: Same for me.

00:12:04.225 --> 00:12:06.050
JOANNA SMITH: [LAUGHS]

00:12:06.050 --> 00:12:08.150
And so the third flow we wanted
to talk to you about is

00:12:08.150 --> 00:12:10.130
what we call the one
time code flow.

00:12:10.130 --> 00:12:14.940
And it uses this same
authorization code to exchange

00:12:14.940 --> 00:12:18.230
to the server to get that access
and refresh token back.

00:12:18.230 --> 00:12:21.610
But what's really key here is
that you can actually receive

00:12:21.610 --> 00:12:24.550
the code on the client like we
saw earlier, and you can pass

00:12:24.550 --> 00:12:27.750
that code securely to your
server in order to do the

00:12:27.750 --> 00:12:30.670
exchange for the token so that
you don't have to pass a user

00:12:30.670 --> 00:12:32.370
authentication token
around, which could

00:12:32.370 --> 00:12:35.640
be unsafe or insecure.

00:12:35.640 --> 00:12:39.160
SILVANO LUCIANI: So yeah,
we have a diagram on our

00:12:39.160 --> 00:12:44.030
developer's documentation on
developers.google.com.

00:12:44.030 --> 00:12:49.050
And this is a scheme of what
Joanna just told you.

00:12:49.050 --> 00:12:52.420
So what happens when you use
the Google+ Sign-In, as I

00:12:52.420 --> 00:12:55.270
showed you before, you get
an access token, but

00:12:55.270 --> 00:12:56.920
you also get a code.

00:12:56.920 --> 00:13:00.380
And you can use that code
to perform the exchange.

00:13:00.380 --> 00:13:04.950
I will show you now how to
do it using one of our

00:13:04.950 --> 00:13:08.210
quick-starts that you can
find in our Google+

00:13:08.210 --> 00:13:09.660
repository on GitHub.

00:13:09.660 --> 00:13:12.870
As you might already know,
there's quick-starts for many

00:13:12.870 --> 00:13:14.140
different languages.

00:13:14.140 --> 00:13:17.550
So there's two key
things here.

00:13:17.550 --> 00:13:21.600
What I'm showing to you now is
from the index.html of our

00:13:21.600 --> 00:13:24.200
quick-start, which is where
we rendered the button.

00:13:24.200 --> 00:13:27.180
And then we have some JavaScript
asynchronous call

00:13:27.180 --> 00:13:31.710
to a simple backend API
implemented in PHP.

00:13:31.710 --> 00:13:34.810
So what happens in this connect
server function is

00:13:34.810 --> 00:13:40.030
that we are posting to our
server the code that we

00:13:40.030 --> 00:13:44.250
obtained from the Sign-In button
that was in the object

00:13:44.250 --> 00:13:46.090
that is returned
to the callback

00:13:46.090 --> 00:13:47.750
of the Sign-In button.

00:13:47.750 --> 00:13:51.765
One important thing that we
are doing is to avoid

00:13:51.765 --> 00:13:55.530
cross-site request forgery,
when we rendered this page

00:13:55.530 --> 00:13:58.640
from the server-side, we created
this state which is a

00:13:58.640 --> 00:14:00.240
random value.

00:14:00.240 --> 00:14:05.500
We rendered the random value
in the parameters of this

00:14:05.500 --> 00:14:08.880
invocation, and we save it in
the session so that when we

00:14:08.880 --> 00:14:11.330
receive this request on the
server, we can compare the

00:14:11.330 --> 00:14:14.080
value with what we stored
in the session.

00:14:14.080 --> 00:14:17.930
And you should do it, probably,
in the database.

00:14:17.930 --> 00:14:20.920
If they are the same value, then
we can see that this is

00:14:20.920 --> 00:14:22.240
our request.

00:14:22.240 --> 00:14:25.990
Otherwise, something fishy
might have happened.

00:14:25.990 --> 00:14:30.480
If we go to see what happens on
the server-side in our PHP

00:14:30.480 --> 00:14:36.510
API, we can use the Google
API client for PHP.

00:14:36.510 --> 00:14:40.755
We just have to initialize it
with some standard parameter.

00:14:40.755 --> 00:14:43.060
At this point, this function--

00:14:43.060 --> 00:14:44.130
the connect function--

00:14:44.130 --> 00:14:46.600
is where we post the code.

00:14:46.600 --> 00:14:52.770
And what happens here is that
when we receive the code, we

00:14:52.770 --> 00:15:01.460
make the exchange with the
Google token endpoint, and

00:15:01.460 --> 00:15:04.510
then we make some verification
on the token.

00:15:04.510 --> 00:15:10.020
We check that the audience of
the token is our app so that

00:15:10.020 --> 00:15:12.090
this token is actually intended
to be for our

00:15:12.090 --> 00:15:13.060
application.

00:15:13.060 --> 00:15:16.020
And we check that the user that
is tied to the access

00:15:16.020 --> 00:15:19.310
token is actually the user
that is trying to

00:15:19.310 --> 00:15:20.350
login to our app.

00:15:20.350 --> 00:15:22.030
And then we are good to go.

00:15:22.030 --> 00:15:26.790
Otherwise, if we found some
problems, some errors, we

00:15:26.790 --> 00:15:29.890
return some meaningful error
about what happened and what

00:15:29.890 --> 00:15:33.010
went wrong in this exchange.

00:15:33.010 --> 00:15:34.510
ALLEN FIRSTENBERG: And I think
it's important to point out

00:15:34.510 --> 00:15:39.480
that these checks are really
very, very important.

00:15:39.480 --> 00:15:42.250
One other way that a lot of
people have talked about doing

00:15:42.250 --> 00:15:44.300
this sort of thing is handing
the access code from the

00:15:44.300 --> 00:15:45.420
client to the server.

00:15:45.420 --> 00:15:48.640
And that's just a bad,
bad way to do it.

00:15:48.640 --> 00:15:51.350
Using this separate code and
then doing these additional

00:15:51.350 --> 00:15:54.010
checks on the server
side is much more

00:15:54.010 --> 00:15:55.790
secure, much more reliable.

00:15:55.790 --> 00:15:58.730
And it really kind of drives
home the point that Google is

00:15:58.730 --> 00:16:03.450
trying to create code and create
flows that are meant to

00:16:03.450 --> 00:16:06.650
protect developers and
users combined.

00:16:06.650 --> 00:16:09.000
I think one of the great things
about this particular

00:16:09.000 --> 00:16:13.240
flow and the way this one works
is that in the end, both

00:16:13.240 --> 00:16:17.650
the client and the server
have access to a user's

00:16:17.650 --> 00:16:20.350
information, can communicate
with Google

00:16:20.350 --> 00:16:21.770
on the user's behalf.

00:16:21.770 --> 00:16:24.970
So you can have some of the
JavaScript stuff using the

00:16:24.970 --> 00:16:29.290
JavaScript APIs to talk directly
to Google, and the

00:16:29.290 --> 00:16:32.270
server ends up with the code,
ends up with the ability to do

00:16:32.270 --> 00:16:35.160
the refresh token, ends up with
the ability to do things

00:16:35.160 --> 00:16:37.640
on the user's behalf if that's
what you're trying to do.

00:16:37.640 --> 00:16:40.700
So that's an important
dual feature.

00:16:40.700 --> 00:16:44.500
It's really pretty powerful that
you're allowing this sort

00:16:44.500 --> 00:16:46.475
of thing and allowing
it securely.

00:16:46.475 --> 00:16:46.750
SILVANO LUCIANI: Yeah.

00:16:46.750 --> 00:16:49.609
And one important thing that
I forgot to mention on the

00:16:49.609 --> 00:16:51.819
security point of view
is that this token

00:16:51.819 --> 00:16:53.180
is a one time token.

00:16:53.180 --> 00:16:55.859
So you can use it only
for one exchange.

00:16:55.859 --> 00:16:57.950
And it will expire
pretty soon.

00:16:57.950 --> 00:17:00.720
So do the exchange fast.

00:17:00.720 --> 00:17:03.000
Because otherwise, you won't
be able to use it.

00:17:03.000 --> 00:17:05.140
ALLEN FIRSTENBERG: Where pretty
soon is on the order of

00:17:05.140 --> 00:17:06.270
less than a minute or two?

00:17:06.270 --> 00:17:07.610
Less than that, if I
remember correctly.

00:17:07.610 --> 00:17:08.760
SILVANO LUCIANI: I didn't
give a-- yeah, yeah.

00:17:08.760 --> 00:17:10.140
Less than a minute.

00:17:10.140 --> 00:17:12.700
I don't remember the exact.

00:17:12.700 --> 00:17:15.070
But yeah, I usually
do it immediately.

00:17:15.070 --> 00:17:17.960
So yeah.

00:17:17.960 --> 00:17:20.500
JOANNA SMITH: And so those
are our three flows.

00:17:20.500 --> 00:17:23.900
And it really helps to be able
to decide for yourself as a

00:17:23.900 --> 00:17:26.560
developer if you want to focus
primarily on client-side,

00:17:26.560 --> 00:17:28.850
primarily on server-side, or if
you feel like you really do

00:17:28.850 --> 00:17:31.860
want to make calls on both sides
of your application on

00:17:31.860 --> 00:17:32.690
behalf of the user.

00:17:32.690 --> 00:17:35.650
And hopefully with a little bit
of this discussion, you'll

00:17:35.650 --> 00:17:37.540
be able to figure out which
one's right for you.

00:17:37.540 --> 00:17:39.490
But of course if you want to
learn more, definitely check

00:17:39.490 --> 00:17:42.740
out our documentation at
developers.google.com/plus,

00:17:42.740 --> 00:17:45.090
because that's where we put
everything, including that

00:17:45.090 --> 00:17:47.520
really helpful diagram
to track the flow.

00:17:47.520 --> 00:17:47.900
SILVANO LUCIANI: Yes.

00:17:47.900 --> 00:17:52.230
And as I showed you, our
project's on GitHub.

00:17:52.230 --> 00:17:54.860
You can find the quick-starts
with our showings

00:17:54.860 --> 00:17:56.430
on different approach--

00:17:56.430 --> 00:18:00.740
pure client-side with the
JavaScript, mix the one time

00:18:00.740 --> 00:18:06.810
code exchange with the Python,
Java, PHP, Ruby, and C#.

00:18:06.810 --> 00:18:08.820
And then there's also PhotoHunt,
which is an

00:18:08.820 --> 00:18:10.490
end-to-end sample application.

00:18:10.490 --> 00:18:14.270
So it's giving you an example
of a more complex

00:18:14.270 --> 00:18:17.320
authentication scenario that
involves also like mobile

00:18:17.320 --> 00:18:21.210
clients for Android and iOS.

00:18:21.210 --> 00:18:23.350
JOANNA SMITH: And of course, if
you have any questions, let

00:18:23.350 --> 00:18:26.770
us know in our Google+
Developers community.

00:18:26.770 --> 00:18:29.230
I check that every single day to
see what's going on and if

00:18:29.230 --> 00:18:31.500
anyone's looking
for some help.

00:18:31.500 --> 00:18:34.020
And of course, we have Stack
Overflow with our Google+ tag,

00:18:34.020 --> 00:18:35.330
which we also check daily.

00:18:35.330 --> 00:18:37.990
And then the final resource
is our Issue Tracker.

00:18:37.990 --> 00:18:41.850
And if you find a bug, or if you
have a feature request, go

00:18:41.850 --> 00:18:43.790
ahead and check there
or file a new one.

00:18:43.790 --> 00:18:46.300
But if you find one that you
like, star it, because I use

00:18:46.300 --> 00:18:49.220
those stars every week when I
triage those issues, and the

00:18:49.220 --> 00:18:51.840
stars are what tell us what's
important and which things we

00:18:51.840 --> 00:18:54.610
need to move into our internal
bug system and which feature

00:18:54.610 --> 00:18:56.730
requests need to be
sent along to PMs.

00:18:56.730 --> 00:19:00.140
So definitely take the time to
star an issue that you find

00:19:00.140 --> 00:19:03.540
important, because that's
going to be really key.

00:19:03.540 --> 00:19:03.920
ALLEN FIRSTENBERG: Yeah.

00:19:03.920 --> 00:19:05.820
I know I always hang
out on Stack

00:19:05.820 --> 00:19:08.090
Exchange and Stack Overflow.

00:19:08.090 --> 00:19:10.900
So issues that show up there--

00:19:10.900 --> 00:19:11.620
I enjoy reading them.

00:19:11.620 --> 00:19:13.260
I enjoy getting the perspectives
of other

00:19:13.260 --> 00:19:15.470
developers on what you're
trying to do.

00:19:15.470 --> 00:19:18.500
And for that I always turn
to our Google+ Developers

00:19:18.500 --> 00:19:20.460
community on Google+ itself.

00:19:20.460 --> 00:19:22.440
We've had a lot of good
exchanges there.

00:19:22.440 --> 00:19:25.530
Always good to hear how other
people are using this and also

00:19:25.530 --> 00:19:28.560
the problems that you're having,
because that helps me

00:19:28.560 --> 00:19:33.410
and it helps the team improve
the documentation and improve

00:19:33.410 --> 00:19:34.850
the resources for all of us.

00:19:34.850 --> 00:19:35.410
JOANNA SMITH: Definitely.

00:19:35.410 --> 00:19:37.280
If you aren't getting what
you need to out of our

00:19:37.280 --> 00:19:39.880
documentation, you need to be
letting us know because our

00:19:39.880 --> 00:19:41.970
whole job is to help developers
succeed, and that's

00:19:41.970 --> 00:19:43.320
what we really care about.

00:19:43.320 --> 00:19:45.730
So definitely speak up about
good and bad things.

00:19:45.730 --> 00:19:48.000
It really helps us out.

00:19:48.000 --> 00:19:49.055
And that's our show for today.

00:19:49.055 --> 00:19:50.950
But before we go, I just want
to take a moment to thank

00:19:50.950 --> 00:19:53.280
Allen for coming up and
being here with us.

00:19:53.280 --> 00:19:56.050
It's great to be able
to talk to our GDEs.

00:19:56.050 --> 00:19:59.480
And of course our other two GDEs
are Abraham Williams and

00:19:59.480 --> 00:20:00.030
Gerwin Sturm.

00:20:00.030 --> 00:20:02.230
And they're incredibly useful
resources, so if you see them

00:20:02.230 --> 00:20:04.600
hanging out on the internet
definitely give their words

00:20:04.600 --> 00:20:07.140
some weight, because
they matter.

00:20:07.140 --> 00:20:07.425
ALLEN FIRSTENBERG: They do.

00:20:07.425 --> 00:20:08.760
JOANNA SMITH: And thanks
for being here.

00:20:08.760 --> 00:20:09.610
ALLEN FIRSTENBERG: I'm
glad I could be here.

00:20:09.610 --> 00:20:11.910
Thanks for having me and thanks
for all the support you

00:20:11.910 --> 00:20:14.390
guys give to all of the
developers out there.

