WEBVTT
Kind: captions
Language: en

00:00:00.539 --> 00:00:04.550
ah threading so powerful that you can

00:00:04.550 --> 00:00:04.560
ah threading so powerful that you can
 

00:00:04.560 --> 00:00:06.230
ah threading so powerful that you can
fold genomes with it but so difficult

00:00:06.230 --> 00:00:06.240
fold genomes with it but so difficult
 

00:00:06.240 --> 00:00:08.030
fold genomes with it but so difficult
that it can drive the average programmer

00:00:08.030 --> 00:00:08.040
that it can drive the average programmer
 

00:00:08.040 --> 00:00:10.640
that it can drive the average programmer
insane my name is Colt McAnlis and as

00:00:10.640 --> 00:00:10.650
insane my name is Colt McAnlis and as
 

00:00:10.650 --> 00:00:12.470
insane my name is Colt McAnlis and as
far as Android development is concerned

00:00:12.470 --> 00:00:12.480
far as Android development is concerned
 

00:00:12.480 --> 00:00:14.060
far as Android development is concerned
threading is one of the most important

00:00:14.060 --> 00:00:14.070
threading is one of the most important
 

00:00:14.070 --> 00:00:15.890
threading is one of the most important
and most confusing things that you can

00:00:15.890 --> 00:00:15.900
and most confusing things that you can
 

00:00:15.900 --> 00:00:17.450
and most confusing things that you can
deal with which means if you want to

00:00:17.450 --> 00:00:17.460
deal with which means if you want to
 

00:00:17.460 --> 00:00:19.250
deal with which means if you want to
write the fastest out possible you've

00:00:19.250 --> 00:00:19.260
write the fastest out possible you've
 

00:00:19.260 --> 00:00:21.050
write the fastest out possible you've
got to take a minute and understand the

00:00:21.050 --> 00:00:21.060
got to take a minute and understand the
 

00:00:21.060 --> 00:00:22.880
got to take a minute and understand the
subtle art that is multi-threaded

00:00:22.880 --> 00:00:22.890
subtle art that is multi-threaded
 

00:00:22.890 --> 00:00:24.650
subtle art that is multi-threaded
programming remember that in the vast

00:00:24.650 --> 00:00:24.660
programming remember that in the vast
 

00:00:24.660 --> 00:00:26.179
programming remember that in the vast
world of Android functions there's a

00:00:26.179 --> 00:00:26.189
world of Android functions there's a
 

00:00:26.189 --> 00:00:28.130
world of Android functions there's a
whole boatload of operations that only

00:00:28.130 --> 00:00:28.140
whole boatload of operations that only
 

00:00:28.140 --> 00:00:30.830
whole boatload of operations that only
execute on the main thread system events

00:00:30.830 --> 00:00:30.840
execute on the main thread system events
 

00:00:30.840 --> 00:00:32.690
execute on the main thread system events
input events application callback

00:00:32.690 --> 00:00:32.700
input events application callback
 

00:00:32.700 --> 00:00:35.690
input events application callback
services and even alarms and for the

00:00:35.690 --> 00:00:35.700
services and even alarms and for the
 

00:00:35.700 --> 00:00:37.400
services and even alarms and for the
most part any code that you write

00:00:37.400 --> 00:00:37.410
most part any code that you write
 

00:00:37.410 --> 00:00:39.530
most part any code that you write
execute inside one of these operations

00:00:39.530 --> 00:00:39.540
execute inside one of these operations
 

00:00:39.540 --> 00:00:41.840
execute inside one of these operations
which means it also runs on the right

00:00:41.840 --> 00:00:41.850
which means it also runs on the right
 

00:00:41.850 --> 00:00:43.850
which means it also runs on the right
main thread now if you recall work that

00:00:43.850 --> 00:00:43.860
main thread now if you recall work that
 

00:00:43.860 --> 00:00:45.200
main thread now if you recall work that
executes on the main thread gets there

00:00:45.200 --> 00:00:45.210
executes on the main thread gets there
 

00:00:45.210 --> 00:00:46.940
executes on the main thread gets there
after being pulled from the front of a

00:00:46.940 --> 00:00:46.950
after being pulled from the front of a
 

00:00:46.950 --> 00:00:49.400
after being pulled from the front of a
work queue so blocks of work are done in

00:00:49.400 --> 00:00:49.410
work queue so blocks of work are done in
 

00:00:49.410 --> 00:00:51.020
work queue so blocks of work are done in
order and the next block of work isn't

00:00:51.020 --> 00:00:51.030
order and the next block of work isn't
 

00:00:51.030 --> 00:00:52.729
order and the next block of work isn't
processed until the current one is

00:00:52.729 --> 00:00:52.739
processed until the current one is
 

00:00:52.739 --> 00:00:54.860
processed until the current one is
completed which means if there's a large

00:00:54.860 --> 00:00:54.870
completed which means if there's a large
 

00:00:54.870 --> 00:00:57.080
completed which means if there's a large
chunk of work between an input event and

00:00:57.080 --> 00:00:57.090
chunk of work between an input event and
 

00:00:57.090 --> 00:00:58.970
chunk of work between an input event and
its callback then the user will have to

00:00:58.970 --> 00:00:58.980
its callback then the user will have to
 

00:00:58.980 --> 00:01:00.889
its callback then the user will have to
wait longer than expected to see results

00:01:00.889 --> 00:01:00.899
wait longer than expected to see results
 

00:01:00.899 --> 00:01:02.720
wait longer than expected to see results
and don't forget that the main thread is

00:01:02.720 --> 00:01:02.730
and don't forget that the main thread is
 

00:01:02.730 --> 00:01:04.820
and don't forget that the main thread is
also where most of the screen rendering

00:01:04.820 --> 00:01:04.830
also where most of the screen rendering
 

00:01:04.830 --> 00:01:06.950
also where most of the screen rendering
occurs while an animation or screen

00:01:06.950 --> 00:01:06.960
occurs while an animation or screen
 

00:01:06.960 --> 00:01:08.719
occurs while an animation or screen
update is occurring the system will try

00:01:08.719 --> 00:01:08.729
update is occurring the system will try
 

00:01:08.729 --> 00:01:10.820
update is occurring the system will try
to draw the screen every 16 milliseconds

00:01:10.820 --> 00:01:10.830
to draw the screen every 16 milliseconds
 

00:01:10.830 --> 00:01:13.399
to draw the screen every 16 milliseconds
or so to achieve smooth 60 frames per

00:01:13.399 --> 00:01:13.409
or so to achieve smooth 60 frames per
 

00:01:13.409 --> 00:01:15.740
or so to achieve smooth 60 frames per
second the problem is that this is

00:01:15.740 --> 00:01:15.750
second the problem is that this is
 

00:01:15.750 --> 00:01:17.210
second the problem is that this is
happening while the thread is also

00:01:17.210 --> 00:01:17.220
happening while the thread is also
 

00:01:17.220 --> 00:01:19.850
happening while the thread is also
responding to app input events so if

00:01:19.850 --> 00:01:19.860
responding to app input events so if
 

00:01:19.860 --> 00:01:20.810
responding to app input events so if
your app is in the middle of an

00:01:20.810 --> 00:01:20.820
your app is in the middle of an
 

00:01:20.820 --> 00:01:22.609
your app is in the middle of an
animation and some random work packet

00:01:22.609 --> 00:01:22.619
animation and some random work packet
 

00:01:22.619 --> 00:01:24.230
animation and some random work packet
takes longer than expected you'll miss

00:01:24.230 --> 00:01:24.240
takes longer than expected you'll miss
 

00:01:24.240 --> 00:01:25.730
takes longer than expected you'll miss
your chance to render that next frame

00:01:25.730 --> 00:01:25.740
your chance to render that next frame
 

00:01:25.740 --> 00:01:27.560
your chance to render that next frame
within the 16 millisecond window and

00:01:27.560 --> 00:01:27.570
within the 16 millisecond window and
 

00:01:27.570 --> 00:01:29.899
within the 16 millisecond window and
that frame will be delayed this is what

00:01:29.899 --> 00:01:29.909
that frame will be delayed this is what
 

00:01:29.909 --> 00:01:32.179
that frame will be delayed this is what
we call a dropped frame and when this

00:01:32.179 --> 00:01:32.189
we call a dropped frame and when this
 

00:01:32.189 --> 00:01:34.789
we call a dropped frame and when this
happens users start to notice the direct

00:01:34.789 --> 00:01:34.799
happens users start to notice the direct
 

00:01:34.799 --> 00:01:36.289
happens users start to notice the direct
solution here is to move anything that

00:01:36.289 --> 00:01:36.299
solution here is to move anything that
 

00:01:36.299 --> 00:01:38.330
solution here is to move anything that
might upset the 16 millisecond window

00:01:38.330 --> 00:01:38.340
might upset the 16 millisecond window
 

00:01:38.340 --> 00:01:41.300
might upset the 16 millisecond window
over somewhere else like to a different

00:01:41.300 --> 00:01:41.310
over somewhere else like to a different
 

00:01:41.310 --> 00:01:43.460
over somewhere else like to a different
thread this way it won't be contesting

00:01:43.460 --> 00:01:43.470
thread this way it won't be contesting
 

00:01:43.470 --> 00:01:44.810
thread this way it won't be contesting
with the UI thread for work to be done

00:01:44.810 --> 00:01:44.820
with the UI thread for work to be done
 

00:01:44.820 --> 00:01:46.760
with the UI thread for work to be done
and won't be interrupting the drawing of

00:01:46.760 --> 00:01:46.770
and won't be interrupting the drawing of
 

00:01:46.770 --> 00:01:49.429
and won't be interrupting the drawing of
the screen which is the whole point of

00:01:49.429 --> 00:01:49.439
the screen which is the whole point of
 

00:01:49.439 --> 00:01:51.499
the screen which is the whole point of
threading on Android in a nutshell so

00:01:51.499 --> 00:01:51.509
threading on Android in a nutshell so
 

00:01:51.509 --> 00:01:53.359
threading on Android in a nutshell so
the question at hand what's the best way

00:01:53.359 --> 00:01:53.369
the question at hand what's the best way
 

00:01:53.369 --> 00:01:55.130
the question at hand what's the best way
to offload this work and how do you

00:01:55.130 --> 00:01:55.140
to offload this work and how do you
 

00:01:55.140 --> 00:01:56.959
to offload this work and how do you
choose what types of work to offload

00:01:56.959 --> 00:01:56.969
choose what types of work to offload
 

00:01:56.969 --> 00:01:58.969
choose what types of work to offload
thankfully the android framework has

00:01:58.969 --> 00:01:58.979
thankfully the android framework has
 

00:01:58.979 --> 00:02:00.830
thankfully the android framework has
provided a handful of classes to help

00:02:00.830 --> 00:02:00.840
provided a handful of classes to help
 

00:02:00.840 --> 00:02:02.840
provided a handful of classes to help
make this a bit easier for you for

00:02:02.840 --> 00:02:02.850
make this a bit easier for you for
 

00:02:02.850 --> 00:02:05.690
make this a bit easier for you for
example the async task class is ideal

00:02:05.690 --> 00:02:05.700
example the async task class is ideal
 

00:02:05.700 --> 00:02:07.490
example the async task class is ideal
for helping you get work on and off the

00:02:07.490 --> 00:02:07.500
for helping you get work on and off the
 

00:02:07.500 --> 00:02:09.800
for helping you get work on and off the
UI thread the right way handler threads

00:02:09.800 --> 00:02:09.810
UI thread the right way handler threads
 

00:02:09.810 --> 00:02:11.510
UI thread the right way handler threads
are great when you need a dedicated

00:02:11.510 --> 00:02:11.520
are great when you need a dedicated
 

00:02:11.520 --> 00:02:13.670
are great when you need a dedicated
thread for callbacks to land on thread

00:02:13.670 --> 00:02:13.680
thread for callbacks to land on thread
 

00:02:13.680 --> 00:02:15.410
thread for callbacks to land on thread
pools work best when you can break your

00:02:15.410 --> 00:02:15.420
pools work best when you can break your
 

00:02:15.420 --> 00:02:16.970
pools work best when you can break your
work up into really small packets and

00:02:16.970 --> 00:02:16.980
work up into really small packets and
 

00:02:16.980 --> 00:02:18.860
work up into really small packets and
then toss them to a bunch of threads and

00:02:18.860 --> 00:02:18.870
then toss them to a bunch of threads and
 

00:02:18.870 --> 00:02:21.380
then toss them to a bunch of threads and
intent services are really ideal for

00:02:21.380 --> 00:02:21.390
intent services are really ideal for
 

00:02:21.390 --> 00:02:23.600
intent services are really ideal for
background tasks or when you need to get

00:02:23.600 --> 00:02:23.610
background tasks or when you need to get
 

00:02:23.610 --> 00:02:25.910
background tasks or when you need to get
intent work off the UI thread and like

00:02:25.910 --> 00:02:25.920
intent work off the UI thread and like
 

00:02:25.920 --> 00:02:27.589
intent work off the UI thread and like
everything else there's not a silver

00:02:27.589 --> 00:02:27.599
everything else there's not a silver
 

00:02:27.599 --> 00:02:29.600
everything else there's not a silver
bullet here but knowing which primitive

00:02:29.600 --> 00:02:29.610
bullet here but knowing which primitive
 

00:02:29.610 --> 00:02:31.850
bullet here but knowing which primitive
is best for what situation can save you

00:02:31.850 --> 00:02:31.860
is best for what situation can save you
 

00:02:31.860 --> 00:02:34.009
is best for what situation can save you
a lot of headaches but note that having

00:02:34.009 --> 00:02:34.019
a lot of headaches but note that having
 

00:02:34.019 --> 00:02:35.900
a lot of headaches but note that having
all those fancy helper classes doesn't

00:02:35.900 --> 00:02:35.910
all those fancy helper classes doesn't
 

00:02:35.910 --> 00:02:38.030
all those fancy helper classes doesn't
hide the big problem memory see

00:02:38.030 --> 00:02:38.040
hide the big problem memory see
 

00:02:38.040 --> 00:02:40.160
hide the big problem memory see
threading and memory have never really

00:02:40.160 --> 00:02:40.170
threading and memory have never really
 

00:02:40.170 --> 00:02:41.869
threading and memory have never really
played well and on the Android platform

00:02:41.869 --> 00:02:41.879
played well and on the Android platform
 

00:02:41.879 --> 00:02:44.690
played well and on the Android platform
it's no different for example if you

00:02:44.690 --> 00:02:44.700
it's no different for example if you
 

00:02:44.700 --> 00:02:46.610
it's no different for example if you
declare one of those fancy threading

00:02:46.610 --> 00:02:46.620
declare one of those fancy threading
 

00:02:46.620 --> 00:02:49.100
declare one of those fancy threading
primitives inside of an activity it now

00:02:49.100 --> 00:02:49.110
primitives inside of an activity it now
 

00:02:49.110 --> 00:02:51.199
primitives inside of an activity it now
contains an implicit reference to the

00:02:51.199 --> 00:02:51.209
contains an implicit reference to the
 

00:02:51.209 --> 00:02:53.930
contains an implicit reference to the
outer activity which can cause a memory

00:02:53.930 --> 00:02:53.940
outer activity which can cause a memory
 

00:02:53.940 --> 00:02:55.670
outer activity which can cause a memory
leak if the activity is destroyed but

00:02:55.670 --> 00:02:55.680
leak if the activity is destroyed but
 

00:02:55.680 --> 00:02:58.460
leak if the activity is destroyed but
the threaded work is still alive or what

00:02:58.460 --> 00:02:58.470
the threaded work is still alive or what
 

00:02:58.470 --> 00:03:00.500
the threaded work is still alive or what
happens when the user rotates the device

00:03:00.500 --> 00:03:00.510
happens when the user rotates the device
 

00:03:00.510 --> 00:03:02.780
happens when the user rotates the device
destroying an activity that spawned a

00:03:02.780 --> 00:03:02.790
destroying an activity that spawned a
 

00:03:02.790 --> 00:03:04.580
destroying an activity that spawned a
bunch of threaded work I mean chances

00:03:04.580 --> 00:03:04.590
bunch of threaded work I mean chances
 

00:03:04.590 --> 00:03:06.229
bunch of threaded work I mean chances
are that those work packets would have

00:03:06.229 --> 00:03:06.239
are that those work packets would have
 

00:03:06.239 --> 00:03:08.030
are that those work packets would have
references back to various UI objects

00:03:08.030 --> 00:03:08.040
references back to various UI objects
 

00:03:08.040 --> 00:03:10.550
references back to various UI objects
that don't really exist anymore and the

00:03:10.550 --> 00:03:10.560
that don't really exist anymore and the
 

00:03:10.560 --> 00:03:12.080
that don't really exist anymore and the
truth is that the Android platform is

00:03:12.080 --> 00:03:12.090
truth is that the Android platform is
 

00:03:12.090 --> 00:03:14.839
truth is that the Android platform is
flooded with threads if you need a

00:03:14.839 --> 00:03:14.849
flooded with threads if you need a
 

00:03:14.849 --> 00:03:16.880
flooded with threads if you need a
reminder that grab a cyst rate capture

00:03:16.880 --> 00:03:16.890
reminder that grab a cyst rate capture
 

00:03:16.890 --> 00:03:18.500
reminder that grab a cyst rate capture
and check out all the cool stuff that's

00:03:18.500 --> 00:03:18.510
and check out all the cool stuff that's
 

00:03:18.510 --> 00:03:19.729
and check out all the cool stuff that's
going on underneath the hood that you

00:03:19.729 --> 00:03:19.739
going on underneath the hood that you
 

00:03:19.739 --> 00:03:21.710
going on underneath the hood that you
never really knew about see at the end

00:03:21.710 --> 00:03:21.720
never really knew about see at the end
 

00:03:21.720 --> 00:03:23.479
never really knew about see at the end
of the day threading is critical to

00:03:23.479 --> 00:03:23.489
of the day threading is critical to
 

00:03:23.489 --> 00:03:25.309
of the day threading is critical to
ensure high performance of your Android

00:03:25.309 --> 00:03:25.319
ensure high performance of your Android
 

00:03:25.319 --> 00:03:26.990
ensure high performance of your Android
app but there's lots of other problems

00:03:26.990 --> 00:03:27.000
app but there's lots of other problems
 

00:03:27.000 --> 00:03:28.490
app but there's lots of other problems
that you have to worry about as well

00:03:28.490 --> 00:03:28.500
that you have to worry about as well
 

00:03:28.500 --> 00:03:29.809
that you have to worry about as well
which is why you should check out the

00:03:29.809 --> 00:03:29.819
which is why you should check out the
 

00:03:29.819 --> 00:03:31.130
which is why you should check out the
rest of the Android performance patterns

00:03:31.130 --> 00:03:31.140
rest of the Android performance patterns
 

00:03:31.140 --> 00:03:33.320
rest of the Android performance patterns
videos and also don't forget to join our

00:03:33.320 --> 00:03:33.330
videos and also don't forget to join our
 

00:03:33.330 --> 00:03:35.119
videos and also don't forget to join our
Google+ community so you can ask

00:03:35.119 --> 00:03:35.129
Google+ community so you can ask
 

00:03:35.129 --> 00:03:37.699
Google+ community so you can ask
questions when you run into problems so

00:03:37.699 --> 00:03:37.709
questions when you run into problems so
 

00:03:37.709 --> 00:03:39.500
questions when you run into problems so
keep calm profile your code and always

00:03:39.500 --> 00:03:39.510
keep calm profile your code and always
 

00:03:39.510 --> 00:03:42.709
keep calm profile your code and always
remember perf matters

