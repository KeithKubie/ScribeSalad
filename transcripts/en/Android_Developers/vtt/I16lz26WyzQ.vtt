WEBVTT
Kind: captions
Language: en

00:00:02.249 --> 00:00:04.540
COLT MCANLIS: Autoboxing is
one of those weird patterns

00:00:04.540 --> 00:00:05.710
in your application.

00:00:05.710 --> 00:00:07.790
Sometimes it's not really
a performance problem.

00:00:07.790 --> 00:00:10.390
But when it is, wow, does
it chew through your memory

00:00:10.390 --> 00:00:11.162
and performance.

00:00:11.162 --> 00:00:13.620
My name is Colt McAnlis, and
thanks to the Android Runtime,

00:00:13.620 --> 00:00:15.990
you can avoid one of the
largest causes of autoboxing

00:00:15.990 --> 00:00:18.430
issues-- HashMap containers.

00:00:18.430 --> 00:00:21.190
Now, autoboxing is a process
where the Runtime automatically

00:00:21.190 --> 00:00:24.161
converts a primitive type to
its corresponding generic object

00:00:24.161 --> 00:00:24.660
type.

00:00:24.660 --> 00:00:26.920
But this is bad for two reasons.

00:00:26.920 --> 00:00:28.590
Firstly is that
autoboxing will generate

00:00:28.590 --> 00:00:30.350
an allocation of
an integer object

00:00:30.350 --> 00:00:32.220
for any type of
conversion it uses.

00:00:32.220 --> 00:00:36.130
And secondly, these generic
objects are larger in size

00:00:36.130 --> 00:00:38.460
than their primitive
counterparts-- 16 bytes

00:00:38.460 --> 00:00:41.450
for an integer object rather
than 4 for a primitive,

00:00:41.450 --> 00:00:43.470
meaning not only are
they allocating objects,

00:00:43.470 --> 00:00:46.550
but those objects are much
larger than they need to be.

00:00:46.550 --> 00:00:48.590
Now, typically this
isn't a big problem

00:00:48.590 --> 00:00:49.850
for your average computation.

00:00:49.850 --> 00:00:51.350
But where it really
gets you is when

00:00:51.350 --> 00:00:54.130
dealing with generic
containers like HashMap.

00:00:54.130 --> 00:00:57.050
See, when using primitive
types, like int, float,

00:00:57.050 --> 00:01:01.040
and Bool, HashMap has to
use the object versions.

00:01:01.040 --> 00:01:03.820
So instead of being able
to use a simple 32-bit int,

00:01:03.820 --> 00:01:06.620
a HashMap is forced to use
generic integer objects, which,

00:01:06.620 --> 00:01:08.122
of course, eat up more memory.

00:01:08.122 --> 00:01:10.330
And you need to be careful
here, because any time you

00:01:10.330 --> 00:01:12.840
fetch a primitive from
a generic container,

00:01:12.840 --> 00:01:14.750
autoboxing happens
there as well.

00:01:14.750 --> 00:01:16.870
Now, memory matters to Android.

00:01:16.870 --> 00:01:18.640
And to save space,
the Android Runtime

00:01:18.640 --> 00:01:21.440
provides a whole family of
generic containers built

00:01:21.440 --> 00:01:24.120
specifically to provide the
functionality of the HashMap

00:01:24.120 --> 00:01:27.010
but allow you to use primitives
and avoid autoboxing.

00:01:27.010 --> 00:01:29.254
Welcome to the
sparse array family.

00:01:29.254 --> 00:01:31.920
Sparse arrays are basically like
a ArrayMaps in that they reduce

00:01:31.920 --> 00:01:35.160
the overall memory footprint
by using two tightly packed

00:01:35.160 --> 00:01:37.790
arrays rather than one
large one for hashing.

00:01:37.790 --> 00:01:40.470
But it also comes with some
overhead for fetching objects.

00:01:40.470 --> 00:01:42.740
So they're really only
useful for containers

00:01:42.740 --> 00:01:46.000
with hundreds of objects rather
than thousands or millions.

00:01:46.000 --> 00:01:48.310
The main difference between
sparse arrays and ArrayMaps

00:01:48.310 --> 00:01:51.300
is that for sparse arrays,
the key object is always

00:01:51.300 --> 00:01:54.040
a defined primitive type
rather than a generic,

00:01:54.040 --> 00:01:56.750
allowing you to save memory
and avoid autoboxing.

00:01:56.750 --> 00:01:59.400
But in reality, the
differences stop there.

00:01:59.400 --> 00:02:01.450
Like ArrayMaps, you
can also iterate over

00:02:01.450 --> 00:02:04.420
sparse arrays using indexing
rather than the iterator

00:02:04.420 --> 00:02:06.560
pattern, which is
required by HashMaps

00:02:06.560 --> 00:02:10.090
and is also significantly slower
and takes up more memory to do.

00:02:10.090 --> 00:02:12.290
And also like
ArrayMaps, it's not

00:02:12.290 --> 00:02:15.270
wise to use these optimized
sparse array family containers

00:02:15.270 --> 00:02:16.560
in every single case.

00:02:16.560 --> 00:02:18.340
But there are some
perfect situations

00:02:18.340 --> 00:02:19.960
which you should consider.

00:02:19.960 --> 00:02:23.120
Number one, situations where you
have a small number of items,

00:02:23.120 --> 00:02:26.530
in the hundreds, of lots of
accesses, or the accesses

00:02:26.530 --> 00:02:29.390
themselves are infrequent enough
that the overhead for a fetch

00:02:29.390 --> 00:02:30.580
isn't noticed.

00:02:30.580 --> 00:02:34.460
And number two, situations where
we have containers of maps.

00:02:34.460 --> 00:02:37.980
Often it's a map of a map a
map, where the submaps as you

00:02:37.980 --> 00:02:39.990
get farther in that
stack tend to have

00:02:39.990 --> 00:02:41.790
smaller number of items.

00:02:41.790 --> 00:02:43.830
And we also end up
iterating over those submaps

00:02:43.830 --> 00:02:45.470
a large number of times.

00:02:45.470 --> 00:02:48.286
If your use cases don't fall
into either of those two

00:02:48.286 --> 00:02:49.910
buckets, then it
might be best to stick

00:02:49.910 --> 00:02:51.510
with the HashMap
class instead of one

00:02:51.510 --> 00:02:53.860
of these fancy, awesome
alternatives, which highlights

00:02:53.860 --> 00:02:55.520
a very interesting point.

00:02:55.520 --> 00:02:57.650
Optimizing performance
is a constant tradeoff

00:02:57.650 --> 00:03:00.560
of finding the right container
for the right usage pattern

00:03:00.560 --> 00:03:02.290
for the right memory cases.

00:03:02.290 --> 00:03:04.360
As someone said, there's
no silver bullet,

00:03:04.360 --> 00:03:06.430
which is why you need to check
out the rest of the Android

00:03:06.430 --> 00:03:08.596
Performance Patterns content
to get more information

00:03:08.596 --> 00:03:09.930
about these types of tradeoffs.

00:03:09.930 --> 00:03:12.910
And don't forget to join our
Google+ community as well

00:03:12.910 --> 00:03:15.350
to hear war stories
from other developers.

00:03:15.350 --> 00:03:18.300
So keep calm, profile your
code, and always remember,

00:03:18.300 --> 00:03:20.100
perf matters.

