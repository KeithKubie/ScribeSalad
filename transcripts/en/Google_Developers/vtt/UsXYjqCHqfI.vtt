WEBVTT
Kind: captions
Language: en

00:00:04.630 --> 00:00:08.330
MODERATOR: So if you have a
live question, that's the mic.

00:00:08.330 --> 00:00:09.750
The floor is open.

00:00:09.750 --> 00:00:14.190
So the first question
from Eric in Portland,

00:00:14.190 --> 00:00:16.950
how does Polymer stack up
with other Web Component

00:00:16.950 --> 00:00:19.870
implementations in
terms of performance?

00:00:19.870 --> 00:00:20.882
[INAUDIBLE]

00:00:20.882 --> 00:00:22.340
ALEX KOMOROSKE: So
I can take that.

00:00:22.340 --> 00:00:23.370
My name is almost
Alex Komoroske.

00:00:23.370 --> 00:00:24.411
I didn't present tonight.

00:00:24.411 --> 00:00:27.420
I'm a product manager
working on Polymer and Blink.

00:00:27.420 --> 00:00:29.930
So one of the important things
to think about with Polymer

00:00:29.930 --> 00:00:32.290
is this is a framework
for the future.

00:00:32.290 --> 00:00:34.270
This is a library
for the future.

00:00:34.270 --> 00:00:38.170
And so as browsers ship
these web component standards

00:00:38.170 --> 00:00:40.500
natively, it will just
automatically speed up.

00:00:40.500 --> 00:00:43.680
So Chrome has many of
the pieces shipping,

00:00:43.680 --> 00:00:47.830
and we hope that HTMLImports
will make into M36.

00:00:47.830 --> 00:00:49.910
And so our goal in
browsers that don't

00:00:49.910 --> 00:00:52.140
get support the Web
Components' emerging standards

00:00:52.140 --> 00:00:54.820
is to have performance
that's comparable to what

00:00:54.820 --> 00:00:57.220
you would get in
frameworks today.

00:00:57.220 --> 00:01:00.580
But once browsers ship these
native implementations,

00:01:00.580 --> 00:01:03.099
it just gets much, much faster.

00:01:03.099 --> 00:01:04.599
MALE SPEAKER 1:
Yeah, so performance

00:01:04.599 --> 00:01:08.294
is a really complicated topic.

00:01:08.294 --> 00:01:09.960
So it's actually a
little bit difficult,

00:01:09.960 --> 00:01:12.670
and Web Components
is a very broad term.

00:01:12.670 --> 00:01:16.080
So the question's a little
bit difficult to answer.

00:01:16.080 --> 00:01:18.090
But Polymer actually
isn't an implementation

00:01:18.090 --> 00:01:18.840
of Web Components.

00:01:18.840 --> 00:01:22.232
Web Components is a native
feature that Polymer is using.

00:01:22.232 --> 00:01:24.440
And that native feature,
because it's in the browser,

00:01:24.440 --> 00:01:27.110
should, long term,
be a better bet.

00:01:29.817 --> 00:01:31.400
MALE SPEAKER 2: So
I'll reiterate that

00:01:31.400 --> 00:01:34.050
with xtag that's maybe an
implementation of a library

00:01:34.050 --> 00:01:36.819
to make Web Components
even easier to use.

00:01:36.819 --> 00:01:38.610
One awesome thing about
that is that we all

00:01:38.610 --> 00:01:39.690
use the same polyfills.

00:01:39.690 --> 00:01:42.674
So the 80% of that
code is the same.

00:01:42.674 --> 00:01:44.090
So the performance
characteristics

00:01:44.090 --> 00:01:45.910
you'll see in xtag
or Polymer are

00:01:45.910 --> 00:01:48.030
going to be very, very alike.

00:01:48.030 --> 00:01:50.910
And I think that's something
that, when they get down

00:01:50.910 --> 00:01:53.170
to native, and most of
the library is native,

00:01:53.170 --> 00:01:55.920
and it's just that layer
that they talked about,

00:01:55.920 --> 00:01:59.377
you're not going to
see much difference.

00:01:59.377 --> 00:01:59.960
MODERATOR: OK.

00:01:59.960 --> 00:02:00.459
Great.

00:02:00.459 --> 00:02:02.900
So again, if you have a
question in the audience,

00:02:02.900 --> 00:02:04.740
just line up at
the mic and ask it.

00:02:04.740 --> 00:02:07.270
I'll take another
moderator question.

00:02:07.270 --> 00:02:13.290
So Jonathan Garby, a heavy
WebPlatform Docs contributor,

00:02:13.290 --> 00:02:16.150
is asking one of the highest
voted questions, can Polymer

00:02:16.150 --> 00:02:17.840
and the work in
progress standards

00:02:17.840 --> 00:02:20.530
is based on perform with
a small enough difference

00:02:20.530 --> 00:02:25.170
in rendering compared to
server generated pages?

00:02:25.170 --> 00:02:26.070
Again, performance.

00:02:26.070 --> 00:02:28.560
ALEX KOMOROSKE: Let me take
a stab at this one, as well.

00:02:28.560 --> 00:02:30.930
So the way I think of it
is that the WebPlatform

00:02:30.930 --> 00:02:32.340
is a series of tools.

00:02:32.340 --> 00:02:35.430
It's a series of APIs and
capabilities that you can use.

00:02:35.430 --> 00:02:37.130
What Web Components
does is it adds

00:02:37.130 --> 00:02:39.360
a number of tools on the end.

00:02:39.360 --> 00:02:41.330
But what I've found
personal and other people

00:02:41.330 --> 00:02:42.890
as they explore
using Web Components

00:02:42.890 --> 00:02:46.780
and imagining this future
is that a lot of the best

00:02:46.780 --> 00:02:49.530
practices we have found have
turned out to be local maxima.

00:02:49.530 --> 00:02:51.540
So server side
rendering is an example

00:02:51.540 --> 00:02:53.532
where it's just received
wisdom at this point

00:02:53.532 --> 00:02:55.740
that you're going to need
to do server side rendering

00:02:55.740 --> 00:02:58.237
to get really fast
initial load performance.

00:02:58.237 --> 00:02:59.820
Actually, a number
of folks internally

00:02:59.820 --> 00:03:01.810
have explored Web
Components and the future

00:03:01.810 --> 00:03:04.130
of [INAUDIBLE]
components very in depth

00:03:04.130 --> 00:03:06.740
have found that, actually, it
might be the answer that-- what

00:03:06.740 --> 00:03:08.990
you should do is cache your
component definitions very

00:03:08.990 --> 00:03:11.730
heavily client side and
pass down something that

00:03:11.730 --> 00:03:17.210
has just semantic looking
markup, inflates locally.

00:03:17.210 --> 00:03:20.240
So I think what's exciting
about all this stuff is

00:03:20.240 --> 00:03:23.120
the addition of a few
more tools on the end

00:03:23.120 --> 00:03:26.950
sometimes upsets a lot of these
best practices we've found

00:03:26.950 --> 00:03:31.169
and allows us to find a much
better place somewhere else.

00:03:31.169 --> 00:03:33.460
MALE SPEAKER 3: Also, too,
the ability with HTMLImports

00:03:33.460 --> 00:03:35.974
is we can actually change the
way we deliver applications.

00:03:35.974 --> 00:03:37.390
So you can think
about an app that

00:03:37.390 --> 00:03:38.790
has the bare bones minimum.

00:03:38.790 --> 00:03:42.310
You deliver that to the user
in a second or something.

00:03:42.310 --> 00:03:44.890
That is this thing that
need to see right away.

00:03:44.890 --> 00:03:46.990
And then using Imports,
you can effectively

00:03:46.990 --> 00:03:50.350
offload a lot of the rest of the
app and load things on demand.

00:03:50.350 --> 00:03:53.179
So it does change the
way we structure apps.

00:03:53.179 --> 00:03:55.470
The second part to this is
there's nothing stopping you

00:03:55.470 --> 00:03:59.470
from just having a server that
outputs a bunch of custom HTML

00:03:59.470 --> 00:04:01.190
markup.

00:04:01.190 --> 00:04:04.809
If you had a server that output,
like, a megabyte of HTML,

00:04:04.809 --> 00:04:06.100
you're going to have a problem.

00:04:06.100 --> 00:04:08.371
That's going to be slow.

00:04:08.371 --> 00:04:10.370
Nothing changes in the
world of custom elements.

00:04:10.370 --> 00:04:12.190
The difference is
that what happens

00:04:12.190 --> 00:04:14.337
is things get activated
on the client side.

00:04:14.337 --> 00:04:16.045
It's ultimately a
client side technology.

00:04:19.209 --> 00:04:20.566
MODERATOR: Again, questions?

00:04:20.566 --> 00:04:21.709
Just hit the mic.

00:04:21.709 --> 00:04:25.790
Does Polymer HTMLImports
implementation

00:04:25.790 --> 00:04:29.960
load imported HTML files
asynchronously like AMDjs?

00:04:29.960 --> 00:04:31.340
Just got this one.

00:04:36.050 --> 00:04:39.409
MALE SPEAKER 1: So AMD
modules and HTMLImports,

00:04:39.409 --> 00:04:41.200
which is really what
the question is about,

00:04:41.200 --> 00:04:43.400
are different things.

00:04:43.400 --> 00:04:45.300
One is about JavaScript,
and I don't actually

00:04:45.300 --> 00:04:47.120
know too much about it.

00:04:47.120 --> 00:04:50.740
And then there's HTMLImports,
which is actually HTML.

00:04:50.740 --> 00:04:53.350
That said, the underlying
technology of HTMLImports

00:04:53.350 --> 00:04:55.800
has async attribute.

00:04:55.800 --> 00:04:58.090
If you go that route,
things become very difficult

00:04:58.090 --> 00:05:01.907
very quickly, but it's
totally an option.

00:05:01.907 --> 00:05:03.490
MALE SPEAKER 2: One
bit of information

00:05:03.490 --> 00:05:06.650
I do have with this, in speaking
with Dave Herman at Mozilla,

00:05:06.650 --> 00:05:09.660
which I did frequently,
is that we're actually

00:05:09.660 --> 00:05:12.810
talking about having a module
tag, potentially, inside

00:05:12.810 --> 00:05:15.220
of HTMLImports that
will allow you--

00:05:15.220 --> 00:05:17.210
it already has
its own DAC, so it

00:05:17.210 --> 00:05:19.580
does do some
dependency resolution.

00:05:19.580 --> 00:05:21.130
But the module
tag will allow you

00:05:21.130 --> 00:05:23.800
to do things that are
very, very AMD-esque.

00:05:23.800 --> 00:05:26.320
Because, as you know,
modules coming in ES 6

00:05:26.320 --> 00:05:30.160
are essentially a
form of AMD, provide

00:05:30.160 --> 00:05:34.512
a lot of the same features, so
that's coming in HTMLImports.

00:05:34.512 --> 00:05:36.800
ALEX KOMOROSKE: So next
question was similar.

00:05:36.800 --> 00:05:38.810
Does it play well
with AMD modules?

00:05:38.810 --> 00:05:41.310
I think it's kind
of covered, but--

00:05:41.310 --> 00:05:43.790
MALE SPEAKER 3: I just want to
say, too, AMD and JavaScript

00:05:43.790 --> 00:05:46.520
modules is a technology
that loads JavaScript.

00:05:46.520 --> 00:05:50.340
With Imports, you can load
CSS, HTML, everything.

00:05:50.340 --> 00:05:53.439
It's a different way
to deliver dependencies

00:05:53.439 --> 00:05:54.730
in the world of Web Components.

00:05:54.730 --> 00:05:57.850
So it's fundamentally a
different thing to think about,

00:05:57.850 --> 00:05:59.980
but as Daniel said,
there's explorations

00:05:59.980 --> 00:06:01.722
of how to combine
these two technologies.

00:06:01.722 --> 00:06:03.930
I think when we have more
capabilities in JavaScript,

00:06:03.930 --> 00:06:07.110
like modules and classes and
all this cool stuff that we're

00:06:07.110 --> 00:06:11.589
totally promised in ES 6 and
7 and 8 and 9 and 10, 11,

00:06:11.589 --> 00:06:13.880
we'll eventually be able to
combine a lot of the stuff.

00:06:13.880 --> 00:06:16.592
And everything is actually--
at the lowest levels--

00:06:16.592 --> 00:06:17.550
has been thought about.

00:06:17.550 --> 00:06:18.790
I promise you.

00:06:18.790 --> 00:06:20.690
People are actually
exploring different ways

00:06:20.690 --> 00:06:23.819
to-- what does implementing
ES 6 classes look

00:06:23.819 --> 00:06:25.360
like in the world
of custom elements?

00:06:25.360 --> 00:06:26.853
That is something that
started from day one

00:06:26.853 --> 00:06:27.830
and has been going on.

00:06:27.830 --> 00:06:29.004
The conversations are there.

00:06:29.004 --> 00:06:29.670
MODERATOR: Cool.

00:06:29.670 --> 00:06:30.169
All right.

00:06:30.169 --> 00:06:32.310
Let's take an audience question.

00:06:32.310 --> 00:06:32.930
AUDIENCE: Hi.

00:06:32.930 --> 00:06:33.710
My name is Philip.

00:06:33.710 --> 00:06:34.490
I have a question.

00:06:34.490 --> 00:06:38.430
So-- microphone beeping.

00:06:38.430 --> 00:06:38.930
OK.

00:06:41.840 --> 00:06:44.516
I think we need
to pull this here.

00:06:44.516 --> 00:06:47.370
Is that better?

00:06:47.370 --> 00:06:49.429
I think I have to
talk really quietly.

00:06:49.429 --> 00:06:50.970
MODERATOR: We'll
repeat the question.

00:06:50.970 --> 00:06:54.360
AUDIENCE: How does a
library like Polymer--

00:06:54.360 --> 00:06:56.910
how does it interact with
existing model view controller

00:06:56.910 --> 00:06:57.520
frameworks?

00:06:57.520 --> 00:06:59.990
If I'm already using
Backbone or Angular,

00:06:59.990 --> 00:07:02.740
how can I use Web Components?

00:07:02.740 --> 00:07:05.950
Because it seems to do a lot
of things that those frameworks

00:07:05.950 --> 00:07:06.450
do now.

00:07:06.450 --> 00:07:11.980
I actually felt a bit weird
when you used that tag

00:07:11.980 --> 00:07:14.320
to pull in data from a
server because usually you

00:07:14.320 --> 00:07:17.600
would do that through a model.

00:07:17.600 --> 00:07:21.190
How do you see that
working in the future?

00:07:21.190 --> 00:07:23.330
MODERATOR: Can you maybe
repeat the question?

00:07:23.330 --> 00:07:26.180
How does it work with
other client libraries?

00:07:26.180 --> 00:07:29.414
Backbone and so on.

00:07:29.414 --> 00:07:31.080
MALE SPEAKER 3: You
covered this, right?

00:07:31.080 --> 00:07:32.538
MALE SPEAKER 1:
I'm having trouble.

00:07:34.880 --> 00:07:35.380
OK.

00:07:35.380 --> 00:07:38.220
I'm getting all the hard ones.

00:07:38.220 --> 00:07:42.740
So, like I said,
Polymer integrates

00:07:42.740 --> 00:07:45.060
with existing technologies
relatively well

00:07:45.060 --> 00:07:48.080
if they're just
using the elements.

00:07:48.080 --> 00:07:53.480
And where else should
I go with that?

00:07:58.455 --> 00:07:59.330
MAKE SPEAKER 4: Yeah.

00:07:59.330 --> 00:08:02.305
So one thing to point out
is that Polymer elements

00:08:02.305 --> 00:08:03.680
and these MVC
frameworks, they're

00:08:03.680 --> 00:08:06.530
not mutually exclusive
by any means.

00:08:06.530 --> 00:08:08.250
They do work together.

00:08:08.250 --> 00:08:09.800
And there's lots
of different ways

00:08:09.800 --> 00:08:12.020
that you can build
your application.

00:08:12.020 --> 00:08:15.415
So we're not trying to say,
hey, always use Core AJAX.

00:08:15.415 --> 00:08:17.012
It's just a thing
that we created.

00:08:17.012 --> 00:08:18.220
We think it's really awesome.

00:08:18.220 --> 00:08:20.030
We think it's a nice
way to work with AJAX.

00:08:20.030 --> 00:08:21.710
But it's up to you
guys how you want

00:08:21.710 --> 00:08:23.210
to actually build
your applications.

00:08:23.210 --> 00:08:25.890
So if you want to leverage
it, by all means, please do.

00:08:25.890 --> 00:08:29.124
But there's lots of ways
to skin that cat, I think.

00:08:31.809 --> 00:08:33.809
MODERATOR: Let's take
another audience question.

00:08:36.145 --> 00:08:36.770
AUDIENCE: Yeah.

00:08:36.770 --> 00:08:38.990
I have two quick questions.

00:08:38.990 --> 00:08:41.740
So the first one-- there's
a bunch of imports up there,

00:08:41.740 --> 00:08:43.970
and I think everyone's
thinking the same thing.

00:08:43.970 --> 00:08:45.800
It's a bunch of HTTP requests.

00:08:45.800 --> 00:08:47.715
What is the current
state of bundling

00:08:47.715 --> 00:08:49.840
these all together so you
can get it on to one HTTP

00:08:49.840 --> 00:08:52.360
request while
preserving encapsulation

00:08:52.360 --> 00:08:53.670
and all that stuff?

00:08:53.670 --> 00:08:56.660
The second question is, there
was a great demo, an xtag demo,

00:08:56.660 --> 00:09:00.280
of an auto sizing
text area element.

00:09:00.280 --> 00:09:03.040
Can that currently be
submitted with a form?

00:09:03.040 --> 00:09:04.950
Like the value attribute
of that element,

00:09:04.950 --> 00:09:08.570
does the native form browser
element know to extract that?

00:09:08.570 --> 00:09:10.260
Like, you can extend
a native element,

00:09:10.260 --> 00:09:12.890
but does it go the other way
where you can-- because it's

00:09:12.890 --> 00:09:15.740
being extended from a text
area, does the form element

00:09:15.740 --> 00:09:17.820
know to get the value
when submitting the form?

00:09:21.729 --> 00:09:22.770
MALE SPEAKER 2: So, yeah.

00:09:22.770 --> 00:09:25.341
In xtag we support-- there's
actually two definitions.

00:09:25.341 --> 00:09:27.590
I don't know if we went over
this is any of the talks.

00:09:27.590 --> 00:09:30.670
When you use an element that
inherits from a native element,

00:09:30.670 --> 00:09:33.972
there's the is equals
syntax, the is attribute.

00:09:33.972 --> 00:09:35.680
So if you had a text
area, you could say,

00:09:35.680 --> 00:09:39.340
text area is your tag and
then is equal super text area.

00:09:39.340 --> 00:09:41.870
In that case, you would be
able to use the same prototype,

00:09:41.870 --> 00:09:44.810
and, inherently, a value
from an input or something

00:09:44.810 --> 00:09:47.020
like that would actually
post to the form it's in.

00:09:47.020 --> 00:09:48.484
So that's all baked in.

00:09:48.484 --> 00:09:50.900
And some people even like to
use their own text area input

00:09:50.900 --> 00:09:53.120
inside of an actual
custom element name.

00:09:53.120 --> 00:09:55.010
So either way, you get that.

00:09:55.010 --> 00:09:56.885
MALE SPEAKER 1: So back
to the first question

00:09:56.885 --> 00:10:01.044
on how to optimize for a
limited number of requests.

00:10:01.044 --> 00:10:01.710
So a few things.

00:10:01.710 --> 00:10:03.918
One, this is one of those
classic cases where Polymer

00:10:03.918 --> 00:10:06.789
is not taking away any
of your current toys.

00:10:06.789 --> 00:10:08.580
So it just works like
everything else does.

00:10:08.580 --> 00:10:11.400
You can actually pass it
through those parsers.

00:10:11.400 --> 00:10:14.100
That said, we also have a tool
called Vulcanizer, which we're

00:10:14.100 --> 00:10:18.170
writing, which is out there
today and has documentation

00:10:18.170 --> 00:10:20.550
specifically that knows how
to deal with Polymer elements

00:10:20.550 --> 00:10:23.510
and can combine them into a
single CSS file, single JS

00:10:23.510 --> 00:10:27.130
file, and single HTML file, and
can optionally pull out the JS

00:10:27.130 --> 00:10:29.487
into an external file
for CSP environments.

00:10:29.487 --> 00:10:31.820
So we're working on the
tooling, but it shouldn't really

00:10:31.820 --> 00:10:33.292
break the current tools anyway.

00:10:33.292 --> 00:10:35.000
MALE SPEAKER 3: I just
want to reiterate.

00:10:35.000 --> 00:10:36.420
This is a really
important point.

00:10:36.420 --> 00:10:38.600
Like the web development
best practices

00:10:38.600 --> 00:10:40.740
don't change in the
world of Web Components.

00:10:40.740 --> 00:10:43.440
So what you didn't see
tonight was the ability to--

00:10:43.440 --> 00:10:46.000
instead of having your script
tag in line in your element,

00:10:46.000 --> 00:10:48.220
you can totally reference
an external script.

00:10:48.220 --> 00:10:49.830
Instead of having
your style sheets

00:10:49.830 --> 00:10:51.684
in line in a style
tag in your element,

00:10:51.684 --> 00:10:53.350
you can totally
reference a style sheet.

00:10:53.350 --> 00:10:55.141
So this is great because
you can use things

00:10:55.141 --> 00:10:56.960
like minifiers, grunt tasks.

00:10:56.960 --> 00:11:00.210
You can write your elements in
CoffeeScript, for all we care.

00:11:00.210 --> 00:11:02.890
It's about you and
your productivity,

00:11:02.890 --> 00:11:05.460
and it doesn't really change
the way we develop it.

00:11:05.460 --> 00:11:09.860
Kind of just changes the way
you think about building apps.

00:11:09.860 --> 00:11:12.300
MODERATOR: So I'm going
to take a quick lightning

00:11:12.300 --> 00:11:12.990
question here.

00:11:12.990 --> 00:11:16.380
Are there plans to support
IE8 9, 10 Android browser?

00:11:16.380 --> 00:11:17.297
Quick answer?

00:11:17.297 --> 00:11:18.130
MALE SPEAKER 1: Yep.

00:11:18.130 --> 00:11:19.380
So IE 10 is supported.

00:11:19.380 --> 00:11:22.320
So Polymer-- we didn't
do this particularly

00:11:22.320 --> 00:11:24.320
well in the presentations,
but the last two

00:11:24.320 --> 00:11:27.820
versions of every major
browser are supported.

00:11:27.820 --> 00:11:30.544
so IE 8 and IE 9 are
not included in that.

00:11:30.544 --> 00:11:32.710
And then the other exception
is the Android browser,

00:11:32.710 --> 00:11:34.290
which is also not
included in that.

00:11:34.290 --> 00:11:36.999
So that's a relatively
straightforward one.

00:11:36.999 --> 00:11:38.457
MALE SPEAKER 2: So
one note on that

00:11:38.457 --> 00:11:41.550
is IE actually had a hook
that would-- when I was doing

00:11:41.550 --> 00:11:43.190
the polyfill, we
had split polyfill--

00:11:43.190 --> 00:11:46.468
that's when they agreed to
merge and use the same one.

00:11:46.468 --> 00:11:48.176
You would be able to
do it if they hadn't

00:11:48.176 --> 00:11:52.390
have got rid of HTC files
and CSS behaviors in IE8.

00:11:52.390 --> 00:11:55.280
Oddly enough, it's like this
skip ground where it's up to 7,

00:11:55.280 --> 00:11:57.860
they skip it in 8, and then 9
has all these affordances that

00:11:57.860 --> 00:11:59.030
are standard web.

00:11:59.030 --> 00:12:01.855
So it's kind of not possible.

00:12:01.855 --> 00:12:02.730
MODERATOR: All right.

00:12:02.730 --> 00:12:04.960
So, audience question.

00:12:04.960 --> 00:12:08.910
AUDIENCE: So going
back to performance,

00:12:08.910 --> 00:12:11.440
I just see that
people put together

00:12:11.440 --> 00:12:13.126
a bunch of components
on the page

00:12:13.126 --> 00:12:14.250
because it's nice and easy.

00:12:14.250 --> 00:12:16.520
And maybe you have 20
of them, and they all

00:12:16.520 --> 00:12:19.490
include 20 different
copies of jQuery,

00:12:19.490 --> 00:12:21.660
and they're all maybe
different versions

00:12:21.660 --> 00:12:24.680
of jQuery, all on
that same page.

00:12:24.680 --> 00:12:27.160
So how do we deal with that?

00:12:27.160 --> 00:12:30.530
MALE SPEAKER 1: So HTMLImports
have a de-duping future.

00:12:30.530 --> 00:12:33.644
It's currently based
off of the absolute URL.

00:12:33.644 --> 00:12:35.060
So if you have
different versions,

00:12:35.060 --> 00:12:36.522
or they come from
different CDNs,

00:12:36.522 --> 00:12:37.730
that's going to be a problem.

00:12:37.730 --> 00:12:39.250
There's already a bunch
of work in the spec

00:12:39.250 --> 00:12:40.750
to try and address
that, as well,

00:12:40.750 --> 00:12:43.647
and do it relatively quickly.

00:12:43.647 --> 00:12:45.480
That said, there's
nothing that prevents you

00:12:45.480 --> 00:12:47.420
from doing that
today on the web.

00:12:47.420 --> 00:12:51.030
So there are certain-- making
something very, very easy

00:12:51.030 --> 00:12:53.030
allows you also make
mistakes very, very easily,

00:12:53.030 --> 00:12:54.321
and I'll totally admit to that.

00:12:56.740 --> 00:13:01.040
But for the most part, it's not
it's not an additional problem.

00:13:01.040 --> 00:13:04.060
That said, the ability
of HTMLImports to de-dupe

00:13:04.060 --> 00:13:06.430
is pretty awesome.

00:13:06.430 --> 00:13:08.890
If we can get it to do
it in other aspects,

00:13:08.890 --> 00:13:10.362
that would be great, too.

00:13:10.362 --> 00:13:12.612
And if you're including,
like, five versions of jQuery

00:13:12.612 --> 00:13:16.370
on your page, you're
probably in trouble, anyway.

00:13:16.370 --> 00:13:17.210
MODERATOR: Cool.

00:13:17.210 --> 00:13:18.450
Take a quick question here.

00:13:18.450 --> 00:13:21.629
Will AngularJS and Polymer
merge in the future?

00:13:21.629 --> 00:13:22.420
ALEX KOMOROSKE: OK.

00:13:22.420 --> 00:13:24.180
I'll take that one.

00:13:24.180 --> 00:13:26.235
So I think Angular is
a great example of one

00:13:26.235 --> 00:13:27.610
of the frameworks
of today that's

00:13:27.610 --> 00:13:29.620
done an amazing job of
building a very, very

00:13:29.620 --> 00:13:30.850
effective framework.

00:13:30.850 --> 00:13:32.120
One thing that's
important to remember--

00:13:32.120 --> 00:13:33.870
and I think Matt hit
on this in his talk--

00:13:33.870 --> 00:13:36.190
is that, with Web
Components, the world

00:13:36.190 --> 00:13:37.432
is a very different place.

00:13:37.432 --> 00:13:39.640
So things that were created
before the Web Components

00:13:39.640 --> 00:13:42.170
revolution may have
to rethink some

00:13:42.170 --> 00:13:45.192
of things in this new world.

00:13:45.192 --> 00:13:46.650
So Polymer is a
great example where

00:13:46.650 --> 00:13:49.910
it's been born in this new
world, assuming Web Components

00:13:49.910 --> 00:13:51.730
and being able to
design for that.

00:13:51.730 --> 00:13:55.022
I think it's really exciting
to watch the Angular team

00:13:55.022 --> 00:13:56.480
talk about using
things like Shadow

00:13:56.480 --> 00:13:59.075
DOM and other aspects
of Web Components.

00:13:59.075 --> 00:14:01.700
And I imagine that, over time,
a number of different frameworks

00:14:01.700 --> 00:14:07.088
will start embracing this
Web Components revolution.

00:14:07.088 --> 00:14:09.777
And Ember, as well,
as Daniel points out.

00:14:09.777 --> 00:14:10.360
MODERATOR: OK.

00:14:10.360 --> 00:14:12.399
We'll take an audience question.

00:14:12.399 --> 00:14:12.940
AUDIENCE: Hi.

00:14:12.940 --> 00:14:14.580
Thanks for doing this.

00:14:14.580 --> 00:14:16.880
What kind of testing
strategy would you recommend?

00:14:25.772 --> 00:14:27.230
ALEX KOMOROSKE: So
we have actually

00:14:27.230 --> 00:14:30.140
the engineer who's built
out testing structure here,

00:14:30.140 --> 00:14:32.786
Daniel, who's one of
the Polymer engineers.

00:14:32.786 --> 00:14:35.700
DANIEL: I had my
backpack on, ready to go.

00:14:35.700 --> 00:14:36.670
So I'm Daniel.

00:14:36.670 --> 00:14:39.050
I work on the Polymer team.

00:14:39.050 --> 00:14:41.270
How we've been testing
our elements so far

00:14:41.270 --> 00:14:42.910
is we've been using
Mocha and Chai

00:14:42.910 --> 00:14:48.270
and just doing regular tester
and development style tests.

00:14:48.270 --> 00:14:52.280
We find that, for the
most part, what we

00:14:52.280 --> 00:14:56.080
write is a UI for our elements.

00:14:56.080 --> 00:15:00.380
And you can write tests
for, like, [INAUDIBLE] style

00:15:00.380 --> 00:15:04.310
and see that your elements
got the styling correctly,

00:15:04.310 --> 00:15:07.000
but we really don't
have a good story for,

00:15:07.000 --> 00:15:10.740
like, oh, I changed this
one little thing here.

00:15:10.740 --> 00:15:13.530
How different is
it on the screen?

00:15:13.530 --> 00:15:15.412
We really maybe need
some sort of-- it

00:15:15.412 --> 00:15:17.370
would be great if we had
some sort of trimmings

00:15:17.370 --> 00:15:20.900
on the platform that
compared screenshots,

00:15:20.900 --> 00:15:24.810
perhaps, of elements
as we built on.

00:15:24.810 --> 00:15:30.130
But, so far, it's just
your standard test.

00:15:30.130 --> 00:15:32.300
Oh, yeah.

00:15:32.300 --> 00:15:35.770
To be able to actually test
some elements in a real browser

00:15:35.770 --> 00:15:39.950
environment, a
member of our team

00:15:39.950 --> 00:15:44.010
wrote a plugin to Mocha
that spins up iframes

00:15:44.010 --> 00:15:49.700
so we can run our tests,
launch browsers with Karma,

00:15:49.700 --> 00:15:54.990
and put our elements
in pages, make sure

00:15:54.990 --> 00:15:59.790
that they are--
individually, they

00:15:59.790 --> 00:16:01.740
run without colliding
with each other

00:16:01.740 --> 00:16:02.970
by putting them in iframes.

00:16:02.970 --> 00:16:05.120
And it's a little
slow because iframes

00:16:05.120 --> 00:16:07.710
aren't super quick to spin up,
but we can run our full test

00:16:07.710 --> 00:16:10.270
suite in about five minutes.

00:16:10.270 --> 00:16:13.840
And it's not the
end of the world.

00:16:13.840 --> 00:16:15.550
And it would be
really great if we

00:16:15.550 --> 00:16:17.390
had more printers
in the platform

00:16:17.390 --> 00:16:21.160
for all the Blink
engineers watching.

00:16:21.160 --> 00:16:24.120
MALE SPEAKER 2: So
some other person

00:16:24.120 --> 00:16:26.920
wrote this, like a back
end guy, so I can't really

00:16:26.920 --> 00:16:29.280
speak to the detail,
but I know we

00:16:29.280 --> 00:16:32.310
have tests in xtags that
do Slammer and WebDriver

00:16:32.310 --> 00:16:35.820
over Sauce Labs and do
actually take a screen shot.

00:16:35.820 --> 00:16:37.320
I don't know how
extensible that is,

00:16:37.320 --> 00:16:40.340
so if you check the repository,
maybe it works really easily.

00:16:40.340 --> 00:16:41.160
Maybe it doesn't.

00:16:41.160 --> 00:16:42.076
I can't speak to that.

00:16:42.076 --> 00:16:45.805
But it is one way that
we try to do GUI testing.

00:16:45.805 --> 00:16:46.680
MODERATOR: All right.

00:16:46.680 --> 00:16:49.640
So we've got three
final audience questions

00:16:49.640 --> 00:16:53.480
if they can be short and sweet.

00:16:53.480 --> 00:16:57.380
AUDIENCE: How do you handle
testing of accessibility

00:16:57.380 --> 00:16:58.260
for Web Components?

00:17:01.112 --> 00:17:02.320
MODERATOR: Don't go anywhere.

00:17:09.270 --> 00:17:13.020
DANIEL: So I do mostly
accessibility testing

00:17:13.020 --> 00:17:14.880
as it is right now.

00:17:14.880 --> 00:17:18.089
I also work with some
members of the Chrome team

00:17:18.089 --> 00:17:21.780
who are in the accessibility
working groups,

00:17:21.780 --> 00:17:28.631
like the ARIA spec and the
platform something something--

00:17:28.631 --> 00:17:30.130
the one that talks
to screen readers

00:17:30.130 --> 00:17:34.220
and those people who
implement screen readers.

00:17:34.220 --> 00:17:38.740
So the good news is that,
even with a Shadow DOM

00:17:38.740 --> 00:17:41.770
scoping mechanism, screen
readers general support that.

00:17:41.770 --> 00:17:47.750
The ARIA spec allows
for-- actually,

00:17:47.750 --> 00:17:51.740
if you were to open Chrome
and turn on the flag that

00:17:51.740 --> 00:17:56.150
says show user [INAUDIBLE]
Shadow DOMs, which shows you

00:17:56.150 --> 00:17:58.980
how native elements are
built, if you open up,

00:17:58.980 --> 00:18:01.880
like, an input
for date time, you

00:18:01.880 --> 00:18:05.110
can see that all of the
native widgets in Chrome

00:18:05.110 --> 00:18:09.140
actually use accessibility
features of ARIA. so you can

00:18:09.140 --> 00:18:12.370
see that they are, like,
role for a calendar,

00:18:12.370 --> 00:18:15.270
and they say what
their controls are.

00:18:15.270 --> 00:18:19.720
So that's already working today.

00:18:19.720 --> 00:18:24.990
And then when we test-- a very
nice member of the Chrome team

00:18:24.990 --> 00:18:32.440
just finished wrapping up the
Accessibility Developer toolkit

00:18:32.440 --> 00:18:33.540
extension for Chrome.

00:18:33.540 --> 00:18:38.580
So you can run audits
on your elements that

00:18:38.580 --> 00:18:41.370
run against the full
ARIA test suite.

00:18:41.370 --> 00:18:47.130
So we've just started using
that and the elements we

00:18:47.130 --> 00:18:50.420
work on-- I go
through a manual pass

00:18:50.420 --> 00:18:52.880
right now of just making sure
they've got the proper roles

00:18:52.880 --> 00:18:55.560
and they look good
in a screen reader.

00:18:55.560 --> 00:18:58.507
But as soon as everybody
can start implementing that.

00:18:58.507 --> 00:18:59.090
MODERATOR: OK.

00:18:59.090 --> 00:19:03.495
Final two quick questions
and quick answers.

00:19:03.495 --> 00:19:04.870
AUDIENCE: Question
will be quick.

00:19:04.870 --> 00:19:06.140
I don't know about the answer.

00:19:06.140 --> 00:19:08.760
This is more of a
philosophic question.

00:19:08.760 --> 00:19:11.640
I know it's early days for
Polymer and especially Web

00:19:11.640 --> 00:19:12.620
Components.

00:19:12.620 --> 00:19:15.410
Where do you guys,
collectively or individually,

00:19:15.410 --> 00:19:19.640
see for Web Components going
in terms of standardization

00:19:19.640 --> 00:19:22.550
and specifically
for editorializing

00:19:22.550 --> 00:19:25.070
in terms of central
repository, or kind of

00:19:25.070 --> 00:19:29.660
let community decide what's
going to be the ultimate way

00:19:29.660 --> 00:19:31.540
to find things
and detect things?

00:19:31.540 --> 00:19:35.283
Is the more the Ruby model
that's, like, wild, wild west,

00:19:35.283 --> 00:19:39.807
or the Python sort of everything
comes from CPAN kind of--

00:19:39.807 --> 00:19:41.890
ALEX KOMOROSKE: I think
there's two parts to that.

00:19:41.890 --> 00:19:43.620
On the standardization
side for the specs

00:19:43.620 --> 00:19:47.960
for the Web Components platform
APIs like custom elements

00:19:47.960 --> 00:19:50.764
and Shadow DOM, those
have been going on in W3C

00:19:50.764 --> 00:19:51.680
for a number of years.

00:19:51.680 --> 00:19:53.990
I think they're going very well.

00:19:53.990 --> 00:19:55.600
On the other front,
for the community

00:19:55.600 --> 00:19:57.590
of how people talk
about Web Components,

00:19:57.590 --> 00:19:59.036
I was really encouraged
by the works I know

00:19:59.036 --> 00:20:00.520
and others have been
doing on Web Components

00:20:00.520 --> 00:20:01.460
at [INAUDIBLE], in particular.

00:20:01.460 --> 00:20:03.220
I think that's a
really good first step.

00:20:03.220 --> 00:20:07.020
It's a good place for component
authors and framework authors

00:20:07.020 --> 00:20:09.840
to share their best
practices, to try

00:20:09.840 --> 00:20:12.880
to come to terms on exactly
how they work so that they

00:20:12.880 --> 00:20:14.097
can be used interoperably.

00:20:14.097 --> 00:20:15.680
And I imagine that
something like that

00:20:15.680 --> 00:20:19.582
could grow over time to be a
place that developers could

00:20:19.582 --> 00:20:21.040
go to find Web
Components, as well.

00:20:21.040 --> 00:20:25.855
I think Jan, as well, has
shown with what he showed off

00:20:25.855 --> 00:20:27.730
that there'll be a number
of different places

00:20:27.730 --> 00:20:28.660
to find these things.

00:20:28.660 --> 00:20:31.240
I think that will be really
healthy for the ecosystem.

00:20:31.240 --> 00:20:33.573
MALE SPEAKER 2: So I've
actually been talking with Addy.

00:20:33.573 --> 00:20:35.720
I don't know if
you know the guy.

00:20:35.720 --> 00:20:36.712
Works at Google.

00:20:36.712 --> 00:20:38.170
Does lots of web
development stuff.

00:20:38.170 --> 00:20:41.580
We talked with folks from
Opera in a meeting a little

00:20:41.580 --> 00:20:44.970
while ago about a-- every
couple weeks, we have a meeting.

00:20:44.970 --> 00:20:46.740
And this came up.

00:20:46.740 --> 00:20:49.740
And we're actually trying to
develop a way that you can do,

00:20:49.740 --> 00:20:52.600
like, crowd source code reviews
of elements and get them in one

00:20:52.600 --> 00:20:55.520
central repository
on the .org site.

00:20:55.520 --> 00:20:57.600
And that allows you to
do, like, JS Manners

00:20:57.600 --> 00:20:59.410
sort of checks as a community.

00:20:59.410 --> 00:21:00.720
So that could be good.

00:21:00.720 --> 00:21:01.960
ALEX KOMOROSKE: So I think
it's really encouraging

00:21:01.960 --> 00:21:03.320
how far we've already
come, even though it's

00:21:03.320 --> 00:21:04.910
a very fledgling ecosystem.

00:21:04.910 --> 00:21:07.345
So I think that's a good
sign for the future.

00:21:07.345 --> 00:21:08.220
MODERATOR: All right.

00:21:08.220 --> 00:21:09.680
The final question
of the evening

00:21:09.680 --> 00:21:14.080
is by one of the authors of
this fine book, John Bennett.

00:21:16.610 --> 00:21:26.530
AUDIENCE: So my question is
about attributes as components.

00:21:26.530 --> 00:21:28.919
For example, it would
be nice to have--

00:21:28.919 --> 00:21:30.710
if you're doing
internationalization-- have

00:21:30.710 --> 00:21:33.780
a translate attribute you
can put on any web component,

00:21:33.780 --> 00:21:37.000
and it's not just
a single component.

00:21:37.000 --> 00:21:39.620
Is that something that's
possible with Web Components

00:21:39.620 --> 00:21:43.630
or with any of the platforms,
like xtags or Polymer?

00:21:46.660 --> 00:21:51.190
ALEX KOMOROSKE: So you mean
custom attributes in general?

00:21:51.190 --> 00:21:53.850
AUDIENCE: So as an
example, there's

00:21:53.850 --> 00:21:57.980
a plugin for Angular
called Angular Get Text,

00:21:57.980 --> 00:22:00.880
and you can just stick
a translate attribute

00:22:00.880 --> 00:22:04.150
onto an element, and it
will translate it and do

00:22:04.150 --> 00:22:06.080
a bunch of Get Text
magic under the hood.

00:22:06.080 --> 00:22:08.580
ALEX KOMOROSKE: I think this
exact question actually came up

00:22:08.580 --> 00:22:11.020
on polymer-dev
today or yesterday.

00:22:11.020 --> 00:22:13.060
And the answer that
somebody has given so far

00:22:13.060 --> 00:22:15.310
enough-- I don't know if
it's a canonical one or not--

00:22:15.310 --> 00:22:17.990
is that you could choose
to implement the behavior

00:22:17.990 --> 00:22:21.410
on a base class and then inherit
from that for other things.

00:22:21.410 --> 00:22:24.050
But the design of Web
Components as I understand it--

00:22:24.050 --> 00:22:28.944
and I don't know all the
particulars well enough--

00:22:28.944 --> 00:22:30.860
but you couldn't just
have a special attribute

00:22:30.860 --> 00:22:34.290
that you mix into lots
of different elements.

00:22:34.290 --> 00:22:36.800
MALE SPEAKER 2: So in
xtag, we have the mix ins

00:22:36.800 --> 00:22:39.550
and the pseudos features would
allow for this sort of thing.

00:22:39.550 --> 00:22:42.090
So you could say,
translate this attribute,

00:22:42.090 --> 00:22:46.010
and then that reflects in data
or a mix in for translate.

00:22:46.010 --> 00:22:48.260
It would still require--
you'd have to do some coding.

00:22:48.260 --> 00:22:49.926
There's no thinking
around it right now.

00:22:49.926 --> 00:22:51.587
It's possible.

00:22:51.587 --> 00:22:52.170
MODERATOR: OK.

00:22:52.170 --> 00:22:54.030
I think we're going
to have to close it.

00:22:54.030 --> 00:22:56.480
Thanks for the great questions.

