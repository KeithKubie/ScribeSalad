WEBVTT
Kind: captions
Language: en

00:00:01.300 --> 00:00:01.840
Hi.

00:00:01.840 --> 00:00:02.720
I'm Chris Broadfoot.

00:00:02.720 --> 00:00:05.830
I'm an engineer on the Google
Maps Developer Relations team.

00:00:05.830 --> 00:00:07.850
In this tutorial, I'll be
showing you how to get started

00:00:07.850 --> 00:00:10.250
with the Google Places API.

00:00:10.250 --> 00:00:12.370
The Google Places API gives
you access to Google's

00:00:12.370 --> 00:00:15.090
database of over 80
million places.

00:00:15.090 --> 00:00:17.460
There's worldwide coverage and
detailed information about

00:00:17.460 --> 00:00:18.930
each and every place.

00:00:18.930 --> 00:00:21.260
It's completely free to use, and
in this tutorial, I'll be

00:00:21.260 --> 00:00:23.130
showing you how to
get started.

00:00:23.130 --> 00:00:25.200
Before we begin, let me show
you one of my favorite

00:00:25.200 --> 00:00:28.380
websites built with
the Places API.

00:00:28.380 --> 00:00:30.950
mapofthedead.com shows you
how to survive the zombie

00:00:30.950 --> 00:00:31.910
apocalypse.

00:00:31.910 --> 00:00:33.670
The first thing you'll notice
is that it doesn't look

00:00:33.670 --> 00:00:35.320
anything like Google Maps.

00:00:35.320 --> 00:00:37.350
These guys are using a great
map style that gives you a

00:00:37.350 --> 00:00:39.710
fantastic undead
look and feel.

00:00:39.710 --> 00:00:41.650
Places that are important during
the zombie apocalypse

00:00:41.650 --> 00:00:44.500
are displayed and marked on the
map, such as gun stores,

00:00:44.500 --> 00:00:47.720
grocery stores, airports,
and doctors.

00:00:47.720 --> 00:00:51.950
I can move the character around,
and based on where I

00:00:51.950 --> 00:00:56.000
place him, new results are
marked on the map.

00:00:56.000 --> 00:00:58.120
I can also use the textbooks
at the top of the page to

00:00:58.120 --> 00:00:59.980
select a new location.

00:00:59.980 --> 00:01:02.550
This is the best time to use
Places Autocomplete.

00:01:02.550 --> 00:01:04.610
A feature I'll be showing you
how to use in a moment.

00:01:04.610 --> 00:01:07.020
You, too, can build apps like
the one I just showed.

00:01:07.020 --> 00:01:09.160
It's worth reading through the
documentation to get a good

00:01:09.160 --> 00:01:10.730
understanding of the
capabilities.

00:01:10.730 --> 00:01:12.680
In this tutorial I'll be
demonstrating some of the

00:01:12.680 --> 00:01:14.990
features of the Places API.

00:01:14.990 --> 00:01:18.170
The Google Places API is
accessible via our Web Service

00:01:18.170 --> 00:01:20.930
from the language of your choice
or from your website

00:01:20.930 --> 00:01:24.380
using the library in the
Maps JavaScript API.

00:01:24.380 --> 00:01:26.160
The Web Service can
send responses

00:01:26.160 --> 00:01:28.470
formatted as JSON or XML.

00:01:28.470 --> 00:01:30.460
Today, I'll be using
the JSON version.

00:01:30.460 --> 00:01:32.980
To start using the Google Places
API, you first need to

00:01:32.980 --> 00:01:35.270
sign up for a Places API key.

00:01:35.270 --> 00:01:37.220
This allows us to issue you
more quota when your

00:01:37.220 --> 00:01:39.530
application exceeds the courtesy
limit of 1,000

00:01:39.530 --> 00:01:41.480
requests per day.

00:01:41.480 --> 00:01:43.880
First, visit the developer
console found over on the

00:01:43.880 --> 00:01:45.840
Google Developers website.

00:01:45.840 --> 00:01:48.290
You'll need to create a project,
then enable the

00:01:48.290 --> 00:01:51.170
Places API.

00:01:51.170 --> 00:01:53.160
Read through the terms
of service carefully.

00:01:53.160 --> 00:01:55.350
There are some important points,
including some about

00:01:55.350 --> 00:01:58.210
use of data returned
from the API.

00:01:58.210 --> 00:02:00.680
Once you've done that, you can
now obtain your key from the

00:02:00.680 --> 00:02:02.660
API access screen.

00:02:02.660 --> 00:02:04.760
This key will be used for all
web service requests.

00:02:07.300 --> 00:02:10.009
Let's take a look at Places
Auotocomplete.

00:02:10.009 --> 00:02:12.200
Google Places Autocomplete
allows you to add similar

00:02:12.200 --> 00:02:13.860
functionality to
the Google Maps

00:02:13.860 --> 00:02:16.270
search box on your website.

00:02:16.270 --> 00:02:18.780
Places and addresses are
suggested as I type into the

00:02:18.780 --> 00:02:20.940
standard HTML input box.

00:02:20.940 --> 00:02:25.770
As I begin typing 1600
Amphitheatre Parkway, Google's

00:02:25.770 --> 00:02:28.380
Mountain View headquarters, I
get suggestions based on my

00:02:28.380 --> 00:02:29.715
partial input.

00:02:29.715 --> 00:02:32.090
Note that the matching substring
is highlighted on

00:02:32.090 --> 00:02:34.350
each suggestion.

00:02:34.350 --> 00:02:37.120
Using Autocomplete via the
JavaScript library is simple.

00:02:37.120 --> 00:02:39.350
First, you need to include the
Places library when you load

00:02:39.350 --> 00:02:41.720
the Google Maps JavaScript
API.

00:02:41.720 --> 00:02:46.700
Just add libraries equals Places
to your bootstrap.

00:02:46.700 --> 00:02:48.920
Add Autocomplete to an existing
input element in your

00:02:48.920 --> 00:02:51.650
page by passing in the element
as a parameter to the

00:02:51.650 --> 00:02:53.930
Autocomplete's constructor.

00:02:53.930 --> 00:02:55.725
Autocomplete functionality
is now attached

00:02:55.725 --> 00:02:57.120
to the input element.

00:02:57.120 --> 00:02:59.570
To be notified of when a user
selects a place, listen to the

00:02:59.570 --> 00:03:02.190
place changed event on the
Autocomplete object.

00:03:02.190 --> 00:03:05.030
Details of the selected place
can then be obtained inside an

00:03:05.030 --> 00:03:06.260
event listener.

00:03:06.260 --> 00:03:08.550
Just call Get Place on the
Autocomplete object to

00:03:08.550 --> 00:03:11.730
retrieve the details about
the selected place.

00:03:11.730 --> 00:03:14.040
In this example, we simply
output three fields--

00:03:14.040 --> 00:03:16.540
the formatted address, the
URL, and location.

00:03:23.590 --> 00:03:25.210
There are many other fields
that you can use in your

00:03:25.210 --> 00:03:27.300
application.

00:03:27.300 --> 00:03:30.070
Autocomplete is also available
as a web service accessible

00:03:30.070 --> 00:03:32.440
from any programming language.

00:03:32.440 --> 00:03:35.210
Using the web service opens up
more creative possibilities of

00:03:35.210 --> 00:03:37.580
displaying and augmenting
results.

00:03:37.580 --> 00:03:40.190
Just use your favorite HTTP
package or library.

00:03:40.190 --> 00:03:42.170
Send an HTTP get request.

00:03:42.170 --> 00:03:44.880
Include the partial input
from the user.

00:03:44.880 --> 00:03:47.070
In addition, there are two
required parameters for each

00:03:47.070 --> 00:03:48.330
web service query--

00:03:48.330 --> 00:03:49.940
key and sensor.

00:03:49.940 --> 00:03:51.980
Use the key that you generated
previously from

00:03:51.980 --> 00:03:53.690
the developer console.

00:03:53.690 --> 00:03:56.240
The sensor must be set to true
if the location is derived

00:03:56.240 --> 00:03:58.820
from any sensor such as a GPS.

00:03:58.820 --> 00:04:01.950
Otherwise, it's safe
to set it to false.

00:04:01.950 --> 00:04:04.320
The response contains a status
code and a list of

00:04:04.320 --> 00:04:05.530
predictions.

00:04:05.530 --> 00:04:08.470
Each prediction will be
comprised of a description,

00:04:08.470 --> 00:04:11.050
which is a string that you
should present to the user, a

00:04:11.050 --> 00:04:14.210
breakdown of the terms, which
make up the suggestion, a list

00:04:14.210 --> 00:04:16.880
of the substrings matched
to the user input--

00:04:16.880 --> 00:04:19.370
you can highlight it in
your user interface--

00:04:19.370 --> 00:04:21.360
and an ID, which we'll
ignore for now.

00:04:21.360 --> 00:04:23.580
You also get a place reference,
which you can use

00:04:23.580 --> 00:04:25.810
to fetch additional
Place details.

00:04:25.810 --> 00:04:29.180
Place details can be fetched
using a place reference.

00:04:29.180 --> 00:04:31.400
Again, send an HTTP
get request to

00:04:31.400 --> 00:04:33.140
the details end point.

00:04:33.140 --> 00:04:35.400
The only other required
parameters are key and sensor,

00:04:35.400 --> 00:04:37.470
which I mentioned previously.

00:04:37.470 --> 00:04:39.860
Attributes of the place
will be returned.

00:04:39.860 --> 00:04:42.160
Some sample output
is shown here.

00:04:42.160 --> 00:04:45.510
And the response will contain
a status code, data

00:04:45.510 --> 00:04:48.750
attributions formatted as
HTML, and a place result

00:04:48.750 --> 00:04:51.650
structure containing detailed
information such as name,

00:04:51.650 --> 00:04:54.690
location, formatted instruction
address, category

00:04:54.690 --> 00:04:57.160
phone number, amongst
other attributes.

00:04:57.160 --> 00:05:00.560
Look at the documentation
for a complete list.

00:05:00.560 --> 00:05:03.420
While a details request is
available using the JavaScript

00:05:03.420 --> 00:05:06.880
library, it's not necessary to
use it if you're using the

00:05:06.880 --> 00:05:08.510
Autocomplete control.

00:05:08.510 --> 00:05:11.030
Details are returned
automatically upon selection

00:05:11.030 --> 00:05:13.010
of a place in the dropdown.

00:05:13.010 --> 00:05:15.530
You might still want to store
the reference for later

00:05:15.530 --> 00:05:17.390
retrieval of the
place details.

00:05:17.390 --> 00:05:19.470
It's possible to perform
some filtering on the

00:05:19.470 --> 00:05:21.290
Autocomplete API.

00:05:21.290 --> 00:05:23.780
The first kind of filter
is the type filter.

00:05:23.780 --> 00:05:27.000
This refines predictions based
on the type of result.

00:05:27.000 --> 00:05:29.000
There are currently
four options--

00:05:29.000 --> 00:05:33.020
geocode, establishment,
regions, and cities.

00:05:33.020 --> 00:05:35.860
Geocode will return addresses
and regions, and

00:05:35.860 --> 00:05:38.270
establishments will
return businesses.

00:05:38.270 --> 00:05:41.175
The next kind of filter allows
restriction of predictions to

00:05:41.175 --> 00:05:42.620
a single country.

00:05:42.620 --> 00:05:45.090
Simply add the components
parameter.

00:05:45.090 --> 00:05:47.460
In this example, all
Autocomplete predictions are

00:05:47.460 --> 00:05:49.550
restricted to France.

00:05:49.550 --> 00:05:51.690
This is also valid on the
Autocomplete control.

00:05:51.690 --> 00:05:54.320
Just set the component
restrictions property.

00:05:54.320 --> 00:06:01.520
As I begin typing California,
the Autocomplete control will

00:06:01.520 --> 00:06:03.230
only offer me suggestions
in France.

00:06:03.230 --> 00:06:05.850
Autocomplete is optimized to
select a place based on

00:06:05.850 --> 00:06:07.250
partial input.

00:06:07.250 --> 00:06:09.810
It's optimized for very low
latency so that users see

00:06:09.810 --> 00:06:11.870
results immediately after
every key press.

00:06:11.870 --> 00:06:14.280
Places searches are
more powerful.

00:06:14.280 --> 00:06:16.890
Complete search criteria
is at your disposal.

00:06:16.890 --> 00:06:19.830
Send an HTTP get query to
the search end point.

00:06:19.830 --> 00:06:23.630
You should specify location
and a radius.

00:06:23.630 --> 00:06:26.510
You will receive a status code,
data attributions in

00:06:26.510 --> 00:06:30.460
HTML format, and an array
of place results.

00:06:30.460 --> 00:06:33.130
You'll notice that compared to
Autocomplete responses, much

00:06:33.130 --> 00:06:36.090
more information is returned
about each place.

00:06:36.090 --> 00:06:37.570
Places search is also
available from

00:06:37.570 --> 00:06:39.520
the JavaScript API.

00:06:39.520 --> 00:06:42.650
Simply create a place of service
object, then call the

00:06:42.650 --> 00:06:44.180
search function.

00:06:44.180 --> 00:06:46.150
You'll need to pass in a
callback function that will be

00:06:46.150 --> 00:06:48.150
called with the place results.

00:06:48.150 --> 00:06:50.410
In this example, we simply print
the name of types of

00:06:50.410 --> 00:06:52.140
each place that's returned.

00:06:52.140 --> 00:06:55.380
It's also possible to restrict
your search by category by

00:06:55.380 --> 00:06:57.040
using the types of parameter.

00:06:57.040 --> 00:07:00.090
We support more than 130
types, including bar,

00:07:00.090 --> 00:07:02.800
restaurant, lodging, shop,
and many more.

00:07:02.800 --> 00:07:06.840
You can see the complete list in
our Places reference docs.

00:07:06.840 --> 00:07:09.690
In this example, the query
provided searches for ATMs

00:07:09.690 --> 00:07:12.230
around the Sydney central
business district.

00:07:12.230 --> 00:07:15.020
Sometimes, the type of place you
want to search for is not

00:07:15.020 --> 00:07:17.110
included in our place types.

00:07:17.110 --> 00:07:19.470
For example, if you'd like to
search for surf schools, you

00:07:19.470 --> 00:07:20.890
can use the keyword parameter.

00:07:20.890 --> 00:07:23.670
The places API will match the
keyword provided against all

00:07:23.670 --> 00:07:27.050
known text associated with a
place, including its website

00:07:27.050 --> 00:07:27.950
and user reviews.

00:07:27.950 --> 00:07:30.250
It's also useful to refine
a type search.

00:07:30.250 --> 00:07:32.320
For example, if you'd like
to search for Italian

00:07:32.320 --> 00:07:34.660
restaurants, you can do a
search for types equals

00:07:34.660 --> 00:07:37.050
restaurant and set keyword
to Italian.

00:07:37.050 --> 00:07:39.870
Places search results can
also be refined by exact

00:07:39.870 --> 00:07:41.110
matches of the name.

00:07:41.110 --> 00:07:43.070
Just specify the
name parameter.

00:07:43.070 --> 00:07:45.520
In the previous examples,
results were ranked according

00:07:45.520 --> 00:07:47.350
to their prominent score.

00:07:47.350 --> 00:07:49.970
Alternatively, results may be
ranked by distance from the

00:07:49.970 --> 00:07:51.520
center of the query.

00:07:51.520 --> 00:07:54.060
Just specify the rank
by parameter.

00:07:54.060 --> 00:07:56.670
When using distance ranking,
you must also specify some

00:07:56.670 --> 00:07:58.440
other search criteria.

00:07:58.440 --> 00:08:01.200
In example here, we used
distance ranking and keyword

00:08:01.200 --> 00:08:03.530
filtering to find the closest
sushi restaurant.

00:08:03.530 --> 00:08:06.550
This was just an overview of
the Google Places API.

00:08:06.550 --> 00:08:08.560
There are many more details
and features that you can

00:08:08.560 --> 00:08:11.370
explore over on the Google
Developers website.

00:08:11.370 --> 00:08:13.310
Thanks for listening, and I
look forward to seeing the

00:08:13.310 --> 00:08:14.560
apps that you develop.

