WEBVTT
Kind: captions
Language: en

00:00:08.060 --> 00:00:10.370
MATTHEW MCNULTY: Good afternoon
and welcome to Polymer

00:00:10.370 --> 00:00:12.500
and the Web
Components Revolution.

00:00:12.500 --> 00:00:15.090
If this is not the talk
you thought you were in,

00:00:15.090 --> 00:00:17.680
we've barred the doors.

00:00:17.680 --> 00:00:19.620
So first just a
little bit about me.

00:00:19.620 --> 00:00:21.010
My name is Matthew McNulty.

00:00:21.010 --> 00:00:23.470
And I lead the Polymer
team here at Google.

00:00:23.470 --> 00:00:26.285
I started actually
two years ago today.

00:00:26.285 --> 00:00:28.340
I came to Google
to build Polymer.

00:00:28.340 --> 00:00:31.450
So my total Twitter
handle is on there.

00:00:31.450 --> 00:00:33.080
It's @mattsmcnulty.

00:00:33.080 --> 00:00:35.490
And so feel free tweet
me throughout the show.

00:00:35.490 --> 00:00:37.087
I don't have my phone on me.

00:00:37.087 --> 00:00:39.420
So just a little bit about
what we're going to do today.

00:00:39.420 --> 00:00:42.856
So the first thing is going to
be give an overview of Polymer.

00:00:42.856 --> 00:00:45.355
We will also be talking about
the ecosystem of which Polymer

00:00:45.355 --> 00:00:50.466
is a part, and discussing
material design on the web.

00:00:50.466 --> 00:00:51.840
But to start, at
the keynote, you

00:00:51.840 --> 00:00:54.381
might have seen a glimpse of an
app the Polymer team has been

00:00:54.381 --> 00:00:56.490
working on over
the last few weeks.

00:00:56.490 --> 00:01:00.370
And we code-named it Topeka
for entirely esoteric reasons.

00:01:00.370 --> 00:01:04.480
It actually has nothing to
do with the city Kansas.

00:01:04.480 --> 00:01:06.210
But in fact, it's a
trivia application.

00:01:06.210 --> 00:01:08.130
So we spent a lot of
time over the last year

00:01:08.130 --> 00:01:10.940
shipping web components
natively, building elements,

00:01:10.940 --> 00:01:11.950
and evolving Polymer.

00:01:11.950 --> 00:01:14.920
But the true test of all that
is building an application.

00:01:14.920 --> 00:01:17.370
So Topeka is the app we built
to test Polymer and material

00:01:17.370 --> 00:01:18.360
design.

00:01:18.360 --> 00:01:19.790
So it's a real app.

00:01:19.790 --> 00:01:21.840
And a handful of
Polymer engineers

00:01:21.840 --> 00:01:24.050
built it over just
the last three weeks.

00:01:24.050 --> 00:01:26.140
So just like the rest of
Polymer, it's open source

00:01:26.140 --> 00:01:29.410
and we've made it public today.

00:01:29.410 --> 00:01:30.880
So here's the URL.

00:01:30.880 --> 00:01:34.280
And the QR Code shortcut
so you can follow along.

00:01:34.280 --> 00:01:37.660
This works best on Chrome
beta and Canary on 37.

00:01:37.660 --> 00:01:39.180
So that's pretty cool.

00:01:39.180 --> 00:01:41.510
Everyone is actually doing that.

00:01:41.510 --> 00:01:42.940
Works great on
desktops and works

00:01:42.940 --> 00:01:46.740
on other platforms as well, but
it's best on beta and Canary

00:01:46.740 --> 00:01:47.620
locally.

00:01:47.620 --> 00:01:49.370
So just a little note.

00:01:49.370 --> 00:01:51.990
Since this was shown and tweeted
about during the keynote,

00:01:51.990 --> 00:01:54.810
I think we're up to about
5,000 or 6,000 users so far.

00:01:54.810 --> 00:01:57.290
So our big plan to show
the leader board of all the

00:01:57.290 --> 00:02:00.860
over time during this talk
probably is going for naught.

00:02:00.860 --> 00:02:02.790
But welcome to join in.

00:02:02.790 --> 00:02:03.290
All right.

00:02:03.290 --> 00:02:04.210
So I'm going to demo Topeka.

00:02:04.210 --> 00:02:06.090
So we can take it over
to the demo machine.

00:02:17.300 --> 00:02:18.150
Wrong demo machine.

00:02:22.730 --> 00:02:23.581
There we go.

00:02:23.581 --> 00:02:24.080
All right.

00:02:24.080 --> 00:02:25.340
So this is Topeka.

00:02:25.340 --> 00:02:27.550
I'm running it locally,
because of internet issues

00:02:27.550 --> 00:02:28.729
at conferences.

00:02:28.729 --> 00:02:30.770
At the very beginning,
you've got a sign in page.

00:02:30.770 --> 00:02:32.370
And you can see
from the beginning

00:02:32.370 --> 00:02:35.220
that we've got these cool
ink effects on the inputs.

00:02:35.220 --> 00:02:37.920
Let me put my stuff in here.

00:02:37.920 --> 00:02:39.060
And you pick an avatar.

00:02:39.060 --> 00:02:41.625
So I usually pick the dog,
because I'm a dog person.

00:02:41.625 --> 00:02:44.170
And from the very beginning,
you see really cool transitions.

00:02:44.170 --> 00:02:46.180
And this is all built-in
and part of Polymer.

00:02:46.180 --> 00:02:47.660
We can show that one again.

00:02:49.904 --> 00:02:51.070
So it's really, really cool.

00:02:51.070 --> 00:02:52.278
So let's pick out a category.

00:02:52.278 --> 00:02:53.340
Let's do food and drink.

00:02:53.340 --> 00:02:55.420
So it's important to
note at the start,

00:02:55.420 --> 00:02:57.840
that we are not trivia experts.

00:02:57.840 --> 00:03:00.550
So some of the answers were
actually wrong as recently

00:03:00.550 --> 00:03:03.160
as a week ago.

00:03:03.160 --> 00:03:05.640
And some of these
are incredibly hard.

00:03:05.640 --> 00:03:07.015
There's this one
coming up that I

00:03:07.015 --> 00:03:08.848
don't think I've ever
actually gotten right.

00:03:08.848 --> 00:03:10.110
And I haven't looked at.

00:03:10.110 --> 00:03:10.620
All right.

00:03:10.620 --> 00:03:12.060
Audience participation time.

00:03:12.060 --> 00:03:14.680
Name the Italian, semi-soft,
rich cheese with blue veins

00:03:14.680 --> 00:03:15.510
through it.

00:03:15.510 --> 00:03:17.040
AUDIENCE: Gorgonzola.

00:03:17.040 --> 00:03:18.748
MATTHEW MCNULTY: That's
a smart audience.

00:03:20.800 --> 00:03:21.530
All right.

00:03:21.530 --> 00:03:24.267
Coffee beans contain more
caffeine than tea leaves.

00:03:24.267 --> 00:03:25.400
AUDIENCE: False.

00:03:25.400 --> 00:03:28.280
MATTHEW MCNULTY: This
is a good audience.

00:03:28.280 --> 00:03:30.750
Now we get to the question
that I have gotten wrong

00:03:30.750 --> 00:03:32.020
Every single time.

00:03:32.020 --> 00:03:33.047
AUDIENCE: Honey.

00:03:33.047 --> 00:03:33.880
MATTHEW MCNULTY: OK.

00:03:33.880 --> 00:03:35.084
We've got honey.

00:03:35.084 --> 00:03:35.750
AUDIENCE: Water.

00:03:38.630 --> 00:03:39.970
MATTHEW MCNULTY: Yaaaayyy.

00:03:39.970 --> 00:03:41.950
Somehow I was missing
water in all that.

00:03:41.950 --> 00:03:44.311
That makes no sense at all.

00:03:44.311 --> 00:03:44.810
All right.

00:03:44.810 --> 00:03:45.822
So there you go.

00:03:45.822 --> 00:03:46.780
There's the categories.

00:03:46.780 --> 00:03:48.196
We can check out
the leader board,

00:03:48.196 --> 00:03:49.590
see how everyone's doing.

00:03:49.590 --> 00:03:50.965
Actually, there's
people who have

00:03:50.965 --> 00:03:53.116
done remarkably
well this morning.

00:03:53.116 --> 00:03:56.250
I think we did this
test in the Chrome team.

00:03:56.250 --> 00:03:58.660
Someone was in the 400s,
but that was about it.

00:03:58.660 --> 00:04:00.060
So someone has done pretty well.

00:04:00.060 --> 00:04:05.100
We even have a
standalone, one that

00:04:05.100 --> 00:04:11.190
shows a little more
completely-- once it loads up.

00:04:11.190 --> 00:04:12.710
Welcome to conference internet.

00:04:16.440 --> 00:04:17.010
Come on.

00:04:21.130 --> 00:04:22.260
Always have a backup plan.

00:04:26.040 --> 00:04:26.540
All right.

00:04:30.510 --> 00:04:32.410
So as you can see now,
no one has any scores.

00:04:32.410 --> 00:04:36.431
But as it goes and as we batch
the updates and animate around,

00:04:36.431 --> 00:04:37.430
it's really pretty cool.

00:04:37.430 --> 00:04:39.960
And you can see a little bit
of the material design aspects

00:04:39.960 --> 00:04:42.610
here as the pieces of
paper come off the screen

00:04:42.610 --> 00:04:46.300
and then mold back in as
they get to their new spot.

00:04:46.300 --> 00:04:50.292
So we'll check and see if the
leader board works later on.

00:04:50.292 --> 00:04:52.750
But another thing to not about
this is that its responsive.

00:04:52.750 --> 00:04:56.600
So if we come back
to the app and I

00:04:56.600 --> 00:05:00.280
pop out of full screen mode.

00:05:00.280 --> 00:05:04.850
So the same app actually adapts
across phones and tablets

00:05:04.850 --> 00:05:07.270
with the same animations.

00:05:07.270 --> 00:05:08.130
So this is cool.

00:05:08.130 --> 00:05:09.622
But we need to
actually prove it.

00:05:09.622 --> 00:05:11.080
So if we go over
to the WolfVision.

00:05:14.472 --> 00:05:15.470
Here we are.

00:05:15.470 --> 00:05:17.350
So you see how this is
exactly the same app.

00:05:17.350 --> 00:05:22.112
This is running in
Chrome Beta on Nexus 5.

00:05:22.112 --> 00:05:23.070
Now we know the answer.

00:05:23.070 --> 00:05:26.090
So it's pretty cool.

00:05:26.090 --> 00:05:29.220
So you can see, it's actually
the same fast, smooth animation

00:05:29.220 --> 00:05:32.780
and the same responsive design
across mobile and desktop.

00:05:32.780 --> 00:05:34.910
So let's go back to
the presentation.

00:05:39.480 --> 00:05:39.980
All right.

00:05:39.980 --> 00:05:41.030
So that's Topeka.

00:05:41.030 --> 00:05:42.160
We'll check back later.

00:05:42.160 --> 00:05:44.576
See if the leader board works
and see how everyone's doing

00:05:44.576 --> 00:05:47.650
but probably won't.

00:05:47.650 --> 00:05:49.860
So for those of you I haven't
lost to playing trivia.

00:05:49.860 --> 00:05:51.943
And this is the big problem
with this application,

00:05:51.943 --> 00:05:53.510
is even showing
it to executives,

00:05:53.510 --> 00:05:55.100
they get immersed
in the actual trivia

00:05:55.100 --> 00:05:57.320
and lose everything
else that I'm saying.

00:05:57.320 --> 00:06:00.180
This is the kind of immersive
experience typically associated

00:06:00.180 --> 00:06:03.384
with native applications
on mobile devices.

00:06:03.384 --> 00:06:05.300
So you might be thinking,
but this is the web,

00:06:05.300 --> 00:06:08.052
and the web isn't supposed
to be able to do this.

00:06:08.052 --> 00:06:09.010
The web is for content.

00:06:09.010 --> 00:06:10.114
The web is for documents.

00:06:10.114 --> 00:06:11.780
The web is for the
boring stuff that you

00:06:11.780 --> 00:06:14.500
stick in the middle
of a hybrid app.

00:06:14.500 --> 00:06:16.690
So how did we actually do this?

00:06:16.690 --> 00:06:18.190
We did it with Polymer.

00:06:18.190 --> 00:06:21.380
And I'm here today
to show you how.

00:06:21.380 --> 00:06:22.710
So to start.

00:06:22.710 --> 00:06:26.080
What in the world is Polymer?

00:06:26.080 --> 00:06:28.430
So Polymer is a library that
makes building applications

00:06:28.430 --> 00:06:32.430
easier, which sounds
pretty generic.

00:06:32.430 --> 00:06:36.300
So let's dive into a
little bit more detail.

00:06:36.300 --> 00:06:39.390
So if you take away anything
from this talk, make it this.

00:06:39.390 --> 00:06:42.070
Polymer is a different
kind of thing.

00:06:42.070 --> 00:06:44.229
So all comparisons to
other things and things

00:06:44.229 --> 00:06:46.520
that have come before and
perfect, because there hasn't

00:06:46.520 --> 00:06:49.430
been anything like this before.

00:06:49.430 --> 00:06:51.520
So first off, the process
of building Polymer

00:06:51.520 --> 00:06:52.560
was very different.

00:06:52.560 --> 00:06:54.850
And the reason is pretty simple.

00:06:54.850 --> 00:06:56.760
The Polymer team is
part of the Chrome team.

00:06:56.760 --> 00:07:00.050
So when we started this
project two years ago today,

00:07:00.050 --> 00:07:01.180
we were given a mandate.

00:07:01.180 --> 00:07:03.530
And that mandate was
use the platform.

00:07:03.530 --> 00:07:06.200
So previously, best practices
included building frameworks

00:07:06.200 --> 00:07:08.270
that are above the
web platform or even

00:07:08.270 --> 00:07:10.650
bring their own platform
they stick on top.

00:07:10.650 --> 00:07:12.070
So some just use
the web platform

00:07:12.070 --> 00:07:16.120
like a rendering layer,
like our last framework.

00:07:16.120 --> 00:07:18.380
And as a result, Polymer
doesn't fight the platform.

00:07:18.380 --> 00:07:20.820
Because we're on the web
platform team at Chrome.

00:07:20.820 --> 00:07:22.780
It's us.

00:07:22.780 --> 00:07:25.170
So there's a room full of
people in multiple offices

00:07:25.170 --> 00:07:27.750
who surround us who are
responsible for making the web

00:07:27.750 --> 00:07:28.864
platform great.

00:07:28.864 --> 00:07:31.530
And they keep us honest and keep
us from using our bag of tricks

00:07:31.530 --> 00:07:33.130
to get around problems.

00:07:33.130 --> 00:07:35.680
And we keep them honest by
stopping when we find something

00:07:35.680 --> 00:07:38.960
that doesn't work and filing
bugs or pointing it out.

00:07:38.960 --> 00:07:41.900
And a lot of times the person
responsible is a few feet away.

00:07:41.900 --> 00:07:44.540
I can think of a couple
people in particular.

00:07:44.540 --> 00:07:46.750
So if we run across some
source of jank or something

00:07:46.750 --> 00:07:48.221
that doesn't seem
to work right, we

00:07:48.221 --> 00:07:50.470
yell across the room for
someone to take a look at it,

00:07:50.470 --> 00:07:51.489
and bugs are filed.

00:07:51.489 --> 00:07:53.280
And the next version
of Chrome gets better,

00:07:53.280 --> 00:07:55.196
and Polymer gets better,
and more importantly,

00:07:55.196 --> 00:07:58.790
the whole web
platform gets better.

00:07:58.790 --> 00:08:00.662
So Polymer is the first
library of its kind.

00:08:00.662 --> 00:08:02.870
It's not just because we
are part of the Chrome team.

00:08:02.870 --> 00:08:04.786
Because it's made from
a different foundation.

00:08:04.786 --> 00:08:06.970
It's made from different parts.

00:08:06.970 --> 00:08:09.120
And that foundation
is web components.

00:08:09.120 --> 00:08:12.041
So who here has heard
of web components?

00:08:12.041 --> 00:08:12.540
All right.

00:08:12.540 --> 00:08:13.532
That's pretty good.

00:08:13.532 --> 00:08:14.990
If you haven't,
you definitely want

00:08:14.990 --> 00:08:16.250
to stay right here
for the next talk

00:08:16.250 --> 00:08:18.458
because Eric Bidelman is
going to talk all about that

00:08:18.458 --> 00:08:20.940
and Polymer in a lot of depth.

00:08:20.940 --> 00:08:24.150
So web components are
a set of new standards.

00:08:24.150 --> 00:08:26.989
And my slide formatting got
a little screwed up here.

00:08:26.989 --> 00:08:28.530
So you'll have to
bear with me there.

00:08:28.530 --> 00:08:30.350
So there's standards
on the bottom.

00:08:30.350 --> 00:08:32.080
So Polymer isn't
just a Chrome thing.

00:08:32.080 --> 00:08:34.280
It's a web platform
thing, and Polymer is just

00:08:34.280 --> 00:08:35.380
leading the way so far.

00:08:38.070 --> 00:08:42.360
This slide formatting
is killing me.

00:08:42.360 --> 00:08:44.210
So if you don't know
about web components,

00:08:44.210 --> 00:08:46.780
you might know this already,
but if you don't, here it is.

00:08:46.780 --> 00:08:50.280
So web components utterly
change the web platform.

00:08:50.280 --> 00:08:51.960
So we use lots of
grandiose terms

00:08:51.960 --> 00:08:53.724
and we talk about
this revolution,

00:08:53.724 --> 00:08:54.890
changes everything you know.

00:08:54.890 --> 00:08:56.100
This isn't hyperbole.

00:08:56.100 --> 00:08:59.814
This actually
changes everything.

00:08:59.814 --> 00:09:01.480
And web components
introduce a new world

00:09:01.480 --> 00:09:03.104
where components from
different vendors

00:09:03.104 --> 00:09:04.650
can live together
on the same page.

00:09:04.650 --> 00:09:06.500
So apps can be
crafted out of parts

00:09:06.500 --> 00:09:08.450
that are found on
a massive shelf.

00:09:08.450 --> 00:09:11.640
So the web becomes interoperable
with custom elements, which

00:09:11.640 --> 00:09:14.110
is what that's supposed to say.

00:09:14.110 --> 00:09:16.220
So web components make
composing applications out

00:09:16.220 --> 00:09:17.580
of these components possible.

00:09:17.580 --> 00:09:20.595
So shadow DOM is about
composability and only that.

00:09:20.595 --> 00:09:22.470
So a lot of people think
it's about security,

00:09:22.470 --> 00:09:23.970
but that's not really true.

00:09:23.970 --> 00:09:26.910
So it gives you just enough
of a container-- just enough--

00:09:26.910 --> 00:09:30.949
that the web becomes
composable with shadow DOM.

00:09:30.949 --> 00:09:33.240
And finally, web components
introduces resource loading

00:09:33.240 --> 00:09:35.590
and external
dependencies to HTML.

00:09:35.590 --> 00:09:36.520
So think about it.

00:09:36.520 --> 00:09:39.790
How long have you been able to
have external CSS and JS files,

00:09:39.790 --> 00:09:41.440
but never HTML?

00:09:41.440 --> 00:09:42.920
So it's a really
simple mechanism,

00:09:42.920 --> 00:09:44.190
but it's really useful.

00:09:44.190 --> 00:09:46.290
So the web is now
consumable in smaller chunks

00:09:46.290 --> 00:09:48.827
with HTML imports.

00:09:48.827 --> 00:09:50.660
And all of this will
start shipping natively

00:09:50.660 --> 00:09:53.740
starting in Chrome 36, which
is the beta channel right now.

00:09:53.740 --> 00:09:55.950
And it will be stable
in just a few weeks.

00:09:55.950 --> 00:09:57.970
So does this work
only on Chrome?

00:09:57.970 --> 00:09:58.890
No.

00:09:58.890 --> 00:10:01.425
So thanks to polyfills, this
works across more browsers

00:10:01.425 --> 00:10:02.050
than you think.

00:10:02.050 --> 00:10:03.508
It's actually the
last two versions

00:10:03.508 --> 00:10:05.180
of just about everything.

00:10:05.180 --> 00:10:06.680
So there's a
misconception out there

00:10:06.680 --> 00:10:09.720
that Polymer is the polyfill
layer for web components,

00:10:09.720 --> 00:10:11.230
because we happen to write them.

00:10:11.230 --> 00:10:13.380
And that's what we
talked about last year.

00:10:13.380 --> 00:10:15.250
But the polyfills
aren't Polymer,

00:10:15.250 --> 00:10:17.112
but let Polymer elements
and applications

00:10:17.112 --> 00:10:18.320
run on other recent browsers.

00:10:20.750 --> 00:10:21.250
All right.

00:10:21.250 --> 00:10:22.791
So Polymer is based
on web components

00:10:22.791 --> 00:10:24.110
and web components are awesome.

00:10:24.110 --> 00:10:25.526
But what does
polymer actually do?

00:10:25.526 --> 00:10:28.920
What's it's purpose in life?

00:10:28.920 --> 00:10:31.880
So Polymer provides a sugaring
layer on top of these new web

00:10:31.880 --> 00:10:34.420
standards, so web components,
as well as others,

00:10:34.420 --> 00:10:36.930
like the template tag.

00:10:36.930 --> 00:10:39.420
So it tries to be a
thin layer on top.

00:10:39.420 --> 00:10:41.310
But since these new
standards are so awesome,

00:10:41.310 --> 00:10:43.570
why do they need sugaring?

00:10:43.570 --> 00:10:45.460
It's because primitives
are primitive.

00:10:45.460 --> 00:10:47.100
So this sounds
funny, but it's true.

00:10:47.100 --> 00:10:50.189
Think about l right the best
LEGOS aren't the weird castle

00:10:50.189 --> 00:10:52.730
wall chunks or specialty bricks
that all of my older siblings

00:10:52.730 --> 00:10:54.180
claimed are complete sacrilege.

00:10:54.180 --> 00:10:55.680
They're the basic ones, right?

00:10:55.680 --> 00:10:58.650
Because they are
the most expressive.

00:10:58.650 --> 00:11:00.779
So new features should be
as primitive as possible.

00:11:00.779 --> 00:11:02.320
So developers can
do things with them

00:11:02.320 --> 00:11:06.750
that browser vendors
would never dream of.

00:11:06.750 --> 00:11:08.450
And Polymer reduces boilerplate.

00:11:08.450 --> 00:11:10.420
So for various very
legitimate reasons,

00:11:10.420 --> 00:11:13.550
primitive APIs can require a lot
of boilerplate code or quirks

00:11:13.550 --> 00:11:16.280
that can get really,
really repetitive.

00:11:16.280 --> 00:11:19.000
Our goal of Polymer is to reduce
the code that developers write

00:11:19.000 --> 00:11:21.290
to just what is unique
to their application.

00:11:21.290 --> 00:11:23.410
So DRY is our motto--
don't repeat yourself.

00:11:26.180 --> 00:11:28.810
So Polymer also introduces
a declarative syntax.

00:11:28.810 --> 00:11:31.330
So web components in fact has
a declarative syntax in there,

00:11:31.330 --> 00:11:32.930
but it's not been
implemented yet.

00:11:32.930 --> 00:11:35.710
So we built our own on
top of the imperative.

00:11:35.710 --> 00:11:40.080
So this makes it really simple
to describe your UI in markup.

00:11:40.080 --> 00:11:43.339
So Polymer makes all these
new bits work together great.

00:11:43.339 --> 00:11:44.880
So a lot of times
over the last year,

00:11:44.880 --> 00:11:47.254
there are people who set
off to do this on their own

00:11:47.254 --> 00:11:49.420
and do it without Polymer,
because they decided, Oh,

00:11:49.420 --> 00:11:51.720
Polymer will be some big thing
and they have to figure out.

00:11:51.720 --> 00:11:53.760
So they try and get it
all working on their own.

00:11:53.760 --> 00:11:55.780
And they do, but it's
a lot harder that way.

00:11:55.780 --> 00:11:57.940
So Polymer does
all the hard work

00:11:57.940 --> 00:12:01.540
to make this all
a cohesive system.

00:12:01.540 --> 00:12:04.550
And Polymer can do all this,
because Polymer has an opinion.

00:12:04.550 --> 00:12:07.432
So we think we have a great way
to build applications and use

00:12:07.432 --> 00:12:09.140
all these new features
together to create

00:12:09.140 --> 00:12:11.650
awesome experiences for users.

00:12:11.650 --> 00:12:13.200
So there isn't a
place for opinion

00:12:13.200 --> 00:12:16.916
in standards you
need another layer.

00:12:16.916 --> 00:12:18.290
So let's take a
look more closely

00:12:18.290 --> 00:12:19.540
about how you can use Polymer.

00:12:24.410 --> 00:12:26.980
So when we talk
about using Polymer,

00:12:26.980 --> 00:12:28.620
we divide the world
into two use cases,

00:12:28.620 --> 00:12:31.080
using elements and
creating elements.

00:12:31.080 --> 00:12:32.547
So the long tail
of users out there

00:12:32.547 --> 00:12:34.380
just want to add something
to their website,

00:12:34.380 --> 00:12:37.310
like DHTML calendar that
people have been using forever.

00:12:37.310 --> 00:12:40.585
It was on every website in the
2000s, or a download button

00:12:40.585 --> 00:12:42.809
or this thing or that thing.

00:12:42.809 --> 00:12:45.350
Using elements is something that
web components and some best

00:12:45.350 --> 00:12:47.932
practices make
possible right now.

00:12:47.932 --> 00:12:50.390
But the people in this room
that are listening to this talk

00:12:50.390 --> 00:12:52.890
are likely also interested in
creating their own elements

00:12:52.890 --> 00:12:55.260
and using all of the
Polymer features to do so.

00:12:55.260 --> 00:12:56.800
So let's cover using
elements first,

00:12:56.800 --> 00:12:59.262
because it's really easy.

00:12:59.262 --> 00:13:01.220
So the first step is find
the element you want.

00:13:01.220 --> 00:13:02.469
You can do this a lot of ways.

00:13:02.469 --> 00:13:05.750
There's GitHub-- we like Bower
on the team-- or catalogs.

00:13:05.750 --> 00:13:06.730
We're building one.

00:13:06.730 --> 00:13:09.030
There's some others out
there already Actually

00:13:09.030 --> 00:13:11.880
Or just a zip file
hosted somewhere.

00:13:11.880 --> 00:13:13.640
Step two is to import it.

00:13:13.640 --> 00:13:15.240
This is where HTML
imports comes in.

00:13:15.240 --> 00:13:19.130
This link tag with rel equals
import is an HTML important.

00:13:19.130 --> 00:13:21.279
So you'll notice what
it's importing is HTML.

00:13:21.279 --> 00:13:22.820
In this case, it's
the HTML file that

00:13:22.820 --> 00:13:26.370
has the definition of my button.

00:13:26.370 --> 00:13:29.510
And the last step, there's
only three steps is use it.

00:13:29.510 --> 00:13:31.010
So once the element
is imported, you

00:13:31.010 --> 00:13:34.550
can use them on the page
just like any other element.

00:13:34.550 --> 00:13:35.292
And that's.

00:13:35.292 --> 00:13:37.500
That's all there is to using
custom elements with web

00:13:37.500 --> 00:13:39.022
components.

00:13:39.022 --> 00:13:41.840
And Polymer elements just like
custom elements in general

00:13:41.840 --> 00:13:43.780
are just HTML elements.

00:13:43.780 --> 00:13:46.220
So I put "just' in quotes
here, because now that HTML

00:13:46.220 --> 00:13:48.350
is extensible like
this, HTML elements

00:13:48.350 --> 00:13:50.930
become a really powerful.

00:13:50.930 --> 00:13:53.280
And with this new power,
it becomes possible again

00:13:53.280 --> 00:13:55.730
to use DOM as the object
model as it was originally

00:13:55.730 --> 00:13:56.930
intended to be.

00:13:56.930 --> 00:13:59.470
So we like to call Polymer
a library not a framework.

00:13:59.470 --> 00:14:00.670
I mess this up a lot.

00:14:00.670 --> 00:14:02.510
I might even today.

00:14:02.510 --> 00:14:05.540
Because with Polymer, the
framework is DOM itself.

00:14:05.540 --> 00:14:07.880
It's a return to the
early days of HTML

00:14:07.880 --> 00:14:09.900
when your UI was
expressed in HTML

00:14:09.900 --> 00:14:13.324
and manipulated using non-APIs.

00:14:13.324 --> 00:14:15.740
Let's take at look at how we
create elements with Polymer.

00:14:15.740 --> 00:14:18.150
So we identified the
most common things

00:14:18.150 --> 00:14:21.420
developers will need to do
to create web components

00:14:21.420 --> 00:14:23.594
and focused on making
that dead simple.

00:14:23.594 --> 00:14:25.260
So this is the sugar
that we're layering

00:14:25.260 --> 00:14:27.610
on top of web components.

00:14:27.610 --> 00:14:31.620
So we use this simple counter
elements as an example,

00:14:31.620 --> 00:14:37.100
just as a label, a value,
and a button to increment.

00:14:37.100 --> 00:14:37.600
Oops.

00:14:40.779 --> 00:14:41.820
I get that video working.

00:14:46.929 --> 00:14:47.720
That's interesting.

00:14:47.720 --> 00:14:52.230
It doesn't actually animate
on my screen, only yours.

00:14:52.230 --> 00:14:55.159
So using standard APIs, creating
and registering your counter

00:14:55.159 --> 00:14:56.450
might look something like this.

00:14:56.450 --> 00:14:57.575
And that's a lot of typing.

00:14:57.575 --> 00:15:00.700
It works, but that's
not really sweet.

00:15:00.700 --> 00:15:02.910
With Polymer, we can
accomplish the most common task

00:15:02.910 --> 00:15:05.060
declaratively and
with much less code.

00:15:05.060 --> 00:15:06.560
So the boilerplate's
gone and you're

00:15:06.560 --> 00:15:09.030
left with code that's unique
to your application, which

00:15:09.030 --> 00:15:10.724
I mentioned is our goal.

00:15:10.724 --> 00:15:12.140
So let's take a
quick look at some

00:15:12.140 --> 00:15:14.640
of the features Polymer adds
on top of web components

00:15:14.640 --> 00:15:18.510
in a little more detail
using this exact example.

00:15:18.510 --> 00:15:21.330
So first, you can create and
register and customize it

00:15:21.330 --> 00:15:23.290
declaratively without
any JavaScript.

00:15:23.290 --> 00:15:25.915
So you just wrap your definition
in a Polymer element tag

00:15:25.915 --> 00:15:27.080
and give it a name.

00:15:27.080 --> 00:15:29.680
So now my counter
is a valid HTML tag,

00:15:29.680 --> 00:15:30.680
you can use in your app.

00:15:30.680 --> 00:15:34.110
It just doesn't do anything yet.

00:15:34.110 --> 00:15:36.170
Next we can include
additional templates

00:15:36.170 --> 00:15:38.690
in the element that captures
this element's view.

00:15:38.690 --> 00:15:42.000
So it can contain any arbitrary
HTML including other custom

00:15:42.000 --> 00:15:44.307
elements.

00:15:44.307 --> 00:15:46.140
Here we'll put a couple
of divs and a button

00:15:46.140 --> 00:15:47.390
in to make our counter.

00:15:47.390 --> 00:15:51.570
It's pretty just standard HTML.

00:15:51.570 --> 00:15:53.400
So next we have styles
for our templates.

00:15:53.400 --> 00:15:55.649
So since the template will
be rendered into the Shadow

00:15:55.649 --> 00:15:57.700
DOM, hidden from other
elements, these styles

00:15:57.700 --> 00:16:01.080
will only modify our component
and will leak out and modify

00:16:01.080 --> 00:16:03.076
other parts of the application.

00:16:03.076 --> 00:16:05.075
So this is how Shadow DOM
enables composability.

00:16:08.380 --> 00:16:10.390
Next, we can define
published properties

00:16:10.390 --> 00:16:11.620
on the element's prototype.

00:16:11.620 --> 00:16:13.180
So published
properties in Polymer

00:16:13.180 --> 00:16:14.640
can be initialized
via attributes

00:16:14.640 --> 00:16:16.230
on the tag and markup.

00:16:16.230 --> 00:16:18.680
It observes simply by adding
a changed handler function.

00:16:21.224 --> 00:16:22.890
Polymer comes with
two-way data binding,

00:16:22.890 --> 00:16:24.610
which binds the
values of our elements

00:16:24.610 --> 00:16:27.310
to the view using
mustache syntax.

00:16:27.310 --> 00:16:31.097
So Polymer supports complex
expressions, but in this case,

00:16:31.097 --> 00:16:32.930
we're just binding the
contents of this span

00:16:32.930 --> 00:16:35.740
to the value of the counter
property on the prototype.

00:16:38.270 --> 00:16:39.770
We also provide
event binding, which

00:16:39.770 --> 00:16:42.310
raises the boilerplate needed
to set up event handlers.

00:16:42.310 --> 00:16:44.290
So in this case, when
the button is tapped

00:16:44.290 --> 00:16:46.165
it calls this method on
a prototype increment

00:16:46.165 --> 00:16:48.611
and increments the counter.

00:16:48.611 --> 00:16:51.080
And all this together makes
defining and composing

00:16:51.080 --> 00:16:56.236
your custom elements a lot
easier, maybe even sweet.

00:16:56.236 --> 00:16:58.110
So with all this what
can you make a Polymer?

00:16:58.110 --> 00:16:59.800
I get asked this a lot.

00:16:59.800 --> 00:17:02.245
And the answer is absolutely
everything or everything.

00:17:05.190 --> 00:17:08.750
So whole cities even, if
you believe this photo.

00:17:08.750 --> 00:17:11.300
The truth is Polymer is a
really low level UI library

00:17:11.300 --> 00:17:13.885
and it can express a
lot of different things,

00:17:13.885 --> 00:17:15.337
like quiz apps.

00:17:15.337 --> 00:17:17.170
So at least we know
it's good for quiz apps.

00:17:17.170 --> 00:17:19.763
We've made very,
very good quiz apps.

00:17:19.763 --> 00:17:21.429
We can also use Polymer
to make apps out

00:17:21.429 --> 00:17:23.500
of elements and elements
out of other elements.

00:17:23.500 --> 00:17:26.260
With Polymer everything is
elements all the way down.

00:17:26.260 --> 00:17:29.176
Those are the core
building blocks.

00:17:29.176 --> 00:17:30.550
You can also use
Polymer to build

00:17:30.550 --> 00:17:32.930
sets of elements,
pre-defined building blocks

00:17:32.930 --> 00:17:36.760
that others can use to build
elements or applications.

00:17:36.760 --> 00:17:39.250
Some of those elements are
visual, like buttons, and tabs,

00:17:39.250 --> 00:17:41.880
and sliders, and inputs,
and all the standard things

00:17:41.880 --> 00:17:44.806
you'd need to
build applications.

00:17:44.806 --> 00:17:46.430
But other elements
are utility elements

00:17:46.430 --> 00:17:47.470
that don't have the UI.

00:17:47.470 --> 00:17:49.780
So this can sometimes
strike people as strange.

00:17:49.780 --> 00:17:53.160
But if you think about it, HTML
has script tags, a head tag,

00:17:53.160 --> 00:17:54.422
title tag, style tag.

00:17:54.422 --> 00:17:56.380
These all don't necessarily
have any UI at all,

00:17:56.380 --> 00:17:58.130
but they're still HTML elements.

00:17:58.130 --> 00:18:01.054
Polymer didn't
invent this concept.

00:18:01.054 --> 00:18:03.220
So the first set of elements
we've been creating out

00:18:03.220 --> 00:18:04.719
in the open over
the last few months

00:18:04.719 --> 00:18:06.190
is Polymer Core Elements.

00:18:06.190 --> 00:18:08.930
So these are basic elements
that are generally useful

00:18:08.930 --> 00:18:10.654
and don't have a lot of style.

00:18:10.654 --> 00:18:12.070
There were some
blogs that thought

00:18:12.070 --> 00:18:13.570
this was the future
of Google style,

00:18:13.570 --> 00:18:17.010
but they intentionally
don't have a lot.

00:18:17.010 --> 00:18:18.720
So some of them are
utility elements

00:18:18.720 --> 00:18:21.460
you would find in
frameworks in the past,

00:18:21.460 --> 00:18:22.960
but with Polymer
those don't have

00:18:22.960 --> 00:18:25.470
to be baked in at that level
and can be used a la carte.

00:18:29.406 --> 00:18:31.280
So there's a few dozen
of these core elements

00:18:31.280 --> 00:18:33.120
and these are just
a few of them.

00:18:33.120 --> 00:18:36.450
So it's everything from icons
and tooltips and buttons

00:18:36.450 --> 00:18:39.090
and some of those utility
elements like core-ajax.

00:18:39.090 --> 00:18:41.930
So core-ajax makes
Ajax calls dead simple.

00:18:41.930 --> 00:18:43.500
core-localstorage
makes persistence

00:18:43.500 --> 00:18:46.420
as easy as binding any object
to it with data- binding.

00:18:46.420 --> 00:18:47.577
You've got a piece of data.

00:18:47.577 --> 00:18:49.660
You bind it to your local
storage and it persists.

00:18:49.660 --> 00:18:50.290
And that's it.

00:18:50.290 --> 00:18:53.310
That's all you have to do.

00:18:53.310 --> 00:18:55.991
So all the core elements
start with a core- namespace.

00:18:55.991 --> 00:18:58.490
And as we move forward, you're
going to see more of the gaps

00:18:58.490 --> 00:19:00.940
in Polymer fields using
elements like these.

00:19:00.940 --> 00:19:03.924
So we get asked about routing
or internationalization.

00:19:03.924 --> 00:19:06.090
We have some of those
experiments already out there.

00:19:06.090 --> 00:19:08.820
But you'll see these show up in
the future likely as elements,

00:19:08.820 --> 00:19:10.205
not baked into Polymer itself.

00:19:14.044 --> 00:19:15.460
So over the last
six months, we've

00:19:15.460 --> 00:19:17.126
been working on another
set of elements,

00:19:17.126 --> 00:19:21.184
ones that push the boundaries
of what's possible on the web.

00:19:21.184 --> 00:19:22.600
Today, we're
unveiling another set

00:19:22.600 --> 00:19:25.930
of elements that's part of
the material design effort.

00:19:25.930 --> 00:19:27.900
And we call them paper elements.

00:19:27.900 --> 00:19:31.350
So material design unifies
the user experience

00:19:31.350 --> 00:19:33.300
across all devices
and allows developers

00:19:33.300 --> 00:19:35.790
to create rich,
immersive experiences.

00:19:35.790 --> 00:19:39.830
So here's a quick look at
what we've made public today.

00:19:39.830 --> 00:19:42.520
So we built a sampler app that
showcases the various paper

00:19:42.520 --> 00:19:45.240
elements for developers and
that's also available today.

00:19:45.240 --> 00:19:46.619
It's linked off our homepage.

00:19:46.619 --> 00:19:48.160
And this is just a
brief taste of it.

00:19:48.160 --> 00:19:49.450
So let's take a look.

00:19:49.450 --> 00:19:53.155
So we've got check boxes and
radio buttons, toggle buttons.

00:19:53.155 --> 00:19:55.850
And all of this reacts
to both mouse and touch.

00:19:55.850 --> 00:20:00.250
So it works across
mobile and desktop alike.

00:20:00.250 --> 00:20:01.572
We have really cool input tags.

00:20:01.572 --> 00:20:03.530
They have that ink effect
I showed you earlier.

00:20:03.530 --> 00:20:04.680
We've got a validation.

00:20:04.680 --> 00:20:06.060
That's pretty cool.

00:20:06.060 --> 00:20:08.040
We even have these neat
floating label ones,

00:20:08.040 --> 00:20:09.280
which we like to use
a lot, because it's

00:20:09.280 --> 00:20:10.390
a really neat effect.

00:20:10.390 --> 00:20:13.161
So you see us use those
all over the place.

00:20:13.161 --> 00:20:14.660
So all of these are
available today.

00:20:14.660 --> 00:20:15.590
They're all in the sampler.

00:20:15.590 --> 00:20:17.006
And they're all a
work in progress

00:20:17.006 --> 00:20:19.850
and they're going to
continue to evolve.

00:20:19.850 --> 00:20:21.830
So we've also introduced
a bunch of primitives

00:20:21.830 --> 00:20:24.280
to create really
fancy animations.

00:20:24.280 --> 00:20:26.840
So from cross-fading,
scrolling headers the return on

00:20:26.840 --> 00:20:29.160
scroll up-- like you
see it right now--

00:20:29.160 --> 00:20:31.110
to systems that allow
the UI to animate

00:20:31.110 --> 00:20:34.490
across states while the focused
object or hero morphs across.

00:20:34.490 --> 00:20:36.710
So this is one of the
principles of material design,

00:20:36.710 --> 00:20:38.800
is that the object that's
in focus to the user

00:20:38.800 --> 00:20:43.750
should stay as you morph across
these different surfaces.

00:20:43.750 --> 00:20:46.987
So when you put it all
together, you get Topeka.

00:20:46.987 --> 00:20:49.320
And this is a little video
that they showed this morning

00:20:49.320 --> 00:20:53.160
in the keynote that shows you
how it all comes together.

00:20:53.160 --> 00:20:55.500
And this is all public today
on the Polymer website.

00:21:00.100 --> 00:21:02.100
So the title of the talk
mentioned a revolution.

00:21:02.100 --> 00:21:03.740
And this is all
certainly revolutionary

00:21:03.740 --> 00:21:05.290
for web development.

00:21:05.290 --> 00:21:07.760
But Polymer is only a smaller
part of a bigger story.

00:21:07.760 --> 00:21:11.707
And this is the ecosystem that
web components is creating.

00:21:11.707 --> 00:21:13.790
So Polymer is at the
forefront of this revolution.

00:21:13.790 --> 00:21:17.670
We are the pioneer,
to mix my metaphors.

00:21:17.670 --> 00:21:19.280
But we're not alone
in this endeavor.

00:21:19.280 --> 00:21:21.550
Others have already joined us.

00:21:21.550 --> 00:21:24.360
So our friends in Mozilla built
a similar library called x-tags

00:21:24.360 --> 00:21:27.040
and have began a set of
elements called brick.

00:21:27.040 --> 00:21:30.650
So x-tags and brick are roughly
analogous to Polymer and paper

00:21:30.650 --> 00:21:31.530
elements.

00:21:31.530 --> 00:21:33.130
So both Polymer and
x-tags are built

00:21:33.130 --> 00:21:34.860
on top of the same
polyfills, the ones we

00:21:34.860 --> 00:21:36.005
announced last year.

00:21:36.005 --> 00:21:37.880
So because of web
components, these libraries

00:21:37.880 --> 00:21:38.890
can compliment each other.

00:21:38.890 --> 00:21:41.015
We're not actually competing
and can work together,

00:21:41.015 --> 00:21:44.340
because developers
can mix and match.

00:21:44.340 --> 00:21:48.947
So Polymer is bootstrapping
this entire ecosystem.

00:21:48.947 --> 00:21:50.530
There's already
registries of elements

00:21:50.530 --> 00:21:53.391
like a customelements.io,
Component Kitchen

00:21:53.391 --> 00:21:54.890
is a cool effort
by a friend of ours

00:21:54.890 --> 00:21:56.990
to build a catalog
for these components.

00:21:56.990 --> 00:21:59.030
And webcomponents.org
exists for web developers

00:21:59.030 --> 00:22:01.394
to exchange ideas on
these core concepts.

00:22:01.394 --> 00:22:04.060
And all these are in addition to
the Polymer website and mailing

00:22:04.060 --> 00:22:06.820
list that we're creating.

00:22:06.820 --> 00:22:09.450
So as you can imagine most of
this work started from scratch.

00:22:09.450 --> 00:22:10.960
And it's a really good job.

00:22:10.960 --> 00:22:15.030
So we're moving on a lot of
these fronts all at once.

00:22:15.030 --> 00:22:17.917
This new ecosystem and method
for building applications

00:22:17.917 --> 00:22:19.500
out of all these
individual components

00:22:19.500 --> 00:22:22.532
requires a lot of new tools.

00:22:22.532 --> 00:22:23.990
Some of those tools
we're building.

00:22:23.990 --> 00:22:26.260
So last year, I showed off
a demo of the designer tool

00:22:26.260 --> 00:22:29.300
for components and I used it
extensively during my talk.

00:22:29.300 --> 00:22:32.409
This year we've made it look
more real or made it more real.

00:22:32.409 --> 00:22:34.450
So you can use it to
prototype and build elements

00:22:34.450 --> 00:22:35.540
and save and share them.

00:22:35.540 --> 00:22:37.320
So we call it Polymer designer.

00:22:37.320 --> 00:22:39.570
We recently put it up
on our website as well.

00:22:39.570 --> 00:22:41.130
And an updated
version launched today

00:22:41.130 --> 00:22:43.619
and we'll take a look
at it in a minute.

00:22:43.619 --> 00:22:46.035
And one thing we hear a lot
is about how building apps out

00:22:46.035 --> 00:22:48.118
of discrete components,
breaks network performance

00:22:48.118 --> 00:22:51.000
optimizations by causing
a lot of requests.

00:22:51.000 --> 00:22:54.140
So we built a tool called
Vulcanizer for deployment,

00:22:54.140 --> 00:22:56.680
can bundle together all of
your imports and components

00:22:56.680 --> 00:22:59.760
into a single CSS,
JS, and HTML files .

00:22:59.760 --> 00:23:03.635
So it even has flags for
deploying to CSP environments.

00:23:03.635 --> 00:23:05.010
And testing is
also an area we're

00:23:05.010 --> 00:23:07.010
working hard on that
people have asked us about.

00:23:07.010 --> 00:23:09.660
So right now we are using
Karma, Chai, and Mocha.

00:23:09.660 --> 00:23:12.710
And we built a harness for Mocha
that enables HTML-based test,

00:23:12.710 --> 00:23:16.757
rather than just JavaScript
as unit tests are done today.

00:23:16.757 --> 00:23:19.090
We've even built element
called core component page that

00:23:19.090 --> 00:23:21.381
can look at a component and
create a nice documentation

00:23:21.381 --> 00:23:21.946
page for it.

00:23:21.946 --> 00:23:23.320
All you need to
do is include one

00:23:23.320 --> 00:23:28.359
in the index of HTML of your
repo and the rest just works.

00:23:28.359 --> 00:23:29.900
So we've seen how
Polymer can be used

00:23:29.900 --> 00:23:33.250
to create immersive experiences
across devices, across phones,

00:23:33.250 --> 00:23:35.720
tablets, and desktops--
anywhere the web goes

00:23:35.720 --> 00:23:39.210
and that means TVs with
Chromecast as well.

00:23:39.210 --> 00:23:42.680
So Polymer and web components
goes everywhere the web goes.

00:23:42.680 --> 00:23:44.372
And the web has massive reach.

00:23:44.372 --> 00:23:45.830
So in fact, my
friend Alex has been

00:23:45.830 --> 00:23:47.920
working for the last few
weeks on a component that

00:23:47.920 --> 00:23:50.640
lets me push notifications
to a watch from a web app.

00:23:50.640 --> 00:23:53.420
And I happen to have
a watch right here.

00:23:53.420 --> 00:23:55.980
With web components, I can
go find the element I need,

00:23:55.980 --> 00:23:57.960
import it, and use it.

00:23:57.960 --> 00:24:00.725
So let's see how this
all works together.

00:24:00.725 --> 00:24:04.240
Go over to the demo machine.

00:24:04.240 --> 00:24:05.290
Which one's asleep?

00:24:10.680 --> 00:24:12.570
See if the leader
board is working

00:24:12.570 --> 00:24:13.570
while that's loading up.

00:24:22.484 --> 00:24:23.650
So here we have the catalog.

00:24:23.650 --> 00:24:25.401
This is the catalog
we've been working on.

00:24:25.401 --> 00:24:27.525
It's not public yet, because
it's still pretty much

00:24:27.525 --> 00:24:28.330
a work in progress.

00:24:28.330 --> 00:24:32.200
And I happen to know
that the element I need

00:24:32.200 --> 00:24:33.760
is called notification elements.

00:24:33.760 --> 00:24:36.150
So I can come to our
catalog and download it.

00:24:36.150 --> 00:24:38.550
And that gives me options
to download and zip

00:24:38.550 --> 00:24:40.144
the commands for
Bower or GitHub.

00:24:40.144 --> 00:24:42.560
GitHub is a little dangerous,
because it doesn't pull down

00:24:42.560 --> 00:24:44.669
all the dependencies for
you like the other ones.

00:24:44.669 --> 00:24:45.710
So let's go with the zip.

00:24:51.686 --> 00:24:54.190
So now imagine,
through the magic of IO

00:24:54.190 --> 00:24:56.930
that that magically got
over into my designer here.

00:24:56.930 --> 00:24:59.894
So we'll act like that
just kind of happens.

00:24:59.894 --> 00:25:02.310
So this is the designer tool,
which I talked about before.

00:25:02.310 --> 00:25:04.010
So we've got a
large canvas area,

00:25:04.010 --> 00:25:07.827
looks like we had last year
That's a little updated.

00:25:07.827 --> 00:25:09.410
And then on the right
hand side, we've

00:25:09.410 --> 00:25:10.920
got a Property
Inspector that allows

00:25:10.920 --> 00:25:13.170
you to inspect the properties
of something you dragged

00:25:13.170 --> 00:25:15.009
and a pallet of
components to drag out

00:25:15.009 --> 00:25:16.800
and a tree that lets
you select things that

00:25:16.800 --> 00:25:20.920
are in the canvas that might
not otherwise be selectable.

00:25:20.920 --> 00:25:23.150
So we're going to add
notifications to Topeka.

00:25:23.150 --> 00:25:25.500
So first, I'm to
drag out the app.

00:25:25.500 --> 00:25:27.370
And like everything
in Polymer, everything

00:25:27.370 --> 00:25:29.578
is an element, everything
works in the designer tool.

00:25:29.578 --> 00:25:31.990
So I can actually drag
out the whole application,

00:25:31.990 --> 00:25:35.630
maximize it and I need to
connected it to a data source.

00:25:35.630 --> 00:25:38.060
So I'll do that.

00:25:38.060 --> 00:25:40.040
And then I have to
connect the two together.

00:25:40.040 --> 00:25:41.115
So let's give it a user.

00:25:44.287 --> 00:25:45.870
So I already logged
in on this machine

00:25:45.870 --> 00:25:47.286
when I was doing
the demo earlier,

00:25:47.286 --> 00:25:49.532
so it already has
the user local.

00:25:49.532 --> 00:25:50.740
And let's give it categories.

00:25:50.740 --> 00:25:52.156
So this is all
just using the data

00:25:52.156 --> 00:25:54.145
binding features I was
talking about before.

00:25:57.080 --> 00:25:58.256
We have our whole app.

00:25:58.256 --> 00:25:59.630
So this actually
works right here

00:25:59.630 --> 00:26:00.295
in the middle of the designer.

00:26:00.295 --> 00:26:01.410
It's pretty neat.

00:26:01.410 --> 00:26:04.460
But we want to
add notifications.

00:26:04.460 --> 00:26:06.500
So let me come back
here to components,

00:26:06.500 --> 00:26:07.890
grab our notification element.

00:26:07.890 --> 00:26:09.598
So this is one of
those utility elements.

00:26:09.598 --> 00:26:12.254
It doesn't have the UI.

00:26:12.254 --> 00:26:13.920
And it has a hard
coded message to begin

00:26:13.920 --> 00:26:14.961
with that says, hi there.

00:26:14.961 --> 00:26:17.900
So let's fix that and instead
to Topekaapp.user.score.

00:26:21.060 --> 00:26:22.840
So now when the
notification is triggered,

00:26:22.840 --> 00:26:25.940
it will push the
score to the device.

00:26:25.940 --> 00:26:30.159
But there's still a little bit
I have to do to wire it up.

00:26:30.159 --> 00:26:31.450
So let' flip over to code view.

00:26:31.450 --> 00:26:33.116
So this is the code
that we're creating.

00:26:36.220 --> 00:26:40.070
And notice that so far, I've
done no JavaScript whatsoever.

00:26:40.070 --> 00:26:43.410
This is all just HTML
and data binding.

00:26:43.410 --> 00:26:53.140
So I'm going to add an event
handler to the quiz, which

00:26:53.140 --> 00:26:55.910
I happen to know is
called onQuizDone.

00:26:55.910 --> 00:26:59.620
And I'm going to use
the event binding,

00:26:59.620 --> 00:27:02.550
so that it will call this method
when this event is triggered.

00:27:02.550 --> 00:27:04.465
And now I actually
have define the method.

00:27:21.520 --> 00:27:26.060
So what I did there is when
the onQuizDone event happens,

00:27:26.060 --> 00:27:29.700
it calls quizDone grabs the
notification alert element

00:27:29.700 --> 00:27:31.610
that's sitting here on
the page right here,

00:27:31.610 --> 00:27:33.720
triggers it's notify
method, and gives it

00:27:33.720 --> 00:27:35.136
a message of
Topekaapp.user.score.

00:27:37.904 --> 00:27:40.320
And now if the demo gods are
shining on me a little better

00:27:40.320 --> 00:27:43.630
than they were before,
I should be able

00:27:43.630 --> 00:27:50.060
go over the whole
vision in a second.

00:27:50.060 --> 00:27:58.900
Let me not show off my password
to all of I/O. Reload it.

00:28:09.190 --> 00:28:10.100
I'm sorry.

00:28:10.100 --> 00:28:10.895
Wrong one.

00:28:10.895 --> 00:28:11.645
That was my fault.

00:28:16.179 --> 00:28:17.720
I'm just going to
sign in here really

00:28:17.720 --> 00:28:19.386
quickly, because
that's the boring part.

00:28:26.669 --> 00:28:28.750
All right.

00:28:28.750 --> 00:28:32.390
So we have our app here.

00:28:32.390 --> 00:28:36.220
So people tell me that you
don't want to demo anything

00:28:36.220 --> 00:28:37.435
with Wi-Fi or internet.

00:28:37.435 --> 00:28:39.830
And apparently
Bluetooth is even worse

00:28:39.830 --> 00:28:41.780
in an environment like this.

00:28:41.780 --> 00:28:44.880
So who knows if this is
actually going to work.

00:28:44.880 --> 00:28:46.650
But let's go back to
our favorite category

00:28:46.650 --> 00:28:49.241
and answer the questions
we know about all ready.

00:28:49.241 --> 00:28:49.740
Gorgonzola.

00:28:52.661 --> 00:28:53.160
Hey.

00:28:53.160 --> 00:28:53.720
There we go.

00:28:53.720 --> 00:28:55.460
It pushed eight to the device.

00:28:55.460 --> 00:28:58.452
It went to sleep at
exactly the wrong time.

00:28:58.452 --> 00:29:00.836
[APPLAUSE]

00:29:00.836 --> 00:29:02.252
Bring it back to
the presentation.

00:29:08.562 --> 00:29:10.770
So that's just a little
taste of the ecosystem that's

00:29:10.770 --> 00:29:13.330
being powered by Polymer
and web components.

00:29:13.330 --> 00:29:15.389
So what did we
learn about today.

00:29:15.389 --> 00:29:17.430
So we've learned that web
components are awesome.

00:29:17.430 --> 00:29:19.190
And if you want to
know how awesome,

00:29:19.190 --> 00:29:21.680
Eric's going to talk about
that in a little bit.

00:29:21.680 --> 00:29:23.390
We learned about
Polymer itself and how

00:29:23.390 --> 00:29:25.357
to build elements
and use elements.

00:29:25.357 --> 00:29:27.690
We've learned that we've built
a lot of elements already

00:29:27.690 --> 00:29:29.148
and they come in
two different sets

00:29:29.148 --> 00:29:30.660
so far-- core and
paper elements.

00:29:30.660 --> 00:29:32.620
And there's a lot of
other ones out there.

00:29:32.620 --> 00:29:35.724
And Polymer is just a small
part of a really big ecosystem

00:29:35.724 --> 00:29:36.390
that's starting.

00:29:36.390 --> 00:29:38.400
It's all powered
by web components.

00:29:38.400 --> 00:29:41.020
So this ecosystem is
just getting started.

00:29:41.020 --> 00:29:44.000
And there's a lot you can
do to join the revolution.

00:29:44.000 --> 00:29:48.110
So you can build an
element, wrap an API.

00:29:48.110 --> 00:29:50.530
So this has gotten
really popular at Google.

00:29:50.530 --> 00:29:52.490
So a lot of people
building like cloud APIs

00:29:52.490 --> 00:29:54.630
or even browser APIs
that have figured out

00:29:54.630 --> 00:29:57.810
that if you wrap their
API in a custom element,

00:29:57.810 --> 00:30:00.374
it makes it really consumable
and easy for developers to use

00:30:00.374 --> 00:30:02.290
and they can also stick
it in a designer tool,

00:30:02.290 --> 00:30:04.655
and it's really fun.

00:30:04.655 --> 00:30:05.530
You can build an app.

00:30:05.530 --> 00:30:06.269
So we built one.

00:30:06.269 --> 00:30:07.060
Now it's your turn.

00:30:07.060 --> 00:30:08.601
We would prefer it
not be a quiz app,

00:30:08.601 --> 00:30:10.890
because we've already done that.

00:30:10.890 --> 00:30:13.390
You can stay put for Eric's
talk in just a little bit, right

00:30:13.390 --> 00:30:17.877
here in the same room, and
come check out Robert at 4:00.

00:30:17.877 --> 00:30:19.460
So the ecosystem
just getting started,

00:30:19.460 --> 00:30:21.490
but we're also just
getting started.

00:30:21.490 --> 00:30:24.520
So public today is the
Polymer Developer Preview,

00:30:24.520 --> 00:30:26.850
the paper elements
also went public today,

00:30:26.850 --> 00:30:29.620
new version of designer,
brand new tutorial, whole new

00:30:29.620 --> 00:30:32.304
boarding experience,
documentation for everything.

00:30:32.304 --> 00:30:33.720
It's all still a
work in progress,

00:30:33.720 --> 00:30:37.020
but it's all public
and available today

00:30:37.020 --> 00:30:39.226
at polymerproject.org.

00:30:39.226 --> 00:30:41.250
So that's Polymer.

00:30:41.250 --> 00:30:42.942
So we'll do some Q&amp;A
in just a minute,

00:30:42.942 --> 00:30:44.900
but I just wanted to give
you a quick reminder.

00:30:44.900 --> 00:30:48.330
So if you stay here,
in about 29 minutes,

00:30:48.330 --> 00:30:50.270
Eric Bidelman will
Polymer and web components

00:30:50.270 --> 00:30:52.561
change everything you know
about web development, which

00:30:52.561 --> 00:30:55.570
is officially the longest
title in I/O history.

00:30:55.570 --> 00:30:57.886
And then at 4
o'clock in Room four,

00:30:57.886 --> 00:30:59.260
which is pretty
easy to remember,

00:30:59.260 --> 00:31:02.870
It's unlock the Next Era of
UI Development with Polymer.

00:31:02.870 --> 00:31:04.440
And Rob Dodson is
doing that talk.

00:31:04.440 --> 00:31:07.270
And he's going to do a really
deep dive on the material

00:31:07.270 --> 00:31:09.340
design and paper elements
aspect of Polymer.

00:31:09.340 --> 00:31:10.929
It's going to be really cool.

00:31:10.929 --> 00:31:12.220
So there's the thank you slide.

00:31:12.220 --> 00:31:13.540
There's the feedback URL.

00:31:13.540 --> 00:31:16.250
I appreciate any
feedback you have there.

00:31:16.250 --> 00:31:17.445
And let's go to questions.

00:31:26.559 --> 00:31:28.850
AUDIENCE: My questions are
about material design, which

00:31:28.850 --> 00:31:30.560
makes me wonder if
I'm in the wrong talk.

00:31:30.560 --> 00:31:34.070
But I noticed that when you
shrank the browser window

00:31:34.070 --> 00:31:38.040
to begin with, that the
elements didn't re-size with it.

00:31:38.040 --> 00:31:41.250
Is there a vision to do
that with Polymer paper

00:31:41.250 --> 00:31:44.690
to where when you
responsively re-size a window,

00:31:44.690 --> 00:31:46.530
the elements will
still track in place

00:31:46.530 --> 00:31:49.442
rather than just popping
between media queries?

00:31:49.442 --> 00:31:50.900
MATTHEW MCNULTY:
I think it depends

00:31:50.900 --> 00:31:53.670
on which screen you're viewing.

00:31:53.670 --> 00:31:55.430
So I think it depends
on how it's set up.

00:31:55.430 --> 00:31:58.080
Right now, we've got it set up
to have a card in the middle

00:31:58.080 --> 00:31:59.655
and it changes as you go.

00:31:59.655 --> 00:32:02.030
Depending on which scaffold
you use and how you build it,

00:32:02.030 --> 00:32:03.400
some are of them are more
responsive than that.

00:32:03.400 --> 00:32:04.290
So it really depends.

00:32:04.290 --> 00:32:08.605
Most of the widgets are whatever
width of their container.

00:32:08.605 --> 00:32:11.310
So if the container changes
size, it will just change size.

00:32:11.310 --> 00:32:12.810
AUDIENCE: And the
follow up to that.

00:32:12.810 --> 00:32:14.720
I know that Polymer
is very cool,

00:32:14.720 --> 00:32:17.010
but it's also very much
a prototype right now.

00:32:17.010 --> 00:32:19.952
And for people who are building
projects that need to get out

00:32:19.952 --> 00:32:21.410
the door today are
using frameworks

00:32:21.410 --> 00:32:23.060
like Angular or something else.

00:32:23.060 --> 00:32:25.465
Will there be a
way to incorporate

00:32:25.465 --> 00:32:27.840
Polymer paper and some of the
cool UX things you guys are

00:32:27.840 --> 00:32:30.740
doing with other frameworks or
do you have to throw it away

00:32:30.740 --> 00:32:32.482
and start from
scratch with Polymer?

00:32:32.482 --> 00:32:34.690
MATTHEW MCNULTY: That's one
of the really cool things

00:32:34.690 --> 00:32:38.000
about custom elements is that
they're just HTML elements.

00:32:38.000 --> 00:32:40.050
So anything that knows
how to deal with HTML

00:32:40.050 --> 00:32:41.850
can also use Polymer elements.

00:32:41.850 --> 00:32:44.320
So one of the things we
like to talk about with this

00:32:44.320 --> 00:32:46.230
is that there's this barrier.

00:32:46.230 --> 00:32:48.110
There's the world
outside of an element

00:32:48.110 --> 00:32:49.901
and there's the world
inside of an element.

00:32:49.901 --> 00:32:52.080
So from the outside,
Polymer elements

00:32:52.080 --> 00:32:53.860
look just like every
other HTML element,

00:32:53.860 --> 00:32:56.972
so they have properties
and methods and attributes.

00:32:56.972 --> 00:32:58.430
So they can be
consumed by anything

00:32:58.430 --> 00:33:00.360
that uses HTML, or pushes out.

00:33:00.360 --> 00:33:01.960
It's inside the
element that you have

00:33:01.960 --> 00:33:04.260
all the goodies that
Polymer provides.

00:33:04.260 --> 00:33:06.785
And that's where if you're
actually inside building

00:33:06.785 --> 00:33:09.160
a Polymer element, and you
started to use other framework

00:33:09.160 --> 00:33:11.339
you could get in trouble,
mostly because they

00:33:11.339 --> 00:33:13.630
don't know how to do a Shadow
DOM and things like that.

00:33:13.630 --> 00:33:16.370
But from just using elements,
including the material design

00:33:16.370 --> 00:33:18.760
elements, you can
just do that today.

00:33:18.760 --> 00:33:21.400
AUDIENCE: Thanks.

00:33:21.400 --> 00:33:22.370
MATTHEW MCNULTY: Next.

00:33:22.370 --> 00:33:23.440
We'll go in the back.

00:33:23.440 --> 00:33:25.830
AUDIENCE: So two questions
about the ecosystem.

00:33:25.830 --> 00:33:28.517
One, is there any
component directory

00:33:28.517 --> 00:33:30.850
that's trying to include both
Polymer components as well

00:33:30.850 --> 00:33:32.420
as x-tags components.

00:33:32.420 --> 00:33:35.020
And then can you speak at all
about other browser support,

00:33:35.020 --> 00:33:38.120
Safari in particular?

00:33:38.120 --> 00:33:40.250
MATTHEW MCNULTY: Sure.

00:33:40.250 --> 00:33:42.540
So to the first question,
so some of the ones

00:33:42.540 --> 00:33:44.290
I showed you there,
like customelements.io

00:33:44.290 --> 00:33:46.290
is a registry of all
elements, regardless

00:33:46.290 --> 00:33:47.770
of whether they're
Polymer or not.

00:33:47.770 --> 00:33:49.350
The catalog that
we're building is

00:33:49.350 --> 00:33:51.100
intended to be just
web components and not

00:33:51.100 --> 00:33:52.350
Polymer specific as well.

00:33:52.350 --> 00:33:54.196
I think you saw
that in the title.

00:33:54.196 --> 00:33:56.070
So I think the idea is
that it doesn't really

00:33:56.070 --> 00:33:57.410
matter how you
built these again,

00:33:57.410 --> 00:33:59.659
kind of going back to the
answer of the last question,

00:33:59.659 --> 00:34:02.775
they can still be
consumed by everyone.

00:34:02.775 --> 00:34:04.150
And what was the
second question?

00:34:04.150 --> 00:34:04.667
Sorry.

00:34:04.667 --> 00:34:06.625
AUDIENCE: Safari support
and any other browsers

00:34:06.625 --> 00:34:07.553
that have committed.

00:34:07.553 --> 00:34:08.469
MATTHEW MCNULTY: Sure.

00:34:08.469 --> 00:34:11.030
So you're talking native
support specifically, right?

00:34:11.030 --> 00:34:12.000
AUDIENCE: Right.

00:34:12.000 --> 00:34:12.916
MATTHEW MCNULTY: Yeah.

00:34:12.916 --> 00:34:14.940
So Mozilla has
progressed quite a bit.

00:34:14.940 --> 00:34:17.060
They've shipped Shadow DOM.

00:34:17.060 --> 00:34:20.871
They have not shipped
custom elements yet.

00:34:20.871 --> 00:34:22.870
They've shipped custom
elements, not Shadom DOM.

00:34:22.870 --> 00:34:23.735
Sorry.

00:34:23.735 --> 00:34:25.520
Had to look for a
little support there.

00:34:25.520 --> 00:34:26.603
But they're working on it.

00:34:26.603 --> 00:34:28.102
And they're working
it very actively

00:34:28.102 --> 00:34:29.980
and we're talking to them a lot.

00:34:29.980 --> 00:34:32.504
Safari, we don't really know.

00:34:32.504 --> 00:34:34.170
They're not very
public with their plans

00:34:34.170 --> 00:34:35.336
about these kinds of things.

00:34:35.336 --> 00:34:37.880
have expressed interest in
the topic, especially lately.

00:34:37.880 --> 00:34:40.213
And that's a really good sign,
but we don't really know.

00:34:40.213 --> 00:34:42.990
The polyfill, so people who are
using this like Salesforce.com

00:34:42.990 --> 00:34:45.649
have been using the polyfill,
especially for mobile Safari,

00:34:45.649 --> 00:34:47.940
and have found the performance
to be pretty acceptable.

00:34:47.940 --> 00:34:50.580
It depends on what
you're going for.

00:34:50.580 --> 00:34:52.931
So people ask about
the performance

00:34:52.931 --> 00:34:55.514
of the polyfills a lot, and it's
not really about performance.

00:34:55.514 --> 00:34:57.690
It's more about
API compatibility.

00:34:57.690 --> 00:35:00.947
But most people have found
it relatively respectable.

00:35:00.947 --> 00:35:01.780
AUDIENCE: Thank you.

00:35:06.669 --> 00:35:08.460
MATTHEW MCNULTY: Answered
his question too.

00:35:08.460 --> 00:35:09.580
Anyone else?

00:35:09.580 --> 00:35:11.710
AUDIENCE: What about IE?

00:35:11.710 --> 00:35:13.751
MATTHEW MCNULTY: The
question was, what about IE?

00:35:16.290 --> 00:35:18.810
You want anything
official on that?

00:35:18.810 --> 00:35:21.370
So IE has recently started
being a little bit more

00:35:21.370 --> 00:35:23.879
open with everyone about
what their plans are.

00:35:23.879 --> 00:35:25.920
And they seem to be
interested in web components.

00:35:25.920 --> 00:35:26.795
We don't really know.

00:35:26.795 --> 00:35:29.210
They don't tell
everyone their plans.

00:35:29.210 --> 00:35:31.340
But they're involved.

00:35:31.340 --> 00:35:34.537
You actually see them pop up on
our mailing list occasionally.

00:35:34.537 --> 00:35:36.370
And they've done some
experiments internally

00:35:36.370 --> 00:35:38.140
on WinJS and Polymer
together, that we've

00:35:38.140 --> 00:35:39.300
helped contribute to.

00:35:39.300 --> 00:35:41.880
So they seem very interested
in Polymer and web components

00:35:41.880 --> 00:35:44.046
in general, but we're going
to have to wait and see.

00:35:47.485 --> 00:35:49.315
In the back?

00:35:49.315 --> 00:35:49.940
AUDIENCE: Yeah.

00:35:49.940 --> 00:35:51.800
I was wondering.

00:35:51.800 --> 00:35:56.500
So what we've seen with
material design demos

00:35:56.500 --> 00:36:01.720
today, the performance in
the browser looks incredible,

00:36:01.720 --> 00:36:07.170
how much of that is unique
to work Polymer has done?

00:36:07.170 --> 00:36:10.820
How much of that is
just continued work

00:36:10.820 --> 00:36:13.904
by the Chrome team to
improve performance?

00:36:13.904 --> 00:36:14.820
MATTHEW MCNULTY: Sure.

00:36:14.820 --> 00:36:16.735
So they're actually
kind of intermixed

00:36:16.735 --> 00:36:17.840
if you think about it.

00:36:17.840 --> 00:36:19.548
So because we're part
of the Chrome team,

00:36:19.548 --> 00:36:22.202
we're a lot of the people that
are causing the bugs to be

00:36:22.202 --> 00:36:23.660
filed, that are
getting fixed, that

00:36:23.660 --> 00:36:26.250
are causing things
to get faster.

00:36:26.250 --> 00:36:28.480
And at the same time,
we're also codifying

00:36:28.480 --> 00:36:30.860
a lot of the best practices
of the Chrome team

00:36:30.860 --> 00:36:32.810
into the elements
themselves, so that when

00:36:32.810 --> 00:36:34.476
people use them to
create things they're

00:36:34.476 --> 00:36:36.400
automatically on
that well lit path.

00:36:36.400 --> 00:36:37.650
So it's a combination of both.

00:36:41.250 --> 00:36:43.480
Anything else?

00:36:43.480 --> 00:36:43.980
Yeah.

00:36:43.980 --> 00:36:47.210
One more.

00:36:47.210 --> 00:36:49.200
AUDIENCE: Just a follow
up on the performance,

00:36:49.200 --> 00:36:52.350
could you talk about the
long-term performance

00:36:52.350 --> 00:36:57.330
of using DOM elements and DOM
manipulation versus frameworks

00:36:57.330 --> 00:37:01.474
like React that try
to minimize DOM?

00:37:01.474 --> 00:37:02.390
MATTHEW MCNULTY: Sure.

00:37:02.390 --> 00:37:05.900
So it's definitely a
different world, right?

00:37:05.900 --> 00:37:09.980
So to start off with,
today with the polyfills,

00:37:09.980 --> 00:37:14.070
Polymer is basically as good as
any other existing JavaScript

00:37:14.070 --> 00:37:16.190
frameworks out there.

00:37:16.190 --> 00:37:18.070
We don't do anything worse.

00:37:18.070 --> 00:37:21.370
So the idea is that it's
even better on Chrome.

00:37:21.370 --> 00:37:22.710
That has native support.

00:37:22.710 --> 00:37:25.060
So that's the first
thing I wanted to say.

00:37:25.060 --> 00:37:28.340
The other thing is when the team
that works on Polymer, worked

00:37:28.340 --> 00:37:32.890
on a framework called Enyo
at webOS, a few years ago--

00:37:32.890 --> 00:37:35.370
philosophically, React
and Polymer and Enyo

00:37:35.370 --> 00:37:37.420
are all kind of similar
with a component mindset,

00:37:37.420 --> 00:37:40.870
but they had the idea of
you never touch the DOM.

00:37:40.870 --> 00:37:42.680
The DOM is slow.

00:37:42.680 --> 00:37:44.550
You never want to touch the DOM.

00:37:44.550 --> 00:37:48.460
We'd actually just scored in in
our HTML, giant HTML strings.

00:37:48.460 --> 00:37:49.940
That was the fastest path.

00:37:49.940 --> 00:37:52.065
And then when we came to
Chrome, the guys at Chrome

00:37:52.065 --> 00:37:53.190
were like, no that's crazy.

00:37:53.190 --> 00:37:54.930
We were like, no, no,
this is the thing.

00:37:54.930 --> 00:37:56.471
And it turns out
that that's actually

00:37:56.471 --> 00:37:57.910
been changing a lot over time.

00:37:57.910 --> 00:37:59.960
So once we actually
made it to Chrome,

00:37:59.960 --> 00:38:02.810
the DOM APIs were
incredibly fast.

00:38:02.810 --> 00:38:06.090
So it turned out not to be
the penalty we thought it was.

00:38:06.090 --> 00:38:08.059
So I think that it's
an area of improvement

00:38:08.059 --> 00:38:09.350
potentially for Chrome as well.

00:38:09.350 --> 00:38:11.349
I know they've identified
a lot of things there.

00:38:11.349 --> 00:38:13.720
It's all public on
the Blink mailing list

00:38:13.720 --> 00:38:15.690
as to how to improve
DOM performance.

00:38:15.690 --> 00:38:19.242
But what's great about it is by
relying on that core platform,

00:38:19.242 --> 00:38:20.450
there's one point of failure.

00:38:20.450 --> 00:38:23.290
There is one point that you
can use to improve performance

00:38:23.290 --> 00:38:26.570
across everyone and
that's the Blink runtime.

00:38:26.570 --> 00:38:28.660
If you have your own
whole framework on top

00:38:28.660 --> 00:38:30.790
or that has a server component,
it's a lot of different things

00:38:30.790 --> 00:38:32.840
that have to come together
and get faster all at once

00:38:32.840 --> 00:38:33.381
to get there.

00:38:37.407 --> 00:38:39.901
Anything else?

00:38:39.901 --> 00:38:40.400
All right.

00:38:40.400 --> 00:38:41.490
Thanks everyone.

00:38:41.490 --> 00:38:43.040
[APPLAUSE]

