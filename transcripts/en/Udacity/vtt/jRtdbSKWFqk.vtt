WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
So as that last quiz just showed us,

00:00:02.000 --> 00:00:04.000
in order to figure out whether an expression is True or not

00:00:04.000 --> 00:00:06.000
or what it evaluates to,

00:00:06.000 --> 00:00:08.000
we're going to need to keep track of the values of variables--

00:00:08.000 --> 00:00:12.000
which might change with assignment statements.

00:00:12.000 --> 00:00:15.000
So we're going to track the current State of the World.

00:00:15.000 --> 00:00:18.000
Is (x) 1 or is (x) 2? We don't know yet.

00:00:18.000 --> 00:00:21.000
Is the King of France bald, or not? We're going to have to find out.

00:00:21.000 --> 00:00:24.000
It's a question that can be answered empirically, by looking at the state of things.

00:00:24.000 --> 00:00:28.000
So to figure out what an expression like (x + 2) means--

00:00:28.000 --> 00:00:30.000
when we're doing our interpreting,

00:00:30.000 --> 00:00:32.000
when we're writing our Web browser,

00:00:32.000 --> 00:00:34.000
we're going to need to keep around some

00:00:34.000 --> 00:00:36.000
notion of the values of the variables--this State of the World.

00:00:36.000 --> 00:00:40.000
And we're going to do that with a mapping from variable names,

00:00:40.000 --> 00:00:42.000
like (x), to values.

00:00:42.000 --> 00:00:45.000
In Python dictionary-style, that might be something like:

00:00:45.000 --> 00:00:47.000
"x" currently has the value, 3.

00:00:47.000 --> 00:00:49.000
This mapping is called the State,

00:00:49.000 --> 00:00:52.000
and this is a super important concept in programming languages.

00:00:52.000 --> 00:00:55.000
It's kind of like asking: what's the current temperature?

00:00:55.000 --> 00:00:58.000
Depends on the current state of the world--and it may change, over time.

00:00:58.000 --> 00:01:00.000
We'll need a lot of bookkeeping to keep track of it.

00:01:00.000 --> 00:01:03.000
So as we hinted earlier, a fairly direct way to do this would be

00:01:03.000 --> 00:01:08.000
just to use a Python dictionary that maps strings--variable names--to values.

00:01:08.000 --> 00:01:10.000
If we had something like this,

00:01:10.000 --> 00:01:12.000
we could easily evaluate (x * y)

00:01:12.000 --> 00:01:15.000
in this context, in this state--

00:01:15.000 --> 00:01:17.000
and determine that it's True for this state.

00:01:17.000 --> 00:01:21.000
Right now, "x" is 2; right now, "y" is 3; (2 * 3) is 6.

00:01:21.000 --> 00:01:25.000
So the value of this expression is True--if this is the State of the World.

00:01:25.000 --> 00:01:29.000
Now--later, we may want our environment to be a little more complicated

00:01:29.000 --> 00:01:31.000
than just a single Python mapping.

00:01:31.000 --> 00:01:35.000
So we're going to introduce an abstract function to query it.

00:01:35.000 --> 00:01:38.000
So we'll just make a promise to ourselves.

00:01:38.000 --> 00:01:41.000
We're going to write a function called environment_lookup,

00:01:41.000 --> 00:01:44.000
where you pass in an environment--probably a dictionary,

00:01:44.000 --> 00:01:47.000
but we may make it more complicated later--

00:01:47.000 --> 00:01:49.000
and a variable_name, and you get the answer out.

00:01:49.000 --> 00:01:51.000
So if this is our environment, e,

00:01:51.000 --> 00:01:53.000
calling env_lookup of this environment, e,

00:01:53.000 --> 09:59:59.000
and asking for the variable, "y", gives us back the value, 3.

