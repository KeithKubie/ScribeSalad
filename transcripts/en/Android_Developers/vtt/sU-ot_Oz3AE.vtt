WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.374
[MUSIC PLAYING]

00:00:06.748 --> 00:00:09.880
YIGIT BOYAR: So today, we
are going to talk about Room.

00:00:09.880 --> 00:00:13.180
So we asked people to write
offline-ready applications.

00:00:13.180 --> 00:00:17.220
We want your application to work
without the network connection.

00:00:17.220 --> 00:00:21.250
But if you don't have a proper
model inside your application,

00:00:21.250 --> 00:00:24.040
it's pretty much impossible
to write a good offline

00:00:24.040 --> 00:00:25.190
experience.

00:00:25.190 --> 00:00:28.030
So for that reason,
you do need a database.

00:00:28.030 --> 00:00:31.090
Luckily, on Android,
we have SQLite.

00:00:31.090 --> 00:00:34.550
And SQLite is a really,
really awesome technology.

00:00:34.550 --> 00:00:37.210
It's very fast,
and when you need

00:00:37.210 --> 00:00:41.920
to optimize it for your use
case, it's very easy to do so.

00:00:41.920 --> 00:00:43.750
It's a very powerful
query language.

00:00:43.750 --> 00:00:47.470
You can express many different
things, and make it concise,

00:00:47.470 --> 00:00:48.850
and easily grab the data.

00:00:48.850 --> 00:00:51.750
It's the biggest advantage
compared to other object

00:00:51.750 --> 00:00:54.280
stores are key-value stores.

00:00:54.280 --> 00:00:56.367
And SQLite also
scales very well.

00:00:56.367 --> 00:00:58.950
I mean, for an application, you
probably won't have much data.

00:00:58.950 --> 00:01:00.866
Well, you can have
multiple gigabytes of data,

00:01:00.866 --> 00:01:02.620
and SQLite will be just fine.

00:01:02.620 --> 00:01:05.019
And there are companies
using it on the back end.

00:01:05.019 --> 00:01:07.820
So for your scalable
to data size needs,

00:01:07.820 --> 00:01:10.490
SQLite will be perfect.

00:01:10.490 --> 00:01:15.340
Now, SQLite on Android
was not that cool.

00:01:15.340 --> 00:01:17.650
You need to write out
a boilerplate code

00:01:17.650 --> 00:01:22.480
to convert between your Java or
Kotlin objects and your SQLite.

00:01:22.480 --> 00:01:24.290
There is no compile time safety.

00:01:24.290 --> 00:01:25.990
So if you're building
an SQL query,

00:01:25.990 --> 00:01:28.960
and you forget, like,
a one comma if case,

00:01:28.960 --> 00:01:30.550
you're going to get
a runtime crash,

00:01:30.550 --> 00:01:33.760
and it's very hard to
test all those cases.

00:01:33.760 --> 00:01:36.450
You also cannot observe
what has changed.

00:01:36.450 --> 00:01:38.860
Now, we want people to
write reactive applications

00:01:38.860 --> 00:01:42.370
or reactive UIs, and if you
cannot observe your data model,

00:01:42.370 --> 00:01:43.120
it's kind of hard.

00:01:43.120 --> 00:01:45.940
You have to build it yourself.

00:01:45.940 --> 00:01:48.010
So we built it for you.

00:01:48.010 --> 00:01:51.310
So around two years
ago, we shipped Room.

00:01:51.310 --> 00:01:53.250
We introduced a
compile time safety,

00:01:53.250 --> 00:01:57.010
we introduced observability,
and we introduced a strong IDE

00:01:57.010 --> 00:01:57.910
integration.

00:01:57.910 --> 00:02:00.400
As you can notice with
Room, with Navigation,

00:02:00.400 --> 00:02:01.990
this is a big theme for us.

00:02:01.990 --> 00:02:05.590
We want to develop libraries
together with Android Studio

00:02:05.590 --> 00:02:08.910
to provide a nice
user experience.

00:02:08.910 --> 00:02:12.010
Then this year's I/O, we
introduced write-ahead logging,

00:02:12.010 --> 00:02:14.590
which speeds up SQLite a lot.

00:02:14.590 --> 00:02:17.020
And we also introduced
support for big paging

00:02:17.020 --> 00:02:20.030
so that you can have very
large datasets and queries,

00:02:20.030 --> 00:02:23.540
and you can easily load
them into a recycler view.

00:02:23.540 --> 00:02:27.430
2.0 release is just our
conversion from Android Support

00:02:27.430 --> 00:02:28.830
to AndroidX.

00:02:28.830 --> 00:02:31.020
And we kept it the
same as 1.1 point

00:02:31.020 --> 00:02:34.042
so that you can have
an easy migration.

00:02:34.042 --> 00:02:38.180
And 2.1 is what we're
going to talk about today.

00:02:38.180 --> 00:02:41.255
And this is actually
kind of the X of 2.0.

00:02:41.255 --> 00:02:42.730
It's a really large release.

00:02:42.730 --> 00:02:46.630
We have full-text search, VIEWs,
multi-instance invalidation,

00:02:46.630 --> 00:02:48.910
AutoValue, and more RX stuff.

00:02:48.910 --> 00:02:50.430
So let's talk about them.

00:02:50.430 --> 00:02:51.430
DANIEL SANTIAGO: Sweet.

00:02:51.430 --> 00:02:54.490
One of the pretty cool new
features we added in 2.1--

00:02:54.490 --> 00:02:56.460
it's Full-Text Search, or FTS.

00:02:56.460 --> 00:03:00.700
And FTS is basically a way
to index text documents

00:03:00.700 --> 00:03:03.290
and make them searchable.

00:03:03.290 --> 00:03:05.782
Let's take a look at an example.

00:03:05.782 --> 00:03:09.800
Imagine we have a music app, and
we want a search functionality

00:03:09.800 --> 00:03:10.340
to it.

00:03:10.340 --> 00:03:11.642
You have a search box.

00:03:11.642 --> 00:03:13.100
You want to type
something, and you

00:03:13.100 --> 00:03:17.160
want to be able to find
songs with that music.

00:03:17.160 --> 00:03:20.000
If we have Room, we express.

00:03:20.000 --> 00:03:23.090
We store the song
data in a table.

00:03:23.090 --> 00:03:24.860
That's an entity.

00:03:24.860 --> 00:03:28.760
Conveniently, we have our
label as an embedded object.

00:03:28.760 --> 00:03:30.950
And our song labels--

00:03:30.950 --> 00:03:33.290
what's the song name, the
album name, and artist name--

00:03:33.290 --> 00:03:35.060
this is kind of
like what we want

00:03:35.060 --> 00:03:38.750
to search and make the index.

00:03:38.750 --> 00:03:42.320
If we were to do this
without FTS right now,

00:03:42.320 --> 00:03:45.120
we need to write a query.

00:03:45.120 --> 00:03:49.790
And basically, you would have
to use the LIKE operator.

00:03:49.790 --> 00:03:52.140
This is not very good.

00:03:52.140 --> 00:03:53.250
It's very limited.

00:03:53.250 --> 00:03:56.480
That percentage sign is
kind of like a wild card,

00:03:56.480 --> 00:03:59.950
and this basically
causes a full-table scan.

00:03:59.950 --> 00:04:02.390
YIGIT BOYAR: Yeah,
even if you index that

00:04:02.390 --> 00:04:04.670
query column in the
database, SQLite

00:04:04.670 --> 00:04:06.367
will not be able
to use that index,

00:04:06.367 --> 00:04:07.950
because the index
only works if you're

00:04:07.950 --> 00:04:12.030
adding a prefix search, which
is not what you want to do here.

00:04:12.030 --> 00:04:15.170
DANIEL SANTIAGO: Yeah,
so don't do this.

00:04:15.170 --> 00:04:20.930
Moreover, if you try to actually
search across album or artist,

00:04:20.930 --> 00:04:22.220
you have to expand this query.

00:04:22.220 --> 00:04:25.975
And this, as you can see,
doesn't easily scale.

00:04:25.975 --> 00:04:28.250
FTS helps us with
this situation,

00:04:28.250 --> 00:04:33.380
because it now creates a virtual
table and all the columns

00:04:33.380 --> 00:04:33.980
are indexed.

00:04:33.980 --> 00:04:40.150
And to use FTS, you just now
annotate your entity with @FTS.

00:04:40.150 --> 00:04:42.165
Now, in your query,
instead of using LIKE,

00:04:42.165 --> 00:04:44.370
you would use MATCH, which
is a different operator.

00:04:44.370 --> 00:04:47.040
And as you can see
here, we use WHERE Song.

00:04:47.040 --> 00:04:51.210
So we're using the same
column network statement,

00:04:51.210 --> 00:04:54.330
and that basically
tells the MATCH operator

00:04:54.330 --> 00:04:56.530
that you want to search
across all those labels.

00:04:56.530 --> 00:04:59.150
So this helps us with searching
across artists and albums

00:04:59.150 --> 00:05:00.150
if you have an omni box.

00:05:03.730 --> 00:05:06.862
You might say, oh, then I can
use FTS on all of my tables

00:05:06.862 --> 00:05:08.570
if I have an [INAUDIBLE],,
but not quite.

00:05:08.570 --> 00:05:12.050
So using FTS consumes
more disk space.

00:05:12.050 --> 00:05:15.070
And the reason is because
when you create an FTS table,

00:05:15.070 --> 00:05:16.810
you actually create
a virtual table.

00:05:16.810 --> 00:05:20.050
And that's backed by a few
tables where your content is.

00:05:20.050 --> 00:05:22.010
And a lot of that's
indexing information.

00:05:22.010 --> 00:05:24.190
This is known as shadow tables.

00:05:24.190 --> 00:05:27.090
When you actually query
from your virtual table,

00:05:27.090 --> 00:05:30.570
the information actually
comes from these tables.

00:05:30.570 --> 00:05:34.370
There's also a few
drawbacks to FTS.

00:05:34.370 --> 00:05:38.780
You cannot have foreign keys on
your entity or compose primary

00:05:38.780 --> 00:05:39.800
keys.

00:05:39.800 --> 00:05:41.630
But there's one
pretty new feature,

00:05:41.630 --> 00:05:45.980
which is external content.

00:05:45.980 --> 00:05:47.600
Going back to our
song entity, if we

00:05:47.600 --> 00:05:50.300
wanted to instead
use our real table

00:05:50.300 --> 00:05:53.690
and create a second table
for only our labels,

00:05:53.690 --> 00:05:56.750
we just basically use
that FTS annotation,

00:05:56.750 --> 00:05:59.330
but we tell it, hey,
my data is actually

00:05:59.330 --> 00:06:03.290
going to be stored in this other
real table that I already have.

00:06:03.290 --> 00:06:06.890
Conveniently, this new data
class and new virtual table

00:06:06.890 --> 00:06:07.880
only has the labels.

00:06:07.880 --> 00:06:09.890
So in our previous
example, everything

00:06:09.890 --> 00:06:13.760
was indexed, even the URL,
which is not quite what

00:06:13.760 --> 00:06:14.910
we want to index.

00:06:14.910 --> 00:06:18.120
In this case, we
only have the labels.

00:06:18.120 --> 00:06:21.490
What happens now is we have a
virtual table in front of it.

00:06:21.490 --> 00:06:24.382
It's on FTS, and behind it,
you have the same shadow

00:06:24.382 --> 00:06:25.340
tables for an indexing.

00:06:25.340 --> 00:06:29.270
But the actual content we store
in the original Song table

00:06:29.270 --> 00:06:30.140
that we have.

00:06:30.140 --> 00:06:33.200
This is way better
in saving disk space,

00:06:33.200 --> 00:06:36.230
and it's a little
bit more flexible.

00:06:36.230 --> 00:06:41.810
To query this FTS table
with extended content,

00:06:41.810 --> 00:06:44.614
you do have to query
from the virtual table,

00:06:44.614 --> 00:06:46.280
and then you would
do a join, because we

00:06:46.280 --> 00:06:47.720
want to get the songs.

00:06:47.720 --> 00:06:51.470
And then similarly, you
will still use MATCH.

00:06:51.470 --> 00:06:53.270
One thing, though, is
that, because these

00:06:53.270 --> 00:06:56.930
are two different tables, when
you insert into the Song table,

00:06:56.930 --> 00:07:00.430
things are not actually inserted
into the virtual table, FTS

00:07:00.430 --> 00:07:02.870
table, which means your
index doesn't get updated,

00:07:02.870 --> 00:07:04.670
so you have to do that yourself.

00:07:04.670 --> 00:07:07.120
But we don't want
you doing this.

00:07:07.120 --> 00:07:08.150
We want to make it easy.

00:07:08.150 --> 00:07:10.130
So when you use Room,
Room will actually

00:07:10.130 --> 00:07:12.969
create triggers for you to
keep these two things in sync.

00:07:12.969 --> 00:07:13.760
That's pretty cool.

00:07:17.004 --> 00:07:19.170
YIGIT BOYAR: Another important
feature we have added

00:07:19.170 --> 00:07:21.890
is support for database views.

00:07:21.890 --> 00:07:24.870
So let's go back our
song and album example.

00:07:24.870 --> 00:07:29.130
We have songs and albums, and a
song might be multiple albums.

00:07:29.130 --> 00:07:34.920
So we have a junction table
that associates the songs

00:07:34.920 --> 00:07:36.730
with albums.

00:07:36.730 --> 00:07:38.250
Now, this is all cool.

00:07:38.250 --> 00:07:40.450
So let's say you want
to fetch a listing.

00:07:40.450 --> 00:07:43.140
You want to have the album
name and all the songs in it

00:07:43.140 --> 00:07:45.000
as a list.

00:07:45.000 --> 00:07:45.880
OK, cool.

00:07:45.880 --> 00:07:47.280
We just write it.

00:07:47.280 --> 00:07:50.130
We have the listing [INAUDIBLE],,
and we write a query,

00:07:50.130 --> 00:07:52.830
and fetch from that
junction table.

00:07:52.830 --> 00:07:54.510
Unfortunately, you
cannot do this,

00:07:54.510 --> 00:07:57.630
because that table doesn't
have the song's name

00:07:57.630 --> 00:07:59.850
or the album's title.

00:07:59.850 --> 00:08:01.940
You kind of need to write
a query like this, where

00:08:01.940 --> 00:08:05.370
you fetch from that table and
join it with the Song and Album

00:08:05.370 --> 00:08:09.370
table, and then you can
return your listing data.

00:08:09.370 --> 00:08:10.690
Now, this is actually cool.

00:08:10.690 --> 00:08:13.740
SQLite is powerful that
you can express this.

00:08:13.740 --> 00:08:16.090
But if you find yourself
keep writing these things,

00:08:16.090 --> 00:08:18.150
it's kind of like lots
of boilerplate, things

00:08:18.150 --> 00:08:20.700
you need to keep in your mind.

00:08:20.700 --> 00:08:22.620
Wouldn't it be cool
if you could just

00:08:22.620 --> 00:08:25.830
have a table that has
the song and the album

00:08:25.830 --> 00:08:28.980
together without you
duplicating the data

00:08:28.980 --> 00:08:32.390
into that table and the
Songs and the Album tables?

00:08:32.390 --> 00:08:35.980
And this is where database
views come into place.

00:08:35.980 --> 00:08:40.679
So you basically write the query
that defines Album and Song

00:08:40.679 --> 00:08:42.919
together as a query.

00:08:42.919 --> 00:08:45.750
You annotate an entity
with the database view.

00:08:45.750 --> 00:08:49.380
So you're saying that it's
like view to this database.

00:08:49.380 --> 00:08:52.290
And in that [INAUDIBLE],,
this is the same Room rule,

00:08:52.290 --> 00:08:54.840
so you can have any [INAUDIBLE]
with the embedded fields

00:08:54.840 --> 00:08:56.300
or what not.

00:08:56.300 --> 00:09:01.760
Once you declare it and add
it to your Room database--

00:09:01.760 --> 00:09:03.700
so we have that declaration.

00:09:03.700 --> 00:09:06.030
If you tried to rewrite
the previous query,

00:09:06.030 --> 00:09:09.030
then you just get rid of
all the joins and instead

00:09:09.030 --> 00:09:10.860
select from that table.

00:09:10.860 --> 00:09:12.510
Well, we are
selecting from a view.

00:09:12.510 --> 00:09:13.830
That table doesn't exist.

00:09:13.830 --> 00:09:19.900
But for all intents and purposes
of querying, that's a table.

00:09:19.900 --> 00:09:22.620
Now, it's much more simpler.

00:09:22.620 --> 00:09:24.450
Because I said
it's like a table,

00:09:24.450 --> 00:09:26.610
you can also return
that [INAUDIBLE]..

00:09:26.610 --> 00:09:28.770
Or you can even
return the live data.

00:09:28.770 --> 00:09:32.170
Because we know how that
view was constructed,

00:09:32.170 --> 00:09:33.780
we know when the
value might change,

00:09:33.780 --> 00:09:36.000
so you could get
the live data of it.

00:09:36.000 --> 00:09:37.380
You can run queries.

00:09:37.380 --> 00:09:39.570
You can pretty much do
everything you can do with

00:09:39.570 --> 00:09:42.840
a table, except you cannot
do inserts and updates,

00:09:42.840 --> 00:09:44.640
because there is no baking data.

00:09:44.640 --> 00:09:46.980
But you can have views
inside other views.

00:09:46.980 --> 00:09:48.640
All that stuff works.

00:09:48.640 --> 00:09:51.330
So this makes it much
nicer to write queries,

00:09:51.330 --> 00:09:57.070
and it also allows you to
logically address your data.

00:09:57.070 --> 00:09:59.060
Another important
feature we have added

00:09:59.060 --> 00:10:02.744
is support for
multiple instances.

00:10:02.744 --> 00:10:05.350
So let's say we are
writing the application.

00:10:05.350 --> 00:10:07.320
So we have a playlist,
all the songs,

00:10:07.320 --> 00:10:10.410
and we have a sync service
that goes to our back end,

00:10:10.410 --> 00:10:12.470
pulls the name, updates
from my playlist,

00:10:12.470 --> 00:10:14.200
and writes them
into the database.

00:10:14.200 --> 00:10:18.180
When you are using Room,
if the sync service

00:10:18.180 --> 00:10:21.600
updates the database, it
automatically updates the UI.

00:10:21.600 --> 00:10:23.310
And this is a
super cool feature,

00:10:23.310 --> 00:10:26.040
because you write these
two components absolutely

00:10:26.040 --> 00:10:27.196
independent of each other.

00:10:27.196 --> 00:10:28.570
They don't know
about each other.

00:10:28.570 --> 00:10:31.530
They have the database
as a sync point.

00:10:31.530 --> 00:10:35.490
This works perfectly, but then
your startup is successful,

00:10:35.490 --> 00:10:37.900
you grow your team, your
application is bloated,

00:10:37.900 --> 00:10:40.040
so you decide to model
that synchronization

00:10:40.040 --> 00:10:42.095
into a background process.

00:10:42.095 --> 00:10:44.820
Now, when it's running
in a different process,

00:10:44.820 --> 00:10:47.700
it pulls the song, writes
it into the database,

00:10:47.700 --> 00:10:50.070
and the UI has no idea.

00:10:50.070 --> 00:10:53.370
It doesn't know the database
has changed, because it only

00:10:53.370 --> 00:10:57.060
knows that database is changed
if the same Room instance is

00:10:57.060 --> 00:10:58.260
the one making the updates.

00:10:58.260 --> 00:11:00.870
So we can fake it, because
we don't get that information

00:11:00.870 --> 00:11:01.590
from SQLite.

00:11:01.590 --> 00:11:04.400
There's something [INAUDIBLE].

00:11:04.400 --> 00:11:07.780
Now, with Room
2.1, you can enable

00:11:07.780 --> 00:11:12.510
multi-instance invalidation when
you build the Room instance,

00:11:12.510 --> 00:11:15.630
which will look for other
instances of Room that are

00:11:15.630 --> 00:11:17.760
accessing the same database.

00:11:17.760 --> 00:11:21.630
Once you do that, now, your
background process service

00:11:21.630 --> 00:11:24.480
can update the database,
and all instances of Room

00:11:24.480 --> 00:11:26.280
will update automatically.

00:11:26.280 --> 00:11:28.430
Now, we don't do this.

00:11:28.430 --> 00:11:31.320
This is off by default, because
we need to create the service.

00:11:31.320 --> 00:11:32.930
There's some IPC involved.

00:11:32.930 --> 00:11:35.430
It's not a big cost,
but it is a cost

00:11:35.430 --> 00:11:37.210
that most people don't need.

00:11:37.210 --> 00:11:39.570
So you need to enable
this flag to take

00:11:39.570 --> 00:11:42.220
advantage of this feature.

00:11:42.220 --> 00:11:43.970
DANIEL SANTIAGO: Another
feature we added,

00:11:43.970 --> 00:11:46.310
which was actually
requested by the community,

00:11:46.310 --> 00:11:48.716
was automatic support.

00:11:48.716 --> 00:11:50.090
If you're using
Kotlin, you don't

00:11:50.090 --> 00:11:52.040
have to worry about this,
because you have data classes.

00:11:52.040 --> 00:11:53.720
But if you're still
in Java world,

00:11:53.720 --> 00:11:57.350
then you might be using
auto value, because you

00:11:57.350 --> 00:11:58.950
want Java immutable objects.

00:11:58.950 --> 00:12:01.730
Well, Room, now, can
understand these auto value

00:12:01.730 --> 00:12:05.440
annotated objects.

00:12:05.440 --> 00:12:07.190
If you know a little
bit about auto value,

00:12:07.190 --> 00:12:08.540
you basically have
an abstract class,

00:12:08.540 --> 00:12:09.998
and you annotate
it with AutoValue.

00:12:09.998 --> 00:12:12.440
But now, you can also annotate
that same abstract class

00:12:12.440 --> 00:12:15.980
with @Entity, and Room
will be able to discover

00:12:15.980 --> 00:12:19.500
that you want to make a
backing SQLite table for it.

00:12:19.500 --> 00:12:21.800
In auto value, instead
of having fields,

00:12:21.800 --> 00:12:23.210
you have abstract getters.

00:12:23.210 --> 00:12:26.030
These can now be annotated
with Room annotations,

00:12:26.030 --> 00:12:28.850
so their primary key, column
information, and things

00:12:28.850 --> 00:12:30.006
like that.

00:12:30.006 --> 00:12:31.540
The only caveat,
though, is that you

00:12:31.540 --> 00:12:34.970
do have to also add auto
values CopyAnnotation,

00:12:34.970 --> 00:12:39.470
and this is the annotation
that basically makes

00:12:39.470 --> 00:12:41.227
these two tools work together.

00:12:41.227 --> 00:12:43.435
YIGIT BOYAR: By the way, to
support this, so normally

00:12:43.435 --> 00:12:46.110
these annotations were
only limited to fields,

00:12:46.110 --> 00:12:48.920
and we needed to extend
it to let you put them

00:12:48.920 --> 00:12:50.900
on those abstract methods.

00:12:50.900 --> 00:12:52.870
But it only works if
you're using auto value.

00:12:52.870 --> 00:12:54.620
If you're not using
auto value, we are not

00:12:54.620 --> 00:12:57.110
going to let it compile.

00:12:57.110 --> 00:12:59.754
DANIEL SANTIAGO: Similarly, if
you were writing a normal data

00:12:59.754 --> 00:13:01.920
class, you would have a
constructor with the fields.

00:13:01.920 --> 00:13:06.350
In auto value world, you still
need that factory method.

00:13:06.350 --> 00:13:08.670
And Room will be able to
discover this to create

00:13:08.670 --> 00:13:11.501
your auto value class.

00:13:11.501 --> 00:13:14.000
And then using it, you would
use it at any other data class.

00:13:14.000 --> 00:13:17.420
You would use the abstract
class that you declare.

00:13:17.420 --> 00:13:24.432
Another highly
requested feature that

00:13:24.432 --> 00:13:26.390
has been requested for
a while-- and we finally

00:13:26.390 --> 00:13:28.273
got it-- is more Rx.

00:13:28.273 --> 00:13:32.480
So now, you can actually
have asynch return

00:13:32.480 --> 00:13:34.370
times Completable,
Single, and Maybe,

00:13:34.370 --> 00:13:37.410
in methods annotated with
Insert, Update, and Delete.

00:13:37.410 --> 00:13:38.430
So you know we listen.

00:13:38.430 --> 00:13:40.640
And when you request
stuff, we'll listen.

00:13:40.640 --> 00:13:41.700
[LAUGHS]

00:13:41.700 --> 00:13:46.320
YIGIT BOYAR: Yeah, this is
actually only available in Rx.

00:13:46.320 --> 00:13:47.390
That's interesting.

00:13:47.390 --> 00:13:49.910
DANIEL SANTIAGO: It might
be available in another type

00:13:49.910 --> 00:13:50.694
of asynch.

00:13:50.694 --> 00:13:52.360
YIGIT BOYAR: Like
[INAUDIBLE],, Kotlins?

00:13:52.360 --> 00:13:53.318
DANIEL SANTIAGO: Maybe.

00:13:53.318 --> 00:13:55.050
YIGIT BOYAR: Yeah, please.

00:13:55.050 --> 00:13:58.760
So Room 2.1 is a
really big release.

00:13:58.760 --> 00:14:01.760
The full-text search,
the database views--

00:14:01.760 --> 00:14:05.540
and when we decided which
features to work on,

00:14:05.540 --> 00:14:09.410
we are basically relying
on your feedback.

00:14:09.410 --> 00:14:12.120
I personally objected
that allowing complete

00:14:12.120 --> 00:14:15.200
of less stuff in those Insert
queries for a long time,

00:14:15.200 --> 00:14:18.200
and I gave up, because
people really wanted it.

00:14:18.200 --> 00:14:20.930
And this is our
development philosophy.

00:14:20.930 --> 00:14:23.450
We basically look at what
the community is doing,

00:14:23.450 --> 00:14:27.620
how are they using it, what do
they want, and implement them.

00:14:27.620 --> 00:14:30.440
So please, try to use to 2.1.

00:14:30.440 --> 00:14:31.910
It's a very big release.

00:14:31.910 --> 00:14:36.337
And we want to just ship it
as stable as soon as possible,

00:14:36.337 --> 00:14:37.420
and we need your feedback.

00:14:37.420 --> 00:14:41.430
We basically look at the number
of apps shipping with Room

00:14:41.430 --> 00:14:42.680
and see how they are using it.

00:14:42.680 --> 00:14:44.760
We'll look for
the incoming bugs.

00:14:44.760 --> 00:14:47.114
I mean, we don't really
have bugs, but sometimes--

00:14:47.114 --> 00:14:48.530
DANIEL SANTIAGO:
No bugs, no bugs.

00:14:48.530 --> 00:14:54.236
YIGIT BOYAR: --look for incoming
user errors, try fix them.

00:14:54.236 --> 00:14:55.280
And [INAUDIBLE] to ship.

00:14:55.280 --> 00:14:58.460
So please work
with us, and we'll

00:14:58.460 --> 00:15:00.020
try to wrap it up and ship it.

00:15:00.020 --> 00:15:02.090
And also please let
us know what other

00:15:02.090 --> 00:15:05.685
features you want in Room so
that we can implement them.

00:15:05.685 --> 00:15:08.540
All right, thanks a lot
for coming to this talk.

00:15:08.540 --> 00:15:09.470
I hope it was useful.

00:15:09.470 --> 00:15:11.570
[APPLAUSE]

00:15:11.945 --> 00:15:13.070
DANIEL SANTIAGO: Thank you.

00:15:13.070 --> 00:15:16.420
[MUSIC PLAYING]

