WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:04.650
- [SPEAKING CHINESE]

00:00:04.650 --> 00:00:05.800
- Hello, everybody.

00:00:05.800 --> 00:00:08.810
My name is [? Rado, ?] and I'm
on the Angular team in Google.

00:00:13.920 --> 00:19:47.560
- [SPEAKING CHINESE]

00:19:47.560 --> 00:19:51.160
- [SPEAKING CHINESE].

00:19:51.160 --> 00:19:52.880
Sorry, I'll have
to speak English.

00:19:52.880 --> 00:19:54.781
My Chinese is still
not that good.

00:19:54.781 --> 00:19:56.780
So what I'm here to talk
about a little bit more

00:19:56.780 --> 00:20:00.350
is our collaboration between
Angular and TypeScript.

00:20:00.350 --> 00:20:03.750
So we saw how great
TypeScript is.

00:20:03.750 --> 00:20:07.140
Let's talk a little bit
about Angular and TypeScript.

00:20:07.140 --> 00:20:10.560
So you might be wondering, we
work for different companies,

00:20:10.560 --> 00:20:12.810
Microsoft and Google,
Angular and TypeScript,

00:20:12.810 --> 00:20:14.930
how did this
collaboration come to be?

00:20:14.930 --> 00:20:17.070
How did we started
working together?

00:20:17.070 --> 00:20:21.630
So this story
begins around 2014.

00:20:21.630 --> 00:20:24.040
Angular 1 was very
popular at the time.

00:20:24.040 --> 00:20:27.660
But we're looking at where
the web is going, where

00:20:27.660 --> 00:20:29.602
all these great
features like ES6,

00:20:29.602 --> 00:20:31.560
the new standards for
JavaScript, the evergreen

00:20:31.560 --> 00:20:35.700
browsers, we knew that we need
to put Angular 1 on the side

00:20:35.700 --> 00:20:38.610
and build the next best
environment for building

00:20:38.610 --> 00:20:40.369
web applications.

00:20:40.369 --> 00:20:41.910
And right from the
beginning, we knew

00:20:41.910 --> 00:20:46.080
that part of that environment
has to be some tooling.

00:20:46.080 --> 00:20:48.210
Javascript, just like
[INAUDIBLE] said,

00:20:48.210 --> 00:20:52.440
is not good enough for building
large scale web applications.

00:20:52.440 --> 00:20:53.550
We need some tooling.

00:20:53.550 --> 00:20:57.390
And we tried to invent
our own for a little bit.

00:20:57.390 --> 00:20:59.580
We tried to build
something called AtScript.

00:20:59.580 --> 00:21:01.920
We announced it in 2014.

00:21:01.920 --> 00:21:06.490
And quickly afterwards, we
got in touch with TypeScript

00:21:06.490 --> 00:21:09.160
and realized why build
the same tool twice.

00:21:09.160 --> 00:21:13.470
Why not join efforts, use
TypeScript in Angular,

00:21:13.470 --> 00:21:17.230
and bring you guys the best
environment for building

00:21:17.230 --> 00:21:19.090
applications for the future?

00:21:19.090 --> 00:21:24.370
And ever since the end of 2014,
we've been working together.

00:21:24.370 --> 00:21:28.480
And here's a list of
features that we implemented

00:21:28.480 --> 00:21:30.430
through great collaboration.

00:21:30.430 --> 00:21:33.430
A lot of design discussions have
happened between the two teams.

00:21:33.430 --> 00:21:37.570
And we think this is a great
environment that you guys can

00:21:37.570 --> 00:21:39.725
use nowadays, Angular
2 with TypeScript.

00:21:43.150 --> 00:21:45.370
So yeah, here we are on stage.

00:21:45.370 --> 00:21:46.690
Great love for each other.

00:21:46.690 --> 00:21:53.160
Our teams are-- it's a nice
story, Google and Microsoft

00:21:53.160 --> 00:21:56.380
sharing hugs.

00:21:56.380 --> 00:22:00.490
All right, so I want to
show you a little demo now.

00:22:00.490 --> 00:22:01.970
We're all excited
about Angular 2.

00:22:01.970 --> 00:22:03.780
We saw lots of demos
about Angular 2.

00:22:03.780 --> 00:22:06.450
I know a lot of you guys still
have Angular 1 applications

00:22:06.450 --> 00:22:08.350
out there.

00:22:08.350 --> 00:22:10.180
So I want to show
you how easy it

00:22:10.180 --> 00:22:12.850
is to take an Angular
1 application written

00:22:12.850 --> 00:22:15.715
in Javascript-- there was no
TypeScript around when Angular

00:22:15.715 --> 00:22:20.800
1 was popular, and I'll
take a demo from Angular 1

00:22:20.800 --> 00:22:23.586
and migrate it
incrementally to TypeScript.

00:22:40.030 --> 00:22:42.670
All right, so here's
our application.

00:22:42.670 --> 00:22:44.080
It is purely JavaScript.

00:22:44.080 --> 00:22:46.880
There's nowhere
TypeScript to be seen.

00:22:46.880 --> 00:22:51.100
I have the application
running, and it's

00:22:51.100 --> 00:22:52.600
one of our earliest
demos, actually.

00:22:52.600 --> 00:22:56.050
Some of you might recognize
it from five years ago,

00:22:56.050 --> 00:22:59.030
two years ago.

00:22:59.030 --> 00:23:02.530
It's application that shows you
your favorite mobile devices.

00:23:02.530 --> 00:23:05.950
And it's really showing
its age, both in code

00:23:05.950 --> 00:23:07.270
and in the images you see.

00:23:07.270 --> 00:23:10.420
Those are some
really old phones.

00:23:10.420 --> 00:23:13.182
But we have to live
with such applications.

00:23:13.182 --> 00:23:14.640
Sometimes we have
to maintain them.

00:23:14.640 --> 00:23:15.181
So let's see.

00:23:15.181 --> 00:23:18.710
What can we do to make
this a little bit better.

00:23:18.710 --> 00:23:22.850
So first thing I'll do
is TypeScript compiler

00:23:22.850 --> 00:23:25.670
has this flag TSC in it.

00:23:25.670 --> 00:23:28.010
What this does is creates
a configuration file

00:23:28.010 --> 00:23:32.010
in my project for the
TypeScript compiler.

00:23:32.010 --> 00:23:37.310
Next thing I'll do is
I will allow JavaScript

00:23:37.310 --> 00:23:40.370
in my TypeScript project.

00:23:40.370 --> 00:23:44.816
Just like [INAUDIBLE] said,
JavaScript is valid TypeScript.

00:23:44.816 --> 00:23:52.075
I will take all my JavaScript
files, rename them to source,

00:23:52.075 --> 00:24:02.600
add them to my
include path, and tell

00:24:02.600 --> 00:24:05.195
TypeScript to compile
to the directory

00:24:05.195 --> 00:24:06.320
where the files used to be.

00:24:12.870 --> 00:24:13.890
OK.

00:24:13.890 --> 00:24:20.360
With that in place, I can
start a TypeScript compiler.

00:24:20.360 --> 00:24:23.790
And, compilation
complete-- so it

00:24:23.790 --> 00:24:25.080
looks like it didn't do much.

00:24:25.080 --> 00:24:28.530
I just fed all the JavaScript
files through TypeScript,

00:24:28.530 --> 00:24:31.110
and they ended up
where they used to be.

00:24:31.110 --> 00:24:33.540
But now I have TypeScript
in my toolchain.

00:24:33.540 --> 00:24:39.650
So now I can continue and
take one of these files,

00:24:39.650 --> 00:24:44.200
these components here,
rename it to TypeScript,

00:24:44.200 --> 00:24:47.200
and now I can start
writing TypeScript.

00:24:47.200 --> 00:24:50.210
So first thing I see--
an error about Angular.

00:24:50.210 --> 00:24:54.640
TypeScript is reminding me,
you are using window.error.

00:24:54.640 --> 00:24:57.124
You never told me that
this is safe to do, right?

00:24:57.124 --> 00:24:58.540
If you forgot your
script tag, you

00:24:58.540 --> 00:25:01.490
might have not had Angular
on the window object.

00:25:01.490 --> 00:25:06.030
So this is a valid
mistake, valid warning,

00:25:06.030 --> 00:25:11.360
but I can, for now,
just tell TypeScript

00:25:11.360 --> 00:25:12.855
don't worry about it.

00:25:12.855 --> 00:25:13.355
It is there.

00:25:13.355 --> 00:25:16.150
And hit Continue.

00:25:16.150 --> 00:25:18.350
So the next thing I'll do is--

00:25:18.350 --> 00:25:20.290
OK, this is the JavaScript
you used to write.

00:25:20.290 --> 00:25:23.690
I think all of us have
written JavaScript.

00:25:23.690 --> 00:25:26.590
There's this famous
problem with JavaScript.

00:25:26.590 --> 00:25:29.160
This is not lexically bound.

00:25:29.160 --> 00:25:33.660
I think all of us have been
burned by this at some point.

00:25:33.660 --> 00:25:35.310
The TypeScript
has moved forward.

00:25:35.310 --> 00:25:37.770
ES6 has a nice
solution for this,

00:25:37.770 --> 00:25:42.270
which is the fat arrow function
has this being syntactically

00:25:42.270 --> 00:25:45.580
bound, lexically bound.

00:25:45.580 --> 00:25:49.100
And I can right away
start using this.

00:25:49.100 --> 00:25:52.660
So right here, this
function, which

00:25:52.660 --> 00:25:55.660
was problematic in the past,
and I had to do this workaround,

00:25:55.660 --> 00:25:59.650
now I just write a very
short arrow function,

00:25:59.650 --> 00:26:02.330
and it would work as intended.

00:26:02.330 --> 00:26:06.270
So I made my code clearer
and easier to read.

00:26:06.270 --> 00:26:09.182
It's still not that
great though, right?

00:26:09.182 --> 00:26:10.890
If you look at the
levels of indentation,

00:26:10.890 --> 00:26:12.840
this is 4 levels in.

00:26:12.840 --> 00:26:17.700
What if I can use some other
constructs, like a class?

00:26:17.700 --> 00:26:19.680
A lot of other
languages have this,

00:26:19.680 --> 00:26:22.540
and JavaScript now has it.

00:26:22.540 --> 00:26:27.170
So really what I have here
is a clause declaration.

00:26:27.170 --> 00:26:30.886
So I can just move
this constructor.

00:26:34.990 --> 00:26:36.800
All rights.

00:26:36.800 --> 00:26:38.680
And next this is
this function here.

00:26:38.680 --> 00:26:40.890
This is just a method.

00:26:40.890 --> 00:26:43.560
It was a very verbose
way of saying that,

00:26:43.560 --> 00:26:46.350
whereas now it's a
lot more readable,

00:26:46.350 --> 00:26:53.746
and I can take all of
this and pass that down

00:26:53.746 --> 00:26:55.710
as the Controller.

00:26:55.710 --> 00:26:59.790
OK, so one last thing.

00:26:59.790 --> 00:27:01.607
TypeScript tells me
there are two errors.

00:27:01.607 --> 00:27:02.690
They're not really errors.

00:27:02.690 --> 00:27:05.080
It's just that we never
told TypeScript what are

00:27:05.080 --> 00:27:08.610
the valid fields on this class.

00:27:08.610 --> 00:27:12.840
So I need to declare
phone is any for now,

00:27:12.840 --> 00:27:19.140
and main image URL is a string.

00:27:19.140 --> 00:27:24.044
OK, and now, very quickly, I'll
just reformat this cleanly,

00:27:24.044 --> 00:27:25.460
and now we can all
agree, I think,

00:27:25.460 --> 00:27:29.300
that this reads a lot better
than what we had originally.

00:27:29.300 --> 00:27:32.100
This is more maintainable,
more readable,

00:27:32.100 --> 00:27:36.390
and we can use it
in our application.

00:27:36.390 --> 00:27:40.280
Moreover, TypeScript
will help me catch bugs.

00:27:40.280 --> 00:27:43.220
So imagine I mistyped image.

00:27:43.220 --> 00:27:44.750
Right away, I get the error.

00:27:44.750 --> 00:27:46.340
I don't need to save this.

00:27:46.340 --> 00:27:49.490
Open the browser, see that
the image is not there.

00:27:49.490 --> 00:27:52.100
Try to debug the
workflow that you used

00:27:52.100 --> 00:27:55.940
to have in plain JavaScript.

00:27:55.940 --> 00:27:56.980
All right.

00:27:56.980 --> 00:28:00.980
And the best part is you're
saying, oh, this is all great,

00:28:00.980 --> 00:28:03.880
but I'm using features that are
not available in the browsers

00:28:03.880 --> 00:28:05.470
where my users are.

00:28:05.470 --> 00:28:07.535
So I'm targeting IE6.

00:28:07.535 --> 00:28:09.910
Remember, I was [INAUDIBLE]
TypeScript behind the scenes.

00:28:09.910 --> 00:28:12.590
It's compiling
after every change.

00:28:12.590 --> 00:28:18.730
And if I open, this
is the actual code

00:28:18.730 --> 00:28:19.980
that would run in the browser.

00:28:19.980 --> 00:28:23.770
And this is valid code
in older browsers.

00:28:23.770 --> 00:28:27.150
So TypeScript is letting me
write with the newest features

00:28:27.150 --> 00:28:31.200
that are available in JavaScript
while supporting the browsers

00:28:31.200 --> 00:28:33.860
that I have to support.

00:28:33.860 --> 00:28:36.650
And just to quickly check the
application is still there,

00:28:36.650 --> 00:28:39.510
everything is fine.

00:28:39.510 --> 00:28:40.190
All right.

00:28:40.190 --> 00:28:44.377
So let's go back
to the slide deck.

00:28:47.660 --> 00:28:51.530
So that was Angular
1 with TypeScript.

00:28:51.530 --> 00:28:55.880
So we went from no TypeScript to
incrementally adding TypeScript

00:28:55.880 --> 00:28:57.210
to application.

00:28:57.210 --> 00:28:58.970
Let's talk about Angular
2 and TypeScript.

00:28:58.970 --> 00:29:02.540
So while Angular 1 can
be used with TypeScript,

00:29:02.540 --> 00:29:04.919
Angular 2 is great
with TypeScript.

00:29:04.919 --> 00:29:06.710
Angular 2 was built
with TypeScript in mind

00:29:06.710 --> 00:29:08.150
from the beginning.

00:29:08.150 --> 00:29:13.130
And it is written in TypeScript,
and it also is used--

00:29:13.130 --> 00:29:16.670
its ergonomics when you're
using Angular 2 with TypeScript,

00:29:16.670 --> 00:29:19.010
it's probably the best
experience you'll get.

00:29:19.010 --> 00:29:23.010
You can use it with ES6 and
ES5, but the ergonomics really,

00:29:23.010 --> 00:29:25.020
really shine with TypeScript.

00:29:28.200 --> 00:29:30.330
So I have another demo.

00:29:48.220 --> 00:29:52.460
OK, so we've heard from
Stephen earlier today.

00:29:52.460 --> 00:29:55.120
We saw Angular 2 in action.

00:29:55.120 --> 00:29:57.830
We've heard that the component
is the main building block

00:29:57.830 --> 00:29:59.780
of Angular 2 applications.

00:29:59.780 --> 00:30:02.270
And here I have a
little application which

00:30:02.270 --> 00:30:05.160
lets me list my favorite foods.

00:30:05.160 --> 00:30:07.670
It has only one
component so far.

00:30:07.670 --> 00:30:11.270
I just want to point out the
parts that we're using here

00:30:11.270 --> 00:30:14.910
that are enabled by TypeScript.

00:30:14.910 --> 00:30:18.360
So we're using modules to
structure our application.

00:30:18.360 --> 00:30:22.150
This is spec'd by the
new JavaScript standards,

00:30:22.150 --> 00:30:24.720
but it's not in any
browser right now.

00:30:24.720 --> 00:30:27.600
TypeScript transpiles
this to the browsers

00:30:27.600 --> 00:30:29.550
that we're using today.

00:30:29.550 --> 00:30:31.140
We have a class down here.

00:30:31.140 --> 00:30:34.680
This is what controls my
application, my component, that

00:30:34.680 --> 00:30:38.770
is also a new feature
in JavaScript.

00:30:38.770 --> 00:30:41.650
And finally, what glues
everything together,

00:30:41.650 --> 00:30:45.340
what tells Angular that this is
a component, is this Decorator.

00:30:45.340 --> 00:30:48.110
And the Decorator is a
feature that TypeScript

00:30:48.110 --> 00:30:52.140
provides that we make great
use of in the framework.

00:30:52.140 --> 00:30:55.950
So the Decorator tells us
this is an Angular components,

00:30:55.950 --> 00:30:59.600
and here is the template.

00:30:59.600 --> 00:31:02.390
So what I'm going to do next
is, so far, this application

00:31:02.390 --> 00:31:04.500
doesn't do much.

00:31:04.500 --> 00:31:08.960
I have my favorite foods
actually stored in a service

00:31:08.960 --> 00:31:12.600
down here, at the food
store, and Angular 2,

00:31:12.600 --> 00:31:15.540
just like Angular 1, is built
around dependency injection.

00:31:15.540 --> 00:31:18.030
So I will use
dependency injection

00:31:18.030 --> 00:31:23.490
to take this food service
and put it in my component.

00:31:23.490 --> 00:31:25.240
So here's how it
would look like.

00:31:25.240 --> 00:31:29.250
First, I will import
it from the module.

00:31:29.250 --> 00:31:31.260
I didn't do anything magical.

00:31:31.260 --> 00:31:34.290
I just pressed Auto-Complete,
and, because TypeScript

00:31:34.290 --> 00:31:38.090
knows all the symbols,
I can just hit Enter.

00:31:38.090 --> 00:31:43.820
There's no other exported
symbols from that module.

00:31:43.820 --> 00:31:45.540
Constructor.

00:31:45.540 --> 00:31:48.197
So in the constructor, I
will inject the food store.

00:31:54.540 --> 00:31:56.495
And I can start
using it right away.

00:31:56.495 --> 00:31:58.370
So this is the magic of
dependency injection.

00:31:58.370 --> 00:32:04.140
I just say what I need, and I
receive it and start using it.

00:32:04.140 --> 00:32:05.400
You've done this in Angular 1.

00:32:05.400 --> 00:32:07.530
So this might not be
a surprise to you.

00:32:07.530 --> 00:32:10.560
What is surprising, and
I want to point out here,

00:32:10.560 --> 00:32:14.340
is that we use the
type for the injection.

00:32:14.340 --> 00:32:17.694
So knowing what to
inject in Angular 1,

00:32:17.694 --> 00:32:19.110
we didn't have the
type, so we had

00:32:19.110 --> 00:32:22.470
to rely on the argument
of the function which

00:32:22.470 --> 00:32:25.260
it could be problematic
if you're using minifiers

00:32:25.260 --> 00:32:26.800
and other tooling.

00:32:26.800 --> 00:32:29.554
In Angular 2, the type is
really the natural language

00:32:29.554 --> 00:32:30.720
of the dependency injection.

00:32:30.720 --> 00:32:33.780
And this is an example
where TypeScript

00:32:33.780 --> 00:32:36.750
allows us to use a feature
that makes the framework

00:32:36.750 --> 00:32:39.140
work better.

00:32:39.140 --> 00:32:40.510
So I have the food store.

00:32:40.510 --> 00:32:44.970
And the code writes
itself, literally,

00:32:44.970 --> 00:32:47.520
because [INAUDIBLE]
completion, it turns out

00:32:47.520 --> 00:32:50.550
the foods returns a promise.

00:32:50.550 --> 00:32:52.980
The promise has a
[INAUDIBLE] method.

00:32:52.980 --> 00:33:00.540
And I will take the
foods and assign them

00:33:00.540 --> 00:33:08.810
to the food variable, and save
all this, open it in a browser.

00:33:12.180 --> 00:33:15.260
And here are my favorite foods
that I hope to eat them all

00:33:15.260 --> 00:33:16.770
when I'm here in China.

00:33:16.770 --> 00:33:20.160
Let's see if it will happen.

00:33:20.160 --> 00:33:22.990
All right.

00:33:22.990 --> 00:33:27.204
All right, so we started
building our application.

00:33:27.204 --> 00:33:28.620
The next thing
that I want to show

00:33:28.620 --> 00:33:30.270
is that happens very often.

00:33:30.270 --> 00:33:32.530
Your coworker comes
over and says, hey,

00:33:32.530 --> 00:33:34.780
I have this great component.

00:33:34.780 --> 00:33:36.640
It's called Thumbs.

00:33:36.640 --> 00:33:38.517
It lets you vote for
your favorite food.

00:33:38.517 --> 00:33:40.100
You should use it
in your application.

00:33:40.100 --> 00:33:41.770
Somebody else has
written this code.

00:33:41.770 --> 00:33:43.150
I don't know anything about it.

00:33:43.150 --> 00:33:47.570
Let's see how can I integrate
it into my existing component.

00:33:47.570 --> 00:33:51.720
So I open this, and wow,
that's a lot of code.

00:33:51.720 --> 00:33:56.735
How can I quickly
find the Angular API

00:33:56.735 --> 00:33:58.370
this component exposes?

00:33:58.370 --> 00:34:00.100
I just look for the
decorators, right?

00:34:00.100 --> 00:34:02.580
Here is the component decorator.

00:34:02.580 --> 00:34:06.960
It has a selector, tells
me how I can use it.

00:34:06.960 --> 00:34:10.110
Vote Thumbs is
the tag that would

00:34:10.110 --> 00:34:12.530
put this component on my page.

00:34:12.530 --> 00:34:15.290
And the second thing is, I
want to somehow be notified

00:34:15.290 --> 00:34:17.239
when the voting happens.

00:34:17.239 --> 00:34:19.400
I just look for the
output to decorator.

00:34:19.400 --> 00:34:22.940
Again, the decorators
point out exactly what

00:34:22.940 --> 00:34:27.110
I need to look for, and I
start using this component.

00:34:27.110 --> 00:34:27.730
So here it is.

00:34:27.730 --> 00:34:28.780
There's a change event.

00:34:28.780 --> 00:34:30.429
I would just bind
to onChange handler.

00:34:35.290 --> 00:34:38.219
And I can go back to the
components I'm writing

00:34:38.219 --> 00:34:39.770
and write this onChange handler.

00:34:42.531 --> 00:34:43.030
OK.

00:34:43.030 --> 00:34:44.270
So I'll pass an event.

00:34:44.270 --> 00:34:46.690
What should be the
type of this event?

00:34:46.690 --> 00:34:50.469
I can use any, and
open in the browser,

00:34:50.469 --> 00:34:51.880
and try to look around.

00:34:51.880 --> 00:34:54.260
But there's something
even better.

00:34:54.260 --> 00:34:58.700
Turns out my co-worker that
wrote this component exposed

00:34:58.700 --> 00:35:00.230
the interface of the event.

00:35:00.230 --> 00:35:04.740
I just need to import
it, add it here,

00:35:04.740 --> 00:35:06.870
and now I can start
using the event

00:35:06.870 --> 00:35:10.470
because I have auto-completion
on the fields that

00:35:10.470 --> 00:35:12.390
are available on this subject.

00:35:12.390 --> 00:35:14.670
And again, if you're coming
from some other languages,

00:35:14.670 --> 00:35:17.730
this might not be a
shocking revelation to you.

00:35:17.730 --> 00:35:20.070
But for lots of
JavaScript developers,

00:35:20.070 --> 00:35:22.815
this is a productivity tool
that they have been missing,

00:35:22.815 --> 00:35:29.970
and have been developing
with, basically, subpar tools.

00:35:29.970 --> 00:35:31.890
So what do I do?

00:35:31.890 --> 00:35:33.330
Very quickly, I
would just, let's

00:35:33.330 --> 00:35:46.460
say, count, total count of
votes, so I start with zero,

00:35:46.460 --> 00:35:53.850
and every time somebody
upvotes an item, I will add up,

00:35:53.850 --> 00:35:58.430
and every time somebody
downvotes an item,

00:35:58.430 --> 00:36:00.790
I will subtract.

00:36:00.790 --> 00:36:03.910
Let's save all the files.

00:36:03.910 --> 00:36:06.260
And let's see what
happens in my demo.

00:36:06.260 --> 00:36:06.930
Here it is.

00:36:06.930 --> 00:36:08.990
OK, so I can vote.

00:36:08.990 --> 00:36:12.760
Actually, I like [INAUDIBLE].

00:36:12.760 --> 00:36:14.650
All right, sorry.

00:36:14.650 --> 00:36:15.430
I like them all.

00:36:15.430 --> 00:36:16.480
What am I saying?

00:36:16.480 --> 00:36:17.620
All right.

00:36:17.620 --> 00:36:19.148
So that's the end of my demo.

00:36:24.700 --> 00:36:25.200
Oops.

00:36:25.200 --> 00:36:25.991
Let's try it again.

00:36:25.991 --> 00:36:28.050
Here it is.

00:36:28.050 --> 00:36:32.100
Just to reiterate, what
you saw is a number

00:36:32.100 --> 00:36:34.440
of TypeScript features
that really play well

00:36:34.440 --> 00:36:35.520
with the framework.

00:36:35.520 --> 00:36:39.180
And together, we can make
use of ES6 features that

00:36:39.180 --> 00:36:41.280
get transpiled to ES5,
so you start using

00:36:41.280 --> 00:36:43.830
the future of JavaScript today.

00:36:43.830 --> 00:36:47.280
We make great use of decorators
that really separates cleanly

00:36:47.280 --> 00:36:49.890
the code that you write and the
code that the framework needs.

00:36:49.890 --> 00:36:52.950
So we have this nice
separation of concerns.

00:36:52.950 --> 00:36:54.570
And finally,
dependency injection

00:36:54.570 --> 00:36:57.630
really shines when
you have types around.

00:36:57.630 --> 00:37:00.870
We all know and love dependency
injection from Angular 1.

00:37:00.870 --> 00:37:06.620
But with types, the code is more
readable and more maintainable.

00:37:06.620 --> 00:37:09.786
All right, so I'll pass
it to [INAUDIBLE] again.

00:37:12.500 --> 00:37:13.840
- OK.

00:37:13.840 --> 00:43:25.720
[SPEAKING CHINESE]

00:43:25.720 --> 00:43:27.180
- Thank you.

00:43:27.180 --> 00:43:29.460
One more announcement--
we do have

00:43:29.460 --> 00:43:31.110
more talks about
Angular 2, except they

00:43:31.110 --> 00:43:32.940
won't be in this room.

00:43:32.940 --> 00:43:34.650
It's 430.

00:43:34.650 --> 00:43:37.830
Stephen will show us how
to build a progressive web

00:43:37.830 --> 00:43:38.520
applications.

00:43:38.520 --> 00:43:40.820
It will be room 309.

00:43:40.820 --> 00:43:52.230
- [SPEAKING CHINESE]

00:43:52.230 --> 00:43:55.230
- And also, we have some
stickers right here.

00:43:55.230 --> 00:43:59.060
Come right after the talk and
grab a sticker for TypeScript.

00:43:59.060 --> 00:44:05.270
- [SPEAKING CHINESE]

00:44:05.270 --> 00:44:08.020
- [SPEAKING CHINESE]

