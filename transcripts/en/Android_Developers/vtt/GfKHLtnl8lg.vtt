WEBVTT
Kind: captions
Language: en

00:00:00.560 --> 00:00:03.330
AGNIESZKA MADURSKA: Wear OS
by Google is based on Android.

00:00:03.330 --> 00:00:05.490
As a result, the
concepts and tools

00:00:05.490 --> 00:00:09.330
you use for Android development
are applicable for Wear OS.

00:00:09.330 --> 00:00:13.590
That being said, Wear OS
is a different form factor.

00:00:13.590 --> 00:00:15.420
My name is Aga and
I will walk you

00:00:15.420 --> 00:00:18.060
through some key differences
in wearable and mobile

00:00:18.060 --> 00:00:19.530
development.

00:00:19.530 --> 00:00:21.180
Before diving into
the code, it's

00:00:21.180 --> 00:00:23.580
important to think about
the user experience

00:00:23.580 --> 00:00:26.970
and focus on a use case
that makes sense on a watch.

00:00:26.970 --> 00:00:29.070
If you have an
existing mobile app,

00:00:29.070 --> 00:00:32.759
choose a core functionality
that will work well on a watch.

00:00:32.759 --> 00:00:35.790
Once you have nailed down the
use case, design for round

00:00:35.790 --> 00:00:36.750
screens first.

00:00:36.750 --> 00:00:41.730
A round screen has
22% less UI space

00:00:41.730 --> 00:00:43.950
than a rectangular
display, so this

00:00:43.950 --> 00:00:46.710
will ensure that your layout
works on both the round

00:00:46.710 --> 00:00:49.590
and rectangular displays.

00:00:49.590 --> 00:00:52.380
Lastly, take your
design for a spin.

00:00:52.380 --> 00:00:55.230
Wear OS is designed to
be used on the move.

00:00:55.230 --> 00:00:59.640
As such, a UI design that works
well on a computer monitor

00:00:59.640 --> 00:01:02.520
may not work in real
life on a watch.

00:01:02.520 --> 00:01:06.610
Test your design, using at
least one Wear OS device.

00:01:06.610 --> 00:01:08.400
Great, now you
have to locked down

00:01:08.400 --> 00:01:10.290
the user flow and the design.

00:01:10.290 --> 00:01:14.590
What are the development
tools available to you?

00:01:14.590 --> 00:01:17.990
Well, in addition to the regular
Android tools such as Android

00:01:17.990 --> 00:01:21.330
Studio, we offer APIs
and support libraries

00:01:21.330 --> 00:01:23.280
to make your life easier.

00:01:23.280 --> 00:01:26.850
On the platform front,
Wear OS supports the -round

00:01:26.850 --> 00:01:30.420
and -notround identifiers
for resources.

00:01:30.420 --> 00:01:33.750
As a result, you can have
different layouts or drawables

00:01:33.750 --> 00:01:36.090
depending on the screen shapes.

00:01:36.090 --> 00:01:39.870
We find that round and square
layouts tend to be the same,

00:01:39.870 --> 00:01:43.170
so maybe two-dimension files
containing different padding

00:01:43.170 --> 00:01:45.750
and margins are all you need.

00:01:45.750 --> 00:01:48.300
Try it out.

00:01:48.300 --> 00:01:51.510
In addition, we have added
a number of UI components

00:01:51.510 --> 00:01:54.330
that are round-aware
in the Wear UI Library.

00:01:54.330 --> 00:01:57.480
For example, the
WearablerecyclerView,

00:01:57.480 --> 00:02:01.770
a round aware recycler view,
the BoxInsetLayout, which

00:02:01.770 --> 00:02:05.970
keeps all the contents in the
center square of a circle,

00:02:05.970 --> 00:02:08.870
and a SwipeDismissframeLayout,
a UI pattern

00:02:08.870 --> 00:02:11.880
on Wear OS for dismissing views.

00:02:11.880 --> 00:02:14.230
In addition to round
designs, Wear OS

00:02:14.230 --> 00:02:18.510
supports always-on apps that
have longer user sessions.

00:02:18.510 --> 00:02:21.590
By default, when the user
is not using your app,

00:02:21.590 --> 00:02:25.350
Wear OS dismisses it and
returns to the watch face.

00:02:25.350 --> 00:02:29.100
While this works well for
apps with a short user flow,

00:02:29.100 --> 00:02:31.110
it works less well
when you're trying

00:02:31.110 --> 00:02:34.440
to check items off while
shopping in the local market--

00:02:34.440 --> 00:02:37.980
other examples include
exercise or travel apps.

00:02:37.980 --> 00:02:41.340
That's why we created
the Always On feature.

00:02:41.340 --> 00:02:45.480
With Always On apps, when the
user is not using your app,

00:02:45.480 --> 00:02:47.520
the watch will go
into ambient mode,

00:02:47.520 --> 00:02:49.770
turning off the
processor, but keeping

00:02:49.770 --> 00:02:51.690
your app in the foreground.

00:02:51.690 --> 00:02:54.030
This reduces battery
use while making

00:02:54.030 --> 00:02:56.340
app-resume fast and fluid.

00:02:56.340 --> 00:02:58.530
While your app is
in ambient mode,

00:02:58.530 --> 00:03:01.800
you can update it once a
minute, providing useful updates

00:03:01.800 --> 00:03:03.990
to the user.

00:03:03.990 --> 00:03:06.000
To implement this,
your activity will

00:03:06.000 --> 00:03:08.280
need to implement
ambiantmodesuppo

00:03:08.280 --> 00:03:11.400
rt.ambientcallbackprovider
and tell

00:03:11.400 --> 00:03:15.920
Wear OS how it should render the
screen while in ambient mode.

00:03:15.920 --> 00:03:18.780
With Wear OS by Google,
you're developing

00:03:18.780 --> 00:03:21.960
on top of a fully-featured
operating system with access

00:03:21.960 --> 00:03:24.720
to GPU and sensors.

00:03:24.720 --> 00:03:26.670
If you have an
existing mobile app,

00:03:26.670 --> 00:03:30.690
consider which key user flows
makes sense for Wear OS?

00:03:30.690 --> 00:03:34.380
Which actions will be better
on the wrist than on the phone?

00:03:34.380 --> 00:03:35.760
So what will you make?

00:03:35.760 --> 00:03:37.910
[MUSIC PLAYING]

