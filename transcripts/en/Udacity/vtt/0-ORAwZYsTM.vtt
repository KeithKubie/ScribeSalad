WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Now for the answer--Is this a Bohr Bug, which is repeatable under

00:00:04.000 --> 00:00:06.000
under a well-defined set of conditions?

00:00:06.000 --> 00:00:12.000
Well, if you include a debugger in the conditions, it could be a Bohr Bug.

00:00:12.000 --> 00:00:14.000
Normally, we don't do that.

00:00:14.000 --> 00:00:17.000
Heisenbugs change as the program is being observed,

00:00:17.000 --> 00:00:19.000
and therefore, this is a perfect instance of a Heisenbug.

00:00:19.000 --> 00:00:23.000
Mandelbugs have very complex causes--not the case over here.

00:00:23.000 --> 00:00:27.000
A Schroedinbug appears as soon as somebody looks at this program,

00:00:27.000 --> 00:00:30.000
and it probably stops working--Not the case over here.

00:00:30.000 --> 00:00:32.000
I would love to see a Schroedinbug in practice.

00:00:32.000 --> 00:00:35.000
It's a very interesting theoretical concept.

00:00:35.000 --> 00:00:37.000
So, how does this bug come to be?

00:00:37.000 --> 00:00:39.000
What we have here is a C-specialty.

00:00:39.000 --> 00:00:41.000
This is an initialized variable.

00:00:41.000 --> 00:00:46.000
When in a C program, we read an uninitialized variable as in here.

00:00:46.000 --> 00:00:49.000
Then the behavior of the program is undefined

00:00:49.000 --> 00:00:53.000
according to the semantics of C and also C+ does follow.

00:00:53.000 --> 00:00:58.000
Since the behavior is undefined, crashing was a perfect option.

00:00:58.000 --> 00:01:01.000
When executed normally x would simply take

00:01:01.000 --> 00:01:04.000
whatever random value was on the stack.

00:01:04.000 --> 00:01:06.000
Therefore, the assertion would fail.

00:01:06.000 --> 00:01:09.000
However, the debugger would always set the entire stack to zero

00:01:09.000 --> 00:01:13.000
before execution, and therefore x would take a zero value.

00:01:13.000 --> 00:01:16.000
Therefore, the assertion would hold.

00:01:16.000 --> 00:01:19.000
You can even have such distinction between running normally

00:01:19.000 --> 00:01:22.000
and being run on a debugger on purpose.

00:01:22.000 --> 00:01:25.000
Some malware actively checks if it's being run in a debugger

00:01:25.000 --> 00:01:28.000
and then automatically turns itself off.

00:01:28.000 --> 00:01:31.000
So, if you try to diagnose on malware,

00:01:31.000 --> 00:01:35.000
the malware may be specifically set up to prevent all sorts of probing.

00:01:35.000 --> 00:01:37.000
If you suspect a Heisenbug,

00:01:37.000 --> 00:01:41.000
think what the debugger does differently than the normal execution,

00:01:41.000 --> 00:01:46.000
and observe the program execution by at least two independent means,

00:01:46.000 --> 00:01:49.000
say a debugger and logging output or two different debuggers

00:01:49.000 --> 00:01:51.000
or whatever you have in order to find out what's going on.

