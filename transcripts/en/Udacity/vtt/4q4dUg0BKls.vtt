WEBVTT
Kind: captions
Language: en

00:00:00.300 --> 00:00:02.069
The average
number of requests

00:00:02.069 --> 00:00:05.250
needed to properly display
a website rises constantly

00:00:05.250 --> 00:00:07.830
and has recently risen over 100.

00:00:07.830 --> 00:00:11.609
That means on average, a website
requires over 100 requests

00:00:11.609 --> 00:00:12.869
to display correctly.

00:00:12.869 --> 00:00:14.879
Things are getting
a little crazy.

00:00:14.880 --> 00:00:17.280
Remember that HTTP/1
does not work well

00:00:17.280 --> 00:00:18.810
with lots of requests.

00:00:18.809 --> 00:00:21.989
Fortunately, HTTP/2 too
has come to the rescue.

00:00:21.989 --> 00:00:24.029
We'll look at some
problems of HTTP/1

00:00:24.030 --> 00:00:27.089
and how HTTP/2 is solving them.

00:00:27.089 --> 00:00:29.460
One of the reasons we
have so many requests

00:00:29.460 --> 00:00:31.710
is because of
head-of-line blocking.

00:00:31.710 --> 00:00:34.170
We talked about this earlier,
but it's so important

00:00:34.170 --> 00:00:36.329
let's briefly go over it again.

00:00:36.329 --> 00:00:39.629
Head-of-line blocking is when
one request is blocking others

00:00:39.630 --> 00:00:41.280
from completing.

00:00:41.280 --> 00:00:45.480
A browser will open at most six
connections to the same server.

00:00:45.479 --> 00:00:47.339
That means at most
six requests can

00:00:47.340 --> 00:00:49.770
be in flight simultaneously.

00:00:49.770 --> 00:00:52.140
At the very least, you'll
have to wait for the request

00:00:52.140 --> 00:00:55.200
to be sent and then the
response to be sent back.

00:00:55.200 --> 00:00:57.910
These two together are
called the round trip

00:00:57.909 --> 00:01:02.009
and the round trip time can take
between 20 to 50 milliseconds

00:01:02.009 --> 00:01:03.719
on a good connection.

00:01:03.719 --> 00:01:05.519
Let's do some quick math.

00:01:05.519 --> 00:01:08.280
Let's say a site needs
to send 100 requests

00:01:08.280 --> 00:01:10.260
to load completely.

00:01:10.260 --> 00:01:12.790
We can handle six
requests in parallel,

00:01:12.790 --> 00:01:15.480
which means ideally
each connection will

00:01:15.480 --> 00:01:20.340
need to make 17 requests to
download all 100 requests.

00:01:20.340 --> 00:01:22.620
With each request
having a round trip time

00:01:22.620 --> 00:01:25.260
averaging roughly
35 milliseconds,

00:01:25.260 --> 00:01:28.530
this yields 525 milliseconds.

00:01:28.530 --> 00:01:31.710
About half a second of waiting--

00:01:31.709 --> 00:01:33.539
of doing nothing.

00:01:33.540 --> 00:01:36.690
And this assumes that actually
transferring the requested file

00:01:36.689 --> 00:01:38.700
doesn't take any time at all.

00:01:38.700 --> 00:01:40.719
If the file being
transferred is large,

00:01:40.719 --> 00:01:43.109
then this number will
become a lot bigger.

00:01:43.109 --> 00:01:45.780
This round trip
time is an average.

00:01:45.780 --> 00:01:48.540
If there's an unstable or
slow internet connection,

00:01:48.540 --> 00:01:50.160
things only get worse.

00:01:50.159 --> 00:01:52.469
Head-of-line blocking is
a disaster to good loading

00:01:52.469 --> 00:01:54.000
performance of a website.

00:01:54.000 --> 00:01:56.219
With HTTP/2, we
don't have to worry

00:01:56.219 --> 00:01:58.370
about head-of-line blocking.

