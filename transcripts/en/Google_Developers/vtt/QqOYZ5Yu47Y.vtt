WEBVTT
Kind: captions
Language: en

00:00:00.110 --> 00:00:01.443
LAURENCE MORONEY: OK, everybody.

00:00:01.443 --> 00:00:03.990
Thanks for coming, and welcome
to the session on building

00:00:03.990 --> 00:00:05.780
geo services that scale.

00:00:05.780 --> 00:00:06.780
I'm Laurence Moroney.

00:00:06.780 --> 00:00:08.660
I'm a developer
advocate at Google.

00:00:08.660 --> 00:00:11.060
I work on a lot of different
technologies at Google.

00:00:11.060 --> 00:00:13.090
But today, I'm going to
be talking about some

00:00:13.090 --> 00:00:15.750
of the geo service and some
of the backend services

00:00:15.750 --> 00:00:17.700
that are available from Google.

00:00:17.700 --> 00:00:20.739
My co speaker, Elena,
unfortunately can't be here.

00:00:20.739 --> 00:00:23.280
We're going to be talking about
an app that we were building,

00:00:23.280 --> 00:00:25.250
and Elena was user
zero for this app.

00:00:25.250 --> 00:00:27.292
And unfortunately, she
didn't use it correctly.

00:00:27.292 --> 00:00:29.500
And we'll see why that ended
up delaying her actually

00:00:29.500 --> 00:00:31.380
being here.

00:00:31.380 --> 00:00:33.930
[LAUGHTER]

00:00:33.930 --> 00:00:37.280
So what we want to think about
is, say you are a business

00:00:37.280 --> 00:00:40.430
or you're a startup, and
you want to build a new app.

00:00:40.430 --> 00:00:42.630
And you have a lot of
requirements for this app

00:00:42.630 --> 00:00:45.000
that you just can't
compromise on.

00:00:45.000 --> 00:00:46.910
One of these requirements
is that you've

00:00:46.910 --> 00:00:49.470
got business logic that's
very precious to you,

00:00:49.470 --> 00:00:52.490
and you do not want to
distribute this business

00:00:52.490 --> 00:00:54.630
logic in an app
where somebody could

00:00:54.630 --> 00:00:57.370
decompile it and maybe
filter through and figure out

00:00:57.370 --> 00:00:58.175
what you're doing.

00:00:58.175 --> 00:00:59.050
I'll give an example.

00:00:59.050 --> 00:01:01.590
I used to work in
financial services.

00:01:01.590 --> 00:01:05.660
We had a number of processes
in financial services where

00:01:05.660 --> 00:01:06.800
we would look at a company.

00:01:06.800 --> 00:01:08.883
We would look at the
fundamentals of that company.

00:01:08.883 --> 00:01:10.240
We'd feed them into a machine.

00:01:10.240 --> 00:01:12.020
We'd get a value
out of that machine.

00:01:12.020 --> 00:01:14.279
And then that value
would help us estimate,

00:01:14.279 --> 00:01:15.820
you know, is this
company doing well,

00:01:15.820 --> 00:01:18.610
is the share price too high,
is the share price too low.

00:01:18.610 --> 00:01:21.560
And those analytics were
very precious to us.

00:01:21.560 --> 00:01:23.670
And there's no way that
we would distribute them.

00:01:23.670 --> 00:01:25.190
So it's pretty common
scenario that you

00:01:25.190 --> 00:01:27.440
don't want to distribute
this kind of stuff in an app.

00:01:27.440 --> 00:01:30.200
You need something on the back
that would be able to scale.

00:01:30.200 --> 00:01:32.100
Another one that we
hear a lot at Google

00:01:32.100 --> 00:01:35.870
is that we have a number of APIs
that require like an API key.

00:01:35.870 --> 00:01:38.170
And that API key is
used, for example,

00:01:38.170 --> 00:01:40.660
to monitor your
usage of it so that,

00:01:40.660 --> 00:01:42.880
if you've got a free
limit, so that you

00:01:42.880 --> 00:01:43.980
can go up against that.

00:01:43.980 --> 00:01:46.400
Or if you're charged, just to
make sure that you don't get

00:01:46.400 --> 00:01:48.140
overcharged for things
that you're using.

00:01:48.140 --> 00:01:51.340
And, again, if your API key
gets distributed with your app,

00:01:51.340 --> 00:01:54.490
people can decompile it and
then start using your API key.

00:01:54.490 --> 00:01:56.620
And that's been a
little bit naughty.

00:01:56.620 --> 00:01:58.590
So a lot of people
have requirements

00:01:58.590 --> 00:02:00.890
around, we don't want to
distribute the API key,

00:02:00.890 --> 00:02:04.030
so we need some kind of
server side logic for this.

00:02:04.030 --> 00:02:06.460
So we have all of
these requirements.

00:02:06.460 --> 00:02:09.590
And I'm thinking, when we were
putting this session together,

00:02:09.590 --> 00:02:11.340
we were saying we
really wanted to make it

00:02:11.340 --> 00:02:12.940
feel like it's a real business.

00:02:12.940 --> 00:02:14.460
We're going into a new venture.

00:02:14.460 --> 00:02:16.090
We're building something new.

00:02:16.090 --> 00:02:19.100
And we had a number of scenarios
that we wanted to look over.

00:02:19.100 --> 00:02:21.380
But one of the scenarios
that came up constantly

00:02:21.380 --> 00:02:23.517
was that traffic is
always a problem.

00:02:23.517 --> 00:02:25.600
You know, how was it getting
into Shoreline today?

00:02:25.600 --> 00:02:28.160
Were you guys OK or did
you have a traffic jam?

00:02:28.160 --> 00:02:29.337
AUDIENCE: A traffic jam.

00:02:29.337 --> 00:02:30.670
LAURENCE MORONEY: A traffic jam?

00:02:30.670 --> 00:02:31.320
Yeah?

00:02:31.320 --> 00:02:32.820
Particularly in
Silicon Valley here,

00:02:32.820 --> 00:02:34.364
the traffic can be really bad.

00:02:34.364 --> 00:02:36.030
But one of the things
that we discovered

00:02:36.030 --> 00:02:38.040
when we were doing
our research is

00:02:38.040 --> 00:02:41.540
that nothing can ruin your
day like a traffic jam caused

00:02:41.540 --> 00:02:43.451
by a zombie invasion.

00:02:43.451 --> 00:02:45.200
[LAUGHTER]

00:02:45.200 --> 00:02:47.660
So we said, OK, what
if we built an app that

00:02:47.660 --> 00:02:51.340
would help people not get
stuck in traffic jams caused

00:02:51.340 --> 00:02:52.540
by zombie invasions.

00:02:52.540 --> 00:02:54.120
Or if you had to
go on that route,

00:02:54.120 --> 00:02:56.420
that you could pack the
appropriate material,

00:02:56.420 --> 00:02:58.860
like the odd shotgun or two
or those kind of things.

00:02:58.860 --> 00:03:01.690
So we said, what if we built
an app where people could then,

00:03:01.690 --> 00:03:04.910
if you see a zombie invasion or
if you see zombies on the road,

00:03:04.910 --> 00:03:06.980
that you can report
these zombies,

00:03:06.980 --> 00:03:08.830
these could get
fed into a system.

00:03:08.830 --> 00:03:10.720
And then when you're
using our app--

00:03:10.720 --> 00:03:14.422
this is our wonderful billion
dollar idea app-- when you're

00:03:14.422 --> 00:03:15.880
using this thing,
you can say, hey,

00:03:15.880 --> 00:03:18.150
right now I'm going
to travel from here

00:03:18.150 --> 00:03:19.760
to a particular address.

00:03:19.760 --> 00:03:22.154
Let me check if there's
a delay on the way.

00:03:22.154 --> 00:03:23.570
And if there's a
delay on the way,

00:03:23.570 --> 00:03:26.090
then maybe I should go take a
look at the database of zombie

00:03:26.090 --> 00:03:30.364
recordings just to make sure
that I need to pack a shotgun

00:03:30.364 --> 00:03:32.530
or I need to pack whatever
it is to help me get away

00:03:32.530 --> 00:03:34.580
from the zombies or get
around these zombies.

00:03:34.580 --> 00:03:35.820
And then we also
said, you know what?

00:03:35.820 --> 00:03:36.740
If you're going
to be doing that,

00:03:36.740 --> 00:03:38.490
we also need to attribute
it a little bit.

00:03:38.490 --> 00:03:40.330
So let's have people
report something,

00:03:40.330 --> 00:03:41.860
but let them attribute.

00:03:41.860 --> 00:03:44.280
So maybe it could be
two or three zombies,

00:03:44.280 --> 00:03:45.870
or maybe it could
be 100 zombies,

00:03:45.870 --> 00:03:47.610
or maybe the
zombies are breaking

00:03:47.610 --> 00:03:50.690
out into a Michael Jackson
dance party-- you know,

00:03:50.690 --> 00:03:51.630
any of these things.

00:03:51.630 --> 00:03:53.580
So all of this
kind of information

00:03:53.580 --> 00:03:57.474
we need to be able to capture
and to be able to store.

00:03:57.474 --> 00:03:58.890
Oh, and then the
other thing is we

00:03:58.890 --> 00:04:00.970
decided to get a
focus group together

00:04:00.970 --> 00:04:03.680
to help us figure out a
name for the application.

00:04:03.680 --> 00:04:06.449
And we spent months and months
and months and lots of people

00:04:06.449 --> 00:04:07.240
in the focus group.

00:04:07.240 --> 00:04:09.970
And they told us we should
call it Zombie Maps.

00:04:09.970 --> 00:04:11.800
Go figure.

00:04:11.800 --> 00:04:14.120
But seriously, I mean,
it's a little bit

00:04:14.120 --> 00:04:16.670
of a flippant
scenario, but when you

00:04:16.670 --> 00:04:19.350
think about when you're
building an app like this one,

00:04:19.350 --> 00:04:21.519
you'll generally have an
architecture something

00:04:21.519 --> 00:04:22.520
like this.

00:04:22.520 --> 00:04:24.870
The heart of your business,
your business logic,

00:04:24.870 --> 00:04:27.460
your analytics in my
financial services example,

00:04:27.460 --> 00:04:29.950
are this service box
right in the middle.

00:04:29.950 --> 00:04:33.320
And this service box might have
to consume third party data.

00:04:33.320 --> 00:04:35.120
So in the example
I'm showing here,

00:04:35.120 --> 00:04:37.470
we're consuming geo
data from Google.

00:04:37.470 --> 00:04:39.100
But in the financial
services example,

00:04:39.100 --> 00:04:42.720
you might be consuming financial
information from stock markets,

00:04:42.720 --> 00:04:43.920
all those kind of things.

00:04:43.920 --> 00:04:45.930
So your service has a
lot of smarts in there,

00:04:45.930 --> 00:04:47.950
has analytics, has
your business logic.

00:04:47.950 --> 00:04:49.356
If you've got API
keys, if you've

00:04:49.356 --> 00:04:51.730
got any of that kind of stuff,
you would put it in there.

00:04:51.730 --> 00:04:55.360
And then, like the box at
the top, the Google Maps box,

00:04:55.360 --> 00:04:57.710
is this third party stuff
that we're consuming.

00:04:57.710 --> 00:04:59.890
But then you'd also might
want to wrap that service

00:04:59.890 --> 00:05:01.352
with some kind of an API level.

00:05:01.352 --> 00:05:03.060
Well, of course you
would want to wrap it

00:05:03.060 --> 00:05:04.470
with some kind of an
API level because you

00:05:04.470 --> 00:05:06.410
want to be able to
consume that service,

00:05:06.410 --> 00:05:08.570
and you want to be able to
build mobile apps or web

00:05:08.570 --> 00:05:10.370
apps that consume that service.

00:05:10.370 --> 00:05:11.770
And the typical
pattern will look

00:05:11.770 --> 00:05:14.110
like this, where I have
mobile apps on the left,

00:05:14.110 --> 00:05:15.610
they're coming
through the internet.

00:05:15.610 --> 00:05:17.080
They're hitting an API.

00:05:17.080 --> 00:05:20.750
That API then is the front door
into my service for those apps.

00:05:20.750 --> 00:05:22.980
And then the service itself
is doing all the smarts--

00:05:22.980 --> 00:05:26.160
it's managing data
with that database,

00:05:26.160 --> 00:05:27.980
it's pulling in
third party content,

00:05:27.980 --> 00:05:30.550
it's applying business logic
to all of those things.

00:05:30.550 --> 00:05:33.500
So pretty standard type
of architecture here

00:05:33.500 --> 00:05:37.270
that I'm sure many of you have
built something like this.

00:05:37.270 --> 00:05:40.090
But I just want to
recap our requirements.

00:05:40.090 --> 00:05:42.412
And particularly when it
comes to a zombie invasion,

00:05:42.412 --> 00:05:44.120
our requirements are
very, very important

00:05:44.120 --> 00:05:47.390
because we need to be
able to scale our app up

00:05:47.390 --> 00:05:49.379
as we need to be
able to scale it up.

00:05:49.379 --> 00:05:51.170
The worst thing in the
world is for our app

00:05:51.170 --> 00:05:53.700
not to work because of
scale if there really

00:05:53.700 --> 00:05:55.250
was a zombie invasion.

00:05:55.250 --> 00:05:57.320
And then our customers,
instead of giving us

00:05:57.320 --> 00:05:59.000
negative reviews on
our app, are going

00:05:59.000 --> 00:06:00.690
to be eaten by these zombies.

00:06:00.690 --> 00:06:02.730
So we say, OK, we need
to be able to scale up

00:06:02.730 --> 00:06:05.080
and we need to be able
to scale down as needed.

00:06:05.080 --> 00:06:08.744
Why do you think one
would want to scale down?

00:06:08.744 --> 00:06:09.670
AUDIENCE: Cost.

00:06:09.670 --> 00:06:10.640
LAURENCE MORONEY: Cost.

00:06:10.640 --> 00:06:11.600
Exactly.

00:06:11.600 --> 00:06:13.670
A lot of times when
we talk about scale,

00:06:13.670 --> 00:06:15.130
we tend to think
in terms of scale

00:06:15.130 --> 00:06:16.949
means our app can get
really, really big.

00:06:16.949 --> 00:06:18.990
And it can get really,
really big really quickly,

00:06:18.990 --> 00:06:20.070
and that's great.

00:06:20.070 --> 00:06:21.900
But if you go to a
huge capacity to be

00:06:21.900 --> 00:06:24.080
able to handle 10
million concurrent users

00:06:24.080 --> 00:06:27.140
or some crazy number like that
and then the zombies are all

00:06:27.140 --> 00:06:29.782
gone, and you're paying
for this capacity,

00:06:29.782 --> 00:06:31.490
it's not very good
for you as a business.

00:06:31.490 --> 00:06:33.882
You want to be able to scale
down very, very quickly.

00:06:33.882 --> 00:06:35.590
So we were thinking
we want a technology.

00:06:35.590 --> 00:06:37.090
We want to be able
to build this app

00:06:37.090 --> 00:06:39.630
so that right now, thankfully,
there are no zombies,

00:06:39.630 --> 00:06:42.300
but should they turn up tonight,
that we're going to scale up.

00:06:42.300 --> 00:06:44.174
We're going to handle
the capacity of reports

00:06:44.174 --> 00:06:45.940
of these zombies,
getting details back

00:06:45.940 --> 00:06:48.340
about these zombies so we
can navigate around them.

00:06:48.340 --> 00:06:50.420
And then when the
zombies are gone,

00:06:50.420 --> 00:06:51.920
we go away from all of that one.

00:06:51.920 --> 00:06:53.753
And then, of course,
as I mentioned earlier,

00:06:53.753 --> 00:06:56.740
our other requirement-- storing
sensitive business logic data,

00:06:56.740 --> 00:06:59.090
such as API keys and that
kind of thing, off the device.

00:07:02.580 --> 00:07:04.790
So we started
thinking about this

00:07:04.790 --> 00:07:06.090
and how we would build this.

00:07:06.090 --> 00:07:08.050
And if you've used
Android Studio,

00:07:08.050 --> 00:07:10.720
Android studio has this
handy dandy little tool

00:07:10.720 --> 00:07:13.340
for creating cloud
back end modules.

00:07:13.340 --> 00:07:15.010
And this is the
wizard on this one.

00:07:15.010 --> 00:07:18.070
And what this does is it will
create an App Engine backend,

00:07:18.070 --> 00:07:20.830
and it will stub out the
App Engine back for you.

00:07:20.830 --> 00:07:23.150
And then it will create
an API level wrapping

00:07:23.150 --> 00:07:24.540
that App Engine backend.

00:07:24.540 --> 00:07:27.240
So if you remember my
three boxes on my diagram,

00:07:27.240 --> 00:07:29.940
this is two of them being
built for me right now.

00:07:29.940 --> 00:07:30.970
So this is great.

00:07:30.970 --> 00:07:32.720
This is a really,
really good start for me

00:07:32.720 --> 00:07:33.990
to be able to do things.

00:07:33.990 --> 00:07:35.200
But then there was my data.

00:07:35.200 --> 00:07:37.980
So there was that cylinder over
on the right of the diagram.

00:07:37.980 --> 00:07:40.110
How do I store my data,
how do I retrieve my data,

00:07:40.110 --> 00:07:41.690
and how do I make it scale?

00:07:41.690 --> 00:07:43.400
If you guys recognize
this icon, this

00:07:43.400 --> 00:07:45.600
is the icon from
Cloud Datastore.

00:07:45.600 --> 00:07:47.200
And what Cloud
Datastore gives you

00:07:47.200 --> 00:07:50.650
is a NoSQL database that
you can put as the backend.

00:07:50.650 --> 00:07:53.230
And as you scale up your
App Engine instances,

00:07:53.230 --> 00:07:55.120
it will scale up and
capacity to meet.

00:07:55.120 --> 00:07:57.940
And as you scale down, it
will scale down to meet also.

00:07:57.940 --> 00:08:01.280
So it seems to be really, really
perfect for our requirements

00:08:01.280 --> 00:08:02.860
to use these things.

00:08:02.860 --> 00:08:05.800
So let's go back and take a
look at our architecture again.

00:08:05.800 --> 00:08:07.980
So here was our architecture--
our mobile device

00:08:07.980 --> 00:08:10.410
is on the left, our
API, our service

00:08:10.410 --> 00:08:12.870
here, our data on the
backend over on the right.

00:08:12.870 --> 00:08:14.450
And then we can say,
OK, with the API

00:08:14.450 --> 00:08:15.677
we're using Cloud Endpoints.

00:08:15.677 --> 00:08:17.760
Remember that wizard that
I showed you earlier on?

00:08:17.760 --> 00:08:19.590
That was the Cloud
Endpoints wizard

00:08:19.590 --> 00:08:22.950
that created the API wrapper,
which are the endpoints,

00:08:22.950 --> 00:08:25.940
plus the App Engine backend
for me so that I could

00:08:25.940 --> 00:08:27.350
write my service in App Engine.

00:08:27.350 --> 00:08:31.390
And App Engine runs
Java, Python PHP, Go.

00:08:31.390 --> 00:08:33.890
So I could start writing
business logic in these.

00:08:33.890 --> 00:08:36.440
Because I did it
in Android Studio,

00:08:36.440 --> 00:08:39.090
I wrote my backend for
this application in Java.

00:08:39.090 --> 00:08:42.130
And then the database itself
is this NoSQL storage,

00:08:42.130 --> 00:08:43.799
so it's the Cloud Datastore.

00:08:43.799 --> 00:08:45.660
So it seems like I
have all my pieces here

00:08:45.660 --> 00:08:48.080
to be able to scale up
and down as much as I need

00:08:48.080 --> 00:08:51.740
to and only pay for the services
that I'm actually using,

00:08:51.740 --> 00:08:53.530
which is, particularly
if you're a startup

00:08:53.530 --> 00:08:55.610
and you're burning through
seed capital, that's

00:08:55.610 --> 00:08:56.820
very, very appealing.

00:08:56.820 --> 00:08:59.400
You don't want to budget for
crazy amounts of infrastructure

00:08:59.400 --> 00:09:02.120
if you don't need crazy
amounts of infrastructure.

00:09:02.120 --> 00:09:03.890
You budget for what you use.

00:09:03.890 --> 00:09:05.840
And then, of course,
the last thing for this

00:09:05.840 --> 00:09:08.579
was, we said we wanted to
incorporate a third party API.

00:09:08.579 --> 00:09:10.120
And in this case,
the third party API

00:09:10.120 --> 00:09:13.580
was data coming from Google,
which is that box at the top.

00:09:13.580 --> 00:09:16.280
And the data that we use from
Google and we decided to use

00:09:16.280 --> 00:09:18.920
was-- you've probably all
seen something like this.

00:09:18.920 --> 00:09:21.940
This is a Google map, and
it's showing travel times.

00:09:21.940 --> 00:09:24.530
You know those red
blobs around San Mateo

00:09:24.530 --> 00:09:27.500
where traffic is much
slower than usual.

00:09:27.500 --> 00:09:29.940
The orange blobs is where
it's a bit slower than usual.

00:09:29.940 --> 00:09:32.045
Now, this data has to
come from somewhere.

00:09:32.045 --> 00:09:33.420
And we said to
ourselves as we're

00:09:33.420 --> 00:09:35.540
building this application,
this is great.

00:09:35.540 --> 00:09:37.640
So we know we can get this data.

00:09:37.640 --> 00:09:39.940
So if there really
is a zombie invasion

00:09:39.940 --> 00:09:41.930
and traffic is being
impacted by it,

00:09:41.930 --> 00:09:43.430
there's an API
somewhere that we can

00:09:43.430 --> 00:09:47.200
call to see if there's
going to be a traffic delay.

00:09:47.200 --> 00:09:50.750
And that is API is part of the
Google Maps web services APIs.

00:09:50.750 --> 00:09:53.250
Now, there's a whole
bunch of these APIs.

00:09:53.250 --> 00:09:54.930
My co speaker was
the expert in these,

00:09:54.930 --> 00:09:56.471
and she was going
to talk about them.

00:09:56.471 --> 00:09:59.160
Unfortunately, she's not
here, so bear with me.

00:09:59.160 --> 00:10:01.670
One of these that I mentioned
was the Directions API

00:10:01.670 --> 00:10:04.470
so that you can get turn by
turn directions between A and B.

00:10:04.470 --> 00:10:06.700
The one that we're
using in the Zombie Maps

00:10:06.700 --> 00:10:09.170
is the Distance Matrix API.

00:10:09.170 --> 00:10:12.210
And what that is is you can
feed it a number of sources

00:10:12.210 --> 00:10:14.600
and you can feed it a
number of destinations--

00:10:14.600 --> 00:10:16.659
excuse the pun about
feeding-- and then

00:10:16.659 --> 00:10:18.950
it will tell you all the
different routes between them,

00:10:18.950 --> 00:10:19.990
how much it would take.

00:10:19.990 --> 00:10:22.640
And then under various
models, like are you walking,

00:10:22.640 --> 00:10:24.015
are you driving,
are you flying--

00:10:24.015 --> 00:10:26.264
I don't think that's flying--
are you walking, are you

00:10:26.264 --> 00:10:28.440
driving, are you busing,
it will tell you the time.

00:10:28.440 --> 00:10:30.970
It will also give
you predictive models

00:10:30.970 --> 00:10:33.580
based on our knowledge of
the history of these that's

00:10:33.580 --> 00:10:35.460
been fed into a machine
learning algorithm

00:10:35.460 --> 00:10:38.240
as to say, OK,
usually on a Saturday,

00:10:38.240 --> 00:10:39.860
this might be a 20 minute ride.

00:10:39.860 --> 00:10:41.940
It's actually going to
be a 25 minute ride.

00:10:41.940 --> 00:10:45.260
And that's the perfect
signal for us to say, a ha,

00:10:45.260 --> 00:10:46.440
there's a delay here.

00:10:46.440 --> 00:10:49.160
Let's see if there's going to
be zombies at that location.

00:10:49.160 --> 00:10:52.020
Geocoding, as we can understand,
is typical geocoding.

00:10:52.020 --> 00:10:54.540
It's turning numbers
into an actual location--

00:10:54.540 --> 00:10:56.270
into an address,
that type of thing.

00:10:56.270 --> 00:10:59.160
Places API allows you
to understand places

00:10:59.160 --> 00:11:00.390
that you're around.

00:11:00.390 --> 00:11:03.600
The Roads API allows you to
snap latitudes and longitudes

00:11:03.600 --> 00:11:06.380
to real roads because sometimes
latitudes and longitudes

00:11:06.380 --> 00:11:08.570
fed by your phone
are very inaccurate.

00:11:08.570 --> 00:11:10.621
Anybody here from
the east coast?

00:11:10.621 --> 00:11:11.120
OK.

00:11:11.120 --> 00:11:13.490
So on the east coast,
a lot of the highways

00:11:13.490 --> 00:11:14.770
have service roads.

00:11:14.770 --> 00:11:17.020
And then sometimes when
you're driving on the highway,

00:11:17.020 --> 00:11:19.741
your phone thinks, based on
the latitude and longitude,

00:11:19.741 --> 00:11:21.490
that you're on that
parallel service road.

00:11:21.490 --> 00:11:23.281
That's the kind of
thing I'm talking about.

00:11:23.281 --> 00:11:25.560
The Roads API helps you
snap to the real locations.

00:11:25.560 --> 00:11:28.000
Elevation, time zone really
speak for themselves.

00:11:28.000 --> 00:11:33.155
But these APIs, they give you
the whole world in your hands.

00:11:33.155 --> 00:11:34.030
AUDIENCE: [INAUDIBLE]

00:11:34.030 --> 00:11:34.530
Thank you.

00:11:34.530 --> 00:11:37.140
Thank you very much.

00:11:37.140 --> 00:11:39.290
So going back to
our architecture,

00:11:39.290 --> 00:11:40.750
here's what we're building.

00:11:40.750 --> 00:11:42.730
We really want, then,
the ability for people

00:11:42.730 --> 00:11:44.340
to report zombie sightings.

00:11:44.340 --> 00:11:47.770
So let's take a look at the
API that we have for that.

00:11:47.770 --> 00:11:50.990
So if you've ever built
in Cloud Endpoints before,

00:11:50.990 --> 00:11:54.177
you'll build a method into
your business logic tier,

00:11:54.177 --> 00:11:56.260
and then you create some
metadata for that method,

00:11:56.260 --> 00:11:58.420
and that effectively
turns it into an API.

00:11:58.420 --> 00:11:59.850
And here's my API for that.

00:11:59.850 --> 00:12:02.080
It's very, very simple.

00:12:02.080 --> 00:12:04.320
The yellow tags are
the ones to really take

00:12:04.320 --> 00:12:07.050
note of-- the API and
the API namespace.

00:12:07.050 --> 00:12:10.860
So once I put them and once
I specify the classes that

00:12:10.860 --> 00:12:14.480
are implementing these, then
when I run this on App Engine,

00:12:14.480 --> 00:12:15.983
I'm going to get
tools like this.

00:12:19.700 --> 00:12:23.840
If you open up your App
Engine app in the browser,

00:12:23.840 --> 00:12:26.380
it's just going to
be name.appspot.com.

00:12:26.380 --> 00:12:29.140
You can go into the API
explorer from there.

00:12:29.140 --> 00:12:31.960
And here, you can see my zombie
reporter API has actually

00:12:31.960 --> 00:12:36.450
shown up, just because I put
that metadata into my app

00:12:36.450 --> 00:12:38.810
and it was attributing
those classes.

00:12:38.810 --> 00:12:42.690
And then you can do things
like testing your API.

00:12:42.690 --> 00:12:44.660
I did a test here,
where you can actually

00:12:44.660 --> 00:12:46.880
see the URL of my App Engine.

00:12:46.880 --> 00:12:49.460
So if you want to try it
out now, you can see it.

00:12:49.460 --> 00:12:51.700
And so if I did this,
just to find zombies

00:12:51.700 --> 00:12:53.350
and to report the
zombies-- I know

00:12:53.350 --> 00:12:55.130
the font is very,
very small here--

00:12:55.130 --> 00:12:57.130
but it's just JSON
being returned back.

00:12:57.130 --> 00:13:00.920
And the JSON is where somebody
has reported a zombie.

00:13:00.920 --> 00:13:02.390
This is the latitude
and longitude

00:13:02.390 --> 00:13:03.610
of where it was reported.

00:13:03.610 --> 00:13:05.490
And this is the note
associated with it,

00:13:05.490 --> 00:13:08.680
like too many to count, they're
breaking out into a dance

00:13:08.680 --> 00:13:10.330
party, or some of those things.

00:13:10.330 --> 00:13:12.394
So all of these
are built in if I'm

00:13:12.394 --> 00:13:13.560
building this an App Engine.

00:13:13.560 --> 00:13:15.330
I'm getting these out
of the box for free.

00:13:15.330 --> 00:13:17.580
I haven't done anything
other than that attribution

00:13:17.580 --> 00:13:19.940
that I just showed.

00:13:19.940 --> 00:13:25.360
And now, so when we want
to save our data-- so I've

00:13:25.360 --> 00:13:27.350
seen a zombie, I want
to make a report,

00:13:27.350 --> 00:13:29.140
and I want to save
it into the database.

00:13:29.140 --> 00:13:30.620
This is all I have to do.

00:13:30.620 --> 00:13:33.370
This is using a library
called Objectify.

00:13:33.370 --> 00:13:36.310
And Objectify, it's
just Java access API

00:13:36.310 --> 00:13:37.820
that's been built
for App Engine,

00:13:37.820 --> 00:13:40.010
and it's been built
for Cloud Datastore.

00:13:40.010 --> 00:13:43.990
And it makes, for me to save
an entity into the database,

00:13:43.990 --> 00:13:45.369
as easy as this.

00:13:45.369 --> 00:13:47.660
And it's almost just plain
English when you look at it.

00:13:47.660 --> 00:13:50.470
It's objectify, save, my
entity-- my entity is called

00:13:50.470 --> 00:13:52.320
sighting-- and save it now.

00:13:52.320 --> 00:13:53.980
And it's really
as simple as that.

00:13:53.980 --> 00:13:56.430
You can learn more about
this library at that link--

00:13:56.430 --> 00:14:01.700
github.com/objectify.

00:14:01.700 --> 00:14:03.600
I'm building this
logic, and I want

00:14:03.600 --> 00:14:05.160
this logic to be able to scale.

00:14:05.160 --> 00:14:06.850
I'm building it
into my middleware.

00:14:06.850 --> 00:14:08.400
So the next thing
I want it to have

00:14:08.400 --> 00:14:10.950
is the location of a zombie.

00:14:10.950 --> 00:14:14.760
So this is just a plain old
Java object, as you can see.

00:14:14.760 --> 00:14:16.850
It's a public class
zombie location.

00:14:16.850 --> 00:14:18.039
I've given it an ID.

00:14:18.039 --> 00:14:19.080
I've given it a latitude.

00:14:19.080 --> 00:14:20.340
I've given it a longitude.

00:14:20.340 --> 00:14:22.400
And it's just a string
for attributing this

00:14:22.400 --> 00:14:24.610
that I can give some
details on the zombie

00:14:24.610 --> 00:14:26.450
and have some
getters and setters.

00:14:26.450 --> 00:14:29.500
But then I just added
these attributes to it.

00:14:29.500 --> 00:14:31.870
This is the only
requirement in order

00:14:31.870 --> 00:14:35.080
to get the benefit of
Objectify that I've just shown.

00:14:35.080 --> 00:14:38.950
Your class, you specify
as an entity in Objectify.

00:14:38.950 --> 00:14:44.290
Each of the fields that you want
to store, you put as an index.

00:14:44.290 --> 00:14:45.810
The only major
requirement is you

00:14:45.810 --> 00:14:49.700
have to have a long called ID,
and you attribute that as ID.

00:14:49.700 --> 00:14:51.660
So my plain old Java
object, to turn it

00:14:51.660 --> 00:14:54.270
into something that can
be serialized and scaled,

00:14:54.270 --> 00:14:55.690
this is all I had to do to it.

00:14:55.690 --> 00:14:58.360
Pretty straightforward,
pretty easy, right?

00:14:58.360 --> 00:15:00.350
OK, cool.

00:15:00.350 --> 00:15:04.940
So now when it comes to storing
this data, and the Objectify

00:15:04.940 --> 00:15:06.780
line that I showed
you earlier on,

00:15:06.780 --> 00:15:09.210
again, it's just a
straightforward method.

00:15:09.210 --> 00:15:12.170
In this case, I call it
insertZombieSighting.

00:15:12.170 --> 00:15:14.260
I'm passing a sighting to that.

00:15:14.260 --> 00:15:17.460
My API is handling the
transfer over and back

00:15:17.460 --> 00:15:20.624
between my Android or iOS
app and the actual backend.

00:15:20.624 --> 00:15:22.040
And all that's
going to do is call

00:15:22.040 --> 00:15:24.980
that line Objective Save
Entity Sighting Now,

00:15:24.980 --> 00:15:28.660
so that I can store my
sighting in the database.

00:15:28.660 --> 00:15:33.087
So the next thing is I need
to write something that says,

00:15:33.087 --> 00:15:35.170
OK, if I'm going to think
about my business logic,

00:15:35.170 --> 00:15:38.070
I'm saying I need to go
from A to B. I've detected

00:15:38.070 --> 00:15:39.600
that there's a
delay between here

00:15:39.600 --> 00:15:41.882
and there-- I'll show the
code for that in a moment--

00:15:41.882 --> 00:15:43.340
and if there's a
delay between here

00:15:43.340 --> 00:15:45.290
and there, I need to
present the user to say,

00:15:45.290 --> 00:15:47.230
maybe we should find
some zombies between here

00:15:47.230 --> 00:15:49.970
and there to see if that's
what's causing our delay.

00:15:49.970 --> 00:15:52.460
So here's how I would query
the database to do that.

00:15:52.460 --> 00:15:54.430
It's a find zombies method.

00:15:54.430 --> 00:15:56.890
And all it is is I'm going
to create an array list

00:15:56.890 --> 00:15:59.800
of these zombie location types.

00:15:59.800 --> 00:16:03.010
And then in Objectify,
I'm going to load.

00:16:03.010 --> 00:16:05.680
And I have to specify the
type that I'm loading in

00:16:05.680 --> 00:16:08.569
because earlier when I stored,
they were zombie locations.

00:16:08.569 --> 00:16:10.110
So now when I'm
taking them back out,

00:16:10.110 --> 00:16:11.900
they're still zombie locations.

00:16:11.900 --> 00:16:14.049
And there's only
one constraint when

00:16:14.049 --> 00:16:15.840
using this that was a
little bit of a pain,

00:16:15.840 --> 00:16:17.090
but it's not too bad.

00:16:17.090 --> 00:16:19.460
And that was if I want
to filter on values,

00:16:19.460 --> 00:16:22.260
I can only filter
on one value type.

00:16:22.260 --> 00:16:25.780
So you can see here, I'm
just filtering on longitude.

00:16:25.780 --> 00:16:28.032
So if you think about, I
have a latitude and longitude

00:16:28.032 --> 00:16:28.615
for my source.

00:16:28.615 --> 00:16:31.007
I have a latitude and
longitude for my destination.

00:16:31.007 --> 00:16:32.590
So I said, what I
want to do is I want

00:16:32.590 --> 00:16:35.120
to draw a rectangle
around these and find

00:16:35.120 --> 00:16:37.050
any zombies within that space.

00:16:37.050 --> 00:16:38.650
So I'll start with
the longitudes

00:16:38.650 --> 00:16:40.280
and I'll filter
on the longitudes

00:16:40.280 --> 00:16:42.520
so I get a filter
of all my zombies

00:16:42.520 --> 00:16:45.970
with longitudes that
are within this space.

00:16:45.970 --> 00:16:47.671
And then once I
have that in memory,

00:16:47.671 --> 00:16:49.170
then I just have
to go through these

00:16:49.170 --> 00:16:51.960
and filter them to find
the ones within this space.

00:16:51.960 --> 00:16:53.640
So it's a little
bit of a constraint.

00:16:53.640 --> 00:16:55.381
I can only filter
on the one field.

00:16:55.381 --> 00:16:57.380
But once I've done that,
I have a set in memory,

00:16:57.380 --> 00:17:00.050
and it's pretty fast for me
to just iterate through that

00:17:00.050 --> 00:17:01.680
and filter out what I need.

00:17:01.680 --> 00:17:03.750
And then I get my
collection of zombies,

00:17:03.750 --> 00:17:05.319
which I call the Zombies.

00:17:05.319 --> 00:17:08.270
And then I return the Zombies.

00:17:08.270 --> 00:17:11.680
At this point, I need
to pause for a second.

00:17:11.680 --> 00:17:14.609
I've been developing software
for a very, very long time.

00:17:14.609 --> 00:17:16.349
And it feels like
my entire career

00:17:16.349 --> 00:17:19.432
has built up to this moment
and this line of code.

00:17:19.432 --> 00:17:20.890
It is the best line
of code I think

00:17:20.890 --> 00:17:23.440
I've ever written in my life,
and it makes me really happy--

00:17:23.440 --> 00:17:25.390
just Return theZombies.

00:17:25.390 --> 00:17:26.326
[GRR]

00:17:26.326 --> 00:17:29.171
AUDIENCE: [LAUGHTER]

00:17:29.171 --> 00:17:31.670
LAURENCE MORONEY: So earlier,
I said traffic conditions were

00:17:31.670 --> 00:17:33.040
the other thing that we needed.

00:17:33.040 --> 00:17:36.530
We needed to consume this third
party for traffic conditions.

00:17:36.530 --> 00:17:39.270
And in the geo APIs,
we have this thing

00:17:39.270 --> 00:17:41.600
called the Distance Matrix.

00:17:41.600 --> 00:17:45.010
So all I have to do to get these
is I use the Distance Matrix

00:17:45.010 --> 00:17:45.682
API.

00:17:45.682 --> 00:17:48.880
I call the getDistanceMatrix
method on that,

00:17:48.880 --> 00:17:52.940
and I pass it a set of origins
and a set of destinations.

00:17:52.940 --> 00:17:54.970
In the case of my
app, it's very simple.

00:17:54.970 --> 00:17:57.210
I'm having one origin
and one destination.

00:17:57.210 --> 00:17:59.710
And then I can specify
different attributes of that,

00:17:59.710 --> 00:18:02.070
like my departure
time-- am I leaving now,

00:18:02.070 --> 00:18:03.880
am I leaving
tomorrow, those kind

00:18:03.880 --> 00:18:05.770
of things, my traffic model.

00:18:05.770 --> 00:18:07.850
Just for the sake of
a gratuitous demo,

00:18:07.850 --> 00:18:10.296
I decided to make it the
most pessimistic model here.

00:18:10.296 --> 00:18:12.420
But there are number ones,
like optimistic, normal,

00:18:12.420 --> 00:18:13.620
that type of thing.

00:18:13.620 --> 00:18:16.740
The mode-- am I driving,
am I walking, am I biking.

00:18:16.740 --> 00:18:18.950
And then I just await
that, await the result.

00:18:18.950 --> 00:18:20.440
So I get an
asynchronous callback.

00:18:20.440 --> 00:18:23.090
And then once I get
it back, because I

00:18:23.090 --> 00:18:25.590
know I've only done one
origin and one destination,

00:18:25.590 --> 00:18:27.730
I'm just going to take
out the first element.

00:18:27.730 --> 00:18:30.100
The first element of that is
the Distance Matrix element

00:18:30.100 --> 00:18:31.330
that I call Item.

00:18:31.330 --> 00:18:32.940
And now it's really
nice that I can

00:18:32.940 --> 00:18:34.750
start going through
the item, and I

00:18:34.750 --> 00:18:37.130
can start querying
properties on that item.

00:18:37.130 --> 00:18:40.120
So, for example, things
like the time in traffic.

00:18:40.120 --> 00:18:43.510
It's given to me by the API
in human readable form, which

00:18:43.510 --> 00:18:45.380
might be 15 minutes.

00:18:45.380 --> 00:18:47.930
And it's given to me in
machine readable form, which

00:18:47.930 --> 00:18:50.144
is a number, like in seconds.

00:18:50.144 --> 00:18:51.560
So this ends up
being really nice.

00:18:51.560 --> 00:18:55.080
So then in my business logic, I
can say, the normal time is x,

00:18:55.080 --> 00:18:56.640
the current time is y.

00:18:56.640 --> 00:18:59.670
But because it's numeric, I
can say, y is greater than x,

00:18:59.670 --> 00:19:02.580
then there might be
a zombie invasion.

00:19:02.580 --> 00:19:05.800
So here, going back to my
architecture, I've done this.

00:19:05.800 --> 00:19:06.950
I have my API.

00:19:06.950 --> 00:19:08.402
I've merged this all together.

00:19:08.402 --> 00:19:09.360
I've built the service.

00:19:09.360 --> 00:19:11.280
I've built the
simple logic into it.

00:19:11.280 --> 00:19:14.770
Almost this entire functionality
of giving people the ability

00:19:14.770 --> 00:19:17.700
to report a zombie sighting,
giving people the ability

00:19:17.700 --> 00:19:20.840
to navigate from A to
B, check the traffic

00:19:20.840 --> 00:19:23.080
conditions between
here and B, see

00:19:23.080 --> 00:19:26.220
if they are longer
than they should be,

00:19:26.220 --> 00:19:29.430
retrieve details of any
zombies between here and B,

00:19:29.430 --> 00:19:31.190
and map them all
out-- almost all

00:19:31.190 --> 00:19:33.030
that code for that
kind of application,

00:19:33.030 --> 00:19:34.840
I've just shown you.

00:19:34.840 --> 00:19:36.894
It's a very simple
application, I know,

00:19:36.894 --> 00:19:39.310
but when you're thinking about
the amount of functionality

00:19:39.310 --> 00:19:41.180
that's in there and
it's done with maybe

00:19:41.180 --> 00:19:44.090
30 or 40 lines of code, I
find that really fascinating.

00:19:48.037 --> 00:19:49.370
It's not just gratuitous slides.

00:19:49.370 --> 00:19:52.690
I actually want to show a demo
and show this thing in action.

00:19:52.690 --> 00:19:55.050
So let me switch
to the wolf vision.

00:19:55.050 --> 00:19:58.150
And here you can see the
app is actually running.

00:19:58.150 --> 00:20:00.620
So on my app, if
I, for example, tap

00:20:00.620 --> 00:20:03.020
to report a zombie,
what I've done--

00:20:03.020 --> 00:20:05.080
I've hacked this
a little bit, so I

00:20:05.080 --> 00:20:08.590
put in a pre-set destination,
and I have a preset source,

00:20:08.590 --> 00:20:10.600
and I'm picking a random
latitude and longitude

00:20:10.600 --> 00:20:11.805
between them to report it.

00:20:11.805 --> 00:20:13.180
In a real app,
you would actually

00:20:13.180 --> 00:20:15.180
be just choosing your own
latitude and longitude

00:20:15.180 --> 00:20:16.080
for where you're at.

00:20:16.080 --> 00:20:18.150
And if I put a note
in here, something

00:20:18.150 --> 00:20:21.870
like-- any hockey fans here?

00:20:21.870 --> 00:20:22.370
Yay.

00:20:22.370 --> 00:20:24.100
San Jose Sharks are
playing tonight.

00:20:24.100 --> 00:20:27.570
So I've set this up
for me to navigate down

00:20:27.570 --> 00:20:28.780
to the Sharks arena.

00:20:28.780 --> 00:20:30.820
But if there's any
zombies on the way,

00:20:30.820 --> 00:20:35.250
I'll say something
like, I am not sure

00:20:35.250 --> 00:20:42.844
if hockey fans-- whoops, thank
you AutoCorrect-- or zombies.

00:20:42.844 --> 00:20:46.850
So I'll put that note in
there, and I will save this.

00:20:46.850 --> 00:20:48.280
So I've now reported a zombie.

00:20:48.280 --> 00:20:50.071
I have a little
[INAUDIBLE] coming up there

00:20:50.071 --> 00:20:51.040
saying that it's done.

00:20:51.040 --> 00:20:53.390
So if I hit check traffic
now, my destination

00:20:53.390 --> 00:20:56.392
address-- this is the location
where the Sharks actually play.

00:20:56.392 --> 00:20:57.850
I'm going to hit
the Search button.

00:20:57.850 --> 00:21:00.894
And sometimes when I demo
this, it's really, really slow,

00:21:00.894 --> 00:21:02.560
and there's a very
good reason for that.

00:21:02.560 --> 00:21:04.010
This time it was really fast.

00:21:04.010 --> 00:21:06.740
The reason why it sometimes
is slow when I demo this

00:21:06.740 --> 00:21:08.140
is that I'm using App Engine.

00:21:08.140 --> 00:21:10.780
And remember I told you it
scales up and scales down

00:21:10.780 --> 00:21:12.180
to meet your capacity?

00:21:12.180 --> 00:21:15.576
Well, I'm the only person
using this app right now,

00:21:15.576 --> 00:21:17.700
so if I hadn't warmed this
up while we were waiting

00:21:17.700 --> 00:21:19.850
for the talk to begin,
they'll be no App Engine

00:21:19.850 --> 00:21:20.660
instances running.

00:21:20.660 --> 00:21:22.035
So I'm not being
charged anything

00:21:22.035 --> 00:21:23.326
because I'm not using anything.

00:21:23.326 --> 00:21:25.680
But the first time I do it,
it will spin up my first App

00:21:25.680 --> 00:21:26.280
Engine.

00:21:26.280 --> 00:21:28.370
And then I get charged
for that capacity.

00:21:28.370 --> 00:21:30.600
But because I'd warmed up
a little bit earlier on,

00:21:30.600 --> 00:21:33.164
that App Engine is up and
running so I'm good to go.

00:21:33.164 --> 00:21:35.830
Now we can see here-- I hope you
can see it on the screen, yep--

00:21:35.830 --> 00:21:37.400
that it hit a delay.

00:21:37.400 --> 00:21:41.320
It's normally 27 minutes from
here to the San Jose Sharks.

00:21:41.320 --> 00:21:42.780
It's now estimated 30 minutes.

00:21:42.780 --> 00:21:45.220
So shall I check if
there's a zombie invasion?

00:21:45.220 --> 00:21:46.340
I think I should.

00:21:46.340 --> 00:21:47.550
I'll say yes.

00:21:47.550 --> 00:21:48.980
And here we go,
and here's my map.

00:21:48.980 --> 00:21:50.792
And it's showing me,
you know, these are

00:21:50.792 --> 00:21:52.000
the zombies that were stored.

00:21:52.000 --> 00:21:54.980
And if I touch on them,
that's a really big one.

00:21:54.980 --> 00:21:56.309
Those ones are ghastly.

00:21:56.309 --> 00:21:58.100
And I think that's the
note I made earlier,

00:21:58.100 --> 00:22:00.730
I'm not sure if those are
hockey fans or zombies.

00:22:00.730 --> 00:22:05.340
So this was just
using the map APIs

00:22:05.340 --> 00:22:06.810
that are available for Android.

00:22:06.810 --> 00:22:09.510
I just put pins in for those
latitudes and longitudes.

00:22:09.510 --> 00:22:11.642
I used a custom
PMG for those pins,

00:22:11.642 --> 00:22:13.850
and I attribute them the
way that I had done earlier.

00:22:16.430 --> 00:22:18.920
OK, so that's our walking demo.

00:22:18.920 --> 00:22:21.570
And here is the application
itself and how it runs.

00:22:21.570 --> 00:22:22.314
So what's next?

00:22:22.314 --> 00:22:23.980
How would you build
something like this?

00:22:23.980 --> 00:22:25.800
Now, hopefully we don't
need to go out and build

00:22:25.800 --> 00:22:26.610
zombie detectors.

00:22:26.610 --> 00:22:27.699
Thankfully, we don't.

00:22:27.699 --> 00:22:29.240
But if you do want
to build something

00:22:29.240 --> 00:22:31.281
like this, if you do want
to build something that

00:22:31.281 --> 00:22:34.370
uses intelligence-- for example,
about geo data, the way that I

00:22:34.370 --> 00:22:37.920
was able to use intelligence
about road services

00:22:37.920 --> 00:22:40.130
and how long it's going
to take in traffic

00:22:40.130 --> 00:22:43.410
and that kind of thing-- go take
a look at the Google Maps web

00:22:43.410 --> 00:22:43.970
services.

00:22:43.970 --> 00:22:45.880
They're at this URL.

00:22:45.880 --> 00:22:48.370
Cloud Endpoints, which
I used-- in this case--

00:22:48.370 --> 00:22:49.310
in Android Studio.

00:22:49.310 --> 00:22:52.060
I literally said File, New
Module, Cloud Endpoint.

00:22:52.060 --> 00:22:53.340
It gave me a wizard.

00:22:53.340 --> 00:22:55.440
And what that does is
that creates an App Engine

00:22:55.440 --> 00:22:59.440
instance for you with a
basic API and a basic beam

00:22:59.440 --> 00:23:02.270
that you can use to transmit
over and back from that API.

00:23:02.270 --> 00:23:04.870
The Cloud Endpoints and Android
Studio, there's a link there.

00:23:04.870 --> 00:23:07.440
There's always good stuff on
YouTube.com/GoogleDevelopers

00:23:07.440 --> 00:23:08.960
as well.

00:23:08.960 --> 00:23:11.320
So yes, and, of course, the
reason why Elena couldn't

00:23:11.320 --> 00:23:12.819
be here is she
forgot to use the app

00:23:12.819 --> 00:23:15.180
and she got eaten by a zombie.

00:23:15.180 --> 00:23:18.360
So just thanks
very much for this.

