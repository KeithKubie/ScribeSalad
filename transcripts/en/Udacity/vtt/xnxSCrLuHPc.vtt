WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Okay, so what I'd like to do now

00:00:02.000 --> 00:00:05.000
is I'm going to go into Python, and we're going to play with

00:00:05.000 --> 00:00:08.000
a Python library for actually making an HTTP request

00:00:08.000 --> 00:00:10.000
so you can see how that works,

00:00:10.000 --> 00:00:12.000
and then prepare for some quizzes.

00:00:12.000 --> 00:00:15.000
So in Python we have a library called urllib2.

00:00:15.000 --> 00:00:18.000
There's also a urllib1,

00:00:18.000 --> 00:00:21.000
and this is kind of the evolution of Python in front of your here.

00:00:21.000 --> 00:00:23.000
We're going to use 2, for the most part.

00:00:23.000 --> 00:00:26.000
urllib1 has a few handy functions of its own,

00:00:26.000 --> 00:00:29.000
and when we use those, I'll include those in documents.

00:00:29.000 --> 00:00:33.000
But anyway, urllib2 has a function in it called url open,

00:00:33.000 --> 00:00:36.000
and we can give a url here to download.

00:00:36.000 --> 00:00:38.000
So let's say I'm downloading google.com.

00:00:38.000 --> 00:00:40.000
Actually, I need to make sure I save this.

00:00:40.000 --> 00:00:43.000
I usually save it in a variable called P for page.

00:00:43.000 --> 00:00:45.000
Probably not even the right concept, but that's my habit.

00:00:45.000 --> 00:00:47.000
I always use P when I use url open.

00:00:47.000 --> 00:00:50.000
So if you run this, we're going to get this P object,

00:00:50.000 --> 00:00:52.000
which is actually, basically, a file object.

00:00:52.000 --> 00:00:55.000
In Python, file objects--

00:00:55.000 --> 00:00:59.000
basically, what a file object is, is an object that has a read method.

00:00:59.000 --> 00:01:01.000
And you can call a read on there to get the contents.

00:01:01.000 --> 00:01:04.000
So I'm going to show the contents in C and call read on P.

00:01:04.000 --> 00:01:07.000
Okay, we called url open on this url,

00:01:07.000 --> 00:01:10.000
storing it in this variable P,

00:01:10.000 --> 00:01:13.000
and then we called read on the response

00:01:13.000 --> 00:01:15.000
and stored it in a variable called C.

00:01:15.000 --> 00:01:17.000
Now, if we were to evaluate C, a wall of text,

00:01:17.000 --> 00:01:19.000
which is what we expect.

00:01:19.000 --> 00:01:21.000
So this is actually Google's front page.

00:01:21.000 --> 00:01:24.000
If you remember early in this class,

00:01:24.000 --> 00:01:27.000
we basically accomplished the same thing

00:01:27.000 --> 00:01:30.000
using telnet or curl.

00:01:30.000 --> 00:01:32.000
You can also do the same thing in Python.

00:01:32.000 --> 00:01:34.000
So now we have this variable C that has this whole response in it,

00:01:34.000 --> 00:01:36.000
and we can manipulate it in our programs,

00:01:36.000 --> 00:01:39.000
which is what we're going to be doing a lot of.

00:01:39.000 --> 00:01:42.000
Let's take a peek at what we have on that P object.

00:01:42.000 --> 00:01:44.000
We can use the dir built-in function in Python

00:01:44.000 --> 00:01:46.000
to examine an object.

00:01:46.000 --> 00:01:49.000
So now we can see the methods and attributes on our P object,

00:01:49.000 --> 00:01:51.000
and we can see a couple of them that are probably interesting to us--

00:01:51.000 --> 00:01:54.000
headers, for one, and get url is another.

00:01:54.000 --> 00:01:56.000
Get code is probably the status code.

00:01:56.000 --> 00:01:58.000
This is generally how I work.

00:01:58.000 --> 00:02:00.000
When you don't know a library super well,

00:02:00.000 --> 00:02:02.000
you can use dir to kind of examine the object.

00:02:02.000 --> 00:02:05.000
So let's take a peek at a couple of these.

00:02:05.000 --> 00:02:07.000
We've also got a url one. Let's see what's in there.

00:02:07.000 --> 00:02:10.000
That's the url we requested. No big surprise.

00:02:10.000 --> 00:02:12.000
We can look at the headers.

00:02:12.000 --> 00:02:14.000
So this is an HTTP message instance.

00:02:14.000 --> 00:02:16.000
Now, I happen to know that this is a dictionary,

00:02:16.000 --> 00:02:19.000
and dictionaries have a function on them

00:02:19.000 --> 00:02:21.000
called items.

00:02:21.000 --> 00:02:24.000
If we were to run items on this in Python,

00:02:24.000 --> 00:02:26.000
this is what you can call in any dictionary--items--

00:02:26.000 --> 00:02:29.000
to view the keys and the values,

00:02:29.000 --> 00:02:31.000
and it will actually print them, generally, nicely for you.

00:02:31.000 --> 00:02:33.000
We can see all of the headers we got back from Google.

00:02:33.000 --> 00:02:36.000
This is an actual dictionary, so we can say p.headers,

00:02:36.000 --> 00:02:39.000
for example, content type,

00:02:39.000 --> 00:02:41.000
and we can see the content type that we got back from Google.

00:02:41.000 --> 00:02:44.000
It's actually kind of interesting; we're getting an ISO charset,

00:02:44.000 --> 00:02:47.000
which is--I was expecting UTF 8,

00:02:47.000 --> 00:02:49.000
but, hey, you learn things every day.

00:02:49.000 --> 00:02:52.000
So in the future, especially for your Windows users

00:02:52.000 --> 00:02:54.000
who had trouble using telnet,

00:02:54.000 --> 00:02:57.000
you can just use urllib and get the same answer.

00:02:57.000 --> 00:03:00.000
What I'd like you to do now is play with this library a little bit

00:03:00.000 --> 00:03:04.200
in the form of a quiz.

