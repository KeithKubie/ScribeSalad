WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.900
MANO MARKS: Hi everyone.

00:00:07.900 --> 00:00:10.538
Thanks for coming
to our session.

00:00:10.538 --> 00:00:11.818
My name is Mano Marks.

00:00:11.818 --> 00:00:16.698
I'm a developer advocate at
Google and we have Chad

00:00:16.698 --> 00:00:19.040
Killingsworth here from
Missouri State University.

00:00:19.040 --> 00:00:24.078
We're gonna be presenting
on map once map anywhere.

00:00:24.078 --> 00:00:30.478
I'm gonna be talking to you
today about how to create cross

00:00:30.478 --> 00:00:34.280
functional, cross platform
maps using the Google

00:00:34.280 --> 00:00:35.580
Maps API version 3.

00:00:35.580 --> 00:00:39.298
Now some of it's going to be a
broad overview of different

00:00:39.298 --> 00:00:42.900
options and then I'm gonna
drill into some specific code

00:00:42.900 --> 00:00:46.720
and I'll talk to you a little
bit more about the specifics of

00:00:46.720 --> 00:00:48.040
what I'm going to go
into in a minute.

00:00:48.100 --> 00:00:51.798
I just wanted to give you that
notion so that if you're

00:00:51.798 --> 00:00:55.100
session shopping right now you
have the option of moving

00:00:55.100 --> 00:00:58.960
on to something else.

00:00:59.260 --> 00:01:02.680
Map once, map anywhere,
developing geospacial

00:01:02.680 --> 00:01:04.840
applications for both
desktop and mobile.

00:01:04.840 --> 00:01:07.920
I will commit, at this point,
to that being the last time I

00:01:07.920 --> 00:01:11.318
actually read directly
off the slide.

00:01:11.740 --> 00:01:16.760
What do we mean by write
once, run everywhere?

00:01:16.760 --> 00:01:22.720
This is an obvious take off on
one of these slogans that often

00:01:22.720 --> 00:01:27.680
goes around the web or around
computer science where you talk

00:01:27.680 --> 00:01:31.480
about applications that will
run on any type of platform.

00:01:32.700 --> 00:01:35.738
The farthest back that I can
remember it was Java; I'm sure

00:01:35.738 --> 00:01:37.000
it goes back before that.

00:01:37.000 --> 00:01:39.958
The idea then was that you
could write an application that

00:01:39.958 --> 00:01:46.760
would run on MACS or PC's or
anything using the

00:01:46.760 --> 00:01:48.458
JAVA run time.

00:01:48.040 --> 00:01:51.260
In this case what I'm going to
be talking about specifically

00:01:51.260 --> 00:01:54.260
is different kinds of devices
back that can implement the

00:01:54.260 --> 00:01:57.500
Google Maps API verison 3.

00:01:58.020 --> 00:02:01.158
Particularly looking at desktop
and laptop implementations

00:02:01.158 --> 00:02:07.378
verses mobile implementations
and getting a sense of the

00:02:07.378 --> 00:02:10.998
different classes of devices
that we're talking about.

00:02:10.998 --> 00:02:15.858
The question is why are
we talking about this?

00:02:15.858 --> 00:02:18.400
For most people who live in the
United States, this is your

00:02:18.400 --> 00:02:23.160
primary method of accessing the
web, a laptop or a

00:02:23.160 --> 00:02:25.438
desktop computer.

00:02:25.438 --> 00:02:30.740
For most people who live
outside, one of these devices

00:02:30.740 --> 00:02:33.738
is the primary method
of accessing the web.

00:02:34.058 --> 00:02:38.138
Google looked at this problem
a little over a year ago and

00:02:38.138 --> 00:02:45.658
decided, for the foreseeable
future, mobile would be hot

00:02:45.658 --> 00:02:47.580
and desktop would be hot.

00:02:47.580 --> 00:02:51.238
These are two platforms that we
needed to support and so we

00:02:51.238 --> 00:02:55.218
came up with, for the Goggle
Maps API, we came up with one

00:02:55.218 --> 00:03:02.238
API that would work well on
both of these platforms.

00:03:03.918 --> 00:03:06.580
In doing so we wanted to save
you development time; we wanted

00:03:06.580 --> 00:03:11.800
you to be able to create one
map that would work in multiple

00:03:11.800 --> 00:03:15.558
places and you wouldn't
have to recreate that map.

00:03:15.558 --> 00:03:17.998
We also wanted to give
you faster development

00:03:17.998 --> 00:03:18.160
turnaround time.

00:03:18.520 --> 00:03:21.140
We were looking around at our
Google Maps API, which is on

00:03:21.140 --> 00:03:25.418
Android, and the Google Maps
API, which is on the iPhone,

00:03:25.418 --> 00:03:30.400
which is an Apple API and we
were thinking about that and

00:03:30.400 --> 00:03:34.198
thinking about the fact that if
you need to fix a bug or you

00:03:34.198 --> 00:03:36.638
need to release a new map,
you'd have to release

00:03:36.638 --> 00:03:37.918
a new application.

00:03:37.918 --> 00:03:40.058
We wanted to save
that pain for you.

00:03:40.058 --> 00:03:43.918
We wanted to give you the
most featured API, the

00:03:43.918 --> 00:03:47.918
most featured mapping API
that we could provide.

00:03:48.198 --> 00:03:50.018
One map to rule
them all, kind of.

00:03:56.458 --> 00:04:03.680
We're doing this on all the geo
talks, at least today, just to

00:04:03.680 --> 00:04:07.440
give you a little sense of
which API's we're

00:04:07.440 --> 00:04:08.078
talking about.

00:04:08.078 --> 00:04:11.398
I'm gonna look over to
this monitor to my left.

00:04:11.818 --> 00:04:15.538
We're looking primarily at the
JavaScript API version 3.

00:04:15.538 --> 00:04:18.918
I'm also going to talk about
the Static Maps API and some of

00:04:18.918 --> 00:04:22.878
these web services that are
available within there.

00:04:22.878 --> 00:04:27.040
I'm going to look a little bit
at AJAX Search API as well and

00:04:27.040 --> 00:04:32.478
many of these things are
related to the entire topic.

00:04:35.838 --> 00:04:39.260
This is a general overview, so
as I said, I'm going to do

00:04:39.260 --> 00:04:42.158
this overview of the geo
API's, which I just did.

00:04:42.158 --> 00:04:44.258
I'm gonna talk about the
different options for mobile

00:04:44.258 --> 00:04:47.060
development and then I'm gonna
talk about different user

00:04:47.060 --> 00:04:51.078
interface considerations that
you might need to think about

00:04:51.078 --> 00:04:55.398
for mobile devices compared
to laptops or desktops.

00:04:55.398 --> 00:04:58.898
I'm going to talk about geo
location, particularly looking

00:04:58.898 --> 00:05:03.920
at HTML five geo location but
looking at some of the options

00:05:03.920 --> 00:05:09.440
that are available in HTML
five that Google provides.

00:05:09.860 --> 00:05:12.980
Chad is going to talk about his
experience developing a real

00:05:12.980 --> 00:05:20.098
world mobile application using
the Google Maps API version 3.

00:05:20.098 --> 00:05:24.138
So just a quick note,
there's a wave up.

00:05:24.138 --> 00:05:27.898
There are live notes being
taken; there's somebody out

00:05:27.898 --> 00:05:32.138
there in the audience taking
notes on my session.

00:05:32.138 --> 00:05:34.120
I don't know you who you are.

00:05:34.120 --> 00:05:36.520
If you have any questions feel
free to post them in there.

00:05:36.520 --> 00:05:40.898
At the end of the session we'll
pull that up on the screen and

00:05:40.898 --> 00:05:45.560
also you can ask questions
using the microphones.

00:05:45.560 --> 00:05:48.100
Now if you want, I'm gonna
actually put, on most of the

00:05:48.100 --> 00:05:54.898
slides, at the bottom, you'll
see the url there, so that'll

00:05:54.898 --> 00:05:57.800
be on most of the slides so
that you don't have to quickly

00:05:57.800 --> 00:05:59.760
log into Wave right now.

00:05:59.760 --> 00:06:08.678
But if a question comes up
that'll be available to you.

00:06:08.678 --> 00:06:13.498
So I wanted to give you an
overview of some options for

00:06:13.498 --> 00:06:17.558
doing Google Maps on a mobile
device and I talked to you

00:06:17.558 --> 00:06:20.300
specifically about Maps on
mobile because I think

00:06:20.300 --> 00:06:22.278
the other ones are
fairly well known.

00:06:22.738 --> 00:06:26.338
Some of this may be familiar
to some of you from

00:06:26.338 --> 00:06:26.778
previous presentations.

00:06:26.778 --> 00:06:31.420
I'm not going to spend too much
time on any one of these

00:06:31.420 --> 00:06:34.738
options but I just wanted
to go through them.

00:06:34.738 --> 00:06:39.058
The one that we like the best,
because as you will hear over

00:06:39.058 --> 00:06:42.860
and over again from Google, is
Google's betting on the Web.

00:06:42.860 --> 00:06:44.818
We believe in the Web.

00:06:44.818 --> 00:06:48.258
We believe in browsers
on mobile devices.

00:06:48.258 --> 00:06:51.618
In mobile devices particularly;
in Android and iPhone devices

00:06:51.618 --> 00:06:55.340
and we hope to expand this to a
larger class of mobile devices

00:06:55.340 --> 00:07:01.998
that will start using Web Kit,
particularly, or any full

00:07:01.998 --> 00:07:03.998
JavaScript support.

00:07:04.118 --> 00:07:09.898
We support using directly in a
browser based application,

00:07:09.898 --> 00:07:13.758
having people navigate directly
to a particular page.

00:07:13.758 --> 00:07:20.418
We recognize that's not the
only option that's out there

00:07:20.418 --> 00:07:22.558
and that there might be some
other considerations and I'll

00:07:22.558 --> 00:07:25.720
talk about some of the other
reasons for using other things.

00:07:25.000 --> 00:07:31.800
There's also the iPhone native
API so within the iPhone SDK

00:07:31.800 --> 00:07:36.360
there's map kit There's the
Android native map view

00:07:36.360 --> 00:07:37.838
and related APIs.

00:07:41.958 --> 00:07:47.898
There's also an option to do
a hybrid native application

00:07:47.898 --> 00:07:50.078
which embeds a browser in it.

00:07:50.078 --> 00:07:54.240
So it takes advantage of both
the best and worst of both

00:07:54.240 --> 00:07:58.260
worlds which is you write
applications for individual

00:07:58.260 --> 00:08:00.980
platforms but you embed a
browser within it and load the

00:08:00.980 --> 00:08:04.338
Google Maps API version 3.

00:08:04.240 --> 00:08:08.420
Finally, there's the Static
Maps API which is essentially

00:08:08.420 --> 00:08:12.558
an image server.

00:08:13.758 --> 00:08:16.058
First I want to
do a comparison.

00:08:16.058 --> 00:08:20.998
You can see here the major
features of the different

00:08:20.998 --> 00:08:24.398
Goggle Maps API's on the
different platforms.

00:08:25.678 --> 00:08:28.878
The first column is, of course,
the Maps API version 3.

00:08:28.878 --> 00:08:32.398
We've made a lot of strides in
the last year to get a lot of

00:08:32.398 --> 00:08:35.938
extra features and of course,
we'll continue to

00:08:35.938 --> 00:08:36.620
iterate on those.

00:08:36.820 --> 00:08:45.300
Then you can see the iPhone and
Android columns as well which

00:08:45.300 --> 00:08:48.880
do provide you with some
additional features.

00:08:51.380 --> 00:08:53.700
Everybody has the basic
functionality of

00:08:53.700 --> 00:08:55.840
giving you a map.

00:08:55.840 --> 00:08:58.160
Everybody has a basic
functionality to give you some

00:08:58.160 --> 00:09:01.420
makers to put on that map.

00:09:01.420 --> 00:09:05.658
All but the Google Maps
on the iPhone give you

00:09:05.658 --> 00:09:09.740
direct geo coding access.

00:09:10.180 --> 00:09:15.140
The iPhone gives you reverse
geo coding which all but

00:09:15.140 --> 00:09:16.520
Static Maps API gives you.

00:09:17.380 --> 00:09:23.640
You have to look and see which
API supports which thing.

00:09:24.460 --> 00:09:27.820
I have a little asterisk there
by the polygons and polylines.

00:09:27.998 --> 00:09:36.280
Because both Android and
iPhone, prior to version 4.0,

00:09:36.280 --> 00:09:42.538
provide a way to do overlays
but not ones that specifically

00:09:42.538 --> 00:09:44.200
make it easy to make
polygons and polylines.

00:09:45.260 --> 00:09:47.440
That's why there's
that asterisk there.

00:09:48.240 --> 00:09:53.980
I do note that in the iPhone in
the 4.0 SDK, which was recently

00:09:53.980 --> 00:09:58.640
released, that you can create
polylines and polygons.

00:09:59.440 --> 00:10:03.680
There's quite a few services
that are available within the

00:10:03.680 --> 00:10:09.720
maps API version 3 that are not
available in the rest of them.

00:10:09.720 --> 00:10:10.480
And of course there's
street view.

00:10:12.100 --> 00:10:16.118
Those of you who have been to
some of the earlier talks today

00:10:16.118 --> 00:10:21.960
in Daniel Lee's talk ealier.

00:10:21.960 --> 00:10:29.180
He talked about our new release
of street view which is

00:10:29.180 --> 00:10:37.640
available now in the
mass API version 3.

00:10:37.640 --> 00:10:44.440
There are also native APIs
in the iPhone and Android's

00:10:44.440 --> 00:10:45.880
platforms as well.

00:10:45.880 --> 00:10:52.120
There is no street view
in the Static Maps API.

00:10:52.120 --> 00:10:55.920
Just to be clear, when you
think about street view you

00:10:55.920 --> 00:10:59.460
probably think about flash
because in version 2, the

00:10:59.460 --> 00:11:04.460
street view allowed you
to embed a flash player.

00:11:04.460 --> 00:11:12.260
But now with the new street
view API, we support HTML 5

00:11:12.260 --> 00:11:17.300
canvas 2 D, which is one of our
preferred rendering platforms,

00:11:17.300 --> 00:11:18.520
if the browser supports it.

00:11:18.520 --> 00:11:21.258
We basically detect what
the browser will support

00:11:21.258 --> 00:11:22.900
and then render there.

00:11:22.900 --> 00:11:28.240
We support HTML 4 which is
what is generally used

00:11:28.240 --> 00:11:30.400
in mobile browsers.

00:11:30.400 --> 00:11:35.680
And then finally, and this
hasn't actually been mentioned

00:11:35.680 --> 00:11:39.160
I believe yet today,
we support WebGL.

00:11:39.580 --> 00:11:44.680
WebGL is, I believe in all
the latest builds of all

00:11:44.680 --> 00:11:46.520
the modern browsers.

00:11:46.300 --> 00:11:50.100
It's defintely a chromium
which I have running here.

00:11:50.820 --> 00:11:57.180
WebGL is basically an
infrastructure taking advantage

00:11:57.180 --> 00:12:00.980
of a much higher performance
graphics libraries

00:12:00.980 --> 00:12:02.560
that are available.

00:12:02.560 --> 00:12:06.200
As I said most of the modern
browsers and is available

00:12:06.200 --> 00:12:10.100
on all modern machines.

00:12:10.760 --> 00:12:12.620
That's very exciting.

00:12:12.620 --> 00:12:18.860
And I will say just to
reiterate this point, the

00:12:18.860 --> 00:12:24.440
Google Maps API version 3 which
supports WebGL, HTML five, HTML

00:12:24.440 --> 00:12:29.760
4, doesn't require you to make
any decisions about

00:12:29.760 --> 00:12:31.460
what to support.

00:12:31.460 --> 00:12:34.360
We will figure all of
that out for you.

00:12:34.360 --> 00:12:38.138
We'll detect what the browser
is doing, what it's capable

00:12:38.138 --> 00:12:40.008
of, and then display
the appropriate Street

00:12:40.008 --> 00:12:43.480
View at that point.

00:12:44.020 --> 00:12:55.180
Let me do a quick demo of this.

00:13:02.160 --> 00:13:05.460
This is a demo that I'm going
to come back to when I talk

00:13:05.460 --> 00:13:08.038
about geo location that
actually shows you some of the

00:13:08.038 --> 00:13:11.080
perils of geo location.

00:13:11.240 --> 00:13:15.420
The idea here is that they auto
detected my location which you

00:13:15.420 --> 00:13:20.720
can probably tell is not
actually where I am.

00:13:20.720 --> 00:13:23.080
I'll talk to you a bit more
about that when I talk to

00:13:23.080 --> 00:13:25.440
you about geo location.

00:13:25.440 --> 00:13:28.240
Chad can probably tell you of
any travails he has with that.

00:13:28.240 --> 00:13:31.480
I just wanted to show you
street view and what

00:13:31.480 --> 00:13:34.320
it looks like here.

00:13:34.320 --> 00:13:37.220
And I'm gonna just
drop this in here.

00:13:39.560 --> 00:13:44.740
This is street view in Web geo.

00:13:44.740 --> 00:13:47.460
You can see it's very highly
performanced and we actually

00:13:47.460 --> 00:13:52.780
have one of the engineers in
the audience, Mark, here who

00:13:52.780 --> 00:13:56.100
created this implementation and
can tell you a lot more about

00:13:56.100 --> 00:14:04.060
it and I believe will in one
of his later presentations.

00:14:04.060 --> 00:14:09.960
So anyway, that's very exciting
but it's a lot more exciting to

00:14:09.960 --> 00:14:12.140
think about it in terms of what
does it look like on

00:14:12.140 --> 00:14:13.340
a mobile device?

00:14:14.280 --> 00:14:16.880
I'm about to show you something
that we haven't talked to

00:14:16.880 --> 00:14:24.280
you a lot about in previous
talks on mobile devices.

00:14:25.640 --> 00:14:32.740
I'm gonna show you what this
looks like on the iPad.

00:14:32.740 --> 00:14:43.460
Let's see if the iPad does
a little bit better job of

00:14:43.460 --> 00:14:44.960
picking up the location.
221
00:14:44,96 --&gt; 00:14:44,758
It does.

00:14:45.340 --> 00:14:49.980
You'll see here it actually
manages to find us in San

00:14:49.980 --> 00:14:53.380
Francisco, which is great.

00:14:53.940 --> 00:14:59.120
Here I am going to drill down a
little bit into San Francisco

00:14:59.120 --> 00:15:02.300
right around where we're
located and show you

00:15:02.300 --> 00:15:04.560
what this looks like.

00:15:05.700 --> 00:15:08.480
We'll see if up here in the
upper left corner the street

00:15:08.480 --> 00:15:13.720
view control is there.

00:15:14.180 --> 00:15:17.080
I'm gonna drop it in.

00:15:17.600 --> 00:15:18.300
It's going to take a moment.

00:15:18.300 --> 00:15:22.720
I think you are probably all
aware of the Wi-Fi network

00:15:22.720 --> 00:15:26.600
having been under considerable
amount of stress today.

00:15:27.480 --> 00:15:31.098
This is street view in a
browser on a mobile device.

00:15:32.780 --> 00:15:34.618
This is on the iPad.

00:15:34.178 --> 00:15:38.260
I'm very excited to be able
to show this to you today.

00:15:38.560 --> 00:15:46.038
I actually meant to do
something today which was to

00:15:46.038 --> 00:15:50.940
pre-cache the imagery for
this location and I didn't.

00:15:50.040 --> 00:15:54.080
I don't know if you saw
how fast that came up.

00:15:54.600 --> 00:15:57.580
Oh, I managed to turn
the whole iPad.

00:15:57.580 --> 00:16:01.618
That's one of the things you
have to prepare when you're
241
00:16:01,618 --&gt; 00:16:01,2
doing these presentations.

00:16:02.678 --> 00:16:09.140
So you can see here, it's
moving a little bit more slowly

00:16:09.140 --> 00:16:12.920
than it would on the Web
because this is doing HTML

00:16:12.920 --> 00:16:17.780
floor street view instead of
Web GL which is, I believe

00:16:17.780 --> 00:16:22.120
our most performant version.

00:16:22.120 --> 00:16:25.700
And I can show you a similar
thing on the Android device but

00:16:25.700 --> 00:16:33.680
I think I'm moving a little bit
behind where I wanted to be.

00:16:35.940 --> 00:16:44.540
It's actually very easy to set
up the code to add the street

00:16:44.540 --> 00:16:45.120
view control your map.

00:16:45.120 --> 00:16:48.220
It's actually just this
first line here, this

00:16:48.220 --> 00:16:51.240
first couple of lines.

00:16:51.240 --> 00:16:53.220
Now I'm over to the right.

00:16:53.220 --> 00:16:59.200
You see map dot set option and
Street View control true.

00:16:59.200 --> 00:17:01.800
Or you can do it when
you create the map,

00:17:01.800 --> 00:17:04.820
you add that in.

00:17:04.820 --> 00:17:07.440
That's it, that adds
Street View to your map.

00:17:07.440 --> 00:17:11.338
If you want, you can do quite a
bit more and I don't have time

00:17:11.338 --> 00:17:15.138
to get into the full details
of what the capabilities are.

00:17:15.138 --> 00:17:17.500
You can also create in
separate panorama.

00:17:17.500 --> 00:17:22.098
So you see here I create
a separate panorama and

00:17:22.098 --> 00:17:27.480
then set it's position.

00:17:27.480 --> 00:17:35.820
And then of course if I
wanna actually do it

00:17:35.820 --> 00:17:38.332
entirely without a

00:17:38.332 --> 00:17:38.580
map.

00:17:38.580 --> 00:17:45.620
That's what the
code looks like.

00:17:51.098 --> 00:17:54.880
I wanted to talk to you about
some of the different options

00:17:54.880 --> 00:18:02.020
-- as I mentioned earlier --
for coding with Google Maps

00:18:02.020 --> 00:18:04.000
API on a mobile device.

00:18:04.000 --> 00:18:09.120
So the first one here is
browser based maps and the

00:18:09.120 --> 00:18:11.300
advantage here is that a
browser gives you full

00:18:11.300 --> 00:18:12.520
JavaScript support.

00:18:13.358 --> 00:18:15.940
It lets you access some of the
features that are on the phone

00:18:15.940 --> 00:18:19.400
particularly around geo
location and sometimes on

00:18:19.400 --> 00:18:22.980
phones you'll actually get
access to local storage

00:18:22.980 --> 00:18:25.700
and that sort of thing.

00:18:25.700 --> 00:18:27.320
You can write your map once.

00:18:27.320 --> 00:18:33.060
So this is the end
point of the talk.

00:18:33.060 --> 00:18:36.940
You can probably go home now
and you'll have learned the

00:18:36.940 --> 00:18:42.860
major point here which is
using the JavaScript browser

00:18:42.860 --> 00:18:47.580
based map, that's what we
consider the best answer.

00:18:47.580 --> 00:18:49.160
It allows for rapid
development.

00:18:49.160 --> 00:18:54.320
You create the web page on your
server and then it gets loaded.

00:18:56.260 --> 00:18:59.380
There's no changes that need to
happen to the application that

00:18:59.380 --> 00:19:02.540
loads it because it's entirely
happening within a browser.

00:19:02.540 --> 00:19:05.460
The next time somebody visits
the site, they get the most

00:19:05.460 --> 00:19:09.600
recent version of your page.

00:19:11.840 --> 00:19:15.838
You don't have to submit your
applications to the out the

00:19:15.838 --> 00:19:19.718
App store and get it approved
or the Android Marketplace.

00:19:19.718 --> 00:19:21.720
You don't have to get any
sort of approvals there.

00:19:21.720 --> 00:19:25.240
You don't have to make your
users download the application.

00:19:25.240 --> 00:19:28.480
On the other hand, one of the
disadvantages is, you don't get

00:19:28.480 --> 00:19:33.160
to the discoverability that you
would otherwise have within the

00:19:33.160 --> 00:19:38.240
App store or the Marketplace.

00:19:38.460 --> 00:19:43.360
So on the flip side you have
the native API's -- sorry --.

00:19:43.360 --> 00:19:47.578
So you've got Map Kit and Map
View on the iPhone and Andorid.

00:19:48.640 --> 00:19:54.100
These are closely, tightly
integrated with the individual

00:19:54.100 --> 00:19:57.380
phones and if you're only
developing for an individual

00:19:57.380 --> 00:20:00.000
device, if you're only writing
an iPhone application or only

00:20:00.000 --> 00:20:03.660
writing an Android application,
it's a pretty decent choice.

00:20:03.660 --> 00:20:05.818
You don't get as many of the
features as you do in the

00:20:05.818 --> 00:20:09.858
JavaScript API but if you just
want code in Objective C, if

00:20:09.858 --> 00:20:15.078
you just wanna code in Java,
that's one of your options.

00:20:15.078 --> 00:20:17.018
You have a little bit better
performance as well.

00:20:19.558 --> 00:20:21.618
Because it's more tightly
integrated with the operating

00:20:21.618 --> 00:20:24.040
system and not running in
a browser, there are some

00:20:24.040 --> 00:20:26.400
better performance points.

00:20:26.020 --> 00:20:28.200
On the flip side, the
developments a little bit

00:20:28.200 --> 00:20:30.040
harder and you can't
repurpose code that

00:20:30.040 --> 00:20:35.680
you did in JavaScript.

00:20:35.680 --> 00:20:41.000
You can't repurpose that
for another platform.

00:20:41.000 --> 00:20:44.800
So as I mentioned you can
embed a browser within

00:20:44.800 --> 00:20:46.600
your applications.

00:20:46.440 --> 00:20:48.940
That would be with web
view on Android or UI

00:20:48.940 --> 00:20:51.080
web view on the iPhone.

00:20:51.080 --> 00:20:54.440
That gives you access to
additional features to the

00:20:54.440 --> 00:20:57.880
phone that might not be
available through the browser

00:20:57.880 --> 00:21:00.160
that you can then push into
the browser through some

00:21:00.160 --> 00:21:01.578
JavaScript interface.

00:21:01.578 --> 00:21:04.520
It allows you to keep doing the
rapid development of the map

00:21:04.520 --> 00:21:08.598
piece of it but also to take
advantage of some of the

00:21:08.598 --> 00:21:12.780
advantages of iPhone and
Android development.

00:21:12.780 --> 00:21:16.358
On the flip side of that you
still have to go through your

00:21:16.358 --> 00:21:22.098
App store departments and you
also have to then develop for

00:21:22.098 --> 00:21:24.858
each individual platform.

00:21:24.858 --> 00:21:29.640
Of course a strategy could
involve both doing hybrid

00:21:29.640 --> 00:21:32.580
applications and having a plain
web site that people could

00:21:32.580 --> 00:21:35.700
discover in other ways as well.

00:21:36.640 --> 00:21:37.740
Finally I want to mention
the Static Maps API.

00:21:45.200 --> 00:21:50.060
The Static Maps which is
basically an image server.

00:21:50.060 --> 00:21:54.960
It'll send out to any
browser, an image of a map.

00:21:55.900 --> 00:21:58.160
It's actually now quite
customizable and very

00:21:58.160 --> 00:21:59.078
highly performant.

00:22:01.400 --> 00:22:04.580
The image of the map sends it
out and you just put it in the

00:22:04.580 --> 00:22:06.960
image tag in your
web application.

00:22:09.140 --> 00:22:13.460
You don't need to support
JavaScript in the browser

00:22:13.460 --> 00:22:13.800
on the platform.

00:22:13.800 --> 00:22:19.020
So it can be used on a much
wider variety of platforms but

00:22:19.020 --> 00:22:25.478
you don't get any of the modern
features of a modern Maps API.

00:22:25.478 --> 00:22:29.120
So no map slippiness,
it's just an image.

00:22:32.380 --> 00:22:34.160
And any of the other
features, you don't get

00:22:34.160 --> 00:22:35.260
any dynamism in that.

00:22:41.160 --> 00:22:45.520
I'm a little concerned about my
time so I just want to talk to

00:22:45.520 --> 00:22:49.280
you about some of the different
user interface considerations

00:22:49.280 --> 00:22:51.140
that you might run into.

00:22:53.420 --> 00:22:57.760
Actually before I do that, I
want to talk to you about just

00:22:57.760 --> 00:23:00.740
some of the different platforms
that you might run into.

00:23:00.740 --> 00:23:04.720
Think about this, screen
size is a pretty big deal.

00:23:04.720 --> 00:23:07.100
So when you're talking about
a desktop or laptop, screen

00:23:07.100 --> 00:23:11.160
size is not as much of a big
deal for a webpage right?

00:23:11.160 --> 00:23:15.740
If your map is twenty five
inches across versus fifteen

00:23:15.740 --> 00:23:19.280
inches across, it's
still a pretty big map.

00:23:19.280 --> 00:23:21.080
You've still got a lot
of details on there.

00:23:21.080 --> 00:23:29.860
If you're developing for an
iPhone or an Android device, an

00:23:29.860 --> 00:23:36.060
iPad, which is somewhere in
between, or a desktop browser

00:23:36.060 --> 00:23:40.640
or -- this is my Static Maps
API image there -- those

00:23:40.640 --> 00:23:44.440
are all very different.

00:23:47.440 --> 00:23:50.338
I want you to think about that
when you're thinking about the

00:23:50.338 --> 00:23:53.858
development and what the
implications of that are.

00:23:53.902 --> 00:23:55.600
Go back to this slide.

00:23:55.160 --> 00:23:57.260
And just some of the things
that you might think

00:23:57.260 --> 00:24:00.800
about are screen size.

00:24:01.260 --> 00:24:05.570
When you're creating your map,
make your divs flexible.

00:24:06.940 --> 00:24:10.020
Don't set absolute pixel
boundaries on them unless you

00:24:10.020 --> 00:24:13.440
know exactly the platform that
it's being displayed on cause

00:24:13.440 --> 00:24:20.520
you won't necessarily know
the size of your screen.

00:24:20.520 --> 00:24:24.160
Vary the chorme, the stuff
that goes around it by the

00:24:24.160 --> 00:24:25.440
browser that's accessing it.

00:24:27.160 --> 00:24:34.540
Just put in some dynamic
stylesheets If you know that

00:24:34.540 --> 00:24:38.598
it's being loaded on a mobile
device, then you know that

00:24:38.598 --> 00:24:40.880
you don't necessarily want
to put chrome around it.

00:24:40.880 --> 00:24:44.518
You might wanna put a tab
instead so that somebody can

00:24:44.518 --> 00:24:49.240
get to session information
at Google IO on a separate

00:24:49.240 --> 00:24:53.540
tab from the actual map.

00:24:53.540 --> 00:24:56.740
But if you're displaying it in
a browser that's sitting on a

00:24:56.740 --> 00:24:59.280
desktop or a laptop, you might
want to put a whole bunch more

00:24:59.280 --> 00:25:01.780
stuff around it so that people
can get access to

00:25:01.780 --> 00:25:03.160
that information.

00:25:03.160 --> 00:25:07.680
And I just mentioned
session information at IO.

00:25:07.680 --> 00:25:19.640
I wanted to show you one of the
Apps that you might have seen.

00:25:35.338 --> 00:25:37.780
This is the Google IO map.

00:25:39.020 --> 00:25:41.140
How many of you downloaded
the Google IO application

00:25:41.140 --> 00:25:43.160
on your Android device?

00:25:43.160 --> 00:25:45.220
This is the map that
shows up in that.

00:25:45.220 --> 00:25:47.840
It's the exact same map.

00:25:47.840 --> 00:25:54.320
It shifts the user interface.

00:25:54.320 --> 00:25:56.472
We'll see here as
I'm moving around.

00:26:02.540 --> 00:26:18.720
When I practiced this
before I didn't have the

00:26:18.720 --> 00:26:19.000
cord plugged into it.

00:26:19.000 --> 00:26:21.740
Which is why I've had the
cord plugged into it.

00:26:23.240 --> 00:26:27.960
That's another danger in
creating for mobile devices.

00:26:28.120 --> 00:26:36.600
So you'll see here I didn't
actually go through -- cause I

00:26:36.600 --> 00:26:39.078
wanted to show you what the
performance actually looks like

00:26:39.078 --> 00:26:43.480
-- I didn't go through and
pre-cache these tiles either.

00:26:43.480 --> 00:26:47.038
So that's actually fairly high
performance and including by

00:26:47.038 --> 00:26:49.900
the way, some of these tiles
are our custom tiles, where

00:26:49.900 --> 00:26:52.238
you see the lunch cafe's
and that sort of thing.

00:26:52.238 --> 00:26:54.838
That's custom tiles that
were created specifically

00:26:54.838 --> 00:26:57.880
for this application.

00:26:57.880 --> 00:27:01.900
So if you have an Android,
you can download this and

00:27:01.900 --> 00:27:02.540
put this on your phone.

00:27:02.540 --> 00:27:03.220
The Google IO application.

00:27:03.220 --> 00:27:06.080
If you don't, ask
somebody who does.

00:27:06.760 --> 00:27:09.620
So you can see there that's
a nice hybrid application.

00:27:14.440 --> 00:27:17.680
So keep in mind too that
people are going to have

00:27:17.680 --> 00:27:18.020
to do touch events.

00:27:20.460 --> 00:27:33.900
Which may impact what you
put in your user interface.

00:27:33.900 --> 00:27:35.520
People are gonna have to
actually physically touch

00:27:35.520 --> 00:27:39.598
things in order to
get them to open up.

00:27:39.598 --> 00:27:42.300
So if you want to have a map
marker there, you're gonna have

00:27:42.300 --> 00:27:46.200
to figure out what is the size
on the screen but also and make

00:27:46.200 --> 00:27:50.338
sure that things are accessible
and easily touchable by

00:27:50.338 --> 00:27:54.960
somebody particularly like me
who was has very large fingers.

00:27:55.480 --> 00:27:59.440
And also think about, if you're
doing a native or hybrid

00:27:59.440 --> 00:28:02.358
application, you get some of
the native look and feel

00:28:02.358 --> 00:28:03.720
of the application.

00:28:03.720 --> 00:28:09.000
Now there are some projects out
there to try and help you get

00:28:09.000 --> 00:28:12.778
that native look and feel
within a browser application.

00:28:12.778 --> 00:28:14.618
So IUI is one example of that.

00:28:17.400 --> 00:28:21.838
That's something that you might
want to have -- its always a

00:28:21.838 --> 00:28:27.080
trade off -- if you're masking
your application as if it were

00:28:27.080 --> 00:28:29.760
in a native application.

00:28:29.760 --> 00:28:32.798
That kind of tricks your users
into thinking that it is a

00:28:32.798 --> 00:28:36.620
native application even
if its in a browser.

00:28:36.620 --> 00:28:38.260
On the other hand, maybe
that's what you want.

00:28:38.260 --> 00:28:41.760
Maybe not necessiarly tricking
your users but just presenting

00:28:41.760 --> 00:28:44.298
them with a fairly
consistent user interface.

00:28:44.298 --> 00:28:47.400
So that's one of the
things that you might

00:28:47.400 --> 00:28:51.120
want to consider.

00:28:51.120 --> 00:28:55.920
So i'm gonna spend a few
more minutes talking

00:28:55.920 --> 00:28:59.140
about geo location.

00:28:59.460 --> 00:29:02.220
Now geo location is the process
of getting a device to

00:29:02.220 --> 00:29:05.860
tell you where you are.

00:29:05.860 --> 00:29:14.740
Now this is one of the places
where these devices, these

00:29:14.740 --> 00:29:19.240
mobile devices actually have
something up the on the desktop

00:29:19.240 --> 00:29:22.400
and the laptop environment
which is that these things

00:29:22.400 --> 00:29:24.420
actually know where they are.

00:29:24.420 --> 00:29:27.480
They actually know a fair
amount about were they are.

00:29:27.700 --> 00:29:28.680
They know where they are.

00:29:28.680 --> 00:29:34.740
They know often what their
angle is, lots of information

00:29:34.740 --> 00:29:36.040
about how you're
holding the device.

00:29:36.040 --> 00:29:38.900
They also can figure
out where you've been.

00:29:38.900 --> 00:29:44.960
So these are some things that
you want to have access to and

00:29:44.960 --> 00:29:48.320
it's often what drives people
towards native applications

00:29:48.320 --> 00:29:49.280
or hybrid applications.

00:29:49.280 --> 00:29:52.480
They want to be able to
capture control of that.

00:29:53.400 --> 00:29:57.960
The latest versions of both the
Android and iPhone SDK is,

00:29:57.960 --> 00:30:02.300
the broswers support a
HTML 5 geo location.

00:30:03.200 --> 00:30:08.920
HTML 5 geo location is
basically, the device tells the

00:30:08.920 --> 00:30:10.680
browser, this is where I am.

00:30:10.680 --> 00:30:14.540
The browser doesn't necessarily
know exactly where it is.

00:30:14.500 --> 00:30:18.760
It uses the device to give it
some clues as to where it is.

00:30:18.760 --> 00:30:21.118
So then the device figures
out how to do that.

00:30:21.118 --> 00:30:25.140
It can send some options to it.

00:30:25.140 --> 00:30:29.478
You can send some
refinements to that.

00:30:29.478 --> 00:30:31.800
I'm gonna walk you through
a few of the things but I

00:30:31.800 --> 00:30:34.038
encourage you to check
out the spec on it.

00:30:34.038 --> 00:30:38.980
And also after the session, up
in the hacker alcove, we're

00:30:38.980 --> 00:30:46.358
going to be doing a quick code
lab in the hacker alcove.

00:30:47.560 --> 00:30:51.140
If you want to sit down with
some people from geo, including

00:30:51.140 --> 00:30:56.560
myself, to help you out with
that, to get started using geo

00:30:56.560 --> 00:31:00.280
location and working with
street view on the device,

00:31:00.280 --> 00:31:03.600
follow me after this session.

00:31:04.540 --> 00:31:09.080
As I said, there's HTML 5 geo
location and then for things

00:31:09.080 --> 00:31:12.740
that can't access that, there's
also IP based geo location.

00:31:12.740 --> 00:31:16.360
Now you can see where
that might fail.

00:31:16.360 --> 00:31:21.680
I displayed something earlier
which showed us -- let me see

00:31:21.680 --> 00:31:27.320
if i can pull that up again
-- in Rancho Cucamonga.

00:31:27.400 --> 00:31:30.098
I'm gonna admit right now
that I'm not actually

00:31:30.098 --> 00:31:32.260
sure where that is.

00:31:32.500 --> 00:31:37.580
I think it's in southern
California based on --

00:31:37.580 --> 00:31:39.848
sorry -- so it's in LA.

00:31:39.848 --> 00:31:42.200
So you can see the danger.

00:31:42.200 --> 00:31:46.180
You can also see that different
browsers will provide you

00:31:46.180 --> 00:31:54.560
with different methods of
finding your geo location.

00:31:54.560 --> 00:31:59.880
And I pull up Firefox because
Firefox also provides generally

00:31:59.880 --> 00:32:01.458
something better and also
because I hadn't gone to

00:32:01.458 --> 00:32:03.820
this page before here.

00:32:04.220 --> 00:32:06.720
You'll see here it gives
you an actual option.

00:32:06.720 --> 00:32:09.840
First time you visit a page,
it'll ask you, do you want to

00:32:09.840 --> 00:32:11.440
share your location with this?

00:32:11.440 --> 00:32:13.758
All the browsers
will do this now.

00:32:14.318 --> 00:32:16.230
This is a privacy mechanism
but its something that

00:32:16.230 --> 00:32:17.520
you need to anticipate.

00:32:17.520 --> 00:32:19.940
If somebody doesn't want to
share their location with

00:32:19.940 --> 00:32:24.740
you, then code around that.

00:32:24.520 --> 00:32:25.420
What is it that you set?

00:32:25.420 --> 00:32:27.140
What's your default?

00:32:27.780 --> 00:32:28.140
That's really up to you.

00:32:28.140 --> 00:32:33.820
So here I'm gonna click on
share location and Firefox also

00:32:33.820 --> 00:32:34.540
places me in Rancho Cucamonga.

00:32:34.540 --> 00:32:35.480
Oh that's interesting.

00:32:36.720 --> 00:32:40.080
So earlier it placed me right
in San Francisco but now it's

00:32:40.080 --> 00:32:44.238
was placing me in
Rancho Cucamonga.

00:32:44.238 --> 00:32:47.340
It probably means that they're
getting it the same way.

00:32:47.340 --> 00:32:50.480
Now the different ways they get
it are the different browsers

00:32:50.480 --> 00:32:53.360
will have services that are
sort from the back and

00:32:53.360 --> 00:32:55.140
they'll do an IP look up.

00:32:55.140 --> 00:32:58.440
That's sort of the coarsest,
worst way to determine

00:32:58.440 --> 00:32:59.420
your location.

00:32:59.420 --> 00:33:02.460
They'll look at the IP
address of the request

00:33:02.460 --> 00:33:04.080
then return something.

00:33:04.080 --> 00:33:09.160
And then another way is to look
at the local Wi-Fi networks try

00:33:09.160 --> 00:33:11.058
and make guesses as
to where you are.

00:33:11.880 --> 00:33:13.420
Apparently there are similarly
named Wi-Fi netwoeks

00:33:13.420 --> 00:33:16.980
around here.

00:33:17.500 --> 00:33:24.158
I am going a little over
time so I am gonna try

00:33:24.158 --> 00:33:26.040
and power through this.

00:33:26.040 --> 00:33:28.240
I just wanna show you
some of the code.

00:33:29.060 --> 00:33:35.660
This is how simple it is to
get HTML 5 geo location.

00:33:37.440 --> 00:33:40.360
This was one line here:
navigator dot geo locatoin

00:33:40.360 --> 00:33:42.880
dot get current position.

00:33:42.880 --> 00:33:46.260
And then you pass it a
function that it then

00:33:46.260 --> 00:33:47.400
calls when it has it.

00:33:47.400 --> 00:33:54.780
That would be like show map,
which would do something.

00:33:54.780 --> 00:34:02.860
There is however a lot more
functions in geo location.

00:34:02.860 --> 00:34:08.958
So you can do things like
watch the position.

00:34:09.378 --> 00:34:13.878
Just keep coming back and
changing the position

00:34:13.878 --> 00:34:14.998
when it changes.

00:34:14.998 --> 00:34:17.018
You can look at the
age of the position.

00:34:17.018 --> 00:34:20.098
So if the device provides you
with some of the age there,

00:34:20.098 --> 00:34:22.878
you can get directly the
time stamp, when somebody

00:34:22.878 --> 00:34:24.098
was at that location.

00:34:24.098 --> 00:34:27.018
And finally the accuracy.

00:34:27.018 --> 00:34:35.778
Now you may have seen, in this
one, it makes a guess as to the

00:34:35.778 --> 00:34:39.218
accuracy and then what I did
was I took advantage of

00:34:39.218 --> 00:34:44.638
JavaScript's new circle overlay
to just draw a circle

00:34:44.638 --> 00:34:46.840
around it based on the
accuracy in meters.

00:34:46.840 --> 00:34:49.000
So what it says is somewhere
within this radius,

00:34:49.000 --> 00:34:50.778
this is where you are.

00:34:50.778 --> 00:34:55.338
Now of course this is not
accurate but generally,

00:34:55.338 --> 00:34:59.678
particularly if you have GPS
based access on the phone,

00:34:59.678 --> 00:35:04.658
it'll be within a fairly, on a
mobile device particularly,

00:35:04.658 --> 00:35:09.438
within a fairly narrow area,
within a few blocks usually.

00:35:09.738 --> 00:35:13.518
And sometimes very
tight around that.

00:35:13.518 --> 00:35:18.800
So I recommend when you're
doing this kind of application,

00:35:18.800 --> 00:35:22.918
to take advantage of the
accuracy measure and actually

00:35:22.918 --> 00:35:26.860
display that to the developer,
I'm sorry, to the user, cause

00:35:26.860 --> 00:35:30.198
that will give them some
indication of how accurate

00:35:30.198 --> 00:35:33.238
your positions is.

00:35:40.898 --> 00:35:44.880
If you're operating on a
browser, as you see here, some

00:35:44.880 --> 00:35:47.060
the browsers do support HTML
5 geo locations but some

00:35:47.060 --> 00:35:49.718
of them like IE do not.

00:35:50.938 --> 00:35:52.060
Some of the older
browsers do not.

00:35:54.620 --> 00:36:00.920
We also have a client location
which is actually part

00:36:00.920 --> 00:36:03.198
of the AJAX API's.

00:36:04.118 --> 00:36:08.098
What I recommend doing is, see
if you have HTML 5 geo location

00:36:08.098 --> 00:36:12.118
and if not, fall back
to something using

00:36:12.118 --> 00:36:14.318
client location.

00:36:15.158 --> 00:36:18.698
There's a lot more things
in HTML 5 I don't

00:36:18.698 --> 00:36:19.720
have time to go over.

00:36:19.720 --> 00:36:26.078
But basically look for more
HTML 5 support in applications.

00:36:26.078 --> 00:36:31.698
And I don't have time for this
last demo so I'm just going to

00:36:31.698 --> 00:36:33.558
go ahead and switch
over to Chad.

00:36:33.558 --> 00:36:36.938
So Chad.

00:36:36.938 --> 00:36:39.058
CHAD KILLINGSWORTH: So I get
the joy of showing you an

00:36:39.058 --> 00:36:43.458
acutal use case of what it
takes to make a version 3 map

00:36:43.458 --> 00:36:46.078
actually function on mobile
devices in the real

00:36:46.078 --> 00:36:47.758
world scenario.

00:36:47.758 --> 00:36:50.178
I work at a university
and we're using it

00:36:50.178 --> 00:36:53.718
for our campus map.

00:36:53.718 --> 00:36:56.800
We have, at the University, as
far as mapping is concerned,

00:36:56.800 --> 00:36:59.118
two distinct groups
of audiences.

00:36:59.118 --> 00:37:01.898
Our internal audiences would
be faculty, staff, and

00:37:01.898 --> 00:37:03.038
our enrolled students.

00:37:03.038 --> 00:37:08.260
And they have strongly told us
that they prefer an application

00:37:08.260 --> 00:37:10.360
to run on the device.

00:37:10.360 --> 00:37:12.018
They don't want a bookmark,
they want an actual

00:37:12.018 --> 00:37:13.138
application.

00:37:13.138 --> 00:37:17.340
However, at the same time, I
have visitors and guests to

00:37:17.340 --> 00:37:19.738
campus who may be coming to
take a tour, coming to a

00:37:19.738 --> 00:37:23.938
sporting event, coming to a
theatrical performance; they're

00:37:23.938 --> 00:37:26.278
going to show up at the parking
lot and open the map in the

00:37:26.278 --> 00:37:29.360
browser and there's nothing I
can do to change that behavior.

00:37:29.360 --> 00:37:33.380
So I have two
distinct use cases.

00:37:33.380 --> 00:37:36.600
This is the scenario where the
hybrid application comes in

00:37:36.600 --> 00:37:40.818
really well especially
considering that I don't have

00:37:40.818 --> 00:37:42.100
hundreds of developers.

00:37:42.100 --> 00:37:45.038
I only have the resources to
maintain one map application.

00:37:46.558 --> 00:37:51.138
So the hybrid application
lets me kind of do both.

00:37:53.658 --> 00:37:55.300
The first thing you got to do
is, I have to migrate my

00:37:55.300 --> 00:37:56.458
version 2 map to version 3.

00:37:56.458 --> 00:37:59.438
There was an entire session
about this, but some quick high

00:37:59.438 --> 00:38:04.018
points: all my data sets are
identical between -- I

00:38:04.018 --> 00:38:06.878
still have a functioning
version 2 of the map.

00:38:06.878 --> 00:38:09.072
If you visit it in your browser
you're gonna see the version 2

00:38:09.072 --> 00:38:14.640
-- the same jason data, the
same search index, the same KML

00:38:14.640 --> 00:38:18.198
layers all work between both,
no modifications needed.

00:38:18.798 --> 00:38:20.778
Early on there was some
problems with the version 3 in

00:38:20.778 --> 00:38:24.018
that, a lot of the features
were write your own.

00:38:24.018 --> 00:38:26.018
That's not really a
problem anymore.

00:38:26.018 --> 00:38:30.458
In fact it's really easy
if you using KML layers.

00:38:30.458 --> 00:38:34.280
The probably biggest
development challenge is the

00:38:34.280 --> 00:38:36.158
small screen and the user
interface and making

00:38:36.158 --> 00:38:38.638
it touch based.

00:38:38.638 --> 00:38:43.178
So, with that in mind, let's
look at the hybrid application.

00:38:43.178 --> 00:38:46.038
Now I had some pretty big
concerns about doing this:

00:38:46.038 --> 00:38:50.058
the first being performance.

00:38:50.058 --> 00:38:52.344
When it was loaded in a
browser, I knew my users would

00:38:52.344 --> 00:38:56.940
give me some slack with the
performance because it's a web

00:38:56.940 --> 00:38:58.820
browswer and you just
kind of expect this.

00:38:58.820 --> 00:39:00.260
But I was really concerned
about when it was an

00:39:00.260 --> 00:39:02.718
application because then
they're going to be directly

00:39:02.718 --> 00:39:06.558
comparing it to the Native maps
application on the phone.

00:39:06.558 --> 00:39:10.698
So if my hybrid application is
slow, there can be a pretty

00:39:10.698 --> 00:39:11.344
low tolerance for that.

00:39:12.298 --> 00:39:16.798
That one, it turns out, is
pretty easy to work around, as

00:39:16.798 --> 00:39:17.598
long as you take some thought
and go through all

00:39:17.598 --> 00:39:19.500
the optimizations.

00:39:19.500 --> 00:39:22.718
We'll talk about a few of
them here in just a second.

00:39:22.718 --> 00:39:25.338
The performance within the
browser is pretty good;

00:39:25.338 --> 00:39:28.858
especially for return visitors
when you do some of the HTML 5

00:39:28.858 --> 00:39:33.338
local storage and caching
it works pretty well.

00:39:33.338 --> 00:39:37.658
The last one is purely
psychological and that is

00:39:37.658 --> 00:39:40.998
a developer, this method
feels like cheating.

00:39:40.998 --> 00:39:45.738
I had to get over the idea that
my native application is really

00:39:45.738 --> 00:39:48.300
just a glorified bookmark.

00:39:48.300 --> 00:39:54.308
However, I put the graph on
here to show you -- let me see

00:39:54.308 --> 00:39:59.260
if I can use both the bottom
button -- the blue line is

00:39:59.260 --> 00:40:02.244
the segment, that's all the
traffic to my mobile map.

00:40:02.118 --> 00:40:05.118
The green line at the bottom,
that's where someone opens it

00:40:05.118 --> 00:40:09.858
in their web browser and the
orange line is usage from

00:40:09.858 --> 00:40:11.738
within the application.

00:40:11.738 --> 00:40:14.240
So you can see that my users
don't really care that

00:40:14.240 --> 00:40:14.920
is just a bookmark.

00:40:14.920 --> 00:40:17.578
They much prefer the
actual application.

00:40:17.578 --> 00:40:21.078
When I'm beginning to see
this type of data, that

00:40:21.078 --> 00:40:23.838
psychological barrier
just kind of goes away.

00:40:23.938 --> 00:40:29.098
If users like it like this and
are using it like this, then

00:40:29.098 --> 00:40:30.498
that's definitely
the way to go.

00:40:30.498 --> 00:40:35.738
Let me show you now kind of
what this looks like on

00:40:35.738 --> 00:40:47.858
a few different devices.

00:40:50.118 --> 00:40:53.238
The icon on the left is
the actual application.

00:40:54.998 --> 00:40:56.058
This is the bookmark saved
to their home screen.

00:41:03.138 --> 00:41:06.260
So in this case, the iPhone
shows a splash image and

00:41:06.260 --> 00:41:09.240
will block showing you the
map until the load event

00:41:09.240 --> 00:41:10.018
in the window occurs.

00:41:10.018 --> 00:41:13.998
So I'm not going to see as
much feedback while it

00:41:13.998 --> 00:41:15.380
loads and we'll see how
the wireless network does.

00:41:15.800 --> 00:41:19.260
And it's gonna ask me if I
wanna use my current location.

00:41:21.638 --> 00:41:23.060
In this case you can
notice the interface.

00:41:23.060 --> 00:41:26.238
Now, I can turn on
different layers.

00:41:26.238 --> 00:41:28.138
Let's see if any shuttles are
actually running on the campus

00:41:28.138 --> 00:41:31.418
right now -- yup I've
got 2 routes running.

00:41:31.418 --> 00:41:36.538
I can look at the parking lots.

00:41:36.678 --> 00:41:38.210
I can actually search for a
building, although I'm gonna

00:41:38.210 --> 00:41:41.528
show you that on the iPad cause
it's a little easier to type.

00:41:41.528 --> 00:41:44.558
Let's look at the same thing
on an Android device.

00:41:49.300 --> 00:41:51.800
In this case I'm gonna actually
show you the application; it

00:41:51.800 --> 00:41:53.080
is identical to the iPhone.

00:41:53.080 --> 00:41:55.978
Here I had it preloaded
because Android remembers.

00:41:55.978 --> 00:41:59.498
So it's already got my layers
up and my buses are running.

00:42:00.120 --> 00:42:03.618
And also one other thing,
I have even more layers.

00:42:03.618 --> 00:42:07.018
We can turn on the bike routes.

00:42:07.018 --> 00:42:19.038
That's the one complaint I have
is my controls are too small.

00:42:19.038 --> 00:42:23.278
So now I can see not only the
bike layers, but I can see

00:42:23.278 --> 00:42:25.738
the bike racks on campus.

00:42:25.738 --> 00:42:28.218
And when I get to the edge
on my campus bike map, it

00:42:28.218 --> 00:42:33.518
automatically goes to the
Google Maps bikeways layer.

00:42:33.518 --> 00:42:53.078
And finally on the iPad.

00:42:53.078 --> 00:42:56.898
And in this case I want to
search for an actual location

00:42:56.898 --> 00:42:59.578
and I'm gonna use the building
code that would show up

00:42:59.578 --> 00:43:01.098
in our class schedule.

00:43:01.098 --> 00:43:07.058
I don't know where that
building is and there it is.

00:43:07.058 --> 00:43:10.358
And last but not least, let's
find out where we are.

00:43:10.358 --> 00:43:13.778
And since I'm nowhere close
to my map, it actually

00:43:13.778 --> 00:43:15.178
puts us in San Francisco.

00:43:15.178 --> 00:43:18.258
That gives you some idea
of how the geo location

00:43:18.258 --> 00:43:26.038
works with this.

00:43:26.038 --> 00:43:29.300
In order to make this work well
for users though, I have spent

00:43:29.300 --> 00:43:31.058
a considerable amount of
time on optimizations.

00:43:31.178 --> 00:43:34.638
In fact, it seems like every
other week I'm finding a

00:43:34.638 --> 00:43:36.038
new thing to do or to try.

00:43:36.418 --> 00:43:38.318
Here's some of the top
ones that I found that

00:43:38.318 --> 00:43:41.638
make the most impact.

00:43:41.638 --> 00:43:46.138
The first one was, use KML
layers for complicated data.

00:43:46.138 --> 00:43:49.618
Complicated does not take much.

00:43:49.618 --> 00:43:53.480
Before KML layers, a
typical use case would

00:43:53.480 --> 00:43:55.118
be to open the map.

00:43:55.118 --> 00:43:59.478
There would be a tile layer,
about 6 relatively simple

00:43:59.478 --> 00:44:03.360
polylines, showing the
bus routes and maybe 30

00:44:03.360 --> 00:44:04.098
markers on the screen.

00:44:04.098 --> 00:44:06.840
Even on some of the fastest
Android devices, with that

00:44:06.840 --> 00:44:08.638
data, there's a noticeable
delay when panning.

00:44:10.698 --> 00:44:14.158
Loading wan't great, drawing,
SPG seems particular slow with

00:44:14.158 --> 00:44:19.498
the p But with KML layers,
just really snappy.

00:44:19.498 --> 00:44:24.098
I essentially had the overhead
of a single tile layer.

00:44:24.098 --> 00:44:26.518
The second one is to
compress your JavaScript.

00:44:26.518 --> 00:44:31.380
My JavaScript, not the maps
API, but my JavaScript, is

00:44:31.380 --> 00:44:35.938
around 36K -- I've cut a lot
out of it -- uncompressed.

00:44:37.518 --> 00:44:41.418
With using closure compiler and
the advanced optimizations mode

00:44:41.418 --> 00:44:44.280
closure and compiler, I can
get it down to about 13K.

00:44:45.598 --> 00:44:48.198
If you're interested in using
closure compiler there's

00:44:48.198 --> 00:44:52.000
already a extern file available
for the version 3 Maps API.

00:44:52.000 --> 00:44:55.460
It was up to date as of Sunday;
obviously the announcements

00:44:55.460 --> 00:44:58.218
this week aren't there yet.

00:44:58.218 --> 00:45:00.598
Another optimization which
really has nothing to do with

00:45:00.598 --> 00:45:04.258
speed, more to show users
progress, is you can delay

00:45:04.258 --> 00:45:07.218
loading so you're not
blocking script tags.

00:45:07.218 --> 00:45:10.618
And mobile browsers still block
page rendering so, you can

00:45:10.618 --> 00:45:13.578
kind of delay that and show
some progressive loading.

00:45:13.578 --> 00:45:19.038
For instance, I'm loading the
Maps API boot loader code at

00:45:19.038 --> 00:45:21.378
dynamically adding the script
tag at the DOM content

00:45:21.378 --> 00:45:21.938
loaded event.

00:45:21.938 --> 00:45:25.498
And then I dynamically add my
script tag when the map's

00:45:25.498 --> 00:45:27.178
tiles loaded event occurs.

00:45:27.178 --> 00:45:30.138
So the user sees more and more
features coming into the map.

00:45:30.138 --> 00:45:33.318
It's not any faster overall
time but they see more progress

00:45:33.318 --> 00:45:36.058
and it gives a better
user experience.

00:45:36.058 --> 00:45:39.698
And then kind of the last
one is, use and love

00:45:39.698 --> 00:45:41.658
Google page speed.

00:45:41.658 --> 00:45:46.018
It has a whole lot of
optimizations it'll tell you.

00:45:46.018 --> 00:45:49.378
Even some of the smallest
changes can make a significant

00:45:49.378 --> 00:45:52.418
difference on your
slower devices.

00:45:52.418 --> 00:45:53.458
One of the slowest and
most frustrating is the

00:45:53.458 --> 00:45:55.798
iPhone 3G, not the 3GS.

00:45:58.918 --> 00:46:00.838
Anything you can do to
speed that up is well

00:46:00.838 --> 00:46:02.938
worth the effort.

00:46:02.938 --> 00:46:07.078
Also, if you're interested in
how any of this is working, my

00:46:07.078 --> 00:46:09.320
JavaScript search code
is compressed with

00:46:09.320 --> 00:46:10.458
closure complier.

00:46:10.458 --> 00:46:13.698
There's a comment at the top of
the file to a blog post that

00:46:13.698 --> 00:46:16.018
lists out all the uncompressed
source that you can go take a

00:46:16.018 --> 00:46:23.958
look at and see any of it.

00:46:23.958 --> 00:46:24.820
MANO MARKS: Thank you John.

00:46:24.820 --> 00:46:29.598
So I want to mention this,
we're putting this into pretty

00:46:29.598 --> 00:46:33.538
much every slide deck.

00:46:33.618 --> 00:46:37.138
If you wanna tone this
out, that's fine.

00:46:37.398 --> 00:46:42.698
Basically, we have a developer
qualification program and that

00:46:42.698 --> 00:46:47.138
program is designed to
basically, similar to

00:46:47.138 --> 00:46:52.280
certification programs, just to
identify developers who are

00:46:52.280 --> 00:46:54.960
accomplished and who contribute
a lot to the developer

00:46:54.960 --> 00:46:59.780
community and then allow
them to have ways to be

00:46:59.780 --> 00:47:00.500
easily discoverable.

00:47:00.500 --> 00:47:06.760
So if you want to find out more
about it, we're launching the

00:47:06.760 --> 00:47:09.898
developer qualification for V3.

00:47:11.258 --> 00:47:15.580
So I urge you take a look at
that, and get qualified.

00:47:18.358 --> 00:47:25.438
So, we're now going to switch
over to looking at questions

00:47:25.438 --> 00:47:27.098
that anybody might have.

00:47:27.098 --> 00:47:32.898
So I'm gonna switch this over
to -- it's number two right,

00:47:32.898 --> 00:47:39.118
no, number one -- but also if
you have any questions feel

00:47:39.118 --> 00:47:43.380
to come up to one of these
microphones here and ask us any

00:47:43.380 --> 00:47:47.300
problems you've have with
developing for mobile devices.

00:47:47.880 --> 00:47:53.578
Please let us know.

00:48:01.898 --> 00:48:06.138
So you wanna come up Chad, and
we'll answer any questions.

00:48:06.958 --> 00:48:09.938
So what's the deal
with the censor flag?

00:48:09.938 --> 00:48:13.158
That's a really good question.

00:48:13.158 --> 00:48:16.618
Basically the licensing terms
that we have with a lot of our

00:48:16.618 --> 00:48:21.400
data providers requires us to
indicate whether or not we're

00:48:21.400 --> 00:48:26.598
using a sensor or somebody is
using a sensor to detect

00:48:26.598 --> 00:48:28.800
a location when they're
displaying something on a map.

00:48:28.800 --> 00:48:33.490
So in this case, if you're
using geo locations -- which I

00:48:33.490 --> 00:48:34.738
probably should have mentioned
earlier -- you need

00:48:34.738 --> 00:48:36.038
to set this to true.

00:48:36.038 --> 00:48:42.338
Otherwise set it to false if
you're not using a sensor to

00:48:42.338 --> 00:48:45.518
detect location and then
display it on the map.

00:48:45.518 --> 00:48:49.800
A lot of people think that,
that actually provides you with

00:48:49.800 --> 00:48:52.320
access to the location but
setting that there is just

00:48:52.320 --> 00:48:54.138
about when you're
loading the map.

00:48:54.138 --> 00:48:56.398
Let's take this question here.

00:48:56.398 --> 00:49:00.368
AUDIENCE: Just wondering with
hybrid applications, if either

00:49:00.368 --> 00:49:04.378
of you could comment, how hard
is it to get data into the

00:49:04.378 --> 00:49:06.918
Andorid web view and back out?

00:49:07.958 --> 00:49:08.518
MANO MARKS: From your device?

00:49:08.518 --> 00:49:09.198
AUDIENCE: Yeah

00:49:09.198 --> 00:49:10.500
MANO MARKS: It's very easy.

00:49:10.500 --> 00:49:16.920
You can expose a JavaScript
interface to any of the native

00:49:16.920 --> 00:49:20.120
services and to data stores.

00:49:20.120 --> 00:49:23.318
You just basically write, --
I'm just thinking in terms of

00:49:23.318 --> 00:49:26.878
Android -- just write an
additional function in

00:49:26.878 --> 00:49:29.118
and then expose it as a
JavaScript interface.

00:49:29.060 --> 00:49:31.120
CHAD KILLINGSWORTH: There's
actually an article on the

00:49:31.120 --> 00:49:35.580
version 3 site that talks about
developing a hybrid application

00:49:35.580 --> 00:49:38.398
and it's not very long but it
shows you the full process to

00:49:38.398 --> 00:49:43.618
get a working map application.

00:49:43.618 --> 00:49:45.918
MANO MARKS: Can maps licensing
be simplified so that you

00:49:45.918 --> 00:49:47.638
can buy a license online?

00:49:48.678 --> 00:49:50.098
Is Dan Chu in the audience?

00:49:51.758 --> 00:49:55.558
So, there are enterprise
people here who you can

00:49:55.558 --> 00:49:56.780
talk to about that.

00:49:57.498 --> 00:50:01.140
We're aware that the process of
getting licensing for Google

00:50:01.140 --> 00:50:07.898
Maps API premiere is not easy
and also presents some

00:50:07.898 --> 00:50:08.138
unique challenges for
mobile developers.

00:50:09.060 --> 00:50:15.980
So try and see Dan Chu here,
he's actually the PM for

00:50:15.980 --> 00:50:16.400
Goggle Maps API premiere.

00:50:17.158 --> 00:50:21.340
Or talk to somebody else about
that afterwards but yeah,

00:50:21.340 --> 00:50:33.218
I would love to see that.

00:50:33.218 --> 00:50:36.320
In the browser based API why
does pinch to zoom work

00:50:36.320 --> 00:50:39.518
on the iPhone browser
and not on Android.

00:50:41.498 --> 00:50:45.858
That's a problem that I
believe that were working on.

00:50:45.858 --> 00:50:48.618
Mark, do you want to
comment on that.

00:50:49.338 --> 00:50:51.640
Mark, one of the core
developers for Maps API.

00:50:51.640 --> 00:51:08.320
MARK: For pinch to zoom we
require special browser

00:51:08.320 --> 00:51:11.958
JavaScript events which on the
iPhone are the gesture events

00:51:11.958 --> 00:51:14.938
and the touch events
with multiple touch.

00:51:15.340 --> 00:51:18.738
Those events are not currently
exposed by other browsers such

00:51:18.738 --> 00:51:20.998
as Android or the other
mobile platforms.

00:51:20.998 --> 00:51:23.558
So we limit it for the moment,
to only support pinch to zoom

00:51:23.558 --> 00:51:26.198
on the iPhone because it's the
only platform where we

00:51:26.198 --> 00:51:27.800
receive those events.

00:51:27.800 --> 00:51:32.240
So even on Android devices that
have pinch to zoom behavior, so

00:51:32.240 --> 00:51:34.900
that you can scale your browser
and see characters bigger,

00:51:34.900 --> 00:51:38.018
at the JavaScript level we
don't receive those events.

00:51:40.558 --> 00:51:41.658
I believe it's coming up.

00:51:42.400 --> 00:51:44.060
I haven't seen, for the moment,
any other browsers, other

00:51:44.060 --> 00:51:46.980
than the iPhone, that
expose those events.

00:51:48.118 --> 00:51:50.578
CHAD KILLINGSWORTH: There's
actually an issue in the issue

00:51:50.578 --> 00:51:54.400
tracker for the Maps API V 3
about that, that you can follow

00:51:54.400 --> 00:51:57.260
to keep up to date about
where that issue stands.

00:51:57.260 --> 00:52:00.578
MARK: Obviously, as soon as we
can see those events we just

00:52:00.578 --> 00:52:03.060
turn on the flag and start
processing them, so

00:52:03.060 --> 00:52:04.998
we're ready for it.

00:52:04.998 --> 00:52:06.938
MANO MARKS: So this is one of
the advantages actually of

00:52:06.938 --> 00:52:12.718
using the JavaScript Maps
API which is that we do all

00:52:12.718 --> 00:52:14.678
that kind of work for you.

00:52:14.558 --> 00:52:19.380
So when there's a change to
browsers or when we can add new

00:52:19.380 --> 00:52:22.198
features to it, we can add them
to them and it'll just happen

00:52:22.198 --> 00:52:28.538
without you having to make
changes to how you

00:52:28.538 --> 00:52:29.178
implement the API.

00:52:29.178 --> 00:52:31.178
CHAD KILLINGSWORTH: Another
real world example of that type

00:52:31.178 --> 00:52:35.938
of update is last week when KML
layers became available

00:52:35.938 --> 00:52:36.438
in version 3.

00:52:36.438 --> 00:52:39.518
I was able to roll out the
update to where my map now uses

00:52:39.518 --> 00:52:42.238
full KML layers without any
change to the hybrid

00:52:42.238 --> 00:52:44.318
application whatsoever
because it's just using the

00:52:44.318 --> 00:52:51.438
JavaScript in a browser.

00:52:51.438 --> 00:52:55.998
MANO MARKS: Can you provide
images or video say, via street

00:52:55.998 --> 00:52:59.298
view, of the inside of a
building once located by GPS?

00:53:00.238 --> 00:53:03.818
Will the API let me report
where I am in the building?

00:53:04.078 --> 00:53:07.558
Currently the street view API
does not allow you to move

00:53:07.558 --> 00:53:13.260
inside panorama's that aren't
in the API, aren't already in

00:53:13.260 --> 00:53:18.738
street view -- so sorry, Mark?

00:53:18.138 --> 00:53:24.098
oh we do now -- we do
allow you to do that.

00:53:24.098 --> 00:53:27.318
I apologize, I
missed that part.

00:53:27.318 --> 00:53:29.418
So yes, you can
you can do that.

00:53:29.398 --> 00:53:31.538
CHAD KILLINGSWORTH: One note is
though, that when you're in a

00:53:31.538 --> 00:53:34.460
building, the geo location
from even mobile devices

00:53:34.460 --> 00:53:37.878
becomes less accurate.

00:53:38.818 --> 00:53:40.998
MANO MARKS: One might even
say particularly, from

00:53:40.998 --> 00:53:46.618
mobile devices, becomes
far less accurate.

00:54:05.860 --> 00:54:06.218
MARK: [UNINTELLIGIBLE]

00:54:06.218 --> 00:54:09.300
MANO MARKS: Mark is saying,
just to clarify the issue, we

00:54:09.300 --> 00:54:13.780
don't provide, at this point,
we don't provide view of the

00:54:13.780 --> 00:54:18.340
insides of buildings but if you
create your own, you can create

00:54:18.340 --> 00:54:20.458
those panoramas yourself.

00:54:20.458 --> 00:54:23.278
And they are in the
documentation and Tom, who

00:54:23.278 --> 00:54:25.758
wrote the documentation, is
actually sitting right

00:54:25.758 --> 00:54:26.900
here in the audience.

00:54:26.900 --> 00:54:29.618
I thought I'd call him out
cause he's giving a talk

00:54:29.618 --> 00:54:32.958
later today, right on --

00:54:32.958 --> 00:54:34.358
TOM: [UNINTELLIGIBLE]

00:54:32.958 --> 00:54:33.558
MANO MARKS: -- Yeah,
on maps data, yeah.

00:54:33.558 --> 00:54:39.898
TOM: [INAUDIBLE].

00:54:39.898 --> 00:54:42.760
MANO MARKS: And the reference
went live today right,

00:54:42.760 --> 00:54:45.518
for street view?

00:54:45.518 --> 00:54:47.958
In about twenty minutes?

00:54:47.958 --> 00:54:49.778
So in about twenty minutes
the reference will be

00:54:49.778 --> 00:54:53.838
live for street view.

00:54:53.838 --> 00:54:57.838
OK did any additional
questions get added in?

00:54:57.838 --> 00:54:58.638
Any more questions?

00:54:58.638 --> 00:55:06.638
We got about five minutes.

00:55:08.398 --> 00:55:11.498
What I actually wanted to do
with the demo is to show

00:55:11.498 --> 00:55:16.258
you a little bit about
the code on this one.

00:55:16.258 --> 00:55:23.298
So let me just do some view
on it, view source rather.

00:55:23.298 --> 00:55:29.498
Walk you through a little bit.

00:55:29.498 --> 00:55:33.078
So this is on the geo location
demo that I was using earlier.

00:55:33.760 --> 00:55:43.498
Let me just get used to a
MAC here, for a moment.

00:55:46.778 --> 00:55:51.378
I wanted to just show you here.

00:55:51.378 --> 00:55:57.760
You'll see the function do geo
location, which basically says

00:55:57.760 --> 00:56:03.338
if there is navigator dot geo
location, then get the

00:56:03.338 --> 00:56:05.338
current position.

00:56:05.738 --> 00:56:13.278
You'll see here it has 2 call
backs: position success

00:56:13.278 --> 00:56:15.380
and position error.

00:56:15.158 --> 00:56:20.818
Position error returns an error
message if it's not able to

00:56:20.818 --> 00:56:23.178
determine something even though
it has the geo location,

00:56:23.178 --> 00:56:28.058
otherwise, produce a
particular error.

00:56:28.698 --> 00:56:33.918
More importantly, though
here, is position success.

00:56:33.918 --> 00:56:35.238
I should stay on
one screen here.

00:56:36.158 --> 00:56:43.678
So basically here you just do,
-- move the cursor out of the

00:56:43.678 --> 00:56:48.260
way -- it gives you position
object which gives

00:56:48.260 --> 00:56:50.358
you access to cords.

00:56:54.598 --> 00:56:58.078
And then you set a lat-long.

00:56:58.078 --> 00:57:04.958
Then I took the accuracy here,
set the center, created at the

00:57:04.958 --> 00:57:08.998
new lat-long object, set
the zoom level to 12.

00:57:08.998 --> 00:57:12.018
I created a marker and then
created a circle which had a

00:57:12.018 --> 00:57:16.558
radius of the accuracy
of the measurement.

00:57:16.558 --> 00:57:20.478
That's really all it took
to do that geo location.

00:57:22.280 --> 00:57:28.960
Another thing I want to note
here is --I set -- here's the

00:57:28.960 --> 00:57:31.878
code for using the default UI.

00:57:33.018 --> 00:57:34.638
You don't actually
have to do this but I

00:57:34.638 --> 00:57:35.918
wanted to call it out.

00:57:36.278 --> 00:57:39.238
I did not disable the
default user interface.

00:57:39.238 --> 00:57:43.678
I did allow for the
street view control.

00:57:43.678 --> 00:57:49.880
What that means then is, on
this here, because this is

00:57:49.880 --> 00:57:51.898
displaying as a slightly
smaller map, we'll see

00:57:51.898 --> 00:57:54.058
it's displaying the
smaller controls.

00:57:54.058 --> 00:57:57.198
If I were at a greater
resolution, it would

00:57:57.198 --> 00:57:58.300
display a larger control.

00:57:58.300 --> 00:58:01.624
Let me see if I expand
this if I can get it to.

00:58:07.998 --> 00:58:12.518
Oh I think it's because
I had zoomed out.

00:58:13.118 --> 00:58:16.860
So you see here when I get it
in a slightly larger one,

00:58:16.860 --> 00:58:22.900
the controls over here, on
the left hand portion of

00:58:22.900 --> 00:58:25.260
the screen they change.

00:58:25.260 --> 00:58:29.618
And here's the peg man that
gets added for the street

00:58:29.618 --> 00:58:31.558
view control there.

00:58:32.498 --> 00:58:36.360
It's very simple to set up
a map that takes account

00:58:36.360 --> 00:58:36.960
of geo location.

00:58:37.398 --> 00:58:41.958
And then also, automatically
changes depending on the

00:58:41.958 --> 00:58:45.302
screen size, the size of
the actual map itself.

00:58:51.338 --> 00:58:54.098
The question is, can you
programatically change the

00:58:54.098 --> 00:58:56.378
direction the street view is
pointing and make it move,

00:58:56.378 --> 00:58:58.398
and the answer is yes.

00:58:58.938 --> 00:59:03.698
In about 19 minutes,
check the documentation

00:59:03.698 --> 00:59:04.678
for how to do that.

00:59:04.878 --> 00:59:08.260
You have quite a bit of control
and, as noted in earlier

00:59:08.260 --> 00:59:11.280
sessions, if you put a marker
on a map, it will show up

00:59:11.280 --> 00:59:13.958
in the panorama as well.

00:59:13.958 --> 00:59:18.160
So you have this nice sort
of cross experience there.

00:59:18.720 --> 00:59:22.320
Markers don't just disappear
when you move into some other

00:59:22.320 --> 00:59:25.398
field, which is a nice
change there as well.

00:59:25.398 --> 00:59:29.198
Any other questions?

00:59:29.198 --> 00:59:34.440
AUDIENCE: Can you have, in the
browser, set up tabs so that

00:59:34.440 --> 00:59:38.498
when you have it on the mobile
they are as tabs, kind

00:59:38.498 --> 00:59:38.758
of has an interface?

00:59:38.758 --> 00:59:41.918
Or its gonna be only the map
and you're gonna have the

00:59:41.918 --> 00:59:45.098
same icons fit for the --

00:59:45.098 --> 00:59:46.718
MANO MARKS: I'm sorry,
I'm not following you.

00:59:47.520 --> 00:59:50.758
AUDIENCE: -- so when
you program and you

00:59:50.758 --> 00:59:51.138
do it like this.

00:59:51.138 --> 00:59:55.138
When you look at it on iPhone
or Android, it's going to be

00:59:55.138 --> 00:59:57.498
just the map, there's
no tabulation?

00:59:57.938 --> 00:59:59.578
It doesn't give another
user interface.

01:00:01.898 --> 01:00:02.858
MANO MARKS: You can.

01:00:02.078 --> 01:00:06.098
So basically you do it
in JavaScript, you can

01:00:06.098 --> 01:00:08.080
detect browser size.

01:00:08.400 --> 01:00:11.820
You can also look at user
agents and get some idea of

01:00:11.820 --> 01:00:15.060
what the sizes that you're
looking for and then

01:00:15.060 --> 01:00:20.618
dynamically change your style
sheets to switch over to say a

01:00:20.618 --> 01:00:24.798
tabbed interface or some other
interface that might give you

01:00:24.798 --> 01:00:29.098
give you a different experience
based on the actual size.

01:00:29.098 --> 01:00:31.658
AUDIENCE: And that would become
active depending on the

01:00:31.658 --> 01:00:32.678
device you're looking at?

01:00:33.678 --> 01:00:37.558
MANO MARKS: Yeah, you would
develop that based on your

01:00:37.558 --> 01:00:38.958
user interface design.

01:00:39.938 --> 01:00:42.958
That's independent
of the Maps API.

01:00:42.958 --> 01:00:44.078
That's all the time
that we have.

01:00:45.638 --> 01:00:48.518
If you have any questions,
feel free to ask Chad or I.

01:00:48.518 --> 01:00:50.198
I'm also going to be sort
of sliding up towards

01:00:50.198 --> 01:00:51.760
the hacker alcove which
is the next session.

01:00:51.760 --> 01:00:51.900
Thanks a lot.

01:00:51.900 --> 01:00:56.900
[APPLAUSE]:

