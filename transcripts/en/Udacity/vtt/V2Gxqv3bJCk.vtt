WEBVTT
Kind: captions
Language: en

00:00:00.400 --> 00:00:03.350
The File Allocation Table format was originally used in

00:00:03.350 --> 00:00:06.200
the late 1970's on floppy disks, and became the

00:00:06.200 --> 00:00:09.460
standard in DOS and early Windows machines. It is

00:00:09.460 --> 00:00:12.950
still commonly used on solid state and flash memory devices

00:00:12.950 --> 00:00:16.750
like this one. As these storage technologies have evolved,

00:00:16.750 --> 00:00:19.200
it has gone through many iterations, but the two key

00:00:19.200 --> 00:00:21.900
ideas have remained the same. The first is that

00:00:21.900 --> 00:00:25.010
each filed is represented as a linked list of blocks.

00:00:25.010 --> 00:00:27.360
Normally when we think of a link list we think of

00:00:27.360 --> 00:00:30.370
the links as being part of the nodes in the list.

00:00:30.370 --> 00:00:33.050
May the last part of the block would give the ID

00:00:33.050 --> 00:00:36.360
of the next block. Here however the links in this list

00:00:36.360 --> 00:00:39.810
are represented in the final allocation table, which is indexed by

00:00:39.810 --> 00:00:43.320
block number. Given the starting block number of the file, I

00:00:43.320 --> 00:00:45.990
can find the next block with a constant time access to

00:00:45.990 --> 00:00:50.300
the file allocation table. A special value, negative one in this example,

00:00:50.300 --> 00:00:52.990
indicates that a block is the last in the chain.

00:00:52.990 --> 00:00:56.070
This file allocation table also contains a bit to say whether

00:00:56.070 --> 00:00:59.230
a block is free or not. In this example, our file

00:00:59.230 --> 00:01:02.950
starts with block two. Looking at the table, I see that

00:01:02.950 --> 00:01:06.780
the next block is six. Looking at six in the table,

00:01:06.780 --> 00:01:09.790
I see that the next block is three. Again going back

00:01:09.790 --> 00:01:12.300
to the table, I see that the next block is five.

00:01:12.300 --> 00:01:15.370
And when I look at five in the table, I see

00:01:15.370 --> 00:01:18.030
that its next has the special value indicating that

00:01:18.030 --> 00:01:20.420
we've reached the end of the file. It's important to

00:01:20.420 --> 00:01:24.540
realize that the file allocation table, or FAT for short,

00:01:24.540 --> 00:01:27.360
stores all the links for all the files. For instance,

00:01:27.360 --> 00:01:31.160
there appears to be another file occupying block four

00:01:31.160 --> 00:01:34.680
and only block four, since that's the end. And also

00:01:34.680 --> 00:01:38.920
one occupying block one. So the file allocation table tells

00:01:38.920 --> 00:01:41.400
us how to glue the blocks of a file together.

00:01:41.400 --> 00:01:43.420
But it doesn't tell us where to start these

00:01:43.420 --> 00:01:46.350
chains of blocks. That is the function of the directory

00:01:46.350 --> 00:01:49.552
tables. Directories as I should say are indeed treated as

00:01:49.552 --> 00:01:53.150
files. And they use something called a Directory Table Format.

00:01:53.150 --> 00:01:55.460
Entries in the table all have the same width

00:01:55.460 --> 00:01:59.580
and contain the essential information, including the file name, the

00:01:59.580 --> 00:02:03.160
starting block, and any other metadata associated with the file,

00:02:03.160 --> 00:02:06.730
such as permissions. The root file directory has a fixed

00:02:06.730 --> 00:02:08.758
address on the disk. So we always know how

00:02:08.758 --> 00:02:12.650
to get started. Let's say that I wanted the content

00:02:12.650 --> 00:02:15.920
of a file / foo / file.txt. I would first

00:02:15.920 --> 00:02:19.320
consult this root directory table. It would tell me that

00:02:19.320 --> 00:02:21.860
there is indeed a directory named foo, and give me

00:02:21.860 --> 00:02:25.130
the starting block of that file. I would then access

00:02:25.130 --> 00:02:28.370
that file on the disc and since it's a directory,

00:02:28.370 --> 00:02:32.480
I would look through there for the file name .txt.

00:02:32.480 --> 00:02:36.340
And it would tell me that the starting block is two. I can then chain together

00:02:36.340 --> 00:02:38.850
the blocks on disk as we did earlier

00:02:38.850 --> 00:02:42.380
using the file allocation table. To summarize then, the

00:02:42.380 --> 00:02:44.870
FAT or file allocation table serves as the

00:02:44.870 --> 00:02:48.120
glue that chains the blocks of a file together.

00:02:48.120 --> 00:02:51.000
The directory files capture the hierarchy and the

00:02:51.000 --> 00:02:53.520
starting blocks for the files and all the metadata.

