WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.790
The last really essential
or salient piece

00:00:02.790 --> 00:00:05.710
for understanding the
mechanics of how Bitcoins work

00:00:05.710 --> 00:00:09.630
is what we call the
transaction block chain.

00:00:09.630 --> 00:00:11.360
So if you recall in
the previous video,

00:00:11.360 --> 00:00:13.740
you had a motivating
example of a user, Alice,

00:00:13.740 --> 00:00:17.710
who wanted to send
some number of Bitcoins

00:00:17.710 --> 00:00:19.310
to another user,
Bob, in the system.

00:00:19.310 --> 00:00:22.760
And what Alice has to do to
initiate that transaction was

00:00:22.760 --> 00:00:25.910
to construct a transaction--
a record of sorts-- that

00:00:25.910 --> 00:00:28.460
contained information
about the transaction

00:00:28.460 --> 00:00:32.159
and that was signed with
Alice's signing key.

00:00:32.159 --> 00:00:35.500
And that actually contained
Alice's public verification key

00:00:35.500 --> 00:00:38.670
and Bob's public
verification key as well.

00:00:38.670 --> 00:00:42.580
And that transaction information
was basically broadcast out,

00:00:42.580 --> 00:00:46.380
as we mentioned, to the
entire Bitcoin ecosystem.

00:00:46.380 --> 00:00:50.640
To all the nodes on the
Bitcoin peer-to-peer network.

00:00:50.640 --> 00:00:52.880
And the various nodes
in the Bitcoin ecosystem

00:00:52.880 --> 00:00:53.920
are going to sit there.

00:00:53.920 --> 00:00:55.680
They're going to
receive information

00:00:55.680 --> 00:00:57.601
about this transaction.

00:00:57.601 --> 00:00:59.600
But they're also going
to be getting information

00:00:59.600 --> 00:01:00.975
about a lot of
other transactions

00:01:00.975 --> 00:01:03.765
that are taking place
around the same time.

00:01:03.765 --> 00:01:05.640
And what these notes
are going to start doing

00:01:05.640 --> 00:01:09.290
is they're going to work on
incorporating this transaction

00:01:09.290 --> 00:01:12.760
record into a ledger of all
transactions that have ever

00:01:12.760 --> 00:01:15.304
taken place in the
Bitcoin system.

00:01:15.304 --> 00:01:17.720
And so what happens is that
each node basically starts off

00:01:17.720 --> 00:01:21.791
by taking all of the previously
unincorporated transactions

00:01:21.791 --> 00:01:22.915
that they've ever received.

00:01:22.915 --> 00:01:25.415
So there's going to be all these
transactions out there that

00:01:25.415 --> 00:01:27.960
have kind of happened
within a given time window.

00:01:27.960 --> 00:01:30.260
And there's all these
Bitcoin transactions kind

00:01:30.260 --> 00:01:31.460
of floating around.

00:01:31.460 --> 00:01:35.591
And these nodes-- these Bitcoin
miners as they're called--

00:01:35.591 --> 00:01:37.340
are going to receive
information about all

00:01:37.340 --> 00:01:39.050
these different
transactions and they're

00:01:39.050 --> 00:01:40.675
going to start working
on incorporating

00:01:40.675 --> 00:01:42.010
those transactions.

00:01:42.010 --> 00:01:47.450
And their first goal is to
collate these transactions

00:01:47.450 --> 00:01:49.840
into what's known as
a transaction block.

00:01:49.840 --> 00:01:52.420
So if you recall
our ledger analogy,

00:01:52.420 --> 00:01:55.270
a single Bitcoin
transaction essentially

00:01:55.270 --> 00:01:59.460
corresponds to a proposed
entry in a ledger.

00:01:59.460 --> 00:02:02.050
In that capacity,
a transaction block

00:02:02.050 --> 00:02:05.360
would basically correspond
to her page in a ledger

00:02:05.360 --> 00:02:07.610
where you have multiple
transactions that

00:02:07.610 --> 00:02:10.669
are listed in that
page of the ledger.

00:02:10.669 --> 00:02:14.680
And the goal-- the Bitcoin
miner's goal-- is to really,

00:02:14.680 --> 00:02:17.380
essentially, to take
that page and get it

00:02:17.380 --> 00:02:20.580
added to the global ledger book,
the global comprehensive ledger

00:02:20.580 --> 00:02:21.755
book.

00:02:21.755 --> 00:02:24.130
Now to engage in this sort of
work, what these nodes will

00:02:24.130 --> 00:02:27.230
basically do is they'll first
take all the transactions that

00:02:27.230 --> 00:02:28.430
have been broadcast out.

00:02:28.430 --> 00:02:29.971
And let's say these
four transactions

00:02:29.971 --> 00:02:31.440
have been broadcast out.

00:02:31.440 --> 00:02:33.780
And they're going to basically
hash these transactions

00:02:33.780 --> 00:02:37.692
in pairs in basically
a tree-like structure.

00:02:37.692 --> 00:02:39.150
They'll take these
two transactions

00:02:39.150 --> 00:02:41.135
and they'll apply a
[? graphic ?] hash function

00:02:41.135 --> 00:02:42.310
to those details.

00:02:42.310 --> 00:02:44.530
And we'll get a
[? cars ?] flying digest,

00:02:44.530 --> 00:02:46.405
goes the same for these
two, and then they'll

00:02:46.405 --> 00:02:48.200
take these two
digests and hash them

00:02:48.200 --> 00:02:51.020
to get a single digest value.

00:02:51.020 --> 00:02:57.320
And this digest effectively
encodes all of the transactions

00:02:57.320 --> 00:02:59.530
that were previously
unincorporated

00:02:59.530 --> 00:03:03.810
and that were received by
these individual nodes.

00:03:03.810 --> 00:03:05.460
And then this
digest is basically

00:03:05.460 --> 00:03:10.110
going to be combined with
the hash of the transaction

00:03:10.110 --> 00:03:12.460
block that was previously
accepted by the network.

00:03:12.460 --> 00:03:14.770
So you can imagine if
there is-- the network

00:03:14.770 --> 00:03:16.946
will have a series
of transaction blocks

00:03:16.946 --> 00:03:18.195
that were previously accepted.

00:03:18.195 --> 00:03:20.200
And in fact, every
transaction block

00:03:20.200 --> 00:03:22.541
as I mentioned just
now incorporates

00:03:22.541 --> 00:03:23.790
the previous transaction lock.

00:03:23.790 --> 00:03:25.800
So this transaction
block will incorporate

00:03:25.800 --> 00:03:28.419
the one that was
used just before it,

00:03:28.419 --> 00:03:30.210
and this transaction
block will incorporate

00:03:30.210 --> 00:03:31.626
the one that was
used just for it.

00:03:31.626 --> 00:03:33.030
And it's going to
go on literally

00:03:33.030 --> 00:03:35.270
until the beginning
of Bitcoin times.

00:03:35.270 --> 00:03:37.640
So this is really
where the Bitcoin--

00:03:37.640 --> 00:03:40.416
the beginning of time for
the Bitcoin system, this

00:03:40.416 --> 00:03:45.250
is just time equals
zero for Bitcoin.

00:03:45.250 --> 00:03:47.430
And they're going to
take this last block

00:03:47.430 --> 00:03:49.380
and they're going
to, essentially now,

00:03:49.380 --> 00:03:54.810
take this last block and combine
it with this most recent block.

00:03:54.810 --> 00:03:57.780
And so if you imagine that
you have now, not just

00:03:57.780 --> 00:04:00.930
an individual block, because
each individual block

00:04:00.930 --> 00:04:02.330
incorporates the
block before it.

00:04:02.330 --> 00:04:05.120
We're not dealing anymore with
an isolated or distinct block

00:04:05.120 --> 00:04:09.060
of transactions, but rather
with a chain of blocks

00:04:09.060 --> 00:04:12.320
that starts literally at the
beginning of the entire Bitcoin

00:04:12.320 --> 00:04:13.940
system.

00:04:13.940 --> 00:04:15.642
Now when you do all
of this combination,

00:04:15.642 --> 00:04:17.100
at the end of the
day, you're going

00:04:17.100 --> 00:04:19.420
to do some cryptographic
hashing and you basically

00:04:19.420 --> 00:04:21.279
will end up with a
sequence of numbers.

00:04:21.279 --> 00:04:22.654
And this sequence
of numbers will

00:04:22.654 --> 00:04:25.930
be derived by incorporating
all these blocks together.

00:04:25.930 --> 00:04:27.470
You'll get a
sequence of numbers,

00:04:27.470 --> 00:04:28.970
and what we're going
to basically do

00:04:28.970 --> 00:04:32.750
is take this sequence of numbers
and convert that sequence

00:04:32.750 --> 00:04:38.020
of numbers into a challenge
in a proof of work protocol.

00:04:38.020 --> 00:04:40.130
Now I did a separate video
on proof of protocols,

00:04:40.130 --> 00:04:41.880
I would encourage you
to watch that if you

00:04:41.880 --> 00:04:44.525
want to get a better
sense for how they work.

00:04:44.525 --> 00:04:48.730
But the short of it is that
what the Bitcoin mining node has

00:04:48.730 --> 00:04:52.490
to do at this point is he'll
take that Bitcoin-- he'll take

00:04:52.490 --> 00:04:54.310
the challenge and
he'll have to come up

00:04:54.310 --> 00:04:57.380
with a separate sequence of
numbers-- which we typically

00:04:57.380 --> 00:05:00.314
termed the proof, or
the proof of work--

00:05:00.314 --> 00:05:01.730
and this proof of
work has to have

00:05:01.730 --> 00:05:03.375
a very specific
mathematical property.

00:05:03.375 --> 00:05:05.000
And what that
property entails is

00:05:05.000 --> 00:05:07.295
that if you take the
challenge numbers,

00:05:07.295 --> 00:05:08.670
and you take these
proof numbers,

00:05:08.670 --> 00:05:10.570
and you concatenate
them together,

00:05:10.570 --> 00:05:14.010
and you make them the input
to a cryptographic hash

00:05:14.010 --> 00:05:17.290
function, the
resulting output has

00:05:17.290 --> 00:05:21.000
to have a large prefix
of zeroes And that

00:05:21.000 --> 00:05:23.220
doesn't have to be all
zeroes, but a large portion

00:05:23.220 --> 00:05:29.140
of the beginning-- the
prefix-- has to be all zeroes

00:05:29.140 --> 00:05:31.330
And if you think about
for a moment, given

00:05:31.330 --> 00:05:32.840
that cryptographic
hash functions,

00:05:32.840 --> 00:05:36.540
given that their output
tends to look fairly random,

00:05:36.540 --> 00:05:38.950
it's unlikely in
any given instance

00:05:38.950 --> 00:05:41.764
that you are going
to see a proof.

00:05:41.764 --> 00:05:43.180
A proposed proof
that provides you

00:05:43.180 --> 00:05:45.860
with a large string of
zeroes at the beginning.

00:05:45.860 --> 00:05:49.030
And so what the Bitcoin miner
will have to do is on average,

00:05:49.030 --> 00:05:50.970
he'll have to try out
many possible choices

00:05:50.970 --> 00:05:54.335
for these proof numbers
until he finally gets lucky

00:05:54.335 --> 00:05:55.710
and he stumbles
upon one that has

00:05:55.710 --> 00:06:00.050
this kind of off-beat or
strange statistical property.

00:06:00.050 --> 00:06:02.980
And the actual difficulty of
finding these proof numbers,

00:06:02.980 --> 00:06:06.160
as you can tell, is
dependent on exactly how

00:06:06.160 --> 00:06:08.700
many leading zeroes
are required.

00:06:08.700 --> 00:06:12.700
The more leading zeroes
you require in this proof,

00:06:12.700 --> 00:06:14.925
the longer it takes to
actually solve a problem.

00:06:14.925 --> 00:06:17.230
The longer it takes to
actually come up with a proof

00:06:17.230 --> 00:06:19.580
that works with respect
to a given challenge.

00:06:19.580 --> 00:06:21.220
The fewer zeroes
that you require,

00:06:21.220 --> 00:06:22.670
the less time it will take.

00:06:22.670 --> 00:06:26.299
Now the exact number of
bits of zero bits required

00:06:26.299 --> 00:06:28.590
in the Bitcoin protocol
actually does change over time.

00:06:28.590 --> 00:06:29.920
It gets calibrated.

00:06:29.920 --> 00:06:32.400
And it's designed
to not, on average,

00:06:32.400 --> 00:06:35.840
the average time taken
across the whole system

00:06:35.840 --> 00:06:38.200
should be about 10 minutes.

00:06:38.200 --> 00:06:41.970
So you want to take about 10
minutes for at least one node

00:06:41.970 --> 00:06:45.160
to come up with a valid
proof, but keep in mind

00:06:45.160 --> 00:06:48.570
that a lot of nodes are working
on this proof concurrently.

00:06:48.570 --> 00:06:50.960
All right, now once this
proof of work is found,

00:06:50.960 --> 00:06:54.960
let's say that the proof of
work is eventually found.

00:06:54.960 --> 00:06:57.360
The Bitcoin miner will
announce the results

00:06:57.360 --> 00:06:58.912
to the overall
peer-to-peer network.

00:06:58.912 --> 00:07:01.370
He's going to take this proof
and really all the challenge,

00:07:01.370 --> 00:07:03.982
and so on, and he's going to
announce it to all the notes.

00:07:03.982 --> 00:07:05.940
And they're now going to
see that, hey, there's

00:07:05.940 --> 00:07:07.660
this proof out there,
somebody found it.

00:07:07.660 --> 00:07:09.420
Let's drop the other
stuff we were doing

00:07:09.420 --> 00:07:12.230
and we're going to now
start to work and build

00:07:12.230 --> 00:07:13.510
on top of this new proof.

00:07:13.510 --> 00:07:16.160
Remember, this new proof of
this new challenge, these all

00:07:16.160 --> 00:07:18.722
incorporate all the
previous transaction blocks.

00:07:18.722 --> 00:07:20.180
Really, what they're
starting to do

00:07:20.180 --> 00:07:25.550
is starting to work off of a
new, updated transaction block

00:07:25.550 --> 00:07:27.100
chain.

00:07:27.100 --> 00:07:30.010
And they're going to incorporate
any new unincorporated

00:07:30.010 --> 00:07:32.742
transactions into that
new transaction blocking.

00:07:32.742 --> 00:07:34.950
Now there are a couple of
points I want to make here.

00:07:34.950 --> 00:07:38.380
So first of all, as part of
constructing these transactions

00:07:38.380 --> 00:07:40.610
blocks, and really as
part of incorporating them

00:07:40.610 --> 00:07:44.040
into a transaction block
chain, Bitcoin miners

00:07:44.040 --> 00:07:48.320
are actually allowed--
one little special treat--

00:07:48.320 --> 00:07:53.210
they are allowed to include
in that transaction block--

00:07:53.210 --> 00:07:54.750
a special node for themselves.

00:07:54.750 --> 00:07:57.260
And this node will
basically be a little reward

00:07:57.260 --> 00:08:00.774
if they can get-- and
let me use the greenish

00:08:00.774 --> 00:08:02.190
color for that
reward-- they could

00:08:02.190 --> 00:08:06.520
take the first block,
the first transaction

00:08:06.520 --> 00:08:09.247
item, the first
transaction record,

00:08:09.247 --> 00:08:11.330
and they can put in that
transaction record-- they

00:08:11.330 --> 00:08:14.570
can assign a reward
to themselves.

00:08:14.570 --> 00:08:18.170
Now the amount of that
reward will change over time.

00:08:18.170 --> 00:08:21.630
But I do want to point out what
this transaction is typically

00:08:21.630 --> 00:08:27.060
called is called a coin-based
transaction, or a generation

00:08:27.060 --> 00:08:27.740
transaction.

00:08:27.740 --> 00:08:31.810
This is how new coins get
included in the Bitcoin system.

00:08:31.810 --> 00:08:34.890
So whenever a minor
succeeds in coming up

00:08:34.890 --> 00:08:38.710
with a proof as part of
that he'll have been allowed

00:08:38.710 --> 00:08:41.419
to come up with his own
transaction to reward himself,

00:08:41.419 --> 00:08:43.299
a special little
reward, for extending

00:08:43.299 --> 00:08:45.960
the effort necessary to
come up with this proof

00:08:45.960 --> 00:08:49.390
and for doing all this
work associated with adding

00:08:49.390 --> 00:08:53.070
a new transaction block to
the existing transaction

00:08:53.070 --> 00:08:55.281
block chain for Bitcoin.

00:08:55.281 --> 00:08:56.530
And I think that's reasonable.

00:08:56.530 --> 00:09:00.020
After all these notes are using
a lot of computational power

00:09:00.020 --> 00:09:04.095
to come up with these
proofs and if they're

00:09:04.095 --> 00:09:05.970
using computational
power that must mean that

00:09:05.970 --> 00:09:07.386
somewhere along
the line, somebody

00:09:07.386 --> 00:09:09.584
is spending money on
electricity and so on.

00:09:09.584 --> 00:09:11.500
Now, I also want to point
out that in addition

00:09:11.500 --> 00:09:15.330
to this coin-base
award, the nodes who're

00:09:15.330 --> 00:09:17.780
doing the Bitcoin mining,
the ones who succeed.

00:09:17.780 --> 00:09:19.680
Also get to collect
the transaction

00:09:19.680 --> 00:09:21.850
fees that were specified
in the transaction records.

00:09:21.850 --> 00:09:26.115
If you recall, a person issuing
a transaction in Bitcoin

00:09:26.115 --> 00:09:30.310
can allocate or set aside a
certain amount of money-- maybe

00:09:30.310 --> 00:09:32.590
it can be a Bitcoin or
a fractional Bitcoin--

00:09:32.590 --> 00:09:36.570
for the node who
succeeds in coming up

00:09:36.570 --> 00:09:38.145
with the actual
proof of working,

00:09:38.145 --> 00:09:40.740
and effectively the
node that succeeds

00:09:40.740 --> 00:09:42.310
in being able to
add that transaction

00:09:42.310 --> 00:09:45.930
to the overall bitcoin
transaction block chain.

00:09:45.930 --> 00:09:47.810
And so that node that
does the work succeeds,

00:09:47.810 --> 00:09:49.970
gets a reward, another
transaction fee.

00:09:49.970 --> 00:09:52.510
Now this could actually
become quite large

00:09:52.510 --> 00:09:56.071
because the node will not
only get the transaction

00:09:56.071 --> 00:09:57.195
fee before one transaction.

00:09:57.195 --> 00:10:00.372
You'll get the transaction
fee for all the transactions

00:10:00.372 --> 00:10:01.830
that appeared in
the current block.

00:10:01.830 --> 00:10:03.538
It's going to give
the aggregate over all

00:10:03.538 --> 00:10:06.512
these different transactions.

00:10:06.512 --> 00:10:07.970
Now the second
point I want to make

00:10:07.970 --> 00:10:11.250
is that it might be
possible for two nodes

00:10:11.250 --> 00:10:13.750
to solve the proof of work
independently of each other.

00:10:13.750 --> 00:10:16.090
And somehow, they
both end up trying

00:10:16.090 --> 00:10:18.460
to add to that existing
chain in some ways.

00:10:18.460 --> 00:10:21.240
You make get some weird
chain forking happening.

00:10:21.240 --> 00:10:24.230
If that happens, the peers
in the Bitcoin network

00:10:24.230 --> 00:10:29.521
will basically break a tie
by sticking with the longest

00:10:29.521 --> 00:10:30.020
chain.

00:10:30.020 --> 00:10:31.800
And by longest, I
don't mean the one

00:10:31.800 --> 00:10:34.280
that has to be the most
transactions in it.

00:10:34.280 --> 00:10:37.280
I really need the one
that has the highest

00:10:37.280 --> 00:10:39.925
aggregate difficulty
associated with that underlying

00:10:39.925 --> 00:10:43.640
proof of work protocol in each
of the transaction blocks.

00:10:43.640 --> 00:10:46.300
And we'll basically look at
the total amount of effort

00:10:46.300 --> 00:10:49.210
that was required to generate
that chain with regard

00:10:49.210 --> 00:10:50.270
to that proof of work.

00:10:50.270 --> 00:10:53.779
And whichever chain has
the most work associated

00:10:53.779 --> 00:10:55.320
with it is a chain
that's sacrosanct,

00:10:55.320 --> 00:10:57.566
it's a chain that
everybody will accept.

00:10:57.566 --> 00:10:59.190
Now you may get some
word discrepancies

00:10:59.190 --> 00:11:01.040
because of network
latency issues and so on.

00:11:01.040 --> 00:11:04.010
But the idea is that after maybe
a couple of rounds when there

00:11:04.010 --> 00:11:06.130
are ties, they'll quickly
resolve themselves

00:11:06.130 --> 00:11:08.350
as long as most of the
nodes are being honest

00:11:08.350 --> 00:11:12.589
and really stick to the
implementation of the protocol.

00:11:12.589 --> 00:11:14.630
Now since Bitcoin miners
are generating bitcoins,

00:11:14.630 --> 00:11:17.046
I think there's an interesting
question that comes up here

00:11:17.046 --> 00:11:19.890
which is, how is the Bitcoin
money supply, controlled,

00:11:19.890 --> 00:11:20.830
and how is it managed?

00:11:20.830 --> 00:11:25.170
And I'm going to talk about that
concept in a subsequent video.

