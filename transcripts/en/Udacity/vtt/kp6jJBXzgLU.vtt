WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Now we're going to talk about something that's pretty important in practice,

00:00:02.000 --> 00:00:07.000
and that's creating software that can be tested effectively.

00:00:07.000 --> 00:00:09.000
And we're going to start off with things

00:00:09.000 --> 00:00:12.000
that are kind of maybe a little bit fuzzy and unquantifiable.

00:00:12.000 --> 00:00:14.000
And we'll get towards more very specific 

00:00:14.000 --> 00:00:16.000
recommendations a little bit later.

00:00:16.000 --> 00:00:18.000
And so I'm going to start off with some sort of generic

00:00:18.000 --> 00:00:20.000
recommendations, and first, it's to write clean code,

00:00:20.000 --> 00:00:22.000
and, of course, we all know that's pretty much impossible.

00:00:22.000 --> 00:00:25.000
So when it's not possible to write clean code in the first place, 

00:00:25.000 --> 00:00:27.000
we need to refactor code whenever necessary.

00:00:27.000 --> 00:00:29.000
So third, of any software module that we're writing,

00:00:29.000 --> 00:00:31.000
we should always be able to clearly describe

00:00:31.000 --> 00:00:33.000
what it is that this module does

00:00:33.000 --> 00:00:35.000
and exactly how it interacts with other code.

00:00:35.000 --> 00:00:37.000
If we find ourselves in a situation where we can't

00:00:37.000 --> 00:00:40.000
clearly describe all of the dependencies

00:00:40.000 --> 00:00:42.000
that our module has with other modules in the system,

00:00:42.000 --> 00:00:44.000
then we're probably in a situation where we've

00:00:44.000 --> 00:00:46.000
created software that can't be tested effectively.

00:00:46.000 --> 00:00:49.000
Code should never have any more threads

00:00:49.000 --> 00:00:51.000
than it absolutely needs to get its work done.

00:00:51.000 --> 00:00:54.000
The software should not be a swamp of global variables.

00:00:54.000 --> 00:00:56.000
Global variables make software really hard to test,

00:00:56.000 --> 00:00:59.000
because global variables are implicitly inputs

00:00:59.000 --> 00:01:01.000
to any software that reads the global variables.

00:01:01.000 --> 00:01:03.000
And so, in addition to testing software

00:01:03.000 --> 00:01:05.000
on its explicit inputs, if we have a lot of

00:01:05.000 --> 00:01:07.000
global variables, we're going to be forced to test

00:01:07.000 --> 00:01:09.000
a lot of values of those, and this 

00:01:09.000 --> 00:01:11.000
can really make testing difficult.  Our code--

00:01:11.000 --> 00:01:13.000
and this applies probably more to C and C++

00:01:13.000 --> 00:01:17.000
and Java than to Python--shouldn't be a soup

00:01:17.000 --> 00:01:20.000
of references and pointers, because these are another way

00:01:20.000 --> 00:01:22.000
to create unintentional connections between different parts of the code,

00:01:22.000 --> 00:01:24.000
breaking modularity and again making it

00:01:24.000 --> 00:01:26.000
really hard to test our code.

00:01:26.000 --> 00:01:28.000
Most of the time, the modules that we'll create

00:01:28.000 --> 00:01:30.000
should have unit tests, and when applicable--

00:01:30.000 --> 00:01:32.000
that is to say when our modules are interfacing

00:01:32.000 --> 00:01:34.000
with other modules that might fail--

00:01:34.000 --> 00:01:36.000
we should add support for fault injection.

00:01:36.000 --> 00:01:39.000
Finally, testable software often contains

00:01:39.000 --> 00:01:41.000
a large number of assertions,

00:01:41.000 --> 00:01:43.000
and so now we're going to expand on that topic.

