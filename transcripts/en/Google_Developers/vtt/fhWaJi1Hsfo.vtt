WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.489
[MUSIC PLAYING]

00:00:14.490 --> 00:00:15.500
JAREK WILKIEWICZ: Hello,
and welcome to

00:00:15.500 --> 00:00:17.110
YouTube Developers Live.

00:00:17.110 --> 00:00:19.070
I have an exciting show
for you today.

00:00:19.070 --> 00:00:21.080
In London, we have
Ross McIlroy.

00:00:21.080 --> 00:00:22.660
How are we doing, Ross?

00:00:22.660 --> 00:00:23.030
ROSS MCILROY: Doing good.

00:00:23.030 --> 00:00:23.190
Thanks.

00:00:23.190 --> 00:00:24.250
How are you?

00:00:24.250 --> 00:00:25.670
JAREK WILKIEWICZ: Doing great.

00:00:25.670 --> 00:00:27.440
And my name is Jarek
Wilkiewicz.

00:00:27.440 --> 00:00:29.430
I work on YouTube Developer
Relations.

00:00:29.430 --> 00:00:33.090
Today, we'll talk about the
YouTube Android Player API.

00:00:33.090 --> 00:00:36.430
If you have watched our Google
I/O presentation, you might

00:00:36.430 --> 00:00:40.500
actually recognize Ross, who was
one of the presenters at

00:00:40.500 --> 00:00:41.420
that session.

00:00:41.420 --> 00:00:45.260
I understand you've been quite
busy since Google I/O, Ross.

00:00:45.260 --> 00:00:46.190
That was earlier this year.

00:00:46.190 --> 00:00:48.950
Can you tell us what
you've been up to?

00:00:48.950 --> 00:00:49.340
ROSS MCILROY: Sure.

00:00:49.340 --> 00:00:52.030
So we've been working with
some trusted testers on

00:00:52.030 --> 00:00:55.570
refining the API, making sure
it works well, adding some

00:00:55.570 --> 00:00:57.940
missing features, and making
sure that all of the bits are

00:00:57.940 --> 00:01:00.940
in place to make sure we can
enable you to play all the

00:01:00.940 --> 00:01:04.440
YouTube content embedded
within your app.

00:01:04.440 --> 00:01:07.070
So just final polishing
and ready for launch.

00:01:07.070 --> 00:01:07.930
JAREK WILKIEWICZ: Great.

00:01:07.930 --> 00:01:11.690
So I know that you have built
a set of demos to help

00:01:11.690 --> 00:01:14.900
application developers
use the API.

00:01:14.900 --> 00:01:17.570
Should we look at a couple of
the examples that are included

00:01:17.570 --> 00:01:19.190
as a part of the release?

00:01:19.190 --> 00:01:20.440
ROSS MCILROY: Sure.

00:01:22.090 --> 00:01:22.380
JAREK WILKIEWICZ: OK.

00:01:22.380 --> 00:01:24.410
Let's start with
the video wall.

00:01:24.410 --> 00:01:26.800
I'll launch it right now.

00:01:26.800 --> 00:01:27.270
ROSS MCILROY: Sure.

00:01:27.270 --> 00:01:31.880
So the video is an example of
what you might be able to do

00:01:31.880 --> 00:01:33.640
with the app by putting all the

00:01:33.640 --> 00:01:35.810
components of the API together.

00:01:35.810 --> 00:01:39.760
So it's a simple demo of
thumbnails flipping.

00:01:39.760 --> 00:01:42.232
And then one of the thumbnails
will flip in

00:01:42.232 --> 00:01:44.010
and turn into a video.

00:01:44.010 --> 00:01:47.210
So that shows you how you can
embed the videos within your

00:01:47.210 --> 00:01:50.325
UI and play and pause them
programmatically.

00:01:53.220 --> 00:01:54.130
JAREK WILKIEWICZ: Great.

00:01:54.130 --> 00:01:59.830
And moving along, there is
a simple player view demo

00:01:59.830 --> 00:02:00.640
included as well.

00:02:00.640 --> 00:02:04.620
Can you tell us when one might
want to include this code?

00:02:04.620 --> 00:02:04.970
ROSS MCILROY: Sure.

00:02:04.970 --> 00:02:07.250
So the simple player view is
just the simplest possible

00:02:07.250 --> 00:02:10.350
approach to using the
API with embedding a

00:02:10.350 --> 00:02:12.100
video into your app.

00:02:12.100 --> 00:02:13.760
So this is just embedding
a simple player

00:02:13.760 --> 00:02:14.960
view into the UI.

00:02:14.960 --> 00:02:18.346
I have nothing else apart from
text here, but you could put

00:02:18.346 --> 00:02:20.030
whatever you want above.

00:02:20.030 --> 00:02:22.370
And it's just showing how simple
it is to embed the

00:02:22.370 --> 00:02:23.800
player view.

00:02:23.800 --> 00:02:26.520
We also have the simple player
fragment, which is basically

00:02:26.520 --> 00:02:29.830
the same demo but using YouTube
player fragment as

00:02:29.830 --> 00:02:31.480
opposed to player view.

00:02:31.480 --> 00:02:34.270
You might want to use
that if you need to

00:02:34.270 --> 00:02:38.120
extend a different activity.

00:02:38.120 --> 00:02:40.550
For the player view, you need to
extend our activity that we

00:02:40.550 --> 00:02:42.240
provide as part of the API.

00:02:42.240 --> 00:02:44.660
The fragment, you could extend
any activity you like and just

00:02:44.660 --> 00:02:46.690
embed the fragment.

00:02:46.690 --> 00:02:47.160
JAREK WILKIEWICZ: Great.

00:02:47.160 --> 00:02:50.630
And custom player controls.

00:02:50.630 --> 00:02:55.400
ROSS MCILROY: So this is just
a demo of wiring up UI

00:02:55.400 --> 00:02:58.920
controls to the programmatic
elements of the player.

00:02:58.920 --> 00:03:01.510
So you can play/plause with the
buttons, which are under

00:03:01.510 --> 00:03:02.660
your control.

00:03:02.660 --> 00:03:05.350
And underneath, we have an event
log, which is showing

00:03:05.350 --> 00:03:08.590
the various callbacks that you
can register and listen for,

00:03:08.590 --> 00:03:12.290
for example, playing videos,
seeing when the video's ended,

00:03:12.290 --> 00:03:14.910
when the user has pressed
pause, et cetera.

00:03:14.910 --> 00:03:15.280
JAREK WILKIEWICZ: Great.

00:03:15.280 --> 00:03:18.120
And I understand you've made
some improvements to

00:03:18.120 --> 00:03:20.120
full-screen handling, which is
something that is always very

00:03:20.120 --> 00:03:21.520
tricky for developers.

00:03:21.520 --> 00:03:25.360
Custom full-screen handling
illustrates that one.

00:03:25.360 --> 00:03:25.790
ROSS MCILROY: It does.

00:03:25.790 --> 00:03:26.185
Yes.

00:03:26.185 --> 00:03:29.270
And by default, full screen is
a dialogue which appears on

00:03:29.270 --> 00:03:31.635
top of your activity.

00:03:31.635 --> 00:03:35.370
And so that works very well,
but it sometimes introduces

00:03:35.370 --> 00:03:36.510
some buffering.

00:03:36.510 --> 00:03:41.130
So custom full screen shows our
best practices on how to

00:03:41.130 --> 00:03:41.910
deal with full screen.

00:03:41.910 --> 00:03:46.960
And so in that case, you have to
manage the [? relay out ?]

00:03:46.960 --> 00:03:48.430
to full screen yourself.

00:03:48.430 --> 00:03:50.670
But by doing that, you get a
really smooth transition to

00:03:50.670 --> 00:03:52.200
full screen with no buffering.

00:03:55.400 --> 00:03:55.980
JAREK WILKIEWICZ: Indeed.

00:03:55.980 --> 00:04:01.090
And there is a demo that shows
you how you can actually

00:04:01.090 --> 00:04:05.710
include full screen in your
application here.

00:04:05.710 --> 00:04:09.080
Is that the overlay
action bar demo?

00:04:09.080 --> 00:04:09.330
ROSS MCILROY: Yes.

00:04:09.330 --> 00:04:12.210
So the overlay action bar demo
is just showing how you can

00:04:12.210 --> 00:04:15.710
overlay an action bar on top of
the player [? palettes ?]

00:04:15.710 --> 00:04:17.715
in full-screen mode, as
long as the action

00:04:17.715 --> 00:04:21.035
bar has overlay set.

00:04:21.035 --> 00:04:24.100
And so this is to enable you
to, for example, have some

00:04:24.100 --> 00:04:27.070
custom buttons in the action bar
to enable some control for

00:04:27.070 --> 00:04:29.220
your app and [? palettes ?]
in full screen.

00:04:29.220 --> 00:04:34.330
Because we don't need allow
you to overlay any custom

00:04:34.330 --> 00:04:36.013
views on top of the player
itself other

00:04:36.013 --> 00:04:37.600
than the action bar.

00:04:37.600 --> 00:04:37.890
JAREK WILKIEWICZ: Right.

00:04:37.890 --> 00:04:41.360
And then I've seen applications
performing video

00:04:41.360 --> 00:04:42.570
playback into a lightbox.

00:04:42.570 --> 00:04:45.440
Which demo actually shows
that feature?

00:04:45.440 --> 00:04:47.750
ROSS MCILROY: So that's the
standalone player demo.

00:04:47.750 --> 00:04:50.030
And so that one's just showing
a different approach to

00:04:50.030 --> 00:04:53.020
playing video, which is not
embedding it in your UI but

00:04:53.020 --> 00:04:55.240
instead launching a
separate activity.

00:04:55.240 --> 00:04:57.520
So it's much simpler to do,
but you don't get as much

00:04:57.520 --> 00:04:59.110
flexibility or control.

00:04:59.110 --> 00:05:01.090
So if you click the lightbox
mode, and you play the video,

00:05:01.090 --> 00:05:04.180
you can see the video
appearing above

00:05:04.180 --> 00:05:06.330
the underlying activity.

00:05:06.330 --> 00:05:08.470
So that's a good option if you
want to just show a quick

00:05:08.470 --> 00:05:11.103
preview of a video alongside
your UI.

00:05:19.484 --> 00:05:19.990
JAREK WILKIEWICZ: OK.

00:05:19.990 --> 00:05:20.280
Great.

00:05:20.280 --> 00:05:22.660
And these examples are packaged
together as a part of

00:05:22.660 --> 00:05:25.355
the API release, right?

00:05:25.355 --> 00:05:26.810
ROSS MCILROY: Yeah,
that's right.

00:05:26.810 --> 00:05:28.265
We provide them in
the library.

00:05:28.265 --> 00:05:29.240
So you can get going.

00:05:29.240 --> 00:05:29.530
JAREK WILKIEWICZ: OK.

00:05:29.530 --> 00:05:32.710
Let's walk through the API.

00:05:32.710 --> 00:05:35.030
So can you tell us a little more
about what is the process

00:05:35.030 --> 00:05:39.380
of integration between this
API and one's Android

00:05:39.380 --> 00:05:40.720
application?

00:05:40.720 --> 00:05:41.470
ROSS MCILROY: Sure.

00:05:41.470 --> 00:05:45.840
So once you the zip, you'll
have the sample apps and a

00:05:45.840 --> 00:05:51.260
library directory, which
contains the JAR of the API.

00:05:51.260 --> 00:05:55.720
And so to embed the API in your
own application, all you

00:05:55.720 --> 00:05:58.940
need to do is take that JAR,
copy it to the LIBS directory

00:05:58.940 --> 00:06:00.320
in your project root.

00:06:00.320 --> 00:06:04.050
And if you have any clips-- or
[INAUDIBLE], I think, as

00:06:04.050 --> 00:06:05.750
well-- it will automatically
add that

00:06:05.750 --> 00:06:07.480
to your Java classpath.

00:06:07.480 --> 00:06:09.110
And then you can just use
it straight away.

00:06:09.110 --> 00:06:12.550
It's already in your app.

00:06:12.550 --> 00:06:18.120
One thing you'll need to do is
register for a developer key

00:06:18.120 --> 00:06:20.860
on the Google APIs console.

00:06:20.860 --> 00:06:23.820
And so once you've done that,
you can initialize the API and

00:06:23.820 --> 00:06:24.780
make use of it.

00:06:24.780 --> 00:06:25.520
JAREK WILKIEWICZ: Great.

00:06:25.520 --> 00:06:28.740
And then there's actually four
different ways in which video

00:06:28.740 --> 00:06:32.640
playback can be incorporated
into your Android application.

00:06:32.640 --> 00:06:34.660
Can you walk us through
the API?

00:06:34.660 --> 00:06:37.980
I know we have Java docs with
all this information.

00:06:37.980 --> 00:06:40.210
Maybe real quickly
show us what are

00:06:40.210 --> 00:06:41.750
kind of the key classes.

00:06:41.750 --> 00:06:42.250
ROSS MCILROY: Sure.

00:06:42.250 --> 00:06:45.620
So the final demo we
showed there was

00:06:45.620 --> 00:06:46.510
the standalone player.

00:06:46.510 --> 00:06:49.370
So this is the class for
the standalone player.

00:06:49.370 --> 00:06:50.380
You can see the code here.

00:06:50.380 --> 00:06:52.180
We have an example fragment.

00:06:52.180 --> 00:06:56.700
It's just two lines of code to
create that standalone player.

00:06:56.700 --> 00:06:59.170
Just pass in your video ID
that you want to play.

00:06:59.170 --> 00:07:01.620
And there's various different
intents you can create with

00:07:01.620 --> 00:07:05.370
this class to play videos
or playlists or use

00:07:05.370 --> 00:07:06.690
the lightbox mode.

00:07:06.690 --> 00:07:09.570
And then once you start the
intent, that will throw up the

00:07:09.570 --> 00:07:11.680
activity, which will
play the video.

00:07:11.680 --> 00:07:13.670
So that's a really simple
but less flexible

00:07:13.670 --> 00:07:15.680
way of playing videos.

00:07:15.680 --> 00:07:18.980
If you want to really embed the
YouTube videos into your

00:07:18.980 --> 00:07:23.300
UI, we provide these
three classes.

00:07:23.300 --> 00:07:26.240
There's the player view, the
player fragment, and the

00:07:26.240 --> 00:07:27.690
player support fragment.

00:07:27.690 --> 00:07:30.210
So they all effectively
act in the same way.

00:07:30.210 --> 00:07:36.870
They provide a view, which you
can inflate in your app UI or

00:07:36.870 --> 00:07:38.120
programmatically instantiate.

00:07:40.770 --> 00:07:47.120
Once you have that, you call the
initialize method on that

00:07:47.120 --> 00:07:50.430
UI element, pass your
developer key on

00:07:50.430 --> 00:07:52.030
InitializeListener.

00:07:52.030 --> 00:07:54.600
And then you'll get a call
back through your own

00:07:54.600 --> 00:07:57.570
InitializeListener about when
you've succeeded in

00:07:57.570 --> 00:07:59.440
initializing the API.

00:07:59.440 --> 00:08:02.380
And with that callback, you'll
get one of these YouTube

00:08:02.380 --> 00:08:04.350
player objects.

00:08:04.350 --> 00:08:07.980
And so the YouTube player object
is basically the main

00:08:07.980 --> 00:08:09.930
object in the whole API.

00:08:09.930 --> 00:08:13.980
So this allows you to control
video playback in those UI

00:08:13.980 --> 00:08:16.040
player views or player
fragments.

00:08:16.040 --> 00:08:19.860
And so you can load videos,
queue videos, skip between

00:08:19.860 --> 00:08:23.380
playlist elements, and seek the
video, do all the things

00:08:23.380 --> 00:08:26.510
you would expect from
such an API.

00:08:26.510 --> 00:08:30.850
And also register for various
callback events, playback

00:08:30.850 --> 00:08:34.580
events, or changes in
the player state

00:08:34.580 --> 00:08:38.090
or full-screen events.

00:08:38.090 --> 00:08:43.490
And so the final way you can
play YouTube videos using this

00:08:43.490 --> 00:08:46.960
API is through the YouTube
intents class.

00:08:46.960 --> 00:08:49.910
And so this is basically just
a convenience mechanism to

00:08:49.910 --> 00:08:54.170
enable you to create intents
which will launch the YouTube

00:08:54.170 --> 00:08:56.350
Android application itself.

00:08:56.350 --> 00:08:58.310
So a lot of people have been
using this in the past to play

00:08:58.310 --> 00:09:02.200
videos by building their own
YouTube URLs and passing that

00:09:02.200 --> 00:09:03.050
as the intent.

00:09:03.050 --> 00:09:05.110
This just creates a standardized
way of doing that

00:09:05.110 --> 00:09:08.760
with various options for
starting the video in full

00:09:08.760 --> 00:09:13.100
screen or playing playlists or
opening a user's activity in

00:09:13.100 --> 00:09:14.350
the app itself.

00:09:16.430 --> 00:09:18.220
JAREK WILKIEWICZ: YouTube
standalone player is the

00:09:18.220 --> 00:09:20.290
simplest way to get started.

00:09:20.290 --> 00:09:22.620
Player view and player fragment
will alone one to

00:09:22.620 --> 00:09:24.930
build a more sophisticated
user interface.

00:09:24.930 --> 00:09:29.010
And then YouTube intents class
basically wraps the intents

00:09:29.010 --> 00:09:32.150
that are available from
the YouTube app.

00:09:32.150 --> 00:09:35.486
And it just invokes the app
from one's application.

00:09:35.486 --> 00:09:35.982
ROSS MCILROY: Yeah.

00:09:35.982 --> 00:09:36.480
Exactly.

00:09:36.480 --> 00:09:37.170
JAREK WILKIEWICZ: Great.

00:09:37.170 --> 00:09:40.210
And you mentioned that as a
part of the initialization

00:09:40.210 --> 00:09:45.370
process, one can actually
encounter various error

00:09:45.370 --> 00:09:45.790
conditions.

00:09:45.790 --> 00:09:48.510
Can you quickly walk us through
what these errors are

00:09:48.510 --> 00:09:49.680
and what are the best practices

00:09:49.680 --> 00:09:51.600
around handling them?

00:09:51.600 --> 00:09:55.560
ROSS MCILROY: You get this
on-initialize failure result,

00:09:55.560 --> 00:09:59.260
which will provide a YouTube
initialization result

00:09:59.260 --> 00:10:02.210
alongside the callback.

00:10:02.210 --> 00:10:08.070
So this is an enum that
has various options

00:10:08.070 --> 00:10:09.390
for what went wrong.

00:10:09.390 --> 00:10:11.460
And so various things
could go wrong in

00:10:11.460 --> 00:10:13.170
connecting to the API service.

00:10:13.170 --> 00:10:16.900
So one of the ones which
you could encounter is

00:10:16.900 --> 00:10:19.170
DEVELOPER_KEY_INVALID, if
you've not got a valid

00:10:19.170 --> 00:10:24.570
developer key, or
INVALID_APPLICATION_SIGNATURE.

00:10:24.570 --> 00:10:27.420
So we require that your
application's APK has been

00:10:27.420 --> 00:10:30.980
signed in the same way that it
would be signed to be uploaded

00:10:30.980 --> 00:10:34.470
onto the Google Play Store.

00:10:34.470 --> 00:10:36.780
And then there's various other
ones, which can be

00:10:36.780 --> 00:10:37.500
recoverable.

00:10:37.500 --> 00:10:41.300
So this example is a
SERVICE_DISABLED,

00:10:41.300 --> 00:10:42.640
SERVICE_MISSING, or
SERVICE_VERSION_

00:10:42.640 --> 00:10:43.890
UPDATE_REQUIRED.

00:10:45.430 --> 00:10:48.880
So if you get one of these
initialization results, then

00:10:48.880 --> 00:10:51.400
the method issues a recoverable

00:10:51.400 --> 00:10:53.440
error will return true.

00:10:53.440 --> 00:10:56.640
And so this means that there's
something that the user can do

00:10:56.640 --> 00:10:58.450
to make the API work.

00:10:58.450 --> 00:11:01.410
And so what they may have done
is disabled the YouTube app.

00:11:01.410 --> 00:11:02.890
Or they may have
uninstalled it.

00:11:02.890 --> 00:11:06.030
Or they may have an old version
which doesn't have the

00:11:06.030 --> 00:11:07.890
API service available.

00:11:07.890 --> 00:11:11.880
And so if you have one of these
errors, you can call and

00:11:11.880 --> 00:11:15.680
get error dialogue on the
YouTube initialization result.

00:11:15.680 --> 00:11:19.670
It will create a dialogue for
you, which identifies the

00:11:19.670 --> 00:11:20.470
problem to the user.

00:11:20.470 --> 00:11:22.760
For example, they need to
update the YouTube app.

00:11:22.760 --> 00:11:24.695
And it gives them a button to
press, which will take them

00:11:24.695 --> 00:11:27.690
straight to market and enable
them to update it there.

00:11:27.690 --> 00:11:32.320
And once they return to your
activity, we'll pass back the

00:11:32.320 --> 00:11:35.180
request code that you've passed
into the get error

00:11:35.180 --> 00:11:36.960
dialogue on activity result.

00:11:36.960 --> 00:11:39.880
And you can check whether the
resolution was successful or

00:11:39.880 --> 00:11:42.270
not, and if so, reinitialize
the player

00:11:42.270 --> 00:11:44.729
view or player fragment.

00:11:44.729 --> 00:11:45.222
JAREK WILKIEWICZ: Great.

00:11:45.222 --> 00:11:48.040
So sounds like the two
common errors will be

00:11:48.040 --> 00:11:48.700
developer key related.

00:11:48.700 --> 00:11:53.020
So the API does require
developer key, unlike the

00:11:53.020 --> 00:11:55.250
existing player APIs.

00:11:55.250 --> 00:11:58.850
In fact, I've noticed people
that we've worked with

00:11:58.850 --> 00:12:00.700
frequently run into
this issue with

00:12:00.700 --> 00:12:01.710
trying to run the examples.

00:12:01.710 --> 00:12:04.250
So you actually have to go in
and change the developer key.

00:12:04.250 --> 00:12:07.440
And you can obtain that Version
3.0 developer key from

00:12:07.440 --> 00:12:08.940
our developer console.

00:12:08.940 --> 00:12:13.110
If you need to know more about
YouTube Data API v3, go to our

00:12:13.110 --> 00:12:17.420
blog, apiblog.youtube.com, where
you will find a lot of

00:12:17.420 --> 00:12:18.290
additional information.

00:12:18.290 --> 00:12:20.570
This API was recently
launched.

00:12:20.570 --> 00:12:24.660
And then the other one, which is
actually user recoverable,

00:12:24.660 --> 00:12:29.090
is related to a version check
that the API performs.

00:12:29.090 --> 00:12:31.600
And this is where the
application developer can

00:12:31.600 --> 00:12:35.570
actually work in concert with
the user and help the user

00:12:35.570 --> 00:12:38.920
update the app if that is, in
fact, necessary in order for

00:12:38.920 --> 00:12:41.150
the API to function
on the device.

00:12:41.150 --> 00:12:45.040
And then the API supports
Android Version 2.2 and above.

00:12:45.040 --> 00:12:46.350
Is that correct?

00:12:46.350 --> 00:12:46.730
ROSS MCILROY: Yeah.

00:12:46.730 --> 00:12:47.610
2.2 and above.

00:12:47.610 --> 00:12:50.270
Froyo all the way
to Jellybean.

00:12:50.270 --> 00:12:51.960
JAREK WILKIEWICZ: Great.

00:12:51.960 --> 00:12:56.040
So another question I had
about the API is, do you

00:12:56.040 --> 00:12:58.070
support live stream playback?

00:12:58.070 --> 00:13:01.540
ROSS MCILROY: So we support
live stream playback.

00:13:01.540 --> 00:13:05.320
But due to the video format
that's used by YouTube, only

00:13:05.320 --> 00:13:09.370
Android devices from Honeycomb
MR1 and above will support

00:13:09.370 --> 00:13:10.620
live videos.

00:13:10.620 --> 00:13:13.700
So that would be version
3.1 of the platform.

00:13:13.700 --> 00:13:17.240
If the devices is version 3.1 or
above, they will be able to

00:13:17.240 --> 00:13:18.220
play live videos.

00:13:18.220 --> 00:13:19.370
Otherwise, they won't.

00:13:19.370 --> 00:13:20.330
JAREK WILKIEWICZ: Great.

00:13:20.330 --> 00:13:24.390
Speaking of compatibility, I
guess the fundamental question

00:13:24.390 --> 00:13:28.470
an application developer might
ask is, is the library

00:13:28.470 --> 00:13:29.990
compatible with my device?

00:13:29.990 --> 00:13:32.540
Do I actually have all
the prerequisites for

00:13:32.540 --> 00:13:33.380
the library to run?

00:13:33.380 --> 00:13:37.880
So how can one determine
whether the library is

00:13:37.880 --> 00:13:41.980
actually supporting
one's device?

00:13:41.980 --> 00:13:43.240
ROSS MCILROY: Sure.

00:13:43.240 --> 00:13:43.540
Yeah.

00:13:43.540 --> 00:13:47.830
So we provide this YouTube
API ServiceUtil class.

00:13:47.830 --> 00:13:50.350
And within that, there is a

00:13:50.350 --> 00:13:53.250
isYouTubeAPIServiceAvailable call.

00:13:53.250 --> 00:13:56.250
And when you call that, you'll
get back again one of these

00:13:56.250 --> 00:13:59.210
YouTube initialization
results.

00:13:59.210 --> 00:14:03.490
So that'll, again, either give
you the success result, which

00:14:03.490 --> 00:14:06.380
means the API's there and
available, and you can use it.

00:14:06.380 --> 00:14:09.770
Or it might give you one of
the ones which you can

00:14:09.770 --> 00:14:11.930
initialize a dialogue
to enable the

00:14:11.930 --> 00:14:13.370
user to recover from.

00:14:13.370 --> 00:14:15.740
Or there may be some other
error, which you can identify

00:14:15.740 --> 00:14:19.640
and use another mechanism
to play back the video.

00:14:19.640 --> 00:14:20.860
JAREK WILKIEWICZ: Great.

00:14:20.860 --> 00:14:24.520
And then As far as the
initialization [? part, ?]

00:14:24.520 --> 00:14:27.610
say if I'm working on an older
Android device, is there

00:14:27.610 --> 00:14:29.260
anything that I need to
be worried about?

00:14:29.260 --> 00:14:31.360
Can you tell us a little bit
more about-- how long does it

00:14:31.360 --> 00:14:33.910
take to initialize
the library?

00:14:33.910 --> 00:14:36.340
ROSS MCILROY: So the
initialization is

00:14:36.340 --> 00:14:37.550
asynchronous.

00:14:37.550 --> 00:14:40.360
And the reason for that is it
can sometimes take some time

00:14:40.360 --> 00:14:46.050
to spin up the activity which
the service is provided by.

00:14:46.050 --> 00:14:49.080
So on older devices, if the
YouTube app isn't already

00:14:49.080 --> 00:14:54.250
running, it may take a second
or so for that to happen.

00:14:54.250 --> 00:14:57.870
Now, once that's happening,
the UI of the player has a

00:14:57.870 --> 00:14:59.800
spinner loading.

00:14:59.800 --> 00:15:01.350
And it's not blocking
the UI thread.

00:15:01.350 --> 00:15:03.260
So it's not going
to affect your

00:15:03.260 --> 00:15:04.880
animations or your graphics.

00:15:04.880 --> 00:15:06.920
But the player's not going
to be available

00:15:06.920 --> 00:15:08.700
until that's happened.

00:15:08.700 --> 00:15:12.890
So if you are worried about this
on older devices, what

00:15:12.890 --> 00:15:15.830
you could do is hide the
player view until

00:15:15.830 --> 00:15:18.180
initialization successes
come back and then load

00:15:18.180 --> 00:15:19.430
the video into it.

00:15:19.430 --> 00:15:25.330
But usually, it's just going to
be under 200 milliseconds

00:15:25.330 --> 00:15:29.910
or so in modern devices, at
which point the player view

00:15:29.910 --> 00:15:31.070
will be initialized.

00:15:31.070 --> 00:15:33.080
And once you have one player
view initialized, then the

00:15:33.080 --> 00:15:34.640
service is already
up and running.

00:15:34.640 --> 00:15:36.726
It'll be much faster each
time to connect.

00:15:36.726 --> 00:15:37.160
JAREK WILKIEWICZ: Great.

00:15:37.160 --> 00:15:39.550
And as you said, the whole
process is asynchronous.

00:15:39.550 --> 00:15:44.010
So the developer can actually
trigger the initialization at

00:15:44.010 --> 00:15:47.375
the best opportunity for
a given application.

00:15:47.375 --> 00:15:47.740
ROSS MCILROY: Exactly.

00:15:47.740 --> 00:15:51.660
And the UI looks much the same
while it's loading the service

00:15:51.660 --> 00:15:54.470
as when it's loading the
first video, buffering.

00:15:54.470 --> 00:15:55.930
So there's a seamless
transition there.

00:15:55.930 --> 00:15:59.480
The user shouldn't notice a
difference between the API

00:15:59.480 --> 00:16:02.990
initializing and the first
video buffering.

00:16:02.990 --> 00:16:03.280
JAREK WILKIEWICZ: Great.

00:16:03.280 --> 00:16:05.630
Well, thank you very much
for your time, Ross.

00:16:05.630 --> 00:16:08.190
I know you need to run off and
do your holiday shopping.

00:16:08.190 --> 00:16:09.930
Is that correct?

00:16:09.930 --> 00:16:10.090
ROSS MCILROY: Yeah.

00:16:10.090 --> 00:16:11.360
I've been too busy building
the API to

00:16:11.360 --> 00:16:12.310
do any holiday shopping.

00:16:12.310 --> 00:16:12.770
JAREK WILKIEWICZ: All right.

00:16:12.770 --> 00:16:14.490
Well, hopefully you
will have enough

00:16:14.490 --> 00:16:16.910
time before the holidays.

00:16:16.910 --> 00:16:18.190
Thank you very much again.

00:16:18.190 --> 00:16:19.870
And for those of you who
are watching, thank

00:16:19.870 --> 00:16:20.760
you for your attention.

00:16:20.760 --> 00:16:23.090
And we'll see you again on
YouTube Developers Live.

00:16:32.390 --> 00:16:35.727
[MUSIC PLAYING]

