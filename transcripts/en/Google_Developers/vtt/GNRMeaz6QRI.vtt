WEBVTT
Kind: captions
Language: en

00:00:00.660 --> 00:00:01.500
MALE SPEAKER: --paying
attention.

00:00:01.500 --> 00:00:02.946
MALE SPEAKER: Sounds good.

00:00:02.946 --> 00:00:04.874
MALE SPEAKER: [INAUDIBLE].

00:00:04.874 --> 00:00:16.970
MALE SPEAKER: [SINGING]

00:00:16.970 --> 00:00:18.890
MALE SPEAKER: Come on.

00:00:18.890 --> 00:00:21.794
[INTERPOSING VOICES]

00:00:21.794 --> 00:01:23.070
[MUSIC PLAYING]

00:01:33.026 --> 00:01:33.930
IKAI LAN: Hey, everybody.

00:01:33.930 --> 00:01:36.250
Welcome to another edition of
"YouTube Developers Live." My

00:01:36.250 --> 00:01:37.070
name is Ikai Lan.

00:01:37.070 --> 00:01:38.990
JEFF POSNICK: And I'm
Jeff Posnick.

00:01:38.990 --> 00:01:41.050
IKAI LAN: And we've got a great
show for you guys today.

00:01:41.050 --> 00:01:43.630
So before we get started, it's
probably a good time for us to

00:01:43.630 --> 00:01:45.845
plug Google I/O. Now,
tell us a little

00:01:45.845 --> 00:01:46.950
about Google I/O, Jeff.

00:01:46.950 --> 00:01:49.010
JEFF POSNICK: Yeah, I will plug
the recaps of Google I/O.

00:01:49.010 --> 00:01:50.570
IKAI LAN: [LAUGHS]

00:01:50.570 --> 00:01:52.235
JEFF POSNICK: Slightly late to
plug the current year, but we

00:01:52.235 --> 00:01:56.355
do, fortunately, have a great
set of session videos for all

00:01:56.355 --> 00:02:00.350
of the YouTube sessions and all
of the other Google API

00:02:00.350 --> 00:02:02.420
sessions, and they're
available on

00:02:02.420 --> 00:02:04.140
YouTube right now.

00:02:04.140 --> 00:02:06.030
You could watch them all.

00:02:06.030 --> 00:02:09.060
They're about 30 to 40
minutes for each one.

00:02:09.060 --> 00:02:13.260
And the best way to get all the
list of YouTube-related

00:02:13.260 --> 00:02:17.120
sessions is to visit our
dedicated YouTube channel.

00:02:17.120 --> 00:02:20.420
So that's
youtube.com/youtubedev, and we

00:02:20.420 --> 00:02:24.250
have a playlist going there to
look at all the other videos

00:02:24.250 --> 00:02:25.310
mixed together.

00:02:25.310 --> 00:02:26.780
It's on the channel that you're
watching right now,

00:02:26.780 --> 00:02:30.160
which is
youtube.com/googledevelopers,

00:02:30.160 --> 00:02:31.830
so there's a ton of
great stuff there.

00:02:31.830 --> 00:02:33.490
IKAI LAN: I was just hoping
you would say, so

00:02:33.490 --> 00:02:34.850
tickets are sold out.

00:02:34.850 --> 00:02:37.290
Also, the event is over.

00:02:37.290 --> 00:02:39.040
Anyway, enough of that.

00:02:39.040 --> 00:02:41.140
So today, we're going to be
talking about a couple of

00:02:41.140 --> 00:02:43.450
things that are very important
to developers.

00:02:43.450 --> 00:02:45.980
Now, Ibrahim, can you go
to the slide screen?

00:02:45.980 --> 00:02:48.040
So Ibrahim's helping us
produce in the back.

00:02:48.040 --> 00:02:50.650
Sometimes, you've seen him
on different shows.

00:02:50.650 --> 00:02:52.980
Today, we're going to be talking
about how to use the

00:02:52.980 --> 00:02:55.690
API Reference and how
the API Reference

00:02:55.690 --> 00:02:57.140
translates into code.

00:02:57.140 --> 00:03:00.530
Now, we're going to show you how
to use the API Explorer,

00:03:00.530 --> 00:03:03.140
how these actually map to HP
requests, then we're going to

00:03:03.140 --> 00:03:05.410
go ahead and do some live
coding in Java.

00:03:05.410 --> 00:03:07.390
I've also got some Python
samples, but I'm not going to

00:03:07.390 --> 00:03:08.720
spend a lot of time in it.

00:03:08.720 --> 00:03:12.517
Now, what's really great is you
might be asking, Ikai and

00:03:12.517 --> 00:03:14.760
Jeff, I don't use
Python or Java.

00:03:14.760 --> 00:03:16.070
I use--

00:03:16.070 --> 00:03:16.290
JEFF POSNICK: Ruby.

00:03:16.290 --> 00:03:16.680
PHP.

00:03:16.680 --> 00:03:18.730
IKAI LAN: I use Ruby or PHP.

00:03:18.730 --> 00:03:21.950
So the good news is that all of
these will translate very

00:03:21.950 --> 00:03:24.070
well to the other languages,
and you just have to take a

00:03:24.070 --> 00:03:25.870
look at the code samples
we posted on

00:03:25.870 --> 00:03:30.840
developers.google.com/youtube
to see where the differences

00:03:30.840 --> 00:03:32.310
are and how to do
a translation.

00:03:32.310 --> 00:03:34.830
But everything that we talk
about today is going to map

00:03:34.830 --> 00:03:36.250
very well to the other
languages.

00:03:36.250 --> 00:03:37.100
JEFF POSNICK: Yeah.

00:03:37.100 --> 00:03:39.740
It also maps well
to other APIs.

00:03:39.740 --> 00:03:44.220
So if you're a YouTube Data API
developer, you're getting

00:03:44.220 --> 00:03:47.660
used to our client libraries,
but if you ever start using

00:03:47.660 --> 00:03:51.260
Google+ APIs, the Drive APIs,
some of those other Google

00:03:51.260 --> 00:03:54.100
products, we have the same
client libraries that pretty

00:03:54.100 --> 00:03:56.550
much operate in the same
way regardless of

00:03:56.550 --> 00:03:57.730
which API is there.

00:03:57.730 --> 00:03:58.070
IKAI LAN: That's right.

00:03:58.070 --> 00:04:00.060
JEFF POSNICK: So it makes it
easy to mash up different APIs

00:04:00.060 --> 00:04:02.720
in the same application, and
everything that Ikai is

00:04:02.720 --> 00:04:06.010
talking about today will apply
to developers using

00:04:06.010 --> 00:04:06.790
other APIs as well.

00:04:06.790 --> 00:04:08.190
IKAI LAN: Now, that's
enough hand waving

00:04:08.190 --> 00:04:09.340
for you guys today.

00:04:09.340 --> 00:04:12.230
We're going to show you what
we're talking about.

00:04:12.230 --> 00:04:14.590
So I'm going to go ahead and
open up Google Chrome.

00:04:14.590 --> 00:04:17.010
Now, I'm going to mention
everything we're talking about

00:04:17.010 --> 00:04:20.380
is about the V3 API, so
you should be using

00:04:20.380 --> 00:04:22.180
this, the V3 Data API.

00:04:22.180 --> 00:04:24.200
So I'm here right now in our
favorite site, and I'm going

00:04:24.200 --> 00:04:25.770
to try to blow this
up a little bit.

00:04:25.770 --> 00:04:27.020
This is
developers.google.comyoutube.

00:04:30.280 --> 00:04:32.600
And if you can't find this page,
you can just go to your

00:04:32.600 --> 00:04:36.840
favorite search engine and
search for "YouTube" and "V3

00:04:36.840 --> 00:04:37.800
API," I guess.

00:04:37.800 --> 00:04:38.135
JEFF POSNICK: Sure.

00:04:38.135 --> 00:04:38.470
YouTube API.

00:04:38.470 --> 00:04:38.900
IKAI LAN: I don't know.

00:04:38.900 --> 00:04:40.700
I always have this tab open.

00:04:40.700 --> 00:04:41.620
JEFF POSNICK: I google myself.

00:04:41.620 --> 00:04:45.005
I search for "Jeff Posnick" and
I find all the articles I

00:04:45.005 --> 00:04:46.100
write and stuff.

00:04:46.100 --> 00:04:47.320
IKAI LAN: Now, I'm going to come
over here, I'm going to

00:04:47.320 --> 00:04:48.440
click on the right-hand
tab, and I'm going to

00:04:48.440 --> 00:04:49.680
go to Version 3.0.

00:04:49.680 --> 00:04:51.750
And you'll see that all of
our stuff is here in the

00:04:51.750 --> 00:04:54.670
documentation, and we've also
got an API reference.

00:04:54.670 --> 00:04:58.110
So the first thing that we're
going to do is we're just

00:04:58.110 --> 00:05:01.740
going to look over this API
reference right here.

00:05:01.740 --> 00:05:04.370
Now, I'm going to spend the next
half hour going through

00:05:04.370 --> 00:05:05.920
every method and every call.

00:05:05.920 --> 00:05:06.870
Just kidding.

00:05:06.870 --> 00:05:08.780
I'm not actually going
to do that.

00:05:08.780 --> 00:05:11.680
Instead, we're going to a quick
introduction into what

00:05:11.680 --> 00:05:13.990
this actually means.

00:05:13.990 --> 00:05:17.230
So let's take a look and let's
go to the API Explorer and

00:05:17.230 --> 00:05:19.310
give you a preview of what
we're talking about.

00:05:19.310 --> 00:05:23.650
So I'm going to go to Videos,
and I'm going to go to List.

00:05:23.650 --> 00:05:25.570
Now, don't worry if this doesn't
make any sense yet.

00:05:25.570 --> 00:05:27.614
I will explain what
this means.

00:05:27.614 --> 00:05:31.970
So this is what our API
reference looks like.

00:05:31.970 --> 00:05:32.620
We have the methods.

00:05:32.620 --> 00:05:33.910
We have the parts.

00:05:33.910 --> 00:05:36.610
We have what the response
might look like.

00:05:36.610 --> 00:05:40.070
And at the bottom, what we have
here is we have the API

00:05:40.070 --> 00:05:42.490
Explorer, and this allows us
to test our API without

00:05:42.490 --> 00:05:43.910
writing any code.

00:05:43.910 --> 00:05:48.860
So let's go ahead and just make
a quick API call now.

00:05:48.860 --> 00:05:51.140
Let's see, id,snippet.

00:05:51.140 --> 00:05:53.680
Now, I'm going to go ahead
and pull a video.

00:05:53.680 --> 00:05:57.570
This is one of my first shows
I did for YouTube.

00:05:57.570 --> 00:05:59.882
I'm going to plug this in
here into id, and I'm

00:05:59.882 --> 00:06:02.270
going to hit Execute.

00:06:02.270 --> 00:06:04.670
Now, you'll see that what this
is doing is this is making an

00:06:04.670 --> 00:06:08.350
API call and it's returning
some data about my video.

00:06:08.350 --> 00:06:14.410
My video here is Things New
Developers Say, and here's a

00:06:14.410 --> 00:06:15.110
description.

00:06:15.110 --> 00:06:18.040
So now if we come back to the
API Explorer, you'll see that

00:06:18.040 --> 00:06:22.950
this maps right here in a much
more machine parsable format.

00:06:22.950 --> 00:06:26.360
Now, let's review what this
is actually doing.

00:06:26.360 --> 00:06:30.040
So what this API Explorer is
doing is it's helping us make

00:06:30.040 --> 00:06:33.360
HTTP requests to the API server
and it's printing out

00:06:33.360 --> 00:06:34.900
the data in JSON.

00:06:34.900 --> 00:06:38.230
So what does this HTTP
request look like?

00:06:38.230 --> 00:06:40.000
Well, we're doing the Get.

00:06:40.000 --> 00:06:44.830
We're calling googleapis.com/y
outube/v3/videos, and we're

00:06:44.830 --> 00:06:46.800
passing it some data.

00:06:46.800 --> 00:06:51.260
And this is because the V3
APIs use what's called a

00:06:51.260 --> 00:06:52.560
RESTful style.

00:06:52.560 --> 00:06:56.210
And in a RESTful style, we
have a verb and usually a

00:06:56.210 --> 00:06:59.560
resource because a lot of API
calls tend to follow this

00:06:59.560 --> 00:07:02.900
convention of the verb usually
maps to what do you want to

00:07:02.900 --> 00:07:06.730
do, and the resource is, well,
what do you want to get?

00:07:06.730 --> 00:07:08.070
What do you want
to operate on?

00:07:08.070 --> 00:07:12.300
So what that looks like is in
the RESTful style, a verb

00:07:12.300 --> 00:07:15.650
typically maps to a particular
operation.

00:07:15.650 --> 00:07:19.680
And when you take a look at the
API Reference for YouTube,

00:07:19.680 --> 00:07:24.510
you'll see that the verbs map to
certain API calls, and I'll

00:07:24.510 --> 00:07:27.240
show you what this means,
whereas a resource can be a

00:07:27.240 --> 00:07:30.900
video, a channel, a playlist,
or anything else.

00:07:30.900 --> 00:07:33.300
Now, if you're working with
the Google Drive API, this

00:07:33.300 --> 00:07:33.950
might be a folder.

00:07:33.950 --> 00:07:35.260
It might be a file.

00:07:35.260 --> 00:07:36.360
I don't know what the exact
things are called.

00:07:36.360 --> 00:07:39.300
I'll know if I look in
the API reference.

00:07:39.300 --> 00:07:41.020
JEFF POSNICK: It's also worth
pointing out that that

00:07:41.020 --> 00:07:44.100
particular API call can map
to multiple resources.

00:07:44.100 --> 00:07:46.980
You could put in a list of
different IDs there and get

00:07:46.980 --> 00:07:48.040
back information about
all of them.

00:07:48.040 --> 00:07:49.000
IKAI LAN: That's correct.

00:07:49.000 --> 00:07:49.530
JEFF POSNICK: In this particular
example, you're

00:07:49.530 --> 00:07:50.220
just doing one, though.

00:07:50.220 --> 00:07:51.700
IKAI LAN: I'm just
doing one, yes.

00:07:51.700 --> 00:07:54.060
So when we take a look at these
methods here, you'll see

00:07:54.060 --> 00:07:56.790
that there's a list, insert,
update, and delete method.

00:07:56.790 --> 00:08:00.650
So whenever you're in the API
Reference, you can click on

00:08:00.650 --> 00:08:03.410
the resource that you want to
get at, and then you'll see

00:08:03.410 --> 00:08:05.200
the different methods, which
are what you can do.

00:08:05.200 --> 00:08:08.750
Now, list will usually be a Get
operation, and it'll map

00:08:08.750 --> 00:08:12.980
to give me some information,
whereas insert will be a new

00:08:12.980 --> 00:08:14.610
object being added.

00:08:14.610 --> 00:08:17.240
Update is usually updating an
existing object, and delete

00:08:17.240 --> 00:08:18.610
usually deletes the object.

00:08:18.610 --> 00:08:20.990
Now, video also has some--

00:08:20.990 --> 00:08:23.365
I don't want to say they're
nonstandard, but outside of

00:08:23.365 --> 00:08:25.840
the four verbs, we can also get
a rating, and we can also

00:08:25.840 --> 00:08:27.150
rate videos.

00:08:27.150 --> 00:08:29.870
So another way that this could
have been structured, for

00:08:29.870 --> 00:08:32.860
instance, I've seen this done
on different sites, is we

00:08:32.860 --> 00:08:36.260
would have a ratings resource
and we would insert or update.

00:08:36.260 --> 00:08:38.130
But really, this is just
a matter of style.

00:08:38.130 --> 00:08:42.130
And this is perfectly correct
and it works too.

00:08:42.130 --> 00:08:47.090
So let's go back to the API
call that we just made.

00:08:47.090 --> 00:08:50.130
Now, what did we really just
do underneath the hood?

00:08:50.130 --> 00:08:52.425
Well, we did this.

00:08:52.425 --> 00:08:55.860
Entered in the part, we entered
in the ID, and we

00:08:55.860 --> 00:08:59.580
executed this, and the
API Explorer made an

00:08:59.580 --> 00:09:02.520
HTTP call for us.

00:09:02.520 --> 00:09:05.060
So what we're going to do now
is we're going to show you

00:09:05.060 --> 00:09:08.800
using cURL, which is a command
line tool available on

00:09:08.800 --> 00:09:13.005
Unix-based systems, be
it Linux, OSX, BSD.

00:09:13.005 --> 00:09:14.220
Did I list them all?

00:09:14.220 --> 00:09:15.900
JEFF POSNICK: I'm sure people
have ported it pretty much

00:09:15.900 --> 00:09:16.090
everywhere.

00:09:16.090 --> 00:09:17.580
IKAI LAN: You guys know what
we're talking about.

00:09:17.580 --> 00:09:19.520
Haven't seen this on Windows,
but I'm sure there's a Windows

00:09:19.520 --> 00:09:20.280
version somewhere.

00:09:20.280 --> 00:09:22.940
JEFF POSNICK: There's got to
be HTTP user agents for the

00:09:22.940 --> 00:09:24.050
Windows command line.

00:09:24.050 --> 00:09:29.210
IKAI LAN: So cURL allows us to
fetch HTTP, and this is what

00:09:29.210 --> 00:09:32.230
the browser does, except the
browser also takes the data

00:09:32.230 --> 00:09:33.970
and it renders it for you.

00:09:33.970 --> 00:09:36.610
So cURL is just going to give
us the raw output, whether

00:09:36.610 --> 00:09:40.200
it's in XML, HTML,
or whatever.

00:09:40.200 --> 00:09:43.570
So what I'm going to do now is
I'm just going to show how the

00:09:43.570 --> 00:09:45.720
API Explorer translates
to cURL.

00:09:45.720 --> 00:09:49.410
So Ibrahim, can you go ahead
and put some-- thank you.

00:09:49.410 --> 00:09:51.070
He's such a great producer.

00:09:51.070 --> 00:09:54.510
So I'm going to go ahead now and
show you what this looks

00:09:54.510 --> 00:09:57.400
like if I do curl http.

00:09:57.400 --> 00:09:58.200
Let's mix it up a little.

00:09:58.200 --> 00:10:00.330
My slide says Google.

00:10:00.330 --> 00:10:01.750
Let's see what YouTube's
home page looks like.

00:10:01.750 --> 00:10:02.280
Whoa.

00:10:02.280 --> 00:10:04.470
There's a lot of stuff
going on here.

00:10:04.470 --> 00:10:08.260
And you'll see that this is just
HTML, and that's what we

00:10:08.260 --> 00:10:09.020
expect to see.

00:10:09.020 --> 00:10:14.370
Now, when we go to the browser
and we go to youtube.com and

00:10:14.370 --> 00:10:20.010
we View Source, if I can
find where to do it.

00:10:20.010 --> 00:10:20.610
JEFF POSNICK: Just right-click.

00:10:20.610 --> 00:10:21.550
Yeah.

00:10:21.550 --> 00:10:24.880
IKAI LAN: View Page Source.

00:10:24.880 --> 00:10:28.640
You'll see that it's going to
look very similar, if not the

00:10:28.640 --> 00:10:30.370
same thing.

00:10:30.370 --> 00:10:32.550
So that's what's cURL does.

00:10:32.550 --> 00:10:37.950
And now let's go and see how
we can use cURL to do some

00:10:37.950 --> 00:10:39.280
things with the API.

00:10:39.280 --> 00:10:42.550
So you'll see that right here,
we're making a Get request and

00:10:42.550 --> 00:10:46.610
we're fetching this
string right here.

00:10:46.610 --> 00:10:50.210
Now, just a caveat, at the end
you'll see your API key.

00:10:50.210 --> 00:10:52.340
I'm not replacing that only
because I'm curious to see

00:10:52.340 --> 00:10:53.080
what will happen.

00:10:53.080 --> 00:10:55.850
I think this still might work.

00:10:55.850 --> 00:10:57.930
JEFF POSNICK: I think you're
overly optimistic about that.

00:10:57.930 --> 00:10:59.040
IKAI LAN: Oh, I'm wrong.

00:10:59.040 --> 00:10:59.850
It doesn't work.

00:10:59.850 --> 00:11:03.330
And if you see, I'm getting back
JSON, and this is what

00:11:03.330 --> 00:11:04.290
the server's telling me.

00:11:04.290 --> 00:11:06.370
It's telling me that the
key is invalid and

00:11:06.370 --> 00:11:07.890
this is a bad request.

00:11:07.890 --> 00:11:10.340
So I'm going to have to go ahead
and fix that, and to fix

00:11:10.340 --> 00:11:12.960
that, I'm going to go
to the API Console.

00:11:12.960 --> 00:11:14.270
And to get to the API Console,
you'll go to

00:11:14.270 --> 00:11:18.900
code.google.com/api/console,
and here I am.

00:11:18.900 --> 00:11:20.330
And don't bother stealing
these keys.

00:11:20.330 --> 00:11:23.240
I'm going to change them after
the show and break all of my

00:11:23.240 --> 00:11:24.170
test code, by the way.

00:11:24.170 --> 00:11:24.570
JEFF POSNICK: Nice.

00:11:24.570 --> 00:11:26.350
IKAI LAN: So I'm going to go
ahead and copy the key, and

00:11:26.350 --> 00:11:28.440
the key that I'm going to
use for this API call is

00:11:28.440 --> 00:11:30.230
a simple API key.

00:11:30.230 --> 00:11:33.390
Now, the difference between a
simple API key and a client

00:11:33.390 --> 00:11:37.290
ID, client secret key is that
the simple API key can be used

00:11:37.290 --> 00:11:40.710
most places where you don't need
an authenticated user.

00:11:40.710 --> 00:11:44.110
So the way I like to think about
it is what can you do on

00:11:44.110 --> 00:11:46.380
youtube.com without
logging in?

00:11:46.380 --> 00:11:49.300
And those are things that you
can do with a simple API key.

00:11:49.300 --> 00:11:51.490
And one of the things you can
do is get information on a

00:11:51.490 --> 00:11:53.220
video because you need
to watch a video.

00:11:53.220 --> 00:11:55.490
JEFF POSNICK: And this is
actually a place where the

00:11:55.490 --> 00:11:58.450
Version Three of the API
differs from the older

00:11:58.450 --> 00:12:01.960
versions, Version Two, Version
One, in that we did allow

00:12:01.960 --> 00:12:04.530
really completely anonymous
access in Version Two and

00:12:04.530 --> 00:12:05.140
Version One.

00:12:05.140 --> 00:12:07.280
So you might be familiar with
just being able to make these

00:12:07.280 --> 00:12:10.050
requests without having
to register for a key.

00:12:10.050 --> 00:12:11.620
You do have to register
for a key in Version

00:12:11.620 --> 00:12:13.860
Three, but it's easy.

00:12:13.860 --> 00:12:16.670
Just one piece of information
to keep track of, basically.

00:12:16.670 --> 00:12:18.460
IKAI LAN: Thank you for buying
me some time, Jeff.

00:12:18.460 --> 00:12:20.890
So I've gone in and I've copied
the key over to the

00:12:20.890 --> 00:12:21.430
command line.

00:12:21.430 --> 00:12:23.850
It looks like I've got this
put out correctly.

00:12:23.850 --> 00:12:26.190
So now, let's go ahead
and run this again.

00:12:26.190 --> 00:12:28.940
You'll see that I am getting
back the data about this

00:12:28.940 --> 00:12:33.010
video, and it's the same thing
that's happening over here in

00:12:33.010 --> 00:12:33.900
the API Explorer.

00:12:33.900 --> 00:12:35.800
So you don't have to
do it in cURL.

00:12:35.800 --> 00:12:40.630
Again, cURL is just another
way you can do this.

00:12:40.630 --> 00:12:44.630
And one of the reasons cURL is
nice is because when you're

00:12:44.630 --> 00:12:48.540
actually writing code, it may
be easier for you to output.

00:12:48.540 --> 00:12:51.320
Say hey, what's the URL I'm
fetching and what are the

00:12:51.320 --> 00:12:52.020
parameters I'm passing?

00:12:52.020 --> 00:12:54.650
And pass them to cURL instead
of going back to the API

00:12:54.650 --> 00:12:57.495
Explorer and plugging
the values back in.

00:12:57.495 --> 00:12:59.950
Now, the API Explorer still
has a lot of neat

00:12:59.950 --> 00:13:02.890
functionality, and we'll get
into what some of that

00:13:02.890 --> 00:13:05.680
functionality is because when
you start to make more and

00:13:05.680 --> 00:13:08.880
more complex requests, it
becomes a lot easier to build

00:13:08.880 --> 00:13:11.880
out the API call in the API
Explorer first before

00:13:11.880 --> 00:13:13.740
translating it into code.

00:13:13.740 --> 00:13:15.920
JEFF POSNICK: And there's nice
documentation for each of the

00:13:15.920 --> 00:13:19.100
parameters and the API Explorer
also, which I'm sure

00:13:19.100 --> 00:13:20.980
folks who go there
will appreciate.

00:13:20.980 --> 00:13:23.200
I know I always appreciate it.

00:13:23.200 --> 00:13:24.440
IKAI LAN: He appreciates it.

00:13:24.440 --> 00:13:24.990
JEFF POSNICK: Yes.

00:13:24.990 --> 00:13:26.180
Good job to our tech
writing team.

00:13:26.180 --> 00:13:28.025
IKAI LAN: He also wrote some
of the samples and

00:13:28.025 --> 00:13:30.790
the docs and stuff.

00:13:30.790 --> 00:13:34.290
So let's go ahead and let's
put this into practice.

00:13:34.290 --> 00:13:35.520
You want to put this into
practice, Jeff?

00:13:35.520 --> 00:13:37.220
JEFF POSNICK: I would love for
you to put it into practice.

00:13:37.220 --> 00:13:38.170
I would love to observe.

00:13:38.170 --> 00:13:39.080
IKAI LAN: I will put it into
practice, and he's going to

00:13:39.080 --> 00:13:40.110
observe me.

00:13:40.110 --> 00:13:42.050
That's what we're
going to do now.

00:13:42.050 --> 00:13:43.865
We're going to do something
that a lot of people have

00:13:43.865 --> 00:13:46.740
asked for, which is we're going
to write some code that

00:13:46.740 --> 00:13:50.640
lets me fetch my likes, the
videos that I've liked.

00:13:50.640 --> 00:13:52.490
Now, a lot of people have
come and asked us,

00:13:52.490 --> 00:13:53.770
well, how do I do this?

00:13:53.770 --> 00:13:56.230
How do I write some code
that fetches my likes?

00:13:56.230 --> 00:13:59.300
And as of V3 of the API, there's
a very interesting

00:13:59.300 --> 00:14:01.940
approach to how we do this, and
I think it makes sense.

00:14:01.940 --> 00:14:05.790
So what we do when you want to
fetch the videos you've liked,

00:14:05.790 --> 00:14:08.927
is that your likes belong in a
playlist, and that playlist is

00:14:08.927 --> 00:14:10.220
part of your channel.

00:14:10.220 --> 00:14:14.020
Now again, you might have
multiple channels, but each

00:14:14.020 --> 00:14:16.420
channel will have one
Likes playlist.

00:14:16.420 --> 00:14:18.010
So what we're going
to do is we're

00:14:18.010 --> 00:14:18.720
going to get that playlist.

00:14:18.720 --> 00:14:20.000
We're going to get
the Playlist ID.

00:14:20.000 --> 00:14:22.760
Then we're going to make an API
call against the Playlist

00:14:22.760 --> 00:14:26.615
API to find all the videos that
belong on that playlist.

00:14:26.615 --> 00:14:27.990
Does that sound good to you?

00:14:27.990 --> 00:14:29.310
Am I leaving anything out?

00:14:29.310 --> 00:14:30.650
JEFF POSNICK: It does
sound good to me.

00:14:30.650 --> 00:14:32.460
This is the same sort of method
you could use to get a

00:14:32.460 --> 00:14:35.410
list of all the videos that are
in any playlist, or your

00:14:35.410 --> 00:14:37.580
Uploads playlist.

00:14:37.580 --> 00:14:39.740
If you wanted to get all the
videos that are uploaded in a

00:14:39.740 --> 00:14:42.400
specific channel, same
method, just

00:14:42.400 --> 00:14:42.620
slightly different playlist.

00:14:42.620 --> 00:14:44.480
IKAI LAN: Watch Later
playlist.

00:14:44.480 --> 00:14:47.920
But these are all the concepts
of a playlist.

00:14:47.920 --> 00:14:50.205
Again, you can use this
for Get My Uploads.

00:14:50.205 --> 00:14:52.680
The only reason I'm changing
this around a little bit is

00:14:52.680 --> 00:14:56.180
because we already have a couple
of code samples for Get

00:14:56.180 --> 00:14:58.200
My Uploads in pretty much
every language.

00:14:58.200 --> 00:15:01.800
So I'm only modifying this a
little bit, but really, I

00:15:01.800 --> 00:15:05.440
think the code is very much the
same except for one string

00:15:05.440 --> 00:15:07.420
substitution.

00:15:07.420 --> 00:15:09.170
Oops, getting ahead of myself.

00:15:09.170 --> 00:15:11.320
So now let's go ahead
and do that now.

00:15:11.320 --> 00:15:14.920
I am in the API Explorer, and
like I mentioned, I need to

00:15:14.920 --> 00:15:18.100
fetch your channels.

00:15:18.100 --> 00:15:21.140
I need to fetch your channel and
I need to figure out, hey,

00:15:21.140 --> 00:15:23.485
what is the ID of my
Likes playlist?

00:15:23.485 --> 00:15:26.130
Now unfortunately, it's not
a predictable string.

00:15:26.130 --> 00:15:28.550
You can't just take your
channel name, append

00:15:28.550 --> 00:15:31.550
-playlist, and have
that be your ID.

00:15:31.550 --> 00:15:33.770
So instead, we're going to have
to go ahead and query the

00:15:33.770 --> 00:15:39.610
API and figure out what the
ID of that playlist is.

00:15:39.610 --> 00:15:40.290
That make sense?

00:15:40.290 --> 00:15:41.360
JEFF POSNICK: It does.

00:15:41.360 --> 00:15:44.480
You talk about you here,
knowing your playlist.

00:15:44.480 --> 00:15:46.120
So I assume there's going
to be some sort of--

00:15:46.120 --> 00:15:47.730
IKAI LAN: It's going to be my
playlist because we're going

00:15:47.730 --> 00:15:48.845
to be from my test account.

00:15:48.845 --> 00:15:50.520
JEFF POSNICK: I know, and it
seems like there has to be

00:15:50.520 --> 00:15:53.160
some component here where the
code actually knows who you

00:15:53.160 --> 00:15:55.130
are, so hopefully you'll
talk about that, too.

00:15:55.130 --> 00:15:57.530
IKAI LAN: He's trying to lure
me into talking about

00:15:57.530 --> 00:15:58.100
authentication.

00:15:58.100 --> 00:16:00.560
JEFF POSNICK: I bait Ikai all
the time to try to get him

00:16:00.560 --> 00:16:04.005
into talking about OAuth2
because there's nothing Ikai

00:16:04.005 --> 00:16:04.660
likes more.

00:16:04.660 --> 00:16:06.530
IKAI LAN: He actually
does do this.

00:16:06.530 --> 00:16:08.830
We have an article
coming out soon.

00:16:08.830 --> 00:16:10.440
No ETA on that.

00:16:10.440 --> 00:16:12.510
So let's go ahead and start
playing around with the

00:16:12.510 --> 00:16:14.270
Explorer right now.

00:16:14.270 --> 00:16:15.280
Now let's go find my channel.

00:16:15.280 --> 00:16:17.680
I'm going to click on Channels
over here in the API Explorer.

00:16:17.680 --> 00:16:18.820
I'm going to zoom in on
this so you guys can

00:16:18.820 --> 00:16:20.150
see what I'm doing.

00:16:20.150 --> 00:16:22.920
Now, a Channel Resource contains
information about a

00:16:22.920 --> 00:16:23.880
YouTube channel.

00:16:23.880 --> 00:16:26.440
All I did was read that
off the documentation.

00:16:26.440 --> 00:16:29.760
So we can update data about
the channel or we can find

00:16:29.760 --> 00:16:30.660
information about a channel.

00:16:30.660 --> 00:16:32.860
If we want to find information,
it's a List

00:16:32.860 --> 00:16:37.570
operation, so I'm going to
go ahead and click List.

00:16:37.570 --> 00:16:40.940
Now, I'm going to go ahead and
scroll down, and you'll see

00:16:40.940 --> 00:16:43.070
that I have the API
Explorer here.

00:16:43.070 --> 00:16:44.710
I'm not going to enter anything
in here, and I'm just

00:16:44.710 --> 00:16:46.920
going to run this thing
and see what happens.

00:16:46.920 --> 00:16:49.030
It's not going to work.

00:16:49.030 --> 00:16:50.070
I've got an error.

00:16:50.070 --> 00:16:50.770
What's the error?

00:16:50.770 --> 00:16:51.860
It's a bad request.

00:16:51.860 --> 00:16:54.470
Well, I need to put in a
required parameter, which is

00:16:54.470 --> 00:16:56.610
part, so let me go ahead
and do that.

00:16:56.610 --> 00:16:59.780
Let's get
id,snippet,contentDetails.

00:16:59.780 --> 00:17:01.630
And where did I get
these values from?

00:17:01.630 --> 00:17:03.460
Right here in this paragraph.

00:17:03.460 --> 00:17:05.839
Usually, most of the things
that you want tend to come

00:17:05.839 --> 00:17:08.690
from id,snippet or
contentDetails.

00:17:08.690 --> 00:17:11.579
They vary slightly in what they
do, and we'll experiment

00:17:11.579 --> 00:17:13.610
a little bit with this
to see what it does.

00:17:13.610 --> 00:17:17.000
I'm going to go ahead and
hit Execute again.

00:17:17.000 --> 00:17:18.490
I have another error.

00:17:18.490 --> 00:17:19.760
I didn't pass in a filter.

00:17:19.760 --> 00:17:20.440
JEFF POSNICK: There you go.

00:17:20.440 --> 00:17:22.990
IKAI LAN: So when you're
searching for channels, there

00:17:22.990 --> 00:17:24.170
are a few things that
can happen.

00:17:24.170 --> 00:17:28.079
You might have to enter a filter
to say, I want you to

00:17:28.079 --> 00:17:30.400
narrow down the types of
channels I'm looking for.

00:17:30.400 --> 00:17:32.950
Now really, I'm just looking
for my channels.

00:17:32.950 --> 00:17:36.090
So right now, I'm logged into
my test account, and my test

00:17:36.090 --> 00:17:37.520
account is
dino.dinosaurtest@gmail.com.

00:17:40.520 --> 00:17:42.500
It's named after a stuffed
dinosaur I keep

00:17:42.500 --> 00:17:44.720
on my desk at work.

00:17:44.720 --> 00:17:47.510
So I'm going to go ahead and
scroll down first and try to

00:17:47.510 --> 00:17:50.500
add a filter, and the filter
here is going to be mine.

00:17:50.500 --> 00:17:52.530
Do I just want to get
back my channels,

00:17:52.530 --> 00:17:54.560
Dino Dinosaur's channels?

00:17:54.560 --> 00:17:56.450
I'm going to click true, and I'm
going to try and execute

00:17:56.450 --> 00:17:59.220
this again.

00:17:59.220 --> 00:18:00.110
More errors!

00:18:00.110 --> 00:18:00.585
What's going on?

00:18:00.585 --> 00:18:02.440
It's a 401 unauthorized.

00:18:02.440 --> 00:18:04.790
And we're saying, no, this
is an authorized request,

00:18:04.790 --> 00:18:06.180
authorization required.

00:18:06.180 --> 00:18:07.000
What do I do?

00:18:07.000 --> 00:18:09.560
Also, there's a big red bar here
that says, this method

00:18:09.560 --> 00:18:11.290
requires you to be
authenticated.

00:18:11.290 --> 00:18:13.430
You may need to activate the
toggle button above to

00:18:13.430 --> 00:18:15.500
authorize your request
using OAuth 2.0.

00:18:15.500 --> 00:18:17.810
JEFF POSNICK: Very
handy hints.

00:18:17.810 --> 00:18:20.430
IKAI LAN: I forgot to hit
this button, Jeff.

00:18:20.430 --> 00:18:21.065
It was intentional.

00:18:21.065 --> 00:18:23.970
I've been in control of this
show the whole time.

00:18:23.970 --> 00:18:25.390
JEFF POSNICK: It's not the dino
in the background pulling

00:18:25.390 --> 00:18:27.230
your strings?

00:18:27.230 --> 00:18:27.740
IKAI LAN: All right.

00:18:27.740 --> 00:18:30.120
So now, once I click this, it's
going to ask me for which

00:18:30.120 --> 00:18:31.250
OAuth 2.0 scripts I want.

00:18:31.250 --> 00:18:33.010
I'm just going to
click Authorize.

00:18:33.010 --> 00:18:34.310
But again, this is
a good place to

00:18:34.310 --> 00:18:35.570
test different scopes.

00:18:35.570 --> 00:18:36.950
I don't need the
partner scope.

00:18:36.950 --> 00:18:38.180
I don't need the upload scope.

00:18:38.180 --> 00:18:41.430
Really, I only need the read
only scope, so I'm going to

00:18:41.430 --> 00:18:42.620
release this right here.

00:18:42.620 --> 00:18:45.660
I'm going to click Authorize.

00:18:45.660 --> 00:18:48.340
So what should happen is you
should get a pop-up box that

00:18:48.340 --> 00:18:51.130
says, hey, do you want to grant
the API Explorer access

00:18:51.130 --> 00:18:52.660
to your account?

00:18:52.660 --> 00:18:55.370
And you click OK or Cancel.

00:18:55.370 --> 00:18:57.500
I've already done that
in the past.

00:18:57.500 --> 00:18:58.670
That's why it's not
showing up.

00:18:58.670 --> 00:18:59.920
JEFF POSNICK: And that's
actually a good thing.

00:18:59.920 --> 00:19:02.086
It's less things for
your users to

00:19:02.086 --> 00:19:02.930
have to click through.

00:19:02.930 --> 00:19:05.210
If they've already granted
approval once,

00:19:05.210 --> 00:19:06.070
we know about that.

00:19:06.070 --> 00:19:06.820
We don't have to
ask them again.

00:19:06.820 --> 00:19:08.136
IKAI LAN: But it's bad for the
show because I can't show you

00:19:08.136 --> 00:19:09.570
what it looks like.

00:19:09.570 --> 00:19:11.740
But you'll see what this
looks like when I run

00:19:11.740 --> 00:19:13.040
my sample, I hope.

00:19:13.040 --> 00:19:15.170
JEFF POSNICK: Maybe you could
do super slow motion of that

00:19:15.170 --> 00:19:16.780
little pop-up or something.

00:19:16.780 --> 00:19:18.420
IKAI LAN: Whoosh.

00:19:18.420 --> 00:19:20.090
We'll have to come back
to edit this later.

00:19:20.090 --> 00:19:23.420
Anyway, let me go ahead
now and scroll

00:19:23.420 --> 00:19:24.670
down and hit Execute.

00:19:26.750 --> 00:19:28.595
Oh well, what do you know?

00:19:28.595 --> 00:19:30.600
There's my info right there.

00:19:30.600 --> 00:19:31.750
JEFF POSNICK: Very cool.

00:19:31.750 --> 00:19:33.680
IKAI LAN: So it has
information.

00:19:33.680 --> 00:19:35.940
My name is Dino Dinosaur, it's
the name of my channel.

00:19:35.940 --> 00:19:37.830
And this is just
a stock photo.

00:19:37.830 --> 00:19:38.300
It doesn't mean anything.

00:19:38.300 --> 00:19:40.510
And here are my different
playlist IDs.

00:19:40.510 --> 00:19:44.350
So again, let's go ahead
and run this in cURL

00:19:44.350 --> 00:19:46.120
and see what happens.

00:19:46.120 --> 00:19:51.500
So we're cURLing this right
here, and we're calling Get on

00:19:51.500 --> 00:19:53.440
this URL, but we're going
to have to pass in

00:19:53.440 --> 00:19:56.210
some special headers.

00:19:56.210 --> 00:20:00.130
Now, it turns out I did
put it in here.

00:20:00.130 --> 00:20:04.970
So we can add headers using the
-H and a "Header:value".

00:20:04.970 --> 00:20:09.600
So I'm going to go ahead and
construct this cURL command

00:20:09.600 --> 00:20:12.500
before I paste it to
the command line.

00:20:12.500 --> 00:20:13.750
So I'm going to do this now.

00:20:18.700 --> 00:20:19.330
There we go.

00:20:19.330 --> 00:20:20.630
Hopefully, you guys
can see this.

00:20:20.630 --> 00:20:21.370
What do you think?

00:20:21.370 --> 00:20:22.850
Bigger?

00:20:22.850 --> 00:20:24.460
"curl." We can do bigger
than that.

00:20:24.460 --> 00:20:25.770
We can do it a little
bigger than this.

00:20:25.770 --> 00:20:26.525
JEFF POSNICK: Make it bigger.

00:20:26.525 --> 00:20:27.250
There you go.

00:20:27.250 --> 00:20:28.500
IKAI LAN: Make it bigger.

00:20:28.500 --> 00:20:29.360
JEFF POSNICK: I'm not
wearing my glasses,

00:20:29.360 --> 00:20:30.380
so I can't see anything.

00:20:30.380 --> 00:20:32.480
IKAI LAN: This is only
going up by one.

00:20:32.480 --> 00:20:33.320
How's this?

00:20:33.320 --> 00:20:36.366
"curl." Now, let's go ahead
and cURL this URL, so I'm

00:20:36.366 --> 00:20:37.616
going to go ahead
and copy, paste.

00:20:40.950 --> 00:20:44.015
Of course, it chose to copy
formatting information.

00:20:46.520 --> 00:20:48.250
JEFF POSNICK: It's a
well-formatted URL.

00:20:48.250 --> 00:20:49.170
IKAI LAN: It is a well-formatted
URL.

00:20:49.170 --> 00:20:51.030
JEFF POSNICK: What more
can you ask for?

00:20:51.030 --> 00:20:53.500
IKAI LAN: So you'll see here
that this says, Your_API_Key.

00:20:53.500 --> 00:20:55.090
We'll want to replace
this with our

00:20:55.090 --> 00:20:57.490
API key, as it suggests.

00:20:57.490 --> 00:20:58.880
Let's go back to the
API Console.

00:20:58.880 --> 00:21:02.690
Now, remember earlier when I
said you use a simple API key

00:21:02.690 --> 00:21:04.170
for simple requests?

00:21:04.170 --> 00:21:04.640
JEFF POSNICK: Yes.

00:21:04.640 --> 00:21:06.580
IKAI LAN: That would be for
requests when you're saying

00:21:06.580 --> 00:21:07.610
that's public.

00:21:07.610 --> 00:21:11.690
But now, I'm acting on
behalf of a user.

00:21:11.690 --> 00:21:13.950
Really, I'm just acting
on behalf of myself.

00:21:13.950 --> 00:21:16.360
I don't want to get too much
into what this means, but

00:21:16.360 --> 00:21:19.540
anytime a user needs to be sent
through the OAuth flow or

00:21:19.540 --> 00:21:22.400
prompted for authentication,
this is when we would use the

00:21:22.400 --> 00:21:24.390
client secret.

00:21:24.390 --> 00:21:25.990
So let's go ahead
and copy this.

00:21:25.990 --> 00:21:27.790
So we're going to use the client
secret and not the

00:21:27.790 --> 00:21:30.350
simple API key.

00:21:30.350 --> 00:21:31.874
JEFF POSNICK: And you're
putting that--

00:21:31.874 --> 00:21:32.750
hmm.

00:21:32.750 --> 00:21:33.430
IKAI LAN: I am going to put--

00:21:33.430 --> 00:21:33.825
JEFF POSNICK: You
know what, Ikai?

00:21:33.825 --> 00:21:35.190
You don't actually
have to do that.

00:21:35.190 --> 00:21:35.810
IKAI LAN: Do you not?

00:21:35.810 --> 00:21:36.300
JEFF POSNICK: No.

00:21:36.300 --> 00:21:37.510
This is not part of the show.

00:21:37.510 --> 00:21:38.410
We're going off script.

00:21:38.410 --> 00:21:39.480
IKAI LAN: I tested
this last night.

00:21:39.480 --> 00:21:42.520
JEFF POSNICK: It won't hurt,
but I will use this as a

00:21:42.520 --> 00:21:45.760
teaching opportunity to point
out that anytime you're

00:21:45.760 --> 00:21:49.300
actually including OAuth2
credentials in the request--

00:21:49.300 --> 00:21:51.460
IKAI LAN: Perhaps we
should take a bet.

00:21:51.460 --> 00:21:51.910
JEFF POSNICK: OK.

00:21:51.910 --> 00:21:54.800
IKAI LAN: What would you
like to wager me, Jeff?

00:21:54.800 --> 00:21:55.410
JEFF POSNICK: I don't know.

00:21:55.410 --> 00:21:57.175
IKAI LAN: How about your
first born child?

00:21:57.175 --> 00:21:57.440
JEFF POSNICK: Hey.

00:21:57.440 --> 00:21:58.130
That's my son.

00:21:58.130 --> 00:22:00.890
IKAI LAN: He actually has a
child, so it's not a real

00:22:00.890 --> 00:22:02.280
Rumpelstiltskin thing
going on here.

00:22:02.280 --> 00:22:03.950
JEFF POSNICK: No.

00:22:03.950 --> 00:22:07.300
Whenever you actually do
include OAuth2 actual

00:22:07.300 --> 00:22:09.240
credentials, which I assume
you're planning on doing--

00:22:09.240 --> 00:22:10.510
IKAI LAN: I am doing
that right now.

00:22:10.510 --> 00:22:11.400
JEFF POSNICK: It's
not necessary to

00:22:11.400 --> 00:22:12.770
put in an API key.

00:22:12.770 --> 00:22:15.550
And if you do put in an API
key, it will basically

00:22:15.550 --> 00:22:16.390
continue to work.

00:22:16.390 --> 00:22:17.920
IKAI LAN: Well, let's
test this right now.

00:22:17.920 --> 00:22:19.860
So I've gone ahead and
I've added this

00:22:19.860 --> 00:22:21.390
into my cURL command.

00:22:21.390 --> 00:22:24.060
And you'll see I've added -H.
Now, this is all one line.

00:22:24.060 --> 00:22:25.890
I'm not adding in line
breaks in here.

00:22:25.890 --> 00:22:27.910
We're going to add in
this authorization

00:22:27.910 --> 00:22:29.040
and a bearer token.

00:22:29.040 --> 00:22:34.250
This in OAuth is what we
call an access token.

00:22:34.250 --> 00:22:34.800
JEFF POSNICK: Yes.

00:22:34.800 --> 00:22:35.270
IKAI LAN: Yes.

00:22:35.270 --> 00:22:35.720
JEFF POSNICK: This
is [INAUDIBLE].

00:22:35.720 --> 00:22:36.750
IKAI LAN: I get the
names mixed up.

00:22:36.750 --> 00:22:37.720
There's an access token.

00:22:37.720 --> 00:22:39.690
I guess this is actually a
bearer token, but I guess that

00:22:39.690 --> 00:22:40.320
that's [INAUDIBLE].

00:22:40.320 --> 00:22:42.330
JEFF POSNICK: It's a type
of access token, yeah.

00:22:42.330 --> 00:22:44.990
IKAI LAN: Yeah and sometimes you
use a refresh token to get

00:22:44.990 --> 00:22:46.110
a bearer token.

00:22:46.110 --> 00:22:47.540
It's a little bit complex and
we're not going to get too

00:22:47.540 --> 00:22:50.050
much into that today, but
we do understand it all.

00:22:52.550 --> 00:22:53.970
JEFF POSNICK: We're not making
this up as we go along.

00:22:53.970 --> 00:22:55.250
IKAI LAN: I'm going to go ahead
and copy and paste this

00:22:55.250 --> 00:22:59.730
into here, and it looks like
I've lost the bet.

00:22:59.730 --> 00:23:01.430
So I will tell you this.

00:23:01.430 --> 00:23:03.510
I think the reason I think
that this didn't work is

00:23:03.510 --> 00:23:06.400
because I actually copied in the
simple API key, and that

00:23:06.400 --> 00:23:07.950
causes something weird
to happen.

00:23:07.950 --> 00:23:12.760
But we'll find out right
now since we can.

00:23:12.760 --> 00:23:16.920
So I'm going to go ahead and
copy the simple API key in.

00:23:16.920 --> 00:23:18.440
Let's see right here.

00:23:18.440 --> 00:23:21.720
And key equals blah.

00:23:21.720 --> 00:23:24.630
And again, this is annoying
because it's copying the

00:23:24.630 --> 00:23:26.620
formatting.

00:23:26.620 --> 00:23:28.750
Let's copy, paste in here.

00:23:28.750 --> 00:23:31.540
And there, you will get
invalid credentials.

00:23:31.540 --> 00:23:36.230
So if you are getting invalid
credentials if you're hand

00:23:36.230 --> 00:23:38.730
rolling your own code, make sure
that you're not passing a

00:23:38.730 --> 00:23:39.690
simple API key.

00:23:39.690 --> 00:23:43.350
Make sure that you are taking it
out, or [INAUDIBLE] secret.

00:23:43.350 --> 00:23:44.855
JEFF POSNICK: Or putting
some random value in.

00:23:44.855 --> 00:23:47.210
Apparently that's better
than actually--

00:23:47.210 --> 00:23:48.130
IKAI LAN: Well, I don't know.

00:23:48.130 --> 00:23:49.910
I don't think the random
value will work.

00:23:49.910 --> 00:23:50.730
Let's try that.

00:23:50.730 --> 00:23:51.990
Let's give that a try.

00:23:51.990 --> 00:23:53.560
Random value.

00:23:53.560 --> 00:23:54.540
I am really--

00:23:54.540 --> 00:23:56.350
JEFF POSNICK: That's
not random, though.

00:23:56.350 --> 00:23:57.040
IKAI LAN: There you go.

00:23:57.040 --> 00:23:59.240
You'll still get invalid
credentials.

00:23:59.240 --> 00:24:03.530
So let's do one more test,
just for the LOLs.

00:24:03.530 --> 00:24:05.080
Just for the LOLs.

00:24:05.080 --> 00:24:07.610
JEFF POSNICK: That what
the show's all about.

00:24:07.610 --> 00:24:10.900
That's what it's devolved
into, nothing else.

00:24:10.900 --> 00:24:12.225
IKAI LAN: That's why
I do this show.

00:24:12.225 --> 00:24:14.140
We're going to go ahead and
copy and paste this,

00:24:14.140 --> 00:24:15.900
and look, it works.

00:24:15.900 --> 00:24:19.680
So I feel like I win
part of this bet.

00:24:19.680 --> 00:24:22.100
JEFF POSNICK: Part of my son--
we're getting into the King

00:24:22.100 --> 00:24:23.360
Solomon situation, chopping
up my son.

00:24:23.360 --> 00:24:25.670
IKAI LAN: The King Solomon
situation.

00:24:25.670 --> 00:24:26.340
JEFF POSNICK: I don't know.

00:24:26.340 --> 00:24:27.413
IKAI LAN: We'll have to
edit that joke out.

00:24:27.413 --> 00:24:28.280
JEFF POSNICK: OK.

00:24:28.280 --> 00:24:28.940
IKAI LAN: I'm just kidding.

00:24:28.940 --> 00:24:30.224
We're not going to
edit this show.

00:24:30.224 --> 00:24:31.880
[LAUGHTER]

00:24:31.880 --> 00:24:33.980
IKAI LAN: So let's go back
and see what we did here.

00:24:33.980 --> 00:24:37.210
Now again, I feel like I'm
proving to you guys that this

00:24:37.210 --> 00:24:40.040
works, and that this really is
just making the HTTP request.

00:24:40.040 --> 00:24:42.190
The API Explorer is just really
nice in helping us

00:24:42.190 --> 00:24:44.790
format some of these parameters,
and I'll show you

00:24:44.790 --> 00:24:45.510
what this means.

00:24:45.510 --> 00:24:52.750
Now really, the only thing that
we need from here is this

00:24:52.750 --> 00:24:55.925
right here, is this Likes ID
from the Likes playlist.

00:24:55.925 --> 00:24:58.285
So I'm looking at all this
other data, and I

00:24:58.285 --> 00:24:59.080
don't really need it.

00:24:59.080 --> 00:25:03.600
So this Likes ID comes under
Content Details section.

00:25:03.600 --> 00:25:07.600
So why don't I go ahead
and remove ID and

00:25:07.600 --> 00:25:09.040
snippet from here?

00:25:09.040 --> 00:25:09.950
Does that sound OK to you?

00:25:09.950 --> 00:25:11.940
JEFF POSNICK: Sounds good to me,
and that's what we would

00:25:11.940 --> 00:25:12.920
recommend doing, too.

00:25:12.920 --> 00:25:14.510
IKAI LAN: We recommend
just asking for

00:25:14.510 --> 00:25:16.060
exactly what you want.

00:25:16.060 --> 00:25:18.390
This is especially important if
you're working on a mobile

00:25:18.390 --> 00:25:22.030
platform because you'll
make fewer requests.

00:25:22.030 --> 00:25:24.790
And everything's going to be
gzipped anyway, so it's all

00:25:24.790 --> 00:25:26.160
going to be small and it's
not going to take

00:25:26.160 --> 00:25:27.630
up a lot more space.

00:25:27.630 --> 00:25:29.660
In fact, it's going to take very
little, but it's just the

00:25:29.660 --> 00:25:30.710
best practice.

00:25:30.710 --> 00:25:33.040
It's just keeping your
house clean.

00:25:33.040 --> 00:25:35.190
JEFF POSNICK: And there's quota
benefits too, and all

00:25:35.190 --> 00:25:36.450
sorts of good reasons.

00:25:36.450 --> 00:25:39.240
IKAI LAN: So let's take a look
now at the response.

00:25:39.240 --> 00:25:41.130
Well, still got a lot of info.

00:25:41.130 --> 00:25:44.170
We still don't really
need this here.

00:25:44.170 --> 00:25:47.580
And I don't really need the
googlePlusUserID, so why don't

00:25:47.580 --> 00:25:49.870
we go ahead and filter this
down a little bit?

00:25:49.870 --> 00:25:50.140
JEFF POSNICK: Cool.

00:25:50.140 --> 00:25:52.540
IKAI LAN: So that's
done in the fields

00:25:52.540 --> 00:25:53.640
parameter of the request.

00:25:53.640 --> 00:25:56.190
So I'm going to click here
and, well, I can

00:25:56.190 --> 00:25:58.270
type anything in here.

00:25:58.270 --> 00:25:58.760
JEFF POSNICK: I wonder--

00:25:58.760 --> 00:26:00.490
IKAI LAN: Let's see
what happens.

00:26:00.490 --> 00:26:01.340
It blows up.

00:26:01.340 --> 00:26:02.830
It's a bad request.

00:26:02.830 --> 00:26:05.470
This thing is strict.

00:26:05.470 --> 00:26:06.980
So I'm going to click
instead on this tool

00:26:06.980 --> 00:26:09.570
called the fields editor.

00:26:09.570 --> 00:26:12.430
Now, I can select everything
but I might as well not at

00:26:12.430 --> 00:26:13.680
this point.

00:26:17.570 --> 00:26:19.090
Let's just execute
this correctly.

00:26:19.090 --> 00:26:22.940
You'll see that this is
in the items tag.

00:26:22.940 --> 00:26:26.210
So when we go back to the fields
editor, let's expand

00:26:26.210 --> 00:26:27.700
the items tag.

00:26:27.700 --> 00:26:29.240
We really only care about
the contentDetails.

00:26:32.110 --> 00:26:34.440
There you go.

00:26:34.440 --> 00:26:35.400
I think this is going
to give us the

00:26:35.400 --> 00:26:36.780
exact same thing, actually.

00:26:36.780 --> 00:26:38.520
JEFF POSNICK: No, it'll
be a little less.

00:26:38.520 --> 00:26:39.940
IKAI LAN: Yeah, you're right.

00:26:39.940 --> 00:26:45.230
So you'll see that, again, this
is all we're getting.

00:26:45.230 --> 00:26:46.810
We're getting back items
and contentDetails.

00:26:46.810 --> 00:26:49.330
If I wanted more than this, I
would go back and add more

00:26:49.330 --> 00:26:51.290
fields, like what do I want?

00:26:51.290 --> 00:26:52.930
How about the nextPageToken?

00:26:52.930 --> 00:26:55.150
I'm not going to talk about
it this show, but the way

00:26:55.150 --> 00:26:59.730
pagination works is you pass
the nextPageToken into the

00:26:59.730 --> 00:27:00.830
next API request.

00:27:00.830 --> 00:27:05.220
So when I scroll down here and
there is no next page,

00:27:05.220 --> 00:27:06.800
therefore, there's
no nextPageToken.

00:27:06.800 --> 00:27:09.250
But what you would do is when
you do get back a token, you

00:27:09.250 --> 00:27:11.210
would pass it into this
pageToken parameter, and

00:27:11.210 --> 00:27:13.830
that's how you go on paginating
your request.

00:27:13.830 --> 00:27:16.150
JEFF POSNICK: And another way
you might use this, if you

00:27:16.150 --> 00:27:18.440
know that you only want the
Likes Playlist ID, for

00:27:18.440 --> 00:27:21.400
instance, you can drill down
even further within

00:27:21.400 --> 00:27:25.240
contentDetails and say, only
return the Likes Playlist ID.

00:27:25.240 --> 00:27:26.860
But you don't need to.

00:27:26.860 --> 00:27:27.900
IKAI LAN: So I'm going to
go ahead and copy this

00:27:27.900 --> 00:27:30.150
right now, this ID.

00:27:30.150 --> 00:27:32.850
And let's go to a
different page.

00:27:32.850 --> 00:27:36.000
Now again, let's go to the API
Reference and let's click on

00:27:36.000 --> 00:27:38.070
Playlistitems.

00:27:38.070 --> 00:27:44.120
We're going to click on list,
and it looks similar.

00:27:44.120 --> 00:27:45.550
So let's scroll down.

00:27:45.550 --> 00:27:46.860
JEFF POSNICK: Passing
all the sample code.

00:27:46.860 --> 00:27:49.040
IKAI LAN: Passing all
the sample code.

00:27:49.040 --> 00:27:50.420
We're going to authorize
the request.

00:27:50.420 --> 00:27:52.680
Click Authorize.

00:27:52.680 --> 00:27:53.430
Let's see.

00:27:53.430 --> 00:27:58.070
Let's just get everything for
now to see what we're getting.

00:27:58.070 --> 00:28:01.860
Now let's scroll down and
put in a playlistID,

00:28:01.860 --> 00:28:04.010
and let's hit Execute.

00:28:04.010 --> 00:28:05.260
And what do we see now?

00:28:05.260 --> 00:28:08.390
Well, here we go.

00:28:08.390 --> 00:28:10.770
We see all the videos
in my playlist.

00:28:10.770 --> 00:28:13.910
I made a playlist
of dogs dancing.

00:28:13.910 --> 00:28:16.800
JEFF POSNICK: Because that's
what Dino likes.

00:28:16.800 --> 00:28:19.390
IKAI LAN: That's what
Dino likes, not me.

00:28:19.390 --> 00:28:22.240
Let's go ahead and translate
this into code.

00:28:22.240 --> 00:28:23.550
I'm going to open up IntelliJ.

00:28:23.550 --> 00:28:26.170
This is just the ID I'm using,
and I commented out the code's

00:28:26.170 --> 00:28:29.210
already working in case we run
out of time, which we might.

00:28:29.210 --> 00:28:29.950
We'll see.

00:28:29.950 --> 00:28:31.630
We'll just play it by ear.

00:28:31.630 --> 00:28:34.855
So I'm going to go ahead and
remove this because this is

00:28:34.855 --> 00:28:36.270
code I've already written.

00:28:36.270 --> 00:28:38.430
Now, if you download our Java
samples-- and these are

00:28:38.430 --> 00:28:44.550
available at code.google.com/
pe/youtube-api-samples, or you

00:28:44.550 --> 00:28:46.740
can search for "YouTube API
samples" and find them.

00:28:46.740 --> 00:28:47.900
JEFF POSNICK: They're also
in line in the Docs.

00:28:47.900 --> 00:28:49.790
IKAI LAN: They're also
in line in the Docs.

00:28:49.790 --> 00:28:53.930
For Java, it's better if you go
to the samples because you

00:28:53.930 --> 00:28:56.450
get a Maven project, and
that way it'll build

00:28:56.450 --> 00:28:58.180
everything for you.

00:28:58.180 --> 00:29:00.350
But once you've built it, then
you can go ahead and make

00:29:00.350 --> 00:29:01.370
changes as needed.

00:29:01.370 --> 00:29:05.070
So all of this is boilerplate
right here.

00:29:05.070 --> 00:29:08.590
I'm just prompting the user for
permission, I'm giving an

00:29:08.590 --> 00:29:10.390
HTTP transport, and
I'm creating this

00:29:10.390 --> 00:29:12.590
YouTube client object.

00:29:12.590 --> 00:29:14.630
And this is what we're going
to be working on.

00:29:14.630 --> 00:29:16.500
So again, let's try to
remember what we did.

00:29:16.500 --> 00:29:17.530
Let's do a quick review.

00:29:17.530 --> 00:29:22.210
We went, we listed the channels,
and we got back

00:29:22.210 --> 00:29:23.970
contentDetails.

00:29:23.970 --> 00:29:26.500
We set it to my playlist.

00:29:26.500 --> 00:29:28.650
And then we made an
API call to the

00:29:28.650 --> 00:29:30.730
Playlist Items playlist.

00:29:30.730 --> 00:29:33.380
So let's go ahead and
replicate that here.

00:29:33.380 --> 00:29:37.020
So the first thing we need
to do is get my channels.

00:29:37.020 --> 00:29:38.320
So I'm going to go ahead
and write this code.

00:29:38.320 --> 00:29:40.600
And because I'm using IntelliJ
and this is Java, I get code

00:29:40.600 --> 00:29:41.430
completion.

00:29:41.430 --> 00:29:43.655
So you'll see that all of these
are available in the

00:29:43.655 --> 00:29:44.420
Java client.

00:29:44.420 --> 00:29:46.340
Now, what is it that
we want to get?

00:29:46.340 --> 00:29:47.900
We want channels.

00:29:47.900 --> 00:29:49.960
So this will be a
channels method.

00:29:49.960 --> 00:29:53.060
Now, notice that there was
also a capital Channel.

00:29:53.060 --> 00:29:54.750
This is not what we want,
and I'll show you

00:29:54.750 --> 00:29:55.950
what this means later.

00:29:55.950 --> 00:29:57.440
That's actually a
package name.

00:29:59.970 --> 00:30:02.790
Now, let's go back here
to see what we did.

00:30:02.790 --> 00:30:04.970
You'll see that we did channels

00:30:04.970 --> 00:30:06.260
and the list operation.

00:30:06.260 --> 00:30:09.670
Now, this is really important.

00:30:09.670 --> 00:30:11.345
We're going to channels
and list.

00:30:11.345 --> 00:30:12.010
Why?

00:30:12.010 --> 00:30:15.230
Because we have a method
here called list.

00:30:15.230 --> 00:30:16.400
JEFF POSNICK: That
is always useful.

00:30:16.400 --> 00:30:17.410
IKAI LAN: It's very useful.

00:30:17.410 --> 00:30:18.560
And it takes a string.

00:30:18.560 --> 00:30:20.530
Now, what goes in that string?

00:30:20.530 --> 00:30:21.970
Let's scroll down and see.

00:30:21.970 --> 00:30:24.800
Well, there's the one required
bit, which is the part.

00:30:24.800 --> 00:30:28.380
Let's go ahead and copy
contentDetails, create a

00:30:28.380 --> 00:30:30.720
string here.

00:30:30.720 --> 00:30:33.160
And now we start to set
parameters on it, and this is

00:30:33.160 --> 00:30:36.230
using the Java builder
pattern.

00:30:36.230 --> 00:30:39.590
So let's go ahead and
setMine, and this is

00:30:39.590 --> 00:30:40.590
kind of a funny thing.

00:30:40.590 --> 00:30:43.390
We need to use a string true
and not a Boolean true.

00:30:43.390 --> 00:30:45.580
In some of the languages, you
can just get away with a

00:30:45.580 --> 00:30:47.910
Boolean instead of a string, but
if a Boolean doesn't work,

00:30:47.910 --> 00:30:51.440
just try passing in the string
and see what happens.

00:30:51.440 --> 00:30:53.550
Now, I think that's all we need,
so we're going to go

00:30:53.550 --> 00:30:55.190
ahead and call execute
on that.

00:30:55.190 --> 00:30:59.660
And you'll see that the return
type is a ChannelListResponse.

00:30:59.660 --> 00:31:05.150
So ChannelListResponse,
channelResponse.

00:31:05.150 --> 00:31:06.360
We can just do that.

00:31:06.360 --> 00:31:08.480
Autocomplete saves the day.

00:31:08.480 --> 00:31:12.280
And the ChannelListResponse is
something that responds to the

00:31:12.280 --> 00:31:15.430
iterator, it implements
iterator.

00:31:15.430 --> 00:31:18.820
So what that means
is we can say--

00:31:18.820 --> 00:31:19.500
I'm sorry.

00:31:19.500 --> 00:31:20.350
Get Items does.

00:31:20.350 --> 00:31:28.340
So there's a Channel, channel,
channelListResponse, and we're

00:31:28.340 --> 00:31:32.390
going to call getItems on it
because getItems returns an

00:31:32.390 --> 00:31:35.780
array because that's what this
returns down here into JSON.

00:31:35.780 --> 00:31:39.345
This is a JSON array, and this
translates into more

00:31:39.345 --> 00:31:40.070
or less a Java list.

00:31:40.070 --> 00:31:41.130
JEFF POSNICK: Yeah, it's really
nice that there's a

00:31:41.130 --> 00:31:43.880
direct mapping between what you
see in the JSON and what

00:31:43.880 --> 00:31:48.770
the methods and parameters are
in the Java client library and

00:31:48.770 --> 00:31:50.220
all the other client
libraries, too.

00:31:50.220 --> 00:31:53.705
IKAI LAN: Now, just for fun,
let's go ahead and output.

00:31:57.750 --> 00:32:00.050
Let me see how I did this.

00:32:00.050 --> 00:32:01.930
contentDetails we care about.

00:32:01.930 --> 00:32:04.830
So every one of these objects
has a contentDetails and

00:32:04.830 --> 00:32:05.590
relatedPlaylists.

00:32:05.590 --> 00:32:06.910
So what that means is we could
say channel.getConte

00:32:06.910 --> 00:32:08.160
ntDetails.getRelatedPlaylist.

00:32:11.780 --> 00:32:12.460
There you go.

00:32:12.460 --> 00:32:12.750
JEFF POSNICK: There you go.

00:32:12.750 --> 00:32:14.760
IKAI LAN: And we get back a
related playlist object.

00:32:14.760 --> 00:32:17.470
So we can say get, and do we
want to get the Likes,

00:32:17.470 --> 00:32:19.700
Favorites, Uploads,
or WatchHistory?

00:32:19.700 --> 00:32:21.720
Let's get back the Likes.

00:32:21.720 --> 00:32:23.880
Now, we're just printing this
for now, so let's go ahead and

00:32:23.880 --> 00:32:26.940
run this code.

00:32:26.940 --> 00:32:28.540
JEFF POSNICK: And while it's
running, I think what Ikai

00:32:28.540 --> 00:32:30.530
just did is something you'll
find yourself doing a lot when

00:32:30.530 --> 00:32:32.780
you're writing code, going back
and forth between the API

00:32:32.780 --> 00:32:35.090
Explorer and looking at what
the actual response looks

00:32:35.090 --> 00:32:37.790
like, and then translating that
into code in whatever

00:32:37.790 --> 00:32:38.660
language you're working with.

00:32:38.660 --> 00:32:40.250
IKAI LAN: And this is too small
on screen, but you'll

00:32:40.250 --> 00:32:43.330
see that it output
the channel ID.

00:32:43.330 --> 00:32:43.640
JEFF POSNICK: Cool.

00:32:43.640 --> 00:32:44.940
IKAI LAN: So now we've
done the first step--

00:32:44.940 --> 00:32:47.470
JEFF POSNICK: So you must
already be authenticated or

00:32:47.470 --> 00:32:48.160
authorized.

00:32:48.160 --> 00:32:49.070
IKAI LAN: That's a
good point, Jeff.

00:32:49.070 --> 00:32:50.760
I'm already authorized.

00:32:50.760 --> 00:32:52.310
That's because I ran
this yesterday.

00:32:52.310 --> 00:32:57.100
But really, actually, it saves
the credentials in this weird

00:32:57.100 --> 00:32:59.230
directory in my home directory,
so I don't want to

00:32:59.230 --> 00:33:00.230
clear that right now.

00:33:00.230 --> 00:33:02.470
But normally what this should do
is this should open up your

00:33:02.470 --> 00:33:05.970
default browser and ask you,
do you want to give this

00:33:05.970 --> 00:33:09.370
registered application access
to act on your behalf?

00:33:09.370 --> 00:33:10.450
And then you could
say yes or no.

00:33:10.450 --> 00:33:12.890
JEFF POSNICK: But again, this
is another important point

00:33:12.890 --> 00:33:15.280
that a lot of people struggle
wrapping their heads around.

00:33:15.280 --> 00:33:18.140
Even though you're using OAuth2
and the initial time

00:33:18.140 --> 00:33:20.490
you go through it, you have to
open up a browser and click

00:33:20.490 --> 00:33:22.990
OK, most of the client libraries
have ways of saving

00:33:22.990 --> 00:33:24.360
those credentials and
reusing them.

00:33:24.360 --> 00:33:26.130
That's what Ikai just
demonstrated.

00:33:26.130 --> 00:33:29.360
So after you do that once, you
really don't have to keep

00:33:29.360 --> 00:33:30.090
going to a browser.

00:33:30.090 --> 00:33:30.760
It'll save it for you.

00:33:30.760 --> 00:33:32.506
IKAI LAN: And in a future show,
we'll talk about some of

00:33:32.506 --> 00:33:35.362
the different strategies you can
use to save these tokens

00:33:35.362 --> 00:33:36.940
for long lived reuse.

00:33:36.940 --> 00:33:40.310
One question we commonly get
is, well, I'm going to be

00:33:40.310 --> 00:33:42.060
running this on a
headless box.

00:33:42.060 --> 00:33:44.060
I don't want the user to have
to authenticate every time.

00:33:44.060 --> 00:33:46.213
And you don't have to because
what you can use, you can use

00:33:46.213 --> 00:33:47.200
an offline token.

00:33:47.200 --> 00:33:50.460
You authenticate on your own
laptop, save the token, copy

00:33:50.460 --> 00:33:53.110
the token onto the server,
and then just use that

00:33:53.110 --> 00:33:54.540
token over and over.

00:33:54.540 --> 00:33:57.595
Or you can just have the server
spin up a temporary web

00:33:57.595 --> 00:33:59.990
page, have you authenticate, and
then quickly take down the

00:33:59.990 --> 00:34:00.460
web server.

00:34:00.460 --> 00:34:02.390
And we'll show you some
strategies about saving the

00:34:02.390 --> 00:34:05.660
token, really save in a flat
file, save in a database,

00:34:05.660 --> 00:34:06.490
whatever you like.

00:34:06.490 --> 00:34:07.300
JEFF POSNICK: There's
different ways.

00:34:07.300 --> 00:34:08.934
IKAI LAN: We're going to show
you some ways in a future

00:34:08.934 --> 00:34:10.219
show, not this show.

00:34:10.219 --> 00:34:11.510
JEFF POSNICK: Indeed.

00:34:11.510 --> 00:34:15.880
IKAI LAN: So now we have this
likesPlaylistId variable.

00:34:15.880 --> 00:34:18.650
So let's go ahead and make
the second API call.

00:34:18.650 --> 00:34:21.120
So the second API call, if you
recall, we're going back to

00:34:21.120 --> 00:34:25.199
PlaylistItems, and this
is another list call.

00:34:25.199 --> 00:34:28.060
So let's go back to
our YouTube client

00:34:28.060 --> 00:34:28.760
and let's do this.

00:34:28.760 --> 00:34:29.580
YouTube--

00:34:29.580 --> 00:34:31.870
this is our YouTube client--
.playlistItems.

00:34:31.870 --> 00:34:33.929
Hey, autocomplete's great.

00:34:33.929 --> 00:34:36.960
Now, I've already imported all
of these, and that's why some

00:34:36.960 --> 00:34:38.610
of these, I didn't have
to do anything.

00:34:38.610 --> 00:34:41.420
But usually, your ID will be
smart enough to say, hey,

00:34:41.420 --> 00:34:44.750
which one of these do
you want to import?

00:34:44.750 --> 00:34:45.920
It'll give you a hint,
and you could say,

00:34:45.920 --> 00:34:46.860
yes, that's the one.

00:34:46.860 --> 00:34:49.790
And you'll see that on top,
it'll handle the importing

00:34:49.790 --> 00:34:50.370
everything for you.

00:34:50.370 --> 00:34:53.880
As long as you have the correct
JAR files in your

00:34:53.880 --> 00:34:55.980
class path, so that's
important.

00:34:55.980 --> 00:34:57.510
And if you use Maven,
those will all be

00:34:57.510 --> 00:34:58.880
taken care of for you.

00:34:58.880 --> 00:35:03.530
So a good place to start is from
our samples, download the

00:35:03.530 --> 00:35:07.220
necessary imports, and you
could just get all this

00:35:07.220 --> 00:35:09.920
autocomplete for free.

00:35:09.920 --> 00:35:11.450
So I'm going to go ahead
and call list call.

00:35:11.450 --> 00:35:12.660
Why list call?

00:35:12.660 --> 00:35:16.900
Because again, we're trying to
list the Playlist Items here.

00:35:16.900 --> 00:35:17.840
Now, let's scroll down
a little bit.

00:35:17.840 --> 00:35:22.660
It expects a string and
intuitively, it might be

00:35:22.660 --> 00:35:24.460
intuitive for you to
pass a Playlist ID.

00:35:24.460 --> 00:35:28.050
But really, if you remember
what we did here, this

00:35:28.050 --> 00:35:29.740
corresponds to the
part parameter.

00:35:29.740 --> 00:35:33.420
So the part parameter was
id,snippet,contentDetails.

00:35:33.420 --> 00:35:35.540
So let's pass that in here.

00:35:35.540 --> 00:35:37.130
Now, let's set a value.

00:35:37.130 --> 00:35:38.420
And this is using a builder
pattern, and we're going to

00:35:38.420 --> 00:35:40.490
call setPlaylistId.

00:35:40.490 --> 00:35:41.870
And with this, we're going
to give it the

00:35:41.870 --> 00:35:43.750
PlaylistId we just got.

00:35:43.750 --> 00:35:45.840
We're going to execute it.

00:35:45.840 --> 00:35:47.050
JEFF POSNICK: Is contentDetails

00:35:47.050 --> 00:35:47.890
for this call, too?

00:35:47.890 --> 00:35:49.830
I thought it was just snippet.

00:35:49.830 --> 00:35:51.900
IKAI LAN: There's id, snippet,
and contentDetails according

00:35:51.900 --> 00:35:52.610
to the Docs.

00:35:52.610 --> 00:35:53.930
JEFF POSNICK: OK, let's
see what it--

00:35:53.930 --> 00:35:56.110
IKAI LAN: Let's take a look,
see what it actually does.

00:35:56.110 --> 00:35:57.690
It gives you the videoId.

00:35:57.690 --> 00:35:58.270
JEFF POSNICK: OK.

00:35:58.270 --> 00:35:59.400
That's actually kind
of useful.

00:35:59.400 --> 00:35:59.750
Fair enough.

00:35:59.750 --> 00:36:01.520
IKAI LAN: Kind of
useful stuff.

00:36:01.520 --> 00:36:05.950
So let's go ahead and do this.

00:36:05.950 --> 00:36:08.320
We're going to go ahead and
I think this is called

00:36:08.320 --> 00:36:09.570
PlaylistItemListResponse.

00:36:13.630 --> 00:36:16.180
Let's see.
playlistItemListResponse.

00:36:16.180 --> 00:36:17.050
And this is right.

00:36:17.050 --> 00:36:20.375
Now, if I got this type wrong,
like if I said, let's give it

00:36:20.375 --> 00:36:24.630
a PlaylistListResponse, this
is going to complain.

00:36:24.630 --> 00:36:26.750
It's going to say, hey,
that's not right.

00:36:26.750 --> 00:36:30.580
And this is IntelliJ, so it's
going to fix this for me if I

00:36:30.580 --> 00:36:31.350
hit Alt-Enter.

00:36:31.350 --> 00:36:35.390
So Eclipse will do something
similar with Command-1,

00:36:35.390 --> 00:36:37.870
Control-1, whatever
system you're on.

00:36:37.870 --> 00:36:40.770
So now let's go ahead and let's
just output all of the

00:36:40.770 --> 00:36:42.350
titles of these videos.

00:36:42.350 --> 00:36:45.470
And again, let's scroll down
to the API Explorer.

00:36:45.470 --> 00:36:49.300
You'll see that there's also an
items array, and where is

00:36:49.300 --> 00:36:50.680
the title in the items array?

00:36:50.680 --> 00:36:58.420
It's in items, it's in snippet
of each particular item, and

00:36:58.420 --> 00:37:00.110
it's right here in title.

00:37:00.110 --> 00:37:01.590
So let's go ahead and do that.

00:37:01.590 --> 00:37:09.180
Let's do playlistItemResponse,
excuse me, for PlaylistItem,

00:37:09.180 --> 00:37:11.310
item, and playlistResponse.

00:37:11.310 --> 00:37:13.390
Item, getItems.

00:37:13.390 --> 00:37:15.210
There we go.

00:37:15.210 --> 00:37:18.060
Now, this is strongly typed so
we'll say, String title is

00:37:18.060 --> 00:37:19.310
equal to
item.getSnippet.getTitle.

00:37:23.570 --> 00:37:24.820
I think this will work.

00:37:28.920 --> 00:37:30.440
That's not right.

00:37:30.440 --> 00:37:31.500
[LAUGHS]

00:37:31.500 --> 00:37:32.630
I don't want that.

00:37:32.630 --> 00:37:34.300
I'm going to save this, and I'm
going to go ahead and run

00:37:34.300 --> 00:37:35.550
this thing again.

00:37:38.280 --> 00:37:39.050
And there you go.

00:37:39.050 --> 00:37:41.030
You see that it's outputting
all of these things.

00:37:41.030 --> 00:37:43.900
Now, there's an optimization we
can do here, which is let's

00:37:43.900 --> 00:37:45.540
go ahead and do a quick
optimization.

00:37:45.540 --> 00:37:49.420
Now, we only want one field from
here, so why don't we go

00:37:49.420 --> 00:37:51.790
ahead and see what we can
do to filter down the

00:37:51.790 --> 00:37:53.010
fields that we need?

00:37:53.010 --> 00:37:54.590
And we talked about this earlier
in the show using the

00:37:54.590 --> 00:37:55.400
fields editor.

00:37:55.400 --> 00:37:57.620
Let's go ahead and click this.

00:37:57.620 --> 00:37:59.280
Items, let's expand this.

00:37:59.280 --> 00:38:02.570
And this was in snippet, so
let's go to snippet, Close,

00:38:02.570 --> 00:38:05.360
and Execute it.

00:38:05.360 --> 00:38:06.330
And there we go.

00:38:06.330 --> 00:38:07.680
We've narrowed it down
significantly.

00:38:07.680 --> 00:38:10.000
Now, let's see if we can narrow
it down even more.

00:38:10.000 --> 00:38:11.390
I wonder if this will
work, /title.

00:38:14.040 --> 00:38:14.650
And there you go.

00:38:14.650 --> 00:38:15.290
It works.

00:38:15.290 --> 00:38:16.940
JEFF POSNICK: I'm going to
tell you, because this is

00:38:16.940 --> 00:38:18.660
actually a good practice.

00:38:18.660 --> 00:38:22.540
Be sure that you actually modify
your part parameter to

00:38:22.540 --> 00:38:23.840
get rid of contentDetails.

00:38:23.840 --> 00:38:24.220
IKAI LAN: That's right.

00:38:24.220 --> 00:38:26.280
JEFF POSNICK: Because it's
very wasteful to request

00:38:26.280 --> 00:38:28.140
contentDetails and then
filter it out.

00:38:28.140 --> 00:38:29.740
IKAI LAN: So let's remove
id and contentDetails.

00:38:32.260 --> 00:38:33.150
Oh, well, there you go.

00:38:33.150 --> 00:38:34.300
Now all we have is this.

00:38:34.300 --> 00:38:35.820
So let's go back and
let's optimize our

00:38:35.820 --> 00:38:37.190
code a little bit.

00:38:37.190 --> 00:38:37.640
Let's see.

00:38:37.640 --> 00:38:39.730
We only used snippet, so
remove snippet and

00:38:39.730 --> 00:38:40.980
contentDetails.

00:38:42.780 --> 00:38:46.520
Now, we still need to
filter this out.

00:38:46.520 --> 00:38:52.430
So before the Execute, let's add
a new method, setFields.

00:38:52.430 --> 00:38:55.230
And the fields, we copy
and paste what we

00:38:55.230 --> 00:38:56.480
have here in fields.

00:38:59.050 --> 00:39:01.040
So this is one long line, and
we probably want to format

00:39:01.040 --> 00:39:03.300
this better, but I'm not going
to do that for this show.

00:39:03.300 --> 00:39:04.720
We're going to run this code.

00:39:07.930 --> 00:39:09.080
And there you go.

00:39:09.080 --> 00:39:10.490
It still works and it;s
still efficient.

00:39:10.490 --> 00:39:13.000
Now, we could go ahead and also
do this with the initial

00:39:13.000 --> 00:39:14.620
playlist request, which
I'm not going to do

00:39:14.620 --> 00:39:15.750
now for time reasons.

00:39:15.750 --> 00:39:17.820
JEFF POSNICK: We're definitely
facing some time

00:39:17.820 --> 00:39:18.480
constraints right now.

00:39:18.480 --> 00:39:19.846
IKAI LAN: I am going to show you
guys one last thing before

00:39:19.846 --> 00:39:23.220
we jump off, which is sometimes,
because these are

00:39:23.220 --> 00:39:24.740
string values, they're
easy to get wrong.

00:39:24.740 --> 00:39:26.210
So let's say instead
of snippet, you put

00:39:26.210 --> 00:39:28.160
contentDetails.

00:39:28.160 --> 00:39:31.920
Now, this is still just
compile time.

00:39:31.920 --> 00:39:36.210
So when we compile this, this
will still compile because

00:39:36.210 --> 00:39:39.730
there is still a getSnippet
method on the playlist item,

00:39:39.730 --> 00:39:41.840
but this won't work.

00:39:41.840 --> 00:39:44.330
So let's go ahead and run this
code and figure out.

00:39:44.330 --> 00:39:47.500
Let's see what happens.

00:39:47.500 --> 00:39:48.750
This is going to blow up.

00:39:52.340 --> 00:39:54.670
OK, it didn't want to blow up.

00:39:54.670 --> 00:39:56.210
Let's do a better example.

00:39:56.210 --> 00:39:57.300
JEFF POSNICK: I'm sure you can
make something blow up.

00:39:57.300 --> 00:39:58.790
IKAI LAN: I can make
this blow up.

00:39:58.790 --> 00:40:00.850
We're just going to go ahead
and instead of title, we're

00:40:00.850 --> 00:40:03.650
going to say, blah.

00:40:03.650 --> 00:40:04.955
That'll make this blow up.

00:40:07.870 --> 00:40:11.750
There you go, Invalid Field
Selection, or Pointers, or

00:40:11.750 --> 00:40:15.000
whatever, Title.

00:40:15.000 --> 00:40:16.110
What's another field here?

00:40:16.110 --> 00:40:17.550
Let's just find a
good example.

00:40:17.550 --> 00:40:19.600
I'm going to go ahead
and execute this.

00:40:19.600 --> 00:40:22.387
Let's go ahead and instead of
asking for title, we'll ask

00:40:22.387 --> 00:40:23.580
for channelId.

00:40:23.580 --> 00:40:24.830
I don't know why we
would do that.

00:40:29.115 --> 00:40:31.380
We're going to get a Null
Pointer exception.

00:40:31.380 --> 00:40:31.820
There you go.

00:40:31.820 --> 00:40:32.910
So we're getting Null.

00:40:32.910 --> 00:40:34.170
What's going on here, Jeff?

00:40:34.170 --> 00:40:35.540
Help me, Jeff.

00:40:35.540 --> 00:40:36.080
I'm just kidding.

00:40:36.080 --> 00:40:37.010
Don't help me.

00:40:37.010 --> 00:40:38.610
I'll tell you what's
going on here.

00:40:38.610 --> 00:40:41.070
So let's go ahead and I'm going
to click here to set a

00:40:41.070 --> 00:40:42.940
debug breakpoint.

00:40:42.940 --> 00:40:47.060
I'm going to Run and I'm going
to call Debug in my ID.

00:40:47.060 --> 00:40:47.810
It's going to do this.

00:40:47.810 --> 00:40:50.900
Now, we've made the
API call already.

00:40:50.900 --> 00:40:53.860
I wish I could blow this up.

00:40:53.860 --> 00:40:57.080
Maybe there's a magnifying
glass thing I can use.

00:40:57.080 --> 00:40:59.580
Well, just try this out and
you'll see what I mean.

00:40:59.580 --> 00:41:04.100
When you go down here into
Debug Window, you'll see,

00:41:04.100 --> 00:41:09.240
well, let's see what's in this
PlaylistItemResponse variable.

00:41:09.240 --> 00:41:10.920
Let's open this up.

00:41:10.920 --> 00:41:13.515
So it's got the items array.

00:41:13.515 --> 00:41:16.630
It's got the items key.

00:41:16.630 --> 00:41:18.060
But what's in here?

00:41:18.060 --> 00:41:19.200
What's the value in here?

00:41:19.200 --> 00:41:20.320
Oh, it's the snippet.

00:41:20.320 --> 00:41:21.080
That's cool.

00:41:21.080 --> 00:41:24.050
And you can keep expanding down
to see what's going on.

00:41:24.050 --> 00:41:28.010
And what you'll find is that
inside the snippet, there's

00:41:28.010 --> 00:41:30.850
only the channel ID, so that's
not what we want.

00:41:30.850 --> 00:41:33.760
So let's go ahead and stop this,
and let's go ahead and

00:41:33.760 --> 00:41:36.620
fix this back into title.

00:41:36.620 --> 00:41:39.280
Now let's go ahead and
debug this again.

00:41:43.940 --> 00:41:45.760
Let's drill down.

00:41:45.760 --> 00:41:50.890
And we are going to see that if
we keep drilling down, OK,

00:41:50.890 --> 00:41:53.330
we correctly are getting the
title in here, so we can go

00:41:53.330 --> 00:41:54.140
ahead and continue.

00:41:54.140 --> 00:41:56.310
And you should really learn how
to use debugger because

00:41:56.310 --> 00:41:58.610
you can step over, step over,
step over, step over, step

00:41:58.610 --> 00:42:01.070
over, and it'll go ahead
and it'll output the

00:42:01.070 --> 00:42:02.090
titles in the video.

00:42:02.090 --> 00:42:04.680
And this is another good way of
debugging this, and there

00:42:04.680 --> 00:42:06.010
are many, many good ways
of doing this.

00:42:06.010 --> 00:42:08.190
And I know I keep saying
one last thing.

00:42:08.190 --> 00:42:10.080
There's going to be one
last thing here.

00:42:10.080 --> 00:42:12.010
And the one last thing here is
just going to be a quick

00:42:12.010 --> 00:42:15.440
introduction to the fact that
the other client libraries

00:42:15.440 --> 00:42:16.850
also look very similar.

00:42:16.850 --> 00:42:18.980
Now, this is some Python code.

00:42:18.980 --> 00:42:21.300
We don't have any time to run
this, but you'll see that once

00:42:21.300 --> 00:42:25.600
you have a YouTube client, you
call channels, and this maps

00:42:25.600 --> 00:42:28.450
directly to the code that
we've written here.

00:42:28.450 --> 00:42:29.380
Call channels.

00:42:29.380 --> 00:42:30.320
We're calling list.

00:42:30.320 --> 00:42:33.030
Now, the way we pass the part
is a little bit different.

00:42:33.030 --> 00:42:34.910
We set mine equal to True,
and again, this

00:42:34.910 --> 00:42:35.660
does take the Boolean.

00:42:35.660 --> 00:42:36.990
We call execute.

00:42:36.990 --> 00:42:40.180
And then we iterate over items,
which isn't a getItems

00:42:40.180 --> 00:42:44.180
method, but it's just items
inside a dictionary.

00:42:44.180 --> 00:42:45.170
JEFF POSNICK: That's a little
bit more Pythonic.

00:42:45.170 --> 00:42:47.440
IKAI LAN: A little bit more
Pythonic, definitely.

00:42:47.440 --> 00:42:48.480
No types.

00:42:48.480 --> 00:42:50.770
When I was writing this, I
totally forgot what some of

00:42:50.770 --> 00:42:52.900
these were called, and that's
one of the benefits of using

00:42:52.900 --> 00:42:53.890
something like Java.

00:42:53.890 --> 00:42:57.360
Or even if you're using the Go
client library, you can get

00:42:57.360 --> 00:42:59.900
autocompletion when you're using
the correct plug-ins for

00:42:59.900 --> 00:43:01.610
Go Sublime.

00:43:01.610 --> 00:43:03.770
And you'll see that I'm just
iterating through this, making

00:43:03.770 --> 00:43:08.040
another Playlist API
call here, execute.

00:43:08.040 --> 00:43:10.520
PlaylistId, I'm passing it
this playlist_id which I

00:43:10.520 --> 00:43:13.580
fetched from this parameter.

00:43:13.580 --> 00:43:14.750
This code is not as optimized.

00:43:14.750 --> 00:43:17.260
I didn't filter it down to just
the methods I needed, but

00:43:17.260 --> 00:43:18.810
you will likely be doing this
when you're writing your

00:43:18.810 --> 00:43:20.140
production code.

00:43:20.140 --> 00:43:21.300
And once that's done,
we iterate

00:43:21.300 --> 00:43:22.180
through this and we print.

00:43:22.180 --> 00:43:24.295
Well, I'm printing the videoId
here, but you could just as

00:43:24.295 --> 00:43:25.160
well print a title.

00:43:25.160 --> 00:43:27.460
And you'll see that the other
client libraries all do the

00:43:27.460 --> 00:43:28.100
same thing.

00:43:28.100 --> 00:43:31.500
So maybe in a future show, let
us know what language you're

00:43:31.500 --> 00:43:33.050
using, what language
you care about.

00:43:33.050 --> 00:43:35.170
I suspect PHP and .NET
are big in there.

00:43:35.170 --> 00:43:38.470
We'll talk about doing that
show in the future.

00:43:38.470 --> 00:43:43.940
So let's just do a quick recap
of what we talked about today.

00:43:43.940 --> 00:43:45.010
We did some error handling.

00:43:45.010 --> 00:43:47.530
And in Python, you would
use PDP, Python

00:43:47.530 --> 00:43:48.580
Debugger Set Trace.

00:43:48.580 --> 00:43:49.670
Very cool stuff.

00:43:49.670 --> 00:43:51.370
And in Python, you can
do a few more things.

00:43:51.370 --> 00:43:55.235
Because it's interpreted, you
can actually inject more code

00:43:55.235 --> 00:43:57.460
while you're debugging.

00:43:57.460 --> 00:43:58.820
So quick recap.

00:43:58.820 --> 00:44:00.175
Definitely use the
API Reference.

00:44:00.175 --> 00:44:01.625
The API Explorer
is your friend.

00:44:01.625 --> 00:44:04.030
It's available not just for
YouTube API, but for many of

00:44:04.030 --> 00:44:07.450
the popular Google APIs such
as Drive, Analytics, I

00:44:07.450 --> 00:44:08.990
believe, anything.

00:44:08.990 --> 00:44:12.060
Anything that you do in the API
Console, you can do in API

00:44:12.060 --> 00:44:13.670
Explorer for the most part.

00:44:13.670 --> 00:44:16.082
cURL is also your friend because
I didn't get to show

00:44:16.082 --> 00:44:18.530
you guys this today, but one
thing we can do is we can

00:44:18.530 --> 00:44:22.090
output what we think we are
fetching, and we can run that

00:44:22.090 --> 00:44:25.020
to cURL to figure out, is my
code doing something weird?

00:44:25.020 --> 00:44:27.490
Because realistically, these
objects aren't just going to

00:44:27.490 --> 00:44:29.670
be in one block of code.

00:44:29.670 --> 00:44:30.930
You might be doing some
crazy things where

00:44:30.930 --> 00:44:32.020
you're passing it around.

00:44:32.020 --> 00:44:35.100
I personally don't encourage
this style of coding, but you

00:44:35.100 --> 00:44:38.250
may have special needs or
you might be using a

00:44:38.250 --> 00:44:39.920
special HTTP client.

00:44:39.920 --> 00:44:41.850
So what you want to do,
especially when you're using a

00:44:41.850 --> 00:44:45.110
special HTTP client, is to
compare what your HTTP client

00:44:45.110 --> 00:44:48.720
is doing versus cURL, which is
just unadulterated HTTP.

00:44:48.720 --> 00:44:51.390
Now, why might you be using
a special HTTP client?

00:44:51.390 --> 00:44:55.060
Maybe you are batching requests,
and your client will

00:44:55.060 --> 00:44:56.940
batch them because you're
on a mobile platform.

00:44:56.940 --> 00:44:59.460
Maybe you're using Google App
Engine using your All Fetch.

00:44:59.460 --> 00:45:02.120
There are many reasons and many
valid reasons why you

00:45:02.120 --> 00:45:04.120
might want to use a different
HTTP transport.

00:45:04.120 --> 00:45:07.060
So that's why it's always nice
to have cURL as a fall back to

00:45:07.060 --> 00:45:09.730
see, is it just my API key that
is incorrect, am I just

00:45:09.730 --> 00:45:12.970
not formatting this correctly,
and so on.

00:45:12.970 --> 00:45:14.580
So it's pretty easy
to translate API

00:45:14.580 --> 00:45:15.510
Reference into code.

00:45:15.510 --> 00:45:17.820
Now, what gets slightly harder
is debugging issues.

00:45:17.820 --> 00:45:21.210
Now fortunately, we'll talk
about this in a future show,

00:45:21.210 --> 00:45:23.950
but I'm just catching exception
E, but there's

00:45:23.950 --> 00:45:26.900
another exception you can catch
here called the Google

00:45:26.900 --> 00:45:30.190
JSON exception.

00:45:30.190 --> 00:45:33.380
And in this JSON exception,
you can get details, get

00:45:33.380 --> 00:45:36.920
cause, and you can match these
against things and figure out

00:45:36.920 --> 00:45:40.740
what's going on so you can
respond to errors at run time,

00:45:40.740 --> 00:45:42.180
and that's really nice.

00:45:42.180 --> 00:45:44.430
And there are places where you
might want to do that such as

00:45:44.430 --> 00:45:48.920
if a user doesn't have
a YouTube channel.

00:45:48.920 --> 00:45:51.010
I've talked a little bit about
this in my Google I/O talk.

00:45:51.010 --> 00:45:51.760
I told you this was coming.

00:45:51.760 --> 00:45:53.320
I'm going to plug it.

00:45:53.320 --> 00:45:56.590
"Best Practices With Mobile
on YouTube." Check it out.

00:45:56.590 --> 00:45:59.220
There is a bit where I talk
about how to handle this case.

00:45:59.220 --> 00:46:02.440
So that's all that I have
for you guys today.

00:46:02.440 --> 00:46:03.840
Here are some useful links.

00:46:03.840 --> 00:46:06.640
And Jeff, did you have
any questions?

00:46:06.640 --> 00:46:09.230
JEFF POSNICK: That was super
thorough, so not really any

00:46:09.230 --> 00:46:09.900
questions here.

00:46:09.900 --> 00:46:10.925
But if you do have
any questions.

00:46:10.925 --> 00:46:12.650
IKAI LAN: Are you sure you
don't have any questions?

00:46:12.650 --> 00:46:15.140
JEFF POSNICK: I mean, I know
that we're hiring, and I know

00:46:15.140 --> 00:46:16.110
that's what you're getting at.

00:46:16.110 --> 00:46:17.250
IKAI LAN: Well, that's what
we're getting at here.

00:46:17.250 --> 00:46:18.162
JEFF POSNICK: I wanted to
plug Stack Overflow as

00:46:18.162 --> 00:46:19.430
a way to ask questions.

00:46:19.430 --> 00:46:20.230
Stack Overflow.

00:46:20.230 --> 00:46:23.540
If people do have questions,
Stack Overflow using the

00:46:23.540 --> 00:46:27.680
YouTube-API tag is the best
place to ask general

00:46:27.680 --> 00:46:28.560
programming questions.

00:46:28.560 --> 00:46:31.100
And then I guess
I'll feed you.

00:46:31.100 --> 00:46:32.330
Are we hiring, Ikai?

00:46:32.330 --> 00:46:33.710
IKAI LAN: We are hiring.

00:46:33.710 --> 00:46:34.440
Thank you for asking.

00:46:34.440 --> 00:46:37.270
I didn't expect you to
ask me that question.

00:46:37.270 --> 00:46:40.196
Check us out on
developers.google.com/jobs.

00:46:40.196 --> 00:46:42.920
We are hiring in many sites
around the world, including

00:46:42.920 --> 00:46:45.770
our headquarters in Mountain
View, New York City, for a

00:46:45.770 --> 00:46:47.850
variety of positions in
developer relations.

00:46:47.850 --> 00:46:51.970
That's not just YouTube, also
Apps Dev Rel-- that's our

00:46:51.970 --> 00:46:53.650
shorthand--

00:46:53.650 --> 00:46:56.540
Google+, AdWords, Cloud.

00:46:56.540 --> 00:46:58.480
There's so many things
to work on.

00:46:58.480 --> 00:47:00.940
JEFF POSNICK: A ton of teams and
everybody needs more help.

00:47:00.940 --> 00:47:04.270
IKAI LAN: Everybody needs help
because there's never enough--

00:47:04.270 --> 00:47:05.220
I was going to say there's
never enough

00:47:05.220 --> 00:47:06.790
work, and that's incorrect.

00:47:06.790 --> 00:47:08.520
JEFF POSNICK: No, that's
very wrong.

00:47:08.520 --> 00:47:10.910
IKAI LAN: There's never enough
time to do all the work that

00:47:10.910 --> 00:47:13.700
needs to be done, and some of
that work includes creating

00:47:13.700 --> 00:47:15.880
these shows for you guys.

00:47:15.880 --> 00:47:18.000
So thank you very much
for setting me up.

00:47:18.000 --> 00:47:19.900
It was kind of a slow setup,
but thank you.

00:47:19.900 --> 00:47:22.110
Open for a setup.

00:47:22.110 --> 00:47:24.845
And we will catch you
guys next time.

00:47:24.845 --> 00:47:25.890
JEFF POSNICK: See
you, everybody.

00:47:25.890 --> 00:47:26.690
IKAI LAN: Take it easy, guys.

00:47:26.690 --> 00:47:27.940
JEFF POSNICK: Cheers.

00:47:41.690 --> 00:48:02.200
[MUSIC PLAYING]

