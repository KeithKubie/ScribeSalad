WEBVTT
Kind: captions
Language: en

00:00:02.709 --> 00:00:04.500
COLT MCANLIS: Inspirtation's
a funny thing.

00:00:04.500 --> 00:00:06.590
I mean, there you are
idly going about your day,

00:00:06.590 --> 00:00:10.637
eating a banana, and boom, some
amazing revelation hits you.

00:00:10.637 --> 00:00:12.970
How fitting is it that all
of the technological advances

00:00:12.970 --> 00:00:15.100
we've had over the
past 40 years have

00:00:15.100 --> 00:00:17.390
been because of these
sort of crazy, amazing

00:00:17.390 --> 00:00:18.750
inspirational thoughts.

00:00:18.750 --> 00:00:21.080
Take Burrows-Wheeler
Transform, for example.

00:00:21.080 --> 00:00:22.990
It's a very common
compression algorithm

00:00:22.990 --> 00:00:25.550
for Linux and the web.

00:00:25.550 --> 00:00:27.360
But even the authors
themselves will

00:00:27.360 --> 00:00:30.230
admit that they don't fully
understand how they came up

00:00:30.230 --> 00:00:31.747
with the algorithm itself.

00:00:31.747 --> 00:00:33.830
Huh, that's the trick with
inspiration, I suppose.

00:00:33.830 --> 00:00:35.919
You get greatness
from nothingness.

00:00:35.919 --> 00:00:37.460
But it doesn't really
help you if you

00:00:37.460 --> 00:00:39.084
want to implement
the algorithm itself.

00:00:41.710 --> 00:00:43.340
But fear not, young programmer.

00:00:43.340 --> 00:00:44.120
I'm here to help.

00:00:44.120 --> 00:00:47.508
My name is Colt McAnlis, and
this is "Compressor Head."

00:00:47.508 --> 00:00:51.420
[MUSIC PLAYING]

00:00:52.890 --> 00:00:55.090
One of funny things
about information theory

00:00:55.090 --> 00:00:56.840
is that whole "theory" part.

00:00:56.840 --> 00:00:58.340
See, there's some
interesting points

00:00:58.340 --> 00:01:00.930
about the theory that don't
always work out right.

00:01:00.930 --> 00:01:03.960
Take entropy, for
example, which generally

00:01:03.960 --> 00:01:08.710
measures the information content
of a data set given in bits.

00:01:08.710 --> 00:01:10.299
But one of the
issues with entropy

00:01:10.299 --> 00:01:11.840
is that it fails to
take into account

00:01:11.840 --> 00:01:13.750
the order of the symbols.

00:01:13.750 --> 00:01:16.770
See, regardless of how
I shuffle this data set

00:01:16.770 --> 00:01:28.037
of 0 through 9 here, it will
always have an entropy of 4.

00:01:28.037 --> 00:01:30.120
But if you've been watching
the rest of our shows,

00:01:30.120 --> 00:01:33.120
you know that order
does, in fact, matter.

00:01:33.120 --> 00:01:35.580
Take delta coding, for example.

00:01:35.580 --> 00:01:38.630
If we have this variation
of our data set,

00:01:38.630 --> 00:01:40.790
we can see that the
delta-encoded version really

00:01:40.790 --> 00:01:42.990
doesn't provide us
with any lower entropy.

00:01:42.990 --> 00:01:45.900
However, if we sort
this data set, giving us

00:01:45.900 --> 00:01:48.630
the nice linear number
range from 0 to 9,

00:01:48.630 --> 00:01:52.890
the delta-encoded version
produces a much lower entropy

00:01:52.890 --> 00:01:54.690
than the source stream.

00:01:54.690 --> 00:01:56.750
Now, in an ideal world,
we'd be able to just

00:01:56.750 --> 00:01:59.520
apply this type of
sort to all of our data

00:01:59.520 --> 00:02:02.100
and end up with a perfectly
compressible stream.

00:02:02.100 --> 00:02:03.640
That's not actually
how it works.

00:02:03.640 --> 00:02:06.600
See, pure sorts are
generally one directional.

00:02:06.600 --> 00:02:09.280
That is, once you sort
it, you can't get it back

00:02:09.280 --> 00:02:12.090
in its original order without
a whole ton of extra data

00:02:12.090 --> 00:02:13.660
to tell you where
everything goes.

00:02:13.660 --> 00:02:16.640
So we can't purely sort
it, but we can get close.

00:02:16.640 --> 00:02:20.460
See, the Burrows-Wheeler
transform, or BWT,

00:02:20.460 --> 00:02:23.210
will shuffle around the
data to cluster together

00:02:23.210 --> 00:02:26.840
groups of the same symbol
as much as it possibly can.

00:02:26.840 --> 00:02:29.590
The benefit of this is that once
the symbols have been clustered

00:02:29.590 --> 00:02:32.800
together, they effectively
have an ordering, which

00:02:32.800 --> 00:02:35.450
can make it more compressible
for other algorithms

00:02:35.450 --> 00:02:36.720
that can take advantage of it.

00:02:36.720 --> 00:02:39.610
Now, remember, this isn't a
perfect sorting algorithm.

00:02:39.610 --> 00:02:41.570
It's more of a rough
clustering algorithm.

00:02:41.570 --> 00:02:43.760
Well, technically, it's a
lexographical permutation.

00:02:43.760 --> 00:02:44.450
You know what?

00:02:44.450 --> 00:02:48.330
Anyhow, the point is that BWT
has one amazing characteristic.

00:02:48.330 --> 00:02:51.330
We can encode to
and decode from BWT

00:02:51.330 --> 00:02:54.180
without having to add any
significant additional data

00:02:54.180 --> 00:02:55.190
to our stream.

00:02:55.190 --> 00:02:56.183
Let's take a look.

00:02:56.183 --> 00:02:57.064
Go!

00:02:57.064 --> 00:02:57.980
MAGNUS HYTTSTEN: Whoa!

00:02:57.980 --> 00:02:59.430
COLT MCANLIS: We
want him talking?

00:02:59.430 --> 00:03:01.920
The Transform part of
Burrows-Wheeler Transform

00:03:01.920 --> 00:03:04.970
starts by creating a table
of shifted permutations

00:03:04.970 --> 00:03:06.500
for your input stream.

00:03:06.500 --> 00:03:09.680
So let's take the word
"banana" as an example

00:03:09.680 --> 00:03:12.930
and write that in the
first row of our table.

00:03:12.930 --> 00:03:15.750
Now, on each row under that,
let's do a rotational shift

00:03:15.750 --> 00:03:17.940
of that word to the
right one character.

00:03:17.940 --> 00:03:22.140
That is, all of the letters in
our string shift to the right,

00:03:22.140 --> 00:03:25.300
and the front-most character
gets pushed onto the back.

00:03:25.300 --> 00:03:27.850
We do this for each symbol
in our stream, rotating one

00:03:27.850 --> 00:03:29.350
character to the
right, so we end up

00:03:29.350 --> 00:03:31.050
with a table whose
number of rows

00:03:31.050 --> 00:03:32.480
equals the length of the stream.

00:03:38.130 --> 00:03:40.340
The next step is to sort
the rows of this table

00:03:40.340 --> 00:03:43.410
lexographically, giving
us a sorted table form.

00:03:51.270 --> 00:03:53.460
Now, this is where some
of the dark magic happens.

00:03:53.460 --> 00:03:55.126
You can see that each
row is effectively

00:03:55.126 --> 00:03:57.870
a permutation of
the word "banana,"

00:03:57.870 --> 00:04:01.140
but also, each column is
a permutation as well.

00:04:01.140 --> 00:04:04.530
The first column, of course,
is the sorted permutation

00:04:04.530 --> 00:04:05.340
of our word.

00:04:05.340 --> 00:04:09.450
But really, what we want is
the last column, in general.

00:04:09.450 --> 00:04:13.950
This N-N-B-A-A-A has some
interesting characteristics.

00:04:13.950 --> 00:04:15.960
Notice it's got better
symbol clustering

00:04:15.960 --> 00:04:18.670
than any of the other columns,
especially our input stream

00:04:18.670 --> 00:04:21.050
and, thus, is what we
output as our encode.

00:04:28.087 --> 00:04:30.420
Now, before you run off,
there's one other piece of data

00:04:30.420 --> 00:04:31.920
that we need to grab as well.

00:04:31.920 --> 00:04:34.680
Notice that in our sorted
table, the input string

00:04:34.680 --> 00:04:36.650
actually sits at index 4.

00:04:36.650 --> 00:04:39.590
We'll need this row index
during the decode phase

00:04:39.590 --> 00:04:41.120
of the Burrows-Wheeler
Transform,

00:04:41.120 --> 00:04:43.380
because it will allow
us to move from our more

00:04:43.380 --> 00:04:47.610
compressible permutation
back to the source string.

00:04:47.610 --> 00:04:50.950
Now, you may ask yourself, why
do we choose this last column?

00:04:50.950 --> 00:04:52.670
I mean, the one right
next to it seems

00:04:52.670 --> 00:04:55.740
just as good, seems to
have very close clustering.

00:04:55.740 --> 00:04:56.660
Why not that one?

00:04:56.660 --> 00:04:58.550
Well, this is more BWT magic.

00:04:58.550 --> 00:05:00.970
See, this last column has
an interesting feature.

00:05:00.970 --> 00:05:04.200
If we have only
this, N-N-B-A-A-A,

00:05:04.200 --> 00:05:07.230
we can recover the rest of
our sorted table entirely.

00:05:07.230 --> 00:05:09.910
The other columns don't possess
the same characteristic,

00:05:09.910 --> 00:05:11.410
which is highly
important when we're

00:05:11.410 --> 00:05:14.310
trying to invert our transform.

00:05:14.310 --> 00:05:14.810
Banana.

00:05:14.810 --> 00:05:15.550
MAGNUS HYTTSTEN: That's great!

00:05:15.550 --> 00:05:16.920
COLT MCANLIS: All right.

00:05:16.920 --> 00:05:19.370
The remarkable thing about
Burrows-Wheeler Transform

00:05:19.370 --> 00:05:22.220
is not that it generates a
more compressible output--

00:05:22.220 --> 00:05:24.090
any ordinary sort
would do that--

00:05:24.090 --> 00:05:25.970
but that this
particular transform is

00:05:25.970 --> 00:05:28.940
reversible with
minimal data overhead.

00:05:28.940 --> 00:05:32.460
And to help us demonstrate that
is my good friend Magnus, who,

00:05:32.460 --> 00:05:35.644
turns out, is training for the
World Sorting Championship.

00:05:35.644 --> 00:05:36.560
MAGNUS HYTTSTEN: Yeah!

00:05:36.560 --> 00:05:37.820
Sorting is my thing.

00:05:37.820 --> 00:05:38.660
Yeah. [LAUGHS]

00:05:38.660 --> 00:05:39.170
COLT MCANLIS: Yeah.

00:05:39.170 --> 00:05:40.870
This guy right here, he's
going to take it all.

00:05:40.870 --> 00:05:41.530
All right.

00:05:41.530 --> 00:05:43.220
So at the start of
our decode step,

00:05:43.220 --> 00:05:46.960
we're given the string
N-N-B-A-A-A and the row index

00:05:46.960 --> 00:05:47.750
of 4.

00:05:47.750 --> 00:05:51.900
If you recall, N-N-B-A-A-A
represents the last column

00:05:51.900 --> 00:05:52.700
of our table.

00:05:52.700 --> 00:05:55.670
So Magnus, can you put an
N-N-B-A-A-A up on the board

00:05:55.670 --> 00:05:56.170
for us?

00:05:56.170 --> 00:05:56.850
MAGNUS HYTTSTEN: Like that?

00:05:56.850 --> 00:05:58.060
COLT MCANLIS: Just like that.

00:05:58.060 --> 00:05:59.018
MAGNUS HYTTSTEN: Great!

00:05:59.018 --> 00:05:59.852
COLT MCANLIS: DO it.

00:05:59.852 --> 00:06:01.226
Now, when he's
doing this, I want

00:06:01.226 --> 00:06:02.360
you to watch his technique.

00:06:02.360 --> 00:06:04.660
Watch the way his hand
flows through the process.

00:06:04.660 --> 00:06:05.050
MAGNUS HYTTSTEN: Yeah!

00:06:05.050 --> 00:06:05.690
Finished.

00:06:05.690 --> 00:06:06.870
COLT MCANLIS: Fantastic.

00:06:06.870 --> 00:06:07.550
Yeah.

00:06:07.550 --> 00:06:09.720
Young kids, you're
afraid of this guy.

00:06:09.720 --> 00:06:11.580
Now, once we have this
data in our table,

00:06:11.580 --> 00:06:14.740
the next step is to sort it,
which is where Magnus comes in

00:06:14.740 --> 00:06:15.240
for us.

00:06:15.240 --> 00:06:16.270
All right, Magus, you ready?

00:06:16.270 --> 00:06:17.070
MAGNUS HYTTSTEN: Absolutely.

00:06:17.070 --> 00:06:17.830
COLT MCANLIS: We're
going to do a sort.

00:06:17.830 --> 00:06:18.460
Nice warm up.

00:06:18.460 --> 00:06:19.365
Don't pull anything.

00:06:19.365 --> 00:06:19.850
MAGNUS HYTTSTEN: OK.

00:06:19.850 --> 00:06:20.850
COLT MCANLIS: All right.

00:06:20.850 --> 00:06:22.530
When you're ready, go.

00:06:22.530 --> 00:06:23.680
Excellent, good job.

00:06:23.680 --> 00:06:25.830
Great form, nice.

00:06:25.830 --> 00:06:28.250
Remember, clench those abs.

00:06:28.250 --> 00:06:30.410
Yeah, good, stay with it.

00:06:30.410 --> 00:06:31.260
Fantastic.

00:06:31.260 --> 00:06:32.525
MAGNUS HYTTSTEN: All right!

00:06:32.525 --> 00:06:33.315
Ha ha.

00:06:33.315 --> 00:06:34.570
COLT MCANLIS: This kid's good.

00:06:34.570 --> 00:06:35.220
All right.

00:06:35.220 --> 00:06:36.670
Now that we've got
a sorted table,

00:06:36.670 --> 00:06:40.510
the next step is to prepend
the input string again.

00:06:40.510 --> 00:06:43.234
So Magnus, another
N-N-B-A-A-A, please.

00:06:43.234 --> 00:06:44.400
MAGNUS HYTTSTEN: Over there?

00:06:44.400 --> 00:06:45.240
COLT MCANLIS: Right there.

00:06:45.240 --> 00:06:46.420
MAGNUS HYTTSTEN: Great, man.

00:06:46.420 --> 00:06:49.970
COLT MCANLIS: This guy
kind gets it, right?

00:06:49.970 --> 00:06:51.600
Good.

00:06:51.600 --> 00:06:52.535
Nice.

00:06:52.535 --> 00:06:53.035
Nice.

00:06:53.035 --> 00:06:53.625
MAGNUS HYTTSTEN: Ah!

00:06:53.625 --> 00:06:54.410
COLT MCANLIS: Now-- all right.

00:06:54.410 --> 00:06:56.330
Now that it's there, we've
got to do another sort.

00:06:56.330 --> 00:06:56.810
MAGNUS HYTTSTEN: A sort?

00:06:56.810 --> 00:06:57.480
COLT MCANLIS: Another sort.

00:06:57.480 --> 00:06:58.040
MAGNUS HYTTSTEN: OK.

00:06:58.040 --> 00:06:58.192
COLT MCANLIS: All right.

00:06:58.192 --> 00:06:59.170
Now, I'm going to time this one.

00:06:59.170 --> 00:06:59.680
MAGNUS HYTTSTEN: OK.

00:06:59.680 --> 00:07:01.000
COLT MCANLIS: This is going
to be a good warm up round?

00:07:01.000 --> 00:07:01.330
MAGNUS HYTTSTEN: Yeah.

00:07:01.330 --> 00:07:01.840
COLT MCANLIS: All right.

00:07:01.840 --> 00:07:02.350
Ready?

00:07:02.350 --> 00:07:04.907
When you're ready,
three, two, one, go.

00:07:04.907 --> 00:07:05.740
MAGNUS HYTTSTEN: OK.

00:07:05.740 --> 00:07:06.240
Let's go.

00:07:06.240 --> 00:07:07.698
COLT MCANLIS: Now,
remember, you've

00:07:07.698 --> 00:07:09.600
got to tighten your
abs during the sort.

00:07:09.600 --> 00:07:13.074
You're going to be judged
on speed and accuracy here.

00:07:13.074 --> 00:07:13.990
MAGNUS HYTTSTEN: Boom!

00:07:13.990 --> 00:07:14.702
COLT MCANLIS: Fantastic.

00:07:14.702 --> 00:07:15.310
Look at that.

00:07:15.310 --> 00:07:16.154
11 seconds.

00:07:16.154 --> 00:07:17.070
MAGNUS HYTTSTEN: Yeah!

00:07:17.070 --> 00:07:19.040
COLT MCANLIS: That's a
personal best for this guy.

00:07:19.040 --> 00:07:19.520
MAGNUS HYTTSTEN: Wow!

00:07:19.520 --> 00:07:20.860
COLT MCANLIS: You're
already sorting faster

00:07:20.860 --> 00:07:21.767
than Michael Phelps.

00:07:21.767 --> 00:07:23.350
MAGNUS HYTTSTEN:
That's great to know.

00:07:23.350 --> 00:07:24.430
COLT MCANLIS: I agree.

00:07:24.430 --> 00:07:26.780
So this is how the
BWT decode works.

00:07:26.780 --> 00:07:29.590
We append our input string
across the rows of our input

00:07:29.590 --> 00:07:31.870
table, then sort,
and then continue on

00:07:31.870 --> 00:07:34.730
until we've recovered
our original matrix.

00:07:34.730 --> 00:07:36.600
So Magnus, ready
for the big one?

00:07:36.600 --> 00:07:36.990
MAGNUS HYTTSTEN: Yeah.

00:07:36.990 --> 00:07:37.500
Yeah, yeah!

00:07:37.500 --> 00:07:38.100
COLT MCANLIS: All right.

00:07:38.100 --> 00:07:39.260
So here's what
we're going to do.

00:07:39.260 --> 00:07:39.820
OK?

00:07:39.820 --> 00:07:41.674
We're going to do
this four more times--

00:07:41.674 --> 00:07:42.590
MAGNUS HYTTSTEN: Four?

00:07:42.590 --> 00:07:44.490
COLT MCANLIS: --so we've
got six letters in each row.

00:07:44.490 --> 00:07:45.070
MAGNUS HYTTSTEN: Wow!

00:07:45.070 --> 00:07:45.970
COLT MCANLIS: You
think you can do it?

00:07:45.970 --> 00:07:46.390
MAGNUS HYTTSTEN: Yeah!

00:07:46.390 --> 00:07:47.630
COLT MCANLIS: Are
you ready to do it?

00:07:47.630 --> 00:07:49.479
MAGNUS HYTTSTEN: I'm
ready, ready, ready!

00:07:49.479 --> 00:07:51.520
COLT MCANLIS: This is for
the World Championship!

00:07:51.520 --> 00:07:52.645
MAGNUS HYTTSTEN: Yeah, man!

00:07:52.645 --> 00:07:53.440
Let's do it!

00:07:53.440 --> 00:07:53.970
COLT MCANLIS: Ready?

00:07:53.970 --> 00:07:54.886
MAGNUS HYTTSTEN: Yeah!

00:07:54.886 --> 00:07:56.481
COLT MCANLIS: Set, go!

00:07:56.481 --> 00:07:56.980
All right.

00:07:56.980 --> 00:07:57.510
Good.

00:07:57.510 --> 00:07:58.370
Great.

00:07:58.370 --> 00:07:59.610
Good job.

00:07:59.610 --> 00:08:00.520
Good job.

00:08:00.520 --> 00:08:05.490
N-N-B-A-A-A. We're going to
get you so many endorsements.

00:08:05.490 --> 00:08:06.767
You're almost there, Magnus.

00:08:06.767 --> 00:08:07.350
Finish strong!

00:08:07.350 --> 00:08:07.960
Finish strong!

00:08:07.960 --> 00:08:08.460
Ah!

00:08:08.460 --> 00:08:10.300
Oh-oh-oh.

00:08:10.300 --> 00:08:10.880
Man.

00:08:10.880 --> 00:08:12.147
Great job, kid.

00:08:12.147 --> 00:08:13.480
All right, all right, all right.

00:08:13.480 --> 00:08:13.990
Calm down.

00:08:13.990 --> 00:08:15.310
Why don't you hit
the showers, and I'll

00:08:15.310 --> 00:08:17.720
walk the people through the rest
of the algorithm, all right?

00:08:17.720 --> 00:08:18.430
Good job today.

00:08:18.430 --> 00:08:20.940
Good job.

00:08:20.940 --> 00:08:23.440
I don't think he's got
a shot at that one.

00:08:23.440 --> 00:08:27.110
Anyhow, thanks to Magnus, we've
got a recreated permutation

00:08:27.110 --> 00:08:29.640
table alongside
a nifty row index

00:08:29.640 --> 00:08:31.940
that we output during
the encoding phase.

00:08:31.940 --> 00:08:34.240
Since this matrix over
there is identical

00:08:34.240 --> 00:08:36.200
to the post-sorted
one from the encoder,

00:08:36.200 --> 00:08:40.010
the fourth row actually contains
the original input string,

00:08:40.010 --> 00:08:40.809
"BANANA."

00:08:40.809 --> 00:08:41.510
See?

00:08:41.510 --> 00:08:42.601
Pretty easy stuff.

00:08:42.601 --> 00:08:44.059
Oh, and to be clear,
kids, training

00:08:44.059 --> 00:08:46.140
to be a world
champion at sorting

00:08:46.140 --> 00:08:48.180
requires a lot of
practice and dedication.

00:08:48.180 --> 00:08:51.888
So eat your vegetables and
listen to your parents.

00:08:51.888 --> 00:08:53.380
MALE SPEAKER: Take one.

00:08:53.380 --> 00:08:54.700
COLT MCANLIS: How do you
make your hair do that?

00:08:54.700 --> 00:08:55.900
MALE SPEAKER: Lots
and lots of gel.

00:08:55.900 --> 00:08:56.960
COLT MCANLIS: Really?

00:08:56.960 --> 00:09:00.520
I'm gel-ous, and not
just because it's a pun.

00:09:00.520 --> 00:09:01.020
Nice.

00:09:01.020 --> 00:09:02.750
It'll take him a second.

00:09:02.750 --> 00:09:06.510
In 1994, Mike Burrows
and David Wheeler

00:09:06.510 --> 00:09:09.730
were set up to be the title
fight at the second annual UFC

00:09:09.730 --> 00:09:12.280
championship in
Las Vegas, Nevada.

00:09:12.280 --> 00:09:14.280
But before the fight,
while playing a few rounds

00:09:14.280 --> 00:09:16.690
of pai gow, the two
ended up creating

00:09:16.690 --> 00:09:21.360
the Burrows-Wheeler
Transform algorithm.

00:09:21.360 --> 00:09:24.290
MIKE BURROWS: That
isn't really true.

00:09:24.290 --> 00:09:25.510
COLT MCANLIS: No, no.

00:09:25.510 --> 00:09:26.310
No, it is not.

00:09:26.310 --> 00:09:26.912
Um-- ha.

00:09:26.912 --> 00:09:29.120
You know, one of the problems
about working at Google

00:09:29.120 --> 00:09:30.995
is you can't really
throw a stone around here

00:09:30.995 --> 00:09:33.380
without hitting the inventor
of some amazing algorithm.

00:09:33.380 --> 00:09:34.630
Ladies and gentlemen,
I want to introduce you

00:09:34.630 --> 00:09:37.380
to the co-inventor of the
Burrows-Wheeler Transform, Mr.

00:09:37.380 --> 00:09:39.440
Mike Burrows.

00:09:39.440 --> 00:09:40.950
Mike, it's fantastic to see you.

00:09:40.950 --> 00:09:43.010
Maybe if you have
a second, can you

00:09:43.010 --> 00:09:44.820
sit down and talk to us a
little bit about your algorithm?

00:09:44.820 --> 00:09:45.819
MIKE BURROWS: Certainly.

00:09:45.819 --> 00:09:49.270
I'd like to put you straight
about that title fight.

00:09:49.270 --> 00:09:50.360
COLT MCANLIS: OK.

00:09:50.360 --> 00:09:53.160
So I guess at the beginning,
let's start there.

00:09:53.160 --> 00:09:56.700
MIKE BURROWS: Well, it really
started with David Wheeler.

00:09:56.700 --> 00:09:59.250
He was on the faculty of
the University of Cambridge,

00:09:59.250 --> 00:10:03.120
but on sabbatical at Bell Labs,
and working on compression.

00:10:03.120 --> 00:10:05.290
And he came up with
the algorithm there.

00:10:05.290 --> 00:10:07.710
I only learned
about it some years

00:10:07.710 --> 00:10:09.970
later when I became
his graduate student.

00:10:09.970 --> 00:10:12.270
COLT MCANLIS: In the
world of data compression,

00:10:12.270 --> 00:10:14.200
Burrows-Wheeler Transform
just stands alone

00:10:14.200 --> 00:10:15.200
against everything else.

00:10:15.200 --> 00:10:17.460
There's nothing really like it.

00:10:17.460 --> 00:10:19.195
How did you all come up with it?

00:10:19.195 --> 00:10:20.570
MIKE BURROWS:
Well, I asked David

00:10:20.570 --> 00:10:23.490
what was going through his
mind when he came up with it

00:10:23.490 --> 00:10:24.390
originally.

00:10:24.390 --> 00:10:26.280
And he didn't know.

00:10:26.280 --> 00:10:29.160
He could not explain
to me how he came up

00:10:29.160 --> 00:10:30.740
with that particular algorithm.

00:10:30.740 --> 00:10:33.360
I got the impression that
he was playing around

00:10:33.360 --> 00:10:36.360
with sorting the
contexts of characters

00:10:36.360 --> 00:10:40.970
that were to be encoded and
using that as a good predictor.

00:10:40.970 --> 00:10:42.640
And then he must
have realized that it

00:10:42.640 --> 00:10:45.300
was possible to invert that
sort under certain conditions.

00:10:45.300 --> 00:10:47.800
COLT MCANLIS: Did you and Mike
kind of co-create the article

00:10:47.800 --> 00:10:48.670
together?

00:10:48.670 --> 00:10:51.759
Was it more of his idea,
and he handed it off to you?

00:10:51.759 --> 00:10:53.050
How did that relationship work?

00:10:53.050 --> 00:10:55.640
MIKE BURROWS: What
happened was that he never

00:10:55.640 --> 00:10:57.480
bothered writing it up.

00:10:57.480 --> 00:11:00.300
I learned about it from
him as a graduate student.

00:11:00.300 --> 00:11:04.420
And the years ticked
by after that.

00:11:04.420 --> 00:11:05.880
And he never wrote it up.

00:11:05.880 --> 00:11:07.574
At the time when
I was a student,

00:11:07.574 --> 00:11:09.490
I thought that it was
just one of those things

00:11:09.490 --> 00:11:11.240
that grad students learn.

00:11:11.240 --> 00:11:14.800
And then eventually, I realized,
no, this was really special,

00:11:14.800 --> 00:11:16.570
and the world ought
to know about it.

00:11:16.570 --> 00:11:20.810
When he did it, he did not think
of it as a practical algorithm.

00:11:20.810 --> 00:11:23.940
He thought of it as
an algorithm to use

00:11:23.940 --> 00:11:26.050
to calibrate other algorithms.

00:11:26.050 --> 00:11:29.030
It wasn't practical for
him, because he didn't have

00:11:29.030 --> 00:11:31.130
a really fast implementation.

00:11:31.130 --> 00:11:34.210
And computers at the time
were significantly slower.

00:11:34.210 --> 00:11:37.070
And so it didn't
really go fast enough.

00:11:37.070 --> 00:11:42.240
So I decided that what I should
do is write it up myself.

00:11:42.240 --> 00:11:45.290
And in order to do that,
I had to do something.

00:11:45.290 --> 00:11:47.740
And so I worked with
him to make it go fast.

00:11:47.740 --> 00:11:50.839
And we came up with ways to
implement it efficiently.

00:11:50.839 --> 00:11:52.380
COLT MCANLIS: So
I've got to ask you,

00:11:52.380 --> 00:11:55.225
in the 20 years since this
algorithm's invention, what

00:11:55.225 --> 00:11:57.709
has been the most amazing thing
you've seen it applied for?

00:11:57.709 --> 00:12:00.250
I mean, it's been everywhere,
from the Linux operating system

00:12:00.250 --> 00:12:02.720
to a protocol on the internet.

00:12:02.720 --> 00:12:05.120
What's impressed you so
much about its use so far?

00:12:05.120 --> 00:12:08.170
MIKE BURROWS: Well, I suppose
the most unexpected thing has

00:12:08.170 --> 00:12:11.140
been its use in DNA sequencing.

00:12:11.140 --> 00:12:15.340
It puts together
the fragments of DNA

00:12:15.340 --> 00:12:18.130
that have been sequenced
independently very efficiently

00:12:18.130 --> 00:12:20.700
into a combined whole.

00:12:20.700 --> 00:12:23.550
But there have been many
other advances around it,

00:12:23.550 --> 00:12:28.820
particularly in ways to do
the sorting efficiently, also

00:12:28.820 --> 00:12:32.420
variance of the transform,
one that sorts only

00:12:32.420 --> 00:12:34.250
limited-length contexts.

00:12:34.250 --> 00:12:37.090
It turns out that Michael
Schindler of the Technical

00:12:37.090 --> 00:12:41.720
University of Vienna discovered
that if you sort the context up

00:12:41.720 --> 00:12:44.600
to any finite
length k, it's still

00:12:44.600 --> 00:12:46.320
invertible as a transform.

00:12:46.320 --> 00:12:48.530
Unfortunately, the inversion
takes twice as long,

00:12:48.530 --> 00:12:50.050
so it's not popular.

00:12:50.050 --> 00:12:51.580
But it still works.

00:12:51.580 --> 00:12:54.200
David Scott and Yossi
[? Azah ?] managed

00:12:54.200 --> 00:13:00.130
to find a bijective variant
of the transform, where

00:13:00.130 --> 00:13:02.310
the size of the
transform string is

00:13:02.310 --> 00:13:04.705
exactly the same as the
size of the input string.

00:13:04.705 --> 00:13:07.080
COLT MCANLIS: So you don't
need the row index at the end?

00:13:07.080 --> 00:13:08.720
MIKE BURROWS: Yes,
that's correct.

00:13:08.720 --> 00:13:10.840
It's a bit more involved
and a bit slower

00:13:10.840 --> 00:13:14.470
to do the compression,
but it still works.

00:13:14.470 --> 00:13:16.500
And that was another
surprise for me.

00:13:16.500 --> 00:13:18.750
COLT MCANLIS: Give me a
little bit of background here.

00:13:18.750 --> 00:13:21.362
Where did you actually publish
the paper originally for this?

00:13:21.362 --> 00:13:23.320
MIKE BURROWS: There's a
funny story about that.

00:13:23.320 --> 00:13:26.940
We first of all sent the paper
to the Annual Data Compression

00:13:26.940 --> 00:13:28.030
Conference.

00:13:28.030 --> 00:13:31.010
But they rejected it.

00:13:31.010 --> 00:13:33.730
And there were no comments
about why they rejected it.

00:13:33.730 --> 00:13:37.080
So I wrote to them and asked
why they had rejected it.

00:13:37.080 --> 00:13:40.760
And they told me that it was
their policy not to explain

00:13:40.760 --> 00:13:43.030
why they rejected papers.

00:13:43.030 --> 00:13:46.680
So we just published it
as a technical report.

00:13:46.680 --> 00:13:50.020
The next year, people
at the same conference

00:13:50.020 --> 00:13:53.230
actually asked me to
submit the paper again so

00:13:53.230 --> 00:13:54.620
that they could publish it.

00:13:54.620 --> 00:13:56.420
And I said, no.

00:13:56.420 --> 00:13:58.540
And I wasn't really
going to explain why,

00:13:58.540 --> 00:14:03.150
because it was my policy not
to explain that sort of thing.

00:14:03.150 --> 00:14:07.290
So the algorithm actually
became more well known

00:14:07.290 --> 00:14:10.260
when someone else who
saw the technical report

00:14:10.260 --> 00:14:12.085
published a popular
article about it

00:14:12.085 --> 00:14:13.890
in "Dr. Dobb's Journal."

00:14:13.890 --> 00:14:17.590
So that was the first
real publication where

00:14:17.590 --> 00:14:18.980
people got to know about it.

00:14:18.980 --> 00:14:19.730
COLT MCANLIS: Wow.

00:14:19.730 --> 00:14:22.430
So just completely bypassed
the academic route,

00:14:22.430 --> 00:14:24.182
and go for mainstream media.

00:14:24.182 --> 00:14:26.390
That's how we get our
algorithms out nowadays, right?

00:14:26.390 --> 00:14:28.330
MIKE BURROWS: That's
the way it worked.

00:14:28.330 --> 00:14:29.830
COLT MCANIS: Listen,
Mike, thank you

00:14:29.830 --> 00:14:31.766
so much for coming on
and talking to us a bit

00:14:31.766 --> 00:14:32.640
about this algorithm.

00:14:32.640 --> 00:14:34.550
We're really honored
to have you here.

00:14:34.550 --> 00:14:37.550
MIKE BURROWS: It's a
pleasure to be here.

00:14:37.550 --> 00:14:40.580
I felt, given the state of
the other "Compressor Head"

00:14:40.580 --> 00:14:42.950
episodes, that I ought to
come along personally and fix

00:14:42.950 --> 00:14:44.564
things.

00:14:44.564 --> 00:14:45.314
COLT MCANLIS: Huh.

00:14:45.314 --> 00:14:47.390
OK.

00:14:47.390 --> 00:14:50.250
Well, thank you for that.

00:14:50.250 --> 00:14:50.990
You sure did.

00:14:50.990 --> 00:14:51.990
MIKE BURROWS: Thank you.

00:14:51.990 --> 00:14:52.698
COLT MCANLIS: OK.

00:14:57.990 --> 00:14:59.187
Oh, it's on me.

00:14:59.187 --> 00:15:00.560
Oh.

00:15:00.560 --> 00:15:02.640
I was just texting my boss.

00:15:02.640 --> 00:15:05.070
So it's apparent that
BWT doesn't actually

00:15:05.070 --> 00:15:07.900
compress the data, it
just transforms it.

00:15:07.900 --> 00:15:10.790
To practically use
BWT, we need some way

00:15:10.790 --> 00:15:13.390
to apply another
transform that's going

00:15:13.390 --> 00:15:15.150
to yield a stream
which has lower entropy

00:15:15.150 --> 00:15:17.360
and, thus, is more compressible.

00:15:17.360 --> 00:15:19.360
Good old delta
compression doesn't really

00:15:19.360 --> 00:15:20.330
help us that much.

00:15:20.330 --> 00:15:25.340
Encoding our post-BWT stream
of N-N-B-A-A-A yields us

00:15:25.340 --> 00:15:28.600
the version of the
string, this whole thing,

00:15:28.600 --> 00:15:34.740
which has an entropy of 1.77,
while the source entropy itself

00:15:34.740 --> 00:15:38.310
is only 1.45.

00:15:38.310 --> 00:15:40.540
We haven't actually
improved anything.

00:15:40.540 --> 00:15:43.090
No, for this type of data,
we need a different type

00:15:43.090 --> 00:15:46.080
of transform which is better
suited for the type of symbol

00:15:46.080 --> 00:15:48.420
clustering that BWT produces.

00:15:48.420 --> 00:15:52.180
We call this
move-to-front encoding.

00:15:52.180 --> 00:15:54.680
Effectively, start by
creating a buffer that

00:15:54.680 --> 00:15:57.200
contains all unique symbols
that your stream could have

00:15:57.200 --> 00:15:58.980
and list them in a sorted order.

00:15:58.980 --> 00:16:02.050
For our purposes, we'll just
use the English alphabet.

00:16:02.050 --> 00:16:04.150
The move-to-front
algorithm is pretty simple.

00:16:04.150 --> 00:16:07.860
For each symbol we read,
we write its output buffer

00:16:07.860 --> 00:16:11.280
position and then move it
to the front of our buffer.

00:16:11.280 --> 00:16:13.920
For example, if we
input the letter N,

00:16:13.920 --> 00:16:18.641
that sits at position 1, 2, 3,
4, 5, 6, 7, 8, 9, 10, 11, 12,

00:16:18.641 --> 00:16:20.810
13, 14.

00:16:20.810 --> 00:16:23.419
So we write that to
our output stream.

00:16:23.419 --> 00:16:25.460
The next step is how the
algorithm gets its name.

00:16:25.460 --> 00:16:27.340
Once we've written
its out position,

00:16:27.340 --> 00:16:33.390
we then move that symbol
to the front of the buffer.

00:16:33.390 --> 00:16:36.160
Time to read in the next
symbol, which is also

00:16:36.160 --> 00:16:38.800
N. Since that's already at
the front of our stream,

00:16:38.800 --> 00:16:41.140
we write a 1 to
the output stream.

00:16:41.140 --> 00:16:42.960
This is the trick
of the transform.

00:16:42.960 --> 00:16:46.900
The idea is that since BWT
clusters symbols together,

00:16:46.900 --> 00:16:49.330
there's a high probability
that subsequent copies

00:16:49.330 --> 00:16:51.130
of that symbol will
appear in the stream

00:16:51.130 --> 00:16:53.080
after we've encountered
the first one.

00:16:53.080 --> 00:16:55.667
So we end up outputting
more 1's as a result.

00:16:55.667 --> 00:16:57.500
Let's take a look at
the rest of the coding.

00:16:57.500 --> 00:16:59.980
Let's read B onto the stream.

00:16:59.980 --> 00:17:02.399
And as such, we
output the index 3,

00:17:02.399 --> 00:17:04.190
because that's where
it sits in the buffer.

00:17:04.190 --> 00:17:06.310
And move it to the front.

00:17:06.310 --> 00:17:10.130
We next read A and
output the index of 3

00:17:10.130 --> 00:17:12.540
again, since here
it sits once more.

00:17:12.540 --> 00:17:14.109
Just fix that.

00:17:14.109 --> 00:17:16.440
Now, the next two
A's that we read

00:17:16.440 --> 00:17:19.200
from the stream won't adjust
any part of the buffer

00:17:19.200 --> 00:17:21.680
since A already sits
in the first position.

00:17:21.680 --> 00:17:26.000
As such, we simply admit
1's to the output stream.

00:17:26.000 --> 00:17:31.180
Now, after encoding, the output
stream here is 14, 1, 3, 3 1,

00:17:31.180 --> 00:17:36.200
1, whose entropy is 1.45, which
is identical to our source

00:17:36.200 --> 00:17:37.150
input stream.

00:17:37.150 --> 00:17:37.970
Eh, pretty good.

00:17:37.970 --> 00:17:40.530
From here, you can simply throw
the output of move-to-front

00:17:40.530 --> 00:17:42.790
to any statistical
compressor, like Huffman

00:17:42.790 --> 00:17:44.240
or arithmetic compression.

00:17:44.240 --> 00:17:48.410
In fact, bzip2, the popular
Linux compression application,

00:17:48.410 --> 00:17:51.860
couples Burrows-Wheeler
Transform plus move-to-front

00:17:51.860 --> 00:17:55.240
plus arithmetic compression
for its exact algorithm.

00:17:55.240 --> 00:17:56.740
You're looking at
the inner workings

00:17:56.740 --> 00:17:58.536
of science here, folks.

00:17:58.536 --> 00:18:01.100
[GIBBERISH]

00:18:02.089 --> 00:18:04.130
MIKE BURROWS: That's an
interesting thing to say.

00:18:04.130 --> 00:18:06.170
COLT MCANLIS: Like, that was
just really cool to hear.

00:18:06.170 --> 00:18:06.570
MIKE BURROWS: Yeah.

00:18:06.570 --> 00:18:07.150
Anyway--

00:18:07.150 --> 00:18:07.414
COLT MCANLIS: All
right, all right.

00:18:07.414 --> 00:18:07.590
Yeah, sorry.

00:18:07.590 --> 00:18:08.670
We could do this all day.

00:18:08.670 --> 00:18:10.810
What's amazing about
Burrows-Wheeler Transform

00:18:10.810 --> 00:18:13.630
is that it stands alone as
a compression algorithm.

00:18:13.630 --> 00:18:16.710
LZ, Huffman, arithmetic--
they all have tons of variance

00:18:16.710 --> 00:18:19.060
and have been worked on by
tons of different people.

00:18:19.060 --> 00:18:21.550
In the last 20 years,
Burrows-Wheeler Transform

00:18:21.550 --> 00:18:23.230
has gotten much less attention.

00:18:23.230 --> 00:18:25.710
But that doesn't mean
it's any less useful.

00:18:25.710 --> 00:18:29.060
In recent competitions to
compress human DNA sequences,

00:18:29.060 --> 00:18:32.982
BWT-based compressors were
all in the top 10 finalists.

00:18:32.982 --> 00:18:34.690
And as far as the
compression world goes,

00:18:34.690 --> 00:18:36.910
there's still plenty left
to improve upon here.

00:18:36.910 --> 00:18:38.620
But that's a topic
for a different show.

00:18:38.620 --> 00:18:40.020
My name is Colt McAnlis.

00:18:40.020 --> 00:18:41.190
Thanks for watching.

00:18:41.190 --> 00:18:44.840
[MUSIC PLAYING]

