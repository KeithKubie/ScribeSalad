WEBVTT
Kind: captions
Language: en

00:00:00.130 --> 00:00:04.420
The point of public key encryption
is that the public key component

00:00:04.420 --> 00:00:05.730
is really public.

00:00:05.730 --> 00:00:10.113
That is, any user can send his or
her public key to any other user or

00:00:10.113 --> 00:00:12.620
just broadcast it to the world.

00:00:12.620 --> 00:00:16.580
Although this approach is very
convenient, it has a major weakness.

00:00:16.580 --> 00:00:20.410
That is, anyone can forge
such a public announcement.

00:00:20.410 --> 00:00:25.510
Some user could pretend to be Bob,
and send a public key to another user

00:00:25.510 --> 00:00:29.690
such as Alice, and tell Alice
that this is Bob's public key.

00:00:29.690 --> 00:00:33.920
The result is that when Alice
sends a private message to Bob

00:00:33.920 --> 00:00:37.740
saying she encrypts it
using Bob's public key.

00:00:37.740 --> 00:00:41.980
But remember this Bob's public key
is actually forged by the attacker.

00:00:41.980 --> 00:00:44.720
Then the message can be
intercepted by the attacker, and

00:00:44.720 --> 00:00:46.420
can be read by the attacker.

00:00:46.420 --> 00:00:50.592
Now, at some point hopefully,
Bob can discover that there's

00:00:50.592 --> 00:00:54.960
a forgery going on and
a fake public key of his was being used.

00:00:54.960 --> 00:00:56.350
But then what can Bob do?

00:00:56.350 --> 00:00:59.550
Bob can send Alice another
message saying that,

00:00:59.550 --> 00:01:01.640
hey, this is my real public key.

00:01:01.640 --> 00:01:03.100
But how could Alice tell?

00:01:03.100 --> 00:01:07.960
That is, how could Alice tell that the
previous key was a forgery and this key,

00:01:07.960 --> 00:01:09.900
that Bob just sent, is real.

00:01:09.900 --> 00:01:14.280
The solution to this problem of
public key forgery is to use

00:01:14.280 --> 00:01:16.060
a public key certificate.

00:01:16.060 --> 00:01:20.520
In essence, a certificate consists
of Bob's public key and Bob's

00:01:20.520 --> 00:01:25.660
information such as the user ID, let's
say his name and address and so on.

00:01:25.660 --> 00:01:28.140
The certificate authority's information.

00:01:28.140 --> 00:01:33.220
And the whole blog is signed using
the certificate authority's private key.

00:01:33.220 --> 00:01:36.480
The certificate can also
include other information,

00:01:36.480 --> 00:01:40.610
such as the period of validity of
this certificate, that is, for

00:01:40.610 --> 00:01:45.520
how long this certificate is valid for
this public key, say, one year.

00:01:45.520 --> 00:01:50.470
Now let's see how certificate is
created, and how it is verified, and

00:01:50.470 --> 00:01:53.740
how it is being used to
distribute public key.

00:01:53.740 --> 00:01:58.420
Suppose Bob wants the certificate
authority CA to create a certificate for

00:01:58.420 --> 00:01:59.460
his public key.

00:01:59.460 --> 00:02:04.590
Bob would contact the CA and provide
authentication information such keys

00:02:04.590 --> 00:02:10.199
driver's license and so on, and
then he will send his public key to CA.

00:02:10.199 --> 00:02:13.590
The CA will then put his ID,
his public key and

00:02:13.590 --> 00:02:19.550
other information such as the period
of validity together and then hash it.

00:02:19.550 --> 00:02:23.350
And then the CA will use his
private key to sign the hash.

00:02:23.350 --> 00:02:26.400
So that creates the certificate
of Bob's public key.

00:02:26.400 --> 00:02:30.866
Now Bob can send this public key
certificate to anybody such as Alice.

00:02:30.866 --> 00:02:34.274
When Alice receives this
public key certificate,

00:02:34.274 --> 00:02:38.712
she can first extract the key types
of information of Bob's idea,

00:02:38.712 --> 00:02:41.338
public key, and all the information.

00:02:41.338 --> 00:02:45.177
And then she will hash this data,
and then Alice will also use

00:02:45.177 --> 00:02:49.474
the certificate authorities public
key to decrypt the signature or

00:02:49.474 --> 00:02:53.280
verify the signature and
compare these two hash values.

00:02:53.280 --> 00:02:58.490
If they match, that means this public
key has been properly signed by the CA.

00:02:58.490 --> 00:03:04.180
In other words, this public key of
Bob's has been validated by the CA.

00:03:04.180 --> 00:03:07.200
So this is how public
key certificate works.

00:03:07.200 --> 00:03:09.980
Now of course,
the underlying assumption is that.

00:03:09.980 --> 00:03:13.980
The CA is a trusted party
by everybody involved.

00:03:13.980 --> 00:03:18.940
In practice, the CA is a well-known
company such as Verisign,

00:03:18.940 --> 00:03:21.420
Microsoft, Google, or Apple, and

00:03:21.420 --> 00:03:26.180
the public keys are already stored in,
for example your web browser.

00:03:26.180 --> 00:03:30.190
That is with these public keys already
configured on your system, they can

00:03:30.190 --> 00:03:34.570
automatically validate public key
certificates signed by these entities.

