WEBVTT
Kind: captions
Language: en

00:00:00.089 --> 00:00:04.379
In computing terms, what often people refer to JSON now is JavaScript object notation

00:00:05.340 --> 00:00:12.340
So... It's a way of representing arbitrary data in an ASCII format that can be easily

00:00:12.480 --> 00:00:20.640
transferred over the internet that can be stored on disk and things in a way they can be processed by most programming languages

00:00:22.680 --> 00:00:24.680
Cool, end of video. 
Yeah

00:00:27.160 --> 00:00:34.560
So, why do we need something like JSON? Computers are great at storing data and they're great at processing data. The problem with computers

00:00:34.800 --> 00:00:36.280
and data is

00:00:36.460 --> 00:00:41.660
The format of how data is represented is fixed by the program that's been written

00:00:41.660 --> 00:00:48.420
it's fixed by the architecture of the machine that's doing it and if you try and transfer that from one machine

00:00:48.640 --> 00:00:53.200
to another machine, if they're the same type and running the same software it will work great

00:00:53.620 --> 00:01:00.540
But if you say got a piece of data that you've created on your Sun workstation and you try and transfer it to your

00:01:00.620 --> 00:01:04.200
say... IBM PC or your Intel Mac?

00:01:04.560 --> 00:01:08.660
Then there's a good chance that they will interpret the data in different ways

00:01:08.670 --> 00:01:11.369
we talked about Endianness in another video as a classic example of how

00:01:11.740 --> 00:01:14.700
Sometimes a computer store data in a different way to another.

00:01:14.860 --> 00:01:19.420
So what JSON gives you is a way of representing arbitrary data structures

00:01:19.920 --> 00:01:25.100
That are sort of free from the programs that are represent— that are representing them

00:01:25.320 --> 00:01:30.620
XML does something similar, the "extensible markup language". The advantage of JavaScript is

00:01:30.880 --> 00:01:32.520
It's lighter weight in some ways

00:01:32.590 --> 00:01:36.570
and things although that's perhaps less of an issue because it can always be compressed but

00:01:36.700 --> 00:01:44.120
It helps but also obviously if you're processing it on the web in JavaScript, JavaScript object notation uses the same parser

00:01:44.820 --> 00:01:47.000
as JavaScript as a programming language.

00:01:47.200 --> 00:01:49.720
So what does JavaScript object notation have?

00:01:49.720 --> 00:01:51.720
The two main things it may have is an object

00:01:51.760 --> 00:01:55.060
which will map a string to some sort of value

00:01:55.080 --> 00:01:58.540
And Brian Kernighan had talked about this in another video where he covered hash tables

00:01:58.540 --> 00:01:59.880
it's exactly the same sort of thing.

00:01:59.880 --> 00:02:01.440
So we can have a

00:02:01.560 --> 00:02:05.600
Object and they're represented by a curly brace and then we have the string

00:02:05.600 --> 00:02:11.620
so let's say name and that maps to a value and let's have another string that says Shawn and then we can have another

00:02:11.960 --> 00:02:15.300
key in there, let's say birthday and that maps to

00:02:15.820 --> 00:02:18.140
Let's just put 42 there, and so on

00:02:18.160 --> 00:02:22.580
And we can have as many of these as we like. This value we can have here can be any

00:02:22.660 --> 00:02:26.020
other JavaScript thing so it can be a number it can be a string

00:02:26.080 --> 00:02:29.860
It can also be another object. So we could have something that says

00:02:30.140 --> 00:02:38.100
"children" and then that could be an object there which maps say the name of your children to some details about them

00:02:38.200 --> 00:02:41.460
That works you can nest them like that, but children

00:02:41.800 --> 00:02:46.140
Tend to be an ordered collection you tend to have them one after the other

00:02:46.300 --> 00:02:53.040
So we also have the ability to represent ordered things using an arrays and then we can have a series of things there

00:02:53.050 --> 00:02:59.439
So the difference between an object and array is an object maps a key to a value

00:03:00.020 --> 00:03:01.550
whereas an array

00:03:01.550 --> 00:03:05.480
specifies an ordered collection of things they have this idea that this one comes after this one. So they have a

00:03:05.780 --> 00:03:12.100
numerical index and we specify an order. Objects don't have a numerical order. So in this case we would have

00:03:13.020 --> 00:03:15.620
children, so the first one, let's call that one

00:03:16.040 --> 00:03:23.000
Alice and then we've got another one. Let's call that one Bob and then he has a third one. I don't know

00:03:23.000 --> 00:03:26.780
Let's think that one could be called... let's go with Charlie.

00:03:27.000 --> 00:03:32.340
and you might have a fourth one, which would be called Derrick and the fifth one which might be called

00:03:32.840 --> 00:03:39.340
Esmeralda and so on. So we can have an ordered collection of things and so we can build up

00:03:39.600 --> 00:03:41.280
any arbitrary structure

00:03:41.440 --> 00:03:47.680
And of course the thing to remember is that you don't have to use JavaScript to use this — JavaScript object notation to do this

00:03:47.840 --> 00:03:51.560
But it helps and it's become very popular doing this as we said, it's lightweight

00:03:51.560 --> 00:03:57.340
You can remove the white space and things and you can you parse it relatively simply and if you're doing in JavaScript

00:03:57.340 --> 00:04:02.780
So it's become very common on the web but also to transfer data between any other sort of programs.

00:04:02.780 --> 00:04:05.660
Here, we've said that your children is a list of

00:04:05.980 --> 00:04:06.739
strings

00:04:06.739 --> 00:04:14.139
We could have specified that they are actually objects. And so Alice could really, let's just push this on to another good paper

00:04:15.170 --> 00:04:18.429
So we've got what we had before we've got kids

00:04:18.429 --> 00:04:25.620
I guess gotta abbreviate and that maps to an array and this time we're going to have an object here inside the array

00:04:25.920 --> 00:04:30.720
which has got a name which maps your name to Alice and then

00:04:31.200 --> 00:04:36.100
that could also have what else we have in the object. We had a birthday,

00:04:36.660 --> 00:04:43.520
again, I'm abbreviating... which you can't do in JavaScript. Because it would be a different key and we'll put that to be 56

00:04:43.840 --> 00:04:44.770
And then of course

00:04:44.770 --> 00:04:52.940
She could have some children or kids and then we'd have an array of more objects and so on

00:04:53.500 --> 00:04:59.180
and then eventually that ends that object and then we could get around to

00:04:59.680 --> 00:05:02.400
Doing Bob and so on

00:05:04.840 --> 00:05:11.280
And so on like that, so yeah, you can build up complicated structures in that way. But mainly it's a file transfer format, yeah

00:05:11.640 --> 00:05:15.200
Yeah, it's exactly what it's used for. It's used for transferring data

00:05:15.200 --> 00:05:17.960
in a way that is pretty much

00:05:18.400 --> 00:05:23.400
agnostic to the programming language being used because you can represent pretty much any arbitrary structure you'd like in there

00:05:23.660 --> 00:05:28.400
Representing graph like structures where you've got links from one to the other would become interesting

00:05:28.400 --> 00:05:33.040
It's not the only format. The structure of this is very very similar to the structure that's inside a PDF file.

00:05:33.200 --> 00:05:35.900
It has dictionaries which maps

00:05:36.120 --> 00:05:43.380
keys or names rather than the strings to values and it has arrays and so on so there are other structures a very very similar

00:05:43.560 --> 00:05:46.680
but it's just become common to transfer these things over the web.

00:05:47.820 --> 00:05:49.960
So the first one let's call that one

00:05:50.589 --> 00:05:54.389
Alice and then we've got another one. Let's call that one Bob

00:05:54.909 --> 00:05:56.759
How did you know my children's names?

00:05:56.759 --> 00:06:00.359
we keep watching videos about them with Mike.
 
Because it's fairly common and then we'll talk about

00:06:00.430 --> 00:06:05.849
Differences with say one password what LastPass will do is it will produce a master password by a pet...

