WEBVTT
Kind: captions
Language: en

00:00:04.033 --> 00:00:06.133
Do: I'm gonna give you guys
a little kind of peek

00:00:06.133 --> 00:00:10.467
behind the scenes of what it's
taken to scale YouTube.

00:00:10.467 --> 00:00:12.200
Since this is only
a half an hour talk,

00:00:12.200 --> 00:00:14.634
I can't really go
into a whole lot of detail.

00:00:14.634 --> 00:00:16.767
But this should give you
some idea

00:00:16.767 --> 00:00:19.367
of what it takes to provide

00:00:19.367 --> 00:00:22.634
one of the largest sites
in the world.

00:00:22.634 --> 00:00:25.267
Okay, so the general kind
of layout here

00:00:25.267 --> 00:00:27.534
is that I'm gonna talk about
a little historical context,

00:00:27.534 --> 00:00:28.868
set things up.

00:00:28.868 --> 00:00:31.067
Talk about a few pieces
of our scalability.

00:00:31.067 --> 00:00:32.767
Some of the key challenges
we've faced,

00:00:32.767 --> 00:00:36.968
lessons we've learned,
and go into Q and A.

00:00:36.968 --> 00:00:39.501
This graph is kind of--

00:00:39.501 --> 00:00:41.334
this shape of graph appears
very often.

00:00:41.334 --> 00:00:44.834
I guess in the context
of this presentation,

00:00:44.834 --> 00:00:47.334
it could be a number of things.

00:00:47.334 --> 00:00:49.701
It's probably--

00:00:49.701 --> 00:00:52.200
it probably corresponds
to the price of a gallon of gas,

00:00:52.200 --> 00:00:54.067
but I'm not gonna talk
about that.

00:00:54.067 --> 00:00:57.434
Google has great food, so...

00:00:57.434 --> 00:00:59.601
I think that was true,

00:00:59.601 --> 00:01:01.033
but I'm not gonna talk about it
either.

00:01:01.033 --> 00:01:04.601
I'm still scarred by that.

00:01:04.601 --> 00:01:07.934
And--but the thing that it does
actually represent

00:01:07.934 --> 00:01:11.968
is the daily video views
over our lifespan.

00:01:11.968 --> 00:01:15.133
So it's pretty amazing
the growth that we've had.

00:01:15.133 --> 00:01:16.601
It's kind of interesting
when you see

00:01:16.601 --> 00:01:19.367
at certain points when
we've added machines or whatnot.

00:01:19.367 --> 00:01:22.000
We added capacity,
made things faster.

00:01:22.000 --> 00:01:24.367
Added some great features.

00:01:24.367 --> 00:01:29.267
Then the graph definitely
spikes up a bit.

00:01:29.267 --> 00:01:32.334
Okay, so quick timeline
of YouTube.

00:01:32.334 --> 00:01:35.033
February 2005,
we were founded.

00:01:35.033 --> 00:01:38.067
We received our first round
of VC funding

00:01:38.067 --> 00:01:41.033
in October 2005,
eight months later,

00:01:41.033 --> 00:01:42.467
so we got our first office.

00:01:42.467 --> 00:01:46.334
And one of the more interesting
scalability challenges we had,

00:01:46.334 --> 00:01:48.968
or one of the more interesting
engineering challenges we had

00:01:48.968 --> 00:01:52.267
was trying to keep our monitors
dry in our new office.

00:01:52.267 --> 00:01:55.868
So the first day that
we moved in it started raining,

00:01:55.868 --> 00:01:59.067
which is normally fine
when you're in a building.

00:01:59.067 --> 00:02:00.968
Except that there were about,
I don't know,

00:02:00.968 --> 00:02:04.100
seven or eight different leaks
in various places.

00:02:04.100 --> 00:02:06.367
And we had just gotten
our new, nice,

00:02:06.367 --> 00:02:07.534
big 24-inch monitors.

00:02:07.534 --> 00:02:10.501
And we didn't really want them

00:02:10.501 --> 00:02:12.801
to have any kind of issues
with the water, so we--

00:02:12.801 --> 00:02:16.334
After--after maybe
20, 30 minutes

00:02:16.334 --> 00:02:17.701
of trying various things,

00:02:17.701 --> 00:02:20.167
we took the plastic wrapping

00:02:20.167 --> 00:02:21.734
from our IKEA furniture.

00:02:21.734 --> 00:02:23.934
We fashioned a funnel
out of that,

00:02:23.934 --> 00:02:27.367
and we used the rubber trash can
to catch the water.

00:02:27.367 --> 00:02:30.167
We had just enough trash cans
and just enough plastic

00:02:30.167 --> 00:02:34.334
that we were able to divert
large--large pools of water

00:02:34.334 --> 00:02:35.734
into the trash cans.

00:02:35.734 --> 00:02:37.367
And I think I--

00:02:37.367 --> 00:02:38.834
I think I drove back once
just to make sure

00:02:38.834 --> 00:02:41.167
that the trash cans weren't
over-full.

00:02:41.167 --> 00:02:43.767
So definitely interesting times

00:02:43.767 --> 00:02:45.734
already during that time.

00:02:45.734 --> 00:02:48.801
Just about five months later,

00:02:48.801 --> 00:02:51.100
we actually hit 30 million
video playbacks per day.

00:02:51.100 --> 00:02:53.234
That was only one year
after we were founded.

00:02:53.234 --> 00:02:55.601
So pretty amazing numbers.

00:02:55.601 --> 00:02:58.300
And I'll go into a little bit
of details,

00:02:58.300 --> 00:02:59.467
you know, what it took
to get there.

00:02:59.467 --> 00:03:01.467
A few months later,

00:03:01.467 --> 00:03:03.434
we more than tripled
that number.

00:03:03.434 --> 00:03:04.801
So pretty amazing.

00:03:04.801 --> 00:03:06.467
It was kind of interesting.

00:03:06.467 --> 00:03:08.300
We'd add, like, 5%--

00:03:08.300 --> 00:03:10.734
you know, 5% or 10% capacity

00:03:10.734 --> 00:03:14.000
and we'd get as much if not more
traffic gain from that,

00:03:14.000 --> 00:03:15.934
so it's kind of interesting.

00:03:15.934 --> 00:03:18.934
A few months later
we got acquired by Google.

00:03:18.934 --> 00:03:20.200
And my personal favorite part

00:03:20.200 --> 00:03:21.200
is we got a lot of free food.

00:03:21.200 --> 00:03:23.868
So that made me quite happy.

00:03:23.868 --> 00:03:26.434
The crazy thing is that
by the time we were acquired,

00:03:26.434 --> 00:03:28.200
we were already a top ten site

00:03:28.200 --> 00:03:29.834
by various external measures.

00:03:29.834 --> 00:03:32.934
Like, just top ten period
across all websites.

00:03:32.934 --> 00:03:35.567
So pretty amazing considering

00:03:35.567 --> 00:03:40.801
that we were only maybe about
1 1/2 years old at that time.

00:03:40.801 --> 00:03:43.968
We were number four on Alexa
by Q3 2007

00:03:43.968 --> 00:03:46.434
and by other measures as well.

00:03:46.434 --> 00:03:49.667
And today I think there's
a new updated number now

00:03:49.667 --> 00:03:51.901
but last I heard there was
10 hours of video

00:03:51.901 --> 00:03:53.300
uploaded per minute.

00:03:53.300 --> 00:03:54.601
It might be more like 13 now.

00:03:54.601 --> 00:03:59.000
And hundreds of millions
of video playbacks per day.

00:03:59.000 --> 00:04:00.367
It's certainly a lot
of playbacks per day.

00:04:00.367 --> 00:04:02.667
I can't give the exact number,
but it's--

00:04:02.667 --> 00:04:06.367
It's pretty mind-boggling.

00:04:06.367 --> 00:04:08.501
So real quickly,
the pre-acquisition team.

00:04:08.501 --> 00:04:10.834
We had two sys admins.

00:04:10.834 --> 00:04:13.067
Two software guys,
myself included,

00:04:13.067 --> 00:04:14.801
making sure that the site's
scaled.

00:04:14.801 --> 00:04:17.400
Two feature developers.

00:04:17.400 --> 00:04:20.033
Two network engineers.
One DBA.

00:04:20.033 --> 00:04:24.501
And unfortunately no chefs.

00:04:24.501 --> 00:04:26.100
And now we have two as well.

00:04:26.100 --> 00:04:29.334
So I guess the theme
of two continues.

00:04:29.334 --> 00:04:32.033
Here's my little algorithm
for handling rapid growth.

00:04:32.033 --> 00:04:35.334
You start by identifying
and fixing bottlenecks.

00:04:35.334 --> 00:04:39.000
You, uh, drink the beverage
of your choice.

00:04:39.000 --> 00:04:40.400
I'm not suggesting anything.

00:04:40.400 --> 00:04:42.434
You just, you know, drink
the beverage of your choice.

00:04:42.434 --> 00:04:44.100
You sleep a little bit
and you notice something new

00:04:44.100 --> 00:04:45.367
and you start all over again.

00:04:45.367 --> 00:04:46.467
That's how it is I guess

00:04:46.467 --> 00:04:48.267
with a rapidly growing site.

00:04:48.267 --> 00:04:50.400
One of the key phrases we had
in the early days

00:04:50.400 --> 00:04:52.767
was "these are good problems
to have."

00:04:52.767 --> 00:04:55.300
And after a while,
we were, like,

00:04:55.300 --> 00:04:58.801
"I'm gonna kill the next person
who says that phrase."

00:04:58.801 --> 00:05:01.701
man: Is that multi-threaded?

00:05:01.701 --> 00:05:04.734
Do: Well that's a good segue
into my next line.

00:05:04.734 --> 00:05:08.734
Because in this particular case,
there is a little bit of

00:05:08.734 --> 00:05:10.234
drinking and sleeping
going on there.

00:05:10.234 --> 00:05:13.133
This is one of our two
sys admins

00:05:13.133 --> 00:05:15.868
before the acquisition.

00:05:15.868 --> 00:05:20.567
All right, so to move into some
of the nuts and bolts here,

00:05:20.567 --> 00:05:22.367
we have web request flow.

00:05:22.367 --> 00:05:25.033
Starts with an end user.

00:05:25.033 --> 00:05:29.000
Then the request flows
from the user's browser

00:05:29.000 --> 00:05:31.634
to a set of NetScaler
load balancers.

00:05:31.634 --> 00:05:34.300
From that it goes
to the web servers.

00:05:34.300 --> 00:05:37.000
And this is a bank of web
servers in a YouTube colo.

00:05:37.000 --> 00:05:41.400
And these machines don't really
maintain any local state.

00:05:41.400 --> 00:05:43.234
They're just, like,
one goes down,

00:05:43.234 --> 00:05:45.834
nothing really happens
to the site.

00:05:45.834 --> 00:05:51.100
Within these machines,
Apache receives the requests

00:05:51.100 --> 00:05:53.400
from the NetScalers.

00:05:53.400 --> 00:05:55.767
It checks to see
if it's a dynamic request.

00:05:55.767 --> 00:05:57.167
If it's a dynamic request,

00:05:57.167 --> 00:06:00.367
it'll will forward the request
on through fast EGI

00:06:00.367 --> 00:06:02.701
to a local apserver.

00:06:02.701 --> 00:06:04.534
The multi-process apserver
running on the same machine,

00:06:04.534 --> 00:06:06.100
which is written in Python,

00:06:06.100 --> 00:06:08.968
our programming line nature
of choice

00:06:08.968 --> 00:06:10.400
for all the application code
here.

00:06:10.400 --> 00:06:14.200
And that--while Python retrieves
information

00:06:14.200 --> 00:06:15.367
from various places.

00:06:15.367 --> 00:06:18.167
It retrieves information
from RPC,

00:06:18.167 --> 00:06:20.701
from our mem cache servers,

00:06:20.701 --> 00:06:23.734
which store information
retrieved from databases

00:06:23.734 --> 00:06:28.033
and other expensive--relatively
expensive data sources.

00:06:28.033 --> 00:06:30.567
And obviously our databases

00:06:30.567 --> 00:06:32.934
for things that are either
uncacheable

00:06:32.934 --> 00:06:36.734
or are not in our caches.

00:06:36.734 --> 00:06:40.000
For video, we have
two different places

00:06:40.000 --> 00:06:41.300
where video can come from.

00:06:41.300 --> 00:06:42.834
The first is our CDN.

00:06:42.834 --> 00:06:46.234
It's an internal project
written by a group at Google.

00:06:46.234 --> 00:06:49.601
And that CDN takes care
of a number of things.

00:06:49.601 --> 00:06:52.367
It basically takes care
of the content

00:06:52.367 --> 00:06:55.067
that is most popular
on the YouTube website.

00:06:55.067 --> 00:06:57.567
Sort of the mega-hits
and the things

00:06:57.567 --> 00:07:00.601
that may not be necessarily
a hit within the U.S.

00:07:00.601 --> 00:07:02.767
but a hit maybe in Europe.

00:07:02.767 --> 00:07:04.567
Let's say for example

00:07:04.567 --> 00:07:06.601
maybe some, you know,
pretty interesting soccer videos

00:07:06.601 --> 00:07:08.801
for example, which may be
more popular in Europe.

00:07:08.801 --> 00:07:12.234
It takes care of serving
of all those videos.

00:07:12.234 --> 00:07:16.901
It makes sure that there are
multiple copies of the video

00:07:16.901 --> 00:07:19.367
for quality of service,
reliability.

00:07:19.367 --> 00:07:21.934
And also insures that
a copy of the video

00:07:21.934 --> 00:07:23.601
is relatively close
to the user.

00:07:23.601 --> 00:07:26.434
So they're not going over
various network hops.

00:07:26.434 --> 00:07:27.901
Like too many network hops

00:07:27.901 --> 00:07:30.801
and a transatlantic link
to get to the video.

00:07:30.801 --> 00:07:33.234
And for the rest of our videos,

00:07:33.234 --> 00:07:36.534
they're hosted on--
at YouTube colos

00:07:36.534 --> 00:07:38.701
in various places
in the U.S.

00:07:38.701 --> 00:07:39.934
At least for right now.

00:07:39.934 --> 00:07:42.634
We're considering
other locations,

00:07:42.634 --> 00:07:46.534
but for now it's the U.S.

00:07:46.534 --> 00:07:47.534
Key technologies.

00:07:47.534 --> 00:07:48.734
We use Linux,

00:07:48.734 --> 00:07:50.901
specifically the SuSE
distribution of Linux.

00:07:50.901 --> 00:07:54.901
Various versions
in the 10.x line.

00:07:54.901 --> 00:07:57.868
We use Apache as I mentioned
just recently

00:07:57.868 --> 00:08:02.167
for serving of content
through the YouTube.com site,

00:08:02.167 --> 00:08:04.400
as well as the mobile site
I think

00:08:04.400 --> 00:08:06.400
and some other things
and the API.

00:08:06.400 --> 00:08:10.200
And for video serving,
we use lighttpd

00:08:10.200 --> 00:08:11.601
because that's just
so much faster

00:08:11.601 --> 00:08:14.968
in handling large files.

00:08:14.968 --> 00:08:16.901
It just blows Apache away
in terms of performance

00:08:16.901 --> 00:08:19.567
when dealing with large numbers
of connections,

00:08:19.567 --> 00:08:23.400
high connect rate,
and large numbers of videos.

00:08:23.400 --> 00:08:26.334
Or I mean large file size
rather.

00:08:26.334 --> 00:08:28.834
MySQL is used for
all the metadata storage.

00:08:28.834 --> 00:08:33.067
So things like
user information,

00:08:33.067 --> 00:08:36.200
like users--the user name,

00:08:36.200 --> 00:08:38.167
hash version of the password,
et cetera.

00:08:38.167 --> 00:08:39.367
That kind of thing.

00:08:39.367 --> 00:08:42.000
And finally,
as I mentioned Python--

00:08:42.000 --> 00:08:44.100
and it turns out that Python

00:08:44.100 --> 00:08:45.267
was actually a very good choice

00:08:45.267 --> 00:08:46.334
for programming languages
for us

00:08:46.334 --> 00:08:48.634
because especially
in the early days

00:08:48.634 --> 00:08:51.300
when it was very difficult
for us to recruit people

00:08:51.300 --> 00:08:53.100
especially when we were tiny.

00:08:53.100 --> 00:08:55.934
We didn't have a full time
recruiter.

00:08:55.934 --> 00:08:59.701
It was just far easier
to put out a purchase order

00:08:59.701 --> 00:09:02.767
to get, like, ten machines
versus getting, like,

00:09:02.767 --> 00:09:06.000
one or two talented engineers
to magically materialize

00:09:06.000 --> 00:09:08.434
and start and get ramped up
in our systems.

00:09:08.434 --> 00:09:09.701
So we traded off,

00:09:09.701 --> 00:09:11.234
sort of timed the market,

00:09:11.234 --> 00:09:13.734
and developed our efficiency
for, you know,

00:09:13.734 --> 00:09:15.567
for some other stuff.

00:09:15.567 --> 00:09:17.467
Maybe slightly lower code,

00:09:17.467 --> 00:09:19.767
but code that's less susceptible
to stack overflows

00:09:19.767 --> 00:09:22.200
and other nasty things
that you might see

00:09:22.200 --> 00:09:23.534
in other programming languages.

00:09:23.534 --> 00:09:25.734
And finally Google technologies.

00:09:25.734 --> 00:09:27.167
We use a number of things

00:09:27.167 --> 00:09:30.000
that you might have read
about and seen.

00:09:30.000 --> 00:09:32.000
Obviously Search is one
of the key ones.

00:09:32.000 --> 00:09:33.634
Asides from Search,

00:09:33.634 --> 00:09:37.501
we use Bigtable internally
for storing video thumbnails.

00:09:37.501 --> 00:09:42.267
We use GFS for a number
of internal file storage needs.

00:09:42.267 --> 00:09:45.634
We use protobuffers, which
were recently open-sourced.

00:09:45.634 --> 00:09:48.400
And just a number of Google
technologies in general.

00:09:48.400 --> 00:09:50.501
We're kind of scaling that out
over time

00:09:50.501 --> 00:09:52.834
as we find specific problems

00:09:52.834 --> 00:09:55.334
that require massive
computing power

00:09:55.334 --> 00:09:56.968
and require the distributed
computing

00:09:56.968 --> 00:10:00.868
that the Google infrastructure
affords us.

00:10:00.868 --> 00:10:03.767
For our databases, we--we--

00:10:03.767 --> 00:10:06.267
we started with one
and obviously

00:10:06.267 --> 00:10:07.968
like Amy said we started
with one main one

00:10:07.968 --> 00:10:09.801
and a replica for backup

00:10:09.801 --> 00:10:12.968
and a replica for reporting.

00:10:12.968 --> 00:10:15.701
But we quickly outgrew that.

00:10:15.701 --> 00:10:18.868
We now have multiple vertical
partitions

00:10:18.868 --> 00:10:22.434
which are basically when
we take a part of the website

00:10:22.434 --> 00:10:24.968
that kind of stands on its own.

00:10:24.968 --> 00:10:27.901
And that part of the website
doesn't have

00:10:27.901 --> 00:10:28.934
too many external dependencies.

00:10:28.934 --> 00:10:31.501
We took that--

00:10:31.501 --> 00:10:34.033
We stuck that part
on a separate set

00:10:34.033 --> 00:10:35.601
of database machines

00:10:35.601 --> 00:10:36.868
and maybe even a separate set
of web-based machines.

00:10:36.868 --> 00:10:38.834
And we said, "Okay,
this can scale on its own.

00:10:38.834 --> 00:10:40.868
It doesn't have to bother
the rest of the site."

00:10:40.868 --> 00:10:42.868
The same thing with other parts.

00:10:42.868 --> 00:10:45.667
For parts of the site
that were sufficiently large

00:10:45.667 --> 00:10:49.901
and--and that were hard
to disentangle,

00:10:49.901 --> 00:10:51.634
like for example
the user metadata

00:10:51.634 --> 00:10:53.300
and the associated video
metadata,

00:10:53.300 --> 00:10:57.100
we did horizontal partitioning
where we split it up.

00:10:57.100 --> 00:11:01.501
Like we have multiple databases
with the same schema

00:11:01.501 --> 00:11:03.701
But different sets of users.

00:11:03.701 --> 00:11:06.634
So one nth of our users
are in this partition.

00:11:06.634 --> 00:11:08.300
One nth are here,
one nth are here.

00:11:08.300 --> 00:11:10.834
And we did that just because

00:11:10.834 --> 00:11:12.934
that seemed to be the most
scalable way to do it.

00:11:12.934 --> 00:11:14.767
And then we have a look-up
database that allows us

00:11:14.767 --> 00:11:20.267
to associate a user
with one of these partitions.

00:11:20.267 --> 00:11:23.868
So that common operations
like watching a video

00:11:23.868 --> 00:11:26.100
and seeing a user's
channel page

00:11:26.100 --> 00:11:28.234
are much quicker than
they would be otherwise.

00:11:28.234 --> 00:11:33.801
We had to scan through each
of the databases.

00:11:33.801 --> 00:11:36.334
Those scalability challenges--

00:11:36.334 --> 00:11:38.801
we've had a number
of major challenges.

00:11:38.801 --> 00:11:41.267
It seems like every time
we add capacity,

00:11:41.267 --> 00:11:43.734
there's a number of things
that can sap away the capacity.

00:11:43.734 --> 00:11:46.501
The first was rapid,
unpredictable growth.

00:11:46.501 --> 00:11:49.200
It's pretty amazing,
like as I mentioned before,

00:11:49.200 --> 00:11:53.000
when it seems like no matter
how much capacity you add,

00:11:53.000 --> 00:11:57.901
the users come back
and consume all of it.

00:11:57.901 --> 00:12:00.033
It's gratifying
and it's rewarding,

00:12:00.033 --> 00:12:01.868
but at the same time
it's definitely a challenge

00:12:01.868 --> 00:12:03.267
because especially
in the early days

00:12:03.267 --> 00:12:05.067
we didn't have, you know,
the budget.

00:12:05.067 --> 00:12:06.667
You know, pre-acquisition.

00:12:06.667 --> 00:12:08.000
And even post-acquisition,

00:12:08.000 --> 00:12:09.834
there's still only so much
you can do

00:12:09.834 --> 00:12:12.567
when you're building
a certain kind of buffer

00:12:12.567 --> 00:12:14.467
and then the growth
just eats through

00:12:14.467 --> 00:12:16.000
all that buffer and more.

00:12:16.000 --> 00:12:18.133
So it's an interesting game
to play

00:12:18.133 --> 00:12:20.701
not having too much excess
machines around.

00:12:20.701 --> 00:12:22.634
Not spending too much money
at one time

00:12:22.634 --> 00:12:26.634
versus trying to keep up
with user growth.

00:12:26.634 --> 00:12:28.934
Passionate users.

00:12:28.934 --> 00:12:32.601
We couldn't have foreseen
when we started this site

00:12:32.601 --> 00:12:34.934
that some users would have

00:12:34.934 --> 00:12:38.167
thousands and thousands
and thousands of videos

00:12:38.167 --> 00:12:41.767
and people would want
to do video blogging

00:12:41.767 --> 00:12:42.801
for every second of their life.

00:12:42.801 --> 00:12:43.834
Things like that.

00:12:43.834 --> 00:12:44.934
And those are good uses
of our site.

00:12:44.934 --> 00:12:47.567
But it just means that
we need to work

00:12:47.567 --> 00:12:49.000
a little bit harder
in some of these cases

00:12:49.000 --> 00:12:50.701
to make sure that
we can accommodate

00:12:50.701 --> 00:12:52.801
these types of uses.

00:12:52.801 --> 00:12:54.601
New features.

00:12:54.601 --> 00:12:58.501
A couple years ago,
the video space was brand-new

00:12:58.501 --> 00:13:00.667
and you were lucky
to be able to play a video

00:13:00.667 --> 00:13:04.467
without installing some kind
of OS specific plugin

00:13:04.467 --> 00:13:06.534
or whatever.

00:13:06.534 --> 00:13:09.033
But now there's definitely
a higher baseline, right.

00:13:09.033 --> 00:13:10.234
I mean, not only
do you need

00:13:10.234 --> 00:13:13.067
to have ubiquitous access
to videos,

00:13:13.067 --> 00:13:15.534
imbedability, APIs,
all that stuff.

00:13:15.534 --> 00:13:17.067
All that stuff is assumed.

00:13:17.067 --> 00:13:21.400
Now you get into stuff
like recommendation algorithms

00:13:21.400 --> 00:13:23.868
and social graphs
and all sorts of things

00:13:23.868 --> 00:13:26.734
that are
not computationally cheap.

00:13:26.734 --> 00:13:28.901
So certainly a challenge
to try to balance

00:13:28.901 --> 00:13:31.267
user experience, new features,

00:13:31.267 --> 00:13:34.067
and scalability of the site.

00:13:34.067 --> 00:13:35.934
Pushing hardware
and software boundaries.

00:13:35.934 --> 00:13:38.934
I'll talk a little bit
about this later on.

00:13:38.934 --> 00:13:42.100
But basically when you run
hardware and software

00:13:42.100 --> 00:13:44.801
too close to its limits,
it's more likely to fail.

00:13:44.801 --> 00:13:46.901
And I'll go into a couple
of examples

00:13:46.901 --> 00:13:52.167
of times we've run
into these kinds of issues.

00:13:52.167 --> 00:13:56.367
And finally, performance
bottlenecks are getting obscure.

00:13:56.367 --> 00:14:01.300
We file bugs with a couple
of the vendors

00:14:01.300 --> 00:14:03.767
that provide support
for our open serve software,

00:14:03.767 --> 00:14:06.634
because sometimes we want
a little extra few people

00:14:06.634 --> 00:14:07.767
to help look at some issues.

00:14:07.767 --> 00:14:10.234
And it turns out
when we forward those bugs

00:14:10.234 --> 00:14:11.434
to them, they're, like,
"Really?"

00:14:11.434 --> 00:14:14.234
And then they spend a few days
reproducing it.

00:14:14.234 --> 00:14:16.501
And then they don't really have

00:14:16.501 --> 00:14:17.834
any kind of real solution
for us.

00:14:17.834 --> 00:14:20.801
It's kind of interesting
when you get to that level

00:14:20.801 --> 00:14:22.701
and when you start Googling
for stuff

00:14:22.701 --> 00:14:25.334
and when you start
searching blogs

00:14:25.334 --> 00:14:27.067
and you don't find anything

00:14:27.067 --> 00:14:29.067
about the problem
you're encountering.

00:14:29.067 --> 00:14:31.667
It definitely puts you
in an interesting spot.

00:14:31.667 --> 00:14:34.968
And some of these problems
can be solved

00:14:34.968 --> 00:14:36.734
by having more headroom.

00:14:36.734 --> 00:14:39.033
But for some
of the software stuff,

00:14:39.033 --> 00:14:40.367
we're pushing it in ways

00:14:40.367 --> 00:14:45.834
that I don't think the creators
ever intended.

00:14:45.834 --> 00:14:49.000
So here's one example
of an issue we had.

00:14:49.000 --> 00:14:51.467
If you can't read it,

00:14:51.467 --> 00:14:53.400
it says, "We can't accept
any more videos.

00:14:53.400 --> 00:14:54.634
Too many videos."

00:14:54.634 --> 00:14:59.334
So this was sent at 2:24 A.M.
on October 22nd.

00:14:59.334 --> 00:15:01.767
I was about to go to sleep
at that point.

00:15:01.767 --> 00:15:06.434
And this wasn't a very pleasant
email at that point.

00:15:06.434 --> 00:15:09.868
And basically our video uploads
had ground to a halt.

00:15:09.868 --> 00:15:13.200
After a little bad debugging,
didn't take very long,

00:15:13.200 --> 00:15:15.334
we figured out that well,

00:15:15.334 --> 00:15:17.567
we sort of did the original
bone-headed

00:15:17.567 --> 00:15:20.133
let's get it out kind of--
start-up kind of mentality

00:15:20.133 --> 00:15:23.067
of putting the--

00:15:23.067 --> 00:15:26.100
storing the video thumbnails
for each of our videos

00:15:26.100 --> 00:15:28.067
into separate subdirectories.

00:15:28.067 --> 00:15:29.467
But all the subdirectories were

00:15:29.467 --> 00:15:32.100
in one flat directory structure.

00:15:32.100 --> 00:15:35.100
So we had tens of thousands
of files in one directory.

00:15:35.100 --> 00:15:37.000
Not a good idea.

00:15:37.000 --> 00:15:40.133
So we ran into inodes
per our directory limit,

00:15:40.133 --> 00:15:43.100
at least on EXT3, which was
the file system we were using.

00:15:43.100 --> 00:15:45.601
Pretty bad thing.

00:15:45.601 --> 00:15:47.868
It's not something like--

00:15:47.868 --> 00:15:49.434
it's obviously
not rocket science

00:15:49.434 --> 00:15:50.701
that you shouldn't put
too many files

00:15:50.701 --> 00:15:51.934
in a flat directory structure.

00:15:51.934 --> 00:15:54.934
But we were trying
to keep up with growth

00:15:54.934 --> 00:15:58.133
and it wasn't too hard
to solve it.

00:15:58.133 --> 00:16:00.100
We went to, like,
a tree structure.

00:16:00.100 --> 00:16:01.434
Hierarchal structure.

00:16:01.434 --> 00:16:02.801
It just wasn't the most pleasant
thing to code

00:16:02.801 --> 00:16:03.801
at that time of night.

00:16:03.801 --> 00:16:04.834
That's all.

00:16:04.834 --> 00:16:06.834
And to test
and under the pressure

00:16:06.834 --> 00:16:09.901
of all the video uploads
failing in the meantime.

00:16:09.901 --> 00:16:12.267
So it wasn't the funnest thing.

00:16:12.267 --> 00:16:14.734
Another thing was going back

00:16:14.734 --> 00:16:16.834
to the earlier comment I made

00:16:16.834 --> 00:16:20.100
about pushing things
to the limits,

00:16:20.100 --> 00:16:21.767
we were pushing our database
to its limits

00:16:21.767 --> 00:16:23.334
because we hadn't developed
the infrastructure

00:16:23.334 --> 00:16:24.601
required to partition it yet.

00:16:24.601 --> 00:16:25.934
It's a difficult problem.

00:16:25.934 --> 00:16:27.501
So this email, uh--

00:16:27.501 --> 00:16:28.767
Or this posting I should say,

00:16:28.767 --> 00:16:30.567
this article from CNET

00:16:30.567 --> 00:16:35.100
was covering our down time
that we had.

00:16:35.100 --> 00:16:37.033
It started at 7:30 A.M.
and went for five hours.

00:16:37.033 --> 00:16:40.968
It was very unpleasant.

00:16:40.968 --> 00:16:43.734
I think actually more unpleasant
than the actual down time

00:16:43.734 --> 00:16:46.501
was the fact that my parents
were calling me

00:16:46.501 --> 00:16:48.000
asking me if I was okay.

00:16:48.000 --> 00:16:49.934
You know?

00:16:49.934 --> 00:16:51.701
Trying to lend me
their moral support.

00:16:51.701 --> 00:16:54.300
So I was, like, I just need
to deal with this.

00:16:54.300 --> 00:16:56.200
So it's--

00:16:56.200 --> 00:16:58.834
We were--we looked at the laws

00:16:58.834 --> 00:17:00.734
and MySQL had given us
an error.

00:17:00.734 --> 00:17:02.968
The error was that checksum
had failed.

00:17:02.968 --> 00:17:04.234
And the reason--

00:17:04.234 --> 00:17:07.200
what happens when MySQL
reads data from the disc

00:17:07.200 --> 00:17:09.667
is that there
is a checksum stored

00:17:09.667 --> 00:17:12.667
for every page,
which is about 16k I think.

00:17:12.667 --> 00:17:14.701
Stored on disc.

00:17:14.701 --> 00:17:17.234
And when MySQL reads the data
from the disc,

00:17:17.234 --> 00:17:20.334
it calculates a new checksum
and compares that

00:17:20.334 --> 00:17:21.400
against what's stored
on the disk.

00:17:21.400 --> 00:17:23.734
to make sure that nothing
in between

00:17:23.734 --> 00:17:25.701
the disc and the process
is messed up

00:17:25.701 --> 00:17:27.601
and the data is
actually intact.

00:17:27.601 --> 00:17:29.667
Turns out
that they didn't match,

00:17:29.667 --> 00:17:31.300
so MySQL kills itself
at that point.

00:17:31.300 --> 00:17:33.834
And not only
does it kill itself,

00:17:33.834 --> 00:17:36.133
it takes four or five hours,

00:17:36.133 --> 00:17:38.033
depending on the volume
of transactions

00:17:38.033 --> 00:17:40.834
and how many--
the volume of changes

00:17:40.834 --> 00:17:42.033
that have not been
flushed to disc.

00:17:42.033 --> 00:17:46.801
It will take four or five hours
to recover.

00:17:46.801 --> 00:17:48.901
At that point,
like a lot of us,

00:17:48.901 --> 00:17:50.601
we didn't have a dedicated DBA
at that point.

00:17:50.601 --> 00:17:52.634
He had just joined.

00:17:52.634 --> 00:17:53.701
He didn't know MySQL yet.

00:17:53.701 --> 00:17:56.200
And I was filling in for that.

00:17:56.200 --> 00:17:59.267
Anyway, we went through
all sorts of stuff

00:17:59.267 --> 00:18:02.067
to try to figure out
what the culprit was.

00:18:02.067 --> 00:18:04.334
We searched everywhere online.

00:18:04.334 --> 00:18:05.534
We found a lot of questions
but no answers.

00:18:05.534 --> 00:18:07.534
No solutions to this issue.

00:18:07.534 --> 00:18:11.534
And we frantically put
a whole bunch of orders out

00:18:11.534 --> 00:18:12.901
for different pieces
of hardware

00:18:12.901 --> 00:18:16.701
that may not exhibit
the same issues.

00:18:16.701 --> 00:18:17.934
We were thinking maybe
it's a hardware issue

00:18:17.934 --> 00:18:20.701
because not everyone
is having this

00:18:20.701 --> 00:18:21.934
and lots of people us MySQL.

00:18:21.934 --> 00:18:23.834
Some of these people
are bigger than us.

00:18:23.834 --> 00:18:27.334
And after a long period of time,

00:18:27.334 --> 00:18:29.367
we happened upon one blog post.

00:18:29.367 --> 00:18:32.234
Exactly one blog post
written that very day

00:18:32.234 --> 00:18:37.400
saying that there is an issue
with this little guy

00:18:37.400 --> 00:18:38.801
which I'm sticking on with
an expansion slide.

00:18:38.801 --> 00:18:40.267
It's a riser card.

00:18:40.267 --> 00:18:43.534
Because we had recently
for performance purposes

00:18:43.534 --> 00:18:46.868
switched from a 4U machine,
which is taller,

00:18:46.868 --> 00:18:48.734
to a 3U machine because
a 3U machine

00:18:48.734 --> 00:18:52.234
could be outfitted with a faster
IO subset stem.

00:18:52.234 --> 00:18:54.100
At least for the vendor
we were using.

00:18:54.100 --> 00:18:59.000
And the shorter height
meant that

00:18:59.000 --> 00:19:01.400
we couldn't accommodate
a full-height expansion card

00:19:01.400 --> 00:19:03.434
like the rate controller
that we had.

00:19:03.434 --> 00:19:05.267
So we had to put a riser card

00:19:05.267 --> 00:19:07.234
so that instead of going
like this,

00:19:07.234 --> 00:19:10.467
the card goes like this
where there's plenty of room.

00:19:10.467 --> 00:19:12.567
And it turns out that
the combination

00:19:12.567 --> 00:19:15.067
of the rate card
and the riser card

00:19:15.067 --> 00:19:17.534
would sometimes cause
interesting fluctuations

00:19:17.534 --> 00:19:19.901
in voltages that might cause
an inverted bit

00:19:19.901 --> 00:19:21.033
every now and then.

00:19:21.033 --> 00:19:22.667
So that's exactly what happened.

00:19:22.667 --> 00:19:24.067
The data was fine
on the disc.

00:19:24.067 --> 00:19:25.701
We validated it after
it crashed.

00:19:25.701 --> 00:19:26.834
It was fine.

00:19:26.834 --> 00:19:28.400
But somewhere between--

00:19:28.400 --> 00:19:30.901
Somewhere in reading the bits
off the disc,

00:19:30.901 --> 00:19:32.767
something went wrong.

00:19:32.767 --> 00:19:34.701
But that was definitely
a very tense

00:19:34.701 --> 00:19:38.033
two or three days--
or weeks rather.

00:19:38.033 --> 00:19:40.067
And the last thing--

00:19:40.067 --> 00:19:41.267
the next thing I'm gonna mention

00:19:41.267 --> 00:19:42.534
is actually one
of my favorite ones.

00:19:42.534 --> 00:19:44.868
So we were again
gonna run out of disc space.

00:19:44.868 --> 00:19:46.701
We were having vendor issues,

00:19:46.701 --> 00:19:49.067
trying to get things in on time.

00:19:49.067 --> 00:19:50.868
Growth was just explosive.

00:19:50.868 --> 00:19:53.534
So we did the right thing,

00:19:53.534 --> 00:19:55.501
which was to order machines
slightly early.

00:19:55.501 --> 00:20:00.234
And we said, "Oh,
let's rush the shipment to us."

00:20:00.234 --> 00:20:03.834
Problem is that the shipment
was rushed in the wrong way.

00:20:03.834 --> 00:20:07.000
It ended up, um--

00:20:07.000 --> 00:20:08.467
actually I don't even think
this was the--

00:20:08.467 --> 00:20:10.033
this is where it originally was.

00:20:10.033 --> 00:20:13.267
I think it ended up
on someone's BMW originally.

00:20:13.267 --> 00:20:15.868
Unloaded unceremoniously
on someone's car.

00:20:15.868 --> 00:20:18.067
So that was an interesting
thing.

00:20:18.067 --> 00:20:20.434
We scrambled.
We worked around this.

00:20:20.434 --> 00:20:23.100
But it was not pleasant
when you have 40 machines

00:20:23.100 --> 00:20:24.400
costing a couple thousand
dollars apiece

00:20:24.400 --> 00:20:27.467
and your lifeline for accepting
more videos

00:20:27.467 --> 00:20:30.801
on the concrete,
probably broken.

00:20:30.801 --> 00:20:33.701
Okay, so I'm gonna wrap up here.

00:20:33.701 --> 00:20:36.567
So basically things that we did
to scale

00:20:36.567 --> 00:20:37.868
is we kept our code
very simple.

00:20:37.868 --> 00:20:40.067
We made sure that
all the pieces were very simple

00:20:40.067 --> 00:20:44.033
so that we can optimize,

00:20:44.033 --> 00:20:46.100
so that we can debug issues,

00:20:46.100 --> 00:20:47.300
so that we can re-factor.

00:20:47.300 --> 00:20:49.133
We iterated on pretty much
everything

00:20:49.133 --> 00:20:50.634
that we possibly could've.

00:20:50.634 --> 00:20:54.534
Software, database, caching,
et cetera.

00:20:54.534 --> 00:20:57.100
We tweaked the patches
configuration file

00:20:57.100 --> 00:20:58.367
a number of times.

00:20:58.367 --> 00:21:00.100
We tweaked OS buffers.

00:21:00.100 --> 00:21:02.834
We even tweaked
our RAID settings

00:21:02.834 --> 00:21:05.267
and we use a hybrid
of hardware and software RAID

00:21:05.267 --> 00:21:06.601
for our databases.

00:21:06.601 --> 00:21:08.701
We tweaked 'em
on a memory in our system.

00:21:08.701 --> 00:21:10.300
So pretty much everything.

00:21:10.300 --> 00:21:12.367
It was a very iterative process.

00:21:12.367 --> 00:21:15.234
The last thing that worked
in our favor

00:21:15.234 --> 00:21:16.767
is I think that we just had
a really good team.

00:21:16.767 --> 00:21:19.601
I was pretty honored
to be a part of this team.

00:21:19.601 --> 00:21:21.234
Had a lot of fun.

00:21:21.234 --> 00:21:24.167
This was kind
of a nice experience

00:21:24.167 --> 00:21:26.467
where we were celebrating
reaching 100 million

00:21:26.467 --> 00:21:28.200
video views per day.

00:21:28.200 --> 00:21:32.167
And we decided to grab
some burgers

00:21:32.167 --> 00:21:33.467
and this particular restaurant

00:21:33.467 --> 00:21:35.501
serves champagne
with their burgers, so...

00:21:35.501 --> 00:21:37.734
It's a lot of fun.

00:21:37.734 --> 00:21:40.701
All right, so I have
a few more minutes left,

00:21:40.701 --> 00:21:45.701
so any questions you guys have?

00:21:45.701 --> 00:21:49.767
man: [unintelligible]

00:21:49.767 --> 00:21:50.767
Do: EXCUSE ME?

00:21:50.767 --> 00:21:55.968
man: [unintelligible]

00:21:55.968 --> 00:21:58.534
Do: Yeah, and we also hired him
for a little bit too,

00:21:58.534 --> 00:22:00.133
so that's fine.

00:22:00.133 --> 00:22:02.634
man: How long did it take him

00:22:02.634 --> 00:22:05.200
to find out what the riser
problem was?

00:22:05.200 --> 00:22:06.801
Do: I think he was--

00:22:06.801 --> 00:22:09.601
actually we didn't hire him
for that particular issue.

00:22:09.601 --> 00:22:12.734
It turns out that he was helping
another customer.

00:22:12.734 --> 00:22:14.901
And he had posted
about the experiences

00:22:14.901 --> 00:22:16.400
that he had with
the other customer.

00:22:16.400 --> 00:22:18.734
So we forgot to ask him
how long it took

00:22:18.734 --> 00:22:22.234
to figure out that issue.

00:22:22.234 --> 00:22:24.901
But yeah, it definitely
took a while for us

00:22:24.901 --> 00:22:26.601
to settle on that,

00:22:26.601 --> 00:22:27.868
'cause we had to swap out
all the RAID cards

00:22:27.868 --> 00:22:29.334
in all of our machines,
which is not very fun

00:22:29.334 --> 00:22:32.868
when the databases
are actually running.

00:22:32.868 --> 00:22:34.467
Yes.

00:22:34.467 --> 00:22:37.534
man: Can you speak a bit about
your content conversion?

00:22:37.534 --> 00:22:42.567
How you accept content,
approve it, conform it--

00:22:42.567 --> 00:22:45.167
Do: Okay, so we accept--

00:22:45.167 --> 00:22:46.634
this is somewhat
in flux right now,

00:22:46.634 --> 00:22:47.934
but the way that we've been
doing it

00:22:47.934 --> 00:22:49.701
since we were pretty much
founded

00:22:49.701 --> 00:22:53.801
is that we accept the content
through an htp post

00:22:53.801 --> 00:22:57.400
from the web browser
or from API or whatever.

00:22:57.400 --> 00:23:01.334
And then from that
we perform a couple of steps.

00:23:01.334 --> 00:23:03.100
We do sort of identification

00:23:03.100 --> 00:23:05.801
to make sure it's actually
a video, for one thing.

00:23:05.801 --> 00:23:08.133
Some people upload
PowerPoint files

00:23:08.133 --> 00:23:09.767
and stuff like that.

00:23:09.767 --> 00:23:11.267
And we don't support that.

00:23:11.267 --> 00:23:16.601
And frame rate detection,
source detection, et cetera.

00:23:16.601 --> 00:23:19.534
We do a number of things
like that

00:23:19.534 --> 00:23:22.801
and then after that
we put it through transcoding

00:23:22.801 --> 00:23:25.801
using the settings we detect.

00:23:25.801 --> 00:23:28.767
And then after that we--

00:23:28.767 --> 00:23:31.801
we take the transcoded file,

00:23:31.801 --> 00:23:33.501
we copy that to the machines

00:23:33.501 --> 00:23:35.601
that it's gonna be served from.

00:23:35.601 --> 00:23:37.767
And for a couple
of the other formats--

00:23:37.767 --> 00:23:40.033
there's H264.

00:23:40.033 --> 00:23:41.767
There's a couple other formats

00:23:41.767 --> 00:23:43.434
for the mobile phone,
et cetera.

00:23:43.434 --> 00:23:45.334
Those happen currently after

00:23:45.334 --> 00:23:47.434
the initial FLV encoding

00:23:47.434 --> 00:23:51.100
as well as the higher-quality
version.

00:23:51.100 --> 00:23:53.567
So that's at a high-level
at least what happens.

00:23:53.567 --> 00:23:55.534
Yes.
Mm-hm?

00:23:55.534 --> 00:23:59.434
man: Can you put up the Apache
software slide again?

00:23:59.434 --> 00:24:00.934
Do: Excuse me, I didn't hear
the question.

00:24:00.934 --> 00:24:03.667
man: Can you put back up
the Apache software slide?

00:24:03.667 --> 00:24:07.100
Do: Um, let's see here.

00:24:07.100 --> 00:24:10.334
This one?

00:24:10.334 --> 00:24:11.601
Okay.

00:24:11.601 --> 00:24:13.200
Yeah, it's a little bit small,

00:24:13.200 --> 00:24:17.868
but I think I spoke
to most of it hopefully.

00:24:17.868 --> 00:24:19.167
Yes.

00:24:19.167 --> 00:24:21.501
man: Are you sharing
the database at all?

00:24:21.501 --> 00:24:23.300
Are you splitting up?

00:24:23.300 --> 00:24:26.300
I imagine that you have
ridiculously huge tables

00:24:26.300 --> 00:24:29.801
for some of the lengthy users.

00:24:29.801 --> 00:24:32.334
You have
a hundred million companies

00:24:32.334 --> 00:24:33.601
consuming your stuff,

00:24:33.601 --> 00:24:35.334
so they're naturally
very impressed.

00:24:35.334 --> 00:24:37.267
Do you have to partition
the databases?

00:24:37.267 --> 00:24:39.501
[unintelligible]

00:24:39.501 --> 00:24:40.801
Do: Definitely, definitely.

00:24:40.801 --> 00:24:42.467
I spoke a little bit
about that

00:24:42.467 --> 00:24:44.067
in a previous slide where

00:24:44.067 --> 00:24:46.767
we do a combination
of vertical partitioning

00:24:46.767 --> 00:24:50.534
for things where the table
is manageable.

00:24:50.534 --> 00:24:51.801
The size is manageable.

00:24:51.801 --> 00:24:54.634
Maybe the traffic
is quite high.

00:24:54.634 --> 00:24:57.701
But for things where
both the size and the traffic

00:24:57.701 --> 00:25:00.534
are particularly challenging
to cope with,

00:25:00.534 --> 00:25:02.133
we do horizontal partitioning

00:25:02.133 --> 00:25:05.300
where we have a set
of master databases

00:25:05.300 --> 00:25:07.567
with different sets of data
in each of them.

00:25:07.567 --> 00:25:11.767
And each of those have replicas
that we can issue reads

00:25:11.767 --> 00:25:14.133
to those in an efficient way.

00:25:14.133 --> 00:25:15.434
So that's how we handle it.

00:25:15.434 --> 00:25:17.267
And then we have a look-up
database to map

00:25:17.267 --> 00:25:21.400
users and videos to each
of those partitions.

00:25:21.400 --> 00:25:22.801
Does that answer your question?

00:25:22.801 --> 00:25:24.567
man: It does kind of.

00:25:24.567 --> 00:25:26.067
I spoke with some people
from High Five

00:25:26.067 --> 00:25:27.200
and they were saying
that they actually

00:25:27.200 --> 00:25:29.734
wrote it up beyond
that where this table

00:25:29.734 --> 00:25:33.267
was broken up further
into different charts.

00:25:33.267 --> 00:25:35.200
They were using--

00:25:35.200 --> 00:25:37.934
They weren't using MySQL
because MySQL's indexing--

00:25:37.934 --> 00:25:39.968
there was too much overhead
for each one of those.

00:25:39.968 --> 00:25:42.901
So I was surprised
that you were using MySQL.

00:25:42.901 --> 00:25:44.467
But I was curious

00:25:44.467 --> 00:25:46.601
how you're dealing
with some of those issues.

00:25:46.601 --> 00:25:49.367
Do: I think our usual solution
for all this

00:25:49.367 --> 00:25:50.501
is to partition more I think.

00:25:50.501 --> 00:25:52.267
That helps a lot,

00:25:52.267 --> 00:25:55.434
because we found that database
has a sweet spot.

00:25:55.434 --> 00:25:59.067
It's kind of hard to figure out
what that sweet spot is.

00:25:59.067 --> 00:26:00.701
I sat through empirical,
like,

00:26:00.701 --> 00:26:02.267
actually trying things out.

00:26:02.267 --> 00:26:05.467
It turns out that not all
the data has to fit in memory.

00:26:05.467 --> 00:26:07.400
Just the data that you need
to use within

00:26:07.400 --> 00:26:08.634
a certain period of time.

00:26:08.634 --> 00:26:10.968
Like the working set,
in other words.

00:26:10.968 --> 00:26:14.868
So we found that the memory
to disc ratio

00:26:14.868 --> 00:26:16.501
is probably the key thing
to scale.

00:26:16.501 --> 00:26:17.667
And a number of the other--

00:26:17.667 --> 00:26:19.734
like the indexing
and all the other stuff

00:26:19.734 --> 00:26:21.801
we've tweaked that over time.

00:26:21.801 --> 00:26:24.234
Um, one last question, yeah.

00:26:24.234 --> 00:26:25.734
man: Did you guys build

00:26:25.734 --> 00:26:28.167
on some sort of a tool kit
for that

00:26:28.167 --> 00:26:31.567
in order to implement
the scaling of it?

00:26:31.567 --> 00:26:32.667
Do: Um, no.

00:26:32.667 --> 00:26:34.167
A lot of the stuff
that we've done

00:26:34.167 --> 00:26:36.400
is, like, kind of home-grown.

00:26:36.400 --> 00:26:37.734
We have a very light layer

00:26:37.734 --> 00:26:40.434
on top of the Python DBAPI.

00:26:40.434 --> 00:26:42.234
MySQL Python.

00:26:42.234 --> 00:26:45.033
And we just build kind of
our initial layer

00:26:45.033 --> 00:26:46.767
which is dealing with
a single database.

00:26:46.767 --> 00:26:49.067
And then as time went on, we--

00:26:49.067 --> 00:26:50.367
what was kind of nice
about Python,

00:26:50.367 --> 00:26:52.367
other languages like Python
that are high level,

00:26:52.367 --> 00:26:54.334
is that we had this--

00:26:54.334 --> 00:26:56.300
we use this thing called
Decorator

00:26:56.300 --> 00:26:58.467
around all the functions
that acts as a database.

00:26:58.467 --> 00:27:01.067
And all it is
is an intermediary.

00:27:01.067 --> 00:27:02.701
It's a proxy to the function.

00:27:02.701 --> 00:27:05.834
And that gives you the state
that you need

00:27:05.834 --> 00:27:07.701
to talk to the database.

00:27:07.701 --> 00:27:10.667
And since we have that layer
of indirection,

00:27:10.667 --> 00:27:13.234
we just were able
to plug things in.

00:27:13.234 --> 00:27:15.033
And we use a little bit
of Python magic

00:27:15.033 --> 00:27:16.601
to make things work seamlessly

00:27:16.601 --> 00:27:19.200
so that 99% of our code
didn't have to change,

00:27:19.200 --> 00:27:22.667
which is pretty nice.

00:27:22.667 --> 00:27:24.968
Okay, I think I'm running out

00:27:24.968 --> 00:27:26.767
of time for questions
unfortunately,

00:27:26.767 --> 00:27:28.133
but thanks for listening.

00:27:28.133 --> 00:27:31.868
[applause]

