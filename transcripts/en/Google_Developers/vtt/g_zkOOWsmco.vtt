WEBVTT
Kind: captions
Language: en

00:00:03.040 --> 00:00:06.420
Hi, I'm Filip from the
Google Chrome Apps team.

00:00:06.420 --> 00:00:09.440
Chrome apps and extensions
use familiar web technologies,

00:00:09.440 --> 00:00:12.030
and can be installed on the
desktop, or any Chrome OS

00:00:12.030 --> 00:00:13.520
device.

00:00:13.520 --> 00:00:16.250
These client apps have
access to additional APIs

00:00:16.250 --> 00:00:19.050
not available to
ordinary web pages.

00:00:19.050 --> 00:00:21.000
A common problem
developers face,

00:00:21.000 --> 00:00:23.660
is how to get the latest
data from their server

00:00:23.660 --> 00:00:25.620
to the client app.

00:00:25.620 --> 00:00:27.100
Say you're building
an application

00:00:27.100 --> 00:00:30.420
to track play-by-play
stats for the World Cup.

00:00:30.420 --> 00:00:33.410
One way to get an
update is by polling.

00:00:33.410 --> 00:00:36.270
Your client can periodically
check with the server

00:00:36.270 --> 00:00:38.130
to get the latest data.

00:00:38.130 --> 00:00:40.820
But it doesn't know when
new data is available.

00:00:40.820 --> 00:00:43.720
So sometimes it will
come back with nothing,

00:00:43.720 --> 00:00:46.300
while sometimes it will
get the updates long

00:00:46.300 --> 00:00:48.820
after the data is
actually available.

00:00:48.820 --> 00:00:50.650
That's not great.

00:00:50.650 --> 00:00:53.340
It needlessly consumes
network bandwidth, grounds

00:00:53.340 --> 00:00:56.900
down the device's battery,
and delivers a poor experience

00:00:56.900 --> 00:01:01.310
to the user who wants to the
game updates as they happen.

00:01:01.310 --> 00:01:05.000
Good news--
chrome.gcm API allows

00:01:05.000 --> 00:01:06.510
you to access Google
Cloud Messaging

00:01:06.510 --> 00:01:09.190
service to solve that problem.

00:01:09.190 --> 00:01:12.540
So how can you do it better?

00:01:12.540 --> 00:01:15.160
You can tell your World
Cup tracker server

00:01:15.160 --> 00:01:18.090
which clients need to be
notified as data becomes

00:01:18.090 --> 00:01:24.080
available, and use GCM to push
the data to the right clients.

00:01:24.080 --> 00:01:26.170
And how is that done?

00:01:26.170 --> 00:01:29.650
Through GCM
downstream messaging.

00:01:29.650 --> 00:01:32.420
First your app
registers with GCM,

00:01:32.420 --> 00:01:35.650
indicating the sender ID of the
application server, from which

00:01:35.650 --> 00:01:38.840
it wants to receive
the messages.

00:01:38.840 --> 00:01:41.890
It receives the
registration ID in return.

00:01:41.890 --> 00:01:44.540
Next, your application
sends the registration

00:01:44.540 --> 00:01:47.340
ID to the server,
followed by information

00:01:47.340 --> 00:01:51.180
about teams or games the
user is interested in.

00:01:51.180 --> 00:01:54.020
As games progress, your
server sends messages

00:01:54.020 --> 00:02:00.080
with the right registration ID
to GCM, and GCM does the rest.

00:02:00.080 --> 00:02:01.750
Your upper extension
does not even

00:02:01.750 --> 00:02:04.490
need to be running at the
time the message is sent,

00:02:04.490 --> 00:02:07.290
because once the message
is received by Chrome,

00:02:07.290 --> 00:02:11.500
it will start your app and
trigger chrome.gcm on message

00:02:11.500 --> 00:02:13.030
event.

00:02:13.030 --> 00:02:15.140
That's how you can make
sure your users are not

00:02:15.140 --> 00:02:18.180
going to miss that big game.

00:02:18.180 --> 00:02:21.460
And if Chrome is offline when
your server sends the message,

00:02:21.460 --> 00:02:23.570
that's not a problem
either, because when

00:02:23.570 --> 00:02:26.440
GCM receives messages
from your server,

00:02:26.440 --> 00:02:28.920
it stores them in a queue.

00:02:28.920 --> 00:02:31.170
Once the device is
back online, GCM

00:02:31.170 --> 00:02:34.980
delivers the queued messages,
and Chrome fires chrome.gcm

00:02:34.980 --> 00:02:38.190
on message event in your app.

00:02:38.190 --> 00:02:40.880
If Chrome cannot be reached
for a long period of time,

00:02:40.880 --> 00:02:43.630
the messages could be dropped,
either there because they

00:02:43.630 --> 00:02:48.480
exceeded their time to live, or
the queue size limit was hit.

00:02:48.480 --> 00:02:51.270
In the latter case,
a special message

00:02:51.270 --> 00:02:54.550
will be sent to the application,
triggering chrome.gcm

00:02:54.550 --> 00:02:57.720
on messages delete event, to
let you know that it happened

00:02:57.720 --> 00:03:00.910
and allow you to
handle that situation.

00:03:00.910 --> 00:03:03.980
OK, that's downstream messaging.

00:03:03.980 --> 00:03:07.425
Now let's talk about delivering
messages from your client app

00:03:07.425 --> 00:03:10.380
to the server.

00:03:10.380 --> 00:03:13.660
Without GCM, your client app
might be conducting the app

00:03:13.660 --> 00:03:17.316
server through
XML http requests.

00:03:17.316 --> 00:03:19.440
But if the user doesn't
have the network connection

00:03:19.440 --> 00:03:23.040
at the moment, that request may
have to be repeated many times.

00:03:23.040 --> 00:03:27.020
Again, that's a very
inefficient use of resources.

00:03:27.020 --> 00:03:29.860
Luckily chrome.gcm
API offers the ability

00:03:29.860 --> 00:03:32.940
to send upstream
messages from your app

00:03:32.940 --> 00:03:36.220
to an application server,
using the same cloud messaging

00:03:36.220 --> 00:03:40.470
infrastructure If your
user wants to follow games

00:03:40.470 --> 00:03:44.340
of Italy's national team, you
can simply call chrome.gcm send

00:03:44.340 --> 00:03:47.480
function to send a
message to the server.

00:03:47.480 --> 00:03:50.210
The message can contain up
to four kilobytes of data,

00:03:50.210 --> 00:03:52.900
and must specify the address
of the recipient, which

00:03:52.900 --> 00:03:56.400
should be to sender ID of
your application server.

00:03:56.400 --> 00:03:58.750
Before sending a
message to GCM, Chrome

00:03:58.750 --> 00:04:01.620
stores it locally to make
sure it can be retransmitted

00:04:01.620 --> 00:04:05.970
upon failure, which can
happen when the user does not

00:04:05.970 --> 00:04:09.370
have network access or
the connection is spotty.

00:04:09.370 --> 00:04:11.710
Once Chrome is
online, it attempts

00:04:11.710 --> 00:04:14.860
to send all queued messages.

00:04:14.860 --> 00:04:18.720
And when the GCM server confirms
the receipt of a message,

00:04:18.720 --> 00:04:21.440
Chrome removes it
from the local store,

00:04:21.440 --> 00:04:24.160
while Google Cloud Messaging
infrastructure delivers

00:04:24.160 --> 00:04:26.450
the message to the
application server.

00:04:26.450 --> 00:04:28.790
As a result you get
the same benefits

00:04:28.790 --> 00:04:31.830
of energy savings and
delivery, regardless

00:04:31.830 --> 00:04:35.000
of the network connection
state of the time of sending,

00:04:35.000 --> 00:04:37.070
as with downstream messaging.

00:04:37.070 --> 00:04:39.850
You can find more details on
how to configure your server

00:04:39.850 --> 00:04:43.020
to enable apps through
messaging online.

00:04:43.020 --> 00:04:44.640
Just like with
downstream messages,

00:04:44.640 --> 00:04:47.180
you can make upstream
messages more time-sensitive

00:04:47.180 --> 00:04:49.500
using a time-to-live parameter.

00:04:49.500 --> 00:04:51.820
For instance, if
your user does not

00:04:51.820 --> 00:04:54.470
get online within a
few minutes or hours,

00:04:54.470 --> 00:04:58.450
Chrome can simply expire
and drop the message.

00:04:58.450 --> 00:05:01.010
Setting time-to-live
for upstream messages

00:05:01.010 --> 00:05:03.430
has two benefits-- it
allows you to manage

00:05:03.430 --> 00:05:06.470
your applications queue
size on the Chrome side,

00:05:06.470 --> 00:05:10.510
and there is a queue size limit,
and when delivery times out,

00:05:10.510 --> 00:05:13.950
Chrome will erase chrome.gcm
unsent error event, which

00:05:13.950 --> 00:05:16.330
will indicate that the
message was not delivered,

00:05:16.330 --> 00:05:20.090
allowing your application
to respond accordingly.

00:05:20.090 --> 00:05:23.740
So this all looks great, but
I'm sure you're wondering,

00:05:23.740 --> 00:05:25.970
what's the price?

00:05:25.970 --> 00:05:28.090
Google doesn't charge
anything for GCM,

00:05:28.090 --> 00:05:30.350
and you can start
using it today.

00:05:30.350 --> 00:05:32.890
To learn more about
chrome.gcm API, please

00:05:32.890 --> 00:05:35.140
check out our
documentation page.

00:05:35.140 --> 00:05:37.550
And remember, Google
Cloud Messaging

00:05:37.550 --> 00:05:40.130
makes building efficient
real-time apps a breeze.

00:05:40.130 --> 00:05:42.410
Give it a try.

