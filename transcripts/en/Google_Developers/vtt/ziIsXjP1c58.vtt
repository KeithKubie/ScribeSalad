WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.120
KYLE SIMPSON: I'm Kyle Simpson,
and we are the honored panel

00:00:04.120 --> 00:00:07.110
that's been chosen to speak
to you while you are gradually

00:00:07.110 --> 00:00:09.960
lazing into your food
comas after lunch.

00:00:09.960 --> 00:00:11.590
So we're pretty
excited about that.

00:00:11.590 --> 00:00:14.410
We'll try to keep it
lively and fun today,

00:00:14.410 --> 00:00:16.640
and hopefully my
goal is that there's

00:00:16.640 --> 00:00:19.740
at least one chair thrown,
but we'll see how that goes.

00:00:19.740 --> 00:00:20.240
OK.

00:00:20.240 --> 00:00:22.980
So I-- my names--
probably most people

00:00:22.980 --> 00:00:24.370
know me as getify online.

00:00:24.370 --> 00:00:25.840
I'm an open web evangelist.

00:00:25.840 --> 00:00:28.375
I teach JavaScript, and
I write about JavaScript.

00:00:28.375 --> 00:00:29.750
I've got a series
of books on it.

00:00:29.750 --> 00:00:31.650
So that's a little bit about me.

00:00:31.650 --> 00:00:34.460
But I wanted to quickly
introduce my panelists,

00:00:34.460 --> 00:00:36.670
because they're actually
the experts on the topic.

00:00:36.670 --> 00:00:39.160
So over here to my far
right, your far left,

00:00:39.160 --> 00:00:43.000
is Matt Miller, co-founder
of Lapwing Labs, correct?

00:00:43.000 --> 00:00:45.809
And he told me in
his introduction

00:00:45.809 --> 00:00:47.850
that he really loves open
source, which is great.

00:00:47.850 --> 00:00:50.600
He loves travelling,
he's a big fan of SVG.

00:00:50.600 --> 00:00:52.910
Any SVG fans in the crowd?

00:00:52.910 --> 00:00:54.650
Yeah, all right.

00:00:54.650 --> 00:00:57.190
And I guess most favorite
of all, he loves Docker,

00:00:57.190 --> 00:00:59.470
and many of us can also
identify with that.

00:00:59.470 --> 00:01:01.280
So welcome Matt Miller.

00:01:01.280 --> 00:01:02.350
MATT MILLER: Thank you

00:01:02.350 --> 00:01:05.180
KYLE SIMPSON: To his
left, we have David Beck

00:01:05.180 --> 00:01:07.629
who founded Rotunda or
just worked for Rotunda?

00:01:07.629 --> 00:01:08.670
DAVID BECK: Yes, founded.

00:01:08.670 --> 00:01:09.940
KYLE SIMPSON: Founded
Rotunda Software.

00:01:09.940 --> 00:01:11.630
I thought-- I thought
that was true.

00:01:11.630 --> 00:01:14.470
He's worked on a software--
it's an asset pipeline build

00:01:14.470 --> 00:01:16.420
tool called Cartera
so we'll definitely

00:01:16.420 --> 00:01:19.160
want to keep the difference
between build tools and package

00:01:19.160 --> 00:01:20.940
managers-- they can
kind of overlap--

00:01:20.940 --> 00:01:22.398
but we want to keep
those separate.

00:01:22.398 --> 00:01:24.400
But he's built a tool
in the build tool space.

00:01:24.400 --> 00:01:27.019
He told me that he's most
passionate about burning IE8

00:01:27.019 --> 00:01:28.560
to the ground, and
I think most of us

00:01:28.560 --> 00:01:32.530
can agree that's a pretty good
thing to be passionate about.

00:01:32.530 --> 00:01:33.640
All right.

00:01:33.640 --> 00:01:34.870
And then we have Josh Peck.

00:01:34.870 --> 00:01:35.537
JOSH PEAK: Peek.

00:01:35.537 --> 00:01:36.619
KYLE SIMPSON: Peek, sorry.

00:01:36.619 --> 00:01:37.120
Pardon me.

00:01:37.120 --> 00:01:39.180
Josh Peek, works for GitHub.

00:01:39.180 --> 00:01:41.280
And I want everybody
to cheer and applaud

00:01:41.280 --> 00:01:44.397
because he helped write the
side-by-side diffs feature that

00:01:44.397 --> 00:01:45.396
just launched on GitHub.

00:01:45.396 --> 00:01:46.368
[CHEERING]

00:01:46.368 --> 00:01:48.215
KYLE SIMPSON: And
I think could be

00:01:48.215 --> 00:01:50.340
one of the most amazing
things that's ever happened

00:01:50.340 --> 00:01:53.671
in GitHub's history so--
but also in that same token,

00:01:53.671 --> 00:01:55.420
when I asked him to
tell me about himself,

00:01:55.420 --> 00:01:58.220
he wrote a very tiny
letters, "I work for Bower."

00:01:58.220 --> 00:02:02.090
So we'll hear, I guess, more
about that on our panel today.

00:02:02.090 --> 00:02:04.830
And then over here on
my left, your right,

00:02:04.830 --> 00:02:08.509
we have Laurie Voss,
who is the CTO of npm.

00:02:08.509 --> 00:02:11.050
And Laurie wanted to make
sure that we remind everyone

00:02:11.050 --> 00:02:13.380
that npm is spelled
lowercase, and it is not

00:02:13.380 --> 00:02:15.830
an acronym for anything.

00:02:15.830 --> 00:02:17.390
Keep that clear.

00:02:17.390 --> 00:02:20.350
But more seriously, I found
him in our conversations

00:02:20.350 --> 00:02:23.720
to be very reasoned and
thoughtful about evolving npm

00:02:23.720 --> 00:02:26.400
to serve the needs of the
collective developer community,

00:02:26.400 --> 00:02:27.670
so we're glad to have him.

00:02:27.670 --> 00:02:31.110
And finally, last but not least,
Dominic Denicola to my left.

00:02:31.110 --> 00:02:34.000
Dominic works for Google,
he's on the Chrome team.

00:02:34.000 --> 00:02:36.500
He spearheaded the ES6
Promises-- by the way,

00:02:36.500 --> 00:02:38.400
thank you so much for that.

00:02:38.400 --> 00:02:39.350
Promises are awesome.

00:02:39.350 --> 00:02:41.530
[CHEERING]

00:02:41.530 --> 00:02:43.600
KYLE SIMPSON: He is
also a contributor

00:02:43.600 --> 00:02:47.970
of controversial features to
npm such as peer dependencies.

00:02:47.970 --> 00:02:50.020
So we can all thank
him for that as well.

00:02:50.020 --> 00:02:53.630
And he's the foremost authority
on Star Wars: The Old Republic.

00:02:53.630 --> 00:02:56.500
So maybe if we have time
in the overflow session

00:02:56.500 --> 00:02:58.100
we can talk about that.

00:02:58.100 --> 00:03:00.786
But he will also open
us up now with the set

00:03:00.786 --> 00:03:02.410
up of what package
managers are and why

00:03:02.410 --> 00:03:03.490
we should be caring about them.

00:03:03.490 --> 00:03:04.810
So I'll turn it over to Dominic.

00:03:04.810 --> 00:03:05.976
DOMINIC DENICOLA: Thank you.

00:03:05.976 --> 00:03:08.530
I'm kind of wishing I made
this a Star Wars-themed package

00:03:08.530 --> 00:03:12.300
management intro, but
I didn't so oh, well.

00:03:12.300 --> 00:03:15.510
So to me, the way I try and
approach the package management

00:03:15.510 --> 00:03:17.930
space is to think
about really what

00:03:17.930 --> 00:03:21.850
we've done as a community with
the web over the last ten years

00:03:21.850 --> 00:03:22.350
or so.

00:03:22.350 --> 00:03:23.360
Because I don't
know about you guys,

00:03:23.360 --> 00:03:25.720
but I used to be very
proud, back in fifth grade,

00:03:25.720 --> 00:03:27.780
to call myself a webmaster.

00:03:27.780 --> 00:03:28.340
All right?

00:03:28.340 --> 00:03:29.830
And so times have
changed a little bit,

00:03:29.830 --> 00:03:32.246
and now we try and think of
ourselves as a little bit more

00:03:32.246 --> 00:03:33.270
like software engineers.

00:03:33.270 --> 00:03:36.104
And I know, personally, getting
out of school and reading all

00:03:36.104 --> 00:03:38.520
these books, you know, "Patterns
of Enterprise Application

00:03:38.520 --> 00:03:41.130
Architecture" and "Domain-Driven
Design" and "Refectoring"

00:03:41.130 --> 00:03:42.247
and so on.

00:03:42.247 --> 00:03:44.080
The things that keep
coming up over and over

00:03:44.080 --> 00:03:47.210
again are topics like modular
architecture and separation

00:03:47.210 --> 00:03:49.700
of concerns and proper
ways of code reuse

00:03:49.700 --> 00:03:51.440
and structuring your code.

00:03:51.440 --> 00:03:54.310
And so kind of the first
level of these patterns

00:03:54.310 --> 00:03:56.760
and this modularity
idea is modules.

00:03:56.760 --> 00:03:59.001
And in JavaScript,
I'd say we got this.

00:03:59.001 --> 00:03:59.500
Right?

00:03:59.500 --> 00:04:01.208
Like, we've figured
out how to do modules

00:04:01.208 --> 00:04:03.390
and maybe you're
trying to decide

00:04:03.390 --> 00:04:05.840
whether you want to wrap your
modules in a defined wrapper

00:04:05.840 --> 00:04:08.790
or you don't or if you want to
use syntax or just functions,

00:04:08.790 --> 00:04:10.930
but that's not, like,
the most important thing.

00:04:10.930 --> 00:04:11.930
The most important
thing is that we all

00:04:11.930 --> 00:04:13.346
understand we
should be separating

00:04:13.346 --> 00:04:16.820
our code into modules, and
nobody is dropping script tags

00:04:16.820 --> 00:04:20.440
into their body anymore--
or worse, into their head.

00:04:20.440 --> 00:04:23.410
So the thing to
understand about modules--

00:04:23.410 --> 00:04:26.690
we've got this, right-- is they
let you reuse your own code

00:04:26.690 --> 00:04:28.660
and maybe work within
your own project

00:04:28.660 --> 00:04:30.840
and reuse other people's
code on your team.

00:04:30.840 --> 00:04:32.340
But we need to go
to the next level.

00:04:32.340 --> 00:04:34.640
And that's where
packages comes in, right?

00:04:34.640 --> 00:04:38.530
So packages let you reuse
code written by somebody else

00:04:38.530 --> 00:04:43.080
and packaged up and distributed
for you as a third party.

00:04:43.080 --> 00:04:44.890
And so there's
several key concepts

00:04:44.890 --> 00:04:46.750
when you're talking
up package management

00:04:46.750 --> 00:04:48.240
that you want to keep in mind.

00:04:48.240 --> 00:04:51.270
So the package is
a set of files,

00:04:51.270 --> 00:04:53.530
and usually with some
metadata about the package.

00:04:53.530 --> 00:04:56.960
Things like the name, the
version, the description,

00:04:56.960 --> 00:04:59.524
and the dependencies,
which is important.

00:04:59.524 --> 00:05:00.940
Then there's the
registry concept,

00:05:00.940 --> 00:05:03.720
which is where you put those
packages on the internet

00:05:03.720 --> 00:05:05.780
so that you can go
and install them from.

00:05:05.780 --> 00:05:06.840
And then finally,
you have the idea

00:05:06.840 --> 00:05:08.540
of a package manager,
which is something

00:05:08.540 --> 00:05:11.550
that allows you to install
packages from the registry

00:05:11.550 --> 00:05:15.060
onto your local machine for
your apps and your development.

00:05:15.060 --> 00:05:17.140
And crucially, also, a
package manager's role

00:05:17.140 --> 00:05:20.330
is to install the
dependencies of a package

00:05:20.330 --> 00:05:21.580
that you want on your machine.

00:05:21.580 --> 00:05:23.430
And this is great
because it encapsulates

00:05:23.430 --> 00:05:25.520
the details of how
a packages is built.

00:05:25.520 --> 00:05:29.600
So if Ember, as a package,
depends on the route recognizer

00:05:29.600 --> 00:05:32.070
package, when you
say, install Ember,

00:05:32.070 --> 00:05:35.890
or whatever your favorite
package manager is,

00:05:35.890 --> 00:05:38.030
you don't care about how
it implements routing.

00:05:38.030 --> 00:05:41.390
But it says, oh, I need route
recognizer to get my job done.

00:05:41.390 --> 00:05:45.900
So that gets taken care of for
you by a good package manager.

00:05:45.900 --> 00:05:48.220
So in terms of package
managers and packages

00:05:48.220 --> 00:05:51.590
and the whole ecosystem,
this is not a new idea.

00:05:51.590 --> 00:05:52.290
Right?

00:05:52.290 --> 00:05:55.340
We have this stuff in all
these other ecosystems,

00:05:55.340 --> 00:05:57.900
and we have it in
node for JavaScript.

00:05:57.900 --> 00:05:59.420
It's really crucial
for code reuse

00:05:59.420 --> 00:06:03.680
and so every mature language
and ecosystem has them.

00:06:03.680 --> 00:06:07.464
However, on the web, we're not
so sure what our answer is.

00:06:07.464 --> 00:06:09.630
And that's one of the reasons
that we're here today.

00:06:09.630 --> 00:06:11.921
I mean, we've figured it out
for server side JavaScript

00:06:11.921 --> 00:06:13.990
with npm, and some
people, myself included,

00:06:13.990 --> 00:06:16.280
think that we should be using
that for all JavaScript.

00:06:16.280 --> 00:06:18.190
But other people
don't, and that's

00:06:18.190 --> 00:06:21.040
kind of one of the things
we want to talk about.

00:06:21.040 --> 00:06:24.180
So I think kind of going
into the whole discussion,

00:06:24.180 --> 00:06:26.675
there are still areas
specifically about the web

00:06:26.675 --> 00:06:29.930
and package managers
that, to me, are complex

00:06:29.930 --> 00:06:32.420
and we need to think
about together.

00:06:32.420 --> 00:06:34.910
And so what makes the web
in particular a hard problem

00:06:34.910 --> 00:06:36.820
to solve for package managers?

00:06:36.820 --> 00:06:39.020
Well, first, there's,
like, how related

00:06:39.020 --> 00:06:40.280
are packages to modules?

00:06:40.280 --> 00:06:40.800
Right?

00:06:40.800 --> 00:06:43.710
Some early package managers,
things like volo or Jam

00:06:43.710 --> 00:06:44.910
bet on amd.

00:06:44.910 --> 00:06:46.770
Others these days,
like Component and Duo,

00:06:46.770 --> 00:06:48.440
bet on common js.

00:06:48.440 --> 00:06:51.302
Bower has a mix. npm has a
strong common js community,

00:06:51.302 --> 00:06:53.010
but it doesn't actually
mandate common js

00:06:53.010 --> 00:06:55.265
in any way intrinsically.

00:06:55.265 --> 00:06:56.640
And, of course,
some people think

00:06:56.640 --> 00:06:58.614
ES6 modules will save
us all and that's

00:06:58.614 --> 00:07:00.780
what's going to make package
management work finally

00:07:00.780 --> 00:07:01.749
for the web.

00:07:01.749 --> 00:07:03.290
And so depending on
your perspective,

00:07:03.290 --> 00:07:05.990
I think modules and packages
can either be totally unrelated

00:07:05.990 --> 00:07:08.240
and it's just one of the
things you put into a package

00:07:08.240 --> 00:07:11.067
or they can be
entirely intertwined.

00:07:11.067 --> 00:07:12.650
Another issue that
comes up on the web

00:07:12.650 --> 00:07:14.050
is different asset types, right?

00:07:14.050 --> 00:07:15.590
So we all pretty
much understand how

00:07:15.590 --> 00:07:17.160
to put source code
into a package.

00:07:17.160 --> 00:07:19.670
We've done this both in
node and in other ecosystems

00:07:19.670 --> 00:07:21.360
and other languages.

00:07:21.360 --> 00:07:23.720
And that's great because
that's pretty easy.

00:07:23.720 --> 00:07:26.340
There's no complexity
in just one language.

00:07:26.340 --> 00:07:29.130
But when you have the web, you
have at least three languages.

00:07:29.130 --> 00:07:30.850
So you have HTML,
CSS, and JavaScript.

00:07:30.850 --> 00:07:33.500
And you've got fonts
and images and all that.

00:07:33.500 --> 00:07:36.360
And so this gets complicated
because things like CSS

00:07:36.360 --> 00:07:39.460
have a global effect, unless
you're using web components.

00:07:39.460 --> 00:07:41.539
Or like fonts definitely
have a global effect,

00:07:41.539 --> 00:07:43.330
and there's not really
a way to encapsulate

00:07:43.330 --> 00:07:45.850
that unless you
rename them, right?

00:07:45.850 --> 00:07:48.890
So does this change how we think
about package management is

00:07:48.890 --> 00:07:50.300
my question.

00:07:50.300 --> 00:07:53.147
Kind of this plays into the
question of reduplication

00:07:53.147 --> 00:07:55.230
and how this plays into
semantic versioning, which

00:07:55.230 --> 00:07:58.030
is a big, big issue that divides
kind of some of the package

00:07:58.030 --> 00:07:58.870
managers today.

00:07:58.870 --> 00:08:00.620
So, like, what if one
of your dependencies

00:08:00.620 --> 00:08:03.450
wants to use package
foo at version 1.0,

00:08:03.450 --> 00:08:05.670
and another wants to use
package foo at version 2.0.

00:08:05.670 --> 00:08:08.044
Now, remember I said that part
of the idea of the package

00:08:08.044 --> 00:08:10.540
manager is to encapsulation
you from worrying about what

00:08:10.540 --> 00:08:12.140
your dependencies are using.

00:08:12.140 --> 00:08:15.380
But should we allow duplicates
to exist in your source tree?

00:08:15.380 --> 00:08:17.559
And maybe you say, no,
because you should never

00:08:17.559 --> 00:08:18.850
have duplicate code on the web.

00:08:18.850 --> 00:08:21.770
But does your answer change
if it's a 30 byte number

00:08:21.770 --> 00:08:22.920
formatting thing?

00:08:22.920 --> 00:08:23.970
Like, does that work?

00:08:23.970 --> 00:08:26.795
Or what about if it's
jQuery 1.0 versus 2.0?

00:08:26.795 --> 00:08:28.420
Well, that's kind of
a different story.

00:08:28.420 --> 00:08:30.860
Or what about if it's something
like underscore or backbone

00:08:30.860 --> 00:08:32.669
that doesn't even use semantic
versioning at all so you have

00:08:32.669 --> 00:08:35.530
no signal for whether you
should be including these two

00:08:35.530 --> 00:08:37.030
different things?

00:08:37.030 --> 00:08:40.394
I mean, this is a pretty hard
question answer, I think.

00:08:40.394 --> 00:08:41.950
And it's kind of
at the core of some

00:08:41.950 --> 00:08:44.840
of the disagreements between
web package managers.

00:08:44.840 --> 00:08:47.370
Finally, there's the issue
of web components, right?

00:08:47.370 --> 00:08:49.240
Which in some ways
make things better.

00:08:49.240 --> 00:08:52.720
They give you an
encapsulated, packaged up,

00:08:52.720 --> 00:08:53.701
reusable component.

00:08:53.701 --> 00:08:55.200
And in some ways
they make it worse,

00:08:55.200 --> 00:08:58.410
because they share this global
flat name space of tag names.

00:08:58.410 --> 00:09:00.756
Unlike the kind of idea in
JavaScript where you can say,

00:09:00.756 --> 00:09:02.630
I'm going to include
another JavaScript file.

00:09:02.630 --> 00:09:04.838
And it's not going to
interfere if it's well-written,

00:09:04.838 --> 00:09:05.630
it's a module.

00:09:05.630 --> 00:09:08.910
With web components, I reserve
this tag name for myself.

00:09:08.910 --> 00:09:11.440
And then to complicated it
all, as part of web components,

00:09:11.440 --> 00:09:14.100
you have this HTML
import technology.

00:09:14.100 --> 00:09:16.710
Remember how I said that nobody
these days is putting script

00:09:16.710 --> 00:09:18.617
tags in their head
or their body?

00:09:18.617 --> 00:09:20.950
Well, instead what they're
doing is they're putting link

00:09:20.950 --> 00:09:23.190
rel="import" tags in their head.

00:09:23.190 --> 00:09:25.930
So we're back in the '90s
with HTML imports, which

00:09:25.930 --> 00:09:28.915
is interesting.

00:09:28.915 --> 00:09:31.290
So that's what I got on kind
of the big issues of package

00:09:31.290 --> 00:09:32.220
management on the web.

00:09:32.220 --> 00:09:33.670
And ready to go.

00:09:33.670 --> 00:09:34.586
KYLE SIMPSON: Awesome.

00:09:34.586 --> 00:09:35.669
Well, thank you very much.

00:09:35.669 --> 00:09:36.960
Let's thank Dominic for that.

00:09:36.960 --> 00:09:40.497
[APPLAUSE]

00:09:40.497 --> 00:09:42.330
KYLE SIMPSON: I think
that's a fantastic way

00:09:42.330 --> 00:09:43.310
to set up where
we're going to go.

00:09:43.310 --> 00:09:44.893
There are so many
different directions

00:09:44.893 --> 00:09:47.300
that we could talk about, and
we had to narrow them down.

00:09:47.300 --> 00:09:49.633
But I just want to remind
everyone if you had forgotten,

00:09:49.633 --> 00:09:51.960
there is a breakout session
later this afternoon.

00:09:51.960 --> 00:09:54.585
And so if we have to cut things
off or if we skip over a detail

00:09:54.585 --> 00:09:56.043
that you think is
really important,

00:09:56.043 --> 00:09:58.580
please do come and find us
in those breakout sessions.

00:09:58.580 --> 00:10:00.050
We'd love to chat more.

00:10:00.050 --> 00:10:02.800
Just last night at dinner,
just one of these few questions

00:10:02.800 --> 00:10:04.580
that we're going to go over,
we spent an hour or more

00:10:04.580 --> 00:10:05.350
talking about it.

00:10:05.350 --> 00:10:07.610
So there's lots to talk
about, lots to dig into.

00:10:07.610 --> 00:10:09.990
Without any further ado, we'll
go to our first question.

00:10:09.990 --> 00:10:12.970
And our first question says,
"which of the characteristics

00:10:12.970 --> 00:10:17.264
are important for package
managers to focus on?"

00:10:17.264 --> 00:10:18.930
so let me give you
some examples, panel,

00:10:18.930 --> 00:10:19.780
to set this up.

00:10:19.780 --> 00:10:23.140
Some examples like package
creation, maintenance overhead,

00:10:23.140 --> 00:10:26.160
curation, how do we
know that the code there

00:10:26.160 --> 00:10:27.980
does what it says
it's supposed to do

00:10:27.980 --> 00:10:29.563
and that it's going
to be good quality

00:10:29.563 --> 00:10:32.930
and not harm the systems,
discoverability, and even

00:10:32.930 --> 00:10:34.570
responsiveness of the teams.

00:10:34.570 --> 00:10:37.380
These are issues that we deal
with in the package manager

00:10:37.380 --> 00:10:38.050
ecosystem.

00:10:38.050 --> 00:10:40.200
So let's talk about
which ones are important.

00:10:40.200 --> 00:10:42.990
And importantly, actually, I'll
throw out this first to Josh

00:10:42.990 --> 00:10:45.250
since you do have some
experience on Bower.

00:10:45.250 --> 00:10:46.680
How well are the
package managers

00:10:46.680 --> 00:10:48.315
doing on these
different metrics?

00:10:48.315 --> 00:10:50.690
JOSH PEEK: Well, I do say, I
think the one difference-- I

00:10:50.690 --> 00:10:53.410
do like the difference that
Dominic has broken down

00:10:53.410 --> 00:10:56.580
in terms of the concerns that
these things are doing with,

00:10:56.580 --> 00:10:59.900
like, publishing the registry
and the actual, like, install

00:10:59.900 --> 00:11:00.510
tool.

00:11:00.510 --> 00:11:04.010
So I think Bower is interesting
in that it doesn't actually

00:11:04.010 --> 00:11:05.267
have any publishing mechanism.

00:11:05.267 --> 00:11:06.600
It just-- you put it on the web.

00:11:06.600 --> 00:11:08.930
It's just on the
web via a git URL.

00:11:08.930 --> 00:11:12.050
So that's just handled however
using existing git tools.

00:11:12.050 --> 00:11:13.650
And the registry is
super lightweight

00:11:13.650 --> 00:11:16.700
so it's more along the
lines of the build tool,

00:11:16.700 --> 00:11:20.400
and so you kind of-- it's kind
of dependent on the existing

00:11:20.400 --> 00:11:23.880
ecosystem, like GitHub, in terms
of how we discover these things

00:11:23.880 --> 00:11:25.050
and maintain them.

00:11:25.050 --> 00:11:29.930
And I think primarily Bower
is the tool end of it.

00:11:29.930 --> 00:11:32.880
Like, how do you, like,
download all these dependencies,

00:11:32.880 --> 00:11:35.367
resolve dependencies,
and deal with that.

00:11:35.367 --> 00:11:37.450
KYLE SIMPSON: It's interesting
that you would say,

00:11:37.450 --> 00:11:40.220
because I think many people
would probably put Bower firmly

00:11:40.220 --> 00:11:42.330
in the same category
as something like npm.

00:11:42.330 --> 00:11:45.064
I certainly would as a user,
because there's a command line

00:11:45.064 --> 00:11:46.480
tool that I have
to do, and I have

00:11:46.480 --> 00:11:48.720
to manage a bower.json file.

00:11:48.720 --> 00:11:51.860
So can you tell me-- maybe you
guys can kind of fight over

00:11:51.860 --> 00:11:53.625
this-- but why are
you different then?

00:11:53.625 --> 00:11:55.625
If Bower really isn't
quite in the same category

00:11:55.625 --> 00:11:57.721
as npm what is that--
because as a developer,

00:11:57.721 --> 00:11:59.470
it sure feels like
they're a lot the same?

00:12:01.640 --> 00:12:02.640
JOSH PEEK: I don't know.

00:12:02.640 --> 00:12:08.150
I think the flow-- I mean, I
think the Bower flow definitely

00:12:08.150 --> 00:12:12.660
feels easier to publish
as opposed to npm.

00:12:12.660 --> 00:12:17.244
But there's definitely benefits
to having a separate package

00:12:17.244 --> 00:12:18.410
that you can, like, publish.

00:12:18.410 --> 00:12:20.534
Like, Bower doesn't actually
have a good story for,

00:12:20.534 --> 00:12:23.802
like, how it's doing mirrors and
replication like npm does this.

00:12:23.802 --> 00:12:25.260
KYLE SIMPSON: So
what about Laurie?

00:12:25.260 --> 00:12:26.820
npm is bad for publishing?

00:12:26.820 --> 00:12:29.670
[LAUGHTER]

00:12:29.670 --> 00:12:32.320
LAURIE VOSS: npm is
just a lot more--

00:12:32.320 --> 00:12:33.552
it does a lot more stuff.

00:12:33.552 --> 00:12:35.510
I was going to say it's
a lot more heavyweight,

00:12:35.510 --> 00:12:37.800
but I don't think that's
the word I want to use.

00:12:40.900 --> 00:12:43.090
npm has decided a bunch
of things are important.

00:12:43.090 --> 00:12:46.090
It's decided that you
want to be able to publish

00:12:46.090 --> 00:12:49.340
a single artifact and say
that that artifact is there

00:12:49.340 --> 00:12:51.230
an constant forever.

00:12:51.230 --> 00:12:53.740
And you want to be able
to-- you know, the mirroring

00:12:53.740 --> 00:12:55.960
and replication you sort
of get for free by accident

00:12:55.960 --> 00:12:57.709
of the database that
we use, but it's more

00:12:57.709 --> 00:12:59.870
about we want all this
metadata attached.

00:12:59.870 --> 00:13:02.990
We want a delivery
mechanism established

00:13:02.990 --> 00:13:05.937
that is not the same as our
source control mechanism.

00:13:05.937 --> 00:13:08.020
DOMINIC DENICOLA: I think
that's really important.

00:13:08.020 --> 00:13:11.270
I think committing your build
artifacts to your source

00:13:11.270 --> 00:13:15.350
control just so that they can
be consumed by a package manager

00:13:15.350 --> 00:13:16.930
is really unfortunate.

00:13:16.930 --> 00:13:19.610
And it's something that's
prevented me from having Bower

00:13:19.610 --> 00:13:21.350
in projects where
people asked me to.

00:13:21.350 --> 00:13:23.290
It's like, no, I'm not going
to commit my compiled--

00:13:23.290 --> 00:13:24.620
JOSH PEEK: What's the
disadvantage of that though?

00:13:24.620 --> 00:13:27.680
Like, what's the disadvantage
to having them in source code?

00:13:27.680 --> 00:13:30.930
Like, actually merging
them, what are you losing?

00:13:30.930 --> 00:13:33.091
DOMINIC DENICOLA: Oh, the
ability to keep my source

00:13:33.091 --> 00:13:34.090
separate from my output.

00:13:34.090 --> 00:13:34.650
JOSH PEEK: So you can--

00:13:34.650 --> 00:13:36.411
DOMINIC DENICOLA: It's like
committing .exe's to your repo.

00:13:36.411 --> 00:13:36.520
You would never do that.

00:13:36.520 --> 00:13:37.650
JOSH PEEK: You can
have different repos,

00:13:37.650 --> 00:13:38.590
different branches.

00:13:38.590 --> 00:13:40.120
Like, what are the
other downsides?

00:13:40.120 --> 00:13:41.120
DOMINIC DENICOLA: Right.

00:13:41.120 --> 00:13:44.490
You could set up-- you could
use git as a package repository,

00:13:44.490 --> 00:13:46.419
but why would you?

00:13:46.419 --> 00:13:48.210
DAVID BECK: And the
big-- I mean, let's not

00:13:48.210 --> 00:13:49.620
lose sight of the big picture.

00:13:49.620 --> 00:13:52.480
npm is the node package manager.

00:13:52.480 --> 00:13:54.145
So if you want to
use node packages--

00:13:54.145 --> 00:13:55.020
DOMINIC DENICOLA: No.

00:13:55.020 --> 00:13:56.283
[LAUGHTER]

00:13:56.283 --> 00:13:57.550
DAVID BECK: Or-- I'm sorry.

00:13:57.550 --> 00:13:58.346
KYLE SIMPSON: It's
not the acronym.

00:13:58.346 --> 00:13:59.100
We got that out of the way.

00:13:59.100 --> 00:14:00.475
DAVID BECK: It's
the only package

00:14:00.475 --> 00:14:03.310
manager you can use with node,
or the people use with node.

00:14:03.310 --> 00:14:07.190
So if you want to use-- so
it has that feature of it.

00:14:07.190 --> 00:14:09.760
And Bower is very much more of
a client side package manager.

00:14:09.760 --> 00:14:12.880
It has inclined
itself or people are

00:14:12.880 --> 00:14:15.480
inclined to use it for
client side packages.

00:14:15.480 --> 00:14:20.857
And just to be-- I want
to sketch this out,

00:14:20.857 --> 00:14:22.440
you guys can agree
or disagree, but it

00:14:22.440 --> 00:14:25.500
seems like there are few
different layers of packages

00:14:25.500 --> 00:14:29.630
and the landscape is as
such there's service side

00:14:29.630 --> 00:14:33.740
packages, which are
handled by npm exclusively.

00:14:33.740 --> 00:14:36.220
There are client side
JavaScript packages,

00:14:36.220 --> 00:14:39.120
only JavaScript packages,
which are handled by npm

00:14:39.120 --> 00:14:41.060
and also by Bower.

00:14:41.060 --> 00:14:45.690
There are packages that have
CSS and other assets in them,

00:14:45.690 --> 00:14:47.400
and they're client
side packages.

00:14:47.400 --> 00:14:51.290
And those can be handled by
npm with Cartera, for example,

00:14:51.290 --> 00:14:52.790
but they're mostly
handled, I think,

00:14:52.790 --> 00:14:55.820
by Bower-- also by Component.

00:14:55.820 --> 00:14:58.760
And then you have web components
below that, which nobody really

00:14:58.760 --> 00:15:00.884
knows how they're going to
handle it at this point,

00:15:00.884 --> 00:15:03.230
but it's looking like
it's going to be Bower.

00:15:03.230 --> 00:15:05.540
And then there's
just CSS packages,

00:15:05.540 --> 00:15:08.750
which I think is another level.

00:15:08.750 --> 00:15:11.397
And that is mostly
handled just by Bower.

00:15:11.397 --> 00:15:12.980
KYLE SIMPSON: So I'm
sorry to jump in,

00:15:12.980 --> 00:15:14.850
but I want to refocus
this on the specifics.

00:15:14.850 --> 00:15:16.760
Because-- Matt, let
me throw it to you.

00:15:16.760 --> 00:15:18.320
Can you talk about
maybe one or two

00:15:18.320 --> 00:15:21.109
really important characteristics
of the package manager

00:15:21.109 --> 00:15:23.400
of your choice or ones that
you maybe have worked with.

00:15:23.400 --> 00:15:24.310
What are they doing?

00:15:24.310 --> 00:15:26.670
What are the most
important things

00:15:26.670 --> 00:15:28.004
that they should be focusing on?

00:15:28.004 --> 00:15:29.545
And maybe some areas
that they're not

00:15:29.545 --> 00:15:30.465
focusing enough yet.

00:15:30.465 --> 00:15:31.215
MATT MILLER: Yeah.

00:15:31.215 --> 00:15:34.930
So I created Duo basically
because I wanted a way

00:15:34.930 --> 00:15:39.770
to pull in any source, any
code from anywhere, basically.

00:15:39.770 --> 00:15:40.660
That was the idea.

00:15:40.660 --> 00:15:42.240
And have it build for you.

00:15:42.240 --> 00:15:45.366
And I think we're talking a
lot about the installer being

00:15:45.366 --> 00:15:46.740
different from
the builder, and I

00:15:46.740 --> 00:15:49.330
would argue that that's
not necessarily--

00:15:49.330 --> 00:15:52.080
it doesn't necessarily
have to be different.

00:15:52.080 --> 00:15:54.600
And so a lot of what
Duo does is basically

00:15:54.600 --> 00:15:56.390
you can install from
literally anywhere.

00:15:56.390 --> 00:15:57.390
That's the goal, anyway.

00:15:57.390 --> 00:15:59.522
Right it's from GitHub,
but eventually it'll

00:15:59.522 --> 00:16:00.230
be from anywhere.

00:16:00.230 --> 00:16:02.440
Like, you can basically
go to any site,

00:16:02.440 --> 00:16:04.800
you can take a look at
where they're including,

00:16:04.800 --> 00:16:06.239
and then require it immediately.

00:16:06.239 --> 00:16:07.530
And so that's kind of the goal.

00:16:07.530 --> 00:16:10.020
And I guess the other
thing that-- so,

00:16:10.020 --> 00:16:12.390
like, basically, ease
of use is probably

00:16:12.390 --> 00:16:13.980
one of my most important things.

00:16:13.980 --> 00:16:15.700
And the other thing
is reproducibility.

00:16:15.700 --> 00:16:20.020
So basically being able to
build something and then

00:16:20.020 --> 00:16:23.320
be expected to, like,
six months later,

00:16:23.320 --> 00:16:24.650
build that same thing again.

00:16:24.650 --> 00:16:26.530
And I can't say Duo
has an answer to it.

00:16:26.530 --> 00:16:28.880
I don't think any of the
other package managers really

00:16:28.880 --> 00:16:30.727
do it very well.

00:16:30.727 --> 00:16:31.560
But I think that's--

00:16:31.560 --> 00:16:33.006
LAURIE VOSS: npm
tries very hard.

00:16:33.006 --> 00:16:34.630
MATT MILLER: npm
tries very hard, yeah.

00:16:34.630 --> 00:16:35.210
KYLE SIMPSON:
We're going to take

00:16:35.210 --> 00:16:36.793
a couple of comments
in just a moment.

00:16:36.793 --> 00:16:39.210
I want to let you
elaborate a little bit more

00:16:39.210 --> 00:16:41.849
in npm's defense, but we'll take
comments from Sarah and Rachel

00:16:41.849 --> 00:16:44.140
so if we can queue them up,
let's make sure to do that.

00:16:44.140 --> 00:16:48.030
But tell us, what is npm
doing in your own defense?

00:16:48.030 --> 00:16:51.357
LAURIE VOSS: So npm--
this is something

00:16:51.357 --> 00:16:53.440
I've been discussing with
a bunch of people today.

00:16:53.440 --> 00:16:55.580
npm has multiple roles.

00:16:55.580 --> 00:16:57.130
Like, when you are
npm installing,

00:16:57.130 --> 00:17:00.821
are you npm installing because,
I want this software so that I

00:17:00.821 --> 00:17:02.570
can play with it and
build my application?

00:17:02.570 --> 00:17:05.640
In which case, it is a dev tool.

00:17:05.640 --> 00:17:08.450
Or am I npm selling because
I am deploying this to a box

00:17:08.450 --> 00:17:09.020
somewhere.

00:17:09.020 --> 00:17:12.300
In which case, why am I
installing my tests and my docs

00:17:12.300 --> 00:17:14.035
and all that stuff like that.

00:17:14.035 --> 00:17:15.910
There's a difference
between a build artifact

00:17:15.910 --> 00:17:18.490
and a package of software.

00:17:18.490 --> 00:17:20.280
And at the moment,
npm is definitely

00:17:20.280 --> 00:17:24.910
optimized for the latter
of those two use cases.

00:17:24.910 --> 00:17:28.490
But people keep trying to
use it for the other thing.

00:17:28.490 --> 00:17:32.310
So we are starting to
support that better.

00:17:32.310 --> 00:17:37.770
The shrink wrap feature of
npm is, sadly, neglected

00:17:37.770 --> 00:17:42.150
and was, until quite
recently, unusable

00:17:42.150 --> 00:17:45.080
because it was possible
to publish version 1.1.1

00:17:45.080 --> 00:17:46.789
and then publish
[? dash F ?] 1.1.1 again

00:17:46.789 --> 00:17:49.038
and have it be a completely
different bit of software,

00:17:49.038 --> 00:17:50.612
which just breaks
that whole idea.

00:17:50.612 --> 00:17:51.320
KYLE SIMPSON: OK.

00:17:51.320 --> 00:17:51.740
Let's take--

00:17:51.740 --> 00:17:52.640
LAURIE VOSS: You
can't do that anymore.

00:17:52.640 --> 00:17:52.790
KYLE SIMPSON: A comment.

00:17:52.790 --> 00:17:53.430
Is this Sarah?

00:17:53.430 --> 00:17:54.890
SARAH: Hi, I'm Sarah.

00:17:54.890 --> 00:17:57.910
So going back a bit.

00:17:57.910 --> 00:18:00.160
You mentioned generated
code and checking that

00:18:00.160 --> 00:18:02.290
into version control.

00:18:02.290 --> 00:18:06.370
That's been a big problem for
me and my teams, personally

00:18:06.370 --> 00:18:11.140
so I generally strongly
advocate against doing it

00:18:11.140 --> 00:18:14.900
because it causes all
sorts of merge issues.

00:18:14.900 --> 00:18:18.240
I wanted to see what sort of
solutions you guys had in place

00:18:18.240 --> 00:18:23.970
for deploying generated code
and just managing that process.

00:18:23.970 --> 00:18:25.720
DOMINIC DENICOLA: Yeah,
I mean, briefly, I

00:18:25.720 --> 00:18:28.720
think the answer from npm's
perspective is very clear.

00:18:28.720 --> 00:18:30.760
Your package contains
the generated code,

00:18:30.760 --> 00:18:33.250
your source repository
contains the source code.

00:18:33.250 --> 00:18:35.830
And as part of the
pre-publish process,

00:18:35.830 --> 00:18:38.090
you generate and then you
put the generated code

00:18:38.090 --> 00:18:39.046
in the package.

00:18:39.046 --> 00:18:41.790
LAURIE VOSS: Or you build it as
part of your install process,

00:18:41.790 --> 00:18:42.915
as opposed to install hook.

00:18:42.915 --> 00:18:44.289
KYLE SIMPSON: So
Josh, I know you

00:18:44.289 --> 00:18:46.690
happen to have a slightly
different perspective on this.

00:18:46.690 --> 00:18:49.820
Tell us why GitHub
and those tools

00:18:49.820 --> 00:18:52.250
allow you to manage all of
that crazy merge nightmare

00:18:52.250 --> 00:18:53.610
that Sarah was talking about.

00:18:53.610 --> 00:18:53.965
JOSH PEEK: Well, yeah.

00:18:53.965 --> 00:18:56.760
I'm definitely of the approach
if you're deploying something

00:18:56.760 --> 00:19:00.980
to reduction, you want to limit
your third party dependencies.

00:19:00.980 --> 00:19:04.080
Like, you don't want to
depend on npm being up

00:19:04.080 --> 00:19:07.119
or some other server being up
during your deploy process.

00:19:07.119 --> 00:19:09.660
Like, having some other host go
down shouldn't take you down.

00:19:09.660 --> 00:19:13.550
So, like, I think it just
makes sense to check in as many

00:19:13.550 --> 00:19:15.410
of those artifacts as you can.

00:19:15.410 --> 00:19:19.130
If it's something-- the
burden of doing that, I think,

00:19:19.130 --> 00:19:23.640
is a lot less than having
a availability dependency.

00:19:23.640 --> 00:19:25.940
KYLE SIMPSON: Is
Rachel out there?

00:19:25.940 --> 00:19:26.440
Rachel?

00:19:26.440 --> 00:19:28.224
Did we get a
microphone to Rachel?

00:19:30.851 --> 00:19:31.350
Yes?

00:19:31.350 --> 00:19:32.661
No?

00:19:32.661 --> 00:19:33.160
OK.

00:19:36.091 --> 00:19:37.840
Do make sure you raise
your hands whenever

00:19:37.840 --> 00:19:39.131
you're going to ask a question.

00:19:39.131 --> 00:19:41.360
RACHEL: I was going to
specifically call out

00:19:41.360 --> 00:19:45.360
when we're talking about build
artifacts versus source code

00:19:45.360 --> 00:19:50.795
the multiple vectors of images,
CSS, HTML, and JavaScript.

00:19:50.795 --> 00:19:53.680
In package management
versus build system,

00:19:53.680 --> 00:19:56.020
separation works
a lot better when

00:19:56.020 --> 00:20:02.640
you've got a close link between
module source code and package,

00:20:02.640 --> 00:20:05.260
where you're only
importing one thing.

00:20:05.260 --> 00:20:08.300
It's just not really
working well when

00:20:08.300 --> 00:20:10.299
you have all these other assets.

00:20:10.299 --> 00:20:11.090
KYLE SIMPSON: Yeah.

00:20:11.090 --> 00:20:11.910
So definitely.

00:20:11.910 --> 00:20:13.035
Thank you for your comment.

00:20:13.035 --> 00:20:14.537
We definitely are
planning to tackle

00:20:14.537 --> 00:20:16.870
this idea of other resource
types other than JavaScript.

00:20:16.870 --> 00:20:18.506
So we'll come back
to that and revisit

00:20:18.506 --> 00:20:19.630
that topic in a little bit.

00:20:19.630 --> 00:20:21.611
I want to switch now
to our second question.

00:20:21.611 --> 00:20:23.860
Our second question is going
to go a little bit deeper

00:20:23.860 --> 00:20:26.926
so we're going to uncover sort
of this holy war, this debate

00:20:26.926 --> 00:20:29.050
that's actually happening,
whether we articulate it

00:20:29.050 --> 00:20:29.940
as that or not.

00:20:29.940 --> 00:20:32.210
And that question is what
are the relative benefits

00:20:32.210 --> 00:20:34.290
of specialized package managers?

00:20:34.290 --> 00:20:36.910
In other words, should we be
having a new package manager

00:20:36.910 --> 00:20:40.182
with every framework that comes
out versus one package manager

00:20:40.182 --> 00:20:40.890
to rule them all?

00:20:40.890 --> 00:20:43.790
AUDIENCE: [INAUDIBLE].

00:20:43.790 --> 00:20:46.540
KYLE SIMPSON: Thank you,
Brian LaRue, for that comment.

00:20:46.540 --> 00:20:48.990
DOMINIC DENICOLA: So to me
the biggest most important

00:20:48.990 --> 00:20:51.364
benefit you can get from a
package manager is the network

00:20:51.364 --> 00:20:53.741
effects of reusing a
large package ecosystem.

00:20:53.741 --> 00:20:55.990
So I mean, earlier they
brought up the different types

00:20:55.990 --> 00:20:58.670
of packages being put in
different package managers,

00:20:58.670 --> 00:21:01.434
to me, I'm most
interested in the overlap.

00:21:01.434 --> 00:21:03.100
What is the JavaScript
code I'm writing?

00:21:03.100 --> 00:21:04.240
That it doesn't
matter whether it

00:21:04.240 --> 00:21:05.820
runs on the server
or the client,

00:21:05.820 --> 00:21:07.600
and I can just reuse
it in either case.

00:21:07.600 --> 00:21:09.360
And if you're saying, oh,
I have to make a choice

00:21:09.360 --> 00:21:10.943
whether this goes
in my client package

00:21:10.943 --> 00:21:13.530
manager or my server package
manager, that really impacts

00:21:13.530 --> 00:21:16.650
and limits my ability to do
code reuse in the general case.

00:21:16.650 --> 00:21:18.730
And in general it's
very frustrating

00:21:18.730 --> 00:21:20.250
to say that I must
make that choice.

00:21:20.250 --> 00:21:22.710
I'd rather have a
JavaScript package manager.

00:21:22.710 --> 00:21:26.887
LAURIE VOSS: So npm gets-- one
of npm's most common feature

00:21:26.887 --> 00:21:28.470
request from everybody
else is can you

00:21:28.470 --> 00:21:30.480
please build
whatever feature x is

00:21:30.480 --> 00:21:34.200
that is forcing me to use
this as their package manager?

00:21:34.200 --> 00:21:36.470
Can you please just
make npm do everything?

00:21:36.470 --> 00:21:38.697
Like, we were
joking the other day

00:21:38.697 --> 00:21:41.280
that npm has now become the way
that you install other package

00:21:41.280 --> 00:21:43.217
managers.

00:21:43.217 --> 00:21:44.550
DOMINIC DENICOLA: Which is true.

00:21:44.550 --> 00:21:45.530
LAURIE VOSS: Right.

00:21:45.530 --> 00:21:47.680
You at npm just install all
of the other package managers,

00:21:47.680 --> 00:21:48.300
and we're like, fine.

00:21:48.300 --> 00:21:49.216
That's what we do now.

00:21:53.300 --> 00:21:55.420
I think what npm
is moving towards,

00:21:55.420 --> 00:21:59.400
like as we discussed
last night, is

00:21:59.400 --> 00:22:01.529
instead of saying--
picking one way and saying,

00:22:01.529 --> 00:22:03.320
this is how you do it,
npm is going to say,

00:22:03.320 --> 00:22:05.230
here's a bunch of
things that we can do.

00:22:05.230 --> 00:22:07.370
By default, this
is how it works.

00:22:07.370 --> 00:22:09.670
If you want to change one
aspect of this process,

00:22:09.670 --> 00:22:12.337
don't rebuild the package
manager, we will modularize.

00:22:12.337 --> 00:22:13.920
And you can use steps
one through five

00:22:13.920 --> 00:22:15.700
and change how step six works.

00:22:15.700 --> 00:22:17.600
And npm will enable
that behavior.

00:22:17.600 --> 00:22:18.850
That's how we would prefer it.

00:22:18.850 --> 00:22:21.740
Like, no one is going
to radically change

00:22:21.740 --> 00:22:23.410
storing bits on a server.

00:22:23.410 --> 00:22:25.640
Like, that's going to be
the same no matter what.

00:22:25.640 --> 00:22:27.840
What changes most often is
how you install the bits

00:22:27.840 --> 00:22:29.562
once they land on your server.

00:22:29.562 --> 00:22:31.020
KYLE SIMPSON: So
that's a great way

00:22:31.020 --> 00:22:34.041
to articulate the
eventual-- you know,

00:22:34.041 --> 00:22:35.540
there's package
managers everywhere,

00:22:35.540 --> 00:22:37.456
but there's one set of
code that's running it.

00:22:37.456 --> 00:22:40.430
Which is fine, but
I feel like I want

00:22:40.430 --> 00:22:43.220
to represent sort of the more
common man approach to this.

00:22:43.220 --> 00:22:45.100
The rent-is-too-damn-high
approach,

00:22:45.100 --> 00:22:48.460
because it's too damn difficult
to manage all of my packages

00:22:48.460 --> 00:22:51.020
and all of my meta data across
all of those different things.

00:22:51.020 --> 00:22:52.240
So what about that?

00:22:52.240 --> 00:22:54.920
What about this idea that maybe
one day there is just one,

00:22:54.920 --> 00:22:57.302
and there's a dash dash
Bower flag instead of npm?

00:22:57.302 --> 00:22:58.010
DAVID BECK: What?

00:22:58.010 --> 00:22:58.770
Just one what?

00:22:58.770 --> 00:23:00.090
For which of those areas?

00:23:00.090 --> 00:23:03.170
Like, because there are
different overlapping

00:23:03.170 --> 00:23:03.750
areas here.

00:23:03.750 --> 00:23:06.950
So one package manager
for which of those?

00:23:06.950 --> 00:23:10.230
Clearly the CSS, if you're
just managing CSS packages,

00:23:10.230 --> 00:23:11.920
that's not really JavaScript.

00:23:11.920 --> 00:23:16.600
And it seems that these sort
of package manager monopolies--

00:23:16.600 --> 00:23:19.760
natural monopolies-- happen
on a given language, which

00:23:19.760 --> 00:23:20.800
we don't have right now.

00:23:20.800 --> 00:23:26.000
But CSS is not JavaScript,
and web components, I think,

00:23:26.000 --> 00:23:28.690
arguably are not really
JavaScript, either.

00:23:28.690 --> 00:23:30.306
It's more like
their HTML and then

00:23:30.306 --> 00:23:32.460
they have JavaScript
inside of them.

00:23:32.460 --> 00:23:33.560
So just to be clear.

00:23:33.560 --> 00:23:36.590
I mean, for me the
ideal situation

00:23:36.590 --> 00:23:40.050
would be to have npm working
the server side, the client

00:23:40.050 --> 00:23:44.040
side, JavaScript, and the
component-ish JavaScript

00:23:44.040 --> 00:23:46.110
where you have JavaScript
components that

00:23:46.110 --> 00:23:48.685
also have CSS and HTML assets.

00:23:48.685 --> 00:23:51.060
KYLE SIMPSON: So your vote is
more for the single package

00:23:51.060 --> 00:23:52.521
manager eventually?

00:23:52.521 --> 00:23:55.020
DAVID BECK: Does anybody vote
for multiple package managers?

00:23:55.020 --> 00:23:55.520
I mean--

00:23:55.520 --> 00:23:56.610
KYLE SIMPSON: I think
a lot of people do.

00:23:56.610 --> 00:23:57.175
So that's what we're trying to--

00:23:57.175 --> 00:23:58.600
MATT MILLER: So one thing
I would like to point out

00:23:58.600 --> 00:24:00.690
is the concerns are a bit
different in the client

00:24:00.690 --> 00:24:03.710
and the server, and one of
those concerns is file size.

00:24:03.710 --> 00:24:06.650
And so one example of this that
comes to the top of my head

00:24:06.650 --> 00:24:09.730
is trying to make
Cheerio or something

00:24:09.730 --> 00:24:11.400
like that work in the browser.

00:24:11.400 --> 00:24:14.430
And you end up-- like, Cheerio's
great on the server side,

00:24:14.430 --> 00:24:17.440
but you end up with a bunch
of artifacts and stuff.

00:24:17.440 --> 00:24:20.210
Like, you end up with
like a 300 kilobyte file

00:24:20.210 --> 00:24:23.032
that you're basically
loading onto the browser.

00:24:23.032 --> 00:24:25.490
And so I would argue that it's
good for the server, but not

00:24:25.490 --> 00:24:27.070
necessarily a good
idea for the browser.

00:24:27.070 --> 00:24:29.040
And having a single
package for that is not-- I

00:24:29.040 --> 00:24:30.483
don't think that's ideal.

00:24:30.483 --> 00:24:32.816
DAVID BECK: Well, they can
do one for the server and one

00:24:32.816 --> 00:24:34.060
for the browser.

00:24:34.060 --> 00:24:34.700
MATT MILLER: Yeah,
it's possible.

00:24:34.700 --> 00:24:36.140
KYLE SIMPSON: So
let's bring Bower

00:24:36.140 --> 00:24:38.789
into this a little
bit more explicitly.

00:24:38.789 --> 00:24:41.330
If we go back a couple of years
to the history of where Bower

00:24:41.330 --> 00:24:43.290
sprung up, at least
my understanding of it

00:24:43.290 --> 00:24:45.820
is that Bower was springing
up because there was concerns

00:24:45.820 --> 00:24:48.871
that npm wasn't serving some of
the needs that they needed to.

00:24:48.871 --> 00:24:50.120
So speak to that specifically.

00:24:50.120 --> 00:24:52.720
What's missing from some of
these package managers that

00:24:52.720 --> 00:24:54.260
required the specialization?

00:24:54.260 --> 00:24:56.820
JOSH PEEK: I think one of
the things that started off

00:24:56.820 --> 00:25:00.650
was that the way to do
it on npm, if you wanted

00:25:00.650 --> 00:25:03.520
to do front-end packages,
was to essentially do

00:25:03.520 --> 00:25:05.850
what Browserify is doing today.

00:25:05.850 --> 00:25:09.710
And it didn't really encourage
any other sort of, like, paths.

00:25:09.710 --> 00:25:12.660
Like, people were doing web
component-ish things before.

00:25:12.660 --> 00:25:19.230
And that doesn't quite fit into
how common.js modules work.

00:25:19.230 --> 00:25:20.890
So I think the idea
was that we would

00:25:20.890 --> 00:25:25.530
have a more open system that
was, like, decoupled from build

00:25:25.530 --> 00:25:28.380
tools, and the package manager
would be, in some sense,

00:25:28.380 --> 00:25:29.220
dumber.

00:25:29.220 --> 00:25:31.570
And, like, you can
have build tools

00:25:31.570 --> 00:25:35.812
that can operate on AMD, CJS,
and then future ES6 modules.

00:25:35.812 --> 00:25:37.770
KYLE SIMPSON: So I'm
going to give you a chance

00:25:37.770 --> 00:25:40.540
to respond that he just called
your package manager dumb,

00:25:40.540 --> 00:25:42.970
but we'll take a comment from--

00:25:42.970 --> 00:25:45.190
JOSH PEEK: Yeah, I think
I called myself dumb.

00:25:45.190 --> 00:25:47.690
KYLE SIMPSON: We're going to
take some comments from Patrick

00:25:47.690 --> 00:25:48.880
and Taryn.

00:25:48.880 --> 00:25:50.470
So if we could get
their microphones.

00:25:50.470 --> 00:25:51.790
But what about that?

00:25:51.790 --> 00:25:53.540
Do you see that the
specialization is just

00:25:53.540 --> 00:25:55.570
layering of the package
manager that there's

00:25:55.570 --> 00:25:57.153
different parts of
the package manager

00:25:57.153 --> 00:25:58.750
that handle these
different concerns?

00:25:58.750 --> 00:26:03.020
LAURIE VOSS: I think I'm
close to what Dave said.

00:26:03.020 --> 00:26:05.740
I think there's a very
open question as to

00:26:05.740 --> 00:26:10.440
whether-- because npm is the
package manager for node,

00:26:10.440 --> 00:26:15.360
can npm be the package
manager for client side stuff?

00:26:15.360 --> 00:26:18.790
Because npm can be the package
manager for JavaScript,

00:26:18.790 --> 00:26:19.290
I think.

00:26:19.290 --> 00:26:22.140
I think that would
be easy, but that's

00:26:22.140 --> 00:26:23.430
not what people want to be.

00:26:23.430 --> 00:26:24.888
People want it to
be the way that I

00:26:24.888 --> 00:26:27.090
install a widget
into my application.

00:26:27.090 --> 00:26:30.630
And the concerns
of pure JavaScript

00:26:30.630 --> 00:26:33.030
versus how do we do client
side stuff are sufficiently

00:26:33.030 --> 00:26:36.130
different that it's
definitely not resolved,

00:26:36.130 --> 00:26:37.960
like, within npm's
offices whether or not

00:26:37.960 --> 00:26:39.960
that's a thing that we
can eventually nail.

00:26:39.960 --> 00:26:41.920
Or whether or not that
is a different thing.

00:26:41.920 --> 00:26:43.336
DAVID BECK: You
can nail it, but I

00:26:43.336 --> 00:26:45.600
think you lose some
of the elegance of npm

00:26:45.600 --> 00:26:47.422
where everything
just works mostly,

00:26:47.422 --> 00:26:48.880
except for maybe
peer dependencies.

00:26:48.880 --> 00:26:52.364
But inside the world-- I'm
not-- I don't mean that lightly.

00:26:52.364 --> 00:26:54.530
I mean there's some things
that are complicated even

00:26:54.530 --> 00:26:57.880
in the pure JavaScript
world but not many of them.

00:26:57.880 --> 00:27:00.575
But in the CSS world, it
does become more complicated.

00:27:00.575 --> 00:27:02.950
But that doesn't mean that
the value that you would bring

00:27:02.950 --> 00:27:05.870
by tackling that niche
of JavaScript modules

00:27:05.870 --> 00:27:08.980
inside the browser doesn't
outweigh the added complexity.

00:27:08.980 --> 00:27:10.729
KYLE SIMPSON: So
Patrick do you have--

00:27:10.729 --> 00:27:12.020
does Patrick have a microphone?

00:27:12.020 --> 00:27:12.920
There we go.

00:27:12.920 --> 00:27:15.172
PATRICK: Dominic mentioned
the, like, great network

00:27:15.172 --> 00:27:16.630
effective of npm
and how it's great

00:27:16.630 --> 00:27:18.421
that you can pretty
much find anything just

00:27:18.421 --> 00:27:19.580
by npm search, et cetera.

00:27:19.580 --> 00:27:21.720
The issue is that you have
no idea whether or not

00:27:21.720 --> 00:27:23.261
that'll actually
work in the browser.

00:27:23.261 --> 00:27:25.920
I don't know if I'm going
to have to Browserify this.

00:27:25.920 --> 00:27:27.630
Or even after that, if it work.

00:27:27.630 --> 00:27:30.320
Whereas with Bower, generally
it's either completely broken

00:27:30.320 --> 00:27:32.327
or it does work to some
level in the browser.

00:27:32.327 --> 00:27:34.410
LAURIE VOSS: We have such
a great answer for that.

00:27:37.139 --> 00:27:38.930
That's been a repeated
question, especially

00:27:38.930 --> 00:27:40.810
from the Browserify people
and various other people

00:27:40.810 --> 00:27:41.680
doing browser stuff.

00:27:41.680 --> 00:27:44.360
The new version of
the npm website,

00:27:44.360 --> 00:27:46.720
which is currently being
busily worked upon,

00:27:46.720 --> 00:27:48.670
has the concept of
ecosystems where

00:27:48.670 --> 00:27:52.104
we have said that people don't
use npm for one thing so trying

00:27:52.104 --> 00:27:54.770
to lock everything into a single
concept of search and a single,

00:27:54.770 --> 00:27:57.760
like, metric of what
is best is impossible.

00:27:57.760 --> 00:28:00.910
So ecosystems are basically
slices of the registry.

00:28:00.910 --> 00:28:06.460
So you'll in some way tag
or have a programmatic way

00:28:06.460 --> 00:28:08.259
of recognizing that
this package is

00:28:08.259 --> 00:28:10.800
compatible with this ecosystem,
and it will get automatically

00:28:10.800 --> 00:28:11.883
included into this search.

00:28:11.883 --> 00:28:13.590
So you can say,
search only for things

00:28:13.590 --> 00:28:15.090
that are going to
work in a browser,

00:28:15.090 --> 00:28:16.210
and tell me what they are.

00:28:16.210 --> 00:28:18.290
Search only for the things
that are good for robots.

00:28:18.290 --> 00:28:19.789
Search only for the
things that work

00:28:19.789 --> 00:28:23.421
for this particular framework.

00:28:23.421 --> 00:28:24.296
DOMINIC DENICOLA: OK.

00:28:24.296 --> 00:28:25.480
And I think that's
really powerful,

00:28:25.480 --> 00:28:28.090
because you can have things that
work with Browserify, things

00:28:28.090 --> 00:28:30.980
that work with RequireJS--
if people still use that.

00:28:30.980 --> 00:28:34.090
Things that work with web
components, in particular.

00:28:34.090 --> 00:28:36.585
Things that tie into
that global registry.

00:28:36.585 --> 00:28:38.960
And so that way you can say,
OK, well, two web components

00:28:38.960 --> 00:28:41.650
have the same tag name, I guess
I shouldn't use those together.

00:28:41.650 --> 00:28:44.170
So this ecosystems concept,
I'm really excited for it

00:28:44.170 --> 00:28:47.827
to land because then it will
be-- everything will be better.

00:28:47.827 --> 00:28:48.660
KYLE SIMPSON: Taryn?

00:28:48.660 --> 00:28:50.430
Are you out in the crowd?

00:28:50.430 --> 00:28:51.620
There we go.

00:28:51.620 --> 00:28:56.950
TARYN: So I for awhile built
a build tool around Bower.

00:28:56.950 --> 00:29:00.282
So how do kind of think of--

00:29:02.687 --> 00:29:04.270
KYLE SIMPSON: Let's
make sure we don't

00:29:04.270 --> 00:29:05.462
stray into extra questions.

00:29:05.462 --> 00:29:07.170
We can tackle those
in the other session,

00:29:07.170 --> 00:29:08.530
but did you have
a point that you

00:29:08.530 --> 00:29:10.290
wanted to make about
difficulty with that?

00:29:10.290 --> 00:29:10.790
TARYN: Yeah.

00:29:10.790 --> 00:29:13.330
It's you don't really
know what you're

00:29:13.330 --> 00:29:16.790
going to get when you get-- when
it's downloaded from GitHub.

00:29:16.790 --> 00:29:19.220
And so this week it
might be copy script

00:29:19.220 --> 00:29:23.210
pre-compiled, next week it might
be in a different directory

00:29:23.210 --> 00:29:26.120
where the copy script has
been pre-compiled, too.

00:29:26.120 --> 00:29:28.160
Or maybe it's not
pre-compiled at all

00:29:28.160 --> 00:29:31.010
and now you have to figure out
what language this package is

00:29:31.010 --> 00:29:35.900
in, this particular
git commit dash.

00:29:35.900 --> 00:29:37.860
And I didn't know,
like, what tooling

00:29:37.860 --> 00:29:40.550
you plan on putting around
that so you have a better

00:29:40.550 --> 00:29:42.980
idea of what you've
actually installed

00:29:42.980 --> 00:29:44.174
and how you can use it.

00:29:44.174 --> 00:29:45.840
KYLE SIMPSON: I think
to Dominic's point

00:29:45.840 --> 00:29:50.010
about the package being
more about built assets

00:29:50.010 --> 00:29:52.284
that are ready to deploy
more than source, that

00:29:52.284 --> 00:29:53.700
can begin to address
those things.

00:29:53.700 --> 00:29:56.020
But certainly it's up to each
individual authorized, right?

00:29:56.020 --> 00:29:56.220
To--

00:29:56.220 --> 00:29:56.560
DOMINIC DENICOLA: Yeah.

00:29:56.560 --> 00:29:57.059
Yeah.

00:29:57.059 --> 00:29:59.705
And I think that's the thing,
is it's really cultural.

00:29:59.705 --> 00:30:02.850
At npm there is a
strong cultural bias

00:30:02.850 --> 00:30:05.944
towards JavaScript,
not copy script.

00:30:05.944 --> 00:30:08.360
If you want to write copy
script you pre-compile it first.

00:30:08.360 --> 00:30:10.340
And honestly towards
common js modules.

00:30:10.340 --> 00:30:12.530
And I think that common
js models, especially

00:30:12.530 --> 00:30:16.680
as we go towards ES6 and
whatever, will be challenged.

00:30:16.680 --> 00:30:19.361
But I think it is great to
have a convention that we don't

00:30:19.361 --> 00:30:20.860
publish copy script
to the registry.

00:30:20.860 --> 00:30:24.222
And you could if you want, but
I think it's nice that we don't.

00:30:24.222 --> 00:30:24.930
KYLE SIMPSON: OK.

00:30:24.930 --> 00:30:28.340
So I suspected that that
first question might not

00:30:28.340 --> 00:30:31.575
get as specific as I wanted
to, particularly on one topic

00:30:31.575 --> 00:30:33.200
and that is the
challenges of metadata.

00:30:33.200 --> 00:30:35.825
So our third question that we're
going to go to is specifically

00:30:35.825 --> 00:30:38.283
what can we do-- so let me make
sure I read this correctly.

00:30:38.283 --> 00:30:40.010
What can package
managers and developers

00:30:40.010 --> 00:30:43.790
do to streamline the overhead
of package metadata, especially

00:30:43.790 --> 00:30:45.376
across multiple
package managers?

00:30:45.376 --> 00:30:47.500
LAURIE VOSS: Just stop
using other package manager,

00:30:47.500 --> 00:30:48.470
obviously.

00:30:48.470 --> 00:30:51.011
KYLE SIMPSON: That's the obvious
softball answer, but let's--

00:30:51.011 --> 00:30:55.200
DAVID BECK: Or just give each
package manager the domain.

00:30:55.200 --> 00:30:56.380
A clear domain.

00:30:56.380 --> 00:31:00.080
KYLE SIMPSON: But as a package
owner myself, I author code,

00:31:00.080 --> 00:31:02.120
and I'm constantly
getting requests to, hey,

00:31:02.120 --> 00:31:03.720
can you add the new bower.json?

00:31:03.720 --> 00:31:05.508
And then when a new one comes,
will you please-- you know,

00:31:05.508 --> 00:31:06.810
it's a full request to add that.

00:31:06.810 --> 00:31:08.643
And then it's a maintenance
overhead for me.

00:31:08.643 --> 00:31:10.510
I know there are
tools that can manage.

00:31:10.510 --> 00:31:11.460
JOSH PEEK: I totally agree
with what you're saying,

00:31:11.460 --> 00:31:13.450
and I think the way
that we need to solve

00:31:13.450 --> 00:31:16.180
this is I think if we
can actually standardize

00:31:16.180 --> 00:31:20.550
on the metadata format, and
all get on package JSON,

00:31:20.550 --> 00:31:23.470
then we don't have to have
a [INAUDIBLE] base in there.

00:31:23.470 --> 00:31:27.730
But that means-- that also
means having npm give up,

00:31:27.730 --> 00:31:30.990
like, full control over
what package JSON is.

00:31:30.990 --> 00:31:33.600
LAURIE VOSS: So npm
is already incredibly

00:31:33.600 --> 00:31:36.490
loosey-goosey about
what package JSON is.

00:31:36.490 --> 00:31:39.390
We have a schemaless
database, for better or worse,

00:31:39.390 --> 00:31:42.110
so anything that you put in
package JSON gets in there

00:31:42.110 --> 00:31:46.650
and is indexable and
replicates to the entire world.

00:31:46.650 --> 00:31:50.460
So people-- a lot of
the stuff that npm does

00:31:50.460 --> 00:31:51.550
arrived there by accident.

00:31:51.550 --> 00:31:53.530
People just started
putting in their main disc,

00:31:53.530 --> 00:31:55.580
they started putting in the
files thing, they started--

00:31:55.580 --> 00:31:56.560
JOSH PEEK: Like Browserify?

00:31:56.560 --> 00:31:56.840
LAURIE VOSS: Right.

00:31:56.840 --> 00:31:58.965
They just started adding
stanzas to package updates

00:31:58.965 --> 00:32:01.070
and eventually were like,
well, that cow path seem

00:32:01.070 --> 00:32:02.270
OK, let's pave it.

00:32:02.270 --> 00:32:05.620
JOSH PEEK: I think if we had
some sort of community effort

00:32:05.620 --> 00:32:09.740
to standardize how these
metadata fields work,

00:32:09.740 --> 00:32:13.320
I think there's a lot in common
between all of these package

00:32:13.320 --> 00:32:13.950
tools.

00:32:13.950 --> 00:32:16.580
Again, this is more
from, like, OK,

00:32:16.580 --> 00:32:20.380
so the-- if we can decide
how package JSON works, then

00:32:20.380 --> 00:32:22.040
you can have other
sorts of build

00:32:22.040 --> 00:32:23.890
tools that understand
package JSON.

00:32:23.890 --> 00:32:25.540
And that can, I
think, really help

00:32:25.540 --> 00:32:28.830
other communities that
aren't doing no js.

00:32:28.830 --> 00:32:31.530
Like, there's still tons of
Java people writing web servers,

00:32:31.530 --> 00:32:33.844
and they want to use
front end packages so.

00:32:33.844 --> 00:32:35.260
KYLE SIMPSON: But
in all fairness,

00:32:35.260 --> 00:32:37.832
rather than putting a Bower
field into package JSON,

00:32:37.832 --> 00:32:39.040
they created a separate file.

00:32:39.040 --> 00:32:40.590
And in fact, how
can we stop that

00:32:40.590 --> 00:32:42.798
from happening with all the
other specialized package

00:32:42.798 --> 00:32:43.410
managers?

00:32:43.410 --> 00:32:46.034
JOSH PEEK: Well, again, I think
that's getting people on board.

00:32:46.034 --> 00:32:49.280
And, like, what do we
share in common and,

00:32:49.280 --> 00:32:51.930
like, how do we actually
extend this for,

00:32:51.930 --> 00:32:53.760
like, other-- I
think getting back

00:32:53.760 --> 00:32:56.360
to the question about
the build tools thing--

00:32:56.360 --> 00:32:58.276
I don't want to go too
much into build tools--

00:32:58.276 --> 00:33:01.120
but I think there is an
overlap in the manifest of how

00:33:01.120 --> 00:33:05.500
do build tools interoperate
with these metadata fields.

00:33:05.500 --> 00:33:07.500
DOMINIC DENICOLA: And to
me, my favorite example

00:33:07.500 --> 00:33:09.670
of this, the easiest one, is if
you're building a web component

00:33:09.670 --> 00:33:11.480
and distributing
it on npm and you

00:33:11.480 --> 00:33:13.700
want to reserve a tag
name, you should probably,

00:33:13.700 --> 00:33:15.533
like, somebody should
take the lead and say,

00:33:15.533 --> 00:33:19.070
the standard here is put
a tag name, x flip box,

00:33:19.070 --> 00:33:20.320
in your package JSON.

00:33:20.320 --> 00:33:22.954
And then, if you see two x
flip boxes in the project,

00:33:22.954 --> 00:33:23.870
you're like, oh, shit.

00:33:23.870 --> 00:33:24.310
OK.

00:33:24.310 --> 00:33:26.226
My build tool needs to
do something about this

00:33:26.226 --> 00:33:28.340
or my tooling needs to
do something about this.

00:33:28.340 --> 00:33:30.297
And probably we wouldn't
bake that into npm,

00:33:30.297 --> 00:33:32.130
it's not really--
shouldn't necessarily need

00:33:32.130 --> 00:33:35.420
to be aware of web components,
but it's a strong convention.

00:33:35.420 --> 00:33:38.077
And if we as a community
can agree on that, or even

00:33:38.077 --> 00:33:40.285
just a large starter community,
whether it be Polymer

00:33:40.285 --> 00:33:42.325
or whatever, that
would be a great start.

00:33:42.325 --> 00:33:44.700
MATT MILLER: Just to play
devil's advocate a little bit--

00:33:44.700 --> 00:33:46.370
KYLE SIMPSON: Before you do,
let's make sure we queue up.

00:33:46.370 --> 00:33:49.010
[INAUDIBLE] and Rachel have
some comments from the floor.

00:33:49.010 --> 00:33:50.150
So go ahead.

00:33:50.150 --> 00:33:51.300
MATT MILLER: So, at
least from my experience,

00:33:51.300 --> 00:33:52.150
I think some of
this stuff could be

00:33:52.150 --> 00:33:54.970
solved with, like, the separate
ecosystems and possibly

00:33:54.970 --> 00:33:55.940
a standardized format.

00:33:55.940 --> 00:33:59.070
But from my position,
a lot of times

00:33:59.070 --> 00:34:00.780
when you go to a
repository, you have

00:34:00.780 --> 00:34:03.010
no idea does this work
on the client side,

00:34:03.010 --> 00:34:04.590
does this work on
the server side?

00:34:04.590 --> 00:34:06.130
And so it's kind
of nice, actually,

00:34:06.130 --> 00:34:07.361
like, having two manifests.

00:34:07.361 --> 00:34:09.860
Like, especially one that's
like component.json or something

00:34:09.860 --> 00:34:12.630
like that where you're like, OK,
I know this is going to work.

00:34:12.630 --> 00:34:13.482
Or like a Bower.

00:34:13.482 --> 00:34:14.940
Like, I know this
is going to work.

00:34:14.940 --> 00:34:18.340
Or it's meant to work on
the client side versus this

00:34:18.340 --> 00:34:19.949
could possibly
work on the server,

00:34:19.949 --> 00:34:22.739
and it might work
in the browser, too.

00:34:22.739 --> 00:34:24.900
LAURIE VOSS: If there was
just component-- sorry.

00:34:24.900 --> 00:34:27.275
DAVID BECK: I hope we're going
towards a world where it's

00:34:27.275 --> 00:34:28.850
clear-- which package
manager you use

00:34:28.850 --> 00:34:32.190
is clear based on the nature
of your package, in which case

00:34:32.190 --> 00:34:34.719
there really shouldn't
be-- I mean the overlap,

00:34:34.719 --> 00:34:36.520
it may be coincidental,
but it's not

00:34:36.520 --> 00:34:38.409
guaranteed that they're going
to be the same fields that

00:34:38.409 --> 00:34:39.040
are important.

00:34:39.040 --> 00:34:39.850
I mean, ideally there--

00:34:39.850 --> 00:34:40.690
KYLE SIMPSON: There
does feel like there's

00:34:40.690 --> 00:34:42.060
a lot of overlap right now.

00:34:42.060 --> 00:34:43.098
DAVID BECK: There is
a lot of overlap right

00:34:43.098 --> 00:34:44.940
now, especially in
that space where

00:34:44.940 --> 00:34:48.659
you have JavaScript client side
packages with other assets,

00:34:48.659 --> 00:34:50.310
which is a huge space right now.

00:34:50.310 --> 00:34:52.995
I mean, it's Ember, it's
Backbone, it's Angular,

00:34:52.995 --> 00:34:53.620
to some degree.

00:34:53.620 --> 00:34:55.980
All of those are
JavaScript logic

00:34:55.980 --> 00:34:58.100
that have additional
resources on them.

00:34:58.100 --> 00:35:03.000
And not only that,
but it's hugely

00:35:03.000 --> 00:35:05.025
valuable for an
internal application

00:35:05.025 --> 00:35:07.650
to structure their application
in such a modularized way,

00:35:07.650 --> 00:35:09.480
and also for sharing
with package manager.

00:35:09.480 --> 00:35:12.800
So there's a huge potential
there to get a lot of value

00:35:12.800 --> 00:35:14.710
from standardizing
some of this stuff.

00:35:14.710 --> 00:35:15.870
KYLE SIMPSON: [INAUDIBLE]?

00:35:15.870 --> 00:35:17.430
AUDIENCE: So my
question goes back

00:35:17.430 --> 00:35:19.180
to basically
understanding two things.

00:35:19.180 --> 00:35:22.510
One is, what is the exact
role of specialty client side

00:35:22.510 --> 00:35:23.344
package managers?

00:35:23.344 --> 00:35:25.010
And back to the
question of a standard--

00:35:25.010 --> 00:35:27.551
KYLE SIMPSON: I want to remind
that we want to save questions

00:35:27.551 --> 00:35:30.030
for the breakout
session so can you

00:35:30.030 --> 00:35:31.810
share an opinion about this?

00:35:31.810 --> 00:35:33.610
How it's difficult
specifically for you?

00:35:33.610 --> 00:35:34.235
AUDIENCE: Yeah.

00:35:34.235 --> 00:35:36.760
So when I think about client
side package managers,

00:35:36.760 --> 00:35:38.610
I mean, traditionally
you can think of HTML

00:35:38.610 --> 00:35:40.810
and browser itself
as a package manager,

00:35:40.810 --> 00:35:44.700
just specify your resources
in your HTML with proper URLs.

00:35:44.700 --> 00:35:47.850
You reference, like, different
CDNs with different versions

00:35:47.850 --> 00:35:50.200
of jQuery and
whatever, and you get

00:35:50.200 --> 00:35:53.320
your package kind
of for deployment.

00:35:53.320 --> 00:35:56.980
But now for my client side,
especially package managers,

00:35:56.980 --> 00:35:59.390
they seem to be mostly
focused on build only

00:35:59.390 --> 00:36:02.130
and build in terms
of download something

00:36:02.130 --> 00:36:04.610
from somewhere else
on my local machine

00:36:04.610 --> 00:36:07.224
so that I have a
repeatable process.

00:36:07.224 --> 00:36:08.640
Now that it's on
my machine, I can

00:36:08.640 --> 00:36:11.930
apply some skips over whatever
and then deploy that way.

00:36:11.930 --> 00:36:15.620
So I think if you clarify
what exactly is the flow

00:36:15.620 --> 00:36:18.750
and where they fit in this
flow and what they provide,

00:36:18.750 --> 00:36:20.840
a lot of these questions
could answered.

00:36:20.840 --> 00:36:22.630
Otherwise, just using
package managers

00:36:22.630 --> 00:36:24.755
for installing and
deploying stuff,

00:36:24.755 --> 00:36:25.970
I see a lot of overlapping.

00:36:25.970 --> 00:36:27.886
If you go especially
with the standardization,

00:36:27.886 --> 00:36:30.880
HTML and manifest is
one of the attempts

00:36:30.880 --> 00:36:32.310
that they had for
standardizing--

00:36:32.310 --> 00:36:33.740
KYLE SIMPSON: So I know
you have a disagreement

00:36:33.740 --> 00:36:35.700
in that definition of
what package managers do.

00:36:35.700 --> 00:36:36.570
So clarify for us.

00:36:36.570 --> 00:36:36.790
DOMINIC DENICOLA: Yeah.

00:36:36.790 --> 00:36:38.620
I mean, so I think
what I'm hearing

00:36:38.620 --> 00:36:42.640
is you're thinking, how is this
different from our script tag

00:36:42.640 --> 00:36:43.300
world, right?

00:36:43.300 --> 00:36:45.240
And I think it's different
in a few key ways.

00:36:45.240 --> 00:36:47.510
First of all, it's reproducible.

00:36:47.510 --> 00:36:50.250
You're not depending on
somebody's external URL

00:36:50.250 --> 00:36:53.130
to have the same content
there from day-to-day.

00:36:53.130 --> 00:36:56.000
Second, it takes care of
dependencies for you, right?

00:36:56.000 --> 00:36:58.697
So if I include Backbone
and it needs underscore,

00:36:58.697 --> 00:37:00.780
that needs to get taken
care of for me instead of,

00:37:00.780 --> 00:37:03.113
hey, put these two script
tags or these five script tags

00:37:03.113 --> 00:37:04.870
or these 20 script
tags in your head.

00:37:04.870 --> 00:37:07.030
And third, it's just
like, it's a way

00:37:07.030 --> 00:37:09.080
of getting it all tied
together into one flow

00:37:09.080 --> 00:37:11.160
where you're like
npm install Ember,

00:37:11.160 --> 00:37:12.739
and all these things
get installed.

00:37:12.739 --> 00:37:14.530
And then you have a
build tool or maybe you

00:37:14.530 --> 00:37:16.540
do script tags like
you do with Bower.

00:37:16.540 --> 00:37:19.830
You put those in
your head or wherever

00:37:19.830 --> 00:37:21.280
or use a module system, right?

00:37:21.280 --> 00:37:23.613
But the important thing is
it takes care of dependencies

00:37:23.613 --> 00:37:25.130
for you, and I
think that's really

00:37:25.130 --> 00:37:28.050
what a package manager is
about more so than the world

00:37:28.050 --> 00:37:31.170
where you just do script tags.

00:37:31.170 --> 00:37:34.700
KYLE SIMPSON: It seems like one
of the most important pieces

00:37:34.700 --> 00:37:37.980
of metadata that can possibly
exist is the version number.

00:37:37.980 --> 00:37:40.430
So we're going to transition
to a specific question

00:37:40.430 --> 00:37:42.960
about version numbers and
about semantic versioning.

00:37:42.960 --> 00:37:45.900
So the recent controversy
over semantic versioning

00:37:45.900 --> 00:37:48.170
asks whether or not
it's even reasonable

00:37:48.170 --> 00:37:51.430
to have meaningful and
interoperable version numbers.

00:37:51.430 --> 00:37:55.470
What must we all do to
bring sanity to this space?

00:37:55.470 --> 00:37:57.380
And I'll throw it to
specifically to Dominic.

00:37:57.380 --> 00:38:00.767
Are we at edge 4.0 or edge 0.4?

00:38:00.767 --> 00:38:01.850
DOMINIC DENICOLA: Oh, man.

00:38:01.850 --> 00:38:02.349
OK.

00:38:02.349 --> 00:38:06.115
So 0.x versions are an
unfortunate situation

00:38:06.115 --> 00:38:08.240
where I think it's just
because npm for a long time

00:38:08.240 --> 00:38:11.390
had zero as their default for
your starting where people

00:38:11.390 --> 00:38:12.880
were like, oh, I'll publish 0.x.

00:38:12.880 --> 00:38:15.804
And then semver.org is like,
0.x doesn't mean semantic,

00:38:15.804 --> 00:38:16.970
it could change at any time.

00:38:16.970 --> 00:38:19.080
And that's a whole
mess, but I do

00:38:19.080 --> 00:38:22.030
think kind of getting to the
larger question of semantics

00:38:22.030 --> 00:38:25.830
and versions and what we can
do, I think if we as a community

00:38:25.830 --> 00:38:28.000
can agree to SemVer,
that enables some really

00:38:28.000 --> 00:38:30.430
powerful abilities,
especially on the client side.

00:38:30.430 --> 00:38:36.835
Because if you have two packages
using Ember 1.x and 2.x, then

00:38:36.835 --> 00:38:39.210
you need to know, OK, this is
not going to work together.

00:38:39.210 --> 00:38:39.720
Right?

00:38:39.720 --> 00:38:42.180
Or maybe it does if
it's something smaller,

00:38:42.180 --> 00:38:44.470
like date format or
library 1.x and 2.x.

00:38:44.470 --> 00:38:45.720
That will work together.

00:38:45.720 --> 00:38:45.890
Right?

00:38:45.890 --> 00:38:47.764
But you need the ability
to have this insight

00:38:47.764 --> 00:38:49.312
into what are the conflicts?

00:38:49.312 --> 00:38:51.020
And if you don't use
semantic versioning,

00:38:51.020 --> 00:38:53.019
then you have no way of
kind of automating that.

00:38:53.019 --> 00:38:55.370
You can't say, oh, well,
this guy needs Ember 1.--

00:38:55.370 --> 00:38:56.250
or let's do Backbone.

00:38:56.250 --> 00:38:59.040
This guy needs Backbone 1.6,
and this guy needs Backbone 1.7.

00:38:59.040 --> 00:39:01.165
Now I have to remember that
Backbone doesn't follow

00:39:01.165 --> 00:39:03.990
semantic versioning so I
can't actually coalesce those,

00:39:03.990 --> 00:39:05.990
I have to say, oh,
there's a conflict.

00:39:05.990 --> 00:39:07.170
Whereas if it's something
that does follow

00:39:07.170 --> 00:39:09.757
semantic versioning, you can see
those conflicts more clearly.

00:39:09.757 --> 00:39:12.090
So I guess-- I mean, it's
hard to give an answer of just

00:39:12.090 --> 00:39:15.360
we should all do SemVer, because
I think the question is kind

00:39:15.360 --> 00:39:18.770
of asking, like, SemVer never,
worked so what's going on?

00:39:18.770 --> 00:39:19.310
But--

00:39:19.310 --> 00:39:22.659
KYLE SIMPSON: Is the git commit
tag a universal versions?

00:39:22.659 --> 00:39:24.450
Can we just standardize
on that and get rid

00:39:24.450 --> 00:39:26.757
of semantic versions?

00:39:26.757 --> 00:39:27.340
JOSH PEEK: No.

00:39:27.340 --> 00:39:31.620
I think you use
Ember and get tags.

00:39:31.620 --> 00:39:34.170
LAURIE VOSS: The problem with
SemVer is that everyone thinks

00:39:34.170 --> 00:39:36.770
they know what SemVer
is and they don't.

00:39:36.770 --> 00:39:39.300
When you get to the
edge cases the split

00:39:39.300 --> 00:39:42.080
between how-- when
it's ambiguous,

00:39:42.080 --> 00:39:45.250
the split between the
cases is nearly 50-50,

00:39:45.250 --> 00:39:46.570
and that's the problem.

00:39:46.570 --> 00:39:48.530
Like, if we could
agree what SemVer was,

00:39:48.530 --> 00:39:49.488
then it would be great.

00:39:49.488 --> 00:39:51.370
And we agree for about
90% of use cases,

00:39:51.370 --> 00:39:55.110
and the final 10%, which is
where all the problems happen,

00:39:55.110 --> 00:39:56.936
there's no consensus at all.

00:39:56.936 --> 00:39:58.810
KYLE SIMPSON: It seems
like the 0.x is really

00:39:58.810 --> 00:40:01.510
the biggest area of confusion.

00:40:01.510 --> 00:40:03.550
So can you provide
some clarity on that?

00:40:03.550 --> 00:40:09.220
LAURIE VOSS: So it depends what
you think should happen, right?

00:40:09.220 --> 00:40:13.320
The way that npm as of 2.0.0,
which was released last week.

00:40:13.320 --> 00:40:15.820
Everyone should download it.

00:40:15.820 --> 00:40:19.870
The way that it
works is basically

00:40:19.870 --> 00:40:23.360
the most significant digit is
considered the major version.

00:40:23.360 --> 00:40:27.070
So if you are point
0.0.1, then 0.0.1

00:40:27.070 --> 00:40:29.500
is considered
incompatible with 0.0.2.

00:40:29.500 --> 00:40:34.641
But if you're 0.1.1,
then 0.1.1 and 0.1.2

00:40:34.641 --> 00:40:35.890
are considered minor features.

00:40:35.890 --> 00:40:37.020
KYLE SIMPSON: I'm
already completely lost.

00:40:37.020 --> 00:40:37.561
Anybody else?

00:40:37.561 --> 00:40:38.960
LAURIE VOSS: Right.

00:40:38.960 --> 00:40:42.130
Whereas everybody is fairly
clear once you're in 1.0,

00:40:42.130 --> 00:40:44.170
that 1.0 to 2.0 is
a breaking change.

00:40:44.170 --> 00:40:46.620
1.1 to 1.2 is a feature change.

00:40:46.620 --> 00:40:51.640
And 1.1.2 to 1.1.3
is a minor change.

00:40:51.640 --> 00:40:54.000
KYLE SIMPSON: So does 0.x
just need to go away entirely?

00:40:54.000 --> 00:40:56.249
LAURIE VOSS: That is sort
of-- we changed the default.

00:40:56.249 --> 00:40:58.640
We changed npm in it to
create all packages at 1.0.0

00:40:58.640 --> 00:41:01.480
simply because 0.x was so
confusing to everybody.

00:41:01.480 --> 00:41:02.560
Just start at 1.0.

00:41:02.560 --> 00:41:04.010
Like, integers are free.

00:41:04.010 --> 00:41:07.300
You can use as many
of them as you like.

00:41:07.300 --> 00:41:08.660
KYLE SIMPSON: Excellent.

00:41:08.660 --> 00:41:10.535
MATT MILLER: What are
your guys' thoughts on,

00:41:10.535 --> 00:41:14.400
like, simplifying the, like,
tilde versus caret verses

00:41:14.400 --> 00:41:15.030
all those?

00:41:15.030 --> 00:41:18.190
Like, what's up with that?

00:41:18.190 --> 00:41:21.120
KYLE SIMPSON: Version ranges
for those of you who don't know.

00:41:21.120 --> 00:41:24.090
LAURIE VOSS: We have a
lot of lively discussions

00:41:24.090 --> 00:41:26.260
about that in the office.

00:41:26.260 --> 00:41:29.260
The point of introducing
the caret range was to try

00:41:29.260 --> 00:41:31.410
and clarify the
semantics of the tilde,

00:41:31.410 --> 00:41:34.870
which were in turn to try
and clarify the semantics

00:41:34.870 --> 00:41:38.300
of the .x, x which is what
everyone was using before that.

00:41:38.300 --> 00:41:40.460
Everyone understands
what .x does.

00:41:40.460 --> 00:41:42.530
It's like, that x is a variable.

00:41:42.530 --> 00:41:48.230
And tilde means, like,
minor versions are OK.

00:41:48.230 --> 00:41:51.030
And caret is supposed to
mean feature versions are OK

00:41:51.030 --> 00:41:54.214
but not breaking
changes, which is great

00:41:54.214 --> 00:41:55.630
if you understand
those semantics.

00:41:55.630 --> 00:41:57.110
And then as soon as
you get into the 0.x,

00:41:57.110 --> 00:41:58.300
people are like,
oh, but I thought

00:41:58.300 --> 00:41:58.940
this was a feature change.

00:41:58.940 --> 00:42:00.648
In turns out that it's
a breaking change.

00:42:00.648 --> 00:42:02.390
And it all goes to hell.

00:42:02.390 --> 00:42:07.040
So again, pass 1.0, tilde
versus caret is pretty easy.

00:42:07.040 --> 00:42:09.391
And before zero it's
just a hell scape

00:42:09.391 --> 00:42:10.640
from which no one will escape.

00:42:10.640 --> 00:42:11.250
MATT MILLER: Got ya.

00:42:11.250 --> 00:42:12.708
DOMINIC DENICOLA:
So I think what's

00:42:12.708 --> 00:42:15.150
really interesting is one
of my friend, Yehuda Katz,

00:42:15.150 --> 00:42:16.990
is doing the cargo
package manager for Rust.

00:42:16.990 --> 00:42:19.073
And he has the benefit of
being greenfield, right?

00:42:19.073 --> 00:42:20.700
This is a very new
package manager.

00:42:20.700 --> 00:42:22.150
His semantics are,
you don't have

00:42:22.150 --> 00:42:25.194
any of these crazy
punctuations, but it always

00:42:25.194 --> 00:42:26.360
follows semantic versioning.

00:42:26.360 --> 00:42:29.100
So if you put 1.2.3
in your package

00:42:29.100 --> 00:42:33.320
or your cargo [INAUDIBLE]?

00:42:33.320 --> 00:42:34.680
Seriously [INAUDIBLE].

00:42:34.680 --> 00:42:36.280
If you put it in
there, then you won't

00:42:36.280 --> 00:42:40.525
get anything in the one series
that is greater than 1.2.3,

00:42:40.525 --> 00:42:41.150
which is great.

00:42:41.150 --> 00:42:42.220
You don't have to
remember any of this;

00:42:42.220 --> 00:42:44.260
it just follows
semantic versioning.

00:42:44.260 --> 00:42:45.861
And then what he
does is if you really

00:42:45.861 --> 00:42:47.860
need to pin it, which is
an important capability

00:42:47.860 --> 00:42:52.250
if somebody's being badly
behaved, you do = 1.2.3.

00:42:52.250 --> 00:42:54.887
So I kind of wish that we
could just rewind the clock

00:42:54.887 --> 00:42:56.720
and use those semantics
instead of inventing

00:42:56.720 --> 00:42:59.720
all these punctuations,
but it's just something

00:42:59.720 --> 00:43:01.320
to be wistful about, I guess.

00:43:01.320 --> 00:43:02.170
KYLE SIMPSON: Matt,
what do you think?

00:43:02.170 --> 00:43:04.720
Are the version numbers that
you deal with in your software,

00:43:04.720 --> 00:43:06.480
are they easy for
you to reason about

00:43:06.480 --> 00:43:10.210
as well as those that
consume your software?

00:43:10.210 --> 00:43:12.780
MATT MILLER: I would
say for the most part.

00:43:12.780 --> 00:43:16.185
I'm-- personally, I'm confused
about the tildes and the carets

00:43:16.185 --> 00:43:18.310
and stuff and when you
should use them and when you

00:43:18.310 --> 00:43:18.610
shouldn't--

00:43:18.610 --> 00:43:19.900
LAURIE VOSS: I get them
wrong all the time.

00:43:19.900 --> 00:43:20.370
MATT MILLER: Yeah.

00:43:20.370 --> 00:43:22.536
KYLE SIMPSON: I think that's
one of the reasons why,

00:43:22.536 --> 00:43:24.700
like, for instance when
the underscore controversy

00:43:24.700 --> 00:43:27.158
happened, I think that's one
of the arguments that was made

00:43:27.158 --> 00:43:28.970
is if it's that
complex, maybe we

00:43:28.970 --> 00:43:30.220
need to find a simpler system.

00:43:30.220 --> 00:43:31.090
MATT MILLER: Yeah.

00:43:31.090 --> 00:43:34.570
And you have a dash beta,
beta 2, beta 3, beta 4.

00:43:34.570 --> 00:43:38.540
Like, it's really-- it seems
a little bit overly complex,

00:43:38.540 --> 00:43:40.930
and maybe there's
reason for that.

00:43:40.930 --> 00:43:43.240
But maybe we should
reevaluate the whole system.

00:43:43.240 --> 00:43:44.910
DOMINIC DENICOLA: And I think
there is a good reason, which

00:43:44.910 --> 00:43:46.210
is the reduplication, right?

00:43:46.210 --> 00:43:52.420
So if I depend on ^1.2.3 and the
other person depends on ^1.4.0,

00:43:52.420 --> 00:43:56.460
we should be able to install
1.4.2 and both of us use that.

00:43:56.460 --> 00:43:59.300
And that's a great benefit.

00:43:59.300 --> 00:44:00.400
So that's the plus.

00:44:00.400 --> 00:44:02.895
I mean, I agree it's complex,
but it does have payoffs.

00:44:02.895 --> 00:44:05.140
KYLE SIMPSON: Do version
numbers for packages

00:44:05.140 --> 00:44:07.500
become kind of like they
are for browsers, which

00:44:07.500 --> 00:44:11.146
are just arbitrary marketing
labels at that point?

00:44:11.146 --> 00:44:12.395
DAVID BECK: Well, ideally not.

00:44:12.395 --> 00:44:13.315
I mean--

00:44:13.315 --> 00:44:15.190
DOMINIC DENICOLA: So
browsers are perpetually

00:44:15.190 --> 00:44:16.370
stuck on SemVer 1.0.

00:44:16.370 --> 00:44:18.250
And in fact, the entire
web is perpetually

00:44:18.250 --> 00:44:19.250
stuck on SemVer 1.0.

00:44:19.250 --> 00:44:21.590
You cannot make backwards
breaking changes in a browser

00:44:21.590 --> 00:44:24.730
so browser version
numbers are arbitrary just

00:44:24.730 --> 00:44:27.070
because otherwise we would
always be incrementing, like,

00:44:27.070 --> 00:44:28.430
the patch or the feature.

00:44:28.430 --> 00:44:34.032
And that's kind of-- nobody
wants to be Firefox 1.37.43.

00:44:34.032 --> 00:44:35.740
LAURIE VOSS: The most
compelling use case

00:44:35.740 --> 00:44:38.350
for semantic
versioning and having

00:44:38.350 --> 00:44:41.110
some sort of way of dealing with
that problem is the security

00:44:41.110 --> 00:44:41.610
case.

00:44:41.610 --> 00:44:44.230
When people say,
I have this thing,

00:44:44.230 --> 00:44:46.097
and the only-- or the bug case.

00:44:46.097 --> 00:44:48.180
I have this package, and
the only change I've made

00:44:48.180 --> 00:44:50.260
is that it doesn't,
like, expose all

00:44:50.260 --> 00:44:51.904
of your data to the
universe anymore.

00:44:51.904 --> 00:44:53.820
I promise, that's the
only thing I've changed.

00:44:53.820 --> 00:44:55.670
You want a way for
a you as an author

00:44:55.670 --> 00:44:57.960
to be able to communicate
that safely to the world.

00:44:57.960 --> 00:45:00.294
That's what the minor
versions are for.

00:45:00.294 --> 00:45:02.460
If that's the only thing
that you get out of SemVer,

00:45:02.460 --> 00:45:03.460
that's hugely valuable.

00:45:03.460 --> 00:45:06.760
Like, npm install
this except not as

00:45:06.760 --> 00:45:08.130
broken as it was last time.

00:45:08.130 --> 00:45:09.330
That is a great feature.

00:45:09.330 --> 00:45:10.330
KYLE SIMPSON: All right.

00:45:10.330 --> 00:45:11.990
I think we can continue
in the breakout session

00:45:11.990 --> 00:45:13.823
a lot more on this, but
I want to transition

00:45:13.823 --> 00:45:16.310
to our next question a
topic about documentation.

00:45:16.310 --> 00:45:19.400
So if we can all agree on
the importance of package

00:45:19.400 --> 00:45:20.970
documentation, I
mean, relatively,

00:45:20.970 --> 00:45:23.161
because different people
feel stronger or less

00:45:23.161 --> 00:45:23.910
strongly about it.

00:45:23.910 --> 00:45:26.300
But if we can all agree
that it is important,

00:45:26.300 --> 00:45:28.640
how can package
managers do a better job

00:45:28.640 --> 00:45:31.120
of encouraging and
maybe even rewarding

00:45:31.120 --> 00:45:34.500
discoverable documentation
for all their packages?

00:45:34.500 --> 00:45:36.759
LAURIE VOSS: So we have
a good answer here, too.

00:45:36.759 --> 00:45:38.800
Again, one of the new
features of the new website

00:45:38.800 --> 00:45:40.883
was this was one of the
things that kept coming up

00:45:40.883 --> 00:45:44.770
is that what is
the readme.md for?

00:45:44.770 --> 00:45:47.420
Do we want there to be a
documentation directory?

00:45:47.420 --> 00:45:50.149
Do we want to, like, descend
from the heavens and say,

00:45:50.149 --> 00:45:51.690
this is how you do
the documentation.

00:45:51.690 --> 00:45:52.670
It should be in this format.

00:45:52.670 --> 00:45:54.128
Like, somebody came
along and said,

00:45:54.128 --> 00:45:57.190
you should specify that
there's, like, a JavaScript doc.

00:45:57.190 --> 00:45:57.920
Like, Java doc.

00:45:57.920 --> 00:46:00.770
And we were like, no.

00:46:00.770 --> 00:46:04.150
But we do want to, like you
said, reward good behavior.

00:46:04.150 --> 00:46:06.360
So one of the things
that we are going

00:46:06.360 --> 00:46:07.759
to be doing in
the new website is

00:46:07.759 --> 00:46:09.800
we're going to be saying
that if you have written

00:46:09.800 --> 00:46:13.960
your readme.md within
this format such

00:46:13.960 --> 00:46:17.120
that we can recognize it, it
will become more than just,

00:46:17.120 --> 00:46:18.642
like, a solid wall of text.

00:46:18.642 --> 00:46:20.350
If you have said that
this is an example,

00:46:20.350 --> 00:46:22.391
then we will put your
example in a special place.

00:46:22.391 --> 00:46:29.200
If you have said that this is
your index, this is your spec,

00:46:29.200 --> 00:46:31.700
this is your API, like, we will
treat those things specially

00:46:31.700 --> 00:46:33.741
and we will allow you to
search for those things.

00:46:33.741 --> 00:46:36.010
And we will display them
better and stuff like that.

00:46:36.010 --> 00:46:38.780
So we think we
should reward that.

00:46:38.780 --> 00:46:40.850
But there is a line
to be drawn, which

00:46:40.850 --> 00:46:44.090
is at some point your
documentation site becomes

00:46:44.090 --> 00:46:46.760
a website, and we do not want
to become like a generic tool

00:46:46.760 --> 00:46:48.470
for generating a
documentation website.

00:46:48.470 --> 00:46:49.870
There are lots of
tools for that.

00:46:49.870 --> 00:46:50.460
KYLE SIMPSON: Of
course there are

00:46:50.460 --> 00:46:52.530
plenty of tools that have
created centralized things,

00:46:52.530 --> 00:46:54.310
but I mean, I want
to push back and say,

00:46:54.310 --> 00:46:57.172
isn't linking to the read me
kind of just the bare minimum?

00:46:57.172 --> 00:46:58.630
Isn't there a lot
more on the table

00:46:58.630 --> 00:47:00.630
that we should be
doing to encourage

00:47:00.630 --> 00:47:03.294
much more diverse documentation?

00:47:03.294 --> 00:47:04.210
LAURIE VOSS: There is.

00:47:04.210 --> 00:47:06.741
But like I said,
you have to-- we

00:47:06.741 --> 00:47:07.990
want to draw a line somewhere.

00:47:07.990 --> 00:47:09.698
We want to say that
there is a difference

00:47:09.698 --> 00:47:11.890
between the
explanation of what it

00:47:11.890 --> 00:47:13.690
is that it does with
the basic examples

00:47:13.690 --> 00:47:15.872
and the full documentation
website, which

00:47:15.872 --> 00:47:16.830
is a complicated thing.

00:47:16.830 --> 00:47:18.280
Like, for express,
you don't want

00:47:18.280 --> 00:47:22.010
to have-- we don't want to
build the entire documentation

00:47:22.010 --> 00:47:26.570
of express into the npm
website because it would be--

00:47:26.570 --> 00:47:29.060
the amount of complexity
there is just too much.

00:47:29.060 --> 00:47:29.630
DOMINIC DENICOLA:
Or like jQuery.

00:47:29.630 --> 00:47:31.640
The jQuery doc site is
great, and I look up

00:47:31.640 --> 00:47:32.530
my functions there.

00:47:32.530 --> 00:47:37.990
And I don't really want an
iframe in npm.org/jquery that

00:47:37.990 --> 00:47:39.025
has the jQuery website.

00:47:39.025 --> 00:47:39.900
That seems pointless.

00:47:39.900 --> 00:47:41.830
DAVID BECK: Isn't this all tied
back to the overall quality

00:47:41.830 --> 00:47:42.550
of the module?

00:47:42.550 --> 00:47:46.920
I mean, by pushing people to
the top who have good ratings,

00:47:46.920 --> 00:47:49.980
it seems like this is kind of
taken care of in user land,

00:47:49.980 --> 00:47:50.700
if you will.

00:47:50.700 --> 00:47:53.270
One thing that always
has kind of-- I

00:47:53.270 --> 00:47:55.060
felt like it's a
loose end of npm

00:47:55.060 --> 00:47:57.340
is how it has it's
separate rating system,

00:47:57.340 --> 00:47:59.006
and then you go to
GitHub and it's like,

00:47:59.006 --> 00:48:00.715
oh, there's another star rating.

00:48:00.715 --> 00:48:03.540
It'd be cool-- I'd like to see
those two things come together

00:48:03.540 --> 00:48:05.134
so it's, like, simplified.

00:48:05.134 --> 00:48:06.800
KYLE SIMPSON: Let's
queue up [INAUDIBLE]

00:48:06.800 --> 00:48:09.132
to give a comment
from the crowd.

00:48:09.132 --> 00:48:09.870
Go ahead, sorry.

00:48:09.870 --> 00:48:11.160
LAURIE VOSS: Sorry.

00:48:11.160 --> 00:48:12.330
Exactly that is happening.

00:48:12.330 --> 00:48:15.325
People keep saying to us,
like, there are npm stars

00:48:15.325 --> 00:48:16.450
and there are GitHub stars.

00:48:16.450 --> 00:48:18.158
What is the difference
between those two?

00:48:18.158 --> 00:48:20.500
And the answer is, when
we invented npm stars,

00:48:20.500 --> 00:48:23.730
GitHub stars didn't exist.

00:48:23.730 --> 00:48:27.880
GitHub, at one point, split from
stars into stars and watchers,

00:48:27.880 --> 00:48:30.340
and then the semantics
of stars became clear.

00:48:30.340 --> 00:48:32.225
But npm stars predate that.

00:48:32.225 --> 00:48:34.180
So the new npm
website is basically

00:48:34.180 --> 00:48:37.230
going to turn npm stars into
something more like bookmarks

00:48:37.230 --> 00:48:39.075
and say that the stars
are the GitHub stars.

00:48:39.075 --> 00:48:41.200
That's what everyone believes
are the GitHub stars.

00:48:41.200 --> 00:48:43.757
But the wrinkle is
that it penalizes

00:48:43.757 --> 00:48:45.340
people who don't use
GitHub, and there

00:48:45.340 --> 00:48:48.270
are-- you know, that's
10% of the registry.

00:48:48.270 --> 00:48:49.790
KYLE SIMPSON: OK.

00:48:49.790 --> 00:48:51.740
AUDIENCE: Perhaps to
help with the question,

00:48:51.740 --> 00:48:53.280
I'm actually challenging
the question itself.

00:48:53.280 --> 00:48:55.900
There's a big difference between
package managers and package

00:48:55.900 --> 00:48:56.750
repositories.

00:48:56.750 --> 00:48:59.297
And I think npm kind of
serves both worlds there

00:48:59.297 --> 00:49:00.880
and it's kind of the
unique situation.

00:49:00.880 --> 00:49:01.900
Like Bower, for example.

00:49:01.900 --> 00:49:03.983
Bower is the package
manager, but their repository

00:49:03.983 --> 00:49:05.000
is actually GitHub.

00:49:05.000 --> 00:49:07.540
So when it comes to
questions like star ratings

00:49:07.540 --> 00:49:09.420
or documentation, are
we trying to answer

00:49:09.420 --> 00:49:10.580
that with package managers?

00:49:10.580 --> 00:49:13.430
Or are we trying to answer
that with repositories?

00:49:13.430 --> 00:49:14.280
LAURIE VOSS: Yeah.

00:49:14.280 --> 00:49:16.110
You're asking for a
feature of the registry

00:49:16.110 --> 00:49:19.890
there, which something
like Bower can't do,

00:49:19.890 --> 00:49:20.980
unless I'm mistaken.

00:49:20.980 --> 00:49:26.845
Like, you could not have
Bower stars or Bower ratings.

00:49:26.845 --> 00:49:27.470
DAVID BECK: No.

00:49:27.470 --> 00:49:29.370
It's all in GitHub.

00:49:29.370 --> 00:49:30.190
KYLE SIMPSON: OK.

00:49:30.190 --> 00:49:31.860
Let's move to the
next question then.

00:49:31.860 --> 00:49:34.680
What specific functionality
can package managers

00:49:34.680 --> 00:49:39.160
offer that supports the specific
concerns of CSS and HTML

00:49:39.160 --> 00:49:44.240
and even other asset types
given their lack of modules?

00:49:44.240 --> 00:49:47.070
DAVID BECK: I think
it's very simple.

00:49:47.070 --> 00:49:48.700
That's my perspective.

00:49:48.700 --> 00:49:54.770
I think it's a sticky
area, but it's very simple

00:49:54.770 --> 00:49:57.260
to basically support the
skeleton of what you need,

00:49:57.260 --> 00:50:00.150
which is basically an inventory
of the other asset types.

00:50:00.150 --> 00:50:01.830
If we're talking
about JavaScript

00:50:01.830 --> 00:50:07.680
packages where your core
dependencies and your flow

00:50:07.680 --> 00:50:09.120
is going through
your JavaScript.

00:50:09.120 --> 00:50:10.869
That's your principal
object, and then you

00:50:10.869 --> 00:50:15.070
have these add on CSS and
maybe fonts or images.

00:50:15.070 --> 00:50:16.710
All you need is an
enumeration of which

00:50:16.710 --> 00:50:18.535
of those things in
your repository--

00:50:18.535 --> 00:50:20.911
DOMINIC DENICOLA: So we
call that the file system.

00:50:20.911 --> 00:50:21.410
Right?

00:50:21.410 --> 00:50:23.990
Like, there is a file system,
and it contains an enumeration

00:50:23.990 --> 00:50:25.406
of all the things
in your package.

00:50:25.406 --> 00:50:28.070
DAVID BECK: If that's
what everybody agrees on,

00:50:28.070 --> 00:50:29.340
then that's what it is.

00:50:29.340 --> 00:50:32.350
Or another option was to be--
to explicitly list them out

00:50:32.350 --> 00:50:33.230
in package.json.

00:50:33.230 --> 00:50:35.650
I know you're not a fan of
that, but it doesn't really

00:50:35.650 --> 00:50:40.370
matter which one as much
as it being defined.

00:50:40.370 --> 00:50:42.640
And one of the big things
that package managers are

00:50:42.640 --> 00:50:44.750
responsible for is the
metadata that we've

00:50:44.750 --> 00:50:46.060
talked about a lot of the time.

00:50:46.060 --> 00:50:49.260
So if it's not defined
anywhere, and it's not

00:50:49.260 --> 00:50:52.257
defined in the
metadata, then it's

00:50:52.257 --> 00:50:54.340
really hard to deal with
these [INAUDIBLE] assets.

00:50:54.340 --> 00:50:54.590
DOMINIC DENICOLA:
There's a difference

00:50:54.590 --> 00:50:55.673
between metadata and data.

00:50:55.673 --> 00:50:57.824
I think this is data; I
don't think it's metadata.

00:50:57.824 --> 00:50:59.740
KYLE SIMPSON: But we
need to talk specifically

00:50:59.740 --> 00:51:03.080
about why CSS and HTML
aren't as well suited

00:51:03.080 --> 00:51:04.270
for this as JavaScript is.

00:51:04.270 --> 00:51:05.895
LAURIE VOSS: So you
touched-- so, Dave,

00:51:05.895 --> 00:51:07.100
you touched on this earlier.

00:51:07.100 --> 00:51:10.110
The fundamental
problem of CSS and HTML

00:51:10.110 --> 00:51:11.800
as a package
manager and what npm

00:51:11.800 --> 00:51:17.030
should do it if it decides
to support CSS and HTML is

00:51:17.030 --> 00:51:23.040
that you can't use node module
semantics to resolve conflicts.

00:51:23.040 --> 00:51:27.206
Node modules can be put into
the node modules directory,

00:51:27.206 --> 00:51:29.080
and there's an algorithm
that works perfectly

00:51:29.080 --> 00:51:32.910
to make sure that conflicting
version don't conflict.

00:51:32.910 --> 00:51:35.320
And it's one of the
best things about node.

00:51:35.320 --> 00:51:37.510
And CSS and HTML
don't work that way.

00:51:37.510 --> 00:51:40.020
If you declare reset.css
and your HTML's

00:51:40.020 --> 00:51:42.786
looking for it in the route,
there can only be one of those.

00:51:42.786 --> 00:51:44.160
And as a package
manager you have

00:51:44.160 --> 00:51:47.841
to make the decision is the
behavior that my users expect,

00:51:47.841 --> 00:51:49.340
is the thing that
we should be doing

00:51:49.340 --> 00:51:52.110
saying that if you try to
install two packages that

00:51:52.110 --> 00:51:54.670
declare the same asset,
should they conflict?

00:51:54.670 --> 00:51:55.430
Should I die?

00:51:55.430 --> 00:51:56.620
Should I stop?

00:51:56.620 --> 00:52:00.140
Or should I say that there's
some other-- you know,

00:52:00.140 --> 00:52:01.816
I do some crazy
rewrite so that they

00:52:01.816 --> 00:52:02.940
can exist at the same time.

00:52:02.940 --> 00:52:04.731
And that I go down into
the HTML, and like,

00:52:04.731 --> 00:52:07.910
you spiral away into this
very complicated world.

00:52:07.910 --> 00:52:13.294
DAVID BECK: You're assuming
that one, that npm or-- you're

00:52:13.294 --> 00:52:14.960
assuming things about
the build process.

00:52:14.960 --> 00:52:17.180
That namespace doesn't
have to be flat

00:52:17.180 --> 00:52:21.520
so that there's only
one space for reset.css.

00:52:21.520 --> 00:52:22.437
It doesn't have to be.

00:52:22.437 --> 00:52:23.853
And I don't think
that's something

00:52:23.853 --> 00:52:25.363
that npm needs to
get involved in.

00:52:25.363 --> 00:52:26.650
I think it's better
that it doesn't.

00:52:26.650 --> 00:52:27.900
KYLE SIMPSON: Well, that's
a lot more intrusive

00:52:27.900 --> 00:52:29.316
to the development
process, right?

00:52:29.316 --> 00:52:31.970
Because that's how
you decide to put

00:52:31.970 --> 00:52:34.035
your IDs in your CSS or
[INAUDIBLE] and things

00:52:34.035 --> 00:52:34.350
like that.

00:52:34.350 --> 00:52:35.058
DAVID BECK: Yeah.

00:52:35.058 --> 00:52:37.876
There are conflicts
in semantics of CSS,

00:52:37.876 --> 00:52:39.250
and, yeah, those
are unavoidable.

00:52:39.250 --> 00:52:41.632
There are two files that
declare the same class name

00:52:41.632 --> 00:52:43.340
and they target the
same element and they

00:52:43.340 --> 00:52:45.034
target in different
ways, your web page

00:52:45.034 --> 00:52:46.200
is going to look screwed up.

00:52:46.200 --> 00:52:47.835
But that's the way it is.

00:52:47.835 --> 00:52:48.960
There's no way to solve it.

00:52:48.960 --> 00:52:50.390
MATT MILLER: And what
about just providing--

00:52:50.390 --> 00:52:50.980
DAVID BECK: It's like
peer dependencies.

00:52:50.980 --> 00:52:53.770
It's like a little bit
of evil, but it's OK.

00:52:53.770 --> 00:52:55.702
MATT MILLER: It's a
little bit like you said.

00:52:55.702 --> 00:52:57.910
I think, like, the biggest
indicator is your web site

00:52:57.910 --> 00:52:58.910
looks screwed up, right?

00:52:58.910 --> 00:53:02.540
And so I think how do you
resolve this screwed up state?

00:53:02.540 --> 00:53:06.900
I think, like, maybe better
tooling might be the way to go.

00:53:06.900 --> 00:53:09.810
You say, like, duplicates--
npm duplicates or something

00:53:09.810 --> 00:53:10.310
like that.

00:53:10.310 --> 00:53:12.450
And you notice, oh,
there's two resets.

00:53:12.450 --> 00:53:14.150
Or, oh, there's two
bootstraps here.

00:53:14.150 --> 00:53:17.870
Now I have to go investigate and
figure out what the issue is.

00:53:17.870 --> 00:53:18.470
I don't know.

00:53:18.470 --> 00:53:20.261
DAVID BECK: I don't
think the conflicts are

00:53:20.261 --> 00:53:22.390
going to be that extensive.

00:53:22.390 --> 00:53:25.420
I feel like the packages that
do a poor job of targeting--

00:53:25.420 --> 00:53:28.050
I mean, bootstrap, I think,
is a slightly different thing.

00:53:28.050 --> 00:53:29.900
I don't really
think that bootstrap

00:53:29.900 --> 00:53:32.690
should be handled inside
of npm anyways, being CSS.

00:53:32.690 --> 00:53:36.700
But if you have a
JavaScript component

00:53:36.700 --> 00:53:38.326
the targets a
specific CSS element

00:53:38.326 --> 00:53:41.357
and it does it badly, in
a way that it conflicts

00:53:41.357 --> 00:53:43.940
with other stuff, then it's not
going to get very good ratings

00:53:43.940 --> 00:53:47.190
and hopefully not many people
will use it and you know--

00:53:47.190 --> 00:53:47.970
KYLE SIMPSON: OK.

00:53:47.970 --> 00:53:48.465
Well, that's a wrap.

00:53:48.465 --> 00:53:49.640
I appreciate all the panelists.

00:53:49.640 --> 00:53:50.710
I just want to remind
you again we're

00:53:50.710 --> 00:53:52.340
going to have the breakout,
and the big question

00:53:52.340 --> 00:53:54.590
that we're going to tackle there
is what happens when somebody

00:53:54.590 --> 00:53:56.544
compromises one of these
packets repositories?

00:53:56.544 --> 00:53:57.960
So come and check
us out in there.

00:53:57.960 --> 00:53:59.251
All right, thank you very much.

00:53:59.251 --> 00:54:00.830
Appreciate it.

