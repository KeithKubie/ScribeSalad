WEBVTT
Kind: captions
Language: en

00:00:00.420 --> 00:00:04.830
Arithmetic operations on arrays
are always applied element wise.

00:00:04.830 --> 00:00:08.170
Let's start with simple
multiplication operation.

00:00:08.170 --> 00:00:12.880
Here we define a simple array so
that we can easily track the changes.

00:00:12.880 --> 00:00:15.780
This will multiply each element by 2.

00:00:15.780 --> 00:00:17.250
Let's check the output.

00:00:18.480 --> 00:00:22.680
When using arithmetic operation,
a new array is created and

00:00:22.680 --> 00:00:24.960
the values are stored in that array.

00:00:24.960 --> 00:00:29.220
So our original array a still
holds the same values.

00:00:29.220 --> 00:00:34.570
And this is our new array which we
get after multiplying array a by two.

00:00:34.570 --> 00:00:37.780
Observe that,
it is element wise multiplication.

00:00:37.780 --> 00:00:39.550
Let's try division.

00:00:39.550 --> 00:00:44.610
Here we use the division operation to
divide each element of array a by two.

00:00:44.610 --> 00:00:46.510
Let's check the output.

00:00:46.510 --> 00:00:49.043
Observe that, when you divide 1 by 2,

00:00:49.043 --> 00:00:51.980
you get a value 0 over
here instead of 0.5.

00:00:51.980 --> 00:00:58.070
This is because both the array and
the divisor are integers.

00:00:58.070 --> 00:01:03.430
If we were to do 2.0 instead of 2,
you will get float values.

00:01:03.430 --> 00:01:07.070
Keep this point in mind before
performing division in general.

00:01:07.070 --> 00:01:11.780
That is int divided by int will
give you an integer output.

00:01:11.780 --> 00:01:15.050
To get float values,
you need at least, the numerator or

00:01:15.050 --> 00:01:17.780
the denominator to be a float value.

00:01:17.780 --> 00:01:19.750
Let's check the output.

00:01:19.750 --> 00:01:24.580
Observe that, we could successfully get
a floating point value instead of 0.

00:01:24.580 --> 00:01:27.670
How about arithmetic
operation using two arrays?

00:01:27.670 --> 00:01:29.700
We will start with addition.

00:01:29.700 --> 00:01:33.130
We create another array
b with these values.

00:01:33.130 --> 00:01:37.590
Now, let's just add a and
b using the plus operator.

00:01:37.590 --> 00:01:40.460
As mentioned, this is element wise.

00:01:40.460 --> 00:01:42.838
This is our new arraya plus b.

00:01:42.838 --> 00:01:46.900
One important thing to note
here is that the shape of a and

00:01:46.900 --> 00:01:53.080
b should be similar before the operation
a plus b, else it will throw error.

00:01:53.080 --> 00:01:56.670
Similar to the addition,
you can perform subtraction.

00:01:56.670 --> 00:01:59.800
Now, let's move ahead with
multiplying two arrays.

00:01:59.800 --> 00:02:03.540
This is interesting, because unlike
other many metrics languages

00:02:03.540 --> 00:02:07.290
multiplication operator
when used with two array

00:02:07.290 --> 00:02:12.240
will not give you metric product, but
will do element wise multiplication.

00:02:12.240 --> 00:02:15.740
That is,
element at position 0,0 in array

00:02:15.740 --> 00:02:20.381
a is multiplied only with
the element at position 0,0 in b.

00:02:21.600 --> 00:02:24.540
Let's print the multiplication
of matrix a and b.

00:02:25.680 --> 00:02:28.640
Can you also element
wise multiplication?

00:02:28.640 --> 00:02:32.790
But the next question would be,
what about matrix multiplication?

00:02:32.790 --> 00:02:34.240
How do you achieve that?

00:02:34.240 --> 00:02:36.710
Like, for everything,
Num Pi has a function.

00:02:36.710 --> 00:02:40.790
It has function called dot,
which performs matrix multiplication.

00:02:40.790 --> 00:02:44.480
Similar to multiplication,
division of two arrays can be performed.

00:02:45.490 --> 00:02:49.300
Just include division of
operators between the two arrays.

00:02:49.300 --> 00:02:50.360
Let's check the output.

00:02:51.910 --> 00:02:54.150
As seen before, since array a and

00:02:54.150 --> 00:02:59.680
b are indigenous, we get the final array
in the form of indigenous as well.

00:02:59.680 --> 00:03:04.530
If you want to see floating values,
convert one of the arrays to float.

00:03:04.530 --> 00:03:06.140
Well, that's all for now.

00:03:06.140 --> 00:03:06.890
Keep practicing.

