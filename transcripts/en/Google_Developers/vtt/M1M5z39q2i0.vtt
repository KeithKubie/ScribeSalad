WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.536
[MUSIC PLAYING]

00:00:07.462 --> 00:00:08.347
Hi, I'm Shannon.

00:00:08.347 --> 00:00:10.930
I'm going to talk to you about
how to draw fast on mobile GPUs

00:00:10.930 --> 00:00:13.670
with Vulcan.

00:00:13.670 --> 00:00:15.149
So what do I mean by mobile?

00:00:15.149 --> 00:00:17.690
Most of the time when people
say mobile GPU, what they really

00:00:17.690 --> 00:00:19.190
mean is a tile-based GPU.

00:00:19.190 --> 00:00:22.254
Not all mobile GPUs are
tile-based, but most are.

00:00:22.254 --> 00:00:24.670
This means that the render
target is split into separately

00:00:24.670 --> 00:00:27.980
rendered tiles, so the GPU
can keep the resources needed

00:00:27.980 --> 00:00:31.700
to render a single tile stored
in on-chip memory, which

00:00:31.700 --> 00:00:35.180
is fast and inexpensive
power-wise to access.

00:00:35.180 --> 00:00:38.000
The flip side of this is that
bandwidth for reading off-chip

00:00:38.000 --> 00:00:39.520
is limited.

00:00:39.520 --> 00:00:42.360
So if you're familiar
with desktop rendering,

00:00:42.360 --> 00:00:44.450
you may know more about
immediate renders.

00:00:44.450 --> 00:00:46.767
Those work in a fairly
straightforward manner.

00:00:46.767 --> 00:00:48.850
You describe your scene
as a series of draw calls,

00:00:48.850 --> 00:00:52.100
draw me triangle 1,
2, 3, and the GPU

00:00:52.100 --> 00:00:54.450
receives these draw
calls and executes them

00:00:54.450 --> 00:00:57.380
as they're received,
committing each one out

00:00:57.380 --> 00:00:58.440
to the framebuffer.

00:00:58.440 --> 00:01:02.800
So your scene builds up
one draw all at a time.

00:01:02.800 --> 00:01:05.310
On the flip side,
tiling renderers

00:01:05.310 --> 00:01:06.930
are a little more complicated.

00:01:06.930 --> 00:01:09.390
You still describe your scene
as a series of draw calls,

00:01:09.390 --> 00:01:11.680
but the GPU, rather
than executing them when

00:01:11.680 --> 00:01:13.720
it receives them, bins them.

00:01:13.720 --> 00:01:15.720
This means that it's
keeping track of which draw

00:01:15.720 --> 00:01:17.640
calls affect which tiles.

00:01:17.640 --> 00:01:20.110
When you finished
describing your scene,

00:01:20.110 --> 00:01:22.680
then it executes the
list of draw calls

00:01:22.680 --> 00:01:25.560
affecting a single tile and
then commits the results

00:01:25.560 --> 00:01:28.310
to the framebuffer before
moving on to another tile,

00:01:28.310 --> 00:01:32.140
so your scene builds
up one tile at a time.

00:01:32.140 --> 00:01:34.860
This gets interesting when it
intersects with multiple paths

00:01:34.860 --> 00:01:36.182
rendering techniques.

00:01:36.182 --> 00:01:37.640
These are used for
a lot of things,

00:01:37.640 --> 00:01:40.510
one of the most obvious being
post-processing effects.

00:01:40.510 --> 00:01:42.840
There's stuff like tone
mapping, exposure control,

00:01:42.840 --> 00:01:45.960
and HDR that essentially
act as color filters.

00:01:45.960 --> 00:01:47.610
You render your
scene in one pass,

00:01:47.610 --> 00:01:50.690
and then in a subsequent pass,
you apply a filter to it,

00:01:50.690 --> 00:01:52.680
using one pixel from
the previous pass

00:01:52.680 --> 00:01:55.130
to determine the output
for the current pass.

00:01:55.130 --> 00:01:57.240
There are also
post-processing effects

00:01:57.240 --> 00:01:58.610
which use multiple pixels.

00:01:58.610 --> 00:02:00.540
They need information
about neighboring pixels

00:02:00.540 --> 00:02:03.810
to determine the current
pixel of the subsequent pass,

00:02:03.810 --> 00:02:07.570
like blur, bloom,
and focus control.

00:02:07.570 --> 00:02:09.070
There's also deferred
shading, where

00:02:09.070 --> 00:02:12.910
you're rendering a lot of
material data out into buffers

00:02:12.910 --> 00:02:15.530
and then using that to render
your scene in another pass.

00:02:15.530 --> 00:02:17.200
And this has been
particularly painful

00:02:17.200 --> 00:02:19.500
for mobile devices because
of that bandwidth and memory

00:02:19.500 --> 00:02:20.227
pressure.

00:02:20.227 --> 00:02:21.810
There's also volumetric
effects, where

00:02:21.810 --> 00:02:24.830
you may want to accumulate
things like participating media

00:02:24.830 --> 00:02:27.890
across multiple passes.

00:02:27.890 --> 00:02:29.980
So what this looks like
on a tiling render,

00:02:29.980 --> 00:02:32.380
without the Vulcan
multi-pass mechanism,

00:02:32.380 --> 00:02:35.840
is that for each pass, you
have to render each tile

00:02:35.840 --> 00:02:38.250
and commit the results
to the framebuffer.

00:02:38.250 --> 00:02:42.120
Then later passes
must reload that data,

00:02:42.120 --> 00:02:45.440
loading back from that
expensive off-chip memory.

00:02:45.440 --> 00:02:50.070
Multi-sampling, MSAA,
multiplies this off-chip cost.

00:02:50.070 --> 00:02:52.030
Because rather than
a single pixel,

00:02:52.030 --> 00:02:54.990
you were having to
commit multiple samples

00:02:54.990 --> 00:02:56.210
to off-chip memory.

00:02:56.210 --> 00:02:58.140
This adds up incredibly quickly.

00:02:58.140 --> 00:03:02.242
So Vulcan adds the multi-pass
mechanism directly to the API.

00:03:02.242 --> 00:03:04.200
This allows you to describe
all of those passes

00:03:04.200 --> 00:03:06.280
as a series of sub-passes.

00:03:06.280 --> 00:03:08.010
That means that
for each tile, you

00:03:08.010 --> 00:03:10.470
can render all of the
sub-passes before moving on

00:03:10.470 --> 00:03:11.600
to the next tile.

00:03:11.600 --> 00:03:13.920
This allows relevant
data to stay on chip.

00:03:13.920 --> 00:03:17.120
And, as an added bonus, you
can resolve multi-sample

00:03:17.120 --> 00:03:20.430
after the last sub-pass and
store only the single pixel

00:03:20.430 --> 00:03:23.060
resolved result.

00:03:23.060 --> 00:03:24.929
So there are some tips
for using this well.

00:03:24.929 --> 00:03:26.970
First, you want to make
sure that the attachments

00:03:26.970 --> 00:03:29.470
to your framebuffer have the
load-and-store disposition set

00:03:29.470 --> 00:03:30.250
correctly.

00:03:30.250 --> 00:03:33.410
Basically, you don't want to use
load-op-load or store-op-store,

00:03:33.410 --> 00:03:35.160
unless you actually
need to load or store.

00:03:35.160 --> 00:03:37.740
Otherwise you're paying
overhead that you don't need to.

00:03:37.740 --> 00:03:39.980
And you can use transient
attachment for data

00:03:39.980 --> 00:03:42.750
that you never store, like
the traditional use of a depth

00:03:42.750 --> 00:03:46.240
buffer, in order to avoid
allocating any off-chip memory

00:03:46.240 --> 00:03:48.200
to store them.

00:03:48.200 --> 00:03:50.570
Also, you want to set your
dependencies when using

00:03:50.570 --> 00:03:52.329
this mechanism as by region.

00:03:52.329 --> 00:03:54.620
Otherwise, by default, they're
considered to be global,

00:03:54.620 --> 00:03:57.470
and you have to wait for all of
the pixels of the previous pass

00:03:57.470 --> 00:04:00.390
to complete before
beginning your current pass.

00:04:00.390 --> 00:04:02.460
That defeats the purpose.

00:04:02.460 --> 00:04:05.690
And, for now, if you're
using this mechanism,

00:04:05.690 --> 00:04:08.770
you can only benefit
if your sub-pass

00:04:08.770 --> 00:04:11.240
needs to access a single
pixel from the prior pass.

00:04:11.240 --> 00:04:13.560
Otherwise it's not by region.

00:04:13.560 --> 00:04:15.635
So blur and bloom
can't benefit yet.

00:04:15.635 --> 00:04:17.510
There's is room for this
to change in the API

00:04:17.510 --> 00:04:19.529
in the future.

00:04:19.529 --> 00:04:21.750
The upside is this is efficient.

00:04:21.750 --> 00:04:24.490
Tiling renderers can save
clock cycles and power

00:04:24.490 --> 00:04:26.980
by avoiding those off-chip
read/writes, which

00:04:26.980 --> 00:04:29.820
opens the door for rendering
techniques that were previously

00:04:29.820 --> 00:04:32.712
thought too costly
on mobile devices.

00:04:32.712 --> 00:04:34.920
But mobile devices aren't
the only ones that benefit.

00:04:34.920 --> 00:04:36.560
Immediate renderers
can still do things

00:04:36.560 --> 00:04:39.440
like avoid allocating
memory outside of a cache

00:04:39.440 --> 00:04:41.250
for transient attachments.

00:04:41.250 --> 00:04:43.500
So armed with this knowledge,
I hope you get out there

00:04:43.500 --> 00:04:44.930
and you draw things fast.

00:04:44.930 --> 00:04:45.530
Thanks.

00:04:45.530 --> 00:04:49.180
[MUSIC PLAYING]

