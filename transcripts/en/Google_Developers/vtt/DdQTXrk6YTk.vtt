WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.398
[MUSIC PLAYING]

00:00:01.398 --> 00:00:03.600
ANDY ZMOLEK: Let me start
with a quick survey.

00:00:03.600 --> 00:00:07.690
How many of you have
applications that require

00:00:07.690 --> 00:00:11.820
enterprise end users to log in?

00:00:11.820 --> 00:00:12.960
Quite a few?

00:00:12.960 --> 00:00:15.809
How many of you
are using WebView

00:00:15.809 --> 00:00:17.300
to help accomplish that?

00:00:17.300 --> 00:00:19.975
All right, this session
is for you especially.

00:00:23.360 --> 00:00:25.030
I'm Andy Zmolek.

00:00:25.030 --> 00:00:29.000
I am ecosystem cat herder
on the Android team.

00:00:29.000 --> 00:00:31.410
I work with a lot
of different Android

00:00:31.410 --> 00:00:34.030
for Work ecosystem partners.

00:00:34.030 --> 00:00:37.160
And I also work very closely
with the Identity team

00:00:37.160 --> 00:00:38.110
at Google.

00:00:38.110 --> 00:00:41.370
And so I'm going to let William
introduce himself and kick this

00:00:41.370 --> 00:00:42.630
off.

00:00:42.630 --> 00:00:43.880
WILLIAM DENNISS: Hi, everyone.

00:00:43.880 --> 00:00:46.530
So I'm William Denniss, product
manager on the Identity team.

00:00:46.530 --> 00:00:48.770
And one of the goals
of Identity at Google

00:00:48.770 --> 00:00:51.490
is to build a kind
of consistent model

00:00:51.490 --> 00:00:54.432
of the user and their
devices, and use that

00:00:54.432 --> 00:00:56.640
so that we don't have to
reauthenticate them quite as

00:00:56.640 --> 00:00:59.090
frequently.

00:00:59.090 --> 00:01:01.820
You may notice that the Google
session on your Android device

00:01:01.820 --> 00:01:03.840
has an incredibly
long lived session.

00:01:03.840 --> 00:01:06.130
And you almost never have
to reauthenticate to Google

00:01:06.130 --> 00:01:08.300
if you need to sign into
something like, say, Stack

00:01:08.300 --> 00:01:09.170
Overflow.

00:01:09.170 --> 00:01:11.160
And that's a result
of the efforts

00:01:11.160 --> 00:01:13.000
that the Identity team
have been working on.

00:01:13.000 --> 00:01:16.530
And so with the
consumer use cases

00:01:16.530 --> 00:01:19.524
fairly well under control, we're
not turning a bit of attention

00:01:19.524 --> 00:01:20.940
to the enterprise
use cases to see

00:01:20.940 --> 00:01:23.620
what we can do to improve
the user experience there.

00:01:27.710 --> 00:01:30.670
So the typical enterprise
user will see a login screen

00:01:30.670 --> 00:01:35.070
like these several times,
or fairly frequently.

00:01:35.070 --> 00:01:37.980
And they'll need to sign in with
the same credentials, typically

00:01:37.980 --> 00:01:41.570
their corporate credentials,
into each of those apps.

00:01:41.570 --> 00:01:43.090
And quite often
these apps are using

00:01:43.090 --> 00:01:47.240
WebView as a way to extract
the difficulty of integrating

00:01:47.240 --> 00:01:50.080
with a lot of different IDPs.

00:01:50.080 --> 00:01:52.080
ANDY ZMOLEK: Identity
providers for those of you

00:01:52.080 --> 00:01:54.110
that aren't Identity guys yet.

00:01:54.110 --> 00:01:56.220
WILLIAM DENNISS: Yes, thank you.

00:01:56.220 --> 00:01:59.320
So using the WebView,
the user will log in

00:01:59.320 --> 00:02:00.970
with their same
corporate credentials,

00:02:00.970 --> 00:02:03.156
but they'll be doing
it multiple times.

00:02:03.156 --> 00:02:06.950
And what I don't like about that
is that to me it doesn't really

00:02:06.950 --> 00:02:09.925
provide single sign on, or at
least not the user friendly

00:02:09.925 --> 00:02:12.050
definition of single sign
on which I prefer to use,

00:02:12.050 --> 00:02:14.779
and that is that the
user only signs in once,

00:02:14.779 --> 00:02:17.070
as opposed to the alternative
definition of single sign

00:02:17.070 --> 00:02:19.340
in where the user is
signing on multiple times

00:02:19.340 --> 00:02:21.790
but using the same credentials.

00:02:21.790 --> 00:02:26.270
So certainly that is still
better than what came before.

00:02:26.270 --> 00:02:29.210
But I think we can
do better still.

00:02:29.210 --> 00:02:31.930
The other problem with
using WebView for all this

00:02:31.930 --> 00:02:35.110
is that there's not a great
security model in that the host

00:02:35.110 --> 00:02:38.550
app can actually
extract the cookies

00:02:38.550 --> 00:02:42.890
or inject JavaScript and do
basically whatever it wants.

00:02:42.890 --> 00:02:45.860
And this basically violates the
principle of least privilege

00:02:45.860 --> 00:02:48.910
because the host app is getting
a more powerful credential

00:02:48.910 --> 00:02:52.104
than what it really needs.

00:02:52.104 --> 00:02:54.520
And you may be thinking, well,
that's not a problem for me

00:02:54.520 --> 00:02:56.500
because I trust my developers.

00:02:56.500 --> 00:02:58.390
They're not going to be
stealing the cookies.

00:02:58.390 --> 00:03:00.431
They're not going to be
injecting any JavaScript.

00:03:00.431 --> 00:03:03.540
And that is certainly
true for a lot of people.

00:03:03.540 --> 00:03:06.070
We had these enterprise
contracts and developers

00:03:06.070 --> 00:03:06.600
get paid.

00:03:06.600 --> 00:03:08.922
And then no ones trying
to do anything bad.

00:03:08.922 --> 00:03:10.380
But we've actually
seen in the wild

00:03:10.380 --> 00:03:14.250
a few times where an honest
developer has inadvertently

00:03:14.250 --> 00:03:17.730
run into problems just by
including a third party SDK.

00:03:17.730 --> 00:03:20.320
And the problem here is that
like any of the third party

00:03:20.320 --> 00:03:23.090
SDKs that they include could
be doing something bad as well.

00:03:23.090 --> 00:03:26.650
And so that trust necessarily
goes to every single SDK

00:03:26.650 --> 00:03:28.470
that they're using.

00:03:28.470 --> 00:03:32.062
And the other thing is maybe you
do have less trusted developers

00:03:32.062 --> 00:03:34.520
and maybe you don't want to
audit every single line of code

00:03:34.520 --> 00:03:35.480
in your app.

00:03:35.480 --> 00:03:38.400
So this model does
suffer a few security

00:03:38.400 --> 00:03:40.810
problems using WebView.

00:03:40.810 --> 00:03:44.160
So now Andy's going to talk
about a new feature in Android

00:03:44.160 --> 00:03:46.960
that looks like it could be set
to replace WebView as the way

00:03:46.960 --> 00:03:49.384
to get people signed in.

00:03:49.384 --> 00:03:50.800
ANDY ZMOLEK: And
one of the things

00:03:50.800 --> 00:03:53.410
we want to reinforce
throughout this session

00:03:53.410 --> 00:03:55.550
is we're not talking
about Google identity

00:03:55.550 --> 00:03:57.880
here, although it works
with Google identity.

00:03:57.880 --> 00:04:00.400
This has nothing
to do with using

00:04:00.400 --> 00:04:03.550
Google Identity in your
SaaS or your SaaS app

00:04:03.550 --> 00:04:06.800
or signing on an enterprise
user with a Google identity.

00:04:06.800 --> 00:04:08.900
Everything that we're
going to show you

00:04:08.900 --> 00:04:14.210
is going to work with standard
OAuth and standard OpenID

00:04:14.210 --> 00:04:15.670
Connect.

00:04:15.670 --> 00:04:17.940
And we'll get into
more details here.

00:04:17.940 --> 00:04:21.680
But what I want to start
with is, what's a custom tab,

00:04:21.680 --> 00:04:24.800
and why should you care
about using a custom tab

00:04:24.800 --> 00:04:27.140
when you're doing a sign in?

00:04:27.140 --> 00:04:31.460
First of all, you'll notice
that what we've got here

00:04:31.460 --> 00:04:33.239
is at the very top--

00:04:33.239 --> 00:04:34.530
WILLIAM DENNISS: Middle button.

00:04:34.530 --> 00:04:36.330
ANDY ZMOLEK: Middle
button, all right.

00:04:36.330 --> 00:04:38.830
At the very top, you
have an address bar.

00:04:38.830 --> 00:04:41.510
That address bar is locked.

00:04:41.510 --> 00:04:44.530
So the user can see
where they're going,

00:04:44.530 --> 00:04:47.750
but they can't change
the destination.

00:04:47.750 --> 00:04:50.370
The other thing
here is everything

00:04:50.370 --> 00:04:55.380
that you see inside here
makes use of what's already

00:04:55.380 --> 00:04:59.420
existing in the shared cookie
jar in the Chrome system

00:04:59.420 --> 00:05:01.570
browser.

00:05:01.570 --> 00:05:03.419
So what you're going
to see is completely

00:05:03.419 --> 00:05:04.460
reflected by the content.

00:05:04.460 --> 00:05:06.960
You'll see this in
the demos that we do.

00:05:06.960 --> 00:05:11.450
The cookie state is something
you can take advantage of.

00:05:11.450 --> 00:05:14.270
That's not something you
can do with a WebView.

00:05:14.270 --> 00:05:17.490
And then the last and
most important thing

00:05:17.490 --> 00:05:22.490
is this is not requiring an
app flip to get to Chrome.

00:05:22.490 --> 00:05:26.645
It's an activity that shows up
within the native application.

00:05:30.260 --> 00:05:35.750
So there's a particular Android
API even for this that works.

00:05:35.750 --> 00:05:39.030
There's a support library,
literally goes all the way back

00:05:39.030 --> 00:05:40.110
to Android 1.6.

00:05:40.110 --> 00:05:43.770
So let's suppose
that you happen to be

00:05:43.770 --> 00:05:49.860
the developer of a alternative,
non-Chrome browser.

00:05:49.860 --> 00:05:50.480
Guess what?

00:05:50.480 --> 00:05:54.230
You can do exactly
this same capability

00:05:54.230 --> 00:05:59.840
and do custom tab for developers
to use and go all the way back

00:05:59.840 --> 00:06:04.730
to older versions of Android
and still get this capability.

00:06:04.730 --> 00:06:06.870
So there's an example
implementation here.

00:06:06.870 --> 00:06:08.470
There's an example client.

00:06:08.470 --> 00:06:12.730
And basically this is
everything you need.

00:06:12.730 --> 00:06:18.610
Let's say if you're an OEM
and you've got your own web

00:06:18.610 --> 00:06:21.610
app that's delivered
as part of your phone,

00:06:21.610 --> 00:06:23.825
you can use these to get
the same capabilities.

00:06:27.680 --> 00:06:32.310
So Chrome Custom Tabs
came out in Chrome 45.

00:06:32.310 --> 00:06:35.070
They're a few versions back now.

00:06:35.070 --> 00:06:38.380
You've probably seen
it in applications

00:06:38.380 --> 00:06:42.580
where instead of
using WebView, you're

00:06:42.580 --> 00:06:46.870
now seeing something
that actually knows

00:06:46.870 --> 00:06:51.070
your authentication state
or knows who you are,

00:06:51.070 --> 00:06:52.340
when you come in.

00:06:52.340 --> 00:06:55.600
In many cases it wasn't done
for authentication purposes,

00:06:55.600 --> 00:06:57.370
it was done so the
user experience

00:06:57.370 --> 00:06:58.810
was a little bit cleaner.

00:06:58.810 --> 00:07:03.860
Now the great thing
about this-- there we go.

00:07:03.860 --> 00:07:06.770
Take a look at how much
faster Chrome Custom

00:07:06.770 --> 00:07:12.170
Tabs are than either WebView
or the system browser.

00:07:12.170 --> 00:07:14.080
Even if you just
wanted to improve

00:07:14.080 --> 00:07:17.240
the performance, the rendering
performance of what's

00:07:17.240 --> 00:07:20.850
happening, Chrome Custom
Tabs are an awesome solution.

00:07:20.850 --> 00:07:25.040
And there's great videos
on there for app developers

00:07:25.040 --> 00:07:29.720
that want to use Chrome Custom
Tabs for other things as well.

00:07:29.720 --> 00:07:32.990
But the important takeaway
here for our purposes today

00:07:32.990 --> 00:07:36.590
is they're fast,
they're secure, and they

00:07:36.590 --> 00:07:40.790
go all the way back
to versions of Android

00:07:40.790 --> 00:07:45.070
that are-- actually we'll
get into a little bit more.

00:07:45.070 --> 00:07:50.190
Basically Jelly Bean and beyond
is supported specifically

00:07:50.190 --> 00:07:53.730
by the version of
Chrome, Chrome 45,

00:07:53.730 --> 00:07:57.710
that we'll be making use of.

00:07:57.710 --> 00:07:59.450
WILLIAM DENNISS: Cool.

00:07:59.450 --> 00:08:01.810
So let's talk about how we
can use this new Android

00:08:01.810 --> 00:08:05.340
feature to improve the
authentication experience

00:08:05.340 --> 00:08:08.380
for our users.

00:08:08.380 --> 00:08:10.550
And you'll probably
notice that I've

00:08:10.550 --> 00:08:11.890
put an iOS screen here as well.

00:08:11.890 --> 00:08:13.806
So everything I'm about
to talk about actually

00:08:13.806 --> 00:08:15.750
works on both Android
and iOS, although we'll

00:08:15.750 --> 00:08:18.620
be mostly showing the
Android demos in this talk.

00:08:18.620 --> 00:08:21.791
But that's good news if
you're a developer because one

00:08:21.791 --> 00:08:23.540
of the hardest things
about auth if you're

00:08:23.540 --> 00:08:26.110
dealing with a lot of
different authorization service

00:08:26.110 --> 00:08:28.310
or a lot of different
identity providers,

00:08:28.310 --> 00:08:30.310
you don't really want
have to convince everybody

00:08:30.310 --> 00:08:31.050
to make a change.

00:08:31.050 --> 00:08:33.724
And so the good thing
here is that regardless

00:08:33.724 --> 00:08:35.140
of what platform
your apps are on,

00:08:35.140 --> 00:08:36.351
you can use the same pattern.

00:08:36.351 --> 00:08:38.809
You won't have to kind of go
to the same identity providers

00:08:38.809 --> 00:08:40.610
twice.

00:08:40.610 --> 00:08:42.809
So let me run a quick
video of what the end user

00:08:42.809 --> 00:08:43.892
experience will look like.

00:08:52.360 --> 00:08:55.180
OK, so for this
example app, the user

00:08:55.180 --> 00:09:00.660
is signing in using PingFederate
as their authentication server.

00:09:00.660 --> 00:09:05.870
And the app has just launched a
Chrome Custom Tab with an OAuth

00:09:05.870 --> 00:09:07.960
2 authorization request.

00:09:07.960 --> 00:09:10.970
And in this case the user
does need to reauthenticate.

00:09:10.970 --> 00:09:13.490
But you will notice that the
user name was already there,

00:09:13.490 --> 00:09:16.786
probably from a
previous authentication.

00:09:16.786 --> 00:09:18.160
Once the user
authenticates, they

00:09:18.160 --> 00:09:20.100
can then approve the request.

00:09:20.100 --> 00:09:22.440
And the OAuth authorization
code is returned

00:09:22.440 --> 00:09:23.615
to the app via an Intent.

00:09:23.615 --> 00:09:26.250
The app can exchange
that for the access token

00:09:26.250 --> 00:09:29.600
and make an API call.

00:09:29.600 --> 00:09:32.690
All right, so we just going
to clear out the data here

00:09:32.690 --> 00:09:35.499
of the app to simulate the
user using a second app

00:09:35.499 --> 00:09:37.790
and take a look at what that
experience is going to be.

00:09:42.220 --> 00:09:44.940
So the second time the user
logs into a different app,

00:09:44.940 --> 00:09:46.981
you'll notice that they're
already authenticated.

00:09:46.981 --> 00:09:49.360
And that's due to the shared
cookie state with Chrome.

00:09:49.360 --> 00:09:52.120
So it's a simple tap, no
password, no reauthentication.

00:09:52.120 --> 00:09:53.280
They can get back in.

00:09:53.280 --> 00:09:54.975
And we can make that API call.

00:09:54.975 --> 00:09:57.680
So that was PingFederate
as an authorization server.

00:09:57.680 --> 00:10:00.370
Now let's try Google.

00:10:00.370 --> 00:10:01.840
Basically it's
the same approach.

00:10:01.840 --> 00:10:03.298
The user's already
signed in thanks

00:10:03.298 --> 00:10:05.245
to the account on
the Android device.

00:10:05.245 --> 00:10:09.227
We can approve the request,
get the authorization code,

00:10:09.227 --> 00:10:11.560
exchange that for an access
token, and make an API call.

00:10:14.290 --> 00:10:17.780
All right, what about something
a little bit more complicated?

00:10:17.780 --> 00:10:20.029
So here we're going to
open PingFederate again,

00:10:20.029 --> 00:10:21.820
but this time we're
going to actually chain

00:10:21.820 --> 00:10:25.310
the authorization and use
a different authentication

00:10:25.310 --> 00:10:27.420
provider, in this case Google.

00:10:27.420 --> 00:10:29.610
So PingFed has actually
redirected to Google

00:10:29.610 --> 00:10:32.560
to do the authentication,
which then responds.

00:10:32.560 --> 00:10:36.660
The user then approves the
request, and they're done.

00:10:36.660 --> 00:10:40.860
For completeness,
let's run this again,

00:10:40.860 --> 00:10:44.440
cleaning out the app data.

00:10:44.440 --> 00:10:46.720
So again, we open the
OAuth 2 authorization

00:10:46.720 --> 00:10:50.080
request to PingFed, but because
we have the saved cookie state,

00:10:50.080 --> 00:10:51.580
it knew it was
already using Google,

00:10:51.580 --> 00:10:52.954
so it's redirected
straight away.

00:10:52.954 --> 00:10:55.900
User's accepted the
request, and we're good.

00:11:00.690 --> 00:11:03.640
All right, so what
just happened?

00:11:03.640 --> 00:11:06.730
Basically the first time
the user needs to log in,

00:11:06.730 --> 00:11:08.970
they'll get the same login
screen that they used to.

00:11:08.970 --> 00:11:11.840
And they'll sign in once.

00:11:11.840 --> 00:11:14.370
But then on subsequent apps
that the user installs,

00:11:14.370 --> 00:11:17.710
they don't need to
repeat that sign on.

00:11:17.710 --> 00:11:20.600
And if you're dealing with a
reauthentication environment,

00:11:20.600 --> 00:11:23.670
something where you have
a short lived session.

00:11:23.670 --> 00:11:24.614
Maybe it's a day.

00:11:24.614 --> 00:11:25.530
Hopefully it's longer.

00:11:25.530 --> 00:11:29.180
But the good news there
is that even in that case,

00:11:29.180 --> 00:11:31.270
the user is still only
reauthenticating once.

00:11:31.270 --> 00:11:33.270
They don't have to keep
doing that for every app

00:11:33.270 --> 00:11:35.880
that they use.

00:11:35.880 --> 00:11:39.510
And those more complex chain
authed scenarios work as well.

00:11:39.510 --> 00:11:41.350
And we see these
quite a lot where

00:11:41.350 --> 00:11:44.250
you have various different
bits of middleware all

00:11:44.250 --> 00:11:46.856
doing their own thing.

00:11:46.856 --> 00:11:48.980
As far as the app is
concerned, all it really knows

00:11:48.980 --> 00:11:50.720
is that it's talking OAuth 2.

00:11:50.720 --> 00:11:53.224
It's opening a request and
it's waiting for an Intent.

00:11:53.224 --> 00:11:55.140
And everything else that
happens in the middle

00:11:55.140 --> 00:11:57.950
is actually just handled
by the browser in Chrome.

00:11:57.950 --> 00:12:01.800
The sky's the limit on what
you can do in the middle there.

00:12:01.800 --> 00:12:07.790
You can use second factor or you
can redirect anyway you want.

00:12:07.790 --> 00:12:10.020
And this pattern works with
any authorization server

00:12:10.020 --> 00:12:11.190
that supports native apps.

00:12:11.190 --> 00:12:12.731
And I'll get a little
bit more detail

00:12:12.731 --> 00:12:16.700
about what that actually means
in the next couple slides.

00:12:16.700 --> 00:12:20.250
Let's look at some
sequence diagrams.

00:12:20.250 --> 00:12:23.980
So this is the sequence
diagram for a typical SaaS app.

00:12:23.980 --> 00:12:26.340
And you'll see that an
optional step here, you

00:12:26.340 --> 00:12:28.480
can use the tools
that others have

00:12:28.480 --> 00:12:30.820
been talking about today to
push a manage configuration

00:12:30.820 --> 00:12:31.920
to the SaaS app.

00:12:31.920 --> 00:12:34.260
And you can provide things
like the tenant hint

00:12:34.260 --> 00:12:36.790
or the user hint in
that configuration.

00:12:36.790 --> 00:12:39.050
ANDY ZMOLEK: We should
point out that's optional.

00:12:39.050 --> 00:12:40.450
WILLIAM DENNISS: Yes.

00:12:40.450 --> 00:12:43.640
And the SaaS app then
does an OAuth request

00:12:43.640 --> 00:12:44.750
to the SaaS backend.

00:12:47.370 --> 00:12:49.370
From that point on, it's
effectively a black box

00:12:49.370 --> 00:12:51.380
as far as the app
developer is concerned.

00:12:51.380 --> 00:12:54.770
And the SaaS backend
will then typically

00:12:54.770 --> 00:12:58.070
redirect to an enterprise
authorization server,

00:12:58.070 --> 00:13:01.610
perform whatever it needs to do,
before responding with an OAuth

00:13:01.610 --> 00:13:04.130
response.

00:13:04.130 --> 00:13:06.167
The IT app case
is fairly similar,

00:13:06.167 --> 00:13:08.250
just a little bit simpler,
because the It app only

00:13:08.250 --> 00:13:11.900
has to talk to one IDP,
one identity provider.

00:13:11.900 --> 00:13:14.324
It can just load the
OAuth request directly

00:13:14.324 --> 00:13:15.490
to its authorization server.

00:13:15.490 --> 00:13:17.350
And again you have
that same black box.

00:13:17.350 --> 00:13:19.690
ANDY ZMOLEK: And typically
the developer in this case

00:13:19.690 --> 00:13:22.990
will be hard coding the identity
provider within their app,

00:13:22.990 --> 00:13:24.710
because there's only one.

00:13:24.710 --> 00:13:27.505
In the SaaS case,
the SaaS developer

00:13:27.505 --> 00:13:30.600
has got to deal with
an arbitrary number.

00:13:30.600 --> 00:13:33.700
And those specific
identity providers

00:13:33.700 --> 00:13:36.340
won't even be known
to the app beforehand.

00:13:36.340 --> 00:13:39.020
But the SaaS service
backend will know.

00:13:39.020 --> 00:13:41.700
WILLIAM DENNISS: Right.

00:13:41.700 --> 00:13:43.814
And so I've talked about
this black box of like,

00:13:43.814 --> 00:13:45.230
the app doesn't
really know what's

00:13:45.230 --> 00:13:50.610
happening in that authorization
happening in the Chrome Custom

00:13:50.610 --> 00:13:51.140
Tab.

00:13:51.140 --> 00:13:53.430
And one of the cool things
is that because it's

00:13:53.430 --> 00:13:56.260
a real browser, you get every
feature that the real browser

00:13:56.260 --> 00:13:59.320
has, such as mutual TLS.

00:13:59.320 --> 00:14:03.290
So if you're an EMM, you
can basically push that TLS

00:14:03.290 --> 00:14:05.100
certificate to the browser.

00:14:05.100 --> 00:14:06.740
And the app can
take advantage of it

00:14:06.740 --> 00:14:08.406
without the certificate
actually needing

00:14:08.406 --> 00:14:09.440
to be pushed to the app.

00:14:09.440 --> 00:14:11.440
And I think that's a really big
advantage because previously

00:14:11.440 --> 00:14:13.190
you may have to push that
certificate to every single one

00:14:13.190 --> 00:14:13.750
of the apps.

00:14:13.750 --> 00:14:16.400
And the apps will have
to understand it as well.

00:14:16.400 --> 00:14:18.570
And if that's only like
one or two customers,

00:14:18.570 --> 00:14:20.917
it can be a lot of work
and hard to justify.

00:14:20.917 --> 00:14:22.500
But this way because
it is a black box

00:14:22.500 --> 00:14:24.260
as far as the app
is concerned, you

00:14:24.260 --> 00:14:27.830
can build in all these
additional authentication

00:14:27.830 --> 00:14:29.810
things in that black box.

00:14:29.810 --> 00:14:32.170
And we actually discovered
some pretty cool yesterday,

00:14:32.170 --> 00:14:34.980
which is that FIDO-- if
you're heard of FIDO,

00:14:34.980 --> 00:14:38.305
the U2F standard, can also
work inside this custom tab

00:14:38.305 --> 00:14:39.120
black box as well.

00:14:39.120 --> 00:14:41.425
So really there are a lot
of cool things you can do.

00:14:41.425 --> 00:14:43.550
ANDY ZMOLEK: Before we
switch, I want to point out,

00:14:43.550 --> 00:14:45.660
if it's an end
device, the end user

00:14:45.660 --> 00:14:48.500
doesn't even have to
deal with this dialogue

00:14:48.500 --> 00:14:50.750
to be able to get that
certificate bound up within it.

00:14:50.750 --> 00:14:51.916
WILLIAM DENNISS: Good point.

00:14:51.916 --> 00:14:52.580
Thank you.

00:14:52.580 --> 00:14:55.860
Thanks for a good
screenshot though I guess.

00:14:55.860 --> 00:14:58.590
All right, so in terms of
support, as Andy mentioned,

00:14:58.590 --> 00:15:00.830
the custom tab itself is
available I think back

00:15:00.830 --> 00:15:03.270
to Android 1.6.

00:15:03.270 --> 00:15:05.440
But Chrome shipped
that in Chrome 45,

00:15:05.440 --> 00:15:08.840
which is present on
about 95% of devices.

00:15:08.840 --> 00:15:12.095
And the story for iOS
is pretty good as well.

00:15:12.095 --> 00:15:14.500
The important to note is
that even though there

00:15:14.500 --> 00:15:17.700
is a small percentage of users
that may not get the custom

00:15:17.700 --> 00:15:19.950
tab, there is a
universal fallback, which

00:15:19.950 --> 00:15:23.420
is that we can simply just open
the browser, the full browser,

00:15:23.420 --> 00:15:25.690
with that exact same
authorization request

00:15:25.690 --> 00:15:28.220
and wait for the exact
same Intent coming back.

00:15:28.220 --> 00:15:30.730
So 100% of users are supported.

00:15:30.730 --> 00:15:32.980
It's just that, say,
95% get that sort

00:15:32.980 --> 00:15:34.145
of improved experience.

00:15:36.920 --> 00:15:41.000
All right, so how do we help
you actually implement this?

00:15:41.000 --> 00:15:44.780
Well to start with, we have
a draft best current practice

00:15:44.780 --> 00:15:47.764
going through the ITF OAuth
working group right now.

00:15:47.764 --> 00:15:50.180
I'm a coauthor of the draft
along with John Bradley, who's

00:15:50.180 --> 00:15:51.940
in the audience today.

00:15:51.940 --> 00:15:56.020
And this best practice details
how you can, as a relying party

00:15:56.020 --> 00:15:59.800
or as an identity provider,
implement these best practices

00:15:59.800 --> 00:16:01.282
and do it correctly
and securely.

00:16:01.282 --> 00:16:02.990
ANDY ZMOLEK: It's
important to point out,

00:16:02.990 --> 00:16:05.380
this has been accepted
by the OAuth working

00:16:05.380 --> 00:16:07.690
group as an official
working group item.

00:16:07.690 --> 00:16:11.960
So this is not just two
guys writing a draft.

00:16:11.960 --> 00:16:14.880
This is actually the OAuth
working group taking this up.

00:16:14.880 --> 00:16:17.364
And we'll be publishing
this as a BCP.

00:16:17.364 --> 00:16:19.530
WILLIAM DENNISS: Hopefully
we'll get it out sometime

00:16:19.530 --> 00:16:20.539
later this year.

00:16:20.539 --> 00:16:23.080
And so what are the requirements
for an authorization server?

00:16:23.080 --> 00:16:25.080
Well, it's sort of
three main points here.

00:16:25.080 --> 00:16:28.100
The first is, don't assume that
the client can keep a secret.

00:16:28.100 --> 00:16:29.630
Now this is probably
an assumption

00:16:29.630 --> 00:16:31.736
that you're not making if
you're doing any kind of app

00:16:31.736 --> 00:16:32.410
authentication today.

00:16:32.410 --> 00:16:34.050
So that one's
probably pretty easy.

00:16:34.050 --> 00:16:36.130
The second is that you
need to support custom URI

00:16:36.130 --> 00:16:38.250
schemes for the OAuth redirect.

00:16:38.250 --> 00:16:39.950
Now the OAuth spec
itself actually

00:16:39.950 --> 00:16:42.460
just defines the redirect
URI as a URI, which

00:16:42.460 --> 00:16:44.800
could use any scheme.

00:16:44.800 --> 00:16:46.730
But a lot of people when
they implemented it,

00:16:46.730 --> 00:16:49.180
they sort of assumed that it
was an HTTPS redirect scheme.

00:16:49.180 --> 00:16:51.513
So in some cases you may need
to do a little bit of work

00:16:51.513 --> 00:16:53.330
on the authorization
server just to relax

00:16:53.330 --> 00:16:56.270
that requirement a little bit
and allow for any arbitrary

00:16:56.270 --> 00:16:57.630
scheme for the redirect.

00:16:57.630 --> 00:16:59.580
And finally, something
that we recommend

00:16:59.580 --> 00:17:02.470
is that you support PKCE,
which is called the Proof

00:17:02.470 --> 00:17:04.869
Key for Code Exchange.

00:17:04.869 --> 00:17:07.240
And that just adds a little
bit of extra protection

00:17:07.240 --> 00:17:09.380
in this interapp
communication environment

00:17:09.380 --> 00:17:11.880
where we're using Intents and
there's a potential for things

00:17:11.880 --> 00:17:12.825
to get intercepted.

00:17:12.825 --> 00:17:14.700
It's a fairly lightweight
extension to OAuth.

00:17:17.740 --> 00:17:19.880
All right, if you're
an app developer,

00:17:19.880 --> 00:17:23.430
we have even better new for
you, because the teams at Google

00:17:23.430 --> 00:17:25.760
have actually
contributed a reference

00:17:25.760 --> 00:17:27.839
library to the OpenID
Foundation, which

00:17:27.839 --> 00:17:29.160
we call AppAuth.

00:17:29.160 --> 00:17:32.190
And this reference library is
available on Android and iOS.

00:17:32.190 --> 00:17:35.470
And it completely implements the
best practice specifications.

00:17:35.470 --> 00:17:38.650
So it'll handle the
authorization request.

00:17:38.650 --> 00:17:40.480
It'll add in PKCE.

00:17:40.480 --> 00:17:42.437
It will do everything correctly.

00:17:42.437 --> 00:17:44.770
And one of the real benefits
of actually having our team

00:17:44.770 --> 00:17:46.700
provide this code,
particular on Android,

00:17:46.700 --> 00:17:50.360
is that we've taken care of some
of the complexities of using

00:17:50.360 --> 00:17:52.870
a browser to do
this type of flow.

00:17:52.870 --> 00:17:54.840
So for example, we're
going to check the system

00:17:54.840 --> 00:17:58.220
to see if the user has-- if
their default browser has

00:17:58.220 --> 00:17:59.497
custom tab support.

00:17:59.497 --> 00:18:01.580
And if it doesn't, then
we'll look for any browser

00:18:01.580 --> 00:18:02.940
that has custom tab support.

00:18:02.940 --> 00:18:04.315
And if there are
none, then we're

00:18:04.315 --> 00:18:07.100
looking down the list basically
until we find a suitable user

00:18:07.100 --> 00:18:10.120
agent to load the request in.

00:18:10.120 --> 00:18:11.590
And there is a
production example.

00:18:11.590 --> 00:18:14.760
So Google on iOS is a third
party, just like many of you

00:18:14.760 --> 00:18:16.210
are a third party on Android.

00:18:16.210 --> 00:18:18.600
And so we follow
these best practice

00:18:18.600 --> 00:18:21.080
for our own sign in API on iOS.

00:18:21.080 --> 00:18:23.660
And I think Facebook is doing
something similar as well.

00:18:23.660 --> 00:18:25.493
So if you want to see
some examples of these

00:18:25.493 --> 00:18:28.559
actually in production,
there's a couple today.

00:18:28.559 --> 00:18:30.475
And let's talk a bit
about the implementation.

00:18:33.376 --> 00:18:34.750
ANDY ZMOLEK: We
mentioned earlier

00:18:34.750 --> 00:18:38.590
that it's optional to use
managed configuration here.

00:18:38.590 --> 00:18:43.480
And let me explain how that's
done and why that's done.

00:18:43.480 --> 00:18:45.960
First of all, you're
probably used to,

00:18:45.960 --> 00:18:47.800
when you're signing
in to a SaaS app,

00:18:47.800 --> 00:18:51.020
putting your email address
in first, sometimes

00:18:51.020 --> 00:18:52.860
putting your password
in on the same page.

00:18:52.860 --> 00:18:54.560
But you've noticed
that recently,

00:18:54.560 --> 00:18:56.840
a lot of SaaS
developers have started

00:18:56.840 --> 00:19:00.830
doing what we call tenant
discovery by taking your email

00:19:00.830 --> 00:19:04.670
address first before you
provide any password.

00:19:04.670 --> 00:19:08.470
So that's how the SaaS
backend, the SaaS app

00:19:08.470 --> 00:19:10.210
and the SaaS backend
figure out which

00:19:10.210 --> 00:19:12.190
identity provider to go to.

00:19:12.190 --> 00:19:15.420
Well the great thing about
managed configuration

00:19:15.420 --> 00:19:21.280
is you can, using the EMM, using
the configuration for a given

00:19:21.280 --> 00:19:24.130
enterprise customer,
already tell

00:19:24.130 --> 00:19:28.810
which backend, which tenant,
which IDP should be hit.

00:19:28.810 --> 00:19:30.790
And in many cases,
you're also going

00:19:30.790 --> 00:19:33.300
to be able to tell what
the user name should be.

00:19:33.300 --> 00:19:36.210
In fact in many cases it's
valuable for the enterprise

00:19:36.210 --> 00:19:39.636
to be able to specify the exact
account that should be used.

00:19:39.636 --> 00:19:41.010
And the great
thing about this is

00:19:41.010 --> 00:19:45.260
when you do that, you can
go right to the password

00:19:45.260 --> 00:19:49.150
as the very first screen
that the user sees.

00:19:49.150 --> 00:19:51.950
Managed configuration could
even send the password too,

00:19:51.950 --> 00:19:53.130
but we don't recommend that.

00:19:53.130 --> 00:19:56.360
That's certainly not a very
good security best practice.

00:19:56.360 --> 00:20:00.180
But the point is you can make it
so that the only thing the user

00:20:00.180 --> 00:20:04.650
has to do after they click on
that app is put their password

00:20:04.650 --> 00:20:05.950
in for the very first time.

00:20:05.950 --> 00:20:11.000
Every subsequent app that uses
that same identity provider,

00:20:11.000 --> 00:20:13.780
the next time that the
user clicks on another app,

00:20:13.780 --> 00:20:15.040
it goes straight in.

00:20:15.040 --> 00:20:16.780
It's been completely
provisioned.

00:20:16.780 --> 00:20:19.950
The user hasn't even
had to put anything in.

00:20:19.950 --> 00:20:22.000
So managed
configuration, you start

00:20:22.000 --> 00:20:27.990
with the developer
defining in that-- well,

00:20:27.990 --> 00:20:32.940
in their manifest what
those app restrictions are.

00:20:32.940 --> 00:20:37.580
The admin on the EMM
console figures out

00:20:37.580 --> 00:20:43.020
what specific configuration
to send for that app using

00:20:43.020 --> 00:20:44.580
managed configuration.

00:20:44.580 --> 00:20:46.340
The device policy
controller is the one

00:20:46.340 --> 00:20:47.790
that actually sends that down.

00:20:47.790 --> 00:20:50.690
Or as you saw with
Play going forward,

00:20:50.690 --> 00:20:52.690
you're going to be able
to do that through Play.

00:20:52.690 --> 00:20:54.820
And then the app
receives that information

00:20:54.820 --> 00:20:58.880
and goes straight to the
information that they need.

00:20:58.880 --> 00:21:01.170
So these are the specific APIs.

00:21:01.170 --> 00:21:02.900
None of this is
particularly new.

00:21:02.900 --> 00:21:05.850
This has been here
since Lollipop.

00:21:05.850 --> 00:21:10.630
But you can now use that to
tee up and take full advantage

00:21:10.630 --> 00:21:12.752
of AppAuth for single sign in.

00:21:15.060 --> 00:21:17.060
WILLIAM DENNISS: All
right, speaking of AppAuth,

00:21:17.060 --> 00:21:19.530
let's go through a
brief code example

00:21:19.530 --> 00:21:22.937
of how you would actually use
AppAuth in your app today.

00:21:22.937 --> 00:21:24.520
So the first thing
that you need to do

00:21:24.520 --> 00:21:26.740
is spin up a
configuration object,

00:21:26.740 --> 00:21:30.060
supplying the authorization
and the token endpoints.

00:21:30.060 --> 00:21:32.710
Or if the identity provider
supports dynamic discovery,

00:21:32.710 --> 00:21:34.930
there's a way you do that too.

00:21:34.930 --> 00:21:36.730
Next you build
the OAuth request,

00:21:36.730 --> 00:21:38.700
specifying what scopes you need.

00:21:38.700 --> 00:21:40.700
In this case we're just
looking for the identity

00:21:40.700 --> 00:21:43.640
scopes of the user's
profile and email address.

00:21:43.640 --> 00:21:45.970
And then finally to
send that request

00:21:45.970 --> 00:21:49.520
that you built to Apple, it will
load up the Chrome Custom Tab

00:21:49.520 --> 00:21:53.770
or fall back to
the default browser

00:21:53.770 --> 00:21:58.030
if Chrome Custom
Tabs isn't ready.

00:21:58.030 --> 00:22:02.030
Next, to actually get that OAuth
authorization code coming back

00:22:02.030 --> 00:22:05.080
to the app, you need to
listen for the Intent which

00:22:05.080 --> 00:22:07.030
is your redirect URI.

00:22:07.030 --> 00:22:09.170
And so you'll need to
edit the app manifest

00:22:09.170 --> 00:22:11.980
and add a new
Intent filter there

00:22:11.980 --> 00:22:15.260
to watch for your
redirect scheme.

00:22:15.260 --> 00:22:17.420
And since we're talking
about redirect schemes,

00:22:17.420 --> 00:22:20.070
let me talk briefly
about what you should do

00:22:20.070 --> 00:22:22.450
to pick a good URI scheme here.

00:22:22.450 --> 00:22:25.180
And what we recommend is using a
collision resistant URI scheme,

00:22:25.180 --> 00:22:28.980
so something like using
a reverse DNS style.

00:22:28.980 --> 00:22:31.540
So something like
com.youcompany.yourapp

00:22:31.540 --> 00:22:33.500
would be a good
choice because what

00:22:33.500 --> 00:22:36.420
it means that no other app
is going to accidentally pick

00:22:36.420 --> 00:22:40.730
that same scheme, at least
not in an honest way.

00:22:40.730 --> 00:22:43.490
And you should avoid things
like app or generic words

00:22:43.490 --> 00:22:46.360
because there could be
inadvertent collisions.

00:22:46.360 --> 00:22:48.930
And you may be thinking,
well, that malicious app could

00:22:48.930 --> 00:22:52.020
actually just register
my scheme anyway.

00:22:52.020 --> 00:22:53.530
And that is
certainly true, which

00:22:53.530 --> 00:22:55.580
is why on the previous
slide I recommended

00:22:55.580 --> 00:22:57.080
that the authorization
server should

00:22:57.080 --> 00:23:03.400
support that PKCE specification,
which mitigates that problem.

00:23:03.400 --> 00:23:06.220
OK, so once you've registered
that Intent in your app's

00:23:06.220 --> 00:23:09.530
manifest, then you
receive that Intent.

00:23:09.530 --> 00:23:11.070
Then you pass it
on to the library,

00:23:11.070 --> 00:23:15.260
which will analyze the URL and
extract out the authorization

00:23:15.260 --> 00:23:16.370
code.

00:23:16.370 --> 00:23:19.630
At which point you exchange
the authorization code

00:23:19.630 --> 00:23:24.652
for a refresh token, access
token, and [INAUDIBLE] token.

00:23:24.652 --> 00:23:26.360
And then finally you
can make an API call

00:23:26.360 --> 00:23:28.060
with that access token.

00:23:28.060 --> 00:23:31.520
And AppAuth also provides
a convenient API here

00:23:31.520 --> 00:23:34.530
where you can just
wrap up your API call.

00:23:34.530 --> 00:23:37.350
And we'll take care of the
token freshness for you.

00:23:37.350 --> 00:23:39.980
So if the access
token is expired,

00:23:39.980 --> 00:23:44.080
we will hit the token
endpoint, refresh that token,

00:23:44.080 --> 00:23:46.675
and then call your API
call with that fresh token,

00:23:46.675 --> 00:23:49.610
or with an error
if an error code.

00:23:49.610 --> 00:23:53.460
So that's just took a brief
demo of using AppAuth.

00:23:53.460 --> 00:23:56.610
I highly encourage you to
visit the GitHub repository,

00:23:56.610 --> 00:23:58.977
download the sample,
and give it a try.

00:23:58.977 --> 00:24:00.560
If you have any
questions or comments,

00:24:00.560 --> 00:24:02.590
please file an
issue in the GitHub.

00:24:02.590 --> 00:24:04.270
The team is very responsive.

00:24:04.270 --> 00:24:05.760
We're always looking at those.

00:24:05.760 --> 00:24:08.814
And so we'll definitely fix
any problems that you find.

00:24:08.814 --> 00:24:10.840
And with that I think we--

00:24:10.840 --> 00:24:13.190
ANDY ZMOLEK: I should
mention a couple of things

00:24:13.190 --> 00:24:15.770
because we've gone
through so much material.

00:24:15.770 --> 00:24:18.010
And what a lot of people
may not recognize,

00:24:18.010 --> 00:24:21.360
this is a problem that we've
had with native mobile apps

00:24:21.360 --> 00:24:24.010
on all platforms for years.

00:24:24.010 --> 00:24:27.750
And it's only recently that
Android's Chrome Custom

00:24:27.750 --> 00:24:31.230
Tabs on iOS 9 Safari
View Controller

00:24:31.230 --> 00:24:34.610
provided kind of a
roadmap to go do this.

00:24:34.610 --> 00:24:39.680
But this reference library
is really what's new.

00:24:39.680 --> 00:24:43.060
Does everyone have to use the
reference library as it is?

00:24:43.060 --> 00:24:43.900
No.

00:24:43.900 --> 00:24:46.980
They can go and they
can fork the GitHub

00:24:46.980 --> 00:24:49.370
and make it so that
it works better

00:24:49.370 --> 00:24:52.630
with their
authentication scheme.

00:24:52.630 --> 00:24:57.000
Is this a Google
identity solution?

00:24:57.000 --> 00:24:59.970
No, this works
with any standard.

00:24:59.970 --> 00:25:04.820
Really the patterns that
you see with WebSSO apps,

00:25:04.820 --> 00:25:07.130
with web browsers
today, we're just

00:25:07.130 --> 00:25:09.670
replicating those here
so that they work better

00:25:09.670 --> 00:25:10.379
with native apps.

00:25:10.379 --> 00:25:12.878
WILLIAM DENNISS: So that demo
that I showed earlier actually

00:25:12.878 --> 00:25:14.340
was built with
AppAuth, and as you

00:25:14.340 --> 00:25:18.640
saw used PingFederate, which
is a third party enterprise

00:25:18.640 --> 00:25:19.390
identity provider.

00:25:19.390 --> 00:25:21.461
So, yeah.

00:25:21.461 --> 00:25:21.960
Great.

00:25:21.960 --> 00:25:23.450
Let's take some questions.

00:25:23.450 --> 00:25:24.455
We've got a few minutes.

00:25:29.196 --> 00:25:31.140
AUDIENCE: Hi.

00:25:31.140 --> 00:25:35.000
The name, Chrome Custom Tabs,
I find that a little confusing.

00:25:35.000 --> 00:25:37.650
Can you give a little background
about why that's the name

00:25:37.650 --> 00:25:40.440
and do you feel it's
descriptive of what it is?

00:25:40.440 --> 00:25:42.080
And if not, what
would you call it?

00:25:42.080 --> 00:25:44.030
ANDY ZMOLEK: So
there's custom tabs,

00:25:44.030 --> 00:25:46.100
which is an Android thing.

00:25:46.100 --> 00:25:49.570
Chrome was the
first system browser

00:25:49.570 --> 00:25:53.770
to implement custom tabs APIs.

00:25:53.770 --> 00:25:58.500
And so when you use
what's in every phone that

00:25:58.500 --> 00:26:02.940
is launched with
Google Services on it,

00:26:02.940 --> 00:26:04.620
you're guaranteed
to at least have

00:26:04.620 --> 00:26:08.160
Chrome Custom Tabs available
to you as a developer.

00:26:08.160 --> 00:26:10.300
So Chrome Custom Tabs--

00:26:10.300 --> 00:26:12.340
Well let me explain the
concept of custom tabs.

00:26:12.340 --> 00:26:15.140
The idea with custom tabs
is you're an app developer.

00:26:15.140 --> 00:26:20.430
You want to be able to show
some website, or in many cases,

00:26:20.430 --> 00:26:23.010
it's kind of social
use cases where

00:26:23.010 --> 00:26:24.820
the idea was, let's
make it easier

00:26:24.820 --> 00:26:30.760
for developers to access things
that are in the cookie jar

00:26:30.760 --> 00:26:35.112
so that they can have more
context in these social sites.

00:26:35.112 --> 00:26:37.570
It turns out that it's also
really good for authentication.

00:26:37.570 --> 00:26:45.260
So Custom Tabs is an
improvement on the WebViews

00:26:45.260 --> 00:26:47.970
that gives you access
to the cookie jar,

00:26:47.970 --> 00:26:51.000
and gives you as a developer
a whole bunch of cool things.

00:26:51.000 --> 00:26:54.450
Chrome Custom Tabs is a
Chrome implementation of that.

00:26:54.450 --> 00:26:56.550
Like I say, if you're
a browser developer,

00:26:56.550 --> 00:26:58.332
you can have your own
custom tabs as well.

00:26:58.332 --> 00:27:00.540
WILLIAM DENNISS: I guess
regarding the name-- I don't

00:27:00.540 --> 00:27:01.831
know who came up with the name.

00:27:01.831 --> 00:27:04.220
I think the idea is
that it's a custom

00:27:04.220 --> 00:27:06.027
tab running inside the app.

00:27:06.027 --> 00:27:07.610
The app can actually
change the color.

00:27:07.610 --> 00:27:09.250
They can put an icon there.

00:27:09.250 --> 00:27:10.790
They can put an action button.

00:27:10.790 --> 00:27:14.680
So I think we had one slide
there a while back where

00:27:14.680 --> 00:27:18.590
Pinterest could put
like a Pin It button.

00:27:18.590 --> 00:27:21.367
And so I guess those are
the customization options

00:27:21.367 --> 00:27:21.950
that you have.

00:27:21.950 --> 00:27:23.466
And perhaps that
explains the name.

00:27:23.466 --> 00:27:25.840
When it comes to kind of the
generic pattern in the spec,

00:27:25.840 --> 00:27:28.176
I actually refer to as
like an in app browser tab

00:27:28.176 --> 00:27:30.550
as like a generic way to refer
to the feature on both iOS

00:27:30.550 --> 00:27:31.085
and Android.

00:27:31.085 --> 00:27:32.460
ANDY ZMOLEK: I
suppose it's worth

00:27:32.460 --> 00:27:34.800
pointing out that
our full session

00:27:34.800 --> 00:27:40.160
name is "Using AppAuth for
SSO with Chrome Custom Tabs."

00:27:40.160 --> 00:27:42.510
Kind of got shortened
to Chrome Custom Tabs.

00:27:42.510 --> 00:27:47.340
But it's AppAuth that we are
specifically promoting here.

00:27:47.340 --> 00:27:50.000
WILLIAM DENNISS: And the
pattern behind AppAuth, yeah.

00:27:50.000 --> 00:27:52.350
ANDY ZMOLEK: Right,
exactly, the web pattern,

00:27:52.350 --> 00:27:56.770
which previously you had
to use a proprietary SDK

00:27:56.770 --> 00:27:58.915
from an identity provider
to do anything similar.

00:27:58.915 --> 00:28:00.790
AUDIENCE: Maybe we'll
have time for one more.

00:28:00.790 --> 00:28:01.670
AUDIENCE: One more?

00:28:01.670 --> 00:28:04.900
Well I'll feel bad if I
ask the wrong question.

00:28:04.900 --> 00:28:08.810
So out of curiosity, so
what makes custom tab faster

00:28:08.810 --> 00:28:11.420
than the standalone
Chrome browser?

00:28:11.420 --> 00:28:13.030
Anything you can share?

00:28:13.030 --> 00:28:13.690
Why?

00:28:13.690 --> 00:28:16.690
WILLIAM DENNISS: Right,
so that's this one here.

00:28:16.690 --> 00:28:20.120
My theory is that switching
to the actual browser

00:28:20.120 --> 00:28:21.910
just incurs a switching cost.

00:28:21.910 --> 00:28:25.216
Like there's this
time to-- yeah?

00:28:25.216 --> 00:28:26.132
AUDIENCE: Here we go.

00:28:26.132 --> 00:28:28.880
Hold on.

00:28:28.880 --> 00:28:30.632
AUDIENCE: So yeah,
so Chrome Custom Tabs

00:28:30.632 --> 00:28:32.840
have a few features that
allow you to preload the web

00:28:32.840 --> 00:28:36.740
page before you switch context.

00:28:36.740 --> 00:28:39.580
And that allows you to
have the resources ready.

00:28:39.580 --> 00:28:41.150
There's warm up
features essentially.

00:28:41.150 --> 00:28:42.330
WILLIAM DENNISS: That's
a really good point.

00:28:42.330 --> 00:28:44.140
AUDIENCE: Yeah,
and so that's why

00:28:44.140 --> 00:28:45.810
you get that faster switching.

00:28:45.810 --> 00:28:46.510
WILLIAM DENNISS: That's
a really good point.

00:28:46.510 --> 00:28:49.030
Yeah, so the app can basically
warm up that authorization

00:28:49.030 --> 00:28:51.265
request, have it ready to go.

00:28:51.265 --> 00:28:55.760
AUDIENCE: I'm going to pick
one more small question.

00:28:55.760 --> 00:28:57.400
AUDIENCE: Very small question.

00:28:57.400 --> 00:29:01.550
So the Google login page
was using a WebView.

00:29:01.550 --> 00:29:05.220
And is that why it's going to
switch to using custom tabs?

00:29:05.220 --> 00:29:06.690
WILLIAM DENNISS:
So we are looking

00:29:06.690 --> 00:29:09.251
at various things like that.

00:29:09.251 --> 00:29:10.750
Google is kind of
special on Android

00:29:10.750 --> 00:29:11.916
because we're a first party.

00:29:11.916 --> 00:29:15.780
So a lot of the things I said
about WebView being problematic

00:29:15.780 --> 00:29:18.960
is not actually true if you
control the platform end

00:29:18.960 --> 00:29:23.090
to end, because obviously
that you trust yourself.

00:29:23.090 --> 00:29:25.730
But we are always
looking at various things

00:29:25.730 --> 00:29:26.970
and where we can improve.

00:29:26.970 --> 00:29:30.920
[MUSIC PLAYING]

