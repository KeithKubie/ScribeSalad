WEBVTT
Kind: captions
Language: en

00:00:06.370 --> 00:00:06.950
RACHEL SHEARER: All right.

00:00:06.950 --> 00:00:08.510
Welcome everybody.

00:00:08.510 --> 00:00:09.790
My name's Rachel Shearer.

00:00:09.790 --> 00:00:12.480
This is Dominic Mazzoni
and Charles Chen.

00:00:12.480 --> 00:00:15.360
And we're here today to talk
about advancing accessibility

00:00:15.360 --> 00:00:20.493
for the Web, as I advance
my slides.

00:00:20.493 --> 00:00:23.870
So, last year Dominic and I gave
a talk at Google I/O on

00:00:23.870 --> 00:00:25.360
web accessibility.

00:00:25.360 --> 00:00:28.470
We focused on basic tips, like
making sure you have all

00:00:28.470 --> 00:00:30.810
attributes on your images, and
making sure that your buttons

00:00:30.810 --> 00:00:32.360
are focusable.

00:00:32.360 --> 00:00:35.020
How many of you were there
at that talk last year?

00:00:35.020 --> 00:00:35.880
Oh, wow.

00:00:35.880 --> 00:00:36.772
That's a lot of you.

00:00:36.772 --> 00:00:38.490
For those of you who weren't
there, this is a photo of--

00:00:38.490 --> 00:00:40.660
mid-talk, I'm assuming--
me and Dominic.

00:00:40.660 --> 00:00:41.260
We're laughing.

00:00:41.260 --> 00:00:42.550
We're having a good time.

00:00:42.550 --> 00:00:44.130
This year both of us are back.

00:00:44.130 --> 00:00:46.730
But this year we also
have Charles Chen.

00:00:46.730 --> 00:00:50.330
And we are so excited that
Charles is here that one of us

00:00:50.330 --> 00:00:54.250
edited him into the photo
from last year.

00:00:54.250 --> 00:00:56.690
I'm not going to say which one
of us it was that did that.

00:00:56.690 --> 00:00:59.050
Because it's not necessarily
the best editing

00:00:59.050 --> 00:01:00.190
job you've ever seen.

00:01:00.190 --> 00:01:01.800
Anyway this year we decided
to go into high gear.

00:01:01.800 --> 00:01:03.010
Because we have Charles.

00:01:03.010 --> 00:01:03.500
We're all here.

00:01:03.500 --> 00:01:04.660
We're very excited.

00:01:04.660 --> 00:01:08.610
We wanted to focus on some new
tools, techniques, and APIs

00:01:08.610 --> 00:01:10.740
that can really help you push
the boundaries of what's

00:01:10.740 --> 00:01:13.330
possible in terms
of accessibility

00:01:13.330 --> 00:01:14.760
inside your web apps.

00:01:14.760 --> 00:01:17.370
We're hoping that you leave
today inspired to go out and

00:01:17.370 --> 00:01:19.700
build something really great,
and build something really

00:01:19.700 --> 00:01:22.300
usable for users with
special needs.

00:01:22.300 --> 00:01:24.440
So now I'm going to give you a
quick overview of what we're

00:01:24.440 --> 00:01:26.940
going to talk about today.

00:01:26.940 --> 00:01:29.960
First I'm going to jump into
testing for accessibility, and

00:01:29.960 --> 00:01:32.780
show you two tools that can
really help you find and

00:01:32.780 --> 00:01:35.480
eliminate accessibility errors
in your apps, the

00:01:35.480 --> 00:01:39.430
Accessibility Developer
Tools and ChromeVox.

00:01:39.430 --> 00:01:42.840
Next, Dominic is going to talk
about Advanced Screen Reader

00:01:42.840 --> 00:01:44.040
Accessibility.

00:01:44.040 --> 00:01:46.320
And he's going to show two
examples of accessible

00:01:46.320 --> 00:01:49.810
editors, an accessible text
editor, and an accessible

00:01:49.810 --> 00:01:51.910
terminal emulator.

00:01:51.910 --> 00:01:54.210
Next, Charles is going to
introduce ChromeVox

00:01:54.210 --> 00:01:55.130
extensions.

00:01:55.130 --> 00:01:58.020
He's going to show off the
PlusVox ChromeVox Extension,

00:01:58.020 --> 00:02:01.830
which is an extension for
Power Google+ users.

00:02:01.830 --> 00:02:03.830
Finally Dominic is going
to come back.

00:02:03.830 --> 00:02:07.080
And he's going to talk about his
favorite Chrome APIs, like

00:02:07.080 --> 00:02:09.680
APIs for low vision, and
APIs for speech.

00:02:09.680 --> 00:02:12.380
So that's going to
be really great.

00:02:12.380 --> 00:02:14.340
Now that I've told you what you
can expect to hear from us

00:02:14.340 --> 00:02:17.760
over the next hour, 50 minutes,
or so, I'm going to

00:02:17.760 --> 00:02:20.530
start right off and talk
about testing.

00:02:20.530 --> 00:02:25.040
How you can find accessibility
errors in your apps?

00:02:25.040 --> 00:02:27.330
So, all of us on stage
are web developers.

00:02:27.330 --> 00:02:30.400
But we also work with other
web developers at Google.

00:02:30.400 --> 00:02:32.610
And over the years we've
discovered a few things that

00:02:32.610 --> 00:02:34.690
we'd like to share
with you today.

00:02:34.690 --> 00:02:37.720
The first is a fundamentally
optimistic point.

00:02:37.720 --> 00:02:40.910
Many web apps can be made
accessible to users with

00:02:40.910 --> 00:02:41.740
special needs.

00:02:41.740 --> 00:02:44.440
And I'd even go so far as to
say most web apps are not

00:02:44.440 --> 00:02:46.780
actually fundamentally
inaccessible.

00:02:46.780 --> 00:02:48.970
Assistive technology is
improving and can better

00:02:48.970 --> 00:02:51.530
handle rich, interactive,
dynamic apps.

00:02:51.530 --> 00:02:55.660
And techniques from HTML5 and
ARIA can help you bridge the

00:02:55.660 --> 00:02:58.510
gap and get your app looking
really good.

00:02:58.510 --> 00:03:02.040
But the problem is simple
errors are causing huge

00:03:02.040 --> 00:03:03.480
problems for users.

00:03:03.480 --> 00:03:06.720
These are simple errors like not
labeling your form fields

00:03:06.720 --> 00:03:10.560
or not having controls be
keyboard focusable.

00:03:10.560 --> 00:03:13.890
These kinds of absurdly simple
errors can make apps

00:03:13.890 --> 00:03:17.860
completely unusable to users
of assistive technology.

00:03:17.860 --> 00:03:20.480
And so you might say to yourself
if these are simple

00:03:20.480 --> 00:03:22.260
errors, why aren't we
testing for them?

00:03:22.260 --> 00:03:24.860
It should be easy to test
for these errors.

00:03:24.860 --> 00:03:29.260
Well at Google, we've found that
existing accessibility

00:03:29.260 --> 00:03:31.930
testing tools weren't
meeting our needs.

00:03:31.930 --> 00:03:35.220
Many of them recommend older
techniques, like accesskey,

00:03:35.220 --> 00:03:38.210
longdesc, or noscript, instead
of recommending newer

00:03:38.210 --> 00:03:41.210
alternatives from
ARIA or HTML5.

00:03:41.210 --> 00:03:44.370
Some existing accessibility
testing tools assume that your

00:03:44.370 --> 00:03:47.790
web app is like a document, and
it's a list of links or

00:03:47.790 --> 00:03:48.860
static text.

00:03:48.860 --> 00:03:51.610
And they don't actually support
the rich, dynamic web

00:03:51.610 --> 00:03:55.400
applications that we're here at
I/O to learn how to build.

00:03:55.400 --> 00:03:58.090
Some existing accessibility
tools just don't integrate

00:03:58.090 --> 00:04:00.530
well with your existing
workflows as a developer.

00:04:00.530 --> 00:04:02.230
They might require you to
install a completely new

00:04:02.230 --> 00:04:05.640
desktop app to test
for accessibility.

00:04:05.640 --> 00:04:08.480
And some accessibility
testing tools only

00:04:08.480 --> 00:04:10.530
work well on one platform.

00:04:10.530 --> 00:04:12.300
Or they assume that your
users are using

00:04:12.300 --> 00:04:14.230
a particular platform.

00:04:14.230 --> 00:04:16.790
And at Google, we realize that a
lot of the developers around

00:04:16.790 --> 00:04:19.700
us are spending a lot of time in
the Chrome Developer Tools.

00:04:19.700 --> 00:04:22.200
So why not put the Accessibility
Testing Tools

00:04:22.200 --> 00:04:24.120
right inside the Chrome
Developer Tools where people

00:04:24.120 --> 00:04:25.960
are spending a lot
of their time.

00:04:25.960 --> 00:04:27.190
So that's what we did.

00:04:27.190 --> 00:04:30.310
We created the Accessibility
Developer Tools for Chrome.

00:04:30.310 --> 00:04:33.310
It's a Chrome extension that
adds a special audit to your

00:04:33.310 --> 00:04:35.350
Chrome Developer Tools that
allows you to check for

00:04:35.350 --> 00:04:37.190
accessibility errors.

00:04:37.190 --> 00:04:39.260
Some of the things that we
check for are things like

00:04:39.260 --> 00:04:41.470
labels and alternative
content, keyboard

00:04:41.470 --> 00:04:45.000
accessibility, ARIA, low vision
accessibility like

00:04:45.000 --> 00:04:47.730
contrast ratio, and video
accessibility like the

00:04:47.730 --> 00:04:51.110
presence of captions or fall
back content for video.

00:04:51.110 --> 00:04:53.190
And these aren't really
complex errors.

00:04:53.190 --> 00:04:54.980
These are simple errors.

00:04:54.980 --> 00:04:57.410
We wanted to make sure that
our tool could confidently

00:04:57.410 --> 00:05:01.210
highlight these errors and
explain to you the developer

00:05:01.210 --> 00:05:03.720
what you could improve in your
app to make it better.

00:05:03.720 --> 00:05:06.590
And the good news is that these
simple errors are often

00:05:06.590 --> 00:05:09.070
the most simple for the
developer to fix.

00:05:09.070 --> 00:05:11.330
And so we really thought that
by focusing on these errors,

00:05:11.330 --> 00:05:14.230
we could focus on practical
web accessibility for

00:05:14.230 --> 00:05:15.560
developers.

00:05:15.560 --> 00:05:16.170
But--

00:05:16.170 --> 00:05:17.810
I mean, we just launched
this two days ago.

00:05:17.810 --> 00:05:20.330
So as time moves forward, we'll
definitely be increasing

00:05:20.330 --> 00:05:24.790
the number of things we check
for in an effort to bring a

00:05:24.790 --> 00:05:29.100
broader array of checks to the
Accessibility Developer Tools.

00:05:29.100 --> 00:05:31.380
So now that I've talked about
that, I also want to highlight

00:05:31.380 --> 00:05:34.040
another tool that you have in
your arsenal as a developer.

00:05:34.040 --> 00:05:35.690
And that's ChromeVox.

00:05:35.690 --> 00:05:38.710
We launched ChromeVox last year
at Google I/O. And it's a

00:05:38.710 --> 00:05:40.750
Chrome Extension
Screen Reader.

00:05:40.750 --> 00:05:44.170
So that means it's built using
JavaScript, HTML, and CSS.

00:05:44.170 --> 00:05:46.450
You control it using
keyboard shortcuts.

00:05:46.450 --> 00:05:49.670
And it interprets the page,
speaking using the Chrome Text

00:05:49.670 --> 00:05:51.710
to Speech API.

00:05:51.710 --> 00:05:53.920
And the great thing about
ChromeVox is that it

00:05:53.920 --> 00:05:56.850
interprets the page just like
any other screen reader.

00:05:56.850 --> 00:05:58.560
It speaks out loud the contents
of the screen in a

00:05:58.560 --> 00:06:01.500
similar way to screen readers
like JAWS or NVDA.

00:06:01.500 --> 00:06:04.590
But it has all the benefits of
being a Chrome extension,

00:06:04.590 --> 00:06:07.150
which means it's easy to set up,
it's easy to use, and it

00:06:07.150 --> 00:06:10.410
integrates right into
the browser.

00:06:10.410 --> 00:06:13.130
So now that we know about the
Accessibility Developer Tools,

00:06:13.130 --> 00:06:16.690
and we know we have ChromeVox,
how do we use the two together

00:06:16.690 --> 00:06:18.360
to find and eliminate
accessibility

00:06:18.360 --> 00:06:19.770
errors in our apps?

00:06:19.770 --> 00:06:22.120
Well, I have a demo for you
to show you how you

00:06:22.120 --> 00:06:23.390
can use them together.

00:06:23.390 --> 00:06:25.240
This is a really simple
web form.

00:06:25.240 --> 00:06:27.940
You can just enter your name in
the input field, click the

00:06:27.940 --> 00:06:29.570
check box, click register.

00:06:29.570 --> 00:06:31.600
And it adds you to
a mailing list.

00:06:31.600 --> 00:06:36.530
So let's try running ChromeVox
on it and see what happens.

00:06:36.530 --> 00:06:37.900
These are HTML5 slides.

00:06:37.900 --> 00:06:39.820
And ChromeVox has been running
this entire time.

00:06:39.820 --> 00:06:42.140
I'm just going to activate it
using keyboard shortcuts.

00:06:42.140 --> 00:06:44.085
FEMALE SPEAKER: Enabling
spoken feedback.

00:06:44.085 --> 00:06:46.480
RACHEL SHEARER: As you can see,
it put a little visual

00:06:46.480 --> 00:06:49.310
cursor on the screen as to where
ChromeVox's focus is.

00:06:49.310 --> 00:06:51.450
I'm just going to move down
through the form.

00:06:51.450 --> 00:06:53.410
And we'll see what
ChromeVox says.

00:06:53.410 --> 00:06:54.430
FEMALE SPEAKER: Enter
your name.

00:06:54.430 --> 00:06:55.010
Article.

00:06:55.010 --> 00:06:56.040
Edit text.

00:06:56.040 --> 00:06:58.450
Yes, please add me to
your mailing list.

00:06:58.450 --> 00:06:59.130
Clickable.

00:06:59.130 --> 00:07:01.070
You may receive one
email per week.

00:07:01.070 --> 00:07:02.000
Register now.

00:07:02.000 --> 00:07:02.990
Done.

00:07:02.990 --> 00:07:03.720
RACHEL SHEARER: So that
was a little fast.

00:07:03.720 --> 00:07:05.490
Because it kind of just went
through the entire page.

00:07:05.490 --> 00:07:07.720
Let's try and go through
them one at time.

00:07:07.720 --> 00:07:08.470
FEMALE SPEAKER: Demo.

00:07:08.470 --> 00:07:09.920
Heading to heading group.

00:07:09.920 --> 00:07:10.520
Article.

00:07:10.520 --> 00:07:11.700
Edit text.

00:07:11.700 --> 00:07:15.940
RACHEL SHEARER: So you see
it just said, edit text.

00:07:15.940 --> 00:07:17.760
There's more information
visually on this page.

00:07:17.760 --> 00:07:19.510
It says enter your name.

00:07:19.510 --> 00:07:21.400
But ChromeVox just
says edit text.

00:07:21.400 --> 00:07:23.800
And if you can't see the screen,
you might not know

00:07:23.800 --> 00:07:26.300
that you're supposed to do
something to this edit field.

00:07:26.300 --> 00:07:28.730
I'm just tabbing through like
many users of screen readers

00:07:28.730 --> 00:07:30.750
do, tabbing through the page
to try and figure out what

00:07:30.750 --> 00:07:31.790
you're supposed to do.

00:07:31.790 --> 00:07:33.560
Right now I'm not really sure.

00:07:33.560 --> 00:07:36.050
Let's tab again and see if we
can get to that checkbox.

00:07:36.050 --> 00:07:37.870
FEMALE SPEAKER: Register
now button.

00:07:37.870 --> 00:07:38.240
RACHEL SHEARER: OK.

00:07:38.240 --> 00:07:40.010
It skipped right over
the checkbox.

00:07:40.010 --> 00:07:41.610
That's definitely a red flag.

00:07:41.610 --> 00:07:43.990
There's something weird going
on with this form.

00:07:43.990 --> 00:07:46.350
Maybe the checkbox
isn't focusable.

00:07:46.350 --> 00:07:48.510
Maybe it's not a checkbox at all
and it's just an image of

00:07:48.510 --> 00:07:50.550
a square that someone put on
the screen to try and look

00:07:50.550 --> 00:07:51.750
like a checkbox.

00:07:51.750 --> 00:07:53.910
There's a lot of different
things that could be going on.

00:07:53.910 --> 00:07:56.420
But the good thing is we have
the Accessibility Developer

00:07:56.420 --> 00:08:00.010
Tools to show us exactly
what the problems are.

00:08:00.010 --> 00:08:01.080
I'm going to turn
ChromeVox off.

00:08:01.080 --> 00:08:02.950
FEMALE SPEAKER: Disabling
spoken feedback.

00:08:02.950 --> 00:08:04.430
RACHEL SHEARER: And I'm going
to open the Developer Tools

00:08:04.430 --> 00:08:07.680
using another keyboard
shortcut.

00:08:07.680 --> 00:08:08.130
All right.

00:08:08.130 --> 00:08:10.290
So it's opened right up
into the Audits pane.

00:08:10.290 --> 00:08:13.180
I've actually zoomed in a lot
so you guys can see it.

00:08:13.180 --> 00:08:14.720
Can you in the back see
the Developer Tools?

00:08:14.720 --> 00:08:16.490
Can you see the results?

00:08:16.490 --> 00:08:17.230
Yes?

00:08:17.230 --> 00:08:18.385
I'm going to assume
that's a yes.

00:08:18.385 --> 00:08:20.890
So you see that I have a list
of audits that I can run.

00:08:20.890 --> 00:08:22.730
And it includes accessibility.

00:08:22.730 --> 00:08:24.630
So I'm going to uncheck
the other ones.

00:08:24.630 --> 00:08:26.520
Hopefully you didn't come
to learn about webpage

00:08:26.520 --> 00:08:27.060
performance.

00:08:27.060 --> 00:08:30.050
Because you're going to be
disappointed during this talk.

00:08:30.050 --> 00:08:32.142
I'm going to run the
Accessibility Audit.

00:08:32.142 --> 00:08:35.210
And you'll see right away it
comes up with a slightly wonky

00:08:35.210 --> 00:08:38.970
list of errors on the page.

00:08:38.970 --> 00:08:41.049
There is red, severe errors.

00:08:41.049 --> 00:08:42.530
There is yellow, warnings.

00:08:42.530 --> 00:08:44.810
And there is green, tests that
either passed or weren't

00:08:44.810 --> 00:08:46.540
applicable to this page.

00:08:46.540 --> 00:08:48.490
There are so many errors on
this page, you might even

00:08:48.490 --> 00:08:50.890
think that the person who wrote
this page maybe wrote it

00:08:50.890 --> 00:08:53.730
on purpose to have a lot of
errors if you are a suspicious

00:08:53.730 --> 00:08:56.240
person like me.

00:08:56.240 --> 00:08:58.150
So let's just go through
these one at a time.

00:08:58.150 --> 00:09:00.880
The first one is a severe error
that says controls and

00:09:00.880 --> 00:09:02.990
media elements should
have labels.

00:09:02.990 --> 00:09:03.830
So I'm going to open it up.

00:09:03.830 --> 00:09:06.620
And you see it actually points
exactly at the element that

00:09:06.620 --> 00:09:08.260
has the particular error.

00:09:08.260 --> 00:09:10.480
So you can see it's kind of
highlighting this input field

00:09:10.480 --> 00:09:11.830
up at the top.

00:09:11.830 --> 00:09:15.170
Maybe I can make this go down
a little bit so you can see.

00:09:15.170 --> 00:09:16.670
It's highlighting that
input field.

00:09:16.670 --> 00:09:18.210
And it's just like
we suspected.

00:09:18.210 --> 00:09:20.250
There's no label on
that input field.

00:09:20.250 --> 00:09:23.810
And the neat thing is that you
can click on this link.

00:09:23.810 --> 00:09:28.040
And it will open up in a new
window and show you exactly

00:09:28.040 --> 00:09:30.350
what the problem was and
how you can fix it.

00:09:30.350 --> 00:09:32.960
This is a wiki page on the
Developer site that we have.

00:09:32.960 --> 00:09:35.830
And it goes through the ways
that you can fix this problem

00:09:35.830 --> 00:09:38.520
and why your page was
highlighted as maybe having an

00:09:38.520 --> 00:09:39.370
error here.

00:09:39.370 --> 00:09:41.540
So this can be really helpful
if your developer was new to

00:09:41.540 --> 00:09:43.080
accessibility.

00:09:43.080 --> 00:09:48.790
I'm going to exit full screen,
go back here, and go back into

00:09:48.790 --> 00:09:50.880
full screen.

00:09:50.880 --> 00:09:53.440
So you can see that
that's a problem.

00:09:53.440 --> 00:09:54.850
Let's go to the next one.

00:09:54.850 --> 00:09:57.040
Elements with ARIA roles
must use a valid

00:09:57.040 --> 00:09:58.770
non-abstract ARIA role.

00:09:58.770 --> 00:10:01.710
And that's pointing at
this check box here.

00:10:01.710 --> 00:10:03.820
If you're someone who's
memorized the ARIA spec like I

00:10:03.820 --> 00:10:06.610
am, you would see immediately
that this ARIA role attribute

00:10:06.610 --> 00:10:07.400
isn't right.

00:10:07.400 --> 00:10:10.780
If says role=check instead
of role=checkbox.

00:10:10.780 --> 00:10:12.610
If you aren't someone who's
memorized the ARIA spec, you

00:10:12.610 --> 00:10:14.510
can click on this link and it
will tell you exactly what the

00:10:14.510 --> 00:10:16.470
problem is.

00:10:16.470 --> 00:10:18.240
Next we're going to warnings.

00:10:18.240 --> 00:10:21.410
And these warnings are there.

00:10:21.410 --> 00:10:24.690
And they're considered less
severe than the severe errors.

00:10:24.690 --> 00:10:27.120
Because sometimes as a
developer, you might be

00:10:27.120 --> 00:10:28.510
breaking these rules
on purpose.

00:10:28.510 --> 00:10:30.210
Or you might be aware that
you're breaking these rules.

00:10:30.210 --> 00:10:32.260
But it's serving a
larger purpose.

00:10:32.260 --> 00:10:34.700
So that's why we've highlighted
these separately

00:10:34.700 --> 00:10:35.930
from the most severe errors.

00:10:35.930 --> 00:10:38.740
We're giving you more
information as a developer.

00:10:38.740 --> 00:10:40.870
So the first one is elements
with onclick

00:10:40.870 --> 00:10:42.560
handlers must be focusable.

00:10:42.560 --> 00:10:44.590
And this is actually getting
to the root of the problem

00:10:44.590 --> 00:10:45.940
with this checkbox.

00:10:45.940 --> 00:10:47.200
There's an onclick handler.

00:10:47.200 --> 00:10:48.550
But this is just a span.

00:10:48.550 --> 00:10:50.190
It's not actually focusable.

00:10:50.190 --> 00:10:54.180
There's no way to put keyboard
focus on this checkbox.

00:10:54.180 --> 00:10:56.900
If we had used an input element,
like a regular native

00:10:56.900 --> 00:11:00.050
HTML input element, then we
would have gotten keyboard

00:11:00.050 --> 00:11:01.180
focus for free.

00:11:01.180 --> 00:11:02.230
But we used a span.

00:11:02.230 --> 00:11:04.930
And so there's actually no way
a keyboard-only user can put

00:11:04.930 --> 00:11:06.470
focus on this checkbox.

00:11:06.470 --> 00:11:08.520
So that's bad.

00:11:08.520 --> 00:11:09.950
Let's look at the next one.

00:11:09.950 --> 00:11:11.870
And this is actually one
of my favorite errors.

00:11:11.870 --> 00:11:15.260
Text elements should have a
reasonable contrast ratio.

00:11:15.260 --> 00:11:17.820
And it's pointing at this
fine print right here.

00:11:17.820 --> 00:11:20.010
And probably you guys in
the back might not even

00:11:20.010 --> 00:11:20.690
be able to see this.

00:11:20.690 --> 00:11:24.902
Because it's actually written
in a very light grey text.

00:11:24.902 --> 00:11:28.440
And this is not a high enough
contrast text for someone with

00:11:28.440 --> 00:11:31.000
low vision to be able to see.

00:11:31.000 --> 00:11:33.050
And so you can see it's
highlighting it.

00:11:33.050 --> 00:11:35.420
And I can actually right click
on it and say Reveal an

00:11:35.420 --> 00:11:38.130
Elements Panel to take me over
to the Elements panel and show

00:11:38.130 --> 00:11:41.310
me where on the page
this text is.

00:11:41.310 --> 00:11:43.480
If you look on the right hand
pane, there's something called

00:11:43.480 --> 00:11:45.130
Accessibility Properties.

00:11:45.130 --> 00:11:45.980
I can open that up.

00:11:45.980 --> 00:11:48.660
And it actually calculated the
contrast ratio for me right

00:11:48.660 --> 00:11:50.410
there in the Accessibility
properties.

00:11:50.410 --> 00:11:52.530
It shows you what it thinks the
foreground color is, which

00:11:52.530 --> 00:11:54.400
is this gray, shows
you the background

00:11:54.400 --> 00:11:55.770
color, which is white.

00:11:55.770 --> 00:11:58.570
And it's saying the contrast
ratio is 2.32.

00:11:58.570 --> 00:11:59.940
It's got a little warning
sign next to it.

00:11:59.940 --> 00:12:02.790
Because that contrast ratio is
actually not good enough for

00:12:02.790 --> 00:12:04.710
many users with low vision.

00:12:04.710 --> 00:12:06.550
So this is something
that's really neat.

00:12:06.550 --> 00:12:08.350
A lot of accessibility
errors--

00:12:08.350 --> 00:12:10.210
you could maybe look in the
DOM tree or look at the

00:12:10.210 --> 00:12:13.040
Elements pane and kind of
figure out what's wrong.

00:12:13.040 --> 00:12:15.670
But I can't calculate contrast
ratio just by looking at a

00:12:15.670 --> 00:12:16.720
piece of text.

00:12:16.720 --> 00:12:18.670
So this is where the
Accessibility Developer Tools

00:12:18.670 --> 00:12:22.300
really helps you go the extra
mile and be able to figure out

00:12:22.300 --> 00:12:25.940
some errors that might not be
obvious at first glance.

00:12:25.940 --> 00:12:29.430
So let's go back into
the Audits pane.

00:12:29.430 --> 00:12:32.370
And we've actually got
three more warnings.

00:12:32.370 --> 00:12:34.280
And these ones are a little
bit more subtle

00:12:34.280 --> 00:12:35.260
than the other warnings.

00:12:35.260 --> 00:12:39.140
It's actually highlighting
links on the next slide.

00:12:39.140 --> 00:12:41.090
And that's because the
Accessibility Developer Tools

00:12:41.090 --> 00:12:43.250
is so smart that it actually
figured out a bug in the

00:12:43.250 --> 00:12:46.010
slides themselves.

00:12:46.010 --> 00:12:47.560
It's only showing one
slide at a time.

00:12:47.560 --> 00:12:49.980
But it's actually loaded the
previous slide and the next

00:12:49.980 --> 00:12:51.630
slide in the DOM.

00:12:51.630 --> 00:12:54.140
And they're just hidden behind
this current slide.

00:12:54.140 --> 00:12:56.640
And I think they did that for
smoothness purposes or to make

00:12:56.640 --> 00:12:59.540
sure there wasn't any weird
gaps between slides.

00:12:59.540 --> 00:13:03.110
But these links in the next
slide are still focusable.

00:13:03.110 --> 00:13:05.340
If you're a keyboard only user,
and you can't use the

00:13:05.340 --> 00:13:07.860
mouse, and you're tabbing around
this page, you'll end

00:13:07.860 --> 00:13:09.595
up in the links on the
next slide even

00:13:09.595 --> 00:13:11.180
though they're not visible.

00:13:11.180 --> 00:13:13.400
And it's a subtle bug.

00:13:13.400 --> 00:13:15.150
But it's still a bug
in the slides.

00:13:15.150 --> 00:13:16.770
And so the Accessibility
Developer Tools is

00:13:16.770 --> 00:13:19.110
highlighting it so that as the
developer, you can make the

00:13:19.110 --> 00:13:21.510
decision that's best for you
about what you want to do in

00:13:21.510 --> 00:13:24.030
this situation.

00:13:24.030 --> 00:13:26.720
And the next tests at the bottom
are not applicable,

00:13:26.720 --> 00:13:29.630
which means they weren't
run on this page.

00:13:29.630 --> 00:13:31.810
So we don't have an ARIA
labeled by attribute.

00:13:31.810 --> 00:13:32.730
And we're not using video.

00:13:32.730 --> 00:13:34.750
So those tests don't
even matter.

00:13:34.750 --> 00:13:38.320
And then we have one green
passing test at the bottom,

00:13:38.320 --> 00:13:41.340
which is, images should
have an alt attribute.

00:13:41.340 --> 00:13:45.710
So altogether I think I would
give this form maybe a C- or a

00:13:45.710 --> 00:13:48.250
D+ in terms of accessibility.

00:13:48.250 --> 00:13:49.820
Let's see if we can fix
one of these areas and

00:13:49.820 --> 00:13:52.040
maybe raise our grade.

00:13:52.040 --> 00:13:56.060
I'm going to right click on the
check box that didn't have

00:13:56.060 --> 00:13:59.156
the right ARIA role, reveal it
in the Elements panel, and see

00:13:59.156 --> 00:14:01.530
if I can fix it right now.

00:14:01.530 --> 00:14:04.660
If I double click on the
attribute, I can just edit it

00:14:04.660 --> 00:14:06.710
right inside the
Elements pane.

00:14:06.710 --> 00:14:10.780
And I'm going to add the word
box to have ARIArole=checkbox,

00:14:10.780 --> 00:14:13.420
which I know is the
right ARIA role.

00:14:13.420 --> 00:14:16.670
And I hit Enter and go back
to the Audits pane.

00:14:16.670 --> 00:14:19.430
And let's try running
this audit again.

00:14:19.430 --> 00:14:21.220
Hit the Run button.

00:14:21.220 --> 00:14:23.270
And you'll see that one of those
red errors disappeared.

00:14:23.270 --> 00:14:26.160
And that's because I just
fixed that right now.

00:14:26.160 --> 00:14:27.770
This is one of the really
powerful things about the

00:14:27.770 --> 00:14:29.020
Developer Tools.

00:14:29.020 --> 00:14:31.690
You can experiment with
different fixes right inside

00:14:31.690 --> 00:14:34.280
the Developer Tools, run the
audit again, and see how your

00:14:34.280 --> 00:14:37.890
fix either improved or
regressed your score.

00:14:37.890 --> 00:14:40.100
And this takes a lot of time
out of the equation.

00:14:40.100 --> 00:14:41.900
You can try out different
things right there.

00:14:41.900 --> 00:14:44.520
You don't have to go back and
upload it to a server or

00:14:44.520 --> 00:14:46.790
refresh the page or anything
like that.

00:14:46.790 --> 00:14:49.130
You can try out different things
and find the solution

00:14:49.130 --> 00:14:52.060
that works best for you.

00:14:52.060 --> 00:14:52.350
OK.

00:14:52.350 --> 00:14:54.470
So I'm not going to fix all
the rest of these errors.

00:14:54.470 --> 00:14:56.440
We'll just have to leave
ourselves with a low grade.

00:14:56.440 --> 00:14:59.540
I'm going to move on
to the next slide.

00:14:59.540 --> 00:15:02.990
So I've showed you two tools
that you can add to your

00:15:02.990 --> 00:15:05.750
arsenal to improve the way that
you find and eliminate

00:15:05.750 --> 00:15:07.250
accessibility errors.

00:15:07.250 --> 00:15:08.600
They're both no cost.

00:15:08.600 --> 00:15:09.770
They're both open source.

00:15:09.770 --> 00:15:12.400
And we really recommend that
you use them together.

00:15:12.400 --> 00:15:13.590
ChromeVox is good to use.

00:15:13.590 --> 00:15:16.650
Because it really gives you a
good idea for how an end user

00:15:16.650 --> 00:15:18.430
might experience your page.

00:15:18.430 --> 00:15:20.480
It can be difficult to
understand how someone who

00:15:20.480 --> 00:15:22.970
can't see at all can use
a screen reader to

00:15:22.970 --> 00:15:24.040
experience your app.

00:15:24.040 --> 00:15:26.660
And ChromeVox can help you
understand a little bit what

00:15:26.660 --> 00:15:27.815
they might be going through.

00:15:27.815 --> 00:15:29.760
And the Accessibility Developer
Tools are great.

00:15:29.760 --> 00:15:32.010
Because they lay it all out
in front of you-- what the

00:15:32.010 --> 00:15:33.045
problems might be.

00:15:33.045 --> 00:15:35.520
You can go in and try
out different fixes.

00:15:35.520 --> 00:15:38.390
And you can see what works
and what doesn't work.

00:15:38.390 --> 00:15:40.590
The Accessibility Developer
Tools was actually launched--

00:15:40.590 --> 00:15:42.400
I think it was two days ago.

00:15:42.400 --> 00:15:43.800
And it's on the Web Store.

00:15:43.800 --> 00:15:46.520
ChromeVox, you can also get on
the Web Store or learn more

00:15:46.520 --> 00:15:48.340
about it at chromevox.com.

00:15:48.340 --> 00:15:51.190
And we have a Google Code site
for it, google-axs-chrom

00:15:51.190 --> 00:15:53.570
e.code.google.com.

00:15:53.570 --> 00:15:56.180
And I think the Accessibility
Developer Tools are also on

00:15:56.180 --> 00:15:56.720
Google Code.

00:15:56.720 --> 00:15:58.490
But I think we forgot
to add the link.

00:15:58.490 --> 00:15:59.740
It's accessibility-de
veloper-tools.googlecode.com.

00:16:04.170 --> 00:16:06.500
So now that you know how
to test your apps for

00:16:06.500 --> 00:16:08.840
accessibility, I'm going to
bring Dominic on back to talk

00:16:08.840 --> 00:16:11.500
about advanced accessibility
techniques.

00:16:11.500 --> 00:16:13.480
DOMINIC MAZZONI: Thanks
very much, Rachel.

00:16:13.480 --> 00:16:15.120
Yeah, I want to say one
more point about

00:16:15.120 --> 00:16:16.000
those Developer Tools.

00:16:16.000 --> 00:16:18.020
One of the things that
I love about them--

00:16:18.020 --> 00:16:20.610
you might remember last year we
talked about ChromeShades.

00:16:20.610 --> 00:16:23.570
I see this as the next evolution
of ChromeShades.

00:16:23.570 --> 00:16:26.610
Because a normal extension that
is running in the page

00:16:26.610 --> 00:16:28.800
that's just built using
JavaScript has some

00:16:28.800 --> 00:16:31.670
limitations in terms of what
it's able to check.

00:16:31.670 --> 00:16:34.780
For example, one of the most
common errors that I saw in

00:16:34.780 --> 00:16:37.690
web applications was that
someone added an on click

00:16:37.690 --> 00:16:40.870
handler to an element
on the page.

00:16:40.870 --> 00:16:43.420
But it wasn't possible to access
that with a keyboard.

00:16:43.420 --> 00:16:46.030
And for the longest time, I was
trying to figure out a way

00:16:46.030 --> 00:16:49.950
that we could detect that
automatically, but without

00:16:49.950 --> 00:16:53.220
needing to hack the browser or
use some other side loaded

00:16:53.220 --> 00:16:55.380
technique or something.

00:16:55.380 --> 00:16:58.340
With the possibility of
Developer Tools extensions,

00:16:58.340 --> 00:17:01.210
we're able to sort of get behind
the DOM and access a

00:17:01.210 --> 00:17:02.990
bunch of things that aren't
normally available from

00:17:02.990 --> 00:17:06.490
JavaScript, like for example to
find out if an element has

00:17:06.490 --> 00:17:08.410
a click handler, even if
it was added without

00:17:08.410 --> 00:17:10.630
addEventListener or something
else like that.

00:17:10.630 --> 00:17:13.930
So now that we have this
ability, a lot more subtle

00:17:13.930 --> 00:17:17.589
accessibility errors
are now possible to

00:17:17.589 --> 00:17:19.940
detect, which is great.

00:17:19.940 --> 00:17:24.250
But what I want to move onto
now is the next step.

00:17:24.250 --> 00:17:26.240
So you've gone through, and
you've taken your web

00:17:26.240 --> 00:17:29.320
application, and you've fixed
all the simple errors.

00:17:29.320 --> 00:17:31.490
So you don't have anything
which is unlabeled.

00:17:31.490 --> 00:17:34.600
You don't have anything which
is impossible to access with

00:17:34.600 --> 00:17:35.630
the keyboard.

00:17:35.630 --> 00:17:38.630
But maybe you have some custom
controls or you have some

00:17:38.630 --> 00:17:41.900
custom user interface, and just
doing the basics isn't

00:17:41.900 --> 00:17:44.230
enough to meet the
needs of users.

00:17:44.230 --> 00:17:47.070
So last year we talked about
a few examples of that.

00:17:47.070 --> 00:17:50.360
We showed you how you can take
a pop up dialogue in HTML and

00:17:50.360 --> 00:17:51.880
make that accessible.

00:17:51.880 --> 00:17:55.640
We talked about how you can
build a custom slider.

00:17:55.640 --> 00:17:58.760
And we talked about how you can
manage focus so that if

00:17:58.760 --> 00:18:01.110
someone is using the keyboard to
move through your app, they

00:18:01.110 --> 00:18:03.210
not only have a great experience
when using the

00:18:03.210 --> 00:18:06.140
keyboard, but also assistive
technology like screen readers

00:18:06.140 --> 00:18:09.200
and magnifiers are also doing
the right thing and giving

00:18:09.200 --> 00:18:10.660
appropriate feedback.

00:18:10.660 --> 00:18:12.560
Let me just give one
example of that.

00:18:12.560 --> 00:18:14.990
If you're interested in more of
those techniques, you can

00:18:14.990 --> 00:18:17.310
watch our talk from last year.

00:18:17.310 --> 00:18:20.040
Or there's a webinar that Rachel
did that talks about

00:18:20.040 --> 00:18:20.890
more of those techniques.

00:18:20.890 --> 00:18:24.100
But let me give you
one example here.

00:18:24.100 --> 00:18:26.310
I've got a ratings gadget.

00:18:26.310 --> 00:18:27.900
There's like five stars here.

00:18:27.900 --> 00:18:31.110
And I can click on one of them
and rate something like a

00:18:31.110 --> 00:18:37.420
restaurant, or a cinema,
or something like that.

00:18:37.420 --> 00:18:41.102
And this gadget is not
only able to be

00:18:41.102 --> 00:18:42.820
used with the mouse.

00:18:42.820 --> 00:18:45.040
But it's also keyboard
accessible.

00:18:45.040 --> 00:18:48.270
And it gives appropriate
feedback to a screen reader.

00:18:48.270 --> 00:18:51.790
And the way we've done that is
just by adding an ARIA role of

00:18:51.790 --> 00:18:54.910
slider, and then ARIA valuemin,

00:18:54.910 --> 00:18:57.620
valuemax, and valuenow.

00:18:57.620 --> 00:19:01.630
And if you set those attributes
on an HTML element

00:19:01.630 --> 00:19:05.040
and update them dynamically as
the element changes, and of

00:19:05.040 --> 00:19:06.640
course you make sure that
you've implemented the

00:19:06.640 --> 00:19:10.470
keyboard access, then that
element is going to give

00:19:10.470 --> 00:19:12.580
appropriate feedback to
a screen reader user.

00:19:12.580 --> 00:19:15.070
Just giving it a role of
slider and setting the

00:19:15.070 --> 00:19:16.900
appropriate value means
the someone who is

00:19:16.900 --> 00:19:19.310
using a screen reader--

00:19:19.310 --> 00:19:21.140
they expect it to behave
like a slider.

00:19:21.140 --> 00:19:22.480
Now this isn't a slider.

00:19:22.480 --> 00:19:25.240
They'll still know that it's
maybe a star rating gadget.

00:19:25.240 --> 00:19:27.650
But the point is it behaves
like a slider.

00:19:27.650 --> 00:19:30.530
The semantic equivalent to
what this is is a slider.

00:19:30.530 --> 00:19:33.190
So just if you have something
that's toggleable on a page,

00:19:33.190 --> 00:19:35.140
it might be some other
type of control.

00:19:35.140 --> 00:19:37.260
But conceptually it's
a checkbox.

00:19:37.260 --> 00:19:40.370
In this case, we've decided that
conceptually this behaves

00:19:40.370 --> 00:19:41.110
like a slider.

00:19:41.110 --> 00:19:43.700
You can use the left and right
arrows to change things.

00:19:43.700 --> 00:19:46.020
So let me turn on ChromeVox and
show you exactly what that

00:19:46.020 --> 00:19:47.240
looks like.

00:19:47.240 --> 00:19:49.110
FEMALE SPEAKER: Enabling
spoken feedback.

00:19:49.110 --> 00:19:50.100
Show all [? download-- ?]

00:19:50.100 --> 00:19:50.910
five stars.

00:19:50.910 --> 00:19:51.900
Fantastic.

00:19:51.900 --> 00:19:53.250
Slider five stars.

00:19:53.250 --> 00:19:54.520
Fantastic.

00:19:54.520 --> 00:19:56.110
DOMINIC MAZZONI: So, it was
a bit repetitive there.

00:19:56.110 --> 00:19:57.960
But you heard that it described
the slider.

00:19:57.960 --> 00:20:00.640
And it said the word slider,
indicating that's the role.

00:20:00.640 --> 00:20:03.580
And as I use the arrow keys
to change the value--

00:20:03.580 --> 00:20:05.330
FEMALE SPEAKER: Four
stars, awesome.

00:20:05.330 --> 00:20:07.190
Three stars, OK.

00:20:07.190 --> 00:20:08.990
DOMINIC MAZZONI: It reads the
new value of the slider.

00:20:08.990 --> 00:20:13.910
And all I needed was to update
these ARIA attributes.

00:20:13.910 --> 00:20:15.540
So that's what we covered
last year.

00:20:15.540 --> 00:20:17.290
And there's a bunch of other
examples like that.

00:20:17.290 --> 00:20:20.240
You can build custom list
boxes and combo boxes.

00:20:20.240 --> 00:20:23.250
And really tons of other custom
controls are really

00:20:23.250 --> 00:20:27.730
just special cases of pretty
common user interface widgets

00:20:27.730 --> 00:20:30.110
that users are already familiar
with in terms of

00:20:30.110 --> 00:20:31.340
their semantics.

00:20:31.340 --> 00:20:34.570
So it doesn't mean that you
should feel limited to

00:20:34.570 --> 00:20:37.015
standard types of input controls
when you're building

00:20:37.015 --> 00:20:38.170
your application.

00:20:38.170 --> 00:20:40.750
It just means that you can
express them in terms of

00:20:40.750 --> 00:20:42.800
semantics users are already
familiar with.

00:20:42.800 --> 00:20:44.670
So no matter what type of
device-- if they're using

00:20:44.670 --> 00:20:47.250
Braille, if they're using speech
output, if they need

00:20:47.250 --> 00:20:49.820
the screen magnified for them,
they get all the information

00:20:49.820 --> 00:20:51.760
they need in order
to work with it.

00:20:51.760 --> 00:20:54.720
FEMALE SPEAKER: Disabling
spoken feedback.

00:20:54.720 --> 00:20:56.880
DOMINIC MAZZONI: So I'd like
to talk about something a

00:20:56.880 --> 00:21:00.210
little bit new that I haven't
seen too many examples of out

00:21:00.210 --> 00:21:02.760
there, and that's
text editors.

00:21:02.760 --> 00:21:05.500
In last year I've seen a number
of websites that have

00:21:05.500 --> 00:21:08.020
started to build custom
text editors.

00:21:08.020 --> 00:21:11.360
And by custom, I mean instead
of something that's using a

00:21:11.360 --> 00:21:14.437
native control like an input,
a text area, or content

00:21:14.437 --> 00:21:18.390
editable, they're actually
building the whole experience

00:21:18.390 --> 00:21:19.700
themselves.

00:21:19.700 --> 00:21:21.990
And, in fact, at Google we
do this with Google Docs.

00:21:21.990 --> 00:21:24.360
Google Docs does not use
content editable.

00:21:24.360 --> 00:21:26.150
Everything is actually custom.

00:21:26.150 --> 00:21:29.630
And that's really necessary
in order to provide a real

00:21:29.630 --> 00:21:34.760
desktop-like experience for a
full featured word processor.

00:21:34.760 --> 00:21:36.370
There are all sorts
of examples.

00:21:36.370 --> 00:21:39.830
It could be some game where
you're filling something in.

00:21:39.830 --> 00:21:43.670
It could be like a fancier email
program where instead of

00:21:43.670 --> 00:21:47.340
just typing text into the To
field, you might be able to

00:21:47.340 --> 00:21:49.890
have objects that you can
interact with in there.

00:21:49.890 --> 00:21:53.460
But the point is that there are
lots of reasons why you as

00:21:53.460 --> 00:21:57.010
a web developer might want to
roll your own text editor.

00:21:57.010 --> 00:21:59.790
You might want to use
Canvas or WebGL.

00:21:59.790 --> 00:22:00.740
Who knows?

00:22:00.740 --> 00:22:05.600
The point is that we don't think
you should be limited in

00:22:05.600 --> 00:22:07.830
terms of accessibility just
because you want to build a

00:22:07.830 --> 00:22:09.050
custom text editor.

00:22:09.050 --> 00:22:11.090
So we investigated whether it
was possible to make that

00:22:11.090 --> 00:22:13.410
accessible too.

00:22:13.410 --> 00:22:14.880
And here's an example.

00:22:14.880 --> 00:22:17.000
And let me show you exactly
how it works.

00:22:17.000 --> 00:22:20.450
Before I turn on ChromeVox, I'll
just show that this is a

00:22:20.450 --> 00:22:23.760
text editor where you can
type things into it.

00:22:23.760 --> 00:22:26.960
And it behaves exactly
as you'd expect.

00:22:26.960 --> 00:22:29.570
This was all implemented
custom.

00:22:29.570 --> 00:22:30.940
It's a lot of work to implement

00:22:30.940 --> 00:22:32.100
all the little details.

00:22:32.100 --> 00:22:35.750
But it's just normal JavaScript
coding, fun

00:22:35.750 --> 00:22:38.090
exercise for the weekend.

00:22:38.090 --> 00:22:40.270
Let me turn on ChromeVox and
show you the accessible

00:22:40.270 --> 00:22:42.000
experience.

00:22:42.000 --> 00:22:45.334
FEMALE SPEAKER: Enabling
spoken feedback.

00:22:45.334 --> 00:22:46.720
DOMINIC MAZZONI: Let me--

00:22:46.720 --> 00:22:49.100
This is not a text area
or content editable.

00:22:49.100 --> 00:22:51.120
It's implemented in
pure JavaScript.

00:22:51.120 --> 00:22:53.130
Text box multiline.

00:22:53.130 --> 00:22:56.850
This is not a text area
or content editable.

00:22:56.850 --> 00:22:59.060
It's implemented in
pure JavaScript.

00:22:59.060 --> 00:23:01.740
E-N-T-E-D, implemented.

00:23:01.740 --> 00:23:05.160
It's, it's implemented in.

00:23:05.160 --> 00:23:07.080
DOMINIC MAZZONI: So I just gave
you a quick demo using

00:23:07.080 --> 00:23:09.980
the keyboard to move
through the text.

00:23:09.980 --> 00:23:12.220
And you see that ChromeVox
is giving feedback.

00:23:12.220 --> 00:23:15.350
That's the exact same feedback
you'd hear if this was a text

00:23:15.350 --> 00:23:17.260
area or content editable.

00:23:17.260 --> 00:23:19.420
I can make some changes.

00:23:19.420 --> 00:23:21.620
FEMALE SPEAKER: In
implemented.

00:23:21.620 --> 00:23:25.080
B-U-I-L-T, built, [INAUDIBLE]

00:23:25.080 --> 00:23:26.640
using.

00:23:26.640 --> 00:23:28.475
[? Roger ?].

00:23:28.475 --> 00:23:29.970
X, implemented.

00:23:29.970 --> 00:23:32.540
It's built using pure
JavaScript.

00:23:32.540 --> 00:23:34.710
DOMINIC MAZZONI: So all the
feedback you'd expect can be

00:23:34.710 --> 00:23:37.870
just as accessible to
a screen reader.

00:23:37.870 --> 00:23:39.960
FEMALE SPEAKER: Disabling
spoken feedback.

00:23:39.960 --> 00:23:41.850
DOMINIC MAZZONI: So how
did we do this?

00:23:41.850 --> 00:23:45.570
So in terms of what you need to
do as a web developer, it's

00:23:45.570 --> 00:23:46.910
actually not that complicated.

00:23:46.910 --> 00:23:48.730
You need to make it focusable.

00:23:48.730 --> 00:23:51.120
You give it an ARIA
role of textbox.

00:23:51.120 --> 00:23:53.630
And then the important thing
is that you use the native

00:23:53.630 --> 00:23:59.070
cursor selection that's already
in your browser's APIs

00:23:59.070 --> 00:24:02.250
in order to synchronize the
selection or cursor with

00:24:02.250 --> 00:24:02.700
what's seen.

00:24:02.700 --> 00:24:07.250
Now, in most browsers there's
no automatic flashing cursor

00:24:07.250 --> 00:24:09.440
just in the normal webpage,
if it's not inside a

00:24:09.440 --> 00:24:10.650
native input control.

00:24:10.650 --> 00:24:14.670
So in this case I built my
own flashing cursor.

00:24:14.670 --> 00:24:17.930
But the WebKit selection is
essentially still synchronized

00:24:17.930 --> 00:24:19.240
with that same place.

00:24:19.240 --> 00:24:22.050
And that's how the assistive
technology knows where the

00:24:22.050 --> 00:24:24.620
cursor is so that it can provide
the right feedback.

00:24:24.620 --> 00:24:26.400
You don't really need to tell
it anything other than that.

00:24:26.400 --> 00:24:28.960
You just need to update the
selection and update the

00:24:28.960 --> 00:24:30.680
contents of the text box.

00:24:30.680 --> 00:24:32.060
You can use ARIA in there.

00:24:32.060 --> 00:24:35.180
You can add objects in there and
give them an ARIA label.

00:24:35.180 --> 00:24:36.790
And people can interact
with them.

00:24:36.790 --> 00:24:38.740
All sorts of fancy things
you can do.

00:24:38.740 --> 00:24:41.520
Now in order to make this
possible, we made some changes

00:24:41.520 --> 00:24:44.410
to ChromeVox in order to have
it treat something with a

00:24:44.410 --> 00:24:47.850
role=textbox the same way it
would treat content editable.

00:24:47.850 --> 00:24:49.720
And it was just a
small change.

00:24:49.720 --> 00:24:51.920
And that actually worked
surprisingly well.

00:24:51.920 --> 00:24:53.810
And we've been digging
into WebKit and

00:24:53.810 --> 00:24:54.670
doing the same thing.

00:24:54.670 --> 00:24:57.620
So WebKit based browsers have
the same experience.

00:24:57.620 --> 00:25:00.490
And you can try this demo out
with other screen readers and

00:25:00.490 --> 00:25:01.630
the latest version of Chrome.

00:25:01.630 --> 00:25:05.020
And you'll get a similar
experience.

00:25:05.020 --> 00:25:06.970
We wanted to take this
one step further.

00:25:06.970 --> 00:25:10.560
Because one of my favorite new
features on the Chromebook and

00:25:10.560 --> 00:25:14.050
really Chrome OS and any Chrome
platform in general--

00:25:14.050 --> 00:25:16.900
but I really love it on my
Chromebook is that there's now

00:25:16.900 --> 00:25:20.290
a Secure Shell application.

00:25:20.290 --> 00:25:23.580
That means that right from the
webpage, without switching to

00:25:23.580 --> 00:25:26.630
another application, I can open
up a terminal to my Linux

00:25:26.630 --> 00:25:30.150
workstation, and compile my
code, and do whatever I need

00:25:30.150 --> 00:25:33.270
to do while still browsing
the web right in the same

00:25:33.270 --> 00:25:33.930
application.

00:25:33.930 --> 00:25:35.640
So it's great on
my Chromebook.

00:25:35.640 --> 00:25:37.270
I can use it on the desktop.

00:25:37.270 --> 00:25:39.060
And I was wondering if it was
possible to make that

00:25:39.060 --> 00:25:40.960
accessible too.

00:25:40.960 --> 00:25:44.930
So let me give you a demo
of what that looks like.

00:25:44.930 --> 00:25:48.055
I'm just going to open
the app drawer here.

00:25:54.270 --> 00:25:56.700
And instead of actually SSHing,
because I don't trust

00:25:56.700 --> 00:25:59.260
the network connection here, I'm
going to type [? crosh ?].

00:25:59.260 --> 00:26:02.960
Because Chrome OS has
a built-in shell.

00:26:02.960 --> 00:26:04.760
And I'm going to access
the local terminal.

00:26:04.760 --> 00:26:06.470
Let me turn on ChromeVox
so we can hear some

00:26:06.470 --> 00:26:07.690
spoken feedback now.

00:26:07.690 --> 00:26:09.910
FEMALE SPEAKER: Enabling
spoken feedback.

00:26:09.910 --> 00:26:11.810
Y-T-H-O-N.

00:26:11.810 --> 00:26:13.780
DOMINIC MAZZONI: So I'm just
going to run Python.

00:26:13.780 --> 00:26:17.150
And I'm going to just give
it a simple math command.

00:26:17.150 --> 00:26:17.390
So two--

00:26:17.390 --> 00:26:19.530
FEMALE SPEAKER: Two,
s, asterisk.

00:26:19.530 --> 00:26:20.990
Asterisk, one, six.

00:26:20.990 --> 00:26:23.920
DOMINIC MAZZONI: So two
to the power of 16.

00:26:23.920 --> 00:26:26.340
FEMALE SPEAKER: 65,536.

00:26:26.340 --> 00:26:28.100
DOMINIC MAZZONI: So you can
see that it's giving me

00:26:28.100 --> 00:26:29.475
feedback as I type.

00:26:29.475 --> 00:26:31.420
FEMALE SPEAKER: A-s-s-a.

00:26:31.420 --> 00:26:33.310
DOMINIC MAZZONI: It's giving me
feedback as I backspace, I

00:26:33.310 --> 00:26:33.990
move around.

00:26:33.990 --> 00:26:36.990
You can actually run Emacs
or VI and get spoken

00:26:36.990 --> 00:26:38.130
feedback for this.

00:26:38.130 --> 00:26:40.790
It turns out that this also
wasn't very difficult to do.

00:26:40.790 --> 00:26:41.780
Let me go back.

00:26:41.780 --> 00:26:43.280
FEMALE SPEAKER: Disabling
spoken feedback.

00:26:46.560 --> 00:26:47.880
DOMINIC MAZZONI: It wants to
know that I was going to close

00:26:47.880 --> 00:26:50.510
the terminal.

00:26:50.510 --> 00:26:54.770
So how does this work?

00:26:54.770 --> 00:26:58.310
All you need to do is just like
the previous example with

00:26:58.310 --> 00:27:00.990
the custom text box, just
make it focusable.

00:27:00.990 --> 00:27:03.090
Now we gave it a role
of textbox.

00:27:03.090 --> 00:27:05.910
At some point maybe ARIA will
be extended for another role

00:27:05.910 --> 00:27:07.000
for terminal.

00:27:07.000 --> 00:27:08.200
Because there's some other
terminal [INAUDIBLE]

00:27:08.200 --> 00:27:09.560
emulators out there.

00:27:09.560 --> 00:27:11.590
But it turns out that with
just a couple of extra

00:27:11.590 --> 00:27:14.270
heuristics to handle the types
of things that happen in a

00:27:14.270 --> 00:27:16.490
terminal, we were able to
get ChromeVox to speak

00:27:16.490 --> 00:27:17.600
things the same way.

00:27:17.600 --> 00:27:18.810
So we think this
is really cool.

00:27:18.810 --> 00:27:22.440
So now on any Chromebook, you
can open up the Secure Shell

00:27:22.440 --> 00:27:26.230
application and get an
accessible shell experience

00:27:26.230 --> 00:27:29.290
with all the spoken feedback
you'd expect.

00:27:29.290 --> 00:27:31.580
So at this point, I'm going to
turn it over to Charles, where

00:27:31.580 --> 00:27:33.670
he's going to talk about taking
things in the next

00:27:33.670 --> 00:27:35.860
level, from just accessible,
to really

00:27:35.860 --> 00:27:39.080
usable for power users.

00:27:39.080 --> 00:27:42.380
CHARLES CHEN: Thanks, Dominic.

00:27:42.380 --> 00:27:45.030
So, Rachel and Dominic here
both gave some really

00:27:45.030 --> 00:27:49.090
excellent advice on how to make
your web app accessible.

00:27:49.090 --> 00:27:52.760
But what happens if you do all
this work, and you've made it

00:27:52.760 --> 00:27:56.450
so that a screen reader can
do a faithful audio

00:27:56.450 --> 00:28:01.110
representation of your web
content to the user, but in

00:28:01.110 --> 00:28:04.720
doing so it becomes tedious
for frequent users who use

00:28:04.720 --> 00:28:07.880
your app hours and
hours every day?

00:28:07.880 --> 00:28:10.380
Because if a user has used your
app very frequently, they

00:28:10.380 --> 00:28:12.020
know the layout.

00:28:12.020 --> 00:28:14.800
Sometimes if you give them too
much information, and you give

00:28:14.800 --> 00:28:18.150
it to them for every single
instance of it, it can get

00:28:18.150 --> 00:28:18.700
repetitive.

00:28:18.700 --> 00:28:19.355
It can get slow.

00:28:19.355 --> 00:28:21.600
It actually bogs them down.

00:28:21.600 --> 00:28:25.340
So let me show an
example of that.

00:28:25.340 --> 00:28:28.470
So I'm actually going
to show Google+.

00:28:28.470 --> 00:28:32.520
So, [? strings ?] on Google+
are accessible.

00:28:32.520 --> 00:28:36.140
It is a very faithful audio
representation of what a side

00:28:36.140 --> 00:28:37.790
user would see on the screen.

00:28:37.790 --> 00:28:40.290
But sometimes it can be
a little bit much.

00:28:40.290 --> 00:28:43.710
So without further ado, I'm
going to jump into that.

00:28:48.720 --> 00:28:49.970
FEMALE SPEAKER: Enabling
spoken feedback.

00:28:52.760 --> 00:28:54.010
Options menu.

00:28:56.654 --> 00:28:57.110
CHARLES CHEN: OK.

00:28:57.110 --> 00:28:58.810
Let's go through a couple
of posts here.

00:29:05.440 --> 00:29:08.660
FEMALE SPEAKER: Options menu
Larry Page, June 27, 2012,

00:29:08.660 --> 00:29:13.800
1:39, 58 PM, edited June
27, 2012, 1:55,

00:29:13.800 --> 00:29:15.330
12 PM, sharing details.

00:29:15.330 --> 00:29:17.890
I've been having great fun
using our new Nexus seven

00:29:17.890 --> 00:29:19.240
tablet announced today.

00:29:19.240 --> 00:29:23.970
It's amazing, only $199, and
it includes a $25 credit to

00:29:23.970 --> 00:29:24.970
the Google Play Store.

00:29:24.970 --> 00:29:26.460
It has amazing battery life.

00:29:26.460 --> 00:29:29.500
[? It's ?] super fast with 16
total cores, 12 for graphics

00:29:29.500 --> 00:29:30.470
and is thin and light.

00:29:30.470 --> 00:29:31.540
Shipping mid July.

00:29:31.540 --> 00:29:35.690
Order one now at link below in
US, UK, Canada, Australia.

00:29:35.690 --> 00:29:36.480
More coming soon.

00:29:36.480 --> 00:29:39.370
Also really enjoying all our
other Google I/O conference

00:29:39.370 --> 00:29:42.750
announcements and more to come,
com/image Nexus seven

00:29:42.750 --> 00:29:43.280
Google Play.

00:29:43.280 --> 00:29:45.145
Nexus seven, made
for Google Play.

00:29:45.145 --> 00:29:46.240
Plus one this post.

00:29:46.240 --> 00:29:47.040
Share this post.

00:29:47.040 --> 00:29:48.580
Start a Hangout about
this post.

00:29:48.580 --> 00:29:51.150
Activity on this post,
409 comments.

00:29:51.150 --> 00:29:55.450
Gregor Adamczyk, June 29,
2012, 6:38 35 AM.

00:29:55.450 --> 00:29:56.400
Not in Germany.

00:29:56.400 --> 00:30:00.550
Adzikir Iman, June 29,
2012, 10:18, 58 AM.

00:30:00.550 --> 00:30:01.430
Wait for Indonesia.

00:30:01.430 --> 00:30:04.340
Add comment.

00:30:04.340 --> 00:30:04.556
CHARLES CHEN: OK.

00:30:04.556 --> 00:30:05.840
Thank you, ARIA.

00:30:05.840 --> 00:30:10.240
So as you see here, this is a
very faithful one for one

00:30:10.240 --> 00:30:14.750
audio representation of what a
side user sees on the screen.

00:30:14.750 --> 00:30:17.150
You see the user name,
Larry Page.

00:30:17.150 --> 00:30:18.400
You see the date.

00:30:18.400 --> 00:30:21.340
And you see that little circle
up there in the upper right

00:30:21.340 --> 00:30:21.950
hand corner?

00:30:21.950 --> 00:30:24.160
I'm going to switch back to the
slide so you can see it

00:30:24.160 --> 00:30:25.360
more easily.

00:30:25.360 --> 00:30:26.850
FEMALE SPEAKER: Disabling
spoken feedback.

00:30:30.434 --> 00:30:30.890
CHARLES CHEN: OK.

00:30:30.890 --> 00:30:31.980
So I've highlighted that.

00:30:31.980 --> 00:30:34.580
So if you see the red
circle in the

00:30:34.580 --> 00:30:36.230
upper right hand corner?

00:30:36.230 --> 00:30:37.820
That's a options menu.

00:30:37.820 --> 00:30:39.890
Now for a side user, it's
not very distracting.

00:30:39.890 --> 00:30:41.220
Because it's just up there.

00:30:41.220 --> 00:30:42.090
You see it.

00:30:42.090 --> 00:30:43.200
I can click on it.

00:30:43.200 --> 00:30:45.050
That's cool.

00:30:45.050 --> 00:30:47.030
But in order to make that
accessible you have to say

00:30:47.030 --> 00:30:47.940
what it is.

00:30:47.940 --> 00:30:50.590
That's why at the beginning of
the post it said Options Menu

00:30:50.590 --> 00:30:51.940
before it got to any
of the content.

00:30:51.940 --> 00:30:54.680
Because that's the first
thing that's up there.

00:30:54.680 --> 00:30:59.030
The other thing that you heard
is after Larry's initial post,

00:30:59.030 --> 00:31:02.810
you also heard plus one this
post, reshare, start a Hangout

00:31:02.810 --> 00:31:03.840
about this post.

00:31:03.840 --> 00:31:06.410
And all of these are really
important features and things

00:31:06.410 --> 00:31:08.140
that you can do with
this post.

00:31:08.140 --> 00:31:11.440
But if you're using Google+ for
several hours each day,

00:31:11.440 --> 00:31:14.350
you know that you can do that
for every single post.

00:31:14.350 --> 00:31:19.110
So why do you need to hear it
every time it's up there?

00:31:19.110 --> 00:31:22.290
And also for a [? side ?]
user, if you look at the

00:31:22.290 --> 00:31:25.830
original post that Larry made,
you see that the comments are

00:31:25.830 --> 00:31:27.660
a little bit indented,
a little bit off

00:31:27.660 --> 00:31:29.030
to side, and smaller.

00:31:29.030 --> 00:31:30.000
So you can glance at it.

00:31:30.000 --> 00:31:32.630
And you get an idea that yeah,
there are comments there.

00:31:32.630 --> 00:31:33.130
Good enough.

00:31:33.130 --> 00:31:35.390
You don't really have to
focus on comments or

00:31:35.390 --> 00:31:37.340
get into that content.

00:31:37.340 --> 00:31:41.510
However if you're presenting all
that information through

00:31:41.510 --> 00:31:44.360
spoken feedback, that can be a
little bit overwhelming as we

00:31:44.360 --> 00:31:46.610
all just experienced here.

00:31:46.610 --> 00:31:49.360
It read all of the menus,
all of the buttons.

00:31:49.360 --> 00:31:53.760
And it also read all of the
comments in one shot.

00:31:53.760 --> 00:31:57.150
So while that is a very faithful
representation, it's

00:31:57.150 --> 00:32:01.790
not necessarily the experience
that a user who has used this

00:32:01.790 --> 00:32:04.360
app for a long time would
want to have.

00:32:04.360 --> 00:32:06.400
So can we do something that's
a little bit better?

00:32:06.400 --> 00:32:09.890
Can we do something that's
streamlined that takes this to

00:32:09.890 --> 00:32:12.870
the next level from just being
accessible to be something

00:32:12.870 --> 00:32:15.130
that's really useful, really
efficient, and something

00:32:15.130 --> 00:32:17.530
that's really fun that
people want to use.

00:32:17.530 --> 00:32:18.990
And the answer is yes.

00:32:18.990 --> 00:32:22.060
We can do that with ChromeVox
Extensions, which I am pleased

00:32:22.060 --> 00:32:24.020
to announce today.

00:32:24.020 --> 00:32:28.410
And the way these work is these
are some APIs we've

00:32:28.410 --> 00:32:30.220
added to ChromeVox.

00:32:30.220 --> 00:32:32.500
So ChromeVox Extension
is really

00:32:32.500 --> 00:32:33.940
just a Chrome Extension.

00:32:33.940 --> 00:32:37.480
But it has a few extra API calls
to make it play nicely

00:32:37.480 --> 00:32:39.870
with ChromeVox.

00:32:39.870 --> 00:32:43.930
So the motivation behind this
is that regular Chrome

00:32:43.930 --> 00:32:48.440
Extensions are there to help
heavy users of applications

00:32:48.440 --> 00:32:50.330
get their work done
more efficiently.

00:32:50.330 --> 00:32:53.410
It can help reformat content
so that it's

00:32:53.410 --> 00:32:54.920
easier to look through.

00:32:54.920 --> 00:32:59.440
It can add additional shortcuts
and ways to simplify

00:32:59.440 --> 00:33:00.340
your workflow.

00:33:00.340 --> 00:33:03.440
And that's the same motivation
for ChromeVox Extensions.

00:33:03.440 --> 00:33:07.440
It's the same idea but applied
to spoken feedback.

00:33:07.440 --> 00:33:12.080
So one API that would be
extremely useful right now

00:33:12.080 --> 00:33:15.830
would be the Set Speech
for Node API call.

00:33:15.830 --> 00:33:19.480
What this call does is, it lets
you take any DOM node on

00:33:19.480 --> 00:33:23.830
a page and give ChromeVox a hint
that perhaps the best way

00:33:23.830 --> 00:33:28.140
to speak it would actually be
with this set of rules.

00:33:28.140 --> 00:33:31.470
And with these rules you can
control the exact message to

00:33:31.470 --> 00:33:34.790
be spoken as well as some of the
more subtle aspects such

00:33:34.790 --> 00:33:38.440
as intonation, speech,
pitch, and so forth.

00:33:38.440 --> 00:33:41.820
You can also use this, of
course, to rearrange how

00:33:41.820 --> 00:33:45.840
things get spoken and the order
in which you hear them.

00:33:45.840 --> 00:33:48.500
So let's try the same
example again

00:33:48.500 --> 00:33:49.900
with the PlusVox extension.

00:33:58.270 --> 00:34:00.065
By the way, just a quick
interrupt so

00:34:00.065 --> 00:34:01.380
that everyone knows--

00:34:01.380 --> 00:34:05.025
the way that I've been
driving Google+ is

00:34:05.025 --> 00:34:06.240
with the J and K keys.

00:34:06.240 --> 00:34:07.490
These are keyboard shortcuts.

00:34:07.490 --> 00:34:10.679
And they are already built
into the Google+ stream.

00:34:10.679 --> 00:34:13.008
So I didn't really have to
do that much custom here.

00:34:15.639 --> 00:34:15.880
OK.

00:34:15.880 --> 00:34:18.310
So I'm going to enable
PlusVox.

00:34:18.310 --> 00:34:20.219
I'm going to reload the page.

00:34:20.219 --> 00:34:21.469
Let's try that again.

00:34:29.880 --> 00:34:32.860
It works better if you
turn on ChromeVox.

00:34:32.860 --> 00:34:34.170
FEMALE SPEAKER: Enabling
spoken feedback.

00:34:41.110 --> 00:34:41.909
CHARLES CHEN: Now we don't
have to go all

00:34:41.909 --> 00:34:42.760
the way down to that.

00:34:42.760 --> 00:34:44.370
We can just do any
other posts.

00:34:44.370 --> 00:34:46.340
And you'll hear it.

00:34:46.340 --> 00:34:49.630
FEMALE SPEAKER: Larry Page, June
27, 2012, edited public

00:34:49.630 --> 00:34:52.360
Google [? Glass ?] live demo
today via Hangouts, Hi over

00:34:52.360 --> 00:34:53.400
San Francisco.

00:34:53.400 --> 00:34:56.429
This is why I love working
with +Sergei Brin.

00:34:56.429 --> 00:34:56.790
CHARLES CHEN: OK.

00:34:56.790 --> 00:35:00.450
So rather than going through the
entire post, this actually

00:35:00.450 --> 00:35:02.820
illustrates the point I was
trying to make, which is

00:35:02.820 --> 00:35:06.190
notice how now it starts off
directly with the user name

00:35:06.190 --> 00:35:06.950
and with the time.

00:35:06.950 --> 00:35:11.170
It didn't actually force you to
listen to an Options menu.

00:35:11.170 --> 00:35:14.826
Had I let it continue reading,
it would also have not forced

00:35:14.826 --> 00:35:17.230
you to hear plus-one this post,

00:35:17.230 --> 00:35:19.020
reshare, start a Hangout.

00:35:19.020 --> 00:35:21.360
It will also have summarized the
comments by just letting

00:35:21.360 --> 00:35:23.880
the user know how many comments
are available.

00:35:23.880 --> 00:35:25.510
And then the user can go
through the comments

00:35:25.510 --> 00:35:28.860
individually with other built-in
shortcut keys such as

00:35:28.860 --> 00:35:31.800
N and P, such as--

00:35:31.800 --> 00:35:32.210
FEMALE SPEAKER: Ross
[? Smith ?]

00:35:32.210 --> 00:35:34.750
June 27, 2012, first
to comment.

00:35:34.750 --> 00:35:37.080
Plus eight.

00:35:37.080 --> 00:35:37.164
CHARLES CHEN: Yeah.

00:35:37.164 --> 00:35:37.430
Like that.

00:35:37.430 --> 00:35:40.830
Because, of course, you always
want to know first post.

00:35:40.830 --> 00:35:43.130
So going back to--

00:35:43.130 --> 00:35:44.580
FEMALE SPEAKER: Disabling
spoken feedback.

00:35:50.560 --> 00:35:50.900
CHARLES CHEN: OK.

00:35:50.900 --> 00:35:54.240
So let's see how we did that.

00:35:54.240 --> 00:35:55.930
I'm going to go to a
code slide here.

00:35:55.930 --> 00:35:57.840
So it's actually
fairly simple.

00:35:57.840 --> 00:36:00.780
As I mentioned earlier, Google+
already gives you the

00:36:00.780 --> 00:36:01.670
keyboard shortcuts.

00:36:01.670 --> 00:36:03.650
It already moves focus
around for you.

00:36:03.650 --> 00:36:07.340
So all I really had to do here
was just to rearrange the

00:36:07.340 --> 00:36:10.210
content so that it was spoken in
a way that's more sensible

00:36:10.210 --> 00:36:13.780
for heavy users of the app who
are already familiar with it.

00:36:13.780 --> 00:36:16.240
And we don't really need to
hear all of the content

00:36:16.240 --> 00:36:18.850
multiple times.

00:36:18.850 --> 00:36:21.950
So what I have here is it
actually boils down to one

00:36:21.950 --> 00:36:25.800
really simple method, generate
speech for thread.

00:36:25.800 --> 00:36:29.110
So if I see a Google+ thread
getting focus, I

00:36:29.110 --> 00:36:30.980
have a focus watcher.

00:36:30.980 --> 00:36:34.130
If it is a Google+ thread, what
I do with it is I run

00:36:34.130 --> 00:36:34.470
through it.

00:36:34.470 --> 00:36:38.480
I extract the content, such as
who the author is, what's the

00:36:38.480 --> 00:36:41.490
date and time, the actual
content from the post.

00:36:41.490 --> 00:36:44.340
And I do a little bit of
JavaScript to figure out how

00:36:44.340 --> 00:36:46.320
many comments there are.

00:36:46.320 --> 00:36:48.860
I put that together into
a node description.

00:36:48.860 --> 00:36:53.330
And I use the ChromeVox API,
set speech for node, and I

00:36:53.330 --> 00:36:55.100
attach it to that purpose.

00:36:55.100 --> 00:36:58.360
So when ChromeVox focuses on
it, it sees that there is a

00:36:58.360 --> 00:36:59.230
hint there.

00:36:59.230 --> 00:37:01.380
And it uses that hint
to speak it.

00:37:01.380 --> 00:37:05.180
So you get a much more fluid,
much more fluent experience

00:37:05.180 --> 00:37:10.410
that's optimized for heavy users
of your application.

00:37:10.410 --> 00:37:14.110
By the way, there are several
other APIs that come in handy.

00:37:14.110 --> 00:37:17.910
For example you can call
syncToNode, which lets you

00:37:17.910 --> 00:37:20.880
easily synchronize between
ChromeVox's reading position

00:37:20.880 --> 00:37:22.760
and where you are
in the web app.

00:37:22.760 --> 00:37:25.640
And also there's a click
function, which is really

00:37:25.640 --> 00:37:27.950
helpful because it simulates
a mouse click.

00:37:27.950 --> 00:37:31.545
So if you call it a click
function, then you can chain

00:37:31.545 --> 00:37:32.820
it together several times.

00:37:32.820 --> 00:37:34.920
And you can do that
to run through a

00:37:34.920 --> 00:37:36.780
workflow very quickly.

00:37:36.780 --> 00:37:39.180
There's a full list of API's
that will be available.

00:37:39.180 --> 00:37:42.790
So I encourage you to get these
slides from the web.

00:37:42.790 --> 00:37:44.710
And you will be able to
see the full list.

00:37:44.710 --> 00:37:45.930
And happy hacking.

00:37:45.930 --> 00:37:48.350
I look forward to seeing some
really awesome ChromeVox

00:37:48.350 --> 00:37:50.040
Extensions.

00:37:50.040 --> 00:37:53.100
By the way, just so that we're
clear on this, again, because

00:37:53.100 --> 00:37:56.700
these are the same as Chrome
Extensions, so they can apply

00:37:56.700 --> 00:38:00.290
both to your own web app or to
any web app that you feel

00:38:00.290 --> 00:38:02.110
could benefit from them.

00:38:02.110 --> 00:38:03.570
So thank you.

00:38:03.570 --> 00:38:05.493
And feel free to ask me
questions if you have any

00:38:05.493 --> 00:38:07.551
about this.

00:38:07.551 --> 00:38:09.450
And now, moving back
to Dominic to

00:38:09.450 --> 00:38:11.410
talk more about APIs.

00:38:11.410 --> 00:38:12.220
DOMINIC MAZZONI: Thanks,
Charles.

00:38:12.220 --> 00:38:14.670
So for the last section of the
talk here, what I'd like to

00:38:14.670 --> 00:38:16.680
talk about are APIs.

00:38:16.680 --> 00:38:17.940
Now these are--

00:38:17.940 --> 00:38:19.610
I wrote for accessibility.

00:38:19.610 --> 00:38:22.520
But they're actually general
purpose APIs that are

00:38:22.520 --> 00:38:26.900
available in Chrome and, in most
cases, in other browsers.

00:38:26.900 --> 00:38:29.900
And these are APIs that we've
found really useful for

00:38:29.900 --> 00:38:30.770
accessibility.

00:38:30.770 --> 00:38:33.270
And we've used these as building
blocks to do really

00:38:33.270 --> 00:38:34.500
cool things with them.

00:38:34.500 --> 00:38:39.450
But they are general purpose.

00:38:39.450 --> 00:38:41.520
You can use them for all sorts
of interesting things.

00:38:41.520 --> 00:38:44.200
And I'd like to share some of
those so that it might inspire

00:38:44.200 --> 00:38:46.790
you to build custom
accessibility extensions or

00:38:46.790 --> 00:38:50.080
tools, or build them into your
apps or other things.

00:38:50.080 --> 00:38:52.420
So one of the first ones that
I've been following and I'm

00:38:52.420 --> 00:38:55.850
really excited about is
CSS3 Filter Effects.

00:38:55.850 --> 00:38:58.510
So this doesn't inherently
have anything to do with

00:38:58.510 --> 00:38:59.500
accessibility.

00:38:59.500 --> 00:39:01.580
It turns out to be really
useful though.

00:39:01.580 --> 00:39:03.840
This is a new emerging
W3C standard.

00:39:03.840 --> 00:39:06.450
But it's supported in the latest
versions of Chrome.

00:39:06.450 --> 00:39:09.470
And it allows you to apply
filters, like color filters

00:39:09.470 --> 00:39:11.960
essentially, to just about
anything on the page.

00:39:11.960 --> 00:39:14.690
And they apply to everything
that's contained within an

00:39:14.690 --> 00:39:17.430
element-- so including
iframes and video.

00:39:17.430 --> 00:39:18.090
It's really cool.

00:39:18.090 --> 00:39:19.560
The whole page can
be transformed.

00:39:19.560 --> 00:39:21.080
You can blur things.

00:39:21.080 --> 00:39:23.220
You can invert things.

00:39:23.220 --> 00:39:24.480
You can chain them together.

00:39:24.480 --> 00:39:27.460
So you can see the bottom
example there, I can invert an

00:39:27.460 --> 00:39:30.560
element and then change
the contrast of it.

00:39:30.560 --> 00:39:33.130
This is great for low vision
accessibility.

00:39:33.130 --> 00:39:35.750
It means that if you've got some
content on the page that

00:39:35.750 --> 00:39:40.060
just really does not work for
users with low vision who have

00:39:40.060 --> 00:39:42.810
a really hard time with dark
text on a really bright

00:39:42.810 --> 00:39:46.930
background, you can just with a
single line of CSS fix that

00:39:46.930 --> 00:39:50.230
problem rather than having a
whole custom stylesheet that

00:39:50.230 --> 00:39:53.370
readjusts hundreds of colors
throughout your application.

00:39:53.370 --> 00:39:57.120
So as an example right here
just by applying this one

00:39:57.120 --> 00:39:59.990
filter to the HTML element,
it inverts

00:39:59.990 --> 00:40:00.920
everything on the page.

00:40:00.920 --> 00:40:03.330
Notice it also inverted
the image.

00:40:03.330 --> 00:40:05.800
So you can fix that.

00:40:05.800 --> 00:40:09.070
Because thankfully invert
is invertible.

00:40:09.070 --> 00:40:15.860
And instead just apply the
filter again to images.

00:40:15.860 --> 00:40:20.030
And in this case I wrote it so
that it inverts JPEG images.

00:40:20.030 --> 00:40:21.390
Because those tend
to be photos.

00:40:21.390 --> 00:40:23.920
You tend to want to see those
in the original form.

00:40:23.920 --> 00:40:26.460
But if you notice the logo at
the bottom when I apply this

00:40:26.460 --> 00:40:28.830
here, now the photo
looks great.

00:40:28.830 --> 00:40:30.570
The logo at the bottom
was still inverted.

00:40:30.570 --> 00:40:32.940
I've found that [? tine ?]
tends to work better.

00:40:32.940 --> 00:40:36.440
Because PNG and JIF images tend
to be integrated with the

00:40:36.440 --> 00:40:39.970
content of the page, whereas
JPEG images tend to be photos.

00:40:39.970 --> 00:40:41.070
This is just a heuristic.

00:40:41.070 --> 00:40:44.450
But it shows how this simple API
can make it so much easier

00:40:44.450 --> 00:40:47.610
to change the contrast, and
invert the colors, and do

00:40:47.610 --> 00:40:50.020
other things, and still preserve
photos for your

00:40:50.020 --> 00:40:51.700
application.

00:40:51.700 --> 00:40:55.430
So we've built this actually
into an extension that is in

00:40:55.430 --> 00:40:56.540
the Web Store now.

00:40:56.540 --> 00:40:57.950
It's just called
High Contrast.

00:40:57.950 --> 00:41:01.860
And it allows you to invert,
or change the contrast, or

00:41:01.860 --> 00:41:04.000
change grayscale
on any webpage.

00:41:04.000 --> 00:41:06.690
And it will remember that
on a per site basis.

00:41:06.690 --> 00:41:08.270
So this is already something
that's popular

00:41:08.270 --> 00:41:09.110
with a lot of users.

00:41:09.110 --> 00:41:12.120
Because you can customize this
for every single site out

00:41:12.120 --> 00:41:14.470
there rather than trying to have
one global setting that

00:41:14.470 --> 00:41:16.880
applies to everything.

00:41:16.880 --> 00:41:19.000
But this is something you could
do within your own site.

00:41:19.000 --> 00:41:20.140
It's something that
you could do with

00:41:20.140 --> 00:41:22.020
another custom extension.

00:41:22.020 --> 00:41:24.640
It's a cool API that
I'm excited about.

00:41:24.640 --> 00:41:27.300
The next one that I want to talk
about really briefly is,

00:41:27.300 --> 00:41:31.110
in Chrome there's a Speech
Recognition Extension API.

00:41:31.110 --> 00:41:33.770
Now a lot of you may have seen--
if you were at the

00:41:33.770 --> 00:41:36.630
keynote last year, one of the
things that was demoed was the

00:41:36.630 --> 00:41:40.160
ability to add a speech input
to any text box on a page.

00:41:40.160 --> 00:41:44.850
In fact you can just take an
input, add a x-webkit-speech--

00:41:44.850 --> 00:41:46.900
and when this is standardized,
all you'll have to do is add

00:41:46.900 --> 00:41:48.680
the speech attribute.

00:41:48.680 --> 00:41:50.145
And you get a little
microphone icon.

00:41:50.145 --> 00:41:52.030
The user can click on that.

00:41:52.030 --> 00:41:53.140
And they can speak.

00:41:53.140 --> 00:41:56.380
And whatever they speak will
just get added to that box.

00:41:56.380 --> 00:41:58.476
And in fact, you can get a
JavaScript callback so you

00:41:58.476 --> 00:41:59.920
know when that's succeeded.

00:41:59.920 --> 00:42:02.300
And you can do something
dynamically.

00:42:02.300 --> 00:42:06.610
But within Chrome, if you want
lower level access, there's an

00:42:06.610 --> 00:42:08.660
experimental extension API--

00:42:08.660 --> 00:42:11.010
experimental meaning you
can play with it now.

00:42:11.010 --> 00:42:13.670
But you can't deliver an
end user application

00:42:13.670 --> 00:42:15.580
using this API yet.

00:42:15.580 --> 00:42:18.180
Because users would have to turn
on an experimental flag

00:42:18.180 --> 00:42:19.850
in order to use it.

00:42:19.850 --> 00:42:21.640
The API--

00:42:21.640 --> 00:42:24.260
you can read this sort of
from bottom to top here.

00:42:24.260 --> 00:42:25.810
You essentially start.

00:42:25.810 --> 00:42:27.550
And then you add some
event listeners.

00:42:27.550 --> 00:42:30.470
And then those event listeners
get called when speech is

00:42:30.470 --> 00:42:31.510
recognized.

00:42:31.510 --> 00:42:33.870
And you get a whole list
of hypotheses.

00:42:33.870 --> 00:42:35.080
And that allows you to build an

00:42:35.080 --> 00:42:37.340
application that's automated.

00:42:37.340 --> 00:42:39.580
And that's sort of that idea
I want to demonstrate here.

00:42:39.580 --> 00:42:42.530
So say you have an email
application.

00:42:42.530 --> 00:42:44.120
Open email from Larry Page.

00:42:47.930 --> 00:42:49.980
And you can get back some
results like this.

00:42:49.980 --> 00:42:53.120
So the highest confidence one
was, open email from Larry

00:42:53.120 --> 00:42:54.980
Page, which is exactly
what I spoke.

00:42:54.980 --> 00:42:57.780
But you'll see some other
hypotheses down there, open

00:42:57.780 --> 00:42:59.940
email and merry paint.

00:42:59.940 --> 00:43:02.510
The cool thing is because you
get all those hypotheses, even

00:43:02.510 --> 00:43:05.230
if the first result wasn't
correct, you could do your own

00:43:05.230 --> 00:43:08.530
processing to try to guess the
intent of the user or present

00:43:08.530 --> 00:43:09.920
the user with some options.

00:43:09.920 --> 00:43:12.860
So this is really cool
for accessibility.

00:43:12.860 --> 00:43:15.960
This makes it possible just
using pure web technology to

00:43:15.960 --> 00:43:20.720
build automation applications
for hands free use, for people

00:43:20.720 --> 00:43:22.410
who have poor motor control.

00:43:22.410 --> 00:43:24.310
And anyway this is
an exciting API.

00:43:24.310 --> 00:43:26.190
And I'm looking forward to
seeing the things that

00:43:26.190 --> 00:43:28.990
developers will build
with that.

00:43:28.990 --> 00:43:31.930
And then last, I'd like to talk
about the Chrome's Text

00:43:31.930 --> 00:43:34.100
to Speech Extension API.

00:43:34.100 --> 00:43:35.480
Last year we talked
about this.

00:43:35.480 --> 00:43:38.210
And last year this API
was experimental.

00:43:38.210 --> 00:43:41.230
But in October this was released
as a stable API for

00:43:41.230 --> 00:43:42.990
all developers in Chrome.

00:43:42.990 --> 00:43:46.090
There's also a W3C standard
that's in the works.

00:43:46.090 --> 00:43:48.480
So at some point this might be
part of the web platform.

00:43:48.480 --> 00:43:50.250
It'll be available
in any web page.

00:43:50.250 --> 00:43:51.960
You can try it out
in Chrome now.

00:43:51.960 --> 00:43:54.410
And there are dozens of talking
applications and

00:43:54.410 --> 00:43:57.260
extensions in the Web Store,
including ChromeVox.

00:43:57.260 --> 00:44:01.270
But there's talking alarm clocks
and talking notifiers

00:44:01.270 --> 00:44:03.980
for your Twitter or your
email, or all sorts

00:44:03.980 --> 00:44:06.420
of things like that.

00:44:06.420 --> 00:44:08.400
This is obviously really
cool for accessibility.

00:44:08.400 --> 00:44:09.610
And I wanted to show
off some of the

00:44:09.610 --> 00:44:11.580
things that are possible.

00:44:11.580 --> 00:44:14.650
Just to get something to speak
within your application is

00:44:14.650 --> 00:44:16.800
really simple.

00:44:16.800 --> 00:44:18.000
I've got some code right here.

00:44:18.000 --> 00:44:20.000
And I'm just going to eval
that code directly.

00:44:20.000 --> 00:44:22.380
FEMALE SPEAKER: Hello, world.

00:44:22.380 --> 00:44:24.280
DOMINIC MAZZONI: You can change
the rate if you want it

00:44:24.280 --> 00:44:26.170
to speak a little bit faster.

00:44:26.170 --> 00:44:28.670
So I'm just going
to change this.

00:44:28.670 --> 00:44:32.470
And maybe you want to raise the
pitch a little bit, make

00:44:32.470 --> 00:44:33.985
it sound a little
higher pitched.

00:44:33.985 --> 00:44:36.720
FEMALE SPEAKER: Hello, world.

00:44:36.720 --> 00:44:38.960
DOMINIC MAZZONI: It's that
easy to make some simple

00:44:38.960 --> 00:44:40.440
changes and just to
get some speech.

00:44:40.440 --> 00:44:43.950
So if you have a Chrome app or
extension and you want to add

00:44:43.950 --> 00:44:47.550
the ability to speak,
it's that easy.

00:44:47.550 --> 00:44:50.670
There's also a companion API
called the Chrome Text to

00:44:50.670 --> 00:44:52.740
Speech Engine API.

00:44:52.740 --> 00:44:55.620
And what that means for end
users is that you can install

00:44:55.620 --> 00:44:58.570
a new voice with just a click
from the Chrome Web Store.

00:44:58.570 --> 00:45:03.690
And that new voice intercepts
calls to the text to speech

00:45:03.690 --> 00:45:04.920
speed call.

00:45:04.920 --> 00:45:08.810
And then it can use any HTML
technique out there in order

00:45:08.810 --> 00:45:11.310
to actually generate
that speech.

00:45:11.310 --> 00:45:13.250
So an example of it looks
just like this.

00:45:13.250 --> 00:45:14.420
This is the extent of the API.

00:45:14.420 --> 00:45:18.180
You just register speak and stop
listeners and then send

00:45:18.180 --> 00:45:21.260
events back as things happen.

00:45:21.260 --> 00:45:22.890
Now how would you actually
implement a voice?

00:45:22.890 --> 00:45:26.810
Well if you have speech on some
remote server, you could

00:45:26.810 --> 00:45:28.240
generate the speech
on a remote server

00:45:28.240 --> 00:45:29.600
and stream that down.

00:45:29.600 --> 00:45:31.860
You could do it using
pure JavaScript.

00:45:31.860 --> 00:45:34.820
If you were at one of the other
talks about HTML5 audio

00:45:34.820 --> 00:45:36.760
APIs, they're really
sophisticated.

00:45:36.760 --> 00:45:39.035
There's a really cool demo out
there of generating speech

00:45:39.035 --> 00:45:40.470
using pure JavaScript.

00:45:40.470 --> 00:45:43.290
But our preferred solution is
Native Client, where you can

00:45:43.290 --> 00:45:46.510
take a high quality speech
engine written at a lower

00:45:46.510 --> 00:45:49.540
level languages like C++,
compile that down to Native

00:45:49.540 --> 00:45:53.540
code that's securely run in the
Native Client sandbox, so

00:45:53.540 --> 00:45:57.810
that it'll run on any platform
with a safe user click so that

00:45:57.810 --> 00:46:01.200
users don't have to worry about
Native code that might

00:46:01.200 --> 00:46:04.830
have security exploits
or something in it.

00:46:04.830 --> 00:46:08.250
So in fact I'd like to introduce
a new text to speech

00:46:08.250 --> 00:46:10.380
engine that's available
for download now.

00:46:10.380 --> 00:46:12.210
It's the one you've
been listening to.

00:46:12.210 --> 00:46:15.540
This is the same speech engine
that's being used in Android.

00:46:15.540 --> 00:46:18.860
So if you all saw the keynote
with the new Voice Search

00:46:18.860 --> 00:46:21.970
feature in Android and you heard
that voice, that voice

00:46:21.970 --> 00:46:23.650
is actually available
to you to run on

00:46:23.650 --> 00:46:25.040
the client in Chrome.

00:46:25.040 --> 00:46:28.600
You can go to the Web Store and
download the US English

00:46:28.600 --> 00:46:31.600
female Text to Speech by Google,
and install that.

00:46:31.600 --> 00:46:33.960
And now all of your Chrome apps
and extensions have that

00:46:33.960 --> 00:46:35.660
voice available.

00:46:35.660 --> 00:46:36.340
It's fast.

00:46:36.340 --> 00:46:37.470
It's high quality.

00:46:37.470 --> 00:46:39.500
You can turn up the rate of
speed really fast for

00:46:39.500 --> 00:46:41.030
accessibility.

00:46:41.030 --> 00:46:45.020
But it's also really clear
and understandable.

00:46:45.020 --> 00:46:47.780
I wouldn't recommend running in
on lower end hardware yet.

00:46:47.780 --> 00:46:49.910
Need to do some work
to optimize that.

00:46:49.910 --> 00:46:51.250
It's kind of memory hungry.

00:46:51.250 --> 00:46:54.860
But there's some other speech
engines out there.

00:46:54.860 --> 00:46:57.810
But we're really excited to
introduce this not only as a

00:46:57.810 --> 00:47:00.550
great option for accessibility
and for other applications,

00:47:00.550 --> 00:47:03.240
but as a really cool demo of
what's possible with Chrome

00:47:03.240 --> 00:47:05.930
Extensions and Native Client.

00:47:05.930 --> 00:47:09.070
So my favorite feature and just
one more thing I'd like

00:47:09.070 --> 00:47:12.670
to add here is that not only can
you generate speech, but

00:47:12.670 --> 00:47:16.640
you get real time feedback from
most speech engines on

00:47:16.640 --> 00:47:19.680
exactly what's taking place, so
you know when it's speaking

00:47:19.680 --> 00:47:20.845
each word in the stream.

00:47:20.845 --> 00:47:23.410
And that allows you to
synchronize things and do

00:47:23.410 --> 00:47:24.430
really cool things.

00:47:24.430 --> 00:47:26.810
So I built a little demo
of that like that.

00:47:26.810 --> 00:47:29.140
FEMALE SPEAKER: Far out in the
uncharted backwaters of the

00:47:29.140 --> 00:47:31.850
unfashionable end of the Western
Spiral arm of the

00:47:31.850 --> 00:47:35.470
Galaxy lies a small unregarded
yellow sun.

00:47:35.470 --> 00:47:39.060
Orbiting this at a distance of
roughly 98 million miles is an

00:47:39.060 --> 00:47:42.060
utterly insignificant little
blue green planet whose ape

00:47:42.060 --> 00:47:45.140
descended life forms are so
amazingly primitive that they

00:47:45.140 --> 00:47:48.330
still think digital watches
are a pretty neat idea.

00:47:48.330 --> 00:47:49.700
DOMINIC MAZZONI: So credit
Douglas Adams for

00:47:49.700 --> 00:47:51.850
the quote, of course.

00:47:51.850 --> 00:47:52.220
Rachel.

00:47:52.220 --> 00:47:53.430
RACHEL SHEARER: That
was really awesome.

00:47:53.430 --> 00:47:55.840
I wish I could read all my books
or have all my books

00:47:55.840 --> 00:47:58.660
read to me over a spiral
galaxy floating around.

00:47:58.660 --> 00:48:00.450
That's awesome.

00:48:00.450 --> 00:48:01.260
So I'm back.

00:48:01.260 --> 00:48:03.650
I'm going to do a recap of what
you just heard over the

00:48:03.650 --> 00:48:05.780
course of the talk.

00:48:05.780 --> 00:48:07.950
So at the beginning, if you
remember, I talked about tools

00:48:07.950 --> 00:48:10.280
to help you find and eliminate
accessibility errors,

00:48:10.280 --> 00:48:11.830
including the new Accessibility

00:48:11.830 --> 00:48:13.950
Developer Tools extension.

00:48:13.950 --> 00:48:16.410
And then Dominic talked about
advanced accessibility

00:48:16.410 --> 00:48:18.810
techniques, like an accessible
text editor,

00:48:18.810 --> 00:48:20.460
an accessible terminal.

00:48:20.460 --> 00:48:22.830
And then Charles talked about
ChromeVox Extensions and

00:48:22.830 --> 00:48:25.840
actually showed PlusVox for
the first time to anybody,

00:48:25.840 --> 00:48:27.170
which was really neat.

00:48:27.170 --> 00:48:29.400
And then finally Dominic came
on back and showed his

00:48:29.400 --> 00:48:33.440
favorite accessibility APIs,
like CSS3 filters, Chrome

00:48:33.440 --> 00:48:35.913
Speech Recognition,
Chrome TTS, and

00:48:35.913 --> 00:48:36.960
the Chroms TTS Engine.

00:48:36.960 --> 00:48:39.450
I'm not really sure which one
of those is his favorite.

00:48:39.450 --> 00:48:42.110
But I think he loves them all.

00:48:42.110 --> 00:48:44.270
So that's what we've
talked about today.

00:48:44.270 --> 00:48:47.700
This last slide has links to
some resources that can help

00:48:47.700 --> 00:48:50.530
you in your quest to
build better, more

00:48:50.530 --> 00:48:52.650
accessible web apps.

00:48:52.650 --> 00:48:56.110
And I also wanted to finish
with a final thought.

00:48:56.110 --> 00:48:58.320
Up on the stage, we've been
really excited to talk to you

00:48:58.320 --> 00:49:01.430
about these tools and techniques
and APIs that help

00:49:01.430 --> 00:49:04.370
us, and we think can help you,
make your web applications

00:49:04.370 --> 00:49:05.610
more accessible.

00:49:05.610 --> 00:49:07.240
But today isn't just about us.

00:49:07.240 --> 00:49:08.430
It's about you.

00:49:08.430 --> 00:49:09.910
We can't wait to see what
you're going to

00:49:09.910 --> 00:49:11.460
do with these tools.

00:49:11.460 --> 00:49:14.880
Accessibility is partly an
exciting field because a lot

00:49:14.880 --> 00:49:16.670
of these problems aren't
solved yet.

00:49:16.670 --> 00:49:18.970
And we're hoping that you in
this audience, with the tools

00:49:18.970 --> 00:49:21.820
that we're so excited to show
to you, can work on solving

00:49:21.820 --> 00:49:22.670
these problems.

00:49:22.670 --> 00:49:24.720
So we can't wait to see what
you're going to do.

00:49:24.720 --> 00:49:25.970
Thank you very much.

00:49:36.280 --> 00:49:37.530
We'd be happy to
take questions.

00:49:43.510 --> 00:49:45.950
AUDIENCE: You showed some APIs
that were interesting around

00:49:45.950 --> 00:49:49.360
the ability to control
what text is

00:49:49.360 --> 00:49:51.030
actually read for a node.

00:49:51.030 --> 00:49:52.230
CHARLES CHEN: Yes.

00:49:52.230 --> 00:49:54.970
AUDIENCE: Is that just
extensions, only available to

00:49:54.970 --> 00:49:55.410
extensions?

00:49:55.410 --> 00:49:55.880
CHARLES CHEN: No.

00:49:55.880 --> 00:49:56.330
No.

00:49:56.330 --> 00:49:57.480
That's an excellent point.

00:49:57.480 --> 00:49:58.210
And no, it's not.

00:49:58.210 --> 00:50:00.520
If you have your own web
app, you can also use

00:50:00.520 --> 00:50:03.050
that same API call.

00:50:03.050 --> 00:50:03.580
AUDIENCE: OK.

00:50:03.580 --> 00:50:06.655
So is that a proprietary
thing?

00:50:06.655 --> 00:50:08.030
Or is there a standards
check for that?

00:50:08.030 --> 00:50:10.410
CHARLES CHEN: So right now this
is an experimental thing.

00:50:10.410 --> 00:50:12.710
We want to see how well
this works out.

00:50:12.710 --> 00:50:13.300
But right now we're

00:50:13.300 --> 00:50:15.110
experimenting with it in ChromVox.

00:50:15.110 --> 00:50:17.730
And it is a ChromeVox
Extension API--

00:50:17.730 --> 00:50:17.990
DOMINIC MAZZONI: That's right.

00:50:17.990 --> 00:50:21.070
CHARLES CHEN: That's available
to web apps and to extensions.

00:50:21.070 --> 00:50:24.170
DOMINIC MAZZONI: And if you're
interested in standards, I

00:50:24.170 --> 00:50:28.130
know that the ARIA committee has
just started taking ideas

00:50:28.130 --> 00:50:29.480
for ARIA 2.0.

00:50:29.480 --> 00:50:31.660
And this is at the top of the
list of things that we want to

00:50:31.660 --> 00:50:34.050
propose there and turn
that into a standard.

00:50:34.050 --> 00:50:36.960
But this is sort of our
opportunity to experiment,

00:50:36.960 --> 00:50:39.640
figure out how the API might
work, and what we need for the

00:50:39.640 --> 00:50:40.860
apps that we want to build.

00:50:40.860 --> 00:50:42.460
CHARLES CHEN: So if you think
it's cool, I encourage you to

00:50:42.460 --> 00:50:44.810
build something awesome with it
and help bolster the case

00:50:44.810 --> 00:50:46.160
for why it should be there.

00:50:46.160 --> 00:50:46.310
AUDIENCE: OK.

00:50:46.310 --> 00:50:47.560
Thanks.

00:50:50.590 --> 00:50:50.730
AUDIENCE: Hi.

00:50:50.730 --> 00:50:54.200
Simple question-- the
Accessibility Developer Tools

00:50:54.200 --> 00:50:57.020
I saw requires Chrome 21.

00:50:57.020 --> 00:51:01.480
My usual developer build link
for Mac is still Chrome 20.

00:51:01.480 --> 00:51:03.870
Is there any good
way to get 21?

00:51:03.870 --> 00:51:05.250
Or do you know if it
will come soon?

00:51:05.250 --> 00:51:06.980
DOMINIC MAZZONI: 21 is the
current Dev Channel.

00:51:06.980 --> 00:51:09.690
So if you're on Dev Channel--
the other thing I'd recommend

00:51:09.690 --> 00:51:12.500
as a developer if you want to
try cutting edge stuff, but

00:51:12.500 --> 00:51:15.310
you don't want to mess up your
everyday browser, download

00:51:15.310 --> 00:51:16.500
Chrome Canary.

00:51:16.500 --> 00:51:21.150
Chrome Canary is the very
latest-- it's like a nightly

00:51:21.150 --> 00:51:21.740
build of Chrome.

00:51:21.740 --> 00:51:23.120
It updates nightly.

00:51:23.120 --> 00:51:24.760
But it has a separate profile.

00:51:24.760 --> 00:51:26.800
So it won't mess up your
normal browser.

00:51:26.800 --> 00:51:29.020
So that's what I use when I
want to try out the latest

00:51:29.020 --> 00:51:31.480
cutting edge extensions
and APIs.

00:51:31.480 --> 00:51:34.270
But if it crashes, it's not
going to mess up my everyday

00:51:34.270 --> 00:51:35.920
email and things I really
need to do.

00:51:35.920 --> 00:51:37.390
RACHEL SHEARER: Another thing
I want to add is that

00:51:37.390 --> 00:51:39.860
Developer Tools extensions
in general do require an

00:51:39.860 --> 00:51:41.550
experimental extension API.

00:51:41.550 --> 00:51:43.800
So you'll have to set that in
Chrome Flags before you can

00:51:43.800 --> 00:51:45.790
use the Accessibility
Developer Tools.

00:51:45.790 --> 00:51:47.650
Hopefully that'll make it out
of experimental soon.

00:51:47.650 --> 00:51:51.090
But for now that's what
you have to do.

00:51:51.090 --> 00:51:53.660
AUDIENCE: Are there any plans to
create these extensions in

00:51:53.660 --> 00:51:56.720
different languages?

00:51:56.720 --> 00:51:58.040
DOMINIC MAZZONI: Can you be
a little more specific?

00:51:58.040 --> 00:51:58.440
AUDIENCE: Yeah.

00:51:58.440 --> 00:52:01.780
The extension you with the
female voice to create

00:52:01.780 --> 00:52:03.270
extensions in multi-languages.

00:52:03.270 --> 00:52:03.570
DOMINIC MAZZONI: Yeah.

00:52:03.570 --> 00:52:06.760
So the API fully supports
multiple languages.

00:52:06.760 --> 00:52:11.410
When you ask it to speak the
default is whatever language

00:52:11.410 --> 00:52:13.620
your browser is set to as
its default language.

00:52:13.620 --> 00:52:16.150
But you can pass a language
parameter in.

00:52:16.150 --> 00:52:18.650
If you have multiple voices
installed, it will pick the

00:52:18.650 --> 00:52:20.750
voice of the correct language.

00:52:20.750 --> 00:52:25.950
Google has released voices in
English on the Web Store.

00:52:25.950 --> 00:52:27.830
I can't say what
our plans are.

00:52:27.830 --> 00:52:31.010
But the API is open for third
party developers to introduce

00:52:31.010 --> 00:52:32.040
other voices.

00:52:32.040 --> 00:52:35.200
If you have a Windows or a Mac
computer, there's built in

00:52:35.200 --> 00:52:37.090
speech in several languages.

00:52:37.090 --> 00:52:39.050
And the API already works
with those languages.

00:52:39.050 --> 00:52:41.730
So if you tell it to speak,
anyone on Windows and Mac, as

00:52:41.730 --> 00:52:43.840
long as they have the voice
provided by the operating

00:52:43.840 --> 00:52:45.880
system or that they've
installed, it'll speak using

00:52:45.880 --> 00:52:47.250
those languages too.

00:52:47.250 --> 00:52:49.480
CHARLES CHEN: Also I'd like to
add that on Chrome OS, we do

00:52:49.480 --> 00:52:50.520
have EFIGS.

00:52:50.520 --> 00:52:51.085
DOMINIC MAZZONI: Oh, that's
a good point.

00:52:51.085 --> 00:52:51.890
Yeah.

00:52:51.890 --> 00:52:53.560
RACHEL SHEARER: French, Italian,
German, Spanish.

00:52:53.560 --> 00:52:54.120
DOMINIC MAZZONI: That's right.

00:52:54.120 --> 00:52:56.090
So all of those work out of
the box on Chrome OS.

00:52:59.810 --> 00:53:01.460
RACHEL SHEARER: Anybody else?

00:53:01.460 --> 00:53:04.220
Don't be shy.

00:53:04.220 --> 00:53:07.590
AUDIENCE: Are you using any
guidelines for the tests that

00:53:07.590 --> 00:53:10.240
you're applying in the
Accessibility Tools, like WCAG

00:53:10.240 --> 00:53:12.190
for example.

00:53:12.190 --> 00:53:14.130
RACHEL SHEARER: So if you go
to the wiki, the links that

00:53:14.130 --> 00:53:15.760
are inside the Developer
Tools, there's more

00:53:15.760 --> 00:53:19.420
information about what
guidelines we're following.

00:53:19.420 --> 00:53:21.070
As I said in the talk, we
really want to emphasize

00:53:21.070 --> 00:53:23.980
practical accessibility and
simple errors that we can do a

00:53:23.980 --> 00:53:25.130
good job of testing.

00:53:25.130 --> 00:53:26.970
So it's more fully
explained there.

00:53:26.970 --> 00:53:30.210
But for contrast ratio, for
example, we are using the WCAG

00:53:30.210 --> 00:53:31.780
contrast ratio.

00:53:31.780 --> 00:53:34.630
For other stuff we're kind of
pulling from what we think

00:53:34.630 --> 00:53:36.655
would make the best experience
for a user.

00:53:36.655 --> 00:53:37.040
DOMINIC MAZZONI: Yeah.

00:53:37.040 --> 00:53:42.670
So whenever possible, our
goal is to reference

00:53:42.670 --> 00:53:44.090
all the right standards.

00:53:44.090 --> 00:53:46.150
And so we looked through
everything in WCAG that seemed

00:53:46.150 --> 00:53:47.620
appropriate.

00:53:47.620 --> 00:53:51.170
But our primary goal was just
practical web accessibility.

00:53:51.170 --> 00:53:53.950
So if there was something that
was too hard to detect or we

00:53:53.950 --> 00:53:56.830
didn't think was necessarily
good advice in general, we

00:53:56.830 --> 00:53:59.170
biased things in favor of what
we think was practical and

00:53:59.170 --> 00:54:01.270
useful for users today.

00:54:01.270 --> 00:54:02.730
RACHEL SHEARER: I definitely
want to say Accessibility

00:54:02.730 --> 00:54:06.480
Developer Tools is not a
replacement for the testing

00:54:06.480 --> 00:54:08.730
that you might be doing as
a web app developer.

00:54:08.730 --> 00:54:12.050
We see it as kind of an easy way
to get a good idea of how

00:54:12.050 --> 00:54:12.890
your app is doing.

00:54:12.890 --> 00:54:15.520
But if you have special
accessibility testing that you

00:54:15.520 --> 00:54:18.920
do otherwise, you should
continue to do that.

00:54:18.920 --> 00:54:19.080
AUDIENCE: Hi.

00:54:19.080 --> 00:54:19.950
My name is Daniel.

00:54:19.950 --> 00:54:21.520
Great session again.

00:54:21.520 --> 00:54:22.400
DOMINIC MAZZONI: Thanks.

00:54:22.400 --> 00:54:26.480
AUDIENCE: You showed the way to
invert the whole page and

00:54:26.480 --> 00:54:28.680
to take out certain
images like that.

00:54:28.680 --> 00:54:31.645
Is there a similar way to do
something for people who are

00:54:31.645 --> 00:54:32.750
red-green blind?

00:54:32.750 --> 00:54:34.000
DOMINIC MAZZONI: That's
a great question.

00:54:34.000 --> 00:54:36.860
So there is a spec
for that now.

00:54:36.860 --> 00:54:37.890
And the spec--

00:54:37.890 --> 00:54:42.960
if you know OpenGL, it's
actually a way to specify a

00:54:42.960 --> 00:54:45.880
pixel shader that it gets
applied to the whole webpage,

00:54:45.880 --> 00:54:48.200
which is really awesome
and powerful.

00:54:48.200 --> 00:54:50.560
As far as I know that hasn't
been implemented in any

00:54:50.560 --> 00:54:51.270
browser yet.

00:54:51.270 --> 00:54:53.790
But there are people working
on it for WebKit.

00:54:53.790 --> 00:54:55.140
Some of the code's already
checked in.

00:54:55.140 --> 00:54:56.950
If you want to recompile
WebKit yourself, you

00:54:56.950 --> 00:54:57.820
can play with it.

00:54:57.820 --> 00:55:00.540
But it's not available in any
shipping browser yet.

00:55:00.540 --> 00:55:02.240
I'm really looking forward
to using that.

00:55:02.240 --> 00:55:04.870
Because with a pixel shader,
you can apply all sorts of

00:55:04.870 --> 00:55:06.530
crazy effects to everything
on the page.

00:55:11.030 --> 00:55:12.870
RACHEL SHEARER: If there is
no other questions, I

00:55:12.870 --> 00:55:13.540
guess that's it.

00:55:13.540 --> 00:55:14.540
Thank you all for coming.

00:55:14.540 --> 00:55:17.410
And we'll be around afterwards,
probably just

00:55:17.410 --> 00:55:20.700
outside if you want to talk
to us individually.

00:55:20.700 --> 00:55:21.410
Thank you very much.

00:55:21.410 --> 00:55:22.310
DOMINIC MAZZONI: Thanks again,

00:55:22.310 --> 00:55:23.560
CHARLES CHEN: Thanks.

