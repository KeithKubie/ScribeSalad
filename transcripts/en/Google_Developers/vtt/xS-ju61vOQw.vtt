WEBVTT
Kind: captions
Language: en

00:00:01.200 --> 00:00:02.267
Raman: Hello, everyone.

00:00:02.267 --> 00:00:03.501
I am T.V. Raman
and this

00:00:03.501 --> 00:00:05.467
is my officemate
Charles Chen.

00:00:05.467 --> 00:00:07.701
And we hack together,
code together,

00:00:07.701 --> 00:00:09.334
so we
also talk together.

00:00:09.334 --> 00:00:10.734
Hopefully not
at the same time

00:00:10.734 --> 00:00:12.734
and hopefully
the phone won't talk

00:00:12.734 --> 00:00:15.200
while the two
of us are talking too.

00:00:15.200 --> 00:00:19.334
This talk is about building
eyes-free interfaces on Android.

00:00:19.334 --> 00:00:21.367
We are calling it,
"looking beyond the screen."

00:00:21.367 --> 00:00:23.033
That doesn't mean
you hold your phone like this

00:00:23.033 --> 00:00:24.934
and look at the world
over it.

00:00:24.934 --> 00:00:26.734
It's basically building
user interfaces

00:00:26.734 --> 00:00:29.367
that go over
and beyond the screen.

00:00:29.367 --> 00:00:32.601
This talk is structured
into two halves

00:00:32.601 --> 00:00:35.467
where the first half I'd like
to walk you through

00:00:35.467 --> 00:00:37.968
some of the thought processes
we went through

00:00:37.968 --> 00:00:39.667
in terms of coming up
with some

00:00:39.667 --> 00:00:41.734
of the UI paradigms
we are trying out.

00:00:41.734 --> 00:00:43.701
And in the second
half of the talk,

00:00:43.701 --> 00:00:45.367
Charles will sort of
walk you through

00:00:45.367 --> 00:00:47.968
some of the libraries
we are open-sourcing

00:00:47.968 --> 00:00:49.467
that actually allow
you to bring

00:00:49.467 --> 00:00:52.534
some of this UI code
into your own applications.

00:00:52.534 --> 00:00:54.701
So let's start
working through

00:00:54.701 --> 00:00:56.767
the media sections
of this talk.

00:00:56.767 --> 00:00:58.133
The first section
of this talk,

00:00:58.133 --> 00:01:01.400
I'd like to focus
on what it means

00:01:01.400 --> 00:01:04.534
to sort of be someone
who does UI research

00:01:04.534 --> 00:01:06.801
and UI implementations
in the mobile world,

00:01:06.801 --> 00:01:09.901
because I believe this
is distinctly different

00:01:09.901 --> 00:01:12.667
from the last 35 years of
human-computer interaction

00:01:12.667 --> 00:01:14.400
that has gone before.

00:01:14.400 --> 00:01:16.100
And you'll sort of see
why I think that

00:01:16.100 --> 00:01:17.734
in the next few slides.

00:01:17.734 --> 00:01:20.601
But we are all geeks here.
We are developers here.

00:01:20.601 --> 00:01:22.734
Let's sort of celebrate
our geekdom for a minute

00:01:22.734 --> 00:01:27.701
by sort of looking at that phone
that we all have

00:01:27.701 --> 00:01:30.767
and understanding why that's
an engineer's dream.

00:01:30.767 --> 00:01:32.801
Obviously, that phone
is more powerful

00:01:32.801 --> 00:01:35.601
than the desktop workstation
I had 20 years ago,

00:01:35.601 --> 00:01:37.067
15 years ago.

00:01:37.067 --> 00:01:39.834
Obviously, this thing can do
a lot more

00:01:39.834 --> 00:01:41.901
because it's connected
to the network.

00:01:41.901 --> 00:01:44.067
Those are enablers.

00:01:44.067 --> 00:01:46.367
Now the third enabler
that you have, obviously,

00:01:46.367 --> 00:01:48.634
is building cool
user interfaces

00:01:48.634 --> 00:01:52.100
that help surface all this
coolness to the end users

00:01:52.100 --> 00:01:54.334
so that they can
actually use it.

00:01:54.334 --> 00:01:56.334
So in that sense,

00:01:56.334 --> 00:01:59.634
what does it mean to build
innovative user interfaces

00:01:59.634 --> 00:02:02.067
for the mobile world?

00:02:02.067 --> 00:02:04.067
Let's ask the question,

00:02:04.067 --> 00:02:05.834
"what is a user interface?"
first.

00:02:05.834 --> 00:02:08.167
I didn't include that particular
slide in this talk,

00:02:08.167 --> 00:02:11.000
but many years ago,
I used to carry around a slide

00:02:11.000 --> 00:02:13.667
that is a very simple slide
that sort of explained

00:02:13.667 --> 00:02:16.601
what I thought of
as a user interface.

00:02:16.601 --> 00:02:20.133
If you pull up very specific
implementations

00:02:20.133 --> 00:02:22.601
of a user interface,
such as a GUI,

00:02:22.601 --> 00:02:24.234
such as
the next Windows desktop,

00:02:24.234 --> 00:02:26.834
a Windows desktop,
a Mac UI,

00:02:26.834 --> 00:02:30.734
there is something fundamentally
simple about the UI

00:02:30.734 --> 00:02:32.901
It's about human-computer
interaction

00:02:32.901 --> 00:02:34.434
as Kai will tell you.

00:02:34.434 --> 00:02:36.734
But then that again
has become a buzzword.

00:02:36.734 --> 00:02:38.467
So there's the human
and there's the computer.

00:02:38.467 --> 00:02:41.234
What is this interaction
we are talking about?

00:02:41.234 --> 00:02:43.234
The human-computer interaction
that makes up

00:02:43.234 --> 00:02:46.534
the user interface is
really about two things.

00:02:46.534 --> 00:02:48.400
It's you, the human,

00:02:48.400 --> 00:02:52.400
communicating your intent
to the machine,

00:02:52.400 --> 00:02:55.300
the machine computing
on that intent,

00:02:55.300 --> 00:02:59.267
and coming up with some answer
and grabbing your attention.

00:02:59.267 --> 00:03:01.367
So I used to draw
a little diamond

00:03:01.367 --> 00:03:03.334
with a human
on one vertex,

00:03:03.334 --> 00:03:04.701
the computer
on another vertex

00:03:04.701 --> 00:03:06.734
and sort of
draw arrows saying,

00:03:06.734 --> 00:03:10.300
"intention, attention,
input, and output."

00:03:10.300 --> 00:03:12.534
So from you goes
input to the machine

00:03:12.534 --> 00:03:14.167
to convey your intentions.

00:03:14.167 --> 00:03:16.200
Comes back as output
and attention.

00:03:16.200 --> 00:03:19.300
And so if you take that view
of user interaction,

00:03:19.300 --> 00:03:22.234
UIs that you build
have to fit

00:03:22.234 --> 00:03:24.534
into the user's
mode of working,

00:03:24.534 --> 00:03:26.100
not the other way around.

00:03:26.100 --> 00:03:29.334
So this is about bending
technology to our will.

00:03:29.334 --> 00:03:32.133
And an open platform,

00:03:32.133 --> 00:03:33.767
especially
in the mobile world,

00:03:33.767 --> 00:03:36.901
is extremely conducive
to doing that,

00:03:36.901 --> 00:03:40.167
because now the only thing
that blocks, limits

00:03:40.167 --> 00:03:42.634
how much you can hack
is your imagination.

00:03:42.634 --> 00:03:46.067
So you have all
of the peripherals you want.

00:03:46.067 --> 00:03:50.000
You have way more peripherals
than what we've had in the past.

00:03:50.000 --> 00:03:52.200
And that's one of
the most important things

00:03:52.200 --> 00:03:55.434
about doing mobile
user interfaces.

00:03:55.434 --> 00:03:57.100
Let's talk--
go to the next slide

00:03:57.100 --> 00:03:58.667
about eyes-free
interaction.

00:03:58.667 --> 00:04:02.901
So clearly there are many,
many cool things you can do

00:04:02.901 --> 00:04:05.934
as you innovate
along the UI access.

00:04:05.934 --> 00:04:08.868
The specific thing that Charles
and I had been focusing on

00:04:08.868 --> 00:04:13.601
is using these phones
without looking at them.

00:04:13.601 --> 00:04:16.834
No, this is not just about
the blind user.

00:04:16.834 --> 00:04:20.968
This is more to say,
"how do you use these devices

00:04:20.968 --> 00:04:24.234
"if you are not capable of,
willing to,

00:04:24.234 --> 00:04:27.968
or not in a position
to look at the screen?"

00:04:27.968 --> 00:04:30.067
And that completely
changes your perspective

00:04:30.067 --> 00:04:32.167
on how you build
such things.

00:04:32.167 --> 00:04:35.267
Those situations
are obviously many.

00:04:35.267 --> 00:04:36.501
You might be driving.

00:04:36.501 --> 00:04:38.200
You might be walking
along the corridor

00:04:38.200 --> 00:04:39.834
talking to your friends.

00:04:39.834 --> 00:04:42.400
There are many situations where
you do not want

00:04:42.400 --> 00:04:45.834
to hold your phone
like this and squint at it.

00:04:45.834 --> 00:04:48.901
A couple of weeks ago,
I was walking down

00:04:48.901 --> 00:04:52.400
one of the corridors at Google
with my guide dog

00:04:52.400 --> 00:04:54.834
and my dog suddenly swerved,
and I asked Charles

00:04:54.834 --> 00:04:57.868
what happened and he said,
"That was a lucky save.

00:04:57.868 --> 00:04:59.634
Somebody almost
walked into you."

00:04:59.634 --> 00:05:01.634
I said, "That was
an interesting response," right?

00:05:01.634 --> 00:05:03.300
It wasn't,
"I walked into someone."

00:05:03.300 --> 00:05:05.367
It was somebody
almost walked into me.

00:05:05.367 --> 00:05:07.501
Well, the reason somebody
almost walked into me

00:05:07.501 --> 00:05:09.501
was that person was holding
their cell phone

00:05:09.501 --> 00:05:11.467
like this
doing email.

00:05:11.467 --> 00:05:13.033
This is not safe, right?

00:05:13.033 --> 00:05:16.000
I mean, cell phones aren't just
a hazard when you're driving.

00:05:16.000 --> 00:05:17.901
I mean, if you start using
cell phones like this,

00:05:17.901 --> 00:05:20.667
you need to get tickets
when you're walking too.

00:05:20.667 --> 00:05:23.167
So how do you avoid that?
[laughter]

00:05:23.167 --> 00:05:26.667
So I think
eyes-free interaction

00:05:26.667 --> 00:05:31.367
is really about fitting
into the user's life.

00:05:31.367 --> 00:05:33.667
Technology has to sort of
come to that point

00:05:33.667 --> 00:05:35.133
where we are able
to do that.

00:05:35.133 --> 00:05:37.000
So let's sort of go
to the next slide

00:05:37.000 --> 00:05:40.501
and ask what is so cool
about these new phones

00:05:40.501 --> 00:05:42.534
that let you do
all these things.

00:05:42.534 --> 00:05:46.601
One reason I believe
that sort of the GUI

00:05:46.601 --> 00:05:50.634
hasn't really evolved beyond
what Xerox PARC built

00:05:50.634 --> 00:05:55.167
in the late '70s is that
the peripherals available

00:05:55.167 --> 00:05:59.400
to the GUI designer have not
evolved since then.

00:05:59.400 --> 00:06:01.100
Doug Engelbart
invented the mouse,

00:06:01.100 --> 00:06:03.868
PARC invented
the bitmap screen,

00:06:03.868 --> 00:06:05.334
and the rest is history.

00:06:05.334 --> 00:06:07.467
And sadly,
history is all you've had

00:06:07.467 --> 00:06:09.834
in that the GUI
has not changed.

00:06:09.834 --> 00:06:12.801
Yes, people have worked on how
to layout menus better.

00:06:12.801 --> 00:06:15.334
People have learned
how to cram more things

00:06:15.334 --> 00:06:16.868
into that limited real estate.

00:06:16.868 --> 00:06:20.601
But the fundamental peripherals
with which you interact

00:06:20.601 --> 00:06:22.033
with the graphical
user interface

00:06:22.033 --> 00:06:23.901
have not changed.

00:06:23.901 --> 00:06:26.267
Look at that phone
and count out the peripherals

00:06:26.267 --> 00:06:28.467
versus what your laptop has.

00:06:28.467 --> 00:06:32.067
Your laptop has a display,
a monitor, a mouse,

00:06:32.067 --> 00:06:36.767
a microphone and a speaker,
and perhaps a webcam.

00:06:36.767 --> 00:06:38.834
Those latter three,
the microphone,

00:06:38.834 --> 00:06:40.667
the speaker,
and the webcam,

00:06:40.667 --> 00:06:43.367
are actually quite awkward
to use on a laptop.

00:06:43.367 --> 00:06:45.100
Especially the laptop.

00:06:45.100 --> 00:06:47.701
Look at your camera.
Look at your phone.

00:06:47.701 --> 00:06:49.267
It's a camera.
It's a keyboard.

00:06:49.267 --> 00:06:50.767
It's all of these things.

00:06:50.767 --> 00:06:53.868
But now think of it
not as all those devices,

00:06:53.868 --> 00:06:57.167
but think of it as your computer
in your pocket

00:06:57.167 --> 00:06:59.767
with the ability
to sense the world

00:06:59.767 --> 00:07:03.567
and see how many more ways
it can sense the world

00:07:03.567 --> 00:07:06.000
as opposed to your laptop.

00:07:06.000 --> 00:07:07.567
Simple example.

00:07:07.567 --> 00:07:10.033
There is a, you know,

00:07:10.033 --> 00:07:13.000
mobile scavenger hunt
being announced today.

00:07:13.000 --> 00:07:15.067
There is a piece of paper
stuck on the wall

00:07:15.067 --> 00:07:16.534
with a QR code.

00:07:16.534 --> 00:07:18.801
You can just walk past it,
point your phone at it,

00:07:18.801 --> 00:07:20.868
get a URL,
and start browsing.

00:07:20.868 --> 00:07:22.300
Isn't that cool?

00:07:22.300 --> 00:07:25.534
That's because your phone
has many eyes

00:07:25.534 --> 00:07:28.767
and many ears by which
it can sense the world.

00:07:28.767 --> 00:07:31.200
And the more it can
sense the world,

00:07:31.200 --> 00:07:33.934
the better position
your phone has

00:07:33.934 --> 00:07:38.200
with respect to getting
a handle on your intent,

00:07:38.200 --> 00:07:40.400
on your intention
as a user.

00:07:40.400 --> 00:07:42.167
And the cool thing
about building

00:07:42.167 --> 00:07:43.934
mobile user interfaces--

00:07:43.934 --> 00:07:47.901
and this may be
a little contradictory

00:07:47.901 --> 00:07:50.601
to someone who does
user interfaces

00:07:50.601 --> 00:07:52.801
as their
be-all, end-all goal--

00:07:52.801 --> 00:07:56.334
is you actually minimize
user interaction.

00:07:56.334 --> 00:07:59.033
So in the desktop world
it was always cool

00:07:59.033 --> 00:08:01.634
to make the user interact
and then build

00:08:01.634 --> 00:08:04.601
newer, more powerful widgets
and gadgets

00:08:04.601 --> 00:08:07.701
with which
the user interacted.

00:08:07.701 --> 00:08:10.367
With your mobile devices,
I believe we need

00:08:10.367 --> 00:08:13.434
to go one step further,
which is,

00:08:13.434 --> 00:08:16.334
"user interaction is cool,
but wouldn't it

00:08:16.334 --> 00:08:18.334
"be even nicer
if your device could do

00:08:18.334 --> 00:08:20.601
"what you wanted
and show you what you wanted

00:08:20.601 --> 00:08:23.634
before you went
and interacted with it?"

00:08:23.634 --> 00:08:25.400
Because you are not
taking your phone out

00:08:25.400 --> 00:08:28.400
of your pocket in order
to interact with the phone.

00:08:28.400 --> 00:08:30.067
You're taking the phone
out of your pocket

00:08:30.067 --> 00:08:31.734
to interact with the world.

00:08:31.734 --> 00:08:33.334
You're taking the phone out
of your pocket

00:08:33.334 --> 00:08:35.133
to find out where
to go have dinner.

00:08:35.133 --> 00:08:36.634
You're taking the phone
out of your pocket

00:08:36.634 --> 00:08:39.267
to go talk to your buddy,
not to interact with the phone.

00:08:39.267 --> 00:08:41.033
So this is really
what is cool

00:08:41.033 --> 00:08:43.234
about building innovative
user interaction

00:08:43.234 --> 00:08:44.534
on mobile phones.

00:08:44.534 --> 00:08:46.000
You are really focusing on,

00:08:46.000 --> 00:08:47.467
"how shall I minimize clicks?

00:08:47.467 --> 00:08:49.534
"How shall I minimize
screen switches?

00:08:49.534 --> 00:08:51.334
"How shall I minimize
context switches?

00:08:51.334 --> 00:08:53.968
And how shall I have the user
get his work done?"

00:08:53.968 --> 00:08:56.534
So let's go to the next
section of the slide.

00:08:56.534 --> 00:08:59.701
So as a case study,
I'd like to take you through

00:08:59.701 --> 00:09:01.968
two things that we've built.

00:09:01.968 --> 00:09:05.501
You can actually see
Youtube demos of this

00:09:05.501 --> 00:09:08.400
on the eyes-free
Android channel.

00:09:08.400 --> 00:09:09.701
What I'd like to work--

00:09:09.701 --> 00:09:11.634
We will do demos
during the session,

00:09:11.634 --> 00:09:14.534
but what these slides
are really about

00:09:14.534 --> 00:09:17.200
are sort of walking
you through the thought process

00:09:17.200 --> 00:09:20.334
that went towards coming up
with these solutions.

00:09:20.334 --> 00:09:22.901
Because I, personally,
when I see someone

00:09:22.901 --> 00:09:26.100
show me a solution
they've come up with,

00:09:26.100 --> 00:09:29.033
I often find the process
of "how did you get that"

00:09:29.033 --> 00:09:31.100
more interesting than
the eventual artifact.

00:09:31.100 --> 00:09:34.567
And hopefully that applies
in this case too.

00:09:34.567 --> 00:09:37.067
So the problem
we were solving--

00:09:37.067 --> 00:09:39.868
The specific problem that
we solved last September

00:09:39.868 --> 00:09:42.801
was I wanted to start using
the Android phone

00:09:42.801 --> 00:09:45.300
as my primary phone because
I believed

00:09:45.300 --> 00:09:47.467
that that was the only way
I would build

00:09:47.467 --> 00:09:49.601
the right
user interaction environment

00:09:49.601 --> 00:09:51.834
that matched my needs
and the needs

00:09:51.834 --> 00:09:53.300
of eyes-free interaction.

00:09:53.300 --> 00:09:56.367
So the Android phone
is a nice, smart computer.

00:09:56.367 --> 00:09:57.868
It's all of these things.

00:09:57.868 --> 00:10:00.667
But the reason you first
put it in your pocket

00:10:00.667 --> 00:10:02.634
was because it's a phone.

00:10:02.634 --> 00:10:05.968
And many of those platforms
I had had before it

00:10:05.968 --> 00:10:09.200
did a lot of things,
but they were so complicated

00:10:09.200 --> 00:10:11.868
to use that I stopped making
phone calls with them.

00:10:11.868 --> 00:10:13.734
And to me,
that was a problem.

00:10:13.734 --> 00:10:15.968
So the first thing
we worked on was,

00:10:15.968 --> 00:10:18.868
"How can I use
the phone eyes?"

00:10:18.868 --> 00:10:20.601
So this is
an interesting question.

00:10:20.601 --> 00:10:23.701
You could have sort of pandered
on the interesting problem here

00:10:23.701 --> 00:10:25.200
and said,
"Well, it has a keyboard.

00:10:25.200 --> 00:10:27.033
Pull out the keyboard
and dial it."

00:10:27.033 --> 00:10:28.567
But that's inconvenient.

00:10:28.567 --> 00:10:30.567
And as I said,
if I had done that

00:10:30.567 --> 00:10:33.367
I would have joined the club
of people walking like this

00:10:33.367 --> 00:10:35.734
and I promise you I would
definitely walk into things

00:10:35.734 --> 00:10:37.400
if I did that.

00:10:37.400 --> 00:10:41.300
So the question was,
"How do you actually use

00:10:41.300 --> 00:10:45.501
that touch display
and do things with it?"

00:10:45.501 --> 00:10:48.033
Common wisdom said,
if you cannot see,

00:10:48.033 --> 00:10:49.834
you cannot use
a touchscreen.

00:10:49.834 --> 00:10:53.868
And so the way you sort of
debunk myths like that

00:10:53.868 --> 00:10:57.200
for yourself is to go ask
the question, "Why?"

00:10:57.200 --> 00:10:59.567
You know, two-year-olds
ask the question "Why?"

00:10:59.567 --> 00:11:02.067
And succinctly,
I think we as developers,

00:11:02.067 --> 00:11:03.734
geeks, and scientists
need to ask

00:11:03.734 --> 00:11:05.367
that question
the whole time.

00:11:05.367 --> 00:11:08.934
So why is it
that most people believe

00:11:08.934 --> 00:11:13.100
that you must be able to see
in order to use a touchscreen

00:11:13.100 --> 00:11:14.701
to use an on-screen keyboard?

00:11:14.701 --> 00:11:15.901
It's very simple.

00:11:15.901 --> 00:11:17.167
How do you use
a touchscreen?

00:11:17.167 --> 00:11:20.601
There are two atomic acts
involved

00:11:20.601 --> 00:11:24.501
in activating
an on-screen control by touch.

00:11:24.501 --> 00:11:26.334
You need to look
at the screen

00:11:26.334 --> 00:11:28.734
in order to locate
the control.

00:11:28.734 --> 00:11:31.634
Then you need
to go push it

00:11:31.634 --> 00:11:34.067
and get some feedback
for having pushed it.

00:11:34.067 --> 00:11:35.968
Clearly, if you're
not looking at the screen,

00:11:35.968 --> 00:11:38.734
you need feedback
at both levels.

00:11:38.734 --> 00:11:43.334
And the showstopper that most
people stumble on is,

00:11:43.334 --> 00:11:45.267
"Well, you can't see it at all
in order to see

00:11:45.267 --> 00:11:47.400
"where the button is if you're
not looking at the screen.

00:11:47.400 --> 00:11:49.033
Therefore,
you cannot use it."

00:11:49.033 --> 00:11:51.367
So let's ask
the "why" question again

00:11:51.367 --> 00:11:52.734
like a two-year-old,
right?

00:11:52.734 --> 00:11:54.033
Why do you need
to see the button

00:11:54.033 --> 00:11:55.868
to know where it is?

00:11:55.868 --> 00:11:58.634
Well, because the button is
positioned in a fixed place.

00:11:58.634 --> 00:12:00.000
You need to know where,
dummy.

00:12:00.000 --> 00:12:02.834
Well, why is it positioned
in a fixed place?

00:12:02.834 --> 00:12:04.834
And the answer
immediately emerges.

00:12:04.834 --> 00:12:06.467
Well, it needn't be
in a fixed place.

00:12:06.467 --> 00:12:08.033
Somebody chose to put it
in a fixed place.

00:12:08.033 --> 00:12:09.734
It was in a fixed place,
right?

00:12:09.734 --> 00:12:13.100
So the other way
to think about it is

00:12:13.100 --> 00:12:15.100
rather than you
looking at the screen

00:12:15.100 --> 00:12:17.400
in order to find
the keyboard,

00:12:17.400 --> 00:12:21.467
what if the keyboard came
and found your finger

00:12:21.467 --> 00:12:23.400
when you put your
finger down?

00:12:23.400 --> 00:12:26.100
So the opposite
of absolute positioning

00:12:26.100 --> 00:12:28.901
is relative positioning,
and that's what we've built.

00:12:28.901 --> 00:12:33.234
So this is what we call
a stroke dialer.

00:12:33.234 --> 00:12:34.801
We came up with
a very simple idea

00:12:34.801 --> 00:12:38.567
saying wherever you touch is
the center of the phone keypad.

00:12:38.567 --> 00:12:39.834
Okay?

00:12:39.834 --> 00:12:41.033
Put your finger there,
it's five.

00:12:41.033 --> 00:12:42.667
There, it's five.
That's five.

00:12:42.667 --> 00:12:45.000
Ah, but now you know
where five is.

00:12:45.000 --> 00:12:46.534
Well, if you know
where five is,

00:12:46.534 --> 00:12:48.501
you know where two is,
you know where one is,

00:12:48.501 --> 00:12:50.767
you know where nine is.

00:12:50.767 --> 00:12:55.200
So this very simple insight
of asking the why--

00:12:55.200 --> 00:12:57.501
irritating "why" question
many times

00:12:57.501 --> 00:12:59.200
gave us
a very simple answer.

00:12:59.200 --> 00:13:00.701
So the next time your
two-year-old asks why,

00:13:00.701 --> 00:13:02.200
don't yell at him.

00:13:02.200 --> 00:13:04.334
Answer the question and he'll
probably find out something.

00:13:04.334 --> 00:13:07.000
So I'll let Charles
do a quick demo

00:13:07.000 --> 00:13:08.534
of the stroke dialer.

00:13:08.534 --> 00:13:10.434
What is interesting
about the stroke dialer

00:13:10.434 --> 00:13:13.067
with respect to its feedback
is that it actually

00:13:13.067 --> 00:13:16.400
gives you auditory feedback
in terms of sound cues,

00:13:16.400 --> 00:13:20.033
it speaks the number,
and it also vibrates.

00:13:20.033 --> 00:13:21.834
And all of those
are synchronized

00:13:21.834 --> 00:13:24.934
and that's a big,
big win with respect

00:13:24.934 --> 00:13:26.634
to doing the
user interface correctly

00:13:26.634 --> 00:13:30.901
because it gives you
a whole sense of realism.

00:13:30.901 --> 00:13:32.901
So this is an interesting thing
about the real world, right?

00:13:32.901 --> 00:13:35.801
If I take a coffee cup
and put it on a table,

00:13:35.801 --> 00:13:40.033
it goes "click" and it gives you
force feedback on your hand.

00:13:40.033 --> 00:13:41.667
The table resists.

00:13:41.667 --> 00:13:43.901
If, for instance,
the table didn't resist,

00:13:43.901 --> 00:13:46.400
you would drop the cup.

00:13:46.400 --> 00:13:48.734
If you didn't hear the "clink"
when you put the cup down,

00:13:48.734 --> 00:13:50.534
you would feel something
was wrong.

00:13:50.534 --> 00:13:52.067
And the same applies
to building

00:13:52.067 --> 00:13:54.033
a touchscreen interface
where you're doing

00:13:54.033 --> 00:13:55.834
auditory input and touch.

00:13:55.834 --> 00:14:00.033
male computer voice: Nine.
One. One.

00:14:00.033 --> 00:14:03.267
Raman: So obviously you heard
the auditory output.

00:14:03.267 --> 00:14:05.367
You even heard
a little bit of vibration

00:14:05.367 --> 00:14:09.067
because it's
on a wooden table.

00:14:09.067 --> 00:14:12.467
So this is sort of
an interesting exercise

00:14:12.467 --> 00:14:14.667
with respect to doing
a stroke dialer.

00:14:14.667 --> 00:14:17.067
And later on in the talk,
Charles will actually show you

00:14:17.067 --> 00:14:19.801
how you can actually
use this as an overlay

00:14:19.801 --> 00:14:21.133
in your own applications.

00:14:21.133 --> 00:14:24.234
So the thought process
is nice.

00:14:24.234 --> 00:14:26.367
Showing you the thing
working is nice.

00:14:26.367 --> 00:14:28.901
But being able to plug it in
to your own applications

00:14:28.901 --> 00:14:31.567
is really the icing
on the cake,

00:14:31.567 --> 00:14:34.167
or, you know, the icing
on the Swiss chocolate

00:14:34.167 --> 00:14:35.767
or whatever you want
to call it.

00:14:35.767 --> 00:14:37.934
Let's rip to the next section
of the slide.

00:14:37.934 --> 00:14:39.567
At this point,
you're probably saying,

00:14:39.567 --> 00:14:40.834
"Yeah, yeah, big deal.

00:14:40.834 --> 00:14:42.300
But nobody dials
phone numbers anymore."

00:14:42.300 --> 00:14:43.434
It is true.

00:14:43.434 --> 00:14:44.701
You don't dial
phone numbers anymore.

00:14:44.701 --> 00:14:46.767
You use your contact manager.

00:14:46.767 --> 00:14:49.434
So how do you do
a contact manager

00:14:49.434 --> 00:14:52.634
for an eyes-free model?

00:14:52.634 --> 00:14:55.901
So this time you're going
to do letter input

00:14:55.901 --> 00:14:58.767
instead of numbers
and obviously

00:14:58.767 --> 00:15:00.667
you have to sort
of maintain contacts

00:15:00.667 --> 00:15:02.000
to all kinds of things.

00:15:02.000 --> 00:15:06.067
Some of the problems
we actually danced around here

00:15:06.067 --> 00:15:09.534
because of the way Android
works with a cloud

00:15:09.534 --> 00:15:11.067
and it's actually quite cool.

00:15:11.067 --> 00:15:13.467
Some hard problems
are best solved

00:15:13.467 --> 00:15:14.901
by getting rid
of the problem.

00:15:14.901 --> 00:15:16.734
That's what you will see
with respect

00:15:16.734 --> 00:15:18.067
to editing contacts.

00:15:18.067 --> 00:15:20.934
But let's talk
about modifying

00:15:20.934 --> 00:15:25.400
the stroke input idea
in order to input letters.

00:15:25.400 --> 00:15:30.467
Now there are many ways
of using a touchscreen

00:15:30.467 --> 00:15:33.501
and using your finger
to input letters, right?

00:15:33.501 --> 00:15:34.868
There's Graffiti.

00:15:34.868 --> 00:15:38.033
There's many, many versions
of Graffiti.

00:15:38.033 --> 00:15:42.367
All of these systems you can
actually think of as two steps.

00:15:42.367 --> 00:15:44.534
I'm going back
to the intention.

00:15:44.534 --> 00:15:46.267
You have an intent
you're communicating

00:15:46.267 --> 00:15:48.334
to the computer idea.

00:15:48.334 --> 00:15:51.167
You want to come up
with an encoding

00:15:51.167 --> 00:15:53.834
that is easy for the computer
to process.

00:15:53.834 --> 00:15:55.534
This is why Graffiti
was invented

00:15:55.534 --> 00:15:57.701
as opposed
to human handwriting.

00:15:57.701 --> 00:16:01.801
So you want a thing
that is easy,

00:16:01.801 --> 00:16:06.067
unambiguous to recognize
by everybody.

00:16:06.067 --> 00:16:08.400
And you want to come up
with a mapping

00:16:08.400 --> 00:16:11.234
that is easy for the human
to remember, right?

00:16:11.234 --> 00:16:15.067
So I could come up
with a set of strokes

00:16:15.067 --> 00:16:18.167
that are very easy
to recognize for the computer,

00:16:18.167 --> 00:16:20.400
but required extra learning.

00:16:20.400 --> 00:16:22.901
And, you know, early days of
the Apple Newton

00:16:22.901 --> 00:16:25.033
showed us that people
just give up very quickly.

00:16:25.033 --> 00:16:26.801
They don't learn a new system.

00:16:26.801 --> 00:16:30.200
So we don't claim that
what Charles and I

00:16:30.200 --> 00:16:34.801
are showing here is the world's
best encoding system for--

00:16:34.801 --> 00:16:36.701
from strokes to letters.

00:16:36.701 --> 00:16:39.100
But it is a system
that's worked for us.

00:16:39.100 --> 00:16:41.300
And it actually works
particularly well

00:16:41.300 --> 00:16:43.267
on the Android screen.

00:16:43.267 --> 00:16:44.701
So I'd like
to show you that.

00:16:44.701 --> 00:16:50.067
So this time, instead of
thinking of the phone keypad,

00:16:50.067 --> 00:16:53.634
think compass directions,
magnetic compass directions.

00:16:53.634 --> 00:16:57.567
So you have north and south,
east and west,

00:16:57.567 --> 00:17:01.133
northeast, southwest,
southeast, northwest.

00:17:01.133 --> 00:17:04.100
So I intentionally
said those in pairs.

00:17:04.100 --> 00:17:05.434
There are eight of them.

00:17:05.434 --> 00:17:10.000
Let's think of them
as four pairs of two each.

00:17:10.000 --> 00:17:12.634
Now, you know,
you sort of think about it,

00:17:12.634 --> 00:17:14.567
there are about 26 letters.

00:17:14.567 --> 00:17:16.634
You know, eight, four.

00:17:16.634 --> 00:17:17.968
Do the math, you know?

00:17:17.968 --> 00:17:21.701
Let's say we put
eight letters on each

00:17:21.701 --> 00:17:23.133
of these--for each
of these pairs.

00:17:23.133 --> 00:17:25.267
And let's sort of
think circles, okay?

00:17:25.267 --> 00:17:29.968
So let's think circles and since
this is a Google IO talk

00:17:29.968 --> 00:17:32.367
at a Google auditorium,

00:17:32.367 --> 00:17:35.033
let's think of it
as four colored circles.

00:17:35.033 --> 00:17:37.934
Like sssign the four
Google colors to them.

00:17:37.934 --> 00:17:42.534
Let's put letters "A"
through "H" on the first circle.

00:17:42.534 --> 00:17:45.067
Let's call it blue.

00:17:45.067 --> 00:17:48.834
Let's put the next eight letters
on the second circle.

00:17:48.834 --> 00:17:50.133
The next eight on the third

00:17:50.133 --> 00:17:52.300
and the next eight
on the fourth.

00:17:52.300 --> 00:17:56.167
Now we normally have eight
compass directions.

00:17:56.167 --> 00:17:58.067
There are four sets,
right?

00:17:58.067 --> 00:18:02.234
Let's use the north and south
pair to enter a circle.

00:18:02.234 --> 00:18:05.868
Let's use the east and west pair
to enter a different circle.

00:18:05.868 --> 00:18:09.534
Let's use the diagonal screen
to the outer sides.

00:18:09.534 --> 00:18:12.367
And the way the circle dialer
that we've done works--

00:18:12.367 --> 00:18:14.501
The circle keyboard,
whatever you want to call it--

00:18:14.501 --> 00:18:17.767
The way this guy works
is that you stroke

00:18:17.767 --> 00:18:20.067
in any of the eight
compass directions

00:18:20.067 --> 00:18:23.601
and that gets you into
one of the four circles.

00:18:23.601 --> 00:18:27.234
Then you trace along the circle
till you get to the letter.

00:18:27.234 --> 00:18:31.100
Now since we can enter each
circle in two places--

00:18:31.100 --> 00:18:33.901
so the north or the south
or the east or the west--

00:18:33.901 --> 00:18:36.834
think of it as entering either
at the top of the circle

00:18:36.834 --> 00:18:38.501
or the bottom
of the circle.

00:18:38.501 --> 00:18:40.701
This will all get obvious
as Charles

00:18:40.701 --> 00:18:42.033
starts showing it to you.

00:18:42.033 --> 00:18:43.868
So, Charles, let's show them
how we do an "A."

00:18:43.868 --> 00:18:46.868
So remember the first circle
has "A" through "H."

00:18:46.868 --> 00:18:51.000
So "A" is just an upward
diagonal stroke.

00:18:51.000 --> 00:18:54.767
male computer voice:
Phone book.

00:18:54.767 --> 00:18:56.234
female computer voice: "A."

00:18:56.234 --> 00:18:58.734
Raman: Now notice that it said
it in a woman's voice.

00:18:58.734 --> 00:19:01.267
It finalizes it when
he picks up his finger.

00:19:01.267 --> 00:19:02.501
male computer voice: "A."

00:19:02.501 --> 00:19:04.667
Aarthi Raman.

00:19:04.667 --> 00:19:06.567
Raman: It's also
in his contact manager,

00:19:06.567 --> 00:19:08.000
so it's actually
jumping to contacts

00:19:08.000 --> 00:19:10.133
that start with an "A,"
but we'll talk about that soon.

00:19:10.133 --> 00:19:13.067
So "A" was very easy to do.

00:19:13.067 --> 00:19:15.634
Now "A" through "H"
are on the same circle,

00:19:15.634 --> 00:19:18.200
so to do a "B,"
he would do an "A"...

00:19:18.200 --> 00:19:19.234
female computer voice: "A."

00:19:19.234 --> 00:19:20.267
Raman: trace along...

00:19:20.267 --> 00:19:21.300
female computer voice: "B."

00:19:21.300 --> 00:19:22.567
Raman: and pick up his finger.

00:19:22.567 --> 00:19:24.434
male computer voice:
No contacts found.

00:19:24.434 --> 00:19:26.400
Raman: See, he doesn't have any
contacts found at that letter.

00:19:26.400 --> 00:19:29.634
Now--So "A, B, C, D, E, F,
G, H."

00:19:29.634 --> 00:19:32.234
Now once you get used
to this input system,

00:19:32.234 --> 00:19:34.367
to do an "H,"
you obviously don't go around

00:19:34.367 --> 00:19:36.000
in a circle like a dork.

00:19:36.000 --> 00:19:37.167
You actually
go the other way around.

00:19:37.167 --> 00:19:39.334
So you go from "A"
to "H" in one stroke.

00:19:39.334 --> 00:19:41.467
female computer voice: "A, H."

00:19:41.467 --> 00:19:42.701
male computer voice:
No contact.

00:19:42.701 --> 00:19:46.434
Raman: Now supposing
you wanted to do an "E,"

00:19:46.434 --> 00:19:48.934
you could start at "A"
and go all the way around

00:19:48.934 --> 00:19:51.767
from "B" to "C" to "D"
to "E," but we don't do that,

00:19:51.767 --> 00:19:53.634
because remember
we have two points

00:19:53.634 --> 00:19:55.267
at which we can
enter the circle.

00:19:55.267 --> 00:19:56.868
So we enter directly at "E."

00:19:56.868 --> 00:19:57.868
So the downward diagonal.

00:19:57.868 --> 00:19:59.067
female computer voice: "E."

00:19:59.067 --> 00:20:00.701
male computer voice: "E."
No contacts found.

00:20:00.701 --> 00:20:04.334
Raman: So now you see the "A"
through "H" circle working.

00:20:04.334 --> 00:20:06.767
Similarly, going up
or down gets you

00:20:06.767 --> 00:20:09.067
into the second circle
that has "I" through "P."

00:20:09.067 --> 00:20:10.400
Just scroll down.

00:20:10.400 --> 00:20:15.167
female computer voice: "I...
J, K, L, M."

00:20:15.167 --> 00:20:16.334
male computer voice: "M."

00:20:16.334 --> 00:20:17.734
Mom cell.

00:20:17.734 --> 00:20:19.601
[laughter]

00:20:19.601 --> 00:20:23.000
Raman: So now this
is what we are using

00:20:23.000 --> 00:20:24.667
to filter our contact list.

00:20:24.667 --> 00:20:29.434
So we did the simple thing of
you do a letter

00:20:29.434 --> 00:20:32.501
that jumps you to the first
contact with that letter.

00:20:32.501 --> 00:20:33.667
You do one more letter.

00:20:33.667 --> 00:20:35.467
We sort of take
that as additional input

00:20:35.467 --> 00:20:37.467
and continue filtering.

00:20:37.467 --> 00:20:41.000
And so the thing
you realize with this

00:20:41.000 --> 00:20:42.601
is that you get
to your contacts

00:20:42.601 --> 00:20:44.868
in about one or two gestures.

00:20:44.868 --> 00:20:47.901
Each letter of the alphabet
is no more

00:20:47.901 --> 00:20:50.300
than three steps away,
right?

00:20:50.300 --> 00:20:53.434
So if you wanted to do a "C,"
you go "A, B, C."

00:20:53.434 --> 00:20:55.701
So that's about the longest.

00:20:55.701 --> 00:20:57.133
Because if you want
to do a "D,"

00:20:57.133 --> 00:20:58.901
you go to "E" and
go back to "D."

00:20:58.901 --> 00:21:01.367
So you get very good
at this very quickly.

00:21:01.367 --> 00:21:04.000
And the color coding sort of
helps you to learn it,

00:21:04.000 --> 00:21:05.801
but once you learned it,
you do it

00:21:05.801 --> 00:21:07.300
without looking at all.

00:21:07.300 --> 00:21:10.000
And the contact filter thing
is very, very nice,

00:21:10.000 --> 00:21:12.000
because you can really filter
through your contacts

00:21:12.000 --> 00:21:13.934
very rapidly with this.

00:21:13.934 --> 00:21:15.934
Flip to the next slide.

00:21:15.934 --> 00:21:19.167
So finally, the part about
the best way

00:21:19.167 --> 00:21:22.033
of solving some hard problems
is to get rid of them.

00:21:22.033 --> 00:21:24.534
How do you edit contacts?

00:21:24.534 --> 00:21:27.334
It's best not to edit contacts
on the phone.

00:21:27.334 --> 00:21:29.033
Nobody does that, right?

00:21:29.033 --> 00:21:30.968
What do you do particularly
if you want

00:21:30.968 --> 00:21:32.267
your friend's phone number?

00:21:32.267 --> 00:21:34.901
You say, "Could you call me so
I get it in the call log

00:21:34.901 --> 00:21:36.634
and I can add you there?"

00:21:36.634 --> 00:21:37.868
That's right.

00:21:37.868 --> 00:21:39.167
That's why we all do it.

00:21:39.167 --> 00:21:41.934
Well, because Android talks
to the cloud,

00:21:41.934 --> 00:21:43.534
there's an even better way
of doing it,

00:21:43.534 --> 00:21:45.767
which is just to use
your Gmail contact list.

00:21:45.767 --> 00:21:48.868
So I actually edit
all my contacts online

00:21:48.868 --> 00:21:50.267
and it shows up
on the phone.

00:21:50.267 --> 00:21:51.634
That's great.

00:21:51.634 --> 00:21:53.100
And if I meet people
at events like this,

00:21:53.100 --> 00:21:55.167
then I do the age-old
click of,

00:21:55.167 --> 00:21:57.767
"Oh, please give me a call and
I'll add you to the call log."

00:21:57.767 --> 00:21:59.901
So that's how we do contacts.

00:21:59.901 --> 00:22:01.200
[indistinct]

00:22:01.200 --> 00:22:02.601
Chen: Oh, sure.

00:22:02.601 --> 00:22:03.934
And actually
it's my turn now.

00:22:03.934 --> 00:22:05.467
Raman: Exactly.
That's why I wanted a word.

00:22:05.467 --> 00:22:08.334
So from here on,
we'll sort of go through

00:22:08.334 --> 00:22:11.634
all the technologies that we use
to implement all this.

00:22:11.634 --> 00:22:13.734
I'll let Charles talk
about the TTS library,

00:22:13.734 --> 00:22:15.934
the gesture library,
and all kinds of good stuff.

00:22:15.934 --> 00:22:18.901
Chen: So, hello, everyone.

00:22:18.901 --> 00:22:21.868
So I just have a quick question
before I start.

00:22:21.868 --> 00:22:25.000
How many of you saw
the keynote yesterday

00:22:25.000 --> 00:22:27.634
and the TTS demo?

00:22:27.634 --> 00:22:28.868
Awesome.

00:22:28.868 --> 00:22:30.400
Now how many of you here,
you know,

00:22:30.400 --> 00:22:32.767
are interested
in writing TTS apps

00:22:32.767 --> 00:22:35.167
or have written a TTS app
or, you know,

00:22:35.167 --> 00:22:37.701
currently working on one?

00:22:37.701 --> 00:22:39.434
Wow, this is fantastic.

00:22:39.434 --> 00:22:41.434
So I just want
to say thank you.

00:22:41.434 --> 00:22:43.667
You know, developer interest
is very important

00:22:43.667 --> 00:22:47.200
and the interest that has been
shown to the TTS library so far

00:22:47.200 --> 00:22:49.334
has been one of the factors
in getting TTS

00:22:49.334 --> 00:22:50.701
into the base platform.

00:22:50.701 --> 00:22:53.000
So give yourselves
a round of applause.

00:22:53.000 --> 00:22:57.601
[applause]

00:22:57.601 --> 00:23:01.934
And so with that being said,
you know, we don't--

00:23:01.934 --> 00:23:04.400
It's going to come in Donut,
but for right now,

00:23:04.400 --> 00:23:06.934
if you want to get a head start
and start working

00:23:06.934 --> 00:23:10.734
on talking applications,
the APIs will be very similar.

00:23:10.734 --> 00:23:12.567
We're actually involved
in working

00:23:12.567 --> 00:23:14.100
with the Android team
importing it.

00:23:14.100 --> 00:23:16.534
And what you're gonna get
is you're gonna get

00:23:16.534 --> 00:23:19.133
a head start and you can start
developing your apps

00:23:19.133 --> 00:23:22.000
and start playing
with this by using

00:23:22.000 --> 00:23:24.834
our currently released
text-to-speech library.

00:23:24.834 --> 00:23:26.968
And that's what
we'll be talking about

00:23:26.968 --> 00:23:28.801
for the rest of this session.

00:23:28.801 --> 00:23:30.767
Raman: So on these demos now,

00:23:30.767 --> 00:23:32.834
what you hear is eSpeak.

00:23:32.834 --> 00:23:35.601
But as developers,
go ahead and write your code.

00:23:35.601 --> 00:23:37.667
When Donut comes out,
you will just

00:23:37.667 --> 00:23:39.567
get a better voice
and all your apps

00:23:39.567 --> 00:23:42.000
will just sound much better.

00:23:42.000 --> 00:23:46.667
Chen: Okay.
So let's get started, here.

00:23:46.667 --> 00:23:48.667
So the TTS library.

00:23:48.667 --> 00:23:50.934
So this is something
that enables developers

00:23:50.934 --> 00:23:55.934
to create Text-To-Speech-enabled
apps that talk to users.

00:23:55.934 --> 00:23:57.868
The way it works
is that as a developer,

00:23:57.868 --> 00:24:00.100
you go into Eclipse
and you compile

00:24:00.100 --> 00:24:02.567
against the library stub jar

00:24:02.567 --> 00:24:06.100
that we've included
on our developer's site.

00:24:06.100 --> 00:24:09.734
And Text-To-Speech
is an Android service.

00:24:09.734 --> 00:24:12.067
And we have
a TTS class

00:24:12.067 --> 00:24:14.734
that acts as a wrapper
to take care

00:24:14.734 --> 00:24:16.901
of all the messy
I-Binder stuff.

00:24:16.901 --> 00:24:19.667
So you just create it
like a regular Java object,

00:24:19.667 --> 00:24:22.934
you just do a new TTS,
and you can start using it

00:24:22.934 --> 00:24:26.334
by doing tts.speak
and some text.

00:24:26.334 --> 00:24:29.901
And part of the beauty
of having this as a library

00:24:29.901 --> 00:24:33.934
that gets reused is that
the TTS library can be updated

00:24:33.934 --> 00:24:36.501
without you necessarily
having to update your app,

00:24:36.501 --> 00:24:38.200
and it also
enables multiple apps

00:24:38.200 --> 00:24:40.267
to share the same
TTS service.

00:24:40.267 --> 00:24:43.167
So the user doesn't have to
install it multiple times.

00:24:43.167 --> 00:24:48.000
And once it goes in a platform,
then everyone just gets it.

00:24:48.000 --> 00:24:50.234
So let's look
at some of the--

00:24:50.234 --> 00:24:52.534
you know, some of
the main features that we have.

00:24:52.534 --> 00:24:55.767
There's a very simple,
easy-to-use speak function.

00:24:55.767 --> 00:24:59.467
So it takes the string of text
that you want spoken,

00:24:59.467 --> 00:25:02.601
a queuing mode, whether you want
to speak immediately

00:25:02.601 --> 00:25:06.567
and flush any text that's
currently waiting to be spoken,

00:25:06.567 --> 00:25:09.234
or if you want to queue it up
and then some param--

00:25:09.234 --> 00:25:12.234
some additional parameters
that you could have.

00:25:12.234 --> 00:25:13.434
There's a stop call,

00:25:13.434 --> 00:25:15.167
because otherwise
your application

00:25:15.167 --> 00:25:17.033
may talk and never stop,

00:25:17.033 --> 00:25:19.300
which would be
kind of annoying.

00:25:19.300 --> 00:25:21.534
And you can also check
the current status--

00:25:21.534 --> 00:25:22.968
whether or not
it's currently speaking

00:25:22.968 --> 00:25:25.234
so if you're
trying to synchronize

00:25:25.234 --> 00:25:27.334
some on-screen display
you can synchronize it

00:25:27.334 --> 00:25:30.601
with where you are
in the speech.

00:25:30.601 --> 00:25:34.067
And we also have methods that
let you synthesize to a file

00:25:34.067 --> 00:25:35.901
so you can get an audio file
that, you know,

00:25:35.901 --> 00:25:38.367
you can set
as your ringtone or something.

00:25:38.367 --> 00:25:40.501
And, you know,
you can specify a language

00:25:40.501 --> 00:25:42.033
so you can
do translation apps,

00:25:42.033 --> 00:25:46.801
talking translators,
all that good stuff.

00:25:46.801 --> 00:25:49.367
And the current behavior
of the Text-To-Speech engine

00:25:49.367 --> 00:25:50.701
is that it will
automatically

00:25:50.701 --> 00:25:53.767
prompt the users
to install the TTS service.

00:25:53.767 --> 00:25:56.868
And if it's absent you can
set it to just fail silently

00:25:56.868 --> 00:25:59.000
so it won't
bother the user,

00:25:59.000 --> 00:26:01.834
or you can just have it
automatically redirect the user

00:26:01.834 --> 00:26:03.200
to Market,
where they can download

00:26:03.200 --> 00:26:06.000
the current TTS service.

00:26:06.000 --> 00:26:08.767
For more information,
and, you know,

00:26:08.767 --> 00:26:09.934
to check out
our source code,

00:26:09.934 --> 00:26:13.100
this is all open source,
free, so please take it

00:26:13.100 --> 00:26:16.200
and we look forward to seeing
what you can build with this.

00:26:16.200 --> 00:26:21.133
And you'll see the url there.
eyes-free.googlecode.com.

00:26:21.133 --> 00:26:22.734
And that's where you can
get all the source,

00:26:22.734 --> 00:26:24.767
all the jars,
everything.

00:26:24.767 --> 00:26:27.367
And so with that,
let's...

00:26:27.367 --> 00:26:29.601
I'm going to dive
into an example of this

00:26:29.601 --> 00:26:30.968
later in the talk.

00:26:30.968 --> 00:26:34.267
I'm going to talk about
the gesture library right now,

00:26:34.267 --> 00:26:37.434
and give a brief overview
before I start on the code--

00:26:37.434 --> 00:26:39.300
on the coding tutorial.

00:26:39.300 --> 00:26:40.601
So the gesture library--

00:26:40.601 --> 00:26:42.934
that's what Raman
had discussed earlier.

00:26:42.934 --> 00:26:46.200
You know, he had shown
the stroke dialer

00:26:46.200 --> 00:26:50.167
and the contacts
input method.

00:26:50.167 --> 00:26:53.667
And so both of those
use this gesture library

00:26:53.667 --> 00:26:59.601
that recognizes
very simple strokes.

00:27:02.267 --> 00:27:04.634
Now my Mac
is not behaving.

00:27:04.634 --> 00:27:06.601
There we go.
Okay.

00:27:06.601 --> 00:27:11.467
So this is an overlay
that watches for touch events,

00:27:11.467 --> 00:27:14.467
so it will tell you when a user
has touched down the screen,

00:27:14.467 --> 00:27:16.634
when they're moving
around on the screen,

00:27:16.634 --> 00:27:18.634
and when they
lift their finger up.

00:27:18.634 --> 00:27:21.501
So you know which position
they finished at.

00:27:21.501 --> 00:27:24.367
And it will tell you
the identified gestures.

00:27:24.367 --> 00:27:26.767
So you can actually
see the gesture

00:27:26.767 --> 00:27:29.067
as the user is making it,
or you can just get

00:27:29.067 --> 00:27:30.667
the final result
of, well,

00:27:30.667 --> 00:27:33.834
the user stroked
the diagonal up.

00:27:33.834 --> 00:27:36.467
And this exposes
the same UI

00:27:36.467 --> 00:27:38.901
as the stroke dialer
to the user.

00:27:38.901 --> 00:27:42.000
And we implemented this
as a custom View,

00:27:42.000 --> 00:27:43.567
and this is
a custom transparent View

00:27:43.567 --> 00:27:46.601
that you can layer
on top of your applications.

00:27:46.601 --> 00:27:48.100
And so this means that,
you know,

00:27:48.100 --> 00:27:50.300
you can do your UI
however you want to,

00:27:50.300 --> 00:27:51.767
and you can just
overlay this on top,

00:27:51.767 --> 00:27:57.667
and it won't have any effect
in how your view renders.

00:27:57.667 --> 00:27:58.968
To use this
what you have to do

00:27:58.968 --> 00:28:02.000
is you have to implement
a GestureListener.

00:28:02.000 --> 00:28:05.334
So you create a
TouchGestureControlOverlay,

00:28:05.334 --> 00:28:08.667
and you start with
a FrameLayout as your base View.

00:28:08.667 --> 00:28:11.667
So what you would normally
have as your View,

00:28:11.667 --> 00:28:15.000
you set that as the first child
of your FrameLayout.

00:28:15.000 --> 00:28:17.834
And I have an example of this
later on in the talk.

00:28:17.834 --> 00:28:20.534
But if you do that,
then what you'll get

00:28:20.534 --> 00:28:24.334
is you'll be able to layer this
TouchGestureControlOverlay

00:28:24.334 --> 00:28:25.934
as a child
on top of that,

00:28:25.934 --> 00:28:29.067
and then you can
enable or disable the gestures

00:28:29.067 --> 00:28:34.734
by adding or removing
that View from your FrameLayout.

00:28:34.734 --> 00:28:36.033
And so with that,

00:28:36.033 --> 00:28:38.367
let's jump into
the heart of this presentation

00:28:38.367 --> 00:28:42.167
and look at a tutorial
with some real code.

00:28:42.167 --> 00:28:47.200
And so I'm going to demonstrate
a simple music file browser.

00:28:47.200 --> 00:28:50.267
How many of you here
have gone to Anddev.org?

00:28:50.267 --> 00:28:53.634
It's a website with developers
and code examples. Cool.

00:28:53.634 --> 00:28:57.767
So they actually posted
a very nice FileBrowser tutorial

00:28:57.767 --> 00:28:59.734
when Android
first came out.

00:28:59.734 --> 00:29:02.133
You know, how you can
explore the SDCard system

00:29:02.133 --> 00:29:03.667
and look at
what's there.

00:29:03.667 --> 00:29:07.868
So we took that, and we show how
in just a very few lines of code

00:29:07.868 --> 00:29:13.000
you can add both Text-To-Speech
and gesture controls to it.

00:29:13.000 --> 00:29:15.567
So this is a very simple
music file browser.

00:29:15.567 --> 00:29:18.634
It lets you browse directories
on your SDCard

00:29:18.634 --> 00:29:21.501
and play MP3 files
that it finds there.

00:29:21.501 --> 00:29:24.567
And you play the music
by just clicking on that file.

00:29:24.567 --> 00:29:26.701
And the directory path
is the first entry.

00:29:26.701 --> 00:29:28.400
If you click
on the directory path,

00:29:28.400 --> 00:29:29.601
then it just
cycles through

00:29:29.601 --> 00:29:33.734
all the MP3s you have
in that subdirectory.

00:29:33.734 --> 00:29:35.801
And as you scroll
through the list,

00:29:35.801 --> 00:29:37.300
you get some
tactile feedback,

00:29:37.300 --> 00:29:41.968
so you actually feel like
you're moving through a list.

00:29:41.968 --> 00:29:46.901
And so now I'm going to explain
how to add spoken feedback.

00:29:46.901 --> 00:29:48.067
So you first start off

00:29:48.067 --> 00:29:51.601
by creating a TTS object
in method onCreate.

00:29:51.601 --> 00:29:53.701
And this will cause it
to run the Text-To-Speech

00:29:53.701 --> 00:29:56.167
as part of its
initialization.

00:29:56.167 --> 00:29:59.734
And then you can add some
application-specific logic there

00:29:59.734 --> 00:30:02.534
so that your application
comes up talking.

00:30:02.534 --> 00:30:08.467
So let me just switch over to
Eclipse and show you the code.

00:30:11.801 --> 00:30:16.567
Okay, so this is
the music file browser--

00:30:16.567 --> 00:30:20.801
the base music file browser
before we added anything to it.

00:30:20.801 --> 00:30:23.934
And let me actually
demonstrate that first

00:30:23.934 --> 00:30:28.234
before I go any further
in this talk.

00:30:28.234 --> 00:30:33.033
So it's the first
music file browser here.

00:30:33.033 --> 00:30:36.000
And you see
the contents of my SDCard.

00:30:36.000 --> 00:30:38.400
I can scroll
through it.

00:30:38.400 --> 00:30:39.968
And, you know,
nothing's talking,

00:30:39.968 --> 00:30:41.601
but, you know,
it works.

00:30:41.601 --> 00:30:43.667
I can go to MP3s.

00:30:43.667 --> 00:30:46.300
And, you know, I can play
a couple of popular songs.

00:30:46.300 --> 00:30:47.567
Like this.

00:30:47.567 --> 00:30:50.567
[Rick Astley's
 &lt;i&gt;Never Gonna Give You Up]&lt;/i&gt;

00:30:50.567 --> 00:30:52.300
Okay, enough of that.

00:30:52.300 --> 00:30:54.200
Raman: That's popular?
Chen: [stops music]

00:30:54.200 --> 00:30:55.801
Chen: I-I think it is
popular on the Internet.

00:30:55.801 --> 00:30:57.033
At least on YouTube.

00:30:57.033 --> 00:30:58.601
[laughter]

00:30:58.601 --> 00:31:00.701
So--Okay, so let's see--

00:31:00.701 --> 00:31:02.634
Now let's see if we can
make this a little bit better.

00:31:02.634 --> 00:31:04.234
A little bit
more interesting.

00:31:04.234 --> 00:31:07.234
And, you know, let's see
if we can make this talk.

00:31:07.234 --> 00:31:09.133
So...

00:31:09.133 --> 00:31:11.400
Okay, I need to switch
back to my Mac, here.

00:31:11.400 --> 00:31:14.767
And--Okay, so what
you just saw here

00:31:14.767 --> 00:31:17.834
is the basic
music file browser.

00:31:17.834 --> 00:31:21.634
And this is just the tutorial
that was on Anddev.org

00:31:21.634 --> 00:31:24.968
that we modified a little bit
to handle the playing.

00:31:24.968 --> 00:31:28.801
So where we made
the modification is down here.

00:31:28.801 --> 00:31:32.200
And we added
a toggle playing function.

00:31:32.200 --> 00:31:35.534
So--So we did that,
and the other thing is we added

00:31:35.534 --> 00:31:41.534
some tactile feedback to when
you scroll through the list.

00:31:41.534 --> 00:31:43.834
So if you look at here
we have this--

00:31:43.834 --> 00:31:45.300
I'll track by that.

00:31:45.300 --> 00:31:46.901
Okay, how's the font size
for everyone?

00:31:46.901 --> 00:31:49.033
Can you guys
see it okay?

00:31:49.033 --> 00:31:51.934
No? Okay, let me
zoom that a little bit.

00:31:51.934 --> 00:31:57.868
Okay, so now we're
better on text size.

00:32:00.267 --> 00:32:04.400
Okay.

00:32:04.400 --> 00:32:10.234
So here is where we added
our vibration control to it.

00:32:10.234 --> 00:32:12.601
Aside from that, it's the same
basic file browser.

00:32:12.601 --> 00:32:17.067
So let's see,
how can we add speech to this?

00:32:17.067 --> 00:32:21.234
So here is the version
where we've added speech.

00:32:21.234 --> 00:32:23.534
And I've helpfully
set break points

00:32:23.534 --> 00:32:27.334
so I can find all the places
where I added some code.

00:32:27.334 --> 00:32:28.434
There's not
that much code,

00:32:28.434 --> 00:32:30.934
so the break points
are pretty useful.

00:32:30.934 --> 00:32:35.901
So we added a line to--
here to create a TTS object.

00:32:35.901 --> 00:32:37.133
Up here.

00:32:37.133 --> 00:32:40.133
And then we have
a TTS initialization method.

00:32:40.133 --> 00:32:44.667
This will get called
whenever the TTS is created.

00:32:44.667 --> 00:32:47.667
And so you see when we start it
we helpfully announce

00:32:47.667 --> 00:32:52.133
that, hey,
music file browser started.

00:32:52.133 --> 00:32:55.767
And then the OnCreate
method of your app.

00:32:55.767 --> 00:33:00.267
We have now
this TTS--new TTS.

00:33:00.267 --> 00:33:05.501
And we set the initialization
listener to "ttsInitListener."

00:33:05.501 --> 00:33:09.601
So this--this is what causes

00:33:09.601 --> 00:33:12.367
our Init function
up here to get called.

00:33:12.367 --> 00:33:15.067
And then--then it's
pretty simple, right?

00:33:15.067 --> 00:33:17.133
Now, you know,
earlier I'd mentioned

00:33:17.133 --> 00:33:19.033
we had this
vibration feedback

00:33:19.033 --> 00:33:21.567
for when you scroll past
certain items in a list.

00:33:21.567 --> 00:33:23.634
Well, so we can
actually latch

00:33:23.634 --> 00:33:26.667
the Text-To-Speech functionality
on top of that.

00:33:26.667 --> 00:33:28.834
So instead of just vibrating,
play will be vibrated

00:33:28.834 --> 00:33:33.100
and we spoke the directory
or the music file name.

00:33:33.100 --> 00:33:35.601
Well, that's what
we ended up doing.

00:33:35.601 --> 00:33:38.534
So if you look
down here...

00:33:43.968 --> 00:33:45.400
Ta-dah.

00:33:45.400 --> 00:33:50.234
So there we have
"tts.speak(filename.substring,"

00:33:50.234 --> 00:33:52.033
and we just
speak it there.

00:33:52.033 --> 00:33:53.367
It flushes
right away.

00:33:53.367 --> 00:33:54.767
And you can--

00:33:54.767 --> 00:33:58.634
As a result, you can hear
what you're scrolling to.

00:33:58.634 --> 00:34:04.634
So--so let me
demo that version.

00:34:06.968 --> 00:34:09.567
computerized male voice:
Music file browser started.

00:34:09.567 --> 00:34:11.000
Chen: So there.

00:34:11.000 --> 00:34:14.601
So now you'll always know
when it actually started up.

00:34:14.601 --> 00:34:17.133
And now I can
scroll through.

00:34:17.133 --> 00:34:18.868
computer voice:
Up one level.

00:34:18.868 --> 00:34:21.934
Raman: On your own phone
it won't talk so loudly.

00:34:21.934 --> 00:34:23.434
Chen: Yeah,
it only talks this loudly

00:34:23.434 --> 00:34:25.534
if you put it
next to a microphone.

00:34:25.534 --> 00:34:27.200
computer voice:
D-sim, download.

00:34:27.200 --> 00:34:30.734
D-sim, dow--
espeak data, MP3s.

00:34:30.734 --> 00:34:31.868
Chen: Okay.

00:34:31.868 --> 00:34:33.434
Raman: The voice you hear--
that is eSpeak,

00:34:33.434 --> 00:34:35.868
and as I said, this will--
this--you know, over time you'll

00:34:35.868 --> 00:34:38.467
have multiple voices available
to you that you can choose.

00:34:38.467 --> 00:34:40.033
computer voice:
Up one level.

00:34:40.033 --> 00:34:42.400
Portal, &lt;i&gt;Still Alive.mp3.&lt;/i&gt;

00:34:42.400 --> 00:34:45.400
[Portal's &lt;i&gt;Still Alive]&lt;/i&gt;

00:34:45.400 --> 00:34:47.834
[laughter]

00:34:47.834 --> 00:34:51.534
Chen: Okay, so cool.
Huge success, right?

00:34:51.534 --> 00:34:56.300
So--Okay, so let's kind of see
what that actually meant.

00:34:56.300 --> 00:34:58.901
So--so you saw
all the code that I added.

00:34:58.901 --> 00:35:01.701
Those couple of lines--
That was--that was it.

00:35:01.701 --> 00:35:06.367
Really, to get
TTS working.

00:35:06.367 --> 00:35:07.367
And see, if you--

00:35:07.367 --> 00:35:08.701
if you actually
go back and count--

00:35:08.701 --> 00:35:10.767
So all--so these slides
will be available,

00:35:10.767 --> 00:35:12.868
and our code
is already available

00:35:12.868 --> 00:35:15.534
on our Eyes-Free
Google Code project.

00:35:15.534 --> 00:35:19.334
So I challenge you all to go
back and download this code--

00:35:19.334 --> 00:35:21.467
check it out,
and actually do a diff

00:35:21.467 --> 00:35:23.367
and count
the number of lines.

00:35:23.367 --> 00:35:25.667
Because the diff--
You're gonna find

00:35:25.667 --> 00:35:29.133
that it's really just
13 lines of difference.

00:35:29.133 --> 00:35:32.467
So adding--And this includes,
you know, import statements,

00:35:32.467 --> 00:35:34.534
just, you know, generic,
boilerplate things, right?

00:35:34.534 --> 00:35:37.701
Like adding a closing brace;
that's a line.

00:35:37.701 --> 00:35:41.300
So it add--We only needed
to add 13 lines of code,

00:35:41.300 --> 00:35:44.067
and we added full Text-To-Speech
functionality

00:35:44.067 --> 00:35:47.601
to this
music file browser.

00:35:47.601 --> 00:35:49.868
So--so this is--
this is nice.

00:35:49.868 --> 00:35:52.100
You know, now you have
a talking music file browser,

00:35:52.100 --> 00:35:54.033
but what if you
wanted to use this

00:35:54.033 --> 00:35:56.200
while you were jogging
or something, right?

00:35:56.200 --> 00:35:57.868
It's not going to be
very convenient

00:35:57.868 --> 00:36:00.334
for you to jog
and try to use the track ball.

00:36:00.334 --> 00:36:03.167
That's going to be
a little bit difficult.

00:36:03.167 --> 00:36:04.501
It's probably
much easier

00:36:04.501 --> 00:36:06.934
if you could just do
some gestures on the screen;

00:36:06.934 --> 00:36:08.501
scroll through
what you wanted.

00:36:08.501 --> 00:36:09.834
So--

00:36:09.834 --> 00:36:11.601
Raman: You don't want
to jog with the track ball

00:36:11.601 --> 00:36:13.167
because the track ball
will keep jogging

00:36:13.167 --> 00:36:15.734
and nothing
will ever be stable.

00:36:15.734 --> 00:36:17.934
You really don't--
Need something else.

00:36:17.934 --> 00:36:20.868
Chen: Exactly.

00:36:20.868 --> 00:36:24.133
So--so let's add
the gesture input method

00:36:24.133 --> 00:36:28.067
to the music file browser.

00:36:28.067 --> 00:36:30.033
So as I mentioned before,

00:36:30.033 --> 00:36:32.534
the gesture overlay
is a transparent overlay,

00:36:32.534 --> 00:36:33.901
and you can just over--

00:36:33.901 --> 00:36:37.601
you can just put it on top
of your existing content views.

00:36:37.601 --> 00:36:40.234
And this won't interfere with
your visual appearance at all

00:36:40.234 --> 00:36:43.467
because, hey, the whole thing's
transparent, right?

00:36:43.467 --> 00:36:45.868
So you add this
to handle user input,

00:36:45.868 --> 00:36:48.767
and we're going to add
two very simple controls.

00:36:48.767 --> 00:36:50.834
So we're going to say
when you tap down on the screen

00:36:50.834 --> 00:36:53.000
that's play or pause,

00:36:53.000 --> 00:36:55.734
and if you want to gesture
towards the right,

00:36:55.734 --> 00:36:57.300
that means you want
to just cycle

00:36:57.300 --> 00:37:03.367
to the next track
in that directory.

00:37:03.367 --> 00:37:06.501
So--so this is the type of code
that you have to write.

00:37:06.501 --> 00:37:08.167
It's fairly simple.

00:37:08.167 --> 00:37:12.033
You start off
with a GestureListener.

00:37:12.033 --> 00:37:13.868
man: [indistinct]

00:37:13.868 --> 00:37:15.367
Chen: Ooh, whoa.

00:37:15.367 --> 00:37:18.033
Thank you.
Sorry about that.

00:37:18.033 --> 00:37:19.667
Okay, so yeah.

00:37:19.667 --> 00:37:20.934
Anyway,
you didn't miss much.

00:37:20.934 --> 00:37:24.634
It was basically just--
just code here.

00:37:24.634 --> 00:37:26.100
Thank you.

00:37:26.100 --> 00:37:28.267
Can we get--give this guy
a piece of chocolate too?

00:37:28.267 --> 00:37:29.267
[laughter]

00:37:29.267 --> 00:37:30.701
Raman: I got it.

00:37:30.701 --> 00:37:32.734
We could be like dog kennels,
handing out gifts for bugs.

00:37:32.734 --> 00:37:36.133
Chen: Absolutely, absolutely.
Thank you.

00:37:36.133 --> 00:37:40.767
Okay, so--So yes.
GestureListener.

00:37:40.767 --> 00:37:42.434
So we're going to do--

00:37:42.434 --> 00:37:44.734
We're actually doing
something very simple because

00:37:44.734 --> 00:37:48.033
we're just going to do tap
to play or pause.

00:37:48.033 --> 00:37:49.801
And we're going to do
a stroke to the right

00:37:49.801 --> 00:37:51.567
to cycle through
the next thing.

00:37:51.567 --> 00:37:53.801
In both cases,
we actually don't care so much

00:37:53.801 --> 00:37:56.934
what the user is doing
as they're making the changes,

00:37:56.934 --> 00:37:59.501
so this "onGestureChange,"
we can leave it empty.

00:37:59.501 --> 00:38:01.601
We don't really
have to implement it.

00:38:01.601 --> 00:38:04.267
And then--All we care about
is "onGestureFinish."

00:38:04.267 --> 00:38:06.934
So if they finish
their gesture in the center,

00:38:06.934 --> 00:38:08.300
then that's a tap.

00:38:08.300 --> 00:38:11.000
So we do the "play/pause music"
code here.

00:38:11.000 --> 00:38:14.567
And if we see that the gesture
is a gesture to the right,

00:38:14.567 --> 00:38:15.901
then, hey,
it's a stroke to the right.

00:38:15.901 --> 00:38:17.100
That means
we should go ahead

00:38:17.100 --> 00:38:20.834
and play the next track
in that directory.

00:38:20.834 --> 00:38:23.033
And we don't really care about
when they start the gesture.

00:38:23.033 --> 00:38:24.467
'Cause, you know,

00:38:24.467 --> 00:38:27.968
we're not doing anything
that's timing-related here.

00:38:27.968 --> 00:38:31.434
Now, to put this
into your app,

00:38:31.434 --> 00:38:33.033
What you have to do
is you should

00:38:33.033 --> 00:38:36.467
take your main content View,
put that inside a FrameLayout,

00:38:36.467 --> 00:38:38.467
and then make
your FrameLayout the main View.

00:38:38.467 --> 00:38:41.467
So this way you can
switch your overlay on and off

00:38:41.467 --> 00:38:45.000
by just adding
or removing it.

00:38:45.000 --> 00:38:47.901
And then to toggle it,
then, it's pretty simple

00:38:47.901 --> 00:38:49.534
because all
you have to do to--

00:38:49.534 --> 00:38:51.968
if the overlay is active
and you want to disable it,

00:38:51.968 --> 00:38:55.000
you just do a simple
"removeView," and it's gone.

00:38:55.000 --> 00:38:56.834
And then you can
touch the screen

00:38:56.834 --> 00:39:00.868
and interact with it
as if you didn't have gestures.

00:39:00.868 --> 00:39:03.767
And then if you want
to turn it back on,

00:39:03.767 --> 00:39:05.767
you just do "addView,"
and suddenly now

00:39:05.767 --> 00:39:07.868
you get this
transparent overlay on top,

00:39:07.868 --> 00:39:10.334
touching it becomes
gesture inputs,

00:39:10.334 --> 00:39:13.701
and you won't trigger anything
in the View underneath it.

00:39:13.701 --> 00:39:17.534
So let's look at what this--
what this code looks like, here.

00:39:24.567 --> 00:39:27.467
So here is
our own gesture code.

00:39:27.467 --> 00:39:31.200
This is what I had just shown
in the slide earlier.

00:39:31.200 --> 00:39:33.434
And...

00:39:33.434 --> 00:39:34.701
As you see,
we didn't need to worry

00:39:34.701 --> 00:39:36.801
about gesture changes
or gesture starts,

00:39:36.801 --> 00:39:40.100
we just look at how
the user ended their gesture;

00:39:40.100 --> 00:39:42.834
determine what they did.

00:39:42.834 --> 00:39:46.300
And the main change
that we had to do was over here.

00:39:46.300 --> 00:39:49.968
So over here, notice how now
I've created a myFrame object.

00:39:49.968 --> 00:39:51.968
That's a new FrameLayout.

00:39:51.968 --> 00:39:54.367
I'm adding the "myList,"
which is the content view,

00:39:54.367 --> 00:39:56.067
to that FrameLayout,

00:39:56.067 --> 00:39:58.734
and then I'm making
this gesture overlay--

00:39:58.734 --> 00:40:00.334
Which I'm currently
not putting it in yet,

00:40:00.334 --> 00:40:03.667
because I didn't want
to start off in that mode.

00:40:03.667 --> 00:40:06.667
And then I set
my content view for my app

00:40:06.667 --> 00:40:08.601
as the FrameLayout.

00:40:08.601 --> 00:40:14.534
So--And so then the FrameLayout
manages everything else.

00:40:17.400 --> 00:40:20.200
And finally I had to add
an "onKeyDown" event

00:40:20.200 --> 00:40:21.501
because, you know,

00:40:21.501 --> 00:40:24.100
sometimes you do want
to switch between the two modes.

00:40:24.100 --> 00:40:26.334
You might not always
want to be in gesture mode.

00:40:26.334 --> 00:40:29.300
For example, it might be nice to
be able to just click down

00:40:29.300 --> 00:40:31.501
on a directory
to drill down into it.

00:40:31.501 --> 00:40:32.601
In that case
you don't really

00:40:32.601 --> 00:40:34.467
want that to get
treated as a tap,

00:40:34.467 --> 00:40:38.267
so to switch back and forth,
I'm using the "Menu" key.

00:40:38.267 --> 00:40:42.133
And using a Menu key
you swap it on, swap it off.

00:40:42.133 --> 00:40:46.267
So--so let's look
at this final version, here.

00:40:46.267 --> 00:40:48.934
And this time
I'll remember to switch.

00:40:48.934 --> 00:40:50.501
Yay.

00:40:50.501 --> 00:40:53.467
All right.

00:40:53.467 --> 00:40:55.868
Go back
to the home screen.

00:40:55.868 --> 00:40:58.367
computer voice:
Music file browser started.

00:40:58.367 --> 00:41:01.167
Chen: Okay, so now we have
the music file browser.

00:41:01.167 --> 00:41:03.000
So it started off
without gestures,

00:41:03.000 --> 00:41:05.267
so I can actually
just click on the screen.

00:41:05.267 --> 00:41:06.634
I click this.

00:41:06.634 --> 00:41:08.133
So that worked.

00:41:08.133 --> 00:41:12.133
Now let's say I want to just
start playing using gestures.

00:41:12.133 --> 00:41:15.601
And I don't want to care
where I'm tapping.

00:41:15.601 --> 00:41:17.501
computer voice:
Gestures activated.

00:41:17.501 --> 00:41:18.534
Chen: Gestures activated.

00:41:18.534 --> 00:41:20.534
Okay, so let's stroke.

00:41:20.534 --> 00:41:23.534
[Portal &lt;i&gt;Still Alive]&lt;/i&gt;

00:41:23.534 --> 00:41:24.801
Raman: It worked.

00:41:24.801 --> 00:41:28.634
[Rick Astley
 &lt;i&gt;Never Gonna Give You Up]&lt;/i&gt;

00:41:28.634 --> 00:41:32.534
[applause]

00:41:32.534 --> 00:41:35.434
Chen: Thank you,
thank you.

00:41:35.434 --> 00:41:39.067
So now, if you look at what--
what that actually amounted to,

00:41:39.067 --> 00:41:43.534
again I challenge you to go back
and do a diff and verify this,

00:41:43.534 --> 00:41:47.234
but when we did this,
we added about 40 lines of code.

00:41:47.234 --> 00:41:48.634
And that was it.

00:41:48.634 --> 00:41:51.367
So adding 40 lines of code,
you get this gesture thing,

00:41:51.367 --> 00:41:53.934
and it just
works for you.

00:41:53.934 --> 00:41:55.534
And so with that,

00:41:55.534 --> 00:41:58.567
I will hand it back to Raman
for the conclusion.

00:41:58.567 --> 00:42:00.067
Raman:
Okay, thanks, Charles.

00:42:00.067 --> 00:42:02.868
So as Charles said earlier,
all these libraries

00:42:02.868 --> 00:42:05.634
are open source as part
of the Eyes-Free project.

00:42:05.634 --> 00:42:06.968
Feel free to use it.

00:42:06.968 --> 00:42:10.701
Even better, feel free
to contribute patches.

00:42:10.701 --> 00:42:13.501
Contributions,
innovations.

00:42:13.501 --> 00:42:17.934
In conclusion, I believe
user interaction research

00:42:17.934 --> 00:42:19.934
in the mobile space--

00:42:19.934 --> 00:42:25.400
especially for devices that can
see, hear, and sense the world--

00:42:25.400 --> 00:42:29.667
is a very, very exciting area
of research that's opening up.

00:42:29.667 --> 00:42:33.133
The mistake we shouldn't make
is to try and take

00:42:33.133 --> 00:42:35.167
the 30-year old GUI
from the PC

00:42:35.167 --> 00:42:36.834
and push it
into the mobile device.

00:42:36.834 --> 00:42:41.634
I think that would be
a disservice to all of us.

00:42:41.634 --> 00:42:44.167
I think these
devices can be--

00:42:44.167 --> 00:42:47.400
do much better
at sensing our intent

00:42:47.400 --> 00:42:50.267
based on what they sense
of the world,

00:42:50.267 --> 00:42:52.100
what they sense
of our actions,

00:42:52.100 --> 00:42:54.367
what they sense
of our history of actions.

00:42:54.367 --> 00:42:59.734
And they also have many, many
ways of grabbing our attention.

00:42:59.734 --> 00:43:01.234
From the type
of work I do,

00:43:01.234 --> 00:43:04.100
speech output
being my primary--

00:43:04.100 --> 00:43:07.734
sort of the biggest thing that
I am interested in and work on.

00:43:07.734 --> 00:43:10.868
Voice on Android, as you heard
yesterday during the keynote,

00:43:10.868 --> 00:43:13.868
voice output is going to
get a lot, lot better

00:43:13.868 --> 00:43:17.634
thanks to our friends
from Zurich.

00:43:17.634 --> 00:43:22.300
So in conclusion I think there's
a lot more stuff to build here.

00:43:22.300 --> 00:43:24.734
All of you even have
the phones to build them on,

00:43:24.734 --> 00:43:27.767
so come hack with us,
and let's have a great time.

00:43:27.767 --> 00:43:29.400
And at the end
of the day,

00:43:29.400 --> 00:43:33.534
let's build technologies
and user interfaces

00:43:33.534 --> 00:43:37.701
that bend those devices that you
have in your hand to your will,

00:43:37.701 --> 00:43:39.467
as opposed to you
having changed--

00:43:39.467 --> 00:43:43.868
having to change how you work
and play to match those devices.

00:43:43.868 --> 00:43:46.300
Let's flip
to my final slide,

00:43:46.300 --> 00:43:50.634
which is my usual Q and A slide
that's my dog flying a 767.

00:43:50.634 --> 00:43:52.601
So if that's possible,
anything's possible.

00:43:52.601 --> 00:43:55.634
[laughter]

00:43:55.634 --> 00:43:57.200
Chen: So yeah.

00:43:57.200 --> 00:43:59.834
So now we're gonna
take questions.

00:43:59.834 --> 00:44:03.133
So please don't be shy.
We don't bite.

00:44:03.133 --> 00:44:04.467
Raman: We only
bite chocolate.

00:44:04.467 --> 00:44:08.300
Chen: Yes.

00:44:08.300 --> 00:44:10.000
man: I have two questions.

00:44:10.000 --> 00:44:11.133
Chen: Sure.

00:44:11.133 --> 00:44:12.901
man: Is it easy
for a handset vendor

00:44:12.901 --> 00:44:14.567
to change the voice?

00:44:14.567 --> 00:44:16.701
I think the voice
is pretty...

00:44:16.701 --> 00:44:20.033
Chen: So--so that's
going to be a Donut question

00:44:20.033 --> 00:44:23.267
because that's going to ship
with the Donut platform.

00:44:23.267 --> 00:44:25.868
And what I would like to point
out there is for right now,

00:44:25.868 --> 00:44:27.200
the Text-To-Speech library--

00:44:27.200 --> 00:44:30.067
it's just a library
that you can get off-market.

00:44:30.067 --> 00:44:32.801
So you can get
any TTS you want off there.

00:44:32.801 --> 00:44:35.534
And we do want to make it
a pluggable TTS architecture

00:44:35.534 --> 00:44:38.067
So you could use
our default TTS voice,

00:44:38.067 --> 00:44:42.067
or you can use some other
TTS voice that you prefer.

00:44:42.067 --> 00:44:44.167
But our default will sound
pretty darn good.

00:44:44.167 --> 00:44:46.234
man: Okay, and the second
question is

00:44:46.234 --> 00:44:48.067
is there any
global settings menu

00:44:48.067 --> 00:44:51.834
that application vendor
can check the settings value

00:44:51.834 --> 00:44:55.334
and ultimately enable
these kind of features?

00:44:55.334 --> 00:44:58.634
Chen: So I think you're
a little bit confused, sir,

00:44:58.634 --> 00:45:00.300
about enabling
this feature.

00:45:00.300 --> 00:45:03.167
Because the way it works
is this is an API.

00:45:03.167 --> 00:45:05.868
So this is going to be
just like, you know,

00:45:05.868 --> 00:45:09.000
using the accelerometer on the
device or something like that.

00:45:09.000 --> 00:45:10.467
The user doesn't
have to explicitly

00:45:10.467 --> 00:45:12.534
turn on the accelerometer,
it's just there.

00:45:12.534 --> 00:45:18.434
You just code to it, you write
a function call and it works.

00:45:18.434 --> 00:45:20.601
Yes.

00:45:20.601 --> 00:45:22.434
man: How would you inform
the user

00:45:22.434 --> 00:45:23.767
of this functionality,

00:45:23.767 --> 00:45:25.901
especially the gesture
functionality as being there,

00:45:25.901 --> 00:45:27.701
in a consistent way?

00:45:27.701 --> 00:45:29.634
Raman: That's--
that's a good question.

00:45:29.634 --> 00:45:31.734
You're asking the question
of discoverability,

00:45:31.734 --> 00:45:34.868
and that question
is, in general,

00:45:34.868 --> 00:45:36.601
one of the hardest
in the mobile platform.

00:45:36.601 --> 00:45:41.567
So all of you holding those
Dream G1 V2 devices,

00:45:41.567 --> 00:45:44.400
do you know that holding down
the "Home" key--

00:45:44.400 --> 00:45:47.300
a long press on the "Home" key
brings up a list of six--

00:45:47.300 --> 00:45:48.968
the last six used
applications?

00:45:48.968 --> 00:45:50.634
I discovered
that today,

00:45:50.634 --> 00:45:52.467
nine months
after having a phone.

00:45:52.467 --> 00:45:53.901
[laughter]

00:45:53.901 --> 00:45:58.067
So you ask a good question.
Do I have an answer to that? No.

00:45:58.067 --> 00:46:01.634
I believe, though,
that over time we need to--

00:46:01.634 --> 00:46:04.701
we will come up with gestures
that are sufficiently intuitive

00:46:04.701 --> 00:46:06.334
that people use it.

00:46:06.334 --> 00:46:08.033
There will be
some learning involved,

00:46:08.033 --> 00:46:10.234
there will be some
word of mouth involved.

00:46:10.234 --> 00:46:11.234
You know.

00:46:11.234 --> 00:46:12.601
And if it is
really useful,

00:46:12.601 --> 00:46:14.901
people will over time
discover it and learn it.

00:46:14.901 --> 00:46:17.000
That's the best
answer I have.

00:46:17.000 --> 00:46:22.234
I don't believe the PC desktop
GUI answer to this is--

00:46:22.234 --> 00:46:23.367
which was, you know,

00:46:23.367 --> 00:46:25.100
"everything shall be
made discoverable

00:46:25.100 --> 00:46:26.434
by cluttering the screen"

00:46:26.434 --> 00:46:29.667
is going to work, unfortunately,
in the mobile space.

00:46:29.667 --> 00:46:30.968
So if you're--

00:46:30.968 --> 00:46:32.501
That's a good
research question to answer.

00:46:32.501 --> 00:46:34.267
We don't have
an answer to that.

00:46:34.267 --> 00:46:36.167
Chen: Yes, Clayden.

00:46:36.167 --> 00:46:39.501
Clayden: Where do things stand
with rooting synthesized speech

00:46:39.501 --> 00:46:41.300
out over the--
a phone call?

00:46:41.300 --> 00:46:43.634
Is that now possible?

00:46:43.634 --> 00:46:47.534
Raman: Routing synthesized
speech out over a phone call.

00:46:47.534 --> 00:46:49.234
I do not believe--

00:46:49.234 --> 00:46:51.501
I do not believe I know
the answer to that yet.

00:46:51.501 --> 00:46:53.434
I could check
on that for you.

00:46:53.434 --> 00:46:55.901
Clayden: Okay, thanks.

00:46:55.901 --> 00:46:57.834
Chen: Yes.

00:46:57.834 --> 00:47:02.701
woman: Hi. Are you also
working on Speech-To-Text?

00:47:02.701 --> 00:47:04.300
Like, is it possible
to input speech?

00:47:04.300 --> 00:47:05.734
Chen: So currently
in Cupcake

00:47:05.734 --> 00:47:09.033
there is a reco API
that you could use.

00:47:09.033 --> 00:47:10.634
Raman: There's a reco API.

00:47:10.634 --> 00:47:14.234
You can--Over time you'll also
be able to use an IME

00:47:14.234 --> 00:47:15.801
that is speech-input.

00:47:15.801 --> 00:47:19.234
That--that work is being done
by many people at Google

00:47:19.234 --> 00:47:21.534
including the people
who do Voice Search.

00:47:21.534 --> 00:47:23.334
So that
is being worked on.

00:47:23.334 --> 00:47:25.901
It's not typically us.

00:47:25.901 --> 00:47:27.701
woman:
So that's not part of Donut.

00:47:27.701 --> 00:47:28.834
Raman: Sorry?

00:47:28.834 --> 00:47:30.100
woman:
Would that be part of the--

00:47:30.100 --> 00:47:31.834
Raman: The Voice Search part
is part of Cupcake.

00:47:31.834 --> 00:47:33.367
woman: Okay.
Chen: It's already out there.

00:47:33.367 --> 00:47:38.200
woman: Okay, cool.
Thank you.

00:47:38.200 --> 00:47:42.133
Chen: Anything else?

00:47:42.133 --> 00:47:43.934
Okay, well, thank you all
for coming out here.

00:47:43.934 --> 00:47:45.067
It was great having you.

00:47:45.067 --> 00:47:46.167
Raman: And please
send us your feedback.

00:47:46.167 --> 00:47:47.834
[applause]

00:47:47.834 --> 00:47:50.000
Have a good day.

