WEBVTT
Kind: captions
Language: en

00:00:01.630 --> 00:00:12.660
&gt;&gt;Joe: --again to Android Developer Office
Hours.

00:00:12.660 --> 00:00:14.570
I'm Joe Malin, your moderator.

00:00:14.570 --> 00:00:15.570
Next to me is Trevor Johns.

00:00:15.570 --> 00:00:16.570
&gt;&gt;Trevor: Howdy.

00:00:16.570 --> 00:00:21.589
&gt;&gt;Joe: And beside him, down at the end of
the table, um, ignoring us, is Alex Lucas.

00:00:21.589 --> 00:00:23.619
Our engineer today is Robert Lee.

00:00:23.619 --> 00:00:24.619
&gt;&gt;Trevor: [laughs]

00:00:24.619 --> 00:00:25.619
&gt;&gt;Joe: And, uh.

00:00:25.619 --> 00:00:28.369
&gt;&gt;Trevor: The world is shifting around Alex.

00:00:28.369 --> 00:00:30.949
&gt;&gt;Joe: The world is, the world is moving around
Alex.

00:00:30.949 --> 00:00:32.180
It revolves around him.

00:00:32.180 --> 00:00:37.330
So with no further ado, let's go to the Moderator
and take our first question for today.

00:00:37.330 --> 00:00:41.200
From, uh, Zoliotsko, in Sophia, Bulgaria.

00:00:41.200 --> 00:00:45.980
"What's the best approach for an app with
a lot of webâ€”" [chokes] Excuse me.

00:00:45.980 --> 00:00:47.550
"Web API calls.

00:00:47.550 --> 00:00:53.640
Now I'm using a service + 1 AsyncTask for
all API calls and ugly interfaces to talk

00:00:53.640 --> 00:00:54.640
to UI.

00:00:54.640 --> 00:01:01.360
Should I use separate AsyncTask for every
API call and how to communicate to the UI

00:01:01.360 --> 00:01:02.590
properly?

00:01:02.590 --> 00:01:03.830
Thanks."

00:01:03.830 --> 00:01:06.290
&gt;&gt;Trevor: Alright.

00:01:06.290 --> 00:01:12.409
So, it's a service and a AsyncTask for the
API calls and they wanna know if it's OK to

00:01:12.409 --> 00:01:15.859
use separate AsyncTask for every API call.

00:01:15.859 --> 00:01:20.619
I think that's probably OK depending on the
nature of your API.

00:01:20.619 --> 00:01:27.240
So, the thing to watch out for with AsyncTask
is if your application ends for some reason.

00:01:27.240 --> 00:01:30.539
Say you rotate your screen and it relaunches.

00:01:30.539 --> 00:01:32.139
The system's going to restart your app.

00:01:32.139 --> 00:01:35.710
Those AsyncTasks are never going to complete
as far as your UI are concerned.

00:01:35.710 --> 00:01:37.729
And I think they'll still, will they still
run in the background?

00:01:37.729 --> 00:01:39.130
I can't remember.

00:01:39.130 --> 00:01:40.670
It's iffy.

00:01:40.670 --> 00:01:42.170
I wouldn't rely on that behavior.

00:01:42.170 --> 00:01:44.189
They may, they may not.

00:01:44.189 --> 00:01:48.490
It, so if you're just like, fetching some
information, that's fine.

00:01:48.490 --> 00:01:52.639
If you're making something that's a, a destructive
change, right?

00:01:52.639 --> 00:01:55.260
You're editing something, you're posting new
data, that's when you need to be a little

00:01:55.260 --> 00:01:59.999
bit more careful and make sure that your AsyncTask
actually can run to completion.

00:01:59.999 --> 00:02:02.859
Or at the very least to make sure that it's
nothing that's so important that the world

00:02:02.859 --> 00:02:03.979
will end if your app does restart.

00:02:03.979 --> 00:02:09.099
So you know, if you're making a blog post,
right and the user posts it, you need to make

00:02:09.099 --> 00:02:11.440
sure it runs to, it actually appears.

00:02:11.440 --> 00:02:15.010
If you make it so that when your app restarts,
you know you check to see if that's posted,

00:02:15.010 --> 00:02:16.210
you're probably fine.

00:02:16.210 --> 00:02:21.700
Now that said, there are some benefits to
using a service as a background process.

00:02:21.700 --> 00:02:25.130
And that is that you can actually, you have
a lot more control over things like fetching

00:02:25.130 --> 00:02:26.140
new data.

00:02:26.140 --> 00:02:29.500
So the advice we usually give people when
they're using web services inside of their

00:02:29.500 --> 00:02:35.770
Android app is to make sure that you're pulling
your data in before the user asks for it.

00:02:35.770 --> 00:02:40.190
So when the user's actually in the UI, they
get a nice, fast, responsive experience.

00:02:40.190 --> 00:02:44.800
On top of that, users don't always have an
internet connection or it might be a bit flaky.

00:02:44.800 --> 00:02:49.150
So if you're on a plane, or commuting to work,
you might be passing through some tunnels.

00:02:49.150 --> 00:02:52.650
Or again, a plane's a perfect example.

00:02:52.650 --> 00:02:56.990
The user probably still wants people to read
their information, you know, it'll say you're

00:02:56.990 --> 00:03:00.300
a feed reader, like the user still wants access
to the RSS Feeds.

00:03:00.300 --> 00:03:02.970
If you have a background service you can go
ahead and make sure all this is cached and

00:03:02.970 --> 00:03:04.820
available inside of a content provider.

00:03:04.820 --> 00:03:08.530
If you're just doing an AsyncTask to go live,
all that's gonna fail.

00:03:08.530 --> 00:03:11.460
So I think that's really the big benefit to
use a service.

00:03:11.460 --> 00:03:17.150
And for that reason, yeah you probably can
make it work with an AsyncTask but our usual

00:03:17.150 --> 00:03:18.150
advice is, not to.

00:03:18.150 --> 00:03:21.790
Alex, did you have anything else you wanted
to add on to that?

00:03:21.790 --> 00:03:27.310
&gt;&gt;Alex: Well, sure, I'd just really quickly
like to address the part of the question where

00:03:27.310 --> 00:03:33.570
he says, "Is one AsyncTask for all calls OK
or should I use you know, what, uh, spin-up

00:03:33.570 --> 00:03:35.530
a new AsyncTask per call?"

00:03:35.530 --> 00:03:41.130
And I think if you're in a situation where
you have a lot of calls happening.

00:03:41.130 --> 00:03:46.330
Like let's say the app you're writing is,
like, the front end for a web service.

00:03:46.330 --> 00:03:48.410
Or if you're doing some sort of batch thing.

00:03:48.410 --> 00:03:51.910
Like downloading a thousand files from the
internet.

00:03:51.910 --> 00:03:59.730
If you don't go the service route, the better
option is really to just create a full blown

00:03:59.730 --> 00:04:00.960
background thread.

00:04:00.960 --> 00:04:05.810
So AsyncTasks are really designed for, they're
really optimized for very quick tasks.

00:04:05.810 --> 00:04:08.760
Like maybe pulling weather information off
the internet.

00:04:08.760 --> 00:04:12.290
Or writing something to a file or writing
something to a database.

00:04:12.290 --> 00:04:16.280
If you're doing something that's gonna take
a significant amount of time, or if you have

00:04:16.280 --> 00:04:20.630
a whole bunch of different tasks that you're
queuing up like that, the best option is really

00:04:20.630 --> 00:04:23.432
to have a background thread that just sort
of sleeps and waits for new commands.

00:04:23.432 --> 00:04:30.350
And then you can just send those, you know,
send a request for a file or something like

00:04:30.350 --> 00:04:31.940
that to the background thread.

00:04:31.940 --> 00:04:36.000
The other part of the question I noticed was
about the quote unquote ugly interfaces for

00:04:36.000 --> 00:04:37.340
the UI.

00:04:37.340 --> 00:04:43.040
There's a facility called a handler that lets
you sort of ship data back and forth.

00:04:43.040 --> 00:04:45.330
And like commands back and forth.

00:04:45.330 --> 00:04:47.410
Between the UI thread and background threads.

00:04:47.410 --> 00:04:49.640
So I would look into using that.

00:04:49.640 --> 00:04:54.090
I, without more information of what you're
doing currently I can't really say whether

00:04:54.090 --> 00:04:59.590
those are the right, whether your current
approach is the right or wrong way.

00:04:59.590 --> 00:05:02.430
But definitely look into handlers.

00:05:02.430 --> 00:05:03.560
&gt;&gt;Joe: OK.

00:05:03.560 --> 00:05:05.270
Any other comments?

00:05:05.270 --> 00:05:06.270
Great.

00:05:06.270 --> 00:05:07.270
Thank you very much, gentlemen.

00:05:07.270 --> 00:05:08.950
&gt;&gt;Alex: We've got two questions from the Hangout.

00:05:08.950 --> 00:05:09.950
&gt;&gt;Joe: OK.

00:05:09.950 --> 00:05:12.060
Let's have the first one.

00:05:12.060 --> 00:05:13.919
[pause]

00:05:13.919 --> 00:05:18.020
Uh, not getting sound.

00:05:18.020 --> 00:05:19.600
[pause]

00:05:19.600 --> 00:05:21.180
No.

00:05:21.180 --> 00:05:23.960
Are we in the mute?

00:05:23.960 --> 00:05:30.340
&gt;&gt;Trevor: Hit the volume up button on the
computer Robert, let's see if we can get some

00:05:30.340 --> 00:05:31.340
audio out here.

00:05:31.340 --> 00:05:32.340
[volume up clicks]

00:05:32.340 --> 00:05:33.340
Oh, we don't.

00:05:33.340 --> 00:05:34.340
&gt;&gt;Joe: No.

00:05:34.340 --> 00:05:35.340
&gt;&gt;Trevor: Um.

00:05:35.340 --> 00:05:36.340
[volume up button clicks]

00:05:36.340 --> 00:05:37.340
&gt;&gt;Joe: Hold on just a second.

00:05:37.340 --> 00:05:38.340
&gt;&gt;Trevor: Yeah, um, let's go back to Moderator.

00:05:38.340 --> 00:05:39.340
&gt;&gt;Joe: OK.

00:05:39.340 --> 00:05:40.340
Fine.

00:05:40.340 --> 00:05:41.340
&gt;&gt;Trevor: I'm gonna go and step over and debug
the stuff on the soundboard.

00:05:41.340 --> 00:05:42.340
&gt;&gt;Joe: OK.

00:05:42.340 --> 00:05:43.340
Bear with us.

00:05:43.340 --> 00:05:44.340
&gt;&gt;Trevor: yeah.

00:05:44.340 --> 00:05:45.340
&gt;&gt;Joe: And we'll come back to you.

00:05:45.340 --> 00:05:46.340
&gt;&gt;Trevor: Do you wanna mute my mic here for
a second, Robert?

00:05:46.340 --> 00:05:47.340
So that we don't deafen people.

00:05:47.340 --> 00:05:48.340
[chuckles]

00:05:48.340 --> 00:05:49.340
&gt;&gt;Joe: OK.

00:05:49.340 --> 00:05:52.460
We're gonna go back to the moderator for just
a second while we take a look at some technical

00:05:52.460 --> 00:05:53.460
issues here.

00:05:53.460 --> 00:05:54.460
[someone coughs]

00:05:54.460 --> 00:05:57.260
Um, and ask this question from Akhil in Ashburn,
Virginia.

00:05:57.260 --> 00:06:00.880
"I'm a beginner to Android application development.

00:06:00.880 --> 00:06:03.990
Do you recommend reading the API Guides straight
through?

00:06:03.990 --> 00:06:05.220
That's what I've been doing.

00:06:05.220 --> 00:06:07.710
The Android training doesn't really feel in
depth."

00:06:07.710 --> 00:06:10.330
&gt;&gt;Alex: Right.

00:06:10.330 --> 00:06:11.639
Uh.

00:06:11.639 --> 00:06:16.560
I guess since Trevor isn't in front of the
camera at the moment I'll be taking this one.

00:06:16.560 --> 00:06:20.710
Yeah, reading the API Guides is actually are
really good way to become familiar with Android

00:06:20.710 --> 00:06:21.710
development.

00:06:21.710 --> 00:06:26.400
I should say that they are, the API Guides
and Android training serve two separate purposes.

00:06:26.400 --> 00:06:30.680
The API Guides are more designed for a particular
topic to give you an overview of the API and

00:06:30.680 --> 00:06:35.389
all the little features and method calls and
the important elements of it.

00:06:35.389 --> 00:06:37.910
The Android training classes are more task
oriented.

00:06:37.910 --> 00:06:43.470
In terms of, you know, I wanna sync with a
web service or I wanna efficiently load bitmaps.

00:06:43.470 --> 00:06:45.550
Or like, they're very like task based.

00:06:45.550 --> 00:06:47.340
Like I wanna accomplish this.

00:06:47.340 --> 00:06:49.980
And then a step by step lesson.

00:06:49.980 --> 00:06:54.169
Like a series of step by step lessons within
a particular topic.

00:06:54.169 --> 00:06:59.790
Of how to go, the uh, the steps that you go
through in order to accomplish that.

00:06:59.790 --> 00:07:01.510
And your relevant API calls.

00:07:01.510 --> 00:07:04.250
We also provide code snippets and sample code.

00:07:04.250 --> 00:07:07.240
Yeah, the API Guides are really good reading.

00:07:07.240 --> 00:07:13.690
I would recommend instead of just reading,
which doesn't do a lot for retention of the

00:07:13.690 --> 00:07:16.660
topic, especially programming, your best option
is actuallyâ€”

00:07:16.660 --> 00:07:17.660
&gt;&gt;Trevor: Sorry, Alex.

00:07:17.660 --> 00:07:18.660
[chuckles]

00:07:18.660 --> 00:07:19.660
&gt;&gt;Alex: No worries.

00:07:19.660 --> 00:07:22.449
Uh, your best option is actually to have an
idea.

00:07:22.449 --> 00:07:25.729
Like a small sample, not necessarily a small
sample project.

00:07:25.729 --> 00:07:26.729
But a small exercise.

00:07:26.729 --> 00:07:32.800
Like if you're learning how to do networking
code, learn how to pull it in off the internet

00:07:32.800 --> 00:07:35.949
or something, and write a small sample app
that does that.

00:07:35.949 --> 00:07:40.690
Joe also, we were discussing this beforehand,
and he also brought up the great point that

00:07:40.690 --> 00:07:44.630
it's good to have an overarching project in
mind when learning new language.

00:07:44.630 --> 00:07:45.630
Or a new platform.

00:07:45.630 --> 00:07:50.290
And that will really, that way you can get
a bunch of topics and sort of learn them simultaneously

00:07:50.290 --> 00:07:51.970
as you're incorporating these features.

00:07:51.970 --> 00:07:53.580
And getting into your project.

00:07:53.580 --> 00:07:55.850
&gt;&gt;Joe: Wanna add anything, Trevor?

00:07:55.850 --> 00:08:00.320
&gt;&gt;Trevor: I, um, I didn't catch the question
'cause I was busy fixing the sound&gt;&gt;Joe: Oh,

00:08:00.320 --> 00:08:03.050
uh, Android beginner to Android application
development.

00:08:03.050 --> 00:08:06.380
Do you recommend reading the API guide straight
through?

00:08:06.380 --> 00:08:07.690
&gt;&gt;Trevor: OK.

00:08:07.690 --> 00:08:08.690
Um.

00:08:08.690 --> 00:08:12.580
No, it's really, I think it's mostly a question
of how do you learn, or how do you like your

00:08:12.580 --> 00:08:13.580
content delivered.

00:08:13.580 --> 00:08:18.160
Um, I know some people like, you know, they
do like reading through the documentation.

00:08:18.160 --> 00:08:25.520
And the format we provide is probably a bit
more fast paced than what you'll find in a

00:08:25.520 --> 00:08:27.440
longer book that's more geared towards beginners.

00:08:27.440 --> 00:08:28.440
Right?

00:08:28.440 --> 00:08:30.810
We assume that you have a background in the
Java language.

00:08:30.810 --> 00:08:37.180
We assume that you're familiar with most of
the concepts involved in GUI Programming,

00:08:37.180 --> 00:08:38.969
and we do rush through things a bit.

00:08:38.969 --> 00:08:43.940
Because we assume that the audience has, has
a good, a solid background in this stuff.

00:08:43.940 --> 00:08:47.720
And you know, most people, I'd say when they're,
especially if they're getting started, or

00:08:47.720 --> 00:08:51.930
if they're coming from a different environment,
might not be familiar with all of that.

00:08:51.930 --> 00:08:55.320
And the documentation's all out there, but
you know, you have to go and take a look at

00:08:55.320 --> 00:08:56.320
our site.

00:08:56.320 --> 00:08:59.670
You might have to look through the Java tutorials
for some of the language stuff.

00:08:59.670 --> 00:09:03.440
And with those cases I think you might find
a book to be better.

00:09:03.440 --> 00:09:09.110
Uh, we like to, I, I'm a fan of Reto's book,
but there's a lot of good ones out there.

00:09:09.110 --> 00:09:10.610
And some people also like video tutorial.

00:09:10.610 --> 00:09:12.620
And there's a lot of those out there as well,
too.

00:09:12.620 --> 00:09:17.190
So, it's really just a matter of, how do you
like your information delivered.

00:09:17.190 --> 00:09:22.050
I do think that the, well, the API guide especially
is probably not the best way to go, but the

00:09:22.050 --> 00:09:27.110
Android training and the tutorials and the
developer guide, all great places to start.

00:09:27.110 --> 00:09:29.560
I think they do cover everything you need
to know.

00:09:29.560 --> 00:09:32.160
But, you know again, it's a different pace.

00:09:32.160 --> 00:09:33.160
&gt;&gt;Joe: Um.

00:09:33.160 --> 00:09:34.160
Yeah.

00:09:34.160 --> 00:09:40.050
I would uh, I'm a technical writer on Android
and so I feel like I understand something

00:09:40.050 --> 00:09:43.149
about all of the different stuff we've written
about.

00:09:43.149 --> 00:09:50.529
I would say that the API guides were not designed
to be read straight through in order or you

00:09:50.529 --> 00:09:54.970
know, you don't need to read all of them in
order to understand how to develop an Android.

00:09:54.970 --> 00:09:59.160
I can understand that you might feel that
Android training isn't, doesn't feel like

00:09:59.160 --> 00:10:04.950
it's in depth but it'll give you an idea of
some of the tools that you can use to write

00:10:04.950 --> 00:10:06.630
Android applications.

00:10:06.630 --> 00:10:09.630
As in AsyncTasks and other things like that.

00:10:09.630 --> 00:10:15.250
And also the types of problems that you might
run into when you're writing an Android application.

00:10:15.250 --> 00:10:16.649
So if you just review them.

00:10:16.649 --> 00:10:21.339
And even if you just skim through them you
can get started on a project and then if you

00:10:21.339 --> 00:10:25.990
need more help on a particular topic, you
can look at the API guide for that topic.

00:10:25.990 --> 00:10:26.990
&gt;&gt;Trevor: Right.

00:10:26.990 --> 00:10:31.420
And then, you know, you, um, just to give
you an idea of how I got started with Android.

00:10:31.420 --> 00:10:36.230
I read through the first, you know, the first
five pages, I think, under the introduction

00:10:36.230 --> 00:10:38.330
material at lifecycles of an application.

00:10:38.330 --> 00:10:39.511
What does an activity look like?

00:10:39.511 --> 00:10:41.740
How do you do a UI?

00:10:41.740 --> 00:10:46.510
All the really basic stuff is clustered right
there at the beginning of the developers guide.

00:10:46.510 --> 00:10:50.740
And then from there you can go and read the
individual sections as you come across problems

00:10:50.740 --> 00:10:51.740
you'd like to solve.

00:10:51.740 --> 00:10:52.740
Yeah.

00:10:52.740 --> 00:10:53.740
I do agree with Joe.

00:10:53.740 --> 00:10:55.500
Reading the everything on there is a pretty
daunting task.

00:10:55.500 --> 00:10:57.700
And it's not structured to really be read
that way.

00:10:57.700 --> 00:10:59.850
Um, I mean, you certainly could.

00:10:59.850 --> 00:11:01.990
But that's gonna take you quite a while.

00:11:01.990 --> 00:11:03.740
&gt;&gt;Joe: Right.

00:11:03.740 --> 00:11:04.740
OK.

00:11:04.740 --> 00:11:08.080
Since we have somebody in the hangout waiting
to ask a question let's go to him now.

00:11:08.080 --> 00:11:09.080
&gt;&gt;Male #1: OK.

00:11:09.080 --> 00:11:10.260
Can you hear me now?

00:11:10.260 --> 00:11:11.260
&gt;&gt;Trevor: Yes!

00:11:11.260 --> 00:11:12.260
Yes we can.

00:11:12.260 --> 00:11:13.480
&gt;&gt;Joe: I can, we can year you now.

00:11:13.480 --> 00:11:17.240
&gt;&gt;Trevor: And Robert, did you unmute the hangout
computer on the sound board?

00:11:17.240 --> 00:11:18.440
Going out live.

00:11:18.440 --> 00:11:19.440
There you go.

00:11:19.440 --> 00:11:20.440
Now people on YouTube can hear you.

00:11:20.440 --> 00:11:21.440
&gt;&gt;Male #1: OK, so I actually have two questions.

00:11:21.440 --> 00:11:23.899
The first one's fairly simple.

00:11:23.899 --> 00:11:32.550
Um, at Google IO, one of my coworkers asked
about, um, using web APIs to sync shared preferences

00:11:32.550 --> 00:11:36.160
and we were told that if we just waited a
few weeks there would be a product released

00:11:36.160 --> 00:11:37.980
that would allow us to do that.

00:11:37.980 --> 00:11:41.860
Is there any update on what that is?

00:11:41.860 --> 00:11:44.529
&gt;&gt;Trevor: I'm not actually sure what that
would be.

00:11:44.529 --> 00:11:45.959
&gt;&gt;Male #1: OK, 'causeâ€”

00:11:45.959 --> 00:11:46.959
&gt;&gt;Trevor: Um.

00:11:46.959 --> 00:11:49.730
Alex, Joe do either of you know what that's
in reference to?

00:11:49.730 --> 00:11:50.740
&gt;&gt;Joe: No.

00:11:50.740 --> 00:11:56.339
&gt;&gt;Male #1: And the two gentlemen who gave
the talk at Google IO, I'm afraid I don't

00:11:56.339 --> 00:11:57.339
remember their names.

00:11:57.339 --> 00:12:01.750
But they specifically told us that there was
something coming out specifically to sync

00:12:01.750 --> 00:12:04.850
shared preferences using, um, web APIs.

00:12:04.850 --> 00:12:09.640
&gt;&gt;Alex: Do you remember the name of the talk,
by any chance?

00:12:09.640 --> 00:12:14.790
&gt;&gt;Male #1: Yeah, it is, uh, Building Android
Applications that Use Web APIs.

00:12:14.790 --> 00:12:15.790
&gt;&gt;Trevor: [laughs]

00:12:15.790 --> 00:12:16.790
&gt;&gt;Alex: OK.

00:12:16.790 --> 00:12:17.790
That would make sense.

00:12:17.790 --> 00:12:18.790
Yeah.

00:12:18.790 --> 00:12:19.790
Uh.

00:12:19.790 --> 00:12:24.240
I don't know what topic they're referring
to off the top of my head but I can, we can

00:12:24.240 --> 00:12:30.140
track down the guys who gave the talk and
askâ€”

00:12:30.140 --> 00:12:31.240
&gt;&gt;Male #1: Yeah, uh, it's, Yaniv Inbar?

00:12:31.240 --> 00:12:32.240
&gt;&gt;Trevor: OK.

00:12:32.240 --> 00:12:33.240
Yeah.

00:12:33.240 --> 00:12:34.240
I know him.

00:12:34.240 --> 00:12:36.209
Yeah, he actually is in charge of a lot of
stuff related to our overall API strategy

00:12:36.209 --> 00:12:37.209
at Google.

00:12:37.209 --> 00:12:38.209
So.

00:12:38.209 --> 00:12:39.209
&gt;&gt;Male #1: OK.

00:12:39.209 --> 00:12:41.860
&gt;&gt;Trevor: It doesn't surprise me that we don't
know about it 'cause he is not part of the

00:12:41.860 --> 00:12:42.860
Android team.

00:12:42.860 --> 00:12:45.899
He's part of the broader API team, again at,
for all of Google.

00:12:45.899 --> 00:12:49.600
So, it doesn't surprise me that there's something
going on we haven't heard about it yet.

00:12:49.600 --> 00:12:53.380
We'll get some more info from you and we'll
pass it along.

00:12:53.380 --> 00:12:57.060
Um, we're gonna go and try and recap all the
questions we can't answer at the beginning

00:12:57.060 --> 00:12:59.200
of the show the following week.

00:12:59.200 --> 00:13:03.400
So if you can tune in just at the start of
the show next week we'll get that answer for

00:13:03.400 --> 00:13:04.400
you.

00:13:04.400 --> 00:13:05.400
&gt;&gt;Male #1: OK.

00:13:05.400 --> 00:13:08.010
&gt;&gt;Trevor: And if you can post a, actually,
probably this isn't the best question for

00:13:08.010 --> 00:13:09.220
StackOverflow sinceâ€”

00:13:09.220 --> 00:13:10.220
&gt;&gt;Joe: Yeah.

00:13:10.220 --> 00:13:11.220
&gt;&gt;Trevor: Yeah.

00:13:11.220 --> 00:13:12.220
So tune in next week.

00:13:12.220 --> 00:13:13.220
We'll get you an answer and have some more
info.

00:13:13.220 --> 00:13:14.220
&gt;&gt;Joe: OK.

00:13:14.220 --> 00:13:15.220
&gt;&gt;Trevor: And you had another question?

00:13:15.220 --> 00:13:16.220
&gt;&gt;Male #1: Yeah.

00:13:16.220 --> 00:13:21.630
The second question is involving fragment
transactions with compatibility library.

00:13:21.630 --> 00:13:28.450
Um, I have basically a linear layout that
contains multiple fragments.

00:13:28.450 --> 00:13:35.130
And what I wanna be able to do is replace
one of them with another fragment.

00:13:35.130 --> 00:13:41.480
And because I don't know at the time of replacement
if the number is identical or not.

00:13:41.480 --> 00:13:46.270
So I just, I completely erase the row and
refill it with fragments.

00:13:46.270 --> 00:13:48.220
The removal process works great.

00:13:48.220 --> 00:13:51.890
The problem is, substiâ€”I remove all the
fragments, I commit that change.

00:13:51.890 --> 00:13:57.110
And then I try and add new fragments and nothing
happens.

00:13:57.110 --> 00:13:58.110
[pause]

00:13:58.110 --> 00:13:59.870
&gt;&gt;Alex: Hm.

00:13:59.870 --> 00:14:03.480
Do you commit the change with adding the fragments?

00:14:03.480 --> 00:14:04.630
&gt;&gt;Male #1: Yes.

00:14:04.630 --> 00:14:05.630
Yeah.

00:14:05.630 --> 00:14:11.060
It's within one function I iterate through
all the fragments that are stored in that

00:14:11.060 --> 00:14:12.060
layout.

00:14:12.060 --> 00:14:13.510
Calling remove on each one.

00:14:13.510 --> 00:14:15.170
I commit that.

00:14:15.170 --> 00:14:20.990
And then on all the fragments that I want
to add to that row, I do an add.

00:14:20.990 --> 00:14:25.010
And then commit that after the four loop.

00:14:25.010 --> 00:14:26.010
[pause]

00:14:26.010 --> 00:14:29.079
&gt;&gt;Alex: I don't know off the top of my head
why that wouldn't work.

00:14:29.079 --> 00:14:30.079
&gt;&gt;Male #1: Yeah.

00:14:30.079 --> 00:14:34.880
I'm very confused because I don't get any
LogCat messages.

00:14:34.880 --> 00:14:42.600
Um, you know, literally nothing other than
that I see the results of the removal but

00:14:42.600 --> 00:14:44.800
I don't get the results of the add.

00:14:44.800 --> 00:14:51.780
&gt;&gt;Alex: Uh, does it, does it work if you re-add
them in a separate way?

00:14:51.780 --> 00:14:56.930
Like if you do the removals and the adds of
the new fragments in the same transaction?

00:14:56.930 --> 00:14:58.500
&gt;&gt;Male #1: Uh, no I tried that.

00:14:58.500 --> 00:14:59.500
That didn't work.

00:14:59.500 --> 00:15:03.050
So I thought maybe I'm having some sort of
an issue with that.

00:15:03.050 --> 00:15:05.890
So I put them with two separate transactions.

00:15:05.890 --> 00:15:06.890
That doesn't work.

00:15:06.890 --> 00:15:09.730
Calling invalidate on the layout doesn't work.

00:15:09.730 --> 00:15:16.160
Um, I have this question posted on StackOverflow
but it, I haven't really gotten any hits on

00:15:16.160 --> 00:15:17.160
it.

00:15:17.160 --> 00:15:18.579
&gt;&gt;Trevor: I think we probably need to see
your code for this.

00:15:18.579 --> 00:15:19.579
Soâ€”

00:15:19.579 --> 00:15:20.579
&gt;&gt;Male #1: [inaudible]

00:15:20.579 --> 00:15:23.800
&gt;&gt;Trevor: So if you could take a look at your
StackOverflow question, and post it in the

00:15:23.800 --> 00:15:30.089
comment thread on Google + for this live stream
right now, we'll go through after the show,

00:15:30.089 --> 00:15:32.200
find your question and take a look through
your code.

00:15:32.200 --> 00:15:34.779
Yeah, 'cause it sounds like what you're doing
should work.

00:15:34.779 --> 00:15:36.620
It's probably something really subtle.

00:15:36.620 --> 00:15:40.050
And so if you post some code we can try and
sort that out for you.

00:15:40.050 --> 00:15:41.050
Just make sure.

00:15:41.050 --> 00:15:44.670
Usually I don't ask people to do this with
the link, sometimes winds up in the wrong

00:15:44.670 --> 00:15:45.670
place.

00:15:45.670 --> 00:15:48.160
So again, make sure you find the stream right
now on Google +.

00:15:48.160 --> 00:15:50.300
Post a link to your StackOverflow question
there an we'll find that.

00:15:50.300 --> 00:15:51.300
&gt;&gt;Male #1: Right.

00:15:51.300 --> 00:15:52.339
This is the event page, right?

00:15:52.339 --> 00:15:53.380
&gt;&gt;Trevor: Yes.

00:15:53.380 --> 00:15:54.410
&gt;&gt;Alex: Yeah.

00:15:54.410 --> 00:15:55.960
&gt;&gt;Male #1: OK.

00:15:55.960 --> 00:15:56.990
&gt;&gt;Joe: OK?

00:15:56.990 --> 00:15:59.060
Sorry we couldn't be more help.

00:15:59.060 --> 00:16:01.300
We have somebody else on hangout.

00:16:01.300 --> 00:16:02.740
So go ahead.

00:16:02.740 --> 00:16:03.740
[pause]

00:16:03.740 --> 00:16:04.740
&gt;&gt;Robert: Nobody.

00:16:04.740 --> 00:16:05.740
&gt;&gt;Joe: Nobody.

00:16:05.740 --> 00:16:06.740
&gt;&gt;Trevor: Silence.

00:16:06.740 --> 00:16:07.740
&gt;&gt;Joe: OK.

00:16:07.740 --> 00:16:08.740
Silence.

00:16:08.740 --> 00:16:10.910
Might have gotten bored and left us.

00:16:10.910 --> 00:16:14.220
But we encourage you to come back if you still
have a question.

00:16:14.220 --> 00:16:18.210
And we encourage everybody else out there
that if you wanna ask a question, it's perfectly

00:16:18.210 --> 00:16:23.230
OK to write in or join the hangout and ask
a question.

00:16:23.230 --> 00:16:27.300
I think that we've got a limit of like ten
people on the hangouts.

00:16:27.300 --> 00:16:32.280
Which is why we don't encourage everybody
to just jump in, but um, to the extâ€”

00:16:32.280 --> 00:16:34.470
&gt;&gt;Trevor: Jump in if you have a question.

00:16:34.470 --> 00:16:36.180
&gt;&gt;Joe: Jump in if you have a question.

00:16:36.180 --> 00:16:40.339
Don't just jump in, and we'll answer it.

00:16:40.339 --> 00:16:41.339
OK.

00:16:41.339 --> 00:16:42.350
Next from Moderator.

00:16:42.350 --> 00:16:47.370
"What are your best practices on writing a
web API that'll be interacting with Android.

00:16:47.370 --> 00:16:52.360
Are there particular data structures in JSON,
URI construction, or API-side behaviors that'll

00:16:52.360 --> 00:16:54.830
make the Android interactions more seamless?"

00:16:54.830 --> 00:16:59.440
And that's from Hussain in the Colorado GDG,
Colorado.

00:16:59.440 --> 00:17:00.440
&gt;&gt;Trevor: Right.

00:17:00.440 --> 00:17:05.589
Um, I can't say there's really anything that
makes working on Android any easier.

00:17:05.589 --> 00:17:11.420
I mean, most web APIs have been, the underlying
method of writing them has been designed to

00:17:11.420 --> 00:17:15.089
work, um, in a way that works on any language.

00:17:15.089 --> 00:17:16.089
Right?

00:17:16.089 --> 00:17:23.780
So you have, I'd say most people tend to have
standardized on the restful design pattern.

00:17:23.780 --> 00:17:30.070
So, um, basically if you're not familiar with
that, the idea is you have a collection of

00:17:30.070 --> 00:17:33.470
nouns which represent whatever object you're
interacting with.

00:17:33.470 --> 00:17:37.160
A person record, an event record, whatever
it is.

00:17:37.160 --> 00:17:40.390
And then you use the normal http verbs.

00:17:40.390 --> 00:17:45.301
Get, put, post, delete, um, patch, things
like that.

00:17:45.301 --> 00:17:48.120
To go and make modifications to the data.

00:17:48.120 --> 00:17:54.040
When you access those URLs, most people will
either use xml or JSON.

00:17:54.040 --> 00:17:58.360
I think either of them is equally easy to
work with.

00:17:58.360 --> 00:18:05.490
If you're using xml, just make sure that you're
using a SAX style xml parser rather than something

00:18:05.490 --> 00:18:06.490
based on DOM.

00:18:06.490 --> 00:18:08.740
Because mobile devices have limited memory.

00:18:08.740 --> 00:18:15.570
If you use JSON, I'd say Gson tends to be
one of the better JSON parsers available.

00:18:15.570 --> 00:18:20.260
But, you know, JSON's pretty lightweight so
feel free to use whatever works for you in

00:18:20.260 --> 00:18:21.260
that case.

00:18:21.260 --> 00:18:24.980
Though again, keep an eye out for memory constraints
if you have a very large tree of objects you're

00:18:24.980 --> 00:18:25.980
reading in.

00:18:25.980 --> 00:18:28.530
it might not make sense to load it all to
memory at the same time.

00:18:28.530 --> 00:18:30.690
Again, yeah, just depends on what you're working
with.

00:18:30.690 --> 00:18:34.530
Um, other than that, you know, it's really
what works best for your application.

00:18:34.530 --> 00:18:40.620
And I don't think, really, one pattern over
another is really gonna make more of a difference

00:18:40.620 --> 00:18:41.620
on the Android side.

00:18:41.620 --> 00:18:43.720
It's really just a matter of what's easier
to program with.

00:18:43.720 --> 00:18:44.960
&gt;&gt;Robert: [inaudible]

00:18:44.960 --> 00:18:47.419
&gt;&gt;Trevor: Alright, hey Matthew.

00:18:47.419 --> 00:18:49.890
&gt;&gt;Matthew: Yes, um, hello.

00:18:49.890 --> 00:18:51.120
&gt;&gt;Joe: Hi.

00:18:51.120 --> 00:18:54.210
&gt;&gt;Matthew: Hey, two questions actually.

00:18:54.210 --> 00:18:57.780
Uh, one, trying to look into the file system
on Android.

00:18:57.780 --> 00:19:01.980
And basically trying to, I downloaded Android
and Google Play can download to my device

00:19:01.980 --> 00:19:05.400
using like a DDMS or something to take it
off the device.

00:19:05.400 --> 00:19:06.400
It's in the mnt/asec folder.

00:19:06.400 --> 00:19:08.419
And it won't let me move the file.

00:19:08.419 --> 00:19:12.050
Is that the new app encryption that Google
Play is doing?

00:19:12.050 --> 00:19:13.050
&gt;&gt;Trevor: That's correct.

00:19:13.050 --> 00:19:14.130
&gt;&gt;Matthew: Rights specific encryption?

00:19:14.130 --> 00:19:15.130
&gt;&gt;Trevor: Mm-hm.

00:19:15.130 --> 00:19:16.130
Yes.

00:19:16.130 --> 00:19:17.130
&gt;&gt;Matthew: [inaudible] the thing off the device?

00:19:17.130 --> 00:19:18.130
OK.

00:19:18.130 --> 00:19:19.130
&gt;&gt;Trevor: Yeah.

00:19:19.130 --> 00:19:20.130
'Cause in the asec, that's all an encrypted
file system and not something that you'll

00:19:20.130 --> 00:19:21.130
be able to [inaudible]

00:19:21.130 --> 00:19:22.130
&gt;&gt;Matthew: Hmm.

00:19:22.130 --> 00:19:23.130
OK.

00:19:23.130 --> 00:19:24.130
Does it only work on certain devices?

00:19:24.130 --> 00:19:25.130
'Cause I can take it off my phone, which is
an old Gingerbread.

00:19:25.130 --> 00:19:27.230
I have no problem accessing that folder whatsoever.

00:19:27.230 --> 00:19:28.270
But in Jellybean you can't.

00:19:28.270 --> 00:19:31.670
&gt;&gt;Trevor: Yeah, I believe the encryption was
enabled on, I wanna say it was on Jellybean.

00:19:31.670 --> 00:19:33.300
And it's only for paid applications.

00:19:33.300 --> 00:19:34.300
&gt;&gt;Matthew: Hm.

00:19:34.300 --> 00:19:35.300
Mine's free.

00:19:35.300 --> 00:19:36.300
[chuckles]

00:19:36.300 --> 00:19:37.300
&gt;&gt;Trevor: Hm.

00:19:37.300 --> 00:19:38.300
I'm surprised it's encrypted then.

00:19:38.300 --> 00:19:39.300
Um.

00:19:39.300 --> 00:19:40.300
&gt;&gt;Matthew: So, yeah.

00:19:40.300 --> 00:19:41.300
[inaudible]

00:19:41.300 --> 00:19:42.300
&gt;&gt;Trevor: At least that was how I understand
it.

00:19:42.300 --> 00:19:43.300
I'm not mistaken am I?

00:19:43.300 --> 00:19:44.300
&gt;&gt;Joe: Um.

00:19:44.300 --> 00:19:46.960
&gt;&gt;Matthew: I heard a rumor about it being
on all applications but [inaudible]

00:19:46.960 --> 00:19:48.409
&gt;&gt;Trevor: It might be [inaudible] for the
app.

00:19:48.409 --> 00:19:50.230
My info might be a bit out of date.

00:19:50.230 --> 00:19:51.230
&gt;&gt;Matthew: [inaudible]

00:19:51.230 --> 00:19:52.400
&gt;&gt;Trevor: But it was definitely added in Jellybean.

00:19:52.400 --> 00:19:53.400
So.

00:19:53.400 --> 00:19:54.400
&gt;&gt;Matthew: Yes.

00:19:54.400 --> 00:19:55.400
&gt;&gt;Joe: Right.

00:19:55.400 --> 00:19:56.400
&gt;&gt;Matthew: OK.

00:19:56.400 --> 00:20:00.340
The other one is, any ideas in how to look
into a JavaLang verify error when running

00:20:00.340 --> 00:20:03.950
the app on your, on either an emulator or
on a device.

00:20:03.950 --> 00:20:08.610
When you ask Java to verify the class before
it goes to all the decks and everything, it's

00:20:08.610 --> 00:20:09.610
perfectly fine.

00:20:09.610 --> 00:20:13.401
&gt;&gt;Trevor: Is this, uh, what API level are
you targeting for this?

00:20:13.401 --> 00:20:16.040
&gt;&gt;Matthew: I've, this is like two point, I
think it's like two point two.

00:20:16.040 --> 00:20:17.059
&gt;&gt;Trevor: Right.

00:20:17.059 --> 00:20:23.570
'Cause I want, I know prior to Android two,
you would get a verify error if you used an

00:20:23.570 --> 00:20:27.559
API call that was not available on that API
level yet.

00:20:27.559 --> 00:20:28.720
On two point two thoughâ€”

00:20:28.720 --> 00:20:29.720
&gt;&gt;Matthew: OK.

00:20:29.720 --> 00:20:30.720
I can try that.

00:20:30.720 --> 00:20:31.720
&gt;&gt;Trevor: It shouldn't be an issue.

00:20:31.720 --> 00:20:32.720
&gt;&gt;Matthew: OK.

00:20:32.720 --> 00:20:34.270
I'm running it on a Jellybean device.

00:20:34.270 --> 00:20:35.270
&gt;&gt;Trevor: OK.

00:20:35.270 --> 00:20:36.850
&gt;&gt;Matthew: Um, and getting that error.

00:20:36.850 --> 00:20:40.250
I've tried different emulators and they all
gave me the JavaLang verifier.

00:20:40.250 --> 00:20:45.441
But I take you know the APK, decompile it,
take the dex, take it back to the dex to jar,

00:20:45.441 --> 00:20:46.441
look at the jar files.

00:20:46.441 --> 00:20:49.090
And Java says no problems at all with the
class files.

00:20:49.090 --> 00:20:50.090
So.

00:20:50.090 --> 00:20:51.090
&gt;&gt;Trevor: Interesting.

00:20:51.090 --> 00:20:52.090
&gt;&gt;Matthew: OK.

00:20:52.090 --> 00:20:53.090
I'll look at it some more.

00:20:53.090 --> 00:20:54.090
Thanks for your [inaudible]

00:20:54.090 --> 00:20:57.140
&gt;&gt;Trevor: Yeah, but the only thing I can wonder
is if you're getting a reference to a class

00:20:57.140 --> 00:20:58.490
that doesn't exist possibly.

00:20:58.490 --> 00:21:00.179
Though I think even that should still work
too.

00:21:00.179 --> 00:21:01.720
And like you said, you're on Jellybean.

00:21:01.720 --> 00:21:02.720
So.

00:21:02.720 --> 00:21:03.720
&gt;&gt;Matthew: Yes.

00:21:03.720 --> 00:21:06.270
&gt;&gt;Trevor: It's probably not an issue with
the system APIs in that case.

00:21:06.270 --> 00:21:09.460
Possibly something inherent to the way your
application is structured.

00:21:09.460 --> 00:21:10.460
&gt;&gt;Matthew: OK.

00:21:10.460 --> 00:21:11.460
I'll look into that.

00:21:11.460 --> 00:21:12.560
&gt;&gt;Joe: OK.

00:21:12.560 --> 00:21:13.560
Thanks.

00:21:13.560 --> 00:21:14.560
&gt;&gt;Trevor: OK?

00:21:14.560 --> 00:21:15.960
&gt;&gt;Joe: Thank you.

00:21:15.960 --> 00:21:16.960
Anybody else?

00:21:16.960 --> 00:21:17.960
No?

00:21:17.960 --> 00:21:18.960
OK.

00:21:18.960 --> 00:21:19.960
Back to Moderator.

00:21:19.960 --> 00:21:21.640
Next question is from Julian Brost.

00:21:21.640 --> 00:21:25.070
"Is it possible to enhance Google Now as an
app developer?

00:21:25.070 --> 00:21:28.080
That is, provide more data or custom cards?"

00:21:28.080 --> 00:21:30.929
&gt;&gt;Trevor: Not at this time.

00:21:30.929 --> 00:21:31.929
So you can.

00:21:31.929 --> 00:21:36.780
To give you a little more information, Google
Now doesn't have an API, so there's no way

00:21:36.780 --> 00:21:37.780
to extend it.

00:21:37.780 --> 00:21:41.990
But one thing you can do, I don't recommend
people do this.

00:21:41.990 --> 00:21:46.950
But it is possible to go and override the,
the Google Now action.

00:21:46.950 --> 00:21:50.890
So when you hold down on the home button and
slide up from there, you see the little Google

00:21:50.890 --> 00:21:55.370
logo that pulls up Google Now, you can technically
replace that with your own app.

00:21:55.370 --> 00:21:58.750
If you wanna provide something that's say,
a replacement for Google Now.

00:21:58.750 --> 00:22:00.110
All of Google Now.

00:22:00.110 --> 00:22:03.130
Uh, but again, I don't really recommend that.

00:22:03.130 --> 00:22:07.370
'cause Google Now is pretty cool and, as a
user I don't think I'd want it replaced on

00:22:07.370 --> 00:22:08.370
my phone.

00:22:08.370 --> 00:22:09.370
But you know.

00:22:09.370 --> 00:22:10.970
That's right now, that's the only option available.

00:22:10.970 --> 00:22:12.450
&gt;&gt;Joe: OK.

00:22:12.450 --> 00:22:15.630
Thank you.

00:22:15.630 --> 00:22:18.890
Next question is from Ramon in Finland.

00:22:18.890 --> 00:22:23.650
"I'm planning to use a private key to hash
the payload send to the web API.

00:22:23.650 --> 00:22:29.840
I guess it's impossible to keep it 100 percent
secure since it's possible to get the apk

00:22:29.840 --> 00:22:30.930
and decompile it.

00:22:30.930 --> 00:22:35.910
Anyway, what are the best practices to keep
the key in my Android app safe?"

00:22:35.910 --> 00:22:38.600
&gt;&gt;Trevor: OK, that's a little bit tougher.

00:22:38.600 --> 00:22:44.240
Because yeah, like you mentioned, it's entirely
possible to decompile an apk.

00:22:44.240 --> 00:22:48.840
And if you have your private key stored in
there, somebody looking at the byte code will

00:22:48.840 --> 00:22:50.720
be able to find it and remove it.

00:22:50.720 --> 00:22:56.890
So, I'd say given that, your best option would
be to obfuscate that key somehow.

00:22:56.890 --> 00:23:01.490
So, just probably the easiest way would be
to go and remove the key if they're gonna

00:23:01.490 --> 00:23:05.910
try and do it, would be to, just run strings
on your, on your app.

00:23:05.910 --> 00:23:08.740
And see what strings are contained in there.

00:23:08.740 --> 00:23:20.049
So, probably a good alternative would be to
create some sort of, um, seed for your key.

00:23:20.049 --> 00:23:27.289
And use some cryptographic function to go
and convert that into a suitably sized uh,

00:23:27.289 --> 00:23:28.289
key.

00:23:28.289 --> 00:23:30.490
Hey Robert, could you mute the speakers?

00:23:30.490 --> 00:23:31.490
Sorry.

00:23:31.490 --> 00:23:32.809
[laughs] That's sort of distracting.

00:23:32.809 --> 00:23:37.480
So yeah, basically you know, the, it's the
same idea with a passphrase.

00:23:37.480 --> 00:23:42.620
When you log into a Wi-Fi network or something
like that, the passphrase provided is usually

00:23:42.620 --> 00:23:47.700
not long enough to actually become a suitable
cryptographic key.

00:23:47.700 --> 00:23:51.880
So, there's very [unintelligible] to actually
go and extend that in, some of the [unintelligible]

00:23:51.880 --> 00:23:56.240
12 or however many bytes you need for your
actual key material.

00:23:56.240 --> 00:24:01.590
Um, a good example of this oh, I'm trying
to remember the name of the algorithm.

00:24:01.590 --> 00:24:05.860
I don't think anybody here remembers off the
top of their heads.

00:24:05.860 --> 00:24:07.120
Do they?

00:24:07.120 --> 00:24:08.120
[pause]

00:24:08.120 --> 00:24:09.580
&gt;&gt;Joe: Give us a better hint.

00:24:09.580 --> 00:24:14.180
&gt;&gt;Trevor: yeah, will it's an algorithm that
converts a passphrase into a longer key.

00:24:14.180 --> 00:24:15.850
[pause]

00:24:15.850 --> 00:24:18.669
I think we're probably going to have to look
it up, I think.

00:24:18.669 --> 00:24:19.669
&gt;&gt;Joe: Yeah.

00:24:19.669 --> 00:24:23.470
&gt;&gt;Trevor: But anyway, um, if you take a look
out there, here are algorithms that basically

00:24:23.470 --> 00:24:27.750
will extend a passphrase into something larger.

00:24:27.750 --> 00:24:29.160
And that would be a good way to go.

00:24:29.160 --> 00:24:31.210
And hide your key.

00:24:31.210 --> 00:24:37.679
Alternatively, you know, if you, I guess,
actually you could even use something like

00:24:37.679 --> 00:24:42.210
MD5 or SHA1, just to generate a hash of your
key.

00:24:42.210 --> 00:24:45.179
And then basically that way when somebody
goes and looks at the strings, they're not

00:24:45.179 --> 00:24:48.559
seeing our verbatim key stored in there.

00:24:48.559 --> 00:24:53.000
Now I do want to caution there is some advice
out there that I want you not to follow.

00:24:53.000 --> 00:24:58.440
And, um, that is, don't use SecureRandom to
generate your key fill material.

00:24:58.440 --> 00:25:03.650
So, what I usually see people do in this case
is they'll go and create instances in SecureRandom,

00:25:03.650 --> 00:25:08.429
generate, feed their passphrase essentially
in as their random seed.

00:25:08.429 --> 00:25:12.440
And then generate however many bytes of random
data.

00:25:12.440 --> 00:25:15.710
Assuming that since they're always using the
same seed, they'll always get the same random

00:25:15.710 --> 00:25:17.020
data back out.

00:25:17.020 --> 00:25:21.429
And the actual answer is that is not guaranteed
to happen.

00:25:21.429 --> 00:25:24.480
And I've seen some aps break pretty badly
because of this assumption.

00:25:24.480 --> 00:25:28.670
So please, please, please do not use SecureRandom
to generate fill material.

00:25:28.670 --> 00:25:32.460
Um, anything else that's deterministic should
be fine.

00:25:32.460 --> 00:25:36.020
Alternative, or other things you could do.

00:25:36.020 --> 00:25:39.630
You could um, go and concatenate multiple
strings.

00:25:39.630 --> 00:25:43.440
You could basically provide, er, apply any
sort of transformation to your original string

00:25:43.440 --> 00:25:46.190
so that that way the original key can't be
read out.

00:25:46.190 --> 00:25:48.049
I'd say that's the best practice in this case.

00:25:48.049 --> 00:25:51.460
MD5, SHA1's probably a good bet.

00:25:51.460 --> 00:25:52.600
&gt;&gt;Joe: Yep.

00:25:52.600 --> 00:25:53.600
Mm.

00:25:53.600 --> 00:25:54.880
Any other comments?

00:25:54.880 --> 00:25:55.880
No?

00:25:55.880 --> 00:25:56.880
&gt;&gt;Alex: No.

00:25:56.880 --> 00:25:59.640
&gt;&gt;Joe: Alright, we'll move on to the next
question.

00:25:59.640 --> 00:26:03.610
This is from, um, Mr. HiddenAndroid in Croatia.

00:26:03.610 --> 00:26:09.549
"Is there a way to enable full development
access on stock devices?

00:26:09.549 --> 00:26:15.680
We now can allow installing debug, apk files,
enable USB debugging in Developer Options

00:26:15.680 --> 00:26:20.850
but we can't use really helpful hierarchy
viewer when testing on stock devices."

00:26:20.850 --> 00:26:22.630
And a sad face.

00:26:22.630 --> 00:26:25.780
&gt;&gt;Trevor: Alright, so I guess there's two
parts to the question here.

00:26:25.780 --> 00:26:31.770
The first question is, is it possible to go
and enable full development access?

00:26:31.770 --> 00:26:33.799
And to do that you need a custom ROM.

00:26:33.799 --> 00:26:36.740
So Android normally has three ways of building.

00:26:36.740 --> 00:26:41.559
The normal user build, which you'll find on
pretty much any retail phone you buy.

00:26:41.559 --> 00:26:44.640
And then there's also a user debug build,
and an eng build.

00:26:44.640 --> 00:26:49.090
Which enable increasing levels of access to
the system.

00:26:49.090 --> 00:26:51.419
At the cost of performance and security.

00:26:51.419 --> 00:26:53.530
We don't recommend most people use those builds.

00:26:53.530 --> 00:26:58.450
Again, there are secure, there are security
implications if you do so.

00:26:58.450 --> 00:27:02.179
But if you are making a phone and it's just
for development purposes.

00:27:02.179 --> 00:27:06.890
You can go to source.enter.com, check out
the source code there, make your own build.

00:27:06.890 --> 00:27:10.419
Assuming the drivers are available for your
device.

00:27:10.419 --> 00:27:12.820
Um, not all devices have drivers there.

00:27:12.820 --> 00:27:17.990
So you're gonna wanna check and see which
device you have and how well it's supported.

00:27:17.990 --> 00:27:21.809
But that said, it sounds like what you really
want is HeirarchyViewer.

00:27:21.809 --> 00:27:25.220
And if that's the case there's an even better
solution.

00:27:25.220 --> 00:27:27.669
And that is to download something called ViewServer.

00:27:27.669 --> 00:27:32.340
ViewServer is the code that is responsible
for export.

00:27:32.340 --> 00:27:37.000
That's, that generates the server that HeirarchyViewer
connects to.

00:27:37.000 --> 00:27:40.110
It's part of the system but you can also place
it into your app.

00:27:40.110 --> 00:27:42.840
And run that same application entirely in
user space.

00:27:42.840 --> 00:27:49.640
So, if you go to uh, Roman Guy's GitHub page,
or just search on Google for ViewServer, you'll

00:27:49.640 --> 00:27:52.020
find it is the first result I'm sure.

00:27:52.020 --> 00:27:55.690
And you can go ahead and just drop those files
right into your application.

00:27:55.690 --> 00:27:59.460
I think there's a few changes you make to
your manifest as well.

00:27:59.460 --> 00:28:04.640
And what you'll find is, when you try and
connect, as long as that code is part of your

00:28:04.640 --> 00:28:09.230
application, ViewServer will work, sorry,
HeirarchyViewer will work just fine.

00:28:09.230 --> 00:28:15.150
No special OS build required and that's our
recommended way of getting HeirarchyViewer

00:28:15.150 --> 00:28:16.919
to work on a real phone.

00:28:16.919 --> 00:28:20.090
Of course you can also run it on an emulator
and it will work just fine there.

00:28:20.090 --> 00:28:22.779
Because emulators, I believe, are they user
debug?

00:28:22.779 --> 00:28:23.779
&gt;&gt;Joe: Yes.

00:28:23.779 --> 00:28:25.740
&gt;&gt;Trevor: I think emulators are user debug
build.

00:28:25.740 --> 00:28:27.060
So that's the other alternative

00:28:27.060 --> 00:28:28.910
&gt;&gt;Joe: OK.

00:28:28.910 --> 00:28:30.760
Great answer.

00:28:30.760 --> 00:28:31.789
Thank you very much.

00:28:31.789 --> 00:28:37.419
Um, next question is: "This week's Android
Design in Action showed a spinner below a

00:28:37.419 --> 00:28:41.000
TextView with horizontally left-aligned text.

00:28:41.000 --> 00:28:43.400
Any recommendations on how to implement that?"

00:28:43.400 --> 00:28:44.750
And that's from Toby in German.

00:28:44.750 --> 00:28:45.750
&gt;&gt;Alex: Yeah.

00:28:45.750 --> 00:28:46.750
I'll grab this one.

00:28:46.750 --> 00:28:47.750
&gt;&gt;Joe: OK.

00:28:47.750 --> 00:28:52.730
&gt;&gt;Alex: Uh, so, I went ahead and looked at
the video that you linked to.

00:28:52.730 --> 00:28:57.560
And I think, from my understanding, it isn't
actually TextView hovering over a spinner.

00:28:57.560 --> 00:29:01.191
It's just a spinner with one of the rows selected
as its default.

00:29:01.191 --> 00:29:04.830
Or as the default value that it's showing.

00:29:04.830 --> 00:29:09.980
So that's why, I think the question that our
asker Toby was under the impression that it

00:29:09.980 --> 00:29:14.840
was sort of, a TextView hovering with a IRG
order like over the spinner.

00:29:14.840 --> 00:29:17.049
And like that's not what that is.

00:29:17.049 --> 00:29:19.120
There's just a spinner there.

00:29:19.120 --> 00:29:21.309
As far as how the text is left-aligned.

00:29:21.309 --> 00:29:22.309
That's easy.

00:29:22.309 --> 00:29:23.450
That's just an .xml attribute.

00:29:23.450 --> 00:29:28.549
Just set Android gravity to left and it'll
left-align the text.

00:29:28.549 --> 00:29:29.920
&gt;&gt;Joe: OK.

00:29:29.920 --> 00:29:30.920
Good.

00:29:30.920 --> 00:29:31.990
Great answer.

00:29:31.990 --> 00:29:33.250
Thank you very much.

00:29:33.250 --> 00:29:36.070
A question from Molo in Portland Oregon.

00:29:36.070 --> 00:29:41.320
"Can I restrict a startdrag object so that
the dragged object can only be dragged to

00:29:41.320 --> 00:29:42.450
a certain area?

00:29:42.450 --> 00:29:46.460
I have a listview that I want to drag a row
to another position.

00:29:46.460 --> 00:29:50.690
I'd like for the dragged row image to only
drag vertically, not horizontally."

00:29:50.690 --> 00:29:55.799
Um.

00:29:55.799 --> 00:29:57.250
Any answers from you guys?

00:29:57.250 --> 00:30:03.679
'Cause based on my sort of hazy memory of
how this works, I don't think there is.

00:30:03.679 --> 00:30:06.840
&gt;&gt;Trevor: Yeah, I can't recall a way to do
this either.

00:30:06.840 --> 00:30:09.510
&gt;&gt;Alex: I don't think there's a way.

00:30:09.510 --> 00:30:14.409
Even if there is, it's, speaking as a user,
I don't know that I would like that experience

00:30:14.409 --> 00:30:18.840
where the thing that I'm dragging is sort
of following my finger but sort of not.

00:30:18.840 --> 00:30:23.251
I think it's pretty intuitive that if you're
dragging a listview item around that you can

00:30:23.251 --> 00:30:27.590
only drag it to other areas in the list.

00:30:27.590 --> 00:30:29.400
So I would leave that as-is.

00:30:29.400 --> 00:30:30.400
&gt;&gt;Joe: Mm.

00:30:30.400 --> 00:30:37.100
I am, I kind of understand the question because
there's a gesture in like, MAC or windows

00:30:37.100 --> 00:30:44.690
where you say, hold down the shift key and
move the cursor or use a cursor arrow.

00:30:44.690 --> 00:30:48.710
And that restrains the movement to one access,
rather than moving it all over the screen.

00:30:48.710 --> 00:30:49.710
&gt;&gt;Trevor: Right.

00:30:49.710 --> 00:30:53.230
&gt;&gt;Joe: But I don't think that's as necessary
on an Android device.

00:30:53.230 --> 00:30:54.230
And there's--

00:30:54.230 --> 00:30:56.860
&gt;&gt;Alex: Right, that's usually for drawing
a line or something.

00:30:56.860 --> 00:30:57.860
&gt;&gt;Joe: Yeah.

00:30:57.860 --> 00:30:58.860
&gt;&gt;Alex: Just to draw a moving object.

00:30:58.860 --> 00:30:59.860
&gt;&gt;Joe: Right.

00:30:59.860 --> 00:31:00.860
&gt;&gt;Alex: To another location.

00:31:00.860 --> 00:31:05.660
&gt;&gt;Joe: So I just don't think that the current
API supports that.

00:31:05.660 --> 00:31:07.549
OK.

00:31:07.549 --> 00:31:08.990
Next , question.

00:31:08.990 --> 00:31:11.550
"Web UI."

00:31:11.550 --> 00:31:13.030
I'm sorry, from anon.

00:31:13.030 --> 00:31:14.309
However that is.

00:31:14.309 --> 00:31:20.150
"Web UI guests: Just after the end of the
talk you referred to a new functionality whichâ€”"

00:31:20.150 --> 00:31:21.640
Oh, we had that question already.

00:31:21.640 --> 00:31:22.640
&gt;&gt;Trevor: It was.

00:31:22.640 --> 00:31:23.640
That was our live question.

00:31:23.640 --> 00:31:24.640
&gt;&gt;Joe: Yes.

00:31:24.640 --> 00:31:25.640
OK.

00:31:25.640 --> 00:31:26.640
&gt;&gt;Trevor: That said, I think there's actually
one more thing we should probably mention

00:31:26.640 --> 00:31:27.640
on this topic.

00:31:27.640 --> 00:31:28.640
&gt;&gt;Joe: OK.

00:31:28.640 --> 00:31:29.720
&gt;&gt;Trevor: And that is the backup API.

00:31:29.720 --> 00:31:34.080
Now, the backup API is a service that's provided
as a part of Android.

00:31:34.080 --> 00:31:38.159
Where you can take you know, typically shared
preferences file.

00:31:38.159 --> 00:31:44.730
And ask to have it sent to, typically a server
on the cloud.

00:31:44.730 --> 00:31:48.679
And that'll get replicated across other devices
when the user restores their data.

00:31:48.679 --> 00:31:52.419
Now it's not the same as something that's
actually doing a full sync and merging in

00:31:52.419 --> 00:31:54.630
changes across lots of different devices.

00:31:54.630 --> 00:31:58.799
That's still a topic we need to follow up
with and even get some more info for you.

00:31:58.799 --> 00:32:03.890
But if you're just trying to go and persist
users data somewhere that'll survive you know,

00:32:03.890 --> 00:32:05.210
a phone replacement.

00:32:05.210 --> 00:32:10.440
Or the user basically just loading in all
their settings, the backup API's a pretty

00:32:10.440 --> 00:32:11.440
good option for that.

00:32:11.440 --> 00:32:13.340
Now it doesn't always get into the cloud.

00:32:13.340 --> 00:32:16.380
It's up to the device manufacturers to decide
where this data is saved.

00:32:16.380 --> 00:32:20.610
I've seen some devices will go and save to
the SD card rather than to the cloud.

00:32:20.610 --> 00:32:24.440
But I think most devices coming out now do
sync to the cloud.

00:32:24.440 --> 00:32:27.750
And again, that's a good option for certain
use cases.

00:32:27.750 --> 00:32:29.559
So just keep that in mind.

00:32:29.559 --> 00:32:30.559
&gt;&gt;Joe: Great.

00:32:30.559 --> 00:32:31.559
Thank you.

00:32:31.559 --> 00:32:32.890
&gt;&gt;Alex: Got another question in the Moderator.

00:32:32.890 --> 00:32:33.890
&gt;&gt;Joe: Go ahead.

00:32:33.890 --> 00:32:34.890
&gt;&gt;Alex: Give me a second.

00:32:34.890 --> 00:32:36.920
&gt;&gt;Trevor: You mean in Hangouts.

00:32:36.920 --> 00:32:37.920
&gt;&gt;Alex: Yes.

00:32:37.920 --> 00:32:39.100
&gt;&gt;Joe: That's Hangout.

00:32:39.100 --> 00:32:40.100
&gt;&gt;Alex: Hangouts.

00:32:40.100 --> 00:32:41.580
&gt;&gt;Joe: Here we go.

00:32:41.580 --> 00:32:42.820
&gt;&gt;Robert: Shoot.

00:32:42.820 --> 00:32:48.409
&gt;&gt;Male #2: yeah, later on the list, we utilized
some web APIs in our app that can containâ€”

00:32:48.409 --> 00:32:49.409
&gt;&gt;Joe: Yep.

00:32:49.409 --> 00:32:50.710
&gt;&gt;Male #2: Some very large JSON responses.

00:32:50.710 --> 00:32:53.870
And this can cause our app to run out of memory.

00:32:53.870 --> 00:32:57.940
It might be due to memory pressure from other
things going on the app.

00:32:57.940 --> 00:33:00.419
But how do you suggest handling such large
responses?

00:33:00.419 --> 00:33:01.419
&gt;&gt;Trevor: Ah.

00:33:01.419 --> 00:33:03.320
Excellent question.

00:33:03.320 --> 00:33:09.710
So, if you control the API, you could go and
page your responses so that way you only load

00:33:09.710 --> 00:33:14.711
up a few pieces of data at a time.

00:33:14.711 --> 00:33:19.060
It depends on the nature of your application
that might or might not make sense.

00:33:19.060 --> 00:33:24.620
The other, within that, this is sort of what
I mentioned earlier about DOM versus SAX in

00:33:24.620 --> 00:33:26.429
the context of xml.

00:33:26.429 --> 00:33:31.980
DOM you actually go and load the entire representation
of an xml tree into memory.

00:33:31.980 --> 00:33:33.890
Where SAX is a streaming parser.

00:33:33.890 --> 00:33:35.890
It will go and read through everything and
generate events.

00:33:35.890 --> 00:33:38.649
It will come across certain elements.

00:33:38.649 --> 00:33:42.350
But at no point do you have to go and load
the entire tree into memory.

00:33:42.350 --> 00:33:47.440
And so, if you're finding that you are encountering
similar problems in JSON.

00:33:47.440 --> 00:33:51.740
And JSON really is a lot, you know most JSON
parsers work a lot similarly to how a DOM

00:33:51.740 --> 00:33:54.899
based xml parser works.

00:33:54.899 --> 00:33:58.570
Just go and you know, I'm not familiar with
any streaming JSON parsers.

00:33:58.570 --> 00:34:00.110
There's gotta be one somewhere out there.

00:34:00.110 --> 00:34:03.020
I'm just not familiar with the, not sure what
it's called.

00:34:03.020 --> 00:34:05.880
But failing that, you could just write your
own that literally just scans through the

00:34:05.880 --> 00:34:06.880
xml.

00:34:06.880 --> 00:34:09.349
Oh sorry, through the JSON data.

00:34:09.349 --> 00:34:11.450
And emits events when it comes across certain
apps.

00:34:11.450 --> 00:34:13.839
And you can use that to extract the data you
need.

00:34:13.839 --> 00:34:22.719
So you know, say that each element within
your JSON tree has a title, a url, and another

00:34:22.719 --> 00:34:24.299
few hundred K worth of data.

00:34:24.299 --> 00:34:25.979
Just using an extreme example.

00:34:25.979 --> 00:34:28.450
You can just go and extract the url in the
title.

00:34:28.450 --> 00:34:33.409
And then when the user clicks on it, you can
go and make a call to that url to fetch the

00:34:33.409 --> 00:34:34.709
additional data.

00:34:34.709 --> 00:34:36.019
At request.

00:34:36.019 --> 00:34:38.280
And that way you can ease up some memory pressure
there.

00:34:38.280 --> 00:34:40.809
&gt;&gt;Male #2: Alright.

00:34:40.809 --> 00:34:45.929
Do you have any, let's say that that's not
an option.

00:34:45.929 --> 00:34:53.079
Are you aware of any good streaming JSON parsers
or any other way to sort of relieve some of

00:34:53.079 --> 00:34:58.999
that hurt that's gonna come by streaming all
that content into the app?

00:34:58.999 --> 00:35:03.109
&gt;&gt;Trevor: I'll do some research after the
show and I can recommend something assuming

00:35:03.109 --> 00:35:04.109
something exists.

00:35:04.109 --> 00:35:05.710
I'm sure there is something out there.

00:35:05.710 --> 00:35:08.529
Again, not familiar with the name off the
top of my head.

00:35:08.529 --> 00:35:13.930
But we'll try and find something for you as
far as a good streaming JSON parser.

00:35:13.930 --> 00:35:20.680
But as far as saving memory pressure, that's
always a really difficult issue in Android

00:35:20.680 --> 00:35:21.680
apps.

00:35:21.680 --> 00:35:25.700
Because you are sharing the device with a
lot of other apps.

00:35:25.700 --> 00:35:28.440
And on top of that it's on a mobile device
so memory is limited.

00:35:28.440 --> 00:35:32.999
It is definitely different than working on
a desktop or server.

00:35:32.999 --> 00:35:35.420
And there's really not much you can do about
that.

00:35:35.420 --> 00:35:39.969
Other than to write your application to use
as little memory as possible.

00:35:39.969 --> 00:35:44.150
Now there are some [unclear] you can use that
will get you some additional [unclear] space.

00:35:44.150 --> 00:35:46.190
But we really don't recommend people use them.

00:35:46.190 --> 00:35:49.579
It gives a bad user experience because it
will start evicting other apps from memory

00:35:49.579 --> 00:35:50.729
when they shouldn't be.

00:35:50.729 --> 00:35:54.509
And on top of that, the amount of memory they
give you is actually not guaranteed.

00:35:54.509 --> 00:35:58.019
So it's entirely possible that using these
[unclear] will get you no extra space at all.

00:35:58.019 --> 00:35:59.640
It's really just a hint to the OS.

00:35:59.640 --> 00:36:01.729
And the OS decides how to handle it.

00:36:01.729 --> 00:36:09.369
So really I can't really give you any better
advice other than you're gonna need to be

00:36:09.369 --> 00:36:11.459
conservative in your memory usage in general.

00:36:11.459 --> 00:36:20.099
&gt;&gt;Alex: If I can ask, what, roughly how big
is the JSON that you're downloading?

00:36:20.099 --> 00:36:22.989
Like how much data are you trying to process
at one time?

00:36:22.989 --> 00:36:24.391
&gt;&gt;Male #2: Um, it can be several Ks.

00:36:24.391 --> 00:36:25.391
I think.

00:36:25.391 --> 00:36:30.050
&gt;&gt;Trevor: You should have enough, well, so
it's like 10 kilobytes or less then?

00:36:30.050 --> 00:36:31.109
&gt;&gt;Male #2: No.

00:36:31.109 --> 00:36:32.170
No, no, no.

00:36:32.170 --> 00:36:37.660
We're, I'm sorry, I don't know if it's I don't
have exact rough numbers but I know it can

00:36:37.660 --> 00:36:43.619
be um, very large you know paragraphs of text.

00:36:43.619 --> 00:36:45.999
On that or other things.

00:36:45.999 --> 00:36:46.999
&gt;&gt;Trevor: OK.

00:36:46.999 --> 00:36:48.420
Paragraphs, you should be fine.

00:36:48.420 --> 00:36:53.599
I mean I'd say as long as you're a few hundred
K or less, no problem.

00:36:53.599 --> 00:36:57.420
I'd say even up to a megabyte, I mean that's
the size of a large photo, right?

00:36:57.420 --> 00:37:01.249
Or actually, a megabyte would be a small photo.

00:37:01.249 --> 00:37:06.579
[laughs] But anyway, I mean, I'd say up to
that size, you're probably still safe.

00:37:06.579 --> 00:37:09.980
So if you're running out of memory with paragraphs.

00:37:09.980 --> 00:37:14.880
That sort of tells me that there's something
else wrong in your app.

00:37:14.880 --> 00:37:19.720
And you just, I'm really curious what in your
app is using all available memory.

00:37:19.720 --> 00:37:23.420
But you, I'd expect you'd be running into
other problems just besides your JSON at that

00:37:23.420 --> 00:37:24.420
point.

00:37:24.420 --> 00:37:25.569
I mean, that's not a lot.

00:37:25.569 --> 00:37:28.809
Most devices have gigabytes of memory.

00:37:28.809 --> 00:37:31.859
I mean, not many gigabytes.

00:37:31.859 --> 00:37:33.680
Maybe a gigabyte.

00:37:33.680 --> 00:37:36.119
Maybe half a gigabyte.

00:37:36.119 --> 00:37:41.769
But you know, I mean, at that scale, you know,
you're less than a meg. that's a very small

00:37:41.769 --> 00:37:44.210
fraction of system memory.

00:37:44.210 --> 00:37:49.969
And keep in mind the system will evict other
apps as necessary to make sure your app as

00:37:49.969 --> 00:37:52.809
the foreground app has enough memory to run.

00:37:52.809 --> 00:37:57.059
So by the time you run out of memory you really
have exhausted everything the device has that

00:37:57.059 --> 00:37:58.190
it can give you.

00:37:58.190 --> 00:38:03.609
So, I'm, again, I think there's something
else in your app that's causing these problems.

00:38:03.609 --> 00:38:05.009
It doesn't sound normal to me.

00:38:05.009 --> 00:38:08.390
&gt;&gt;Alex: Have you looked at any sort of memory
monitor?

00:38:08.390 --> 00:38:13.599
To look at what structures are being generated
by that, that are taking up memory?

00:38:13.599 --> 00:38:19.589
&gt;&gt;Male #2: Yeah, I mean, it's, there's a lot
of um, UI going on.

00:38:19.589 --> 00:38:24.479
There's, there's, we've got other resources
being downloaded and integrated into the system,

00:38:24.479 --> 00:38:32.569
and it's entirely possible that this is just
a large enough hit into the system that it's

00:38:32.569 --> 00:38:35.529
just taking us over the top.

00:38:35.529 --> 00:38:41.719
But we don't experience this, this 'out of
memory' in any other area except when we're

00:38:41.719 --> 00:38:43.369
loading up this JSON.

00:38:43.369 --> 00:38:44.779
&gt;&gt;Trevor: Hm.

00:38:44.779 --> 00:38:49.339
&gt;&gt;Alex: interesting
&gt;&gt;Trevor: Yeah, that is an interesting problem.

00:38:49.339 --> 00:38:50.339
[pause]

00:38:50.339 --> 00:38:54.299
&gt;&gt;Male #2: So if you do have, if you are able
to find a streaming JSON parser, that would

00:38:54.299 --> 00:38:55.299
be awesome.

00:38:55.299 --> 00:38:56.729
&gt;&gt;Trevor: Yeah, well we'll see what we can
find for you.

00:38:56.729 --> 00:38:58.549
Um, I think that's probably the best approach
here.

00:38:58.549 --> 00:39:03.209
Given that, I mean like, it's entirely possible
to that I'm just guessing maybe you occasionally

00:39:03.209 --> 00:39:06.789
run across a really, an abnormally large block
of JSON data.

00:39:06.789 --> 00:39:12.829
I mean, the problem you're having is very
similar to loading bitmaps from the internet.

00:39:12.829 --> 00:39:15.709
And bitmaps are fairly large.

00:39:15.709 --> 00:39:21.210
The advice we usually give is, there's enough
space to load twice your screen size in the

00:39:21.210 --> 00:39:22.349
Java heap.

00:39:22.349 --> 00:39:30.250
And you know, any reasonably sized block of
JSON data is going to be less than that.

00:39:30.250 --> 00:39:34.020
So yeah, you probably are just right at the
edge there.

00:39:34.020 --> 00:39:36.109
But we'll see what we can find that can help
with this.

00:39:36.109 --> 00:39:38.410
[key strokes in background]
&gt;&gt;Alex: What parser are you using right now?

00:39:38.410 --> 00:39:39.489
&gt;&gt;Joe: Yeah, I was gonna ask that.

00:39:39.489 --> 00:39:40.489
&gt;&gt;Alex: [inaudible]

00:39:40.489 --> 00:39:42.289
&gt;&gt;Male #2: We're using Jackson.

00:39:42.289 --> 00:39:45.099
We thought it should be the fastest.

00:39:45.099 --> 00:39:46.099
&gt;&gt;Trevor: Sorry?

00:39:46.099 --> 00:39:47.099
&gt;&gt;Male #2: Jackson.

00:39:47.099 --> 00:39:48.099
&gt;&gt;Trevor: OK.

00:39:48.099 --> 00:39:49.099
&gt;&gt;Alex: OK.

00:39:49.099 --> 00:39:50.099
&gt;&gt;Joe: OK.

00:39:50.099 --> 00:39:51.099
Any other comments?

00:39:51.099 --> 00:39:52.789
&gt;&gt;Trevor: Ah, just make a note here.

00:39:52.789 --> 00:39:53.789
&gt;&gt;Joe: OK.

00:39:53.789 --> 00:39:58.190
&gt;&gt;Trevor: We, yeah, so, as far as advice,
like I said earlier, we'll dedicate a few

00:39:58.190 --> 00:40:01.170
minutes of the next show to go over any questions
we couldn't answer.

00:40:01.170 --> 00:40:02.829
So we'll have an answer for you then.

00:40:02.829 --> 00:40:05.390
So, it'll be two pm next Wednesday.

00:40:05.390 --> 00:40:08.279
Be sure to tune in.

00:40:08.279 --> 00:40:12.859
Yeah, alternatively you can also leave a comment
on the event page and we'll follow up on the

00:40:12.859 --> 00:40:19.240
event page too, so that way we can get you
an answer quicker.

00:40:19.240 --> 00:40:20.980
&gt;&gt;Joe: Thank you.

00:40:20.980 --> 00:40:22.150
Um, yes?

00:40:22.150 --> 00:40:23.150
Anybody else there?

00:40:23.150 --> 00:40:24.150
OK.

00:40:24.150 --> 00:40:27.369
So, we'll move on to the next question in
Moderator.

00:40:27.369 --> 00:40:30.990
Which is from Kristo in Tallinnâ€”excuse me.

00:40:30.990 --> 00:40:31.990
Estonia.

00:40:31.990 --> 00:40:35.930
"I think that Android is very close to being
feature complete.

00:40:35.930 --> 00:40:41.779
But why does it seem like not enough effort
is put on HTML5 support, which is still very

00:40:41.779 --> 00:40:43.859
laggy on mobile even on quad-core.

00:40:43.859 --> 00:40:46.880
And why are there still no user accounts?

00:40:46.880 --> 00:40:48.420
Especially guest."

00:40:48.420 --> 00:40:49.420
[pause]

00:40:49.420 --> 00:40:53.681
&gt;&gt;Trevor: That's, I'm not sure we can actually
really answer too much about that.

00:40:53.681 --> 00:40:57.059
'cause that's really going into the road map,
as far as, you know for Android.

00:40:57.059 --> 00:40:59.449
Which Is something we generally can't talk
about.

00:40:59.449 --> 00:41:03.089
At least not publicly.

00:41:03.089 --> 00:41:09.170
Now, as far as HTML5 support, I'd say a lot
of the effort lately has gone into Chrome.

00:41:09.170 --> 00:41:15.059
And as a result, the built-in web view client
is a little bit lacking in features.

00:41:15.059 --> 00:41:18.349
That's sort of a complicated issue because
not all of Chrome is open source.

00:41:18.349 --> 00:41:21.309
It is something the teams are working on.

00:41:21.309 --> 00:41:23.559
But I can' tell you how they're going to address
that.

00:41:23.559 --> 00:41:27.509
Again that's a forward looking statement that
I, you know, we can't talk about on the air.

00:41:27.509 --> 00:41:32.309
But these are all good points and we definitely
listen to the feedback in the community in

00:41:32.309 --> 00:41:35.959
deciding how we spend our engineering time.

00:41:35.959 --> 00:41:39.849
So I'll just take this question as a feature
request.

00:41:39.849 --> 00:41:55.420
And make sure that that gets passed along.

00:41:55.420 --> 00:42:02.289
&gt;&gt;Joe: OK.

00:42:02.289 --> 00:42:12.599
[sound cuts out]

00:42:12.599 --> 00:42:19.469
&gt;&gt;Joe: OK.

00:42:19.469 --> 00:42:22.089
So the question is, is there a way--?

00:42:22.089 --> 00:42:28.259
Is there a way of adjusting the padding on
the, um, label for the spinner.

00:42:28.259 --> 00:42:29.690
&gt;&gt;Alex: It's on the text within the spinner.

00:42:29.690 --> 00:42:33.099
I guess he wants to left-align that within
the spinner.

00:42:33.099 --> 00:42:35.099
&gt;&gt;Joe: I see.

00:42:35.099 --> 00:42:36.099
OK.

00:42:36.099 --> 00:42:40.769
So, the question is, how do I left-align text
within the spinner itself?

00:42:40.769 --> 00:42:41.769
&gt;&gt;Alex: Right.

00:42:41.769 --> 00:42:42.769
OK.

00:42:42.769 --> 00:42:45.819
Uh, I don't know the answer to that off the
top of my head.

00:42:45.819 --> 00:42:47.890
Is Roman lurking in the Hangout by any chance?

00:42:47.890 --> 00:42:48.890
&gt;&gt;Trevor: [laughs]

00:42:48.890 --> 00:42:52.670
&gt;&gt;Alex: Because he always knows the answer
to this, the layout question.

00:42:52.670 --> 00:42:53.910
No, Roman?

00:42:53.910 --> 00:43:01.670
Was hoping if we said his name a couple times
it would sort of summon him.

00:43:01.670 --> 00:43:04.200
We'll have to, we'll have to look into that.

00:43:04.200 --> 00:43:05.200
&gt;&gt;Joe: Right.

00:43:05.200 --> 00:43:08.869
&gt;&gt;Alex: And have an answer for you next week.

00:43:08.869 --> 00:43:16.170
Also, if you could, link, if you want to,
ask the question in StackOverlow.

00:43:16.170 --> 00:43:20.630
And then link to that site with a question
within Moderator.

00:43:20.630 --> 00:43:21.859
We can get an answer there.

00:43:21.859 --> 00:43:24.569
It's a handy place for us to address sample
code.

00:43:24.569 --> 00:43:28.900
&gt;&gt;Trevor: Moderator I think is, the Moderator
section for this week might be locked by the

00:43:28.900 --> 00:43:30.650
time they do that.

00:43:30.650 --> 00:43:35.060
So if you can't post to Moderator, again go
to our event page Google +.

00:43:35.060 --> 00:43:38.099
Make a comment there and we'll follow up with
you that way, too.

00:43:38.099 --> 00:43:39.420
&gt;&gt;Alex: Yeah.

00:43:39.420 --> 00:43:40.739
&gt;&gt;Joe: OK.

00:43:40.739 --> 00:43:41.739
Great.

00:43:41.739 --> 00:43:42.739
Thanks.

00:43:42.739 --> 00:43:43.739
Um.

00:43:43.739 --> 00:43:44.739
Next question from Moderator.

00:43:44.739 --> 00:43:49.569
"What would you recommend if your Android
app needs to interact with a SOAP web service?"

00:43:49.569 --> 00:43:50.740
This is from Bellinghammer.

00:43:50.740 --> 00:43:53.259
&gt;&gt;Trevor: So fun.

00:43:53.259 --> 00:43:55.619
[laughs] Use REST.

00:43:55.619 --> 00:43:56.690
What are you thinking?

00:43:56.690 --> 00:43:57.690
SOAP?

00:43:57.690 --> 00:43:59.170
&gt;&gt;Alex: Well, you don't always have control
overâ€”

00:43:59.170 --> 00:44:00.170
&gt;&gt;Trevor: I know, you don't.

00:44:00.170 --> 00:44:01.739
&gt;&gt;Joe: I think that was said in jest.

00:44:01.739 --> 00:44:02.739
&gt;&gt;Trevor: It was.

00:44:02.739 --> 00:44:03.739
It was.

00:44:03.739 --> 00:44:05.650
I'm just not a fan of SOAP myself.

00:44:05.650 --> 00:44:06.650
&gt;&gt;Alex: Right.

00:44:06.650 --> 00:44:09.859
&gt;&gt;Trevor: But, yeah, that'--, I'm not sure,
familiar with any really good SOAP libraries

00:44:09.859 --> 00:44:10.859
in Android.

00:44:10.859 --> 00:44:12.249
Does anybody else know one?

00:44:12.249 --> 00:44:13.830
&gt;&gt;Alex: I don't know off the top of my head.

00:44:13.830 --> 00:44:19.959
Though I think the, the point of SOAP is sort
of, you don't need a SOAP library so much

00:44:19.959 --> 00:44:26.319
as you need something to generate the code
interact with that web service for you.

00:44:26.319 --> 00:44:27.319
&gt;&gt;Trevor: Right.

00:44:27.319 --> 00:44:30.150
&gt;&gt;Alex: That's, the point is SOAP, is you
don't have to understand SOAP.

00:44:30.150 --> 00:44:32.590
Which, [laughs] is kind of odd.

00:44:32.590 --> 00:44:34.109
It's kind of a little weird approach.

00:44:34.109 --> 00:44:37.890
We all of us prefer REST.

00:44:37.890 --> 00:44:43.569
But if you can find a Java utility that will
not necessarily Android specific, but it the

00:44:43.569 --> 00:44:50.239
kind of one that will generate Java interface
files and it can modify those to use the web

00:44:50.239 --> 00:44:51.279
clients available in Android.

00:44:51.279 --> 00:44:55.690
&gt;&gt; Trevor: I usually recommend against doing
that though because a lot of the web services

00:44:55.690 --> 00:45:01.849
libraries that you'll find for Java, in particular,
are designed for desktop environments.

00:45:01.849 --> 00:45:04.279
And they're really not conservative when it
comes to memory use.

00:45:04.279 --> 00:45:05.940
You run into problems with them.

00:45:05.940 --> 00:45:10.470
So I'd actually go out of your way to find
one that's specifically designed for Android.

00:45:10.470 --> 00:45:11.470
&gt;&gt;Alex: Right.

00:45:11.470 --> 00:45:14.400
&gt;&gt;Trevor: With that in mind, I just did a
quick search here.

00:45:14.400 --> 00:45:18.219
There's one here at the top of my search results
called KSOAP to Android.

00:45:18.219 --> 00:45:19.849
I don't have any experience with it.

00:45:19.849 --> 00:45:23.310
But it does say it's a lightweight and efficient
SOAP client library for Android.

00:45:23.310 --> 00:45:26.390
So, that might be a good place to start.

00:45:26.390 --> 00:45:27.390
[pause]

00:45:27.390 --> 00:45:30.869
&gt;&gt;Alex: I didn't know there actually was one
for Android.

00:45:30.869 --> 00:45:31.869
That's cool.

00:45:31.869 --> 00:45:33.759
&gt;&gt;Joe: Yeah, doesn't surprise me.

00:45:33.759 --> 00:45:36.809
I think there's cool stuff out thereâ€”

00:45:36.809 --> 00:45:41.660
&gt;&gt;Trevor: There's enough SOAP web services
out there that you know, like you said, you

00:45:41.660 --> 00:45:44.859
can't control what web service you're interacting
with if you didn't write it.

00:45:44.859 --> 00:45:48.529
So it's good that these client libraries are
out there.

00:45:48.529 --> 00:45:51.009
If you are writing new APIs please use REST.

00:45:51.009 --> 00:45:52.269
It makes me happy.

00:45:52.269 --> 00:45:57.890
But other than that, I mean, SOAP itself,
as an end user, there definitely are some

00:45:57.890 --> 00:45:59.339
benefits of using it.

00:45:59.339 --> 00:46:05.969
And yeah, I just, just so you know, I did
a search for SOAP Android on Google.

00:46:05.969 --> 00:46:09.420
There's also one right under it called Android
SOAP enabler.

00:46:09.420 --> 00:46:16.150
Again, we don't have any experience with either
of these APIs. so feel free to give them a

00:46:16.150 --> 00:46:17.150
try.

00:46:17.150 --> 00:46:19.541
Let us know what you think, actually, so we
can give feedback to other people who are

00:46:19.541 --> 00:46:21.279
asking similar questions.

00:46:21.279 --> 00:46:24.880
But, we can't endorse either of them.

00:46:24.880 --> 00:46:27.539
&gt;&gt;Joe: OK.

00:46:27.539 --> 00:46:31.869
We're getting towards the end of the hour
here so let's move forward pretty quickly.

00:46:31.869 --> 00:46:33.440
Here's another question from Bellinghammer.

00:46:33.440 --> 00:46:39.390
"After doing some profiling, it appears that
most of the time spent in some https-based

00:46:39.390 --> 00:46:43.489
web service requests is downloading and validating
the server certificate.

00:46:43.489 --> 00:46:47.699
Is there a way to cache the certificate for
subsequent requests?"

00:46:47.699 --> 00:46:50.859
&gt;&gt;Trevor: I'm not sure you want to.

00:46:50.859 --> 00:46:56.759
Um, that certificate validation is, needs
to be done on a per request basis.

00:46:56.759 --> 00:47:04.390
To make sure that nobody has tampered with
you with the response coming back from the

00:47:04.390 --> 00:47:05.390
server.

00:47:05.390 --> 00:47:06.829
I mean, this is of, course, assuming you're
using https.

00:47:06.829 --> 00:47:09.479
If you're using http, none of this applies.

00:47:09.479 --> 00:47:16.119
But if you are using a secure connection , there's
probably a reason you're doing that.

00:47:16.119 --> 00:47:18.009
And every request needs to be validated.

00:47:18.009 --> 00:47:22.739
To make sure that say, somebody hasn't gone
and swapped out your certificate using a man-in-the-middle

00:47:22.739 --> 00:47:23.739
attack.

00:47:23.739 --> 00:47:25.180
Uh, yeah.

00:47:25.180 --> 00:47:26.239
These thing are rare.

00:47:26.239 --> 00:47:32.140
But there are reasons the, you know, there
are reasons why SSL and TLS exists.

00:47:32.140 --> 00:47:34.890
There are attacks that do this sort of thing.

00:47:34.890 --> 00:47:36.199
And you need to check for it.

00:47:36.199 --> 00:47:38.949
Unfortunately there's really not a good work
around there.

00:47:38.949 --> 00:47:44.650
Now some of the work done on Speedy is specifically
trying to go and speed up SSL and TLS.

00:47:44.650 --> 00:47:45.999
And so you could use it.

00:47:45.999 --> 00:47:49.670
I imagine there's probably a Speedy library
out there for Android.

00:47:49.670 --> 00:47:52.439
I'm, I think so anyway.

00:47:52.439 --> 00:47:53.439
Yeah.

00:47:53.439 --> 00:47:54.439
I actually, yeah.

00:47:54.439 --> 00:47:55.530
Chrome probably uses it.

00:47:55.530 --> 00:47:57.289
I'm sure there's a way to go and get that
working.

00:47:57.289 --> 00:48:00.150
But most servers out there I think don't support
Speedy yet.

00:48:00.150 --> 00:48:04.759
But that, this is precisely the sort of problem
that engineers are working on right now, to

00:48:04.759 --> 00:48:06.170
go and try to speed up SSL.

00:48:06.170 --> 00:48:08.759
So it's a valid question.

00:48:08.759 --> 00:48:11.680
Unfortunately it's not an easy answer.

00:48:11.680 --> 00:48:13.369
&gt;&gt;Alex: Got a hangout question.

00:48:13.369 --> 00:48:14.369
&gt;&gt;Joe: Go ahead.

00:48:14.369 --> 00:48:15.369
[pause]

00:48:15.369 --> 00:48:17.689
&gt;&gt;Male #3: Asking about a REST question.

00:48:17.689 --> 00:48:19.009
&gt;&gt;Trevor: Iâ€™m sorry.

00:48:19.009 --> 00:48:21.199
We missed the beginning there.

00:48:21.199 --> 00:48:22.199
&gt;&gt;Joe: Yeah.

00:48:22.199 --> 00:48:24.269
You've got a REST question?

00:48:24.269 --> 00:48:25.589
&gt;&gt;Male #3: Yes.

00:48:25.589 --> 00:48:26.589
Correct.

00:48:26.589 --> 00:48:28.349
Obviously, consuming REST services is pretty
cool.

00:48:28.349 --> 00:48:34.199
So the question is, is there a better way
to consume a REST service besides only using

00:48:34.199 --> 00:48:38.420
raw attaching http drive, or the UL connection?

00:48:38.420 --> 00:48:44.619
Is there any library you would recommend which
helps in, you know, mapping resources, to

00:48:44.619 --> 00:48:46.930
URLs and this kind of stuff?

00:48:46.930 --> 00:48:48.811
&gt;&gt;Trevor: SO, I used to work on the Gdata
team.

00:48:48.811 --> 00:48:52.859
And you know, like I said, I worked with UDEV
background.

00:48:52.859 --> 00:48:54.240
I was on that team.

00:48:54.240 --> 00:48:57.749
Working on, I was on a lot of the APIs her
at Google.

00:48:57.749 --> 00:49:02.739
And we spent a lot of time writing client
libraries that were very, very tightly focused

00:49:02.739 --> 00:49:07.260
on different APIs. and it did make things
a lot easier to work with.

00:49:07.260 --> 00:49:10.529
But on the other hand it's a lot of effort
to maintain those.

00:49:10.529 --> 00:49:15.170
And it actually, in a lot of cases, had a
lot of complexity, I found.

00:49:15.170 --> 00:49:18.599
And as a result I think pretty much everyone
on the API team actually usually preferred

00:49:18.599 --> 00:49:21.059
just to use cURL whenever they were testing
something.

00:49:21.059 --> 00:49:25.950
Rather than going through all the, effort
of trying to set up a client library.

00:49:25.950 --> 00:49:26.950
&gt;&gt;Male #3: OK.

00:49:26.950 --> 00:49:30.650
&gt;&gt;Trevor: Now that said, that's not to say
that you couldn't write a very nice clean

00:49:30.650 --> 00:49:35.750
client library that's very targeted to a very
specific use case and get really nice results.

00:49:35.750 --> 00:49:39.369
But, I think that the beauty of REST is it's
destined to be very easy to use without a

00:49:39.369 --> 00:49:40.519
client library.

00:49:40.519 --> 00:49:48.880
So I think there is, um, there's a case in
writing client libraries in a service by service

00:49:48.880 --> 00:49:49.880
basis.

00:49:49.880 --> 00:49:54.019
So say you wanna talk to, just pulling an
example off the top of my head, say you wanna

00:49:54.019 --> 00:49:55.199
talk to Google cloud messaging.

00:49:55.199 --> 00:49:56.199
Right?

00:49:56.199 --> 00:49:59.759
It would make sense to write a Google cloud
messaging library that knows all the intricacies

00:49:59.759 --> 00:50:04.319
of that service, and then, marshals your ht
requests for you and makes everything very

00:50:04.319 --> 00:50:05.319
clean.

00:50:05.319 --> 00:50:07.479
you never have to know the raw protocol.

00:50:07.479 --> 00:50:09.019
I think that's a valid effort.

00:50:09.019 --> 00:50:15.209
But I think trying to make a very generic
REST client library, you wind up writing something

00:50:15.209 --> 00:50:18.479
that looks exactly like an http client library.

00:50:18.479 --> 00:50:22.290
But more likely than not, adding a lot of
complexity on top of it.

00:50:22.290 --> 00:50:25.799
So I'm not convinced there's a lot of benefit
there.

00:50:25.799 --> 00:50:28.959
If you do happen to know an really good client
libraries for doing this, let me know.

00:50:28.959 --> 00:50:32.109
I'd love to take a look at them, 'cause it
is something I've worked on in the past.

00:50:32.109 --> 00:50:36.119
But nothing, I've never found anything I really
liked to try to do it.

00:50:36.119 --> 00:50:39.969
&gt;&gt;Male #3: I actually have had some experience
with cREST.

00:50:39.969 --> 00:50:41.990
It's a very small library.

00:50:41.990 --> 00:50:45.680
And it mimics the way jacksRS or jersey works.

00:50:45.680 --> 00:50:47.369
With imitations.

00:50:47.369 --> 00:50:48.369
And that was pretty cool.

00:50:48.369 --> 00:50:50.839
But it's very small and only maintained by
one person.

00:50:50.839 --> 00:50:51.839
&gt;&gt;Trevor: [laughs]

00:50:51.839 --> 00:50:55.420
&gt;&gt;Male #3: So it's not something to rely on
on a daily basis.

00:50:55.420 --> 00:50:57.549
But the approach was pretty cool.

00:50:57.549 --> 00:51:02.439
Because you only had those imitations because
everything happens between us.

00:51:02.439 --> 00:51:07.589
And I think there's basically room for such
a library but I just don't know any which

00:51:07.589 --> 00:51:08.589
is suitable.

00:51:08.589 --> 00:51:11.380
&gt;&gt;Joe: Well, you can get to work on it.

00:51:11.380 --> 00:51:12.910
&gt;&gt;Trevor: [laughs] Yeah.

00:51:12.910 --> 00:51:14.430
I'm definitely [inaudible]

00:51:14.430 --> 00:51:17.609
&gt;&gt;Joe: The Google attitude is, if you see
something broken, you fix it.

00:51:17.609 --> 00:51:21.519
But, I would Google it too and see if there's
somebody out there doing this.

00:51:21.519 --> 00:51:28.119
I mean, if there is space for it, maybe somebody
has done it.. but I tend to agree with Trevor

00:51:28.119 --> 00:51:32.119
that by the time you come up with something
that's general purpose enough to address all

00:51:32.119 --> 00:51:37.079
the different sorts of things you're dealing
with a lot of complexity.

00:51:37.079 --> 00:51:40.809
In trying to map specific things into a generalized
client library.

00:51:40.809 --> 00:51:45.529
&gt;&gt;Alex: and are you trying to uh, communicate
with your own web service?

00:51:45.529 --> 00:51:48.249
Or some other third party web service?

00:51:48.249 --> 00:51:49.739
&gt;&gt;Male #3: That's a third party.

00:51:49.739 --> 00:51:52.079
Or just any web service basically.

00:51:52.079 --> 00:51:53.079
&gt;&gt;Alex: OK.

00:51:53.079 --> 00:51:57.890
The solution that I've used in the past, I
wrote an app once that communicated with like

00:51:57.890 --> 00:51:59.660
ten or 11 different web services.

00:51:59.660 --> 00:52:05.089
And the strategy I implemented was I would
bug them and ask them to write a client library

00:52:05.089 --> 00:52:07.710
in my language of choice

00:52:07.710 --> 00:52:08.710
&gt;&gt;Trevor: [laughs]

00:52:08.710 --> 00:52:11.249
&gt;&gt;Alex: And I would make a case where I was,
it was written in C Sharp actually.

00:52:11.249 --> 00:52:12.719
But we made a case for it.

00:52:12.719 --> 00:52:16.259
There's all these C Sharp developers who wanna
build awesome things for you.

00:52:16.259 --> 00:52:22.099
But you know, they can't unless you just like
give us a client library, we'll build awesome

00:52:22.099 --> 00:52:23.099
things.

00:52:23.099 --> 00:52:24.099
&gt;&gt;Male #3: Mm.

00:52:24.099 --> 00:52:25.099
Yeah.

00:52:25.099 --> 00:52:26.400
&gt;&gt;Alex: and a lot of the times they would.

00:52:26.400 --> 00:52:33.039
So I would definitely don't be afraid to just
bug people and say "Build me an Android client."

00:52:33.039 --> 00:52:34.819
&gt;&gt;Male #3: [laughs] OK.

00:52:34.819 --> 00:52:35.819
That's funny.

00:52:35.819 --> 00:52:36.819
I'll try.

00:52:36.819 --> 00:52:37.819
[laughter]

00:52:37.819 --> 00:52:39.259
&gt;&gt;Joe: Thanks for your question.

00:52:39.259 --> 00:52:41.029
It's a good question.

00:52:41.029 --> 00:52:42.369
&gt;&gt;Male #3: Thanks.

00:52:42.369 --> 00:52:43.369
Goodbye.

00:52:43.369 --> 00:52:44.369
&gt;&gt;Joe: Anybody else out there?

00:52:44.369 --> 00:52:45.369
OK.

00:52:45.369 --> 00:52:47.869
Then we, as far as I can tell, we only have
one question left.

00:52:47.869 --> 00:52:54.359
So and I think we answered this already but
this is from Minsko in Milford, Ohio.

00:52:54.359 --> 00:52:56.780
"Where do apps get installed on Android?

00:52:56.780 --> 00:52:59.759
I see a mnt/asec on my Nexus7.

00:52:59.759 --> 00:53:03.390
Is that where Google Play puts the apps with
device specific encryption?"

00:53:03.390 --> 00:53:05.660
&gt;&gt;Trevor: To which the answer is "Yes."

00:53:05.660 --> 00:53:06.660
&gt;&gt;Joe: Yeah.

00:53:06.660 --> 00:53:07.660
Yes.

00:53:07.660 --> 00:53:08.660
Yeah.

00:53:08.660 --> 00:53:10.410
OK so I think we've covered that.

00:53:10.410 --> 00:53:12.729
Anybody else out there?

00:53:12.729 --> 00:53:17.309
Now's your chance to jump into the Hangout
and get your question answered immediately.

00:53:17.309 --> 00:53:18.309
Yes?

00:53:18.309 --> 00:53:19.309
No?

00:53:19.309 --> 00:53:21.959
&gt;&gt;Male #4: Yes.

00:53:21.959 --> 00:53:24.059
I have a question.

00:53:24.059 --> 00:53:26.180
&gt;&gt;Trevor: Ah.

00:53:26.180 --> 00:53:29.450
So we have somebody.

00:53:29.450 --> 00:53:30.450
&gt;&gt;Joe: Shoot.

00:53:30.450 --> 00:53:31.450
[pause]

00:53:31.450 --> 00:53:32.450
&gt;&gt;Joe: Hello?

00:53:32.450 --> 00:53:33.450
&gt;&gt;Male #4: Yeah, uh Hello?

00:53:33.450 --> 00:53:34.450
&gt;&gt;Joe: Yeah.

00:53:34.450 --> 00:53:35.450
&gt;&gt;Trevor: Yes.

00:53:35.450 --> 00:53:37.410
&gt;&gt;Male #4: Yeah, I tried to [inaudible] web
service was that I was the, uh, webserver.

00:53:37.410 --> 00:53:42.579
And I wonder if you look at all works with
[inaudible].

00:53:42.579 --> 00:53:45.200
&gt;&gt;Trevor: Sorry I didn't quite catch that.

00:53:45.200 --> 00:53:47.269
Something about a web server?

00:53:47.269 --> 00:53:52.269
&gt;&gt;Male #4: Uh, web server.

00:53:52.269 --> 00:53:54.279
&gt;&gt;Joe: Yes.

00:53:54.279 --> 00:53:56.799
So can you repeat the question please?

00:53:56.799 --> 00:54:01.980
&gt;&gt;Male #4: And I wonder if, is, I wonder if,
[inaudible] works with specific [inaudible]

00:54:01.980 --> 00:54:02.980
&gt;&gt;Joe: hm.

00:54:02.980 --> 00:54:05.900
&gt;&gt;Male #4: I tried to develop a web service.

00:54:05.900 --> 00:54:12.539
&gt;&gt;Trevor: yeah, did you catch what he said?

00:54:12.539 --> 00:54:15.690
&gt;&gt;Joe: Yeah, I'm still not getting it.

00:54:15.690 --> 00:54:19.920
Is it possible that you could type in the
question for us?

00:54:19.920 --> 00:54:23.200
&gt;&gt;Male #4: Yeah.

00:54:23.200 --> 00:54:24.289
[pause]

00:54:24.289 --> 00:54:29.009
&gt;&gt;Joe: and bear with us for just a second.

00:54:29.009 --> 00:54:30.660
[pause]

00:54:30.660 --> 00:54:35.599
&gt;&gt;Joe: He's typing.

00:54:35.599 --> 00:54:37.249
OK.

00:54:37.249 --> 00:54:38.890
Good.

00:54:38.890 --> 00:54:43.839
&gt;&gt;Trevor: It's OK.

00:54:43.839 --> 00:54:45.029
We have a couple minutes left.

00:54:45.029 --> 00:54:46.029
&gt;&gt;Joe: Yeah.

00:54:46.029 --> 00:54:52.839
&gt;&gt;Trevor: We have really a couple minutes.

00:54:52.839 --> 00:54:58.309
[pause]

00:54:58.309 --> 00:55:04.539
This is where we need some theme music.

00:55:04.539 --> 00:55:05.539
&gt;&gt;Joe: Right.

00:55:05.539 --> 00:55:06.539
&gt;&gt;Trevor: Like you know, the Jeopardy theme.

00:55:06.539 --> 00:55:08.059
&gt;&gt;Joe: The Jeopardy theme would be good.

00:55:08.059 --> 00:55:09.059
Orâ€”

00:55:09.059 --> 00:55:10.229
&gt;&gt;Alex: I think the jeopardy theme has been
played too manyâ€”

00:55:10.229 --> 00:55:11.229
&gt;&gt;Joe: It's been done, yeah.

00:55:11.229 --> 00:55:12.229
Too manyâ€”

00:55:12.229 --> 00:55:14.559
&gt;&gt;Alex: I like the Katamari Damacy theme [inaudible]

00:55:14.559 --> 00:55:15.559
&gt;&gt;Joe: [laughs]

00:55:15.559 --> 00:55:18.619
&gt;&gt;Trevor: Yeah, that would be epic.

00:55:18.619 --> 00:55:25.069
&gt;&gt;Alex: Unfortunately if we'd played it over
YouTube we'd have to mute the entire video.

00:55:25.069 --> 00:55:26.069
&gt;&gt;Joe: Yeah.

00:55:26.069 --> 00:55:27.069
&gt;&gt;Trevor: Yeah.

00:55:27.069 --> 00:55:28.069
&gt;&gt;Joe: that's the problem with a lot of thoseâ€”

00:55:28.069 --> 00:55:29.069
&gt;&gt;Alex: [inaudible]

00:55:29.069 --> 00:55:30.069
&gt;&gt;Trevor: Licensing piece.

00:55:30.069 --> 00:55:31.069
&gt;&gt;Alex: Yeah.

00:55:31.069 --> 00:55:32.069
&gt;&gt;Joe: We have to find something that's freeware.

00:55:32.069 --> 00:55:34.009
&gt;&gt;Alex: We need some creative commons waiting
music.

00:55:34.009 --> 00:55:36.660
&gt;&gt;Trevor: Yeah, like the music we use at the
top of the show.

00:55:36.660 --> 00:55:37.660
&gt;&gt;Alex: Yes.

00:55:37.660 --> 00:55:38.660
&gt;&gt;Joe: Yes.

00:55:38.660 --> 00:55:41.119
&gt;&gt;Alex: Or we could accept sponsors.

00:55:41.119 --> 00:55:42.119
&gt;&gt;Joe: Right.

00:55:42.119 --> 00:55:45.491
&gt;&gt;Alex: if a band wants to create some play
music for us.

00:55:45.491 --> 00:55:47.009
&gt;&gt;Joe: Did we get something here?

00:55:47.009 --> 00:55:49.059
&gt;&gt;Alex: Alright we have the question now.

00:55:49.059 --> 00:55:50.059
&gt;&gt;Trevor: OK.

00:55:50.059 --> 00:55:51.059
Cool.

00:55:51.059 --> 00:55:55.539
&gt;&gt;Alex: I try to develop a web service whose
data is on a web server.

00:55:55.539 --> 00:55:58.990
And I wonder if local host runs with http
client?

00:55:58.990 --> 00:56:00.240
&gt;&gt;Trevor: OK.

00:56:00.240 --> 00:56:01.240
OK.

00:56:01.240 --> 00:56:02.240
OK.

00:56:02.240 --> 00:56:10.759
So you're, so it's a, you're basically trying
to develop a web, a, a web app that's running

00:56:10.759 --> 00:56:15.539
on the Android device, and then accessing
a local server running on the Android device,

00:56:15.539 --> 00:56:16.539
is that correct?

00:56:16.539 --> 00:56:17.799
&gt;&gt;Male #4: Yeah.

00:56:17.799 --> 00:56:18.809
&gt;&gt;Trevor: OK.

00:56:18.809 --> 00:56:20.829
OK that makes sense.

00:56:20.829 --> 00:56:22.709
So yeah, I think that's actually possible.

00:56:22.709 --> 00:56:28.859
You do have to request a permission to indicate
that you want to run a server.

00:56:28.859 --> 00:56:30.119
I believe.

00:56:30.119 --> 00:56:32.479
And then you just go ahead and open up a local
port.

00:56:32.479 --> 00:56:34.339
There's a lot of other cases where that's
actually useful.

00:56:34.339 --> 00:56:38.089
For example for the longest time that used
to be a recommendation to people trying to

00:56:38.089 --> 00:56:41.299
do something really complicated with streaming
video.

00:56:41.299 --> 00:56:43.079
And you know, DRM and things like that.

00:56:43.079 --> 00:56:48.640
As you know, writing your own local server
to go and buffer to the video stream to the

00:56:48.640 --> 00:56:51.339
local media playback system.

00:56:51.339 --> 00:56:54.789
But, I mean, in your case I think that's entirely
possible.

00:56:54.789 --> 00:56:58.319
That being said, it is a bit heavy weight.

00:56:58.319 --> 00:56:59.920
You have to go and run your web server.

00:56:59.920 --> 00:57:03.269
You're gonna have to run whatever backend
language you're using.

00:57:03.269 --> 00:57:06.369
And that's on top of whatever's going to be
rendered in the web view.

00:57:06.369 --> 00:57:09.660
So I usually don't recommend that people take
that approach.

00:57:09.660 --> 00:57:14.109
If you're really going to do this, I recommend
writing everything in JavaScript if possible.

00:57:14.109 --> 00:57:20.000
That's gonna be a lot friendlier, both in
terms of CPU and memory usage.

00:57:20.000 --> 00:57:25.670
And you can do pretty much, since you're all
interacting locally anyway, there's really

00:57:25.670 --> 00:57:32.519
no reason why you couldn't do everything you're
doing in php inside of JavaScript, and again,

00:57:32.519 --> 00:57:36.189
like I said, a lot of these languages like
php are designed to be run on a server where

00:57:36.189 --> 00:57:40.089
you have gigabytes and gigabytes and gigabytes
of memory available at your disposal.

00:57:40.089 --> 00:57:42.430
And on a mobile device you really don't.

00:57:42.430 --> 00:57:48.180
you're, you might have you know, a gig total
to everything on the system.

00:57:48.180 --> 00:57:52.979
And as an application developer you're limited
to you know, hundreds of megabytes if not

00:57:52.979 --> 00:57:54.450
tens of megabytes.

00:57:54.450 --> 00:58:00.719
So php really, the problem there is going
to be getting php to fit into memory.

00:58:00.719 --> 00:58:01.719
&gt;&gt;Joe :Right.

00:58:01.719 --> 00:58:02.719
That's a good point.

00:58:02.719 --> 00:58:06.630
It strikes me though that, I'm sure that somebody
must have tried to tackle this before.

00:58:06.630 --> 00:58:12.519
So I'm wondering if looking through StackOverflow
or even Google itself would come up maybe

00:58:12.519 --> 00:58:18.049
with some solutions for doing at sort of server
running on a device.

00:58:18.049 --> 00:58:20.190
&gt;&gt;Trevor: I'm sure people have tried.

00:58:20.190 --> 00:58:25.109
But again, the problem is, it's not, it's
not a good architecture is what I'm saying.

00:58:25.109 --> 00:58:26.109
&gt;&gt;Joe: Right.

00:58:26.109 --> 00:58:27.109
I'm not sayingâ€”

00:58:27.109 --> 00:58:28.109
&gt;&gt;Trevor: You're wasting CPU and memory.

00:58:28.109 --> 00:58:29.109
[laughs]

00:58:29.109 --> 00:58:33.400
&gt;&gt;Joe: I'm not saying that running LAMP, the
LAMP stack on an Android device.

00:58:33.400 --> 00:58:40.179
But running something that is tuned specifically
for Android that accomplishes the same net

00:58:40.179 --> 00:58:41.179
effect.

00:58:41.179 --> 00:58:43.799
Somebody may have come out with a light weight
solution.

00:58:43.799 --> 00:58:49.420
Because I agree with you, trying to run the
LAMP stack in Android is gonna be a real challenge.

00:58:49.420 --> 00:58:50.979
&gt;&gt;Trevor: yeah.

00:58:50.979 --> 00:58:55.539
I think the lightest weight solution though
is just to go and load your html file from

00:58:55.539 --> 00:58:56.609
disk.

00:58:56.609 --> 00:59:01.809
And then again, doing everything probably
in JavaScript is going to be your easiest

00:59:01.809 --> 00:59:02.809
option.

00:59:02.809 --> 00:59:05.900
And plus, JavaScript is sort of a cool language.

00:59:05.900 --> 00:59:10.509
Or get to deal with prototypes and all that
fun stuff.

00:59:10.509 --> 00:59:14.089
Definitely pretty different than php but,
it's a fun language to learn.

00:59:14.089 --> 00:59:15.359
&gt;&gt;Joe: Now, OK.

00:59:15.359 --> 00:59:16.359
Thank you.

00:59:16.359 --> 00:59:18.450
&gt;&gt;Trevor: Alright, I think we're out of time.

00:59:18.450 --> 00:59:19.450
So.

00:59:19.450 --> 00:59:20.450
&gt;&gt;Joe: We've run over.

00:59:20.450 --> 00:59:21.450
Sorry about that.

00:59:21.450 --> 00:59:22.450
But it was a good question at the end.

00:59:22.450 --> 00:59:23.499
&gt;&gt;Trevor: It was a very good question.

00:59:23.499 --> 00:59:25.099
I actually liked it.

00:59:25.099 --> 00:59:28.789
&gt;&gt;Joe: Thank you very much for joining us
and we will see you again next week.

00:59:28.789 --> 00:59:30.059
Anything to add?

00:59:30.059 --> 00:59:33.660
&gt;&gt;Trevor: I believe next week's topic is going
to be on censors.

00:59:33.660 --> 00:59:34.699
Don't quote me on that.

00:59:34.699 --> 00:59:36.599
I think it's still tentative.

00:59:36.599 --> 00:59:41.559
Most likely we're gonna have somebody on here
who can talk about censors.

00:59:41.559 --> 00:59:43.369
But stay tuned to our Google + page.

00:59:43.369 --> 00:59:44.369
We'll make a formal announcement.

00:59:44.369 --> 00:59:46.660
Let you know what the topic is for sure.

00:59:46.660 --> 00:59:51.630
As always we broadcast Wednesdays two pm pacific
time.

00:59:51.630 --> 00:59:53.920
Feel free to ask us questions in Moderator
before the show.

00:59:53.920 --> 00:59:56.619
Or join us live and ask us questions via hangout.

00:59:56.619 --> 00:59:57.619
Alright.

00:59:57.619 --> 00:59:58.619
&gt;&gt;Joe: Great.

00:59:58.619 --> 00:59:59.619
Thank you very much for joining us.

00:59:59.619 --> 01:00:00.920
&gt;&gt;Trevor: See you everyone!

