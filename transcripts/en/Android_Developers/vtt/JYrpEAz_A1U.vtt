WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.330
[ROCKET SHIP]

00:00:03.730 --> 00:00:06.050
FLORINA MUNTENESCU: For best
user experience with text,

00:00:06.050 --> 00:00:09.430
Material Designer recommends
using a dynamic type, instead

00:00:09.430 --> 00:00:13.990
of smaller type sizes or
truncating larger size text.

00:00:13.990 --> 00:00:16.690
We made this much easier to
implement with the introduction

00:00:16.690 --> 00:00:19.090
of TextView AutoSizing.

00:00:19.090 --> 00:00:21.670
Let's see how to use
it, how to customize it,

00:00:21.670 --> 00:00:24.860
and what caveats you
need to be aware of.

00:00:24.860 --> 00:00:26.860
With Android O and
Jetpack, text view

00:00:26.860 --> 00:00:30.010
gained a new property,
auto size text type,

00:00:30.010 --> 00:00:32.500
which allows you to
optimize the text size when

00:00:32.500 --> 00:00:34.420
working with dynamic content.

00:00:34.420 --> 00:00:39.160
To enable auto sizing, set
auto size text type to uniform.

00:00:39.160 --> 00:00:43.840
This scales text uniformly on
horizontal and vertical axes,

00:00:43.840 --> 00:00:46.370
ignoring the text
size attribute.

00:00:46.370 --> 00:00:50.830
When using Jetpack, make sure
you use the app namespace.

00:00:50.830 --> 00:00:54.450
Note that you should not use
wrap content for layout width

00:00:54.450 --> 00:00:57.200
or layout height for a
text view set to auto size,

00:00:57.200 --> 00:01:00.480
since, well, it may
produce unexpected results.

00:01:00.480 --> 00:01:05.470
Instead use match
parent or a fixed size.

00:01:05.470 --> 00:01:07.630
Turn off auto
sizing by selecting

00:01:07.630 --> 00:01:09.670
none instead of uniform.

00:01:09.670 --> 00:01:13.540
You can also use auto size
programmatically like this.

00:01:13.540 --> 00:01:15.910
If you want to customize
your text view more,

00:01:15.910 --> 00:01:17.920
we have some extra
attributes for you.

00:01:17.920 --> 00:01:22.910
Auto size min and max, text
size, and step granularity.

00:01:22.910 --> 00:01:25.060
The text view will
scale uniformly

00:01:25.060 --> 00:01:28.150
in the range between the
minimum and the maximum size

00:01:28.150 --> 00:01:30.910
in increments of
step granularity.

00:01:30.910 --> 00:01:32.590
If you don't set
these properties,

00:01:32.590 --> 00:01:34.930
the default values will be used.

00:01:34.930 --> 00:01:39.670
Programmatically these values
can be set via this method.

00:01:39.670 --> 00:01:41.800
To have more control
over the final size,

00:01:41.800 --> 00:01:45.030
if, for example, your app needs
to comply with specific text

00:01:45.030 --> 00:01:49.040
size design guidelines, you
can provide a list of sizes,

00:01:49.040 --> 00:01:52.330
and it will use the
largest one that fits.

00:01:52.330 --> 00:01:54.700
Create an array with the
sizes in your resources,

00:01:54.700 --> 00:01:57.595
and then set the auto size
preset sizes attribute

00:01:57.595 --> 00:01:59.170
in the XML.

00:01:59.170 --> 00:02:01.510
Or do this in code
by providing an array

00:02:01.510 --> 00:02:04.630
of preset sizes and their unit.

00:02:04.630 --> 00:02:06.460
Using dynamic sizes
for text views

00:02:06.460 --> 00:02:09.250
makes your app more interesting
and helps your users

00:02:09.250 --> 00:02:10.690
decode content quickly.

00:02:10.690 --> 00:02:13.070
So start using the
auto size property.

00:02:13.070 --> 00:02:14.710
Fine tune it as you see fit.

00:02:14.710 --> 00:02:17.290
And improve your
user experience.

00:02:17.290 --> 00:02:20.340
[SOARING]

