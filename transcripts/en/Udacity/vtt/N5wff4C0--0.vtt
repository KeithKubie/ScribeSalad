WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:02.250
So in terms of optimization approaches, we

00:00:02.250 --> 00:00:03.800
actually just looked at a couple of different

00:00:03.800 --> 00:00:06.550
ideas. We, we just looked at generate and test, this sort of idea that you can

00:00:06.550 --> 00:00:09.450
just run through all the different values in

00:00:09.450 --> 00:00:10.900
the input space and see which one gives

00:00:10.900 --> 00:00:15.270
the maximum. When is that a good idea and when is that not a good idea?

00:00:15.270 --> 00:00:17.810
&gt;&gt; Well, it's probably a really good idea when you have

00:00:17.810 --> 00:00:21.260
just a small set of things you need to generate and test.

00:00:21.260 --> 00:00:22.686
&gt;&gt; Yeah, it really does require that we

00:00:22.686 --> 00:00:25.612
have a small input space. And it's also particularly

00:00:25.612 --> 00:00:28.739
helpful if it's a complex function, right?

00:00:28.739 --> 00:00:31.339
Because there really isn't any other choice if

00:00:31.339 --> 00:00:35.575
the function has kind of crazy behavior, like in the mod example that I gave.

00:00:35.575 --> 00:00:38.641
Alright, for things like calculus, like, just

00:00:38.641 --> 00:00:41.847
solving for what the optimum is analytically. When,

00:00:41.847 --> 00:00:44.250
when is that a good idea and when is that not such a good idea?

00:00:44.250 --> 00:00:46.060
&gt;&gt; Well, it's a good idea when you have a function where you

00:00:46.060 --> 00:00:49.260
can do that. Where, there, well, first off, it has to have a derivative.

00:00:49.260 --> 00:00:50.900
&gt;&gt; Right, and so, it seems like,

00:00:50.900 --> 00:00:52.870
well, how are you going to write down a function that doesn't

00:00:52.870 --> 00:00:55.080
have a derivative. Well for the thing we're trying to optimize is

00:00:55.080 --> 00:00:58.330
some kind of, it could be, crazy because we defined it to be

00:00:58.330 --> 00:01:00.620
crazy. We can define it with little, you know, like, ifs and

00:01:00.620 --> 00:01:03.610
things like that, to make it only piecewise continuous. Or it

00:01:03.610 --> 00:01:07.520
might be the, the, the thing we're optimizing is some process in

00:01:07.520 --> 00:01:10.360
the real world that we just don't have a functional representation of.

00:01:10.360 --> 00:01:14.790
All we can do is evaluate the fitness value at different inputs.

00:01:14.790 --> 00:01:16.620
&gt;&gt; Right, or if the inputs are discrete.

00:01:16.620 --> 00:01:20.300
&gt;&gt; Right, like in the first example, right. So it might not actually give us

00:01:20.300 --> 00:01:22.820
any feedback if the derivative is, is, if

00:01:22.820 --> 00:01:25.140
we're not moving in a smooth continuous space.

00:01:25.140 --> 00:01:27.430
&gt;&gt; Hey is mod, does mod have a derivative.

00:01:27.430 --> 00:01:28.230
&gt;&gt; Almost everywhere.

00:01:28.230 --> 00:01:29.740
&gt;&gt; Just not everywhere.

00:01:29.740 --> 00:01:33.736
&gt;&gt; Yeah. There's that, you know, because mod kind looks like ner, ner, ner,

00:01:33.736 --> 00:01:35.420
ner. So it has this nice derivative

00:01:35.420 --> 00:01:37.280
everywhere except for at these, at the jumps.

00:01:37.280 --> 00:01:38.750
&gt;&gt; Which happen pretty often.

00:01:38.750 --> 00:01:41.871
&gt;&gt; Yeah, there's a lot of them. But they're, you know, measure zero.

00:01:41.871 --> 00:01:43.576
&gt;&gt; Okay.

00:01:43.576 --> 00:01:45.134
&gt;&gt; Like, if you just picked a random number, it

00:01:45.134 --> 00:01:48.200
wouldn't be at the jump. So it's not only important that

00:01:48.200 --> 00:01:50.240
the function has a derivative, but the derivative, we need

00:01:50.240 --> 00:01:52.710
to be able to solve it, solve that derivative equal to

00:01:52.710 --> 00:01:55.890
zero. Newton's method can be helpful even outside of that

00:01:55.890 --> 00:01:59.310
case, where we have a derivative, and we have time to

00:01:59.310 --> 00:02:02.780
kind of iteratively improve, right? Just keep querying the the

00:02:02.780 --> 00:02:07.560
function. Creeping up on what the optimum turns out to be.

00:02:07.560 --> 00:02:10.800
So, okay, but then what do we do if these, these assumptions don't hold? So

00:02:10.800 --> 00:02:15.010
we have a real, what would that mean? It would mean, what, big input space.

00:02:15.010 --> 00:02:16.482
&gt;&gt; Still have a complex function.

00:02:16.482 --> 00:02:19.453
&gt;&gt; Complex function.

00:02:19.453 --> 00:02:21.750
&gt;&gt; No derivative, or difficult to find derivative.

00:02:21.750 --> 00:02:24.680
&gt;&gt; I knew I had that derivative around here someplace.

00:02:24.680 --> 00:02:27.087
&gt;&gt; [LAUGH] You know it's always the last place you find it.

00:02:27.087 --> 00:02:31.170
&gt;&gt; [LAUGH] Indeed. Yeah. Exactly. And, and

00:02:31.170 --> 00:02:32.800
actually I, I, I should have mentioned

00:02:32.800 --> 00:02:34.240
one more thing about Newton's method. Which

00:02:34.240 --> 00:02:35.872
is that the function has a derivative you

00:02:35.872 --> 00:02:37.870
iteratively improve. And it really wants you to

00:02:37.870 --> 00:02:41.420
have just a single optimum, because even Newton's

00:02:41.420 --> 00:02:45.710
method can get stuck if it's in a situation where you have a, a curve say

00:02:45.710 --> 00:02:48.940
like, like that. because Newton's method is just

00:02:48.940 --> 00:02:51.040
going to hone in on the, the local peak.

00:02:52.090 --> 00:02:54.080
&gt;&gt; So that would be bad if you have lots

00:02:54.080 --> 00:02:57.560
of local maxima in this case, or optima in this case.

00:02:57.560 --> 00:02:58.070
&gt;&gt; Yeah,

00:02:58.070 --> 00:03:05.668
yeah, yeah, yeah. So, so that's, you can list this as well,

00:03:05.668 --> 00:03:12.620
possibly many local optima, right. The, the, the function has a kind of a

00:03:12.620 --> 00:03:15.836
peak. That things around the peak are less than the peak but that

00:03:15.836 --> 00:03:19.388
peak itself may be less than some other peak somewhere else in the space.

00:03:19.388 --> 00:03:20.409
&gt;&gt; Makes sense.

00:03:20.409 --> 00:03:23.333
&gt;&gt; So, as you might expect that our answer to this hard

00:03:23.333 --> 00:03:28.570
question is going to be randomized optimization. The topic of today's lecture.

