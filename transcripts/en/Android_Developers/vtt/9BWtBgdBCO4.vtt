WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.960
[MUSIC PLAYING]

00:00:06.930 --> 00:00:08.650
BENJAMIN BAXTER: Hey, everyone.

00:00:08.650 --> 00:00:12.200
I'm Benjamin Baxter, developer
advocate for Android TV.

00:00:12.200 --> 00:00:15.520
Today we're going to talk about
building a great Android TV

00:00:15.520 --> 00:00:16.720
app.

00:00:16.720 --> 00:00:20.740
So before we dig in the details,
let's talk about the ecosystem.

00:00:20.740 --> 00:00:24.020
We continue to see two
times year over year growth.

00:00:24.020 --> 00:00:27.220
We're investing more in
smart TVs, set-top boxes,

00:00:27.220 --> 00:00:28.560
pay TV operators.

00:00:28.560 --> 00:00:30.570
The ecosystem's
been pretty strong.

00:00:30.570 --> 00:00:32.530
But we're all developers.

00:00:32.530 --> 00:00:37.260
What's get into how can
you make a good TV app.

00:00:37.260 --> 00:00:40.460
So before we talk about what
the innards of your app are,

00:00:40.460 --> 00:00:42.140
we'll just think
about what is the TV.

00:00:42.140 --> 00:00:44.000
Why is it so important?

00:00:44.000 --> 00:00:47.420
We have entire living rooms
or other rooms dedicated

00:00:47.420 --> 00:00:49.980
and focused around a TV.

00:00:49.980 --> 00:00:52.440
It's a pretty key
point for users.

00:00:52.440 --> 00:00:54.020
It's the focus of
an entire room.

00:00:54.020 --> 00:00:56.220
Just think about
that for a second.

00:00:56.220 --> 00:00:57.910
So your app matters.

00:00:57.910 --> 00:01:00.300
The content really matters.

00:01:00.300 --> 00:01:03.650
So if we try to think about what
is the foundation for an app,

00:01:03.650 --> 00:01:05.750
the biggest piece
is your content.

00:01:05.750 --> 00:01:08.516
That's your value
prop to your user.

00:01:08.516 --> 00:01:12.380
If we add onto that,
usability-- how

00:01:12.380 --> 00:01:15.190
do you make your app
easier for users to use?

00:01:15.190 --> 00:01:16.550
Now you have great content.

00:01:16.550 --> 00:01:19.660
How can they discover more of
your content inside your app?

00:01:19.660 --> 00:01:22.250
And if you want to get
that little cherry on top,

00:01:22.250 --> 00:01:23.820
think about the experience.

00:01:23.820 --> 00:01:26.330
How can you layer in
all these extra things

00:01:26.330 --> 00:01:29.450
to build a suite experience
for users no matter

00:01:29.450 --> 00:01:31.090
where they are in your app?

00:01:31.090 --> 00:01:33.290
We'll dive into each
of these concepts.

00:01:33.290 --> 00:01:36.060
And I'll call them out later on.

00:01:36.060 --> 00:01:39.260
But the key takeaway is
they come for your content.

00:01:39.260 --> 00:01:42.294
But they stay for your app.

00:01:42.294 --> 00:01:46.206
So now let's talk about how
do you build a great TV app.

00:01:46.206 --> 00:01:48.890
There's really three
things to think about--

00:01:48.890 --> 00:01:53.620
playing, because content's
important, discovering--

00:01:53.620 --> 00:01:57.430
making sure they can see other
content in your app easily--

00:01:57.430 --> 00:01:58.720
and distributing.

00:01:58.720 --> 00:02:01.060
Making your content
easy to find should

00:02:01.060 --> 00:02:04.880
be as easy as making
your app easy to find.

00:02:04.880 --> 00:02:07.000
So let's talk about the player.

00:02:07.000 --> 00:02:10.139
Playback can make
or break an app.

00:02:10.139 --> 00:02:11.840
Let's take a look
at this review.

00:02:11.840 --> 00:02:12.640
Feel free to read.

00:02:29.606 --> 00:02:34.510
So the key takeaway for me
is that it constantly stalls.

00:02:34.510 --> 00:02:36.910
This app is completely
frustrating.

00:02:36.910 --> 00:02:39.925
They ended up with just a
one star review just because

00:02:39.925 --> 00:02:41.590
of their player.

00:02:41.590 --> 00:02:43.000
And reviews matter.

00:02:43.000 --> 00:02:45.010
There's whole other
talks about Google Play

00:02:45.010 --> 00:02:46.820
and how to improve your reviews.

00:02:46.820 --> 00:02:49.120
But the player was
the key point here

00:02:49.120 --> 00:02:53.050
as to why their app was
not as good as it could be.

00:02:53.050 --> 00:02:57.160
So it's very clear to users
that the playback is important.

00:02:57.160 --> 00:02:59.500
They don't want to have
stutters and stalls.

00:02:59.500 --> 00:03:01.720
They want to be able
to watch the content.

00:03:01.720 --> 00:03:03.520
And even in that
review they talked

00:03:03.520 --> 00:03:05.200
about commercials and ads.

00:03:05.200 --> 00:03:06.920
And they were OK with it.

00:03:06.920 --> 00:03:08.730
They just didn't like
that they stalled.

00:03:08.730 --> 00:03:11.830
So even showing
things that may be

00:03:11.830 --> 00:03:15.190
annoying, such as commercials--
as long as they play fine,

00:03:15.190 --> 00:03:17.800
users are OK with it.

00:03:17.800 --> 00:03:21.750
So the player-- we have many
options to build a good player.

00:03:21.750 --> 00:03:24.030
Media Player is a
great tool, comes out

00:03:24.030 --> 00:03:25.550
of the box in the framework.

00:03:25.550 --> 00:03:26.790
You give it a data source.

00:03:26.790 --> 00:03:28.800
It's able to chug along on play.

00:03:28.800 --> 00:03:31.650
And you can build a great
experience with MediaPlayer.

00:03:31.650 --> 00:03:33.825
If you have more advanced
things you want to do,

00:03:33.825 --> 00:03:36.090
ExoPlayer's another great tool.

00:03:36.090 --> 00:03:39.660
We've worked really hard to
make it highly customizable.

00:03:39.660 --> 00:03:41.370
There's a bunch of extensions.

00:03:41.370 --> 00:03:42.780
If you're using
Leanback, there's

00:03:42.780 --> 00:03:45.510
an extension that hooks in
to the Leanback transport

00:03:45.510 --> 00:03:46.760
controller.

00:03:46.760 --> 00:03:48.510
If you're doing ads,
there's a whole bunch

00:03:48.510 --> 00:03:50.676
of ad stitching support.

00:03:50.676 --> 00:03:52.440
But let's talk more about ads.

00:03:52.440 --> 00:03:54.480
Ads are important.

00:03:54.480 --> 00:03:57.360
Your app's going to make
money from showing ads.

00:03:57.360 --> 00:04:01.710
So in a sense, ads are just as
important as the content shown

00:04:01.710 --> 00:04:03.330
and displayed to the user.

00:04:03.330 --> 00:04:04.590
So focus on ads.

00:04:04.590 --> 00:04:06.720
Make sure that ad
stitching works.

00:04:06.720 --> 00:04:09.780
Whether you should do a
server side or client side,

00:04:09.780 --> 00:04:14.530
these are real considerations
you should make for your app.

00:04:14.530 --> 00:04:17.660
So there's many
options for players--

00:04:17.660 --> 00:04:21.440
MediaPlayer, Exoplayer,
build a custom player.

00:04:21.440 --> 00:04:24.140
But having a player
is a good start.

00:04:24.140 --> 00:04:25.940
But there's things
you can layer in.

00:04:25.940 --> 00:04:27.440
That top part of the pyramid--

00:04:27.440 --> 00:04:29.570
the experience--
there's things you

00:04:29.570 --> 00:04:31.790
can do to build an
experience around the player

00:04:31.790 --> 00:04:33.810
to make it even better.

00:04:33.810 --> 00:04:36.140
So we talked about
this at I/O this year--

00:04:36.140 --> 00:04:37.874
playback controls.

00:04:37.874 --> 00:04:39.290
Everyone's phones
should be ready.

00:04:39.290 --> 00:04:40.206
Here we go.

00:04:40.206 --> 00:04:40.900
OK.

00:04:40.900 --> 00:04:41.775
Google.

00:04:41.775 --> 00:04:43.430
Skip five minutes.

00:04:43.430 --> 00:04:43.930
OK.

00:04:43.930 --> 00:04:44.510
Google.

00:04:44.510 --> 00:04:45.690
Pause.

00:04:45.690 --> 00:04:46.190
OK.

00:04:46.190 --> 00:04:46.520
Google.

00:04:46.520 --> 00:04:47.020
Play.

00:04:47.020 --> 00:04:49.490
These types of
transport controls

00:04:49.490 --> 00:04:52.180
can be commands
through the assistant.

00:04:52.180 --> 00:04:54.170
Adding this extra
little feature--

00:04:54.170 --> 00:04:56.150
this little nice
nugget of delight--

00:04:56.150 --> 00:05:00.080
helps build that
experience for your app.

00:05:00.080 --> 00:05:01.970
This all works
with MediaSession.

00:05:01.970 --> 00:05:04.150
So if you implement
MediaSession Callback,

00:05:04.150 --> 00:05:07.230
you get all of these
features for free.

00:05:07.230 --> 00:05:09.380
And since I talked
about this at I/O

00:05:09.380 --> 00:05:11.420
and there's been other
talks about MediaSession

00:05:11.420 --> 00:05:14.917
from other people, I'm going
to just jam through this fast.

00:05:14.917 --> 00:05:15.500
Pay attention.

00:05:15.500 --> 00:05:16.921
Here we go.

00:05:16.921 --> 00:05:17.420
Boom.

00:05:17.420 --> 00:05:20.000
Beautiful-- 6
wonderful methods--

00:05:20.000 --> 00:05:24.620
pause, play, stop, seek,
next, and previous.

00:05:24.620 --> 00:05:27.190
But in reality
like that's a lot.

00:05:27.190 --> 00:05:30.482
It's a lot to think about--
all these different cases.

00:05:30.482 --> 00:05:34.990
But if you use Exoplayer,
this can be done for you.

00:05:34.990 --> 00:05:36.530
So they've made
an extension that

00:05:36.530 --> 00:05:38.640
manages MediaSession for you.

00:05:38.640 --> 00:05:42.770
All you have to do is connect
the player to the MediaSession.

00:05:42.770 --> 00:05:46.000
And it all works for
you out of the box.

00:05:46.000 --> 00:05:49.110
Make an immediate session
is also pretty simple.

00:05:49.110 --> 00:05:51.070
And there's tons
of documentation

00:05:51.070 --> 00:05:52.790
that talks about MediaSession.

00:05:52.790 --> 00:05:55.412
I'm not going to go
too deep into it.

00:05:55.412 --> 00:05:57.620
But you just need to make
sure that you set the media

00:05:57.620 --> 00:05:59.180
session to be active.

00:05:59.180 --> 00:06:00.800
Set the controller.

00:06:00.800 --> 00:06:02.390
Set anything else in the set.

00:06:02.390 --> 00:06:04.370
Set the current state.

00:06:04.370 --> 00:06:06.230
Are you currently playing?

00:06:06.230 --> 00:06:07.800
What position are you in?

00:06:07.800 --> 00:06:12.320
Set up your MediaSession to
be what you need it to be.

00:06:12.320 --> 00:06:15.340
And once you have a MediaSession
and you have an ExoPlayer

00:06:15.340 --> 00:06:17.870
instance, connect them.

00:06:17.870 --> 00:06:21.220
So there is an extension
library MediaSession Connector

00:06:21.220 --> 00:06:22.280
for Exoplayer.

00:06:22.280 --> 00:06:25.720
Here you just add in
MediaSession as a constructor

00:06:25.720 --> 00:06:28.900
parameter to the
MediaSession Connector.

00:06:28.900 --> 00:06:31.820
And then you set the player
to your Exoplayer instance.

00:06:31.820 --> 00:06:34.870
This MediaSession
Connector understands

00:06:34.870 --> 00:06:38.350
how to set up the callback, all
the edge cases around playing

00:06:38.350 --> 00:06:39.560
and seeking.

00:06:39.560 --> 00:06:42.350
Now you don't want to go
past the end of the video.

00:06:42.350 --> 00:06:45.010
You don't want to rewind
before the video starts.

00:06:45.010 --> 00:06:48.230
It handles all those
edge cases for you.

00:06:48.230 --> 00:06:52.810
In this example, we are saying
set player, player then null.

00:06:52.810 --> 00:06:55.870
You can set a custom
playback prepare.

00:06:55.870 --> 00:06:58.340
There's other customizations
you can do, as well.

00:06:58.340 --> 00:07:01.870
So if you're a music app and
you have a custom playlist

00:07:01.870 --> 00:07:04.810
and you want to set a different
order for how the songs go

00:07:04.810 --> 00:07:08.110
through the queue, you can set
a custom queueing mechanism

00:07:08.110 --> 00:07:10.126
on the extension.

00:07:10.126 --> 00:07:11.240
That's it.

00:07:11.240 --> 00:07:15.120
Three wonderful lines of code
and assistance already taken

00:07:15.120 --> 00:07:16.550
care for you.

00:07:16.550 --> 00:07:21.680
All the default behavior
you expect, done.

00:07:21.680 --> 00:07:24.030
So having a great
player is great.

00:07:24.030 --> 00:07:27.570
That was just one example of
how to layer in that experience

00:07:27.570 --> 00:07:30.690
to make a player even better.

00:07:30.690 --> 00:07:35.020
We're going to skip ahead
to discovering content.

00:07:35.020 --> 00:07:36.710
So the whole point
of discovering

00:07:36.710 --> 00:07:38.910
is you want users
to stay in your app.

00:07:38.910 --> 00:07:41.900
And you want them to discover
and watch content faster.

00:07:41.900 --> 00:07:44.510
So let's look at this review.

00:07:44.510 --> 00:07:45.860
I love the first sentence.

00:07:45.860 --> 00:07:48.350
They "love love love"-- so
many loves-- "this app."

00:08:06.665 --> 00:08:10.820
So the key takeaway here is
it was a five star review.

00:08:10.820 --> 00:08:13.160
And they loved all of
the content was there.

00:08:13.160 --> 00:08:15.170
Easy to find.

00:08:15.170 --> 00:08:17.570
They can do whatever they
need to do inside that app

00:08:17.570 --> 00:08:19.490
and watch what
they want to watch.

00:08:19.490 --> 00:08:23.840
Funny story, that's the same app
that got the one star review.

00:08:23.840 --> 00:08:25.850
So even though they
had a bad player,

00:08:25.850 --> 00:08:27.320
they worked on discoverability.

00:08:27.320 --> 00:08:31.670
And they're still able to have
a good review in the Play Store.

00:08:31.670 --> 00:08:34.659
So how can we make
content discoverable?

00:08:34.659 --> 00:08:36.250
Everything kind of
happens in threes.

00:08:36.250 --> 00:08:37.700
And that's like a rule comedy.

00:08:37.700 --> 00:08:40.299
It's a really good rule in life.

00:08:40.299 --> 00:08:43.480
In this case, discoverability
also happens in threes.

00:08:43.480 --> 00:08:47.350
You can work on in-app browsing,
search with the assistant,

00:08:47.350 --> 00:08:49.410
and the home screen.

00:08:49.410 --> 00:08:51.680
We'll start with
in-app browsing.

00:08:51.680 --> 00:08:54.080
There's a beautiful
library, LeanBack.

00:08:54.080 --> 00:08:57.240
If you've done TV development,
you're very familiar with it.

00:08:57.240 --> 00:09:00.740
It's a templated UI system,
free to just plug-in data,

00:09:00.740 --> 00:09:02.645
and it works on
building the UI for you.

00:09:02.645 --> 00:09:05.270
So you don't have to worry about
all the focus handling and all

00:09:05.270 --> 00:09:05.930
the user input.

00:09:05.930 --> 00:09:09.350
You can just apply, hey,
here's the content we have,

00:09:09.350 --> 00:09:11.460
and it will show for you.

00:09:11.460 --> 00:09:14.030
It's not just how to
browse content, though.

00:09:14.030 --> 00:09:18.410
LeanBack also works
and shows details.

00:09:18.410 --> 00:09:21.250
So there's a whole bunch of
information about content.

00:09:21.250 --> 00:09:25.480
You have duration, content
rating, the Rotten Tomatoes

00:09:25.480 --> 00:09:27.275
score, the album, artist.

00:09:27.275 --> 00:09:29.770
And I can keep going on
for the rest of the 30

00:09:29.770 --> 00:09:32.020
minutes of this talk but
I think you get the point.

00:09:32.020 --> 00:09:34.430
There's tons of information.

00:09:34.430 --> 00:09:39.730
The cool thing about it is you
can show it using LeanBack,

00:09:39.730 --> 00:09:41.980
but you can also show
it multiple other places

00:09:41.980 --> 00:09:44.120
on the home screen and search.

00:09:44.120 --> 00:09:46.900
And by showing all this
information sooner,

00:09:46.900 --> 00:09:50.210
it lets users make these
micro decisions much faster.

00:09:50.210 --> 00:09:53.080
And they don't have to go in and
out, in and out to figure out

00:09:53.080 --> 00:09:54.370
what they want to watch.

00:09:54.370 --> 00:09:57.190
So make your users' lives easier
by showing them all this data

00:09:57.190 --> 00:09:59.230
sooner.

00:09:59.230 --> 00:10:02.370
Let's look at another
example, search.

00:10:02.370 --> 00:10:04.490
Again, we talked
about this at I/O.

00:10:04.490 --> 00:10:06.597
And there's tons of
documentation on this.

00:10:06.597 --> 00:10:08.930
So I want to kind of breeze
through some of these things

00:10:08.930 --> 00:10:11.060
quickly.

00:10:11.060 --> 00:10:14.614
Search is all supplied
with the content provider.

00:10:14.614 --> 00:10:17.250
Now, content providers
are pretty simple.

00:10:17.250 --> 00:10:18.542
They return a cursor.

00:10:18.542 --> 00:10:20.000
You're able to do
whatever you want

00:10:20.000 --> 00:10:22.650
in the background with
this content provider.

00:10:22.650 --> 00:10:26.150
So, boom, magic
content provider.

00:10:26.150 --> 00:10:30.050
You perform a search
and it returns results.

00:10:30.050 --> 00:10:32.200
If this did a network
call, maybe you

00:10:32.200 --> 00:10:33.460
have a bunch of POJOs.

00:10:33.460 --> 00:10:37.250
If this was a database call,
you're going to have a cursor.

00:10:37.250 --> 00:10:38.380
And that's fine.

00:10:38.380 --> 00:10:40.390
The trick for the
search provider

00:10:40.390 --> 00:10:44.380
is that it needs to return
results that match the Search

00:10:44.380 --> 00:10:46.120
Manager's criteria.

00:10:46.120 --> 00:10:49.150
So Search Manager
is just a strict way

00:10:49.150 --> 00:10:51.790
of saying, hey, this cursor
has a bunch of columns

00:10:51.790 --> 00:10:53.050
with these names.

00:10:53.050 --> 00:10:56.230
And then the Assistant's able
to pull in from that cursor

00:10:56.230 --> 00:10:59.080
and say, oh, here's the
title, here's the duration,

00:10:59.080 --> 00:11:02.610
and is able to figure
out what content's where.

00:11:02.610 --> 00:11:05.430
Super simple to do
with Matrix Cursor.

00:11:05.430 --> 00:11:07.860
And we'll dive into this
a little bit closer.

00:11:07.860 --> 00:11:11.820
You just need to take each of
your results, add them as a row

00:11:11.820 --> 00:11:15.500
into the Matrix Cursor, and
then return the Matrix Cursor.

00:11:15.500 --> 00:11:19.330
The Matrix Cursor is really
just like a mock cursor.

00:11:19.330 --> 00:11:22.290
It's a 2D array, essentially,
under the covers.

00:11:22.290 --> 00:11:24.320
So if you don't have
to go about how do I

00:11:24.320 --> 00:11:27.330
store all these in a database
with these column names,

00:11:27.330 --> 00:11:32.450
you can just mock it out at
the very end of your search.

00:11:32.450 --> 00:11:33.480
So, mapping.

00:11:33.480 --> 00:11:36.860
This is where the
hard work happens.

00:11:36.860 --> 00:11:40.110
You have a matrix cursor and
it takes in a query projection.

00:11:40.110 --> 00:11:42.490
This query projection
is going to have

00:11:42.490 --> 00:11:45.670
all of the columns defined
that match the Search Manager.

00:11:45.670 --> 00:11:49.030
So here we have Suggest
Column Text 1, typically

00:11:49.030 --> 00:11:53.300
is the title of the content,
an action, a data ID.

00:11:53.300 --> 00:11:57.460
The ID is what's unique to
your content inside the app.

00:11:57.460 --> 00:12:01.960
And then when you go to convert
your content into this row,

00:12:01.960 --> 00:12:04.720
you just supply an array,
an array of objects--

00:12:04.720 --> 00:12:06.600
here's the ID, here's the name--

00:12:06.600 --> 00:12:09.610
and they correspond to the order
in which that query projection

00:12:09.610 --> 00:12:10.580
was.

00:12:10.580 --> 00:12:13.180
So the ID, the
title, the action,

00:12:13.180 --> 00:12:16.480
et cetera, all the fields
you have you can return back.

00:12:16.480 --> 00:12:19.510
So with Search Manager and with
searching with the Assistant,

00:12:19.510 --> 00:12:21.230
you don't have to do
all this extra work.

00:12:21.230 --> 00:12:23.650
You can use Matrix Cursor
to make that return

00:12:23.650 --> 00:12:26.820
result much faster.

00:12:26.820 --> 00:12:28.920
Home screen.

00:12:28.920 --> 00:12:31.740
We've talked about the Home
Screen for the past two I/Os.

00:12:31.740 --> 00:12:33.840
So I'm not going to
talk about the old.

00:12:33.840 --> 00:12:35.370
I'm just going to
briefly cover it.

00:12:35.370 --> 00:12:37.620
And then we'll talk about
some of the new stuff that's

00:12:37.620 --> 00:12:38.820
happening.

00:12:38.820 --> 00:12:42.270
The Home Screen has
three key parts.

00:12:42.270 --> 00:12:44.260
Your app can have a channel.

00:12:44.260 --> 00:12:46.865
Your app can interact
with the Play Next row.

00:12:46.865 --> 00:12:50.310
And for video apps, you
can have Video Previews.

00:12:50.310 --> 00:12:54.390
We've seen up to 2x
increase in engagement

00:12:54.390 --> 00:12:56.130
when apps have video previews.

00:12:56.130 --> 00:12:57.180
They look wonderful.

00:12:57.180 --> 00:12:59.940
They can be as simple
as a trailer for a movie

00:12:59.940 --> 00:13:02.287
or a recap for a TV show.

00:13:02.287 --> 00:13:04.620
But they take a little bit
more work because it probably

00:13:04.620 --> 00:13:07.950
requires a content team to
make that content for you.

00:13:07.950 --> 00:13:11.220
I'm not going to talk about
Play Next or Video Previews

00:13:11.220 --> 00:13:15.130
since we talked about before,
but let's dive into channels.

00:13:15.130 --> 00:13:18.230
So just to recap,
building a channel

00:13:18.230 --> 00:13:21.910
is just inserting into
a content provider.

00:13:21.910 --> 00:13:23.980
We have a channel.

00:13:23.980 --> 00:13:26.030
We get a builder.

00:13:26.030 --> 00:13:27.950
We set the type to Type Preview.

00:13:27.950 --> 00:13:31.430
We give it a name, a
description, a deep link

00:13:31.430 --> 00:13:33.230
so when they open
up your channel

00:13:33.230 --> 00:13:35.660
it's able to open into your app.

00:13:35.660 --> 00:13:37.790
And you set an
internal provider ID.

00:13:37.790 --> 00:13:41.090
This is an ID that your
app wants to keep track of

00:13:41.090 --> 00:13:43.730
and knows about.

00:13:43.730 --> 00:13:47.480
Then, you just get a content
resolver, you call Insert,

00:13:47.480 --> 00:13:52.150
you give it content values,
and you're good to go.

00:13:52.150 --> 00:13:55.657
Once you've stored your channel,
you parse out a channel ID,

00:13:55.657 --> 00:13:57.990
you do some stuff-- maybe you
want to keep track of that

00:13:57.990 --> 00:14:00.840
channel ID for synchronization--

00:14:00.840 --> 00:14:02.520
and then you set a logo.

00:14:02.520 --> 00:14:06.090
So channel really consists
of a name, a description,

00:14:06.090 --> 00:14:09.540
a deep link, an internal
provider ID, and a logo.

00:14:09.540 --> 00:14:13.560
Those are really the
key pieces of a channel.

00:14:13.560 --> 00:14:15.090
So what just happened?

00:14:15.090 --> 00:14:16.350
We created a channel.

00:14:16.350 --> 00:14:17.610
We inserted it.

00:14:17.610 --> 00:14:18.810
And we stored a logo.

00:14:18.810 --> 00:14:21.080
So we really did two things
with the Home Screen,

00:14:21.080 --> 00:14:24.700
insert the channel,
store the logo.

00:14:24.700 --> 00:14:29.790
So as of AndroidX 1.0.0,
we have a new API.

00:14:29.790 --> 00:14:33.530
This API looks very
similar, small differences.

00:14:33.530 --> 00:14:36.320
We have a Preview
Channel Helper class.

00:14:36.320 --> 00:14:40.880
It takes in a context and then
it does a bunch of lookups

00:14:40.880 --> 00:14:43.160
to get the Content
Resolver for you.

00:14:43.160 --> 00:14:46.490
So you don't have to do
context.contentresolver.insert.

00:14:46.490 --> 00:14:48.920
It does all this work for you.

00:14:48.920 --> 00:14:50.429
It makes a channel.

00:14:50.429 --> 00:14:51.470
So you have your builder.

00:14:51.470 --> 00:14:54.770
You set the name, the
description, the app link,

00:14:54.770 --> 00:14:56.600
and the intent provider URL.

00:14:56.600 --> 00:14:59.600
And you think you
should set the type.

00:14:59.600 --> 00:15:03.300
But this class knows that
it is a preview channel.

00:15:03.300 --> 00:15:05.680
So it already knows the
type is type preview.

00:15:05.680 --> 00:15:07.370
And you don't have
to set the type.

00:15:07.370 --> 00:15:11.280
Instead, you can set the logo.

00:15:11.280 --> 00:15:14.280
Now all this stuff is
contained in one unit.

00:15:14.280 --> 00:15:17.270
And you can just call the
helper.publishedchannel,

00:15:17.270 --> 00:15:21.940
give it the channel, it figures
out all of the work for you.

00:15:21.940 --> 00:15:24.260
And you get the channel ID back.

00:15:24.260 --> 00:15:26.390
So what it does
under the covers,

00:15:26.390 --> 00:15:28.760
it inserts the channel
into the provider

00:15:28.760 --> 00:15:31.190
and then it goes to add a logo.

00:15:31.190 --> 00:15:34.400
If the channel isn't able
to be inserted-- maybe

00:15:34.400 --> 00:15:36.360
you have bad data
and you're hitting

00:15:36.360 --> 00:15:40.160
an error or something-- it'll
return an error back to you.

00:15:40.160 --> 00:15:42.110
If it is able to
insert the channel,

00:15:42.110 --> 00:15:44.420
it tries to store the
logo on that channel.

00:15:44.420 --> 00:15:49.130
If the logo cannot be persisted,
it throws an exception,

00:15:49.130 --> 00:15:52.490
wraps it all up, unwinds,
adding the channel so that you

00:15:52.490 --> 00:15:55.190
don't end up with half a
channel on the home screen.

00:15:55.190 --> 00:15:58.200
It essentially treats
everything as an atomic unit.

00:15:58.200 --> 00:16:00.630
Pretty convenient.

00:16:00.630 --> 00:16:02.640
It doesn't just
published channels.

00:16:02.640 --> 00:16:05.140
It does everything CRUD does.

00:16:05.140 --> 00:16:07.830
So we've already talked
about publishing a channel.

00:16:07.830 --> 00:16:09.330
You can read all the channels.

00:16:09.330 --> 00:16:12.370
You can even get
individual channels.

00:16:12.370 --> 00:16:15.160
You're able to update a channel
and you can delete them.

00:16:15.160 --> 00:16:17.100
And I'm only talking
about channels.

00:16:17.100 --> 00:16:19.974
But all this also happens
for preview programs.

00:16:19.974 --> 00:16:22.515
And there's also support for
the Play Next row in this class.

00:16:25.140 --> 00:16:27.470
But there's two
options to do it.

00:16:27.470 --> 00:16:28.940
Which one's better?

00:16:28.940 --> 00:16:31.880
You could say I just want
to use content providers.

00:16:31.880 --> 00:16:34.250
I'm able to fine
tune the performance.

00:16:34.250 --> 00:16:38.270
I can do batch inserts,
bulk operations.

00:16:38.270 --> 00:16:39.950
I can get lower level control.

00:16:39.950 --> 00:16:43.040
I don't need an entire program
with all that metadata.

00:16:43.040 --> 00:16:45.600
Maybe I just want the
title and duration.

00:16:45.600 --> 00:16:48.290
And now I can slow down
that query projection

00:16:48.290 --> 00:16:50.210
and have faster results.

00:16:50.210 --> 00:16:52.070
And, it's based out
of the framework.

00:16:52.070 --> 00:16:55.010
You don't have to do all
this extra work to access it.

00:16:55.010 --> 00:16:58.050
You get it out of the
box from the framework.

00:16:58.050 --> 00:17:00.410
But, if you want
to use AndroidX,

00:17:00.410 --> 00:17:01.653
you get more convenience.

00:17:01.653 --> 00:17:04.069
You don't have to worry about
all the nuances of a content

00:17:04.069 --> 00:17:05.060
provider.

00:17:05.060 --> 00:17:07.760
It's a one-liner, for
all intents and purposes.

00:17:07.760 --> 00:17:09.710
And you get all the
fun benefits of having

00:17:09.710 --> 00:17:12.951
the AndroidX in your app.

00:17:12.951 --> 00:17:16.109
So discovering content is great.

00:17:16.109 --> 00:17:19.384
There are three ways to
go about it, in your app,

00:17:19.384 --> 00:17:21.550
searching with the Assistant,
and on the Home Screen

00:17:21.550 --> 00:17:23.200
with channels.

00:17:23.200 --> 00:17:28.015
But how do you make your app
discoverable, the third thing?

00:17:28.015 --> 00:17:31.420
The App Store on TV
is a bit different.

00:17:31.420 --> 00:17:33.450
It filters out a
bunch of content.

00:17:33.450 --> 00:17:36.900
It wants to make sure only
apps that are designed for TV

00:17:36.900 --> 00:17:37.810
will be shown.

00:17:37.810 --> 00:17:39.900
So when the user opens
up the App Store,

00:17:39.900 --> 00:17:42.930
they're only looking at apps
that can be played on TV

00:17:42.930 --> 00:17:45.130
or can be installed on TV.

00:17:45.130 --> 00:17:47.230
Trying to navigate the
Play Store make and make

00:17:47.230 --> 00:17:49.032
your app stick up can be hard.

00:17:49.032 --> 00:17:50.490
But there's three
simple things you

00:17:50.490 --> 00:17:54.340
can do to have your app
appear on the Play Store.

00:17:54.340 --> 00:17:56.710
First thing is to
declare features.

00:17:56.710 --> 00:17:59.290
And that slide says,
even if you don't use it.

00:17:59.290 --> 00:18:00.820
There's a giant asterisk.

00:18:00.820 --> 00:18:03.640
Don't start declaring like
Bluetooth just for fun,

00:18:03.640 --> 00:18:05.290
or location just for fun.

00:18:05.290 --> 00:18:08.350
There's two features
that really matter.

00:18:08.350 --> 00:18:11.230
So the first one is touchscreen.

00:18:11.230 --> 00:18:12.730
You want to declare
that as false.

00:18:12.730 --> 00:18:14.550
It's not required to
have a touch screen.

00:18:14.550 --> 00:18:15.840
This isn't a phone.

00:18:15.840 --> 00:18:18.840
This isn't a TV from
way back in the day.

00:18:18.840 --> 00:18:20.340
These are smart TVs.

00:18:20.340 --> 00:18:22.890
You don't need
touchscreen support.

00:18:22.890 --> 00:18:26.260
The second thing is to
declare LeanBack is true.

00:18:26.260 --> 00:18:28.680
This tells the Play
Store, hey, this app

00:18:28.680 --> 00:18:33.870
is designed and ready
to be deployed on a TV.

00:18:33.870 --> 00:18:37.110
But if you have all of your
code in a single code base

00:18:37.110 --> 00:18:39.120
and you're making
a single APK that

00:18:39.120 --> 00:18:43.720
deploys on both mobile and
TV, set LeanBack to false.

00:18:43.720 --> 00:18:45.280
This still tells
the Play Store, hey,

00:18:45.280 --> 00:18:51.010
this APK is compatible
on both mobile and TV.

00:18:51.010 --> 00:18:52.860
The second thing
you should do is try

00:18:52.860 --> 00:18:54.690
to be visible in the launcher.

00:18:54.690 --> 00:18:56.860
Now if you're a headless
app like a screen

00:18:56.860 --> 00:19:00.330
saver or a keyboard, just
go away for two minutes

00:19:00.330 --> 00:19:03.140
and I'll see you then.

00:19:03.140 --> 00:19:05.190
So to make your app
visible on the Home Screen,

00:19:05.190 --> 00:19:06.900
you need to supply a banner.

00:19:06.900 --> 00:19:09.300
You can define a
banner in Application,

00:19:09.300 --> 00:19:11.260
or you can set it
in your Activity.

00:19:11.260 --> 00:19:13.470
The launcher will go in
through the manifest,

00:19:13.470 --> 00:19:15.060
find this resource,
and this is what

00:19:15.060 --> 00:19:19.540
it uses to show your
icon on the launcher.

00:19:19.540 --> 00:19:22.380
But once the user
selects your icon,

00:19:22.380 --> 00:19:23.700
it needs to launch something.

00:19:23.700 --> 00:19:26.160
So the launcher fires an intent.

00:19:26.160 --> 00:19:29.465
And you need to have an activity
that accepts this intent.

00:19:29.465 --> 00:19:30.840
It's called the
LeanBack Launcher

00:19:30.840 --> 00:19:34.640
Intent, really cleverly
named, does exactly that.

00:19:34.640 --> 00:19:36.660
So from the launcher,
it will trigger off

00:19:36.660 --> 00:19:39.390
your LeanBack experience.

00:19:39.390 --> 00:19:42.810
So there's three things
you need to have.

00:19:42.810 --> 00:19:45.960
One, declare the two
features so your app will

00:19:45.960 --> 00:19:48.300
be found on the Play Store.

00:19:48.300 --> 00:19:52.240
Two, have a banner so your
app shows up on the launcher.

00:19:52.240 --> 00:19:55.290
And three, have the
LeanBack intent so

00:19:55.290 --> 00:20:00.606
that your app launches when the
user wants to enter your app.

00:20:00.606 --> 00:20:01.319
And that's it.

00:20:01.319 --> 00:20:02.860
You're ready to go
in the Play Store.

00:20:02.860 --> 00:20:05.120
This talk is done.

00:20:05.120 --> 00:20:06.410
All right.

00:20:06.410 --> 00:20:09.640
But in a sense, that's kind
of the minimal viable product.

00:20:09.640 --> 00:20:11.680
You're able to have
a strong player.

00:20:11.680 --> 00:20:14.640
You're able to have
easy to find content.

00:20:14.640 --> 00:20:17.850
And you're able to
distribute on the Play Store.

00:20:17.850 --> 00:20:19.330
That's just a good app.

00:20:19.330 --> 00:20:21.570
You know, how do
you make it great?

00:20:21.570 --> 00:20:24.580
To start with this, you
should look at your users.

00:20:24.580 --> 00:20:28.350
Imagine all of your
users on a spectrum.

00:20:28.350 --> 00:20:30.360
They start from one
side of the spectrum.

00:20:30.360 --> 00:20:32.460
Hey, I bought a TV
because it's cool.

00:20:32.460 --> 00:20:34.020
Everyone's doing it.

00:20:34.020 --> 00:20:35.220
I want to be cool.

00:20:35.220 --> 00:20:38.100
Sits in my closet,
but I have a TV.

00:20:38.100 --> 00:20:41.670
The next spot of the
spectrum, I love watching TV.

00:20:41.670 --> 00:20:43.500
Every week, I watch this show.

00:20:43.500 --> 00:20:45.180
This is great.

00:20:45.180 --> 00:20:47.370
You go a bit further
down, oh man, I

00:20:47.370 --> 00:20:49.840
love "How to Get
Away with Murder."

00:20:49.840 --> 00:20:51.200
Viola Davis is awesome.

00:20:51.200 --> 00:20:52.950
Hey, maybe I should
watch "Suicide Squad."

00:20:52.950 --> 00:20:54.760
She's also in that.

00:20:54.760 --> 00:20:57.900
Then the far extreme,
you know, maybe this--

00:20:57.900 --> 00:20:59.730
a better example is for sports.

00:20:59.730 --> 00:21:01.950
Hey, I'm watching
the sports ballgame.

00:21:01.950 --> 00:21:03.360
Here's a fantasy team.

00:21:03.360 --> 00:21:05.300
Here's a jersey of
the player I like.

00:21:05.300 --> 00:21:09.550
And I just want to keep
going and going into it.

00:21:09.550 --> 00:21:13.270
This side on that
side, the left,

00:21:13.270 --> 00:21:15.250
is what's called
the lean back user.

00:21:15.250 --> 00:21:17.930
They're just going to be
sitting back watching TV.

00:21:17.930 --> 00:21:19.570
That's all they want to do.

00:21:19.570 --> 00:21:21.310
The side highlighted,
this is what

00:21:21.310 --> 00:21:22.930
you can call the lean in user.

00:21:22.930 --> 00:21:24.680
They're sitting on the
edge of their seat.

00:21:24.680 --> 00:21:26.434
Oh man, this is awesome.

00:21:26.434 --> 00:21:27.850
Who are these
people in this show?

00:21:27.850 --> 00:21:30.790
And they're going
deeper into the content.

00:21:30.790 --> 00:21:32.680
Everything we've talked
about up till now--

00:21:32.680 --> 00:21:35.890
having a good player,
making your app usable--

00:21:35.890 --> 00:21:41.560
this is more for the lean back,
the right side of the screen.

00:21:41.560 --> 00:21:44.110
But if we think
about it, how can we

00:21:44.110 --> 00:21:46.330
tap into that lean in user?

00:21:46.330 --> 00:21:49.180
Here we have another living
room, a very beautiful living

00:21:49.180 --> 00:21:49.880
room.

00:21:49.880 --> 00:21:52.590
I wish it was mine but it's not.

00:21:52.590 --> 00:21:57.490
But if we look closer, you'll
see a camera, microphone,

00:21:57.490 --> 00:21:59.150
tablet, phone.

00:21:59.150 --> 00:22:01.090
And then as you start
to think about it,

00:22:01.090 --> 00:22:04.360
the TV is the centerpiece
of a living room.

00:22:04.360 --> 00:22:06.800
There are so many
devices around.

00:22:06.800 --> 00:22:08.980
You know, you don't have
to just do stuff on TV.

00:22:08.980 --> 00:22:12.030
You can tap into everything
around the living room.

00:22:12.030 --> 00:22:13.470
That's why I love Android TV.

00:22:13.470 --> 00:22:17.450
It's like the focal point of
everything that's happening.

00:22:17.450 --> 00:22:21.310
So, in concept-- again, we're
going to do this in threes

00:22:21.310 --> 00:22:22.660
because threes are great--

00:22:22.660 --> 00:22:26.290
in concept, if we want to tap
into these other surfaces,

00:22:26.290 --> 00:22:28.300
what should we look to do?

00:22:28.300 --> 00:22:30.690
First step is just
controlling media.

00:22:30.690 --> 00:22:35.240
The playback controls we talked
about earlier is a great step.

00:22:35.240 --> 00:22:37.660
It's going a little
bit farther advanced.

00:22:37.660 --> 00:22:40.690
You're delivering an
experience around your app.

00:22:40.690 --> 00:22:44.350
Maybe, for another option,
is to have notifications.

00:22:44.350 --> 00:22:46.840
Hey, the big game's about
to start in five minutes.

00:22:46.840 --> 00:22:49.940
Do you want to watch on your TV?

00:22:49.940 --> 00:22:53.800
Second pillar is more about
going deeper into content.

00:22:53.800 --> 00:22:55.920
Who is the cast and crew?

00:22:55.920 --> 00:22:59.110
What are the behind the
scenes of this production?

00:22:59.110 --> 00:23:01.320
Are there extra
sponsored content

00:23:01.320 --> 00:23:04.460
that I want to know more about?

00:23:04.460 --> 00:23:07.650
And then the third pillar
is about reducing friction.

00:23:07.650 --> 00:23:09.720
How do I install your app?

00:23:09.720 --> 00:23:11.140
OK, it's installed.

00:23:11.140 --> 00:23:13.230
How do I sign into your app?

00:23:13.230 --> 00:23:14.760
I want to make a payment.

00:23:14.760 --> 00:23:16.290
How do I authenticate
that payment

00:23:16.290 --> 00:23:20.060
in a secure way outside the TV?

00:23:20.060 --> 00:23:22.320
So, let's look at an example.

00:23:22.320 --> 00:23:24.830
You may or may not know
it, but everyone here

00:23:24.830 --> 00:23:26.960
who has set up an
Android TV has already

00:23:26.960 --> 00:23:30.530
done that third step, that
frictionless interaction.

00:23:30.530 --> 00:23:33.920
Android TV setup actually
does this for you.

00:23:33.920 --> 00:23:36.350
During the flow,
they say, hey, do you

00:23:36.350 --> 00:23:38.020
want to set up on the phone?

00:23:38.020 --> 00:23:40.100
They give you a
strong UX indicator.

00:23:40.100 --> 00:23:41.700
You're going to
pull out your phone.

00:23:41.700 --> 00:23:42.920
You get a notification.

00:23:42.920 --> 00:23:44.850
You say, hey, yeah, this is me.

00:23:44.850 --> 00:23:45.950
This is my account.

00:23:45.950 --> 00:23:48.840
And the TV takes over
from that information.

00:23:48.840 --> 00:23:52.290
And it was really frictionless.

00:23:52.290 --> 00:23:53.990
But how did they do that?

00:23:53.990 --> 00:23:55.940
It's not magic, I promise you.

00:23:55.940 --> 00:23:57.830
It's something you can do today.

00:23:57.830 --> 00:23:59.070
You can use Nearby.

00:23:59.070 --> 00:24:01.537
So the Nearby API has
been out for a while.

00:24:01.537 --> 00:24:03.620
But it's really interesting
when you try to use it

00:24:03.620 --> 00:24:06.900
on TV what you can do.

00:24:06.900 --> 00:24:09.120
The way it works is,
you're going to set up

00:24:09.120 --> 00:24:10.910
the TV to be the advertiser.

00:24:10.910 --> 00:24:13.410
And then the phone is going to
come out and try to discover,

00:24:13.410 --> 00:24:16.100
hey, there's the TV.

00:24:16.100 --> 00:24:18.330
You do all the work you
want to do on the phone

00:24:18.330 --> 00:24:20.940
and then send it back to the TV.

00:24:20.940 --> 00:24:24.330
Nearby is going to set up an
offline, peer-to-peer wireless

00:24:24.330 --> 00:24:25.679
connection that's encrypted.

00:24:25.679 --> 00:24:27.720
And you don't have to
worry about a lot of things

00:24:27.720 --> 00:24:30.240
because you're going to have
this intimate connection

00:24:30.240 --> 00:24:32.660
between the phone and the TV.

00:24:32.660 --> 00:24:34.680
Let's dive a little bit deeper.

00:24:34.680 --> 00:24:36.190
So getting started with this--

00:24:36.190 --> 00:24:39.120
let's start on the TV side
because I'm on Android TV,

00:24:39.120 --> 00:24:40.410
so I'm a bit biased--

00:24:40.410 --> 00:24:43.410
we're going to
start on TV first.

00:24:43.410 --> 00:24:45.800
TV is going to
start advertising.

00:24:45.800 --> 00:24:48.560
The way you do this is you set
up Nearby Docket Connections

00:24:48.560 --> 00:24:49.490
client.

00:24:49.490 --> 00:24:51.860
Nearby is just a nice
singleton helper class

00:24:51.860 --> 00:24:55.040
from the Nearby API that
has all these things to help

00:24:55.040 --> 00:24:56.610
you get started.

00:24:56.610 --> 00:24:58.900
You call Start Advertising.

00:24:58.900 --> 00:25:02.300
You're going to give it
a name, a service ID--

00:25:02.300 --> 00:25:04.670
package name is perfectly fine.

00:25:04.670 --> 00:25:07.660
You're going to give it a
Connection Lifecycle Callback.

00:25:07.660 --> 00:25:10.700
And you're going
to set a strategy.

00:25:10.700 --> 00:25:12.650
Cluster's a really
good strategy.

00:25:12.650 --> 00:25:16.460
If you notice, there is also a
P2P, point-to-point strategy.

00:25:16.460 --> 00:25:19.250
And you might be, yeah, it's one
TV, one phone, point-to-point,

00:25:19.250 --> 00:25:20.420
this sounds great.

00:25:20.420 --> 00:25:22.670
But if you try to do
like multi-device setup--

00:25:22.670 --> 00:25:25.460
I have a TV in my living
room, one of my bedroom,

00:25:25.460 --> 00:25:26.740
one of my bathroom--

00:25:26.740 --> 00:25:29.820
all of a sudden, that
point-to-point breaks down.

00:25:29.820 --> 00:25:31.520
So to make a more
robust app, you

00:25:31.520 --> 00:25:33.780
should think about
using Cluster.

00:25:33.780 --> 00:25:37.340
You also set success
and failure listeners.

00:25:37.340 --> 00:25:41.380
Now these listeners aren't
saying, oh, I've been found.

00:25:41.380 --> 00:25:43.040
I've advertised
and now I'm found.

00:25:43.040 --> 00:25:46.550
These listeners say, you are
able to start advertising.

00:25:46.550 --> 00:25:48.260
So they're great for
debugging and adding

00:25:48.260 --> 00:25:52.590
extra information
inside your app.

00:25:52.590 --> 00:25:54.350
The big elephant on
this slide, though,

00:25:54.350 --> 00:25:58.180
is the Connection
Lifecycle Callback.

00:25:58.180 --> 00:26:01.570
This callback talks about
how the devices will

00:26:01.570 --> 00:26:02.810
talk to each other.

00:26:02.810 --> 00:26:05.260
You know, what's going
to be said is later,

00:26:05.260 --> 00:26:07.180
but how are they
going to say it now

00:26:07.180 --> 00:26:10.680
is handled in the Connection
Lifecycle Callback.

00:26:10.680 --> 00:26:15.800
Simple, three methods, on
initiated-- or on initialized,

00:26:15.800 --> 00:26:18.319
results, and disconnected.

00:26:18.319 --> 00:26:19.610
They're pretty straightforward.

00:26:19.610 --> 00:26:22.256
But let's dive in
a little bit more.

00:26:22.256 --> 00:26:24.290
So when a connection's
initialized,

00:26:24.290 --> 00:26:26.900
that means the phone
requested a connection.

00:26:26.900 --> 00:26:28.820
You're going to
prompt for security

00:26:28.820 --> 00:26:29.910
and do a couple of things.

00:26:29.910 --> 00:26:32.570
But eventually, you're going to
say, nearby docket connections

00:26:32.570 --> 00:26:36.770
client, accept connection.

00:26:36.770 --> 00:26:38.680
Once the connection
has been accepted,

00:26:38.680 --> 00:26:42.010
you'll receive a result.
Based on that result--

00:26:42.010 --> 00:26:45.650
was that OK, continue on,
was it rejected, maybe

00:26:45.650 --> 00:26:48.100
ask for another retry--

00:26:48.100 --> 00:26:51.480
but based on that result, you
should handle appropriately.

00:26:51.480 --> 00:26:56.270
And the last one, on
disconnected, is pretty simple.

00:26:56.270 --> 00:27:01.200
Just clean up any metadata you
may have started collecting.

00:27:01.200 --> 00:27:04.170
The big line here is, the
Connections Client Accept

00:27:04.170 --> 00:27:05.340
Connections.

00:27:05.340 --> 00:27:08.260
And here you pass in
a payload callback.

00:27:08.260 --> 00:27:10.140
This payload callback
is going to be

00:27:10.140 --> 00:27:12.460
what the devices communicate.

00:27:12.460 --> 00:27:14.280
So you should have a
contract on your phone

00:27:14.280 --> 00:27:17.220
and on your TV for what they're
going to say to each other.

00:27:17.220 --> 00:27:18.780
Hey phone, we want to do this.

00:27:18.780 --> 00:27:21.030
Hey TV, we're going to do this.

00:27:21.030 --> 00:27:24.630
This is all handled inside
the payload callback.

00:27:24.630 --> 00:27:27.160
So here are a couple tips.

00:27:27.160 --> 00:27:29.870
What you're going to communicate
is very specific to your app.

00:27:29.870 --> 00:27:31.500
But here's some tips.

00:27:31.500 --> 00:27:34.450
The Payload Received and
Payload Transfer Update

00:27:34.450 --> 00:27:36.390
are the only two
methods you get.

00:27:36.390 --> 00:27:39.220
They're pretty succinct,
pretty good methods, though.

00:27:39.220 --> 00:27:42.060
On Payload Receive,
if you want to send

00:27:42.060 --> 00:27:43.230
an acknowledgment back--

00:27:43.230 --> 00:27:45.750
hey, thanks for
telling us this, phone,

00:27:45.750 --> 00:27:48.060
we're going to send back an
acknowledgment so you know

00:27:48.060 --> 00:27:50.120
the message has been received--

00:27:50.120 --> 00:27:51.610
it's really easy.

00:27:51.610 --> 00:27:53.810
You just call, Send Payload.

00:27:53.810 --> 00:27:56.940
You give it the endpoint ID that
you receive the payload from,

00:27:56.940 --> 00:28:01.640
and some body, in this case, it
would say ack, or acknowledge.

00:28:01.640 --> 00:28:03.610
If you want to disconnect--

00:28:03.610 --> 00:28:05.760
hey, I received
this payload, I want

00:28:05.760 --> 00:28:09.280
to disconnect the connection
and then close this session--

00:28:09.280 --> 00:28:11.910
you should do that in
the Transfer Update.

00:28:11.910 --> 00:28:13.760
In the Transfer
Update, you should

00:28:13.760 --> 00:28:16.340
check to see if it's
in progress or not.

00:28:16.340 --> 00:28:19.340
If you're sending small
messages like ack and send,

00:28:19.340 --> 00:28:21.170
those are pretty fast.

00:28:21.170 --> 00:28:23.450
But if you're sending
something big like a file,

00:28:23.450 --> 00:28:24.530
that could take a while.

00:28:24.530 --> 00:28:26.738
And you want to check to
make sure all the bytes have

00:28:26.738 --> 00:28:27.560
been sent.

00:28:27.560 --> 00:28:30.310
Once all the bytes
have been sent,

00:28:30.310 --> 00:28:34.600
then you can call
Disconnect from Endpoint.

00:28:34.600 --> 00:28:36.970
So to summarize
the TV side, you're

00:28:36.970 --> 00:28:39.160
going to advertise,
hey, I'm a TV.

00:28:39.160 --> 00:28:40.930
You're going to
accept the connection.

00:28:40.930 --> 00:28:43.546
And then you're
going to communicate.

00:28:43.546 --> 00:28:46.720
But on the phone, what
happens on the phone side?

00:28:46.720 --> 00:28:48.830
It's going to look very similar.

00:28:48.830 --> 00:28:51.250
You're going to discover
the TV this time.

00:28:51.250 --> 00:28:53.050
You're going to
request the connection.

00:28:53.050 --> 00:28:54.910
And then everything
after that is

00:28:54.910 --> 00:28:57.775
going to look like the
slides I just showed you.

00:28:57.775 --> 00:29:01.580
So to discover the TV, you have
the nearby connection client

00:29:01.580 --> 00:29:02.420
again.

00:29:02.420 --> 00:29:04.700
This time, you call
Start Discovery.

00:29:04.700 --> 00:29:07.220
Mind blown.

00:29:07.220 --> 00:29:09.260
You're going to give
it a service ID.

00:29:09.260 --> 00:29:11.500
Now this time, I'm
using the constant.

00:29:11.500 --> 00:29:13.280
And there's a reason
for the service

00:29:13.280 --> 00:29:16.400
ID, depending on your app,
should either be the package

00:29:16.400 --> 00:29:18.290
name or the constant.

00:29:18.290 --> 00:29:20.180
If you have a
package name that's

00:29:20.180 --> 00:29:22.910
the same for both your TV
app and your mobile app,

00:29:22.910 --> 00:29:24.260
it's going to work great.

00:29:24.260 --> 00:29:27.590
But if you have something
like com.mycompany.android,

00:29:27.590 --> 00:29:31.350
or com.mycompany.androidtv
as your two package names,

00:29:31.350 --> 00:29:33.350
imagine they're kind of
on their own channels.

00:29:33.350 --> 00:29:35.420
And so the Nearby
Connections library

00:29:35.420 --> 00:29:38.390
won't be able to find
the phone and the TV.

00:29:38.390 --> 00:29:41.060
So having a service ID
that's used by both sides

00:29:41.060 --> 00:29:43.580
is a good practice.

00:29:43.580 --> 00:29:45.580
Then you're going to give
it a mobile end point

00:29:45.580 --> 00:29:49.820
discovery call back, because
I love really big words.

00:29:49.820 --> 00:29:51.852
And then you're going
to set a strategy.

00:29:51.852 --> 00:29:53.560
This strategy should
be symmetric to what

00:29:53.560 --> 00:29:54.550
you set on TV.

00:29:54.550 --> 00:29:57.880
So I urge you to use
Cluster for this use case.

00:29:57.880 --> 00:29:59.730
You get listeners, again.

00:29:59.730 --> 00:30:01.800
These listeners are
pretty important.

00:30:01.800 --> 00:30:04.840
These say you are able
to start discovery.

00:30:04.840 --> 00:30:06.880
This does require
location permission

00:30:06.880 --> 00:30:09.460
because it's going to use
Bluetooth LEE, than default

00:30:09.460 --> 00:30:11.860
to other ways to
find nearby people.

00:30:11.860 --> 00:30:13.900
So if you get a failure
listener-- you know,

00:30:13.900 --> 00:30:16.390
maybe it's like, oh, permission
for location hasn't been

00:30:16.390 --> 00:30:17.415
enabled--

00:30:17.415 --> 00:30:19.540
so these are great for
debugging and trying to urge

00:30:19.540 --> 00:30:20.860
the user down the correct path.

00:30:24.090 --> 00:30:27.320
So, the second part,
accept the connection.

00:30:27.320 --> 00:30:28.500
Really simple.

00:30:28.500 --> 00:30:31.460
You have that mobile end
point discovery callback.

00:30:31.460 --> 00:30:33.010
And it has two methods.

00:30:33.010 --> 00:30:36.320
You either found an endpoint
or you lost an endpoint.

00:30:36.320 --> 00:30:37.100
Pretty simple.

00:30:37.100 --> 00:30:42.330
If you find an endpoint, go
ahead and request a connection.

00:30:42.330 --> 00:30:44.720
This will trigger the on
connection initialized

00:30:44.720 --> 00:30:47.080
on the TV that we saw earlier.

00:30:47.080 --> 00:30:50.990
If you lost an endpoint-- maybe
the user walked too far away

00:30:50.990 --> 00:30:54.110
from the TV and is
now no longer nearby,

00:30:54.110 --> 00:30:56.840
or maybe they gave up and just
closed the app and said forget

00:30:56.840 --> 00:31:01.320
it, hopefully it's the first
for you, not the second--

00:31:01.320 --> 00:31:02.960
you just clean up
whatever metadata

00:31:02.960 --> 00:31:06.330
you had collected already.

00:31:06.330 --> 00:31:08.827
Everything after
this is identical.

00:31:08.827 --> 00:31:10.660
You're going to have a
connections lifecycle

00:31:10.660 --> 00:31:13.680
callback that handles
how they communicate.

00:31:13.680 --> 00:31:16.240
Then you're going to have a
payload callback that says what

00:31:16.240 --> 00:31:18.920
are they going to communicate.

00:31:18.920 --> 00:31:19.810
And that's it.

00:31:19.810 --> 00:31:22.180
That's pretty much
Nearby in a nutshell.

00:31:22.180 --> 00:31:24.420
But Nearby is a cool tool.

00:31:24.420 --> 00:31:27.400
It's nice to have in your tool
box of kits for how to add

00:31:27.400 --> 00:31:30.610
more experience to your TV app.

00:31:30.610 --> 00:31:31.880
So let's go down Payments.

00:31:31.880 --> 00:31:34.559
Let's look at one more example.

00:31:34.559 --> 00:31:36.100
Payments, I think,
it's kind of cool.

00:31:36.100 --> 00:31:38.710
It adds this family
friendly idea.

00:31:38.710 --> 00:31:42.280
Imagine you're at work
and your kid is at home

00:31:42.280 --> 00:31:45.400
and they want to buy the
next season of a TV show.

00:31:45.400 --> 00:31:47.200
You get a push notification.

00:31:47.200 --> 00:31:49.930
Hey, are you sure you want
to purchase this TV show?

00:31:49.930 --> 00:31:52.760
And you say, ah man, my
kid's at home buying stuff.

00:31:52.760 --> 00:31:53.640
No.

00:31:53.640 --> 00:31:55.070
Or, oh man, my kid's at home.

00:31:55.070 --> 00:31:56.590
Yeah, they're bored.

00:31:56.590 --> 00:32:00.850
Let me use my fingerprint or
face ID or anything, anything

00:32:00.850 --> 00:32:03.310
from the phone to
authenticate yourself.

00:32:03.310 --> 00:32:07.870
And all of a sudden, you just
enabled a purchase at home

00:32:07.870 --> 00:32:10.060
from your office.

00:32:10.060 --> 00:32:12.390
I'd argue that's not Nearby.

00:32:12.390 --> 00:32:14.500
If there was an API,
it'd be called Far Away.

00:32:14.500 --> 00:32:15.370
Right?

00:32:15.370 --> 00:32:18.010
And "Shrek" might have been as
close to far away as I've seen,

00:32:18.010 --> 00:32:21.250
but I have not seen
that in Android.

00:32:21.250 --> 00:32:24.010
So, in this case, Nearby
is not a good fit.

00:32:24.010 --> 00:32:26.770
It's a good tool in the toolbox
but it's not necessarily

00:32:26.770 --> 00:32:29.640
the best fit.

00:32:29.640 --> 00:32:31.450
Maybe there's another good fit.

00:32:31.450 --> 00:32:34.232
Let's talk about that
example one more time.

00:32:34.232 --> 00:32:36.520
You get a push notification.

00:32:36.520 --> 00:32:39.060
And it says, watch
on TV or watch here.

00:32:39.060 --> 00:32:40.470
This is the big game.

00:32:40.470 --> 00:32:44.534
You want to watch it,
watch it on a small phone?

00:32:44.534 --> 00:32:45.480
Eh.

00:32:45.480 --> 00:32:47.070
Watch it on a big TV?

00:32:47.070 --> 00:32:48.990
Awesome.

00:32:48.990 --> 00:32:51.630
You could use Nearby to
figure out proximity.

00:32:51.630 --> 00:32:53.850
Yes, they're close to the TV.

00:32:53.850 --> 00:32:57.450
We should show the
Watch on TV up button.

00:32:57.450 --> 00:32:59.820
That's a great use for Nearby.

00:32:59.820 --> 00:33:03.120
Receiving the
notification, hm, this

00:33:03.120 --> 00:33:05.670
is a great example
of content immersion.

00:33:05.670 --> 00:33:09.000
As soon as you said, watch
on TV, the background lit up.

00:33:09.000 --> 00:33:10.600
You're in this immersive view.

00:33:10.600 --> 00:33:12.302
Here's the schedule
for the game.

00:33:12.302 --> 00:33:13.260
Here's some highlights.

00:33:13.260 --> 00:33:15.261
Here's the score.

00:33:15.261 --> 00:33:16.870
And then, whenever
the user wants,

00:33:16.870 --> 00:33:18.790
they can just put the
phone to the side.

00:33:18.790 --> 00:33:20.290
It's very non-intrusive.

00:33:20.290 --> 00:33:23.570
And they can focus on the game.

00:33:23.570 --> 00:33:27.110
So in a sense, this was kind of
kicked off from a notification.

00:33:27.110 --> 00:33:30.670
And in a way, you'd say, hey,
that was more of a push model.

00:33:30.670 --> 00:33:32.260
Nearby feels more
like a pulling.

00:33:32.260 --> 00:33:35.386
I'm pulling a conversation
between the two devices.

00:33:35.386 --> 00:33:36.760
Whereas in this
case, you're more

00:33:36.760 --> 00:33:40.200
of pushing that
information to the user.

00:33:40.200 --> 00:33:42.700
And there's a talk about
Firebase Cloud Messaging

00:33:42.700 --> 00:33:43.250
after this.

00:33:43.250 --> 00:33:46.570
And I won't step on
their toes too much.

00:33:46.570 --> 00:33:48.460
But we'll just talk
about it for fun.

00:33:48.460 --> 00:33:50.300
What's the worst
that can happen?

00:33:50.300 --> 00:33:53.080
You set up a Firebase
Messaging Service.

00:33:53.080 --> 00:33:55.390
You receive a message.

00:33:55.390 --> 00:33:57.650
Based on that message, you
should have some action.

00:33:57.650 --> 00:34:01.280
Here's what to do when
you receive that message.

00:34:01.280 --> 00:34:04.430
If that action happens to
be, hey, watch this movie

00:34:04.430 --> 00:34:07.120
or watch this game,
start watching.

00:34:07.120 --> 00:34:09.800
And you're good to go.

00:34:09.800 --> 00:34:13.340
Start watching literally
should launch an activity.

00:34:13.340 --> 00:34:15.320
This is the Android Dev Summit.

00:34:15.320 --> 00:34:18.330
I'm assuming everyone has
launched an activity before.

00:34:18.330 --> 00:34:23.719
But just in case,
we set up an intent.

00:34:23.719 --> 00:34:26.780
We give it some extras like,
hey, here's the video to watch.

00:34:26.780 --> 00:34:28.739
And we start an activity.

00:34:28.739 --> 00:34:30.190
Beautiful.

00:34:30.190 --> 00:34:33.150
The question really comes
down to what happens

00:34:33.150 --> 00:34:35.263
when the TV screen is off?

00:34:35.263 --> 00:34:36.179
You know, I'm at home.

00:34:36.179 --> 00:34:37.320
I get a push notification.

00:34:37.320 --> 00:34:37.820
Oh, man.

00:34:37.820 --> 00:34:39.190
The game's about to start.

00:34:39.190 --> 00:34:41.159
I have to hit
power on my remote.

00:34:41.159 --> 00:34:43.429
I have to tune to the channel.

00:34:43.429 --> 00:34:46.590
Man, this is First World
problems at its finest.

00:34:46.590 --> 00:34:49.489
But you can solve those.

00:34:49.489 --> 00:34:52.370
We have that fragment
activity that's your player.

00:34:52.370 --> 00:34:54.350
When you set up everything,
all you have to do

00:34:54.350 --> 00:34:57.750
is just call, set Turn
On screen to True.

00:34:57.750 --> 00:35:00.530
Now, this is a really
cool API on Activity.

00:35:00.530 --> 00:35:03.260
This is actually
introduced in OMR-1.

00:35:03.260 --> 00:35:06.610
So if you're on API 27 or
higher, you should do a check.

00:35:06.610 --> 00:35:09.060
Hey, turn on screen to True.

00:35:09.060 --> 00:35:13.190
Otherwise, you can
just add the flag.

00:35:13.190 --> 00:35:16.470
So to summarize how to
build a great TV app,

00:35:16.470 --> 00:35:17.790
start with your player.

00:35:17.790 --> 00:35:19.680
Your content is king.

00:35:19.680 --> 00:35:21.430
So really focus on the player.

00:35:21.430 --> 00:35:24.810
Whether it's an ad or
whether it's actual content,

00:35:24.810 --> 00:35:27.510
make sure your player is solid.

00:35:27.510 --> 00:35:30.900
Next thing, how do you
make your app more usable?

00:35:30.900 --> 00:35:32.700
How do you get that
lean back experience

00:35:32.700 --> 00:35:37.210
so that users can quickly
find other content to watch?

00:35:37.210 --> 00:35:39.370
The third pillar
is distribution.

00:35:39.370 --> 00:35:42.520
Is my app set up to be deployed
on the Play Store correctly?

00:35:42.520 --> 00:35:44.560
When you have all
three of these,

00:35:44.560 --> 00:35:46.360
you end up with happy users.

00:35:46.360 --> 00:35:48.650
And who doesn't
want happy users?

00:35:48.650 --> 00:35:50.710
But if you want to take
your app even further,

00:35:50.710 --> 00:35:55.750
evaluate your users and layer
in these lean in experiences.

00:35:55.750 --> 00:35:57.010
How do you do payments?

00:35:57.010 --> 00:36:00.910
Having that push notification
for the media control.

00:36:00.910 --> 00:36:03.440
How do you add that
immersive content?

00:36:03.440 --> 00:36:06.588
Here's the details of the game.

00:36:06.588 --> 00:36:08.390
So thank you, everyone.

00:36:08.390 --> 00:36:10.340
Go build great TV apps.

00:36:10.340 --> 00:36:16.690
[MUSIC PLAYING]

