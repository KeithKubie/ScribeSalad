WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.384
Welcome back for Unit 3.

00:00:01.384 --> 00:00:04.231
This unit introduces the next big idea we need for a web crawler,

00:00:04.231 --> 00:00:06.335
which is structured data.

00:00:06.335 --> 00:00:09.276
And by the end of this unit you will have finished building a working web crawler.

00:00:09.276 --> 00:00:11.341
The closest thing we've seen so far to structured data

00:00:11.341 --> 00:00:14.381
is the string data type introduced in Unit 1 and used

00:00:14.381 --> 00:00:17.164
in many of the procedures in Unit 2.

00:00:17.164 --> 00:00:19.335
A string is a kind of structured data, and that's because

00:00:19.335 --> 00:00:21.734
we can break it down into its characters.

00:00:21.734 --> 00:00:23.668
The string has a sequence of characters,

00:00:23.668 --> 00:00:26.552
and we can operate on sub sequences of the string.

00:00:26.552 --> 00:00:29.885
What we could do with strings was somewhat limited, though,

00:00:29.885 --> 00:00:32.818
because the only thing we can put in a string is a character.

00:00:32.818 --> 00:00:35.650
Today, we're going to introduce the list data type,

00:00:35.650 --> 00:00:37.868
and lists are much more powerful than strings,

00:00:37.868 --> 00:00:41.167
so whereas for a string, all of the elements had to be characters,

00:00:41.167 --> 00:00:44.051
in a list, the elements can be anything we want.

00:00:44.051 --> 00:00:46.236
They could be characters. They could be strings.

00:00:46.236 --> 00:00:49.917
They could be numbers. They could also be other lists.

00:00:49.917 --> 00:00:51.968
Let's look at an example.

00:00:51.968 --> 00:00:55.403
When we created a string, we just put a sequence of characters

00:00:55.403 --> 00:00:58.252
surrounded by either single or double quotes.

00:00:58.252 --> 00:01:00.050
Here's an example of a string,

00:01:00.050 --> 00:01:03.084
and we could store that string in a variable by using an assignment.

00:01:03.084 --> 00:01:07.335
With a list, instead of using quotes to identify the list

00:01:07.335 --> 00:01:11.452
we use square brackets, and the elements are separated by commas.

00:01:11.452 --> 00:01:14.701
And just like with a string, we can assign the list that we created

00:01:14.701 --> 00:01:18.751
to a variable, so we'll store that list in the variable "p."

00:01:18.751 --> 00:01:21.353
With a string, we could use the square brackets

00:01:21.353 --> 00:01:24.401
to select elements, and when we index element 0,

00:01:24.401 --> 00:01:29.368
we'll get the first element of the string, a sequence of that character,

00:01:29.368 --> 00:01:31.317
which is the character "y."

00:01:31.317 --> 00:01:35.135
With lists, we can also use square brackets to access elements,

00:01:35.135 --> 00:01:39.168
so if we do p[0],

00:01:39.168 --> 00:01:42.367
that will evaluate to the first element of p,

00:01:42.367 --> 00:01:45.868
which is the string containing the single letter y.

00:01:45.868 --> 00:01:49.467
With strings, we saw that we could use the colon inside the square brackets

00:01:49.467 --> 00:01:52.834
to select a sub string of more than 1 character.

00:01:52.834 --> 00:01:56.853
Here we're selecting from position 2 through position 4.

00:01:56.853 --> 00:02:00.401
That will give us the third and fourth characters of the string,

00:02:00.401 --> 00:02:04.603
which is the sub sequence, the string "bb."

00:02:04.603 --> 00:02:06.502
We can do the same thing with lists.

00:02:06.502 --> 00:02:09.917
We can select from position 2 to position 4,

00:02:09.917 --> 00:02:12.834
but instead of returning a string, it will return a list

00:02:12.834 --> 00:02:15.168
containing those elements.

00:02:15.168 --> 00:02:18.402
It will give us a list of the third and fourth element

00:02:18.402 --> 00:02:23.302
of the variable p, which is the list that we have here.

00:02:23.302 --> 00:02:26.602
The general grammar for constructing a list

00:02:26.602 --> 00:02:29.668
is to have a square bracket followed by a list

00:02:29.668 --> 00:02:32.285
of any number of expressions where the expressions

00:02:32.285 --> 00:02:35.417
are separated by commas.

00:02:35.417 --> 00:02:39.418
We could create a list using just 2 brackets,

00:02:39.418 --> 00:02:41.868
a left bracket and a right bracket, and this would create a list

00:02:41.868 --> 00:02:46.002
containing 0 elements, also known as the empty list.

00:02:46.002 --> 00:02:49.052
We could create a list containing 1 element.

00:02:49.052 --> 00:02:53.302
That would be the square brackets with 1 element between them.

00:02:53.302 --> 00:02:55.801
Here we've created a list containing just 1 element,

00:02:55.801 --> 00:02:58.019
which is the number 3.

00:02:58.019 --> 00:03:01.169
Or we could create a list with many elements, as we did in the first example,

00:03:01.169 --> 00:03:05.169
where we have all of the strings separated by commas.

