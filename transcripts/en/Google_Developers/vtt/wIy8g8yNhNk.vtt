WEBVTT
Kind: captions
Language: en

00:00:02.370 --> 00:00:04.340
Alpha blended
transparency-- it's

00:00:04.340 --> 00:00:07.190
one of those awesome effects
that really helps sell an app.

00:00:07.190 --> 00:00:09.914
It's not cheap, but it's
worth the cost, right?

00:00:09.914 --> 00:00:12.330
Well, what if I told you that
you're paying more for alpha

00:00:12.330 --> 00:00:13.750
blending than you have to?

00:00:13.750 --> 00:00:15.929
My name is Ian Ni-Lewis,
and in the next few minutes

00:00:15.929 --> 00:00:18.470
I'm going to introduce you to
a hidden cost of alpha blending

00:00:18.470 --> 00:00:22.760
on Android, and I'm going to
show you two ways to avoid it.

00:00:22.760 --> 00:00:25.270
Now, you probably already
know why alpha blending costs

00:00:25.270 --> 00:00:26.660
more than opaque rendering.

00:00:26.660 --> 00:00:28.320
When you render
an opaque element,

00:00:28.320 --> 00:00:30.520
you only need to write
to each pixel once,

00:00:30.520 --> 00:00:32.460
but when you're
blending, you have

00:00:32.460 --> 00:00:34.409
to draw every pixel
at least twice.

00:00:34.409 --> 00:00:35.950
That's because we
need to know what's

00:00:35.950 --> 00:00:38.780
underneath our alpha blended
view in order to blend with it.

00:00:38.780 --> 00:00:41.060
But did you know that
alpha blending also

00:00:41.060 --> 00:00:42.660
has a hidden cost?

00:00:42.660 --> 00:00:45.610
Under some conditions, a
single alpha blended view

00:00:45.610 --> 00:00:48.620
can cause an entire branch
of your view hierarchy

00:00:48.620 --> 00:00:50.750
to be drawn twice.

00:00:50.750 --> 00:00:53.700
Here's a real world example;
it's a fancy list view,

00:00:53.700 --> 00:00:55.260
and it uses alpha
blending to tint

00:00:55.260 --> 00:00:57.170
the photos and the subtitles.

00:00:57.170 --> 00:00:59.900
Now under normal
conditions, each element

00:00:59.900 --> 00:01:03.420
is drawn directly to the
screen back to front.

00:01:03.420 --> 00:01:06.790
If an element has alpha, it's
blended with whatever colors

00:01:06.790 --> 00:01:08.720
are already on the screen.

00:01:08.720 --> 00:01:12.050
But let's say that we wanted
to take this entire list view

00:01:12.050 --> 00:01:15.127
and reduce its
transparency a little bit.

00:01:15.127 --> 00:01:16.210
Now, that's pretty common.

00:01:16.210 --> 00:01:18.690
Lots of apps these days
use animated transparency

00:01:18.690 --> 00:01:21.850
and transitions to make it
look like a view is fading out.

00:01:21.850 --> 00:01:24.020
As we decrease the
alpha value, you

00:01:24.020 --> 00:01:25.630
can see the view
start to fade into

00:01:25.630 --> 00:01:27.590
the light-colored background.

00:01:27.590 --> 00:01:30.730
But what you can't see is that
we've just triggered a hidden

00:01:30.730 --> 00:01:32.450
extra drawing step.

00:01:32.450 --> 00:01:35.360
You see, when the entire
view becomes transparent,

00:01:35.360 --> 00:01:37.980
our previous rendering
strategy doesn't work.

00:01:37.980 --> 00:01:41.400
If you just draw each
element at the reduced alpha,

00:01:41.400 --> 00:01:43.100
you'd start getting
colors blending

00:01:43.100 --> 00:01:44.630
in where there shouldn't be.

00:01:44.630 --> 00:01:47.380
Now, check out the
title text on the left

00:01:47.380 --> 00:01:49.860
and compare it to the
same text on the right.

00:01:49.860 --> 00:01:52.900
The one on the left is correct,
and it's still bright white.

00:01:52.900 --> 00:01:54.620
The text on the right,
on the other hand,

00:01:54.620 --> 00:01:56.757
is starting to fade into
the colored background.

00:01:56.757 --> 00:01:58.840
You can see the same problem
with the photos, too.

00:01:58.840 --> 00:02:01.131
Their picking up a little
more tint from the background

00:02:01.131 --> 00:02:02.510
than they're supposed to.

00:02:02.510 --> 00:02:05.150
So how does the renderer
get the right result?

00:02:05.150 --> 00:02:07.920
Well, it has to use a
two-pass drawing technique.

00:02:07.920 --> 00:02:10.699
It begins by drawing the
entire view as normal,

00:02:10.699 --> 00:02:11.910
at full opacity.

00:02:11.910 --> 00:02:14.130
But it doesn't draw
directly to the screen.

00:02:14.130 --> 00:02:16.330
Instead, it draws
it to an off screen

00:02:16.330 --> 00:02:18.294
buffer called a hardware layer.

00:02:18.294 --> 00:02:19.835
Now, hardware layers
are pretty cool.

00:02:19.835 --> 00:02:22.820
The GPU is really, really
good at copying pixels

00:02:22.820 --> 00:02:24.670
from hardware layers
to the screen,

00:02:24.670 --> 00:02:27.760
and it can do some neat
tricks like scale and rotation

00:02:27.760 --> 00:02:30.220
and transparency during
the copy process,

00:02:30.220 --> 00:02:32.020
and that's exactly
what the renderer does

00:02:32.020 --> 00:02:33.410
in the second drawing pass.

00:02:33.410 --> 00:02:35.870
It tells the GPU to
copy all of the pixels

00:02:35.870 --> 00:02:38.760
from the hardware
layer to the screen,

00:02:38.760 --> 00:02:41.800
and it applies the new
alpha value in the process.

00:02:41.800 --> 00:02:44.100
So why does this cause
a performance problem?

00:02:44.100 --> 00:02:45.650
Well, it's because
hardware layers

00:02:45.650 --> 00:02:49.200
are one of those things that
has a large upfront cost

00:02:49.200 --> 00:02:51.530
and then gets cheaper over time.

00:02:51.530 --> 00:02:53.080
The first time you
use a layer, it's

00:02:53.080 --> 00:02:56.250
more expensive than just
drawing directly to the screen.

00:02:56.250 --> 00:02:59.390
The savings come later,
as you reuse the layer

00:02:59.390 --> 00:03:01.570
without changing its contents.

00:03:01.570 --> 00:03:04.690
But in the case we're looking
at, we never see those savings.

00:03:04.690 --> 00:03:05.610
Why?

00:03:05.610 --> 00:03:07.420
Because after every
frame, the renderer

00:03:07.420 --> 00:03:09.620
throws the hardware layer away.

00:03:09.620 --> 00:03:12.640
Every single time we draw this
view, we have to pay the setup

00:03:12.640 --> 00:03:15.090
and draw costs all over again.

00:03:15.090 --> 00:03:17.140
Now, at first, this
probably sounds

00:03:17.140 --> 00:03:19.250
like the renderer is
making a dumb decision,

00:03:19.250 --> 00:03:21.030
but that's not really the case.

00:03:21.030 --> 00:03:23.184
Those offscreen
buffers take up memory,

00:03:23.184 --> 00:03:24.850
and the renderer
doesn't have a good way

00:03:24.850 --> 00:03:27.750
of knowing whether or when you
might want to reuse that image,

00:03:27.750 --> 00:03:29.920
so it's making THE
smart choice given

00:03:29.920 --> 00:03:31.720
the information that it has.

00:03:31.720 --> 00:03:35.659
So how do we give the
renderer better information?

00:03:35.659 --> 00:03:37.200
Well, first, we can
tell the renderer

00:03:37.200 --> 00:03:39.860
to keep that
hardware layer AROUND

00:03:39.860 --> 00:03:42.010
by calling views
dot setLayerType

00:03:42.010 --> 00:03:43.850
with LAYER_TYPE_HARDWARE.

00:03:43.850 --> 00:03:46.490
Now, this will tell the
renderer to reuse the layer

00:03:46.490 --> 00:03:49.770
and make the drawing operation
nearly twice as fast.

00:03:49.770 --> 00:03:51.610
Just don't forget to
set the layer type back

00:03:51.610 --> 00:03:53.560
to LAYER_TYPE_NONE
when you're done,

00:03:53.560 --> 00:03:56.630
so you don't waste precious
video memory for nothing.

00:03:56.630 --> 00:03:59.030
If you're targeting
API 16 or above,

00:03:59.030 --> 00:04:02.020
you can use a shortcut
called ViewPropertyAnimator

00:04:02.020 --> 00:04:05.230
dot withLayer to have the
animator manage the layer

00:04:05.230 --> 00:04:07.000
type automatically.

00:04:07.000 --> 00:04:10.130
Now, another common example
is a view with a drop shadow.

00:04:10.130 --> 00:04:12.830
This kind of view has an opaque
part and a semi transparent

00:04:12.830 --> 00:04:16.130
part, but it's never going to
run into the draw order problem

00:04:16.130 --> 00:04:18.670
that we saw earlier, and that's
because the two parts don't

00:04:18.670 --> 00:04:19.326
overlap.

00:04:19.326 --> 00:04:21.200
If they don't overlap,
then it doesn't matter

00:04:21.200 --> 00:04:23.680
what order they get drawn in.

00:04:23.680 --> 00:04:26.330
So we can let the renderer
know about this condition

00:04:26.330 --> 00:04:29.890
by overriding view dot
hasOverlappingRendering.

00:04:29.890 --> 00:04:32.680
If that method returns
false, then the renderer

00:04:32.680 --> 00:04:34.400
won't create a
hardware buffer; it'll

00:04:34.400 --> 00:04:36.610
draw the view in just one pass.

00:04:36.610 --> 00:04:39.720
This can make a big difference
to draw performance.

00:04:39.720 --> 00:04:42.580
In our sample app, setting the
overlap rendering flag to false

00:04:42.580 --> 00:04:44.880
cut our draw time in half.

00:04:44.880 --> 00:04:47.380
You don't actually have to
have non-overlapping content

00:04:47.380 --> 00:04:48.720
to use this flag.

00:04:48.720 --> 00:04:51.650
If you specify on a view that
does have overlapping content,

00:04:51.650 --> 00:04:54.150
you'll still get that
same performance benefit.

00:04:54.150 --> 00:04:57.110
You just won't get 100%
correct alpha blending.

00:04:57.110 --> 00:04:58.850
Whether that's a
bad thing or not

00:04:58.850 --> 00:05:00.990
depends on your application.

00:05:00.990 --> 00:05:04.600
Just remember, even if you do
make a view draw twice as fast,

00:05:04.600 --> 00:05:07.900
that may or may not make
your entire app faster.

00:05:07.900 --> 00:05:09.800
Always profile your
code and find out

00:05:09.800 --> 00:05:13.840
where the hotspots are
before you make any changes.

00:05:13.840 --> 00:05:16.091
There's tons more tips and
tricks available to improve

00:05:16.091 --> 00:05:18.298
your rendering performance
at the Android Performance

00:05:18.298 --> 00:05:20.600
Patterns homepage, and don't
forget to join our Google+

00:05:20.600 --> 00:05:22.640
community for more great info.

00:05:22.640 --> 00:05:26.350
And remember, keep
calm, profile your code,

00:05:26.350 --> 00:05:29.420
and, as always, perf matters.

