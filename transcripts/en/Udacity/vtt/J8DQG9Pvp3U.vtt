WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:04.350
In addition to different miss rates
depending on whether we're looking

00:00:04.350 --> 00:00:08.010
globally or locally at the cache
in a multi-level cache,

00:00:08.010 --> 00:00:11.390
we have what is called
an inclusion property.

00:00:11.390 --> 00:00:15.520
The inclusion property
has to do with assuming

00:00:15.520 --> 00:00:18.420
that the block is in level one cache.

00:00:18.420 --> 00:00:23.220
Is it that it may or
may not be in the level two cache, or,

00:00:23.220 --> 00:00:25.449
it has to be in the L2 cache?

00:00:25.449 --> 00:00:30.470
And it is also possible to make
a system in which if a block is in L1,

00:00:30.470 --> 00:00:33.000
it cannot also be in L2.

00:00:33.000 --> 00:00:35.230
This is often called exclusion.

00:00:35.230 --> 00:00:40.810
This is what we usually call inclusion
and this doesn't have a name.

00:00:40.810 --> 00:00:42.700
It's neither exclusion nor inclusion.

00:00:43.740 --> 00:00:47.050
So if we just have a normal
cache hierarchy where

00:00:47.050 --> 00:00:51.300
processor accesses go to level one
cache and then the misses from that go

00:00:51.300 --> 00:00:56.620
to a larger level two cache cash,
the question is what will we get?

00:00:56.620 --> 00:01:01.450
And the answer is, unless we
explicitly try to force inclusion or

00:01:01.450 --> 00:01:04.700
exclusion, we will get this.

00:01:04.700 --> 00:01:10.060
Most of the stuff that is in L1
will also be found in L2, but

00:01:10.060 --> 00:01:12.650
there is no guarantee for that.

00:01:12.650 --> 00:01:17.670
So there could be blocks in L1
that have been replaced from L2.

00:01:17.670 --> 00:01:21.757
Let's look at the simple example,
when the L1 cache has two blocks and

00:01:21.757 --> 00:01:25.913
is fully associative, and the larger
level two cache has four blocks and

00:01:25.913 --> 00:01:27.295
is fully associative.

00:01:27.295 --> 00:01:30.100
And both of them use LRU policy.

00:01:30.100 --> 00:01:32.620
Now let's suppose that
the processor accesses block A.

00:01:32.620 --> 00:01:34.860
It's going to be a miss here,
and a miss here.

00:01:34.860 --> 00:01:36.660
It's brought from memory.

00:01:36.660 --> 00:01:40.268
Placed here and
then that is fed to the L1 cache so

00:01:40.268 --> 00:01:44.140
it places it here, so so
far we have inclusion.

00:01:44.140 --> 00:01:47.153
Let's now access block B,

00:01:47.153 --> 00:01:51.872
it gets brought from memory here and
here.

00:01:51.872 --> 00:01:53.925
We still have inclusion.
If we now access block C,

00:01:53.925 --> 00:01:58.642
it will be here and here and
we still have inclusion, but let's

00:01:58.642 --> 00:02:03.903
suppose that when we have the blocks
A and B brought in, we reaccess A.

00:02:03.903 --> 00:02:06.750
That is going to be a level one hit.

00:02:06.750 --> 00:02:11.400
So know the areal count
is in level one of this,

00:02:12.480 --> 00:02:17.330
but because there has been no access
when A was reaccessed to level two,

00:02:17.330 --> 00:02:20.810
because it was a level one hit,
so we don't go to L2.

00:02:20.810 --> 00:02:26.020
Here we still have that B is
the most recently accessed,

00:02:26.020 --> 00:02:30.920
A is the next most recently accessed,
and let's say these two are like this.

00:02:30.920 --> 00:02:33.160
Now let's say we access C.

00:02:33.160 --> 00:02:37.010
What's going to happen is we
have a miss in the L1 cache,

00:02:37.010 --> 00:02:38.590
we have a miss in the L2 cache.

00:02:38.590 --> 00:02:42.820
We bring in C and replace the least
recently used block which is this.

00:02:42.820 --> 00:02:49.620
The counters now get updated to
be three, two, one, and zero.

00:02:49.620 --> 00:02:54.930
And then C is brought into
this level one cache and

00:02:54.930 --> 00:02:58.140
replaces B, because that's
the least recently used block.

00:02:58.140 --> 00:03:00.440
And the counters become one and
zero here.

00:03:00.440 --> 00:03:02.610
So now let's say A's accessed again.

00:03:02.610 --> 00:03:04.580
That changes the counters
back to this and

00:03:04.580 --> 00:03:07.220
there is no axis to the level two cache.

00:03:07.220 --> 00:03:12.450
Let's say now we access block D,
it's going to be fetched here.

00:03:12.450 --> 00:03:16.148
The counters are updated to three two,
and zero.

00:03:16.148 --> 00:03:20.800
And D is also brought into the level
one cache and placed here.

00:03:20.800 --> 00:03:23.270
Of course that updates
the counters this way.

00:03:23.270 --> 00:03:25.170
Now, let's say A's accessed again.

00:03:25.170 --> 00:03:28.060
Now, we have the counters again,
one, zero.

00:03:28.060 --> 00:03:30.130
Let's say, now, E is now accessed.

00:03:31.380 --> 00:03:33.230
It's a miss in both caches.

00:03:33.230 --> 00:03:36.320
We bring E in and now in the L2 cache,

00:03:36.320 --> 00:03:39.650
it replaces the least recently
used block, which is A.

00:03:39.650 --> 00:03:44.490
However, in the L1 cache, it will
replace the least recently used block,

00:03:44.490 --> 00:03:45.550
which is D.

00:03:45.550 --> 00:03:48.740
So at this point,
we no longer have inclusion.

00:03:48.740 --> 00:03:53.510
Because A is in the L1 cache but
is no longer found in the L2 cache.

00:03:53.510 --> 00:03:59.090
So inclusion does not necessarily
hold when you have a cache hierarchy,

00:03:59.090 --> 00:04:03.780
because things that are frequently
accessed in the L1 cache,

00:04:03.780 --> 00:04:07.860
will not be frequently may be accessed
in L2, because all of the accesses to

00:04:07.860 --> 00:04:11.780
that block are going to L1,
and the L2 never sees them.

00:04:11.780 --> 00:04:15.110
So eventually that block
gets replaced from L2.

00:04:15.110 --> 00:04:18.980
To maintain inclusion properly,
we have to have a so

00:04:18.980 --> 00:04:23.580
called inclusion bit added to L2,
which is one.

00:04:23.580 --> 00:04:29.510
If that block is also in L1 and
when we replace things from

00:04:29.510 --> 00:04:35.300
L2 we prevent blocks whose inclusion
bit is one from being replaced.

00:04:35.300 --> 00:04:39.170
That ensures that we never replace
something that is is still in L1.

00:04:39.170 --> 00:04:44.070
So we can maintain inclusion, but
again, that requires an additional bit.

