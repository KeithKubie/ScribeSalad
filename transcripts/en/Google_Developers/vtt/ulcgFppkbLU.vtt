WEBVTT
Kind: captions
Language: en

00:00:03.734 --> 00:00:05.167
Harding: I'm John Harding.

00:00:05.167 --> 00:00:07.067
I'm the engineering manager
for our syndication team,

00:00:07.067 --> 00:00:09.567
which kind of encompasses
all of our efforts to--

00:00:09.567 --> 00:00:12.734
to bring the YouTube experience
off the YouTube Web site,

00:00:12.734 --> 00:00:14.567
and a key part of that,
as we've been talking about,

00:00:14.567 --> 00:00:16.167
is--is our APIs.

00:00:18.234 --> 00:00:19.934
So...
[clears throat]

00:00:19.934 --> 00:00:21.334
kind of give you--what the--

00:00:21.334 --> 00:00:23.067
what the big idea that
we're trying to get to today

00:00:23.067 --> 00:00:25.067
is that you can take
all the functionality

00:00:25.067 --> 00:00:27.734
that people have and love
and use on YouTube

00:00:27.734 --> 00:00:29.567
and bring that
onto your site.

00:00:29.567 --> 00:00:30.801
And so what that means is,

00:00:30.801 --> 00:00:32.400
obviously, people are used
to watching videos.

00:00:32.400 --> 00:00:33.901
And you're used to being able
to let people

00:00:33.901 --> 00:00:36.734
watch videos on your site
with the embedded player.

00:00:36.734 --> 00:00:38.734
But now the APIs
allow you to do things

00:00:38.734 --> 00:00:40.901
like search YouTube
for new videos,

00:00:40.901 --> 00:00:43.567
find more relevant content
through related,

00:00:43.567 --> 00:00:46.234
um, let users
manage their own content--

00:00:46.234 --> 00:00:47.734
their favorites,
their playlists,

00:00:47.734 --> 00:00:49.067
their subscriptions--

00:00:49.067 --> 00:00:50.734
and then,
as Hunter mentioned,

00:00:50.734 --> 00:00:52.567
a key aspect of what
we've been enabled recently

00:00:52.567 --> 00:00:55.734
is the ability to let your users
upload videos to YouTube

00:00:55.734 --> 00:00:58.834
through your own Web site,
instead of sending them to us.

00:01:01.000 --> 00:01:05.067
How many people have used
Google Data APIs before?

00:01:05.067 --> 00:01:06.734
So pretty good--
about half the audience.

00:01:06.734 --> 00:01:07.834
That's fantastic.

00:01:07.834 --> 00:01:09.200
For those of you
that haven't,

00:01:09.200 --> 00:01:12.234
I'm gonna do a very brief review
of Google Data APIs,

00:01:12.234 --> 00:01:13.734
but if you do have
more questions,

00:01:13.734 --> 00:01:16.734
I-I definitely recommend you
stop by the office-hours lounge,

00:01:16.734 --> 00:01:18.567
and we can kind of walk you
through some of them.

00:01:18.567 --> 00:01:20.901
And then I'll go over sort of
the--the common technology

00:01:20.901 --> 00:01:22.567
we have
within the YouTube API.

00:01:22.567 --> 00:01:24.100
And then we'll actually dive in
and start talking

00:01:24.100 --> 00:01:28.067
about what specific APIs we have
and what they enable you to do.

00:01:28.067 --> 00:01:30.067
[clears throat]

00:01:30.067 --> 00:01:31.901
So all
of our Google Data APIs--

00:01:31.901 --> 00:01:33.901
they--they share
a-a common protocol.

00:01:33.901 --> 00:01:36.400
They're all based off
of the Atom Publishing Protocol,

00:01:36.400 --> 00:01:38.734
and they're RESTful APIs.

00:01:38.734 --> 00:01:41.067
So all of our data
typically is represented.

00:01:41.067 --> 00:01:42.901
You can get a--different
representations

00:01:42.901 --> 00:01:44.901
depending on what
you like to work with.

00:01:44.901 --> 00:01:48.234
We do both Atom and RSS feeds,
which are XML-based,

00:01:48.234 --> 00:01:50.567
as well as JSON.

00:01:50.567 --> 00:01:52.067
And one
of the nice things is,

00:01:52.067 --> 00:01:54.734
they use standard HTTP
to do all the requests,

00:01:54.734 --> 00:01:56.901
which means that it works well
with proxies.

00:01:56.901 --> 00:01:58.234
You've a got
a wide array of--

00:01:58.234 --> 00:02:00.167
of network stacks
that you can work with,

00:02:00.167 --> 00:02:02.234
and it just uses
the different HTTP methods

00:02:02.234 --> 00:02:04.567
to perform di--
different operations.

00:02:04.567 --> 00:02:07.567
So, if you want to create,
retrieve, update, or delete,

00:02:07.567 --> 00:02:10.734
those all have
corresponding HTTP methods.

00:02:10.734 --> 00:02:12.734
We also,
within the Google Data APIs,

00:02:12.734 --> 00:02:14.400
have a series
of client libraries

00:02:14.400 --> 00:02:15.901
written
in different languages--

00:02:15.901 --> 00:02:18.901
Python, PHP,
Java, and .NET

00:02:18.901 --> 00:02:20.734
for the YouTube APIs
right now.

00:02:20.734 --> 00:02:22.234
And these make it
a little bit easier.

00:02:22.234 --> 00:02:25.067
You don't actually have to worry
about XML and the Wire Protocol.

00:02:25.067 --> 00:02:28.834
You can deal with objects
in your native language.

00:02:31.100 --> 00:02:33.400
So, within the YouTube APIs,
we have a-a couple

00:02:33.400 --> 00:02:35.734
of different types of feeds
that we deal with.

00:02:35.734 --> 00:02:38.067
The most common one
is the video feed, obviously,

00:02:38.067 --> 00:02:41.067
'cause the--the primary content
on YouTube is video.

00:02:41.067 --> 00:02:43.234
But we also have a couple
other different data types

00:02:43.234 --> 00:02:44.400
that we deal with.

00:02:44.400 --> 00:02:46.234
Users can have
subscriptions.

00:02:46.234 --> 00:02:48.234
So that's
one type of data.

00:02:48.234 --> 00:02:49.567
Playlists as well,

00:02:49.567 --> 00:02:52.567
and then contacts,
comments, and user profiles.

00:02:52.567 --> 00:02:54.567
In most cases, you know,
even subscriptions

00:02:54.567 --> 00:02:57.234
and playlists,
it's pretty straightforward.

00:02:57.234 --> 00:02:58.901
But things like profiles

00:02:58.901 --> 00:03:00.667
are a little bit different
type of data,

00:03:00.667 --> 00:03:02.567
so we'll talk
about that later.

00:03:02.567 --> 00:03:04.267
One of the things
I want to stress is that,

00:03:04.267 --> 00:03:06.400
you know, most of--YouTube
is about public sharing,

00:03:06.400 --> 00:03:07.901
and so most
of the information

00:03:07.901 --> 00:03:10.234
that people have on YouTube
is public,

00:03:10.234 --> 00:03:12.067
so things like
what videos they've uploaded,

00:03:12.067 --> 00:03:13.734
what videos they've "favorited."

00:03:13.734 --> 00:03:16.400
And so most of this--
you can get it through the APIs

00:03:16.400 --> 00:03:19.067
without any kind
of authentication or log-in.

00:03:19.067 --> 00:03:22.067
Some of this information--people
may choose to make it private.

00:03:22.067 --> 00:03:23.734
So videos may be private.

00:03:23.734 --> 00:03:26.067
Playlists may be private,
for example.

00:03:26.067 --> 00:03:28.901
And in that case, you would
require authentication.

00:03:28.901 --> 00:03:30.734
But on top of that,

00:03:30.734 --> 00:03:33.067
anytime you're gonna modify
any data on the site,

00:03:33.067 --> 00:03:35.901
whether that's user data
or whether that's public data,

00:03:35.901 --> 00:03:37.601
you'll have to do
authentication,

00:03:37.601 --> 00:03:39.234
and we'll talk
about the different ways

00:03:39.234 --> 00:03:42.167
that you can deal with log-in
and authentication later on.

00:03:44.234 --> 00:03:46.234
So what are these
different types of feeds?

00:03:46.234 --> 00:03:48.901
As I said, the most common one
is gonna be a video feed,

00:03:48.901 --> 00:03:51.067
and this is basically
just a series of videos.

00:03:51.067 --> 00:03:53.400
You can think of it as,
"What data would I need to--

00:03:53.400 --> 00:03:56.234
to show that set
of search results on the right?"

00:03:56.234 --> 00:03:57.734
And so these use--
these are used

00:03:57.734 --> 00:03:59.901
by the vast majority
of our APIs.

00:03:59.901 --> 00:04:03.234
So, obviously, you know,
search results, related videos--

00:04:03.234 --> 00:04:05.901
what we call our standard feeds,
which are sort of the--

00:04:05.901 --> 00:04:07.400
the sets of popular content.

00:04:07.400 --> 00:04:09.400
Obviously,
those are all lists of videos,

00:04:09.400 --> 00:04:11.601
and so we have a video feed,

00:04:11.601 --> 00:04:13.734
but also some
of the more customized data--

00:04:13.734 --> 00:04:15.400
user favorites, uploads,

00:04:15.400 --> 00:04:17.234
what they've put
into a playlist--

00:04:17.234 --> 00:04:20.234
all of these are--
are the exact same type of data.

00:04:20.234 --> 00:04:22.734
And so, whether you're doing
search results or favorites,

00:04:22.734 --> 00:04:26.334
different use cases,
same structure of data.

00:04:28.567 --> 00:04:32.234
So I'm trying to--to do a mix
of different examples here.

00:04:32.234 --> 00:04:33.901
So I have some XML,

00:04:33.901 --> 00:04:36.067
for people who like going
all the way down to the wire.

00:04:36.067 --> 00:04:37.234
I also have some examples

00:04:37.234 --> 00:04:39.234
in a couple
of our client libraries.

00:04:39.234 --> 00:04:40.567
So we'll try to mix up

00:04:40.567 --> 00:04:42.734
so everybody gets a little bit
of what they like.

00:04:42.734 --> 00:04:44.267
What I just want to do
is highlight,

00:04:44.267 --> 00:04:46.734
you know,
what the actual feeds,

00:04:46.734 --> 00:04:49.234
the content that we serve--
from our servers look like.

00:04:49.234 --> 00:04:52.400
And this gives you an idea
both of, um...

00:04:52.400 --> 00:04:54.567
what information we have
and how it's structured.

00:04:54.567 --> 00:04:56.567
But this is also really useful
when you're debugging.

00:04:56.567 --> 00:04:59.400
You can actually load up any
of our feeds in the browser

00:04:59.400 --> 00:05:01.000
and just examine the XML,

00:05:01.000 --> 00:05:02.734
and so it helps you
when you're debugging.

00:05:02.734 --> 00:05:05.067
So it's useful to see
what it looks like.

00:05:05.067 --> 00:05:07.734
So, up top, you know,
this is a standard Atom feed.

00:05:07.734 --> 00:05:09.234
It's XML.

00:05:09.234 --> 00:05:10.901
We use the Atom name space.

00:05:10.901 --> 00:05:13.234
All of that's
pretty straightforward.

00:05:13.234 --> 00:05:16.901
What we have sprinkled liberally
throughout all of our feeds

00:05:16.901 --> 00:05:18.734
are related links.

00:05:18.734 --> 00:05:20.901
And so this provides
a way for you to navigate

00:05:20.901 --> 00:05:24.234
from one API call to another
or from one feed to another.

00:05:24.234 --> 00:05:27.067
You can just generate the URLs
on your own,

00:05:27.067 --> 00:05:29.400
but it's often useful to be able
to just extract the links

00:05:29.400 --> 00:05:31.234
and navigate that way.

00:05:31.234 --> 00:05:33.734
In some cases, it's extremely
important to do this,

00:05:33.734 --> 00:05:35.567
and the one
that I've highlighted here

00:05:35.567 --> 00:05:36.734
is a related link

00:05:36.734 --> 00:05:38.901
for the next set
of search results.

00:05:38.901 --> 00:05:41.067
So, if you're retrieving
search results

00:05:41.067 --> 00:05:43.400
and you want to page through
a lot of content,

00:05:43.400 --> 00:05:46.234
the way our search index works
is results are--

00:05:46.234 --> 00:05:48.400
the total number of results
is approximate.

00:05:48.400 --> 00:05:51.100
And so we may tell you
there's some number of results,

00:05:51.100 --> 00:05:52.734
but it's not necessarily
gonna be exact.

00:05:52.734 --> 00:05:54.000
And so it's important

00:05:54.000 --> 00:05:56.734
to use the "next" and "previous"
links for pagination

00:05:56.734 --> 00:05:59.400
to--to kind of sequence
through those.

00:05:59.400 --> 00:06:01.734
Speaking of total results,

00:06:01.734 --> 00:06:03.567
we use the open search
name space

00:06:03.567 --> 00:06:06.234
for telling you where you are
within those results.

00:06:06.234 --> 00:06:10.000
And again, that total number,
typically, is an approximation.

00:06:12.734 --> 00:06:14.133
Beyond that,
then you start getting

00:06:14.133 --> 00:06:17.567
into what information we provide
with each video in the feed.

00:06:17.567 --> 00:06:19.567
And so, obviously, you've got
some straightforward things.

00:06:19.567 --> 00:06:22.734
You've got title.
You've got the--the uploader.

00:06:22.734 --> 00:06:24.434
But what actually
gets pretty interesting

00:06:24.434 --> 00:06:28.400
is when you start digging
into the entry itself.

00:06:28.400 --> 00:06:31.734
So we have a couple different
categories that we use to--

00:06:31.734 --> 00:06:34.234
to sort of label content
within YouTube.

00:06:34.234 --> 00:06:35.734
There's three
that apply to videos.

00:06:35.734 --> 00:06:37.901
I'm gonna talk
about two of them right now.

00:06:37.901 --> 00:06:39.067
So one is keywords.

00:06:39.067 --> 00:06:40.901
This is when you upload a video,
you can specify

00:06:40.901 --> 00:06:42.901
a couple different keywords
for the video.

00:06:42.901 --> 00:06:45.400
We provide those
with the keywords scheme.

00:06:45.400 --> 00:06:47.234
And then the actual category

00:06:47.234 --> 00:06:48.901
that this video
has been assigned to,

00:06:48.901 --> 00:06:51.667
so comedy or sports
or politics.

00:06:53.567 --> 00:06:55.067
As I mentioned,
we get the title.

00:06:55.067 --> 00:06:57.901
You get the description--kind of
the basic stuff you'd expect.

00:06:57.901 --> 00:07:00.334
And then we have more
of these related links.

00:07:00.334 --> 00:07:01.634
So, in this case,

00:07:01.634 --> 00:07:04.067
this is the--the YouTube
watch page for the video,

00:07:04.067 --> 00:07:07.067
if you want to be able to--
to navigate them to YouTube,

00:07:07.067 --> 00:07:09.400
as well as, you know,
related video about--

00:07:09.400 --> 00:07:11.400
or related data
about the video,

00:07:11.400 --> 00:07:14.234
so if you want to see what
responses we have for the video

00:07:14.234 --> 00:07:17.267
or get other
related videos to it.

00:07:17.267 --> 00:07:19.067
But what you're probably
interested in is,

00:07:19.067 --> 00:07:20.901
"How do I actually play
this video back?"

00:07:20.901 --> 00:07:22.734
Maybe you could direct them
to our site,

00:07:22.734 --> 00:07:26.567
but you can also look
into media RSS extensions

00:07:26.567 --> 00:07:28.734
to see, "How do I get
the embeddable player

00:07:28.734 --> 00:07:30.234
for this video?"

00:07:30.234 --> 00:07:32.901
And so you can see here,
we've got a link to the Swiff.

00:07:32.901 --> 00:07:36.400
We tell you
what the duration is,

00:07:36.400 --> 00:07:39.234
and then we actually provide
a couple different formats

00:07:39.234 --> 00:07:41.234
of many of our videos.

00:07:41.234 --> 00:07:44.234
So format 5
is the embeddable Flash player.

00:07:44.234 --> 00:07:47.067
So you can tell--either look at
the format to see that it's 5,

00:07:47.067 --> 00:07:48.400
or you look
at the MIME type

00:07:48.400 --> 00:07:50.567
and see
that it's a Flash content.

00:07:50.567 --> 00:07:53.901
We also provide mobile streams
for our videos.

00:07:53.901 --> 00:07:56.400
And then, as I said, the--
that media player

00:07:56.400 --> 00:07:59.734
will be the link
back to our watch page.

00:07:59.734 --> 00:08:02.234
We also give you access
to the thumbnails for the video.

00:08:02.234 --> 00:08:04.601
So, on the site,
we--we show one video,

00:08:04.601 --> 00:08:05.901
typically,
for a thumbnail.

00:08:05.901 --> 00:08:07.234
But if you've
uploaded videos,

00:08:07.234 --> 00:08:08.901
you see that we actually
generate three,

00:08:08.901 --> 00:08:11.567
and we allow the user
to choose between those.

00:08:11.567 --> 00:08:12.901
I've only shown you one here.

00:08:12.901 --> 00:08:14.901
We actually provide you links
to all the thumbnails

00:08:14.901 --> 00:08:16.567
within the feed responses.

00:08:16.567 --> 00:08:18.901
And we also have
a higher-quality version

00:08:18.901 --> 00:08:20.234
of some thumbnails available,

00:08:20.234 --> 00:08:24.067
which is why we tell you
the time and then the size.

00:08:24.067 --> 00:08:25.567
And then we also give you
the statistics

00:08:25.567 --> 00:08:28.567
that you'd expect to get--
the view count, the rating,

00:08:28.567 --> 00:08:31.400
how many times
it's been "favorited."

00:08:31.400 --> 00:08:34.067
One of the things
I also want to highlight is--

00:08:34.067 --> 00:08:35.234
there are two different ways

00:08:35.234 --> 00:08:37.067
that we provide links
to related feeds.

00:08:37.067 --> 00:08:39.734
So we've seen
the standard Atom link element,

00:08:39.734 --> 00:08:42.901
but we also have a Google Data
extension called FeedLink.

00:08:42.901 --> 00:08:44.901
And what this allows us to do
is give you a hint

00:08:44.901 --> 00:08:47.734
about what you can expect
will be in that feed.

00:08:47.734 --> 00:08:50.234
So that may be either
account hint, like you see here,

00:08:50.234 --> 00:08:52.400
so you don't have to retrieve
that whole feed

00:08:52.400 --> 00:08:54.734
just to get an idea
of how much content is there.

00:08:54.734 --> 00:08:56.067
But it also allows us

00:08:56.067 --> 00:08:58.400
to inline insert a couple
elements from that feed.

00:08:58.400 --> 00:09:01.400
So maybe you can show
the first couple comments

00:09:01.400 --> 00:09:04.734
without having to fetch
the entire feed.

00:09:04.734 --> 00:09:06.901
All right, so that's enough XML
for a while.

00:09:06.901 --> 00:09:08.901
If--for those of you
who don't speak in XML,

00:09:08.901 --> 00:09:10.400
the plain English version
is basically--

00:09:10.400 --> 00:09:13.234
everything you see up here
is what we provide.

00:09:13.234 --> 00:09:14.601
You can think about it,
as I said,

00:09:14.601 --> 00:09:17.067
anything you need to show
that set of search results

00:09:17.067 --> 00:09:18.400
or render your own UI

00:09:18.400 --> 00:09:21.334
with all the description
and data about a video.

00:09:23.067 --> 00:09:24.467
One thing I want to mention--

00:09:24.467 --> 00:09:25.901
as we're going, feel free
to kind of raise your hand

00:09:25.901 --> 00:09:27.234
if you've got questions.

00:09:27.234 --> 00:09:28.734
We can kind of address those
as we go,

00:09:28.734 --> 00:09:30.234
instead of saving them up.

00:09:30.234 --> 00:09:31.567
Yeah.

00:09:31.567 --> 00:09:34.234
man: When you said--
when you fetch a set of data,

00:09:34.234 --> 00:09:37.734
is the entire interface you see
usually available

00:09:37.734 --> 00:09:41.234
specifically
for rating the video?

00:09:41.234 --> 00:09:43.400
Harding: I'm not sure
I quite follow.

00:09:43.400 --> 00:09:45.567
man: So, if you have a rating
of, say, one in five stars.

00:09:45.567 --> 00:09:46.567
Harding: Right.

00:09:46.567 --> 00:09:48.067
man: Can you import

00:09:48.067 --> 00:09:51.567
that interface
to your local instance?

00:09:51.567 --> 00:09:53.901
Your local representation
of it on your site?

00:09:53.901 --> 00:09:55.734
Harding: Yeah, I mean, you--
you can show that you--

00:09:55.734 --> 00:09:57.067
and in fact, we give you--

00:09:57.067 --> 00:09:59.734
let's see
if I can pull this back up.

00:09:59.734 --> 00:10:02.033
Within the rating tag here,
like--

00:10:02.033 --> 00:10:03.501
woman: Can you repeat
the question?

00:10:03.501 --> 00:10:05.701
Harding: Oh, the question was,
"Do we give you enough data

00:10:05.701 --> 00:10:07.734
"to sort of present the same UI
that we have on YouTube

00:10:07.734 --> 00:10:09.234
for something like rating?"

00:10:09.234 --> 00:10:10.734
In fact, we actually give you--

00:10:10.734 --> 00:10:12.567
I mean, pretty--pretty
fine-grained detail

00:10:12.567 --> 00:10:13.901
about--about that.

00:10:13.901 --> 00:10:15.501
man: Okay, great.

00:10:18.601 --> 00:10:19.567
Harding: All right.

00:10:19.567 --> 00:10:21.067
So some of the other APIs

00:10:21.067 --> 00:10:22.734
that we have that deal
with video content--

00:10:22.734 --> 00:10:25.067
search is, obviously,
a-a pretty popular thing

00:10:25.067 --> 00:10:27.400
that you'll want
to be able to do.

00:10:27.400 --> 00:10:29.734
So how does search work?

00:10:29.734 --> 00:10:32.901
There's an API entry point
to--to issue a search.

00:10:32.901 --> 00:10:35.567
And we have a-a pretty broad
array of query parameters

00:10:35.567 --> 00:10:36.734
that you can use.

00:10:36.734 --> 00:10:38.567
I've highlighted
a couple common ones here.

00:10:38.567 --> 00:10:40.400
Obviously, you want
to be able to specify

00:10:40.400 --> 00:10:42.400
what search terms
you're interested in.

00:10:42.400 --> 00:10:44.400
So there's a parameter
to specify that.

00:10:44.400 --> 00:10:45.901
But we give you
a couple different ways

00:10:45.901 --> 00:10:47.567
that you can rank
your results.

00:10:47.567 --> 00:10:49.067
So you can do relevance,

00:10:49.067 --> 00:10:52.734
which is sort of our--
our Google ranking of the video,

00:10:52.734 --> 00:10:56.567
publish date, so if you want
to focus on recent videos,

00:10:56.567 --> 00:10:58.567
view count
and rating as well.

00:10:58.567 --> 00:11:01.567
And when we--when we updated
our APIs in March,

00:11:01.567 --> 00:11:03.067
we also started
internationalizing

00:11:03.067 --> 00:11:04.234
the APIs as well.

00:11:04.234 --> 00:11:05.734
And so, if you have users

00:11:05.734 --> 00:11:07.400
that are
in a specific country,

00:11:07.400 --> 00:11:09.567
you can actually say,
"Give me results

00:11:09.567 --> 00:11:12.734
that are tailored
to that country by relevance."

00:11:12.734 --> 00:11:15.734
We also allow you
to restrict results to--

00:11:15.734 --> 00:11:18.734
to content
in a specific language.

00:11:18.734 --> 00:11:21.400
One thing I want to point is
that right now that restriction

00:11:21.400 --> 00:11:23.901
is based off of the text
associated with the video,

00:11:23.901 --> 00:11:26.234
rather than the spoken word.

00:11:26.234 --> 00:11:28.234
And then finally
we have format restricts.

00:11:28.234 --> 00:11:30.234
So I mentioned that we provide
a couple different formats

00:11:30.234 --> 00:11:31.567
of videos.

00:11:31.567 --> 00:11:33.734
And we allow you to say,
"I want to only get results

00:11:33.734 --> 00:11:35.734
that are available
in a given format."

00:11:35.734 --> 00:11:37.567
So, if you want to say,
"Only show me videos

00:11:37.567 --> 00:11:40.067
that I can embed off-site,"

00:11:40.067 --> 00:11:42.734
you can specify format 5,
which is our embeddable format,

00:11:42.734 --> 00:11:43.901
and that'll make sure

00:11:43.901 --> 00:11:45.567
that you only get videos
that can be embedded.

00:11:45.567 --> 00:11:47.901
Users are allowed to--
when they upload a video,

00:11:47.901 --> 00:11:51.567
some users say, "I only want
this to show up on YouTube."

00:11:51.567 --> 00:11:52.834
So we--basically,
we allow you

00:11:52.834 --> 00:11:55.067
to either filter those
out of the search results,

00:11:55.067 --> 00:11:57.067
or you can tell by looking
at the response

00:11:57.067 --> 00:12:00.501
if we--we gave you
that embeddable player or not.

00:12:00.501 --> 00:12:02.067
So a couple examples--
the first thing

00:12:02.067 --> 00:12:03.901
everybody always wants to do
is search for Lolcats.

00:12:03.901 --> 00:12:05.400
So, if that's
what you're after,

00:12:05.400 --> 00:12:07.400
that first one
is--is all you need.

00:12:07.400 --> 00:12:09.234
But I got
a couple other examples there.

00:12:09.234 --> 00:12:12.901
And then we actually
have a great demo on--

00:12:12.901 --> 00:12:15.067
on code.google.com

00:12:15.067 --> 00:12:16.734
that I wanted to bring up,

00:12:16.734 --> 00:12:20.167
which kind of is a--
where did this go?

00:12:24.667 --> 00:12:26.100
Here we go.

00:12:26.100 --> 00:12:28.901
So, if you go to our code site
and look for documentation,

00:12:28.901 --> 00:12:32.734
there's kind of an interactive
demo that lets you experiment--

00:12:32.734 --> 00:12:35.234
see all the different parameters
that you can specify.

00:12:35.234 --> 00:12:37.067
So, if I go back--

00:12:37.067 --> 00:12:40.100
Sorry, I can't really read
on that--that tiny monitor.

00:12:40.100 --> 00:12:41.734
But say I wanted to search
for Lolcats.

00:12:41.734 --> 00:12:44.734
We get a great error response,
which is what we were after.

00:12:44.734 --> 00:12:46.734
So the d--the dangers
of live demo.

00:12:46.734 --> 00:12:49.067
But this kind of lets you
experiment and play around

00:12:49.067 --> 00:12:52.000
with the different parameters
that we have.

00:12:53.901 --> 00:12:56.000
All right.

00:12:58.901 --> 00:13:01.901
So I promised I wouldn't do
any more XML for a while,

00:13:01.901 --> 00:13:03.567
so I wanted to go
through an example

00:13:03.567 --> 00:13:06.234
using our
Python client library

00:13:06.234 --> 00:13:09.234
of how you would actually do
a search.

00:13:09.234 --> 00:13:10.567
So all
of our client libraries,

00:13:10.567 --> 00:13:12.234
you actually create
a service object,

00:13:12.234 --> 00:13:13.901
which is how
you access the APIs,

00:13:13.901 --> 00:13:15.734
so that's pretty boilerplate.

00:13:15.734 --> 00:13:18.734
And then say we wanted to do
a search for "byobw."

00:13:18.734 --> 00:13:21.567
This was the San Francisco
Bring Your Own Big Wheel Race

00:13:21.567 --> 00:13:22.734
from a little while ago.

00:13:22.734 --> 00:13:24.067
And I want to get
the--the popular ones.

00:13:24.067 --> 00:13:25.901
I want to see
what was most viewed.

00:13:25.901 --> 00:13:28.901
So I set up my query object.

00:13:28.901 --> 00:13:31.067
Run that query
on the service,

00:13:31.067 --> 00:13:33.400
and I'm gonna get back
one of those video feeds.

00:13:33.400 --> 00:13:36.400
And so--you know, depending
on what you want to do for a UI.

00:13:36.400 --> 00:13:37.734
In this case,
I'm just gonna grab

00:13:37.734 --> 00:13:39.567
the first thumbnail
out of each entry

00:13:39.567 --> 00:13:41.734
and the title
and show that to you.

00:13:41.734 --> 00:13:45.734
If we wanted to see
what that would look like,

00:13:45.734 --> 00:13:47.400
that is gonna be
this guy here.

00:13:47.400 --> 00:13:48.901
So this is the--
the set of search results

00:13:48.901 --> 00:13:50.901
for that
Bring Your Own Big Wheel Race.

00:13:50.901 --> 00:13:52.901
As I said,
all that information

00:13:52.901 --> 00:13:54.901
that you need to render
your UI is there.

00:13:54.901 --> 00:13:57.734
This was just a simplified UI
to make the code easy.

00:13:57.734 --> 00:13:59.567
But you can provide
an embeddable player.

00:13:59.567 --> 00:14:03.000
You can provide links, rating,
whatever you want to do.

00:14:08.200 --> 00:14:09.601
All right.

00:14:09.601 --> 00:14:12.734
So another common operation
is accessing our standard feeds.

00:14:12.734 --> 00:14:13.901
As I said, this is the--

00:14:13.901 --> 00:14:16.234
the lists of popular content
on YouTube.

00:14:16.234 --> 00:14:17.501
You can think about it

00:14:17.501 --> 00:14:20.400
as the equivalent
of the videos tab that we had.

00:14:20.400 --> 00:14:23.234
So each of our standard feeds
has a name,

00:14:23.234 --> 00:14:25.234
and they're accessed by name.

00:14:25.234 --> 00:14:26.734
So some common examples is,

00:14:26.734 --> 00:14:28.734
you know,
if you want featured videos,

00:14:28.734 --> 00:14:30.400
if you want to see
what are the most viewed

00:14:30.400 --> 00:14:32.067
or the top-rated videos.

00:14:32.067 --> 00:14:34.234
What's interesting is we provide
a lot of different ways

00:14:34.234 --> 00:14:36.734
that you can actually slice
that data.

00:14:36.734 --> 00:14:40.234
So most of these feeds
allow you to slice by time,

00:14:40.234 --> 00:14:43.734
so whether that's today,
this week, this month.

00:14:43.734 --> 00:14:45.267
And one thing
I-I always mention,

00:14:45.267 --> 00:14:47.067
just 'cause it tends to confuse
people a little bit,

00:14:47.067 --> 00:14:50.067
is those time slices mean
when the video was uploaded.

00:14:50.067 --> 00:14:51.868
And so, if you're saying,
"What's top-rated?"

00:14:51.868 --> 00:14:54.734
it doesn't mean what got
the most ratings today.

00:14:54.734 --> 00:14:56.567
It means what
are the highest-rated videos

00:14:56.567 --> 00:15:00.000
that were uploaded today
or uploaded this week.

00:15:00.000 --> 00:15:02.734
But we also allow you to break
all these down by region.

00:15:02.734 --> 00:15:04.901
So, for all the countries
that YouTube supports,

00:15:04.901 --> 00:15:06.167
we have a separate list

00:15:06.167 --> 00:15:08.901
of, you know, what
was most discussed in France,

00:15:08.901 --> 00:15:11.901
what was top-rated
in Germany.

00:15:11.901 --> 00:15:14.234
And then they're also
broken down by categories.

00:15:14.234 --> 00:15:17.067
You can say, "Well, within
sports or within politics."

00:15:17.067 --> 00:15:19.567
And so you can mix and match
all those different parameters,

00:15:19.567 --> 00:15:21.734
whether it's time,
the feed type,

00:15:21.734 --> 00:15:24.167
the region,
or the category.

00:15:26.400 --> 00:15:29.400
So, for those of you that
speak PHP instead of Python,

00:15:29.400 --> 00:15:30.901
again, this
is sort of the equivalent.

00:15:30.901 --> 00:15:33.400
You got to instantiate
the service.

00:15:33.400 --> 00:15:35.901
Accessing standard feeds
is a little bit simpler.

00:15:35.901 --> 00:15:37.734
They each have
their own identifier.

00:15:37.734 --> 00:15:39.567
You retrieve that feed.

00:15:39.567 --> 00:15:41.901
Then here, this is just
for compactness,

00:15:41.901 --> 00:15:43.234
just printing out the title.

00:15:43.234 --> 00:15:45.000
So you can see, when you use
the client libraries,

00:15:45.000 --> 00:15:48.067
the code to access
the service is very simple,

00:15:48.067 --> 00:15:50.400
and you don't actually have
to worry about XML parsing

00:15:50.400 --> 00:15:52.501
or protocol management.

00:15:55.234 --> 00:15:56.400
The other common video feed

00:15:56.400 --> 00:15:58.734
I wanted to talk about
was related videos.

00:15:58.734 --> 00:16:01.000
So basically, you know,

00:16:01.000 --> 00:16:03.901
corresponding to that little
module on the page there.

00:16:03.901 --> 00:16:05.567
Again, these are--
are quite simple,

00:16:05.567 --> 00:16:08.067
and so the code samples get
kind of shorter and shorter,

00:16:08.067 --> 00:16:09.901
'cause there's really not
that much to show.

00:16:09.901 --> 00:16:12.901
You're just gonna get a series
of related videos.

00:16:12.901 --> 00:16:16.234
Just tell us what video you want
as the source of related,

00:16:16.234 --> 00:16:18.901
and we'll give you back
that set of results.

00:16:20.567 --> 00:16:23.234
So I kind of want to do
a quick demo.

00:16:23.234 --> 00:16:26.467
We've got, uh...

00:16:26.467 --> 00:16:30.234
This is a simple app-engine site
that we've put together.

00:16:30.234 --> 00:16:34.067
If you wanted to check it out,
it's ytapidemo.appspot.

00:16:34.067 --> 00:16:36.334
So, in this case, I wanted to do
a little bit different UI

00:16:36.334 --> 00:16:37.400
for displaying results.

00:16:37.400 --> 00:16:38.734
I want to show
all three thumbnails,

00:16:38.734 --> 00:16:40.901
'cause maybe I think
that gives you a better--

00:16:40.901 --> 00:16:43.567
better handle
on what the content is there.

00:16:43.567 --> 00:16:47.901
And so let's say I wanted
to search for Google I/O

00:16:47.901 --> 00:16:50.734
to see some talks
from Google I/O,

00:16:50.734 --> 00:16:54.501
or let's say,
as always, Lolcats.

00:16:57.234 --> 00:17:00.334
And so, you know, basically the
code for this is pretty simple.

00:17:00.334 --> 00:17:01.734
In this case, it's--

00:17:01.734 --> 00:17:03.234
I have some hand-coded stuff

00:17:03.234 --> 00:17:05.400
instead of using
the client libraries.

00:17:05.400 --> 00:17:08.767
But also what I wanted to show
is that you can kind of use this

00:17:08.767 --> 00:17:11.234
to combine content
in your own way.

00:17:11.234 --> 00:17:12.734
So, in this case,
for the home page,

00:17:12.734 --> 00:17:15.567
maybe I wanted to show a couple
default video selections.

00:17:15.567 --> 00:17:17.234
I've grabbed
just one video each

00:17:17.234 --> 00:17:20.234
from most viewed, top-rated,
and featured content,

00:17:20.234 --> 00:17:22.234
and so that way,
when people come to the site,

00:17:22.234 --> 00:17:24.400
they get a little bit of content
before they start searching

00:17:24.400 --> 00:17:25.868
or looking
for their own content.

00:17:30.100 --> 00:17:31.901
So, with all of that,
that's, you know,

00:17:31.901 --> 00:17:34.067
that's not customized,
that's not personalized.

00:17:34.067 --> 00:17:36.400
When people do a search, they're
gonna get the same results.

00:17:36.400 --> 00:17:38.734
When people look at related
or those standard feeds,

00:17:38.734 --> 00:17:40.234
they get the same results.

00:17:40.234 --> 00:17:41.734
And one of the things
that we've learned

00:17:41.734 --> 00:17:44.067
about the YouTube experience
is that personalization

00:17:44.067 --> 00:17:46.400
is core
to the YouTube experience.

00:17:46.400 --> 00:17:48.400
It's all about getting content
that I want to see

00:17:48.400 --> 00:17:50.734
or managing,
you know, my videos

00:17:50.734 --> 00:17:53.567
or sharing videos
with my friends.

00:17:53.567 --> 00:17:55.067
And so we have
a couple different ways

00:17:55.067 --> 00:17:56.567
that we allow people
to personalize

00:17:56.567 --> 00:17:58.000
their YouTube experience.

00:17:58.000 --> 00:18:00.901
You know, some of these you may
have used on YouTube yourself,

00:18:00.901 --> 00:18:02.400
some of them you may not.

00:18:02.400 --> 00:18:04.901
Subscriptions
allow you to be notified

00:18:04.901 --> 00:18:06.400
when new videos
are available,

00:18:06.400 --> 00:18:09.734
either from certain users
or matching certain queries.

00:18:09.734 --> 00:18:11.567
You can use playlists
and favorites

00:18:11.567 --> 00:18:15.067
to manage content that you like
or that you're interested in.

00:18:15.067 --> 00:18:17.234
Obviously, you can point people
at your own uploads

00:18:17.234 --> 00:18:18.901
to share your videos
with them.

00:18:18.901 --> 00:18:20.567
And also people
can manage their contacts--

00:18:20.567 --> 00:18:22.234
the people
that they want to share

00:18:22.234 --> 00:18:24.501
and receive videos from
on the site.

00:18:26.067 --> 00:18:28.067
So subscriptions--there's
a couple different things

00:18:28.067 --> 00:18:30.067
that you can do
with subscriptions on the site.

00:18:30.067 --> 00:18:31.734
You can subscribe
to a user's channel,

00:18:31.734 --> 00:18:33.067
such as lonelygirl15,

00:18:33.067 --> 00:18:34.734
if you want to see
the new videos there.

00:18:34.734 --> 00:18:37.734
But you can also subscribe
to a user's favorites,

00:18:37.734 --> 00:18:39.901
and you can subscribe
to a search query.

00:18:39.901 --> 00:18:41.400
We recently added the ability

00:18:41.400 --> 00:18:44.067
to subscribe to a user's
playlist on the site,

00:18:44.067 --> 00:18:47.567
and that's still to be
implemented within the API.

00:18:47.567 --> 00:18:49.734
And so, when you're looking
at a user's subscriptions,

00:18:49.734 --> 00:18:52.234
you want to know what kind
of a subscription it is.

00:18:52.234 --> 00:18:53.734
And so we actually tell you,

00:18:53.734 --> 00:18:56.067
is this a subscription
to a user's channel

00:18:56.067 --> 00:18:58.400
or is it a subscription
to favorites or a query.

00:18:58.400 --> 00:18:59.901
And depending on the type
of subscription,

00:18:59.901 --> 00:19:01.267
there's extra data.

00:19:01.267 --> 00:19:03.234
So you can say, "Well,
if it's a channel subscription,

00:19:03.234 --> 00:19:04.567
"who did I subscribe to?

00:19:04.567 --> 00:19:06.567
"If it's a search-query
subscription,

00:19:06.567 --> 00:19:08.067
what was that query?"

00:19:08.067 --> 00:19:09.734
And that allows you
to do your own UI

00:19:09.734 --> 00:19:11.901
for displaying
the subscription itself

00:19:11.901 --> 00:19:13.734
without having
to try to parse out,

00:19:13.734 --> 00:19:15.701
you know, the title of the--

00:19:15.701 --> 00:19:16.901
the subscription.

00:19:16.901 --> 00:19:19.734
Like, if you look on--
on our UI for the site,

00:19:19.734 --> 00:19:22.067
you know, if it's a user,
we just show the user name.

00:19:22.067 --> 00:19:24.067
If it's a search query,
like cookies,

00:19:24.067 --> 00:19:27.434
we put it in--in quotes.

00:19:27.434 --> 00:19:29.234
So it's just useful to be able
to differentiate

00:19:29.234 --> 00:19:30.834
between those two.

00:19:33.901 --> 00:19:36.067
So back to--to XML.

00:19:36.067 --> 00:19:39.200
So we use category schemes again
for subscription types

00:19:39.200 --> 00:19:40.567
to tell you what it is.

00:19:40.567 --> 00:19:43.067
So, in this case, this first one
is a channel subscription,

00:19:43.067 --> 00:19:44.567
and that's why
there's a user name

00:19:44.567 --> 00:19:46.901
that tells me what the target
of the subscription is,

00:19:46.901 --> 00:19:48.901
as well as the link
to the content.

00:19:48.901 --> 00:19:51.067
Again, we use those FeedLinks
so that you get an idea

00:19:51.067 --> 00:19:53.567
of how much content
is available in that feed

00:19:53.567 --> 00:19:56.067
without having to fetch it
up front.

00:19:56.067 --> 00:19:58.567
Alternately, I may have had
a-a search-query subscription,

00:19:58.567 --> 00:20:00.067
in which case
there's a query string,

00:20:00.067 --> 00:20:02.601
instead of a-a user name.

00:20:04.901 --> 00:20:07.234
So playlists--a user may have
multiple playlists

00:20:07.234 --> 00:20:08.567
that they manage
on the site.

00:20:08.567 --> 00:20:09.901
You can see
in this screen shot here,

00:20:09.901 --> 00:20:11.567
I've got a couple different
playlists that I--

00:20:11.567 --> 00:20:14.067
that I have.

00:20:14.067 --> 00:20:15.734
And when you're iterating
over users' playlists,

00:20:15.734 --> 00:20:17.400
there's a couple of different
pieces of information

00:20:17.400 --> 00:20:19.734
that you'll get
about the playlist as a whole.

00:20:19.734 --> 00:20:23.067
So every playlist has title,
description, and tags.

00:20:23.067 --> 00:20:26.901
But then also just a pointer to
the contents of that playlist.

00:20:26.901 --> 00:20:28.901
The--the contents
of that playlist

00:20:28.901 --> 00:20:31.400
are basically the same
as all of our other video feeds.

00:20:31.400 --> 00:20:32.567
The only thing
that's different

00:20:32.567 --> 00:20:34.734
about a playlist
is that it's ordered,

00:20:34.734 --> 00:20:35.901
'cause the user can manage

00:20:35.901 --> 00:20:37.734
the order of elements
within a playlist.

00:20:37.734 --> 00:20:39.901
And so we also tell you
for each entry in a playlist

00:20:39.901 --> 00:20:41.567
what the position is.

00:20:41.567 --> 00:20:43.567
It's not as useful
when you're fetching it,

00:20:43.567 --> 00:20:45.734
'cause you're probably getting
it in the default order anyway,

00:20:45.734 --> 00:20:46.934
but if you want
to allow users

00:20:46.934 --> 00:20:49.400
to manage their own playlists
on your site,

00:20:49.400 --> 00:20:52.667
you'd want to be able to reorder
the position of elements.

00:20:55.567 --> 00:20:56.901
Other customizable feeds--

00:20:56.901 --> 00:20:59.400
we have favorites
and user uploads.

00:20:59.400 --> 00:21:01.234
So, if I "favorited" videos
on the site,

00:21:01.234 --> 00:21:03.067
a lot of people use this
to keep track of content

00:21:03.067 --> 00:21:05.400
that they're interested in,
but also, increasingly,

00:21:05.400 --> 00:21:07.400
as we added
those subscription features,

00:21:07.400 --> 00:21:09.400
people are using favorites
to keep track of content

00:21:09.400 --> 00:21:11.734
that they want to share
with everybody else.

00:21:11.734 --> 00:21:13.234
So, instead
of explicitly saying,

00:21:13.234 --> 00:21:15.067
"I want to send this video
to Stephan,"

00:21:15.067 --> 00:21:17.067
or, "I want to send that video
to Hunter,"

00:21:17.067 --> 00:21:18.300
I can just favorite it

00:21:18.300 --> 00:21:19.901
and know that they're gonna look
at my favorites

00:21:19.901 --> 00:21:22.234
and see new videos
as I add them.

00:21:22.234 --> 00:21:23.734
This has been actually
a popular feature

00:21:23.734 --> 00:21:26.067
that some API clients
have added,

00:21:26.067 --> 00:21:27.734
such as Facebook or FriendFeed,

00:21:27.734 --> 00:21:31.067
to be able to see what users
have been doing on YouTube.

00:21:32.567 --> 00:21:36.067
So favorites is basically
a default, vanilla video feed,

00:21:36.067 --> 00:21:37.234
just a set of videos

00:21:37.234 --> 00:21:39.901
that the user
has marked as favorites.

00:21:39.901 --> 00:21:41.734
When you're looking
at users' upload feeds,

00:21:41.734 --> 00:21:43.501
it--it depends
a little bit--

00:21:43.501 --> 00:21:44.868
the behavior varies,

00:21:44.868 --> 00:21:47.234
depending on whether
the user's logged in or not.

00:21:47.234 --> 00:21:50.567
So, as I mentioned, most stuff
is public on YouTube,

00:21:50.567 --> 00:21:52.901
but videos
can either be marked private.

00:21:52.901 --> 00:21:55.234
They may have been taken down
for some reason,

00:21:55.234 --> 00:21:56.901
or they may have failed
processing

00:21:56.901 --> 00:21:59.234
or may still be in the--

00:21:59.234 --> 00:22:01.067
in the processing stage.

00:22:01.067 --> 00:22:03.067
So, if a user
is not logged in,

00:22:03.067 --> 00:22:05.734
they're only gonna see the
videos that are live and public

00:22:05.734 --> 00:22:07.734
when they look
at somebody's uploads feed.

00:22:07.734 --> 00:22:10.901
If you've logged the user in,
which we'll talk about shortly,

00:22:10.901 --> 00:22:12.734
then they'll see all
of their videos.

00:22:12.734 --> 00:22:15.067
So they'll see videos
that failed processing.

00:22:15.067 --> 00:22:16.734
They'll see the video
they just uploaded

00:22:16.734 --> 00:22:18.234
that hasn't been
processed yet,

00:22:18.234 --> 00:22:20.234
and they'll be able to see
their private videos.

00:22:20.234 --> 00:22:23.734
[clears throat]

00:22:23.734 --> 00:22:25.234
So...
[clears throat]

00:22:25.234 --> 00:22:28.901
we'll go back to my--my not
so pretty developer site here.

00:22:28.901 --> 00:22:31.400
So say I want to look at
the videos that I've uploaded.

00:22:31.400 --> 00:22:33.734
So I can say,
"List my uploads."

00:22:33.734 --> 00:22:35.567
And again, one of the things
that I want to illustrate

00:22:35.567 --> 00:22:38.234
is since all the data types
are basically the same,

00:22:38.234 --> 00:22:40.901
it lets you reuse your UI
for displaying them,

00:22:40.901 --> 00:22:42.734
'cause I can just have
a default,

00:22:42.734 --> 00:22:44.067
"Display a video feed UI,"

00:22:44.067 --> 00:22:46.067
and so I've reused that
within here.

00:22:46.067 --> 00:22:48.534
And so, whether I'm listing
my uploads or my favorites,

00:22:48.534 --> 00:22:50.234
the only real difference
is, you know,

00:22:50.234 --> 00:22:52.234
what--which service call
did I make

00:22:52.234 --> 00:22:55.367
when I told it which feed
I wanted to retrieve.

00:22:55.367 --> 00:22:58.300
[clears throat]

00:22:59.767 --> 00:23:01.734
So if we were to look
at the code,

00:23:01.734 --> 00:23:03.734
again, this--this is getting
pretty simple.

00:23:03.734 --> 00:23:05.801
You know, basically, you know,
one line, two lines--

00:23:05.801 --> 00:23:07.400
you can see
there's not much difference

00:23:07.400 --> 00:23:09.400
between fetching
a user's favorites

00:23:09.400 --> 00:23:13.067
or fetching
a user's uploads.

00:23:13.067 --> 00:23:15.567
One of the things I want to kind
of insert a brief note about

00:23:15.567 --> 00:23:18.901
is we offer a couple different
projections within the API.

00:23:18.901 --> 00:23:21.234
These projections allow you
to give us some information

00:23:21.234 --> 00:23:23.400
about what content
you're interested in,

00:23:23.400 --> 00:23:26.567
as well as what you're expecting
to do with the content.

00:23:26.567 --> 00:23:28.567
So right now we have
three different APIs--

00:23:28.567 --> 00:23:30.567
or sorry,
three different projections.

00:23:30.567 --> 00:23:32.567
the first one,
and is probably the most common,

00:23:32.567 --> 00:23:34.400
is our API projection.

00:23:34.400 --> 00:23:35.901
And this basically gives you
all the data

00:23:35.901 --> 00:23:38.400
that we have available
for the content.

00:23:38.400 --> 00:23:40.734
Typically, it uses plain text
instead of HTML,

00:23:40.734 --> 00:23:42.567
so it's a little more compact
and a little bit easier

00:23:42.567 --> 00:23:46.567
for you to parse out, like,
the description, for example.

00:23:46.567 --> 00:23:48.567
Our base projection
is a little more relevant

00:23:48.567 --> 00:23:50.901
if you're trying to build
something like a feed reader.

00:23:50.901 --> 00:23:53.234
Like, you can take
any of our APIs,

00:23:53.234 --> 00:23:55.234
you know, load it up in
a feed reader, and that will--

00:23:55.234 --> 00:23:56.234
it is a standard feed.

00:23:56.234 --> 00:23:57.734
It will parse and display.

00:23:57.734 --> 00:24:00.000
And those responses
have HTML content in them,

00:24:00.000 --> 00:24:01.234
so it's
a little more appropriate

00:24:01.234 --> 00:24:02.400
if you're gonna just take it

00:24:02.400 --> 00:24:05.567
and not parse out
the response itself.

00:24:05.567 --> 00:24:07.400
And then finally,
we have a mobile projection

00:24:07.400 --> 00:24:09.734
that is targeted
for mobile devices.

00:24:09.734 --> 00:24:11.567
So, if you're building something
that's gonna run on mobile,

00:24:11.567 --> 00:24:14.400
these are a little bit smaller,
a little more compact

00:24:14.400 --> 00:24:17.901
to--to serve faster
over slow connections.

00:24:17.901 --> 00:24:19.067
And then the streaming URLs

00:24:19.067 --> 00:24:20.901
for the mobile formats
are there,

00:24:20.901 --> 00:24:24.167
and they're optimized for use
by mobile devices.

00:24:26.567 --> 00:24:28.067
[clears throat]

00:24:28.067 --> 00:24:31.400
So I've mentioned a couple times
about authentication.

00:24:31.400 --> 00:24:33.234
And so the first question
you may ask is,

00:24:33.234 --> 00:24:35.234
"Well, it's gonna be
a little bit of extra work.

00:24:35.234 --> 00:24:37.734
Why do I actually
need users to log in?"

00:24:37.734 --> 00:24:39.100
So the two main reasons--

00:24:39.100 --> 00:24:41.567
if you want to get access
to any private information,

00:24:41.567 --> 00:24:43.234
the user's
gonna have to log in.

00:24:43.234 --> 00:24:45.767
So, if they want to be able
to see their private videos

00:24:45.767 --> 00:24:48.567
or their private playlists,
they'll have to log in.

00:24:48.567 --> 00:24:50.567
But also, if they want
to see their inbox,

00:24:50.567 --> 00:24:52.400
videos that people
have shared with them,

00:24:52.400 --> 00:24:54.067
or if they want to be able
to manage their content

00:24:54.067 --> 00:24:56.067
as it's being processed,

00:24:56.067 --> 00:24:58.734
again, you have to be logged in
to do that.

00:24:58.734 --> 00:25:01.567
But also, it's required
for all write operations.

00:25:01.567 --> 00:25:04.067
So anything you want to do
that's gonna modify data,

00:25:04.067 --> 00:25:07.234
you have to have a user,
and they have to be logged in.

00:25:09.234 --> 00:25:11.901
We have two different mechanisms
for log-in.

00:25:11.901 --> 00:25:13.901
How many people here
are primarily interested

00:25:13.901 --> 00:25:17.067
in building web applications?

00:25:17.067 --> 00:25:19.601
Okay. How many people
are building PC applications

00:25:19.601 --> 00:25:22.234
or consumer-electronics
devices?

00:25:22.234 --> 00:25:23.567
So a little bit smaller.

00:25:23.567 --> 00:25:25.734
So most of you are doing
web applications.

00:25:25.734 --> 00:25:28.901
AuthSub is--is what you'll use
for a web application.

00:25:28.901 --> 00:25:30.901
The way this works
is that users will actually go,

00:25:30.901 --> 00:25:33.400
and they'll log in
on a Google-hosted web page,

00:25:33.400 --> 00:25:35.567
and then we'll redirect them
back to your site

00:25:35.567 --> 00:25:38.400
with a token you can use
to operate on their behalf.

00:25:38.400 --> 00:25:39.901
The nice thing
about this is that,

00:25:39.901 --> 00:25:42.734
since the user sees that they're
logging in on a Google web page,

00:25:42.734 --> 00:25:45.234
they don't have any concerns
about giving credentials out,

00:25:45.234 --> 00:25:46.567
because they know

00:25:46.567 --> 00:25:48.567
that they're giving
their credentials to Google.

00:25:48.567 --> 00:25:49.734
It--yes.

00:25:49.734 --> 00:25:51.567
man: Is there any plan
to support OAuth?

00:25:51.567 --> 00:25:52.834
Harding: The question is,

00:25:52.834 --> 00:25:54.734
"Is there any plan
to support OAuth?"

00:25:54.734 --> 00:25:57.067
Most of the Google Data APIs
already do.

00:25:57.067 --> 00:25:59.067
The challenge that we have
with the YouTube API

00:25:59.067 --> 00:26:01.400
is that we have
different account types.

00:26:01.400 --> 00:26:03.400
People can log in
with a Google account,

00:26:03.400 --> 00:26:05.734
or they can log in
with a YouTube account.

00:26:05.734 --> 00:26:07.234
And so we do plan to support it,

00:26:07.234 --> 00:26:08.734
but it's taken us
a little bit longer,

00:26:08.734 --> 00:26:11.901
'cause we have to support it
across both account types.

00:26:11.901 --> 00:26:13.734
That's a g--
excellent question.

00:26:13.734 --> 00:26:16.067
The other form of log-in
that we support right now

00:26:16.067 --> 00:26:17.234
is ClientLogin,

00:26:17.234 --> 00:26:18.400
and so this is for scenarios

00:26:18.400 --> 00:26:20.234
where you don't have
a web browser

00:26:20.234 --> 00:26:22.901
that can be directed
to our Google log-in page.

00:26:22.901 --> 00:26:24.901
So, in this case, the user
will enter their credentials

00:26:24.901 --> 00:26:26.734
directly into your application.

00:26:26.734 --> 00:26:27.901
You'll make a log-in request.

00:26:27.901 --> 00:26:29.734
And again, you get back a token
that you can use

00:26:29.734 --> 00:26:31.567
to act as that user,

00:26:31.567 --> 00:26:33.901
but the key here is that
the token you get back

00:26:33.901 --> 00:26:35.234
is a temporary token,

00:26:35.234 --> 00:26:37.901
and so this
will expire periodically

00:26:37.901 --> 00:26:40.234
and, in some cases,
unpredictably.

00:26:40.234 --> 00:26:42.234
And the reason is that we--we
don't have the ability

00:26:42.234 --> 00:26:45.234
to manage those tokens
with ClientLogin.

00:26:45.234 --> 00:26:46.400
With AuthSub,
the user can go

00:26:46.400 --> 00:26:48.400
and, after the fact,
revoke access,

00:26:48.400 --> 00:26:50.567
which is something
you need to be prepared for.

00:26:50.567 --> 00:26:52.567
But it gives--again,
it gives the user confidence

00:26:52.567 --> 00:26:54.901
that their credentials
only go to Google,

00:26:54.901 --> 00:26:57.033
and they can manage
the applications access

00:26:57.033 --> 00:26:58.234
after the fact.

00:26:58.234 --> 00:27:00.167
Since they can't do that
with ClientLogin,

00:27:00.167 --> 00:27:02.167
those tokens are temporary.

00:27:03.901 --> 00:27:05.400
[clears throat]

00:27:05.400 --> 00:27:07.734
So, with AuthSub, because
the browser's bouncing around

00:27:07.734 --> 00:27:09.734
and you've got
some server-to-server calls,

00:27:09.734 --> 00:27:12.067
you've got some client-to-us
and redirect,

00:27:12.067 --> 00:27:14.567
I want to kind of step through
step-by-step how it works.

00:27:14.567 --> 00:27:17.901
How many of you are familiar
with AuthSub or--or OAuth,

00:27:17.901 --> 00:27:19.567
which works
quite similarly?

00:27:19.567 --> 00:27:20.734
Okay, a couple people.

00:27:20.734 --> 00:27:23.067
So this--this will be fairly new
to most of you.

00:27:23.067 --> 00:27:24.734
The way you start out
with AuthSub

00:27:24.734 --> 00:27:26.234
is you'll send
the user's browser

00:27:26.234 --> 00:27:29.400
to a Google log-in page
to request access.

00:27:29.400 --> 00:27:30.934
And so what
you'll need to pass us

00:27:30.934 --> 00:27:35.234
is what URL should we redirect
them back to when we're done,

00:27:35.234 --> 00:27:37.400
what is the scope of APIs
that you're interested in.

00:27:37.400 --> 00:27:40.367
For YouTube,
that's gdata.youtube.com.

00:27:40.367 --> 00:27:41.734
And then two parameters,

00:27:41.734 --> 00:27:44.567
depending on how you're gonna be
using the AuthSub token.

00:27:44.567 --> 00:27:46.234
So session tells us
whether or not

00:27:46.234 --> 00:27:48.234
you're gonna do
a one-time request.

00:27:48.234 --> 00:27:50.067
If you only have
a single API call to make,

00:27:50.067 --> 00:27:52.067
you can just do
a regular token.

00:27:52.067 --> 00:27:54.567
But you're probably gonna want
to have multiple API calls,

00:27:54.567 --> 00:27:56.400
in which case you need to get
a session token

00:27:56.400 --> 00:27:58.234
that will be permanent.

00:27:58.234 --> 00:27:59.734
The secure parameter

00:27:59.734 --> 00:28:02.734
allows you to actually register
your application with Google

00:28:02.734 --> 00:28:05.400
and sign all of your requests,
which will be more secure.

00:28:05.400 --> 00:28:07.901
It's harder for people
to snoo--snoop that token

00:28:07.901 --> 00:28:09.567
and abuse it.

00:28:09.567 --> 00:28:10.901
And when you do
a secure AuthSub

00:28:10.901 --> 00:28:12.901
and you've registered
your app with Google,

00:28:12.901 --> 00:28:14.734
we prevent--present a UI
to the user

00:28:14.734 --> 00:28:17.234
that makes it clear
that this is more secure.

00:28:17.234 --> 00:28:19.234
So you can start out--
you don't have to register.

00:28:19.234 --> 00:28:21.567
You don't have to sign
to get this working,

00:28:21.567 --> 00:28:23.067
but we encourage you
to do so,

00:28:23.067 --> 00:28:26.000
because it's more secure
for the--for the end user.

00:28:30.067 --> 00:28:31.400
Once that, uh...

00:28:31.400 --> 00:28:34.067
once that initial UI comes up,
the user will log in.

00:28:34.067 --> 00:28:35.334
They'll get the question of,

00:28:35.334 --> 00:28:38.234
"Do you want to allow your--
your web app access?

00:28:38.234 --> 00:28:42.067
And once they say, "Yes," we'll
redirect them back to your site,

00:28:42.067 --> 00:28:45.400
and we'll put a token parameter
in the URL that we send them to.

00:28:45.400 --> 00:28:47.734
Now, whether or not you're doing
a permanent AuthSub token

00:28:47.734 --> 00:28:49.734
or a one-time AuthSub token,

00:28:49.734 --> 00:28:51.734
this one is only good
for one request.

00:28:51.734 --> 00:28:53.734
So, if you're doing one-time,
you can just use that

00:28:53.734 --> 00:28:56.067
with your next API call,
and you're done.

00:28:56.067 --> 00:28:58.567
But if you want
a permanent-session token,

00:28:58.567 --> 00:29:00.000
you want to send that
back to us and say,

00:29:00.000 --> 00:29:02.234
"I want to turn this
into a session token,"

00:29:02.234 --> 00:29:03.901
and we'll give you back
a permanent token

00:29:03.901 --> 00:29:05.567
that you then would store.

00:29:05.567 --> 00:29:07.734
So users--you can only have
a certain number

00:29:07.734 --> 00:29:10.567
of AuthSub tokens per site,
and so it's important

00:29:10.567 --> 00:29:13.734
that if you do generate
a permanent-session token,

00:29:13.734 --> 00:29:15.400
you want to store that
in a secure way

00:29:15.400 --> 00:29:16.901
associated with your user,

00:29:16.901 --> 00:29:18.234
instead of requesting
a new one

00:29:18.234 --> 00:29:20.901
every time they come
back to your site.

00:29:20.901 --> 00:29:22.734
And what you do from then on
is you just pass

00:29:22.734 --> 00:29:26.667
that authorization token to us
when you're making API requests.

00:29:29.901 --> 00:29:31.400
So once you've logged
the user in,

00:29:31.400 --> 00:29:34.234
you're now able to--
to perform write operations.

00:29:34.234 --> 00:29:36.734
So obviously,
you can create new entries,

00:29:36.734 --> 00:29:39.234
you can update data,
and you can also delete data.

00:29:39.234 --> 00:29:40.567
And so it's important
to make sure

00:29:40.567 --> 00:29:42.734
that whatever UI
you're presenting

00:29:42.734 --> 00:29:45.567
is consistent with what
the user's expecting you to do.

00:29:45.567 --> 00:29:47.067
You know, the user
has granted you permission

00:29:47.067 --> 00:29:48.567
to act on their behalf,
so don't--

00:29:48.567 --> 00:29:50.567
you know, be careful and--

00:29:50.567 --> 00:29:52.901
and treat
their data sensitively.

00:29:52.901 --> 00:29:54.234
As I said,
all these write operations

00:29:54.234 --> 00:29:57.200
will require
a user-authorization token.

00:29:57.200 --> 00:29:58.567
Um...

00:29:58.567 --> 00:30:00.567
for the YouTube API,
specifically,

00:30:00.567 --> 00:30:03.400
we actually ask you to register
your application with us

00:30:03.400 --> 00:30:06.234
so that we can keep track of
what applications are out there,

00:30:06.234 --> 00:30:07.901
what's popular,
what people are using,

00:30:07.901 --> 00:30:09.734
but also be able to keep track
of something--

00:30:09.734 --> 00:30:11.234
if something goes wrong,

00:30:11.234 --> 00:30:13.067
or if there's a problem
with your application,

00:30:13.067 --> 00:30:16.234
allow us to contact you and work
to resolve the situation.

00:30:16.234 --> 00:30:17.901
So, if you go
to code.google.com,

00:30:17.901 --> 00:30:19.133
we have a link there

00:30:19.133 --> 00:30:21.567
to where you can register
your application.

00:30:21.567 --> 00:30:23.067
So, once you've done that,

00:30:23.067 --> 00:30:26.234
with every request that you do
that needs to form a write,

00:30:26.234 --> 00:30:28.901
you'll send us the user's
authorization token,

00:30:28.901 --> 00:30:30.234
as well as your dev key

00:30:30.234 --> 00:30:34.067
and the--the client's identifier
we assign you.

00:30:34.067 --> 00:30:37.400
So this is kind of showing you
the HTTP header view.

00:30:37.400 --> 00:30:39.734
The--again,
the client libraries

00:30:39.734 --> 00:30:43.000
make a lot of the managing
of that state much easier.

00:30:44.901 --> 00:30:47.567
What's probably most common
for doing writes is posts.

00:30:47.567 --> 00:30:49.067
People want to create
a new entry.

00:30:49.067 --> 00:30:51.400
They want to upload a video.
They want to add a favorite.

00:30:51.400 --> 00:30:55.234
They want to insert a video
into a--into a playlist.

00:30:55.234 --> 00:30:57.234
So most of these cases,
you're gonna want to do a post

00:30:57.234 --> 00:30:58.901
to create a new entry
and a feed.

00:30:58.901 --> 00:31:01.067
And again, you can either
generate the URL

00:31:01.067 --> 00:31:02.567
that you're posting to,

00:31:02.567 --> 00:31:04.067
or in all
of our feed responses,

00:31:04.067 --> 00:31:06.901
once you're logged in
and sending us a developer key,

00:31:06.901 --> 00:31:08.734
we'll actually give you
those related links saying,

00:31:08.734 --> 00:31:10.734
"If you want to create
a new entry in this playlist,

00:31:10.734 --> 00:31:12.067
"post to this feed.

00:31:12.067 --> 00:31:15.567
If you want to upload
a new video, post to this feed."

00:31:15.567 --> 00:31:17.567
One thing I want to highlight
is we do have a couple feeds

00:31:17.567 --> 00:31:18.968
that are write-only,

00:31:18.968 --> 00:31:22.334
which is a little bit unusual
until you think about it.

00:31:22.334 --> 00:31:23.734
When you're doing ratings,

00:31:23.734 --> 00:31:25.901
we don't actually keep track
of every single rating

00:31:25.901 --> 00:31:28.400
that every user has made
and expose that.

00:31:28.400 --> 00:31:31.400
So, when you're rating,
that's a write-only feed.

00:31:31.400 --> 00:31:34.400
Similarly, complaints--
when you flag a video as saying,

00:31:34.400 --> 00:31:36.567
"I think this violates
YouTube's terms of service,"

00:31:36.567 --> 00:31:38.734
or, "I think this
is inappropriate content,"

00:31:38.734 --> 00:31:40.067
we allow you to write those

00:31:40.067 --> 00:31:42.400
so that users can flag videos
from your site,

00:31:42.400 --> 00:31:44.501
but we don't allow you
to read them back.

00:31:48.067 --> 00:31:50.234
So an example, say I--

00:31:50.234 --> 00:31:52.734
you know, this is what
the actual adding of a favorite

00:31:52.734 --> 00:31:54.234
would look like on the wire.

00:31:54.234 --> 00:31:56.067
And so you can see there's not
actually too much involved

00:31:56.067 --> 00:31:57.901
in doing
these write operations.

00:31:57.901 --> 00:31:59.267
One thing I want to stress--

00:31:59.267 --> 00:32:01.000
or there's two things
I want to point out here.

00:32:01.000 --> 00:32:03.234
The first is if you see
in that URL up there,

00:32:03.234 --> 00:32:06.234
I'm posting to /user/default.

00:32:06.234 --> 00:32:08.567
So, once the user's logged in,
there's no need

00:32:08.567 --> 00:32:11.734
for you to tell us what user
you're acting on behalf of.

00:32:11.734 --> 00:32:14.400
We can identify that
from the authorization token.

00:32:14.400 --> 00:32:17.067
So you can use default, and that
just simplifies your code.

00:32:17.067 --> 00:32:18.901
You don't have to substitute
the user name

00:32:18.901 --> 00:32:21.734
in all of the API requests
that you make.

00:32:21.734 --> 00:32:24.067
You can see I passed in the
developer key, the client ID,

00:32:24.067 --> 00:32:26.400
and the authorization token,
like I was told.

00:32:26.400 --> 00:32:27.734
And then the actual entry

00:32:27.734 --> 00:32:30.734
that I'm adding
into the user's favorite feed.

00:32:30.734 --> 00:32:31.901
One thing
I want to highlight,

00:32:31.901 --> 00:32:33.334
if you're doing
the client libraries,

00:32:33.334 --> 00:32:35.234
this is pretty--it's kind of
the default behavior,

00:32:35.234 --> 00:32:37.234
but if you are working
with XML directly,

00:32:37.234 --> 00:32:40.234
it's important that you maintain
all of the entries,

00:32:40.234 --> 00:32:42.067
all of the tags that you
may have gotten in an entry

00:32:42.067 --> 00:32:44.734
when you read and then
when you post it back to us.

00:32:44.734 --> 00:32:46.067
So there may be a new tag

00:32:46.067 --> 00:32:48.734
that you're not aware of
that we add to the API,

00:32:48.734 --> 00:32:50.734
and you need to make sure
that unknown tags in the XML

00:32:50.734 --> 00:32:52.234
you pass through
back to us.

00:32:52.234 --> 00:32:53.901
If you're doing
the client libraries,

00:32:53.901 --> 00:32:55.501
it's not really an issue.

00:32:57.067 --> 00:32:58.734
So, again,
for those of you who prefer

00:32:58.734 --> 00:33:01.000
a higher-level language
than XML--

00:33:01.000 --> 00:33:03.067
again, I'm grabbing
my YouTube service

00:33:03.067 --> 00:33:05.567
within the client library.

00:33:05.567 --> 00:33:06.934
And now
I need to worry about--

00:33:06.934 --> 00:33:08.901
is the user on my site
logged in or not?

00:33:08.901 --> 00:33:12.400
So I would have that persistent
association between my user

00:33:12.400 --> 00:33:14.734
and the AuthSub token
that they granted.

00:33:14.734 --> 00:33:17.067
If they're not logged in, if
they haven't given me permission

00:33:17.067 --> 00:33:18.734
to act on their account,

00:33:18.734 --> 00:33:20.734
I'm gonna generate an AuthSub
link to send them to

00:33:20.734 --> 00:33:22.734
so that they go through
and give permission,

00:33:22.734 --> 00:33:25.067
and they'll send them
back to my site.

00:33:25.067 --> 00:33:27.734
But assuming that I do have
the AuthSub token set up,

00:33:27.734 --> 00:33:30.234
I'm gonna tell the YouTube
service my developer key,

00:33:30.234 --> 00:33:33.901
my client ID,
and the user's AuthSub token.

00:33:33.901 --> 00:33:36.567
And this video happens to be
our--our Google I/O talk

00:33:36.567 --> 00:33:38.067
about the APIs.

00:33:38.067 --> 00:33:39.934
So say I want to add that
to the user's favorite

00:33:39.934 --> 00:33:42.234
every time they--
they load up my page.

00:33:42.234 --> 00:33:44.067
Get that video ID.
I'm gonna fetch it.

00:33:44.067 --> 00:33:45.400
And then
I'll immediately post that

00:33:45.400 --> 00:33:46.901
back into the favorite's feed.

00:33:46.901 --> 00:33:48.400
And this is where I was saying
you don't need to worry,

00:33:48.400 --> 00:33:49.901
when you're using
the client library,

00:33:49.901 --> 00:33:51.434
about maintaining data,

00:33:51.434 --> 00:33:53.400
'cause you're gonna fetch
the entire entry for the video

00:33:53.400 --> 00:33:55.167
and then post it back.

00:33:58.400 --> 00:34:01.234
So the last thing
I want to talk about is upload.

00:34:01.234 --> 00:34:03.067
There's quite a lot
involved with upload,

00:34:03.067 --> 00:34:05.234
which is why it--
it got saved for last.

00:34:05.234 --> 00:34:06.567
So we have--it's kind of like

00:34:06.567 --> 00:34:10.234
how we have two models
for log-in,

00:34:10.234 --> 00:34:12.234
depending on whether or not
there's a browser.

00:34:12.234 --> 00:34:13.667
We have two models
for upload,

00:34:13.667 --> 00:34:16.734
depending on whether or not
the user is using a web browser.

00:34:16.734 --> 00:34:19.067
So, if you have an application
such as Spore,

00:34:19.067 --> 00:34:21.067
where there
isn't a web browser running,

00:34:21.067 --> 00:34:22.901
we have what we call
direct upload,

00:34:22.901 --> 00:34:25.734
so the application
has the video already.

00:34:25.734 --> 00:34:28.067
It's gonna upload it
straight to our APIs.

00:34:28.067 --> 00:34:30.400
This also can be used
for web applications

00:34:30.400 --> 00:34:33.734
if either you want to have
your own copy of the video,

00:34:33.734 --> 00:34:35.567
or perhaps you have
a web application

00:34:35.567 --> 00:34:37.567
that is generating
the video itself--

00:34:37.567 --> 00:34:40.734
something like Animoto, which
generates a video slideshow.

00:34:40.734 --> 00:34:42.567
They generate the video
on their server,

00:34:42.567 --> 00:34:45.234
and so they'll send it
directly to us.

00:34:45.234 --> 00:34:47.901
But we also offer
what we call "browser upload."

00:34:47.901 --> 00:34:50.901
And this allows your web app
to control all the metadata

00:34:50.901 --> 00:34:52.901
that's associated
with the video,

00:34:52.901 --> 00:34:55.400
but the user will upload
the video directly to YouTube,

00:34:55.400 --> 00:34:58.234
so you don't have to worry about
having servers that can handle,

00:34:58.234 --> 00:35:01.167
you know, hundreds, thousands
of users uploading video to you

00:35:01.167 --> 00:35:04.501
just so that you can turn around
and send it back to our servers.

00:35:07.234 --> 00:35:08.734
When you're uploading
with the API,

00:35:08.734 --> 00:35:12.067
we actually give you access
to an extra set of information.

00:35:12.067 --> 00:35:13.567
So this
is that third category

00:35:13.567 --> 00:35:16.234
on video entries
that I alluded to earlier.

00:35:16.234 --> 00:35:18.400
We have what we call
"developer tags,"

00:35:18.400 --> 00:35:20.567
and this allows you to specify
your own tags

00:35:20.567 --> 00:35:22.234
that are associated
with the video

00:35:22.234 --> 00:35:24.734
as the API developer.

00:35:24.734 --> 00:35:26.400
And these are visible
only to you,

00:35:26.400 --> 00:35:27.901
and they're pretty much
free-form text

00:35:27.901 --> 00:35:29.734
that you could use
however you want.

00:35:29.734 --> 00:35:31.734
So you can define
your own taxonomy

00:35:31.734 --> 00:35:34.234
that allows you
to organize your uploads--

00:35:34.234 --> 00:35:36.234
well, the uploa--
the uploads that happen

00:35:36.234 --> 00:35:39.067
through your use of the API.

00:35:39.067 --> 00:35:40.734
You can see
in this example here,

00:35:40.734 --> 00:35:42.567
you know,
maybe I want to associate

00:35:42.567 --> 00:35:45.901
the user account on my site
with these videos,

00:35:45.901 --> 00:35:47.567
so I can keep track of that,

00:35:47.567 --> 00:35:49.834
as well as maybe I have my own,
you know, labeling system

00:35:49.834 --> 00:35:51.100
for these videos.

00:35:51.100 --> 00:35:53.968
So I want to flag--
this was just a test upload.

00:35:55.734 --> 00:35:57.400
So, if you're doing
a direct upload,

00:35:57.400 --> 00:36:00.667
you'll, again, just do a regular
Atom Publishing Protocol post

00:36:00.667 --> 00:36:02.901
to the user's upload feeds.

00:36:02.901 --> 00:36:05.234
Since there's metadata
and a video,

00:36:05.234 --> 00:36:07.234
this happens
to be a multi-part post.

00:36:07.234 --> 00:36:09.734
So I'll post first
the--the XML entry

00:36:09.734 --> 00:36:12.734
and then the binary data
as a second post of the file.

00:36:12.734 --> 00:36:14.901
One thing to point out,
we used the--the slug header

00:36:14.901 --> 00:36:18.534
just to specify
what the file name was.

00:36:18.534 --> 00:36:20.400
Browser upload,
kind of like AuthSub,

00:36:20.400 --> 00:36:21.734
is a little bit more complex,

00:36:21.734 --> 00:36:23.234
because there's
three entities involved.

00:36:23.234 --> 00:36:24.567
There's our servers,

00:36:24.567 --> 00:36:27.901
your web-application server,
and the user's browser.

00:36:27.901 --> 00:36:30.567
So I want to kind of step
through the flow step-by-step.

00:36:30.567 --> 00:36:33.901
So the first phase is, you know,
however you're doing your UI,

00:36:33.901 --> 00:36:37.067
you'll negotiate with the user
about what the metadata is.

00:36:37.067 --> 00:36:39.901
So you can allow them to specify
the metadata themselves,

00:36:39.901 --> 00:36:42.567
you can automatically generate
the metadata for them,

00:36:42.567 --> 00:36:44.734
or you can have them
specify the metadata

00:36:44.734 --> 00:36:47.067
and then
perhaps inject your own.

00:36:47.067 --> 00:36:49.400
Like Hunter mentioned,
a lot of our API users--

00:36:49.400 --> 00:36:51.901
they'll tag
into the description,

00:36:51.901 --> 00:36:53.901
you know, the URL
of their Web site

00:36:53.901 --> 00:36:55.400
where the application occurred.

00:36:55.400 --> 00:36:58.734
And that way, if users discover
this video on youtube.com,

00:36:58.734 --> 00:37:02.400
they can go back to your site
to see where it came from.

00:37:02.400 --> 00:37:04.567
Either way, eventually
you've got the metadata

00:37:04.567 --> 00:37:07.567
that you want to have
associated with this video.

00:37:07.567 --> 00:37:09.067
And so you'll take
that metadata.

00:37:09.067 --> 00:37:11.067
Maybe you'll add your own
developer tags

00:37:11.067 --> 00:37:14.067
so that you can organize
these videos within your site.

00:37:14.067 --> 00:37:16.567
You'll post all of that to us,
and we'll give you back

00:37:16.567 --> 00:37:19.234
the URL that the upload
should go to,

00:37:19.234 --> 00:37:22.734
as well as a secure token
that you can send to the user

00:37:22.734 --> 00:37:24.567
that they'll pass to us
with the upload.

00:37:24.567 --> 00:37:26.901
So this is how we make sure
that whatever metadata

00:37:26.901 --> 00:37:30.234
you associate with the video
stays intact,

00:37:30.234 --> 00:37:31.400
even though the user

00:37:31.400 --> 00:37:34.567
will eventually upload it
back to us.

00:37:34.567 --> 00:37:37.734
So you'll take that URL target,
and you'll take that token,

00:37:37.734 --> 00:37:39.734
and you'll present
a standard web form

00:37:39.734 --> 00:37:42.567
to your user
with the file upload,

00:37:42.567 --> 00:37:45.734
and the user's gonna submit that
directly to our API servers.

00:37:45.734 --> 00:37:49.567
And so the large file
only has to come to us.

00:37:49.567 --> 00:37:51.567
Once we finish processing
that upload,

00:37:51.567 --> 00:37:53.567
we'll send a redirect
back to the user,

00:37:53.567 --> 00:37:55.234
where they'll go
back to your site,

00:37:55.234 --> 00:37:56.901
and we'll, again, inject
some parameters

00:37:56.901 --> 00:38:00.501
into that redirect URL to say
what the video ID was,

00:38:00.501 --> 00:38:01.901
you know, what the status was,

00:38:01.901 --> 00:38:03.901
whether
it was successful or not

00:38:03.901 --> 00:38:08.067
so that you can then present
the right UI on your site.

00:38:08.067 --> 00:38:09.567
So I kind of want
to walk through

00:38:09.567 --> 00:38:12.367
how this actually works
in practice.

00:38:12.367 --> 00:38:13.434
Let me switch over here.

00:38:13.434 --> 00:38:16.400
So Hunter
mentioned earlier Dogbook,

00:38:16.400 --> 00:38:18.734
which is a Facebook application
that allows people

00:38:18.734 --> 00:38:21.901
to, you know, have
a social network for their dogs.

00:38:21.901 --> 00:38:23.934
So say I want to upload a video
of my dogs.

00:38:23.934 --> 00:38:25.400
I'm gonna go here.

00:38:25.400 --> 00:38:27.067
I'm gonna say,

00:38:27.067 --> 00:38:30.234
"My dog Deuce
at the beach."

00:38:30.234 --> 00:38:32.567
And in this case,
I'm gonna say,

00:38:32.567 --> 00:38:35.167
you know, "I want to upload
the video now."

00:38:37.367 --> 00:38:38.734
So, in this case,
they're gonna say,

00:38:38.734 --> 00:38:40.734
"Well, I need to operate
on behalf of this user,"

00:38:40.734 --> 00:38:42.901
so this is what
the AuthSub flow looks like.

00:38:42.901 --> 00:38:44.734
In this case, they haven't
registered themselves

00:38:44.734 --> 00:38:46.567
as a secure application,

00:38:46.567 --> 00:38:48.067
which is why you get
this red box saying

00:38:48.067 --> 00:38:49.400
they haven't registered
themselves

00:38:49.400 --> 00:38:51.067
as a secure application.

00:38:51.067 --> 00:38:52.734
You can also see that,
in their case,

00:38:52.734 --> 00:38:54.734
they're only doing
a one-time request.

00:38:54.734 --> 00:38:56.400
I can't read,
but that should say in there

00:38:56.400 --> 00:38:57.901
it's a one-time request.

00:38:57.901 --> 00:38:59.734
Since they're just doing
a single upload,

00:38:59.734 --> 00:39:01.901
they only need to make
one API call,

00:39:01.901 --> 00:39:04.567
and they can do
that one-time request.

00:39:04.567 --> 00:39:05.834
So I'm gonna say,

00:39:05.834 --> 00:39:07.501
yeah, I want to allow them
access to my account.

00:39:07.501 --> 00:39:10.400
And AuthSub will send
back to--to their site.

00:39:10.400 --> 00:39:14.901
And now I just pick the video
I want to upload...

00:39:14.901 --> 00:39:16.567
which...

00:39:16.567 --> 00:39:18.501
let me pull this up.

00:39:20.734 --> 00:39:23.234
So you can see I'm working
through the file picker,

00:39:23.234 --> 00:39:25.067
and I'm gonna pick
a small video,

00:39:25.067 --> 00:39:28.234
so this will hopefully upload
a little bit quicker.

00:39:28.234 --> 00:39:29.400
And I'll say upload.

00:39:29.400 --> 00:39:31.067
Now, if you look down
at the status bar--

00:39:31.067 --> 00:39:32.567
I don't know how well
that shows--

00:39:32.567 --> 00:39:34.567
you can see, they're uploading
this video directly to us.

00:39:34.567 --> 00:39:35.968
So Dogbook is not involved.

00:39:35.968 --> 00:39:38.234
They don't have to worry
about all the bandwidth costs

00:39:38.234 --> 00:39:40.667
of video coming in and out
of their system.

00:39:42.734 --> 00:39:44.067
And you can see
now we're waiting.

00:39:44.067 --> 00:39:45.567
So the video has been sent.

00:39:45.567 --> 00:39:47.567
The API servers
are now processing this,

00:39:47.567 --> 00:39:48.901
and pretty shortly here,

00:39:48.901 --> 00:39:51.234
we're getting redirected
back to Dogbook,

00:39:51.234 --> 00:39:54.067
saying that the application--
or the upload was complete.

00:39:54.067 --> 00:39:56.400
And if we scroll down--

00:39:56.400 --> 00:39:58.567
Oh.
[laughs]

00:39:58.567 --> 00:39:59.901
You can see
this is the new video.

00:39:59.901 --> 00:40:02.400
This is one
I uploaded earlier.

00:40:02.400 --> 00:40:03.567
When a video gets uploaded,

00:40:03.567 --> 00:40:05.234
it takes a little while
to be processed,

00:40:05.234 --> 00:40:07.067
so there
isn't a thumbnail yet,

00:40:07.067 --> 00:40:08.434
but since I was logged in,

00:40:08.434 --> 00:40:12.734
Dogbook can see there
is this video that's there.

00:40:12.734 --> 00:40:14.734
So they can see the video
still in progress.

00:40:14.734 --> 00:40:16.901
If I were to flip over to--

00:40:16.901 --> 00:40:18.901
to the list
of my videos here

00:40:18.901 --> 00:40:20.767
and refresh,

00:40:20.767 --> 00:40:22.567
you'll see this new
Dogbook video got added.

00:40:22.567 --> 00:40:24.400
And you can see that they
injected "Dogbook movie"

00:40:24.400 --> 00:40:26.234
into the title
so that they can maintain

00:40:26.234 --> 00:40:29.067
some of their branding
with the video.

00:40:29.067 --> 00:40:30.567
So we'll come back in a moment,
and I'll show you

00:40:30.567 --> 00:40:33.067
that that actually did upload
and process successfully.

00:40:33.067 --> 00:40:35.000
We'll give it
a minute to go.

00:40:38.067 --> 00:40:39.567
man: Is there any mechanism

00:40:39.567 --> 00:40:41.400
for checking the status
of the upload?

00:40:41.400 --> 00:40:42.734
Say if it's a 20-meg upload,

00:40:42.734 --> 00:40:44.567
it might take a while
to show action.

00:40:44.567 --> 00:40:45.968
Harding: So the question was,

00:40:45.968 --> 00:40:48.067
"Is there a way of checking
on the status of an upload?"

00:40:48.067 --> 00:40:50.901
When you're doing the--
the browser form post,

00:40:50.901 --> 00:40:54.400
since the browser actually has
to navigate the page to do it,

00:40:54.400 --> 00:40:58.067
there's no way within the page
to see the status.

00:40:58.067 --> 00:41:00.334
One of the things
that we're investigating is

00:41:00.334 --> 00:41:03.400
how can we make it easier
to do the same mechanism,

00:41:03.400 --> 00:41:05.234
but within something
like Flash,

00:41:05.234 --> 00:41:09.834
that does allow you to monitor
a file post as it's going on.

00:41:12.400 --> 00:41:13.734
So I kind of
want to walk through--

00:41:13.734 --> 00:41:15.901
like, look at what's
actually going on the wire

00:41:15.901 --> 00:41:18.734
in order for all that flow
to go through.

00:41:18.734 --> 00:41:20.567
So I'm kind of skipping ahead
to step three.

00:41:20.567 --> 00:41:23.234
We've already got
the metadata,

00:41:23.234 --> 00:41:25.901
and they're gonna post to a-a--
one of our APIs to say,

00:41:25.901 --> 00:41:27.400
"Get me an upload token

00:41:27.400 --> 00:41:30.400
that I can hand to the user
to perform the upload."

00:41:30.400 --> 00:41:33.234
So they'll pass in, you know,
the standard entry data,

00:41:33.234 --> 00:41:35.901
the metadata,
the description,

00:41:35.901 --> 00:41:37.901
as well as perhaps
some developer tags

00:41:37.901 --> 00:41:40.234
to say
what user ID this was.

00:41:40.234 --> 00:41:41.734
And our response
is gonna tell them,

00:41:41.734 --> 00:41:44.400
"Okay, here's the URL
that that upload should go to."

00:41:44.400 --> 00:41:46.400
And here's that encrypted token
I was referring to

00:41:46.400 --> 00:41:49.067
that allows us to--to securely
trust the metadata

00:41:49.067 --> 00:41:50.968
as it comes back
from the user.

00:41:53.234 --> 00:41:55.734
I can then just display this
as a standard web form.

00:41:55.734 --> 00:41:59.567
The--the next URL
is the URL on my site

00:41:59.567 --> 00:42:02.234
I want the user to come back to
when the upload is done.

00:42:02.234 --> 00:42:04.400
The action--
Oops.

00:42:04.400 --> 00:42:05.734
The action up here--

00:42:05.734 --> 00:42:07.567
ooh--is the--

00:42:07.567 --> 00:42:10.067
is that URL that came back
in the token response.

00:42:10.067 --> 00:42:13.567
And then I can inject
a hidden input with that token.

00:42:13.567 --> 00:42:15.567
And then once the user's done
with the submission,

00:42:15.567 --> 00:42:18.067
it'll come back to my site,
and you can see we'll give them

00:42:18.067 --> 00:42:19.734
what the--the video ID was,

00:42:19.734 --> 00:42:21.400
as well as what the status
of the video was.

00:42:21.400 --> 00:42:25.234
So 200 means successful.

00:42:25.234 --> 00:42:29.567
man: That's not a standard
form attributes--

00:42:29.567 --> 00:42:31.567
the next URL.

00:42:31.567 --> 00:42:34.100
Harding: The...

00:42:34.100 --> 00:42:37.567
Oh, actually, yeah, this--
this is part of the action.

00:42:37.567 --> 00:42:39.067
This isn't a form attribute.

00:42:39.067 --> 00:42:41.200
So the--the target
of the post--

00:42:41.200 --> 00:42:42.567
man: Oh, I see.

00:42:42.567 --> 00:42:43.767
Harding: Yeah,
I had to break it

00:42:43.767 --> 00:42:44.901
over a couple
different lines.

00:42:44.901 --> 00:42:46.400
Yeah, sorry, it was just
a formatting--

00:42:46.400 --> 00:42:48.400
That's the problem
with trying to put--

00:42:48.400 --> 00:42:52.234
putting code in PowerPoint
never works that well.

00:42:52.234 --> 00:42:53.667
All right.

00:42:53.667 --> 00:42:56.067
So one of the things
you mentioned is--

00:42:56.067 --> 00:42:57.901
you asked about checking
the status of the video

00:42:57.901 --> 00:42:59.567
as it's being uploaded,
but it's important to check

00:42:59.567 --> 00:43:02.400
for the status of the video
after it's uploaded as well.

00:43:02.400 --> 00:43:04.067
As I mentioned,
it takes us a little while

00:43:04.067 --> 00:43:06.267
to process the video,
get thumbnails generated,

00:43:06.267 --> 00:43:07.901
transcode the video.

00:43:07.901 --> 00:43:09.901
And since this video
isn't public,

00:43:09.901 --> 00:43:11.234
because it's not live,

00:43:11.234 --> 00:43:12.567
only the user
that's logged in

00:43:12.567 --> 00:43:15.234
can see videos
that are still being processed.

00:43:15.234 --> 00:43:17.734
Since we gave you the video ID
of the video

00:43:17.734 --> 00:43:19.400
when the upload completed,

00:43:19.400 --> 00:43:22.734
you can actually do a request
for just that one specific video

00:43:22.734 --> 00:43:24.400
and check
on the status of it.

00:43:24.400 --> 00:43:26.234
So if the video
is not actually live,

00:43:26.234 --> 00:43:28.234
you're gonna see
this Atom draft tag,

00:43:28.234 --> 00:43:30.234
saying this is still a draft.

00:43:30.234 --> 00:43:31.501
And then we give you detail

00:43:31.501 --> 00:43:33.400
about what's actually going on
with the video.

00:43:33.400 --> 00:43:35.567
So it might be processing.
It could be rejected.

00:43:35.567 --> 00:43:37.400
For example, if it was
a duplicate upload,

00:43:37.400 --> 00:43:38.734
those will get rejected.

00:43:38.734 --> 00:43:41.234
Or it may have failed processing
for some reason.

00:43:41.234 --> 00:43:42.901
In a lot of cases,
the videos that fail

00:43:42.901 --> 00:43:46.801
aren't actually video files
that get uploaded.

00:43:46.801 --> 00:43:49.067
The other thing I want to stress
is, you know, you may do this

00:43:49.067 --> 00:43:52.234
when you're checking on the
results of a video you uploaded,

00:43:52.234 --> 00:43:54.567
but if you're showing the full
list of a user's uploads,

00:43:54.567 --> 00:43:57.067
it's also a good idea
to look for these draft tags

00:43:57.067 --> 00:43:59.400
so that you can differentiate
in your--your UI

00:43:59.400 --> 00:44:02.067
videos that are live
versus videos that are not.

00:44:02.067 --> 00:44:03.234
Yes, in back.

00:44:03.234 --> 00:44:08.567
[man speaking indistinctly]

00:44:08.567 --> 00:44:10.567
The question is if there's a way
to set up a-a callback

00:44:10.567 --> 00:44:11.901
for when the upload
is complete.

00:44:11.901 --> 00:44:13.267
Not right now,
but that's something

00:44:13.267 --> 00:44:15.067
that we've been looking into,
just, in general,

00:44:15.067 --> 00:44:17.834
having a notification system
for when things change.

00:44:19.567 --> 00:44:22.567
Okay.

00:44:22.567 --> 00:44:24.400
So say
I've uploaded a video.

00:44:24.400 --> 00:44:26.901
I've checked to make sure
that it's live.

00:44:26.901 --> 00:44:29.734
And maybe I uploaded some of
those associated developer tags

00:44:29.734 --> 00:44:31.234
with it when I uploaded it.

00:44:31.234 --> 00:44:32.400
The way that you search,

00:44:32.400 --> 00:44:34.567
because these are just
a standard category,

00:44:34.567 --> 00:44:37.067
is you use the standard
Google Data category syntax

00:44:37.067 --> 00:44:39.901
for searching
within a category of videos.

00:44:39.901 --> 00:44:42.901
In this case, I say, "I want
to use the developer tag Schema,

00:44:42.901 --> 00:44:44.901
"and show me videos
that have

00:44:44.901 --> 00:44:46.901
that string associated
with them."

00:44:46.901 --> 00:44:49.734
And this way, I can say, "Show
me the videos that John uploaded

00:44:49.734 --> 00:44:51.567
through my API."

00:44:51.567 --> 00:44:53.567
One of the things I want
to point out--might be obvious,

00:44:53.567 --> 00:44:56.734
but since the developer keys--
or the developer tags

00:44:56.734 --> 00:44:59.400
are only available to you,
the API developer,

00:44:59.400 --> 00:45:01.901
you have to use your developer
key when you make this request,

00:45:01.901 --> 00:45:03.234
so we know who you are

00:45:03.234 --> 00:45:05.501
and what developer tag
to look for.

00:45:07.734 --> 00:45:09.734
So let's go back and see

00:45:09.734 --> 00:45:13.234
if my video's done
being processed.

00:45:13.234 --> 00:45:14.467
So you can see here,

00:45:14.467 --> 00:45:16.234
you know, on the YouTube UI,
we differentiate.

00:45:16.234 --> 00:45:18.567
You can see that the thumbnail
isn't yet generated.

00:45:18.567 --> 00:45:20.601
So it looks like we're taking
a little bit of time to--

00:45:20.601 --> 00:45:22.234
to get this video processed.

00:45:22.234 --> 00:45:24.834
So we'll come back and check
on it again in a moment.

00:45:26.901 --> 00:45:28.234
man: Is there a limit

00:45:28.234 --> 00:45:30.734
to the number of videos
that an account can host?

00:45:30.734 --> 00:45:32.067
Harding: The question is,
"Is there a limit

00:45:32.067 --> 00:45:33.801
to the number of videos
an account can host?"

00:45:33.801 --> 00:45:35.200
The answer is yes.

00:45:35.200 --> 00:45:37.234
Right now if you're uploading
videos through the API,

00:45:37.234 --> 00:45:39.901
we have a limit
of 2,000 videos.

00:45:39.901 --> 00:45:41.334
The reason we do this
is YouTube

00:45:41.334 --> 00:45:45.067
is about users sharing their
video and--with the community,

00:45:45.067 --> 00:45:46.567
and so we do this
to make sure

00:45:46.567 --> 00:45:49.067
that, you know, videos are being
uploaded to a user's account,

00:45:49.067 --> 00:45:52.067
rather than having one account
for an entire site

00:45:52.067 --> 00:45:55.400
and all the videos being
uploaded to a single account.

00:45:55.400 --> 00:45:57.400
man: So, in the case here
with the dogs,

00:45:57.400 --> 00:45:59.734
people are expected to--
to pretty much upload

00:45:59.734 --> 00:46:01.901
to their own YouTube accounts,

00:46:01.901 --> 00:46:04.234
as opposed
to that one centralized place.

00:46:04.234 --> 00:46:05.601
Correct, yeah.

00:46:05.601 --> 00:46:08.234
Yeah, so, like, in--in Dogbook,
you know, I-I go and it--

00:46:08.234 --> 00:46:09.734
I grant it access
to upload the video

00:46:09.734 --> 00:46:12.567
to my personal YouTube account
and so--

00:46:12.567 --> 00:46:14.067
That's why we have
the developer tags

00:46:14.067 --> 00:46:15.901
so that you,
the developer, can say,

00:46:15.901 --> 00:46:18.567
"Show me, you know,
all the videos that I uploaded

00:46:18.567 --> 00:46:20.234
as a--as a Web site,"

00:46:20.234 --> 00:46:22.400
but while keeping the videos
in the user account

00:46:22.400 --> 00:46:24.234
so that the user
owns those videos.

00:46:24.234 --> 00:46:28.400
And so it--it kind of lets
both people manage that state.

00:46:28.400 --> 00:46:31.400
man: Is it possible
to automatically register them

00:46:31.400 --> 00:46:33.901
on the fly through the API

00:46:33.901 --> 00:46:36.567
so that, you know,
it's kind of a seamless process?

00:46:36.567 --> 00:46:38.734
Harding: Right, so the question
is can you register users

00:46:38.734 --> 00:46:40.067
on the fly through the API?

00:46:40.067 --> 00:46:41.234
Not at the moment.
Again, that's something

00:46:41.234 --> 00:46:43.067
that we're looking into,
kind of the way--

00:46:43.067 --> 00:46:45.567
You know, the way
that we're looking at this

00:46:45.567 --> 00:46:48.234
is when you make
that AuthSub request,

00:46:48.234 --> 00:46:50.400
you know, if you're not logged
in, you'll get a log-in UI

00:46:50.400 --> 00:46:51.901
to say,
"Log in with your account."

00:46:51.901 --> 00:46:53.234
What we want to do
is make it

00:46:53.234 --> 00:46:54.901
so you can actually create
an account at that time

00:46:54.901 --> 00:46:56.234
if you don't have one

00:46:56.234 --> 00:46:58.234
and then authorize
at the same time

00:46:58.234 --> 00:47:00.033
and then go
back to your site.

00:47:00.033 --> 00:47:01.400
So it's not possible now,

00:47:01.400 --> 00:47:03.501
but that's something
that we're working on.

00:47:05.400 --> 00:47:07.067
So I want to show you
an example.

00:47:07.067 --> 00:47:10.734
We don't have a good third-party
site that's doing these--

00:47:10.734 --> 00:47:12.067
using
these developer tags,

00:47:12.067 --> 00:47:14.567
but I want to kind of illustrate
how this can be done.

00:47:14.567 --> 00:47:17.567
So one feature I can do
with these developer tags

00:47:17.567 --> 00:47:20.234
is say, "Just show me
every video that's been uploaded

00:47:20.234 --> 00:47:22.234
through my--
with my developer key."

00:47:22.234 --> 00:47:24.067
So, in this case,
this is just a demo site.

00:47:24.067 --> 00:47:25.567
I only have a couple videos.

00:47:25.567 --> 00:47:26.667
So this is all the videos

00:47:26.667 --> 00:47:29.067
that have been uploaded
through this site.

00:47:29.067 --> 00:47:30.901
I can honestly say--

00:47:30.901 --> 00:47:32.400
you know, say I want to do
a search.

00:47:32.400 --> 00:47:33.767
Maybe I say, "Test," right?

00:47:33.767 --> 00:47:36.734
So this will show me
all the test videos on YouTube.

00:47:36.734 --> 00:47:38.901
But I want to do this
just focusing on my site,

00:47:38.901 --> 00:47:43.434
so I'll say, "Restrict to that--
my developer tag category."

00:47:43.434 --> 00:47:45.400
And you'll see
I'll only get the results

00:47:45.400 --> 00:47:47.234
that were uploaded
through my site.

00:47:47.234 --> 00:47:49.234
Or I can even go one step
further and say, you know,

00:47:49.234 --> 00:47:51.234
"What are the videos
that this--

00:47:51.234 --> 00:47:54.234
"my--my user, John,
on my site,

00:47:54.234 --> 00:47:57.334
uploaded through my API?"

00:47:57.334 --> 00:47:59.234
You can see that, in this case,
there's only one video

00:47:59.234 --> 00:48:00.901
that I uploaded
with this account

00:48:00.901 --> 00:48:02.667
through this site.

00:48:04.400 --> 00:48:06.200
Let's go back, while we're here,
and check on--

00:48:06.200 --> 00:48:09.234
on my Dogbook video.

00:48:09.234 --> 00:48:11.167
And it looks like we're just--
we're a little slow today.

00:48:11.167 --> 00:48:12.567
[laughs]

00:48:12.567 --> 00:48:14.033
So, unfortunately, this video
is still being processed,

00:48:14.033 --> 00:48:15.501
but if we come back later,

00:48:15.501 --> 00:48:17.868
I'll prove that it--
it really did work.

00:48:20.234 --> 00:48:21.534
And so, with that, actually,

00:48:21.534 --> 00:48:24.234
I just want to point you
at a couple references.

00:48:24.234 --> 00:48:25.901
code.google.com
is sort of the home

00:48:25.901 --> 00:48:27.901
for all of Google Data APIs,

00:48:27.901 --> 00:48:30.400
and our YouTube API
documentation is on there,

00:48:30.400 --> 00:48:31.901
and we also have
a Google group

00:48:31.901 --> 00:48:34.400
that's staffed by our wonderful
developer-operations team

00:48:34.400 --> 00:48:37.234
and trying to make sure
that everybody plays nicely

00:48:37.234 --> 00:48:39.133
and--and gets
their questions answered.

00:48:39.133 --> 00:48:40.601
Then with that,
I want to open up

00:48:40.601 --> 00:48:42.567
if there
are further questions.

00:48:42.567 --> 00:48:43.734
Yes, in back.

00:48:43.734 --> 00:48:45.400
man: Question
on the search API.

00:48:45.400 --> 00:48:48.734
I saw that the max results
is 15 per page.

00:48:48.734 --> 00:48:52.067
Is there a cap, like,
how many results you can get?

00:48:52.067 --> 00:48:53.567
Harding: Yeah, the question is,
"Is there a cap

00:48:53.567 --> 00:48:55.567
on the total number of results
that you can retrieve?"

00:48:55.567 --> 00:48:56.734
The answer is yes.

00:48:56.734 --> 00:48:59.734
The most you can get to
is 1,000.

00:48:59.734 --> 00:49:00.834
Yes.

00:49:00.834 --> 00:49:02.234
man: Could you put
the references back up?

00:49:02.234 --> 00:49:05.234
Harding: Yeah, sorry.
[laughs]

00:49:05.234 --> 00:49:08.067
man: Thank you.

00:49:08.067 --> 00:49:09.567
Harding: All right,
if there's nothing else,

00:49:09.567 --> 00:49:11.334
then it's actually time
for the lunch break.

00:49:11.334 --> 00:49:12.767
So all of our staff--

00:49:12.767 --> 00:49:15.067
or lunch is going to be served
out on the--the back patio.

00:49:15.067 --> 00:49:17.067
We've got a barbecue set up
for you.

00:49:17.067 --> 00:49:18.567
The staff will be out there.

00:49:18.567 --> 00:49:20.567
So, if you've got questions
and you want to ask somebody,

00:49:20.567 --> 00:49:23.901
find people in the--the gray
"Powered by YouTube" shirt,

00:49:23.901 --> 00:49:26.734
and then we're gonna be
back here at 1:00

00:49:26.734 --> 00:49:28.400
to resume the sessions.

00:49:28.400 --> 00:49:29.667
Thank you.

