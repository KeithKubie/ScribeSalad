WEBVTT
Kind: captions
Language: en

00:00:01.130 --> 00:00:04.690
Hi, I'm Alex Nicksay, a
senior engineer at Google.

00:00:04.690 --> 00:00:07.690
I lead the front
ends team at YouTube.

00:00:07.690 --> 00:00:10.600
Over 6 billion hours of
video are watched each month

00:00:10.600 --> 00:00:12.010
on YouTube.

00:00:12.010 --> 00:00:15.320
That's almost an hour for
every person on earth.

00:00:15.320 --> 00:00:17.410
At YouTube, we want to
get that video to you

00:00:17.410 --> 00:00:19.870
as fast as possible.

00:00:19.870 --> 00:00:22.030
Since last year,
we've reduced the time

00:00:22.030 --> 00:00:24.630
to start video playback
by over a second.

00:00:24.630 --> 00:00:28.420
That's 40% faster.

00:00:28.420 --> 00:00:31.270
So where did we start
in this optimization?

00:00:31.270 --> 00:00:34.290
We analyzed data from
our real user monitoring,

00:00:34.290 --> 00:00:35.830
and we broke down
the time it takes

00:00:35.830 --> 00:00:38.590
to start playback
into critical stages.

00:00:38.590 --> 00:00:40.500
And we realized that
one of those stages

00:00:40.500 --> 00:00:44.880
is the same for every playback--
initializing the player.

00:00:44.880 --> 00:00:48.480
So we asked ourselves, what
if we reuse the same player?

00:00:48.480 --> 00:00:49.960
The answer?

00:00:49.960 --> 00:00:52.790
It's faster.

00:00:52.790 --> 00:00:54.330
By maintaining a
persistent player,

00:00:54.330 --> 00:00:56.200
we're doing less work
on each navigation.

00:00:56.200 --> 00:00:58.840
And by doing less work, we're
making each playback start

00:00:58.840 --> 00:01:00.310
sooner.

00:01:00.310 --> 00:01:02.700
So how did we do it?

00:01:02.700 --> 00:01:06.370
We built a new JavaScript
framework for page navigation.

00:01:06.370 --> 00:01:10.890
Structured page fragments,
or SPF for short,

00:01:10.890 --> 00:01:14.070
is a lightweight framework that
handles navigations and updates

00:01:14.070 --> 00:01:16.990
to page sections.

00:01:16.990 --> 00:01:18.650
When someone first
arrives at the site,

00:01:18.650 --> 00:01:21.490
the content is sent from the
server and rendered normally.

00:01:21.490 --> 00:01:24.450
We call this static navigation.

00:01:24.450 --> 00:01:27.480
But when going to the next
page, only document fragments

00:01:27.480 --> 00:01:30.420
are sent and page sections
are updated accordingly.

00:01:30.420 --> 00:01:33.800
We call this dynamic navigation.

00:01:33.800 --> 00:01:36.040
So what does this give us?

00:01:36.040 --> 00:01:38.390
It gives us the fastest
possible rendering time

00:01:38.390 --> 00:01:41.960
for that first page, leveraging
all of our existing performance

00:01:41.960 --> 00:01:43.300
techniques.

00:01:43.300 --> 00:01:45.280
And it additionally
allows us to maintain

00:01:45.280 --> 00:01:48.230
a persistent responsive
interface using

00:01:48.230 --> 00:01:50.910
the same rendering
code as before.

00:01:50.910 --> 00:01:54.140
This all creates a
better user experience.

00:01:54.140 --> 00:01:56.880
No one is staring at a blank
white screen waiting for a page

00:01:56.880 --> 00:01:58.840
to load.

00:01:58.840 --> 00:02:01.770
But what about the
developer experience?

00:02:01.770 --> 00:02:04.300
This framework allows us
to maintain productivity

00:02:04.300 --> 00:02:08.660
by using the same code for both
static and dynamic rendering.

00:02:08.660 --> 00:02:12.410
And it gives us the flexibility
to use any server side language

00:02:12.410 --> 00:02:14.270
and template system we want.

00:02:14.270 --> 00:02:16.565
It also supports
sending data for use

00:02:16.565 --> 00:02:19.100
in client side templating.

00:02:19.100 --> 00:02:21.990
So let's take a look at
how it's implemented.

00:02:21.990 --> 00:02:24.290
We'll start with
requesting content.

00:02:24.290 --> 00:02:25.280
Here's a link.

00:02:25.280 --> 00:02:29.470
Clicking it will trigger a
static navigation request.

00:02:29.470 --> 00:02:31.940
Here's that same link using SPF.

00:02:31.940 --> 00:02:35.970
Clicking it will trigger a
dynamic navigation request.

00:02:35.970 --> 00:02:38.370
As you can see, we use
progressive enhancement

00:02:38.370 --> 00:02:43.280
and a simple syntax to enable
SPF for supported browsers.

00:02:43.280 --> 00:02:45.980
Now let's look at sending
that content back.

00:02:45.980 --> 00:02:49.580
Here's the HTML of a response
for static navigation.

00:02:49.580 --> 00:02:51.450
In this example, we
use a common layout

00:02:51.450 --> 00:02:55.830
of upper masthead, middle
content, and lower footer.

00:02:55.830 --> 00:02:58.860
Here's that same
response using SPF.

00:02:58.860 --> 00:03:00.620
Only the fragment for
the middle content

00:03:00.620 --> 00:03:02.450
is sent because the
masthead and the footer

00:03:02.450 --> 00:03:03.960
don't need to change.

00:03:03.960 --> 00:03:08.380
JSON is used for transport
during dynamic navigation.

00:03:08.380 --> 00:03:10.930
As you can see, the fragments
for static navigation

00:03:10.930 --> 00:03:13.450
map directly to those
for dynamic navigation.

00:03:13.450 --> 00:03:16.666
And this makes the
implementation very easy.

00:03:16.666 --> 00:03:18.040
Now we won't cover
them in depth,

00:03:18.040 --> 00:03:20.180
But SPF has several
optional features

00:03:20.180 --> 00:03:22.600
that can help you
improve your site.

00:03:22.600 --> 00:03:25.390
In some web apps, HTTP
caching is inappropriate,

00:03:25.390 --> 00:03:28.600
but SPF allows you to cache
responses in client memory

00:03:28.600 --> 00:03:31.940
according to your application
specific parameters.

00:03:31.940 --> 00:03:36.110
SPF can also prefetch responses
automatically or manually

00:03:36.110 --> 00:03:38.840
to predictively
boost performance.

00:03:38.840 --> 00:03:42.680
And SPF supports streaming
multipart responses in chunks

00:03:42.680 --> 00:03:45.320
to enable on the fly processing.

00:03:45.320 --> 00:03:49.910
This speeds up navigation by
starting the rendering early.

00:03:49.910 --> 00:03:52.100
Now let's take a brief look
at when YouTube launched

00:03:52.100 --> 00:03:56.480
these features, and how they
each impacted performance.

00:03:56.480 --> 00:03:59.490
Here's real data from
YouTube's real user monitoring.

00:03:59.490 --> 00:04:02.010
I've graphed the median
time to start playback

00:04:02.010 --> 00:04:05.720
for both HTML5,
Flash, and the traffic

00:04:05.720 --> 00:04:07.780
weighted composite of both.

00:04:07.780 --> 00:04:09.540
But for clarity,
we're going to focus

00:04:09.540 --> 00:04:13.530
on the five day moving
average of the composite.

00:04:13.530 --> 00:04:16.040
Now when we first introduced
dynamic navigation

00:04:16.040 --> 00:04:17.940
between consecutive
video pages, we

00:04:17.940 --> 00:04:19.510
didn't have a
persistent player yet.

00:04:19.510 --> 00:04:22.490
And we only saw a minor
reduction in overall time

00:04:22.490 --> 00:04:23.720
to playback.

00:04:23.720 --> 00:04:27.540
Despite this, users reported
that the site felt faster.

00:04:27.540 --> 00:04:30.970
This showed us that there were
some very real user perceived

00:04:30.970 --> 00:04:35.534
performance gains that
dynamic navigation brings.

00:04:35.534 --> 00:04:37.200
Now when we added
that persistent player

00:04:37.200 --> 00:04:39.290
between consecutive
video pages in Chrome,

00:04:39.290 --> 00:04:43.830
we reduced the overall time
until playback by 8 and 1/2%.

00:04:43.830 --> 00:04:47.970
Expanding all supported browsers
was another 9% improvement.

00:04:47.970 --> 00:04:51.420
And enabling on the fly
processing over HTTP chunking

00:04:51.420 --> 00:04:54.410
yielded a 5% speed up.

00:04:54.410 --> 00:04:58.200
By defaulting supported
browsers to our HTML5 player,

00:04:58.200 --> 00:05:01.250
we reduced our overall
player initialization time

00:05:01.250 --> 00:05:04.560
and generated an 8% improvement.

00:05:04.560 --> 00:05:06.710
And then by
dynamically navigating

00:05:06.710 --> 00:05:08.860
between all pages on
the site, not just

00:05:08.860 --> 00:05:12.290
consecutive video pages, we
were able to preemptively create

00:05:12.290 --> 00:05:14.640
a persistent player
before it was even used.

00:05:14.640 --> 00:05:16.810
And this reduced our
overall time until playback

00:05:16.810 --> 00:05:19.310
by 7 and 1/2%.

00:05:19.310 --> 00:05:22.460
When we expanded our default
HTML player to both videos

00:05:22.460 --> 00:05:26.050
with and without ads, we
yielded a 2% improvement.

00:05:26.050 --> 00:05:29.170
And finally, enabling on
the fly processing over SPDY

00:05:29.170 --> 00:05:32.260
yielded a 4 and 1/2% speed up.

00:05:32.260 --> 00:05:34.330
And that's how we
made it 40% faster

00:05:34.330 --> 00:05:36.810
to play a video on YouTube.

00:05:36.810 --> 00:05:38.410
So what's next?

00:05:38.410 --> 00:05:40.950
The great news is that we've
open source the framework so

00:05:40.950 --> 00:05:43.090
you can use SPF on your site.

00:05:43.090 --> 00:05:46.780
Check out our project page
on GitHub to learn more.

00:05:46.780 --> 00:05:48.825
Thanks for watching.

