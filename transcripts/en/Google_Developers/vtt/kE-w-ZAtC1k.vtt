WEBVTT
Kind: captions
Language: en

00:00:00.950 --> 00:00:02.050
ALI AFSHAR: Thanks for coming.

00:00:02.050 --> 00:00:03.740
Please obviously
leave if you--

00:00:03.740 --> 00:00:05.920
no, I'm kidding.

00:00:05.920 --> 00:00:08.650
So, thank you everyone
for coming today.

00:00:08.650 --> 00:00:10.260
Really good to see you all.

00:00:10.260 --> 00:00:14.680
Today, I'm going to be talking
about using Google Drive as

00:00:14.680 --> 00:00:18.370
the storage solution
on Android.

00:00:18.370 --> 00:00:20.970
We're not going to be breaking
the bounds of modern science.

00:00:20.970 --> 00:00:23.580
I'm going to talk to you about
files and where you can put

00:00:23.580 --> 00:00:26.890
them and where you
should put them.

00:00:26.890 --> 00:00:30.990
Personally, I think Drive is
the perfect solution for

00:00:30.990 --> 00:00:34.120
Android, and I'm going to
tell you why, obviously.

00:00:34.120 --> 00:00:34.390
I'm in love.

00:00:34.390 --> 00:00:35.690
There's a heart for me.

00:00:35.690 --> 00:00:37.650
That's really great.

00:00:37.650 --> 00:00:39.100
What would you do with this?

00:00:39.100 --> 00:00:43.710
You would allow your users to
have seamless, cross-device,

00:00:43.710 --> 00:00:46.940
cross-platform,
cross-application cross-user

00:00:46.940 --> 00:00:48.520
experiences.

00:00:48.520 --> 00:00:50.810
Sorry that was a big run
through, but that's the

00:00:50.810 --> 00:00:52.280
essential point of it.

00:00:55.510 --> 00:00:58.920
If you do that for people,
they will be happy.

00:00:58.920 --> 00:01:01.060
Put the user first, focus
on the user, and

00:01:01.060 --> 00:01:03.720
the rest will follow.

00:01:03.720 --> 00:01:09.120
That's our goal here, keep
the users happy.

00:01:09.120 --> 00:01:11.610
If I can jump straight into a
use case, this is a personal

00:01:11.610 --> 00:01:13.115
situation I had.

00:01:13.115 --> 00:01:15.000
I have a child.

00:01:15.000 --> 00:01:17.830
I'm quite a paranoid
parent, and I like

00:01:17.830 --> 00:01:20.190
taking data about things.

00:01:20.190 --> 00:01:24.410
There are plenty of applications
for Android for

00:01:24.410 --> 00:01:27.870
various handheld devices
that collect baby data.

00:01:27.870 --> 00:01:30.720
Can you imagine every time your
baby does a poop, you

00:01:30.720 --> 00:01:33.210
record it, every time your baby
has a nap, you record it,

00:01:33.210 --> 00:01:37.270
every time any biological
function you could imagine,

00:01:37.270 --> 00:01:38.840
medicine, this kind of thing.

00:01:38.840 --> 00:01:43.480
So there are loads of these
applications, lots

00:01:43.480 --> 00:01:44.520
and lots and lots.

00:01:44.520 --> 00:01:48.820
And I went through them one by
one and I found what I thought

00:01:48.820 --> 00:01:50.120
was a really good one.

00:01:50.120 --> 00:01:53.840
It's called Baby ESP, and it is
a really great application.

00:01:53.840 --> 00:01:57.110
It's perfect for the use case.

00:01:57.110 --> 00:02:00.000
When you install it, you have
to set up some information.

00:02:00.000 --> 00:02:03.700
So at the start, I set in the
name of the child, the date of

00:02:03.700 --> 00:02:06.140
birth, these kind of things,
and that's the

00:02:06.140 --> 00:02:09.169
configuration it needs.

00:02:09.169 --> 00:02:11.770
And you can see along the top
there-- these are screenshots

00:02:11.770 --> 00:02:12.830
from the actual application--

00:02:12.830 --> 00:02:15.050
I removed all the data.

00:02:15.050 --> 00:02:17.040
So you can track information
about your baby.

00:02:17.040 --> 00:02:19.920
You can see at the top there,
they've got nursing and

00:02:19.920 --> 00:02:22.080
sleeping and diapers and
this kind of thing.

00:02:22.080 --> 00:02:23.120
So really great.

00:02:23.120 --> 00:02:25.730
Has everything I need.

00:02:25.730 --> 00:02:26.700
This is an example.

00:02:26.700 --> 00:02:28.160
You record a session.

00:02:28.160 --> 00:02:30.500
It tells you how long it
was, what it involved.

00:02:30.500 --> 00:02:32.070
You can add some
notes about it.

00:02:35.230 --> 00:02:36.840
Another example.

00:02:36.840 --> 00:02:39.640
You can imagine me geeking
out on this, can't you?

00:02:39.640 --> 00:02:41.390
I'm collecting data.

00:02:41.390 --> 00:02:44.710
It's giving me these
beautiful reports.

00:02:44.710 --> 00:02:46.370
Even gives me-- look at that.

00:02:46.370 --> 00:02:48.680
Really lovely.

00:02:48.680 --> 00:02:53.230
So it's fulfilling all my
paranoid parent desires,

00:02:53.230 --> 00:02:57.920
everything I want until one
day, I bought a Nexus 7.

00:02:57.920 --> 00:03:00.530
So who has a Nexus 7?

00:03:00.530 --> 00:03:01.130
Great.

00:03:01.130 --> 00:03:02.490
Amazing device, aren't they?

00:03:02.490 --> 00:03:03.160
Really, really good.

00:03:03.160 --> 00:03:04.260
So I thought, this is great.

00:03:04.260 --> 00:03:06.350
I'm going to set this up
in my child's room.

00:03:06.350 --> 00:03:08.660
It will be permanent data
collection device.

00:03:12.640 --> 00:03:13.590
This is true.

00:03:13.590 --> 00:03:14.050
Thanks, guys.

00:03:14.050 --> 00:03:15.230
Good to see you.

00:03:15.230 --> 00:03:17.000
Thanks for coming.

00:03:17.000 --> 00:03:19.590
So really great.

00:03:19.590 --> 00:03:22.900
And then I found there was a
problem because I installed

00:03:22.900 --> 00:03:25.570
this but it wasn't configured
correctly, so I had to

00:03:25.570 --> 00:03:26.880
configure it.

00:03:26.880 --> 00:03:30.920
That was a bit of a nuisance.

00:03:30.920 --> 00:03:33.830
Even worse than that, I found
that when I was changing

00:03:33.830 --> 00:03:38.200
configuration values on one
device and then looking on the

00:03:38.200 --> 00:03:41.550
other device, they wouldn't be
updating, so I would get two

00:03:41.550 --> 00:03:44.520
versions of configuration
out of sync.

00:03:44.520 --> 00:03:46.610
That's really starting
to get a bit painful.

00:03:46.610 --> 00:03:51.010
Even worse than that, the
data wasn't available.

00:03:51.010 --> 00:03:53.810
So I was collecting all this
data on one device, I was

00:03:53.810 --> 00:03:56.040
collecting all this data on
the other device, and the

00:03:56.040 --> 00:03:59.130
reports were not collecting
the data.

00:03:59.130 --> 00:04:00.900
So this was really,
really painful

00:04:00.900 --> 00:04:04.750
for me, really painful.

00:04:04.750 --> 00:04:08.440
And in fact, I'd go as far
as to say this is a bug.

00:04:08.440 --> 00:04:12.320
My data is siloed in two
separate places in two

00:04:12.320 --> 00:04:13.660
separate devices.

00:04:13.660 --> 00:04:15.250
It's not useful to me.

00:04:15.250 --> 00:04:17.380
What is this application
doing?

00:04:17.380 --> 00:04:22.720
This application is treating
my device as the user.

00:04:22.720 --> 00:04:24.230
Don't treat me as a device.

00:04:24.230 --> 00:04:26.870
Treat me as a person with
multiple devices.

00:04:26.870 --> 00:04:30.570
That's a holistic approach to
who I am and what I'm doing,

00:04:30.570 --> 00:04:32.526
and that's what you
want to do.

00:04:32.526 --> 00:04:35.250
So Drive is a technology
that solves this.

00:04:35.250 --> 00:04:36.570
This is a simple drawing.

00:04:36.570 --> 00:04:39.140
I have data in one place, and I
have data in another place.

00:04:39.140 --> 00:04:42.020
If I had something in the middle
to synchronize all this

00:04:42.020 --> 00:04:43.990
data, then that would
be great.

00:04:43.990 --> 00:04:47.210
Drive perfectly solves
this problem.

00:04:50.890 --> 00:04:54.630
And there are loads of baby
monitoring software.

00:04:54.630 --> 00:04:57.470
This could be the difference
between your software being

00:04:57.470 --> 00:05:02.650
5.0 stars or 4.8 stars, and that
makes a huge difference.

00:05:02.650 --> 00:05:07.300
So treat the user as a user
holistically, and they will

00:05:07.300 --> 00:05:08.420
install your app.

00:05:08.420 --> 00:05:10.520
Look, 1,000 results.

00:05:10.520 --> 00:05:13.010
I only got through the first
25 before I gave up looking

00:05:13.010 --> 00:05:17.325
for one that actually did
what I wanted it to do.

00:05:17.325 --> 00:05:20.130
Yay, happy user, me.

00:05:20.130 --> 00:05:21.380
Synchronized data.

00:05:27.950 --> 00:05:30.100
Of course, just an
aside, Android is

00:05:30.100 --> 00:05:31.060
just one part of this.

00:05:31.060 --> 00:05:33.780
I've spoken about cross-device
experiences, but obviously

00:05:33.780 --> 00:05:34.375
cross-platform.

00:05:34.375 --> 00:05:37.440
Now, the Google Drive SDK
is available on any

00:05:37.440 --> 00:05:38.960
platform that you have.

00:05:38.960 --> 00:05:41.730
Anywhere you can make
an HTTP request, you

00:05:41.730 --> 00:05:42.930
can have Google Drive.

00:05:42.930 --> 00:05:44.600
Go and check out our
Quickstarts.

00:05:44.600 --> 00:05:48.050
Again, you have an application
that works on your Android

00:05:48.050 --> 00:05:51.300
device, but how great would it
be if your web version also

00:05:51.300 --> 00:05:52.620
had synchronized data?

00:05:52.620 --> 00:05:53.800
So that's just an aside.

00:05:53.800 --> 00:05:55.940
We're focusing on Android
today, but all

00:05:55.940 --> 00:05:58.980
platforms have this.

00:05:58.980 --> 00:06:01.180
And multiple devices.

00:06:01.180 --> 00:06:04.160
We used to ask the question to
the crowd, who has multiple

00:06:04.160 --> 00:06:05.870
devices, and then one
or two people would

00:06:05.870 --> 00:06:07.420
stick their hand up.

00:06:07.420 --> 00:06:10.040
Who doesn't have multiple
devices?

00:06:10.040 --> 00:06:11.690
Seriously, who doesn't have
multiple devices?

00:06:19.090 --> 00:06:21.870
You see, my son's mom, who
collects data here, does have

00:06:21.870 --> 00:06:24.170
multiple devices and
it's just a thing.

00:06:24.170 --> 00:06:27.610
So yeah, everyone has multiple
devices, so cater to people.

00:06:30.300 --> 00:06:33.790
And I think this is part
of a general problem.

00:06:33.790 --> 00:06:36.740
Where is my data?

00:06:36.740 --> 00:06:37.850
Where is my data?

00:06:37.850 --> 00:06:39.860
Where is it stored?

00:06:39.860 --> 00:06:45.330
And specifically in our case,
where are my files?

00:06:45.330 --> 00:06:48.270
Now, I was thinking of a good
image to put on this slide and

00:06:48.270 --> 00:06:51.030
I was starting to think of
my history of files.

00:06:51.030 --> 00:06:55.580
Go back 20 years when I started
collecting PDFs of

00:06:55.580 --> 00:06:58.400
medical data, whatever it was.

00:06:58.400 --> 00:07:02.860
And I've slowly realized that
I've lost all of that stuff.

00:07:02.860 --> 00:07:06.020
Some of it is on a hard drive of
an old laptop that I can't

00:07:06.020 --> 00:07:07.430
even find the power supply to.

00:07:07.430 --> 00:07:10.485
I'd need to unscrew the thing
and take the hard drive out

00:07:10.485 --> 00:07:13.250
and find an adapter and
all this nasty stuff.

00:07:13.250 --> 00:07:15.420
It's all lost.

00:07:15.420 --> 00:07:17.820
It's all totally,
totally lost.

00:07:17.820 --> 00:07:23.120
The last place I want to store
a file is on my hard drive.

00:07:23.120 --> 00:07:25.430
I don't know if you guys are
gradually getting into that

00:07:25.430 --> 00:07:26.540
same thought.

00:07:26.540 --> 00:07:28.420
I just don't want it
on my hard drive.

00:07:28.420 --> 00:07:32.500
Even worse than that, I don't
want it on my phone's SD card.

00:07:32.500 --> 00:07:34.080
How am I going to get to that?

00:07:34.080 --> 00:07:37.080
I've got old phones, I can't
charge them, they won't start,

00:07:37.080 --> 00:07:38.390
someone stepped on it.

00:07:38.390 --> 00:07:42.330
I just can't get that stuff
out so my files are lost.

00:07:42.330 --> 00:07:43.870
Tears is in the rain.

00:07:43.870 --> 00:07:44.615
I know, really sad.

00:07:44.615 --> 00:07:46.670
It got me really depressed.

00:07:46.670 --> 00:07:50.170
I found a sad picture.

00:07:50.170 --> 00:07:52.090
So that's that.

00:07:52.090 --> 00:07:53.950
Store my data where I need it.

00:07:53.950 --> 00:07:56.230
This is somewhat of a plea.

00:07:56.230 --> 00:07:58.630
As a user, please store
my data where

00:07:58.630 --> 00:08:00.420
I can get it anywhere.

00:08:00.420 --> 00:08:03.080
Obviously, the cloud is a
perfect place for that.

00:08:03.080 --> 00:08:06.450
Store it somewhere where I
can share it with people,

00:08:06.450 --> 00:08:08.330
cross-user applications.

00:08:08.330 --> 00:08:10.280
Drive is the perfect
place for that.

00:08:10.280 --> 00:08:13.010
Store it somewhere where I can
share it with different

00:08:13.010 --> 00:08:14.430
applications.

00:08:14.430 --> 00:08:17.460
A file, the abstraction of a
file, is perfect for this.

00:08:17.460 --> 00:08:18.910
You have files on
your hard drive.

00:08:18.910 --> 00:08:20.440
You share it with other
applications.

00:08:20.440 --> 00:08:24.800
Again, Drive extends this
abstraction into the cloud.

00:08:24.800 --> 00:08:27.020
You can share your Drive files
with other applications.

00:08:29.830 --> 00:08:31.530
So Google Drive.

00:08:31.530 --> 00:08:36.110
Store my data where I need
it when I need it.

00:08:36.110 --> 00:08:38.470
Especially useful on Android.

00:08:38.470 --> 00:08:39.280
Why?

00:08:39.280 --> 00:08:41.679
So I could be talking about
any cloud file storage

00:08:41.679 --> 00:08:44.850
solution, and you know there are
plenty of them out there.

00:08:44.850 --> 00:08:47.500
Why is it especially
useful on Android?

00:08:47.500 --> 00:08:50.940
Well, everyone who's got the
phone has already got a Google

00:08:50.940 --> 00:08:53.235
account with 5 gigabytes
of storage.

00:08:56.760 --> 00:08:57.520
Isn't that obvious?

00:08:57.520 --> 00:08:58.930
Doesn't that make sense?

00:08:58.930 --> 00:09:02.330
I think that really makes
good strong sense.

00:09:02.330 --> 00:09:03.130
Use that storage.

00:09:03.130 --> 00:09:03.930
It's there.

00:09:03.930 --> 00:09:05.690
They don't have to
sign up again.

00:09:05.690 --> 00:09:08.610
You will get one permissions
screen asking for access and

00:09:08.610 --> 00:09:12.427
your application can save that
authorization and just use it.

00:09:12.427 --> 00:09:13.800
Yay.

00:09:13.800 --> 00:09:15.580
No additional sign
up, nothing else.

00:09:15.580 --> 00:09:16.330
Use that data.

00:09:16.330 --> 00:09:17.580
It's there.

00:09:20.910 --> 00:09:23.380
So how do we do it?

00:09:23.380 --> 00:09:26.990
I've got a demo for you where I
wrote a couple of things and

00:09:26.990 --> 00:09:28.490
I want to show you the demo.

00:09:28.490 --> 00:09:31.790
Now, we've had networking
issues, so I actually

00:09:31.790 --> 00:09:33.720
recorded the demo.

00:09:33.720 --> 00:09:35.680
I'm kind of hoping we don't have
to watch that recording

00:09:35.680 --> 00:09:38.570
because it's a bit juttery,
so let's have a look.

00:09:38.570 --> 00:09:45.980
Now, the kind of application
I wrote is like a baby data

00:09:45.980 --> 00:09:47.860
collection application.

00:09:47.860 --> 00:09:49.850
I'll turn it on in a second.

00:09:49.850 --> 00:09:52.910
It's nowhere near as good as the
ones you see online, but

00:09:52.910 --> 00:09:54.910
it gives you a vague idea.

00:09:54.910 --> 00:09:57.470
Hang on.

00:09:57.470 --> 00:09:59.570
Yes.

00:09:59.570 --> 00:10:01.980
OK, so I'm using a wide network
connection that has

00:10:01.980 --> 00:10:05.880
never been tested before, so
we may have to jump to the

00:10:05.880 --> 00:10:07.580
video and I'm sorry
about that.

00:10:07.580 --> 00:10:09.030
So what is this?

00:10:09.030 --> 00:10:11.840
OK, you can see on there, you
can see the various things--

00:10:11.840 --> 00:10:14.170
Jigsaw, Banana, Nap.

00:10:14.170 --> 00:10:16.890
I've segregated data into
three different types.

00:10:16.890 --> 00:10:18.500
Either your baby sleeps
or your baby plays

00:10:18.500 --> 00:10:20.330
or your baby eats.

00:10:20.330 --> 00:10:23.760
Pretty accurate if you've
got children.

00:10:23.760 --> 00:10:24.670
So what am I going to do?

00:10:24.670 --> 00:10:27.790
I'm just going to go right
ahead and add,

00:10:27.790 --> 00:10:28.880
when should he eat?

00:10:28.880 --> 00:10:31.190
Suggestions from the crowd?

00:10:31.190 --> 00:10:32.010
AUDIENCE: Steak.

00:10:32.010 --> 00:10:40.300
Steak So I add that
there, and look.

00:10:40.300 --> 00:10:41.550
It's appeared on the
other device.

00:10:44.030 --> 00:10:45.810
Step one done.

00:10:45.810 --> 00:10:46.251
[APPLAUSE]

00:10:46.251 --> 00:10:48.460
ALI AFSHAR: Thank you.

00:10:48.460 --> 00:10:50.760
I told you, we're not breaking
the bounds of modern science,

00:10:50.760 --> 00:10:53.550
but imagine if that was the real
Baby ESP as I used it.

00:10:53.550 --> 00:10:55.650
I've immediately got the data
synchronized on both my

00:10:55.650 --> 00:10:58.600
devices, and we'll talk about
how we do that and what back

00:10:58.600 --> 00:11:00.590
end we use for that
in a second.

00:11:00.590 --> 00:11:02.270
You see it's going a
bit crazy, so we'll

00:11:02.270 --> 00:11:04.700
move straight on.

00:11:04.700 --> 00:11:06.900
The other part is
the settings.

00:11:06.900 --> 00:11:10.030
Now, this is pretty standard
Settings page that you would

00:11:10.030 --> 00:11:11.535
have for an application.

00:11:11.535 --> 00:11:14.060
It uses Android's shared
preferences.

00:11:14.060 --> 00:11:18.240
Android people know that's a
persistent store by which you

00:11:18.240 --> 00:11:20.670
can put some key values
essentially and share them

00:11:20.670 --> 00:11:23.140
globally across your
application.

00:11:23.140 --> 00:11:26.200
So we're going to go ahead
and we've got to

00:11:26.200 --> 00:11:28.800
change some of these.

00:11:28.800 --> 00:11:32.040
I'm going to give my son
another middle name.

00:11:32.040 --> 00:11:35.050
James I think sounds
pretty good.

00:11:35.050 --> 00:11:36.856
And he's moved onto
combination.

00:11:39.540 --> 00:11:41.300
So this sometimes takes
a few times.

00:11:41.300 --> 00:11:42.320
Why?

00:11:42.320 --> 00:11:45.620
Because we're at the mercy of
Android Sync Architecture.

00:11:45.620 --> 00:11:48.690
That's a good thing, being at
the mercy of this, but it

00:11:48.690 --> 00:11:50.810
might mean that it syncs now.

00:11:50.810 --> 00:11:51.900
It might not sync now.

00:11:51.900 --> 00:11:54.680
It might sync in 20
minutes time.

00:11:54.680 --> 00:11:56.080
Not exactly great
for this demo.

00:11:56.080 --> 00:11:58.315
So you can see I'm pressing
the buttons.

00:11:58.315 --> 00:11:59.990
Please work, please
work, please work.

00:11:59.990 --> 00:12:01.750
If not, I'll just reset
it and do it again.

00:12:07.710 --> 00:12:08.680
Let's try again.

00:12:08.680 --> 00:12:11.770
Obviously, my implementation is
bad, but I'm going to tell

00:12:11.770 --> 00:12:14.920
you the things that I did
and why it's useful.

00:12:19.672 --> 00:12:20.610
AUDIENCE: Airplane mode.

00:12:20.610 --> 00:12:23.190
ALI AFSHAR: So they told me to
leave it in Airplane mode.

00:12:23.190 --> 00:12:24.450
There we go.

00:12:24.450 --> 00:12:27.450
So what's happened here is it's
synchronized back to the

00:12:27.450 --> 00:12:28.620
original version.

00:12:28.620 --> 00:12:29.780
That's a bad bug.

00:12:29.780 --> 00:12:33.820
I've got the engineer
in the front row.

00:12:33.820 --> 00:12:35.480
There will be beatings,
but you can see.

00:12:39.450 --> 00:12:40.840
Let's try just one more time.

00:12:40.840 --> 00:12:42.960
Otherwise, I'm going to have
to get you to use your

00:12:42.960 --> 00:12:45.300
imaginations.

00:12:45.300 --> 00:12:48.180
Again, not good for
geeks, but sorry.

00:12:53.820 --> 00:12:54.490
[INAUDIBLE]

00:12:54.490 --> 00:12:55.263
for it to work.

00:12:55.263 --> 00:12:56.742
Please work, please work.

00:13:00.193 --> 00:13:01.180
Ah.

00:13:01.180 --> 00:13:01.600
Look at that.

00:13:01.600 --> 00:13:02.740
Did anyone notice?

00:13:02.740 --> 00:13:03.930
[APPLAUSE]

00:13:03.930 --> 00:13:06.960
ALI AFSHAR: So again, we're at
the mercy of the Android Sync

00:13:06.960 --> 00:13:09.020
Architecture, so I'm
sorry about that.

00:13:09.020 --> 00:13:11.680
So that's the demo, really
two simple things.

00:13:11.680 --> 00:13:14.810
We'll switch back to
the presentation.

00:13:14.810 --> 00:13:15.550
So that was the demo.

00:13:15.550 --> 00:13:18.090
I'm going to talk a bit about
how we did that and how it

00:13:18.090 --> 00:13:22.510
relates back to some of the
points I made earlier.

00:13:22.510 --> 00:13:23.240
This was the video.

00:13:23.240 --> 00:13:26.160
Look, you can see it's a bit
shaky, but we don't have to

00:13:26.160 --> 00:13:28.600
watch it, which is good.

00:13:28.600 --> 00:13:32.400
So we're storing data here
in two different places.

00:13:32.400 --> 00:13:34.960
We have two fundamentally
different paradigms here.

00:13:34.960 --> 00:13:37.780
We have one where we're
regularly collecting data that

00:13:37.780 --> 00:13:40.720
we can access and use
for reports, for

00:13:40.720 --> 00:13:42.550
various things like that.

00:13:42.550 --> 00:13:46.790
The other part is application
state, and Google Drive

00:13:46.790 --> 00:13:49.490
conveniently has two ways that
you can store data, and they

00:13:49.490 --> 00:13:52.020
match up very well with
these two things.

00:13:52.020 --> 00:13:55.750
So the first one is AppData,
and this is a feature we

00:13:55.750 --> 00:14:01.940
launched recently which gives
you, the developer, a folder

00:14:01.940 --> 00:14:04.990
inside the user's Google Drive
and that folder has special

00:14:04.990 --> 00:14:07.860
properties that make
it useful for this.

00:14:07.860 --> 00:14:08.950
So that's the first part.

00:14:08.950 --> 00:14:12.500
The second part is
the actual data.

00:14:12.500 --> 00:14:15.640
Now, we can just store that as
a regular file in Drive.

00:14:15.640 --> 00:14:20.620
In our case, you can see the
top one, Baby Times DB.

00:14:20.620 --> 00:14:23.790
I'm actually storing it as
a Google Spreadsheet.

00:14:23.790 --> 00:14:26.860
Now you might think, that's not
really a good solution.

00:14:26.860 --> 00:14:28.110
Well, we'll talk about it.

00:14:28.110 --> 00:14:30.890
I think it is actually a very
good solution for this.

00:14:30.890 --> 00:14:35.560
So we have two different places,
AppData for state and

00:14:35.560 --> 00:14:39.110
Google Drive regular files for
actual data, or images, or

00:14:39.110 --> 00:14:43.880
notes, or videos, whatever
you want to put in there.

00:14:43.880 --> 00:14:45.640
So how does it look?

00:14:45.640 --> 00:14:47.880
This is a recent screenshot.

00:14:47.880 --> 00:14:51.200
It just shows exactly what we
had there and it's in Google

00:14:51.200 --> 00:14:52.210
Spreadsheets.

00:14:52.210 --> 00:14:55.990
Remember, put my data
where I need it.

00:14:55.990 --> 00:14:58.680
I want to make graphs, I
want to make charts.

00:14:58.680 --> 00:15:01.430
I want to do cool things
like that.

00:15:01.430 --> 00:15:05.110
I want to be paranoid and really
soak in this thing.

00:15:05.110 --> 00:15:07.930
So I think Google Spreadsheets
is a good place to put my

00:15:07.930 --> 00:15:10.350
data, then.

00:15:10.350 --> 00:15:13.820
But I just want to illustrate
that you don't just have to

00:15:13.820 --> 00:15:14.760
use Google Spreadsheets.

00:15:14.760 --> 00:15:17.110
It could be a file that
has anything in there.

00:15:17.110 --> 00:15:19.490
Now, that says binary
up there.

00:15:19.490 --> 00:15:21.010
Obviously, it's not binary.

00:15:21.010 --> 00:15:23.440
Does anyone know what
file format that is?

00:15:23.440 --> 00:15:26.000
There's a clue.

00:15:26.000 --> 00:15:26.550
Anyone?

00:15:26.550 --> 00:15:27.760
AUDIENCE: MySQL.

00:15:27.760 --> 00:15:29.010
ALI AFSHAR: Well, no.

00:15:31.490 --> 00:15:32.550
Close.

00:15:32.550 --> 00:15:36.360
So this is a SQLite
3 database.

00:15:36.360 --> 00:15:37.600
Why have I mentioned this?

00:15:37.600 --> 00:15:41.420
Because actually, when you're
writing Android apps, that's

00:15:41.420 --> 00:15:42.170
what you do.

00:15:42.170 --> 00:15:43.330
Who's written an Android
app that

00:15:43.330 --> 00:15:45.150
collects data of any kind?

00:15:45.150 --> 00:15:46.950
OK, so it's pretty easy.

00:15:46.950 --> 00:15:48.810
And I wanted to design
the application as

00:15:48.810 --> 00:15:50.180
you normally would.

00:15:50.180 --> 00:15:54.540
So I create a data schema, it
has a single table, and I just

00:15:54.540 --> 00:15:55.570
collect data into that.

00:15:55.570 --> 00:15:56.940
That's my app.

00:15:56.940 --> 00:16:00.570
That's probably exactly how
Baby ESP works and all the

00:16:00.570 --> 00:16:03.770
other data collection
baby apps.

00:16:03.770 --> 00:16:06.650
The clever thing, the extra
thing that we do is we ensure

00:16:06.650 --> 00:16:10.190
that that data is regularly
synchronized with the Google

00:16:10.190 --> 00:16:11.530
Spreadsheet.

00:16:11.530 --> 00:16:12.840
You don't want to do
it immediately.

00:16:12.840 --> 00:16:14.370
You don't want to send it
straight up the wire.

00:16:14.370 --> 00:16:17.550
You want to queue this later for
when the user has access,

00:16:17.550 --> 00:16:19.800
when the system decides that
synchronization is

00:16:19.800 --> 00:16:20.550
what you want do.

00:16:20.550 --> 00:16:23.750
Android is clever how it does
this, how it decides this, so

00:16:23.750 --> 00:16:24.690
we let that.

00:16:24.690 --> 00:16:27.800
And it also gives you the
benefit of the user being able

00:16:27.800 --> 00:16:30.700
to select that check box that
says, do I want to synchronize

00:16:30.700 --> 00:16:31.650
this app or not?

00:16:31.650 --> 00:16:34.120
Do I want to synchronize
this account or not?

00:16:34.120 --> 00:16:37.270
So it's really useful to
use this architecture.

00:16:37.270 --> 00:16:39.580
So we write our app normally.

00:16:39.580 --> 00:16:43.440
We just have a single table in
our database, three columns,

00:16:43.440 --> 00:16:45.325
and that's that, and
the user input goes

00:16:45.325 --> 00:16:46.990
straight into there.

00:16:46.990 --> 00:16:51.200
So treat it like a local, how
you normally would with

00:16:51.200 --> 00:16:52.870
Android, and the rest
will follow.

00:16:56.160 --> 00:16:57.360
How do we do the export?

00:16:57.360 --> 00:16:59.310
Well now, I'm going to show you
some snippets of really

00:16:59.310 --> 00:17:00.560
easy, obvious code.

00:17:03.130 --> 00:17:04.500
We use CSV.

00:17:04.500 --> 00:17:07.050
I know that's a bit embarrassing
to use CSV for

00:17:07.050 --> 00:17:09.869
anything, but actually, it's
really, really useful.

00:17:09.869 --> 00:17:13.230
We have a single table and
we want a single sheet.

00:17:13.230 --> 00:17:14.950
It's pretty much just CSV.

00:17:14.950 --> 00:17:17.849
So how do we get the data out?

00:17:17.849 --> 00:17:21.910
We ask for an export link on the
Google spreadsheet and it

00:17:21.910 --> 00:17:24.440
gives us a URL by which
we can download CSV.

00:17:24.440 --> 00:17:27.940
So we get that, we
parse the CSV.

00:17:27.940 --> 00:17:31.330
You notice I didn't put any
commas or quotation marks or

00:17:31.330 --> 00:17:34.220
anything crazy in my notes
because that would break my

00:17:34.220 --> 00:17:37.400
parser, but that's all
we have for now, so

00:17:37.400 --> 00:17:39.440
export it like that.

00:17:39.440 --> 00:17:43.800
On the other side, you can give
CSV, you can put it into

00:17:43.800 --> 00:17:45.520
Google Drive and you
ask it to convert.

00:17:45.520 --> 00:17:48.370
So you say Convert, and Google
Drive is clever enough.

00:17:48.370 --> 00:17:53.300
If you're looking at this
snippet, the content variable,

00:17:53.300 --> 00:17:55.980
that is something that knows
about the actual content and

00:17:55.980 --> 00:17:56.690
the MIME type.

00:17:56.690 --> 00:17:57.740
So Google Drive is clever.

00:17:57.740 --> 00:18:01.340
It looks at the MIME type text
CSV and it says, well

00:18:01.340 --> 00:18:02.840
actually, I can convert
that into a

00:18:02.840 --> 00:18:04.510
spreadsheet, so it just does.

00:18:09.520 --> 00:18:12.220
So what have I done here
just with this data?

00:18:12.220 --> 00:18:14.950
I've made it portable
across devices.

00:18:14.950 --> 00:18:16.260
I showed you that.

00:18:16.260 --> 00:18:19.130
It's really two devices,
portable data.

00:18:19.130 --> 00:18:20.040
But it's not just that.

00:18:20.040 --> 00:18:22.390
It's also portable across
applications.

00:18:22.390 --> 00:18:24.690
What if this schema
was public?

00:18:24.690 --> 00:18:26.940
What if all baby data
applications

00:18:26.940 --> 00:18:29.250
used the same schema?

00:18:29.250 --> 00:18:30.530
Well then, I could
share my data in

00:18:30.530 --> 00:18:31.820
between each one of them.

00:18:31.820 --> 00:18:32.800
I know you're smiling.

00:18:32.800 --> 00:18:34.300
That's amazing, isn't it?

00:18:34.300 --> 00:18:35.270
Now you're talking.

00:18:35.270 --> 00:18:38.330
Now you're talking proper
sharing data, making the data

00:18:38.330 --> 00:18:41.390
useful, putting it in a
place that is useful.

00:18:41.390 --> 00:18:45.810
And finally, just wanted
to mention my wife.

00:18:45.810 --> 00:18:49.270
She wants to get involved in
this, so it would be nice if

00:18:49.270 --> 00:18:50.710
we can share the single
database.

00:18:50.710 --> 00:18:53.550
Sometimes I'm not at home,
sometimes she is, so the data

00:18:53.550 --> 00:18:56.140
is now portable across
users as well.

00:18:59.430 --> 00:19:02.000
Really, really important,
really useful.

00:19:02.000 --> 00:19:05.520
A file on my hard drive, I can't
give that to someone.

00:19:05.520 --> 00:19:07.440
I have to attach
it to an email.

00:19:07.440 --> 00:19:10.460
It's really bad.

00:19:10.460 --> 00:19:13.571
So now let's switch back
over to AppData.

00:19:13.571 --> 00:19:18.410
When you save data for your
user as AppData, it

00:19:18.410 --> 00:19:20.000
appears like this.

00:19:20.000 --> 00:19:22.880
You can see the top row is Baby
Times, the name of the

00:19:22.880 --> 00:19:24.680
application, and you can
see that I've got

00:19:24.680 --> 00:19:25.830
one kilobyte stored.

00:19:25.830 --> 00:19:27.100
It's actually less.

00:19:27.100 --> 00:19:28.120
How do we do it?

00:19:28.120 --> 00:19:31.680
It's a chunk of JSON
as key value pairs.

00:19:31.680 --> 00:19:34.540
They identically reflect the
shared preferences on the

00:19:34.540 --> 00:19:35.510
Android device.

00:19:35.510 --> 00:19:37.000
It's so simple.

00:19:37.000 --> 00:19:40.350
When something changes, we
generate the chunk of JSON, we

00:19:40.350 --> 00:19:41.600
push it to the file.

00:19:41.600 --> 00:19:43.615
Obviously, it's not
a whole K big.

00:19:43.615 --> 00:19:46.850
I think that's the lowest
thing it can say.

00:19:46.850 --> 00:19:47.630
What does this allow?

00:19:47.630 --> 00:19:50.240
Well, it allows the user to
manage this data, and I'm

00:19:50.240 --> 00:19:52.600
going to talk about a couple
of important points with

00:19:52.600 --> 00:19:55.270
AppData, and that's, what
can the user do?

00:19:55.270 --> 00:19:59.960
So I still strongly believe
the user owns this data.

00:19:59.960 --> 00:20:03.450
The user can decide what
they do with it--

00:20:03.450 --> 00:20:06.430
so delete it, essentially--

00:20:06.430 --> 00:20:08.570
and also see how much
quota it's got.

00:20:08.570 --> 00:20:13.110
What they can't do is view this
data and edit the data.

00:20:13.110 --> 00:20:16.620
So you might that's a bit evil,
but I don't think it is.

00:20:16.620 --> 00:20:17.770
I think it's really useful.

00:20:17.770 --> 00:20:20.810
It means the application can
put data in there and make

00:20:20.810 --> 00:20:23.680
some assurances that nothing
else, no other applications

00:20:23.680 --> 00:20:27.310
can get at the data, no user
can modify the data.

00:20:27.310 --> 00:20:29.680
So it's a way of being sure
that the data will have a

00:20:29.680 --> 00:20:32.700
certain format or a certain
structure, really useful.

00:20:32.700 --> 00:20:35.290
But of course, it uses
up your quota.

00:20:35.290 --> 00:20:38.010
So if someone is storing
hundreds of gigabytes in

00:20:38.010 --> 00:20:40.310
there, you might think, I'm
going to clear out that app

00:20:40.310 --> 00:20:42.770
because it doesn't need all
this data or I might get a

00:20:42.770 --> 00:20:43.690
different app.

00:20:43.690 --> 00:20:46.070
So those are the things
about AppData folder.

00:20:46.070 --> 00:20:49.270
Apart from that, it's just a
regular folder in Drive.

00:20:49.270 --> 00:20:51.910
So if anyone's used the Drive
SDK or the Drive API, you know

00:20:51.910 --> 00:21:00.980
that there are few operations
that take folder IDs, and in

00:21:00.980 --> 00:21:03.430
any situation, you can
use AppData there.

00:21:03.430 --> 00:21:06.240
Another really important feature
of this is that the

00:21:06.240 --> 00:21:10.680
AppData folder is tied
to a project.

00:21:10.680 --> 00:21:12.930
It's a bit of a terminology
issue and I'm sorry about

00:21:12.930 --> 00:21:17.700
this, but a project for Google
APIs is something that can

00:21:17.700 --> 00:21:20.880
underneath it create
multiple clients.

00:21:20.880 --> 00:21:25.140
They're OAuth 2 clients, but
these clients can all work as

00:21:25.140 --> 00:21:26.610
if they're the same app.

00:21:26.610 --> 00:21:27.880
Why is this useful?

00:21:27.880 --> 00:21:30.510
Because you create a different
client for your Android app as

00:21:30.510 --> 00:21:33.650
the one you create for your web
app or for your iOS app or

00:21:33.650 --> 00:21:34.980
for your installed app.

00:21:34.980 --> 00:21:37.750
They're all different clients
but they are part of the same

00:21:37.750 --> 00:21:43.380
project, which means your app
data can be accessed from an

00:21:43.380 --> 00:21:45.960
application running on one
platform as well as an

00:21:45.960 --> 00:21:48.550
application running on another
platform authorized in a

00:21:48.550 --> 00:21:49.760
different way.

00:21:49.760 --> 00:21:51.660
Very, very powerful.

00:21:51.660 --> 00:21:53.240
Again, cross-platform now.

00:21:53.240 --> 00:21:54.590
So we've shown you
cross-device.

00:21:54.590 --> 00:21:55.840
This is also cross-platform.

00:21:59.510 --> 00:22:02.540
Authorization is easy
now on Android.

00:22:02.540 --> 00:22:06.020
You parse a scope and you parse
a user account and it

00:22:06.020 --> 00:22:07.590
all takes care of it for you.

00:22:07.590 --> 00:22:09.330
That's Google Play Services.

00:22:09.330 --> 00:22:09.960
Fantastic.

00:22:09.960 --> 00:22:11.400
I'm really happy about that.

00:22:11.400 --> 00:22:16.370
The scope is a slight thing
I just want to talk about.

00:22:16.370 --> 00:22:19.950
When you ask for access to a
user's AppData, you have to

00:22:19.950 --> 00:22:21.220
give the special scope.

00:22:21.220 --> 00:22:21.970
Two reasons.

00:22:21.970 --> 00:22:25.830
The first one is perhaps you
might argue that you could

00:22:25.830 --> 00:22:28.780
give access to this with, for
example, the full Drive scope

00:22:28.780 --> 00:22:31.940
or other scopes that have access
to read all of Drive.

00:22:31.940 --> 00:22:36.180
Well, I disagree and because
people have granted permission

00:22:36.180 --> 00:22:36.840
for that already.

00:22:36.840 --> 00:22:40.400
If we were to add some ability,
add to the role,

00:22:40.400 --> 00:22:43.680
inflate the permissions of this,
then we could be in a

00:22:43.680 --> 00:22:46.510
problem because users will be
granting access to something

00:22:46.510 --> 00:22:50.300
they hadn't actually explicitly
granted access to.

00:22:50.300 --> 00:22:52.190
So that's the first problem.

00:22:52.190 --> 00:22:55.710
The second thing is, how great
is it that we have this fine

00:22:55.710 --> 00:22:56.830
tuned scope?

00:22:56.830 --> 00:22:59.320
Because your application when
they're asking for access

00:22:59.320 --> 00:23:03.720
says, I want access to be
able to write and read

00:23:03.720 --> 00:23:06.430
configuration data from
Google Drive.

00:23:06.430 --> 00:23:09.760
Nothing more, nothing less.

00:23:09.760 --> 00:23:10.470
Absolutely perfect.

00:23:10.470 --> 00:23:12.510
To the user's much more inclined
to click that button

00:23:12.510 --> 00:23:14.790
if they know that it's just a
very, very small scope of

00:23:14.790 --> 00:23:16.525
access that you're going
to give them.

00:23:20.890 --> 00:23:22.790
So I mentioned the
folder alias.

00:23:22.790 --> 00:23:24.960
It's just a regular folder in
Drive, and when you're doing

00:23:24.960 --> 00:23:29.170
any operation with files or
folders in Drive, if you can

00:23:29.170 --> 00:23:31.390
parse a folder ID, you
can just parse

00:23:31.390 --> 00:23:32.830
AppData instead of it.

00:23:32.830 --> 00:23:37.000
So this is for creating files,
for moving files from one

00:23:37.000 --> 00:23:40.740
folder to another folder, for
searching for files, for

00:23:40.740 --> 00:23:41.300
updating files.

00:23:41.300 --> 00:23:43.870
Almost any file operation
can take a folder.

00:23:43.870 --> 00:23:47.840
So we just parse AppData, and
for the developer, the rest is

00:23:47.840 --> 00:23:49.540
entirely transparent.

00:23:49.540 --> 00:23:53.130
Of course, this is a real folder
in Drive so it has a

00:23:53.130 --> 00:23:56.700
Real ID, and you can actually
use that Real ID if you want

00:23:56.700 --> 00:23:58.230
it to be a bit faster.

00:23:58.230 --> 00:24:01.840
That's just an optimization that
I would recommend you do.

00:24:01.840 --> 00:24:03.840
So a little bit of Java
code, but we'll

00:24:03.840 --> 00:24:05.240
just run through this.

00:24:05.240 --> 00:24:07.060
We get the shared preferences.

00:24:07.060 --> 00:24:09.120
If you've used Android, this
is very common for you.

00:24:12.140 --> 00:24:14.830
That actual call gets the shared
preferences for every

00:24:14.830 --> 00:24:19.590
activity running in your
application, and then we

00:24:19.590 --> 00:24:22.370
subscribe a listener to it.

00:24:22.370 --> 00:24:24.920
Really cool feature of the
shared preferences.

00:24:24.920 --> 00:24:29.300
This listener just logs
something, but actually, we

00:24:29.300 --> 00:24:33.530
respond to this notification by
creating the JSON and then

00:24:33.530 --> 00:24:34.640
uploading it.

00:24:34.640 --> 00:24:37.630
So we listen to those changes.

00:24:37.630 --> 00:24:40.040
I mentioned we use a
SyncerAdapter, and that is

00:24:40.040 --> 00:24:42.050
probably the best
way to do it.

00:24:42.050 --> 00:24:43.720
Come and have a chat to
[INAUDIBLE] afterwards because

00:24:43.720 --> 00:24:47.020
she wrestled with this a bit.

00:24:47.020 --> 00:24:49.220
So you create SyncerAdapter.

00:24:49.220 --> 00:24:51.440
That defines how you're going
to do the sync, when you're

00:24:51.440 --> 00:24:53.600
going to do the sync, that kind
of thing, and it just

00:24:53.600 --> 00:24:54.830
takes care of the whole
thing for you.

00:24:54.830 --> 00:24:58.030
I think that's really the best
way of doing that, and this is

00:24:58.030 --> 00:25:01.700
just an example of the
start of that.

00:25:01.700 --> 00:25:04.730
And then we find the correct
file in your AppData folder.

00:25:04.730 --> 00:25:07.905
Because this is a folder and
because slightly unhelpfully

00:25:07.905 --> 00:25:11.730
here, Google Drive allows you to
have multiple files of the

00:25:11.730 --> 00:25:16.590
same name in a folder, so this
implementation is a bit naive.

00:25:16.590 --> 00:25:18.080
It does a query.

00:25:18.080 --> 00:25:20.250
It looks inside AppData--

00:25:20.250 --> 00:25:22.370
if you see AppData
in Parents--

00:25:22.370 --> 00:25:25.070
it looks inside there for
the correctly named

00:25:25.070 --> 00:25:27.110
file and grabs it.

00:25:27.110 --> 00:25:29.200
Obviously, there could be more
than one file so this

00:25:29.200 --> 00:25:31.880
implementation just
uses the first.

00:25:31.880 --> 00:25:33.600
As I say, slightly naive
but you could

00:25:33.600 --> 00:25:34.900
easily improve on that.

00:25:34.900 --> 00:25:38.430
So we grab that file.

00:25:38.430 --> 00:25:40.920
When we want to upload
new content--

00:25:40.920 --> 00:25:42.350
I mentioned this earlier--

00:25:42.350 --> 00:25:44.955
we create something that
knows about the data

00:25:44.955 --> 00:25:46.360
and the MIME type.

00:25:46.360 --> 00:25:48.890
In this case, the MIME type
is Application JSON.

00:25:48.890 --> 00:25:51.920
We put it all together and
send it in a single API

00:25:51.920 --> 00:25:52.700
request to Drive.

00:25:52.700 --> 00:25:53.610
Done.

00:25:53.610 --> 00:25:56.860
One API request to
get the data.

00:25:56.860 --> 00:25:58.800
Here's this one.

00:25:58.800 --> 00:26:02.050
This just grabs the raw data,
just makes an authorized Get

00:26:02.050 --> 00:26:04.280
request, and gives it back.

00:26:04.280 --> 00:26:05.610
It's really easy.

00:26:05.610 --> 00:26:10.750
We've made three API calls
to the Drive API, and

00:26:10.750 --> 00:26:12.260
immediately, we have all
this functionality.

00:26:15.010 --> 00:26:18.030
We also run this little loop
that detects changes.

00:26:18.030 --> 00:26:20.890
So if it's changed locally,
we send the data

00:26:20.890 --> 00:26:21.760
to the remote source.

00:26:21.760 --> 00:26:24.420
It it's changed in the remote
place, we send the data down

00:26:24.420 --> 00:26:25.510
and just upload it.

00:26:25.510 --> 00:26:29.640
So this is almost the entire
code to implement this.

00:26:29.640 --> 00:26:31.750
Fortunately, [INAUDIBLE]

00:26:31.750 --> 00:26:35.670
has released it on GitHub,
so if you want to

00:26:35.670 --> 00:26:37.350
use it, grab it.

00:26:37.350 --> 00:26:38.130
It's very simple.

00:26:38.130 --> 00:26:43.430
You parse a shared preferences
instance to a singleton in the

00:26:43.430 --> 00:26:46.990
library and it just does it for
you, synchronizes all your

00:26:46.990 --> 00:26:47.780
shared preferences.

00:26:47.780 --> 00:26:49.300
I suggest you have a
look at the code.

00:26:49.300 --> 00:26:51.320
You could extend it, you could
throw it away, you could do

00:26:51.320 --> 00:26:52.390
whatever you like with it.

00:26:52.390 --> 00:26:55.052
But it's there and I suggest
everyone has a look at that.

00:26:59.390 --> 00:27:04.720
I hope throughout this talk,
I've somehow got across to you

00:27:04.720 --> 00:27:07.770
that it's not just about
baby monitors.

00:27:07.770 --> 00:27:08.150
I hope.

00:27:08.150 --> 00:27:10.400
I know I added this later
because I was thinking, hang

00:27:10.400 --> 00:27:12.800
on, do people just think I'm
talking about baby monitors?

00:27:12.800 --> 00:27:18.520
Anything, any file you have,
any data that you create, I

00:27:18.520 --> 00:27:21.790
think you should put that in a
place where the user wants it.

00:27:21.790 --> 00:27:23.230
You should put that
in Google Drive.

00:27:23.230 --> 00:27:25.960
You're taking notes, you're
making images, you're

00:27:25.960 --> 00:27:28.270
modifying images, you're
downloading videos, you're

00:27:28.270 --> 00:27:29.800
uploading videos.

00:27:29.800 --> 00:27:34.660
Anything that involves a file,
put that data somewhere where

00:27:34.660 --> 00:27:36.020
it's useful.

00:27:36.020 --> 00:27:37.810
Put the data where I want it.

00:27:37.810 --> 00:27:41.190
When I'm in the supermarket
looking, I wonder which food

00:27:41.190 --> 00:27:42.440
my child likes the most?

00:27:42.440 --> 00:27:43.450
I know, I'll check.

00:27:43.450 --> 00:27:46.010
Put that data where I want it.

00:27:46.010 --> 00:27:50.170
This is a plea from
me as a user.

00:27:50.170 --> 00:27:52.220
Please treat me as a user.

00:27:52.220 --> 00:27:53.870
Treat your users as users.

00:27:53.870 --> 00:27:56.140
Don't treat the individual
device as a user.

00:27:56.140 --> 00:28:00.410
You've got to stop planning
your applications to be

00:28:00.410 --> 00:28:03.810
resistant to changes in device,
changes in location.

00:28:03.810 --> 00:28:05.640
Your applications
really must do--

00:28:05.640 --> 00:28:09.220
I think not to do that now when
all the technology is

00:28:09.220 --> 00:28:11.990
available, I think it's a bug.

00:28:11.990 --> 00:28:14.860
I really do.

00:28:14.860 --> 00:28:17.290
And I think if you do that,
you will create your

00:28:17.290 --> 00:28:21.690
cross-platform, cross-device,
seamless experiences, and I

00:28:21.690 --> 00:28:24.080
think Google Drive is
a way to do that.

00:28:24.080 --> 00:28:27.990
So my challenge to you guys,
please, go ahead.

00:28:27.990 --> 00:28:28.490
Do these.

00:28:28.490 --> 00:28:30.220
Make these seamless
applications.

00:28:30.220 --> 00:28:32.210
Everyone will thank you.

00:28:32.210 --> 00:28:33.286
Thanks very much.

00:28:33.286 --> 00:28:42.340
[APPLAUSE]

00:28:42.340 --> 00:28:43.350
ALI AFSHAR: Questions?

00:28:43.350 --> 00:28:45.640
Oh I should say, before the
questions, I'll be available

00:28:45.640 --> 00:28:49.870
on the Chrome and Apps Sandbox
on Level Three if you want a

00:28:49.870 --> 00:28:52.340
longer question or you don't
feel like getting up in front

00:28:52.340 --> 00:28:55.780
of this crowd and talking.

00:28:55.780 --> 00:28:57.270
AUDIENCE: OK, question.

00:28:57.270 --> 00:29:00.730
How does the shared data get
deleted from Google Drive if

00:29:00.730 --> 00:29:02.840
somebody uninstalls the app?

00:29:02.840 --> 00:29:05.150
Does that data just live
there forever?

00:29:05.150 --> 00:29:07.710
ALI AFSHAR: So when you
uninstall an app, we have a

00:29:07.710 --> 00:29:08.850
nice flow there.

00:29:08.850 --> 00:29:12.640
The user is prompted to say,
this app still has some hidden

00:29:12.640 --> 00:29:13.520
application data.

00:29:13.520 --> 00:29:16.380
Would you like to delete
it or not?

00:29:16.380 --> 00:29:18.250
So we cover that case.

00:29:18.250 --> 00:29:20.810
You might consider an instance
where you say, I don't want

00:29:20.810 --> 00:29:23.610
this app installed but I want
to keep the data around in

00:29:23.610 --> 00:29:27.960
case one day I do install it
again, so that's a case, but

00:29:27.960 --> 00:29:28.710
we cover that.

00:29:28.710 --> 00:29:31.950
But the user is prompted, delete
this data if you're

00:29:31.950 --> 00:29:34.230
going to uninstall the app.

00:29:34.230 --> 00:29:35.580
AUDIENCE: OK, thanks.

00:29:35.580 --> 00:29:38.000
ALI AFSHAR: Thanks.

00:29:38.000 --> 00:29:41.050
AUDIENCE: This isn't a question,
it's just a tip.

00:29:41.050 --> 00:29:44.440
For a really good example of
an app developed by one guy

00:29:44.440 --> 00:29:48.950
who does this, Sleep As Android
is a sleep data

00:29:48.950 --> 00:29:53.120
collection tool with a plug-in
called Stats As Android which

00:29:53.120 --> 00:29:56.390
gives you the charts inside the
app but uses Spreadsheets

00:29:56.390 --> 00:29:57.520
for the raw data.

00:29:57.520 --> 00:29:59.120
ALI AFSHAR: OK, uses Google
Spreadsheets or--

00:29:59.120 --> 00:29:59.910
AUDIENCE: Yeah, uses Google
Spreadsheets.

00:29:59.910 --> 00:30:00.760
ALI AFSHAR: Wow, OK.

00:30:00.760 --> 00:30:02.770
AUDIENCE: So if anybody wants
to see an example, that's an

00:30:02.770 --> 00:30:03.840
app that might be worth--

00:30:03.840 --> 00:30:05.800
ALI AFSHAR: So I wish you'd
have told me this before

00:30:05.800 --> 00:30:07.483
because that would have saved
me writing an app.

00:30:10.381 --> 00:30:13.530
But thank you, Sleep
As Android.

00:30:13.530 --> 00:30:14.340
AUDIENCE: Hi.

00:30:14.340 --> 00:30:17.960
In terms of compliance and
thinking about Google Apps

00:30:17.960 --> 00:30:23.390
Enterprise, could it be possible
for me to have the

00:30:23.390 --> 00:30:27.310
control over that configuration
file to make

00:30:27.310 --> 00:30:33.300
revision and inspecting that
file for compliance purposes?

00:30:33.300 --> 00:30:34.140
ALI AFSHAR: Yeah, so you're
talking about the

00:30:34.140 --> 00:30:35.790
configuration file in AppData?

00:30:35.790 --> 00:30:36.790
AUDIENCE: Yeah, because--

00:30:36.790 --> 00:30:37.320
ALI AFSHAR: Yeah.

00:30:37.320 --> 00:30:38.370
Sorry, go on.

00:30:38.370 --> 00:30:40.120
AUDIENCE: Because I saw that
you can't actually view or

00:30:40.120 --> 00:30:42.610
delete the contents for
the file, but--

00:30:42.610 --> 00:30:46.460
ALI AFSHAR: So the user can't
but the developer can.

00:30:46.460 --> 00:30:47.730
So the application can.

00:30:47.730 --> 00:30:49.860
And it's a regular file
in Drive, so it has

00:30:49.860 --> 00:30:51.090
all the other features.

00:30:51.090 --> 00:30:52.180
You can't share it.

00:30:52.180 --> 00:30:53.360
That's one feature
it doesn't have.

00:30:53.360 --> 00:30:55.480
But you can look at revision
history and

00:30:55.480 --> 00:30:55.880
other things like that.

00:30:55.880 --> 00:30:59.180
So actually, this is a nice
version file in your Drive.

00:30:59.180 --> 00:31:03.380
It's useful and definitely
covers that case.

00:31:03.380 --> 00:31:07.020
AUDIENCE: What happens if two
users modify at the same time?

00:31:07.020 --> 00:31:09.230
How do you handle the
conflicts on Drive?

00:31:09.230 --> 00:31:11.606
ALI AFSHAR: So you don't and
the world just explodes.

00:31:15.420 --> 00:31:18.660
So in this use case-- and I
specifically avoided this.

00:31:18.660 --> 00:31:19.720
So two things.

00:31:19.720 --> 00:31:21.900
One, we don't really cover it.

00:31:21.900 --> 00:31:26.040
The last change wins in this
case, and that's not exactly

00:31:26.040 --> 00:31:27.050
good for this.

00:31:27.050 --> 00:31:30.180
But if you look at the use case,
I'm not really going to

00:31:30.180 --> 00:31:33.390
go around with two devices, one
device in one hand and one

00:31:33.390 --> 00:31:35.500
device in another hand and
start changing the

00:31:35.500 --> 00:31:36.640
configuration.

00:31:36.640 --> 00:31:38.410
It might happen that we're
collecting data.

00:31:38.410 --> 00:31:40.020
So I don't think that
particularly

00:31:40.020 --> 00:31:40.870
fits the use case.

00:31:40.870 --> 00:31:44.190
But what we do have is this
awesome product called the

00:31:44.190 --> 00:31:45.610
Real Time API.

00:31:45.610 --> 00:31:48.460
Anyone heard of this or seen
the Real Time API?

00:31:48.460 --> 00:31:51.620
So this is specifically designed
for that use case.

00:31:51.620 --> 00:31:52.760
I suggest you go and
read about it.

00:31:52.760 --> 00:31:56.420
It provides all the conflict
resolution, all the updating,

00:31:56.420 --> 00:31:57.240
everything there.

00:31:57.240 --> 00:31:59.750
And we have a session
about that--

00:31:59.750 --> 00:32:00.670
AUDIENCE: Tomorrow!

00:32:00.670 --> 00:32:01.420
ALI AFSHAR: Tomorrow.

00:32:01.420 --> 00:32:02.080
So we have a session.

00:32:02.080 --> 00:32:03.210
So please come along.

00:32:03.210 --> 00:32:06.210
Two of the hardcore engineers
are going to tell you how it

00:32:06.210 --> 00:32:07.620
works, so that's exciting.

00:32:07.620 --> 00:32:07.870
AUDIENCE: Thank you.

00:32:07.870 --> 00:32:10.855
ALI AFSHAR: Thank you.

00:32:10.855 --> 00:32:11.290
AUDIENCE: Hi.

00:32:11.290 --> 00:32:15.300
I want to ask a question.

00:32:15.300 --> 00:32:18.400
What can you do for the
interconnection of Google

00:32:18.400 --> 00:32:25.670
Drive and Microsoft
Office 365?

00:32:25.670 --> 00:32:28.120
What's [INAUDIBLE]?

00:32:28.120 --> 00:32:31.580
ALI AFSHAR: So we had this chat
earlier today, but I'll

00:32:31.580 --> 00:32:32.690
just go over what we said.

00:32:32.690 --> 00:32:36.360
So this gentleman is very
interested in writing some

00:32:36.360 --> 00:32:39.400
kind of an interconnection
software between Google Drive

00:32:39.400 --> 00:32:41.305
and Office 365.

00:32:41.305 --> 00:32:42.910
Is that right?

00:32:42.910 --> 00:32:49.460
AUDIENCE: API can just transfer
documents in one

00:32:49.460 --> 00:32:52.570
direction, cannot--

00:32:52.570 --> 00:32:56.560
ALI AFSHAR: So the Google Drive
API allows you to import

00:32:56.560 --> 00:32:57.980
and export data.

00:32:57.980 --> 00:33:00.410
So it's a two-way
data transfer.

00:33:00.410 --> 00:33:03.460
And the formats that we use,
we have some proprietary

00:33:03.460 --> 00:33:05.400
formats that belong
to Microsoft--

00:33:05.400 --> 00:33:07.330
for example, DocX and
this kind of thing--

00:33:07.330 --> 00:33:08.680
which I think would
be perfect for

00:33:08.680 --> 00:33:11.620
interfacing with Office 365.

00:33:11.620 --> 00:33:12.710
But there are other formats.

00:33:12.710 --> 00:33:14.240
I showed you CSV.

00:33:14.240 --> 00:33:17.130
There's HTML, of course, import
and export from there,

00:33:17.130 --> 00:33:21.370
PDF, various formats, all
the Open Office formats.

00:33:21.370 --> 00:33:23.300
So I think you can write
that connector.

00:33:23.300 --> 00:33:26.200
I don't think you're going
to have a problem there.

00:33:26.200 --> 00:33:27.410
AUDIENCE: [INAUDIBLE]

00:33:27.410 --> 00:33:31.030
to an IETF [INAUDIBLE]

00:33:31.030 --> 00:33:33.336
and about today's topic.

00:33:33.336 --> 00:33:36.310
Please pay more attention to--

00:33:36.310 --> 00:33:37.130
ALI AFSHAR: Sure, sure.

00:33:37.130 --> 00:33:39.100
So you've got my
email address.

00:33:39.100 --> 00:33:40.400
We'll keep talking about this.

00:33:40.400 --> 00:33:41.080
Don't worry.

00:33:41.080 --> 00:33:41.940
AUDIENCE: Thank you.

00:33:41.940 --> 00:33:43.600
ALI AFSHAR: Thank you.

00:33:43.600 --> 00:33:46.190
Any other questions?

00:33:46.190 --> 00:33:46.710
Brilliant.

00:33:46.710 --> 00:33:47.360
Thank you for coming.

00:33:47.360 --> 00:33:48.750
Come and chat to me later.

00:33:48.750 --> 00:33:49.390
Oh, you've got a question.

00:33:49.390 --> 00:33:50.340
Sorry.

00:33:50.340 --> 00:33:51.170
Hold the applause.

00:33:51.170 --> 00:33:51.990
AUDIENCE: Sorry.

00:33:51.990 --> 00:33:53.690
So actually, there are
two questions.

00:33:53.690 --> 00:33:58.070
One is, are you planning some
support in terms of patterns

00:33:58.070 --> 00:34:03.980
or APIs for third party, like
iOS or Microsoft Stack apps,

00:34:03.980 --> 00:34:05.140
to use Google Drive?

00:34:05.140 --> 00:34:09.549
Second question is, if I write
an app and I want to give the

00:34:09.549 --> 00:34:12.580
user both the privacy of they're
on Google Drive, but

00:34:12.580 --> 00:34:16.330
still I would want to cover the
quota of them, you know

00:34:16.330 --> 00:34:20.530
what I mean, so I don't run into
trouble when they hit the

00:34:20.530 --> 00:34:22.370
five gigabyte limit?

00:34:22.370 --> 00:34:23.110
ALI AFSHAR: Right.

00:34:23.110 --> 00:34:24.070
AUDIENCE: Is there
anything you're

00:34:24.070 --> 00:34:24.940
thinking about about that?

00:34:24.940 --> 00:34:26.690
ALI AFSHAR: So let's start with
the first question first.

00:34:29.929 --> 00:34:31.969
Essentially, yes.

00:34:31.969 --> 00:34:35.780
We want to make the experience
as easy as possible.

00:34:35.780 --> 00:34:39.070
We launched the Drive API
actually a year ago, so still

00:34:39.070 --> 00:34:40.820
at the moment, it's
pretty raw state.

00:34:40.820 --> 00:34:43.139
We're still trying to work
out the use cases.

00:34:43.139 --> 00:34:46.300
And of course, in an ideal
world-- and I can't really

00:34:46.300 --> 00:34:50.460
comment on our future plans--
but in an ideal world if

00:34:50.460 --> 00:34:53.219
priorities were logically
designed, yes.

00:34:53.219 --> 00:34:56.540
We would have libraries that
make it crazy easy, as my

00:34:56.540 --> 00:35:00.140
colleague Stephen says, crazy
easy to do this stuff.

00:35:00.140 --> 00:35:01.930
Just a single call,
nothing else.

00:35:01.930 --> 00:35:03.750
So it's definitely
in our plans.

00:35:03.750 --> 00:35:06.360
We want that to be as
simple as possible.

00:35:06.360 --> 00:35:07.490
Second question.

00:35:07.490 --> 00:35:10.950
AUDIENCE: It was about the
quota and the app.

00:35:10.950 --> 00:35:14.760
Who owns the quota and if the
app owner can take over that.

00:35:14.760 --> 00:35:17.430
ALI AFSHAR: So I'm quite
strongly of the belief that

00:35:17.430 --> 00:35:19.330
this is the user's
data and the user

00:35:19.330 --> 00:35:21.160
should pay for the quota.

00:35:21.160 --> 00:35:24.560
Actually, the smart people in
the audience will notice that

00:35:24.560 --> 00:35:28.170
this application didn't cost
the user any quota because

00:35:28.170 --> 00:35:31.300
it's using Google Spreadsheets
as a back end, which can be as

00:35:31.300 --> 00:35:33.680
big as you like and they don't
take up any quota.

00:35:33.680 --> 00:35:37.450
So I'm not suggesting that you
go out and do that, but this

00:35:37.450 --> 00:35:38.850
app doesn't use any of
the user's quota.

00:35:38.850 --> 00:35:41.700
It uses one kilobyte, and
you know that's nothing.

00:35:41.700 --> 00:35:42.260
AUDIENCE: Thank you.

00:35:42.260 --> 00:35:44.600
ALI AFSHAR: Thank you.

00:35:44.600 --> 00:35:45.850
Thank you, everyone.

