WEBVTT
Kind: captions
Language: en

00:00:00.140 --> 00:00:02.870
Databases must store sensitive data,

00:00:02.870 --> 00:00:07.280
and there must be something different
about securing data that is stored in

00:00:07.280 --> 00:00:10.700
a database compared to what
we've been talking about before.

00:00:10.700 --> 00:00:14.850
So what we discussed before is
data stored in files, for example.

00:00:14.850 --> 00:00:19.190
When we did access control we said you
have read/write permissions on files.

00:00:19.190 --> 00:00:22.090
Databases we're going to
discuss are somewhat different.

00:00:22.090 --> 00:00:27.840
They also store data, but
it's different and the fact that they

00:00:27.840 --> 00:00:33.200
store lots of data that is sensitive,
that's what makes this topic important.

00:00:33.200 --> 00:00:37.680
So databases actually do store
massive amounts of sensitive data.

00:00:37.680 --> 00:00:41.530
This could be, if you are a company,
could be your customer data.

00:00:41.530 --> 00:00:46.630
In fact, when we talk about some company
getting hacked and large amounts

00:00:46.630 --> 00:00:51.510
of their customer data, such as social
security number, or date of birth, or

00:00:51.510 --> 00:00:56.640
address, credit card numbers,
when those are being stolen by hackers,

00:00:56.640 --> 00:01:02.640
databases store data that we can see
needs to be accessed in a certain way.

00:01:02.640 --> 00:01:08.310
And the reason we're able to
do that is because databases

00:01:08.310 --> 00:01:12.260
can store what is called
data in a structured form.

00:01:12.260 --> 00:01:16.510
And the kind of examples that I just
talked about, the data that we have

00:01:16.510 --> 00:01:21.770
about customer records or health
records, that data does have structure,

00:01:21.770 --> 00:01:26.500
and the structure actually influences
how it's going to get accessed.

00:01:26.500 --> 00:01:31.310
So, I may ask, for example, information
about all customers who purchased some

00:01:31.310 --> 00:01:33.630
number of things in the last two months.

00:01:33.630 --> 00:01:37.430
Asking this kind of a query or
formulating this king of a query or

00:01:37.430 --> 00:01:40.770
a question That we want to
run against the database,

00:01:40.770 --> 00:01:44.350
we make use of the structure that
is there in this data to do that.

00:01:44.350 --> 00:01:50.020
So, it really do is that think about
a database storing structure data and

00:01:50.020 --> 00:01:53.040
then we can basically access it through

00:01:53.040 --> 00:01:55.740
programs called queries
that we submit to it.

00:01:55.740 --> 00:02:00.100
These programs are queries written
in a language that is designed for

00:02:00.100 --> 00:02:02.120
accessing data stored in databases.

00:02:02.120 --> 00:02:06.600
One common one is SQL, which stands for
Structured Query Language.

00:02:06.600 --> 00:02:10.660
So we're going to talk about accessing
data from databases using SQL

00:02:10.660 --> 00:02:11.400
quite a bit.

00:02:11.400 --> 00:02:15.170
This is another thing that is
different about databases.

00:02:15.170 --> 00:02:20.120
Databases also store data that
is persistent, like files.

00:02:20.120 --> 00:02:23.210
And of course we need
integrity of the data.

00:02:23.210 --> 00:02:26.110
One way to do that is we
have this transactional

00:02:26.110 --> 00:02:29.970
nature of queries of programs
that we run on the database.

00:02:29.970 --> 00:02:33.140
A transaction means either
the program runs completely,

00:02:33.140 --> 00:02:37.830
does everything it's supposed to do,
or whatever it did gets undone.

00:02:37.830 --> 00:02:41.250
Transaction either,
we have the zero or one property,

00:02:41.250 --> 00:02:44.290
either it's done completely or
not done at all kind of a thing.

00:02:44.290 --> 00:02:47.835
By running a partial transaction,
for example,

00:02:47.835 --> 00:02:52.050
a query could leave the database in
a state where it is not consistent and

00:02:52.050 --> 00:02:53.650
that impacts the integrity.

00:02:53.650 --> 00:02:57.700
Finally database is another thing that's
kind of different about them is that

00:02:57.700 --> 00:03:02.460
we can create a virtual database,
what is called a database view.

00:03:02.460 --> 00:03:05.860
This is really derived data
that's there in the database.

00:03:05.860 --> 00:03:09.800
So for example, you may want to choose a
subset of the information that's stored

00:03:09.800 --> 00:03:10.640
in the database.

00:03:10.640 --> 00:03:13.570
So you can run a query against
the database, and the result

00:03:13.570 --> 00:03:17.750
could be another sort of virtual
database, also called a database view.

00:03:17.750 --> 00:03:20.540
And then users can have
access to that view.

