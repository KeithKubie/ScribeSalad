WEBVTT
Kind: captions
Language: en

00:00:00.310 --> 00:00:03.130
Let's see how we can use
underscore's templating capabilities

00:00:03.130 --> 00:00:05.250
to add custom data to our app.

00:00:05.250 --> 00:00:07.073
We will be going through
a lot of detail here, and

00:00:07.073 --> 00:00:09.474
I highly suggest that you follow
along with your dev tools open,

00:00:09.474 --> 00:00:12.230
navigating through
the source code yourself.

00:00:12.230 --> 00:00:15.650
Digging into a framework source code
is the best way to really see how it

00:00:15.650 --> 00:00:17.400
works under the hood.

00:00:17.400 --> 00:00:20.105
As we're going through this,
don't get bogged down with all the code.

00:00:20.105 --> 00:00:24.550
Focus on how the template gets
converted from HTML to a function.

00:00:24.550 --> 00:00:26.110
That's right, a function.

00:00:26.110 --> 00:00:28.690
A function that waits to
get called with data.

00:00:28.690 --> 00:00:31.530
Here's the app we'll be using as
we work through this material.

00:00:31.530 --> 00:00:34.160
And this is the HTML file for the app.

00:00:34.160 --> 00:00:37.190
Let's look at how these
rows end up like this

00:00:37.190 --> 00:00:40.450
when the template starts out like this.

00:00:40.450 --> 00:00:44.140
There are a couple of things we need
to pay attention to with the template.

00:00:44.140 --> 00:00:46.880
First is the ID here.

00:00:46.880 --> 00:00:50.710
It will be used to select
the script tag, and its contents.

00:00:50.710 --> 00:00:55.400
The second thing are these
characters here, and here.

00:00:55.400 --> 00:00:57.140
These are called delimiters.

00:00:57.140 --> 00:00:59.910
A delimiter is just a fancy name for
a sequence of one or

00:00:59.910 --> 00:01:02.110
more characters used to form a boundary.

00:01:02.110 --> 00:01:05.209
We need these delimiters
to separate the HTML

00:01:05.209 --> 00:01:08.250
from what will become
JavaScript variables.

00:01:08.250 --> 00:01:12.160
These delimiters are broken into
starting delimiters here, and

00:01:12.160 --> 00:01:14.250
ending ones here.

00:01:14.250 --> 00:01:17.590
The specific sequence of characters
is the default for underscore.

00:01:18.880 --> 00:01:23.420
If I open underscore.js in a new pain,
we can see them here.

00:01:23.420 --> 00:01:26.270
See how interpolate
has the angle bracket.

00:01:26.270 --> 00:01:27.190
Percent sign.

00:01:27.190 --> 00:01:28.150
And equal sign.

00:01:28.150 --> 00:01:30.290
And the closing delimiters here.

00:01:30.290 --> 00:01:33.490
This middle section captures
anything between the starting and

00:01:33.490 --> 00:01:34.498
ending delimiters.

00:01:34.498 --> 00:01:40.210
Evaluate, interpretulate, and escape
all have different starting delimiters.

00:01:40.210 --> 00:01:43.470
We'll see why this is important and
how these will be used later.

00:01:43.470 --> 00:01:48.030
So we have this template and it's
filled with these special delimiters.

00:01:48.030 --> 00:01:50.260
But how does it get converted
to what's seen in the browser?

00:01:51.260 --> 00:01:56.355
In app JS on this line,
the template is fetched from the DOM and

00:01:56.355 --> 00:01:58.800
this HTML content is
returned as a string.

00:01:58.800 --> 00:02:02.500
This string version of the template
is then passed into underscores

00:02:02.500 --> 00:02:03.770
template function.

00:02:03.770 --> 00:02:06.810
This template function is
where all the magic happens.

00:02:06.810 --> 00:02:10.280
Let's take a sneak peek at what the
template function does by copying this

00:02:10.280 --> 00:02:12.980
code and pasting it into the console.

00:02:12.980 --> 00:02:15.220
We can look at the result
of the template function,

00:02:15.220 --> 00:02:17.390
by checking the source property.

00:02:17.390 --> 00:02:20.210
The template function
returns the function itself.

00:02:20.210 --> 00:02:22.330
Functions are extremely powerful, and

00:02:22.330 --> 00:02:26.300
the template function makes use of
a JavaScript constructor function.

00:02:26.300 --> 00:02:28.490
Let's look at how
a constructor function works.

