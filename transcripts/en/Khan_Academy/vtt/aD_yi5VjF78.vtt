WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.815
- [Voiceover] Seven, six,
five, four, three, two, one.

00:00:02.815 --> 00:00:05.746
(funky music)

00:00:08.457 --> 00:00:10.906
- Hi, my name is Lynn Root.
I am the Software Engineer

00:00:10.906 --> 00:00:13.785
here at Spotify, and I will
be the first to admit that I

00:00:13.785 --> 00:00:17.467
often take for granted the
reliability of the Internet.

00:00:17.467 --> 00:00:19.374
The sheer amount of
information zooming around the

00:00:19.374 --> 00:00:22.717
Internet is astonishing. But
how's it possible for every

00:00:22.717 --> 00:00:26.253
piece of data to be
delivered to you reliably?

00:00:26.253 --> 00:00:28.554
Say you want to play a song from Spotify.

00:00:28.554 --> 00:00:30.493
It seems like your computer
connects directly to

00:00:30.493 --> 00:00:33.326
Spotify's servers, and
Spotify sends you a song

00:00:33.326 --> 00:00:35.892
on a direct, dedicated line.
But actually, that's not

00:00:35.892 --> 00:00:37.471
how the Internet works.

00:00:38.891 --> 00:00:41.750
If the Internet were made of
direct, dedicated connections,

00:00:41.750 --> 00:00:43.631
it would be impossible
to keep things working as

00:00:43.631 --> 00:00:46.289
millions of users join,
especially since there is no

00:00:46.289 --> 00:00:48.297
guarantee that every wire and computer is

00:00:48.297 --> 00:00:49.957
working all the time.

00:00:49.957 --> 00:00:53.034
Instead, data travels on
the Internet in a much less

00:00:53.034 --> 00:00:55.139
direct fashion.

00:00:55.139 --> 00:00:58.840
- Many, many years ago,
in the early 1970s,

00:00:58.840 --> 00:01:01.642
my partner, Bob Kahn,
and I began working on

00:01:01.642 --> 00:01:04.425
the design of what we
now call the Internet.

00:01:04.425 --> 00:01:08.058
Bob and I had the responsibility
and the opportunity

00:01:08.058 --> 00:01:12.751
to design the Internet's
protocols and its architecture.

00:01:12.751 --> 00:01:16.764
So, we persisted in participating
in the Internet's growth

00:01:16.764 --> 00:01:18.878
and evolution for all of this time,

00:01:18.878 --> 00:01:20.840
up to, and including, the present.

00:01:21.890 --> 00:01:24.733
The way information gets
transferred from one computer

00:01:24.733 --> 00:01:27.058
to another is pretty interesting.

00:01:27.058 --> 00:01:29.111
It need not follow a fixed path.

00:01:29.111 --> 00:01:31.662
In fact, your path may
change in the midst of a

00:01:31.662 --> 00:01:34.142
computer-to-computer conversation.

00:01:34.142 --> 00:01:36.412
Information on the Internet
goes from one computer

00:01:36.412 --> 00:01:40.484
to another in what we call
a packet of information,

00:01:40.484 --> 00:01:42.834
and a packet travels from
one place to another on

00:01:42.834 --> 00:01:45.677
the Internet a lot like how
you might get from one place

00:01:45.677 --> 00:01:49.196
to another in a car, depending
on traffic congestion or

00:01:49.196 --> 00:01:52.354
road conditions, you might
choose or be forced to take

00:01:52.354 --> 00:01:55.291
a different route to get
to the same place each time

00:01:55.291 --> 00:01:56.666
you travel.

00:01:58.448 --> 00:02:00.608
And just as you can
transport all sorts of stuff

00:02:00.608 --> 00:02:03.928
inside a car, many kinds of
digital information can be

00:02:03.928 --> 00:02:07.391
sent with IP packets, but
there are some limits.

00:02:08.127 --> 00:02:11.041
What if, for example, you
need to move a space shuttle

00:02:11.041 --> 00:02:13.602
from where it was built to
where it will be launched?

00:02:13.602 --> 00:02:16.019
A shuttle won't fit in one
truck, so it needs to be broken

00:02:16.019 --> 00:02:19.618
down into pieces, transported
using a fleet of trucks.

00:02:19.618 --> 00:02:21.904
They could all take different
routes, and might get to

00:02:21.904 --> 00:02:24.644
the destination at different
times, but once all the pieces

00:02:24.644 --> 00:02:27.536
are there, you can reassemble
the pieces into the

00:02:27.536 --> 00:02:30.792
complete shuttle, and
it'll be ready for launch.

00:02:31.297 --> 00:02:34.103
On the Internet, the
details work similarly.

00:02:34.103 --> 00:02:36.338
If you have a very large
image that you want to send

00:02:36.338 --> 00:02:40.518
to a friend or upload to a
website, that image might

00:02:40.518 --> 00:02:43.594
be made up of tens of billions
of bits of ones and zeroes,

00:02:43.594 --> 00:02:46.259
too many to send along in one packet.

00:02:46.259 --> 00:02:48.510
Since it's data on a
computer, the computer sending

00:02:48.510 --> 00:02:50.913
the image can quickly break
it into hundreds or even

00:02:50.913 --> 00:02:55.002
thousands of smaller parts called packets.

00:02:55.002 --> 00:02:57.603
Unlike cars or trucks, these
packets don't have drivers,

00:02:57.603 --> 00:03:00.250
and they don't choose their
route. Each packet has

00:03:00.250 --> 00:03:02.490
the internet address of
where it came from and where

00:03:02.490 --> 00:03:05.242
it's going. Special
computers on the Internet,

00:03:05.242 --> 00:03:07.912
called routers, act like
traffic managers to keep the

00:03:07.912 --> 00:03:11.371
packets moving through
the networks smoothly.

00:03:11.371 --> 00:03:14.147
If one route is congested,
individual packets may

00:03:14.147 --> 00:03:16.085
travel different routes
through the Internet,

00:03:16.085 --> 00:03:18.941
and they may arrive at the
destination at slightly

00:03:18.941 --> 00:03:22.175
different times, or even out of order.

00:03:22.819 --> 00:03:24.617
- So, let's talk about how this works.

00:03:24.617 --> 00:03:26.621
As part of the Internet
Protocol, every router

00:03:26.621 --> 00:03:29.802
keeps track of multiple
paths for sending packets,

00:03:29.802 --> 00:03:32.192
and it chooses the
cheapest available path for

00:03:32.192 --> 00:03:34.153
each piece of data, based on destination

00:03:34.153 --> 00:03:36.474
IP address for the packet.

00:03:36.474 --> 00:03:38.773
"Cheapest," in this
case, doesn't mean cost,

00:03:38.773 --> 00:03:41.756
but time and non-technical
factors such as politics

00:03:41.756 --> 00:03:44.329
and relationships between companies.

00:03:44.329 --> 00:03:47.053
Often the best route for data
to travel isn't necessarily

00:03:47.053 --> 00:03:50.815
the most direct. Having
options for paths makes the

00:03:50.815 --> 00:03:53.520
network fault tolerant,
which means the network can

00:03:53.520 --> 00:03:55.980
keep sending packets, even
if something goes horribly,

00:03:55.980 --> 00:03:59.394
horribly wrong. This is the
basis for a key principle of

00:03:59.394 --> 00:04:01.536
the Internet, reliability.

00:04:03.747 --> 00:04:05.819
Now, what if you want to request some data

00:04:05.819 --> 00:04:07.665
and not everything is delivered?

00:04:07.665 --> 00:04:09.418
Say you want to listen to a song.

00:04:09.418 --> 00:04:12.043
How can you bee 100%
sure all the data will be

00:04:12.043 --> 00:04:14.817
delivered so the song plays perfectly?

00:04:14.817 --> 00:04:16.965
Introducing your new best friend, TCP,

00:04:16.965 --> 00:04:19.782
Transmission Control Protocol.

00:04:19.782 --> 00:04:22.626
TCP manages the sending and
receiving of all your data

00:04:22.626 --> 00:04:26.526
as packets. Think of it like
a guaranteed mail service.

00:04:26.526 --> 00:04:28.501
When you request a song on your device,

00:04:28.501 --> 00:04:32.717
Spotify sends the song
broken up into many packets.

00:04:32.717 --> 00:04:35.334
When your packets arrive,
TCP does a full inventory

00:04:35.334 --> 00:04:39.685
and sends back acknowledgements
of each packet received.

00:04:39.685 --> 00:04:42.378
If all packets are there,
TCP signs for your delivery,

00:04:42.378 --> 00:04:43.193
and you're done.

00:04:43.193 --> 00:04:46.005
(upbeat music)

00:04:50.214 --> 00:04:52.639
If TCP finds some packets are missing,

00:04:52.639 --> 00:04:55.960
it won't sign. Otherwise, your
song wouldn't sound as good,

00:04:55.960 --> 00:04:58.793
or portions of the song could be missing.

00:04:58.793 --> 00:05:00.859
For each missing or incomplete packet,

00:05:00.859 --> 00:05:04.574
Spotify will resend them.
Once TCP verifies the delivery

00:05:04.574 --> 00:05:07.257
of many packets for that one song request,

00:05:07.257 --> 00:05:08.730
your song will start to play.

00:05:08.730 --> 00:05:10.942
(upbeat music)

00:05:11.807 --> 00:05:14.199
What's great about the
TCP and router systems is

00:05:14.199 --> 00:05:16.822
they're scalable. They can
work with eight devices or

00:05:16.822 --> 00:05:19.841
8,000,000,000 devices. In fact,
because of these principles

00:05:19.841 --> 00:05:22.861
of fault tolerance and redundancy,
the more routers we add,

00:05:22.861 --> 00:05:25.626
the more reliable the Internet becomes.

00:05:25.626 --> 00:05:27.300
What's also great is we
can grow and scale the

00:05:27.300 --> 00:05:30.731
Internet without interrupting
service for anybody using it.

00:05:31.643 --> 00:05:33.819
- The Internet is made of
hundreds of thousands of

00:05:33.819 --> 00:05:36.954
networks and billions
of computers and devices

00:05:36.954 --> 00:05:40.030
connected physically. These
different systems that make up

00:05:40.030 --> 00:05:43.153
the Internet connect to
each other, communicate with

00:05:43.153 --> 00:05:46.460
each other, and work together
because of agreed upon

00:05:46.460 --> 00:05:50.860
standards for how data is
sent around on the Internet.

00:05:50.860 --> 00:05:53.798
Computing devices, or
routers along the Internet,

00:05:53.798 --> 00:05:56.840
help all the packets make
their way to the destination

00:05:56.840 --> 00:06:01.254
where they're reassembled,
if necessary, in order.

00:06:01.254 --> 00:06:05.144
This happens billions of
times a day, whether you and

00:06:05.144 --> 00:06:08.524
others are sending an
email, visiting a webpage,

00:06:08.524 --> 00:06:12.123
doing a video chat, using a
mobile app, or when sensors

00:06:12.123 --> 00:06:14.468
or devices on the Internet
talk to each other.

