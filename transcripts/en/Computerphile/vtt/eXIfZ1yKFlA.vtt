WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.650
In some ways there are some awkward
incompatibilities between the decimal

00:00:04.650 --> 00:00:08.970
that we like to use and the binary which
is so efficient and wonderful for computers

00:00:08.970 --> 00:00:13.230
to use. We've seen one example of this
already. I think I mentioned in a

00:00:13.230 --> 00:00:22.439
previous video that .1, or .10, (ten cents in otrher words)
in decimal, in your current bank balance is

00:00:22.439 --> 00:00:28.130
not exactly representable as a binary
number. You look at what it is in binary

00:00:28.130 --> 00:00:34.829
0.00011001100
It just isn't, you know. It keeps on

00:00:34.829 --> 00:00:40.079
recurring. Just as 1/3 in decimal isn't
exact. It goes .333333 for ever.

00:00:40.079 --> 00:00:48.000
Decimal and binary sometimes don't mix. 
Now here's going

00:00:48.000 --> 00:00:51.719
to be a classic example. Let's just think
this through, without even writing

00:00:51.719 --> 00:00:54.660
anything down. if we've got a 4-bit nibble,

00:00:54.660 --> 00:01:01.530
we know that in hex it goes from 0000
to 1111,  15 represented as F [hex]. We can't use

00:01:01.530 --> 00:01:06.540
our full range [for BCD]. This is binary-coded
decimal not binary-coded hexadecimal.

00:01:06.540 --> 00:01:13.590
Yeah?! We have got to say that the moment
that representation, even in one nibble,

00:01:13.590 --> 00:01:23.610
gets to 1010 that is 10 [decimal] you can't
leave it as 1010 you've now got have

00:01:23.610 --> 00:01:29.310
2 nibbles. The left nibble with a 1 in it
and the right nibble wants to look like 0.

00:01:29.310 --> 00:01:34.590
You can't compress it into a single
nibble, say 1010 and say: "I'm sorry folks

00:01:34.590 --> 00:01:38.610
you'll have to learn hex, because
otherwise you won't understand your bank

00:01:38.610 --> 00:01:43.259
balance!" This is not going to go down very
well. The challenge then is, if you're

00:01:43.259 --> 00:01:48.780
using a 4-bit nibble, but only for the
decimal range 0-9, you've somehow

00:01:48.780 --> 00:01:54.780
got to make - in all your bit twiddles -
you've got to make it carry into another

00:01:54.780 --> 00:02:01.619
nibble on the left at 10[decimal] and not at 16 
[decimal], which is what hexadecimal will do for you.

00:02:01.619 --> 00:02:09.629
So, how does one, sort of, bridge that
gap? Probably the best way for me to get

00:02:09.629 --> 00:02:12.890
in to the hard bit about this is [to] go
straight away for that magic

00:02:12.890 --> 00:02:19.790
number 10. Let's represent it in binary
and then say: "How do we convert it into

00:02:19.790 --> 00:02:25.250
BCD?" And realize that we need that second
nibble on the left. What I'd like to do

00:02:25.250 --> 00:02:30.680
here is to draw myself columns, and I'm
going to restrict myself to things that

00:02:30.680 --> 00:02:35.540
are, at most, 2 decimal digits. Let's
remind ourselves, up here, that we're

00:02:35.540 --> 00:02:41.780
going to have a tens nibble and a units
nibble, and we'll initialize everything

00:02:41.780 --> 00:02:46.790
to zeros. But, above here, just to keep
things very simple,

00:02:46.790 --> 00:02:52.790
we'll use 4-bit binary representations.
And I hope you will all agree that 1010

00:02:52.790 --> 00:02:59.870
is ten, in base ten. And the
reason for that is that the binary - in

00:02:59.870 --> 00:03:04.940
four bits - that's an 8, that's the 2,
so that's 10. This technique which is

00:03:04.940 --> 00:03:10.160
called Double Dabble - I don't know how it
was discovered, it's fiendishly clever -

00:03:10.160 --> 00:03:18.440
but the idea is we'd love to convert
binary into BCD by, as far as possible,

00:03:18.440 --> 00:03:28.640
using simple bit shifts all the time and
doing the minimum of mucking about to

00:03:28.640 --> 00:03:33.890
get it to carry early. So the 'Double'
reflects the fact that we're going to shift

00:03:33.890 --> 00:03:38.030
this bit-pattern across into here.
And we're going to regard it as one

00:03:38.030 --> 00:03:43.730
huge, great big, 12-bit register here. A walloping 
great shift register - all joined together.

00:03:43.730 --> 00:03:47.299
Even though I've drawn it out
separately. It's just going to move from

00:03:47.299 --> 00:03:50.660
the right across to the left. I'm going to move
them across. And remember, every time you

00:03:50.660 --> 00:03:55.760
shift the thing by one place left
you are basically doubling it. OK,

00:03:55.760 --> 00:04:00.620
that's where the 'Double' comes from. But
we find we have to intervene to make it

00:04:00.620 --> 00:04:04.250
look right at the end and that is where
the 'Dabble' comes from. If you look up

00:04:04.250 --> 00:04:08.600
'dabble', as I did in Chambers' dictionary
it's one of the meanings is " ... to make a

00:04:08.600 --> 00:04:14.180
trivial alteration to". OK to make a small
alteration to something you're 'dabbling'

00:04:14.180 --> 00:04:18.650
with it. OK, so that's where Double
Dabble comes. OK, so it's basically

00:04:18.650 --> 00:04:23.930
doubling, with a little bit of dabbling.
And the truth really hits you at 10. So,

00:04:23.930 --> 00:04:29.150
let's progressively
shift this by 1 bit left. What's going to

00:04:29.150 --> 00:04:32.570
happen first of all? You shift over that '1' bit

00:04:32.570 --> 00:04:36.710
You push it across into here because this
is a unified register, for the moment.

00:04:36.710 --> 00:04:40.670
Prists will say: "Ah! but when you shift
left, like that, you should fill in with

00:04:40.670 --> 00:04:45.020
zeros on the right." Yes, that is what
will actually happen, inside the hardware,

00:04:45.020 --> 00:04:49.010
But I prefer not to pad with zeros, on
the right, at a shift, because I want you

00:04:49.010 --> 00:04:54.590
to see when I've finished. So, we could call
this shift no. 1.  Let's do another

00:04:54.590 --> 00:05:00.830
one. That 1 moves into that position
but you're bringing over another 0

00:05:00.830 --> 00:05:06.470
out of that part and that's leaving you
with 10 in there. Now, notice what's

00:05:06.470 --> 00:05:12.890
happened. On shift 1, here, you had a 1
on the right, in that nibble. By the time

00:05:12.890 --> 00:05:15.860
you've shifted it left one place it's in
the 2s position.

00:05:15.860 --> 00:05:21.770
So, you've doubled it. Let's do shift
no. 3 and a zero is left, So, that is

00:05:21.770 --> 00:05:27.980
shift 3. Now, this is where we can
begin to see trouble on the horizon.

00:05:27.980 --> 00:05:33.440
We have got one more shift left to do and,
if you don't do anything about it, it's

00:05:33.440 --> 00:05:38.270
just going to end up with 1010
in here. I mean, all right, what's

00:05:38.270 --> 00:05:43.640
happened here, look, is that was 2 - you
doubled it, but because you shifted a

00:05:43.640 --> 00:05:48.350
1 in, and not a 0, you've doubled
it and added 1. That now says 5, OK?

00:05:48.350 --> 00:05:53.720
So, basically it's doubling but sometimes
if the bit you shift over is 1, and

00:05:53.720 --> 00:05:58.880
not a 0, it's double and add 1. But
essentially it's doubling. Now the

00:05:58.880 --> 00:06:02.660
trouble is coming on the horizon because I
can see that if I just push that 0

00:06:02.660 --> 00:06:10.420
bit over here, I'm going to end up with
1010. I know, it's 10 [decimal].  Fine!

00:06:10.420 --> 00:06:17.390
It's not representable as a digit from
0-9. So, what should you do

00:06:17.390 --> 00:06:22.280
then? Let it happen anyway and then look
at it and say: "Oh my golly, it's gone to

00:06:22.280 --> 00:06:27.080
ten; it's gone to eleven; it's gone to
fifteen even! I'd better backtrack and undo

00:06:27.080 --> 00:06:32.740
it and then redo it ?!" No! Dive in early
and reason as follows:

00:06:32.740 --> 00:06:37.400
Concentrate everybody! OK, what we want here

00:06:37.400 --> 00:06:47.360
is for this thing to come out looking
like 0001 0000.

00:06:47.360 --> 00:06:52.340
Let's say that's the "desired result".

00:06:52.340 --> 00:06:57.889
Because that - regarding these as BCD digits -

00:06:57.889 --> 00:07:02.240
that's 1 0 i.e. ten. That's exactly what
you want. So how do we make that happen?

00:07:02.240 --> 00:07:08.090
How do we make it carry over into this
left-hand nibble, here, when it doesn't

00:07:08.090 --> 00:07:13.280
want to at the moment. So the fiendishly
clever thing says: "Take a look at what

00:07:13.280 --> 00:07:18.740
you've currently got because if what you
got is 5 or more, the act of doubling

00:07:18.740 --> 00:07:25.729
it is bound to get you into a number
that needs to carry across [tothe next BCD nibble].
So, if it is

00:07:25.729 --> 00:07:33.430
going to cause you trouble, at 5 or
more, we wanted to carry at 10 [decimal], it

00:07:33.430 --> 00:07:37.550
innately would like to carry at 16
and you don't want that. What's the

00:07:37.550 --> 00:07:43.669
difference, Sean, between 10 and 16?
&gt;&gt; Sean: 6
&gt;&gt; DFB: 6. what's half of that?
&gt;&gt; Sean: 3 

00:07:43.669 --> 00:07:48.080
&gt;&gt; DFB: All right. So, if we add three the fact 
that we're then shifting it will double our 3

00:07:48.080 --> 00:07:54.680
contribution [to] 6, And we'll make it carry 
[because we'll force that nibble past 16]
So, the rule is - on Double Dabble - if

00:07:54.680 --> 00:08:03.250
what you see in your nibble [before shifting] is 
5 or more, then add 3. So, here we go, look.

00:08:03.250 --> 00:08:09.020
Next stage now. Because we've seen
trouble on the horizon. It's 5, so add

00:08:09.020 --> 00:08:15.349
3. And 3, we agree, is 11 [binary].
Now, here you do have to do a little

00:08:15.349 --> 00:08:18.770
addition with carries.
You can't avoid it. Some carries will

00:08:18.770 --> 00:08:24.680
have to take place. 1 and 1 is 0 (carry 1);
1 and 1 is 0(carry 1);

00:08:24.680 --> 00:08:33.080
1 and 1 is 0 (carry 1). The act of
adding 3 will make it look not like

00:08:33.080 --> 00:08:39.400
0101 - you've added the 3, it now looks 
like 1000.

00:08:39.400 --> 00:08:43.849
Magic! But, what happens when you shift
the final 0 in? That 1 will shift

00:08:43.849 --> 00:08:48.910
left, into the left-hand nibble. And
you'll end up with:

00:08:48.910 --> 00:08:56.350
0001 0000. And this thing is
now empty. So you know you've come to the

00:08:56.350 --> 00:09:00.010
end of your conversion. It's so cool. 
I love it dearly.

00:09:00.010 --> 00:09:05.140
You could argue though, the one problem
with all this is that, in order to do

00:09:05.140 --> 00:09:09.700
your shifts quickly, you've got this [bit pattern]
in a sort of a unified shift register

00:09:09.700 --> 00:09:15.460
full of bits. Your nibbles -  in the end - end
up looking correct. But you're going to have

00:09:15.460 --> 00:09:20.290
to dig them out of the shift register. 
"Oh yeah! ... that's clearly a 4, yes,
that's a 2 isn't it?!"

00:09:20.290 --> 00:09:25.180
Magic! Of course, if you're using
this seriously you have to try and

00:09:25.180 --> 00:09:33.520
generate these BCD digits in a way where
they don't necessarily need digging out

00:09:33.520 --> 00:09:36.670
of a bigger representation - but on the
other hand you're using that behind the scenes.

00:09:36.670 --> 00:09:44.080
I've found, for you, the ultimate
reference [that]  I've taken this example from,

00:09:44.080 --> 00:09:48.190
and used the methodology. It's by a guy
called Chuck Falconer. It's actually

00:09:48.190 --> 00:09:54.820
referred to in the Wikipedia articles on
BCD and Double Dabble, So, we've pulled

00:09:54.820 --> 00:09:58.480
that over. It's freely available. You can
go and dive in there to your heart's

00:09:58.480 --> 00:10:04.750
content, because he covers about how to make 
them [the nibbles] appear in a much more useable

00:10:04.750 --> 00:10:08.890
way. And what he also says is that when
you start looking at this, you realize

00:10:08.890 --> 00:10:14.860
you are actually doing the "division by
ten and remainders" thing that we

00:10:14.860 --> 00:10:18.520
discussed earlie. But you're doing it in a
pretty efficient way [mainly bitshifts] and only

00:10:18.520 --> 00:10:23.470
occasionally needing that little
addition of 3. So that's ... I'm not

00:10:23.470 --> 00:10:27.760
saying there aren't other ways. There
seems to be endless variants on this:

00:10:27.760 --> 00:10:33.220
there's signed BCD; there's packed BCD;
there's all sorts. But if you just want

00:10:33.220 --> 00:10:39.550
to understand the fundamentals I would
say go through the [EXTRA BITS video] 42 example. T
then go to

00:10:39.550 --> 00:10:46.920
Chuck Falconers memo. And he does 255,
as decimal, and boy that needs

00:10:46.920 --> 00:10:52.810
spotting problems in about three sets of
nibbles - not two. You have to spot one in

00:10:52.810 --> 00:10:56.860
the middle thing happening and so on.
&gt;&gt; Sean: You mentioned 255, so this goes

00:10:56.860 --> 00:11:02.120
up to hundreds, thousand ... you just add more ... ?
&gt;&gt; DFB: Yes, you just add more BCD digits on the

00:11:02.120 --> 00:11:09.589
left to cope. But you give yourself a bigger
problem when examining each of these

00:11:09.589 --> 00:11:14.240
[nibble] digits to see if they're about to go
beyond ten, when they're doubled, 

00:11:14.240 --> 00:11:18.050
by shifting left  left one more time. You give
yourself a bigger and bigger inspection

00:11:18.050 --> 00:11:24.470
task, there's no question. So, like I say
the Chuck Falconer memo from

00:11:24.470 --> 00:11:28.730
which this is derived ... we'll put a link
out to it. It is freely available.

00:11:28.730 --> 00:11:35.330
He doesn't explain how the people who
invented this actually discovered it,

00:11:35.330 --> 00:11:40.640
worked out that it really does work. It
seems almost like magic when you do it.

00:11:40.640 --> 00:11:45.230
And every so often I pull out another
number and I think: "I bet it won't work for this".

00:11:45.230 --> 00:11:51.050
But it does. It's quitey incredible. So,
there we are then. I think we've fairly

00:11:51.050 --> 00:11:56.900
well summarized now what the situation
is - that for great big engineering,

00:11:56.900 --> 00:12:02.450
scientific calculations - even for finding
new prime numbers as huge integers - you

00:12:02.450 --> 00:12:08.060
really do need proper binary to speed
things up. But for some sorts of trivial

00:12:08.060 --> 00:12:13.550
calculations, you might even want to do
it in BCD all the time. But even if you

00:12:13.550 --> 00:12:17.420
are basically binary and want to print out
your answers, you still have to convert

00:12:17.420 --> 00:12:23.450
from binary through to BCD. And that is
always a worry for the people who

00:12:23.450 --> 00:12:29.420
write the I/O routines, shall we say
for C and so on. Is this going to be

00:12:29.420 --> 00:12:34.339
efficient? What we're saying is, at the
computing end of things, you should be

00:12:34.339 --> 00:12:39.310
able to prepare that BCD-digit stream as
quickly as possible.

