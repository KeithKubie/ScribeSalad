WEBVTT
Kind: captions
Language: en

00:00:00.270 --> 00:00:02.630
I know you guys are getting
to be pros by now.

00:00:02.630 --> 00:00:05.180
But let's do one more example for
good measure.

00:00:05.180 --> 00:00:07.530
This time the challenge
is to write a method.

00:00:07.530 --> 00:00:08.520
Inside the class.

00:00:08.520 --> 00:00:09.910
Movie archive.

00:00:09.910 --> 00:00:13.400
And this method should take in a year
and a dictionary of movies, and

00:00:13.400 --> 00:00:17.460
return an array of strings listing
the movies that were released that year.

00:00:17.460 --> 00:00:20.920
To start us off I've written the shell
of our movie archive class and

00:00:20.920 --> 00:00:23.840
this dictionary of AI themed movies.

00:00:23.840 --> 00:00:27.100
Here in between the parentheses
defining the movie archive class

00:00:27.100 --> 00:00:28.230
we'll write our function.

00:00:28.230 --> 00:00:29.990
Let's call it filter by year.

00:00:29.990 --> 00:00:32.880
Filter by year is going to take
in a year as a parameter which

00:00:32.880 --> 00:00:37.270
will be of type Int and it'll also
take in a dictionary of movies.

00:00:37.270 --> 00:00:40.140
Which will be of type dictionary and
that dictionary will hold

00:00:40.140 --> 00:00:44.000
keys of type string,
the movie titles and values of type Int.

00:00:44.000 --> 00:00:44.730
The release here.

00:00:45.750 --> 00:00:47.890
It will return an array of movie titles.

00:00:47.890 --> 00:00:51.719
So here we'll type our arrow and then
the return type is an array of strings.

00:00:53.550 --> 00:00:56.860
Since we're going to return an array
of strings, we'll need to initialize

00:00:56.860 --> 00:00:59.340
an array of strings to put our
filtered movie titles into.

00:00:59.340 --> 00:01:04.660
I will go ahead and return that array so
we can quiet this compiler error.

00:01:04.660 --> 00:01:07.880
The next step is to loop through
the dictionary that's passed in and

00:01:07.880 --> 00:01:11.880
check each key value pair to see if the
release year matches the year passed in

00:01:11.880 --> 00:01:13.180
as a parameter.

00:01:13.180 --> 00:01:16.230
To loop through the dictionary
we can use a for in loop.

00:01:16.230 --> 00:01:18.810
We'll call the value release year.

00:01:18.810 --> 00:01:22.820
Then if the year parameter is equal
to the value of release year,

00:01:22.820 --> 00:01:25.710
we add that movie title
to our filtered array.

00:01:25.710 --> 00:01:28.150
Now our filterByYear method
should be good to go.

00:01:28.150 --> 00:01:31.690
To call it will need an instance
of the MovieArchive class.

00:01:31.690 --> 00:01:35.830
So here I'll initialize
a MovieArchive and call it myArchive.

00:01:35.830 --> 00:01:39.320
Then I can call filterByYear
using dot syntax.

00:01:39.320 --> 00:01:43.516
And of course the dictionary we
want to filter is AI themed movies.

00:01:46.748 --> 00:01:52.128
And let's see what AI themed
movies came out in 1982.

00:01:52.128 --> 00:01:54.968
And over here in the sidebar
we can see Blade Runner.

00:01:54.968 --> 00:02:01.628
And if we try 2013 we get her.

00:02:01.628 --> 00:02:04.130
That ought to give you
a good start on functions.

00:02:04.130 --> 00:02:06.990
Be sure to complete the exercises for
more practice defining and

00:02:06.990 --> 00:02:08.370
calling functions.

00:02:08.370 --> 00:02:11.800
As always you can find a link to
them in the instructor's notes.

00:02:11.800 --> 00:02:15.060
Next up, we'll talk about classes and
their properties and methods.

