WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.700
CARRIE ROWE: Camera
adds 10 pounds.

00:00:01.700 --> 00:00:03.106
ARUN NAGARAJAN: Camera
does add 10 pounds.

00:00:03.106 --> 00:00:03.572
KALYAN REDDY: Perspective.

00:00:03.572 --> 00:00:04.525
You are closer.

00:00:04.525 --> 00:00:05.775
ARUN NAGARAJAN: That too.

00:00:08.060 --> 00:00:10.370
We'll let you do another
one where you can

00:00:10.370 --> 00:00:12.027
have your own shot.

00:00:12.027 --> 00:02:45.634
[MUSIC PLAYING]

00:02:45.634 --> 00:02:48.320
ARUN NAGARAJAN: Welcome to
"Developers Live." My name is

00:02:48.320 --> 00:02:50.120
Arun Nagarajan, and we're
here live from

00:02:50.120 --> 00:02:51.540
the New York studios.

00:02:51.540 --> 00:02:55.390
Today's topic is "Apps Script
Crash Course and the Script

00:02:55.390 --> 00:02:57.285
Editor." We're going to focus
a lot on the Script Editor.

00:02:57.285 --> 00:03:00.040
But before I get started, I
want to introduce other

00:03:00.040 --> 00:03:00.460
presenters.

00:03:00.460 --> 00:03:01.610
KALYAN REDDY: Hey, everyone.

00:03:01.610 --> 00:03:03.150
My name is Kalyan Reddy.

00:03:03.150 --> 00:03:06.340
I usually do the Apps Unscripted
series, but today,

00:03:06.340 --> 00:03:08.910
I'm going to give you some neat
tips and tricks on using

00:03:08.910 --> 00:03:11.600
the Script Editor and maximizing
productivity there.

00:03:11.600 --> 00:03:15.230
And as you might know, most of
us on the apps script team

00:03:15.230 --> 00:03:16.940
work out of the New
York office here.

00:03:16.940 --> 00:03:19.580
But today, we have a special
guest on our team from the

00:03:19.580 --> 00:03:20.720
Mountain View office.

00:03:20.720 --> 00:03:21.570
I'll let her introduce
herself.

00:03:21.570 --> 00:03:22.200
CARRIE ROWE: Thanks, Kalyan.

00:03:22.200 --> 00:03:23.090
I'm Carrie Rowe.

00:03:23.090 --> 00:03:25.840
I'm a program manager on the
apps dev rel team, and I work

00:03:25.840 --> 00:03:26.480
with these guys.

00:03:26.480 --> 00:03:29.210
I'm really excited to sit out
here with them and hear more

00:03:29.210 --> 00:03:30.000
about what they do.

00:03:30.000 --> 00:03:34.770
And my job is to help make
developers successful, so

00:03:34.770 --> 00:03:37.890
implementing programs to help
reach out to you guys and

00:03:37.890 --> 00:03:39.350
communicate to you about
our products

00:03:39.350 --> 00:03:40.200
and get your feedback.

00:03:40.200 --> 00:03:42.710
So if you guys have any ideas
about how we can better

00:03:42.710 --> 00:03:45.290
interact with you, please post
on the community page or reach

00:03:45.290 --> 00:03:45.880
out to me on Google+.

00:03:45.880 --> 00:03:47.700
I'd love to hear
your feedback.

00:03:47.700 --> 00:03:48.380
ARUN NAGARAJAN: That's right.

00:03:48.380 --> 00:03:50.130
That's really important
feedback.

00:03:50.130 --> 00:03:52.300
"Google Developers Live" itself
is a program, so--

00:03:52.300 --> 00:03:52.850
CARRIE ROWE: Yes.

00:03:52.850 --> 00:03:55.250
ARUN NAGARAJAN: --that's why
she's on it, promoting it.

00:03:55.250 --> 00:03:55.950
So let's get started.

00:03:55.950 --> 00:03:59.940
So the Apps Crash Course series
is all about taking one

00:03:59.940 --> 00:04:02.840
aspect of writing Apps Script
apps and just going really

00:04:02.840 --> 00:04:03.690
deep into it.

00:04:03.690 --> 00:04:06.986
So even if you're a programmer
that's been working with Apps

00:04:06.986 --> 00:04:09.610
Script for a couple of years
now, we hope that you'll have

00:04:09.610 --> 00:04:11.950
something that you can take
away from this series, but

00:04:11.950 --> 00:04:14.685
it's more focused around just
from the ground up explain a

00:04:14.685 --> 00:04:17.829
lot of the capabilities of
a particular feature.

00:04:17.829 --> 00:04:20.420
And today, it's all about
the Script Editor.

00:04:20.420 --> 00:04:21.870
Should we get started?

00:04:21.870 --> 00:04:22.050
All right.

00:04:22.050 --> 00:04:24.970
So the very first thing that
we'll talk about is how do you

00:04:24.970 --> 00:04:26.290
get to the Script Editor.

00:04:26.290 --> 00:04:29.310
So obviously, I think the
easiest to remember URL in the

00:04:29.310 --> 00:04:32.890
world is script.google.com, real
easy to remember, real

00:04:32.890 --> 00:04:33.750
easy to type.

00:04:33.750 --> 00:04:35.820
It brings you the Script
Editor directly.

00:04:35.820 --> 00:04:38.350
So when I say Script Editor,
just so everybody is on the

00:04:38.350 --> 00:04:42.490
same page, it's the IDE, the
Integrated Development

00:04:42.490 --> 00:04:45.080
Environment where you'll write
and run your scripts from.

00:04:45.080 --> 00:04:46.690
So that's one of the
easiest ways to get

00:04:46.690 --> 00:04:47.950
to the Script Editor.

00:04:47.950 --> 00:04:51.590
We also have the ability to
inject the Create Script

00:04:51.590 --> 00:04:53.350
option within Google Drive.

00:04:53.350 --> 00:04:56.230
So this actually is a pretty
nice thing that you can do.

00:04:56.230 --> 00:04:58.950
So right now, if you click on
the Create menu, you have the

00:04:58.950 --> 00:05:01.840
native Google Apps formats
available and then any

00:05:01.840 --> 00:05:03.760
third-party apps you
can install.

00:05:03.760 --> 00:05:06.245
We have Google Apps Script
available as an app which you

00:05:06.245 --> 00:05:07.200
can install as well.

00:05:07.200 --> 00:05:09.950
So what you can do is say
Connect Apps to Drive and

00:05:09.950 --> 00:05:14.930
search for Apps Script,
and search for that.

00:05:14.930 --> 00:05:18.550
And that should-- hopefully, the
Wi-Fi catches up here, and

00:05:18.550 --> 00:05:21.580
that should bring back an Apps
Script app that I can hit

00:05:21.580 --> 00:05:22.780
Connect on.

00:05:22.780 --> 00:05:27.070
And that will install a new
option under your Create menu

00:05:27.070 --> 00:05:28.000
for Script.

00:05:28.000 --> 00:05:30.430
So I like to use this, because
it's actually a really nice

00:05:30.430 --> 00:05:32.730
way to put a script in
a particular folder.

00:05:32.730 --> 00:05:34.740
So if you're within a folder
already where you keep your

00:05:34.740 --> 00:05:37.980
scripts, and you create a script
within that, it'll be

00:05:37.980 --> 00:05:39.350
managed properly.

00:05:39.350 --> 00:05:42.900
So let's go with this route, and
that, again, brought us to

00:05:42.900 --> 00:05:43.690
the Script Editor.

00:05:43.690 --> 00:05:46.320
And in fact, you can see in the
URL that the folder ID is

00:05:46.320 --> 00:05:48.330
specified, so you know
it's working.

00:05:48.330 --> 00:05:49.020
That's great.

00:05:49.020 --> 00:05:50.620
So let me talk a little
bit about the

00:05:50.620 --> 00:05:51.660
Script Editor itself.

00:05:51.660 --> 00:05:54.120
So the very first thing that you
see when the Script Editor

00:05:54.120 --> 00:05:56.110
comes up is the Welcome
screen.

00:05:56.110 --> 00:05:58.840
I know a lot of you probably
turn this off, but I do find

00:05:58.840 --> 00:06:02.330
this useful in some scenarios
where if I have a recent

00:06:02.330 --> 00:06:05.630
project that I want to
immediately open up, or if I

00:06:05.630 --> 00:06:07.180
like to use a template.

00:06:07.180 --> 00:06:09.750
So on the left-hand side, is the
set of templates that we

00:06:09.750 --> 00:06:12.100
have to help you get started.

00:06:12.100 --> 00:06:15.850
So this doesn't change the type
of script or create any

00:06:15.850 --> 00:06:18.500
property changes about
the code itself.

00:06:18.500 --> 00:06:21.360
All it does is it seeds your
Script Editor with a bunch of

00:06:21.360 --> 00:06:23.780
useful snippets that we think
will help you get started.

00:06:23.780 --> 00:06:26.990
So if I, for instance, select
the Calendar template, all

00:06:26.990 --> 00:06:30.130
that's doing is it's going to
create the project that we

00:06:30.130 --> 00:06:33.970
already have and populate it
with a bunch of code that we

00:06:33.970 --> 00:06:35.240
think will be useful for you.

00:06:35.240 --> 00:06:35.660
KALYAN REDDY: Right.

00:06:35.660 --> 00:06:38.470
Like every script isn't like
this is a Calendar script.

00:06:38.470 --> 00:06:39.140
This is a Drive script.

00:06:39.140 --> 00:06:40.060
It's not like that.

00:06:40.060 --> 00:06:43.920
You could have permissions
granted based on what services

00:06:43.920 --> 00:06:46.700
you're using on a script basis,
but this just seeds the

00:06:46.700 --> 00:06:47.920
code into the Script Editor.

00:06:47.920 --> 00:06:48.250
ARUN NAGARAJAN: That's right.

00:06:48.250 --> 00:06:48.570
Yeah.

00:06:48.570 --> 00:06:51.610
So as you probably know, most of
the impressive scripts that

00:06:51.610 --> 00:06:54.370
are out there oftentimes
use Calendar along with

00:06:54.370 --> 00:06:57.260
spreadsheet data, along with a
file in Drive or something

00:06:57.260 --> 00:06:58.390
along those lines.

00:06:58.390 --> 00:07:00.930
So in this case, we're just
giving you a bunch of code

00:07:00.930 --> 00:07:04.810
that if you're not interested in
reading the documentation,

00:07:04.810 --> 00:07:07.626
you can start looking at some
samples and get going.

00:07:07.626 --> 00:07:09.210
Excuse me.

00:07:09.210 --> 00:07:12.400
So let me show one last thing,
and then I'll talk to you

00:07:12.400 --> 00:07:15.140
about the next set of
things we'll show.

00:07:15.140 --> 00:07:19.490
So in Drive itself, one of
things you can do is once

00:07:19.490 --> 00:07:22.420
you've created a script, you can
go into the Settings, go

00:07:22.420 --> 00:07:25.180
to Manage Apps, and you're able
to actually filter all

00:07:25.180 --> 00:07:28.100
your scripts by going to Google
Apps Script from the

00:07:28.100 --> 00:07:30.955
Manage App option and then say,
view all the files this

00:07:30.955 --> 00:07:31.880
app created.

00:07:31.880 --> 00:07:34.950
This allows you to see all the
scripts very quickly, so it's

00:07:34.950 --> 00:07:37.210
a really nice way to kind of
filter and look at all your

00:07:37.210 --> 00:07:40.580
scripts in a simple search.

00:07:40.580 --> 00:07:43.070
And then I'll also do a quick
walk through of all the

00:07:43.070 --> 00:07:44.860
different options within
the Script Editor.

00:07:44.860 --> 00:07:47.640
So we've actually done a really
nice job, I think, to

00:07:47.640 --> 00:07:51.090
make the Script Editor feel
familiar to other editors you

00:07:51.090 --> 00:07:52.120
may have worked in.

00:07:52.120 --> 00:07:54.430
Obviously, it's still running
in a browser, so it's very

00:07:54.430 --> 00:07:58.520
portable, and it's meant to be
lightweight and quick, but

00:07:58.520 --> 00:08:01.100
we're still trying to make
it very familiar.

00:08:01.100 --> 00:08:03.940
So you have your standard File,
Edit menu where you can

00:08:03.940 --> 00:08:06.790
kind of do basic things around
the file in the project

00:08:06.790 --> 00:08:10.200
You have the list of
files on the left.

00:08:10.200 --> 00:08:12.730
You cannot have more than one
file with the same name, so we

00:08:12.730 --> 00:08:14.540
take care of that kind
of validation here.

00:08:14.540 --> 00:08:16.970
And then you can actually have
multiple tabs open which is

00:08:16.970 --> 00:08:19.770
great when you're writing a
fairly sophisticated program.

00:08:19.770 --> 00:08:22.720
And then these are your standard
Formatting, and

00:08:22.720 --> 00:08:25.770
Deployment, and Debugging
options, so being able to

00:08:25.770 --> 00:08:28.130
indent, unindent,
save the file.

00:08:28.130 --> 00:08:31.930
This is a deployment option
to the web as a web app.

00:08:31.930 --> 00:08:32.690
These are triggers.

00:08:32.690 --> 00:08:34.260
We'll get to that in a second.

00:08:34.260 --> 00:08:36.419
And then these are the debugging
and the running

00:08:36.419 --> 00:08:38.900
icons, so you'll end up
using that a lot.

00:08:38.900 --> 00:08:42.450
And this is the list of
functions that we have parsed

00:08:42.450 --> 00:08:44.600
out from your code that
you can execute.

00:08:44.600 --> 00:08:47.200
So that's sort of the
very quick overview

00:08:47.200 --> 00:08:48.450
of the Script Editor.

00:08:48.450 --> 00:08:50.520
Now, I think Kalyan is going
to take over and talk about

00:08:50.520 --> 00:08:51.540
one of his favorite features.

00:08:51.540 --> 00:08:52.310
KALYAN REDDY: Yeah.

00:08:52.310 --> 00:08:57.100
So if you're anything like me,
you hate taking your hands

00:08:57.100 --> 00:08:59.940
away from a keyword, because it
just wastes so much time.

00:08:59.940 --> 00:09:01.676
CARRIE ROWE: Spoken like
a true engineer.

00:09:01.676 --> 00:09:02.310
KALYAN REDDY: Yeah.

00:09:02.310 --> 00:09:02.770
Exactly.

00:09:02.770 --> 00:09:04.260
It wastes so much time--

00:09:04.260 --> 00:09:07.310
grabbing the mouse and trying to
use the UI to do something

00:09:07.310 --> 00:09:09.710
that you know is there, and you
just want to get to it.

00:09:09.710 --> 00:09:13.560
So I have a couple of handy
shortcuts that I use on a

00:09:13.560 --> 00:09:15.200
day-to-day basis when
I'm writing scripts.

00:09:15.200 --> 00:09:18.910
So maybe if you don't know, you
might find these useful.

00:09:18.910 --> 00:09:21.950
The first thing is actually Auto
Complete, which is the

00:09:21.950 --> 00:09:26.240
most handy shortcut, I think,
anyone likes here.

00:09:26.240 --> 00:09:28.230
So basically, you can
see it in here.

00:09:28.230 --> 00:09:32.820
It's Content Assist, but in
action you can see it.

00:09:32.820 --> 00:09:36.330
Let's say we have Calendar app,
Get Calendar by ID here.

00:09:36.330 --> 00:09:39.880
If you want to do something else
with Calendar app, you

00:09:39.880 --> 00:09:44.540
can actually just get to it
by doing that shortcut

00:09:44.540 --> 00:09:48.210
combination, Control-Space, and
then you have all of these

00:09:48.210 --> 00:09:50.610
choices, which are our top-level
services that you

00:09:50.610 --> 00:09:52.480
can interact with using
App Script.

00:09:52.480 --> 00:09:54.400
ARUN NAGARAJAN: This is a great
way to just keep up with

00:09:54.400 --> 00:09:55.490
what are our available
services.

00:09:55.490 --> 00:09:56.230
KALYAN REDDY: Right.

00:09:56.230 --> 00:09:58.680
I haven't typed anything yet,
but you already get this list.

00:09:58.680 --> 00:10:03.020
So then let's go type C for
Calendar right there, and then

00:10:03.020 --> 00:10:06.000
you can complete that when you
press the dot, you get a sub

00:10:06.000 --> 00:10:08.960
menu drilling into that
top-level service.

00:10:08.960 --> 00:10:10.890
And you can say--

00:10:10.890 --> 00:10:14.200
let's say I want to create a
calendar, and then you can

00:10:14.200 --> 00:10:15.120
give it some name.

00:10:15.120 --> 00:10:18.190
So very easily without doing
anything, without remembering,

00:10:18.190 --> 00:10:21.280
without going to our
developer pages and

00:10:21.280 --> 00:10:22.010
looking at the function.

00:10:22.010 --> 00:10:23.870
ARUN NAGARAJAN: Even though our
developer pages are great

00:10:23.870 --> 00:10:24.430
I think this is--

00:10:24.430 --> 00:10:24.710
KALYAN REDDY: Oh, yeah.

00:10:24.710 --> 00:10:24.960
Right.

00:10:24.960 --> 00:10:25.740
ARUN NAGARAJAN: --I think
this is a really nice

00:10:25.740 --> 00:10:26.450
way to write code.

00:10:26.450 --> 00:10:27.480
KALYAN REDDY: Exactly.

00:10:27.480 --> 00:10:28.040
Let's see.

00:10:28.040 --> 00:10:30.980
After that, let's get into some
keyboard shortcuts that

00:10:30.980 --> 00:10:32.160
you might not know.

00:10:32.160 --> 00:10:35.580
So one shortcut is--

00:10:35.580 --> 00:10:38.000
let's name it something.

00:10:38.000 --> 00:10:39.255
I love calling things
test script.

00:10:39.255 --> 00:10:41.260
ARUN NAGARAJAN: You just
defined those, right?

00:10:41.260 --> 00:10:43.770
KALYAN REDDY: I have a billion
test scripts in my drive right

00:10:43.770 --> 00:10:47.080
now, and I have no idea what
any of the old ones do.

00:10:47.080 --> 00:10:47.770
OK.

00:10:47.770 --> 00:10:50.000
So let's see, what are
some of my favorites?

00:10:50.000 --> 00:10:52.500
The one thing that I love
is, I write some code.

00:10:52.500 --> 00:10:53.150
I save it.

00:10:53.150 --> 00:10:54.570
I just want to see
what it does.

00:10:54.570 --> 00:10:55.750
It's the run.

00:10:55.750 --> 00:10:57.352
All right?

00:10:57.352 --> 00:10:58.987
ARUN NAGARAJAN: There's another
one here with some

00:10:58.987 --> 00:11:00.410
code that you can run quickly.

00:11:00.410 --> 00:11:01.380
KALYAN REDDY: There we go.

00:11:01.380 --> 00:11:03.190
So this is good code
that we can show.

00:11:03.190 --> 00:11:05.620
Let's say we want to run a
Processinbox function.

00:11:05.620 --> 00:11:06.540
I select it.

00:11:06.540 --> 00:11:10.090
I make some edits here,
whatever, save it.

00:11:10.090 --> 00:11:15.700
So if you're using a Mac, it's
Command-R. If you're for using

00:11:15.700 --> 00:11:19.420
anything else, it's Control-R.
So that does not reload the

00:11:19.420 --> 00:11:23.310
page like the behavior is in
just a regular web browser for

00:11:23.310 --> 00:11:25.890
other websites, but it actually
runs the function

00:11:25.890 --> 00:11:29.640
that's currently selected within
this function box here.

00:11:29.640 --> 00:11:33.180
And as you can see, the yellow
bar came up saying the

00:11:33.180 --> 00:11:35.410
function was run.

00:11:35.410 --> 00:11:38.640
In conjunction with this,
another useful chain command

00:11:38.640 --> 00:11:44.250
is Command-Enter or
Control-Enter, if you use

00:11:44.250 --> 00:11:44.910
other IDEs.

00:11:44.910 --> 00:11:46.890
And this brings up the
logging output.

00:11:46.890 --> 00:11:51.360
So what I usually do is I do
Control-R, Control-Enter and

00:11:51.360 --> 00:11:53.580
then quickly see what's
there to log.

00:11:53.580 --> 00:11:56.710
So actually, if you want to
chain that even more,

00:11:56.710 --> 00:11:57.800
Command-S to save it.

00:11:57.800 --> 00:12:00.105
As you know, this is the
same for other things.

00:12:00.105 --> 00:12:01.770
ARUN NAGARAJAN: So you're
saying, you'll write code.

00:12:01.770 --> 00:12:03.580
You'll use Auto Complete
to write your code.

00:12:03.580 --> 00:12:04.030
KALYAN REDDY: Exactly.

00:12:04.030 --> 00:12:06.630
ARUN NAGARAJAN: Command-S.
Command-R. Command-Enter.

00:12:06.630 --> 00:12:06.895
KALYAN REDDY: Command-Enter.

00:12:06.895 --> 00:12:08.960
CARRIE ROWE: All of this is part
of the quest to become an

00:12:08.960 --> 00:12:10.055
App Script Jedi master.

00:12:10.055 --> 00:12:10.650
KALYAN REDDY: Exactly.

00:12:10.650 --> 00:12:12.555
ARUN NAGARAJAN: Well, just
in general doing more--

00:12:12.555 --> 00:12:13.530
CARRIE ROWE: Slash impress
your friends.

00:12:13.530 --> 00:12:13.950
ARUN NAGARAJAN: Yes.

00:12:13.950 --> 00:12:15.570
KALYAN REDDY: Yes.

00:12:15.570 --> 00:12:17.960
I talk about this at parties.

00:12:17.960 --> 00:12:20.350
So anyway, you see this
logging output here.

00:12:20.350 --> 00:12:22.880
We'll get into explicit details
of logging later.

00:12:22.880 --> 00:12:24.170
But this is generally
how you can get to

00:12:24.170 --> 00:12:26.460
the log very quickly.

00:12:26.460 --> 00:12:26.950
OK.

00:12:26.950 --> 00:12:28.480
Another feature that we have,
you might have noticed this,

00:12:28.480 --> 00:12:30.910
but Arun mentioned it
briefly just before.

00:12:30.910 --> 00:12:32.910
It's the Auto Indent feature.

00:12:32.910 --> 00:12:36.510
So if you have it turned on,
then you might notice that you

00:12:36.510 --> 00:12:39.000
can't press the Tab key to
indent things like normal,

00:12:39.000 --> 00:12:40.790
because it's handling
this for you.

00:12:40.790 --> 00:12:43.430
And if you add something else,
it'll automatically indent it

00:12:43.430 --> 00:12:46.010
starting at the same spot.

00:12:46.010 --> 00:12:47.910
If you turn that
off, you can--

00:12:47.910 --> 00:12:52.610
well, let me show some
other behavior here.

00:12:52.610 --> 00:12:54.603
Well, let's try some
real code here.

00:12:57.890 --> 00:13:00.200
Var x equals 2, let's say.

00:13:00.200 --> 00:13:03.130
If you want to fix that quickly,
you just make a

00:13:03.130 --> 00:13:05.000
selection and press Tab.

00:13:05.000 --> 00:13:08.790
And then it'll make
your code pretty.

00:13:08.790 --> 00:13:12.030
ARUN NAGARAJAN: And I find that
when I'm copy/pasting

00:13:12.030 --> 00:13:14.320
samples or code from another
place, I end up

00:13:14.320 --> 00:13:14.870
needing that a lot.

00:13:14.870 --> 00:13:17.280
KALYAN REDDY: It's all messed
up, so you do Command-A or

00:13:17.280 --> 00:13:20.450
Control-A, Select All, and then
just do Tab to fix that.

00:13:20.450 --> 00:13:24.610
Now, if you don't use this Auto
Indent, if you have that

00:13:24.610 --> 00:13:27.180
turned off, the behavior
is slightly different.

00:13:27.180 --> 00:13:30.230
So when you do have something
like this that you want to

00:13:30.230 --> 00:13:36.000
fix, you have to do Shift-Tab
to fix it.

00:13:36.000 --> 00:13:38.430
So instead of just Tab, you have
to do Shift-Tab, because

00:13:38.430 --> 00:13:41.090
otherwise, you can use Tab just
to do regular indents.

00:13:41.090 --> 00:13:42.130
ARUN NAGARAJAN: So
what do you have?

00:13:42.130 --> 00:13:42.950
Do you have--

00:13:42.950 --> 00:13:44.330
KALYAN REDDY: I don't use
the Auto Indenter.

00:13:44.330 --> 00:13:44.890
ARUN NAGARAJAN: You don't?

00:13:44.890 --> 00:13:45.230
KALYAN REDDY: No.

00:13:45.230 --> 00:13:46.480
ARUN NAGARAJAN: Wow.

00:13:46.480 --> 00:13:48.720
KALYAN REDDY: I just like, if
I need to indent something,

00:13:48.720 --> 00:13:51.000
Control-A, Shift-Tab.

00:13:51.000 --> 00:13:52.250
It's quick enough.

00:13:54.270 --> 00:13:56.250
The next thing is for variables
that you've defined

00:13:56.250 --> 00:13:57.620
earlier in your code.

00:13:57.620 --> 00:14:01.120
A useful way to complete this
here, here we have Logger.log,

00:14:01.120 --> 00:14:01.770
thread.count.

00:14:01.770 --> 00:14:04.220
Let's say we want to do that
easily, we went and defined

00:14:04.220 --> 00:14:05.810
thread count earlier on.

00:14:05.810 --> 00:14:10.640
You can do thread and then--

00:14:10.640 --> 00:14:15.540
So Alt forward slash is a
shortcut to do completions

00:14:15.540 --> 00:14:16.320
from your code.

00:14:16.320 --> 00:14:19.200
So as I keep clicking it, it
keeps iterating through

00:14:19.200 --> 00:14:20.155
everything you've defined.

00:14:20.155 --> 00:14:21.870
You've defined thread
ID earlier.

00:14:21.870 --> 00:14:23.900
You've defined thread
count, threads.

00:14:23.900 --> 00:14:26.190
Its iterating though all of
these that you've designed, so

00:14:26.190 --> 00:14:26.910
you can quickly do it.

00:14:26.910 --> 00:14:29.380
ARUN NAGARAJAN: So you no longer
need to decide between

00:14:29.380 --> 00:14:30.740
short names that
are easier type

00:14:30.740 --> 00:14:31.600
versus descriptive names--

00:14:31.600 --> 00:14:31.910
KALYAN REDDY: Exactly.

00:14:31.910 --> 00:14:32.700
ARUN NAGARAJAN: --that
are easy to read.

00:14:32.700 --> 00:14:34.400
KALYAN REDDY: So it's actually
good programming practice to

00:14:34.400 --> 00:14:36.860
not name everything XYZ.

00:14:36.860 --> 00:14:39.390
You can actually give them
descriptive names.

00:14:39.390 --> 00:14:43.450
And so even if your name has
like four words camel cased

00:14:43.450 --> 00:14:47.400
together, you can quickly just
get to that and have people

00:14:47.400 --> 00:14:49.460
who are sharing the script with
you and managing it in

00:14:49.460 --> 00:14:51.520
the future, have them
understand it.

00:14:51.520 --> 00:14:52.625
ARUN NAGARAJAN: And what
was the shortcut again?

00:14:52.625 --> 00:14:53.490
It was Alt?

00:14:53.490 --> 00:14:55.180
KALYAN REDDY: So Alt
forward slash.

00:14:55.180 --> 00:14:55.960
ARUN NAGARAJAN: Alt
forward slash.

00:14:55.960 --> 00:14:58.440
And is this one of the ones
we list in the menu?

00:14:58.440 --> 00:14:58.940
KALYAN REDDY: This is.

00:14:58.940 --> 00:15:00.550
So if you go to the Edit menu,
if you ever forget--

00:15:00.550 --> 00:15:01.170
ARUN NAGARAJAN: This is--

00:15:01.170 --> 00:15:02.140
KALYAN REDDY: Word completion.

00:15:02.140 --> 00:15:02.760
ARUN NAGARAJAN: Word
completion.

00:15:02.760 --> 00:15:03.880
KALYAN REDDY: Is what
it is here.

00:15:03.880 --> 00:15:04.390
ARUN NAGARAJAN: All right.

00:15:04.390 --> 00:15:07.620
And Content assist is our
content, our APIs.

00:15:07.620 --> 00:15:08.660
KALYAN REDDY: Exactly.

00:15:08.660 --> 00:15:11.240
And another really, really handy
one is let's say you

00:15:11.240 --> 00:15:15.242
want to quickly comment a line
of code, you can do Control

00:15:15.242 --> 00:15:18.880
forward slash, and then you can
automatically toggle the

00:15:18.880 --> 00:15:20.230
comments on and off.

00:15:20.230 --> 00:15:21.880
And this is also listed
in the Edit menu

00:15:21.880 --> 00:15:23.700
here in Toggle comment.

00:15:23.700 --> 00:15:25.210
ARUN NAGARAJAN: And where does
your cursor have to be,

00:15:25.210 --> 00:15:26.070
anywhere in that line?

00:15:26.070 --> 00:15:27.330
KALYAN REDDY: Anywhere
on the line is fine.

00:15:27.330 --> 00:15:29.560
And if you have a multiple line,
selection like I have

00:15:29.560 --> 00:15:31.590
three lines here, you can do
the same comment all of the

00:15:31.590 --> 00:15:33.080
lines are--

00:15:33.080 --> 00:15:33.360
ARUN NAGARAJAN: That's
a good trick.

00:15:33.360 --> 00:15:34.150
KALYAN REDDY: --done.

00:15:34.150 --> 00:15:34.960
Yeah.

00:15:34.960 --> 00:15:36.530
ARUN NAGARAJAN: That's even
faster than using the

00:15:36.530 --> 00:15:38.065
multi-line comments, I think.

00:15:38.065 --> 00:15:39.110
Because you have to
move your mouse.

00:15:39.110 --> 00:15:39.380
KALYAN REDDY: Yeah.

00:15:39.380 --> 00:15:39.650
Exactly.

00:15:39.650 --> 00:15:42.540
You have to create new line up
there, down there slash star.

00:15:42.540 --> 00:15:42.910
ARUN NAGARAJAN: No wonder
you're always

00:15:42.910 --> 00:15:44.226
typing faster than me.

00:15:44.226 --> 00:15:45.000
KALYAN REDDY: Exactly.

00:15:45.000 --> 00:15:46.710
You've got to know all
these things, man.

00:15:46.710 --> 00:15:49.750
Let's see, another feature
that's very common to other

00:15:49.750 --> 00:15:51.760
IDEs is the undo/redo
functionality.

00:15:51.760 --> 00:15:55.530
So if you do Command-Z on
the Mac, you can undo.

00:15:55.530 --> 00:15:58.730
Command-Y is redo.

00:15:58.730 --> 00:16:00.590
Control-Z, Control-Y
I believe--

00:16:00.590 --> 00:16:02.180
ARUN NAGARAJAN: All of this
works on a Chromebook.

00:16:02.180 --> 00:16:02.470
KALYAN REDDY: Yeah.

00:16:02.470 --> 00:16:04.090
It works on everything.

00:16:04.090 --> 00:16:06.650
The actual shortcut,
the modifier

00:16:06.650 --> 00:16:07.510
key might be different.

00:16:07.510 --> 00:16:10.340
It's Command on a Mac, but if
you go to the Edit menu, you

00:16:10.340 --> 00:16:10.870
can see what--

00:16:10.870 --> 00:16:11.160
ARUN NAGARAJAN: Will show
the correct one.

00:16:11.160 --> 00:16:12.055
KALYAN REDDY: --the actual
modifier is.

00:16:12.055 --> 00:16:12.440
Right.

00:16:12.440 --> 00:16:15.010
So it'll be adjusted
for your system.

00:16:15.010 --> 00:16:19.360
And also, this, like Arun
said, is meant to be

00:16:19.360 --> 00:16:21.130
lightweight so we can
write some great

00:16:21.130 --> 00:16:22.540
scripts really quickly.

00:16:22.540 --> 00:16:24.820
But we do want to add some
functionality that's missing

00:16:24.820 --> 00:16:29.060
from other IDEs, like Eclipse,
that you might use, or even

00:16:29.060 --> 00:16:31.200
more older ones like Vim.

00:16:31.200 --> 00:16:33.380
I don't want to get there.

00:16:33.380 --> 00:16:34.180
I love using Vim.

00:16:34.180 --> 00:16:37.180
So you know, if there's some
functionality that you want us

00:16:37.180 --> 00:16:40.220
to add like some new keyboard
shortcuts, then please put a

00:16:40.220 --> 00:16:43.080
feature request on our issue
tracker, and we'll enter that

00:16:43.080 --> 00:16:43.650
in the system.

00:16:43.650 --> 00:16:46.370
And if enough people like
it, we'll definitely be

00:16:46.370 --> 00:16:47.800
introducing that into
the Script Editor.

00:16:47.800 --> 00:16:48.950
ARUN NAGARAJAN: Great.

00:16:48.950 --> 00:16:49.910
Thank you very much for that.

00:16:49.910 --> 00:16:54.830
So now, what we've done so far
is given you tips, tricks to

00:16:54.830 --> 00:16:56.930
allow you to write your
code really fast.

00:16:56.930 --> 00:17:00.220
Now, the time has come to run
the script and find out what

00:17:00.220 --> 00:17:01.670
you've screwed up, right?

00:17:01.670 --> 00:17:03.790
So that's where this feature
called the debugger comes in.

00:17:03.790 --> 00:17:06.640
So debugger is a concept that
a lot of you that have

00:17:06.640 --> 00:17:09.369
programmed on other platforms
would be very familiar with.

00:17:09.369 --> 00:17:12.034
It's where you could run your
code and pause the execution,

00:17:12.034 --> 00:17:15.069
and then inspect the state
and variables, and then

00:17:15.069 --> 00:17:17.849
potentially run it a little bit
more, pause it again, and

00:17:17.849 --> 00:17:18.760
compare things.

00:17:18.760 --> 00:17:21.480
So the debugger gives you this
deep insight into the

00:17:21.480 --> 00:17:22.839
execution of the program.

00:17:22.839 --> 00:17:25.540
And even though Google Apps
Script is a cloud-based,

00:17:25.540 --> 00:17:28.079
scripting language, we've
given you the debugger

00:17:28.079 --> 00:17:29.940
capability that runs
within the browser.

00:17:29.940 --> 00:17:32.450
So that's actually pretty
incredible to see.

00:17:32.450 --> 00:17:34.130
So let's see a quick
demo of this.

00:17:34.130 --> 00:17:37.500
So I'll use the same function
here called the Processinbox,

00:17:37.500 --> 00:17:38.500
which is on a test inbox.

00:17:38.500 --> 00:17:41.500
It's just going to iterate
through all my inbox threads

00:17:41.500 --> 00:17:44.540
and log the messages, the
first message subject.

00:17:44.540 --> 00:17:48.820
So let's say what if I want
to ensure that this--

00:17:48.820 --> 00:17:52.100
let's say something is breaking
at about the 10th

00:17:52.100 --> 00:17:54.230
thread or something
along those lines.

00:17:54.230 --> 00:17:57.470
What I can do instead of hitting
the Run command, which

00:17:57.470 --> 00:18:01.370
Kalyan was using Command-R, I
could hit this little bug

00:18:01.370 --> 00:18:04.450
symbol, the universal
symbol for bug.

00:18:04.450 --> 00:18:06.750
I'm sure like in the next 10
years, this is going to get

00:18:06.750 --> 00:18:10.380
archaic, but we're still using
floppy disks and bugs for

00:18:10.380 --> 00:18:13.420
important metaphors,
so that's great.

00:18:13.420 --> 00:18:15.190
So I'll hit the Debug button.

00:18:15.190 --> 00:18:17.900
And what happens now is, instead
of the function just

00:18:17.900 --> 00:18:21.500
running in the regular mode, it
runs it in a special mode,

00:18:21.500 --> 00:18:23.030
which is the Debug mode.

00:18:23.030 --> 00:18:25.840
So what happened here, and you
can see that the line that I

00:18:25.840 --> 00:18:30.140
clicked on was highlighted,
and it pauses execution.

00:18:30.140 --> 00:18:31.110
I forgot to show you.

00:18:31.110 --> 00:18:34.640
You can just hit the gutter on
the left-hand panel, and it

00:18:34.640 --> 00:18:38.470
turns on a red dot next to the
line you want to break on.

00:18:38.470 --> 00:18:40.120
That's the word, break point.

00:18:40.120 --> 00:18:41.640
And there we have it.

00:18:41.640 --> 00:18:44.320
So what it essentially did
here is, it paused the

00:18:44.320 --> 00:18:47.010
execution of the code you
wrote on the Google data

00:18:47.010 --> 00:18:51.050
centers and returned back the
state your application is in.

00:18:51.050 --> 00:18:52.920
So you can see that the
variables that you have here

00:18:52.920 --> 00:18:58.050
are threads, and msg, and i,
which is the incrementer for

00:18:58.050 --> 00:18:59.340
the loop itself.

00:18:59.340 --> 00:19:00.200
So let's just take a look.

00:19:00.200 --> 00:19:04.500
I'm going to hit the
Step Over function,

00:19:04.500 --> 00:19:05.310
which is the continue.

00:19:05.310 --> 00:19:09.660
When I hit that, it's going to
go back and start running the

00:19:09.660 --> 00:19:12.730
loop again, because we are
now in the second item.

00:19:12.730 --> 00:19:14.930
So you can actually kind of walk
through and you watch the

00:19:14.930 --> 00:19:16.700
line of code being
highlighted.

00:19:16.700 --> 00:19:18.220
This is actually pretty
impressive when you think

00:19:18.220 --> 00:19:20.490
about what kind of capability
this gives you.

00:19:20.490 --> 00:19:24.110
So you're able to essentially
run the code interactively

00:19:24.110 --> 00:19:26.090
from the Script Editor itself.

00:19:26.090 --> 00:19:29.610
And it's really nice to be
able to say, OK now, i is

00:19:29.610 --> 00:19:33.340
incrementing appropriately, and
for a complex app, that

00:19:33.340 --> 00:19:36.570
may have multiple call stack
items on the left.

00:19:36.570 --> 00:19:39.430
This becomes really powerful
to observe and inspect.

00:19:39.430 --> 00:19:41.870
KALYAN REDDY: Now, I don't know
if you all caught that at

00:19:41.870 --> 00:19:45.740
home, but you can see here in
the fourth line here that i is

00:19:45.740 --> 00:19:48.390
of type number and then value
is in the third column.

00:19:48.390 --> 00:19:50.540
It was 0 in the first iteration
of the loop, because

00:19:50.540 --> 00:19:54.290
you started it at 0, and then it
became 1 when Arun went to

00:19:54.290 --> 00:19:55.570
the next generation
of the loop.

00:19:55.570 --> 00:19:56.460
ARUN NAGARAJAN: That's right.

00:19:56.460 --> 00:19:58.800
And if you don't want to walk
through every line, you could

00:19:58.800 --> 00:20:01.590
just hit Continue Debugging, and
that will go to the next

00:20:01.590 --> 00:20:03.650
time the break point get hit.

00:20:03.650 --> 00:20:06.120
So it will come back and now you
can see that my message is

00:20:06.120 --> 00:20:08.040
now it says, Add a
profile photo.

00:20:08.040 --> 00:20:10.370
So that's the message
it's picking up.

00:20:10.370 --> 00:20:12.180
And you could also look
at a collection.

00:20:12.180 --> 00:20:16.410
In this case an array has Gmail
thread objects in it.

00:20:16.410 --> 00:20:20.270
You can see that's not very
useful in that hover we have

00:20:20.270 --> 00:20:22.740
here, but those are the things
that you're able to really see

00:20:22.740 --> 00:20:24.060
pretty easily.

00:20:24.060 --> 00:20:26.910
And I end up using this quite
frequently because I think

00:20:26.910 --> 00:20:33.620
this is a lot more powerful
than just logging things.

00:20:33.620 --> 00:20:35.920
This can allow you to take a
look at all the different

00:20:35.920 --> 00:20:37.200
objects in it as well.

00:20:37.200 --> 00:20:40.000
So if you have a string value
that you can really inspect

00:20:40.000 --> 00:20:42.260
that pretty quickly.

00:20:42.260 --> 00:20:42.730
Cool.

00:20:42.730 --> 00:20:45.300
So that's the basics
of the debugger.

00:20:45.300 --> 00:20:48.800
I definitely urge you guys to
take a look at these options

00:20:48.800 --> 00:20:52.100
to stop, and you can actually
dive into a function as well.

00:20:52.100 --> 00:20:53.900
So if you're just making a
function call that you've

00:20:53.900 --> 00:20:57.210
written, you can use this option
which is Step In, to go

00:20:57.210 --> 00:20:59.510
into your custom function.

00:20:59.510 --> 00:21:06.220
And there are some ways to do
the inheritance and all the

00:21:06.220 --> 00:21:08.910
expanded objects in the
collection as well.

00:21:08.910 --> 00:21:12.130
The stopping and pausing,
stopping really just stops

00:21:12.130 --> 00:21:13.710
execution, so now we're done.

00:21:13.710 --> 00:21:15.590
So we just iterated through
two items, and

00:21:15.590 --> 00:21:16.910
we decided to stop.

00:21:16.910 --> 00:21:18.930
So it's a nice way to--

00:21:18.930 --> 00:21:19.930
you can figure it out.

00:21:19.930 --> 00:21:22.550
If you know where the issue
is, you don't need to wait

00:21:22.550 --> 00:21:25.330
till the app finishes for you
to start fixing the bug.

00:21:25.330 --> 00:21:27.420
You can just stop it and
write it right there.

00:21:27.420 --> 00:21:27.730
KALYAN REDDY: Right.

00:21:27.730 --> 00:21:29.990
And sometimes later on
you, might be like

00:21:29.990 --> 00:21:31.430
gmailapp.sendmail.

00:21:31.430 --> 00:21:33.210
If you don't want to run
all of those, you

00:21:33.210 --> 00:21:33.910
can just exit early.

00:21:33.910 --> 00:21:35.020
ARUN NAGARAJAN: Yeah.

00:21:35.020 --> 00:21:36.440
Absolutely.

00:21:36.440 --> 00:21:40.310
And so it's kind of a powerful
tool that we end up using

00:21:40.310 --> 00:21:42.910
quite a bit to troubleshoot
our own code.

00:21:42.910 --> 00:21:46.110
So we hope to have
you guys use it.

00:21:46.110 --> 00:21:47.380
CARRIE ROWE: You guys
don't write code

00:21:47.380 --> 00:21:47.900
perfectly the first time?

00:21:47.900 --> 00:21:48.830
ARUN NAGARAJAN: Unfortunately,
not.

00:21:48.830 --> 00:21:49.570
KALYAN REDDY: I do.

00:21:49.570 --> 00:21:50.050
I don't know about everyone.

00:21:50.050 --> 00:21:53.500
ARUN NAGARAJAN: It's all the
keyboard shortcuts, I assume.

00:21:53.500 --> 00:21:58.620
Now, this is great when, in
fact, you've written an app

00:21:58.620 --> 00:22:01.320
that you are launching and
running for the Script Editor.

00:22:01.320 --> 00:22:03.880
However, there are several
cases where your code is

00:22:03.880 --> 00:22:06.330
invoked asynchronously,
either from an event

00:22:06.330 --> 00:22:07.450
or from a web app.

00:22:07.450 --> 00:22:12.360
So in those scenarios, for the
time being, you can't attach

00:22:12.360 --> 00:22:16.710
to that process and break a
particular line at this point.

00:22:16.710 --> 00:22:19.810
So what you end up needing to
do is you create a little

00:22:19.810 --> 00:22:22.810
wrapper function where you
essentially mock the

00:22:22.810 --> 00:22:23.800
invocation.

00:22:23.800 --> 00:22:27.580
So these mock objects allow you
to control the debugging

00:22:27.580 --> 00:22:29.400
experience like you
would normally.

00:22:29.400 --> 00:22:31.120
So let's take a look at
why you'd want that.

00:22:31.120 --> 00:22:35.792
So for instance, let's say I
have published this web app.

00:22:35.792 --> 00:22:36.820
Go to Manage Versions.

00:22:36.820 --> 00:22:38.690
I already have one, I guess.

00:22:38.690 --> 00:22:41.740
And then I'm going
to say, Deploy.

00:22:41.740 --> 00:22:43.020
Wi-Fi is being a little
slow here.

00:22:43.020 --> 00:22:45.280
We're going to deploy
this version.

00:22:45.280 --> 00:22:48.030
And as you can imagine, there's
a doGet function

00:22:48.030 --> 00:22:53.200
that's just returning a very
simple output that's the

00:22:53.200 --> 00:22:55.770
message for the given index.

00:22:55.770 --> 00:23:00.080
So let's open up a new tab
here, and go there.

00:23:00.080 --> 00:23:03.150
It's probably going to throw
an error of Undefined.

00:23:03.150 --> 00:23:07.715
So I'll say, ?Index
equal to 2.

00:23:07.715 --> 00:23:09.220
KALYAN REDDY: So this is
you passing parameters.

00:23:09.220 --> 00:23:09.820
ARUN NAGARAJAN: Yeah.

00:23:09.820 --> 00:23:13.730
So think of this as a very
simple web app, and I'm

00:23:13.730 --> 00:23:15.170
passing in a parameter.

00:23:15.170 --> 00:23:17.770
And now let's say that, for
instance, something breaks

00:23:17.770 --> 00:23:19.760
when index is 10 again.

00:23:19.760 --> 00:23:21.950
Something is not working
correctly, and we

00:23:21.950 --> 00:23:23.110
want to debug it.

00:23:23.110 --> 00:23:25.590
So in order to debug this when
you come back to the Script

00:23:25.590 --> 00:23:29.760
Editor, the way you were able to
debug doGet function is you

00:23:29.760 --> 00:23:33.050
have to sort of write a wrapper
function from which

00:23:33.050 --> 00:23:37.640
you're launching doGet with the
parameters packaged up as

00:23:37.640 --> 00:23:38.900
an object yourself.

00:23:38.900 --> 00:23:43.770
So it's a bit of a hand-held
process to create that object,

00:23:43.770 --> 00:23:46.600
but it's something that I think
will really help you

00:23:46.600 --> 00:23:49.870
when you understand that, OK,
so it's the same object that

00:23:49.870 --> 00:23:53.060
comes in from the invocation and
the web app in a browser

00:23:53.060 --> 00:23:54.810
or another device.

00:23:54.810 --> 00:23:57.170
So this is what we'll do
instead, and let's say we want

00:23:57.170 --> 00:23:58.680
to debug this.

00:23:58.680 --> 00:24:02.080
I can put a break point now here
for message, and I will

00:24:02.080 --> 00:24:05.420
use testDoGet as
my invocation.

00:24:05.420 --> 00:24:07.120
And when I hit the
Debug sign--

00:24:07.120 --> 00:24:10.010
zoom out a little bit.

00:24:10.010 --> 00:24:11.680
Click on the bug again.

00:24:11.680 --> 00:24:13.190
Resize it appropriately.

00:24:13.190 --> 00:24:16.450
And you can see that now I have
my break point in doGet

00:24:16.450 --> 00:24:18.450
with the appropriate
parameter.

00:24:18.450 --> 00:24:21.500
So that's one of the really nice
ways that you can debug

00:24:21.500 --> 00:24:25.110
even asynchronous invocations by
creating these test harness

00:24:25.110 --> 00:24:28.300
mock functions that allow you
to pretend as if your

00:24:28.300 --> 00:24:29.860
application is being invoked.

00:24:29.860 --> 00:24:31.430
Now, it's not just web apps.

00:24:31.430 --> 00:24:34.720
There's also tons of triggers
and events we expose, things

00:24:34.720 --> 00:24:38.080
like onOpen, onEdit,
even Google Forms.

00:24:38.080 --> 00:24:40.095
We launch a lot more
events now.

00:24:40.095 --> 00:24:40.905
KALYAN REDDY: OnFormSubmit.

00:24:40.905 --> 00:24:42.130
ARUN NAGARAJAN: OnFormSubmit.

00:24:42.130 --> 00:24:42.910
Yep.

00:24:42.910 --> 00:24:45.870
And you can see that this
list is quite large.

00:24:45.870 --> 00:24:48.190
So there's a page in our
documentation for

00:24:48.190 --> 00:24:50.190
understanding events,
and you can see that

00:24:50.190 --> 00:24:51.700
under Events and Triggers.

00:24:51.700 --> 00:24:54.440
And you can see quite a number
of items that we've listed

00:24:54.440 --> 00:24:57.580
there, and we actually document
to you all the

00:24:57.580 --> 00:25:00.930
different object parameters
that will come to you.

00:25:00.930 --> 00:25:04.473
So you can see that if it's a
clock event, you'll get e dot

00:25:04.473 --> 00:25:06.910
x, y, and z, these different
properties.

00:25:06.910 --> 00:25:10.650
So with this knowledge, you
can actually mock your own

00:25:10.650 --> 00:25:12.520
objects just like
I've done here.

00:25:12.520 --> 00:25:16.990
For a web app, it's all
parameters dot x, y, and z.

00:25:16.990 --> 00:25:20.330
For events, it's a bit more
involved, because there's a

00:25:20.330 --> 00:25:22.920
lot more objects of properties
that we give you.

00:25:22.920 --> 00:25:24.090
So that's something
to keep in mind.

00:25:24.090 --> 00:25:26.120
It allows you to debug much
more effectively.

00:25:28.650 --> 00:25:30.490
I think there's a couple of
other things that are

00:25:30.490 --> 00:25:32.350
interesting about
the debugger.

00:25:32.350 --> 00:25:35.080
So the way debuggers work,
essentially, is we paused the

00:25:35.080 --> 00:25:38.800
execution on our side, and we
send down the state of the

00:25:38.800 --> 00:25:40.480
application down
to you, right?

00:25:40.480 --> 00:25:42.340
So that's pretty
powerful stuff.

00:25:42.340 --> 00:25:45.600
There's certain things where
we're unable to just pause

00:25:45.600 --> 00:25:47.570
execution and save state.

00:25:47.570 --> 00:25:49.390
There's a couple of things
that we've documented.

00:25:49.390 --> 00:25:52.750
One of them is if you're
asking for input.

00:25:52.750 --> 00:25:56.300
So if you have Browser.msgBox
or Browser dot--

00:25:56.300 --> 00:25:57.820
I forget the other--

00:25:57.820 --> 00:25:59.220
Inform or whatever the
equivalent is.

00:25:59.220 --> 00:26:01.520
I'll use Auto Complete.

00:26:01.520 --> 00:26:04.400
Browser.msgBox and inputBox,
very useful.

00:26:04.400 --> 00:26:05.060
CARRIE ROWE: Very useful.

00:26:05.060 --> 00:26:05.340
ARUN NAGARAJAN: Yeah.

00:26:05.340 --> 00:26:07.290
Really saves a lot of
room in my head

00:26:07.290 --> 00:26:09.460
memorizing these things.

00:26:09.460 --> 00:26:13.030
So when you have these sort
of user, input-grabbing

00:26:13.030 --> 00:26:16.160
invocations, we're unable to
serialized that state, because

00:26:16.160 --> 00:26:18.510
we can't pick up where we
left off if the user is

00:26:18.510 --> 00:26:19.630
in middle of typing.

00:26:19.630 --> 00:26:22.650
So you will see a message
along the lines of

00:26:22.650 --> 00:26:24.290
continuation is not allowed.

00:26:24.290 --> 00:26:25.080
I forget the exact message.

00:26:25.080 --> 00:26:27.090
KALYAN REDDY: Unable to
serialize continuations.

00:26:27.090 --> 00:26:29.545
ARUN NAGARAJAN: And every now
and then there's someone in

00:26:29.545 --> 00:26:32.210
the issue tracker bringing this
issue back up, but for

00:26:32.210 --> 00:26:35.030
JDBC connections, which are
these persistent database

00:26:35.030 --> 00:26:39.030
connections we make on behalf
of you and for browser UI

00:26:39.030 --> 00:26:43.940
interaction like msgBox and
inputBox, we do not allow

00:26:43.940 --> 00:26:46.946
debugging around those
functions.

00:26:46.946 --> 00:26:49.650
KALYAN REDDY: And in addition
to that, there are certain

00:26:49.650 --> 00:26:51.850
things that you should be able
to debug, and you might still

00:26:51.850 --> 00:26:52.680
be getting this error.

00:26:52.680 --> 00:26:56.980
And that's a bug on our part,
so definitely report those

00:26:56.980 --> 00:26:57.510
kind of things.

00:26:57.510 --> 00:27:00.240
If it's not around the two
that Arun mentioned but

00:27:00.240 --> 00:27:02.380
something different, and you're
still getting that

00:27:02.380 --> 00:27:04.160
unable to serialize
continuation, that weird

00:27:04.160 --> 00:27:07.250
error, then report that to
us, and then we can fix

00:27:07.250 --> 00:27:08.830
that as they come.

00:27:08.830 --> 00:27:10.050
ARUN NAGARAJAN: Sounds good.

00:27:10.050 --> 00:27:11.790
So hopefully, you got a little
sense for what the

00:27:11.790 --> 00:27:12.710
debugger is all about.

00:27:12.710 --> 00:27:15.060
And now Kalyan is going to take
over and talk about some

00:27:15.060 --> 00:27:15.740
other features.

00:27:15.740 --> 00:27:16.580
KALYAN REDDY: All right.

00:27:16.580 --> 00:27:18.770
So logging.

00:27:18.770 --> 00:27:22.560
I briefly touched on this
before, but we'll go into a

00:27:22.560 --> 00:27:24.690
little more detail here.

00:27:24.690 --> 00:27:29.820
So Logger.log is how you
can get to the log.

00:27:29.820 --> 00:27:33.100
And if you want to just try to
random string into your log,

00:27:33.100 --> 00:27:35.520
this is how you do it.

00:27:35.520 --> 00:27:38.990
So you get the string just by
doing-- you're iterating on

00:27:38.990 --> 00:27:42.380
the threads object here which
you get from GmailApp by doing

00:27:42.380 --> 00:27:43.480
inbox threads.

00:27:43.480 --> 00:27:48.440
And you're extracting the first
message subject of this

00:27:48.440 --> 00:27:51.570
particular thread, and that
string you can easily log by

00:27:51.570 --> 00:27:54.350
just going Logger.log
and then message.

00:27:54.350 --> 00:27:59.920
Now, when I run this
Processinbox function here,

00:27:59.920 --> 00:28:02.460
you can see that the log has
a timestamp of when each

00:28:02.460 --> 00:28:05.510
particular entry was written to
the log in addition to the

00:28:05.510 --> 00:28:06.560
actual message.

00:28:06.560 --> 00:28:07.520
So these--

00:28:07.520 --> 00:28:09.780
more information about, blah,
blah, blah, all of this stuff,

00:28:09.780 --> 00:28:12.600
I think this is Arun's
test account.

00:28:12.600 --> 00:28:17.780
Nothing awesome here, but these
are the subjects for all

00:28:17.780 --> 00:28:19.700
of the threads in Arun's
inbox here.

00:28:19.700 --> 00:28:22.200
Very quick way when you're
debugging your script.

00:28:22.200 --> 00:28:24.260
I mean, if you're going to
have users running your

00:28:24.260 --> 00:28:25.650
script, they're not
going to see this.

00:28:25.650 --> 00:28:27.440
No one in the public side
is going to see this,

00:28:27.440 --> 00:28:28.700
but this is for you.

00:28:28.700 --> 00:28:30.720
So if you're developing your
script, you can quickly say,

00:28:30.720 --> 00:28:32.330
hey, what is this returning?

00:28:32.330 --> 00:28:33.800
Let me just log in
and find out.

00:28:33.800 --> 00:28:35.530
ARUN NAGARAJAN: So in a web
app, this is console.log.

00:28:35.530 --> 00:28:36.310
KALYAN REDDY: Yep.

00:28:36.310 --> 00:28:38.590
ARUN NAGARAJAN: And since this
is the server side, we have to

00:28:38.590 --> 00:28:42.010
expose our own logger, which is
what capital L Logger is.

00:28:42.010 --> 00:28:42.940
KALYAN REDDY: Right.

00:28:42.940 --> 00:28:47.710
So actually, it's kind of
hidden, I guess, but you can

00:28:47.710 --> 00:28:51.810
actually log within the doGet
and doPost as well.

00:28:51.810 --> 00:28:54.680
If you're the person that's
executing the web app and

00:28:54.680 --> 00:28:57.380
you're signed in, when you
execute those functions and

00:28:57.380 --> 00:28:59.860
you go back to your Script
Editor and you go into your

00:28:59.860 --> 00:29:02.460
Logger, you'll see the logging
output from there as well.

00:29:02.460 --> 00:29:05.200
You won't see it when other
users run your script, but you

00:29:05.200 --> 00:29:07.150
do when you're developing it.

00:29:07.150 --> 00:29:10.600
It's very handy for like
developing like web apps just

00:29:10.600 --> 00:29:12.660
without going through
all that pain.

00:29:12.660 --> 00:29:16.340
But there's another way to
capture log output, which is

00:29:16.340 --> 00:29:19.180
once you have accumulated some
things within the log, within

00:29:19.180 --> 00:29:22.310
a script execution,
in the Logger,

00:29:22.310 --> 00:29:23.510
there's another method.

00:29:23.510 --> 00:29:26.590
You can do getLog, which returns
to you a string of

00:29:26.590 --> 00:29:28.230
everything that you've
logged to Logger.

00:29:28.230 --> 00:29:28.730
ARUN NAGARAJAN: That's
really cool.

00:29:28.730 --> 00:29:33.880
KALYAN REDDY: So basically, what
you can do is you can do

00:29:33.880 --> 00:29:38.940
GmailApp.sendmail, and you can
just send that as the body,

00:29:38.940 --> 00:29:39.830
the Logger.getLog.

00:29:39.830 --> 00:29:41.790
ARUN NAGARAJAN: So at the
end of an execution--

00:29:41.790 --> 00:29:42.220
KALYAN REDDY: Exactly.

00:29:42.220 --> 00:29:46.490
ARUN NAGARAJAN: Or maybe an
exception try catch all the

00:29:46.490 --> 00:29:48.120
logs so far and send it out?

00:29:48.120 --> 00:29:48.550
KALYAN REDDY: Exactly.

00:29:48.550 --> 00:29:53.050
So a lot of people do things
like open a document and then

00:29:53.050 --> 00:29:55.050
append logs to the
document instead.

00:29:55.050 --> 00:29:57.630
You know that kind of adds a
little bit more latency to

00:29:57.630 --> 00:30:00.970
your script than is
maybe necessary.

00:30:00.970 --> 00:30:03.480
This is a very lightweight way
to, if you're running in the

00:30:03.480 --> 00:30:05.130
Script Editor, you can just
examine the Logger.

00:30:05.130 --> 00:30:08.090
If you're not, then you can
go check your email.

00:30:08.090 --> 00:30:09.690
It gives you more
options there.

00:30:09.690 --> 00:30:12.354
ARUN NAGARAJAN: Cool.

00:30:12.354 --> 00:30:16.940
KALYAN REDDY: And so another
thing that you can do is you

00:30:16.940 --> 00:30:18.630
can do formatting.

00:30:18.630 --> 00:30:21.380
Instead of just having the
simple method where you do

00:30:21.380 --> 00:30:23.440
Logger.log and then pass in
one string, there's an

00:30:23.440 --> 00:30:25.620
overloaded log method.

00:30:25.620 --> 00:30:27.660
And I have that as an
example down here.

00:30:27.660 --> 00:30:33.320
So I have three variables here
that I've poorly named.

00:30:33.320 --> 00:30:34.180
ARUN NAGARAJAN: All
right, man.

00:30:34.180 --> 00:30:35.050
KALYAN REDDY: So here we go.

00:30:35.050 --> 00:30:37.990
So one is just a number, and the
other one is a string, and

00:30:37.990 --> 00:30:41.930
the other one is an object,
which has first and second

00:30:41.930 --> 00:30:44.540
[? keys ?] and then
appropriately has values.

00:30:44.540 --> 00:30:45.850
So I want to log all of these.

00:30:45.850 --> 00:30:50.280
I don't want to do the value
of a, close the quotes plus

00:30:50.280 --> 00:30:53.850
the object plus open quotes
and continue that.

00:30:53.850 --> 00:30:56.690
If you're familiar with other
programming languages, you can

00:30:56.690 --> 00:31:00.690
do syntax like this where you
have one string that's

00:31:00.690 --> 00:31:03.870
unbroken but where you want to
replace certain values of the

00:31:03.870 --> 00:31:09.790
string with variables, you can
do this %s syntax where it

00:31:09.790 --> 00:31:13.420
actually takes that variable's
value and puts it into the

00:31:13.420 --> 00:31:15.140
string when it's about
to write the string.

00:31:15.140 --> 00:31:17.860
So here we have the same
Logger.log as before, but

00:31:17.860 --> 00:31:21.670
we've defined this string, and
we're giving the parameters of

00:31:21.670 --> 00:31:21.950
the string.

00:31:21.950 --> 00:31:24.170
So I have three %s's here.

00:31:24.170 --> 00:31:28.200
And these correspond
sequentially to a, b, and c.

00:31:28.200 --> 00:31:32.550
You can provide a variable
number of arguments here, and

00:31:32.550 --> 00:31:36.140
you can likewise add in more
%s's into your string.

00:31:36.140 --> 00:31:37.920
A %s means formatted
as a string.

00:31:37.920 --> 00:31:39.030
So it will convert
this object.

00:31:39.030 --> 00:31:40.650
ARUN NAGARAJAN: It's
like printf in C++.

00:31:40.650 --> 00:31:42.560
KALYAN REDDY: I'ts like printf,
yeah, or sprintf or

00:31:42.560 --> 00:31:43.250
all the other variants.

00:31:43.250 --> 00:31:45.620
ARUN NAGARAJAN: In fact, we have
a utility style format

00:31:45.620 --> 00:31:47.850
string as well that we've
recently added--

00:31:47.850 --> 00:31:48.140
KALYAN REDDY: Right.

00:31:48.140 --> 00:31:49.110
ARUN NAGARAJAN: --which
has very similar--

00:31:49.110 --> 00:31:50.140
KALYAN REDDY: --which mirrors
the same syntax.

00:31:50.140 --> 00:31:51.225
ARUN NAGARAJAN: Very cool.

00:31:51.225 --> 00:31:51.970
KALYAN REDDY: So yeah.

00:31:51.970 --> 00:31:54.260
So let me just run this real
quick and show you an example

00:31:54.260 --> 00:31:55.790
of that as well.

00:31:55.790 --> 00:31:57.995
So saving code.

00:31:57.995 --> 00:32:00.386
ARUN NAGARAJAN: Can you use
your keyboard shortcuts?

00:32:00.386 --> 00:32:02.280
KALYAN REDDY: I should.

00:32:02.280 --> 00:32:05.060
So anyway, this is the
line that we logged.

00:32:05.060 --> 00:32:08.210
The value of a is 1, b is 2,
and then c, as you can see,

00:32:08.210 --> 00:32:09.250
was an object.

00:32:09.250 --> 00:32:12.560
But it turned that object into
a string and then enumerated

00:32:12.560 --> 00:32:14.860
all of its keys and
printed it nicely.

00:32:14.860 --> 00:32:17.068
ARUN NAGARAJAN: Very cool.

00:32:17.068 --> 00:32:18.318
KALYAN REDDY: All right.

00:32:20.570 --> 00:32:22.740
Oh, something I almost
forgot to mention.

00:32:22.740 --> 00:32:24.620
The execution transcript.

00:32:24.620 --> 00:32:29.260
So this is a feature that we
added relatively recently.

00:32:29.260 --> 00:32:32.610
But people have been asking
about how do I know how long a

00:32:32.610 --> 00:32:36.430
particular script takes because
I might be getting

00:32:36.430 --> 00:32:37.470
time out errors.

00:32:37.470 --> 00:32:39.670
I want to know how I can make
my code more efficient.

00:32:39.670 --> 00:32:40.360
Where are the problems?

00:32:40.360 --> 00:32:41.610
Where are the bottlenecks?

00:32:41.610 --> 00:32:43.610
So a great way to find that
out is to just look at the

00:32:43.610 --> 00:32:44.670
execution transcript.

00:32:44.670 --> 00:32:46.640
Before you would have to do
like, I don't know, log a

00:32:46.640 --> 00:32:50.870
timestamp there, a timestamp
there, something more complex.

00:32:50.870 --> 00:32:53.100
But here let's say we're
running something like

00:32:53.100 --> 00:32:54.660
Processinbox.

00:32:54.660 --> 00:32:56.950
We've run the function, and
we want to know what's

00:32:56.950 --> 00:32:57.830
taking a long time?

00:32:57.830 --> 00:32:59.280
What did my code actually do?

00:32:59.280 --> 00:33:02.770
You can go to View and Execution
Transcript here, and

00:33:02.770 --> 00:33:05.950
so this shows you exactly
all of the calls

00:33:05.950 --> 00:33:07.350
that your code did.

00:33:07.350 --> 00:33:11.420
And as you can see here, you do
getInboxThreads, and this

00:33:11.420 --> 00:33:12.610
is within the loop, right?

00:33:12.610 --> 00:33:14.960
So you iterate through the
first thread and call

00:33:14.960 --> 00:33:17.890
getFirstMessageSubject, and
then you log something.

00:33:17.890 --> 00:33:21.220
And then you get it for the
second thread, and then you

00:33:21.220 --> 00:33:22.510
log something else.

00:33:22.510 --> 00:33:25.120
And you can see that it actually
shows what would be

00:33:25.120 --> 00:33:27.030
actually logged instead
of saying Logger

00:33:27.030 --> 00:33:27.880
has been called again.

00:33:27.880 --> 00:33:29.450
ARUN NAGARAJAN: So you can see
that the most expensive call

00:33:29.450 --> 00:33:30.400
here was the very first call.

00:33:30.400 --> 00:33:30.760
KALYAN REDDY: Right.

00:33:30.760 --> 00:33:34.470
So just calling that
API and getting it

00:33:34.470 --> 00:33:35.800
back took one second.

00:33:35.800 --> 00:33:38.290
And then from that point on,
you have the object, and

00:33:38.290 --> 00:33:40.850
you're not making any more
calls, so it's nearly

00:33:40.850 --> 00:33:41.200
instantaneous.

00:33:41.200 --> 00:33:42.700
And you don't have to
worry about it.

00:33:42.700 --> 00:33:45.260
And so this logging
took a fraction of

00:33:45.260 --> 00:33:47.100
a second, et cetera.

00:33:47.100 --> 00:33:49.660
But if you had more
function calls--

00:33:49.660 --> 00:33:51.680
I'm not sure if you have a good
example ready to go here.

00:33:51.680 --> 00:33:54.070
But if you did have more complex
calls, you can say

00:33:54.070 --> 00:33:57.960
like DriveApp.getAllFiles and
then enumerate through each

00:33:57.960 --> 00:34:00.975
file, might be more
expensive than--

00:34:00.975 --> 00:34:03.980
A good example is when you do
getInboxThreads, you get all

00:34:03.980 --> 00:34:05.330
the threads in your inbox.

00:34:05.330 --> 00:34:09.560
If you were to do
threadsi.getMessage dot and

00:34:09.560 --> 00:34:12.949
then do operations on that,
basically, getMessage per each

00:34:12.949 --> 00:34:16.810
thread, that takes much longer
than doing getInboxThreads,

00:34:16.810 --> 00:34:18.710
getMessagesForThreads.

00:34:18.710 --> 00:34:21.000
There's another method that
takes an array of threads and

00:34:21.000 --> 00:34:22.289
returns a 2D array

00:34:22.289 --> 00:34:23.560
ARUN NAGARAJAN: Like
a batching option.

00:34:23.560 --> 00:34:23.870
KALYAN REDDY: Right.

00:34:23.870 --> 00:34:24.310
Exactly.

00:34:24.310 --> 00:34:25.750
ARUN NAGARAJAN: So it's like
with spreadsheets, it's

00:34:25.750 --> 00:34:26.500
something you should
look into.

00:34:26.500 --> 00:34:26.860
KALYAN REDDY: Right.

00:34:26.860 --> 00:34:28.936
So execution transcript is a
great way to analyze if a

00:34:28.936 --> 00:34:31.075
command is taking way too long,
and how to improve it.

00:34:31.075 --> 00:34:32.921
ARUN NAGARAJAN: Cool.

00:34:32.921 --> 00:34:37.510
KALYAN REDDY: Oh, one more thing
is Find and Replace.

00:34:37.510 --> 00:34:38.549
within your script.

00:34:38.549 --> 00:34:39.730
ARUN NAGARAJAN: Very
popular request.

00:34:39.730 --> 00:34:39.920
KALYAN REDDY: A very
popular request.

00:34:39.920 --> 00:34:40.330
Right.

00:34:40.330 --> 00:34:42.760
So now I already have
threads ready to go.

00:34:42.760 --> 00:34:45.830
There's only one thread,
so let's look for a

00:34:45.830 --> 00:34:47.330
var for some reason.

00:34:47.330 --> 00:34:49.150
So then you can quickly go
in and iterate through.

00:34:49.150 --> 00:34:50.940
ARUN NAGARAJAN: So it actually
moves around this focus.

00:34:50.940 --> 00:34:51.610
Very cool.

00:34:51.610 --> 00:34:54.770
KALYAN REDDY: And you can
actually drag this dialogue

00:34:54.770 --> 00:34:57.280
around just to see where
in your script it is.

00:34:57.280 --> 00:34:59.830
Find and Replace, obviously,
it's very similar to other

00:34:59.830 --> 00:35:01.990
Find and Replace functionalities
in other IDEs.

00:35:01.990 --> 00:35:04.150
ARUN NAGARAJAN: And you have
multiple files, that actually

00:35:04.150 --> 00:35:05.830
lists those options
here as well.

00:35:05.830 --> 00:35:08.420
So you can see it makes
re-factoring and other cleanup

00:35:08.420 --> 00:35:09.360
options pretty straightforward.

00:35:09.360 --> 00:35:09.965
KALYAN REDDY: Right.

00:35:09.965 --> 00:35:10.480
ARUN NAGARAJAN: All right.

00:35:10.480 --> 00:35:12.060
So we're running short
on time here.

00:35:12.060 --> 00:35:13.770
I'll show you a couple of other
quick things that I

00:35:13.770 --> 00:35:16.370
think are really important
around libraries.

00:35:16.370 --> 00:35:19.830
I think libraries are a really
nice way to organize your

00:35:19.830 --> 00:35:23.300
code, share code across
different projects.

00:35:23.300 --> 00:35:26.310
In fact, just recently, our
colleague Eric Koleda, he

00:35:26.310 --> 00:35:28.420
released the library that
he put together based on

00:35:28.420 --> 00:35:31.180
Moment.js, which is an open
source date parsing library

00:35:31.180 --> 00:35:34.270
that is very popular with
JavaScript developers.

00:35:34.270 --> 00:35:37.380
And so let's just take a look
at his Google+ post.

00:35:37.380 --> 00:35:41.010
Now, he talked about here's a
library that he shared, and he

00:35:41.010 --> 00:35:43.920
gave us what's called
the project key.

00:35:43.920 --> 00:35:45.970
So this is how libraries
are brought in.

00:35:45.970 --> 00:35:49.000
So you can find your own project
key by going to File,

00:35:49.000 --> 00:35:50.320
Project Properties.

00:35:50.320 --> 00:35:53.550
It's tucked away here, but if
you want to bring in another

00:35:53.550 --> 00:35:56.070
project into your project as
a library, you can go to

00:35:56.070 --> 00:35:59.270
Resources, Manage Libraries.

00:35:59.270 --> 00:36:05.340
And let's go copy this ID, and
paste this in here under Find

00:36:05.340 --> 00:36:08.190
a Library, and hit Select.

00:36:08.190 --> 00:36:11.400
And then it brought in Moment
as the title of the project,

00:36:11.400 --> 00:36:13.780
and then identifies what
we want it to auto

00:36:13.780 --> 00:36:14.610
complete off of.

00:36:14.610 --> 00:36:16.480
So that's sort of the
name space for

00:36:16.480 --> 00:36:17.870
our particular project.

00:36:17.870 --> 00:36:20.270
And I'll just pick the static
version for the time being,

00:36:20.270 --> 00:36:21.820
and I'll hit Save.

00:36:21.820 --> 00:36:24.410
The Development mode, we'll talk
about at a separate time.

00:36:24.410 --> 00:36:26.935
For now, we'll just keep
it as a static version.

00:36:26.935 --> 00:36:28.300
I'll hit Save.

00:36:28.300 --> 00:36:31.390
So now, I get a nice message
saying it's been updated, and

00:36:31.390 --> 00:36:35.740
what I can do now is type in
moment dot and I get auto

00:36:35.740 --> 00:36:38.850
complete within the library that
Eric has provided for me,

00:36:38.850 --> 00:36:42.550
which is really nice to not just
be using auto complete

00:36:42.550 --> 00:36:43.830
from our APIs.

00:36:43.830 --> 00:36:45.180
You can actually get
auto complete on

00:36:45.180 --> 00:36:46.640
your own APIs as well.

00:36:46.640 --> 00:36:50.730
So libraries are a great way
to share and reuse code.

00:36:50.730 --> 00:36:52.800
A couple of other things that
I think are really important

00:36:52.800 --> 00:36:54.630
to point out are--

00:36:54.630 --> 00:36:56.890
you saw this very quickly when
I went into the project

00:36:56.890 --> 00:36:57.810
properties--

00:36:57.810 --> 00:37:00.610
is the concept of user
properties and project

00:37:00.610 --> 00:37:01.630
properties.

00:37:01.630 --> 00:37:05.380
So user properties are
essentially name value pairs

00:37:05.380 --> 00:37:08.140
that are sort of like cookies in
a web browser, if you will.

00:37:08.140 --> 00:37:11.160
You can leave that as an
API for it as well.

00:37:11.160 --> 00:37:12.480
There's a UI for it.

00:37:12.480 --> 00:37:17.700
You can just say, favorite
color, and you could say

00:37:17.700 --> 00:37:18.660
something like blue.

00:37:18.660 --> 00:37:21.240
And the next time you come and
run the script for this user,

00:37:21.240 --> 00:37:23.550
you can say, what did
I say for you as

00:37:23.550 --> 00:37:24.490
your favorite color?

00:37:24.490 --> 00:37:28.190
And this gives you that
little storage space.

00:37:28.190 --> 00:37:32.510
And project properties are
stored and shared across all

00:37:32.510 --> 00:37:33.410
users essentially.

00:37:33.410 --> 00:37:35.880
It's the project-level setting,
and user properties

00:37:35.880 --> 00:37:37.540
are shared across
all projects.

00:37:37.540 --> 00:37:39.575
So if you have multiple
projects, and they're using

00:37:39.575 --> 00:37:43.350
the same user property key,
you'll get the same value.

00:37:43.350 --> 00:37:45.990
So that's pretty useful a lot
of times to write sort of

00:37:45.990 --> 00:37:48.110
personalized content,
so you remember what

00:37:48.110 --> 00:37:49.340
you did for the user.

00:37:49.340 --> 00:37:52.960
And here's the APIs for it, user
properties dot, and you

00:37:52.960 --> 00:37:53.720
get the auto complete.

00:37:53.720 --> 00:37:56.690
So it's pretty powerful
in that regard.

00:37:56.690 --> 00:37:58.470
So I think I covered everything
that I want to.

00:37:58.470 --> 00:38:00.930
Let me look at my cheat sheet
really quickly here, and we're

00:38:00.930 --> 00:38:02.400
running out of time anyway.

00:38:02.400 --> 00:38:05.880
But hopefully, you've learned a
lot of really useful tricks.

00:38:05.880 --> 00:38:06.790
Carrie, did you learn
anything?

00:38:06.790 --> 00:38:08.350
CARRIE ROWE: I definitely
learned a ton.

00:38:08.350 --> 00:38:09.360
ARUN NAGARAJAN: You're going
to go back to Mountain View

00:38:09.360 --> 00:38:10.860
and write your first
app script?

00:38:10.860 --> 00:38:13.210
CARRIE ROWE: This will be great
for all of my personal

00:38:13.210 --> 00:38:14.240
training on app scripts.

00:38:14.240 --> 00:38:14.870
ARUN NAGARAJAN: That's right.

00:38:14.870 --> 00:38:17.132
CARRIE ROWE: And I love
keyboard shortcuts.

00:38:17.132 --> 00:38:17.840
KALYAN REDDY: Thanks.

00:38:17.840 --> 00:38:18.205
Exactly.

00:38:18.205 --> 00:38:21.130
ARUN NAGARAJAN: Yeah,
that's for Kalyan.

00:38:21.130 --> 00:38:25.910
So we hope that you've learned
more tricks around how you can

00:38:25.910 --> 00:38:28.010
be more productive and use
some of the features that

00:38:28.010 --> 00:38:30.680
we've had in the product for
some that we released this

00:38:30.680 --> 00:38:32.480
year, some that's been
around for a while.

00:38:32.480 --> 00:38:35.620
And we hope to keep improving
this experience.

00:38:35.620 --> 00:38:38.020
Let us know your feedback,
and thank you

00:38:38.020 --> 00:38:39.110
very much for joining.

00:38:39.110 --> 00:38:40.080
KALYAN REDDY: Thank you.

00:38:40.080 --> 00:38:40.650
CARRIE ROWE: Thanks,
everybody.

00:38:40.650 --> 00:38:41.900
Bye.

00:38:46.350 --> 00:39:32.985
[MUSIC PLAYING]

