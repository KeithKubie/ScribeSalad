WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
[Evans] Let's test our new hash function, see if it does better than the bad string hash function

00:00:04.000 --> 00:00:06.000
we defined earlier.

00:00:06.000 --> 00:00:08.000
We're going to use the same test&lt;u&gt;hash&lt;u&gt;function we defined before&lt;/u&gt;&lt;/u&gt;

00:00:08.000 --> 00:00:14.000
that takes the function as input so we can pass in either the original bad string hash function

00:00:14.000 --> 00:00:18.000
or the new hash&lt;u&gt;string function that we hope will work better,&lt;/u&gt;

00:00:18.000 --> 00:00:22.000
a list of keys, and the size, computing the hash value for each key

00:00:22.000 --> 00:00:24.000
and records how many end up in each position.

00:00:24.000 --> 00:00:26.000
So let's try that again.

00:00:26.000 --> 00:00:30.000
We'll use the same example we had before, using the words from Sherlock Holmes.

00:00:30.000 --> 00:00:34.000
We'll initialize words as all the words in the page

00:00:34.000 --> 00:00:38.000
that is The Adventures of Sherlock Holmes that we load from the Web.

00:00:38.000 --> 00:00:43.000
First we'll try this again with the old hash function, the bad string hash,

00:00:43.000 --> 00:00:45.000
and obtain the counts.

00:00:45.000 --> 00:00:49.000
Let's print those out. Remember what those look like.

00:00:49.000 --> 00:00:51.000
It's a pretty bad distribution, as we saw before,

00:00:51.000 --> 00:00:57.000
ranging from 725 all the way up to over 2000 in 1 bucket.

00:00:57.000 --> 00:01:01.000
Now let's try it with the new hash function.

00:01:01.000 --> 00:01:06.000
Instead of bad&lt;u&gt;hash&lt;u&gt;string, we'll pass in plain hash&lt;u&gt;string.&lt;/u&gt;&lt;/u&gt;&lt;/u&gt;

00:01:06.000 --> 00:01:09.000
We're using the same words, the same number of buckets,

00:01:09.000 --> 00:01:11.000
and we'll see the distribution now.

00:01:11.000 --> 00:01:13.000
It looks a lot better.

00:01:13.000 --> 00:01:15.000
There's no values under 1000 now.

00:01:15.000 --> 00:01:22.000
There's no values over-- The highest one would be 1363 in the first bucket.

00:01:22.000 --> 00:01:24.000
So let's look at that graphically.

00:01:24.000 --> 00:01:27.000
Here's what we had before with the bad&lt;u&gt;hash&lt;u&gt;string function.&lt;/u&gt;&lt;/u&gt;

00:01:27.000 --> 00:01:29.000
We can see the size of the buckets varies a great deal

00:01:29.000 --> 00:01:33.000
and we have the red and blue bars showing some that are too popular,

00:01:33.000 --> 00:01:35.000
some that are not popular enough.

00:01:35.000 --> 00:01:38.000
With the new hash function we have much less variance.

00:01:38.000 --> 00:01:43.000
Still not perfect. We'd like to have all the bars really be as close to the same as possible.

00:01:43.000 --> 00:01:46.000
But it's really close. So this is working pretty well.

00:01:46.000 --> 00:01:49.000
The other thing we can try is having more buckets. Let's try this.

00:01:49.000 --> 00:01:54.000
Now we're doing the same thing but this time with 100 buckets instead of 12 buckets.

00:01:54.000 --> 00:01:56.000
We can print that out.

00:01:56.000 --> 00:01:59.000
And so we see the results when we have 100 buckets are pretty good

00:01:59.000 --> 00:02:01.000
but certainly not perfect.

00:02:01.000 --> 00:02:04.000
We have buckets as small as this one that has 104

00:02:04.000 --> 00:02:09.000
and as large as this one that has 197, so almost twice the size of the smallest bucket.

00:02:09.000 --> 00:02:12.000
It's certainly a hard problem to build a better hash function.

00:02:12.000 --> 00:02:15.000
People put a lot of effort into building good hash functions.

00:02:15.000 --> 00:02:21.000
As your tables get larger, it's very important to have the hash function be efficient.

00:02:21.000 --> 00:02:24.000
Our hash&lt;u&gt;string function is not that great because it does take a long time to execute.&lt;/u&gt;

00:02:24.000 --> 00:02:29.000
If the string gets longer, we have to go through that loop once for each character.

00:02:29.000 --> 00:02:31.000
So there are better hash functions available.

00:02:31.000 --> 00:02:33.000
We're not going to look at those in more detail now,

00:02:33.000 --> 00:02:35.000
but there will be some links on the website to documents

00:02:35.000 --> 00:02:38.000
about more interesting hash functions.

00:02:38.000 --> 00:02:40.000
This is going to work well enough for us, though.

00:02:40.000 --> 00:02:43.000
So before we go on to actually implementing in the hash table

00:02:43.000 --> 00:02:46.000
I'm going to have 1 quiz to make sure that you understand

00:02:46.000 --> 99:59:59.000
why this is so much better than the original index.

