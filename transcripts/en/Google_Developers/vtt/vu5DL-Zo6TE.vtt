WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:58.383
[MUSIC PLAYING]

00:00:58.383 --> 00:00:59.490
BRIAN DORSEY: Hello,
everybody.

00:00:59.490 --> 00:01:01.350
Thank you for joining
us here today.

00:01:01.350 --> 00:01:05.360
We have two engineers from NuoDB
who are going to share

00:01:05.360 --> 00:01:09.500
their elastic, scalable SQL
database built for the cloud

00:01:09.500 --> 00:01:11.670
and how it runs on Google
Compute Engine.

00:01:11.670 --> 00:01:14.660
So to quickly introduce myself,
I'm Brian Dorsey.

00:01:14.660 --> 00:01:18.270
I'm a developer engineer on
Google Compute Engine.

00:01:18.270 --> 00:01:19.610
SETH PROCTOR: I'm
Seth Proctor.

00:01:19.610 --> 00:01:22.462
I'm the core engineer and
architect on NuoDB.

00:01:22.462 --> 00:01:24.750
TOMMY REILLY: And my name is
Tommy Reilly, and I'm also an

00:01:24.750 --> 00:01:26.445
engineer on the NuoDB product.

00:01:26.445 --> 00:01:27.890
BRIAN DORSEY: Fantastic.

00:01:27.890 --> 00:01:28.590
Thank you for coming
out, guys.

00:01:28.590 --> 00:01:29.500
SETH PROCTOR: Thanks
for having us here.

00:01:29.500 --> 00:01:30.370
BRIAN DORSEY: I think
we're going to

00:01:30.370 --> 00:01:32.130
jump straight to demo.

00:01:32.130 --> 00:01:33.050
SETH PROCTOR: Sweet.

00:01:33.050 --> 00:01:33.280
BRIAN DORSEY: Oh,
no, we're not.

00:01:33.280 --> 00:01:35.250
We're going to jump
straight to NuoDB.

00:01:35.250 --> 00:01:36.360
What is NuoDB?

00:01:36.360 --> 00:01:39.495
SETH PROCTOR: NuoDB is a brand
new relational database that

00:01:39.495 --> 00:01:41.890
is designed to be cloud scale.

00:01:41.890 --> 00:01:45.050
And I think most people know
what we mean when we say it's

00:01:45.050 --> 00:01:46.180
a relational database.

00:01:46.180 --> 00:01:47.470
It's something that is ACID.

00:01:47.470 --> 00:01:49.710
It's something that
speaks SQL.

00:01:49.710 --> 00:01:52.250
It has JDBC and ODBC drivers.

00:01:52.250 --> 00:01:54.740
It works with the standard
ecosystem of tools that you

00:01:54.740 --> 00:01:56.750
expect to see out there.

00:01:56.750 --> 00:01:59.270
It's the cloud-scale part,
obviously, that's interesting

00:01:59.270 --> 00:01:59.780
and exciting.

00:01:59.780 --> 00:02:00.910
And that's why we're
here today.

00:02:00.910 --> 00:02:03.810
And cloud scale can mean many
different things to many

00:02:03.810 --> 00:02:05.100
different people.

00:02:05.100 --> 00:02:08.120
We're going to show a couple
specific pieces of that today.

00:02:08.120 --> 00:02:10.830
And what we're really going
to show is that we are a

00:02:10.830 --> 00:02:14.380
relational database that can
scale out the way people want

00:02:14.380 --> 00:02:16.100
to scale out infrastructure.

00:02:16.100 --> 00:02:18.920
So you can start developing on a
laptop, and as you need more

00:02:18.920 --> 00:02:21.020
resources, you can add
a few more machines.

00:02:21.020 --> 00:02:23.250
And then obviously, as you need
more resources, you can

00:02:23.250 --> 00:02:26.020
do something like take it Google
Compute Engine and

00:02:26.020 --> 00:02:27.340
really scale massively.

00:02:27.340 --> 00:02:30.470
And it's designed to do all the
other things you want in a

00:02:30.470 --> 00:02:33.110
cloud-scale environment, in
terms of security, in terms of

00:02:33.110 --> 00:02:36.920
resource management, in terms of
ease of use, multi-tenancy,

00:02:36.920 --> 00:02:38.720
all kinds of other great
features that you really want

00:02:38.720 --> 00:02:40.196
in a cloud.

00:02:40.196 --> 00:02:43.380
BRIAN DORSEY: And to be clear,
it's a real SQL database.

00:02:43.380 --> 00:02:44.370
SETH PROCTOR: It's a
real SQL database.

00:02:44.370 --> 00:02:46.310
And we'll talk about that later,
but yeah, it's a true

00:02:46.310 --> 00:02:46.790
SQL database.

00:02:46.790 --> 00:02:51.630
But it really scales the way
no SQL-- or sharded systems

00:02:51.630 --> 00:02:53.910
work, but with no sharding,
no partitioning.

00:02:53.910 --> 00:02:54.800
Very easy to work with.

00:02:54.800 --> 00:02:56.380
We're pretty excited about it.

00:02:56.380 --> 00:02:57.015
We think it's pretty cool.

00:02:57.015 --> 00:02:58.040
TOMMY REILLY: 100% ACID.

00:02:58.040 --> 00:02:58.920
BRIAN DORSEY: Fantastic.

00:02:58.920 --> 00:03:00.190
Well, let's see what
that looks like.

00:03:00.190 --> 00:03:00.660
TOMMY REILLY: All right.

00:03:00.660 --> 00:03:01.420
Let's see what this
looks like.

00:03:01.420 --> 00:03:04.320
First, Seth is going to unlock
the screen for us.

00:03:04.320 --> 00:03:06.640
Thank you, Seth.

00:03:06.640 --> 00:03:10.450
And you should be looking at
the YCSB demonstrator that

00:03:10.450 --> 00:03:11.400
we've created.

00:03:11.400 --> 00:03:13.590
CDMS is a term that we've
come up with.

00:03:13.590 --> 00:03:15.800
Apologize if the font's a little
small, but you'll be

00:03:15.800 --> 00:03:18.520
able to see the graph, I think,
which is the big thing.

00:03:18.520 --> 00:03:21.080
So I'm going to kick
off this demo.

00:03:21.080 --> 00:03:22.290
And then I'll talk about
what's going

00:03:22.290 --> 00:03:23.530
on while it's running.

00:03:23.530 --> 00:03:26.560
But this is the Yahoo!

00:03:26.560 --> 00:03:30.960
Cloud Serving Benchmark.

00:03:30.960 --> 00:03:33.160
And what it is, is--

00:03:33.160 --> 00:03:37.650
waiting for it to get running
here, make sure it comes up.

00:03:37.650 --> 00:03:38.900
And hit Start.

00:03:43.080 --> 00:03:45.870
Seem to be having some
technical issues.

00:03:45.870 --> 00:03:48.016
Bear with me for a second.

00:03:48.016 --> 00:03:50.520
SETH PROCTOR: So basically, what
we're looking at here is

00:03:50.520 --> 00:03:54.550
we took the standard YCSB
benchmark that's used to

00:03:54.550 --> 00:03:58.680
demonstrate common web-scale
applications.

00:03:58.680 --> 00:04:01.400
And we've wrapped kind of
a nice UI around it to

00:04:01.400 --> 00:04:04.082
demonstrate how you can start
with a single machine, and you

00:04:04.082 --> 00:04:06.320
can start adding more resources
as you need

00:04:06.320 --> 00:04:07.140
them to scale out.

00:04:07.140 --> 00:04:09.700
BRIAN DORSEY: So this is a
visualization on top of the

00:04:09.700 --> 00:04:10.560
existing benchmark.

00:04:10.560 --> 00:04:11.040
SETH PROCTOR: That's right.

00:04:11.040 --> 00:04:11.720
That's exactly right.

00:04:11.720 --> 00:04:14.450
So this is exactly just the
standard YCSB benchmark.

00:04:14.450 --> 00:04:15.780
We haven't done anything
to it.

00:04:15.780 --> 00:04:20.110
We haven't done any of the fun
tricks to make it work

00:04:20.110 --> 00:04:21.820
particularly well for us
by tweaking something.

00:04:21.820 --> 00:04:24.010
We just took the vanilla
benchmark.

00:04:24.010 --> 00:04:26.330
But what we're doing is we're
starting with a cold

00:04:26.330 --> 00:04:26.780
environment.

00:04:26.780 --> 00:04:29.160
And that's why Tommy's tweaking
something right now

00:04:29.160 --> 00:04:30.240
is we're starting with
a cold environment.

00:04:30.240 --> 00:04:32.950
And we're bringing things
online, and we're bringing

00:04:32.950 --> 00:04:34.345
them online in the Google
environment.

00:04:34.345 --> 00:04:35.485
BRIAN DORSEY: Got you.

00:04:35.485 --> 00:04:39.620
So when you're evaluating
infrastructure to run NuoDB

00:04:39.620 --> 00:04:40.890
on, what kind of

00:04:40.890 --> 00:04:42.490
infrastructure do you look for?

00:04:42.490 --> 00:04:43.816
What makes NuoDB run
really well?

00:04:43.816 --> 00:04:45.430
SETH PROCTOR: That's
a great question.

00:04:45.430 --> 00:04:50.420
So I said earlier that NuoDB is
a product that's designed

00:04:50.420 --> 00:04:51.560
to be cloud scale, right?

00:04:51.560 --> 00:04:54.840
And so part of that means that
you have to understand that

00:04:54.840 --> 00:04:56.780
failures happen in a cloud.

00:04:56.780 --> 00:04:59.220
You have to understand that
systems go down unexpectedly.

00:04:59.220 --> 00:05:00.910
Networks fail unexpectedly.

00:05:00.910 --> 00:05:03.490
Even when things are up
and available, you get

00:05:03.490 --> 00:05:07.040
inconsistent network spikes,
dips, and you get all kinds of

00:05:07.040 --> 00:05:08.980
weird, crazy things happening
in clouds

00:05:08.980 --> 00:05:09.810
that you don't expect.

00:05:09.810 --> 00:05:12.580
And so being cloud scale
isn't just about being

00:05:12.580 --> 00:05:13.400
able to scale out.

00:05:13.400 --> 00:05:16.260
It's about being resilient to
those failures and, when

00:05:16.260 --> 00:05:17.840
possible, try to stay
ahead of them.

00:05:17.840 --> 00:05:22.690
So in theory, we are designed
to work with any kind of

00:05:22.690 --> 00:05:24.820
commodity hardware, any kind
of commodity networks.

00:05:24.820 --> 00:05:27.480
We're very good at working
with unpredictable

00:05:27.480 --> 00:05:28.060
environments.

00:05:28.060 --> 00:05:31.580
But anything that has better
network capabilities, has

00:05:31.580 --> 00:05:35.830
smoother network capabilities,
has higher CPU, is obviously

00:05:35.830 --> 00:05:38.030
going to let any piece of
software run better.

00:05:38.030 --> 00:05:40.290
And so that's part of what
really appealed to us about

00:05:40.290 --> 00:05:43.900
our experience in Google was an
environment that really was

00:05:43.900 --> 00:05:48.260
a solid networked environment,
solid set of virtual machines.

00:05:48.260 --> 00:05:49.280
How are we doing, Tommy?

00:05:49.280 --> 00:05:51.830
TOMMY REILLY: I think we're
having some issues connecting.

00:05:51.830 --> 00:05:54.750
For some reason, my Linux
laptop can't talk to the

00:05:54.750 --> 00:05:55.730
Google infrastructure.

00:05:55.730 --> 00:05:57.345
But I think I may have
it reset, so we're

00:05:57.345 --> 00:05:58.105
going to try again.

00:05:58.105 --> 00:05:59.236
BRIAN DORSEY: We're
good to go.

00:05:59.236 --> 00:05:59.680
SETH PROCTOR: Excellent.

00:05:59.680 --> 00:06:00.930
TOMMY REILLY: I apologize.

00:06:12.271 --> 00:06:13.390
SETH PROCTOR: And what
you're see--

00:06:13.390 --> 00:06:14.550
BRIAN DORSEY: Yeah, describe
what we're seeing here.

00:06:14.550 --> 00:06:16.003
SETH PROCTOR: Yeah, so what
Tommy's doing here, in part,

00:06:16.003 --> 00:06:19.270
part of what you're seeing, the
plus side of getting to

00:06:19.270 --> 00:06:21.930
see this kind of working live
is that you're seeing that

00:06:21.930 --> 00:06:25.600
he's really right there live
on Google Compute Engine.

00:06:25.600 --> 00:06:27.820
He's in there, and he's been
using a number of different

00:06:27.820 --> 00:06:29.400
tools as he's trying to figure
out what's going on.

00:06:29.400 --> 00:06:31.320
He's using the web interfaces.

00:06:31.320 --> 00:06:33.520
He's using the command-line
interfaces.

00:06:33.520 --> 00:06:35.250
One of the things that's really
appealed to us about

00:06:35.250 --> 00:06:37.930
the Google Compute environment
has been how easy it is to

00:06:37.930 --> 00:06:39.140
work with on the command line.

00:06:39.140 --> 00:06:43.290
Just the simple utility makes
it really easy to get on to

00:06:43.290 --> 00:06:46.640
instances, to provision them,
to set up firewalls, to kind

00:06:46.640 --> 00:06:48.400
of monitor what's happening.

00:06:48.400 --> 00:06:50.890
It's a really straightforward,
really nicely streamlined way

00:06:50.890 --> 00:06:53.780
of just getting running with the
environment and then being

00:06:53.780 --> 00:06:55.880
able to run between a Mac
environment, a Linux

00:06:55.880 --> 00:06:58.470
environment, a Windows
environment, just get running.

00:06:58.470 --> 00:06:59.500
BRIAN DORSEY: Everything
works the same.

00:06:59.500 --> 00:07:00.950
SETH PROCTOR: Everything
just works the same.

00:07:00.950 --> 00:07:01.150
Yeah.

00:07:01.150 --> 00:07:02.040
And it's really easy.

00:07:02.040 --> 00:07:04.785
It's really nice to be able to
see everything in one place.

00:07:04.785 --> 00:07:07.980
The documentation is just super
streamlined and just

00:07:07.980 --> 00:07:09.860
makes it a breeze to
get up and running.

00:07:09.860 --> 00:07:12.400
I think from the first time I
sat down and actually started

00:07:12.400 --> 00:07:13.800
playing with it to the
time I was running

00:07:13.800 --> 00:07:14.620
was just a few minutes.

00:07:14.620 --> 00:07:15.560
So that was great.

00:07:15.560 --> 00:07:15.740
BRIAN DORSEY: That's
fantastic.

00:07:15.740 --> 00:07:17.520
SETH PROCTOR: It works really
well with the NuoDB model we

00:07:17.520 --> 00:07:20.960
have, because part of what our
software provides is not just

00:07:20.960 --> 00:07:22.590
the database, but it's all
of the management and

00:07:22.590 --> 00:07:24.860
provisioning around
the database.

00:07:24.860 --> 00:07:28.240
Being a cloud-scale database
means being easy to provision

00:07:28.240 --> 00:07:29.860
hosts, easy to get the
software running.

00:07:29.860 --> 00:07:32.490
And so it's a really nice match
between the provisioning

00:07:32.490 --> 00:07:34.880
and management model in GCE
and the provisioning and

00:07:34.880 --> 00:07:36.140
management model that
we have in NuoDB.

00:07:36.140 --> 00:07:36.690
BRIAN DORSEY: Awesome.

00:07:36.690 --> 00:07:38.570
TOMMY REILLY: Seth, that
was a wonderful job of

00:07:38.570 --> 00:07:39.310
covering for me.

00:07:39.310 --> 00:07:39.680
Thank you.

00:07:39.680 --> 00:07:40.340
SETH PROCTOR: Sweet.

00:07:40.340 --> 00:07:41.280
TOMMY REILLY: We have
the demo running.

00:07:41.280 --> 00:07:41.750
SETH PROCTOR: And we're back.

00:07:41.750 --> 00:07:44.180
TOMMY REILLY: We had some
technical issues, but we have

00:07:44.180 --> 00:07:45.040
those resolved now.

00:07:45.040 --> 00:07:49.170
So we have the demo running
here for you guys to see.

00:07:49.170 --> 00:07:51.000
So what I've done is I've
started the YCSB

00:07:51.000 --> 00:07:52.460
client on one instance.

00:07:52.460 --> 00:07:56.420
We have 32 instances in the
Google Cloud running, but we

00:07:56.420 --> 00:07:57.290
start with once.

00:07:57.290 --> 00:08:00.120
So the NuoDB database is
provisioned across those.

00:08:00.120 --> 00:08:02.990
But right now, I'm just running
one of our database

00:08:02.990 --> 00:08:06.320
transaction engines and
one YCSB client.

00:08:06.320 --> 00:08:08.340
You can see here with the little
green icon, that's my

00:08:08.340 --> 00:08:10.280
GCE instance.

00:08:10.280 --> 00:08:14.750
And for this benchmark, which
is the YCSB B workload, it's

00:08:14.750 --> 00:08:19.190
5% updates and 95% reads.

00:08:19.190 --> 00:08:21.840
We're getting roughly
50,000 to 60,000

00:08:21.840 --> 00:08:22.800
transactions a second.

00:08:22.800 --> 00:08:27.380
So we have a button here which
will start another transaction

00:08:27.380 --> 00:08:31.740
on the next instance and then
also start a client

00:08:31.740 --> 00:08:32.900
to hit that, so--

00:08:32.900 --> 00:08:34.419
SETH PROCTOR: So just to be
clear, what's happened is--

00:08:34.419 --> 00:08:35.960
this is what we were talking
about the managing, right?

00:08:35.960 --> 00:08:38.940
Tommy has provisioned a number
of hosts but has only actually

00:08:38.940 --> 00:08:41.190
started a database process
running on one of them.

00:08:41.190 --> 00:08:43.490
So what he's going to do as this
demo runs, he's going to

00:08:43.490 --> 00:08:46.100
start new processes that
will come up cold, will

00:08:46.100 --> 00:08:47.480
automatically just start
talking with

00:08:47.480 --> 00:08:48.570
the existing processes.

00:08:48.570 --> 00:08:51.560
And as that happens, you should
see this graph scale.

00:08:51.560 --> 00:08:52.460
TOMMY REILLY: Right.

00:08:52.460 --> 00:08:54.860
So if we go back to the graph,
we'll see that with two

00:08:54.860 --> 00:08:58.440
instances, we're running, pretty
much very literally,

00:08:58.440 --> 00:09:00.140
twice the number of transactions
we were

00:09:00.140 --> 00:09:00.730
running with one.

00:09:00.730 --> 00:09:03.220
So that's kind of the point
right there with NuoDB.

00:09:03.220 --> 00:09:05.320
And there's a lot of databases
that can't just make that one

00:09:05.320 --> 00:09:08.250
step from one machine
to two machines.

00:09:08.250 --> 00:09:10.265
We made that step relatively
quickly, and

00:09:10.265 --> 00:09:11.015
we've shown the scale.

00:09:11.015 --> 00:09:13.735
So I'm going to go ahead and
crank it up to four now and

00:09:13.735 --> 00:09:14.990
demonstrate some other
things that I'd

00:09:14.990 --> 00:09:16.970
like to show you guys.

00:09:16.970 --> 00:09:23.580
Interacting with the Google
Compute Engine and the NuoDB

00:09:23.580 --> 00:09:25.440
process is very similar.

00:09:25.440 --> 00:09:29.005
Google Compute Engine has this
nice command-line tool, nice

00:09:29.005 --> 00:09:30.770
little Python tool,
that allows you to

00:09:30.770 --> 00:09:31.690
see all your instances.

00:09:31.690 --> 00:09:35.620
So here, I've listed all our
instances as 32 instances of

00:09:35.620 --> 00:09:37.015
our database.

00:09:37.015 --> 00:09:38.910
And I'll show the
web UI as well.

00:09:38.910 --> 00:09:42.840
But then, not to be outdone,
NuoDB also has a

00:09:42.840 --> 00:09:43.850
command-line tool.

00:09:43.850 --> 00:09:45.915
And now here, I'm showing--

00:09:45.915 --> 00:09:48.420
hopefully, the font's big
enough, once again--

00:09:48.420 --> 00:09:49.660
all of our agents have
provisioned.

00:09:49.660 --> 00:09:52.450
Our agents are just management
agents that don't actually run

00:09:52.450 --> 00:09:53.300
the database.

00:09:53.300 --> 00:09:56.820
But they control starting and
stopping it and monitoring.

00:09:56.820 --> 00:09:58.560
And then down below, you'll
see that we have four

00:09:58.560 --> 00:10:01.530
transaction engines running on
four different hosts and then

00:10:01.530 --> 00:10:04.170
one storage manager that
holds the actual disk.

00:10:04.170 --> 00:10:06.420
So that's the command line tool,
and then I'm going to

00:10:06.420 --> 00:10:07.340
switch back.

00:10:07.340 --> 00:10:08.650
BRIAN DORSEY: And these are the
four instances we should

00:10:08.650 --> 00:10:10.110
be seeing the graph
right now, right?

00:10:10.110 --> 00:10:11.225
TOMMY REILLY: Yeah, so we're
looking at the graph now, and

00:10:11.225 --> 00:10:15.310
you'll see we had step one
was the 60,000 or so.

00:10:15.310 --> 00:10:18.260
We went to step two, where
we got up to 120,000.

00:10:18.260 --> 00:10:21.600
Now we have four instances,
and we're up to 250,000.

00:10:21.600 --> 00:10:22.220
So we'll go ahead and--

00:10:22.220 --> 00:10:22.900
SETH PROCTOR: Excellent.

00:10:22.900 --> 00:10:24.050
Just keep cranking it up.

00:10:24.050 --> 00:10:24.870
TOMMY REILLY: We're going
to crank to eight.

00:10:24.870 --> 00:10:27.770
We're developers, so we're big
fans of powers of two.

00:10:27.770 --> 00:10:30.250
So we're going to go
to eight next.

00:10:30.250 --> 00:10:31.000
And then also--

00:10:31.000 --> 00:10:32.940
SETH PROCTOR: To be clear,
there's nothing in our system

00:10:32.940 --> 00:10:34.130
that's optimized for
powers of two.

00:10:34.130 --> 00:10:37.030
It's just that no matter how the
system is built, we still

00:10:37.030 --> 00:10:37.990
can't get away from
talking about--

00:10:37.990 --> 00:10:38.620
TOMMY REILLY: Oh, Seth--

00:10:38.620 --> 00:10:39.710
SETH PROCTOR: --two,
four, eight.

00:10:39.710 --> 00:10:41.520
TOMMY REILLY: Sure, there
are things optimized

00:10:41.520 --> 00:10:42.740
for powers of two.

00:10:42.740 --> 00:10:45.310
Just not numbers of hosts.

00:10:45.310 --> 00:10:50.740
So this is the graphical
administration tool that

00:10:50.740 --> 00:10:52.570
allows you to see, and you
get some pretty graphs

00:10:52.570 --> 00:10:53.940
about stats and stuff.

00:10:53.940 --> 00:10:56.720
But this is one logical
database, as we mentioned

00:10:56.720 --> 00:11:00.300
before, and this is going to
show which processes are

00:11:00.300 --> 00:11:03.930
involved in serving this
logical database.

00:11:03.930 --> 00:11:08.070
Because of font issues,
we can't really scale.

00:11:08.070 --> 00:11:11.590
But if I do my little finger
magic here, you should see the

00:11:11.590 --> 00:11:12.860
instances I'm running.

00:11:12.860 --> 00:11:14.710
And you'll see up here that nine
processes are running.

00:11:14.710 --> 00:11:16.610
Again, that's the eight
transaction engines and one

00:11:16.610 --> 00:11:17.400
storage manager.

00:11:17.400 --> 00:11:17.920
SETH PROCTOR: Right.

00:11:17.920 --> 00:11:19.650
And Tommy just said something
really important, which is

00:11:19.650 --> 00:11:22.210
that what's really nice about
this model is that there are

00:11:22.210 --> 00:11:23.480
all these different
processes running.

00:11:23.480 --> 00:11:24.830
They can be running on
different hosts.

00:11:24.830 --> 00:11:25.450
They can fail.

00:11:25.450 --> 00:11:25.940
They can come up.

00:11:25.940 --> 00:11:27.160
They can come down.

00:11:27.160 --> 00:11:29.045
But from the point of view of
the developer, from the point

00:11:29.045 --> 00:11:31.290
of view of the application,
there's a single logical

00:11:31.290 --> 00:11:32.730
database, right?

00:11:32.730 --> 00:11:35.420
So there really is one database
we're addressing.

00:11:35.420 --> 00:11:38.490
The fact that these processes
are being added, the clients

00:11:38.490 --> 00:11:39.320
have no idea about that.

00:11:39.320 --> 00:11:40.190
They just know there's
a database

00:11:40.190 --> 00:11:40.910
they can address and--

00:11:40.910 --> 00:11:41.450
BRIAN DORSEY: So as a developer,
I don't need to

00:11:41.450 --> 00:11:42.990
know at all what's going on.

00:11:42.990 --> 00:11:43.650
SETH PROCTOR: That's right.

00:11:43.650 --> 00:11:45.610
And that means we can bring
things down live.

00:11:45.610 --> 00:11:47.390
We can migrate live processes.

00:11:47.390 --> 00:11:50.740
We can actually have 100%
availability while we're doing

00:11:50.740 --> 00:11:52.640
upgrades or while we're
doing migration.

00:11:52.640 --> 00:11:55.270
And still just looks like a
single, live database, which

00:11:55.270 --> 00:11:56.480
is really cool.

00:11:56.480 --> 00:11:58.390
TOMMY REILLY: So here's a slide
I just want to show

00:11:58.390 --> 00:12:01.250
that's going to drive home this
point further about what

00:12:01.250 --> 00:12:02.520
we're demonstrating.

00:12:02.520 --> 00:12:04.630
This shows kind of
a rough diagram

00:12:04.630 --> 00:12:05.830
model of what's running.

00:12:05.830 --> 00:12:10.960
So each of these boxes
represents a Google Compute

00:12:10.960 --> 00:12:13.210
Engine instance.

00:12:13.210 --> 00:12:16.110
So in each box, you'll see a
YCSB client running, there's

00:12:16.110 --> 00:12:17.960
an agent running-- which
is NuoDB's agent--

00:12:17.960 --> 00:12:19.500
and then a transaction engine.

00:12:19.500 --> 00:12:21.880
And then we've done a little
dotted line here to show that

00:12:21.880 --> 00:12:24.040
this is one logical
database engine.

00:12:24.040 --> 00:12:29.860
So that means that if NuoDB
instance 32 tries to update a

00:12:29.860 --> 00:12:32.750
record, and NuoDB instance 1
tries to update a record, only

00:12:32.750 --> 00:12:34.730
one of those transactions
is going to proceed.

00:12:34.730 --> 00:12:37.530
is These nodes are talking to
each other and making the

00:12:37.530 --> 00:12:38.990
semantics of ACID [INAUDIBLE].

00:12:38.990 --> 00:12:40.060
BRIAN DORSEY: So you need the
network to work well.

00:12:40.060 --> 00:12:42.560
TOMMY REILLY: Yes, network
working well helps a lot.

00:12:42.560 --> 00:12:43.830
BRIAN DORSEY: Ready
to keep going?

00:12:43.830 --> 00:12:45.580
TOMMY REILLY: All right,
so we're right

00:12:45.580 --> 00:12:47.480
along nicely with eight.

00:12:47.480 --> 00:12:48.905
Should we go to 16?

00:12:48.905 --> 00:12:50.525
SETH PROCTOR: Can we jump
straight to 32?

00:12:50.525 --> 00:12:52.990
TOMMY REILLY: We
probably could.

00:12:52.990 --> 00:12:54.740
We have to wait.

00:12:54.740 --> 00:12:57.640
We're starting each transaction
serially, so it'll

00:12:57.640 --> 00:12:59.530
take a couple seconds for
all eight to come up.

00:12:59.530 --> 00:13:01.530
SETH PROCTOR: You actually can
start as many as you want on

00:13:01.530 --> 00:13:02.780
top of each other.

00:13:02.780 --> 00:13:05.360
The UI we have here was
designed-- you can see the

00:13:05.360 --> 00:13:06.280
Pause, Play buttons.

00:13:06.280 --> 00:13:09.550
This was designed as a thing to
help someone step through

00:13:09.550 --> 00:13:10.510
and understand what
they're doing.

00:13:10.510 --> 00:13:13.790
So the UI itself doesn't
let you do it.

00:13:13.790 --> 00:13:15.150
The software lets you do it.

00:13:15.150 --> 00:13:15.850
BRIAN DORSEY: Got you.

00:13:15.850 --> 00:13:19.480
TOMMY REILLY: All right, so
we're almost done starting up

00:13:19.480 --> 00:13:21.670
those 16 instances--

00:13:21.670 --> 00:13:25.210
the additional eight, sorry.

00:13:25.210 --> 00:13:29.040
And you can see that
we're approaching--

00:13:29.040 --> 00:13:31.300
SETH PROCTOR: One million.

00:13:31.300 --> 00:13:34.620
TOMMY REILLY: One million
TPS, we're approaching.

00:13:34.620 --> 00:13:35.490
BRIAN DORSEY: Fantastic.

00:13:35.490 --> 00:13:37.110
TOMMY REILLY: We're not
quite there yet.

00:13:37.110 --> 00:13:38.900
All right, so now we have
the engines running.

00:13:38.900 --> 00:13:40.150
The numbers are still
updating.

00:13:40.150 --> 00:13:41.060
It's fluctuating a little bit.

00:13:41.060 --> 00:13:44.942
But in the interest of time,
we will jump right to 32.

00:13:44.942 --> 00:13:46.555
SETH PROCTOR: And the important
thing-- so there's

00:13:46.555 --> 00:13:48.680
the big curve that we're looking
at, which is that big,

00:13:48.680 --> 00:13:49.320
blue curve.

00:13:49.320 --> 00:13:50.790
And that's the transactions
per second.

00:13:50.790 --> 00:13:52.420
And that's obviously
really exciting.

00:13:52.420 --> 00:13:54.330
Down in the lower-left corner,
there's another curve, which

00:13:54.330 --> 00:13:56.410
is also pretty cool, which
is showing latency.

00:13:56.410 --> 00:13:59.010
And that's showing that even as
we're going from 2 to 4 to

00:13:59.010 --> 00:14:03.610
16 to 32 hosts that are
expanding out this database,

00:14:03.610 --> 00:14:06.390
we're still hitting
sub-millisecond latency on

00:14:06.390 --> 00:14:07.000
these requests.

00:14:07.000 --> 00:14:07.460
BRIAN DORSEY: Excellent.

00:14:07.460 --> 00:14:09.390
SETH PROCTOR: And so it's not
just about that scale out.

00:14:09.390 --> 00:14:11.770
We're still very responsive
to all these queries.

00:14:11.770 --> 00:14:14.030
And for a lot of people, that's
just as important as

00:14:14.030 --> 00:14:15.320
the raw throughput, right?

00:14:15.320 --> 00:14:16.055
BRIAN DORSEY: Absolutely.

00:14:16.055 --> 00:14:17.460
SETH PROCTOR: Oh, Tommy.

00:14:17.460 --> 00:14:17.890
Look.

00:14:17.890 --> 00:14:18.920
TOMMY REILLY: Yeah, we're
getting there.

00:14:18.920 --> 00:14:21.600
We are still in the process
of rolling up these--

00:14:21.600 --> 00:14:25.358
bringing online the
additional 16.

00:14:25.358 --> 00:14:27.450
BRIAN DORSEY: So if I wanted
to do this, is there

00:14:27.450 --> 00:14:29.290
information on how
to get started?

00:14:29.290 --> 00:14:33.480
TOMMY REILLY: Yes, so we have
written a blog entry.

00:14:33.480 --> 00:14:35.840
And we have a link that we'll
show at the end here.

00:14:35.840 --> 00:14:39.170
But on nuodb.com, we have a tech
blog, and we wrote a blog

00:14:39.170 --> 00:14:42.230
entry describing the nuts and
bolts of what we went through

00:14:42.230 --> 00:14:43.000
and how we did it.

00:14:43.000 --> 00:14:47.390
And we hope to be publishing
some assets from that to make

00:14:47.390 --> 00:14:48.470
available to developers.

00:14:48.470 --> 00:14:50.990
And definitely recommend
people check that out.

00:14:50.990 --> 00:14:53.650
SETH PROCTOR: And so what's
really cool here, in case

00:14:53.650 --> 00:14:55.400
people are missing this number,
is that we just went

00:14:55.400 --> 00:14:59.050
in a few minutes from having
a cold environment to just

00:14:59.050 --> 00:15:02.225
horizontally bringing hosts
online to get up above 1.6

00:15:02.225 --> 00:15:05.350
million transactions a second
on what is a fairly

00:15:05.350 --> 00:15:07.050
representative workload.

00:15:07.050 --> 00:15:08.380
And that's cool on its own.

00:15:08.380 --> 00:15:11.290
It's also really cool because
we're doing this on a virtual

00:15:11.290 --> 00:15:12.350
public cloud environment.

00:15:12.350 --> 00:15:14.270
And we've been able to hit these
kinds of numbers on our

00:15:14.270 --> 00:15:17.310
own internal systems, but to
hit them on something like

00:15:17.310 --> 00:15:19.315
Google Compute Engine
is just awesome.

00:15:19.315 --> 00:15:20.115
BRIAN DORSEY: Fantastic.

00:15:20.115 --> 00:15:21.220
Say that number again.

00:15:21.220 --> 00:15:24.040
TOMMY REILLY: We're up to 1.7,
if you look at the graph.

00:15:24.040 --> 00:15:26.176
SETH PROCTOR: 1.7 million
transactions.

00:15:26.176 --> 00:15:27.540
TOMMY REILLY: 1.7 million
transactions per second.

00:15:27.540 --> 00:15:30.710
SETH PROCTOR: Per second, yeah,
which is, we think,

00:15:30.710 --> 00:15:31.545
pretty respectable.

00:15:31.545 --> 00:15:33.980
BRIAN DORSEY: So ending up at
this kind of number, what sort

00:15:33.980 --> 00:15:36.420
of performance testing do you
guys do to evaluate the

00:15:36.420 --> 00:15:37.383
environments?

00:15:37.383 --> 00:15:39.040
Is it this sort of thing?

00:15:39.040 --> 00:15:40.780
TOMMY REILLY: We use this
sort of thing, right?

00:15:40.780 --> 00:15:44.490
So one of the things we look for
in a test like this is if

00:15:44.490 --> 00:15:47.720
you start up eight nodes, you
look at the latencies, what's

00:15:47.720 --> 00:15:48.720
the standard deviation?

00:15:48.720 --> 00:15:50.190
Are the latencies nice?

00:15:50.190 --> 00:15:51.530
It's good to have a
nice low average.

00:15:51.530 --> 00:15:54.160
We're showing the average here
in this graph of under a

00:15:54.160 --> 00:15:54.700
millisecond.

00:15:54.700 --> 00:15:57.400
But are there any outliers,
that kind of thing.

00:15:57.400 --> 00:15:59.600
So is node 32 really slow?

00:15:59.600 --> 00:16:01.300
What's the full connectivity?

00:16:01.300 --> 00:16:05.600
We use some off-the-shelf tools,
like Iperf, to measure

00:16:05.600 --> 00:16:06.990
the bandwidth.

00:16:06.990 --> 00:16:08.660
And you can measure
disk throughput

00:16:08.660 --> 00:16:10.190
with some simple utilities.

00:16:10.190 --> 00:16:11.110
We do stuff like that.

00:16:11.110 --> 00:16:15.660
But generally, we're just
looking for nice, consistent

00:16:15.660 --> 00:16:17.620
disk I/O and network I/O.

00:16:17.620 --> 00:16:20.350
SETH PROCTOR: And part of the
reason we've created demos

00:16:20.350 --> 00:16:22.320
like this is because
fundamentally, the

00:16:22.320 --> 00:16:24.870
architecture of NuoDB is
radically different than most

00:16:24.870 --> 00:16:26.170
relational database
architecture.

00:16:26.170 --> 00:16:29.010
So it's very hard to just take
an off-the-shelf benchmark or

00:16:29.010 --> 00:16:31.770
suite and say this tells us how
something performs in a

00:16:31.770 --> 00:16:33.190
scale-out environment
like Google.

00:16:33.190 --> 00:16:36.670
And so this is a fairly simple
demo we're showing, but it is

00:16:36.670 --> 00:16:38.730
the kind of thing that we can
say, once we get those raw

00:16:38.730 --> 00:16:40.020
numbers-- what does
the I/O look like?

00:16:40.020 --> 00:16:41.000
What does the network
look like?

00:16:41.000 --> 00:16:43.030
What does provisioning
time look like?

00:16:43.030 --> 00:16:44.630
Then being able to take
something like this and say,

00:16:44.630 --> 00:16:46.420
well, realistically,
can we hit--

00:16:46.420 --> 00:16:49.010
we just hit 1.8 million
transactions a second.

00:16:49.010 --> 00:16:51.380
So to us, this is
really exciting.

00:16:51.380 --> 00:16:52.480
And this is really
how we do it.

00:16:52.480 --> 00:16:54.950
So we have to take real
pragmatic applications and

00:16:54.950 --> 00:16:57.160
say, well, can we make that
application or that

00:16:57.160 --> 00:16:58.985
representative workload scale?

00:16:58.985 --> 00:16:59.885
TOMMY REILLY: And
the application

00:16:59.885 --> 00:17:00.940
didn't have to change.

00:17:00.940 --> 00:17:04.000
This is off-the-shelf JDBC,
simple, using prepared

00:17:04.000 --> 00:17:06.130
statements to execute
these queries.

00:17:06.130 --> 00:17:08.660
You can see we're getting
sub-millisecond latency times.

00:17:08.660 --> 00:17:12.270
If your application is just
simple JDBC and getting those

00:17:12.270 --> 00:17:14.490
kind of times, you really don't
need it to add Memcached

00:17:14.490 --> 00:17:16.180
to get the kind of low
latency you need.

00:17:16.180 --> 00:17:17.040
BRIAN DORSEY: Just go directly
to the database.

00:17:17.040 --> 00:17:18.940
TOMMY REILLY: The transaction
agents kind of replace that,

00:17:18.940 --> 00:17:22.180
and your application is going to
remain simpler as a result.

00:17:22.180 --> 00:17:22.349
SETH PROCTOR: Right.

00:17:22.349 --> 00:17:23.240
That's a very important point.

00:17:23.240 --> 00:17:26.380
NuoDB is, among other things,
its own caching architecture.

00:17:26.380 --> 00:17:28.950
And so the transactions
are all running

00:17:28.950 --> 00:17:30.570
on in-memory processes.

00:17:30.570 --> 00:17:32.250
That's very powerful in
terms of failure.

00:17:32.250 --> 00:17:34.110
That's very powerful in terms
of how easy it is to

00:17:34.110 --> 00:17:35.890
provision new hosts.

00:17:35.890 --> 00:17:38.690
But it also means that there's
no need-- and in fact, you

00:17:38.690 --> 00:17:40.860
shouldn't be thinking about
adding additional caching

00:17:40.860 --> 00:17:43.310
tiers or any kind of other
tiers on top of that to

00:17:43.310 --> 00:17:44.160
optimize the system.

00:17:44.160 --> 00:17:46.630
We're already taking care of
that for you, which is part of

00:17:46.630 --> 00:17:49.650
the easy, out of the box
experience that we're trying

00:17:49.650 --> 00:17:50.160
to provide.

00:17:50.160 --> 00:17:50.820
BRIAN DORSEY: Totally.

00:17:50.820 --> 00:17:51.780
And you touched on this
a little bit earlier.

00:17:51.780 --> 00:17:54.940
But it seems like this was a
fair amount of effort to get

00:17:54.940 --> 00:17:55.540
this up and running.

00:17:55.540 --> 00:17:58.510
How did you find getting started
on Compute Engine?

00:17:58.510 --> 00:17:59.310
SETH PROCTOR: It was easy.

00:17:59.310 --> 00:18:01.130
TOMMY REILLY: Yeah, it
was fairly easy.

00:18:01.130 --> 00:18:05.470
Linux is one of our main
supported environments.

00:18:05.470 --> 00:18:08.880
We got up there, and it was
a nice, easy selection of

00:18:08.880 --> 00:18:09.880
kernels to use.

00:18:09.880 --> 00:18:12.560
We just could have picked
any one of them.

00:18:12.560 --> 00:18:14.135
Deploying and installing
it was a breeze.

00:18:14.135 --> 00:18:16.710
That was one of the things
covered in our blog.

00:18:16.710 --> 00:18:20.870
The gcutil had a nice,
high-level layer of

00:18:20.870 --> 00:18:22.850
abstraction for the things
we needed to do--

00:18:22.850 --> 00:18:25.840
provisioning the disks, getting
the firewall set up.

00:18:25.840 --> 00:18:27.665
All that was relatively
straightforward.

00:18:27.665 --> 00:18:28.680
BRIAN DORSEY: Fantastic.

00:18:28.680 --> 00:18:31.295
Actually, can we show the
link to your blog?

00:18:31.295 --> 00:18:32.220
TOMMY REILLY: Sure.

00:18:32.220 --> 00:18:33.420
It's up there.

00:18:33.420 --> 00:18:35.650
SETH PROCTOR: So this is a new
thing we've started doing in

00:18:35.650 --> 00:18:36.430
the last few weeks.

00:18:36.430 --> 00:18:40.250
We're trying to get our
engineers talking directly to

00:18:40.250 --> 00:18:41.550
people who are interested
in the technology.

00:18:41.550 --> 00:18:44.880
So this is meant to be a very
cut to the chase, pragmatic,

00:18:44.880 --> 00:18:47.730
how you do things, how
the technology works.

00:18:47.730 --> 00:18:49.700
We really encourage people to
go check it out, to give us

00:18:49.700 --> 00:18:50.740
suggestions of what
they'd like to

00:18:50.740 --> 00:18:52.365
learn about the product.

00:18:52.365 --> 00:18:55.540
And then we're also going to be
collecting information more

00:18:55.540 --> 00:18:59.990
specific to our Google Compute
Engine experience.

00:18:59.990 --> 00:19:03.750
And as we generate more
benchmarks, as we generate

00:19:03.750 --> 00:19:05.940
more experience there, we'll
be posting links there for

00:19:05.940 --> 00:19:06.600
people to find it.

00:19:06.600 --> 00:19:08.166
BRIAN DORSEY: Fantastic.

00:19:08.166 --> 00:19:10.120
TOMMY REILLY: Our blog post on
Google Compute Engine was live

00:19:10.120 --> 00:19:10.870
as of this morning.

00:19:10.870 --> 00:19:13.300
So you can be the first person
to comment on it if you go

00:19:13.300 --> 00:19:13.830
check it out.

00:19:13.830 --> 00:19:13.890
BRIAN DORSEY: Excellent.

00:19:13.890 --> 00:19:16.110
The live audience is the very
first people to see it.

00:19:16.110 --> 00:19:16.695
SETH PROCTOR: Definitely.

00:19:16.695 --> 00:19:18.330
BRIAN DORSEY: Fantastic.

00:19:18.330 --> 00:19:23.640
So you said before this is the
full relational SQL database.

00:19:23.640 --> 00:19:26.400
But from what I understand, the
YCSB benchmark is really

00:19:26.400 --> 00:19:27.680
more of a key value benchmark.

00:19:27.680 --> 00:19:29.140
SETH PROCTOR: Yeah, so we've
got a little bit more time.

00:19:29.140 --> 00:19:30.810
And we'll get Tommy to show
you one other thing here,

00:19:30.810 --> 00:19:34.380
which is that we actually ported
JIRA to run on top of

00:19:34.380 --> 00:19:35.300
our database.

00:19:35.300 --> 00:19:37.540
And for those of you who haven't
seen JIRA, it's a very

00:19:37.540 --> 00:19:41.150
popular, very powerful issue
tracking, project management

00:19:41.150 --> 00:19:42.820
bug tracking system.

00:19:42.820 --> 00:19:44.790
And so we actually run
it internally.

00:19:44.790 --> 00:19:48.000
We run our JIRA instance
on NuoDB.

00:19:48.000 --> 00:19:49.460
It was only a few
hundred lines of

00:19:49.460 --> 00:19:50.420
code to get that going.

00:19:50.420 --> 00:19:53.042
And most of that was just
writing the standard adapters

00:19:53.042 --> 00:19:54.090
that they expect.

00:19:54.090 --> 00:19:57.400
So it was really a pretty easy
out of the box experience.

00:19:57.400 --> 00:20:00.910
And what we have here is
actually an instance running

00:20:00.910 --> 00:20:01.710
on Google Compute Engine.

00:20:01.710 --> 00:20:03.190
TOMMY REILLY: Yeah, so you
should see the results.

00:20:03.190 --> 00:20:06.860
This is a frozen, older version
of the actual NuoDB

00:20:06.860 --> 00:20:08.750
production bugbase.

00:20:08.750 --> 00:20:12.620
So I can log in and see a
bug, reopen an issue,

00:20:12.620 --> 00:20:13.310
and load and close.

00:20:13.310 --> 00:20:14.910
And I'll assign that
to my boss.

00:20:14.910 --> 00:20:17.190
And this will be saved.

00:20:17.190 --> 00:20:18.540
And this is running on
the Google Cloud.

00:20:18.540 --> 00:20:21.260
We took the snapshot, and
we just deployed it.

00:20:21.260 --> 00:20:23.650
It was literally one
morning we got this

00:20:23.650 --> 00:20:24.310
running, and it's done.

00:20:24.310 --> 00:20:26.300
SETH PROCTOR: And if anyone's
used JIRA, anyone's had to

00:20:26.300 --> 00:20:28.680
deploy JIRA, they know that
there's a lot of SQL that just

00:20:28.680 --> 00:20:29.840
happened under the covers.

00:20:29.840 --> 00:20:30.906
BRIAN DORSEY: To make
it all work.

00:20:30.906 --> 00:20:31.885
So real database.

00:20:31.885 --> 00:20:32.940
SETH PROCTOR: Real
database, yeah.

00:20:32.940 --> 00:20:34.140
BRIAN DORSEY: Any last
comments you guys

00:20:34.140 --> 00:20:35.430
would like to make?

00:20:35.430 --> 00:20:37.660
SETH PROCTOR: No, just this has
been an awesome experience

00:20:37.660 --> 00:20:38.430
working with Google.

00:20:38.430 --> 00:20:41.720
NuoDB is this really different
architecture.

00:20:41.720 --> 00:20:42.540
It scales out.

00:20:42.540 --> 00:20:44.770
It really take advantage
of compute resources.

00:20:44.770 --> 00:20:47.010
It's really easy to work with,
but it needs something that,

00:20:47.010 --> 00:20:49.330
in turn, is an easy,
provisionable environment.

00:20:49.330 --> 00:20:50.520
And that's been our experience
at Google,

00:20:50.520 --> 00:20:51.820
is that's just awesome.

00:20:51.820 --> 00:20:55.630
So we look forward to continuing
to work on that,

00:20:55.630 --> 00:20:58.210
and we'll be publishing
more as we go along.

00:20:58.210 --> 00:20:59.410
And we encourage other people
to check it out.

00:20:59.410 --> 00:21:00.880
It's great.

00:21:00.880 --> 00:21:02.980
Go try NuoDB on Google
Compute Engine.

00:21:02.980 --> 00:21:03.595
It'll be a good experience.

00:21:03.595 --> 00:21:05.720
TOMMY REILLY: Yes, I can't
say that any better.

00:21:05.720 --> 00:21:07.590
That was my thoughts exactly.

00:21:07.590 --> 00:21:08.550
BRIAN DORSEY: Fantastic.

00:21:08.550 --> 00:21:10.480
So Seth and Tommy, thank
you both for coming in.

00:21:10.480 --> 00:21:10.970
SETH PROCTOR: Great.

00:21:10.970 --> 00:21:11.230
Thanks for having us here.

00:21:11.230 --> 00:21:11.830
TOMMY REILLY: Thanks
for having us.

00:21:11.830 --> 00:21:13.080
BRIAN DORSEY: Thanks
for watching.

00:21:22.630 --> 00:22:01.888
[MUSIC PLAYING]

