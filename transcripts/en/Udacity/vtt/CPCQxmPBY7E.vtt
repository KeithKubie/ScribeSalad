WEBVTT
Kind: captions
Language: en

00:00:00.540 --> 00:00:06.230
Next you will see how to perform various
mathematical operations on np arrays.

00:00:06.230 --> 00:00:09.450
Let's use a random heading of integers.

00:00:09.450 --> 00:00:14.110
Let's create an array with shape
five rows and four columns.

00:00:14.110 --> 00:00:15.860
Let's see the output.

00:00:15.860 --> 00:00:19.850
So here's an array with five rows,
four columns, and

00:00:19.850 --> 00:00:23.370
all the values between the range 0 and
10.

00:00:23.370 --> 00:00:28.200
Note how we used seed, the random
number generator with the constant,

00:00:28.200 --> 00:00:31.210
to get the same sequence
of numbers every time.

00:00:31.210 --> 00:00:35.330
Let's run again and
see if the output remains the same.

00:00:35.330 --> 00:00:39.540
You can see that we have
the same values for the array.

00:00:39.540 --> 00:00:44.290
Summing all the elements in an array
is as simple as calling the function

00:00:44.290 --> 00:00:46.370
sum on the array.

00:00:46.370 --> 00:00:49.555
Here is our array a, and
we call the sum function on it.

00:00:49.555 --> 00:00:51.000
Let's check the output.

00:00:52.090 --> 00:00:53.600
This is our array and

00:00:53.600 --> 00:00:58.210
this is sum of all the elements present
in the array, which comes out to be 79.

00:00:58.210 --> 00:01:02.840
We can also sum in a specific
direction of the array.

00:01:02.840 --> 00:01:07.320
What I mean by direction
is along rows or columns.

00:01:07.320 --> 00:01:10.010
NumPy gives this
direction a special name.

00:01:10.010 --> 00:01:11.700
It is called access.

00:01:11.700 --> 00:01:14.760
Access is equal to zero,
signifies rows, and

00:01:14.760 --> 00:01:17.950
access is equal to one
indicates columns.

00:01:17.950 --> 00:01:21.720
Remember this terminology as
you will use it frequently.

00:01:21.720 --> 00:01:24.160
Let's code to make things clear.

00:01:24.160 --> 00:01:26.470
Passing the parameter, axis,

00:01:26.470 --> 00:01:30.830
along with a specific value will
give you the sum along that axis.

00:01:30.830 --> 00:01:34.320
To understand this,
let's first see the output.

00:01:34.320 --> 00:01:39.530
To get the sum of each column, we pass
the value to the axis attribute as zero.

00:01:39.530 --> 00:01:43.647
And to get the sum of the rows,
we pass the value as one.

00:01:43.647 --> 00:01:48.653
To understand this imagine if you wanted
to sum the values of each column,

00:01:48.653 --> 00:01:51.080
what would you iterate on?

00:01:51.080 --> 00:01:52.500
You would say something like,

00:01:52.500 --> 00:01:57.040
For each column, sum all the values
of each row of that column.

00:01:57.040 --> 00:02:00.100
So you would essentially
iterate over the rows.

00:02:00.100 --> 00:02:08.370
Hence we pass axis=0 to compute column
sums and similarly axis=1 for row sums.

00:02:08.370 --> 00:02:15.000
Observe the output when we pass axis=0,
we get four values.

00:02:15.000 --> 00:02:17.660
These are basically
the sum of each columns.

00:02:17.660 --> 00:02:20.680
And when we passed axis=1.

00:02:20.680 --> 00:02:23.570
We get five values which
are the sum of each row.

00:02:23.570 --> 00:02:28.810
Let's go ahead and try some basic
operation like finding minimum,

00:02:28.810 --> 00:02:30.870
maximum, and mean of an array.

00:02:31.990 --> 00:02:37.160
So, if I want minimum along columns,
I have to go through each row

00:02:37.160 --> 00:02:43.430
of each column, so axis equal to zero
to get the minimum of each column.

00:02:43.430 --> 00:02:48.520
To get the maximum of each row,
similarly we call a max function and

00:02:48.520 --> 00:02:50.288
pass access equal to one.

00:02:50.288 --> 00:02:52.920
Just calling a.mean,

00:02:52.920 --> 00:02:58.220
that is array dot mean, will give
us the mean of the entire array.

00:02:58.220 --> 00:03:03.770
Of course we can get mean along each
axis as we did for max and min.

00:03:03.770 --> 00:03:05.320
Observe the output.

00:03:05.320 --> 00:03:09.430
Minimum of the first column is one,
which is shown over here.

00:03:09.430 --> 00:03:12.536
This value is essentially,
minimum of the first column.

00:03:12.536 --> 00:03:17.560
This is of second, this is of third,
and this is of fourth.

00:03:17.560 --> 00:03:22.070
Similarly, for maximum of the each row,
you can observe that for

00:03:22.070 --> 00:03:25.670
the first row, the maximum is five,
and it is shown here.

00:03:25.670 --> 00:03:28.530
The mean of all
the elements is 3.95 which

00:03:29.540 --> 00:03:33.070
is calculated using the mean function.

00:03:33.070 --> 00:03:36.470
There are many more functions
which you can experiment with.

00:03:36.470 --> 00:03:39.020
Check the documentation link
in the instructor's notes.

