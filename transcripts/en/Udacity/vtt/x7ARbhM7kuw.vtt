WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
The set is an important tool in Python, and today we're going to talk about it.

00:00:04.000 --> 00:00:09.000
A set in Python is simply an unordered collection of elements with no duplicates.

00:00:09.000 --> 00:00:13.000
This unordered and no duplication--these are important clauses.

00:00:13.000 --> 00:00:18.000
The sets used by Python are just a programmatic version of the sets used by mathematicians.

00:00:18.000 --> 00:00:20.000
Let's talk a bit about set theory.

00:00:20.000 --> 00:00:27.000
Let's say we have a basket of fruit, and let's say it contains 5 apples, 3 oranges, and 2 tomatoes.

00:00:27.000 --> 00:00:32.000
These I suppose would be the apples or maybe the tomatoes, but we don't have to worry about that.

00:00:32.000 --> 00:00:36.000
If we want to represent this as a set, we wouldn't care about this quantity.

00:00:36.000 --> 00:00:38.000
The fact that there is 5 apples doesn't matter.

00:00:38.000 --> 00:00:42.000
In fact, I could just write apple, orange, and tomato

00:00:42.000 --> 00:00:44.000
and label this set "fruit."

00:00:44.000 --> 00:00:50.000
The elements of this set "fruit" are simply the entries apple, orange, and tomato.

00:00:50.000 --> 00:00:53.000
Let's say we also have a set called "vegetable."

00:00:53.000 --> 00:00:59.000
Some of the elements in this set would be broccoli, carrot, and tomato.

00:00:59.000 --> 00:01:02.000
When I was coming up with this question there was some heated debate in the office

00:01:02.000 --> 00:01:07.000
about whether tomatoes are fruits or vegetables. Let's just include it in both.

00:01:07.000 --> 00:01:11.000
That means that when I draw the circle that encompasses this set,

00:01:11.000 --> 00:01:14.000
it actually has an overlap with the set fruit.

00:01:14.000 --> 00:01:17.000
In set theory, this overlap is called the intersection.

00:01:17.000 --> 00:01:21.000
I'm going to mention these set theory terms, but you don't have to worry about them too much.

00:01:21.000 --> 00:01:26.000
This diagram I've drawn here is known in set theory as a Venn diagram.

00:01:26.000 --> 00:01:29.000
They can be very useful for visualizing what's going on with sets.

00:01:29.000 --> 00:01:31.000
Here comes the interesting part.

00:01:31.000 --> 00:01:38.000
We can create new sets by taking subsections or performing operations on these sets.

00:01:38.000 --> 00:01:42.000
For example, if we want to know what elements are fruits and vegetables,

00:01:42.000 --> 00:01:45.000
which like I said before is called the intersection,

00:01:45.000 --> 00:01:51.000
we could write "Fruit &amp;amp; Vegetable," and we could see the only element would be tomato.

00:01:51.000 --> 00:01:55.000
I should point out that this symbol and the other symbols I will be using are not

00:01:55.000 --> 00:01:57.000
what we usually use in mathematical set theory,

00:01:57.000 --> 00:02:00.000
but since they're what we use in Python I'm going to be sticking with this convention.

00:02:00.000 --> 00:02:04.000
We could also ask what elements are fruits but not vegetables,

00:02:04.000 --> 00:02:06.000
which is known as the set difference.

00:02:06.000 --> 00:02:11.000
The only element that are fruits but not vegetables are apple and orange.

00:02:11.000 --> 00:02:14.000
We could ask which elements are fruits or vegetables.

00:02:14.000 --> 00:02:20.000
Here I've used the vertical line to indicate that. This would give us all of this entries.

00:02:20.000 --> 00:02:23.000
All of these entries are either a fruit or a vegetable or both.

00:02:23.000 --> 00:02:25.000
The last operation I'm going to talk about is asking

00:02:25.000 --> 00:02:30.000
which elements are fruits or vegetables but not both.

00:02:30.000 --> 00:02:32.000
This is known as the symmetric difference.

00:02:32.000 --> 00:02:37.000
Here we've used the caret to indicate that, which is not the same as this carrot.

00:02:37.000 --> 00:02:41.000
This is just all of the entries except for tomato.

