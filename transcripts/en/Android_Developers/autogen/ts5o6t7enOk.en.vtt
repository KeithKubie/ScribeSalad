WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.930
 <i>Android patterns for performance</i> 

00:00:02.500 --> 00:00:05.880
 No matter how much you've improved your network code for performance, 

00:00:05.880 --> 00:00:08.830
 There is still a big performance dilemma that you have not noticed, 

00:00:09.340 --> 00:00:10.880
 They are bloated asset portfolios. 

00:00:10.880 --> 00:00:12.000
 My name is Colt McCannless. 

00:00:12.000 --> 00:00:16.010
 If you are not aggressively addressing the volume of assets you transfer to users, 

00:00:16.010 --> 00:00:18.910
 You steal money and time from them. 

00:00:18.912 --> 00:00:20.850
 Sending inflated assets to your users 

00:00:20.850 --> 00:00:22.470
 On three big problems. 

00:00:22.470 --> 00:00:24.090
 First, network speeds. 

00:00:24.090 --> 00:00:27.534
 The rate of data transfer continues to be a major problem for most people around the world. 

00:00:27.540 --> 00:00:29.070
 Not everyone uses 4G. 

00:00:29.070 --> 00:00:30.490
 The slower the network, 

00:00:30.490 --> 00:00:32.500
 The length of time required to download the data. 

00:00:32.800 --> 00:00:35.600
 This brings us to the second problem of battery depletion. 

00:00:35.600 --> 00:00:38.370
 The longer the duration of wireless cellular network connection, 

00:00:38.370 --> 00:00:40.690
 The battery drain has increased to do this. 

00:00:40.690 --> 00:00:43.360
 So the bloated files drain a lot of battery power. 

00:00:43.670 --> 00:00:46.470
 Let's not forget the third problem, the cost. 

00:00:46.470 --> 00:00:49.014
 Most people do not use unlimited data bundles, 

00:00:49.014 --> 00:00:51.760
 Which means that every bit they transfer to their device 

00:00:51.760 --> 00:00:54.660
 Of your application cost them money, 

00:00:54.660 --> 00:00:57.750
 This is, in my view, a failed deal for a free application. 

00:00:58.980 --> 00:01:00.979
 And unless you pay close attention 

00:01:00.979 --> 00:01:03.270
 To the volume of assets you send to your users, 

00:01:03.270 --> 00:01:05.010
 It will be too large. 

00:01:05.010 --> 00:01:07.550
 What about the two largest sources of inflation? 

00:01:07.550 --> 00:01:09.322
 Images and serial data. 

00:01:09.322 --> 00:01:10.340
 For images, 

00:01:10.340 --> 00:01:13.480
 Sometimes the easiest solution is to change the type of file you are using. 

00:01:13.480 --> 00:01:15.990
 I mean, if you do not need transparency, 

00:01:15.990 --> 00:01:21.030
 Avoid using PNG files because they do not compress as easily as their JPEG and WEBP counterparts. 

00:01:21.030 --> 00:01:23.250
 If you are using JPEG or WEBP, 

00:01:23.250 --> 00:01:25.730
 Remember that small changes in image quality 

00:01:25.730 --> 00:01:28.090
 May create significant changes in file size. 

00:01:28.090 --> 00:01:32.730
 You can greatly reduce the image quality settings 

00:01:32.730 --> 00:01:35.040
 Before users begin to notice any issues. 

00:01:35.040 --> 00:01:39.840
 A compromise between quality and size can be a big gain. 

00:01:40.090 --> 00:01:42.380
 It is a multiplier for different types of images. 

00:01:42.820 --> 00:01:45.310
 Thumbnails occupy smaller portions of the screen 

00:01:45.310 --> 00:01:47.920
 It is therefore difficult to observe visual problems. 

00:01:47.920 --> 00:01:52.100
 It can be managed with much lower quality than the full-screen version 

00:01:52.100 --> 00:01:54.360
 Which makes it easy to observe the effects of compression. 

00:01:54.560 --> 00:01:58.120
 Precision is very important for screen sizes and needs. 

00:01:58.120 --> 00:02:02.360
 It is really useless to send a 4 mega pixel image to a device 

00:02:02.360 --> 00:02:04.040
 And use it only as a thumbnail. 

00:02:04.440 --> 00:02:08.709
 Or small-screen devices that can not display the image with that resolution; 

00:02:08.709 --> 00:02:12.970
 So you need to store different quality and resolution levels for the same image on your server. 

00:02:12.980 --> 00:02:14.240
 So you can optimize 

00:02:14.240 --> 00:02:17.140
 So that the smallest size of the files is sent to users. 

00:02:17.140 --> 00:02:19.930
 If you think the pressure will be excessive, 

00:02:19.930 --> 00:02:22.850
 Remember that users pay to download your bloated files. 

00:02:22.850 --> 00:02:24.100
 So shame on you. 

00:02:24.810 --> 00:02:28.040
 Like images, serial data is just as complex. 

00:02:28.040 --> 00:02:31.144
 Both JSON and XML are bad 

00:02:31.144 --> 00:02:32.440
 Compact size hand. 

00:02:32.440 --> 00:02:34.710
 I mean inflation. 

00:02:34.710 --> 00:02:37.280
 Look at all those additional things stacked in these files 

00:02:37.280 --> 00:02:38.870
 To make it readable by the eye, 

00:02:39.060 --> 00:02:41.590
 Such as commas, spaces, quotation marks, and carriage returns. 

00:02:41.930 --> 00:02:45.930
 Your users do not want to pay to send that data to their devices. 

00:02:46.100 --> 00:02:49.090
 Instead, you should use binary sequencing formats. 

00:02:49.090 --> 00:02:52.630
 Proto Buffs, Nano Buffs, and Flat Buffers can all be used on Android 

00:02:52.630 --> 00:02:54.770
 Which can greatly reduce your data footprint 

00:02:54.770 --> 00:02:57.680
 By means of small implementation tradeoffs. 

00:02:57.990 --> 00:03:01.230
 By the way, do not forget that any data you serialize 

00:03:01.230 --> 00:03:04.530
 Will be converted to a compressed GZIP format by the HTTP stack, 

00:03:04.530 --> 00:03:08.140
 This means that the Struct-of-Arrays format should be used 

00:03:08.140 --> 00:03:10.610
 To help pack fields of the same type together 

00:03:10.610 --> 00:03:12.890
 So the LZ phase of the GZIP compression tool can 

00:03:12.890 --> 00:03:15.520
 Better performance in discovering symbolic matches. 

00:03:15.730 --> 00:03:19.888
 If you are uncertain about the amount of assets you send and the cost to your users, 

00:03:19.888 --> 00:03:22.990
 You lose the Networking and Monitor tool in Android Studio 

00:03:22.990 --> 00:03:27.480
 Or ARO tool from AT &amp; T, both of which offer great information 

00:03:27.480 --> 00:03:29.357
 Let you discover problems. 

00:03:29.657 --> 00:03:32.480
 The discovery of problems is the essence of what we do; 

00:03:32.640 --> 00:03:35.460
 So you'll lose the rest of your Android Performance Patterns. 

00:03:35.460 --> 00:03:37.520
 He also joined our Google+ forum 

00:03:37.520 --> 00:03:40.190
 Get great tips from people who've already resolved these issues. 

00:03:40.190 --> 00:03:42.120
 So keep calm, collect your code information 

00:03:42.120 --> 00:03:43.740
 Always remember that performance is important. 

