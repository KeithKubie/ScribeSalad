WEBVTT
Kind: captions
Language: en

00:00:00.300 --> 00:00:03.395
The Angular framework is made up
of several different components.

00:00:03.395 --> 00:00:06.130
We'll be looking at how each of these
components interact with each other

00:00:06.130 --> 00:00:07.910
as we work through this lesson.

00:00:07.910 --> 00:00:11.120
But it's helpful to see roughly how
they all fit together before diving into

00:00:11.120 --> 00:00:12.770
the specifics of each one.

00:00:12.770 --> 00:00:15.850
The first thing we'll look
at is the module component.

00:00:15.850 --> 00:00:19.500
Think of a module as a container that
stores the different parts of an app.

00:00:19.500 --> 00:00:22.370
Like any framework,
Angular provides a templating system

00:00:22.370 --> 00:00:25.480
that let's you format the HTML
structure of your application.

00:00:25.480 --> 00:00:28.120
This is the view part of the NBC

00:00:28.120 --> 00:00:30.320
framework architecture
that Angular follows.

00:00:30.320 --> 00:00:33.900
The controller is where you set up
the initial state and logic for a view.

00:00:33.900 --> 00:00:37.570
The scope is what binds the template
in the controller together.

00:00:37.570 --> 00:00:40.520
When the user interacts with the
template and changes some of the data,

00:00:40.520 --> 00:00:43.940
the scope watches for this change and
updates the controller.

00:00:43.940 --> 00:00:45.030
On the flip side,

00:00:45.030 --> 00:00:48.640
if the data changes in the controller
then the template is updated.

00:00:48.640 --> 00:00:52.760
Directives are markers on a template
that tells the Angular HTML compiler

00:00:52.760 --> 00:00:55.010
to attach special behavior
to a DOM element.

00:00:55.010 --> 00:00:57.870
A service is closely
tied with controllers.

00:00:57.870 --> 00:01:00.980
You would put view independent
logic in a service.

00:01:00.980 --> 00:01:03.640
Then you can use that service
in many different controllers.

00:01:03.640 --> 00:01:07.550
For example, a service could be used
to fetch and store a user object.

00:01:07.550 --> 00:01:11.100
This one service could then be used
in multiple different controllers.

00:01:11.100 --> 00:01:13.100
An Angular app doesn't need a router.

00:01:13.100 --> 00:01:16.590
But the more complicated an app gets,
the more likely it is that you'll want

00:01:16.590 --> 00:01:18.840
one to help manage
the application state.

00:01:18.840 --> 00:01:22.310
Our router will watch the URL and load
the correct template and controller.

00:01:22.310 --> 00:01:24.730
Let's take a look at how to add
Angular to an existing project.

