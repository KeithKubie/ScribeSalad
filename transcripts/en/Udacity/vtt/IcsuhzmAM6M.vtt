WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Here is my solution.

00:00:02.000 --> 00:00:05.000
For subway I decided I'm going to return something that looks

00:00:05.000 --> 00:00:10.000
just like the successor function, only it's going to have all possible successors.

00:00:10.000 --> 00:00:15.000
It's going to be the dictionary of this form for any station that you ask me for.

00:00:15.000 --> 00:00:18.000
Stations are states in this problem.

00:00:18.000 --> 00:00:23.000
All you need to represent a state in this problem is what station am I currently at.

00:00:23.000 --> 00:00:28.000
Each of those I'm going to give you a dictionary that looks like a successor function.

00:00:28.000 --> 00:00:33.000
That is it has a combination of state-action pairs.

00:00:33.000 --> 00:00:38.000
The state is just going to be the neighboring station.

00:00:38.000 --> 00:00:41.000
Then the action is the line that you take.

00:00:41.000 --> 00:00:50.000
For example, if I'm at Bowdoin, then one of the states I can arrive at is government.

00:00:50.000 --> 00:00:53.000
The action I take to get there is follow the blue line.

00:00:53.000 --> 00:00:55.000
How do I do that?

00:00:55.000 --> 00:00:59.000
Well, one thing is I import the collections module.

00:00:59.000 --> 00:01:02.000
I use collections.defaultdict.

00:01:02.000 --> 00:01:05.000
I'm saying successors is a dictionary,

00:01:05.000 --> 00:01:10.000
and by default if there's a value that isn't there, the default is going to be a dictionary.

00:01:10.000 --> 00:01:13.000
Here's what successors look like, and the default value--

00:01:13.000 --> 00:01:18.000
if I ask for the value of a station and there's nothing there, make it be an empty dictionary.

00:01:18.000 --> 00:01:24.000
The line items are a set of line stops pairs.

00:01:24.000 --> 00:01:26.000
I'm going to go over those--line, name, and stops.

00:01:26.000 --> 00:01:31.000
Then I'm going to look at all the overlapping pairs--Bowdoin-government,

00:01:31.000 --> 00:01:38.000
government-state, state-aquarium--that I get by splitting up the stops into a list on spaces.

00:01:38.000 --> 00:01:44.000
Then I'm saying a successor of going from a to b, from Bowdoin to government--

00:01:44.000 --> 00:01:47.000
you can do that along a linename--and similarly going from government to Bowdoin.

00:01:47.000 --> 00:01:50.000
You can do that along the linename here, blue.

00:01:50.000 --> 00:01:52.000
Then return the successors.

00:01:52.000 --> 00:01:56.000
Overlapping_pairs takes any sequence and just gives me those pairs.

00:01:56.000 --> 00:01:59.000
If you give me this sequence of this turned into a list,

00:01:59.000 --> 00:02:02.000
the overlapping_pairs are first bowdoin-government, then government and state,

00:02:02.000 --> 00:02:04.000
then state and aquarium.

00:02:04.000 --> 00:02:07.000
This is useful here, and it's useful in general.

00:02:07.000 --> 00:02:10.000
Here's my ride function. It's now very easy.

00:02:10.000 --> 00:02:13.000
It's the shortest path search. That makes sense.

00:02:13.000 --> 00:02:15.000
I don't need lowest cost search, because there are no costs here.

00:02:15.000 --> 00:02:18.000
I'm just going from one station to the next.

00:02:18.000 --> 00:02:20.000
I start here. Where am I trying to get to?

00:02:20.000 --> 00:02:22.000
Well, the goal is to get to there.

00:02:22.000 --> 00:02:25.000
I'm trying to get to someplace where--and I just put the function in-line here

00:02:25.000 --> 00:02:28.000
rather than defining it separately.

00:02:28.000 --> 00:02:30.000
You could have done it either way.

00:02:30.000 --> 00:02:33.000
Because the functions were short, I decided to put them inline.

00:02:33.000 --> 00:02:36.000
But naming the function would also be fine.

00:02:36.000 --> 00:02:44.000
Lambda s--"s" stands for state or for station or for stop, and we ask "are we there?"

00:02:44.000 --> 00:02:46.000
Then the successor function.

00:02:46.000 --> 00:02:52.000
Well, we've already built up the successor function in this subway system--Boston--

00:02:52.000 --> 00:02:57.000
so we just say looking into boston, that's a dictionary

00:02:57.000 --> 00:03:02.000
and look for the station that I'm currently at, and that will give me a list of successors.

00:03:02.000 --> 00:03:05.000
Then shortest<u>path</u>search does the rest.

00:03:05.000 --> 00:03:07.000
What does longest_ride do?

00:03:07.000 --> 00:03:10.000
First, I have to find all the stops, and that's a little bit complicated,

00:03:10.000 --> 00:03:16.000
because I've hidden them away in this dictionary for the system,

00:03:16.000 --> 00:03:24.000
but I can go through with this generator expression to come up with a set of stops.

00:03:24.000 --> 00:03:28.000
Then I just iterate through all possible stations a and b,

00:03:28.000 --> 00:03:33.000
look for a in all possible stops and for b in all possible stops,

00:03:33.000 --> 00:03:38.000
generate the ride--the shortest<u>path</u>search between them,

00:03:38.000 --> 00:03:41.000
and then take the longest out of all those shortest paths,

00:03:41.000 --> 00:03:44.000
and that's my longest ride.

