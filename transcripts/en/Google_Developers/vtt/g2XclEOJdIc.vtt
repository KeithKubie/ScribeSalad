WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.259
&gt;&gt; WEBBER: Morning everybody. I'm sorry this
is so early. We're all kind of in pain from

00:00:07.259 --> 00:00:09.599
that, I think, after last night's party. My
name is Joel Webber, this is Ray Ryan, both

00:00:09.599 --> 00:00:14.969
from the GWT team. And we're going to talk
a little bit about what we are now referring

00:00:14.969 --> 00:00:21.801
to as our UI overhaul. Don't forget there's
the live wave, good place to ask questions.

00:00:21.801 --> 00:00:28.920
We'll try to pick questions up at the end
from there as well as from the microphones.

00:00:28.920 --> 00:00:32.599
And you can also heckle us virtually from
there and we'll find out about it later.

00:00:32.599 --> 00:00:35.210
&gt;&gt; RYAN: I hope you know how to run that thing.
&gt;&gt; WEBBER: Yeah, I think I do.

00:00:35.210 --> 00:00:36.210
&gt;&gt; RYAN: All right.
&gt;&gt; WEBBER: I hope. So what do we mean by this

00:00:36.210 --> 00:00:38.260
UI overhaul? This is not really a formal process.
This is really just a set of things we've

00:00:38.260 --> 00:00:45.190
been doing recently and been in 2.0 and things
that we are doing as of 2.1 which we're working

00:00:45.190 --> 00:00:49.220
on presently that constitute a lot of major
changes in a way UIs are built in GWT. It's

00:00:49.220 --> 00:00:57.720
not a replacement for what's there for the
most part but a lot of additions and optimizations

00:00:57.720 --> 00:00:59.150
and new bits and pieces. Really four things,
you get UiBinder, if you're working in--the

00:00:59.150 --> 00:01:06.180
first three, if you're working in 2.0 right
now, you're probably at least passingly familiar

00:01:06.180 --> 00:01:08.740
with these things; UiBinder, a way to move
a lot of your code into XML which sometimes

00:01:08.740 --> 00:01:15.440
can generate quite a savings in complexity;
ClientBundle, the way to process CSS, one

00:01:15.440 --> 00:01:21.810
of the biggest paying points I found in GWT
Apps; LayoutPanels, where they cut the collection

00:01:21.810 --> 00:01:26.950
of panels that make--that will hopefully make
most of your layout problems much, much simpler

00:01:26.950 --> 00:01:32.840
to solve. And for these first three, you can
see an update to the mail sample as a 2.0,

00:01:32.840 --> 00:01:34.970
uses all of these features. It's a really
good starting point. They take nothing else

00:01:34.970 --> 00:01:41.380
away. Go look at the way that's built and
that tells you a lot of things about--a lot

00:01:41.380 --> 00:01:43.450
about the things that we changed in 2.0. And
then finally, these things we're referring

00:01:43.450 --> 00:01:49.049
to is either data presentation Widgets or
Cell Widgets depending on the phase of the

00:01:49.049 --> 00:01:53.040
moon that we are adding in 2.1, which will
solve the problem, I think once and for all,

00:01:53.040 --> 00:02:04.460
of building large collections efficiently.
So large tables, large trees, large lists,

00:02:04.460 --> 00:02:31.840
things like that. And I'm going to let Ray
take it and talk about the UiBinder and ClientBundle.

00:02:31.840 --> 00:02:40.160
Those are what his babies.
&gt;&gt; RYAN: Hi. I'm still Ray and...

00:02:40.160 --> 00:02:42.430
&gt;&gt; Louder.
&gt;&gt; RYAN: Hi.

00:02:42.430 --> 00:02:44.700
&gt;&gt; WEBBER:Whoa.
&gt;&gt; RYAN: Okay.

00:02:44.700 --> 00:02:51.510
&gt;&gt; WEBBER: I think that turned up at both
ends.

00:02:51.510 --> 00:03:03.440
&gt;&gt; RYAN: Okay. So you can hear me now? Excellent.
I'm Ray and I'm going to talk to you about

00:03:03.440 --> 00:03:14.780
UiBinder and its best friend ClientBundle.
Like Joel said, these are features that are

00:03:14.780 --> 00:03:41.140
in GWT 2.0 now, had been for a few months,
you can use them today. So UiBinder is a way

00:03:41.140 --> 00:04:00.981
for you to write your HTML User Interfaces
in HTML, which is a pretty natural way to

00:04:00.981 --> 00:04:12.599
go. It gives you a lot of help in getting
rid of the kind of Boilerplate that you face

00:04:12.599 --> 00:04:19.869
when you're dealing with writing [INDISTINCT]
or interfaces in Java, anonymous event classes,

00:04:19.869 --> 00:04:38.279
and that kind of thing. You were into them
a lot less often. And it also encourages you

00:04:38.279 --> 00:04:52.719
to write your Apps in a style that's kind
of inadvertently lead you to write them in

00:04:52.719 --> 00:04:58.800
a more efficient and more performant manner.
You'll use fewer widgets except where they're

00:04:58.800 --> 00:05:05.849
appropriate. You'll wind up with an app with
a smaller footprint. That is not an accident

00:05:05.849 --> 00:05:37.871
to coin a phrase. We're trying to guide you
into the pit of success where the easy and

00:05:37.871 --> 00:05:53.729
pleasant way to work is also the correct way
to work. So, here's how you write UI in Java.

00:05:53.729 --> 00:06:01.219
You're not really expected to be able to read
this. And even if you could read it, I doubt

00:06:01.219 --> 00:06:08.580
you'd have a very clear idea of what was going
to be in front of your users after this code

00:06:08.580 --> 00:06:17.469
and all run. We're kind of making some panels,
and some images, and I think there's some

00:06:17.469 --> 00:06:26.810
text in there and we're going to stick it
up. And it's just a nuisance to write and

00:06:26.810 --> 00:06:32.009
nuisance to maintain. As of GWT 2.0, you can
write it in a style that you, more or less,

00:06:32.009 --> 00:06:36.710
would have written it, had you been working
in a browser in a conventional system. We're

00:06:36.710 --> 00:06:49.490
inside of a bunch of HTML. We got some divs.
Looks like there's going to be a welcome message

00:06:49.490 --> 00:06:56.889
and a signOutLink and an aboutLink and some
serious set styling going on but, as a Web

00:06:56.889 --> 00:07:03.949
developer, you probably understand what's
in front of you here. So let's actually make

00:07:03.949 --> 00:07:09.669
this thing do something. First, you want to
look at the two anchor lines in bold there.

00:07:09.669 --> 00:07:17.819
Those are a couple of GWT widgets that basically
correspond to your old friend "a href=" da,

00:07:17.819 --> 00:07:29.091
da, da, da, da, da. And you see the attribute
on them called UiField. That is telling you

00:07:29.091 --> 00:07:37.149
the name that--and I turn my head, I talk
louder, neat. That's the name that your Java

00:07:37.149 --> 00:07:41.789
code will use to get access to these fields
to actually make them do something interesting.

00:07:41.789 --> 00:07:50.800
So we'll jump over to the Java code that actually
maintains this. Up at the top, you'll see

00:07:50.800 --> 00:07:57.709
we have our UiField annotation declaring that
the signOutLink and the aboutLink need to

00:07:57.709 --> 00:08:04.779
get pressed to us from that XML file that
we talked about. And our constructor, we're

00:08:04.779 --> 00:08:10.509
sub-classing GWT composite here which if you're
a good developer, you're probably familiar

00:08:10.509 --> 00:08:17.960
with. And the only line of code we write to
actually create this interface is a call to

00:08:17.960 --> 00:08:22.970
the create and bind method on our binder and
we pass it in to our net method and it--widget

00:08:22.970 --> 00:08:28.430
method. And for event handling, we're just
doing some more annotation. We're saying that's

00:08:28.430 --> 00:08:36.339
the signOutLink. When it generates a click
event, it should call this method. The aboutLink,

00:08:36.339 --> 00:08:43.219
when it generates a click event, it should
call this method. No anonymous classes, none

00:08:43.219 --> 00:08:50.880
of that nonsense, just make your UI, make
your code, and get on to the actual interesting

00:08:50.880 --> 00:08:53.770
part. Now, one of the other--man...
&gt;&gt; Hello.

00:08:53.770 --> 00:09:01.769
&gt;&gt; RYAN: Hello. One of the other best features
that shipped with GWT 2.0 was the ClientBundle.

00:09:01.769 --> 00:09:11.519
You may have heard Webber talked about this
at previous I/O conventions first as the FooBundle

00:09:11.519 --> 00:09:20.379
then as the ImmutableResourceBundle, which
is my personal favorite version of its name.

00:09:20.379 --> 00:09:26.100
We finally settled on ClientBundle and we
actually shipped the thing. ClientBundle is

00:09:26.100 --> 00:09:35.430
a way to take all of the other stuff that
makes up your App. The styling, the commands

00:09:35.430 --> 00:09:42.660
in CSS, image resources, any text, any other
arbitrary resource types that you want to

00:09:42.660 --> 00:09:49.889
customize the thing to run and bake that right
into your JavaScript. So, A, you have a lot

00:09:49.889 --> 00:09:58.950
less work to do to figure out how you're actually
going to stage this somewhere to pull it in

00:09:58.950 --> 00:10:08.509
with later requests from you App; B, your
users benefit hugely because they have a single

00:10:08.509 --> 00:10:16.389
download that brings in everything at once
rather than multiple network request going

00:10:16.389 --> 00:10:23.350
over to fetch this little image and that little
image and the other little image. We use every

00:10:23.350 --> 00:10:28.110
trick that we can find; spriting to tie all
images together into a single download; data

00:10:28.110 --> 00:10:33.470
resources to bake things in, in a single download
where possible. We know what browser you're

00:10:33.470 --> 00:10:36.730
compiling to so we'll use the tricks that
work for that browser, but not for this browser,

00:10:36.730 --> 00:10:41.250
and so on. Oh, and one key thing to point
out is that we don't just take CSS. We make

00:10:41.250 --> 00:10:47.379
the CSS work a lot more like an engineering
tool. There's no global name issues. If I

00:10:47.379 --> 00:10:56.970
have a style class called main in widget A
and my friend over here have made a class

00:10:56.970 --> 00:11:02.329
called main in widget B, we don't stomp on
each other and we didn't have to agree on

00:11:02.329 --> 00:11:10.170
a convention of having a 24 character long,
this, that, that about the other style name.

00:11:10.170 --> 00:11:17.050
We have conditionals and we have namely constants
and stuff like that. I'm not go into that

00:11:17.050 --> 00:11:23.079
fun to see a success resource because it's
been discussed here before. But look in the

00:11:23.079 --> 00:11:27.950
docks. It's fun. The way it shows up in UiBinder
is with an XML element called UiStyle where

00:11:27.950 --> 00:11:31.430
I'll declare familiar looking CSS like the
main div and this guy should have a background

00:11:31.430 --> 00:11:37.089
color or text color of red. And I'll apply
it in my usual styles at the class attribute.

00:11:37.089 --> 00:11:43.860
The only bit of magic here are the squarely
braces inside the class attribute to indicate--this

00:11:43.860 --> 00:11:59.740
isn't a string that I'm putting here, this
is an actual reference to another part of

00:11:59.740 --> 00:12:12.670
the template. In this case, it--there's a
reference to the style block and the main

00:12:12.670 --> 00:12:20.100
class that was declared inside of there. And
you're not typically going to actually put

00:12:20.100 --> 00:12:34.170
all of your CSS inline in your template like
that. It's nice for sketching, but you won't

00:12:34.170 --> 00:12:48.040
normally work that way. And that's fine. You
can punch it out into a CSS file on the side,

00:12:48.040 --> 00:12:57.600
several CSS files on the side; maybe share
some of those CSS files; that kind of a thing.

00:12:57.600 --> 00:13:10.490
It's not just for play. And of course, when
you're working on interfaces, you don't just

00:13:10.490 --> 00:13:30.829
do styling. You like to use pictures as well
and we've got you covered there. What I'm

00:13:30.829 --> 00:13:47.810
doing here is I'm indicating to the template
that there's an image around here somewhere

00:13:47.810 --> 00:14:05.139
that I want to work with. I'm going to put
it in a field, remember our friend UiField

00:14:05.139 --> 00:14:14.829
named background image. I'm going to assume
that the image file matches the field name,

00:14:14.829 --> 00:14:25.310
and so I don't have to make a separate attribute
for background image.png or whatever. We'll

00:14:25.310 --> 00:14:33.949
just look around. We'll assume that you've
made things sensible, although if you need

00:14:33.949 --> 00:14:53.850
to get more explicit, you can. And finally
in this case, I'm going to mention that when

00:14:53.850 --> 00:15:10.129
this image is used that it's in a context
where repeating is necessary. I want to re-tile

00:15:10.129 --> 00:15:28.769
itself in a horizontal and in a vertical,
both axes. I can now go back down to my CSS

00:15:28.769 --> 00:15:52.110
in the style block there and use a bit of
the CSS magic we've added. The "@sprite" marker

00:15:52.110 --> 00:16:07.119
there indicates that this particular CSS class
is to indicate spriting. It's going to use

00:16:07.119 --> 00:16:28.750
this GWT image specified up above as background
image. And now finally, when I go down to

00:16:28.750 --> 00:16:46.720
my Hello world spam, if I apply that background
style that I've declared here, I'll have my

00:16:46.720 --> 00:17:02.119
nice tasteful image background which, in my
case, tends to be a picture of my son at age

00:17:02.119 --> 00:17:13.309
two, but I'm not sure that would be today.
Finally, the trick that UiBinder knows is

00:17:13.309 --> 00:17:24.170
it ties it nicely to a GWT's internalization
system. Yet that's not new, our ability to

00:17:24.170 --> 00:17:35.549
have localized messages and constants and
so on. What is new is this ability to kind

00:17:35.549 --> 00:17:52.539
of work with it directly in your code. All
I've changed here is I've added this UI message

00:17:52.539 --> 00:18:06.850
element around the existing Hello world message.
And what I've done is I've signaled the GWT

00:18:06.850 --> 00:18:17.430
system that this is a localizable strength.
When the code is compiled, we're going to

00:18:17.430 --> 00:18:26.800
generate on the side for you a properties
file that has all of these messages baked

00:18:26.800 --> 00:18:37.919
into it in the usual key equals Hello world
style, a file that you can hand to your translators

00:18:37.919 --> 00:18:43.860
so that they can in turn provide alternative
languages and you can--and away you can go.

00:18:43.860 --> 00:18:56.000
But an interest to full disclosure, I should
mention that the early users of GWT 2.0--oh,

00:18:56.000 --> 00:19:04.350
I'm sorry. This is a slide I just added. We
can do more than just simple little strings.

00:19:04.350 --> 00:19:15.190
I wanted to point out here that we can have
bits of things that aren't message tucked

00:19:15.190 --> 00:19:27.409
into the middle of the message because of
the wrapping, this can be hard to read but

00:19:27.409 --> 00:19:39.150
what's going on here is we have a message
we're going to show our users that says, "To

00:19:39.150 --> 00:19:43.680
do the thing, click here," and that's going
to be a link that fires off a widget of some

00:19:43.680 --> 00:19:50.940
kind and massage vigorously. On the bottom
here, you can see what gets generated and

00:19:50.940 --> 00:19:59.900
put in front of your translators. They get
two little placeholders there, the 0 and the

00:19:59.900 --> 00:20:12.649
1 to let them know that there's a bit of opacity
here that they can't mess with when they translate

00:20:12.649 --> 00:20:16.899
it. The tokens have to still show up here.
And they can--but they can translate the message

00:20:16.899 --> 00:20:25.000
with all of the context and not breaking it
up into three separate substrings and hoping

00:20:25.000 --> 00:20:32.720
that somehow things get pieced together for
them. I've got the entire message placed there.

00:20:32.720 --> 00:20:43.250
There's actually other attribute to comply
on UI message to give them more of a notion

00:20:43.250 --> 00:20:54.000
of what's going on, to provide a description
for it, and so on. The docks go into some

00:20:54.000 --> 00:21:03.740
detail. Now, for the full disclosure part,
once you've actually compiled the system finding

00:21:03.740 --> 00:21:10.604
the bits and putting them all together and
getting it in front of your users work well

00:21:10.604 --> 00:21:15.950
enough for Google's use. We didn't quite get
the level of [INDISTINCT] that we should have

00:21:15.950 --> 00:21:23.440
to get--make it easier for you to use with
your system. I was so embarrassed by this

00:21:23.440 --> 00:21:29.559
while writing these slides that I finally
updated our public documentation to make it

00:21:29.559 --> 00:21:42.600
really clear how to do that pulling in a lot
of input from a particular bug report that

00:21:42.600 --> 00:21:57.400
I saw on my sleep. So it's all been working
for a while and now you actually have a hope

00:21:57.400 --> 00:22:05.590
of making it work yourself. And that's all
I had to say about UiBinder and ClientBundle.

00:22:05.590 --> 00:22:14.900
I'm going to handoff to Joel now who wrote
all the other interesting stuff and let him

00:22:14.900 --> 00:22:19.710
talk about it.
&gt;&gt; WEBBER: So layout, if you've been using

00:22:19.710 --> 00:22:28.740
GWT for awhile, you probably noticed that
layout is charitably a nightmare. That's true

00:22:28.740 --> 00:22:39.519
of a lot of HTML in each UIs. And we really
have two different approaches in the old way

00:22:39.519 --> 00:22:49.470
of doing things which we'll now be the old
way of doing things. You can either try and

00:22:49.470 --> 00:22:59.159
use tables, put everything where you want
it to go, which I think there's been a large

00:22:59.159 --> 00:23:04.080
complaint about the [INDISTINCT] core widgets
making at things like dock panel, horizontal

00:23:04.080 --> 00:23:11.309
panel, et cetera, et cetera. Worked well for
awhile but it doesn't work so well when it

00:23:11.309 --> 00:23:24.190
get into standards mode. And people hate it
because it makes CSS more of a pain and so

00:23:24.190 --> 00:23:35.980
forth. There's an alternative which is to
try and lay everything out manually. One pixel

00:23:35.980 --> 00:23:49.809
at a time, top to bottom, all encode. And
there are a number of frameworks to take that

00:23:49.809 --> 00:23:58.419
approach and it works, except that it's kind
of slow. And for a lot of the apps that we're

00:23:58.419 --> 00:24:08.910
working on, it's just not sufficient. You
end up with apps that are really, really slow

00:24:08.910 --> 00:24:17.130
to resize, you know, you have to resizing
draggable panels within the app, they're really

00:24:17.130 --> 00:24:34.230
slow, and so forth and so on. We don't want
apps to be out of the box sluggish. And if

00:24:34.230 --> 00:24:44.059
you want to just [INDISTINCT] and make your
apps sluggish, that's fine. But we don't want

00:24:44.059 --> 00:24:54.080
to force you to do that. So we came up with
an alternative that actually turns out there's

00:24:54.080 --> 00:25:00.200
a nice little constraint system hiding inside
CSS that people don't really use all that

00:25:00.200 --> 00:25:09.139
often, probably a number of reasons for that.
It doesn't work out of the box on some older

00:25:09.139 --> 00:25:18.340
versions of some browsers. But it turns out
by using left, top, right, bottom, width,

00:25:18.340 --> 00:25:27.539
and height, those six properties on top of
position absolute in which--please don't react

00:25:27.539 --> 00:25:38.049
when I say position absolute with these actual
constraints that works out fairly well, not

00:25:38.049 --> 00:25:50.779
as bad as it sounds. You actually get something
much more like the "springs &amp; struts" model

00:25:50.779 --> 00:25:57.769
that you have and something like Cocoa or
the old next UIs. Those worked very well in

00:25:57.769 --> 00:26:10.090
practice. So what we built is a series of
widgets, a series of panels, containers that

00:26:10.090 --> 00:26:21.490
use this--they all use the same structure.
There's a core layout system they all share.

00:26:21.490 --> 00:26:28.669
And the purpose of these things is to support
application level layout. In other words,

00:26:28.669 --> 00:26:35.929
there are some things that HTML and CSS layout
models do very well. We should continue using

00:26:35.929 --> 00:26:40.490
HTML and CSS layout for those things. But
for the core screen application structure,

00:26:40.490 --> 00:26:44.950
topper over here, footer over here, scrollable
panel over here, splitter over there, the

00:26:44.950 --> 00:26:51.520
top level of constructs in your app, these
are very, very effective and much more--both

00:26:51.520 --> 00:27:01.350
easier to use, more predictable, and more
efficient than what you get out of source

00:27:01.350 --> 00:27:11.020
standard CSS layout techniques. So all of
them in standards mode, in fact, they require

00:27:11.020 --> 00:27:18.019
standards mode but that shouldn't be a problem
for most people since [INDISTINCT] mode is

00:27:18.019 --> 00:27:29.710
mostly a nightmare. And they support animations
right out of the box. There's actually a good

00:27:29.710 --> 00:27:37.350
reason for doing that because it allows us
to build certain things that would otherwise

00:27:37.350 --> 00:27:50.780
be very difficult just with the simple constraint
system of animation sort of layered on top.

00:27:50.780 --> 00:28:08.399
I'll show a few examples of that in a few
minutes. It also allows us to do things that

00:28:08.399 --> 00:28:11.450
are more efficient out of the box than you
might do by hand unless you're willing to

00:28:11.450 --> 00:28:18.179
go dig very deeply into some [INDISTINCT]
that's required. And they do actually support

00:28:18.179 --> 00:28:24.960
browsers all the way back to IE6 with some
Herculean hackering, but hacker that you don't

00:28:24.960 --> 00:28:33.040
need to know about, unless you're really,
really masochistic to want to read the code.

00:28:33.040 --> 00:28:42.190
What are these things not? I mentioned this
before. If it works well on HTML right now,

00:28:42.190 --> 00:28:48.059
don't use layout panels. That's not the right
place to use them. So forms, document style,

00:28:48.059 --> 00:29:00.039
layouts, most of your widgets will not actually
be used in the structure, just the core screen

00:29:00.039 --> 00:29:08.350
layout. And it's also a simpler layout when
you're maybe used to it, if you're familiar

00:29:08.350 --> 00:29:18.919
with swing or SWT or these other sort of top-down
and bottom-up merged layout models where there's

00:29:18.919 --> 00:29:26.549
a negotiation between the outside and the
inside. This is much simpler. Again, if you're

00:29:26.549 --> 00:29:33.340
familiar with Cocoa and Interface builders,
it's much closer to what you get up there.

00:29:33.340 --> 00:29:42.769
So let me just show you. It's a lot easier
for me to show you than to talk about it.

00:29:42.769 --> 00:29:49.730
Okay, this is the GWT 2.0 mail sample. You
may have noticed this, you may not have noticed

00:29:49.730 --> 00:29:53.480
there is much to notice about it, but it was
different in any significant way. But there

00:29:53.480 --> 00:29:59.960
are some subtle and important differences.
So the first, we see that. And this window's

00:29:59.960 --> 00:30:04.779
a little bit large. Sorry about that. We will
see that it is fast to resize. Now, not only

00:30:04.779 --> 00:30:09.659
is this fast to resize, it's fast to resize
on browsers like Firefox that defer layout.

00:30:09.659 --> 00:30:17.580
So, if you notice on window resize events
on Firefox are deferred. I think Opera does

00:30:17.580 --> 00:30:27.530
the same thing. It's still smooth. So you
won't have this weird horrible structure that

00:30:27.530 --> 00:30:37.890
happens on some apps, even some Google Apps
that you resize the window and the whole thing

00:30:37.890 --> 00:30:48.100
lags and the UI feels sluggish and weird and
flaky. It's very, very solid. It's very, very

00:30:48.100 --> 00:30:56.950
fast in that respect. I mentioned animation
earlier. So these kinds of transitions are

00:30:56.950 --> 00:31:03.639
really, really easy to get out of the box
and they're fast and they're smooth. You never

00:31:03.639 --> 00:31:09.440
have to worry about how well I nested the
dock panel inside the split panel inside a

00:31:09.440 --> 00:31:20.200
stack panel and it jumped upside down and
flipped over and crashed. None of that sort

00:31:20.200 --> 00:31:25.720
thing happens. This is all straight--it's
very straightforward. It's a coherent model

00:31:25.720 --> 00:31:33.809
and it definitely works out of the box everywhere.
And there's no code here to speak of. You

00:31:33.809 --> 00:31:43.049
set up the structure, even the window resize
event has handle it automatically and internally.

00:31:43.049 --> 00:31:52.760
So you don't have to think about things like,
"Okay, I'm going to write some code here to

00:31:52.760 --> 00:32:01.309
figure out when the resize is and I've got
a header up here so I need to measure that

00:32:01.309 --> 00:32:11.220
and subtract 37 pixels, blah, blah, blah,
blah, et cetera." And that's it, I mean, that's

00:32:11.220 --> 00:32:16.440
the idea. These are things that should be
simple and traditionally UI [INDISTINCT],

00:32:16.440 --> 00:32:21.960
they're very straightforward. And GWT and/or
the Web, they have always been kind of a nightmare,

00:32:21.960 --> 00:32:24.241
no longer. I hope. It seems to be working
well so far. So what was actually going on

00:32:24.241 --> 00:32:41.460
in that? This is the--this is a rough fact
simile of some of the mail.

00:32:41.460 --> 00:32:48.330
&gt;&gt; RYAN: Actually, this is the exact copy-paste
of the "mail.ui.xml" file.

00:32:48.330 --> 00:32:57.830
&gt;&gt; WEBBER: Okay. This is not a rough fact
simile. This is actually the "mail.ui.xml"

00:32:57.830 --> 00:33:05.580
file. So what are we looking at here? We got
a DockLayoutPanel. That's something that put

00:33:05.580 --> 00:33:13.250
some things at north, west, you know, just
like the dock panel if you use that before

00:33:13.250 --> 00:33:28.990
in the past. I put a splitter inside the center
region and that splitter contains shortcuts

00:33:28.990 --> 00:33:40.350
on the left-hand side. That's the stack panels
and all that stuff, MailList, MailDetails,

00:33:40.350 --> 00:33:52.289
so forth and so on. So it's straightforward
to use this way. If you set things--if you

00:33:52.289 --> 00:33:58.419
set them up using these structures, it will
more or less, just do exactly what you want

00:33:58.419 --> 00:34:05.519
it to, which is sort of the goal we've always
have. Okay, what does it not give you? It's

00:34:05.519 --> 00:34:14.950
not going to give you, you know, all unicorns
and rainbows. There are some constraints.

00:34:14.950 --> 00:34:26.840
It's not sensitive to preferred size. This
is probably the biggest complaint, but it's

00:34:26.840 --> 00:34:38.670
also the most intractable. And this is much
like, you see--you'll see in a lot of interface

00:34:38.670 --> 00:34:50.010
builder Apps. You kind of have to give these
things the space they need. You can't say,

00:34:50.010 --> 00:35:03.740
for example, make this top section as tall
as the HTML inside at once to push out, it's

00:35:03.740 --> 00:35:17.220
top-down only. And that's actually another
good reason to say this is really only meant

00:35:17.220 --> 00:35:30.160
for application core screen super structure.
You can--it require explicit sizes on a lot

00:35:30.160 --> 00:35:39.020
of places, like you may have noticed on this
case here, DockLayoutPanel--the outer DockLayoutPanel

00:35:39.020 --> 00:35:48.310
specifies that it's in EM units. Those are
font-relative of units. And the north is five

00:35:48.310 --> 00:35:55.330
EMs tall. Good thing about being able to use
things like EMs and percentages is that you

00:35:55.330 --> 00:36:05.650
can make the layout fairly fluid. EMs make
you font size-relative which is really convenient

00:36:05.650 --> 00:36:14.760
and percentages make you container size-relative.
So you can get a lot of things done that way

00:36:14.760 --> 00:36:39.610
even without a preferred size negotiation.
You do get resize events. This is another

00:36:39.610 --> 00:36:54.300
point of contention of the browser the way
it's typically done.

00:36:54.300 --> 00:36:55.610
qwer

00:36:55.610 --> 00:37:20.190
&gt;&gt; WEBBER: ...you do get resize resize events.
This is another point of contention in the

00:37:20.190 --> 00:37:26.840
browser the way it's typically done. With
the exception of Internet Explorer, nobody

00:37:26.840 --> 00:37:34.070
provides an on resize event. It's really unfortunate
because if you've ever had to do something

00:37:34.070 --> 00:37:44.270
like, you have a list of icons and you want
to make it--you only want to render enough

00:37:44.270 --> 00:37:54.150
for the space that you have available in some
panel, there's no way to find out when the

00:37:54.150 --> 00:38:02.700
thing gets resized in the general case. We
provide a limited series of resize events

00:38:02.700 --> 00:38:05.880
that percolate through the layout panel structure.
This seems to work out pretty well for most

00:38:05.880 --> 00:38:07.650
reasonably use-cases, but there are some things
who are--that are a little tricky to do. And

00:38:07.650 --> 00:38:13.920
as I said before, it's not appropriate [INDISTINCT]
during layout. You probably don't want to

00:38:13.920 --> 00:38:19.800
use this to layout your forms. At least not
at the leaves--not near the leaves, you know,

00:38:19.800 --> 00:38:25.839
typical form, HTML form layout structure seemed
to work pretty well for that kind of thing.

00:38:25.839 --> 00:38:32.940
&gt;&gt; RYAN: So one more point to make here before
we enter cellar cells. Although we require

00:38:32.940 --> 00:38:48.770
some explicit sizes, you want to ay attention
to the fact that in the--the main body here,

00:38:48.770 --> 00:38:53.980
the center elements, there's no constraint
provided there. We're requiring you to nail

00:38:53.980 --> 00:39:02.500
down the margins. The body is going to take
up what's available after that. And so, the

00:39:02.500 --> 00:39:12.040
part that needs to be flexible is very flexible.
&gt;&gt; WEBBER: Thanks Ray. I have a bit of underselling

00:39:12.040 --> 00:39:21.140
myself sometimes. Okay, but what you get out
of it? So you have some constraints you have

00:39:21.140 --> 00:39:25.980
to conform to, but it's extremely fast, as
I mentioned, because we're not running any

00:39:25.980 --> 00:39:33.000
code, all right? One of my favorite quote
is "The fastest code is the code you never

00:39:33.000 --> 00:39:38.350
run," and we don't run any code in the default
case. May well--okay, almost no code, some

00:39:38.350 --> 00:39:46.990
small epsilon there. It handles a resize event
to check a few things, but that's it. Everything

00:39:46.990 --> 00:39:57.940
else leans in the browser's native code which
is already running very quickly. Again, you

00:39:57.940 --> 00:40:01.690
don't have to write a window resize listener
and it's actually not leaning on the resize

00:40:01.690 --> 00:40:23.660
listener to do most of the work. So that keeps
it fast and saves you a lot of trouble. If

00:40:23.660 --> 00:40:35.710
you use "em", "ex" font sizes--sorry--unit
sizes, then you can react to font size changes

00:40:35.710 --> 00:40:44.610
automatically. So, you don't have to worry
about, "Well, I made this thing 37 pixels,

00:40:44.610 --> 00:40:52.670
so very wide and it looks great, until my
user decides to magnify the screen." That

00:40:52.670 --> 00:40:59.920
sort of thing is handled automatically. Again,
animation support is built-in because it allows

00:40:59.920 --> 00:41:08.450
you to do things like touch that panel where
it's not--it's normally animating from, you

00:41:08.450 --> 00:41:11.380
know--from here to there, specified in absolute
positions. It's actually animating among constraints.

00:41:11.380 --> 00:41:20.360
So, this thing was constraining to be top
height. I animated it and now it's constrained

00:41:20.360 --> 00:41:25.330
to a different set of constraints that are
bottom height, for example. If you play with

00:41:25.330 --> 00:41:33.930
it, that will make sense. And again, they're
predictable. They do exactly what you want

00:41:33.930 --> 00:41:41.880
them to do. They go exactly where you tell
them to. They don't bounce around on you.

00:41:41.880 --> 00:41:48.700
And another point, it's not a bullet point
in the slide, but another point about performance

00:41:48.700 --> 00:41:55.150
is that because of the way they're constructed,
they also make a number of other things faster.

00:41:55.150 --> 00:42:18.740
They tend to constrain layout, and when I
say layout. And when I say layout, I mean,

00:42:18.740 --> 00:42:26.900
if you Kelly Norton's talk yesterday about
layout performance--a number of things, layout

00:42:26.900 --> 00:42:33.750
performance is among them. You know that browser
layout--the reflow engine can be extremely

00:42:33.750 --> 00:42:40.960
expensive. These things tend to compartmentalize
your layout. So, a lot of things--a lot of

00:42:40.960 --> 00:42:50.270
little things just get faster because they
don't affect each other. Something that when

00:42:50.270 --> 00:42:54.750
your header over here, changing doesn't cause
the browser to reflow this part over here

00:42:54.750 --> 00:42:59.950
that's completely unrelated. That a little--a
subtle but really helpful benefit. So, you

00:42:59.950 --> 00:43:14.490
got everything on the screen. You got it
actually where you want it to go for once,

00:43:14.490 --> 00:43:24.380
and without any major hackery. Probably one
of the biggest complaints we've had after

00:43:24.380 --> 00:43:39.600
layout is, "Okay, I got my app looking great.
I just put, you know, 100 table rows and five

00:43:39.600 --> 00:43:49.010
columns or 10 columns, 20 columns wide. And
it's excruciatingly slow. How do I fix this?"

00:43:49.010 --> 00:44:00.270
And we often said, "Well, you probably shouldn't
be using that many widgets. You got a widget

00:44:00.270 --> 00:44:06.330
in every single table cell here, that's really
expensive." And you say, reasonably, "Well,

00:44:06.330 --> 00:44:17.609
what should I do about that?" And we say,
"Uhh..." we scratch our heads and we come

00:44:17.609 --> 00:44:24.460
up with some strange hacks that involve HTML
and catching events at a high level and trying

00:44:24.460 --> 00:44:30.980
to pump them down and you find yourself in
a world possibly worst than the one you were

00:44:30.980 --> 00:44:41.660
hoping to escape in JavaScript. So we want
to fix that. We've wanted to fix this for

00:44:41.660 --> 00:44:53.330
a long time. And as of 2.1 when this is released
and obviously you can play with it right now.

00:44:53.330 --> 00:45:03.660
We feel like we have a pretty good solution.
We have the underpinnings of a really good

00:45:03.660 --> 00:45:13.530
solution to a lot of these problems. So, again,
we've been giving this advice often, don't

00:45:13.530 --> 00:45:20.130
use so many widgets. Why is that? Widgets
are necessarily more expensive than individual

00:45:20.130 --> 00:45:27.500
DOM elements because they simply have a little
extra book keeping. This is necessary for

00:45:27.500 --> 00:45:34.520
dealing with events properly, it's necessary
for cleaning up after potential memory leaks

00:45:34.520 --> 00:45:45.200
on some browsers and so forth and so on. That
if you don't--in a place where you don't use

00:45:45.200 --> 00:45:51.330
a widget, it will necessarily be faster because
there's no code running. What we're aiming

00:45:51.330 --> 00:46:00.990
to do is to let you get the benefits in this
and the performance of doing everything with

00:46:00.990 --> 00:46:09.920
giant fact inner HTML calls without the excruciating
details of trying to hook up events and keep

00:46:09.920 --> 00:46:21.900
track of all the elements that you've created.
And if you've looked at--if you've use the

00:46:21.900 --> 00:46:33.120
tables in the [INDISTINCT] that shipped in,
well, 1.0 ages ago, you'd noticed--probably

00:46:33.120 --> 00:46:45.090
somewhere around there, 1.1 maybe. We added
the ability to add widgets to everything because

00:46:45.090 --> 00:46:51.180
it was necessary for certain cases. But that
actually was a little bit under constrained.

00:46:51.180 --> 00:47:01.750
So, if you ever have tried to put a tab panel
inside a tree item, probably not. Or if you

00:47:01.750 --> 00:47:16.320
had, it was on a LARK. Definitely it wasn't
a good idea if you did. And it, even if it

00:47:16.320 --> 00:47:27.690
behaved properly, it was probably very, very
slow. What we need is something more constrained

00:47:27.690 --> 00:47:33.470
than that. Again, that's at lists, tables,
and trees. These are the kinds of things,

00:47:33.470 --> 00:47:41.960
what we need large numbers of the same thing
over and over again are very simple things,

00:47:41.960 --> 00:47:48.200
but you need them to be interactive. And--but
that interactivity tends to be limited, buttons,

00:47:48.200 --> 00:47:59.450
check boxes, text inputs, date pickers, you
know, just sort of standard editable table

00:47:59.450 --> 00:48:12.020
stuff has been a nightmare before. Then these,
you know, these one comes a surprise to anyone,

00:48:12.020 --> 00:48:23.650
but these are the kinds of things we're talking
about. We've got a--never mind that the word

00:48:23.650 --> 00:48:33.910
table and trees got reversed today. I'm going
to--I'm going to blame presently on that.

00:48:33.910 --> 00:48:42.660
&gt;&gt; RYAN: That was my fault. Surprise.
&gt;&gt; WEBBER: I'm going to blame Ray. I like

00:48:42.660 --> 00:48:51.630
blaming him presently though because he can't
defend itself. So, of the top we have a tree,

00:48:51.630 --> 00:49:01.110
that's straight out of the average Geo picker.
That is a very, very large tree because it

00:49:01.110 --> 00:49:09.660
includes every region in the world, every
region, city, et cetera, et cetera. But they

00:49:09.660 --> 00:49:16.890
needed a check box in each one because that's
the point. The point is selecting parts of

00:49:16.890 --> 00:49:23.440
a large tree. This is a really common case.
That actually is built out of widgets in the

00:49:23.440 --> 00:49:38.330
current day they may have optimized it by
hand. That should be really easy to do. Tree

00:49:38.330 --> 00:49:46.640
down there--table down there, I can't read,
thank you Ray.

00:49:46.640 --> 00:50:01.310
&gt;&gt; RYAN: They both start with T. I don't see
what you're so worked up about.

00:50:01.310 --> 00:50:10.320
&gt;&gt; WEBBER: So--oh, thanks for fixing that
demo too. I had not made point it out that

00:50:10.320 --> 00:50:20.820
thing was interactive. So, there we have a
table out of the AdWords UI, if you have ever

00:50:20.820 --> 00:50:31.630
used that, the campaign management UI. These
include a couple of really subtlety interactive

00:50:31.630 --> 00:50:52.190
thing and it's actually more interactive than
you can see here because it has a lot of hover

00:50:52.190 --> 00:51:03.040
effects and so forth. Again, the original
implementation used a lot of widgets and it

00:51:03.040 --> 00:51:10.320
was very, very slow. They fixed that by optimizing
by hand, we're taking a lot of the lessons

00:51:10.320 --> 00:51:19.910
they've learned and brought it into this framework.
And then the list here, this is really a good

00:51:19.910 --> 00:51:28.020
example of a thing. This is really a list
of simple things, but they're, I mean they're

00:51:28.020 --> 00:51:37.150
fairly complex. They're not super interactive.
But you need to be able render large numbers

00:51:37.150 --> 00:51:47.870
on them that comes out of way obviously. So,
let me show you an example of we've done.

00:51:47.870 --> 00:51:59.640
You may have seen this in the keynote. I promise
I'm not on wireless this time. So that should

00:51:59.640 --> 00:52:09.500
be a less of a problem. Okay, so this is not
a super exciting app unless you happen to

00:52:09.500 --> 00:52:18.040
be an accountant perhaps. I doubt many of
you are accountants. What's exciting about

00:52:18.040 --> 00:52:28.570
it is, to me anyway, being the performance
freak that I am, is that there are almost

00:52:28.570 --> 00:52:33.720
no widgets in this app, but it was really
easy to construct.

00:52:33.720 --> 00:52:34.720
qwer

00:52:34.720 --> 00:52:38.020
&gt;&gt; WEBBER: ...but it was really easy to construct.
Sorry?

00:52:38.020 --> 00:52:43.930
&gt;&gt; RYAN: I don't say a word.
&gt;&gt; WEBBER: Okay. I'm hearing things now, wonderful.

00:52:43.930 --> 00:52:50.910
Probably, I think on the order on 25 widgets.
The last time I check, it's 25, 26 something

00:52:50.910 --> 00:53:13.040
like that. And they're for things like, you
know, the search box here, the super structure.

00:53:13.040 --> 00:53:28.680
Again, this is using the same layout panels
I showed earlier. But when it comes down to

00:53:28.680 --> 00:53:41.770
individual pieces here, even when they're
interactive in fairly complex ways, they are

00:53:41.770 --> 00:53:54.800
just cells, which is a term I'll introduce
to you in a moment. Table is the same way.

00:53:54.800 --> 00:53:59.770
This, by the way, were some of the animation
stuff we built-in in the layout panels. This

00:53:59.770 --> 00:54:04.920
is--This was--I think this is five or six
lines of codes. But here, we have--so we got

00:54:04.920 --> 00:54:07.950
a table. Oops, if I can click the right thing
with an interactive element, that also is

00:54:07.950 --> 00:54:09.720
a cell. Those are efficient. They're very,
very fast to render. Importantly, I forgot.

00:54:09.720 --> 00:54:17.170
I should remember the number here but last
time, one of my partners in crime measures

00:54:17.170 --> 00:54:18.530
the speed...
&gt;&gt; RYAN: [INDISTINCT] bazillion, I think,

00:54:18.530 --> 00:54:23.550
was the term that we were using.
&gt;&gt; WEBBER: Oh I was actually going to refer--I'll

00:54:23.550 --> 00:54:25.600
be looking for smaller number. I was going
to say, how long does it take to actually

00:54:25.600 --> 00:54:30.820
render this table. And I think it's on the
order of a few milliseconds. That's all backend

00:54:30.820 --> 00:54:33.000
time right there. And what that allows you
to do is crazy things like [INDISTINCT] the

00:54:33.000 --> 00:54:35.350
other day morning where I can do a type of
head search. You know, that is a really simple

00:54:35.350 --> 00:54:43.730
implementation on top of what's already there.
And that's even fast on old crafty slow browsers

00:54:43.730 --> 00:54:54.680
because it's leaning on an HTML to get its
work on. So the point is that of all this

00:54:54.680 --> 00:55:03.000
is that you can do something that's easy to
do. You can create your--create these widgets.

00:55:03.000 --> 00:55:08.400
They're very straightforward. So I use these
widgets to create individual cells to render

00:55:08.400 --> 00:55:16.640
the contents. It's easy to do, but it ends
up being really fast because the interface

00:55:16.640 --> 00:55:25.400
is designed in such a way that you--that give
us enough leverage to be able to leverage

00:55:25.400 --> 00:55:29.760
innerHTML and so forth to get fast rendering,
but still keep them interactive. We have very

00:55:29.760 --> 00:55:38.520
simple idea of how this works. This is the
simplest example I could think of. I got a

00:55:38.520 --> 00:55:49.300
cell list of simple stackedview, got a simple
text cell, the simplest thing you can impossibly

00:55:49.300 --> 00:55:59.900
imagine rendering. So just give me a string,
put it in the cell. And that parameterizes

00:55:59.900 --> 00:56:06.940
the cell list that has--that gives the cell
list a way of rendering itself. And I add

00:56:06.940 --> 00:56:16.700
the view to an adaptor. The adaptor is really
just a convenience class that pushes data

00:56:16.700 --> 00:56:25.760
into it. When you sit down to use it, I think
you'll find that it's really quite straightforward.

00:56:25.760 --> 00:56:38.860
And in that adaptor, this actually behaves
sort of like a glazed list if you ever use

00:56:38.860 --> 00:56:47.010
that sort of library where anything I do in
that Java util list is just reflected automatically

00:56:47.010 --> 00:56:52.290
in the UI. And the cell list itself will go
to great links to make sure that that gets

00:56:52.290 --> 00:56:57.070
optimized. So if I change a few things, it
will try to render the subset that get changed.

00:56:57.070 --> 00:57:01.010
If I change a whole bunch of things at once,
it'll try to render them all together very

00:57:01.010 --> 00:57:05.070
quickly. It's, you know, again, designed to
make sure that that is easy for us to do.

00:57:05.070 --> 00:57:06.640
We have the right APIs so we have that kind
of leverage. No pop quiz on this. I just wanted

00:57:06.640 --> 00:57:08.760
to give a quick overview of the kinds of thing
we're talking about. This is not a really

00:57:08.760 --> 00:57:11.560
complex framework. It's really a small set
of components that are very easy to use together

00:57:11.560 --> 00:57:18.670
but don't require you to buy and do any complicated
MVP architecture or anything like that, but

00:57:18.670 --> 00:57:21.950
are design to work well with anyone. So basically,
you have views, essentially mostly listviews,

00:57:21.950 --> 00:57:26.440
tables or special case of list, entries, or
nested list, so a list that contain list.

00:57:26.440 --> 00:57:36.850
So it's really a small set of concepts there.
You have an adaptor here where, again, which

00:57:36.850 --> 00:57:40.330
is not a special thing. It's just a convenience
class providing list on the client to the

00:57:40.330 --> 00:57:46.010
table or to the view. I have a cell for rendering
the contents and for dealing with events.

00:57:46.010 --> 00:57:48.700
So cells can handle events but in very limited
ways that allow you to build most of what

00:57:48.700 --> 00:57:51.571
you want to build but don't require any heavyweight
architecture, heavyweight bookkeeping work.

00:57:51.571 --> 00:57:52.700
And then your app code, controller, or whatever
you want to call it gets notification of updates.

00:57:52.700 --> 00:57:58.040
So the way that cells are made editable is
that cells provide updates to their content,

00:57:58.040 --> 00:58:00.060
so each cell is bound to a type. So that allows--that
type could be a string or that type could

00:58:00.060 --> 00:58:04.810
be a built-in, an enum, or a complex DTO.
It could be anything you want it to be. Again,

00:58:04.810 --> 00:58:09.680
it's much easier to just dig into the code
and just trying to read that diagram, but

00:58:09.680 --> 00:58:11.130
I just wanted to give a rough overview. So
I think I've already talked to everything

00:58:11.130 --> 00:58:12.130
on the slide, almost. Oh, async data source
is actually--that's actually another core

00:58:12.130 --> 00:58:13.130
really, really in core part of the structure.
It is designed from the ground up to deal

00:58:13.130 --> 00:58:14.130
with asynchronous fetches--a synchronous slow
fetches because we are talking about the distributed

00:58:14.130 --> 00:58:15.130
network that is the Web. It is invariably
slower than you want it to be when you're

00:58:15.130 --> 00:58:16.130
over the Internet. And it can handle push
data. So as long as you can find a way to

00:58:16.130 --> 00:58:18.050
push data down to the client, maybe you're
running an HTML5 App and you're just using

00:58:18.050 --> 00:58:20.820
Web sockets or something really clever like
that, or you're just pulling in the background.

00:58:20.820 --> 00:58:26.100
The views don't have to know about this. You
can always push new data into them and that

00:58:26.100 --> 00:58:34.560
allows us to do all kinds of crazy things
like--well, you saw the automatic update and

00:58:34.560 --> 00:58:35.560
the keynote demo yesterday. You know, that
sort of thing is very easy to do and there's

00:58:35.560 --> 00:58:36.560
no hackery to make that work. And when we
started this, we really found that there weren'tmany

00:58:36.560 --> 00:58:38.680
frameworks that were designed around the asynchrony
that is common in the Web. Most of them tended

00:58:38.680 --> 00:58:40.540
to be--tended to assume that the models backing
up or get the list or reflection were synchronously

00:58:40.540 --> 00:58:42.280
available which requires you to do all sort
of extra levels of caching and things like

00:58:42.280 --> 00:58:43.540
that. So we really set up to make that simple
from a get-go. If it's slow and it's async,

00:58:43.540 --> 00:58:45.110
I can still--the UI is very, very simple to
build. And we also wanted to keep simple stuff

00:58:45.110 --> 00:58:48.690
simple. All right. If I've got a list on the
client, then I should just be able to shove

00:58:48.690 --> 00:58:50.200
it into a view without any extra work and
shouldn't be--shouldn't require me to instantiate

00:58:50.200 --> 00:58:51.870
three or four adaptor classes and a few other
complicated thing. It should be very, very

00:58:51.870 --> 00:58:53.550
simple. I want to talk a little bit about
the cell itself. Cell is actually a very,

00:58:53.550 --> 00:58:54.550
very simple concept. It's a flyweight--roughly
a flyweight pattern. They tend to be stateless,

00:58:54.550 --> 00:58:55.550
except in some rare cases. And this is the
simplest cell you could possibly write. So

00:58:55.550 --> 00:58:56.550
basically, the purpose of a cell is to take
some value, turn it into HTML via string builder

00:58:56.550 --> 00:58:57.550
and then get out of the way. It does very
little alts. I think what's not shown here

00:58:57.550 --> 00:58:58.550
is the event handling structure which is still
in a little bit of flux but it basically allows

00:58:58.550 --> 00:58:59.550
cells to handle events but in a stateless
way so that they could communicate edits to

00:58:59.550 --> 00:59:00.550
the outside world. But again, we've just driven
really to keep that very simple and we'll

00:59:00.550 --> 00:59:02.150
provide a lot of cells out of the box so that
most common cases will be dealt with easily.

00:59:02.150 --> 00:59:03.150
And--wow, did we really just make it all the
way to the end?

00:59:03.150 --> 00:59:04.150
&gt;&gt; RYAN: We did.
&gt;&gt; WEBBER: Every practice, we ran 15 minutes

00:59:04.150 --> 00:59:05.150
over. I can't really--we have lots of time
for questions...

00:59:05.150 --> 00:59:06.150
&gt;&gt; RYAN: He's not even talking fast. I don't
know what we did.

00:59:06.150 --> 00:59:07.150
&gt;&gt; WEBBER: So, four things, ClientBundle,
let you actually process all the things that

00:59:07.150 --> 00:59:08.150
weren't processing before, images, CSS really
makes your life simpler in a lot of cases.

00:59:08.150 --> 00:59:09.150
UiBinder, get rid of Boilerplate, [INDISTINCT]
and HTML which makes your life easier hopefully.

00:59:09.150 --> 00:59:10.940
And again, as Ray said before, just drive
it as the pit of success, make the easy thing

00:59:10.940 --> 00:59:18.470
the fast thing so that the App you want to
write is the one you want to end up with.

00:59:18.470 --> 00:59:21.722
And layout, make layout work, make it fast,
make it easy, make it predictable so you can

00:59:21.722 --> 00:59:22.722
stop worrying about it and just move on and
write you App. And again, these Cell Widgets,

00:59:22.722 --> 00:59:23.722
make it fast and efficient and simple and
easy to render large collections, again, so

00:59:23.722 --> 00:59:24.722
you can stop worrying about--hopefully, you
stop worrying about UI performance

00:59:24.722 --> 00:59:25.722
problems and worry about your actual app.
And I'm still stunned we have this much time.

00:59:25.722 --> 00:59:26.770
It's great. So, again, there is the live wave.
There is, hopefully, there are some questions

00:59:26.770 --> 00:59:27.770
on it which we'll switch to in a moment. And
this link may even work if we're lucky, the

00:59:27.770 --> 00:59:28.770
thing on where Ray assigned you.
&gt;&gt; RYAN: Oop, I'm sorry. I forgot about that

00:59:28.770 --> 00:59:29.770
bit of magic. Yeah. Please standby.
&gt;&gt; WEBBER: Cool. You're about to login at

00:59:29.770 --> 00:59:30.770
your own account.
&gt;&gt; RYAN: Oh, so I am.

00:59:30.770 --> 00:59:31.770
&gt;&gt; WEBBER: So, why don't we start with audience
questions while we figure that out? [INDISTINCT].

00:59:31.770 --> 00:59:32.770
&gt;&gt; Hello.
&gt;&gt; WEBBER: Does it work?

00:59:32.770 --> 00:59:33.770
&gt;&gt; Mic does work.
&gt;&gt; WEBBER: I think so.

00:59:33.770 --> 00:59:34.770
&gt;&gt; Hi. I was hoping if you guys could quickly
explain how I could create my own widgets

00:59:34.770 --> 00:59:35.770
in the UiBinder. I mean, I understand that
there's a parser that you will have to overwrite

00:59:35.770 --> 00:59:36.770
if it is--if it's not so.
&gt;&gt; RYAN: Ninety percent of widgets work right

00:59:36.770 --> 00:59:37.770
out of the box. If your widget works in a
bean style--you can mess with that, I'll answer

00:59:37.770 --> 00:59:38.770
this while I answer this.
&gt;&gt; WEBBER: All right.

00:59:38.770 --> 00:59:39.770
&gt;&gt; RYAN: If you write your widget in a bean
style, zero args constructor, setters and

00:59:39.770 --> 00:59:40.770
getters then it'll just go. Every attribute
that you set in the XML element will result

00:59:40.770 --> 00:59:41.770
in a set call. We've recognized a lot of the
primitive types out of the box. So if you

00:59:41.770 --> 00:59:42.770
put--if I have set height takes an int argument,
I'm going to make sure that the user provides

00:59:42.770 --> 00:59:43.770
you with an actual int literal and we'll throw
appropriate exceptions if they don't.

00:59:43.770 --> 00:59:44.770
&gt;&gt; Right.
&gt;&gt; RYAN: As of the GWT 2.1 release, we'll

00:59:44.770 --> 00:59:45.770
even show you the line numbers on the on the
error messages that we generate them which

00:59:45.770 --> 00:59:46.770
was going over sight. You have--and even with
those constraints, you've got back doors,

00:59:46.770 --> 00:59:47.770
like for example, if you're--we need to work
with a widget that does have constructor arguments,

00:59:47.770 --> 00:59:48.770
you've got the UI factory annotation so let
you indicate a method that's responsible for

00:59:48.770 --> 00:59:49.770
instantiating these things, so you can take
care of that encode. You can actually annotate

00:59:49.770 --> 00:59:50.770
the constructor itself saying I want the arguments
on this constructor to be available as attributes

00:59:50.770 --> 00:59:51.770
that the user can set from the markup, and
so on. There are cases where we have to rely

00:59:51.770 --> 00:59:52.770
on customized parsing. We haven't yet opened
up--we haven't made that customized parsing

00:59:52.770 --> 00:59:53.770
stuff pluggable. It's rare that it's actually
necessary. We will get to ramping that at

00:59:53.770 --> 00:59:54.770
some point but we've managed to get away without
doing so this long because most people don't

00:59:54.770 --> 00:59:55.770
ask for it.
&gt;&gt; Okay. Thank you.

00:59:55.770 --> 00:59:56.770
&gt;&gt; RYAN: Mm-hmm... Okay. So you want to do
one mic, one mic, and pick from the screen?

00:59:56.770 --> 00:59:57.770
&gt;&gt; WEBBER: Sure. Here's I'll give you one
screen here. Wow, that's a lot of percent

00:59:57.770 --> 00:59:58.770
20s in that question. He probably spends way
too much time running URLs. Let's see. Let

00:59:58.770 --> 00:59:59.770
me see if I can read this. Are there any plans
to add more example documentation based around

00:59:59.770 --> 01:00:00.770
the UI overhaul? Yes, absolutely, absolutely.
So one of the things that I really wanted

01:00:00.770 --> 01:00:01.770
to do in 2.0 but fell behind on, and I'm working
on it right now is a new sample we're calling

01:00:01.770 --> 01:00:02.770
the Cookbook for one of the better term. It
will have a lot of necessarily called recipes,

01:00:02.770 --> 01:00:03.770
but we're really trying--really trying to
cover all the cases that people are actually

01:00:03.770 --> 01:00:04.770
running into and we're accumulating lots of
questions, bug reports, discussions on fora

01:00:04.770 --> 01:00:05.770
and so forth that point to a lot of common
cases where people get stuck. We're going

01:00:05.770 --> 01:00:06.770
to try to encode those all on the sample.
So rather than have a sample that shoots a

01:00:06.770 --> 01:00:07.770
tour of what's there, it's--the idea is more
to cover all of the things that you would

01:00:07.770 --> 01:00:08.770
actually want to do and practice so that hopefully,
you can just go find one of those, copy and

01:00:08.770 --> 01:00:09.770
paste that out, then tweak it to your heart's
content. So we definitely recognized that

01:00:09.770 --> 01:00:10.770
there is a bit of a failing on in terms of
the guidance provided by samples and that's

01:00:10.770 --> 01:00:11.770
definitely something we're working on. That
already is checked into the....

01:00:11.770 --> 01:00:12.770
qwer

01:00:12.770 --> 01:00:13.770
&gt;&gt; WEBBER: ...that's definitely something
we're working on. That already has checked

01:00:13.770 --> 01:00:14.770
in to the Byte Shed code, by the way, in the
[INDISTINCT], sort of [INDISTINCT] you look

01:00:14.770 --> 01:00:15.770
at it, it is actually there. It's a little
sketchy right now or a little bit of a rough

01:00:15.770 --> 01:00:16.770
sketch but we'll keep iterating on it in there.
&gt;&gt; RYAN: Go ahead.

01:00:16.770 --> 01:00:17.770
&gt;&gt; Hey, there, I've used the duct panel layout
before and I really liked the way that the

01:00:17.770 --> 01:00:18.770
north and the south stayed put on the top
and the bottom of the browser and then the

01:00:18.770 --> 01:00:19.770
center panel is expanded to fit the remaining
space. But in the used case of having the

01:00:19.770 --> 01:00:20.770
header and the footer at the bottom of the
page where you want the scroll bar to be the

01:00:20.770 --> 01:00:21.770
entire page, do you have any plans to make
a layout panel like that?

01:00:21.770 --> 01:00:22.770
&gt;&gt; WEBBER: There's not a formal layout panel
that handles that out of the box, but it is

01:00:22.770 --> 01:00:23.770
actually pretty easy to construct. I'll give
you a very rough idea, and that's actually

01:00:23.770 --> 01:00:24.770
one of the samples that I'm putting in to
Cookbook because so that's came up a few times.

01:00:24.770 --> 01:00:25.770
What you do there--is there's the base layout
that has--it allows you to specify pretty

01:00:25.770 --> 01:00:26.770
much any kinds of constraints you can imagine,
a sort of an--it allows you to pretty much

01:00:26.770 --> 01:00:27.770
build anything but it's a little bit like
brain surgery. Well, maybe, a dietary or something,

01:00:27.770 --> 01:00:28.770
not like brain surgery. What you would essentially
do is add something that--add one panel, one

01:00:28.770 --> 01:00:29.770
child that's constrained to be top, left,
right bottom zero that is all pinned to the

01:00:29.770 --> 01:00:30.770
edges, that has the scroll bar. And then anything
you want to float on top of that, you just--you

01:00:30.770 --> 01:00:31.770
can constrain it to be actually on top of
it. So, for example, header and footer would

01:00:31.770 --> 01:00:32.770
be, you know; top, zero; height, 5m, just
something like that; and then bottom, zero;

01:00:32.770 --> 01:00:33.770
height, 5m with the footer. The underlying
panels that had a scroll bar within it, would

01:00:33.770 --> 01:00:34.770
still be scrolled underneath that, so it covered
the whole--it would cover the whole screen,

01:00:34.770 --> 01:00:35.770
and it would look as though, where the document
level scroll. It's not actually the document

01:00:35.770 --> 01:00:36.770
level scroll, it's actually just sitting underneath
it but it gives you the same effect. And it

01:00:36.770 --> 01:00:37.770
actually ends up being a lot more efficient
when scrolling the entire document because

01:00:37.770 --> 01:00:38.770
things like pop-ups don't have to be moved
to cache when you scroll the document around.

01:00:38.770 --> 01:00:39.770
&gt;&gt; Okay, thank you.
&gt;&gt; WEBBER: Does that maker sense?

01:00:39.770 --> 01:00:40.770
&gt;&gt; Yeah, the header moves with that scrolling,
right. The header doesn't stay at the top.

01:00:40.770 --> 01:00:41.770
&gt;&gt; WEBBER: Right and it looks like it's moving
with the scrolling but it's actually just

01:00:41.770 --> 01:00:42.770
sitting on top of it.
&gt;&gt; Got you.

01:00:42.770 --> 01:00:43.770
&gt;&gt; WEBBER: But it has the same effect and
it's faster. Go for it.

01:00:43.770 --> 01:00:44.770
&gt;&gt; Thanks, Joel.
&gt;&gt; WEBBER: Sure. All right, better theme.

01:00:44.770 --> 01:00:45.770
Who's--who was going to work on the better
theme? John is that you? No, we a--we definitely

01:00:45.770 --> 01:00:46.770
are looking into creating much better themes
out of the batch right now, they're pretty

01:00:46.770 --> 01:00:47.770
weak, we recognized that. In 1.5, we had themes
that were not and quite as incredibly bad

01:00:47.770 --> 01:00:48.770
as the ones in very first release. But there
are--there's a lot more work that we're doing

01:00:48.770 --> 01:00:49.770
on that front. And we've recruited UI designers
internally to help out with that process.

01:00:49.770 --> 01:00:50.770
We're also looking at ways to--because CSS
resource, UI binder and all this stuff is

01:00:50.770 --> 01:00:51.770
fairly new, we haven't actually reworked all
the way that we just work yet. This is also

01:00:51.770 --> 01:00:52.770
the incumbent complaint, so it's hard to mix
these with sort of traditional way to--perhaps,

01:00:52.770 --> 01:00:53.770
sort of two-styling mechanisms. So after [INDISTINCT]
some I/O, we all [INDISTINCT] for a few days.

01:00:53.770 --> 01:00:54.770
We're going to be looking at creating themes
that can actually can be used with CSS resource

01:00:54.770 --> 01:00:55.770
to gain the efficiency benefits from that
but still be flexible and still allow you

01:00:55.770 --> 01:00:56.770
to pick and choose how you want to play on
different widgets and so forth. And as part

01:00:56.770 --> 01:00:57.770
of that process we will de-uglify them as
well. So, hopefully that would be helpful.

01:00:57.770 --> 01:00:58.770
&gt;&gt; RYAN: Go ahead.
&gt;&gt; Could you talk about the division of labor

01:00:58.770 --> 01:00:59.770
on UiBinder templates? So, I could imagine
somebody with HTML, CMSs skills starting off

01:00:59.770 --> 01:01:00.770
with something at HTML CMS and hand it over
to a GWT program who converts it or the GWT

01:01:00.770 --> 01:01:01.770
program that does the whole thing or you go
back and forth. Could you talk about the tradeoffs?

01:01:01.770 --> 01:01:02.770
&gt;&gt; RYAN: We've seen all those things happen.
It's very common. The common point is that

01:01:02.770 --> 01:01:03.770
you usually have a designer working at the
prototype in HTML, and then they throw it

01:01:03.770 --> 01:01:04.770
over the wall to the engineer. I think the
web microprocessors were giving enough that

01:01:04.770 --> 01:01:05.770
you can get something that renders pretty
quickly and then work over to try to factor

01:01:05.770 --> 01:01:06.770
things in the widgets that should with it
and so on. I know of at least one team, and

01:01:06.770 --> 01:01:07.770
I hope that they're not an exception. They
had actually a lot of luck with setting up

01:01:07.770 --> 01:01:08.770
their designer with the host of development
mode build of their product talking to a mock

01:01:08.770 --> 01:01:09.770
backend so that he could actually work. And
they thought him enough eclipse to get it

01:01:09.770 --> 01:01:10.770
to start and type in the files and mess with
the stuff, and hit the refresh button on their

01:01:10.770 --> 01:01:11.770
browser with thicken of backend that things
refreshed and rebuilt quickly, and they actually

01:01:11.770 --> 01:01:12.770
have a quite awhile of success with that.
I've heard of other counter examples where

01:01:12.770 --> 01:01:13.770
designers got very frustrated at dealing with--they're
used to looking in Firefox and using Firebug

01:01:13.770 --> 01:01:14.770
and messing with the CSS names there and we
given these horrible mangled [INDISTINCT]

01:01:14.770 --> 01:01:15.770
names. One way to make that more tolerable
is to find the configuration option; I don't

01:01:15.770 --> 01:01:16.770
remember that at the top of my head, to turn
off, at least tone down [INDISTINCT] of the

01:01:16.770 --> 01:01:17.770
CSS names. We can't just leave them completely
unmodified because--then we lose the name

01:01:17.770 --> 01:01:18.770
spacing. And all of the sudden those collisions
I talked about start to happen and your app

01:01:18.770 --> 01:01:19.770
goes up. But you can still at least read the
things. I personally--when I'm messing with

01:01:19.770 --> 01:01:20.770
it, well, I'll tend to experiment with inline
styles on the specific elements and then go

01:01:20.770 --> 01:01:21.770
back to my code to a--or my templates to put
the successful experiments on the class names,

01:01:21.770 --> 01:01:22.770
that kind of thing. We want to make that better
for designers.

01:01:22.770 --> 01:01:23.770
&gt;&gt; WEBBER: Yeah. That's still in the very
much brainstorming phase. I mean making the--especially

01:01:23.770 --> 01:01:24.770
the Firebug, dev tools, loop closer--close
that loop. A couple of other things, I want

01:01:24.770 --> 01:01:25.770
to mention, you mentioned, dead mode setup
for designer. A way that I've actually seen

01:01:25.770 --> 01:01:26.770
that worked really well is you don't even
have to install eclipse for them because the...

01:01:26.770 --> 01:01:27.770
&gt;&gt; RYAN: Push up.
&gt;&gt; WEBBER: If you give them the browser plug-in

01:01:27.770 --> 01:01:28.770
and just give them the URL to point at, you
can run several clients off of dev but simultaneously.

01:01:28.770 --> 01:01:29.770
If you set up a machine where they can work
to get the refresh cycle going, and they--people

01:01:29.770 --> 01:01:30.770
have used text involving and shared directories,
and things like that. So, they're editing

01:01:30.770 --> 01:01:31.770
one file but they don't actually even know--have
know about eclipse. And by the way, in case

01:01:31.770 --> 01:01:32.770
you're, I'm sure, at least somebody in this
room is thinking, that's great but dead mode

01:01:32.770 --> 01:01:33.770
refreshes really slow. We absolutely know
that and there are people in Atlanta right

01:01:33.770 --> 01:01:34.770
now working very diligently on making that
less true. So, hopefully that will also help

01:01:34.770 --> 01:01:35.770
that process. Are there any--just plans to
add a designer functionality to plug in, it

01:01:35.770 --> 01:01:36.770
significantly speed up more in tasks. We are
not, to my knowledge, planning on actually

01:01:36.770 --> 01:01:37.770
building designer our self into the equipments
plug-in. There is at least one really good

01:01:37.770 --> 01:01:38.770
one from instantiations that a--it's been
a lot--it's been a little while since I've

01:01:38.770 --> 01:01:39.770
used it But they are actually out in the Sandbox
demonstrating it right now. Those guys are

01:01:39.770 --> 01:01:40.770
much better at GUI builders than we are. So,
we prefer to let the experts do there thing.

01:01:40.770 --> 01:01:41.770
That would be the best recommendation that
I'm aware of for doing--for getting a sort

01:01:41.770 --> 01:01:42.770
drag and drop functionality.
&gt;&gt; RYAN: Go ahead.

01:01:42.770 --> 01:01:43.770
&gt;&gt; I played with Roo yesterday and had it
generate a--kind of scuffled that application

01:01:43.770 --> 01:01:44.770
and noticed that it was using some other things
besides what you've covered, that seemed almost

01:01:44.770 --> 01:01:45.770
a little bit more of an MVP framework, a little--some
more framework level components, like place

01:01:45.770 --> 01:01:46.770
and some other class that I haven't heard
of before.

01:01:46.770 --> 01:01:47.770
&gt;&gt; RYAN: I'll be talking about that in depth
this afternoon at 3:30.

01:01:47.770 --> 01:01:48.770
&gt;&gt; Okay.
&gt;&gt; RYAN: And while you're looking at that

01:01:48.770 --> 01:01:49.770
why don't you start to bump into the works
and the missing creatures, please understand

01:01:49.770 --> 01:01:50.770
that it's very much a work in progress. There
are probably whole layers of abstraction that

01:01:50.770 --> 01:01:51.770
will go away and will certainly change radically.
&gt;&gt; Yeah, it just--it looked interesting like

01:01:51.770 --> 01:01:52.770
you guys are providing a little more framework
to get an app running.

01:01:52.770 --> 01:01:53.770
&gt;&gt; RYAN: We are definitely working on an application
framework and that will be part of the 2.1.

01:01:53.770 --> 01:01:54.770
&gt;&gt; How about new data binding API? We have
a data binding API.

01:01:54.770 --> 01:01:55.770
&gt;&gt; RYAN: That is also part of the application
framework.

01:01:55.770 --> 01:01:56.770
&gt;&gt; Okay, I'll trust you on that. So come to
the talk at 3:30 and/or watch it on YouTube.

01:01:56.770 --> 01:01:57.770
&gt;&gt; So you mentioned that much of the speed
of the data presentation widgets in 2.1 comes

01:01:57.770 --> 01:01:58.770
from taking the thing and making it a giant
set in your HTML. Right now, I'm using Grid

01:01:58.770 --> 01:01:59.770
and FlexTable, and there's a thing called
the setText, which specifically does set in

01:01:59.770 --> 01:02:00.770
our texts...
&gt;&gt; WEBBER: Right.

01:02:00.770 --> 01:02:01.770
&gt;&gt; ...so that won't render HTML on the screen.
Is there going to be something similar to

01:02:01.770 --> 01:02:02.770
that for the data presentation widgets?
&gt;&gt; WEBBER: So, yes and no. Essentially out

01:02:02.770 --> 01:02:03.770
of the box--not exactly, but it should be
really easy to get the same effect. So when

01:02:03.770 --> 01:02:04.770
you saw that list example I setup before,
there was a--this is the simple case where

01:02:04.770 --> 01:02:05.770
I just have data on my client. I want to get
it into the widget fast. I don't want to involve

01:02:05.770 --> 01:02:06.770
some data fetching layer or anything like
that. The structure there that we're settling

01:02:06.770 --> 01:02:07.770
on is essentially like glazed lists where
you can--you have--you have one adaptor class

01:02:07.770 --> 01:02:08.770
to re-instantiate that binds to the table
and the lists in tables are more or less the

01:02:08.770 --> 01:02:09.770
same structure; they're just telling definitions
that break fields out into columns. And you

01:02:09.770 --> 01:02:10.770
would simply be operating on, say, a Java
Util list instead of a--like a setText call,

01:02:10.770 --> 01:02:11.770
but the effect should be the same. But the
effect is the same, but if you make a hundred

01:02:11.770 --> 01:02:12.770
calls to it to set up lots of rows, the widget
will optimize that automatically. So, you

01:02:12.770 --> 01:02:13.770
don't have the effect where the amount of
data you're changing really affects the speed

01:02:13.770 --> 01:02:14.770
of you're app very much in a really significant
way. So, essentially yes but slightly different.

01:02:14.770 --> 01:02:15.770
&gt;&gt; Thank you.
&gt;&gt; WEBBER: Sure. Ah, let's see, use templates

01:02:15.770 --> 01:02:16.770
in UI binder. I'm not quite sure how to parse
that question.

01:02:16.770 --> 01:02:17.770
&gt;&gt; RYAN: You can only use templates in UiBinder.
&gt;&gt; WEBBER: That sounds good.

01:02:17.770 --> 01:02:18.770
&gt;&gt; RYAN: I've tried to understand the question.
&gt;&gt; WEBBER: [INDISTINCT]. Hopefully that was

01:02:18.770 --> 01:02:19.770
clear enough.
&gt;&gt; RYAN: Okay. And I think over there.

01:02:19.770 --> 01:02:20.770
&gt;&gt; Yeah. Could you talk a little bit about
the limitations and the considerations you

01:02:20.770 --> 01:02:21.770
have--you need to have in mind for developing
for mobile devices, specifically for Android

01:02:21.770 --> 01:02:22.770
and iPhone. I have to run through some hoops
just to get the scroll is in the swipe motion.

01:02:22.770 --> 01:02:23.770
It seems to be not straightforward, so could
you talk about any limitations?

01:02:23.770 --> 01:02:24.770
&gt;&gt; WEBBER: Sorry, the--what's the part about
scrolling again?

01:02:24.770 --> 01:02:25.770
&gt;&gt; Scrolling, you know, if you just swipe
your finger and get the scrolling effect.

01:02:25.770 --> 01:02:26.770
&gt;&gt; WEBBER: Right.
&gt;&gt; I have to run through some hoops, it wasn't

01:02:26.770 --> 01:02:27.770
straightforward.
&gt;&gt; WEBBER: Uh-hmm, it's true. So, when it

01:02:27.770 --> 01:02:28.770
comes to supporting mobile devices, we really
have two problems, I guess. I mean, ignoring--just

01:02:28.770 --> 01:02:29.770
keeping your apps small enough to start efficiently
and so forth which is more of just a scale

01:02:29.770 --> 01:02:30.770
issue. One is--again, your rendering has to
be fast enough that populating individual

01:02:30.770 --> 01:02:31.770
pages is not slow, that's part of what we've
designed these data presentation widgets to

01:02:31.770 --> 01:02:32.770
solve. On mobile, we found--we've measured
that even filling in a fairly large list is--could

01:02:32.770 --> 01:02:33.770
measured in milliseconds in terms about the
time it takes. But there are lot of APIs we

01:02:33.770 --> 01:02:34.770
currently had not route. And that is some--that
is a gap we have to close in the near future.

01:02:34.770 --> 01:02:35.770
So things you mentioned like swipe gestures
and so forth, those are things that for which

01:02:35.770 --> 01:02:36.770
there are built-in events. But we simply haven't
brought an interface to them yet. And we're

01:02:36.770 --> 01:02:37.770
looking, probably in the third quarter, so
to be focusing on closing the gap on a lot

01:02:37.770 --> 01:02:38.770
of these things. There is also the issue,
subtle issue but it's also the issue of scrolling

01:02:38.770 --> 01:02:39.770
an interior area. So, you've noticed most,
not all but the vast majority of mobile web

01:02:39.770 --> 01:02:40.770
apps will scroll the entire screen. In other
words, they just let things flow naturally

01:02:40.770 --> 01:02:41.770
and that's where you have to scroll the whole
thing. And if you've seen for example, the

01:02:41.770 --> 01:02:42.770
mobile Gmail App, they do some crazy hacks
to work around the problem that you need,

01:02:42.770 --> 01:02:43.770
say, an archive button that stays available
on the screen. So one of these things will

01:02:43.770 --> 01:02:44.770
sort of float around and try to follow you.
What we have found is that, with the newest

01:02:44.770 --> 01:02:45.770
releases of all the mobile browsers, later
iPhone releases, later Android releases, it's

01:02:45.770 --> 01:02:46.770
become possible to actually synthesized the
need of scrolling behavior and still keeps

01:02:46.770 --> 01:02:47.770
a headers and footers and then swipe animations
and all of that. Actually, Apple really showed

01:02:47.770 --> 01:02:48.770
the way on that with their--if you look at
the iPhone help app, they have pretty much

01:02:48.770 --> 01:02:49.770
duplicated the native functionality in JavaScript.
And we're looking to--we just begun actually

01:02:49.770 --> 01:02:50.770
doing the same thing in our own code.
&gt;&gt; Just a follow up question, how does the

01:02:50.770 --> 01:02:51.770
Gmail do it? Because it seems to do it really
well.

01:02:51.770 --> 01:02:52.770
&gt;&gt; WEBBER: My understanding of what Gmail
is doing, and it's been a little while since

01:02:52.770 --> 01:02:53.770
I've used the mobile version, since I got
my Android phone, I believe what they are

01:02:53.770 --> 01:02:54.770
doing is, they're using regular document level
scroll, but then when you--when it settles

01:02:54.770 --> 01:02:55.770
down, the little floaty bar just eventually
follows you. So, it waits a minute to catch

01:02:55.770 --> 01:02:56.770
up, so it's not constantly interfering with
the UI and slowing things down but then it

01:02:56.770 --> 01:02:57.770
slides back into place. You can do that sort
of thing but I think, ultimately, the better

01:02:57.770 --> 01:02:58.770
solution is to actually make it behave more
like a native App, because that what everybody

01:02:58.770 --> 01:02:59.770
really wants. That's what I really want anyway
so.

01:02:59.770 --> 01:03:00.770
&gt;&gt; RYAN: Cross-site widgets. Cross-site widget;
what's a better way to add them to the page

01:03:00.770 --> 01:03:01.770
UI without using a div element ID key to locate
the injection points.

01:03:01.770 --> 01:03:02.770
&gt;&gt; WEBBER: I would ask that you follow up
with the question on the users group. I'm

01:03:02.770 --> 01:03:03.770
not quite sure I understand the question.
And, well, the new Cookbook--I'll just jump

01:03:03.770 --> 01:03:04.770
to the next really quickly because it's easy.
Will the new Cookbook contain an event bus

01:03:04.770 --> 01:03:05.770
example? I certainly hope so. That would be
Ryan's job to do though.

01:03:05.770 --> 01:03:06.770
&gt;&gt; RYAN: I'm the...
&gt;&gt; WEBBER: [INDISTINCT]

01:03:06.770 --> 01:03:07.770
&gt;&gt; RYAN: Roo is generating an event plus example
for you, right now. And it will be generating

01:03:07.770 --> 01:03:08.770
a better event bus example for you before
we shift, then again, I'll talk about that

01:03:08.770 --> 01:03:09.770
some at 3:30.
&gt;&gt; My question is about infinite scrolling.

01:03:09.770 --> 01:03:10.770
Yesterday, you mentioned it with the bit of
a brain surgery, can you comment, how would

01:03:10.770 --> 01:03:11.770
you proceed with this surgery? How would you
do it? And also, in what you have right now,

01:03:11.770 --> 01:03:12.770
as I understand this adaptor, you put data
there, you're supposed to put all the data

01:03:12.770 --> 01:03:13.770
at once and then it...
&gt;&gt; WEBBER: Right.

01:03:13.770 --> 01:03:14.770
&gt;&gt; ...like everything on your page, like candid
elements or div elements.

01:03:14.770 --> 01:03:15.770
&gt;&gt; WEBBER: Exactly. So that adaptor really--just
to be really clear. I think, I probably wasn't

01:03:15.770 --> 01:03:16.770
as clear about this as I should have been,
that adaptor class was a convenience class

01:03:16.770 --> 01:03:17.770
or when you do want to just punch large amounts
of data into the widget directly and have

01:03:17.770 --> 01:03:18.770
it just sit there. The general--the more general
interface, the listview delegates to something

01:03:18.770 --> 01:03:19.770
that asks, the list you keep track of a range.
So for paging, for example, just a simple

01:03:19.770 --> 01:03:20.770
case, it says, I'm looking at items 37 to
230 rate. The adaptor or the thing that is

01:03:20.770 --> 01:03:21.770
providing data to the listview is responsible
for making sure it gives that data. That's

01:03:21.770 --> 01:03:22.770
sort of the asynchronous nature of it. For
paging, I think it's pretty clear how that

01:03:22.770 --> 01:03:23.770
would work. For the infinite scrolling or
sort of on demand rendering, it's the same

01:03:23.770 --> 01:03:24.770
idea except that the range is more fluid.
I have some samples sort half-baked on my

01:03:24.770 --> 01:03:25.770
desktop right now that implement this and
it actually works really, really well in practice

01:03:25.770 --> 01:03:26.770
even the basic data sources. So, for example,
one of the Cookbook samples I want to create,

01:03:26.770 --> 01:03:27.770
once I get the widgets in place is a Flickr
browser. And I found--I've been able to flick--browse

01:03:27.770 --> 01:03:28.770
through thousands of icons, thousands and
thousands of icons really smoothly, really

01:03:28.770 --> 01:03:29.770
efficiently and without having to fetch data
in advance. So, look for those, probably in

01:03:29.770 --> 01:03:30.770
the Byte Shed and the first--in the near future
and a...

01:03:30.770 --> 01:03:31.770
&gt;&gt; RYAN: The Expenses App, is that used the
list [INDISTINCT] or did you do a customized...

01:03:31.770 --> 01:03:32.770
&gt;&gt; WEBBER: the Expenses App has a custom adaptor
that does handle the async data source.

01:03:32.770 --> 01:03:33.770
&gt;&gt; RYAN: And the app is like a generated by
[INDISTINCT]. So don't use the listview adapter.

01:03:33.770 --> 01:03:34.770
It's really quite trivial to use your own
if that's the appropriate thing to do. The

01:03:34.770 --> 01:03:35.770
listview adapter is a convenience when you've
got list to run.

01:03:35.770 --> 01:03:36.770
&gt;&gt; WEBBER: They'll be sent out of the box
for handling simple cases. For slightly less

01:03:36.770 --> 01:03:37.770
simple and made after case but, you know,
simple backend data source cases.

01:03:37.770 --> 01:03:38.770
&gt;&gt; Thank you.
&gt;&gt; We're using the paging scroll table and

01:03:38.770 --> 01:03:39.770
the incubator. How is your new table related
to that? Is it complete rewrite? Is the interface

01:03:39.770 --> 01:03:40.770
completely different?
&gt;&gt; WEBBER: It is a mostly complete re-write

01:03:40.770 --> 01:03:41.770
but we've taken a lot of lessons learned from
that table, from that implementation, we learned

01:03:41.770 --> 01:03:42.770
a lot of good things and we learned a lot
of bad things in the process.

01:03:42.770 --> 01:03:43.770
&gt;&gt; Can you say, what's some of the weaknesses
of the incubator one was?

01:03:43.770 --> 01:03:44.770
&gt;&gt; WEBBER: Ah, lets see, and the guy who wrote
it just left. So, I'll have to bug him later

01:03:44.770 --> 01:03:45.770
but...
&gt;&gt; RYAN: I remember it being hard to customize,

01:03:45.770 --> 01:03:46.770
when we kept bringing stuff in there. It was
difficult to make it fast. You had...

01:03:46.770 --> 01:03:47.770
&gt;&gt; WEBBER: Right, actually...
&gt;&gt; RYAN: [INDISTINCT] actually get bulk rendering

01:03:47.770 --> 01:03:48.770
to work...
&gt;&gt; WEBBER: Right.

01:03:48.770 --> 01:03:49.770
&gt;&gt; RYAN: Rather than--but when we did that,
that's like, all we do now.

01:03:49.770 --> 01:03:50.770
&gt;&gt; WEBBER: Right, and the interface--exactly,
so the things like bulk rendering were these

01:03:50.770 --> 01:03:51.770
weird--I mean even the term is kind of odd
and awkward. There are these--sort of weird

01:03:51.770 --> 01:03:52.770
bolt-on cases and we really sort of flipped
the problem around and made it--made the efficient

01:03:52.770 --> 01:03:53.770
thing the easy thing rather than something
you do after you've gotten it working and

01:03:53.770 --> 01:03:54.770
then find out that it's slow. It also doesn't
try--there are certain things that that table

01:03:54.770 --> 01:03:55.770
tried to do, that we've just later on proven,
especially with the help of Speed Tracer team,

01:03:55.770 --> 01:03:56.770
are just physically impossible to do it efficiently
in the browser. So it tried to do things where

01:03:56.770 --> 01:03:57.770
it would adjust column sizes to the size of
the contents and so forth, and they just never

01:03:57.770 --> 01:03:58.770
really worked very well for those cases. And
we found like, it really caused the AdWords

01:03:58.770 --> 01:03:59.770
team no sense of--no end of trouble. So, what
we're trying to do is extract the use-cases.

01:03:59.770 --> 01:04:00.770
And I think we're mostly there at this point.
So, extract the use-cases that we know can

01:04:00.770 --> 01:04:01.770
be made to work well. So, we don't try to
send you down to this primrose path and find

01:04:01.770 --> 01:04:02.770
out later that you've ended up in a place
where you just can't get a fast app. We hoped

01:04:02.770 --> 01:04:03.770
the transition move really straightforward
and if it's--to the extent that it's not,

01:04:03.770 --> 01:04:04.770
hopefully we can. We'll try to provide samples
to make it clear how to move from one to the

01:04:04.770 --> 01:04:05.770
other. There will be a number of teams within
Google as well who are in the same situation.

01:04:05.770 --> 01:04:06.770
Sir?
&gt;&gt; Yeah, so I think the cell stuff is really

01:04:06.770 --> 01:04:07.770
interesting in terms of, you know, getting
away from widgets. I'm not at all by means

01:04:07.770 --> 01:04:08.770
an expert, but I thought the widgets were
really interesting because there's--like one

01:04:08.770 --> 01:04:09.770
of their jobs is handle all the cross browser
of idiosyncrasies, So when you start doing

01:04:09.770 --> 01:04:10.770
in like cells. And all of a sudden, they have
input, you know, boxes in them and all of

01:04:10.770 --> 01:04:11.770
those that are just like really native input
boxes--is all of a sudden --is it going to

01:04:11.770 --> 01:04:12.770
be easier to just build apps with no widgets
at all? Like what, like--even your search

01:04:12.770 --> 01:04:13.770
boxes. You said, "Well, the search box is
a widget." But if you're doing input boxes

01:04:13.770 --> 01:04:14.770
in cells, can't we just do input boxes anywhere
that aren't widgets basically?

01:04:14.770 --> 01:04:15.770
&gt;&gt; WEBBER: Right. What I actually see happening
there is--well one, I see that we will provide

01:04:15.770 --> 01:04:16.770
a lot of these cells out of the box that already
handle a lot of the stuff for you. So, and

01:04:16.770 --> 01:04:17.770
if there--if there are cross-browser issues
that sit on top of--higher than the down level,

01:04:17.770 --> 01:04:18.770
they will still be doing some work to take
it--to deal with those kinds of situations.

01:04:18.770 --> 01:04:19.770
But the other thing that I see happening is--so
the cell on its own can't handle events. It

01:04:19.770 --> 01:04:20.770
needs help from something to do that. And
that's where a lot of the deficiency comes

01:04:20.770 --> 01:04:21.770
from, but that has to move into the container.
What I would like to see happen is that we

01:04:21.770 --> 01:04:22.770
see a series of widgets come into being, or
in some cases, just mutating the ones that

01:04:22.770 --> 01:04:23.770
are there so that they have a cell at their
core and they provide the feature--the facilities

01:04:23.770 --> 01:04:24.770
that the container would otherwise provide.
So if you need to use a select box and a regular

01:04:24.770 --> 01:04:25.770
widget context or a form or something like
that, you can still do that just as easily

01:04:25.770 --> 01:04:26.770
but at sharing the same infrastructure. This
is the way a lot of, more traditionally, UI

01:04:26.770 --> 01:04:27.770
toolkits work as well if in fact the term
cell, we stole from Cocoa essentially, we

01:04:27.770 --> 01:04:28.770
stole it from--I've forgotten whom. But hopefully,
that will provide more of a coherent stack

01:04:28.770 --> 01:04:29.770
and a kind of smooth transition from, you
know, if I got it here in a widget, I probably

01:04:29.770 --> 01:04:30.770
got here in the cell as well that's appropriate.
So you can mix and match more easily but still

01:04:30.770 --> 01:04:31.770
not deal with cross-browser issues...
&gt;&gt; RYAN: Looking at the--sorry.

01:04:31.770 --> 01:04:32.770
&gt;&gt; WEBBER: Okay.
&gt;&gt; RYAN: Looking at the clock in the back,

01:04:32.770 --> 01:04:33.770
I think we're out of time.
&gt;&gt; I just--do you have a timeframe on when

01:04:33.770 --> 01:04:34.770
that might happen?
&gt;&gt; Well--actually, they're probably the best

01:04:34.770 --> 01:04:35.770
there. Everybody's behind so we're going to
run outside and be available right out the

01:04:35.770 --> 01:04:36.770
front door if that's okay.
&gt;&gt; RYAN: Thank you.

01:04:36.770 --> 01:04:36.773
&gt;&gt; WEBBER: Thanks everybody.

