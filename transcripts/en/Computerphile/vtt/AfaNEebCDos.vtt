WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.570
We're going to look at an example of property based testing. [I'm] going to show quick check

00:00:03.570 --> 00:00:07.710
Which is the tools [I] work with and the idea here is your test software

00:00:08.380 --> 00:00:10.979
And that's very important to get software right?

00:00:11.360 --> 00:00:19.180
But thinking out all of the cases that you want to test is not something that is very popular with software developers actually

00:00:19.540 --> 00:00:23.940
And so [are] it's often not really done as thoroughly as you would like

00:00:24.280 --> 00:00:30.510
And what I'm going to show you is a tool that we can use for generating tests so that instead of running?

00:00:30.510 --> 00:00:33.540
Maybe you know a few dozen tests. You make up by hand

00:00:33.730 --> 00:00:40.320
[we] can run hundreds of thousands or millions and get much more confidence [for] [the] software really behaves the way that we wanted to

00:00:44.420 --> 00:00:50.149
Temple which is going to test that text message encoding, so this is actually a part of the 2g

00:00:51.120 --> 00:00:53.839
[11th] Standard, so it's got old [but] then

00:00:54.600 --> 00:01:00.229
[I] [think] we'll introduce text messaging that they were just making you for some spare bits that within the packages

00:01:00.869 --> 00:01:04.489
And they wanted to fit as many characters they could into a text message

00:01:04.890 --> 00:01:11.899
And there's only so much space so they realized that they only needed seven bits per character [from] so that [we] decided to use

00:01:12.149 --> 00:01:17.239
But when you put those seven, [but] characters into the messages you have to fit into 8-bit byte

00:01:17.240 --> 00:01:21.379
And that means that you can fit eight characters in 27 bites

00:01:21.479 --> 00:01:26.059
So of course the standard says you must do that, and that means the way you have a message

00:01:26.060 --> 00:01:29.690
[you] [want] to send you have to encode it by packing [a] [bit] closer together?

00:01:29.909 --> 00:01:33.109
And when you receive it you have to decode it and here

00:01:33.110 --> 00:01:39.110
I've got back some code that came from the company in France does that ankle Candy coating so let me just start by

00:01:39.179 --> 00:01:42.439
Showing the code that we got so here it is. This is that line code?

00:01:42.959 --> 00:01:43.979
and

00:01:43.979 --> 00:01:48.648
This is the code for packing characters. You can see there's plenty of it

00:01:49.289 --> 00:01:52.969
This is it comes from unpacking them again, and there's plenty of that

00:01:53.039 --> 00:01:55.039
And we're not going to look in detail at this

00:01:55.219 --> 00:01:58.069
The only thing I want to point out is that a lot of code and it's complex

00:01:58.320 --> 00:02:01.009
So it's quite easy to imagine that they might be an error in there

00:02:02.310 --> 00:02:04.310
So course we need test that

00:02:04.439 --> 00:02:10.518
And down here we have some test code and what it does is it says well. Let's just take a sample message

00:02:11.120 --> 00:02:12.000
Let's try

00:02:12.000 --> 00:02:13.350
[backing] it

00:02:13.350 --> 00:02:18.649
And then unpacking it and what it will call that tea and at the end of the day what we get after unpacking

00:02:18.900 --> 00:02:21.500
must be the same as the message to be started off with

00:02:22.049 --> 00:02:28.309
and then there's a little test suite here that says just try that for a number of different strings and with

00:02:28.500 --> 00:02:33.739
Somebody thought about this little bit and they tried all left that message from 0 to 10, so yeah

00:02:33.750 --> 00:02:40.009
Hopefully it works for these [strings] that will work in general what we can do now is just don't compile a program

00:02:40.620 --> 00:02:43.970
[just] done and now I can run that test code [I] do so

00:02:44.489 --> 00:02:49.489
Then we get [them] [out] [put] all of the [task] [past]. That's good it seems to work

00:02:51.090 --> 00:02:55.909
But of course what always demonstrated is it [works] for these particular ten strings, so you might wonder?

00:02:56.550 --> 00:03:01.949
if we give it another message, is there a risk that the code won't actually work as we expect, so

00:03:02.710 --> 00:03:05.879
That gives us a chance to use a test generation tool

00:03:06.310 --> 00:03:08.310
and when we use quick check

00:03:08.550 --> 00:03:13.290
I go back to code here actually have what we call it quick check property that is the way that we

00:03:13.540 --> 00:03:19.499
Write tests with property based testing we want something that's supposed to be true in general of our code here

00:03:19.500 --> 00:03:22.080
[I'm] saying for all messages or msGS not

00:03:22.180 --> 00:03:26.760
Just pretend that test which our list of [7th] values

00:03:26.760 --> 00:03:28.760
So they're made of the 7th character

00:03:28.960 --> 00:03:33.689
Then if I pack that message and one packet [I] should get the best

00:03:33.760 --> 00:03:38.369
Off with that says the same thing [as] the test [I] had before but it says it in general

00:03:38.560 --> 00:03:45.929
And that means that now I can use quick check to generate many tests [are] like and make sure that [coastal] works

00:03:46.510 --> 00:03:53.099
[let] me go back to my test execution window here, and I will just use quick check

00:03:53.740 --> 00:04:00.329
Call it and I'll give it that [property] that. I just showed an argument and we'll see what happened

00:04:01.239 --> 00:04:02.650
well

00:04:02.650 --> 00:04:10.590
After only a little more than a hundred test quick found an example in which the [prophet] doesn't hold and what you see here is

00:04:11.140 --> 00:04:14.000
first of all a randomly generated message

00:04:14.850 --> 00:04:17.549
It's a sequence of bytes which appears numbers here

00:04:17.549 --> 00:04:22.769
You can think of it as a message, and that message was not packed and unpacked correctly

00:04:23.350 --> 00:04:29.399
So after finding a random example like this quick goes on to simplify the [same] case as much as we can

00:04:29.800 --> 00:04:34.650
And we end up with this message. Which is just eight zeros

00:04:34.690 --> 00:04:41.010
So why does [quickcheck] say the problem occurs with eight zeros and not for example 70?

00:04:41.740 --> 00:04:43.060
well

00:04:43.060 --> 00:04:45.330
because if you have 70 still works

00:04:46.350 --> 00:04:49.049
So this is the smallest example that doesn't work

00:04:49.750 --> 00:04:51.750
and if I think which again

00:04:52.210 --> 00:04:59.640
You see that it starts off finding a different random example, but when it simplifies the test case we get the same

00:05:00.460 --> 00:05:05.549
80 [this] is one of the key things about this kind of property based testing you always get

00:05:05.860 --> 00:05:10.509
The simplest case because you know it's the simplest that tells you a lot about what the problem might be

00:05:11.719 --> 00:05:19.509
[okay], so it seems to be something to do with being a characters long. So maybe it works for all other [lengths]

00:05:20.719 --> 00:05:22.430
What I can do is I can

00:05:22.430 --> 00:05:25.810
investigate when the coattails now by changing my property

00:05:26.419 --> 00:05:31.989
So if I go back to the property out here at [the] what it says for every list of seven that bike

00:05:32.240 --> 00:05:39.519
Packing unpacking [gives] [us] [a] result now. I'm going to add identification. [I'm] going to say for every list of seven bit byte

00:05:40.159 --> 00:05:42.999
Provided the length of the message is not [ate]

00:05:43.610 --> 00:05:49.930
That should work, [so] my hypothesis is that the length of eight characters problem? Let's just test now

00:05:50.479 --> 00:05:52.069
messages of other lands

00:05:52.069 --> 00:05:55.959
[I] do that. [I] just recompile test code and rerun could check

00:05:57.289 --> 00:06:04.718
Now [two] [thousand] [tests] passed. So maybe I was right. I'll just run a few more tests. Which I can do five

00:06:05.930 --> 00:06:07.930
[growing] test let's say 10 seconds

00:06:10.219 --> 00:06:12.219
[There] Are [0]

00:06:12.440 --> 00:06:14.120
It still doesn't work

00:06:14.120 --> 00:06:17.199
So now we find another example. [we're] packing and unpacking

00:06:17.779 --> 00:06:21.189
Failed this is actually consists of 16 zeros

00:06:21.860 --> 00:06:28.569
So maybe it's not just being of length [8] that matters may be any multiple of 8 is also the case that I fail

00:06:29.569 --> 00:06:34.688
But let's investigate that [I] can go back to my property and I can change it to say that

00:06:35.750 --> 00:06:37.339
provided the length

00:06:37.339 --> 00:06:43.719
Is not a multiple of 8 that's what that means then packing and unpacking the message should give me the same result back

00:06:44.330 --> 00:06:45.889
and if I

00:06:45.889 --> 00:06:47.889
We can buy that and run the test again

00:06:48.490 --> 00:06:50.360
Now quick check is

00:06:50.360 --> 00:06:56.500
Discarding some tests [with] the crosses mean so running lost every [dollar] [is] a passing tests or by now for [Dr.]

00:06:56.539 --> 00:06:59.109
10,000 passing [test] the cross is a test that

00:06:59.360 --> 00:07:06.639
Where a multiple of 8 quick check is not found failing case after a hundred ninety-five thousand tests so that suggests that we're right

00:07:07.250 --> 00:07:10.089
But as long as the lens isn't a multiple of 8 then

00:07:11.210 --> 00:07:13.210
Code works

00:07:13.230 --> 00:07:16.159
But I can also investigate the problem more closely [I] know

00:07:16.680 --> 00:07:21.500
When the test is when the messages of multiple date then the constant of sales

00:07:21.500 --> 00:07:25.489
but doesn't always [sale] let me go back to my property and I'll just

00:07:26.070 --> 00:07:28.820
Take that out for truth and said we got nothing

00:07:29.400 --> 00:07:32.360
Instead of generating any listed as a message

00:07:32.360 --> 00:07:37.550
[I'll] just generate list of 98 and I was focusing testing on the case on suspicious of

00:07:39.300 --> 00:07:42.379
[its] every message of Mentaiko drawing. Let's find out

00:07:43.080 --> 00:07:46.009
[I'll] run these tests [that] everybody's hands and fate

00:07:46.710 --> 00:07:52.999
And what you know some of them passed [38s] past obviously many things are correctly encoded

00:07:53.220 --> 00:07:57.110
But this example is not found, or [is] this example now?

00:07:57.110 --> 00:07:58.850
I want to look at the random example that failed

00:07:58.850 --> 00:08:00.180
And [that's] that's [a] few more of them

00:08:00.180 --> 00:08:01.350
one of the nice things about

00:08:01.350 --> 00:08:07.670
Generating tests as you can see a lot of different examples of the same thing so is there anything in common between that first example

00:08:08.040 --> 00:08:15.860
This other one can see that full of different values of numbers those are all different wait a minute. [look] at the last number there

00:08:16.470 --> 00:08:20.570
[and] the last one here left one here. They all end in 0

00:08:21.270 --> 00:08:23.989
[that's] very unlikely to happen by chance

00:08:25.620 --> 00:08:28.850
so maybe the code works unless

00:08:30.450 --> 00:08:34.160
the messages of multiple of 8 in length and the Last character 0

00:08:34.830 --> 00:08:40.280
[let's] test that hypothesis. [I'll] just change this still [to] runtastic [Wednesday] put to say

00:08:41.219 --> 00:08:44.119
provided the last character of the message

00:08:44.910 --> 00:08:48.049
Is not 0 then the coach should work [ok]?

00:08:48.840 --> 00:08:51.919
So am I right in my postures let's find out

00:08:54.600 --> 00:08:57.410
Whoa [now] all of the test statistic?

00:08:58.860 --> 00:09:05.900
And after 10 seconds, we'll see we run to [continue] two thousand tests without a 0 in the last position

00:09:06.420 --> 00:09:08.310
[they] all passed

00:09:08.310 --> 00:09:11.650
So that strong evidence that the hypothesis right [okay]?

00:09:13.470 --> 00:09:18.540
So now without even looking at complicated code. We understand the problem very well

00:09:18.940 --> 00:09:24.450
We know it happens when the messages of multiple date. We know that happens when the last character [0]

00:09:25.180 --> 00:09:28.289
And if we think about it, we can actually understand. Why this is happening

00:09:29.380 --> 00:09:32.510
When we pack a number of characters in two bites?

00:09:33.600 --> 00:09:35.600
They're always going to be some bits left over

00:09:36.400 --> 00:09:40.740
What happens if we pack 7 characters in 27 bites?

00:09:41.680 --> 00:09:44.609
[what] happens is that there are seven bits left over?

00:09:46.480 --> 00:09:48.010
70 bits

00:09:48.010 --> 00:09:50.010
that looks very like

00:09:50.470 --> 00:09:54.569
Eight characters where the last 10 [and] that's the problem

00:09:55.180 --> 00:09:58.409
it's a problem in the standard [car] distinguish between

00:09:58.900 --> 00:10:05.459
A message that contains eight characters with zero at the end as a message to [just] [contains] the first seven

00:10:06.610 --> 00:10:14.279
And it's a known problem. So there's nothing found it except I suggest not putting their characters in your messages

00:10:18.520 --> 00:10:23.559
We realized that we were all working with very much the same kind of programming language

00:10:24.140 --> 00:10:27.790
But because we each had our own combiner. We couldn't share any [cooked]

00:10:27.790 --> 00:10:29.480
We couldn't share our results

00:10:29.480 --> 00:10:35.259
And that just like a waste of effort so that led to the proposal to just

00:10:35.630 --> 00:10:37.840
Take the common core of what we're all doing

