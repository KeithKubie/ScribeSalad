WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.100
[JET BLAST]

00:00:04.100 --> 00:00:06.130
LYLA FUJIWARA: At
Google I/O 2017,

00:00:06.130 --> 00:00:08.117
we announced the
Lifecycle Library.

00:00:08.117 --> 00:00:10.450
The Lifecycle Library is a
set of libraries and guidance

00:00:10.450 --> 00:00:12.850
for avoiding memory leaks
and solving common Android

00:00:12.850 --> 00:00:14.410
lifecycle challenges.

00:00:14.410 --> 00:00:16.600
Now the Lifecycle
Library has hit 2.0.

00:00:16.600 --> 00:00:17.800
It's part of Jetpack.

00:00:17.800 --> 00:00:20.200
And it includes new
integrations with data binding.

00:00:20.200 --> 00:00:23.740
This is a tour of the Lifecycle
Library's ViewModel class.

00:00:23.740 --> 00:00:26.290
A ViewModel holds
your app's UI data

00:00:26.290 --> 00:00:28.520
while surviving
configuration changes.

00:00:28.520 --> 00:00:30.249
Here's why that's
actually useful.

00:00:30.249 --> 00:00:32.290
Rotating your phone is
considered a configuration

00:00:32.290 --> 00:00:33.070
change.

00:00:33.070 --> 00:00:35.470
Configuration changes
cause your whole activity

00:00:35.470 --> 00:00:37.960
to get torn down
and then recreated.

00:00:37.960 --> 00:00:40.330
If you don't properly
save and restore data

00:00:40.330 --> 00:00:43.420
from the destroyed activity,
you may lose that data

00:00:43.420 --> 00:00:46.810
and end up with weird
UI bugs or even crashes.

00:00:46.810 --> 00:00:48.700
So enter the ViewModel,
which, of course,

00:00:48.700 --> 00:00:50.660
survives configuration changes.

00:00:50.660 --> 00:00:53.650
Instead of storing all of
your UI data in your activity,

00:00:53.650 --> 00:00:55.780
put it in the ViewModel instead.

00:00:55.780 --> 00:00:57.850
Now, this helps with
configuration changes,

00:00:57.850 --> 00:01:00.970
but it's also just general
good software design.

00:01:00.970 --> 00:01:03.280
One common pitfall when
developing for Android

00:01:03.280 --> 00:01:05.770
is putting a lot of
variables, logic, and data

00:01:05.770 --> 00:01:07.640
into your activities
and fragments.

00:01:07.640 --> 00:01:10.300
This creates a large,
unmaintainable mess of a class

00:01:10.300 --> 00:01:13.210
and violates the single
responsibility principle.

00:01:13.210 --> 00:01:16.880
You can use ViewModels to easily
divide out that responsibility.

00:01:16.880 --> 00:01:18.880
The ViewModels will be
responsible for holding

00:01:18.880 --> 00:01:21.550
all of the data that you're
going to show in your UI.

00:01:21.550 --> 00:01:23.860
And then the activity
is only responsible

00:01:23.860 --> 00:01:26.470
for knowing how to draw
that data to the screen

00:01:26.470 --> 00:01:30.040
and receiving user interactions,
but not for processing them.

00:01:30.040 --> 00:01:32.020
If your app loads
and stores data,

00:01:32.020 --> 00:01:34.090
I suggest making a
repository class,

00:01:34.090 --> 00:01:36.362
as described in the "Guide
to App Architecture."

00:01:36.362 --> 00:01:38.320
Make sure your ViewModel
doesn't become bloated

00:01:38.320 --> 00:01:40.060
with too many responsibilities.

00:01:40.060 --> 00:01:42.370
To avoid this, you can
create a presenter class

00:01:42.370 --> 00:01:46.050
or implement a more fully
fledged clean architecture.

00:01:46.050 --> 00:01:47.800
OK, so to make a
ViewModel, you'll

00:01:47.800 --> 00:01:49.950
end up extending
the ViewModel class.

00:01:49.950 --> 00:01:52.390
And then you put your
UI-related instance variables

00:01:52.390 --> 00:01:55.210
that were previously in your
activity into your ViewModel.

00:01:55.210 --> 00:01:57.100
Then in your
activity's onCreate,

00:01:57.100 --> 00:01:59.590
you get the ViewModel from
a framework utility class

00:01:59.590 --> 00:02:02.020
called ViewModel Provider.

00:02:02.020 --> 00:02:05.380
Notice the ViewModel Provider
takes an activity instance.

00:02:05.380 --> 00:02:06.820
This is the
mechanism that allows

00:02:06.820 --> 00:02:10.180
you to rotate the device, get
a technically new activity

00:02:10.180 --> 00:02:13.630
instance, but always ensure that
activity instance is associated

00:02:13.630 --> 00:02:15.290
with the same ViewModel.

00:02:15.290 --> 00:02:16.790
With the ViewModel
instance, you can

00:02:16.790 --> 00:02:18.340
use Getters and
Setters to access

00:02:18.340 --> 00:02:20.120
UI data from your activity.

00:02:20.120 --> 00:02:22.300
If you want to modify the
default constructor, which

00:02:22.300 --> 00:02:24.100
currently takes
no parameters, you

00:02:24.100 --> 00:02:27.320
can use a ViewModel Factory to
create a custom constructor.

00:02:27.320 --> 00:02:30.010
Now, this is the simplest
use case of a ViewModel.

00:02:30.010 --> 00:02:32.380
But the ViewModel class is
also designed to work well

00:02:32.380 --> 00:02:34.300
with LiveData and data binding.

00:02:34.300 --> 00:02:37.640
Using all of these together,
you can create a reactive UI,

00:02:37.640 --> 00:02:40.300
which is just a fancy way of
saying a UI that automatically

00:02:40.300 --> 00:02:43.060
updates whenever the
underlying data changes.

00:02:43.060 --> 00:02:45.100
This assumes all of your
data in your ViewModel

00:02:45.100 --> 00:02:48.070
that you plan to show on
screen is wrapped in LiveData.

00:02:48.070 --> 00:02:50.780
You then should set up
data binding as normal.

00:02:50.780 --> 00:02:52.480
Here's an example
XML with the data

00:02:52.480 --> 00:02:54.340
binding layout tag
and the variable tag

00:02:54.340 --> 00:02:55.740
for your ViewModel.

00:02:55.740 --> 00:02:57.340
Then in your
activity or fragment,

00:02:57.340 --> 00:03:00.310
you associate the variables used
in the XML with the binding.

00:03:00.310 --> 00:03:02.380
Here's an example
with an activity.

00:03:02.380 --> 00:03:05.560
There's one new line of
code, setLifecycleOwner.

00:03:05.560 --> 00:03:07.900
This allows the binding to
observe your LiveData objects

00:03:07.900 --> 00:03:08.950
in the ViewModel.

00:03:08.950 --> 00:03:10.420
And it's essentially
the magic that

00:03:10.420 --> 00:03:13.030
lets the binding update
whenever the LiveData updates

00:03:13.030 --> 00:03:14.900
and the ViewModel's onscreen.

00:03:14.900 --> 00:03:16.930
You can now directly
reference LiveData fields

00:03:16.930 --> 00:03:19.170
from your ViewModel in your XML.

00:03:19.170 --> 00:03:20.920
If you combine this
with binding adapters,

00:03:20.920 --> 00:03:22.450
you can move much
of the boilerplate

00:03:22.450 --> 00:03:24.340
logic out of your activity.

00:03:24.340 --> 00:03:26.920
Note that this became
available at Android Studio 3.1

00:03:26.920 --> 00:03:29.710
and higher, so make sure
you're on the correct version.

00:03:29.710 --> 00:03:32.020
To learn more, check out
the Introduction to LiveData

00:03:32.020 --> 00:03:33.460
in the docs.

00:03:33.460 --> 00:03:36.560
OK, I'm going to finish off
with a few best practices.

00:03:36.560 --> 00:03:40.330
First tip, you should never
pass contexts into ViewModels.

00:03:40.330 --> 00:03:42.790
This means no passing in
fragments, activities,

00:03:42.790 --> 00:03:43.870
or views.

00:03:43.870 --> 00:03:45.820
As you saw earlier,
ViewModels can

00:03:45.820 --> 00:03:48.940
outlive your specific activity
and fragment lifecycles.

00:03:48.940 --> 00:03:51.700
Let's say that you store an
activity in your ViewModel.

00:03:51.700 --> 00:03:54.610
When you rotate the screen,
that activity is destroyed.

00:03:54.610 --> 00:03:56.560
You now have a ViewModel
holding a reference

00:03:56.560 --> 00:03:57.980
to a destroyed activity.

00:03:57.980 --> 00:03:59.900
And this is a memory leak.

00:03:59.900 --> 00:04:02.410
So if you find yourself needing
application contexts, which

00:04:02.410 --> 00:04:05.560
outlive ViewModel lifecycles,
use the Android ViewModel

00:04:05.560 --> 00:04:06.970
subclass instead.

00:04:06.970 --> 00:04:10.130
This includes a reference to
the application for you to use.

00:04:10.130 --> 00:04:11.350
OK, second tip.

00:04:11.350 --> 00:04:13.540
ViewModels are meant
to be used in addition

00:04:13.540 --> 00:04:15.220
to onSaveInstanceState.

00:04:15.220 --> 00:04:17.709
ViewModels do not
survive process shutdown

00:04:17.709 --> 00:04:19.420
due to resource restrictions.

00:04:19.420 --> 00:04:21.790
But onSaveInstance bundles do.

00:04:21.790 --> 00:04:24.580
ViewModels are great for
storing huge amounts of data.

00:04:24.580 --> 00:04:27.090
onSaveInstanceState
bundles, not so much.

00:04:27.090 --> 00:04:30.100
Use ViewModels to store as
much UI data as possible

00:04:30.100 --> 00:04:33.040
so that that data doesn't need
to be reloaded or regenerated

00:04:33.040 --> 00:04:34.780
during a configuration change.

00:04:34.780 --> 00:04:36.650
onSaveInstanceState,
on the other hand,

00:04:36.650 --> 00:04:38.800
should store the
smallest amount of data

00:04:38.800 --> 00:04:41.770
needed to restore the UI state
if the process is shut down

00:04:41.770 --> 00:04:43.040
by the framework.

00:04:43.040 --> 00:04:45.430
So for example, you might
store all of the user's data

00:04:45.430 --> 00:04:48.550
within the ViewModel but just
store the user's database ID

00:04:48.550 --> 00:04:50.110
in onSaveInstanceState.

00:04:50.110 --> 00:04:52.810
Hopefully this has inspired you
to try out the new ViewModel

00:04:52.810 --> 00:04:54.910
class in your apps
either by itself

00:04:54.910 --> 00:04:57.130
or with the other
architecture components.

00:04:57.130 --> 00:04:59.142
To learn more about
using ViewModels or any

00:04:59.142 --> 00:05:00.850
of the information
that I just mentioned,

00:05:00.850 --> 00:05:02.266
check out the
documentation below.

00:05:02.266 --> 00:05:04.950
[JET BLAST]

