WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.150
MANO MARKS: Hi, everyone.

00:00:04.150 --> 00:00:05.130
Thanks for coming.

00:00:05.130 --> 00:00:06.370
Whoa, that's a little echo-y.

00:00:06.370 --> 00:00:09.010
Can we decrease that?

00:00:09.010 --> 00:00:09.780
OK.

00:00:09.780 --> 00:00:12.620
Hi, I'm Mano Marks.

00:00:12.620 --> 00:00:16.190
I'm here with Josh Livni, my
colleague on the Google Geo

00:00:16.190 --> 00:00:21.000
Developer Relations team, and
Brian Flood, who is going to

00:00:21.000 --> 00:00:23.010
be talking to you
about Arc2Earth.

00:00:23.010 --> 00:00:27.490
And we are going to be talking
to you about GIS, Geographic

00:00:27.490 --> 00:00:31.925
Information Systems, and how you
can use Google Earth and

00:00:31.925 --> 00:00:36.280
Google Maps working with GIS.

00:00:36.280 --> 00:00:43.240
So you all know, I'm guessing,
you're all here, you're

00:00:43.240 --> 00:00:46.710
probably the hard-core Geo geeks
from this conference.

00:00:46.710 --> 00:00:51.880
You all know a lot about Google
and Google Geo and what

00:00:51.880 --> 00:00:54.140
Google Geo is good for.

00:00:54.140 --> 00:00:58.120
And a lot of what Google Geo
is good for is visualizing

00:00:58.120 --> 00:01:00.060
geographic data.

00:01:00.060 --> 00:01:03.140
And I'm going to run through--
you've seen all these

00:01:03.140 --> 00:01:07.140
statistics before, I'm
sure, but we have--

00:01:07.140 --> 00:01:11.290
Google Maps is now on over
600,000 websites.

00:01:11.290 --> 00:01:16.930
We have over 800 million
downloads of Google Earth, and

00:01:16.930 --> 00:01:20.160
there are over a billion KML,
files, which is a Keyhole

00:01:20.160 --> 00:01:23.380
Markup Language that was
originally designed for Google

00:01:23.380 --> 00:01:26.820
Earth and is now an open
standard, over a billion KML

00:01:26.820 --> 00:01:29.390
files on the web.

00:01:29.390 --> 00:01:31.540
The Google Map's API is
the most used mashup

00:01:31.540 --> 00:01:32.840
platform in the world.

00:01:32.840 --> 00:01:37.470
So that's just a bunch of stuff
that you already know.

00:01:37.470 --> 00:01:38.430
You see Google Maps.

00:01:38.430 --> 00:01:41.170
You see Google Earth
everywhere, right?

00:01:41.170 --> 00:01:47.160
But most of what people do with
Google Maps and KML is

00:01:47.160 --> 00:01:50.940
they're showing a point
or a set of points.

00:01:50.940 --> 00:01:55.970
And there's a whole other
world which Google Geo

00:01:55.970 --> 00:01:57.600
actually does interact with.

00:01:57.600 --> 00:02:01.030
And we're going to talk to you
today about some of both the

00:02:01.030 --> 00:02:04.940
lesser-known aspects of
different parts of our APIs

00:02:04.940 --> 00:02:10.910
and also about some exciting
new upcoming projects.

00:02:10.910 --> 00:02:14.840
So this is the list, and I
really dislike agenda slides,

00:02:14.840 --> 00:02:18.850
so this is the last time you'll
see this, but we will

00:02:18.850 --> 00:02:21.040
let you know where you are
throughout the talk.

00:02:21.040 --> 00:02:23.830
But we're going to be talking
a little bit about Google

00:02:23.830 --> 00:02:29.960
Earth, Google Maps, As I said,
some new upcoming stuff, some

00:02:29.960 --> 00:02:32.520
Fusion Tables, and then we're
going to talk about some

00:02:32.520 --> 00:02:37.960
integration examples using open
source libraries really

00:02:37.960 --> 00:02:42.010
briefly, and then Brian is going
to show you some really

00:02:42.010 --> 00:02:45.690
interesting, real-world examples
of using Google's

00:02:45.690 --> 00:02:51.630
technology to interact with
high-end GIS systems.

00:02:51.630 --> 00:02:53.225
OK, so let's get started.

00:02:56.520 --> 00:02:58.420
And I like to start with
this because this

00:02:58.420 --> 00:03:00.310
is kind of the basic.

00:03:00.310 --> 00:03:02.980
Like if you ask anybody at a
party if they know about

00:03:02.980 --> 00:03:04.140
Google Earth, and they're
going to know

00:03:04.140 --> 00:03:04.810
about Google Earth.

00:03:04.810 --> 00:03:05.680
Let's try it right now.

00:03:05.680 --> 00:03:08.000
How many of you have
used Google Earth?

00:03:08.000 --> 00:03:09.540
All right.

00:03:09.540 --> 00:03:12.690
How many of you knew that Google
Earth has a server

00:03:12.690 --> 00:03:14.710
component to it?

00:03:14.710 --> 00:03:15.860
OK, almost everybody.

00:03:15.860 --> 00:03:17.780
Of course, for this class--

00:03:17.780 --> 00:03:18.500
for this class!

00:03:18.500 --> 00:03:21.880
For this workshop, for this
group-- students.

00:03:21.880 --> 00:03:26.700
So one of the key components
that we have for enterprise

00:03:26.700 --> 00:03:30.630
interactions with Google Earth
is this Google Earth server

00:03:30.630 --> 00:03:32.530
that we've had for a
number of years.

00:03:32.530 --> 00:03:36.050
And what it does is it fuses
together data from a lot of

00:03:36.050 --> 00:03:40.610
different geographic data
formats and pushes it out into

00:03:40.610 --> 00:03:43.440
your own private globe.

00:03:43.440 --> 00:03:48.190
And one to the key things that
you may not know about, and

00:03:48.190 --> 00:03:51.950
this is going to be the extent
of my talking about Google

00:03:51.950 --> 00:03:56.250
Earth, actually, today, is this
product here, or actually

00:03:56.250 --> 00:03:59.510
what this represents, which
is a portable globe.

00:03:59.510 --> 00:04:04.270
So this right here, this is a
portable Google Earth globe.

00:04:04.270 --> 00:04:07.520
So those people who have the
Google Earth server can create

00:04:07.520 --> 00:04:11.070
these kind of applications
to be used entirely

00:04:11.070 --> 00:04:12.540
offline in the field.

00:04:12.540 --> 00:04:14.410
So let me describe this
for a moment.

00:04:14.410 --> 00:04:16.625
This is $150 piece
of hardware.

00:04:16.625 --> 00:04:18.660
It's a physical--

00:04:18.660 --> 00:04:20.380
this is an Ubuntu server.

00:04:20.380 --> 00:04:24.130
There's an SD card there, 16
gigabytes, and it's got vector

00:04:24.130 --> 00:04:26.310
and imagery data on it.

00:04:26.310 --> 00:04:32.220
Now, use that in companion with
a Google Earth client--

00:04:32.220 --> 00:04:35.300
so this is the Google Earth
enterprise client--

00:04:35.300 --> 00:04:38.220
and you'll see right
over here in the

00:04:38.220 --> 00:04:40.940
left panel these layers.

00:04:40.940 --> 00:04:42.970
Those are entirely customized,
right?

00:04:42.970 --> 00:04:44.780
So if you're used to Google
Earth, you're used to seeing

00:04:44.780 --> 00:04:49.100
our default layers there.

00:04:49.100 --> 00:04:50.730
You'll see a lot of these
start with JP.

00:04:50.730 --> 00:04:54.910
This was data that was actually
sent to Japan for use

00:04:54.910 --> 00:04:59.550
after the earthquake, where they
had portable generators

00:04:59.550 --> 00:05:02.000
in local areas, but they didn't
have internet access so

00:05:02.000 --> 00:05:06.630
that they could access
information on servers.

00:05:06.630 --> 00:05:08.460
So they shipped servers.

00:05:08.460 --> 00:05:12.400
We shipped servers from Mountain
View to that area so

00:05:12.400 --> 00:05:15.670
that they could use them
for disaster response.

00:05:15.670 --> 00:05:20.640
And just to give a quick little
demo of that, you can

00:05:20.640 --> 00:05:23.140
see here that--

00:05:23.140 --> 00:05:25.340
where's Japan?

00:05:25.340 --> 00:05:29.730
Going into Japan, as we get
closer, you'll see there's

00:05:29.730 --> 00:05:31.190
actual vector data.

00:05:31.190 --> 00:05:34.770
There's roads that are drawn,
road and boundaries drawn

00:05:34.770 --> 00:05:42.290
within Japan that you
then have to.

00:05:42.290 --> 00:05:46.070
So let's say major
arterial roads.

00:05:46.070 --> 00:05:50.790
So this is just one example
of using the server.

00:05:50.790 --> 00:05:54.440
Oh, and I had to switch because
I switched off so I no

00:05:54.440 --> 00:05:57.460
longer have this direct
connection to the server.

00:05:57.460 --> 00:05:59.060
But basically, I
can draw roads.

00:05:59.060 --> 00:06:00.270
I can use that imagery.

00:06:00.270 --> 00:06:03.090
If you go to Japan right now,
you'll see that's not the

00:06:03.090 --> 00:06:04.480
actual imagery.

00:06:04.480 --> 00:06:09.180
And you can connect to it using
also the Google Earth

00:06:09.180 --> 00:06:12.340
plugin, which gives
you another direct

00:06:12.340 --> 00:06:13.260
connection to that.

00:06:13.260 --> 00:06:15.310
So anybody who's got the plugin
installed and the

00:06:15.310 --> 00:06:20.730
correct authentication details
can connect into

00:06:20.730 --> 00:06:22.370
your server as well.

00:06:22.370 --> 00:06:25.720
So this is a really
interesting--

00:06:25.720 --> 00:06:30.770
and I think not widely known
outside the enterprise

00:06:30.770 --> 00:06:32.000
community--

00:06:32.000 --> 00:06:40.940
way to use Google Earth.

00:06:40.940 --> 00:06:44.740
So Google Earth server using
a portable globe.

00:06:44.740 --> 00:06:46.470
As I said, this costs $150.

00:06:46.470 --> 00:06:50.100
Google Earth server costs a
little bit more than that, but

00:06:50.100 --> 00:06:54.100
it allows you to do some
really powerful things.

00:06:54.100 --> 00:06:56.420
OK, so the next thing I'm going
to talk about are some

00:06:56.420 --> 00:06:59.350
of the features of the Google
Maps API that allow you to do

00:06:59.350 --> 00:07:04.430
GIS-like operations.

00:07:04.430 --> 00:07:07.670
So how many of you know what a
projection is what I'm talking

00:07:07.670 --> 00:07:08.370
about maps?

00:07:08.370 --> 00:07:09.670
OK, awesome.

00:07:09.670 --> 00:07:12.870
So for those of you who are on
video, I'll just briefly

00:07:12.870 --> 00:07:13.850
describe it.

00:07:13.850 --> 00:07:17.340
Imagine you have a globe,
say, the Earth.

00:07:17.340 --> 00:07:20.070
Imagine that globe is actually
like an orange.

00:07:20.070 --> 00:07:22.300
You take the orange and you peel
the orange and then you

00:07:22.300 --> 00:07:23.760
flatten the peel out.

00:07:23.760 --> 00:07:24.680
That's a two-dimensional

00:07:24.680 --> 00:07:26.835
representation of your 3D globe.

00:07:26.835 --> 00:07:28.500
And that's essentially
what you have to

00:07:28.500 --> 00:07:31.060
do for a map, right?

00:07:31.060 --> 00:07:36.420
A two-dimensional map is a
two-dimensional representation

00:07:36.420 --> 00:07:41.365
of a 3D object, so there's a lot
of math that's involved in

00:07:41.365 --> 00:07:43.970
that, and there's different
choices that you can make.

00:07:43.970 --> 00:07:48.050
Now, the default projection
is called the Mercator

00:07:48.050 --> 00:07:49.960
projection.

00:07:49.960 --> 00:07:54.430
And I'm going to give you an
example of some of the

00:07:54.430 --> 00:07:55.070
differences.

00:07:55.070 --> 00:07:58.674
So imagine I'm flying from San
Francisco to Paris, and I'm

00:07:58.674 --> 00:08:00.665
going to roughly click
on where Paris and

00:08:00.665 --> 00:08:02.830
San Francisco are.

00:08:02.830 --> 00:08:05.030
You'll see I've created two
different lines here.

00:08:07.630 --> 00:08:11.340
The red line, or this line that
goes straight across the

00:08:11.340 --> 00:08:14.760
map, is the line that you would
naturally draw if you

00:08:14.760 --> 00:08:17.870
thought that you could simply
draw a line and it would

00:08:17.870 --> 00:08:21.150
connect the two closest
points together.

00:08:21.150 --> 00:08:24.470
The other line is a
great circle line.

00:08:24.470 --> 00:08:29.740
That great circle line is the
actual shortest path between

00:08:29.740 --> 00:08:33.429
San Francisco and Paris,
or roughly here.

00:08:33.429 --> 00:08:35.429
Anybody whose flown
internationally knows that

00:08:35.429 --> 00:08:37.880
when you want to fly over--

00:08:37.880 --> 00:08:43.179
you have to fly over Greenland
to get to Europe.

00:08:43.179 --> 00:08:47.560
OK, so let's take a look
at the code for this.

00:08:47.560 --> 00:08:50.080
The code for this is actually
fairly simple.

00:08:50.080 --> 00:08:55.980
We implemented a new library
system in the Maps API, so

00:08:55.980 --> 00:08:59.810
that if you don't want to load
specific portions of the code

00:08:59.810 --> 00:09:04.180
for the Google Maps API, these
newer features, you want to

00:09:04.180 --> 00:09:06.700
keep your higher performance
applications loading as little

00:09:06.700 --> 00:09:08.920
code as possible, then
you don't have to.

00:09:08.920 --> 00:09:10.900
But it would give you the option
of loading them in.

00:09:10.900 --> 00:09:16.520
So you see this parameter
libraries=geometry is in this

00:09:16.520 --> 00:09:19.930
geometry library that allows you
to do these calculations.

00:09:19.930 --> 00:09:22.760
And then you'll see all I did
here was in creating this

00:09:22.760 --> 00:09:29.410
polyline, I added this option
geodesic true, passed in that

00:09:29.410 --> 00:09:34.050
option to this polyline that
I'm creating and set that

00:09:34.050 --> 00:09:36.010
polyline onto the map.

00:09:36.010 --> 00:09:42.205
So very simple to create
geodesic lines on a map.

00:09:46.200 --> 00:09:49.010
So the code for this
other kind of a--

00:09:49.010 --> 00:09:51.470
for projections is a little bit
more complex, but I wanted

00:09:51.470 --> 00:09:53.210
to show you an example here.

00:09:53.210 --> 00:09:56.820
This is a Gall-Peters
projection, and this is using

00:09:56.820 --> 00:10:00.600
some tiles that we generated
directly for this.

00:10:00.600 --> 00:10:03.260
The idea here is you're showing
a different kind of

00:10:03.260 --> 00:10:06.410
projection using the map's API,
and then you're telling

00:10:06.410 --> 00:10:08.780
them the map's API
how to map points

00:10:08.780 --> 00:10:10.030
between the two locations.

00:10:12.550 --> 00:10:15.560
So this is what it would look
like in standard Mercator.

00:10:15.560 --> 00:10:19.100
This is what it looks
like Gall-Peters.

00:10:19.100 --> 00:10:21.470
And you'll see that Gall-Peters
has a fidelity of

00:10:21.470 --> 00:10:23.730
area rather than angle here.

00:10:23.730 --> 00:10:26.650
That means that you get a much
better sense of the actual

00:10:26.650 --> 00:10:27.490
size of things.

00:10:27.490 --> 00:10:33.210
So you see, for instance, Africa
is huge compared to

00:10:33.210 --> 00:10:35.610
Greenland, whereas on a Mercator
map, they would look

00:10:35.610 --> 00:10:38.550
to be roughly the same size.

00:10:38.550 --> 00:10:42.590
You all know about projections
probably quite a bit so I'm

00:10:42.590 --> 00:10:44.990
going to not go too much
into detail on that.

00:10:44.990 --> 00:10:47.500
But let me just show you a
little bit of the code here.

00:10:47.500 --> 00:10:49.550
It's actually fairly--

00:10:49.550 --> 00:10:50.830
it's a little involved.

00:10:50.830 --> 00:10:55.180
We basically provide you with a
projections interface, which

00:10:55.180 --> 00:11:02.100
you have to implement to tell
Google Maps how to map from

00:11:02.100 --> 00:11:05.600
what we called world points to
latitude and longitude, and

00:11:05.600 --> 00:11:10.980
then you have assign tiles to
match those coordinates.

00:11:10.980 --> 00:11:16.200
So is this is just one of the
methods that you have to

00:11:16.200 --> 00:11:18.080
implement, which is
point to lat long.

00:11:18.080 --> 00:11:20.730
You also have to do
lat long to point.

00:11:20.730 --> 00:11:25.770
So the docs on this are really
pretty clear, easy to use.

00:11:25.770 --> 00:11:28.420
I'm not going to go too much
more into the details, but

00:11:28.420 --> 00:11:32.260
just to show you that we
do have these features.

00:11:32.260 --> 00:11:33.930
So these are the major
features of

00:11:33.930 --> 00:11:36.180
the geometry library.

00:11:36.180 --> 00:11:40.800
We also have some encoding,
polyline encoding and decoding

00:11:40.800 --> 00:11:46.630
methods that are in there that
you can use to make the

00:11:46.630 --> 00:11:50.500
definitions of your polylines
much shorter.

00:11:50.500 --> 00:11:54.480
And then we give you things in
the geometry, the spherical

00:11:54.480 --> 00:11:58.510
library, to compute area,
distance, that sort of thing.

00:11:58.510 --> 00:12:01.620
And then as I mentioned before
for the projection, we have

00:12:01.620 --> 00:12:03.010
these two methods
that you have to

00:12:03.010 --> 00:12:05.630
implement on top of the--

00:12:05.630 --> 00:12:09.300
when you implement
that interface.

00:12:09.300 --> 00:12:13.960
OK, I'm going to switch over to
Josh right now, and Josh is

00:12:13.960 --> 00:12:17.190
going to talk to you about
Fusion Tables.

00:12:17.190 --> 00:12:17.600
JOSH LIVNI: Thanks, Mano.

00:12:17.600 --> 00:12:19.440
Hi, everybody.

00:12:19.440 --> 00:12:22.970
So you can see we've come quite
a long way from putting

00:12:22.970 --> 00:12:26.170
points on a map or basic
visualization that people

00:12:26.170 --> 00:12:28.540
commonly think of Google
Maps or Google Earth.

00:12:28.540 --> 00:12:32.440
And both of those, Maps and
Earth, they've been around a

00:12:32.440 --> 00:12:34.610
long time, five years or more.

00:12:34.610 --> 00:12:37.800
The stuff I want to talk to you
today about are much more

00:12:37.800 --> 00:12:38.570
recent developments.

00:12:38.570 --> 00:12:41.990
So Fusion Tables, it's the first
year at Google IO that

00:12:41.990 --> 00:12:44.720
we're talking about it, and I'm
going to also talk about

00:12:44.720 --> 00:12:47.560
some as yet unlaunched things.

00:12:47.560 --> 00:12:49.080
So there's been a couple
other talks that have

00:12:49.080 --> 00:12:50.020
covered Fusion Tables.

00:12:50.020 --> 00:12:52.470
How many of you consider
yourselves very familiar with

00:12:52.470 --> 00:12:55.090
Fusion Tables at this point?

00:12:55.090 --> 00:12:56.710
OK, so that's good.

00:12:56.710 --> 00:12:57.800
About half or so.

00:12:57.800 --> 00:12:59.750
I'm going to go into not a lot
of detail on what season

00:12:59.750 --> 00:13:01.640
Fusion Tables is, but I'll give
a very brief overview,

00:13:01.640 --> 00:13:04.840
and I'm going to focus on some
of the kind of spatial queries

00:13:04.840 --> 00:13:07.400
that we can do there
are more GIS like.

00:13:07.400 --> 00:13:10.110
So the first thing that I like
to just show off is, hey, we

00:13:10.110 --> 00:13:13.380
can have a map here, and this
is a cool map showing 2010

00:13:13.380 --> 00:13:17.790
census data put together by John
Keefe at WNYC, where we

00:13:17.790 --> 00:13:20.590
can have a lot of different
polygons and some nice

00:13:20.590 --> 00:13:23.510
interactive info windows.

00:13:23.510 --> 00:13:25.990
And this is the kind of map that
a lot of people want to

00:13:25.990 --> 00:13:29.690
make, a core plot color map,
tons of complex polygons.

00:13:29.690 --> 00:13:32.180
Very difficult to do previously
without sort of

00:13:32.180 --> 00:13:36.390
needing to create your own
tiles, have a rendering

00:13:36.390 --> 00:13:39.450
library of your own on your
server, because the Maps API

00:13:39.450 --> 00:13:40.800
can't really handle
this number for

00:13:40.800 --> 00:13:41.630
vertices all at once.

00:13:41.630 --> 00:13:43.220
The browser will keel over.

00:13:43.220 --> 00:13:45.950
So Fusion Tables is a great
way to put a bunch of data

00:13:45.950 --> 00:13:48.290
into our infrastructure and
then render it on a map.

00:13:48.290 --> 00:13:49.960
That's one way of thinking about
it, although it does

00:13:49.960 --> 00:13:51.210
quite a bit more.

00:13:53.980 --> 00:13:57.670
So let's go on to the API, which
is why we're here as

00:13:57.670 --> 00:13:58.280
developers.

00:13:58.280 --> 00:14:01.850
It has a sequel-like API, which
means if you're familiar

00:14:01.850 --> 00:14:04.820
with using databases, My Sequel,
Postgres and others,

00:14:04.820 --> 00:14:07.075
this will be a familiar way of
interacting with the data in

00:14:07.075 --> 00:14:08.290
Fusion Tables.

00:14:08.290 --> 00:14:10.450
So Fusion Tables is
a set of tables.

00:14:10.450 --> 00:14:12.030
For those of you who aren't
familiar, I'll just give a

00:14:12.030 --> 00:14:13.000
really quick link here.

00:14:13.000 --> 00:14:16.600
What I've done is uploaded a
table of restaurant data that

00:14:16.600 --> 00:14:18.746
I downloaded from the city
of San Francisco.

00:14:18.746 --> 00:14:21.870
It kind of looks like a
spreadsheet, and it has an

00:14:21.870 --> 00:14:23.180
address field here.

00:14:23.180 --> 00:14:26.120
And the address field, we're
going to automatically geocode

00:14:26.120 --> 00:14:28.380
when you upload a table like
this so that you can then

00:14:28.380 --> 00:14:31.310
visualize it in a variety of
different options, including a

00:14:31.310 --> 00:14:33.220
map, which I'll get into
in a little bit.

00:14:35.830 --> 00:14:39.710
So if I was to use the API to do
a basic select statement, I

00:14:39.710 --> 00:14:42.230
could say select the name, which
was one of the columns

00:14:42.230 --> 00:14:45.730
in my table from the table ID,
which is an ID you can get by

00:14:45.730 --> 00:14:48.400
looking at the URL of your
Fusion Table or some other

00:14:48.400 --> 00:14:51.190
ways, and just give me back
five of them, and I'll get

00:14:51.190 --> 00:14:53.790
back some information that
looks like this.

00:14:53.790 --> 00:14:55.665
I'll just give you a really
quick example in the browser

00:14:55.665 --> 00:15:00.650
so you can see it
actually works.

00:15:00.650 --> 00:15:02.700
This'll look better if
you can see the URL.

00:15:02.700 --> 00:15:03.730
This is limit 15.

00:15:03.730 --> 00:15:06.680
If I said limit 150, I'd I get
back some more, and it's

00:15:06.680 --> 00:15:07.930
pretty snappy.

00:15:13.230 --> 00:15:15.460
So let's move on to some of
the spatial stuff that's a

00:15:15.460 --> 00:15:17.375
little bit more GIS like.

00:15:17.375 --> 00:15:20.750
A couple of really popular
things people like to do

00:15:20.750 --> 00:15:23.910
include what's the closest
things around me?

00:15:23.910 --> 00:15:26.880
And so the way that we've
implemented this is using this

00:15:26.880 --> 00:15:28.570
order-by-distance idea.

00:15:28.570 --> 00:15:32.120
So given a location, so give
me everything that you can.

00:15:32.120 --> 00:15:34.470
Select some subset of things.

00:15:34.470 --> 00:15:37.410
Order it by the distance from
the location that I give.

00:15:37.410 --> 00:15:40.210
So in this case, I've given the
location of where we are,

00:15:40.210 --> 00:15:42.370
and say give me back
the closest five.

00:15:42.370 --> 00:15:44.420
And the best way to show this
kind of thing is on a map.

00:15:44.420 --> 00:15:47.610
I've got some demo links here
so that in the future people

00:15:47.610 --> 00:15:50.320
watching a video or yourselves
can get the slides and click

00:15:50.320 --> 00:15:51.780
on these for the code.

00:15:51.780 --> 00:15:53.810
But here's a map of all
the restaurants,

00:15:53.810 --> 00:15:55.060
quite a lot of points.

00:15:55.060 --> 00:15:57.450
I should emphasize that all of
these spatial queries also

00:15:57.450 --> 00:16:00.430
work with polygons and lines,
not just points, although

00:16:00.430 --> 00:16:01.910
that's the demo here.

00:16:01.910 --> 00:16:03.830
So down at the bottom left, I
have a little number you can

00:16:03.830 --> 00:16:04.300
barely see.

00:16:04.300 --> 00:16:05.380
It says 50.

00:16:05.380 --> 00:16:09.360
And if I click on the map,
you'll see select statement,

00:16:09.360 --> 00:16:11.450
as what happened on my click
handler, which is select

00:16:11.450 --> 00:16:15.100
address from the table, order
by the distance, limit 50.

00:16:15.100 --> 00:16:16.350
And you can see if I click over

00:16:16.350 --> 00:16:17.570
here, it's pretty clustered.

00:16:17.570 --> 00:16:20.230
If I click over here in San
Francisco, it tends to be a

00:16:20.230 --> 00:16:21.960
little bit less so.

00:16:21.960 --> 00:16:23.080
And again, it's pretty quick.

00:16:23.080 --> 00:16:27.190
So if I select the nearest
500, we can see we get a

00:16:27.190 --> 00:16:28.590
really fast response.

00:16:28.590 --> 00:16:31.300
So Fusion Tables lets you
do that kind of query.

00:16:31.300 --> 00:16:34.620
Oftentimes, you might just
select the nearest one if

00:16:34.620 --> 00:16:37.690
you're looking for the closest
zip code or what have you, but

00:16:37.690 --> 00:16:39.480
a great way to be able to
do these types of basic

00:16:39.480 --> 00:16:40.810
operations.

00:16:40.810 --> 00:16:44.410
Another very common operation is
your spatial intersection.

00:16:44.410 --> 00:16:47.340
And currently, we support
circles and bounding boxes.

00:16:47.340 --> 00:16:51.530
So here's the syntax for
providing a circle and

00:16:51.530 --> 00:16:53.830
intersecting it within this
case your geometry column,

00:16:53.830 --> 00:16:55.650
which is the address, which
is then geocoded

00:16:55.650 --> 00:16:57.210
automatically for you.

00:16:57.210 --> 00:17:01.720
And I'll show you what that
looks like on a map.

00:17:01.720 --> 00:17:05.390
We'll go ahead and give a radius
of 1,000 up here, and

00:17:05.390 --> 00:17:06.410
I'll click.

00:17:06.410 --> 00:17:10.190
And within this radius, we can
see we get a few points back.

00:17:10.190 --> 00:17:11.730
We get a few more over here.

00:17:11.730 --> 00:17:14.119
And here's the select statement
down at the bottom.

00:17:14.119 --> 00:17:18.319
So over on the right, I'm not
showing all of the restaurants

00:17:18.319 --> 00:17:19.480
that have been returned.

00:17:19.480 --> 00:17:21.920
I'm actually showing a grouping
of these restaurants,

00:17:21.920 --> 00:17:22.619
which is pretty neat.

00:17:22.619 --> 00:17:25.079
You might imagine you want to
do an intersection, and then

00:17:25.079 --> 00:17:27.640
get some statistical information
or some other type

00:17:27.640 --> 00:17:29.640
of query on the result.

00:17:29.640 --> 00:17:31.030
And so I'll just show
you how I did this.

00:17:31.030 --> 00:17:34.250
We can see that if we're
downtown here, and say we go

00:17:34.250 --> 00:17:38.700
within 2,000 meters, a couple
of kilometers, we've got--

00:17:38.700 --> 00:17:39.100
I don't know--

00:17:39.100 --> 00:17:42.280
1,500 restaurants, 160
bars, et cetera.

00:17:42.280 --> 00:17:43.820
That's kind of interesting
information.

00:17:43.820 --> 00:17:46.770
So I'll show you quickly how I
did this, because I like it

00:17:46.770 --> 00:17:49.770
when, instead of just using the
basic features, folks also

00:17:49.770 --> 00:17:53.080
start to interact with the
Fusion Tables API to get more

00:17:53.080 --> 00:17:54.740
information out.

00:17:54.740 --> 00:17:56.500
Some of the other sessions
showed how you can have nice

00:17:56.500 --> 00:17:58.080
charts in your info
windows using the

00:17:58.080 --> 00:17:59.630
charts API and so forth.

00:17:59.630 --> 00:18:04.570
In this case, the second piece
of code is this group-by

00:18:04.570 --> 00:18:07.060
bottom line, grouping by
description, and you can see

00:18:07.060 --> 00:18:08.830
my select statement has
changed subtly.

00:18:08.830 --> 00:18:11.805
So I'm selecting account and
the description and then

00:18:11.805 --> 00:18:13.820
grouping by the description,
and that gives me back that

00:18:13.820 --> 00:18:17.280
kind of aggregate stats on
the results that I had.

00:18:17.280 --> 00:18:20.760
So I find this kind of stuff a
really nice addition to the

00:18:20.760 --> 00:18:23.850
side of you map, depending
on your application.

00:18:23.850 --> 00:18:27.300
So that's a few features of
Fusion Tables that weren't

00:18:27.300 --> 00:18:29.470
covered in some of the other
sessions in too much depth,

00:18:29.470 --> 00:18:33.300
and I hope that you guys take
advantage of all the other

00:18:33.300 --> 00:18:35.405
things that it offers like the
styling APIs that were

00:18:35.405 --> 00:18:38.440
announced and so on and so
forth, but also some of these

00:18:38.440 --> 00:18:41.570
more rich spatial features.

00:18:41.570 --> 00:18:46.060
So the next item here is
Google Earth Builder.

00:18:46.060 --> 00:18:49.560
How many do you have heard
of Google Earth Builder?

00:18:49.560 --> 00:18:52.640
OK, so announced just a few
weeks ago at the Where 2.0

00:18:52.640 --> 00:18:55.590
Conference, that is
not yet launched.

00:18:55.590 --> 00:18:58.140
It'll be out in July, and I
just want to give a really

00:18:58.140 --> 00:19:00.480
quick preview to give some of
the vision of where we're

00:19:00.480 --> 00:19:01.960
aiming at here.

00:19:01.960 --> 00:19:05.850
So a very common problem first
in medium and large-sized

00:19:05.850 --> 00:19:08.510
organizations is how do you
manage all of your spatial

00:19:08.510 --> 00:19:12.310
data and give people quick and
easy access to it, allow

00:19:12.310 --> 00:19:15.000
people to quickly publish and
easily share maps either

00:19:15.000 --> 00:19:17.910
within the organizations
or externally?

00:19:17.910 --> 00:19:21.950
So one of the main features is
you can upload the data to our

00:19:21.950 --> 00:19:22.680
infrastructure.

00:19:22.680 --> 00:19:23.820
That's important.

00:19:23.820 --> 00:19:26.130
And as you upload it, you can
provide various things.

00:19:26.130 --> 00:19:29.510
So, for example, if you provide
some attribution as

00:19:29.510 --> 00:19:31.370
part of the metadata, that
attribution will be

00:19:31.370 --> 00:19:33.990
automatically baked into the
tiles, whether it's in Google

00:19:33.990 --> 00:19:36.570
Earth or Google Maps,
that we publish out.

00:19:36.570 --> 00:19:39.030
You can set up tags for
easy searching.

00:19:39.030 --> 00:19:42.100
You can easily look over the
data that you have using the

00:19:42.100 --> 00:19:45.830
kind of search that we try to be
good at and easily share it

00:19:45.830 --> 00:19:48.170
just like it was a Google doc
amongst people within your

00:19:48.170 --> 00:19:52.050
organization or externally and
set these robust permissions

00:19:52.050 --> 00:19:54.390
to make sure that the
appropriate people are

00:19:54.390 --> 00:19:57.040
authenticated, or if you're
sharing publicly, that they

00:19:57.040 --> 00:19:58.290
can access as well.

00:20:00.830 --> 00:20:03.030
And of course you can do some
basic map creation.

00:20:03.030 --> 00:20:06.220
You can set nice style templates
and apply them to

00:20:06.220 --> 00:20:09.190
your data, label your data, and
then publish it out in a

00:20:09.190 --> 00:20:12.260
variety of formats, whether it's
to Maps or Earth, kind of

00:20:12.260 --> 00:20:17.770
using the free Earth API plugin,
or if you're going a

00:20:17.770 --> 00:20:20.870
little more secure route, the
Earth Enterprise client that

00:20:20.870 --> 00:20:25.920
we saw earlier, and also coming
up on Android, Earth

00:20:25.920 --> 00:20:27.270
for Android.

00:20:27.270 --> 00:20:29.215
So a couple of really,
really fast demos in

00:20:29.215 --> 00:20:30.040
the interest of time.

00:20:30.040 --> 00:20:31.360
I'm not going to go
too much into it.

00:20:31.360 --> 00:20:33.910
If you're interested, you can
search for Google Earth

00:20:33.910 --> 00:20:36.580
Builder, and we have a longer
video online that shows up

00:20:36.580 --> 00:20:37.920
some more features.

00:20:37.920 --> 00:20:45.270
But just very, very quickly,
first thing you'll see is, as

00:20:45.270 --> 00:20:47.160
you log in for your
organization, kind of a

00:20:47.160 --> 00:20:49.660
dashboard, giving you a
real-time view, which is very,

00:20:49.660 --> 00:20:52.970
very cool, of who's using your
maps, and you'll be able to

00:20:52.970 --> 00:20:54.860
dive into this more deeply
down the line.

00:20:54.860 --> 00:20:57.180
Please keep in mind this is
unlaunched, and the UI is

00:20:57.180 --> 00:21:02.400
still going to go through some
iterations before it comes out

00:21:02.400 --> 00:21:03.390
for everyone's use.

00:21:03.390 --> 00:21:06.480
But this is just the idea that
it is important for you be

00:21:06.480 --> 00:21:09.840
able to see who's looking
at your data and how.

00:21:09.840 --> 00:21:11.310
We have some of the things
I talked about, the

00:21:11.310 --> 00:21:14.550
attribution, the ACLs.

00:21:14.550 --> 00:21:16.430
Let's go ahead and look
at some data.

00:21:16.430 --> 00:21:19.390
So if we have a bunch of data,
in this case, I'm going to

00:21:19.390 --> 00:21:22.190
search for my digital
ortho quads.

00:21:22.190 --> 00:21:24.040
I can see we have a few.

00:21:24.040 --> 00:21:27.080
Maybe I'll search for deer
because I noticed this was a

00:21:27.080 --> 00:21:27.610
deer lodge.

00:21:27.610 --> 00:21:30.380
I see we have some topo maps and
some digital ortho quads,

00:21:30.380 --> 00:21:32.070
some raster data that's
been uploaded.

00:21:32.070 --> 00:21:34.800
And as you upload it, it's been
processed using the same

00:21:34.800 --> 00:21:37.540
sort of workflow that we use
to ingest the data that we

00:21:37.540 --> 00:21:39.630
then publish out to
Google Earth.

00:21:39.630 --> 00:21:42.610
So you get all of the same nice
ingestion workflow, where

00:21:42.610 --> 00:21:45.590
we'll take your data, put it
into what we call layers if

00:21:45.590 --> 00:21:47.590
you're putting a bunch
of layers together.

00:21:47.590 --> 00:21:54.840
Let's look at our deer lodge
layer made up of these topos,

00:21:54.840 --> 00:21:57.510
and then take a quick preview.

00:21:57.510 --> 00:22:00.400
And if we're lucky, the Earth
API should automatically

00:22:00.400 --> 00:22:03.710
connect in an authenticated way
to Earth Builder in the

00:22:03.710 --> 00:22:07.890
background and show you this
data, which has been mosaicked

00:22:07.890 --> 00:22:11.620
and kind of blended, again using
the same infrastructure

00:22:11.620 --> 00:22:15.570
that we use to ingest data for
our commercial products.

00:22:15.570 --> 00:22:21.880
So I'm going to hop
out of this demo--

00:22:21.880 --> 00:22:24.210
I think I accidentally did not
open it in a new window so

00:22:24.210 --> 00:22:25.460
you'll pardon me here--

00:22:27.740 --> 00:22:31.020
and hop over to the next item,
which is Google Earth Engine.

00:22:31.020 --> 00:22:33.780
How many of you' have
heard of that?

00:22:33.780 --> 00:22:34.060
OK.

00:22:34.060 --> 00:22:38.850
So one of the things that's very
tricky in GIS is remote

00:22:38.850 --> 00:22:42.200
sensing, or more generically,
image analysis.

00:22:42.200 --> 00:22:45.980
It's tricky because it's this
interesting overlap between

00:22:45.980 --> 00:22:48.760
scientific communities who
write really complex

00:22:48.760 --> 00:22:51.370
algorithms and then at the same
time are trying to manage

00:22:51.370 --> 00:22:53.590
sometimes extremely
large data sets.

00:22:53.590 --> 00:22:55.820
And so we're trying to solve
this problem-- this is a

00:22:55.820 --> 00:22:57.710
google.org product--

00:22:57.710 --> 00:23:01.450
using what we're calling Earth
Engine and allowing people to

00:23:01.450 --> 00:23:05.420
do near real-time analysis
on very large data sets.

00:23:05.420 --> 00:23:08.290
So some of the things I'll just
point out quickly is the

00:23:08.290 --> 00:23:10.040
data that you upload will
be kept in this native

00:23:10.040 --> 00:23:11.390
projection, which is
super important

00:23:11.390 --> 00:23:12.690
for doing image analysis.

00:23:12.690 --> 00:23:17.160
You're not warping your data and
getting different results

00:23:17.160 --> 00:23:17.950
because of that.

00:23:17.950 --> 00:23:21.460
And that you can define
algorithms. We'll launch with

00:23:21.460 --> 00:23:24.360
some common algorithms that
people might want to run, but

00:23:24.360 --> 00:23:27.520
you'll also be able to have an
API that allows you to define

00:23:27.520 --> 00:23:29.600
an algorithm to run
over this data.

00:23:29.600 --> 00:23:35.140
And we're also seeding the data
repository ourselves to

00:23:35.140 --> 00:23:39.160
start with as much as we can,
reasonably bringing in of the

00:23:39.160 --> 00:23:40.950
Landsat and MODIS imagery.

00:23:40.950 --> 00:23:43.910
Right now, we're trying to
import the Landsat imagery as

00:23:43.910 --> 00:23:46.930
fast as they can get it off
tape, and we have about half

00:23:46.930 --> 00:23:50.890
of their petabyte or so of data
online as well as daily

00:23:50.890 --> 00:23:54.390
updates on the MODIS imagery on
a whole variety of formats.

00:23:54.390 --> 00:23:56.710
And if you check out--

00:23:56.710 --> 00:23:58.740
unfortunately, my link's not
showing, but search for Google

00:23:58.740 --> 00:24:01.360
Earth Engine at code.google.com,
and you'll

00:24:01.360 --> 00:24:03.815
see that you can interact with
all of this data right now, so

00:24:03.815 --> 00:24:08.490
it'll give you a hint of
some of what we have.

00:24:08.490 --> 00:24:10.610
So I'd like to give a little
bit of context of why you

00:24:10.610 --> 00:24:12.550
might be interested in
using Earth Engine.

00:24:12.550 --> 00:24:16.700
So that is a satellite view
using the historical imagery

00:24:16.700 --> 00:24:18.490
that you would see if you loaded
up Google Earth right

00:24:18.490 --> 00:24:19.830
now in Brazil.

00:24:19.830 --> 00:24:22.290
And at the bottom left,
you can see the year.

00:24:22.290 --> 00:24:25.340
In 1976, it was kind of this
nice, big, green patch.

00:24:25.340 --> 00:24:29.800
And if you were to progress
along, you see some forest

00:24:29.800 --> 00:24:31.130
patterns changing
a little bit.

00:24:31.130 --> 00:24:34.950
And you might ask yourself how
much is actually changing?

00:24:34.950 --> 00:24:37.860
It looks like a lot, but what
if I wanted to run this

00:24:37.860 --> 00:24:41.400
analysis over an
entire country?

00:24:41.400 --> 00:24:43.340
And what if I wanted to
know how much was

00:24:43.340 --> 00:24:44.740
being cut per year?

00:24:44.740 --> 00:24:47.250
And you had access to all of
this data, which we're hoping

00:24:47.250 --> 00:24:48.460
to allow for.

00:24:48.460 --> 00:24:53.060
So if you have access to the
Landsat imagery and you have a

00:24:53.060 --> 00:24:55.000
lot of it, you can run this type
of analysis using Earth

00:24:55.000 --> 00:24:57.450
Engine, and here's the basic
workflow that we use on the

00:24:57.450 --> 00:24:59.770
back end just to give you
an idea of how it works.

00:24:59.770 --> 00:25:03.730
So we might take this one image,
which is a perhaps a

00:25:03.730 --> 00:25:07.120
very large image or set of
images, a collection of images

00:25:07.120 --> 00:25:10.110
that we want to run
our analysis over.

00:25:10.110 --> 00:25:13.970
And we'll split up into smaller
tiles, and we'll send

00:25:13.970 --> 00:25:17.340
these tiles off to separate
machines, and each machine

00:25:17.340 --> 00:25:19.990
will run the algorithm that
you've defined over the small

00:25:19.990 --> 00:25:23.900
tile in this classic
map-produced algorithm, where

00:25:23.900 --> 00:25:25.700
we assemble the final result.

00:25:25.700 --> 00:25:27.800
Depending on the algorithm you
run, you might get back an

00:25:27.800 --> 00:25:29.710
image or some statistics.

00:25:29.710 --> 00:25:33.140
Perhaps you've clipped to a
polygon, and you get the

00:25:33.140 --> 00:25:34.430
result back very,
very quickly.

00:25:34.430 --> 00:25:37.570
If you're zoomed into an area,
we run in near real time the

00:25:37.570 --> 00:25:40.040
analysis just on the area you're
looking at or the area

00:25:40.040 --> 00:25:40.890
that you need.

00:25:40.890 --> 00:25:44.040
And we're able to do this by
sending it in this sort of

00:25:44.040 --> 00:25:47.220
distributed fashion to
our infrastructure.

00:25:47.220 --> 00:25:50.030
So that's Google Earth Engine.

00:25:50.030 --> 00:25:51.110
This is a really quick
overview of

00:25:51.110 --> 00:25:52.650
what we've gone through.

00:25:52.650 --> 00:25:54.540
Some of the products have
been around a long time,

00:25:54.540 --> 00:25:58.290
overlapping in this larger world
of GIS and moving out of

00:25:58.290 --> 00:26:00.980
just pure visualization and
some new things that are

00:26:00.980 --> 00:26:04.260
really allowing you to do more
robust analysis and map

00:26:04.260 --> 00:26:07.500
publishing and all of the other
things that you see in

00:26:07.500 --> 00:26:09.940
many of our products kind of
starting to move more in this

00:26:09.940 --> 00:26:11.170
area of GIS.

00:26:11.170 --> 00:26:13.640
So to kind of show off what that
actually means for you as

00:26:13.640 --> 00:26:16.480
a developer, I'm going to invite
Mano back up to talk

00:26:16.480 --> 00:26:17.730
about some of the integration.

00:26:23.530 --> 00:26:26.620
MANO MARKS: Thanks, Josh.

00:26:26.620 --> 00:26:31.050
I'm going to talk about a
particular set of libraries

00:26:31.050 --> 00:26:36.050
that are very commonly
used within

00:26:36.050 --> 00:26:37.910
the entire GIS community.

00:26:37.910 --> 00:26:41.310
And this set of libraries is
used for doing things like

00:26:41.310 --> 00:26:45.600
interacting with GIS data
formats and doing data

00:26:45.600 --> 00:26:46.890
conversion.

00:26:46.890 --> 00:26:55.250
So this set of libraries is
the GDL/OGR libraries.

00:26:55.250 --> 00:26:59.910
GDL stands for geographic data
abstraction library, and I

00:26:59.910 --> 00:27:02.250
haven't actually been able to
get anybody to tell me what

00:27:02.250 --> 00:27:05.450
OGR stands for yet, so
an interesting--

00:27:05.450 --> 00:27:07.970
I'm sure somebody will come up
to the mike and give me their

00:27:07.970 --> 00:27:09.320
opinions on that.

00:27:09.320 --> 00:27:12.060
But basically, it's a set of
utility libraries for parsing

00:27:12.060 --> 00:27:17.650
data, doing data conversion,
doing lots of interaction on a

00:27:17.650 --> 00:27:21.870
huge range of geographic
data formats.

00:27:21.870 --> 00:27:25.880
And you can do interesting
things like convert data,

00:27:25.880 --> 00:27:31.070
reproject it, do data tiling
for raster data.

00:27:31.070 --> 00:27:37.080
It's a whole wide set of
things, and most major

00:27:37.080 --> 00:27:41.100
software applications that do
these kind of operations rely

00:27:41.100 --> 00:27:43.630
on GDL and OGR to do that.

00:27:43.630 --> 00:27:50.760
We ourselves use it in some
of our back ends for Earth

00:27:50.760 --> 00:27:55.630
Builder and also for Google
Earth Pro for doing data

00:27:55.630 --> 00:27:58.150
conversion.

00:27:58.150 --> 00:28:00.690
There's just a number of
different ways in which we--

00:28:00.690 --> 00:28:05.070
we use these at Google, and
almost all the major

00:28:05.070 --> 00:28:06.260
applications use these.

00:28:06.260 --> 00:28:08.690
These are open source libraries
under very liberal

00:28:08.690 --> 00:28:12.120
licenses, so I'm really
going to encourage you

00:28:12.120 --> 00:28:13.410
to check them out.

00:28:13.410 --> 00:28:20.510
And I'm going to actually
switch over and we had a

00:28:20.510 --> 00:28:22.660
little fire drill beforehand,
so I didn't get a chance to

00:28:22.660 --> 00:28:25.250
open up my terminal.

00:28:25.250 --> 00:28:30.060
But I'm going to connect to a
server where we set up the

00:28:30.060 --> 00:28:40.480
latest version of GDL,
that is, GDL 1.9.

00:28:40.480 --> 00:28:45.330
This is actually not available
in the builds,

00:28:45.330 --> 00:28:47.015
in the binary downloads.

00:28:47.015 --> 00:28:53.750
It's available only in the
nightly build so you have to

00:28:53.750 --> 00:29:01.380
actually compile the
source for it.

00:29:01.380 --> 00:29:06.220
But the feature that I'm going
to be showing you--

00:29:06.220 --> 00:29:08.610
sorry about that--

00:29:08.610 --> 00:29:15.510
is a feature that is available
for the first time in GDL.

00:29:15.510 --> 00:29:20.830
You can now upload directly to
Google Fusion Tables using the

00:29:20.830 --> 00:29:23.140
GDL libraries.

00:29:23.140 --> 00:29:29.670
So this is the first time that
cloud data storage feature has

00:29:29.670 --> 00:29:32.640
been incorporated within
the GDL libraries.

00:29:32.640 --> 00:29:37.020
It's got a very simple mechanism
for doing this.

00:29:37.020 --> 00:29:42.380
So what I'm going to do right
now is I'm going to show you a

00:29:42.380 --> 00:29:48.450
command line sample here.

00:29:48.450 --> 00:29:51.900
So this is a little hard to
read because I have to do

00:29:51.900 --> 00:29:56.730
authentication in order to
convert a shape file to Google

00:29:56.730 --> 00:29:57.410
Fusion tables.

00:29:57.410 --> 00:30:00.370
But what you see here is
I've got OGR to OGR--

00:30:00.370 --> 00:30:03.840
which is your data conversion
utility here--

00:30:03.840 --> 00:30:07.680
dash f GFT for Google Fusion
Tables, and then this start a

00:30:07.680 --> 00:30:09.970
very long string.

00:30:09.970 --> 00:30:13.390
You've got those four lines
on the screen there.

00:30:13.390 --> 00:30:17.740
That's my auth token
that I got using a

00:30:17.740 --> 00:30:19.110
previous command line.

00:30:19.110 --> 00:30:21.790
OGR to OGR info, I believe.

00:30:21.790 --> 00:30:25.220
And then you'll see the last
line right there is

00:30:25.220 --> 00:30:26.470
San_Francisco.shp.

00:30:28.030 --> 00:30:34.770
And this is a series of bike
lanes in San Francisco.

00:30:34.770 --> 00:30:38.540
I just downloaded this
from the sfdata.gov.

00:30:38.540 --> 00:30:43.970
and I run this command line
utility, and it's basically

00:30:43.970 --> 00:30:48.720
converting from a shape file to
a Fusion Tables table, and

00:30:48.720 --> 00:30:49.510
you see that's done.

00:30:49.510 --> 00:30:56.200
It's actually fairly peppy
there, very quick, and I'm

00:30:56.200 --> 00:30:58.780
going to refresh my Fusion
Tables list, you'll see there

00:30:58.780 --> 00:31:01.350
I have this San Francisco
table.

00:31:01.350 --> 00:31:05.660
And I go there, and it's
actually converted the

00:31:05.660 --> 00:31:08.450
geometries to KML and
then uploaded them.

00:31:08.450 --> 00:31:15.810
I clicked on Map, and
I have this data

00:31:15.810 --> 00:31:17.600
directly in Fusion Tables.

00:31:17.600 --> 00:31:21.620
So this is available to you
right now in Version 1.9 of

00:31:21.620 --> 00:31:23.540
the GDL libraries.

00:31:23.540 --> 00:31:25.980
I'm running a little over time,
so I'm going to switch

00:31:25.980 --> 00:31:32.690
back to Josh and let
him finish up.

00:31:32.690 --> 00:31:34.960
JOSH LIVNI: Thanks, Mano.

00:31:34.960 --> 00:31:39.540
So you'll probably have a good
time working with GDL and OGR,

00:31:39.540 --> 00:31:43.560
but not all of your end users
will for your applications.

00:31:43.560 --> 00:31:45.765
And so I just wanted to quickly
mention before we

00:31:45.765 --> 00:31:48.620
bring Brian on stage the kind
of application that we're

00:31:48.620 --> 00:31:50.000
hoping you guys might build.

00:31:50.000 --> 00:31:52.840
So this is something I put
together in a day called

00:31:52.840 --> 00:31:56.410
ShpEscape, which lets you
take a shape file.

00:31:56.410 --> 00:31:57.750
How many of you know what
shape files are?

00:31:57.750 --> 00:31:58.620
That'd be a good question.

00:31:58.620 --> 00:32:00.090
OK, I think we're good then.

00:32:00.090 --> 00:32:02.680
Take a shape file and just very,
very easily let the end

00:32:02.680 --> 00:32:05.600
user upload a shape file, and
it does basically the same

00:32:05.600 --> 00:32:08.750
thing that Mano just showed
off but via WebUI.

00:32:08.750 --> 00:32:11.140
And this was built using the
Fusion Tables' API and the

00:32:11.140 --> 00:32:15.960
same technologies OGR and
GDL, built on GeoDjango.

00:32:15.960 --> 00:32:19.220
So this is open source code in
case you guys want to check it

00:32:19.220 --> 00:32:21.380
out, just as kind of an example
of how you might do

00:32:21.380 --> 00:32:22.090
this type of thing.

00:32:22.090 --> 00:32:25.310
You're welcome to grab it
and build this type of

00:32:25.310 --> 00:32:26.460
application.

00:32:26.460 --> 00:32:29.050
But much more interesting in
this kind of one-off Stay

00:32:29.050 --> 00:32:31.850
application are the really rich
and robust applications

00:32:31.850 --> 00:32:34.275
that we're hoping you guys will
put together using all of

00:32:34.275 --> 00:32:35.700
our different services and take

00:32:35.700 --> 00:32:37.100
advantage of this overlap.

00:32:37.100 --> 00:32:40.640
And a really, really great
example of how to do this is

00:32:40.640 --> 00:32:42.710
what Brian Flood's put together,
I'll switch over to

00:32:42.710 --> 00:32:43.960
his slides here.

00:32:48.100 --> 00:32:50.030
BRIAN FLOOD: While Josh is
getting this ready, my name's

00:32:50.030 --> 00:32:51.740
Brian Flood.

00:32:51.740 --> 00:32:53.780
I work for a company called
Arc2Earth, and we have a piece

00:32:53.780 --> 00:32:58.420
of software that is basically a
bridge software between the

00:32:58.420 --> 00:33:02.290
Esri ArcGIS world and the
Google Geo world.

00:33:02.290 --> 00:33:05.380
So is everyone in the room
familiar with ArcGIS?

00:33:05.380 --> 00:33:06.690
Hands up?

00:33:06.690 --> 00:33:07.720
So just about everyone.

00:33:07.720 --> 00:33:09.240
OK, great.

00:33:09.240 --> 00:33:13.810
They clearly are the big name in
the GIS space, and what we

00:33:13.810 --> 00:33:17.690
try to do is build applications
to kind of bridge

00:33:17.690 --> 00:33:18.940
the two together.

00:33:25.560 --> 00:33:28.880
OK, so basically what Arc2Earth
is, it handles

00:33:28.880 --> 00:33:31.420
various different aspects of
getting your data out of

00:33:31.420 --> 00:33:34.670
ArcGIS and into the Google
Geo properties.

00:33:34.670 --> 00:33:40.320
We do KML exports and imports,
map tile cache creation.

00:33:40.320 --> 00:33:43.340
We have a new product where we
are bringing Google Map data,

00:33:43.340 --> 00:33:47.220
the street data and imagery,
directly into ArcMap.

00:33:47.220 --> 00:33:49.910
We do Fusion Table uploads, and
Josh and Mano were talking

00:33:49.910 --> 00:33:50.930
about Fusion Table so
I'm going to show

00:33:50.930 --> 00:33:52.140
you some demos there.

00:33:52.140 --> 00:33:54.500
And then we also have some
planned support for their

00:33:54.500 --> 00:33:57.100
really cool new Google Earth
Builder product, which is

00:33:57.100 --> 00:33:58.670
coming out.

00:33:58.670 --> 00:34:00.080
So basically, I'm just going
to run over this

00:34:00.080 --> 00:34:01.880
stuff really quickly.

00:34:01.880 --> 00:34:03.700
We actually export KML.

00:34:03.700 --> 00:34:05.710
We do some very complex
type of export.

00:34:05.710 --> 00:34:07.710
We take all of your symbology.

00:34:07.710 --> 00:34:10.350
If you have very large data
sets, we'll break it up into

00:34:10.350 --> 00:34:13.310
KML regions for you
automatically.

00:34:13.310 --> 00:34:15.170
There's a lot of other bells
and whistles in there.

00:34:15.170 --> 00:34:18.480
We also import KML data, and
we're able to get information

00:34:18.480 --> 00:34:21.350
out of the pop-up windows
and turn it into real

00:34:21.350 --> 00:34:24.210
attributes in ArcGIS.

00:34:24.210 --> 00:34:28.320
Map tile caches: basically,
anything that you can display

00:34:28.320 --> 00:34:29.639
inside of ArcMap.

00:34:29.639 --> 00:34:32.889
This is raster data or any
type of symbology,

00:34:32.889 --> 00:34:33.840
TINs or any of those.

00:34:33.840 --> 00:34:36.840
You can turn into map tile
caches that can then be

00:34:36.840 --> 00:34:40.030
displayed directly over the
top of Google Maps.

00:34:40.030 --> 00:34:42.960
To the right there, you can see
another-- this is an open

00:34:42.960 --> 00:34:44.840
source application
called MapBox.

00:34:44.840 --> 00:34:47.449
We will support those types of
formats so you can take your

00:34:47.449 --> 00:34:53.190
map tiles, put them on an iPad
or an Android application and

00:34:53.190 --> 00:34:57.070
be disconnected and have
them out in the field.

00:34:57.070 --> 00:34:59.700
Data services, as I said, is the
new product we have, and

00:34:59.700 --> 00:35:01.770
it's basically taking Google
imagery and bringing

00:35:01.770 --> 00:35:03.550
it inside of ArcMap.

00:35:03.550 --> 00:35:05.780
Then you can display your data
directly over the top.

00:35:05.780 --> 00:35:08.520
Worldwide coverage, and it
automatically freshes as you

00:35:08.520 --> 00:35:11.760
move the map around.

00:35:11.760 --> 00:35:14.690
Fusion Tables: obviously,
anything you can display and

00:35:14.690 --> 00:35:19.262
have inside of ArcMap, you can
point our uploader directly at

00:35:19.262 --> 00:35:22.640
it, and it'll take care of it
and use the Fusion Tables API.

00:35:22.640 --> 00:35:26.850
So we're not bound by any of
the KML export or import

00:35:26.850 --> 00:35:30.430
limits with Fusion Tables right
now, so as large as you

00:35:30.430 --> 00:35:33.870
need, it'll ask import it up.

00:35:33.870 --> 00:35:35.910
So one of the things I want to
talk about because I know they

00:35:35.910 --> 00:35:39.610
released it at Google IO is the
new style API that they're

00:35:39.610 --> 00:35:40.480
going to do.

00:35:40.480 --> 00:35:42.960
We will handle that in the
next rev of Arc2Earth.

00:35:42.960 --> 00:35:45.620
Basically, anything
you can see.

00:35:45.620 --> 00:35:46.670
You have your layers.

00:35:46.670 --> 00:35:50.480
The renderers and labeling and
symbols will be able to, as

00:35:50.480 --> 00:35:53.630
best as possible, get it
up into Fusion Tables.

00:35:53.630 --> 00:35:55.950
You can define your info windows
directly inside of

00:35:55.950 --> 00:35:58.680
ArcMap and have them show right
up in Fusion Tables.

00:36:02.990 --> 00:36:06.020
So basically, the stuff I want
to show, the two quick demos,

00:36:06.020 --> 00:36:09.570
is how can we make Fusion Tables
more GIS like and how

00:36:09.570 --> 00:36:11.170
can we make them interoperate
with your

00:36:11.170 --> 00:36:13.900
standard Enterprise GIS?

00:36:13.900 --> 00:36:16.830
With Fusion Tables, you're
getting definitely

00:36:16.830 --> 00:36:18.690
scaleability, zero
configuration, zero

00:36:18.690 --> 00:36:19.810
maintenance for it.

00:36:19.810 --> 00:36:23.030
So for a lot of our clients,
it's just a no-brainer to move

00:36:23.030 --> 00:36:25.850
to this type of setup.

00:36:25.850 --> 00:36:28.610
So the last point there is
probably the most important.

00:36:28.610 --> 00:36:32.400
What we want to do is how do we
take Fusion Tables and then

00:36:32.400 --> 00:36:36.450
make it look like something that
a typical ArcGIS server

00:36:36.450 --> 00:36:37.700
can interoperate with?

00:36:37.700 --> 00:36:41.850
And Esri, they released an open
REST specification that

00:36:41.850 --> 00:36:46.730
then we took and implemented
up on top of AppEngine.

00:36:46.730 --> 00:36:48.980
So some of the technology stacks
that we're using for

00:36:48.980 --> 00:36:51.400
these demos is obviously
Google Maps Premier.

00:36:51.400 --> 00:36:54.570
We have AppEngine,
Fusion Tables,

00:36:54.570 --> 00:36:56.850
some ArcGIS and Arc2Cloud.

00:36:56.850 --> 00:36:59.560
And Arc2Cloud is--

00:36:59.560 --> 00:37:03.220
basically what we have running
up on top of AppEngine is a

00:37:03.220 --> 00:37:06.390
wrapper around Fusion Tables,
and we're adding extra GIS

00:37:06.390 --> 00:37:08.590
functionality to it.

00:37:08.590 --> 00:37:11.630
Primarily what you want to look
at is the data sources up

00:37:11.630 --> 00:37:14.350
top, and they are one for one
with your Fusion Tables.

00:37:14.350 --> 00:37:15.330
We use [? Aloft ?]

00:37:15.330 --> 00:37:17.790
to communicate with Fusion
Tables and then find out what

00:37:17.790 --> 00:37:21.250
your data is and then add this
extra functionality.

00:37:21.250 --> 00:37:26.000
We have a native REST API and
the geospatial REST spec is

00:37:26.000 --> 00:37:29.010
how we interoperate with
Esri products.

00:37:29.010 --> 00:37:31.910
One of the primary things we
wanted to be able to do was

00:37:31.910 --> 00:37:34.340
every row of data that you have
inside of Fusion Tables,

00:37:34.340 --> 00:37:37.250
we wanted to make it URL
addressable so that you can

00:37:37.250 --> 00:37:39.590
get at it and have different
formats for it.

00:37:39.590 --> 00:37:42.080
So every one of your rows and
every one of your searches you

00:37:42.080 --> 00:37:48.320
can return as JSON, GeoJSON,
Esri's JSON specification.

00:37:48.320 --> 00:37:51.010
Some of the lesser-known ones in
the GIS world are like GML,

00:37:51.010 --> 00:37:52.750
well-known text.

00:37:52.750 --> 00:37:55.480
You can get QR codes that are
associated with it and that

00:37:55.480 --> 00:37:57.940
point back directly
at that data.

00:37:57.940 --> 00:38:01.830
So basically, we are wrapping
Fusion Tables and getting it

00:38:01.830 --> 00:38:03.080
more GIS like.

00:38:07.640 --> 00:38:10.970
So for the quick demo, I just
wanted to be able to show you,

00:38:10.970 --> 00:38:14.490
this is Arc2Cloud
user interface.

00:38:14.490 --> 00:38:15.740
We're able to--

00:38:18.090 --> 00:38:22.770
via your settings, you go in
and set up your [? Aloft ?]

00:38:22.770 --> 00:38:23.200
tokens.

00:38:23.200 --> 00:38:25.320
We can do this automatically for
you and that's how we tie

00:38:25.320 --> 00:38:26.510
into your data.

00:38:26.510 --> 00:38:28.050
And then you can start
building maps.

00:38:28.050 --> 00:38:31.396
And maps are basically
collections of layers.

00:38:31.396 --> 00:38:32.580
So we'll drill into this.

00:38:32.580 --> 00:38:34.295
I've been downloading
it all day.

00:38:34.295 --> 00:38:35.740
It has a list of layers.

00:38:35.740 --> 00:38:38.120
You can see each one of these
is pointing directly at a

00:38:38.120 --> 00:38:39.370
Fusion Table.

00:38:43.780 --> 00:38:45.080
A bunch of polygons.

00:38:45.080 --> 00:38:47.010
We've been doing demos in
the sandbox all day.

00:38:51.430 --> 00:38:52.050
So that's cool.

00:38:52.050 --> 00:38:55.080
So we're able to make a
collection of layers, and how

00:38:55.080 --> 00:38:57.910
can we display this inside some
of the ESRI properties?

00:38:57.910 --> 00:39:00.460
So let's take that same map
and we'll view it in

00:39:00.460 --> 00:39:01.710
arcgis.com.

00:39:06.740 --> 00:39:12.390
And so right now the arcgis.com
JavaScript is

00:39:12.390 --> 00:39:15.350
talking to AppEngine and
AppEngine is talking to Fusion

00:39:15.350 --> 00:39:18.070
Tables to get that data out, and
we can go in and use some

00:39:18.070 --> 00:39:20.060
of their great editing tools
that are inside there.

00:39:23.684 --> 00:39:30.850
Let's just draw a polygon out
in the middle of the ocean.

00:39:30.850 --> 00:39:33.440
We can go in and change
attributes.

00:39:33.440 --> 00:39:35.995
You can then attach photos and
stuff, and those photos will

00:39:35.995 --> 00:39:38.440
be stored in AppEngine
in the BlobStore.

00:39:38.440 --> 00:39:42.220
And the cool part obviously is
if we go back and take a look

00:39:42.220 --> 00:39:44.650
at that same Fusion Table,
we'll see that it

00:39:44.650 --> 00:39:48.380
automatically linked up, and
it's all ready to go for

00:39:48.380 --> 00:39:50.610
everyone else to--

00:39:50.610 --> 00:39:52.040
so there's that polygon.

00:39:52.040 --> 00:39:54.290
So the idea is we have this
thing running on AppEngine

00:39:54.290 --> 00:39:56.760
that's a wrapper around F
Fusion Tables and we're

00:39:56.760 --> 00:39:58.920
synchronizing all the
data back and forth.

00:39:58.920 --> 00:40:02.240
Any ArcGIS property can then
talk to it and then talk

00:40:02.240 --> 00:40:03.490
directly to the Fusion Tables.

00:40:09.630 --> 00:40:12.470
So another demo I wanted to
show real quickly was Task

00:40:12.470 --> 00:40:13.620
Queue Geoprocessing.

00:40:13.620 --> 00:40:16.260
We wanted to be able to use
the Google AppEngine Task

00:40:16.260 --> 00:40:19.900
Queue to perform some of the
standard geospatial operations

00:40:19.900 --> 00:40:23.960
on two or more Fusion Tables
at the same time.

00:40:23.960 --> 00:40:26.070
This is usually something
you want to desktop.

00:40:26.070 --> 00:40:28.630
Josh was showing you before how
something like the Earth

00:40:28.630 --> 00:40:30.120
Engine works on raster data.

00:40:30.120 --> 00:40:34.030
This is for vector data
in Fusion Tables.

00:40:34.030 --> 00:40:36.940
It's kind of experimental now,
but we think it has a lot of

00:40:36.940 --> 00:40:39.660
legs and something we're
going to be working on.

00:40:39.660 --> 00:40:41.910
Some of the types of operations
you want to do is

00:40:41.910 --> 00:40:45.880
full-layer buffering or
clipping, merging between two

00:40:45.880 --> 00:40:49.260
different layers and coming up
with a new Fusion Table.

00:40:49.260 --> 00:40:52.020
We're using JTS, Java Topology
Suite, and that's running up

00:40:52.020 --> 00:40:55.020
on top of AppEngine.

00:40:55.020 --> 00:40:57.015
So basically how this
would work is--

00:41:02.930 --> 00:41:06.680
well, the top request
comes in.

00:41:06.680 --> 00:41:09.360
It will go to the data store
iterator, and basically what

00:41:09.360 --> 00:41:12.120
that is is how do you break
up processing this in a

00:41:12.120 --> 00:41:13.760
map-produced type way?

00:41:13.760 --> 00:41:15.870
Depending on the spatial
operation you're doing, you

00:41:15.870 --> 00:41:18.570
may want to do it in ranges,
which is just groups of rows

00:41:18.570 --> 00:41:21.980
from Fusion Tables, or if they
need to be spatially related,

00:41:21.980 --> 00:41:23.260
it needs to be done in grids.

00:41:23.260 --> 00:41:26.910
And grids will basically then go
out, query both the tables,

00:41:26.910 --> 00:41:29.890
bring them back to AppEngine,
do the operation, and then

00:41:29.890 --> 00:41:31.920
write it back out to
Fusion Tables.

00:41:31.920 --> 00:41:33.760
So you can see on the right hand
of the screen there, you

00:41:33.760 --> 00:41:37.250
can see that occurring in the
Task Queue, and then when it's

00:41:37.250 --> 00:41:40.200
done, it's actually writing back
to the new Fusion Table.

00:41:43.770 --> 00:41:48.410
So I'll just try and do a quick
demo of this to show you

00:41:48.410 --> 00:41:49.660
what we're talking about.

00:41:51.690 --> 00:41:54.310
So basically you go down to
your Analytics section.

00:41:54.310 --> 00:41:55.820
We're going to do
a spatial join.

00:41:55.820 --> 00:41:59.760
And what a spatial join is we
have two different tables, a

00:41:59.760 --> 00:42:03.040
polygon table in Fusion
Tables and a point

00:42:03.040 --> 00:42:04.170
layer in Fusion Tables.

00:42:04.170 --> 00:42:07.600
We want to be able to add a
new field on the polygon

00:42:07.600 --> 00:42:10.540
layer, and then sum up the count
of one of the properties

00:42:10.540 --> 00:42:11.790
on the point layer.

00:42:19.800 --> 00:42:22.340
Blockpop is the point layer.

00:42:22.340 --> 00:42:24.690
We'll call this zipcode_join_9.

00:42:30.230 --> 00:42:32.560
These are the different options
for the type of join

00:42:32.560 --> 00:42:33.650
we want to do.

00:42:33.650 --> 00:42:34.720
Here are the fields.

00:42:34.720 --> 00:42:37.990
We want to calculate the total
number of households.

00:42:37.990 --> 00:42:41.670
The aggregate operation is
how you want that to

00:42:41.670 --> 00:42:43.770
actually be summed up.

00:42:43.770 --> 00:42:45.550
A simple sum is fine.

00:42:45.550 --> 00:42:48.220
And then we hit run.

00:42:48.220 --> 00:42:51.345
And what this is doing now,
well, we saw in the last slide

00:42:51.345 --> 00:42:53.690
is it's breaking up into
multiple ranges.

00:42:53.690 --> 00:42:55.690
It's going off to the
Fusion Tables.

00:42:55.690 --> 00:42:58.450
It's pulling that data in
and actually making

00:42:58.450 --> 00:42:59.700
the join for you.

00:43:03.810 --> 00:43:09.400
And so we saw a small error
there, but for the most part,

00:43:09.400 --> 00:43:10.990
we'll be able to drill
in and see.

00:43:10.990 --> 00:43:12.240
[TYPING]

00:43:27.870 --> 00:43:29.600
BRIAN FLOOD: So if we look at
this new Fusion Table that was

00:43:29.600 --> 00:43:34.400
created, we'll see there's now
a households field at the end

00:43:34.400 --> 00:43:36.600
that's populated with the
sum of all that point

00:43:36.600 --> 00:43:37.850
data that came in.

00:43:43.170 --> 00:43:46.720
So the idea there is how can
we bring the standard

00:43:46.720 --> 00:43:49.620
geospatial operations that you
do in the Esri and ArcGIS

00:43:49.620 --> 00:43:54.160
world and bring it online and
do it inside the cloud?

00:43:54.160 --> 00:43:56.290
So here are just some of the
pros and cons of this.

00:43:56.290 --> 00:44:00.070
Distributed dataset analysis
is far more attractive.

00:44:00.070 --> 00:44:03.510
You can do it on your live
data up in Fusion Tables.

00:44:03.510 --> 00:44:05.980
The Fusion Table is immediately
available for your

00:44:05.980 --> 00:44:08.740
online applications to use.

00:44:08.740 --> 00:44:10.870
A lot of the stuff in the Task
Queue for AppEngine can take

00:44:10.870 --> 00:44:13.180
care of small errors
and re-queue them.

00:44:13.180 --> 00:44:15.660
Obviously, there's a lot
of bandwidth consumed.

00:44:15.660 --> 00:44:17.670
We think in the future that this
is not going to be that

00:44:17.670 --> 00:44:18.590
big a deal.

00:44:18.590 --> 00:44:20.020
It might be now.

00:44:20.020 --> 00:44:21.240
And then there's some
other issues with

00:44:21.240 --> 00:44:23.060
oversampling of data.

00:44:23.060 --> 00:44:26.340
On Arc2Cloud, we do have a
feature cache, which helps

00:44:26.340 --> 00:44:29.130
with this type of operation.

00:44:29.130 --> 00:44:30.930
So that's just my quick demo.

00:44:30.930 --> 00:44:34.010
Thanks a lot for listening, and
come check us out in the

00:44:34.010 --> 00:44:35.580
sandbox if you want to learn
a little bit more.

00:44:35.580 --> 00:44:36.830
[APPLAUSE]

00:44:40.690 --> 00:44:41.720
MANO MARKS: Thanks
a lot, Brian.

00:44:41.720 --> 00:44:42.880
That's pretty impressive
stuff.

00:44:42.880 --> 00:44:43.910
BRIAN FLOOD: Cool.

00:44:43.910 --> 00:44:46.720
JOSH LIVNI: So just summing up
here, you can see a lot of

00:44:46.720 --> 00:44:51.400
different ways that we can
overlap with the sort of

00:44:51.400 --> 00:44:54.060
traditional GIS with a lot of
the services that we have and

00:44:54.060 --> 00:44:55.500
look forward to some Q&amp;A here.

00:44:55.500 --> 00:44:59.690
If you don't mind just coming up
to the mikes and lining up

00:44:59.690 --> 00:45:01.350
behind them, we'll
do our best.

00:45:01.350 --> 00:45:01.655
MANO MARKS: Yes.

00:45:01.655 --> 00:45:06.030
And also you'll see there's
a feedback link on there.

00:45:06.030 --> 00:45:09.030
We're on the speaker meter, so
please feel free to give us

00:45:09.030 --> 00:45:11.020
feedback on the talk.

00:45:11.020 --> 00:45:13.524
Please come up to the mikes
if you have any questions.

00:45:16.446 --> 00:45:17.696
Don't be shy.

00:45:21.440 --> 00:45:22.590
AUDIENCE: A dumb question.

00:45:22.590 --> 00:45:25.480
What's the price and model
for Fusion Tables?

00:45:25.480 --> 00:45:28.240
MANO MARKS: So currently,
your--

00:45:28.240 --> 00:45:31.090
any Google account gets
a free quota.

00:45:31.090 --> 00:45:33.570
That's 250 megabytes.

00:45:33.570 --> 00:45:38.480
If you get Maps API Premier,
then you get along with that I

00:45:38.480 --> 00:45:40.630
believe it's 10 gigabytes;
is that right?

00:45:40.630 --> 00:45:44.440
And then you can pay for
more by gigabyte.

00:45:44.440 --> 00:45:47.050
JOSH LIVNI: We're just starting
to add some pricing

00:45:47.050 --> 00:45:50.660
to Fusion Tables Premier, and
if you're already a Premier

00:45:50.660 --> 00:45:52.040
customer, it would probably
be best just to

00:45:52.040 --> 00:45:53.250
call the sales rep.

00:45:53.250 --> 00:45:55.220
I'm not sure the numbers off the
top of my head, but we do

00:45:55.220 --> 00:45:57.540
have a pricing model that gets
you additional QPS and

00:45:57.540 --> 00:45:58.410
additional storage.

00:45:58.410 --> 00:46:00.160
I'm not sure exactly
what it is offhand.

00:46:00.160 --> 00:46:03.750
AUDIENCE: So one is a storage
and the other one is a hit?

00:46:03.750 --> 00:46:06.250
MANO MARKS: So there's both.

00:46:06.250 --> 00:46:12.010
So with the free Fusion Tables,
with your regular

00:46:12.010 --> 00:46:15.100
Google account, you get five
queries per second and 250

00:46:15.100 --> 00:46:16.230
megabytes of storage.

00:46:16.230 --> 00:46:18.750
JOSH LIVNI: And to clarify,
that's against the API, not

00:46:18.750 --> 00:46:20.090
views of people hitting
your stuff.

00:46:20.090 --> 00:46:20.340
AUDIENCE: Right.

00:46:20.340 --> 00:46:22.420
OK, yeah.

00:46:22.420 --> 00:46:25.440
MANO MARKS: And then you get
much more with Premier.

00:46:25.440 --> 00:46:27.060
And you can pay for
additional.

00:46:27.060 --> 00:46:29.253
AUDIENCE: When would be the
final pricing coming out?

00:46:29.253 --> 00:46:30.000
Do you guys--

00:46:30.000 --> 00:46:31.410
MANO MARKS: The final pricing
is actually out, but you

00:46:31.410 --> 00:46:33.100
should talk to a salesperson
about it.

00:46:33.100 --> 00:46:33.560
AUDIENCE: OK.

00:46:33.560 --> 00:46:34.810
All right, thanks.

00:46:38.160 --> 00:46:39.162
MANO MARKS: Did you
have a question?

00:46:39.162 --> 00:46:41.890
AUDIENCE: Well, I just had a
comment, that maybe I haven't

00:46:41.890 --> 00:46:44.380
found it and you guys are
already on it, but you were

00:46:44.380 --> 00:46:46.250
talking about getting
historical

00:46:46.250 --> 00:46:48.920
data into Google Earth.

00:46:48.920 --> 00:46:52.110
And one of the sites I've had
a lot of fun with is a place

00:46:52.110 --> 00:46:55.700
called historicaerials.com, and
they have put online a lot

00:46:55.700 --> 00:46:59.145
of the USGS aerial mappings
from the '40s, '50s

00:46:59.145 --> 00:47:02.270
and '60s in the US.

00:47:02.270 --> 00:47:04.450
MANO MARKS: Yeah, that's
a great site.

00:47:04.450 --> 00:47:06.475
We're definitely aware
of that site.

00:47:06.475 --> 00:47:08.830
So what you're asking
about is--

00:47:08.830 --> 00:47:11.070
I have to repeat this
for the video--

00:47:11.070 --> 00:47:14.940
is historical imagery and I
guess whether we can integrate

00:47:14.940 --> 00:47:17.130
with stuff from Historical
Aerials.

00:47:17.130 --> 00:47:21.680
Yeah, we are actively pursuing
additional historical imagery.

00:47:21.680 --> 00:47:24.820
So if you go to Google Earth,
you can see there's a historic

00:47:24.820 --> 00:47:28.520
imagery button, and there you
can view lot of different

00:47:28.520 --> 00:47:30.140
imagery for different
locations.

00:47:30.140 --> 00:47:32.520
Obviously, over the years,
we've built up our own

00:47:32.520 --> 00:47:35.810
imagery, but we have imagery
going back I think into the

00:47:35.810 --> 00:47:40.940
'30s, maybe even earlier than
that, so aerial imagery

00:47:40.940 --> 00:47:43.095
obviously, satellite imagery
from the 1930s.

00:47:43.095 --> 00:47:43.560
AUDIENCE: All right.

00:47:43.560 --> 00:47:45.860
Well, I'll go look some more.

00:47:45.860 --> 00:47:47.200
MANO MARKS: And that's also--

00:47:47.200 --> 00:47:50.220
in November, I believe, we made
that available in the

00:47:50.220 --> 00:47:53.256
Google Earth API so you can
programmatically interact with

00:47:53.256 --> 00:47:54.390
that as well.

00:47:54.390 --> 00:47:54.840
AUDIENCE: Nice.

00:47:54.840 --> 00:47:55.340
Thanks.

00:47:55.340 --> 00:47:56.590
MANO MARKS: Sure.

00:47:58.520 --> 00:48:01.600
AUDIENCE: You showed the
distance-based queries on the

00:48:01.600 --> 00:48:02.784
Fusion Table.

00:48:02.784 --> 00:48:06.030
Is it just Euclidean and are
there are any plans for

00:48:06.030 --> 00:48:08.940
network distance?

00:48:08.940 --> 00:48:11.940
JOSH LIVNI: There aren't any
plans for network distance as

00:48:11.940 --> 00:48:12.970
far as I know.

00:48:12.970 --> 00:48:15.930
I should caveat that a little
bit with saying that the Maps

00:48:15.930 --> 00:48:20.990
API, we just recently launched
a distance matrix calculation

00:48:20.990 --> 00:48:22.100
that lets you do--

00:48:22.100 --> 00:48:27.130
given a set of points, kind of
a matrix on them, you can get

00:48:27.130 --> 00:48:31.880
the time it would take to travel
using various different

00:48:31.880 --> 00:48:34.390
bicycling, walking and
driving directions.

00:48:34.390 --> 00:48:37.100
So that type of network distance
we offer in the Maps

00:48:37.100 --> 00:48:40.390
API using their sort
of directions API.

00:48:40.390 --> 00:48:42.780
But Fusion Tables uses--

00:48:42.780 --> 00:48:44.970
I don't think it's actually
Euclidean distance.

00:48:44.970 --> 00:48:46.492
It's--

00:48:46.492 --> 00:48:47.470
I'm not actually sure.

00:48:47.470 --> 00:48:50.930
I should check up on that before
I say something it

00:48:50.930 --> 00:48:51.750
might not be.

00:48:51.750 --> 00:48:53.710
But yeah, we're probably not
going to offer network

00:48:53.710 --> 00:48:54.960
distance in that.

00:48:59.690 --> 00:49:02.030
AUDIENCE: You mentioned when you
upload data to the Fusion

00:49:02.030 --> 00:49:04.150
Tables, if you include
additional information, that

00:49:04.150 --> 00:49:05.050
may get geocoded.

00:49:05.050 --> 00:49:08.350
Are there limits in the
[UNINTELLIGIBLE].

00:49:08.350 --> 00:49:09.750
Not the fact that it's going
to get geocoded.

00:49:09.750 --> 00:49:11.770
Like if I want to display-- if
I want to upload like a real

00:49:11.770 --> 00:49:12.910
large data set.

00:49:12.910 --> 00:49:15.480
MANO MARKS: Yeah, so the
limits are the same as

00:49:15.480 --> 00:49:16.610
for the Maps API.

00:49:16.610 --> 00:49:21.990
So you actually have to trigger
this in Fusion Tables,

00:49:21.990 --> 00:49:26.700
when you upload a file and it's
got a single column for

00:49:26.700 --> 00:49:28.250
your addresses.

00:49:28.250 --> 00:49:32.560
And then you go into Maps, it'll
start to geocode it.

00:49:32.560 --> 00:49:37.230
And the limit is 2,500 a day for
the free accounts and then

00:49:37.230 --> 00:49:40.450
whatever your quotas
are for Premier.

00:49:40.450 --> 00:49:44.780
AUDIENCE: So the geocoder is
about the same speed as if

00:49:44.780 --> 00:49:46.880
you're using Google
Maps to geocode?

00:49:46.880 --> 00:49:47.130
MANO MARKS: Yes.

00:49:47.130 --> 00:49:47.621
AUDIENCE: Good.

00:49:47.621 --> 00:49:50.230
OK.

00:49:50.230 --> 00:49:52.200
MANO MARKS: You don't need the
geocoder if you already have

00:49:52.200 --> 00:49:55.090
latitude/longitude
information.

00:49:55.090 --> 00:49:56.850
Next?

00:49:56.850 --> 00:49:58.570
AUDIENCE: This question's
for Brian.

00:49:58.570 --> 00:50:03.210
You mentioned how your products
can take the Google

00:50:03.210 --> 00:50:07.370
content and stream it
into the ArcGIS.

00:50:07.370 --> 00:50:08.580
BRIAN FLOOD: Right, right.

00:50:08.580 --> 00:50:09.490
AUDIENCE: Is it the desktop?

00:50:09.490 --> 00:50:10.990
BRIAN FLOOD: The desktop.

00:50:10.990 --> 00:50:13.930
AUDIENCE: Can you elaborate on
that, how it works exactly?

00:50:13.930 --> 00:50:16.660
BRIAN FLOOD: Well, basically, we
became an OEM partner with

00:50:16.660 --> 00:50:18.360
Google so we were allowed
to do that.

00:50:18.360 --> 00:50:21.470
And what it's doing in the
background is interacting with

00:50:21.470 --> 00:50:23.680
the Google Maps Premier API.

00:50:23.680 --> 00:50:27.270
And as you pan around on the
map, it's bringing the data in

00:50:27.270 --> 00:50:29.595
and just displaying it
as an extra layer.

00:50:29.595 --> 00:50:31.050
AUDIENCE: So it's using
the actual tiles.

00:50:31.050 --> 00:50:33.110
It's not like a WMS
or something?

00:50:33.110 --> 00:50:35.255
BRIAN FLOOD: It's not a WMS and
it's not the actual tiles.

00:50:35.255 --> 00:50:38.410
It's kind of some secret sauce
that allows us to get the best

00:50:38.410 --> 00:50:39.135
of both worlds.

00:50:39.135 --> 00:50:39.540
AUDIENCE: OK.

00:50:39.540 --> 00:50:42.170
BRIAN FLOOD: Some caching, but
doing it the legal, legit way

00:50:42.170 --> 00:50:43.630
with Google.

00:50:43.630 --> 00:50:44.880
AUDIENCE: OK, thank you.

00:50:51.720 --> 00:50:56.870
AUDIENCE: With Fusion Tables,
there is a final KML URL that

00:50:56.870 --> 00:50:57.960
you can use, right?

00:50:57.960 --> 00:50:58.990
MANO MARKS: That's correct.

00:50:58.990 --> 00:51:02.730
AUDIENCE: So you can open up
KMLs in ArcGIS, can't you?

00:51:02.730 --> 00:51:04.920
Or I guess you would just
get a snapshot.

00:51:04.920 --> 00:51:08.450
If there's editing going on the
Fusion Table, you would

00:51:08.450 --> 00:51:09.600
just get a snapshot in ArcGIS.

00:51:09.600 --> 00:51:10.840
Job

00:51:10.840 --> 00:51:13.090
MANO MARKS: So the question
is can you open up

00:51:13.090 --> 00:51:14.810
KMLs directly in ArcGIS?

00:51:14.810 --> 00:51:18.790
And yes, you can.

00:51:18.790 --> 00:51:24.180
What you're getting out of
Fusion Tables is not--

00:51:24.180 --> 00:51:26.505
you're not interacting
with a live KML file.

00:51:26.505 --> 00:51:27.940
You're downloading.

00:51:27.940 --> 00:51:28.830
Yeah, so you're right.

00:51:28.830 --> 00:51:32.760
It's either a snapshot or a
network link which would

00:51:32.760 --> 00:51:33.970
update periodically.

00:51:33.970 --> 00:51:36.520
I'm not sure about ArcGIS
support for network links.

00:51:39.060 --> 00:51:39.495
BRIAN FLOOD: I don't
think it has it.

00:51:39.495 --> 00:51:42.200
MANO MARKS: I don't
think it has it.

00:51:42.200 --> 00:51:42.670
Mike?

00:51:42.670 --> 00:51:43.703
AUDIENCE: Yeah, this
isn't a question.

00:51:43.703 --> 00:51:45.180
It's more of a paid
advertisement.

00:51:45.180 --> 00:51:49.022
I work for the Enterprise team
on Geo, so if you want to buy

00:51:49.022 --> 00:51:52.320
the Premier API or that portable
server or anything, I

00:51:52.320 --> 00:51:54.350
can probably hook you up with
the right account rep.

00:51:54.350 --> 00:51:55.670
So I'll hang out in the
back of the room.

00:51:55.670 --> 00:51:58.436
If you want to get any more
information about pricing or

00:51:58.436 --> 00:52:02.970
what we actually sell,
I'll sit in the back.

00:52:02.970 --> 00:52:03.180
MANO MARKS: Great.

00:52:03.180 --> 00:52:05.120
Thanks, Mike.

00:52:05.120 --> 00:52:06.370
Any other questions?

00:52:08.410 --> 00:52:08.750
All right.

00:52:08.750 --> 00:52:11.116
Well, thanks for coming to
Google IO, everyone.

00:52:11.116 --> 00:52:11.470
[APPLAUSE]

00:52:11.470 --> 00:52:13.380
MANO MARKS: I hope you've
had a great time.

00:52:13.380 --> 00:52:16.345
I certainly have. Josh, Brian
and I are going to be hanging

00:52:16.345 --> 00:52:19.130
out for a little while
afterwards.

00:52:19.130 --> 00:52:20.260
So if you have any--

00:52:20.260 --> 00:52:21.630
you want to come up and
ask us directly.

00:52:21.630 --> 00:52:23.000
Thanks a lot, everyone.

00:52:23.000 --> 00:52:24.460
JOSH LIVNI: Thank you.

