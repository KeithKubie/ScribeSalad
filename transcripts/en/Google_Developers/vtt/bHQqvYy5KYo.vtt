WEBVTT
Kind: captions
Language: en

00:00:04.667 --> 00:00:07.667
Wilkiewicz: Hello, everyone.
My name is Jarek Wilkiewicz,

00:00:07.667 --> 00:00:10.334
and I work for YouTube.
I'm a developer advocate.

00:00:10.334 --> 00:00:14.167
Um, I have Greg Schechter
and Jeffrey Posnick

00:00:14.167 --> 00:00:15.834
here with me today.

00:00:15.834 --> 00:00:19.334
And, uh, we'll talk about, uh,
YouTube iframe player

00:00:19.334 --> 00:00:21.000
and the future of embedding.

00:00:21.000 --> 00:00:23.000
So thank you very much
for coming.

00:00:23.000 --> 00:00:25.501
Um, there's another one
offered today.

00:00:25.501 --> 00:00:28.000
Um, we will talk about,

00:00:28.000 --> 00:00:29.834
you know,
what the iframe player is

00:00:29.834 --> 00:00:31.501
and why we introduced it.

00:00:31.501 --> 00:00:34.167
Really what is the problem
that we were trying to solve?

00:00:34.167 --> 00:00:38.000
Um, Greg will cover, uh,
HTML5 Video Playback,

00:00:38.000 --> 00:00:40.000
some of the challenges
that he has faced

00:00:40.000 --> 00:00:41.667
implementing the player,

00:00:41.667 --> 00:00:45.000
as well as the actual API, um,
design and implementation.

00:00:45.000 --> 00:00:47.501
So if you're thinking
about introducing

00:00:47.501 --> 00:00:50.167
you're own JavaScript-based API
on top of an iframe,

00:00:50.167 --> 00:00:51.868
he'll highlight
some design choices

00:00:51.868 --> 00:00:53.834
that--that you might consider
in your own designs.

00:00:53.834 --> 00:00:56.167
Uh, we'll talk a little bit more
about, you know,

00:00:56.167 --> 00:00:58.667
what are the differences
between the, um,

00:00:58.667 --> 00:01:01.400
iframe JavaScript API

00:01:01.400 --> 00:01:03.067
that we expose now

00:01:03.067 --> 00:01:06.901
and the existing ActionScript 3
JavaScript API,

00:01:06.901 --> 00:01:10.067
and what this means
to application developers.

00:01:10.067 --> 00:01:11.734
And then finally,

00:01:11.734 --> 00:01:15.067
Jeff created a very nice
sample player application

00:01:15.067 --> 00:01:16.734
for this occasion.

00:01:16.734 --> 00:01:18.734
And he will walk you through
the implementation

00:01:18.734 --> 00:01:22.067
of--of his HTML5-based,
uh, video player,

00:01:22.067 --> 00:01:24.100
so that you could reuse
that code

00:01:24.100 --> 00:01:25.901
in your own applications.

00:01:25.901 --> 00:01:27.567
Uh, before we start,

00:01:27.567 --> 00:01:30.234
um, if you would like to
live-tweet about this session,

00:01:30.234 --> 00:01:32.400
here are the hash tags--

00:01:32.400 --> 00:01:34.067
#io2011, #YouTube.

00:01:34.067 --> 00:01:37.901
And then we would like you
to submit some feedback for us.

00:01:37.901 --> 00:01:39.567
The QR code is right here

00:01:39.567 --> 00:01:41.901
and the show uplink
as well on this page.

00:01:41.901 --> 00:01:44.901
So, uh, you know,

00:01:44.901 --> 00:01:47.567
this is the summary
of the session, really.

00:01:47.567 --> 00:01:50.067
Uh, you know,
what we're trying to do

00:01:50.067 --> 00:01:52.400
is--is to let the embed,
not the embedder

00:01:52.400 --> 00:01:55.734
figure out the complexity
of web video.

00:01:55.734 --> 00:01:58.234
Uh, so as you all know,
what we're facing

00:01:58.234 --> 00:02:01.968
is really a platform-
fragmentation problem right now.

00:02:01.968 --> 00:02:03.801
There's a lot of new platforms,

00:02:03.801 --> 00:02:05.634
new operating systems
coming online,

00:02:05.634 --> 00:02:07.634
especially in the--
in the mobile space,

00:02:07.634 --> 00:02:10.968
so then in order to provide,

00:02:10.968 --> 00:02:14.801
um, platform-independent
portable video playback,

00:02:14.801 --> 00:02:18.467
uh, the embedder actually
is facing quite a few choices.

00:02:18.467 --> 00:02:21.300
And we're trying to simplify
this complexity.

00:02:21.300 --> 00:02:23.968
So, uh, as I mentioned, both--

00:02:23.968 --> 00:02:26.801
you know, we see new platforms,
and the encoding standards

00:02:26.801 --> 00:02:29.634
supported by these
platforms also vary.

00:02:29.634 --> 00:02:32.133
So we have H.263 to H.264,

00:02:32.133 --> 00:02:34.133
uh, WebM VP8, and so forth.

00:02:34.133 --> 00:02:36.133
And then the actual
embed technology

00:02:36.133 --> 00:02:39.133
also, um, is different
depending on the platform.

00:02:39.133 --> 00:02:41.801
So historically
we had AS2--AS2.

00:02:41.801 --> 00:02:44.467
Um, there's some RTSP streaming
support for feature phones

00:02:44.467 --> 00:02:47.801
that we still have,
AS3, HTML5.

00:02:47.801 --> 00:02:49.968
So all that actually adds
complexity

00:02:49.968 --> 00:02:52.467
whenever one wants to include
video in a web page

00:02:52.467 --> 00:02:54.968
or web application
or a native application.

00:02:54.968 --> 00:02:57.133
So the problem that we're
trying to solve here

00:02:57.133 --> 00:02:59.133
is to really provide
a simple embed

00:02:59.133 --> 00:03:02.534
that will work across
all the range of platforms

00:03:02.534 --> 00:03:05.067
and hopefully future-proof
the embed,

00:03:05.067 --> 00:03:07.367
so once you embed a video
in your application once,

00:03:07.367 --> 00:03:09.200
as new platforms come online,

00:03:09.200 --> 00:03:11.200
we'll take the responsibility
of making sure

00:03:11.200 --> 00:03:14.200
that the video playback
is really designed

00:03:14.200 --> 00:03:15.868
for that platform,
works well,

00:03:15.868 --> 00:03:17.868
and you don't get a black box
saying, you know,

00:03:17.868 --> 00:03:20.534
you need to install this
or that plug-in and so forth.

00:03:20.534 --> 00:03:23.534
In the lower left
I have a syntax example

00:03:23.534 --> 00:03:25.200
of the iframe player,

00:03:25.200 --> 00:03:27.367
so for those of you
who have used it before,

00:03:27.367 --> 00:03:29.033
it should be pretty familiar.

00:03:29.033 --> 00:03:31.200
For those of you that haven't,
one thing to notice--

00:03:31.200 --> 00:03:32.701
there's nothing here

00:03:32.701 --> 00:03:35.033
about the underlying
video implementation technology.

00:03:35.033 --> 00:03:37.400
So just by putting
that snippet of code

00:03:37.400 --> 00:03:39.534
in your web application,
web page, whatever,

00:03:39.534 --> 00:03:42.033
uh, the only thing
it instructs us to do

00:03:42.033 --> 00:03:43.534
is to actually choose

00:03:43.534 --> 00:03:45.868
the optimal
video playback technology

00:03:45.868 --> 00:03:47.701
for your device

00:03:47.701 --> 00:03:50.200
with an encoding that your
device can actually support

00:03:50.200 --> 00:03:51.868
and play the video back,

00:03:51.868 --> 00:03:54.567
so you really don't have
to worry about the complexity.

00:03:54.567 --> 00:03:57.033
Uh, so next we'll talk
a little bit more

00:03:57.033 --> 00:03:58.868
about the design decisions

00:03:58.868 --> 00:04:01.267
that drove the iframe player
implementation,

00:04:01.267 --> 00:04:03.100
as well as, you know,
how we ended up

00:04:03.100 --> 00:04:06.100
exposing the player API
to application developers,

00:04:06.100 --> 00:04:07.767
much like what we have done

00:04:07.767 --> 00:04:09.767
with the Flash player
in the past.

00:04:09.767 --> 00:04:11.634
So now I will hand it off
to Greg,

00:04:11.634 --> 00:04:13.434
who--who will dig
into the details.

00:04:13.434 --> 00:04:15.767
Schechter: Thanks, Jarek.
Uh, so I'm Greg Schechter.

00:04:15.767 --> 00:04:19.267
I'm one of the engineers
that works on the HTML5 player

00:04:19.267 --> 00:04:20.934
and the iframe embed.

00:04:20.934 --> 00:04:23.767
And, uh, you know, HTML5--
it's new. It's awesome.

00:04:23.767 --> 00:04:25.767
You've been seeing
all these cool demos.

00:04:25.767 --> 00:04:27.767
But Flash has sort of been
in the business

00:04:27.767 --> 00:04:29.267
for quite some time.

00:04:29.267 --> 00:04:31.100
Uh, so we kind of
wondered, like,

00:04:31.100 --> 00:04:32.934
why should we build
this HTML5 player?

00:04:32.934 --> 00:04:34.934
We've got this great Flash one.

00:04:34.934 --> 00:04:37.601
Uh, you know, what makes
HTML5 better?

00:04:37.601 --> 00:04:40.601
And so we looked--we took a look
at, like, both platforms,

00:04:40.601 --> 00:04:42.601
and we looked at performance,
accessibility,

00:04:42.601 --> 00:04:44.601
something I call
"device-ability,"

00:04:44.601 --> 00:04:46.267
and all sorts of things,

00:04:46.267 --> 00:04:48.767
and tried to compare
the two, uh, platforms.

00:04:48.767 --> 00:04:50.601
So the first thing
we sort of looked at

00:04:50.601 --> 00:04:52.267
is, like,
the different features.

00:04:52.267 --> 00:04:53.934
Uh, what does Flash provide,

00:04:53.934 --> 00:04:55.767
and what does HTML5
have as well?

00:04:55.767 --> 00:04:57.934
So one of the first things
that's really important

00:04:57.934 --> 00:05:00.834
that Flash has
was robust video streaming.

00:05:00.834 --> 00:05:02.334
In order to provide

00:05:02.334 --> 00:05:04.334
this really great,
excellent user experience,

00:05:04.334 --> 00:05:07.501
we need to have, uh,
fine control over buffering

00:05:07.501 --> 00:05:09.834
and being able to change
the quality.

00:05:09.834 --> 00:05:11.667
Uh, we also want
to be able to jump

00:05:11.667 --> 00:05:13.667
to any part of the video,
when the user's seeking.

00:05:13.667 --> 00:05:16.167
And HTML5 doesn't quite have
this fine-tuning yet.

00:05:16.167 --> 00:05:19.167
Another important thing
is content protection.

00:05:19.167 --> 00:05:21.167
Uh, we don't own
all of our contents.

00:05:21.167 --> 00:05:23.167
Uh, you might have heard

00:05:23.167 --> 00:05:26.000
that, uh, we just launched
all these great video rentals.

00:05:26.000 --> 00:05:28.334
And, uh, we've got to make sure
that our content is secure.

00:05:28.334 --> 00:05:32.167
And so, uh, Flash has
a protocol for this,

00:05:32.167 --> 00:05:35.334
RTMPE, that's, like,
built in, easy to do.

00:05:35.334 --> 00:05:37.000
And HTML5 doesn't have

00:05:37.000 --> 00:05:39.334
an accepted standard
for this yet.

00:05:39.334 --> 00:05:41.334
After that,
the sort of full screen--

00:05:41.334 --> 00:05:44.167
uh, when I'm watching
my favorite cat videos,

00:05:44.167 --> 00:05:45.534
one thing that's
really important

00:05:45.534 --> 00:05:47.701
is I want them full screen
and in HD.

00:05:47.701 --> 00:05:50.367
And, uh, we--
we don't really have

00:05:50.367 --> 00:05:52.067
an API to do this yet.

00:05:52.067 --> 00:05:54.033
WebKit does have something
in its nightlies.

00:05:54.033 --> 00:05:56.033
And, uh, and the code for that
is actually pretty simple.

00:05:56.033 --> 00:05:57.534
It works pretty well.

00:05:57.534 --> 00:05:59.367
Uh, and so it looks
a little bit like this.

00:05:59.367 --> 00:06:01.033
You can grab any elements.

00:06:01.033 --> 00:06:03.100
Uh, so in our case,
we'd grab our video player.

00:06:03.100 --> 00:06:05.934
And we would request
that it goes to full screen.

00:06:05.934 --> 00:06:07.767
And then once it gets triggered,

00:06:07.767 --> 00:06:10.100
we can do
whatever we want with it,

00:06:10.100 --> 00:06:12.100
you know, make it larger,
change our buttons,

00:06:12.100 --> 00:06:13.601
and--and so forth.

00:06:13.601 --> 00:06:15.601
And so eventually,
because this is in WebKit,

00:06:15.601 --> 00:06:19.267
this will be available
in Chrome hopefully very soon.

00:06:19.267 --> 00:06:21.100
Uh, another thing
that's important

00:06:21.100 --> 00:06:22.767
is camera and microphone access.

00:06:22.767 --> 00:06:24.801
A lot of our users come to--
come to YouTube,

00:06:24.801 --> 00:06:26.767
and they just want to film,
uh, talking to, you know,

00:06:26.767 --> 00:06:29.767
the--the millions of viewers,
uh, right there.

00:06:29.767 --> 00:06:32.601
And, uh, HTML5
doesn't have this yet.

00:06:32.601 --> 00:06:34.767
Uh, but Flash--
you know, it's there.

00:06:34.767 --> 00:06:37.434
Another interesting thing
is formats.

00:06:37.434 --> 00:06:39.601
So with Flash,
it's pretty much gonna--

00:06:39.601 --> 00:06:41.267
if--if the device
supports Flash,

00:06:41.267 --> 00:06:43.267
you can play your Flash videos
without any issues.

00:06:43.267 --> 00:06:46.100
Uh, HTML5--we actually
have to support

00:06:46.100 --> 00:06:48.934
two different formats.
We have H.264 and WebM.

00:06:48.934 --> 00:06:52.767
And so browsers, uh,
some browsers will support both.

00:06:52.767 --> 00:06:54.767
At the moment,
Chrome will support both.

00:06:54.767 --> 00:06:57.434
But you know, then you get
browsers like Firefox,

00:06:57.434 --> 00:06:59.267
which will only support WebM,

00:06:59.267 --> 00:07:02.167
and IE, which will
only support H.264.

00:07:02.167 --> 00:07:06.000
Now we have, uh, all of our
videos are encoded in H.264,

00:07:06.000 --> 00:07:08.834
and most of them
are in WebM at the moment.

00:07:08.834 --> 00:07:11.167
But it's taken a while, 'cause
it's such a large database

00:07:11.167 --> 00:07:14.167
to get through and make
all these additional encodings.

00:07:14.167 --> 00:07:17.501
Uh, so now why is HTML5
so great?

00:07:17.501 --> 00:07:19.667
And, uh, it's--we've got
this open-source technology--

00:07:19.667 --> 00:07:21.834
open source browsers,
players, and codecs,

00:07:21.834 --> 00:07:23.834
which really allows
for some great, uh,

00:07:23.834 --> 00:07:25.501
development in the space,

00:07:25.501 --> 00:07:28.334
and making it really fast-paced
and changing really quickly.

00:07:28.334 --> 00:07:30.167
It also should have
lower latency

00:07:30.167 --> 00:07:32.033
when we're watching
these videos.

00:07:32.033 --> 00:07:33.834
We don't have to start up
this plug-in.

00:07:33.834 --> 00:07:35.834
It's just native in the browser.
It should be a lot faster.

00:07:35.834 --> 00:07:38.334
And this is really evident,
uh, in the iframe,

00:07:38.334 --> 00:07:40.000
which I'll--I'll show later.

00:07:40.000 --> 00:07:43.501
And, uh, so we're--we're hoping
for better performance,

00:07:43.501 --> 00:07:45.501
uh, with these
different encodings.

00:07:45.501 --> 00:07:48.334
Uh, we were hoping to get better
performance for the videos

00:07:48.334 --> 00:07:49.834
and just fidelity.

00:07:49.834 --> 00:07:52.000
Just it works smoother
without worrying

00:07:52.000 --> 00:07:54.501
about our code screwing up
the video playback.

00:07:54.501 --> 00:07:56.834
Another great thing
is accessibility.

00:07:56.834 --> 00:07:58.834
And, uh, there's a few other
accessibility talks here

00:07:58.834 --> 00:08:01.167
that go into some
really detailed stuff here.

00:08:01.167 --> 00:08:03.234
Um, one of the--the talks
that happened earlier

00:08:03.234 --> 00:08:05.901
which was great
was all about captions.

00:08:05.901 --> 00:08:08.734
And, um, you know,
I really like having captions

00:08:08.734 --> 00:08:10.734
on my--on my cat videos.

00:08:10.734 --> 00:08:13.734
This is one of my favorite
comic strips there.

00:08:13.734 --> 00:08:17.400
But, um, so one of the features
that's important to me

00:08:17.400 --> 00:08:20.400
is actually navigating,
uh, in the browser.

00:08:20.400 --> 00:08:22.067
And because it's native,

00:08:22.067 --> 00:08:23.901
I can just tab around
in the page.

00:08:23.901 --> 00:08:25.901
So let me show you
a quick demo.

00:08:25.901 --> 00:08:29.067
Um, so this is the--

00:08:29.067 --> 00:08:31.901
you know, this is YouTube,
and I got the Flash player here.

00:08:31.901 --> 00:08:33.901
And I start
tabbing around the page,

00:08:33.901 --> 00:08:37.567
and, uh, eventually I'm trying
to get into the player,

00:08:37.567 --> 00:08:39.567
but I just sort of jump
below it, and I'm--

00:08:39.567 --> 00:08:41.901
my tab focus is down here
at the moment--

00:08:41.901 --> 00:08:43.901
um, and I can't get
into the player.

00:08:43.901 --> 00:08:46.067
But if I click my mouse on it,

00:08:46.067 --> 00:08:48.734
um, you know, I'll--
I'll give focus to the player.

00:08:48.734 --> 00:08:51.067
and then I can tab around
and use the controls,

00:08:51.067 --> 00:08:53.567
um, but I'm trapped.
I can't get outside.

00:08:53.567 --> 00:08:56.234
I can't start to interact
with the rest of the page again.

00:08:56.234 --> 00:08:59.567
One of the great things
that's great about HTML5

00:08:59.567 --> 00:09:02.467
is, uh, I can tab around
in the page,

00:09:02.467 --> 00:09:04.467
and then I can jump
right into the player,

00:09:04.467 --> 00:09:07.300
and I can use my keyboard
to start playing the video.

00:09:07.300 --> 00:09:09.634
Um, and then if, you know,

00:09:09.634 --> 00:09:11.667
I want to move on
to the rest of the page,

00:09:11.667 --> 00:09:13.467
I can just continue
to tab around,

00:09:13.467 --> 00:09:15.901
and, uh, and I'm out
interacting with the page again.

00:09:20.000 --> 00:09:22.334
And so, um, you know,
different user agents

00:09:22.334 --> 00:09:25.667
are gonna have, um,
have to build, uh, APIs

00:09:25.667 --> 00:09:28.334
for having these--
this special video handling,

00:09:28.334 --> 00:09:30.834
uh, for these--
for the video tag.

00:09:30.834 --> 00:09:33.334
Um, but then screen readers,
any screen reader you have

00:09:33.334 --> 00:09:35.000
will be able to access that,

00:09:35.000 --> 00:09:37.367
and you'll have, you know,
accessible videos.

00:09:37.367 --> 00:09:39.367
Uh, so next thing
I want to talk about

00:09:39.367 --> 00:09:40.868
is device-ability.

00:09:40.868 --> 00:09:42.868
And that's--basically
what I mean by that is

00:09:42.868 --> 00:09:45.234
where do these platforms
that work in Flash--

00:09:45.234 --> 00:09:47.067
where can you watch
Flash videos,

00:09:47.067 --> 00:09:49.067
and where can you watch
HTML5 videos?

00:09:49.067 --> 00:09:50.567
And at the moment,

00:09:50.567 --> 00:09:52.901
when we look at our
HTML5-capable browsers,

00:09:52.901 --> 00:09:55.901
uh, you know,
we've got just under 40%

00:09:55.901 --> 00:09:59.734
of, uh, of browser usage
is HTML5-capable.

00:09:59.734 --> 00:10:01.400
Uh, Chrome
is really kicking butt

00:10:01.400 --> 00:10:03.067
in this space as well.

00:10:03.067 --> 00:10:05.734
And a very small percentage
of this is mobile.

00:10:05.734 --> 00:10:07.734
So the world kinda
looks like this.

00:10:07.734 --> 00:10:10.067
There's all these places
that support Flash,

00:10:10.067 --> 00:10:12.400
uh, a good chunk
that also support HTML5,

00:10:12.400 --> 00:10:14.067
and this tiny sliver--

00:10:14.067 --> 00:10:15.901
and this is exaggerated
a little bit--

00:10:15.901 --> 00:10:17.400
that only do HTML5,

00:10:17.400 --> 00:10:19.234
and that's mostly iPhone
and iPad.

00:10:19.234 --> 00:10:20.901
There's a few other
random things

00:10:20.901 --> 00:10:22.567
that are in there as well.

00:10:22.567 --> 00:10:24.400
Uh, but then what's
really interesting

00:10:24.400 --> 00:10:26.234
is when we look
at actual usage of people

00:10:26.234 --> 00:10:28.067
who are getting access
to our APIs,

00:10:28.067 --> 00:10:30.734
our YouTube APIs, and where
they're playing videos,

00:10:30.734 --> 00:10:32.734
uh, it actually kind of
shifts opposite.

00:10:32.734 --> 00:10:35.400
Uh, most of the places
are actually on devices

00:10:35.400 --> 00:10:37.234
that don't have Flash.

00:10:37.234 --> 00:10:39.234
Uh, so that's, like,
you know, really great

00:10:39.234 --> 00:10:41.801
that, uh, we need
this HTML5 support there.

00:10:41.801 --> 00:10:44.467
Uh, so we were asking
why HTML5,

00:10:44.467 --> 00:10:47.801
but it's really about when
we should be using HTML5,

00:10:47.801 --> 00:10:49.968
uh, 'cause we clearly see
that it's--

00:10:49.968 --> 00:10:51.667
it's needed in many places.

00:10:51.667 --> 00:10:53.968
Uh, so our first primary goal
about building this player

00:10:53.968 --> 00:10:55.968
was we wanted
to recover playbacks

00:10:55.968 --> 00:10:58.133
that would have been lost
without Flash.

00:10:58.133 --> 00:11:00.634
And so our solution for this,
uh, to make it real easy,

00:11:00.634 --> 00:11:02.701
was to have this iframe embed.

00:11:02.701 --> 00:11:04.868
So you know,
like we showed earlier,

00:11:04.868 --> 00:11:06.534
the code for it is very simple.

00:11:06.534 --> 00:11:08.367
You just plop in the--
the video ID,

00:11:08.367 --> 00:11:10.033
and, uh, and you're good to go

00:11:10.033 --> 00:11:12.534
without having to worry,
uh, about anything.

00:11:12.534 --> 00:11:14.868
And so this has, you know,
great advantages,

00:11:14.868 --> 00:11:17.200
because it gives our user
HTML5 or Flash

00:11:17.200 --> 00:11:20.033
based on the device
and the user's preferences.

00:11:20.033 --> 00:11:22.701
It allows for so much better
mobile support.

00:11:22.701 --> 00:11:25.367
And it gives us this
"just works" experience.

00:11:25.367 --> 00:11:27.334
Uh, so just a little bit
about how you would get

00:11:27.334 --> 00:11:29.167
the HTML5 player.

00:11:29.167 --> 00:11:31.167
Uh, at the moment,
you can opt in,

00:11:31.167 --> 00:11:32.834
uh, to getting the player.

00:11:32.834 --> 00:11:34.834
And if you go
to youtube.com/html5,

00:11:34.834 --> 00:11:36.501
you can join the experiment.

00:11:36.501 --> 00:11:38.501
And if you're trying to view
these videos on a device

00:11:38.501 --> 00:11:40.167
that doesn't support Flash,

00:11:40.167 --> 00:11:42.167
you'll also be opted in
automatically.

00:11:42.167 --> 00:11:44.167
And, uh, so the first thing
we do is we check,

00:11:44.167 --> 00:11:46.834
all right, does your browser
support HTML5?

00:11:46.834 --> 00:11:49.000
And the code for that
is pretty simple.

00:11:49.000 --> 00:11:51.000
We just create a video tag,
and we see--

00:11:51.000 --> 00:11:53.000
can we play the two formats
I mentioned?

00:11:53.000 --> 00:11:55.334
Uh, so the first one is H.264,

00:11:55.334 --> 00:11:57.167
and the second one is WebM.

00:11:57.167 --> 00:11:59.667
Now not a lot of our, uh,

00:11:59.667 --> 00:12:03.400
not a lot of our embeds
actually get clicked on to play,

00:12:03.400 --> 00:12:05.567
so we don't load all the data
about the video yet.

00:12:05.567 --> 00:12:07.734
So we don't know
if we have both formats,

00:12:07.734 --> 00:12:09.567
uh, when we--
when we load the video.

00:12:09.567 --> 00:12:12.067
Uh, so that's why we have
to check both at the start.

00:12:12.067 --> 00:12:14.400
Um, after that, we wait
for the user to click play.

00:12:14.400 --> 00:12:16.234
We fetch this information.

00:12:16.234 --> 00:12:18.567
And then we say, all right,
are there any business reasons

00:12:18.567 --> 00:12:20.400
that we can't play the video,

00:12:20.400 --> 00:12:23.234
um, the details of which
are not all that important?

00:12:23.234 --> 00:12:26.901
Um, but if we--if it's great,
if we can play this video,

00:12:26.901 --> 00:12:28.901
then we're gonna look 
and we'll see,

00:12:28.901 --> 00:12:31.601
do we have, uh,
a format that's available,

00:12:31.601 --> 00:12:33.567
uh, that this browser can play?

00:12:33.567 --> 00:12:35.567
And if yes, great,
we're winning.

00:12:35.567 --> 00:12:37.234
Otherwise we're gonna fall back.

00:12:37.234 --> 00:12:39.067
We're gonna go
to that Flash player,

00:12:39.067 --> 00:12:41.534
or we're gonna fail out if your
device doesn't support it.

00:12:41.534 --> 00:12:43.868
Uh, so the next thing--
once we have these two players,

00:12:43.868 --> 00:12:46.634
we can look at performance
between the two.

00:12:46.634 --> 00:12:49.300
And, uh, so the first thing we--
the first one--

00:12:49.300 --> 00:12:51.300
pretty much one of the most
important things

00:12:51.300 --> 00:12:52.968
is the player start time.

00:12:52.968 --> 00:12:54.968
And this is the time,
uh, just so that it looks

00:12:54.968 --> 00:12:57.300
like the player's happening.

00:12:57.300 --> 00:12:59.300
Uh, maybe you--like,
on the main page you see,

00:12:59.300 --> 00:13:00.968
like, the little loading icon,

00:13:00.968 --> 00:13:03.367
or at times you'll see
the thumbnail,

00:13:03.367 --> 00:13:05.901
um, on the--
on the iframe embed.

00:13:05.901 --> 00:13:08.701
And so you know, it's the first
cue that the user has

00:13:08.701 --> 00:13:10.868
that's something's working,
something's interacting.

00:13:10.868 --> 00:13:12.868
And at the moment,
we can see HTML5

00:13:12.868 --> 00:13:14.868
is just a lot--
you know, a lot faster.

00:13:14.868 --> 00:13:17.200
It's a full second--
a full half a second faster,

00:13:17.200 --> 00:13:18.701
which is great.

00:13:18.701 --> 00:13:21.033
Um, and so I pulled out, like,

00:13:21.033 --> 00:13:24.534
this little,
uh, strip line thing

00:13:24.534 --> 00:13:26.367
that--that's got
all these photos.

00:13:26.367 --> 00:13:28.200
And this was
in a controlled environment,

00:13:28.200 --> 00:13:30.200
and the times got
exaggerated a little bit.

00:13:30.200 --> 00:13:32.033
Um, but the comparison
is pretty accurate

00:13:32.033 --> 00:13:35.033
about how much faster
the HTML5 player is

00:13:35.033 --> 00:13:37.534
just to show
that initial thumbnail.

00:13:37.534 --> 00:13:39.868
And so, uh, I want to--
I want to show you it,

00:13:39.868 --> 00:13:43.534
uh, in action now.

00:13:43.534 --> 00:13:46.033
So I've got, uh,
the two players here.

00:13:46.033 --> 00:13:47.701
The top one's the Flash player,

00:13:47.701 --> 00:13:49.534
and the bottom one's
the HTML5 player.

00:13:49.534 --> 00:13:52.200
And, uh, when I reload
the page,

00:13:52.200 --> 00:13:55.200
we can see that the HTML5 player
comes in a lot faster,

00:13:55.200 --> 00:13:56.868
which is great.

00:13:56.868 --> 00:13:59.367
And then when I actually go
to play the video,

00:13:59.367 --> 00:14:02.434
uh, sometimes...
Chen: Hi, everyone,

00:14:02.434 --> 00:14:04.767
My name is Steve Chen.
Schechter: Um...

00:14:04.767 --> 00:14:06.767
Chen: I'm one of the co-owners
of YouTube, and I run

00:14:06.767 --> 00:14:08.767
the engineering team here.
Schechter: I don't know.

00:14:08.767 --> 00:14:10.434
Stearns: Hi, my name's
Jeff Stearns--

00:14:10.434 --> 00:14:12.300
Schechter: I don't know
what's going on

00:14:12.300 --> 00:14:14.267
with the Flash player today,
but that's another reason

00:14:14.267 --> 00:14:16.100
I like the HTML5 player more.
[laughter]

00:14:16.100 --> 00:14:18.100
Schechter: Um, but you can
see that the, um,

00:14:18.100 --> 00:14:20.601
the HTML5 player started
a little bit faster.

00:14:20.601 --> 00:14:22.601
And I actually think
that I just got lucky there,

00:14:22.601 --> 00:14:24.100
'cause a lot of times

00:14:24.100 --> 00:14:25.934
the Flash player
will start first,

00:14:25.934 --> 00:14:28.267
um, so we're still sort of
tweaking performance on our end.

00:14:28.267 --> 00:14:30.934
Um, one of the advantages
that the Flash player has

00:14:30.934 --> 00:14:33.601
is because all the formats
are the same,

00:14:33.601 --> 00:14:36.601
it sort of can take advantage
of caching those formats

00:14:36.601 --> 00:14:39.934
a little bit better.

00:14:39.934 --> 00:14:41.901
Um...

00:14:41.901 --> 00:14:44.400
Uh, so the next thing is,
like, you know--

00:14:44.400 --> 00:14:46.400
that I want to talk about
is the details

00:14:46.400 --> 00:14:48.400
of our new JavaScript API

00:14:48.400 --> 00:14:50.567
and how, you know,
you control the player.

00:14:50.567 --> 00:14:53.567
And so since we have this new--

00:14:53.567 --> 00:14:56.067
this new way to embed videos,
this iframe embed,

00:14:56.067 --> 00:14:58.634
you know, we had to write
a new API to interact with it.

00:14:58.634 --> 00:15:01.200
So the most important thing
was about communication.

00:15:01.200 --> 00:15:03.033
We don't have this object
in the--

00:15:03.033 --> 00:15:05.701
we don't have an object
in the DOM anymore,

00:15:05.701 --> 00:15:08.033
uh, that we could just, like,
add things to directly.

00:15:08.033 --> 00:15:10.033
So, uh, we had to think of a way

00:15:10.033 --> 00:15:13.534
that this API could communicate
with the player and this iframe.

00:15:13.534 --> 00:15:15.534
So the first thing we thought of

00:15:15.534 --> 00:15:17.868
was to pull the URL fragment.

00:15:17.868 --> 00:15:21.033
So that's just a little, uh,
fragment at the end of the URL.

00:15:21.033 --> 00:15:22.868
And you can--you can update it.

00:15:22.868 --> 00:15:24.868
It won't cause the page
to refresh.

00:15:24.868 --> 00:15:26.701
And there were a couple
problems with this.

00:15:26.701 --> 00:15:29.367
Uh, the messages
are very one-dimensional,

00:15:29.367 --> 00:15:31.534
so it's hard to send
complex messages.

00:15:31.534 --> 00:15:33.367
Uh, polling is gonna eat up
your CPU,

00:15:33.367 --> 00:15:35.200
and it's not gonna be
instantaneous,

00:15:35.200 --> 00:15:37.968
uh, 'cause you're being--you're
gonna have to set a timer.

00:15:37.968 --> 00:15:40.634
And, uh, then you have, like,
of different timers conflicting,

00:15:40.634 --> 00:15:43.033
and it's just a little bit
of a hassle to manage.

00:15:43.033 --> 00:15:44.868
Uh, and then the really
difficult part

00:15:44.868 --> 00:15:46.868
is since both directions
of communication, uh,

00:15:46.868 --> 00:15:48.534
sending messages to the player,

00:15:48.534 --> 00:15:51.567
and the player sending messages
back out the page--

00:15:51.567 --> 00:15:54.033
have this--have to use
the same fragment.

00:15:54.033 --> 00:15:56.033
And so then you run
into issues--all right, our--

00:15:56.033 --> 00:15:58.033
you know, am I reading data,
or am I writing data?

00:15:58.033 --> 00:15:59.868
Am I overwriting data
I haven't read?

00:15:59.868 --> 00:16:01.767
And it just gets
very complicated.

00:16:01.767 --> 00:16:04.767
Um, so instead we decided
to use the postMessage API.

00:16:04.767 --> 00:16:07.100
Now this isn't available
in as many browsers

00:16:07.100 --> 00:16:09.434
as just being able to pull
that fragment,

00:16:09.434 --> 00:16:11.267
um, but it works a lot simpler.

00:16:11.267 --> 00:16:13.267
And the majority of our--
of our users

00:16:13.267 --> 00:16:16.267
will be able to use,
um, postMessage

00:16:16.267 --> 00:16:17.934
to communicate with the player.

00:16:17.934 --> 00:16:19.601
So it's very simple.

00:16:19.601 --> 00:16:21.267
Uh, basically
you have a window.

00:16:21.267 --> 00:16:22.934
You just send a message,

00:16:22.934 --> 00:16:25.634
um, and you specify the--
the target of your message.

00:16:25.634 --> 00:16:28.434
And so, uh, we basically
can use JSON

00:16:28.434 --> 00:16:30.767
to encode and decode
our messages,

00:16:30.767 --> 00:16:32.601
so it's very native
to the browser.

00:16:32.601 --> 00:16:34.434
Uh, we don't have
polling anymore,

00:16:34.434 --> 00:16:37.267
uh, so we can use the native
event listeners to communicate.

00:16:37.267 --> 00:16:40.434
And, uh, the communication
is sandboxed per window.

00:16:40.434 --> 00:16:43.100
So, uh, you know,

00:16:43.100 --> 00:16:44.934
they're using
different channels,

00:16:44.934 --> 00:16:46.601
but now all the messages

00:16:46.601 --> 00:16:48.434
are being sent
to the parent windows.

00:16:48.434 --> 00:16:50.267
So if you have multiple players
on the page,

00:16:50.267 --> 00:16:52.267
it gets a little complicated,
but we were able to, uh,

00:16:52.267 --> 00:16:55.601
easily, you know, differentiate
between the different play--

00:16:55.601 --> 00:16:57.434
iframes on the page.

00:16:57.434 --> 00:16:59.767
And one interesting thing is
the calls are now asynchronous,

00:16:59.767 --> 00:17:02.501
uh, so if you wanted
to read data from the player,

00:17:02.501 --> 00:17:04.834
uh, you know, you might have
to wait some time.

00:17:04.834 --> 00:17:06.834
so instead we just store
the player--

00:17:06.834 --> 00:17:08.501
the player state for you.

00:17:08.501 --> 00:17:10.334
And so when you interact
with the player,

00:17:10.334 --> 00:17:12.334
you'll get those--you'll get
that data that you want,

00:17:12.334 --> 00:17:14.334
uh, right away.

00:17:14.334 --> 00:17:16.667
Uh, so now I'm gonna hand it
back over to Jarek,

00:17:16.667 --> 00:17:19.667
who'll talk about, uh,
comparing the iframe API

00:17:19.667 --> 00:17:22.834
to the AS3 player API.
Wilkiewicz: Thanks, Greg.

00:17:22.834 --> 00:17:25.334
So Greg went through
the design decisions

00:17:25.334 --> 00:17:28.167
that went
into the API implementation.

00:17:28.167 --> 00:17:30.167
And I wanted to talk
a little bit about, you know,

00:17:30.167 --> 00:17:32.033
what this means
for an application developer

00:17:32.033 --> 00:17:35.000
that is used to interacting
with our player API

00:17:35.000 --> 00:17:37.167
in the AS3 world

00:17:37.167 --> 00:17:38.834
and what the differences are,

00:17:38.834 --> 00:17:41.667
how you can take advantage
of the new API

00:17:41.667 --> 00:17:44.000
and what other things
to watch out for.

00:17:44.000 --> 00:17:46.667
And then, you know, to prove
that it is in fact possible

00:17:46.667 --> 00:17:49.334
to use the API and create
very interesting experiences

00:17:49.334 --> 00:17:51.667
around YouTube Video Playback,

00:17:51.667 --> 00:17:54.000
Jeff is going to follow up
with his example

00:17:54.000 --> 00:17:56.834
after my, uh, part.

00:17:56.834 --> 00:18:00.334
So for those of you that have
worked with the player API,

00:18:00.334 --> 00:18:02.400
uh, you know,
this is very straightforward,

00:18:02.400 --> 00:18:04.901
but I just wanted to refresh
your memory.

00:18:04.901 --> 00:18:07.567
So there are three ways
in which YouTube Video Playback

00:18:07.567 --> 00:18:10.734
can be controlled
by an application developer--

00:18:10.734 --> 00:18:13.901
through player parameters,
ActionScript API,

00:18:13.901 --> 00:18:16.067
and JavaScript API.

00:18:16.067 --> 00:18:18.234
So let's walk
through the three mechanisms

00:18:18.234 --> 00:18:21.567
and see how they differ
if you are interacting

00:18:21.567 --> 00:18:24.734
with the Flash
versus HTML5 player.

00:18:24.734 --> 00:18:27.067
Um, so when it comes
to player parameters,

00:18:27.067 --> 00:18:28.734
there's really two cases.

00:18:28.734 --> 00:18:31.067
One is--down the line
video implementation

00:18:31.067 --> 00:18:32.901
is based on Flash.

00:18:32.901 --> 00:18:34.901
And again, the decision
that drives this

00:18:34.901 --> 00:18:37.567
is something that Greg
has described before,

00:18:37.567 --> 00:18:39.901
so he had this nice,
uh, decision tree

00:18:39.901 --> 00:18:43.234
that was deciding
whether to, uh,

00:18:43.234 --> 00:18:46.400
start HTML5 Video Playback
versus Flash Playback.

00:18:46.400 --> 00:18:48.734
So if it's actually
Flash Playback,

00:18:48.734 --> 00:18:50.400
then all the player parameters

00:18:50.400 --> 00:18:52.400
that you are used
to taking advantage of--

00:18:52.400 --> 00:18:54.067
it's just passed through.

00:18:54.067 --> 00:18:55.734
So they work just like before.

00:18:55.734 --> 00:18:57.734
And here's an example
of a player parameter.

00:18:57.734 --> 00:18:59.901
This one will trigger the video
to start playback

00:18:59.901 --> 00:19:02.467
as soon as somebody navigates
onto a page

00:19:02.467 --> 00:19:05.300
where the embed is present.

00:19:05.300 --> 00:19:07.634
Uh, if the underlying
implementation

00:19:07.634 --> 00:19:09.634
is based on HTML5 video,

00:19:09.634 --> 00:19:11.634
then we are subject
to some of the limitations,

00:19:11.634 --> 00:19:13.634
uh, that Greg has described

00:19:13.634 --> 00:19:15.634
as well as some of the features

00:19:15.634 --> 00:19:18.133
that we haven't frankly
implemented quite yet.

00:19:18.133 --> 00:19:20.133
Uh, so here's a--
you know, an overview

00:19:20.133 --> 00:19:23.634
of things that, uh, are--
fall into these two categories.

00:19:23.634 --> 00:19:25.634
I'll just walk
through them quickly.

00:19:25.634 --> 00:19:29.133
Uh, one thing to watch out for,
um, on iOS

00:19:29.133 --> 00:19:31.801
is the autoplay
player parameter.

00:19:31.801 --> 00:19:35.133
It's not really honored,
so if somebody embeds a video,

00:19:35.133 --> 00:19:37.801
and then an iOS device
navigates to it,

00:19:37.801 --> 00:19:39.801
uh, then the user
actually has to confirm

00:19:39.801 --> 00:19:41.300
the playback selection.

00:19:41.300 --> 00:19:43.634
And I guess it's just to protect
somebody's data plan

00:19:43.634 --> 00:19:45.501
from getting taxed.

00:19:45.501 --> 00:19:47.300
Even though
the application developer

00:19:47.300 --> 00:19:49.300
would like the video to start
playing right away,

00:19:49.300 --> 00:19:52.801
iOS will not let that happen
until the user selects play.

00:19:52.801 --> 00:19:54.467
Uh, caption support--

00:19:54.467 --> 00:19:57.133
our HTML5 player
does display captions,

00:19:57.133 --> 00:19:59.467
but there are some categories
that we haven't implemented yet.

00:19:59.467 --> 00:20:03.300
For example, the ASR captions
are not, uh, shown yet,

00:20:03.300 --> 00:20:06.634
but this is something that is
under active implementation.

00:20:06.634 --> 00:20:08.801
Uh, full screen support

00:20:08.801 --> 00:20:11.300
is not quite there yet.

00:20:11.300 --> 00:20:15.133
Uh, the limiting factor here
is the browser standardization.

00:20:15.133 --> 00:20:18.667
And Greg mentioned, uh,
the work that is done

00:20:18.667 --> 00:20:20.634
for WebKit to make that
available,

00:20:20.634 --> 00:20:23.133
and hopefully you will see that
across the board,

00:20:23.133 --> 00:20:24.801
but don't count on it yet.

00:20:24.801 --> 00:20:27.634
Uh, annotations--another
very popular YouTube feature,

00:20:27.634 --> 00:20:30.968
is not implemented
by the HTML5 player.

00:20:30.968 --> 00:20:33.300
Uh, I expect Greg
to start doing that

00:20:33.300 --> 00:20:35.300
as soon as he gets back to
his office after this session,

00:20:35.300 --> 00:20:37.133
because it's
a very popular feature.

00:20:37.133 --> 00:20:38.968
People have done
amazing work with it.

00:20:38.968 --> 00:20:40.968
And then finally,
related videos--

00:20:40.968 --> 00:20:42.968
uh, you know,
if you watch a YouTube video,

00:20:42.968 --> 00:20:45.300
uh, at the end of the playback
you will see a bunch

00:20:45.300 --> 00:20:48.801
of videos that we think
are of interest to you.

00:20:48.801 --> 00:20:51.467
Uh, that functionality
can be disabled,

00:20:51.467 --> 00:20:53.801
uh, through the rel parameter.

00:20:53.801 --> 00:20:56.968
Uh, that is something we don't
have in HTML5 player yet.

00:20:56.968 --> 00:21:00.133
Um, so next let's talk
about the ActionScript API.

00:21:00.133 --> 00:21:01.868
So--so for those of you

00:21:01.868 --> 00:21:05.701
that have built, um,
custom Flash players,

00:21:05.701 --> 00:21:08.367
um, what typically
people do is--

00:21:08.367 --> 00:21:10.701
we actually offer
a Chromeless player

00:21:10.701 --> 00:21:12.701
that is based on, uh, AS3.

00:21:12.701 --> 00:21:15.701
That player has an API
that can then be used

00:21:15.701 --> 00:21:17.534
in a Flash application.

00:21:17.534 --> 00:21:19.534
And then you can build
your own experience

00:21:19.534 --> 00:21:21.868
around the core YouTube
Video Playback experience.

00:21:21.868 --> 00:21:24.200
So if you don't like, you know,
the way our controls look,

00:21:24.200 --> 00:21:26.234
any kind of aspect
of the user experience,

00:21:26.234 --> 00:21:29.534
you have full control over that,
and just invoke API methods.

00:21:29.534 --> 00:21:32.033
So, uh, you know,
for the purpose of this talk,

00:21:32.033 --> 00:21:34.033
this is not, you know,
entirely applicable,

00:21:34.033 --> 00:21:37.200
because, uh, we're talking about
the iframe API,

00:21:37.200 --> 00:21:39.868
and the only API
that we expose to the iframe

00:21:39.868 --> 00:21:43.701
is actually an HTML, um,
JavaScript-based API.

00:21:43.701 --> 00:21:46.200
One thing to note is, um...

00:21:46.200 --> 00:21:48.200
you know, in the new world
of mobile devices

00:21:48.200 --> 00:21:50.868
that may not necessarily
support, uh, Flash--

00:21:50.868 --> 00:21:53.367
you know, iOS is
a good example of that.

00:21:53.367 --> 00:21:55.367
For those of you that are
building applications

00:21:55.367 --> 00:21:58.400
that get mobile use,
you know, you probably noticed

00:21:58.400 --> 00:22:00.534
that this is a very
nicely growing area.

00:22:00.534 --> 00:22:03.434
For everybody, mobile
applications are quite hot.

00:22:03.434 --> 00:22:05.767
Uh, so you know,
if you invested time

00:22:05.767 --> 00:22:07.601
in building a Flash-based player

00:22:07.601 --> 00:22:09.767
around our Chromeless player,

00:22:09.767 --> 00:22:12.267
the bad news is some platforms
will not support it.

00:22:12.267 --> 00:22:14.934
So all you will get
is a black box.

00:22:14.934 --> 00:22:16.934
Uh, so it's a little bit
of a bummer.

00:22:16.934 --> 00:22:18.934
Jeff has a remedy for that,

00:22:18.934 --> 00:22:21.267
as he will show
later in the session.

00:22:21.267 --> 00:22:23.267
But this is one of the things
that--that you run into,

00:22:23.267 --> 00:22:25.434
and very quickly if you actually
build mobile applications.

00:22:25.434 --> 00:22:27.767
And people that have devices

00:22:27.767 --> 00:22:31.601
that don't support, uh,
the Flash technology

00:22:31.601 --> 00:22:33.601
actually navigate to your page

00:22:33.601 --> 00:22:35.601
that has a very nicely crafted
custom player

00:22:35.601 --> 00:22:38.267
that you have built that--
you know, it no longer works.

00:22:38.267 --> 00:22:40.100
Uh, so you know,
instead of that,

00:22:40.100 --> 00:22:43.601
what you can do is use
our JavaScript API

00:22:43.601 --> 00:22:46.100
for the iframe player.

00:22:46.100 --> 00:22:48.234
And, uh... whoops.

00:22:51.501 --> 00:22:54.834
Um, let's just quickly go
through the differences

00:22:54.834 --> 00:22:58.000
between the AS3
JavaScript player API

00:22:58.000 --> 00:23:00.000
and the iframe
JavaScript player API.

00:23:00.000 --> 00:23:02.234
So there's three operations,
three categories

00:23:02.234 --> 00:23:04.234
that I would like to describe--
the player init,

00:23:04.234 --> 00:23:06.234
the actual methods
that we expose,

00:23:06.234 --> 00:23:08.067
and the event handling.

00:23:08.067 --> 00:23:10.067
So player init
is quite different

00:23:10.067 --> 00:23:13.734
between the, um,
AS3-based player

00:23:13.734 --> 00:23:15.567
and the iframe player.

00:23:15.567 --> 00:23:17.400
I have a side-by-side example.

00:23:17.400 --> 00:23:19.067
Hopefully you can see that.

00:23:19.067 --> 00:23:21.067
But, uh, really,
on the left-hand side

00:23:21.067 --> 00:23:23.901
you see the new, uh,

00:23:23.901 --> 00:23:26.067
JavaScript-based API usage

00:23:26.067 --> 00:23:27.901
that we exposed.

00:23:27.901 --> 00:23:31.567
You can load the API library
asynchronously

00:23:31.567 --> 00:23:34.234
and then create instances
of YT.Player,

00:23:34.234 --> 00:23:36.234
which is really
the player object

00:23:36.234 --> 00:23:38.234
that allows you to then control
the player behavior.

00:23:38.234 --> 00:23:41.234
When you instantiate the player,
you can specify a video ID

00:23:41.234 --> 00:23:44.901
that you would like to load,
as well as any player parameter

00:23:44.901 --> 00:23:47.067
and, uh, event handlers.

00:23:47.067 --> 00:23:48.734
So there's a set of events

00:23:48.734 --> 00:23:51.234
that we allow application
developers to subscribe to.

00:23:51.234 --> 00:23:53.067
If you would like to do that,

00:23:53.067 --> 00:23:55.067
you can actually specify
the handlers for these events

00:23:55.067 --> 00:23:57.067
right when you
instantiate the player.

00:23:57.067 --> 00:24:00.067
And on the right-hand side,
this is the, uh,

00:24:00.067 --> 00:24:03.968
old-school AS3 JavaScript API
initialization,

00:24:03.968 --> 00:24:05.801
uh, using the SWFObject

00:24:05.801 --> 00:24:09.133
to load the Chromeless
player library.

00:24:09.133 --> 00:24:11.801
And the event handling
is actually done

00:24:11.801 --> 00:24:13.801
through DOM event registration.

00:24:13.801 --> 00:24:15.467
It's slightly different.

00:24:15.467 --> 00:24:17.968
Uh, that method also works
in--in, uh,

00:24:17.968 --> 00:24:19.801
the iframe player
JavaScript API,

00:24:19.801 --> 00:24:21.634
but now we have
a convenience way of--

00:24:21.634 --> 00:24:23.968
convenient way
of creating the handlers

00:24:23.968 --> 00:24:26.334
right when the player
is instantiated.

00:24:26.334 --> 00:24:28.000
Um, so when it comes

00:24:28.000 --> 00:24:30.000
to the actual
core player functionality,

00:24:30.000 --> 00:24:33.834
um, there is five
kind of major groups

00:24:33.834 --> 00:24:35.501
of operations that we expose.

00:24:35.501 --> 00:24:38.834
So queuing functions would allow
you to load video, queue video.

00:24:38.834 --> 00:24:41.667
Uh, playback controls,
player settings--

00:24:41.667 --> 00:24:44.000
you know, you can set
the volume of the player,

00:24:44.000 --> 00:24:46.501
navigate to a specific
time stamp in the player.

00:24:46.501 --> 00:24:50.000
Uh, playback status operations

00:24:50.000 --> 00:24:52.000
that tell you more
about, you know,

00:24:52.000 --> 00:24:55.000
the actual--what's happening
in the actual video.

00:24:55.000 --> 00:24:57.667
Uh, playback quality--
so you can actually, uh,

00:24:57.667 --> 00:24:59.834
override the selection
that we make

00:24:59.834 --> 00:25:01.734
on behalf of the user, um,

00:25:01.734 --> 00:25:03.734
when it comes to, you know,

00:25:03.734 --> 00:25:06.400
what is the optimal,
uh, resolution

00:25:06.400 --> 00:25:09.234
that we should be trying
to, uh, stream to the user.

00:25:09.234 --> 00:25:12.234
So, uh, by default we actually
try to detect, you know,

00:25:12.234 --> 00:25:14.901
what is the device capability?
What is the size of the window?

00:25:14.901 --> 00:25:17.400
And then, you know, for example,
if HD doesn't make sense,

00:25:17.400 --> 00:25:19.434
we won't be trying
to ship HD--HD.

00:25:19.434 --> 00:25:21.234
But if you want to override it,

00:25:21.234 --> 00:25:23.067
you can do that
programmatically.

00:25:23.067 --> 00:25:26.067
Uh, and then finally,
uh, we provide

00:25:26.067 --> 00:25:27.901
some additional
metadata information,

00:25:27.901 --> 00:25:29.734
such as the duration
of the video,

00:25:29.734 --> 00:25:32.067
the embed code for the video
through the API.

00:25:32.067 --> 00:25:34.067
So comparing these two groups
of operations,

00:25:34.067 --> 00:25:36.234
really everything works
pretty much the same.

00:25:36.234 --> 00:25:38.567
Uh, the playback status
is the only area

00:25:38.567 --> 00:25:40.567
where we still have
some work to do,

00:25:40.567 --> 00:25:42.400
so right now
the getVideoBytesTotal

00:25:42.400 --> 00:25:44.901
returns a hard-coded 1,000.

00:25:44.901 --> 00:25:48.734
Uh, and that is hopefully
going to change in the future.

00:25:48.734 --> 00:25:50.567
But other than that, you know,

00:25:50.567 --> 00:25:53.067
all the other operations
pretty much work the same.

00:25:53.067 --> 00:25:54.334
Um...

00:25:57.501 --> 00:26:00.334
So a quick note
about event handling.

00:26:00.334 --> 00:26:02.067
Uh, as I mentioned previously,

00:26:02.067 --> 00:26:04.234
uh, the way you initial--
initialize the handlers

00:26:04.234 --> 00:26:05.734
is slightly different,

00:26:05.734 --> 00:26:09.067
uh, but the actual, uh,
semantics are very similar.

00:26:09.067 --> 00:26:11.567
The only note
that I wanted to make

00:26:11.567 --> 00:26:13.734
is that, uh,
today if you are counting

00:26:13.734 --> 00:26:17.234
on the YT.PlayerState.BUFFERING
event

00:26:17.234 --> 00:26:19.234
or the state to be
actually delivered to you,

00:26:19.234 --> 00:26:22.234
we don't actually generate
that yet in HTML5 player.

00:26:22.234 --> 00:26:24.400
So if the underlying
video playback

00:26:24.400 --> 00:26:25.934
is based on HTML5,

00:26:25.934 --> 00:26:28.901
you will never actually see
that, uh, state.

00:26:28.901 --> 00:26:31.734
Other than that, uh,
there are some, you know,

00:26:31.734 --> 00:26:33.234
syntactical differences

00:26:33.234 --> 00:26:35.067
with respect
to event registration.

00:26:35.067 --> 00:26:37.234
So the AS3 player API

00:26:37.234 --> 00:26:39.734
relied on the kind of typical
DOM-based registration,

00:26:39.734 --> 00:26:43.567
whereas for
the HTML5 player API,

00:26:43.567 --> 00:26:47.400
uh, what we recommend is using
the event registration

00:26:47.400 --> 00:26:50.067
that is conveniently
possible through--

00:26:50.067 --> 00:26:52.934
as a part of the player init.

00:26:52.934 --> 00:26:56.133
And, uh, one note
that I wanted to make

00:26:56.133 --> 00:26:59.133
is that if you would like
to, uh, kind of play around

00:26:59.133 --> 00:27:00.934
with the API,

00:27:00.934 --> 00:27:04.501
for those of you that have used
Chrome Console,

00:27:04.501 --> 00:27:06.167
uh, you know all about it.

00:27:06.167 --> 00:27:08.000
But for those of you
that haven't,

00:27:08.000 --> 00:27:09.834
uh, you can very easily,
you know, learn more

00:27:09.834 --> 00:27:12.167
about, you know,
what these, uh, methods are

00:27:12.167 --> 00:27:15.167
and, uh, invoke them
and so forth,

00:27:15.167 --> 00:27:18.334
using the console
right from the browser window.

00:27:18.334 --> 00:27:20.334
Just again, a quick way
to get up to speed

00:27:20.334 --> 00:27:22.167
on, you know,
all the functionality

00:27:22.167 --> 00:27:23.667
that is exposed.

00:27:23.667 --> 00:27:25.667
And I believe we have
actually a session about, uh,

00:27:25.667 --> 00:27:27.834
Chrome Dev Tools at I/O.

00:27:27.834 --> 00:27:31.000
So if you haven't caught it,
that's a good recording

00:27:31.000 --> 00:27:33.234
to catch up on later.

00:27:35.467 --> 00:27:38.968
Okay, uh, next I will
hand it off to Jeff.

00:27:38.968 --> 00:27:41.300
And Jeff will talk about
his experience with the API

00:27:41.300 --> 00:27:43.300
and prove to you
that you can in fact build

00:27:43.300 --> 00:27:46.300
very interesting video
experiences around YouTube

00:27:46.300 --> 00:27:48.133
using the new, uh,
JavaScript API

00:27:48.133 --> 00:27:50.067
and HTML5 Video Playback.

00:27:54.000 --> 00:27:56.834
Posnick: Thanks, Jarek.
Um, so I'm a member

00:27:56.834 --> 00:27:59.334
of the YouTube
API developer relations team.

00:27:59.334 --> 00:28:01.901
And part of my job

00:28:01.901 --> 00:28:04.400
is to help developers
use these APIs,

00:28:04.400 --> 00:28:06.901
so I certainly wanted
to familiarize myself

00:28:06.901 --> 00:28:09.234
with the iframe player API.

00:28:09.234 --> 00:28:11.234
And, uh,
this example application

00:28:11.234 --> 00:28:12.901
I'm gonna show off

00:28:12.901 --> 00:28:15.234
is, uh, something that I did

00:28:15.234 --> 00:28:17.234
to get familiar with the API,

00:28:17.234 --> 00:28:20.067
but also, um,
just hopefully something

00:28:20.067 --> 00:28:23.567
that will help you guys learn.

00:28:23.567 --> 00:28:25.734
And I wanted to share
some best practices

00:28:25.734 --> 00:28:28.734
that I picked up
while writing code

00:28:28.734 --> 00:28:31.400
that hopefully I'll be able
to share with you.

00:28:31.400 --> 00:28:34.234
So this example, uh, provides

00:28:34.234 --> 00:28:37.734
basic YouTube
feed player functionality.

00:28:37.734 --> 00:28:40.067
Uh, and what I mean by that--
uh, think of it

00:28:40.067 --> 00:28:42.234
kind of like a playlist player,

00:28:42.234 --> 00:28:44.567
but instead of only playing back
YouTube playlists,

00:28:44.567 --> 00:28:48.067
you can play back
any feed of videos.

00:28:48.067 --> 00:28:51.400
And it's powered
by the YouTube Data API.

00:28:51.400 --> 00:28:53.400
Uh, this is kind of
a separate set

00:28:53.400 --> 00:28:55.400
of restful APIs

00:28:55.400 --> 00:28:58.400
that can be used for interacting
with YouTube

00:28:58.400 --> 00:29:00.067
in a variety of ways.

00:29:00.067 --> 00:29:03.133
One of the ways
is to retrieve feeds of videos.

00:29:03.133 --> 00:29:05.634
So you can, uh,
for instance,

00:29:05.634 --> 00:29:07.300
plug in a search term

00:29:07.300 --> 00:29:09.133
and get back a list
of all the videos

00:29:09.133 --> 00:29:10.968
on YouTube that match
that search term,

00:29:10.968 --> 00:29:13.467
or you can get back a list
of videos that are uploaded

00:29:13.467 --> 00:29:15.968
in given users' accounts,
for instance.

00:29:15.968 --> 00:29:18.133
So this particular example,

00:29:18.133 --> 00:29:21.300
uh, makes use
of some modern web technologies,

00:29:21.300 --> 00:29:22.968
as you might expect.

00:29:22.968 --> 00:29:25.133
Uh, there's a bit
of HTML5 in there.

00:29:25.133 --> 00:29:28.634
Uh, a lot of JavaScript
is going on under the hood

00:29:28.634 --> 00:29:31.467
for interacting
with the iframe player API.

00:29:31.467 --> 00:29:35.300
And you know, there's some CSS
as well.

00:29:35.300 --> 00:29:38.634
And, um, hopefully, you know,

00:29:38.634 --> 00:29:40.801
as I said, this is useful
in its own right.

00:29:40.801 --> 00:29:42.801
Feel free to take a look
at the code

00:29:42.801 --> 00:29:45.634
and, uh, you know,
use it and adapt it

00:29:45.634 --> 00:29:47.300
in your own applications.

00:29:47.300 --> 00:29:50.133
But you know, my main purpose
was to illustrate,

00:29:50.133 --> 00:29:53.100
um, some iframe player usage
best practices.

00:29:55.667 --> 00:29:58.501
So I just want to talk
in a little bit more detail

00:29:58.501 --> 00:30:01.000
about the different components
that go into this demo.

00:30:01.000 --> 00:30:04.667
Uh, obviously on the HTML5
side of things,

00:30:04.667 --> 00:30:07.000
the video element
is quite important.

00:30:07.000 --> 00:30:10.000
It can be used
for the supported videos.

00:30:10.000 --> 00:30:13.000
And this again is based
on that kind of flow chart

00:30:13.000 --> 00:30:15.501
that Greg was
going over earlier.

00:30:15.501 --> 00:30:18.834
Um, so assuming a given video
that we attempt to play

00:30:18.834 --> 00:30:21.667
can be played back
in the HTML5 video element,

00:30:21.667 --> 00:30:23.334
it's going to use that.

00:30:23.334 --> 00:30:26.167
And we're actually using
some of the player parameters

00:30:26.167 --> 00:30:28.000
that Jarek was talking about,

00:30:28.000 --> 00:30:29.834
uh, in this case specifically

00:30:29.834 --> 00:30:32.501
the controls=0 player parameter.

00:30:32.501 --> 00:30:35.501
So this is gonna give us
a version

00:30:35.501 --> 00:30:39.167
of the, uh,
YouTube HTML5 video player

00:30:39.167 --> 00:30:41.667
that doesn't have
a type of--

00:30:41.667 --> 00:30:44.834
I guess "Chrome"
is the term that we use for it.

00:30:44.834 --> 00:30:47.167
It doesn't have
the standard play button.

00:30:47.167 --> 00:30:48.834
It doesn't have the seek bar.

00:30:48.834 --> 00:30:50.834
It just gives us
the video playback.

00:30:50.834 --> 00:30:53.334
And, uh, you know, we're going
to actually implement

00:30:53.334 --> 00:30:57.167
the specific playback
functionality

00:30:57.167 --> 00:30:59.667
in HTML5 and CSS and so on.

00:30:59.667 --> 00:31:02.901
So, uh, to that point
we're using SVG,

00:31:02.901 --> 00:31:05.567
which is scalable
vector graphics,

00:31:05.567 --> 00:31:08.567
and that's just used
in a fairly straightforward way,

00:31:08.567 --> 00:31:11.901
just for implementing
the pause and play buttons

00:31:11.901 --> 00:31:13.567
in our example.

00:31:13.567 --> 00:31:16.734
And we're making use
of &lt;input type='range'&gt;.

00:31:16.734 --> 00:31:20.567
Uh, this is a fairly new
input element

00:31:20.567 --> 00:31:24.234
that can be used
for doing scroll controls,

00:31:24.234 --> 00:31:25.734
more or less.

00:31:25.734 --> 00:31:27.567
So, um, you'll see it
in a little bit

00:31:27.567 --> 00:31:29.234
when I show you the example.

00:31:29.234 --> 00:31:31.234
But this is something
that allows you to drag

00:31:31.234 --> 00:31:34.234
and select a new value
for a given control.

00:31:34.234 --> 00:31:37.901
So Google Chrome currently
supports all those features

00:31:37.901 --> 00:31:39.567
that we're using,
which is great,

00:31:39.567 --> 00:31:41.567
because that's what I'm using
to demo this.

00:31:41.567 --> 00:31:44.234
But, uh, some browsers offer
just a subset,

00:31:44.234 --> 00:31:46.067
um, and in particular

00:31:46.067 --> 00:31:49.901
there's not a lot of support
for &lt;input type='range'&gt;,

00:31:49.901 --> 00:31:53.734
um, in a wide number
of browsers right now.

00:31:53.734 --> 00:31:55.567
And that'll probably change
over time,

00:31:55.567 --> 00:31:58.567
but at the same time, you know,
feel free to, you know,

00:31:58.567 --> 00:32:00.567
adapt this and use
something different.

00:32:00.567 --> 00:32:03.133
There's plenty
of open-source libraries

00:32:03.133 --> 00:32:04.801
for doing slider controls.

00:32:04.801 --> 00:32:08.634
Uh, that would
certainly work as well.

00:32:08.634 --> 00:32:10.300
Uh, as you might imagine,

00:32:10.300 --> 00:32:12.300
there's quite a bit
of JavaScript involved

00:32:12.300 --> 00:32:14.133
in writing this sort of example.

00:32:14.133 --> 00:32:15.801
Uh, I'm using jQuery

00:32:15.801 --> 00:32:17.634
just as a matter
of personal preference

00:32:17.634 --> 00:32:20.634
for doing a lot of
kind of the heavy lifting.

00:32:20.634 --> 00:32:24.300
And one of the things that's
nice about jQuery in particular

00:32:24.300 --> 00:32:26.467
is that it simplifies
the interaction

00:32:26.467 --> 00:32:28.467
with the YouTube Data API.

00:32:28.467 --> 00:32:30.467
Um, I'm not gonna
actually focus too much

00:32:30.467 --> 00:32:33.167
on the interaction
with YouTube Data API,

00:32:33.167 --> 00:32:36.467
but I definitely recommend
looking at the code,

00:32:36.467 --> 00:32:39.300
if you are curious
as to how you can write

00:32:39.300 --> 00:32:41.968
a web application
that will, you know,

00:32:41.968 --> 00:32:45.133
do read-only requests
to YouTube,

00:32:45.133 --> 00:32:47.801
get the results back,
and display them in some way.

00:32:47.801 --> 00:32:50.801
Uh, so it's actually
gonna be using JSON-P

00:32:50.801 --> 00:32:52.634
under the hood,
which is a method

00:32:52.634 --> 00:32:56.467
of dynamically inserting
a script tag into a page

00:32:56.467 --> 00:32:58.300
and having that script tag

00:32:58.300 --> 00:33:02.033
point to a URL
basically on their servers.

00:33:02.033 --> 00:33:05.534
And the server knows
to respond back

00:33:05.534 --> 00:33:07.200
with kind of a wrapper

00:33:07.200 --> 00:33:10.033
that will invoke
a native function

00:33:10.033 --> 00:33:12.033
in our own JavaScript code

00:33:12.033 --> 00:33:14.868
with whatever the payload is
for the response.

00:33:14.868 --> 00:33:16.701
So we're basically
getting around

00:33:16.701 --> 00:33:19.534
some of the cross-domain
limitations

00:33:19.534 --> 00:33:22.200
that would normally
prevent you from, you know,

00:33:22.200 --> 00:33:24.868
using something
like XML-HTTP requests

00:33:24.868 --> 00:33:28.200
to directly, you know,
ask our servers

00:33:28.200 --> 00:33:30.868
for a response.

00:33:30.868 --> 00:33:32.868
And jQuery will make that
pretty easy.

00:33:32.868 --> 00:33:34.367
jQuery, you know,

00:33:34.367 --> 00:33:37.033
also just makes a lot
of other things easy as well.

00:33:37.033 --> 00:33:40.868
And everything is JavaScript,
more or less.

00:33:40.868 --> 00:33:43.367
I'll show you, you know,
the actual HTML source.

00:33:43.367 --> 00:33:45.033
It's very short.

00:33:45.033 --> 00:33:48.367
Most of--all--
most of the important things

00:33:48.367 --> 00:33:50.868
are done
in the JavaScript section.

00:33:50.868 --> 00:33:54.033
And we'll focus on some
specific sections there

00:33:54.033 --> 00:33:55.868
in a second.

00:33:55.868 --> 00:33:58.534
And there's, you know, CSS,
as you might imagine--

00:33:58.534 --> 00:34:00.701
uh, very basic CSS styling.

00:34:00.701 --> 00:34:04.434
One thing I did decide to do
was just use, uh, Web Fonts,

00:34:04.434 --> 00:34:07.601
which are part of one of
the newer CSS specifications.

00:34:07.601 --> 00:34:09.601
And I'm using
the Google Fonts API

00:34:09.601 --> 00:34:11.601
just for pulling down something

00:34:11.601 --> 00:34:14.601
a little bit flashier,
let's say,

00:34:14.601 --> 00:34:16.934
than, um, the built-in fonts

00:34:16.934 --> 00:34:18.767
that might be present

00:34:18.767 --> 00:34:21.434
on a given user's computer.

00:34:21.434 --> 00:34:23.267
So this is the example.

00:34:23.267 --> 00:34:25.767
I have this open over here.

00:34:25.767 --> 00:34:28.601
Uh, I want
to just quickly load up

00:34:28.601 --> 00:34:30.601
the uploads feed

00:34:30.601 --> 00:34:33.767
for the Google Developers
YouTube channel.

00:34:33.767 --> 00:34:37.267
And Google Developers is
just a great channel in general

00:34:37.267 --> 00:34:41.267
for having a variety
of different developer content.

00:34:41.267 --> 00:34:44.434
So this is playing right away.

00:34:44.434 --> 00:34:46.801
Ross: My name is Max Ross.

00:34:46.801 --> 00:34:49.100
Posnick: And you see, you know,
these controls down here.

00:34:49.100 --> 00:34:52.434
This is SVG, as I mentioned,
um, yeah, right now,

00:34:52.434 --> 00:34:55.767
because for pause--
the pause button is disabled.

00:34:55.767 --> 00:34:57.934
The play button is enabled.

00:34:57.934 --> 00:34:59.567
Uh, these are
the slider controls

00:34:59.567 --> 00:35:01.968
using &lt;input type='range'&gt;.

00:35:01.968 --> 00:35:04.634
If I do start the playback,

00:35:04.634 --> 00:35:07.634
we should be able
to toggle the volume.

00:35:07.634 --> 00:35:09.634
Ross: I focus primarily on...

00:35:09.634 --> 00:35:11.634
Posnick: And we should
also be able to use this

00:35:11.634 --> 00:35:14.901
to jump to a different portion
of the video.

00:35:17.167 --> 00:35:19.200
You know,
much as you'd imagine,

00:35:19.200 --> 00:35:21.834
you have the current time
listed over here.

00:35:21.834 --> 00:35:25.167
Um, just all the basic
type of controls

00:35:25.167 --> 00:35:27.501
that you would normally see
in the YouTube player,

00:35:27.501 --> 00:35:29.834
but implemented, you know,

00:35:29.834 --> 00:35:32.334
completely with our own code.

00:35:32.334 --> 00:35:34.334
And just to show you,

00:35:34.334 --> 00:35:37.334
we can also jump
to the next video in the feed.

00:35:37.334 --> 00:35:39.000
man: All right, hey, there.

00:35:39.000 --> 00:35:41.501
Posnick: You can do that
pretty much indefinitely.

00:35:41.501 --> 00:35:44.501
So just to show you really quick
the source,

00:35:44.501 --> 00:35:47.501
uh, for the HTML.

00:35:47.501 --> 00:35:50.334
Pretty straightforward--
it's just this page of code.

00:35:50.334 --> 00:35:53.200
Um, most of logic,
as I said,

00:35:53.200 --> 00:35:55.501
is done in JavaScript.

00:35:55.501 --> 00:35:57.834
So I wanted to jump to that

00:35:57.834 --> 00:36:00.901
and show you, uh,
just a little bit

00:36:00.901 --> 00:36:02.734
of the JavaScript.

00:36:02.734 --> 00:36:04.734
And particularly,
I wanted to focus

00:36:04.734 --> 00:36:08.567
on the JavaScript that's used
to handle player events.

00:36:08.567 --> 00:36:11.234
And, uh, this is

00:36:11.234 --> 00:36:13.234
kind of what I found

00:36:13.234 --> 00:36:15.901
the most, uh,
difficult to get correct.

00:36:15.901 --> 00:36:18.400
And--and when I've worked
with developers in general,

00:36:18.400 --> 00:36:20.400
um, and just spoken to folks,

00:36:20.400 --> 00:36:22.234
I think this is
the hardest thing

00:36:22.234 --> 00:36:24.067
to kind of wrap
your head around,

00:36:24.067 --> 00:36:27.400
how to respond to the proper
YouTube player events.

00:36:27.400 --> 00:36:29.400
And it's really key
if you're writing

00:36:29.400 --> 00:36:32.400
a custom player experience
to get this right.

00:36:32.400 --> 00:36:35.234
Otherwise you end up, um,
having, you know,

00:36:35.234 --> 00:36:37.567
UI elements that are disabled

00:36:37.567 --> 00:36:39.567
when, you know, they actually
need to be enabled

00:36:39.567 --> 00:36:42.067
or just, you know,
not taking into account

00:36:42.067 --> 00:36:44.901
the fact that an error has
happened and things like that.

00:36:44.901 --> 00:36:48.400
So, uh, there are kind of
three main characters--

00:36:48.400 --> 00:36:51.400
categories of events,
uh, that are handled

00:36:51.400 --> 00:36:54.400
via the YouTube iframe API.

00:36:54.400 --> 00:36:57.234
There's the onReady events.

00:36:57.234 --> 00:37:00.067
Um, this is fired
when the player API

00:37:00.067 --> 00:37:01.968
is initially available.

00:37:01.968 --> 00:37:03.801
So if you wanted to do something

00:37:03.801 --> 00:37:06.467
as soon as the player API
is available,

00:37:06.467 --> 00:37:08.300
you know,
as Jarek mentioned before,

00:37:08.300 --> 00:37:11.133
the iframe API
right now is, uh,

00:37:11.133 --> 00:37:13.133
the way we recommend loading it
is asynchronously

00:37:13.133 --> 00:37:16.300
so, uh, it doesn't necessarily--

00:37:16.300 --> 00:37:18.634
it actually would not be
available

00:37:18.634 --> 00:37:21.968
whenever, you know,
your DOM is fully available.

00:37:21.968 --> 00:37:23.968
It's gonna be at some point
afterwards.

00:37:23.968 --> 00:37:25.968
If you want to put in some code
that gets fired

00:37:25.968 --> 00:37:29.133
only when everything
is fully ready,

00:37:29.133 --> 00:37:31.467
you would put it
in your onReady handler.

00:37:31.467 --> 00:37:33.968
The onError handler,
as the name suggests,

00:37:33.968 --> 00:37:35.801
is something
that would get fired

00:37:35.801 --> 00:37:37.801
whenever there's any sort
of playback error.

00:37:37.801 --> 00:37:40.634
Um, for instance, if a video
is not playable

00:37:40.634 --> 00:37:44.133
on your particular device
for any number of reasons,

00:37:44.133 --> 00:37:45.968
uh, that will get fired.

00:37:45.968 --> 00:37:48.467
It's pretty important
to put in some code

00:37:48.467 --> 00:37:50.133
for--for handling that.

00:37:50.133 --> 00:37:52.801
It might be as simple as moving
to the next video,

00:37:52.801 --> 00:37:54.801
if you happen to have
a list of videos,

00:37:54.801 --> 00:37:57.634
um, or displaying some sort
of error to the user.

00:37:57.634 --> 00:38:00.300
But it definitely helps
the user experience

00:38:00.300 --> 00:38:03.868
if you were to put in some code
to handle that.

00:38:03.868 --> 00:38:07.701
And the third category of events

00:38:07.701 --> 00:38:11.200
is onStateChange.

00:38:11.200 --> 00:38:14.534
Uh, you can kind of think of it
as a catchall

00:38:14.534 --> 00:38:17.200
that has a bunch of sub-events

00:38:17.200 --> 00:38:20.200
for the different changes
in the YouTube player state.

00:38:20.200 --> 00:38:23.701
And I wanted to focus most
of my time talking about that.

00:38:23.701 --> 00:38:27.200
So kind of five main events,

00:38:27.200 --> 00:38:30.367
uh, ENDED, PLAYING, PAUSED,
BUFFERING, and CUED.

00:38:30.367 --> 00:38:32.367
As Jarek mentioned,
the BUFFERING event

00:38:32.367 --> 00:38:35.701
won't be fired
for the HTML5 player now,

00:38:35.701 --> 00:38:39.701
uh, but those other events
are all relevant.

00:38:39.701 --> 00:38:42.534
And...

00:38:42.534 --> 00:38:45.534
in general, um,
my recommendation

00:38:45.534 --> 00:38:48.534
is just not to make assumptions

00:38:48.534 --> 00:38:51.033
about the global state
of the player

00:38:51.033 --> 00:38:54.367
or what triggered the events
in your event handler.

00:38:54.367 --> 00:38:56.200
And you know,

00:38:56.200 --> 00:38:59.534
one example
where somebody could go wrong

00:38:59.534 --> 00:39:02.934
is they see that
the YT.PlayerState.PLAYING event

00:39:02.934 --> 00:39:06.767
was fired in their event
state change handler.

00:39:06.767 --> 00:39:08.601
And they figure, okay,

00:39:08.601 --> 00:39:10.267
well, if that event was fired,

00:39:10.267 --> 00:39:13.467
it must be because somebody
clicked on the play button.

00:39:13.467 --> 00:39:15.934
But there's actually
a number of other ways

00:39:15.934 --> 00:39:18.767
that playback can start
for a given video.

00:39:18.767 --> 00:39:21.267
Um, the user might have clicked

00:39:21.267 --> 00:39:23.100
on the actual
YouTube video itself,

00:39:23.100 --> 00:39:25.267
which is something
that will trigger playback.

00:39:25.267 --> 00:39:28.601
Or you know, as Greg
was illustrating before,

00:39:28.601 --> 00:39:30.601
there are ways to use
keyboard controls

00:39:30.601 --> 00:39:32.434
for, you know,
tabbing into a video

00:39:32.434 --> 00:39:34.267
and starting playback.

00:39:34.267 --> 00:39:36.934
So if you have
any specific assumptions

00:39:36.934 --> 00:39:39.267
that are built around
the fact, okay,

00:39:39.267 --> 00:39:41.267
somebody must have clicked
on the play button,

00:39:41.267 --> 00:39:43.100
uh, they might be wrong

00:39:43.100 --> 00:39:44.767
i-in your play handler.

00:39:44.767 --> 00:39:48.100
So I would recommend,
uh, explicitly--

00:39:48.100 --> 00:39:50.100
you know, especially when
you're changing the state

00:39:50.100 --> 00:39:52.100
of other UI elements
in response to events,

00:39:52.100 --> 00:39:54.601
I would recommend
to explicitly set the states

00:39:54.601 --> 00:39:58.434
each time through
in your event change handlers

00:39:58.434 --> 00:40:00.267
to whatever
the appropriate value

00:40:00.267 --> 00:40:02.267
you know it should be
for that event,

00:40:02.267 --> 00:40:05.267
rather than, you know, just,
like, toggling given elements.

00:40:05.267 --> 00:40:07.267
Uh, and I think,
you know, that leads

00:40:07.267 --> 00:40:11.100
to a much better
user experience.

00:40:11.100 --> 00:40:14.100
So I wanted to get
into some code that, uh,

00:40:14.100 --> 00:40:16.100
is relevant to that point,

00:40:16.100 --> 00:40:18.601
and just a few
helper functions here

00:40:18.601 --> 00:40:20.634
for enabling and disabling,

00:40:20.634 --> 00:40:22.934
uh, a list of different elements

00:40:22.934 --> 00:40:25.267
given their element names--

00:40:25.267 --> 00:40:27.434
element ideas, rather--

00:40:27.434 --> 00:40:29.434
and, uh, just a helper method

00:40:29.434 --> 00:40:31.434
for setting up the, um,

00:40:31.434 --> 00:40:33.434
the task that fires
in the background basically,

00:40:33.434 --> 00:40:37.267
that updates
the current time in--

00:40:37.267 --> 00:40:39.267
you know, what we saw
in the lower left corner

00:40:39.267 --> 00:40:41.434
of the player--
the current playback time.

00:40:41.434 --> 00:40:44.934
So we have, uh, something
that will set that up for us,

00:40:44.934 --> 00:40:47.434
'cause we're gonna need to clear
that in certain circumstances

00:40:47.434 --> 00:40:50.100
and then reestablish it later.

00:40:50.100 --> 00:40:53.300
So this is just, uh,
some snippets of code,

00:40:53.300 --> 00:40:55.267
uh, where you, for instance,

00:40:55.267 --> 00:40:57.434
would handle
the CUED state events.

00:40:57.434 --> 00:41:01.167
And this is what gets fired
when the player is load--

00:41:01.167 --> 00:41:03.334
the video is loaded
into the player,

00:41:03.334 --> 00:41:06.334
but playback hasn't
actually begun yet.

00:41:06.334 --> 00:41:08.501
And in that scenario,
as you might expect,

00:41:08.501 --> 00:41:10.334
you'd think,
okay, what controls

00:41:10.334 --> 00:41:12.167
do I want to be enabled
in that case?

00:41:12.167 --> 00:41:14.167
And you want the play button
to be enabled.

00:41:14.167 --> 00:41:16.501
And what controls, you know,
just don't make sense

00:41:16.501 --> 00:41:18.167
to have enabled?

00:41:18.167 --> 00:41:20.000
You know, pause, volume,
and seek--

00:41:20.000 --> 00:41:21.834
they're not gonna
be able to do anything

00:41:21.834 --> 00:41:23.501
when you're in that CUED state.

00:41:23.501 --> 00:41:26.834
So, um, you want
to explicitly change

00:41:26.834 --> 00:41:29.334
those values to those states,

00:41:29.334 --> 00:41:32.000
uh, each time
we get into the CUED state.

00:41:32.000 --> 00:41:34.000
And something, you know,
very similar--

00:41:34.000 --> 00:41:35.834
the thing
about the PAUSED state,

00:41:35.834 --> 00:41:37.834
except there's gonna be
a different set of things

00:41:37.834 --> 00:41:39.501
that you'd want to have enabled.

00:41:39.501 --> 00:41:41.334
So you want
the play button enabled.

00:41:41.334 --> 00:41:43.167
You want the volume controls
to still be enabled,

00:41:43.167 --> 00:41:45.000
'cause you can still change
the volume of the video,

00:41:45.000 --> 00:41:46.667
even though it's not playing.

00:41:46.667 --> 00:41:48.667
And you'd still like the person
to be able to jump

00:41:48.667 --> 00:41:50.501
to a different point
in the video,

00:41:50.501 --> 00:41:52.501
so you want the seek bar
to still be enabled.

00:41:52.501 --> 00:41:54.000
But you know, again,

00:41:54.000 --> 00:41:55.834
you don't want the pause button
to be enabled,

00:41:55.834 --> 00:41:57.667
because it certainly
doesn't make sense.

00:41:57.667 --> 00:41:59.667
Uh, and you know,
and we're also gonna clear

00:41:59.667 --> 00:42:02.734
the background time-out

00:42:02.734 --> 00:42:06.567
that, uh, that would be fired
to update the player time,

00:42:06.567 --> 00:42:09.567
because, you know,
if the video is paused,

00:42:09.567 --> 00:42:13.400
we know that the time is
not gonna be increasing at all.

00:42:13.400 --> 00:42:17.234
And PLAYING is in some respects
the opposite.

00:42:17.234 --> 00:42:20.067
We want to enable
the pause button,

00:42:20.067 --> 00:42:21.901
the volume button,
the seek button.

00:42:21.901 --> 00:42:23.734
We want to re-create
that interval.

00:42:23.734 --> 00:42:26.734
Uh, we want to set the volume

00:42:26.734 --> 00:42:29.067
and the duration values

00:42:29.067 --> 00:42:31.234
to whatever, uh, they are

00:42:31.234 --> 00:42:33.934
by reading that
via the API call.

00:42:33.934 --> 00:42:36.734
And you know, this might be
overriding the existing values.

00:42:36.734 --> 00:42:39.734
There might already be a value
for the duration there,

00:42:39.734 --> 00:42:41.734
or the volume
might already be equal

00:42:41.734 --> 00:42:43.567
to whatever
the current volume is,

00:42:43.567 --> 00:42:45.400
but it's--it's really not
gonna hurt anything

00:42:45.400 --> 00:42:47.067
to set that again.

00:42:47.067 --> 00:42:49.234
It might be wasting
a couple of CPU cycles,

00:42:49.234 --> 00:42:51.234
but I've found it--

00:42:51.234 --> 00:42:53.734
it just simplifies
things greatly

00:42:53.734 --> 00:42:55.567
if you don't make
any assumptions

00:42:55.567 --> 00:42:57.567
about what's already there
in the state,

00:42:57.567 --> 00:42:59.901
and you explicitly set it.

00:42:59.901 --> 00:43:02.701
And finally, ENDED--

00:43:02.701 --> 00:43:05.801
very similar, uh,
to what we've seen before.

00:43:05.801 --> 00:43:07.801
One thing I wanted to point
out... [clears throat]

00:43:07.801 --> 00:43:09.801
Excuse me. One thing
I wanted to point out

00:43:09.801 --> 00:43:13.634
is that it really makes
a difference, I've found,

00:43:13.634 --> 00:43:17.467
to explicitly set
whatever the current time is

00:43:17.467 --> 00:43:19.133
in the playback.

00:43:19.133 --> 00:43:22.634
And that's the value
that you see over here.

00:43:22.634 --> 00:43:25.133
This is the current time.
This is the duration.

00:43:25.133 --> 00:43:27.801
Uh, once the video is over,

00:43:27.801 --> 00:43:31.133
you want to make sure that
that current time is set

00:43:31.133 --> 00:43:33.801
to the duration of the video.

00:43:33.801 --> 00:43:35.801
Um, you know,
I'm pretty sure folks have had

00:43:35.801 --> 00:43:37.801
the experience where you
reach the end of the video,

00:43:37.801 --> 00:43:39.968
and maybe it's because
the video is not--

00:43:39.968 --> 00:43:43.300
it has, like, a fractional
second in its duration,

00:43:43.300 --> 00:43:45.133
and there's
some rounding involved,

00:43:45.133 --> 00:43:47.133
and you know, it says
the video's four minutes,

00:43:47.133 --> 00:43:50.300
but you're at--the display
says 3 minutes and 59 seconds,

00:43:50.300 --> 00:43:51.968
and you're like, what?

00:43:51.968 --> 00:43:54.300
What's in that secret
one last second of the video?

00:43:54.300 --> 00:43:55.801
Obviously there's nothing there,

00:43:55.801 --> 00:43:58.801
but it just leads
to a better user experience

00:43:58.801 --> 00:44:00.467
to explicitly set that.

00:44:00.467 --> 00:44:02.534
So that--
that's my recommendation

00:44:02.534 --> 00:44:04.300
for handling the ENDED state.

00:44:07.167 --> 00:44:09.501
And yeah, that's--
that's kind of an overview

00:44:09.501 --> 00:44:12.000
of, um, some of the JavaScript
in the example.

00:44:12.000 --> 00:44:14.667
Definitely feel free
to take a look

00:44:14.667 --> 00:44:16.667
and explore some more.

00:44:16.667 --> 00:44:19.501
I want to remind folks
that we have those--

00:44:19.501 --> 00:44:22.667
excuse me.

00:44:22.667 --> 00:44:25.167
We have those hash tags--

00:44:25.167 --> 00:44:28.501
#io2011 and #YouTube--
for this session.

00:44:28.501 --> 00:44:30.334
And if you have any feedback,

00:44:30.334 --> 00:44:32.501
you can go to that URL as well.

00:44:32.501 --> 00:44:34.501
And we want to take
any questions

00:44:34.501 --> 00:44:37.334
you guys might have
either about iframe player API

00:44:37.334 --> 00:44:39.334
or YouTube topics in general.

00:44:39.334 --> 00:44:41.501
And hopefully we'll have
some answers for you.

00:44:41.501 --> 00:44:43.501
Schechter: Um,
before we jump into questions,

00:44:43.501 --> 00:44:45.167
I actually want to promote--

00:44:45.167 --> 00:44:47.534
we've got this awesome
after-party coming up.

00:44:47.534 --> 00:44:50.334
Um, and so YouTube's
one of the main sponsors for it.

00:44:50.334 --> 00:44:52.834
It's at Thirsty Bear. You can
come grab tickets from us.

00:44:52.834 --> 00:44:54.667
And one thing that's
really important

00:44:54.667 --> 00:44:56.501
is there's a QR code
on the back.

00:44:56.501 --> 00:44:58.834
If you, uh, scan it
and register ahead of time,

00:44:58.834 --> 00:45:00.834
uh, you'll get to skip
the line to go in.

00:45:00.834 --> 00:45:03.000
So hopefully you'll join us
tonight for that.

00:45:08.167 --> 00:45:10.167
man: I have
a quick question for you.

00:45:10.167 --> 00:45:14.000
Um, I've used the iframe player
a little bit.

00:45:14.000 --> 00:45:16.834
Um, is there a way to--

00:45:16.834 --> 00:45:20.200
whether it's Flash or HTML5

00:45:20.200 --> 00:45:22.167
that's being exposed on the--
on the client side,

00:45:22.167 --> 00:45:24.167
is there a way to, um,

00:45:24.167 --> 00:45:26.000
set the window mode
to transparent

00:45:26.000 --> 00:45:28.000
or interact with the CSS
of the, uh,

00:45:28.000 --> 00:45:30.000
the HTML5 video player?

00:45:30.000 --> 00:45:34.000
Schechter: Uh, yeah,
so, um, you can add wmode

00:45:34.000 --> 00:45:35.834
as one of the arguments

00:45:35.834 --> 00:45:37.334
in the, uh, URL.

00:45:37.334 --> 00:45:39.334
So that way you'll interact
with Flash,

00:45:39.334 --> 00:45:41.667
and then you can just interact,
uh, with the iframe with CSS

00:45:41.667 --> 00:45:43.334
like you normally would,

00:45:43.334 --> 00:45:45.934
um, for--
if it's the HTML5 player.

00:45:49.167 --> 00:45:52.000
man: Okay,
so with the oEmbed endpoint,

00:45:52.000 --> 00:45:54.000
I know that you can add
that parameter

00:45:54.000 --> 00:45:56.000
to get the iframe code returned.

00:45:56.000 --> 00:45:58.667
Um, are there plans to start
returning the iframe code

00:45:58.667 --> 00:46:01.067
by default
on the oEmbed endpoint,

00:46:01.067 --> 00:46:03.067
or not in the foreseeable
future?

00:46:03.067 --> 00:46:05.234
Posnick: Yeah, um,

00:46:05.234 --> 00:46:07.234
we actually recently made
a slight change

00:46:07.234 --> 00:46:08.901
to the oEmbed endpoint

00:46:08.901 --> 00:46:10.734
that ended up breaking
a lot of folks,

00:46:10.734 --> 00:46:12.734
and that was just changing
one character in the URL.

00:46:12.734 --> 00:46:14.734
So I think we're--
I personally would advocate

00:46:14.734 --> 00:46:16.734
that we don't make too many
changes to our defaults

00:46:16.734 --> 00:46:19.567
and continue to allow, uh, folks

00:46:19.567 --> 00:46:21.400
to explicitly request things

00:46:21.400 --> 00:46:23.234
in the hopes of not breaking

00:46:23.234 --> 00:46:25.234
too many existing
implementations.

00:46:25.234 --> 00:46:27.267
Uh, that's--
that's my personal preference.

00:46:27.267 --> 00:46:29.734
I'm not the one actually
responsible for the service.

00:46:29.734 --> 00:46:31.400
But that's what I'm hoping.

00:46:31.400 --> 00:46:33.234
Wilkiewicz: One issue
that we've seen

00:46:33.234 --> 00:46:36.567
is, uh, you know,
people, uh, build platforms

00:46:36.567 --> 00:46:38.234
that don't allow iframes.

00:46:38.234 --> 00:46:40.734
And then--so the iframe
actually has to be white-listed.

00:46:40.734 --> 00:46:43.234
And that has been kind of
the number one source of pain

00:46:43.234 --> 00:46:45.067
as we were rolling it out

00:46:45.067 --> 00:46:46.901
and working
with a lot of the, you know,

00:46:46.901 --> 00:46:49.400
say, blogging platforms,
provider, uh, you know, sites,

00:46:49.400 --> 00:46:50.901
and so forth,

00:46:50.901 --> 00:46:53.567
so that they will actually
allow this--this iframe.

00:46:53.567 --> 00:46:55.400
And we've made
a lot of progress,

00:46:55.400 --> 00:46:57.334
but, uh, there's a lot more
work to do, yeah.

00:47:00.634 --> 00:47:02.667
man: Uh, hey, guys,
I had a question

00:47:02.667 --> 00:47:05.334
about the accuracy
of the, uh,

00:47:05.334 --> 00:47:08.167
the skip-to
and skip-ahead function.

00:47:08.167 --> 00:47:11.501
Um, I noticed
during the caption talk

00:47:11.501 --> 00:47:13.167
that was in here earlier,

00:47:13.167 --> 00:47:16.000
um, that there was
fractional seconds involved

00:47:16.000 --> 00:47:18.501
for the start time
and the end time

00:47:18.501 --> 00:47:20.167
for a given piece of text.

00:47:20.167 --> 00:47:22.667
Uh, my question is
are there plans

00:47:22.667 --> 00:47:24.334
to make it more accurate

00:47:24.334 --> 00:47:26.334
as far as the skip-ahead,
skip-back,

00:47:26.334 --> 00:47:28.334
um, just to make
navigational control

00:47:28.334 --> 00:47:30.000
a little bit easier,

00:47:30.000 --> 00:47:32.667
or to be more accurate
with, uh, any sort

00:47:32.667 --> 00:47:35.667
of external navigation
we can develop?

00:47:35.667 --> 00:47:37.834
Schechter: Uh, so one
of the nice things about HTML5

00:47:37.834 --> 00:47:40.000
is we actually don't have
that issue.

00:47:40.000 --> 00:47:43.167
Um, so with Flash you're
worried about, uh, key frames

00:47:43.167 --> 00:47:45.334
and having to jump
to a key frame.

00:47:45.334 --> 00:47:47.000
Uh, HTML5 just standard--

00:47:47.000 --> 00:47:48.834
just goes to the time
that you specified.

00:47:48.834 --> 00:47:51.000
Uh, so you'll have
that accuracy that you want.

00:47:51.000 --> 00:47:53.501
man: Um, can you--can you do,
like, fractional seconds

00:47:53.501 --> 00:47:55.334
or, uh, anything like that?

00:47:55.334 --> 00:47:57.834
Schechter: I, uh,
I haven't tried it.

00:47:57.834 --> 00:48:00.000
man: All right.
Schechter: Um... I don't know.

00:48:00.000 --> 00:48:02.734
man: Cool, thanks.

00:48:02.734 --> 00:48:05.734
man: Hi, guys.
Uh, the API documentation

00:48:05.734 --> 00:48:07.934
says that the iframe player API

00:48:07.934 --> 00:48:09.901
is currently not ready
for mission

00:48:09.901 --> 00:48:12.067
or business-critical
applications.

00:48:12.067 --> 00:48:14.067
Uh, I was wondering when,
uh, what the time frame

00:48:14.067 --> 00:48:16.667
for--for that to be removed is,
that restriction.

00:48:19.501 --> 00:48:21.501
Posnick: Yeah, I don't think
we have an exact time frame.

00:48:21.501 --> 00:48:23.167
This discussion comes up a lot.

00:48:23.167 --> 00:48:25.167
Uh, I think just...

00:48:25.167 --> 00:48:27.000
the important thing to realize

00:48:27.000 --> 00:48:29.334
is it's still a work
in development,

00:48:29.334 --> 00:48:32.501
and you know,
in the course of me writing

00:48:32.501 --> 00:48:34.000
this demo application,

00:48:34.000 --> 00:48:36.000
I know I've held
about half a dozen bugs

00:48:36.000 --> 00:48:38.167
against, uh,
against Greg...

00:48:38.167 --> 00:48:40.200
Schechter: Right.
Posnick: to--to resolve.

00:48:40.200 --> 00:48:43.167
So I-I think, um, you know,
it's not there yet,

00:48:43.167 --> 00:48:45.834
and hopefully
that does not stop folks

00:48:45.834 --> 00:48:49.167
from using it
in their either, you know,

00:48:49.167 --> 00:48:51.000
"non-mission-critical"
environments

00:48:51.000 --> 00:48:53.000
or just trying to develop
against it

00:48:53.000 --> 00:48:55.501
in parallel to whatever
the existing thing is.

00:48:55.501 --> 00:48:57.334
And definitely file bugs.

00:48:57.334 --> 00:49:00.334
Let us know in, uh,
the Google group in particular.

00:49:00.334 --> 00:49:02.734
I think that's the best way
of getting in touch with us.

00:49:02.734 --> 00:49:06.234
And you know,
Greg is super responsive

00:49:06.234 --> 00:49:08.567
about, uh, getting things fixed.

00:49:08.567 --> 00:49:10.567
And you know,
as we get to a point,

00:49:10.567 --> 00:49:12.567
I think, where there are
fewer and fewer reports

00:49:12.567 --> 00:49:15.234
of things going wrong,

00:49:15.234 --> 00:49:17.400
we'll have a greater confidence
in, uh, you know,

00:49:17.400 --> 00:49:19.234
taking off that label

00:49:19.234 --> 00:49:20.901
and being able to say,
you know,

00:49:20.901 --> 00:49:24.734
it should be as--
as supported as our AS3 embed.

00:49:24.734 --> 00:49:26.334
man: All right, thank you.

00:49:29.334 --> 00:49:31.000
man: What's the timeline

00:49:31.000 --> 00:49:34.000
on, uh, getting iOS support
with the autoplay?

00:49:34.000 --> 00:49:36.334
I know that's an Apple issue
and not, you know,

00:49:36.334 --> 00:49:38.334
an iframe issue.
Wilkiewicz: Yeah.

00:49:38.334 --> 00:49:40.167
man: But when you've talked
to the team,

00:49:40.167 --> 00:49:43.334
have they given you a sense
of why they've disabled autoplay

00:49:43.334 --> 00:49:46.334
on the iframe player?

00:49:46.334 --> 00:49:49.501
And is there an E.T.A.
for getting that fixed?

00:49:49.501 --> 00:49:52.334
Do you see
a resolution happening?

00:49:52.334 --> 00:49:54.501
Wilkiewicz: So we--you know,
we work very closely with Apple.

00:49:54.501 --> 00:49:56.834
They're obviously driving
a lot of our playbacks.

00:49:56.834 --> 00:50:00.334
And, uh, actually if you look
at the documentation closely,

00:50:00.334 --> 00:50:03.167
uh, for the video playback,

00:50:03.167 --> 00:50:05.501
it states that, uh,

00:50:05.501 --> 00:50:08.167
for 3G environments,

00:50:08.167 --> 00:50:11.501
uh, the user interaction
is required.

00:50:11.501 --> 00:50:14.334
And you know, I--personally,
I kinda, you know, buy that.

00:50:14.334 --> 00:50:16.167
man: Right.
Wilkiewicz: Uh, but then,

00:50:16.167 --> 00:50:18.000
on Wi-Fi, uh, you know,

00:50:18.000 --> 00:50:20.033
maybe it should be
a little more liberal.

00:50:20.033 --> 00:50:22.000
And in fact, this is what
we've been trying to, uh,

00:50:22.000 --> 00:50:24.834
to see if, uh,
the team at Apple

00:50:24.834 --> 00:50:26.834
could--could add that.
But I don't have an E.T.A.

00:50:26.834 --> 00:50:28.667
But you know,
we have filed a--

00:50:28.667 --> 00:50:30.501
and there has been
a request for that.

00:50:30.501 --> 00:50:32.167
And we work very closely.

00:50:32.167 --> 00:50:33.834
You know,
they're a good partner.

00:50:33.834 --> 00:50:35.834
man: Gotcha. But they seem
favorable to the idea

00:50:35.834 --> 00:50:37.834
that autoplaying in theory
would make sense

00:50:37.834 --> 00:50:39.834
on a Wi-Fi connection?

00:50:39.834 --> 00:50:42.667
Wilkiewicz: Uh, you know,
I-I wouldn't go as far

00:50:42.667 --> 00:50:44.834
as saying
that they are favorable.

00:50:44.834 --> 00:50:47.167
Uh, but you know, if you cannot
look a the user documentation

00:50:47.167 --> 00:50:48.834
from our perspective,

00:50:48.834 --> 00:50:50.834
uh, there's a discrepancy
in behavior.

00:50:50.834 --> 00:50:52.834
Or you know, the Wi-Fi behavior
is unspecified.

00:50:52.834 --> 00:50:54.868
So if it is unspecified,
perhaps we could, uh,

00:50:54.868 --> 00:50:57.000
make it work just like what--
what we described.

00:50:57.000 --> 00:50:59.167
I think that would be
probably the best solution

00:50:59.167 --> 00:51:01.567
for application developers
and carriers

00:51:01.567 --> 00:51:03.567
and everybody else
involved, yeah.

00:51:03.567 --> 00:51:05.567
man: Sure. Um, I guess,
on the YouTube app,

00:51:05.567 --> 00:51:07.734
that's, you know,
native to the device--

00:51:07.734 --> 00:51:10.734
and as I understand it,
Apple built that, not YouTube.

00:51:10.734 --> 00:51:13.901
Um, is there some work-around
that you can envision that,

00:51:13.901 --> 00:51:16.067
if you're building
a native iOS app,

00:51:16.067 --> 00:51:18.067
you'd be able to support
the autoplayback?

00:51:18.067 --> 00:51:20.567
Or is there kind of no--
no work-around?

00:51:20.567 --> 00:51:22.901
Wilkiewicz: So for native
iOS apps

00:51:22.901 --> 00:51:25.434
that incorporate
YouTube Video Playback,

00:51:25.434 --> 00:51:27.734
there's really three approaches
that you can take

00:51:27.734 --> 00:51:29.400
for video embedding.

00:51:29.400 --> 00:51:33.400
One is you can kick off
the, um, YouTube player, right?

00:51:33.400 --> 00:51:35.067
So that's one.

00:51:35.067 --> 00:51:36.734
The other one is, um,

00:51:36.734 --> 00:51:39.567
you can use the existing
Flash embed,

00:51:39.567 --> 00:51:42.234
and what iOS does is recognizes,
oh, this is a YouTube embed,

00:51:42.234 --> 00:51:45.901
and then uses a Safari plug-in
in order to play back the video.

00:51:45.901 --> 00:51:48.567
And this is where
this approach falls apart,

00:51:48.567 --> 00:51:50.734
if you build
your own Flash player

00:51:50.734 --> 00:51:52.400
and no longer can, you know--

00:51:52.400 --> 00:51:54.234
iOS recognizes the signature,

00:51:54.234 --> 00:51:56.067
and then you get a black box.

00:51:56.067 --> 00:51:58.734
And the third approach
is the, uh, iframe embed.

00:51:58.734 --> 00:52:02.801
So, um, if you build
a native iOS application,

00:52:02.801 --> 00:52:04.801
uh, you can actually use
UIWebView

00:52:04.801 --> 00:52:07.801
and embed the AS3 embed

00:52:07.801 --> 00:52:10.467
or the, uh, iframe embed,

00:52:10.467 --> 00:52:13.133
and then, uh,
iOS would recognize it.

00:52:13.133 --> 00:52:15.467
In one case it uses
the Safari plug-in.

00:52:15.467 --> 00:52:19.467
In the other cases it uses
HTML5, uh, Video Playback.

00:52:19.467 --> 00:52:22.467
The HTML5 Video Playback
has the advantage

00:52:22.467 --> 00:52:24.801
of actually having
an API around it.

00:52:24.801 --> 00:52:26.801
So I know more
and more application developers

00:52:26.801 --> 00:52:30.634
are using the iframe API
for iOS applications

00:52:30.634 --> 00:52:32.467
because it is
the only game in town.

00:52:32.467 --> 00:52:34.334
So even though, you know,
technically we're saying

00:52:34.334 --> 00:52:36.133
that, hey,
it's not mission-critical,

00:52:36.133 --> 00:52:37.968
but, uh, the argument
we're making--

00:52:37.968 --> 00:52:39.801
it's still better
than nothing, you know.

00:52:39.801 --> 00:52:41.467
So you can actually do
something.

00:52:41.467 --> 00:52:42.968
man: Yeah.
Wilkiewicz: So--so that's

00:52:42.968 --> 00:52:44.801
kind of the story that we have.

00:52:44.801 --> 00:52:46.467
But I think all of them suffer

00:52:46.467 --> 00:52:48.133
from the same
fundamental limitation

00:52:48.133 --> 00:52:49.801
when it comes to autoplay.

00:52:49.801 --> 00:52:51.634
man: Yeah, I've seen
some hacky solutions

00:52:51.634 --> 00:52:53.467
where you can fire
a touch event,

00:52:53.467 --> 00:52:55.801
and then you kind of crawl the--
the player,

00:52:55.801 --> 00:52:57.634
then find out
what the play button is,

00:52:57.634 --> 00:52:59.467
then you send a touch event,
which, you know,

00:52:59.467 --> 00:53:01.367
apparently isn't allowed
by the documentation,

00:53:01.367 --> 00:53:03.200
but they've let apps
kind of do it.

00:53:03.200 --> 00:53:05.033
Wilkiewicz: I see.
man: Is there any other

00:53:05.033 --> 00:53:06.701
solution beyond that
that--that works,

00:53:06.701 --> 00:53:08.534
or is that kind of the only--
only thing for autoplay

00:53:08.534 --> 00:53:10.200
using iOS?
Wilkiewicz: Uh, yeah,

00:53:10.200 --> 00:53:12.200
so we don't have anything that
we support right now for that.

00:53:12.200 --> 00:53:14.200
man: Good. Thanks.

00:53:14.200 --> 00:53:17.701
man: Hey, so I have a habit
of putting Linux on old laptops.

00:53:17.701 --> 00:53:19.367
And then, uh,
at previous companies

00:53:19.367 --> 00:53:22.033
I was always--always trying
to get, you know,

00:53:22.033 --> 00:53:24.701
real movies
playing on old hardware.

00:53:24.701 --> 00:53:28.033
Is the performance
of HTML5 video

00:53:28.033 --> 00:53:30.701
so much better than Flash
that, like,

00:53:30.701 --> 00:53:32.701
it really makes it possible
to watch movies

00:53:32.701 --> 00:53:35.033
on old hardware?

00:53:35.033 --> 00:53:36.701
Schechter: Um, it's--

00:53:36.701 --> 00:53:38.701
it's sort of
a little bit tricky.

00:53:38.701 --> 00:53:42.701
So, uh, when the encodings
are in H.264,

00:53:42.701 --> 00:53:44.868
uh, the performance

00:53:44.868 --> 00:53:47.534
is generally a little bit
better than HTML5,

00:53:47.534 --> 00:53:50.701
although I don't have
any numbers to give you.

00:53:50.701 --> 00:53:54.367
Uh, WebM--I usually don't see
performance being as good,

00:53:54.367 --> 00:53:57.367
because, uh, you don't have
a specialized chip for it.

00:53:57.367 --> 00:54:00.701
Um, but you know, they're making
a lot of improvements there.

00:54:00.701 --> 00:54:02.934
Uh, but also the--
a lot of--

00:54:02.934 --> 00:54:05.601
a lot of what we've been
doing on WebM--

00:54:05.601 --> 00:54:09.434
uh, it's got, uh, less bytes
for the same amount of quality.

00:54:09.434 --> 00:54:11.934
Um, and so, you know,
it's a better--

00:54:11.934 --> 00:54:14.634
we think that it's
a better encoding.

00:54:14.634 --> 00:54:17.767
But yeah, we're still
sort of, uh, struggling

00:54:17.767 --> 00:54:19.601
on making sure
that the performance

00:54:19.601 --> 00:54:22.534
of, like, the CPU
is gonna be equal or better.

00:54:25.934 --> 00:54:28.767
Cool.

00:54:28.767 --> 00:54:30.601
Posnick: Okay, um,
doesn't look

00:54:30.601 --> 00:54:32.434
like there are
any more questions.

00:54:32.434 --> 00:54:34.267
So thanks, you guys,
for coming.

00:54:34.267 --> 00:54:36.501
Schechter: Thank you.
[applause]

