WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:02.331
SACHIT MISHRA: Do you want
to get your Chrome web

00:00:02.331 --> 00:00:03.350
apps on the big screen?

00:00:03.350 --> 00:00:05.960
Well, we've made it
easier than ever before.

00:00:05.960 --> 00:00:08.780
Hi, I'm Sachit Mishra from
the Google Developer Relations

00:00:08.780 --> 00:00:11.870
team, and I'm going to tell you
about the Cast Sender Framework

00:00:11.870 --> 00:00:13.580
API for Chrome.

00:00:13.580 --> 00:00:17.000
In October 2016, we launched
the Cast Framework API

00:00:17.000 --> 00:00:18.990
for the Google Cast SDK.

00:00:18.990 --> 00:00:23.030
The framework API is built on
top of the Cast Center SDK,

00:00:23.030 --> 00:00:25.850
and simplifies several
parts of the SDK while

00:00:25.850 --> 00:00:29.120
addressing the major pain points
identified by content partners

00:00:29.120 --> 00:00:30.770
and developers.

00:00:30.770 --> 00:00:33.050
The Cast Framework
API significantly

00:00:33.050 --> 00:00:35.030
reduces the amount
of code needed

00:00:35.030 --> 00:00:38.600
by providing a UI widget that
fully complies with the Cast UX

00:00:38.600 --> 00:00:41.750
design checklist, and a
remote player binding that

00:00:41.750 --> 00:00:44.090
is super simple to hook
into your media player

00:00:44.090 --> 00:00:46.030
implementation.

00:00:46.030 --> 00:00:49.640
First, here's some terminology
about how casting works.

00:00:49.640 --> 00:00:51.840
The Google Cast
sender application

00:00:51.840 --> 00:00:55.200
refers to Chrome running on
a mobile device or laptop.

00:00:55.200 --> 00:00:58.650
And the receiver application
refers to an HTML application

00:00:58.650 --> 00:01:02.970
running on Chromecast or other
Google Cast receiver devices.

00:01:02.970 --> 00:01:05.340
Now let's take a look
at the typical lifecycle

00:01:05.340 --> 00:01:06.930
of a Cast sender app.

00:01:06.930 --> 00:01:09.570
When the sender app is
launched, Cast receiver devices

00:01:09.570 --> 00:01:11.950
need to be discovered
on the local network.

00:01:11.950 --> 00:01:14.310
Once the user selects a
device, the sender app

00:01:14.310 --> 00:01:17.340
will connect to that device
and launch the receiver app.

00:01:17.340 --> 00:01:19.470
The sender app then
creates a message channel

00:01:19.470 --> 00:01:22.500
to the receiver app to
send and receive messages.

00:01:22.500 --> 00:01:25.230
The user can also
disconnect from that device.

00:01:25.230 --> 00:01:29.280
The new framework API implements
these new features-- a UI Cast

00:01:29.280 --> 00:01:31.020
button which handles
its own state

00:01:31.020 --> 00:01:34.290
and complies with the Google
Cast design checklist;

00:01:34.290 --> 00:01:38.100
a remote player binding for
easy remote media playback;

00:01:38.100 --> 00:01:40.200
automatic device discovery,
so that you don't

00:01:40.200 --> 00:01:42.180
have to manage
that in your code;

00:01:42.180 --> 00:01:45.210
centralized Cast session
state management;

00:01:45.210 --> 00:01:48.450
and a reconnection service
that automatically handles

00:01:48.450 --> 00:01:50.760
network issues to keep
your sender app connected

00:01:50.760 --> 00:01:52.910
to the receiver.

00:01:52.910 --> 00:01:55.750
Let's take a look at how
to add Cast to your app.

00:01:55.750 --> 00:01:58.360
To load the JavaScript
library into your app,

00:01:58.360 --> 00:02:00.820
add this script tag into
all pages of your app

00:02:00.820 --> 00:02:02.290
which require it.

00:02:02.290 --> 00:02:04.420
When the library is
loaded by the page,

00:02:04.420 --> 00:02:09.850
it will call the
__onGCastApiAvailable callback

00:02:09.850 --> 00:02:11.350
on the global window object.

00:02:11.350 --> 00:02:14.814
So make sure to set that
before loading the library.

00:02:14.814 --> 00:02:17.230
Now let's look at what this
initialization function should

00:02:17.230 --> 00:02:18.390
do.

00:02:18.390 --> 00:02:21.120
The Cast framework has a
global singleton object,

00:02:21.120 --> 00:02:23.340
the CastContext,
which coordinates

00:02:23.340 --> 00:02:25.140
all Cast interactions.

00:02:25.140 --> 00:02:26.640
To initialize, you
must provide it

00:02:26.640 --> 00:02:30.720
with a CastOptions object
using the setOptions method.

00:02:30.720 --> 00:02:33.840
In the CastOptions object,
specify the receiver

00:02:33.840 --> 00:02:36.960
application ID created in
the Cast developer console,

00:02:36.960 --> 00:02:40.080
or use the default
media receiver app ID.

00:02:40.080 --> 00:02:42.840
You can also set the
language, auto-join policy,

00:02:42.840 --> 00:02:45.690
and whether to resume the saved
session in the CastOptions

00:02:45.690 --> 00:02:47.140
object.

00:02:47.140 --> 00:02:50.680
Before we move on, let's
talk about UI for a second.

00:02:50.680 --> 00:02:53.780
Chrome provides a Cast
option in the browser menu.

00:02:53.780 --> 00:02:56.800
But you can make the option more
easily visible to your users

00:02:56.800 --> 00:02:59.680
by adding the Cast button
directly in your UI,

00:02:59.680 --> 00:03:02.180
like your media
control interface.

00:03:02.180 --> 00:03:05.480
The Cast framework provides
a button element for you.

00:03:05.480 --> 00:03:09.470
Simply add it using the
is=google-cast-button property.

00:03:09.470 --> 00:03:11.420
This button provides
the --connected-color

00:03:11.420 --> 00:03:13.730
and --disconnected-color
styling attributes

00:03:13.730 --> 00:03:15.500
for state color control.

00:03:15.500 --> 00:03:17.750
Style this button as necessary,
and let the framework

00:03:17.750 --> 00:03:20.240
handle the rest, like
visibility management

00:03:20.240 --> 00:03:22.430
and click event handling.

00:03:22.430 --> 00:03:25.310
Going back to the code, once
you've got the CastContext

00:03:25.310 --> 00:03:29.270
instance, you can get the
current CastSession object.

00:03:29.270 --> 00:03:31.580
The framework handles
maintenance of the session

00:03:31.580 --> 00:03:33.170
and connection for you.

00:03:33.170 --> 00:03:36.200
But you can listen for events
like media or volume changes

00:03:36.200 --> 00:03:40.970
using event listener callbacks
set on the CastSession object.

00:03:40.970 --> 00:03:41.520
All right.

00:03:41.520 --> 00:03:43.353
Now that you've got
your CastSession object,

00:03:43.353 --> 00:03:44.730
we can move on to
the fun stuff--

00:03:44.730 --> 00:03:46.560
media playback.

00:03:46.560 --> 00:03:50.100
Loading media onto the receiver
works the same as before.

00:03:50.100 --> 00:03:53.220
The sender app has to
create a MediaInfo instance

00:03:53.220 --> 00:03:56.400
with the URL and content
type of the media stream.

00:03:56.400 --> 00:03:59.550
It then has to use this
MediaInfo object to initialize

00:03:59.550 --> 00:04:02.880
a load request that can be
used by the loadMedia method

00:04:02.880 --> 00:04:04.920
of the CastSession object.

00:04:04.920 --> 00:04:07.560
Now that media has been
loaded, media playback

00:04:07.560 --> 00:04:10.590
can be controlled with
the RemotePlayer binding.

00:04:10.590 --> 00:04:14.160
Here's where the framework
API makes things super simple.

00:04:14.160 --> 00:04:17.370
To control media playback,
initialize a RemotePlayer

00:04:17.370 --> 00:04:20.820
object and use it to instantiate
a RemotePlayerController

00:04:20.820 --> 00:04:21.870
object.

00:04:21.870 --> 00:04:25.170
RemotePlayerController provides
methods to directly control

00:04:25.170 --> 00:04:28.710
remote media playback, like
playing, pausing, stopping,

00:04:28.710 --> 00:04:29.980
and more.

00:04:29.980 --> 00:04:32.190
Let's take a deeper
look at these objects.

00:04:32.190 --> 00:04:33.960
The RemotePlayer
object is actually

00:04:33.960 --> 00:04:36.300
just a simple
state encapsulation

00:04:36.300 --> 00:04:38.250
with no behavior of its own.

00:04:38.250 --> 00:04:41.550
RemotePlayerController binds
the RemotePlayer object

00:04:41.550 --> 00:04:43.780
to the device state
and sometimes uses

00:04:43.780 --> 00:04:47.940
its property values and playback
control methods like seek.

00:04:47.940 --> 00:04:51.090
Keep in mind that because
RemotePlayer has no behavior,

00:04:51.090 --> 00:04:53.070
you can really use any
object you want which

00:04:53.070 --> 00:04:55.320
contains the needed state.

00:04:55.320 --> 00:04:57.870
This example in
Angular perfectly

00:04:57.870 --> 00:05:00.750
demonstrates how easy it
is to hook the RemotePlayer

00:05:00.750 --> 00:05:03.420
implementation into
your app, and how

00:05:03.420 --> 00:05:06.020
these two objects can be used.

00:05:06.020 --> 00:05:08.530
So how do you
monitor media status?

00:05:08.530 --> 00:05:10.480
You can query the
RemotePlayer State

00:05:10.480 --> 00:05:13.720
object, as mentioned
before, or you can directly

00:05:13.720 --> 00:05:16.930
set event listeners on the
RemotePlayerController.

00:05:16.930 --> 00:05:20.410
Some events, like playing or
pausing, muting, and volume

00:05:20.410 --> 00:05:23.650
changes, can occur outside
of your app's control.

00:05:23.650 --> 00:05:25.480
Your app will need
to act on the events

00:05:25.480 --> 00:05:27.520
to synchronize itself
with the receiver

00:05:27.520 --> 00:05:29.800
app on the Cast device.

00:05:29.800 --> 00:05:31.480
Once the user has
finished casting,

00:05:31.480 --> 00:05:33.180
they may disconnect your app.

00:05:33.180 --> 00:05:35.290
Add a listener on the
RemotePlayerController

00:05:35.290 --> 00:05:37.690
for the
IS_CONNECTED_CHANGED event

00:05:37.690 --> 00:05:40.220
to update your app accordingly.

00:05:40.220 --> 00:05:40.760
That's it.

00:05:40.760 --> 00:05:43.520
That's everything you need
to Cast-enable your app.

00:05:43.520 --> 00:05:46.180
You can get more details
about the Google Cast SDK

00:05:46.180 --> 00:05:49.400
at developers.google.com/cast.

00:05:49.400 --> 00:05:51.920
It's also important to take
a look at the Cast design

00:05:51.920 --> 00:05:55.350
checklist, which has design
implications for your app.

00:05:55.350 --> 00:05:57.950
We have also open-sourced
sample Cast apps

00:05:57.950 --> 00:05:59.620
that you can use as a reference.

00:05:59.620 --> 00:06:01.120
If you have any
developer questions,

00:06:01.120 --> 00:06:03.110
post those on Stack Overflow.

00:06:03.110 --> 00:06:06.560
Join our Google Cast developers
community on G+ to keep up

00:06:06.560 --> 00:06:10.510
to date with SDK updates and
discuss with other developers.

00:06:10.510 --> 00:06:11.630
I'm Sachit Mishra.

00:06:11.630 --> 00:06:14.590
Thanks for watching,
and happy casting.

