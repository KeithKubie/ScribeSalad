WEBVTT
Kind: captions
Language: en

00:00:00.440 --> 00:00:03.440
Now let's talk about implementation of the capsule,

00:00:03.440 --> 00:00:06.640
and in particular what are the actions taken on

00:00:06.640 --> 00:00:10.530
capsule arrival at a particular node. Now, I mentioned

00:00:10.530 --> 00:00:13.310
that the capsule does not contain code, but it

00:00:13.310 --> 00:00:16.270
is passed by reference. Or in other words

00:00:16.270 --> 00:00:19.670
what the capsule contains is the type identify which

00:00:19.670 --> 00:00:22.200
is really a fingerprint for the capsule code. And

00:00:22.200 --> 00:00:25.630
the way this type is generated it's basically a

00:00:25.630 --> 00:00:29.935
cryptographic fingerprint of the original capsule code.

00:00:29.935 --> 00:00:32.470
In the original implementation of Ann's tool

00:00:32.470 --> 00:00:38.300
kit they used an MD5 hash of the code and used that as a fingerprint.

00:00:38.300 --> 00:00:42.100
And it was the case that at the time that this particular research was

00:00:42.100 --> 00:00:47.410
done, MD5 hash was a cryptographically strong

00:00:47.410 --> 00:00:51.150
hash function, which was not broken. But subsequently

00:00:51.150 --> 00:00:54.570
MD5 hash has been broken. But nevertheless, the key

00:00:54.570 --> 00:00:57.040
thing that I want you to remember is that

00:00:57.040 --> 00:01:00.930
this type field is a cryptographically strong fingerprint that

00:01:00.930 --> 00:01:04.290
is derived from the capsule code. And that serves as

00:01:04.290 --> 00:01:07.000
a reference for the code itself. So when a

00:01:07.000 --> 00:01:10.190
node receives a capsule, one of two things are possible.

00:01:10.190 --> 00:01:13.030
The first possibility is that this node has seen

00:01:13.030 --> 00:01:16.710
capsules of this type before. If that is the case,

00:01:16.710 --> 00:01:20.020
then it is quite likely that in the soft

00:01:20.020 --> 00:01:22.810
store of this node the code that corresponds to

00:01:22.810 --> 00:01:25.700
this type is already existing. In which case, it's

00:01:25.700 --> 00:01:28.380
a simple thing for the current node to retrieve the

00:01:28.380 --> 00:01:31.610
code from its soft store, and execute the capsule

00:01:31.610 --> 00:01:35.590
and proceed with forwarding this capsule on to where its

00:01:35.590 --> 00:01:38.885
desired destination. On the other hand, if this capsule

00:01:38.885 --> 00:01:41.790
that arrived at this node is the first time that

00:01:41.790 --> 00:01:45.560
this node is seeing a capsule of this type, then, obviously,

00:01:45.560 --> 00:01:47.970
it's not going to have the code that corresponds to this

00:01:47.970 --> 00:01:50.860
type. In this case, what this current node is going to

00:01:50.860 --> 00:01:55.010
do is use the previous node field of the capsule and

00:01:55.010 --> 00:01:58.490
send a request to the previous node saying that, hey I

00:01:58.490 --> 00:02:01.240
got this capsule of this type, I don't have the code.

00:02:01.240 --> 00:02:03.130
Do you have the code? If you have, please send it

00:02:03.130 --> 00:02:06.900
to me. And when this request comes in, the previous node,

00:02:06.900 --> 00:02:10.770
obviously it has processed this capsule before. It's quite likely

00:02:10.770 --> 00:02:14.200
that this previous node has the capsule code residing in

00:02:14.200 --> 00:02:16.940
its soft store. And so it retrieves it from its

00:02:16.940 --> 00:02:19.560
soft store and sends it to the next node so

00:02:19.560 --> 00:02:22.480
that the next node has the capsule code now, can

00:02:22.480 --> 00:02:26.025
execute it, and also store it now locally in its

00:02:26.025 --> 00:02:29.300
own soft store so that future capsules of the same

00:02:29.300 --> 00:02:32.520
type when they arrive here, it can be processed using

00:02:32.520 --> 00:02:34.990
the code that is now stored in the soft store. And

00:02:34.990 --> 00:02:37.620
the key point to take away is that typically when we

00:02:37.620 --> 00:02:40.740
are talking about network flows, we are sending a whole bunch

00:02:40.740 --> 00:02:45.130
of packets one after another. And therefore, even though the first

00:02:45.130 --> 00:02:48.160
packet that comes to a node may not find the code

00:02:48.160 --> 00:02:51.470
that is associated with that particular type, and we have to

00:02:51.470 --> 00:02:53.720
do a little bit of heavy lifting in, in terms of

00:02:53.720 --> 00:02:57.540
going and reaching back to the previous node to retrieve the code.

00:02:57.540 --> 00:03:00.540
Because network flow is a whole bunch of packets, there's

00:03:00.540 --> 00:03:02.700
going to be a whole lot of other packets that

00:03:02.700 --> 00:03:05.886
come down the pike. They're all going to be processed

00:03:05.886 --> 00:03:08.510
using the soft store and the code that is stored in

00:03:08.510 --> 00:03:11.130
the soft store. In other words, we are exploiting the

00:03:11.130 --> 00:03:16.660
locality for capsule processing by storing the code that arrives in

00:03:16.660 --> 00:03:18.900
response to our request back to a previous node in

00:03:18.900 --> 00:03:22.770
the local soft store. One concern that we may have is

00:03:22.770 --> 00:03:25.540
that how do I believe that the code that I

00:03:25.540 --> 00:03:28.850
got from the previous node is actually the code that corresponds

00:03:28.850 --> 00:03:31.270
to this type or not. Well, this is where the

00:03:31.270 --> 00:03:35.740
cryptograpically strong fingerprint comes into play. What this node is going

00:03:35.740 --> 00:03:37.900
to do is, when it retrieves the code from the

00:03:37.900 --> 00:03:40.510
previous node, and when the code arrives, it is going to

00:03:40.510 --> 00:03:43.700
compute the fingerprint of the code that it just got. And

00:03:43.700 --> 00:03:47.960
see if that fingerprint matches the type field of the capsule.

00:03:47.960 --> 00:03:50.160
If it does, then it knows that this code

00:03:50.160 --> 00:03:54.090
is genuine. If it is not, then obviously somebody is

00:03:54.090 --> 00:03:57.840
trying to spoof my node by giving bogus codes

00:03:57.840 --> 00:03:59.960
so I'm going to reject it. So code spoofing can

00:03:59.960 --> 00:04:03.440
be avoided by having a fingerprint that is cryptographically

00:04:03.440 --> 00:04:06.510
strong, so that I can recompute the fingerprint match it

00:04:06.510 --> 00:04:09.440
against the type, and know that the demand loaded code

00:04:09.440 --> 00:04:13.490
that I got is actually the code that is associated

00:04:13.490 --> 00:04:16.810
with this particular capsule. And as I mentioned already, once

00:04:16.810 --> 00:04:19.779
I get this code, because I'm going to most likely

00:04:19.779 --> 00:04:23.210
see capsules of this type in the future as part

00:04:23.210 --> 00:04:27.030
of this particular network flow, I'm going to save the code

00:04:27.030 --> 00:04:29.430
in the soft store for future use. So when a

00:04:29.430 --> 00:04:32.040
capsule arrives at a node one of two things will

00:04:32.040 --> 00:04:35.180
happen. One is I will reach into my soft store

00:04:35.180 --> 00:04:38.500
and see if I have the code that matches this particular

00:04:38.500 --> 00:04:41.570
type in the capsule. If it isn't then I don't

00:04:41.570 --> 00:04:43.790
have the code, I'm going to reach back and get it

00:04:43.790 --> 00:04:46.510
from the previous node. But what if I go back

00:04:46.510 --> 00:04:49.880
to the previous node and the previous node does not have

00:04:49.880 --> 00:04:53.230
the code that corresponds to this type. So the action

00:04:53.230 --> 00:04:56.720
of a node when it cannot find the code that corresponds

00:04:56.720 --> 00:04:59.930
to a type either locally in its soft store or retrieving

00:04:59.930 --> 00:05:03.230
it from the previous node, is to simply drop the capsule.

00:05:03.230 --> 00:05:06.450
Because what's going to happen is that if this capsule

00:05:06.450 --> 00:05:09.440
is dropped, higher-level acknowledgements that

00:05:09.440 --> 00:05:11.720
are happening in that particular network

00:05:11.720 --> 00:05:14.220
flow is going to indicate to the source that something

00:05:14.220 --> 00:05:16.810
did not get through, and that source node is going to retransmit

00:05:16.810 --> 00:05:19.460
that capsule. This is exactly the same thing that happens

00:05:19.460 --> 00:05:22.940
with IP routing on the Internet. That is, if a node

00:05:22.940 --> 00:05:25.970
cannot process all the packet that it gets, it simply

00:05:25.970 --> 00:05:28.270
drops the packet. That's the same semantic that is used for

00:05:28.270 --> 00:05:31.580
capsule processing also because we're relying on higher level

00:05:31.580 --> 00:05:34.840
protocols, the transfer protocol that sits on top of

00:05:34.840 --> 00:05:38.060
the network protocol do end to end acknowledgement to

00:05:38.060 --> 00:05:41.890
make sure that all the packets that they're expecting

00:05:41.890 --> 00:05:44.880
have actually reached. And therefore at the level of

00:05:44.880 --> 00:05:47.440
capsule processing, we don't have to worry if we

00:05:47.440 --> 00:05:50.800
cannot process the capsule either locally by using the

00:05:50.800 --> 00:05:53.320
code in the soft store or by retrieving the code

00:05:53.320 --> 00:05:56.490
from the previous node. Simply drop the capsule. Now, is

00:05:56.490 --> 00:06:00.040
it likely that, when we reach into the previous node, that

00:06:00.040 --> 00:06:02.770
node does not have the code for it? Because, after

00:06:02.770 --> 00:06:06.600
all, it did process this capsule, and send this capsule on

00:06:06.600 --> 00:06:10.010
to me. It can happen, because the soft store is

00:06:10.010 --> 00:06:13.750
limited. Every router node has only a finite capacity, and all

00:06:13.750 --> 00:06:15.450
of its capacity it's not going to give to a

00:06:15.450 --> 00:06:18.570
single network flow. It's going to give only a part of

00:06:18.570 --> 00:06:21.270
its storage for the network flow that is

00:06:21.270 --> 00:06:25.120
corresponding to a particular capsule type. And therefore, I

00:06:25.120 --> 00:06:28.320
have to live within my means. So, the capsule

00:06:28.320 --> 00:06:32.220
code may have to throw away stuff every once

00:06:32.220 --> 00:06:37.360
in a while if it is storing more than what its capacity is in the soft store.

00:06:37.360 --> 00:06:40.870
So it is possible that the code that it

00:06:40.870 --> 00:06:43.610
originally stored in the soft store, it had to

00:06:43.610 --> 00:06:46.170
replace it. Because it is like a cache and therefore, it

00:06:46.170 --> 00:06:49.210
may have replaced it and therefore, it may not have it.

00:06:49.210 --> 00:06:52.780
And this is particularly possible if this request comes at a

00:06:52.780 --> 00:06:56.170
much later time because one of the things that you associate

00:06:56.170 --> 00:06:58.979
with this kind of routing code is that it is going

00:06:58.979 --> 00:07:01.770
to be timely. So there is going to be a time

00:07:01.770 --> 00:07:05.380
associated with the validity of things that I want to keep

00:07:05.380 --> 00:07:09.180
in my soft store. So if I, I get a request

00:07:09.180 --> 00:07:13.560
at this node at a much later point in time because the capsule arrived at this

00:07:13.560 --> 00:07:15.860
node traversing all over the network, it may

00:07:15.860 --> 00:07:17.990
not have the code that corresponds to the

00:07:17.990 --> 00:07:22.095
type. So it is possible, so if it happens, simply drop the capsule and let the

00:07:22.095 --> 00:07:25.240
higher level entities in the protocol stack take

00:07:25.240 --> 00:07:27.740
care of retransmitting the capsule if need be.

