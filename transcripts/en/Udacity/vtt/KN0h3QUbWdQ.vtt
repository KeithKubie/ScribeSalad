WEBVTT
Kind: captions
Language: en

00:00:00.440 --> 00:00:01.330
All right.

00:00:01.330 --> 00:00:04.010
So far we've seen a lot of
short statements defining and

00:00:04.010 --> 00:00:06.850
manipulating data types and
data structures.

00:00:06.850 --> 00:00:08.640
Now it's time for control flow,

00:00:08.640 --> 00:00:12.250
the syntax of telling your program
which statements to execute when.

00:00:13.470 --> 00:00:16.700
For this module you want to be
following along in the playground file

00:00:16.700 --> 00:00:18.680
entitled l four control flow.

00:00:19.780 --> 00:00:21.475
Let's start with for loops.

00:00:21.475 --> 00:00:25.120
Swift supports traditional C style for
loops like this one.

00:00:25.120 --> 00:00:27.980
Note that there are no
parentheses around the condition.

00:00:27.980 --> 00:00:32.060
If you're used to C style languages, you
might miss the parentheses at first but

00:00:32.060 --> 00:00:33.980
they'll soon fade from your heart and

00:00:33.980 --> 00:00:36.565
you'll realize you're
better off without them.

00:00:36.565 --> 00:00:39.367
C style for
loops might work well for bar songs.

00:00:39.367 --> 00:00:43.092
But I think you'll really come to
appreciate the efficiency of Swift's

00:00:43.092 --> 00:00:45.107
fast enumeration with for-in loops,

00:00:45.107 --> 00:00:48.783
which you've got a glimpse of earlier
when we talked about in strings.

00:00:48.783 --> 00:00:54.280
For-in loops take the general form,
for item in Collection.

00:00:54.280 --> 00:00:55.810
And then between curly braces,

00:00:55.810 --> 00:00:58.620
the statements you want to execute
on each item in the collection.

00:00:59.670 --> 00:01:03.270
To iterate through this string for
example, we just write for

00:01:03.270 --> 00:01:08.860
character in demostring.characters,
which is a collection of characters.

00:01:08.860 --> 00:01:11.690
And then this print statement
will be executed on every item in

00:01:11.690 --> 00:01:12.650
the collection.

00:01:12.650 --> 00:01:15.140
In this case,
every character in the string.

00:01:15.140 --> 00:01:16.070
It's super convenient.

00:01:18.120 --> 00:01:20.220
And then,
here's what it prints to the console.

00:01:21.800 --> 00:01:23.340
Let's see another example.

00:01:23.340 --> 00:01:25.790
Let's find the sum of all
the ints in this array.

00:01:25.790 --> 00:01:29.546
To do that, we just type for
value in intArray.

00:01:29.546 --> 00:01:32.523
And this statement adding it to
the sum will be executed for

00:01:32.523 --> 00:01:34.180
each member of the collection.

00:01:35.300 --> 00:01:37.830
You can see here in the playground
sidebar that it's being

00:01:37.830 --> 00:01:39.840
executed five times.

00:01:39.840 --> 00:01:42.970
And then if we want to see our sum,
we can just type some and

00:01:42.970 --> 00:01:45.750
that will appear in
the playground sidebar as well.

00:01:45.750 --> 00:01:49.450
We can use for-in to iterate
through dictionaries as well.

00:01:49.450 --> 00:01:52.360
Here we have a dictionary of movies and
their directors.

00:01:52.360 --> 00:01:55.360
And here's a for loop that prints
out a statement about who directed

00:01:55.360 --> 00:01:56.670
each of the movies in movie dict.

00:01:57.740 --> 00:02:01.180
You can see that the syntax is similar
to iterate it through an array.

00:02:01.180 --> 00:02:05.330
In this case the key value pair is
placed in parentheses after for.

00:02:05.330 --> 00:02:09.100
And then both key and value can be
referred to in the body of the loop.

00:02:09.100 --> 00:02:11.740
And if we want to see that
output in the console,

00:02:11.740 --> 00:02:13.965
we just go down to
the bottom of the screen and

00:02:13.965 --> 00:02:18.185
click on this button that shows
the rectangle with the triangle inside.

00:02:18.185 --> 00:02:19.675
And here's the output we're looking for.

00:02:20.695 --> 00:02:23.425
But for the most part we're going to
stick to looking at our results in

00:02:23.425 --> 00:02:24.825
the playground sidebar.

00:02:24.825 --> 00:02:26.275
So let's close the console for now.

00:02:27.405 --> 00:02:28.655
Let's do one more.

00:02:28.655 --> 00:02:30.695
Let's try something with
the animal group's dictionary.

00:02:30.695 --> 00:02:36.060
Here the plural animal name is the key
and the animal group name is the value.

00:02:36.060 --> 00:02:39.760
And we can iterate through each pair to
print out a statement about each group.

00:02:39.760 --> 00:02:44.728
So if we open up the console again,
we can see that many whales form a pod,

00:02:44.728 --> 00:02:49.050
many lions form a pride,
many geese form a flock.

00:02:49.050 --> 00:02:51.000
What do many auditions form?

