WEBVTT
Kind: captions
Language: en

00:00:00.019 --> 00:00:01.310
ANDREW BROGDON: Hey, everybody.

00:00:01.310 --> 00:00:02.830
I'm Andrew Brogdon
from the Flutter team.

00:00:02.830 --> 00:00:04.329
And today, I'm going
to show you how

00:00:04.329 --> 00:00:07.750
to quickly bring a Flutter app
to life with Cloud Firestore.

00:00:07.750 --> 00:00:09.820
If you haven't used it
before, Cloud Firestore

00:00:09.820 --> 00:00:11.920
is a NoSQL document
database that

00:00:11.920 --> 00:00:15.470
simplifies storing, syncing,
and querying data for your apps

00:00:15.470 --> 00:00:17.050
at a global scale.

00:00:17.050 --> 00:00:19.390
It's also a great way to put
a backend on a Flutter app

00:00:19.390 --> 00:00:22.146
without the hassle of
spinning up your own servers.

00:00:22.146 --> 00:00:23.270
Let me give you an example.

00:00:23.270 --> 00:00:24.760
Say you're starting a band.

00:00:24.760 --> 00:00:26.980
And you and your bandmates
can't agree on a name.

00:00:26.980 --> 00:00:30.070
You know, you play remixed
glam folk disco glitch metal

00:00:30.070 --> 00:00:32.950
and can't find anything
that captures your essence.

00:00:32.950 --> 00:00:34.630
So you decide to do a survey.

00:00:34.630 --> 00:00:37.686
You'll make an app that displays
a list of potential band names.

00:00:37.686 --> 00:00:39.310
And then, you and
your bandmates go out

00:00:39.310 --> 00:00:40.660
and show people the list.

00:00:40.660 --> 00:00:42.190
They tap on the names they like.

00:00:42.190 --> 00:00:45.032
And your app keeps track of how
many people vote for each name.

00:00:45.032 --> 00:00:46.990
Putting together the UI
for something like that

00:00:46.990 --> 00:00:48.490
is actually pretty
quick in Flutter,

00:00:48.490 --> 00:00:50.780
as you may have seen in
some of our other videos.

00:00:50.780 --> 00:00:52.720
But you also need a
backend data source

00:00:52.720 --> 00:00:55.630
shared between all the
devices running the app.

00:00:55.630 --> 00:00:57.610
How can you build
one and handle issues

00:00:57.610 --> 00:00:59.800
like security,
connections going offline,

00:00:59.800 --> 00:01:02.130
and all the rest of that stuff?

00:01:02.130 --> 00:01:04.310
This is where Cloud
Firestore can help.

00:01:04.310 --> 00:01:06.476
With it, you can
create a collection

00:01:06.476 --> 00:01:07.850
that will track
the possible band

00:01:07.850 --> 00:01:09.800
names and their popularity.

00:01:09.800 --> 00:01:13.100
Then, you integrate the Flutter
Firestore plugin into your app

00:01:13.100 --> 00:01:16.280
and build your widgets using
data from that collection.

00:01:16.280 --> 00:01:19.400
The apps sends new data back
in response for UI events

00:01:19.400 --> 00:01:20.720
like button taps.

00:01:20.720 --> 00:01:23.270
And Firestore handles
the rest of the details.

00:01:23.270 --> 00:01:25.370
It persists the new
info, sends updates

00:01:25.370 --> 00:01:27.020
to all the other
instances of the app,

00:01:27.020 --> 00:01:29.650
and keeps everybody
on the same page.

00:01:29.650 --> 00:01:31.375
All right, so that's the plan.

00:01:31.375 --> 00:01:32.750
Let's imagine
you've already done

00:01:32.750 --> 00:01:35.990
that first step of creating
the UI with mocked up data.

00:01:35.990 --> 00:01:37.370
How quickly can
we get it working

00:01:37.370 --> 00:01:40.000
for real with Firestore?

00:01:40.000 --> 00:01:43.480
Well, step one is to
create a Firebase project.

00:01:43.480 --> 00:01:46.330
You could do this in
a Firebase console.

00:01:46.330 --> 00:01:49.830
And I'm just going to call this
one Band Name Survey and click

00:01:49.830 --> 00:01:52.190
Create Project.

00:01:52.190 --> 00:01:54.330
And then a few seconds
later, it'll be good to go.

00:01:57.210 --> 00:01:59.620
Cool.

00:01:59.620 --> 00:02:02.090
Now, Firebase asks you to
register the individual apps

00:02:02.090 --> 00:02:03.290
for your project.

00:02:03.290 --> 00:02:05.940
Here, you can see me
registering an Android one.

00:02:05.940 --> 00:02:07.280
There we go.

00:02:07.280 --> 00:02:09.120
Click Register App.

00:02:09.120 --> 00:02:12.742
And make sure that you grab
the config file, right there,

00:02:12.742 --> 00:02:13.950
when you do the registration.

00:02:13.950 --> 00:02:17.056
I'll show you what to do
with that in a second.

00:02:17.056 --> 00:02:18.680
Once you have an app
registered, you'll

00:02:18.680 --> 00:02:20.120
see this screen
for your project.

00:02:20.120 --> 00:02:23.160
And you can use this
button to add a second app.

00:02:23.160 --> 00:02:26.400
I'll use it to create an
app registration for iOS.

00:02:26.400 --> 00:02:27.992
Flutter can build
for both platforms.

00:02:27.992 --> 00:02:29.700
And if you plan to
take advantage of that

00:02:29.700 --> 00:02:31.170
and release on
both, you actually

00:02:31.170 --> 00:02:33.720
need to register two
apps, one for each OS.

00:02:38.240 --> 00:02:40.790
One thing to note, when you
create a new Flutter project

00:02:40.790 --> 00:02:43.380
in Android Studio or Visual
Studio Code or whatever,

00:02:43.380 --> 00:02:47.060
you're asked for an organization
name in reverse domain order.

00:02:47.060 --> 00:02:48.830
This, along with
the name of the app,

00:02:48.830 --> 00:02:50.660
ends up as the package
name for Android

00:02:50.660 --> 00:02:52.610
and the bundle ID for iOS.

00:02:52.610 --> 00:02:54.950
So when Firebase asks
for those pieces of info,

00:02:54.950 --> 00:02:56.360
that's what they are.

00:02:56.360 --> 00:02:58.790
If you can't remember, just
open the underlying X code

00:02:58.790 --> 00:03:01.520
project or Android manifest
in your project source tree,

00:03:01.520 --> 00:03:03.330
and you can find what you need.

00:03:03.330 --> 00:03:03.830
OK.

00:03:03.830 --> 00:03:06.530
With the apps registered,
let's get Firestore going.

00:03:06.530 --> 00:03:08.600
I'm going to go over to
Database under Develop

00:03:08.600 --> 00:03:11.600
and choose Firestore as
my project's database.

00:03:11.600 --> 00:03:13.220
I'll leave it in
test mode for now.

00:03:13.220 --> 00:03:14.220
Hit enable.

00:03:14.220 --> 00:03:17.084
And in a few seconds, once
the spinner stop spinning,

00:03:17.084 --> 00:03:18.500
I'll have an
instance of Firestore

00:03:18.500 --> 00:03:19.749
that I can start playing with.

00:03:22.464 --> 00:03:24.360
Cool.

00:03:24.360 --> 00:03:26.130
Now, it's time to
make a collection.

00:03:26.130 --> 00:03:29.810
I'll just call it Band
Names and hit Next.

00:03:29.810 --> 00:03:33.991
And this will hold a document
for each possible band name.

00:03:33.991 --> 00:03:34.490
Let's see.

00:03:34.490 --> 00:03:37.450
And for my first document,
I'll just auto ID it.

00:03:37.450 --> 00:03:39.820
And I'll have the first
field be called Name.

00:03:39.820 --> 00:03:40.780
And that's a string.

00:03:40.780 --> 00:03:43.030
And for the first name,
how about Jam and the Angry

00:03:43.030 --> 00:03:43.880
Biscuits?

00:03:43.880 --> 00:03:45.770
There we go.

00:03:45.770 --> 00:03:48.290
And I need another field to
hold the number of votes.

00:03:48.290 --> 00:03:51.760
So that's a number, and
I'll start off with zero.

00:03:51.760 --> 00:03:52.660
Let me hit Save here.

00:03:57.440 --> 00:03:59.829
And there's my record.

00:03:59.829 --> 00:04:00.870
All right, so that's one.

00:04:00.870 --> 00:04:03.030
Now, let me go ahead and
add three more records

00:04:03.030 --> 00:04:05.610
using a technique I like
to call fast forwarding

00:04:05.610 --> 00:04:07.295
through prerecorded footage.

00:04:07.295 --> 00:04:10.200
So there's two.

00:04:10.200 --> 00:04:12.010
There's three.

00:04:12.010 --> 00:04:12.910
And there's four.

00:04:12.910 --> 00:04:14.380
My collection is ready.

00:04:14.380 --> 00:04:16.899
At this point, you've
got a working backend.

00:04:16.899 --> 00:04:19.060
The next step is to get
your app talking to it.

00:04:19.060 --> 00:04:21.100
And for that, you'll
see the Cloud Firestore

00:04:21.100 --> 00:04:22.700
plugin for Flutter.

00:04:22.700 --> 00:04:24.460
All right, you may
remember those config

00:04:24.460 --> 00:04:27.670
files we downloaded earlier
from the Firebase console.

00:04:27.670 --> 00:04:29.900
Time we get them in place.

00:04:29.900 --> 00:04:31.760
I'm going to drag the
Android configuration

00:04:31.760 --> 00:04:36.080
file, google-services_json,
into the Android/app directory

00:04:36.080 --> 00:04:38.360
in my Flutter project source.

00:04:38.360 --> 00:04:41.030
Next, I need to get the Firebase
gradle plugin for Android

00:04:41.030 --> 00:04:42.170
in place.

00:04:42.170 --> 00:04:43.970
Now, Android Studio's
Firebase Assistant

00:04:43.970 --> 00:04:45.170
can actually help you with this.

00:04:45.170 --> 00:04:46.730
But in case you're
using Visual Studio

00:04:46.730 --> 00:04:48.230
Code or some other
editor, I'm going

00:04:48.230 --> 00:04:50.340
to show you the manual way.

00:04:50.340 --> 00:04:52.800
Just open the build.gradle
file you find in your Flutter

00:04:52.800 --> 00:04:54.960
project's Android directory.

00:04:54.960 --> 00:04:57.702
And then add this line for
the Google services plugin

00:04:57.702 --> 00:04:58.785
to the dependency section.

00:05:02.340 --> 00:05:04.440
Then, open the app
level gradle file

00:05:04.440 --> 00:05:07.650
at android/app/build.gradle.

00:05:07.650 --> 00:05:10.090
And all the way
at the bottom, add

00:05:10.090 --> 00:05:12.640
a line to apply that plugin.

00:05:12.640 --> 00:05:19.260
And it's com google gms
and then google-services.

00:05:19.260 --> 00:05:19.970
Cool.

00:05:19.970 --> 00:05:23.450
All right, for iOS, I'm going
to open the underlying Xcode

00:05:23.450 --> 00:05:26.890
project created for
each Flutter app.

00:05:26.890 --> 00:05:27.900
It's called Runner.

00:05:27.900 --> 00:05:30.630
And I'm going to open
the workspace file itself

00:05:30.630 --> 00:05:32.060
since Flutter uses CocoaPods.

00:05:35.156 --> 00:05:37.030
Once that's open, I'll
drag the property list

00:05:37.030 --> 00:05:39.130
file downloaded from
the Firebase console

00:05:39.130 --> 00:05:40.152
into the project.

00:05:40.152 --> 00:05:41.860
And it'll go right in
that Runner folder.

00:05:45.290 --> 00:05:46.100
Cool.

00:05:46.100 --> 00:05:48.260
So that's the last
platform specific thing,

00:05:48.260 --> 00:05:50.930
which means I can spend the
rest of my time in Flutter code.

00:05:50.930 --> 00:05:53.510
Let me open this
project's pub spec file.

00:05:53.510 --> 00:05:56.340
This is the YAML file that lists
a Flutter project's metadata,

00:05:56.340 --> 00:05:57.800
including its dependencies.

00:05:57.800 --> 00:06:01.140
And I'm going to add the Cloud
Firestore plugin to the list.

00:06:01.140 --> 00:06:03.920
And once I've got that,
I'll do a packages get

00:06:03.920 --> 00:06:05.925
from the tools/flutter menu.

00:06:05.925 --> 00:06:07.550
That will pull
everything down and make

00:06:07.550 --> 00:06:09.800
sure I've got the Flutter
code and native dependencies

00:06:09.800 --> 00:06:11.810
in place to use Firestore.

00:06:11.810 --> 00:06:14.360
So with the Firebase config
files in place and the plugin

00:06:14.360 --> 00:06:17.880
imported, this app is ready
to start talking to Firestore.

00:06:17.880 --> 00:06:18.380
OK.

00:06:18.380 --> 00:06:20.750
With the Firestore collection
created and the plugin

00:06:20.750 --> 00:06:22.580
built into your
app, the next step

00:06:22.580 --> 00:06:25.490
is to code the app to use
live data from Firestore when

00:06:25.490 --> 00:06:26.822
building its widget tree.

00:06:26.822 --> 00:06:29.030
Now, we're starting with an
app that's been mocked up

00:06:29.030 --> 00:06:30.240
using hardcoded values.

00:06:30.240 --> 00:06:33.290
So most of the UI code
can stay just as it is.

00:06:33.290 --> 00:06:36.120
You just need to pass live
data into the build methods.

00:06:36.120 --> 00:06:37.590
Let me show you how it works.

00:06:37.590 --> 00:06:38.090
OK.

00:06:38.090 --> 00:06:41.180
So here's my app running on an
iOS simulator and an Android

00:06:41.180 --> 00:06:42.170
emulator.

00:06:42.170 --> 00:06:43.940
And it's all based
around this list

00:06:43.940 --> 00:06:46.730
view, which displays a row
for each potential band name.

00:06:46.730 --> 00:06:49.370
And there's a function called
build list item that builds out

00:06:49.370 --> 00:06:51.020
the widgets for each row.

00:06:51.020 --> 00:06:53.440
The first thing I need to
do is get the mock data out.

00:06:53.440 --> 00:06:59.240
So I'll scroll up and I'll
take out this mock class

00:06:59.240 --> 00:07:02.400
and the list of mock bad names.

00:07:02.400 --> 00:07:04.456
There we go.

00:07:04.456 --> 00:07:06.830
And I also need to import the
Dart code for the Firestore

00:07:06.830 --> 00:07:07.700
plugin.

00:07:07.700 --> 00:07:10.260
That's done at the
top of the file.

00:07:10.260 --> 00:07:14.505
So I'll just add an import
statement and Cloud Firestore.

00:07:14.505 --> 00:07:17.030
There we go.

00:07:17.030 --> 00:07:19.600
Let me come back down.

00:07:19.600 --> 00:07:22.360
I'd like for this list view
to display Firestore data.

00:07:22.360 --> 00:07:23.980
And I need it to
be rebuilt whenever

00:07:23.980 --> 00:07:25.259
there's a change to that data.

00:07:25.259 --> 00:07:27.550
So I'm going to wrap it in
a really handy widget called

00:07:27.550 --> 00:07:29.110
stream builder.

00:07:29.110 --> 00:07:31.570
The Firestore plugin
provides a snapshot stream

00:07:31.570 --> 00:07:34.270
for each collection, which
I'm going to use here.

00:07:34.270 --> 00:07:36.400
It's basically a running
stream of updates

00:07:36.400 --> 00:07:38.890
that emits a new value whenever
the data in the collection

00:07:38.890 --> 00:07:40.180
is changed.

00:07:40.180 --> 00:07:42.070
I'm subscribing the
stream builder to it.

00:07:42.070 --> 00:07:43.630
And so it'll
rebuild its children

00:07:43.630 --> 00:07:46.730
whenever there's an update.

00:07:46.730 --> 00:07:48.560
And rather than a
child, stream builder

00:07:48.560 --> 00:07:50.850
takes a builder function
as one of its properties.

00:07:50.850 --> 00:07:52.910
It will call this function
to rebuild its child

00:07:52.910 --> 00:07:56.250
widgets whenever the data
in the stream changes.

00:07:56.250 --> 00:07:58.230
Many of you watching
probably immediately

00:07:58.230 --> 00:08:00.400
recognize this as
reactive programming,

00:08:00.400 --> 00:08:03.317
which is a pattern Flutter
is designed to support.

00:08:03.317 --> 00:08:04.900
All right, now, when
I launch the app,

00:08:04.900 --> 00:08:07.110
Firebase won't have had
a chance to connect yet.

00:08:07.110 --> 00:08:09.720
So I'll get a snapshot
that doesn't have any data.

00:08:09.720 --> 00:08:12.570
In that case, I'll check for it
and just return a text widget

00:08:12.570 --> 00:08:15.120
that says loading.

00:08:15.120 --> 00:08:17.280
If the snapshot does
have data though,

00:08:17.280 --> 00:08:18.750
I'll use it to
return a list view,

00:08:18.750 --> 00:08:22.908
just like I was doing
before with that mock data.

00:08:22.908 --> 00:08:24.780
And format that up.

00:08:24.780 --> 00:08:26.300
Cool.

00:08:26.300 --> 00:08:29.290
I'll base the item count off the
number of Firestore documents

00:08:29.290 --> 00:08:30.970
in the Collection
Snapshot since I have

00:08:30.970 --> 00:08:33.729
one document for each name.

00:08:33.729 --> 00:08:35.520
And I'll need to change
the build list item

00:08:35.520 --> 00:08:38.549
function to take an individual
document snapshot instead

00:08:38.549 --> 00:08:40.558
of a mock data object.

00:08:40.558 --> 00:08:43.200
There we go.

00:08:43.200 --> 00:08:46.210
All right, let me scroll
up to build list item.

00:08:46.210 --> 00:08:48.990
And I'm going to replace this
mock with a document snapshot

00:08:48.990 --> 00:08:51.380
parameter.

00:08:51.380 --> 00:08:55.050
And then I can use that to
get the right band name.

00:08:55.050 --> 00:08:57.050
There we go.

00:08:57.050 --> 00:09:00.350
And I can get the
vote count, as well.

00:09:00.350 --> 00:09:01.850
All right, now,
when I run this code

00:09:01.850 --> 00:09:05.000
I get a bunch of
names and zeros,

00:09:05.000 --> 00:09:06.680
which is the right stuff.

00:09:06.680 --> 00:09:10.360
Plus, if I go back into
the Firestore console,

00:09:10.360 --> 00:09:12.310
I can now mess
with these numbers

00:09:12.310 --> 00:09:14.380
and see the app
react to the new data

00:09:14.380 --> 00:09:16.180
by automatically
updating the widgets.

00:09:16.180 --> 00:09:18.340
So this is definitely live data.

00:09:18.340 --> 00:09:18.937
OK.

00:09:18.937 --> 00:09:20.770
The only thing better
than reading live data

00:09:20.770 --> 00:09:21.520
is writing it.

00:09:21.520 --> 00:09:24.580
So the last step is to make
the list tiles on tap handler

00:09:24.580 --> 00:09:27.691
increase the vote count for
that particular band name.

00:09:27.691 --> 00:09:29.440
As you'll see, now
that everything else is

00:09:29.440 --> 00:09:31.356
set up and working, it's
actually pretty quick

00:09:31.356 --> 00:09:32.560
to implement.

00:09:32.560 --> 00:09:33.070
OK.

00:09:33.070 --> 00:09:34.890
So I'm back in build list item.

00:09:34.890 --> 00:09:37.540
And I need to put some code
in this on tap function

00:09:37.540 --> 00:09:40.260
that will increment
the vote count.

00:09:40.260 --> 00:09:41.960
So I'm going to use
my document snapshot

00:09:41.960 --> 00:09:44.690
to get a reference to the
live Firestore document

00:09:44.690 --> 00:09:48.050
and then update it with
an incremented count.

00:09:48.050 --> 00:09:50.372
This is a slightly
naive solution--

00:09:50.372 --> 00:09:52.080
and I'll get into that
more in a second--

00:09:52.080 --> 00:09:53.680
but it does work.

00:09:53.680 --> 00:09:56.860
So when I do a hot
reload now, I get this.

00:09:56.860 --> 00:09:59.140
And I could start tapping away.

00:09:59.140 --> 00:10:00.335
So I tap on the iOS side.

00:10:00.335 --> 00:10:02.530
And you can see the
Android side updates.

00:10:02.530 --> 00:10:05.800
Tap on Android, iOS update,
I could do this all day.

00:10:05.800 --> 00:10:06.820
Cool.

00:10:06.820 --> 00:10:09.150
Like I said though, this
isn't a robust solution.

00:10:09.150 --> 00:10:11.350
I'm incrementing data
that could be stale

00:10:11.350 --> 00:10:12.790
if some other
instance of the app

00:10:12.790 --> 00:10:15.310
has updated the
collection just before.

00:10:15.310 --> 00:10:17.950
So let's replace this
with a transaction

00:10:17.950 --> 00:10:20.170
and do it atomically.

00:10:20.170 --> 00:10:23.740
I could actually ask Firestore
to run a transaction for me.

00:10:23.740 --> 00:10:26.440
And then I'll give it a function
to execute within the scope

00:10:26.440 --> 00:10:29.080
of that transaction.

00:10:29.080 --> 00:10:31.120
And I'm going to mark
it async, because I'm

00:10:31.120 --> 00:10:33.140
going to need to
await on some things.

00:10:33.140 --> 00:10:34.630
So within this
function, which gets

00:10:34.630 --> 00:10:36.870
the transaction as
its only argument,

00:10:36.870 --> 00:10:39.910
I'll first get a fresh snapshot
of the data for the document,

00:10:39.910 --> 00:10:43.000
so a fresh copy of
that vote count.

00:10:43.000 --> 00:10:44.590
And then once
that's done, and I'm

00:10:44.590 --> 00:10:47.210
awaiting, because these
methods return futures,

00:10:47.210 --> 00:10:49.180
I'll do an update using
the document reference

00:10:49.180 --> 00:10:51.370
from the snapshot and an
incremented vote count

00:10:51.370 --> 00:10:53.630
that I know I can trust.

00:10:53.630 --> 00:10:54.770
There we go.

00:10:54.770 --> 00:10:57.670
All right, now,
when I do a reload,

00:10:57.670 --> 00:11:00.320
I get an app that mostly
looks and acts just like it

00:11:00.320 --> 00:11:03.830
did before, but it's free of
that potential race condition,

00:11:03.830 --> 00:11:05.570
which makes me very happy.

00:11:05.570 --> 00:11:07.160
All right, so in
just a few minutes,

00:11:07.160 --> 00:11:08.750
we've gone from
a mocked out demo

00:11:08.750 --> 00:11:12.130
to a real app that builds
for both iOS and Android

00:11:12.130 --> 00:11:14.330
with a Cloud Firestore
collection on the backend,

00:11:14.330 --> 00:11:16.340
keeping everybody
on the same page.

00:11:16.340 --> 00:11:17.840
You and your bandmates
have what you

00:11:17.840 --> 00:11:20.720
need to go out and find whether
Three Ferrets and A Banjo

00:11:20.720 --> 00:11:22.790
really is the name for you.

00:11:22.790 --> 00:11:23.680
That's it for today.

00:11:23.680 --> 00:11:25.596
But if you'd like to
learn more about Flutter,

00:11:25.596 --> 00:11:28.310
we've got links to guides, a
step-by-step code lab covering

00:11:28.310 --> 00:11:30.920
Firebase with Flutter, and
a bunch of other resources

00:11:30.920 --> 00:11:32.660
in the description
for this video.

00:11:32.660 --> 00:11:36.670
So check those out and head
to flutter.io to get started.

