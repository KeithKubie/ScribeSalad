WEBVTT
Kind: captions
Language: en

00:00:00.980 --> 00:00:03.020
Hi, I'm Addy Osmani.

00:00:03.020 --> 00:00:06.460
I'm a Senior Developer Relations
Engineer working on Polymer.

00:00:06.460 --> 00:00:08.660
Today we're going to take
a look at how to save you

00:00:08.660 --> 00:00:12.530
time building components for
the web in fewer lines of code.

00:00:12.530 --> 00:00:15.720
Before we dive in, let's
talk about web components.

00:00:15.720 --> 00:00:18.064
They're still pretty
new to a lot of people.

00:00:18.064 --> 00:00:20.480
So let's make sure we're all
on the same page before we go

00:00:20.480 --> 00:00:21.910
and build something.

00:00:21.910 --> 00:00:24.550
Web Components are an
emerging set of standards

00:00:24.550 --> 00:00:27.180
that allow you to build
new HTML elements.

00:00:27.180 --> 00:00:31.810
The APIs are Templates,
Custom Elements, Shadow DOM,

00:00:31.810 --> 00:00:33.900
and HTML Imports.

00:00:33.900 --> 00:00:36.960
Each one of these APIs
is useful individually.

00:00:36.960 --> 00:00:38.540
But when used
together, they enable

00:00:38.540 --> 00:00:41.740
developers to be
really productive.

00:00:41.740 --> 00:00:44.790
So Polymer helps developers
stay more productive.

00:00:44.790 --> 00:00:46.850
What do we mean by productivity?

00:00:46.850 --> 00:00:50.480
Well, take a component like
tabs, a pretty common place

00:00:50.480 --> 00:00:51.830
component on the web.

00:00:51.830 --> 00:00:55.080
You've probably used a tab
component at some point.

00:00:55.080 --> 00:00:58.800
Writing a tab component on
the web has changed over time.

00:00:58.800 --> 00:01:01.380
Years ago, we
started off in markup

00:01:01.380 --> 00:01:03.390
with a little bit of JavaScript.

00:01:03.390 --> 00:01:09.650
But since then, we've piled
more and more and more

00:01:09.650 --> 00:01:12.890
and even more of our
logic into JavaScript.

00:01:12.890 --> 00:01:15.980
Maybe this isn't
the best approach.

00:01:15.980 --> 00:01:19.170
Look at the suffering it causes.

00:01:19.170 --> 00:01:22.300
Perhaps there's a better
way of doing this.

00:01:22.300 --> 00:01:23.990
Using web components
with Polymer,

00:01:23.990 --> 00:01:26.810
we could rewrite those
nasty-looking widgets

00:01:26.810 --> 00:01:30.530
using a custom HTML element,
which is much more readable.

00:01:30.530 --> 00:01:34.330
So, here's what tabs would look
like if they were just HTML.

00:01:34.330 --> 00:01:37.100
It's much easier to
see what's going on.

00:01:37.100 --> 00:01:38.880
The code is declarative.

00:01:38.880 --> 00:01:40.020
It's legible.

00:01:40.020 --> 00:01:41.560
And it's descriptive.

00:01:41.560 --> 00:01:43.020
Simple, right?

00:01:43.020 --> 00:01:46.830
My-tabs is just an element,
something componentized

00:01:46.830 --> 00:01:50.080
that's readable,
semantic, and describes

00:01:50.080 --> 00:01:52.320
exactly what it offers.

00:01:52.320 --> 00:01:54.240
Components are
awesome because they

00:01:54.240 --> 00:01:56.250
force us to think
about constructing

00:01:56.250 --> 00:01:59.320
web apps as a composition
of components,

00:01:59.320 --> 00:02:02.300
rather than a mass of
tightly coupled pieces.

00:02:02.300 --> 00:02:06.690
We're no longer looking at
a soup of divs and script.

00:02:06.690 --> 00:02:09.449
Now, this is where
Polymer comes in.

00:02:09.449 --> 00:02:12.500
Polymer is a new type of
library for the web that

00:02:12.500 --> 00:02:14.670
allows you to easily
build applications

00:02:14.670 --> 00:02:16.560
based on Web Components.

00:02:16.560 --> 00:02:19.940
It includes a set of
polyfills for the native APIs.

00:02:19.940 --> 00:02:22.160
So you can start
using them today.

00:02:22.160 --> 00:02:25.000
What Polymer really
does is it provides

00:02:25.000 --> 00:02:28.310
a convenient and opinionated
layer on top of vanilla web

00:02:28.310 --> 00:02:31.520
components, with features
like Two-way data

00:02:31.520 --> 00:02:36.070
binding, declarative event
handlers, property observation,

00:02:36.070 --> 00:02:40.680
and touch gestures, to help you
quickly build powerful apps.

00:02:40.680 --> 00:02:41.360
Great.

00:02:41.360 --> 00:02:44.750
So let's build a tabs
element using Polymer.

00:02:44.750 --> 00:02:47.690
Let's first take a look
at our completed element.

00:02:47.690 --> 00:02:51.470
Our control is both beautiful
and quite functional.

00:02:51.470 --> 00:02:55.100
We begin building our first
element using seed-element,

00:02:55.100 --> 00:02:58.780
a boilerplate project providing
sample code and structure

00:02:58.780 --> 00:03:01.580
to help you get off
the ground quickly.

00:03:01.580 --> 00:03:06.170
The boilerplate is available on
GitHub at the following link.

00:03:06.170 --> 00:03:06.940
Great.

00:03:06.940 --> 00:03:09.300
Once you're on the page
for the repository,

00:03:09.300 --> 00:03:12.400
click the Download ZIP button
to download the boilerplate

00:03:12.400 --> 00:03:14.250
to your machine.

00:03:14.250 --> 00:03:17.330
Next, create a new
directory called development

00:03:17.330 --> 00:03:21.060
and a sub-directory
called my-tabs.

00:03:21.060 --> 00:03:26.120
Extract the contents of the zip
file to your my-tabs folder.

00:03:26.120 --> 00:03:28.840
Next, we'll rename the
files from the boilerplate,

00:03:28.840 --> 00:03:32.170
replacing seed-element
with my-tabs.

00:03:32.170 --> 00:03:33.900
It should look like this.

00:03:33.900 --> 00:03:38.560
So, my-tabs.css
and my-tabs.html.

00:03:38.560 --> 00:03:39.950
Great.

00:03:39.950 --> 00:03:42.010
Next, let's talk
about dependencies

00:03:42.010 --> 00:03:43.860
for creating our element.

00:03:43.860 --> 00:03:45.320
So, this is Bower.

00:03:45.320 --> 00:03:49.270
It's a package manager that can
be used to install and manage

00:03:49.270 --> 00:03:51.180
front end dependencies.

00:03:51.180 --> 00:03:53.570
Before you can begin
working on your element,

00:03:53.570 --> 00:03:55.653
you'll want to make sure
you have Bower installed.

00:03:57.660 --> 00:04:00.030
Follow the instructions
on the Bower site

00:04:00.030 --> 00:04:01.850
for installing the tool.

00:04:01.850 --> 00:04:03.630
If you have Node.js
installed, this

00:04:03.630 --> 00:04:06.956
can typically be done
by running this command.

00:04:06.956 --> 00:04:10.980
Bower will install all the
different modules we'll need.

00:04:10.980 --> 00:04:12.740
You can now install
the dependencies

00:04:12.740 --> 00:04:15.130
needed by untitled
element by running

00:04:15.130 --> 00:04:18.640
bower install from
the my-tabs directory.

00:04:18.640 --> 00:04:21.630
Navigating back a level, this
will add a few dependencies

00:04:21.630 --> 00:04:25.760
to your development directory,
Polymer, the web component

00:04:25.760 --> 00:04:30.590
polyfills, and one or two
others we'll be using for docs.

00:04:30.590 --> 00:04:34.050
You're now ready to begin
working on the my-tabs element.

00:04:34.050 --> 00:04:36.820
So, here's what the boilerplate
seed-element ships with,

00:04:36.820 --> 00:04:39.160
looks right out of the box.

00:04:39.160 --> 00:04:42.750
For my-tabs, we won't
directly be using JavaScript.

00:04:42.750 --> 00:04:46.350
So you can add the noscript
attribute to our element.

00:04:46.350 --> 00:04:48.500
This informs Polymer
that we won't

00:04:48.500 --> 00:04:52.440
want to interact with JavaScript
for this particular element.

00:04:52.440 --> 00:04:54.290
Now, a tab element
can actually be

00:04:54.290 --> 00:04:58.240
built using a number of
existing Polymer elements.

00:04:58.240 --> 00:05:00.140
And this is pretty powerful.

00:05:00.140 --> 00:05:02.350
You can compose whole
elements and apps

00:05:02.350 --> 00:05:04.960
from elements written
by other people.

00:05:04.960 --> 00:05:06.900
You can find our
existing elements

00:05:06.900 --> 00:05:11.310
over on the Polymer site
at the following address.

00:05:11.310 --> 00:05:13.980
For example, core-selector
is an element

00:05:13.980 --> 00:05:17.190
that manages a list of
items that can be selected.

00:05:17.190 --> 00:05:20.930
They can be divs, spans,
or something else.

00:05:20.930 --> 00:05:23.300
Here's a quick example
of it in action.

00:05:23.300 --> 00:05:26.670
You can select items in a list
and trigger an active state

00:05:26.670 --> 00:05:27.590
on them.

00:05:27.590 --> 00:05:29.350
Magical.

00:05:29.350 --> 00:05:31.820
So you can install
this element for use

00:05:31.820 --> 00:05:35.110
in my-tabs using
the following line.

00:05:35.110 --> 00:05:38.640
It'll then go and fetch
your dependency from Bower.

00:05:38.640 --> 00:05:41.400
Once installed, you can
reference this new import

00:05:41.400 --> 00:05:42.790
inside of my-tabs.

00:05:42.790 --> 00:05:46.660
So core-selector can now
be used in this page.

00:05:46.660 --> 00:05:49.640
Next inside of your element
definition at the line,

00:05:49.640 --> 00:05:52.330
extends="core-selector".

00:05:52.330 --> 00:05:54.000
This tells Polymer
that you'd like

00:05:54.000 --> 00:05:56.950
to extend the functionality
of the selector element.

00:05:56.950 --> 00:06:00.310
This lets us get its
functionality for free.

00:06:00.310 --> 00:06:01.340
Quick note.

00:06:01.340 --> 00:06:03.240
Styles defined
within your element

00:06:03.240 --> 00:06:07.010
get scoped, meaning they don't
leak into the rest of the page.

00:06:07.010 --> 00:06:10.440
Shadow DOM lets us let
in as much or as little

00:06:10.440 --> 00:06:12.830
of the outside
world as we choose.

00:06:12.830 --> 00:06:14.670
In this case, our
styles are scoped

00:06:14.670 --> 00:06:17.740
within the confines of
the my-tabs element.

00:06:17.740 --> 00:06:21.320
We can use this fact to apply
a little bit of Flexbox magic

00:06:21.320 --> 00:06:23.160
inside our element.

00:06:23.160 --> 00:06:27.570
Now we're going to add in one
more import called layout.html,

00:06:27.570 --> 00:06:29.290
which is basic and
will allow our element

00:06:29.290 --> 00:06:31.160
to be a Flex container.

00:06:31.160 --> 00:06:33.860
A Flex container is
basically an element

00:06:33.860 --> 00:06:36.970
that might contain
children, in our case, tabs,

00:06:36.970 --> 00:06:40.120
that we'd like to make flexible.

00:06:40.120 --> 00:06:41.930
One thing the Polymer
team believe in,

00:06:41.930 --> 00:06:44.500
in this brave new world
of Web Components,

00:06:44.500 --> 00:06:47.300
is that everything
is an element.

00:06:47.300 --> 00:06:49.980
That's one reason we're
implementing these concepts

00:06:49.980 --> 00:06:51.120
as elements.

00:06:51.120 --> 00:06:53.930
It's pretty powerful when you're
just configuring components

00:06:53.930 --> 00:06:55.810
using attributes.

00:06:55.810 --> 00:06:58.290
So going back to
my-tabs, you want

00:06:58.290 --> 00:07:00.370
to enable a way
to render children

00:07:00.370 --> 00:07:04.490
of your my-tabs element
to define individual tabs.

00:07:04.490 --> 00:07:08.970
So working with these
guys, the child elements.

00:07:08.970 --> 00:07:11.900
Now this is achieved by
adding in the shadow tag

00:07:11.900 --> 00:07:14.110
inside of your template.

00:07:14.110 --> 00:07:18.210
These represent something called
a Shadow DOM insertion point.

00:07:18.210 --> 00:07:21.340
Now Shadow DOM refers to
the ability of the browser

00:07:21.340 --> 00:07:23.640
to include a sub-tree
of DOM elements

00:07:23.640 --> 00:07:25.350
into the rendering
of a document,

00:07:25.350 --> 00:07:28.500
but not into the main
document DOM tree.

00:07:28.500 --> 00:07:32.560
This provides CSS and
DOM encapsulation.

00:07:32.560 --> 00:07:33.830
Fantastic.

00:07:33.830 --> 00:07:37.210
So now we have the final version
of the code for our custom tab

00:07:37.210 --> 00:07:38.550
element.

00:07:38.550 --> 00:07:40.690
Before we can use
our new tab element,

00:07:40.690 --> 00:07:45.030
you'll want to edit demo.html
to add in the relevant markup.

00:07:45.030 --> 00:07:46.860
So let's highlight them.

00:07:46.860 --> 00:07:49.950
This is what it looks
like with my-tabs in place

00:07:49.950 --> 00:07:53.820
before we've added any
actual tabs to our element.

00:07:53.820 --> 00:07:56.770
Check that any references
to seed-element now point

00:07:56.770 --> 00:08:00.110
to my-tabs.html instead.

00:08:00.110 --> 00:08:03.970
Next, we add in the markup for
three new tabs inside our tabs

00:08:03.970 --> 00:08:04.840
element.

00:08:04.840 --> 00:08:07.050
Here we're just using
some simple spans.

00:08:07.050 --> 00:08:10.550
So each span
represents a new tab.

00:08:10.550 --> 00:08:11.240
Great.

00:08:11.240 --> 00:08:13.500
So let's see what we've built.

00:08:13.500 --> 00:08:16.390
Go and run a new preview
server at the command line

00:08:16.390 --> 00:08:18.740
to preview your
new custom element.

00:08:18.740 --> 00:08:23.170
And boom, there we have
the my-tabs element.

00:08:23.170 --> 00:08:25.710
It's beautiful and
it's functional.

00:08:25.710 --> 00:08:28.430
You can now reuse this
element across pages

00:08:28.430 --> 00:08:31.540
with encapsulation
and a clean markup.

00:08:31.540 --> 00:08:35.090
I've never seen anything
that looks so elegant.

00:08:35.090 --> 00:08:37.880
Now that we've created
our my-tabs element,

00:08:37.880 --> 00:08:40.049
let's deploy it to
GitHub pages so you

00:08:40.049 --> 00:08:42.120
can share it with your friends.

00:08:42.120 --> 00:08:44.120
Elements can be
shared, but we'll

00:08:44.120 --> 00:08:48.890
be working with two branches,
master and GitHub pages.

00:08:48.890 --> 00:08:51.770
We want to ensure that
our master branch contains

00:08:51.770 --> 00:08:53.850
the bare minimum
of code that needs

00:08:53.850 --> 00:08:57.400
to be consumed by
other apps or elements.

00:08:57.400 --> 00:09:00.920
Now your GitHub pages branch
should contain a landing page

00:09:00.920 --> 00:09:05.710
and checked independencies,
demos, and documentation.

00:09:05.710 --> 00:09:10.110
First, create a new repository
on GitHub for your element.

00:09:10.110 --> 00:09:14.540
And push the source for
my-tabs to this repository.

00:09:14.540 --> 00:09:16.800
Navigate back to your
development directory

00:09:16.800 --> 00:09:18.600
from the terminal.

00:09:18.600 --> 00:09:23.390
And create a new temporary
directory and CD into it.

00:09:23.390 --> 00:09:27.280
Next, grab a copy of Polymer's
Official Helper Tools.

00:09:27.280 --> 00:09:30.690
You can git clone them using
the following one liner.

00:09:30.690 --> 00:09:31.640
Great.

00:09:31.640 --> 00:09:34.680
You should now have the
tools on your system.

00:09:34.680 --> 00:09:38.500
Take note of where
they've been cloned to.

00:09:38.500 --> 00:09:44.030
Finally, run the gp.sh script
found in the tools directory,

00:09:44.030 --> 00:09:48.550
passing in your GitHub username
and the name of your element.

00:09:48.550 --> 00:09:50.880
This will create
a gh-pages branch

00:09:50.880 --> 00:09:53.590
on GitHub containing
a landing page

00:09:53.590 --> 00:09:57.380
for your element and a
link to a demo for it.

00:09:57.380 --> 00:10:00.360
It'll also include all of
the dependencies needed

00:10:00.360 --> 00:10:03.840
to preview your element live.

00:10:03.840 --> 00:10:04.890
Great.

00:10:04.890 --> 00:10:08.160
So this is where my
landing page is now live.

00:10:08.160 --> 00:10:10.060
And if you've been
following along,

00:10:10.060 --> 00:10:12.400
yours should be live on
a very similar address

00:10:12.400 --> 00:10:16.220
with your username
instead of mine.

00:10:16.220 --> 00:10:18.490
Let's take a closer
look at the page.

00:10:18.490 --> 00:10:19.615
It's pretty.

00:10:19.615 --> 00:10:22.970
Our landing page can contain
examples and a summary

00:10:22.970 --> 00:10:25.850
of the attributes and events
supported by our element.

00:10:25.850 --> 00:10:28.800
Now these are all straight
from comments in our code.

00:10:28.800 --> 00:10:32.020
And if your friend's click the
demo button at the very top,

00:10:32.020 --> 00:10:34.390
it'll take them straight
to your demo page.

00:10:34.390 --> 00:10:35.860
And there we go.

00:10:35.860 --> 00:10:36.750
Tabs.

00:10:36.750 --> 00:10:40.190
Our element is both beautiful,
functional, and awesome.

00:10:40.190 --> 00:10:43.820
Hooray, I feel like
a real engineer now.

00:10:43.820 --> 00:10:47.370
Web Components with Polymer
present an incredibly exciting

00:10:47.370 --> 00:10:49.720
step forward for re-usability.

00:10:49.720 --> 00:10:51.810
And there's a whole
world of elements

00:10:51.810 --> 00:10:54.490
out there just
waiting to be built.

00:10:54.490 --> 00:10:57.930
To get started, go check
out polymer-project.org .

00:10:57.930 --> 00:11:01.120
Now go out and help
componentize the web today.

00:11:01.120 --> 00:11:02.710
Thank you.

