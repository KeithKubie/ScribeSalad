WEBVTT
Kind: captions
Language: en

00:00:05.880 --> 00:00:06.070
CHET HAASE: Hi.

00:00:06.070 --> 00:00:08.610
I'm Chet Haase from the Android
Development Team.

00:00:08.610 --> 00:00:10.060
I work on graphics
and animations.

00:00:10.060 --> 00:00:12.200
And today, I wanted to talk
about animations.

00:00:12.200 --> 00:00:15.170
Specifically, I want to talk
about activity animations.

00:00:15.170 --> 00:00:17.860
So typically, when an activity
launches, or even a

00:00:17.860 --> 00:00:19.620
subactivity, you get
standard animations

00:00:19.620 --> 00:00:20.870
from the Window Manager.

00:00:20.870 --> 00:00:23.140
And you can choose the kind of
animation that you want.

00:00:23.140 --> 00:00:24.640
You can load and resource
for this.

00:00:24.640 --> 00:00:28.100
And as of Jelly Bean, we also
allow you to specify thumbnail

00:00:28.100 --> 00:00:31.520
that you can scale from, and
potentially cross fade from.

00:00:31.520 --> 00:00:32.310
But that's about it.

00:00:32.310 --> 00:00:34.390
There's not a lot of
customization possible with

00:00:34.390 --> 00:00:35.230
window animations.

00:00:35.230 --> 00:00:37.480
What if you want to do something
really custom?

00:00:37.480 --> 00:00:39.360
So we're going to see how
to do that today.

00:00:39.360 --> 00:00:42.990
So if we run this little demo
called Activity Animations,

00:00:42.990 --> 00:00:45.820
you see as we have the main
activity with these gray scale

00:00:45.820 --> 00:00:47.920
thumbnails, and we click on one
of those thumbnails, and

00:00:47.920 --> 00:00:50.260
we launch into the subactivity,
it shows a

00:00:50.260 --> 00:00:52.570
detailed view of the picture,
and then the text that goes

00:00:52.570 --> 00:00:53.880
along with the picture.

00:00:53.880 --> 00:00:55.630
So again, click on
the thumbnail.

00:00:55.630 --> 00:00:56.980
It colorizes the picture.

00:00:56.980 --> 00:00:59.170
It zooms up into the
full scale view.

00:00:59.170 --> 00:01:01.460
And we see the text slide out
from underneath the picture.

00:01:01.460 --> 00:01:02.050
Kind of nice.

00:01:02.050 --> 00:01:04.280
We can slow down the animation
so we can see it a little bit

00:01:04.280 --> 00:01:04.989
more in detail.

00:01:04.989 --> 00:01:06.920
And you see there's also a drop
shadow in there, giving

00:01:06.920 --> 00:01:09.620
you the effect of the picture
really popping out toward the

00:01:09.620 --> 00:01:12.910
viewer, and then popping back
when the activity goes back to

00:01:12.910 --> 00:01:14.020
the main activity.

00:01:14.020 --> 00:01:15.400
So how do we do that?

00:01:15.400 --> 00:01:19.000
So the main idea behind this
is that we disable window

00:01:19.000 --> 00:01:21.210
animations, because we don't
actually want them to do

00:01:21.210 --> 00:01:23.010
anything that they're
used to doing.

00:01:23.010 --> 00:01:26.530
Instead, we launch the
subactivity immediately, or we

00:01:26.530 --> 00:01:29.510
launch the activity that we're
going back to immediately.

00:01:29.510 --> 00:01:32.060
And then we run custom
animations, using the normal

00:01:32.060 --> 00:01:33.700
property animation system.

00:01:33.700 --> 00:01:36.130
And once we're into the
activity, with property

00:01:36.130 --> 00:01:37.830
animations, you can do
anything you want.

00:01:37.830 --> 00:01:41.150
So again, we disable
window animations.

00:01:41.150 --> 00:01:42.150
We get into the activity.

00:01:42.150 --> 00:01:44.440
And then in the activity, we
can do whatever we want.

00:01:44.440 --> 00:01:48.150
And the trick with handling
these interactivity things,

00:01:48.150 --> 00:01:50.510
like launching from a thumbnail
from one into to a

00:01:50.510 --> 00:01:54.000
full scale view of the other, is
to pass the information in

00:01:54.000 --> 00:01:56.330
a bundle, so that we have the
appropriate information that

00:01:56.330 --> 00:01:59.770
we can key off of to get the
effect that we're looking for.

00:01:59.770 --> 00:02:04.090
So first of all, let's take
a look at the application

00:02:04.090 --> 00:02:05.130
manifest here.

00:02:05.130 --> 00:02:08.169
And we can see that we've set up
a style of our subactivity

00:02:08.169 --> 00:02:09.160
of transparent.

00:02:09.160 --> 00:02:10.554
And this is something
that I've defined in

00:02:10.554 --> 00:02:12.220
the styles.xml file.

00:02:12.220 --> 00:02:14.480
So you have the seam
transparent, where we say the

00:02:14.480 --> 00:02:16.590
window background
is transparent.

00:02:16.590 --> 00:02:19.390
This means that when the
subactivity launches, it's not

00:02:19.390 --> 00:02:22.140
actually going to paint a
default color over the

00:02:22.140 --> 00:02:23.670
activity that we're launching
from, which is the

00:02:23.670 --> 00:02:24.660
effect that we want.

00:02:24.660 --> 00:02:27.120
We want the activity launch
immediately, but we don't want

00:02:27.120 --> 00:02:31.260
that obvious to the user by
seeing some opaque color drawn

00:02:31.260 --> 00:02:32.460
in front of the previous
activity.

00:02:32.460 --> 00:02:34.370
Instead, we want it to
launch transparently,

00:02:34.370 --> 00:02:35.880
and then do its thing.

00:02:35.880 --> 00:02:39.210
Now one important caveat about
transparent activities is,

00:02:39.210 --> 00:02:41.520
this means that the window
manager in the system is going

00:02:41.520 --> 00:02:43.720
to be drawing the other
activity behind there.

00:02:43.720 --> 00:02:45.970
Every time the window is drawn
on the screen, it's going to

00:02:45.970 --> 00:02:48.230
have to draw the activity
behind it.

00:02:48.230 --> 00:02:50.800
This could potentially be a
performance issue, so it's not

00:02:50.800 --> 00:02:53.160
something you want to do
in every situation.

00:02:53.160 --> 00:02:56.560
And if it's a really complex
set of views that you're

00:02:56.560 --> 00:02:58.770
dealing with there, maybe it's
not something you want to do.

00:02:58.770 --> 00:03:01.430
But for this sort of transient
behavior of going from one

00:03:01.430 --> 00:03:04.770
activity to the other, it's
a pretty neat effect.

00:03:04.770 --> 00:03:07.420
But you just need to be able
to determine the correct

00:03:07.420 --> 00:03:09.820
trade-off for your
own application.

00:03:09.820 --> 00:03:13.020
Anyway, let's take a look
at the actual code.

00:03:13.020 --> 00:03:14.870
So there's a few things
going on here.

00:03:14.870 --> 00:03:17.290
One is that we have this main
activity called Activity

00:03:17.290 --> 00:03:18.340
Animations.

00:03:18.340 --> 00:03:21.380
We set up a
ColorMatrixColorfilter,

00:03:21.380 --> 00:03:24.690
arguably the longest class name
in the Android framework.

00:03:24.690 --> 00:03:26.640
And this is to create the
grayscale effect on those

00:03:26.640 --> 00:03:26.970
thumbnails.

00:03:26.970 --> 00:03:28.620
So we're loading these
full scale images.

00:03:28.620 --> 00:03:29.860
And we're creating thumbnails
out of them.

00:03:29.860 --> 00:03:31.760
And then we're setting a filter,
which will make them

00:03:31.760 --> 00:03:33.990
appear as grayscale in
the thumbnail view.

00:03:33.990 --> 00:03:35.470
And then we're going to launch
from the thumbnail into the

00:03:35.470 --> 00:03:36.560
colorized view.

00:03:36.560 --> 00:03:39.110
So we're going to set up
grayscale filters on those.

00:03:39.110 --> 00:03:40.320
We're going to set
up our layout.

00:03:40.320 --> 00:03:42.290
We're going to load in
the pictures and

00:03:42.290 --> 00:03:43.170
add them to the layout.

00:03:43.170 --> 00:03:45.040
Nothing really amazing
going on here.

00:03:45.040 --> 00:03:48.060
And then we're going to set a
click listener so that we know

00:03:48.060 --> 00:03:50.990
whenever we click on a
particular thumbnail, then our

00:03:50.990 --> 00:03:52.840
listener is going to kick
in, and will do

00:03:52.840 --> 00:03:54.340
the appropriate thing.

00:03:54.340 --> 00:04:00.070
So that happens down here,
OnClickListener.

00:04:00.070 --> 00:04:02.240
So here, we're going to package
up the information

00:04:02.240 --> 00:04:05.220
that we need to pass to the
subactivities so that it knows

00:04:05.220 --> 00:04:08.550
where to launch its picture
from, where to zoom in from,

00:04:08.550 --> 00:04:11.460
and what picture to zoom in
from so that it can do the

00:04:11.460 --> 00:04:15.330
correct animation into the full
view of that picture.

00:04:15.330 --> 00:04:17.660
So here, we figure out where
the thumbnail is on the

00:04:17.660 --> 00:04:21.350
screen, how large it is, and
also the orientation.

00:04:21.350 --> 00:04:22.980
I'll talk about this
a little bit later.

00:04:22.980 --> 00:04:24.450
And then the resource
ID of the picture.

00:04:24.450 --> 00:04:26.695
So we're going to give all
the information that the

00:04:26.695 --> 00:04:31.470
subactivity needs to know where
and what size to zoom in

00:04:31.470 --> 00:04:34.430
from, as well as what picture
to actually zoom into.

00:04:34.430 --> 00:04:36.610
And then, the text description
as well that's associated with

00:04:36.610 --> 00:04:37.240
the picture.

00:04:37.240 --> 00:04:39.140
We put all of this
into the extras.

00:04:39.140 --> 00:04:42.250
So we're going to launch this
subactivity with this extra

00:04:42.250 --> 00:04:43.210
information.

00:04:43.210 --> 00:04:45.390
And then the subactivity
can extract it.

00:04:45.390 --> 00:04:46.630
Now here's an important point.

00:04:46.630 --> 00:04:48.960
If you're doing this technique,
you want to

00:04:48.960 --> 00:04:50.630
override pending transitions
after

00:04:50.630 --> 00:04:51.950
you've started the activity.

00:04:51.950 --> 00:04:54.220
And this will tell the window
manager to back off and not

00:04:54.220 --> 00:04:56.760
run the standard window
animations, on top of what

00:04:56.760 --> 00:04:58.910
you're already trying to do
in your custom activity

00:04:58.910 --> 00:05:00.100
animations.

00:05:00.100 --> 00:05:00.300
OK.

00:05:00.300 --> 00:05:01.290
So that's all.

00:05:01.290 --> 00:05:02.810
Not much going in the
main activity.

00:05:02.810 --> 00:05:05.300
All the interesting bit
is in the subactivity.

00:05:05.300 --> 00:05:06.510
So let's take a look at that.

00:05:06.510 --> 00:05:11.440
In PictureDetailsActivity file,
we have various fields

00:05:11.440 --> 00:05:11.940
that we need.

00:05:11.940 --> 00:05:14.010
We have a couple custom
interpolators that we've

00:05:14.010 --> 00:05:15.960
defined there for
the animations.

00:05:15.960 --> 00:05:17.640
And then we get down
here into OnCreate.

00:05:17.640 --> 00:05:19.840
This is going to be called when
the activity launches.

00:05:19.840 --> 00:05:21.900
And at that point, we can
extract the bundle, which is

00:05:21.900 --> 00:05:24.970
the information that we
packaged up about the

00:05:24.970 --> 00:05:26.970
thumbnail we're actually
launching from.

00:05:26.970 --> 00:05:30.110
So from that, we get all the
information about location,

00:05:30.110 --> 00:05:33.250
size, the picture, the text
description, all that stuff.

00:05:33.250 --> 00:05:36.530
And then we can actually
run our animations.

00:05:36.530 --> 00:05:39.080
So we come down here.

00:05:39.080 --> 00:05:40.640
This is an important
point here.

00:05:40.640 --> 00:05:43.520
If the savedInstanceState is
null, then we want to go ahead

00:05:43.520 --> 00:05:44.550
and run the information.

00:05:44.550 --> 00:05:47.070
If not, then we're actually
launching this subactivity

00:05:47.070 --> 00:05:50.620
from something like returning
to it from the launch, or

00:05:50.620 --> 00:05:53.000
maybe somebody launches your
activity from [INAUDIBLE].

00:05:53.000 --> 00:05:55.540
We don't want to do the custom
animation in that case.

00:05:55.540 --> 00:05:57.350
We just want to launch the
activity with the standard

00:05:57.350 --> 00:05:58.370
information.

00:05:58.370 --> 00:06:00.550
But if the savedInstanceState
is null, then we're going to

00:06:00.550 --> 00:06:01.800
launch from the main activity.

00:06:01.800 --> 00:06:04.130
So let's go ahead and
run the animation.

00:06:04.130 --> 00:06:04.370
OK.

00:06:04.370 --> 00:06:06.630
So here's a technique that I use
in a lot of my animation

00:06:06.630 --> 00:06:09.490
demos, which is an
OnPreDrawListener.

00:06:09.490 --> 00:06:12.290
This gets called right before
we're about to draw things,

00:06:12.290 --> 00:06:15.590
which is an excellent time to
track information that's going

00:06:15.590 --> 00:06:17.800
to be set up prior to
that first draw.

00:06:17.800 --> 00:06:21.410
In particular, we want to know
where everything's going to

00:06:21.410 --> 00:06:23.080
be, like our main
picture view.

00:06:23.080 --> 00:06:24.370
Everything's going to
be set up to be

00:06:24.370 --> 00:06:25.810
rendered in the main activity.

00:06:25.810 --> 00:06:28.290
And this is the time for us to
kick in and say, OK, now that

00:06:28.290 --> 00:06:30.750
we know where everything is
going to be, now we can run

00:06:30.750 --> 00:06:34.010
our animation to animate from
where it was in the previous

00:06:34.010 --> 00:06:35.950
activity into this
subactivity.

00:06:35.950 --> 00:06:37.300
So we handle the OnPreDraw.

00:06:37.300 --> 00:06:38.840
We remove the Listener, because
we don't want to

00:06:38.840 --> 00:06:39.900
listen to it after this.

00:06:39.900 --> 00:06:41.480
That would be silly.

00:06:41.480 --> 00:06:44.550
Then we get the location on the
screen of the picture that

00:06:44.550 --> 00:06:45.090
we're going to.

00:06:45.090 --> 00:06:46.330
We also get the size.

00:06:46.330 --> 00:06:48.530
And then we create
scale factors.

00:06:48.530 --> 00:06:50.180
And this basically, the
technique that we're going to

00:06:50.180 --> 00:06:53.200
use in the animation is we're
going to prescale down to the

00:06:53.200 --> 00:06:55.355
size of the thumbnail that we're
coming from, , and then

00:06:55.355 --> 00:06:57.360
we're going to scale
up to one.

00:06:57.360 --> 00:06:57.430
Right.

00:06:57.430 --> 00:06:59.220
So we have the full
size of the image.

00:06:59.220 --> 00:07:01.840
We're going to prescale it down
to some fractional size,

00:07:01.840 --> 00:07:03.350
and then scale it up
to one until it

00:07:03.350 --> 00:07:04.510
reaches the full size.

00:07:04.510 --> 00:07:06.910
And then, we run the
EnterAnimation.

00:07:06.910 --> 00:07:08.040
Here's another important
point.

00:07:08.040 --> 00:07:10.170
If you override
OnPreDrawListener, listener

00:07:10.170 --> 00:07:14.080
return true, by default, IDEs
like to have you return

00:07:14.080 --> 00:07:15.340
faults, which is silly.

00:07:15.340 --> 00:07:16.760
Because that basically disables

00:07:16.760 --> 00:07:17.770
rendering on this frame.

00:07:17.770 --> 00:07:19.230
We wanted to go ahead
and draw the first

00:07:19.230 --> 00:07:20.730
frame, so return true.

00:07:20.730 --> 00:07:22.390
It's the right thing to do.

00:07:22.390 --> 00:07:24.200
Then we run the EntireAnimation.

00:07:24.200 --> 00:07:27.610
We calculate a duration based on
whether we've enabled that

00:07:27.610 --> 00:07:29.850
scale animation property
in the menu.

00:07:29.850 --> 00:07:30.760
No big deal there.

00:07:30.760 --> 00:07:33.070
We set up some initial values.

00:07:33.070 --> 00:07:35.040
So, the pivot point that
we're scaling around.

00:07:35.040 --> 00:07:38.180
The scale factor that we're
going to scale down to before

00:07:38.180 --> 00:07:39.700
we start the animation.

00:07:39.700 --> 00:07:41.040
And then, the translation
x and y.

00:07:41.040 --> 00:07:43.510
So we're going to scale from a
particular size and from a

00:07:43.510 --> 00:07:45.310
particular location.

00:07:45.310 --> 00:07:47.390
We also tell the TextView, which
is going to hold the

00:07:47.390 --> 00:07:50.450
text description for the
picture, to alpha of 0.

00:07:50.450 --> 00:07:51.870
So it's going to be initially
transparent, then we're going

00:07:51.870 --> 00:07:53.060
to fade it in.

00:07:53.060 --> 00:07:54.410
Here's the main animation.

00:07:54.410 --> 00:07:56.090
So for the ImageView.

00:07:56.090 --> 00:07:58.150
We're going to run a
ViewPropertyAnimator at that

00:07:58.150 --> 00:07:59.860
duration we calculated
earlier.

00:07:59.860 --> 00:08:02.400
We're going to scale
x and y into one.

00:08:02.400 --> 00:08:03.710
So it's going to be the
full size of the

00:08:03.710 --> 00:08:04.830
picture when it's done.

00:08:04.830 --> 00:08:08.090
Translation x and translation
y are going to go to 0 from

00:08:08.090 --> 00:08:10.770
that initial location they had
from the thumbnail that we're

00:08:10.770 --> 00:08:11.740
launching from.

00:08:11.740 --> 00:08:13.680
We're going to have a Decelerate
Interpolater, which

00:08:13.680 --> 00:08:15.670
means it's going to start fast,
and then slow down and

00:08:15.670 --> 00:08:16.720
lock into place.

00:08:16.720 --> 00:08:18.950
And then when the animation
ends, we're going to run the

00:08:18.950 --> 00:08:22.680
following runable, which is
going to go ahead and start

00:08:22.680 --> 00:08:24.350
the TextView animation.

00:08:24.350 --> 00:08:27.250
So we're going to set the
translation y to be basically

00:08:27.250 --> 00:08:28.450
up underneath the picture.

00:08:28.450 --> 00:08:30.260
And then we're going to
animate it down to

00:08:30.260 --> 00:08:31.560
translation y of 0.

00:08:31.560 --> 00:08:33.690
And we're going to fade it in at
the same time, again, using

00:08:33.690 --> 00:08:36.760
a ViewPropertyAnimator on
the TextView itself.

00:08:36.760 --> 00:08:39.970
In parallel, we're going to fade
in a black background.

00:08:39.970 --> 00:08:43.289
So if we see the demo again, you
can see that we're fading

00:08:43.289 --> 00:08:46.540
in the background to this opaque
black background behind

00:08:46.540 --> 00:08:47.880
the picture once we're
finally done.

00:08:47.880 --> 00:08:49.610
So that's going to happen
in parallel.

00:08:49.610 --> 00:08:52.770
So we're going to animate the
alpha value of this background

00:08:52.770 --> 00:08:54.930
that we've already defined.

00:08:54.930 --> 00:08:57.970
We're also going to run
a colorizer animation.

00:08:57.970 --> 00:08:59.400
Now this is not a standard
property.

00:08:59.400 --> 00:09:02.260
Instead, it's a property that
I've defined on this class

00:09:02.260 --> 00:09:03.200
called saturation.

00:09:03.200 --> 00:09:06.530
So I just created a property
setter setSaturation, which

00:09:06.530 --> 00:09:08.070
we'll see down below.

00:09:08.070 --> 00:09:09.650
And we're going to run
that from 0 to 1.

00:09:09.650 --> 00:09:12.310
And as that runs, we're going
to change the color filter,

00:09:12.310 --> 00:09:14.290
which is going to color as that
image from the initial

00:09:14.290 --> 00:09:17.840
grayscale up into the full color
version of the picture.

00:09:17.840 --> 00:09:19.730
And we're also going to
animate a drop shadow.

00:09:19.730 --> 00:09:22.250
We'll see how the rendering
of this works in a minute.

00:09:22.250 --> 00:09:25.510
But it's enough now to know that
we're going to animate

00:09:25.510 --> 00:09:27.900
the shadow depth from 0, which
is basically the shadow's

00:09:27.900 --> 00:09:31.710
going to be exactly mapped
behind the image to some

00:09:31.710 --> 00:09:35.130
offset value, which we'll then
use to calculate alpha, as

00:09:35.130 --> 00:09:37.090
well as offsets for
the shadow.

00:09:37.090 --> 00:09:40.020
And the idea here is that we
want to start with the

00:09:40.020 --> 00:09:41.900
thumbnail starting
on the plane that

00:09:41.900 --> 00:09:42.920
we're projecting onto.

00:09:42.920 --> 00:09:45.820
And then as the thumbnail pops
out, we want the shadow to

00:09:45.820 --> 00:09:48.740
help give the illusion that the
image is actually popping

00:09:48.740 --> 00:09:50.930
out toward the user.

00:09:50.930 --> 00:09:52.630
And then we start
the animation.

00:09:52.630 --> 00:09:55.070
So we also have a
runExitAnimation.

00:09:55.070 --> 00:09:57.330
It's basically the same
animations in reverse, so I

00:09:57.330 --> 00:09:58.690
won't go through
the code there.

00:09:58.690 --> 00:09:59.800
But there's some other
interesting

00:09:59.800 --> 00:10:02.040
bits to look at here.

00:10:02.040 --> 00:10:04.070
One is the saturation.

00:10:04.070 --> 00:10:06.140
This is the property setter that
I defined that's going to

00:10:06.140 --> 00:10:08.090
be called by the Object
Animator.

00:10:08.090 --> 00:10:09.380
We're going to set
the saturation

00:10:09.380 --> 00:10:10.210
on the color matrix.

00:10:10.210 --> 00:10:12.110
And then we're going to define
a new filter and

00:10:12.110 --> 00:10:13.030
set it on the drawable.

00:10:13.030 --> 00:10:13.930
This is an important point.

00:10:13.930 --> 00:10:17.445
We can't animate the filter
itself, because it's not a

00:10:17.445 --> 00:10:18.280
mutable object.

00:10:18.280 --> 00:10:20.480
Instead, we need to create
a new filter with this

00:10:20.480 --> 00:10:23.650
saturation value, and then
set that on the drawable.

00:10:23.650 --> 00:10:26.170
And that's how we animate
the colorization of

00:10:26.170 --> 00:10:27.630
the drawable itself.

00:10:27.630 --> 00:10:30.130
Two more points here is
onBackPressed, we override

00:10:30.130 --> 00:10:32.440
this, so that in the Back button
is pressed, we'd like

00:10:32.440 --> 00:10:34.230
to go back into the
main activity.

00:10:34.230 --> 00:10:35.780
But we want to animate that.

00:10:35.780 --> 00:10:38.410
And to do that, we need to run
the animation and then finish

00:10:38.410 --> 00:10:39.010
the activity.

00:10:39.010 --> 00:10:42.270
By default, onBackPress simply
runs Finish immediately.

00:10:42.270 --> 00:10:45.110
What we want to do is run our
animation first, which is

00:10:45.110 --> 00:10:48.600
going to happen in that method
I skipped before.

00:10:48.600 --> 00:10:50.250
runExitAnimation.

00:10:50.250 --> 00:10:53.470
And then when it's done, this
runnable's going to execute,

00:10:53.470 --> 00:10:54.910
and that's going
to call Finish.

00:10:54.910 --> 00:10:58.580
We also override Finish for the
sole reason of overriding

00:10:58.580 --> 00:10:59.620
pending transitions.

00:10:59.620 --> 00:11:00.500
Same as before.

00:11:00.500 --> 00:11:03.010
I don't want window animations
to run when I'm returning the

00:11:03.010 --> 00:11:05.310
main activity, because
I have my own custom

00:11:05.310 --> 00:11:06.710
animation to run.

00:11:06.710 --> 00:11:09.590
Only one more detail here
is the shadow layout.

00:11:09.590 --> 00:11:12.410
This is a neat rendering trick
for drawing shadows.

00:11:12.410 --> 00:11:14.430
This is sort of a general
container that will draw

00:11:14.430 --> 00:11:16.220
shadows behind all children.

00:11:16.220 --> 00:11:18.800
In this particular case, it's
just drawing shadows behind

00:11:18.800 --> 00:11:22.300
the one child that our container
has, which is this

00:11:22.300 --> 00:11:24.390
image that we're
animating into.

00:11:24.390 --> 00:11:26.540
So we set up some initial
values here.

00:11:26.540 --> 00:11:29.500
We use a trick of blurring the
edges, because it's kind of

00:11:29.500 --> 00:11:32.050
nice to have this sort of
blurry, anti-aliased edge to

00:11:32.050 --> 00:11:33.270
the shadow.

00:11:33.270 --> 00:11:36.900
So we draw a RoundRect with
blur into this bitmap, and

00:11:36.900 --> 00:11:39.370
then we're going to draw the
bitmap to the appropriate size

00:11:39.370 --> 00:11:41.410
whenever we render ourselves.

00:11:41.410 --> 00:11:44.190
This property setter is going
to be called by the Object

00:11:44.190 --> 00:11:46.460
Animator, which animates
the shadow depth.

00:11:46.460 --> 00:11:50.540
So it's going to set a couple
of values in here, including

00:11:50.540 --> 00:11:53.290
the alpha on the paint that
we're going to render with.

00:11:53.290 --> 00:11:55.290
And then we invalidate those
containers so that we can

00:11:55.290 --> 00:11:59.080
actually have a chance to render
our shadow as we draw.

00:11:59.080 --> 00:12:01.860
And then onDraw, we override to
actually draw the shadows

00:12:01.860 --> 00:12:03.030
behind all of our children.

00:12:03.030 --> 00:12:05.050
So we're going to walk through
all of our children.

00:12:05.050 --> 00:12:06.830
In this particular case, there's
only one, but you

00:12:06.830 --> 00:12:09.320
could see how maybe there would
be several children that

00:12:09.320 --> 00:12:11.740
we'd want to draw with
this shadow.

00:12:11.740 --> 00:12:13.160
So we're going to
get the child.

00:12:13.160 --> 00:12:15.010
We're going to calculate
a depth factor here.

00:12:15.010 --> 00:12:17.170
We're going to set some values
on the canvas that we're

00:12:17.170 --> 00:12:17.980
drawing with.

00:12:17.980 --> 00:12:19.670
Specifically, we're going
to translate to

00:12:19.670 --> 00:12:21.520
where we want the shadow.

00:12:21.520 --> 00:12:24.470
And then we're going to go ahead
and draw bitmap that we

00:12:24.470 --> 00:12:25.500
created before.

00:12:25.500 --> 00:12:26.690
And that's it.

00:12:26.690 --> 00:12:29.360
Again, an important point is
transparent activities aren't

00:12:29.360 --> 00:12:31.500
a good idea in general for
performance reasons.

00:12:31.500 --> 00:12:33.980
But if you really want a custom
animation going into

00:12:33.980 --> 00:12:36.510
that subactivity, this
is a pretty good

00:12:36.510 --> 00:12:38.290
way to go about it.

00:12:38.290 --> 00:12:42.690
You can check out information
about the code itself at a

00:12:42.690 --> 00:12:45.210
link that's provided in the
description of the video, and

00:12:45.210 --> 00:12:47.000
check out the other DevBytes
for more animations

00:12:47.000 --> 00:12:47.750
information.

00:12:47.750 --> 00:12:49.000
Thanks.

