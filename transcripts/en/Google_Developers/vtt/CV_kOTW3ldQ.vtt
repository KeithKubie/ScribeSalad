WEBVTT
Kind: captions
Language: en

00:00:01.530 --> 00:00:02.210
All right.

00:00:02.210 --> 00:00:03.590
Hi, everybody.

00:00:03.590 --> 00:00:06.502
As you've been informed, Eric
Koleda, member of the

00:00:06.502 --> 00:00:08.530
Developer Team here on
the AdWords API.

00:00:08.530 --> 00:00:11.060
Today, I'm going to be talking
about the MutateJobService.

00:00:11.060 --> 00:00:13.670
So most of the AdWords API
that you use today is

00:00:13.670 --> 00:00:16.410
synchronous.

00:00:16.410 --> 00:00:18.700
You make the request with your
operations, and then you get

00:00:18.700 --> 00:00:20.570
back a response with the result
of those operations.

00:00:20.570 --> 00:00:24.400
So you're waiting for the
operations to complete.

00:00:24.400 --> 00:00:26.682
With asynchronous processing,
the difference here is that

00:00:26.682 --> 00:00:28.190
we're kind of decoupling
that relationship.

00:00:28.190 --> 00:00:31.330
So you make requests to pass
operations to the server.

00:00:31.330 --> 00:00:34.300
The server processes those
operations offline, and not

00:00:34.300 --> 00:00:34.970
while you're waiting.

00:00:34.970 --> 00:00:37.570
And then you later check back
in to make sure the work is

00:00:37.570 --> 00:00:39.970
complete and retrieve
the results.

00:00:39.970 --> 00:00:42.100
We're seeing a definitely
increasing demand from our

00:00:42.100 --> 00:00:43.570
customers for bulk changes.

00:00:43.570 --> 00:00:45.900
Lots of operations.

00:00:45.900 --> 00:00:47.810
Very large accounts or
long tail keywords.

00:00:47.810 --> 00:00:50.060
The other thing, which I'm sure
almost everyone here has

00:00:50.060 --> 00:00:52.210
run into, is that using the
API at scale has its

00:00:52.210 --> 00:00:53.290
challenges.

00:00:53.290 --> 00:00:54.470
Specifically on rate limiting.

00:00:54.470 --> 00:00:56.240
We got a lot of questions
about that.

00:00:56.240 --> 00:00:58.100
But additionally, there's just
some backend limitations and

00:00:58.100 --> 00:01:00.350
errors you'll run into, like
concurrent modification, that

00:01:00.350 --> 00:01:02.660
is kind of out of
your control.

00:01:02.660 --> 00:01:05.290
Something happened at our end,
we couldn't complete that

00:01:05.290 --> 00:01:06.780
request, you'd have
to try again.

00:01:06.780 --> 00:01:08.830
It becomes frustrating sometimes
to deal with all

00:01:08.830 --> 00:01:10.810
these little edge cases.

00:01:10.810 --> 00:01:11.940
So a little bit of background.

00:01:11.940 --> 00:01:16.600
The BulkMutateJobService was
launched in v2000909, and it

00:01:16.600 --> 00:01:18.480
kind of implemented
these ideas.

00:01:18.480 --> 00:01:22.130
It allowed for asynchronous
processing in jobs, and it

00:01:22.130 --> 00:01:24.950
also had a limited form of
partial failure support, which

00:01:24.950 --> 00:01:27.790
meant that it wasn't like if
there was one bad operation in

00:01:27.790 --> 00:01:30.200
that job, of a few thousand
operations, that the whole

00:01:30.200 --> 00:01:31.700
thing would fail.

00:01:31.700 --> 00:01:34.110
So far we've seen some limited
adoption from the community,

00:01:34.110 --> 00:01:37.160
as hands here have shown, from
the BulkMutateJobService.

00:01:37.160 --> 00:01:40.300
And part of is just it's pretty
complicated to use.

00:01:40.300 --> 00:01:42.270
So with v201109, we've
launched this new

00:01:42.270 --> 00:01:44.170
MutateJobService.

00:01:44.170 --> 00:01:46.960
It reuses the same exact backend
on our side as the

00:01:46.960 --> 00:01:49.855
BMJS, so it has a lot of the
same behaviors and a lot of

00:01:49.855 --> 00:01:51.271
the same benefits.

00:01:51.271 --> 00:01:53.450
But we've simplified the
interface of the API

00:01:53.450 --> 00:01:54.260
significantly.

00:01:54.260 --> 00:01:57.230
So you now just have three
methods that do everything.

00:01:57.230 --> 00:01:59.550
And it supports the same
operations that the

00:01:59.550 --> 00:02:00.490
BulkMutateJobService did.

00:02:00.490 --> 00:02:03.050
Campaigns, ad groups, ad
criteria, targets, and

00:02:03.050 --> 00:02:04.560
extensions.

00:02:04.560 --> 00:02:08.300
So [UNINTELLIGIBLE] example
code, this is some PHP code.

00:02:08.300 --> 00:02:10.699
But to start, I've just
created an array of

00:02:10.699 --> 00:02:11.860
operations.

00:02:11.860 --> 00:02:14.930
Your application would be
somehow creating work that

00:02:14.930 --> 00:02:16.640
needs to be done against
the API.

00:02:16.640 --> 00:02:19.070
So once you have that list of
operations, as I mentioned,

00:02:19.070 --> 00:02:21.991
you just call the mutate method
asking for that list of

00:02:21.991 --> 00:02:22.488
operations.

00:02:22.488 --> 00:02:25.470
There's no extra mapping
that needs to go on.

00:02:25.470 --> 00:02:26.980
And the next step is just
waiting for that

00:02:26.980 --> 00:02:27.640
job to finish now.

00:02:27.640 --> 00:02:30.900
So you create a selector using
the job ID that you got back,

00:02:30.900 --> 00:02:34.380
and you call it "mutate." And
then in some sort of a loop--

00:02:34.380 --> 00:02:36.210
we recommend maybe
30 seconds--

00:02:36.210 --> 00:02:39.620
just call using that selector to
find out what the status of

00:02:39.620 --> 00:02:40.660
the job is.

00:02:40.660 --> 00:02:43.260
And then once you found that the
job is completed, you can

00:02:43.260 --> 00:02:45.705
retrieve results using get
result, [? asking ?] that same

00:02:45.705 --> 00:02:48.720
selector that specifies
the job ID.

00:02:48.720 --> 00:02:51.017
And then it's just a matter of
handling the results and the

00:02:51.017 --> 00:02:52.240
errors that are returned.

00:02:52.240 --> 00:02:55.360
So the error handling here,
we've tried to make it more

00:02:55.360 --> 00:02:56.730
similar to partial failure.

00:02:56.730 --> 00:02:59.290
So you get your results back,
and they're the exact same

00:02:59.290 --> 00:03:01.500
order as the operations
that you sent in.

00:03:01.500 --> 00:03:04.020
But in places where there was a
failure, you're going to get

00:03:04.020 --> 00:03:06.530
back a placeholder object,
which has no data.

00:03:06.530 --> 00:03:08.780
All of the errors for the entire
job are then included

00:03:08.780 --> 00:03:12.400
in a separate array also
in the response.

00:03:12.400 --> 00:03:16.340
And you have to use the field
path of the errors to

00:03:16.340 --> 00:03:19.125
correlate which operation
caused that error.

00:03:19.125 --> 00:03:21.920
To kind of show you what this
looks like graphically, here

00:03:21.920 --> 00:03:25.620
we made a very small job of only
three operations, passing

00:03:25.620 --> 00:03:27.310
in some key words.

00:03:27.310 --> 00:03:29.510
And you can see that the second
keyword there, cat food

00:03:29.510 --> 00:03:31.390
[UNINTELLIGIBLE], that failed
because you can't use an

00:03:31.390 --> 00:03:32.830
exclamation point
in the keyword.

00:03:32.830 --> 00:03:34.970
So you'll see that the results
that came back, we got one

00:03:34.970 --> 00:03:38.170
actual AdGroupCriterion for the
top, then a placeholder,

00:03:38.170 --> 00:03:38.924
[UNINTELLIGIBLE]

00:03:38.924 --> 00:03:42.650
and then the third one is
another AdGroupCriterion.

00:03:42.650 --> 00:03:43.970
And then the field
path of the error

00:03:43.970 --> 00:03:45.494
references operation one.

00:03:45.494 --> 00:03:49.450
So that's how you can kind
of tie this together.

00:03:49.450 --> 00:03:52.460
There are some other errors
that are caused by

00:03:52.460 --> 00:03:54.180
BulkMutateJob processing
itself.

00:03:54.180 --> 00:03:58.840
So lost result is the case where
we know we applied that

00:03:58.840 --> 00:04:01.962
operation, but something went
wrong and we don't know what

00:04:01.962 --> 00:04:02.690
the result was.

00:04:02.690 --> 00:04:05.410
Then there's unprocessed result,
which means that due

00:04:05.410 --> 00:04:08.225
some other failure in
the job, we never

00:04:08.225 --> 00:04:09.950
even got to this operation.

00:04:09.950 --> 00:04:11.530
We didn't even try
to apply it.

00:04:11.530 --> 00:04:13.010
And then there's still
this batch failure.

00:04:13.010 --> 00:04:16.894
And so what that means is you're
passing a few thousand

00:04:16.894 --> 00:04:18.750
operations.

00:04:18.750 --> 00:04:22.130
We're going to split that up
into batches, and then if the

00:04:22.130 --> 00:04:24.570
type of operation that's in
that batch doesn't support

00:04:24.570 --> 00:04:29.430
partial failure, then that
whole batch will fail.

00:04:29.430 --> 00:04:32.650
And you'll get a real error
for the operation that

00:04:32.650 --> 00:04:34.810
actually had the error, or
if there were multiples.

00:04:34.810 --> 00:04:37.900
And then you'll get this batch
failure error for every other

00:04:37.900 --> 00:04:42.750
operation in that batch,
that in itself was OK.

00:04:42.750 --> 00:04:45.540
It didn't return an error on
its own, but it also didn't

00:04:45.540 --> 00:04:46.960
get applied.

00:04:46.960 --> 00:04:50.800
So for people who have used the
old BMJS, there are some

00:04:50.800 --> 00:04:52.970
differences here you
probably have seen.

00:04:52.970 --> 00:04:55.200
The key one I mentioned before
is just simpler jobs.

00:04:55.200 --> 00:04:59.396
No parts or streams or other
wrapper objects.

00:04:59.396 --> 00:05:02.940
The other difference here is
because this implementation

00:05:02.940 --> 00:05:06.260
relies on just one job is
created by the one mutate

00:05:06.260 --> 00:05:09.080
request, there is now an upper
limit that's a bit smaller

00:05:09.080 --> 00:05:10.830
than the old
BulkMutateJobService for how

00:05:10.830 --> 00:05:13.120
many operations can
fit into a job.

00:05:13.120 --> 00:05:14.635
Specifically, 10,000.

00:05:14.635 --> 00:05:17.160
Now this is much smaller than
the BulkMutateJobService,

00:05:17.160 --> 00:05:18.960
which I believe was 500,000.

00:05:18.960 --> 00:05:22.280
But the difference here is that
we've now changed the job

00:05:22.280 --> 00:05:23.880
infrastructure so that
you can have an

00:05:23.880 --> 00:05:25.470
unlimited number of jobs.

00:05:25.470 --> 00:05:27.797
You don't need to worry about
filling up a job queue like

00:05:27.797 --> 00:05:28.820
there was before.

00:05:28.820 --> 00:05:33.290
So what we say is use smaller
jobs and use more of them.

00:05:33.290 --> 00:05:35.280
There is some overlap, too,
between these two services.

00:05:35.280 --> 00:05:37.780
If you look at the API
documentation very closely,

00:05:37.780 --> 00:05:39.740
you'll actually see a lot of
the objects have the word

00:05:39.740 --> 00:05:42.170
"BulkMutate" in them, even
though they're part of the new

00:05:42.170 --> 00:05:43.126
MutateJobService.

00:05:43.126 --> 00:05:45.650
Like I said, because they each
share a lot of the same

00:05:45.650 --> 00:05:47.750
backend, they're also sharing
some of the same API

00:05:47.750 --> 00:05:48.240
components.

00:05:48.240 --> 00:05:51.420
The other thing is, because they
share the same backend,

00:05:51.420 --> 00:05:54.560
you can kind of access
either type of

00:05:54.560 --> 00:05:55.940
job for either service.

00:05:55.940 --> 00:05:57.970
We generally recommend
don't do this.

00:05:57.970 --> 00:05:59.500
Stick with one service
and process

00:05:59.500 --> 00:06:00.484
everything through there.

00:06:00.484 --> 00:06:03.436
Because things can get a bit
complicated when you're using

00:06:03.436 --> 00:06:07.372
two different APIs against
different types of data.

00:06:07.372 --> 00:06:09.180
So, the benefits.

00:06:09.180 --> 00:06:11.360
As the same thing with the
BulkMutateJobService, we

00:06:11.360 --> 00:06:14.420
reduced the API unit cost for
using this service, which can

00:06:14.420 --> 00:06:16.130
be important to some
customers.

00:06:16.130 --> 00:06:17.390
And currently, it's by 50%.

00:06:17.390 --> 00:06:21.540
So all operations
cost 50% less.

00:06:21.540 --> 00:06:23.970
And then a really big thing that
I think is huge is that

00:06:23.970 --> 00:06:26.420
things like rate limiting and
transient failures are

00:06:26.420 --> 00:06:28.270
automatically handled by us.

00:06:28.270 --> 00:06:31.600
So you will submit a job, and
it doesn't matter if there's

00:06:31.600 --> 00:06:32.825
concurrent modification
errors.

00:06:32.825 --> 00:06:35.330
You don't need to worry about,
well, am I having too many

00:06:35.330 --> 00:06:37.650
threads, or am I sending my
operations too quickly, or

00:06:37.650 --> 00:06:38.820
what do I do with
rate limiting?

00:06:38.820 --> 00:06:39.810
We take care of all that.

00:06:39.810 --> 00:06:43.440
So I think that greatly
simplifies the back and forth

00:06:43.440 --> 00:06:45.860
with our servers.

00:06:45.860 --> 00:06:48.030
And so, what do we recommend
people use this for?

00:06:48.030 --> 00:06:50.966
I'd say the main thing is
time-insensitive work.

00:06:50.966 --> 00:06:53.720
You're doing a bulk upload of
a new account, you're doing

00:06:53.720 --> 00:06:56.100
some nightly changes to bids.

00:06:56.100 --> 00:06:58.615
These are things that they need
to get done, but they

00:06:58.615 --> 00:07:00.320
don't need to get done
that instant.

00:07:00.320 --> 00:07:03.375
A user in a UI who's trying to
add a campaign, that user

00:07:03.375 --> 00:07:05.434
doesn't want to sit around
waiting for a job to finish.

00:07:05.434 --> 00:07:07.910
They just want that campaign
created right then so they

00:07:07.910 --> 00:07:09.420
could keep working in the UI.

00:07:09.420 --> 00:07:12.015
So we do recommend for
time-insensitive work, it's

00:07:12.015 --> 00:07:13.910
really where we think the sweet
spot is for these kind

00:07:13.910 --> 00:07:15.110
of services.

00:07:15.110 --> 00:07:16.310
Thanks a lot.

00:07:16.310 --> 00:07:20.993
[APPLAUSE]

