WEBVTT
Kind: captions
Language: en

00:00:08.684 --> 00:00:10.100
LISA RAY: Hi, my
name is Lisa Ray,

00:00:10.100 --> 00:00:12.392
and I'm on the Android
Developer Relations team.

00:00:12.392 --> 00:00:14.350
Today I'm going to be
talking about the storage

00:00:14.350 --> 00:00:16.590
API and Android 4.4.

00:00:16.590 --> 00:00:18.520
So let's get started.

00:00:18.520 --> 00:00:20.590
Before KitKat, you may
have seen or implemented

00:00:20.590 --> 00:00:21.940
something like this.

00:00:21.940 --> 00:00:24.330
You had ACTION_GET_CONTENT
or ACTION_PICK,

00:00:24.330 --> 00:00:26.430
and you declared one
or more intent filters

00:00:26.430 --> 00:00:29.977
in an activity in your manifest.

00:00:29.977 --> 00:00:31.310
And this is what it looked like.

00:00:31.310 --> 00:00:32.851
You would pick one
app, and you would

00:00:32.851 --> 00:00:36.140
get one file back in your
original application.

00:00:36.140 --> 00:00:38.480
In KitKat, we've introduced
a beautiful new picker

00:00:38.480 --> 00:00:40.310
UI owned by the system.

00:00:40.310 --> 00:00:42.780
You can browse content from
all apps, not just one.

00:00:42.780 --> 00:00:44.830
You can see recent
files across all apps,

00:00:44.830 --> 00:00:46.610
and you can search
within an app.

00:00:46.610 --> 00:00:49.070
You can edit and
save files in place.

00:00:49.070 --> 00:00:51.290
And it supports traditional
file hierarchies,

00:00:51.290 --> 00:00:54.060
but it's flexible enough
for tag-based cloud storage.

00:00:54.060 --> 00:00:56.420
And finally, it supports
multiple user accounts,

00:00:56.420 --> 00:00:59.180
or transient roots, like
a USB storage provider,

00:00:59.180 --> 00:01:01.600
where it should only show up
when the drive is plugged in.

00:01:04.510 --> 00:01:07.770
In the storage API, we've
introduced two new intents,

00:01:07.770 --> 00:01:09.690
OPEN_DOC and CREATE_DOC.

00:01:09.690 --> 00:01:11.860
GET_CONTENT and PICK still work.

00:01:11.860 --> 00:01:14.870
And we've got a new
permission, MANAGE_DOCUMENTS,

00:01:14.870 --> 00:01:18.010
which only the system can hold.

00:01:18.010 --> 00:01:19.250
So how to implement this.

00:01:19.250 --> 00:01:23.140
First of all, in your manifest,
set your target SDK to 19.

00:01:23.140 --> 00:01:24.930
Next, add your provider.

00:01:24.930 --> 00:01:26.370
You provider name
in the manifest

00:01:26.370 --> 00:01:28.930
is the name of your Java class
for your content provider.

00:01:28.930 --> 00:01:31.270
Mine is called My
Cloud Provider.

00:01:31.270 --> 00:01:34.220
Name your authority your
package named plus provider.

00:01:34.220 --> 00:01:36.090
Your provider should
be exported because you

00:01:36.090 --> 00:01:38.720
want other applications to
see it, namely the system.

00:01:38.720 --> 00:01:41.200
Also, add the
MANAGE_DOCUMENTS permission.

00:01:41.200 --> 00:01:43.637
By default, a provider
is available to everyone.

00:01:43.637 --> 00:01:45.220
Adding the
MANAGE_DOCUMENTS permission

00:01:45.220 --> 00:01:48.710
restricts your provider to the
system, important for security.

00:01:48.710 --> 00:01:51.290
Also, we've added intent
filters to providers.

00:01:51.290 --> 00:01:54.010
Make sure yours has the
DOCUMENTS_PROVIDER action

00:01:54.010 --> 00:01:55.670
so it shows up when
the system searches

00:01:55.670 --> 00:01:58.830
for document providers.

00:01:58.830 --> 00:02:00.560
Here's a quick
picture of the flow.

00:02:00.560 --> 00:02:02.370
As you can see,
providers and clients

00:02:02.370 --> 00:02:05.050
don't interact directly,
just as before.

00:02:05.050 --> 00:02:08.000
A client requests permission
to interact with files, read,

00:02:08.000 --> 00:02:09.479
edit, create, et cetera.

00:02:09.479 --> 00:02:11.930
The system picker goes to
each registered provider

00:02:11.930 --> 00:02:15.374
and shows the user the
matching content roots.

00:02:15.374 --> 00:02:17.290
One more note before we
get into the provider.

00:02:17.290 --> 00:02:18.940
Usually with content
providers, you

00:02:18.940 --> 00:02:21.080
have to make your own
contract document.

00:02:21.080 --> 00:02:22.985
In this case, it's done for you.

00:02:22.985 --> 00:02:24.860
All the constants for
fields you might return

00:02:24.860 --> 00:02:26.526
and a lot of other
really useful methods

00:02:26.526 --> 00:02:28.206
are in the class
DocumentsContract.

00:02:28.206 --> 00:02:29.580
Here, these are
the columns we're

00:02:29.580 --> 00:02:31.246
going to return in
the cursor when we're

00:02:31.246 --> 00:02:34.450
queried for documents
or the root.

00:02:34.450 --> 00:02:35.910
How you implement a provider.

00:02:35.910 --> 00:02:38.290
You must extend
DocumentsProvider.

00:02:38.290 --> 00:02:40.190
It's an abstract
class, and it has

00:02:40.190 --> 00:02:43.180
a minimum of four methods
you must implement yourself.

00:02:43.180 --> 00:02:46.080
They're called in this
order, queryRoots, followed

00:02:46.080 --> 00:02:49.080
by queryChildDocuments,
and finally, possibly

00:02:49.080 --> 00:02:51.694
either queryDocument
or openDocument.

00:02:51.694 --> 00:02:53.110
There's many more,
but we're going

00:02:53.110 --> 00:02:54.905
to start with the most
simple case, which

00:02:54.905 --> 00:02:56.030
is just supporting openDoc.

00:02:58.810 --> 00:03:02.150
Here's an example of what
happens when the provider first

00:03:02.150 --> 00:03:05.540
queries the roots of all
documented providers.

00:03:05.540 --> 00:03:07.510
The projection you
see is an argument,

00:03:07.510 --> 00:03:09.260
just represents
the specific fields

00:03:09.260 --> 00:03:11.200
the caller wants to get back.

00:03:11.200 --> 00:03:12.780
ResolveRootProjection
is a method

00:03:12.780 --> 00:03:15.390
that returns either those
fields or the full projection

00:03:15.390 --> 00:03:17.340
if the caller passed in null.

00:03:17.340 --> 00:03:19.360
So here, we're
creating a new cursor,

00:03:19.360 --> 00:03:21.970
and we're adding one row to
it, one root, a top level

00:03:21.970 --> 00:03:24.290
directory, like
gallery or drive.

00:03:24.290 --> 00:03:26.570
Most applications
will have one root.

00:03:26.570 --> 00:03:29.380
You might have more than one in
the case of, say, multiple user

00:03:29.380 --> 00:03:30.180
accounts.

00:03:30.180 --> 00:03:33.672
In that case, just add a
second row to the cursor.

00:03:33.672 --> 00:03:35.130
The one thing that's
not given here

00:03:35.130 --> 00:03:37.177
is GetDocumentId for a file.

00:03:37.177 --> 00:03:38.760
Your implementation
is going to depend

00:03:38.760 --> 00:03:40.740
on how you structure
your file storage.

00:03:40.740 --> 00:03:43.440
What's important is that every
file, including directories,

00:03:43.440 --> 00:03:45.200
have exactly one unique ID.

00:03:45.200 --> 00:03:46.935
Other apps might
hold onto this ID,

00:03:46.935 --> 00:03:49.560
and it's an explicit part of the
contract that it won't change.

00:03:52.910 --> 00:03:55.895
Here's what shows up
when you query children.

00:03:55.895 --> 00:03:57.520
This method gets
called when you choose

00:03:57.520 --> 00:04:00.050
an application's root
in the Picker UI.

00:04:00.050 --> 00:04:03.506
It gets the child
documents of a directory.

00:04:03.506 --> 00:04:06.130
It can be called at every level
in the file hierarchy, not just

00:04:06.130 --> 00:04:07.040
the root.

00:04:07.040 --> 00:04:09.360
This sample implementation
is very simple.

00:04:09.360 --> 00:04:11.720
It makes a new cursor with
the requested columns,

00:04:11.720 --> 00:04:14.780
and then it adds information
about every immediate child

00:04:14.780 --> 00:04:17.149
in the parent directory
to the cursor.

00:04:17.149 --> 00:04:20.350
IncludeFile is very similar to
what we just saw for the root.

00:04:20.350 --> 00:04:24.540
It adds the file display name,
MIME type, size, and so forth.

00:04:24.540 --> 00:04:28.020
A child can be an image, another
directory, any type of file.

00:04:30.870 --> 00:04:32.350
So queryDocument.

00:04:32.350 --> 00:04:36.310
One or both of queryDocument
or openDocument

00:04:36.310 --> 00:04:39.710
will get called when the
user selects a document.

00:04:39.710 --> 00:04:41.750
QueryDocument returns
the same information

00:04:41.750 --> 00:04:44.390
that was passed in
queryChildDocuments,

00:04:44.390 --> 00:04:49.240
but just that specific
file, just the one of them.

00:04:49.240 --> 00:04:52.900
OpenDocument returns a
parcel file descriptor,

00:04:52.900 --> 00:04:55.960
which another application
can use to stream data.

00:04:55.960 --> 00:04:58.130
You can see that we're
setting the access mode.

00:04:58.130 --> 00:05:01.360
And the system takes care of
issuing URI permission grants

00:05:01.360 --> 00:05:03.560
for us.

00:05:03.560 --> 00:05:06.230
Those first four are enough to
get your content provider up

00:05:06.230 --> 00:05:07.280
and running.

00:05:07.280 --> 00:05:09.990
But there are a lot more
methods you can override.

00:05:09.990 --> 00:05:13.970
Recent documents, search, add
thumbnails to your images.

00:05:13.970 --> 00:05:16.830
Your implementation of these
may vary significantly,

00:05:16.830 --> 00:05:19.346
depending on what kind of
back end you're running.

00:05:19.346 --> 00:05:20.970
I'm not going to go
over them all here,

00:05:20.970 --> 00:05:22.450
but there's a sample
implementation

00:05:22.450 --> 00:05:27.010
of each of these methods in
the source code I'm posting.

00:05:27.010 --> 00:05:29.490
One more thing,
security is often

00:05:29.490 --> 00:05:32.390
a large issue when
you're sharing documents.

00:05:32.390 --> 00:05:34.530
Suppose you 're a
password-protected cloud

00:05:34.530 --> 00:05:36.260
storage service,
and you want to make

00:05:36.260 --> 00:05:38.220
sure the user is
logged in before you

00:05:38.220 --> 00:05:39.962
start sharing their files.

00:05:39.962 --> 00:05:41.420
I'm assuming you
have some existing

00:05:41.420 --> 00:05:43.540
method of
authenticating the user.

00:05:43.540 --> 00:05:46.410
If not, I recommend
Google Plus Integration.

00:05:46.410 --> 00:05:48.180
In any case, you're starting.

00:05:48.180 --> 00:05:49.531
Your user is not logged in.

00:05:49.531 --> 00:05:51.030
What you do in your
content provider

00:05:51.030 --> 00:05:54.934
is to return zero roots, that
is, an empty root cursor.

00:05:54.934 --> 00:05:56.600
This might be important
if your user had

00:05:56.600 --> 00:05:58.040
been logged in
previously and you

00:05:58.040 --> 00:06:00.910
had been providing a
root full of documents.

00:06:00.910 --> 00:06:02.630
Now you don't want to.

00:06:02.630 --> 00:06:04.230
The other step to
this is to call

00:06:04.230 --> 00:06:06.500
getContentResolver.notifyChange.

00:06:06.500 --> 00:06:07.860
Remember the documents contract?

00:06:07.860 --> 00:06:09.447
We're using it to make this URI.

00:06:09.447 --> 00:06:11.780
This tells the system to query
the roots of our provider

00:06:11.780 --> 00:06:13.960
again, which will return
a different value now

00:06:13.960 --> 00:06:17.050
because of the IF
statement we just saw.

00:06:17.050 --> 00:06:19.980
So sample code and slides
will be available in-- look

00:06:19.980 --> 00:06:21.830
at the description of
the video for a link.

00:06:21.830 --> 00:06:25.130
Thanks for watching, and
let's share some documents.

