WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:01.773
So we talked a little bit
about value iteration.

00:00:01.773 --> 00:00:06.648
And we said, that eventually,
it identifies an optimal policy and

00:00:06.648 --> 00:00:10.730
polynomial time,
in 1 over 1 minus gamma.

00:00:10.730 --> 00:00:13.630
And I pointed out that,
1 over 1 minus gamma isn't really

00:00:13.630 --> 00:00:16.690
a polynomial in the number of bits
that it takes to write down gamma.

00:00:16.690 --> 00:00:19.620
because you can, with every few bits,
specify a number that's very,

00:00:19.620 --> 00:00:23.300
very close to 1,
causing this value to explode.

00:00:23.300 --> 00:00:27.624
So, in fact, value iteration doesn't
give us a polynomial time algorithm for

00:00:27.624 --> 00:00:28.473
solving MDPs.

00:00:28.473 --> 00:00:32.473
There is only one way that we know
to solve MDPs in polynomial time and

00:00:32.473 --> 00:00:34.871
that is, [SOUND], Linear Programming.

00:00:34.871 --> 00:00:35.451
&gt;&gt; Okay.

00:00:35.451 --> 00:00:37.240
&gt;&gt; Do you know what
Linear Programming is?

00:00:37.240 --> 00:00:38.354
&gt;&gt; I'm going to say yes.

00:00:38.354 --> 00:00:39.000
&gt;&gt; All right.

00:00:39.000 --> 00:00:41.980
So it's optimization framework,
in which,

00:00:41.980 --> 00:00:45.260
you can give linear constraint
in a linear objective function.

00:00:45.260 --> 00:00:47.900
And in polynomial time,
as long as the number of variables and

00:00:47.900 --> 00:00:50.500
constraints is polynomial,
get a solution.

00:00:50.500 --> 00:00:52.060
&gt;&gt; That's exactly what
I was going to say.

00:00:52.060 --> 00:00:53.860
&gt;&gt; Yeah, well, this is why I
was going to say it for you.

00:00:53.860 --> 00:00:55.608
&gt;&gt; Thank you.
&gt;&gt; So if we're going to use this idea

00:00:55.608 --> 00:00:58.426
to solve Markov decision processes,
we need a way of

00:00:58.426 --> 00:01:02.027
encoding a Markov decision process
solution as a linear program.

00:01:02.027 --> 00:01:06.270
So we need to encode our
MDP as a linear program.

00:01:06.270 --> 00:01:08.628
So linear constraints and
a linear objective function.

00:01:08.628 --> 00:01:11.530
So how do we know how to solve a MDP?

00:01:11.530 --> 00:01:14.177
&gt;&gt; We just have to solve
the Bellman equation.

00:01:14.177 --> 00:01:14.757
&gt;&gt; Bellman Equation.

00:01:14.757 --> 00:01:16.388
Right.

00:01:16.388 --> 00:01:20.493
I can write the Bellman equation in
terms of the value function as a set of

00:01:20.493 --> 00:01:25.230
equations where the variables are the
value function that we're interested in.

00:01:25.230 --> 00:01:28.363
So for each state s,
we have a variable v sub s.

00:01:28.363 --> 00:01:32.658
And we relate the v sub s' through this
equation to the v sub s primes which

00:01:32.658 --> 00:01:36.473
are themselves just v sub s',
just ordered in a different way.

00:01:36.473 --> 00:01:39.020
And that seems really good, right?

00:01:39.020 --> 00:01:41.380
We have a set of constraints.

00:01:41.380 --> 00:01:43.930
And if we could just solve this set
of constraints, we'll be good to go.

00:01:43.930 --> 00:01:45.010
So are we done?

00:01:45.010 --> 00:01:47.812
Do we have a way of doing this with
linear programming directly from this

00:01:47.812 --> 00:01:48.380
expression?

00:01:48.380 --> 00:01:54.700
&gt;&gt; Not if max, unless max has become
linear since I last looked, no.

00:01:54.700 --> 00:01:57.060
&gt;&gt; Right, which they're not so much.

00:01:57.060 --> 00:02:01.070
Yeah, so since the max over
actions in not a linear operator,

00:02:01.070 --> 00:02:05.450
this isn't translatable directly
to a set of linear equations and

00:02:05.450 --> 00:02:07.110
a linear objective function.

00:02:07.110 --> 00:02:11.560
We have a system of non-linear
equations, but that's not so good.

00:02:11.560 --> 00:02:16.410
So, the cool thing about max is that
we can actually think about max as

00:02:16.410 --> 00:02:21.270
being specifiable in terms of
a set of linear constraints,

00:02:21.270 --> 00:02:23.820
and a linear objective function.

00:02:23.820 --> 00:02:24.970
Let's think of it this way.

00:02:24.970 --> 00:02:26.960
Let's say,
that we're trying to compute a max, and

00:02:26.960 --> 00:02:29.390
this is just as a simple
little concrete example.

00:02:29.390 --> 00:02:32.540
Here's a thing that we're
trying to compute the max of.

00:02:32.540 --> 00:02:34.850
And the max is going to be some value x.

00:02:34.850 --> 00:02:38.403
What is the relationship between x and
all these values?

00:02:38.403 --> 00:02:41.700
So what's the relationship between x and
-3?

00:02:41.700 --> 00:02:43.558
&gt;&gt; X is greater than -3.

00:02:43.558 --> 00:02:47.140
&gt;&gt; Greater than -3, or in general,
we could say greater than or equal to.

00:02:47.140 --> 00:02:49.184
&gt;&gt; Mm-hm, I knew that's
what you were going to say.

00:02:49.184 --> 00:02:51.961
&gt;&gt; Yeah, you know,
it's always nicer to have or equal to's,

00:02:51.961 --> 00:02:53.438
it's more inclusive that way.

00:02:53.438 --> 00:02:54.205
&gt;&gt; Mm-hm.

00:02:54.205 --> 00:02:56.131
&gt;&gt; And we can say the same
thing about 7, right?

00:02:56.131 --> 00:02:58.630
X is going to be greater than or
equal to 7.

00:02:58.630 --> 00:03:01.207
And x is going to be greater than or
equal to 2.

00:03:01.207 --> 00:03:03.297
And x is going to be greater than or
equal to 5.

00:03:03.297 --> 00:03:04.621
And how do we know this?

00:03:04.621 --> 00:03:06.432
Because it's the max of those.

00:03:06.432 --> 00:03:08.638
So it has to be at least as
big as any one of them, right?

00:03:08.638 --> 00:03:09.241
&gt;&gt; Right.

00:03:09.241 --> 00:03:11.029
By the way,
your bottom thing says equals.

00:03:11.029 --> 00:03:11.702
&gt;&gt; Greater than or equal to.

00:03:11.702 --> 00:03:12.237
&gt;&gt; Mm-hm.

00:03:12.237 --> 00:03:14.187
&gt;&gt; It could be equal to 5,
if I get rid of the 7.

00:03:14.187 --> 00:03:14.698
&gt;&gt; Yes.

00:03:14.698 --> 00:03:17.095
[LAUGH]
&gt;&gt; All right, so

00:03:17.095 --> 00:03:20.224
this is a set of constraints,
of inequality constraints.

00:03:20.224 --> 00:03:20.804
Right?

00:03:20.804 --> 00:03:22.314
So is it true that now,

00:03:22.314 --> 00:03:27.097
the solution to this set of inequality
constraints is exactly the max?

00:03:27.097 --> 00:03:28.142
&gt;&gt; No.

00:03:28.142 --> 00:03:29.001
&gt;&gt; And why is that?

00:03:29.001 --> 00:03:32.414
&gt;&gt; Because 9 is also greater than or
equal to all of those things.

00:03:32.414 --> 00:03:33.064
&gt;&gt; It is!

00:03:33.064 --> 00:03:35.339
And 9 is the max of these things.

00:03:35.339 --> 00:03:36.129
&gt;&gt; No.

00:03:36.129 --> 00:03:37.290
No, that's not quite true.

00:03:37.290 --> 00:03:37.801
&gt;&gt; No.

00:03:37.801 --> 00:03:38.706
So what do we have to say?

00:03:38.706 --> 00:03:41.570
We have to say that, it's bigger
than equal to all these things.

00:03:41.570 --> 00:03:45.290
And of all the things that are bigger
than equal to all these things,

00:03:45.290 --> 00:03:47.580
we want the smallest such x.

00:03:47.580 --> 00:03:50.296
We want the x that is the smallest
possible while still satisfying all of

00:03:50.296 --> 00:03:51.120
these constraints.

00:03:51.120 --> 00:03:53.535
In this case,
that's going to have to be 7.

00:03:53.535 --> 00:03:54.742
&gt;&gt; Right.

00:03:54.742 --> 00:03:56.919
&gt;&gt; Right, because 7 is bigger
than all the other ones, and

00:03:56.919 --> 00:03:59.456
you can't get any smaller
without getting smaller than 7.

00:03:59.456 --> 00:04:02.637
&gt;&gt; Right, and of course,
min is a linear operator so we're good.

00:04:02.637 --> 00:04:04.517
&gt;&gt; No, no, no,
min is an objective function.

00:04:04.517 --> 00:04:05.702
This is a linear objective function.

00:04:05.702 --> 00:04:07.096
This is okay.

00:04:07.096 --> 00:04:09.093
&gt;&gt; Good, good, good.

00:04:09.093 --> 00:04:10.601
&gt;&gt; That's what we are going to do.

00:04:10.601 --> 00:04:15.308
We are going to generalize this idea
to the equations in the Bellman

00:04:15.308 --> 00:04:17.589
equation in a very similar way.

00:04:17.589 --> 00:04:18.570
&gt;&gt; I look forward to it.

