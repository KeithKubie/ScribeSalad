WEBVTT
Kind: captions
Language: en

00:00:02.785 --> 00:00:03.660
PROFESSOR: All right.

00:00:03.660 --> 00:00:07.770
Welcome back to 6849.

00:00:07.770 --> 00:00:12.530
You may recall or have heard
that this film crew from Japan

00:00:12.530 --> 00:00:13.380
is here.

00:00:13.380 --> 00:00:15.390
They're from a program
called [? Gachan, ?]

00:00:15.390 --> 00:00:17.147
which is about showing
all the cool things

00:00:17.147 --> 00:00:18.980
that happen in universities
around the world

00:00:18.980 --> 00:00:20.860
to students in Japan.

00:00:20.860 --> 00:00:22.500
So don't mind them,
but you're going

00:00:22.500 --> 00:00:25.616
to have to sign a
release form at the end.

00:00:25.616 --> 00:00:27.740
I apparently don't need
you to sign a release form.

00:00:27.740 --> 00:00:28.380
It just works.

00:00:33.444 --> 00:00:34.860
We're talking about
origami today.

00:00:34.860 --> 00:00:38.850
We began a series of lectures
on computational origami.

00:00:38.850 --> 00:00:42.330
We're going to do some
design, some actual folding,

00:00:42.330 --> 00:00:47.080
and some foldability
algorithm stuff.

00:00:47.080 --> 00:00:54.230
Does everyone have one of these
strips and a square of paper?

00:00:54.230 --> 00:00:55.010
You don't.

00:00:55.010 --> 00:00:56.950
Who has the master?

00:00:56.950 --> 00:01:00.380
Why don't you grab a few?

00:01:00.380 --> 00:01:02.050
Some of these.

00:01:02.050 --> 00:01:03.180
Here's the package.

00:01:06.780 --> 00:01:09.001
Lots of stuff.

00:01:09.001 --> 00:01:11.140
The paper comes from
the [? Gachan ?] team,

00:01:11.140 --> 00:01:12.650
so thanks to them.

00:01:12.650 --> 00:01:17.870
This is stuff you use in
your adding machine, I guess.

00:01:17.870 --> 00:01:20.630
That's where it comes from.

00:01:20.630 --> 00:01:21.220
Yes.

00:01:21.220 --> 00:01:22.095
You need one of each.

00:01:22.095 --> 00:01:22.805
Go for it.

00:01:22.805 --> 00:01:24.110
Open it.

00:01:24.110 --> 00:01:25.790
Let's get started.

00:01:25.790 --> 00:01:26.995
Where is my chalk?

00:01:30.580 --> 00:01:37.160
So just to warm you up,
I want to do some folding

00:01:37.160 --> 00:01:38.810
and give you some terminology.

00:01:38.810 --> 00:01:41.280
I know some of you have
done origami before,

00:01:41.280 --> 00:01:44.920
but a lot of you
haven't, so bear with me.

00:01:44.920 --> 00:01:47.752
I will try to do this quickly.

00:01:47.752 --> 00:01:49.460
And even for those
who have done origami,

00:01:49.460 --> 00:01:51.540
you may not have done
origami math before.

00:01:51.540 --> 00:01:52.810
That's why you're here.

00:01:52.810 --> 00:01:55.940
So things like a
piece of paper, which

00:01:55.940 --> 00:01:58.000
you might take for
granted, I'm going

00:01:58.000 --> 00:02:03.860
to define here to
be a 2D polygon.

00:02:03.860 --> 00:02:05.880
There's actually many
interesting definitions

00:02:05.880 --> 00:02:08.130
of a piece of paper,
but for today at least,

00:02:08.130 --> 00:02:10.110
most of the time, we'll
think about polygon.

00:02:10.110 --> 00:02:12.026
Usually, you think of a
square piece of paper,

00:02:12.026 --> 00:02:15.440
but "polygon" would be the
geometer's generalization

00:02:15.440 --> 00:02:17.000
of that.

00:02:17.000 --> 00:02:20.955
Also, the polygon has
distinguished sides.

00:02:24.820 --> 00:02:29.970
So distinguished
top and bottom side.

00:02:29.970 --> 00:02:36.550
In practice, with standard
kami paper from Japan,

00:02:36.550 --> 00:02:38.707
you have the colored
side and the white side,

00:02:38.707 --> 00:02:40.040
so that's one clear distinction.

00:02:40.040 --> 00:02:41.700
Maybe we call the
colored side the top.

00:02:41.700 --> 00:02:44.080
Doesn't really matter, just
so we can tell things apart,

00:02:44.080 --> 00:02:47.720
and in particular tell
mountains from valleys.

00:02:47.720 --> 00:02:49.120
That's our motivation.

00:02:49.120 --> 00:02:55.730
So a crease in a piece
of paper, this I'm

00:02:55.730 --> 00:03:00.630
going to think abstractly as
just a line segment or some one

00:03:00.630 --> 00:03:06.325
dimensional curve drawn
on the piece of paper.

00:03:13.220 --> 00:03:19.760
And then we have crease pattern.

00:03:26.130 --> 00:03:31.180
This is just a bunch of creases,
so a bunch of line segments

00:03:31.180 --> 00:03:32.860
drawn on the piece of paper.

00:03:32.860 --> 00:03:35.620
If you are graph
theoretically inclined,

00:03:35.620 --> 00:03:37.380
I would think of
this as a planar

00:03:37.380 --> 00:03:42.635
graph drawn on the paper.

00:03:45.589 --> 00:03:47.380
If you're not graph
theoretically inclined,

00:03:47.380 --> 00:03:49.340
just ignore that definition.

00:03:49.340 --> 00:03:52.900
They're the same thing.

00:03:52.900 --> 00:03:55.130
That's a crease pattern.

00:03:55.130 --> 00:04:00.090
So for example, the thing
we're going to be folding

00:04:00.090 --> 00:04:03.270
is this very simple
pinwheel, and this

00:04:03.270 --> 00:04:05.760
is an example of a
crease pattern that

00:04:05.760 --> 00:04:07.640
folds into that pinwheel.

00:04:07.640 --> 00:04:10.537
So here, the lines
are distinguished.

00:04:10.537 --> 00:04:13.120
There's two different kinds, the
red lines and the blue lines,

00:04:13.120 --> 00:04:14.561
but ignore that for now.

00:04:14.561 --> 00:04:16.019
That's a bunch of
creases which you

00:04:16.019 --> 00:04:17.399
could put in and
make that thing.

00:04:20.769 --> 00:04:24.820
Before we get there, I want
the notion of a folded state.

00:04:28.210 --> 00:04:31.740
So this is all pretty normal
if you're an origamist.

00:04:31.740 --> 00:04:34.890
This is really something
only the mathematicians use,

00:04:34.890 --> 00:04:36.630
this term, folded state.

00:04:40.040 --> 00:04:46.425
Formally, this is what we refer
to as the finished product.

00:04:49.800 --> 00:04:54.460
This pinwheel is a folded
state of this piece of paper.

00:04:54.460 --> 00:04:55.470
Clear?

00:04:55.470 --> 00:04:58.600
Defining that is a real pain,
and you can look at chapter 11,

00:04:58.600 --> 00:04:59.910
I think, in the textbook.

00:04:59.910 --> 00:05:01.240
Maybe I'll talk about
it at some point,

00:05:01.240 --> 00:05:02.656
but I don't want
to get distracted

00:05:02.656 --> 00:05:04.540
by how you define what
a folded state is.

00:05:04.540 --> 00:05:05.956
But you're not
allowed to stretch,

00:05:05.956 --> 00:05:07.800
you're not allowed to tear.

00:05:07.800 --> 00:05:10.350
It should be a
nice, valid folding.

00:05:10.350 --> 00:05:12.130
You can't cross yourself.

00:05:12.130 --> 00:05:15.530
So that's this notion
of folded state.

00:05:15.530 --> 00:05:21.960
And if you take a folded
state and then unfold it--

00:05:21.960 --> 00:05:24.190
this is something you can
do with a folded state--

00:05:24.190 --> 00:05:25.420
you get a crease pattern.

00:05:30.420 --> 00:05:35.860
So I can take this
pinwheel, unfold it,

00:05:35.860 --> 00:05:38.760
and I can see which
lines are creased

00:05:38.760 --> 00:05:40.720
to make that pinwheel happen.

00:05:40.720 --> 00:05:47.540
So that's the crease
pattern of a folded state.

00:05:47.540 --> 00:05:50.240
Today especially, and
a lot of the field

00:05:50.240 --> 00:05:54.560
is concerned with the idea
of flat foldings, which

00:05:54.560 --> 00:06:04.480
are a particular kind of folded
state that lives in the plane,

00:06:04.480 --> 00:06:05.325
lying in the plane.

00:06:09.029 --> 00:06:11.070
Of course, it doesn't
literally lie on the plane.

00:06:11.070 --> 00:06:13.590
There's lots of layers
stacked on top of each other,

00:06:13.590 --> 00:06:15.370
but geometrically,
everything has

00:06:15.370 --> 00:06:19.460
been collapsed onto one
slightly thickened plane here.

00:06:19.460 --> 00:06:21.660
So this is a flat origami.

00:06:21.660 --> 00:06:26.840
This is also a flat
origami, the trivial kind.

00:06:26.840 --> 00:06:28.400
That's a flat folding.

00:06:28.400 --> 00:06:34.520
And when this is possible,
we call that crease pattern

00:06:34.520 --> 00:06:35.205
flat foldable.

00:06:47.850 --> 00:06:53.380
And finally, we get to the
idea of mountains and valleys.

00:06:53.380 --> 00:07:05.620
So a mountain crease is
when the bottom sides

00:07:05.620 --> 00:07:17.600
touch, and a valley crease
is when the top sides touch.

00:07:21.890 --> 00:07:23.820
So remember my
distinguished sides.

00:07:23.820 --> 00:07:25.840
I'll call the
colored side the top,

00:07:25.840 --> 00:07:28.510
so then this is a
mountain crease over here

00:07:28.510 --> 00:07:31.120
because I'm bringing the
two white sides together,

00:07:31.120 --> 00:07:33.420
and where's a valley?

00:07:33.420 --> 00:07:37.270
I guess this is a valley, where
I'm bringing the two colored

00:07:37.270 --> 00:07:39.550
sides, the two top
sides, together.

00:07:39.550 --> 00:07:42.060
Together, that
makes this pattern,

00:07:42.060 --> 00:07:45.620
and hopefully, that
matches up with here.

00:07:45.620 --> 00:07:46.660
I mean, it's symmetric.

00:07:46.660 --> 00:07:47.951
You could flip everything over.

00:07:47.951 --> 00:07:49.965
You'd just get the
inverted color pattern.

00:07:49.965 --> 00:07:52.466
It doesn't really matter which
side you defined to be which,

00:07:52.466 --> 00:07:54.006
but the point is to
distinguish which

00:07:54.006 --> 00:07:55.710
are mountains versus
which are valleys.

00:07:55.710 --> 00:07:58.630
You get different
parity, it looks

00:07:58.630 --> 00:08:00.640
like, I have matched up there.

00:08:00.640 --> 00:08:04.260
So let's fold this, just
for some experience,

00:08:04.260 --> 00:08:06.590
if you've never made one before.

00:08:06.590 --> 00:08:10.970
Take your square piece of
paper, and to get started,

00:08:10.970 --> 00:08:12.590
let's say with
the white side up,

00:08:12.590 --> 00:08:15.910
just fold along
the two diagonals,

00:08:15.910 --> 00:08:18.890
the valley folds, bringing
the two white sides together.

00:08:21.660 --> 00:08:26.334
So you fold along one
diagonal, then you unfold, then

00:08:26.334 --> 00:08:27.750
you fold along the
other diagonal.

00:08:37.650 --> 00:08:40.150
How are we doing?

00:08:40.150 --> 00:08:41.154
Couple diagonals.

00:08:41.154 --> 00:08:42.159
I have the big sheet.

00:08:42.159 --> 00:08:43.200
I should be going slower.

00:08:45.860 --> 00:08:47.830
So now, I want to fold
that inner square,

00:08:47.830 --> 00:08:49.810
and we've conveniently
marked the center point.

00:08:49.810 --> 00:08:53.040
So I'm going to fold each of
the four edges of the square

00:08:53.040 --> 00:08:55.410
to the center, and
make sure to line up

00:08:55.410 --> 00:08:58.395
the left and right edges,
and that guarantees that I

00:08:58.395 --> 00:09:01.470
fold parallel to
that bottom edge.

00:09:01.470 --> 00:09:03.010
In this case, I
just want to crease

00:09:03.010 --> 00:09:05.620
the middle half of that line.

00:09:05.620 --> 00:09:07.370
So I'm not creasing all the way.

00:09:07.370 --> 00:09:10.090
I'm just creasing
in the middle half

00:09:10.090 --> 00:09:12.740
here to make that one
edge of the square,

00:09:12.740 --> 00:09:15.865
and then I turn and I
repeat that four times.

00:09:30.630 --> 00:09:32.680
Switch sides for
different visibility.

00:09:45.930 --> 00:09:48.660
This is not the usual
way to teach this model,

00:09:48.660 --> 00:09:52.550
but I think it's the
mathematically appropriate way.

00:09:52.550 --> 00:09:55.700
I'm trying to make that crease
pattern as quickly as I can.

00:09:55.700 --> 00:09:57.680
I did it with the white
side up because I'm

00:09:57.680 --> 00:09:59.502
folding everything
valley, which is easier.

00:09:59.502 --> 00:10:01.210
In reality, I want
these to be mountains.

00:10:01.210 --> 00:10:04.810
When I turn them over, they're
all mountains, and I'm happy.

00:10:04.810 --> 00:10:08.762
We made some extra creases
here, which we didn't need to.

00:10:08.762 --> 00:10:09.470
How are we doing?

00:10:09.470 --> 00:10:11.810
How many people are
done with those?

00:10:11.810 --> 00:10:14.140
How many people are not?

00:10:14.140 --> 00:10:15.310
Couple people.

00:10:15.310 --> 00:10:18.860
Sarah, hurry up.

00:10:18.860 --> 00:10:22.130
Now comes the fun
part, and this is

00:10:22.130 --> 00:10:24.390
to give you an idea of what
general origami folds can

00:10:24.390 --> 00:10:24.890
be like.

00:10:24.890 --> 00:10:27.610
I want to simultaneously
fold all those creases

00:10:27.610 --> 00:10:31.310
that I put in except
for the center, where

00:10:31.310 --> 00:10:32.890
it's supposed to be uncreased.

00:10:32.890 --> 00:10:37.260
So I'm going to bring those
four edges of the square in,

00:10:37.260 --> 00:10:39.130
and if you do it
right, you'll end up

00:10:39.130 --> 00:10:42.100
with these four flaps
sticking out of the top.

00:10:42.100 --> 00:10:43.540
It's not going to lie flat.

00:10:43.540 --> 00:10:45.070
We don't have enough
creases in yet.

00:10:45.070 --> 00:10:48.060
But we have these four
flaps of the pinwheel,

00:10:48.060 --> 00:10:50.140
and then you just
get to choose, do I

00:10:50.140 --> 00:10:52.250
flip them over one
way or the other?

00:10:52.250 --> 00:10:54.860
If you flip them over as much
as they go in that direction--

00:10:54.860 --> 00:10:58.865
I'll try to match the figure.

00:10:58.865 --> 00:11:00.700
I'll put this guy
over at the left,

00:11:00.700 --> 00:11:08.290
crease him in, put this guy
down at that end, and this guy

00:11:08.290 --> 00:11:14.150
over to the right,
and this guy up.

00:11:14.150 --> 00:11:16.460
I get my pinwheel.

00:11:16.460 --> 00:11:19.510
If that doesn't work out
for you, you can try again.

00:11:19.510 --> 00:11:22.550
It's not so hard, but
it gives you some idea

00:11:22.550 --> 00:11:24.480
that putting all these
creases in at once

00:11:24.480 --> 00:11:27.730
is kind of necessary
for this to happen.

00:11:27.730 --> 00:11:30.480
In particular, if you
look at the crease pattern

00:11:30.480 --> 00:11:33.100
of this model, there
is no fold that

00:11:33.100 --> 00:11:35.910
goes all the way
through the square,

00:11:35.910 --> 00:11:38.892
so you can't make a
first fold and then

00:11:38.892 --> 00:11:40.100
make a second fold and so on.

00:11:40.100 --> 00:11:42.429
You really have to
do this all at once.

00:11:42.429 --> 00:11:44.970
There's many ways to do it, some
of which are more intuitive,

00:11:44.970 --> 00:11:49.100
but I thought this simultaneous
collapse is the coolest.

00:11:49.100 --> 00:11:51.585
It's nice and fourfold
symmetric as you do it, I guess,

00:11:51.585 --> 00:11:52.940
if you do it right.

00:11:52.940 --> 00:11:56.410
I think this even folds rigidly.

00:11:56.410 --> 00:11:59.200
That's to give you
some intuition,

00:11:59.200 --> 00:12:01.495
some real, practical
origami experience.

00:12:05.710 --> 00:12:08.130
And you get an idea of
what a crease pattern is,

00:12:08.130 --> 00:12:09.850
when a mountain valley is.

00:12:09.850 --> 00:12:11.740
I have two more
terms and then we

00:12:11.740 --> 00:12:13.805
can go to math, some real stuff.

00:12:20.400 --> 00:12:23.430
There's two notions that
involve mountains and valleys.

00:12:23.430 --> 00:12:31.884
One is a mountain-valley
assignment,

00:12:31.884 --> 00:12:33.550
and this is something
that goes together

00:12:33.550 --> 00:12:35.360
with the crease pattern.

00:12:35.360 --> 00:12:39.859
And this specifies which
creases are mountains

00:12:39.859 --> 00:12:40.775
and which are valleys.

00:12:48.902 --> 00:12:51.490
Did you all get it?

00:12:51.490 --> 00:12:52.200
Good.

00:12:52.200 --> 00:12:53.330
The pinwheel, I mean.

00:13:00.890 --> 00:13:03.550
So you could think of this
as a coloring of the edges,

00:13:03.550 --> 00:13:04.260
whatever.

00:13:04.260 --> 00:13:07.590
In this case, I'm
simultaneously using color red

00:13:07.590 --> 00:13:10.200
to denote mountains and
blue to denote valleys,

00:13:10.200 --> 00:13:12.710
and also, the standard
in origami world,

00:13:12.710 --> 00:13:15.060
although it's a bit
annoying, is dot dash

00:13:15.060 --> 00:13:18.135
means mountain and
dash means valley.

00:13:18.135 --> 00:13:19.010
That's pretty common.

00:13:19.010 --> 00:13:22.740
You'll see that throughout.

00:13:22.740 --> 00:13:32.850
That was invented in the
1950s, I guess, by Yoshizawa,

00:13:32.850 --> 00:13:34.162
maybe earlier.

00:13:34.162 --> 00:13:35.120
Somewhere around there.

00:13:37.660 --> 00:13:39.630
And then if I take a
crease pattern together

00:13:39.630 --> 00:13:41.046
with a mountain-valley
assignment,

00:13:41.046 --> 00:13:43.620
I'm going to call this a
mountain-valley pattern.

00:13:43.620 --> 00:13:47.332
That's the picture that
I'm really drawing here.

00:13:47.332 --> 00:13:49.790
Sometimes it's useful to think
of these as coming together,

00:13:49.790 --> 00:13:51.330
sometimes as separate.

00:13:51.330 --> 00:13:54.090
You're going to see this
terminology all over the place,

00:13:54.090 --> 00:13:58.340
so I figure I should define it.

00:14:07.730 --> 00:14:09.970
And sometimes, m is
mountain, v is valley.

00:14:14.330 --> 00:14:16.560
Now we can do some fun stuff.

00:14:21.007 --> 00:14:22.590
I showed you this
pinwheel to give you

00:14:22.590 --> 00:14:25.220
an idea of more
complicated folds,

00:14:25.220 --> 00:14:26.950
the general origami folds.

00:14:26.950 --> 00:14:30.140
But today, I want to focus
on relatively simple kind

00:14:30.140 --> 00:14:32.000
of folds, which is
called simple folds.

00:14:37.460 --> 00:14:39.860
Unlike this thing where I have
to simultaneously collapse

00:14:39.860 --> 00:14:43.510
many creases, a simple fold
just involves one crease.

00:14:43.510 --> 00:14:55.540
It is a fold along
a single line,

00:14:55.540 --> 00:14:59.970
and we fold it by plus
or minus 180 degrees.

00:14:59.970 --> 00:15:02.440
So depending which
way you're counting,

00:15:02.440 --> 00:15:05.520
plus 180 is maybe valley,
minus 180 is mountain.

00:15:08.400 --> 00:15:11.850
If I start with a flat folding,
after I make a simple fold,

00:15:11.850 --> 00:15:13.806
I will again have
a flat folding.

00:15:13.806 --> 00:15:15.180
What we're interested
in is, what

00:15:15.180 --> 00:15:17.040
can you make by a
sequence of simple folds?

00:15:17.040 --> 00:15:18.710
I start from a
square paper, say,

00:15:18.710 --> 00:15:20.640
and I make a sequence
of simple folds.

00:15:20.640 --> 00:15:22.880
At all times, I will
be flat folding.

00:15:22.880 --> 00:15:24.852
It's easy to get there.

00:15:24.852 --> 00:15:27.310
The pinwheel is something you
could not make in this model.

00:15:27.310 --> 00:15:29.370
It's a restricted
model, but it's still

00:15:29.370 --> 00:15:30.500
surprisingly powerful.

00:15:30.500 --> 00:15:32.000
You still get a
universality result.

00:15:32.000 --> 00:15:35.900
Even with simple folds, you
can make any flat thing.

00:15:35.900 --> 00:15:37.910
And if you relax this
constraint and don't

00:15:37.910 --> 00:15:40.490
say it's plus or
minus 180, then you

00:15:40.490 --> 00:15:43.020
can actually make any
3D thing you want.

00:15:43.020 --> 00:15:45.500
So that's the first thing
we will prove today,

00:15:45.500 --> 00:15:48.510
and that's in the
origami design world.

00:15:48.510 --> 00:15:50.550
And then we'll go to
origami foldability.

00:15:50.550 --> 00:15:51.841
I'll give you a crease pattern.

00:15:51.841 --> 00:15:55.020
I want to know, can it be folded
by a sequence of simple folds?

00:15:55.020 --> 00:15:58.580
That's a much harder problem,
but some cases are easy.

00:16:21.330 --> 00:16:25.490
So this the universality result
I mentioned in lecture one.

00:16:25.490 --> 00:16:27.530
This is going to be the
inefficient version,

00:16:27.530 --> 00:16:29.770
but we're going to
prove that everything

00:16:29.770 --> 00:16:32.636
can be folded from
a square paper.

00:16:32.636 --> 00:16:34.260
I'm going to be more
precise about what

00:16:34.260 --> 00:16:35.134
I mean by everything.

00:16:47.420 --> 00:16:51.260
So I'm going to imagine there
are a bunch of polygons in 3D

00:16:51.260 --> 00:16:52.810
and they're somehow
joined together

00:16:52.810 --> 00:16:54.530
into one connected mass.

00:16:54.530 --> 00:16:56.420
This could be a
polyhedron like a cube,

00:16:56.420 --> 00:16:58.370
it could be a
polyhedron like a bunny,

00:16:58.370 --> 00:17:01.510
it could be some
crazy, thorny mess,

00:17:01.510 --> 00:17:03.105
but each piece
locally is a polygon,

00:17:03.105 --> 00:17:04.771
and you just stick a
whole bunch of them

00:17:04.771 --> 00:17:08.290
together to some
connected thing.

00:17:08.290 --> 00:17:15.079
Plus you get to specify what
color, what side of the paper

00:17:15.079 --> 00:17:18.439
you want to be visible on
each of those polygons.

00:17:25.240 --> 00:17:30.270
You can even do that on
each side of the polygon

00:17:30.270 --> 00:17:30.770
if you want.

00:17:35.970 --> 00:18:14.600
And you can fold that thing from
a big enough piece of paper,

00:18:14.600 --> 00:18:18.590
such as a big enough square, a
big enough rectangle, whatever

00:18:18.590 --> 00:18:20.232
you feel like.

00:18:20.232 --> 00:18:22.990
Bicolor paper here
refers to the idea

00:18:22.990 --> 00:18:26.560
that your paper is
different colors

00:18:26.560 --> 00:18:29.110
on one side and the other,
so white on one side,

00:18:29.110 --> 00:18:31.704
colored on the other
side, white on one side,

00:18:31.704 --> 00:18:33.120
black on the other
side, whatever.

00:18:33.120 --> 00:18:40.350
We usually try to draw that
with the folded over corner.

00:18:43.850 --> 00:18:47.410
There we go, bicolor paper.

00:18:47.410 --> 00:18:51.980
So for example,
for fun, here's how

00:18:51.980 --> 00:18:55.026
you could imagine this
design by John Montroll.

00:18:55.026 --> 00:18:57.400
This is folded from a square
of paper, white on one side,

00:18:57.400 --> 00:18:58.191
black on the other.

00:18:58.191 --> 00:19:00.100
It's a zebra.

00:19:00.100 --> 00:19:01.990
And you could imagine
the input to that

00:19:01.990 --> 00:19:04.610
problem was a bunch of polygons.

00:19:04.610 --> 00:19:07.150
There's some white polygons,
some black polygons.

00:19:07.150 --> 00:19:10.120
Together, they form
a connected union,

00:19:10.120 --> 00:19:12.340
and that could be the input.

00:19:12.340 --> 00:19:14.770
This could be an output to
how you fold your square

00:19:14.770 --> 00:19:16.044
to make that color pattern.

00:19:16.044 --> 00:19:18.210
Of course, if you gave this
input to that algorithm,

00:19:18.210 --> 00:19:22.070
you'll get a much uglier
folding than the one designed

00:19:22.070 --> 00:19:23.594
by a human, but that's the idea.

00:19:23.594 --> 00:19:25.010
You could also
imagine you're just

00:19:25.010 --> 00:19:26.840
given a polygon
you want to make.

00:19:26.840 --> 00:19:29.120
You say, I want to make
a horse, a flat horse.

00:19:29.120 --> 00:19:31.270
Then you could give
that to this algorithm

00:19:31.270 --> 00:19:33.750
and it will tell you
how to fold a horse.

00:19:33.750 --> 00:19:35.940
That's the general idea.

00:19:40.650 --> 00:19:42.836
So how do we prove that?

00:19:42.836 --> 00:19:43.835
Want to make everything.

00:19:56.250 --> 00:19:58.860
So this is an early result in
computational origami design,

00:19:58.860 --> 00:20:02.565
I think from 1998, probably.

00:20:02.565 --> 00:20:08.100
Trial version here is in 2000.

00:20:08.100 --> 00:20:10.840
Any ideas how to prove this?

00:20:10.840 --> 00:20:13.709
How can we make anything?

00:20:13.709 --> 00:20:15.250
Got to get you
thinking a little bit.

00:20:21.570 --> 00:20:25.120
We have a subtle hint.

00:20:25.120 --> 00:20:30.210
So the idea is to take
a really long strip,

00:20:30.210 --> 00:20:33.410
much longer than this
one, and fold it, and just

00:20:33.410 --> 00:20:37.770
wrap around your polyhedron
over and over and over,

00:20:37.770 --> 00:20:40.810
and eventually make
whatever you want.

00:20:40.810 --> 00:20:42.800
So it's going to
be a little flimsy,

00:20:42.800 --> 00:20:45.730
but mathematically,
it'll work perfectly.

00:20:45.730 --> 00:20:51.930
So first thing to do is
fold your paper, whatever

00:20:51.930 --> 00:20:58.235
shape it is, down to a
long, narrow strip, so

00:20:58.235 --> 00:20:59.455
a long, narrow rectangle.

00:21:10.150 --> 00:21:12.530
Conveniently, you have your
strips of paper already,

00:21:12.530 --> 00:21:13.530
but if you started
with a square,

00:21:13.530 --> 00:21:15.446
the first thing you'd
do is accordion pleat it

00:21:15.446 --> 00:21:18.390
down to just one
edge of the square.

00:21:18.390 --> 00:21:19.139
Crazy already.

00:21:19.139 --> 00:21:21.180
If you started with a
square, this is a bad idea.

00:21:21.180 --> 00:21:24.110
If you started with a strip,
it's actually pretty good.

00:21:24.110 --> 00:21:27.520
It's probably close to optimal.

00:21:27.520 --> 00:21:31.150
But now, how do I actually, say,
wrap everything with the strip?

00:21:31.150 --> 00:21:33.037
Let's be more formal about that.

00:21:33.037 --> 00:21:34.620
The first thing I'm
going to do, which

00:21:34.620 --> 00:21:39.150
is a common trick in
computational geometry,

00:21:39.150 --> 00:21:41.960
it's like, well,
polygons are confusing.

00:21:41.960 --> 00:21:42.980
I like triangles better.

00:21:42.980 --> 00:21:44.220
They're much simpler.

00:21:44.220 --> 00:21:46.200
So just triangulate
all the polygons.

00:21:46.200 --> 00:21:49.420
If I have some crazy
polygon, imagine

00:21:49.420 --> 00:21:53.560
that's some piece
of the zebra, I'll

00:21:53.560 --> 00:21:57.935
just subdivide it
into triangles.

00:21:57.935 --> 00:21:59.560
There's standard
algorithms to do this.

00:21:59.560 --> 00:22:00.768
I don't want to go into that.

00:22:00.768 --> 00:22:04.100
You can just add a bunch of
these diagonals to the polygon,

00:22:04.100 --> 00:22:06.820
just keep adding them as long
as they don't cross each other.

00:22:06.820 --> 00:22:09.250
When you're done, it
will be triangulated.

00:22:09.250 --> 00:22:12.018
You can do that efficiently,
linear time, even.

00:22:14.881 --> 00:22:16.630
That's a little bit
easier to think about.

00:22:16.630 --> 00:22:20.030
Now I just have to figure
out how to wrap one triangle

00:22:20.030 --> 00:22:23.566
and then how to combine those
wrappings together somehow.

00:22:23.566 --> 00:22:25.440
Then I could go through
triangle by triangle,

00:22:25.440 --> 00:22:29.960
visit everything, cover
everything I need to cover.

00:22:29.960 --> 00:22:33.240
So that's what
we're going to do.

00:22:36.880 --> 00:22:41.730
Cover each of these
triangles in some order.

00:22:41.730 --> 00:22:44.630
We're going to cover
each one at least once,

00:22:44.630 --> 00:22:48.180
possibly more if
we're not careful.

00:22:48.180 --> 00:22:49.960
For starters, we'll
be not careful.

00:22:56.650 --> 00:23:07.160
And we're going to do this
by using a zigzag path

00:23:07.160 --> 00:23:15.140
parallel to the
next edge starting

00:23:15.140 --> 00:23:16.620
from the opposite corner.

00:23:16.620 --> 00:23:19.470
So some technical details.

00:23:19.470 --> 00:23:24.800
Much easier to see in a picture,
so let me draw you a picture.

00:23:32.540 --> 00:23:35.550
Let's say we want to
visit this triangle first,

00:23:35.550 --> 00:23:37.067
and after we visit
this triangle,

00:23:37.067 --> 00:23:38.650
let's say we've
planned out that we're

00:23:38.650 --> 00:23:40.380
going to visit
this triangle next.

00:23:40.380 --> 00:23:43.300
After that one, we're going
to go to this triangle.

00:23:43.300 --> 00:23:46.490
So this is what I'd call
the next edge, because it's

00:23:46.490 --> 00:23:48.910
the edge connecting
to the next triangle.

00:23:48.910 --> 00:23:51.310
So I'd like to zigzag
parallel to this edge,

00:23:51.310 --> 00:23:54.480
so I want to go back
and forth like that.

00:23:54.480 --> 00:23:58.230
And then it says I want to start
at the opposite corner, which

00:23:58.230 --> 00:24:00.220
is this one.

00:24:00.220 --> 00:24:01.720
So I'm going to
start here, and I'll

00:24:01.720 --> 00:24:03.136
draw this a little
more precisely.

00:24:06.740 --> 00:24:09.090
I'm going to take
my strip and just

00:24:09.090 --> 00:24:14.770
go this way for a little while,
and turn around and come back

00:24:14.770 --> 00:24:19.590
this way, and then
turn around, and we're

00:24:19.590 --> 00:24:23.420
going to see how to do
turning around in a moment, so

00:24:23.420 --> 00:24:24.580
something like that.

00:24:29.560 --> 00:24:33.430
Now I've got to start planning
a little bit, because I want

00:24:33.430 --> 00:24:36.210
to do this triangle in the same
way, meaning I want to go back

00:24:36.210 --> 00:24:39.380
and forth parallel
to the next edge

00:24:39.380 --> 00:24:41.520
starting at the opposite corner.

00:24:41.520 --> 00:24:44.960
So that means next thing I want
to do is start at this corner,

00:24:44.960 --> 00:24:47.700
so I need to set this up
so that I don't end here.

00:24:47.700 --> 00:24:49.130
I'd like to end here.

00:24:49.130 --> 00:24:52.900
You can do that just by
doing one more iteration.

00:24:52.900 --> 00:24:55.170
If I end up with the
wrong parity-- here

00:24:55.170 --> 00:24:57.285
it looks like I won't too much.

00:24:59.950 --> 00:25:01.280
Here it's a little ugly.

00:25:01.280 --> 00:25:03.890
Got a little bit of uncovered
portion of the triangle,

00:25:03.890 --> 00:25:07.330
so you need a slightly
different turn here.

00:25:07.330 --> 00:25:10.640
Then I'll just come and
sort of overlap myself.

00:25:10.640 --> 00:25:11.150
That's OK.

00:25:11.150 --> 00:25:13.500
I just have to cover
it at least once.

00:25:13.500 --> 00:25:17.010
And then I do some
kind of turn here,

00:25:17.010 --> 00:25:19.522
and then I'm going to do this.

00:25:19.522 --> 00:25:21.230
So there's obviously
some questions here.

00:25:21.230 --> 00:25:23.290
How do I make these
180 degree turns?

00:25:23.290 --> 00:25:24.930
How do I make an arbitrary turn?

00:25:24.930 --> 00:25:27.310
How do I turn even when I'm
allowed to overlap myself?

00:25:27.310 --> 00:25:29.101
I'm not going to worry
about that too much,

00:25:29.101 --> 00:25:30.360
basically the same.

00:25:30.360 --> 00:25:33.550
Basically, how do I turn?

00:25:33.550 --> 00:25:34.220
How do I turn?

00:25:34.220 --> 00:25:40.440
Well, let's take our
strips and do some turning,

00:25:40.440 --> 00:25:46.140
and I have a slide
to follow along.

00:25:46.140 --> 00:25:52.970
I have a big strip,
a little bit too big.

00:25:52.970 --> 00:25:56.020
So the idea is you
have your strip,

00:25:56.020 --> 00:25:58.960
you're gone merrily along,
and at some point you decide,

00:25:58.960 --> 00:26:02.470
oh, I really need to
make a 132 degree turn.

00:26:02.470 --> 00:26:04.624
I mean, it could be
anything because here, we've

00:26:04.624 --> 00:26:05.790
got to make some crazy turn.

00:26:05.790 --> 00:26:07.510
We don't know what
the amount is.

00:26:07.510 --> 00:26:09.480
So the turn gadget
is always the same.

00:26:09.480 --> 00:26:12.659
You start out by making a
mountain fold perpendicular

00:26:12.659 --> 00:26:13.200
to the strip.

00:26:16.340 --> 00:26:17.985
So just fold in
half, so to speak.

00:26:17.985 --> 00:26:19.485
Of course, half of
this is connected

00:26:19.485 --> 00:26:21.220
to everything you built already.

00:26:21.220 --> 00:26:22.970
The other half, you don't know.

00:26:22.970 --> 00:26:27.010
And then you take the back layer
and fold it to whatever angle

00:26:27.010 --> 00:26:27.510
you want.

00:26:27.510 --> 00:26:31.740
You have this degree of freedom
wherever you want to put it.

00:26:31.740 --> 00:26:34.370
So for example, if we wanted
to make an obtuse angle.

00:26:34.370 --> 00:26:37.290
I'm always going to fold
incident to that bottom corner.

00:26:40.170 --> 00:26:43.340
It's a little hard to
handle, but you get the idea.

00:26:43.340 --> 00:26:47.160
That's a nice, perfect
turn right there.

00:26:47.160 --> 00:26:49.080
Looks even cooler on my side.

00:26:49.080 --> 00:26:52.790
You just see the angular
bisector or something.

00:26:52.790 --> 00:26:54.770
So that's a decent obtuse angle.

00:26:54.770 --> 00:26:58.450
Things are little bit uglier
when you make an acute angle,

00:26:58.450 --> 00:27:01.110
something like this.

00:27:01.110 --> 00:27:03.290
You could make whatever
angle you want.

00:27:03.290 --> 00:27:04.790
You should have
enough strip to make

00:27:04.790 --> 00:27:09.060
several turns if
you feel like it.

00:27:09.060 --> 00:27:12.122
If I make an acute angle like
this, I get some overhang.

00:27:12.122 --> 00:27:14.330
So I have what I want, which
is the strip coming here

00:27:14.330 --> 00:27:17.920
and the strip coming
here at the extremes,

00:27:17.920 --> 00:27:20.980
but over in this corner I
have some extra material,

00:27:20.980 --> 00:27:23.120
and it could be a lot.

00:27:23.120 --> 00:27:25.320
But whatever it is,
I'll just rid of it

00:27:25.320 --> 00:27:27.610
by folding it
underneath repeatedly.

00:27:27.610 --> 00:27:30.390
In this case, one
fold, it's gone.

00:27:30.390 --> 00:27:32.270
In general, when
I make that fold,

00:27:32.270 --> 00:27:36.220
it might come out over here and
I have to wrap around that cone

00:27:36.220 --> 00:27:38.840
several times.

00:27:38.840 --> 00:27:41.680
There's probably an
example of that here.

00:27:41.680 --> 00:27:43.850
This figure in the
middle version,

00:27:43.850 --> 00:27:47.090
you start just the same by
folding a super acute angle.

00:27:47.090 --> 00:27:49.740
I fold that corner over and
it overhangs a little bit

00:27:49.740 --> 00:27:51.690
on the bottom,
but it got tinier.

00:27:51.690 --> 00:27:53.440
And if you just wrap
it around the corner,

00:27:53.440 --> 00:27:56.330
eventually it will disappear and
you have exactly what you want,

00:27:56.330 --> 00:27:58.538
which is a strip coming
horizontally and then a strip

00:27:58.538 --> 00:28:02.230
coming off diagonally at
whatever angle you wanted.

00:28:02.230 --> 00:28:03.624
So that's really easy.

00:28:03.624 --> 00:28:05.040
That's what we
call a turn gadget.

00:28:13.680 --> 00:28:15.915
So we do this
using turn gadgets.

00:28:19.970 --> 00:28:23.020
Now, you can't actually turn
with 180 degree angle here,

00:28:23.020 --> 00:28:25.050
which is why in
this picture, what I

00:28:25.050 --> 00:28:30.210
drew was a 90 degree turn and
then another 90 degree turn.

00:28:30.210 --> 00:28:32.320
You can do that
however you want.

00:28:32.320 --> 00:28:33.930
That's one way.

00:28:33.930 --> 00:28:37.390
In fact, the way I've shown
it, it would be orthogonal,

00:28:37.390 --> 00:28:41.200
but doesn't really matter.

00:28:41.200 --> 00:28:44.350
These turns are not much harder.

00:28:44.350 --> 00:28:47.310
You just do one or two of
those turns to get aligned.

00:28:47.310 --> 00:28:50.510
And you can decide here, do
I turn around to the left

00:28:50.510 --> 00:28:54.409
or do I turn around to the
right, and then I zigzag?

00:28:54.409 --> 00:28:56.450
Depending on which way I
go, I will end up either

00:28:56.450 --> 00:28:58.950
at this corner or this corner,
and if my next triangle's

00:28:58.950 --> 00:29:01.350
up here, then I want to
end up at this corner.

00:29:01.350 --> 00:29:03.330
If my next triangle's
over here, then I

00:29:03.330 --> 00:29:06.140
want to end up at this corner.

00:29:06.140 --> 00:29:08.190
You plan out ahead of
time what order you're

00:29:08.190 --> 00:29:10.840
going to visit the
triangles, just decide.

00:29:10.840 --> 00:29:13.090
Technically, it's like the
traveling salesman problem,

00:29:13.090 --> 00:29:15.120
but you don't have to be
efficient at the moment.

00:29:15.120 --> 00:29:16.630
We're not worrying
about efficiency.

00:29:16.630 --> 00:29:19.100
Just visit triangle after
triangle, keep going to one

00:29:19.100 --> 00:29:21.260
you haven't visited before.

00:29:21.260 --> 00:29:22.510
It could be far away from you.

00:29:22.510 --> 00:29:24.230
Maybe you have to go over
many triangles you visited

00:29:24.230 --> 00:29:25.460
before, but eventually
you'll get to one

00:29:25.460 --> 00:29:27.900
you haven't visited until
you're done, and then boom,

00:29:27.900 --> 00:29:29.630
you've made anything.

00:29:29.630 --> 00:29:31.710
Amazing.

00:29:31.710 --> 00:29:33.830
We haven't quite
proved the theorem.

00:29:33.830 --> 00:29:38.270
At this point, we can make any
connected union of polygons.

00:29:38.270 --> 00:29:40.110
This is one polygon,
but if you're

00:29:40.110 --> 00:29:44.650
in 3D, when you cross over
from one polygon to the next,

00:29:44.650 --> 00:29:47.464
you might have to bend it at
some angle that's not flat,

00:29:47.464 --> 00:29:49.130
but then you can make
any 3D thing, too.

00:29:49.130 --> 00:29:49.857
Yeah?

00:29:49.857 --> 00:29:52.425
AUDIENCE: When you wrap around
the triangle whose edge type

00:29:52.425 --> 00:29:54.760
is the bottom, how
do you do that when

00:29:54.760 --> 00:29:56.400
the top left triangle is there?

00:29:56.400 --> 00:29:57.270
PROFESSOR: Sorry.

00:29:57.270 --> 00:29:58.971
When I wrap around here?

00:29:58.971 --> 00:30:01.572
AUDIENCE: No, the triangle
whose edge is the bottom edge.

00:30:01.572 --> 00:30:02.405
PROFESSOR: This one?

00:30:02.405 --> 00:30:03.030
AUDIENCE: Yeah.

00:30:03.030 --> 00:30:04.919
How do you do that,
given that there's

00:30:04.919 --> 00:30:07.620
the triangle in the top left?

00:30:07.620 --> 00:30:10.444
PROFESSOR: Oh, I see.

00:30:10.444 --> 00:30:11.860
The question is,
what do I do here

00:30:11.860 --> 00:30:14.050
because I'm going to overlap
into this triangle again?

00:30:14.050 --> 00:30:14.716
AUDIENCE: Right.

00:30:14.716 --> 00:30:15.390
PROFESSOR: Yeah.

00:30:15.390 --> 00:30:17.223
So you have to be a
little bit careful here,

00:30:17.223 --> 00:30:19.890
and there's one other gadget
I need to mention here,

00:30:19.890 --> 00:30:24.090
which is the hide gadget,
I think it's called.

00:30:27.477 --> 00:30:29.310
Because I didn't fold
exactly this triangle,

00:30:29.310 --> 00:30:31.180
I folded too much.

00:30:31.180 --> 00:30:35.040
At this point when I have the
strip here, and maybe a little

00:30:35.040 --> 00:30:37.140
bit out of the way,
I'd like to get rid

00:30:37.140 --> 00:30:40.470
of all this messy stuff,
just tuck it underneath.

00:30:40.470 --> 00:30:44.220
So I'm going to fold along this
line, fold all this stuff back

00:30:44.220 --> 00:30:48.300
behind, and that might still be
a mess because it could stick

00:30:48.300 --> 00:30:50.540
out over here or somewhere else.

00:30:50.540 --> 00:30:53.260
So let me tell you about the
hide gadget a little bit,

00:30:53.260 --> 00:30:54.340
maybe over here.

00:31:02.030 --> 00:31:04.950
You have to be a little careful
when you do that exactly,

00:31:04.950 --> 00:31:07.000
but it's not that hard.

00:31:13.000 --> 00:31:23.770
So in general,
the hide gadget is

00:31:23.770 --> 00:31:26.300
you have some convex polygon.

00:31:26.300 --> 00:31:28.870
Here, it's always going to
be a triangle, actually,

00:31:28.870 --> 00:31:31.610
but this would work
for any convex polygon.

00:31:31.610 --> 00:31:35.020
You have some folding which
contains that polygon,

00:31:35.020 --> 00:31:37.180
but it might go outside
all over the place.

00:31:37.180 --> 00:31:38.519
That's our situation.

00:31:38.519 --> 00:31:39.435
We want this triangle.

00:31:39.435 --> 00:31:41.320
We have a folding that
includes the triangle

00:31:41.320 --> 00:31:44.290
but it has all this
junk on the outside.

00:31:44.290 --> 00:31:47.460
All you need to do is
repeatedly fold along

00:31:47.460 --> 00:31:50.590
the extension of
each of these edges,

00:31:50.590 --> 00:31:53.180
and you can prove-- I'm
not going to do it here

00:31:53.180 --> 00:31:55.100
because it's a
little bit messy--

00:31:55.100 --> 00:31:57.960
but as you fold that
thing, obviously

00:31:57.960 --> 00:32:00.640
the area that you go
outside gets smaller,

00:32:00.640 --> 00:32:03.440
and you do make steady
progress and eventually,

00:32:03.440 --> 00:32:05.817
after finitely many folds,
you will have reduced

00:32:05.817 --> 00:32:07.400
this thing down to
the convex polygon.

00:32:07.400 --> 00:32:10.570
Just keep folding mountain
fold along each of those edges.

00:32:13.280 --> 00:32:16.524
And I think there's even
a pseudo polynomial bound

00:32:16.524 --> 00:32:18.190
on the number of folds
you need to make,

00:32:18.190 --> 00:32:20.690
although I won't
go into that here.

00:32:24.032 --> 00:32:25.740
So that's what you do
with this triangle.

00:32:25.740 --> 00:32:30.940
Then you fold the next one, and
then you apply the hide gadget

00:32:30.940 --> 00:32:32.110
to that triangle.

00:32:32.110 --> 00:32:36.562
When you do that, there is
this triangle in the way.

00:32:36.562 --> 00:32:38.270
Technically, I guess,
that wouldn't quite

00:32:38.270 --> 00:32:41.100
be simple folds because you're
folding along this line.

00:32:41.100 --> 00:32:43.600
You need to tuck it
in between the layers.

00:32:43.600 --> 00:32:45.870
You have to avoid collision
with this triangle

00:32:45.870 --> 00:32:47.990
and go underneath this one.

00:32:47.990 --> 00:32:48.490
Hm.

00:32:48.490 --> 00:32:50.305
I hadn't thought about that.

00:32:50.305 --> 00:32:52.180
I'd like to say this
works with simple folds.

00:32:56.070 --> 00:32:58.340
It sort of does in that
each fold you make,

00:32:58.340 --> 00:33:00.490
you're just folding
along one line at a time,

00:33:00.490 --> 00:33:03.560
but you do actually
collide in the middle.

00:33:03.560 --> 00:33:05.100
It's not so ideal.

00:33:05.100 --> 00:33:09.050
Origami folds, this
definitely works.

00:33:09.050 --> 00:33:11.820
I wonder if there's a way to
do it with simple folds now.

00:33:11.820 --> 00:33:12.320
Interesting.

00:33:15.916 --> 00:33:16.416
Hm.

00:33:16.416 --> 00:33:17.392
I don't know.

00:33:17.392 --> 00:33:21.296
AUDIENCE: Can you
undo the corner gadget

00:33:21.296 --> 00:33:24.224
to separate the
triangles, hide the folds,

00:33:24.224 --> 00:33:26.955
and then put them back?

00:33:26.955 --> 00:33:29.450
PROFESSOR: The question is,
can I pull them apart, do them

00:33:29.450 --> 00:33:31.130
separately, and push
them back together?

00:33:31.130 --> 00:33:33.588
Pulling them apart and pushing
them back together would not

00:33:33.588 --> 00:33:34.850
be simple folds, I think.

00:33:34.850 --> 00:33:35.820
Maybe you could do it.

00:33:35.820 --> 00:33:37.403
AUDIENCE: You just
type a [INAUDIBLE].

00:33:37.403 --> 00:33:38.430
PROFESSOR: Yeah, OK.

00:33:38.430 --> 00:33:39.215
Interesting.

00:33:39.215 --> 00:33:40.340
We should think about that.

00:33:40.340 --> 00:33:42.950
I'm surprised this is not
known, but I'm pretty sure

00:33:42.950 --> 00:33:46.190
now that it's not known.

00:33:46.190 --> 00:33:47.750
Maybe first open
problem session,

00:33:47.750 --> 00:33:50.157
we can solve that
in a few minutes.

00:33:50.157 --> 00:33:50.865
Should be doable.

00:33:56.700 --> 00:33:58.630
There's one more
gadget we need if we

00:33:58.630 --> 00:34:01.760
want to get the
two color pattern.

00:34:05.260 --> 00:34:07.390
This polygon maybe
is all one color.

00:34:07.390 --> 00:34:10.260
Maybe it's all the
colored side of the paper.

00:34:10.260 --> 00:34:13.489
But then at some point,
we might transition over

00:34:13.489 --> 00:34:19.747
to another polygon, and
maybe that's the other color.

00:34:19.747 --> 00:34:21.830
So all we're going to do
is we're, again, visiting

00:34:21.830 --> 00:34:23.290
these triangles in some order.

00:34:23.290 --> 00:34:27.370
Whenever we go between a black
triangle and a white triangle,

00:34:27.370 --> 00:34:30.630
we are going to apply
a color reversal

00:34:30.630 --> 00:34:37.089
gadget, which is very simple.

00:34:42.280 --> 00:34:44.989
I forgot to color one
side of the strip,

00:34:44.989 --> 00:34:50.500
so bear with me for a second,
and feel free to color

00:34:50.500 --> 00:34:51.250
in your own strip.

00:34:54.687 --> 00:34:56.659
Probably killing this
microphone right here.

00:35:00.840 --> 00:35:03.070
Purple on one side,
white on the other,

00:35:03.070 --> 00:35:06.490
although it's so transparent,
it looks almost the same.

00:35:06.490 --> 00:35:07.960
The idea is very simple.

00:35:07.960 --> 00:35:09.620
Where are we starting from?

00:35:09.620 --> 00:35:12.970
We're starting from
the not purple side.

00:35:12.970 --> 00:35:15.130
Then we make a mountain fold.

00:35:15.130 --> 00:35:16.920
It's just like a turn gadget.

00:35:16.920 --> 00:35:20.320
In fact, it's just like
you're turning 90 degrees.

00:35:20.320 --> 00:35:24.400
We fold up like this, and
then we just immediately make

00:35:24.400 --> 00:35:28.840
another 90 degree turn
without the first fold,

00:35:28.840 --> 00:35:34.960
and we get a sharp transition
straight along the strip

00:35:34.960 --> 00:35:39.130
from light purple to dark
purple, it looks like,

00:35:39.130 --> 00:35:43.389
but from the white side
to the purple side.

00:35:43.389 --> 00:35:45.680
Right when you transition
between any pair of triangles

00:35:45.680 --> 00:35:48.000
of the opposite color, you
just apply this gadget.

00:35:48.000 --> 00:35:49.680
You make three more
folds, and boom,

00:35:49.680 --> 00:35:52.287
you've got your color reversal.

00:35:52.287 --> 00:35:53.620
AUDIENCE: Can you do that again?

00:35:53.620 --> 00:35:53.970
PROFESSOR: Do it again?

00:35:53.970 --> 00:35:54.470
All right.

00:35:54.470 --> 00:35:56.040
So first I make a mountain fold.

00:35:58.740 --> 00:36:00.690
Now both sides are white.

00:36:00.690 --> 00:36:05.680
Then I fold this guy up, so
now I have a regular 90 degree

00:36:05.680 --> 00:36:09.007
turn, and then I
fold this guy back.

00:36:09.007 --> 00:36:11.590
That's the tricky part because
you can't see what's happening.

00:36:11.590 --> 00:36:13.330
Let me flip it over for you.

00:36:13.330 --> 00:36:20.080
So I'm just folding
the top two layers here

00:36:20.080 --> 00:36:26.412
along that 45 degree angle,
and then I get that transition.

00:36:26.412 --> 00:36:28.120
On this side, it's
still purple and white

00:36:28.120 --> 00:36:29.161
but it's a little uglier.

00:36:31.720 --> 00:36:32.600
It's on the slide.

00:36:32.600 --> 00:36:35.720
You can try again.

00:36:35.720 --> 00:36:38.100
It doesn't say here, but
fold just the back layers.

00:36:43.720 --> 00:36:44.790
All right?

00:36:44.790 --> 00:36:47.070
Questions?

00:36:47.070 --> 00:36:50.270
So that's how you can
visit all these polygons,

00:36:50.270 --> 00:36:54.150
do color transitions, you can do
it in 3D, make any polyhedron.

00:36:54.150 --> 00:36:56.680
A little crazy, but
the point is you

00:36:56.680 --> 00:36:59.810
do need to do some algorithmic
construction to really see

00:36:59.810 --> 00:37:01.410
this method work.

00:37:01.410 --> 00:37:02.632
You need those three gadgets.

00:37:02.632 --> 00:37:04.340
You need to be sure
that you can actually

00:37:04.340 --> 00:37:05.589
combine them in the right way.

00:37:05.589 --> 00:37:08.680
And I'm hand waving a little
bit some of these details.

00:37:08.680 --> 00:37:11.330
You should be more
careful, but it works.

00:37:14.950 --> 00:37:17.612
It's obviously
horribly inefficient,

00:37:17.612 --> 00:37:19.945
but we can make it at least
a little bit more efficient.

00:37:19.945 --> 00:37:21.070
Let me tell you about that.

00:37:39.640 --> 00:37:54.000
So we can achieve something I
call pseudo efficiency, which

00:37:54.000 --> 00:38:00.200
is if you are allowed to
start with any rectangle

00:38:00.200 --> 00:38:10.080
you want, so in
particular, if we

00:38:10.080 --> 00:38:13.150
start with a long strip of
paper like you did here,

00:38:13.150 --> 00:38:14.940
then you can make
this super efficient.

00:38:23.580 --> 00:38:30.260
The area of the piece of
paper that we start with

00:38:30.260 --> 00:38:40.256
can be equal to the
surface area of the thing

00:38:40.256 --> 00:38:41.130
that we want to fold.

00:38:44.030 --> 00:38:46.390
If we could achieve this,
we would be really happy.

00:38:46.390 --> 00:38:47.840
That means we have zero wastage.

00:38:47.840 --> 00:38:49.810
I can't get zero
wastage, but I can

00:38:49.810 --> 00:38:52.205
get just a little
tiny bit of wastage.

00:38:55.280 --> 00:39:00.290
So we write epsilon for a very
tiny result, very tiny error.

00:39:00.290 --> 00:39:01.791
So epsilon does
have to be positive,

00:39:01.791 --> 00:39:03.290
we have to have
some wastage, but it

00:39:03.290 --> 00:39:04.510
can be arbitrarily small.

00:39:04.510 --> 00:39:07.850
Basically, the narrower and
longer you make your strip,

00:39:07.850 --> 00:39:09.600
the closer the area
of your piece of paper

00:39:09.600 --> 00:39:12.780
gets to the surface area of your
target shape, which is the best

00:39:12.780 --> 00:39:14.590
you can hope for.

00:39:14.590 --> 00:39:17.630
So with this crazy proviso,
which is completely impractical

00:39:17.630 --> 00:39:21.270
we get a super
practical outcome.

00:39:21.270 --> 00:39:22.960
And the summation is
not very practical,

00:39:22.960 --> 00:39:25.439
but it's kind of nifty,
and I particularly

00:39:25.439 --> 00:39:26.480
like the proof technique.

00:39:26.480 --> 00:39:35.650
It uses a very powerful tool in
computational geometry, so let

00:39:35.650 --> 00:39:36.400
me show it to you.

00:39:42.260 --> 00:39:47.400
So the central issue is that
while visiting a triangle,

00:39:47.400 --> 00:39:48.860
we actually do
pretty efficiently.

00:39:48.860 --> 00:39:51.390
Except for the very
last strip, where

00:39:51.390 --> 00:39:55.950
we might overlap ourselves,
except for these little corner

00:39:55.950 --> 00:39:58.110
turn gadgets, and also
the material that's

00:39:58.110 --> 00:40:00.407
used up in the
gadgets themselves,

00:40:00.407 --> 00:40:01.740
We're actually really efficient.

00:40:01.740 --> 00:40:04.590
We're covering this
triangle almost one for one.

00:40:04.590 --> 00:40:06.470
There's a little bit
of garbage at the edge

00:40:06.470 --> 00:40:09.010
and a little bit of
garbage at this edge,

00:40:09.010 --> 00:40:11.720
but you could imagine as
the strip gets smaller,

00:40:11.720 --> 00:40:14.990
this wastage gets smaller,
because it's essentially

00:40:14.990 --> 00:40:18.120
this length times the
width of the strip up

00:40:18.120 --> 00:40:19.400
to constant factors.

00:40:19.400 --> 00:40:21.810
So as the strip gets narrower,
it gets closer and closer

00:40:21.810 --> 00:40:24.834
to this thing times
0, so this wastage

00:40:24.834 --> 00:40:26.000
gets closer and closer to 0.

00:40:26.000 --> 00:40:28.660
Same thing over here,
same thing over here.

00:40:28.660 --> 00:40:30.290
The real problem
at this point is

00:40:30.290 --> 00:40:33.460
that we visit some triangles
possibly many times.

00:40:33.460 --> 00:40:37.210
I was totally free about
how I visited triangles.

00:40:37.210 --> 00:40:40.690
Maybe I go here and then over
here and then back over here.

00:40:40.690 --> 00:40:42.510
I may be very wasteful.

00:40:42.510 --> 00:40:44.580
So I just want to
avoid that wastage.

00:40:44.580 --> 00:40:47.795
Just visit each triangle
once, exactly once.

00:40:47.795 --> 00:40:50.880
How could you do
it exactly once?

00:40:50.880 --> 00:40:54.680
With a great idea called
Hamiltonian refinement.

00:40:57.980 --> 00:41:00.000
I've used this idea many times.

00:41:00.000 --> 00:41:03.026
This was the first
time I used it.

00:41:03.026 --> 00:41:04.330
It's very cool.

00:41:04.330 --> 00:41:07.280
I think it goes back
to '97 or something.

00:41:07.280 --> 00:41:10.365
So you have some triangulation.

00:41:14.830 --> 00:41:17.907
I'm going to keep it
relatively simple.

00:41:17.907 --> 00:41:20.240
And I'd really like to visit
each triangle exactly once.

00:41:20.240 --> 00:41:21.656
So you think, OK,
maybe I'll start

00:41:21.656 --> 00:41:25.880
here, then I'll go over here,
and over here, and uh oh.

00:41:25.880 --> 00:41:27.550
Then I'm stuck.

00:41:27.550 --> 00:41:29.290
I can't get to the
other triangles

00:41:29.290 --> 00:41:33.260
without revisiting
an existing triangle.

00:41:33.260 --> 00:41:35.630
It's impossible to find what
we call a Hamiltonian path.

00:41:35.630 --> 00:41:38.690
Hamiltonian path will visit
each triangle exactly once.

00:41:38.690 --> 00:41:40.866
But who cares about
these triangles?

00:41:40.866 --> 00:41:42.740
I just made these
triangles to make it easier

00:41:42.740 --> 00:41:44.170
to think about a polygon.

00:41:44.170 --> 00:41:45.670
I could actually
cut these triangles

00:41:45.670 --> 00:41:50.610
into smaller triangles and
ideally make it Hamiltonian.

00:41:50.610 --> 00:41:53.940
So here's the idea.

00:41:53.940 --> 00:41:57.850
There's this idea called the
dual graph, which is also

00:41:57.850 --> 00:42:01.020
pretty central in
computational geometry,

00:42:01.020 --> 00:42:04.180
where I'm going to make a
little dot for every triangle

00:42:04.180 --> 00:42:06.610
inside each triangle,
and then I'm

00:42:06.610 --> 00:42:08.720
going to connect
those dots whenever

00:42:08.720 --> 00:42:11.430
there is two triangles
that share an edge.

00:42:15.620 --> 00:42:17.960
This is called the dual graph.

00:42:17.960 --> 00:42:22.380
These parts are called the dual
graph of the triangulation.

00:42:22.380 --> 00:42:24.130
And in this picture,
I've got a nice, kind

00:42:24.130 --> 00:42:25.880
of tree-shaped graph.

00:42:25.880 --> 00:42:27.980
In general, you might
get cycles, but then

00:42:27.980 --> 00:42:29.966
just throw away edges
until you get a tree.

00:42:29.966 --> 00:42:31.590
I really like to
think of it as a tree,

00:42:31.590 --> 00:42:35.210
and if I throw in enough
edges, it will be a tree.

00:42:35.210 --> 00:42:40.920
Then my idea is I'd really
like to just visit everything

00:42:40.920 --> 00:42:44.850
in this order, walking
around the tree.

00:42:47.990 --> 00:42:49.500
I can go around in
a cycle and visit

00:42:49.500 --> 00:42:52.474
each of these little
polygons exactly once.

00:42:52.474 --> 00:42:54.015
Now, these polygons
aren't triangles,

00:42:54.015 --> 00:42:57.790
which is kind of annoying,
so I just triangulate.

00:42:57.790 --> 00:43:03.520
So you could just triangulate
like this, I guess.

00:43:03.520 --> 00:43:07.930
If you want to be
excessive and simpler,

00:43:07.930 --> 00:43:10.320
from every one of
these dots, you

00:43:10.320 --> 00:43:12.710
can cut to the midpoint
of the three edges

00:43:12.710 --> 00:43:14.740
and also cut to the vertices.

00:43:14.740 --> 00:43:17.090
For every triangle, I just
cut to the three vertices

00:43:17.090 --> 00:43:20.320
and cut to the midpoints.

00:43:20.320 --> 00:43:24.160
You do that, and
you are guaranteed.

00:43:24.160 --> 00:43:27.620
This gets a little messy,
but this is theoretical.

00:43:30.590 --> 00:43:34.160
You will increase the number of
triangles by a factor of six.

00:43:34.160 --> 00:43:38.060
Each triangle gets replaced by
six little smaller triangles.

00:43:38.060 --> 00:43:40.980
It covers the same region,
and yet now it's Hamiltonian.

00:43:40.980 --> 00:43:43.770
Now I can visit these triangles
and visit each triangle exactly

00:43:43.770 --> 00:43:47.010
once, and that's how you
get pseudo efficiency.

00:43:47.010 --> 00:43:50.231
Pretty easy once
you know this trick.

00:43:50.231 --> 00:43:50.730
Questions?

00:43:53.932 --> 00:43:55.840
AUDIENCE: Why is it
called pseudo efficiency?

00:43:55.840 --> 00:43:57.390
PROFESSOR: Well, I made that up.

00:43:57.390 --> 00:43:59.420
Why is it called
pseudo efficiency?

00:43:59.420 --> 00:44:02.550
Because it's not
really efficient.

00:44:02.550 --> 00:44:05.960
It is efficient,
I agree, but only

00:44:05.960 --> 00:44:07.930
with this crazy
assumption that you're

00:44:07.930 --> 00:44:10.430
allowed to start with an
arbitrarily narrow strip,

00:44:10.430 --> 00:44:12.850
and that's not really practical.

00:44:12.850 --> 00:44:15.610
The practical origami problem
is I start with a square.

00:44:15.610 --> 00:44:20.070
How big of a square do I
need to fold this shape?

00:44:20.070 --> 00:44:25.000
And that's something we'll
talk about probably next week.

00:44:25.000 --> 00:44:27.320
That's been studied
but it's a lot harder,

00:44:27.320 --> 00:44:30.115
so I'm starting
with the easy stuff.

00:44:30.115 --> 00:44:32.698
AUDIENCE: Does this necessarily
keep the mountains and valleys

00:44:32.698 --> 00:44:34.330
that you defined
at the beginning?

00:44:34.330 --> 00:44:36.871
PROFESSOR: Will this keep the
mountains and valleys the same?

00:44:38.962 --> 00:44:41.420
The input didn't specify where
the mountains valleys should

00:44:41.420 --> 00:44:41.920
be.

00:44:41.920 --> 00:44:45.370
It just said you have
to make these polygons.

00:44:45.370 --> 00:44:49.680
Every fold you make in this
construction will stay,

00:44:49.680 --> 00:44:52.904
but you may make more folds that
go on top of existing folds.

00:44:52.904 --> 00:44:55.320
I think all the mountains and
valleys that you define here

00:44:55.320 --> 00:44:58.710
will remain mountains or valleys
as we specified, but keep

00:44:58.710 --> 00:45:02.100
adding creases until you finish.

00:45:02.100 --> 00:45:04.100
Yeah?

00:45:04.100 --> 00:45:06.850
AUDIENCE: Are you
just doing a 2D case

00:45:06.850 --> 00:45:09.334
of what we call the
3D pyramid there?

00:45:09.334 --> 00:45:09.833
[INAUDIBLE]

00:45:13.440 --> 00:45:15.450
PROFESSOR: The question
is, what about 3D?

00:45:15.450 --> 00:45:18.900
This dual graph idea
does work in 3D.

00:45:18.900 --> 00:45:22.020
I drew a 2D picture because
it's a lot easier to draw,

00:45:22.020 --> 00:45:26.067
but you could imagine, for
example, you have a cube.

00:45:26.067 --> 00:45:27.900
I'm not going to be
able to draw everything,

00:45:27.900 --> 00:45:31.810
but you can still
form a dual graph.

00:45:31.810 --> 00:45:33.365
I should have
triangulated the cube,

00:45:33.365 --> 00:45:35.490
but in fact, you can do
this for any kind of graph.

00:45:35.490 --> 00:45:40.277
I'm making a dot for
every face of the thing

00:45:40.277 --> 00:45:41.110
that I want to make.

00:45:41.110 --> 00:45:43.185
Each of these
polygons, I make a dot.

00:45:43.185 --> 00:45:45.540
So in fact, if I
finished this picture,

00:45:45.540 --> 00:45:51.940
I would get the dual
graph is the octahedron.

00:45:51.940 --> 00:45:55.630
It would look something
like this topologically.

00:45:55.630 --> 00:45:57.940
It doesn't have to
be a geometric thing.

00:45:57.940 --> 00:45:59.764
It works just as well in 3D.

00:45:59.764 --> 00:46:01.430
It actually still
works even if you just

00:46:01.430 --> 00:46:03.900
say, for every
triangle, just cut

00:46:03.900 --> 00:46:07.382
to the midpoints of the three
edges and to the vertices.

00:46:07.382 --> 00:46:08.840
Then that thing
will be Hamiltonian

00:46:08.840 --> 00:46:11.380
and you can walk around
it by doing this dual

00:46:11.380 --> 00:46:13.890
and spanning tree construction.

00:46:13.890 --> 00:46:15.390
I won't go into it
exactly, but that

00:46:15.390 --> 00:46:18.440
could be done in linear time.

00:46:18.440 --> 00:46:20.440
I'm still only making a
two dimensional surface.

00:46:20.440 --> 00:46:22.290
I'm not trying to
make a 3D solid here,

00:46:22.290 --> 00:46:24.990
so that's why locally,
it's two dimensional.

00:46:24.990 --> 00:46:27.060
Locally, this just works.

00:46:27.060 --> 00:46:29.450
Another question?

00:46:29.450 --> 00:46:33.602
AUDIENCE: So it seems that if
you could also just stick with

00:46:33.602 --> 00:46:37.204
the original construction,
and when you cannot find

00:46:37.204 --> 00:46:41.890
the Hamiltonian path around
the triangles, [INAUDIBLE],

00:46:41.890 --> 00:46:45.710
you don't cover them again, you
just get a narrow strip that

00:46:45.710 --> 00:46:48.410
runs through them and
just rigidly [INAUDIBLE]?

00:46:48.410 --> 00:46:49.660
PROFESSOR: That's a neat idea.

00:46:49.660 --> 00:46:51.920
So instead of doing this
Hamiltonian refinement,

00:46:51.920 --> 00:46:54.320
you could visit the
triangles in any order,

00:46:54.320 --> 00:46:56.250
but then to get
from one triangle

00:46:56.250 --> 00:46:58.410
to some distant
triangle, instead

00:46:58.410 --> 00:47:01.260
of covering all the triangles in
the middle which you've already

00:47:01.260 --> 00:47:03.900
covered, which is
excessive, just go

00:47:03.900 --> 00:47:08.249
as straight there as possible.

00:47:08.249 --> 00:47:10.540
Locally, you'd think of that
as being a one dimensional

00:47:10.540 --> 00:47:12.810
wastage instead of a
two dimensional wastage.

00:47:12.810 --> 00:47:16.520
So probably you can get the
same result by that technique.

00:47:16.520 --> 00:47:18.130
I hadn't thought of that before.

00:47:18.130 --> 00:47:22.780
We should check it, but
I think that should work.

00:47:22.780 --> 00:47:25.600
This is kind of cooler, just
because it uses a fancy tool,

00:47:25.600 --> 00:47:28.504
but I imagine with a
little more analysis,

00:47:28.504 --> 00:47:30.295
you could prove that
that works because you

00:47:30.295 --> 00:47:31.836
know there aren't
too many triangles.

00:47:34.420 --> 00:47:34.920
Good.

00:47:38.070 --> 00:47:40.370
I think I'm going to
skip seem placement

00:47:40.370 --> 00:47:42.450
and move on to foldability.

00:47:42.450 --> 00:47:44.840
This was a little intro
to origami design.

00:47:44.840 --> 00:47:47.840
Obviously not practical
yet, but it's something.

00:47:51.576 --> 00:47:52.575
It's nice and universal.

00:47:52.575 --> 00:47:53.625
You can make everything.

00:47:56.710 --> 00:47:59.230
So let me tell you a little
bit about the other side

00:47:59.230 --> 00:48:02.900
of the world, which is,
instead of a target shape,

00:48:02.900 --> 00:48:04.580
what if I gave you
a crease pattern?

00:48:04.580 --> 00:48:08.790
We just want to know, does
this crease pattern fold?

00:48:08.790 --> 00:48:14.100
I give you the crease
pattern of that pinwheel.

00:48:14.100 --> 00:48:15.880
I say, does this
fold into anything?

00:48:15.880 --> 00:48:17.860
Does it fold into
a flat origami?

00:48:17.860 --> 00:48:19.670
Does it fold into
something else?

00:48:19.670 --> 00:48:21.700
Can you fold it
with simple folds?

00:48:21.700 --> 00:48:23.540
Can you fold it
with origami folds?

00:48:23.540 --> 00:48:25.560
Those are all
interesting questions.

00:48:25.560 --> 00:48:31.290
We're going to start with a
very simple form of it, which

00:48:31.290 --> 00:48:34.880
is when the piece of paper
is one dimensional, which

00:48:34.880 --> 00:48:37.750
is almost what you
were thinking of here.

00:48:37.750 --> 00:48:40.390
It's like strip folding, but
I'm going to furthermore require

00:48:40.390 --> 00:48:43.590
that all the folds I make are
perpendicular to the strip

00:48:43.590 --> 00:48:45.140
direction.

00:48:45.140 --> 00:48:51.160
So I'm always going to fold
like this and then like this.

00:48:51.160 --> 00:48:53.320
So it's going to remain a strip.

00:48:53.320 --> 00:48:55.120
It'll just be a smaller strip.

00:48:55.120 --> 00:48:57.300
I know it seems kind
of boring, but it's

00:48:57.300 --> 00:48:58.970
something we
understand really well,

00:48:58.970 --> 00:49:03.030
so that's why I'm going
to tell you about it.

00:49:03.030 --> 00:49:05.430
And then it relates
to locally what

00:49:05.430 --> 00:49:07.550
happens at one vertex
of the crease pattern,

00:49:07.550 --> 00:49:12.250
but we'll get to
that next class.

00:49:12.250 --> 00:49:16.290
So one dimensional flat folding.

00:49:16.290 --> 00:49:18.000
I don't have them
anymore here, but I'm

00:49:18.000 --> 00:49:20.300
going to redefine "piece of
paper" and all these things

00:49:20.300 --> 00:49:22.730
because I want to
be even simpler.

00:49:26.830 --> 00:49:30.481
So piece of paper now is going
to be a one dimensional line

00:49:30.481 --> 00:49:30.980
segment.

00:49:36.300 --> 00:49:43.440
A crease is going to be
a point on that segment.

00:49:43.440 --> 00:49:45.697
In general, a crease is
one dimension smaller

00:49:45.697 --> 00:49:47.530
than the piece of paper
you're working with.

00:49:47.530 --> 00:49:48.720
You could actually
define "piece of paper"

00:49:48.720 --> 00:49:51.070
to be a five dimensional
solid if you wanted.

00:49:51.070 --> 00:49:53.130
Then creases would be
four dimensional flats,

00:49:53.130 --> 00:49:54.820
they're called.

00:49:54.820 --> 00:49:55.790
It's not a hyperplane.

00:49:55.790 --> 00:49:57.410
Four dimensional flat.

00:49:57.410 --> 00:50:00.660
That's what they're called.

00:50:00.660 --> 00:50:03.080
Or if you wanted to do curved
creases in five dimensions,

00:50:03.080 --> 00:50:07.492
then it's a four dimensional
surface somewhere in there.

00:50:07.492 --> 00:50:11.670
We won't do 5D
origami in this class.

00:50:11.670 --> 00:50:15.980
Flat folding now means that
your folding lies on a line.

00:50:15.980 --> 00:50:17.730
Of course, it will
always lie in the plane

00:50:17.730 --> 00:50:21.452
if you're folding a line
segment in the plane.

00:50:21.452 --> 00:50:23.660
So generally, we take a
piece of paper one dimension,

00:50:23.660 --> 00:50:26.600
we fold it in a space
that's one higher dimension,

00:50:26.600 --> 00:50:28.794
so we're going to be
folding this thing in 2D.

00:50:28.794 --> 00:50:30.710
We use increases that
are one lower dimension.

00:50:30.710 --> 00:50:33.234
Here, zero dimensional points.

00:50:33.234 --> 00:50:35.150
If we want it to be flat,
it should in the end

00:50:35.150 --> 00:50:37.191
lie in the same dimension
the piece of paper did.

00:50:40.060 --> 00:50:42.010
It's great because
I can just draw.

00:50:42.010 --> 00:50:43.580
There's my piece of paper.

00:50:43.580 --> 00:50:46.470
Here are some creases.

00:50:46.470 --> 00:50:47.870
They're spread out however.

00:50:47.870 --> 00:50:49.890
Maybe they're marked
mountain and valley,

00:50:49.890 --> 00:50:53.080
and I'm not going to use
dashes and dot dashes here

00:50:53.080 --> 00:50:56.070
because they're
points, so I'll write

00:50:56.070 --> 00:50:57.960
m's and v's,
something like that.

00:50:57.960 --> 00:50:59.910
And I didn't check,
but this either

00:50:59.910 --> 00:51:01.625
will be flat foldable or not.

00:51:06.940 --> 00:51:09.680
I think it is.

00:51:09.680 --> 00:51:10.960
How do I know that it is?

00:51:10.960 --> 00:51:13.430
Because we have a great
characterization that tells you

00:51:13.430 --> 00:51:16.289
when a mountain valley
pattern is flat foldable.

00:51:16.289 --> 00:51:17.830
Now, the first
question you might ask

00:51:17.830 --> 00:51:20.400
is, what about
crease patterns if I

00:51:20.400 --> 00:51:22.980
don't specify
mountains and valleys?

00:51:22.980 --> 00:51:25.610
Then you can always
fold anything.

00:51:25.610 --> 00:51:28.720
If I just gave you a
segment and I put creases

00:51:28.720 --> 00:51:34.170
in some crazy pattern, all
I do is alternate mountain,

00:51:34.170 --> 00:51:37.110
valley, mountain, valley,
mountain, valley, mountain,

00:51:37.110 --> 00:51:40.910
valley, and I'm going to regret
making such a big example.

00:51:40.910 --> 00:51:47.800
And I just go mountain, valley,
mountain-- it alternates.

00:51:47.800 --> 00:51:49.450
You get some zigzag.

00:51:49.450 --> 00:51:52.300
And this thing is not going
to collide with itself.

00:51:52.300 --> 00:51:53.410
It just works.

00:51:53.410 --> 00:51:55.740
In fact, you could even fold
it one step at a time left

00:51:55.740 --> 00:51:58.140
to right by simple
folds, and you'll

00:51:58.140 --> 00:52:00.889
get a nice flat
folding of that thing.

00:52:00.889 --> 00:52:02.430
So every crease
pattern can be folded

00:52:02.430 --> 00:52:04.840
with some mountain-valley
assignment, namely

00:52:04.840 --> 00:52:08.560
the alternating accordion
pleat, but what if I give you

00:52:08.560 --> 00:52:11.920
the mountain-valley assignment?

00:52:11.920 --> 00:52:16.500
Sometimes I can do
it, sometimes I can't.

00:52:16.500 --> 00:52:23.260
So here's an example where
you can't, two valleys

00:52:23.260 --> 00:52:26.160
with some really big
segments on either side.

00:52:26.160 --> 00:52:29.530
So when you try to fold that,
it looks something like that,

00:52:29.530 --> 00:52:31.700
and if one of these was
really short, one of them

00:52:31.700 --> 00:52:34.610
could tuck inside the other,
but because they're both long,

00:52:34.610 --> 00:52:36.657
they have to collide.

00:52:36.657 --> 00:52:38.490
That's the sort of thing
we're worried about

00:52:38.490 --> 00:52:40.948
and we'd like to detect that
efficiently with an algorithm.

00:52:55.510 --> 00:52:57.020
So let me tell you how.

00:52:57.020 --> 00:53:08.840
We're going to use two
different operations,

00:53:08.840 --> 00:53:10.760
and both of these
operations will, in fact,

00:53:10.760 --> 00:53:15.000
be performable
using simple folds.

00:53:15.000 --> 00:53:16.500
What we're going
to end up proving

00:53:16.500 --> 00:53:19.160
is that a one dimensional
mountain valley

00:53:19.160 --> 00:53:22.320
pattern is flat foldable
if and only if it's flat

00:53:22.320 --> 00:53:25.060
foldable via a sequence
of simple folds.

00:53:25.060 --> 00:53:28.490
So these simple folds that
we've been arguing about

00:53:28.490 --> 00:53:32.110
are universally
powerful for 1D paper.

00:53:32.110 --> 00:53:34.200
They are not universally
powerful for 2D paper

00:53:34.200 --> 00:53:37.620
because you cannot fold this
pinwheel with simple folds.

00:53:37.620 --> 00:53:39.680
There's no first fold to make.

00:53:39.680 --> 00:53:42.680
But in one dimension,
turns out there is.

00:53:42.680 --> 00:53:47.050
It's not obvious, but it's true.

00:53:47.050 --> 00:53:50.480
And here, we're going to
make two very simple kinds

00:53:50.480 --> 00:53:52.070
of simple folds.

00:53:52.070 --> 00:53:54.650
The first one is called
an end fold, which

00:53:54.650 --> 00:53:59.150
is you take the last, or
the very first crease,

00:53:59.150 --> 00:54:03.490
and you just fold it over.

00:54:03.490 --> 00:54:04.410
That's an n fold.

00:54:04.410 --> 00:54:09.540
Now, for this to be valid
in the simple folding world,

00:54:09.540 --> 00:54:12.940
to not get stuck,
I'm going to require

00:54:12.940 --> 00:54:20.100
that this portion has
no creases inside it.

00:54:20.100 --> 00:54:22.360
So it could have a crease
right at the boundary,

00:54:22.360 --> 00:54:25.660
but there are no
creases in that region.

00:54:25.660 --> 00:54:28.730
So when I fold this thing over,
I don't cover anything up.

00:54:28.730 --> 00:54:31.670
No creases get covered up.

00:54:31.670 --> 00:54:34.840
This in some sense is
clearly a good thing to do.

00:54:34.840 --> 00:54:36.069
This may not exist.

00:54:36.069 --> 00:54:38.110
If you find such a crease
and you make this fold,

00:54:38.110 --> 00:54:39.950
now you can think of
this piece of paper

00:54:39.950 --> 00:54:41.330
as sort of glued up there.

00:54:41.330 --> 00:54:44.680
You can think of just you cut
off one part of the paper.

00:54:44.680 --> 00:54:47.540
You made a problem even easier.

00:54:47.540 --> 00:54:49.705
So this is clearly
a safe thing to do.

00:54:49.705 --> 00:54:51.540
It should make your
folding easier,

00:54:51.540 --> 00:54:53.580
but usually it doesn't exist.

00:54:53.580 --> 00:54:55.150
In that case, we
make what's called

00:54:55.150 --> 00:55:00.270
a crimp, which is
we have our segment.

00:55:00.270 --> 00:55:03.890
We take two creases with
different mountain-valley

00:55:03.890 --> 00:55:04.410
assignments.

00:55:04.410 --> 00:55:06.576
Maybe the first one's
mountain, second one's valley,

00:55:06.576 --> 00:55:09.890
but they're different, and
then we fold those two creases.

00:55:12.890 --> 00:55:14.180
Something like that.

00:55:14.180 --> 00:55:16.056
So the paper get smaller
again, but here it's

00:55:16.056 --> 00:55:18.346
a little less clear what's
happening because there were

00:55:18.346 --> 00:55:20.050
creases over here,
creases over here.

00:55:20.050 --> 00:55:21.390
They got closer to each other.

00:55:21.390 --> 00:55:22.670
Maybe that's a problem.

00:55:22.670 --> 00:55:23.640
Maybe it messes you up.

00:55:23.640 --> 00:55:24.515
Turns out it doesn't.

00:55:27.310 --> 00:55:31.760
The other thing, again, we
require, if this is distance x,

00:55:31.760 --> 00:55:36.750
we require that this region
of length x and this region

00:55:36.750 --> 00:55:38.384
of length x is empty of creases.

00:55:38.384 --> 00:55:39.300
There's nothing there.

00:55:39.300 --> 00:55:41.280
You could have things
on the boundary

00:55:41.280 --> 00:55:43.870
but nothing interior to here,
nothing interior to here,

00:55:43.870 --> 00:55:45.750
and nothing interior to here.

00:55:45.750 --> 00:55:48.460
Just two increases with sort
of a nice, safe neighborhood

00:55:48.460 --> 00:55:50.680
around them so that
when I make these two

00:55:50.680 --> 00:55:54.550
folds, this whole region,
I didn't cover anything up

00:55:54.550 --> 00:55:55.050
in there.

00:55:55.050 --> 00:55:57.250
There's nothing in
this Zorro mark.

00:56:00.370 --> 00:56:02.680
That's the definition of
an n fold and a crimp.

00:56:02.680 --> 00:56:05.070
Now, maybe these
things don't exist.

00:56:05.070 --> 00:56:07.860
I claim if they don't exist,
you are not flat foldable

00:56:07.860 --> 00:56:09.260
no matter what you do.

00:56:09.260 --> 00:56:11.080
These are enough
to make everything

00:56:11.080 --> 00:56:12.050
that is flat foldable.

00:56:15.172 --> 00:56:16.255
We're going to prove that.

00:56:37.710 --> 00:56:43.870
We're going to characterize
flat foldability by saying,

00:56:43.870 --> 00:56:48.989
if I gave you some
mountain-valley pattern,

00:56:48.989 --> 00:56:50.655
and I want to know,
is it flat foldable?

00:56:53.990 --> 00:56:55.530
Remember, a
mountain-valley pattern

00:56:55.530 --> 00:56:59.080
is a crease pattern together
with m's and v's written

00:56:59.080 --> 00:57:01.210
on each crease.

00:57:01.210 --> 00:57:03.920
I claim it is flat
foldable if and only

00:57:03.920 --> 00:57:19.320
if there is a sequence
of crimps and end folds.

00:57:24.299 --> 00:57:26.840
So this is saying that crimps
and end folds are all you need.

00:57:26.840 --> 00:57:30.120
In fact, we're going to show
that you can make any crimp

00:57:30.120 --> 00:57:32.100
and any end fold,
anything that looks valid,

00:57:32.100 --> 00:57:35.220
anything that has these
empty regions here,

00:57:35.220 --> 00:57:38.480
just greedily keep doing
one after the other

00:57:38.480 --> 00:57:40.980
without regard to what's
going to happen in the future.

00:57:40.980 --> 00:57:43.850
If you get stuck, then your
thing in the first place

00:57:43.850 --> 00:57:44.812
was not flat foldable.

00:57:44.812 --> 00:57:46.770
If you finish, obviously,
it was flat foldable.

00:57:46.770 --> 00:57:48.220
You've folded it.

00:57:48.220 --> 00:57:51.270
So it doesn't matter even what
order you do these operations.

00:57:51.270 --> 00:57:54.390
I won't write that here,
but we will prove that.

00:57:54.390 --> 00:57:56.600
And there's another
characterization

00:57:56.600 --> 00:57:58.160
which we use to prove this one.

00:57:58.160 --> 00:58:00.750
This is the one we care about.

00:58:00.750 --> 00:58:04.920
This one's a little bit
easier to think about.

00:58:04.920 --> 00:58:06.700
I call it the mingling property.

00:58:06.700 --> 00:58:09.680
It says mountains and valleys
hang out with each other,

00:58:09.680 --> 00:58:10.180
basically.

00:58:14.791 --> 00:58:16.040
That's why I call it mingling.

00:58:19.880 --> 00:58:21.210
So what does it mean?

00:58:32.710 --> 00:58:35.990
If I take a whole
bunch of v's in a row,

00:58:35.990 --> 00:58:42.194
or I take a whole bunch m's
in a row, as many as I can,

00:58:42.194 --> 00:58:44.610
that means they're surrounded
by creases of the other type

00:58:44.610 --> 00:58:47.137
or possibly the
edge of the paper.

00:58:47.137 --> 00:58:49.470
But if I take a whole bunch
of v's, then the next crease

00:58:49.470 --> 00:58:53.310
and the previous crease
are m's, let's say,

00:58:53.310 --> 00:59:03.170
then the adjacent crease
of the other type,

00:59:03.170 --> 00:59:08.430
or possibly the
end of the paper,

00:59:08.430 --> 00:59:14.470
and I want this to be
true on at least one side.

00:59:14.470 --> 00:59:16.220
This is, again, one
of those things that's

00:59:16.220 --> 00:59:19.150
much easier in a picture, but
I will write down the words

00:59:19.150 --> 00:59:21.530
first.

00:59:21.530 --> 00:59:38.910
Is nearer than the adjacent
m or v. Sorry, backwards.

00:59:38.910 --> 00:59:42.560
I'm trying to use
parallel construction here

00:59:42.560 --> 00:59:46.491
but I got it inverted
for my notes.

00:59:46.491 --> 00:59:47.490
Let me draw the picture.

00:59:47.490 --> 00:59:51.520
You have a segment.

00:59:51.520 --> 00:59:55.990
Suppose I take some maximal
sequence of m's all in a row.

00:59:58.750 --> 01:00:01.434
So maybe on one side,
maybe the next thing

01:00:01.434 --> 01:00:02.850
here is just the
edge of the paper

01:00:02.850 --> 01:00:03.974
so there's no crease there.

01:00:07.650 --> 01:00:11.270
If this was it, then I
would say this thing is not

01:00:11.270 --> 01:00:14.930
mingling because this
distance is bigger

01:00:14.930 --> 01:00:18.380
than this one and this distance
is bigger than this one.

01:00:18.380 --> 01:00:20.210
So these m's are really
clustered together.

01:00:20.210 --> 01:00:22.992
They're not mingling with
the edges, so that's bad.

01:00:22.992 --> 01:00:24.450
And in fact, this
thing is not flat

01:00:24.450 --> 01:00:26.860
foldable for the same
reason that one is not.

01:00:26.860 --> 01:00:30.810
But if, for example, I put
a valley crease right here,

01:00:30.810 --> 01:00:33.340
then this is closer than that.

01:00:33.340 --> 01:00:35.510
I mean this distance is
smaller than that one.

01:00:35.510 --> 01:00:38.170
So I call that mingling because
at least on the right side,

01:00:38.170 --> 01:00:39.630
the m's are mingling
with the v's.

01:00:39.630 --> 01:00:41.560
On the left side,
they're not mingling,

01:00:41.560 --> 01:00:43.400
but right side's
better than nothing.

01:00:43.400 --> 01:00:45.490
I need this to hold
on at least one side.

01:00:45.490 --> 01:00:47.380
Could hold on both.

01:00:47.380 --> 01:00:52.405
I claim this thing
is flat foldable.

01:00:52.405 --> 01:00:55.060
Is that true?

01:00:55.060 --> 01:00:56.490
Yeah.

01:00:56.490 --> 01:00:58.650
Maybe.

01:00:58.650 --> 01:00:59.650
It doesn't look so true.

01:01:09.067 --> 01:01:11.275
I think I probably need some
condition on the v also.

01:01:17.250 --> 01:01:19.040
Well, we'll see what
happens in the proof.

01:01:19.040 --> 01:01:20.505
That's more exciting.

01:01:20.505 --> 01:01:22.380
Usually the proof is
easier than the example.

01:01:37.500 --> 01:01:38.230
Oh, I see why.

01:01:44.140 --> 01:01:45.130
There's a problem here.

01:01:45.130 --> 01:01:49.262
I think I need to say "forever."

01:01:49.262 --> 01:01:50.720
I'll say what I
mean by that later.

01:01:54.540 --> 01:01:56.220
The proof will still
work, but it's not

01:01:56.220 --> 01:01:57.178
such a pretty property.

01:02:05.370 --> 01:02:10.090
The proof is in three
parts, basically.

01:02:10.090 --> 01:02:19.880
First part is if
you're flat foldable,

01:02:19.880 --> 01:02:21.595
then you are mingling.

01:02:26.740 --> 01:02:28.740
Certainly, if I want these
all to be equivalent,

01:02:28.740 --> 01:02:32.277
it should be true that the
first one implies the third one.

01:02:32.277 --> 01:02:33.860
This is actually
really easy to prove.

01:02:39.320 --> 01:02:41.300
Suppose it were not mingling.

01:02:41.300 --> 01:02:43.110
Suppose I had some
crease pattern that

01:02:43.110 --> 01:02:44.190
violates that constraint.

01:02:44.190 --> 01:02:46.600
What that means is I
have a bunch of m's here,

01:02:46.600 --> 01:02:49.460
I don't know how
they're spread out.

01:02:49.460 --> 01:02:51.200
Then I know that
there's a big gap

01:02:51.200 --> 01:02:55.586
until the next crease,
something like that.

01:02:55.586 --> 01:02:57.460
Well, let's think about--
there aren't really

01:02:57.460 --> 01:02:59.280
that many ways to fold
a whole bunch of m's

01:02:59.280 --> 01:03:02.230
in a row or a whole bunch
of v's that's symmetric.

01:03:02.230 --> 01:03:04.757
You pretty much have
to spiral around.

01:03:04.757 --> 01:03:06.465
You're always turning
the same direction.

01:03:11.460 --> 01:03:13.952
If it's flat foldable, which
is what we're assuming here,

01:03:13.952 --> 01:03:15.410
it's got to look
kind of like that.

01:03:15.410 --> 01:03:17.326
In fact, it has two ends,
so it could actually

01:03:17.326 --> 01:03:19.470
make two spirals.

01:03:19.470 --> 01:03:21.690
But if you think about
what happens there,

01:03:21.690 --> 01:03:28.880
this last part at the end of the
spirals, that's this segment.

01:03:28.880 --> 01:03:32.980
That's when you possibly turn
around the other direction.

01:03:32.980 --> 01:03:34.690
Maybe this is the valley.

01:03:34.690 --> 01:03:36.360
But take a look at
what's going on here.

01:03:36.360 --> 01:03:39.650
This segment is tucked
inside the spiral.

01:03:39.650 --> 01:03:41.220
If it's super long
like it is here,

01:03:41.220 --> 01:03:44.670
if it's longer than the previous
portion-- let me label this.

01:03:44.670 --> 01:03:53.250
This is x, this is x,
this is y, this is y.

01:03:53.250 --> 01:03:54.800
That looks really bad.

01:03:54.800 --> 01:03:56.134
x has to be smaller than y.

01:03:56.134 --> 01:03:57.800
Otherwise, it's going
to penetrate right

01:03:57.800 --> 01:04:01.210
through that corner.

01:04:01.210 --> 01:04:05.310
In this case with the double
spiral, double spiral all

01:04:05.310 --> 01:04:07.750
the way, what does it mean?

01:04:10.360 --> 01:04:12.750
I guess no one knows
double rainbow.

01:04:16.310 --> 01:04:18.270
Bad stuff.

01:04:18.270 --> 01:04:20.810
In the double spiral
case, in fact, this end

01:04:20.810 --> 01:04:22.680
must be shorter than
this one and this one

01:04:22.680 --> 01:04:24.500
must be shorter than this one.

01:04:24.500 --> 01:04:27.320
So in this case, you must
be mingling on both sides,

01:04:27.320 --> 01:04:29.430
but it doesn't have
to be that way.

01:04:29.430 --> 01:04:32.040
If it's just a single
spiral, this last segment

01:04:32.040 --> 01:04:33.040
can be really long.

01:04:33.040 --> 01:04:33.680
That's OK.

01:04:33.680 --> 01:04:36.950
It's much longer than this
one, but the inner part

01:04:36.950 --> 01:04:39.510
of the spiral must
always be smaller

01:04:39.510 --> 01:04:41.540
than the next segment
of the spiral,

01:04:41.540 --> 01:04:43.210
and that's exactly
what mingling says.

01:04:43.210 --> 01:04:45.790
Could be on the left, could be
on the right, you don't know.

01:04:45.790 --> 01:04:48.120
But on at least one of the
sides, you must be mingling.

01:04:48.120 --> 01:04:50.790
And therefore, if you're going
to have a flat folding at all,

01:04:50.790 --> 01:04:52.430
you must be mingling.

01:04:52.430 --> 01:04:53.120
Clear?

01:04:53.120 --> 01:04:53.640
Question?

01:04:53.640 --> 01:04:56.490
AUDIENCE: When you say a maximal
sequence, what do you mean?

01:04:56.490 --> 01:04:57.940
PROFESSOR: Maximal
means that you

01:04:57.940 --> 01:04:59.990
can't make it any
bigger locally.

01:04:59.990 --> 01:05:02.090
I can't add any more
creases and still

01:05:02.090 --> 01:05:04.000
have a contiguous
bunch of mountains.

01:05:04.000 --> 01:05:05.640
It's a good question.

01:05:05.640 --> 01:05:08.840
In mathematics, there's
maximal and maximum.

01:05:08.840 --> 01:05:12.400
Maximal means locally biggest,
maximum means globally biggest.

01:05:12.400 --> 01:05:14.540
So I don't mean take
the biggest sequence

01:05:14.540 --> 01:05:16.400
of contiguous m's you can find.

01:05:16.400 --> 01:05:19.120
I just mean take some contiguous
sequence of m's that you

01:05:19.120 --> 01:05:22.790
can't make any bigger
on either side.

01:05:22.790 --> 01:05:25.070
I just mean that it's
surrounded by valleys.

01:05:25.070 --> 01:05:31.530
I want this to hold for every
contiguous sequence of m's.

01:05:31.530 --> 01:05:34.280
That's one of those funny
math technical terms.

01:05:34.280 --> 01:05:36.970
Other questions?

01:05:36.970 --> 01:05:38.540
So that's the first thing.

01:05:38.540 --> 01:05:41.205
Somehow I want to connect all
these properties together.

01:05:44.890 --> 01:05:53.780
The next part is that
if you're mingling,

01:05:53.780 --> 01:05:56.270
either there's an end
fold or there's a crimp.

01:06:02.950 --> 01:06:06.160
At least one of those two
things must be possible.

01:06:06.160 --> 01:06:08.470
So this would be good
news because if I'm

01:06:08.470 --> 01:06:10.320
flat foldable,
then I'm mingling.

01:06:10.320 --> 01:06:12.750
If I'm mingling, then
there's a fold I can make.

01:06:12.750 --> 01:06:13.889
That seems like progress.

01:06:13.889 --> 01:06:15.930
Then I have to show that
I don't mess anything up

01:06:15.930 --> 01:06:18.770
when I make that fold.

01:06:18.770 --> 01:06:21.219
But if I could keep going
in a circle like this,

01:06:21.219 --> 01:06:23.010
then I would keep being
able to make folds,

01:06:23.010 --> 01:06:24.670
and then eventually I
would fold the whole thing

01:06:24.670 --> 01:06:26.440
because there's only
end folds at the end.

01:06:26.440 --> 01:06:27.640
I'll have made them all.

01:06:33.270 --> 01:06:36.715
It's not that much
trickier, I guess.

01:06:36.715 --> 01:06:39.675
It involves parentheses.

01:06:39.675 --> 01:06:40.800
That's one way to write it.

01:06:40.800 --> 01:06:41.425
Yeah, question?

01:06:44.840 --> 01:06:47.290
AUDIENCE: So right
now, the main property

01:06:47.290 --> 01:06:53.750
is finding a way that
[INAUDIBLE] two or more?

01:06:53.750 --> 01:06:54.844
PROFESSOR: That's right.

01:06:54.844 --> 01:06:57.364
AUDIENCE: And there is an
example that [INAUDIBLE]?

01:06:57.364 --> 01:06:58.030
PROFESSOR: Yeah.

01:06:58.030 --> 01:06:59.600
Just ignore this.

01:06:59.600 --> 01:07:02.640
It'll be easier to
think of it that way.

01:07:02.640 --> 01:07:05.170
I'm going to use mingling
to prove this property,

01:07:05.170 --> 01:07:08.240
but this is not equivalent
to those properties.

01:07:08.240 --> 01:07:11.200
You need to add
"forever," but that's

01:07:11.200 --> 01:07:13.015
too confusing at the moment.

01:07:13.015 --> 01:07:14.390
This is a definition
of mingling.

01:07:14.390 --> 01:07:17.289
We're going to use it
as a separate thing,

01:07:17.289 --> 01:07:19.580
and I'm going to prove these
two things are equivalent.

01:07:19.580 --> 01:07:21.180
Then I'll be correct.

01:07:21.180 --> 01:07:24.540
Correct is always a good thing.

01:07:24.540 --> 01:07:32.720
So what I want to do is for each
of these mingling sequences,

01:07:32.720 --> 01:07:42.320
for each maximal
sequence of m's or v's, I

01:07:42.320 --> 01:07:45.840
want to write down two symbols.

01:07:45.840 --> 01:07:50.170
I'm going to write a curved
left parenthesis if it

01:07:50.170 --> 01:08:00.520
is left mingling, meaning I have
all these mountains, let's say.

01:08:04.840 --> 01:08:06.440
Draw it in a reasonable way.

01:08:06.440 --> 01:08:09.360
Then I'm happy on the left side.

01:08:09.360 --> 01:08:14.137
I'm mingling with a v with
an m fold on the left side.

01:08:14.137 --> 01:08:16.470
I know it's either left
mingling or it's right mingling.

01:08:16.470 --> 01:08:18.760
I'm assuming mingling here.

01:08:18.760 --> 01:08:22.290
I will write a square
bracket if it's not.

01:08:22.290 --> 01:08:25.319
Then I will write a
curved right bracket

01:08:25.319 --> 01:08:31.700
if you're right
mingling, which is just

01:08:31.700 --> 01:08:34.200
the same picture but
on the other side.

01:08:34.200 --> 01:08:37.160
And I'm going to write a closed
square bracket if it's not.

01:08:40.950 --> 01:08:45.783
Then I claim that
parentheses sequence

01:08:45.783 --> 01:08:46.824
has some nice properties.

01:08:54.260 --> 01:08:58.160
So for example, this
is a string that I get.

01:08:58.160 --> 01:09:03.279
It might look like
this, maybe that.

01:09:03.279 --> 01:09:04.120
Who knows?

01:09:04.120 --> 01:09:05.220
It looks like something.

01:09:05.220 --> 01:09:08.714
I know that every pair, at least
one of the two sides is curved.

01:09:08.714 --> 01:09:10.880
I can't have them both be
square because then you're

01:09:10.880 --> 01:09:12.100
not mingling at all.

01:09:12.100 --> 01:09:14.450
I know I'm always mingling
left or mingling right,

01:09:14.450 --> 01:09:15.790
so it's something.

01:09:15.790 --> 01:09:17.910
Now, one thing
that's really good

01:09:17.910 --> 01:09:23.029
is I have no double
square bracket.

01:09:23.029 --> 01:09:24.790
That's impossible.

01:09:24.790 --> 01:09:27.800
I also know that
if I had something

01:09:27.800 --> 01:09:30.479
like this, what does that mean?

01:09:30.479 --> 01:09:38.000
It means I have a bunch
of mountains over here,

01:09:38.000 --> 01:09:41.279
then I have a very
nearby valley, and then

01:09:41.279 --> 01:09:45.260
a bunch of valleys
over here, and I

01:09:45.260 --> 01:09:48.600
know that the mountains
are right mingling, which

01:09:48.600 --> 01:09:55.850
means I know that
x is bigger than y.

01:09:55.850 --> 01:09:57.100
That's what this symbol means.

01:09:57.100 --> 01:09:59.810
It means to the right of the
m's, I've got a small gap,

01:09:59.810 --> 01:10:02.580
and it means to the left of the
v's, I also have a small gap.

01:10:02.580 --> 01:10:06.325
That means y is also bigger
than this z distance.

01:10:09.190 --> 01:10:09.940
AUDIENCE: Smaller.

01:10:09.940 --> 01:10:10.870
PROFESSOR: Thank you.

01:10:13.520 --> 01:10:14.916
Smaller.

01:10:14.916 --> 01:10:18.590
I'm too tempted to
combine them together,

01:10:18.590 --> 01:10:22.130
but it's a funny looking thing.
y is smaller than both x and z.

01:10:22.130 --> 01:10:25.130
So then what do I do?

01:10:25.130 --> 01:10:25.630
Crimp.

01:10:30.010 --> 01:10:32.620
That was sort of the
definition of a crimp,

01:10:32.620 --> 01:10:35.820
that at least if I took
this region x and copied it

01:10:35.820 --> 01:10:37.580
over here, those were
empty of creases.

01:10:37.580 --> 01:10:41.420
And now we're saying that
there's a big gap here.

01:10:41.420 --> 01:10:42.920
I guess technically
it's bigger than

01:10:42.920 --> 01:10:45.530
or equal to if you said
all these things right.

01:10:49.820 --> 01:10:54.060
I said "nearer," but I
meant non-strictly nearer.

01:10:54.060 --> 01:10:57.710
It's enough to do a crimp.

01:10:57.710 --> 01:10:59.940
So if I find this, I'm happy.

01:10:59.940 --> 01:11:01.920
The other thing that
I'm really happy with

01:11:01.920 --> 01:11:09.705
is if I have an open
paren at the beginning,

01:11:09.705 --> 01:11:13.140
a curved parenthesis,
open parenthesis,

01:11:13.140 --> 01:11:16.520
at the beginning of the
string, or a right parenthesis

01:11:16.520 --> 01:11:19.140
at the end of the
string, because that

01:11:19.140 --> 01:11:20.560
means I can do an end fold.

01:11:26.060 --> 01:11:28.080
That means that you have
a very short segment

01:11:28.080 --> 01:11:30.230
at the very beginning so
you can just fold it over.

01:11:30.230 --> 01:11:32.188
This means you have a
short segment at the end.

01:11:32.188 --> 01:11:34.200
Just fold it over.

01:11:34.200 --> 01:11:36.770
So as long as I can find
one of these three things,

01:11:36.770 --> 01:11:38.110
I am golden.

01:11:38.110 --> 01:11:43.370
I have what I want, which
was an end fold or a crimp.

01:11:43.370 --> 01:11:46.390
How do I prove that I
have one of those things?

01:11:46.390 --> 01:11:47.990
The easy way is
by contradiction.

01:11:47.990 --> 01:11:50.880
Just imagine if you didn't
have any one of these things,

01:11:50.880 --> 01:11:53.400
it's pretty forced what you
have to have in your string

01:11:53.400 --> 01:11:56.380
because you know you must start
with an open square bracket.

01:11:56.380 --> 01:11:58.880
You also know that you cannot
then immediately have a closed

01:11:58.880 --> 01:12:03.207
square bracket, so you
must have a closed paren.

01:12:03.207 --> 01:12:05.540
Now I know that I cannot have
an open paren because then

01:12:05.540 --> 01:12:07.710
I'd have this, and that
would be good for me.

01:12:07.710 --> 01:12:10.360
So if I want to be bad, I have
to have an open square bracket,

01:12:10.360 --> 01:12:12.068
but then I'd have to
have a closed paren,

01:12:12.068 --> 01:12:14.600
and then I'd have to have an
open square bracket, and so on.

01:12:14.600 --> 01:12:18.100
In the end, you will have
a closed paren at the end,

01:12:18.100 --> 01:12:21.070
and that means you
can make an end fold.

01:12:21.070 --> 01:12:22.840
So either something
failed in here.

01:12:22.840 --> 01:12:25.280
Maybe I had two parens
together-- then I

01:12:25.280 --> 01:12:26.990
would have gotten
a crimp-- or I can

01:12:26.990 --> 01:12:28.770
keep going all the
way through here

01:12:28.770 --> 01:12:30.200
and get a closed
paren at the end.

01:12:30.200 --> 01:12:32.680
In any case, I get at least
one of these three things

01:12:32.680 --> 01:12:35.440
happening, and so I get
either an end fold or a crimp

01:12:35.440 --> 01:12:36.977
assuming I am mingling.

01:12:36.977 --> 01:12:38.560
And instead of
assuming I am mingling,

01:12:38.560 --> 01:12:40.800
I can just assume that
I'm flat foldable,

01:12:40.800 --> 01:12:42.805
and then I get from this
chain of implications

01:12:42.805 --> 01:12:45.955
that there is an
end fold or a crimp.

01:12:45.955 --> 01:12:47.000
OK so far?

01:12:47.000 --> 01:12:49.450
So that means I can
make at least one fold.

01:12:49.450 --> 01:12:52.070
If I am flat foldable, I can
make at least one crimp or end

01:12:52.070 --> 01:12:53.240
fold.

01:12:53.240 --> 01:12:56.111
Now the question is,
can I keep going?

01:12:56.111 --> 01:12:57.610
For that, we need
one more property.

01:13:15.310 --> 01:13:17.870
If I make a crimp
or an end fold,

01:13:17.870 --> 01:13:21.680
I want to prove that that
preserves flat foldability.

01:13:32.605 --> 01:13:34.730
What that means is if I
start with something that's

01:13:34.730 --> 01:13:36.938
flat foldable and then I
make a crimp or an end fold,

01:13:36.938 --> 01:13:38.300
I will still be flat foldable.

01:13:38.300 --> 01:13:40.000
This is the property
I need because it

01:13:40.000 --> 01:13:41.780
will let me close the chain.

01:13:41.780 --> 01:13:43.530
I'm flat foldable,
therefore I'm mingling,

01:13:43.530 --> 01:13:46.380
therefore I have an end fold
or a crimp, so I make it.

01:13:46.380 --> 01:13:48.630
This property says that I
will still be flat foldable,

01:13:48.630 --> 01:13:50.088
therefore number
one applies again.

01:13:50.088 --> 01:13:52.560
I'm still mingling, I
can still find a fold,

01:13:52.560 --> 01:13:55.361
and I'm still flat foldable,
so I'm still mingling.

01:13:55.361 --> 01:13:56.360
I can still find a fold.

01:13:56.360 --> 01:13:57.204
I can keep going.

01:13:57.204 --> 01:13:58.620
I will never get
stuck because I'm

01:13:58.620 --> 01:14:00.550
guaranteed if I
started flat foldable,

01:14:00.550 --> 01:14:03.380
I will be flat foldable forever.

01:14:03.380 --> 01:14:04.875
I will also be mingling forever.

01:14:07.480 --> 01:14:09.670
I realize now but
apparently have not

01:14:09.670 --> 01:14:12.252
realized before, it's not
enough to be mingling just

01:14:12.252 --> 01:14:12.960
at the beginning.

01:14:12.960 --> 01:14:15.350
You have to be mingling
through every step there.

01:14:15.350 --> 01:14:16.680
In fact, what we're
showing is that you're

01:14:16.680 --> 01:14:18.840
fat foldable at every step,
which implies mingling,

01:14:18.840 --> 01:14:20.214
but mingling is
not quite enough.

01:14:20.214 --> 01:14:23.620
You'd have to check it
all the way through.

01:14:23.620 --> 01:14:26.350
That's why I stated
the theorem wrong.

01:14:26.350 --> 01:14:30.470
How do we prove this
theorem, this claim?

01:14:30.470 --> 01:14:32.510
I'm going to do it
proof by picture.

01:14:32.510 --> 01:14:35.640
It's not always OK,
but it will be OK.

01:14:35.640 --> 01:14:36.230
Trust me.

01:14:38.629 --> 01:14:40.295
We are assuming that
we're flat foldable

01:14:40.295 --> 01:14:42.460
and we're assuming there's
a crimp or an end fold.

01:14:42.460 --> 01:14:43.946
Actually, we know
that that exists.

01:14:43.946 --> 01:14:45.570
I'm going to think
about the crimp case

01:14:45.570 --> 01:14:47.780
because end fold
is even simpler.

01:14:50.700 --> 01:14:52.110
See, here's the thing.

01:14:52.110 --> 01:14:56.940
I would really like to fold
some crimp like this, let's say.

01:14:56.940 --> 01:15:01.880
This is an m, this
is a v. What I'm

01:15:01.880 --> 01:15:04.420
claiming is I'm allowed
to make that crimp first

01:15:04.420 --> 01:15:07.450
and then do everything else,
but conceivably, there's

01:15:07.450 --> 01:15:10.290
some flat folding that
doesn't make this crimp first.

01:15:10.290 --> 01:15:11.830
I mean, it must
fold this mountain

01:15:11.830 --> 01:15:13.830
and it must fold this
valley, but at some point.

01:15:13.830 --> 01:15:15.380
We don't really know when.

01:15:15.380 --> 01:15:17.390
Somehow it all
simultaneously collapses

01:15:17.390 --> 01:15:18.849
into some flat folding.

01:15:18.849 --> 01:15:20.140
Now, this thing should be flat.

01:15:20.140 --> 01:15:21.170
It should line in a line.

01:15:21.170 --> 01:15:22.836
I'm stretching it out
so you can see it.

01:15:25.340 --> 01:15:27.740
It's a segment
that we're folding,

01:15:27.740 --> 01:15:30.630
so maybe it does this,
some crazy thing.

01:15:30.630 --> 01:15:34.880
Maybe this part does
something crazy here,

01:15:34.880 --> 01:15:36.740
goes there, whatever.

01:15:36.740 --> 01:15:40.320
We know it's not crossing
and it's sort of horizontal,

01:15:40.320 --> 01:15:42.190
but it could be an ugly mess.

01:15:42.190 --> 01:15:44.190
And in particular,
in this picture,

01:15:44.190 --> 01:15:47.860
it does not look like this crimp
was done first-- maybe embolden

01:15:47.860 --> 01:15:51.970
the crimp here-- because there's
this stuff in the middle.

01:15:51.970 --> 01:15:53.990
Now, we know that there's
no creases in here.

01:15:53.990 --> 01:15:59.340
We know the earliest we can turn
is at the ends of the crimp.

01:15:59.340 --> 01:16:02.240
But there could be stuff that
comes in the middle here.

01:16:02.240 --> 01:16:03.360
What do I do?

01:16:03.360 --> 01:16:07.430
I just move the
stuff out of the way.

01:16:07.430 --> 01:16:08.910
Let me do this the right way.

01:16:08.910 --> 01:16:11.310
Got to do this a
little bit carefully,

01:16:11.310 --> 01:16:13.769
and unfortunately, my
picture is so messy,

01:16:13.769 --> 01:16:14.810
hopefully you can see it.

01:16:14.810 --> 01:16:18.850
So I'm going to take this part,
which is inside the crimp,

01:16:18.850 --> 01:16:23.070
I'm going to move
it down here, just

01:16:23.070 --> 01:16:26.470
lower those layers down to here.

01:16:26.470 --> 01:16:30.990
Now I know locally,
there's a fold right here.

01:16:30.990 --> 01:16:33.330
And so if I take all
the stuff that's in here

01:16:33.330 --> 01:16:36.720
and move it down here, it
will still be non-crossing.

01:16:36.720 --> 01:16:42.550
And then I take this stuff
and I move it up here.

01:16:42.550 --> 01:16:45.017
Equivalently, you can
think of me crushing this

01:16:45.017 --> 01:16:46.850
down and crushing this
up, but it's actually

01:16:46.850 --> 01:16:48.690
important the direction
these things go.

01:16:48.690 --> 01:16:51.610
I could not put this stuff up
here because I don't really

01:16:51.610 --> 01:16:52.910
know how long this goes.

01:16:52.910 --> 01:16:55.109
It's not valid for me
to try to put it up.

01:16:55.109 --> 01:16:56.400
I could collide with something.

01:16:56.400 --> 01:16:58.330
But I know that there's
a crease right here,

01:16:58.330 --> 01:16:59.939
so I can put it right over here.

01:16:59.939 --> 01:17:01.980
I can take this stuff and
put it right over here.

01:17:01.980 --> 01:17:04.188
This is a weird kind of
manipulation of folded states

01:17:04.188 --> 01:17:06.890
which we don't normally do,
but here we need to do it.

01:17:06.890 --> 01:17:09.340
After I've done that--
is there any hope

01:17:09.340 --> 01:17:10.990
of me redrawing the picture?

01:17:10.990 --> 01:17:13.500
Maybe.

01:17:13.500 --> 01:17:15.950
After we've done that,
we'll have the crimp.

01:17:15.950 --> 01:17:18.930
It will be nice and tight.

01:17:18.930 --> 01:17:27.020
And then we'll have
this finger here,

01:17:27.020 --> 01:17:32.640
and then it goes up
here, up this anvil.

01:17:32.640 --> 01:17:36.750
Then this part, instead
of going inside,

01:17:36.750 --> 01:17:46.630
actually goes in here, up
there, something like that,

01:17:46.630 --> 01:17:48.010
and that's the end.

01:17:48.010 --> 01:17:49.910
Then this is the other side.

01:17:49.910 --> 01:17:52.730
Other side wasn't too
complicated, I think.

01:17:52.730 --> 01:17:54.950
But you can check.

01:17:54.950 --> 01:17:57.370
I guess now it's down here.

01:17:57.370 --> 01:17:59.470
But you can really just
do the shifting locally

01:17:59.470 --> 01:18:00.900
and it doesn't mess anything up.

01:18:00.900 --> 01:18:02.750
I'm going to wave my
hands because it's

01:18:02.750 --> 01:18:04.610
a bit messy to
really prove that.

01:18:04.610 --> 01:18:07.070
But if you do that, boom.

01:18:07.070 --> 01:18:10.574
Now this crimp looks like
it was actually done first.

01:18:10.574 --> 01:18:12.240
You can see that this
folded state could

01:18:12.240 --> 01:18:14.980
have been made by first doing
that crimp and then folding

01:18:14.980 --> 01:18:16.470
the rest.

01:18:16.470 --> 01:18:20.160
You can treat this as if the
paper was fused together here,

01:18:20.160 --> 01:18:22.941
and that will be a folded state
of that smaller piece of paper.

01:18:22.941 --> 01:18:25.440
So even though we were shifting
creases closer to each other

01:18:25.440 --> 01:18:27.529
and it looked a little
scary what's happening,

01:18:27.529 --> 01:18:29.070
we know from this
construction if you

01:18:29.070 --> 01:18:31.660
could fold the original thing,
you can fold the thing even

01:18:31.660 --> 01:18:33.390
when the crimp got
fused together.

01:18:33.390 --> 01:18:35.190
Therefore, crimps
are always safe,

01:18:35.190 --> 01:18:38.310
and by an even easier argument,
end folds are always safe.

01:18:38.310 --> 01:18:41.310
I already gave that
argument, basically.

01:18:41.310 --> 01:18:44.070
So a little crazy,
but that proves

01:18:44.070 --> 01:18:46.110
that you preserve
flat foldability

01:18:46.110 --> 01:18:50.930
by going in this chain
n or n over 2 times,

01:18:50.930 --> 01:18:53.600
you will fold everything if you
were originally flat foldable.

01:18:53.600 --> 01:18:55.933
If you're not, you will get
stuck because otherwise, you

01:18:55.933 --> 01:18:58.070
would find a folding, and so on.

01:18:58.070 --> 01:18:58.570
Clear?

01:19:03.630 --> 01:19:06.410
I'll just mention
you can generalize

01:19:06.410 --> 01:19:12.160
this to folding two dimensional
maps with simple folds.

01:19:12.160 --> 01:19:16.380
I should say, of course, an
end fold is a simple fold.

01:19:16.380 --> 01:19:18.567
A crimp is two simple folds.

01:19:18.567 --> 01:19:20.150
You can first fold
along the mountain,

01:19:20.150 --> 01:19:22.733
you won't get any collision, and
then fold back on the valley.

01:19:22.733 --> 01:19:24.520
That's a simple fold.

01:19:24.520 --> 01:19:26.520
So this is saying,
in fact, something

01:19:26.520 --> 01:19:28.880
is flat foldable
in one dimension if

01:19:28.880 --> 01:19:32.545
and only if it is flat foldable
by a sequence of simple folds.

01:19:32.545 --> 01:19:34.420
As long as you stick to
crimps and end folds,

01:19:34.420 --> 01:19:36.420
it doesn't matter what
order you do them in.

01:19:39.110 --> 01:19:42.340
That's not true as soon as
you go to two dimensions.

01:19:42.340 --> 01:19:55.580
So for example, just
for fun, do I really

01:19:55.580 --> 01:19:56.820
want to draw the whole thing?

01:19:56.820 --> 01:19:57.778
I guess I've committed.

01:20:02.737 --> 01:20:04.320
There's a couple
examples in the notes

01:20:04.320 --> 01:20:07.920
that you can take a look at,
and I encourage you to make one.

01:20:07.920 --> 01:20:11.326
This can be folded flat
but not by simple folds,

01:20:11.326 --> 01:20:13.700
and you can see that it can't
be followed by simple folds

01:20:13.700 --> 01:20:16.200
because there's no fold that
goes all the way through.

01:20:16.200 --> 01:20:18.450
This line is valley,
mountain, mountain.

01:20:18.450 --> 01:20:21.980
There's no line that's all
mountains or all valleys.

01:20:21.980 --> 01:20:25.810
But you can use this structure
to understand at least which

01:20:25.810 --> 01:20:29.030
rectangular maps with
horizontal and vertical creases

01:20:29.030 --> 01:20:31.230
can be folded flat
by simple folds,

01:20:31.230 --> 01:20:33.050
and the answer would be no here.

01:20:33.050 --> 01:20:40.030
All you do is you say, well,
I know if there's any fold,

01:20:40.030 --> 01:20:42.350
I must have a mountain
or a valley that

01:20:42.350 --> 01:20:43.620
goes all the way through.

01:20:43.620 --> 01:20:45.400
So Imagine here's
your rectangle.

01:20:45.400 --> 01:20:47.650
There's got to be something
that's valley all the way.

01:20:50.900 --> 01:20:56.510
Now, if you think about a crease
that goes the other direction,

01:20:56.510 --> 01:20:58.740
these are two valleys.

01:20:58.740 --> 01:21:02.200
You can show, just by playing
around with a little pattern

01:21:02.200 --> 01:21:05.914
like this, you cannot have
these two both be valleys

01:21:05.914 --> 01:21:07.830
because that would be
all four valleys is bad.

01:21:07.830 --> 01:21:09.079
If you try that, doesn't work.

01:21:09.079 --> 01:21:10.570
Or it also can't
be both mountains.

01:21:10.570 --> 01:21:12.920
You can't valley, mountain,
valley, mountain in order.

01:21:12.920 --> 01:21:13.955
That doesn't fold.

01:21:13.955 --> 01:21:15.580
So in fact, these
have to be different.

01:21:15.580 --> 01:21:16.810
One's mountain, one's valley.

01:21:16.810 --> 01:21:19.540
I don't care which is which, but
I know that this line actually

01:21:19.540 --> 01:21:21.140
cannot be folded
by a simple fold.

01:21:21.140 --> 01:21:23.970
It's got a valley
and a mountain.

01:21:23.970 --> 01:21:27.810
So in fact, the picture has
to be I have a line like this.

01:21:27.810 --> 01:21:30.640
Maybe I have a few lines that
are mountains all the way

01:21:30.640 --> 01:21:33.800
or valleys all the way.

01:21:33.800 --> 01:21:36.690
And any horizontal
line I can't fold.

01:21:36.690 --> 01:21:38.930
I've got to finish
folding these guys first.

01:21:38.930 --> 01:21:41.530
That means I have a one
dimensional problem.

01:21:41.530 --> 01:21:43.790
So I apply this algorithm
to see whether that one

01:21:43.790 --> 01:21:45.720
dimensional thing folds.

01:21:45.720 --> 01:21:48.741
Once I've folded all
those vertical things,

01:21:48.741 --> 01:21:50.240
solved that one
dimensional problem,

01:21:50.240 --> 01:21:51.927
I will then have a
horizontal problem,

01:21:51.927 --> 01:21:53.510
and then I'll have
a vertical problem.

01:21:53.510 --> 01:21:55.182
You just keep
doing this, and you

01:21:55.182 --> 01:21:56.640
can show in the
same way you always

01:21:56.640 --> 01:21:57.880
preserve flat foldability.

01:21:57.880 --> 01:22:00.022
You just keep doing
crimps and end folds,

01:22:00.022 --> 01:22:01.480
and this will fold
your map if it's

01:22:01.480 --> 01:22:04.290
at all possible by simple
folds, which most ones that

01:22:04.290 --> 01:22:07.000
are in production are
foldable by simple folds.

01:22:07.000 --> 01:22:07.825
Question?

01:22:07.825 --> 01:22:08.450
AUDIENCE: Yeah.

01:22:08.450 --> 01:22:11.420
If we go back to the
example where [INAUDIBLE]?

01:22:15.034 --> 01:22:15.700
PROFESSOR: Yeah.

01:22:21.890 --> 01:22:27.874
AUDIENCE: [INAUDIBLE]
mountain, it would be reversed

01:22:27.874 --> 01:22:30.224
and then it would be
foldable [INAUDIBLE].

01:22:30.224 --> 01:22:30.890
PROFESSOR: Yeah.

01:22:30.890 --> 01:22:31.770
This is good.

01:22:31.770 --> 01:22:33.530
This is the case
that could work.

01:22:33.530 --> 01:22:35.560
This is foldable
if you try it out.

01:22:35.560 --> 01:22:38.040
You first told here,
and then the valley

01:22:38.040 --> 01:22:41.030
falls onto the mountain but it
turns upside down as it folds,

01:22:41.030 --> 01:22:43.400
and so they actually nest
nicely inside each other.

01:22:43.400 --> 01:22:45.180
It's confusing because
it's inverting.

01:22:45.180 --> 01:22:47.364
This is the one valley
case, but my point

01:22:47.364 --> 01:22:49.280
is you have to fold this
before you fold that.

01:22:52.120 --> 01:22:54.120
There's a little more
details in the notes here.

01:22:54.120 --> 01:22:56.620
You can make this into a really
fast linear time algorithm

01:22:56.620 --> 01:22:57.995
if you use fancy
data structures,

01:22:57.995 --> 01:23:01.880
but that's beyond
this scope, and that

01:23:01.880 --> 01:23:04.700
is the end of lecture two.

