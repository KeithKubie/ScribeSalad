WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:02.190
Okay so we are going to go ahead and restructure this program

00:00:02.190 --> 00:00:05.210
a little bit to use our new secure functions. You can see

00:00:05.210 --> 00:00:08.198
I've, I've got them here. The three functions that we were working

00:00:08.198 --> 00:00:10.840
on in those quizzes. Let's go ahead and use those. So the first

00:00:10.840 --> 00:00:11.910
thing that we want to do is we are not going to

00:00:11.910 --> 00:00:15.340
store these visits in a variable called visits anymore we are going to

00:00:15.340 --> 00:00:21.640
call it visit cookie dough. Equal get visits. 'Kay. And we're also,

00:00:21.640 --> 00:00:25.530
we're going to make a new variable for actual visits count. I'm just going to

00:00:25.530 --> 00:00:29.900
give by default, be zero. And then we say if visits,

00:00:29.900 --> 00:00:33.460
cookie val, basically if it's not none because get will return

00:00:33.460 --> 00:00:35.750
none if that cookie doesn't exist at all. Which is whats

00:00:35.750 --> 00:00:37.970
going to happen if the users never been to us. We're going

00:00:37.970 --> 00:00:40.650
to run our check secure valve on this visit cookie stir.

00:00:40.650 --> 00:00:44.740
I renamed this variable to visit cookie stir and the result

00:00:44.740 --> 00:00:46.940
of that we're going to store in cookie val and remember

00:00:46.940 --> 00:00:51.310
if cookie val remember that function returns none if it wasn't valid.

00:00:51.310 --> 00:00:56.510
If cookie val visits equals int. Cookie Val. So we

00:00:56.510 --> 00:00:59.850
set visits to zero by default, we look up our cookie.

00:00:59.850 --> 00:01:02.790
If we have a cookie at all. We try to decode

00:01:02.790 --> 00:01:05.400
it using Check Secure Val, and if we got a result

00:01:05.400 --> 00:01:08.280
back from that. That's our valid result, we convert it

00:01:08.280 --> 00:01:10.640
to an integer and we sort in visits. So visits is.

00:01:10.640 --> 00:01:12.840
is either zero or what we got in the cookie. We

00:01:12.840 --> 00:01:16.730
don't need to check Any more if its a digit because

00:01:16.730 --> 00:01:19.690
we're going to assume its valid so we're going to say visits

00:01:19.690 --> 00:01:22.590
plus equals one because know we know its valid, nobody's tampered with it.

00:01:22.590 --> 00:01:27.190
This integer should have worked. Now we need to update our new our

00:01:27.190 --> 00:01:30.690
new cookie value. So we call our make secure val function. We gotta

00:01:30.690 --> 00:01:33.190
convert visits to a string before you send that in and then we

00:01:33.190 --> 00:01:36.070
are going to send that to our header. Okay, so we made these

00:01:36.070 --> 00:01:38.420
changes, let's go to our browser and give it a try. So we're

00:01:38.420 --> 00:01:41.740
in our browser, reload our page. The physi cookie has whatever we left

00:01:41.740 --> 00:01:43.900
in it before 10,001 or something which isn't going to be

00:01:43.900 --> 00:01:46.970
valid because there's no hash. So we reload the page and

00:01:46.970 --> 00:01:49.350
we start seeing our counter, but you can see our, our

00:01:49.350 --> 00:01:53.830
feature's working now. You can, you can see our counter's working.

00:01:53.830 --> 00:01:56.800
If we look at our cookie, you can see it now

00:01:56.800 --> 00:02:01.000
stores the number. And it has the hash. Notice it's got

00:02:01.000 --> 00:02:05.230
a pipe here, I notice a little snafu with Google app

00:02:05.230 --> 00:02:07.600
engine when I was working on this where a comma and

00:02:07.600 --> 00:02:11.680
a cookie had some special meaning so I changed our

00:02:11.680 --> 00:02:15.500
function to use the pipe character instead of a comma

00:02:17.020 --> 00:02:21.060
because I was getting a bug. Here are my cookie

00:02:21.060 --> 00:02:24.050
str didn't have anything after the comma. So, I have switched

00:02:24.050 --> 00:02:25.430
from commas to pipes and that is what we will

00:02:25.430 --> 00:02:27.210
use for the rest of the lesson. Back to the

00:02:27.210 --> 00:02:30.050
browser. We can see that we, we have this cookie.

00:02:30.050 --> 00:02:33.470
If we were to mangle this cookie a bit, by saying

00:02:33.470 --> 00:02:41.350
this equals 10,001 and then we will use this same hash like this. 10,001

00:02:41.350 --> 00:02:48.510
and reload the page. It resets us back to one. Because our cookie wasn't valid,

00:02:48.510 --> 00:02:50.830
or at least the number and the cookie didn't match the hat, match the

00:02:50.830 --> 00:02:58.650
hash. So because the check secure val failed, we reset visits back to zero. Or,

00:02:58.650 --> 00:03:01.010
actually what we, we never set it to what its true value is.

