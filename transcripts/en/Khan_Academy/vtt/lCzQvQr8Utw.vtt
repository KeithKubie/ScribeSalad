WEBVTT
Kind: captions
Language: en

00:00:00.264 --> 00:00:01.680
What I want to do
in this video is

00:00:01.680 --> 00:00:04.090
go over what I think is one
of the more intuitive ways

00:00:04.090 --> 00:00:04.820
to sort a list.

00:00:04.820 --> 00:00:07.810
It's how I would probably sort
it, if I had to do it manually.

00:00:07.810 --> 00:00:10.410
But I want to make it clear, it
is not the most efficient way

00:00:10.410 --> 00:00:12.140
to sort a list.

00:00:12.140 --> 00:00:15.060
I think it's a good starting
point to getting warmed up

00:00:15.060 --> 00:00:15.880
with sorting lists.

00:00:15.880 --> 00:00:17.005
It's called insertion_sort.

00:00:21.570 --> 00:00:24.320
And I'm going to give
a graphical description

00:00:24.320 --> 00:00:26.600
of the algorithm
for insertion_sort.

00:00:26.600 --> 00:00:28.100
And just so you
know what, algorithm

00:00:28.100 --> 00:00:30.780
sounds like a very fancy
word, but an algorithm

00:00:30.780 --> 00:00:35.120
is really just a way of sorting
it, or a process for doing it,

00:00:35.120 --> 00:00:36.560
or a method for doing it.

00:00:36.560 --> 00:00:40.430
A program is a specific
implementation of an algorithm,

00:00:40.430 --> 00:00:43.520
or it can be a specific
implementation of an algorithm.

00:00:43.520 --> 00:00:46.510
Once I have a general algorithm,
I could implement it in Python.

00:00:46.510 --> 00:00:49.310
I could implement it in C. I
could implement it in Java.

00:00:49.310 --> 00:00:50.790
Those are specific programs.

00:00:50.790 --> 00:00:53.931
But they'd all be implementing
the same way of doing the sort.

00:00:53.931 --> 00:00:55.430
And that's what I'm
describing here,

00:00:55.430 --> 00:00:58.220
the insertion_sort algorithm.

00:00:58.220 --> 00:01:00.540
So let's just start
with a simple example.

00:01:00.540 --> 00:01:02.660
Let's say that I have a list.

00:01:02.660 --> 00:01:04.610
Let's say I have a Python
list, because we're

00:01:04.610 --> 00:01:06.680
going to be working
in Python for this.

00:01:06.680 --> 00:01:16.020
And that list is, let's
say, it is 7, 3, 1, 2, 4, 6.

00:01:16.020 --> 00:01:19.950
And so the way that
we do insertion_sort

00:01:19.950 --> 00:01:22.470
is you go element by element.

00:01:22.470 --> 00:01:25.140
And then you compare it
to the elements before it.

00:01:25.140 --> 00:01:28.080
And then you look for the
first element before it

00:01:28.080 --> 00:01:30.230
that it is actually less than.

00:01:30.230 --> 00:01:32.340
And then you just stick
it right over there.

00:01:32.340 --> 00:01:34.630
So let me show you
what I'm talking about.

00:01:34.630 --> 00:01:40.496
So you could start with the
7, the 0-th element over here.

00:01:40.496 --> 00:01:42.120
But when you start
with a 0-th element,

00:01:42.120 --> 00:01:43.200
you're like, hey,
wait, there's nothing

00:01:43.200 --> 00:01:44.396
before it to compare it to.

00:01:44.396 --> 00:01:47.020
So it really doesn't make sense
to start with the 0-th element.

00:01:47.020 --> 00:01:49.300
So really, if you were to
implement this algorithm,

00:01:49.300 --> 00:01:50.960
you'll start it with
the third element.

00:01:50.960 --> 00:01:54.090
Or sorry, you'll start it with--
if this is the 0-th element,

00:01:54.090 --> 00:01:57.440
you'd start it with the first
element right over here.

00:01:57.440 --> 00:01:58.790
If this is 0-th, this is first.

00:01:58.790 --> 00:02:00.010
I know this can be a
little confusing when

00:02:00.010 --> 00:02:01.750
you refer to this as
the first element.

00:02:01.750 --> 00:02:03.150
But this one's the 0-th.

00:02:03.150 --> 00:02:05.170
So you start with this 3 here.

00:02:05.170 --> 00:02:07.570
And then you start comparing
it to all of the elements

00:02:07.570 --> 00:02:08.490
before it.

00:02:08.490 --> 00:02:12.040
And as soon as you find an
element that 3 is less than,

00:02:12.040 --> 00:02:14.370
you stick it in that
part of the list.

00:02:14.370 --> 00:02:18.210
So what you do is you
say, OK, is 3 less than 7?

00:02:18.210 --> 00:02:20.530
Well, yeah, it is less than 7.

00:02:20.530 --> 00:02:25.740
So what you want to do is you
want to shift 7 where the 3 is.

00:02:25.740 --> 00:02:26.920
So let me put it out here.

00:02:26.920 --> 00:02:30.940
So we're trying to compare 3 to
everything before it right now.

00:02:34.580 --> 00:02:36.240
So you say, OK,
is 3 less than 7?

00:02:36.240 --> 00:02:37.700
Yeah, it is less than 7.

00:02:37.700 --> 00:02:39.840
So let's put the
7 where the 3 is.

00:02:42.570 --> 00:02:47.740
And let's put the 3 where
the 7 is, especially

00:02:47.740 --> 00:02:51.620
because there's nothing
left to compare the 3 to.

00:02:51.620 --> 00:02:54.180
There's no elements
before the 0-th element,

00:02:54.180 --> 00:02:57.050
so let's just stick
the 3 right over there.

00:02:57.050 --> 00:02:59.340
And so our list now
looks like this.

00:02:59.340 --> 00:03:07.510
Our list now looks like
3, 7, 1, 2, 4, and 6.

00:03:07.510 --> 00:03:09.406
And one thing you'll
find interesting,

00:03:09.406 --> 00:03:10.780
or something to
pay attention to,

00:03:10.780 --> 00:03:14.525
is as we build this list--
so the 0-th element is now

00:03:14.525 --> 00:03:16.150
definitely less than
the first element.

00:03:16.150 --> 00:03:18.520
And everything up to and
including the first element

00:03:18.520 --> 00:03:19.435
is now sorted.

00:03:22.840 --> 00:03:25.930
And that will be true, as
we keep going through this.

00:03:25.930 --> 00:03:28.400
As we keep going through higher
and higher indexes, up to

00:03:28.400 --> 00:03:30.400
and including that
index after we've done

00:03:30.400 --> 00:03:32.290
that pass will be sorted.

00:03:32.290 --> 00:03:34.530
And I'll try to point
that out as we go along.

00:03:34.530 --> 00:03:36.250
So we did the first index.

00:03:36.250 --> 00:03:37.800
So we already did
the first index.

00:03:37.800 --> 00:03:41.070
Now we can move on to
the second element,

00:03:41.070 --> 00:03:43.190
which is this 1 over here.

00:03:43.190 --> 00:03:44.800
And so you take that 1.

00:03:44.800 --> 00:03:46.914
I'll put it on the
side right over here.

00:03:46.914 --> 00:03:49.330
You take that 1 and you compare
it to each of the elements

00:03:49.330 --> 00:03:50.070
before it.

00:03:50.070 --> 00:03:51.640
OK, is 1 less than 7?

00:03:51.640 --> 00:03:54.150
Sure, 1 is less than 7.

00:03:54.150 --> 00:03:56.720
So let's stick the
7 where the 1 is.

00:03:59.410 --> 00:04:02.950
And then you could
just keep comparing,

00:04:02.950 --> 00:04:06.110
or you could just stick
the 1 where the 7 is.

00:04:06.110 --> 00:04:08.680
And then you would say,
OK, is 1 less than 3?

00:04:08.680 --> 00:04:10.010
Well, yeah, sure.

00:04:10.010 --> 00:04:11.130
It's less than 3.

00:04:11.130 --> 00:04:15.000
So let's stick the
3 where the 1 is.

00:04:15.000 --> 00:04:18.839
And let's put the
1 where the 3 is.

00:04:18.839 --> 00:04:21.110
So what is our list now?

00:04:21.110 --> 00:04:32.500
Our list now is going to look
like 1, 1, 3, 7, 2, 4, 6.

00:04:32.500 --> 00:04:36.380
So notice, after we've
gotten to the n-th index-- so

00:04:36.380 --> 00:04:38.170
in this case, this
was the index of 2

00:04:38.170 --> 00:04:40.590
where that 1 was right
over there-- everything up

00:04:40.590 --> 00:04:42.660
to and including
that index is sorted.

00:04:42.660 --> 00:04:45.370
This part right here is sorted.

00:04:45.370 --> 00:04:47.620
Other things are going to
be thrown in here, probably,

00:04:47.620 --> 00:04:48.430
as we go on.

00:04:48.430 --> 00:04:50.150
But so far, this part is sorted.

00:04:50.150 --> 00:04:52.840
So you can see by the time we
get to the end of this list,

00:04:52.840 --> 00:04:55.160
everything is
going to be sorted.

00:04:55.160 --> 00:04:57.920
So let's now go
to the next index,

00:04:57.920 --> 00:05:00.240
or the next item in the list.

00:05:00.240 --> 00:05:02.110
And that is this 2 over here.

00:05:05.300 --> 00:05:07.560
And so we compare
the 2 to the 7.

00:05:07.560 --> 00:05:10.450
2 is definitely less
than the 7, so let's put

00:05:10.450 --> 00:05:14.000
the 7 where the 2 is, and
let's put the 2 where the 7 is.

00:05:14.000 --> 00:05:16.110
Now you compare the 2 to the 3.

00:05:16.110 --> 00:05:17.820
2 is less than 3.

00:05:17.820 --> 00:05:20.370
So let's put the 3 where
the 2 is, and let's

00:05:20.370 --> 00:05:22.220
put the 2 where the 3 is.

00:05:22.220 --> 00:05:24.230
Then compare 2 to 1.

00:05:24.230 --> 00:05:25.720
Is 2 less than 1?

00:05:25.720 --> 00:05:29.840
No, it is not less than 1, so we
don't have to do anything else.

00:05:29.840 --> 00:05:32.360
We don't have to keep
going to the left.

00:05:32.360 --> 00:05:34.170
And so now, after this
pass-- in this pass,

00:05:34.170 --> 00:05:37.830
we were comparing this 2 item
to everything before that.

00:05:37.830 --> 00:05:41.450
So after this pass, our
list looks like this.

00:05:41.450 --> 00:05:51.380
Our list looks like
1, 2, 3, 7, 4, 6.

00:05:51.380 --> 00:05:55.890
And notice everything up to
and including the third item,

00:05:55.890 --> 00:05:59.530
so 0-th 1 2, third
item, is now sorted.

00:05:59.530 --> 00:06:05.100
And now we're ready to look at
the next element in the list.

00:06:05.100 --> 00:06:06.640
And one thing I
want to make clear,

00:06:06.640 --> 00:06:08.265
when you actually
implement it, there's

00:06:08.265 --> 00:06:10.590
a couple of ways to do it.

00:06:10.590 --> 00:06:12.800
So in this example, we
said, hey, 2 is less than 7.

00:06:12.800 --> 00:06:15.836
We had the 7 replace where
the 2 is, which you should do.

00:06:15.836 --> 00:06:17.710
And then we had the 2
replace where the 7 is.

00:06:17.710 --> 00:06:20.130
But the reality is you
can keep going down,

00:06:20.130 --> 00:06:22.080
until you find a good
place to put the 2,

00:06:22.080 --> 00:06:24.470
and shifting everything
to the right as you do it,

00:06:24.470 --> 00:06:25.769
and then putting the 2 in.

00:06:25.769 --> 00:06:28.310
Although this way, it's a little
bit easier to keep track of.

00:06:28.310 --> 00:06:30.143
And well, maybe we'll
explore different ways

00:06:30.143 --> 00:06:32.530
to do it when we actually
implement the algorithm.

00:06:32.530 --> 00:06:33.970
Anyway, let's look at this 4.

00:06:33.970 --> 00:06:35.800
Same exact idea.

00:06:35.800 --> 00:06:38.240
4 is less than 7,
so let's put the 7

00:06:38.240 --> 00:06:41.226
where the 4 is and put
the 4 where the 7 is.

00:06:41.226 --> 00:06:42.280
Is 4 less than 3?

00:06:42.280 --> 00:06:44.990
No, it's not less
than 3, so we stop.

00:06:44.990 --> 00:06:45.790
We're done.

00:06:45.790 --> 00:06:49.490
Now everything up to and
including the fourth item

00:06:49.490 --> 00:06:53.230
in this list, 0, 1, 2,
3, 4, is now sorted.

00:06:53.230 --> 00:06:55.590
And now our list
looks like-- let

00:06:55.590 --> 00:07:00.345
me scroll down a little bit--
now our list looks like this.

00:07:00.345 --> 00:07:01.220
Let me write it down.

00:07:01.220 --> 00:07:08.710
It is 1, 2, 3, 4, 7, and then 6.

00:07:08.710 --> 00:07:13.216
And now we can go to this
last element in the list.

00:07:13.216 --> 00:07:14.840
This is the 6 that
we're now comparing.

00:07:14.840 --> 00:07:17.200
Actually, the last
time we did this,

00:07:17.200 --> 00:07:19.340
it was a 4 that we cared about.

00:07:19.340 --> 00:07:20.790
But now we care about the 6.

00:07:20.790 --> 00:07:22.380
Is 6 less than 7?

00:07:22.380 --> 00:07:23.070
Sure, it is.

00:07:23.070 --> 00:07:24.750
So let's put 7 where the 6 is.

00:07:24.750 --> 00:07:26.430
Let's put a 6 where the 7 is.

00:07:26.430 --> 00:07:28.030
Is 6 less than 4?

00:07:28.030 --> 00:07:29.250
No, it's not.

00:07:29.250 --> 00:07:30.970
And so we stop, because
we know that this

00:07:30.970 --> 00:07:31.820
is going to be sorted.

00:07:31.820 --> 00:07:33.236
If we went any
further, we're just

00:07:33.236 --> 00:07:35.660
going to get elements that
are less than or equal to 4.

00:07:35.660 --> 00:07:36.890
So we are done.

00:07:36.890 --> 00:07:38.750
We have sorted this list.

00:07:38.750 --> 00:07:43.459
The sorted list is now
1, 2, 3, 4, 6, and 7.

00:07:43.459 --> 00:07:45.000
In the next video,
I'm actually going

00:07:45.000 --> 00:07:47.230
to try to implement this
algorithm that I just

00:07:47.230 --> 00:07:48.150
described.

00:07:48.150 --> 00:07:51.860
And I'm going to implement it
in a simple Python function.

