WEBVTT
Kind: captions
Language: en

00:00:00.994 --> 00:00:06.461
[MUSIC PLAYING]

00:01:37.144 --> 00:01:38.430
DANNY HERMES: Hey, everybody.

00:01:38.430 --> 00:01:41.710
Welcome back to Google
App Engine, Google

00:01:41.710 --> 00:01:43.020
Developers Live this week.

00:01:43.020 --> 00:01:47.310
We were here, both me
and Dan, last week.

00:01:47.310 --> 00:01:49.180
For those who weren't here,
I'm Danny Hermes.

00:01:49.180 --> 00:01:50.490
I work on App Engine.

00:01:50.490 --> 00:01:52.680
And we're here specifically
today--

00:01:52.680 --> 00:01:54.940
DAN HOLEVOET: To talk about
Google Cloud Endpoints.

00:01:54.940 --> 00:01:59.280
So if you haven't heard about
Endpoints before, it's--

00:01:59.280 --> 00:02:01.650
well, App Engine, in general,
is a really great place to

00:02:01.650 --> 00:02:03.880
build backends for your
mobile applications.

00:02:03.880 --> 00:02:06.650
And Endpoints, which is a
feature we recently released

00:02:06.650 --> 00:02:12.280
as part of the 175 SDK, allows
it even more easily make App

00:02:12.280 --> 00:02:14.400
Engine a backend for your
mobile applications.

00:02:14.400 --> 00:02:19.180
And we allow you to do this by
allowing you to annotate code

00:02:19.180 --> 00:02:21.910
that you have within your
application to easily expose

00:02:21.910 --> 00:02:25.490
APIs that you consume from
within an Android, iOS, or

00:02:25.490 --> 00:02:28.080
JavaScript applications.

00:02:28.080 --> 00:02:32.200
So last week, we started
building a task management

00:02:32.200 --> 00:02:33.250
application.

00:02:33.250 --> 00:02:35.760
And Danny, why don't you tell
us a little bit more about

00:02:35.760 --> 00:02:37.560
that app and how we can
improve upon it?

00:02:37.560 --> 00:02:38.510
DANNY HERMES: Yes.

00:02:38.510 --> 00:02:41.560
So I mentioned a few times while
we were building it last

00:02:41.560 --> 00:02:44.970
week that there were things
that could be done easier.

00:02:44.970 --> 00:02:47.580
And Dan actually just said,
when he was talking about

00:02:47.580 --> 00:02:51.350
Endpoints and its release, that
we were trying to make it

00:02:51.350 --> 00:02:54.480
more easy to build APIs
in App Engine.

00:02:54.480 --> 00:02:58.280
Well, today, I want to talk to
you about this library called

00:02:58.280 --> 00:03:01.570
Endpoints Proto Datastore, which
is going to take more

00:03:01.570 --> 00:03:04.170
easy and make it more easy.

00:03:04.170 --> 00:03:08.440
So I'm going to start
off with the code

00:03:08.440 --> 00:03:10.250
that we had last week.

00:03:10.250 --> 00:03:13.820
I'm actually here on the
Downloads page where there's a

00:03:13.820 --> 00:03:15.610
zip of the library.

00:03:15.610 --> 00:03:17.220
I'm not going to download
it yet.

00:03:17.220 --> 00:03:18.730
But first I'm going to start
off and review the

00:03:18.730 --> 00:03:21.620
application, what it did, and
then that way when we go

00:03:21.620 --> 00:03:26.770
through an upgrade, it'll
be a bit easier.

00:03:26.770 --> 00:03:29.510
This is the exact same source
as I left with last week,

00:03:29.510 --> 00:03:33.100
except I switched the order of
these first two imports.

00:03:33.100 --> 00:03:34.170
Dan didn't stop me.

00:03:34.170 --> 00:03:36.140
They were out of alphabetical
order.

00:03:36.140 --> 00:03:39.370
That's not adhering to the
Python style guide.

00:03:39.370 --> 00:03:41.880
We do some other things at
Google that are a bit

00:03:41.880 --> 00:03:43.260
different than the Python
style guide.

00:03:43.260 --> 00:03:46.980
But definitely alphabetical
order is universal bad.

00:03:46.980 --> 00:03:47.570
Anyhow--

00:03:47.570 --> 00:03:48.800
DAN HOLEVOET: It was
live coding.

00:03:48.800 --> 00:03:49.360
DANNY HERMES: It was
live coding.

00:03:49.360 --> 00:03:50.470
DAN HOLEVOET: It's
probably OK.

00:03:50.470 --> 00:03:52.440
DANNY HERMES: Sure.

00:03:52.440 --> 00:03:53.060
Only 100%.

00:03:53.060 --> 00:03:54.570
We only have room for 100%.

00:03:54.570 --> 00:03:57.980
Anyway, so we have
a few imports.

00:03:57.980 --> 00:04:01.110
So Endpoints, obviously, is
a dependency, and then ndb

00:04:01.110 --> 00:04:04.050
because we were persisting data,
and then we had some

00:04:04.050 --> 00:04:05.840
ProtoRPC imports.

00:04:05.840 --> 00:04:08.510
For those who haven't watched
the video yet or are curious,

00:04:08.510 --> 00:04:12.320
ProtoRPC is a way for us to have
native Python objects,

00:04:12.320 --> 00:04:14.720
which can actually be turned
into protocol buffers, which

00:04:14.720 --> 00:04:17.709
is actually what Endpoints uses
from within App Engine to

00:04:17.709 --> 00:04:20.230
talk to the rest of Google's
API infrastructure.

00:04:20.230 --> 00:04:23.860
And I definitely go on and on,
lots of wind coming out of

00:04:23.860 --> 00:04:26.430
this wind bag, a bit
more last week.

00:04:26.430 --> 00:04:29.630
So if you want to hear more
about it, go watch the video.

00:04:29.630 --> 00:04:34.220
So I have imports for actually
making message classes, a

00:04:34.220 --> 00:04:36.910
specialized module called
message_types, and then a

00:04:36.910 --> 00:04:39.520
module called remote, which we
actually used to define the

00:04:39.520 --> 00:04:41.480
service object for the API.

00:04:41.480 --> 00:04:43.890
Then from there, we define
some things to

00:04:43.890 --> 00:04:44.780
represent our data.

00:04:44.780 --> 00:04:48.050
So this first thing-- task
that we see here--

00:04:48.050 --> 00:04:50.790
is a ProtoRPC message
to represent tasks

00:04:50.790 --> 00:04:52.160
for our task list.

00:04:52.160 --> 00:04:55.530
And right next to it is the
corresponding ndb model to

00:04:55.530 --> 00:04:58.370
hold the data persistently
in the data store for our

00:04:58.370 --> 00:04:59.390
application.

00:04:59.390 --> 00:05:02.020
And then finally, since we
wanted people to actually find

00:05:02.020 --> 00:05:06.110
out how many tasks they had,
we defined a task list

00:05:06.110 --> 00:05:11.270
ProtoRPC model, which had a
single field, which was a

00:05:11.270 --> 00:05:14.550
repeated field for messages so
we could just send back all

00:05:14.550 --> 00:05:16.370
the tasks--

00:05:16.370 --> 00:05:18.250
excuse me, for task messages.

00:05:18.250 --> 00:05:21.330
So we could send back all the
tasks that we had inserted up

00:05:21.330 --> 00:05:22.810
to that point.

00:05:22.810 --> 00:05:27.710
Then from there, we actually
created a task API, which is,

00:05:27.710 --> 00:05:30.730
as I mentioned, a subclass
of remote.Service.

00:05:30.730 --> 00:05:33.810
And this actually won't change
from this sample to the sample

00:05:33.810 --> 00:05:35.350
which I'm going to
write today.

00:05:35.350 --> 00:05:39.190
And we specify some
API metadata.

00:05:39.190 --> 00:05:43.220
And then we had two methods,
insert_task and list_tasks.

00:05:43.220 --> 00:05:46.960
And on each of these, in the
endpoints.method decorator, we

00:05:46.960 --> 00:05:50.610
also supply some metadata, which
includes the ProtoRPC

00:05:50.610 --> 00:05:53.110
classes needed to actually--

00:05:53.110 --> 00:05:56.590
to serialize our data from
Google's API infrastructure to

00:05:56.590 --> 00:05:58.730
our application and then
on the way out.

00:05:58.730 --> 00:06:03.550
And then finally, we create an
actual application, which is a

00:06:03.550 --> 00:06:08.760
WSGI application, which our
app.yaml routes to using

00:06:08.760 --> 00:06:10.100
endpoints.api_server.

00:06:10.100 --> 00:06:14.270
We just give it a list of all
our APIs and just had one API.

00:06:14.270 --> 00:06:16.130
So great.

00:06:16.130 --> 00:06:17.520
That was last week.

00:06:17.520 --> 00:06:18.320
Now, this week.

00:06:18.320 --> 00:06:22.130
I'm going to first download a
zip, which just contains the

00:06:22.130 --> 00:06:23.610
library we're going to use.

00:06:23.610 --> 00:06:26.060
I anticipate this will
be very quick.

00:06:26.060 --> 00:06:27.050
So get ready.

00:06:27.050 --> 00:06:29.250
After we upgrade the
application, we're going to do

00:06:29.250 --> 00:06:31.290
some more things than
we did last week.

00:06:31.290 --> 00:06:32.700
Time pending.

00:06:32.700 --> 00:06:39.090
So I'm here if you-- that
is not the right link.

00:06:39.090 --> 00:06:43.410
I'm here on the Downloads
page within the

00:06:43.410 --> 00:06:45.080
endpoints-proto-datastore
project

00:06:45.080 --> 00:06:46.300
on Google code hosting.

00:06:46.300 --> 00:06:49.050
And if you click the
endpoints_proto_datastore.zip

00:06:49.050 --> 00:06:52.300
link, you'll be taken to
the Download page.

00:06:52.300 --> 00:06:53.900
Now, we see there's two
downloads already.

00:06:53.900 --> 00:06:55.360
Well, that was actually me.

00:06:55.360 --> 00:06:58.310
So get out there and
download it.

00:06:58.310 --> 00:07:01.320
But I'm going to click
this link.

00:07:01.320 --> 00:07:03.640
I'm going to copy the link, and
I'm just going to copy it

00:07:03.640 --> 00:07:06.080
into my directory using wget.

00:07:06.080 --> 00:07:08.760
OK, so we've download it.

00:07:08.760 --> 00:07:09.770
And it's there.

00:07:09.770 --> 00:07:12.530
So now I'm going to unzip it.

00:07:12.530 --> 00:07:14.430
And I've extracted everything
I need.

00:07:14.430 --> 00:07:17.280
OK, so now I can go ahead
and get to work.

00:07:17.280 --> 00:07:20.120
So I'm going to open this
main.py backup.

00:07:20.120 --> 00:07:22.450
Actually, before I do that, I
just want to prove to everyone

00:07:22.450 --> 00:07:23.920
that app still works.

00:07:23.920 --> 00:07:27.490
Let's do that, and maybe
add one task.

00:07:27.490 --> 00:07:31.790
So I came here to my Google App
Engine Launcher, and then

00:07:31.790 --> 00:07:37.570
I'm going to go into
Chrome for

00:07:37.570 --> 00:07:44.560
localhost8080/_ah/api/explore.

00:07:44.560 --> 00:07:47.700
And I'm going to make calls from
the Google APIs Explorer.

00:07:47.700 --> 00:07:50.530
Again, we talked about
this last week.

00:07:50.530 --> 00:07:53.110
And we even had a custom
version, vGDL, for our

00:07:53.110 --> 00:07:53.720
application.

00:07:53.720 --> 00:07:56.610
If people are interested in
using the APIs Explorer,

00:07:56.610 --> 00:08:01.680
please add to our already
1,400 plus views on last

00:08:01.680 --> 00:08:03.670
week's video.

00:08:03.670 --> 00:08:05.130
OK, we have the API.

00:08:05.130 --> 00:08:08.920
We have the two methods
we expect.

00:08:08.920 --> 00:08:10.730
And let's see.

00:08:10.730 --> 00:08:11.210
Name.

00:08:11.210 --> 00:08:13.050
Go to sleep.

00:08:13.050 --> 00:08:17.010
And the owner, Danny.

00:08:17.010 --> 00:08:18.120
Sweet.

00:08:18.120 --> 00:08:19.450
OK, it works.

00:08:19.450 --> 00:08:22.730
And I'll just double check
the list also works.

00:08:22.730 --> 00:08:23.690
OK, great.

00:08:23.690 --> 00:08:26.270
So now I'm going to upgrade
the application.

00:08:26.270 --> 00:08:30.060
So starting with
our endpoints--

00:08:30.060 --> 00:08:31.565
or excuse me, our imports.

00:08:31.565 --> 00:08:33.270
I had a little Freudian
slip there.

00:08:33.270 --> 00:08:36.140
There's a few that we
can throw away.

00:08:36.140 --> 00:08:38.600
And this is what
makes me happy.

00:08:38.600 --> 00:08:41.960
So we have here task and task
model side by side.

00:08:41.960 --> 00:08:45.200
And we have to define them even
though it's the exact

00:08:45.200 --> 00:08:46.120
same thing.

00:08:46.120 --> 00:08:50.470
StringField, StringProperty
required=True is identical

00:08:50.470 --> 00:08:51.620
from one to the other.

00:08:51.620 --> 00:08:55.090
So we wanted to make something
sort of magical.

00:08:55.090 --> 00:08:57.640
We actually were calling it
magic mode amongst ourselves

00:08:57.640 --> 00:08:58.490
for a while.

00:08:58.490 --> 00:09:03.200
That would allow you to still
be able to speak ProtoRPCs,

00:09:03.200 --> 00:09:07.270
still be able to speak protocol
buffers, but to also

00:09:07.270 --> 00:09:09.090
be able to persist your data.

00:09:09.090 --> 00:09:11.610
So that's where Endpoints Proto
Datastore comes in.

00:09:11.610 --> 00:09:13.060
So I actually get to throw away

00:09:13.060 --> 00:09:15.490
messages and message types.

00:09:15.490 --> 00:09:17.590
I don't need either of those.

00:09:17.590 --> 00:09:20.800
I'm still going to keep
endpoints because it helps me

00:09:20.800 --> 00:09:23.610
assign metadata to methods
and the API.

00:09:23.610 --> 00:09:26.690
And I'm still going to keep ndb
because in our library, we

00:09:26.690 --> 00:09:28.870
actually took advantage
of the properties that

00:09:28.870 --> 00:09:30.840
already exist for ndb.

00:09:30.840 --> 00:09:33.490
Now I'm going to add
another import.

00:09:33.490 --> 00:09:35.365
This library I just added,
endpoints_proto_datastore.

00:09:39.190 --> 00:09:43.380
And it has a sub-package
called ndb.

00:09:43.380 --> 00:09:45.950
And from within there, I'm going
to import a model called

00:09:45.950 --> 00:09:47.040
EndpointsModel.

00:09:47.040 --> 00:09:51.120
And this is really just a
subclass of ndb.model that is

00:09:51.120 --> 00:09:54.300
more easy, like I said.

00:09:54.300 --> 00:09:58.220
We haven't implemented it, but
we're certainly open for

00:09:58.220 --> 00:10:01.790
others to implement different
persistence layers than ndb.

00:10:01.790 --> 00:10:04.020
For example, if people
want to use db--

00:10:04.020 --> 00:10:05.840
don't know why you would
because ndb is better.

00:10:05.840 --> 00:10:09.910
But if people do, the
utilities are there.

00:10:09.910 --> 00:10:11.840
The shared utilities are there
for you to be able to

00:10:11.840 --> 00:10:16.100
implement Endpoints Proto
Datastore.db in the same

00:10:16.100 --> 00:10:17.370
fashion ndb is.

00:10:17.370 --> 00:10:20.460
And if people are using Cloud
SQL or people are using Google

00:10:20.460 --> 00:10:23.560
Cloud Storage, people are using
Google Drive even, the

00:10:23.560 --> 00:10:26.180
utilities are there for you to
extend this to some other

00:10:26.180 --> 00:10:29.860
persistence layer, but we
chose handy-dandy ndb.

00:10:29.860 --> 00:10:32.950
Because for us, for using
the Datastore,

00:10:32.950 --> 00:10:35.310
it's certainly easiest.

00:10:35.310 --> 00:10:38.680
So great, I'm just going to
throw away this first task.

00:10:38.680 --> 00:10:40.020
I don't need it.

00:10:40.020 --> 00:10:44.160
And in TaskModel, I can actually
just get rid of

00:10:44.160 --> 00:10:47.250
ndb.model and use
Endpoints.Model.

00:10:47.250 --> 00:10:48.780
It really is this simple.

00:10:48.780 --> 00:10:51.360
If people have existing
applications and they want to

00:10:51.360 --> 00:10:54.670
turn them into an API, it's
really this simple to get the

00:10:54.670 --> 00:10:55.560
persistence right.

00:10:55.560 --> 00:10:59.690
Now, just for me, because I have
very specific tastes, I'd

00:10:59.690 --> 00:11:01.990
rather just call it Task instead
of TaskModel since we

00:11:01.990 --> 00:11:03.330
no longer have this
name collision.

00:11:03.330 --> 00:11:05.170
So I'm also going to do that.

00:11:05.170 --> 00:11:07.490
There's a bit more code
to strip out.

00:11:07.490 --> 00:11:10.510
In addition, I'd no longer
need the TaskList.

00:11:10.510 --> 00:11:14.630
Actually, making lists or
collections out of items from

00:11:14.630 --> 00:11:18.370
within this TaskModel is
supported out of the box by

00:11:18.370 --> 00:11:20.060
Endpoints Proto Datastore.

00:11:20.060 --> 00:11:20.550
Great.

00:11:20.550 --> 00:11:24.610
So we've gone from three
models to one.

00:11:24.610 --> 00:11:25.780
That's awesome, right?

00:11:25.780 --> 00:11:27.540
DAN HOLEVOET: Sounds
good to me.

00:11:27.540 --> 00:11:30.260
DANNY HERMES: So now, I don't
have to actually change the

00:11:30.260 --> 00:11:32.120
metadata associated with
the application.

00:11:32.120 --> 00:11:34.860
We have the name tags, version
vGDL, and a human readable

00:11:34.860 --> 00:11:35.810
description.

00:11:35.810 --> 00:11:40.060
Don't have to change the
subclass it inherits from, but

00:11:40.060 --> 00:11:42.130
I am going to be changing
how we're

00:11:42.130 --> 00:11:44.210
actually using our method.

00:11:44.210 --> 00:11:48.050
So rather than using the
Endpoints.method decorator and

00:11:48.050 --> 00:11:53.320
having to specify the request
and response ProtoRPC type of

00:11:53.320 --> 00:11:55.190
the request, I can
actually just use

00:11:55.190 --> 00:11:56.840
this model I've defined.

00:11:56.840 --> 00:11:59.550
And it has a class method which
acts as a decorator.

00:11:59.550 --> 00:12:01.830
So instead of endpoints.method,
I can just

00:12:01.830 --> 00:12:03.980
use task.method.

00:12:03.980 --> 00:12:07.610
And I can completely get rid of
these old ProtoRPC classes

00:12:07.610 --> 00:12:09.570
which no longer exist anyhow.

00:12:09.570 --> 00:12:13.450
And the rest of the metadata
can still be kept around.

00:12:13.450 --> 00:12:16.610
I'm also going to get rid
of http_method='POST'.

00:12:16.610 --> 00:12:19.680
I mentioned last week that it
was the default, and I didn't

00:12:19.680 --> 00:12:20.410
actually need it.

00:12:20.410 --> 00:12:21.370
It's the same here.

00:12:21.370 --> 00:12:24.390
It's the default, so I'm
not going to throw

00:12:24.390 --> 00:12:27.200
it in for no reason.

00:12:27.200 --> 00:12:30.680
And the great things about using
task.method instead of

00:12:30.680 --> 00:12:33.908
endpoints.method is?

00:12:33.908 --> 00:12:35.710
DAN HOLEVOET: Fewer
lines of code.

00:12:35.710 --> 00:12:37.320
DANNY HERMES: Fewer
lines of code.

00:12:37.320 --> 00:12:40.400
So what we have here--

00:12:40.400 --> 00:12:45.440
I was previously taking the
actual task ProtoRPC object

00:12:45.440 --> 00:12:48.620
and first casting it into an ndb
object before putting it

00:12:48.620 --> 00:12:49.790
into the Datastore.

00:12:49.790 --> 00:12:55.100
When you wrap your API method
with task.method, or whatever

00:12:55.100 --> 00:12:58.380
your endpoints model is .method,
you actually get an

00:12:58.380 --> 00:13:02.100
entity of that model rather than
some ProtoRPC object that

00:13:02.100 --> 00:13:05.250
you have to convert, and then
convert back and forth.

00:13:05.250 --> 00:13:08.550
So instead of request, we
actually have a task in our

00:13:08.550 --> 00:13:10.500
hands immediately.

00:13:10.500 --> 00:13:12.840
And so instead of converting it
to something else, we can

00:13:12.840 --> 00:13:15.580
say, hey, put that task
in the Datastore.

00:13:15.580 --> 00:13:18.860
Tasks love to be in
the Datastore.

00:13:18.860 --> 00:13:21.630
And instead of having
to cast it back

00:13:21.630 --> 00:13:24.280
into a ProtoRPC request--

00:13:24.280 --> 00:13:25.770
again, task.method--

00:13:25.770 --> 00:13:27.370
the decorator will do
all that for us.

00:13:27.370 --> 00:13:29.850
So we just give it an entity and
it does whatever it needs

00:13:29.850 --> 00:13:32.550
to do with that entity
on the way out.

00:13:32.550 --> 00:13:37.730
So it's really that simple to
convert our insert method.

00:13:37.730 --> 00:13:40.850
Now, instead of converting the
list method, I'm just going to

00:13:40.850 --> 00:13:43.255
show you guys that it works
first and comment out this

00:13:43.255 --> 00:13:43.620
other code.

00:13:43.620 --> 00:13:46.700
If I didn't comment it out, we
would have some issues with

00:13:46.700 --> 00:13:50.170
name errors, things that don't
exist and it is trying to use.

00:13:50.170 --> 00:13:51.590
So I'm commenting it out.

00:13:51.590 --> 00:13:55.040
And let's head over
to our API.

00:13:55.040 --> 00:13:57.170
So I'm going to refresh
this page.

00:13:57.170 --> 00:13:58.530
We should see list disappear.

00:13:58.530 --> 00:13:59.340
It did.

00:13:59.340 --> 00:13:59.690
Wonderful.

00:13:59.690 --> 00:14:01.100
DAN HOLEVOET: High five.

00:14:01.100 --> 00:14:02.820
DANNY HERMES: No errors.

00:14:02.820 --> 00:14:06.210
I like when I'm live
coding that--

00:14:06.210 --> 00:14:08.372
to have some errors.

00:14:08.372 --> 00:14:10.820
But unfortunately, since we've
taken more easy and made it

00:14:10.820 --> 00:14:13.260
more easy, it's almost
impossible to have errors.

00:14:13.260 --> 00:14:14.630
DAN HOLEVOET: We have
to run it first.

00:14:14.630 --> 00:14:15.490
DANNY HERMES: We
have to run it.

00:14:15.490 --> 00:14:16.170
Thank you.

00:14:16.170 --> 00:14:18.300
Dan is calling me out
on my hubris.

00:14:18.300 --> 00:14:19.530
We do have to run it.

00:14:19.530 --> 00:14:22.240
OK, so we're in this method.

00:14:22.240 --> 00:14:24.660
It's completely different.

00:14:24.660 --> 00:14:28.970
We have no more from ProtoRPC
import messages.

00:14:28.970 --> 00:14:32.580
Yet we still see the same
strongly typed things from our

00:14:32.580 --> 00:14:35.480
discovery document that
we saw before.

00:14:35.480 --> 00:14:36.230
OK, great.

00:14:36.230 --> 00:14:39.090
So I'll add something,
wake up.

00:14:39.090 --> 00:14:40.490
Danny should also wake up.

00:14:40.490 --> 00:14:43.585
Now, this is where time stamps
would come in handy.

00:14:43.585 --> 00:14:44.460
DAN HOLEVOET: Yeah, it would.

00:14:44.460 --> 00:14:46.170
DANNY HERMES: Honestly, it's
really easy to do with

00:14:46.170 --> 00:14:48.250
Endpoints Proto Datastore, but I
don't know if we're going to

00:14:48.250 --> 00:14:50.590
be doing it today.

00:14:50.590 --> 00:14:52.040
So we'll make Danny
the owner again.

00:14:52.040 --> 00:14:52.660
Let's see if it works.

00:14:52.660 --> 00:14:54.060
Let's just see if it works.

00:14:54.060 --> 00:14:55.660
DAN HOLEVOET: Oh, it worked.

00:14:55.660 --> 00:14:56.730
DANNY HERMES: Oh, it worked.

00:14:56.730 --> 00:14:57.490
Wonderful.

00:14:57.490 --> 00:14:58.740
I was a little nervous there.

00:14:58.740 --> 00:15:00.510
Great.

00:15:00.510 --> 00:15:04.240
So now let's actually
convert list tasks.

00:15:04.240 --> 00:15:07.850
Now, there's actually a reason
I wanted to do these

00:15:07.850 --> 00:15:08.790
separately.

00:15:08.790 --> 00:15:12.070
Because rather than having one
decorator for all methods,

00:15:12.070 --> 00:15:15.670
endpoints.method, we realized
that having collections and

00:15:15.670 --> 00:15:20.840
paging through things and
actually getting queries was a

00:15:20.840 --> 00:15:23.320
special kind of API request.

00:15:23.320 --> 00:15:28.450
So Endpoints Proto Datastore on
Endpoints models provides a

00:15:28.450 --> 00:15:32.010
special class method called
query_method.

00:15:32.010 --> 00:15:34.510
So rather than just being
called task.method, it's

00:15:34.510 --> 00:15:36.090
called task.query_method.

00:15:36.090 --> 00:15:38.820
And it's made just
for queries.

00:15:38.820 --> 00:15:45.600
So again, as with insert task, I
no longer need the types for

00:15:45.600 --> 00:15:46.710
the way in and the way out.

00:15:46.710 --> 00:15:48.610
I can just forget about it.

00:15:48.610 --> 00:15:52.410
And the rest of the metadata
completely accepted by this

00:15:52.410 --> 00:15:56.290
method, and even the http_method
get, while, it's a

00:15:56.290 --> 00:15:59.410
query, get is what you're
doing when it's a query.

00:15:59.410 --> 00:16:02.890
If you try to use an http_method
other than get,

00:16:02.890 --> 00:16:05.600
query method will tell you, no,
I'm not going to do any

00:16:05.600 --> 00:16:07.785
work for you because that's
all it's supposed to do.

00:16:07.785 --> 00:16:09.110
It's a query.

00:16:09.110 --> 00:16:12.050
So we can get rid
of that as well.

00:16:12.050 --> 00:16:15.470
And instead of having an unused
request, we actually

00:16:15.470 --> 00:16:19.130
have an ndb query object,
which we can use.

00:16:19.130 --> 00:16:22.850
And luckily, we don't actually
have to do anything with it.

00:16:22.850 --> 00:16:26.910
But if we have the requisite
time, we're actually going to

00:16:26.910 --> 00:16:29.210
add some auth to this.

00:16:29.210 --> 00:16:31.820
And we'll be doing queries
based on that.

00:16:31.820 --> 00:16:34.330
But we're certainly
not there yet.

00:16:34.330 --> 00:16:38.220
So this query method takes
all of this work.

00:16:38.220 --> 00:16:43.200
So I had to use the task
model, create a query.

00:16:43.200 --> 00:16:46.060
Then for each of those tasks, I
had to take them from an ndb

00:16:46.060 --> 00:16:53.490
entity, cast them into
a ProtoRPC entity.

00:16:53.490 --> 00:16:56.750
And then after that, I had to
take this list of ProtoRPC

00:16:56.750 --> 00:17:00.960
entities and pack it into a
task list ProtoRPC entity.

00:17:00.960 --> 00:17:03.950
Instead, just return query.

00:17:03.950 --> 00:17:06.559
And as Dan said so meekly
last time--

00:17:06.559 --> 00:17:07.720
DAN HOLEVOET: Fewer
lines of code.

00:17:07.720 --> 00:17:07.810
DANNY HERMES: Less code.

00:17:07.810 --> 00:17:08.849
Fewer lines of code.

00:17:08.849 --> 00:17:10.130
Playing code golf here.

00:17:10.130 --> 00:17:11.000
Great.

00:17:11.000 --> 00:17:14.530
So we should be done and ready
to extend the app, but let's

00:17:14.530 --> 00:17:15.905
make sure it actually works.

00:17:19.490 --> 00:17:22.670
So we'll head back
to the API page.

00:17:22.670 --> 00:17:25.470
We'll refresh, see if
we get both methods.

00:17:25.470 --> 00:17:27.010
All right, no errors.

00:17:27.010 --> 00:17:28.770
It loaded.

00:17:28.770 --> 00:17:31.060
First I'll try out lists
since we assume we

00:17:31.060 --> 00:17:32.310
didn't break insert.

00:17:34.530 --> 00:17:35.785
OK.

00:17:35.785 --> 00:17:38.350
DAN HOLEVOET: Interesting.

00:17:38.350 --> 00:17:42.390
DANNY HERMES: So this
is somewhat--

00:17:42.390 --> 00:17:47.310
I expected to get back Danny
wake up and Danny go to sleep.

00:17:47.310 --> 00:17:50.490
However, I'm realizing
now if we--

00:17:50.490 --> 00:17:51.300
where is it?

00:17:51.300 --> 00:17:56.930
If we go to the Admin page for
our application, they were

00:17:56.930 --> 00:17:58.110
different kinds.

00:17:58.110 --> 00:17:58.822
DAN HOLEVOET: Yes, they were.

00:17:58.822 --> 00:18:01.630
DANNY HERMES: So this is
querying for the kind task,

00:18:01.630 --> 00:18:05.270
which is what I renamed the
model to and which is the name

00:18:05.270 --> 00:18:06.990
of the Endpoints model
we just defined.

00:18:06.990 --> 00:18:11.130
And so I do see wake
up Danny in task.

00:18:11.130 --> 00:18:14.440
That is probably way too small
to see on the internet.

00:18:14.440 --> 00:18:15.890
I can see wake up
Danny in task.

00:18:15.890 --> 00:18:18.720
And in task model, we
see that old one.

00:18:18.720 --> 00:18:22.250
So go to sleep Danny didn't
make it, but that's OK.

00:18:22.250 --> 00:18:23.480
DAN HOLEVOET: It's not
technically a bug.

00:18:23.480 --> 00:18:24.380
DANNY HERMES: It's not a bug.

00:18:24.380 --> 00:18:25.110
It's not a bug.

00:18:25.110 --> 00:18:26.810
It's a bug in my expectations.

00:18:26.810 --> 00:18:29.890
Get some better expectations,
man.

00:18:29.890 --> 00:18:34.430
So essentially, before we do
some new things, an overview

00:18:34.430 --> 00:18:39.020
here is your persistence layer
and your abstraction layer to

00:18:39.020 --> 00:18:41.840
actually convert your entities
into something that Google's

00:18:41.840 --> 00:18:44.850
API infrastructure can
understand are exactly the

00:18:44.850 --> 00:18:46.290
same with Endpoints
Proto Datastore.

00:18:48.940 --> 00:18:52.990
So do you have anything you want
to add before I move on?

00:18:52.990 --> 00:18:53.160
DAN HOLEVOET: No.

00:18:53.160 --> 00:18:55.550
I think the big point here
is fewer lines of code.

00:18:55.550 --> 00:18:58.110
Actually, can you compare the
number of lines in your new

00:18:58.110 --> 00:18:59.170
example with the old one?

00:18:59.170 --> 00:19:01.530
DANNY HERMES: Sure.

00:19:01.530 --> 00:19:03.110
If I have them.

00:19:03.110 --> 00:19:04.360
Let's see.

00:19:06.660 --> 00:19:08.110
What do I want to do this?

00:19:08.110 --> 00:19:09.330
DAN HOLEVOET: You had
a real demo folder.

00:19:09.330 --> 00:19:10.120
Was it in there?

00:19:10.120 --> 00:19:12.510
DANNY HERMES: I know.

00:19:12.510 --> 00:19:14.680
So 50 lines is what it is.

00:19:14.680 --> 00:19:17.670
That's what that means.

00:19:17.670 --> 00:19:19.370
30.

00:19:19.370 --> 00:19:20.680
29.

00:19:20.680 --> 00:19:23.690
There we go, that's the
number we care about.

00:19:23.690 --> 00:19:28.060
And then, in case I screwed
this up, I had a demo_real

00:19:28.060 --> 00:19:30.870
folder and it had last
week's code.

00:19:33.860 --> 00:19:35.330
That had 45 lines of code.

00:19:35.330 --> 00:19:38.690
So we've lost a third
of our code.

00:19:38.690 --> 00:19:43.700
And if you take away the
boilerplate, we're talking 50%

00:19:43.700 --> 00:19:46.690
or more of the code that we've
actually cut away.

00:19:46.690 --> 00:19:48.010
DAN HOLEVOET: Nice.

00:19:48.010 --> 00:19:49.440
DANNY HERMES: And the big
thing is we had three

00:19:49.440 --> 00:19:53.480
relatively simple models, and
we condensed them into one.

00:19:53.480 --> 00:19:56.900
Well, you can imagine if you
took that up and had some

00:19:56.900 --> 00:20:00.060
pretty complex models how much
code that would compress.

00:20:00.060 --> 00:20:03.100
It'd be a lot more than three
lines gone for this and three

00:20:03.100 --> 00:20:05.630
lines gone for that.

00:20:05.630 --> 00:20:09.560
So before I move on and do auth,
I want to show you some

00:20:09.560 --> 00:20:12.830
of the paging capabilities
automatically enabled out of

00:20:12.830 --> 00:20:14.310
the box by query_method.

00:20:14.310 --> 00:20:27.020
So the analogy here to actually
specifying a ProtoRPC

00:20:27.020 --> 00:20:30.120
message definition for your
request and your response is

00:20:30.120 --> 00:20:32.490
actually having the fields
from your model

00:20:32.490 --> 00:20:34.520
that you want to use.

00:20:34.520 --> 00:20:43.620
So as we'll see in a bit when I
add auth, we would sometimes

00:20:43.620 --> 00:20:46.380
want to have a field not
sent from the API,

00:20:46.380 --> 00:20:48.030
but satisfy it locally.

00:20:48.030 --> 00:20:49.880
And sometimes otherwise.

00:20:49.880 --> 00:20:53.940
So we actually, out of the box,
have some helper fields

00:20:53.940 --> 00:20:54.680
for queries.

00:20:54.680 --> 00:20:59.990
We have a limit to the
amount of results

00:20:59.990 --> 00:21:01.160
we want to get back.

00:21:01.160 --> 00:21:05.210
We have a page token if we want
to pick up in the middle

00:21:05.210 --> 00:21:06.200
of a query.

00:21:06.200 --> 00:21:08.160
If you get the first two and you
want to get the next two,

00:21:08.160 --> 00:21:12.610
you can actually use a
page token from that.

00:21:12.610 --> 00:21:13.710
Let me see, what--

00:21:13.710 --> 00:21:15.440
DAN HOLEVOET: Sorting.

00:21:15.440 --> 00:21:16.830
DANNY HERMES: We do
have sorting.

00:21:16.830 --> 00:21:18.700
We're not going to use
this out of the box.

00:21:18.700 --> 00:21:23.420
But essentially, we could use
a query field either of name

00:21:23.420 --> 00:21:28.480
or owner, and it would
automatically sort by them.

00:21:28.480 --> 00:21:29.400
Actually, it's filtering.

00:21:29.400 --> 00:21:31.870
Sorting isn't right
out of the box.

00:21:31.870 --> 00:21:35.770
But let's do the paging, which
is what I wanted to do.

00:21:35.770 --> 00:21:40.140
So for our query fields, we're
just going to specify a limit

00:21:40.140 --> 00:21:41.390
and a page token.

00:21:45.820 --> 00:21:48.550
I'm going to consult the
documentation for Endpoints

00:21:48.550 --> 00:21:51.540
Proto Datastore just to
refresh my memory.

00:21:51.540 --> 00:21:54.500
So I don't have a link that's
actually going to

00:21:54.500 --> 00:21:55.230
show up in the video.

00:21:55.230 --> 00:21:55.965
But if you go to
endpoints-proto-

00:21:55.965 --> 00:22:01.610
datastore.appspot.com, we have
nine samples there that are

00:22:01.610 --> 00:22:02.920
decently annotated.

00:22:02.920 --> 00:22:05.930
And all of the source code
actually lives with the source

00:22:05.930 --> 00:22:07.260
for the library itself.

00:22:07.260 --> 00:22:09.070
DAN HOLEVOET: It's pretty
snazzy looking.

00:22:09.070 --> 00:22:11.040
DANNY HERMES: It's decently
snazzy looking.

00:22:11.040 --> 00:22:13.830
Dan actually helped me with
the CSS for this because--

00:22:13.830 --> 00:22:15.400
DAN HOLEVOET: I was fishing
for comments here.

00:22:15.400 --> 00:22:16.170
DANNY HERMES: No, I know.

00:22:16.170 --> 00:22:17.140
I'm not saying you were.

00:22:17.140 --> 00:22:21.600
He has the CSS Kung Fu,
and I have none of it.

00:22:21.600 --> 00:22:24.220
And we were able to actually
figure out how to highlight

00:22:24.220 --> 00:22:27.560
each of our code sections and do
some other cool things with

00:22:27.560 --> 00:22:29.510
sections that actually
aren't on different

00:22:29.510 --> 00:22:30.810
sides of the page.

00:22:30.810 --> 00:22:32.880
OK, order.

00:22:32.880 --> 00:22:34.680
I see.

00:22:34.680 --> 00:22:36.840
You're right, you
can do order.

00:22:36.840 --> 00:22:40.200
So if we were to provide
like order=name, it

00:22:40.200 --> 00:22:41.400
would order by name.

00:22:41.400 --> 00:22:44.230
But we're only really worried
about the limit and page token

00:22:44.230 --> 00:22:47.010
part of query for now.

00:22:47.010 --> 00:22:48.140
OK, great.

00:22:48.140 --> 00:22:50.680
DAN HOLEVOET: Ordering by time
stamp would be really useful.

00:22:50.680 --> 00:22:52.730
DANNY HERMES: Totally.

00:22:52.730 --> 00:22:55.830
And we'll save that
for another day.

00:22:55.830 --> 00:22:57.510
But it's certainly easy.

00:22:57.510 --> 00:23:00.830
And these samples even briefly
delve into how

00:23:00.830 --> 00:23:02.380
you might do that.

00:23:02.380 --> 00:23:02.970
OK, great.

00:23:02.970 --> 00:23:08.620
So before we can actually make
use of limit and page token,

00:23:08.620 --> 00:23:10.610
we need more than one item.

00:23:10.610 --> 00:23:14.270
So I'm going to insert
a couple.

00:23:14.270 --> 00:23:16.800
I will assign all
of them to Dan.

00:23:19.820 --> 00:23:21.820
Let's see, fewer
lines of code.

00:23:21.820 --> 00:23:22.610
There we go.

00:23:22.610 --> 00:23:23.860
There's a task.

00:23:27.000 --> 00:23:28.060
What's something else
you want to do?

00:23:28.060 --> 00:23:29.150
Drink some water.

00:23:29.150 --> 00:23:32.210
DAN HOLEVOET: There we go.

00:23:32.210 --> 00:23:33.180
DANNY HERMES: We'll have
some tasks for

00:23:33.180 --> 00:23:34.635
our Mystery GDL Producer.

00:23:37.500 --> 00:23:38.750
Write more often.

00:23:41.604 --> 00:23:43.490
DAN HOLEVOET: How about
write unit tests?

00:23:43.490 --> 00:23:44.930
DANNY HERMES: Who's that for?

00:23:44.930 --> 00:23:46.400
Write unit tests.

00:23:46.400 --> 00:23:48.160
DAN HOLEVOET: The
code janitor.

00:23:48.160 --> 00:23:51.235
DANNY HERMES: Code janitor.

00:23:51.235 --> 00:23:51.600
All right.

00:23:51.600 --> 00:23:53.690
So we've got a fair
amount of tasks.

00:23:53.690 --> 00:23:55.830
So this is good.

00:23:55.830 --> 00:24:01.610
So here's our list of tasks.

00:24:01.610 --> 00:24:04.420
They're in items, the same key
that we had last week.

00:24:04.420 --> 00:24:07.870
This is by default what query
methods use within Endpoints

00:24:07.870 --> 00:24:08.950
Proto Datastore.

00:24:08.950 --> 00:24:11.810
It just so happened to be
the same attribute name

00:24:11.810 --> 00:24:13.050
we used last week.

00:24:13.050 --> 00:24:15.130
I kind of did it on purpose.

00:24:15.130 --> 00:24:18.530
But this is a general term that
we see in all of Google's

00:24:18.530 --> 00:24:22.280
querying APIs that's
used to mean this.

00:24:25.528 --> 00:24:26.990
I need to reload this.

00:24:26.990 --> 00:24:28.420
There we go.

00:24:28.420 --> 00:24:30.260
So I don't know if people just
saw what happened there.

00:24:30.260 --> 00:24:34.100
But when I reloaded my page,
I held Shift so it wouldn't

00:24:34.100 --> 00:24:37.190
actually get from the cache.

00:24:37.190 --> 00:24:40.640
So even though I had updated
the API, we didn't see this

00:24:40.640 --> 00:24:44.900
limit and page token pieces up
on this page because the APIs

00:24:44.900 --> 00:24:50.300
Explorer caches the discovery
document that it's using to

00:24:50.300 --> 00:24:56.340
actually build these elements
in the DOM within this page,

00:24:56.340 --> 00:24:58.460
within this nice, little
application.

00:24:58.460 --> 00:25:02.346
So if you're having issues,
you updated your API and

00:25:02.346 --> 00:25:04.390
you're not seeing it,
try to clear the

00:25:04.390 --> 00:25:06.110
cache in your browser.

00:25:06.110 --> 00:25:08.590
Or maybe just hold Shift
down when you refresh.

00:25:08.590 --> 00:25:10.592
I believe this works in Firefox,
Safari, and some

00:25:10.592 --> 00:25:12.560
other browsers as well.

00:25:12.560 --> 00:25:12.670
DAN HOLEVOET: Chrome.

00:25:12.670 --> 00:25:14.550
DANNY HERMES: I don't use them
on a day-to-day basis, so I

00:25:14.550 --> 00:25:15.360
can't really tell you.

00:25:15.360 --> 00:25:17.300
Sorry.

00:25:17.300 --> 00:25:20.960
So the first thing I did, I
specified two as our limit.

00:25:20.960 --> 00:25:23.900
So rather than getting
back all six items--

00:25:23.900 --> 00:25:25.760
I believe it was six--

00:25:25.760 --> 00:25:27.480
we see just two of them.

00:25:27.480 --> 00:25:31.950
So Danny wake up and Dan
Holevoet fewer lines of code.

00:25:31.950 --> 00:25:34.420
In addition to items,
we actually get a

00:25:34.420 --> 00:25:37.800
next page token value.

00:25:37.800 --> 00:25:40.730
And this next page token can be
used to get the next two or

00:25:40.730 --> 00:25:42.260
the next one.

00:25:42.260 --> 00:25:44.875
And so I can just throw
that in as page token

00:25:44.875 --> 00:25:46.420
and execute a request.

00:25:46.420 --> 00:25:48.700
And out of the box,
we have paging.

00:25:48.700 --> 00:25:50.990
Dan, drink some water.

00:25:50.990 --> 00:25:53.520
Mystery GDL Producer,
write more often.

00:25:53.520 --> 00:25:54.770
All right, keep producing
for now.

00:25:54.770 --> 00:25:57.370
We'll hold off on that one.

00:25:57.370 --> 00:26:00.120
And it's really this
easy to just get

00:26:00.120 --> 00:26:03.260
paging out of the box.

00:26:03.260 --> 00:26:05.720
So now I want to do auth.

00:26:05.720 --> 00:26:08.700
Before I do auth, briefly I want
to say our documentation

00:26:08.700 --> 00:26:11.100
about auth handles
this pretty well.

00:26:11.100 --> 00:26:13.230
We've got a link to it that
should be showing up anytime.

00:26:18.160 --> 00:26:22.005
There are some different
concepts around allowed client

00:26:22.005 --> 00:26:23.060
ID and audiences.

00:26:23.060 --> 00:26:25.010
Audiences are really specific
to Android.

00:26:25.010 --> 00:26:30.180
But allowed client IDs is
something where if you're via

00:26:30.180 --> 00:26:33.760
the web or via the command
line or iOS, or somewhere

00:26:33.760 --> 00:26:37.090
else, if you're actually minting
an OAuth2 token,

00:26:37.090 --> 00:26:41.490
there's a specific client who is
standing between Google and

00:26:41.490 --> 00:26:43.640
the user that's actually
facilitating this dance.

00:26:43.640 --> 00:26:45.520
And this user has a client ID.

00:26:45.520 --> 00:26:49.710
And so in order to know that
the token is valid for our

00:26:49.710 --> 00:26:52.440
application, we have to know
which client IDs are allowed

00:26:52.440 --> 00:26:56.370
to mint tokens on behalf of
our application's users.

00:26:56.370 --> 00:27:00.480
So luckily, what you read in
this documentation we won't

00:27:00.480 --> 00:27:02.540
actually have to apply it since
we're just using the

00:27:02.540 --> 00:27:03.930
APIs Explorer.

00:27:03.930 --> 00:27:07.650
Because if you don't specify any
white-listed client IDs,

00:27:07.650 --> 00:27:11.680
which you can do in
endpoints.api or

00:27:11.680 --> 00:27:14.900
endpoints.method decorators, or
in this case the endpoints

00:27:14.900 --> 00:27:18.440
model.method decorators, if
you don't specify those

00:27:18.440 --> 00:27:23.600
values, by default the client
ID corresponding to the APIs

00:27:23.600 --> 00:27:25.670
Explorer will just work.

00:27:25.670 --> 00:27:30.090
So again, for my memory, I'm
going to consult the

00:27:30.090 --> 00:27:33.350
basic_with_auth sample doc.

00:27:33.350 --> 00:27:35.920
I forget the keyword argument
we use-- user required.

00:27:35.920 --> 00:27:38.220
There we go, such a simple
keyword argument.

00:27:38.220 --> 00:27:41.250
So adding auth to
these methods--

00:27:41.250 --> 00:27:42.600
not kidding you--

00:27:42.600 --> 00:27:46.830
it is as easy as adding
user_required to the metadata

00:27:46.830 --> 00:27:48.810
in the decorators.

00:27:48.810 --> 00:27:51.180
Has anyone ever tried
OAuth before?

00:27:51.180 --> 00:27:52.920
DAN HOLEVOET: I think that's
probably the easiest

00:27:52.920 --> 00:27:56.370
implementation of an OAuth
feature I've ever seen.

00:27:56.370 --> 00:27:56.760
DANNY HERMES: Yeah.

00:27:56.760 --> 00:27:58.660
So this doesn't implement
client-side OAuth.

00:27:58.660 --> 00:28:00.510
I'm not trying to say I've
done the whole thing.

00:28:00.510 --> 00:28:02.030
But server-side OAuth?

00:28:02.030 --> 00:28:03.020
Done.

00:28:03.020 --> 00:28:06.400
user_required=True,
that's all.

00:28:06.400 --> 00:28:11.130
So if I go back to my
application, wherever it

00:28:11.130 --> 00:28:14.830
lives, and actually try to
execute a request, it says,

00:28:14.830 --> 00:28:17.010
no, no, no, not happening.

00:28:17.010 --> 00:28:18.530
If gives me the 401
status code.

00:28:18.530 --> 00:28:20.460
And for those who aren't
familiar, for those who

00:28:20.460 --> 00:28:23.440
haven't been banging their head
against the table or wall

00:28:23.440 --> 00:28:28.580
trying to figure OAuth, 401
means you're not allowed,

00:28:28.580 --> 00:28:31.190
you're unauthorized to
view this resource.

00:28:31.190 --> 00:28:33.250
And as we see in the
error message, we

00:28:33.250 --> 00:28:34.350
have an invalid token.

00:28:34.350 --> 00:28:38.850
So what we're going to do, we're
actually just going to

00:28:38.850 --> 00:28:42.050
authorize the request using
OAuth2 in the APIs Explorer.

00:28:42.050 --> 00:28:44.400
Now, you can see our
documentation more for how you

00:28:44.400 --> 00:28:47.260
do this in some other native
environments, but we really

00:28:47.260 --> 00:28:50.330
just want to concentrate on the
server-side stuff for now.

00:28:50.330 --> 00:28:54.900
So we need to actually
input our scope here.

00:28:54.900 --> 00:28:56.470
So our scope--

00:28:56.470 --> 00:28:58.620
this is one I hope
I remember--

00:28:58.620 --> 00:29:06.120
https://www.goog
leapis.com/auth/userinfo.email.

00:29:06.120 --> 00:29:10.200
Now, since App Engine thinks of
users in terms of emails,

00:29:10.200 --> 00:29:13.770
we actually need the email scope
in order to actually

00:29:13.770 --> 00:29:16.970
take an OAuth token and turn
it into an App Engine user.

00:29:16.970 --> 00:29:18.330
So this is actually crucial.

00:29:18.330 --> 00:29:23.210
You can use other scopes, but
for the 175 release-- maybe

00:29:23.210 --> 00:29:25.030
you want to say a bit
more about this--

00:29:25.030 --> 00:29:28.410
the email scope is really the
most relevant and sort of the

00:29:28.410 --> 00:29:29.680
only relevant one.

00:29:29.680 --> 00:29:30.090
DAN HOLEVOET: Right.

00:29:30.090 --> 00:29:35.910
I mean, the key piece here is
that the user email address is

00:29:35.910 --> 00:29:39.780
really critical to App Engine's
concept of a user and

00:29:39.780 --> 00:29:40.700
the user object.

00:29:40.700 --> 00:29:45.200
So to make things as clear as
possible, we suggest using the

00:29:45.200 --> 00:29:49.020
userinfo.emailscope to
authorize the user.

00:29:49.020 --> 00:29:49.980
DANNY HERMES: Yes.

00:29:49.980 --> 00:29:53.970
And for those who were paying
attention, maybe Mystery GDL

00:29:53.970 --> 00:29:56.390
Producer took it
off the screen.

00:29:56.390 --> 00:30:00.720
I had to sign in because I am
in an incognito, or in an

00:30:00.720 --> 00:30:02.140
empty Chrome profile.

00:30:02.140 --> 00:30:05.370
But I signed in as one of my
aliases, Bossy Lobster.

00:30:05.370 --> 00:30:08.370
So I'm allowing access
to the APIs Explorer.

00:30:08.370 --> 00:30:11.490
It's really just asking me to
view my email address and know

00:30:11.490 --> 00:30:14.240
who I am on Google.

00:30:14.240 --> 00:30:17.430
So now I see this Off switch
turned to an On switch.

00:30:17.430 --> 00:30:20.240
And now my requests have auth.

00:30:20.240 --> 00:30:25.460
So I get back the same results
I expected, but I have to be

00:30:25.460 --> 00:30:28.490
authenticated to do it.

00:30:28.490 --> 00:30:30.080
DAN HOLEVOET: And you can see
the token in there in the

00:30:30.080 --> 00:30:31.370
header to the left.

00:30:31.370 --> 00:30:33.740
DANNY HERMES: Yes, we can
see the token for

00:30:33.740 --> 00:30:35.580
this worthless account.

00:30:35.580 --> 00:30:40.800
And we can actually
do things with it.

00:30:40.800 --> 00:30:42.710
The token will only get you
the email, which is

00:30:42.710 --> 00:30:44.590
dhermes@bossylobster.com.

00:30:44.590 --> 00:30:48.660
So not quite the magic we're
hoping it could be.

00:30:48.660 --> 00:30:49.500
OK, great.

00:30:49.500 --> 00:30:57.450
So we're going to actually use
users and have queries

00:30:57.450 --> 00:31:01.080
associated with the current
user so that the user

00:31:01.080 --> 00:31:04.780
inserting something is also
associated with it.

00:31:04.780 --> 00:31:10.560
So we can actually do
this by setting--

00:31:10.560 --> 00:31:12.700
I'm cheating again,
just a little bit.

00:31:16.060 --> 00:31:21.930
So instead of using owner as a
string, we're going to make

00:31:21.930 --> 00:31:24.570
owner an ndb user property.

00:31:24.570 --> 00:31:25.765
Is that the name of the class?

00:31:25.765 --> 00:31:27.680
I think it is, right?

00:31:27.680 --> 00:31:29.260
DAN HOLEVOET: I believe so.

00:31:29.260 --> 00:31:29.710
DANNY HERMES: Yes.

00:31:29.710 --> 00:31:31.690
OK.

00:31:31.690 --> 00:31:37.900
So we will actually have owner
as an ndb user property.

00:31:37.900 --> 00:31:42.670
And this is going to
be really fun.

00:31:42.670 --> 00:31:45.990
And we're actually setting
the owner based

00:31:45.990 --> 00:31:46.880
on the current user.

00:31:46.880 --> 00:31:49.490
So now, Dan was mentioning
using fewer

00:31:49.490 --> 00:31:50.830
fields or more fields.

00:31:50.830 --> 00:31:54.880
Just like we use query_fields=
in the query_method, we're

00:31:54.880 --> 00:32:04.500
going to use request_fields= in
the insert method to only

00:32:04.500 --> 00:32:06.500
have the name of the task.

00:32:06.500 --> 00:32:08.450
And the reason we only want
the name of the task is

00:32:08.450 --> 00:32:11.180
because the owner comes
from the token.

00:32:11.180 --> 00:32:13.110
That comes from the auth stuff,
and we don't want the

00:32:13.110 --> 00:32:15.620
user specifying their own thing
with a different token.

00:32:15.620 --> 00:32:20.260
We want tokens and users
matching up one to one.

00:32:20.260 --> 00:32:22.070
So for our request fields,
we're only

00:32:22.070 --> 00:32:25.160
going to accept a name.

00:32:25.160 --> 00:32:29.470
Now, let's go do this
and actually check

00:32:29.470 --> 00:32:31.330
it out in the Datastore.

00:32:31.330 --> 00:32:37.290
I want to clear my Datastore,
so let me change the setting

00:32:37.290 --> 00:32:38.960
to Clear Datastore on Launch.

00:32:38.960 --> 00:32:40.400
So I went to the App
Engine Launcher.

00:32:40.400 --> 00:32:44.160
I stopped the application that
was running, went to the Info

00:32:44.160 --> 00:32:47.880
for the application, and
then clicked Clear

00:32:47.880 --> 00:32:49.070
Datastore on Launch.

00:32:49.070 --> 00:32:52.400
So when I come back, I'm going
to have an empty Datastore.

00:32:52.400 --> 00:33:02.350
So now, when I actually
go to Insert an API--

00:33:02.350 --> 00:33:04.430
maybe there's an issue.

00:33:04.430 --> 00:33:05.680
That would be fun.

00:33:08.499 --> 00:33:12.170
Oh, I know what I did.

00:33:12.170 --> 00:33:13.550
So what did I do?

00:33:13.550 --> 00:33:18.310
For those astute in Python, I
tried to make a tuple with one

00:33:18.310 --> 00:33:20.400
element and didn't have
a comma at the end.

00:33:20.400 --> 00:33:22.480
So Python thinks it's a string,

00:33:22.480 --> 00:33:23.280
because it is a string.

00:33:23.280 --> 00:33:24.940
That's what Python's
syntax says.

00:33:24.940 --> 00:33:28.740
And everyone barfed because
we needed a tuple.

00:33:28.740 --> 00:33:30.010
We needed something we
could iterate over

00:33:30.010 --> 00:33:31.000
that wasn't a string.

00:33:31.000 --> 00:33:31.930
OK, great.

00:33:31.930 --> 00:33:33.970
So my bad.

00:33:33.970 --> 00:33:35.460
Bug gone.

00:33:35.460 --> 00:33:36.150
There we go.

00:33:36.150 --> 00:33:37.770
So we got the tasks API.

00:33:37.770 --> 00:33:39.420
We commented out list,
so we're just

00:33:39.420 --> 00:33:40.870
going to insert some.

00:33:40.870 --> 00:33:44.160
Now, owner's no longer
there as we hoped.

00:33:44.160 --> 00:33:45.290
We just have name.

00:33:45.290 --> 00:33:48.200
I'm going to try an
unauthenticated insert, which

00:33:48.200 --> 00:33:50.900
will be go to sleep, my go-to.

00:33:50.900 --> 00:33:53.680
And we'll see we have a 401,
which is what we expect.

00:33:53.680 --> 00:33:56.550
So come back here.

00:33:56.550 --> 00:33:58.110
This wouldn't have been true--

00:33:58.110 --> 00:34:00.150
we wouldn't have to go back
through this if I hadn't have

00:34:00.150 --> 00:34:01.730
reloaded the page.

00:34:01.730 --> 00:34:02.980
So that's my bad.

00:34:06.020 --> 00:34:10.560
So now we're authorized and
we can say go to sleep.

00:34:10.560 --> 00:34:12.290
We can say wake up.

00:34:15.560 --> 00:34:19.090
We can say what was it
about code janitor?

00:34:19.090 --> 00:34:20.239
DAN HOLEVOET: Write
more unit tests.

00:34:20.239 --> 00:34:21.891
Or write unit tests.

00:34:21.891 --> 00:34:25.190
DANNY HERMES: Write
unit tests.

00:34:25.190 --> 00:34:25.830
OK, great.

00:34:25.830 --> 00:34:29.250
So we've got these and they're
associated with me.

00:34:29.250 --> 00:34:33.960
So before we actually implement
the user base query,

00:34:33.960 --> 00:34:36.560
I just want to actually
go to the Datastore.

00:34:36.560 --> 00:34:39.320
So we have the Datastore Viewer
in the Admin console

00:34:39.320 --> 00:34:41.170
for the local app.

00:34:41.170 --> 00:34:45.179
And as we see, we have owner
is an actual user property

00:34:45.179 --> 00:34:46.480
associated with the
signed-in user.

00:34:46.480 --> 00:34:48.980
And I have these same names.

00:34:48.980 --> 00:34:51.200
And we see it's a user
property rather

00:34:51.200 --> 00:34:53.690
than a string property.

00:34:53.690 --> 00:34:54.940
So great, back to the code.

00:34:57.510 --> 00:35:01.890
So in the query, what we
actually want to do--

00:35:01.890 --> 00:35:06.530
we simply need to filter
based on the owner.

00:35:06.530 --> 00:35:10.530
So the way filters work in ndb--
again, as I said last

00:35:10.530 --> 00:35:16.690
week, it's nontrivial ndb,
but it's pretty simple.

00:35:16.690 --> 00:35:19.560
So to actually do this filter,
I'm just going to say

00:35:19.560 --> 00:35:22.240
task.owner, which is the
property I want to filter on.

00:35:22.240 --> 00:35:25.360
And I want to make sure that
task.owner is equal to the

00:35:25.360 --> 00:35:26.610
signed-in user.

00:35:31.398 --> 00:35:34.390
Let me make it a
little smaller.

00:35:34.390 --> 00:35:36.810
And so what's actually happening
is I'm taking that

00:35:36.810 --> 00:35:41.790
query and I'm filtering for
tasks specifically owned by

00:35:41.790 --> 00:35:43.180
this particular user.

00:35:43.180 --> 00:35:48.420
So let me refresh this one last
time, and I'm going to

00:35:48.420 --> 00:35:50.460
have to sign-in again.

00:35:50.460 --> 00:35:50.790
Sad face.

00:35:50.790 --> 00:35:52.660
Feature Request.

00:35:52.660 --> 00:35:54.810
Actually, I think it's
a security measure.

00:35:54.810 --> 00:35:58.340
So I don't think it's ever
going to change.

00:35:58.340 --> 00:36:00.810
OK, great.

00:36:00.810 --> 00:36:02.960
So now if I go to--

00:36:05.610 --> 00:36:06.430
DAN HOLEVOET: You didn't
wait long enough.

00:36:06.430 --> 00:36:07.700
DANNY HERMES: I didn't
wait long enough?

00:36:07.700 --> 00:36:10.380
DAN HOLEVOET: Yeah.

00:36:10.380 --> 00:36:11.580
DANNY HERMES: So it happens
in a popup.

00:36:11.580 --> 00:36:13.540
Apparently I left the page
before the popup

00:36:13.540 --> 00:36:15.012
came back to the page.

00:36:15.012 --> 00:36:16.425
Don't be impatient, Dan.

00:36:16.425 --> 00:36:17.515
There we go.

00:36:17.515 --> 00:36:19.460
Great.

00:36:19.460 --> 00:36:22.430
So we have the items
I can limit.

00:36:22.430 --> 00:36:24.360
You could just have one.

00:36:24.360 --> 00:36:27.860
And I would--

00:36:27.860 --> 00:36:32.100
well, in theory, you could use
Incognito, or other Chrome

00:36:32.100 --> 00:36:34.830
profiles, or other browsers to
sign-in as a different user

00:36:34.830 --> 00:36:37.940
and go through the same OAuth
flow with that user.

00:36:37.940 --> 00:36:39.960
So that way, your queries
would not just

00:36:39.960 --> 00:36:41.940
see all of the data.

00:36:41.940 --> 00:36:45.840
But I don't really want to
expose more accounts, so I'm

00:36:45.840 --> 00:36:48.210
going to wrap it up with that.

00:36:48.210 --> 00:36:51.340
If you guys want to see
this code, we will--

00:36:51.340 --> 00:36:53.240
where will we put it?

00:36:53.240 --> 00:36:55.965
We will put it on the
internet somewhere.

00:36:55.965 --> 00:36:56.410
DAN HOLEVOET: Yeah.

00:36:56.410 --> 00:36:59.770
We could put it on GitHub, or
we could put it on your

00:36:59.770 --> 00:37:00.300
example page.

00:37:00.300 --> 00:37:01.390
DANNY HERMES: There we go.

00:37:01.390 --> 00:37:03.380
We'll put it on the
downloads page for

00:37:03.380 --> 00:37:05.790
Endpoints Proto Datastore.

00:37:05.790 --> 00:37:09.040
And that's code.google.com/
p/endpoints-proto-datastore.

00:37:12.860 --> 00:37:16.555
And at that page there's a bunch
of tabs across top, one

00:37:16.555 --> 00:37:17.430
of which says Download.

00:37:17.430 --> 00:37:21.920
So it'd just be
tasksapitalk.zip, or

00:37:21.920 --> 00:37:23.440
something like this.

00:37:23.440 --> 00:37:27.420
And we'll try to name the files
and various other pieces

00:37:27.420 --> 00:37:30.410
such that it's obvious
what they are.

00:37:30.410 --> 00:37:37.240
So from that, now that we're
wrapped up, we want to go to

00:37:37.240 --> 00:37:38.630
the Moderator questions.

00:37:38.630 --> 00:37:39.270
DAN HOLEVOET: Yes.

00:37:39.270 --> 00:37:41.780
So I'm looking at the Moderator,
and it's empty

00:37:41.780 --> 00:37:45.300
because all of this is so easy
and self-explanatory that no

00:37:45.300 --> 00:37:45.790
one has questions.

00:37:45.790 --> 00:37:47.915
DANNY HERMES: It's more
easy, more easy.

00:37:47.915 --> 00:37:48.250
DAN HOLEVOET: Yeah.

00:37:48.250 --> 00:37:49.070
Super easy.

00:37:49.070 --> 00:37:49.760
DANNY HERMES: Cool.

00:37:49.760 --> 00:37:52.450
So do we have anything else we
want to say, or do we just

00:37:52.450 --> 00:37:53.890
want to call it?

00:37:53.890 --> 00:37:54.600
DAN HOLEVOET: I think
we're good.

00:37:54.600 --> 00:37:55.830
DANNY HERMES: All right.

00:37:55.830 --> 00:37:58.690
Well, thanks everyone for coming
to this week's App

00:37:58.690 --> 00:37:59.810
Engine GDL.

00:37:59.810 --> 00:38:02.720
I hope you enjoyed it, and
we'll see you next time.

00:38:13.136 --> 00:38:17.104
[MUSIC PLAYING]

