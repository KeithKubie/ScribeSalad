WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.680
&gt;&gt; GOODMAN: My name is Ryan Goodman. I'm the
founder of Centigon Solutions. And, with me

00:00:07.680 --> 00:00:15.050
today, I have Evan DeLodder, who is our principal
Flex architect. And we are a SAP premier partner

00:00:15.050 --> 00:00:20.040
and we developed add-on solutions for an enterprise
dashboard product called Xcelsius. And we

00:00:20.040 --> 00:00:25.730
have developed an add-on called GMaps plug-in,
which is our Google integration or Google

00:00:25.730 --> 00:00:33.020
maps integration, allowing dashboard developers
to build and integrate geographic analysis

00:00:33.020 --> 00:00:39.230
within business intelligence dashboards.
&gt;&gt; So you chose to use Google maps to bring

00:00:39.230 --> 00:00:48.420
this out, can you tell us a little bit about
how you came to this technical decision to

00:00:48.420 --> 00:00:52.500
use Google maps?
&gt;&gt; GOODMAN: The decision to choose Google

00:00:52.500 --> 00:00:58.340
maps as our technology for implementing geographic
analysis within the business intelligence

00:00:58.340 --> 00:01:05.570
space was actually quite easier. Customers
ask for intuitive and easy to use mapping

00:01:05.570 --> 00:01:11.690
interface for visualizing their business information.
And, when we evaluated the landscape, we wanted

00:01:11.690 --> 00:01:18.470
to ensure that our that our customers had
a very easy and intuitive to use technology,

00:01:18.470 --> 00:01:25.610
and the pervasiveness of Google maps made
it an obvious choice along with their support

00:01:25.610 --> 00:01:32.950
for licensing and pricing for the enterprise.
&gt;&gt; DELODDER: One slightly sticky area that

00:01:32.950 --> 00:01:41.979
we ran across was interval timing with geocoding
request. So, within the application that we

00:01:41.979 --> 00:01:51.740
created, this plug-in for, the user is able
to find a range of address data to the Google

00:01:51.740 --> 00:01:58.590
map component. And for each address in that
range, would go out to the geocoder each time

00:01:58.590 --> 00:02:06.310
with the Flash API and get the response and
plot the marker. We had actually set up a

00:02:06.310 --> 00:02:18.370
timer in Flex to manage these request of to
the geocoding API and found that what worked

00:02:18.370 --> 00:02:26.519
for us internally may have not worked for
a client in an actual deployment in the way

00:02:26.519 --> 00:02:33.750
marker request being successfully processed.
So, what we ended ultimately doing is exposing

00:02:33.750 --> 00:02:41.659
the timer interval as an actual user configurable
property that they can dial in for the Google

00:02:41.659 --> 00:02:47.129
map. And by kind of, you know, taking away
the guess work on our side and empowering

00:02:47.129 --> 00:02:52.790
them, they're able to choose the best timing
interval for their solution, their environment

00:02:52.790 --> 00:02:59.669
and their internal infrastructure.
&gt;&gt; So this next question is sort of a nice

00:02:59.669 --> 00:03:11.290
follow up to the last question, how do you
find the performance from the Google maps

00:03:11.290 --> 00:03:12.290
API?
&gt;&gt; DELODDER: Performance for the Google maps

00:03:12.290 --> 00:03:18.919
API inside of Flash is really solid for--if
you're just plotting latitude and longitude

00:03:18.919 --> 00:03:26.840
values. So, if we have an option in our property
management for the Google map where they're

00:03:26.840 --> 00:03:32.169
able to select the options you use either
at the geocoding service, if there are coding

00:03:32.169 --> 00:03:38.909
addresses or, you know, city state value pairs
or they can choose the option to use latitude

00:03:38.909 --> 00:03:45.810
and longitude values that they provide themselves.
So, if theyâ€™re providing, you know, hard

00:03:45.810 --> 00:03:54.249
coded latitude and longitude values through
the program, response is--response times are

00:03:54.249 --> 00:04:00.669
negligible and it runs really, really smoothly;
very predictable and very fast. The only kind

00:04:00.669 --> 00:04:05.169
of performance hit that we run up against
is with the geocoding. You know, like I said,

00:04:05.169 --> 00:04:10.579
we kind of empower the user by putting the
interval timer in their hands. So, performance

00:04:10.579 --> 00:04:16.940
kind of, you know, varies based on their set
up and their infrastructure, but, with that

00:04:16.940 --> 00:04:22.970
said, once the request goes out to the geocoder,
it comes back extremely fast. So performance

00:04:22.970 --> 00:04:30.570
from the, you know, purely geocoding aspect
has been great. It just--all kind of hinges

00:04:30.570 --> 00:04:34.760
on the timer interval that, you know, spaces
out the requests.

00:04:34.760 --> 00:04:44.500
&gt;&gt; How easy was it to get started? And then
the next question is how do the maps improve

00:04:44.500 --> 00:04:47.880
the user experience?
&gt;&gt; DELODDER: Those are really easy to get

00:04:47.880 --> 00:04:55.260
started. One of the base points that we really
jumped off from was the forum in the online

00:04:55.260 --> 00:05:00.470
community that Google's provided. You know,
just through the API reference site, we're

00:05:00.470 --> 00:05:05.820
able to find easy, clear, concise code examples
that we can basically, you know, copy and

00:05:05.820 --> 00:05:10.300
paste. And we're starting from the ground
up to figure out, you know, how to best handle,

00:05:10.300 --> 00:05:16.500
you know, latitude and longitude coding, how
to best set up and abstract the way marker

00:05:16.500 --> 00:05:25.040
options and how to handle geocoding. So, you
know, getting started was a breeze, a ton

00:05:25.040 --> 00:05:31.930
of online resources in the Google community.
Pamela Fox, who's been speaking a lot today

00:05:31.930 --> 00:05:37.660
has provided a lot of guidance on these forums.
And also in the Flex world, there are other

00:05:37.660 --> 00:05:42.900
developers that have contributed, working
examples with source code that you can download.

00:05:42.900 --> 00:05:45.550
So, those are pretty easy road for us getting
started.

00:05:45.550 --> 00:05:51.410
&gt;&gt; What do you see is the future of mapping
in geo?

00:05:51.410 --> 00:05:57.770
&gt;&gt; So, for the future of mapping in geo, we
see it as taking what we're able to do on

00:05:57.770 --> 00:06:05.160
the desktop today with business intelligence,
which is view business centric geographical

00:06:05.160 --> 00:06:10.971
and performance data, taking that over to
a mobile device and mobile platform so that

00:06:10.971 --> 00:06:18.840
the user can have the same great, intuitive
experience in and away from the workplace.

00:06:18.840 --> 00:06:22.919
&gt;&gt; Thank you so much.

