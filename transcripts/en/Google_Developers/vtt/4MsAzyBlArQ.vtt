WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:16.615
[MUSIC PLAYING]

00:00:16.615 --> 00:00:18.240
ALEXIS MOUSSINE-POUCHKINE:
So hi, we're

00:00:18.240 --> 00:00:20.790
here back at dotJS
in an amazing venue,

00:00:20.790 --> 00:00:23.130
and I'm here with
Nicolas to talk

00:00:23.130 --> 00:00:27.250
about Dart, which is the
topic of the session you just

00:00:27.250 --> 00:00:29.730
gave at the conference.

00:00:29.730 --> 00:00:31.270
So, for those that
have been living

00:00:31.270 --> 00:00:34.410
under a rock, that have
not heard of Dart 1.0

00:00:34.410 --> 00:00:36.780
being released first of all,
and maybe Dart in general,

00:00:36.780 --> 00:00:40.280
can you give us a quick
intro to what this really is?

00:00:40.280 --> 00:00:41.286
Is it just a language?

00:00:41.286 --> 00:00:42.910
NICOLAS GEOFFRAY:So
Dart is a language,

00:00:42.910 --> 00:00:44.034
a new programming language.

00:00:44.034 --> 00:00:46.085
But it's not just a language.

00:00:46.085 --> 00:00:48.300
It contains lots of tools
around the language,

00:00:48.300 --> 00:00:51.320
like an IDE, a
lightweight IDE, where

00:00:51.320 --> 00:00:56.010
you can do refactoring,
debugging, completion, code

00:00:56.010 --> 00:00:57.207
completion.

00:00:57.207 --> 00:00:58.790
There's also a
compiler to JavaScript.

00:00:58.790 --> 00:01:01.700
So you can run your code
on any modern browser.

00:01:01.700 --> 00:01:06.300
And we have what we call a VM,
which is really an accelerator,

00:01:06.300 --> 00:01:09.217
that will run your Dart
code really fast in Chrome.

00:01:09.217 --> 00:01:11.050
ALEXIS MOUSSINE-POUCHKINE:
So a new language

00:01:11.050 --> 00:01:13.200
that can compile to
JavaScript, I suppose

00:01:13.200 --> 00:01:15.190
this is what most
people will do today.

00:01:15.190 --> 00:01:19.430
Can you tell us about the
differences between language

00:01:19.430 --> 00:01:23.220
that will be compiled to
JavaScript in terms of workflow

00:01:23.220 --> 00:01:26.410
development and performance
versus maybe using

00:01:26.410 --> 00:01:29.540
the VM as a native execution?

00:01:29.540 --> 00:01:31.320
What are the differences here?

00:01:31.320 --> 00:01:32.360
NICOLAS GEOFFRAY:So when
you compile to JavaScript,

00:01:32.360 --> 00:01:34.880
you're obviously limited
to JavaScript performance,

00:01:34.880 --> 00:01:39.460
the performance of the
runtime underneath, right?

00:01:39.460 --> 00:01:41.900
There has been a
lot of work going on

00:01:41.900 --> 00:01:45.860
to make JavaScript really
fast in the last few years.

00:01:45.860 --> 00:01:52.070
But we designed the language
with performance in mind.

00:01:52.070 --> 00:01:54.240
The background of
the Dart designers,

00:01:54.240 --> 00:01:57.260
they've implemented virtual
machines for many years.

00:01:57.260 --> 00:01:59.480
They've done Hotspot,
they've done V8.

00:01:59.480 --> 00:02:02.250
So when we designed this
new language, we said, OK,

00:02:02.250 --> 00:02:04.780
how can we make that
language really fast?

00:02:04.780 --> 00:02:07.010
And what you have
for the Dart VM--

00:02:07.010 --> 00:02:09.130
and you can actually see
the numbers on our page,

00:02:09.130 --> 00:02:12.370
dartlang.org-- is
it can run code

00:02:12.370 --> 00:02:15.091
twice as fast as JavaScript.

00:02:15.091 --> 00:02:16.840
We have a set of
benchmarks that we chose.

00:02:16.840 --> 00:02:19.590
And you can see the
evolution over time.

00:02:19.590 --> 00:02:23.477
And you can see initially
we were really--

00:02:23.477 --> 00:02:25.810
compared to JavaScript--
really bad because we were just

00:02:25.810 --> 00:02:26.684
starting the project.

00:02:26.684 --> 00:02:29.220
But over time, like in
a year, we caught up,

00:02:29.220 --> 00:02:31.100
and now we're like
two times faster.

00:02:31.100 --> 00:02:33.266
ALEXIS MOUSSINE-POUCHKINE:
How about VM performance?

00:02:33.266 --> 00:02:36.121
You said it's an accelerator,
how much improvement can

00:02:36.121 --> 00:02:36.620
we expect?

00:02:36.620 --> 00:02:38.370
NICOLAS GEOFFRAY:
That's two times faster.

00:02:38.370 --> 00:02:41.670
The ones you can expect--
you can see the trend

00:02:41.670 --> 00:02:45.340
on that graph, which is like
it's getting better and better

00:02:45.340 --> 00:02:46.520
every day.

00:02:46.520 --> 00:02:49.650
So it's hard to say a number,
but a 2x, 3x performance

00:02:49.650 --> 00:02:51.900
improvement is something
you can think of.

00:02:51.900 --> 00:02:52.130
ALEXIS
MOUSSINE-POUCHKINE: Right,

00:02:52.130 --> 00:02:54.530
and the VM is something you
can use today, at least when

00:02:54.530 --> 00:02:59.140
you develop, or if you control
the deployment environment.

00:02:59.140 --> 00:03:00.830
I think the work
now is to get this

00:03:00.830 --> 00:03:04.250
into main Chrome, which
is-- it's not there today.

00:03:04.250 --> 00:03:05.760
NICOLAS GEOFFRAY: Yes.

00:03:05.760 --> 00:03:10.120
It's not there today, there's
a lot of technical things

00:03:10.120 --> 00:03:13.570
that need to be fixed in
Chrome to get the Dart

00:03:13.570 --> 00:03:16.560
VM into the browser.

00:03:16.560 --> 00:03:18.900
We have a project
called [INAUDIBLE],

00:03:18.900 --> 00:03:22.770
which is basically a
revamp of the memory

00:03:22.770 --> 00:03:28.420
management in our
Blink engine in Chrome.

00:03:28.420 --> 00:03:32.540
And it will enable running
two different languages,

00:03:32.540 --> 00:03:35.190
like JavaScript and Dart,
inside the same browser.

00:03:35.190 --> 00:03:36.440
ALEXIS MOUSSINE-POUCHKINE: OK.

00:03:36.440 --> 00:03:41.120
So can you talk about-- I
think the Angular team also

00:03:41.120 --> 00:03:44.550
is working with Dart,
and how are they

00:03:44.550 --> 00:03:47.869
using their two technologies,
and what are they using it for?

00:03:47.869 --> 00:03:49.660
NICOLAS GEOFFRAY: So
the Angular team, they

00:03:49.660 --> 00:03:51.350
have this project
called AngularJS

00:03:51.350 --> 00:03:53.360
that started before Dart.

00:03:53.360 --> 00:03:56.650
And once they saw Dart being
this very interesting platform,

00:03:56.650 --> 00:03:59.360
they decided to go for Angular
to Dart as well, so that they

00:03:59.360 --> 00:04:01.659
can offer-- if you want
JavaScript, you have AngularJS,

00:04:01.659 --> 00:04:03.450
and if you want Dart,
you have AngularDart.

00:04:03.450 --> 00:04:06.299
So as of today, I think
the JavaScript version has

00:04:06.299 --> 00:04:08.340
more features than the
Dart one, but the Dart one

00:04:08.340 --> 00:04:14.540
is trying to keep up to
what the AngularJS has.

00:04:14.540 --> 00:04:18.029
Internally at Google, we
have built an app, just

00:04:18.029 --> 00:04:20.829
based on Dart and AngularDart.

00:04:20.829 --> 00:04:21.870
That was a few weeks ago.

00:04:21.870 --> 00:04:26.430
We had someone from Google
presenting how to use Dart

00:04:26.430 --> 00:04:27.950
and how to use
AngularDart to build

00:04:27.950 --> 00:04:30.490
that-- it was a
sales application.

00:04:30.490 --> 00:04:33.532
And they were really amazed
about how productive they were.

00:04:33.532 --> 00:04:34.990
ALEXIS MOUSSINE-POUCHKINE:
Right, I

00:04:34.990 --> 00:04:37.000
heard things about
an entire team

00:04:37.000 --> 00:04:40.020
being brought to
develop a critical app,

00:04:40.020 --> 00:04:43.690
because this is about the ads
division vision at Google.

00:04:43.690 --> 00:04:47.430
And they had no prior knowledge
of neither Angular nor Dart,

00:04:47.430 --> 00:04:47.930
actually.

00:04:47.930 --> 00:04:50.304
NICOLAS GEOFFRAY: Yeah, I
think their background was more

00:04:50.304 --> 00:04:54.070
about Java, so the
app used to be in GWT.

00:04:54.070 --> 00:04:56.890
And they switched to Dart
without knowing the language,

00:04:56.890 --> 00:04:58.970
or AngularDart without
knowing the framework.

00:04:58.970 --> 00:05:03.350
And the number that they
gave us is that it took them

00:05:03.350 --> 00:05:09.200
six months to build the app
from scratch, dogfood it.

00:05:09.200 --> 00:05:10.935
And the dogfood went
pretty smoothly,

00:05:10.935 --> 00:05:13.366
and they were able
to just launch it.

00:05:13.366 --> 00:05:15.480
So now pretty much
everyone uses it.

00:05:15.480 --> 00:05:17.896
ALEXIS MOUSSINE-POUCHKINE:
Great, so it's definitely used,

00:05:17.896 --> 00:05:19.190
at least internally, at Google.

00:05:19.190 --> 00:05:22.750
So you didn't wait
for a 1.1 version

00:05:22.750 --> 00:05:24.530
to talk about performance.

00:05:24.530 --> 00:05:27.050
I mean it's really a
feature from the beginning

00:05:27.050 --> 00:05:30.240
and-- not even 1.0--
it was, as you said,

00:05:30.240 --> 00:05:33.850
something you looked at when
you designed the language.

00:05:33.850 --> 00:05:36.510
Tell me, maybe for
Dart-to-JS, which

00:05:36.510 --> 00:05:38.920
is the compiler to JavaScript,
which you've been heavily

00:05:38.920 --> 00:05:43.640
involved in-- give me an example
of what kind of optimization

00:05:43.640 --> 00:05:48.542
you're doing there that is
really proving to be useful

00:05:48.542 --> 00:05:49.250
performance-wise.

00:05:49.250 --> 00:05:51.708
NICOLAS GEOFFRAY: So the nice
thing about the Dart language

00:05:51.708 --> 00:05:54.675
is that it operates in a
closed world environment.

00:05:54.675 --> 00:05:56.300
So when you're
compiling to JavaScript,

00:05:56.300 --> 00:05:57.675
you can make a
lot of assumptions

00:05:57.675 --> 00:06:00.714
of things that will
happen at one time,

00:06:00.714 --> 00:06:02.880
like you know that certain
fields will never change,

00:06:02.880 --> 00:06:04.930
or certain fields will
always get that type.

00:06:04.930 --> 00:06:09.020
So you can do these kind
of global optimizations,

00:06:09.020 --> 00:06:12.200
for example, tree
shaking, type referencing,

00:06:12.200 --> 00:06:16.940
all those nice standard compiler
optimizations that JavaScript

00:06:16.940 --> 00:06:19.470
engines cannot do because they
don't have this closed world

00:06:19.470 --> 00:06:20.420
assumption.

00:06:20.420 --> 00:06:23.930
So dart2js implements all
these compiler optimizations

00:06:23.930 --> 00:06:27.420
and generates a JavaScipt code
that sometimes actually runs

00:06:27.420 --> 00:06:28.925
faster than the
JavaScipt version

00:06:28.925 --> 00:06:31.209
that you would write by hand.

00:06:31.209 --> 00:06:32.750
ALEXIS MOUSSINE-POUCHKINE:
OK, great.

00:06:32.750 --> 00:06:36.000
So how about the tooling, is
there anything you recommend?

00:06:36.000 --> 00:06:40.840
You mentioned an IDE-- web
developers don't really

00:06:40.840 --> 00:06:42.990
like IDEs, I mean the
term, they have tools,

00:06:42.990 --> 00:06:44.320
but they don't call them IDEs.

00:06:44.320 --> 00:06:46.940
Do you force people to use an
IDE before they can use Dart?

00:06:46.940 --> 00:06:49.040
NICOLAS GEOFFRAY: No,
no, no, no, we don't.

00:06:49.040 --> 00:06:52.620
Actually, I code in Vi
as well, because that's

00:06:52.620 --> 00:06:55.200
my work environment,
my workflow.

00:06:55.200 --> 00:07:00.280
So you can code in Vi, Emacs,
whatever editor you like.

00:07:00.280 --> 00:07:04.550
We also have plug-ins
for different IDEs,

00:07:04.550 --> 00:07:06.190
on the names I don't
have right now,

00:07:06.190 --> 00:07:10.052
but you're not just
forced to use that IDE.

00:07:10.052 --> 00:07:11.260
You don't have to use an IDE.

00:07:11.260 --> 00:07:13.080
You can actually also
use the command line

00:07:13.080 --> 00:07:16.290
and run an analyzer that
will analyze your source code

00:07:16.290 --> 00:07:19.390
and tell you where
your errors could be.

00:07:19.390 --> 00:07:21.892
So, no, we don't force
anyone into using the IDE.

00:07:21.892 --> 00:07:23.350
ALEXIS MOUSSINE-POUCHKINE:
Awesome.

00:07:23.350 --> 00:07:27.390
So maybe one final question
before we wrap this up.

00:07:27.390 --> 00:07:30.780
Is Dart just meant
to be a web language,

00:07:30.780 --> 00:07:33.830
or can you imagine using it
maybe on the service side

00:07:33.830 --> 00:07:36.650
to write command line tools?

00:07:36.650 --> 00:07:38.917
It seems generic enough
to be able to do that.

00:07:38.917 --> 00:07:40.750
NICOLAS GEOFFRAY: Yes,
it is generic enough.

00:07:40.750 --> 00:07:44.330
So Dart started as a
solution to all the problems

00:07:44.330 --> 00:07:46.660
we saw with web development.

00:07:46.660 --> 00:07:49.994
So that's why we started
Dart with web in mind.

00:07:49.994 --> 00:07:51.910
But it can actually do
way more than just web.

00:07:51.910 --> 00:07:55.630
It can run standalone, so you
can run the VM standalone.

00:07:55.630 --> 00:07:59.680
You can actually build a
server, so if you know Node.js,

00:07:59.680 --> 00:08:01.050
that's really similar.

00:08:01.050 --> 00:08:04.420
You can build a
service side Dart code.

00:08:04.420 --> 00:08:07.880
We have IO libraries that
do files, sockets, HTTP.

00:08:07.880 --> 00:08:10.730
So it's pretty much ubiquitous.

00:08:10.730 --> 00:08:11.739
It can be run anywhere.

00:08:11.739 --> 00:08:13.280
ALEXIS MOUSSINE-POUCHKINE:
Very good.

00:08:13.280 --> 00:08:15.730
Well congratulations on
the launch of Dart 1.0,

00:08:15.730 --> 00:08:16.250
NICOLAS GEOFFRAY: Thank you.

00:08:16.250 --> 00:08:18.380
ALEXIS MOUSSINE-POUCHKINE:
I hope it all goes well.

00:08:18.380 --> 00:08:20.810
Looking from the workshop
that was done here at dotJS,

00:08:20.810 --> 00:08:22.360
it was completely packed.

00:08:22.360 --> 00:08:24.600
So there was definitely
a lot of interest there--

00:08:24.600 --> 00:08:27.040
NICOLAS GEOFFRAY: They were
blown away by the technology.

00:08:27.040 --> 00:08:27.480
ALEXIS
MOUSSINE-POUCHKINE: Great.

00:08:27.480 --> 00:08:30.090
Let's hope we have a lot
of other people interested

00:08:30.090 --> 00:08:31.140
in this.

00:08:31.140 --> 00:08:32.650
And with that, that's all
the time we have for it.

00:08:32.650 --> 00:08:33.400
Thank you, Nicolas.

00:08:33.400 --> 00:08:33.880
NICOLAS GEOFFRAY: My pleasure.

00:08:33.880 --> 00:08:36.004
ALEXIS MOUSSINE-POUCHKINE:
And go and check it out,

00:08:36.004 --> 00:08:37.420
dartlang.org.

00:08:37.420 --> 00:08:48.880
[MUSIC PLAYING]

