WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Here again is our remove html markup program.

00:00:04.000 --> 00:00:09.000
If we invoke html markup with s being a single quote

00:00:09.000 --> 00:00:12.000
followed by a less-than sign, it passes.

00:00:12.000 --> 00:00:17.000
However, if it's a double quote followed by a less-than sign, it fails.

00:00:17.000 --> 00:00:21.000
So, this difference in the original input determines

00:00:21.000 --> 00:00:23.000
whether the run passes or fails.

00:00:23.000 --> 00:00:27.000
Let's go and execute the program a bit further but stop execution

00:00:27.000 --> 00:00:31.000
when the loop head is reached for the second time.

00:00:31.000 --> 00:00:34.000
Now again we can examine the state.

00:00:34.000 --> 00:00:36.000
The variable s stays unchanged at this point.

00:00:36.000 --> 00:00:40.000
The character c is still the first character being processed.

00:00:40.000 --> 00:00:42.000
Which is different?

00:00:42.000 --> 00:00:44.000
In the passing run, it's a single quote.

00:00:44.000 --> 00:00:46.000
In the failing run, it's a double quote.

00:00:46.000 --> 00:00:50.000
The variable tag is false in both cases.

00:00:50.000 --> 00:00:52.000
The variable quote is different.

00:00:52.000 --> 00:00:55.000
In the passing run, it is false.

00:00:55.000 --> 00:00:59.000
In the failing run, it is true.

00:00:59.000 --> 00:01:02.000
In the passing run, the out variable contains a single quote.

00:01:02.000 --> 00:01:08.000
Whereas, in the failing run, the out variable is empty.

00:01:08.000 --> 00:01:16.000
What you see at this point is that four variables, namely s, c, quote, and out,

00:01:16.000 --> 00:01:19.000
all have different values.

00:01:19.000 --> 00:01:22.000
You can now imagine that if we were in the passing run,

00:01:22.000 --> 00:01:25.000
and we would set these four variables

00:01:25.000 --> 00:01:29.000
to the values found in the failing run,

00:01:29.000 --> 00:01:34.000
then we would effectively make the passing run a failing run,

00:01:34.000 --> 00:01:36.000
meaning that these four variables,

00:01:36.000 --> 00:01:41.000
which defer, make up a cause for the failure.

00:01:41.000 --> 00:01:48.000
However, it suffices to set only a subset of these variables

00:01:48.000 --> 00:01:50.000
to the values found in the failing run.

00:01:50.000 --> 00:01:55.000
Only a subset of these variables need to be changed

00:01:55.000 --> 00:02:00.000
in order to cause the assertion to fail,

00:02:00.000 --> 00:02:04.000
and therefore, the entire run to fail.

00:02:04.000 --> 00:02:07.000
So, here is a quiz.

00:02:07.000 --> 00:02:11.000
Which of these four variables can be set to values from the failing run

00:02:11.000 --> 00:02:13.000
to make the passing run fail?

00:02:13.000 --> 00:02:18.000
Is it s--is it c--is it quote--is it out,

00:02:18.000 --> 00:02:23.000
or is it a combination of multiple variables?

00:02:23.000 --> 00:02:28.000
Hint: If you said all four, this is the correct answer.

00:02:28.000 --> 00:02:33.000
What I want is a minimum set of variables.

00:02:33.000 --> 00:02:35.000
Over to you.

