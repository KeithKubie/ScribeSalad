WEBVTT
Kind: captions
Language: en

00:00:03.590 --> 00:00:04.170
JOHN LABANCA: All right.

00:00:04.170 --> 00:00:09.760
Well welcome to the GWT, Google
Web Toolkit, and HTML5

00:00:09.760 --> 00:00:11.310
session here at Google I/O.

00:00:11.310 --> 00:00:13.195
Ought to be a fun time.

00:00:13.195 --> 00:00:15.900
What we're going to talk about
today is we're going to talk

00:00:15.900 --> 00:00:19.350
about how do you use
HTML5 in GWT.

00:00:19.350 --> 00:00:22.310
So we're not going to have a
lot of flashy demos, but we

00:00:22.310 --> 00:00:24.495
are going to have a lot
of practical examples.

00:00:24.495 --> 00:00:26.880
I'm going to start off by taking
you through an overview

00:00:26.880 --> 00:00:30.360
of what is HTML5, a very
brief overview.

00:00:30.360 --> 00:00:31.630
And then we're going to
get right into it.

00:00:31.630 --> 00:00:34.040
We're going to talk about how
do you use local storage.

00:00:34.040 --> 00:00:37.210
And we're going to focus on
local storage for performance.

00:00:37.210 --> 00:00:39.860
Then we're going to talk about
Canvas and focusing on

00:00:39.860 --> 00:00:40.720
visualization.

00:00:40.720 --> 00:00:44.030
So no video games, but
some practical stuff.

00:00:44.030 --> 00:00:46.680
We'll talk about using audio and
video in your application.

00:00:46.680 --> 00:00:48.950
How you can enhance your
app doing that.

00:00:48.950 --> 00:00:50.710
And then we're going to talk
about drag and drop support,

00:00:50.710 --> 00:00:52.810
which is pretty cool.

00:00:52.810 --> 00:00:55.270
Finally all the stuff we're
going to talk about here, with

00:00:55.270 --> 00:00:57.810
their HTML5 features, they're
not available in legacy

00:00:57.810 --> 00:01:00.180
browsers, so we'll talk about
how to handle that.

00:01:00.180 --> 00:01:03.480
And then finally I'll make some
comments about CSS3, and

00:01:03.480 --> 00:01:04.780
how we're using that in GWT.

00:01:07.320 --> 00:01:08.690
So some housekeeping.

00:01:08.690 --> 00:01:10.840
If you're using Twitter,
if you're

00:01:10.840 --> 00:01:12.660
tweeting, here's the tags.

00:01:12.660 --> 00:01:13.380
I don't tweet.

00:01:13.380 --> 00:01:15.520
I'm not really sure
what these mean.

00:01:15.520 --> 00:01:20.030
But if they make sense to you,
they make sense to you.

00:01:20.030 --> 00:01:22.700
Here's the link for feedback
with the URL.

00:01:22.700 --> 00:01:24.990
I'll leave this up
for a second.

00:01:24.990 --> 00:01:26.950
I think it's only available
after the fact.

00:01:26.950 --> 00:01:29.860
And I would like to point out
that the top link is for

00:01:29.860 --> 00:01:31.110
positive feedback.

00:01:34.810 --> 00:01:35.520
I'm glad you're laughing.

00:01:35.520 --> 00:01:38.590
This is as good as
it gets guys.

00:01:38.590 --> 00:01:39.910
So an overview.

00:01:39.910 --> 00:01:41.340
First of all, I'm
John Labanca.

00:01:41.340 --> 00:01:45.050
If you're active on our forums,
when I'm not busy,

00:01:45.050 --> 00:01:48.020
you'll see me replying
to some email threads

00:01:48.020 --> 00:01:49.120
and stuff like that.

00:01:49.120 --> 00:01:52.150
I've been at Google for five
years on the GWT team.

00:01:52.150 --> 00:01:54.320
And so that's kind
of a long time.

00:01:54.320 --> 00:01:56.850
And it's long enough to see
a huge transition in

00:01:56.850 --> 00:01:58.160
the way we do things.

00:01:58.160 --> 00:02:00.790
When I started it was all about
trying to get things to

00:02:00.790 --> 00:02:02.300
work on all different
browsers.

00:02:02.300 --> 00:02:03.810
And that usually led to a least

00:02:03.810 --> 00:02:05.120
common denominator approach.

00:02:05.120 --> 00:02:07.805
So basically we were the--

00:02:07.805 --> 00:02:08.889
well, we made it work.

00:02:08.889 --> 00:02:10.580
We'll leave it at that.

00:02:10.580 --> 00:02:13.520
Now with HTML5, that's not such
a big problem anymore.

00:02:13.520 --> 00:02:15.640
Things generally work
pretty consistently.

00:02:15.640 --> 00:02:18.800
Now it's about trying to
maximize using HTML5 to its

00:02:18.800 --> 00:02:20.280
full potential.

00:02:20.280 --> 00:02:21.700
So what are you going
to expect?

00:02:21.700 --> 00:02:24.620
Like I said, lots of demos,
practical examples of how to

00:02:24.620 --> 00:02:27.430
use this stuff and lots
of code examples.

00:02:27.430 --> 00:02:30.840
So by the end of this, you
should know how to go out and

00:02:30.840 --> 00:02:36.120
add some of these HTML5 features
to your GWT app.

00:02:36.120 --> 00:02:37.420
So what is HTML5?

00:02:37.420 --> 00:02:40.180
You may have seen slides
like this 1000 times.

00:02:40.180 --> 00:02:43.150
It's basically these media-rich
DOM elements, audio

00:02:43.150 --> 00:02:46.250
video, stuff like that, a
lot of useful new APIs.

00:02:46.250 --> 00:02:47.800
And we're going to talk
about some of those.

00:02:47.800 --> 00:02:53.480
And we bundle CSS3 into
the HTML5 theme.

00:02:53.480 --> 00:02:56.800
So support is increasing
very rapidly.

00:02:56.800 --> 00:02:59.710
Even though some legacy browsers
don't support HTML5

00:02:59.710 --> 00:03:02.830
features, the number of people
on those legacy browsers is

00:03:02.830 --> 00:03:04.270
rapidly declining.

00:03:04.270 --> 00:03:07.690
And if you use HTML5, you can
have one of these sexy apps

00:03:07.690 --> 00:03:11.760
that really stand out
in the crowd.

00:03:11.760 --> 00:03:12.390
Local storage.

00:03:12.390 --> 00:03:13.660
We're going to talk
about that.

00:03:13.660 --> 00:03:14.810
Now local storage.

00:03:14.810 --> 00:03:17.200
You'll see every time we switch
topics, I have the

00:03:17.200 --> 00:03:19.640
columns on the right,
which are not icons

00:03:19.640 --> 00:03:21.340
for trademark reasons.

00:03:21.340 --> 00:03:23.320
But so they are these
ugly text.

00:03:23.320 --> 00:03:26.880
But supported on all browsers
including IE8.

00:03:26.880 --> 00:03:29.090
So this is pretty widely
supported.

00:03:29.090 --> 00:03:32.350
And the first question I asked
when I started looking into

00:03:32.350 --> 00:03:34.970
this is why not just
use cookies.

00:03:34.970 --> 00:03:37.470
And as it turns out, there's
a very good reason.

00:03:37.470 --> 00:03:40.980
Cookies are part of the HTTP
protocol, not part of the

00:03:40.980 --> 00:03:42.150
client protocol.

00:03:42.150 --> 00:03:45.490
And so every single cookie is
sent with every single request

00:03:45.490 --> 00:03:48.630
to the server or almost every
request. As you can see here

00:03:48.630 --> 00:03:52.390
as we're sending RPC requests,
we have a list of tasks, a

00:03:52.390 --> 00:03:56.180
list of data we want to save.
And it's going to the server

00:03:56.180 --> 00:03:57.450
every single time.

00:03:57.450 --> 00:03:59.790
And in a bandwidth-constrained
environment, let's say a

00:03:59.790 --> 00:04:03.490
mobile device, that's probably
not what you want.

00:04:03.490 --> 00:04:06.120
So local storage, on the
other hand, gives

00:04:06.120 --> 00:04:07.370
you much more data.

00:04:07.370 --> 00:04:09.010
And it's shared between
browser window.

00:04:09.010 --> 00:04:11.540
It's designed to be able to save
in one browser window and

00:04:11.540 --> 00:04:13.330
load it in another.

00:04:13.330 --> 00:04:15.900
So how do you do it in
Google Web Toolkit?

00:04:15.900 --> 00:04:17.149
Pretty straightforward.

00:04:17.149 --> 00:04:20.160
If you want to save an item,
you get the local storage

00:04:20.160 --> 00:04:22.640
implementation that you
want to use, you

00:04:22.640 --> 00:04:23.530
check if it's null--

00:04:23.530 --> 00:04:25.390
I'll get to that
in one second--

00:04:25.390 --> 00:04:28.645
and you just set a string value
pair, a key value pair

00:04:28.645 --> 00:04:30.540
of strings.

00:04:30.540 --> 00:04:32.200
We'll get into more
later about what

00:04:32.200 --> 00:04:33.290
partial support means.

00:04:33.290 --> 00:04:35.950
But in general you'll see that
because storage is not

00:04:35.950 --> 00:04:38.990
supported on all browsers, you
have to actually check if it's

00:04:38.990 --> 00:04:41.870
null before you use it.

00:04:41.870 --> 00:04:42.700
Getting an item.

00:04:42.700 --> 00:04:43.410
The same thing.

00:04:43.410 --> 00:04:44.220
Get storage.

00:04:44.220 --> 00:04:45.670
You pass the key.

00:04:45.670 --> 00:04:47.960
You get the value out.

00:04:47.960 --> 00:04:48.710
OK.

00:04:48.710 --> 00:04:50.930
So key value pairs of strings.

00:04:50.930 --> 00:04:52.770
That kind of sounds
like a string map.

00:04:52.770 --> 00:04:57.010
And as it turns out GWT does
provide a storage map

00:04:57.010 --> 00:04:59.320
implementation, which
of a Java util map.

00:04:59.320 --> 00:05:02.230
And it's very useful if you're
used to that interface.

00:05:02.230 --> 00:05:05.320
What's cool about this is that
the code was contributed by

00:05:05.320 --> 00:05:08.420
somebody named Bart Guijt.

00:05:08.420 --> 00:05:10.840
Sorry.

00:05:10.840 --> 00:05:14.040
Who up until Monday, when I
actually met him, I pronounced

00:05:14.040 --> 00:05:18.150
it Bart Gwit because that just
sounded better for our team.

00:05:18.150 --> 00:05:22.150
But so our external community
is very active.

00:05:22.150 --> 00:05:24.370
And a lot of our contributions,
a lot of the

00:05:24.370 --> 00:05:27.350
things that are in GWT started
from the external community.

00:05:27.350 --> 00:05:29.890
So if you have something that
you think is useful, and you

00:05:29.890 --> 00:05:32.560
can genericize it, set up
a code site project,

00:05:32.560 --> 00:05:33.460
or send it to us.

00:05:33.460 --> 00:05:35.730
And we're happy to incorporate
it into GWT.

00:05:38.310 --> 00:05:40.090
How do we use local storage?

00:05:40.090 --> 00:05:43.090
The way we're going to use it in
this example is to improve

00:05:43.090 --> 00:05:44.240
performance.

00:05:44.240 --> 00:05:46.945
If you think about your
traditional app, you're Google

00:05:46.945 --> 00:05:49.390
Web Toolkit app, you
load your app.

00:05:49.390 --> 00:05:50.650
You load the UI frame.

00:05:50.650 --> 00:05:54.640
And then in step two, you send
a RPC request for the data to

00:05:54.640 --> 00:05:55.700
populate it.

00:05:55.700 --> 00:05:57.190
Wait for that to come back.

00:05:57.190 --> 00:06:00.240
And then push the data
into the view.

00:06:00.240 --> 00:06:02.780
That RPC request could
be kind of heavy.

00:06:02.780 --> 00:06:04.670
It could take a while.

00:06:04.670 --> 00:06:09.650
If we use local storage though,
we can create our GWT

00:06:09.650 --> 00:06:12.320
app and immediately go to local
storage for some cache

00:06:12.320 --> 00:06:14.030
data to show on the page.

00:06:14.030 --> 00:06:15.650
Now of course that data is
going to be a little bit

00:06:15.650 --> 00:06:18.060
stale, but depending on how
your app is designed that

00:06:18.060 --> 00:06:21.010
might be OK especially if the
data is specific to the

00:06:21.010 --> 00:06:22.960
current user.

00:06:22.960 --> 00:06:26.630
We then pushed local data to the
view and then send our RP

00:06:26.630 --> 00:06:28.460
request basically at
the same time.

00:06:28.460 --> 00:06:31.590
And we update the data
once it's available.

00:06:31.590 --> 00:06:34.330
So a demo.

00:06:34.330 --> 00:06:40.350
So here we have the cloud task
ultra awesome with CSS3

00:06:40.350 --> 00:06:44.910
rounded transition
stuff GWT app.

00:06:44.910 --> 00:06:48.120
And what I'm going to do, I'm
going to refresh the app.

00:06:48.120 --> 00:06:51.040
And if you notice, my
task takes a half a

00:06:51.040 --> 00:06:52.250
second to come in.

00:06:52.250 --> 00:06:53.870
But that's not good
enough for me.

00:06:53.870 --> 00:06:57.335
What I want to do, now I have
storage turned on, I'm going

00:06:57.335 --> 00:07:00.190
to refresh, and the apps
are there immediately.

00:07:03.030 --> 00:07:05.830
What's happening is we're
loading the task from local

00:07:05.830 --> 00:07:08.470
storage, and then the reason
it keeps spinning, we are

00:07:08.470 --> 00:07:11.850
sending the RPC request. So you
immediately see the task.

00:07:11.850 --> 00:07:13.290
It's instantaneous.

00:07:13.290 --> 00:07:15.310
And then eventually the RPC
comes back, and we just

00:07:15.310 --> 00:07:16.830
repopulate the list
with any updates.

00:07:21.370 --> 00:07:24.230
I don't have a demo for this,
but obviously local storage is

00:07:24.230 --> 00:07:27.750
also useful for improving
the user experience.

00:07:27.750 --> 00:07:29.900
So if you think about what gmail
does and a lot of other

00:07:29.900 --> 00:07:33.610
apps, as you're typing stuff
in, it saves to the server.

00:07:33.610 --> 00:07:35.310
Well if you lose your network
connection that

00:07:35.310 --> 00:07:36.280
doesn't help you.

00:07:36.280 --> 00:07:38.440
So you can also save
to local storage.

00:07:38.440 --> 00:07:40.050
And that way if a user--

00:07:40.050 --> 00:07:44.290
if their computer dies, you
can come back to it.

00:07:44.290 --> 00:07:45.990
So now we've seen performance.

00:07:45.990 --> 00:07:49.410
What about just making things
look better using Canvas?

00:07:49.410 --> 00:07:52.190
I'm going to focus entirely on
visualizations here because

00:07:52.190 --> 00:07:55.630
that's the type of app were
targeting is these business

00:07:55.630 --> 00:07:57.180
logic apps.

00:07:57.180 --> 00:07:58.210
OK.

00:07:58.210 --> 00:08:02.150
This slide is boring as denoted
by the bullet point.

00:08:02.150 --> 00:08:06.390
And the key here that when you
look at this table, you don't

00:08:06.390 --> 00:08:07.450
know what's important.

00:08:07.450 --> 00:08:11.010
It seems like a task with no due
date is the most important

00:08:11.010 --> 00:08:13.320
thing because it has
a six next to it.

00:08:13.320 --> 00:08:16.800
But if we switch that out with
a canvas, a very simple

00:08:16.800 --> 00:08:20.110
visualization, we can see that a
large portion of our data is

00:08:20.110 --> 00:08:21.970
red, which probably means
that it's bad.

00:08:21.970 --> 00:08:24.720
And that no due date
actually turns out

00:08:24.720 --> 00:08:25.640
that it's greyed out.

00:08:25.640 --> 00:08:26.720
It probably doesn't matter.

00:08:26.720 --> 00:08:30.780
So visualization can really
bring out data.

00:08:30.780 --> 00:08:34.590
And now we're going
to do a demo.

00:08:34.590 --> 00:08:35.049
OK.

00:08:35.049 --> 00:08:35.429
Watch this.

00:08:35.429 --> 00:08:35.919
Ready?

00:08:35.919 --> 00:08:38.380
It's going to happen fast.
No visualization.

00:08:38.380 --> 00:08:39.509
Visualization.

00:08:39.509 --> 00:08:41.669
All right?

00:08:41.669 --> 00:08:47.400
What we did here is we used
up space that was unused.

00:08:47.400 --> 00:08:50.000
And in doing so, we added
kind of a lot of data.

00:08:50.000 --> 00:08:53.500
This list on its own means
nothing, but this means a lot.

00:08:53.500 --> 00:08:55.890
So let's say I want
to call my Mom.

00:08:55.890 --> 00:08:58.380
And I say, you know what.

00:08:58.380 --> 00:09:00.480
I'm going to edit that, and I'm
going to push the due date

00:09:00.480 --> 00:09:04.565
out later because I don't
call her enough.

00:09:04.565 --> 00:09:06.500
And I click done.

00:09:06.500 --> 00:09:08.710
And well there's a lot of tasks,
but it did update.

00:09:08.710 --> 00:09:09.580
Oh, there it goes.

00:09:09.580 --> 00:09:10.970
So it updated.

00:09:10.970 --> 00:09:13.450
It updated after it
re-requested the

00:09:13.450 --> 00:09:15.270
task from the server.

00:09:15.270 --> 00:09:16.940
OK.

00:09:16.940 --> 00:09:17.870
So now we canvas.

00:09:17.870 --> 00:09:21.580
So how do we actually
use a canvas in GWT?

00:09:21.580 --> 00:09:23.380
I had never used
Canvas before.

00:09:23.380 --> 00:09:25.550
It took me about an hour
to create that chart.

00:09:25.550 --> 00:09:28.170
I'm not saying that it's super
cool, but if you want to

00:09:28.170 --> 00:09:30.230
create a custom chart,
don't be afraid.

00:09:30.230 --> 00:09:32.260
It's very easy to
do with Canvas.

00:09:32.260 --> 00:09:35.000
Having done it once, I think I
could probably do it again in

00:09:35.000 --> 00:09:36.230
20 minutes.

00:09:36.230 --> 00:09:37.930
And so what I'm going to walk
you through, we're basically

00:09:37.930 --> 00:09:39.360
going to create this--

00:09:39.360 --> 00:09:42.280
if you have a half pie chart's
worth of data, you'll want to

00:09:42.280 --> 00:09:45.190
pay close attention
to these slides.

00:09:45.190 --> 00:09:47.420
There's basically four
steps to a canvas.

00:09:47.420 --> 00:09:49.100
You initialize the canvas.

00:09:49.100 --> 00:09:52.230
You calculate the values
for the new shape.

00:09:52.230 --> 00:09:54.670
Clear the current canvas
if you need to.

00:09:54.670 --> 00:09:57.260
And then you draw
the new shape.

00:09:57.260 --> 00:09:58.640
So here's the code.

00:09:58.640 --> 00:10:01.600
The first thing we're going to
do is we are going to create a

00:10:01.600 --> 00:10:02.530
Canvas widget.

00:10:02.530 --> 00:10:05.250
And we're going to set two
things, the coordinate space

00:10:05.250 --> 00:10:06.930
and the pixel size.

00:10:06.930 --> 00:10:08.700
If you haven't heard this
already-- some other talks

00:10:08.700 --> 00:10:10.360
mentioned it, but it
is important--

00:10:10.360 --> 00:10:14.270
you draw to a virtual, if you
will, coordinate space, and

00:10:14.270 --> 00:10:17.320
then the DOM or the pixel size
is what you actually see.

00:10:17.320 --> 00:10:20.000
The browser scales the canvas
up to that size.

00:10:20.000 --> 00:10:23.310
The reason that is really
important is if your canvas

00:10:23.310 --> 00:10:25.920
resizes with the window, you
don't want to redraw it every

00:10:25.920 --> 00:10:26.590
single time.

00:10:26.590 --> 00:10:29.360
Let the browser figure
that out.

00:10:29.360 --> 00:10:33.410
So we calculate our positions
and stuff like that.

00:10:33.410 --> 00:10:35.030
We do that based on the
coordinates space.

00:10:35.030 --> 00:10:38.210
Here we're getting the radius
and the center coordinate.

00:10:38.210 --> 00:10:39.230
We clear the canvas.

00:10:39.230 --> 00:10:40.760
Pretty straightforward.

00:10:40.760 --> 00:10:43.360
And then finally we draw
that half arc.

00:10:43.360 --> 00:10:46.960
And this code, you can read
through it and sort of see

00:10:46.960 --> 00:10:47.670
what it's doing.

00:10:47.670 --> 00:10:50.110
It's drawing an arc, and
it's filling it.

00:10:50.110 --> 00:10:53.180
But this stuff doesn't
necessarily need to make sense

00:10:53.180 --> 00:10:57.100
to you in this context because
if you want to draw any shape,

00:10:57.100 --> 00:10:58.360
you can basically use--

00:10:58.360 --> 00:10:59.910
you can see the name
is down there.

00:10:59.910 --> 00:11:01.260
It's called Google.

00:11:01.260 --> 00:11:03.590
You can just search for any
shape you want to draw on

00:11:03.590 --> 00:11:05.910
Canvas, and you'll find a
code snippet to draw it.

00:11:05.910 --> 00:11:08.970
So this is a semi-circle.

00:11:08.970 --> 00:11:10.460
It's probably the wrong way
to do it because I'm

00:11:10.460 --> 00:11:12.580
not a Canvas expert.

00:11:12.580 --> 00:11:17.030
But you can go online and find
more patterns to follow.

00:11:17.030 --> 00:11:19.850
So getting back to the
coordinate space.

00:11:19.850 --> 00:11:21.370
What does it really mean?

00:11:21.370 --> 00:11:23.780
At the bottom of this screen,
you can see what happens if we

00:11:23.780 --> 00:11:27.030
draw into a 300x300 DOM.

00:11:27.030 --> 00:11:29.510
That's the size of the
canvas in our demo.

00:11:29.510 --> 00:11:32.620
You can see what happens if we
use a 300x300 coordinate space

00:11:32.620 --> 00:11:34.060
versus 30x30.

00:11:34.060 --> 00:11:37.620
Obviously the higher coordinate
space is better.

00:11:37.620 --> 00:11:39.050
But it comes at a cost.

00:11:39.050 --> 00:11:41.750
A large coordinate space is
going to be higher quality,

00:11:41.750 --> 00:11:43.250
but it's slower to render.

00:11:43.250 --> 00:11:46.250
So if you only have one
visualization in your app, go

00:11:46.250 --> 00:11:48.460
ahead and use a large
coordinate space.

00:11:48.460 --> 00:11:50.600
But if you have a lot of them,
or you're refreshing them

00:11:50.600 --> 00:11:53.390
rapidly, you're going to want to
match the coordinate space

00:11:53.390 --> 00:11:54.710
to the DOM size.

00:11:54.710 --> 00:11:56.470
And you can do that in
one of two ways.

00:11:56.470 --> 00:11:58.190
You can set the DOM size.

00:11:58.190 --> 00:11:59.230
That's what we did
in the demo.

00:11:59.230 --> 00:12:01.200
We set it to 300 pixels.

00:12:01.200 --> 00:12:04.620
Or you can catch resize events,
such as Window resize

00:12:04.620 --> 00:12:06.350
events, and adjust the
DOM size accordingly.

00:12:09.510 --> 00:12:11.980
Now into more fun stuff.

00:12:11.980 --> 00:12:14.910
Audio, I think, is one
of the least utilized

00:12:14.910 --> 00:12:15.910
parts of the web.

00:12:15.910 --> 00:12:18.700
One of the least utilized
senses on the web.

00:12:18.700 --> 00:12:23.740
And the new HTML5 audio widget
or element allows

00:12:23.740 --> 00:12:24.860
you to embed audio.

00:12:24.860 --> 00:12:27.270
And you have to think of it
as really two things.

00:12:27.270 --> 00:12:29.260
It is a widget or an element.

00:12:29.260 --> 00:12:31.580
And it's also an API
for playing audio.

00:12:31.580 --> 00:12:34.180
You can call, play, pause,
stuff like that.

00:12:34.180 --> 00:12:36.820
It's designed primarily
for use--

00:12:36.820 --> 00:12:40.690
I should say, it was primarily
thought of as a way to stream

00:12:40.690 --> 00:12:43.410
music, but in this example I'm
going to show you how to just

00:12:43.410 --> 00:12:47.330
play a simple sound bite
in an application.

00:12:47.330 --> 00:12:49.560
So here's the demo.

00:12:49.560 --> 00:12:53.180
So let's say I want to
create a new task.

00:12:53.180 --> 00:12:54.010
And I come here.

00:12:54.010 --> 00:12:57.320
And I say, call Dad because
I don't call him

00:12:57.320 --> 00:12:58.800
often enough either.

00:12:58.800 --> 00:13:00.490
I set a due date, and
then I click done.

00:13:07.130 --> 00:13:10.070
And did you all here that?

00:13:10.070 --> 00:13:10.450
Neither did I.

00:13:10.450 --> 00:13:11.880
[SOUND OF SAD TROMBONE]

00:13:11.880 --> 00:13:12.750
JOHN LABANCA: Oh there we go.

00:13:12.750 --> 00:13:14.890
OK.

00:13:14.890 --> 00:13:16.930
I will point out that
the delay was not

00:13:16.930 --> 00:13:18.080
because of the HTML5.

00:13:18.080 --> 00:13:19.900
It's because it took that long
for the request to go to the

00:13:19.900 --> 00:13:23.270
server and come back because
they gave all of you guys

00:13:23.270 --> 00:13:24.520
network connected devices.

00:13:28.950 --> 00:13:30.790
But why sound bites?

00:13:30.790 --> 00:13:32.910
Well I think that there
is a market.

00:13:32.910 --> 00:13:35.120
There are a lot of people
who use streaming audio.

00:13:35.120 --> 00:13:36.900
And I certainly think there's
a lot of use for that.

00:13:36.900 --> 00:13:40.040
But I also think that adding
sound to your app can really

00:13:40.040 --> 00:13:41.040
enhance your app.

00:13:41.040 --> 00:13:43.240
I think it's totally
underutilized.

00:13:43.240 --> 00:13:46.120
And if you think about just the
ability to alert somebody

00:13:46.120 --> 00:13:49.630
when they app isn't
in the focus--

00:13:49.630 --> 00:13:51.810
the way like chat and stuff like
that work-- that's just

00:13:51.810 --> 00:13:54.560
an awesome thing to add
to your application.

00:13:54.560 --> 00:13:56.330
So audio.

00:13:56.330 --> 00:13:59.600
As you can see here, browser
vendors sort of disagree on

00:13:59.600 --> 00:14:00.940
which is the best format.

00:14:00.940 --> 00:14:04.190
And so you can choose-- you must
choose at least two of

00:14:04.190 --> 00:14:05.560
the three main formats.

00:14:05.560 --> 00:14:08.750
Which you choose is entirely
up to you.

00:14:08.750 --> 00:14:10.000
But choose.

00:14:13.160 --> 00:14:17.020
In HTML this is how we create
an audio element.

00:14:17.020 --> 00:14:21.050
Basically the spec understands
that the browser vendors are

00:14:21.050 --> 00:14:22.390
still discussing this.

00:14:22.390 --> 00:14:26.190
And so there is a way to specify
multiple source files,

00:14:26.190 --> 00:14:28.500
and the browser will choose
the best one.

00:14:28.500 --> 00:14:30.290
But here's something that's
really important.

00:14:30.290 --> 00:14:30.930
The type.

00:14:30.930 --> 00:14:33.850
You have to specify the type,
or the browser will download

00:14:33.850 --> 00:14:35.280
all of the source files.

00:14:35.280 --> 00:14:38.200
And the reason for that is you
can't necessarily infer the

00:14:38.200 --> 00:14:39.320
type from the file name.

00:14:39.320 --> 00:14:44.670
The file name could be something
like file?ID=8210.

00:14:44.670 --> 00:14:46.450
And so specify the type.

00:14:46.450 --> 00:14:49.090
It will allow the browser to
make a smarter decision.

00:14:49.090 --> 00:14:53.320
So in GWT we create
our audio widget.

00:14:53.320 --> 00:14:54.150
It is a widget.

00:14:54.150 --> 00:14:55.920
You can attach it to the page.

00:14:55.920 --> 00:14:57.810
And we add three
sources to it.

00:14:57.810 --> 00:14:59.890
And you can see we're
using the--

00:14:59.890 --> 00:15:04.060
we've static typed the types.

00:15:04.060 --> 00:15:05.790
We add our three sources.

00:15:05.790 --> 00:15:07.460
Optionally you can
set controls.

00:15:07.460 --> 00:15:09.260
Actually I can catch up.

00:15:09.260 --> 00:15:11.620
You can set controls and
return the audio.

00:15:11.620 --> 00:15:12.500
Very straightforward.

00:15:12.500 --> 00:15:13.750
Very easy to do.

00:15:16.490 --> 00:15:19.680
Now with that sound clip even
though it took a delay for the

00:15:19.680 --> 00:15:22.110
RPC request to come back, you'll
have to take my word

00:15:22.110 --> 00:15:24.820
for it that as soon as we knew
we wanted to play the sound,

00:15:24.820 --> 00:15:26.120
we were able to play
the sound.

00:15:28.680 --> 00:15:29.040
I'm sorry.

00:15:29.040 --> 00:15:32.470
I'm getting ahead of myself.

00:15:32.470 --> 00:15:35.510
So I showed you on this slide
how to let the browser

00:15:35.510 --> 00:15:37.590
download files for you
and figure out

00:15:37.590 --> 00:15:38.820
which files to download.

00:15:38.820 --> 00:15:42.260
The problem is not all browsers
are super intelligent

00:15:42.260 --> 00:15:42.990
about how they do this.

00:15:42.990 --> 00:15:45.420
They may download all the
files anyway, which is

00:15:45.420 --> 00:15:47.330
probably OK for a small
sound clip.

00:15:47.330 --> 00:15:51.090
But if you have a large sound
clip or a very large file, you

00:15:51.090 --> 00:15:54.500
want to be very sure that you
only download one file.

00:15:54.500 --> 00:15:57.210
So you can manually
choose which

00:15:57.210 --> 00:15:58.660
file you want to download.

00:15:58.660 --> 00:16:01.080
And to do that you ask
the browser, can

00:16:01.080 --> 00:16:02.370
you play this type.

00:16:02.370 --> 00:16:09.330
And it responds, probably,
maybe or empty string.

00:16:09.330 --> 00:16:11.290
As you might expect.

00:16:11.290 --> 00:16:13.470
And so here's what we can do.

00:16:13.470 --> 00:16:15.620
We can replace that part in
the center, the ad source,

00:16:15.620 --> 00:16:17.600
with a bunch of if-else
statements.

00:16:17.600 --> 00:16:22.270
Where first we take all
our files that we--

00:16:22.270 --> 00:16:24.060
our types and say, can
you play this.

00:16:24.060 --> 00:16:26.890
And if the browser says,
probably, we probably want to

00:16:26.890 --> 00:16:28.030
use that file.

00:16:28.030 --> 00:16:31.950
If nothing says probably, we go
through again and say, can

00:16:31.950 --> 00:16:33.500
you maybe play this type.

00:16:33.500 --> 00:16:37.440
And then if you maybe can play
this type, then we play it.

00:16:37.440 --> 00:16:40.910
We don't need to check the nos
because you don't need to.

00:16:40.910 --> 00:16:44.790
I will say that in practice the
browser seems to return

00:16:44.790 --> 00:16:47.240
maybe if they can
play it or no.

00:16:47.240 --> 00:16:50.270
I have yet to see the browser
return probably.

00:16:50.270 --> 00:16:51.710
So keep that in mind.

00:16:51.710 --> 00:16:52.960
Don't skip our on the maybes.

00:16:55.600 --> 00:16:58.970
Now this is go back to what
I was trying to say, and I

00:16:58.970 --> 00:16:59.860
skipped ahead.

00:16:59.860 --> 00:17:02.830
Our sound file played
immediately after our RPC call

00:17:02.830 --> 00:17:06.130
came back and said that there
was a validation error.

00:17:06.130 --> 00:17:07.880
So we can preload.

00:17:07.880 --> 00:17:10.849
Now we can let the browser
decide when to preload, the

00:17:10.849 --> 00:17:11.810
set preload.

00:17:11.810 --> 00:17:16.089
But the only arguments
are auto and no.

00:17:16.089 --> 00:17:19.430
And so this could be useful
if this is what you want.

00:17:19.430 --> 00:17:21.810
I believe the browser might
preload when you actually

00:17:21.810 --> 00:17:23.470
attach the audio to the page.

00:17:23.470 --> 00:17:26.640
But if you want to guarantee
that you preload the file, use

00:17:26.640 --> 00:17:28.180
audio.load.

00:17:28.180 --> 00:17:31.560
What we did in the demo is when
the user went to the edit

00:17:31.560 --> 00:17:34.900
view, we call audio.load to make
sure we've got that file.

00:17:34.900 --> 00:17:39.570
And then when the violation
error comes back, then

00:17:39.570 --> 00:17:40.820
we just play it.

00:17:43.320 --> 00:17:44.440
We talk about audio.

00:17:44.440 --> 00:17:45.690
What about video?

00:17:48.210 --> 00:17:49.310
Oh look.

00:17:49.310 --> 00:17:50.926
Can you guys see that?

00:17:50.926 --> 00:17:51.550
All right.

00:17:51.550 --> 00:17:54.810
Well let's pretend it's some
dark, shadowy figure.

00:17:54.810 --> 00:17:55.950
So you get embed video.

00:17:55.950 --> 00:17:57.050
There's not a whole
lot to say here.

00:17:57.050 --> 00:18:00.490
It's basically the same as
audio except with video.

00:18:00.490 --> 00:18:02.100
And I do have a demo
of that as well.

00:18:07.370 --> 00:18:08.970
Let's say I'm using
my application--

00:18:08.970 --> 00:18:11.200
and I'll preface this by
saying there are a

00:18:11.200 --> 00:18:12.380
lot of uses for video.

00:18:12.380 --> 00:18:13.420
I'm not going to
get into them.

00:18:13.420 --> 00:18:17.920
But the one I like is video
tutorials because I see that a

00:18:17.920 --> 00:18:19.440
lot with Google Applications.

00:18:19.440 --> 00:18:20.340
And it seems to work.

00:18:20.340 --> 00:18:21.450
It's a lot better than
just reading

00:18:21.450 --> 00:18:22.810
through a bunch of text.

00:18:22.810 --> 00:18:24.885
So here let's say I don't
know how to add a task.

00:18:24.885 --> 00:18:28.610
So I'm going to click on
my video tutorial.

00:18:28.610 --> 00:18:29.060
[VIDEO PLAYBACK]

00:18:29.060 --> 00:18:29.960
VIDEO JOHN LABANCA:
Tech support.

00:18:29.960 --> 00:18:31.070
This is John.

00:18:31.070 --> 00:18:32.532
Oh.

00:18:32.532 --> 00:18:34.380
You again.

00:18:34.380 --> 00:18:36.180
JOHN LABANCA: Hey John.

00:18:36.180 --> 00:18:37.660
I'm here at Google I/O.

00:18:37.660 --> 00:18:39.590
And I'm trying to create
a task, but I'm not

00:18:39.590 --> 00:18:40.430
sure how to do it.

00:18:40.430 --> 00:18:41.920
VIDEO JOHN LABANCA: Seriously?

00:18:41.920 --> 00:18:42.300
JOHN LABANCA: Yeah.

00:18:42.300 --> 00:18:43.550
Do you think you can
help me out?

00:18:46.010 --> 00:18:47.095
VIDEO JOHN LABANCA: Did
you try clicking the

00:18:47.095 --> 00:18:49.050
button in the menu?

00:18:49.050 --> 00:18:49.690
JOHN LABANCA: Which menu?

00:18:49.690 --> 00:18:50.230
Which button?

00:18:50.230 --> 00:18:51.481
VIDEO JOHN LABANCA: The
one in the menu.

00:18:51.481 --> 00:18:52.731
JOHN LABANCA: This menu?

00:18:55.230 --> 00:18:56.010
VIDEO JOHN LABANCA:
The other menu.

00:18:56.010 --> 00:18:57.270
On the left.

00:18:57.270 --> 00:18:58.770
JOHN LABANCA: Your
left or my left?

00:18:58.770 --> 00:19:00.020
VIDEO JOHN LABANCA:
Right there.

00:19:03.354 --> 00:19:05.844
That way.

00:19:05.844 --> 00:19:07.300
JOHN LABANCA: Oh OK.

00:19:07.300 --> 00:19:08.550
But there's two buttons.

00:19:12.320 --> 00:19:13.640
VIDEO JOHN LABANCA: Seriously?

00:19:13.640 --> 00:19:14.932
You want to add a task.

00:19:14.932 --> 00:19:15.280
Right?

00:19:15.280 --> 00:19:15.420
JOHN LABANCA: Yeah.

00:19:15.420 --> 00:19:16.120
That's right.

00:19:16.120 --> 00:19:17.050
VIDEO JOHN LABANCA: So
maybe the button

00:19:17.050 --> 00:19:20.590
that says, add task.

00:19:20.590 --> 00:19:20.980
JOHN LABANCA: Oh yeah.

00:19:20.980 --> 00:19:21.630
That works.

00:19:21.630 --> 00:19:24.236
Thanks I appreciate it.

00:19:24.236 --> 00:19:25.605
VIDEO JOHN LABANCA: Is
there anything else I

00:19:25.605 --> 00:19:26.550
can help you with?

00:19:26.550 --> 00:19:27.250
No?

00:19:27.250 --> 00:19:28.050
Good.

00:19:28.050 --> 00:19:28.450
[END OF VIDEO PLAYBACK]

00:19:28.450 --> 00:19:32.200
JOHN LABANCA: OK So--

00:19:32.200 --> 00:19:33.450
[APPLAUSE]

00:19:39.660 --> 00:19:41.380
JOHN LABANCA: I wouldn't
necessarily do that in your

00:19:41.380 --> 00:19:42.090
own company.

00:19:42.090 --> 00:19:43.970
That may not be the most
effective use of your time,

00:19:43.970 --> 00:19:45.550
but at Google that kind
of stuff flies.

00:19:51.150 --> 00:19:52.550
I recorded that off my laptop.

00:19:52.550 --> 00:19:56.400
So it's very easy to
record videos.

00:19:56.400 --> 00:19:59.990
Except, it's not always easy to
know which encoding to use.

00:19:59.990 --> 00:20:02.570
So like like audio there's a
little bit of a disagreement.

00:20:02.570 --> 00:20:03.980
They're still talking
about this--

00:20:03.980 --> 00:20:07.240
about which files you can
play on which browser.

00:20:07.240 --> 00:20:09.480
And so in this case you can
choose any two as long as one

00:20:09.480 --> 00:20:12.150
of them is MP4 because Internet
Explorer and Safari

00:20:12.150 --> 00:20:14.120
currently only support MP4.

00:20:14.120 --> 00:20:17.660
Safari will play anything that
QuickTime will play, but if

00:20:17.660 --> 00:20:21.600
you don't choose MP4, you're
kind of taking your chances.

00:20:21.600 --> 00:20:25.630
Everything else about video
is the same as audio.

00:20:25.630 --> 00:20:26.700
Create if supported.

00:20:26.700 --> 00:20:27.840
We add our files.

00:20:27.840 --> 00:20:29.600
You can do the same trick
to choose a file

00:20:29.600 --> 00:20:31.690
manually if you want.

00:20:31.690 --> 00:20:34.280
And we set controls and
return the video.

00:20:34.280 --> 00:20:35.530
So pretty straightforward.

00:20:38.290 --> 00:20:39.710
Now let's get into
some cool stuff.

00:20:39.710 --> 00:20:41.060
Drag and drop.

00:20:41.060 --> 00:20:44.110
Drag and drop is obviously
a newer HTML library.

00:20:44.110 --> 00:20:45.750
Very powerful.

00:20:45.750 --> 00:20:48.740
It is supported in most
browsers, but it is currently

00:20:48.740 --> 00:20:50.140
not supported in Opera.

00:20:50.140 --> 00:20:52.980
So keep that in mind if
you want to have a

00:20:52.980 --> 00:20:55.860
fallback for Opera.

00:20:55.860 --> 00:20:57.170
And here's how it
basically works.

00:20:57.170 --> 00:21:00.530
Again we have our task list.
We click on something.

00:21:00.530 --> 00:21:01.680
And we go to drag it.

00:21:01.680 --> 00:21:03.620
And there's a couple key
features you'll note here.

00:21:03.620 --> 00:21:06.630
One is the thing we're dragging,
we can actually make

00:21:06.630 --> 00:21:09.440
that or anything else appear
beneath the cursor.

00:21:09.440 --> 00:21:11.690
And it's very easy to do that.

00:21:11.690 --> 00:21:13.770
The other thing is so
what does it really

00:21:13.770 --> 00:21:15.130
mean to drag something.

00:21:15.130 --> 00:21:17.060
You're going to click, and
you're going to do a drag

00:21:17.060 --> 00:21:18.880
sequence, and then you're going
to drop somewhere else.

00:21:18.880 --> 00:21:20.140
So you have draggable things.

00:21:20.140 --> 00:21:21.370
You have drop targets.

00:21:21.370 --> 00:21:23.210
And you have all the
events in between.

00:21:23.210 --> 00:21:24.570
And there's tons of events.

00:21:24.570 --> 00:21:28.120
There's drag start, drag end,
drag move, drag enter, drag

00:21:28.120 --> 00:21:31.720
leave. And that means that you
have tons of control over how

00:21:31.720 --> 00:21:35.900
you adjust your UI and things
like that to show the user

00:21:35.900 --> 00:21:37.450
what they're actually doing.

00:21:37.450 --> 00:21:41.550
And one key point is that when
we drag, we can save data that

00:21:41.550 --> 00:21:45.160
is persistent throughout the
entire drag sequence.

00:21:45.160 --> 00:21:47.270
But what you really probably
want to save

00:21:47.270 --> 00:21:48.620
is some unique ID.

00:21:48.620 --> 00:21:51.480
Don't create a huge JSON object
and associate it with

00:21:51.480 --> 00:21:52.610
this drag sequence.

00:21:52.610 --> 00:21:53.740
Just set an ID.

00:21:53.740 --> 00:21:55.640
And on the drop, you
can get that ID.

00:21:55.640 --> 00:21:59.180
And then you can get whatever
data you need.

00:21:59.180 --> 00:22:00.816
Oh, and a demo.

00:22:00.816 --> 00:22:03.370
All right.

00:22:03.370 --> 00:22:04.450
Now I know how to
create a task.

00:22:04.450 --> 00:22:07.290
Once again I'm going to click on
something and drag it over

00:22:07.290 --> 00:22:08.690
and drop it.

00:22:08.690 --> 00:22:09.940
Pretty straightforward.

00:22:12.844 --> 00:22:13.820
OK.

00:22:13.820 --> 00:22:15.070
Wow.

00:22:17.940 --> 00:22:18.370
OK.

00:22:18.370 --> 00:22:21.570
So the first thing we need to do
when we're dragging is make

00:22:21.570 --> 00:22:22.640
something draggable.

00:22:22.640 --> 00:22:24.690
And in order to make something
draggable, we

00:22:24.690 --> 00:22:25.620
have to do a few things.

00:22:25.620 --> 00:22:26.680
We have to do all the things.

00:22:26.680 --> 00:22:27.810
They're not optional.

00:22:27.810 --> 00:22:30.770
First we have to set the
draggable attribute to true.

00:22:30.770 --> 00:22:33.060
On some elements, that's
already set.

00:22:33.060 --> 00:22:36.690
But if you want to say drag a
div element, you have to set

00:22:36.690 --> 00:22:38.460
its draggable attribute
to true.

00:22:38.460 --> 00:22:42.060
You must add a drag start
handler, or the browser will

00:22:42.060 --> 00:22:43.090
not know that the thing you're

00:22:43.090 --> 00:22:45.840
dragging is actually draggable.

00:22:45.840 --> 00:22:47.330
Sort of weird, but
it's important.

00:22:47.330 --> 00:22:50.580
And then in Firefox, you
have to set data.

00:22:50.580 --> 00:22:51.680
So make sure that you--

00:22:51.680 --> 00:22:52.980
and you will always want to.

00:22:52.980 --> 00:22:54.880
There's really no point
in not setting data.

00:22:54.880 --> 00:22:57.070
But you do have to set
data or else the

00:22:57.070 --> 00:23:00.020
thing will not be draggable.

00:23:00.020 --> 00:23:02.400
So let's walk through
a simple example.

00:23:02.400 --> 00:23:04.160
Here we have our label.

00:23:04.160 --> 00:23:05.930
A label in GWT is a widget.

00:23:05.930 --> 00:23:06.900
It just shows text.

00:23:06.900 --> 00:23:08.510
It's just a div.

00:23:08.510 --> 00:23:11.190
And because it's not natively
draggable, you have to call a

00:23:11.190 --> 00:23:12.790
set draggable on that element.

00:23:12.790 --> 00:23:15.250
And as you can see here, it's
not part of the widget API.

00:23:15.250 --> 00:23:18.230
So just if you're not familiar
with it, you can go down to

00:23:18.230 --> 00:23:21.200
the element level, the div
itself, and call this set

00:23:21.200 --> 00:23:23.240
draggable attribute.

00:23:23.240 --> 00:23:24.820
Then we add our drag
start handler.

00:23:24.820 --> 00:23:25.730
Pretty straightforward.

00:23:25.730 --> 00:23:31.830
We have a method to add
a drag handler.

00:23:31.830 --> 00:23:34.450
And the first thing we need
to do is we set data.

00:23:34.450 --> 00:23:36.610
Now here this takes
two arguments.

00:23:36.610 --> 00:23:40.380
The first one is a string, which
is like the key, but

00:23:40.380 --> 00:23:41.950
pretty much always
had to be text.

00:23:41.950 --> 00:23:45.170
Apparently you can set some
other ones, but if you go to

00:23:45.170 --> 00:23:49.360
creative and say, my ID,
Internet Explorer will croak.

00:23:49.360 --> 00:23:50.690
So just say text.

00:23:50.690 --> 00:23:53.070
And then in that text you
can put a string.

00:23:53.070 --> 00:23:54.390
Here we put Hello World.

00:23:54.390 --> 00:23:59.810
What you probably want to
do is put a unique ID.

00:23:59.810 --> 00:24:03.540
And that data, that refers to
the transfer data object.

00:24:03.540 --> 00:24:05.500
That's going to be persistent
throughout the

00:24:05.500 --> 00:24:08.310
drag and drop sequence.

00:24:08.310 --> 00:24:09.950
This is cool.

00:24:09.950 --> 00:24:10.960
So this is optional.

00:24:10.960 --> 00:24:13.780
You can set what appears
behind the cursor

00:24:13.780 --> 00:24:14.780
while you're dragging.

00:24:14.780 --> 00:24:16.830
And you can also specify its
offset, whether you want it to

00:24:16.830 --> 00:24:17.840
be in the middle or not.

00:24:17.840 --> 00:24:20.470
And what we did here is we
actually passed an element.

00:24:20.470 --> 00:24:22.960
The browser will take
effectively a screen shot of

00:24:22.960 --> 00:24:24.590
that element at that time.

00:24:24.590 --> 00:24:26.420
And that's the image it uses.

00:24:26.420 --> 00:24:29.280
If you specify an image element,
it will just download

00:24:29.280 --> 00:24:32.770
the image from the server.

00:24:32.770 --> 00:24:34.510
So now we can drag something
around our screen.

00:24:34.510 --> 00:24:36.520
Now we need a DL.

00:24:36.520 --> 00:24:38.210
We need a place to drop it.

00:24:38.210 --> 00:24:40.530
DZ.

00:24:40.530 --> 00:24:42.250
To do that we need
to do two things.

00:24:42.250 --> 00:24:44.350
We need to add a drag
over handler.

00:24:44.350 --> 00:24:46.980
We don't actually need to use
it, but we do need to add it.

00:24:46.980 --> 00:24:49.990
And we also need to add a drop
handler to actually say that

00:24:49.990 --> 00:24:52.420
we can drop on this target.

00:24:52.420 --> 00:24:54.110
So drag over handler.

00:24:54.110 --> 00:24:55.440
You can see what we're
doing here.

00:24:55.440 --> 00:24:57.390
We're changing the
background color.

00:24:57.390 --> 00:24:58.970
You can see in the
demo the input is

00:24:58.970 --> 00:25:00.610
change background color.

00:25:00.610 --> 00:25:01.360
You have to add this.

00:25:01.360 --> 00:25:04.300
You don't even have to actually
change anything, but

00:25:04.300 --> 00:25:07.380
all browsers seem
to require this.

00:25:07.380 --> 00:25:10.090
And then we add our
drop handler.

00:25:10.090 --> 00:25:12.630
You probably want to prevent
the default.

00:25:12.630 --> 00:25:14.050
And here's what happens
if you don't.

00:25:14.050 --> 00:25:15.890
On most browsers it
will be fine.

00:25:15.890 --> 00:25:19.130
But if the user selects text and
drags the text along with

00:25:19.130 --> 00:25:22.440
the draggable thing and then
releases it inside of a input

00:25:22.440 --> 00:25:25.660
element, what will end up
happening is you'll get the

00:25:25.660 --> 00:25:28.080
drop event, do whatever you
plan to do, and then

00:25:28.080 --> 00:25:31.730
additionally it will copy and
paste the text as part of the

00:25:31.730 --> 00:25:33.450
browser's normal handling
of that.

00:25:33.450 --> 00:25:34.680
So you probably want to prevent

00:25:34.680 --> 00:25:37.210
default on these events.

00:25:37.210 --> 00:25:39.500
And then the last thing we
do, which is the sort of

00:25:39.500 --> 00:25:42.420
culmination of this drag and
drop sequence, is we're going

00:25:42.420 --> 00:25:45.560
to get our data out of
the data transfer

00:25:45.560 --> 00:25:47.010
object, out of the event.

00:25:47.010 --> 00:25:51.130
And that data is the same data
that we sat in our drag start.

00:25:54.800 --> 00:25:59.000
Now not all GWT widgets
support the--

00:25:59.000 --> 00:26:01.140
has drag handlers and
stuff like that.

00:26:01.140 --> 00:26:05.080
So this trick is something that
you can do for any DOM

00:26:05.080 --> 00:26:08.060
event, which includes click,
mouse, mouse events, click

00:26:08.060 --> 00:26:10.140
events, keyboard events,
all the native stuff.

00:26:10.140 --> 00:26:11.140
You can add a DOM handler.

00:26:11.140 --> 00:26:13.950
You call it widget.addDomHandler
and add

00:26:13.950 --> 00:26:14.880
that handler.

00:26:14.880 --> 00:26:16.910
And it basically takes
one extra argument.

00:26:16.910 --> 00:26:19.560
It take the event type, and as
you can see here, it's just a

00:26:19.560 --> 00:26:20.810
static getter.

00:26:24.470 --> 00:26:28.260
We walked through a few
different HTML5 libraries and

00:26:28.260 --> 00:26:30.140
features, and how do
you them in GWT.

00:26:30.140 --> 00:26:32.390
Now we're going to talk about
how do you handle browsers

00:26:32.390 --> 00:26:33.700
that don't support
these features.

00:26:37.690 --> 00:26:44.470
Unlike most GWT APIs up until
this point, we used to take a

00:26:44.470 --> 00:26:46.540
least common denominator
approach, which basically

00:26:46.540 --> 00:26:48.890
means we would make it
work consistently--

00:26:48.890 --> 00:26:49.620
theoretically--

00:26:49.620 --> 00:26:52.570
consistently across
all browsers.

00:26:52.570 --> 00:26:55.950
With these new HTML5 libraries
doing that, in many cases,

00:26:55.950 --> 00:26:58.110
would be impossible or
very, very difficult

00:26:58.110 --> 00:27:00.570
and a waste of time.

00:27:00.570 --> 00:27:05.210
So what we've done instead is
we've created the APIs and let

00:27:05.210 --> 00:27:07.270
you check if they're
supported.

00:27:07.270 --> 00:27:11.160
And all these libraries have
two static methods.

00:27:11.160 --> 00:27:13.140
Is supported and some variation

00:27:13.140 --> 00:27:15.410
of create if supported.

00:27:15.410 --> 00:27:18.000
And so using those
you can check--

00:27:18.000 --> 00:27:20.700
one returns a bullion, and one
returns the object or null.

00:27:20.700 --> 00:27:23.760
You can fall back to one
of these three recipes.

00:27:23.760 --> 00:27:24.870
Do nothing.

00:27:24.870 --> 00:27:26.100
Disable the feature.

00:27:26.100 --> 00:27:29.540
Or fall back to another
implementation like Flash.

00:27:29.540 --> 00:27:33.680
Or suggest that the user upgrade
to a newer browser.

00:27:33.680 --> 00:27:34.930
Or just tell them to
upgrade to Chrome.

00:27:38.450 --> 00:27:40.260
So here we've created
our canvas.

00:27:40.260 --> 00:27:41.940
We check if our canvas
is null.

00:27:41.940 --> 00:27:44.180
And if it is null, we're
going to create an

00:27:44.180 --> 00:27:45.580
image out of the data.

00:27:45.580 --> 00:27:50.850
So we're assuming here that
there is some image, URL API,

00:27:50.850 --> 00:27:56.330
which would allow us to create
an image URL out of the data.

00:27:56.330 --> 00:27:58.090
What if we want to disable
the feature?

00:27:58.090 --> 00:28:00.200
Well then we set
canvas to null.

00:28:00.200 --> 00:28:02.150
And we return--

00:28:02.150 --> 00:28:03.630
I hope everyone understands
this code.

00:28:03.630 --> 00:28:04.870
It's pretty straightforward.

00:28:04.870 --> 00:28:07.150
More of a design decision
than anything else.

00:28:07.150 --> 00:28:10.120
And finally the upgrade
to a newer browser

00:28:10.120 --> 00:28:11.668
slash Chrome is awesome.

00:28:15.920 --> 00:28:18.400
The last thing I want to
talk about is CSS3.

00:28:18.400 --> 00:28:20.680
I only have one slide on this.

00:28:20.680 --> 00:28:22.720
But it's something to note.

00:28:22.720 --> 00:28:26.420
Up until this point
GWT has used a--

00:28:26.420 --> 00:28:27.590
similar to all the APIs--

00:28:27.590 --> 00:28:30.030
we've used a minimal
set of CSS.

00:28:30.030 --> 00:28:32.020
And something that would be--
we could make it look

00:28:32.020 --> 00:28:34.440
identical across all browsers.

00:28:34.440 --> 00:28:38.870
We sent out a survey to some GWT
users and asked them if we

00:28:38.870 --> 00:28:43.360
should use HTML5 in our latest
theme to clean GWT theme.

00:28:43.360 --> 00:28:44.840
And it was almost unanimous.

00:28:44.840 --> 00:28:47.920
Everyone said use HTML5 in
browsers that support it and

00:28:47.920 --> 00:28:50.680
just have the other browsers
fall back to something else.

00:28:50.680 --> 00:28:53.920
So here you can see where we
used to have just a button, we

00:28:53.920 --> 00:28:56.740
now have buttons with
rounded corners.

00:28:56.740 --> 00:28:59.290
But in older, legacy browsers,
those corners

00:28:59.290 --> 00:29:01.970
will be squared off.

00:29:01.970 --> 00:29:05.920
In going forward, we're going
to leverage CSS3 even more.

00:29:05.920 --> 00:29:06.950
We'll use transitions.

00:29:06.950 --> 00:29:08.620
We'll use the new features.

00:29:08.620 --> 00:29:10.750
And so we'll make sure that
they're usable in all the

00:29:10.750 --> 00:29:13.460
older browsers we support
all the way back IE6.

00:29:13.460 --> 00:29:17.070
But we'll definitely leverage
CSS3 where possible.

00:29:19.820 --> 00:29:21.340
So a recap.

00:29:21.340 --> 00:29:23.820
We talked about local storage,
and how you can use it to

00:29:23.820 --> 00:29:25.190
improve performance.

00:29:25.190 --> 00:29:27.290
Then we talked about using
Canvas to create

00:29:27.290 --> 00:29:29.460
visualizations in GWT.

00:29:29.460 --> 00:29:33.130
We talked about audio
and video.

00:29:33.130 --> 00:29:34.660
I showed you an example
of drag and drop.

00:29:34.660 --> 00:29:37.280
And there are some gotchas that
you need to be aware of.

00:29:37.280 --> 00:29:40.570
And then we did a brief overview
on how CSS3 is going

00:29:40.570 --> 00:29:42.790
to be used in GWT.

00:29:42.790 --> 00:29:44.800
And of course you have
to check for support.

00:29:44.800 --> 00:29:47.400
So if you have any positive
feedback--

00:29:47.400 --> 00:29:49.320
and really, negative feedback
is OK too, but

00:29:49.320 --> 00:29:50.320
I won't read it--

00:29:50.320 --> 00:29:54.150
just go to this link
at the bottom.

00:29:54.150 --> 00:29:59.500
And if you want to try GWT,
you can download GWT--

00:29:59.500 --> 00:30:01.220
the reason I pause every
time I say GWT is

00:30:01.220 --> 00:30:02.680
because we call it gwit.

00:30:02.680 --> 00:30:04.950
And I was told not to do that.

00:30:04.950 --> 00:30:06.700
So I have to think about it.

00:30:06.700 --> 00:30:11.930
Download GWT, but really gwit,
from our homepage.

00:30:11.930 --> 00:30:14.960
One thing to note is that
GWT 2.4 just went

00:30:14.960 --> 00:30:16.680
into beta this week.

00:30:16.680 --> 00:30:19.240
But many of the things I
talked about here were

00:30:19.240 --> 00:30:21.870
introduced in GWT 2.4.

00:30:21.870 --> 00:30:25.560
And the reason for that is
because we thought a lot of it

00:30:25.560 --> 00:30:26.730
was done in 2.3.

00:30:26.730 --> 00:30:28.380
And then we built this demo and
realized there were a lot

00:30:28.380 --> 00:30:29.390
of features to add.

00:30:29.390 --> 00:30:31.300
So if you want to try some
of this stuff out, go

00:30:31.300 --> 00:30:33.150
download GWT 2.4.

00:30:33.150 --> 00:30:35.270
It should be very compatible
with 2.3.

00:30:35.270 --> 00:30:40.080
And try out the code snippets
from this presentation.

00:30:40.080 --> 00:30:44.840
I will mention that if you stay
in this room for another

00:30:44.840 --> 00:30:45.820
apparently 30 minutes--

00:30:45.820 --> 00:30:47.040
I talk kind of fast--

00:30:47.040 --> 00:30:49.700
if you stay in this room, the
next presentation in this room

00:30:49.700 --> 00:30:52.320
is high performance GWT, where
David Chandler is going to

00:30:52.320 --> 00:30:55.730
talk about some really cool
optimizations, really obscure

00:30:55.730 --> 00:30:58.420
things that can have a
significant impact on your

00:30:58.420 --> 00:30:59.420
application.

00:30:59.420 --> 00:31:00.750
And I will be talking--

00:31:00.750 --> 00:31:02.750
I'll have a short snippet
on cell tables so you'll

00:31:02.750 --> 00:31:05.520
definitely want to
stay for that.

00:31:05.520 --> 00:31:06.680
And that's it.

00:31:06.680 --> 00:31:08.250
This presentation went
kind of quick.

00:31:08.250 --> 00:31:10.820
The timer is only
at 28 minutes.

00:31:10.820 --> 00:31:12.730
But if you guys have any
questions, please

00:31:12.730 --> 00:31:13.898
feel free to ask.

00:31:13.898 --> 00:31:15.148
[APPLAUSE]

00:31:22.502 --> 00:31:23.320
JOHN LABANCA: Go ahead.

00:31:23.320 --> 00:31:24.570
[INAUDIBLE]

00:31:30.290 --> 00:31:31.020
JOHN LABANCA: Geolocation?

00:31:31.020 --> 00:31:32.590
[INAUDIBLE]

00:31:32.590 --> 00:31:32.800
JOHN LABANCA: OK.

00:31:32.800 --> 00:31:37.570
So the question was what about
geolocation for HTML5.

00:31:37.570 --> 00:31:40.970
And so far these are the only
HTML5 libraries that we've

00:31:40.970 --> 00:31:42.360
added to GWT.

00:31:42.360 --> 00:31:46.500
But we do plan on to continue
add more in the future.

00:31:46.500 --> 00:31:47.240
Like always--

00:31:47.240 --> 00:31:48.490
[INAUDIBLE]

00:31:50.840 --> 00:31:52.310
JOHN LABANCA: The follow-up
question is what

00:31:52.310 --> 00:31:54.120
about a road map.

00:31:54.120 --> 00:31:56.800
The answer is we generally
don't put out a road map

00:31:56.800 --> 00:32:02.010
because we'd go off road
every two months.

00:32:02.010 --> 00:32:04.460
And if you've ever talked to us,
you can see that we have a

00:32:04.460 --> 00:32:05.830
lot of plans, and then
like three months

00:32:05.830 --> 00:32:06.980
later we switch around.

00:32:06.980 --> 00:32:10.050
The reason for that is we have
to stay pretty dynamic.

00:32:10.050 --> 00:32:13.180
Our things that we're working
on change rapidly.

00:32:13.180 --> 00:32:15.930
But hopefully we'll be able
to get those things in.

00:32:15.930 --> 00:32:20.120
We'll continuously add some
of these APIs and stuff.

00:32:20.120 --> 00:32:20.440
Yes.

00:32:20.440 --> 00:32:23.180
[INAUDIBLE]

00:32:23.180 --> 00:32:23.610
JOHN LABANCA: Say it again.

00:32:23.610 --> 00:32:24.860
[INAUDIBLE]

00:32:27.590 --> 00:32:29.820
JOHN LABANCA: Oh,
can you guys--

00:32:29.820 --> 00:32:30.630
I'll repeat your question.

00:32:30.630 --> 00:32:32.780
But if you have any more
questions, stand at the mic so

00:32:32.780 --> 00:32:36.290
that they can get it on the
audio and the video system.

00:32:36.290 --> 00:32:39.680
But the question is when will
GWT support Web GL.

00:32:39.680 --> 00:32:43.270
And the answer to that
is again same thing.

00:32:43.270 --> 00:32:44.090
We're working on these things.

00:32:44.090 --> 00:32:45.630
I wish I had a better answer.

00:32:45.630 --> 00:32:46.870
But we're working on them.

00:32:46.870 --> 00:32:50.180
The thing with Web GL and like
web sockets and stuff is we

00:32:50.180 --> 00:32:53.210
don't want to introduce APIs
too, too early before they're

00:32:53.210 --> 00:32:58.120
sort of at least usable across
the main browsers.

00:32:58.120 --> 00:33:00.340
So we're not in a huge
rush to add Web GL.

00:33:05.000 --> 00:33:05.650
Go ahead.

00:33:05.650 --> 00:33:05.880
Hi.

00:33:05.880 --> 00:33:10.020
When will you support drag
and drop for cell table?

00:33:10.020 --> 00:33:10.580
JOHN LABANCA: OK.

00:33:10.580 --> 00:33:14.080
So The drag and drop example
in here was actually a cell

00:33:14.080 --> 00:33:14.680
list.

00:33:14.680 --> 00:33:15.590
OK.

00:33:15.590 --> 00:33:18.170
JOHN LABANCA: So there
is a way to do it.

00:33:18.170 --> 00:33:22.760
Basically the cell itself can
say, I want to handle the drag

00:33:22.760 --> 00:33:24.410
start event, and it
will be draggable.

00:33:24.410 --> 00:33:26.550
For cell table it's a
little different.

00:33:26.550 --> 00:33:30.560
And so I will work on that
maybe in Q3 just

00:33:30.560 --> 00:33:31.910
as a proof of concept.

00:33:31.910 --> 00:33:35.980
But I did try that first. And I
got it to the point you can

00:33:35.980 --> 00:33:38.620
play around with it, the cell
can take drag start events.

00:33:38.620 --> 00:33:42.060
And because you can associate
with an ID, I was able to get

00:33:42.060 --> 00:33:43.990
it to the point where you could
drag it into like a

00:33:43.990 --> 00:33:46.250
spreadsheet and drop it into the
spreadsheet, and it would

00:33:46.250 --> 00:33:47.880
copy it over.

00:33:47.880 --> 00:33:51.130
The problem is that doesn't seem
to work on all browsers.

00:33:51.130 --> 00:33:54.310
It seems some browsers I think
their security model sandboxes

00:33:54.310 --> 00:33:55.520
you from doing that.

00:33:55.520 --> 00:33:58.650
And so it's something that we'll
be playing around with

00:33:58.650 --> 00:33:58.990
for a while.

00:33:58.990 --> 00:34:01.270
If it's all internal to the
same cell table, we could

00:34:01.270 --> 00:34:03.270
probably figure out
a way to do it.

00:34:03.270 --> 00:34:04.240
Is that true?

00:34:04.240 --> 00:34:04.760
JOHN LABANCA: Yeah, yeah.

00:34:04.760 --> 00:34:08.310
The cells can sync for
a drive start event.

00:34:08.310 --> 00:34:08.850
Just [INTERPOSING VOICES]

00:34:08.850 --> 00:34:10.110
handlers, and it
should be fine.

00:34:10.110 --> 00:34:11.360
JOHN LABANCA: Yep.

00:34:13.830 --> 00:34:16.944
General question
about geometry.

00:34:16.944 --> 00:34:18.710
I haven't used GWT.

00:34:18.710 --> 00:34:19.805
I have used Java.

00:34:19.805 --> 00:34:24.159
Does it support affine
transform, general 2D rotation

00:34:24.159 --> 00:34:26.350
scaling, that type of class.

00:34:26.350 --> 00:34:29.139
JOHN LABANCA: In CSS3?

00:34:29.139 --> 00:34:33.530
GWT compiles Java into Java
script, so I'm wondering what

00:34:33.530 --> 00:34:35.100
coverage it is has for, for
example, the affine

00:34:35.100 --> 00:34:36.710
transformation class.

00:34:36.710 --> 00:34:41.400
That's 2D rotation, scaling,
skewing, et cetera, arbitrary

00:34:41.400 --> 00:34:43.290
two-dimensional raster
transformations.

00:34:43.290 --> 00:34:45.280
JOHN LABANCA: I'm not familiar--
is this the Web GL,

00:34:45.280 --> 00:34:46.190
or is this the CSS?

00:34:46.190 --> 00:34:48.360
I'm not familiar with
it I guess.

00:34:48.360 --> 00:34:48.909
It's CSS?

00:34:48.909 --> 00:34:52.380
Anything you can do in CSS,
you can do in GWT.

00:34:52.380 --> 00:34:55.070
I mean you still have
CSS files in GWT.

00:34:55.070 --> 00:34:56.560
So you can do transformations.

00:34:56.560 --> 00:35:01.350
You can do rotations of divs
and stuff like that.

00:35:01.350 --> 00:35:03.400
So yeah I mean you can do
all that stuff in GWT.

00:35:03.400 --> 00:35:06.090
We don't have an API around
the stuff that

00:35:06.090 --> 00:35:07.690
you can do in CSS.

00:35:07.690 --> 00:35:10.200
RAY RYAN: Are you asking about
a specific existing Java

00:35:10.200 --> 00:35:11.090
physics library?

00:35:11.090 --> 00:35:13.640
I'm talking about Java
not about CSS.

00:35:13.640 --> 00:35:17.410
RAY RYAN: The general answer is
lots of people have ported

00:35:17.410 --> 00:35:20.250
existing Java libraries of
various kinds for geometries

00:35:20.250 --> 00:35:23.520
and physics to GWT.

00:35:23.520 --> 00:35:24.090
If you look online--

00:35:24.090 --> 00:35:26.070
I don't remember where--
you'll find what the

00:35:26.070 --> 00:35:28.170
limitations of our Java
emulation are.

00:35:28.170 --> 00:35:30.620
But most of the gaming
demonstrations and so on that

00:35:30.620 --> 00:35:32.690
have happened have been because
of importing existing

00:35:32.690 --> 00:35:35.030
Java libraries to GWT without
too much effort.

00:35:35.030 --> 00:35:35.310
OK.

00:35:35.310 --> 00:35:36.810
Thanks.

00:35:36.810 --> 00:35:41.670
JOHN LABANCA: Ray Ryan is our
project leader for everything

00:35:41.670 --> 00:35:44.520
that we work on.

00:35:44.520 --> 00:35:45.570
RAY RYAN: That's not true,
but thank you.

00:35:45.570 --> 00:35:47.240
JOHN LABANCA: OK.

00:35:47.240 --> 00:35:47.840
Something like that.

00:35:47.840 --> 00:35:48.780
I don't get the titles right.

00:35:48.780 --> 00:35:50.360
But OK.

00:35:50.360 --> 00:35:51.350
Anyone-- oh go ahead.

00:35:51.350 --> 00:35:54.030
Real quick question on the audio
files and local storage.

00:35:54.030 --> 00:35:57.530
Is it possible to load those
audio files into local storage

00:35:57.530 --> 00:35:59.920
and then call them from
local storage.

00:35:59.920 --> 00:36:00.530
JOHN LABANCA: That's
a good question.

00:36:00.530 --> 00:36:00.980
I'm not sure.

00:36:00.980 --> 00:36:02.146
Well local--

00:36:02.146 --> 00:36:02.860
[INAUDIBLE]

00:36:02.860 --> 00:36:03.090
JOHN LABANCA: What?

00:36:03.090 --> 00:36:03.810
[INAUDIBLE]

00:36:03.810 --> 00:36:06.480
JOHN LABANCA: Yeah there is
a file API that you use--

00:36:06.480 --> 00:36:08.400
I only learned about the file
API in another session.

00:36:08.400 --> 00:36:11.140
But there is a file API that
you can use to save data.

00:36:11.140 --> 00:36:13.080
One of the problems with local
storage, or one of the

00:36:13.080 --> 00:36:15.390
restraints, is that it's limited
to five megabytes

00:36:15.390 --> 00:36:17.910
unless you install the app
from the Chrome store.

00:36:17.910 --> 00:36:21.430
So you might fill that up kind
of quickly with audio files.

00:36:21.430 --> 00:36:22.980
But look into the file API.

00:36:26.850 --> 00:36:29.690
I have one question on Canvas.

00:36:29.690 --> 00:36:35.530
We use a Canvas library a lot
in GWT even before 2.2.

00:36:35.530 --> 00:36:43.670
At that time I think for IE6
that Canvas use webmail I just

00:36:43.670 --> 00:36:44.500
want to know this.

00:36:44.500 --> 00:36:48.130
I saw you have a new API called

00:36:48.130 --> 00:36:49.810
getCanvas and support it.

00:36:49.810 --> 00:36:54.410
Just wondering for IE6, will
that return now, or it's

00:36:54.410 --> 00:36:57.340
return webmail implementation?

00:36:57.340 --> 00:36:58.440
JOHN LABANCA: We're
not going to--

00:36:58.440 --> 00:37:03.680
so Canvas is only supported
on IE8 and newer versions.

00:37:03.680 --> 00:37:06.620
So we don't support
the SBG versions.

00:37:06.620 --> 00:37:09.550
There was an experimental
project where we create an SBG

00:37:09.550 --> 00:37:11.740
layer on top of Canvas
so you can use SBG--

00:37:11.740 --> 00:37:14.450
or one way or the other-- so you
could use SBG across it.

00:37:14.450 --> 00:37:19.390
But the performance was so bad
on the non-SBG browsers that

00:37:19.390 --> 00:37:21.230
we kind of abandoned it.

00:37:21.230 --> 00:37:23.320
In IE6 you'll have to fall back
to something else like

00:37:23.320 --> 00:37:25.570
Flash or an image.

00:37:25.570 --> 00:37:29.910
Is the drag and drop
support also HTML5?

00:37:29.910 --> 00:37:35.300
And do we go through the same
API to test for support or--

00:37:35.300 --> 00:37:36.540
JOHN LABANCA: The drag
and drop support,

00:37:36.540 --> 00:37:38.610
it's an HTML5 feature.

00:37:38.610 --> 00:37:41.120
And basically what it
is is it's event.

00:37:41.120 --> 00:37:43.790
So you have to set
some attributes.

00:37:43.790 --> 00:37:47.030
But essentially you add a drag
start event to an element so

00:37:47.030 --> 00:37:48.370
you know when it starts
dragging.

00:37:48.370 --> 00:37:49.250
You add a drop event.

00:37:49.250 --> 00:37:51.340
So it's a bunch of events.

00:37:51.340 --> 00:37:55.370
They're in GWT 2.3, but you'll
definitely want--

00:37:55.370 --> 00:37:56.580
drag and drop in particular--

00:37:56.580 --> 00:38:00.980
you'll want to upgrade to GWT
2.4 if you plan to use those a

00:38:00.980 --> 00:38:03.010
lot because the 2.3
had a couple bugs

00:38:03.010 --> 00:38:04.260
that we fixed in 2.4.

00:38:07.580 --> 00:38:09.050
Go ahead.

00:38:09.050 --> 00:38:13.120
Are there any compatibilities
in the jar files for 2.4

00:38:13.120 --> 00:38:16.470
that's not in 2.3 or 2.2?

00:38:16.470 --> 00:38:20.040
I downloaded 2.4 and ran into
some problems with some jar

00:38:20.040 --> 00:38:21.430
files that I imported.

00:38:21.430 --> 00:38:22.840
And I didn't know--

00:38:22.840 --> 00:38:24.110
I went online and looked.

00:38:24.110 --> 00:38:26.800
And they said that there was
some incompatibilities with

00:38:26.800 --> 00:38:28.560
certain jar files with 2.4.

00:38:28.560 --> 00:38:30.200
But they said you guys
were working on it.

00:38:30.200 --> 00:38:31.340
This was online.

00:38:31.340 --> 00:38:34.420
I didn't know if there was still
any resolved issues, or

00:38:34.420 --> 00:38:36.480
you heard of anything
regarding that.

00:38:36.480 --> 00:38:37.950
I don't remember the
exact jar files.

00:38:37.950 --> 00:38:38.640
I wish I could tell you.

00:38:38.640 --> 00:38:41.160
But it was a few weeks
ago, and I forgot.

00:38:41.160 --> 00:38:44.220
But I just wanted to find out.

00:38:44.220 --> 00:38:46.590
JOHN LABANCA: I'm not sure
what the status is.

00:38:46.590 --> 00:38:50.120
It could be a Java
1.6, 1.5 thing.

00:38:50.120 --> 00:38:51.860
I'm not sure what the
status of that is.

00:38:51.860 --> 00:38:52.500
I'll have to find out.

00:38:52.500 --> 00:38:54.580
OK.

00:38:54.580 --> 00:38:57.020
Just a quick question
regarding Canvas.

00:38:57.020 --> 00:38:59.530
So when you resize the browser
window, and you want to resize

00:38:59.530 --> 00:39:03.600
the actual number of pixels on a
canvas, do you actually have

00:39:03.600 --> 00:39:05.240
to redraw all the primitives
in there?

00:39:05.240 --> 00:39:07.610
And is there an efficient
way of caching that?

00:39:07.610 --> 00:39:09.320
Or you actually have to
keep them yourself

00:39:09.320 --> 00:39:13.040
and redraw them all?

00:39:13.040 --> 00:39:14.560
JOHN LABANCA: Well there's a
lot of different options.

00:39:14.560 --> 00:39:18.430
So one is you have to basically
redraw the canvas.

00:39:18.430 --> 00:39:20.720
But it will automatically
scale.

00:39:20.720 --> 00:39:24.640
So if you set your coordinate
space to something large

00:39:24.640 --> 00:39:27.290
enough to handle whatever size
you go to, then when you

00:39:27.290 --> 00:39:28.490
shrink, you'll scale down.

00:39:28.490 --> 00:39:30.170
And when you expand,
it will scale up.

00:39:30.170 --> 00:39:33.150
The only problem with that is
if you're refreshing your

00:39:33.150 --> 00:39:35.650
canvas, and it's usually pretty
small, then you're

00:39:35.650 --> 00:39:38.230
going to get lower performance
because you're drawing like

00:39:38.230 --> 00:39:42.210
1000 pixel coordinate space
into a 300 pixel canvas.

00:39:42.210 --> 00:39:45.920
But if you're just drawing it
once, or you only draw it and

00:39:45.920 --> 00:39:48.390
refresh it very infrequently,
then it's probably safe to

00:39:48.390 --> 00:39:49.640
just use a larger canvas.

00:39:52.110 --> 00:39:53.250
All right.

00:39:53.250 --> 00:39:55.780
Any other questions?

00:39:55.780 --> 00:39:58.050
Well thank all of you for coming
and staying until the

00:39:58.050 --> 00:39:59.520
end of the questions.

