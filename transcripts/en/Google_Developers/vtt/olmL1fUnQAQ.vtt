WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.198
[MUSIC PLAYING]

00:00:09.880 --> 00:00:10.704
Hello, everyone.

00:00:10.704 --> 00:00:12.120
I'm Wouter van
Oortmerssen and I'm

00:00:12.120 --> 00:00:15.640
part of Fun Propulsion
Labs at Google.

00:00:15.640 --> 00:00:17.890
So what we do is we
create libraries and tools

00:00:17.890 --> 00:00:19.960
to try and improve
game development

00:00:19.960 --> 00:00:21.660
on Android and beyond.

00:00:21.660 --> 00:00:24.734
One such library is FlatBuffers.

00:00:24.734 --> 00:00:26.150
So FlatBuffers is
a library that's

00:00:26.150 --> 00:00:29.840
going to make your game load
faster and use less memory.

00:00:29.840 --> 00:00:34.010
Because ask yourself, how much
time is your game spending

00:00:34.010 --> 00:00:35.940
loading data?

00:00:35.940 --> 00:00:38.270
Loading data can be expensive
because usually game

00:00:38.270 --> 00:00:42.970
data is represented differently
on disk than it is in memory.

00:00:42.970 --> 00:00:44.690
It might be compressed
to save space

00:00:44.690 --> 00:00:49.830
or it might be stored as text
so that humans can edit it.

00:00:49.830 --> 00:00:53.540
So the process of
converting between the two

00:00:53.540 --> 00:00:55.580
is what we call serialization.

00:00:55.580 --> 00:00:58.220
Now serialization
is kind of cool,

00:00:58.220 --> 00:01:00.860
because data and
memory can focus

00:01:00.860 --> 00:01:02.450
on what it's good
at, which means

00:01:02.450 --> 00:01:04.307
being fast and easy to modify.

00:01:04.307 --> 00:01:05.890
Meanwhile, data on
disk can also focus

00:01:05.890 --> 00:01:07.850
what it's good
at, being compact,

00:01:07.850 --> 00:01:11.260
machine-independent, and being
forwards, backwards compatible.

00:01:11.260 --> 00:01:15.150
But serialization also kind of
sucks, because all this packing

00:01:15.150 --> 00:01:17.630
and unpacking takes time.

00:01:17.630 --> 00:01:19.120
It uses additional
memory, since we

00:01:19.120 --> 00:01:22.730
have to unpack this
serialized data into objects

00:01:22.730 --> 00:01:27.560
and format changes can
be quite error-prone.

00:01:27.560 --> 00:01:30.430
So in games, in particular,
use a lot, as you know.

00:01:30.430 --> 00:01:32.220
Is there a way we can fix this?

00:01:32.220 --> 00:01:34.390
Well, this all comes
from the assumption

00:01:34.390 --> 00:01:37.260
that memory and disk must be
inherently incompatible ways

00:01:37.260 --> 00:01:38.260
of storing things.

00:01:38.260 --> 00:01:39.970
But what if we try anyway?

00:01:39.970 --> 00:01:44.240
Well, then you get FlatBuffers.

00:01:44.240 --> 00:01:48.706
So what FlatBuffers really is
is a portable binding format

00:01:48.706 --> 00:01:50.330
that allows you to
store things on disk

00:01:50.330 --> 00:01:52.270
the same as in
memory, meaning you

00:01:52.270 --> 00:01:55.520
can move from one to the
other without any conversion.

00:01:55.520 --> 00:01:57.600
It works well on disks
because it has fixed rules

00:01:57.600 --> 00:02:01.195
for data sizes, alignment, an
[? and additional ?] platforms.

00:02:01.195 --> 00:02:03.320
It deals with forwards and
backwards compatibility,

00:02:03.320 --> 00:02:05.980
which means you can add
and remove fields at will.

00:02:05.980 --> 00:02:07.680
It also works well on memory.

00:02:07.680 --> 00:02:10.560
Everything is reachable through
offset, so it's very fast.

00:02:10.560 --> 00:02:13.070
It works from read-only
media, which is very cool.

00:02:13.070 --> 00:02:15.450
And it's more compact
and cache-friendly

00:02:15.450 --> 00:02:17.005
than separately
allocated objects.

00:02:21.110 --> 00:02:23.850
So at this point, I can
tell you're all convinced

00:02:23.850 --> 00:02:25.980
and you just want
to use FlatBuffers.

00:02:25.980 --> 00:02:27.040
So how do you do that?

00:02:27.040 --> 00:02:31.760
Well, first you write a schema.

00:02:31.760 --> 00:02:34.985
Then you give this schema
to our friendly compiler

00:02:34.985 --> 00:02:37.490
and we'll generate code for
you in your favorite language--

00:02:37.490 --> 00:02:42.090
assuming your favorite
language is one of these four.

00:02:42.090 --> 00:02:46.126
Then you load up this
generated code in your game.

00:02:46.126 --> 00:02:47.750
And you read and
write FlatBuffer data.

00:02:47.750 --> 00:02:51.220
So a schema's pretty
important for efficiency.

00:02:51.220 --> 00:02:53.010
And it also allows you
at access your data

00:02:53.010 --> 00:02:54.660
without error checking.

00:02:54.660 --> 00:02:56.380
And schemas can be
changed without having

00:02:56.380 --> 00:02:58.000
to regenerate all your data.

00:02:58.000 --> 00:03:00.480
So for example, you
can update your game,

00:03:00.480 --> 00:03:03.170
and all your old saved
games still work.

00:03:03.170 --> 00:03:04.930
So what can you stick
in a FlatBuffer?

00:03:04.930 --> 00:03:07.670
There is the usual
suspects over here.

00:03:07.670 --> 00:03:11.090
Then, to support forwards
and backwards compatibility,

00:03:11.090 --> 00:03:14.475
we have tables where fields can
be added and removed at will.

00:03:14.475 --> 00:03:16.380
And this goes through
an indirection

00:03:16.380 --> 00:03:17.350
called a virtual table.

00:03:21.710 --> 00:03:23.060
Then we also have structs.

00:03:23.060 --> 00:03:25.500
If you want the
maximum efficiency

00:03:25.500 --> 00:03:27.390
these don't support
format evolution,

00:03:27.390 --> 00:03:29.890
but they're the fastest
way to store data.

00:03:29.890 --> 00:03:33.360
And finally, we have enums,
unions, and other cool things.

00:03:33.360 --> 00:03:36.892
So let's have a look at how to
implement [? on the hood. ?]

00:03:36.892 --> 00:03:38.850
So this is what an object
looks like in memory.

00:03:38.850 --> 00:03:41.800
It starts off with an offset
to a virtual table, which

00:03:41.800 --> 00:03:44.200
contains the offsets
to the actual fields.

00:03:44.200 --> 00:03:47.230
Now, these virtual tables are
shared between similar objects

00:03:47.230 --> 00:03:49.670
so they're actually
not that expensive.

00:03:49.670 --> 00:03:51.840
Then what follows is
the actual fields all

00:03:51.840 --> 00:03:54.020
in line, including the structs.

00:03:54.020 --> 00:03:57.590
And then finally, if you have
a reference to bigger data,

00:03:57.590 --> 00:03:59.460
that goes through an
offset indirection.

00:04:02.510 --> 00:04:05.870
So let's look at some C++ code
of how you would use this.

00:04:05.870 --> 00:04:09.230
You'd first get a pointer
to your root object.

00:04:09.230 --> 00:04:12.052
Then you would use
field accessors

00:04:12.052 --> 00:04:13.260
to actually look at the data.

00:04:13.260 --> 00:04:16.190
And these hide all the
offset lookups for you.

00:04:16.190 --> 00:04:17.620
So very convenient.

00:04:17.620 --> 00:04:20.720
Creation using a FlatBuffer
builder helper class.

00:04:20.720 --> 00:04:23.400
And then you call
these create functions,

00:04:23.400 --> 00:04:27.270
which will create objects
inside that buffer for you.

00:04:27.270 --> 00:04:30.570
So I know this all
sounds incredibly fast,

00:04:30.570 --> 00:04:32.630
but how fast is it really?

00:04:32.630 --> 00:04:35.270
So let's compare against some
popular other serialization

00:04:35.270 --> 00:04:36.370
solutions.

00:04:36.370 --> 00:04:39.040
And, of course, you
should take benchmarks

00:04:39.040 --> 00:04:39.960
with a grain of salt.

00:04:39.960 --> 00:04:43.140
But I still think you'll
find these interesting.

00:04:43.140 --> 00:04:46.040
So if you're going
to read a FlatBuffer,

00:04:46.040 --> 00:04:50.220
then you'll find it's
over 1,000 times faster

00:04:50.220 --> 00:04:51.264
than other solutions.

00:04:51.264 --> 00:04:53.680
And this is, of course, because
we're not actually parsing

00:04:53.680 --> 00:04:55.890
or allocating anything.

00:04:55.890 --> 00:04:58.520
Writing a FlatBuffer is
still about 100 times faster.

00:04:58.520 --> 00:05:00.350
It's still pretty good.

00:05:00.350 --> 00:05:02.875
Then we're not actually
allocating any objects

00:05:02.875 --> 00:05:05.800
when we're reading,
so that is great.

00:05:05.800 --> 00:05:09.820
And finally, the code
is also really small,

00:05:09.820 --> 00:05:12.297
both to generate a code
and a library code.

00:05:12.297 --> 00:05:14.380
At this point though, you
might say, I don't care.

00:05:14.380 --> 00:05:15.940
I'm still going to use
text because it's easier

00:05:15.940 --> 00:05:16.650
to work with.

00:05:16.650 --> 00:05:18.070
Well guess what?

00:05:18.070 --> 00:05:21.550
FlatBuffers also supports
JSON out of the box.

00:05:21.550 --> 00:05:24.100
So that means you can
convert to binary format

00:05:24.100 --> 00:05:27.260
either on the fly in your
game or as a pre-process

00:05:27.260 --> 00:05:29.490
with our command line tool.

00:05:29.490 --> 00:05:31.650
And that's everything I've got.

00:05:31.650 --> 00:05:35.184
Come find us online or
come talk to me at GDC.

00:05:35.184 --> 00:05:37.152
Thank you.

00:05:37.152 --> 00:05:40.560
[MUSIC PLAYING]

