WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.670
GABE COHEN: Hi, everybody.

00:00:01.670 --> 00:00:03.590
Welcome to the
Android Fireside Chat.

00:00:03.590 --> 00:00:04.370
Thank you.

00:00:04.370 --> 00:00:05.328
[CHEERING AND APPLAUSE]

00:00:05.328 --> 00:00:07.257
Thank you.

00:00:07.257 --> 00:00:07.756
Yeah!

00:00:07.756 --> 00:00:09.528
[APPLAUSE]

00:00:10.420 --> 00:00:12.080
I'm already feeling
so good about this.

00:00:12.080 --> 00:00:13.710
You have no idea.

00:00:13.710 --> 00:00:15.890
So just real quickly,
the goal here

00:00:15.890 --> 00:00:20.440
is to ask questions from
people who know a lot.

00:00:20.440 --> 00:00:23.080
To get us started, I'm going to
have them introduce themselves

00:00:23.080 --> 00:00:25.413
so you know what kinds of
stuff the people on this stage

00:00:25.413 --> 00:00:28.010
represent, so you can ask
questions that are pertinent

00:00:28.010 --> 00:00:30.439
or loaded or inappropriate.

00:00:30.439 --> 00:00:31.980
Tor, maybe you can
introduce yourself

00:00:31.980 --> 00:00:32.900
and we can go down the line.

00:00:32.900 --> 00:00:34.040
TOR NORBYE: All right.

00:00:34.040 --> 00:00:35.390
Hello, I'm Tor Norbye.

00:00:35.390 --> 00:00:37.730
I work on Android Studio.

00:00:37.730 --> 00:00:39.434
[CHEERING]

00:00:42.202 --> 00:00:43.410
ADAM POWELL: I'm Adam Powell.

00:00:43.410 --> 00:00:46.087
I work on the Android
Framework and UI Toolkit team.

00:00:46.087 --> 00:00:47.955
[APPLAUSE]

00:00:49.205 --> 00:00:50.205
RACHEL GARB: I'm Rachel.

00:00:50.205 --> 00:00:52.522
I work on User Experience.

00:00:52.522 --> 00:00:54.330
[APPLAUSE]

00:00:55.350 --> 00:00:56.600
MALE SPEAKER: I'm [INAUDIBLE].

00:00:56.600 --> 00:00:59.105
I work on the
[INAUDIBLE] Manager.

00:00:59.105 --> 00:01:00.965
[APPLAUSE]

00:01:02.894 --> 00:01:04.019
DAVE BURKE: I'm Dave Burke.

00:01:04.019 --> 00:01:05.660
I approve expense
reports for Android.

00:01:05.660 --> 00:01:07.556
[LAUGHTER AND APPLAUSE]

00:01:09.154 --> 00:01:10.320
DIANNE HACKBORN: I'm Dianne.

00:01:10.320 --> 00:01:11.653
I work on the Android framework.

00:01:11.653 --> 00:01:13.460
[APPLAUSE]

00:01:14.139 --> 00:01:15.180
MALE SPEAKER: I'm Rashad.

00:01:15.180 --> 00:01:16.781
I work on Android Media.

00:01:16.781 --> 00:01:18.740
[APPLAUSE]

00:01:18.920 --> 00:01:19.420
BRIAN: Hi.

00:01:19.420 --> 00:01:20.336
I'm Brian [INAUDIBLE].

00:01:20.336 --> 00:01:22.940
I work on Java and C++
run times, libraries,

00:01:22.940 --> 00:01:24.030
and compilers.

00:01:24.030 --> 00:01:25.990
[APPLAUSE]

00:01:26.592 --> 00:01:27.800
DAN SANDLER: I'm Dan Sandler.

00:01:27.800 --> 00:01:30.372
I'm on the system
UI engineering team.

00:01:30.372 --> 00:01:32.220
[APPLAUSE]

00:01:33.494 --> 00:01:34.910
GABE COHEN: All
right, and I don't

00:01:34.910 --> 00:01:35.740
think I introduced myself.

00:01:35.740 --> 00:01:36.370
I'm Gabe.

00:01:36.370 --> 00:01:38.100
I'm a product manager
on the Android Platform,

00:01:38.100 --> 00:01:40.310
and this is pretty awesome
because I reprise my day job

00:01:40.310 --> 00:01:42.435
of basically just passing
questions to other people

00:01:42.435 --> 00:01:44.280
and then walking away.

00:01:44.280 --> 00:01:47.210
So the goal is to ask
these people questions.

00:01:47.210 --> 00:01:47.990
We have mics.

00:01:47.990 --> 00:01:51.620
We have one, two, three,
four mics in the aisle.

00:01:51.620 --> 00:01:53.350
All we're doing is
asking questions.

00:01:53.350 --> 00:01:56.467
If you have questions about N,
about Multi-Window or Runtime

00:01:56.467 --> 00:01:58.800
changes or [? Jitter, ?] or--
yes, people are lining up.

00:01:58.800 --> 00:02:01.850
You win by lining up first.

00:02:01.850 --> 00:02:03.640
AUDIENCE: I'm [INAUDIBLE]
from Hong Kong.

00:02:03.640 --> 00:02:06.620
In some European
countries there are

00:02:06.620 --> 00:02:09.729
many Android device have
been compatibility issue.

00:02:09.729 --> 00:02:13.450
Most likely they are set up
also for the TV or mobile phone,

00:02:13.450 --> 00:02:15.090
like Xiaomi.

00:02:15.090 --> 00:02:17.280
Some of them do not
have Google Pay services

00:02:17.280 --> 00:02:19.190
or Google framework inside it.

00:02:19.190 --> 00:02:22.630
So is the Android team
doing something against this

00:02:22.630 --> 00:02:25.200
to happen or is
there anything you

00:02:25.200 --> 00:02:30.515
could say about these
changes on Android ecosystem?

00:02:37.110 --> 00:02:38.260
DAVE BURKE: Ah, let's see.

00:02:38.260 --> 00:02:41.470
Let me answer the question
like Hillary Clinton would do,

00:02:41.470 --> 00:02:43.450
which is not answer
the question.

00:02:43.450 --> 00:02:45.740
So, I mean, we spend a
lot of effort on our CTS,

00:02:45.740 --> 00:02:47.980
our Compatibility Test Suite.

00:02:47.980 --> 00:02:50.730
So, you know, literally
hundreds of thousands of tests.

00:02:50.730 --> 00:02:52.140
And the whole reason we
do that is to make sure

00:02:52.140 --> 00:02:53.630
that we have a
level playing field

00:02:53.630 --> 00:02:56.700
so when you're writing your
app it'll run everywhere.

00:02:56.700 --> 00:02:58.592
So, if anything,
we're making it harder

00:02:58.592 --> 00:02:59.800
to build a compatible device.

00:02:59.800 --> 00:03:03.040
But that's a good thing
for app developers.

00:03:03.040 --> 00:03:06.710
And, yeah, I mean, I think
it's up to every manufacturer.

00:03:06.710 --> 00:03:09.240
Like Xiaomi, they just
have a demo outside

00:03:09.240 --> 00:03:10.270
of an Android TV device.

00:03:10.270 --> 00:03:12.022
It's fully compatible
Android device,

00:03:12.022 --> 00:03:13.480
so I think that's
one of the things

00:03:13.480 --> 00:03:15.710
not everyone realizes is
that Xiaomi Android devices

00:03:15.710 --> 00:03:18.832
outside of China are
actually compatible.

00:03:18.832 --> 00:03:21.290
And then, you know, we have a
whole big partner engineering

00:03:21.290 --> 00:03:23.680
team that works with
all of the device makers

00:03:23.680 --> 00:03:26.964
to help them actually
build compatible devices.

00:03:26.964 --> 00:03:28.880
So, yes, we had lots of
tests, but we actually

00:03:28.880 --> 00:03:31.390
try to help them.

00:03:31.390 --> 00:03:31.890
Yeah.

00:03:31.890 --> 00:03:32.200
GABE COHEN: Yeah.

00:03:32.200 --> 00:03:33.910
And just to add to
that, I mean, we also

00:03:33.910 --> 00:03:36.160
work with folks who are
upstream of the device makers.

00:03:36.160 --> 00:03:38.550
So, you know, folks like
Mediatech, et cetera, that are,

00:03:38.550 --> 00:03:40.740
you know, maybe
building the [? SECs ?]

00:03:40.740 --> 00:03:43.112
that are in the majority
of those phones.

00:03:43.112 --> 00:03:44.570
You know, the image
that they build

00:03:44.570 --> 00:03:46.730
is broadly used by
people, so, you know,

00:03:46.730 --> 00:03:48.230
if we drive
compatibility with them,

00:03:48.230 --> 00:03:49.771
we get sort of broad
device coverage.

00:03:49.771 --> 00:03:52.850
But we definitely see, you
know, that it's a pain point.

00:03:52.850 --> 00:03:55.074
So we're trying to
figure out, you know,

00:03:55.074 --> 00:03:57.490
how we can better support those
manufacturers and upstream

00:03:57.490 --> 00:03:58.573
from them the chip makers.

00:03:58.573 --> 00:04:00.750
But it's a good question.

00:04:00.750 --> 00:04:03.350
Maybe over here in the middle.

00:04:03.350 --> 00:04:07.509
AUDIENCE: So I know it's not--
speaking of things that you're

00:04:07.509 --> 00:04:09.550
going to release in the
future is kind of a thing

00:04:09.550 --> 00:04:12.430
that Google doesn't
do, especially at I/Os.

00:04:12.430 --> 00:04:15.630
However, this release is
probably the most forthcoming

00:04:15.630 --> 00:04:17.740
in terms of what
we're going to see,

00:04:17.740 --> 00:04:19.880
and with the Java
8 support that's

00:04:19.880 --> 00:04:23.240
being added to the
runtime side, there's,

00:04:23.240 --> 00:04:25.240
like, functions and streams
that's in there now.

00:04:25.240 --> 00:04:26.906
I'm curious if we're
going to get things

00:04:26.906 --> 00:04:31.220
like java.lang.invoke, java.time
to basically fill out--

00:04:31.220 --> 00:04:34.519
complete, essentially,
the Java 8 APIs.

00:04:34.519 --> 00:04:35.060
BRIAN: Right.

00:04:35.060 --> 00:04:37.740
So I'm Brian from the Java team.

00:04:37.740 --> 00:04:41.350
We really don't obviously make
forward-looking statements,

00:04:41.350 --> 00:04:44.980
but java.time is definitely
something we're looking at.

00:04:44.980 --> 00:04:46.199
The function stuff is there.

00:04:46.199 --> 00:04:47.990
Some of the invoke
things are still coming.

00:04:47.990 --> 00:04:51.120
But it's really we want to hear
from you guys about what is

00:04:51.120 --> 00:04:53.120
important, and that's--
I encourage you to come.

00:04:53.120 --> 00:04:54.765
Tomorrow we have
another Office Hours

00:04:54.765 --> 00:04:56.390
for the Android
Runtime and Tools team.

00:04:56.390 --> 00:04:57.470
We'd really like to
hear from developers

00:04:57.470 --> 00:04:58.511
what's important to them.

00:04:58.511 --> 00:05:00.700
We did sort of what we
had heard preliminarily

00:05:00.700 --> 00:05:03.204
about what was the most
important things for Java 8.

00:05:03.204 --> 00:05:04.870
Streams was one of
the important things.

00:05:04.870 --> 00:05:06.200
Functional interface,
things like that.

00:05:06.200 --> 00:05:07.720
Repeatable, repeatable
annotations.

00:05:07.720 --> 00:05:09.290
But definitely
want to hear more.

00:05:09.290 --> 00:05:11.206
Time is definitely
something we're looking at,

00:05:11.206 --> 00:05:13.600
but it's just still
for the future.

00:05:13.600 --> 00:05:14.542
AUDIENCE: Likes.

00:05:14.542 --> 00:05:15.250
GABE COHEN: Cool.

00:05:15.250 --> 00:05:16.875
Maybe over here on
the right, my right.

00:05:16.875 --> 00:05:18.250
AUDIENCE: All right.

00:05:18.250 --> 00:05:19.520
Hi, my name's [INAUDIBLE].

00:05:19.520 --> 00:05:21.920
And a lot of framers
went recently

00:05:21.920 --> 00:05:24.710
about Android going
to be transformed

00:05:24.710 --> 00:05:26.490
into Swift and so on.

00:05:26.490 --> 00:05:29.200
For me it doesn't make much
sense because if it's about

00:05:29.200 --> 00:05:32.440
the [? low ?] [? thingy ?] then
going from Oracle to Apple,

00:05:32.440 --> 00:05:33.280
it's a big old mess.

00:05:33.280 --> 00:05:34.470
But this is not my question.

00:05:34.470 --> 00:05:37.850
My question is a lot
of offline [INAUDIBLE]

00:05:37.850 --> 00:05:44.270
and progressive web apps have
been, like, raised recently.

00:05:44.270 --> 00:05:46.200
And my question is,
what do you think?

00:05:46.200 --> 00:05:49.820
Is it going to take over the
Android development model

00:05:49.820 --> 00:05:53.140
and, like, in the near
future, in the next two

00:05:53.140 --> 00:05:56.635
years or something, we are going
to see only offline first apps

00:05:56.635 --> 00:05:57.760
on our Android phones?

00:06:00.376 --> 00:06:02.500
GABE COHEN: I'm not sure
I understood the question.

00:06:02.500 --> 00:06:05.440
So is what going to take
over Android development?

00:06:05.440 --> 00:06:08.590
AUDIENCE: So are we, in the
next two years or something,

00:06:08.590 --> 00:06:11.280
are we going to see
offline first apps running

00:06:11.280 --> 00:06:14.820
on the platform
instead of normal apps?

00:06:14.820 --> 00:06:18.330
No longer developing using Java?

00:06:18.330 --> 00:06:19.675
GABE COHEN: Offline first?

00:06:19.675 --> 00:06:22.680
I'm not sure what
offline first means.

00:06:22.680 --> 00:06:25.490
Android, historically,
has been designed

00:06:25.490 --> 00:06:28.199
to have apps that work
without connectivity.

00:06:28.199 --> 00:06:30.490
AUDIENCE: Well, here I'm not
talking about native apps.

00:06:30.490 --> 00:06:32.830
I'm talking about web
apps that are designed

00:06:32.830 --> 00:06:34.393
with offline first concert.

00:06:34.393 --> 00:06:36.722
GABE COHEN: Web apps,
is that-- oh, web apps.

00:06:36.722 --> 00:06:37.305
AUDIENCE: Yes.

00:06:37.305 --> 00:06:38.040
GABE COHEN: Yeah, I don't know.

00:06:38.040 --> 00:06:39.780
AUDIENCE: So a lot
of apps has been

00:06:39.780 --> 00:06:44.500
featured in other [INAUDIBLE]
talking about creating an app

00:06:44.500 --> 00:06:47.910
and then push a button to
make it on the home screen

00:06:47.910 --> 00:06:50.695
and then launch the app and it
works completely offline when

00:06:50.695 --> 00:06:51.820
you don't have an internet.

00:06:51.820 --> 00:06:55.094
So it feels like native app,
but it's running on [INAUDIBLE].

00:06:55.094 --> 00:06:57.010
DIANNE HACKBORN: I would
say I'm not currently

00:06:57.010 --> 00:06:58.690
looking for another
job, so I'm not

00:06:58.690 --> 00:07:00.815
kind of anticipating that
in the next couple years.

00:07:00.815 --> 00:07:02.581
[LAUGHTER]

00:07:08.048 --> 00:07:10.036
[APPLAUSE]

00:07:12.040 --> 00:07:14.764
DAVE BURKE: I mean, to
answer your question,

00:07:14.764 --> 00:07:16.930
like, we're interested in
pushing technology forward

00:07:16.930 --> 00:07:17.890
on all directions.

00:07:17.890 --> 00:07:20.290
Like, so the progressive web
app stuff is pretty cool.

00:07:20.290 --> 00:07:22.510
You've probably
seen the Amp stuff,

00:07:22.510 --> 00:07:25.560
so you get really
fast news articles.

00:07:25.560 --> 00:07:27.240
We also have, like,
Android Instant Apps

00:07:27.240 --> 00:07:30.880
which is a completely new area
that's somewhere in between.

00:07:30.880 --> 00:07:35.610
And we're obviously always
involving our core app

00:07:35.610 --> 00:07:36.910
framework.

00:07:36.910 --> 00:07:38.830
So, you know, for
us it's like we just

00:07:38.830 --> 00:07:41.732
want to give people
choice and options

00:07:41.732 --> 00:07:43.440
and we're going to
push them all forward.

00:07:43.440 --> 00:07:45.050
And we don't always
know the answers.

00:07:45.050 --> 00:07:46.440
It's like, you
know, we build stuff

00:07:46.440 --> 00:07:48.815
and then you guys build amazing
things on top that and we

00:07:48.815 --> 00:07:50.252
learn and we reiterate.

00:07:50.252 --> 00:07:51.540
GABE COHEN: Cool, thanks.

00:07:51.540 --> 00:07:53.040
How about on the left over here?

00:07:53.040 --> 00:07:55.000
We haven't gone
to that line yet.

00:07:55.000 --> 00:07:55.500
Yes?

00:07:55.500 --> 00:07:57.475
AUDIENCE: Hi.

00:07:57.475 --> 00:08:00.560
So I guess this one is for Dave.

00:08:00.560 --> 00:08:05.190
Last fall you announced
the Pixel C tablet.

00:08:05.190 --> 00:08:09.160
When we will see
the Pixel phone?

00:08:09.160 --> 00:08:11.780
DAVE BURKE: Did I announce the
tablet or did someone else?

00:08:11.780 --> 00:08:12.742
I can't remember.

00:08:12.742 --> 00:08:14.450
GABE COHEN: He announces
a lot of things.

00:08:14.450 --> 00:08:15.632
He can't be expected
to keep them straight.

00:08:15.632 --> 00:08:16.395
AUDIENCE: Google [INAUDIBLE].

00:08:16.395 --> 00:08:18.436
DAVE BURKE: I think I
technically didn't announce

00:08:18.436 --> 00:08:19.881
the-- I think that was Andrew.

00:08:19.881 --> 00:08:21.070
I was there.

00:08:21.070 --> 00:08:25.850
I definitely was,
like, a witness.

00:08:25.850 --> 00:08:26.700
A Pixel phone?

00:08:26.700 --> 00:08:29.860
GABE COHEN: I think it's too big
to use as a phone, personally.

00:08:29.860 --> 00:08:34.138
So, I mean, you can try.

00:08:34.138 --> 00:08:34.866
[LAUGHTER]

00:08:34.866 --> 00:08:36.199
DAVE BURKE: But it's pretty big.

00:08:36.199 --> 00:08:38.214
If you take the keyboard off
it might be a bit closer.

00:08:38.214 --> 00:08:39.299
GABE COHEN: Oh, yeah.

00:08:39.299 --> 00:08:40.250
DAVE BURKE: Yeah.

00:08:40.250 --> 00:08:41.715
That sounds like a great idea.

00:08:41.715 --> 00:08:43.615
[LAUGHTER]

00:08:45.040 --> 00:08:46.850
GABE COHEN: Back to this line.

00:08:46.850 --> 00:08:49.520
AUDIENCE: So I'll ask the
question he kind of asked.

00:08:49.520 --> 00:08:52.695
When are you guys releasing
first class Swift support?

00:08:54.840 --> 00:08:55.590
DAVE BURKE: Swift.

00:08:58.302 --> 00:08:59.760
GABE COHEN: You
know, the pop star.

00:08:59.760 --> 00:09:01.330
DAVE BURKE: Actually,
how-- this is

00:09:01.330 --> 00:09:02.746
really dangerous--
how many people

00:09:02.746 --> 00:09:05.800
would like Swift in Android?

00:09:05.800 --> 00:09:06.720
Yeah, fail.

00:09:06.720 --> 00:09:07.720
OK, so we won't do that.

00:09:07.720 --> 00:09:09.548
[LAUGHTER]

00:09:11.129 --> 00:09:11.920
You know, I think--

00:09:11.920 --> 00:09:12.710
GABE COHEN: Who won the pool
on [INAUDIBLE] that question?

00:09:12.710 --> 00:09:13.540
DAVE BURKE: --Swift's
a pretty cool language.

00:09:13.540 --> 00:09:15.970
I think Apple-- I
mean, that obviously

00:09:15.970 --> 00:09:18.350
is based on a-- Coco's
based on Objective C,

00:09:18.350 --> 00:09:20.830
which is based on C,
which is 40 years old,

00:09:20.830 --> 00:09:22.440
and a pretty old language.

00:09:22.440 --> 00:09:25.235
Autorelease Pool gets you
so far, and so, you know,

00:09:25.235 --> 00:09:28.200
they really needed a sort
of more modern language.

00:09:28.200 --> 00:09:31.780
Obviously, you know,
in history, you know,

00:09:31.780 --> 00:09:34.110
it's sort of like Java's
somewhere in between Swift

00:09:34.110 --> 00:09:39.620
and C. But I think other
platforms needed it more than,

00:09:39.620 --> 00:09:41.249
say, Android does.

00:09:41.249 --> 00:09:42.790
Also, there's some
pretty nice Java 8

00:09:42.790 --> 00:09:44.920
stuff with, like,
lambdas and streams

00:09:44.920 --> 00:09:46.980
that were already mentioned.

00:09:46.980 --> 00:09:48.664
But, yeah, no immediate plans.

00:09:48.664 --> 00:09:50.330
I don't know where
that rumor came from.

00:09:50.330 --> 00:09:53.675
It was kind of an
interesting rumor.

00:09:53.675 --> 00:09:54.605
GABE COHEN: Cool.

00:09:54.605 --> 00:09:56.270
How about here?

00:09:56.270 --> 00:09:59.030
AUDIENCE: Hey, guys.
[INAUDIBLE], Ars Technica.

00:09:59.030 --> 00:10:01.250
DAVE BURKE: Here's trouble.

00:10:01.250 --> 00:10:03.780
AUDIENCE: My question is what's
the deal with the Maserati?

00:10:03.780 --> 00:10:06.340
You guys have a car over
in the Android auto section

00:10:06.340 --> 00:10:09.270
that's running Android
on the car as, like,

00:10:09.270 --> 00:10:10.570
the main operating system.

00:10:10.570 --> 00:10:12.850
It has, like, a nice
material design center

00:10:12.850 --> 00:10:13.912
console and stuff.

00:10:13.912 --> 00:10:16.120
There wasn't a blog post or
announcement or anything,

00:10:16.120 --> 00:10:17.004
so what's the deal?

00:10:17.004 --> 00:10:19.170
GABE COHEN: And I think
your question is when are we

00:10:19.170 --> 00:10:20.980
going to get a Maserati phone?

00:10:20.980 --> 00:10:22.360
[LAUGHTER]

00:10:22.360 --> 00:10:22.860
No?

00:10:22.860 --> 00:10:24.276
ADAM POWELL: No,
I think he missed

00:10:24.276 --> 00:10:26.636
where to put his name in
for the drawing to win it.

00:10:26.636 --> 00:10:28.452
[LAUGHTER]

00:10:28.951 --> 00:10:32.296
GABE COHEN: I have no idea where
the Maserati thing came from.

00:10:32.296 --> 00:10:34.170
DAVE BURKE: I think
Patrick got the Maserati.

00:10:34.170 --> 00:10:34.690
It's really nice.

00:10:34.690 --> 00:10:35.189
I saw it.

00:10:35.189 --> 00:10:38.480
A really nice red Mas-- I
think it's a Quattroporte.

00:10:38.480 --> 00:10:40.190
I think Patrick, who
runs Android Auto,

00:10:40.190 --> 00:10:42.464
wanted to bring the car
and put it on stage,

00:10:42.464 --> 00:10:43.630
but Sundar wouldn't let him.

00:10:43.630 --> 00:10:45.550
That's a true story.

00:10:45.550 --> 00:10:46.980
And so I don't know.

00:10:46.980 --> 00:10:48.710
I guess we should
talk about it more.

00:10:48.710 --> 00:10:49.960
But it's pretty cool, I agree.

00:10:49.960 --> 00:10:52.558
If you guys haven't seen
it, you should check it out.

00:10:52.558 --> 00:10:55.550
AUDIENCE: Well, are we
going to see Android on cars

00:10:55.550 --> 00:10:56.814
now from you guys?

00:10:56.814 --> 00:10:58.730
DAVE BURKE: I mean, a
lot of car manufacturers

00:10:58.730 --> 00:11:01.021
are building Android anyway,
so we're working with them

00:11:01.021 --> 00:11:04.040
on actually creating a
version of Android that

00:11:04.040 --> 00:11:05.230
works in the head unit.

00:11:05.230 --> 00:11:08.350
So, yeah, I think we'll
expect to see more.

00:11:08.350 --> 00:11:11.490
I don't have, like, a
projection or a figure,

00:11:11.490 --> 00:11:13.970
but, yeah, there's definitely
a lot of interest for it.

00:11:13.970 --> 00:11:16.645
And a lot of the stuff
we do in Projected Mode--

00:11:16.645 --> 00:11:19.860
so Projected Mode is when you
plug your phone into the car--

00:11:19.860 --> 00:11:23.760
and we basically have
a separate display

00:11:23.760 --> 00:11:27.730
and we actually project the UI
of the app in a sort of format

00:11:27.730 --> 00:11:30.580
that's ideal for a car,
like, in a safe use.

00:11:30.580 --> 00:11:32.470
A lot of that UI just
transfers naturally

00:11:32.470 --> 00:11:34.095
when the Android runs
in the head unit.

00:11:34.095 --> 00:11:37.370
You want that version of
the app on the head unit.

00:11:37.370 --> 00:11:40.850
So there's sort of two projects
of Projected Mode and head unit

00:11:40.850 --> 00:11:44.120
sort of are actually quite-- I
was going to use that horrible

00:11:44.120 --> 00:11:48.664
word "synergistic"-- but they
both have some good overlap.

00:11:48.664 --> 00:11:49.608
AUDIENCE: Thanks.

00:11:49.608 --> 00:11:50.316
GABE COHEN: Cool.

00:11:50.316 --> 00:11:52.190
How about here?

00:11:52.190 --> 00:11:52.770
AUDIENCE: Hi.

00:11:52.770 --> 00:11:54.385
Question about Multi-Window.

00:11:54.385 --> 00:11:57.990
I was wondering was
there a particular reason

00:11:57.990 --> 00:12:04.110
why picture-in-picture was
left out of non-TV builds?

00:12:04.110 --> 00:12:06.180
Like, you know, it
would be especially--

00:12:06.180 --> 00:12:09.337
DAVE BURKE: I want to know
that answer. [INAUDIBLE].

00:12:09.337 --> 00:12:11.420
AUDIENCE: It would be
especially useful on tablets

00:12:11.420 --> 00:12:12.410
for, like, video apps.

00:12:12.410 --> 00:12:15.430
So just wondering if there
was a reason it was dropped

00:12:15.430 --> 00:12:18.980
and if it would be coming
in the future perhaps.

00:12:18.980 --> 00:12:21.680
MALE SPEAKER: I guess I wouldn't
really say it was dropped.

00:12:21.680 --> 00:12:23.840
There's a feature
flag that any OEM

00:12:23.840 --> 00:12:28.710
can enable picture-in-picture
mode on any device, right?

00:12:28.710 --> 00:12:31.350
The fact that [INAUDIBLE]
enabled on some of our devices

00:12:31.350 --> 00:12:34.680
doesn't mean it's not supported
in the platform for any OEM

00:12:34.680 --> 00:12:35.240
to pick up.

00:12:37.770 --> 00:12:40.290
AUDIENCE: As far as I'm aware,
and, like, from the talks

00:12:40.290 --> 00:12:43.150
I've seen, picture-in-picture's
only for Android TV.

00:12:43.150 --> 00:12:43.860
Is that--

00:12:43.860 --> 00:12:46.440
MALE SPEAKER: Well, was
that my talk yesterday?

00:12:46.440 --> 00:12:47.012
AUDIENCE: No.

00:12:47.012 --> 00:12:47.720
MALE SPEAKER: OK.

00:12:47.720 --> 00:12:53.170
So if you watch, like, my
talk yesterday on Multi-Window

00:12:53.170 --> 00:12:53.670
Mode--

00:12:53.670 --> 00:12:54.830
[LAUGHTER AND APPLAUSE]

00:12:54.830 --> 00:12:57.614
--it has the right information
on Multi-Window Mode.

00:12:57.614 --> 00:12:58.614
AUDIENCE: OK, thank you.

00:12:58.614 --> 00:13:00.590
[LAUGHTER AND APPLAUSE]

00:13:04.280 --> 00:13:07.140
GABE COHEN: Dianne,
you've trained him well.

00:13:07.140 --> 00:13:10.600
AUDIENCE: Can I do a really
quick experiment now that--

00:13:10.600 --> 00:13:15.175
just on the-- to continue
Dave's little poll here,

00:13:15.175 --> 00:13:18.210
is anyone in the room interested
in using [? Kotlin ?] or other

00:13:18.210 --> 00:13:19.860
modern JVM languages on--

00:13:19.860 --> 00:13:21.564
[CHEERING AND APPLAUSE]

00:13:21.962 --> 00:13:23.670
GABE COHEN: Everybody
just simultaneously

00:13:23.670 --> 00:13:25.110
shout out the name
of a language,

00:13:25.110 --> 00:13:26.193
and we'll get right on it.

00:13:26.193 --> 00:13:27.390
[LAUGHTER]

00:13:27.390 --> 00:13:29.400
OK, on the right.

00:13:29.400 --> 00:13:30.670
AUDIENCE: Hi.

00:13:30.670 --> 00:13:32.720
My name is [INAUDIBLE].

00:13:32.720 --> 00:13:37.600
I have a question specific
for Android N. So it's

00:13:37.600 --> 00:13:41.100
pretty cool that now
Android Team is coming up

00:13:41.100 --> 00:13:43.200
with the alpha and beta
version of Android N.

00:13:43.200 --> 00:13:50.520
So what I learned that, like,
for this N-specific release,

00:13:50.520 --> 00:13:54.260
even if, like, your app is
not targeting by the time

00:13:54.260 --> 00:13:59.490
N is released, there are
certain features or APIs,

00:13:59.490 --> 00:14:02.580
for example Multi-Window,
we have to consider, like,

00:14:02.580 --> 00:14:05.460
because they would
be affecting the app

00:14:05.460 --> 00:14:07.190
even if we are not
targeting for N.

00:14:07.190 --> 00:14:09.990
So I was wondering if
there are any, like,

00:14:09.990 --> 00:14:14.880
lists of features or
API that are available?

00:14:14.880 --> 00:14:17.660
Or is there any plan to
make those available so

00:14:17.660 --> 00:14:19.980
that you know the
developers can look at those

00:14:19.980 --> 00:14:23.700
and make sure, like, at least
those are addressed before, you

00:14:23.700 --> 00:14:27.744
know, the apps is-- for N?

00:14:27.744 --> 00:14:28.660
DIANNE HACKBORN: Yeah.

00:14:28.660 --> 00:14:32.260
So we kind of do a case-by-case
about whether, you know, we're

00:14:32.260 --> 00:14:35.030
going to have applications
need to opt into something

00:14:35.030 --> 00:14:37.330
or impose it on them
whether or not they opt in.

00:14:37.330 --> 00:14:39.951
You know, Doze from N is a
good example where we said,

00:14:39.951 --> 00:14:41.450
like, well, we're
just going imposes

00:14:41.450 --> 00:14:44.982
this in all applications because
we need to do that for battery.

00:14:44.982 --> 00:14:46.440
And we've tried
to-- whenever we do

00:14:46.440 --> 00:14:47.975
that, we try to do
a lot of outreach

00:14:47.975 --> 00:14:49.660
to developers to
prepare them for that,

00:14:49.660 --> 00:14:51.144
so Doze happened that way.

00:14:51.144 --> 00:14:52.560
Multi-Window's
happening that way.

00:14:52.560 --> 00:14:54.760
We actually evaluated
Multi-Window

00:14:54.760 --> 00:14:56.705
about what the impact
was on the applications.

00:14:56.705 --> 00:14:58.830
We were debating about
whether to have it something

00:14:58.830 --> 00:15:02.112
they have to opt into
versus just allowing

00:15:02.112 --> 00:15:03.070
you to do in every one.

00:15:03.070 --> 00:15:05.230
And we decided that
with the warnings

00:15:05.230 --> 00:15:07.930
we have that it was
worthwhile allowing users

00:15:07.930 --> 00:15:10.920
to use it for everything--
because they generally work OK.

00:15:10.920 --> 00:15:13.920
So, you know, I don't know--
there's not a list of that,

00:15:13.920 --> 00:15:17.074
but it's rare that we actually,
like, cause these-- you know,

00:15:17.074 --> 00:15:18.490
like, make it so
applications need

00:15:18.490 --> 00:15:20.240
to update to address things.

00:15:20.240 --> 00:15:23.530
And we try to be pretty public
about that when it happens.

00:15:23.530 --> 00:15:24.720
[INTERPOSING VOICES]

00:15:24.720 --> 00:15:26.891
GABE COHEN: We should be
doing a clear job of--

00:15:26.891 --> 00:15:28.640
or we should be doing
a good job of making

00:15:28.640 --> 00:15:30.265
it clear in the
developer documentation

00:15:30.265 --> 00:15:33.720
in the overview what the
required set of changes is.

00:15:33.720 --> 00:15:35.127
I think we intend to do that.

00:15:35.127 --> 00:15:37.710
ADAM POWELL: Yeah, so one of the
things with Multi-Window Mode

00:15:37.710 --> 00:15:40.390
in particular, like, one of the
kind of compatibility issues

00:15:40.390 --> 00:15:42.130
that we saw with
some applications,

00:15:42.130 --> 00:15:44.240
was applications that
tried really, really

00:15:44.240 --> 00:15:46.870
hard to avoid ever having
their activity be restarted

00:15:46.870 --> 00:15:50.320
for a configuration
change event, for example.

00:15:50.320 --> 00:15:53.030
Multi-Window Mode, of
course, kind of generates

00:15:53.030 --> 00:15:55.030
a new kind of those
configuration change events,

00:15:55.030 --> 00:15:57.089
and those apps do tend
to have some problems.

00:15:57.089 --> 00:15:59.380
And those are the sorts of
things that we kind of weigh

00:15:59.380 --> 00:16:02.334
a little bit differently
because this kind of-- this

00:16:02.334 --> 00:16:03.750
plays into a lot
of the guidelines

00:16:03.750 --> 00:16:06.300
that we've given developers
since kind of day one

00:16:06.300 --> 00:16:09.550
in terms of how to handle a
lot of the activity life cycle.

00:16:09.550 --> 00:16:12.062
So basically I
would say make sure

00:16:12.062 --> 00:16:14.270
that you pay attention to
some of the other developer

00:16:14.270 --> 00:16:16.470
documentation and guidelines
for best practices

00:16:16.470 --> 00:16:18.880
and recommendations about
how to structure your app

00:16:18.880 --> 00:16:21.450
and keep your app functioning
under these certain conditions,

00:16:21.450 --> 00:16:23.020
because generally
we'll use those

00:16:23.020 --> 00:16:25.600
as guarantees that we
provide from the framework

00:16:25.600 --> 00:16:27.080
to the application.

00:16:27.080 --> 00:16:30.150
So, I mean, we may use those
same sorts of constructs

00:16:30.150 --> 00:16:32.290
in new ways in future
versions of the platform,

00:16:32.290 --> 00:16:34.770
and Multi-Window's a
great example of that.

00:16:34.770 --> 00:16:35.535
AUDIENCE: OK.

00:16:35.535 --> 00:16:36.260
OK, thanks.

00:16:36.260 --> 00:16:40.580
I mean, the question was just
in the sense that, you know,

00:16:40.580 --> 00:16:43.832
still previous versions I
would be very safe if I'm not

00:16:43.832 --> 00:16:44.790
targeting [INAUDIBLE]--

00:16:44.790 --> 00:16:45.410
GABE COHEN: Yeah.

00:16:45.410 --> 00:16:46.390
AUDIENCE: --Marshmallow.

00:16:46.390 --> 00:16:47.098
GABE COHEN: Yeah.

00:16:47.098 --> 00:16:50.810
AUDIENCE: And right now, like,
I saw this feature and also,

00:16:50.810 --> 00:16:53.640
like, in the Android
[INAUDIBLE] I came to know that

00:16:53.640 --> 00:16:55.985
for the network or
broadcast calls--

00:16:55.985 --> 00:16:56.860
GABE COHEN: Uh, yeah.

00:16:56.860 --> 00:16:58.693
AUDIENCE: --while your
app is in background,

00:16:58.693 --> 00:17:00.450
that will also be affected.

00:17:00.450 --> 00:17:00.950
If--

00:17:00.950 --> 00:17:01.590
DIANNE HACKBORN: So, yeah.

00:17:01.590 --> 00:17:03.006
So the network
broadcast, you have

00:17:03.006 --> 00:17:04.535
to be targeting N for that.

00:17:04.535 --> 00:17:05.290
AUDIENCE: Oh.

00:17:05.290 --> 00:17:07.550
DIANNE HACKBORN: So that's
their-- the only ones

00:17:07.550 --> 00:17:09.550
I know of that we actually
changed on their apps

00:17:09.550 --> 00:17:12.909
was Doze Mode,
Multi-Window-- and we

00:17:12.909 --> 00:17:15.200
have the warning to users
about the application may not

00:17:15.200 --> 00:17:17.450
be compatible, which we hope
means that you don't have

00:17:17.450 --> 00:17:18.829
to stress too much about it.

00:17:18.829 --> 00:17:20.864
I mean, your users will want
it, we think, so, you know,

00:17:20.864 --> 00:17:21.780
you'll want to update.

00:17:21.780 --> 00:17:23.920
But we're telling users
that it's not really

00:17:23.920 --> 00:17:26.890
your fault too much, right?

00:17:26.890 --> 00:17:30.124
And then there's also in N
the new video, a new picture

00:17:30.124 --> 00:17:31.540
broadcast, that
we're just getting

00:17:31.540 --> 00:17:34.640
rid of because those turned
out to be really problematic.

00:17:34.640 --> 00:17:37.600
And we felt like there were
not a lot of applications that

00:17:37.600 --> 00:17:40.630
were relying on them, so
it was worthwhile actually

00:17:40.630 --> 00:17:41.739
applying that to everyone.

00:17:41.739 --> 00:17:42.280
AUDIENCE: OK.

00:17:42.280 --> 00:17:43.200
Thank you so much.

00:17:43.200 --> 00:17:43.420
Thank you.

00:17:43.420 --> 00:17:44.336
GABE COHEN: Thank you.

00:17:44.336 --> 00:17:46.630
TOR NORBYE: And
just-- in Studio 2.2,

00:17:46.630 --> 00:17:48.430
we have some new link
checks which tell you

00:17:48.430 --> 00:17:49.846
if you're using
some of these APIs

00:17:49.846 --> 00:17:52.840
that are no longer
being called on N.

00:17:52.840 --> 00:17:54.270
AUDIENCE: Hi.

00:17:54.270 --> 00:17:56.420
My question is kind of simple.

00:17:56.420 --> 00:17:58.980
So there's a bit of a
best practice to decouple

00:17:58.980 --> 00:18:00.315
[INAUDIBLE] as much as possible.

00:18:00.315 --> 00:18:03.590
Like, nobody's going
to disagree with me.

00:18:03.590 --> 00:18:05.220
Basically for us, as
Android developer,

00:18:05.220 --> 00:18:09.830
it means taking code outside
of the activity of the fragment

00:18:09.830 --> 00:18:13.400
and implementing patterns such
as ViPER and the Model View

00:18:13.400 --> 00:18:14.760
Presenter.

00:18:14.760 --> 00:18:18.110
And I was wondering
if you had planned

00:18:18.110 --> 00:18:20.790
to integrate one
of those patterns

00:18:20.790 --> 00:18:23.920
as a default for the
development in Android?

00:18:23.920 --> 00:18:25.440
This same way for
example Microsoft

00:18:25.440 --> 00:18:30.280
does with the MVC platform
where you create a page

00:18:30.280 --> 00:18:32.650
and create the controller,
the view, and the model.

00:18:37.330 --> 00:18:39.150
DAN SANDLER: I mean,
let anybody who

00:18:39.150 --> 00:18:42.380
has written an article in the
last week about app development

00:18:42.380 --> 00:18:43.970
patterns on Android
raise their hand.

00:18:43.970 --> 00:18:45.774
[LAUGHTER]

00:18:47.290 --> 00:18:49.472
DIANNE HACKBORN: So from
the platform perspective,

00:18:49.472 --> 00:18:51.180
we actually really
don't care a whole lot

00:18:51.180 --> 00:18:54.490
about how you decompose your
application, organize things,

00:18:54.490 --> 00:18:58.330
and so there are best
practices that our Developer

00:18:58.330 --> 00:19:01.670
Relations recommend that
other developers recommend.

00:19:01.670 --> 00:19:04.457
We don't really want to encode
those very much in the platform

00:19:04.457 --> 00:19:06.540
because it's kind of
something that really depends

00:19:06.540 --> 00:19:08.951
on the application and
they change over time,

00:19:08.951 --> 00:19:10.700
and it's better to let
those things evolve

00:19:10.700 --> 00:19:13.360
and not be tied
into the platform.

00:19:13.360 --> 00:19:14.267
AUDIENCE: Thank you.

00:19:14.267 --> 00:19:14.975
GABE COHEN: Cool.

00:19:14.975 --> 00:19:17.470
How about here?

00:19:17.470 --> 00:19:21.390
AUDIENCE: I have a question
about the Layout Inflation.

00:19:21.390 --> 00:19:26.350
So it seems that the framework
does a four-name class

00:19:26.350 --> 00:19:28.690
lookup when inflating a view.

00:19:28.690 --> 00:19:31.610
That seems relatively expensive.

00:19:31.610 --> 00:19:34.460
Are there any plans
to fixing that?

00:19:34.460 --> 00:19:35.210
ADAM POWELL: Yeah.

00:19:35.210 --> 00:19:37.260
There's an open bug to
look into doing some better

00:19:37.260 --> 00:19:38.426
caching around some of that.

00:19:38.426 --> 00:19:39.526
It's a known issue.

00:19:39.526 --> 00:19:40.420
AUDIENCE: Great.

00:19:40.420 --> 00:19:43.840
So we use [INAUDIBLE] only
framework called Scoop.

00:19:43.840 --> 00:19:48.280
So one of the reasons for a move
away from using Custom Views

00:19:48.280 --> 00:19:53.430
was that maybe potentially
take it to the next level.

00:19:53.430 --> 00:19:55.890
And, you know, [INAUDIBLE]
with [INAUDIBLE] you

00:19:55.890 --> 00:20:00.730
have, like, an ESL to define
interfaces which ends up

00:20:00.730 --> 00:20:04.950
being just Java [INAUDIBLE] code
that gets in the APK and you

00:20:04.950 --> 00:20:06.460
define your layouts this way.

00:20:06.460 --> 00:20:08.970
And maybe in the future we
could have something really nice

00:20:08.970 --> 00:20:10.049
like that.

00:20:10.049 --> 00:20:12.340
ADAM POWELL: I don't think
we have any plans to support

00:20:12.340 --> 00:20:13.216
that in the platform.

00:20:13.216 --> 00:20:13.881
AUDIENCE: Great.

00:20:13.881 --> 00:20:14.622
Thank you.

00:20:14.622 --> 00:20:16.490
GABE COHEN: Back here.

00:20:16.490 --> 00:20:17.160
AUDIENCE: Hi.

00:20:17.160 --> 00:20:18.285
I hope you'll bear with me.

00:20:18.285 --> 00:20:19.294
This is a bit specific.

00:20:19.294 --> 00:20:20.710
In emerging markets
we're starting

00:20:20.710 --> 00:20:23.310
to see a proliferation
of multi-core devices.

00:20:23.310 --> 00:20:25.360
They've got tons of CPU.

00:20:25.360 --> 00:20:27.080
Unfortunately, they
got very, very slow

00:20:27.080 --> 00:20:30.180
IO, which means that when you're
inflating large views which

00:20:30.180 --> 00:20:32.030
have maybe resources
are loaded, you're

00:20:32.030 --> 00:20:34.560
going to have 100 to
500 millisecond stalls

00:20:34.560 --> 00:20:38.000
because the main thread is
still a point of contention.

00:20:38.000 --> 00:20:39.700
At the same time, in
the View Framework,

00:20:39.700 --> 00:20:43.210
there are things like
holding onto thread creation

00:20:43.210 --> 00:20:46.440
to make sure that you don't
do the reparenting of views,

00:20:46.440 --> 00:20:48.260
very, very specific
thread locking that

00:20:48.260 --> 00:20:51.490
isn't necessary limited to the
way you're writing your code.

00:20:51.490 --> 00:20:53.840
Is there any way we could
take a look at the frameworks?

00:20:53.840 --> 00:20:56.175
Maybe allowing so
multi-threading possibilities

00:20:56.175 --> 00:20:59.650
in View Creation and UI code
to help free up performance

00:20:59.650 --> 00:21:01.740
on emerging market devices?

00:21:01.740 --> 00:21:04.479
ADAM POWELL: So in terms of
the view inflation issue there,

00:21:04.479 --> 00:21:06.520
you might take a look in
the more recent versions

00:21:06.520 --> 00:21:07.570
of the support libraries.

00:21:07.570 --> 00:21:11.370
I believe we put an Async
View Inflator in there that's

00:21:11.370 --> 00:21:14.560
able to at least take the
inflation process itself off

00:21:14.560 --> 00:21:15.830
of the main thread.

00:21:15.830 --> 00:21:18.706
So that's one step
to some of that.

00:21:18.706 --> 00:21:19.539
AUDIENCE: Thank you.

00:21:22.710 --> 00:21:26.640
AUDIENCE: In the
demo on Wednesday

00:21:26.640 --> 00:21:28.890
there was a demo of
the [? Duo ?] app,

00:21:28.890 --> 00:21:31.710
and they mentioned that they
were using the quick transport

00:21:31.710 --> 00:21:32.730
protocol.

00:21:32.730 --> 00:21:35.930
And I was wondering if
that is enabled in Android

00:21:35.930 --> 00:21:38.200
and, if not, if you're
planning on enabling that?

00:21:46.297 --> 00:21:48.130
GABE COHEN: We're really
sure of the answer.

00:21:48.130 --> 00:21:50.930
Just give us a second.

00:21:50.930 --> 00:21:55.310
No, I don't think that we've
talked about incorporating that

00:21:55.310 --> 00:21:56.150
into the platform.

00:21:56.150 --> 00:21:58.570
I think this kind of gets back
to the comment Dianne made,

00:21:58.570 --> 00:22:00.815
which is that can be
built above the platform.

00:22:00.815 --> 00:22:02.190
That's how [? Duo ?]
is using it.

00:22:02.190 --> 00:22:04.820
It doesn't necessarily need
to be built into the platform.

00:22:04.820 --> 00:22:08.470
So we sort of take,
generally, an approach

00:22:08.470 --> 00:22:11.430
that if it needs to be in the
platform, we'll consider it.

00:22:11.430 --> 00:22:13.300
If it doesn't, we tend
to leave it out just

00:22:13.300 --> 00:22:17.240
because there's a certain
amount of tax associated

00:22:17.240 --> 00:22:18.220
with putting it there.

00:22:18.220 --> 00:22:18.928
DAVE BURKE: Yeah.

00:22:18.928 --> 00:22:21.310
So, like, Chrome, which is
an app on top of Android,

00:22:21.310 --> 00:22:24.090
like any other app,
implements Quick.

00:22:24.090 --> 00:22:26.430
And so, yeah, it's
better to do it

00:22:26.430 --> 00:22:28.980
above the sort of core
framework so it can evolve.

00:22:28.980 --> 00:22:31.120
And Quick is evolving.

00:22:31.120 --> 00:22:31.992
AUDIENCE: Thank you.

00:22:31.992 --> 00:22:32.700
GABE COHEN: Cool.

00:22:32.700 --> 00:22:34.020
Over on the left.

00:22:34.020 --> 00:22:35.990
AUDIENCE: Hello, hello.

00:22:35.990 --> 00:22:38.140
Nice work on the
VR for Daydream.

00:22:38.140 --> 00:22:40.540
And I'm wondering
is there a way to--

00:22:40.540 --> 00:22:46.080
are you considering allowing
us to use Android Views in VR?

00:22:46.080 --> 00:22:47.390
So 2D mixed with 3D?

00:22:47.390 --> 00:22:48.806
Because there's a
lot of scenarios

00:22:48.806 --> 00:22:51.340
we can do to make that
faster and up to speed.

00:22:51.340 --> 00:22:54.000
And the second one is what
are the development tools

00:22:54.000 --> 00:22:58.440
that you're going to support in
the future for VR development?

00:22:58.440 --> 00:23:01.520
Thank you.

00:23:01.520 --> 00:23:03.480
[? DAN SANDLER: So ?]
two questions,

00:23:03.480 --> 00:23:04.890
platform and development tools.

00:23:07.271 --> 00:23:09.520
TOR NORBYE: I don't think
we have anything to announce

00:23:09.520 --> 00:23:12.082
for developer tools.

00:23:12.082 --> 00:23:12.790
GABE COHEN: Yeah.

00:23:12.790 --> 00:23:15.800
And I guess I hear
the request for being

00:23:15.800 --> 00:23:18.940
able to use views in VR mode.

00:23:18.940 --> 00:23:20.710
I can convey that
to the VR team.

00:23:20.710 --> 00:23:22.960
We don't have a lot of
coverage from the VR

00:23:22.960 --> 00:23:26.795
team proper up here, yeah,
but that's good feedback.

00:23:26.795 --> 00:23:28.170
I think we take
that to the team.

00:23:28.170 --> 00:23:29.860
Think you.

00:23:29.860 --> 00:23:30.530
Cool.

00:23:30.530 --> 00:23:32.010
How about here?

00:23:32.010 --> 00:23:34.170
AUDIENCE: Hey, I'm Nelson.

00:23:34.170 --> 00:23:36.220
I know Google's really
big on Dogfooding.

00:23:36.220 --> 00:23:38.860
Is Google Dogfood
the Android Gradle

00:23:38.860 --> 00:23:43.720
build system on larger apps such
as Inbox or Gmail or Chrome?

00:23:43.720 --> 00:23:46.700
And then, as a follow-up
to that question,

00:23:46.700 --> 00:23:48.960
I know when you first
install Android Studio

00:23:48.960 --> 00:23:52.620
there's a box that asks
if you can collect data.

00:23:52.620 --> 00:23:57.169
Do you guys have any data
on real world build times?

00:23:57.169 --> 00:23:59.061
[APPLAUSE]

00:24:01.900 --> 00:24:04.522
TOR NORBYE: Yeah, so most
of the large Google Apps

00:24:04.522 --> 00:24:06.230
are built using an
internal build system,

00:24:06.230 --> 00:24:08.110
but there are some big ones.

00:24:08.110 --> 00:24:09.520
I don't know if
I can name names,

00:24:09.520 --> 00:24:12.420
but we have a couple that we
use that are really, really

00:24:12.420 --> 00:24:13.465
good for checking--

00:24:13.465 --> 00:24:14.840
GABE COHEN: I'll
give you a hint.

00:24:14.840 --> 00:24:16.450
It's on your phone right now.

00:24:16.450 --> 00:24:17.158
TOR NORBYE: Yeah.

00:24:17.158 --> 00:24:18.830
Yeah.

00:24:18.830 --> 00:24:20.250
It rhymes with u-sic.

00:24:20.250 --> 00:24:21.470
[LAUGHTER]

00:24:21.470 --> 00:24:23.430
And what was the
second question?

00:24:23.430 --> 00:24:24.990
I'm sorry.

00:24:24.990 --> 00:24:26.490
AUDIENCE: Data or
real world builds.

00:24:26.490 --> 00:24:27.500
GABE COHEN: Yeah,
do we know about--

00:24:27.500 --> 00:24:29.530
TOR NORBYE: Yeah, so we
actually had a presentation

00:24:29.530 --> 00:24:31.696
this morning, what's new
in Android Developer Tools.

00:24:31.696 --> 00:24:35.030
And so Steph Cuthbertson
basically went through a bunch

00:24:35.030 --> 00:24:37.340
of slides showing some of
the aggregate statistics,

00:24:37.340 --> 00:24:39.889
because we do look specifically
at that, at built times,

00:24:39.889 --> 00:24:42.430
to make sure that [? Instant ?]
[? Run ?] is making the world

00:24:42.430 --> 00:24:44.390
better.

00:24:44.390 --> 00:24:45.580
AUDIENCE: Thank you.

00:24:45.580 --> 00:24:46.371
GABE COHEN: Thanks.

00:24:46.371 --> 00:24:47.120
How about here?

00:24:47.120 --> 00:24:48.280
AUDIENCE: So hi.

00:24:48.280 --> 00:24:50.810
My name is [INAUDIBLE].

00:24:50.810 --> 00:24:54.080
So I'm a low-level
cross-platform developer,

00:24:54.080 --> 00:24:56.760
so I work with the C, C++.

00:24:56.760 --> 00:24:59.370
And so I've seen
the presentation

00:24:59.370 --> 00:25:00.790
about new developer tools.

00:25:00.790 --> 00:25:06.770
I find it very great what
you are doing with C++.

00:25:06.770 --> 00:25:09.370
I just want to ask
if there's going

00:25:09.370 --> 00:25:11.930
to be more support
because, particularly

00:25:11.930 --> 00:25:14.630
with native debugging,
that's always

00:25:14.630 --> 00:25:17.100
been a problem in Android.

00:25:17.100 --> 00:25:22.032
So the best native debug tools
that we had was printf and--

00:25:22.032 --> 00:25:22.740
TOR NORBYE: Yeah.

00:25:22.740 --> 00:25:23.820
We're working on that.

00:25:23.820 --> 00:25:30.970
AUDIENCE: And the next
problem is the best profiling

00:25:30.970 --> 00:25:34.740
tool for native code that
I have now is printf.

00:25:34.740 --> 00:25:38.280
So it's going to be
supported with [INAUDIBLE].

00:25:38.280 --> 00:25:41.330
Now we have native
debugging integrated

00:25:41.330 --> 00:25:44.510
in the Android Studio.

00:25:44.510 --> 00:25:48.330
Will we have native
profiling, for example?

00:25:48.330 --> 00:25:52.272
Or better documentation
for C++ API?

00:25:52.272 --> 00:25:52.980
TOR NORBYE: Yeah.

00:25:52.980 --> 00:25:57.460
So we are investigating
performance profiling tools.

00:25:57.460 --> 00:25:59.978
So let us know what
it is you want to see.

00:25:59.978 --> 00:26:00.894
GABE COHEN: Thank you.

00:26:00.894 --> 00:26:02.590
How about over here?

00:26:02.590 --> 00:26:07.090
AUDIENCE: Continuing
the native theme,

00:26:07.090 --> 00:26:10.870
are there any plans to support
native camera capture API?

00:26:14.380 --> 00:26:15.880
MALE SPEAKER:
Actually in Android N,

00:26:15.880 --> 00:26:19.360
you have native APIs to
access the new camera tool

00:26:19.360 --> 00:26:22.320
interfaces that were released
several releases ago.

00:26:22.320 --> 00:26:24.380
And with that you can
capture things natively.

00:26:24.380 --> 00:26:25.984
So it's new in N.

00:26:25.984 --> 00:26:26.650
AUDIENCE: Great.

00:26:26.650 --> 00:26:28.078
Thanks.

00:26:28.078 --> 00:26:29.286
GABE COHEN: Over on the left.

00:26:29.286 --> 00:26:30.020
AUDIENCE: Hi.

00:26:30.020 --> 00:26:31.895
I just want to thank
you for the improvements

00:26:31.895 --> 00:26:33.410
with Gradle build
speed recently.

00:26:33.410 --> 00:26:35.420
It's great.

00:26:35.420 --> 00:26:39.292
I started looking at Basil,
which is the beta build system

00:26:39.292 --> 00:26:40.750
that you have, and
I'm just curious

00:26:40.750 --> 00:26:42.291
is that something
you would recommend

00:26:42.291 --> 00:26:45.280
for us to use or to start
looking at this year?

00:26:45.280 --> 00:26:47.710
I saw that the
Android Studio support

00:26:47.710 --> 00:26:50.820
is scheduled for late
this year on the Roadmap.

00:26:50.820 --> 00:26:53.882
I'm just curious how
that might be going.

00:26:53.882 --> 00:26:55.590
TOR NORBYE: Well, the
Android Studio team

00:26:55.590 --> 00:26:57.752
is focusing
exclusively on Gradle.

00:26:57.752 --> 00:26:58.609
AUDIENCE: OK.

00:26:58.609 --> 00:26:59.108
OK.

00:26:59.108 --> 00:26:59.560
Thank you.

00:26:59.560 --> 00:27:00.351
GABE COHEN: Thanks.

00:27:00.351 --> 00:27:01.590
How about here?

00:27:01.590 --> 00:27:02.710
AUDIENCE: Hi.

00:27:02.710 --> 00:27:04.377
So watching the
keynote, you know,

00:27:04.377 --> 00:27:06.460
all this machine learning
stuff, Google Assistant,

00:27:06.460 --> 00:27:07.570
it's all great.

00:27:07.570 --> 00:27:11.050
But I think the most exciting
feature is Espresso Test Code

00:27:11.050 --> 00:27:13.045
Generation in Android Studio.

00:27:13.045 --> 00:27:14.905
[APPLAUSE]

00:27:16.765 --> 00:27:20.940
So with that, my
question is now that it's

00:27:20.940 --> 00:27:23.730
part of Android Studio and we
think that testing is actually

00:27:23.730 --> 00:27:26.900
important, what are we
doing on the platform level

00:27:26.900 --> 00:27:29.470
to ensure that new
versions of Android

00:27:29.470 --> 00:27:31.860
don't break tools like Espresso?

00:27:31.860 --> 00:27:34.780
So for example, making
sure that things

00:27:34.780 --> 00:27:36.880
go through the
instrumentation API, you know,

00:27:36.880 --> 00:27:38.590
that things are
properly hooked in so

00:27:38.590 --> 00:27:40.970
that UI testing's
actually possible

00:27:40.970 --> 00:27:45.247
for, like, new shiny features
of new versions of Android?

00:27:47.990 --> 00:27:50.380
GABE COHEN: So the question
is stop breaking Espresso?

00:27:50.380 --> 00:27:51.720
TOR NORBYE: I think that
was a platform question.

00:27:51.720 --> 00:27:52.670
GABE COHEN: Platform,
stop breaking Espresso.

00:27:52.670 --> 00:27:54.920
AUDIENCE: The question is
how do we not break Espresso

00:27:54.920 --> 00:27:56.610
in future releases of Android?

00:27:56.610 --> 00:27:58.630
And, let's say, new
widgets that come out

00:27:58.630 --> 00:28:01.560
in the Support Library?

00:28:01.560 --> 00:28:04.195
ADAM POWELL: Could
you give an example?

00:28:04.195 --> 00:28:06.320
AUDIENCE: Well, for example,
like when RecyclerView

00:28:06.320 --> 00:28:09.890
came out, you know, Espresso
didn't really support that.

00:28:09.890 --> 00:28:13.240
It's still, you know, support
is still pretty crappy.

00:28:13.240 --> 00:28:17.010
So that was, like, one example.

00:28:17.010 --> 00:28:20.540
For example,
fragment callbacks--

00:28:20.540 --> 00:28:23.780
when a fragment launches a
new activity, that does not

00:28:23.780 --> 00:28:26.000
go through the
instrumentation API,

00:28:26.000 --> 00:28:28.910
which doesn't let Espresso
[? intents ?] properly capture

00:28:28.910 --> 00:28:29.450
it.

00:28:29.450 --> 00:28:31.300
So things like that.

00:28:31.300 --> 00:28:32.050
ADAM POWELL: Sure.

00:28:32.050 --> 00:28:33.800
Let's go ahead and
talk after the session

00:28:33.800 --> 00:28:35.534
and see if we can make a list.

00:28:35.534 --> 00:28:36.450
GABE COHEN: Thank you.

00:28:36.450 --> 00:28:37.660
It's good feedback.

00:28:37.660 --> 00:28:39.210
How about here?

00:28:39.210 --> 00:28:42.100
AUDIENCE: Hi, my name's
is Alex from Runkeeper.

00:28:42.100 --> 00:28:45.100
My question's around the
Parcelable interface.

00:28:45.100 --> 00:28:49.040
So I think one of the things
that new and beginner Android

00:28:49.040 --> 00:28:52.610
programmers kind of trip over
is passing data from their first

00:28:52.610 --> 00:28:57.260
main activity to their second
[? my ?] [? first ?] activity.

00:28:57.260 --> 00:28:59.640
And to kind of handle that
and implement Parcelable,

00:28:59.640 --> 00:29:01.310
there's a lot of
boilerplate code,

00:29:01.310 --> 00:29:04.470
so I'm wondering if you guys
have any plans to streamline

00:29:04.470 --> 00:29:06.970
that or make that a built-in.

00:29:06.970 --> 00:29:08.770
I mean, you can use
libraries right now,

00:29:08.770 --> 00:29:10.920
like, Autovalue and some
other Parcelable ones,

00:29:10.920 --> 00:29:13.692
but I was just wondering
what your thoughts were.

00:29:13.692 --> 00:29:15.150
TOR NORBYE: So in
Android Studio we

00:29:15.150 --> 00:29:18.031
have a quick fix that generates
the Parcelable implementation,

00:29:18.031 --> 00:29:18.530
I think.

00:29:18.530 --> 00:29:19.196
AUDIENCE: Right.

00:29:19.196 --> 00:29:21.640
But then when you add new
properties to your object,

00:29:21.640 --> 00:29:26.360
you know, it's just more code
to code to maintain the stuff.

00:29:26.360 --> 00:29:28.012
TOR NORBYE: Yeah, agreed.

00:29:28.012 --> 00:29:29.896
[LAUGHTER]

00:29:29.896 --> 00:29:30.900
AUDIENCE: Thank you.

00:29:30.900 --> 00:29:31.525
GABE COHEN: OK.

00:29:31.525 --> 00:29:32.772
How about here?

00:29:32.772 --> 00:29:33.980
AUDIENCE: Hi, my name is Gil.

00:29:33.980 --> 00:29:35.830
I have two quick questions.

00:29:35.830 --> 00:29:39.240
One, is there-- I don't
know if it's even possible--

00:29:39.240 --> 00:29:42.620
is there a way to strip out the
[? Dex ?] [? Bytecode ?] from

00:29:42.620 --> 00:29:44.210
the OIT files?

00:29:44.210 --> 00:29:47.210
Maybe in a release
version of the build,

00:29:47.210 --> 00:29:52.396
and that way you cannot reverse
engineer your [INAUDIBLE].

00:29:52.396 --> 00:29:53.770
And the second
question, is there

00:29:53.770 --> 00:29:57.060
any plans to integrate
Google Home into Android?

00:29:59.820 --> 00:30:02.000
BRIAN: I'll take the
first one while you're

00:30:02.000 --> 00:30:04.100
thinking about that.

00:30:04.100 --> 00:30:06.680
So, no, we have no plans
right now to do that.

00:30:06.680 --> 00:30:10.000
A lot of-- while we
do compile some things

00:30:10.000 --> 00:30:12.970
into the [INAUDIBLE] file
for native execution,

00:30:12.970 --> 00:30:14.429
we also fallback
for [? Bytecode ?]

00:30:14.429 --> 00:30:15.261
for a lot of things.

00:30:15.261 --> 00:30:17.320
And that's actually
happening even more now in N

00:30:17.320 --> 00:30:18.809
with the move to the git.

00:30:18.809 --> 00:30:20.350
So we'll start out,
we won't actually

00:30:20.350 --> 00:30:22.160
have anything in
the [INAUDIBLE] file

00:30:22.160 --> 00:30:24.690
except for your original
[? decks, ?] basically,

00:30:24.690 --> 00:30:26.530
and some overhead
about verification

00:30:26.530 --> 00:30:28.210
so we know to skip some things.

00:30:28.210 --> 00:30:29.990
And then we are going
to slowly over time

00:30:29.990 --> 00:30:31.820
expand that with
more native code.

00:30:31.820 --> 00:30:33.890
So, no, it's really hard
for us to do anything

00:30:33.890 --> 00:30:35.556
about just removing
the [? decks ?] file

00:30:35.556 --> 00:30:38.720
because we sort of rely
on that to get started.

00:30:38.720 --> 00:30:40.090
AUDIENCE: Thank you.

00:30:40.090 --> 00:30:42.424
GABE COHEN: And the
second question.

00:30:42.424 --> 00:30:44.465
DAVE BURKE: So when you
say integrate Google Home

00:30:44.465 --> 00:30:45.800
into Android, what do you mean?

00:30:45.800 --> 00:30:48.216
AUDIENCE: So for example, one
of the possibility-- I mean,

00:30:48.216 --> 00:30:50.470
I don't see why would you
create a new hardware?

00:30:50.470 --> 00:30:52.250
Why wouldn't you
just do a cradle

00:30:52.250 --> 00:30:55.150
where you charge your phone
and that will basically

00:30:55.150 --> 00:30:56.800
be what you talk to.

00:30:56.800 --> 00:30:59.216
I mean, my Nexus 6P is
always on microphone, right?

00:30:59.216 --> 00:31:00.590
I mean, you can
talk, OK, Google.

00:31:00.590 --> 00:31:02.040
So why do new hardware?

00:31:06.380 --> 00:31:10.410
DAVE BURKE: You definitely
don't own-- well, let's see.

00:31:10.410 --> 00:31:12.700
It's useful having an
appliance that's always there,

00:31:12.700 --> 00:31:14.158
that's hands-free,
that-- you know,

00:31:14.158 --> 00:31:17.092
because you leave your phone
down, you forget it, et cetera.

00:31:17.092 --> 00:31:19.300
So I think and appliance is
useful for that use case.

00:31:19.300 --> 00:31:21.662
You know, it works really
well in the kitchen

00:31:21.662 --> 00:31:23.870
or somewhere like that,
especially when you're, like,

00:31:23.870 --> 00:31:26.130
using your hands for the stuff.

00:31:26.130 --> 00:31:28.800
As for, like, sort of future
directions for Google Home,

00:31:28.800 --> 00:31:31.630
that's definitely, like-- yeah,
I don't want to dare comment.

00:31:31.630 --> 00:31:33.380
But, you know, we're
pretty excited by it.

00:31:33.380 --> 00:31:35.670
It's pretty cool. there's
a lot of good stuff.

00:31:35.670 --> 00:31:38.086
Some of the Android team is
actually building parts of it.

00:31:38.086 --> 00:31:40.835
Like, we demoed, like,
lights turning on and off

00:31:40.835 --> 00:31:43.080
and controlling
Nest thermostats.

00:31:43.080 --> 00:31:46.750
That's using the Weave protocol
that we announced last year.

00:31:46.750 --> 00:31:49.490
And so we're kind of
deeply involved in it,

00:31:49.490 --> 00:31:51.773
but, yeah, nothing to
announce right now.

00:31:51.773 --> 00:31:52.606
AUDIENCE: Thank you.

00:31:52.606 --> 00:31:53.397
GABE COHEN: Thanks.

00:31:53.397 --> 00:31:54.747
How about here?

00:31:54.747 --> 00:31:55.330
AUDIENCE: Hey.

00:31:55.330 --> 00:31:55.980
Thanks.

00:31:55.980 --> 00:31:58.155
So I have one question.

00:31:58.155 --> 00:32:00.530
It's great that over the last
few years we've been moving

00:32:00.530 --> 00:32:01.950
toward the Support Libraries
and the [? Compat ?]

00:32:01.950 --> 00:32:04.630
[? Libraries ?] so that we can
bring a lot of the new changes

00:32:04.630 --> 00:32:06.190
into older versions of Android.

00:32:06.190 --> 00:32:09.170
But as someone who works on
libraries more frequently,

00:32:09.170 --> 00:32:12.610
or build systems, sometimes
having the Support Repository

00:32:12.610 --> 00:32:15.170
can cause a lot of loopholes
to be jumped through,

00:32:15.170 --> 00:32:16.910
especially when
building, like, pure Java

00:32:16.910 --> 00:32:18.915
modules as opposed
to Android modules.

00:32:18.915 --> 00:32:20.415
For example, an
annotation processor

00:32:20.415 --> 00:32:22.667
that may need the dependency
on the Support Library.

00:32:22.667 --> 00:32:24.875
All of a sudden we're using
internal Gradle APIs just

00:32:24.875 --> 00:32:29.800
to access the Support Repository
during the configuration step.

00:32:29.800 --> 00:32:34.302
So my request is please upload
the artifacts to Maven Central.

00:32:34.302 --> 00:32:36.266
[APPLAUSE]

00:32:41.190 --> 00:32:42.790
TOR NORBYE: Well,
as I understand it,

00:32:42.790 --> 00:32:44.927
that doesn't allow us
to require a license,

00:32:44.927 --> 00:32:47.260
and so we'd have to have a
lawyer look at that before we

00:32:47.260 --> 00:32:49.046
could just upload them.

00:32:49.046 --> 00:32:50.394
AUDIENCE: OK.

00:32:50.394 --> 00:32:51.310
GABE COHEN: Thank you.

00:32:51.310 --> 00:32:52.239
Over here.

00:32:52.239 --> 00:32:52.780
AUDIENCE: Hi.

00:32:52.780 --> 00:32:58.510
So if I wanted to port over
Android N preview to my device,

00:32:58.510 --> 00:33:00.690
for example, like,
a Nextbit Robin,

00:33:00.690 --> 00:33:04.240
do I need to recompile
the vendor proprietary

00:33:04.240 --> 00:33:06.800
libraries to use with Clang?

00:33:06.800 --> 00:33:08.820
And also, the
firmware, like the apps

00:33:08.820 --> 00:33:10.361
bootloader an
secondary bootloader,

00:33:10.361 --> 00:33:12.330
in order to actually boot up?

00:33:17.762 --> 00:33:19.345
BRIAN: I mean, it's
sort of a-- that's

00:33:19.345 --> 00:33:22.340
a different kind of developer
than most of the people here.

00:33:22.340 --> 00:33:24.604
So we-- there is
a platform change.

00:33:24.604 --> 00:33:27.020
We're moving in the platform
itself to use Clang more than

00:33:27.020 --> 00:33:28.650
[INAUDIBLE].

00:33:28.650 --> 00:33:29.960
But there's no requirement.

00:33:29.960 --> 00:33:32.293
That's just what we're doing,
the direction we're going.

00:33:32.293 --> 00:33:34.867
But there's nothing that's
going to magically require

00:33:34.867 --> 00:33:36.350
you to use Clang to do a build.

00:33:36.350 --> 00:33:39.730
AUDIENCE: No, I mean, if I want
to use Clang for the platform,

00:33:39.730 --> 00:33:44.950
am I forced to use Clang
in the vendor libraries

00:33:44.950 --> 00:33:46.030
to be compatible?

00:33:46.030 --> 00:33:46.090
BRIAN: No.

00:33:46.090 --> 00:33:46.810
No, you don't have to.

00:33:46.810 --> 00:33:47.351
AUDIENCE: OK.

00:33:47.351 --> 00:33:49.392
BRIAN: You can mix and match.

00:33:49.392 --> 00:33:50.280
GABE COHEN: Thanks.

00:33:50.280 --> 00:33:51.170
Here?

00:33:51.170 --> 00:33:51.790
AUDIENCE: Hi.

00:33:51.790 --> 00:33:54.610
So my question is
are there any plans

00:33:54.610 --> 00:33:58.500
to launch a new
initiative like Android 1

00:33:58.500 --> 00:34:00.850
but on a more global scale?

00:34:00.850 --> 00:34:03.350
Because in many
emerging markets,

00:34:03.350 --> 00:34:06.270
there is a very big
fragmentation problem

00:34:06.270 --> 00:34:09.610
across the lower-end
phones, especially when

00:34:09.610 --> 00:34:13.980
working with hardware and the
sensors and the radio chips.

00:34:13.980 --> 00:34:17.280
So the problem is
there is not, like,

00:34:17.280 --> 00:34:20.600
a spec for the
lower-end phones, so I'm

00:34:20.600 --> 00:34:22.892
very interested in hearing
what you have to say about,

00:34:22.892 --> 00:34:26.190
you know, the
lower-end, the emerging

00:34:26.190 --> 00:34:28.250
markets and things like that.

00:34:30.424 --> 00:34:31.340
DAVE BURKE: Let's see.

00:34:31.340 --> 00:34:33.279
What can I say?

00:34:33.279 --> 00:34:35.235
We're working on stuff
internally about,

00:34:35.235 --> 00:34:42.909
like, how do we make it easier
to build a device that is great

00:34:42.909 --> 00:34:45.429
and that's easy to upgrade
and get security patches

00:34:45.429 --> 00:34:47.429
and apply new desserts.

00:34:47.429 --> 00:34:50.040
And so we're looking at sort
of the Android open source code

00:34:50.040 --> 00:34:51.739
base itself and
thinking about, well,

00:34:51.739 --> 00:34:53.739
where are the pain points
when you're upgrading

00:34:53.739 --> 00:34:56.100
a device from, say, N to O?

00:34:56.100 --> 00:34:58.470
Like, can we make it
easier for people?

00:34:58.470 --> 00:35:00.677
And it's something
we're investing time in,

00:35:00.677 --> 00:35:02.760
but I can't really talk
about the specifics of it.

00:35:02.760 --> 00:35:05.880
But the goal would
be to make it easier

00:35:05.880 --> 00:35:08.892
to build more uniform
devices, if that makes sense.

00:35:08.892 --> 00:35:09.781
AUDIENCE: OK.

00:35:09.781 --> 00:35:10.280
Thank you.

00:35:10.280 --> 00:35:11.071
GABE COHEN: Thanks.

00:35:11.071 --> 00:35:14.860
How about over
here on the right?

00:35:14.860 --> 00:35:18.120
AUDIENCE: I believe it was also
the same question [INAUDIBLE]

00:35:18.120 --> 00:35:22.910
measure diversity of the
mobile devices in the market.

00:35:22.910 --> 00:35:26.610
How can you make it
easier for the OEMs

00:35:26.610 --> 00:35:31.000
so they can just plug and
play just like a [INAUDIBLE]?

00:35:31.000 --> 00:35:34.590
Is there a new-- or is there
APIs, is there special APIs,

00:35:34.590 --> 00:35:36.510
just for the new version?

00:35:36.510 --> 00:35:41.380
Because this diversity is
making most of us as developers,

00:35:41.380 --> 00:35:47.380
I believe, frustrated because
we buy every time the latest

00:35:47.380 --> 00:35:50.410
version or the latest mobile
to have the latest version

00:35:50.410 --> 00:35:53.680
and when we start to
debug on these devices,

00:35:53.680 --> 00:35:56.000
we find a new version.

00:35:56.000 --> 00:35:57.490
Like, for example, Marshmallow.

00:35:57.490 --> 00:36:01.715
I believe it's not
more than 10% had been,

00:36:01.715 --> 00:36:05.100
until today, had been
deploying Marshmallow,

00:36:05.100 --> 00:36:06.929
and you are now
announcing Android N.

00:36:06.929 --> 00:36:08.470
GABE COHEN: Yeah,
I totally hear you.

00:36:08.470 --> 00:36:10.150
It is similar to the
previous question.

00:36:10.150 --> 00:36:12.655
Just to build on what
Dave was saying, I mean,

00:36:12.655 --> 00:36:15.190
we look at the OEM
workflow from taking,

00:36:15.190 --> 00:36:18.100
you know, AOSP from us and,
actually, even earlier drops

00:36:18.100 --> 00:36:20.320
that we give them
before we release AOSP.

00:36:20.320 --> 00:36:22.700
And we're trying to
minimize all of the work

00:36:22.700 --> 00:36:24.890
that they have to do in
order to bring up, you know,

00:36:24.890 --> 00:36:28.050
a major release or
even, like, a patch.

00:36:28.050 --> 00:36:30.650
I think that's both figuring
out what kinds of features

00:36:30.650 --> 00:36:32.500
they have to build
downstream of us

00:36:32.500 --> 00:36:35.150
so that they don't have to
build those or reconstitute them

00:36:35.150 --> 00:36:37.532
on top of the latest
code base, rebase.

00:36:37.532 --> 00:36:39.990
I think it's trying to figure
out where they're customizing

00:36:39.990 --> 00:36:41.610
things that involves
them putting code

00:36:41.610 --> 00:36:44.400
all over the system and trying
to limit where that code goes

00:36:44.400 --> 00:36:47.140
so that it's fairly
self-contained when they have

00:36:47.140 --> 00:36:49.120
to repatch against a
newer version of the OS.

00:36:49.120 --> 00:36:51.460
I mean, we're very much
thinking about that.

00:36:51.460 --> 00:36:54.110
We're working with OEMs,
talking with them constantly.

00:36:54.110 --> 00:36:56.080
I mean, a lot of
what we do is trying

00:36:56.080 --> 00:36:58.930
to figure out how to
streamline the process

00:36:58.930 --> 00:37:00.990
and make Android platform
more complete for them

00:37:00.990 --> 00:37:05.724
as consumers of the platform,
because we recognize it creates

00:37:05.724 --> 00:37:08.140
a significant amount of pain
when they make changes all up

00:37:08.140 --> 00:37:09.630
and down the stack
and it's very diverse

00:37:09.630 --> 00:37:10.690
across multiple devices.

00:37:10.690 --> 00:37:14.370
We really like it to be
contained where possible.

00:37:14.370 --> 00:37:17.740
So, I mean, it's true, but
appreciate the feedback.

00:37:17.740 --> 00:37:18.692
We're working on it.

00:37:18.692 --> 00:37:19.930
AUDIENCE: Thank you.

00:37:19.930 --> 00:37:20.721
GABE COHEN: Thanks.

00:37:20.721 --> 00:37:21.746
How about here?

00:37:21.746 --> 00:37:24.880
AUDIENCE: So I have a questions
about activity life cycles.

00:37:24.880 --> 00:37:27.316
So currently when you're
in an activity and you,

00:37:27.316 --> 00:37:28.690
you know, you
rotate your device,

00:37:28.690 --> 00:37:31.070
the whole activity
gets recreated,

00:37:31.070 --> 00:37:33.990
which is great because
you can load new resources

00:37:33.990 --> 00:37:36.110
and react to the whole thing.

00:37:36.110 --> 00:37:38.375
At the same time, this comes
with a lot of overhead.

00:37:38.375 --> 00:37:43.980
You have to somehow cache
everything and then, you know,

00:37:43.980 --> 00:37:45.470
get [INAUDIBLE] somehow.

00:37:45.470 --> 00:37:49.290
And it creates a
lot of bugs-- it

00:37:49.290 --> 00:37:50.540
tends to create a lot of bugs.

00:37:50.540 --> 00:37:52.300
It also seems very expensive
because the whole thing

00:37:52.300 --> 00:37:53.020
gets recreated.

00:37:53.020 --> 00:37:56.150
You have to instantiate
objects again.

00:37:56.150 --> 00:37:59.960
So you can obviously opt-out
and don't do anything about it,

00:37:59.960 --> 00:38:02.120
you know, but I was
wondering if you had any plan

00:38:02.120 --> 00:38:05.810
to create a more lightweight
layout handling orientation

00:38:05.810 --> 00:38:09.940
changes where, let's say,
the views can just animate

00:38:09.940 --> 00:38:11.670
to new places and that's it?

00:38:11.670 --> 00:38:16.070
All the activity variables
would just retain their state

00:38:16.070 --> 00:38:18.600
in memory instead of,
you know, developer has

00:38:18.600 --> 00:38:20.290
to deal with the whole thing.

00:38:20.290 --> 00:38:21.610
GABE COHEN: Got it.

00:38:21.610 --> 00:38:23.318
DIANNE HACKBORN: Well,
I think, you know,

00:38:23.318 --> 00:38:26.450
if you have resources
changing based on orientation,

00:38:26.450 --> 00:38:28.430
then I think that our
only choice is really

00:38:28.430 --> 00:38:29.150
to recreate it.

00:38:29.150 --> 00:38:32.110
Because trying to go and
rebuild things and load

00:38:32.110 --> 00:38:34.360
views with different resources
and that kind of stuff,

00:38:34.360 --> 00:38:36.170
I think it's just kind
of a losing battle.

00:38:36.170 --> 00:38:42.120
So if you don't want it to be
recreated, then tell it not to

00:38:42.120 --> 00:38:44.910
and do your UI based on
the orientation, based

00:38:44.910 --> 00:38:45.869
on something, yourself.

00:38:45.869 --> 00:38:47.576
You'll just have to
handle that yourself.

00:38:47.576 --> 00:38:50.070
And, you know, if you have to
do two-pane versus one-pane,

00:38:50.070 --> 00:38:51.528
or whatever you're
doing, you know,

00:38:51.528 --> 00:38:53.900
it can be relatively
easy or complicated.

00:38:53.900 --> 00:38:56.230
It just kind of depends.

00:38:56.230 --> 00:38:58.427
You know, I don't
see anything, like,

00:38:58.427 --> 00:39:00.010
in the middle between
those that we're

00:39:00.010 --> 00:39:03.810
going to do that would,
like, be really useful.

00:39:03.810 --> 00:39:05.310
ADAM POWELL: So
part of that as well

00:39:05.310 --> 00:39:07.290
is that you can
reduce the recreation

00:39:07.290 --> 00:39:09.750
time by reducing
the amount of data

00:39:09.750 --> 00:39:11.180
that needs to be recreated.

00:39:11.180 --> 00:39:14.380
Kind of that secondary data
that normally hangs off

00:39:14.380 --> 00:39:15.950
of your activity
or your fragments

00:39:15.950 --> 00:39:17.327
or whatever it may be.

00:39:17.327 --> 00:39:18.910
So if those things
can be brought down

00:39:18.910 --> 00:39:21.825
to some sort of model layer
within your application that

00:39:21.825 --> 00:39:23.847
can install persist
across those changes,

00:39:23.847 --> 00:39:26.430
then that can really alleviate
a lot of the performance issues

00:39:26.430 --> 00:39:28.140
that you might run into.

00:39:28.140 --> 00:39:28.850
AUDIENCE: Right.

00:39:28.850 --> 00:39:32.166
So there is-- I think
there are a lot of apps

00:39:32.166 --> 00:39:34.505
that all that
happens is, you know,

00:39:34.505 --> 00:39:36.700
you just changed the view.

00:39:36.700 --> 00:39:39.608
Only thing that happens-- I
mean, there is really no-- what

00:39:39.608 --> 00:39:41.066
I'm trying to say
is like there are

00:39:41.066 --> 00:39:43.830
a lot of-- for a majority
of the apps, I would say,

00:39:43.830 --> 00:39:46.486
there is really-- it's
just a view is changing.

00:39:46.486 --> 00:39:48.360
You're just, you know,
loading a new resource

00:39:48.360 --> 00:39:50.700
and moving stuff around.

00:39:50.700 --> 00:39:52.680
So I was wondering if
you guys are working on--

00:39:52.680 --> 00:39:54.170
DIANNE HACKBORN: So, well, I
mean, if the view is changing,

00:39:54.170 --> 00:39:55.912
then you can just
say, like, you know,

00:39:55.912 --> 00:39:57.620
handle the configuration
change yourself.

00:39:57.620 --> 00:40:00.330
And actually, I expect you'll
be seeing applications doing

00:40:00.330 --> 00:40:04.310
that more with Multi-Window,
because as you resize windows--

00:40:04.310 --> 00:40:07.870
you know, it becomes more
noticeably expensive when we

00:40:07.870 --> 00:40:10.340
have to recreate an activity.

00:40:10.340 --> 00:40:12.760
So there's kind of more
incentive for developers to go

00:40:12.760 --> 00:40:14.462
and handle that themselves.

00:40:14.462 --> 00:40:16.170
You know, for some
background, the reason

00:40:16.170 --> 00:40:18.730
why we did it this way
is partly because when

00:40:18.730 --> 00:40:21.240
we did the Android and the
whole saving and restoring state

00:40:21.240 --> 00:40:23.239
and all that kind of stuff
and killing processes

00:40:23.239 --> 00:40:25.930
wasn't really something people
had ever really done before.

00:40:25.930 --> 00:40:29.122
And so we really wanted to
encourage the developers,

00:40:29.122 --> 00:40:30.580
like, you have to
actually do that.

00:40:30.580 --> 00:40:32.660
And so making the
orientation change,

00:40:32.660 --> 00:40:34.930
which the G1 really
had to support because

00:40:34.930 --> 00:40:37.350
of the physical
screen moving, really

00:40:37.350 --> 00:40:39.047
kind of helped us
push that into, like,

00:40:39.047 --> 00:40:40.880
well, developers stating
and restoring state

00:40:40.880 --> 00:40:42.630
is really important,
so you need to do it.

00:40:42.630 --> 00:40:44.860
If you do it here, you'll
get to take advantage of it

00:40:44.860 --> 00:40:45.930
everywhere else.

00:40:45.930 --> 00:40:48.830
And so that kind of gave a
kind of common push into that.

00:40:48.830 --> 00:40:50.650
And, you know, these
days I think people

00:40:50.650 --> 00:40:53.010
understand that more so
it's not nearly as, like,

00:40:53.010 --> 00:40:55.480
important to really, you
know, push developers

00:40:55.480 --> 00:40:56.300
in that direction.

00:40:56.300 --> 00:40:57.841
And like I said, I
think Multi-Window

00:40:57.841 --> 00:40:59.640
is going to be starting
to, like, have us,

00:40:59.640 --> 00:41:03.150
you know, kind of more--
there's more encouraging of them

00:41:03.150 --> 00:41:06.217
handling the resizing
and stuff yourself.

00:41:06.217 --> 00:41:07.050
AUDIENCE: Thank you.

00:41:07.050 --> 00:41:08.383
GABE COHEN: How about over here?

00:41:08.383 --> 00:41:10.525
And by the way, we're
running a little low on time,

00:41:10.525 --> 00:41:12.025
so we're probably
going to get maybe

00:41:12.025 --> 00:41:13.459
two more questions out of this.

00:41:13.459 --> 00:41:14.000
AUDIENCE: OK.

00:41:14.000 --> 00:41:15.990
I'll make mine quick.

00:41:15.990 --> 00:41:21.260
Can you offer anything on
pressure-sensitive screen touch

00:41:21.260 --> 00:41:21.980
support?

00:41:21.980 --> 00:41:23.396
Can you share
anything officially?

00:41:29.480 --> 00:41:31.449
Or unofficially?

00:41:31.449 --> 00:41:33.490
DAVE BURKE: I can tell
you how we think about it.

00:41:33.490 --> 00:41:38.540
We think of it as really just
an accelerator of long press,

00:41:38.540 --> 00:41:40.010
which is sort of what it is.

00:41:40.010 --> 00:41:42.910
What we don't want to do is
have a system that's, you know,

00:41:42.910 --> 00:41:46.807
you don't want have, like, tap,
long press, force press, right?

00:41:46.807 --> 00:41:48.473
We think that long
press and force press

00:41:48.473 --> 00:41:49.320
should be the same thing.

00:41:49.320 --> 00:41:50.945
The advantage of it
is that force press

00:41:50.945 --> 00:41:54.510
means you get there-- you don't
have to have a timer and wait.

00:41:54.510 --> 00:41:57.500
And then I guess there's, like,
shortcut APIs and stuff that

00:41:57.500 --> 00:41:59.880
came and went?

00:41:59.880 --> 00:42:01.384
You want to take that?

00:42:01.384 --> 00:42:02.800
DAN SANDLER: I
dont' know, Rachel,

00:42:02.800 --> 00:42:04.675
if you want to say
something about this, too.

00:42:04.675 --> 00:42:06.750
But, yeah, I'll second
what Dave said about UI.

00:42:06.750 --> 00:42:08.654
We haven't yet seen
a compelling case

00:42:08.654 --> 00:42:10.320
where users can
meaningfully distinguish

00:42:10.320 --> 00:42:12.750
between the force press and
the length of the press.

00:42:12.750 --> 00:42:15.402
But I should say that if
you are building a device

00:42:15.402 --> 00:42:17.360
and you want to put a
panel like that in there,

00:42:17.360 --> 00:42:19.810
we already have excellent
APIs in MotionEvent for you

00:42:19.810 --> 00:42:22.591
to be able to capture the exact
pressure that's being applied

00:42:22.591 --> 00:42:23.590
to the screen right now.

00:42:23.590 --> 00:42:25.900
So any app that is looking
at these pressure APIs,

00:42:25.900 --> 00:42:28.216
maybe because they're
using the capacitive sort

00:42:28.216 --> 00:42:30.840
of approximation of pressure you
get from a lot of displays now

00:42:30.840 --> 00:42:32.870
or because there's an
actual stylus attached

00:42:32.870 --> 00:42:35.127
with an active pen
tip, those apps

00:42:35.127 --> 00:42:37.460
would get access to that
pressure as well as long as you

00:42:37.460 --> 00:42:42.500
plumb it up to the correct
slots in Input Manager.

00:42:42.500 --> 00:42:44.936
GABE COHEN: OK, maybe
last question here?

00:42:44.936 --> 00:42:45.970
AUDIENCE: OK.

00:42:45.970 --> 00:42:47.189
I have two questions.

00:42:47.189 --> 00:42:47.980
My first question--

00:42:47.980 --> 00:42:48.830
GABE COHEN: No, no.

00:42:48.830 --> 00:42:50.440
There's only one last question.

00:42:50.440 --> 00:42:53.860
AUDIENCE: OK So
it's regarding UX.

00:42:53.860 --> 00:42:57.110
I feel like she's left out.

00:42:57.110 --> 00:43:00.700
UX, the navigation
within the activities,

00:43:00.700 --> 00:43:02.300
is changing all the time.

00:43:02.300 --> 00:43:07.010
First we have the action-- first
we have Tabs then Action Bars

00:43:07.010 --> 00:43:08.970
then Hamburger Menu.

00:43:08.970 --> 00:43:10.970
And I don't see any
consistency even

00:43:10.970 --> 00:43:13.840
within the Google Applications.

00:43:13.840 --> 00:43:16.240
I mean, YouTube changed
from a Hamburger Menu

00:43:16.240 --> 00:43:20.380
than Tabs, Google Play,
et cetera, et cetera.

00:43:20.380 --> 00:43:26.140
And it's hard to keep changing
the user's navigation.

00:43:26.140 --> 00:43:29.580
So what do you think is the
best navigation system today

00:43:29.580 --> 00:43:30.841
to offer to the user?

00:43:30.841 --> 00:43:32.340
RACHEL GARB: Well,
it really depends

00:43:32.340 --> 00:43:34.350
on the structure of your app.

00:43:34.350 --> 00:43:37.260
The reason why you're seeing
more navigation patterns come

00:43:37.260 --> 00:43:40.000
into place is there's
more variety of things

00:43:40.000 --> 00:43:40.890
that people do.

00:43:40.890 --> 00:43:44.400
So, I mean, your best source
is the material design spec,

00:43:44.400 --> 00:43:46.940
and it will provide
tips and tricks

00:43:46.940 --> 00:43:51.660
on when to use the Hamburger
Menu, [? Nav Drawer ?] verses

00:43:51.660 --> 00:43:57.370
Bottom Tabs verses Top Tabs
and other patterns like that.

00:43:57.370 --> 00:44:00.570
But, you know, when you
have, let's say, a really big

00:44:00.570 --> 00:44:02.040
information hierarchy
and you have

00:44:02.040 --> 00:44:04.816
lots of different sections,
a Navigation Drawer

00:44:04.816 --> 00:44:06.940
is great for that because
you can have a long list.

00:44:06.940 --> 00:44:08.610
You know, there's a
lot more room than,

00:44:08.610 --> 00:44:11.130
like, horizontally
scrolling through Top Tabs.

00:44:11.130 --> 00:44:14.580
Bottom tabs are
good if you have,

00:44:14.580 --> 00:44:18.100
let's say, two or three
or four just really

00:44:18.100 --> 00:44:21.990
core equally important
sections in your app.

00:44:21.990 --> 00:44:24.360
Then that's good and people
can switch between them.

00:44:24.360 --> 00:44:26.187
You know, we're
always-- our teams

00:44:26.187 --> 00:44:28.020
throughout Google-- are
always experimenting

00:44:28.020 --> 00:44:31.820
with new patterns, new needs,
and our Material Design

00:44:31.820 --> 00:44:33.862
Team works with them
and then, you know,

00:44:33.862 --> 00:44:35.910
we work on coming
up with a standard

00:44:35.910 --> 00:44:38.912
that then we can publish
and share with everybody.

00:44:38.912 --> 00:44:39.620
GABE COHEN: Cool.

00:44:39.620 --> 00:44:40.110
Thank you.

00:44:40.110 --> 00:44:41.609
That's all the
questions we're going

00:44:41.609 --> 00:44:43.910
to be able to take up here,
but thank you so much.

00:44:43.910 --> 00:44:45.110
[APPLAUSE]

00:44:47.510 --> 00:44:50.860
[MUSIC PLAYING]

