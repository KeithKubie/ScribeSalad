WEBVTT
Kind: captions
Language: en

00:00:00.337 --> 00:00:03.035
&amp;gt;&amp;gt; So the project that you're best known for

00:00:03.035 --> 00:00:05.540
when you were a graduate student is this Brooke Project.

00:00:05.540 --> 00:00:07.580
So can you tell us a little bit about that?

00:00:07.580 --> 00:00:11.374
And this was a very important step in sort of the progression of GPU computing

00:00:11.374 --> 00:00:13.658
to something that we can do commercially today.

00:00:13.658 --> 00:00:17.953
&amp;gt;&amp;gt; Yeah, back in the Direct X 9 days of computer graphics,

00:00:17.953 --> 00:00:21.348
GPUs started becoming truly programmable.

00:00:21.348 --> 00:00:26.208
People could express real programs, fairly short ones, maybe only 4 to 8 instructions long,

00:00:26.208 --> 00:00:29.752
that can actually solve a shading problem

00:00:29.752 --> 00:00:33.706
like face, skin, shade, fairly complicated stuff.

00:00:33.706 --> 00:00:35.521
A bunch of us in academia

00:00:35.521 --> 00:00:38.457
noticed that the performance of these GPUs was huge

00:00:38.457 --> 00:00:40.707
compared to CPUs of the day.

00:00:40.707 --> 00:00:44.040
The number of floating point operations you could do was an order of magnitude larger.

00:00:44.040 --> 00:00:47.088
So we studied and looked at how you could use GPUs

00:00:47.088 --> 00:00:49.494
for more general purpose things

00:00:49.494 --> 00:00:52.931
by hacking graphics APIs like Direct X.

00:00:52.931 --> 00:00:56.359
The research--a lot of people showed that was doable.

00:00:56.359 --> 00:00:59.957
&gt;&gt; But it was really hard. &gt;&gt; It was really hard to program.

00:00:59.957 --> 00:01:02.541
In fact, you needed a PhD in computer graphics

00:01:02.541 --> 00:01:05.081
to do even basic mathematical kind of stuff.

00:01:05.081 --> 00:01:07.705
In fact, there were folks in finance that were hiring

00:01:07.705 --> 00:01:12.200
game programmers to try to hack GPUs to solve financial problems.

00:01:12.200 --> 00:01:17.209
The research I did was basically study the more fundamental programming model around GPUs.

00:01:17.209 --> 00:01:22.043
What was it about GPUs that made them programmable and parallel

00:01:22.043 --> 00:01:25.539
but also present a more cohesive program model

00:01:25.539 --> 00:01:28.037
to general programmer

00:01:28.037 --> 00:01:30.834
to let them think about GPUs in a more general way.

00:01:30.834 --> 00:01:32.541
In the end, the project was called Brook.

00:01:32.541 --> 00:01:35.122
It was an actual software programming language

00:01:35.122 --> 00:01:37.288
for how to program in a general way GPUs

00:01:37.288 --> 00:01:40.370
on top of its existing graphic APIs

00:01:40.370 --> 00:01:43.852
so that users could think about more general data concepts

00:01:43.852 --> 00:01:46.370
instead of triangles and pixels and textures.

00:01:46.370 --> 00:01:48.587
&amp;gt;&amp;gt; What sort of things did people write in Brook?

00:01:48.587 --> 00:01:51.588
&amp;gt;&amp;gt; We wrote Raytracer to sort of study

00:01:51.588 --> 00:01:54.526
could a GPU actually implement a Raytracer,

00:01:54.526 --> 00:01:57.539
which is a fun thing, because lot of people said it couldn't be done.

00:01:57.539 --> 00:02:00.080
We did triangle meshing.

00:02:00.080 --> 00:02:04.119
We did a lot of simulation and grid kinds of stuff,

00:02:04.119 --> 00:02:09.369
thermodynamic problems, heat transfer problems, fluid flow kinds of problems.

00:02:09.369 --> 00:02:11.372
For the most part, it worked.

00:02:11.372 --> 00:02:14.370
It demonstrated the performance benefit.

00:02:14.370 --> 00:02:16.107
It was still early.

00:02:16.107 --> 00:02:17.943
They weren't fully general,

00:02:17.943 --> 00:02:19.870
so you did have to work around some of the hiccups,

00:02:19.870 --> 00:02:21.702
but from a research perspective,

00:02:21.702 --> 00:02:25.000
it achieved its goal of showing the potential of GPU computing.

