WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:10.280
&gt;&gt; RABBAT: Hi and welcome all to Bootcamp,
IO Bootcamp. Today we'll be talking about

00:00:10.280 --> 00:00:16.730
optimizing web performance for success. My
co-presenters are Andrew Oates and Shawn Ligocki.

00:00:16.730 --> 00:00:25.199
I'M Richard Rabbat. And we will be taking
turns. But first agenda, I will be motivating

00:00:25.199 --> 00:00:31.810
why one needs to pay attention to speed, motivating
it obviously by revenue. Everybody is very

00:00:31.810 --> 00:00:40.160
interested in making money on the web. Then
Andrew will be talking about a new API that

00:00:40.160 --> 00:00:46.120
we're releasing today which is the Page Speed
Online API. He will have a really cool demo

00:00:46.120 --> 00:00:54.299
about it. And finally, Shawn will be presenting
mod_pagespeed which is an Apache module that

00:00:54.299 --> 00:01:02.309
allows you to speed up your webpages automatically.
So performance equals revenue. Let's talk

00:01:02.309 --> 00:01:06.771
a little bit about what's been happening with
webpages over the past few months. This is

00:01:06.771 --> 00:01:14.729
data from HTTP Archive. I picked the data
about images as well as JavaScript transfer

00:01:14.729 --> 00:01:24.219
size. And from November of last year through
March of this year images--images on webpages

00:01:24.219 --> 00:01:30.929
have gone bigger. There's more images and
they are getting bigger. These are for the--about

00:01:30.929 --> 00:01:38.479
10,000 like top webpages on the web [INDISTINCT]
over 10,000. If you look at the JavaScript

00:01:38.479 --> 00:01:44.899
it's also slowly growing into--in terms of
the amount of JavaScript that your browser

00:01:44.899 --> 00:01:52.930
has to interpret and execute. Obviously, pages
are--on the web are getting richer. The Pickle

00:01:52.930 --> 00:02:00.139
Page that used to have a little bit of HTML
and some nice style sheet is now a much more

00:02:00.139 --> 00:02:05.130
complex web application. And one needs to
pay attention to the performance of these

00:02:05.130 --> 00:02:14.629
pages because they directly relate to how
people approach and use the web, more data

00:02:14.629 --> 00:02:21.780
from HTTP Archive that was released over a
month ago. If we look at things that we need

00:02:21.780 --> 00:02:29.610
to pay attention to when optimizing webpages,
the--we can correlate that with the load time.

00:02:29.610 --> 00:02:36.599
And if you look at column number 3, for example,
total requests are a direct--almost a direct

00:02:36.599 --> 00:02:43.080
correlation with the load time. And there's
two pieces that you should always pay attention

00:02:43.080 --> 00:02:50.269
to, which is the image transfer size. It has
a very good correlation with the load time

00:02:50.269 --> 00:02:57.730
of the page. As well as at the end, the JavaScript
request, they're very well correlated with

00:02:57.730 --> 00:03:03.540
the page load time. So when somebody pays
attention to optimization of images as well

00:03:03.540 --> 00:03:14.299
as JavaScript, that helps a lot directly in
speeding up your webpages. And how does load

00:03:14.299 --> 00:03:19.080
time impact success? Here's some data from
several websites out there. Amazon.com did

00:03:19.080 --> 00:03:22.390
a study where they saw for every hundredth
millisecond latency decrease, they would increase

00:03:22.390 --> 00:03:30.930
their revenue by 1%. You can imagine that
the scale of Amazon.com, that's quite a bit

00:03:30.930 --> 00:03:41.290
of money. Edmunds.com worked with us last
year. They were working on optimizing their

00:03:41.290 --> 00:03:49.599
webpages. They used Page Speed to look at
how they can optimize their pages and this

00:03:49.599 --> 00:03:58.300
resulted to about 50% load time, load time
decrease. The impact on this was about 17%

00:03:58.300 --> 00:04:04.040
page views per session. And who wouldn't want
to increase their pages? This is by focusing

00:04:04.040 --> 00:04:11.739
on speed alone. Strangeloop Networks which
builds boxes that allow you to optimize webpages

00:04:11.739 --> 00:04:19.500
on the fly. Did some analysis on consumer
behavior and they looked at like the consumer

00:04:19.500 --> 00:04:29.940
behavior of a three second delay on what would
happen? And for 100 consumer visits, three

00:04:29.940 --> 00:04:36.490
second delays would make sure that about--little
bit under 60% of people will just drop off

00:04:36.490 --> 00:04:43.020
and leave your website. About 50% of them
will not return to your website. And that's

00:04:43.020 --> 00:04:49.700
very important. And worse than this, they're
going to tell others not to go to your website.

00:04:49.700 --> 00:05:01.260
So paying attention to speed is critical for--to
your success on the web. So I'd like to welcome

00:05:01.260 --> 00:05:08.100
Andrew to talk about Page Speed Online API.
&gt;&gt; OATES: Thanks. Hi, I'm Andrew Oates. I

00:05:08.100 --> 00:05:12.800
work on the Page Speed Team based out of Cambridge.
And I'm going to talk about the brand new

00:05:12.800 --> 00:05:17.280
Page Speed Online API. So first, a little
bit of background of the Page Speed Project.

00:05:17.280 --> 00:05:21.641
Page Speed is a tool that helps web developers
speed up their websites by applying sort of

00:05:21.641 --> 00:05:28.290
well known web performance best practices.
We launched in 2008 originally as a Firefox

00:05:28.290 --> 00:05:32.520
Extension. And then in 2009, we released the
Page Speed SDK which lets you sort of build

00:05:32.520 --> 00:05:37.810
tools on top of the Page Speed library. Then
most recently, we launched the Chrome Extension

00:05:37.810 --> 00:05:42.930
and Page Speed Online. And so the way Page
Speed work is we have a collection of rules.

00:05:42.930 --> 00:05:47.270
Each of which encapsulates a single best practice.
Something like minifying your resources or

00:05:47.270 --> 00:05:53.620
optimizing your images or doing asynchronous
patches. By one sort of piece of consistent

00:05:53.620 --> 00:05:57.780
feedback we've gotten from developers is that
they want a way to run the Page Speed analysis

00:05:57.780 --> 00:06:01.930
on their sites and get back sort of an easy
to consume machine readable format and do

00:06:01.930 --> 00:06:07.090
this really easy without having to load up
a browser and script it or to do a compile

00:06:07.090 --> 00:06:11.550
against the SDK. And so that's what we're
launching today. It's a new online API that

00:06:11.550 --> 00:06:16.930
lets you do that. How does it work? It's super
simple. So you can see it at the top, you

00:06:16.930 --> 00:06:22.580
the developer make a simple HTTP request to
our servers. Give us a URL to fetch, we will

00:06:22.580 --> 00:06:26.751
go out and fetch and render that URL, then
run the Page Speed library on it and then

00:06:26.751 --> 00:06:33.250
give you back the results in sort of a standard
JSON format. So here's an example. The top

00:06:33.250 --> 00:06:43.360
is just a URL you might fetch from. So googleapis.com/pagespeedonline/v1/runpagespeed,
URL equals--give a URL and then the key equals

00:06:43.360 --> 00:06:48.670
your developer keys. So if you've worked with
Google APIs before, you're familiar with the

00:06:48.670 --> 00:06:51.860
developer keys. Based with a token that you
used to authenticate your request and lets

00:06:51.860 --> 00:06:57.540
you control and track your usage. And I also
have little Python snippet here that illustrates

00:06:57.540 --> 00:07:04.210
how you could use it in a language. The response
looks like this, standard JSON. We have the

00:07:04.210 --> 00:07:08.990
URL you passed in, a response code and title.
We give you the Page Speed score. So if you're

00:07:08.990 --> 00:07:12.530
not familiar with Page Speed, the Page Speed
scores and numbers, 0 to 100, it basically

00:07:12.530 --> 00:07:16.740
says "How well are you doing?" Low score is
bad. You have a lot of room for improvement

00:07:16.740 --> 00:07:19.530
and a high score is good. You're, you know,
applying lots of the best practices that we

00:07:19.530 --> 00:07:24.280
know about. We're using stats about your webpage
and then down in this format results block,

00:07:24.280 --> 00:07:29.670
we have a chunk for each rule that we apply.
So avoid bad requests, I guess, google.com

00:07:29.670 --> 00:07:34.410
didn't have any bad requests. So we got a
hundred on that. And then this, you know,

00:07:34.410 --> 00:07:41.950
continues on, past the bottom of the slide.
So that's all of my slides. Let's do a demo

00:07:41.950 --> 00:07:47.850
because that's what we're all here about.
All right. So first, let's just take a look

00:07:47.850 --> 00:08:00.470
at the request response. So I'll take it out.
So here we're going to run Page Speed on www.google.com

00:08:00.470 --> 00:08:06.150
and that's my developer key, don't steal it.
And here's the result. All right. So we fetch

00:08:06.150 --> 00:08:10.980
it, we got a 200, still get a 99 from when
I made the slide. And you can see here these--all

00:08:10.980 --> 00:08:15.170
those rules I was telling you about. So avoid
bad requests, avoid CSS import, defer parsing

00:08:15.170 --> 00:08:20.590
of JavaScript, et cetera and looks like here's
one that we fail, Minify HTML. So we get 99

00:08:20.590 --> 00:08:25.230
on. That's still pretty good. And then we
have these sort of chunks that let you format

00:08:25.230 --> 00:08:28.150
this. So this will be great if you're building
a tool to present to the users. And actually

00:08:28.150 --> 00:08:32.250
if you use Page Speed Online or any of the
Page Speed products, we use this exact same

00:08:32.250 --> 00:08:38.209
API and sort of various forms internally.
So you can build the same tools that we have.

00:08:38.209 --> 00:08:44.569
We're also launching with the 40 language
support. So let say locale=korean. Oh, and

00:08:44.569 --> 00:08:49.620
hey avoid, bad request. That's how you say
avoid bad request in Korean, I guess, I don't

00:08:49.620 --> 00:08:55.649
speak Korean. So now, I'm going to show you
a quick demo of how you could use this in

00:08:55.649 --> 00:09:01.649
your development environment. So I put together
a little website, "Andrew's vacation photos."

00:09:01.649 --> 00:09:11.060
And it's my vacation photos. Really simple,
has some images on them, since CSS. Let's

00:09:11.060 --> 00:09:17.970
take a look at what it looks like. Well, it's
five images but I really care about web performance.

00:09:17.970 --> 00:09:21.699
I want people who come to see my vacation
photos to have a really snappy experience.

00:09:21.699 --> 00:09:27.380
So I have the script, I call it push_and_test.py.
And basically what it does is it lets me push

00:09:27.380 --> 00:09:31.730
a new version of the site to App Engine, this
is hosted on App Engine. And then tested to

00:09:31.730 --> 00:09:34.920
an AV comparison against the old version and
see what's changed. So you can--don't worry

00:09:34.920 --> 00:09:40.910
about the push version script, that does some
fancy stuff with hashes in the App Engine

00:09:40.910 --> 00:09:44.339
environment. And now I have this function
test URL that basically, it reads the webpage

00:09:44.339 --> 00:09:49.589
and counts number of image tags and make sure
that it's greater than two. So let's give

00:09:49.589 --> 00:09:59.060
this a shot. Push_and_test.py. Ah, and there
were no changes. Testing, okay, great. Now

00:09:59.060 --> 00:10:04.620
let's see how we can integrate the Page Speed
tool with this. So is that a function? If

00:10:04.620 --> 00:10:12.779
you don't know Python, you should be able
to follow along. Anyways it's pretty simple.

00:10:12.779 --> 00:10:17.220
GetPageSpeedResults, taken a target URL, it's
the URL of the site we want to analyze. So

00:10:17.220 --> 00:10:26.410
let's split up our URL parameters. Target_url
and my developer key, which I don't remember.

00:10:26.410 --> 00:10:37.220
So you can get this if you go to the APIs
console. Just sign up. Enable Page Speed Online

00:10:37.220 --> 00:10:44.100
API and we're live right now. And you can
get your own developer key and then try this

00:10:44.100 --> 00:10:54.480
out. All right. So now to construct our URL.
So we want https://www.googleapis.com/pagespeedonline/v1/runpagespeed

00:10:54.480 --> 00:11:01.839
which is the only thing we can do. And then
we're just going to encode that URL parameters

00:11:01.839 --> 00:11:19.360
as a string. All right. Let's fetch that URL,
and then let's parse it to JSON. So I like

00:11:19.360 --> 00:11:26.660
Python a lot because you can do this pretty
easily. Load string response. All right. So

00:11:26.660 --> 00:11:32.230
you can see, I have two URLs here: andrews-vacation-photos
and 0.latest.andrews-vacation-photos. I'll

00:11:32.230 --> 00:11:41.850
explain that the next time we're waiting for
App Engine. So, let's get our Page Speed results

00:11:41.850 --> 00:12:00.339
for both of those. Analyzing old page, stable
URL. Analyzing the new page and lets do test

00:12:00.339 --> 00:12:06.330
URL. And we can delete this old stuff. All
right. So let's just make sure this will work.

00:12:06.330 --> 00:12:15.830
And let's print out the results that we get.
And let's give it a shot. And like the old

00:12:15.830 --> 00:12:21.490
page, analyzing the new page and that looks
like JSON, awesome. You notice it takes a

00:12:21.490 --> 00:12:23.699
few seconds because we have to fetch the page
and render it and do all this analysis on

00:12:23.699 --> 00:12:33.029
it. So now let's look at the Page Speed score.
So let's say if the old result's score is

00:12:33.029 --> 00:12:48.579
greater than the new result score, score decreased,
it's a hard word. And then we'll print the

00:12:48.579 --> 00:13:00.410
old results and the new results. Otherwise,
we're doing okay. We haven't introduced any

00:13:00.410 --> 00:13:10.449
regressions. And let's print the page we'd
score for good measure. Old results, all right.

00:13:10.449 --> 00:13:22.689
Oh, new results. Thank you. Feel free to speak
up if I screw up. All right. Analyze the old

00:13:22.689 --> 00:13:28.029
page, new page, okay. Page Speed score 84.
Okay. So I have some room for improvement.

00:13:28.029 --> 00:13:33.760
But I haven't introduced any problems which
is true because I haven't made any changes.

00:13:33.760 --> 00:13:36.930
So let's make a change. Let's say I want to
adjust my site up with some jQuery and I have

00:13:36.930 --> 00:13:44.329
it comment it out here because I can't remember
the URL. So we're going to load from the Google

00:13:44.329 --> 00:13:48.300
hosted version. If you've used it before you
might notice I'm not loading the minified

00:13:48.300 --> 00:14:00.259
version, that's my mistake. And we'll see
why in a second. Type rules. And let's say

00:14:00.259 --> 00:14:17.829
whenever you mouse over an image, let's give
it a red boarder because I like gaudy things.

00:14:17.829 --> 00:14:26.510
[INDISTINCT]. All right. Let's push and test.
Okay, so here's the App Engine magic. So App

00:14:26.510 --> 00:14:30.209
Engine lets you upload multiple versions of
a site. So I'm using that to my advantage

00:14:30.209 --> 00:14:34.040
here because I'm uploading one version but
keeping the old version around. And then I

00:14:34.040 --> 00:14:38.330
can do an AV comparison. That does an exponential
back up. Okay? Analyzing old page, analyzing

00:14:38.330 --> 00:14:47.850
new page, score decreased 84 to 74. Lets just
double check and make sure that its doing

00:14:47.850 --> 00:14:55.180
what I think its doing. Refresh. Yes, that's
working, for some definition of working. Score

00:14:55.180 --> 00:14:58.420
decreased 84 to 74. So in this case, it's
pretty simple to figure what I did wrong.

00:14:58.420 --> 00:15:02.491
I only added one chunk, right? But let's say
I did a really complex change and I want to--I

00:15:02.491 --> 00:15:10.870
want to know more about what's going, so I
can do that. So let's go back to the script,

00:15:10.870 --> 00:15:20.959
okay. So let's add a new function. Let's call
it compare results. It's the old results,

00:15:20.959 --> 00:15:28.370
new results, and as you saw briefly, we give
the results, they're formatted and then we

00:15:28.370 --> 00:15:33.679
have the structure called rule results which
is a dictionary which map from rule names

00:15:33.679 --> 00:15:38.800
to result blocks, so we add it for the new
and the old. All right, so now, let's say,

00:15:38.800 --> 00:15:46.459
for every page speed rule in the old one--in
the old results and I was going to assume

00:15:46.459 --> 00:15:50.929
that the page speed library didn't change
between these two implications. It's a fair

00:15:50.929 --> 00:15:58.689
assumption for this demo. Let's say if the
old--get the result block and let's say rule

00:15:58.689 --> 00:16:07.350
score, so we also assign the score to each
rule, is the gray of them, the same thing

00:16:07.350 --> 00:16:12.649
in the new results block that means of this
rule, the score is decreased, so it's a pretty

00:16:12.649 --> 00:16:18.279
good bet that this is the chain that's causing
a problem. Let's print a rule is triggered.

00:16:18.279 --> 00:16:25.589
And then let's give the localized name of
the rule, so if you were--if you're making

00:16:25.589 --> 00:16:29.689
this--if you're making this tool to publish
for instance, you could the grab the locale

00:16:29.689 --> 00:16:34.230
out of--from the client and they would see
these strings, well, not the strings you're

00:16:34.230 --> 00:16:41.810
writing but any page with strings they would
see in whichever the locale you choose. All

00:16:41.810 --> 00:16:45.990
right, I think that will work. All right,
so if old results score, grade a new results

00:16:45.990 --> 00:16:52.200
scores, let's also do compare results, old
results, new results. All right, cross your

00:16:52.200 --> 00:17:02.230
fingers. And there's old and there's new score,
decreased 84-74, rule triggered Defer parsing

00:17:02.230 --> 00:17:05.610
of JavaScript and Minify JavaScript. Okay,
so some of you do a JavaScript. Let's say

00:17:05.610 --> 00:17:09.160
that I only have a few minutes. I really want
to fix something, which one of these is more

00:17:09.160 --> 00:17:15.150
important. Well, page speed can tell us. We
also sign something called an impact to each

00:17:15.150 --> 00:17:20.100
rule. So basically, the score will tell you
how badly did you do on this rule. So you

00:17:20.100 --> 00:17:23.650
get a zero on a rule, right? That means that
you're doing really badly on it but if it

00:17:23.650 --> 00:17:27.339
only affects one teeny tiny part of your page,
you probably don't care that much. There could

00:17:27.339 --> 00:17:31.680
be another rule that you did okay on, maybe
got a 75 but it affects a large portion of

00:17:31.680 --> 00:17:34.830
your page and you will get a lot more out
of fixing that and that's what the impact

00:17:34.830 --> 00:17:40.620
means. So let's add the impact here. So we
know which one--what we want to fix. It's

00:17:40.620 --> 00:17:51.990
going to run over in my line, so new rule
results, get the rule and rule impact. And

00:17:51.990 --> 00:17:54.890
all of this is documented. You can just stick
in and play around and take a look at it,

00:17:54.890 --> 00:18:09.330
they're also all documented on the code site.
So let's try again, oops, will that change?

00:18:09.330 --> 00:18:24.910
Did I not close my bracket? Well, that's odd,
I think let's try this in a four set push

00:18:24.910 --> 00:18:32.730
new version again and see, so let's check
to make sure it's--hey, it's still doing the

00:18:32.730 --> 00:18:44.940
add jQuery thing. So we say caching headers
on the page speed responses, so if there was

00:18:44.940 --> 00:18:49.380
weird cache in between page speed and me right
now that might--there we go, perfect. Okay,

00:18:49.380 --> 00:18:55.830
score decrease 84-74. Rules triggered Defer
parsing JavaScript, impact 1.0 whatever. Minify

00:18:55.830 --> 00:19:01.740
JavaScript impact 9.3. Okay, so Minify JavaScript
has a lot more impact on my page in deferring

00:19:01.740 --> 00:19:06.120
parsing event. So let's focus on fixing that.
So let's edit, index I can move back up I

00:19:06.120 --> 00:19:12.771
forgot to use minified version. Fortunately,
I can just add that. So minification, if you

00:19:12.771 --> 00:19:17.800
don't know, is basically process of removing
anything extra, so your JavaScript file will

00:19:17.800 --> 00:19:21.260
have, you know, comments in white space, that
aren't necessarily the [INDISTINCT] JavaScript,

00:19:21.260 --> 00:19:24.270
but necessary for reading it, so when you
minify, you strip all that out and you can

00:19:24.270 --> 00:19:31.250
make your page run a lot faster or the resource
load a lot faster. Now, let's run it and see

00:19:31.250 --> 00:19:41.930
what happens. It's going to push again, waiting
two seconds, four seconds and this is really

00:19:41.930 --> 00:19:47.640
a simple example, so we're designing this
so people can build page speed like tools.

00:19:47.640 --> 00:19:52.250
Okay, page speed score 86, so we fixed the
problem. You also notice the score, it's a

00:19:52.250 --> 00:19:55.820
little cut off, that's okay. The score went
up a little bit. The reason for that is we

00:19:55.820 --> 00:20:01.880
made our page heavier. We got--we added a
whole bunch of JavaScript to it and so as

00:20:01.880 --> 00:20:05.250
a result any deficiencies that we have before
sort of matter less of the grand scheme of

00:20:05.250 --> 00:20:09.460
things that's why our page speed score went
by a few points. And so that's an example

00:20:09.460 --> 00:20:14.310
of how in just a few minutes, we--I integrated
the API, build this regression testing tool

00:20:14.310 --> 00:20:18.210
that will help me catch these performance
bugs, you know, maybe I would have launched

00:20:18.210 --> 00:20:22.980
the site without realizing it. I would have--two
months later found out that I've been losing

00:20:22.980 --> 00:20:39.900
traffic because of this regression. All right,
let's go back to presentation. We lost our

00:20:39.900 --> 00:20:47.210
place. So we're launching us today, you can
go try that now. Also launching today is W3

00:20:47.210 --> 00:20:53.570
Total Caches is adding Integration with us,
so here's the screen shot that the [INDISTINCT]

00:20:53.570 --> 00:20:58.441
cache on us, showing--this is the exact same
UI that we have in all of our page speed products.

00:20:58.441 --> 00:21:04.230
We integrated it with the page speed online
API and just inserted it right into this performance

00:21:04.230 --> 00:21:08.420
dash board. And that's a sort of--that's a
sort of part of integration and tools we want

00:21:08.420 --> 00:21:11.970
to encourage with this. It's basically lower
the barrier to entry to using the page speed

00:21:11.970 --> 00:21:19.040
library in a tools and work flows and a lot
of the good stuff. If you want to learn more,

00:21:19.040 --> 00:21:28.040
that's a giant Q, our code for our docs. as
well as the actual URL and the goo.goalurl

00:21:28.040 --> 00:21:32.550
you can scan that in and get started right
away and that's all I have. Going to hand

00:21:32.550 --> 00:21:40.010
it off to Shawn who will talk about mod_pagespeed.
&gt;&gt; LIGOCKI: Hey, how are you guys doing? I'm

00:21:40.010 --> 00:21:47.780
Shawn Ligocki and I'll be talking about mod_pagespeed.
Now--mod_pagespeed is--the idea is to automate

00:21:47.780 --> 00:21:53.640
some of these rules--these page speed best
practices on a server so that you don't have

00:21:53.640 --> 00:21:59.330
to do it yourself. Right now it's the Apache
Web server plug in and it reverts your HTML

00:21:59.330 --> 00:22:04.590
and your resources and it's an open source
product. You might ask, "Why do I need to

00:22:04.590 --> 00:22:09.800
use mod_pagespeed?" Can't I just implement
all these optimizations myself? And there's

00:22:09.800 --> 00:22:13.710
a couple of reasons you might want have something
automated but one of them is that a number

00:22:13.710 --> 00:22:17.340
of these things specifically I'm going to
be talking about leveraging browser caching

00:22:17.340 --> 00:22:21.380
and combining images into CSS sprites can
be kind of difficult to do and specifically

00:22:21.380 --> 00:22:26.700
to maintain if you do them yourself. And so
to talk about this little bit, I'm going to

00:22:26.700 --> 00:22:30.770
go in some detail about why you want to do
it in the first place. So the first one is

00:22:30.770 --> 00:22:36.770
our extend cache filter and this is--the basic
idea here is you have a cache so by default,

00:22:36.770 --> 00:22:41.250
your cache lifetime for most resources is
going to be that five minutes. And here's

00:22:41.250 --> 00:22:48.600
an example of what happens. This is the initial
request the user makes to your website and

00:22:48.600 --> 00:22:52.880
this is going to be covering a single resource
so one image on your site, one CSS file. And

00:22:52.880 --> 00:22:56.781
then here's the response that comes back and
you can see kind of response, there's a lot

00:22:56.781 --> 00:23:01.260
of content there because it's a whole image
or whole CSS file. And then if your user then

00:23:01.260 --> 00:23:06.030
goes ahead and visits the site again, maybe
let's say four minutes later, they're actually

00:23:06.030 --> 00:23:10.110
going to make no request all the way to the
server because they still have the resource

00:23:10.110 --> 00:23:15.001
cache in their browser. But if they go visit
let's say six minutes later, they're going

00:23:15.001 --> 00:23:19.451
to have to go and ping your server and say
this resource is [INDISTINCT] out of the cache,

00:23:19.451 --> 00:23:24.930
is it still good and your server has to response
back saying, yup it's still good, 304 not

00:23:24.930 --> 00:23:29.020
modified. And this kind of repeats forever
as they come to visit your site again and

00:23:29.020 --> 00:23:33.220
again over the next, you know, minutes, hours,
days, each time they visit after five minutes

00:23:33.220 --> 00:23:37.010
is going to have another response. And you
might say, you know, this is just a really

00:23:37.010 --> 00:23:41.690
simple request response. It should be really
short but it's a whole round trip which can,

00:23:41.690 --> 00:23:47.570
you know, be tens, hundreds of milliseconds
and as Richard pointed out, there can be,

00:23:47.570 --> 00:23:51.730
you know, 50 images, hundreds of resources
on your site if each one has these round trips,

00:23:51.730 --> 00:23:57.390
it's expensive. And so--and the best practice
is to have longer caching lifetimes. So what

00:23:57.390 --> 00:24:01.380
if you just set your cache lifetime to one
year? You know it looks great, right? I mean,

00:24:01.380 --> 00:24:04.850
you know, you have--there's nothing, you load
it the first time, you have to and there's--you

00:24:04.850 --> 00:24:09.170
never have to go connect the server again.
And you know, it sounds perfect except of

00:24:09.170 --> 00:24:14.570
course--what if you ever changed that file?
And if you change it, just say like 13 minutes

00:24:14.570 --> 00:24:19.180
after, you know, the user visit the first
time. They might not notice for another year

00:24:19.180 --> 00:24:21.440
as it stays in their browser cache, you know,
probably less than that but maybe like, you

00:24:21.440 --> 00:24:25.970
know, week, a day and anything like that,
you--that whole time if your JavaScript, let's

00:24:25.970 --> 00:24:29.540
say you fixed an error in it or you updated
the versions of your JavaScripts, now they're

00:24:29.540 --> 00:24:34.360
going to be out of date. So most people when
they--when they put cache headers on their

00:24:34.360 --> 00:24:39.520
files, they put reasonably short cache headers
and the reason is that now let's say here's

00:24:39.520 --> 00:24:43.150
the--again the five minutes, you know, sure
you're doing these pings every once in a while,

00:24:43.150 --> 00:24:46.730
this time the ping really matters. This time
the ping tells you, you should really update

00:24:46.730 --> 00:24:52.340
your request and download the new resource.
So a question you might want to know is, "Well,

00:24:52.340 --> 00:24:55.530
can we get both?" Can we get the best of both
worlds, so that we don't have to keep pinging

00:24:55.530 --> 00:25:00.030
the server when the thing's not updated. But
we can ping it and get the actual results.

00:25:00.030 --> 00:25:06.660
Get the new updated resource when it is updated
and that's exactly what we've done in mod_pagespeed.

00:25:06.660 --> 00:25:11.870
So for the whole that it hasn't been updated,
you don't do anything and then finally, when

00:25:11.870 --> 00:25:16.010
it has been updated, you go ahead and ping
the server get the new response back and get

00:25:16.010 --> 00:25:21.710
the updated resource. So that's sounds great,
how do you do it? We're going to go all detail

00:25:21.710 --> 00:25:27.690
here. If this is the original thing, it's
just an image, walrus.png and now when we

00:25:27.690 --> 00:25:31.030
rewrite it with my pagespeed, we're going
to change the URL. We're going to add--specifically

00:25:31.030 --> 00:25:37.490
you're going to note hash code here, just
the 91_www and that's md5 hash of the content

00:25:37.490 --> 00:25:41.530
of the file. And so every time this file changes,
you're going to have a different URL and so

00:25:41.530 --> 00:25:46.440
it's going to tell the browser you have to
update. And so now, you can see that we can

00:25:46.440 --> 00:25:49.020
add, you know, this is the original cache
lifetime, we waited five minutes to be--have

00:25:49.020 --> 00:25:54.370
as much control over our website as possible.
And now we can extend that out to be a whole

00:25:54.370 --> 00:25:58.070
year long. And whenever the file changes,
you know, here's the new--here's the new hash

00:25:58.070 --> 00:26:02.590
code automatically when you load the new HTML
file, where you're going to get the new resource,

00:26:02.590 --> 00:26:09.450
the new image, the new CSS. And that's how
we can avoid all these extra checks but still

00:26:09.450 --> 00:26:17.690
get it updated after you updated your resource.
Another example I'm going to cover is a spraying

00:26:17.690 --> 00:26:24.060
images. The idea here is that if you have,
you know, probably multiple images on your

00:26:24.060 --> 00:26:31.140
site. Richard showed that the average site
has 50 images on each site. So here we just

00:26:31.140 --> 00:26:34.130
have an example with three. Each one of these,
you're going to have to make a request out

00:26:34.130 --> 00:26:37.640
to the server and a response back, that's
a roundtrip and then get the results and another

00:26:37.640 --> 00:26:42.910
request out, response back at the results.
And in addition each time, the user visits

00:26:42.910 --> 00:26:48.470
the site again after some number of--some
time past the caching date, it's going to

00:26:48.470 --> 00:26:51.742
have to make this again three roundtrips for
each of the images or 50 roundtrips if you

00:26:51.742 --> 00:26:57.950
have 50 images. So you'd like to be able to
just get rid of all the extra roundtrips to

00:26:57.950 --> 00:27:02.010
say I want to request all the images and get
them all back. And then each time I can just

00:27:02.010 --> 00:27:06.530
make a single ping to say, you know, is this
still up to date. And that's exactly what

00:27:06.530 --> 00:27:11.770
we do except in addition of course, we also
cache extend it and so you don't even have

00:27:11.770 --> 00:27:18.940
to do those extra pings until the images actually
change. And how do you do this? Well, in this

00:27:18.940 --> 00:27:23.150
case, you know, here, let's say this is the
original page, this is the original CSS file

00:27:23.150 --> 00:27:30.110
and you have, you have these two PNGs here
in different backgrounds. And now when you--we've

00:27:30.110 --> 00:27:33.110
written the page, you have them both come
out together into a single URL, it's repeated

00:27:33.110 --> 00:27:37.520
twice here. That's one, you know, resource
is going to be loaded and each of these have

00:27:37.520 --> 00:27:42.850
offsets to show you--to tell the CSS which
one to show. And so, you know, this is the

00:27:42.850 --> 00:27:47.610
original images, these are just the two images
put together. And we do the same thing with

00:27:47.610 --> 00:27:52.290
CSS files and JavaScript files to be able
to combine them to reduce the number of roundtrips

00:27:52.290 --> 00:28:01.210
that we need to make to the server. Great.
So this is some of the motivation for why

00:28:01.210 --> 00:28:05.330
you want to install a mod pagespeed, why you
want to automatically rewrite your web pages,

00:28:05.330 --> 00:28:10.200
and so here's a little information about how
you could install it. If you're using Go Daddy

00:28:10.200 --> 00:28:15.410
or DreamHost basic hosting, it's actually
already provided. All you need to do is sign

00:28:15.410 --> 00:28:18.930
up with clicking a little check box or putting
in a small configuration file and you can

00:28:18.930 --> 00:28:25.710
test it out. If you're using CentoS or Ubuntu
there is binary downloads you can put into

00:28:25.710 --> 00:28:28.780
the package manager, it'll automatically update
themselves. And of course it's also open source

00:28:28.780 --> 00:28:33.190
so it's available by--you build from--oops,
you can build from source using instruction

00:28:33.190 --> 00:28:39.450
on the website. In addition, as soon as you
download it, it will already start rewriting

00:28:39.450 --> 00:28:44.180
your webpage in a way that we think are both
safe and really useful for your site. So it

00:28:44.180 --> 00:28:49.270
has kind of a core set of filters enabled
to rewrite your site. But in addition, we

00:28:49.270 --> 00:28:53.410
provide lots of configurability, you can do
number of things, you know, simple things

00:28:53.410 --> 00:28:57.330
like turning web page speed off so you can
just do it for testing. You can change the

00:28:57.330 --> 00:29:02.870
default instead rewrite level to more conservative
or liberal levels. And you can turn on and

00:29:02.870 --> 00:29:08.780
off individual rewrite passes to do things
like removing comments to spreading images,

00:29:08.780 --> 00:29:17.180
things like that. There's some more detailed
configuration options you can do. If you're

00:29:17.180 --> 00:29:21.350
one of the--a big help that mod pagespeed
can provide is rewriting images if you have

00:29:21.350 --> 00:29:25.250
large images that are represented in small
size in your webpage, you can really resize

00:29:25.250 --> 00:29:30.040
those. And even if they are the same size,
often you'll have extra information that's

00:29:30.040 --> 00:29:34.080
unnecessary so we can run through opt PNG,
another optimization software to reduce the

00:29:34.080 --> 00:29:38.350
size of the images. But that's kind of an--it
can be CPU intensive so you can reduce--you

00:29:38.350 --> 00:29:43.040
can set the number of images to be rewritten
at the same time. And there's other things

00:29:43.040 --> 00:29:53.050
you can set up to pinging your local architectures.
Great. Let's say--so now that you've installed

00:29:53.050 --> 00:29:58.140
mod pagespeed, you might want to know how
do I really know that it's helping my page.

00:29:58.140 --> 00:30:03.110
And this is what we love to get your feedback
and see how it's working for you guys. And

00:30:03.110 --> 00:30:07.620
we have two examples that we're suggesting
for how you can go and check this. And the

00:30:07.620 --> 00:30:12.940
first one is Page Speed Online, it's the tool
that Andrew's team released a couple of months

00:30:12.940 --> 00:30:18.650
ago. And you just go to the website and input
your URL and it tells you what the page speed

00:30:18.650 --> 00:30:23.560
score for your site and some suggestions that
you want to follow. And so by using that before

00:30:23.560 --> 00:30:27.550
and after, you can get some feel how much
is it actually implementing those decisions,

00:30:27.550 --> 00:30:33.071
is it improving your page speed score. And
addition you probably want to know how much

00:30:33.071 --> 00:30:38.130
is it actually speeding up your site. And
so webpage test is a nice website that allows

00:30:38.130 --> 00:30:44.280
you to actually go and load using an IE browser
in a real location along cable modem or something

00:30:44.280 --> 00:30:48.420
like that. And to actually see how long it
takes for the page to load, how--you can see

00:30:48.420 --> 00:30:51.440
the waterfall diagrams and all the details
about it. And so I'm going to cover--I'm going

00:30:51.440 --> 00:31:02.880
to actually through and demo some of these
to show you how you can test this. So here's

00:31:02.880 --> 00:31:09.760
Page Speed Online and in this case, we're
going to be testing one of our user sites

00:31:09.760 --> 00:31:20.150
which is 
Androidacademy and we're going to set it first

00:31:20.150 --> 00:31:38.880
to get a baseline with page speed turned off.
[PAUSE] Great. And so here you can see that,

00:31:38.880 --> 00:31:43.510
you know, the page speed score is 69. And
here they have some examples of things that

00:31:43.510 --> 00:31:47.860
you might want to do on the website to make
it faster. So specifically here, I noticed,

00:31:47.860 --> 00:31:51.120
you know, it's leverage browser caching and
combining which is CCS sprites and these two

00:31:51.120 --> 00:31:55.930
other things I just mentioned that--one page
we can help you with and in addition there's

00:31:55.930 --> 00:32:02.160
also a yellow one for inline small CSS files
which we also do. So now we go ahead and let's

00:32:02.160 --> 00:32:17.571
say we can open this in a new window so we
can compare them and let's try loading just

00:32:17.571 --> 00:32:26.030
a page with no [INDISTINCT] so that we get
the actual mod page speed version. And--great.

00:32:26.030 --> 00:32:39.890
[PAUSE] So, as you could see, I mean, this
increased all the way to 79 points, it's up

00:32:39.890 --> 00:32:46.070
10 points which is almost, you know, 15% to
20% and in addition, the leverage browser

00:32:46.070 --> 00:32:51.180
caching is down to a yellow item. The inline
CSS is gone. You'll notice that that combine

00:32:51.180 --> 00:32:55.181
images of the CSS sprites is still here. You
might ask me why is that I just mentioned

00:32:55.181 --> 00:33:01.560
it, inline images in CSS sprites is a new
feature that we're releasing. We haven't worked

00:33:01.560 --> 00:33:06.290
all the details yet and we haven't suggested
people's turn on yet. So that's kind of an

00:33:06.290 --> 00:33:09.710
example of something that we can still be
working on for the site to provide value to

00:33:09.710 --> 00:33:15.820
it. And for the leverage browser caching,
so, you know, you might say, "Well, we reduced

00:33:15.820 --> 00:33:18.980
it from, you know, a red item to a yellow
item but it's still on there. Why is it on

00:33:18.980 --> 00:33:23.140
there?" if we could just leverage all the
browser caching. But if we look at this a

00:33:23.140 --> 00:33:29.470
little bit we can see, glancing at this, there's
maybe 15 or 20 of these guys. It seems like

00:33:29.470 --> 00:33:34.191
that's kind of a lot, you know, things we
haven't been able to increase the cache lifetime

00:33:34.191 --> 00:33:40.630
on. But look at the original one, it's actually
like, you know, 40 to 50 maybe 100 of these.

00:33:40.630 --> 00:33:45.430
There's quite a number. And so we've made
a significant improvement. Each of these again

00:33:45.430 --> 00:33:49.490
is like a roundtrip when you visit the site
again. And so reducing it, you know, from

00:33:49.490 --> 00:33:54.820
100 down to 20 is 80% improvement of that
kind of load time in some ways. In addition--probably

00:33:54.820 --> 00:33:58.630
what's happening here for these why these
aren't being inlined, they're probably something

00:33:58.630 --> 00:34:03.950
in an ajax poll or a JavaScript that's--we
can't find when we're rewriting the page.

00:34:03.950 --> 00:34:06.610
And if that's the case then it's probably
actually not so bad because if they're in

00:34:06.610 --> 00:34:10.980
an ajax call, that's probably after the pages
are reloaded and so it's not going to impede

00:34:10.980 --> 00:34:16.769
sort of using the page that they're not cache
extended, might be a pretty good thing. So--so,

00:34:16.769 --> 00:34:23.179
yeah, here you can--you can go back and look
for some reason, you can compare these as

00:34:23.179 --> 00:34:37.419
one way of seeing your optimization were.
But--another example--but you might say your

00:34:37.419 --> 00:34:41.710
mod pagespeed of course, you're going to improve
the page speed score, what does that really

00:34:41.710 --> 00:34:46.950
tell me? And so it's, you know, another good
example to go check out is webpage test which

00:34:46.950 --> 00:34:54.220
like I mentioned. We'll actually go and load
this page from a real browser. You can choose

00:34:54.220 --> 00:34:57.769
whether you want to load it from IE, from
Chrome, and there's a number of different

00:34:57.769 --> 00:35:00.720
locations, you can pick one where you think
your users is going to be or test different

00:35:00.720 --> 00:35:04.960
locations in the U.S. and internationally.
And specifically we'd suggest if you're doing

00:35:04.960 --> 00:35:10.960
this, you up the number of runs, because one
run doesn't give you very good statistical

00:35:10.960 --> 00:35:15.809
significance. You could have a bad run, bad
network things like that. And so we'd, you

00:35:15.809 --> 00:35:19.749
know, suggest you up it to about 10 which
is the maximum. And to see it will tell you

00:35:19.749 --> 00:35:23.970
all the different runs. You can see the distribution
of it and it will all specifically point out

00:35:23.970 --> 00:35:28.769
so the median--the median time which is kind
of what your average you usually see. I'm

00:35:28.769 --> 00:35:32.990
not going to run this one live because there's
kind of a queue for waiting for this and so

00:35:32.990 --> 00:35:36.519
it could take, you know, maybe 10, 20 minutes
to run through. But I have some examples saved

00:35:36.519 --> 00:35:40.990
here. This is also from Android Academy. Here's
the before, and as you can see at the top

00:35:40.990 --> 00:35:46.619
here, we have a bunch of metrics about load
times, start render, first [INDISTINCT], things

00:35:46.619 --> 00:35:52.279
like that, and the number of request size.
And if we look down here, we can see the waterfall

00:35:52.279 --> 00:35:58.190
diagrams. And the first one here is--is the
initial load, and the second one here is the

00:35:58.190 --> 00:36:02.849
return load. You can see there's less resources,
I know it's all hard to see because it's in

00:36:02.849 --> 00:36:06.309
little pages. Less resource loaded this time.
All the yellow ones are the ones I was mentioning

00:36:06.309 --> 00:36:09.180
earlier. This is--when you just ping the server
and it says, the resource hasn't changed,

00:36:09.180 --> 00:36:13.539
so in some ways, it's all but wasted and you
can see that it actually takes quite a bit

00:36:13.539 --> 00:36:19.990
of time to do all those yellow responses.
And you go through these 10 responses here.

00:36:19.990 --> 00:36:25.569
This is the after words. And if we just glance
down, add some of these results, we can see

00:36:25.569 --> 00:36:30.579
that, let's say, this repeat view is much
more. And you know, presumably, what we've

00:36:30.579 --> 00:36:35.109
done here is eliminate all these pings we
have to make back to the server for these

00:36:35.109 --> 00:36:40.500
sub--sub-resources by extending their cache
lifetimes. And so, now you know--and you can

00:36:40.500 --> 00:36:45.809
see specifically, it's not just from the image
but the actual hard numbers here. There's

00:36:45.809 --> 00:36:51.510
42 requests made on the repeat view, after
we turned on one Page Speed. And if you go

00:36:51.510 --> 00:36:56.270
back to the original one with mod pagespeed
off, there's 95. So, it's less than half of

00:36:56.270 --> 00:37:00.109
the number of requests, and that can make
a big difference. And you know it's not just

00:37:00.109 --> 00:37:05.749
the number of requests. If you look at the
start rendered time here, it's 3.2 seconds,

00:37:05.749 --> 00:37:09.410
afterwards it's 1.2 seconds, I mean, it's
even less than half the time to first, get

00:37:09.410 --> 00:37:13.140
the first paint on the screen and let your
user know that something is happening. And

00:37:13.140 --> 00:37:19.099
the finish time here, afterwards is 3.6 seconds,
before it was 6.1, again about half the time.

00:37:19.099 --> 00:37:22.130
So, is this you know--it's actually--it's
pretty significant change in--in how much

00:37:22.130 --> 00:37:42.230
loading time if you have used, I mean, back
again to your site. 

00:37:42.230 --> 00:37:48.160
And so--and so, we'd love to hear, you guys
telling us about how--if you--if you get a

00:37:48.160 --> 00:37:53.450
chance to install this on your site and to
run through some of these tests and see how

00:37:53.450 --> 00:38:01.750
it works for you, how it improves your sites,
et cetera. And if you'd like more information,

00:38:01.750 --> 00:38:05.240
all things--kind of the center for all things,
Page Speed, so the URL appears, it comes with

00:38:05.240 --> 00:38:10.339
a search for us. In addition, we'll be having
sort of office hours down in Pub Lounge which

00:38:10.339 --> 00:38:14.710
is right down at the bottom of the stairs,
take a left, where people were eating lunch

00:38:14.710 --> 00:38:20.750
today. We'll be there until 6:00 P.M. for
one on one. And in addition, if you're interested

00:38:20.750 --> 00:38:26.250
in these topics, if you check out there is
two talks tomorrow at Google IO, Josh Marantz,

00:38:26.250 --> 00:38:33.619
giving one on Mod Page Speed, tomorrow at
11:30, and Bryan McQuade is giving one on

00:38:33.619 --> 00:38:39.479
"Page Speed for Mobile Browsers," and that's
going to be in the afternoon, 3:45.

00:38:39.479 --> 00:38:43.460
&gt;&gt; OATES: So actually, I have a second demo
that we weren't going to do but we have time,

00:38:43.460 --> 00:38:48.049
more for it, we have about 20 minutes. So
I'm going to show you the advanced features

00:38:48.049 --> 00:38:52.859
of the Page-Speed Online API. And by advanced,
I mean, everything that's left. And I'm going

00:38:52.859 --> 00:39:01.630
to attempt to build an entire Page Speed tool
in the next 15 minutes and you guys can help.

00:39:01.630 --> 00:39:10.839
Yeah, whoever that was, thank you. All right,
so let's take a look at--let's take a look

00:39:10.839 --> 00:39:16.220
at what the--the results look like. So, before
we were just looking at the rule names, but

00:39:16.220 --> 00:39:22.369
as you can see--where is that rule thing?
So, as you can see, we have a lot more than

00:39:22.369 --> 00:39:26.390
just a rule name here, right? We have a rule
score, and impact, there's URL blocks, and

00:39:26.390 --> 00:39:33.069
there's header, and the format, and these
args. Basically this is what we use in Page

00:39:33.069 --> 00:39:37.769
Speed Online, and Page Seed Chrome, and Page
Speed Firefox to construct the actual UI.

00:39:37.769 --> 00:39:43.069
And it's really simple. How it works is this,
we have, um, these format strings. The following

00:39:43.069 --> 00:39:46.240
external resources have smaller response [INDISTINCT]
in line with the resources--that's a bad example.

00:39:46.240 --> 00:39:52.349
Let's do this one, "$1 should inline the following
small resources:" and then we have, oh, yeah,

00:39:52.349 --> 00:39:57.089
an argument, "type": "URL" "value" that. So,
basically as a developer, you can just stick

00:39:57.089 --> 00:40:04.520
in this, this URL in the place for the dollar
one. Is there are better example? And what

00:40:04.520 --> 00:40:09.970
that lets you do is--here we go. So here's
the list of resources that have--that don't

00:40:09.970 --> 00:40:16.869
have--that don't have cache left times. So,
I mean, $1 and a $2. $1 is the URL, Andrews

00:40:16.869 --> 00:40:22.680
vacation photos, media, photo1. That's the
shells, I think. And then the duration, 10

00:40:22.680 --> 00:40:26.329
minutes. And what--this lets you do by giving
me this flexible format. It lets you format

00:40:26.329 --> 00:40:29.390
things differently. So, for instance in Page
Speed Online, what we do is we take these

00:40:29.390 --> 00:40:33.739
URL arguments and we turn them into links.
These are--can click on to go to a different

00:40:33.739 --> 00:40:38.630
thing. And I think we bold durations or we
italicize them or something like that. So,

00:40:38.630 --> 00:40:47.140
it's a really flexible format, um, so let's
extend our script to use these. So, let's

00:40:47.140 --> 00:40:54.030
just do a--what's it called? Print--let's
just do print results, so let's take in some

00:40:54.030 --> 00:41:02.779
page PrintResults and I'll print them out
in a flexible format. So, and again it's what

00:41:02.779 --> 00:41:06.809
you leverage our [INDISTINCT] language support
so that your users all over the world can--can

00:41:06.809 --> 00:41:16.190
see this in the language of their choice--the
locale of their choice. All right, so, let's

00:41:16.190 --> 00:41:24.630
see. This is--okay, so we're going to get
the rule results from, as we did before. Results

00:41:24.630 --> 00:41:30.819
equal--equals results--format results. The
same thing we did up top there. And for every

00:41:30.819 --> 00:41:51.989
rule in the Rule Results--let's just print
out a header. Rule Results--rule LocalizedRuleName.

00:41:51.989 --> 00:42:03.000
PrintResults, let's just print out whatever
the new results are. Push and test, oops,

00:42:03.000 --> 00:42:11.759
analyzing old, analyzing new. Okay, list of
rule names. Let's augment that. So, I'm actually

00:42:11.759 --> 00:42:23.119
going to just comment this out for now. We're
just going to print the--the Page Speed results.

00:42:23.119 --> 00:42:28.720
And we have--we're going to have Snippets,
examples posted online for JavaScript and

00:42:28.720 --> 00:42:33.579
Pythons--some other common languages for how
to--how to do these things. All right, so,

00:42:33.579 --> 00:42:38.910
if you look at--this is my save version in
case the Internet broke. If you look at this

00:42:38.910 --> 00:42:46.549
Rule Result Block, we have the name of the
rule there, a localized rule name in these

00:42:46.549 --> 00:42:52.300
urlBlocks thing, and when the URL block sees--it's
chunks of URLs that are related. So, for instance,

00:42:52.300 --> 00:42:56.930
you might have one urlBlock per redirect chain.
You would say, this redirect chain should

00:42:56.930 --> 00:43:03.799
be eliminated. This redirect chain should
be eliminated and so on and so forth. So for

00:43:03.799 --> 00:43:25.660
urlBlock in Rule Results, rule urlBlocks--so
let's just printout the header. Oops, this

00:43:25.660 --> 00:43:39.849
is the danger of a live demo, that has not
been rehearsed. urlBlocks header. For urlBlock,

00:43:39.849 --> 00:43:50.339
end rule, results rule, urlBlocks. Are there
any Python gurus who want to pipe up and tell

00:43:50.339 --> 00:43:53.140
me what I'm doing wrong?
&gt;&gt; [INDISTINCT].

00:43:53.140 --> 00:44:02.630
&gt;&gt; OATES: Oh, yeah, there we--well, that's--that's
a possibility. Well, let's test and see if

00:44:02.630 --> 00:44:18.839
urlBlocks. There we go. Thank you, Bryan.
So, let's--let's do some more interesting

00:44:18.839 --> 00:44:23.599
page, actually. Let's do it on, news.google.com.
And again, bear with me, [PAUSE] this is a

00:44:23.599 --> 00:44:47.869
little by the seat of my pants. Okay. [PAUSE]
Bryan, this is my manager Bryan, he's helping

00:44:47.869 --> 00:44:53.739
me up.
&gt;&gt; Actually we need [INDISTINCT].

00:44:53.739 --> 00:45:06.759
&gt;&gt; Oh, yeah, yeah, yeah, yeah. Say that, again?
&gt;&gt; [INDISTINCT]

00:45:06.759 --> 00:45:13.440
&gt;&gt; OATES: Bingo. "Analyzing," there we go.
Okay. So, you can see if which one of these

00:45:13.440 --> 00:45:20.359
headers we have a "format" which is the string.
And we optionally have some "args." So, let's

00:45:20.359 --> 00:45:37.250
write a little function to fill that in, "FillFormatString."
Let's just call it "header," "if," somebody

00:45:37.250 --> 00:45:53.259
just beeped at me. Oh, it's right on time.
[PAUSE] All right otherwise, "for" each "argument"

00:45:53.259 --> 00:46:09.839
"in" the "header" and this is pretty [INDISTINCT].
We have examples of this online. [PAUSE] There

00:46:09.839 --> 00:46:37.700
we go. I already have this written. This felt
familiar. Oops, all right. "FillFormatString

00:46:37.700 --> 00:46:42.660
(format_string_dictionary)." So, [INDISTINCT]
instead of putting in the "header," let's

00:46:42.660 --> 00:47:12.839
print out, "FillFormatString" "header." Let's
see what that looks like. Oops. "Analyzing

00:47:12.839 --> 00:47:33.009
page," "Analyzing page." [PAUSE] Isn't it
fun watching people debug? All right. "If

00:47:33.009 --> 00:47:43.990
"args" not in format_string_dictionary: return
format_string_dictionary['format']." Cross

00:47:43.990 --> 00:48:10.809
your fingers for me. Damn, "args = format_string."
This is clearly buggy code. [PAUSE] "(format_string_dictionary['args']):

00:48:10.809 --> 00:48:34.109
out = sub(i+1) args[i], out) return out."
Well, then this is on 108, 98, 82. [PAUSE]

00:48:34.109 --> 00:48:47.369
On hash, we'll type "dictionary." "FillFormatString(url_block),
170, thank you. [PAUSE] What was there again?

00:48:47.369 --> 00:49:05.039
The high calibrated Google Engineers illustrated
in front of everyone, 170. All right, we got

00:49:05.039 --> 00:49:17.200
sub, "args," this is infuriating. Oh, right.
So, we have a type in a value for each of

00:49:17.200 --> 00:49:30.000
these. This needs to be the value. Oops, let's
see if that works. And there we go. Okay,

00:49:30.000 --> 00:49:33.400
awesome. That was harder than it should have
been. It's going to be so smooth now. All

00:49:33.400 --> 00:49:37.549
right, "Minifying the following JavaScripts
resources could reduce their size by 2.3 kilobytes

00:49:37.549 --> 00:49:51.049
(0% reduction). So, it worked. So, let's indent
that. All right, now let's look at the results

00:49:51.049 --> 00:49:57.890
and dig down a little further. So, in this
URL block, we have the header. And then we

00:49:57.890 --> 00:50:03.803
also have optionally this list of URLs here.
Each one of these has a result. And the result

00:50:03.803 --> 00:50:20.829
is the exact same format as the header. So,
"if 'urls' in url_block: for url in url_block['urls']."

00:50:20.829 --> 00:50:31.289
There's a better way to do this on Python
but I'm not going to bother with that right

00:50:31.289 --> 00:50:48.839
now, "if 'result' in url: print "1, 2, 3,
4, 5" why not?"+ FillFormatString(url['result'])"

00:50:48.839 --> 00:51:02.700
Knock on wood. There we go. So, "The following
cacheable resources have a short freshness

00:51:02.700 --> 00:51:05.900
lifetime. Specify expiration at least one
week in the future for the following resources."

00:51:05.900 --> 00:51:15.950
And if we reach this, we give a URL and that.
All right, there's one more step, as our indentation

00:51:15.950 --> 00:51:37.400
gets further and further, "if 'details' in
url: for detail in url['details']: print "1,

00:51:37.400 --> 00:51:53.369
2, 3, 4, 5, 6, 7" + FillFormatString(detail),"
"push_and_test," "Analyzing," looks good.

00:51:53.369 --> 00:52:04.319
Let's do one more thing instead of doing that
URL. Let's take it in from "argv," "(argv[1])."

00:52:04.319 --> 00:52:21.710
Because now we're going to "push_and_test,"
give me a URL, anyone. Let's do Android Academy,

00:52:21.710 --> 00:52:34.819
www.androidacademy.com. Drum roll, takes a
while, "Analyzing," and there we go. Page

00:52:34.819 --> 00:52:41.131
speed results, I did that in 8 minutes. You
can do better, I'm sure. Thank you.

00:52:41.131 --> 00:52:53.940
&gt;&gt; RABBAT: Please join here back. So, we're
all--so, Shawn and Andrew was showing you

00:52:53.940 --> 00:53:00.440
many simulations of what your page speed would
be like webpage test is a nice simulation

00:53:00.440 --> 00:53:06.910
of what your webpage latency would be. Last
week on Thursday, Google analytics announced

00:53:06.910 --> 00:53:14.769
that now if you have Google Analytics on your
site and you add one line to your site, we

00:53:14.769 --> 00:53:19.520
actually collect your site speed and show
it to you in the dashboard, in the Google

00:53:19.520 --> 00:53:25.381
Analytics dashboard. And that will be a great
help for you as you see the real world at,

00:53:25.381 --> 00:53:31.319
you know, client side latency that you expect,
that you want to see as opposed to, you know,

00:53:31.319 --> 00:53:40.279
the several size where webpage test servers
are or some localized--localized pages. So,

00:53:40.279 --> 00:53:42.190
we have a few minutes if you have any questions,
please go ahead.

00:53:42.190 --> 00:53:43.190
&gt;&gt; Yes.
&gt;&gt; RABBAT: Yes.

00:53:43.190 --> 00:53:44.190
&gt;&gt; So, we can view this online at page speed--that
was page speed [INDISTINCT] in different sites

00:53:44.190 --> 00:54:02.720
which are only the way to a certain rules.
And then you get [INDISTINCT] users with your

00:54:02.720 --> 00:54:03.720
page speed to work. Some elements are just
[INDISTINCT].

00:54:03.720 --> 00:54:08.220
&gt;&gt; OATES: So, for page speed to online specifically,
we actually don't take the amount of the number

00:54:08.220 --> 00:54:12.299
or seconds that it takes to load the page
into account. One for page speed online, it's

00:54:12.299 --> 00:54:15.760
Google loading in it. And Google has a lot
of fast Internet connections so it wouldn't

00:54:15.760 --> 00:54:19.319
be a representative. For another thing, our
focus--so, there are tools that have to do

00:54:19.319 --> 00:54:22.729
that. For instance, web page test is, sort
of a full solution. And it will give you stats

00:54:22.729 --> 00:54:25.569
for the actual page load time. But for...
&gt;&gt; LIGOCKI: And you can, and you can go ahead

00:54:25.569 --> 00:54:28.240
and load that from trying--they have servers
all over the world.

00:54:28.240 --> 00:54:31.839
&gt;&gt; OATES: Yes. So, for page speed itself,
we're focused more on what, sort of, irrespective

00:54:31.839 --> 00:54:36.499
of this like connect--the actual connection
you're on. You know, how, what kind of server

00:54:36.499 --> 00:54:41.589
you're running if you did have more boxes
on the backend. What can you do on the client

00:54:41.589 --> 00:54:45.529
side for these development best practices
to speed up your site?

00:54:45.529 --> 00:54:50.029
&gt;&gt; LIGOCKI: Although you still also have specific
rules for mobile sites, fort his specific

00:54:50.029 --> 00:54:52.410
different way to weigh things.
&gt;&gt; OATES: Yes, yes. So, one thing we launched

00:54:52.410 --> 00:54:57.349
recently with page speed online and Brian
and Levo are going to talk about this at IO

00:54:57.349 --> 00:55:01.849
tomorrow is new specific new page speed rules.
So, Mobile's obviously a big growing space

00:55:01.849 --> 00:55:06.839
and phone connections are really slow. There's--and
RTTs will be in the order of seconds instead

00:55:06.839 --> 00:55:12.859
of milliseconds. And so every connection you
save, every request can have a huge impact

00:55:12.859 --> 00:55:18.220
on your site in terms of views, revenue, etc.
And so we launched a new, some new rules in

00:55:18.220 --> 00:55:21.400
the mobile space to help people optimize with
the situations.

00:55:21.400 --> 00:55:33.210
&gt;&gt; RABBAT: Any more questions? Yes.
&gt;&gt; [INDISTINCT]

00:55:33.210 --> 00:55:47.960
&gt;&gt; LIGOCKI: Yes. So, lot of what we were looking
at right now, and we're testing this is how

00:55:47.960 --> 00:55:52.269
do we choose which images we should be spreading
together and how we should be doing this.

00:55:52.269 --> 00:55:57.269
And in general right now, we're focusing mostly
on images that are already in the CSS, already

00:55:57.269 --> 00:56:01.900
in--written in CSS. And so what that means
is you foreground images listed in the image

00:56:01.900 --> 00:56:06.529
tag, those are more likely to be probably
important user experience to load early. If

00:56:06.529 --> 00:56:09.729
you can combine a bunch of very small images
that are like part of your Chrome, your rounded

00:56:09.729 --> 00:56:13.910
corners, little smiley faces, things like
that, that can be helpful. And it might not

00:56:13.910 --> 00:56:17.000
even actually slow down the load of the whole
thing.

00:56:17.000 --> 00:56:19.299
&gt;&gt; OATES: And for like a lot of these things,
it's a trade off, right?

00:56:19.299 --> 00:56:21.390
&gt;&gt; LIGOCKI: Yes.
&gt;&gt; OATES: If--different connection types have

00:56:21.390 --> 00:56:25.690
different characteristics, you might have
a really, something like a 3G or a 4G connection

00:56:25.690 --> 00:56:30.220
on a phone, can have actually a fair amount
bandwidth but really high RTTs, really high

00:56:30.220 --> 00:56:34.349
latency. In that case, if you can just dump
everything down with one request, you'll save

00:56:34.349 --> 00:56:38.069
a lot of time rather than having to go back
and forth to the server for each one of those

00:56:38.069 --> 00:56:45.190
small images. And so finding where that trade
off is, is sort of, an important part of the

00:56:45.190 --> 00:56:47.839
process.
&gt;&gt; RABBAT: Okay. All right, well thank you

00:56:47.839 --> 00:56:51.270
very much. And we hope you enjoy the rest
of IO Boot Camp.

