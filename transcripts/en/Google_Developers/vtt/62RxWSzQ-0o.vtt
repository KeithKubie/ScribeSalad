WEBVTT
Kind: captions
Language: en

00:00:03.434 --> 00:00:06.434
Stahl: Hi. Welcome to
Life of a Google API developer.

00:00:06.434 --> 00:00:08.434
My name is Mark Stahl,

00:00:08.434 --> 00:00:10.934
and I'm here with
Tony and--Aiuto,

00:00:10.934 --> 00:00:13.934
and David Gibson, some engineers
with my team at Google,

00:00:13.934 --> 00:00:16.934
and we're gonna be talking
about what it takes to start--

00:00:16.934 --> 00:00:20.434
getting started developing
for, uh, using APIs at Google.

00:00:20.434 --> 00:00:23.100
So, uh, just a little bit
of procedural information

00:00:23.100 --> 00:00:24.767
to get us started--

00:00:24.767 --> 00:00:26.634
if you're going
to be Tweeting,

00:00:26.634 --> 00:00:28.634
we have a couple hashtags
we'd like you to use

00:00:28.634 --> 00:00:30.634
so we can see what
everybody's saying about us,

00:00:30.634 --> 00:00:33.133
and we're also using a new
service that will let you

00:00:33.133 --> 00:00:35.133
give you--give some feedback
after the session,

00:00:35.133 --> 00:00:37.133
so you can tell us
how you like it or whatever.

00:00:37.133 --> 00:00:40.133
So these links will be available
after the end of the talk,

00:00:40.133 --> 00:00:41.801
so feel free to, you know,

00:00:41.801 --> 00:00:44.667
not copy them down
right at this moment.

00:00:44.667 --> 00:00:47.200
So, uh, just a brief outline of
what we're gonna cover today--

00:00:47.200 --> 00:00:49.701
First, I'm gonna do
a little background,

00:00:49.701 --> 00:00:51.734
so you know who this--
this talk is geared to.

00:00:51.734 --> 00:00:54.701
This is a 101-level talk,
and, you know,

00:00:54.701 --> 00:00:57.200
people who are just getting
started developing APIs.

00:00:57.200 --> 00:00:58.801
So in that spirit,

00:00:58.801 --> 00:01:00.801
we're actually going
to build an application.

00:01:00.801 --> 00:01:02.701
We're gonna walk you
through the process

00:01:02.701 --> 00:01:04.534
that a new developer,
uh, dare I say,

00:01:04.534 --> 00:01:06.534
a little cowboy programmer
might use

00:01:06.534 --> 00:01:08.534
in order to sort of
go through the process

00:01:08.534 --> 00:01:10.534
of actually trying out,
learning the APIs,

00:01:10.534 --> 00:01:12.534
and actually developing them

00:01:12.534 --> 00:01:14.601
and getting a working sample.

00:01:14.601 --> 00:01:16.601
Finally, we're gonna
take a little deep dive

00:01:16.601 --> 00:01:19.100
into one of the newer pieces
called the APIs Console,

00:01:19.100 --> 00:01:20.767
and we're gonna talk about

00:01:20.767 --> 00:01:22.767
how you're gonna
manage your projects.

00:01:22.767 --> 00:01:25.267
So we've introduced a concept
of a project at Google,

00:01:25.267 --> 00:01:27.267
and this is how you
establish a relationship,

00:01:27.267 --> 00:01:29.767
and you get a little bit
of feedback on your traffic.

00:01:29.767 --> 00:01:32.767
So, uh, and then we'll just
do a little wrap-up and Q&amp;A.

00:01:32.767 --> 00:01:34.767
So starting with the background,

00:01:34.767 --> 00:01:36.767
this talk is a beginner talk.

00:01:36.767 --> 00:01:38.767
It is a 101-level session,

00:01:38.767 --> 00:01:40.767
so we have--we make
some assumptions

00:01:40.767 --> 00:01:42.767
that you are familiar with Java,

00:01:42.767 --> 00:01:44.767
you know how to program,
but, uh,

00:01:44.767 --> 00:01:46.767
we do not assume you have
any particular experience

00:01:46.767 --> 00:01:48.434
with Google APIs.

00:01:48.434 --> 00:01:51.434
We also sort of--we're gonna
take the position of a developer

00:01:51.434 --> 00:01:53.434
who likes to sort of dive in,
learn,

00:01:53.434 --> 00:01:55.434
and sort of learn
by experimentation.

00:01:55.434 --> 00:01:58.434
While we say that this talk
is built around Java,

00:01:58.434 --> 00:02:00.934
uh, just so you know,
the concepts you learn here

00:02:00.934 --> 00:02:03.501
should apply to any language,
so if you're working--

00:02:03.501 --> 00:02:05.501
coming from another language,
don't be discouraged.

00:02:05.501 --> 00:02:07.501
You'll still get a lot
out of this talk.

00:02:07.501 --> 00:02:10.501
So also, I'd like to talk
a little bit about

00:02:10.501 --> 00:02:12.501
which APIs we're
talking about here.

00:02:12.501 --> 00:02:15.501
At Google, we have many APIs.

00:02:15.501 --> 00:02:18.501
Some--I don't know, I've heard
the number 80 bantered around.

00:02:18.501 --> 00:02:20.501
You can go to this--
you can go to our, web, uh,

00:02:20.501 --> 00:02:22.968
code web site
and see the actual number.

00:02:22.968 --> 00:02:25.968
We're talking here
about the RESTful APIs.

00:02:25.968 --> 00:02:27.968
Uh, about a year ago
when we talked,

00:02:27.968 --> 00:02:29.968
most people didn't know
what RESTful was,

00:02:29.968 --> 00:02:32.000
or it was still growing
in importance.

00:02:32.000 --> 00:02:33.968
These days, REST
is pretty well understood.

00:02:33.968 --> 00:02:36.968
They're very simple and easy
APIs to use.

00:02:36.968 --> 00:02:39.968
They are built basically
straight on the HTTP protocol,

00:02:39.968 --> 00:02:41.968
so you'll use HTTP verbs

00:02:41.968 --> 00:02:43.968
to manipulate
what they call resources,

00:02:43.968 --> 00:02:45.968
and a resource
is usually just a document

00:02:45.968 --> 00:02:47.968
living at some well-known URL,

00:02:47.968 --> 00:02:50.467
and in our case,
all our documents, uh,

00:02:50.467 --> 00:02:52.968
we recommend these days,
are written in JSON.

00:02:52.968 --> 00:02:55.968
All of our new APIs have a--

00:02:55.968 --> 00:02:57.968
all of our APIs
are now being built

00:02:57.968 --> 00:02:59.634
on a common infrastructure.

00:02:59.634 --> 00:03:02.200
Last year, at Google I/O,
we did a presentation,

00:03:02.200 --> 00:03:04.234
a little behind-the-scenes look

00:03:04.234 --> 00:03:06.200
at how Google builds APIs.

00:03:06.200 --> 00:03:09.200
And if you want to listen to me
speak a lot more,

00:03:09.200 --> 00:03:12.200
you're willing to go to that URL
and check out, uh,

00:03:12.200 --> 00:03:14.701
a little bit more
about how we build APIs.

00:03:14.701 --> 00:03:16.701
And it'll also give you
a much better introduction

00:03:16.701 --> 00:03:18.701
to what RESTful architecture is.

00:03:18.701 --> 00:03:21.701
So, uh, in the last year,
we've introduced

00:03:21.701 --> 00:03:24.701
several new APIs
on this new infrastructure.

00:03:24.701 --> 00:03:27.701
Uh, today, we'll be taking--
we'll be using the Buzz API,

00:03:27.701 --> 00:03:30.200
and the URL Shortener API,

00:03:30.200 --> 00:03:33.200
but there are some,
I don't know, 13 APIs now,

00:03:33.200 --> 00:03:35.200
are out on that
infrastructure as of today,

00:03:35.200 --> 00:03:37.234
a lot more
as of this morning.

00:03:37.234 --> 00:03:39.567
And, uh, you can go
check them all out,

00:03:39.567 --> 00:03:41.367
see what's available.

00:03:41.367 --> 00:03:43.367
In this talk,
I'm also gonna introduce

00:03:43.367 --> 00:03:45.033
several of the new tools

00:03:45.033 --> 00:03:47.033
that we've introduced
in the past year.

00:03:47.033 --> 00:03:49.033
As a developer,
you're gonna find these tools

00:03:49.033 --> 00:03:51.701
very helpful with getting
started with developing,

00:03:51.701 --> 00:03:53.200
uh, for APIs.

00:03:53.200 --> 00:03:56.200
The first tool that you'll all
probably want to really know

00:03:56.200 --> 00:03:58.200
is, we call
the APIs Explorer.

00:03:58.200 --> 00:04:00.767
This will allow you
to sort of play with APIs

00:04:00.767 --> 00:04:02.434
and learn about them,

00:04:02.434 --> 00:04:04.434
and I'll introduce that
a little later.

00:04:04.434 --> 00:04:06.434
We're also going
to present the AP--

00:04:06.434 --> 00:04:08.434
the Java client library
that we're releasing--

00:04:08.434 --> 00:04:10.934
that we've released--
and we're going to spend

00:04:10.934 --> 00:04:13.934
a lot of time delving
into the API Console,

00:04:13.934 --> 00:04:17.367
which is where developers, uh,
live at Google.

00:04:17.367 --> 00:04:19.634
So let's start right in

00:04:19.634 --> 00:04:21.300
on our core task.

00:04:21.300 --> 00:04:23.767
We're going to start
building an application.

00:04:23.767 --> 00:04:26.367
And anybody who's built
an application, you know,

00:04:26.367 --> 00:04:29.367
some people say that a lot
of the best applications happen

00:04:29.367 --> 00:04:32.367
because everybody has
a personal itch to scratch,

00:04:32.367 --> 00:04:35.367
So the first thing we need to do
is find our inspiration.

00:04:35.367 --> 00:04:37.367
What is it that--
that bothers us,

00:04:37.367 --> 00:04:39.367
or what we think
we can do better?

00:04:39.367 --> 00:04:41.367
What is not being done today?

00:04:41.367 --> 00:04:43.534
So let's start
with a personal one

00:04:43.534 --> 00:04:45.367
that I find kind of annoying.

00:04:45.367 --> 00:04:47.367
Here's a list--

00:04:47.367 --> 00:04:50.367
a link that takes me
to my particular Buzz posts.

00:04:50.367 --> 00:04:52.367
So if we go to this screen,

00:04:52.367 --> 00:04:54.367
you can see all the Buzz posts

00:04:54.367 --> 00:04:56.367
that I, or, you know,

00:04:56.367 --> 00:04:59.367
I, the Google API
developer/user, have made.

00:04:59.367 --> 00:05:02.434
And, you know, there's a couple
little entries here,

00:05:02.434 --> 00:05:04.434
and each one is accompanied

00:05:04.434 --> 00:05:07.434
by one of these very long URLs,

00:05:07.434 --> 00:05:10.434
and so it sort of occurs to me,

00:05:10.434 --> 00:05:13.434
as a programmer that, you know,

00:05:13.434 --> 00:05:15.434
wouldn't it be nice if--

00:05:15.434 --> 00:05:17.467
let's see if I can get this
to change slides.

00:05:17.467 --> 00:05:18.934
That would be good.

00:05:18.934 --> 00:05:21.934
Wouldn't it be nice to have
these URLs be nice, short URLs,

00:05:21.934 --> 00:05:23.934
clean up my Buzz posts a lot?

00:05:23.934 --> 00:05:26.968
Now, of course, I could just
shorten my URLs manually.

00:05:26.968 --> 00:05:28.968
So every time I post a Buzz,

00:05:28.968 --> 00:05:30.968
I go to the browser,
I've got the URL,

00:05:30.968 --> 00:05:33.968
I go to a URL shortener tool,
or I have a little hot button,

00:05:33.968 --> 00:05:36.467
and I take the shortened URL
and paste it in.

00:05:36.467 --> 00:05:38.901
So I can manually
do all this work,

00:05:38.901 --> 00:05:41.067
but, you know,
it would be really nice

00:05:41.067 --> 00:05:44.267
if Buzz were to sort of
auto-shorten my URLs for me,

00:05:44.267 --> 00:05:46.267
but, of course,
Buzz doesn't do that--

00:05:46.267 --> 00:05:47.868
at least not yet.

00:05:47.868 --> 00:05:50.868
So, uh, I--but then I realized
there are APIs for these things,

00:05:50.868 --> 00:05:53.000
so, you know,

00:05:53.000 --> 00:05:56.000
I can build the app for that.
At least, I think I can.

00:05:56.000 --> 00:05:58.000
So this is what
I'm gonna build.

00:05:58.000 --> 00:06:00.000
Today, we're gonna walk you
through building

00:06:00.000 --> 00:06:03.067
a URL shortening agent that
just watches your Buzz feed

00:06:03.067 --> 00:06:05.067
and cleans up your URLs for you.

00:06:05.067 --> 00:06:08.067
So, uh, in order to know whether
or not we can build this

00:06:08.067 --> 00:06:10.067
using APIs--of course,

00:06:10.067 --> 00:06:13.067
now is the point where
we're gonna want to dive in

00:06:13.067 --> 00:06:15.067
and learn about the APIs,

00:06:15.067 --> 00:06:17.067
and see whether or not
they can do what--

00:06:17.067 --> 00:06:18.734
what we're trying
to achieve today.

00:06:18.734 --> 00:06:21.734
So first step, of course,
all good developers do,

00:06:21.734 --> 00:06:24.267
is they sit down and they read
the documentation

00:06:24.267 --> 00:06:27.567
from end to end, right?
Yeah--so, not true. [laughs]

00:06:27.567 --> 00:06:29.567
Then we have some
really great documentation,

00:06:29.567 --> 00:06:31.234
great reference guides.

00:06:31.234 --> 00:06:33.400
You're gonna want
to get into that eventually,

00:06:33.400 --> 00:06:35.400
but, you know,
a much better step 0

00:06:35.400 --> 00:06:37.400
would be just to go try them out

00:06:37.400 --> 00:06:39.901
and get familiar with them
and see what they can do.

00:06:39.901 --> 00:06:42.567
So, uh, to that end,
we have built a tool

00:06:42.567 --> 00:06:44.567
that will really help you
get started,

00:06:44.567 --> 00:06:47.567
and we are introducing this tool
in the last few months,

00:06:47.567 --> 00:06:49.567
we launched
the Google APIs Explorer.

00:06:49.567 --> 00:06:52.067
So this is a web-based tool.

00:06:52.067 --> 00:06:54.067
It lists all the APIs

00:06:54.067 --> 00:06:57.067
that we currently support
on the new infrastructure,

00:06:57.067 --> 00:06:59.067
and it allows you to make
these requests

00:06:59.067 --> 00:07:01.067
and actually see the responses.

00:07:01.067 --> 00:07:04.133
And when I say "make the request
and see the response,"

00:07:04.133 --> 00:07:06.133
you can actually see
all the HTTP interexchanges

00:07:06.133 --> 00:07:08.801
that are going on,
and this will really help you

00:07:08.801 --> 00:07:10.801
when you're trying
to learn about,

00:07:10.801 --> 00:07:13.300
and most importantly,
debug your applications.

00:07:13.300 --> 00:07:15.801
'Cause you can actually
make the mistakes in the API--

00:07:15.801 --> 00:07:17.801
the same ones
you might make programming--

00:07:17.801 --> 00:07:19.801
you can see how
the systems respond,

00:07:19.801 --> 00:07:22.801
and you can sort of learn how
to adapt and how to fix them,

00:07:22.801 --> 00:07:24.801
and actually work
until you get the--

00:07:24.801 --> 00:07:26.801
the correct responses.

00:07:26.801 --> 00:07:29.400
And we also
support authentication,

00:07:29.400 --> 00:07:32.100
so a lot of the APIs require you
to be authenticated

00:07:32.100 --> 00:07:34.400
before you can actually
access private data.

00:07:34.400 --> 00:07:36.868
The web API Explorer
supports that,

00:07:36.868 --> 00:07:39.868
so we can actually do
everything in the API Explorer

00:07:39.868 --> 00:07:41.868
that any real application
can do.

00:07:41.868 --> 00:07:43.868
So let's go take a look at it.

00:07:43.868 --> 00:07:45.868
The API Explorer lives
on the code site--

00:07:45.868 --> 00:07:47.868
code.google.com,

00:07:47.868 --> 00:07:51.334
and here's--this is the URL,
and let's go check that out.

00:07:55.667 --> 00:07:57.667
So we start up here
with this screen.

00:07:57.667 --> 00:07:59.667
This shows you a list of APIs

00:07:59.667 --> 00:08:01.734
that are available
in the service,

00:08:01.734 --> 00:08:03.734
and as I said,
that's a fairly large list.

00:08:03.734 --> 00:08:05.734
I don't know
the exact number offhand,

00:08:05.734 --> 00:08:08.734
but it's growing a lot right--
right around Google I/O.

00:08:08.734 --> 00:08:11.100
And, uh, we'll start here
with the Buzz API,

00:08:11.100 --> 00:08:13.100
so let's select that.

00:08:13.100 --> 00:08:15.601
And you see, there's only
one version available,

00:08:15.601 --> 00:08:18.100
and we have a nice link to that,
the documentation,

00:08:18.100 --> 00:08:20.567
so when you're ready for reading
a little bit more in depth,

00:08:20.567 --> 00:08:22.067
that's where you're gonna go.

00:08:22.067 --> 00:08:23.801
And here's every
method and operation

00:08:23.801 --> 00:08:25.567
that you can do
in the Buzz API.

00:08:25.567 --> 00:08:27.200
As you can see,
the Buzz API is--

00:08:27.200 --> 00:08:29.000
well, that's quite
a long list of things,

00:08:29.000 --> 00:08:31.501
so let's start with the ones
that are most important

00:08:31.501 --> 00:08:33.934
to the application
we're trying to build.

00:08:33.934 --> 00:08:37.434
First thing we need to do is get
a list of our Buzz activities,

00:08:37.434 --> 00:08:40.934
which are all those great posts
I showed you in my feed.

00:08:40.934 --> 00:08:43.968
So here's one.
This is called activity list.

00:08:43.968 --> 00:08:46.400
And we click that,

00:08:46.400 --> 00:08:48.734
and here's a list
of all the parameters

00:08:48.734 --> 00:08:50.734
that I can pass into that.

00:08:50.734 --> 00:08:52.734
Now, uh, I'm--first of all,

00:08:52.734 --> 00:08:54.734
the parameters here
shown with the asterisk

00:08:54.734 --> 00:08:56.400
are the required parameters,

00:08:56.400 --> 00:08:58.400
so there's two here
that I have to do,

00:08:58.400 --> 00:09:00.968
which is the user I.D.--
who am I actually accessing?

00:09:00.968 --> 00:09:02.968
And that--
that's gonna be myself,

00:09:02.968 --> 00:09:04.968
so, uh, I do know
that there's a token--

00:09:04.968 --> 00:09:06.968
from reading
some documentation--

00:09:06.968 --> 00:09:08.968
that there's a token
called "at me,"

00:09:08.968 --> 00:09:10.968
and that--
and that tells me that--

00:09:10.968 --> 00:09:12.968
to use whoever is
the authenticated user,

00:09:12.968 --> 00:09:14.968
who's actually
making the request.

00:09:14.968 --> 00:09:18.634
That's the person whose
activities I'm going to list.

00:09:18.634 --> 00:09:21.634
Next is, I'm gonna want
to set the scope.

00:09:21.634 --> 00:09:23.634
The scope is a description of,

00:09:23.634 --> 00:09:26.634
once I've--the activity list
allows you to list

00:09:26.634 --> 00:09:28.634
different types
of activity events,

00:09:28.634 --> 00:09:31.634
and there's actually a whole
bunch of different groups--

00:09:31.634 --> 00:09:33.634
groupings that you
can choose from.

00:09:33.634 --> 00:09:35.634
The one that I'm looking for
is the self group,

00:09:35.634 --> 00:09:38.634
which is the group of activities
that I myself have posted,

00:09:38.634 --> 00:09:40.634
as opposed to comments,

00:09:40.634 --> 00:09:42.634
activities that other people
have done,

00:09:42.634 --> 00:09:44.667
or things that I'm receiving
from other people.

00:09:44.667 --> 00:09:46.801
So this is the self scope.

00:09:46.801 --> 00:09:48.801
Next, you can see
there's a lot of alt--

00:09:48.801 --> 00:09:51.801
uh, parameters that are optional
that I can supply.

00:09:51.801 --> 00:09:53.801
Uh, "alt equals JSON"--

00:09:53.801 --> 00:09:55.801
this one is hard-wired
into the Explorer,

00:09:55.801 --> 00:09:57.801
so you're getting
JSON responses.

00:09:57.801 --> 00:10:00.300
And I'm gonna say, oh,
I only want to get

00:10:00.300 --> 00:10:03.300
the max results the first ten,

00:10:03.300 --> 00:10:06.934
so now I've constructed
a request in the Explorer.

00:10:06.934 --> 00:10:10.901
Let's execute it
and see how it looks in HTTP.

00:10:10.901 --> 00:10:12.901
So, ah!

00:10:12.901 --> 00:10:15.400
very first thing that happens
is I get an error.

00:10:15.400 --> 00:10:17.400
Um, before I look at the error,

00:10:17.400 --> 00:10:19.400
let's look at just
the request itself.

00:10:19.400 --> 00:10:21.400
You can see right here
on the URL,

00:10:21.400 --> 00:10:24.400
this is an actual HTTP request
being issued by an Explorer,

00:10:24.400 --> 00:10:27.400
and this is the API.
It's very simple.

00:10:27.400 --> 00:10:30.067
So you can see in here,
there's a URL,

00:10:30.067 --> 00:10:32.067
Google APIs,
where all requests go.

00:10:32.067 --> 00:10:35.067
You can see that I'm accessing
Buzz version 1.

00:10:35.067 --> 00:10:38.067
I'm accessing
the activities feed.

00:10:38.067 --> 00:10:40.734
The required parameters
you can see right here,

00:10:40.734 --> 00:10:43.701
"at me" and "at self," which we
talked about a second ago.

00:10:43.701 --> 00:10:46.701
And you can also see a lot
of these optional parameters--

00:10:46.701 --> 00:10:49.200
the JSON, max results, pp--
that's prettyprint,

00:10:49.200 --> 00:10:51.234
so we have readable output,

00:10:51.234 --> 00:10:53.701
and, uh, key,
which we will cover later.

00:10:53.701 --> 00:10:56.701
And we just--all this was just
done with the HTTP Get request.

00:10:56.701 --> 00:10:58.701
That's it.
That's the API.

00:10:58.701 --> 00:11:01.767
Um, and there's a small
user agent, of course,

00:11:01.767 --> 00:11:04.767
and here, I can see the response
that I got back.

00:11:04.767 --> 00:11:07.767
In this case,
I got a 401 unauthorized,

00:11:07.767 --> 00:11:10.767
and that, uh, the Explorer
itself has warned me,

00:11:10.767 --> 00:11:13.200
"This method requires you
to be authenticated."

00:11:13.200 --> 00:11:15.200
Obviously, we forgot
to authenticate.

00:11:15.200 --> 00:11:18.200
And it even tells me, you need
to switch to private access,

00:11:18.200 --> 00:11:20.200
which I'll show you in a second,

00:11:20.200 --> 00:11:22.200
so let's go try switching
to private access.

00:11:22.200 --> 00:11:25.300
I can close the history pane
and go back to this.

00:11:25.300 --> 00:11:27.767
Now up in the Explorer,
you see here, it says,

00:11:27.767 --> 00:11:29.434
"using public access."

00:11:29.434 --> 00:11:31.434
I'm not actually
logged in as anybody,

00:11:31.434 --> 00:11:33.434
or have any authorization.

00:11:33.434 --> 00:11:36.434
I'm gonna use, uh,
switch to private access.

00:11:36.434 --> 00:11:38.434
I'm gonna be using something
called OAuth,

00:11:38.434 --> 00:11:40.100
or, in this case, OAuth2,

00:11:40.100 --> 00:11:42.601
which is the second version
of the OAuth protocol,

00:11:42.601 --> 00:11:44.934
and I'm going to grant me

00:11:44.934 --> 00:11:46.601
as the person making the--

00:11:46.601 --> 00:11:48.601
as the user of the API Explorer.

00:11:48.601 --> 00:11:52.100
I'm going to grant to
the API Explorer application

00:11:52.100 --> 00:11:55.601
the permission to make
requests on my behalf.

00:11:55.601 --> 00:11:57.601
So in Google--
in order to do that,

00:11:57.601 --> 00:12:00.601
the API Explorer's gonna
generate a request to Google,

00:12:00.601 --> 00:12:02.667
Google's gonna show me
a little dialogue,

00:12:02.667 --> 00:12:04.667
and I'm gonna click that there.

00:12:04.667 --> 00:12:06.667
Uh, I'll show that in a sec,

00:12:06.667 --> 00:12:08.667
but first, I have to choose
also the scope.

00:12:08.667 --> 00:12:10.667
The scope is, uh, a list of--

00:12:10.667 --> 00:12:12.501
when I grant ath--

00:12:12.501 --> 00:12:15.968
when I grant authorization
to this application,

00:12:15.968 --> 00:12:17.968
the application
is going to request

00:12:17.968 --> 00:12:20.467
a certain amount of power.
How much does--

00:12:20.467 --> 00:12:22.567
how much authorization
does it really want?

00:12:22.567 --> 00:12:25.567
And in this case,
the Buzz, uh, scope,

00:12:25.567 --> 00:12:28.567
is what we call it--
the Buzz scope says

00:12:28.567 --> 00:12:31.601
"The APIs Explorer application
is requesting ability

00:12:31.601 --> 00:12:34.567
to read and write
all my Buzz feeds,"

00:12:34.567 --> 00:12:37.067
to pretty much have
full control.

00:12:37.067 --> 00:12:39.067
There's also another scope

00:12:39.067 --> 00:12:41.067
called Buzz read-only,
you can see,

00:12:41.067 --> 00:12:44.067
that is, if the API Explorer
is going to choose--

00:12:44.067 --> 00:12:46.067
only has the ability
to read things,

00:12:46.067 --> 00:12:47.734
but not to write them back.

00:12:47.734 --> 00:12:49.367
There's a Picasso one,

00:12:49.367 --> 00:12:52.033
which limits you more
to the photo sets of the API,

00:12:52.033 --> 00:12:54.033
and so when every API publishes

00:12:54.033 --> 00:12:56.033
a certain set of scopes
that it supports,

00:12:56.033 --> 00:12:59.033
and as the developer,
you actually choose the scope.

00:12:59.033 --> 00:13:01.033
Normally, you know,
in the Explorer, of course,

00:13:01.033 --> 00:13:04.100
we let--we let me, the user,
choose the scope, but normally,

00:13:04.100 --> 00:13:06.601
you as the developer
are gonna choose the scope,

00:13:06.601 --> 00:13:08.601
and really, you want
to choose the scope

00:13:08.601 --> 00:13:10.200
that's the least powerful,

00:13:10.200 --> 00:13:12.534
so you don't scare your users
by asking for too much.

00:13:12.534 --> 00:13:14.534
But in this case,
I need to read and write,

00:13:14.534 --> 00:13:16.200
so I'm using the Buzz scope.

00:13:16.200 --> 00:13:18.200
And I'll switch
to private access,

00:13:18.200 --> 00:13:20.200
and a little window pops up,
so here, it says,

00:13:20.200 --> 00:13:22.200
"Google APIs Explorer is
requesting permission to manage

00:13:22.200 --> 00:13:25.200
all my Buzz activities"--
exactly what I want.

00:13:25.200 --> 00:13:27.200
Here's a small detail
of the types of things

00:13:27.200 --> 00:13:29.200
I'm giving it permission to do,

00:13:29.200 --> 00:13:31.200
and a little bit
more infi--info,

00:13:31.200 --> 00:13:33.701
which tells me, you know,
who wrote this application,

00:13:33.701 --> 00:13:37.267
and, uh, where the redirect
is gonna go after it's done.

00:13:37.267 --> 00:13:39.701
So, of course,
I want to allow access,

00:13:39.701 --> 00:13:42.701
and now you'll see that it says
here on the APIs Explorer,

00:13:42.701 --> 00:13:44.701
"using private access,"

00:13:44.701 --> 00:13:47.701
so let's try
this same request again.

00:13:47.701 --> 00:13:49.701
Ah! this time,
you can see that it--

00:13:49.701 --> 00:13:51.701
executed moments ago,

00:13:51.701 --> 00:13:53.701
I actually executed the request.

00:13:53.701 --> 00:13:56.701
I now have a new authorization
header, using OAuth,

00:13:56.701 --> 00:13:59.434
with a very large
complicated token,

00:13:59.434 --> 00:14:02.000
and I got back an ok--
a response.

00:14:02.000 --> 00:14:04.000
This is a 200.

00:14:04.000 --> 00:14:07.000
Uh, I can actually see in
this response all the headers

00:14:07.000 --> 00:14:10.000
that I got back--again,
a really great debugging tool--

00:14:10.000 --> 00:14:12.000
and the JSON body.
Here it is.

00:14:12.000 --> 00:14:14.000
So you can see here, uh,

00:14:14.000 --> 00:14:16.000
there's one of
my object contents.

00:14:16.000 --> 00:14:18.000
This is the actual
object content.

00:14:18.000 --> 00:14:20.000
This is my Buzz post right here.

00:14:20.000 --> 00:14:22.000
"Stormy weather
for Amazon Cloud services."

00:14:22.000 --> 00:14:25.000
Oh, that's probably not
politically correct, so...

00:14:25.000 --> 00:14:27.501
Anyway, uh, this is just
an example.

00:14:27.501 --> 00:14:29.501
Let's go back to this tool.

00:14:29.501 --> 00:14:32.501
Um, so just a little bit more

00:14:32.501 --> 00:14:35.067
about the APIs Explorer
before I go on.

00:14:35.067 --> 00:14:37.067
Uh, Google launched--

00:14:37.067 --> 00:14:39.868
just yesterday,
we introduced a new API.

00:14:39.868 --> 00:14:42.801
We call it the Google APIs
Discovery Service,

00:14:42.801 --> 00:14:44.801
and it provides a list
of all APIs,

00:14:44.801 --> 00:14:46.434
and a mechanical,

00:14:46.434 --> 00:14:48.434
machine-readable description
of how they operate.

00:14:48.434 --> 00:14:51.434
And, uh, this service--if you
want to learn more about it,

00:14:51.434 --> 00:14:54.200
you can go see a talk tomorrow--
at 10:00 in the morning,

00:14:54.200 --> 00:14:56.200
there's a presentation
just on this API,

00:14:56.200 --> 00:14:58.767
and how we use it to construct
client libraries.

00:14:58.767 --> 00:15:01.868
We also use it to construct
things like the API Explorer.

00:15:01.868 --> 00:15:03.868
The Explorer itself
is a completely

00:15:03.868 --> 00:15:05.701
dynamically driven service,

00:15:05.701 --> 00:15:07.701
so anytime Google launches
a new API

00:15:07.701 --> 00:15:09.701
on the APIs infrastructure,

00:15:09.701 --> 00:15:12.200
it shows up in Explorer,
and you can play with it.

00:15:12.200 --> 00:15:14.300
So it's a really cool tool,
and I invite you all

00:15:14.300 --> 00:15:16.334
to check it out
if you're interested.

00:15:16.334 --> 00:15:19.000
So let's go back
to the next step.

00:15:19.000 --> 00:15:22.000
So just to recap
what I've done so far,

00:15:22.000 --> 00:15:24.901
using the Explorer,
I was actually able to show

00:15:24.901 --> 00:15:26.901
all the behaviors
that I wanted to show,

00:15:26.901 --> 00:15:29.567
so you're actually now ready
to start programming

00:15:29.567 --> 00:15:31.567
against, uh, the actual APIs.

00:15:31.567 --> 00:15:33.567
However, uh,
I'm actually a manager.

00:15:33.567 --> 00:15:35.567
I don't actually get time
to write code, but I have--

00:15:35.567 --> 00:15:37.234
you know, I'm in Google,

00:15:37.234 --> 00:15:39.234
there are a lot
of great engineers here,

00:15:39.234 --> 00:15:41.234
and, in fact,
Tony's one of them.

00:15:41.234 --> 00:15:44.234
He's gonna come up and actually
show you how to program the API.

00:15:44.234 --> 00:15:45.901
Tony.
Aiuto: Thank you, Mark.

00:15:45.901 --> 00:15:47.901
Uh, good morning, everyone.

00:15:47.901 --> 00:15:50.400
Uh, so to begin,

00:15:50.400 --> 00:15:52.400
I have to get my tools in order,

00:15:52.400 --> 00:15:55.400
and the primary tool I need
is a client library.

00:15:55.400 --> 00:15:57.067
Uh, we have libraries

00:15:57.067 --> 00:15:59.067
that we've recently enhanced
in the last few months.

00:15:59.067 --> 00:16:02.133
We have them for
these five popular languages.

00:16:02.133 --> 00:16:04.100
We have more coming.

00:16:04.100 --> 00:16:06.100
They all share common idioms,

00:16:06.100 --> 00:16:08.100
and they're all open-sourced

00:16:08.100 --> 00:16:10.300
and live on code.google.com.

00:16:10.300 --> 00:16:13.267
Um, this is just a landing page
for the thing.

00:16:13.267 --> 00:16:15.267
You could browse here
for documentation

00:16:15.267 --> 00:16:17.100
and pointers to each.

00:16:17.100 --> 00:16:20.100
Each has its own site
devoted to its own examples

00:16:20.100 --> 00:16:23.067
and, uh, sample classes.

00:16:23.067 --> 00:16:25.601
Um, today, we're going
to use Java.

00:16:25.601 --> 00:16:28.200
I, uh, hope that's
appropriate for this audience.

00:16:28.200 --> 00:16:30.200
Um, but the things I teach you
will be applicable

00:16:30.200 --> 00:16:32.834
to any language, should you
choose something else.

00:16:32.834 --> 00:16:34.834
Um,

00:16:34.834 --> 00:16:36.834
whoops--slide.
Oops, too far.

00:16:36.834 --> 00:16:38.834
The--I'd like to talk about

00:16:38.834 --> 00:16:40.834
the Google APIs client for Java.

00:16:40.834 --> 00:16:43.834
Um, this is now
in version 1.4 Beta.

00:16:43.834 --> 00:16:46.834
At the bottom is a base library

00:16:46.834 --> 00:16:49.834
that provides mechanisms
for building HTTP requests,

00:16:49.834 --> 00:16:52.834
um, creating and parsing
those, uh, responses

00:16:52.834 --> 00:16:54.834
in JSON and XML,

00:16:54.834 --> 00:16:57.400
and OAuth2 helper classes.

00:16:57.400 --> 00:16:59.934
The HTTP transport is--

00:16:59.934 --> 00:17:02.400
you can plug in
whichever one you want,

00:17:02.400 --> 00:17:05.467
because you use different ones
in different environments.

00:17:05.467 --> 00:17:08.467
People writing mobile apps
on Android

00:17:08.467 --> 00:17:11.434
would probably use the ones
bundled with the Android SDK.

00:17:11.434 --> 00:17:13.801
If you're writing
a web server app,

00:17:13.801 --> 00:17:15.801
you may use a different one.

00:17:15.801 --> 00:17:18.801
Same goes for your JSON
and XML parsers.

00:17:18.801 --> 00:17:21.801
Uh, Android uses GSON
very often.

00:17:21.801 --> 00:17:23.801
Most people use
the Jackson parser.

00:17:23.801 --> 00:17:26.801
They have different memory
and speed footprints.

00:17:26.801 --> 00:17:29.801
Authentication you saw
a little of in Mark's talk,

00:17:29.801 --> 00:17:31.467
where we had the failure,

00:17:31.467 --> 00:17:33.467
and then we had
to give permissions.

00:17:33.467 --> 00:17:35.067
That's a complex topic.

00:17:35.067 --> 00:17:38.067
We have a lot of helper classes
to make that easier for you.

00:17:38.067 --> 00:17:40.067
Above the base library,

00:17:40.067 --> 00:17:42.067
we have API specific libraries,

00:17:42.067 --> 00:17:45.734
so there is one for Buzz,
URL shorten, moderator.

00:17:45.734 --> 00:17:48.067
These are built
with the discovery mechanisms.

00:17:48.067 --> 00:17:51.067
In the same way
the APIs Explorer

00:17:51.067 --> 00:17:53.601
generates itself on the fly
from discovery,

00:17:53.601 --> 00:17:56.934
we can use this to generate
strongly typed Java libraries.

00:17:56.934 --> 00:17:59.601
They consist
of a service factory,

00:17:59.601 --> 00:18:01.667
which makes the requests

00:18:01.667 --> 00:18:03.667
to the service,

00:18:03.667 --> 00:18:05.701
and data model classes,

00:18:05.701 --> 00:18:08.167
which represent
the actual data elements

00:18:08.167 --> 00:18:11.167
that the service provides.

00:18:11.167 --> 00:18:14.167
Um, I said these are now
in version 1.4,

00:18:14.167 --> 00:18:16.167
announced in Beta this week.

00:18:16.167 --> 00:18:18.167
We can go to
the landing page for that

00:18:18.167 --> 00:18:21.167
and take a look at what
it is like.

00:18:21.167 --> 00:18:24.167
Yeah, from here,

00:18:24.167 --> 00:18:26.167
there are links
to the developers' guides,

00:18:26.167 --> 00:18:29.167
setup tools,
documentation for both

00:18:29.167 --> 00:18:32.167
the base library
and the API-specific libraries,

00:18:32.167 --> 00:18:35.167
and samples you need
to get started with.

00:18:35.167 --> 00:18:37.167
Um, now,

00:18:37.167 --> 00:18:39.167
real program--

00:18:39.167 --> 00:18:41.167
oops, didn't click.

00:18:41.167 --> 00:18:43.167
Real programmers
don't necessarily

00:18:43.167 --> 00:18:44.834
read the documentation.

00:18:44.834 --> 00:18:47.334
I'm hoping that I can find
a piece of code

00:18:47.334 --> 00:18:50.334
on Google's web site
that'll do roughly what I want,

00:18:50.334 --> 00:18:52.334
and I can learn from that

00:18:52.334 --> 00:18:55.334
and use it as a base to build
the application that I'd like.

00:18:55.334 --> 00:18:57.334
And I am lucky here,

00:18:57.334 --> 00:18:59.834
because we do have
samples like that.

00:18:59.834 --> 00:19:01.901
So somewhere in the code site

00:19:01.901 --> 00:19:03.901
for the API library,

00:19:03.901 --> 00:19:06.400
we've found this set
of examples,

00:19:06.400 --> 00:19:09.400
and there's things for BigQuery
and Buzz and Calendar.

00:19:09.400 --> 00:19:11.734
Uh, more get added.
These are open-source.

00:19:11.734 --> 00:19:14.400
We accept contributions
from the crowd.

00:19:14.400 --> 00:19:17.400
Uh, I'm going to take
one of these Buzz ones

00:19:17.400 --> 00:19:19.400
and do what I would do

00:19:19.400 --> 00:19:21.901
with any piece of code
I find on the internet--

00:19:21.901 --> 00:19:24.901
I'm gonna load it up, I'm gonna
bit-compile it and run it,

00:19:24.901 --> 00:19:27.901
because what could
possibly go wrong?

00:19:27.901 --> 00:19:30.567
Um, so let's see,

00:19:30.567 --> 00:19:33.567
um, what happens
when I run this piece

00:19:33.567 --> 00:19:36.567
that I pulled from Google.

00:19:36.567 --> 00:19:38.801
And let's make that
a little bigger.

00:19:41.501 --> 00:19:43.501
Eh, we can make it even bigger.

00:19:48.968 --> 00:19:51.968
It is running.
It is building a URL

00:19:51.968 --> 00:19:54.467
to pop up that
authentication request,

00:19:54.467 --> 00:19:56.968
like what we saw
in the APIs Explorer.

00:19:56.968 --> 00:19:59.968
It's popped up--ooh,
it popped up the browser window,

00:19:59.968 --> 00:20:01.968
and immediately failed,
um, and it's failed

00:20:01.968 --> 00:20:03.968
with this message--
"invalid client."

00:20:03.968 --> 00:20:06.968
So not totally despondent.

00:20:06.968 --> 00:20:09.968
I can go back and do
what real programmers do do,

00:20:09.968 --> 00:20:12.968
which is read my comments.

00:20:12.968 --> 00:20:15.567
Early on, I see
this block of code,

00:20:15.567 --> 00:20:18.601
and these two lines immediately
draw my attention.

00:20:18.601 --> 00:20:21.567
They say "enter_client_id"
and "enter_client_secret."

00:20:21.567 --> 00:20:23.567
Clearly, these are values
I have to provide.

00:20:23.567 --> 00:20:26.567
Fortunately, there are comments
nearby in the code

00:20:26.567 --> 00:20:29.567
saying that they come from
the Google APIs console,

00:20:29.567 --> 00:20:32.567
and there's a link to the APIs
console sitting there,

00:20:32.567 --> 00:20:34.567
so let's follow that link

00:20:34.567 --> 00:20:36.567
and see what we have to do
at the console.

00:20:36.567 --> 00:20:38.567
We have to start a project.

00:20:38.567 --> 00:20:41.534
I guess so. I want
to identify my project.

00:20:41.534 --> 00:20:43.534
And I know I want to use Buzz,

00:20:43.534 --> 00:20:45.534
so I'm going to do that.

00:20:45.534 --> 00:20:48.033
Oh, and I've got
the terms of service agreement

00:20:48.033 --> 00:20:50.033
for Buzz, which I think

00:20:50.033 --> 00:20:52.400
I will agree to,
so we can proceed.

00:20:52.400 --> 00:20:54.033
We'll accept that.

00:20:54.033 --> 00:20:57.033
And I also know I'm going to
want to use the URL shortener,

00:20:57.033 --> 00:20:59.534
so let's just
accept that now.

00:20:59.534 --> 00:21:01.868
Now the comments

00:21:01.868 --> 00:21:03.601
were about access,

00:21:03.601 --> 00:21:05.601
so I'm going to go
to the API access,

00:21:05.601 --> 00:21:08.601
and I need an OAuth2
client I.D.,

00:21:08.601 --> 00:21:10.601
so let's create one of those.

00:21:10.601 --> 00:21:12.601
My product will be

00:21:12.601 --> 00:21:15.601
LOGAD11.

00:21:15.601 --> 00:21:18.601
I do not have a logo yet,

00:21:18.601 --> 00:21:20.601
because I'm just
a small company.

00:21:20.601 --> 00:21:22.601
And I'm going to select
an installed application,

00:21:22.601 --> 00:21:25.133
because the app I'm running
is running on my desktop.

00:21:25.133 --> 00:21:26.934
It's not on a web server.

00:21:26.934 --> 00:21:29.434
Um, a web application would be
something out in the cloud

00:21:29.434 --> 00:21:31.100
that you can refer to.

00:21:31.100 --> 00:21:33.100
Installed apps
run on your desktop.

00:21:33.100 --> 00:21:35.601
Client I.D.

00:21:35.601 --> 00:21:38.601
And now I've generated
these three items here.

00:21:38.601 --> 00:21:40.601
Client I.D. and client secret--

00:21:40.601 --> 00:21:42.601
That sounds good.
It ties in with my code.

00:21:42.601 --> 00:21:45.601
A redirect URI,
which is a funny string here--

00:21:45.601 --> 00:21:48.801
we'll come back to that.

00:21:51.334 --> 00:21:54.467
Oh, those were the elements
we just generated.

00:21:54.467 --> 00:21:56.467
I'll go back to my code,

00:21:56.467 --> 00:21:58.801
and I will cut
and paste them in.

00:21:58.801 --> 00:22:01.834
Now that I've done that,
we can look a little--

00:22:01.834 --> 00:22:03.834
these other fields here, uh,

00:22:03.834 --> 00:22:05.834
they're also
authentication-related.

00:22:05.834 --> 00:22:09.334
The redirect URI you saw
on the, um, APIs console--

00:22:09.334 --> 00:22:11.334
that's a special marker

00:22:11.334 --> 00:22:14.334
to say this is a native
installed application.

00:22:14.334 --> 00:22:17.167
The scope below it,

00:22:17.167 --> 00:22:19.167
Mark alluded to
in the APIs console.

00:22:19.167 --> 00:22:21.667
It was the write
that we're asking the user

00:22:21.667 --> 00:22:23.400
to grant the application.

00:22:23.400 --> 00:22:26.734
This is the ability to read
and write my Buzz posts.

00:22:26.734 --> 00:22:30.334
And let's see how the sample
looks when we finally run it...

00:22:37.367 --> 00:22:40.367
If I can learn to type.

00:22:40.367 --> 00:22:42.367
Okay,

00:22:42.367 --> 00:22:45.367
we're creating a little local
web server to get a redirect.

00:22:45.367 --> 00:22:47.367
We've built
the authorization URL.

00:22:47.367 --> 00:22:50.367
That's gonna pop up
the browser window.

00:22:50.367 --> 00:22:52.367
And this is great.

00:22:52.367 --> 00:22:55.367
We've seen the same kind
of authentication window

00:22:55.367 --> 00:22:57.367
that we saw
in the APIs Explorer.

00:22:57.367 --> 00:23:00.367
My app here is looking
to manage my Buzz activity.

00:23:00.367 --> 00:23:02.434
I will allow it access.

00:23:02.434 --> 00:23:04.434
The window closes.
I get a response back

00:23:04.434 --> 00:23:06.267
saying it's okay.

00:23:06.267 --> 00:23:08.767
Now we're asking
the OAuth server from Google

00:23:08.767 --> 00:23:11.767
for a verification code,
and we see one of these strings

00:23:11.767 --> 00:23:14.100
that looks very much
like the string we saw

00:23:14.100 --> 00:23:17.100
in the APIs Explorer that
was posted into the request.

00:23:17.100 --> 00:23:19.601
And now I see my Buzz posts--

00:23:19.601 --> 00:23:22.601
or, I see Mark's Buzz posts
listed here.

00:23:22.601 --> 00:23:24.601
Great.

00:23:24.601 --> 00:23:26.601
At this point, I know

00:23:26.601 --> 00:23:28.601
that I can run an application.

00:23:28.601 --> 00:23:30.601
So it's time to look

00:23:30.601 --> 00:23:32.601
through the sample code,

00:23:32.601 --> 00:23:34.601
learn how it works,

00:23:34.601 --> 00:23:37.601
and then I can use that
as a base to finish.

00:23:37.601 --> 00:23:40.601
Um, early in the code,
I see this.

00:23:40.601 --> 00:23:43.601
It's creating a transport level

00:23:43.601 --> 00:23:45.601
for the HTTP request

00:23:45.601 --> 00:23:47.601
and the JSON parser.

00:23:47.601 --> 00:23:49.601
Uh, these are the kind--
these are a pair

00:23:49.601 --> 00:23:51.601
that are appropriate
for an installed app.

00:23:51.601 --> 00:23:54.601
Right below it, I use those
to create a Buzz object,

00:23:54.601 --> 00:23:57.601
and my Buzz object
is going to be my handle

00:23:57.601 --> 00:24:00.601
for creating requests
to the Buzz service.

00:24:00.601 --> 00:24:03.667
Right below that in the code,
I see this--

00:24:03.667 --> 00:24:06.167
we're taking that
client I.D. and secret

00:24:06.167 --> 00:24:08.167
that were pasted into the app,

00:24:08.167 --> 00:24:10.167
making an identity object,

00:24:10.167 --> 00:24:12.667
then using the identity object

00:24:12.667 --> 00:24:14.667
and the scope--

00:24:14.667 --> 00:24:17.667
so it's my application
and the writes it wants--

00:24:17.667 --> 00:24:20.167
to create this, uh,
local server flow object.

00:24:20.167 --> 00:24:23.167
This is a helper class
that's provided with the example

00:24:23.167 --> 00:24:26.167
that runs through
launching the server

00:24:26.167 --> 00:24:29.167
and doing this OAuth dance

00:24:29.167 --> 00:24:32.167
and this flow that gets you
the authorization token.

00:24:32.167 --> 00:24:34.167
We call that local
server flow object

00:24:34.167 --> 00:24:36.167
to get the access token,

00:24:36.167 --> 00:24:39.167
and then we call
the Buzz set access token

00:24:39.167 --> 00:24:42.167
to brand that into
every future request.

00:24:42.167 --> 00:24:45.200
So that's how it slips into
the HTTP headers.

00:24:45.200 --> 00:24:48.167
And this sample hides

00:24:48.167 --> 00:24:50.667
a lot of the details of OAuth2.

00:24:50.667 --> 00:24:52.667
We're trying to make it
easy for you,

00:24:52.667 --> 00:24:54.501
but it is a complex subject,

00:24:54.501 --> 00:24:56.501
and a little later on
in the talk,

00:24:56.501 --> 00:24:59.334
we'll go into that
in much more detail.

00:24:59.334 --> 00:25:01.400
I see below this, some code

00:25:01.400 --> 00:25:03.400
that actually makes a request.

00:25:03.400 --> 00:25:05.400
Here, um, I'm building

00:25:05.400 --> 00:25:07.400
an activities list request

00:25:07.400 --> 00:25:09.400
by calling this constructor
for it.

00:25:09.400 --> 00:25:12.400
You'll see this is identical
to the request Mark's made.

00:25:12.400 --> 00:25:14.400
I've passed in me and self,

00:25:14.400 --> 00:25:17.067
the two required
parameters to this.

00:25:17.067 --> 00:25:20.100
I'm setting the optional
parameter maxResults.

00:25:20.100 --> 00:25:23.067
We do our required parameters
in the constructor.

00:25:23.067 --> 00:25:25.067
We do our optional parameters,

00:25:25.067 --> 00:25:27.567
just a setting
on the request below it.

00:25:27.567 --> 00:25:30.567
Finally, I execute that request,
and get a response,

00:25:30.567 --> 00:25:33.567
and the response is not
just a block of JSON or XML.

00:25:33.567 --> 00:25:35.567
It comes back to you

00:25:35.567 --> 00:25:37.567
a fully formed object

00:25:37.567 --> 00:25:39.567
that can be of any depth

00:25:39.567 --> 00:25:41.567
of complexity as required.

00:25:41.567 --> 00:25:44.567
That object happens to have

00:25:44.567 --> 00:25:46.567
an array of activities in it,

00:25:46.567 --> 00:25:49.067
called the feed items.

00:25:49.067 --> 00:25:52.100
I can loop through that array,

00:25:52.100 --> 00:25:55.067
take the Buzz object from each,
grab its content,

00:25:55.067 --> 00:25:57.567
which is actually my post,
and print it.

00:25:57.567 --> 00:25:59.567
Now this idiom
I've just shown you

00:25:59.567 --> 00:26:01.634
is used in all of
our client libraries.

00:26:01.634 --> 00:26:03.634
We always build a request,

00:26:03.634 --> 00:26:05.634
we possibly let you modify it,

00:26:05.634 --> 00:26:07.634
we execute the request,
and get results.

00:26:07.634 --> 00:26:09.634
So what you've learned
here is applicable

00:26:09.634 --> 00:26:11.634
in any language
you want to use.

00:26:11.634 --> 00:26:14.300
And I know what I have to know,

00:26:14.300 --> 00:26:16.300
so I have to sit down
and start doing the code

00:26:16.300 --> 00:26:18.300
to finish my application,

00:26:18.300 --> 00:26:20.300
and I'm gonna begin
at the bottom,

00:26:20.300 --> 00:26:23.300
writing some of the grunt work
things that I need.

00:26:23.300 --> 00:26:25.334
I know I have to go through
a string,

00:26:25.334 --> 00:26:27.300
look for URLs, and replace them,

00:26:27.300 --> 00:26:29.801
so I wrote
a little replacer, um,

00:26:29.801 --> 00:26:32.601
and it works by taking
a block of text

00:26:32.601 --> 00:26:34.601
and a regular expression,

00:26:34.601 --> 00:26:37.601
letting you iterate
over that block of text

00:26:37.601 --> 00:26:39.601
with the next operator.

00:26:39.601 --> 00:26:42.601
You can pull out the current
match, see that string,

00:26:42.601 --> 00:26:45.601
and replace it with something
else if you choose to.

00:26:45.601 --> 00:26:47.601
And finally, when you're done,

00:26:47.601 --> 00:26:50.601
you can grab the result
into modified string.

00:26:50.601 --> 00:26:52.601
Um, coming up a level,

00:26:52.601 --> 00:26:55.100
we're gonna want to make
shortened URLs.

00:26:55.100 --> 00:26:57.100
So I'm gonna have to add
the URL shortener

00:26:57.100 --> 00:26:59.133
to my--my application.

00:26:59.133 --> 00:27:01.100
I've accepted
the terms of service

00:27:01.100 --> 00:27:04.167
and turned it on in the console,
so I'm ahead of the game there.

00:27:04.167 --> 00:27:06.167
And now I have to add a factory

00:27:06.167 --> 00:27:09.167
for building URL shortener
requests to my application,

00:27:09.167 --> 00:27:11.667
and it only adds two lines
of code here.

00:27:11.667 --> 00:27:14.667
I import the thing, and I
create a URL shortener object.

00:27:14.667 --> 00:27:17.167
I'm reusing the same
transport and factory

00:27:17.167 --> 00:27:19.167
that I used for the Buzz object,

00:27:19.167 --> 00:27:22.667
because they are thread safe
and reusable in that way.

00:27:22.667 --> 00:27:24.667
You should only need
one Buzz object,

00:27:24.667 --> 00:27:27.667
one URL shortener,
one transport, one factory,

00:27:27.667 --> 00:27:30.667
for an application of any comp--

00:27:30.667 --> 00:27:33.167
of infinite complexity.

00:27:33.167 --> 00:27:36.167
Um, so my inner loop
to create request

00:27:36.167 --> 00:27:38.167
looks something like this.

00:27:38.167 --> 00:27:40.667
I make one of my replacers.

00:27:40.667 --> 00:27:43.667
Out in the code somewhere,
I have this hairy REGEX

00:27:43.667 --> 00:27:46.667
that detects URLs.
I run it over a piece of text,

00:27:46.667 --> 00:27:48.334
looking for them.

00:27:48.334 --> 00:27:50.334
If they're already shortened,
I skip them,

00:27:50.334 --> 00:27:53.334
but if I want to shorten it,
I do this,

00:27:53.334 --> 00:27:55.334
and this is exactly
what Mark did.

00:27:55.334 --> 00:27:57.334
We create the body
of the request,

00:27:57.334 --> 00:27:59.334
which is a URL object.

00:27:59.334 --> 00:28:01.400
I set the long URL.

00:28:01.400 --> 00:28:04.400
I create an insert request
with that body.

00:28:04.400 --> 00:28:06.434
Then I execute the request,

00:28:06.434 --> 00:28:08.400
and I get a response.

00:28:08.400 --> 00:28:11.400
That response has the short
UI dell--I.D.--

00:28:11.400 --> 00:28:14.400
short URL in the I.D. field.

00:28:14.400 --> 00:28:16.400
I can replace that
into the text,

00:28:16.400 --> 00:28:18.400
and after I've iterated
all of them,

00:28:18.400 --> 00:28:20.901
I can return the result.

00:28:20.901 --> 00:28:24.200
The outer loop that calls this
looks like this.

00:28:24.200 --> 00:28:27.434
We iterate over
the activity items

00:28:27.434 --> 00:28:29.400
in my activity feed.

00:28:29.400 --> 00:28:31.400
I take the content from each.

00:28:31.400 --> 00:28:33.067
I shorten them.

00:28:33.067 --> 00:28:35.567
If it's changed, I want
to update my Buzz post,

00:28:35.567 --> 00:28:38.567
and I do that by creating
an updateRequest

00:28:38.567 --> 00:28:41.067
with the required me and self.

00:28:41.067 --> 00:28:43.067
I have to give it the I.D.

00:28:43.067 --> 00:28:45.067
of the activity
that I'm updating,

00:28:45.067 --> 00:28:47.067
and I give it
the modified activity.

00:28:47.067 --> 00:28:50.767
I execute that request,
and I get a result.

00:28:50.767 --> 00:28:53.701
Let's see if it works.

00:29:03.767 --> 00:29:05.767
It's doing
the same OAuth process,

00:29:05.767 --> 00:29:07.567
starting the server.

00:29:07.567 --> 00:29:10.567
It's filled the URL
we're gonna direct the user to,

00:29:10.567 --> 00:29:13.567
and popping up
a browser window for them.

00:29:13.567 --> 00:29:16.567
Great.
I see the application.

00:29:16.567 --> 00:29:19.567
This time, I've added URL
shortener to my list of scopes,

00:29:19.567 --> 00:29:21.567
so I see that.

00:29:21.567 --> 00:29:24.234
We're going to grant it access.

00:29:24.234 --> 00:29:27.234
We're finishing the OAuth
with a verification code,

00:29:27.234 --> 00:29:30.234
turning that into
an access token,

00:29:30.234 --> 00:29:33.234
and...

00:29:33.234 --> 00:29:35.734
Great. We're going
through the posts.

00:29:35.734 --> 00:29:37.734
I see the long URLs.

00:29:37.734 --> 00:29:40.234
I see them shortened
to something.

00:29:40.234 --> 00:29:43.234
I could declare a victory here,

00:29:43.234 --> 00:29:45.234
but really,

00:29:45.234 --> 00:29:47.234
I should go check to see
if anything happened,

00:29:47.234 --> 00:29:49.734
so let's look
at Mark's Buzz feed.

00:29:51.234 --> 00:29:53.234
There we go.

00:29:53.234 --> 00:29:55.734
They're all short,

00:29:55.734 --> 00:29:58.667
and I'm gonna declare victory
at this point.

00:30:02.901 --> 00:30:06.400
Okay, so now I really know
everything I need

00:30:06.400 --> 00:30:08.400
to write code.

00:30:08.400 --> 00:30:11.901
Um, I know how to create
a handle to an ob--

00:30:11.901 --> 00:30:13.901
to a service.

00:30:13.901 --> 00:30:16.901
I know how to authenticate it.
I know how to make requests.

00:30:16.901 --> 00:30:18.901
What I don't know
is how to manage

00:30:18.901 --> 00:30:20.567
my success as a developer,

00:30:20.567 --> 00:30:23.567
because if I want to deploy
this, I have a real project.

00:30:23.567 --> 00:30:25.567
I'm going to have to
manage that in some way.

00:30:25.567 --> 00:30:27.567
For that, we have
David Gibson here,

00:30:27.567 --> 00:30:29.567
who will continue the talk,

00:30:29.567 --> 00:30:31.567
and he will explain that

00:30:31.567 --> 00:30:34.234
in all the detail
you need to know.

00:30:34.234 --> 00:30:36.234
Thank you.
[applause]

00:30:36.234 --> 00:30:38.234
Gibson: Hi, I'm David,

00:30:38.234 --> 00:30:41.234
and I'm here to tell you
about the rest of your life.

00:30:41.234 --> 00:30:44.234
And, uh, the rest of your life,
as you know,

00:30:44.234 --> 00:30:46.234
once you've built the app,
there's still--

00:30:46.234 --> 00:30:49.234
well, most of your time
is spent managing it

00:30:49.234 --> 00:30:51.901
and making sure
that it keeps on working.

00:30:51.901 --> 00:30:53.901
Um,

00:30:53.901 --> 00:30:56.901
I've been working in
the API infrastructure group

00:30:56.901 --> 00:31:00.133
on various, uh,
developer-centric features,

00:31:00.133 --> 00:31:02.868
um, on the infrastructure side,

00:31:02.868 --> 00:31:06.334
and the way it gets exposed
is in terms

00:31:06.334 --> 00:31:09.701
of all the various
project management features.

00:31:09.701 --> 00:31:12.868
Um, the story is gonna involve
talking about signup,

00:31:12.868 --> 00:31:15.868
talking about access
in a bit more detail,

00:31:15.868 --> 00:31:17.868
and then talking about, uh,

00:31:17.868 --> 00:31:20.868
our various traffic controls.

00:31:20.868 --> 00:31:23.367
So, uh, signup.

00:31:23.367 --> 00:31:25.367
Signup really means that

00:31:25.367 --> 00:31:27.367
you're becoming
a partner with Google

00:31:27.367 --> 00:31:30.367
in serving Google services

00:31:30.367 --> 00:31:32.367
to the users of the web.

00:31:32.367 --> 00:31:35.367
Our, uh, combined mission,

00:31:35.367 --> 00:31:37.033
as it were,

00:31:37.033 --> 00:31:39.033
is to make the web better
for everybody,

00:31:39.033 --> 00:31:42.033
and, um, what this means
in practice

00:31:42.033 --> 00:31:44.033
is that you get various tools

00:31:44.033 --> 00:31:46.534
to track how your app is doing,

00:31:46.534 --> 00:31:49.534
and also that Google
gets to know who you are,

00:31:49.534 --> 00:31:52.033
so that we can reach out to you
if there are problems,

00:31:52.033 --> 00:31:54.033
and we can reach out to you
if there's new features

00:31:54.033 --> 00:31:56.033
or changes that you
should be aware of.

00:31:56.033 --> 00:31:59.067
Um, it also means that
we get to serve traffic to you,

00:31:59.067 --> 00:32:01.033
and not the bad guys.

00:32:01.033 --> 00:32:04.100
There are, unfortunately,
a lot of people out there

00:32:04.100 --> 00:32:06.100
who are trying to do things
like, uh,

00:32:06.100 --> 00:32:08.601
search for every single
restaurant in Europe,

00:32:08.601 --> 00:32:11.634
and that's not a good use
of anybody's resources.

00:32:11.634 --> 00:32:14.634
So, uh, we'd rather
be serving traffic to people

00:32:14.634 --> 00:32:16.634
who are serving

00:32:16.634 --> 00:32:18.634
real user use cases.

00:32:18.634 --> 00:32:20.634
Okay, signup sounds
a bit complicated,

00:32:20.634 --> 00:32:22.300
but actually it's very easy.

00:32:22.300 --> 00:32:25.300
Tony's walked you through
the entire flow already.

00:32:25.300 --> 00:32:27.300
All you need
is a Google account,

00:32:27.300 --> 00:32:29.300
and you select the APIs
you want to use,

00:32:29.300 --> 00:32:31.300
you accept the terms of service,
and you're done.

00:32:31.300 --> 00:32:32.834
You're good to go.

00:32:32.834 --> 00:32:34.801
Um, when you want
to go back to the console,

00:32:34.801 --> 00:32:37.801
you'll see there's a whole
lot more features there.

00:32:37.801 --> 00:32:40.801
You can invite other
team members for either,

00:32:40.801 --> 00:32:42.801
you know, read-only access,

00:32:42.801 --> 00:32:44.801
or actually edit access
to your project,

00:32:44.801 --> 00:32:46.801
and you can set up
access credentials

00:32:46.801 --> 00:32:49.801
and you can manage
the traffic controls.

00:32:49.801 --> 00:32:52.300
Now I do want to talk about

00:32:52.300 --> 00:32:54.300
terms of service
a little bit more.

00:32:54.300 --> 00:32:57.300
Okay, I'm an engineer trying
to sound like a lawyer here,

00:32:57.300 --> 00:32:59.300
but it's actually not true

00:32:59.300 --> 00:33:01.367
that the lawyers made us do it.

00:33:01.367 --> 00:33:04.100
It's actually more true
that we made the lawyers do it,

00:33:04.100 --> 00:33:07.100
and we very much
want to encode

00:33:07.100 --> 00:33:10.100
the responsibilities
on both sides here.

00:33:10.100 --> 00:33:13.100
We want to make sure
that neither

00:33:13.100 --> 00:33:15.601
Google developers or Google

00:33:15.601 --> 00:33:18.601
suddenly gets a surprise
and gets subjected

00:33:18.601 --> 00:33:20.601
to something
they weren't expecting.

00:33:20.601 --> 00:33:22.601
So I do encourage
you to read it.

00:33:22.601 --> 00:33:24.934
You only need to read it once,
and, in fact,

00:33:24.934 --> 00:33:27.267
the console will only
ever show it to you once.

00:33:27.267 --> 00:33:30.267
Um, and as you read it, bear in
mind that the motivation for it

00:33:30.267 --> 00:33:32.267
is to improve the web experience

00:33:32.267 --> 00:33:34.267
for the end users.

00:33:34.267 --> 00:33:37.267
Okay,

00:33:37.267 --> 00:33:39.300
enough about signup.

00:33:39.300 --> 00:33:41.267
Now, um, Tony started talking
about access,

00:33:41.267 --> 00:33:43.767
and I want to cover it
in a bit more detail.

00:33:43.767 --> 00:33:45.767
Um, there are only
two separate purposes

00:33:45.767 --> 00:33:48.767
for which you're gonna need
to identify yourself,

00:33:48.767 --> 00:33:51.434
and that's to access
Google services,

00:33:51.434 --> 00:33:54.434
and then to access,
uh, user data,

00:33:54.434 --> 00:33:56.934
with the user's permission,
of course.

00:33:56.934 --> 00:33:58.934
And these are usually called

00:33:58.934 --> 00:34:00.934
the 2-legged
and the 3-legged cases.

00:34:00.934 --> 00:34:04.000
In the first case, there's two
legs--it's just you and Google.

00:34:04.000 --> 00:34:07.000
In the second case, there's
you, Google and the user

00:34:07.000 --> 00:34:09.934
who are all entering
into a relationship.

00:34:09.934 --> 00:34:11.934
Um, you may ask,

00:34:11.934 --> 00:34:14.434
"What if you don't identify
yourself at all?"

00:34:14.434 --> 00:34:17.100
And, yes, you can experiment

00:34:17.100 --> 00:34:19.100
completely anonymously.

00:34:19.100 --> 00:34:21.100
Um, don't expect to be able

00:34:21.100 --> 00:34:24.100
to launch
your app anonymously.

00:34:24.100 --> 00:34:26.601
Um, you'll find
that as you experiment,

00:34:26.601 --> 00:34:28.601
you're gonna get
limited service access.

00:34:28.601 --> 00:34:31.601
Um, some APIs don't want you
to experiment anonymously

00:34:31.601 --> 00:34:33.601
at all, unfortunately.

00:34:33.601 --> 00:34:36.601
Um, most APIs are gonna
grant you a pretty low QPS

00:34:36.601 --> 00:34:39.601
for experimentation purposes,
and, of course,

00:34:39.601 --> 00:34:42.100
uh, don't expect to access
user's private data

00:34:42.100 --> 00:34:45.100
if the user doesn't know
who you are.

00:34:45.100 --> 00:34:47.100
Um,

00:34:47.100 --> 00:34:51.100
let's go to the simple
API access case,

00:34:51.100 --> 00:34:54.100
where it's just you wanting
to access a Google service.

00:34:54.100 --> 00:34:57.434
All it needs is an API key...

00:34:59.601 --> 00:35:02.667
And it's designed
to be Grab and Go,

00:35:02.667 --> 00:35:05.667
very simple to grab and deploy.

00:35:05.667 --> 00:35:07.167
Here's an example.

00:35:07.167 --> 00:35:09.167
Um, here's
the URL shortener application

00:35:09.167 --> 00:35:11.667
with the key
at the end of the URL,

00:35:11.667 --> 00:35:14.667
and, in fact, I encourage you
to click on this link now.

00:35:14.667 --> 00:35:17.667
Um, this link here is the same

00:35:17.667 --> 00:35:19.667
as the long link above,

00:35:19.667 --> 00:35:22.667
and it calls

00:35:22.667 --> 00:35:24.667
the URL shortener with that key,

00:35:24.667 --> 00:35:27.667
and we get the same result
as before.

00:35:27.667 --> 00:35:30.667
Uh, I encourage you
to click on it now,

00:35:30.667 --> 00:35:33.667
because we're gonna get
back to that a bit later.

00:35:33.667 --> 00:35:36.667
One other thing to mention here

00:35:36.667 --> 00:35:39.667
is that the security
is pretty simple.

00:35:39.667 --> 00:35:42.667
It's what you see here.
It's a shared secret.

00:35:42.667 --> 00:35:44.667
If you are accessing this
from your server,

00:35:44.667 --> 00:35:46.667
call us with HTTPS, and, uh,

00:35:46.667 --> 00:35:48.667
don't let anybody else
access your server.

00:35:48.667 --> 00:35:50.667
If you're calling it
from the browser,

00:35:50.667 --> 00:35:52.667
it's obviously on the open web,

00:35:52.667 --> 00:35:55.667
but you can lock it to just
the referrer of your site,

00:35:55.667 --> 00:35:57.634
and I'll show you
how to do that.

00:35:59.267 --> 00:36:01.601
The 3-legged case now--

00:36:01.601 --> 00:36:03.734
Tony has covered
most of this already.

00:36:03.734 --> 00:36:05.734
I do want to point out
on the side here,

00:36:05.734 --> 00:36:07.934
that both the keys
and the secrets

00:36:07.934 --> 00:36:10.801
can be revoked at any time
should you suspect

00:36:10.801 --> 00:36:13.701
that someone is abusing it
or, uh,

00:36:13.701 --> 00:36:16.701
you just want to change
your secrets, you know?

00:36:16.701 --> 00:36:18.701
This is like a password,
and they say that, uh,

00:36:18.701 --> 00:36:20.701
you know, passwords
are like underwear, you know.

00:36:20.701 --> 00:36:23.534
You should keep them secret
and change them often.

00:36:23.534 --> 00:36:26.467
[laughter]

00:36:28.434 --> 00:36:30.701
Gibson: So the OAuth2 story--

00:36:30.701 --> 00:36:33.200
what we are trying to avoid here

00:36:33.200 --> 00:36:35.200
is expecting users

00:36:35.200 --> 00:36:37.200
to give their password to you

00:36:37.200 --> 00:36:40.200
when all you want to do
is access their Buzz feed.

00:36:40.200 --> 00:36:43.434
The password is too powerful
a credential to hand over...

00:36:45.501 --> 00:36:47.167
So it consists of three steps,

00:36:47.167 --> 00:36:49.167
and the first step is really
the most important.

00:36:49.167 --> 00:36:52.501
This is what the user will see.
It's the permission dialogue.

00:36:52.501 --> 00:36:54.567
And knowing most users,
they're gonna see it

00:36:54.567 --> 00:36:56.734
and click "allow" immediately
without really reading it,

00:36:56.734 --> 00:36:59.400
but let's look at it
in a bit more detail.

00:36:59.400 --> 00:37:01.434
Mark's shown you this already,

00:37:01.434 --> 00:37:03.434
with viewing your URLs,

00:37:03.434 --> 00:37:06.434
and it's actually got the e-mail
of you, the developer,

00:37:06.434 --> 00:37:09.434
and it has the URL,

00:37:09.434 --> 00:37:11.467
including the site name,
of your site,

00:37:11.467 --> 00:37:14.133
which gives the users something
that they can, you know,

00:37:14.133 --> 00:37:17.133
identify with and decide whether
they're going to trust or not.

00:37:17.133 --> 00:37:20.133
Once they've consented,

00:37:20.133 --> 00:37:23.133
the rest of the flow
is behind the scenes.

00:37:23.133 --> 00:37:26.133
Um, because there are various
different use cases,

00:37:26.133 --> 00:37:28.634
the flows, as they are called,

00:37:28.634 --> 00:37:30.634
are slightly different.

00:37:30.634 --> 00:37:33.667
From JavaScript,
there's an access token.

00:37:33.667 --> 00:37:36.634
I think, after a pound sign,
there's a web server flow.

00:37:36.634 --> 00:37:39.567
There's a local server flow,
which is what Tony was showing.

00:37:39.567 --> 00:37:42.567
And step 3 is what
you really wanted to do,

00:37:42.567 --> 00:37:44.567
which was to access
the user's data,

00:37:44.567 --> 00:37:46.567
and you put a token in the URL,

00:37:46.567 --> 00:37:49.567
and that token encodes
who you are and who the user is,

00:37:49.567 --> 00:37:52.067
and you get the user's data.

00:37:52.067 --> 00:37:54.067
And there's actually a step 4,

00:37:54.067 --> 00:37:56.067
which is that
the user themselves

00:37:56.067 --> 00:37:59.067
may, at some point, decide that
they don't like you anymore,

00:37:59.067 --> 00:38:01.133
or they want to clean up their--

00:38:01.133 --> 00:38:03.133
who they've granted
permission to.

00:38:03.133 --> 00:38:05.133
They can go to
the console google.com page,

00:38:05.133 --> 00:38:07.167
and as you see here,

00:38:07.167 --> 00:38:10.133
this user has granted access
to the URL shortener--

00:38:10.133 --> 00:38:13.133
to the API Explorer and the URL
shortener, in particular,

00:38:13.133 --> 00:38:16.133
and they can
evoke access instantly.

00:38:16.133 --> 00:38:19.133
This is a very quick tour
of OAuth.

00:38:19.133 --> 00:38:22.133
There will be a talk tomorrow,

00:38:22.133 --> 00:38:24.133
um, 1:45,

00:38:24.133 --> 00:38:27.067
covering a lot of these topics
in a lot more detail.

00:38:29.133 --> 00:38:32.133
So we've covered
two of the three points.

00:38:32.133 --> 00:38:35.133
Uh, signup you should only
really need to do once.

00:38:35.133 --> 00:38:38.133
The access you should,
hopefully, only need to do once,

00:38:38.133 --> 00:38:41.133
but you might need to revoke
your keys at some point.

00:38:41.133 --> 00:38:44.133
The traffic controls you might
want to monitor continuously,

00:38:44.133 --> 00:38:47.133
on perhaps a daily
or weekly basis.

00:38:47.133 --> 00:38:49.634
So with all these new APIs then,

00:38:49.634 --> 00:38:52.634
we have, uh, default
daily limits set up

00:38:52.634 --> 00:38:55.567
per day, per application.

00:38:55.567 --> 00:38:57.734
Um, the limits are fairly large.

00:38:57.734 --> 00:38:59.567
They are sufficient for many,
you know,

00:38:59.567 --> 00:39:01.000
small- to moderate-sized sites.

00:39:01.000 --> 00:39:03.067
For the case of Buzz
and URL shortener,

00:39:03.067 --> 00:39:04.734
it's a million queries a day,

00:39:04.734 --> 00:39:07.734
which should be enough
for a lot of sites.

00:39:07.734 --> 00:39:09.868
That said, more is available
on request,

00:39:09.868 --> 00:39:12.501
if you actually fill in a form
and let us know who you are,

00:39:12.501 --> 00:39:15.501
and your use case, we are more
than happy to grant you more--

00:39:15.501 --> 00:39:18.000
um, academic users,
in particular.

00:39:18.000 --> 00:39:20.200
And lastly, we are going to be--

00:39:20.200 --> 00:39:22.400
we are introducing
some billable APIs, as well.

00:39:22.400 --> 00:39:24.400
First out of the gate

00:39:24.400 --> 00:39:26.801
are Custom Search
and Prediction.

00:39:29.868 --> 00:39:31.868
Now we get back to the point

00:39:31.868 --> 00:39:33.868
that this is
a shared responsibility

00:39:33.868 --> 00:39:36.367
between Google
and you the developer,

00:39:36.367 --> 00:39:40.367
in that while we grant your
entire app for daily quota

00:39:40.367 --> 00:39:43.367
users could still

00:39:43.367 --> 00:39:46.400
accidentally, or on purpose,

00:39:46.400 --> 00:39:49.701
exhaust your entire quota
if they hit you hard enough,

00:39:49.701 --> 00:39:52.701
because it is shared
among all your users.

00:39:52.701 --> 00:39:54.701
So you get to decide,

00:39:54.701 --> 00:39:57.367
based on the kind of traffic
that your app has,

00:39:57.367 --> 00:40:00.367
whether you want to set
a high query-per-second rate

00:40:00.367 --> 00:40:03.033
for each individual user IP
or not.

00:40:03.033 --> 00:40:05.033
Um, if your app
is particularly "bursty,"

00:40:05.033 --> 00:40:07.033
you want to set that high.

00:40:07.033 --> 00:40:10.033
If your app users are only gonna
access once or twice per day,

00:40:10.033 --> 00:40:12.033
then you can set that limit low.

00:40:12.033 --> 00:40:15.033
It all depends on
your traffic patterns.

00:40:15.033 --> 00:40:18.033
You may ask, "What if your users
are querying your server,

00:40:18.033 --> 00:40:21.033
and your server is relaying
that request to Google?

00:40:21.033 --> 00:40:23.033
And we have thought of that.

00:40:23.033 --> 00:40:26.501
There's a very simple way
of just putting that user's IP

00:40:26.501 --> 00:40:29.033
in the request URL,

00:40:29.033 --> 00:40:31.801
and Google will do all the, uh,

00:40:31.801 --> 00:40:34.000
metering on your behalf.

00:40:39.667 --> 00:40:42.501
Now lastly, um, billable APIs.

00:40:42.501 --> 00:40:45.667
When, um, there are
large sites out there

00:40:45.667 --> 00:40:47.667
querying Google,

00:40:47.667 --> 00:40:49.667
they do and can't--

00:40:49.667 --> 00:40:52.667
will eventually incur
real serving costs to us,

00:40:52.667 --> 00:40:55.667
and, uh, well there's two
real ways for dealing with this,

00:40:55.667 --> 00:40:57.667
and one is, yeah,
as I've mentioned,

00:40:57.667 --> 00:40:59.167
you--you set limits.

00:40:59.167 --> 00:41:02.234
The other one is you do
the obvious business thing,

00:41:02.234 --> 00:41:05.234
and you start charging
for Google's costs.

00:41:05.234 --> 00:41:08.234
This, uh, payment system
is also, if you think about it,

00:41:08.234 --> 00:41:10.234
a way to improve
the quality bar.

00:41:10.234 --> 00:41:12.734
It becomes, uh,
a lightweight relationship,

00:41:12.734 --> 00:41:14.734
lightweight
business relationship

00:41:14.734 --> 00:41:16.567
between developers and Google,

00:41:16.567 --> 00:41:19.634
and Google is providing
a quantifiable commitment

00:41:19.634 --> 00:41:22.133
that, uh, these APIs
are gonna be there,

00:41:22.133 --> 00:41:25.133
and are worth something,
and, uh,

00:41:25.133 --> 00:41:27.634
it enforces quality

00:41:27.634 --> 00:41:29.634
on both sides in that way.

00:41:29.634 --> 00:41:33.000
The, uh, actual signup process

00:41:33.000 --> 00:41:34.801
is very simple.

00:41:34.801 --> 00:41:36.801
You--you sign up
with a credit card

00:41:36.801 --> 00:41:39.133
in the API console.

00:41:39.133 --> 00:41:41.133
You get to choose
a daily maximum,

00:41:41.133 --> 00:41:43.133
because, after all,
it's your money.

00:41:43.133 --> 00:41:46.133
You decide how many queries
a day you will tolerate,

00:41:46.133 --> 00:41:49.133
and, uh, the API infrastructure
will enforce that.

00:41:49.133 --> 00:41:52.133
It's important to mention
that all APIs in the project

00:41:52.133 --> 00:41:54.133
get the same--

00:41:54.133 --> 00:41:57.133
will get the billable limits,

00:41:57.133 --> 00:41:59.801
so, uh, you should really
keep two projects around--

00:41:59.801 --> 00:42:01.868
one for, you know,
experimentation

00:42:01.868 --> 00:42:03.868
and development work,
and one for production,

00:42:03.868 --> 00:42:05.868
where, you know,
money's gonna be charged.

00:42:05.868 --> 00:42:08.367
And then you'll get a monthly
bill through Google checkout

00:42:08.367 --> 00:42:11.367
in a pretty familiar mechanism.

00:42:11.367 --> 00:42:14.367
Okay, it is now time for, uh,
a bit of demo,

00:42:14.367 --> 00:42:17.367
and walking through
a few of these features.

00:42:17.367 --> 00:42:20.367
Here's that, uh, URL again.

00:42:20.367 --> 00:42:22.367
Um, try and hit that...

00:42:22.367 --> 00:42:24.367
application,

00:42:24.367 --> 00:42:27.367
and I'll show you what happens
in the console.

00:42:27.367 --> 00:42:30.367
Let's try the development link.

00:42:30.367 --> 00:42:33.400
So on this project here,
it's a traffic control screen.

00:42:33.400 --> 00:42:36.367
It's--it's currently

00:42:36.367 --> 00:42:38.834
accepting requests
from any referrer,

00:42:38.834 --> 00:42:41.834
which means that your requests
should be going through--

00:42:41.834 --> 00:42:43.834
and we're gonna verify
and reload here--

00:42:43.834 --> 00:42:45.834
yes, they are still
going through.

00:42:45.834 --> 00:42:48.834
But if I reconfigure this,

00:42:48.834 --> 00:42:50.834
I can say, well, actually,

00:42:50.834 --> 00:42:53.334
yes, I want it
from browser scripts,

00:42:53.334 --> 00:42:57.267
and we can,

00:42:57.267 --> 00:42:59.334
you know,
pretend I own that site.

00:42:59.334 --> 00:43:02.400
If anybody actually
owns that site, speak up.

00:43:02.400 --> 00:43:05.400
But we update that,

00:43:05.400 --> 00:43:07.400
and, uh, it takes, uh,

00:43:07.400 --> 00:43:10.400
a minute or two
for caches to clear,

00:43:10.400 --> 00:43:12.400
but if you were hitting
that URL--

00:43:12.400 --> 00:43:14.400
we'll give it a few minutes
while I--

00:43:14.400 --> 00:43:16.400
while I talk about
other things--

00:43:16.400 --> 00:43:18.901
that access should be
shut down for anybody

00:43:18.901 --> 00:43:22.434
except people coming
from that site.

00:43:24.000 --> 00:43:25.901
So there are per-user limits,

00:43:25.901 --> 00:43:27.567
which I had talked about.

00:43:27.567 --> 00:43:29.567
The URL shortener is set
fairly low,

00:43:29.567 --> 00:43:32.567
which we don't expect
users to hit much.

00:43:32.567 --> 00:43:35.567
Now--and there's the limit

00:43:35.567 --> 00:43:37.567
of 1,000--

00:43:37.567 --> 00:43:39.601
a million queries a day
for the URL shortener.

00:43:39.601 --> 00:43:41.601
Now if we were
to turn on Billing--

00:43:41.601 --> 00:43:45.234
let's do that, we'll go
to the production project.

00:43:45.234 --> 00:43:47.234
It would look like this.

00:43:47.234 --> 00:43:50.234
So URL shortener, it doesn't
have a billable limit,

00:43:50.234 --> 00:43:52.734
so you get the million,
and the Custom Search API,

00:43:52.734 --> 00:43:56.200
which does, has increased
to, uh, 1,000 queries a day.

00:43:57.734 --> 00:44:00.434
Let us verify that.

00:44:00.434 --> 00:44:02.801
Okay, well, I need to talk
more slowly,

00:44:02.801 --> 00:44:05.801
and eventually,
access here will be blocked.

00:44:05.801 --> 00:44:08.801
Um, I do not exactly have time

00:44:08.801 --> 00:44:10.801
to talk more slowly,

00:44:10.801 --> 00:44:13.834
so experiment with this
on your own.

00:44:13.834 --> 00:44:15.801
The last thing I want
to show you, though,

00:44:15.801 --> 00:44:17.467
is that...

00:44:19.801 --> 00:44:22.300
Based on the traffic,

00:44:22.300 --> 00:44:24.300
you can see that--

00:44:24.300 --> 00:44:27.067
and if you hit--
start hitting that URL more,

00:44:27.067 --> 00:44:28.601
uh,

00:44:28.601 --> 00:44:31.234
there it is again--

00:44:31.234 --> 00:44:33.567
Nhm7a.

00:44:33.567 --> 00:44:36.000
You can see me experimenting

00:44:36.000 --> 00:44:37.868
in the week before
the conference,

00:44:37.868 --> 00:44:41.234
and you can see that traffic
is starting to spike today,

00:44:41.234 --> 00:44:44.067
and these graphs are real time

00:44:44.067 --> 00:44:46.934
up to less than a minute,

00:44:46.934 --> 00:44:49.434
and this is starting
to offer you tracking.

00:44:49.434 --> 00:44:51.434
It's starting to offer you
simple analytics.

00:44:51.434 --> 00:44:54.267
In this case, there's referrer
base and different APIs,

00:44:54.267 --> 00:44:55.934
you know,
translator's gonna show you

00:44:55.934 --> 00:44:57.934
breakdown by language
and things like that,

00:44:57.934 --> 00:45:00.868
and you can track to see how
close you're coming to quota,

00:45:00.868 --> 00:45:04.000
and what kind of users
are reaching your site.

00:45:07.200 --> 00:45:10.200
Has the numbers
actually changed?

00:45:10.200 --> 00:45:13.200
No, it hasn't actually
changed, okay.

00:45:13.200 --> 00:45:15.200
All right,

00:45:15.200 --> 00:45:18.200
that is the end of my very brief
tour of the console.

00:45:18.200 --> 00:45:21.434
I'm gonna hand back to Mark
to sum up.

00:45:23.567 --> 00:45:25.567
Stahl: So...
Gibson: Thank you.

00:45:25.567 --> 00:45:27.067
[applause]

00:45:27.067 --> 00:45:28.567
Stahl: Thanks a lot
to the engineers,

00:45:28.567 --> 00:45:31.200
who do a lot of this great,
great work for you guys.

00:45:31.200 --> 00:45:33.801
So, uh, you've now seen
pretty much, uh, what--

00:45:33.801 --> 00:45:35.801
this is pretty much
what you need

00:45:35.801 --> 00:45:38.801
to get started as a developer,
Google APIs.

00:45:38.801 --> 00:45:41.467
We have built a lot of new
technology, just to wrap up.

00:45:41.467 --> 00:45:43.300
We have the APIs Explorer,

00:45:43.300 --> 00:45:45.701
so if you're in that
"get inspired" learning stage,

00:45:45.701 --> 00:45:49.200
this is a great first step
to stake--just go and play.

00:45:49.200 --> 00:45:52.067
They're all there waiting
for you to try them out.

00:45:52.067 --> 00:45:53.734
Uh, if you want to start coding,

00:45:53.734 --> 00:45:55.701
we've got lots
of client libraries,

00:45:55.701 --> 00:45:58.701
so go--and we've been
concentrating heavily.

00:45:58.701 --> 00:46:00.701
Our developers have
told us over again

00:46:00.701 --> 00:46:02.534
that they really like samples.

00:46:02.534 --> 00:46:04.534
Uh, that's how a lot
of people get started.

00:46:04.534 --> 00:46:07.033
And so we are concentrating
on our client libraries,

00:46:07.033 --> 00:46:09.033
which all follow
the same patterns,

00:46:09.033 --> 00:46:11.534
and samples for every API
we can get around to writing,

00:46:11.534 --> 00:46:13.534
and all the projects
are open-source,

00:46:13.534 --> 00:46:16.534
so if you don't see a sample
and you want to submit one,

00:46:16.534 --> 00:46:19.534
you know, we take contributions.
We take donations, you know.

00:46:19.534 --> 00:46:22.033
And also we've built
this new API console.

00:46:22.033 --> 00:46:25.033
This is where you establish
your relationship to Google.

00:46:25.033 --> 00:46:26.701
It's a two-way relationship.

00:46:26.701 --> 00:46:29.534
You get a lot
of information back,

00:46:29.534 --> 00:46:31.534
and you can manage
all the authentication

00:46:31.534 --> 00:46:33.534
and registration procedures,

00:46:33.534 --> 00:46:36.534
which traditionally
were very hard for APIs.

00:46:36.534 --> 00:46:38.534
They're all centralized
in one place.

00:46:38.534 --> 00:46:40.534
All your keys,
all your management--

00:46:40.534 --> 00:46:43.534
It's all centralized. You can
change your keys and revoke.

00:46:43.534 --> 00:46:46.534
You can monitor your traffic.
You monitor your billing.

00:46:46.534 --> 00:46:49.534
Uh, it really, uh,
makes life really easy

00:46:49.534 --> 00:46:51.534
for developers to get started.

00:46:51.534 --> 00:46:55.534
So, uh, we have just
what's next?

00:46:55.534 --> 00:46:57.534
There's a lot more
information here.

00:46:57.534 --> 00:47:00.567
First off, uh, the sample
that Tony ran today,

00:47:00.567 --> 00:47:02.601
we have actually put the code
up there,

00:47:02.601 --> 00:47:04.601
so if you want to build
a URL shortener agent,

00:47:04.601 --> 00:47:06.601
well, we built one for you,

00:47:06.601 --> 00:47:09.601
um, go ahead, download the code,
see how it works,

00:47:09.601 --> 00:47:11.267
try it out yourself.

00:47:11.267 --> 00:47:13.267
We did remove all the keys,

00:47:13.267 --> 00:47:15.267
so you're gonna
have to add your own,

00:47:15.267 --> 00:47:17.767
but, um, since it's--
then it's your project.

00:47:17.767 --> 00:47:20.267
Uh, we also have
a lot more APIs.

00:47:20.267 --> 00:47:23.400
Google has a huge web site
devoted for developers,

00:47:23.400 --> 00:47:27.634
so go check out
the code.google.com APIs link,

00:47:27.634 --> 00:47:30.634
or any of the new tools,
obviously, you can go try them.

00:47:30.634 --> 00:47:32.634
And more client libraries,

00:47:32.634 --> 00:47:35.634
so pick the language
of your choice.

00:47:35.634 --> 00:47:38.634
Uh, so this is
to get you guys started.

00:47:38.634 --> 00:47:41.634
The Google APIs are a big topic

00:47:41.634 --> 00:47:43.634
at, uh, Google I/O.

00:47:43.634 --> 00:47:45.634
There's a lot more talks
that you can follow on,

00:47:45.634 --> 00:47:48.634
so just a brief rundown of
other places you may want to go

00:47:48.634 --> 00:47:51.634
if you want to learn
more about programming--

00:47:51.634 --> 00:47:54.634
one, of course, Android.
We have a whole talk today--

00:47:54.634 --> 00:47:56.634
I believe it's
just after this one--

00:47:56.634 --> 00:47:59.634
that discusses just
the techniques you're gonna need

00:47:59.634 --> 00:48:02.200
if you're writing
for Google APIs on Android.

00:48:02.200 --> 00:48:03.868
It's a different environment,

00:48:03.868 --> 00:48:05.868
but it's the exact same
client library.

00:48:05.868 --> 00:48:07.901
Um, different transport--
it all works together.

00:48:07.901 --> 00:48:09.868
But if you want to do
Android programming...

00:48:09.868 --> 00:48:12.868
We also have built an extension
to the Eclipse environment,

00:48:12.868 --> 00:48:15.868
so if you want to work
on a project in Eclipse,

00:48:15.868 --> 00:48:18.868
download into Eclipse, uh,
we build a plug-in for that.

00:48:18.868 --> 00:48:21.868
There is a talk, uh,
this afternoon on that,

00:48:21.868 --> 00:48:24.868
so that's one of the new
features of API support.

00:48:24.868 --> 00:48:27.534
Tomorrow, we have a couple--
we have two talks, as well,

00:48:27.534 --> 00:48:29.200
that 'm gonna point you to--

00:48:29.200 --> 00:48:31.200
First is, we talked about
the new Discovery API,

00:48:31.200 --> 00:48:34.200
which we use for building
these client libraries

00:48:34.200 --> 00:48:37.200
across all these languages,
so you can go check out on that,

00:48:37.200 --> 00:48:39.701
and as David had
already mentioned,

00:48:39.701 --> 00:48:42.701
uh, for those who want to really
understand authentication

00:48:42.701 --> 00:48:44.701
and how it works, tomorrow,

00:48:44.701 --> 00:48:46.701
there's a talk
tomorrow afternoon, as well.

00:48:46.701 --> 00:48:48.701
So that's everything we have.

00:48:48.701 --> 00:48:50.701
Google APIs are open
for business.

00:48:50.701 --> 00:48:53.701
We're looking forward to all
the great apps you guys build.

00:48:53.701 --> 00:48:56.701
I'm open for, uh,
questions and answers,

00:48:56.701 --> 00:48:59.701
and if, uh, Tony and David
could come up...

00:48:59.701 --> 00:49:01.767
[applause]

00:49:01.767 --> 00:49:04.767
Stahl: So--thank you.

00:49:04.767 --> 00:49:06.767
And just a word,

00:49:06.767 --> 00:49:08.767
uh, procedural word,
if you want to ask a question,

00:49:08.767 --> 00:49:10.767
if you could please
use the microphone,

00:49:10.767 --> 00:49:12.767
so, uh, other people
can hear you.

00:49:12.767 --> 00:49:15.767
man: Okay, I've turned on
the multi-factor authentication.

00:49:15.767 --> 00:49:18.300
Does that change any of the
flows or the approval screens?

00:49:18.300 --> 00:49:20.300
Stahl: I'm sorry, I'm not, uh--
which?

00:49:20.300 --> 00:49:22.801
man: I've turned on
the multi-factor authentication

00:49:22.801 --> 00:49:24.801
in my Google account.
Does that change

00:49:24.801 --> 00:49:27.801
any of the approval screens or
any of the workflow experience?

00:49:27.801 --> 00:49:29.300
Aiuto: Oh, no.

00:49:29.300 --> 00:49:31.801
Stahl: It--it--multi-factor,
yeah, I know where it actually

00:49:31.801 --> 00:49:34.801
does impact--one of the things
we didn't show in this--

00:49:34.801 --> 00:49:36.634
in these diagrams,

00:49:36.634 --> 00:49:39.634
the web browser was already
logged in as the test user.

00:49:39.634 --> 00:49:41.801
And when the web--

00:49:41.801 --> 00:49:43.634
when the user logs in,

00:49:43.634 --> 00:49:45.634
that's the point
at which they see

00:49:45.634 --> 00:49:48.634
the login, username,
password, and 2-factor auth.

00:49:48.634 --> 00:49:50.634
The approval dialogue
comes after that.

00:49:50.634 --> 00:49:52.133
man: Okay.

00:49:52.133 --> 00:49:55.133
Stahl: So this presumes
post 2-factor auth flows.

00:49:55.133 --> 00:49:57.634
It's just part of the flow.

00:49:57.634 --> 00:50:00.634
Um, does anybody else
have any other questions?

00:50:00.634 --> 00:50:02.634
Auito: Sir, over there?

00:50:02.634 --> 00:50:05.634
man: Hi, um,
the Python client library--

00:50:05.634 --> 00:50:07.634
is that, uh,
App Engine compatible?

00:50:07.634 --> 00:50:09.634
Can I build applications
on App Engine?

00:50:09.634 --> 00:50:11.100
Aiuto: Yes, it is.

00:50:11.100 --> 00:50:13.601
Stahl: Yes, in fact, it's, uh,
one of the interesting parts

00:50:13.601 --> 00:50:16.100
about the Python library is, uh,
it's completely dynamic.

00:50:16.100 --> 00:50:18.100
Python being a dynamic language,

00:50:18.100 --> 00:50:20.634
it literally works
with every API out the door

00:50:20.634 --> 00:50:22.601
that comes on the--
that runs off Discovery.

00:50:22.601 --> 00:50:25.601
It downloads Discovery,
bills the library on the fly,

00:50:25.601 --> 00:50:27.601
and makes it available to you.

00:50:27.601 --> 00:50:29.601
Um, so it's--

00:50:29.601 --> 00:50:31.601
and the developer's around here
somewhere, you know?

00:50:31.601 --> 00:50:33.601
man: [laughs]
Stahl: So it's--it's ready,

00:50:33.601 --> 00:50:36.601
and App Engine is one
of its target places,

00:50:36.601 --> 00:50:38.601
so it's ready to go.
man: Okay, thanks.

00:50:38.601 --> 00:50:40.267
Stahl: Yes?

00:50:40.267 --> 00:50:41.868
man: Hi, guys.
Thanks for the talk.

00:50:41.868 --> 00:50:45.267
So as a developer, if I,
uh, request a set of services,

00:50:45.267 --> 00:50:47.701
and I get, you know,
maybe my apps really good,

00:50:47.701 --> 00:50:50.534
and thousands of people grant
access to my application,

00:50:50.534 --> 00:50:52.934
and then I add a new feature
at some point,

00:50:52.934 --> 00:50:55.234
which now requires,
uh, high--

00:50:55.234 --> 00:50:57.100
you know, additional services
that I need access for,

00:50:57.100 --> 00:50:59.601
what do I do with all
the existing OAuth tokens?

00:50:59.601 --> 00:51:02.167
Do I have to basically
get everybody to re-auth,

00:51:02.167 --> 00:51:05.167
or is there a process to sort of
upgrade the existing people?

00:51:05.167 --> 00:51:07.167
Stahl: David?

00:51:07.167 --> 00:51:10.167
Gibson: Yes, you will need
to re-auth,

00:51:10.167 --> 00:51:12.667
because you--you can't, uh,

00:51:12.667 --> 00:51:15.167
do anything else
with users' permissions.

00:51:15.167 --> 00:51:17.667
You're, you know, violating
their trust if you don't.

00:51:17.667 --> 00:51:19.000
man: Right.

00:51:19.000 --> 00:51:21.000
Gibson: Um, the OAuth flows,
I believe will do that

00:51:21.000 --> 00:51:23.501
completely automatically. If the
user's already authenticated,

00:51:23.501 --> 00:51:26.501
it won't show a second dialogue.
If you're adding something,

00:51:26.501 --> 00:51:29.501
it'll automatically show
a dialogue to the user again.

00:51:29.501 --> 00:51:30.667
man: Okay, all right.

00:51:30.667 --> 00:51:33.000
Stahl: This is the exact
same flow you'll notice

00:51:33.000 --> 00:51:35.000
in Android applications...
man: Mm-hmm.

00:51:35.000 --> 00:51:37.501
Stahl: If a developer, say,
in an Android application,

00:51:37.501 --> 00:51:39.334
it's very similar to OAuth,

00:51:39.334 --> 00:51:41.667
you declare your required
permissions on the phone.

00:51:41.667 --> 00:51:44.167
If the developer upgrades
the set of permissions,

00:51:44.167 --> 00:51:46.501
the install dialogue re-shows

00:51:46.501 --> 00:51:48.167
and requires them
to re-authenticate.

00:51:48.167 --> 00:51:50.167
It's the same with OAuth2.
You have to--

00:51:50.167 --> 00:51:53.167
you have to ask
for the permissions you want.

00:51:53.167 --> 00:51:56.501
That's really the basis of it.
man: Yep, okay, thanks.

00:51:56.501 --> 00:51:58.801
Over there.
man: Hi. Sorry--again.

00:51:58.801 --> 00:52:00.400
Um, I don't want to start

00:52:00.400 --> 00:52:02.934
a high rest versus low rest
holy war,

00:52:02.934 --> 00:52:04.934
but I was slightly surprised

00:52:04.934 --> 00:52:08.734
at the result of a post
to the collection,

00:52:08.734 --> 00:52:11.734
did return a 201--
uh, created, rather than a 200.

00:52:11.734 --> 00:52:14.067
What we're seeing is a 200,
okay,

00:52:14.067 --> 00:52:16.734
when you create a new
URL shortener, for example.

00:52:16.734 --> 00:52:18.734
Has there been any thought,

00:52:18.734 --> 00:52:20.734
um, in that direction?

00:52:20.734 --> 00:52:23.734
Stahl: Um, it probably
should be a 201,

00:52:23.734 --> 00:52:25.734
but I-I don't know why that's--

00:52:25.734 --> 00:52:28.734
that was probably just,
you know, that particular code.

00:52:28.734 --> 00:52:31.734
There's no--I would've thought
a 201, as well, as an insert--

00:52:31.734 --> 00:52:33.400
oh, I actually know why--

00:52:33.400 --> 00:52:35.400
probably because the item
already exists.

00:52:35.400 --> 00:52:38.400
We've created--we've shortened
the google.com URL before, so--

00:52:38.400 --> 00:52:40.400
man: I see. So it's put.

00:52:40.400 --> 00:52:42.901
Stahl: Uh, we could
try it out on that Explorer

00:52:42.901 --> 00:52:44.901
and see what happens.
That would be my guess.

00:52:44.901 --> 00:52:46.901
Um, and if we have time,
I will, but I'm--

00:52:46.901 --> 00:52:49.400
if it's okay with you,
we can get some other questions,

00:52:49.400 --> 00:52:52.067
and we can try it out--you can
either try it out on your own,

00:52:52.067 --> 00:52:54.067
or we can try it right here.
man: Thank you.

00:52:54.067 --> 00:52:55.734
Stahl: Yeah.

00:52:55.734 --> 00:52:58.167
man: Uh, do you guys plan
to make changes to the APIs

00:52:58.167 --> 00:53:00.167
as you upgrade
them to the new system,

00:53:00.167 --> 00:53:03.234
because the Calendar API
is a little bit of a mess

00:53:03.234 --> 00:53:05.234
if you want to get
all of the events.

00:53:05.234 --> 00:53:07.267
Stahl: [laughs]
Seriously, yes.

00:53:07.267 --> 00:53:09.234
[laughs]
man: Yeah.

00:53:09.234 --> 00:53:13.000
Stahl: Um, we're not trying
to migrate our services blindly.

00:53:13.000 --> 00:53:15.801
man: Okay.
Stahl: We do ask them to rethi--

00:53:15.801 --> 00:53:18.067
because a lot of services,
that was their first version,

00:53:18.067 --> 00:53:20.901
and as they come on,
uh, they have new versions

00:53:20.901 --> 00:53:22.901
and we ask them
to rethink their APIs.

00:53:22.901 --> 00:53:24.400
man: Okay.

00:53:24.400 --> 00:53:25.901
Stahl: Um, we've
also built, you see,

00:53:25.901 --> 00:53:27.801
in the URL structure,
we've built versioning

00:53:27.801 --> 00:53:30.734
strongly into the system
to make it easier to support

00:53:30.734 --> 00:53:33.501
upgrading versions
in the future, so...

00:53:33.501 --> 00:53:35.868
man: Okay.
Stahl: Yeah. If you have

00:53:35.868 --> 00:53:38.400
a specific suggestion,
send it to the Calendar dude.

00:53:38.400 --> 00:53:40.734
man: Wait to get
all of the, uh, events

00:53:40.734 --> 00:53:42.400
from all the Calendars,

00:53:42.400 --> 00:53:44.400
instead of having to get
the list of Calendars,

00:53:44.400 --> 00:53:46.400
and then every event
from each...

00:53:46.400 --> 00:53:48.400
Stahl: Yeah, right.

00:53:48.400 --> 00:53:50.400
Aiuto: Anyone else?

00:53:50.400 --> 00:53:53.400
Stahl: So do we have
any other questions?

00:53:53.400 --> 00:53:55.400
All right.

00:53:55.400 --> 00:53:57.400
Uh, thank you very much.

00:53:57.400 --> 00:53:59.334
Aiuto: Thanks, guys.
[applause]

