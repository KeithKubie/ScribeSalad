WEBVTT
Kind: captions
Language: en

00:00:00.720 --> 00:00:02.380
If you're running a
2D game on mobile,

00:00:02.380 --> 00:00:04.270
chances are that you
care a great deal

00:00:04.270 --> 00:00:05.580
about rendering performance.

00:00:05.580 --> 00:00:07.880
But one of your
biggest perf problems

00:00:07.880 --> 00:00:10.460
could be coming from a weird
combination of alpha blending,

00:00:10.460 --> 00:00:13.700
overdraw, and how you
create your texture atlases.

00:00:13.700 --> 00:00:15.560
But let's start at the top.

00:00:15.560 --> 00:00:18.910
Modern 2D games are
awash in awesome graphics

00:00:18.910 --> 00:00:20.830
to create the visuals
for their scene.

00:00:20.830 --> 00:00:22.412
But when you start
to break it down,

00:00:22.412 --> 00:00:24.120
you realize that
drawing your environment

00:00:24.120 --> 00:00:26.000
is actually a complex
dance involving

00:00:26.000 --> 00:00:28.250
drawing multiple
layers of graphics.

00:00:28.250 --> 00:00:31.590
For example, the background
layer, ground info,

00:00:31.590 --> 00:00:34.204
sprites, and, finally, UI data.

00:00:34.204 --> 00:00:35.620
Every now and
again, though, we'll

00:00:35.620 --> 00:00:37.760
see some weird
additional layers pop up

00:00:37.760 --> 00:00:40.390
that don't end up contributing
to the final scene.

00:00:40.390 --> 00:00:42.200
In reality, these
extra draws create

00:00:42.200 --> 00:00:43.980
a lot of wasted
performance, which

00:00:43.980 --> 00:00:47.157
is a scarce resource
on mobile platforms.

00:00:47.157 --> 00:00:48.740
There's really two
ways to look at how

00:00:48.740 --> 00:00:50.860
you render your
graphics and your scene.

00:00:50.860 --> 00:00:54.460
The first is back to front
order and generally involves

00:00:54.460 --> 00:00:56.840
drawing geometry
farther from your camera

00:00:56.840 --> 00:00:59.340
before geometry that's
closer to your camera.

00:00:59.340 --> 00:01:02.630
The end result is the last drawn
pixel with the closest distance

00:01:02.630 --> 00:01:03.740
to the camera.

00:01:03.740 --> 00:01:06.730
Front to back order,
on the other hand,

00:01:06.730 --> 00:01:08.580
draws images closer
to the camera

00:01:08.580 --> 00:01:11.377
first and then progressively
gets further away.

00:01:11.377 --> 00:01:13.710
Although the rendering order
of both of these techniques

00:01:13.710 --> 00:01:16.250
produces the same
final pixel color,

00:01:16.250 --> 00:01:19.600
back to front
produces 2x more work

00:01:19.600 --> 00:01:21.490
that doesn't contribute
to the final scene,

00:01:21.490 --> 00:01:24.752
or, as we prefer to
call it, overdraw.

00:01:24.752 --> 00:01:26.460
The reason for the
performance difference

00:01:26.460 --> 00:01:29.233
has to do with how modern
graphics APIs work.

00:01:29.233 --> 00:01:33.040
You see OpenGL ES and all
of its desktop brethren

00:01:33.040 --> 00:01:35.550
support a mode called
depth testing, which

00:01:35.550 --> 00:01:38.020
allows you to avoid
processing any pixels that

00:01:38.020 --> 00:01:39.910
don't contribute
to the final image.

00:01:39.910 --> 00:01:40.890
Here's how it works.

00:01:40.890 --> 00:01:43.630
When a pixel on the screen is
updated with color information,

00:01:43.630 --> 00:01:46.640
we also store its
depth from the camera.

00:01:46.640 --> 00:01:49.180
When the rasterizer attempts
to draw another pixel

00:01:49.180 --> 00:01:52.950
at that location, we first test
the depth of the incoming pixel

00:01:52.950 --> 00:01:55.040
against that of
the existing pixel.

00:01:55.040 --> 00:01:57.740
If it's farther from the
camera, then we discard it,

00:01:57.740 --> 00:01:59.270
saving cycles
since we don't have

00:01:59.270 --> 00:02:01.030
to compute any of the color.

00:02:01.030 --> 00:02:04.270
Now if the incoming pixel
is closer to the camera,

00:02:04.270 --> 00:02:06.530
on the other hand,
then we continue on,

00:02:06.530 --> 00:02:08.789
compute its color
information, and write it back

00:02:08.789 --> 00:02:10.509
to the color buffer.

00:02:10.509 --> 00:02:12.370
Overdraw is a term
used to describe

00:02:12.370 --> 00:02:14.250
how many times a
pixel on the screen

00:02:14.250 --> 00:02:16.730
has been redrawn
in a single frame.

00:02:16.730 --> 00:02:19.430
For example, drawing a large
background image like this,

00:02:19.430 --> 00:02:22.820
and then drawing a box on top of
it, another one on top of that,

00:02:22.820 --> 00:02:25.670
and then finally putting
some font on top of that.

00:02:25.670 --> 00:02:28.330
When you turn on your
profiler's overdraw mode,

00:02:28.330 --> 00:02:29.830
you can see the
parts of your screen

00:02:29.830 --> 00:02:32.010
that have been processed
the most times.

00:02:32.010 --> 00:02:35.160
If your screen is super red
like this one down here,

00:02:35.160 --> 00:02:37.477
then chances are you've
got performance problems.

00:02:37.477 --> 00:02:39.560
Any work you do on a pixel
that doesn't contribute

00:02:39.560 --> 00:02:42.470
to the final scene
is wasted work.

00:02:42.470 --> 00:02:46.060
Now for 2D games, alpha blending
is the single biggest source

00:02:46.060 --> 00:02:46.964
of overdraw.

00:02:46.964 --> 00:02:48.380
Generally, a
majority of the scene

00:02:48.380 --> 00:02:51.040
has to be rendered with
alpha blending turned on,

00:02:51.040 --> 00:02:53.420
because those textures
use some geometry that

00:02:53.420 --> 00:02:56.165
have an alpha channel
component in them.

00:02:56.165 --> 00:02:58.790
When you render your objects in
your game with alpha turned on,

00:02:58.790 --> 00:03:03.190
you're forced, forced to
render your scene in back

00:03:03.190 --> 00:03:04.850
to front order.

00:03:04.850 --> 00:03:08.000
This is because during each
draw, the alpha operation needs

00:03:08.000 --> 00:03:10.950
existing pixels in the color
buffer to blend against,

00:03:10.950 --> 00:03:12.490
which increases
the number of times

00:03:12.490 --> 00:03:15.330
a given pixel on the
screen gets redrawn.

00:03:15.330 --> 00:03:18.660
The truth is, the order in which
you draw your game geometry

00:03:18.660 --> 00:03:21.530
has a profound impact on the
performance of your game.

00:03:21.530 --> 00:03:23.290
In an ideal world,
what you want to do

00:03:23.290 --> 00:03:24.970
is render all of
your opaque geometry

00:03:24.970 --> 00:03:27.504
in front to back
order, which will

00:03:27.504 --> 00:03:28.920
reduce the amount
of overdraw that

00:03:28.920 --> 00:03:32.580
occurs, while rendering all
transparent geometry in back

00:03:32.580 --> 00:03:35.890
to front order, which we're
forced to do anyway in order

00:03:35.890 --> 00:03:37.920
to get the look we're after.

00:03:37.920 --> 00:03:40.390
But this is easier said
than done, trust me.

00:03:40.390 --> 00:03:43.380
I read an analysis of over
1,000 games from Google Play

00:03:43.380 --> 00:03:45.130
and found the majority
of them are packing

00:03:45.130 --> 00:03:48.200
both transparent and opaque
images into a single texture

00:03:48.200 --> 00:03:48.910
atlas.

00:03:48.910 --> 00:03:52.070
Typically, this is a bad idea.

00:03:52.070 --> 00:03:54.750
Texture atlasing software
that's used to do this operation

00:03:54.750 --> 00:03:57.900
doesn't always export the type
of per image information that

00:03:57.900 --> 00:04:00.280
allows you to know what
was originally transparent

00:04:00.280 --> 00:04:02.240
and what was originally opaque.

00:04:02.240 --> 00:04:03.990
The result is that
you're forced to assume

00:04:03.990 --> 00:04:05.670
everything in your
scene is transparent

00:04:05.670 --> 00:04:08.910
and render everything in
front to back order regardless

00:04:08.910 --> 00:04:11.220
of the performance
problems involved.

00:04:11.220 --> 00:04:13.470
To fix this in your game,
it's actually pretty simple.

00:04:13.470 --> 00:04:15.820
When creating your atlases,
split your alpha and opaque

00:04:15.820 --> 00:04:17.800
objects into separate textures.

00:04:17.800 --> 00:04:20.579
This will allow you at
run time to sort geometry

00:04:20.579 --> 00:04:22.640
based on what type of
texture it has before

00:04:22.640 --> 00:04:24.460
rendering them to
the final scene.

00:04:24.460 --> 00:04:26.380
The new process will
help reduce overdraw

00:04:26.380 --> 00:04:29.110
and will help make your
scene render faster.

00:04:29.110 --> 00:04:31.090
Oh, and one more thing.

00:04:31.090 --> 00:04:32.860
Once you've separated
your opaque textures

00:04:32.860 --> 00:04:35.485
into their own atlas, make sure
that you properly compress them

00:04:35.485 --> 00:04:37.750
with GP texture formats.

00:04:37.750 --> 00:04:42.040
ETC, PVR, and DXT are
supported all by various levels

00:04:42.040 --> 00:04:45.280
of hardware and will reduce
distribution and GPU residency

00:04:45.280 --> 00:04:47.480
sizes of your textures,
which is something

00:04:47.480 --> 00:04:49.060
everybody loves, right?

00:04:49.060 --> 00:04:50.690
Anyway, the truth is
that you shouldn't

00:04:50.690 --> 00:04:51.830
take alpha blending lightly.

00:04:51.830 --> 00:04:53.871
Besides giving you the
look you're interested in,

00:04:53.871 --> 00:04:56.470
there's a load of performance
issues you may not be aware of.

00:04:56.470 --> 00:04:58.550
So think twice, alpha
once, and as always,

00:04:58.550 --> 00:05:01.160
remember, perf matters.

