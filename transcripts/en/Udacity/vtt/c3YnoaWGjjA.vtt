WEBVTT
Kind: captions
Language: en

00:00:00.430 --> 00:00:03.382
Currently, our setting view
is a list of preferences.

00:00:03.382 --> 00:00:06.468
Dan showed you how to create
a custom preference for location.

00:00:06.468 --> 00:00:10.789
But what we want to do now, is to
extend that custom preference by adding

00:00:10.789 --> 00:00:13.650
a widget to launch the place picker.

00:00:13.650 --> 00:00:16.210
However, we only want
to show this widget

00:00:16.210 --> 00:00:18.470
when Google Play Services is available.

00:00:18.470 --> 00:00:23.400
This way, devices without Play services
can avoid displaying a broken feature.

00:00:23.400 --> 00:00:24.640
We already have a check for

00:00:24.640 --> 00:00:29.130
Google Play services in main activities
OnCreate because of our GCM integration.

00:00:29.130 --> 00:00:32.159
However, we cannot assume that
the user's device will not change

00:00:32.159 --> 00:00:34.730
between activity creation and
the active state.

00:00:36.080 --> 00:00:39.840
So, the first thing we are going to
do is to perform an additional check

00:00:39.840 --> 00:00:42.440
at the moment we display
the location preference,

00:00:42.440 --> 00:00:44.870
in case something has gone wonky.

00:00:44.870 --> 00:00:48.880
Theoretically, you could move
the existing GCM check from on create to

00:00:48.880 --> 00:00:49.960
on resume.

00:00:49.960 --> 00:00:53.290
But, these are two different features
that are just powered by the same

00:00:53.290 --> 00:00:54.080
service.

00:00:54.080 --> 00:00:57.300
And we actually have different
expectations for each feature.

00:00:57.300 --> 00:01:00.940
GCM needs to be configured at
the creation of the activity.

00:01:00.940 --> 00:01:04.590
But the place picker needs to
be supported each time the user

00:01:04.590 --> 00:01:06.790
enters the setting activity.

00:01:06.790 --> 00:01:11.660
So we don't want to be checking in on
resume, which means that we should call

00:01:11.660 --> 00:01:16.270
is PlayServicesAvailable in our
location edit text preference class.

00:01:16.270 --> 00:01:20.120
Note that we aren't handling any
potential recoverable errors this time.

00:01:20.120 --> 00:01:22.270
Because, in the middle of
changing a location for

00:01:22.270 --> 00:01:25.660
the weather forecast, it would be really
disruptive to direct the user directly

00:01:25.660 --> 00:01:28.220
to the Google Play Store for
a potential update.

00:01:28.220 --> 00:01:32.590
So, instead, our failure case is that if
the SDK is not immediately available,

00:01:32.590 --> 00:01:34.650
we just use the default settings layout.

00:01:34.650 --> 00:01:39.110
However, if it is available, then we're
going to add a widget to the location

00:01:39.110 --> 00:01:41.560
preference that can launch
the place picker API.

00:01:42.840 --> 00:01:46.460
So, now we need to create
a pref current location layout.

00:01:46.460 --> 00:01:50.730
This is going to be the icon that we're
going to add to the location preference.

00:01:50.730 --> 00:01:52.440
Because we want a simple visual queue,

00:01:52.440 --> 00:01:56.800
it's best to use a system icon that
the user will already be familiar with.

00:01:56.800 --> 00:01:59.640
All of the Android system icons have
been updated for material design, and

00:01:59.640 --> 00:02:01.940
can actually be
downloaded off of GitHub.

00:02:01.940 --> 00:02:04.150
You just need to make sure that
you get the right size for

00:02:04.150 --> 00:02:06.500
each drawable density
that your app supports.

00:02:06.500 --> 00:02:09.535
For Sunshine, that'd be these four.

00:02:09.535 --> 00:02:12.295
Because our place picker is
intended to make it easy for

00:02:12.295 --> 00:02:14.195
a user to indicate
their current location.

00:02:14.195 --> 00:02:18.085
You should retrieve the current
location system icon from the map set.

00:02:18.085 --> 00:02:21.245
Then all I need to do is to drop each
resource into its relevant folder.

00:02:22.435 --> 00:02:27.225
The layout that we need, then, is
a simple image view of our system icon.

00:02:27.225 --> 00:02:30.250
However, our icon is very small.

00:02:30.250 --> 00:02:34.410
But, if we wrap it in a frame layout we
can make a larger click space without

00:02:34.410 --> 00:02:36.230
having to scale the icon.

00:02:36.230 --> 00:02:39.410
All we need to do is reference the ID
of the frame layout instead of

00:02:39.410 --> 00:02:42.060
the image view when we
build our click listener.

00:02:42.060 --> 00:02:45.500
You'll also want to make sure that all
of your icons are visually aligned.

00:02:45.500 --> 00:02:48.375
So to do this you'll want
to set the layout_gravity.

00:02:49.890 --> 00:02:53.260
You'll also probably want
icons to match in color.

00:02:53.260 --> 00:02:54.270
So just go ahead and

00:02:54.270 --> 00:02:58.790
add a color tint in order to get
the icon teal instead of black.

00:02:58.790 --> 00:03:02.310
And finally don't forget
your content description.

00:03:02.310 --> 00:03:04.560
You'll need to write the string and
strings.XML so

00:03:04.560 --> 00:03:06.880
that it can be translated and
then just reference it here.

00:03:07.980 --> 00:03:11.635
Now that our layout is ready to go,
we need to set up our OnClickListener.

00:03:12.850 --> 00:03:16.530
When the location preference is
created that calls onCreateView.

00:03:16.530 --> 00:03:19.630
And then this call back,
we can retrieve our new layout, and

00:03:19.630 --> 00:03:21.820
set our OnClickListener.

00:03:21.820 --> 00:03:25.330
For now, just go ahead and use a Toast
to test that everything is working.

