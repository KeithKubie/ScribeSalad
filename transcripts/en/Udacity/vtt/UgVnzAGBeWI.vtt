WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:03.980
So far we've focused on explaining
the basics of how to virtualize

00:00:03.980 --> 00:00:06.590
efficiently the CPU, but

00:00:06.590 --> 00:00:10.900
let's now look at the other types of
resources looking at memory first.

00:00:10.900 --> 00:00:14.680
We will explain how memory
virtualization can be achieved for

00:00:14.680 --> 00:00:17.490
the two basic virtualization approaches,

00:00:17.490 --> 00:00:20.130
whether it's based on
full virtualization, or

00:00:20.130 --> 00:00:25.250
requires guest modification and we will
talk about full virtualization first.

00:00:25.250 --> 00:00:29.670
For full virtualization a key
requirement is that the guest operating

00:00:29.670 --> 00:00:36.030
system continues to observe a contiguous
linear physical address space

00:00:36.030 --> 00:00:41.060
that starts from physical address zero,
this is what an operating system with

00:00:41.060 --> 00:00:45.816
c if it actually own the physical memory
and run natively on physical hardware.

00:00:45.816 --> 00:00:50.190
To achieve this we distinguish
among three types of addresses,

00:00:50.190 --> 00:00:51.320
virtual addresses, so

00:00:51.320 --> 00:00:55.000
these are the ones that are used
by the applications in the guest.

00:00:55.000 --> 00:00:59.580
Physical addresses, these are the ones
that the guest thinks are the addresses

00:00:59.580 --> 00:01:05.870
of the physical resource and the machine
addresses, these are the actual machine

00:01:05.870 --> 00:01:10.770
addresses with the actual physical
addresses on the underlying platform.

00:01:10.770 --> 00:01:14.910
The similar distinction of virtual
verses physical verses machine will also

00:01:14.910 --> 00:01:18.700
apply to the page numbers and
the page frame numbers.

00:01:18.700 --> 00:01:23.390
So given this, the guest operating
system can continue make mappings of

00:01:23.390 --> 00:01:28.750
virtual addresses to of the physical
addresses that it thinks it owns,

00:01:28.750 --> 00:01:31.520
and then underneath that
the hypervisor will then pick

00:01:31.520 --> 00:01:36.050
these physical addresses that the guests
believes are the real ones and

00:01:36.050 --> 00:01:39.120
map them to the real machine addresses.

00:01:39.120 --> 00:01:42.560
So in a sense they're two page tables,
one that's maintained by the guest

00:01:42.560 --> 00:01:46.050
operating system, and another one
that's maintained by the hypervisor.

00:01:46.050 --> 00:01:50.360
Now remember that at the hardware level,
we have a number of mechanisms,

00:01:50.360 --> 00:01:56.650
the memory management unit, the TLB
caching of the address translations,

00:01:56.650 --> 00:02:00.600
that these mechanisms help with
the address translation process,

00:02:00.600 --> 00:02:04.420
make it much more efficient, and
don't require us, in software,

00:02:04.420 --> 00:02:08.220
to repeatedly perform address
translations and validations.

00:02:08.220 --> 00:02:10.250
Now this option that we discussed so

00:02:10.250 --> 00:02:14.750
far will require that every
single memory access goes through

00:02:14.750 --> 00:02:18.330
two separate translation, the first
one which will be done in software,

00:02:18.330 --> 00:02:22.640
and then the second one potentially
can take advantage of hardware

00:02:22.640 --> 00:02:27.890
resources like TLB because the hardware
will understand only this page table.

00:02:27.890 --> 00:02:31.710
Clearly this will be too expensive
since this will add over hands on

00:02:31.710 --> 00:02:33.470
every single memory reference,

00:02:33.470 --> 00:02:38.820
it will slow down the ability to
run at near native hardware speeds.

00:02:38.820 --> 00:02:43.410
The second option is for the hypervisor
to maintain a shadow page table,

00:02:43.410 --> 00:02:47.370
in which it actually looks at what
are the virtual addresses that

00:02:47.370 --> 00:02:50.760
the guests has mapped to
these physical addresses.

00:02:50.760 --> 00:02:54.600
And then in the shadow page
table it directly establishes

00:02:54.600 --> 00:02:58.750
a mapping between the virtual addresses
that are used by the guest, and

00:02:58.750 --> 00:03:04.800
the machine addresses that are used by
the hypervisor by the physical hardware.

00:03:04.800 --> 00:03:10.590
Then if the hardware MMU uses this
page table, the guest operating system

00:03:10.590 --> 00:03:15.650
is allowed to execute natively using the
applications will use virtual addresses,

00:03:15.650 --> 00:03:20.210
and these will be directly translated
to the machine addresses that are,

00:03:20.210 --> 00:03:22.110
used by the physical hardware.

00:03:22.110 --> 00:03:26.220
The hypervisor will clearly have to be
responsible to maintain consistence

00:03:26.220 --> 00:03:31.220
between these two page tables and it
will have to employ mechanism that for

00:03:31.220 --> 00:03:35.330
instance invalidate,
what is the currently valid page tables,

00:03:35.330 --> 00:03:39.120
shadow page table whenever there is a,
context wedge or

00:03:39.120 --> 00:03:43.810
to write protect the guest page table,
in order to keep track of new mappings

00:03:43.810 --> 00:03:47.370
that the guest operating system
install since similar mechanism.

00:03:47.370 --> 00:03:51.540
This write protection is necessary so
that whenever the guest OS tries to

00:03:51.540 --> 00:03:55.250
install new virtual to physical
address mapping in the page

00:03:55.250 --> 00:03:59.870
tables that are used by the guest, this
will cause a trap to the hypervisor,

00:03:59.870 --> 00:04:04.240
and then the hypervisor will be able
to pick up that virtual address and

00:04:04.240 --> 00:04:07.490
then associate the corresponding
machine address and

00:04:07.490 --> 00:04:11.790
insert this mapping into the page table
that is used by the hardware MMU.

00:04:11.790 --> 00:04:14.380
This can be done completely
transparently to the guest

00:04:14.380 --> 00:04:15.210
operating system.

