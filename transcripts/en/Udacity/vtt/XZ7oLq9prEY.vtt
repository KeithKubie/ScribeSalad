WEBVTT
Kind: captions
Language: en

00:00:00.103 --> 00:00:02.206
Now that's a contract.

00:00:02.774 --> 00:00:04.988
But we still don't have a database.

00:00:05.455 --> 00:00:08.945
Our database class 
will extend an Android class.

00:00:09.035 --> 00:00:11.313
SQLiteOpenHelper.

00:00:13.502 --> 00:00:18.766
SQLiteOpenHelper contains cool stuff
to help us handle database versioning.

00:00:18.766 --> 00:00:21.778
As we make changes
to our database in the future,

00:00:21.778 --> 00:00:24.392
it will help us modify our tables.

00:00:24.392 --> 00:00:27.312
For many apps, being able to upgrade
to a new version

00:00:27.312 --> 00:00:29.777
without data loss is critical.

00:00:29.777 --> 00:00:34.527
Let's create a WeatherDBHelper class
within the data package

00:00:34.527 --> 00:00:37.364
and have it extend SQLiteOpenHelper.

00:00:43.366 --> 00:00:46.643
We can add the required methods 
by hitting Ctrl+I,

00:00:46.643 --> 00:00:50.433
and we can override the constructor 
by hitting Ctrl+O.

00:00:50.433 --> 00:00:53.195
Now we can hard code 
these variables to constructor.

00:00:53.270 --> 00:00:57.163
Hard coding name to database name,

00:00:57.293 --> 00:00:59.809
our factory to null,

00:00:59.809 --> 00:01:03.236
and our version to database version.

00:01:03.400 --> 00:01:06.326
Now, you'll note I have made 
the database name public,

00:01:06.326 --> 00:01:09.237
and that's because we're going to use it
in our tests in the future.

00:01:09.312 --> 00:01:12.418
Now you see we've got it onCreate
and an onUpgrade method.

00:01:12.418 --> 00:01:13.408
In the onCreate method,

00:01:13.408 --> 00:01:15.486
we're going to start by creating a string

00:01:15.486 --> 00:01:18.116
to build the weather entry table
using data defined

00:01:18.116 --> 00:01:20.088
within the weather entry contract.

00:01:20.088 --> 00:01:23.125
Now I'm just going to add this comment
so you know where to go back

00:01:23.125 --> 00:01:25.615
and add the location entry stuff later.

00:01:25.615 --> 00:01:27.543
Since weather entry 
depends on location entry,

00:01:27.543 --> 00:01:29.882
I would normally write 
location entry first,

00:01:29.882 --> 00:01:31.954
but weather entry is pretty complicated.

00:01:31.954 --> 00:01:36.603
So I'd rather explain what we've done
and leave location entry up to you.

00:01:36.603 --> 00:01:40.934
We're going to use raw SQL 
for our create table query,

00:01:40.941 --> 00:01:43.331
beginning with the table name 
from our contract.

00:01:43.331 --> 00:01:47.175
At this point, it's helpful to import 
WeatherContract.locationentry

00:01:47.175 --> 00:01:48.419
and weather entry.

00:01:48.519 --> 00:01:51.044
It makes our query 
so much easier to read.

00:01:51.044 --> 00:01:52.792
We'll start with our ID field,

00:01:52.792 --> 00:01:56.879
which we'll set as our primary key 
in an auto increment field.

00:01:56.879 --> 00:01:59.530
Note that integer is actually 
a signed value

00:01:59.530 --> 00:02:02.751
up to eight bytes long in SQLite.

00:02:02.751 --> 00:02:06.998
Using the auto increment feature 
doesn't do precisely what one might think.

00:02:06.998 --> 00:02:10.002
Setting up the ID 
is an integer primary key

00:02:10.002 --> 00:02:13.209
actually makes the value unique
whenever you do an insert,

00:02:13.209 --> 00:02:15.410
but it may not always increment.

00:02:15.410 --> 00:02:19.284
It may reuse existing ID values 
if the records have been deleted.

00:02:19.284 --> 00:02:21.512
What auto-increment is really useful for,

00:02:21.512 --> 00:02:24.515
is if you're synchronizing data 
two ways with the server.

00:02:24.515 --> 00:02:27.917
But, we'll take advantage of it here 
because it makes data from our queries

00:02:27.917 --> 00:02:30.982
sort a bit more naturally 
because we insert them in the right order

00:02:30.982 --> 00:02:32.562
coming from the server.

00:02:32.562 --> 00:02:36.825
In general, we're using constraints 
on fields. In this case, not null.

00:02:36.825 --> 00:02:39.326
We do this because it allows 
the database to do much

00:02:39.326 --> 00:02:41.630
of our parameter validation for us.

00:02:41.630 --> 00:02:43.510
The tricky part about doing it this way,

00:02:43.510 --> 00:02:46.731
is that we don't get useful errors 
when these constraints fail,

00:02:46.731 --> 00:02:49.034
so it can be challenging to debug.

00:02:49.034 --> 00:02:52.110
We're using a human readable string 
for the date.

00:02:52.110 --> 00:02:55.618
There's no strong reason for 
or against this choice.

00:02:55.618 --> 00:02:58.666
We wanted to normalize the date 
to simplify our queries,

00:02:58.666 --> 00:03:01.262
and human readability 
simplifies debugging.

00:03:01.262 --> 00:03:04.826
The date comes from open weather 
in Unix time stamp format

00:03:04.826 --> 00:03:07.701
with some time information 
that we need to get rid of.

00:03:08.038 --> 00:03:10.097
I'm not going to cover every field.

00:03:10.433 --> 00:03:13.987
Real means floating point in SQL.

00:03:13.987 --> 00:03:15.786
It would have been fine 
to have used integer

00:03:15.786 --> 00:03:18.041
with fixed point math as well
and some would argue

00:03:18.041 --> 00:03:19.118
that this would be faster,

00:03:19.118 --> 00:03:23.516
but real is more straight forward 
since we're storing floating point values.

00:03:23.516 --> 00:03:26.662
Now for the fun stuff, 
we're going to set up a loc key.

00:03:26.662 --> 00:03:29.675
It's a foreign key 
to the location entry table

00:03:29.675 --> 00:03:31.228
that you will be building.

00:03:31.228 --> 00:03:35.829
This causes SQLite to enforce 
the relationship between the tables.

00:03:35.829 --> 00:03:38.095
We cannot insert a weather entry

00:03:38.095 --> 00:03:40.949
when there is no corresponding 
location entry.

00:03:40.949 --> 00:03:44.710
And we cannot delete a location entry
if there are still weather entries

00:03:44.710 --> 00:03:45.702
that depend on it.

00:03:45.888 --> 00:03:47.539
Cool stuff, right?

00:03:47.651 --> 00:03:53.682
One last constraint. Our date text 
plus location must be unique.

00:03:53.682 --> 00:03:56.041
On conflict, replace the data.

00:03:56.041 --> 00:04:00.086
This allows us to insert new data 
from the open weather EPI easily.

00:04:00.086 --> 00:04:03.897
Preserving existing keys and updating 
the value as the forecast changes.

