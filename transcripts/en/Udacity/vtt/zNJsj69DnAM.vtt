WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:02.350
In addition to this Places Autocomplete,

00:00:02.350 --> 00:00:07.160
we can use other features of the Places
library to add more to our site.

00:00:07.160 --> 00:00:09.170
Let's give the user
the ability to search for

00:00:09.170 --> 00:00:11.570
places of interest within the map.

00:00:11.570 --> 00:00:13.350
&gt;&gt; Instead of using Autocomplete,

00:00:13.350 --> 00:00:16.750
I'm going to add a search box to
enhance the users search experience.

00:00:16.750 --> 00:00:20.180
Search box predicts what the user
is typing in much the same way as

00:00:20.180 --> 00:00:21.650
Autocomplete.

00:00:21.650 --> 00:00:24.880
The differences are that search
box supplies an extended list of

00:00:24.880 --> 00:00:29.860
predictions, which can include places,
as defined by the Google Places API.

00:00:29.860 --> 00:00:33.500
Plus suggested search queries such
as pizza near the Google office.

00:00:34.600 --> 00:00:38.090
However, we aren't able to restrict
the search as much as Autocomplete.

00:00:38.090 --> 00:00:41.460
&gt;&gt; Let's add the ability for the user
to view nearby points of interest like

00:00:41.460 --> 00:00:44.540
restaurants, parks,
museums, etc, in our site.

00:00:45.710 --> 00:00:47.620
&gt;&gt; In addition to Place's Autocomplete,

00:00:47.620 --> 00:00:51.090
we can use other features of Place's
library to add value to our site.

00:00:52.200 --> 00:00:54.140
Let's give the user
the ability to search for

00:00:54.140 --> 00:00:56.530
places of interest within the map.

00:00:56.530 --> 00:00:58.810
This is going to be a place search.

00:00:58.810 --> 00:01:00.730
Instead of using Autocomplete,

00:01:00.730 --> 00:01:03.400
I'm going to add a search box to
enhance the user's experience.

00:01:04.890 --> 00:01:07.380
Search box predicts
what the user is typing

00:01:07.380 --> 00:01:09.860
in much the same way as
Places Autocomplete.

00:01:09.860 --> 00:01:14.270
The differences are that search box
applies an extended list of predictions

00:01:14.270 --> 00:01:17.980
which can include places,
as defined by the Google Places API.

00:01:17.980 --> 00:01:21.320
Plus suggested search queries,
like pizza near the Google office.

00:01:22.330 --> 00:01:26.960
However, we aren't able to restrict
the search as much as Autocomplete.

00:01:26.960 --> 00:01:30.620
Let's add the ability for the user
to view nearby points of interest

00:01:30.620 --> 00:01:34.810
like restaurants, parks,
museums, etc, in our site.

00:01:34.810 --> 00:01:38.520
We're going to add one last section to
our HTML here, search for nearby places.

00:01:39.810 --> 00:01:41.110
We'll add a new text input,

00:01:42.210 --> 00:01:46.630
prompting the user to enter places of
interest search, and another go button.

00:01:46.630 --> 00:01:50.140
I'm creating a new search box instance
in the initialized function and

00:01:50.140 --> 00:01:53.390
binding it to that text
input that we just created.

00:01:53.390 --> 00:01:56.910
I'm also biasing the search box
to within the bounds of the map.

00:01:56.910 --> 00:01:59.590
And I'm actually going to create
two event listeners here.

00:02:00.660 --> 00:02:03.940
One for when the user selects
an option from the pick list, so

00:02:03.940 --> 00:02:05.759
that's our places changed event.

00:02:07.370 --> 00:02:09.770
And one if the user
types in something and

00:02:09.770 --> 00:02:14.410
clicks go without actually selecting
one of the suggested search queries.

00:02:14.410 --> 00:02:16.320
So that's our click event.

00:02:16.320 --> 00:02:21.060
I'm creating a global placemarkers
array here to use in both functions, so

00:02:21.060 --> 00:02:24.370
we can control the markers separately
from our listings markers.

00:02:24.370 --> 00:02:27.550
And so that we have only one set of
placemarkers on our map at a time.

00:02:28.770 --> 00:02:31.830
Also, remember our
hideListings function?

00:02:31.830 --> 00:02:34.300
This one iterated through
our markers array, and

00:02:34.300 --> 00:02:37.610
set the map to null on
all of the markers.

00:02:37.610 --> 00:02:40.576
We're actually going to expand
that to make it generic.

00:02:40.576 --> 00:02:44.425
By making the markers array
a variable that I pass into this,

00:02:44.425 --> 00:02:48.160
I actually allow us to use it for
all of our sets of markers.

00:02:48.160 --> 00:02:50.875
So we're going to use this any
time we want to hide an array of

00:02:50.875 --> 00:02:52.420
markers on the map.

00:02:52.420 --> 00:02:55.590
Everywhere we used this before,
I'm just going to pass in markers,

00:02:55.590 --> 00:02:57.130
which is our global listings array.

00:02:58.210 --> 00:03:02.590
I'm also going to use it now to
control our placemarkers array.

00:03:02.590 --> 00:03:06.320
Now let's create the function that will
execute when the user chooses a picklist

00:03:06.320 --> 00:03:10.530
value from the searchBox,
I'm calling it searchBoxPlaces.

00:03:10.530 --> 00:03:14.800
When a user enters a value, they
will be given common search queries.

00:03:14.800 --> 00:03:17.970
When the user then chooses one of
those values from the options given in

00:03:17.970 --> 00:03:19.850
the search box, first,

00:03:19.850 --> 00:03:24.380
we'll hide any place markers we have
on the map from our last search.

00:03:24.380 --> 00:03:27.990
Then, we'll find all the places
that match our query.

00:03:27.990 --> 00:03:31.620
We'll do this using
the searchBox.getPlaces method, and

00:03:31.620 --> 00:03:33.990
assign them all into this Places array.

00:03:33.990 --> 00:03:37.550
If we didn't find any places,
we'll alert that to the user.

00:03:37.550 --> 00:03:41.561
If we do find places, we'll then call
this, createMarkersForPlaces function,

00:03:41.561 --> 00:03:42.896
which we'll define soon.

00:03:42.896 --> 00:03:45.460
And pass in our Places array.

00:03:45.460 --> 00:03:50.460
We're separating this out, because, in
both our search box places function, and

00:03:50.460 --> 00:03:51.960
our text search function.

00:03:51.960 --> 00:03:56.154
Which is the other event listener that
we created, we'll do the same thing.

00:03:56.154 --> 00:03:59.260
Now we'll define our text
search places function.

00:03:59.260 --> 00:04:02.030
So again, this is the function
that will execute if,

00:04:02.030 --> 00:04:04.620
instead of choosing a value
from the pick list,

00:04:04.620 --> 00:04:08.920
the user enters a search query or a
location and then clicks on a go button.

00:04:08.920 --> 00:04:11.050
First, we'll capture
the bounds of the map.

00:04:11.050 --> 00:04:14.240
Then, we'll hide any existing
placemarkers that may already be

00:04:14.240 --> 00:04:15.380
on the map.

00:04:15.380 --> 00:04:19.140
We'll then create a new
places service instance and

00:04:19.140 --> 00:04:21.019
call the text search function.

00:04:21.019 --> 00:04:24.890
We'll pass in our user-entered query and
the bounds of the map.

00:04:24.890 --> 00:04:29.990
When we get the results back, which is
the Places array, if the status is okay,

00:04:29.990 --> 00:04:33.450
we'll call the same
createMarkersForPlaces function,

00:04:33.450 --> 00:04:35.710
passing in that Places array.

00:04:35.710 --> 00:04:38.680
Let's create this
createMarkersForPlaces function now.

00:04:39.790 --> 00:04:44.921
Okay, so at this point, we've gotten
an array of places back from both

00:04:44.921 --> 00:04:50.070
our places service text search and
our searchBox.getPlaces method.

00:04:50.070 --> 00:04:53.330
What we need to do with these
places is iterate through them and

00:04:53.330 --> 00:04:55.650
create a marker per place.

00:04:55.650 --> 00:04:58.890
So for each of the places in this
places array we'll capture a bunch

00:04:58.890 --> 00:05:00.200
of the information about the place.

00:05:01.280 --> 00:05:04.870
We'll get the icon which
we'll use as the marker icon.

00:05:06.020 --> 00:05:10.376
This is either a fork and knife for
a restaurant, a martini glass for

00:05:10.376 --> 00:05:11.070
a bar etc.

00:05:11.070 --> 00:05:12.930
It's just kind of a cute feature.

00:05:12.930 --> 00:05:16.556
We'll get the place name,
which we'll use as the marker title.

00:05:16.556 --> 00:05:21.078
We'll get the place's location, which
we'll use as the marker's position, and

00:05:21.078 --> 00:05:24.250
we'll capture the place
ID as the marker ID.

00:05:24.250 --> 00:05:25.950
We'll use that place ID later so

00:05:25.950 --> 00:05:29.770
that we can more details if
a user clicks on that marker.

00:05:29.770 --> 00:05:34.380
We'll push each marker that we create
into our placeMarkers array, and

00:05:34.380 --> 00:05:37.290
we'll adjust the balance of
the map to appropriately fit

00:05:37.290 --> 00:05:39.910
all of the placeMarkers that we return.

00:05:39.910 --> 00:05:43.220
By default 20 places are returned
in both of these searches.

00:05:44.260 --> 00:05:46.860
Let's test out both searches.

00:05:46.860 --> 00:05:48.870
First, I'm going to I'm going to
enter a search query and

00:05:48.870 --> 00:05:51.070
choose one from the pick list.

00:05:51.070 --> 00:05:52.411
These are all of our places.

00:05:52.411 --> 00:05:53.660
It's pretty concentrated here.

00:05:54.990 --> 00:05:58.880
Next I'm going to enter a query and
click the Go button.

00:05:58.880 --> 00:06:02.500
So far we can see the title if
we hover over the marker but

00:06:02.500 --> 00:06:04.720
we're going to need to get a lot
more details about these places.

00:06:06.150 --> 00:06:08.920
We'll find out how to do
that in the next lesson.

00:06:08.920 --> 00:06:12.100
&gt;&gt; Let's take a break before getting
all the details about these places

00:06:12.100 --> 00:06:14.345
to see just how fast Autocomplete is.

