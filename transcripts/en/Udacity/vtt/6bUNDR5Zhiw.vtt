WEBVTT
Kind: captions
Language: en

00:00:00.320 --> 00:00:05.810
A major short coming of using pairwise
key exchange based on a shared secret,

00:00:05.810 --> 00:00:07.970
is that it cannot scale.

00:00:07.970 --> 00:00:13.160
That is, suppose we use a shared
master keys as a way to establish and

00:00:13.160 --> 00:00:15.470
exchange a new session key.

00:00:15.470 --> 00:00:17.570
This scheme does not scale easily.

00:00:17.570 --> 00:00:21.410
That is Alice needs to share
a master key with Bob, and

00:00:21.410 --> 00:00:25.540
then another master key with Carol,
and so on and so forth.

00:00:25.540 --> 00:00:31.750
Using a Key Distribution Center, or KDC,
can solve this scalability problem.

00:00:31.750 --> 00:00:37.500
Each party has his or
her own master key shared with the KDC.

00:00:37.500 --> 00:00:42.630
That is, the KDC has many master keys,
one for each party.

00:00:42.630 --> 00:00:47.730
But each party only keeps one
master key that is shared with KDC.

00:00:47.730 --> 00:00:52.790
So, for example,
Alice has KA that is shared with KDC.

00:00:52.790 --> 00:00:56.510
And Bob has KB that is shared with KDC.

00:00:56.510 --> 00:01:01.540
Now, suppose Alice and Bob wants to
have a secure session, therefore,

00:01:01.540 --> 00:01:03.850
they need a session key KS.

00:01:03.850 --> 00:01:08.610
First, Alice sends a request
to KDC saying that,

00:01:08.610 --> 00:01:12.750
I need a key to talk to Bob
along with a nonce and 1.

00:01:12.750 --> 00:01:14.760
A nonce is a random value.

00:01:14.760 --> 00:01:19.850
Then, the KDC sends a message
back to Alice that's encrypted

00:01:19.850 --> 00:01:25.190
using the master key KA that is
shared between Alice and KDC.

00:01:25.190 --> 00:01:31.140
This message contains the session
key KS that the KDC just created for

00:01:31.140 --> 00:01:32.780
Alice and Bob to share.

00:01:32.780 --> 00:01:38.530
The message also contains the same
request that Alice sent to KDC

00:01:38.530 --> 00:01:45.000
along with the same nonce value,
N1 and a message record ticket.

00:01:45.000 --> 00:01:49.270
The ticket is encrypted
using the master key KP that

00:01:49.270 --> 00:01:52.330
is shared between Bob and the KDC.

00:01:52.330 --> 00:01:57.080
And it contains session key KS and
the ID of Alice.

00:01:57.080 --> 00:01:59.410
When Alice gets back
the message from the KDC,

00:01:59.410 --> 00:02:04.570
she can decrypt it because
she has the master key, KA.

00:02:04.570 --> 00:02:08.288
And so,
she can extract the session key KS.

00:02:08.288 --> 00:02:13.120
And she knows that the message is from
the KDC, and it's fresh, that is,

00:02:13.120 --> 00:02:19.160
it is not a replay, because only
the KDC can use KA to equip properly

00:02:19.160 --> 00:02:24.400
a message that contains the original
request and the nonce that she just set.

00:02:24.400 --> 00:02:27.370
Alice then sends the ticket to Bob.

00:02:27.370 --> 00:02:32.090
Note that only Bob can decrypt
the ticket, because it is encrypted

00:02:32.090 --> 00:02:37.200
using KB, the master key shared
between Bob and the KDC.

00:02:37.200 --> 00:02:42.710
In fact, when Bob decrypts the ticket,
he knows that the ticket is created

00:02:42.710 --> 00:02:48.380
by the KDC because only the KDC can
encrypt the ID of Alice properly.

00:02:48.380 --> 00:02:50.930
And he knows that the session key,

00:02:50.930 --> 00:02:56.140
KS was created by KDC and
is for communication with Alice.

00:02:56.140 --> 00:03:01.770
Then Bob sends a message that contains
a nonce N2, which is a random value,

00:03:01.770 --> 00:03:07.390
and it's ID encrypted,
using the session key KS to Alice.

00:03:07.390 --> 00:03:11.110
When Alice receives this message,
she knows that

00:03:11.110 --> 00:03:15.740
she is communicating with Bob, because
only he can decrypt the ticket and

00:03:15.740 --> 00:03:19.920
get a session key, Ks, and
encrypt the ID properly.

00:03:19.920 --> 00:03:24.190
Alice then performs an agreed
upon transformation on N2.

00:03:24.190 --> 00:03:27.060
Say, add 100 to N2 and

00:03:27.060 --> 00:03:31.730
encrypt the result using KS,
and sends it back to Bob.

00:03:31.730 --> 00:03:35.780
This proves to Bob that he
is communicating with Alice

00:03:35.780 --> 00:03:38.500
because only she has the session key KS.

