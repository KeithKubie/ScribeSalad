WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.195
MURAT YENER: One of the biggest
UI changes coming to Android Q

00:00:03.195 --> 00:00:05.330
is gestural navigation.

00:00:05.330 --> 00:00:08.390
You may have already seen
various gestures for navigation

00:00:08.390 --> 00:00:11.030
on some of our
partners' devices.

00:00:11.030 --> 00:00:14.210
Android Q is supporting a
new out-of-the-box navigation

00:00:14.210 --> 00:00:15.860
experience.

00:00:15.860 --> 00:00:17.600
Navigation gestures
are supported

00:00:17.600 --> 00:00:20.630
as a new mode, separate from
the traditional three-button

00:00:20.630 --> 00:00:23.330
experience in the
bottom nav bar.

00:00:23.330 --> 00:00:25.980
This lets your app
use the entire screen,

00:00:25.980 --> 00:00:30.060
which provides a more
immersive display experience.

00:00:30.060 --> 00:00:34.520
Android Q has gestures for
going home and going back.

00:00:34.520 --> 00:00:37.130
Swiping up from the
bottom edge takes the user

00:00:37.130 --> 00:00:38.330
to the home screen.

00:00:38.330 --> 00:00:41.810
Swiping inwards anywhere
on the left or right just

00:00:41.810 --> 00:00:44.900
takes the user back to
the previous screen.

00:00:44.900 --> 00:00:46.700
With these two
gestures, your app

00:00:46.700 --> 00:00:49.760
can take advantage of the
valuable screen real estate

00:00:49.760 --> 00:00:51.890
on the bottom of the display.

00:00:51.890 --> 00:00:55.400
However, if your app uses
gestures or has controls

00:00:55.400 --> 00:00:58.790
in the system gesture areas,
it might create conflict

00:00:58.790 --> 00:01:00.770
with the system-wide gestures.

00:01:00.770 --> 00:01:03.680
For example, if your
app relies on gestures

00:01:03.680 --> 00:01:07.940
for sliders or draggable items
in any of the system gesture

00:01:07.940 --> 00:01:10.700
areas, your users
might accidentally

00:01:10.700 --> 00:01:12.770
trigger a navigation gesture.

00:01:12.770 --> 00:01:16.320
This results in a broken
experience in your app.

00:01:16.320 --> 00:01:20.180
There are two gestural conflicts
your app might encounter.

00:01:20.180 --> 00:01:22.340
The first conflict
is with the swipe

00:01:22.340 --> 00:01:24.900
up gesture on the bottom
edge of the screen,

00:01:24.900 --> 00:01:27.830
which takes the user
to the home screen.

00:01:27.830 --> 00:01:31.430
You should avoid having
any critical controls rely

00:01:31.430 --> 00:01:35.870
on vertical swipe gesture in
the bottom parts of your app

00:01:35.870 --> 00:01:37.880
because the home
gesture is designed

00:01:37.880 --> 00:01:40.820
to be a reliable escape
mechanism for users

00:01:40.820 --> 00:01:44.780
and will always get
priority for touch events.

00:01:44.780 --> 00:01:47.430
Examples of UI conflicts
with the home gesture

00:01:47.430 --> 00:01:50.000
are bottom draggable
sheets or other swipe

00:01:50.000 --> 00:01:52.640
up to perform actions.

00:01:52.640 --> 00:01:55.200
To steer clear of the
bottom swipe conflict,

00:01:55.200 --> 00:01:59.570
we edit WindowInsets.get
MandatoryGestureInsets,

00:01:59.570 --> 00:02:02.450
which returns all swipe
recognition thresholds

00:02:02.450 --> 00:02:04.520
for the device.

00:02:04.520 --> 00:02:08.389
Using this information, apps
can shift conflicting content

00:02:08.389 --> 00:02:10.650
from the edges of the screen.

00:02:10.650 --> 00:02:13.590
The second conflict is
with the H swipe gesture,

00:02:13.590 --> 00:02:15.860
which takes the user back.

00:02:15.860 --> 00:02:18.950
The system back gesture
occupies the entire length

00:02:18.950 --> 00:02:21.620
of the left and
right screen edges,

00:02:21.620 --> 00:02:24.920
so apps should make sure
that key touch and motion

00:02:24.920 --> 00:02:28.310
functionality isn't stolen
by system back gesture.

00:02:28.310 --> 00:02:31.340
Examples of interaction
conflicts with the back gesture

00:02:31.340 --> 00:02:34.220
include drawers,
sliders, sheets,

00:02:34.220 --> 00:02:36.560
and other controls
which require a swipe

00:02:36.560 --> 00:02:39.170
or drag to perform an action.

00:02:39.170 --> 00:02:42.590
In order to handle touch events
at the edges of the screen,

00:02:42.590 --> 00:02:45.140
apps can tell the
system which areas

00:02:45.140 --> 00:02:47.480
they need to exclude
from the back gesture

00:02:47.480 --> 00:02:49.460
with the new gesture
exclusion rect

00:02:49.460 --> 00:02:54.200
API in Q. If back gesture
interferes with your app

00:02:54.200 --> 00:02:57.050
controls, use the
gesture exclusion rect

00:02:57.050 --> 00:03:01.100
API to create gesture exclusion
zones for the controls that

00:03:01.100 --> 00:03:03.140
might be affected.

00:03:03.140 --> 00:03:06.290
On the other hand, do not
disable the back gesture

00:03:06.290 --> 00:03:09.420
by creating a gesture
exclusion zone which spans

00:03:09.420 --> 00:03:11.700
entire edge of the screen.

00:03:11.700 --> 00:03:14.510
This creates a broken,
non-consistent behavior

00:03:14.510 --> 00:03:16.520
with the system and other apps.

00:03:16.520 --> 00:03:19.460
The new API is a part
of the View class, which

00:03:19.460 --> 00:03:22.340
expects a list of rect
objects that represent

00:03:22.340 --> 00:03:24.900
gesture exclusion zones.

00:03:24.900 --> 00:03:28.430
This API lets your app
intercept horizontal swipes

00:03:28.430 --> 00:03:31.610
only between the desired areas.

00:03:31.610 --> 00:03:34.100
The gesture exclusion
rects API call

00:03:34.100 --> 00:03:37.040
should be performed in
the onLayout or onDraw

00:03:37.040 --> 00:03:40.890
methods of the view, as
shown in this example.

00:03:40.890 --> 00:03:43.580
DrawerLayout and
SeekBar components

00:03:43.580 --> 00:03:45.510
already have this
opt-out behavior

00:03:45.510 --> 00:03:48.560
built in, so no
additional work is needed,

00:03:48.560 --> 00:03:51.410
other than updating the
jetPack dependencies

00:03:51.410 --> 00:03:54.920
and/or build against the
new SDK, respectively.

00:03:54.920 --> 00:03:56.060
And that's it.

00:03:56.060 --> 00:03:58.350
To ensure the best
user experience,

00:03:58.350 --> 00:04:00.290
make sure the
gestures in your app

00:04:00.290 --> 00:04:03.390
do not conflict with the
system-wide gestures.

00:04:03.390 --> 00:04:06.470
If they do, use system
gesture exclusion rects

00:04:06.470 --> 00:04:09.290
API to fix any problems
before targeting

00:04:09.290 --> 00:04:12.050
your app to Android Q.

00:04:12.050 --> 00:04:14.600
If you're interested
in gestural navigation,

00:04:14.600 --> 00:04:17.480
make sure you also watch the
edge-to-edge dev bite, which

00:04:17.480 --> 00:04:19.579
is linked in the notes below.

00:04:19.579 --> 00:04:20.839
Thank you for watching.

00:04:20.839 --> 00:04:24.020
Make sure to subscribe to the
channel for more awsome Android

00:04:24.020 --> 00:04:25.350
videos.

00:04:25.350 --> 00:04:26.120
See you next time.

00:04:26.120 --> 00:04:30.670
[MUSIC PLAYING]

