WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:04:44.702
[MUSIC PLAYING]

00:04:55.181 --> 00:04:55.700
JEREMY WALKER: [INAUDIBLE]

00:04:55.700 --> 00:04:57.230
YouTube APIs.

00:04:57.230 --> 00:04:58.980
You're probably wondering
why I have a green

00:04:58.980 --> 00:04:59.950
screen behind me.

00:04:59.950 --> 00:05:02.140
Well today, we're taking you
behind the scenes with

00:05:02.140 --> 00:05:04.655
Capella's live streaming
solution to show you some of

00:05:04.655 --> 00:05:05.490
their features.

00:05:05.490 --> 00:05:08.400
One of them actually is
switching out backgrounds in

00:05:08.400 --> 00:05:09.390
near real time.

00:05:09.390 --> 00:05:12.410
So I'll switch over
to introductions.

00:05:12.410 --> 00:05:15.390
Ikuyo, you're the CEO
of Capella Systems.

00:05:15.390 --> 00:05:17.270
And then we have Martin, who's
one of the lead engineers.

00:05:17.270 --> 00:05:18.580
So let's jump right into it.

00:05:18.580 --> 00:05:21.040
Tell us a little bit of a
background on your company.

00:05:21.040 --> 00:05:22.820
IKUYO YAMADA: So Martin
and I, we started this

00:05:22.820 --> 00:05:24.960
company back in 2009.

00:05:24.960 --> 00:05:28.120
Prior to starting Capella, we
were both members of a company

00:05:28.120 --> 00:05:31.070
called Rhozet, which focused
on offering offline

00:05:31.070 --> 00:05:32.800
transcoding software.

00:05:32.800 --> 00:05:36.500
At Capella, we focus on live
streaming solutions for

00:05:36.500 --> 00:05:39.570
professionals and also
enterprise level customers.

00:05:39.570 --> 00:05:42.610
We also offer offline
transcoding solutions, mainly

00:05:42.610 --> 00:05:45.740
focused on H.264 compression
technologies.

00:05:45.740 --> 00:05:46.740
JEREMY WALKER: OK, cool.

00:05:46.740 --> 00:05:50.330
So I guess the question is from
your last company to this

00:05:50.330 --> 00:05:53.110
one, what got you into the
idea of doing this live

00:05:53.110 --> 00:05:55.940
streaming, or why did you
decide to go into it?

00:05:55.940 --> 00:05:58.260
IKUYO YAMADA: At the previous
company at Rhozet, we focused

00:05:58.260 --> 00:06:02.300
a lot mainly catering to post
production houses and mainly

00:06:02.300 --> 00:06:04.180
broadcasters.

00:06:04.180 --> 00:06:07.470
So we sold a lot of offline
transcoding solutions.

00:06:07.470 --> 00:06:11.060
As we were doing it, I saw
a big shift going from

00:06:11.060 --> 00:06:14.580
traditional broadcasting
workflow to more using open

00:06:14.580 --> 00:06:16.530
platforms like live streaming.

00:06:16.530 --> 00:06:19.450
So we wanted to develop a
software that is specifically

00:06:19.450 --> 00:06:21.750
designed for this new
type of broadcasting

00:06:21.750 --> 00:06:23.370
that's emerging today.

00:06:23.370 --> 00:06:26.120
JEREMY WALKER: So your goal is
really to make live streaming

00:06:26.120 --> 00:06:28.220
easy to use and very simple.

00:06:28.220 --> 00:06:31.235
IKUYO YAMADA: And our software
allows users to do that.

00:06:31.235 --> 00:06:35.320
Our goal is to basically offer
a very reliable software that

00:06:35.320 --> 00:06:37.730
allows users to do a
whole production on

00:06:37.730 --> 00:06:39.290
his own or her own.

00:06:39.290 --> 00:06:41.170
JEREMY WALKER: OK,
that makes sense.

00:06:41.170 --> 00:06:45.810
I guess what are some of the
common issues you see with

00:06:45.810 --> 00:06:48.700
live streaming just
in general?

00:06:48.700 --> 00:06:50.500
IKUYO YAMADA: I think live
streaming, the whole

00:06:50.500 --> 00:06:53.670
production, it could get
very complicated.

00:06:53.670 --> 00:06:56.870
I see a lot of users trying
to use multiple equipment.

00:06:56.870 --> 00:06:59.930
And sometimes the combination
of, for example, using a

00:06:59.930 --> 00:07:03.330
particular capture board with a
live streaming solution, you

00:07:03.330 --> 00:07:06.270
will face a lot of unexpected
issues that are very difficult

00:07:06.270 --> 00:07:07.600
to troubleshoot.

00:07:07.600 --> 00:07:11.110
And also, to do a very good live
streaming show, you do

00:07:11.110 --> 00:07:13.830
need a lot of operators
who are familiar with

00:07:13.830 --> 00:07:14.750
these kind of things.

00:07:14.750 --> 00:07:17.850
And it's very hard to arrange
somebody to always be on site

00:07:17.850 --> 00:07:18.850
to do that.

00:07:18.850 --> 00:07:22.290
And my goal when we started this
company is to create a

00:07:22.290 --> 00:07:25.150
software, even for
non-broadcasters are able to

00:07:25.150 --> 00:07:28.930
use this, for example, like
schools, hospitals, community

00:07:28.930 --> 00:07:30.930
groups, and corporates.

00:07:30.930 --> 00:07:33.790
Anyone with just a little bit
of IT background is able to

00:07:33.790 --> 00:07:37.120
use this software and do a very
high quality streaming

00:07:37.120 --> 00:07:39.690
show on her own or his own.

00:07:39.690 --> 00:07:40.490
JEREMY WALKER: OK.

00:07:40.490 --> 00:07:44.050
So why did you choose the
YouTube APIs using the live

00:07:44.050 --> 00:07:45.780
streaming API particularly?

00:07:45.780 --> 00:07:48.290
IKUYO YAMADA: Because we do
believe that with the

00:07:48.290 --> 00:07:52.460
availability of fast internet
and also open platforms like

00:07:52.460 --> 00:07:56.620
YouTube, I see a lot of
professionals and also even

00:07:56.620 --> 00:08:00.040
broadcasters are getting into
live streaming and using

00:08:00.040 --> 00:08:04.120
YouTube live platform as a way
to deliver more streams and

00:08:04.120 --> 00:08:06.330
contents to more viewers
around the world.

00:08:06.330 --> 00:08:09.810
So I wanted to make it easier
for those customers to be able

00:08:09.810 --> 00:08:13.340
to use our software that
interfaces with the YouTube

00:08:13.340 --> 00:08:15.645
platform seamlessly.

00:08:15.645 --> 00:08:16.630
JEREMY WALKER: OK, great.

00:08:16.630 --> 00:08:19.520
So you guys were actually at
Google I/O. You were in the

00:08:19.520 --> 00:08:22.750
YouTube Sandbox, and you were
showing off some of the cool

00:08:22.750 --> 00:08:23.860
stuff you're going to
be showing now.

00:08:23.860 --> 00:08:27.120
So let's just jump right into
the demo so we can have a look

00:08:27.120 --> 00:08:31.290
at some of the features and then
do the some of the green

00:08:31.290 --> 00:08:33.705
screen shenanigans I've been
talking about in our posts.

00:08:33.705 --> 00:08:34.190
IKUYO YAMADA: Great.

00:08:34.190 --> 00:08:35.620
Let's take a look.

00:08:35.620 --> 00:08:40.950
So here, this is our
Cambria Live UI.

00:08:40.950 --> 00:08:42.760
On the very left hand
side, you will

00:08:42.760 --> 00:08:44.430
see a list of sources.

00:08:44.430 --> 00:08:47.030
So we can take in multiple
camera inputs.

00:08:47.030 --> 00:08:51.290
For example, we have Camera
One basically pointing at

00:08:51.290 --> 00:08:55.620
Jeremy, and we have another
camera that's pointing to us

00:08:55.620 --> 00:08:56.880
from a different angle.

00:08:56.880 --> 00:09:00.040
So while you're doing streaming,
I can switch in

00:09:00.040 --> 00:09:02.350
between different
camera inputs.

00:09:02.350 --> 00:09:05.940
Another neat thing about our
application, it comes with a

00:09:05.940 --> 00:09:12.720
function called VC, so I can
add Virtual Camera inputs.

00:09:12.720 --> 00:09:13.860
JEREMY WALKER: This is
really interesting.

00:09:13.860 --> 00:09:17.030
So it's like you just have one
camera that's taking a large

00:09:17.030 --> 00:09:20.450
HD shot of everything, and then
you can kind of cut out a

00:09:20.450 --> 00:09:22.620
whole bunch of virtual
cameras that you can

00:09:22.620 --> 00:09:23.510
switch between, right?

00:09:23.510 --> 00:09:24.050
IKUYO YAMADA: Yes.

00:09:24.050 --> 00:09:26.950
The whole idea is just to
use a single camera.

00:09:26.950 --> 00:09:30.260
We could kind of create this
virtual multi-camera

00:09:30.260 --> 00:09:31.040
environment.

00:09:31.040 --> 00:09:34.850
So it reduces the cost of
operation, and you only have

00:09:34.850 --> 00:09:36.240
to buy one camera.

00:09:36.240 --> 00:09:40.850
So right here, I am manipulating
captured areas.

00:09:40.850 --> 00:09:44.730
So I have this segment
that's focused on me.

00:09:44.730 --> 00:09:47.070
So then during the streaming,
I can go from

00:09:47.070 --> 00:09:50.580
overview shot to VC.

00:09:50.580 --> 00:09:53.490
So it looks as though we're
actually switching the camera

00:09:53.490 --> 00:09:56.792
inputs, but we're only really
using a single camera input.

00:09:56.792 --> 00:09:57.174
JEREMY WALKER: OK.

00:09:57.174 --> 00:09:58.990
Well that's pretty neat.

00:09:58.990 --> 00:10:03.300
IKUYO YAMADA: And also on here,
you will see the list of

00:10:03.300 --> 00:10:05.710
targets that we can stream to.

00:10:05.710 --> 00:10:10.370
We can stream to Adobe Flash
Media Server, Wowza, of

00:10:10.370 --> 00:10:11.870
course, we can go to YouTube.

00:10:11.870 --> 00:10:15.260
So if you have a YouTube Live
account, it'll bring up a list

00:10:15.260 --> 00:10:19.630
of live events that you
have been registered

00:10:19.630 --> 00:10:22.240
from YouTube's website.

00:10:22.240 --> 00:10:25.170
JEREMY WALKER: And so for people
that are larger that

00:10:25.170 --> 00:10:28.330
are doing these live shows, is
there a way that they can

00:10:28.330 --> 00:10:31.365
claim or monetize
against these?

00:10:31.365 --> 00:10:31.640
IKUYO YAMADA: Yeah.

00:10:31.640 --> 00:10:35.280
So we are in the process of
integrating Partner API.

00:10:35.280 --> 00:10:39.060
I think now it's called
Content ID API.

00:10:39.060 --> 00:10:44.960
So actually, from an offline
transcoding software, user is

00:10:44.960 --> 00:10:47.700
going to be able to set claim
options and also create

00:10:47.700 --> 00:10:52.810
reference files to be uploaded
to Content ID system of Google

00:10:52.810 --> 00:10:57.340
that creates a bunch of
fingerprint files.

00:10:57.340 --> 00:10:57.980
JEREMY WALKER: OK, great.

00:10:57.980 --> 00:11:02.020
And then on the ad side, you
guys are looking into adding

00:11:02.020 --> 00:11:03.990
that as we speak--

00:11:03.990 --> 00:11:06.480
adding some of the
functionalities for ad slates

00:11:06.480 --> 00:11:07.870
and ad insertions and
things like that?

00:11:07.870 --> 00:11:11.020
IKUYO YAMADA: Yes, we are in
the process of implementing

00:11:11.020 --> 00:11:12.030
this feature.

00:11:12.030 --> 00:11:14.230
We believe that this kind
of function will be very

00:11:14.230 --> 00:11:16.480
appealing to our professional
and also

00:11:16.480 --> 00:11:18.330
enterprise level customers.

00:11:18.330 --> 00:11:19.680
JEREMY WALKER: Great.

00:11:19.680 --> 00:11:23.480
IKUYO YAMADA: So if you have a
YouTube account, then you can

00:11:23.480 --> 00:11:27.180
specify which channel that you
want to stream to from here.

00:11:27.180 --> 00:11:29.940
And while you're doing live
streaming to YouTube channel,

00:11:29.940 --> 00:11:33.460
for example, you could record
an entire event to a file.

00:11:33.460 --> 00:11:37.580
So you can use it for archiving
or for VOD.

00:11:37.580 --> 00:11:39.970
JEREMY WALKER: And don't you
guys have a future where you

00:11:39.970 --> 00:11:42.670
can, as you're doing it, just
take out the highlights?

00:11:42.670 --> 00:11:43.110
IKUYO YAMADA: Yes.

00:11:43.110 --> 00:11:46.202
So this is one of the cool
features that we have.

00:11:46.202 --> 00:11:50.270
We have this function called
Cambria Live Edit, which

00:11:50.270 --> 00:11:53.240
basically allows you to do proxy
editing while you're

00:11:53.240 --> 00:11:54.420
doing streaming.

00:11:54.420 --> 00:11:57.140
So you can set multiple
in and out points to

00:11:57.140 --> 00:11:58.880
create highlight clips.

00:11:58.880 --> 00:12:02.490
And that segment can be
transcoded into multiple

00:12:02.490 --> 00:12:06.410
different file formats and, for
example, can be uploaded

00:12:06.410 --> 00:12:08.430
to YouTube VOD channel.

00:12:08.430 --> 00:12:09.260
JEREMY WALKER: OK, great.

00:12:09.260 --> 00:12:12.430
So as you're having the live
event, you can be setting up a

00:12:12.430 --> 00:12:14.570
much smaller video with
the highlights.

00:12:14.570 --> 00:12:19.120
IKUYO YAMADA: So now, going to
the green screen demo, we are

00:12:19.120 --> 00:12:21.960
going to do this by using our
picture in picture function.

00:12:21.960 --> 00:12:27.400
So this allows you to combine
multiple video layers into a

00:12:27.400 --> 00:12:29.280
single stream.

00:12:29.280 --> 00:12:32.830
So for example, I have--

00:12:32.830 --> 00:12:34.660
JEREMY WALKER: I know you guys
are going to bring this up,

00:12:34.660 --> 00:12:37.750
and this was pretty popular
at our Sandbox.

00:12:37.750 --> 00:12:40.600
And I also have your app, which
I don't know if you can

00:12:40.600 --> 00:12:44.680
see it here, but this is an
app running on a Nexus 10.

00:12:44.680 --> 00:12:48.510
And you can see here, this is
what they were showing, and

00:12:48.510 --> 00:12:50.270
you can actually click.

00:12:50.270 --> 00:12:53.120
So let's say I'm in space now,
but I want to be underwater, I

00:12:53.120 --> 00:12:55.780
just click and see, it takes
me now to an underwater.

00:12:55.780 --> 00:12:59.050
So this is using your
APIs, correct?

00:12:59.050 --> 00:13:00.490
MARTIN BELLEAU: Yeah, this
is using the API.

00:13:00.490 --> 00:13:03.460
So from this app, we can
retrieve the first image of

00:13:03.460 --> 00:13:05.450
the different video files
that are loaded into the

00:13:05.450 --> 00:13:06.690
application.

00:13:06.690 --> 00:13:10.500
And then when you click here
on the tablet, it sends the

00:13:10.500 --> 00:13:13.400
message to our REST API, which
triggers a switch of the

00:13:13.400 --> 00:13:14.290
background.

00:13:14.290 --> 00:13:14.990
JEREMY WALKER: Yeah.

00:13:14.990 --> 00:13:18.100
This is really cool, and of
course, our favorite YouTube

00:13:18.100 --> 00:13:19.170
Dev sticker.

00:13:19.170 --> 00:13:21.660
IKUYO YAMADA: And then this is
all happening in real time.

00:13:21.660 --> 00:13:24.530
We're doing all this processing
only by using our

00:13:24.530 --> 00:13:27.790
software, so it's a very
powerful tool.

00:13:27.790 --> 00:13:32.600
JEREMY WALKER: Yeah, and
it's pretty fun to do.

00:13:32.600 --> 00:13:35.740
So now we're underwater.

00:13:35.740 --> 00:13:39.550
So let's jump into the
technical details.

00:13:39.550 --> 00:13:42.800
Now, you use a couple of
different languages, from my

00:13:42.800 --> 00:13:45.230
understanding, on the front
end, you're using--

00:13:45.230 --> 00:13:46.410
what language are you using?

00:13:46.410 --> 00:13:48.400
MARTIN BELLEAU: On the front
end, we're C Sharp.

00:13:48.400 --> 00:13:52.590
We're using WPF from Microsoft
to do the UI, so that's pretty

00:13:52.590 --> 00:13:54.230
simple to use.

00:13:54.230 --> 00:13:56.250
It's really productive to use.

00:13:56.250 --> 00:13:57.870
There's a lot of libraries.

00:13:57.870 --> 00:14:01.040
It makes it really simple to
create UIs that look nice and

00:14:01.040 --> 00:14:02.410
are functional.

00:14:02.410 --> 00:14:04.950
Now on the back end side, where
we do all the video

00:14:04.950 --> 00:14:06.870
encoding, all the video
processing, the audio

00:14:06.870 --> 00:14:10.250
processing, that's using C++.

00:14:10.250 --> 00:14:11.340
For that kind of thing,
you need a

00:14:11.340 --> 00:14:13.160
high performance language.

00:14:13.160 --> 00:14:15.480
You also need something where
you have a lot of control over

00:14:15.480 --> 00:14:18.420
memory allocation, garbage
collection, and so on.

00:14:18.420 --> 00:14:21.680
And also, all this technology
is also cross platform

00:14:21.680 --> 00:14:22.720
because it's C++.

00:14:22.720 --> 00:14:24.530
JEREMY WALKER: And then you
guys are going even deeper

00:14:24.530 --> 00:14:25.840
than that in some situations,
right?

00:14:25.840 --> 00:14:26.320
MARTIN BELLEAU: Yes.

00:14:26.320 --> 00:14:28.870
So in some cases, we're going
to use assembly language.

00:14:28.870 --> 00:14:30.940
For example, for that green
screen we're showing right

00:14:30.940 --> 00:14:36.870
now, we're using an assembly
call to composite yourself

00:14:36.870 --> 00:14:41.000
over the background that we're
switching, and also to do

00:14:41.000 --> 00:14:43.320
things like up-scaling video,
downscaling video.

00:14:43.320 --> 00:14:46.280
For very precise operations,
yeah, it's

00:14:46.280 --> 00:14:47.670
done in Assembly language.

00:14:47.670 --> 00:14:49.720
JEREMY WALKER: Great.

00:14:49.720 --> 00:14:52.510
So I guess you guys are using
OAuth2, obviously,

00:14:52.510 --> 00:14:53.960
with the new APIs.

00:14:53.960 --> 00:14:56.010
So how are you doing that?

00:14:56.010 --> 00:14:58.090
MARTIN BELLEAU: So from the UI,
we just launch a browser

00:14:58.090 --> 00:15:01.490
window where you enter your
Google credentials, and then

00:15:01.490 --> 00:15:04.510
after that, we grab the Refresh
token and that gets

00:15:04.510 --> 00:15:07.190
stored on the client machine.

00:15:07.190 --> 00:15:09.490
And then whenever we need to
authenticate again, we create

00:15:09.490 --> 00:15:11.065
a token from that
Refresh token.

00:15:11.065 --> 00:15:12.660
JEREMY WALKER: So it's all
on the local machine?

00:15:12.660 --> 00:15:13.500
MARTIN BELLEAU: Yeah.

00:15:13.500 --> 00:15:15.040
JEREMY WALKER: OK, great.

00:15:15.040 --> 00:15:20.520
Were there any surprises, not
only with the API, but with

00:15:20.520 --> 00:15:23.670
customers using your product
that you noticed?

00:15:23.670 --> 00:15:26.300
MARTIN BELLEAU: Well, one
surprise was when we moved to

00:15:26.300 --> 00:15:30.890
the new API, which was V3, it
was a pretty big change from

00:15:30.890 --> 00:15:32.320
the previous one.

00:15:32.320 --> 00:15:34.750
We just started working
with you guys.

00:15:34.750 --> 00:15:38.070
Typically, APIs tend to stay
more similar through time.

00:15:38.070 --> 00:15:42.020
But this one for V3, there
was a really big change.

00:15:42.020 --> 00:15:44.400
Things became simpler.

00:15:44.400 --> 00:15:47.800
And also, the other big change
was that previously, if we

00:15:47.800 --> 00:15:51.040
wanted to stream in multiple bit
rates and resolutions, we

00:15:51.040 --> 00:15:53.490
had to ourselves, in our
machine, encode at all those

00:15:53.490 --> 00:15:55.400
different target bit rates.

00:15:55.400 --> 00:15:57.620
And now we can just encode at
the highest bit rate that we

00:15:57.620 --> 00:15:59.660
want users to be able to see.

00:15:59.660 --> 00:16:01.500
We send that to YouTube, and
then YouTube actually takes

00:16:01.500 --> 00:16:04.430
care of the transcoding
for lower bit rates.

00:16:04.430 --> 00:16:07.320
So now you don't need a machine
that's as powerful as

00:16:07.320 --> 00:16:08.650
what you needed previously.

00:16:08.650 --> 00:16:09.280
JEREMY WALKER: Yes.

00:16:09.280 --> 00:16:13.030
So basically, we built it from
the bottom up with our new

00:16:13.030 --> 00:16:13.740
infrastructure.

00:16:13.740 --> 00:16:16.420
So that's why we definitely
wanted to make some

00:16:16.420 --> 00:16:19.070
improvements, so that's why the
new version is a little

00:16:19.070 --> 00:16:20.930
bit different than
the last version.

00:16:20.930 --> 00:16:22.310
MARTIN BELLEAU: And then also,
something that's surprising

00:16:22.310 --> 00:16:26.190
from our users' point of view
is the users that we're

00:16:26.190 --> 00:16:28.170
seeing, there's so many
different cases.

00:16:28.170 --> 00:16:31.010
At first, we thought this
would be used mostly by

00:16:31.010 --> 00:16:34.400
broadcasters or people at least
fairly familiar with

00:16:34.400 --> 00:16:35.380
broadcasting.

00:16:35.380 --> 00:16:37.890
But we're seeing education
conferences.

00:16:37.890 --> 00:16:39.294
A whole bunch of people.

00:16:39.294 --> 00:16:42.400
IKUYO YAMADA: Hospitals, or even
small community groups,

00:16:42.400 --> 00:16:47.350
or corporates, they're wanting
to do a very high quality

00:16:47.350 --> 00:16:50.530
video streaming, but yet they
don't really have an in-depth

00:16:50.530 --> 00:16:51.810
broadcasting background.

00:16:51.810 --> 00:16:55.160
So a very simple software like
this helps them to do that.

00:16:55.160 --> 00:16:56.800
JEREMY WALKER: So you, actually,
with this new

00:16:56.800 --> 00:17:00.660
version, you have some clients
using this now successfully

00:17:00.660 --> 00:17:01.250
out in the field?

00:17:01.250 --> 00:17:02.020
IKUYO YAMADA: Right.

00:17:02.020 --> 00:17:04.180
We have a customer in Tokyo.

00:17:04.180 --> 00:17:06.730
It's a broadcasting
company, Tokyo MX.

00:17:06.730 --> 00:17:09.740
They're using Cambria Live to
stream all their music, and

00:17:09.740 --> 00:17:13.050
also sports events, to their
YouTube Live Channel.

00:17:13.050 --> 00:17:16.490
Here locally, we have Saber
Cats, which is an indoor

00:17:16.490 --> 00:17:20.540
football team out of San Jose.

00:17:20.540 --> 00:17:24.730
They use us to do all the
streaming of their games.

00:17:24.730 --> 00:17:27.940
I recently did a project in
Seoul, worked with one of the

00:17:27.940 --> 00:17:30.350
biggest broadcasters in Korea.

00:17:30.350 --> 00:17:35.000
They did streaming of new music
live events, streaming

00:17:35.000 --> 00:17:36.200
to their YouTube Live Channel.

00:17:36.200 --> 00:17:38.580
So we do have quite a few
customer cases who are

00:17:38.580 --> 00:17:39.620
already using it.

00:17:39.620 --> 00:17:42.210
So it's a proven case that
it's working fine.

00:17:42.210 --> 00:17:43.670
And they're very
happy with it.

00:17:43.670 --> 00:17:47.590
And we're starting to see more
and more installation not only

00:17:47.590 --> 00:17:49.240
in the US, but all
around the world.

00:17:49.240 --> 00:17:51.220
So we're very excited and
happy about that.

00:17:51.220 --> 00:17:53.870
JEREMY WALKER: I was going to
say, you're listing every

00:17:53.870 --> 00:17:55.550
country, quite a
few countries.

00:17:55.550 --> 00:17:57.590
That's really good to hear.

00:17:57.590 --> 00:18:00.900
I guess, is there anything you'd
like to see added or

00:18:00.900 --> 00:18:03.512
you're looking forward
to integrating with?

00:18:03.512 --> 00:18:04.700
MARTIN BELLEAU: Well, something
that we want to do

00:18:04.700 --> 00:18:08.770
more of is those Android apps,
like you were showing before.

00:18:08.770 --> 00:18:10.950
There's a whole bunch of
different cases where that

00:18:10.950 --> 00:18:13.920
could be useful since we need to
build our application to be

00:18:13.920 --> 00:18:16.240
generic and used
by many people.

00:18:16.240 --> 00:18:19.100
So in a bunch of instances,
we'd be better off with a

00:18:19.100 --> 00:18:20.430
specific app.

00:18:20.430 --> 00:18:22.400
So if you have a lot of sources
and you need switch

00:18:22.400 --> 00:18:24.800
with them, then you'd want to
have small thumbnails on the

00:18:24.800 --> 00:18:27.070
Android app so you can
switch easily.

00:18:27.070 --> 00:18:29.400
In other cases, if you think
about education, you would

00:18:29.400 --> 00:18:31.720
have a professor in front
of the class.

00:18:31.720 --> 00:18:35.920
And using an app, you can change
from your PowerPoint

00:18:35.920 --> 00:18:39.825
presentation or the DVI from
your laptop to the camera

00:18:39.825 --> 00:18:42.260
itself that shows
the classroom.

00:18:42.260 --> 00:18:43.460
So that's something
that we want to

00:18:43.460 --> 00:18:45.273
pursue in the near future.

00:18:45.273 --> 00:18:48.050
And yeah, we're looking forward
to whatever APIs you

00:18:48.050 --> 00:18:50.590
guys come up with, and
we'll check them out.

00:18:50.590 --> 00:18:51.220
JEREMY WALKER: Yeah.

00:18:51.220 --> 00:18:53.300
We'll definitely be
talking more.

00:18:53.300 --> 00:18:57.350
Well, let's see if we had any
questions for you guys.

00:18:57.350 --> 00:18:58.370
There was a question.

00:18:58.370 --> 00:19:00.510
So we usually have general
questions.

00:19:00.510 --> 00:19:02.690
There wasn't any specific
to Capella.

00:19:02.690 --> 00:19:05.040
There was a question around
private videos.

00:19:05.040 --> 00:19:08.420
And just for the people out
there, you can upload a

00:19:08.420 --> 00:19:11.220
private video and only
you can see it.

00:19:11.220 --> 00:19:13.040
And you can add a
couple users.

00:19:13.040 --> 00:19:15.180
We do have a limit, but you can
add a couple users so only

00:19:15.180 --> 00:19:15.880
they can see it.

00:19:15.880 --> 00:19:18.135
And of course, you can't
download unless you uploaded

00:19:18.135 --> 00:19:20.180
it, and you own the content.

00:19:20.180 --> 00:19:22.390
And then the last question
is always on our side.

00:19:22.390 --> 00:19:25.230
Is YouTube developer
relations hiring?

00:19:25.230 --> 00:19:26.110
And yes, we are.

00:19:26.110 --> 00:19:31.040
Definitely go check out the
developers.google.com/hiring

00:19:31.040 --> 00:19:34.650
and have a look there to see if
any positions interest you,

00:19:34.650 --> 00:19:36.600
because we're definitely
looking for people.

00:19:36.600 --> 00:19:40.580
Well, thanks again, not only for
coming today, but also for

00:19:40.580 --> 00:19:42.970
participating in Google I/O
at the YouTube Sandbox.

00:19:42.970 --> 00:19:45.860
It was a really neat event, and
we were really happy to

00:19:45.860 --> 00:19:47.060
have you guys.

00:19:47.060 --> 00:19:50.150
And we look forward to
everything we can do now in

00:19:50.150 --> 00:19:52.320
the future with the Live
Streaming API.

00:19:52.320 --> 00:19:53.340
IKUYO YAMADA: Thanks for
having us today.

00:19:53.340 --> 00:19:55.560
It was great to see you
and to be here.

00:19:55.560 --> 00:19:55.910
MARTIN BELLEAU: Thanks.

00:19:55.910 --> 00:19:57.160
IKUYO YAMADA: Thank you.

00:20:11.957 --> 00:21:04.883
[MUSIC PLAYING]

