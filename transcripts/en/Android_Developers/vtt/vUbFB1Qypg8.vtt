WEBVTT
Kind: captions
Language: en

00:00:00.490 --> 00:00:08.330
[MUSIC PLAYING]

00:00:08.330 --> 00:00:08.800
Hi.

00:00:08.800 --> 00:00:11.790
My name is Fred Chung, part of
Android Developer Relations.

00:00:11.790 --> 00:00:15.100
Today we're going to talk about
Bluetooth Low Energy.

00:00:15.100 --> 00:00:19.320
In Android 4.3, we are adding
built-in platform support for

00:00:19.320 --> 00:00:20.660
Bluetooth LE.

00:00:20.660 --> 00:00:25.510
The new Nexus 7 and the Nexus
4 are the first two Nexus

00:00:25.510 --> 00:00:28.460
devices that are going to be
Bluetooth-smart ready, making

00:00:28.460 --> 00:00:32.020
them capable of communicating
with the many Bluetooth smart

00:00:32.020 --> 00:00:33.770
peripherals on the
market today.

00:00:33.770 --> 00:00:36.130
I'm going to do a sample
app walkthrough today.

00:00:36.130 --> 00:00:38.910
But before doing that, I'd like
to walk you through some

00:00:38.910 --> 00:00:41.660
technical concepts of Bluetooth
Low Energy so that

00:00:41.660 --> 00:00:45.910
you can make sense out
of the API objects.

00:00:45.910 --> 00:00:50.980
As its name implies, Bluetooth
Low Energy uses less energy as

00:00:50.980 --> 00:00:52.770
compared with Bluetooth
Classic.

00:00:52.770 --> 00:00:56.290
It is not uncommon to have
Bluetooth Low Energy devices

00:00:56.290 --> 00:00:59.010
that last for weeks, if not
years, before needing to

00:00:59.010 --> 00:01:01.500
recharge or replacing
the battery.

00:01:01.500 --> 00:01:05.140
The protocol itself is optimized
for a small burst of

00:01:05.140 --> 00:01:09.110
data exchange, which is ideal
for applications such as

00:01:09.110 --> 00:01:12.720
sensors, remote controllers,
so on and so forth.

00:01:12.720 --> 00:01:16.280
In contrast, Bluetooth Classic
quite often is involved in

00:01:16.280 --> 00:01:19.780
high bandwidth applications
such as audio streaming.

00:01:19.780 --> 00:01:22.870
Now let's have a look at how
information is structured in

00:01:22.870 --> 00:01:25.326
BLE applications.

00:01:25.326 --> 00:01:28.790
BLE is based on a specification
called general

00:01:28.790 --> 00:01:32.460
attribute profile, or GATT, It
governs sending and receiving

00:01:32.460 --> 00:01:35.470
of short pieces of data
known as attributes.

00:01:35.470 --> 00:01:39.090
The Android app can be either a
GATT client or a GATT server

00:01:39.090 --> 00:01:40.860
depending on the application.

00:01:40.860 --> 00:01:43.990
The GATT server can support
a collection of services.

00:01:43.990 --> 00:01:46.700
You can think of services as
different features offered by

00:01:46.700 --> 00:01:47.760
the device.

00:01:47.760 --> 00:01:50.980
Each service is uniquely
identified by a UUID

00:01:50.980 --> 00:01:54.000
referenceable by your
application.

00:01:54.000 --> 00:01:56.610
Under each service, there
could be a collection of

00:01:56.610 --> 00:01:59.850
characteristics which you can
perform read or write

00:01:59.850 --> 00:02:02.830
operations depending
on the BTLE profile

00:02:02.830 --> 00:02:04.260
you're working with.

00:02:04.260 --> 00:02:07.600
To put things in perspective,
let's have a look at the heart

00:02:07.600 --> 00:02:09.729
rate measurement profile
which is one of

00:02:09.729 --> 00:02:12.320
the standard profiles.

00:02:12.320 --> 00:02:15.175
The heart rate sensor
is the GATT server.

00:02:15.175 --> 00:02:20.850
The Android app in this diagram
is the GATT client.

00:02:20.850 --> 00:02:24.020
The GATT server hosted on the
heart rate sensor device

00:02:24.020 --> 00:02:26.850
offers a number of services.

00:02:26.850 --> 00:02:29.440
Under the service, there's
a collection of GATT

00:02:29.440 --> 00:02:30.620
characteristics.

00:02:30.620 --> 00:02:34.030
There's one for providing heart
rate measurements which

00:02:34.030 --> 00:02:37.150
you can receive notification
on when that indicates the

00:02:37.150 --> 00:02:40.440
location of the sensor which
you can read from.

00:02:40.440 --> 00:02:44.540
Now that we have some basic
understanding on Bluetooth Low

00:02:44.540 --> 00:02:48.370
Energy technology, let's have
a look at some code.

00:02:48.370 --> 00:02:51.940
Let's first take a look at
the Android manifest.

00:02:51.940 --> 00:02:54.630
There's a new feature called
android.hardware.bluetoothle.

00:02:57.520 --> 00:03:00.910
You declare it if your
application would only work on

00:03:00.910 --> 00:03:03.210
devices that has that feature.

00:03:03.210 --> 00:03:05.860
You can omit it if your
application would work on a

00:03:05.860 --> 00:03:10.230
device without that feature
so that you can optionally

00:03:10.230 --> 00:03:11.920
disable the Bluetooth
Low Energy

00:03:11.920 --> 00:03:13.740
features within your app.

00:03:13.740 --> 00:03:16.520
Now the debugging
session is up.

00:03:16.520 --> 00:03:19.790
I'm going to go ahead
and click Scan.

00:03:19.790 --> 00:03:22.790
So I've put some break
points here.

00:03:22.790 --> 00:03:25.070
What it's trying to
do is to call a

00:03:25.070 --> 00:03:28.020
startLeScan method call.

00:03:28.020 --> 00:03:31.410
And as you can see in the API
documentation, a lot of the

00:03:31.410 --> 00:03:36.050
BLE operation methods are
asynchronous in nature.

00:03:36.050 --> 00:03:39.570
You have to specify a callback
such that when interesting

00:03:39.570 --> 00:03:42.700
events happen, in this case,
when devices are discovered,

00:03:42.700 --> 00:03:45.810
the callback methods
are invoked.

00:03:45.810 --> 00:03:50.250
So I'm going to let this
breakpoint go.

00:03:50.250 --> 00:03:52.490
As you can see in the
app, it's able to

00:03:52.490 --> 00:03:54.240
find a couple of devices.

00:03:54.240 --> 00:03:57.110
Let's go ahead and click on
Heart Rate Sensor, which

00:03:57.110 --> 00:04:00.550
corresponds to the test kit that
I'm trying to test with.

00:04:00.550 --> 00:04:03.420
So let's go ahead
and click on it.

00:04:03.420 --> 00:04:06.880
Now it brings you to another
activity which is bound to a

00:04:06.880 --> 00:04:08.530
background service.

00:04:08.530 --> 00:04:10.600
And I've put a breakpoint
in the service.

00:04:10.600 --> 00:04:14.310
What it's trying to do is to
connect to the GATT server

00:04:14.310 --> 00:04:18.589
that's hosted on this device by
invoking this method called

00:04:18.589 --> 00:04:20.339
connectGatt.

00:04:20.339 --> 00:04:24.510
Just like the previous example,
since all APIs that

00:04:24.510 --> 00:04:27.070
have to do with BLEs are
asynchronous in nature, you

00:04:27.070 --> 00:04:29.060
have to pass another
callback here.

00:04:29.060 --> 00:04:32.130
Now that we've connected to the
GATT server, it's trying

00:04:32.130 --> 00:04:37.390
to invoke this method called
discoverServices by trying to

00:04:37.390 --> 00:04:39.450
discover the available
GATT services

00:04:39.450 --> 00:04:41.000
hosted on this device.

00:04:41.000 --> 00:04:44.130
Let's go ahead and release
the breakpoint.

00:04:44.130 --> 00:04:47.260
And now the callback on
services discovered is

00:04:47.260 --> 00:04:52.690
invoked, meaning the app has
found the services that are

00:04:52.690 --> 00:04:54.596
available on the device.

00:04:54.596 --> 00:04:58.170
The app's going to iterate
through the collection of

00:04:58.170 --> 00:05:01.950
services found and display
on the UI, as seen here.

00:05:01.950 --> 00:05:07.520
Since this is a heart rate
sensor, we're going to do some

00:05:07.520 --> 00:05:09.150
heart rate measurements.

00:05:09.150 --> 00:05:13.330
Let's go ahead and locate the
heart rate service, expand it,

00:05:13.330 --> 00:05:16.600
and you'll see Heart Rate
Measurement characteristic.

00:05:16.600 --> 00:05:18.340
Let's go ahead and
click on it.

00:05:18.340 --> 00:05:22.740
What happens is that since it
knows that the characteristic

00:05:22.740 --> 00:05:26.670
supports notification, it
tries to enable the

00:05:26.670 --> 00:05:27.710
notification.

00:05:27.710 --> 00:05:32.640
So let's go ahead and release
this breakpoint.

00:05:32.640 --> 00:05:35.920
Now, as soon as it begins
getting heart rate updates

00:05:35.920 --> 00:05:39.870
reading, you'll get this
callback on characteristic

00:05:39.870 --> 00:05:44.380
change indicating that you are
receiving a notification.

00:05:44.380 --> 00:05:48.840
So we're going to go ahead and
release the breakpoint.

00:05:48.840 --> 00:05:51.900
As you can see on the screen
here, we are receiving heart

00:05:51.900 --> 00:05:54.940
rate measurement readings in
this very, very tiny text.

00:05:54.940 --> 00:05:56.120
I don't know if you
can see it.

00:05:56.120 --> 00:06:00.870
But it's updating with heart
rate measurement notifications

00:06:00.870 --> 00:06:02.880
receiving from the
peripherals.

00:06:02.880 --> 00:06:06.270
Now, I want to illustrate
a very important point.

00:06:06.270 --> 00:06:08.905
And that is whenever you are
done with a particular

00:06:08.905 --> 00:06:14.340
Bluetooth LE connection with a
peripheral, you should really

00:06:14.340 --> 00:06:17.920
call this close method so
that the stack can do

00:06:17.920 --> 00:06:20.380
it's clean up properly.

00:06:20.380 --> 00:06:22.070
That's it for the walkthrough.

00:06:22.070 --> 00:06:24.960
If you want to learn more, do
check out the Bluetooth Low

00:06:24.960 --> 00:06:28.030
Energy developer guide
on d.android.com.

00:06:28.030 --> 00:06:29.280
Thank you for watching.

