WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.402
[MUSIC PLAYING]

00:00:06.651 --> 00:00:08.650
ALESHA UNPINGCO: We're
here to talk to you today

00:00:08.650 --> 00:00:10.847
about designing AR applications.

00:00:14.260 --> 00:00:17.710
So Google has a long
history in designing for AR.

00:00:17.710 --> 00:00:20.650
We've been doing mobile
AR for the past four years

00:00:20.650 --> 00:00:24.250
and working on other augmented
reality projects before that.

00:00:24.250 --> 00:00:27.880
What's changed most recently
is that mobile AR is really

00:00:27.880 --> 00:00:31.750
starting to take off,
and Google's AR core

00:00:31.750 --> 00:00:36.160
makes it possible for anybody
to create quality AR content.

00:00:36.160 --> 00:00:39.400
So I'll some fun
facts about AR core.

00:00:39.400 --> 00:00:41.800
The first thing is
that we released 1.0

00:00:41.800 --> 00:00:45.190
at the end of February, and
that made AR content available

00:00:45.190 --> 00:00:48.670
to more than 100
million devices.

00:00:48.670 --> 00:00:50.530
And we're already
seeing rapid growth

00:00:50.530 --> 00:00:53.860
with more than 300 apps already
available in the Google Play

00:00:53.860 --> 00:00:56.180
Store.

00:00:56.180 --> 00:01:00.110
So you're here because you want
to learn how to design for AR.

00:01:00.110 --> 00:01:02.150
And what we've found is
that once you understand

00:01:02.150 --> 00:01:04.099
your users and the
type of experience

00:01:04.099 --> 00:01:06.980
you're trying to create,
design principles for getting

00:01:06.980 --> 00:01:09.510
started fall into five
different categories,

00:01:09.510 --> 00:01:13.530
which we call the
pillars of AR design.

00:01:13.530 --> 00:01:16.810
First, you want to understand
your user's environment.

00:01:16.810 --> 00:01:19.510
Where will the users be
experiencing your app?

00:01:19.510 --> 00:01:22.180
Think about the surfaces
that are available

00:01:22.180 --> 00:01:24.760
and how your app can adapt
to different environmental

00:01:24.760 --> 00:01:27.070
constraints.

00:01:27.070 --> 00:01:29.530
Then you want to consider
the user's movement

00:01:29.530 --> 00:01:31.960
and how much space the
user will need in order

00:01:31.960 --> 00:01:35.100
to experience your app.

00:01:35.100 --> 00:01:37.770
And when it comes to
initialization and onboarding,

00:01:37.770 --> 00:01:40.530
you want to make the onboarding
process as clear as possible

00:01:40.530 --> 00:01:43.200
so that users understand
exactly what to do

00:01:43.200 --> 00:01:46.540
in this entirely new medium.

00:01:46.540 --> 00:01:48.490
When it comes to
object interactions,

00:01:48.490 --> 00:01:50.620
design natural
object interactions

00:01:50.620 --> 00:01:53.410
that convey the affordances
and also the feedback

00:01:53.410 --> 00:01:56.200
so that users understand how
these digital objects fit

00:01:56.200 --> 00:02:00.240
in the context of your
real physical space.

00:02:00.240 --> 00:02:02.510
And when you're thinking
about user interfaces,

00:02:02.510 --> 00:02:06.640
balance the on-screen UI with
volumetric interface design

00:02:06.640 --> 00:02:08.639
so that you're able to
create an experience that

00:02:08.639 --> 00:02:10.890
is meaningful and
usable for your users.

00:02:13.460 --> 00:02:15.670
So we have some
examples that showcase

00:02:15.670 --> 00:02:18.905
the different guidelines
within each of these pillars.

00:02:18.905 --> 00:02:20.530
And the thing that
we want to point out

00:02:20.530 --> 00:02:23.050
is that this framework can
help anybody get started

00:02:23.050 --> 00:02:25.972
with AR content creation.

00:02:25.972 --> 00:02:27.430
So throughout our
talk, we're going

00:02:27.430 --> 00:02:29.380
to show you some different
demos that you'll

00:02:29.380 --> 00:02:31.780
be able to play with very
soon through an app we're

00:02:31.780 --> 00:02:35.380
launching on the Google Play
Store called AR Core Elements.

00:02:35.380 --> 00:02:37.540
And many of the core
interaction patterns

00:02:37.540 --> 00:02:39.520
you'll see in this
talk are already

00:02:39.520 --> 00:02:42.430
available in [INAUDIBLE] form
or will be available for Unity

00:02:42.430 --> 00:02:43.180
later this summer.

00:02:46.811 --> 00:02:47.810
ALEX FAABORG: All right.

00:02:47.810 --> 00:02:50.200
So let's start out talking
about the user's environment--

00:02:50.200 --> 00:02:52.650
the first pillar of AR design.

00:02:52.650 --> 00:02:55.000
So ARCore is a relatively
new technology.

00:02:55.000 --> 00:02:58.150
So just to begin, let's talk
about what ARCore can actually

00:02:58.150 --> 00:02:59.080
do.

00:02:59.080 --> 00:03:01.166
So it does lots of things.

00:03:01.166 --> 00:03:03.040
The first thing that
everyone's familiar with

00:03:03.040 --> 00:03:04.960
is surface plane
detection, where

00:03:04.960 --> 00:03:07.240
it can understand
surfaces, tables, floors,

00:03:07.240 --> 00:03:08.780
those types of things.

00:03:08.780 --> 00:03:10.660
It can also do walls.

00:03:10.660 --> 00:03:11.860
Vertical surfaces.

00:03:11.860 --> 00:03:13.330
And then, of course,
what's better

00:03:13.330 --> 00:03:15.540
than horizontal and
vertical surfaces?

00:03:15.540 --> 00:03:18.550
It can also do angled
surfaces with oriented points.

00:03:18.550 --> 00:03:23.770
Being able to place
objects on any angle.

00:03:23.770 --> 00:03:25.600
ARCore does light estimation.

00:03:25.600 --> 00:03:28.750
This is really important for
having objects sort of look

00:03:28.750 --> 00:03:30.047
realistic in a scene.

00:03:30.047 --> 00:03:31.630
And there's also
some other fun things

00:03:31.630 --> 00:03:35.010
you can do with that
that we'll get into.

00:03:35.010 --> 00:03:38.490
And announced at I/O
yesterday, Cloud Anchors,

00:03:38.490 --> 00:03:40.650
which is available
now for ARCore

00:03:40.650 --> 00:03:43.150
both on Android and also on iOS.

00:03:43.150 --> 00:03:45.780
It lets you do multi-player
experiences in ARCore

00:03:45.780 --> 00:03:49.330
with two people
viewing the same thing.

00:03:49.330 --> 00:03:51.690
And also announced
yesterday, augmented images.

00:03:51.690 --> 00:03:53.910
The ability to recognize
an image, but then also

00:03:53.910 --> 00:03:55.800
not just recognize
it, but use that image

00:03:55.800 --> 00:04:00.110
to get 3D post data off of it so
you know where it is in space.

00:04:00.110 --> 00:04:02.400
So that's the current set
of ARCore capabilities,

00:04:02.400 --> 00:04:04.860
and this is, of course,
growing over time.

00:04:04.860 --> 00:04:06.870
And what we found
is the more your app

00:04:06.870 --> 00:04:09.210
integrates with the
user's environment,

00:04:09.210 --> 00:04:11.700
really, the more magical
your app is going to feel.

00:04:11.700 --> 00:04:14.190
So let's look through
a few examples here.

00:04:14.190 --> 00:04:16.769
First, surface plane detection.

00:04:16.769 --> 00:04:20.700
A lot of AR apps currently
only use one surface.

00:04:20.700 --> 00:04:21.839
Say you're playing a game--

00:04:21.839 --> 00:04:23.940
a game board will
appear on a surface.

00:04:23.940 --> 00:04:26.270
What we found is there's
really no reason that you

00:04:26.270 --> 00:04:27.270
have to use one surface.

00:04:27.270 --> 00:04:29.640
You could use all of
the detected surfaces.

00:04:29.640 --> 00:04:32.220
And at moments when you
have your game interacting

00:04:32.220 --> 00:04:33.600
with multiple
surfaces, those can

00:04:33.600 --> 00:04:35.766
be really kind of like
breakout moments in your game

00:04:35.766 --> 00:04:37.860
where it feels very magical.

00:04:37.860 --> 00:04:42.180
Even something like if, say,
you're playing a physics based

00:04:42.180 --> 00:04:44.100
game and you destroy
your opponents

00:04:44.100 --> 00:04:47.040
castle or something and the
bricks fall onto the floor.

00:04:47.040 --> 00:04:49.980
At that moment when you
see the items on the floor,

00:04:49.980 --> 00:04:51.480
it can be really quite stunning.

00:04:55.050 --> 00:04:55.550
All right.

00:04:55.550 --> 00:04:57.280
Light estimation.

00:04:57.280 --> 00:04:59.490
This is critical
for making objects

00:04:59.490 --> 00:05:01.270
look realistic in the scene.

00:05:01.270 --> 00:05:03.780
Here's an example that we're
working on to sort of test

00:05:03.780 --> 00:05:05.700
out some different techniques.

00:05:05.700 --> 00:05:08.710
Here we have three fake
plants and one real plant,

00:05:08.710 --> 00:05:11.670
although I think it's
actually a real fake plant.

00:05:11.670 --> 00:05:17.070
And we have unlit, which is the
most basic lighting you can do.

00:05:17.070 --> 00:05:18.750
Really not very realistic.

00:05:18.750 --> 00:05:21.800
Then dynamic and a combination
of dynamic and baked.

00:05:21.800 --> 00:05:26.476
And what's great with dynamic
is you get real time shadows.

00:05:26.476 --> 00:05:28.350
And then when you combine
dynamic with baked,

00:05:28.350 --> 00:05:30.240
you start to see things
like soft shadowing

00:05:30.240 --> 00:05:32.940
where the leaves of
the plant are actually

00:05:32.940 --> 00:05:34.990
a little bit darker and
it's picking that up.

00:05:34.990 --> 00:05:37.230
You can sort of see
an example of how

00:05:37.230 --> 00:05:40.460
this looks with some movement.

00:05:40.460 --> 00:05:44.320
And lighting, there's
definitely a lot of innovation

00:05:44.320 --> 00:05:46.070
that's going to be
occurring in this space

00:05:46.070 --> 00:05:49.750
as we try to get more and
more realistic lighting.

00:05:49.750 --> 00:05:52.150
You can see where
we are right now.

00:05:52.150 --> 00:05:54.050
And especially as the
scene gets darker,

00:05:54.050 --> 00:05:56.150
you start to see that
the unlit object just

00:05:56.150 --> 00:05:57.290
doesn't perform as well.

00:05:57.290 --> 00:05:58.790
So it's really
important that you're

00:05:58.790 --> 00:06:01.650
using the real-time lighting
APIs that are in ARCore.

00:06:04.204 --> 00:06:06.120
The other thing you can
do is you can actually

00:06:06.120 --> 00:06:09.030
use lighting as a trigger
to change something.

00:06:09.030 --> 00:06:12.390
So here in this example when
you turn the light switch off

00:06:12.390 --> 00:06:14.590
in the room, the
city actually glows

00:06:14.590 --> 00:06:16.540
and it responds to that change.

00:06:16.540 --> 00:06:18.720
And these types of moments
can really feel great

00:06:18.720 --> 00:06:20.370
in magical freezers where--

00:06:20.370 --> 00:06:23.580
imagine you're playing a sort
of a city simulation game

00:06:23.580 --> 00:06:26.394
and it's having these kind of
significant, meaningful changes

00:06:26.394 --> 00:06:27.810
based off the
environmental light.

00:06:30.440 --> 00:06:30.940
All right.

00:06:30.940 --> 00:06:31.710
Oriented points.

00:06:31.710 --> 00:06:33.910
This is actually a
very new feature.

00:06:33.910 --> 00:06:36.350
So we don't have a whole
lot of examples here,

00:06:36.350 --> 00:06:38.590
but here is one of
the more basic ones.

00:06:38.590 --> 00:06:41.430
I filmed this when
I was out skiing.

00:06:41.430 --> 00:06:44.600
And here I'm just attaching
androids to the side of a tree.

00:06:44.600 --> 00:06:46.870
And you can see that
as I place them,

00:06:46.870 --> 00:06:50.460
they stick to exactly
that point on the tree,

00:06:50.460 --> 00:06:52.570
at the angle of where
the branches were.

00:06:58.486 --> 00:06:58.990
All right.

00:06:58.990 --> 00:07:00.010
Cloud anchors.

00:07:00.010 --> 00:07:01.630
Announced yesterday.

00:07:01.630 --> 00:07:03.620
Here's an example
of that being used.

00:07:03.620 --> 00:07:06.130
Here both players see
the same game board

00:07:06.130 --> 00:07:08.114
in exactly the same
place, and they

00:07:08.114 --> 00:07:09.280
can play that game together.

00:07:09.280 --> 00:07:11.530
And this is really
tremendously fun.

00:07:11.530 --> 00:07:13.840
You can actually try
it out in the Sandbox

00:07:13.840 --> 00:07:16.776
if you want to stop
by later today.

00:07:16.776 --> 00:07:18.775
And again, this works
with both Android and iOS.

00:07:24.510 --> 00:07:26.340
Augmented images.

00:07:26.340 --> 00:07:28.650
There's a lot of different
ways you can use this.

00:07:28.650 --> 00:07:31.350
One demo that we have in the
Sandbox that you can go check

00:07:31.350 --> 00:07:33.900
out is actually an
art exhibit that was

00:07:33.900 --> 00:07:35.330
built using augmented images.

00:07:48.278 --> 00:07:51.764
[MUSIC PLAYING]

00:08:14.837 --> 00:08:16.420
So we're really
excited about what you

00:08:16.420 --> 00:08:17.770
can do with augmented images.

00:08:17.770 --> 00:08:19.990
And there's really
lots of possibilities

00:08:19.990 --> 00:08:22.600
from artwork to even
something like just having

00:08:22.600 --> 00:08:25.580
a toy sort of come to life.

00:08:25.580 --> 00:08:28.450
You know, the surface
of a product box

00:08:28.450 --> 00:08:30.617
where you can see sort
of 3D models of what

00:08:30.617 --> 00:08:31.700
you're about to play with.

00:08:36.360 --> 00:08:36.860
All right.

00:08:36.860 --> 00:08:39.020
So now that we've gone
over some of the basics

00:08:39.020 --> 00:08:41.210
on the core
capabilities of ARCore,

00:08:41.210 --> 00:08:43.220
let's talk about
how you'd actually

00:08:43.220 --> 00:08:45.010
start to design an app for AR.

00:08:45.010 --> 00:08:47.357
So one of the first things
you're thinking is, OK,

00:08:47.357 --> 00:08:48.440
where do I actually start?

00:08:48.440 --> 00:08:50.090
You know, blank page
and ready to start

00:08:50.090 --> 00:08:53.025
having brainstorming
and new ideas for AR.

00:08:53.025 --> 00:08:55.400
And one of the things that
I'd want you to first focus on

00:08:55.400 --> 00:08:58.065
is AR exists outside
of the phone,

00:08:58.065 --> 00:08:59.690
so your design work
should really exist

00:08:59.690 --> 00:09:01.310
outside of the phone as well.

00:09:01.310 --> 00:09:03.440
So something I've found
with a lot of people who've

00:09:03.440 --> 00:09:05.300
done tremendous amounts
of mobile design

00:09:05.300 --> 00:09:08.480
is they tend to be very attached
to sort of the phone frame

00:09:08.480 --> 00:09:10.190
and sort of flows of screens.

00:09:10.190 --> 00:09:11.812
They've been doing
that for so long.

00:09:11.812 --> 00:09:14.270
One of the first things you
need to do when you're starting

00:09:14.270 --> 00:09:17.450
to think about AR is to
actually put away all of those,

00:09:17.450 --> 00:09:19.130
you know, 2D UI stencils.

00:09:19.130 --> 00:09:21.240
And don't really think
about the phone at all.

00:09:21.240 --> 00:09:22.340
Instead, what you
want to do is you

00:09:22.340 --> 00:09:24.715
want to sketch the actual
environment that the user's in.

00:09:24.715 --> 00:09:27.260
So you should be sketching
living rooms, and tables,

00:09:27.260 --> 00:09:29.480
and outdoor spaces.

00:09:29.480 --> 00:09:31.460
And then as you sketch
the user's environment,

00:09:31.460 --> 00:09:33.560
then you start to sketch
the various objects

00:09:33.560 --> 00:09:35.060
that they're going
to be interacting

00:09:35.060 --> 00:09:36.200
with in that environment.

00:09:36.200 --> 00:09:38.360
In many ways, you can
sort of think of AR

00:09:38.360 --> 00:09:40.430
as having a lot of
the same challenges

00:09:40.430 --> 00:09:43.430
as responsive design for the
web in terms of different window

00:09:43.430 --> 00:09:45.330
sizes, but it's even
more complicated

00:09:45.330 --> 00:09:48.740
because now you have responsive
design for 3D spaces that are

00:09:48.740 --> 00:09:51.820
the user's actual living room.

00:09:51.820 --> 00:09:53.500
So you want to sketch
the user for scale

00:09:53.500 --> 00:09:55.540
to get a sense of how
you're going to start

00:09:55.540 --> 00:09:57.130
crafting this experience.

00:09:57.130 --> 00:09:59.800
The user could be very large
relative to the AR objects

00:09:59.800 --> 00:10:00.772
or very small.

00:10:00.772 --> 00:10:02.230
And then you want
to start thinking

00:10:02.230 --> 00:10:04.021
about how that user is
going to move around

00:10:04.021 --> 00:10:05.183
in that environment.

00:10:09.272 --> 00:10:11.480
ALESHA UNPINGCO: And that
brings us to user movement.

00:10:11.480 --> 00:10:14.860
So now that we understand how
to design for the environment,

00:10:14.860 --> 00:10:17.650
let's think about how to
design for user movement.

00:10:17.650 --> 00:10:20.260
And as Alex mentioned,
it's completely OK

00:10:20.260 --> 00:10:22.920
to design beyond the
bounds of the screen.

00:10:22.920 --> 00:10:24.670
And what we've found
is that in many ways,

00:10:24.670 --> 00:10:27.580
this can make the experience
feel more delightful and even

00:10:27.580 --> 00:10:28.420
more immersive.

00:10:28.420 --> 00:10:31.810
Because when you have an object
that begins on-screen and also

00:10:31.810 --> 00:10:34.480
extends beyond the boundaries
of the phone [INAUDIBLE] port,

00:10:34.480 --> 00:10:37.550
it can make the user feel like
the object is really there.

00:10:37.550 --> 00:10:39.970
And beyond that, it can
also motivate the user

00:10:39.970 --> 00:10:43.810
to organically begin moving the
phone around their environment

00:10:43.810 --> 00:10:45.970
so that they can
appreciate the full scale

00:10:45.970 --> 00:10:49.240
of these digital objects
in their physical space.

00:10:49.240 --> 00:10:51.820
And that brings us to
our next observation.

00:10:51.820 --> 00:10:55.240
Because users are more familiar
with 2D mobile applications

00:10:55.240 --> 00:10:56.920
that don't typically
require user

00:10:56.920 --> 00:10:59.080
movement as a form
of interaction,

00:10:59.080 --> 00:11:01.870
it can be very challenging
to help convey to users

00:11:01.870 --> 00:11:03.490
that they're able
to move around.

00:11:03.490 --> 00:11:05.410
So many users don't
because it just

00:11:05.410 --> 00:11:06.970
doesn't feel
natural based on how

00:11:06.970 --> 00:11:09.670
you use 2D apps in the past.

00:11:09.670 --> 00:11:13.420
But what we realized is
that characters, animations,

00:11:13.420 --> 00:11:16.180
or objects that convey
visual interest on-screen

00:11:16.180 --> 00:11:18.850
and then move off-screen
can be a natural way

00:11:18.850 --> 00:11:20.810
to motivate users to move.

00:11:20.810 --> 00:11:23.170
So here we have a
bird and it appears

00:11:23.170 --> 00:11:24.860
in the middle of the screen.

00:11:24.860 --> 00:11:26.320
And when it flies
off-screen, it's

00:11:26.320 --> 00:11:29.380
replaced with a marker that
moves around and slides along

00:11:29.380 --> 00:11:32.410
the edge to help users
understand the bird's location

00:11:32.410 --> 00:11:33.690
in relation to the user.

00:11:37.640 --> 00:11:39.790
Another major thing that
you want to think about

00:11:39.790 --> 00:11:42.550
is that whenever you have an
experience that requires a user

00:11:42.550 --> 00:11:45.450
to move, you also want to
think about how much space

00:11:45.450 --> 00:11:47.620
a user needs.

00:11:47.620 --> 00:11:49.360
So we found that
experiences fall

00:11:49.360 --> 00:11:51.250
into three different sizes.

00:11:51.250 --> 00:11:53.600
There's table scale,
there's room scale,

00:11:53.600 --> 00:11:56.260
and there's also world scale.

00:11:56.260 --> 00:11:58.660
And when it comes to
table scale, what we found

00:11:58.660 --> 00:12:00.550
is that your experience
is able to scale

00:12:00.550 --> 00:12:04.810
to the smallest of surfaces
so that many users are

00:12:04.810 --> 00:12:07.840
able to enjoy your experience.

00:12:07.840 --> 00:12:11.050
And with room scale, it
expands the impact of AR

00:12:11.050 --> 00:12:14.200
so that content will
start to feel life sized

00:12:14.200 --> 00:12:16.510
and you're able to do a lot
more with the space that's

00:12:16.510 --> 00:12:19.190
available.

00:12:19.190 --> 00:12:21.830
And world scale has no limits.

00:12:21.830 --> 00:12:26.387
It allows users to appreciate AR
in whatever area they see fit.

00:12:26.387 --> 00:12:27.970
And this is an area
we're particularly

00:12:27.970 --> 00:12:29.680
excited about
because what it means

00:12:29.680 --> 00:12:32.400
for procedurally generated
content in world scale.

00:12:35.510 --> 00:12:39.030
So no matter what size your
experience ends up being, just

00:12:39.030 --> 00:12:42.810
remember to set the right
expectation for users

00:12:42.810 --> 00:12:46.740
so they have an understanding of
how much space they will need.

00:12:46.740 --> 00:12:48.660
Because it can be a
very frustrating part

00:12:48.660 --> 00:12:51.264
of the experience if the
user is playing a game

00:12:51.264 --> 00:12:52.680
and in the middle
of the game they

00:12:52.680 --> 00:12:57.410
realize they don't have
enough space to enjoy it.

00:12:57.410 --> 00:13:00.340
And when it comes to how
much movement your experience

00:13:00.340 --> 00:13:04.180
requires, there's no one
size fits all solution.

00:13:04.180 --> 00:13:06.190
It really depends
on the experience

00:13:06.190 --> 00:13:08.960
that you're trying to create.

00:13:08.960 --> 00:13:12.890
For example, if you have a game
that requires user movement

00:13:12.890 --> 00:13:14.900
as a core part of
interaction, that

00:13:14.900 --> 00:13:16.850
can be a very
delightful experience.

00:13:16.850 --> 00:13:19.040
You can use
proximity or distance

00:13:19.040 --> 00:13:21.920
to trigger different actions
so that as a user gets closer

00:13:21.920 --> 00:13:24.500
to this frog, it can
leap behind the mushroom,

00:13:24.500 --> 00:13:26.360
or maybe the mushroom
can disappear.

00:13:26.360 --> 00:13:28.730
And that can be
really cool to see.

00:13:28.730 --> 00:13:31.640
However, if you have
a utility app where

00:13:31.640 --> 00:13:34.820
the core purpose of the app
is to help users understand

00:13:34.820 --> 00:13:37.430
very complex data
and information,

00:13:37.430 --> 00:13:39.710
then requiring
users to move might

00:13:39.710 --> 00:13:41.570
be a really bad experience.

00:13:41.570 --> 00:13:43.220
Because what it
means is that users

00:13:43.220 --> 00:13:46.280
who have different movement
or environment limitations

00:13:46.280 --> 00:13:49.220
won't be able to get the
complete app experience.

00:13:49.220 --> 00:13:52.970
So allowing users to manipulate
the object to rotate it,

00:13:52.970 --> 00:13:55.620
to move it around in a space
that's more appropriate

00:13:55.620 --> 00:13:58.700
will ensure that all users
have easy access to the data

00:13:58.700 --> 00:13:59.450
that they seek.

00:14:03.490 --> 00:14:05.710
ALEX FAABORG: Because
AR is relatively new,

00:14:05.710 --> 00:14:09.010
the actual process for users to
flow from 2D parts of your app

00:14:09.010 --> 00:14:12.299
into 3D can be, at
times, a bit awkward.

00:14:12.299 --> 00:14:14.590
Amber is just starting to
create some sort of standards

00:14:14.590 --> 00:14:15.220
around that.

00:14:15.220 --> 00:14:17.944
So we'll talk about
initialising into AR.

00:14:17.944 --> 00:14:19.360
One of the first
things you can do

00:14:19.360 --> 00:14:22.740
is you can leverage standard
View in AR material icon

00:14:22.740 --> 00:14:24.435
so users, when
they see that, they

00:14:24.435 --> 00:14:25.810
know that when
they hit this icon

00:14:25.810 --> 00:14:27.520
they're going to
be going into AR.

00:14:27.520 --> 00:14:29.800
You can use this in
all the normal places

00:14:29.800 --> 00:14:31.420
that icons appear.

00:14:31.420 --> 00:14:35.119
Like floating action
button or on top of cards

00:14:35.119 --> 00:14:36.910
as the indicator that
you can actually view

00:14:36.910 --> 00:14:40.180
this object in 3D
in your environment.

00:14:40.180 --> 00:14:42.310
One of the next
things you'll see

00:14:42.310 --> 00:14:44.920
if you've been playing
with lots of AR apps

00:14:44.920 --> 00:14:48.190
is something that you might
not initially understand.

00:14:48.190 --> 00:14:50.110
I want to talk about
the concept of how

00:14:50.110 --> 00:14:53.600
understanding depth actually
requires some movement.

00:14:53.600 --> 00:14:55.850
So you'll see these
types of animations

00:14:55.850 --> 00:14:57.330
where I was trying
to get the user

00:14:57.330 --> 00:14:59.610
to move their phone around.

00:14:59.610 --> 00:15:02.210
So why is that
actually happening?

00:15:02.210 --> 00:15:06.037
Basically, we perceive depth
because we have two eyes,

00:15:06.037 --> 00:15:08.120
but we actually get a lot
of our depth information

00:15:08.120 --> 00:15:10.520
by actually sort of moving
our head around and being

00:15:10.520 --> 00:15:11.480
in the scene.

00:15:11.480 --> 00:15:15.317
And for the case of ARCore, most
current phones on the market

00:15:15.317 --> 00:15:16.900
only have a single
camera on the back,

00:15:16.900 --> 00:15:19.250
so the device only has one eye.

00:15:19.250 --> 00:15:21.350
And if it hasn't moved
yet, it doesn't necessarily

00:15:21.350 --> 00:15:22.550
know what's going on.

00:15:22.550 --> 00:15:25.610
So this is the first
thing the phone sees.

00:15:25.610 --> 00:15:28.430
It's going to say, all right,
well, that's interesting,

00:15:28.430 --> 00:15:32.430
but I don't totally have a sense
of where these objects are yet.

00:15:32.430 --> 00:15:34.380
And once you just move
just a little bit,

00:15:34.380 --> 00:15:35.600
then it becomes clear.

00:15:35.600 --> 00:15:37.850
As soon as you bring in a
little bit of movement, then

00:15:37.850 --> 00:15:40.910
you have enough of that data and
different angles on the scene

00:15:40.910 --> 00:15:43.760
that it can start to build up
a model of what it's seeing.

00:15:43.760 --> 00:15:46.054
So that's why we
have these animations

00:15:46.054 --> 00:15:48.220
at the start of the app to
try to get that movement,

00:15:48.220 --> 00:15:50.752
to try to get ARCore to
have enough information

00:15:50.752 --> 00:15:51.710
to recognize the scene.

00:15:54.084 --> 00:15:55.500
Next thing you
want to think about

00:15:55.500 --> 00:15:59.310
is deciding if users
are able to easily move

00:15:59.310 --> 00:16:01.110
the objects after
they've been placed

00:16:01.110 --> 00:16:03.450
or if these are really
more permanent objects.

00:16:03.450 --> 00:16:06.810
And there's, again,
no right answer here.

00:16:06.810 --> 00:16:09.180
So more persistent
objects might be

00:16:09.180 --> 00:16:13.150
like a game board or something
that itself takes input,

00:16:13.150 --> 00:16:16.860
but we want to recommend that
you use standard icons to set

00:16:16.860 --> 00:16:19.470
expectations for users so
they know as they're placing

00:16:19.470 --> 00:16:21.990
that object if that object
is going to move around

00:16:21.990 --> 00:16:24.300
later on as they swipe on it.

00:16:24.300 --> 00:16:26.680
So some examples of that.

00:16:26.680 --> 00:16:29.610
Let's say you are placing,
like, a city game.

00:16:29.610 --> 00:16:31.500
And here as you're
swiping on the city,

00:16:31.500 --> 00:16:33.125
you're actually going
to be interacting

00:16:33.125 --> 00:16:34.750
with the game itself.

00:16:34.750 --> 00:16:36.900
So we recommend using an
anchor icon for these more

00:16:36.900 --> 00:16:39.679
persistent object placements.

00:16:39.679 --> 00:16:41.220
And you still want
to enable the user

00:16:41.220 --> 00:16:44.670
to move the game board
later, perhaps through a menu

00:16:44.670 --> 00:16:47.030
screen or some type
of re-anchoring flow.

00:16:47.030 --> 00:16:48.810
So set expectations
ahead of time

00:16:48.810 --> 00:16:50.355
that the city actually
is going to be

00:16:50.355 --> 00:16:52.230
sort of stuck to the
ground there for a while

00:16:52.230 --> 00:16:53.940
as you interact with the game.

00:16:53.940 --> 00:16:56.640
Versus something like, say,
you're shopping for furniture

00:16:56.640 --> 00:16:58.710
and you're just placing
a chair on the scene.

00:16:58.710 --> 00:17:01.150
Here, the chair itself
has an interactive,

00:17:01.150 --> 00:17:03.700
so you can actually map
swipe gestures onto the chair

00:17:03.700 --> 00:17:05.160
and just easily move it around.

00:17:05.160 --> 00:17:07.619
So using the plus icon to
kind of set expectations ahead

00:17:07.619 --> 00:17:11.220
of time that you're not really
committing to exactly where

00:17:11.220 --> 00:17:12.670
you're placing this object.

00:17:12.670 --> 00:17:13.170
All right.

00:17:13.170 --> 00:17:15.050
So now that we're talking
about objects interactions,

00:17:15.050 --> 00:17:16.966
there's actually quite
a bit of details there.

00:17:19.160 --> 00:17:20.910
ALESHA UNPINGCO: So
now that we understand

00:17:20.910 --> 00:17:22.560
how to onboard
users, let's start

00:17:22.560 --> 00:17:24.690
thinking about how
users can interact

00:17:24.690 --> 00:17:28.002
with objects in their space.

00:17:28.002 --> 00:17:29.460
One of the things
that we challenge

00:17:29.460 --> 00:17:32.970
you to think about as designers
and developers in the community

00:17:32.970 --> 00:17:35.050
is thinking about
how to problems

00:17:35.050 --> 00:17:38.140
solve for user behavior,
even when it's unintentional.

00:17:38.140 --> 00:17:39.810
So one of the
things we recommend

00:17:39.810 --> 00:17:42.690
is giving users feedback
on object collisions.

00:17:42.690 --> 00:17:46.110
And this solves a huge problem
that we see in mobile AR

00:17:46.110 --> 00:17:48.520
where a user will be
moving the device around

00:17:48.520 --> 00:17:51.570
and once the device collides
with an object in AR,

00:17:51.570 --> 00:17:53.280
that object might
disappear and the user

00:17:53.280 --> 00:17:56.590
has no feedback in
terms of how to fix it.

00:17:56.590 --> 00:17:59.520
So what we recommend is we
recommend providing feedback

00:17:59.520 --> 00:18:02.580
in the form of camera filters
or special effects that

00:18:02.580 --> 00:18:05.490
helps users understand when
object collision is not

00:18:05.490 --> 00:18:07.590
an intended interaction.

00:18:07.590 --> 00:18:10.477
And this tends to
work really well.

00:18:10.477 --> 00:18:12.310
The other thing that
you want to think about

00:18:12.310 --> 00:18:14.590
is how to give users the
right type of feedback

00:18:14.590 --> 00:18:15.940
on object placement.

00:18:15.940 --> 00:18:17.830
And it's really
important in this case

00:18:17.830 --> 00:18:20.560
to think of each stage
of the user journey,

00:18:20.560 --> 00:18:23.410
even as it relates
to surface feedback.

00:18:23.410 --> 00:18:26.110
So surface feedback in
AR is very important

00:18:26.110 --> 00:18:28.660
because it helps users
understand how ARCore

00:18:28.660 --> 00:18:30.310
understands the environment.

00:18:30.310 --> 00:18:33.430
It gives the users a
sense of the surfaces

00:18:33.430 --> 00:18:35.500
that are available, the
range of the surfaces

00:18:35.500 --> 00:18:36.860
that are available.

00:18:36.860 --> 00:18:38.320
So we recommend
including feedback

00:18:38.320 --> 00:18:42.120
on the surfaces when the user
is placing objects in the scene.

00:18:42.120 --> 00:18:43.500
The other thing
that we recommend

00:18:43.500 --> 00:18:46.770
is maintaining the height
of the tallest surface

00:18:46.770 --> 00:18:51.310
as a user drags an object
from one surface to another.

00:18:51.310 --> 00:18:54.640
And once an object is
suspended in the air,

00:18:54.640 --> 00:18:58.180
make sure that you're always
communicating visual feedback

00:18:58.180 --> 00:18:59.320
on the dropdown point.

00:18:59.320 --> 00:19:02.050
That's way it's very clear
to the user at all times

00:19:02.050 --> 00:19:06.100
where the object
is going to land.

00:19:06.100 --> 00:19:08.570
And once an object is
placed into the scene,

00:19:08.570 --> 00:19:10.840
we also recommend
providing feedback

00:19:10.840 --> 00:19:13.630
in the form of visual
feedback on the surface,

00:19:13.630 --> 00:19:15.610
or even on the
object itself, just

00:19:15.610 --> 00:19:17.860
to communicate
the object's entry

00:19:17.860 --> 00:19:22.052
into the physical environment.

00:19:22.052 --> 00:19:24.510
So now that we know how to play
with objects in your scene,

00:19:24.510 --> 00:19:27.930
let's think about how an
object might get there.

00:19:27.930 --> 00:19:30.690
We recommend using gallery
interfaces in order

00:19:30.690 --> 00:19:33.060
to communicate to
users how they can

00:19:33.060 --> 00:19:35.850
take objects that live
on-screen and drag it out

00:19:35.850 --> 00:19:37.330
into their real world.

00:19:37.330 --> 00:19:39.480
So here you see we
have a gallery strip

00:19:39.480 --> 00:19:40.890
at the bottom bar.

00:19:40.890 --> 00:19:42.690
And as a user selects
an object, they're

00:19:42.690 --> 00:19:45.490
able to drag it
onto their space.

00:19:45.490 --> 00:19:48.330
And not only that, we're able
to support both selection

00:19:48.330 --> 00:19:51.690
states and also very familiar
gestures that allow users

00:19:51.690 --> 00:19:52.980
to manipulate the objects.

00:19:52.980 --> 00:19:56.790
So you can use pitch to
scale, twist to rotate,

00:19:56.790 --> 00:19:58.110
and even drag to move.

00:20:01.200 --> 00:20:05.070
And you see many examples in
our talk of how dragging objects

00:20:05.070 --> 00:20:08.170
is a very common and
expected behavior.

00:20:08.170 --> 00:20:10.920
But another alternative for
object selection and object

00:20:10.920 --> 00:20:13.270
movement is through a reticle.

00:20:13.270 --> 00:20:15.450
So reticle selection
is also very

00:20:15.450 --> 00:20:18.440
effective in that it allows
users to manipulate objects

00:20:18.440 --> 00:20:23.480
in their scene without covering
too much of the user's view.

00:20:23.480 --> 00:20:26.090
So we have an example here
where reticle selection

00:20:26.090 --> 00:20:28.100
is being used to select a rock.

00:20:28.100 --> 00:20:30.170
And that's triggered
via the Action button

00:20:30.170 --> 00:20:31.680
in the bottom right.

00:20:31.680 --> 00:20:33.950
But what it allows
users to do is

00:20:33.950 --> 00:20:36.800
that it allows users to
see the many surfaces that

00:20:36.800 --> 00:20:37.910
are available.

00:20:37.910 --> 00:20:39.285
And as you can
imagine, if a user

00:20:39.285 --> 00:20:41.270
is selecting an object
with their finger

00:20:41.270 --> 00:20:43.730
and dragging it
across the screen,

00:20:43.730 --> 00:20:46.220
you don't have as much
screen real estate

00:20:46.220 --> 00:20:48.590
to see all of the surfaces
that the user might

00:20:48.590 --> 00:20:50.770
want to place the object on.

00:20:50.770 --> 00:20:56.455
So reticle selection is
very, very impactful here.

00:20:56.455 --> 00:20:58.580
The other thing that you
get with reticle selection

00:20:58.580 --> 00:21:00.020
are raycasts.

00:21:00.020 --> 00:21:03.200
So raycasts are very
effective in helping

00:21:03.200 --> 00:21:05.510
the user get a sense of
the virtual weights applied

00:21:05.510 --> 00:21:08.360
to each of these objects.

00:21:08.360 --> 00:21:11.170
So here we have another
example where the user

00:21:11.170 --> 00:21:13.180
is able to pick up a feather.

00:21:13.180 --> 00:21:15.010
And once the father
is picked up,

00:21:15.010 --> 00:21:17.890
you'll notice that the raycast
has very little movement

00:21:17.890 --> 00:21:19.370
and very little bends on it.

00:21:19.370 --> 00:21:21.970
And for the most part,
it remains straight.

00:21:21.970 --> 00:21:24.610
However, when the user
picks up the rock,

00:21:24.610 --> 00:21:27.270
you're able to see a more
dramatic bend applied

00:21:27.270 --> 00:21:28.450
to the raycast.

00:21:28.450 --> 00:21:30.970
That signifies the
larger amount of mass,

00:21:30.970 --> 00:21:33.445
the heavier weight of
this object in relation

00:21:33.445 --> 00:21:34.070
to the feather.

00:21:38.830 --> 00:21:39.830
ALEX FAABORG: All right.

00:21:39.830 --> 00:21:42.250
So let's move on to the final
pillar, which is volumetric

00:21:42.250 --> 00:21:43.940
interface design.

00:21:43.940 --> 00:21:46.420
I think one of the first things
you want to consider here

00:21:46.420 --> 00:21:49.120
is that the phone is
the user's viewport.

00:21:49.120 --> 00:21:52.210
They're actually using the
phone to look out into the scene

00:21:52.210 --> 00:21:54.230
and see the application.

00:21:54.230 --> 00:21:56.260
And because of that,
you don't actually

00:21:56.260 --> 00:21:58.101
want to place a lot of
2D UI on the screen.

00:21:58.101 --> 00:22:00.100
That's actually going to
obscure the user's view

00:22:00.100 --> 00:22:01.940
onto your application.

00:22:01.940 --> 00:22:04.420
So showing a sort
of quick example.

00:22:04.420 --> 00:22:08.200
It's obviously a lot nicer to
have a limited set of controls.

00:22:08.200 --> 00:22:10.210
As soon as you start
to clutter the screen,

00:22:10.210 --> 00:22:12.168
it really gets in the
way of the user's ability

00:22:12.168 --> 00:22:13.295
to enjoy the AR app.

00:22:13.295 --> 00:22:14.920
And the sort of
counter-intuitive thing

00:22:14.920 --> 00:22:18.490
that we've even found is that
users are so focused on the app

00:22:18.490 --> 00:22:21.310
out in the world
that often designers

00:22:21.310 --> 00:22:24.520
will place a control
on a screen level

00:22:24.520 --> 00:22:26.875
because they want to draw
attention to that control,

00:22:26.875 --> 00:22:28.750
but it's actually having
the opposite effect.

00:22:28.750 --> 00:22:30.220
The users are
actually more focused

00:22:30.220 --> 00:22:32.671
out in the scene, so they'll
actually just miss controls

00:22:32.671 --> 00:22:33.920
that are drawn on the surface.

00:22:33.920 --> 00:22:35.362
Just kind of tune those out.

00:22:35.362 --> 00:22:37.570
So really, you want to be
very mindful of when you're

00:22:37.570 --> 00:22:39.861
making decisions on if you're
going to put a control up

00:22:39.861 --> 00:22:42.760
on the screen versus out
into the scene itself.

00:22:42.760 --> 00:22:45.790
For not just obscuring the view,
but also for discoverability

00:22:45.790 --> 00:22:47.470
of them finding that.

00:22:47.470 --> 00:22:50.140
And that's not to say that you
should never put a control up

00:22:50.140 --> 00:22:52.660
onto the screen, but you
want to be considering

00:22:52.660 --> 00:22:54.190
a few different metrics on it.

00:22:54.190 --> 00:22:57.990
So our recommendations is
that you only really leverage

00:22:57.990 --> 00:23:01.150
on-screen surface UI
for things like controls

00:23:01.150 --> 00:23:03.820
that have a very high
frequency of use or controls

00:23:03.820 --> 00:23:05.800
that require very fast access.

00:23:05.800 --> 00:23:07.734
So like a camera
shutter button is

00:23:07.734 --> 00:23:09.400
kind of the perfect
example of something

00:23:09.400 --> 00:23:12.114
that hits both criteria,
where in a camera

00:23:12.114 --> 00:23:13.780
you're obviously
taking lots of pictures

00:23:13.780 --> 00:23:16.600
and also you want to take
pictures very quickly.

00:23:16.600 --> 00:23:18.370
But imagine if
you're playing a game

00:23:18.370 --> 00:23:21.130
and there is some ability
to, like, fire or something.

00:23:21.130 --> 00:23:24.520
That would be a good candidate
for an onscreen control

00:23:24.520 --> 00:23:26.552
because you're both
hitting that button a lot

00:23:26.552 --> 00:23:28.760
and also you need to get to
that button very quickly.

00:23:31.370 --> 00:23:33.620
So we talked about
using the View in AR

00:23:33.620 --> 00:23:36.470
icon to get people into the
experience and transition

00:23:36.470 --> 00:23:38.900
from 2D into AR, but
also want to be very

00:23:38.900 --> 00:23:40.247
careful about the opposite.

00:23:40.247 --> 00:23:42.830
Of when users are now in AR and
they're actually transitioning

00:23:42.830 --> 00:23:44.970
back to a 2D experience.

00:23:44.970 --> 00:23:48.170
And one thing we found is
that if the user is not

00:23:48.170 --> 00:23:51.470
initiating that action to go
back into a 2D experience,

00:23:51.470 --> 00:23:54.020
it can actually be pretty
obnoxious because they're so

00:23:54.020 --> 00:23:55.650
focused out in the scene.

00:23:55.650 --> 00:23:57.710
So the user's viewing
the application,

00:23:57.710 --> 00:23:59.420
and then suddenly
a 2D UI shows up

00:23:59.420 --> 00:24:01.190
and blocks the entire viewport.

00:24:01.190 --> 00:24:03.020
That can be pretty annoying.

00:24:03.020 --> 00:24:06.860
So depending on even
if the user is exiting,

00:24:06.860 --> 00:24:09.290
or they're customizing
an item in the scene,

00:24:09.290 --> 00:24:12.400
or whatever the use case
is, you want that flow back

00:24:12.400 --> 00:24:15.410
to 2D screen level UI that's
covering most of the screen

00:24:15.410 --> 00:24:17.390
to be something that the
user's actively doing,

00:24:17.390 --> 00:24:19.181
and not something that
happens by surprise.

00:24:22.760 --> 00:24:25.830
So a common thing with
mobile application design

00:24:25.830 --> 00:24:27.580
is you want to maintain
touch targets that

00:24:27.580 --> 00:24:29.620
are about the size
of the user's finger.

00:24:29.620 --> 00:24:31.420
For 3D, this is, of
course, a bit harder

00:24:31.420 --> 00:24:34.760
because the object could be any
distance away from the user.

00:24:34.760 --> 00:24:38.050
So quick example of some
things you can do here.

00:24:38.050 --> 00:24:39.580
Here we have two tennis balls.

00:24:39.580 --> 00:24:41.080
And when you tap
on the tennis ball,

00:24:41.080 --> 00:24:44.080
confetti fires out of
it because in AR you

00:24:44.080 --> 00:24:45.850
can do whatever you want.

00:24:45.850 --> 00:24:48.400
And we're showing
the touch target size

00:24:48.400 --> 00:24:49.660
with the dotted line.

00:24:49.660 --> 00:24:51.340
So one of these tennis
balls is actually

00:24:51.340 --> 00:24:53.440
maintaining a reasonable
touch target size

00:24:53.440 --> 00:24:56.130
as it gets farther away,
whereas the other one is not.

00:24:56.130 --> 00:24:59.566
It's just mapping to the
virtual size of the object.

00:24:59.566 --> 00:25:00.940
And, of course,
it's a lot easier

00:25:00.940 --> 00:25:03.398
to interact with the one that
is maintaining a large target

00:25:03.398 --> 00:25:03.940
size.

00:25:03.940 --> 00:25:06.430
We've also found
for interfaces where

00:25:06.430 --> 00:25:09.370
you're manipulating objects,
if you're not doing tricks

00:25:09.370 --> 00:25:11.170
to kind of maintain
target size, you often

00:25:11.170 --> 00:25:14.754
get these problems where you
swipe an object very far away,

00:25:14.754 --> 00:25:16.920
and then it's actually hard
to bring the object back

00:25:16.920 --> 00:25:19.240
because it's now
such a small target.

00:25:19.240 --> 00:25:21.670
So you have to actually walk
over to the object to get it,

00:25:21.670 --> 00:25:23.664
which is a little
bit frustrating.

00:25:23.664 --> 00:25:25.330
Maybe you could say
it's very immersive,

00:25:25.330 --> 00:25:28.279
but either way, it's nicer
to be able to actually bring

00:25:28.279 --> 00:25:29.320
the objects back as well.

00:25:32.050 --> 00:25:36.230
So on the whole, you want to
be thinking about what controls

00:25:36.230 --> 00:25:38.730
are going to be on the screen
versus what controls are going

00:25:38.730 --> 00:25:39.900
to be out in the scene.

00:25:39.900 --> 00:25:42.180
And kind of a mantra
that the team has had

00:25:42.180 --> 00:25:45.537
is to say, you know,
scene over screen.

00:25:45.537 --> 00:25:48.120
Obviously, we talked about sort
of battery cases of when you'd

00:25:48.120 --> 00:25:49.950
want to put something
on a screen level,

00:25:49.950 --> 00:25:52.980
but I found that it's many
people's initial reaction

00:25:52.980 --> 00:25:55.230
to design everything
for the screen level

00:25:55.230 --> 00:25:57.040
because that's the
type of design work

00:25:57.040 --> 00:25:58.911
we've been doing
for 2D applications,

00:25:58.911 --> 00:26:00.660
but you really want
to start thinking more

00:26:00.660 --> 00:26:04.410
about volumetric UI and having
your UI out into the scene

00:26:04.410 --> 00:26:05.430
itself.

00:26:05.430 --> 00:26:07.969
So give a quick example of this.

00:26:07.969 --> 00:26:10.260
This is actually one of the
demos that ships with scene

00:26:10.260 --> 00:26:11.160
form.

00:26:11.160 --> 00:26:13.770
It's a solar system simulator.

00:26:13.770 --> 00:26:16.477
Loads of fun.

00:26:16.477 --> 00:26:18.060
Also, it's missing
a planet right now.

00:26:18.060 --> 00:26:20.630
We did fix that for the
public release, in case

00:26:20.630 --> 00:26:22.380
you notice that in the video.

00:26:22.380 --> 00:26:26.844
But imagine now you need
to design the UI for this.

00:26:26.844 --> 00:26:28.260
So a lot of people
would initially

00:26:28.260 --> 00:26:30.800
think, oh, I'll have a
gear menu up in the corner.

00:26:30.800 --> 00:26:32.862
That will throw something
up on the screen.

00:26:32.862 --> 00:26:34.320
You know, the
problem there is then

00:26:34.320 --> 00:26:36.720
you're not going to be able
to sort of be as immersed

00:26:36.720 --> 00:26:39.700
in the simulation itself as
you're interacting with it.

00:26:39.700 --> 00:26:41.880
So an alternative
way of doing that

00:26:41.880 --> 00:26:45.840
is actually leverage these
objects on the scene itself.

00:26:45.840 --> 00:26:47.580
So as you're tapping
on planets, you'll

00:26:47.580 --> 00:26:49.750
get feedback on
what planet that is,

00:26:49.750 --> 00:26:53.610
which is nice for
educational use cases.

00:26:53.610 --> 00:26:57.427
And then in this particular
demo, when you tap on the sun,

00:26:57.427 --> 00:26:59.760
that's how you start to control
the entire solar system.

00:27:03.830 --> 00:27:06.340
So here the user is
tapping on the sun,

00:27:06.340 --> 00:27:07.800
and that brings up a panel.

00:27:07.800 --> 00:27:09.800
This is actually
an Android view.

00:27:09.800 --> 00:27:12.460
So in scene form, you can map
just standard Android views

00:27:12.460 --> 00:27:13.630
into AR.

00:27:13.630 --> 00:27:16.360
And here you have
controls like changing

00:27:16.360 --> 00:27:18.580
the orbit speed or
the rotational speed

00:27:18.580 --> 00:27:19.969
of the planets themselves.

00:27:19.969 --> 00:27:21.760
And it's really nice
to be able to interact

00:27:21.760 --> 00:27:24.130
with these objects
in the scene, and not

00:27:24.130 --> 00:27:27.310
to have that sort of sudden
loss of being able to see things

00:27:27.310 --> 00:27:31.690
and being sort of taken
out of the experience.

00:27:31.690 --> 00:27:34.540
And that kind of brings me
to my final point, which

00:27:34.540 --> 00:27:36.780
is this idea of AR presence.

00:27:36.780 --> 00:27:40.660
So we'd actually seen this
coming up in user research

00:27:40.660 --> 00:27:43.900
studies where people would
be looking through a phone

00:27:43.900 --> 00:27:47.080
and then they would kind of
look outside of the phone

00:27:47.080 --> 00:27:49.569
to see that something
was placed correctly.

00:27:49.569 --> 00:27:51.860
And then, of course, we're
recording and so they laugh.

00:27:51.860 --> 00:27:52.600
And they're like, oh, yeah.

00:27:52.600 --> 00:27:52.930
Right.

00:27:52.930 --> 00:27:53.500
Of course.

00:27:53.500 --> 00:27:55.540
I can only see it
through the phone.

00:27:55.540 --> 00:27:58.240
And we always laughed
when we saw this happen.

00:27:58.240 --> 00:28:01.690
And then I was
testing out an app.

00:28:01.690 --> 00:28:04.000
It was these sort of
plastic interlocking bricks

00:28:04.000 --> 00:28:06.250
and I had instructions
of what I was building,

00:28:06.250 --> 00:28:08.260
and I was playing
it for a long time.

00:28:08.260 --> 00:28:11.530
And at one moment I looked over
to see the instruction book,

00:28:11.530 --> 00:28:12.770
and it wasn't there.

00:28:12.770 --> 00:28:15.080
And I had the reaction
that you normally

00:28:15.080 --> 00:28:18.230
have if, like, an object
just disappears in real life.

00:28:18.230 --> 00:28:21.000
And, of course, then immediately
I'm like, oh, that's silly.

00:28:21.000 --> 00:28:21.500
Yeah.

00:28:21.500 --> 00:28:22.270
It's AR.

00:28:22.270 --> 00:28:25.150
But I was so immersed in the
experience and the application,

00:28:25.150 --> 00:28:27.640
and I'd been playing it for
so long that I was no longer

00:28:27.640 --> 00:28:30.922
kind of mentally tracking what
was real and what was virtual.

00:28:30.922 --> 00:28:33.130
And I was just sort of buying
that the experience was

00:28:33.130 --> 00:28:33.910
happening.

00:28:33.910 --> 00:28:35.410
And you're going to start
to have this experience

00:28:35.410 --> 00:28:37.630
as well as you're interacting
with these applications.

00:28:37.630 --> 00:28:39.610
And I would say that's the
moment when your application is

00:28:39.610 --> 00:28:41.672
performing really,
really well because it

00:28:41.672 --> 00:28:43.630
means that the user is
just completely immersed

00:28:43.630 --> 00:28:45.995
and engrossed in
the application.

00:28:45.995 --> 00:28:47.620
So if you ever have
these moments where

00:28:47.620 --> 00:28:50.860
people are looking at a
vase through their phone

00:28:50.860 --> 00:28:53.290
and then they look down and
it disappears and they react,

00:28:53.290 --> 00:28:53.920
that's good.

00:28:53.920 --> 00:28:55.870
That means the app
is performing great.

00:28:58.955 --> 00:29:00.080
ALESHA UNPINGCO: All right.

00:29:00.080 --> 00:29:03.560
So we've gone through the
five pillars of AR design,

00:29:03.560 --> 00:29:05.690
which, again, include
understanding the user's

00:29:05.690 --> 00:29:08.390
environment, planning
for users' movement,

00:29:08.390 --> 00:29:11.210
onboarding users by
initialising smoothly,

00:29:11.210 --> 00:29:13.700
designing natural
object interactions,

00:29:13.700 --> 00:29:17.750
and balancing on-screen and
volumetric interface design.

00:29:17.750 --> 00:29:19.580
And again, this
framework, we believe,

00:29:19.580 --> 00:29:21.920
will help anybody get
started with creating apps

00:29:21.920 --> 00:29:25.710
that everybody can enjoy.

00:29:25.710 --> 00:29:27.380
So we have a quick
video for you.

00:29:27.380 --> 00:29:30.680
Some amazing content that
many designers and developers

00:29:30.680 --> 00:29:33.020
like yourselves from the
community have created.

00:29:33.020 --> 00:29:33.770
We hope you enjoy.

00:29:33.770 --> 00:29:37.074
[MUSIC PLAYING]

00:33:27.270 --> 00:33:29.220
We're very happy to
share with you everything

00:33:29.220 --> 00:33:31.050
that we had today,
and we look forward

00:33:31.050 --> 00:33:32.400
to seeing what you create.

00:33:32.400 --> 00:33:35.520
Please fill out our survey and
check out our resources online.

00:33:35.520 --> 00:33:36.370
Thank you.

00:33:36.370 --> 00:33:40.880
[MUSIC PLAYING]

