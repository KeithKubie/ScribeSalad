WEBVTT
Kind: captions
Language: en

00:00:03.669 --> 00:00:07.309
&gt;&gt;OSINGA:
Good, uh, afternoon, um, you're here at the

00:00:07.309 --> 00:00:14.309
Waving across the Web talk, my name is uh,
Douwe Osinga, this is Dhanji, we're both engineers

00:00:14.519 --> 00:00:21.100
on the API team, and we want to talk to you
today about Wave, and what you can do with

00:00:21.100 --> 00:00:28.100
it outside of Wave. Um, just a brief refresher
on, uh, Wave, getting stuff done with groups

00:00:28.630 --> 00:00:35.460
of people is our new slogan. Um, we have the,
the, the Wave panel, on the, on the right

00:00:35.460 --> 00:00:41.639
side, and um, the inbox on the, on the left
side. Our talk is mostly about what you can

00:00:41.639 --> 00:00:46.039
do with Wave outside of this whole thing,
so, uh, in as far as you've seen the Wave

00:00:46.039 --> 00:00:53.039
client, it will be mostly, uh, the Wave panel
itself. Yes, as with all sessions there is

00:00:53.479 --> 00:00:58.999
a Live Waving session, a session with this
if you can follow this link here, you'll on

00:00:58.999 --> 00:01:04.710
land there, you can ask questions in the embedded
gidget there. You can start commenting on

00:01:04.710 --> 00:01:09.880
things at the bottom, and we have somebody
in the audience who's actually typing in what

00:01:09.880 --> 00:01:16.880
I'm saying.
So, what are we talking about today. Um, last

00:01:16.969 --> 00:01:23.219
year when we announced Wave, we announced
our APIs too and they were mostly focused

00:01:23.219 --> 00:01:30.219
on extensions APIs, so there were things that
you can do to make the Wave experience richer,

00:01:30.520 --> 00:01:35.259
so that's on one hand Robots and on the other
hand Gadgets. If you want to learn more about

00:01:35.259 --> 00:01:41.299
that, then, well, partly you missed your chance,
because the talk about how you built extensions

00:01:41.299 --> 00:01:48.130
was uh, this afternoon, but tomorrow there's
uh, one that goes deeper into the Robot API

00:01:48.130 --> 00:01:55.130
so if you want to learn that, make sure to
not miss that one. This year, we um, have

00:01:55.390 --> 00:02:02.390
expanded our APIs and a lot of those APIs
are around using the Wave API outside of Wave

00:02:04.139 --> 00:02:09.710
so we already had an embedding client but
uh we've expanded what you can do with it

00:02:09.710 --> 00:02:16.710
and Dhanji will talk more about that. Well,
look at that. Um, I have an extra slide. So,

00:02:20.819 --> 00:02:25.840
Dhanji will talk more about the, how we use
the embedded client and how you can use it

00:02:25.840 --> 00:02:32.840
for commenting on the Web. I'll then talk
some more about Wave This, which is a content-sharing

00:02:33.340 --> 00:02:40.340
mechanism that we have set up with some interesting
features, how you can use the role of API

00:02:40.680 --> 00:02:47.680
to display data from, from Wave on outside
of the Wave client and I'll introduce the

00:02:49.959 --> 00:02:55.760
Wave Data APIs which we think are fairly exciting,
because they allow you as the developer to

00:02:55.760 --> 00:03:02.760
uh, get direct access to the users Wave data
and it allows you to build anything from notifiers

00:03:03.599 --> 00:03:10.599
in Chrome to lightweight clients for platforms
like Android. Now, I think.

00:03:13.060 --> 00:03:20.060
&gt;&gt;DHANJI:
Okay, hello everyone. Um, so I'm going to

00:03:20.680 --> 00:03:26.560
talk to you today about embedding Waves. Up
until now we've had this concept of: you come

00:03:26.560 --> 00:03:31.849
to Google Wave, you open your inbox, you open
your inbox, you look around to see what's

00:03:31.849 --> 00:03:35.909
changed, then, you interact with other people
and then you go away. Embedding is sort of

00:03:35.909 --> 00:03:42.019
the reverse of this. We take Google Wave and
bring it to you. So, you embed Google Waves

00:03:42.019 --> 00:03:49.019
out there, in your own websites, in your own
blogs, and other pages that you use. So, to

00:03:49.409 --> 00:03:55.680
start with, let's look at a couple of use
cases for where you might want to do this.

00:03:55.680 --> 00:04:00.900
So, commenting is quite a popular meme on
the web. You've got blogs that have comments,

00:04:00.900 --> 00:04:07.290
news articles have comments, just about any
kind of article that describes a particular

00:04:07.290 --> 00:04:12.650
topic has a comment thread associated with
it where readers can come in and post their

00:04:12.650 --> 00:04:17.519
thoughts. This has sort of been around for
about fifteen years now, and it's really starting

00:04:17.519 --> 00:04:22.370
to show signs of wear.
Traditional commenting is slow because you

00:04:22.370 --> 00:04:26.940
have to post something and then come back
a couple of hours later and see if anybody's

00:04:26.940 --> 00:04:31.440
replied, it's all totally asynchronous you
know, it's kinda like sending emails to each

00:04:31.440 --> 00:04:36.520
other in a public forum. They're generally
linearly structured, so one comment comes

00:04:36.520 --> 00:04:43.130
after another, although some commenting systems
out there allow you to do slightly better

00:04:43.130 --> 00:04:47.910
structuring for replies, and many of them
don't allow you to make any corrections or

00:04:47.910 --> 00:04:54.300
delete comments if you uh, had second thoughts
about them. And of course there's no great

00:04:54.300 --> 00:05:00.980
way to put in any rich comment, or put in
any rich content, rather, into these comments,

00:05:00.980 --> 00:05:06.860
without linking offsite. And that's quite
a poor experience for someone who's reading

00:05:06.860 --> 00:05:12.570
through a list of comments and wants to kind
of get the full experience and wants to get

00:05:12.570 --> 00:05:18.500
the full experience of the comment and everything
it's talking about without leaving the conversation.

00:05:18.500 --> 00:05:23.360
So, all of this isn't a great way to have
a conversation about a topic. It's kind of

00:05:23.360 --> 00:05:27.650
worked well so far, but we believe that there's
a better way.

00:05:27.650 --> 00:05:32.490
So, Wave is a commenting system instantly
has some benefits, right? Because everything

00:05:32.490 --> 00:05:38.140
happens in real time, you can build a conversation
just as you would in a room, sitting around

00:05:38.140 --> 00:05:44.750
with a bunch of friends. So when you say something
about, about the article that the comment

00:05:44.750 --> 00:05:49.390
thread is in, someone can jump in immediately
and reply to that. And you can reply to that

00:05:49.390 --> 00:05:54.840
reply, so forth. And it's all instantaneous;
it's a real conversation taking place. You

00:05:54.840 --> 00:05:59.060
can of course edit the existing comments you
can edit even other people's comments, so,

00:05:59.060 --> 00:06:04.410
I know there's some uh, grammar freaks out
there that like to correct people's grammar,

00:06:04.410 --> 00:06:10.660
so you can get in there and make those corrections.
Other people can edit your comments, and maybe

00:06:10.660 --> 00:06:17.340
add some more context around what you were
saying. And all of this is available via playback,

00:06:17.340 --> 00:06:23.170
so you don't lose any of the history of the
conversation as you're going through it. And

00:06:23.170 --> 00:06:26.690
that's a real good saving.
So, all this makes for a real good conversation

00:06:26.690 --> 00:06:32.300
rather than this asynchronous mass of messages
that are being posted and glued together in

00:06:32.300 --> 00:06:37.460
a string. And of course, the real benefit
is that you can embed rich content. Everything

00:06:37.460 --> 00:06:44.460
from videos and images to maps and of course
Gadgets which is one of our really cool features

00:06:45.590 --> 00:06:52.590
that allows you to do things like take spot-polls
or run/ insert drawing that people can interactively

00:06:53.050 --> 00:06:58.490
build in your comment thread.
Alright, so let's move onto another use case,

00:06:58.490 --> 00:07:04.800
actually before that, this is a quick example
of a comment thread, of basically a Wave with

00:07:04.800 --> 00:07:10.120
a lot of activity on it. You can see that
there's a base document that's right in the

00:07:10.120 --> 00:07:16.910
back with, um, some pictures on it and there's
people replying in line to the things that

00:07:16.910 --> 00:07:22.900
they want to make a point about. And the colored
blocks that you see there are the cursors

00:07:22.900 --> 00:07:28.370
of the various people actually replying in
real time. And it is really quite exciting

00:07:28.370 --> 00:07:35.370
to kinda see this conversation unfold.
Ok, so the other terrific use-case for embedded

00:07:36.770 --> 00:07:43.770
Waves is an Event. So, like you had the keynote
this morning, or you'll see the second keynote

00:07:44.360 --> 00:07:50.040
tomorrow with the two big surprises they have
planned, you can sort of broadcast what's

00:07:50.040 --> 00:07:57.040
happening in real time, using a Wave. Traditionally,
you'd have a techjournalist or reporter who'd

00:07:57.210 --> 00:08:02.710
come in, sort of an exclusive set of people
that get to sit right up front, they digest

00:08:02.710 --> 00:08:07.920
everything that's being said, take, they get
like an official set of screenshots that they

00:08:07.920 --> 00:08:13.060
can publish, and then you get all this information
packaged in and put out to you on their blog,

00:08:13.060 --> 00:08:17.680
maybe four or five hours later. And it's not
really a great experience because you don't

00:08:17.680 --> 00:08:23.130
get the feel of what's going on live. Um,
there are of course multiple competing sources

00:08:23.130 --> 00:08:28.670
for this kind of thing, and each blogger or
techjournalist has their own perspective and

00:08:28.670 --> 00:08:34.620
uh, you have to kind of read all of them to
get a comprehensive view of what's going on.

00:08:34.620 --> 00:08:40.649
And of course there's no reader interaction,
right? It's completely one-way; it's all one-directional.

00:08:40.649 --> 00:08:45.350
It's whatever the reporter or the journalist
thinks, uh, that you're going to, that you're

00:08:45.350 --> 00:08:50.689
going to get. You can't ask them questions,
you can't sort of point out mistakes they've

00:08:50.689 --> 00:08:55.790
made, and if they've forgotten something,
that's lost forever, that information's not

00:08:55.790 --> 00:09:01.920
going to happen. Twitter and Buzz have become
popular substitutes for broadcasting things

00:09:01.920 --> 00:09:07.540
that have become real-time Events. Uh, so
when the iPad launched, there was all kinds

00:09:07.540 --> 00:09:14.540
of crazy activity on Twitter and Buzz. So,
the, it's clearly time for something better.

00:09:16.879 --> 00:09:22.120
We call this Live Waving, and you would have
seen earlier there's a link where there's

00:09:22.120 --> 00:09:29.120
a Live Wave for this very talk, you can kinda
see how this works. But what Live Waving is,

00:09:29.149 --> 00:09:36.149
is bringing the realtime aspect of an Event
to users. So, a blog journalist or a, sorry,

00:09:36.879 --> 00:09:41.470
a techjournalist or a blogger can get on there
and start putting in what they, what their

00:09:41.470 --> 00:09:47.410
thoughts are, what their observations are
and people can jump on there along with everyone

00:09:47.410 --> 00:09:54.410
else, and ask questions or put in their perspective,
and multiple journalists or multiple sources,

00:09:54.610 --> 00:09:59.790
are no longer singularly authoritative, right?
LIke, if you disagree with something they're

00:09:59.790 --> 00:10:06.790
saying, you can kinda go in there, point that
out. And uh, and this takes kind of what the

00:10:07.399 --> 00:10:14.399
Twitter users and the Buzz users have done
organically and like brings it into one comprehensive,

00:10:14.810 --> 00:10:20.749
robust platform. And we think that live waving
is really a quite used case for Wave.

00:10:20.749 --> 00:10:25.089
Of course the great thing about Live Waving
is that because it's a regular Wave, you can

00:10:25.089 --> 00:10:30.740
pull in all kinds of rich content. So you
can put in screenshots of the great new anndroid

00:10:30.740 --> 00:10:37.740
handset, or uh video of it in action or, whatever
that might be. Ok, so what is an embedded

00:10:39.569 --> 00:10:46.569
Wave? An embedded Wave is just the Wave client,
the normal regular Wave client, without everything

00:10:47.249 --> 00:10:54.249
outside the Wave. So, it's just that little
bit that contains the Wave and its content.

00:10:55.810 --> 00:11:01.860
You can embed that in any website; be it a
small snippet of JavaScript, and this is exactly

00:11:01.860 --> 00:11:08.499
how YouTube works with their little snippet
of HTML which you can use to embed the flash

00:11:08.499 --> 00:11:15.499
player. So this is what it looks like; there's
a Google common JavaScript loader interface

00:11:16.069 --> 00:11:20.610
that we use, it's just a simple script tag
that you put in the top of your page, and

00:11:20.610 --> 00:11:25.819
then that allows you to call the Google dot
load method, and we see Google dot load, Wave

00:11:25.819 --> 00:11:30.720
One, which means gimme the first version of
the Wave API. And then we construct ourselves

00:11:30.720 --> 00:11:37.410
a Wave panel, using Google dot Wave dot Wave
panel, and uh we point it to a div on the

00:11:37.410 --> 00:11:41.699
page, so you can just create any div on the
page with a width and height that, that's

00:11:41.699 --> 00:11:47.170
to your preference, and then point the Wave
panel to it. Finally, we call Load Wave with

00:11:47.170 --> 00:11:54.170
the WaveID, which tells the script to go and
pick up particular Wave to stick in there.

00:11:54.300 --> 00:12:01.300
So, here's an example a screenshot of an actual
embedded Wave and this comes from Mashables,

00:12:01.509 --> 00:12:07.319
the Wave API challenge that they ran last
month; very successful challenge that they

00:12:07.319 --> 00:12:12.230
ran. And what they did was they ran this contest
where they got people to write great extensions

00:12:12.230 --> 00:12:18.740
for Wave, and they disseminated all the information
by putting it in a Wave and allowing people

00:12:18.740 --> 00:12:25.740
to look at it in a read-only fashion. And
this worked out really well. And of course

00:12:25.889 --> 00:12:30.490
the UI of the embedded Wave is pretty easily
customized. I said earlier you can specify

00:12:30.490 --> 00:12:36.189
the width and the height of the div, and the
Wave sort of expands to fill that region correctly,

00:12:36.189 --> 00:12:40.730
but you can also add some CSS properties.
You can change the color of the font, you

00:12:40.730 --> 00:12:46.019
can change the background color, you can set
whether or not there's a header there. Um,

00:12:46.019 --> 00:12:52.930
so, in this example there is no header, but
earlier in this example, with a full Wave

00:12:52.930 --> 00:12:58.129
client, you kinda see the list of participants,
and a toolbar underneath. And you can get

00:12:58.129 --> 00:13:03.680
that as well.
Ok, so let's quickly look at a demo of this

00:13:03.680 --> 00:13:10.680
in action. And this is just me with the Wave
client open, and uh, this is a webpage and

00:13:18.910 --> 00:13:24.920
I've stuck that snippet of JavaScript that
I showed you earlier, into this HTML page,

00:13:24.920 --> 00:13:29.709
there's not a whole lot to it, it's like a
fake blog that I came up with, um and this

00:13:29.709 --> 00:13:36.709
bit right here is the WaveID that I've pulled
out of the normal Wave client by using the

00:13:37.180 --> 00:13:44.119
link-to-Wave feature. So you see here at the
bottom, there's a little WaveID, and you can

00:13:44.119 --> 00:13:51.119
copy and paste that. In here. And call load
Wave on it, to bring the Wave up. Alright.

00:14:01.089 --> 00:14:05.759
So let's see this in action... So here we
go. So this is my little bog, and then I embedded

00:14:05.759 --> 00:14:11.709
a Wave in it, and remember that this is a
fully functional first-class entity, so this

00:14:11.709 --> 00:14:16.939
is a real Wave, and you can reply to it and
do all the things that you do in a normal

00:14:16.939 --> 00:14:23.720
Wave. So, for instance, let's say that I was
a random reader of Blogtastic, I could come

00:14:23.720 --> 00:14:30.720
in here, and put in a reply.
[pause]

00:14:31.459 --> 00:14:38.459
And then this reply shows up here. And of
course, I can reply the other way, and that

00:14:42.079 --> 00:14:48.430
shows up here too. And of course it has all
the other features of Wave, like adding Gadgets,

00:14:48.430 --> 00:14:55.430
and images, and video. Okay, let's get back
to our demo; our presentation. Okay. So, this

00:14:58.079 --> 00:15:03.869
other cool feature that we rolled out recently
was allowing people to look at an embedded

00:15:03.869 --> 00:15:10.869
Wave even if they didn't have a Google Wave
account. So, up until now if you came across

00:15:11.160 --> 00:15:16.430
an embedded Wave in the wild, you have to
be logged in to be able to see the content.

00:15:16.430 --> 00:15:21.100
This makes, makes for kind of poor experience
if you know you just haven't logged in or

00:15:21.100 --> 00:15:24.709
your session's expired or something like that.
So we've added this thing called anonymous

00:15:24.709 --> 00:15:30.600
embed, which allows any public Wave, so any
Wave with a public participant on it, to be

00:15:30.600 --> 00:15:35.929
viewed by just about anyone at all. And you
can kinda see in the top right there's this,

00:15:35.929 --> 00:15:41.040
instead of the username, you have anonymous,
and there's a link to log in. And uh, as of

00:15:41.040 --> 00:15:45.980
today we have open signup, so, even if you
didn't have Google Wave invite, you can click

00:15:45.980 --> 00:15:49.529
log in and you can sign yourself up. And that's
terrific.

00:15:49.529 --> 00:15:53.639
And this is exactly what Mashable uh, did,
and they've been able to take advantage of

00:15:53.639 --> 00:15:58.920
the fact that anyone can now come in and look
at a Wave and then go ahead, interact with

00:15:58.920 --> 00:16:05.920
it, if they want to. So this feature that
I've just demonstrated is slightly clunky

00:16:09.910 --> 00:16:15.790
for a use-case where you want to embed Waves
in several websites, right? So, if I just

00:16:15.790 --> 00:16:20.600
wanted to do it in one thing, in one Wave,
in one page, that's not a huge problem. I

00:16:20.600 --> 00:16:27.600
can copy/paste the WaveID in my uh, HTML,
like I did here, and everything's fine. But

00:16:28.559 --> 00:16:34.220
if I want to do, say, five or ten of these,
then it's quite cumbersome to go through and

00:16:34.220 --> 00:16:39.869
copy and paste and pre-create all of these
Waves. So we came up with this thing called

00:16:39.869 --> 00:16:45.230
myEmbed. It's just a little name I have for
it, it's not anything official. And what you

00:16:45.230 --> 00:16:52.230
do with myEmbed is instead of having a WaveID
you register an owner. So if I'm the webmaster,

00:16:52.499 --> 00:16:59.499
my name is Champ, I write my owner address
in the little snippet of JavaScript itself.

00:17:00.480 --> 00:17:06.880
So, now when the embed Wave comes up, it looks
to make sure that you're the one who's actually

00:17:06.880 --> 00:17:12.940
trying to view this Wave. And if no one's
seen it before, it creates the Wave if it's

00:17:12.940 --> 00:17:18.160
not there. And the way in which it does this,
and completely skirts around the issue of

00:17:18.160 --> 00:17:23.060
the WaveID, is by looking at the containing
page's URL. So we take the containing page's

00:17:23.060 --> 00:17:28.130
URL and convert it into a WaveID internally,
and that's all sort of hidden from you, so

00:17:28.130 --> 00:17:34.260
you don't' have to worry about it. And make
sure that you are the same user as the one

00:17:34.260 --> 00:17:40.640
specified in the owner address. So, that's
fairly nice. And of course this means that

00:17:40.640 --> 00:17:47.220
you can just take this little JavaScript snippet
and stick it in all of your WebPages and you

00:17:47.220 --> 00:17:50.620
just need to visit your WebPages one by one
and make sure that they're working, and the

00:17:50.620 --> 00:17:55.940
Waves get created for you automatically. Ok,
so uh, the simplest way to get going with

00:17:55.940 --> 00:18:00.590
embedded Waves is to go to the Google Web
Elements website.

00:18:00.590 --> 00:18:06.340
The Google Web Elements website is just a
simple way to look at all of our APIs and

00:18:06.340 --> 00:18:12.290
sort of play with them, and get helloworlds
going with them. And you can find that at

00:18:12.290 --> 00:18:19.290
google.com/webelements. And, we're right at
the bottom there, at slash Wave. Ok, so uh,

00:18:20.270 --> 00:18:26.060
Douwe's going to show you some cool extensions,
and things we can do with Robots, and there's

00:18:26.060 --> 00:18:32.270
another talk tomorrow about our new Robot
API and our liberated Robots, so Robots can

00:18:32.270 --> 00:18:39.270
now run on any domain, not just uh, on an
app engine. So what I did, just before this

00:18:40.240 --> 00:18:47.240
talk, was wrote up a little lightweight embedded
Wave client…let me show you this in a second.

00:18:55.980 --> 00:19:00.820
And I did this purely using our Robot API.
So this is a real Wave and I pointed it to

00:19:00.820 --> 00:19:07.820
a Wave ID and the server's running on my desktop,
on my laptop, sorry. And it loaded instantly.

00:19:10.230 --> 00:19:17.230
So it tells you that you can pretty much do
everything that we do with the regular Wave

00:19:18.020 --> 00:19:25.020
client, with our APIs. And that's really our
goal, is to power you guys. Ok! Thank you.

00:19:25.640 --> 00:19:27.360
[Applause]

00:19:27.360 --> 00:19:34.360
&gt;&gt;OSINGA:
If you thought this was all bad news, I have

00:19:36.090 --> 00:19:43.090
more slides. So Wave This! Um, a lot of services
have this dig/publish/start with it, a little

00:19:48.830 --> 00:19:52.730
button on the page, and if you click it you
can share whatever URL you came from with

00:19:52.730 --> 00:19:58.380
your friends through some mechanism. And in
fact, this goes back to even the Mailto link

00:19:58.380 --> 00:20:03.770
that allows you to do things like that. And
of course, we wanted to have one too, and

00:20:03.770 --> 00:20:09.350
it works exactly as you um, expect it to work.
You click the thing. It gives you a little

00:20:09.350 --> 00:20:15.950
uh, little in-between screen, to confirm that
you actually want to do this, to avoid you

00:20:15.950 --> 00:20:21.110
know, people to spam you that way, and it
creates a Wave with a link back to that page

00:20:21.110 --> 00:20:28.030
that you came from. And you can add your friends,
and you can start discussing what's on this

00:20:28.030 --> 00:20:32.580
thing. And, um…there's a bunch of parameters
that you can set, of course, the URL, if you

00:20:32.580 --> 00:20:39.580
don't set the URL it will um, it will take
the refer URL so the same way the My Embed

00:20:40.920 --> 00:20:45.580
trick, you don't actually have to specify
URL you can just drop the same thing. Um,

00:20:45.580 --> 00:20:50.420
you can specify the title for the Wave, and
you can specify the, the content, the initial

00:20:50.420 --> 00:20:56.120
bit of content, so this you could take from
your blog template or something like that.

00:20:56.120 --> 00:21:00.710
Since it goes over the URL, unfortunately,
you run into the 2k limit so you can't really

00:21:00.710 --> 00:21:07.710
put a lot of content in there. But the interesting
feature, and this is why I'm fairly excited

00:21:07.960 --> 00:21:12.940
about this, it's good and takes this a lot
further than most of the sharing things that

00:21:12.940 --> 00:21:19.940
you have, is that you can specify gadget.
So how does it work? So, in this example I

00:21:21.000 --> 00:21:28.000
have um a Wavethis link, that refers from
a YouTube watch page, and it specifies a,

00:21:29.420 --> 00:21:36.420
it specifies a Wavethis public youtube.xml
as a Gadget. Now, if I click this thing, and

00:21:38.160 --> 00:21:45.160
as always we hope that the network plays nice.
Right, so it asks me if it's okay that youtube.com

00:21:53.730 --> 00:22:00.200
wants to create a Wave with me, and I say,
sure. Otherwise it would be short demo. And

00:22:00.200 --> 00:22:07.200
um, it loads the Wave client; it loads the
Wave client... hmm? Ah, oops. Um, well...

00:22:27.350 --> 00:22:34.260
Firefox, so... yes. Sorry. There is a... Somebody
help me. Also, that Wave from the presentation?

00:22:34.260 --> 00:22:41.260
Um, it um yeah, there's a problem with flash
here. Okay let me try this again.

00:22:47.160 --> 00:22:54.160
[pause]
It's always lovely to do things on other people's

00:23:14.820 --> 00:23:20.350
computers.
[sigh]

00:23:20.350 --> 00:23:27.350
So... I don't know why this would do this...
[pause]

00:23:48.010 --> 00:23:55.010
Anyway, now we should see the video.
[Laughs]

00:24:01.660 --> 00:24:06.210
[pause]
Well, you wonder how this magic is accomplished,

00:24:06.210 --> 00:24:13.210
I'm sure. Um, let's go back to the presentation.
Maybe the video will load after a while. So!

00:24:16.030 --> 00:24:21.960
How, how, how does it work? So if you click
the, the link, Wave creates a new, new Wave,

00:24:21.960 --> 00:24:26.830
and uh, it inserts the Gadget that you specified,
into that Wave, underneath the content, and

00:24:26.830 --> 00:24:33.130
this Gadget gets set in its Wavethis_referer
field. Each Gadget has a state that you can

00:24:33.130 --> 00:24:39.600
use for anything, but for Wavethis, automatically
it writes into the Wavethis referrer field.

00:24:39.600 --> 00:24:45.950
The URL that you got and that way, my Gadget
can then inspect the URL and see, hey, it's

00:24:45.950 --> 00:24:52.120
coming from that YouTube page, I can extract
that videoID from that URL, and I can render

00:24:52.120 --> 00:24:59.120
it. So, um, I'm going to have a quick look
whether it loaded; it did not. Well, that

00:25:15.030 --> 00:25:22.030
is unfortunate. Um,
[Audience responding]

00:25:23.300 --> 00:25:28.260
--What's that?
[inaudible]

00:25:28.260 --> 00:25:33.790
Ok, so in this case, you have a website, and
there's a YouTube video of your cat on that

00:25:33.790 --> 00:25:38.680
site, right? And uh you think this is so interesting
that people should share this video with their

00:25:38.680 --> 00:25:43.760
friends. Now, you put a little Wavethis button,
under the video, if they click this button,

00:25:43.760 --> 00:25:48.590
they get the content that you tell them to,
but they also get to see the YouTube video,

00:25:48.590 --> 00:25:51.540
in their Wave, and then they can discuss that
with their friends, because maybe they're

00:25:51.540 --> 00:25:55.070
not comfortable discussing that in a more
public setting.

00:25:55.070 --> 00:26:02.070
[inaudible audience response]
So, the discussion will be on Wave, with select

00:26:03.700 --> 00:26:10.700
groups of friends, so, to, uh, confuse the
matter, if you could compare this to, uh,

00:26:11.650 --> 00:26:17.070
you could also put a Wave, on your website,
so that everybody can use Wave to discuss

00:26:17.070 --> 00:26:22.130
the Video, with everybody. With Wavethis,
you do the exact opposite of that. You let

00:26:22.130 --> 00:26:29.130
people discuss your website in, with their
friends, on Wave. Does that make sense? I

00:26:33.160 --> 00:26:40.160
hope. Anyways, so I, um, quickly wanted to
show you the, the code of this uh, YouTube

00:26:44.200 --> 00:26:49.530
Gadget, to give you somewhat. Oh, quick question,
who has written a Wave Gadget, or any Gadget

00:26:49.530 --> 00:26:56.530
here? Ok, well, pay attention. Um, so, this
is just a normal Gadget, and I'm showing this,

00:27:01.040 --> 00:27:07.440
using this, this, I've edited this little
Robot here, called Syntaxy, which is this

00:27:07.440 --> 00:27:14.440
phenomenon thing that it actually syntax highlights
the code that you stick into Wave. Um, so

00:27:15.210 --> 00:27:19.360
it's a, it's a normal, normal Gadget, but
in the on-state callback, we check whether

00:27:19.360 --> 00:27:24.210
the Wavethis refer is set. Well, we first
check whether we've already loaded the movie

00:27:24.210 --> 00:27:28.930
previously. And if the Wavethis refer is set,
we have this regular expression that we use

00:27:28.930 --> 00:27:35.930
to extract the video ID and then here below,
we just have a standard incantation of the

00:27:37.330 --> 00:27:44.330
normal video player and um, we um crudely
replace MovieID with the MovieID that we extracted

00:27:45.730 --> 00:27:52.730
from the Wavethis refer. And ta-da! You have
a playing video, or rather, that should be

00:27:55.380 --> 00:28:02.380
the case. Now, um, I also wanted to talk a
little bit about the Robot API and what you

00:28:04.980 --> 00:28:11.980
can do with that to get content out of Wave
and and use it elsewhere. Um, so... there's,

00:28:16.530 --> 00:28:21.720
uh, there's two Robots in the wild that are
sort of interesting, and that do this sort

00:28:21.720 --> 00:28:28.720
of thing. One of them is Gadgitty, and the
other is Robot-Robot, that uh, let you the

00:28:28.760 --> 00:28:35.760
first one lets you actually create a Gadget
inside of Wave. So, I can take this Robot

00:28:40.850 --> 00:28:47.850
address, go to my Wave client, click the new
Wave... whoa. That didn't work at all. Let's

00:29:08.290 --> 00:29:15.290
try it again. Oh... so, I added to my Contacts
that little logo, and now when I click this

00:29:27.210 --> 00:29:31.710
thing, you see what happens is that Gadgitty
automatically inserts the boiler template

00:29:31.710 --> 00:29:38.710
that you always need for to write a Gadget
and not only that, it um, then initiates that

00:29:41.780 --> 00:29:45.580
same Gadget underneath there. So, you see
immediately what happens if you create this

00:29:45.580 --> 00:29:52.580
code so I can, you know, I can try this...
wrote this Gadget here, or I can, so I can

00:29:53.710 --> 00:30:00.710
play with it, or I can change the text here,
and save the, the situation, and then Gadgitty

00:30:03.530 --> 00:30:10.530
will come out and um, refresh the Gadget.
Well, it doesn't work either. Um. Anyway.

00:30:13.820 --> 00:30:17.780
So this way you have a, have a very quick
and easy way to develop a Gadget, so for all

00:30:17.780 --> 00:30:22.360
of the people that didn't develop a Gadget
so far, give this thing a spin. It makes it

00:30:22.360 --> 00:30:28.530
a lot easier to just get started and you get
a really, you know, a really nice interactive

00:30:28.530 --> 00:30:33.620
feedback loop. Um, some outside developer
built the same thing for Robot. That thing

00:30:33.620 --> 00:30:40.300
is called Robot-Robot, and um, if you want
to try your hand in Robot Development in Wave,

00:30:40.300 --> 00:30:47.300
you should try that thing. Anyway, why is
this Waving across the Web, you might wonder?

00:30:47.320 --> 00:30:54.320
The trick that these both Robots do is that
they um, they let you edit content in Wave,

00:30:55.720 --> 00:31:00.090
the code for the Robot or the code for the
Gadget, and then they use Appspot to serve

00:31:00.090 --> 00:31:07.090
up the same content at a specific URL. So
what Gadgitty do, does, is it copies from

00:31:07.580 --> 00:31:13.650
the Wave content the the, the, bit that describes
the Gadget, and it serves that up at a specific

00:31:13.650 --> 00:31:18.750
URL, and then the Robot inserts that Gadget
underneath the code, so you get a preview

00:31:18.750 --> 00:31:25.750
of what you did, so that way you can dynamically
create Gadgets in, in a nice fashion. I wanted

00:31:28.430 --> 00:31:35.430
to show you one more example of that, and
that is the, a little Robot that I wrote myself,

00:31:40.120 --> 00:31:47.120
to create Wikis. So basically, it, the extension
introduces a little Wiki button here, and

00:31:51.120 --> 00:31:58.120
if you type something, I want to... create
a page about London. So I select London here.

00:32:04.970 --> 00:32:11.970
And after I click this button, the Robot gets
edits to the conversation and what the Robot

00:32:15.260 --> 00:32:21.760
also does is, it immediately creates a, make
London into a link, to a new page, so I can

00:32:21.760 --> 00:32:28.760
now follow this page here and you see that
there is a public Wave now, that has the title

00:32:29.370 --> 00:32:36.370
London, and I could edit from there, and you
know, type something like, London is the capital

00:32:43.810 --> 00:32:50.810
of the UK. And, you know, that way stitch
together a Wiki sort of thing. Funny story,

00:32:54.830 --> 00:32:58.880
when I was developing this thing, and I was
demoing it, I did something similar like that,

00:32:58.880 --> 00:33:05.880
and I was typing something I think like France
borders Spain. But since this Wave is public,

00:33:06.710 --> 00:33:11.730
because you know, it's a Wiki, while I was
doing this and demoing this thing, somebody

00:33:11.730 --> 00:33:16.840
jumped in from the wild wild Internet out
there, and started typing, it also borders

00:33:16.840 --> 00:33:23.450
Germany. So, ha. It works, this collaborative
building of content.

00:33:23.450 --> 00:33:29.190
[swallow]
So, um, now how does this work? I'm not going

00:33:29.190 --> 00:33:36.190
to, oh, how does this work... I have... confused
my inbox a little with all these other Waves.

00:33:47.190 --> 00:33:53.220
Ah, here we go.
[pause]

00:33:53.220 --> 00:33:59.330
So, I don't want you worrying too much with
how the Wave creation itself goes, that's

00:33:59.330 --> 00:34:04.850
just the standard trick of using annotations
and replacing annotations with a link, it's

00:34:04.850 --> 00:34:10.540
documented on, uh, on, as, and there are samples
somewhere. I wanted to show you the other

00:34:10.540 --> 00:34:17.540
bit where down here we register an extra handler,
saying that uh, we also serve content up at

00:34:21.649 --> 00:34:28.649
the, at the Wiki path URL which is in this
case defined here on top it's slash Wiki.

00:34:34.109 --> 00:34:41.109
Now, what happens is that if a request comes
in at that thing, we extract the ID, we look

00:34:41.349 --> 00:34:48.349
up in the database that I have here, which
Wave is associated with that page, and then

00:34:48.679 --> 00:34:55.599
we use the activerobot API to fetch that Wave
and serve it up as static HTML. So I should

00:34:55.599 --> 00:35:02.599
be able now to go to um, uh... Wave... Wiki...
WikiWave... And, uh, see, I have now the,

00:35:20.490 --> 00:35:26.009
I served the same Wiki page up as a static,
publicly available thing, and so with this

00:35:26.009 --> 00:35:33.009
simple trick, we've effectively built a rather
way to collaboratively build a Wiki that we

00:35:33.430 --> 00:35:40.430
at the same time publish as static HTML. So
I think that's kinda neat... Yes, uh, another

00:35:43.119 --> 00:35:50.119
example that um I wanted to show you is uh,
Chess Roulette. Because I was thinking um,

00:35:50.630 --> 00:35:54.740
you know, this guy with his video roulette,
he got a lot of reviewers, and uh, you know,

00:35:54.740 --> 00:36:00.369
what is more popular than the chance to look
at naked people - Chess! So,

00:36:00.369 --> 00:36:07.369
[audience laughter]
It would be a, I'm I'm going to uh try my

00:36:08.480 --> 00:36:10.079
luck even more by challenging you to go to
this URL if you have a laptop. Of course if

00:36:10.079 --> 00:36:17.079
you have a laptop, you're probably playing
with that, but um, now is a good time to wake

00:36:18.549 --> 00:36:25.549
up. So if you go to this URL... and the network
works... huh.

00:36:36.630 --> 00:36:43.630
[whisper]
This should work now.

00:36:45.920 --> 00:36:52.920
It's chessroulette.appspot.com/play. And my
lovely insistent assistant insists I should,

00:37:07.019 --> 00:37:14.019
what is... wrong with this clipboard here?
Anybody reach it yet?

00:37:23.269 --> 00:37:30.269
[pause]
Really, we should do something about this

00:37:34.589 --> 00:37:41.589
network. Ok, so, um, now somebody else should
go here, and uh.

00:37:49.930 --> 00:37:54.940
[pause]
So what Chessroulette did is um, it uh got

00:37:54.940 --> 00:38:01.940
the request, it uh, then took the request
um, and uh, created a new Wave, and added

00:38:01.990 --> 00:38:06.720
me to the Wave, with that Gadget, with the
Chess Gadget. But, it also remembers that

00:38:06.720 --> 00:38:10.710
it hasn't opened Wave, so the next person
that comes here, that would be really impressive

00:38:10.710 --> 00:38:16.700
if that happened during my talk, um will be
automatically added to this Wave because Chessroulette

00:38:16.700 --> 00:38:21.029
remembers that it's open and we can play Chess.
And this way you have a simple uh, gaming

00:38:21.029 --> 00:38:27.019
engine that lets you play Chess against a
random person, which is, you know, kinda neat.

00:38:27.019 --> 00:38:28.190
Um, no? Nobody?

00:38:28.190 --> 00:38:29.599
[inaudible audience response]

00:38:29.599 --> 00:38:36.599
&gt;&gt;OSINGA: You did. Well, then possibly my
thing has fallen off the - but did you see

00:38:40.660 --> 00:38:44.690
me as an opponent?
[inaudible audience response]

00:38:44.690 --> 00:38:51.170
&gt;&gt;OSINGA: Well, you should come up and do
this instead of me. But anyway, how impressive

00:38:51.170 --> 00:38:58.049
is that? He played Chess against a random
person. Anyway, yeah, I'm just going to blame

00:38:58.049 --> 00:39:05.049
as usual the network here. It's um, it's a
good trick. I think that's why we do it. Um,

00:39:06.400 --> 00:39:13.400
so I wanted to show you a little bit of the
code on how this is, how this is done. Um...

00:39:22.140 --> 00:39:29.140
that is, if I can find it.
[pause]

00:39:35.670 --> 00:39:42.299
So, it's a, it's a fairly simple Robot, it's
in fact not even a Robot almost, because the

00:39:42.299 --> 00:39:48.710
only thing that it does is, it, it registers
itself at the active API endpoint, so this

00:39:48.710 --> 00:39:54.160
Robot can now create Waves. And then what
it does it, uh, it uses the, the, the, the,

00:39:54.160 --> 00:40:00.490
the, the apps, app engine data store to keep
track of whether there's any uh, open chessboards,

00:40:00.490 --> 00:40:07.490
and if so, it um, if there is an open chessboard,
then it will just, just redirect to a URL

00:40:08.680 --> 00:40:14.869
that has that Wave embedded in it. And since
at that point the Gadget get loaded, um, and

00:40:14.869 --> 00:40:18.499
the Gadget adds you as the, the, the next
player, because this Gadget is written in

00:40:18.499 --> 00:40:24.799
such a way that the first two people that
look at it become white and black. So, that's,

00:40:24.799 --> 00:40:30.489
that's just how the code, code works there.
And the only thing that uh, Chessroulette

00:40:30.489 --> 00:40:37.489
needs to do here is, uh, is create a new Wavelet,
using the, using the active API and uh, add

00:40:39.259 --> 00:40:46.259
this. So it's a, it's a neat little way of
creating a, a, a, a random game with a random

00:40:46.920 --> 00:40:51.829
person, and, and and shows you off how you
can leverage the embed API for these sort

00:40:51.829 --> 00:40:58.809
of thing. It also sort of answers one of the
questions in the thing, we'll get to that

00:40:58.809 --> 00:41:05.809
later. Ok, I'm still not a participant here.
[pause]

00:41:08.339 --> 00:41:15.339
The Wave Data APIs. So, this is um, I think
one of the more exciting things that we currently

00:41:16.910 --> 00:41:23.910
have going. So we develop this Robot API and
initially it worked that it would only process

00:41:25.249 --> 00:41:31.650
Events so it was purely Event-driven, and
uh, so you add the Robot to a Wave, then the

00:41:31.650 --> 00:41:33.470
Robot gets a little message saying, hey, you
were added to this Wave, do you want to do

00:41:33.470 --> 00:41:40.470
something about it. Then you press the button,
and we go out to the Robot. The Robot has

00:41:40.579 --> 00:41:46.249
no way of contacting us. Um, so, then, to
help that, we developed a Active Robot API

00:41:46.249 --> 00:41:50.559
and that forced us, of course, to think about
authentication, because as long as we only

00:41:50.559 --> 00:41:55.700
make outgoing calls, we're pretty sure that
it's the Robot that we're talking to, you

00:41:55.700 --> 00:41:58.299
know, because we start the conversation. If
it's the other way around, we're not so sure.

00:41:58.299 --> 00:42:04.400
So, what is the standard solution for this
sort of thing; OAuth. And we use two-legged

00:42:04.400 --> 00:42:08.920
OAuth, that is, you have to go to, in order
to get the active Robot API to work for you,

00:42:08.920 --> 00:42:15.039
you have to go to the Registration URL for
the Robot. You enter your Robot's credentials

00:42:15.039 --> 00:42:22.039
and then we give you a token. You have to
add this token to your Robot so that we know

00:42:22.079 --> 00:42:23.839
that you actually control the Robot. Then
we fetch that token back from your Robot and

00:42:23.839 --> 00:42:29.239
now we know you control the Robot, so now
we give you the secret. And you use this secret

00:42:29.239 --> 00:42:35.789
to sign all of your requests, and that way,
we're sure that you are you. And the Google

00:42:35.789 --> 00:42:42.789
Data, the Wave Data API, really, really sprung
from the observation that if you take this

00:42:42.910 --> 00:42:48.819
scenario and you replace two-legged OAuth
with three-legged OAuth, you can uh, let applications

00:42:48.819 --> 00:42:55.789
authenticate. You can, this is tricky, you
can let applications ask users for the permission

00:42:55.789 --> 00:43:01.789
to act as them. And this is what you see in
the Twitter API and and most of our APIs.

00:43:01.789 --> 00:43:07.460
Data APIs support that already, but the nice
thing about this trick is that, uh but this

00:43:07.460 --> 00:43:12.640
we don't have to design an entirely new Data
API. We already have one, because the entire

00:43:12.640 --> 00:43:19.640
Robot API is now available, and um, so today
we have um, only read-only, we're, we're going

00:43:20.900 --> 00:43:27.269
to change that this week I think. And uh,
so basically what you can do using the Data

00:43:27.269 --> 00:43:32.900
API is uh, search which is a new operation.
So you can get a snapshot of the Inbox of

00:43:32.900 --> 00:43:38.509
the user, and you can, you fetch Wavelets
to get adjacent representation of the Wave.

00:43:38.509 --> 00:43:44.239
This is simple enough, it's simple enough,
but it's powerful enough to build a really

00:43:44.239 --> 00:43:51.239
simple Wave client, as Dhanji demonstrated.
So, I did, did that too. I built one for Android.

00:43:52.230 --> 00:43:58.150
And I'm pretty sure I won't be able to finish
this before somebody builds a better one.

00:43:58.150 --> 00:44:05.150
But, I'll still uh, give you a sneak preview
on how it's, how it was done. Because I...

00:44:07.170 --> 00:44:10.359
Oh.
[whisper]

00:44:10.359 --> 00:44:17.359
I opened the wrong panel here.
So, three-legged OAuth is called Three-legged

00:44:21.489 --> 00:44:28.489
OAuth because it involves three legs, which
seems somewhat um, somewhat complicated. So

00:44:31.089 --> 00:44:35.509
the way that the authentication works is,
well first of all, you have to have a whole

00:44:35.509 --> 00:44:42.059
bunch of URLs that uh, play a part in this,
and uh, you can uh, find them in our communication.

00:44:42.059 --> 00:44:47.710
Basically, they define where do you get the
various tokens, what is the scope of your

00:44:47.710 --> 00:44:54.710
operation, which is in this case is Wave,
and what is the endpoint of your RPC calls.

00:44:55.180 --> 00:45:00.859
And um, so. The way that it works is the first
thing you have to do to get three-legged OAuth

00:45:00.859 --> 00:45:07.730
work is you call the getrequest token. This
is basically, you call the getrequest token

00:45:07.730 --> 00:45:14.160
on, on, on Google and you say, I want to,
I want to start working with you, and I, you

00:45:14.160 --> 00:45:20.569
set the callback URL. Now, this normally is,
the callback URL is just a normal URL, but

00:45:20.569 --> 00:45:26.200
since this is an Android client application,
it doesn't work so well. But, since all intents

00:45:26.200 --> 00:45:33.200
in Android can have URLS themselves, I just
define a handler that is Wave colon slash

00:45:35.140 --> 00:45:42.140
slash Wave that makes when the browser tries
to redirect to that URL, Android jumps in

00:45:42.160 --> 00:45:47.670
and restarts my application. So that's, that's
one, that's the first step to do. Now, the

00:45:47.670 --> 00:45:54.670
second step to do is, uh, to start the browser
with the page that has the authentication

00:45:55.130 --> 00:46:02.130
request in it. This will show the user in
the standard ender browser a, a, a, a, a recognizable

00:46:04.539 --> 00:46:11.539
page with his account and the application
ID and what it wants. So in this case it will

00:46:12.690 --> 00:46:17.980
say something like the Android Lite client
wants to have access to your Wave account,

00:46:17.980 --> 00:46:24.049
is that okay? Then, if the users says yes,
um, three-legged OAuth will redirect me back

00:46:24.049 --> 00:46:31.049
to, to that callback URL, which in, in turn
will restart my application. But now, in the

00:46:31.630 --> 00:46:38.630
query parameters, it will actually have, a,
a, an OAuth token. Now, for, as soon as I

00:46:41.170 --> 00:46:47.019
have the OAuth token, I then have to convert
it into an access token, and then I can save

00:46:47.019 --> 00:46:52.759
the access token and the secret in the shared
state of the Android application, and I can

00:46:52.759 --> 00:46:59.759
use that any time I want to uh, talk more
to the Wave server. So, that's uh, interesting

00:47:00.019 --> 00:47:07.019
thing to go to. Ok that is all we have, thirteen
minutes for questions. You can find anything

00:47:07.920 --> 00:47:14.920
about our APIs on the code.google.com URL
and of course on the bit.ly thing here. I'm

00:47:16.579 --> 00:47:23.579
going to open that in
[whispers]

00:47:24.859 --> 00:47:29.650
Firefox.
So, we have any questions here; please use

00:47:29.650 --> 00:47:30.710
the microphone so that... yeah.

00:47:30.710 --> 00:47:32.460
&gt;&gt;AUDIENCE MEMBER Male #1:
Ok, if I embed a Wave in my webpage, how do

00:47:32.460 --> 00:47:34.119
I handle hackers and spammers and all kind
of people that are going to come in and create

00:47:34.119 --> 00:47:41.119
a nightmare of maintenance for me?

00:47:41.650 --> 00:47:48.650
&gt;&gt;DHANJI:
So we, have a couple of tools for that. One

00:47:52.309 --> 00:47:59.309
of them is that if you, if you sort of notice
the Wave going out of control, you can set

00:47:59.630 --> 00:48:05.309
Public as Read-Only, which means that people,
your spammers can't do anything worse with

00:48:05.309 --> 00:48:10.619
the Wave than has already been done. And then
there's this fantastic feature in Playback,

00:48:10.619 --> 00:48:16.289
which lets you find the frame at which things
were best, right, before the spammer got on

00:48:16.289 --> 00:48:21.450
there, and just click Restore, and then it
restores right back to that frame, and so

00:48:21.450 --> 00:48:23.130
you can, it's as if the Spammer never existed.

00:48:23.130 --> 00:48:26.430
&gt;&gt;AUDIENCE MEMBER #1:
Are there any clients to have something where

00:48:26.430 --> 00:48:32.739
you can say I won't let a certain class of
people, or some sort of authentication, or

00:48:32.739 --> 00:48:34.009
something where you can...

00:48:34.009 --> 00:48:34.329
&gt;&gt;DHANJI:
Sure -

00:48:34.329 --> 00:48:36.619
&gt;&gt;AUDIENCE MEMBER #1:
Might I have twenty people I want to let them

00:48:36.619 --> 00:48:39.979
do, but I don't want to keep having to turn
it off because some spammer sees this as very

00:48:39.979 --> 00:48:40.229
popular.

00:48:40.160 --> 00:48:44.769
&gt;&gt;DHANJI:
Right, um, so the question is do we have any

00:48:44.769 --> 00:48:49.039
moderation features? We have started down
that path, so we have groups that allow you

00:48:49.039 --> 00:48:56.039
to sort of pick a set of people, which is
exactly the same as Google groups. So, we

00:48:57.680 --> 00:49:04.680
share the namespace as well, and you can make
a group private, which means that people that

00:49:05.589 --> 00:49:08.440
come to your Wave, they can only see the Wave
if they've been added to that group, and being

00:49:08.440 --> 00:49:08.849
added to a group requires you to um, get an
invitation, so, that's a pretty good.

00:49:08.849 --> 00:49:09.099
&gt;&gt;Male #3:
Whoa. Careful, man.

00:49:08.960 --> 00:49:14.170
&gt;&gt;AUDIENCE MEMBER Male #4:
Sorry. I, I had a similar question about how,

00:49:14.170 --> 00:49:21.170
like, the first thing I thought of when like
people said you can embed Waves, is, well,

00:49:25.769 --> 00:49:29.849
what if somebody just comes along and deletes
all the comments? Um, and that could happen

00:49:29.849 --> 00:49:36.279
a lot. That there, you know, I was just thinking,
are there plans for as far as moderation features,

00:49:36.279 --> 00:49:40.009
something like a same-user permission idea,
where only the person who created the comment

00:49:40.009 --> 00:49:47.009
can edit or delete it? And uh, also, um, I
guess a moderation feature for just removing

00:49:48.359 --> 00:49:52.130
all impact from a particular user, but, I
don't know.

00:49:52.130 --> 00:49:56.950
&gt;&gt;OSINGA: Yeah, so we, the first thing we
uh, can you try to get this to work? I have

00:49:56.950 --> 00:50:02.989
no idea. The first thing we talked a lot about.
We have no concrete timeline to uh, to, to,

00:50:02.989 --> 00:50:09.989
to get there, but um, the second thing, it
depends on how exactly, you know, if you add

00:50:14.920 --> 00:50:21.920
a, a specific user and you set him to Read-Only,
then that user is, you know, de facto blocked

00:50:39.829 --> 00:50:42.670
from the Wave.

00:50:42.670 --> 00:50:49.670
&gt;&gt;AUDIENCE MEMBER #4:
I mean, after the fact, if they've caused

00:50:50.349 --> 00:50:57.349
a lot of damage, can you undo for a particular
user. I know that can be difficult because

00:51:28.859 --> 00:51:35.319
it's got a tree structure, but uh -

00:51:35.319 --> 00:51:42.319
&gt;&gt;OSINGA:
Yes. So, in, in theory that is actually something

00:51:55.249 --> 00:52:02.249
that you could do because of the way that
Wave works with OT. So, you have this operation

00:52:05.720 --> 00:52:12.720
transfer, transformation. So you could just
throw away all operations from one person,

00:52:13.190 --> 00:52:16.460
and then, you know, just, reconstruct the
Wave.

00:52:16.460 --> 00:52:20.210
&gt;&gt;AUDIENCE MEMBER #4:
--Yeah, that would be awesome!

00:52:20.210 --> 00:52:23.589
&gt;&gt;OSINGA:
In practice, that would of course -

00:52:23.589 --> 00:52:30.589
AUDIENCE MEMBER #4:
Of course it would make some of the operations

00:52:32.190 --> 00:52:32.440
impossible.

00:52:32.220 --> 00:52:32.559
&gt;&gt;OSINGA:
Well... It, it, it could lead to strange situations.

00:52:32.559 --> 00:52:32.859
Technically you are correct, but still look
really weird.

00:52:32.859 --> 00:52:33.190
&gt;&gt;AUDIENCE MEMBER #4:
Like, what would happen if somebody responded

00:52:33.190 --> 00:52:33.759
to them? Oh, I had another question. Um, I
can't remember what it is; I'll let somebody

00:52:33.759 --> 00:52:34.229
else talk. Oh, that's right. Also, with um,
oh, is somebody else talking? Anyway.

00:52:34.229 --> 00:52:34.559
&gt;&gt;AUDIENCE MEMBER Male #5:
Um, does Wave support voice/video chat?

00:52:34.559 --> 00:52:35.819
&gt;&gt;OSINGA:
The question is, does Wave support voice to

00:52:35.819 --> 00:52:37.079
video chat. Um, voice... so, uh Wave natively
doesn't support it, but uh, there is a whole

00:52:37.079 --> 00:52:38.329
bunch of extensions that let you use various
tools to do that, and um, there is uh, I think

00:52:38.329 --> 00:52:40.749
somebody in the Wave area demonstrating an
extension that does that. So... you again.

00:52:40.749 --> 00:52:42.650
&gt;&gt;AUDIENCE MEMBER #4:
Second question. Yeah, me again. Uh, was okay,

00:52:42.650 --> 00:52:48.170
so, when you embed the Wave, I mean you can
have it create a new Wave based on the URL

00:52:48.170 --> 00:52:48.420
of the current page, right?

00:52:48.190 --> 00:52:48.440
&gt;&gt;OSINGA:
Yes.

00:52:48.200 --> 00:52:48.450
&gt;&gt;AUDIENCE MEMBER #4:
But, I mean I can imagine situations where

00:52:48.239 --> 00:52:48.489
you'd want to show the same Wave on different
pages or in different contexts and also situations

00:52:48.309 --> 00:52:48.559
where maybe you would want to show different
Waves on the same page. Any plans on like

00:52:48.390 --> 00:52:48.640
letting us just choose-

00:52:48.400 --> 00:52:48.650
&gt;&gt;OSINGA:
Yes

00:52:48.410 --> 00:52:48.660
&gt;&gt;AUDIENCE MEMBER #4:
An identifier for it?

00:52:48.440 --> 00:52:48.690
&gt;&gt;OSINGA:
Yeah.

00:52:48.450 --> 00:52:48.700
&gt;&gt;AUDIENCE MEMBER #4:
Yes?

00:52:48.460 --> 00:52:48.710
&gt;&gt;OSINGA:
Yeah, so this is, uh.

00:52:48.489 --> 00:52:48.739
&gt;&gt;DHANJI:
So yeah, that's coming. The short answer,

00:52:48.519 --> 00:52:50.430
it's a probably one release cycle away, which
is a couple of weeks.

00:52:50.430 --> 00:52:50.680
&gt;&gt;AUDIENCE MEMBER #4:
Awesome.

00:52:50.489 --> 00:52:50.739
&gt;&gt;AUDIENCE MEMBER Male #6:
So, segue to his questions, uh, are you going

00:52:50.650 --> 00:52:51.470
to in your API, will you have, uh, rights
to the participants? So, if I am the host

00:52:51.470 --> 00:52:53.489
that started up the Wave, I would like, as
a developer, I would like to give the host

00:52:53.489 --> 00:52:54.970
who starts the Wave controls over the rights
of the other participants.

00:52:54.970 --> 00:52:55.549
&gt;&gt;OSINGA:
Yes, that is -

00:52:55.549 --> 00:52:56.579
&gt;&gt;AUDIENCE MEMBER #6:
Uh, Read-Only, Full-Access, No-Delete...

00:52:56.579 --> 00:52:59.749
&gt;&gt;OSINGA:
Uh, so No-Delete, we don't have, but uh, we

00:52:59.749 --> 00:53:06.749
introduced a couple weeks ago, the possibility
for Robots to set the status, set the access

00:53:09.190 --> 00:53:14.180
rights of other participants in the Wave as
long as the Robot is indeed the entity that

00:53:14.180 --> 00:53:21.180
created that Wave. And once we have the Data
API bit that makes it writable flipped, you

00:53:22.059 --> 00:53:25.410
can do the same thing from the Data API perspective.

00:53:25.410 --> 00:53:28.519
[Audience member asks question]
[inaudible]

00:53:28.519 --> 00:53:30.390
&gt;&gt;OSINGA: What's that?

00:53:30.390 --> 00:53:32.259
[question continues]
[inaudible]

00:53:32.259 --> 00:53:37.220
&gt;&gt;OSINGA:
No, you need a Robot for that.

00:53:37.220 --> 00:53:39.749
&gt;&gt;AUDIENCE MEMBER Male #7:
Uh, I repeat the same question before, but

00:53:39.749 --> 00:53:44.729
different way. Is there a different way to
clean a Wave? So, uh, Wave can be very messy,

00:53:44.729 --> 00:53:48.930
and a lot of abuse. Many people can put spam
in different letters, one created the Wave,

00:53:48.930 --> 00:53:55.529
a Wave, and I want to clean it, and then click
away all the stuff that I clean, and start

00:53:55.529 --> 00:54:01.640
a new Wave from this clean palette, after
I clean it. So, is there some way to clean

00:54:01.640 --> 00:54:04.380
up or take the mess out?

00:54:04.380 --> 00:54:09.180
&gt;&gt;OSINGA:
Well, you can restore a Wave back to a previous

00:54:09.180 --> 00:54:14.289
version, and you can copy a, uh, copy the
root blip to new Wave, which often is uh,

00:54:14.289 --> 00:54:18.619
you know, if you collaborate on a document
with a team and you have all these little

00:54:18.619 --> 00:54:20.650
in-line discussions, and then afterwards you
modify the underlying document, and then at

00:54:20.650 --> 00:54:26.710
some point you're sort of happy with the whole
thing. And you say, okay, now I want to uh,

00:54:26.710 --> 00:54:31.710
you can then copy it to a new Wave, and you
get a fresh copy, without the, all the entire

00:54:31.710 --> 00:54:35.989
in-line conversations and that sort of thing
and you can modify the participant list. Plus

00:54:35.989 --> 00:54:39.640
the, you know, so that one might be an answer
to your conundrum.

00:54:39.640 --> 00:54:44.229
&gt;&gt;AUDIENCE MEMBER #7:
So, so, although I can, for example, take

00:54:44.229 --> 00:54:49.849
away selective items from the Wave, only selective
items, and copy and get a new Wave out of

00:54:49.849 --> 00:54:51.650
whatever left?

00:54:51.650 --> 00:54:56.170
&gt;&gt;OSINGA:
Um, I... don't think so.

00:54:56.170 --> 00:54:58.749
&gt;&gt;DHANJI:
We have a couple of features that are planned

00:54:58.749 --> 00:55:05.749
that are similar to that, uh, where you're
able to move one thread, specifically out

00:55:05.839 --> 00:55:12.180
or in to another Wave. So, I think that in
combination with what Douwe said earlier about

00:55:12.180 --> 00:55:16.349
copying a Wave on, or restoring it from Playback,
that should give you all the tools that you're

00:55:16.349 --> 00:55:17.059
looking for.

00:55:17.059 --> 00:55:24.009
&gt;&gt;OSINGA: Well let me give you a, a better
answer than that, a API answer. You can build

00:55:24.009 --> 00:55:29.150
an extension that does whatever you want.
So, if you come up with the way that you think

00:55:29.150 --> 00:55:34.289
the cleaning should work, you build a Robot
that does that, build a little extension manifest

00:55:34.289 --> 00:55:38.089
around it, and, you know, you create a new
button in the Toolbar. You press that button,

00:55:38.089 --> 00:55:41.089
your Robot gets invoked. And it does whatever
you want.

00:55:41.089 --> 00:55:45.680
&gt;&gt;AUDIENCE MEMBER #7:
Yes, but I want to sort of clean, and I think,

00:55:45.680 --> 00:55:48.859
clean, cleaning the Wave is very important,
because it's very useful tool, but -

00:55:48.859 --> 00:55:49.319
&gt;&gt;OSINGA:
I, I -

00:55:49.319 --> 00:55:52.469
&gt;&gt;AUDIENCE MEMBER #7:
But the issue is how to do it and keep the

00:55:52.469 --> 00:55:54.710
Playback, but, but selectively.

00:55:54.710 --> 00:55:58.349
&gt;&gt;OSINGA:
No, no, I agree that it's really important,

00:55:58.349 --> 00:56:01.469
I'm just saying that we're working on it,
but if you want to start working on it, that

00:56:01.469 --> 00:56:01.719
would be even better.
[chuckle]

00:56:01.670 --> 00:56:01.920
[Unmicrophoned question]
[inaudible]

00:56:01.789 --> 00:56:02.039
&gt;&gt;OSINGA: Ah, yes.

00:56:01.910 --> 00:56:02.160
[Unmicrophoned question continues.]
[inaudible]

00:56:02.069 --> 00:56:09.069
&gt;&gt;OSINGA:
What do you mean what is the point?

00:56:14.410 --> 00:56:21.410
[Unmicrophoned question continues.]
[inaudible]

00:56:24.089 --> 00:56:28.930
&gt;&gt;OSINGA: Yeah.

00:56:28.930 --> 00:56:35.930
[Question continues.]
[inaudible]

00:56:36.190 --> 00:56:43.190
&gt;&gt;OSINGA:
So the, so, yes, if you're President Obama,

00:56:43.759 --> 00:56:48.289
you really have to watch your words, because
there is no un-saying things, and I fear that's

00:56:48.289 --> 00:56:52.469
true on the Wave too. So, the only thing you
can do is you can remove the bits and then

00:56:52.469 --> 00:56:58.420
copy it to a new Wave, then the new copy,
the new copy of the Wave will of course not

00:56:58.420 --> 00:57:02.249
have the history in the Playback. But, anybody
that was on the Wave when you said the thing

00:57:02.249 --> 00:57:07.559
that you said that you wish you hadn't will
have access to that information. That cannot

00:57:07.559 --> 00:57:09.069
be undone. Yeah.

00:57:09.069 --> 00:57:12.660
&gt;&gt;DHANJI:
Oh, and another interesting answer is, if

00:57:12.660 --> 00:57:19.599
no one's seen that content, you can remove
them as a participant, and they'll never see

00:57:19.599 --> 00:57:24.619
the Wave. So that's, you can actually withdraw
a Wave by doing that. And that should work

00:57:24.619 --> 00:57:26.150
for you.

00:57:26.150 --> 00:57:29.219
&gt;&gt;OSINGA:
Magic Un-Send button.

00:57:29.219 --> 00:57:33.829
[Audience Member resumes speaking unmicrophoned.]
[inaudible]

00:57:33.829 --> 00:57:37.569
&gt;&gt;OSINGA:
If you, if you add a participant to a Wave,

00:57:37.569 --> 00:57:43.170
and uh, as long, you have, until they open
the Wave, you can remove that participant,

00:57:43.170 --> 00:57:50.170
and they will just not see it. But, as soon
as they open a Wave, they have the information.

00:57:51.999 --> 00:57:53.289
Yes.

00:57:53.289 --> 00:58:00.289
&gt;&gt;AUDIENCE MEMBER Male # 8:
How would you handle an embedded URL that

00:58:01.690 --> 00:58:07.979
is um, port 443? Would you require some authentication?
So, you have the standard page, you've embedded

00:58:07.979 --> 00:58:12.529
a URL to a site that requires authentication,
how will the Wave handle that in terms of

00:58:12.529 --> 00:58:16.380
when it goes to that site, will it prompt
every new user who comes to the free page

00:58:16.380 --> 00:58:19.460
to then authenticate themselves?

00:58:19.460 --> 00:58:20.229
&gt;&gt;OSINGA:
Um.

00:58:20.229 --> 00:58:26.359
&gt;&gt;DHANJI: Um, so if your website, it's it's
totally at the mercy of your website, right,

00:58:26.359 --> 00:58:29.489
so if your website requires authentication
to get to a particular page -

00:58:29.489 --> 00:58:33.630
&gt;&gt;AUDIENCE MEMBER #8:
No, let's say it's a free website, a free--

00:58:33.630 --> 00:58:34.930
&gt;&gt;DHANJI:--Okay.

00:58:34.930 --> 00:58:41.930
&gt;&gt;AUDIENCE MEMBER #8:
- - page, and in it I embed a link to uh,

00:58:45.769 --> 00:58:50.479
YouTube, say, that requires authentication.
Now, when someone comes to my free site and

00:58:50.479 --> 00:58:51.319
looks at the Wave, there'll be content in
there that points to an authenticated session.

00:58:51.319 --> 00:58:51.569
&gt;&gt;OSINGA:
Yes.

00:58:51.319 --> 00:58:51.569
&gt;&gt;AUDIENCE MEMBER #8:
How will Wave deal with that?

00:58:51.319 --> 00:58:54.249
&gt;&gt;DHANJI:
So, your content that you, that you link off

00:58:54.249 --> 00:58:57.789
of the Wave is session-bound. Is that right?

00:58:57.789 --> 00:59:00.569
&gt;&gt;AUDIENCE MEMBER #8:
Yes.

00:59:00.569 --> 00:59:02.210
&gt;&gt;DHANJI:
Well, you shouldn't do that for one thing.

00:59:02.210 --> 00:59:03.450
[chuckle]
Because you want people to, to be able to

00:59:03.450 --> 00:59:07.400
see it, you want, you want them to be able
to see it if they're not logged into Wave

00:59:07.400 --> 00:59:12.710
or anything at all, right? So, ideally what
you want to do is publish your Wave in such

00:59:12.710 --> 00:59:19.710
a way that, uh, it's the equivalent of a static
website that's out there on the Internet.

00:59:20.150 --> 00:59:27.150
Except, the difference is you can add all
of this content inside.

00:59:28.349 --> 00:59:28.759
&gt;&gt;AUDIENCE MEMBER #8:
Thank you.

00:59:28.759 --> 00:59:29.249
&gt;&gt;DHANJI:
Thank you. Any other questions?

00:59:29.249 --> 00:59:30.219
&gt;&gt;AUDIENCE MEMBER Male #9:
This is a just a follow-up on that one.

00:59:30.219 --> 00:59:30.469
&gt;&gt;DHANJI:
Sure.

00:59:30.369 --> 00:59:31.170
&gt;&gt;AUDIENCE MEMBER #9:
I mean, when you've got like the Wavethis

00:59:31.170 --> 00:59:32.950
button, that's creating a Wave and it's embedding
a hyperlink, it's not actually drawing content

00:59:32.950 --> 00:59:34.559
in at that point unless you've got a Gadget
that tries to do that, so all you've been

00:59:34.559 --> 00:59:41.559
showing them is a hyperlink, and if they clicked
on it, then they'd be asked to authenticate.

00:59:42.869 --> 00:59:44.890
&gt;&gt;OSINGA:
Right. Yeah, but, you know, you could have

00:59:44.890 --> 00:59:49.359
a Gadget that only works with, like Dhanji
says, you shouldn't do that, and as the Gadget's

00:59:49.359 --> 00:59:55.440
author if you want the people to authenticate
before using the Gadget and then you have

00:59:55.440 --> 00:59:58.729
that Gadget, that's always going to be messy.
I mean, it can be done.

00:59:58.729 --> 00:59:59.670
&gt;&gt;AUDIENCE MEMBER #9:
Yeah.

00:59:59.670 --> 01:00:02.749
&gt;&gt;OSINGA:
So, um, thank you very much. We're, um, out

01:00:02.749 --> 01:00:03.630
of time.

01:00:03.630 --> 01:00:06.410
&gt;&gt;DHANJI:
If you guys have more questions, come up and

01:00:06.410 --> 01:00:08.779
see us after the talk. Thank you very much.

01:00:08.779 --> 01:00:09.039
[Applause]

01:00:09.039 --> 01:00:10.359
[Silence as microphones are removed.]

