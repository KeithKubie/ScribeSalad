WEBVTT
Kind: captions
Language: en

00:00:00.590 --> 00:00:03.630
In this project we've got
something a little bit silly.

00:00:03.630 --> 00:00:09.180
We've got 100 classes,
each of which have 700 methods.

00:00:09.180 --> 00:00:11.170
Well this is clearly
a contrived example.

00:00:11.170 --> 00:00:14.370
In principle there is nothing stopping
a large project from getting this big

00:00:14.370 --> 00:00:17.120
especially if you have
a lot of big dependencies.

00:00:17.120 --> 00:00:18.440
So, let's try compiling this.

00:00:19.500 --> 00:00:21.500
Oops, looks like we've got an error.

00:00:21.500 --> 00:00:22.740
Trouble writing output.

00:00:22.740 --> 00:00:24.144
Too many method references.

00:00:24.144 --> 00:00:27.004
70,000, max is 65,000.

00:00:27.004 --> 00:00:30.160
Let's unpack what's going on here.

00:00:30.160 --> 00:00:33.160
The Android virtual machine doesn't
actually run Java byte code.

00:00:33.160 --> 00:00:34.420
It runs Dalvik byte code.

00:00:34.420 --> 00:00:37.150
And there's a build step
after java compilation,

00:00:37.150 --> 00:00:39.940
where the Java byte code is
turned into Dalvik byte code.

00:00:39.940 --> 00:00:42.130
The step is called dexing.

00:00:42.130 --> 00:00:45.070
Part of this process is compiling
a table of every method

00:00:45.070 --> 00:00:48.380
in the application,
which is then indexed with two bytes.

00:00:48.380 --> 00:00:51.930
So, that means we're
limited to 65K methods.

00:00:51.930 --> 00:00:55.500
Fortunately, we can ask gradleto simply
break up this table into multiple tables

00:00:55.500 --> 00:00:58.852
by setting in our build.gradle
file under default config,

00:00:58.852 --> 00:01:01.370
multiDexEnabled true.

00:01:01.370 --> 00:01:06.430
Now if we try and build again, looking
through our build log we see that

00:01:06.430 --> 00:01:10.750
the dex process was run successfully,
so now we're building just fine,

00:01:10.750 --> 00:01:13.080
even though our project is gigantic.

00:01:13.080 --> 00:01:16.100
This is just something to be aware of so
you don't get bit by this in the future.

