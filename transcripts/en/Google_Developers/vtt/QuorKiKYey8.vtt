WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:08:15.001
[MUSIC PLAYING]

00:08:23.990 --> 00:08:24.580
MANDY WAITE: Hi everyone.

00:08:24.580 --> 00:08:26.890
My name is Mandy Waite from
Developer Advocate for the

00:08:26.890 --> 00:08:28.070
Google Cloud platform.

00:08:28.070 --> 00:08:30.080
Welcome to Google
Developers Live.

00:08:30.080 --> 00:08:31.020
FRED SAUER: Welcome indeed.

00:08:31.020 --> 00:08:32.529
I'm Fred Sauer, also
Developer Advocate

00:08:32.529 --> 00:08:33.990
on the Cloud platform.

00:08:33.990 --> 00:08:36.990
Today we have a number of
questions that you've already

00:08:36.990 --> 00:08:38.669
submitted that we
want to answer.

00:08:38.669 --> 00:08:41.390
But first, Mandy, you have a
little presentation for us?

00:08:41.390 --> 00:08:43.740
Kind of give some of the
viewers who are not as

00:08:43.740 --> 00:08:46.360
familiar with App Engine an
overview, and then we'll get

00:08:46.360 --> 00:08:48.860
right into your questions.

00:08:48.860 --> 00:08:50.690
MANDY WAITE: Yes, so most people
who will be on the live

00:08:50.690 --> 00:08:53.400
stream are actually people who
have signed up for the App

00:08:53.400 --> 00:08:55.030
Engine startup pack.

00:08:55.030 --> 00:08:56.050
So welcome to everybody.

00:08:56.050 --> 00:08:57.320
Thanks for joining
the program.

00:08:57.320 --> 00:09:00.010
Hopefully, this will inspire
you to use some

00:09:00.010 --> 00:09:01.320
more of those credits.

00:09:01.320 --> 00:09:04.385
We're going to look at some of
the features of App Engine in

00:09:04.385 --> 00:09:06.580
this presentation that you may
have actually overlooked, you

00:09:06.580 --> 00:09:08.640
may not have seen, or
may not be aware of.

00:09:08.640 --> 00:09:11.611
So we are going to dive straight
into presentation.

00:09:11.611 --> 00:09:15.150
Yeah, so we've done intros.

00:09:15.150 --> 00:09:17.740
So firstly, the startup
value proposition.

00:09:17.740 --> 00:09:19.350
App Engine is a great product,
but what's the

00:09:19.350 --> 00:09:21.870
real value for startups?

00:09:21.870 --> 00:09:23.070
So one of the key points--

00:09:23.070 --> 00:09:26.860
and this kind of stuff is
already documented at

00:09:26.860 --> 00:09:30.960
Cloud.google.com, but we were
going to make a big point of

00:09:30.960 --> 00:09:34.270
these value proposition
statements here.

00:09:34.270 --> 00:09:36.870
App Engine is very quick
to get started with.

00:09:36.870 --> 00:09:40.000
It allows for very rapid
development of applications.

00:09:40.000 --> 00:09:42.590
And that's important to startups
who want to build a

00:09:42.590 --> 00:09:46.510
minimum viable product in
perhaps hours, not days like

00:09:46.510 --> 00:09:47.020
they used to.

00:09:47.020 --> 00:09:50.035
They want to get their
application out to market as

00:09:50.035 --> 00:09:51.800
quickly as possible.

00:09:51.800 --> 00:09:55.010
And to facilitate that
Google App Engine is

00:09:55.010 --> 00:09:56.460
extremely easy to use.

00:09:56.460 --> 00:09:59.110
We give you all of the tools
you need to build your

00:09:59.110 --> 00:10:01.860
applications, to test, to
launch, and then to update

00:10:01.860 --> 00:10:04.230
your application's
going forward.

00:10:04.230 --> 00:10:08.320
We also provide a very rich
set of APIs and services,

00:10:08.320 --> 00:10:10.990
which you can build your
application upon, leveraging

00:10:10.990 --> 00:10:14.900
things like mail, XMPP, and
other cast services in the

00:10:14.900 --> 00:10:16.510
background.

00:10:16.510 --> 00:10:19.940
Also, autoscale, people keep
talking about autoscale, when

00:10:19.940 --> 00:10:20.790
I mention App Engine.

00:10:20.790 --> 00:10:25.710
The media scalability almost to
most users of App Engine is

00:10:25.710 --> 00:10:28.930
almost like there's infinite
scale, so you can scale

00:10:28.930 --> 00:10:34.330
rapidly and as massively
as you need to.

00:10:34.330 --> 00:10:36.460
And also one of the final points
is that you only have

00:10:36.460 --> 00:10:38.740
to pay for what you use.

00:10:38.740 --> 00:10:41.450
App Engine is free to use
to get started with.

00:10:41.450 --> 00:10:43.590
You get some benefits from
sign-up for billing,

00:10:43.590 --> 00:10:46.720
particularly the credit card,
so you guys are all already

00:10:46.720 --> 00:10:49.550
signed up for billing, but you
only pay for the resources

00:10:49.550 --> 00:10:51.930
that you use as your
application grows.

00:10:55.100 --> 00:10:57.760
And here's some credit, some
people that have used App

00:10:57.760 --> 00:10:59.680
Engine and been successful
with it.

00:10:59.680 --> 00:11:05.240
So Khan Academy offer teaching
programs online.

00:11:05.240 --> 00:11:07.420
And they're very pleased
with App Engine.

00:11:07.420 --> 00:11:10.490
We use their statements quite
often, and these folks they

00:11:10.490 --> 00:11:12.973
feel that App Engine gives them
the ability to spend all

00:11:12.973 --> 00:11:15.750
of their time developing their
application and not worrying

00:11:15.750 --> 00:11:17.450
about infrastructure.

00:11:17.450 --> 00:11:19.160
Pulse in a very similar
position.

00:11:19.160 --> 00:11:23.250
A quote from Greg Bayer there
that they could spend time not

00:11:23.250 --> 00:11:25.050
worrying about the things
that they used to

00:11:25.050 --> 00:11:26.280
have to worry about.

00:11:26.280 --> 00:11:28.180
Google now takes care of
those things for them.

00:11:31.410 --> 00:11:35.150
Just to go over very quickly of
some of the new features in

00:11:35.150 --> 00:11:35.820
App Engine.

00:11:35.820 --> 00:11:39.000
We update App Engine pretty
much every month, so we're

00:11:39.000 --> 00:11:41.300
currently at 1.7.7.

00:11:41.300 --> 00:11:44.320
And in case you're still lagging
behind a little bit,

00:11:44.320 --> 00:11:46.810
it's important to keep
up-to-date with new updates.

00:11:46.810 --> 00:11:48.680
And to look at some of the
features we've introduced

00:11:48.680 --> 00:11:52.880
recently, in App Engine 1.7.5 we
introduced Cloud Endpoints

00:11:52.880 --> 00:11:56.545
points, which we'll talk about
in more detail; Cloud

00:11:56.545 --> 00:11:58.810
Messaging support, high
memory instances.

00:11:58.810 --> 00:12:04.790
In 1.7.6, a bit of a lesser
release, but we introduced

00:12:04.790 --> 00:12:07.400
Task queue Async Methods, and
if you're developing in

00:12:07.400 --> 00:12:09.050
Python, we finally got a

00:12:09.050 --> 00:12:13.530
multi-threaded development AppServer.

00:12:13.530 --> 00:12:16.340
In 1.7.7, which was released
in April, that was last

00:12:16.340 --> 00:12:19.630
release, we finally provided
Java 7 support.

00:12:19.630 --> 00:12:22.530
it was previously available
in SDK.

00:12:22.530 --> 00:12:25.840
SSL support for Python, Maven
support for Cloud Endpoints,

00:12:25.840 --> 00:12:29.730
and also we removed the minimal
charge of $2.10.

00:12:29.730 --> 00:12:33.000
So you no longer have to pay
anything until you actually

00:12:33.000 --> 00:12:34.250
hit your quotas.

00:12:36.850 --> 00:12:39.320
So just going to quickly go over
some of those features

00:12:39.320 --> 00:12:41.540
that you may have actually
missed, that maybe not

00:12:41.540 --> 00:12:43.700
actually be completely
apparent.

00:12:43.700 --> 00:12:45.620
You may have started off with
App Engine a while back and

00:12:45.620 --> 00:12:47.480
actually not kept up-to-date
with some of the features

00:12:47.480 --> 00:12:49.070
we've introduced.

00:12:49.070 --> 00:12:53.680
Cloud Endpoints is a really
important feature for us.

00:12:53.680 --> 00:12:57.460
Basically, what it's allowed you
to do is to develop APIs

00:12:57.460 --> 00:13:00.410
in a way that's very similar
to the way that Google

00:13:00.410 --> 00:13:02.120
Developers their APIs.

00:13:02.120 --> 00:13:04.200
You can take an existing
application or develop a new

00:13:04.200 --> 00:13:07.490
application, and annotate your
classes and methods within the

00:13:07.490 --> 00:13:11.880
application, to expose those
classes and methods as an API.

00:13:11.880 --> 00:13:14.410
Once you've exposed them as an
API, you can discover that

00:13:14.410 --> 00:13:17.800
API, there are various utilities
that we provide that

00:13:17.800 --> 00:13:21.110
allow you to get discovery
documents and to build API

00:13:21.110 --> 00:13:24.800
client libraries for
your own API.

00:13:24.800 --> 00:13:28.140
With those libraries you can
then go on to build clients

00:13:28.140 --> 00:13:31.290
for Chrome, for Web applications
in general, for

00:13:31.290 --> 00:13:33.930
Android and for iOS.

00:13:33.930 --> 00:13:36.290
So we thought that Cloud
Endpoints is an extremely

00:13:36.290 --> 00:13:37.120
important feature.

00:13:37.120 --> 00:13:38.700
So if you have interest
in building

00:13:38.700 --> 00:13:40.480
particularly mobile backends--

00:13:40.480 --> 00:13:43.470
I want to say backends by using
the broader sense of the

00:13:43.470 --> 00:13:46.030
term, the way App
Engine uses it--

00:13:46.030 --> 00:13:47.885
but if you're interested in
building mobile backends, then

00:13:47.885 --> 00:13:51.660
you should really check out
Google Cloud Endpoints.

00:13:51.660 --> 00:13:54.770
Another thing that people
sometimes miss is AppStats.

00:13:54.770 --> 00:13:56.730
It's not turned on by default,
you can add it to your

00:13:56.730 --> 00:13:58.090
application.

00:13:58.090 --> 00:14:00.790
And you can use it for profile
in your OPC course.

00:14:00.790 --> 00:14:02.010
You can basically use it
to work out where your

00:14:02.010 --> 00:14:03.260
application is spending time.

00:14:06.220 --> 00:14:09.050
App Engine Sockets.

00:14:09.050 --> 00:14:12.560
This is a highly sought
after feature.

00:14:12.560 --> 00:14:14.380
Previously in App Engine you
were not able to create

00:14:14.380 --> 00:14:16.980
sockets of your own to create
outbound sockets.

00:14:16.980 --> 00:14:18.350
We've introduced that feature.

00:14:18.350 --> 00:14:20.670
It's enabled for trusted testers
at the moment, which

00:14:20.670 --> 00:14:23.350
means you have to sign up for a
program and agree to do some

00:14:23.350 --> 00:14:26.210
testing and feedback with
it, but it is available

00:14:26.210 --> 00:14:28.990
for you to use today.

00:14:28.990 --> 00:14:30.790
Also we provide a Search API.

00:14:30.790 --> 00:14:33.430
And again some of these services
are experimental,

00:14:33.430 --> 00:14:35.950
which means they are
liable to change.

00:14:35.950 --> 00:14:38.685
Cloud Endpoints in currently
also experimental.

00:14:38.685 --> 00:14:40.980
They are liable to change from
release to release, but

00:14:40.980 --> 00:14:42.770
they're worth looking at now.

00:14:42.770 --> 00:14:45.180
Search API is one
such feature.

00:14:45.180 --> 00:14:47.600
And that allows you to do
Google-like search as across

00:14:47.600 --> 00:14:49.990
your own application data.

00:14:49.990 --> 00:14:52.610
It support things like custom
scoring, which is the ability

00:14:52.610 --> 00:14:55.610
to create algorithms
that score and

00:14:55.610 --> 00:14:57.190
results they've returned.

00:14:57.190 --> 00:15:01.010
And also rich snippeting, which
allows you to return

00:15:01.010 --> 00:15:05.780
HTML snippets of your search
results with the search term

00:15:05.780 --> 00:15:07.360
highlighted in bold.

00:15:07.360 --> 00:15:09.270
And also supports GeoSearch.

00:15:09.270 --> 00:15:11.420
So if you've got the appropriate
data on your

00:15:11.420 --> 00:15:13.580
application database,
then you can do

00:15:13.580 --> 00:15:14.830
GeoSearch across your data.

00:15:17.520 --> 00:15:20.450
And for those of you basically
in the European Union, and

00:15:20.450 --> 00:15:24.150
there are several of you, many
of you, in fact, we also

00:15:24.150 --> 00:15:27.780
support App Engine European
Data Centers.

00:15:27.780 --> 00:15:30.330
So this is great for compliance
and locality of

00:15:30.330 --> 00:15:33.860
reducing ping time
and suchlike.

00:15:33.860 --> 00:15:36.720
You do have to sign up for paid
application for this, but

00:15:36.720 --> 00:15:39.140
you guys are already signed
up for paid--

00:15:39.140 --> 00:15:40.960
so that's great-- so you
can use that today.

00:15:43.520 --> 00:15:47.015
Also, we have a fairly extensive
and growing all the

00:15:47.015 --> 00:15:48.290
time Development Stack.

00:15:48.290 --> 00:15:52.500
We have Maven support, we have
Maven archetypes and plug-ins

00:15:52.500 --> 00:15:55.760
that you can use to deploy
your applications.

00:15:55.760 --> 00:15:59.310
Jenkins is also supported in the
Cloud for a thing called

00:15:59.310 --> 00:16:00.970
Cloud Base.

00:16:00.970 --> 00:16:03.960
Online IDA called codenvy,
which is also

00:16:03.960 --> 00:16:05.420
supported in App Engine.

00:16:05.420 --> 00:16:08.930
And we also have the Google
plug-in for eclipse, which

00:16:08.930 --> 00:16:10.180
ties into the SDK.

00:16:12.510 --> 00:16:14.840
And very quickly looking into
the storage options.

00:16:14.840 --> 00:16:18.440
Storage is a big thing for
application development.

00:16:18.440 --> 00:16:20.970
We have many different
options.

00:16:20.970 --> 00:16:24.400
And the ones we're not going to
go into detail today, but

00:16:24.400 --> 00:16:26.790
you can look them up
online and get more

00:16:26.790 --> 00:16:27.610
details about them.

00:16:27.610 --> 00:16:31.430
But we have Unstructured data
support using Google Cloud

00:16:31.430 --> 00:16:36.240
Storage and Google Drive;
Structured data--

00:16:36.240 --> 00:16:39.370
The App Engine DataStore; and
also Relational data by using

00:16:39.370 --> 00:16:42.500
Google Cloud SQL.

00:16:42.500 --> 00:16:45.585
Very briefly covering
those three options.

00:16:45.585 --> 00:16:48.450
I'm not going to actually
talk about Drive today.

00:16:48.450 --> 00:16:51.300
Drive is a Cloud product, but we
don't generally talk about

00:16:51.300 --> 00:16:53.940
it in these particular talks.

00:16:53.940 --> 00:16:57.400
NoSQL DatsStore, so this is
the App Engine DataStore--

00:16:57.400 --> 00:17:00.850
schemaless; it's for atomic
transactions and queries.

00:17:00.850 --> 00:17:03.450
This is really great
for internet scale,

00:17:03.450 --> 00:17:05.710
denormalizable DataSets.

00:17:05.710 --> 00:17:08.819
So really think differently,
no joins when you're using

00:17:08.819 --> 00:17:11.190
this kind of NoSQL DataStore.

00:17:11.190 --> 00:17:14.060
And also a fairly standard
Cloud SQL [INAUDIBLE]

00:17:14.060 --> 00:17:16.440
is really MySQL in the Cloud.

00:17:16.440 --> 00:17:19.520
It's very familiar to anybody
who's used MySQL before.

00:17:19.520 --> 00:17:23.460
It's fully managed and it's best
really for bounded scale.

00:17:23.460 --> 00:17:28.240
We don't have high levels of
scale for Cloud SQL yet.

00:17:28.240 --> 00:17:32.190
And I believe it's actually
out of experimental now.

00:17:32.190 --> 00:17:35.330
And the final offering,
last but not least, is

00:17:35.330 --> 00:17:36.380
Google Cloud Storage.

00:17:36.380 --> 00:17:39.070
And this is really a bucket
for storing all types of

00:17:39.070 --> 00:17:41.215
unstructured data.

00:17:41.215 --> 00:17:44.010
The five things you really
want from a DataStore--

00:17:44.010 --> 00:17:46.300
reliability, durability,
speed, low cost and

00:17:46.300 --> 00:17:48.140
simplicity-- are all
encapsulated in

00:17:48.140 --> 00:17:50.230
Google Cloud Storage.

00:17:50.230 --> 00:17:54.001
So you can check those
options out online.

00:17:54.001 --> 00:17:57.350
And just a quick mention of
Google I/O. Google I/O is

00:17:57.350 --> 00:17:59.280
going to happen next week.

00:17:59.280 --> 00:18:03.570
If you haven't got a ticket,
it's unfortunate, but you can

00:18:03.570 --> 00:18:05.630
stream the events live.

00:18:05.630 --> 00:18:07.660
You can follow up afterwards
on YouTube.

00:18:07.660 --> 00:18:10.860
There's many interesting talks,
many talks on the Cloud

00:18:10.860 --> 00:18:13.300
platform, including
the App Engine.

00:18:13.300 --> 00:18:14.780
If you want to be more
involved, we

00:18:14.780 --> 00:18:16.310
also have I/O extended.

00:18:16.310 --> 00:18:18.280
And you can find out
more about that

00:18:18.280 --> 00:18:19.810
from these links here.

00:18:19.810 --> 00:18:24.360
These links will be available
on YouTube afterwards if you

00:18:24.360 --> 00:18:27.220
need to go back have
a look at them.

00:18:27.220 --> 00:18:30.090
So we really are going to
open up for questions.

00:18:30.090 --> 00:18:32.080
And Fred and I are going to try
and bounce some questions

00:18:32.080 --> 00:18:35.155
back and forth to one another.

00:18:35.155 --> 00:18:36.690
FRED SAUER: This is
my favorite part.

00:18:36.690 --> 00:18:37.550
MANDY WAITE: Your
favorite part?

00:18:37.550 --> 00:18:37.970
FRED SAUER: I do.

00:18:37.970 --> 00:18:38.580
MANDY WAITE: Is it?

00:18:38.580 --> 00:18:41.870
But you're an App Engine expert,
and I'm kind of new to

00:18:41.870 --> 00:18:42.810
App Engine.

00:18:42.810 --> 00:18:44.010
I may struggle.

00:18:44.010 --> 00:18:46.540
FRED SAUER: Well, listening to
the presentation, I think I

00:18:46.540 --> 00:18:47.870
may dispute that.

00:18:47.870 --> 00:18:48.790
[LAUGHTER]

00:18:48.790 --> 00:18:50.960
FRED SAUER: Since you have spent
a lot of time talking

00:18:50.960 --> 00:18:53.982
already, do maybe want to throw
a question at me and

00:18:53.982 --> 00:18:54.820
start it that way?

00:18:54.820 --> 00:18:55.190
MANDY WAITE: OK, yes.

00:18:55.190 --> 00:18:59.630
So we opened up a moderator
page on the Google

00:18:59.630 --> 00:19:00.800
Developer Live site.

00:19:00.800 --> 00:19:03.670
So we have several questions
from there, we pulled some.

00:19:03.670 --> 00:19:05.560
Well, we'll maybe also get a
chance to look at some of them

00:19:05.560 --> 00:19:09.300
afterwards, but we
have like 20 old

00:19:09.300 --> 00:19:10.540
questions we can go through.

00:19:10.540 --> 00:19:10.920
FRED SAUER: OK

00:19:10.920 --> 00:19:13.480
MANDY WAITE: So one of them, the
first one, was I want to

00:19:13.480 --> 00:19:16.560
develop a restful web service
using Google App Engine that's

00:19:16.560 --> 00:19:20.470
consumed by my web application
when in a different domain.

00:19:20.470 --> 00:19:23.720
How do I restrict the calls only
to my web application?

00:19:23.720 --> 00:19:25.650
What are the best practices?

00:19:25.650 --> 00:19:26.030
FRED SAUER: OK.

00:19:26.030 --> 00:19:30.740
So this is a question of cross
domain, or what the standards

00:19:30.740 --> 00:19:34.100
like to refer to as cross-origin
requests.

00:19:34.100 --> 00:19:37.440
So if you look on the W3C web
page, you'll find something

00:19:37.440 --> 00:19:38.290
called CORS.

00:19:38.290 --> 00:19:47.010
C-O-R-S and it stands for
cross-origin request source?

00:19:47.010 --> 00:19:49.310
I forget the abbreviation,
I use it too much.

00:19:49.310 --> 00:19:50.810
MANDY WAITE: Just call
it CORS, right?

00:19:50.810 --> 00:19:53.420
FRED SAUER: Cross-origin request
sharing, I believe

00:19:53.420 --> 00:19:55.010
what the actual abbreviation
is.

00:19:55.010 --> 00:19:58.120
And basically, this is a
mechanism whereby servers and

00:19:58.120 --> 00:20:02.810
browsers agree on how to
communicate the domain of the

00:20:02.810 --> 00:20:06.250
website that is making a request
to the server, and

00:20:06.250 --> 00:20:09.280
from the server to either grant
access to that content

00:20:09.280 --> 00:20:10.960
or forbid it.

00:20:10.960 --> 00:20:15.250
And what you do is when you set
up simple resources, like

00:20:15.250 --> 00:20:18.940
even images in an image tag, or
when you make an XML HTTP

00:20:18.940 --> 00:20:22.840
request, you can specify that
that request is a cross-origin

00:20:22.840 --> 00:20:26.630
request-- so it's headed for a
domain other than the one that

00:20:26.630 --> 00:20:28.330
the website's running on.

00:20:28.330 --> 00:20:33.570
So maybe your website's on
mygreatapp.com and the Backend

00:20:33.570 --> 00:20:35.840
service that you're connecting
to, an App Engine, is actually

00:20:35.840 --> 00:20:38.720
on mygreatbackendservice.com.

00:20:38.720 --> 00:20:43.220
And you can do that, but you
have to set this extra flag in

00:20:43.220 --> 00:20:45.330
your HTML in your JavaScript
to make the

00:20:45.330 --> 00:20:46.630
cross-origin request.

00:20:46.630 --> 00:20:51.040
And then on the server, for a
get request there'll be an

00:20:51.040 --> 00:20:54.630
extra HTTP header coming in
as the origin header.

00:20:54.630 --> 00:20:57.610
And this is an indication to the
server that this request

00:20:57.610 --> 00:20:58.770
came from another origin.

00:20:58.770 --> 00:21:01.320
And right then you can make the
decision in your request

00:21:01.320 --> 00:21:05.030
handler whether or not you want
to allow that request.

00:21:05.030 --> 00:21:07.760
And you do that by sending
another response back, which

00:21:07.760 --> 00:21:12.650
is the access control
cross-origin allow.

00:21:12.650 --> 00:21:16.320
And you can specify the domains
that are allowed.

00:21:16.320 --> 00:21:19.930
If you make a post request or
a put request, than the

00:21:19.930 --> 00:21:22.140
browser will do something even
smarter than that; it will

00:21:22.140 --> 00:21:25.150
send what's called the preflight
request, and will

00:21:25.150 --> 00:21:28.270
send a request in advance and
get permission before it

00:21:28.270 --> 00:21:30.270
actually does the submission.

00:21:30.270 --> 00:21:34.330
So the short answer to this
question is are there existing

00:21:34.330 --> 00:21:35.600
senders to do this?

00:21:35.600 --> 00:21:37.330
It's very easy to do.

00:21:37.330 --> 00:21:40.770
Just look up CORS, C-O-R-S, and

00:21:40.770 --> 00:21:41.980
implement the details there.

00:21:41.980 --> 00:21:44.020
And you can do that in your
request handler in your HTML

00:21:44.020 --> 00:21:46.083
app, and you should
be good to go.

00:21:46.083 --> 00:21:47.550
MANDY WAITE: Excellent, well.

00:21:47.550 --> 00:21:48.980
You've got one for me, right?

00:21:48.980 --> 00:21:50.030
FRED SAUER: I do I do.

00:21:50.030 --> 00:21:51.820
MANDY WAITE: Is it
an easy one?

00:21:51.820 --> 00:21:53.660
FRED SAUER: Hopefully.

00:21:53.660 --> 00:21:55.830
Come up with a shorter answer
then than mine.

00:21:55.830 --> 00:21:58.070
Maybe we should have started
with an easier one.

00:21:58.070 --> 00:22:00.930
Let's see, so how viable or
recommended would it be to

00:22:00.930 --> 00:22:04.310
build a back in service for
mobile apps around Google

00:22:04.310 --> 00:22:06.300
Cloud Endpoints?

00:22:06.300 --> 00:22:08.090
MANDY WAITE: All
right, OK, so.

00:22:08.090 --> 00:22:11.930
I think really that's probably
the big use case for Cloud

00:22:11.930 --> 00:22:14.070
Endpoints, built-in
mobile Backends.

00:22:14.070 --> 00:22:17.180
And when we say Backends, again,
we're talking about the

00:22:17.180 --> 00:22:18.995
general sense of it rather
than the App

00:22:18.995 --> 00:22:19.910
Engine sense of Backends.

00:22:19.910 --> 00:22:20.270
FRED SAUER: Yeah.

00:22:20.270 --> 00:22:22.450
MANDY WAITE: If you want to
build an application that will

00:22:22.450 --> 00:22:26.280
provide resources and services
that are consumed by mobile

00:22:26.280 --> 00:22:28.666
devices, then Cloud Endpoints
will do that for

00:22:28.666 --> 00:22:29.620
you out of the box.

00:22:29.620 --> 00:22:32.650
I think pretty much we covered
most of that in the slides.

00:22:32.650 --> 00:22:35.130
But the documentation is pretty
extensive, both for

00:22:35.130 --> 00:22:36.320
Java and for Python.

00:22:36.320 --> 00:22:38.670
So if you want to find out more
about how to use Cloud

00:22:38.670 --> 00:22:41.100
Endpoints, you can
check that out.

00:22:41.100 --> 00:22:43.233
And there was also Google I/O
Talk last year, wasn't there,

00:22:43.233 --> 00:22:43.596
the one that was long?

00:22:43.596 --> 00:22:44.450
FRED SAUER: There was, yes.

00:22:44.450 --> 00:22:46.030
MANDY WAITE: So you can
actually get a lot of

00:22:46.030 --> 00:22:48.935
information from looking at the
Google I/O sessions from

00:22:48.935 --> 00:22:50.850
the previous years.

00:22:50.850 --> 00:22:51.685
FRED SAUER: Very good.

00:22:51.685 --> 00:22:52.120
MANDY WAITE: Yeah?

00:22:52.120 --> 00:22:53.290
FRED SAUER: All right,
your turn.

00:22:53.290 --> 00:22:54.600
MANDY WAITE: My turn?

00:22:54.600 --> 00:22:56.620
OK, so last week--

00:22:56.620 --> 00:22:58.290
maybe that was last week,
or it could have been

00:22:58.290 --> 00:22:59.590
written last week.

00:22:59.590 --> 00:23:02.526
Last week I had to rename an
entity-kind name for Google

00:23:02.526 --> 00:23:03.985
App Engine Java.

00:23:03.985 --> 00:23:07.620
I had to write one-time code in
my application to duplicate

00:23:07.620 --> 00:23:11.220
each entity to the new kind
name, delete all entities,

00:23:11.220 --> 00:23:14.480
then remove the one-time code,
and re-apply the application.

00:23:14.480 --> 00:23:16.100
Is there an easier way
of doing this?

00:23:19.270 --> 00:23:21.750
FRED SAUER: I think
this is a little

00:23:21.750 --> 00:23:25.240
bit of a longer question.

00:23:25.240 --> 00:23:28.040
But I think the person who asked
it is actually on the

00:23:28.040 --> 00:23:29.610
right track and how
to do this.

00:23:29.610 --> 00:23:32.510
So first, let me contrast this
with how you would do things

00:23:32.510 --> 00:23:35.660
in a relational data world,
where you have a fixed schema

00:23:35.660 --> 00:23:37.230
for your database.

00:23:37.230 --> 00:23:41.320
So if you have, for example, a
table in a relational database

00:23:41.320 --> 00:23:42.840
that's called customer.

00:23:42.840 --> 00:23:44.660
And you decide, for whatever
reason, you want to

00:23:44.660 --> 00:23:48.460
restructure that, and you want
to call it customer 2.

00:23:48.460 --> 00:23:50.400
What you would actually have
to do is you would have to

00:23:50.400 --> 00:23:53.210
declare a maintenance window,
you'd have to take the website

00:23:53.210 --> 00:23:56.820
down, and you would then
perform the database

00:23:56.820 --> 00:23:57.300
maintenance.

00:23:57.300 --> 00:24:00.340
You would rename that table,
which locks the entire table

00:24:00.340 --> 00:24:01.920
and all data in it.

00:24:01.920 --> 00:24:04.520
You would modify the code in the
application server, you'd

00:24:04.520 --> 00:24:06.090
bring everything back up.

00:24:06.090 --> 00:24:09.360
And maybe half an hour later,
maybe a few hours later, you'd

00:24:09.360 --> 00:24:12.340
be up and running.

00:24:12.340 --> 00:24:16.130
And that was maybe acceptable
a number of years ago, when

00:24:16.130 --> 00:24:19.760
website regularly went under
maintenance, and a lot of

00:24:19.760 --> 00:24:22.900
systems were just 8 to 5.

00:24:22.900 --> 00:24:25.280
But now we live in a world,
where everyone is connected to

00:24:25.280 --> 00:24:30.000
the internet, it's always
5 o'clock somewhere.

00:24:30.000 --> 00:24:31.830
Everyone needs to get to
your site all the time.

00:24:31.830 --> 00:24:35.000
And so what you really want is
a system, where you can make

00:24:35.000 --> 00:24:38.300
changes while the system's
up and running.

00:24:38.300 --> 00:24:41.030
And part of the question
actually has the answer here

00:24:41.030 --> 00:24:42.750
and how you do this.

00:24:42.750 --> 00:24:46.630
So the specific question was,
how do I rename an entity?

00:24:46.630 --> 00:24:50.300
But you can generalize the
question, what if you wanted

00:24:50.300 --> 00:24:53.570
to add new required properties
to particular

00:24:53.570 --> 00:24:55.310
entity in the DataStore?

00:24:55.310 --> 00:24:58.220
Or you wanted to restructure,
you're going from three

00:24:58.220 --> 00:25:01.350
separate entities and you're
combining them into this new

00:25:01.350 --> 00:25:04.330
data structure, where you put
everything in one entity.

00:25:04.330 --> 00:25:06.420
And these are common refactoring
that will happen

00:25:06.420 --> 00:25:07.750
with your application.

00:25:07.750 --> 00:25:11.300
And so the way to do this is
to think about this life

00:25:11.300 --> 00:25:13.820
system that's always handling
transactions.

00:25:13.820 --> 00:25:16.790
And it's actually a three-step
process.

00:25:16.790 --> 00:25:19.910
In the first step, what you
want to do is change your

00:25:19.910 --> 00:25:24.070
application, so that any time
that you write out an entity,

00:25:24.070 --> 00:25:28.080
you're writing it out in the
new format or with the new

00:25:28.080 --> 00:25:30.690
entity name, or with the
new properties, the new

00:25:30.690 --> 00:25:31.890
constraints.

00:25:31.890 --> 00:25:34.890
But at the same time, that every
time you do a read, you

00:25:34.890 --> 00:25:38.260
first look for the new kind of
entity, and if you don't find

00:25:38.260 --> 00:25:40.736
if, you look for the old kind.

00:25:40.736 --> 00:25:42.400
And you deploy that.

00:25:42.400 --> 00:25:45.890
And as soon as you deploy that,
your application will

00:25:45.890 --> 00:25:47.570
slowly begin migrating data.

00:25:47.570 --> 00:25:50.950
Any user that logs in and
touches their data, those

00:25:50.950 --> 00:25:54.190
entities, those rows in
the DataStore will

00:25:54.190 --> 00:25:55.730
begin to get migrated.

00:25:55.730 --> 00:25:59.110
And now, actually, you're in
a perfectly happy state.

00:25:59.110 --> 00:26:01.100
Your application will continue
to function.

00:26:01.100 --> 00:26:04.480
There's a little bit of extra
read overhead for people as

00:26:04.480 --> 00:26:07.560
they're migrating, but you now
have all the time in the world

00:26:07.560 --> 00:26:10.770
to make the full migration
happen.

00:26:10.770 --> 00:26:12.730
You're still serving
live traffic.

00:26:12.730 --> 00:26:17.050
And now, depending on what you
want to do, you can either

00:26:17.050 --> 00:26:18.860
say, we'll just leave
it like that.

00:26:18.860 --> 00:26:22.310
But oftentimes that extra code
there is complexity you don't

00:26:22.310 --> 00:26:26.520
want, and you might want
to get rid of that.

00:26:26.520 --> 00:26:30.670
And so what you do is then
you run a, what we call a

00:26:30.670 --> 00:26:33.860
MapReduce, which essentially
iterate over all the entities

00:26:33.860 --> 00:26:35.520
of the old kind in
the DataStore.

00:26:35.520 --> 00:26:37.010
And you just touch each one.

00:26:37.010 --> 00:26:38.920
You can do that in
ApplicationLogic.

00:26:38.920 --> 00:26:42.950
And as soon as you touch each
one, it gets migrated to the

00:26:42.950 --> 00:26:44.020
new structure.

00:26:44.020 --> 00:26:47.020
And you can take an hour
to do that, a day, you

00:26:47.020 --> 00:26:49.030
take weeks or months--

00:26:49.030 --> 00:26:50.220
really, however long it takes.

00:26:50.220 --> 00:26:52.850
And once everything's been
migrated, then you go back

00:26:52.850 --> 00:26:55.850
into your application and remove
that extra code in the

00:26:55.850 --> 00:26:57.060
read handler.

00:26:57.060 --> 00:26:58.590
And your apps migrated.

00:26:58.590 --> 00:27:02.160
And many developers have many
of these migrations in place

00:27:02.160 --> 00:27:05.400
at once, they might introduce
a few migrations

00:27:05.400 --> 00:27:08.450
incrementally, and then maybe
once a quarter do a clean up

00:27:08.450 --> 00:27:10.900
and get rid of some
of the code.

00:27:10.900 --> 00:27:13.750
It's not the case that you have
to migrate everything in

00:27:13.750 --> 00:27:15.220
a short window.

00:27:15.220 --> 00:27:17.160
Think about doing things
live in real time.

00:27:17.160 --> 00:27:17.613
MANDY WAITE: Wow.

00:27:17.613 --> 00:27:18.066
OK.

00:27:18.066 --> 00:27:19.880
That's cool. you have
one for me?

00:27:19.880 --> 00:27:21.490
FRED SAUER: Yes.

00:27:21.490 --> 00:27:25.130
All right, here's a developer
who is a little bit conscious

00:27:25.130 --> 00:27:27.090
about the bill at the
end of the day.

00:27:27.090 --> 00:27:30.440
He says, each day I fight
to really save every

00:27:30.440 --> 00:27:31.865
penny on App Engine--

00:27:31.865 --> 00:27:33.312
MANDY WAITE: We all.

00:27:33.312 --> 00:27:35.390
FRED SAUER: We all do.

00:27:35.390 --> 00:27:38.480
How could you help us
better profile our

00:27:38.480 --> 00:27:40.460
applications, Appstats--

00:27:40.460 --> 00:27:43.030
it's something you actually
mentioned--

00:27:43.030 --> 00:27:44.990
he thinks is a little
bit hard to use.

00:27:44.990 --> 00:27:48.710
And what's the best way to
tune your application?

00:27:48.710 --> 00:27:49.780
MANDY WAITE: An interesting
question, OK.

00:27:49.780 --> 00:27:52.440
So, yeah, we mentioned
Appstats earlier.

00:27:52.440 --> 00:27:54.370
I think we've plenty discussed
it before.

00:27:54.370 --> 00:27:56.780
We think the Appstats is
probably the way to go.

00:27:56.780 --> 00:27:59.320
It's built into the platform
already, no

00:27:59.320 --> 00:28:00.120
external tool is needed.

00:28:00.120 --> 00:28:02.270
So, it's there really to go.

00:28:02.270 --> 00:28:04.030
It would only profile
your own PCs.

00:28:04.030 --> 00:28:06.040
It won't tell you where all of
the hot spots that need to be

00:28:06.040 --> 00:28:07.590
cleared up, but it will
definitely give you a really

00:28:07.590 --> 00:28:10.990
good indication about what your
application is spending

00:28:10.990 --> 00:28:13.600
its time doing, particularly
in terms of RPC calls--

00:28:13.600 --> 00:28:15.970
calls of the DataStore that
includes as well.

00:28:15.970 --> 00:28:17.710
It's very easy to get up
and running as well.

00:28:17.710 --> 00:28:20.170
So we're not sure if it's
difficult for you to actually

00:28:20.170 --> 00:28:22.800
get up and running, and using
it, or if it's difficult for

00:28:22.800 --> 00:28:25.990
you to actually get anything
meaningful from it.

00:28:25.990 --> 00:28:30.160
But generally, it's fairly easy
for both Java and Python

00:28:30.160 --> 00:28:32.160
to get up and running
with Appstats.

00:28:32.160 --> 00:28:36.180
To get access to the console--
they provide a custom console

00:28:36.180 --> 00:28:39.630
you can have access to, which
can actually include your

00:28:39.630 --> 00:28:41.720
basic admin console.

00:28:41.720 --> 00:28:44.095
Once you have that available to
you, you can look at your

00:28:44.095 --> 00:28:47.700
own PCs, you can look at each
one of your requests, open up

00:28:47.700 --> 00:28:49.680
the request and then drill down
into the request to see

00:28:49.680 --> 00:28:51.260
where you're spending
your time.

00:28:51.260 --> 00:28:52.800
And even then for Python--

00:28:52.800 --> 00:28:54.560
I'm not sure if this is
available for Java, but with

00:28:54.560 --> 00:28:56.250
Python you can actually look
at the code that actually

00:28:56.250 --> 00:28:57.520
generated RPC call.

00:28:57.520 --> 00:28:59.735
FRED SAUER: Yeah, in Python
you have stock

00:28:59.735 --> 00:29:00.350
traces, that's right.

00:29:00.350 --> 00:29:03.395
MANDY WAITE: Exactly, yeah, so
with Python you can actually

00:29:03.395 --> 00:29:05.900
try showing to where the code
is-- and it's actually called

00:29:05.900 --> 00:29:08.825
longer RPC calls-- and actually
modify them, redeploy

00:29:08.825 --> 00:29:11.500
the application, see what
result you got.

00:29:11.500 --> 00:29:12.720
So that's really cool.

00:29:12.720 --> 00:29:17.650
So I think we recommend using
Appstats, definitely for RPCs.

00:29:17.650 --> 00:29:20.110
I'm not really familiar with
any other profilers for App

00:29:20.110 --> 00:29:22.240
Engine, although I did briefly,
the Khan Academy

00:29:22.240 --> 00:29:23.750
actually produced a profiler.

00:29:23.750 --> 00:29:25.040
Ben Kamens' Maven.

00:29:25.040 --> 00:29:27.960
So hopefully worth
looking into.

00:29:27.960 --> 00:29:30.360
FRED SAUER: Yeah, check
out Ben Kamens' blog.

00:29:30.360 --> 00:29:34.740
He does have a Python profiler
with some nice UI widgets that

00:29:34.740 --> 00:29:38.910
tell you about the loading
performance of your site.

00:29:38.910 --> 00:29:42.470
To finish up on the Appstats,
I think, what some of our

00:29:42.470 --> 00:29:46.170
users sometimes run into is
they feel like all the

00:29:46.170 --> 00:29:48.320
information that Appstats
provide is really

00:29:48.320 --> 00:29:49.430
overwhelming.

00:29:49.430 --> 00:29:52.670
And it's good maybe to
take a step back.

00:29:52.670 --> 00:29:56.060
And one of the things that
Appstats provides that I

00:29:56.060 --> 00:29:58.940
really enjoy looking at is
there's these timeline graphs

00:29:58.940 --> 00:30:01.980
that give you a breakdown
of the RPCs visually.

00:30:01.980 --> 00:30:06.010
And 99% of the time when I'm
using Appstats, I only look at

00:30:06.010 --> 00:30:06.800
the graphs.

00:30:06.800 --> 00:30:11.580
There's a whole page though of
stack traces and debugging

00:30:11.580 --> 00:30:14.790
information, and data that's
been sent back and forth.

00:30:14.790 --> 00:30:17.470
Almost everything related
to performance of your

00:30:17.470 --> 00:30:20.310
application you can find just
by looking at the graph.

00:30:20.310 --> 00:30:23.820
You can see whether you have
DataStore reads that are

00:30:23.820 --> 00:30:26.270
staircased all sequentially
behind one another, whether

00:30:26.270 --> 00:30:27.520
they're happening in parallel.

00:30:27.520 --> 00:30:31.140
You can see that you're making
them in cache call and then a

00:30:31.140 --> 00:30:33.310
DataStore call, which
tells you there's a

00:30:33.310 --> 00:30:35.050
in cache miss, right?

00:30:35.050 --> 00:30:36.470
MANDY WAITE: Right.

00:30:36.470 --> 00:30:38.490
FRED SAUER: So really just
getting comfortable with those

00:30:38.490 --> 00:30:41.490
graphs, I think, will provide
most of value

00:30:41.490 --> 00:30:42.820
with very little effort.

00:30:42.820 --> 00:30:43.570
MANDY WAITE: OK.

00:30:43.570 --> 00:30:46.430
Would you recommend it for
running on production as well?

00:30:46.430 --> 00:30:48.450
FRED SAUER: I do, but
depending on the

00:30:48.450 --> 00:30:49.500
traffic of your site.

00:30:49.500 --> 00:30:53.010
if you only have a few requests
per second, then,

00:30:53.010 --> 00:30:54.100
yeah, sure, run it.

00:30:54.100 --> 00:30:57.350
If you're doing a lot of
traffic, what we recommend is

00:30:57.350 --> 00:31:02.090
that you either deploy another
version in production that you

00:31:02.090 --> 00:31:05.470
hit, so you can say version
dot your app ID dot

00:31:05.470 --> 00:31:07.700
[INAUDIBLE] dot com and
access that directly.

00:31:07.700 --> 00:31:10.750
And that way you don't have
all the data from all the

00:31:10.750 --> 00:31:14.010
requests from all your users
piling on top of each other,

00:31:14.010 --> 00:31:16.970
but you can very carefully just
poke at your application,

00:31:16.970 --> 00:31:19.510
say, I'm going to do this one
request here and then I want

00:31:19.510 --> 00:31:20.940
to see the Appstats profile.

00:31:20.940 --> 00:31:21.950
MANDY WAITE: Yeah.

00:31:21.950 --> 00:31:25.820
FRED SAUER: We've even had
people with mobile clients.

00:31:25.820 --> 00:31:29.220
They'll have a couple users
that report performance

00:31:29.220 --> 00:31:33.140
problems, and they'll change
their application to send down

00:31:33.140 --> 00:31:37.330
a ping to those users, and say,
OK, this mobile client

00:31:37.330 --> 00:31:40.460
should connect to a different
backend name.

00:31:40.460 --> 00:31:44.350
And then those users are
isolated on their own version,

00:31:44.350 --> 00:31:47.450
where you can do diagnostics,
maybe you can enable some

00:31:47.450 --> 00:31:50.410
traces, you can enable
Appstats.

00:31:50.410 --> 00:31:53.150
And then, when everything's all
[INAUDIBLE], your tell the

00:31:53.150 --> 00:31:56.030
clients to go back to the
original version.

00:31:56.030 --> 00:31:57.060
MANDY WAITE: OK.

00:31:57.060 --> 00:31:59.110
FRED SAUER: So, yeah, a lot of
ways to utilize that tool.

00:31:59.110 --> 00:31:59.836
MANDY WAITE: All right,
definitely, OK.

00:31:59.836 --> 00:32:00.750
Well, that's good.

00:32:00.750 --> 00:32:02.700
Hopefully, that answered
the question.

00:32:02.700 --> 00:32:03.780
So one for you.

00:32:03.780 --> 00:32:04.660
FRED SAUER: OK.

00:32:04.660 --> 00:32:06.540
MANDY WAITE: Any suggestions
on how to simply move data

00:32:06.540 --> 00:32:07.620
from the live server
to development

00:32:07.620 --> 00:32:09.950
server, and visa versa?

00:32:09.950 --> 00:32:12.770
FRED SAUER: Sure.

00:32:12.770 --> 00:32:16.590
We have in the App Engine admin
console there's a data

00:32:16.590 --> 00:32:19.590
store backup feature, and it
allows you to create a

00:32:19.590 --> 00:32:22.510
snapshot of your database.

00:32:22.510 --> 00:32:26.330
And those snapshots can be
placed into your Google Cloud

00:32:26.330 --> 00:32:29.860
Storage, so it's just a very
large file that you can then

00:32:29.860 --> 00:32:31.780
download, you can store
it offline.

00:32:31.780 --> 00:32:37.300
But you can also restore that
back up to another app ID.

00:32:37.300 --> 00:32:43.160
And you can select actually
which kinds get backed up.

00:32:43.160 --> 00:32:46.450
So that's a great way to copy
data between instances.

00:32:46.450 --> 00:32:49.350
If you have like production and
QA environment, and you

00:32:49.350 --> 00:32:51.280
need to get another
snapshot of data.

00:32:51.280 --> 00:32:52.440
It's pretty common.

00:32:52.440 --> 00:32:55.290
Or if you have been working
really hard for months in the

00:32:55.290 --> 00:32:57.240
development server, and you have
all this configuration

00:32:57.240 --> 00:33:00.280
data, maybe you want to just
take those kinds, grab a

00:33:00.280 --> 00:33:03.700
backup of that, and restore
that, play that back

00:33:03.700 --> 00:33:05.565
essentially on onto the
production server.

00:33:05.565 --> 00:33:06.594
MANDY WAITE: Well, sounds easy.

00:33:06.594 --> 00:33:07.058
OK.

00:33:07.058 --> 00:33:07.522
FRED SAUER: Yeah?

00:33:07.522 --> 00:33:07.986
MANDY WAITE: OK.

00:33:07.986 --> 00:33:09.380
Excellent.

00:33:09.380 --> 00:33:10.370
FRED SAUER: OK, for you.

00:33:10.370 --> 00:33:11.050
let's see.

00:33:11.050 --> 00:33:15.160
I need a testing strategy for
App Engine applications as the

00:33:15.160 --> 00:33:18.400
SDK doesn't implement all the
services exactly the way that

00:33:18.400 --> 00:33:21.290
the production environment does,
do you have any insight

00:33:21.290 --> 00:33:23.820
about how to test your
applications taking into

00:33:23.820 --> 00:33:25.756
account some of those
differences?

00:33:25.756 --> 00:33:28.690
MANDY WAITE: Yeah, so I guess
testing, there's a lot of ways

00:33:28.690 --> 00:33:31.150
to do testing, there's a lot of
levels you can do testing--

00:33:31.150 --> 00:33:32.920
you can do unit testing,
functional testing,

00:33:32.920 --> 00:33:34.650
integration testing.

00:33:34.650 --> 00:33:38.490
Development testing is pretty
important of App Engine, you

00:33:38.490 --> 00:33:41.040
really probably don't want to
deploy an untested version of

00:33:41.040 --> 00:33:43.440
an application and replace the
current version that's working

00:33:43.440 --> 00:33:46.220
really well with one that's not
been tested, particularly

00:33:46.220 --> 00:33:47.320
extensively.

00:33:47.320 --> 00:33:51.160
So, as always, when testing in
the development environment,

00:33:51.160 --> 00:33:53.360
it's probably important to mock
services that you can't

00:33:53.360 --> 00:33:55.680
actually access directly.

00:33:55.680 --> 00:33:56.200
FRED SAUER: Sure.

00:33:56.200 --> 00:33:58.680
MANDY WAITE: So in this case, if
there are any shortfalls in

00:33:58.680 --> 00:34:01.410
what the development server
offers and what App Engine

00:34:01.410 --> 00:34:03.500
offers itself, then you probably
want to mock that.

00:34:03.500 --> 00:34:04.200
FRED SAUER: OK.

00:34:04.200 --> 00:34:08.020
MANDY WAITE: So that would be
the same with accessing

00:34:08.020 --> 00:34:09.889
another API that you don't
want to access from

00:34:09.889 --> 00:34:10.820
development.

00:34:10.820 --> 00:34:13.480
You may just mock that service
up, so you can actually get

00:34:13.480 --> 00:34:17.940
reasonable results from making
course of that service.

00:34:17.940 --> 00:34:20.360
Then you'd probably do the same
with App Engine as well

00:34:20.360 --> 00:34:22.524
if any App Engine services
are missing.

00:34:22.524 --> 00:34:24.659
And beyond that, really there's
lots of different

00:34:24.659 --> 00:34:26.550
options for testing.

00:34:26.550 --> 00:34:29.449
Once you've deployed the
application, you may, as

00:34:29.449 --> 00:34:32.535
Fred's already mentioned, you
may deploy a different app

00:34:32.535 --> 00:34:35.100
version, and then you may
use traffic splitting.

00:34:35.100 --> 00:34:37.960
So App Engine has this feature
of traffic splitting, that

00:34:37.960 --> 00:34:41.580
allows you to incrementally
direct traffic towards new

00:34:41.580 --> 00:34:42.670
versions of your app.

00:34:42.670 --> 00:34:46.260
So you can actually test it in
isolation to a degree, You're

00:34:46.260 --> 00:34:49.114
pushing a small amount of
traffic to it initially, and

00:34:49.114 --> 00:34:52.900
then slowly migrating all of
the traffic over as you get

00:34:52.900 --> 00:34:56.179
more confident in the
application's performance.

00:34:56.179 --> 00:34:58.740
And again also that other
kind of testing,

00:34:58.740 --> 00:34:59.870
low testing and suchlike.

00:34:59.870 --> 00:35:02.450
You don't really want to do load
testing on a production

00:35:02.450 --> 00:35:03.490
applications.

00:35:03.490 --> 00:35:05.380
You would probably need to build
a different version of

00:35:05.380 --> 00:35:08.760
your application, then to pull
it out, and undo your testing

00:35:08.760 --> 00:35:12.790
on that particular version
of your application.

00:35:12.790 --> 00:35:15.040
You're also likely to need data
as well, so you need to

00:35:15.040 --> 00:35:18.230
probably have a representative
set of sample data that you

00:35:18.230 --> 00:35:19.980
can deploy your application.

00:35:19.980 --> 00:35:22.710
If you have an empty DataStore,
it's not really

00:35:22.710 --> 00:35:24.990
going to give you the exactly
same kind of results that your

00:35:24.990 --> 00:35:27.500
production application would
do, so you probably want to

00:35:27.500 --> 00:35:31.980
divine a set of data that you
can actually populate into

00:35:31.980 --> 00:35:34.982
your application initially
to do the testing mode.

00:35:34.982 --> 00:35:35.460
FRED SAUER: Yeah.

00:35:35.460 --> 00:35:39.180
Those are very, very,
very good points.

00:35:39.180 --> 00:35:42.450
The one thing that bites people
a lot of times when

00:35:42.450 --> 00:35:46.260
they're testing in a different
application ID, or even on the

00:35:46.260 --> 00:35:53.420
production application before
they launch is people will not

00:35:53.420 --> 00:35:54.980
use representative workloads.

00:35:54.980 --> 00:35:55.930
MANDY WAITE: Right.

00:35:55.930 --> 00:35:58.810
FRED SAUER: So they'll instead
of creating say 1,000 unique

00:35:58.810 --> 00:36:01.320
accounts, which is sometimes
tricky to do, they'll say, OK,

00:36:01.320 --> 00:36:04.940
we'll take 10 accounts and we'll
have each one log in 100

00:36:04.940 --> 00:36:07.730
times running concurrently.

00:36:07.730 --> 00:36:11.070
And those access patterns
actually change the way the

00:36:11.070 --> 00:36:14.960
data is utilizing, and you don't
get very representative

00:36:14.960 --> 00:36:16.450
results there.

00:36:16.450 --> 00:36:19.840
So you already talked about
making sure that you have some

00:36:19.840 --> 00:36:22.810
good sample data there, making
sure you have good

00:36:22.810 --> 00:36:25.730
representative requests,
and users logging in.

00:36:25.730 --> 00:36:28.030
It's just as important.

00:36:28.030 --> 00:36:31.660
In any case, as much as you
can take the production

00:36:31.660 --> 00:36:35.330
environment that you expect and
replicate it, the closer

00:36:35.330 --> 00:36:36.220
you get, the closer
your results are

00:36:36.220 --> 00:36:37.620
going to match, obviously.

00:36:37.620 --> 00:36:38.430
MANDY WAITE: OK, OK.

00:36:38.430 --> 00:36:41.290
So you can use tools like
Selenium and JMeter, those

00:36:41.290 --> 00:36:42.400
kind of things for
low testing.

00:36:42.400 --> 00:36:43.270
FRED SAUER: Absolutely.

00:36:43.270 --> 00:36:44.890
MANDY WAITE: The same kind of
tools you would use for any

00:36:44.890 --> 00:36:48.050
kind of workload web application
to generate tests.

00:36:48.050 --> 00:36:49.810
And they generate representative
workloads,

00:36:49.810 --> 00:36:51.740
believe me.

00:36:51.740 --> 00:36:52.910
FRED SAUER: They do.

00:36:52.910 --> 00:36:55.790
Just watch out that you're not
testing from one machine that

00:36:55.790 --> 00:36:57.705
just doesn't have a big enough
network connection.

00:36:57.705 --> 00:37:00.110
MANDY WAITE: Yeah, so don't talk
to me about client side,

00:37:00.110 --> 00:37:02.911
because if your client can't
handle the load, you're never

00:37:02.911 --> 00:37:04.210
going to actually load
on the server the way

00:37:04.210 --> 00:37:04.840
you think you are.

00:37:04.840 --> 00:37:07.270
So you need to make sure you can
actually generate the load

00:37:07.270 --> 00:37:10.190
correctly, you're not falling
over lack of client resources

00:37:10.190 --> 00:37:11.670
as well when you're testing.

00:37:11.670 --> 00:37:13.690
FRED SAUER: I guess you can
always get a few instances on

00:37:13.690 --> 00:37:14.410
Compute Engine--

00:37:14.410 --> 00:37:14.860
MANDY WAITE: Ah.

00:37:14.860 --> 00:37:16.110
FRED SAUER: There's some
capacity there.

00:37:16.110 --> 00:37:17.290
MANDY WAITE: That's
interesting there.

00:37:17.290 --> 00:37:17.670
Let's go there.

00:37:17.670 --> 00:37:20.560
FRED SAUER: Nice big
pipe of data.

00:37:20.560 --> 00:37:21.560
Let's see, where did
we leave off?

00:37:21.560 --> 00:37:22.630
It's your turn.

00:37:22.630 --> 00:37:23.920
MANDY WAITE: I've got
one for you, yeah.

00:37:23.920 --> 00:37:26.000
Could you provide us with
state-of-the-art database

00:37:26.000 --> 00:37:26.860
model designs?

00:37:26.860 --> 00:37:29.010
OK, that's a big ask.

00:37:29.010 --> 00:37:32.630
Things like CRM database model,
a bookshelf, an eBay

00:37:32.630 --> 00:37:34.090
kind of application.

00:37:34.090 --> 00:37:39.530
FRED SAUER: OK, it sounds to me
like the person asking the

00:37:39.530 --> 00:37:48.200
question is looking for sample
model, sample applications.

00:37:48.200 --> 00:37:52.120
And I hear the question behind
the question, which is how do

00:37:52.120 --> 00:37:56.050
I go about modeling an
e-commerce site, a CRM site in

00:37:56.050 --> 00:38:00.400
this non-relational,
NoSQL world.

00:38:00.400 --> 00:38:02.410
I want to build an application
that can handle tremendous

00:38:02.410 --> 00:38:05.290
scale, but you've swapped
the tools out from me.

00:38:05.290 --> 00:38:09.860
I'm used to doing development on
a SQL database, relational,

00:38:09.860 --> 00:38:12.440
I know how that works, but I
know that that doesn't scale.

00:38:12.440 --> 00:38:13.470
So help me switch.

00:38:13.470 --> 00:38:15.480
MANDY WAITE: Right.

00:38:15.480 --> 00:38:18.580
FRED SAUER: I think it's
difficult to come up with

00:38:18.580 --> 00:38:20.920
samples that fit every
single vertical.

00:38:20.920 --> 00:38:24.570
But there are some general
things that we can say about

00:38:24.570 --> 00:38:26.840
the way you do data modeling.

00:38:26.840 --> 00:38:31.690
And really it's sort of changing
some of your habits

00:38:31.690 --> 00:38:34.240
and some of the things that you
were taught maybe from the

00:38:34.240 --> 00:38:36.860
beginning about working with
relational databases.

00:38:36.860 --> 00:38:39.780
So one of the first tenets
when you're building a

00:38:39.780 --> 00:38:42.690
relational database model is
everything needs to be

00:38:42.690 --> 00:38:43.765
normalized.

00:38:43.765 --> 00:38:46.450
No data duplicated.

00:38:46.450 --> 00:38:51.380
It's typical in an order entry
system to have 5, 6,7, 10, 12

00:38:51.380 --> 00:38:53.940
different tables, that every
time you want to do a query

00:38:53.940 --> 00:38:56.430
and out what the orders are,
you have to join all these

00:38:56.430 --> 00:38:59.550
tables at run time and
select your results.

00:38:59.550 --> 00:39:02.630
So you might have a table that
has items in it, and it has

00:39:02.630 --> 00:39:06.880
item description, item price,
and some other information;

00:39:06.880 --> 00:39:09.740
then you have an order lines,
which connects to an header,

00:39:09.740 --> 00:39:13.910
you have order line details,
it goes on and on.

00:39:13.910 --> 00:39:18.460
And this is a really good way
of allowing you at run time

00:39:18.460 --> 00:39:21.570
the flexibility to really join
any amount of data with any

00:39:21.570 --> 00:39:23.500
amount of data, which
is what relational

00:39:23.500 --> 00:39:25.540
databases were built for.

00:39:25.540 --> 00:39:31.270
But in a very scalable world,
what you want is actually that

00:39:31.270 --> 00:39:33.530
if you and I both make a request
to our website and

00:39:33.530 --> 00:39:36.610
we're both interacting with the
service, what we want is

00:39:36.610 --> 00:39:39.640
for your queries and my queries
to essentially be able

00:39:39.640 --> 00:39:42.530
to be handled by different parts
of the infrastructure.

00:39:42.530 --> 00:39:44.710
it's a distributed platform.

00:39:44.710 --> 00:39:47.160
And the way to do that
is to isolate your

00:39:47.160 --> 00:39:49.240
data from my data.

00:39:49.240 --> 00:39:54.060
And that means what we don't
want is for if I'm pulling up

00:39:54.060 --> 00:39:56.220
a list of my orders and you're
pulling up a list of your

00:39:56.220 --> 00:40:00.250
orders, we don't want to both be
going to the same table and

00:40:00.250 --> 00:40:01.210
running into each other.

00:40:01.210 --> 00:40:04.390
We also don't want to take
a lot of time at run time

00:40:04.390 --> 00:40:07.600
collecting the data.

00:40:07.600 --> 00:40:12.020
In a distributed system, what
you like to do is amortize the

00:40:12.020 --> 00:40:14.690
cost spread out the cost
and do that the

00:40:14.690 --> 00:40:16.080
cost at right time.

00:40:16.080 --> 00:40:18.590
So when we write the data
how we might do some

00:40:18.590 --> 00:40:23.090
deduplication, so what you would
call denormalization.

00:40:23.090 --> 00:40:29.080
So it's quite common in App
Engine apps for entities to

00:40:29.080 --> 00:40:31.870
have properties with
string values.

00:40:31.870 --> 00:40:36.160
So rather than have an item key
on your item details page,

00:40:36.160 --> 00:40:39.630
you would actually have the
actual item code or the actual

00:40:39.630 --> 00:40:40.700
description.

00:40:40.700 --> 00:40:45.750
If you're putting together,
let's say, countries.

00:40:45.750 --> 00:40:49.360
You have a client that
stores addresses

00:40:49.360 --> 00:40:50.880
and you need countries.

00:40:50.880 --> 00:40:52.860
In App Engine you would actually
just put the country

00:40:52.860 --> 00:40:56.160
code, or even the full country
name in every single entity.

00:40:56.160 --> 00:41:00.390
And you should resist the urge
to say, oh, I don't want the

00:41:00.390 --> 00:41:01.750
duplication of data,
I don't want to pay

00:41:01.750 --> 00:41:02.870
for the extra storage.

00:41:02.870 --> 00:41:05.950
What you're really doing is
you're separating your data

00:41:05.950 --> 00:41:09.710
and my data, and making it very
efficient to handle very

00:41:09.710 --> 00:41:12.120
large number of requests.

00:41:12.120 --> 00:41:14.920
There's more best practices,
but the first one that you

00:41:14.920 --> 00:41:17.570
want to think about
is denormalization

00:41:17.570 --> 00:41:18.850
is not a bad thing.

00:41:18.850 --> 00:41:21.510
That's actually something you
should really just embrace.

00:41:21.510 --> 00:41:26.770
And just pick two users and
imagine that they're both

00:41:26.770 --> 00:41:29.170
doing the same thing in
your application.

00:41:29.170 --> 00:41:31.710
How can you make it so that
the entities that you're

00:41:31.710 --> 00:41:34.420
touching and the entities that
I'm touching are different,

00:41:34.420 --> 00:41:36.800
because as soon as they're
separate from each other, then

00:41:36.800 --> 00:41:39.100
the Google App Engine
infrastructure, the DataStore,

00:41:39.100 --> 00:41:42.710
can put those entities on
different physical hardware,

00:41:42.710 --> 00:41:44.030
different machines.

00:41:44.030 --> 00:41:46.390
And now we can have a
third user, a fourth

00:41:46.390 --> 00:41:47.580
user, a fifth user.

00:41:47.580 --> 00:41:50.720
We can have 100,000 users, it
really doesn't matter how big

00:41:50.720 --> 00:41:53.620
we scale up, because each user
is accessing a different part

00:41:53.620 --> 00:41:54.450
of the system.

00:41:54.450 --> 00:41:55.670
MANDY WAITE: Wow.

00:41:55.670 --> 00:41:57.890
FRED SAUER: So there's a lot to
grasp if you're coming from

00:41:57.890 --> 00:42:00.730
a SQL environment, but once you
play around with it for a

00:42:00.730 --> 00:42:03.850
while, it's really freeing to
say, I really don't care how

00:42:03.850 --> 00:42:06.100
many users show up on my
doorstep tomorrow, I can

00:42:06.100 --> 00:42:10.010
handle 1,000 users, a million
users, a billion users.

00:42:10.010 --> 00:42:11.630
It's really independent
of scale.

00:42:11.630 --> 00:42:15.100
And that's what the App Engine
DataStore provides is

00:42:15.100 --> 00:42:17.760
performance that's independent
of the amount

00:42:17.760 --> 00:42:19.100
of data that's stored.

00:42:19.100 --> 00:42:19.520
MANDY WAITE: Yeah.

00:42:19.520 --> 00:42:20.360
Makes sense.

00:42:20.360 --> 00:42:22.840
It's really good advice.

00:42:22.840 --> 00:42:24.240
FRED SAUER: All right,
so, sorry for

00:42:24.240 --> 00:42:25.710
the long answer there.

00:42:25.710 --> 00:42:27.800
MANDY WAITE: No, I think it's
the kind of question that

00:42:27.800 --> 00:42:28.310
deserves a long answer.

00:42:28.310 --> 00:42:30.850
FRED SAUER: Yeah, it's a common
question, so it's fair

00:42:30.850 --> 00:42:31.810
to spend a little
bit of time--

00:42:31.810 --> 00:42:33.140
MANDY WAITE: A lot of people
moving from the old

00:42:33.140 --> 00:42:35.010
traditional relational
database to

00:42:35.010 --> 00:42:36.366
the NoSQL type one.

00:42:36.366 --> 00:42:36.820
FRED SAUER: Yeah.

00:42:36.820 --> 00:42:40.330
And we should say, is if you do
want a relational system,

00:42:40.330 --> 00:42:41.910
you have a limited
number of users.

00:42:41.910 --> 00:42:43.780
You're building a corporate
application.

00:42:43.780 --> 00:42:46.920
You only know your need for
the existing performance.

00:42:46.920 --> 00:42:49.210
You can use Google Cloud SQL--

00:42:49.210 --> 00:42:52.260
it's MySQL database,
runs in the Cloud,

00:42:52.260 --> 00:42:54.630
managed for you, no headaches.

00:42:54.630 --> 00:42:56.700
And you get all the traditional
kind of

00:42:56.700 --> 00:42:59.050
performance trade offs
and benefits.

00:42:59.050 --> 00:43:00.486
It's still an option.

00:43:00.486 --> 00:43:00.922
MANDY WAITE: Yeah.

00:43:00.922 --> 00:43:03.236
FRED SAUER: All right, next
question for you.

00:43:03.236 --> 00:43:04.050
MANDY WAITE: OK.

00:43:04.050 --> 00:43:06.720
FRED SAUER: Any optimization
recommendations for e-commerce

00:43:06.720 --> 00:43:09.790
website with two million visits
per month, running on

00:43:09.790 --> 00:43:11.600
App Engine Python.

00:43:11.600 --> 00:43:15.080
MANDY WAITE: Well, OK,
how long have we got?

00:43:15.080 --> 00:43:16.190
Optimization recommendation--

00:43:16.190 --> 00:43:18.130
I guess what we want to optimize
for is probably

00:43:18.130 --> 00:43:19.140
important thing here.

00:43:19.140 --> 00:43:23.890
Do we want to for performance,
for load, for latency?

00:43:23.890 --> 00:43:26.060
The cost-- and cost is an
important consideration, when

00:43:26.060 --> 00:43:28.470
it comes to Cloud applications
as well balances cost and

00:43:28.470 --> 00:43:29.560
performances.

00:43:29.560 --> 00:43:30.960
Massively important.

00:43:30.960 --> 00:43:34.860
So I think what I'm going to
step back on this one a little

00:43:34.860 --> 00:43:37.315
bit and say, the best thing to
do is to read the resources

00:43:37.315 --> 00:43:38.960
that are available in
the documentation.

00:43:38.960 --> 00:43:42.330
So we have a couple of really,
really good pages on the App

00:43:42.330 --> 00:43:45.460
Engine documentation site.

00:43:45.460 --> 00:43:47.540
One is called Managing
resources--

00:43:47.540 --> 00:43:49.030
FRED SAUER: Yes, my
favorite one.

00:43:49.030 --> 00:43:50.230
MANDY WAITE: That's Fred's
favorite one.

00:43:50.230 --> 00:43:51.850
Whenever I ask him a question,
he has have you

00:43:51.850 --> 00:43:54.500
read managing resources?

00:43:54.500 --> 00:43:56.430
So I go off and read managing
resources, and

00:43:56.430 --> 00:43:57.490
I'll find the answer.

00:43:57.490 --> 00:43:59.280
So managing resources
is great.

00:43:59.280 --> 00:44:01.340
It tells you have to manage
your instances, manage

00:44:01.340 --> 00:44:05.040
bandwidth, manage concurrency
and those kind of things.

00:44:05.040 --> 00:44:07.690
And so that is an excellent
resource.

00:44:07.690 --> 00:44:09.340
There's also a
performance-related resource

00:44:09.340 --> 00:44:10.640
on the same site.

00:44:10.640 --> 00:44:13.200
I think they're in the same
section, probably one leads

00:44:13.200 --> 00:44:14.690
into the other.

00:44:14.690 --> 00:44:16.330
And I will give you hints
on performance.

00:44:16.330 --> 00:44:18.110
Often optimization and
performance are kind of

00:44:18.110 --> 00:44:22.840
related, very married together
in a lot of ways, so you can

00:44:22.840 --> 00:44:26.130
take those tips as one
big set of tips.

00:44:26.130 --> 00:44:29.800
And you'll fine really good,
good information about how to

00:44:29.800 --> 00:44:31.130
optimize your application.

00:44:31.130 --> 00:44:33.520
If it's about cost again, I
think also managing resources

00:44:33.520 --> 00:44:35.820
also talks about how to look at
your quotas and things like

00:44:35.820 --> 00:44:38.630
an where you're incurring
your costs.

00:44:38.630 --> 00:44:41.680
And also that becoming back
to Appstats So Appstats is

00:44:41.680 --> 00:44:44.100
another really good essential
tool for looking at the way

00:44:44.100 --> 00:44:45.690
you're spending your time
in your application.

00:44:45.690 --> 00:44:49.500
So if you're concerned about
latency, having taken too long

00:44:49.500 --> 00:44:52.610
to respond, so you go and use
this, then you can do some

00:44:52.610 --> 00:44:55.190
analysis with Appstats to find
that way you're spending time,

00:44:55.190 --> 00:44:57.680
and maybe tune your application
to spend less time

00:44:57.680 --> 00:44:58.350
doing those RPCs.

00:44:58.350 --> 00:44:59.136
FRED SAUER: OK.

00:44:59.136 --> 00:45:00.180
MANDY WAITE: Does
it seem good?

00:45:00.180 --> 00:45:01.260
FRED SAUER: Yeah.

00:45:01.260 --> 00:45:03.530
I love the managing
resources article.

00:45:03.530 --> 00:45:05.930
If you just do a web search
for App Engine managing

00:45:05.930 --> 00:45:08.850
resources, you'd probably hit
that article in our Docs.

00:45:08.850 --> 00:45:10.330
And think of it as
a checklist.

00:45:10.330 --> 00:45:12.570
It doesn't tell you exactly of
everything to do, but it's a

00:45:12.570 --> 00:45:13.050
checklist--

00:45:13.050 --> 00:45:15.510
think about this, think about
this-- and you go through each

00:45:15.510 --> 00:45:17.940
one and you know your
replication best.

00:45:17.940 --> 00:45:18.770
I.e. can tune it.

00:45:18.770 --> 00:45:21.850
If you just want the what's
the one thing I need to do

00:45:21.850 --> 00:45:23.480
that I may not be doing
that's going to give

00:45:23.480 --> 00:45:24.295
me the biggest benefit?

00:45:24.295 --> 00:45:27.410
I say, turn on Memcache.

00:45:27.410 --> 00:45:29.200
And some of you can
get that for free.

00:45:29.200 --> 00:45:33.600
If you're using in Python the
NDBAPI, or in Java, if you're

00:45:33.600 --> 00:45:36.830
using Objective, which is a
third party [INAUDIBLE]

00:45:36.830 --> 00:45:39.820
layer, they both have
Memcache built in.

00:45:39.820 --> 00:45:42.360
So any time you write or read
from the DataStore, it's

00:45:42.360 --> 00:45:43.510
checking Memcache.

00:45:43.510 --> 00:45:46.170
That can save you a lot of
DataStore operations, and it

00:45:46.170 --> 00:45:47.310
won't cost you a single
line of code.

00:45:47.310 --> 00:45:48.440
MANDY WAITE: Wow, fantastic.

00:45:48.440 --> 00:45:49.630
So use Memcache.

00:45:49.630 --> 00:45:50.010
FRED SAUER: Use Memcache.

00:45:50.010 --> 00:45:52.250
If you're not using Memcache,
use Memcache.

00:45:52.250 --> 00:45:53.770
MANDY WAITE: I was about to
suggest you use Mamcache.

00:45:56.490 --> 00:45:57.990
OK, so I've got one for you.

00:45:57.990 --> 00:45:59.370
Oh, another performance.

00:45:59.370 --> 00:46:03.330
So what is the performance
difference between GAE Python,

00:46:03.330 --> 00:46:05.560
GAE Java, and GAE Go?

00:46:05.560 --> 00:46:06.270
There are three different
run times.

00:46:06.270 --> 00:46:07.550
FRED SAUER: OK.

00:46:07.550 --> 00:46:09.140
Fair question.

00:46:09.140 --> 00:46:11.290
This is actually one that
comes up a lot.

00:46:11.290 --> 00:46:16.400
It's a question that I tried
first not answer, and then I'm

00:46:16.400 --> 00:46:17.870
happy to give an answer.

00:46:17.870 --> 00:46:23.210
But I'd like to start out
and say there are subtle

00:46:23.210 --> 00:46:25.060
differences between the three
different runtime

00:46:25.060 --> 00:46:25.990
environments.

00:46:25.990 --> 00:46:29.220
Python, if you write any
application in Python versus

00:46:29.220 --> 00:46:32.550
Java, versus Go, there are some
things that work better

00:46:32.550 --> 00:46:35.420
in one language versus
another.

00:46:35.420 --> 00:46:38.080
What's probably much more
important for your

00:46:38.080 --> 00:46:38.830
application.

00:46:38.830 --> 00:46:41.700
For your service that you
are running is what your

00:46:41.700 --> 00:46:43.700
developers know and where
they're going to be

00:46:43.700 --> 00:46:44.990
productive.

00:46:44.990 --> 00:46:48.910
So if you have a Python shop,
everyone knows Python really

00:46:48.910 --> 00:46:50.700
well, and there's one or two
guys that know a little bit of

00:46:50.700 --> 00:46:54.670
Java; even if Java were slightly
better for your

00:46:54.670 --> 00:46:57.660
application, you're going to
be much more productive

00:46:57.660 --> 00:46:59.050
building in Python.

00:46:59.050 --> 00:47:00.220
So you should do that.

00:47:00.220 --> 00:47:03.780
And the same goes the
other way around.

00:47:03.780 --> 00:47:07.640
Having said that, if all things
were equal, if you

00:47:07.640 --> 00:47:10.690
hadn't hired any development
staff yet, or you could pick

00:47:10.690 --> 00:47:13.310
any language, or you just want
to learn something new--

00:47:13.310 --> 00:47:15.630
there are some trade
offs to make.

00:47:15.630 --> 00:47:18.790
And maybe you should look at the
complexity of the product

00:47:18.790 --> 00:47:22.430
that you're building and how
long it's going to last.

00:47:22.430 --> 00:47:26.090
Python is a scripting language,
tends to be a little

00:47:26.090 --> 00:47:29.650
bit more productive for people
prototyping, iterating in

00:47:29.650 --> 00:47:33.490
small teams, working together,
let's you be very agile-- you

00:47:33.490 --> 00:47:35.610
can do things very quickly.

00:47:35.610 --> 00:47:38.010
If on the other hand, you're
building a product, and you

00:47:38.010 --> 00:47:42.040
have a very large development
team, or a very complex code

00:47:42.040 --> 00:47:44.890
base, you're doing a lot of
refactoring and you could use

00:47:44.890 --> 00:47:47.870
some help from tools that can
refactor code, do static

00:47:47.870 --> 00:47:50.490
analysis; then Java is probably
the language that's

00:47:50.490 --> 00:47:52.180
more productive.

00:47:52.180 --> 00:47:55.660
And if you wanted to do
something that's really

00:47:55.660 --> 00:47:59.430
performance sensitive, you want
to build with the stuff

00:47:59.430 --> 00:48:02.780
that Googlers are building on,
I would seriously check out

00:48:02.780 --> 00:48:05.180
the Go runtime.

00:48:05.180 --> 00:48:07.100
There are some really pleasing
results there.

00:48:07.100 --> 00:48:10.130
Having said that, that's an
experimental runtime still, so

00:48:10.130 --> 00:48:12.840
if you're building a production
app right now,

00:48:12.840 --> 00:48:15.880
probably Java or Python.

00:48:15.880 --> 00:48:18.290
And pick the one you'll
be in productive.

00:48:18.290 --> 00:48:20.080
MANDY WAITE: So retraining your
Java developers, so you

00:48:20.080 --> 00:48:20.560
[INAUDIBLE]

00:48:20.560 --> 00:48:23.120
in Go is probably not the best
way to get performance?

00:48:23.120 --> 00:48:26.410
FRED SAUER: Unless that's
what motivates them.

00:48:26.410 --> 00:48:29.020
For some people a new language
is the thing that wakes them

00:48:29.020 --> 00:48:31.980
up in the morning, and more
so than a cup of coffee.

00:48:31.980 --> 00:48:35.870
For other people it's being able
to be productive and hit

00:48:35.870 --> 00:48:36.890
the ground running.

00:48:36.890 --> 00:48:37.320
MANDY WAITE: Excellent.

00:48:37.320 --> 00:48:37.750
OK.

00:48:37.750 --> 00:48:38.600
Well, good advice.

00:48:38.600 --> 00:48:40.500
FRED SAUER: OK.

00:48:40.500 --> 00:48:42.600
Let's shoot one back
at you here.

00:48:42.600 --> 00:48:44.310
Can I pre-populate
the DataStore?

00:48:44.310 --> 00:48:48.110
Is there a front end to add,
remove, or update entries in

00:48:48.110 --> 00:48:48.930
the DataStore.

00:48:48.930 --> 00:48:50.440
MANDY WAITE: OK, so now I'm
going to punt this one a

00:48:50.440 --> 00:48:52.600
little bit, because we discussed
this one yesterday,

00:48:52.600 --> 00:48:55.510
and we talked about some things
and some articles that

00:48:55.510 --> 00:48:58.730
have been published about
doing this very thing.

00:48:58.730 --> 00:49:01.220
So I'd like to actually talk
to you about that.

00:49:01.220 --> 00:49:03.640
I'll bounce the question back
to you and ask what you feel

00:49:03.640 --> 00:49:05.720
is the best way to
pre-populate.

00:49:05.720 --> 00:49:08.780
FRED SAUER: So, I think the
answer depends a little bit.

00:49:11.340 --> 00:49:14.660
If you have some data on your
client, like on your desktop,

00:49:14.660 --> 00:49:18.170
maybe there's some legacy data
that you need to import, some

00:49:18.170 --> 00:49:21.480
configuration data that you want
to do programmatically,

00:49:21.480 --> 00:49:24.260
the development server of or
the SDK does have a little

00:49:24.260 --> 00:49:26.056
tool for uploading data.

00:49:26.056 --> 00:49:27.560
MANDY WAITE: OK.

00:49:27.560 --> 00:49:31.140
FRED SAUER: That works fine for
small scale, and that's a

00:49:31.140 --> 00:49:33.410
tool that's been around
for a long time.

00:49:33.410 --> 00:49:36.190
Probably what you want to do
if you're doing anything

00:49:36.190 --> 00:49:40.530
larger than trivial operations
is just create a Cloud

00:49:40.530 --> 00:49:45.210
Endpoints application
version of your app.

00:49:45.210 --> 00:49:47.450
It doesn't mean you have to
build your entire service

00:49:47.450 --> 00:49:50.720
around it, but maybe this is an
administrative gateway, or

00:49:50.720 --> 00:49:53.170
this is a way that a mobile
clients upload data to your

00:49:53.170 --> 00:49:54.290
application.

00:49:54.290 --> 00:50:00.070
Cloud Endpoints is a great easy
way to create an API and

00:50:00.070 --> 00:50:03.460
will automatically generate
client libraries for Android,

00:50:03.460 --> 00:50:08.730
for iOS, for HTML5; and from
any of those three clients,

00:50:08.730 --> 00:50:11.210
you can make your calls
to the server side.

00:50:11.210 --> 00:50:15.190
If you're doing Python, a
colleague of ours, Danny

00:50:15.190 --> 00:50:19.310
Hermes has a pretty cool project
called Cloud Endpoints

00:50:19.310 --> 00:50:21.130
Proto DataStore.

00:50:21.130 --> 00:50:22.680
MANDY WAITE: OK.

00:50:22.680 --> 00:50:25.250
FRED SAUER: Or maybe it's
Endpoints Proto DataStore.

00:50:25.250 --> 00:50:27.490
But it's an application, where
you essentially define your

00:50:27.490 --> 00:50:31.360
Python DataStore models, and
then you just swap up the

00:50:31.360 --> 00:50:35.940
class name that you're
inheriting from, and then all

00:50:35.940 --> 00:50:39.970
your classes magically turn
into Cloud Endpoints.

00:50:39.970 --> 00:50:44.060
And so you can make calls like
insert entities into the

00:50:44.060 --> 00:50:46.280
DataStore, remove them,
do queries.

00:50:46.280 --> 00:50:48.190
All really easy.

00:50:48.190 --> 00:50:51.620
So that's probably the
way that I would go.

00:50:51.620 --> 00:50:55.180
And then there's maybe one more
trick up your sleeve, the

00:50:55.180 --> 00:50:57.570
SDK has a thing called
a Remote_API--

00:50:57.570 --> 00:50:58.680
Remote underscore API.

00:50:58.680 --> 00:50:59.170
MANDY WAITE: OK.

00:50:59.170 --> 00:51:01.710
FRED SAUER: And it's a way for
the development server to

00:51:01.710 --> 00:51:04.010
essentially proxy its DataStore
and then cache

00:51:04.010 --> 00:51:07.040
request to the production
environment.

00:51:07.040 --> 00:51:10.790
So what you do is you deploy a
special version of your app

00:51:10.790 --> 00:51:14.100
with just like a one line config
flag, this is enabled

00:51:14.100 --> 00:51:15.490
Remote_API.

00:51:15.490 --> 00:51:20.010
And then you can run your code
locally as if you're connected

00:51:20.010 --> 00:51:21.890
to the DataStore, but
everything's been proxy'd to

00:51:21.890 --> 00:51:23.300
the Cloud for you.

00:51:23.300 --> 00:51:26.460
So that's another
neat trick for

00:51:26.460 --> 00:51:27.640
migrating data in the Cloud.

00:51:27.640 --> 00:51:31.600
Or it's a great way to do
debugging, you connect to your

00:51:31.600 --> 00:51:34.420
production or staging
environment, and you can

00:51:34.420 --> 00:51:38.520
interact with it, while you're
in a Python console, you have

00:51:38.520 --> 00:51:39.714
your real data models,
but you're looking

00:51:39.714 --> 00:51:41.410
at your real data.

00:51:41.410 --> 00:51:42.060
MANDY WAITE: Excellent.

00:51:42.060 --> 00:51:42.550
OK.

00:51:42.550 --> 00:51:45.230
I would not have been able to
come up with that answer.

00:51:45.230 --> 00:51:47.900
So I'll let you ask me another
one now, because I think I

00:51:47.900 --> 00:51:49.640
have more questions for you
than you have for me.

00:51:49.640 --> 00:51:51.090
FRED SAUER: OK.

00:51:51.090 --> 00:51:55.170
Let's see, startup times for my
App Engine Java are pretty

00:51:55.170 --> 00:51:58.260
high for my applications,
around 30 seconds--

00:51:58.260 --> 00:52:00.460
yeah, that is actually
pretty high and

00:52:00.460 --> 00:52:02.500
Java apps in general--

00:52:02.500 --> 00:52:06.100
even with reserved instances
that we feel are

00:52:06.100 --> 00:52:08.840
underutilized, we're still
getting warm-up requests.

00:52:08.840 --> 00:52:09.850
Any advice?

00:52:09.850 --> 00:52:12.360
MANDY WAITE: Yeah, so I think,
again, this is something that

00:52:12.360 --> 00:52:15.060
is going to be covered quite
extensively in Google I/O. We

00:52:15.060 --> 00:52:17.400
have a talk, Matt Stephenson is
going to be giving a talk

00:52:17.400 --> 00:52:19.430
on autoscaling Java.

00:52:19.430 --> 00:52:21.840
So that talk is likely to
cover much of that.

00:52:21.840 --> 00:52:25.825
And Matt Stephenson also with
one of our other guys from

00:52:25.825 --> 00:52:29.320
Cloud Solutions, Wally Yau, he
wrote an article that was

00:52:29.320 --> 00:52:33.410
published on the, again, the
App Engine Developers

00:52:33.410 --> 00:52:38.550
documentation site for managing
optimization of

00:52:38.550 --> 00:52:40.520
startup Spring applications.

00:52:40.520 --> 00:52:43.220
And often we find that it's
Spring applications that

00:52:43.220 --> 00:52:45.050
really take the longest
time to start.

00:52:45.050 --> 00:52:46.810
There's a lot of libraries
involved, there's a lot of

00:52:46.810 --> 00:52:49.090
scanning of classes and
suchlike that goes one

00:52:49.090 --> 00:52:51.340
automatically with Spring
when it starts up.

00:52:51.340 --> 00:52:57.070
And that can lead to quite
long low times.

00:52:57.070 --> 00:53:01.210
As I suspect, this is probably
likely to be a Spring issue.

00:53:01.210 --> 00:53:04.490
At the same time, there's also
the possibility to go loading

00:53:04.490 --> 00:53:06.010
libraries that you may
not need immediately.

00:53:06.010 --> 00:53:08.750
And you may want to actually
look at lazy loading those--

00:53:08.750 --> 00:53:10.170
loading them in the background--
as opposed to

00:53:10.170 --> 00:53:13.000
actually loading them as
you're instant starts.

00:53:13.000 --> 00:53:14.980
Anything that you can do to
minimize the amount of time it

00:53:14.980 --> 00:53:18.140
takes to start the application
is good.

00:53:18.140 --> 00:53:21.070
And really, I think, that's
the key to handling things

00:53:21.070 --> 00:53:24.100
like a startup requests, things
that will cause a new

00:53:24.100 --> 00:53:25.520
instance to start.

00:53:25.520 --> 00:53:28.360
It's basically just to minimize
the time it takes to

00:53:28.360 --> 00:53:29.820
load your application
initially.

00:53:29.820 --> 00:53:32.840
Only load what you need,
lazy load everything.

00:53:32.840 --> 00:53:34.940
Don't load things you
don't need to load.

00:53:34.940 --> 00:53:37.200
And also make sure if you're
using Spring that you follow

00:53:37.200 --> 00:53:39.730
the advice in the Google
[INAUDIBLE]

00:53:39.730 --> 00:53:43.330
and in that particular document
on the website.

00:53:43.330 --> 00:53:45.580
That will minimize
your setup times.

00:53:45.580 --> 00:53:48.360
And you won't be so worried
about startup requests then.

00:53:48.360 --> 00:53:50.740
You can actually loading a new
instance, because that one

00:53:50.740 --> 00:53:52.093
takes that long to do.

00:53:52.093 --> 00:53:53.080
FRED SAUER: Yeah.

00:53:53.080 --> 00:53:54.140
All very good advice.

00:53:54.140 --> 00:53:58.370
So, yeah, definitely check
out the Google I/O talk.

00:53:58.370 --> 00:54:01.240
All the talks at I/O are going
to be recorded, so we can

00:54:01.240 --> 00:54:04.220
check those out, talks
happening next week.

00:54:04.220 --> 00:54:05.110
So it's a great resource.

00:54:05.110 --> 00:54:06.130
MANDY WAITE: That's on
Wednesday, by the way.

00:54:06.130 --> 00:54:08.160
Are they live streamed?

00:54:08.160 --> 00:54:09.325
FRED SAUER: Some of
the talks are.

00:54:09.325 --> 00:54:10.690
MANDY WAITE: Some of the talks
are live streamed, yeah.

00:54:10.690 --> 00:54:12.740
FRED SAUER: I'm not sure if
Matt's talk is live streamed,

00:54:12.740 --> 00:54:15.310
but you'll be able to catch
it pretty soon.

00:54:15.310 --> 00:54:17.130
Maybe something-- just to say
a little bit more general

00:54:17.130 --> 00:54:21.020
about App Engine Java,
especially these Spring apps

00:54:21.020 --> 00:54:25.220
or applications that have these
big frameworks and long

00:54:25.220 --> 00:54:27.080
loading times.

00:54:27.080 --> 00:54:29.730
So one way to think about this
is the way that we've been

00:54:29.730 --> 00:54:34.870
building application servers for
many years has been in an

00:54:34.870 --> 00:54:37.510
environment where you
would spin up, say,

00:54:37.510 --> 00:54:39.560
five application servers.

00:54:39.560 --> 00:54:41.675
And these would be big
server that would

00:54:41.675 --> 00:54:43.260
sit in a rack somewhere.

00:54:43.260 --> 00:54:45.950
And they would take several
minutes to boot up, do all the

00:54:45.950 --> 00:54:47.240
memory checks.

00:54:47.240 --> 00:54:49.990
Machine would load up, it would
load the application

00:54:49.990 --> 00:54:52.000
server software, than would
load the specific

00:54:52.000 --> 00:54:53.700
applications.

00:54:53.700 --> 00:54:57.450
And that whole process could
take 10-20 minutes sometimes.

00:54:57.450 --> 00:55:00.600
But then those servers they
would run for weeks or months,

00:55:00.600 --> 00:55:03.000
or however long they
needed to run.

00:55:03.000 --> 00:55:07.380
And in that environment, what
you actually want to do is do

00:55:07.380 --> 00:55:09.827
all the expense work upfront
when you're loading the

00:55:09.827 --> 00:55:12.130
application, because you know
you're only going to that one

00:55:12.130 --> 00:55:15.330
time, and then you're going to
have long-lived servers,

00:55:15.330 --> 00:55:18.760
App Engine tries to really
fundamentally deal with

00:55:18.760 --> 00:55:21.690
applications in a
different way.

00:55:21.690 --> 00:55:25.120
When we want to scale up very
quickly to handle an increase

00:55:25.120 --> 00:55:28.550
in traffic to your website, or
when we want to scale down,

00:55:28.550 --> 00:55:31.830
because there's a little bit
less traffic coming in, we

00:55:31.830 --> 00:55:34.310
really need the ability to
quickly spin up new instances

00:55:34.310 --> 00:55:38.340
of your application, and then
spin them back down, at a

00:55:38.340 --> 00:55:39.820
moment's notice.

00:55:39.820 --> 00:55:44.970
And so App Engine is optimized
around apps that have a very

00:55:44.970 --> 00:55:46.520
short startup time.

00:55:46.520 --> 00:55:49.440
Ideally, it's hundreds of
milliseconds, maybe it's a few

00:55:49.440 --> 00:55:51.550
seconds on the outset.

00:55:51.550 --> 00:55:55.310
When you start getting into a
30-second time frame, that's

00:55:55.310 --> 00:55:56.860
really a whole different
ballpark.

00:55:59.600 --> 00:56:02.190
Now, if that's something you
want to do and you want to run

00:56:02.190 --> 00:56:04.480
Spring applications, and you
say, I get a lot of benefit

00:56:04.480 --> 00:56:07.170
out of that, and why can't
I just run an App Engine?

00:56:07.170 --> 00:56:07.980
You can.

00:56:07.980 --> 00:56:11.900
We actually, I think, a year
ago, we introduced some extra

00:56:11.900 --> 00:56:15.840
knobs on the admin console,
specifically for these users.

00:56:15.840 --> 00:56:18.180
What you'll need to do is go
into the admin console, make

00:56:18.180 --> 00:56:21.520
sure you enable billing, because
that exposes all the

00:56:21.520 --> 00:56:22.360
knobs that we have.

00:56:22.360 --> 00:56:24.280
And then go into your
application settings.

00:56:24.280 --> 00:56:27.260
And there's a couple of settings
around Min/Max Idle

00:56:27.260 --> 00:56:31.740
Instances , Min/Max Pending
Request Latency.

00:56:31.740 --> 00:56:36.740
And those allow you to tune the
cost performance of your

00:56:36.740 --> 00:56:38.070
application.

00:56:38.070 --> 00:56:41.920
So if you know you have long
loading requests and you just

00:56:41.920 --> 00:56:45.550
need to keep in a few extra
instances around to make sure

00:56:45.550 --> 00:56:47.730
you can handle those spikes,
even though you have long

00:56:47.730 --> 00:56:49.880
instances, you can
actually crank up

00:56:49.880 --> 00:56:51.030
the min idle instances.

00:56:51.030 --> 00:56:51.530
MANDY WAITE: Right?

00:56:51.530 --> 00:56:52.030
OK.

00:56:52.030 --> 00:56:54.830
FRED SAUER: On the other hand,
if you're a fast starting app

00:56:54.830 --> 00:56:57.690
and you're very cost sensitive,
there's ways to

00:56:57.690 --> 00:56:59.490
turn it the other direction.

00:56:59.490 --> 00:57:02.260
We recommend everyone start
out with the automatic

00:57:02.260 --> 00:57:05.950
settings, but we do have some
special knobs for that.

00:57:05.950 --> 00:57:09.550
And I'm sure Matt in his talk
will go into a lot more detail

00:57:09.550 --> 00:57:12.370
than we did right here,
specifically around Java

00:57:12.370 --> 00:57:12.910
application.

00:57:12.910 --> 00:57:16.060
So that's definitely something
we care about, and we'll have

00:57:16.060 --> 00:57:17.476
some advice for you.

00:57:17.476 --> 00:57:18.700
MANDY WAITE: Yeah,
that's great.

00:57:18.700 --> 00:57:19.910
[INAUDIBLE] give excellent
advice.

00:57:19.910 --> 00:57:20.900
Oh, you've only got
one question.

00:57:20.900 --> 00:57:21.540
FRED SAUER: I've got one.

00:57:21.540 --> 00:57:22.080
MANDY WAITE: And
I've got four.

00:57:22.080 --> 00:57:23.830
FRED SAUER: And then we have a
few more that came up in a

00:57:23.830 --> 00:57:26.795
moderator since we looked
at these yesterday.

00:57:26.795 --> 00:57:28.350
MANDY WAITE: Well, let me
ask you a question.

00:57:28.350 --> 00:57:29.860
FRED SAUER: OK, go for it.

00:57:29.860 --> 00:57:32.330
MANDY WAITE: How popular is
Google App Engine for Java?

00:57:32.330 --> 00:57:34.160
Most examples seem to
be reaching for

00:57:34.160 --> 00:57:37.100
Google App Engine Python.

00:57:37.100 --> 00:57:39.600
FRED SAUER: I hope that's not
to the case as far as the

00:57:39.600 --> 00:57:41.530
sample mismatch.

00:57:41.530 --> 00:57:45.840
It is true that we launched
App Engine Python a year

00:57:45.840 --> 00:57:47.670
before the Java runtime.

00:57:47.670 --> 00:57:52.600
So in 2008 was Python, and then
in 2009 we added the Java

00:57:52.600 --> 00:57:55.240
runtime, and later
we added Go.

00:57:55.240 --> 00:57:58.210
So there may be just a little
bit of bias still left in the

00:57:58.210 --> 00:58:03.240
system, because we originally
set out to just

00:58:03.240 --> 00:58:06.270
have a Python runtime.

00:58:06.270 --> 00:58:08.980
But I think things are
fairly evened out.

00:58:08.980 --> 00:58:14.100
If you go to the Google Cloud
Platform user on GitHub,

00:58:14.100 --> 00:58:15.330
there's many samples there.

00:58:15.330 --> 00:58:17.970
There's Java and Python samples;
documentation, there

00:58:17.970 --> 00:58:21.380
should be samples in
both languages.

00:58:21.380 --> 00:58:25.240
I don't recall the exact kind
of popularity, but I thought

00:58:25.240 --> 00:58:28.710
it was fairly even, maybe a
60/40 split or something like

00:58:28.710 --> 00:58:33.290
that, with some percentage
are going to go.

00:58:33.290 --> 00:58:37.410
But you shouldn't feel like Java
is an under appreciated

00:58:37.410 --> 00:58:39.865
language in App Engine, it's
definitely not the case.

00:58:39.865 --> 00:58:43.380
And if you look at the talks
at I/O, you'll then see our

00:58:43.380 --> 00:58:46.610
focus on Java users and making
sure they as just as good

00:58:46.610 --> 00:58:48.910
experience as Python.

00:58:48.910 --> 00:58:50.903
So pick the language that's
good for you.

00:58:50.903 --> 00:58:53.716
MANDY WAITE: Yeah, definitely,
Yeah, absolutely good advice.

00:58:53.716 --> 00:58:54.730
Do you have one for me?

00:58:54.730 --> 00:58:56.220
FRED SAUER: OK, I do.

00:58:56.220 --> 00:58:59.540
So the App Engine documentation
is incomplete,

00:58:59.540 --> 00:59:01.660
for example, the NDB Docs--

00:59:01.660 --> 00:59:04.580
NDB is a Python library
for the DataStore--

00:59:04.580 --> 00:59:10.190
remain minimal and really
document possible errors.

00:59:10.190 --> 00:59:11.830
Anything you can
do about this?

00:59:11.830 --> 00:59:13.580
Or are there other places
I should be looking?

00:59:13.580 --> 00:59:16.150
MANDY WAITE: Well, I guess
really, the one of the

00:59:16.150 --> 00:59:18.160
standard answers is to
go to Stack Overflow.

00:59:18.160 --> 00:59:20.370
You're going to find
documentation, people talk

00:59:20.370 --> 00:59:24.010
about things undocumented or
not so well documented,

00:59:24.010 --> 00:59:26.690
providing examples and suchlike
on Stack Overflow.

00:59:26.690 --> 00:59:28.200
Pretty much everything anybody's
tried to do is going

00:59:28.200 --> 00:59:30.230
to be documented on
Stack Overflow.

00:59:30.230 --> 00:59:32.020
Things that have worked, things
that haven't worked--

00:59:32.020 --> 00:59:34.010
so you can probably find
good answers there.

00:59:34.010 --> 00:59:36.650
If you want to contribute
information as well, Stack

00:59:36.650 --> 00:59:37.760
Overflow is not just
for questions.

00:59:37.760 --> 00:59:40.410
It's also for sharing
information as well.

00:59:40.410 --> 00:59:43.360
So if you actually have some
useful information--

00:59:43.360 --> 00:59:45.070
something you've written
about, something you've

00:59:45.070 --> 00:59:45.780
documented--

00:59:45.780 --> 00:59:47.946
you can share that on Stack
Overflow as well.

00:59:47.946 --> 00:59:49.560
Definitely a good
place to put it.

00:59:49.560 --> 00:59:51.310
And it also stops you from
being spread around

00:59:51.310 --> 00:59:51.680
everywhere.

00:59:51.680 --> 00:59:54.140
We could have multiple places
where people would go to find

00:59:54.140 --> 00:59:55.040
different documentation.

00:59:55.040 --> 00:59:58.070
So that kind of ad hoc
organization probably is the

00:59:58.070 --> 01:00:01.010
best place in the
Stack Overflow.

01:00:01.010 --> 01:00:05.350
FRED SAUER: Yeah, I think
of the App Engine core

01:00:05.350 --> 01:00:07.090
documentation is kind
of the reference

01:00:07.090 --> 01:00:08.870
material, the baseline.

01:00:08.870 --> 01:00:11.860
Sometimes there's Javadocs or
Pydocs, two of the methods

01:00:11.860 --> 01:00:15.570
that may help a little bit
further, but some of these,

01:00:15.570 --> 01:00:19.130
like how do I use this
specifically, Stack Overflow

01:00:19.130 --> 01:00:20.610
is a great place to go.

01:00:20.610 --> 01:00:23.930
And we do sometimes, if we find
that there's a lot of

01:00:23.930 --> 01:00:26.880
questions around a particular
are in Stack Overflow, we do

01:00:26.880 --> 01:00:29.990
go in and update the
documentation, and maybe add

01:00:29.990 --> 01:00:31.620
some clarification.

01:00:31.620 --> 01:00:33.930
So that's definitely a
place to contribute.

01:00:33.930 --> 01:00:34.930
MANDY WAITE: Yeah, definitely.

01:00:34.930 --> 01:00:38.120
Excellent, OK, so a
question for you.

01:00:38.120 --> 01:00:40.020
FRED SAUER: All right.

01:00:40.020 --> 01:00:41.700
MANDY WAITE: OK, I'm going to
read this through first, so I

01:00:41.700 --> 01:00:42.980
know what I'm asking.

01:00:42.980 --> 01:00:44.270
I've developed an
application--

01:00:44.270 --> 01:00:45.490
12 [INAUDIBLE].

01:00:45.490 --> 01:00:48.150
But today I had difficulties
to setup the IT strategy

01:00:48.150 --> 01:00:50.310
related to the maintenance
of the source code.

01:00:50.310 --> 01:00:53.160
Taking into account the amount
of leases of Google App Engine

01:00:53.160 --> 01:00:56.300
platform, do you have
any advice?

01:00:56.300 --> 01:00:59.420
FRED SAUER: If I remember
right, I think you were

01:00:59.420 --> 01:01:01.890
suggesting that the person who
asked this question, asked a

01:01:01.890 --> 01:01:02.750
few more questions.

01:01:02.750 --> 01:01:05.610
And I think you said, it look
like they were maybe running

01:01:05.610 --> 01:01:08.600
Python 2.5.

01:01:08.600 --> 01:01:14.960
Yeah, so App Engine has a
deprecation policy on all of

01:01:14.960 --> 01:01:16.370
our production services--

01:01:16.370 --> 01:01:19.270
I believe it's one year--

01:01:19.270 --> 01:01:22.530
and that's our guaranteed to you
that we're not just going

01:01:22.530 --> 01:01:27.900
to change APIs on you, that
when we bump up the next

01:01:27.900 --> 01:01:29.980
version of the application, your
application is going to

01:01:29.980 --> 01:01:32.830
continue working, the APIs are
going to behave the way that

01:01:32.830 --> 01:01:34.610
they expected.

01:01:34.610 --> 01:01:37.540
Having said that, there
are incremental

01:01:37.540 --> 01:01:39.770
changes that we make.

01:01:39.770 --> 01:01:43.320
Just like the Python
languages is--

01:01:43.320 --> 01:01:46.450
Python 2.5 is not as common
any more, it's Python 2.7.

01:01:49.100 --> 01:01:51.210
At some point you need
to make a switch.

01:01:51.210 --> 01:01:54.350
It should certainly not
be a regular burden.

01:01:54.350 --> 01:01:58.410
I have applications that I
deployed more than a year ago,

01:01:58.410 --> 01:02:00.160
and they are still running
just fine.

01:02:00.160 --> 01:02:03.020
That's the experience of
most of our users.

01:02:03.020 --> 01:02:06.070
Usually what we find is that
developers are making changes

01:02:06.070 --> 01:02:08.830
because they want to take
advantage of new APIs or new

01:02:08.830 --> 01:02:11.960
capabilities that
we've launched.

01:02:11.960 --> 01:02:16.330
There've been probably a couple
of cases, where we've

01:02:16.330 --> 01:02:20.440
had a change in--

01:02:20.440 --> 01:02:26.140
not a breaking API change, but
a new version of a capability

01:02:26.140 --> 01:02:27.920
that we've made available--

01:02:27.920 --> 01:02:32.320
and that's from Python
2.5 to 2.7.

01:02:32.320 --> 01:02:34.490
There are some differences.

01:02:34.490 --> 01:02:38.465
And Python 2.7 provides a lot of
great features that weren't

01:02:38.465 --> 01:02:41.610
just possible in 2.5, like the
ability to handle concurrent

01:02:41.610 --> 01:02:45.520
requests, there's many
language preferences.

01:02:45.520 --> 01:02:48.780
We also had to change from the
Master/Slave DataStore to the

01:02:48.780 --> 01:02:52.040
High Replication DataStore,
which has huge advantages.

01:02:52.040 --> 01:02:54.940
The Master/Slave DataStore had
regular maintenance periods,

01:02:54.940 --> 01:02:56.880
there are still a few
users on that.

01:02:56.880 --> 01:02:59.560
But I believe the majority of
users are now on the High

01:02:59.560 --> 01:03:01.510
Replication DataStore.

01:03:01.510 --> 01:03:02.900
Just a much better experience.

01:03:02.900 --> 01:03:04.890
When you commit your data, it
gets committed to multiple

01:03:04.890 --> 01:03:07.110
data centers synchronously.

01:03:07.110 --> 01:03:10.380
When a data center goes down,
you don't even notice it.

01:03:10.380 --> 01:03:15.140
And that sort of improvement
is sometimes worth going

01:03:15.140 --> 01:03:17.590
through the effort and making
sure that the way you're

01:03:17.590 --> 01:03:19.700
executing queries is still
compatible with the new

01:03:19.700 --> 01:03:24.350
version, but you have plenty of
time to make that change on

01:03:24.350 --> 01:03:25.810
your schedule.

01:03:25.810 --> 01:03:32.200
So what we find that developers
do is they use one

01:03:32.200 --> 01:03:35.880
version of the SDK, they're
developing locally, they go

01:03:35.880 --> 01:03:38.980
through a couple of releases
on their own.

01:03:38.980 --> 01:03:41.260
And then there's a break, maybe
once a quarter or so,

01:03:41.260 --> 01:03:43.020
they say you know what,
let's catch up

01:03:43.020 --> 01:03:44.090
to the latest features.

01:03:44.090 --> 01:03:45.540
Let's see what we
can incorporate

01:03:45.540 --> 01:03:46.990
that we haven't yet.

01:03:46.990 --> 01:03:49.430
And then they'll bump
up the version.

01:03:49.430 --> 01:03:52.690
And so you should naturally
flow along with

01:03:52.690 --> 01:03:54.380
the App Engine releases.

01:03:54.380 --> 01:03:54.940
MANDY WAITE: OK.

01:03:54.940 --> 01:03:57.350
It's important to also stress
what we mentioned earlier.

01:03:57.350 --> 01:04:01.090
Experimental features are always
likely to change from

01:04:01.090 --> 01:04:02.140
one release to another.

01:04:02.140 --> 01:04:04.660
So if you are using an
experimental feature, you are

01:04:04.660 --> 01:04:06.170
probably getting an enormous
benefit just

01:04:06.170 --> 01:04:07.360
from using that feature.

01:04:07.360 --> 01:04:10.365
But you may have to adjust your
code when we release a

01:04:10.365 --> 01:04:12.490
new version, just to keep
up-to-speed with us.

01:04:12.490 --> 01:04:14.410
Hopefully, that's not a big
impact, though-- not something

01:04:14.410 --> 01:04:15.020
that causes huge--

01:04:15.020 --> 01:04:19.140
FRED SAUER: No, it's generally a
polish around the edges when

01:04:19.140 --> 01:04:20.650
it's in the experimental.

01:04:20.650 --> 01:04:23.810
Or we're still trying to collect
feedback from the

01:04:23.810 --> 01:04:26.650
community, find out new use
cases; Maybe there's ways that

01:04:26.650 --> 01:04:29.600
we can improve the
API a little bit.

01:04:29.600 --> 01:04:32.410
And so you've seen that, for
example, with the search API

01:04:32.410 --> 01:04:35.120
that from the very early
days to now,

01:04:35.120 --> 01:04:37.530
there's a couple of changes.

01:04:37.530 --> 01:04:42.110
But generally things have just
gotten better, and all of our

01:04:42.110 --> 01:04:44.260
users have been quite
happy with that.

01:04:44.260 --> 01:04:46.360
MANDY WAITE: All right,
excellent, OK.

01:04:46.360 --> 01:04:48.080
So we've got two
questions here.

01:04:48.080 --> 01:04:49.630
You can ask me one
if you want.

01:04:49.630 --> 01:04:51.654
FRED SAUER: OK, well I have a
couple here too I can ask you.

01:04:51.654 --> 01:04:52.890
MANDY WAITE: Oh, I see,
yeah, we can do it.

01:04:52.890 --> 01:04:54.250
You're putting me
on the spot now.

01:04:54.250 --> 01:04:55.240
FRED SAUER: I am.

01:04:55.240 --> 01:04:55.980
Let's see.

01:04:55.980 --> 01:04:58.520
Please share tips on rate
limiting requests without

01:04:58.520 --> 01:05:00.580
having to hit the DataStore.

01:05:00.580 --> 01:05:04.660
Memcache-based counter could
work, but item expiry time is

01:05:04.660 --> 01:05:05.910
a little bit unpredictable.

01:05:08.900 --> 01:05:13.180
How would you go about rate
limiting individual users?

01:05:13.180 --> 01:05:14.020
MANDY WAITE: Interesting,
I don't know.

01:05:14.020 --> 01:05:17.100
That's probably the kind of
thing that I have not actually

01:05:17.100 --> 01:05:17.840
run across yet.

01:05:17.840 --> 01:05:19.810
So I'm going to punt that
one to you as well.

01:05:19.810 --> 01:05:24.950
FRED SAUER: OK, well I think
the person here suggested a

01:05:24.950 --> 01:05:26.460
really good place to
start, which is a

01:05:26.460 --> 01:05:27.840
Memcache-based counter.

01:05:27.840 --> 01:05:30.040
Memcache is using--

01:05:30.040 --> 01:05:33.160
at least recently used--
an LRU-based cache.

01:05:33.160 --> 01:05:36.300
And that means that the users
that are most heavily

01:05:36.300 --> 01:05:40.950
accessing your application,
those Memcache keys are more

01:05:40.950 --> 01:05:42.980
likely to actually
be in the cache.

01:05:42.980 --> 01:05:45.620
And those that haven't been
around a while, they're

01:05:45.620 --> 01:05:47.570
further down the list, and
those will expire.

01:05:47.570 --> 01:05:49.880
So you sort of naturally get the
keys that you care about

01:05:49.880 --> 01:05:52.820
most recent memory.

01:05:52.820 --> 01:05:56.430
If you're looking at maybe
even more aggressive

01:05:56.430 --> 01:06:00.150
throttling, where maybe you have
some abusive users, and

01:06:00.150 --> 01:06:04.180
you really want to cap that
behavior down, you can take it

01:06:04.180 --> 01:06:06.950
up a notch and do some

01:06:06.950 --> 01:06:09.420
throttling within the instance.

01:06:09.420 --> 01:06:13.090
So you could introduce a data
structure, a global static

01:06:13.090 --> 01:06:19.810
variable, in your code, that for
each App Engine instance

01:06:19.810 --> 01:06:22.880
keeps track of the hot users
or users recently seen, and

01:06:22.880 --> 01:06:25.710
maybe throttles those
individually.

01:06:25.710 --> 01:06:27.890
And then if there's
a miss there,

01:06:27.890 --> 01:06:29.310
then you go to Memcache.

01:06:29.310 --> 01:06:30.830
And what you're doing
is you're just

01:06:30.830 --> 01:06:32.370
taking up another tier.

01:06:32.370 --> 01:06:36.030
You have at the bottom you
have the DataStore, where

01:06:36.030 --> 01:06:37.840
there's transactions
happening.

01:06:37.840 --> 01:06:41.380
And there's this limit of one
transaction per second that

01:06:41.380 --> 01:06:43.390
you want to deal with
per entity group.

01:06:43.390 --> 01:06:45.760
Then Memcache, you can
go much faster.

01:06:45.760 --> 01:06:48.340
And then in the Instance cache,
you can go even faster,

01:06:48.340 --> 01:06:49.980
because you're just in memory.

01:06:49.980 --> 01:06:53.800
There's no cross-network
call to be made.

01:06:53.800 --> 01:06:55.390
MANDY WAITE: OK.

01:06:55.390 --> 01:06:57.550
FRED SAUER: So, yeah, I think
Memcache is a great place to

01:06:57.550 --> 01:07:01.310
get started and you have to use
Instance caching if you

01:07:01.310 --> 01:07:02.310
need to there.

01:07:02.310 --> 01:07:04.302
Swell.

01:07:04.302 --> 01:07:06.620
Right, you had another
one, you said?

01:07:06.620 --> 01:07:07.935
MANDY WAITE: I do,
indeed, yeah.

01:07:07.935 --> 01:07:09.680
Last one-- last one
from the list.

01:07:09.680 --> 01:07:12.010
We have a few more over there.

01:07:12.010 --> 01:07:16.340
So for GAE Java, there are
detailed documentation for

01:07:16.340 --> 01:07:18.270
low-level DataStore API.

01:07:18.270 --> 01:07:21.100
However, fewer and incomplete
documentation for how to map

01:07:21.100 --> 01:07:23.950
entity relationships
with JDO and JPA.

01:07:23.950 --> 01:07:26.420
The data nucleus is detailed,
however, there's no easy way

01:07:26.420 --> 01:07:29.932
to tell if GAE supports
a feature.

01:07:29.932 --> 01:07:32.320
So, there's a question
in there somewhere.

01:07:32.320 --> 01:07:34.270
FRED SAUER: Yeah, so the
question is really, I think,

01:07:34.270 --> 01:07:39.300
around the giving to this the
full details and capabilities

01:07:39.300 --> 01:07:42.700
of JDO and JPA on App Engine.

01:07:42.700 --> 01:07:45.030
Maybe I should put this a
little bit in context.

01:07:45.030 --> 01:07:50.590
When we launched the Java
runtime on App Engine, we

01:07:50.590 --> 01:07:53.900
looked at the act of frameworks
and an abstraction

01:07:53.900 --> 01:07:57.520
that people were using, JDO
and JPA were very popular.

01:07:57.520 --> 01:08:00.080
And so we did a lot of work to
make sure that those were

01:08:00.080 --> 01:08:02.310
properly supported
in App Engine.

01:08:02.310 --> 01:08:07.840
We also felt like users really
benefited from SQL like

01:08:07.840 --> 01:08:14.690
language, and so we launched
GQL, as a way of

01:08:14.690 --> 01:08:16.319
accessing the DataStore.

01:08:16.319 --> 01:08:21.689
And what we found over time,
actually, is that developers

01:08:21.689 --> 01:08:24.760
after a little while feel much
more productive when they're

01:08:24.760 --> 01:08:28.470
working much closer with low
level APIs of App Engine, or

01:08:28.470 --> 01:08:32.910
some abstraction that sits on
top of those low level APIs.

01:08:32.910 --> 01:08:36.390
So in the case of Python,
we had the

01:08:36.390 --> 01:08:39.200
low-level Python DataStore.

01:08:39.200 --> 01:08:43.950
We've now iterative on that
and we have NDB, the new

01:08:43.950 --> 01:08:47.859
database, which is the way that
we wish we had written

01:08:47.859 --> 01:08:53.069
the first time with Memcache
built-in, and just usability

01:08:53.069 --> 01:08:55.689
is a lot better.

01:08:55.689 --> 01:08:58.710
On the Java side, we've actually
had the community

01:08:58.710 --> 01:09:01.810
step up and produce
an [INAUDIBLE]

01:09:01.810 --> 01:09:03.790
framework called objectify.

01:09:03.790 --> 01:09:04.640
And there's others out there.

01:09:04.640 --> 01:09:08.120
There's a developer in Japan who
created something called

01:09:08.120 --> 01:09:12.270
slim 3, it's another abstraction
layer for Java.

01:09:12.270 --> 01:09:17.899
And they do a really good job of
obstructing the way of the

01:09:17.899 --> 01:09:21.750
DataStore a little bit, but
still staying very close to

01:09:21.750 --> 01:09:24.960
the native performance
characteristics doing things

01:09:24.960 --> 01:09:26.359
the right way.

01:09:26.359 --> 01:09:30.380
Objectify, I know, also
has Memcache built-in.

01:09:30.380 --> 01:09:32.870
And it just lets you work
with POJOs-- so

01:09:32.870 --> 01:09:34.439
plain old Java objects.

01:09:34.439 --> 01:09:36.859
So you have a Java object with
a bunch properties--

01:09:36.859 --> 01:09:38.100
getters and setters--

01:09:38.100 --> 01:09:40.060
you can just take that object
and push it in the DataStore

01:09:40.060 --> 01:09:41.720
and get it right back out.

01:09:41.720 --> 01:09:46.819
And that feels a lot more
natural working in App Engine

01:09:46.819 --> 01:09:48.640
than in JDO and JPA.

01:09:48.640 --> 01:09:52.000
And so the way to look at those
technologies right now

01:09:52.000 --> 01:09:57.150
is if you're a big JDO and JPA
fan, or you just use those in

01:09:57.150 --> 01:09:59.790
your environment and you'd like
to, please continue to

01:09:59.790 --> 01:10:01.900
use them, they are
there for you.

01:10:01.900 --> 01:10:04.290
But if you're new to App
Engine or you're at all

01:10:04.290 --> 01:10:08.480
unfamiliar about JDO and JPA,
by all means, use either the

01:10:08.480 --> 01:10:13.030
low level APIs or something
like Objectify in Java,

01:10:13.030 --> 01:10:15.570
because you'll just have a
much better experience.

01:10:15.570 --> 01:10:19.320
And those were written from the
ground up for App Engine.

01:10:19.320 --> 01:10:21.850
Whereas JDO and JPA
were written in a

01:10:21.850 --> 01:10:25.190
world where SQLs came.

01:10:25.190 --> 01:10:28.830
And it's a little bit
of an unnatural fit.

01:10:28.830 --> 01:10:31.950
We got that square peg into the
round hole, but we had to

01:10:31.950 --> 01:10:34.675
use the hammer a little bit,
and so the corners are a

01:10:34.675 --> 01:10:35.945
little bit rounded off.

01:10:35.945 --> 01:10:36.210
MANDY WAITE: OK.

01:10:36.210 --> 01:10:38.982
I come from a Java EE
background, so I used to have

01:10:38.982 --> 01:10:40.232
a very big hammer.

01:10:42.970 --> 01:10:44.230
FRED SAUER: I'm just visualizing
the big hammer.

01:10:46.970 --> 01:10:48.780
Let's see, a question
here for you.

01:10:48.780 --> 01:10:52.190
At the rate at which you can
write the same entity group is

01:10:52.190 --> 01:11:00.080
limited to one entity group of
write per second, and this

01:11:00.080 --> 01:11:01.820
developer is writing,
it seems really low.

01:11:01.820 --> 01:11:04.200
If you're imagining a Facebook
applications with 200,000

01:11:04.200 --> 01:11:07.250
daily active users, which means
something like 20,000

01:11:07.250 --> 01:11:09.890
concurrent users on peak.

01:11:09.890 --> 01:11:11.260
So they're kind of
contrasting this.

01:11:11.260 --> 01:11:13.430
They say, well, on the one hand
I have 20,000 concurrent

01:11:13.430 --> 01:11:16.660
users all making requests at
the very same moment, and

01:11:16.660 --> 01:11:19.440
you're telling me
one per second?

01:11:19.440 --> 01:11:20.956
Where is the disconnect?

01:11:20.956 --> 01:11:22.890
MANDY WAITE: I think here
depends on what your entity

01:11:22.890 --> 01:11:25.360
group was actually developed
to represent and how

01:11:25.360 --> 01:11:27.720
extensively you've modeled
it and the way you've

01:11:27.720 --> 01:11:29.030
modeled your data.

01:11:29.030 --> 01:11:31.020
If your entity group is really
specific to the particular

01:11:31.020 --> 01:11:33.420
user that's making the call,
then you won't really have to

01:11:33.420 --> 01:11:34.115
worry about it.

01:11:34.115 --> 01:11:36.290
One write per second will
be perfectly adequate.

01:11:36.290 --> 01:11:38.120
But if you kind of sprawled
it a bit, and the entity

01:11:38.120 --> 01:11:41.670
intergroup touches multiple
users, then you're likely to

01:11:41.670 --> 01:11:43.820
have some contention in
that entity group.

01:11:43.820 --> 01:11:46.730
And so you have multiple users
banging away at the same time.

01:11:46.730 --> 01:11:50.580
So really it's best practices of
modeling your entities that

01:11:50.580 --> 01:11:52.680
will actually avoid that
kind of issue.

01:11:52.680 --> 01:11:57.700
So if you have 20,000 concurrent
requests, they're

01:11:57.700 --> 01:12:00.370
likely to be accessing 20,000
different entity groups.

01:12:00.370 --> 01:12:01.470
You wouldn't have an issue.

01:12:01.470 --> 01:12:03.190
FRED SAUER: And that
should be fine.

01:12:03.190 --> 01:12:06.910
If you want to do two million
concurrent users on two

01:12:06.910 --> 01:12:08.120
million different
entity groups,

01:12:08.120 --> 01:12:08.950
that's absolutely fine.

01:12:08.950 --> 01:12:10.450
MANDY WAITE: Absolutely.

01:12:10.450 --> 01:12:14.700
FRED SAUER: So think about
entity groups as, for the most

01:12:14.700 --> 01:12:17.970
part, your unit of
transactionality.

01:12:17.970 --> 01:12:22.640
So If you need some data related
to a given user, like

01:12:22.640 --> 01:12:25.690
a user and their achievements,
for example, and you have

01:12:25.690 --> 01:12:28.410
those stored in three or four
different entities, you can

01:12:28.410 --> 01:12:31.880
put them all in one entity
group, and then the App Engine

01:12:31.880 --> 01:12:34.690
DataStore will make sure that
you can only have one

01:12:34.690 --> 01:12:38.930
transaction in flight at a time
for that entity group.

01:12:38.930 --> 01:12:43.640
So generally what we see is
that each user becomes an

01:12:43.640 --> 01:12:48.020
entity group, or each order in
an order entry system, each

01:12:48.020 --> 01:12:51.800
customer in a CRM system becomes
an entity group.

01:12:51.800 --> 01:12:53.930
We actually also have--

01:12:53.930 --> 01:12:56.430
we didn't have this initially,
but now we introduced this

01:12:56.430 --> 01:12:58.130
again about a year ago--

01:12:58.130 --> 01:13:01.890
something called cross-entity
group transactions, or XG

01:13:01.890 --> 01:13:03.130
transactions.

01:13:03.130 --> 01:13:06.710
And that allows you to transact
up to five different

01:13:06.710 --> 01:13:10.010
entity groups in a single
transaction.

01:13:10.010 --> 01:13:14.690
So it used to be the case that
before we had XG transactions,

01:13:14.690 --> 01:13:18.830
there was a little bit of this
trade off between I want to

01:13:18.830 --> 01:13:20.620
make my entity groups bigger,
because I want to do

01:13:20.620 --> 01:13:22.900
transactions, but I need to make
them smaller to have the

01:13:22.900 --> 01:13:24.170
right throughput.

01:13:24.170 --> 01:13:25.570
And that was sometimes
a challenge.

01:13:25.570 --> 01:13:27.550
There were in fact libraries
that sprung up to try to

01:13:27.550 --> 01:13:30.930
figure out how to-- the classic
example is I've two

01:13:30.930 --> 01:13:31.770
bank accounts.

01:13:31.770 --> 01:13:35.100
I want to move $10 from this
bank account to that bank

01:13:35.100 --> 01:13:38.170
account, I need to do that
within a transaction.

01:13:38.170 --> 01:13:40.770
And if I deduct 10 here and
then add 10 there, and

01:13:40.770 --> 01:13:42.650
something goes wrong in the
middle, the $10 had

01:13:42.650 --> 01:13:43.530
disappeared.

01:13:43.530 --> 01:13:46.600
Or if I add $10 first, and then
remove $10, I've created

01:13:46.600 --> 01:13:47.740
$10 out of nothing.

01:13:47.740 --> 01:13:48.740
MANDY WAITE: I like that one.

01:13:48.740 --> 01:13:51.300
FRED SAUER: Well, let's
do that one.

01:13:51.300 --> 01:13:53.435
With cross-entity group
transactions, that's no longer

01:13:53.435 --> 01:13:55.090
a problem, you can actually
in a single

01:13:55.090 --> 01:13:57.960
transaction make that change.

01:13:57.960 --> 01:14:01.580
So really, I think, this is
all about just structuring

01:14:01.580 --> 01:14:05.705
your data store in such a way
that you do no more than one

01:14:05.705 --> 01:14:08.040
break per second.

01:14:08.040 --> 01:14:12.010
Another classic way that
people run into this is

01:14:12.010 --> 01:14:14.440
they'll do something like
they'll create a site counter.

01:14:14.440 --> 01:14:16.670
They want to know how many
visitors came to the website.

01:14:16.670 --> 01:14:17.390
MANDY WAITE: Exactly.

01:14:17.390 --> 01:14:18.970
FRED SAUER: Favorite
example, right?

01:14:18.970 --> 01:14:20.820
And do every time a user comes
onto the website, they

01:14:20.820 --> 01:14:21.950
increment the counter.

01:14:21.950 --> 01:14:26.330
And this is what you would do
in a SQL Database, you would

01:14:26.330 --> 01:14:31.520
increment a particular row in
the DataStore and the problem

01:14:31.520 --> 01:14:35.340
is only one person at a time
can update that one record,

01:14:35.340 --> 01:14:37.770
because that one record is on
disc somewhere, and there's

01:14:37.770 --> 01:14:40.010
some server responsible
for it.

01:14:40.010 --> 01:14:43.390
And you can only touch
that record one

01:14:43.390 --> 01:14:44.960
transaction at a time.

01:14:44.960 --> 01:14:47.290
And that's really limiting
for the number of

01:14:47.290 --> 01:14:49.080
things you can count.

01:14:49.080 --> 01:14:52.600
And so typical strategy that
you use for the App Engine

01:14:52.600 --> 01:14:55.300
DataStore, is to create
something called a charting

01:14:55.300 --> 01:14:57.670
counter, charted counter,
where you partition the

01:14:57.670 --> 01:14:59.560
counter into multiple
counters.

01:14:59.560 --> 01:15:03.600
So instead of, saying, say, one
counter, you split it out

01:15:03.600 --> 01:15:06.370
and say, OK, let's make
five counters or 50.

01:15:06.370 --> 01:15:08.800
Some number, and it's
configurable.

01:15:08.800 --> 01:15:11.270
And now every time someone
comes to the website, I'm

01:15:11.270 --> 01:15:14.230
going to at random pick a number
from one to five, and

01:15:14.230 --> 01:15:16.660
then I'm going to update
that counter.

01:15:16.660 --> 01:15:18.770
So, let's say, it's counter
three this time, the next

01:15:18.770 --> 01:15:20.340
visitor comes in, oh, it's
again, the counter three.

01:15:20.340 --> 01:15:21.860
Oh no, it's counter two.

01:15:21.860 --> 01:15:27.570
And you say, well, that's weird,
because now your total

01:15:27.570 --> 01:15:29.580
patriot count is
split up around

01:15:29.580 --> 01:15:32.080
five different counters.

01:15:32.080 --> 01:15:34.730
But that's not a big deal,
because you can easily select

01:15:34.730 --> 01:15:36.400
five numbers and add
them together.

01:15:36.400 --> 01:15:39.390
This is a very easy task
for a computer to do.

01:15:39.390 --> 01:15:42.310
But by doing so, you've just
increased the throughput of

01:15:42.310 --> 01:15:45.130
your web counter fivefold.

01:15:45.130 --> 01:15:49.410
If you need 50 transactions per
second, you go 50 fold,

01:15:49.410 --> 01:15:50.390
plus a little bit buffer.

01:15:50.390 --> 01:15:52.530
So maybe you go 60, or
something like that.

01:15:52.530 --> 01:15:55.590
It's very easy to chart your
counter out as far

01:15:55.590 --> 01:15:56.200
as you need to go.

01:15:56.200 --> 01:15:57.400
MANDY WAITE: There's actually
examples on the

01:15:57.400 --> 01:15:58.020
website, isn't there?

01:15:58.020 --> 01:16:01.690
FRED SAUER: Yeah,
it's an article.

01:16:01.690 --> 01:16:05.640
So with a little bit of data
modeling you can do as many

01:16:05.640 --> 01:16:07.440
concurrent users as you like.

01:16:07.440 --> 01:16:11.056
And, hopefully, you do a
lot more than 20,000.

01:16:11.056 --> 01:16:12.565
But 20,00o is pretty awesome.

01:16:12.565 --> 01:16:13.600
I wish my website had--

01:16:13.600 --> 01:16:15.460
MANDY WAITE: 20,000 is pretty
very good, yeah.

01:16:15.460 --> 01:16:18.230
Well, I guess the message here
really is avoid shared

01:16:18.230 --> 01:16:18.950
meterable stay.

01:16:18.950 --> 01:16:21.150
I love shared meterable
stay as a saying.

01:16:21.150 --> 01:16:23.100
Every time you share,
state is meterable.

01:16:23.100 --> 01:16:24.690
You're going to run into
problems with concurrently.

01:16:24.690 --> 01:16:27.190
So just keep it isolated.

01:16:27.190 --> 01:16:27.590
And--

01:16:27.590 --> 01:16:29.210
FRED SAUER: If do that, you're
going to have a bad time.

01:16:29.210 --> 01:16:30.460
MANDY WAITE: You're going
to have a bad time.

01:16:30.460 --> 01:16:31.300
Absolutely.

01:16:31.300 --> 01:16:32.910
FRED SAUER: Do you want
to ask me these ones?

01:16:32.910 --> 01:16:33.880
MANDY WAITE: Definitely, yeah.

01:16:33.880 --> 01:16:36.870
This one, I think everybody
is interested in.

01:16:36.870 --> 01:16:39.570
This person is asking the
question, what are 10

01:16:39.570 --> 01:16:41.520
different definitions
of the frontend

01:16:41.520 --> 01:16:44.090
versus the backend instance?

01:16:44.090 --> 01:16:46.970
And I'm still not very clear
what the difference is between

01:16:46.970 --> 01:16:48.000
frontends and backends.

01:16:48.000 --> 01:16:49.830
Is that something you can
explain to everybody?

01:16:49.830 --> 01:16:52.210
FRED SAUER: Yeah, so, actually,
you mentioned this

01:16:52.210 --> 01:16:55.060
in the introduction, sort
of the two different

01:16:55.060 --> 01:16:56.840
notions of a backend.

01:16:56.840 --> 01:16:59.830
You talked about mobile backends
for Cloud Endpoints.

01:16:59.830 --> 01:17:03.270
And then App Engine has a
specific definition of what

01:17:03.270 --> 01:17:06.140
the frontend is and what
the backend is.

01:17:06.140 --> 01:17:10.250
And, frankly, other customers
have said that's confusing.

01:17:10.250 --> 01:17:14.530
And we found it a little bit
limiting in what developers

01:17:14.530 --> 01:17:16.220
want to do with their
applications.

01:17:16.220 --> 01:17:18.660
And so if you have been actually
reading through the

01:17:18.660 --> 01:17:21.090
release notes carefully, you'll
notice that we've

01:17:21.090 --> 01:17:25.330
already started talking about
a new way of classifying

01:17:25.330 --> 01:17:28.850
components in an application,
called servers.

01:17:28.850 --> 01:17:32.010
And what we're going to do is
we're going to get rid of the

01:17:32.010 --> 01:17:35.450
two special cases the frontends
that do things one

01:17:35.450 --> 01:17:39.090
way, and the backends, who do
things slightly differently.

01:17:39.090 --> 01:17:41.990
And we're just going to say, you
can have as many different

01:17:41.990 --> 01:17:44.540
types of servers as you want.

01:17:44.540 --> 01:17:46.610
You can call them frontends
and backends.

01:17:46.610 --> 01:17:48.980
Maybe one of them is your mobile
API, and one is your

01:17:48.980 --> 01:17:53.170
admin API, and the third one
is something experimental.

01:17:53.170 --> 01:17:57.080
Maybe you have a component
that's text message

01:17:57.080 --> 01:18:00.000
processing, another component
that's real time interactive

01:18:00.000 --> 01:18:02.170
stuff, and the third
one that's reports.

01:18:02.170 --> 01:18:03.750
Every application
is different.

01:18:03.750 --> 01:18:07.250
But when you get beyond a
trivial application, you often

01:18:07.250 --> 01:18:10.460
want to logically split your
application into pieces, or

01:18:10.460 --> 01:18:13.080
you may want to deploy the
different pieces separately.

01:18:13.080 --> 01:18:15.840
Like your mobile backend that's
handling all your

01:18:15.840 --> 01:18:19.400
mobile requests, maybe you have
a new version for that.

01:18:19.400 --> 01:18:23.400
And with this we'll allow you to
see separate traffic graphs

01:18:23.400 --> 01:18:26.350
for each of your server
versions--

01:18:26.350 --> 01:18:27.930
your logs will be
separated out.

01:18:27.930 --> 01:18:31.320
So your mobile backend logs and
your static image logs can

01:18:31.320 --> 01:18:32.840
be separate.

01:18:32.840 --> 01:18:35.630
So all of that's coming.

01:18:35.630 --> 01:18:38.540
Just check out the release
notes, you'll see that.

01:18:38.540 --> 01:18:42.530
And just forgive us for calling
them frontends and

01:18:42.530 --> 01:18:46.360
backends, we'll make
that go away.

01:18:46.360 --> 01:18:49.550
You have an application, you
split it in logical pieces,

01:18:49.550 --> 01:18:51.830
and we'll allow you to configure
the different pieces

01:18:51.830 --> 01:18:54.770
the way you want, whether you
want different instance sizes,

01:18:54.770 --> 01:18:56.420
different logs, et cetera.

01:18:56.420 --> 01:18:58.175
MANDY WAITE: So things like
what if [INAUDIBLE] has

01:18:58.175 --> 01:19:00.820
currently autoscaling, that
would just be a property of a

01:19:00.820 --> 01:19:02.160
server instance-- of
a type of server.

01:19:02.160 --> 01:19:02.630
FRED SAUER: Exactly.

01:19:02.630 --> 01:19:07.610
So you say, if I have a mobile
backend, autoscaling on.

01:19:07.610 --> 01:19:11.200
I have this batch backend, where
I'm only going to do

01:19:11.200 --> 01:19:12.345
certain administrative tasks.

01:19:12.345 --> 01:19:14.600
I actually only want one
instance of the server

01:19:14.600 --> 01:19:17.140
running, and it's just going to
be crawling some database

01:19:17.140 --> 01:19:19.830
or doing some background work.

01:19:19.830 --> 01:19:21.870
And you can have variations
in between.

01:19:21.870 --> 01:19:22.420
MANDY WAITE: Excellent, OK.

01:19:22.420 --> 01:19:23.420
Sounds good.

01:19:23.420 --> 01:19:25.770
FRED SAUER: So we're making it
easier and we're simplifying

01:19:25.770 --> 01:19:27.370
the terminology.

01:19:27.370 --> 01:19:27.830
MANDY WAITE: Fantastic.

01:19:27.830 --> 01:19:28.290
Thank you.

01:19:28.290 --> 01:19:30.246
So you did explain it.

01:19:30.246 --> 01:19:32.910
FRED SAUER: I hope so.

01:19:32.910 --> 01:19:35.340
All right, question here.

01:19:35.340 --> 01:19:39.370
What are the best practices for
migrating from Python DB

01:19:39.370 --> 01:19:40.690
to the Python NDBAPI?

01:19:40.690 --> 01:19:43.156
MANDY WAITE: OK, so I've got
a confession to make here.

01:19:43.156 --> 01:19:43.890
FRED SAUER: OK.

01:19:43.890 --> 01:19:45.980
MANDY WAITE: I'm a Java girl.

01:19:45.980 --> 01:19:47.140
I come from a Java background.

01:19:47.140 --> 01:19:49.840
So I don't really deal with
a huge amount with NDB.

01:19:49.840 --> 01:19:51.880
I've actually looked through
the documentation, it looks

01:19:51.880 --> 01:19:54.130
really cool, but I wouldn't
know where to start.

01:19:54.130 --> 01:19:57.260
FRED SAUER: OK, well, so, I
have been calling myself a

01:19:57.260 --> 01:20:01.140
Java guy, but in the last year
and a half or so, I have to

01:20:01.140 --> 01:20:04.220
confess, I've been becoming
somewhat of a Python fan.

01:20:04.220 --> 01:20:06.540
And I've been taking my own
projects and migrating them.

01:20:06.540 --> 01:20:08.980
So I think I can say maybe
a few words about this.

01:20:12.280 --> 01:20:15.830
First thing is you don't have
to migrate all at ones.

01:20:15.830 --> 01:20:18.920
If you have an application, you
have many different Python

01:20:18.920 --> 01:20:21.820
classes, and you've models all
over the place, you can

01:20:21.820 --> 01:20:25.380
actually migrate a class follow
the time, you can

01:20:25.380 --> 01:20:30.120
migrate a model at a time, you
can intermix the two APIs.

01:20:30.120 --> 01:20:33.640
And the good news is that along
the way you'll probably,

01:20:33.640 --> 01:20:36.110
if you've done things around
Memcache caching, there's a

01:20:36.110 --> 01:20:39.830
lot of code you can delete,
because NDB just

01:20:39.830 --> 01:20:41.100
does things for you.

01:20:41.100 --> 01:20:44.160
The syntax between the two is
a little bit different.

01:20:44.160 --> 01:20:46.510
So one of the first things you
might do is maybe go around

01:20:46.510 --> 01:20:51.130
hunting for there's a cheat
sheet I've seeing that has the

01:20:51.130 --> 01:20:53.000
DB way and the NBD way.

01:20:53.000 --> 01:20:54.440
And that in the beginning
is very good

01:20:54.440 --> 01:20:55.900
for just like mapping.

01:20:55.900 --> 01:20:58.830
Like, oh I need to change
this around and do this.

01:20:58.830 --> 01:21:01.860
But you'll find that they're
very, very similar.

01:21:01.860 --> 01:21:05.440
And like I said, just do one
model at a time, one class at

01:21:05.440 --> 01:21:07.660
a time; test it, make
sure it works.

01:21:07.660 --> 01:21:09.400
And then keep going.

01:21:09.400 --> 01:21:12.800
And maybe what you do is you
start out with any new models

01:21:12.800 --> 01:21:15.410
that you create, do them in
NDB, so you start to get

01:21:15.410 --> 01:21:19.640
really familiar with it, and
then migrate your old stuff.

01:21:19.640 --> 01:21:23.050
But like with any real-time
application, where you're

01:21:23.050 --> 01:21:25.790
always serving requests, think
about ways of doing things

01:21:25.790 --> 01:21:30.300
incrementally, rather than
in one big step.

01:21:30.300 --> 01:21:35.960
I don't think there is really
anything, any other tips for

01:21:35.960 --> 01:21:37.443
people migrating.

01:21:37.443 --> 01:21:39.300
MANDY WAITE: What about people
getting started?

01:21:39.300 --> 01:21:42.970
So like when you're starting out
developing an App Engine

01:21:42.970 --> 01:21:45.410
application using Pythons, is it
immediately obvious in the

01:21:45.410 --> 01:21:47.710
documentation suchlike when
you're developing with DB and

01:21:47.710 --> 01:21:50.230
when you're developing
with NDB?

01:21:50.230 --> 01:21:54.260
Is it easy to get pushed
on one path?

01:21:54.260 --> 01:21:55.980
FRED SAUER: You can accidentally
flip between the

01:21:55.980 --> 01:21:59.820
two-- both are in the left nav
of the documentation, but it's

01:21:59.820 --> 01:22:02.800
very clear in your code, because
in one case you're

01:22:02.800 --> 01:22:08.730
importing from Google App Engine
EXTDB; and the other

01:22:08.730 --> 01:22:11.110
place you're doing NDB.

01:22:11.110 --> 01:22:12.670
So there's no confusion there.

01:22:12.670 --> 01:22:13.630
MANDY WAITE: OK.

01:22:13.630 --> 01:22:15.505
FRED SAUER: But, yeah, I do
find, when I'm clicking around

01:22:15.505 --> 01:22:18.710
the documentation, I sometimes
end up looking

01:22:18.710 --> 01:22:19.680
in the wrong one.

01:22:19.680 --> 01:22:20.940
You'll get through that.

01:22:20.940 --> 01:22:23.000
MANDY WAITE: So I guess if
people are reading books on

01:22:23.000 --> 01:22:26.090
App Engine development,
Python-based, they may be

01:22:26.090 --> 01:22:30.370
looking at older examples that
use DB, and probably worth

01:22:30.370 --> 01:22:33.140
spending some time, investing
some time to actually look at

01:22:33.140 --> 01:22:34.625
the differences in how you would
do that in NDB, rather

01:22:34.625 --> 01:22:37.870
than actually just writing up
the samples in the DB code.

01:22:37.870 --> 01:22:40.410
FRED SAUER: Absolutely, yeah,
if you're building anything

01:22:40.410 --> 01:22:44.100
new, you should only
be using NDB.

01:22:44.100 --> 01:22:50.590
The author who wrote both
basically he rewrote it and

01:22:50.590 --> 01:22:53.460
said this is how it should
have been done the first.

01:22:53.460 --> 01:22:58.780
So I can see a future where DB
is either deprecated or tucked

01:22:58.780 --> 01:23:01.250
away in the documentation
for very few to find.

01:23:01.250 --> 01:23:03.630
And NDB is just the way
you should be writing

01:23:03.630 --> 01:23:04.190
applications.

01:23:04.190 --> 01:23:07.630
And we've actually just going
through a process with our

01:23:07.630 --> 01:23:09.930
sample applications.

01:23:09.930 --> 01:23:14.220
So if you look on again GitHub
on the Google Cloud Platform,

01:23:14.220 --> 01:23:15.890
hopefully right now all
the samples have

01:23:15.890 --> 01:23:18.260
been updated to NDB.

01:23:18.260 --> 01:23:21.550
So if you want good samples of
best practices and how to do

01:23:21.550 --> 01:23:24.810
that, definitely go to
our GitHub page.

01:23:24.810 --> 01:23:25.280
MANDY WAITE: Excellent.

01:23:25.280 --> 01:23:26.220
OK.

01:23:26.220 --> 01:23:27.890
FRED SAUER: Let's see, we have
another question here.

01:23:27.890 --> 01:23:30.170
What's the best strategy to
respond to requests that

01:23:30.170 --> 01:23:33.700
probably take more than
60 to process?

01:23:33.700 --> 01:23:35.820
MANDY WAITE: Was that part
of the question?

01:23:35.820 --> 01:23:38.960
So make a backend process
to process the request.

01:23:38.960 --> 01:23:40.810
That's the best thing to do.

01:23:40.810 --> 01:23:44.880
You can do these things out
of band, or almost natural

01:23:44.880 --> 01:23:45.520
request itself.

01:23:45.520 --> 01:23:47.050
So the user makes a request.

01:23:47.050 --> 01:23:48.880
You need to actually service
that request within 60

01:23:48.880 --> 01:23:52.030
seconds, otherwise you'll hit a
deadline exceeded exception

01:23:52.030 --> 01:23:54.800
in both Java and Python
runtimes.

01:23:54.800 --> 01:23:59.780
That's the request timeout we
have that's always in place

01:23:59.780 --> 01:24:03.070
for what we call frontend
instances currently.

01:24:03.070 --> 01:24:05.150
There's no such limitation
in backend instances.

01:24:05.150 --> 01:24:08.170
So what Fred said about moving
to the server model, if you

01:24:08.170 --> 01:24:10.860
choose to use a standard
instance, so it's not using

01:24:10.860 --> 01:24:13.080
autoscale, those things
won't apply.

01:24:13.080 --> 01:24:16.380
It won't automatically hit
its request timeout.

01:24:16.380 --> 01:24:19.150
So the best thing to do is if
you need to do heavy lifting,

01:24:19.150 --> 01:24:25.200
then when working to answer a
user request you should find a

01:24:25.200 --> 01:24:27.750
way to do that asynchronously
out of band from actually

01:24:27.750 --> 01:24:29.170
responding to the user.

01:24:29.170 --> 01:24:33.140
So long running task, let's say
user makes a request that

01:24:33.140 --> 01:24:37.020
will result in generating 100
e-mails to different people.

01:24:37.020 --> 01:24:40.360
What you need to do is return a
request back, respond to the

01:24:40.360 --> 01:24:44.430
user pretty quickly; and
offline doing it in the

01:24:44.430 --> 01:24:45.040
background--

01:24:45.040 --> 01:24:48.850
the e-mail process using
a backend instance.

01:24:48.850 --> 01:24:50.790
It doesn't need to be a backend
instance, you could

01:24:50.790 --> 01:24:52.644
push it off the task queues, and
then you can start using

01:24:52.644 --> 01:24:55.280
things like Compute Engine
and suchlike.

01:24:55.280 --> 01:24:57.580
Compute Engine has the ability
to do pull requests using

01:24:57.580 --> 01:24:58.900
using task queues.

01:24:58.900 --> 01:25:02.880
So you can use Compute Engine
instances to service those

01:25:02.880 --> 01:25:04.060
requests as well.

01:25:04.060 --> 01:25:05.900
But yeah, basically take it
away from the frontend

01:25:05.900 --> 01:25:08.410
instances and push it into a
background somewhere, using

01:25:08.410 --> 01:25:10.330
the backend end process
or Compute Engine.

01:25:10.330 --> 01:25:14.500
FRED SAUER: Yeah, task queue is
definitely the way to go.

01:25:14.500 --> 01:25:17.830
The pull queues you mentioned
are great for working with

01:25:17.830 --> 01:25:21.630
external systems, like doing
off App Engine work, like

01:25:21.630 --> 01:25:25.760
Compute Engine, but you could
really do it on a server that

01:25:25.760 --> 01:25:28.360
you have sitting in a rack in
your office if you have some

01:25:28.360 --> 01:25:30.820
special processing that
you need to do.

01:25:30.820 --> 01:25:33.860
And then push queues are a great
way of enqueing work

01:25:33.860 --> 01:25:35.040
asynchronously.

01:25:35.040 --> 01:25:40.470
And those requests come back to
your application as if it

01:25:40.470 --> 01:25:43.050
were traffic, but its
internal traffic.

01:25:43.050 --> 01:25:44.680
So App Engine will scale
up and down if

01:25:44.680 --> 01:25:46.180
you create more requests.

01:25:46.180 --> 01:25:49.330
And then you have a
10-minute deadline

01:25:49.330 --> 01:25:50.550
instead of the 60-second.

01:25:50.550 --> 01:25:53.050
So you can easily make those
long running URL fetch calls

01:25:53.050 --> 01:25:54.350
or do more complex processing.

01:25:54.350 --> 01:25:56.830
MANDY WAITE: OK.

01:25:56.830 --> 01:26:01.800
FRED SAUER: All right, when a
user uploads a photo, like a

01:26:01.800 --> 01:26:05.450
movie or an audio clip, how do
you store it so it can be

01:26:05.450 --> 01:26:09.120
statically available to
your application?

01:26:09.120 --> 01:26:13.340
So it looks like they'd rather
not have a dynamic request

01:26:13.340 --> 01:26:17.410
handler, where they have to
handle the request and figure

01:26:17.410 --> 01:26:19.760
out what [INAUDIBLE] to serve,
what file to serve.

01:26:19.760 --> 01:26:21.780
But how do you make it available
statically, so the

01:26:21.780 --> 01:26:24.000
user can always get
to it without

01:26:24.000 --> 01:26:25.860
involving App Engine runtime?

01:26:25.860 --> 01:26:28.130
MANDY WAITE: So correct me if
I'm wrong, but I guess you

01:26:28.130 --> 01:26:31.840
would probably find a place
where you would actually store

01:26:31.840 --> 01:26:34.480
this photographs, other images
and movies- that

01:26:34.480 --> 01:26:36.680
kind of blob data.

01:26:36.680 --> 01:26:39.690
And then you would make sure
that you declare that folder,

01:26:39.690 --> 01:26:42.450
that directory to be a static
directory within the

01:26:42.450 --> 01:26:44.320
declaration of the
application.

01:26:44.320 --> 01:26:47.405
And that way all of that will
be pushed to the edge by our

01:26:47.405 --> 01:26:49.860
edge servers.

01:26:49.860 --> 01:26:54.340
FRED SAUER: Yeah, you could do
that for pre-defined content.

01:26:54.340 --> 01:26:57.830
If you're doing dynamically
uploaded content though, you'd

01:26:57.830 --> 01:27:00.420
probably do that through your
Google Cloud Storage.

01:27:00.420 --> 01:27:02.260
MANDY WAITE: Yes, basically
storing in Google Cloud

01:27:02.260 --> 01:27:04.240
Storage and then you can provide
a URL back to the user

01:27:04.240 --> 01:27:07.610
that can actually access it
directly from Cloud Storage,

01:27:07.610 --> 01:27:10.420
as opposed to going through
your App Engine instances.

01:27:10.420 --> 01:27:11.285
FRED SAUER: Exactly, yeah.

01:27:11.285 --> 01:27:12.660
MANDY WAITE: Yeah, good point.

01:27:12.660 --> 01:27:18.130
FRED SAUER: And, yeah, we have
a new Google Cloud Storage

01:27:18.130 --> 01:27:21.920
Client Library that you can
find in the groups.

01:27:21.920 --> 01:27:24.990
And it's basically a new library
for accessing Google

01:27:24.990 --> 01:27:28.640
Cloud Storage very easily and
efficiently from App Engine.

01:27:28.640 --> 01:27:30.760
So I'd probably use that
to get the files

01:27:30.760 --> 01:27:32.740
into the Cloud Storage.

01:27:32.740 --> 01:27:35.070
And then just like you
said, [INAUDIBLE]

01:27:35.070 --> 01:27:36.740
the URLs directly to that.

01:27:36.740 --> 01:27:37.860
MANDY WAITE: And it has the
additional benefit of not

01:27:37.860 --> 01:27:39.160
actually hits in
your instances.

01:27:39.160 --> 01:27:42.160
So you won't actually incur any
costs, because you'll be

01:27:42.160 --> 01:27:44.320
serving that data directly from
Google Cloud Storage.

01:27:44.320 --> 01:27:46.840
FRED SAUER: Yeah, you're just
paying for bandwidth, not CPU.

01:27:46.840 --> 01:27:48.330
Yeah.

01:27:48.330 --> 01:27:52.400
If I built my start up on App
Engine, will Google help me

01:27:52.400 --> 01:27:53.920
with publicity?

01:27:53.920 --> 01:27:55.970
MANDY WAITE: Well, I guess,
it depends how

01:27:55.970 --> 01:27:57.540
successful you are.

01:27:57.540 --> 01:28:00.050
FRED SAUER: Depends on how
cool an idea you have.

01:28:00.050 --> 01:28:05.740
You've probably seen a number of
customers with interesting

01:28:05.740 --> 01:28:08.970
stories on the App
Engine blog.

01:28:08.970 --> 01:28:11.030
I think if you came to
us with a really cool

01:28:11.030 --> 01:28:13.810
story, just reach out.

01:28:13.810 --> 01:28:17.200
We love to tell these stories
and share them with our users.

01:28:17.200 --> 01:28:18.910
So that's probably--

01:28:18.910 --> 01:28:19.870
yeah.

01:28:19.870 --> 01:28:20.950
MANDY WAITE: Tell us about
your application.

01:28:20.950 --> 01:28:22.765
Tell us about all the of the
cool and interesting things

01:28:22.765 --> 01:28:26.130
you're doing and we can
look into it for you.

01:28:26.130 --> 01:28:29.890
FRED SAUER: And also you and
I both do presentations.

01:28:29.890 --> 01:28:34.710
We often share partner stories
and things like that.

01:28:34.710 --> 01:28:37.240
So, definitely, tell
us about them.

01:28:37.240 --> 01:28:38.760
We'd love to feature them.

01:28:38.760 --> 01:28:39.760
MANDY WAITE: Yeah, definitely.

01:28:39.760 --> 01:28:43.610
FRED SAUER: Well, that was the
last question of our list.

01:28:43.610 --> 01:28:45.570
Looks like we've got to pretty
much everything.

01:28:45.570 --> 01:28:51.520
There is a couple that we
skipped over due to time.

01:28:51.520 --> 01:28:54.650
I want to thank all the viewers
for visiting today.

01:28:54.650 --> 01:28:58.160
Send us more questions if
you really like this.

01:28:58.160 --> 01:29:00.180
Let us know, because we can
definitely do it again.

01:29:00.180 --> 01:29:02.650
I think it was fun answering
questions.

01:29:02.650 --> 01:29:03.890
Thank you, Mandy, for doing the

01:29:03.890 --> 01:29:04.870
presentation at the beginning.

01:29:04.870 --> 01:29:05.860
It was very helpful.

01:29:05.860 --> 01:29:06.420
MANDY WAITE: Thank you, Fred.

01:29:06.420 --> 01:29:08.930
And don't forget Google
I/O next week.

01:29:08.930 --> 01:29:12.950
Follow it as live if you
possibly can, if the sessions

01:29:12.950 --> 01:29:14.600
you are interested in are
actually being streamed live.

01:29:14.600 --> 01:29:16.570
If not, follow them on
YouTube afterwards or

01:29:16.570 --> 01:29:18.210
the Google I/O sites.

01:29:18.210 --> 01:29:19.830
The links, as I say, are
in the the YouTube

01:29:19.830 --> 01:29:21.760
video of this recording.

01:29:21.760 --> 01:29:23.070
And also, if you can,
participate

01:29:23.070 --> 01:29:24.840
in Google I/O Extended.

01:29:24.840 --> 01:29:27.570
So that's really one way of
getting involved in Google I/O

01:29:27.570 --> 01:29:28.790
outside of event itself.

01:29:28.790 --> 01:29:29.650
FRED SAUER: Yeah.

01:29:29.650 --> 01:29:30.310
All right.

01:29:30.310 --> 01:29:31.180
Thank you.

01:29:31.180 --> 01:29:31.840
MANDY WAITE: Thank you so much.

01:29:31.840 --> 01:29:32.120
Cheers.

01:29:32.120 --> 01:29:33.370
Bye-bye.

01:29:40.588 --> 01:31:42.572
[MUSIC PLAYING]

